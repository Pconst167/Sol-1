0001   0000             ; --- FILENAME: games/startrek.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; intro(); 
0011   0408             ; --- START FUNCTION CALL
0012   0408 07 05 0A      call intro
0013   040B             ; new_game(); 
0014   040B             ; --- START FUNCTION CALL
0015   040B 07 A8 0A      call new_game
0016   040E             ; return 0; 
0017   040E FD 2E 00 00   mov32 cb, $00000000
0017   0412 00 00 
0018   0414 F9            leave
0019   0415 05 0B         syscall sys_terminate_proc
0020   0417             
0021   0417             TO_FIXED:
0022   0417 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0023   041A             ; return x * 10; 
0024   041A FA 05 00      lea d, [bp + 5] ; $x
0025   041D 2A            mov b, [d]
0026   041E 38 00 00      mov c, 0
0027   0421             ; --- START FACTORS
0028   0421 D7            push a
0029   0422 FD D8         push g
0030   0424 11            mov a, b
0031   0425 FD 7A         mov g, c
0032   0427 FD 2E 0A 00   mov32 cb, $0000000a
0032   042B 00 00 
0033   042D D7            push a     ; save left operand
0034   042E 8E            xor a, b   ; xor sign bits
0035   042F FD AA         swp a      ; swap bytes
0036   0431 83            mov cl, al ; save result of xor into 'dl'
0037   0432 E4            pop a      ; restore left side operator
0038   0433 DF            push cl    ; save result of xor above
0039   0434 FD AA         swp a  
0040   0436 93 80         test al, $80  
0041   0438 FD AA         swp a  
0042   043A C6 3F 04      jz skip_invert_a_2  
0043   043D FD 95         neg a 
0044   043F             skip_invert_a_2:   
0045   043F FD AB         swp b
0046   0441 FD 93 80      test bl, $80  
0047   0444 FD AB         swp b
0048   0446 C6 4B 04      jz skip_invert_b_2  
0049   0449 FD 97         neg b 
0050   044B             skip_invert_b_2:   
0051   044B AC            mul a, b ; *
0052   044C FD 78         mov g, a
0053   044E 11            mov a, b
0054   044F EA            pop bl
0055   0450 FD 93 80      test bl, $80
0056   0453 C6 60 04      jz _same_signs_2
0057   0456 2F            mov bl, al
0058   0457 95            not a
0059   0458 FD 97         neg b
0060   045A 5B 00 00      adc a, 0
0061   045D FD 78         mov g, a
0062   045F 11            mov a, b
0063   0460             _same_signs_2:
0064   0460 FD 38         mov c, g
0065   0462 27            mov b, a
0066   0463 FD F1         pop g
0067   0465 E4            pop a
0068   0466             ; --- END FACTORS
0069   0466 F9            leave
0070   0467 09            ret
0071   0468             
0072   0468             FROM_FIXED:
0073   0468 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0074   046B             ; return x / 10; 
0075   046B FA 05 00      lea d, [bp + 5] ; $x
0076   046E 2A            mov b, [d]
0077   046F 38 00 00      mov c, 0
0078   0472             ; --- START FACTORS
0079   0472 D7            push a
0080   0473 FD D8         push g
0081   0475 11            mov a, b
0082   0476 FD 7A         mov g, c
0083   0478 FD 2E 0A 00   mov32 cb, $0000000a
0083   047C 00 00 
0084   047E FD D8         push g ; save 'g' as the div instruction uses it
0085   0480 AE            div a, b ; /, a: quotient, b: remainder
0086   0481 FD F1         pop g
0087   0483 FD 38         mov c, g
0088   0485 27            mov b, a
0089   0486 FD F1         pop g
0090   0488 E4            pop a
0091   0489             ; --- END FACTORS
0092   0489 F9            leave
0093   048A 09            ret
0094   048B             
0095   048B             TO_FIXED00:
0096   048B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0097   048E             ; return x * 100; 
0098   048E FA 05 00      lea d, [bp + 5] ; $x
0099   0491 2A            mov b, [d]
0100   0492 38 00 00      mov c, 0
0101   0495             ; --- START FACTORS
0102   0495 D7            push a
0103   0496 FD D8         push g
0104   0498 11            mov a, b
0105   0499 FD 7A         mov g, c
0106   049B FD 2E 64 00   mov32 cb, $00000064
0106   049F 00 00 
0107   04A1 D7            push a     ; save left operand
0108   04A2 8E            xor a, b   ; xor sign bits
0109   04A3 FD AA         swp a      ; swap bytes
0110   04A5 83            mov cl, al ; save result of xor into 'dl'
0111   04A6 E4            pop a      ; restore left side operator
0112   04A7 DF            push cl    ; save result of xor above
0113   04A8 FD AA         swp a  
0114   04AA 93 80         test al, $80  
0115   04AC FD AA         swp a  
0116   04AE C6 B3 04      jz skip_invert_a_6  
0117   04B1 FD 95         neg a 
0118   04B3             skip_invert_a_6:   
0119   04B3 FD AB         swp b
0120   04B5 FD 93 80      test bl, $80  
0121   04B8 FD AB         swp b
0122   04BA C6 BF 04      jz skip_invert_b_6  
0123   04BD FD 97         neg b 
0124   04BF             skip_invert_b_6:   
0125   04BF AC            mul a, b ; *
0126   04C0 FD 78         mov g, a
0127   04C2 11            mov a, b
0128   04C3 EA            pop bl
0129   04C4 FD 93 80      test bl, $80
0130   04C7 C6 D4 04      jz _same_signs_6
0131   04CA 2F            mov bl, al
0132   04CB 95            not a
0133   04CC FD 97         neg b
0134   04CE 5B 00 00      adc a, 0
0135   04D1 FD 78         mov g, a
0136   04D3 11            mov a, b
0137   04D4             _same_signs_6:
0138   04D4 FD 38         mov c, g
0139   04D6 27            mov b, a
0140   04D7 FD F1         pop g
0141   04D9 E4            pop a
0142   04DA             ; --- END FACTORS
0143   04DA F9            leave
0144   04DB 09            ret
0145   04DC             
0146   04DC             FROM_FIXED00:
0147   04DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0148   04DF             ; return x / 100; 
0149   04DF FA 05 00      lea d, [bp + 5] ; $x
0150   04E2 2A            mov b, [d]
0151   04E3 38 00 00      mov c, 0
0152   04E6             ; --- START FACTORS
0153   04E6 D7            push a
0154   04E7 FD D8         push g
0155   04E9 11            mov a, b
0156   04EA FD 7A         mov g, c
0157   04EC FD 2E 64 00   mov32 cb, $00000064
0157   04F0 00 00 
0158   04F2 FD D8         push g ; save 'g' as the div instruction uses it
0159   04F4 AE            div a, b ; /, a: quotient, b: remainder
0160   04F5 FD F1         pop g
0161   04F7 FD 38         mov c, g
0162   04F9 27            mov b, a
0163   04FA FD F1         pop g
0164   04FC E4            pop a
0165   04FD             ; --- END FACTORS
0166   04FD F9            leave
0167   04FE 09            ret
0168   04FF             
0169   04FF             get_rand:
0170   04FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0171   0502             ; unsigned int         r ; 
0172   0502 52 02 00      sub sp, 2
0173   0505             ; r = rand(); 
0174   0505 FA FF FF      lea d, [bp + -1] ; $r
0175   0508 DA            push d
0176   0509             ; --- START FUNCTION CALL
0177   0509 07 A6 5E      call rand
0178   050C E7            pop d
0179   050D FD 43         mov [d], b
0180   050F             ; r = (r >> 8) | (r << 8); 
0181   050F FA FF FF      lea d, [bp + -1] ; $r
0182   0512 DA            push d
0183   0513 FA FF FF      lea d, [bp + -1] ; $r
0184   0516 2A            mov b, [d]
0185   0517 38 00 00      mov c, 0
0186   051A             ; --- START SHIFT
0187   051A D7            push a
0188   051B 11            mov a, b
0189   051C FD 2E 08 00   mov32 cb, $00000008
0189   0520 00 00 
0190   0522 FD 39         mov c, b
0191   0524 A1            shr a, cl
0192   0525 27            mov b, a
0193   0526 E4            pop a
0194   0527             ; --- END SHIFT
0195   0527 D7            push a
0196   0528 11            mov a, b
0197   0529 FA FF FF      lea d, [bp + -1] ; $r
0198   052C 2A            mov b, [d]
0199   052D 38 00 00      mov c, 0
0200   0530             ; --- START SHIFT
0201   0530 D7            push a
0202   0531 11            mov a, b
0203   0532 FD 2E 08 00   mov32 cb, $00000008
0203   0536 00 00 
0204   0538 FD 39         mov c, b
0205   053A 9D            shl a, cl
0206   053B 27            mov b, a
0207   053C E4            pop a
0208   053D             ; --- END SHIFT
0209   053D FD 70         or b, a ; |
0210   053F E4            pop a
0211   0540 E7            pop d
0212   0541 FD 43         mov [d], b
0213   0543             ; return ((r % spread) + 1); 
0214   0543 FA FF FF      lea d, [bp + -1] ; $r
0215   0546 2A            mov b, [d]
0216   0547 38 00 00      mov c, 0
0217   054A             ; --- START FACTORS
0218   054A D7            push a
0219   054B FD D8         push g
0220   054D 11            mov a, b
0221   054E FD 7A         mov g, c
0222   0550 FA 05 00      lea d, [bp + 5] ; $spread
0223   0553 2A            mov b, [d]
0224   0554 38 00 00      mov c, 0
0225   0557 FD D8         push g ; save 'g' as the div instruction uses it
0226   0559 AE            div a, b ; %, a: quotient, b: remainder
0227   055A 11            mov a, b
0228   055B FD F1         pop g
0229   055D FD 38         mov c, g
0230   055F 27            mov b, a
0231   0560 FD F1         pop g
0232   0562 E4            pop a
0233   0563             ; --- END FACTORS
0234   0563             ; --- START TERMS
0235   0563 D7            push a
0236   0564 11            mov a, b
0237   0565 FD 2E 01 00   mov32 cb, $00000001
0237   0569 00 00 
0238   056B 56            add b, a
0239   056C E4            pop a
0240   056D             ; --- END TERMS
0241   056D F9            leave
0242   056E 09            ret
0243   056F             
0244   056F             rand8:
0245   056F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0246   0572             ; return (get_rand(8)); 
0247   0572             ; --- START FUNCTION CALL
0248   0572 FD 2E 08 00   mov32 cb, $00000008
0248   0576 00 00 
0249   0578 FD AB         swp b
0250   057A D8            push b
0251   057B 07 FF 04      call get_rand
0252   057E 51 02 00      add sp, 2
0253   0581             ; --- END FUNCTION CALL
0254   0581 F9            leave
0255   0582 09            ret
0256   0583             
0257   0583             input:
0258   0583 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0259   0586             ; int c; 
0260   0586 52 02 00      sub sp, 2
0261   0589             ; while((c = getchar()) != '\n') { 
0262   0589             _while17_cond:
0263   0589 FA FF FF      lea d, [bp + -1] ; $c
0264   058C DA            push d
0265   058D             ; --- START FUNCTION CALL
0266   058D 07 1B 5E      call getchar
0267   0590 E7            pop d
0268   0591 FD 43         mov [d], b
0269   0593             ; --- START RELATIONAL
0270   0593 D7            push a
0271   0594 11            mov a, b
0272   0595 FD 2E 0A 00   mov32 cb, $0000000a
0272   0599 00 00 
0273   059B B0            cmp a, b
0274   059C FD 72         sneq ; !=
0275   059E E4            pop a
0276   059F             ; --- END RELATIONAL
0277   059F C0 00 00      cmp b, 0
0278   05A2 C6 1E 06      je _while17_exit
0279   05A5             _while17_block:
0280   05A5             ; if (c == -1) 
0281   05A5             _if18_cond:
0282   05A5 FA FF FF      lea d, [bp + -1] ; $c
0283   05A8 2A            mov b, [d]
0284   05A9 38 00 00      mov c, 0
0285   05AC             ; --- START RELATIONAL
0286   05AC D7            push a
0287   05AD 11            mov a, b
0288   05AE FD 2E FF FF   mov32 cb, $ffffffff
0288   05B2 FF FF 
0289   05B4 B0            cmp a, b
0290   05B5 FD 71         seq ; ==
0291   05B7 E4            pop a
0292   05B8             ; --- END RELATIONAL
0293   05B8 C0 00 00      cmp b, 0
0294   05BB C6 D0 05      je _if18_exit
0295   05BE             _if18_TRUE:
0296   05BE             ; exit(1); 
0297   05BE             ; --- START FUNCTION CALL
0298   05BE FD 2E 01 00   mov32 cb, $00000001
0298   05C2 00 00 
0299   05C4 FD AB         swp b
0300   05C6 D8            push b
0301   05C7 07 35 5E      call exit
0302   05CA 51 02 00      add sp, 2
0303   05CD             ; --- END FUNCTION CALL
0304   05CD 0A D0 05      jmp _if18_exit
0305   05D0             _if18_exit:
0306   05D0             ; if (l > 1) { 
0307   05D0             _if19_cond:
0308   05D0 FA 07 00      lea d, [bp + 7] ; $l
0309   05D3 32            mov bl, [d]
0310   05D4 A7 00         mov bh, 0
0311   05D6 38 00 00      mov c, 0
0312   05D9             ; --- START RELATIONAL
0313   05D9 D7            push a
0314   05DA 11            mov a, b
0315   05DB FD 2E 01 00   mov32 cb, $00000001
0315   05DF 00 00 
0316   05E1 B0            cmp a, b
0317   05E2 FD 81         sgu ; > (unsigned)
0318   05E4 E4            pop a
0319   05E5             ; --- END RELATIONAL
0320   05E5 C0 00 00      cmp b, 0
0321   05E8 C6 1B 06      je _if19_exit
0322   05EB             _if19_TRUE:
0323   05EB             ; *b++ = c; 
0324   05EB FA 05 00      lea d, [bp + 5] ; $b
0325   05EE 2A            mov b, [d]
0326   05EF 38 00 00      mov c, 0
0327   05F2 FD 77         inc b
0328   05F4 FA 05 00      lea d, [bp + 5] ; $b
0329   05F7 FD 43         mov [d], b
0330   05F9 FD 7D         dec b
0331   05FB D8            push b
0332   05FC FA FF FF      lea d, [bp + -1] ; $c
0333   05FF 2A            mov b, [d]
0334   0600 38 00 00      mov c, 0
0335   0603 E7            pop d
0336   0604 FD 3E         mov [d], bl
0337   0606             ; l--; 
0338   0606 FA 07 00      lea d, [bp + 7] ; $l
0339   0609 32            mov bl, [d]
0340   060A A7 00         mov bh, 0
0341   060C 38 00 00      mov c, 0
0342   060F FD 7D         dec b
0343   0611 FA 07 00      lea d, [bp + 7] ; $l
0344   0614 FD 3E         mov [d], bl
0345   0616 FD 77         inc b
0346   0618 0A 1B 06      jmp _if19_exit
0347   061B             _if19_exit:
0348   061B 0A 89 05      jmp _while17_cond
0349   061E             _while17_exit:
0350   061E             ; *b = 0; 
0351   061E FA 05 00      lea d, [bp + 5] ; $b
0352   0621 2A            mov b, [d]
0353   0622 38 00 00      mov c, 0
0354   0625 D8            push b
0355   0626 FD 2E 00 00   mov32 cb, $00000000
0355   062A 00 00 
0356   062C E7            pop d
0357   062D FD 3E         mov [d], bl
0358   062F F9            leave
0359   0630 09            ret
0360   0631             
0361   0631             yesno:
0362   0631 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0363   0634             ; char b[2]; 
0364   0634 52 02 00      sub sp, 2
0365   0637             ; input(b,2); 
0366   0637             ; --- START FUNCTION CALL
0367   0637 FD 2E 02 00   mov32 cb, $00000002
0367   063B 00 00 
0368   063D DD            push bl
0369   063E FA FF FF      lea d, [bp + -1] ; $b
0370   0641 2D            mov b, d
0371   0642 38 00 00      mov c, 0
0372   0645 FD AB         swp b
0373   0647 D8            push b
0374   0648 07 83 05      call input
0375   064B 51 03 00      add sp, 3
0376   064E             ; --- END FUNCTION CALL
0377   064E             ; tolower(*b); 
0378   064E             ; --- START FUNCTION CALL
0379   064E FA FF FF      lea d, [bp + -1] ; $b
0380   0651 2D            mov b, d
0381   0652 38 00 00      mov c, 0
0382   0655 74            mov d, b
0383   0656 32            mov bl, [d]
0384   0657 A7 00         mov bh, 0
0385   0659 38 00 00      mov c, 0
0386   065C DD            push bl
0387   065D 07 40 5E      call tolower
0388   0660 51 01 00      add sp, 1
0389   0663             ; --- END FUNCTION CALL
0390   0663             ; return 1; 
0391   0663 FD 2E 01 00   mov32 cb, $00000001
0391   0667 00 00 
0392   0669 F9            leave
0393   066A 09            ret
0394   066B             ; return 0; 
0395   066B FD 2E 00 00   mov32 cb, $00000000
0395   066F 00 00 
0396   0671 F9            leave
0397   0672 09            ret
0398   0673             
0399   0673             input_f00:
0400   0673 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0401   0676             ; int        v; 
0402   0676 52 02 00      sub sp, 2
0403   0679             ; char buf[8]; 
0404   0679 52 08 00      sub sp, 8
0405   067C             ; char *x; 
0406   067C 52 02 00      sub sp, 2
0407   067F             ; input(buf, 8); 
0408   067F             ; --- START FUNCTION CALL
0409   067F FD 2E 08 00   mov32 cb, $00000008
0409   0683 00 00 
0410   0685 DD            push bl
0411   0686 FA F7 FF      lea d, [bp + -9] ; $buf
0412   0689 2D            mov b, d
0413   068A 38 00 00      mov c, 0
0414   068D FD AB         swp b
0415   068F D8            push b
0416   0690 07 83 05      call input
0417   0693 51 03 00      add sp, 3
0418   0696             ; --- END FUNCTION CALL
0419   0696             ; x = buf; 
0420   0696 FA F5 FF      lea d, [bp + -11] ; $x
0421   0699 DA            push d
0422   069A FA F7 FF      lea d, [bp + -9] ; $buf
0423   069D 2D            mov b, d
0424   069E 38 00 00      mov c, 0
0425   06A1 E7            pop d
0426   06A2 FD 43         mov [d], b
0427   06A4             ; if (!is_digit(*x)) 
0428   06A4             _if20_cond:
0429   06A4             ; --- START FUNCTION CALL
0430   06A4 FA F5 FF      lea d, [bp + -11] ; $x
0431   06A7 2A            mov b, [d]
0432   06A8 38 00 00      mov c, 0
0433   06AB 74            mov d, b
0434   06AC 32            mov bl, [d]
0435   06AD A7 00         mov bh, 0
0436   06AF 38 00 00      mov c, 0
0437   06B2 DD            push bl
0438   06B3 07 32 6B      call is_digit
0439   06B6 51 01 00      add sp, 1
0440   06B9             ; --- END FUNCTION CALL
0441   06B9 C0 00 00      cmp b, 0
0442   06BC C6 CA 06      je _if20_exit
0443   06BF             _if20_TRUE:
0444   06BF             ; return -1; 
0445   06BF FD 2E FF FF   mov32 cb, $ffffffff
0445   06C3 FF FF 
0446   06C5 F9            leave
0447   06C6 09            ret
0448   06C7 0A CA 06      jmp _if20_exit
0449   06CA             _if20_exit:
0450   06CA             ; v = 100 * (*x++ - '0'); 
0451   06CA FA FF FF      lea d, [bp + -1] ; $v
0452   06CD DA            push d
0453   06CE FD 2E 64 00   mov32 cb, $00000064
0453   06D2 00 00 
0454   06D4             ; --- START FACTORS
0455   06D4 D7            push a
0456   06D5 FD D8         push g
0457   06D7 11            mov a, b
0458   06D8 FD 7A         mov g, c
0459   06DA FA F5 FF      lea d, [bp + -11] ; $x
0460   06DD 2A            mov b, [d]
0461   06DE 38 00 00      mov c, 0
0462   06E1 FD 77         inc b
0463   06E3 FA F5 FF      lea d, [bp + -11] ; $x
0464   06E6 FD 43         mov [d], b
0465   06E8 FD 7D         dec b
0466   06EA 74            mov d, b
0467   06EB 32            mov bl, [d]
0468   06EC A7 00         mov bh, 0
0469   06EE 38 00 00      mov c, 0
0470   06F1             ; --- START TERMS
0471   06F1 D7            push a
0472   06F2 11            mov a, b
0473   06F3 FD 2E 30 00   mov32 cb, $00000030
0473   06F7 00 00 
0474   06F9 60            sub a, b
0475   06FA 27            mov b, a
0476   06FB E4            pop a
0477   06FC             ; --- END TERMS
0478   06FC D7            push a     ; save left operand
0479   06FD 8E            xor a, b   ; xor sign bits
0480   06FE FD AA         swp a      ; swap bytes
0481   0700 83            mov cl, al ; save result of xor into 'dl'
0482   0701 E4            pop a      ; restore left side operator
0483   0702 DF            push cl    ; save result of xor above
0484   0703 FD AA         swp a  
0485   0705 93 80         test al, $80  
0486   0707 FD AA         swp a  
0487   0709 C6 0E 07      jz skip_invert_a_22  
0488   070C FD 95         neg a 
0489   070E             skip_invert_a_22:   
0490   070E FD AB         swp b
0491   0710 FD 93 80      test bl, $80  
0492   0713 FD AB         swp b
0493   0715 C6 1A 07      jz skip_invert_b_22  
0494   0718 FD 97         neg b 
0495   071A             skip_invert_b_22:   
0496   071A AC            mul a, b ; *
0497   071B FD 78         mov g, a
0498   071D 11            mov a, b
0499   071E EA            pop bl
0500   071F FD 93 80      test bl, $80
0501   0722 C6 2F 07      jz _same_signs_22
0502   0725 2F            mov bl, al
0503   0726 95            not a
0504   0727 FD 97         neg b
0505   0729 5B 00 00      adc a, 0
0506   072C FD 78         mov g, a
0507   072E 11            mov a, b
0508   072F             _same_signs_22:
0509   072F FD 38         mov c, g
0510   0731 27            mov b, a
0511   0732 FD F1         pop g
0512   0734 E4            pop a
0513   0735             ; --- END FACTORS
0514   0735 E7            pop d
0515   0736 FD 43         mov [d], b
0516   0738             ; if (*x == 0) 
0517   0738             _if23_cond:
0518   0738 FA F5 FF      lea d, [bp + -11] ; $x
0519   073B 2A            mov b, [d]
0520   073C 38 00 00      mov c, 0
0521   073F 74            mov d, b
0522   0740 32            mov bl, [d]
0523   0741 A7 00         mov bh, 0
0524   0743 38 00 00      mov c, 0
0525   0746             ; --- START RELATIONAL
0526   0746 D7            push a
0527   0747 11            mov a, b
0528   0748 FD 2E 00 00   mov32 cb, $00000000
0528   074C 00 00 
0529   074E B0            cmp a, b
0530   074F FD 71         seq ; ==
0531   0751 E4            pop a
0532   0752             ; --- END RELATIONAL
0533   0752 C0 00 00      cmp b, 0
0534   0755 C6 64 07      je _if23_exit
0535   0758             _if23_TRUE:
0536   0758             ; return v; 
0537   0758 FA FF FF      lea d, [bp + -1] ; $v
0538   075B 2A            mov b, [d]
0539   075C 38 00 00      mov c, 0
0540   075F F9            leave
0541   0760 09            ret
0542   0761 0A 64 07      jmp _if23_exit
0543   0764             _if23_exit:
0544   0764             ; if (*x++ != '.') 
0545   0764             _if24_cond:
0546   0764 FA F5 FF      lea d, [bp + -11] ; $x
0547   0767 2A            mov b, [d]
0548   0768 38 00 00      mov c, 0
0549   076B FD 77         inc b
0550   076D FA F5 FF      lea d, [bp + -11] ; $x
0551   0770 FD 43         mov [d], b
0552   0772 FD 7D         dec b
0553   0774 74            mov d, b
0554   0775 32            mov bl, [d]
0555   0776 A7 00         mov bh, 0
0556   0778 38 00 00      mov c, 0
0557   077B             ; --- START RELATIONAL
0558   077B D7            push a
0559   077C 11            mov a, b
0560   077D FD 2E 2E 00   mov32 cb, $0000002e
0560   0781 00 00 
0561   0783 B0            cmp a, b
0562   0784 FD 72         sneq ; !=
0563   0786 E4            pop a
0564   0787             ; --- END RELATIONAL
0565   0787 C0 00 00      cmp b, 0
0566   078A C6 98 07      je _if24_exit
0567   078D             _if24_TRUE:
0568   078D             ; return -1; 
0569   078D FD 2E FF FF   mov32 cb, $ffffffff
0569   0791 FF FF 
0570   0793 F9            leave
0571   0794 09            ret
0572   0795 0A 98 07      jmp _if24_exit
0573   0798             _if24_exit:
0574   0798             ; if (!is_digit(*x)) 
0575   0798             _if25_cond:
0576   0798             ; --- START FUNCTION CALL
0577   0798 FA F5 FF      lea d, [bp + -11] ; $x
0578   079B 2A            mov b, [d]
0579   079C 38 00 00      mov c, 0
0580   079F 74            mov d, b
0581   07A0 32            mov bl, [d]
0582   07A1 A7 00         mov bh, 0
0583   07A3 38 00 00      mov c, 0
0584   07A6 DD            push bl
0585   07A7 07 32 6B      call is_digit
0586   07AA 51 01 00      add sp, 1
0587   07AD             ; --- END FUNCTION CALL
0588   07AD C0 00 00      cmp b, 0
0589   07B0 C6 BE 07      je _if25_exit
0590   07B3             _if25_TRUE:
0591   07B3             ; return -1; 
0592   07B3 FD 2E FF FF   mov32 cb, $ffffffff
0592   07B7 FF FF 
0593   07B9 F9            leave
0594   07BA 09            ret
0595   07BB 0A BE 07      jmp _if25_exit
0596   07BE             _if25_exit:
0597   07BE             ; v = v + 10 * (*x++ - '0'); 
0598   07BE FA FF FF      lea d, [bp + -1] ; $v
0599   07C1 DA            push d
0600   07C2 FA FF FF      lea d, [bp + -1] ; $v
0601   07C5 2A            mov b, [d]
0602   07C6 38 00 00      mov c, 0
0603   07C9             ; --- START TERMS
0604   07C9 D7            push a
0605   07CA 11            mov a, b
0606   07CB FD 2E 0A 00   mov32 cb, $0000000a
0606   07CF 00 00 
0607   07D1             ; --- START FACTORS
0608   07D1 D7            push a
0609   07D2 FD D8         push g
0610   07D4 11            mov a, b
0611   07D5 FD 7A         mov g, c
0612   07D7 FA F5 FF      lea d, [bp + -11] ; $x
0613   07DA 2A            mov b, [d]
0614   07DB 38 00 00      mov c, 0
0615   07DE FD 77         inc b
0616   07E0 FA F5 FF      lea d, [bp + -11] ; $x
0617   07E3 FD 43         mov [d], b
0618   07E5 FD 7D         dec b
0619   07E7 74            mov d, b
0620   07E8 32            mov bl, [d]
0621   07E9 A7 00         mov bh, 0
0622   07EB 38 00 00      mov c, 0
0623   07EE             ; --- START TERMS
0624   07EE D7            push a
0625   07EF 11            mov a, b
0626   07F0 FD 2E 30 00   mov32 cb, $00000030
0626   07F4 00 00 
0627   07F6 60            sub a, b
0628   07F7 27            mov b, a
0629   07F8 E4            pop a
0630   07F9             ; --- END TERMS
0631   07F9 D7            push a     ; save left operand
0632   07FA 8E            xor a, b   ; xor sign bits
0633   07FB FD AA         swp a      ; swap bytes
0634   07FD 83            mov cl, al ; save result of xor into 'dl'
0635   07FE E4            pop a      ; restore left side operator
0636   07FF DF            push cl    ; save result of xor above
0637   0800 FD AA         swp a  
0638   0802 93 80         test al, $80  
0639   0804 FD AA         swp a  
0640   0806 C6 0B 08      jz skip_invert_a_27  
0641   0809 FD 95         neg a 
0642   080B             skip_invert_a_27:   
0643   080B FD AB         swp b
0644   080D FD 93 80      test bl, $80  
0645   0810 FD AB         swp b
0646   0812 C6 17 08      jz skip_invert_b_27  
0647   0815 FD 97         neg b 
0648   0817             skip_invert_b_27:   
0649   0817 AC            mul a, b ; *
0650   0818 FD 78         mov g, a
0651   081A 11            mov a, b
0652   081B EA            pop bl
0653   081C FD 93 80      test bl, $80
0654   081F C6 2C 08      jz _same_signs_27
0655   0822 2F            mov bl, al
0656   0823 95            not a
0657   0824 FD 97         neg b
0658   0826 5B 00 00      adc a, 0
0659   0829 FD 78         mov g, a
0660   082B 11            mov a, b
0661   082C             _same_signs_27:
0662   082C FD 38         mov c, g
0663   082E 27            mov b, a
0664   082F FD F1         pop g
0665   0831 E4            pop a
0666   0832             ; --- END FACTORS
0667   0832 56            add b, a
0668   0833 E4            pop a
0669   0834             ; --- END TERMS
0670   0834 E7            pop d
0671   0835 FD 43         mov [d], b
0672   0837             ; if (!*x) 
0673   0837             _if28_cond:
0674   0837 FA F5 FF      lea d, [bp + -11] ; $x
0675   083A 2A            mov b, [d]
0676   083B 38 00 00      mov c, 0
0677   083E 74            mov d, b
0678   083F 32            mov bl, [d]
0679   0840 A7 00         mov bh, 0
0680   0842 38 00 00      mov c, 0
0681   0845 C0 00 00      cmp b, 0
0682   0848 FD 71         seq ; !
0683   084A C0 00 00      cmp b, 0
0684   084D C6 5C 08      je _if28_exit
0685   0850             _if28_TRUE:
0686   0850             ; return v; 
0687   0850 FA FF FF      lea d, [bp + -1] ; $v
0688   0853 2A            mov b, [d]
0689   0854 38 00 00      mov c, 0
0690   0857 F9            leave
0691   0858 09            ret
0692   0859 0A 5C 08      jmp _if28_exit
0693   085C             _if28_exit:
0694   085C             ; if (!is_digit(*x)) 
0695   085C             _if29_cond:
0696   085C             ; --- START FUNCTION CALL
0697   085C FA F5 FF      lea d, [bp + -11] ; $x
0698   085F 2A            mov b, [d]
0699   0860 38 00 00      mov c, 0
0700   0863 74            mov d, b
0701   0864 32            mov bl, [d]
0702   0865 A7 00         mov bh, 0
0703   0867 38 00 00      mov c, 0
0704   086A DD            push bl
0705   086B 07 32 6B      call is_digit
0706   086E 51 01 00      add sp, 1
0707   0871             ; --- END FUNCTION CALL
0708   0871 C0 00 00      cmp b, 0
0709   0874 C6 82 08      je _if29_exit
0710   0877             _if29_TRUE:
0711   0877             ; return -1; 
0712   0877 FD 2E FF FF   mov32 cb, $ffffffff
0712   087B FF FF 
0713   087D F9            leave
0714   087E 09            ret
0715   087F 0A 82 08      jmp _if29_exit
0716   0882             _if29_exit:
0717   0882             ; v = v + *x++ - '0'; 
0718   0882 FA FF FF      lea d, [bp + -1] ; $v
0719   0885 DA            push d
0720   0886 FA FF FF      lea d, [bp + -1] ; $v
0721   0889 2A            mov b, [d]
0722   088A 38 00 00      mov c, 0
0723   088D             ; --- START TERMS
0724   088D D7            push a
0725   088E 11            mov a, b
0726   088F FA F5 FF      lea d, [bp + -11] ; $x
0727   0892 2A            mov b, [d]
0728   0893 38 00 00      mov c, 0
0729   0896 FD 77         inc b
0730   0898 FA F5 FF      lea d, [bp + -11] ; $x
0731   089B FD 43         mov [d], b
0732   089D FD 7D         dec b
0733   089F 74            mov d, b
0734   08A0 32            mov bl, [d]
0735   08A1 A7 00         mov bh, 0
0736   08A3 38 00 00      mov c, 0
0737   08A6 56            add b, a
0738   08A7 11            mov a, b
0739   08A8 FD 2E 30 00   mov32 cb, $00000030
0739   08AC 00 00 
0740   08AE 60            sub a, b
0741   08AF 27            mov b, a
0742   08B0 E4            pop a
0743   08B1             ; --- END TERMS
0744   08B1 E7            pop d
0745   08B2 FD 43         mov [d], b
0746   08B4             ; return v; 
0747   08B4 FA FF FF      lea d, [bp + -1] ; $v
0748   08B7 2A            mov b, [d]
0749   08B8 38 00 00      mov c, 0
0750   08BB F9            leave
0751   08BC 09            ret
0752   08BD             
0753   08BD             input_int:
0754   08BD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0755   08C0             ; char x[8]; 
0756   08C0 52 08 00      sub sp, 8
0757   08C3             ; input(x, 8); 
0758   08C3             ; --- START FUNCTION CALL
0759   08C3 FD 2E 08 00   mov32 cb, $00000008
0759   08C7 00 00 
0760   08C9 DD            push bl
0761   08CA FA F9 FF      lea d, [bp + -7] ; $x
0762   08CD 2D            mov b, d
0763   08CE 38 00 00      mov c, 0
0764   08D1 FD AB         swp b
0765   08D3 D8            push b
0766   08D4 07 83 05      call input
0767   08D7 51 03 00      add sp, 3
0768   08DA             ; --- END FUNCTION CALL
0769   08DA             ; if (!is_digit(*x)) 
0770   08DA             _if30_cond:
0771   08DA             ; --- START FUNCTION CALL
0772   08DA FA F9 FF      lea d, [bp + -7] ; $x
0773   08DD 2D            mov b, d
0774   08DE 38 00 00      mov c, 0
0775   08E1 74            mov d, b
0776   08E2 32            mov bl, [d]
0777   08E3 A7 00         mov bh, 0
0778   08E5 38 00 00      mov c, 0
0779   08E8 DD            push bl
0780   08E9 07 32 6B      call is_digit
0781   08EC 51 01 00      add sp, 1
0782   08EF             ; --- END FUNCTION CALL
0783   08EF C0 00 00      cmp b, 0
0784   08F2 C6 00 09      je _if30_exit
0785   08F5             _if30_TRUE:
0786   08F5             ; return -1; 
0787   08F5 FD 2E FF FF   mov32 cb, $ffffffff
0787   08F9 FF FF 
0788   08FB F9            leave
0789   08FC 09            ret
0790   08FD 0A 00 09      jmp _if30_exit
0791   0900             _if30_exit:
0792   0900             ; return atoi(x); 
0793   0900             ; --- START FUNCTION CALL
0794   0900 FA F9 FF      lea d, [bp + -7] ; $x
0795   0903 2D            mov b, d
0796   0904 38 00 00      mov c, 0
0797   0907 FD AB         swp b
0798   0909 D8            push b
0799   090A 07 97 6B      call atoi
0800   090D 51 02 00      add sp, 2
0801   0910             ; --- END FUNCTION CALL
0802   0910 F9            leave
0803   0911 09            ret
0804   0912             
0805   0912             print100:
0806   0912 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0807   0915             ; static char buf[16]; 
0808   0915 52 10 00      sub sp, 16
0809   0918             ; char *p; 
0810   0918 52 02 00      sub sp, 2
0811   091B             ; *p = buf; 
0812   091B FA FF FF      lea d, [bp + -1] ; $p
0813   091E 2A            mov b, [d]
0814   091F 38 00 00      mov c, 0
0815   0922 D8            push b
0816   0923 3B 4F 70      mov d, st_print100_buf_dt ; static buf
0817   0926 2D            mov b, d
0818   0927 38 00 00      mov c, 0
0819   092A E7            pop d
0820   092B FD 3E         mov [d], bl
0821   092D             ; if (v < 0) { 
0822   092D             _if31_cond:
0823   092D FA 05 00      lea d, [bp + 5] ; $v
0824   0930 2A            mov b, [d]
0825   0931 38 00 00      mov c, 0
0826   0934             ; --- START RELATIONAL
0827   0934 D7            push a
0828   0935 11            mov a, b
0829   0936 FD 2E 00 00   mov32 cb, $00000000
0829   093A 00 00 
0830   093C B0            cmp a, b
0831   093D FD 73         slt ; < (signed)
0832   093F E4            pop a
0833   0940             ; --- END RELATIONAL
0834   0940 C0 00 00      cmp b, 0
0835   0943 C6 73 09      je _if31_exit
0836   0946             _if31_TRUE:
0837   0946             ; v = -v; 
0838   0946 FA 05 00      lea d, [bp + 5] ; $v
0839   0949 DA            push d
0840   094A FA 05 00      lea d, [bp + 5] ; $v
0841   094D 2A            mov b, [d]
0842   094E 38 00 00      mov c, 0
0843   0951 FD 97         neg b
0844   0953 E7            pop d
0845   0954 FD 43         mov [d], b
0846   0956             ; *p++ = '-'; 
0847   0956 FA FF FF      lea d, [bp + -1] ; $p
0848   0959 2A            mov b, [d]
0849   095A 38 00 00      mov c, 0
0850   095D FD 77         inc b
0851   095F FA FF FF      lea d, [bp + -1] ; $p
0852   0962 FD 43         mov [d], b
0853   0964 FD 7D         dec b
0854   0966 D8            push b
0855   0967 FD 2E 2D 00   mov32 cb, $0000002d
0855   096B 00 00 
0856   096D E7            pop d
0857   096E FD 3E         mov [d], bl
0858   0970 0A 73 09      jmp _if31_exit
0859   0973             _if31_exit:
0860   0973             ; return buf; 
0861   0973 3B 4F 70      mov d, st_print100_buf_dt ; static buf
0862   0976 2D            mov b, d
0863   0977 38 00 00      mov c, 0
0864   097A F9            leave
0865   097B 09            ret
0866   097C             
0867   097C             inoperable:
0868   097C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0869   097F             ; if (damage[u] < 0) { 
0870   097F             _if32_cond:
0871   097F 3B 6B 6E      mov d, _damage_data ; $damage
0872   0982 D7            push a
0873   0983 DA            push d
0874   0984 FA 05 00      lea d, [bp + 5] ; $u
0875   0987 32            mov bl, [d]
0876   0988 A7 00         mov bh, 0
0877   098A 38 00 00      mov c, 0
0878   098D E7            pop d
0879   098E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0880   0992 E4            pop a
0881   0993 2A            mov b, [d]
0882   0994 38 00 00      mov c, 0
0883   0997             ; --- START RELATIONAL
0884   0997 D7            push a
0885   0998 11            mov a, b
0886   0999 FD 2E 00 00   mov32 cb, $00000000
0886   099D 00 00 
0887   099F B0            cmp a, b
0888   09A0 FD 73         slt ; < (signed)
0889   09A2 E4            pop a
0890   09A3             ; --- END RELATIONAL
0891   09A3 C0 00 00      cmp b, 0
0892   09A6 C6 FD 09      je _if32_exit
0893   09A9             _if32_TRUE:
0894   09A9             ; printf("%s %s inoperable.\n", 
0895   09A9             ; --- START FUNCTION CALL
0896   09A9             _ternary34_cond:
0897   09A9 FA 05 00      lea d, [bp + 5] ; $u
0898   09AC 32            mov bl, [d]
0899   09AD A7 00         mov bh, 0
0900   09AF 38 00 00      mov c, 0
0901   09B2             ; --- START RELATIONAL
0902   09B2 D7            push a
0903   09B3 11            mov a, b
0904   09B4 FD 2E 05 00   mov32 cb, $00000005
0904   09B8 00 00 
0905   09BA B0            cmp a, b
0906   09BB FD 71         seq ; ==
0907   09BD E4            pop a
0908   09BE             ; --- END RELATIONAL
0909   09BE C0 00 00      cmp b, 0
0910   09C1 C6 CA 09      je _ternary34_FALSE
0911   09C4             _ternary34_TRUE:
0912   09C4 26 85 71      mov b, _s30 ; "are"
0913   09C7 0A CD 09      jmp _ternary34_exit
0914   09CA             _ternary34_FALSE:
0915   09CA 26 89 71      mov b, _s31 ; "is"
0916   09CD             _ternary34_exit:
0917   09CD FD AB         swp b
0918   09CF D8            push b
0919   09D0             ; --- START FUNCTION CALL
0920   09D0 FA 05 00      lea d, [bp + 5] ; $u
0921   09D3 32            mov bl, [d]
0922   09D4 A7 00         mov bh, 0
0923   09D6 38 00 00      mov c, 0
0924   09D9 AB            snex b
0925   09DA FD AB         swp b
0926   09DC D8            push b
0927   09DD 07 63 59      call get_device_name
0928   09E0 51 02 00      add sp, 2
0929   09E3             ; --- END FUNCTION CALL
0930   09E3 FD AB         swp b
0931   09E5 D8            push b
0932   09E6 26 8C 71      mov b, _s32 ; "%s %s inoperable.\n"
0933   09E9 FD AB         swp b
0934   09EB D8            push b
0935   09EC 07 78 60      call printf
0936   09EF 51 06 00      add sp, 6
0937   09F2             ; --- END FUNCTION CALL
0938   09F2             ; return 1; 
0939   09F2 FD 2E 01 00   mov32 cb, $00000001
0939   09F6 00 00 
0940   09F8 F9            leave
0941   09F9 09            ret
0942   09FA 0A FD 09      jmp _if32_exit
0943   09FD             _if32_exit:
0944   09FD             ; return 0; 
0945   09FD FD 2E 00 00   mov32 cb, $00000000
0945   0A01 00 00 
0946   0A03 F9            leave
0947   0A04 09            ret
0948   0A05             
0949   0A05             intro:
0950   0A05 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0951   0A08             ; showfile("startrek.intro"); 
0952   0A08             ; --- START FUNCTION CALL
0953   0A08 26 9F 71      mov b, _s33 ; "startrek.intro"
0954   0A0B FD AB         swp b
0955   0A0D D8            push b
0956   0A0E 07 16 5E      call showfile
0957   0A11 51 02 00      add sp, 2
0958   0A14             ; --- END FUNCTION CALL
0959   0A14             ; if (yesno()) 
0960   0A14             _if35_cond:
0961   0A14             ; --- START FUNCTION CALL
0962   0A14 07 31 06      call yesno
0963   0A17 C0 00 00      cmp b, 0
0964   0A1A C6 2C 0A      je _if35_exit
0965   0A1D             _if35_TRUE:
0966   0A1D             ; showfile("startrek.doc"); 
0967   0A1D             ; --- START FUNCTION CALL
0968   0A1D 26 AE 71      mov b, _s34 ; "startrek.doc"
0969   0A20 FD AB         swp b
0970   0A22 D8            push b
0971   0A23 07 16 5E      call showfile
0972   0A26 51 02 00      add sp, 2
0973   0A29             ; --- END FUNCTION CALL
0974   0A29 0A 2C 0A      jmp _if35_exit
0975   0A2C             _if35_exit:
0976   0A2C             ; showfile("startrek.logo"); 
0977   0A2C             ; --- START FUNCTION CALL
0978   0A2C 26 BB 71      mov b, _s35 ; "startrek.logo"
0979   0A2F FD AB         swp b
0980   0A31 D8            push b
0981   0A32 07 16 5E      call showfile
0982   0A35 51 02 00      add sp, 2
0983   0A38             ; --- END FUNCTION CALL
0984   0A38             ; stardate = TO_FIXED((get_rand(20) + 20) * 100); 
0985   0A38 3B 83 6E      mov d, _stardate ; $stardate
0986   0A3B DA            push d
0987   0A3C             ; --- START FUNCTION CALL
0988   0A3C             ; --- START FUNCTION CALL
0989   0A3C FD 2E 14 00   mov32 cb, $00000014
0989   0A40 00 00 
0990   0A42 FD AB         swp b
0991   0A44 D8            push b
0992   0A45 07 FF 04      call get_rand
0993   0A48 51 02 00      add sp, 2
0994   0A4B             ; --- END FUNCTION CALL
0995   0A4B             ; --- START TERMS
0996   0A4B D7            push a
0997   0A4C 11            mov a, b
0998   0A4D FD 2E 14 00   mov32 cb, $00000014
0998   0A51 00 00 
0999   0A53 56            add b, a
1000   0A54 E4            pop a
1001   0A55             ; --- END TERMS
1002   0A55             ; --- START FACTORS
1003   0A55 D7            push a
1004   0A56 FD D8         push g
1005   0A58 11            mov a, b
1006   0A59 FD 7A         mov g, c
1007   0A5B FD 2E 64 00   mov32 cb, $00000064
1007   0A5F 00 00 
1008   0A61 D7            push a     ; save left operand
1009   0A62 8E            xor a, b   ; xor sign bits
1010   0A63 FD AA         swp a      ; swap bytes
1011   0A65 83            mov cl, al ; save result of xor into 'dl'
1012   0A66 E4            pop a      ; restore left side operator
1013   0A67 DF            push cl    ; save result of xor above
1014   0A68 FD AA         swp a  
1015   0A6A 93 80         test al, $80  
1016   0A6C FD AA         swp a  
1017   0A6E C6 73 0A      jz skip_invert_a_39  
1018   0A71 FD 95         neg a 
1019   0A73             skip_invert_a_39:   
1020   0A73 FD AB         swp b
1021   0A75 FD 93 80      test bl, $80  
1022   0A78 FD AB         swp b
1023   0A7A C6 7F 0A      jz skip_invert_b_39  
1024   0A7D FD 97         neg b 
1025   0A7F             skip_invert_b_39:   
1026   0A7F AC            mul a, b ; *
1027   0A80 FD 78         mov g, a
1028   0A82 11            mov a, b
1029   0A83 EA            pop bl
1030   0A84 FD 93 80      test bl, $80
1031   0A87 C6 94 0A      jz _same_signs_39
1032   0A8A 2F            mov bl, al
1033   0A8B 95            not a
1034   0A8C FD 97         neg b
1035   0A8E 5B 00 00      adc a, 0
1036   0A91 FD 78         mov g, a
1037   0A93 11            mov a, b
1038   0A94             _same_signs_39:
1039   0A94 FD 38         mov c, g
1040   0A96 27            mov b, a
1041   0A97 FD F1         pop g
1042   0A99 E4            pop a
1043   0A9A             ; --- END FACTORS
1044   0A9A FD AB         swp b
1045   0A9C D8            push b
1046   0A9D 07 17 04      call TO_FIXED
1047   0AA0 51 02 00      add sp, 2
1048   0AA3             ; --- END FUNCTION CALL
1049   0AA3 E7            pop d
1050   0AA4 FD 43         mov [d], b
1051   0AA6 F9            leave
1052   0AA7 09            ret
1053   0AA8             
1054   0AA8             new_game:
1055   0AA8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1056   0AAB             ; char cmd[4]; 
1057   0AAB 52 04 00      sub sp, 4
1058   0AAE             ; initialize(); 
1059   0AAE             ; --- START FUNCTION CALL
1060   0AAE 07 67 0D      call initialize
1061   0AB1             ; new_quadrant(); 
1062   0AB1             ; --- START FUNCTION CALL
1063   0AB1 07 A6 12      call new_quadrant
1064   0AB4             ; short_range_scan(); 
1065   0AB4             ; --- START FUNCTION CALL
1066   0AB4 07 86 25      call short_range_scan
1067   0AB7             ; while (1) { 
1068   0AB7             _while40_cond:
1069   0AB7 FD 2E 01 00   mov32 cb, $00000001
1069   0ABB 00 00 
1070   0ABD C0 00 00      cmp b, 0
1071   0AC0 C6 65 0D      je _while40_exit
1072   0AC3             _while40_block:
1073   0AC3             ; if (shield + energy <= 10 && (energy < 10 || damage[7] < 0)) { 
1074   0AC3             _if41_cond:
1075   0AC3 3B 64 6E      mov d, _shield ; $shield
1076   0AC6 2A            mov b, [d]
1077   0AC7 38 00 00      mov c, 0
1078   0ACA             ; --- START TERMS
1079   0ACA D7            push a
1080   0ACB 11            mov a, b
1081   0ACC 3B A9 6D      mov d, _energy ; $energy
1082   0ACF 2A            mov b, [d]
1083   0AD0 38 00 00      mov c, 0
1084   0AD3 56            add b, a
1085   0AD4 E4            pop a
1086   0AD5             ; --- END TERMS
1087   0AD5             ; --- START RELATIONAL
1088   0AD5 D7            push a
1089   0AD6 11            mov a, b
1090   0AD7 FD 2E 0A 00   mov32 cb, $0000000a
1090   0ADB 00 00 
1091   0ADD B0            cmp a, b
1092   0ADE FD 74         sle ; <= (signed)
1093   0AE0 E4            pop a
1094   0AE1             ; --- END RELATIONAL
1095   0AE1             ; --- START LOGICAL AND
1096   0AE1 D7            push a
1097   0AE2 11            mov a, b
1098   0AE3 3B A9 6D      mov d, _energy ; $energy
1099   0AE6 2A            mov b, [d]
1100   0AE7 38 00 00      mov c, 0
1101   0AEA             ; --- START RELATIONAL
1102   0AEA D7            push a
1103   0AEB 11            mov a, b
1104   0AEC FD 2E 0A 00   mov32 cb, $0000000a
1104   0AF0 00 00 
1105   0AF2 B0            cmp a, b
1106   0AF3 FD 73         slt ; < (signed)
1107   0AF5 E4            pop a
1108   0AF6             ; --- END RELATIONAL
1109   0AF6             ; --- START LOGICAL OR
1110   0AF6 D7            push a
1111   0AF7 11            mov a, b
1112   0AF8 3B 6B 6E      mov d, _damage_data ; $damage
1113   0AFB D7            push a
1114   0AFC DA            push d
1115   0AFD FD 2E 07 00   mov32 cb, $00000007
1115   0B01 00 00 
1116   0B03 E7            pop d
1117   0B04 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1118   0B08 E4            pop a
1119   0B09 2A            mov b, [d]
1120   0B0A 38 00 00      mov c, 0
1121   0B0D             ; --- START RELATIONAL
1122   0B0D D7            push a
1123   0B0E 11            mov a, b
1124   0B0F FD 2E 00 00   mov32 cb, $00000000
1124   0B13 00 00 
1125   0B15 B0            cmp a, b
1126   0B16 FD 73         slt ; < (signed)
1127   0B18 E4            pop a
1128   0B19             ; --- END RELATIONAL
1129   0B19 FD A8         sor a, b ; ||
1130   0B1B E4            pop a
1131   0B1C             ; --- END LOGICAL OR
1132   0B1C FD A7         sand a, b
1133   0B1E E4            pop a
1134   0B1F             ; --- END LOGICAL AND
1135   0B1F C0 00 00      cmp b, 0
1136   0B22 C6 37 0B      je _if41_exit
1137   0B25             _if41_TRUE:
1138   0B25             ; showfile("startrek.fatal"); 
1139   0B25             ; --- START FUNCTION CALL
1140   0B25 26 C9 71      mov b, _s36 ; "startrek.fatal"
1141   0B28 FD AB         swp b
1142   0B2A D8            push b
1143   0B2B 07 16 5E      call showfile
1144   0B2E 51 02 00      add sp, 2
1145   0B31             ; --- END FUNCTION CALL
1146   0B31             ; end_of_time(); 
1147   0B31             ; --- START FUNCTION CALL
1148   0B31 07 E2 4E      call end_of_time
1149   0B34 0A 37 0B      jmp _if41_exit
1150   0B37             _if41_exit:
1151   0B37             ; puts("Command? "); 
1152   0B37             ; --- START FUNCTION CALL
1153   0B37 26 D8 71      mov b, _s37 ; "Command? "
1154   0B3A FD AB         swp b
1155   0B3C D8            push b
1156   0B3D 07 85 69      call puts
1157   0B40 51 02 00      add sp, 2
1158   0B43             ; --- END FUNCTION CALL
1159   0B43             ; input(cmd, 4); 
1160   0B43             ; --- START FUNCTION CALL
1161   0B43 FD 2E 04 00   mov32 cb, $00000004
1161   0B47 00 00 
1162   0B49 DD            push bl
1163   0B4A FA FD FF      lea d, [bp + -3] ; $cmd
1164   0B4D 2D            mov b, d
1165   0B4E 38 00 00      mov c, 0
1166   0B51 FD AB         swp b
1167   0B53 D8            push b
1168   0B54 07 83 05      call input
1169   0B57 51 03 00      add sp, 3
1170   0B5A             ; --- END FUNCTION CALL
1171   0B5A             ; putchar('\n'); 
1172   0B5A             ; --- START FUNCTION CALL
1173   0B5A FD 2E 0A 00   mov32 cb, $0000000a
1173   0B5E 00 00 
1174   0B60 DD            push bl
1175   0B61 07 FA 64      call putchar
1176   0B64 51 01 00      add sp, 1
1177   0B67             ; --- END FUNCTION CALL
1178   0B67             ; if (!strncmp(cmd, "nav", 3)) 
1179   0B67             _if42_cond:
1180   0B67             ; --- START FUNCTION CALL
1181   0B67 FD 2E 03 00   mov32 cb, $00000003
1181   0B6B 00 00 
1182   0B6D FD AB         swp b
1183   0B6F D8            push b
1184   0B70 26 E2 71      mov b, _s38 ; "nav"
1185   0B73 FD AB         swp b
1186   0B75 D8            push b
1187   0B76 FA FD FF      lea d, [bp + -3] ; $cmd
1188   0B79 2D            mov b, d
1189   0B7A 38 00 00      mov c, 0
1190   0B7D FD AB         swp b
1191   0B7F D8            push b
1192   0B80 07 0B 6A      call strncmp
1193   0B83 51 06 00      add sp, 6
1194   0B86             ; --- END FUNCTION CALL
1195   0B86 C0 00 00      cmp b, 0
1196   0B89 C6 92 0B      je _if42_else
1197   0B8C             _if42_TRUE:
1198   0B8C             ; course_control(); 
1199   0B8C             ; --- START FUNCTION CALL
1200   0B8C 07 1A 17      call course_control
1201   0B8F 0A 62 0D      jmp _if42_exit
1202   0B92             _if42_else:
1203   0B92             ; if (!strncmp(cmd, "srs", 3)) 
1204   0B92             _if43_cond:
1205   0B92             ; --- START FUNCTION CALL
1206   0B92 FD 2E 03 00   mov32 cb, $00000003
1206   0B96 00 00 
1207   0B98 FD AB         swp b
1208   0B9A D8            push b
1209   0B9B 26 E6 71      mov b, _s39 ; "srs"
1210   0B9E FD AB         swp b
1211   0BA0 D8            push b
1212   0BA1 FA FD FF      lea d, [bp + -3] ; $cmd
1213   0BA4 2D            mov b, d
1214   0BA5 38 00 00      mov c, 0
1215   0BA8 FD AB         swp b
1216   0BAA D8            push b
1217   0BAB 07 0B 6A      call strncmp
1218   0BAE 51 06 00      add sp, 6
1219   0BB1             ; --- END FUNCTION CALL
1220   0BB1 C0 00 00      cmp b, 0
1221   0BB4 C6 BD 0B      je _if43_else
1222   0BB7             _if43_TRUE:
1223   0BB7             ; short_range_scan(); 
1224   0BB7             ; --- START FUNCTION CALL
1225   0BB7 07 86 25      call short_range_scan
1226   0BBA 0A 62 0D      jmp _if43_exit
1227   0BBD             _if43_else:
1228   0BBD             ; if (!strncmp(cmd, "lrs", 3)) 
1229   0BBD             _if44_cond:
1230   0BBD             ; --- START FUNCTION CALL
1231   0BBD FD 2E 03 00   mov32 cb, $00000003
1231   0BC1 00 00 
1232   0BC3 FD AB         swp b
1233   0BC5 D8            push b
1234   0BC6 26 EA 71      mov b, _s40 ; "lrs"
1235   0BC9 FD AB         swp b
1236   0BCB D8            push b
1237   0BCC FA FD FF      lea d, [bp + -3] ; $cmd
1238   0BCF 2D            mov b, d
1239   0BD0 38 00 00      mov c, 0
1240   0BD3 FD AB         swp b
1241   0BD5 D8            push b
1242   0BD6 07 0B 6A      call strncmp
1243   0BD9 51 06 00      add sp, 6
1244   0BDC             ; --- END FUNCTION CALL
1245   0BDC C0 00 00      cmp b, 0
1246   0BDF C6 E8 0B      je _if44_else
1247   0BE2             _if44_TRUE:
1248   0BE2             ; long_range_scan(); 
1249   0BE2             ; --- START FUNCTION CALL
1250   0BE2 07 30 2B      call long_range_scan
1251   0BE5 0A 62 0D      jmp _if44_exit
1252   0BE8             _if44_else:
1253   0BE8             ; if (!strncmp(cmd, "pha", 3)) 
1254   0BE8             _if45_cond:
1255   0BE8             ; --- START FUNCTION CALL
1256   0BE8 FD 2E 03 00   mov32 cb, $00000003
1256   0BEC 00 00 
1257   0BEE FD AB         swp b
1258   0BF0 D8            push b
1259   0BF1 26 EE 71      mov b, _s41 ; "pha"
1260   0BF4 FD AB         swp b
1261   0BF6 D8            push b
1262   0BF7 FA FD FF      lea d, [bp + -3] ; $cmd
1263   0BFA 2D            mov b, d
1264   0BFB 38 00 00      mov c, 0
1265   0BFE FD AB         swp b
1266   0C00 D8            push b
1267   0C01 07 0B 6A      call strncmp
1268   0C04 51 06 00      add sp, 6
1269   0C07             ; --- END FUNCTION CALL
1270   0C07 C0 00 00      cmp b, 0
1271   0C0A C6 13 0C      je _if45_else
1272   0C0D             _if45_TRUE:
1273   0C0D             ; phaser_control(); 
1274   0C0D             ; --- START FUNCTION CALL
1275   0C0D 07 D8 2D      call phaser_control
1276   0C10 0A 62 0D      jmp _if45_exit
1277   0C13             _if45_else:
1278   0C13             ; if (!strncmp(cmd, "tor", 3)) 
1279   0C13             _if46_cond:
1280   0C13             ; --- START FUNCTION CALL
1281   0C13 FD 2E 03 00   mov32 cb, $00000003
1281   0C17 00 00 
1282   0C19 FD AB         swp b
1283   0C1B D8            push b
1284   0C1C 26 F2 71      mov b, _s42 ; "tor"
1285   0C1F FD AB         swp b
1286   0C21 D8            push b
1287   0C22 FA FD FF      lea d, [bp + -3] ; $cmd
1288   0C25 2D            mov b, d
1289   0C26 38 00 00      mov c, 0
1290   0C29 FD AB         swp b
1291   0C2B D8            push b
1292   0C2C 07 0B 6A      call strncmp
1293   0C2F 51 06 00      add sp, 6
1294   0C32             ; --- END FUNCTION CALL
1295   0C32 C0 00 00      cmp b, 0
1296   0C35 C6 3E 0C      je _if46_else
1297   0C38             _if46_TRUE:
1298   0C38             ; photon_torpedoes(); 
1299   0C38             ; --- START FUNCTION CALL
1300   0C38 07 3D 33      call photon_torpedoes
1301   0C3B 0A 62 0D      jmp _if46_exit
1302   0C3E             _if46_else:
1303   0C3E             ; if (!strncmp(cmd, "shi", 3)) 
1304   0C3E             _if47_cond:
1305   0C3E             ; --- START FUNCTION CALL
1306   0C3E FD 2E 03 00   mov32 cb, $00000003
1306   0C42 00 00 
1307   0C44 FD AB         swp b
1308   0C46 D8            push b
1309   0C47 26 F6 71      mov b, _s43 ; "shi"
1310   0C4A FD AB         swp b
1311   0C4C D8            push b
1312   0C4D FA FD FF      lea d, [bp + -3] ; $cmd
1313   0C50 2D            mov b, d
1314   0C51 38 00 00      mov c, 0
1315   0C54 FD AB         swp b
1316   0C56 D8            push b
1317   0C57 07 0B 6A      call strncmp
1318   0C5A 51 06 00      add sp, 6
1319   0C5D             ; --- END FUNCTION CALL
1320   0C5D C0 00 00      cmp b, 0
1321   0C60 C6 69 0C      je _if47_else
1322   0C63             _if47_TRUE:
1323   0C63             ; shield_control(); 
1324   0C63             ; --- START FUNCTION CALL
1325   0C63 07 CA 3E      call shield_control
1326   0C66 0A 62 0D      jmp _if47_exit
1327   0C69             _if47_else:
1328   0C69             ; if (!strncmp(cmd, "dam", 3)) 
1329   0C69             _if48_cond:
1330   0C69             ; --- START FUNCTION CALL
1331   0C69 FD 2E 03 00   mov32 cb, $00000003
1331   0C6D 00 00 
1332   0C6F FD AB         swp b
1333   0C71 D8            push b
1334   0C72 26 FA 71      mov b, _s44 ; "dam"
1335   0C75 FD AB         swp b
1336   0C77 D8            push b
1337   0C78 FA FD FF      lea d, [bp + -3] ; $cmd
1338   0C7B 2D            mov b, d
1339   0C7C 38 00 00      mov c, 0
1340   0C7F FD AB         swp b
1341   0C81 D8            push b
1342   0C82 07 0B 6A      call strncmp
1343   0C85 51 06 00      add sp, 6
1344   0C88             ; --- END FUNCTION CALL
1345   0C88 C0 00 00      cmp b, 0
1346   0C8B C6 94 0C      je _if48_else
1347   0C8E             _if48_TRUE:
1348   0C8E             ; damage_control(); 
1349   0C8E             ; --- START FUNCTION CALL
1350   0C8E 07 E2 3B      call damage_control
1351   0C91 0A 62 0D      jmp _if48_exit
1352   0C94             _if48_else:
1353   0C94             ; if (!strncmp(cmd, "com", 3)) 
1354   0C94             _if49_cond:
1355   0C94             ; --- START FUNCTION CALL
1356   0C94 FD 2E 03 00   mov32 cb, $00000003
1356   0C98 00 00 
1357   0C9A FD AB         swp b
1358   0C9C D8            push b
1359   0C9D 26 FE 71      mov b, _s45 ; "com"
1360   0CA0 FD AB         swp b
1361   0CA2 D8            push b
1362   0CA3 FA FD FF      lea d, [bp + -3] ; $cmd
1363   0CA6 2D            mov b, d
1364   0CA7 38 00 00      mov c, 0
1365   0CAA FD AB         swp b
1366   0CAC D8            push b
1367   0CAD 07 0B 6A      call strncmp
1368   0CB0 51 06 00      add sp, 6
1369   0CB3             ; --- END FUNCTION CALL
1370   0CB3 C0 00 00      cmp b, 0
1371   0CB6 C6 BF 0C      je _if49_else
1372   0CB9             _if49_TRUE:
1373   0CB9             ; library_computer(); 
1374   0CB9             ; --- START FUNCTION CALL
1375   0CB9 07 D3 3F      call library_computer
1376   0CBC 0A 62 0D      jmp _if49_exit
1377   0CBF             _if49_else:
1378   0CBF             ; if (!strncmp(cmd, "xxx", 3)) 
1379   0CBF             _if50_cond:
1380   0CBF             ; --- START FUNCTION CALL
1381   0CBF FD 2E 03 00   mov32 cb, $00000003
1381   0CC3 00 00 
1382   0CC5 FD AB         swp b
1383   0CC7 D8            push b
1384   0CC8 26 02 72      mov b, _s46 ; "xxx"
1385   0CCB FD AB         swp b
1386   0CCD D8            push b
1387   0CCE FA FD FF      lea d, [bp + -3] ; $cmd
1388   0CD1 2D            mov b, d
1389   0CD2 38 00 00      mov c, 0
1390   0CD5 FD AB         swp b
1391   0CD7 D8            push b
1392   0CD8 07 0B 6A      call strncmp
1393   0CDB 51 06 00      add sp, 6
1394   0CDE             ; --- END FUNCTION CALL
1395   0CDE C0 00 00      cmp b, 0
1396   0CE1 C6 EA 0C      je _if50_else
1397   0CE4             _if50_TRUE:
1398   0CE4             ; resign_commision(); 
1399   0CE4             ; --- START FUNCTION CALL
1400   0CE4 07 09 4F      call resign_commision
1401   0CE7 0A 62 0D      jmp _if50_exit
1402   0CEA             _if50_else:
1403   0CEA             ; puts("Enter one of the following:\n"); 
1404   0CEA             ; --- START FUNCTION CALL
1405   0CEA 26 06 72      mov b, _s47 ; "Enter one of the following:\n"
1406   0CED FD AB         swp b
1407   0CEF D8            push b
1408   0CF0 07 85 69      call puts
1409   0CF3 51 02 00      add sp, 2
1410   0CF6             ; --- END FUNCTION CALL
1411   0CF6             ; puts("  nav - To Set Course"); 
1412   0CF6             ; --- START FUNCTION CALL
1413   0CF6 26 23 72      mov b, _s48 ; "  nav - To Set Course"
1414   0CF9 FD AB         swp b
1415   0CFB D8            push b
1416   0CFC 07 85 69      call puts
1417   0CFF 51 02 00      add sp, 2
1418   0D02             ; --- END FUNCTION CALL
1419   0D02             ; puts("  srs - Short Range Sensors"); 
1420   0D02             ; --- START FUNCTION CALL
1421   0D02 26 39 72      mov b, _s49 ; "  srs - Short Range Sensors"
1422   0D05 FD AB         swp b
1423   0D07 D8            push b
1424   0D08 07 85 69      call puts
1425   0D0B 51 02 00      add sp, 2
1426   0D0E             ; --- END FUNCTION CALL
1427   0D0E             ; puts("  lrs - Long Range Sensors"); 
1428   0D0E             ; --- START FUNCTION CALL
1429   0D0E 26 55 72      mov b, _s50 ; "  lrs - Long Range Sensors"
1430   0D11 FD AB         swp b
1431   0D13 D8            push b
1432   0D14 07 85 69      call puts
1433   0D17 51 02 00      add sp, 2
1434   0D1A             ; --- END FUNCTION CALL
1435   0D1A             ; puts("  pha - Phasers"); 
1436   0D1A             ; --- START FUNCTION CALL
1437   0D1A 26 70 72      mov b, _s51 ; "  pha - Phasers"
1438   0D1D FD AB         swp b
1439   0D1F D8            push b
1440   0D20 07 85 69      call puts
1441   0D23 51 02 00      add sp, 2
1442   0D26             ; --- END FUNCTION CALL
1443   0D26             ; puts("  tor - Photon Torpedoes"); 
1444   0D26             ; --- START FUNCTION CALL
1445   0D26 26 80 72      mov b, _s52 ; "  tor - Photon Torpedoes"
1446   0D29 FD AB         swp b
1447   0D2B D8            push b
1448   0D2C 07 85 69      call puts
1449   0D2F 51 02 00      add sp, 2
1450   0D32             ; --- END FUNCTION CALL
1451   0D32             ; puts("  shi - Shield Control"); 
1452   0D32             ; --- START FUNCTION CALL
1453   0D32 26 99 72      mov b, _s53 ; "  shi - Shield Control"
1454   0D35 FD AB         swp b
1455   0D37 D8            push b
1456   0D38 07 85 69      call puts
1457   0D3B 51 02 00      add sp, 2
1458   0D3E             ; --- END FUNCTION CALL
1459   0D3E             ; puts("  dam - Damage Control"); 
1460   0D3E             ; --- START FUNCTION CALL
1461   0D3E 26 B0 72      mov b, _s54 ; "  dam - Damage Control"
1462   0D41 FD AB         swp b
1463   0D43 D8            push b
1464   0D44 07 85 69      call puts
1465   0D47 51 02 00      add sp, 2
1466   0D4A             ; --- END FUNCTION CALL
1467   0D4A             ; puts("  com - Library Computer"); 
1468   0D4A             ; --- START FUNCTION CALL
1469   0D4A 26 C7 72      mov b, _s55 ; "  com - Library Computer"
1470   0D4D FD AB         swp b
1471   0D4F D8            push b
1472   0D50 07 85 69      call puts
1473   0D53 51 02 00      add sp, 2
1474   0D56             ; --- END FUNCTION CALL
1475   0D56             ; puts("  xxx - Resign Command\n"); 
1476   0D56             ; --- START FUNCTION CALL
1477   0D56 26 E0 72      mov b, _s56 ; "  xxx - Resign Command\n"
1478   0D59 FD AB         swp b
1479   0D5B D8            push b
1480   0D5C 07 85 69      call puts
1481   0D5F 51 02 00      add sp, 2
1482   0D62             ; --- END FUNCTION CALL
1483   0D62             _if50_exit:
1484   0D62             _if49_exit:
1485   0D62             _if48_exit:
1486   0D62             _if47_exit:
1487   0D62             _if46_exit:
1488   0D62             _if45_exit:
1489   0D62             _if44_exit:
1490   0D62             _if43_exit:
1491   0D62             _if42_exit:
1492   0D62 0A B7 0A      jmp _while40_cond
1493   0D65             _while40_exit:
1494   0D65 F9            leave
1495   0D66 09            ret
1496   0D67             
1497   0D67             initialize:
1498   0D67 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1499   0D6A             ; int i, j; 
1500   0D6A 52 02 00      sub sp, 2
1501   0D6D 52 02 00      sub sp, 2
1502   0D70             ; unsigned char        yp, xp; 
1503   0D70 52 01 00      sub sp, 1
1504   0D73 52 01 00      sub sp, 1
1505   0D76             ; unsigned char        r; 
1506   0D76 52 01 00      sub sp, 1
1507   0D79             ; time_start = FROM_FIXED(stardate); 
1508   0D79 3B 67 6E      mov d, _time_start ; $time_start
1509   0D7C DA            push d
1510   0D7D             ; --- START FUNCTION CALL
1511   0D7D 3B 83 6E      mov d, _stardate ; $stardate
1512   0D80 2A            mov b, [d]
1513   0D81 38 00 00      mov c, 0
1514   0D84 FD AB         swp b
1515   0D86 D8            push b
1516   0D87 07 68 04      call FROM_FIXED
1517   0D8A 51 02 00      add sp, 2
1518   0D8D             ; --- END FUNCTION CALL
1519   0D8D E7            pop d
1520   0D8E FD 43         mov [d], b
1521   0D90             ; time_up = 25 + get_rand(10); 
1522   0D90 3B 69 6E      mov d, _time_up ; $time_up
1523   0D93 DA            push d
1524   0D94 FD 2E 19 00   mov32 cb, $00000019
1524   0D98 00 00 
1525   0D9A             ; --- START TERMS
1526   0D9A D7            push a
1527   0D9B 11            mov a, b
1528   0D9C             ; --- START FUNCTION CALL
1529   0D9C FD 2E 0A 00   mov32 cb, $0000000a
1529   0DA0 00 00 
1530   0DA2 FD AB         swp b
1531   0DA4 D8            push b
1532   0DA5 07 FF 04      call get_rand
1533   0DA8 51 02 00      add sp, 2
1534   0DAB             ; --- END FUNCTION CALL
1535   0DAB 56            add b, a
1536   0DAC E4            pop a
1537   0DAD             ; --- END TERMS
1538   0DAD E7            pop d
1539   0DAE FD 43         mov [d], b
1540   0DB0             ; docked = 0; 
1541   0DB0 3B A8 6D      mov d, _docked ; $docked
1542   0DB3 DA            push d
1543   0DB4 FD 2E 00 00   mov32 cb, $00000000
1543   0DB8 00 00 
1544   0DBA E7            pop d
1545   0DBB FD 3E         mov [d], bl
1546   0DBD             ; energy = energy0; 
1547   0DBD 3B A9 6D      mov d, _energy ; $energy
1548   0DC0 DA            push d
1549   0DC1 3B AB 6D      mov d, _energy0 ; $energy0
1550   0DC4 2A            mov b, [d]
1551   0DC5 38 00 00      mov c, 0
1552   0DC8 E7            pop d
1553   0DC9 FD 43         mov [d], b
1554   0DCB             ; torps = torps0; 
1555   0DCB 3B 5E 6E      mov d, _torps ; $torps
1556   0DCE DA            push d
1557   0DCF 3B 5F 6E      mov d, _torps0 ; $torps0
1558   0DD2 32            mov bl, [d]
1559   0DD3 A7 00         mov bh, 0
1560   0DD5 38 00 00      mov c, 0
1561   0DD8 E7            pop d
1562   0DD9 FD 3E         mov [d], bl
1563   0DDB             ; shield = 0; 
1564   0DDB 3B 64 6E      mov d, _shield ; $shield
1565   0DDE DA            push d
1566   0DDF FD 2E 00 00   mov32 cb, $00000000
1566   0DE3 00 00 
1567   0DE5 E7            pop d
1568   0DE6 FD 43         mov [d], b
1569   0DE8             ; quad_y = rand8(); 
1570   0DE8 3B 60 6E      mov d, _quad_y ; $quad_y
1571   0DEB DA            push d
1572   0DEC             ; --- START FUNCTION CALL
1573   0DEC 07 6F 05      call rand8
1574   0DEF E7            pop d
1575   0DF0 FD 43         mov [d], b
1576   0DF2             ; quad_x = rand8(); 
1577   0DF2 3B 62 6E      mov d, _quad_x ; $quad_x
1578   0DF5 DA            push d
1579   0DF6             ; --- START FUNCTION CALL
1580   0DF6 07 6F 05      call rand8
1581   0DF9 E7            pop d
1582   0DFA FD 43         mov [d], b
1583   0DFC             ; ship_y = TO_FIXED00(rand8()); 
1584   0DFC 3B 7F 6E      mov d, _ship_y ; $ship_y
1585   0DFF DA            push d
1586   0E00             ; --- START FUNCTION CALL
1587   0E00             ; --- START FUNCTION CALL
1588   0E00 07 6F 05      call rand8
1589   0E03 AB            snex b
1590   0E04 FD AB         swp b
1591   0E06 D8            push b
1592   0E07 07 8B 04      call TO_FIXED00
1593   0E0A 51 02 00      add sp, 2
1594   0E0D             ; --- END FUNCTION CALL
1595   0E0D E7            pop d
1596   0E0E FD 43         mov [d], b
1597   0E10             ; ship_x = TO_FIXED00(rand8()); 
1598   0E10 3B 81 6E      mov d, _ship_x ; $ship_x
1599   0E13 DA            push d
1600   0E14             ; --- START FUNCTION CALL
1601   0E14             ; --- START FUNCTION CALL
1602   0E14 07 6F 05      call rand8
1603   0E17 AB            snex b
1604   0E18 FD AB         swp b
1605   0E1A D8            push b
1606   0E1B 07 8B 04      call TO_FIXED00
1607   0E1E 51 02 00      add sp, 2
1608   0E21             ; --- END FUNCTION CALL
1609   0E21 E7            pop d
1610   0E22 FD 43         mov [d], b
1611   0E24             ; for (i = 1; i <= 8; i++) 
1612   0E24             _for51_init:
1613   0E24 FA FF FF      lea d, [bp + -1] ; $i
1614   0E27 DA            push d
1615   0E28 FD 2E 01 00   mov32 cb, $00000001
1615   0E2C 00 00 
1616   0E2E E7            pop d
1617   0E2F FD 43         mov [d], b
1618   0E31             _for51_cond:
1619   0E31 FA FF FF      lea d, [bp + -1] ; $i
1620   0E34 2A            mov b, [d]
1621   0E35 38 00 00      mov c, 0
1622   0E38             ; --- START RELATIONAL
1623   0E38 D7            push a
1624   0E39 11            mov a, b
1625   0E3A FD 2E 08 00   mov32 cb, $00000008
1625   0E3E 00 00 
1626   0E40 B0            cmp a, b
1627   0E41 FD 74         sle ; <= (signed)
1628   0E43 E4            pop a
1629   0E44             ; --- END RELATIONAL
1630   0E44 C0 00 00      cmp b, 0
1631   0E47 C6 79 0E      je _for51_exit
1632   0E4A             _for51_block:
1633   0E4A             ; damage[i] = 0; 
1634   0E4A 3B 6B 6E      mov d, _damage_data ; $damage
1635   0E4D D7            push a
1636   0E4E DA            push d
1637   0E4F FA FF FF      lea d, [bp + -1] ; $i
1638   0E52 2A            mov b, [d]
1639   0E53 38 00 00      mov c, 0
1640   0E56 E7            pop d
1641   0E57 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1642   0E5B E4            pop a
1643   0E5C DA            push d
1644   0E5D FD 2E 00 00   mov32 cb, $00000000
1644   0E61 00 00 
1645   0E63 E7            pop d
1646   0E64 FD 43         mov [d], b
1647   0E66             _for51_update:
1648   0E66 FA FF FF      lea d, [bp + -1] ; $i
1649   0E69 2A            mov b, [d]
1650   0E6A 38 00 00      mov c, 0
1651   0E6D 11            mov a, b
1652   0E6E FD 77         inc b
1653   0E70 FA FF FF      lea d, [bp + -1] ; $i
1654   0E73 FD 43         mov [d], b
1655   0E75 27            mov b, a
1656   0E76 0A 31 0E      jmp _for51_cond
1657   0E79             _for51_exit:
1658   0E79             ; for (i = 1; i <= 8; i++) { 
1659   0E79             _for52_init:
1660   0E79 FA FF FF      lea d, [bp + -1] ; $i
1661   0E7C DA            push d
1662   0E7D FD 2E 01 00   mov32 cb, $00000001
1662   0E81 00 00 
1663   0E83 E7            pop d
1664   0E84 FD 43         mov [d], b
1665   0E86             _for52_cond:
1666   0E86 FA FF FF      lea d, [bp + -1] ; $i
1667   0E89 2A            mov b, [d]
1668   0E8A 38 00 00      mov c, 0
1669   0E8D             ; --- START RELATIONAL
1670   0E8D D7            push a
1671   0E8E 11            mov a, b
1672   0E8F FD 2E 08 00   mov32 cb, $00000008
1672   0E93 00 00 
1673   0E95 B0            cmp a, b
1674   0E96 FD 74         sle ; <= (signed)
1675   0E98 E4            pop a
1676   0E99             ; --- END RELATIONAL
1677   0E99 C0 00 00      cmp b, 0
1678   0E9C C6 5F 10      je _for52_exit
1679   0E9F             _for52_block:
1680   0E9F             ; for (j = 1; j <= 8; j++) { 
1681   0E9F             _for53_init:
1682   0E9F FA FD FF      lea d, [bp + -3] ; $j
1683   0EA2 DA            push d
1684   0EA3 FD 2E 01 00   mov32 cb, $00000001
1684   0EA7 00 00 
1685   0EA9 E7            pop d
1686   0EAA FD 43         mov [d], b
1687   0EAC             _for53_cond:
1688   0EAC FA FD FF      lea d, [bp + -3] ; $j
1689   0EAF 2A            mov b, [d]
1690   0EB0 38 00 00      mov c, 0
1691   0EB3             ; --- START RELATIONAL
1692   0EB3 D7            push a
1693   0EB4 11            mov a, b
1694   0EB5 FD 2E 08 00   mov32 cb, $00000008
1694   0EB9 00 00 
1695   0EBB B0            cmp a, b
1696   0EBC FD 74         sle ; <= (signed)
1697   0EBE E4            pop a
1698   0EBF             ; --- END RELATIONAL
1699   0EBF C0 00 00      cmp b, 0
1700   0EC2 C6 4C 10      je _for53_exit
1701   0EC5             _for53_block:
1702   0EC5             ; r = get_rand(100); 
1703   0EC5 FA FA FF      lea d, [bp + -6] ; $r
1704   0EC8 DA            push d
1705   0EC9             ; --- START FUNCTION CALL
1706   0EC9 FD 2E 64 00   mov32 cb, $00000064
1706   0ECD 00 00 
1707   0ECF FD AB         swp b
1708   0ED1 D8            push b
1709   0ED2 07 FF 04      call get_rand
1710   0ED5 51 02 00      add sp, 2
1711   0ED8             ; --- END FUNCTION CALL
1712   0ED8 E7            pop d
1713   0ED9 FD 3E         mov [d], bl
1714   0EDB             ; klingons = 0; 
1715   0EDB 3B 5B 6E      mov d, _klingons ; $klingons
1716   0EDE DA            push d
1717   0EDF FD 2E 00 00   mov32 cb, $00000000
1717   0EE3 00 00 
1718   0EE5 E7            pop d
1719   0EE6 FD 3E         mov [d], bl
1720   0EE8             ; if (r > 98) 
1721   0EE8             _if54_cond:
1722   0EE8 FA FA FF      lea d, [bp + -6] ; $r
1723   0EEB 32            mov bl, [d]
1724   0EEC A7 00         mov bh, 0
1725   0EEE 38 00 00      mov c, 0
1726   0EF1             ; --- START RELATIONAL
1727   0EF1 D7            push a
1728   0EF2 11            mov a, b
1729   0EF3 FD 2E 62 00   mov32 cb, $00000062
1729   0EF7 00 00 
1730   0EF9 B0            cmp a, b
1731   0EFA FD 81         sgu ; > (unsigned)
1732   0EFC E4            pop a
1733   0EFD             ; --- END RELATIONAL
1734   0EFD C0 00 00      cmp b, 0
1735   0F00 C6 13 0F      je _if54_else
1736   0F03             _if54_TRUE:
1737   0F03             ; klingons = 3; 
1738   0F03 3B 5B 6E      mov d, _klingons ; $klingons
1739   0F06 DA            push d
1740   0F07 FD 2E 03 00   mov32 cb, $00000003
1740   0F0B 00 00 
1741   0F0D E7            pop d
1742   0F0E FD 3E         mov [d], bl
1743   0F10 0A 69 0F      jmp _if54_exit
1744   0F13             _if54_else:
1745   0F13             ; if (r > 95) 
1746   0F13             _if55_cond:
1747   0F13 FA FA FF      lea d, [bp + -6] ; $r
1748   0F16 32            mov bl, [d]
1749   0F17 A7 00         mov bh, 0
1750   0F19 38 00 00      mov c, 0
1751   0F1C             ; --- START RELATIONAL
1752   0F1C D7            push a
1753   0F1D 11            mov a, b
1754   0F1E FD 2E 5F 00   mov32 cb, $0000005f
1754   0F22 00 00 
1755   0F24 B0            cmp a, b
1756   0F25 FD 81         sgu ; > (unsigned)
1757   0F27 E4            pop a
1758   0F28             ; --- END RELATIONAL
1759   0F28 C0 00 00      cmp b, 0
1760   0F2B C6 3E 0F      je _if55_else
1761   0F2E             _if55_TRUE:
1762   0F2E             ; klingons = 2; 
1763   0F2E 3B 5B 6E      mov d, _klingons ; $klingons
1764   0F31 DA            push d
1765   0F32 FD 2E 02 00   mov32 cb, $00000002
1765   0F36 00 00 
1766   0F38 E7            pop d
1767   0F39 FD 3E         mov [d], bl
1768   0F3B 0A 69 0F      jmp _if55_exit
1769   0F3E             _if55_else:
1770   0F3E             ; if (r > 80) 
1771   0F3E             _if56_cond:
1772   0F3E FA FA FF      lea d, [bp + -6] ; $r
1773   0F41 32            mov bl, [d]
1774   0F42 A7 00         mov bh, 0
1775   0F44 38 00 00      mov c, 0
1776   0F47             ; --- START RELATIONAL
1777   0F47 D7            push a
1778   0F48 11            mov a, b
1779   0F49 FD 2E 50 00   mov32 cb, $00000050
1779   0F4D 00 00 
1780   0F4F B0            cmp a, b
1781   0F50 FD 81         sgu ; > (unsigned)
1782   0F52 E4            pop a
1783   0F53             ; --- END RELATIONAL
1784   0F53 C0 00 00      cmp b, 0
1785   0F56 C6 69 0F      je _if56_exit
1786   0F59             _if56_TRUE:
1787   0F59             ; klingons = 1; 
1788   0F59 3B 5B 6E      mov d, _klingons ; $klingons
1789   0F5C DA            push d
1790   0F5D FD 2E 01 00   mov32 cb, $00000001
1790   0F61 00 00 
1791   0F63 E7            pop d
1792   0F64 FD 3E         mov [d], bl
1793   0F66 0A 69 0F      jmp _if56_exit
1794   0F69             _if56_exit:
1795   0F69             _if55_exit:
1796   0F69             _if54_exit:
1797   0F69             ; klingons_left = klingons_left + klingons; 
1798   0F69 3B 5D 6E      mov d, _klingons_left ; $klingons_left
1799   0F6C DA            push d
1800   0F6D 3B 5D 6E      mov d, _klingons_left ; $klingons_left
1801   0F70 32            mov bl, [d]
1802   0F71 A7 00         mov bh, 0
1803   0F73 38 00 00      mov c, 0
1804   0F76             ; --- START TERMS
1805   0F76 D7            push a
1806   0F77 11            mov a, b
1807   0F78 3B 5B 6E      mov d, _klingons ; $klingons
1808   0F7B 32            mov bl, [d]
1809   0F7C A7 00         mov bh, 0
1810   0F7E 38 00 00      mov c, 0
1811   0F81 56            add b, a
1812   0F82 E4            pop a
1813   0F83             ; --- END TERMS
1814   0F83 E7            pop d
1815   0F84 FD 3E         mov [d], bl
1816   0F86             ; starbases = 0; 
1817   0F86 3B 86 6D      mov d, _starbases ; $starbases
1818   0F89 DA            push d
1819   0F8A FD 2E 00 00   mov32 cb, $00000000
1819   0F8E 00 00 
1820   0F90 E7            pop d
1821   0F91 FD 3E         mov [d], bl
1822   0F93             ; if (get_rand(100) > 96) 
1823   0F93             _if57_cond:
1824   0F93             ; --- START FUNCTION CALL
1825   0F93 FD 2E 64 00   mov32 cb, $00000064
1825   0F97 00 00 
1826   0F99 FD AB         swp b
1827   0F9B D8            push b
1828   0F9C 07 FF 04      call get_rand
1829   0F9F 51 02 00      add sp, 2
1830   0FA2             ; --- END FUNCTION CALL
1831   0FA2             ; --- START RELATIONAL
1832   0FA2 D7            push a
1833   0FA3 11            mov a, b
1834   0FA4 FD 2E 60 00   mov32 cb, $00000060
1834   0FA8 00 00 
1835   0FAA B0            cmp a, b
1836   0FAB FD 7F         sgt ; >
1837   0FAD E4            pop a
1838   0FAE             ; --- END RELATIONAL
1839   0FAE C0 00 00      cmp b, 0
1840   0FB1 C6 C4 0F      je _if57_exit
1841   0FB4             _if57_TRUE:
1842   0FB4             ; starbases = 1; 
1843   0FB4 3B 86 6D      mov d, _starbases ; $starbases
1844   0FB7 DA            push d
1845   0FB8 FD 2E 01 00   mov32 cb, $00000001
1845   0FBC 00 00 
1846   0FBE E7            pop d
1847   0FBF FD 3E         mov [d], bl
1848   0FC1 0A C4 0F      jmp _if57_exit
1849   0FC4             _if57_exit:
1850   0FC4             ; starbases_left = starbases_left + starbases; 
1851   0FC4 3B 89 6D      mov d, _starbases_left ; $starbases_left
1852   0FC7 DA            push d
1853   0FC8 3B 89 6D      mov d, _starbases_left ; $starbases_left
1854   0FCB 32            mov bl, [d]
1855   0FCC A7 00         mov bh, 0
1856   0FCE 38 00 00      mov c, 0
1857   0FD1             ; --- START TERMS
1858   0FD1 D7            push a
1859   0FD2 11            mov a, b
1860   0FD3 3B 86 6D      mov d, _starbases ; $starbases
1861   0FD6 32            mov bl, [d]
1862   0FD7 A7 00         mov bh, 0
1863   0FD9 38 00 00      mov c, 0
1864   0FDC 56            add b, a
1865   0FDD E4            pop a
1866   0FDE             ; --- END TERMS
1867   0FDE E7            pop d
1868   0FDF FD 3E         mov [d], bl
1869   0FE1             ; map[i][j] = (klingons << 8) + (starbases << 4) + rand8(); 
1870   0FE1 3B AD 6D      mov d, _map_data ; $map
1871   0FE4 D7            push a
1872   0FE5 DA            push d
1873   0FE6 FA FF FF      lea d, [bp + -1] ; $i
1874   0FE9 2A            mov b, [d]
1875   0FEA 38 00 00      mov c, 0
1876   0FED E7            pop d
1877   0FEE FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1878   0FF2 DA            push d
1879   0FF3 FA FD FF      lea d, [bp + -3] ; $j
1880   0FF6 2A            mov b, [d]
1881   0FF7 38 00 00      mov c, 0
1882   0FFA E7            pop d
1883   0FFB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1884   0FFF E4            pop a
1885   1000 DA            push d
1886   1001 3B 5B 6E      mov d, _klingons ; $klingons
1887   1004 32            mov bl, [d]
1888   1005 A7 00         mov bh, 0
1889   1007 38 00 00      mov c, 0
1890   100A             ; --- START SHIFT
1891   100A D7            push a
1892   100B 11            mov a, b
1893   100C FD 2E 08 00   mov32 cb, $00000008
1893   1010 00 00 
1894   1012 FD 39         mov c, b
1895   1014 9D            shl a, cl
1896   1015 27            mov b, a
1897   1016 E4            pop a
1898   1017             ; --- END SHIFT
1899   1017             ; --- START TERMS
1900   1017 D7            push a
1901   1018 11            mov a, b
1902   1019 3B 86 6D      mov d, _starbases ; $starbases
1903   101C 32            mov bl, [d]
1904   101D A7 00         mov bh, 0
1905   101F 38 00 00      mov c, 0
1906   1022             ; --- START SHIFT
1907   1022 D7            push a
1908   1023 11            mov a, b
1909   1024 FD 2E 04 00   mov32 cb, $00000004
1909   1028 00 00 
1910   102A FD 39         mov c, b
1911   102C 9D            shl a, cl
1912   102D 27            mov b, a
1913   102E E4            pop a
1914   102F             ; --- END SHIFT
1915   102F 56            add b, a
1916   1030 11            mov a, b
1917   1031             ; --- START FUNCTION CALL
1918   1031 07 6F 05      call rand8
1919   1034 56            add b, a
1920   1035 E4            pop a
1921   1036             ; --- END TERMS
1922   1036 E7            pop d
1923   1037 FD 43         mov [d], b
1924   1039             _for53_update:
1925   1039 FA FD FF      lea d, [bp + -3] ; $j
1926   103C 2A            mov b, [d]
1927   103D 38 00 00      mov c, 0
1928   1040 11            mov a, b
1929   1041 FD 77         inc b
1930   1043 FA FD FF      lea d, [bp + -3] ; $j
1931   1046 FD 43         mov [d], b
1932   1048 27            mov b, a
1933   1049 0A AC 0E      jmp _for53_cond
1934   104C             _for53_exit:
1935   104C             _for52_update:
1936   104C FA FF FF      lea d, [bp + -1] ; $i
1937   104F 2A            mov b, [d]
1938   1050 38 00 00      mov c, 0
1939   1053 11            mov a, b
1940   1054 FD 77         inc b
1941   1056 FA FF FF      lea d, [bp + -1] ; $i
1942   1059 FD 43         mov [d], b
1943   105B 27            mov b, a
1944   105C 0A 86 0E      jmp _for52_cond
1945   105F             _for52_exit:
1946   105F             ; if (klingons_left > time_up) 
1947   105F             _if58_cond:
1948   105F 3B 5D 6E      mov d, _klingons_left ; $klingons_left
1949   1062 32            mov bl, [d]
1950   1063 A7 00         mov bh, 0
1951   1065 38 00 00      mov c, 0
1952   1068             ; --- START RELATIONAL
1953   1068 D7            push a
1954   1069 11            mov a, b
1955   106A 3B 69 6E      mov d, _time_up ; $time_up
1956   106D 2A            mov b, [d]
1957   106E 38 00 00      mov c, 0
1958   1071 B0            cmp a, b
1959   1072 FD 81         sgu ; > (unsigned)
1960   1074 E4            pop a
1961   1075             ; --- END RELATIONAL
1962   1075 C0 00 00      cmp b, 0
1963   1078 C6 98 10      je _if58_exit
1964   107B             _if58_TRUE:
1965   107B             ; time_up = klingons_left + 1; 
1966   107B 3B 69 6E      mov d, _time_up ; $time_up
1967   107E DA            push d
1968   107F 3B 5D 6E      mov d, _klingons_left ; $klingons_left
1969   1082 32            mov bl, [d]
1970   1083 A7 00         mov bh, 0
1971   1085 38 00 00      mov c, 0
1972   1088             ; --- START TERMS
1973   1088 D7            push a
1974   1089 11            mov a, b
1975   108A FD 2E 01 00   mov32 cb, $00000001
1975   108E 00 00 
1976   1090 56            add b, a
1977   1091 E4            pop a
1978   1092             ; --- END TERMS
1979   1092 E7            pop d
1980   1093 FD 43         mov [d], b
1981   1095 0A 98 10      jmp _if58_exit
1982   1098             _if58_exit:
1983   1098             ; if (starbases_left == 0) { 
1984   1098             _if59_cond:
1985   1098 3B 89 6D      mov d, _starbases_left ; $starbases_left
1986   109B 32            mov bl, [d]
1987   109C A7 00         mov bh, 0
1988   109E 38 00 00      mov c, 0
1989   10A1             ; --- START RELATIONAL
1990   10A1 D7            push a
1991   10A2 11            mov a, b
1992   10A3 FD 2E 00 00   mov32 cb, $00000000
1992   10A7 00 00 
1993   10A9 B0            cmp a, b
1994   10AA FD 71         seq ; ==
1995   10AC E4            pop a
1996   10AD             ; --- END RELATIONAL
1997   10AD C0 00 00      cmp b, 0
1998   10B0 C6 F4 11      je _if59_exit
1999   10B3             _if59_TRUE:
2000   10B3             ; yp = rand8(); 
2001   10B3 FA FC FF      lea d, [bp + -4] ; $yp
2002   10B6 DA            push d
2003   10B7             ; --- START FUNCTION CALL
2004   10B7 07 6F 05      call rand8
2005   10BA E7            pop d
2006   10BB FD 3E         mov [d], bl
2007   10BD             ; xp = rand8(); 
2008   10BD FA FB FF      lea d, [bp + -5] ; $xp
2009   10C0 DA            push d
2010   10C1             ; --- START FUNCTION CALL
2011   10C1 07 6F 05      call rand8
2012   10C4 E7            pop d
2013   10C5 FD 3E         mov [d], bl
2014   10C7             ; if (map[yp][xp] < 0x200) { 
2015   10C7             _if60_cond:
2016   10C7 3B AD 6D      mov d, _map_data ; $map
2017   10CA D7            push a
2018   10CB DA            push d
2019   10CC FA FC FF      lea d, [bp + -4] ; $yp
2020   10CF 32            mov bl, [d]
2021   10D0 A7 00         mov bh, 0
2022   10D2 38 00 00      mov c, 0
2023   10D5 E7            pop d
2024   10D6 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2025   10DA DA            push d
2026   10DB FA FB FF      lea d, [bp + -5] ; $xp
2027   10DE 32            mov bl, [d]
2028   10DF A7 00         mov bh, 0
2029   10E1 38 00 00      mov c, 0
2030   10E4 E7            pop d
2031   10E5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2032   10E9 E4            pop a
2033   10EA 2A            mov b, [d]
2034   10EB 38 00 00      mov c, 0
2035   10EE             ; --- START RELATIONAL
2036   10EE D7            push a
2037   10EF 11            mov a, b
2038   10F0 FD 2E 00 02   mov32 cb, $00000200
2038   10F4 00 00 
2039   10F6 B0            cmp a, b
2040   10F7 FD 75         slu ; < (unsigned)
2041   10F9 E4            pop a
2042   10FA             ; --- END RELATIONAL
2043   10FA C0 00 00      cmp b, 0
2044   10FD C6 7A 11      je _if60_exit
2045   1100             _if60_TRUE:
2046   1100             ; map[yp][xp] = map[yp][xp] + (1 << 8); 
2047   1100 3B AD 6D      mov d, _map_data ; $map
2048   1103 D7            push a
2049   1104 DA            push d
2050   1105 FA FC FF      lea d, [bp + -4] ; $yp
2051   1108 32            mov bl, [d]
2052   1109 A7 00         mov bh, 0
2053   110B 38 00 00      mov c, 0
2054   110E E7            pop d
2055   110F FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2056   1113 DA            push d
2057   1114 FA FB FF      lea d, [bp + -5] ; $xp
2058   1117 32            mov bl, [d]
2059   1118 A7 00         mov bh, 0
2060   111A 38 00 00      mov c, 0
2061   111D E7            pop d
2062   111E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2063   1122 E4            pop a
2064   1123 DA            push d
2065   1124 3B AD 6D      mov d, _map_data ; $map
2066   1127 D7            push a
2067   1128 DA            push d
2068   1129 FA FC FF      lea d, [bp + -4] ; $yp
2069   112C 32            mov bl, [d]
2070   112D A7 00         mov bh, 0
2071   112F 38 00 00      mov c, 0
2072   1132 E7            pop d
2073   1133 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2074   1137 DA            push d
2075   1138 FA FB FF      lea d, [bp + -5] ; $xp
2076   113B 32            mov bl, [d]
2077   113C A7 00         mov bh, 0
2078   113E 38 00 00      mov c, 0
2079   1141 E7            pop d
2080   1142 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2081   1146 E4            pop a
2082   1147 2A            mov b, [d]
2083   1148 38 00 00      mov c, 0
2084   114B             ; --- START TERMS
2085   114B D7            push a
2086   114C 11            mov a, b
2087   114D FD 2E 01 00   mov32 cb, $00000001
2087   1151 00 00 
2088   1153             ; --- START SHIFT
2089   1153 D7            push a
2090   1154 11            mov a, b
2091   1155 FD 2E 08 00   mov32 cb, $00000008
2091   1159 00 00 
2092   115B FD 39         mov c, b
2093   115D 9D            shl a, cl
2094   115E 27            mov b, a
2095   115F E4            pop a
2096   1160             ; --- END SHIFT
2097   1160 56            add b, a
2098   1161 E4            pop a
2099   1162             ; --- END TERMS
2100   1162 E7            pop d
2101   1163 FD 43         mov [d], b
2102   1165             ; klingons_left++; 
2103   1165 3B 5D 6E      mov d, _klingons_left ; $klingons_left
2104   1168 32            mov bl, [d]
2105   1169 A7 00         mov bh, 0
2106   116B 38 00 00      mov c, 0
2107   116E FD 77         inc b
2108   1170 3B 5D 6E      mov d, _klingons_left ; $klingons_left
2109   1173 FD 3E         mov [d], bl
2110   1175 FD 7D         dec b
2111   1177 0A 7A 11      jmp _if60_exit
2112   117A             _if60_exit:
2113   117A             ; map[yp][xp] = map[yp][xp] + (1 << 4); 
2114   117A 3B AD 6D      mov d, _map_data ; $map
2115   117D D7            push a
2116   117E DA            push d
2117   117F FA FC FF      lea d, [bp + -4] ; $yp
2118   1182 32            mov bl, [d]
2119   1183 A7 00         mov bh, 0
2120   1185 38 00 00      mov c, 0
2121   1188 E7            pop d
2122   1189 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2123   118D DA            push d
2124   118E FA FB FF      lea d, [bp + -5] ; $xp
2125   1191 32            mov bl, [d]
2126   1192 A7 00         mov bh, 0
2127   1194 38 00 00      mov c, 0
2128   1197 E7            pop d
2129   1198 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2130   119C E4            pop a
2131   119D DA            push d
2132   119E 3B AD 6D      mov d, _map_data ; $map
2133   11A1 D7            push a
2134   11A2 DA            push d
2135   11A3 FA FC FF      lea d, [bp + -4] ; $yp
2136   11A6 32            mov bl, [d]
2137   11A7 A7 00         mov bh, 0
2138   11A9 38 00 00      mov c, 0
2139   11AC E7            pop d
2140   11AD FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2141   11B1 DA            push d
2142   11B2 FA FB FF      lea d, [bp + -5] ; $xp
2143   11B5 32            mov bl, [d]
2144   11B6 A7 00         mov bh, 0
2145   11B8 38 00 00      mov c, 0
2146   11BB E7            pop d
2147   11BC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2148   11C0 E4            pop a
2149   11C1 2A            mov b, [d]
2150   11C2 38 00 00      mov c, 0
2151   11C5             ; --- START TERMS
2152   11C5 D7            push a
2153   11C6 11            mov a, b
2154   11C7 FD 2E 01 00   mov32 cb, $00000001
2154   11CB 00 00 
2155   11CD             ; --- START SHIFT
2156   11CD D7            push a
2157   11CE 11            mov a, b
2158   11CF FD 2E 04 00   mov32 cb, $00000004
2158   11D3 00 00 
2159   11D5 FD 39         mov c, b
2160   11D7 9D            shl a, cl
2161   11D8 27            mov b, a
2162   11D9 E4            pop a
2163   11DA             ; --- END SHIFT
2164   11DA 56            add b, a
2165   11DB E4            pop a
2166   11DC             ; --- END TERMS
2167   11DC E7            pop d
2168   11DD FD 43         mov [d], b
2169   11DF             ; starbases_left++; 
2170   11DF 3B 89 6D      mov d, _starbases_left ; $starbases_left
2171   11E2 32            mov bl, [d]
2172   11E3 A7 00         mov bh, 0
2173   11E5 38 00 00      mov c, 0
2174   11E8 FD 77         inc b
2175   11EA 3B 89 6D      mov d, _starbases_left ; $starbases_left
2176   11ED FD 3E         mov [d], bl
2177   11EF FD 7D         dec b
2178   11F1 0A F4 11      jmp _if59_exit
2179   11F4             _if59_exit:
2180   11F4             ; total_klingons = klingons_left; 
2181   11F4 3B 5C 6E      mov d, _total_klingons ; $total_klingons
2182   11F7 DA            push d
2183   11F8 3B 5D 6E      mov d, _klingons_left ; $klingons_left
2184   11FB 32            mov bl, [d]
2185   11FC A7 00         mov bh, 0
2186   11FE 38 00 00      mov c, 0
2187   1201 E7            pop d
2188   1202 FD 3E         mov [d], bl
2189   1204             ; if (starbases_left != 1) { 
2190   1204             _if61_cond:
2191   1204 3B 89 6D      mov d, _starbases_left ; $starbases_left
2192   1207 32            mov bl, [d]
2193   1208 A7 00         mov bh, 0
2194   120A 38 00 00      mov c, 0
2195   120D             ; --- START RELATIONAL
2196   120D D7            push a
2197   120E 11            mov a, b
2198   120F FD 2E 01 00   mov32 cb, $00000001
2198   1213 00 00 
2199   1215 B0            cmp a, b
2200   1216 FD 72         sneq ; !=
2201   1218 E4            pop a
2202   1219             ; --- END RELATIONAL
2203   1219 C0 00 00      cmp b, 0
2204   121C C6 4E 12      je _if61_exit
2205   121F             _if61_TRUE:
2206   121F             ; strcpy(plural_2, "s"); 
2207   121F             ; --- START FUNCTION CALL
2208   121F 26 F8 72      mov b, _s57 ; "s"
2209   1222 FD AB         swp b
2210   1224 D8            push b
2211   1225 3B 7C 6F      mov d, _plural_2_data ; $plural_2
2212   1228 2D            mov b, d
2213   1229 38 00 00      mov c, 0
2214   122C FD AB         swp b
2215   122E D8            push b
2216   122F 07 C0 5E      call strcpy
2217   1232 51 04 00      add sp, 4
2218   1235             ; --- END FUNCTION CALL
2219   1235             ; strcpy(plural, "are"); 
2220   1235             ; --- START FUNCTION CALL
2221   1235 26 85 71      mov b, _s30 ; "are"
2222   1238 FD AB         swp b
2223   123A D8            push b
2224   123B 3B 7E 6F      mov d, _plural_data ; $plural
2225   123E 2D            mov b, d
2226   123F 38 00 00      mov c, 0
2227   1242 FD AB         swp b
2228   1244 D8            push b
2229   1245 07 C0 5E      call strcpy
2230   1248 51 04 00      add sp, 4
2231   124B             ; --- END FUNCTION CALL
2232   124B 0A 4E 12      jmp _if61_exit
2233   124E             _if61_exit:
2234   124E             ; getchar(); 
2235   124E             ; --- START FUNCTION CALL
2236   124E 07 1B 5E      call getchar
2237   1251 F9            leave
2238   1252 09            ret
2239   1253             
2240   1253             place_ship:
2241   1253 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2242   1256             ; quad[FROM_FIXED00(ship_y) - 1][FROM_FIXED00(ship_x) - 1] = 		4      ; 
2243   1256 3B 85 6E      mov d, _quad_data ; $quad
2244   1259 D7            push a
2245   125A DA            push d
2246   125B             ; --- START FUNCTION CALL
2247   125B 3B 7F 6E      mov d, _ship_y ; $ship_y
2248   125E 2A            mov b, [d]
2249   125F 38 00 00      mov c, 0
2250   1262 FD AB         swp b
2251   1264 D8            push b
2252   1265 07 DC 04      call FROM_FIXED00
2253   1268 51 02 00      add sp, 2
2254   126B             ; --- END FUNCTION CALL
2255   126B             ; --- START TERMS
2256   126B D7            push a
2257   126C 11            mov a, b
2258   126D FD 2E 01 00   mov32 cb, $00000001
2258   1271 00 00 
2259   1273 60            sub a, b
2260   1274 27            mov b, a
2261   1275 E4            pop a
2262   1276             ; --- END TERMS
2263   1276 E7            pop d
2264   1277 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
2265   127B DA            push d
2266   127C             ; --- START FUNCTION CALL
2267   127C 3B 81 6E      mov d, _ship_x ; $ship_x
2268   127F 2A            mov b, [d]
2269   1280 38 00 00      mov c, 0
2270   1283 FD AB         swp b
2271   1285 D8            push b
2272   1286 07 DC 04      call FROM_FIXED00
2273   1289 51 02 00      add sp, 2
2274   128C             ; --- END FUNCTION CALL
2275   128C             ; --- START TERMS
2276   128C D7            push a
2277   128D 11            mov a, b
2278   128E FD 2E 01 00   mov32 cb, $00000001
2278   1292 00 00 
2279   1294 60            sub a, b
2280   1295 27            mov b, a
2281   1296 E4            pop a
2282   1297             ; --- END TERMS
2283   1297 E7            pop d
2284   1298 5A            add d, b
2285   1299 E4            pop a
2286   129A DA            push d
2287   129B FD 2E 04 00   mov32 cb, $00000004
2287   129F 00 00 
2288   12A1 E7            pop d
2289   12A2 FD 3E         mov [d], bl
2290   12A4 F9            leave
2291   12A5 09            ret
2292   12A6             
2293   12A6             new_quadrant:
2294   12A6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2295   12A9             ; int i; 
2296   12A9 52 02 00      sub sp, 2
2297   12AC             ; unsigned int         tmp; 
2298   12AC 52 02 00      sub sp, 2
2299   12AF             ; struct klingon *k; 
2300   12AF 52 02 00      sub sp, 2
2301   12B2             ; k = &kdata; 
2302   12B2 FA FB FF      lea d, [bp + -5] ; $k
2303   12B5 DA            push d
2304   12B6 3B 4F 6E      mov d, _kdata_data ; $kdata
2305   12B9 2D            mov b, d
2306   12BA E7            pop d
2307   12BB FD 43         mov [d], b
2308   12BD             ; klingons = 0; 
2309   12BD 3B 5B 6E      mov d, _klingons ; $klingons
2310   12C0 DA            push d
2311   12C1 FD 2E 00 00   mov32 cb, $00000000
2311   12C5 00 00 
2312   12C7 E7            pop d
2313   12C8 FD 3E         mov [d], bl
2314   12CA             ; starbases = 0; 
2315   12CA 3B 86 6D      mov d, _starbases ; $starbases
2316   12CD DA            push d
2317   12CE FD 2E 00 00   mov32 cb, $00000000
2317   12D2 00 00 
2318   12D4 E7            pop d
2319   12D5 FD 3E         mov [d], bl
2320   12D7             ; stars = 0; 
2321   12D7 3B 66 6E      mov d, _stars ; $stars
2322   12DA DA            push d
2323   12DB FD 2E 00 00   mov32 cb, $00000000
2323   12DF 00 00 
2324   12E1 E7            pop d
2325   12E2 FD 3E         mov [d], bl
2326   12E4             ; d4 = get_rand(50) - 1; 
2327   12E4 3B 7D 6E      mov d, _d4 ; $d4
2328   12E7 DA            push d
2329   12E8             ; --- START FUNCTION CALL
2330   12E8 FD 2E 32 00   mov32 cb, $00000032
2330   12EC 00 00 
2331   12EE FD AB         swp b
2332   12F0 D8            push b
2333   12F1 07 FF 04      call get_rand
2334   12F4 51 02 00      add sp, 2
2335   12F7             ; --- END FUNCTION CALL
2336   12F7             ; --- START TERMS
2337   12F7 D7            push a
2338   12F8 11            mov a, b
2339   12F9 FD 2E 01 00   mov32 cb, $00000001
2339   12FD 00 00 
2340   12FF 60            sub a, b
2341   1300 27            mov b, a
2342   1301 E4            pop a
2343   1302             ; --- END TERMS
2344   1302 E7            pop d
2345   1303 FD 43         mov [d], b
2346   1305             ; map[quad_y][quad_x] = map[quad_y][quad_x] |  0x1000		/* Set if this sector was mapped */           ; 
2347   1305 3B AD 6D      mov d, _map_data ; $map
2348   1308 D7            push a
2349   1309 DA            push d
2350   130A 3B 60 6E      mov d, _quad_y ; $quad_y
2351   130D 2A            mov b, [d]
2352   130E 38 00 00      mov c, 0
2353   1311 E7            pop d
2354   1312 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2355   1316 DA            push d
2356   1317 3B 62 6E      mov d, _quad_x ; $quad_x
2357   131A 2A            mov b, [d]
2358   131B 38 00 00      mov c, 0
2359   131E E7            pop d
2360   131F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2361   1323 E4            pop a
2362   1324 DA            push d
2363   1325 3B AD 6D      mov d, _map_data ; $map
2364   1328 D7            push a
2365   1329 DA            push d
2366   132A 3B 60 6E      mov d, _quad_y ; $quad_y
2367   132D 2A            mov b, [d]
2368   132E 38 00 00      mov c, 0
2369   1331 E7            pop d
2370   1332 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2371   1336 DA            push d
2372   1337 3B 62 6E      mov d, _quad_x ; $quad_x
2373   133A 2A            mov b, [d]
2374   133B 38 00 00      mov c, 0
2375   133E E7            pop d
2376   133F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2377   1343 E4            pop a
2378   1344 2A            mov b, [d]
2379   1345 38 00 00      mov c, 0
2380   1348 D7            push a
2381   1349 11            mov a, b
2382   134A FD 2E 00 10   mov32 cb, $00001000
2382   134E 00 00 
2383   1350 FD 70         or b, a ; |
2384   1352 E4            pop a
2385   1353 E7            pop d
2386   1354 FD 43         mov [d], b
2387   1356             ; if (quad_y >= 1 && quad_y <= 8 && quad_x >= 1 && quad_x <= 8) { 
2388   1356             _if62_cond:
2389   1356 3B 60 6E      mov d, _quad_y ; $quad_y
2390   1359 2A            mov b, [d]
2391   135A 38 00 00      mov c, 0
2392   135D             ; --- START RELATIONAL
2393   135D D7            push a
2394   135E 11            mov a, b
2395   135F FD 2E 01 00   mov32 cb, $00000001
2395   1363 00 00 
2396   1365 B0            cmp a, b
2397   1366 FD 80         sge ; >=
2398   1368 E4            pop a
2399   1369             ; --- END RELATIONAL
2400   1369             ; --- START LOGICAL AND
2401   1369 D7            push a
2402   136A 11            mov a, b
2403   136B 3B 60 6E      mov d, _quad_y ; $quad_y
2404   136E 2A            mov b, [d]
2405   136F 38 00 00      mov c, 0
2406   1372             ; --- START RELATIONAL
2407   1372 D7            push a
2408   1373 11            mov a, b
2409   1374 FD 2E 08 00   mov32 cb, $00000008
2409   1378 00 00 
2410   137A B0            cmp a, b
2411   137B FD 74         sle ; <= (signed)
2412   137D E4            pop a
2413   137E             ; --- END RELATIONAL
2414   137E FD A7         sand a, b
2415   1380 11            mov a, b
2416   1381 3B 62 6E      mov d, _quad_x ; $quad_x
2417   1384 2A            mov b, [d]
2418   1385 38 00 00      mov c, 0
2419   1388             ; --- START RELATIONAL
2420   1388 D7            push a
2421   1389 11            mov a, b
2422   138A FD 2E 01 00   mov32 cb, $00000001
2422   138E 00 00 
2423   1390 B0            cmp a, b
2424   1391 FD 80         sge ; >=
2425   1393 E4            pop a
2426   1394             ; --- END RELATIONAL
2427   1394 FD A7         sand a, b
2428   1396 11            mov a, b
2429   1397 3B 62 6E      mov d, _quad_x ; $quad_x
2430   139A 2A            mov b, [d]
2431   139B 38 00 00      mov c, 0
2432   139E             ; --- START RELATIONAL
2433   139E D7            push a
2434   139F 11            mov a, b
2435   13A0 FD 2E 08 00   mov32 cb, $00000008
2435   13A4 00 00 
2436   13A6 B0            cmp a, b
2437   13A7 FD 74         sle ; <= (signed)
2438   13A9 E4            pop a
2439   13AA             ; --- END RELATIONAL
2440   13AA FD A7         sand a, b
2441   13AC E4            pop a
2442   13AD             ; --- END LOGICAL AND
2443   13AD C0 00 00      cmp b, 0
2444   13B0 C6 31 14      je _if62_exit
2445   13B3             _if62_TRUE:
2446   13B3             ; quadrant_name(0, quad_y, quad_x); 
2447   13B3             ; --- START FUNCTION CALL
2448   13B3 3B 62 6E      mov d, _quad_x ; $quad_x
2449   13B6 2A            mov b, [d]
2450   13B7 38 00 00      mov c, 0
2451   13BA DD            push bl
2452   13BB 3B 60 6E      mov d, _quad_y ; $quad_y
2453   13BE 2A            mov b, [d]
2454   13BF 38 00 00      mov c, 0
2455   13C2 DD            push bl
2456   13C3 FD 2E 00 00   mov32 cb, $00000000
2456   13C7 00 00 
2457   13C9 DD            push bl
2458   13CA 07 BF 59      call quadrant_name
2459   13CD 51 03 00      add sp, 3
2460   13D0             ; --- END FUNCTION CALL
2461   13D0             ; if (TO_FIXED(time_start) != stardate) 
2462   13D0             _if63_cond:
2463   13D0             ; --- START FUNCTION CALL
2464   13D0 3B 67 6E      mov d, _time_start ; $time_start
2465   13D3 2A            mov b, [d]
2466   13D4 38 00 00      mov c, 0
2467   13D7 FD AB         swp b
2468   13D9 D8            push b
2469   13DA 07 17 04      call TO_FIXED
2470   13DD 51 02 00      add sp, 2
2471   13E0             ; --- END FUNCTION CALL
2472   13E0             ; --- START RELATIONAL
2473   13E0 D7            push a
2474   13E1 11            mov a, b
2475   13E2 3B 83 6E      mov d, _stardate ; $stardate
2476   13E5 2A            mov b, [d]
2477   13E6 38 00 00      mov c, 0
2478   13E9 B0            cmp a, b
2479   13EA FD 72         sneq ; !=
2480   13EC E4            pop a
2481   13ED             ; --- END RELATIONAL
2482   13ED C0 00 00      cmp b, 0
2483   13F0 C6 0C 14      je _if63_else
2484   13F3             _if63_TRUE:
2485   13F3             ; printf("Now entering %s quadrant...\n\n", quadname); 
2486   13F3             ; --- START FUNCTION CALL
2487   13F3 3B C5 6E      mov d, _quadname_data ; $quadname
2488   13F6 2D            mov b, d
2489   13F7 38 00 00      mov c, 0
2490   13FA FD AB         swp b
2491   13FC D8            push b
2492   13FD 26 FA 72      mov b, _s58 ; "Now entering %s quadrant...\n\n"
2493   1400 FD AB         swp b
2494   1402 D8            push b
2495   1403 07 78 60      call printf
2496   1406 51 04 00      add sp, 4
2497   1409             ; --- END FUNCTION CALL
2498   1409 0A 2E 14      jmp _if63_exit
2499   140C             _if63_else:
2500   140C             ; puts("\nYour mission begins with your starship located"); 
2501   140C             ; --- START FUNCTION CALL
2502   140C 26 18 73      mov b, _s59 ; "\nYour mission begins with your starship located"
2503   140F FD AB         swp b
2504   1411 D8            push b
2505   1412 07 85 69      call puts
2506   1415 51 02 00      add sp, 2
2507   1418             ; --- END FUNCTION CALL
2508   1418             ; printf("in the galactic quadrant %s.\n\n", quadname); 
2509   1418             ; --- START FUNCTION CALL
2510   1418 3B C5 6E      mov d, _quadname_data ; $quadname
2511   141B 2D            mov b, d
2512   141C 38 00 00      mov c, 0
2513   141F FD AB         swp b
2514   1421 D8            push b
2515   1422 26 48 73      mov b, _s60 ; "in the galactic quadrant %s.\n\n"
2516   1425 FD AB         swp b
2517   1427 D8            push b
2518   1428 07 78 60      call printf
2519   142B 51 04 00      add sp, 4
2520   142E             ; --- END FUNCTION CALL
2521   142E             _if63_exit:
2522   142E 0A 31 14      jmp _if62_exit
2523   1431             _if62_exit:
2524   1431             ; tmp = map[quad_y][quad_x]; 
2525   1431 FA FD FF      lea d, [bp + -3] ; $tmp
2526   1434 DA            push d
2527   1435 3B AD 6D      mov d, _map_data ; $map
2528   1438 D7            push a
2529   1439 DA            push d
2530   143A 3B 60 6E      mov d, _quad_y ; $quad_y
2531   143D 2A            mov b, [d]
2532   143E 38 00 00      mov c, 0
2533   1441 E7            pop d
2534   1442 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2535   1446 DA            push d
2536   1447 3B 62 6E      mov d, _quad_x ; $quad_x
2537   144A 2A            mov b, [d]
2538   144B 38 00 00      mov c, 0
2539   144E E7            pop d
2540   144F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2541   1453 E4            pop a
2542   1454 2A            mov b, [d]
2543   1455 38 00 00      mov c, 0
2544   1458 E7            pop d
2545   1459 FD 43         mov [d], b
2546   145B             ; klingons = (tmp >> 8) & 0x0F; 
2547   145B 3B 5B 6E      mov d, _klingons ; $klingons
2548   145E DA            push d
2549   145F FA FD FF      lea d, [bp + -3] ; $tmp
2550   1462 2A            mov b, [d]
2551   1463 38 00 00      mov c, 0
2552   1466             ; --- START SHIFT
2553   1466 D7            push a
2554   1467 11            mov a, b
2555   1468 FD 2E 08 00   mov32 cb, $00000008
2555   146C 00 00 
2556   146E FD 39         mov c, b
2557   1470 A1            shr a, cl
2558   1471 27            mov b, a
2559   1472 E4            pop a
2560   1473             ; --- END SHIFT
2561   1473 D7            push a
2562   1474 11            mov a, b
2563   1475 FD 2E 0F 00   mov32 cb, $0000000f
2563   1479 00 00 
2564   147B FD 92         and b, a ; &
2565   147D E4            pop a
2566   147E E7            pop d
2567   147F FD 3E         mov [d], bl
2568   1481             ; starbases = (tmp >> 4) & 0x0F; 
2569   1481 3B 86 6D      mov d, _starbases ; $starbases
2570   1484 DA            push d
2571   1485 FA FD FF      lea d, [bp + -3] ; $tmp
2572   1488 2A            mov b, [d]
2573   1489 38 00 00      mov c, 0
2574   148C             ; --- START SHIFT
2575   148C D7            push a
2576   148D 11            mov a, b
2577   148E FD 2E 04 00   mov32 cb, $00000004
2577   1492 00 00 
2578   1494 FD 39         mov c, b
2579   1496 A1            shr a, cl
2580   1497 27            mov b, a
2581   1498 E4            pop a
2582   1499             ; --- END SHIFT
2583   1499 D7            push a
2584   149A 11            mov a, b
2585   149B FD 2E 0F 00   mov32 cb, $0000000f
2585   149F 00 00 
2586   14A1 FD 92         and b, a ; &
2587   14A3 E4            pop a
2588   14A4 E7            pop d
2589   14A5 FD 3E         mov [d], bl
2590   14A7             ; stars = tmp & 0x0F; 
2591   14A7 3B 66 6E      mov d, _stars ; $stars
2592   14AA DA            push d
2593   14AB FA FD FF      lea d, [bp + -3] ; $tmp
2594   14AE 2A            mov b, [d]
2595   14AF 38 00 00      mov c, 0
2596   14B2 D7            push a
2597   14B3 11            mov a, b
2598   14B4 FD 2E 0F 00   mov32 cb, $0000000f
2598   14B8 00 00 
2599   14BA FD 92         and b, a ; &
2600   14BC E4            pop a
2601   14BD E7            pop d
2602   14BE FD 3E         mov [d], bl
2603   14C0             ; if (klingons > 0) { 
2604   14C0             _if64_cond:
2605   14C0 3B 5B 6E      mov d, _klingons ; $klingons
2606   14C3 32            mov bl, [d]
2607   14C4 A7 00         mov bh, 0
2608   14C6 38 00 00      mov c, 0
2609   14C9             ; --- START RELATIONAL
2610   14C9 D7            push a
2611   14CA 11            mov a, b
2612   14CB FD 2E 00 00   mov32 cb, $00000000
2612   14CF 00 00 
2613   14D1 B0            cmp a, b
2614   14D2 FD 81         sgu ; > (unsigned)
2615   14D4 E4            pop a
2616   14D5             ; --- END RELATIONAL
2617   14D5 C0 00 00      cmp b, 0
2618   14D8 C6 12 15      je _if64_exit
2619   14DB             _if64_TRUE:
2620   14DB             ; printf("Combat Area  Condition Red\n"); 
2621   14DB             ; --- START FUNCTION CALL
2622   14DB 26 67 73      mov b, _s61 ; "Combat Area  Condition Red\n"
2623   14DE FD AB         swp b
2624   14E0 D8            push b
2625   14E1 07 78 60      call printf
2626   14E4 51 02 00      add sp, 2
2627   14E7             ; --- END FUNCTION CALL
2628   14E7             ; if (shield < 200) 
2629   14E7             _if65_cond:
2630   14E7 3B 64 6E      mov d, _shield ; $shield
2631   14EA 2A            mov b, [d]
2632   14EB 38 00 00      mov c, 0
2633   14EE             ; --- START RELATIONAL
2634   14EE D7            push a
2635   14EF 11            mov a, b
2636   14F0 FD 2E C8 00   mov32 cb, $000000c8
2636   14F4 00 00 
2637   14F6 B0            cmp a, b
2638   14F7 FD 73         slt ; < (signed)
2639   14F9 E4            pop a
2640   14FA             ; --- END RELATIONAL
2641   14FA C0 00 00      cmp b, 0
2642   14FD C6 0F 15      je _if65_exit
2643   1500             _if65_TRUE:
2644   1500             ; printf("Shields Dangerously Low\n"); 
2645   1500             ; --- START FUNCTION CALL
2646   1500 26 83 73      mov b, _s62 ; "Shields Dangerously Low\n"
2647   1503 FD AB         swp b
2648   1505 D8            push b
2649   1506 07 78 60      call printf
2650   1509 51 02 00      add sp, 2
2651   150C             ; --- END FUNCTION CALL
2652   150C 0A 0F 15      jmp _if65_exit
2653   150F             _if65_exit:
2654   150F 0A 12 15      jmp _if64_exit
2655   1512             _if64_exit:
2656   1512             ; for (i = 1; i <= 3; i++) { 
2657   1512             _for66_init:
2658   1512 FA FF FF      lea d, [bp + -1] ; $i
2659   1515 DA            push d
2660   1516 FD 2E 01 00   mov32 cb, $00000001
2660   151A 00 00 
2661   151C E7            pop d
2662   151D FD 43         mov [d], b
2663   151F             _for66_cond:
2664   151F FA FF FF      lea d, [bp + -1] ; $i
2665   1522 2A            mov b, [d]
2666   1523 38 00 00      mov c, 0
2667   1526             ; --- START RELATIONAL
2668   1526 D7            push a
2669   1527 11            mov a, b
2670   1528 FD 2E 03 00   mov32 cb, $00000003
2670   152C 00 00 
2671   152E B0            cmp a, b
2672   152F FD 74         sle ; <= (signed)
2673   1531 E4            pop a
2674   1532             ; --- END RELATIONAL
2675   1532 C0 00 00      cmp b, 0
2676   1535 C6 93 15      je _for66_exit
2677   1538             _for66_block:
2678   1538             ; k->y = 0; 
2679   1538 FA FB FF      lea d, [bp + -5] ; $k
2680   153B FD 2A         mov d, [d]
2681   153D 58 00 00      add d, 0
2682   1540 DA            push d
2683   1541 FD 2E 00 00   mov32 cb, $00000000
2683   1545 00 00 
2684   1547 E7            pop d
2685   1548 FD 3E         mov [d], bl
2686   154A             ; k->x = 0; 
2687   154A FA FB FF      lea d, [bp + -5] ; $k
2688   154D FD 2A         mov d, [d]
2689   154F 58 01 00      add d, 1
2690   1552 DA            push d
2691   1553 FD 2E 00 00   mov32 cb, $00000000
2691   1557 00 00 
2692   1559 E7            pop d
2693   155A FD 3E         mov [d], bl
2694   155C             ; k->energy = 0; 
2695   155C FA FB FF      lea d, [bp + -5] ; $k
2696   155F FD 2A         mov d, [d]
2697   1561 58 02 00      add d, 2
2698   1564 DA            push d
2699   1565 FD 2E 00 00   mov32 cb, $00000000
2699   1569 00 00 
2700   156B E7            pop d
2701   156C FD 43         mov [d], b
2702   156E             ; k++; 
2703   156E FA FB FF      lea d, [bp + -5] ; $k
2704   1571 2A            mov b, [d]
2705   1572 38 00 00      mov c, 0
2706   1575 11            mov a, b
2707   1576 FD 77         inc b
2708   1578 FD 77         inc b
2709   157A FA FB FF      lea d, [bp + -5] ; $k
2710   157D FD 43         mov [d], b
2711   157F 27            mov b, a
2712   1580             _for66_update:
2713   1580 FA FF FF      lea d, [bp + -1] ; $i
2714   1583 2A            mov b, [d]
2715   1584 38 00 00      mov c, 0
2716   1587 11            mov a, b
2717   1588 FD 77         inc b
2718   158A FA FF FF      lea d, [bp + -1] ; $i
2719   158D FD 43         mov [d], b
2720   158F 27            mov b, a
2721   1590 0A 1F 15      jmp _for66_cond
2722   1593             _for66_exit:
2723   1593             ; memset(quad, 		0       , 64); 
2724   1593             ; --- START FUNCTION CALL
2725   1593 FD 2E 40 00   mov32 cb, $00000040
2725   1597 00 00 
2726   1599 FD AB         swp b
2727   159B D8            push b
2728   159C FD 2E 00 00   mov32 cb, $00000000
2728   15A0 00 00 
2729   15A2 DD            push bl
2730   15A3 3B 85 6E      mov d, _quad_data ; $quad
2731   15A6 2D            mov b, d
2732   15A7 38 00 00      mov c, 0
2733   15AA FD AB         swp b
2734   15AC D8            push b
2735   15AD 07 A3 69      call memset
2736   15B0 51 05 00      add sp, 5
2737   15B3             ; --- END FUNCTION CALL
2738   15B3             ; place_ship(); 
2739   15B3             ; --- START FUNCTION CALL
2740   15B3 07 53 12      call place_ship
2741   15B6             ; if (klingons > 0) { 
2742   15B6             _if67_cond:
2743   15B6 3B 5B 6E      mov d, _klingons ; $klingons
2744   15B9 32            mov bl, [d]
2745   15BA A7 00         mov bh, 0
2746   15BC 38 00 00      mov c, 0
2747   15BF             ; --- START RELATIONAL
2748   15BF D7            push a
2749   15C0 11            mov a, b
2750   15C1 FD 2E 00 00   mov32 cb, $00000000
2750   15C5 00 00 
2751   15C7 B0            cmp a, b
2752   15C8 FD 81         sgu ; > (unsigned)
2753   15CA E4            pop a
2754   15CB             ; --- END RELATIONAL
2755   15CB C0 00 00      cmp b, 0
2756   15CE C6 84 16      je _if67_exit
2757   15D1             _if67_TRUE:
2758   15D1             ; k = kdata; 
2759   15D1 FA FB FF      lea d, [bp + -5] ; $k
2760   15D4 DA            push d
2761   15D5 3B 4F 6E      mov d, _kdata_data ; $kdata
2762   15D8 2D            mov b, d
2763   15D9 38 00 00      mov c, 0
2764   15DC E7            pop d
2765   15DD FD 43         mov [d], b
2766   15DF             ; for (i = 0; i < klingons; i++) { 
2767   15DF             _for68_init:
2768   15DF FA FF FF      lea d, [bp + -1] ; $i
2769   15E2 DA            push d
2770   15E3 FD 2E 00 00   mov32 cb, $00000000
2770   15E7 00 00 
2771   15E9 E7            pop d
2772   15EA FD 43         mov [d], b
2773   15EC             _for68_cond:
2774   15EC FA FF FF      lea d, [bp + -1] ; $i
2775   15EF 2A            mov b, [d]
2776   15F0 38 00 00      mov c, 0
2777   15F3             ; --- START RELATIONAL
2778   15F3 D7            push a
2779   15F4 11            mov a, b
2780   15F5 3B 5B 6E      mov d, _klingons ; $klingons
2781   15F8 32            mov bl, [d]
2782   15F9 A7 00         mov bh, 0
2783   15FB 38 00 00      mov c, 0
2784   15FE B0            cmp a, b
2785   15FF FD 73         slt ; < (signed)
2786   1601 E4            pop a
2787   1602             ; --- END RELATIONAL
2788   1602 C0 00 00      cmp b, 0
2789   1605 C6 81 16      je _for68_exit
2790   1608             _for68_block:
2791   1608             ; find_set_empty_place(	3         , k->y, k->x); 
2792   1608             ; --- START FUNCTION CALL
2793   1608 FA FB FF      lea d, [bp + -5] ; $k
2794   160B FD 2A         mov d, [d]
2795   160D 58 01 00      add d, 1
2796   1610 32            mov bl, [d]
2797   1611 A7 00         mov bh, 0
2798   1613 38 00 00      mov c, 0
2799   1616 FD AB         swp b
2800   1618 D8            push b
2801   1619 FA FB FF      lea d, [bp + -5] ; $k
2802   161C FD 2A         mov d, [d]
2803   161E 58 00 00      add d, 0
2804   1621 32            mov bl, [d]
2805   1622 A7 00         mov bh, 0
2806   1624 38 00 00      mov c, 0
2807   1627 FD AB         swp b
2808   1629 D8            push b
2809   162A FD 2E 03 00   mov32 cb, $00000003
2809   162E 00 00 
2810   1630 DD            push bl
2811   1631 07 6F 58      call find_set_empty_place
2812   1634 51 05 00      add sp, 5
2813   1637             ; --- END FUNCTION CALL
2814   1637             ; k->energy = 100 + get_rand(200); 
2815   1637 FA FB FF      lea d, [bp + -5] ; $k
2816   163A FD 2A         mov d, [d]
2817   163C 58 02 00      add d, 2
2818   163F DA            push d
2819   1640 FD 2E 64 00   mov32 cb, $00000064
2819   1644 00 00 
2820   1646             ; --- START TERMS
2821   1646 D7            push a
2822   1647 11            mov a, b
2823   1648             ; --- START FUNCTION CALL
2824   1648 FD 2E C8 00   mov32 cb, $000000c8
2824   164C 00 00 
2825   164E FD AB         swp b
2826   1650 D8            push b
2827   1651 07 FF 04      call get_rand
2828   1654 51 02 00      add sp, 2
2829   1657             ; --- END FUNCTION CALL
2830   1657 56            add b, a
2831   1658 E4            pop a
2832   1659             ; --- END TERMS
2833   1659 E7            pop d
2834   165A FD 43         mov [d], b
2835   165C             ; k++; 
2836   165C FA FB FF      lea d, [bp + -5] ; $k
2837   165F 2A            mov b, [d]
2838   1660 38 00 00      mov c, 0
2839   1663 11            mov a, b
2840   1664 FD 77         inc b
2841   1666 FD 77         inc b
2842   1668 FA FB FF      lea d, [bp + -5] ; $k
2843   166B FD 43         mov [d], b
2844   166D 27            mov b, a
2845   166E             _for68_update:
2846   166E FA FF FF      lea d, [bp + -1] ; $i
2847   1671 2A            mov b, [d]
2848   1672 38 00 00      mov c, 0
2849   1675 11            mov a, b
2850   1676 FD 77         inc b
2851   1678 FA FF FF      lea d, [bp + -1] ; $i
2852   167B FD 43         mov [d], b
2853   167D 27            mov b, a
2854   167E 0A EC 15      jmp _for68_cond
2855   1681             _for68_exit:
2856   1681 0A 84 16      jmp _if67_exit
2857   1684             _if67_exit:
2858   1684             ; if (starbases > 0) 
2859   1684             _if69_cond:
2860   1684 3B 86 6D      mov d, _starbases ; $starbases
2861   1687 32            mov bl, [d]
2862   1688 A7 00         mov bh, 0
2863   168A 38 00 00      mov c, 0
2864   168D             ; --- START RELATIONAL
2865   168D D7            push a
2866   168E 11            mov a, b
2867   168F FD 2E 00 00   mov32 cb, $00000000
2867   1693 00 00 
2868   1695 B0            cmp a, b
2869   1696 FD 7F         sgt ; >
2870   1698 E4            pop a
2871   1699             ; --- END RELATIONAL
2872   1699 C0 00 00      cmp b, 0
2873   169C C6 BD 16      je _if69_exit
2874   169F             _if69_TRUE:
2875   169F             ; find_set_empty_place(		2      , &base_y, &base_x); 
2876   169F             ; --- START FUNCTION CALL
2877   169F 3B 88 6D      mov d, _base_x ; $base_x
2878   16A2 2D            mov b, d
2879   16A3 FD AB         swp b
2880   16A5 D8            push b
2881   16A6 3B 87 6D      mov d, _base_y ; $base_y
2882   16A9 2D            mov b, d
2883   16AA FD AB         swp b
2884   16AC D8            push b
2885   16AD FD 2E 02 00   mov32 cb, $00000002
2885   16B1 00 00 
2886   16B3 DD            push bl
2887   16B4 07 6F 58      call find_set_empty_place
2888   16B7 51 05 00      add sp, 5
2889   16BA             ; --- END FUNCTION CALL
2890   16BA 0A BD 16      jmp _if69_exit
2891   16BD             _if69_exit:
2892   16BD             ; for (i = 1; i <= stars; i++) 
2893   16BD             _for70_init:
2894   16BD FA FF FF      lea d, [bp + -1] ; $i
2895   16C0 DA            push d
2896   16C1 FD 2E 01 00   mov32 cb, $00000001
2896   16C5 00 00 
2897   16C7 E7            pop d
2898   16C8 FD 43         mov [d], b
2899   16CA             _for70_cond:
2900   16CA FA FF FF      lea d, [bp + -1] ; $i
2901   16CD 2A            mov b, [d]
2902   16CE 38 00 00      mov c, 0
2903   16D1             ; --- START RELATIONAL
2904   16D1 D7            push a
2905   16D2 11            mov a, b
2906   16D3 3B 66 6E      mov d, _stars ; $stars
2907   16D6 32            mov bl, [d]
2908   16D7 A7 00         mov bh, 0
2909   16D9 38 00 00      mov c, 0
2910   16DC B0            cmp a, b
2911   16DD FD 74         sle ; <= (signed)
2912   16DF E4            pop a
2913   16E0             ; --- END RELATIONAL
2914   16E0 C0 00 00      cmp b, 0
2915   16E3 C6 18 17      je _for70_exit
2916   16E6             _for70_block:
2917   16E6             ; find_set_empty_place(		1      ,  0    ,  0    ); 
2918   16E6             ; --- START FUNCTION CALL
2919   16E6 FD 2E 00 00   mov32 cb, $00000000
2919   16EA 00 00 
2920   16EC FD AB         swp b
2921   16EE D8            push b
2922   16EF FD 2E 00 00   mov32 cb, $00000000
2922   16F3 00 00 
2923   16F5 FD AB         swp b
2924   16F7 D8            push b
2925   16F8 FD 2E 01 00   mov32 cb, $00000001
2925   16FC 00 00 
2926   16FE DD            push bl
2927   16FF 07 6F 58      call find_set_empty_place
2928   1702 51 05 00      add sp, 5
2929   1705             ; --- END FUNCTION CALL
2930   1705             _for70_update:
2931   1705 FA FF FF      lea d, [bp + -1] ; $i
2932   1708 2A            mov b, [d]
2933   1709 38 00 00      mov c, 0
2934   170C 11            mov a, b
2935   170D FD 77         inc b
2936   170F FA FF FF      lea d, [bp + -1] ; $i
2937   1712 FD 43         mov [d], b
2938   1714 27            mov b, a
2939   1715 0A CA 16      jmp _for70_cond
2940   1718             _for70_exit:
2941   1718 F9            leave
2942   1719 09            ret
2943   171A             
2944   171A             course_control:
2945   171A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2946   171D             ; int i; 
2947   171D 52 02 00      sub sp, 2
2948   1720             ; int        c1; 
2949   1720 52 02 00      sub sp, 2
2950   1723             ; int        warp; 
2951   1723 52 02 00      sub sp, 2
2952   1726             ; unsigned int         n; 
2953   1726 52 02 00      sub sp, 2
2954   1729             ; int c2, c3, c4; 
2955   1729 52 02 00      sub sp, 2
2956   172C 52 02 00      sub sp, 2
2957   172F 52 02 00      sub sp, 2
2958   1732             ; int        z1, z2; 
2959   1732 52 02 00      sub sp, 2
2960   1735 52 02 00      sub sp, 2
2961   1738             ; int        x1, x2; 
2962   1738 52 02 00      sub sp, 2
2963   173B 52 02 00      sub sp, 2
2964   173E             ; int        x, y; 
2965   173E 52 02 00      sub sp, 2
2966   1741 52 02 00      sub sp, 2
2967   1744             ; unsigned char        outside = 0;		/* Outside galaxy flag */ 
2968   1744 52 01 00      sub sp, 1
2969   1747             ; --- START LOCAL VAR INITIALIZATION
2970   1747 FA E6 FF      lea d, [bp + -26] ; $outside
2971   174A DA            push d
2972   174B FD 2E 00 00   mov32 cb, $00000000
2972   174F 00 00 
2973   1751 E7            pop d
2974   1752 FD 3E         mov [d], bl
2975   1754             ; --- END LOCAL VAR INITIALIZATION
2976   1754             ; unsigned char        quad_y_old; 
2977   1754 52 01 00      sub sp, 1
2978   1757             ; unsigned char        quad_x_old; 
2979   1757 52 01 00      sub sp, 1
2980   175A             ; puts("Course (0-9): " ); 
2981   175A             ; --- START FUNCTION CALL
2982   175A 26 9C 73      mov b, _s63 ; "Course (0-9): "
2983   175D FD AB         swp b
2984   175F D8            push b
2985   1760 07 85 69      call puts
2986   1763 51 02 00      add sp, 2
2987   1766             ; --- END FUNCTION CALL
2988   1766             ; c1 = input_f00(); 
2989   1766 FA FD FF      lea d, [bp + -3] ; $c1
2990   1769 DA            push d
2991   176A             ; --- START FUNCTION CALL
2992   176A 07 73 06      call input_f00
2993   176D E7            pop d
2994   176E FD 43         mov [d], b
2995   1770             ; if (c1 == 900) 
2996   1770             _if71_cond:
2997   1770 FA FD FF      lea d, [bp + -3] ; $c1
2998   1773 2A            mov b, [d]
2999   1774 38 00 00      mov c, 0
3000   1777             ; --- START RELATIONAL
3001   1777 D7            push a
3002   1778 11            mov a, b
3003   1779 FD 2E 84 03   mov32 cb, $00000384
3003   177D 00 00 
3004   177F B0            cmp a, b
3005   1780 FD 71         seq ; ==
3006   1782 E4            pop a
3007   1783             ; --- END RELATIONAL
3008   1783 C0 00 00      cmp b, 0
3009   1786 C6 99 17      je _if71_exit
3010   1789             _if71_TRUE:
3011   1789             ; c1 = 100; 
3012   1789 FA FD FF      lea d, [bp + -3] ; $c1
3013   178C DA            push d
3014   178D FD 2E 64 00   mov32 cb, $00000064
3014   1791 00 00 
3015   1793 E7            pop d
3016   1794 FD 43         mov [d], b
3017   1796 0A 99 17      jmp _if71_exit
3018   1799             _if71_exit:
3019   1799             ; if (c1 < 0 || c1 > 900) { 
3020   1799             _if72_cond:
3021   1799 FA FD FF      lea d, [bp + -3] ; $c1
3022   179C 2A            mov b, [d]
3023   179D 38 00 00      mov c, 0
3024   17A0             ; --- START RELATIONAL
3025   17A0 D7            push a
3026   17A1 11            mov a, b
3027   17A2 FD 2E 00 00   mov32 cb, $00000000
3027   17A6 00 00 
3028   17A8 B0            cmp a, b
3029   17A9 FD 73         slt ; < (signed)
3030   17AB E4            pop a
3031   17AC             ; --- END RELATIONAL
3032   17AC             ; --- START LOGICAL OR
3033   17AC D7            push a
3034   17AD 11            mov a, b
3035   17AE FA FD FF      lea d, [bp + -3] ; $c1
3036   17B1 2A            mov b, [d]
3037   17B2 38 00 00      mov c, 0
3038   17B5             ; --- START RELATIONAL
3039   17B5 D7            push a
3040   17B6 11            mov a, b
3041   17B7 FD 2E 84 03   mov32 cb, $00000384
3041   17BB 00 00 
3042   17BD B0            cmp a, b
3043   17BE FD 7F         sgt ; >
3044   17C0 E4            pop a
3045   17C1             ; --- END RELATIONAL
3046   17C1 FD A8         sor a, b ; ||
3047   17C3 E4            pop a
3048   17C4             ; --- END LOGICAL OR
3049   17C4 C0 00 00      cmp b, 0
3050   17C7 C6 E5 17      je _if72_exit
3051   17CA             _if72_TRUE:
3052   17CA             ; printf("Lt. Sulu%s", inc_1); 
3053   17CA             ; --- START FUNCTION CALL
3054   17CA 3B F9 6E      mov d, _inc_1 ; $inc_1
3055   17CD 2A            mov b, [d]
3056   17CE 38 00 00      mov c, 0
3057   17D1 FD AB         swp b
3058   17D3 D8            push b
3059   17D4 26 AB 73      mov b, _s64 ; "Lt. Sulu%s"
3060   17D7 FD AB         swp b
3061   17D9 D8            push b
3062   17DA 07 78 60      call printf
3063   17DD 51 04 00      add sp, 4
3064   17E0             ; --- END FUNCTION CALL
3065   17E0             ; return; 
3066   17E0 F9            leave
3067   17E1 09            ret
3068   17E2 0A E5 17      jmp _if72_exit
3069   17E5             _if72_exit:
3070   17E5             ; if (damage[1] < 0) 
3071   17E5             _if73_cond:
3072   17E5 3B 6B 6E      mov d, _damage_data ; $damage
3073   17E8 D7            push a
3074   17E9 DA            push d
3075   17EA FD 2E 01 00   mov32 cb, $00000001
3075   17EE 00 00 
3076   17F0 E7            pop d
3077   17F1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3078   17F5 E4            pop a
3079   17F6 2A            mov b, [d]
3080   17F7 38 00 00      mov c, 0
3081   17FA             ; --- START RELATIONAL
3082   17FA D7            push a
3083   17FB 11            mov a, b
3084   17FC FD 2E 00 00   mov32 cb, $00000000
3084   1800 00 00 
3085   1802 B0            cmp a, b
3086   1803 FD 73         slt ; < (signed)
3087   1805 E4            pop a
3088   1806             ; --- END RELATIONAL
3089   1806 C0 00 00      cmp b, 0
3090   1809 C6 25 18      je _if73_exit
3091   180C             _if73_TRUE:
3092   180C             ; strcpy(warpmax, "0.2"); 
3093   180C             ; --- START FUNCTION CALL
3094   180C 26 B6 73      mov b, _s65 ; "0.2"
3095   180F FD AB         swp b
3096   1811 D8            push b
3097   1812 3B 82 6F      mov d, _warpmax_data ; $warpmax
3098   1815 2D            mov b, d
3099   1816 38 00 00      mov c, 0
3100   1819 FD AB         swp b
3101   181B D8            push b
3102   181C 07 C0 5E      call strcpy
3103   181F 51 04 00      add sp, 4
3104   1822             ; --- END FUNCTION CALL
3105   1822 0A 25 18      jmp _if73_exit
3106   1825             _if73_exit:
3107   1825             ; printf("Warp Factor (0-%s): ", warpmax); 
3108   1825             ; --- START FUNCTION CALL
3109   1825 3B 82 6F      mov d, _warpmax_data ; $warpmax
3110   1828 2D            mov b, d
3111   1829 38 00 00      mov c, 0
3112   182C FD AB         swp b
3113   182E D8            push b
3114   182F 26 BA 73      mov b, _s66 ; "Warp Factor (0-%s): "
3115   1832 FD AB         swp b
3116   1834 D8            push b
3117   1835 07 78 60      call printf
3118   1838 51 04 00      add sp, 4
3119   183B             ; --- END FUNCTION CALL
3120   183B             ; warp = input_f00(); 
3121   183B FA FB FF      lea d, [bp + -5] ; $warp
3122   183E DA            push d
3123   183F             ; --- START FUNCTION CALL
3124   183F 07 73 06      call input_f00
3125   1842 E7            pop d
3126   1843 FD 43         mov [d], b
3127   1845             ; if (damage[1] < 0 && warp > 20) { 
3128   1845             _if74_cond:
3129   1845 3B 6B 6E      mov d, _damage_data ; $damage
3130   1848 D7            push a
3131   1849 DA            push d
3132   184A FD 2E 01 00   mov32 cb, $00000001
3132   184E 00 00 
3133   1850 E7            pop d
3134   1851 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3135   1855 E4            pop a
3136   1856 2A            mov b, [d]
3137   1857 38 00 00      mov c, 0
3138   185A             ; --- START RELATIONAL
3139   185A D7            push a
3140   185B 11            mov a, b
3141   185C FD 2E 00 00   mov32 cb, $00000000
3141   1860 00 00 
3142   1862 B0            cmp a, b
3143   1863 FD 73         slt ; < (signed)
3144   1865 E4            pop a
3145   1866             ; --- END RELATIONAL
3146   1866             ; --- START LOGICAL AND
3147   1866 D7            push a
3148   1867 11            mov a, b
3149   1868 FA FB FF      lea d, [bp + -5] ; $warp
3150   186B 2A            mov b, [d]
3151   186C 38 00 00      mov c, 0
3152   186F             ; --- START RELATIONAL
3153   186F D7            push a
3154   1870 11            mov a, b
3155   1871 FD 2E 14 00   mov32 cb, $00000014
3155   1875 00 00 
3156   1877 B0            cmp a, b
3157   1878 FD 7F         sgt ; >
3158   187A E4            pop a
3159   187B             ; --- END RELATIONAL
3160   187B FD A7         sand a, b
3161   187D E4            pop a
3162   187E             ; --- END LOGICAL AND
3163   187E C0 00 00      cmp b, 0
3164   1881 C6 95 18      je _if74_exit
3165   1884             _if74_TRUE:
3166   1884             ; printf("Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"); 
3167   1884             ; --- START FUNCTION CALL
3168   1884 26 CF 73      mov b, _s67 ; "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"
3169   1887 FD AB         swp b
3170   1889 D8            push b
3171   188A 07 78 60      call printf
3172   188D 51 02 00      add sp, 2
3173   1890             ; --- END FUNCTION CALL
3174   1890             ; return; 
3175   1890 F9            leave
3176   1891 09            ret
3177   1892 0A 95 18      jmp _if74_exit
3178   1895             _if74_exit:
3179   1895             ; if (warp <= 0) 
3180   1895             _if75_cond:
3181   1895 FA FB FF      lea d, [bp + -5] ; $warp
3182   1898 2A            mov b, [d]
3183   1899 38 00 00      mov c, 0
3184   189C             ; --- START RELATIONAL
3185   189C D7            push a
3186   189D 11            mov a, b
3187   189E FD 2E 00 00   mov32 cb, $00000000
3187   18A2 00 00 
3188   18A4 B0            cmp a, b
3189   18A5 FD 74         sle ; <= (signed)
3190   18A7 E4            pop a
3191   18A8             ; --- END RELATIONAL
3192   18A8 C0 00 00      cmp b, 0
3193   18AB C6 B3 18      je _if75_exit
3194   18AE             _if75_TRUE:
3195   18AE             ; return; 
3196   18AE F9            leave
3197   18AF 09            ret
3198   18B0 0A B3 18      jmp _if75_exit
3199   18B3             _if75_exit:
3200   18B3             ; if (warp > 800) { 
3201   18B3             _if76_cond:
3202   18B3 FA FB FF      lea d, [bp + -5] ; $warp
3203   18B6 2A            mov b, [d]
3204   18B7 38 00 00      mov c, 0
3205   18BA             ; --- START RELATIONAL
3206   18BA D7            push a
3207   18BB 11            mov a, b
3208   18BC FD 2E 20 03   mov32 cb, $00000320
3208   18C0 00 00 
3209   18C2 B0            cmp a, b
3210   18C3 FD 7F         sgt ; >
3211   18C5 E4            pop a
3212   18C6             ; --- END RELATIONAL
3213   18C6 C0 00 00      cmp b, 0
3214   18C9 C6 F0 18      je _if76_exit
3215   18CC             _if76_TRUE:
3216   18CC             ; printf("Chief Engineer Scott reports:\n  The engines won't take warp %s!\n\n", print100(warp)); 
3217   18CC             ; --- START FUNCTION CALL
3218   18CC             ; --- START FUNCTION CALL
3219   18CC FA FB FF      lea d, [bp + -5] ; $warp
3220   18CF 2A            mov b, [d]
3221   18D0 38 00 00      mov c, 0
3222   18D3 FD AB         swp b
3223   18D5 D8            push b
3224   18D6 07 12 09      call print100
3225   18D9 51 02 00      add sp, 2
3226   18DC             ; --- END FUNCTION CALL
3227   18DC FD AB         swp b
3228   18DE D8            push b
3229   18DF 26 05 74      mov b, _s68 ; "Chief Engineer Scott reports:\n  The engines won't take warp %s!\n\n"
3230   18E2 FD AB         swp b
3231   18E4 D8            push b
3232   18E5 07 78 60      call printf
3233   18E8 51 04 00      add sp, 4
3234   18EB             ; --- END FUNCTION CALL
3235   18EB             ; return; 
3236   18EB F9            leave
3237   18EC 09            ret
3238   18ED 0A F0 18      jmp _if76_exit
3239   18F0             _if76_exit:
3240   18F0             ; n = warp * 8; 
3241   18F0 FA F9 FF      lea d, [bp + -7] ; $n
3242   18F3 DA            push d
3243   18F4 FA FB FF      lea d, [bp + -5] ; $warp
3244   18F7 2A            mov b, [d]
3245   18F8 38 00 00      mov c, 0
3246   18FB             ; --- START FACTORS
3247   18FB D7            push a
3248   18FC FD D8         push g
3249   18FE 11            mov a, b
3250   18FF FD 7A         mov g, c
3251   1901 FD 2E 08 00   mov32 cb, $00000008
3251   1905 00 00 
3252   1907 D7            push a     ; save left operand
3253   1908 8E            xor a, b   ; xor sign bits
3254   1909 FD AA         swp a      ; swap bytes
3255   190B 83            mov cl, al ; save result of xor into 'dl'
3256   190C E4            pop a      ; restore left side operator
3257   190D DF            push cl    ; save result of xor above
3258   190E FD AA         swp a  
3259   1910 93 80         test al, $80  
3260   1912 FD AA         swp a  
3261   1914 C6 19 19      jz skip_invert_a_78  
3262   1917 FD 95         neg a 
3263   1919             skip_invert_a_78:   
3264   1919 FD AB         swp b
3265   191B FD 93 80      test bl, $80  
3266   191E FD AB         swp b
3267   1920 C6 25 19      jz skip_invert_b_78  
3268   1923 FD 97         neg b 
3269   1925             skip_invert_b_78:   
3270   1925 AC            mul a, b ; *
3271   1926 FD 78         mov g, a
3272   1928 11            mov a, b
3273   1929 EA            pop bl
3274   192A FD 93 80      test bl, $80
3275   192D C6 3A 19      jz _same_signs_78
3276   1930 2F            mov bl, al
3277   1931 95            not a
3278   1932 FD 97         neg b
3279   1934 5B 00 00      adc a, 0
3280   1937 FD 78         mov g, a
3281   1939 11            mov a, b
3282   193A             _same_signs_78:
3283   193A FD 38         mov c, g
3284   193C 27            mov b, a
3285   193D FD F1         pop g
3286   193F E4            pop a
3287   1940             ; --- END FACTORS
3288   1940 E7            pop d
3289   1941 FD 43         mov [d], b
3290   1943             ; n = cint100(n);	 
3291   1943 FA F9 FF      lea d, [bp + -7] ; $n
3292   1946 DA            push d
3293   1947             ; --- START FUNCTION CALL
3294   1947 FA F9 FF      lea d, [bp + -7] ; $n
3295   194A 2A            mov b, [d]
3296   194B 38 00 00      mov c, 0
3297   194E FD AB         swp b
3298   1950 D8            push b
3299   1951 07 E9 5D      call cint100
3300   1954 51 02 00      add sp, 2
3301   1957             ; --- END FUNCTION CALL
3302   1957 E7            pop d
3303   1958 FD 43         mov [d], b
3304   195A             ; if (energy - n < 0) { 
3305   195A             _if79_cond:
3306   195A 3B A9 6D      mov d, _energy ; $energy
3307   195D 2A            mov b, [d]
3308   195E 38 00 00      mov c, 0
3309   1961             ; --- START TERMS
3310   1961 D7            push a
3311   1962 11            mov a, b
3312   1963 FA F9 FF      lea d, [bp + -7] ; $n
3313   1966 2A            mov b, [d]
3314   1967 38 00 00      mov c, 0
3315   196A 60            sub a, b
3316   196B 27            mov b, a
3317   196C E4            pop a
3318   196D             ; --- END TERMS
3319   196D             ; --- START RELATIONAL
3320   196D D7            push a
3321   196E 11            mov a, b
3322   196F FD 2E 00 00   mov32 cb, $00000000
3322   1973 00 00 
3323   1975 B0            cmp a, b
3324   1976 FD 75         slu ; < (unsigned)
3325   1978 E4            pop a
3326   1979             ; --- END RELATIONAL
3327   1979 C0 00 00      cmp b, 0
3328   197C C6 FC 19      je _if79_exit
3329   197F             _if79_TRUE:
3330   197F             ; printf("Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", print100(warp)); 
3331   197F             ; --- START FUNCTION CALL
3332   197F             ; --- START FUNCTION CALL
3333   197F FA FB FF      lea d, [bp + -5] ; $warp
3334   1982 2A            mov b, [d]
3335   1983 38 00 00      mov c, 0
3336   1986 FD AB         swp b
3337   1988 D8            push b
3338   1989 07 12 09      call print100
3339   198C 51 02 00      add sp, 2
3340   198F             ; --- END FUNCTION CALL
3341   198F FD AB         swp b
3342   1991 D8            push b
3343   1992 26 46 74      mov b, _s69 ; "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n"
3344   1995 FD AB         swp b
3345   1997 D8            push b
3346   1998 07 78 60      call printf
3347   199B 51 04 00      add sp, 4
3348   199E             ; --- END FUNCTION CALL
3349   199E             ; if (shield >= n && damage[7] >= 0) { 
3350   199E             _if80_cond:
3351   199E 3B 64 6E      mov d, _shield ; $shield
3352   19A1 2A            mov b, [d]
3353   19A2 38 00 00      mov c, 0
3354   19A5             ; --- START RELATIONAL
3355   19A5 D7            push a
3356   19A6 11            mov a, b
3357   19A7 FA F9 FF      lea d, [bp + -7] ; $n
3358   19AA 2A            mov b, [d]
3359   19AB 38 00 00      mov c, 0
3360   19AE B0            cmp a, b
3361   19AF FD 80         sge ; >=
3362   19B1 E4            pop a
3363   19B2             ; --- END RELATIONAL
3364   19B2             ; --- START LOGICAL AND
3365   19B2 D7            push a
3366   19B3 11            mov a, b
3367   19B4 3B 6B 6E      mov d, _damage_data ; $damage
3368   19B7 D7            push a
3369   19B8 DA            push d
3370   19B9 FD 2E 07 00   mov32 cb, $00000007
3370   19BD 00 00 
3371   19BF E7            pop d
3372   19C0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3373   19C4 E4            pop a
3374   19C5 2A            mov b, [d]
3375   19C6 38 00 00      mov c, 0
3376   19C9             ; --- START RELATIONAL
3377   19C9 D7            push a
3378   19CA 11            mov a, b
3379   19CB FD 2E 00 00   mov32 cb, $00000000
3379   19CF 00 00 
3380   19D1 B0            cmp a, b
3381   19D2 FD 80         sge ; >=
3382   19D4 E4            pop a
3383   19D5             ; --- END RELATIONAL
3384   19D5 FD A7         sand a, b
3385   19D7 E4            pop a
3386   19D8             ; --- END LOGICAL AND
3387   19D8 C0 00 00      cmp b, 0
3388   19DB C6 F7 19      je _if80_exit
3389   19DE             _if80_TRUE:
3390   19DE             ; printf("Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", shield); 
3391   19DE             ; --- START FUNCTION CALL
3392   19DE 3B 64 6E      mov d, _shield ; $shield
3393   19E1 2A            mov b, [d]
3394   19E2 38 00 00      mov c, 0
3395   19E5 FD AB         swp b
3396   19E7 D8            push b
3397   19E8 26 99 74      mov b, _s70 ; "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n"
3398   19EB FD AB         swp b
3399   19ED D8            push b
3400   19EE 07 78 60      call printf
3401   19F1 51 04 00      add sp, 4
3402   19F4             ; --- END FUNCTION CALL
3403   19F4 0A F7 19      jmp _if80_exit
3404   19F7             _if80_exit:
3405   19F7             ; return; 
3406   19F7 F9            leave
3407   19F8 09            ret
3408   19F9 0A FC 19      jmp _if79_exit
3409   19FC             _if79_exit:
3410   19FC             ; klingons_move(); 
3411   19FC             ; --- START FUNCTION CALL
3412   19FC 07 4B 50      call klingons_move
3413   19FF             ; repair_damage(warp); 
3414   19FF             ; --- START FUNCTION CALL
3415   19FF FA FB FF      lea d, [bp + -5] ; $warp
3416   1A02 2A            mov b, [d]
3417   1A03 38 00 00      mov c, 0
3418   1A06 FD AB         swp b
3419   1A08 D8            push b
3420   1A09 07 27 55      call repair_damage
3421   1A0C 51 02 00      add sp, 2
3422   1A0F             ; --- END FUNCTION CALL
3423   1A0F             ; z1 = FROM_FIXED00(ship_y); 
3424   1A0F FA F1 FF      lea d, [bp + -15] ; $z1
3425   1A12 DA            push d
3426   1A13             ; --- START FUNCTION CALL
3427   1A13 3B 7F 6E      mov d, _ship_y ; $ship_y
3428   1A16 2A            mov b, [d]
3429   1A17 38 00 00      mov c, 0
3430   1A1A FD AB         swp b
3431   1A1C D8            push b
3432   1A1D 07 DC 04      call FROM_FIXED00
3433   1A20 51 02 00      add sp, 2
3434   1A23             ; --- END FUNCTION CALL
3435   1A23 E7            pop d
3436   1A24 FD 43         mov [d], b
3437   1A26             ; z2 = FROM_FIXED00(ship_x); 
3438   1A26 FA EF FF      lea d, [bp + -17] ; $z2
3439   1A29 DA            push d
3440   1A2A             ; --- START FUNCTION CALL
3441   1A2A 3B 81 6E      mov d, _ship_x ; $ship_x
3442   1A2D 2A            mov b, [d]
3443   1A2E 38 00 00      mov c, 0
3444   1A31 FD AB         swp b
3445   1A33 D8            push b
3446   1A34 07 DC 04      call FROM_FIXED00
3447   1A37 51 02 00      add sp, 2
3448   1A3A             ; --- END FUNCTION CALL
3449   1A3A E7            pop d
3450   1A3B FD 43         mov [d], b
3451   1A3D             ; quad[z1+-1][z2+-1] = 		0       ; 
3452   1A3D 3B 85 6E      mov d, _quad_data ; $quad
3453   1A40 D7            push a
3454   1A41 DA            push d
3455   1A42 FA F1 FF      lea d, [bp + -15] ; $z1
3456   1A45 2A            mov b, [d]
3457   1A46 38 00 00      mov c, 0
3458   1A49             ; --- START TERMS
3459   1A49 D7            push a
3460   1A4A 11            mov a, b
3461   1A4B FD 2E FF FF   mov32 cb, $ffffffff
3461   1A4F FF FF 
3462   1A51 56            add b, a
3463   1A52 E4            pop a
3464   1A53             ; --- END TERMS
3465   1A53 E7            pop d
3466   1A54 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
3467   1A58 DA            push d
3468   1A59 FA EF FF      lea d, [bp + -17] ; $z2
3469   1A5C 2A            mov b, [d]
3470   1A5D 38 00 00      mov c, 0
3471   1A60             ; --- START TERMS
3472   1A60 D7            push a
3473   1A61 11            mov a, b
3474   1A62 FD 2E FF FF   mov32 cb, $ffffffff
3474   1A66 FF FF 
3475   1A68 56            add b, a
3476   1A69 E4            pop a
3477   1A6A             ; --- END TERMS
3478   1A6A E7            pop d
3479   1A6B 5A            add d, b
3480   1A6C E4            pop a
3481   1A6D DA            push d
3482   1A6E FD 2E 00 00   mov32 cb, $00000000
3482   1A72 00 00 
3483   1A74 E7            pop d
3484   1A75 FD 3E         mov [d], bl
3485   1A77             ; c2 = FROM_FIXED00(c1);	/* Integer part */ 
3486   1A77 FA F7 FF      lea d, [bp + -9] ; $c2
3487   1A7A DA            push d
3488   1A7B             ; --- START FUNCTION CALL
3489   1A7B FA FD FF      lea d, [bp + -3] ; $c1
3490   1A7E 2A            mov b, [d]
3491   1A7F 38 00 00      mov c, 0
3492   1A82 FD AB         swp b
3493   1A84 D8            push b
3494   1A85 07 DC 04      call FROM_FIXED00
3495   1A88 51 02 00      add sp, 2
3496   1A8B             ; --- END FUNCTION CALL
3497   1A8B E7            pop d
3498   1A8C FD 43         mov [d], b
3499   1A8E             ; c3 = c2 + 1;		/* Next integer part */ 
3500   1A8E FA F5 FF      lea d, [bp + -11] ; $c3
3501   1A91 DA            push d
3502   1A92 FA F7 FF      lea d, [bp + -9] ; $c2
3503   1A95 2A            mov b, [d]
3504   1A96 38 00 00      mov c, 0
3505   1A99             ; --- START TERMS
3506   1A99 D7            push a
3507   1A9A 11            mov a, b
3508   1A9B FD 2E 01 00   mov32 cb, $00000001
3508   1A9F 00 00 
3509   1AA1 56            add b, a
3510   1AA2 E4            pop a
3511   1AA3             ; --- END TERMS
3512   1AA3 E7            pop d
3513   1AA4 FD 43         mov [d], b
3514   1AA6             ; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
3515   1AA6 FA F3 FF      lea d, [bp + -13] ; $c4
3516   1AA9 DA            push d
3517   1AAA FA FD FF      lea d, [bp + -3] ; $c1
3518   1AAD 2A            mov b, [d]
3519   1AAE 38 00 00      mov c, 0
3520   1AB1             ; --- START TERMS
3521   1AB1 D7            push a
3522   1AB2 11            mov a, b
3523   1AB3             ; --- START FUNCTION CALL
3524   1AB3 FA F7 FF      lea d, [bp + -9] ; $c2
3525   1AB6 2A            mov b, [d]
3526   1AB7 38 00 00      mov c, 0
3527   1ABA FD AB         swp b
3528   1ABC D8            push b
3529   1ABD 07 8B 04      call TO_FIXED00
3530   1AC0 51 02 00      add sp, 2
3531   1AC3             ; --- END FUNCTION CALL
3532   1AC3 60            sub a, b
3533   1AC4 27            mov b, a
3534   1AC5 E4            pop a
3535   1AC6             ; --- END TERMS
3536   1AC6 E7            pop d
3537   1AC7 FD 43         mov [d], b
3538   1AC9             ; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
3539   1AC9 FA ED FF      lea d, [bp + -19] ; $x1
3540   1ACC DA            push d
3541   1ACD FD 2E 64 00   mov32 cb, $00000064
3541   1AD1 00 00 
3542   1AD3             ; --- START FACTORS
3543   1AD3 D7            push a
3544   1AD4 FD D8         push g
3545   1AD6 11            mov a, b
3546   1AD7 FD 7A         mov g, c
3547   1AD9 3B 8A 6D      mov d, _c_data ; $c
3548   1ADC D7            push a
3549   1ADD DA            push d
3550   1ADE FD 2E 01 00   mov32 cb, $00000001
3550   1AE2 00 00 
3551   1AE4 E7            pop d
3552   1AE5 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3553   1AE9 DA            push d
3554   1AEA FA F7 FF      lea d, [bp + -9] ; $c2
3555   1AED 2A            mov b, [d]
3556   1AEE 38 00 00      mov c, 0
3557   1AF1 E7            pop d
3558   1AF2 5A            add d, b
3559   1AF3 E4            pop a
3560   1AF4 32            mov bl, [d]
3561   1AF5 A7 00         mov bh, 0
3562   1AF7 38 00 00      mov c, 0
3563   1AFA D7            push a     ; save left operand
3564   1AFB 8E            xor a, b   ; xor sign bits
3565   1AFC FD AA         swp a      ; swap bytes
3566   1AFE 83            mov cl, al ; save result of xor into 'dl'
3567   1AFF E4            pop a      ; restore left side operator
3568   1B00 DF            push cl    ; save result of xor above
3569   1B01 FD AA         swp a  
3570   1B03 93 80         test al, $80  
3571   1B05 FD AA         swp a  
3572   1B07 C6 0C 1B      jz skip_invert_a_83  
3573   1B0A FD 95         neg a 
3574   1B0C             skip_invert_a_83:   
3575   1B0C FD AB         swp b
3576   1B0E FD 93 80      test bl, $80  
3577   1B11 FD AB         swp b
3578   1B13 C6 18 1B      jz skip_invert_b_83  
3579   1B16 FD 97         neg b 
3580   1B18             skip_invert_b_83:   
3581   1B18 AC            mul a, b ; *
3582   1B19 FD 78         mov g, a
3583   1B1B 11            mov a, b
3584   1B1C EA            pop bl
3585   1B1D FD 93 80      test bl, $80
3586   1B20 C6 2D 1B      jz _same_signs_83
3587   1B23 2F            mov bl, al
3588   1B24 95            not a
3589   1B25 FD 97         neg b
3590   1B27 5B 00 00      adc a, 0
3591   1B2A FD 78         mov g, a
3592   1B2C 11            mov a, b
3593   1B2D             _same_signs_83:
3594   1B2D FD 38         mov c, g
3595   1B2F 27            mov b, a
3596   1B30 FD F1         pop g
3597   1B32 E4            pop a
3598   1B33             ; --- END FACTORS
3599   1B33             ; --- START TERMS
3600   1B33 D7            push a
3601   1B34 FD D8         push g
3602   1B36 11            mov a, b
3603   1B37 FD 7A         mov g, c
3604   1B39 3B 8A 6D      mov d, _c_data ; $c
3605   1B3C D7            push a
3606   1B3D DA            push d
3607   1B3E FD 2E 01 00   mov32 cb, $00000001
3607   1B42 00 00 
3608   1B44 E7            pop d
3609   1B45 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3610   1B49 DA            push d
3611   1B4A FA F5 FF      lea d, [bp + -11] ; $c3
3612   1B4D 2A            mov b, [d]
3613   1B4E 38 00 00      mov c, 0
3614   1B51 E7            pop d
3615   1B52 5A            add d, b
3616   1B53 E4            pop a
3617   1B54 32            mov bl, [d]
3618   1B55 A7 00         mov bh, 0
3619   1B57 38 00 00      mov c, 0
3620   1B5A             ; --- START TERMS
3621   1B5A D7            push a
3622   1B5B 11            mov a, b
3623   1B5C 3B 8A 6D      mov d, _c_data ; $c
3624   1B5F D7            push a
3625   1B60 DA            push d
3626   1B61 FD 2E 01 00   mov32 cb, $00000001
3626   1B65 00 00 
3627   1B67 E7            pop d
3628   1B68 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3629   1B6C DA            push d
3630   1B6D FA F7 FF      lea d, [bp + -9] ; $c2
3631   1B70 2A            mov b, [d]
3632   1B71 38 00 00      mov c, 0
3633   1B74 E7            pop d
3634   1B75 5A            add d, b
3635   1B76 E4            pop a
3636   1B77 32            mov bl, [d]
3637   1B78 A7 00         mov bh, 0
3638   1B7A 38 00 00      mov c, 0
3639   1B7D 60            sub a, b
3640   1B7E 27            mov b, a
3641   1B7F E4            pop a
3642   1B80             ; --- END TERMS
3643   1B80             ; --- START FACTORS
3644   1B80 D7            push a
3645   1B81 FD D8         push g
3646   1B83 11            mov a, b
3647   1B84 FD 7A         mov g, c
3648   1B86 FA F3 FF      lea d, [bp + -13] ; $c4
3649   1B89 2A            mov b, [d]
3650   1B8A 38 00 00      mov c, 0
3651   1B8D D7            push a     ; save left operand
3652   1B8E 8E            xor a, b   ; xor sign bits
3653   1B8F FD AA         swp a      ; swap bytes
3654   1B91 83            mov cl, al ; save result of xor into 'dl'
3655   1B92 E4            pop a      ; restore left side operator
3656   1B93 DF            push cl    ; save result of xor above
3657   1B94 FD AA         swp a  
3658   1B96 93 80         test al, $80  
3659   1B98 FD AA         swp a  
3660   1B9A C6 9F 1B      jz skip_invert_a_84  
3661   1B9D FD 95         neg a 
3662   1B9F             skip_invert_a_84:   
3663   1B9F FD AB         swp b
3664   1BA1 FD 93 80      test bl, $80  
3665   1BA4 FD AB         swp b
3666   1BA6 C6 AB 1B      jz skip_invert_b_84  
3667   1BA9 FD 97         neg b 
3668   1BAB             skip_invert_b_84:   
3669   1BAB AC            mul a, b ; *
3670   1BAC FD 78         mov g, a
3671   1BAE 11            mov a, b
3672   1BAF EA            pop bl
3673   1BB0 FD 93 80      test bl, $80
3674   1BB3 C6 C0 1B      jz _same_signs_84
3675   1BB6 2F            mov bl, al
3676   1BB7 95            not a
3677   1BB8 FD 97         neg b
3678   1BBA 5B 00 00      adc a, 0
3679   1BBD FD 78         mov g, a
3680   1BBF 11            mov a, b
3681   1BC0             _same_signs_84:
3682   1BC0 FD 38         mov c, g
3683   1BC2 27            mov b, a
3684   1BC3 FD F1         pop g
3685   1BC5 E4            pop a
3686   1BC6             ; --- END FACTORS
3687   1BC6 FD 15         add32 cb, ga
3688   1BC8 FD F1         pop g
3689   1BCA E4            pop a
3690   1BCB             ; --- END TERMS
3691   1BCB E7            pop d
3692   1BCC FD 43         mov [d], b
3693   1BCE             ; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
3694   1BCE FA EB FF      lea d, [bp + -21] ; $x2
3695   1BD1 DA            push d
3696   1BD2 FD 2E 64 00   mov32 cb, $00000064
3696   1BD6 00 00 
3697   1BD8             ; --- START FACTORS
3698   1BD8 D7            push a
3699   1BD9 FD D8         push g
3700   1BDB 11            mov a, b
3701   1BDC FD 7A         mov g, c
3702   1BDE 3B 8A 6D      mov d, _c_data ; $c
3703   1BE1 D7            push a
3704   1BE2 DA            push d
3705   1BE3 FD 2E 02 00   mov32 cb, $00000002
3705   1BE7 00 00 
3706   1BE9 E7            pop d
3707   1BEA FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3708   1BEE DA            push d
3709   1BEF FA F7 FF      lea d, [bp + -9] ; $c2
3710   1BF2 2A            mov b, [d]
3711   1BF3 38 00 00      mov c, 0
3712   1BF6 E7            pop d
3713   1BF7 5A            add d, b
3714   1BF8 E4            pop a
3715   1BF9 32            mov bl, [d]
3716   1BFA A7 00         mov bh, 0
3717   1BFC 38 00 00      mov c, 0
3718   1BFF D7            push a     ; save left operand
3719   1C00 8E            xor a, b   ; xor sign bits
3720   1C01 FD AA         swp a      ; swap bytes
3721   1C03 83            mov cl, al ; save result of xor into 'dl'
3722   1C04 E4            pop a      ; restore left side operator
3723   1C05 DF            push cl    ; save result of xor above
3724   1C06 FD AA         swp a  
3725   1C08 93 80         test al, $80  
3726   1C0A FD AA         swp a  
3727   1C0C C6 11 1C      jz skip_invert_a_87  
3728   1C0F FD 95         neg a 
3729   1C11             skip_invert_a_87:   
3730   1C11 FD AB         swp b
3731   1C13 FD 93 80      test bl, $80  
3732   1C16 FD AB         swp b
3733   1C18 C6 1D 1C      jz skip_invert_b_87  
3734   1C1B FD 97         neg b 
3735   1C1D             skip_invert_b_87:   
3736   1C1D AC            mul a, b ; *
3737   1C1E FD 78         mov g, a
3738   1C20 11            mov a, b
3739   1C21 EA            pop bl
3740   1C22 FD 93 80      test bl, $80
3741   1C25 C6 32 1C      jz _same_signs_87
3742   1C28 2F            mov bl, al
3743   1C29 95            not a
3744   1C2A FD 97         neg b
3745   1C2C 5B 00 00      adc a, 0
3746   1C2F FD 78         mov g, a
3747   1C31 11            mov a, b
3748   1C32             _same_signs_87:
3749   1C32 FD 38         mov c, g
3750   1C34 27            mov b, a
3751   1C35 FD F1         pop g
3752   1C37 E4            pop a
3753   1C38             ; --- END FACTORS
3754   1C38             ; --- START TERMS
3755   1C38 D7            push a
3756   1C39 FD D8         push g
3757   1C3B 11            mov a, b
3758   1C3C FD 7A         mov g, c
3759   1C3E 3B 8A 6D      mov d, _c_data ; $c
3760   1C41 D7            push a
3761   1C42 DA            push d
3762   1C43 FD 2E 02 00   mov32 cb, $00000002
3762   1C47 00 00 
3763   1C49 E7            pop d
3764   1C4A FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3765   1C4E DA            push d
3766   1C4F FA F5 FF      lea d, [bp + -11] ; $c3
3767   1C52 2A            mov b, [d]
3768   1C53 38 00 00      mov c, 0
3769   1C56 E7            pop d
3770   1C57 5A            add d, b
3771   1C58 E4            pop a
3772   1C59 32            mov bl, [d]
3773   1C5A A7 00         mov bh, 0
3774   1C5C 38 00 00      mov c, 0
3775   1C5F             ; --- START TERMS
3776   1C5F D7            push a
3777   1C60 11            mov a, b
3778   1C61 3B 8A 6D      mov d, _c_data ; $c
3779   1C64 D7            push a
3780   1C65 DA            push d
3781   1C66 FD 2E 02 00   mov32 cb, $00000002
3781   1C6A 00 00 
3782   1C6C E7            pop d
3783   1C6D FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3784   1C71 DA            push d
3785   1C72 FA F7 FF      lea d, [bp + -9] ; $c2
3786   1C75 2A            mov b, [d]
3787   1C76 38 00 00      mov c, 0
3788   1C79 E7            pop d
3789   1C7A 5A            add d, b
3790   1C7B E4            pop a
3791   1C7C 32            mov bl, [d]
3792   1C7D A7 00         mov bh, 0
3793   1C7F 38 00 00      mov c, 0
3794   1C82 60            sub a, b
3795   1C83 27            mov b, a
3796   1C84 E4            pop a
3797   1C85             ; --- END TERMS
3798   1C85             ; --- START FACTORS
3799   1C85 D7            push a
3800   1C86 FD D8         push g
3801   1C88 11            mov a, b
3802   1C89 FD 7A         mov g, c
3803   1C8B FA F3 FF      lea d, [bp + -13] ; $c4
3804   1C8E 2A            mov b, [d]
3805   1C8F 38 00 00      mov c, 0
3806   1C92 D7            push a     ; save left operand
3807   1C93 8E            xor a, b   ; xor sign bits
3808   1C94 FD AA         swp a      ; swap bytes
3809   1C96 83            mov cl, al ; save result of xor into 'dl'
3810   1C97 E4            pop a      ; restore left side operator
3811   1C98 DF            push cl    ; save result of xor above
3812   1C99 FD AA         swp a  
3813   1C9B 93 80         test al, $80  
3814   1C9D FD AA         swp a  
3815   1C9F C6 A4 1C      jz skip_invert_a_88  
3816   1CA2 FD 95         neg a 
3817   1CA4             skip_invert_a_88:   
3818   1CA4 FD AB         swp b
3819   1CA6 FD 93 80      test bl, $80  
3820   1CA9 FD AB         swp b
3821   1CAB C6 B0 1C      jz skip_invert_b_88  
3822   1CAE FD 97         neg b 
3823   1CB0             skip_invert_b_88:   
3824   1CB0 AC            mul a, b ; *
3825   1CB1 FD 78         mov g, a
3826   1CB3 11            mov a, b
3827   1CB4 EA            pop bl
3828   1CB5 FD 93 80      test bl, $80
3829   1CB8 C6 C5 1C      jz _same_signs_88
3830   1CBB 2F            mov bl, al
3831   1CBC 95            not a
3832   1CBD FD 97         neg b
3833   1CBF 5B 00 00      adc a, 0
3834   1CC2 FD 78         mov g, a
3835   1CC4 11            mov a, b
3836   1CC5             _same_signs_88:
3837   1CC5 FD 38         mov c, g
3838   1CC7 27            mov b, a
3839   1CC8 FD F1         pop g
3840   1CCA E4            pop a
3841   1CCB             ; --- END FACTORS
3842   1CCB FD 15         add32 cb, ga
3843   1CCD FD F1         pop g
3844   1CCF E4            pop a
3845   1CD0             ; --- END TERMS
3846   1CD0 E7            pop d
3847   1CD1 FD 43         mov [d], b
3848   1CD3             ; x = ship_y; 
3849   1CD3 FA E9 FF      lea d, [bp + -23] ; $x
3850   1CD6 DA            push d
3851   1CD7 3B 7F 6E      mov d, _ship_y ; $ship_y
3852   1CDA 2A            mov b, [d]
3853   1CDB 38 00 00      mov c, 0
3854   1CDE E7            pop d
3855   1CDF FD 43         mov [d], b
3856   1CE1             ; y = ship_x; 
3857   1CE1 FA E7 FF      lea d, [bp + -25] ; $y
3858   1CE4 DA            push d
3859   1CE5 3B 81 6E      mov d, _ship_x ; $ship_x
3860   1CE8 2A            mov b, [d]
3861   1CE9 38 00 00      mov c, 0
3862   1CEC E7            pop d
3863   1CED FD 43         mov [d], b
3864   1CEF             ; for (i = 1; i <= n; i++) { 
3865   1CEF             _for89_init:
3866   1CEF FA FF FF      lea d, [bp + -1] ; $i
3867   1CF2 DA            push d
3868   1CF3 FD 2E 01 00   mov32 cb, $00000001
3868   1CF7 00 00 
3869   1CF9 E7            pop d
3870   1CFA FD 43         mov [d], b
3871   1CFC             _for89_cond:
3872   1CFC FA FF FF      lea d, [bp + -1] ; $i
3873   1CFF 2A            mov b, [d]
3874   1D00 38 00 00      mov c, 0
3875   1D03             ; --- START RELATIONAL
3876   1D03 D7            push a
3877   1D04 11            mov a, b
3878   1D05 FA F9 FF      lea d, [bp + -7] ; $n
3879   1D08 2A            mov b, [d]
3880   1D09 38 00 00      mov c, 0
3881   1D0C B0            cmp a, b
3882   1D0D FD 74         sle ; <= (signed)
3883   1D0F E4            pop a
3884   1D10             ; --- END RELATIONAL
3885   1D10 C0 00 00      cmp b, 0
3886   1D13 C6 0D 24      je _for89_exit
3887   1D16             _for89_block:
3888   1D16             ; ship_y = ship_y + x1; 
3889   1D16 3B 7F 6E      mov d, _ship_y ; $ship_y
3890   1D19 DA            push d
3891   1D1A 3B 7F 6E      mov d, _ship_y ; $ship_y
3892   1D1D 2A            mov b, [d]
3893   1D1E 38 00 00      mov c, 0
3894   1D21             ; --- START TERMS
3895   1D21 D7            push a
3896   1D22 11            mov a, b
3897   1D23 FA ED FF      lea d, [bp + -19] ; $x1
3898   1D26 2A            mov b, [d]
3899   1D27 38 00 00      mov c, 0
3900   1D2A 56            add b, a
3901   1D2B E4            pop a
3902   1D2C             ; --- END TERMS
3903   1D2C E7            pop d
3904   1D2D FD 43         mov [d], b
3905   1D2F             ; ship_x = ship_x + x2; 
3906   1D2F 3B 81 6E      mov d, _ship_x ; $ship_x
3907   1D32 DA            push d
3908   1D33 3B 81 6E      mov d, _ship_x ; $ship_x
3909   1D36 2A            mov b, [d]
3910   1D37 38 00 00      mov c, 0
3911   1D3A             ; --- START TERMS
3912   1D3A D7            push a
3913   1D3B 11            mov a, b
3914   1D3C FA EB FF      lea d, [bp + -21] ; $x2
3915   1D3F 2A            mov b, [d]
3916   1D40 38 00 00      mov c, 0
3917   1D43 56            add b, a
3918   1D44 E4            pop a
3919   1D45             ; --- END TERMS
3920   1D45 E7            pop d
3921   1D46 FD 43         mov [d], b
3922   1D48             ; z1 = FROM_FIXED00(ship_y); 
3923   1D48 FA F1 FF      lea d, [bp + -15] ; $z1
3924   1D4B DA            push d
3925   1D4C             ; --- START FUNCTION CALL
3926   1D4C 3B 7F 6E      mov d, _ship_y ; $ship_y
3927   1D4F 2A            mov b, [d]
3928   1D50 38 00 00      mov c, 0
3929   1D53 FD AB         swp b
3930   1D55 D8            push b
3931   1D56 07 DC 04      call FROM_FIXED00
3932   1D59 51 02 00      add sp, 2
3933   1D5C             ; --- END FUNCTION CALL
3934   1D5C E7            pop d
3935   1D5D FD 43         mov [d], b
3936   1D5F             ; z2 = FROM_FIXED00(ship_x);	/* ?? cint100 ?? */ 
3937   1D5F FA EF FF      lea d, [bp + -17] ; $z2
3938   1D62 DA            push d
3939   1D63             ; --- START FUNCTION CALL
3940   1D63 3B 81 6E      mov d, _ship_x ; $ship_x
3941   1D66 2A            mov b, [d]
3942   1D67 38 00 00      mov c, 0
3943   1D6A FD AB         swp b
3944   1D6C D8            push b
3945   1D6D 07 DC 04      call FROM_FIXED00
3946   1D70 51 02 00      add sp, 2
3947   1D73             ; --- END FUNCTION CALL
3948   1D73 E7            pop d
3949   1D74 FD 43         mov [d], b
3950   1D76             ; if (z1 < 1 || z1 >= 9 || z2 < 1 || z2 >= 9) { 
3951   1D76             _if90_cond:
3952   1D76 FA F1 FF      lea d, [bp + -15] ; $z1
3953   1D79 2A            mov b, [d]
3954   1D7A 38 00 00      mov c, 0
3955   1D7D             ; --- START RELATIONAL
3956   1D7D D7            push a
3957   1D7E 11            mov a, b
3958   1D7F FD 2E 01 00   mov32 cb, $00000001
3958   1D83 00 00 
3959   1D85 B0            cmp a, b
3960   1D86 FD 73         slt ; < (signed)
3961   1D88 E4            pop a
3962   1D89             ; --- END RELATIONAL
3963   1D89             ; --- START LOGICAL OR
3964   1D89 D7            push a
3965   1D8A 11            mov a, b
3966   1D8B FA F1 FF      lea d, [bp + -15] ; $z1
3967   1D8E 2A            mov b, [d]
3968   1D8F 38 00 00      mov c, 0
3969   1D92             ; --- START RELATIONAL
3970   1D92 D7            push a
3971   1D93 11            mov a, b
3972   1D94 FD 2E 09 00   mov32 cb, $00000009
3972   1D98 00 00 
3973   1D9A B0            cmp a, b
3974   1D9B FD 80         sge ; >=
3975   1D9D E4            pop a
3976   1D9E             ; --- END RELATIONAL
3977   1D9E FD A8         sor a, b ; ||
3978   1DA0 11            mov a, b
3979   1DA1 FA EF FF      lea d, [bp + -17] ; $z2
3980   1DA4 2A            mov b, [d]
3981   1DA5 38 00 00      mov c, 0
3982   1DA8             ; --- START RELATIONAL
3983   1DA8 D7            push a
3984   1DA9 11            mov a, b
3985   1DAA FD 2E 01 00   mov32 cb, $00000001
3985   1DAE 00 00 
3986   1DB0 B0            cmp a, b
3987   1DB1 FD 73         slt ; < (signed)
3988   1DB3 E4            pop a
3989   1DB4             ; --- END RELATIONAL
3990   1DB4 FD A8         sor a, b ; ||
3991   1DB6 11            mov a, b
3992   1DB7 FA EF FF      lea d, [bp + -17] ; $z2
3993   1DBA 2A            mov b, [d]
3994   1DBB 38 00 00      mov c, 0
3995   1DBE             ; --- START RELATIONAL
3996   1DBE D7            push a
3997   1DBF 11            mov a, b
3998   1DC0 FD 2E 09 00   mov32 cb, $00000009
3998   1DC4 00 00 
3999   1DC6 B0            cmp a, b
4000   1DC7 FD 80         sge ; >=
4001   1DC9 E4            pop a
4002   1DCA             ; --- END RELATIONAL
4003   1DCA FD A8         sor a, b ; ||
4004   1DCC E4            pop a
4005   1DCD             ; --- END LOGICAL OR
4006   1DCD C0 00 00      cmp b, 0
4007   1DD0 C6 43 23      je _if90_exit
4008   1DD3             _if90_TRUE:
4009   1DD3             ; outside = 0;		/* Outside galaxy flag */ 
4010   1DD3 FA E6 FF      lea d, [bp + -26] ; $outside
4011   1DD6 DA            push d
4012   1DD7 FD 2E 00 00   mov32 cb, $00000000
4012   1DDB 00 00 
4013   1DDD E7            pop d
4014   1DDE FD 3E         mov [d], bl
4015   1DE0             ; quad_y_old = quad_y; 
4016   1DE0 FA E5 FF      lea d, [bp + -27] ; $quad_y_old
4017   1DE3 DA            push d
4018   1DE4 3B 60 6E      mov d, _quad_y ; $quad_y
4019   1DE7 2A            mov b, [d]
4020   1DE8 38 00 00      mov c, 0
4021   1DEB E7            pop d
4022   1DEC FD 3E         mov [d], bl
4023   1DEE             ; quad_x_old = quad_x; 
4024   1DEE FA E4 FF      lea d, [bp + -28] ; $quad_x_old
4025   1DF1 DA            push d
4026   1DF2 3B 62 6E      mov d, _quad_x ; $quad_x
4027   1DF5 2A            mov b, [d]
4028   1DF6 38 00 00      mov c, 0
4029   1DF9 E7            pop d
4030   1DFA FD 3E         mov [d], bl
4031   1DFC             ; x = (800 * quad_y) + x + (n * x1); 
4032   1DFC FA E9 FF      lea d, [bp + -23] ; $x
4033   1DFF DA            push d
4034   1E00 FD 2E 20 03   mov32 cb, $00000320
4034   1E04 00 00 
4035   1E06             ; --- START FACTORS
4036   1E06 D7            push a
4037   1E07 FD D8         push g
4038   1E09 11            mov a, b
4039   1E0A FD 7A         mov g, c
4040   1E0C 3B 60 6E      mov d, _quad_y ; $quad_y
4041   1E0F 2A            mov b, [d]
4042   1E10 38 00 00      mov c, 0
4043   1E13 D7            push a     ; save left operand
4044   1E14 8E            xor a, b   ; xor sign bits
4045   1E15 FD AA         swp a      ; swap bytes
4046   1E17 83            mov cl, al ; save result of xor into 'dl'
4047   1E18 E4            pop a      ; restore left side operator
4048   1E19 DF            push cl    ; save result of xor above
4049   1E1A FD AA         swp a  
4050   1E1C 93 80         test al, $80  
4051   1E1E FD AA         swp a  
4052   1E20 C6 25 1E      jz skip_invert_a_96  
4053   1E23 FD 95         neg a 
4054   1E25             skip_invert_a_96:   
4055   1E25 FD AB         swp b
4056   1E27 FD 93 80      test bl, $80  
4057   1E2A FD AB         swp b
4058   1E2C C6 31 1E      jz skip_invert_b_96  
4059   1E2F FD 97         neg b 
4060   1E31             skip_invert_b_96:   
4061   1E31 AC            mul a, b ; *
4062   1E32 FD 78         mov g, a
4063   1E34 11            mov a, b
4064   1E35 EA            pop bl
4065   1E36 FD 93 80      test bl, $80
4066   1E39 C6 46 1E      jz _same_signs_96
4067   1E3C 2F            mov bl, al
4068   1E3D 95            not a
4069   1E3E FD 97         neg b
4070   1E40 5B 00 00      adc a, 0
4071   1E43 FD 78         mov g, a
4072   1E45 11            mov a, b
4073   1E46             _same_signs_96:
4074   1E46 FD 38         mov c, g
4075   1E48 27            mov b, a
4076   1E49 FD F1         pop g
4077   1E4B E4            pop a
4078   1E4C             ; --- END FACTORS
4079   1E4C             ; --- START TERMS
4080   1E4C D7            push a
4081   1E4D FD D8         push g
4082   1E4F 11            mov a, b
4083   1E50 FD 7A         mov g, c
4084   1E52 FA E9 FF      lea d, [bp + -23] ; $x
4085   1E55 2A            mov b, [d]
4086   1E56 38 00 00      mov c, 0
4087   1E59 FD 15         add32 cb, ga
4088   1E5B 11            mov a, b
4089   1E5C FD 7A         mov g, c
4090   1E5E FA F9 FF      lea d, [bp + -7] ; $n
4091   1E61 2A            mov b, [d]
4092   1E62 38 00 00      mov c, 0
4093   1E65             ; --- START FACTORS
4094   1E65 D7            push a
4095   1E66 FD D8         push g
4096   1E68 11            mov a, b
4097   1E69 FD 7A         mov g, c
4098   1E6B FA ED FF      lea d, [bp + -19] ; $x1
4099   1E6E 2A            mov b, [d]
4100   1E6F 38 00 00      mov c, 0
4101   1E72 D7            push a     ; save left operand
4102   1E73 8E            xor a, b   ; xor sign bits
4103   1E74 FD AA         swp a      ; swap bytes
4104   1E76 83            mov cl, al ; save result of xor into 'dl'
4105   1E77 E4            pop a      ; restore left side operator
4106   1E78 DF            push cl    ; save result of xor above
4107   1E79 FD AA         swp a  
4108   1E7B 93 80         test al, $80  
4109   1E7D FD AA         swp a  
4110   1E7F C6 84 1E      jz skip_invert_a_98  
4111   1E82 FD 95         neg a 
4112   1E84             skip_invert_a_98:   
4113   1E84 FD AB         swp b
4114   1E86 FD 93 80      test bl, $80  
4115   1E89 FD AB         swp b
4116   1E8B C6 90 1E      jz skip_invert_b_98  
4117   1E8E FD 97         neg b 
4118   1E90             skip_invert_b_98:   
4119   1E90 AC            mul a, b ; *
4120   1E91 FD 78         mov g, a
4121   1E93 11            mov a, b
4122   1E94 EA            pop bl
4123   1E95 FD 93 80      test bl, $80
4124   1E98 C6 A5 1E      jz _same_signs_98
4125   1E9B 2F            mov bl, al
4126   1E9C 95            not a
4127   1E9D FD 97         neg b
4128   1E9F 5B 00 00      adc a, 0
4129   1EA2 FD 78         mov g, a
4130   1EA4 11            mov a, b
4131   1EA5             _same_signs_98:
4132   1EA5 FD 38         mov c, g
4133   1EA7 27            mov b, a
4134   1EA8 FD F1         pop g
4135   1EAA E4            pop a
4136   1EAB             ; --- END FACTORS
4137   1EAB FD 15         add32 cb, ga
4138   1EAD FD F1         pop g
4139   1EAF E4            pop a
4140   1EB0             ; --- END TERMS
4141   1EB0 E7            pop d
4142   1EB1 FD 43         mov [d], b
4143   1EB3             ; y = (800 * quad_x) + y + (n * x2); 
4144   1EB3 FA E7 FF      lea d, [bp + -25] ; $y
4145   1EB6 DA            push d
4146   1EB7 FD 2E 20 03   mov32 cb, $00000320
4146   1EBB 00 00 
4147   1EBD             ; --- START FACTORS
4148   1EBD D7            push a
4149   1EBE FD D8         push g
4150   1EC0 11            mov a, b
4151   1EC1 FD 7A         mov g, c
4152   1EC3 3B 62 6E      mov d, _quad_x ; $quad_x
4153   1EC6 2A            mov b, [d]
4154   1EC7 38 00 00      mov c, 0
4155   1ECA D7            push a     ; save left operand
4156   1ECB 8E            xor a, b   ; xor sign bits
4157   1ECC FD AA         swp a      ; swap bytes
4158   1ECE 83            mov cl, al ; save result of xor into 'dl'
4159   1ECF E4            pop a      ; restore left side operator
4160   1ED0 DF            push cl    ; save result of xor above
4161   1ED1 FD AA         swp a  
4162   1ED3 93 80         test al, $80  
4163   1ED5 FD AA         swp a  
4164   1ED7 C6 DC 1E      jz skip_invert_a_104  
4165   1EDA FD 95         neg a 
4166   1EDC             skip_invert_a_104:   
4167   1EDC FD AB         swp b
4168   1EDE FD 93 80      test bl, $80  
4169   1EE1 FD AB         swp b
4170   1EE3 C6 E8 1E      jz skip_invert_b_104  
4171   1EE6 FD 97         neg b 
4172   1EE8             skip_invert_b_104:   
4173   1EE8 AC            mul a, b ; *
4174   1EE9 FD 78         mov g, a
4175   1EEB 11            mov a, b
4176   1EEC EA            pop bl
4177   1EED FD 93 80      test bl, $80
4178   1EF0 C6 FD 1E      jz _same_signs_104
4179   1EF3 2F            mov bl, al
4180   1EF4 95            not a
4181   1EF5 FD 97         neg b
4182   1EF7 5B 00 00      adc a, 0
4183   1EFA FD 78         mov g, a
4184   1EFC 11            mov a, b
4185   1EFD             _same_signs_104:
4186   1EFD FD 38         mov c, g
4187   1EFF 27            mov b, a
4188   1F00 FD F1         pop g
4189   1F02 E4            pop a
4190   1F03             ; --- END FACTORS
4191   1F03             ; --- START TERMS
4192   1F03 D7            push a
4193   1F04 FD D8         push g
4194   1F06 11            mov a, b
4195   1F07 FD 7A         mov g, c
4196   1F09 FA E7 FF      lea d, [bp + -25] ; $y
4197   1F0C 2A            mov b, [d]
4198   1F0D 38 00 00      mov c, 0
4199   1F10 FD 15         add32 cb, ga
4200   1F12 11            mov a, b
4201   1F13 FD 7A         mov g, c
4202   1F15 FA F9 FF      lea d, [bp + -7] ; $n
4203   1F18 2A            mov b, [d]
4204   1F19 38 00 00      mov c, 0
4205   1F1C             ; --- START FACTORS
4206   1F1C D7            push a
4207   1F1D FD D8         push g
4208   1F1F 11            mov a, b
4209   1F20 FD 7A         mov g, c
4210   1F22 FA EB FF      lea d, [bp + -21] ; $x2
4211   1F25 2A            mov b, [d]
4212   1F26 38 00 00      mov c, 0
4213   1F29 D7            push a     ; save left operand
4214   1F2A 8E            xor a, b   ; xor sign bits
4215   1F2B FD AA         swp a      ; swap bytes
4216   1F2D 83            mov cl, al ; save result of xor into 'dl'
4217   1F2E E4            pop a      ; restore left side operator
4218   1F2F DF            push cl    ; save result of xor above
4219   1F30 FD AA         swp a  
4220   1F32 93 80         test al, $80  
4221   1F34 FD AA         swp a  
4222   1F36 C6 3B 1F      jz skip_invert_a_106  
4223   1F39 FD 95         neg a 
4224   1F3B             skip_invert_a_106:   
4225   1F3B FD AB         swp b
4226   1F3D FD 93 80      test bl, $80  
4227   1F40 FD AB         swp b
4228   1F42 C6 47 1F      jz skip_invert_b_106  
4229   1F45 FD 97         neg b 
4230   1F47             skip_invert_b_106:   
4231   1F47 AC            mul a, b ; *
4232   1F48 FD 78         mov g, a
4233   1F4A 11            mov a, b
4234   1F4B EA            pop bl
4235   1F4C FD 93 80      test bl, $80
4236   1F4F C6 5C 1F      jz _same_signs_106
4237   1F52 2F            mov bl, al
4238   1F53 95            not a
4239   1F54 FD 97         neg b
4240   1F56 5B 00 00      adc a, 0
4241   1F59 FD 78         mov g, a
4242   1F5B 11            mov a, b
4243   1F5C             _same_signs_106:
4244   1F5C FD 38         mov c, g
4245   1F5E 27            mov b, a
4246   1F5F FD F1         pop g
4247   1F61 E4            pop a
4248   1F62             ; --- END FACTORS
4249   1F62 FD 15         add32 cb, ga
4250   1F64 FD F1         pop g
4251   1F66 E4            pop a
4252   1F67             ; --- END TERMS
4253   1F67 E7            pop d
4254   1F68 FD 43         mov [d], b
4255   1F6A             ; quad_y = x / 800;	/* Fixed point to int and divide by 8 */ 
4256   1F6A 3B 60 6E      mov d, _quad_y ; $quad_y
4257   1F6D DA            push d
4258   1F6E FA E9 FF      lea d, [bp + -23] ; $x
4259   1F71 2A            mov b, [d]
4260   1F72 38 00 00      mov c, 0
4261   1F75             ; --- START FACTORS
4262   1F75 D7            push a
4263   1F76 FD D8         push g
4264   1F78 11            mov a, b
4265   1F79 FD 7A         mov g, c
4266   1F7B FD 2E 20 03   mov32 cb, $00000320
4266   1F7F 00 00 
4267   1F81 FD D8         push g ; save 'g' as the div instruction uses it
4268   1F83 AE            div a, b ; /, a: quotient, b: remainder
4269   1F84 FD F1         pop g
4270   1F86 FD 38         mov c, g
4271   1F88 27            mov b, a
4272   1F89 FD F1         pop g
4273   1F8B E4            pop a
4274   1F8C             ; --- END FACTORS
4275   1F8C E7            pop d
4276   1F8D FD 43         mov [d], b
4277   1F8F             ; quad_x = y / 800;	/* Ditto */ 
4278   1F8F 3B 62 6E      mov d, _quad_x ; $quad_x
4279   1F92 DA            push d
4280   1F93 FA E7 FF      lea d, [bp + -25] ; $y
4281   1F96 2A            mov b, [d]
4282   1F97 38 00 00      mov c, 0
4283   1F9A             ; --- START FACTORS
4284   1F9A D7            push a
4285   1F9B FD D8         push g
4286   1F9D 11            mov a, b
4287   1F9E FD 7A         mov g, c
4288   1FA0 FD 2E 20 03   mov32 cb, $00000320
4288   1FA4 00 00 
4289   1FA6 FD D8         push g ; save 'g' as the div instruction uses it
4290   1FA8 AE            div a, b ; /, a: quotient, b: remainder
4291   1FA9 FD F1         pop g
4292   1FAB FD 38         mov c, g
4293   1FAD 27            mov b, a
4294   1FAE FD F1         pop g
4295   1FB0 E4            pop a
4296   1FB1             ; --- END FACTORS
4297   1FB1 E7            pop d
4298   1FB2 FD 43         mov [d], b
4299   1FB4             ; ship_y = x - (quad_y * 800); 
4300   1FB4 3B 7F 6E      mov d, _ship_y ; $ship_y
4301   1FB7 DA            push d
4302   1FB8 FA E9 FF      lea d, [bp + -23] ; $x
4303   1FBB 2A            mov b, [d]
4304   1FBC 38 00 00      mov c, 0
4305   1FBF             ; --- START TERMS
4306   1FBF D7            push a
4307   1FC0 11            mov a, b
4308   1FC1 3B 60 6E      mov d, _quad_y ; $quad_y
4309   1FC4 2A            mov b, [d]
4310   1FC5 38 00 00      mov c, 0
4311   1FC8             ; --- START FACTORS
4312   1FC8 D7            push a
4313   1FC9 FD D8         push g
4314   1FCB 11            mov a, b
4315   1FCC FD 7A         mov g, c
4316   1FCE FD 2E 20 03   mov32 cb, $00000320
4316   1FD2 00 00 
4317   1FD4 D7            push a     ; save left operand
4318   1FD5 8E            xor a, b   ; xor sign bits
4319   1FD6 FD AA         swp a      ; swap bytes
4320   1FD8 83            mov cl, al ; save result of xor into 'dl'
4321   1FD9 E4            pop a      ; restore left side operator
4322   1FDA DF            push cl    ; save result of xor above
4323   1FDB FD AA         swp a  
4324   1FDD 93 80         test al, $80  
4325   1FDF FD AA         swp a  
4326   1FE1 C6 E6 1F      jz skip_invert_a_114  
4327   1FE4 FD 95         neg a 
4328   1FE6             skip_invert_a_114:   
4329   1FE6 FD AB         swp b
4330   1FE8 FD 93 80      test bl, $80  
4331   1FEB FD AB         swp b
4332   1FED C6 F2 1F      jz skip_invert_b_114  
4333   1FF0 FD 97         neg b 
4334   1FF2             skip_invert_b_114:   
4335   1FF2 AC            mul a, b ; *
4336   1FF3 FD 78         mov g, a
4337   1FF5 11            mov a, b
4338   1FF6 EA            pop bl
4339   1FF7 FD 93 80      test bl, $80
4340   1FFA C6 07 20      jz _same_signs_114
4341   1FFD 2F            mov bl, al
4342   1FFE 95            not a
4343   1FFF FD 97         neg b
4344   2001 5B 00 00      adc a, 0
4345   2004 FD 78         mov g, a
4346   2006 11            mov a, b
4347   2007             _same_signs_114:
4348   2007 FD 38         mov c, g
4349   2009 27            mov b, a
4350   200A FD F1         pop g
4351   200C E4            pop a
4352   200D             ; --- END FACTORS
4353   200D FD 1C         sub32 ga, cb
4354   200F 27            mov b, a
4355   2010 FD 38         mov c, g
4356   2012 E4            pop a
4357   2013             ; --- END TERMS
4358   2013 E7            pop d
4359   2014 FD 43         mov [d], b
4360   2016             ; ship_x = y - (quad_x * 800); 
4361   2016 3B 81 6E      mov d, _ship_x ; $ship_x
4362   2019 DA            push d
4363   201A FA E7 FF      lea d, [bp + -25] ; $y
4364   201D 2A            mov b, [d]
4365   201E 38 00 00      mov c, 0
4366   2021             ; --- START TERMS
4367   2021 D7            push a
4368   2022 11            mov a, b
4369   2023 3B 62 6E      mov d, _quad_x ; $quad_x
4370   2026 2A            mov b, [d]
4371   2027 38 00 00      mov c, 0
4372   202A             ; --- START FACTORS
4373   202A D7            push a
4374   202B FD D8         push g
4375   202D 11            mov a, b
4376   202E FD 7A         mov g, c
4377   2030 FD 2E 20 03   mov32 cb, $00000320
4377   2034 00 00 
4378   2036 D7            push a     ; save left operand
4379   2037 8E            xor a, b   ; xor sign bits
4380   2038 FD AA         swp a      ; swap bytes
4381   203A 83            mov cl, al ; save result of xor into 'dl'
4382   203B E4            pop a      ; restore left side operator
4383   203C DF            push cl    ; save result of xor above
4384   203D FD AA         swp a  
4385   203F 93 80         test al, $80  
4386   2041 FD AA         swp a  
4387   2043 C6 48 20      jz skip_invert_a_118  
4388   2046 FD 95         neg a 
4389   2048             skip_invert_a_118:   
4390   2048 FD AB         swp b
4391   204A FD 93 80      test bl, $80  
4392   204D FD AB         swp b
4393   204F C6 54 20      jz skip_invert_b_118  
4394   2052 FD 97         neg b 
4395   2054             skip_invert_b_118:   
4396   2054 AC            mul a, b ; *
4397   2055 FD 78         mov g, a
4398   2057 11            mov a, b
4399   2058 EA            pop bl
4400   2059 FD 93 80      test bl, $80
4401   205C C6 69 20      jz _same_signs_118
4402   205F 2F            mov bl, al
4403   2060 95            not a
4404   2061 FD 97         neg b
4405   2063 5B 00 00      adc a, 0
4406   2066 FD 78         mov g, a
4407   2068 11            mov a, b
4408   2069             _same_signs_118:
4409   2069 FD 38         mov c, g
4410   206B 27            mov b, a
4411   206C FD F1         pop g
4412   206E E4            pop a
4413   206F             ; --- END FACTORS
4414   206F FD 1C         sub32 ga, cb
4415   2071 27            mov b, a
4416   2072 FD 38         mov c, g
4417   2074 E4            pop a
4418   2075             ; --- END TERMS
4419   2075 E7            pop d
4420   2076 FD 43         mov [d], b
4421   2078             ; if (ship_y < 100) { 
4422   2078             _if119_cond:
4423   2078 3B 7F 6E      mov d, _ship_y ; $ship_y
4424   207B 2A            mov b, [d]
4425   207C 38 00 00      mov c, 0
4426   207F             ; --- START RELATIONAL
4427   207F D7            push a
4428   2080 11            mov a, b
4429   2081 FD 2E 64 00   mov32 cb, $00000064
4429   2085 00 00 
4430   2087 B0            cmp a, b
4431   2088 FD 73         slt ; < (signed)
4432   208A E4            pop a
4433   208B             ; --- END RELATIONAL
4434   208B C0 00 00      cmp b, 0
4435   208E C6 C5 20      je _if119_exit
4436   2091             _if119_TRUE:
4437   2091             ; quad_y = quad_y - 1; 
4438   2091 3B 60 6E      mov d, _quad_y ; $quad_y
4439   2094 DA            push d
4440   2095 3B 60 6E      mov d, _quad_y ; $quad_y
4441   2098 2A            mov b, [d]
4442   2099 38 00 00      mov c, 0
4443   209C             ; --- START TERMS
4444   209C D7            push a
4445   209D 11            mov a, b
4446   209E FD 2E 01 00   mov32 cb, $00000001
4446   20A2 00 00 
4447   20A4 60            sub a, b
4448   20A5 27            mov b, a
4449   20A6 E4            pop a
4450   20A7             ; --- END TERMS
4451   20A7 E7            pop d
4452   20A8 FD 43         mov [d], b
4453   20AA             ; ship_y = ship_y + 800; 
4454   20AA 3B 7F 6E      mov d, _ship_y ; $ship_y
4455   20AD DA            push d
4456   20AE 3B 7F 6E      mov d, _ship_y ; $ship_y
4457   20B1 2A            mov b, [d]
4458   20B2 38 00 00      mov c, 0
4459   20B5             ; --- START TERMS
4460   20B5 D7            push a
4461   20B6 11            mov a, b
4462   20B7 FD 2E 20 03   mov32 cb, $00000320
4462   20BB 00 00 
4463   20BD 56            add b, a
4464   20BE E4            pop a
4465   20BF             ; --- END TERMS
4466   20BF E7            pop d
4467   20C0 FD 43         mov [d], b
4468   20C2 0A C5 20      jmp _if119_exit
4469   20C5             _if119_exit:
4470   20C5             ; if (ship_x < 100) { 
4471   20C5             _if120_cond:
4472   20C5 3B 81 6E      mov d, _ship_x ; $ship_x
4473   20C8 2A            mov b, [d]
4474   20C9 38 00 00      mov c, 0
4475   20CC             ; --- START RELATIONAL
4476   20CC D7            push a
4477   20CD 11            mov a, b
4478   20CE FD 2E 64 00   mov32 cb, $00000064
4478   20D2 00 00 
4479   20D4 B0            cmp a, b
4480   20D5 FD 73         slt ; < (signed)
4481   20D7 E4            pop a
4482   20D8             ; --- END RELATIONAL
4483   20D8 C0 00 00      cmp b, 0
4484   20DB C6 12 21      je _if120_exit
4485   20DE             _if120_TRUE:
4486   20DE             ; quad_x = quad_x - 1; 
4487   20DE 3B 62 6E      mov d, _quad_x ; $quad_x
4488   20E1 DA            push d
4489   20E2 3B 62 6E      mov d, _quad_x ; $quad_x
4490   20E5 2A            mov b, [d]
4491   20E6 38 00 00      mov c, 0
4492   20E9             ; --- START TERMS
4493   20E9 D7            push a
4494   20EA 11            mov a, b
4495   20EB FD 2E 01 00   mov32 cb, $00000001
4495   20EF 00 00 
4496   20F1 60            sub a, b
4497   20F2 27            mov b, a
4498   20F3 E4            pop a
4499   20F4             ; --- END TERMS
4500   20F4 E7            pop d
4501   20F5 FD 43         mov [d], b
4502   20F7             ; ship_x = ship_x + 800; 
4503   20F7 3B 81 6E      mov d, _ship_x ; $ship_x
4504   20FA DA            push d
4505   20FB 3B 81 6E      mov d, _ship_x ; $ship_x
4506   20FE 2A            mov b, [d]
4507   20FF 38 00 00      mov c, 0
4508   2102             ; --- START TERMS
4509   2102 D7            push a
4510   2103 11            mov a, b
4511   2104 FD 2E 20 03   mov32 cb, $00000320
4511   2108 00 00 
4512   210A 56            add b, a
4513   210B E4            pop a
4514   210C             ; --- END TERMS
4515   210C E7            pop d
4516   210D FD 43         mov [d], b
4517   210F 0A 12 21      jmp _if120_exit
4518   2112             _if120_exit:
4519   2112             ; if (quad_y < 1) { 
4520   2112             _if121_cond:
4521   2112 3B 60 6E      mov d, _quad_y ; $quad_y
4522   2115 2A            mov b, [d]
4523   2116 38 00 00      mov c, 0
4524   2119             ; --- START RELATIONAL
4525   2119 D7            push a
4526   211A 11            mov a, b
4527   211B FD 2E 01 00   mov32 cb, $00000001
4527   211F 00 00 
4528   2121 B0            cmp a, b
4529   2122 FD 73         slt ; < (signed)
4530   2124 E4            pop a
4531   2125             ; --- END RELATIONAL
4532   2125 C0 00 00      cmp b, 0
4533   2128 C6 55 21      je _if121_exit
4534   212B             _if121_TRUE:
4535   212B             ; outside = 1; 
4536   212B FA E6 FF      lea d, [bp + -26] ; $outside
4537   212E DA            push d
4538   212F FD 2E 01 00   mov32 cb, $00000001
4538   2133 00 00 
4539   2135 E7            pop d
4540   2136 FD 3E         mov [d], bl
4541   2138             ; quad_y = 1; 
4542   2138 3B 60 6E      mov d, _quad_y ; $quad_y
4543   213B DA            push d
4544   213C FD 2E 01 00   mov32 cb, $00000001
4544   2140 00 00 
4545   2142 E7            pop d
4546   2143 FD 43         mov [d], b
4547   2145             ; ship_y = 100; 
4548   2145 3B 7F 6E      mov d, _ship_y ; $ship_y
4549   2148 DA            push d
4550   2149 FD 2E 64 00   mov32 cb, $00000064
4550   214D 00 00 
4551   214F E7            pop d
4552   2150 FD 43         mov [d], b
4553   2152 0A 55 21      jmp _if121_exit
4554   2155             _if121_exit:
4555   2155             ; if (quad_y > 8) { 
4556   2155             _if122_cond:
4557   2155 3B 60 6E      mov d, _quad_y ; $quad_y
4558   2158 2A            mov b, [d]
4559   2159 38 00 00      mov c, 0
4560   215C             ; --- START RELATIONAL
4561   215C D7            push a
4562   215D 11            mov a, b
4563   215E FD 2E 08 00   mov32 cb, $00000008
4563   2162 00 00 
4564   2164 B0            cmp a, b
4565   2165 FD 7F         sgt ; >
4566   2167 E4            pop a
4567   2168             ; --- END RELATIONAL
4568   2168 C0 00 00      cmp b, 0
4569   216B C6 98 21      je _if122_exit
4570   216E             _if122_TRUE:
4571   216E             ; outside = 1; 
4572   216E FA E6 FF      lea d, [bp + -26] ; $outside
4573   2171 DA            push d
4574   2172 FD 2E 01 00   mov32 cb, $00000001
4574   2176 00 00 
4575   2178 E7            pop d
4576   2179 FD 3E         mov [d], bl
4577   217B             ; quad_y = 8; 
4578   217B 3B 60 6E      mov d, _quad_y ; $quad_y
4579   217E DA            push d
4580   217F FD 2E 08 00   mov32 cb, $00000008
4580   2183 00 00 
4581   2185 E7            pop d
4582   2186 FD 43         mov [d], b
4583   2188             ; ship_y = 800; 
4584   2188 3B 7F 6E      mov d, _ship_y ; $ship_y
4585   218B DA            push d
4586   218C FD 2E 20 03   mov32 cb, $00000320
4586   2190 00 00 
4587   2192 E7            pop d
4588   2193 FD 43         mov [d], b
4589   2195 0A 98 21      jmp _if122_exit
4590   2198             _if122_exit:
4591   2198             ; if (quad_x < 1) { 
4592   2198             _if123_cond:
4593   2198 3B 62 6E      mov d, _quad_x ; $quad_x
4594   219B 2A            mov b, [d]
4595   219C 38 00 00      mov c, 0
4596   219F             ; --- START RELATIONAL
4597   219F D7            push a
4598   21A0 11            mov a, b
4599   21A1 FD 2E 01 00   mov32 cb, $00000001
4599   21A5 00 00 
4600   21A7 B0            cmp a, b
4601   21A8 FD 73         slt ; < (signed)
4602   21AA E4            pop a
4603   21AB             ; --- END RELATIONAL
4604   21AB C0 00 00      cmp b, 0
4605   21AE C6 DB 21      je _if123_exit
4606   21B1             _if123_TRUE:
4607   21B1             ; outside = 1; 
4608   21B1 FA E6 FF      lea d, [bp + -26] ; $outside
4609   21B4 DA            push d
4610   21B5 FD 2E 01 00   mov32 cb, $00000001
4610   21B9 00 00 
4611   21BB E7            pop d
4612   21BC FD 3E         mov [d], bl
4613   21BE             ; quad_x = 1; 
4614   21BE 3B 62 6E      mov d, _quad_x ; $quad_x
4615   21C1 DA            push d
4616   21C2 FD 2E 01 00   mov32 cb, $00000001
4616   21C6 00 00 
4617   21C8 E7            pop d
4618   21C9 FD 43         mov [d], b
4619   21CB             ; ship_x = 100; 
4620   21CB 3B 81 6E      mov d, _ship_x ; $ship_x
4621   21CE DA            push d
4622   21CF FD 2E 64 00   mov32 cb, $00000064
4622   21D3 00 00 
4623   21D5 E7            pop d
4624   21D6 FD 43         mov [d], b
4625   21D8 0A DB 21      jmp _if123_exit
4626   21DB             _if123_exit:
4627   21DB             ; if (quad_x > 8) { 
4628   21DB             _if124_cond:
4629   21DB 3B 62 6E      mov d, _quad_x ; $quad_x
4630   21DE 2A            mov b, [d]
4631   21DF 38 00 00      mov c, 0
4632   21E2             ; --- START RELATIONAL
4633   21E2 D7            push a
4634   21E3 11            mov a, b
4635   21E4 FD 2E 08 00   mov32 cb, $00000008
4635   21E8 00 00 
4636   21EA B0            cmp a, b
4637   21EB FD 7F         sgt ; >
4638   21ED E4            pop a
4639   21EE             ; --- END RELATIONAL
4640   21EE C0 00 00      cmp b, 0
4641   21F1 C6 1E 22      je _if124_exit
4642   21F4             _if124_TRUE:
4643   21F4             ; outside = 1; 
4644   21F4 FA E6 FF      lea d, [bp + -26] ; $outside
4645   21F7 DA            push d
4646   21F8 FD 2E 01 00   mov32 cb, $00000001
4646   21FC 00 00 
4647   21FE E7            pop d
4648   21FF FD 3E         mov [d], bl
4649   2201             ; quad_x = 8; 
4650   2201 3B 62 6E      mov d, _quad_x ; $quad_x
4651   2204 DA            push d
4652   2205 FD 2E 08 00   mov32 cb, $00000008
4652   2209 00 00 
4653   220B E7            pop d
4654   220C FD 43         mov [d], b
4655   220E             ; ship_x = 800; 
4656   220E 3B 81 6E      mov d, _ship_x ; $ship_x
4657   2211 DA            push d
4658   2212 FD 2E 20 03   mov32 cb, $00000320
4658   2216 00 00 
4659   2218 E7            pop d
4660   2219 FD 43         mov [d], b
4661   221B 0A 1E 22      jmp _if124_exit
4662   221E             _if124_exit:
4663   221E             ; if (outside == 1) { 
4664   221E             _if125_cond:
4665   221E FA E6 FF      lea d, [bp + -26] ; $outside
4666   2221 32            mov bl, [d]
4667   2222 A7 00         mov bh, 0
4668   2224 38 00 00      mov c, 0
4669   2227             ; --- START RELATIONAL
4670   2227 D7            push a
4671   2228 11            mov a, b
4672   2229 FD 2E 01 00   mov32 cb, $00000001
4672   222D 00 00 
4673   222F B0            cmp a, b
4674   2230 FD 71         seq ; ==
4675   2232 E4            pop a
4676   2233             ; --- END RELATIONAL
4677   2233 C0 00 00      cmp b, 0
4678   2236 C6 82 22      je _if125_exit
4679   2239             _if125_TRUE:
4680   2239             ; printf("LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", FROM_FIXED00(ship_y), 
4681   2239             ; --- START FUNCTION CALL
4682   2239 3B 62 6E      mov d, _quad_x ; $quad_x
4683   223C 2A            mov b, [d]
4684   223D 38 00 00      mov c, 0
4685   2240 FD AB         swp b
4686   2242 D8            push b
4687   2243 3B 60 6E      mov d, _quad_y ; $quad_y
4688   2246 2A            mov b, [d]
4689   2247 38 00 00      mov c, 0
4690   224A FD AB         swp b
4691   224C D8            push b
4692   224D             ; --- START FUNCTION CALL
4693   224D 3B 81 6E      mov d, _ship_x ; $ship_x
4694   2250 2A            mov b, [d]
4695   2251 38 00 00      mov c, 0
4696   2254 FD AB         swp b
4697   2256 D8            push b
4698   2257 07 DC 04      call FROM_FIXED00
4699   225A 51 02 00      add sp, 2
4700   225D             ; --- END FUNCTION CALL
4701   225D FD AB         swp b
4702   225F D8            push b
4703   2260             ; --- START FUNCTION CALL
4704   2260 3B 7F 6E      mov d, _ship_y ; $ship_y
4705   2263 2A            mov b, [d]
4706   2264 38 00 00      mov c, 0
4707   2267 FD AB         swp b
4708   2269 D8            push b
4709   226A 07 DC 04      call FROM_FIXED00
4710   226D 51 02 00      add sp, 2
4711   2270             ; --- END FUNCTION CALL
4712   2270 FD AB         swp b
4713   2272 D8            push b
4714   2273 26 F3 74      mov b, _s71 ; "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n"
4715   2276 FD AB         swp b
4716   2278 D8            push b
4717   2279 07 78 60      call printf
4718   227C 51 0A 00      add sp, 10
4719   227F             ; --- END FUNCTION CALL
4720   227F 0A 82 22      jmp _if125_exit
4721   2282             _if125_exit:
4722   2282             ; maneuver_energy(n); 
4723   2282             ; --- START FUNCTION CALL
4724   2282 FA F9 FF      lea d, [bp + -7] ; $n
4725   2285 2A            mov b, [d]
4726   2286 38 00 00      mov c, 0
4727   2289 FD AB         swp b
4728   228B D8            push b
4729   228C 07 E6 24      call maneuver_energy
4730   228F 51 02 00      add sp, 2
4731   2292             ; --- END FUNCTION CALL
4732   2292             ; if (FROM_FIXED(stardate) > time_start + time_up) 
4733   2292             _if126_cond:
4734   2292             ; --- START FUNCTION CALL
4735   2292 3B 83 6E      mov d, _stardate ; $stardate
4736   2295 2A            mov b, [d]
4737   2296 38 00 00      mov c, 0
4738   2299 FD AB         swp b
4739   229B D8            push b
4740   229C 07 68 04      call FROM_FIXED
4741   229F 51 02 00      add sp, 2
4742   22A2             ; --- END FUNCTION CALL
4743   22A2             ; --- START RELATIONAL
4744   22A2 D7            push a
4745   22A3 11            mov a, b
4746   22A4 3B 67 6E      mov d, _time_start ; $time_start
4747   22A7 2A            mov b, [d]
4748   22A8 38 00 00      mov c, 0
4749   22AB             ; --- START TERMS
4750   22AB D7            push a
4751   22AC 11            mov a, b
4752   22AD 3B 69 6E      mov d, _time_up ; $time_up
4753   22B0 2A            mov b, [d]
4754   22B1 38 00 00      mov c, 0
4755   22B4 56            add b, a
4756   22B5 E4            pop a
4757   22B6             ; --- END TERMS
4758   22B6 B0            cmp a, b
4759   22B7 FD 7F         sgt ; >
4760   22B9 E4            pop a
4761   22BA             ; --- END RELATIONAL
4762   22BA C0 00 00      cmp b, 0
4763   22BD C6 C6 22      je _if126_exit
4764   22C0             _if126_TRUE:
4765   22C0             ; end_of_time(); 
4766   22C0             ; --- START FUNCTION CALL
4767   22C0 07 E2 4E      call end_of_time
4768   22C3 0A C6 22      jmp _if126_exit
4769   22C6             _if126_exit:
4770   22C6             ; if (quad_y != quad_y_old || quad_x != quad_x_old) { 
4771   22C6             _if127_cond:
4772   22C6 3B 60 6E      mov d, _quad_y ; $quad_y
4773   22C9 2A            mov b, [d]
4774   22CA 38 00 00      mov c, 0
4775   22CD             ; --- START RELATIONAL
4776   22CD D7            push a
4777   22CE 11            mov a, b
4778   22CF FA E5 FF      lea d, [bp + -27] ; $quad_y_old
4779   22D2 32            mov bl, [d]
4780   22D3 A7 00         mov bh, 0
4781   22D5 38 00 00      mov c, 0
4782   22D8 B0            cmp a, b
4783   22D9 FD 72         sneq ; !=
4784   22DB E4            pop a
4785   22DC             ; --- END RELATIONAL
4786   22DC             ; --- START LOGICAL OR
4787   22DC D7            push a
4788   22DD 11            mov a, b
4789   22DE 3B 62 6E      mov d, _quad_x ; $quad_x
4790   22E1 2A            mov b, [d]
4791   22E2 38 00 00      mov c, 0
4792   22E5             ; --- START RELATIONAL
4793   22E5 D7            push a
4794   22E6 11            mov a, b
4795   22E7 FA E4 FF      lea d, [bp + -28] ; $quad_x_old
4796   22EA 32            mov bl, [d]
4797   22EB A7 00         mov bh, 0
4798   22ED 38 00 00      mov c, 0
4799   22F0 B0            cmp a, b
4800   22F1 FD 72         sneq ; !=
4801   22F3 E4            pop a
4802   22F4             ; --- END RELATIONAL
4803   22F4 FD A8         sor a, b ; ||
4804   22F6 E4            pop a
4805   22F7             ; --- END LOGICAL OR
4806   22F7 C0 00 00      cmp b, 0
4807   22FA C6 24 23      je _if127_exit
4808   22FD             _if127_TRUE:
4809   22FD             ; stardate = stardate + TO_FIXED(1); 
4810   22FD 3B 83 6E      mov d, _stardate ; $stardate
4811   2300 DA            push d
4812   2301 3B 83 6E      mov d, _stardate ; $stardate
4813   2304 2A            mov b, [d]
4814   2305 38 00 00      mov c, 0
4815   2308             ; --- START TERMS
4816   2308 D7            push a
4817   2309 11            mov a, b
4818   230A             ; --- START FUNCTION CALL
4819   230A FD 2E 01 00   mov32 cb, $00000001
4819   230E 00 00 
4820   2310 FD AB         swp b
4821   2312 D8            push b
4822   2313 07 17 04      call TO_FIXED
4823   2316 51 02 00      add sp, 2
4824   2319             ; --- END FUNCTION CALL
4825   2319 56            add b, a
4826   231A E4            pop a
4827   231B             ; --- END TERMS
4828   231B E7            pop d
4829   231C FD 43         mov [d], b
4830   231E             ; new_quadrant(); 
4831   231E             ; --- START FUNCTION CALL
4832   231E 07 A6 12      call new_quadrant
4833   2321 0A 24 23      jmp _if127_exit
4834   2324             _if127_exit:
4835   2324             ; complete_maneuver(warp, n); 
4836   2324             ; --- START FUNCTION CALL
4837   2324 FA F9 FF      lea d, [bp + -7] ; $n
4838   2327 2A            mov b, [d]
4839   2328 38 00 00      mov c, 0
4840   232B FD AB         swp b
4841   232D D8            push b
4842   232E FA FB FF      lea d, [bp + -5] ; $warp
4843   2331 2A            mov b, [d]
4844   2332 38 00 00      mov c, 0
4845   2335 FD AB         swp b
4846   2337 D8            push b
4847   2338 07 29 24      call complete_maneuver
4848   233B 51 04 00      add sp, 4
4849   233E             ; --- END FUNCTION CALL
4850   233E             ; return; 
4851   233E F9            leave
4852   233F 09            ret
4853   2340 0A 43 23      jmp _if90_exit
4854   2343             _if90_exit:
4855   2343             ; if (quad[z1+-1][z2+-1] != 		0       ) {	/* Sector not empty */ 
4856   2343             _if128_cond:
4857   2343 3B 85 6E      mov d, _quad_data ; $quad
4858   2346 D7            push a
4859   2347 DA            push d
4860   2348 FA F1 FF      lea d, [bp + -15] ; $z1
4861   234B 2A            mov b, [d]
4862   234C 38 00 00      mov c, 0
4863   234F             ; --- START TERMS
4864   234F D7            push a
4865   2350 11            mov a, b
4866   2351 FD 2E FF FF   mov32 cb, $ffffffff
4866   2355 FF FF 
4867   2357 56            add b, a
4868   2358 E4            pop a
4869   2359             ; --- END TERMS
4870   2359 E7            pop d
4871   235A FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
4872   235E DA            push d
4873   235F FA EF FF      lea d, [bp + -17] ; $z2
4874   2362 2A            mov b, [d]
4875   2363 38 00 00      mov c, 0
4876   2366             ; --- START TERMS
4877   2366 D7            push a
4878   2367 11            mov a, b
4879   2368 FD 2E FF FF   mov32 cb, $ffffffff
4879   236C FF FF 
4880   236E 56            add b, a
4881   236F E4            pop a
4882   2370             ; --- END TERMS
4883   2370 E7            pop d
4884   2371 5A            add d, b
4885   2372 E4            pop a
4886   2373 32            mov bl, [d]
4887   2374 A7 00         mov bh, 0
4888   2376 38 00 00      mov c, 0
4889   2379             ; --- START RELATIONAL
4890   2379 D7            push a
4891   237A 11            mov a, b
4892   237B FD 2E 00 00   mov32 cb, $00000000
4892   237F 00 00 
4893   2381 B0            cmp a, b
4894   2382 FD 72         sneq ; !=
4895   2384 E4            pop a
4896   2385             ; --- END RELATIONAL
4897   2385 C0 00 00      cmp b, 0
4898   2388 C6 FA 23      je _if128_exit
4899   238B             _if128_TRUE:
4900   238B             ; ship_y = ship_y - x1; 
4901   238B 3B 7F 6E      mov d, _ship_y ; $ship_y
4902   238E DA            push d
4903   238F 3B 7F 6E      mov d, _ship_y ; $ship_y
4904   2392 2A            mov b, [d]
4905   2393 38 00 00      mov c, 0
4906   2396             ; --- START TERMS
4907   2396 D7            push a
4908   2397 11            mov a, b
4909   2398 FA ED FF      lea d, [bp + -19] ; $x1
4910   239B 2A            mov b, [d]
4911   239C 38 00 00      mov c, 0
4912   239F 60            sub a, b
4913   23A0 27            mov b, a
4914   23A1 E4            pop a
4915   23A2             ; --- END TERMS
4916   23A2 E7            pop d
4917   23A3 FD 43         mov [d], b
4918   23A5             ; ship_x = ship_x - x2; 
4919   23A5 3B 81 6E      mov d, _ship_x ; $ship_x
4920   23A8 DA            push d
4921   23A9 3B 81 6E      mov d, _ship_x ; $ship_x
4922   23AC 2A            mov b, [d]
4923   23AD 38 00 00      mov c, 0
4924   23B0             ; --- START TERMS
4925   23B0 D7            push a
4926   23B1 11            mov a, b
4927   23B2 FA EB FF      lea d, [bp + -21] ; $x2
4928   23B5 2A            mov b, [d]
4929   23B6 38 00 00      mov c, 0
4930   23B9 60            sub a, b
4931   23BA 27            mov b, a
4932   23BB E4            pop a
4933   23BC             ; --- END TERMS
4934   23BC E7            pop d
4935   23BD FD 43         mov [d], b
4936   23BF             ; printf("Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", z1, z2); 
4937   23BF             ; --- START FUNCTION CALL
4938   23BF FA EF FF      lea d, [bp + -17] ; $z2
4939   23C2 2A            mov b, [d]
4940   23C3 38 00 00      mov c, 0
4941   23C6 FD AB         swp b
4942   23C8 D8            push b
4943   23C9 FA F1 FF      lea d, [bp + -15] ; $z1
4944   23CC 2A            mov b, [d]
4945   23CD 38 00 00      mov c, 0
4946   23D0 FD AB         swp b
4947   23D2 D8            push b
4948   23D3 26 EA 75      mov b, _s72 ; "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n"
4949   23D6 FD AB         swp b
4950   23D8 D8            push b
4951   23D9 07 78 60      call printf
4952   23DC 51 06 00      add sp, 6
4953   23DF             ; --- END FUNCTION CALL
4954   23DF             ; i = n + 1; 
4955   23DF FA FF FF      lea d, [bp + -1] ; $i
4956   23E2 DA            push d
4957   23E3 FA F9 FF      lea d, [bp + -7] ; $n
4958   23E6 2A            mov b, [d]
4959   23E7 38 00 00      mov c, 0
4960   23EA             ; --- START TERMS
4961   23EA D7            push a
4962   23EB 11            mov a, b
4963   23EC FD 2E 01 00   mov32 cb, $00000001
4963   23F0 00 00 
4964   23F2 56            add b, a
4965   23F3 E4            pop a
4966   23F4             ; --- END TERMS
4967   23F4 E7            pop d
4968   23F5 FD 43         mov [d], b
4969   23F7 0A FA 23      jmp _if128_exit
4970   23FA             _if128_exit:
4971   23FA             _for89_update:
4972   23FA FA FF FF      lea d, [bp + -1] ; $i
4973   23FD 2A            mov b, [d]
4974   23FE 38 00 00      mov c, 0
4975   2401 11            mov a, b
4976   2402 FD 77         inc b
4977   2404 FA FF FF      lea d, [bp + -1] ; $i
4978   2407 FD 43         mov [d], b
4979   2409 27            mov b, a
4980   240A 0A FC 1C      jmp _for89_cond
4981   240D             _for89_exit:
4982   240D             ; complete_maneuver(warp, n); 
4983   240D             ; --- START FUNCTION CALL
4984   240D FA F9 FF      lea d, [bp + -7] ; $n
4985   2410 2A            mov b, [d]
4986   2411 38 00 00      mov c, 0
4987   2414 FD AB         swp b
4988   2416 D8            push b
4989   2417 FA FB FF      lea d, [bp + -5] ; $warp
4990   241A 2A            mov b, [d]
4991   241B 38 00 00      mov c, 0
4992   241E FD AB         swp b
4993   2420 D8            push b
4994   2421 07 29 24      call complete_maneuver
4995   2424 51 04 00      add sp, 4
4996   2427             ; --- END FUNCTION CALL
4997   2427 F9            leave
4998   2428 09            ret
4999   2429             
5000   2429             complete_maneuver:
5001   2429 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5002   242C             ; unsigned int         time_used; 
5003   242C 52 02 00      sub sp, 2
5004   242F             ; place_ship(); 
5005   242F             ; --- START FUNCTION CALL
5006   242F 07 53 12      call place_ship
5007   2432             ; maneuver_energy(n); 
5008   2432             ; --- START FUNCTION CALL
5009   2432 FA 07 00      lea d, [bp + 7] ; $n
5010   2435 2A            mov b, [d]
5011   2436 38 00 00      mov c, 0
5012   2439 FD AB         swp b
5013   243B D8            push b
5014   243C 07 E6 24      call maneuver_energy
5015   243F 51 02 00      add sp, 2
5016   2442             ; --- END FUNCTION CALL
5017   2442             ; time_used = TO_FIXED(1); 
5018   2442 FA FF FF      lea d, [bp + -1] ; $time_used
5019   2445 DA            push d
5020   2446             ; --- START FUNCTION CALL
5021   2446 FD 2E 01 00   mov32 cb, $00000001
5021   244A 00 00 
5022   244C FD AB         swp b
5023   244E D8            push b
5024   244F 07 17 04      call TO_FIXED
5025   2452 51 02 00      add sp, 2
5026   2455             ; --- END FUNCTION CALL
5027   2455 E7            pop d
5028   2456 FD 43         mov [d], b
5029   2458             ; if (warp < 100) 
5030   2458             _if129_cond:
5031   2458 FA 05 00      lea d, [bp + 5] ; $warp
5032   245B 2A            mov b, [d]
5033   245C 38 00 00      mov c, 0
5034   245F             ; --- START RELATIONAL
5035   245F D7            push a
5036   2460 11            mov a, b
5037   2461 FD 2E 64 00   mov32 cb, $00000064
5037   2465 00 00 
5038   2467 B0            cmp a, b
5039   2468 FD 75         slu ; < (unsigned)
5040   246A E4            pop a
5041   246B             ; --- END RELATIONAL
5042   246B C0 00 00      cmp b, 0
5043   246E C6 94 24      je _if129_exit
5044   2471             _if129_TRUE:
5045   2471             ; time_used = TO_FIXED(FROM_FIXED00(warp)); 
5046   2471 FA FF FF      lea d, [bp + -1] ; $time_used
5047   2474 DA            push d
5048   2475             ; --- START FUNCTION CALL
5049   2475             ; --- START FUNCTION CALL
5050   2475 FA 05 00      lea d, [bp + 5] ; $warp
5051   2478 2A            mov b, [d]
5052   2479 38 00 00      mov c, 0
5053   247C FD AB         swp b
5054   247E D8            push b
5055   247F 07 DC 04      call FROM_FIXED00
5056   2482 51 02 00      add sp, 2
5057   2485             ; --- END FUNCTION CALL
5058   2485 FD AB         swp b
5059   2487 D8            push b
5060   2488 07 17 04      call TO_FIXED
5061   248B 51 02 00      add sp, 2
5062   248E             ; --- END FUNCTION CALL
5063   248E E7            pop d
5064   248F FD 43         mov [d], b
5065   2491 0A 94 24      jmp _if129_exit
5066   2494             _if129_exit:
5067   2494             ; stardate = stardate + time_used; 
5068   2494 3B 83 6E      mov d, _stardate ; $stardate
5069   2497 DA            push d
5070   2498 3B 83 6E      mov d, _stardate ; $stardate
5071   249B 2A            mov b, [d]
5072   249C 38 00 00      mov c, 0
5073   249F             ; --- START TERMS
5074   249F D7            push a
5075   24A0 11            mov a, b
5076   24A1 FA FF FF      lea d, [bp + -1] ; $time_used
5077   24A4 2A            mov b, [d]
5078   24A5 38 00 00      mov c, 0
5079   24A8 56            add b, a
5080   24A9 E4            pop a
5081   24AA             ; --- END TERMS
5082   24AA E7            pop d
5083   24AB FD 43         mov [d], b
5084   24AD             ; if (FROM_FIXED(stardate) > time_start + time_up) 
5085   24AD             _if130_cond:
5086   24AD             ; --- START FUNCTION CALL
5087   24AD 3B 83 6E      mov d, _stardate ; $stardate
5088   24B0 2A            mov b, [d]
5089   24B1 38 00 00      mov c, 0
5090   24B4 FD AB         swp b
5091   24B6 D8            push b
5092   24B7 07 68 04      call FROM_FIXED
5093   24BA 51 02 00      add sp, 2
5094   24BD             ; --- END FUNCTION CALL
5095   24BD             ; --- START RELATIONAL
5096   24BD D7            push a
5097   24BE 11            mov a, b
5098   24BF 3B 67 6E      mov d, _time_start ; $time_start
5099   24C2 2A            mov b, [d]
5100   24C3 38 00 00      mov c, 0
5101   24C6             ; --- START TERMS
5102   24C6 D7            push a
5103   24C7 11            mov a, b
5104   24C8 3B 69 6E      mov d, _time_up ; $time_up
5105   24CB 2A            mov b, [d]
5106   24CC 38 00 00      mov c, 0
5107   24CF 56            add b, a
5108   24D0 E4            pop a
5109   24D1             ; --- END TERMS
5110   24D1 B0            cmp a, b
5111   24D2 FD 7F         sgt ; >
5112   24D4 E4            pop a
5113   24D5             ; --- END RELATIONAL
5114   24D5 C0 00 00      cmp b, 0
5115   24D8 C6 E1 24      je _if130_exit
5116   24DB             _if130_TRUE:
5117   24DB             ; end_of_time(); 
5118   24DB             ; --- START FUNCTION CALL
5119   24DB 07 E2 4E      call end_of_time
5120   24DE 0A E1 24      jmp _if130_exit
5121   24E1             _if130_exit:
5122   24E1             ; short_range_scan(); 
5123   24E1             ; --- START FUNCTION CALL
5124   24E1 07 86 25      call short_range_scan
5125   24E4 F9            leave
5126   24E5 09            ret
5127   24E6             
5128   24E6             maneuver_energy:
5129   24E6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5130   24E9             ; energy = energy - n + 10; 
5131   24E9 3B A9 6D      mov d, _energy ; $energy
5132   24EC DA            push d
5133   24ED 3B A9 6D      mov d, _energy ; $energy
5134   24F0 2A            mov b, [d]
5135   24F1 38 00 00      mov c, 0
5136   24F4             ; --- START TERMS
5137   24F4 D7            push a
5138   24F5 11            mov a, b
5139   24F6 FA 05 00      lea d, [bp + 5] ; $n
5140   24F9 2A            mov b, [d]
5141   24FA 38 00 00      mov c, 0
5142   24FD 60            sub a, b
5143   24FE 27            mov b, a
5144   24FF 11            mov a, b
5145   2500 FD 2E 0A 00   mov32 cb, $0000000a
5145   2504 00 00 
5146   2506 56            add b, a
5147   2507 E4            pop a
5148   2508             ; --- END TERMS
5149   2508 E7            pop d
5150   2509 FD 43         mov [d], b
5151   250B             ; if (energy >= 0) 
5152   250B             _if131_cond:
5153   250B 3B A9 6D      mov d, _energy ; $energy
5154   250E 2A            mov b, [d]
5155   250F 38 00 00      mov c, 0
5156   2512             ; --- START RELATIONAL
5157   2512 D7            push a
5158   2513 11            mov a, b
5159   2514 FD 2E 00 00   mov32 cb, $00000000
5159   2518 00 00 
5160   251A B0            cmp a, b
5161   251B FD 80         sge ; >=
5162   251D E4            pop a
5163   251E             ; --- END RELATIONAL
5164   251E C0 00 00      cmp b, 0
5165   2521 C6 29 25      je _if131_exit
5166   2524             _if131_TRUE:
5167   2524             ; return; 
5168   2524 F9            leave
5169   2525 09            ret
5170   2526 0A 29 25      jmp _if131_exit
5171   2529             _if131_exit:
5172   2529             ; puts("Shield Control supplies energy to complete maneuver.\n"); 
5173   2529             ; --- START FUNCTION CALL
5174   2529 26 2B 76      mov b, _s73 ; "Shield Control supplies energy to complete maneuver.\n"
5175   252C FD AB         swp b
5176   252E D8            push b
5177   252F 07 85 69      call puts
5178   2532 51 02 00      add sp, 2
5179   2535             ; --- END FUNCTION CALL
5180   2535             ; shield = shield + energy; 
5181   2535 3B 64 6E      mov d, _shield ; $shield
5182   2538 DA            push d
5183   2539 3B 64 6E      mov d, _shield ; $shield
5184   253C 2A            mov b, [d]
5185   253D 38 00 00      mov c, 0
5186   2540             ; --- START TERMS
5187   2540 D7            push a
5188   2541 11            mov a, b
5189   2542 3B A9 6D      mov d, _energy ; $energy
5190   2545 2A            mov b, [d]
5191   2546 38 00 00      mov c, 0
5192   2549 56            add b, a
5193   254A E4            pop a
5194   254B             ; --- END TERMS
5195   254B E7            pop d
5196   254C FD 43         mov [d], b
5197   254E             ; energy = 0; 
5198   254E 3B A9 6D      mov d, _energy ; $energy
5199   2551 DA            push d
5200   2552 FD 2E 00 00   mov32 cb, $00000000
5200   2556 00 00 
5201   2558 E7            pop d
5202   2559 FD 43         mov [d], b
5203   255B             ; if (shield <= 0) 
5204   255B             _if132_cond:
5205   255B 3B 64 6E      mov d, _shield ; $shield
5206   255E 2A            mov b, [d]
5207   255F 38 00 00      mov c, 0
5208   2562             ; --- START RELATIONAL
5209   2562 D7            push a
5210   2563 11            mov a, b
5211   2564 FD 2E 00 00   mov32 cb, $00000000
5211   2568 00 00 
5212   256A B0            cmp a, b
5213   256B FD 74         sle ; <= (signed)
5214   256D E4            pop a
5215   256E             ; --- END RELATIONAL
5216   256E C0 00 00      cmp b, 0
5217   2571 C6 84 25      je _if132_exit
5218   2574             _if132_TRUE:
5219   2574             ; shield = 0; 
5220   2574 3B 64 6E      mov d, _shield ; $shield
5221   2577 DA            push d
5222   2578 FD 2E 00 00   mov32 cb, $00000000
5222   257C 00 00 
5223   257E E7            pop d
5224   257F FD 43         mov [d], b
5225   2581 0A 84 25      jmp _if132_exit
5226   2584             _if132_exit:
5227   2584 F9            leave
5228   2585 09            ret
5229   2586             
5230   2586             short_range_scan:
5231   2586 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5232   2589             ; int i, j; 
5233   2589 52 02 00      sub sp, 2
5234   258C 52 02 00      sub sp, 2
5235   258F             ; char *sC = "GREEN"; 
5236   258F 52 02 00      sub sp, 2
5237   2592             ; --- START LOCAL VAR INITIALIZATION
5238   2592 FA FB FF      lea d, [bp + -5] ; $sC
5239   2595 DA            push d
5240   2596 26 61 76      mov b, _s74 ; "GREEN"
5241   2599 E7            pop d
5242   259A FD 43         mov [d], b
5243   259C             ; --- END LOCAL VAR INITIALIZATION
5244   259C             ; if (energy < energy0 / 10) 
5245   259C             _if133_cond:
5246   259C 3B A9 6D      mov d, _energy ; $energy
5247   259F 2A            mov b, [d]
5248   25A0 38 00 00      mov c, 0
5249   25A3             ; --- START RELATIONAL
5250   25A3 D7            push a
5251   25A4 11            mov a, b
5252   25A5 3B AB 6D      mov d, _energy0 ; $energy0
5253   25A8 2A            mov b, [d]
5254   25A9 38 00 00      mov c, 0
5255   25AC             ; --- START FACTORS
5256   25AC D7            push a
5257   25AD FD D8         push g
5258   25AF 11            mov a, b
5259   25B0 FD 7A         mov g, c
5260   25B2 FD 2E 0A 00   mov32 cb, $0000000a
5260   25B6 00 00 
5261   25B8 FD D8         push g ; save 'g' as the div instruction uses it
5262   25BA AE            div a, b ; /, a: quotient, b: remainder
5263   25BB FD F1         pop g
5264   25BD FD 38         mov c, g
5265   25BF 27            mov b, a
5266   25C0 FD F1         pop g
5267   25C2 E4            pop a
5268   25C3             ; --- END FACTORS
5269   25C3 B0            cmp a, b
5270   25C4 FD 73         slt ; < (signed)
5271   25C6 E4            pop a
5272   25C7             ; --- END RELATIONAL
5273   25C7 C0 00 00      cmp b, 0
5274   25CA C6 DA 25      je _if133_exit
5275   25CD             _if133_TRUE:
5276   25CD             ; sC = "YELLOW"; 
5277   25CD FA FB FF      lea d, [bp + -5] ; $sC
5278   25D0 DA            push d
5279   25D1 26 67 76      mov b, _s75 ; "YELLOW"
5280   25D4 E7            pop d
5281   25D5 FD 43         mov [d], b
5282   25D7 0A DA 25      jmp _if133_exit
5283   25DA             _if133_exit:
5284   25DA             ; if (klingons > 0) 
5285   25DA             _if136_cond:
5286   25DA 3B 5B 6E      mov d, _klingons ; $klingons
5287   25DD 32            mov bl, [d]
5288   25DE A7 00         mov bh, 0
5289   25E0 38 00 00      mov c, 0
5290   25E3             ; --- START RELATIONAL
5291   25E3 D7            push a
5292   25E4 11            mov a, b
5293   25E5 FD 2E 00 00   mov32 cb, $00000000
5293   25E9 00 00 
5294   25EB B0            cmp a, b
5295   25EC FD 81         sgu ; > (unsigned)
5296   25EE E4            pop a
5297   25EF             ; --- END RELATIONAL
5298   25EF C0 00 00      cmp b, 0
5299   25F2 C6 02 26      je _if136_exit
5300   25F5             _if136_TRUE:
5301   25F5             ; sC = "*RED*"; 
5302   25F5 FA FB FF      lea d, [bp + -5] ; $sC
5303   25F8 DA            push d
5304   25F9 26 6E 76      mov b, _s76 ; "*RED*"
5305   25FC E7            pop d
5306   25FD FD 43         mov [d], b
5307   25FF 0A 02 26      jmp _if136_exit
5308   2602             _if136_exit:
5309   2602             ; docked = 0; 
5310   2602 3B A8 6D      mov d, _docked ; $docked
5311   2605 DA            push d
5312   2606 FD 2E 00 00   mov32 cb, $00000000
5312   260A 00 00 
5313   260C E7            pop d
5314   260D FD 3E         mov [d], bl
5315   260F             ; for (i = (int) (FROM_FIXED00(ship_y) - 1); i <= (int) (FROM_FIXED00(ship_y) + 1); i++) 
5316   260F             _for137_init:
5317   260F FA FF FF      lea d, [bp + -1] ; $i
5318   2612 DA            push d
5319   2613             ; --- START FUNCTION CALL
5320   2613 3B 7F 6E      mov d, _ship_y ; $ship_y
5321   2616 2A            mov b, [d]
5322   2617 38 00 00      mov c, 0
5323   261A FD AB         swp b
5324   261C D8            push b
5325   261D 07 DC 04      call FROM_FIXED00
5326   2620 51 02 00      add sp, 2
5327   2623             ; --- END FUNCTION CALL
5328   2623             ; --- START TERMS
5329   2623 D7            push a
5330   2624 11            mov a, b
5331   2625 FD 2E 01 00   mov32 cb, $00000001
5331   2629 00 00 
5332   262B 60            sub a, b
5333   262C 27            mov b, a
5334   262D E4            pop a
5335   262E             ; --- END TERMS
5336   262E E7            pop d
5337   262F FD 43         mov [d], b
5338   2631             _for137_cond:
5339   2631 FA FF FF      lea d, [bp + -1] ; $i
5340   2634 2A            mov b, [d]
5341   2635 38 00 00      mov c, 0
5342   2638             ; --- START RELATIONAL
5343   2638 D7            push a
5344   2639 11            mov a, b
5345   263A             ; --- START FUNCTION CALL
5346   263A 3B 7F 6E      mov d, _ship_y ; $ship_y
5347   263D 2A            mov b, [d]
5348   263E 38 00 00      mov c, 0
5349   2641 FD AB         swp b
5350   2643 D8            push b
5351   2644 07 DC 04      call FROM_FIXED00
5352   2647 51 02 00      add sp, 2
5353   264A             ; --- END FUNCTION CALL
5354   264A             ; --- START TERMS
5355   264A D7            push a
5356   264B 11            mov a, b
5357   264C FD 2E 01 00   mov32 cb, $00000001
5357   2650 00 00 
5358   2652 56            add b, a
5359   2653 E4            pop a
5360   2654             ; --- END TERMS
5361   2654 B0            cmp a, b
5362   2655 FD 74         sle ; <= (signed)
5363   2657 E4            pop a
5364   2658             ; --- END RELATIONAL
5365   2658 C0 00 00      cmp b, 0
5366   265B C6 CC 27      je _for137_exit
5367   265E             _for137_block:
5368   265E             ; for (j = (int) (FROM_FIXED00(ship_x) - 1); j <= (int) (FROM_FIXED00(ship_x) + 1); j++) 
5369   265E             _for138_init:
5370   265E FA FD FF      lea d, [bp + -3] ; $j
5371   2661 DA            push d
5372   2662             ; --- START FUNCTION CALL
5373   2662 3B 81 6E      mov d, _ship_x ; $ship_x
5374   2665 2A            mov b, [d]
5375   2666 38 00 00      mov c, 0
5376   2669 FD AB         swp b
5377   266B D8            push b
5378   266C 07 DC 04      call FROM_FIXED00
5379   266F 51 02 00      add sp, 2
5380   2672             ; --- END FUNCTION CALL
5381   2672             ; --- START TERMS
5382   2672 D7            push a
5383   2673 11            mov a, b
5384   2674 FD 2E 01 00   mov32 cb, $00000001
5384   2678 00 00 
5385   267A 60            sub a, b
5386   267B 27            mov b, a
5387   267C E4            pop a
5388   267D             ; --- END TERMS
5389   267D E7            pop d
5390   267E FD 43         mov [d], b
5391   2680             _for138_cond:
5392   2680 FA FD FF      lea d, [bp + -3] ; $j
5393   2683 2A            mov b, [d]
5394   2684 38 00 00      mov c, 0
5395   2687             ; --- START RELATIONAL
5396   2687 D7            push a
5397   2688 11            mov a, b
5398   2689             ; --- START FUNCTION CALL
5399   2689 3B 81 6E      mov d, _ship_x ; $ship_x
5400   268C 2A            mov b, [d]
5401   268D 38 00 00      mov c, 0
5402   2690 FD AB         swp b
5403   2692 D8            push b
5404   2693 07 DC 04      call FROM_FIXED00
5405   2696 51 02 00      add sp, 2
5406   2699             ; --- END FUNCTION CALL
5407   2699             ; --- START TERMS
5408   2699 D7            push a
5409   269A 11            mov a, b
5410   269B FD 2E 01 00   mov32 cb, $00000001
5410   269F 00 00 
5411   26A1 56            add b, a
5412   26A2 E4            pop a
5413   26A3             ; --- END TERMS
5414   26A3 B0            cmp a, b
5415   26A4 FD 74         sle ; <= (signed)
5416   26A6 E4            pop a
5417   26A7             ; --- END RELATIONAL
5418   26A7 C0 00 00      cmp b, 0
5419   26AA C6 B9 27      je _for138_exit
5420   26AD             _for138_block:
5421   26AD             ; if (i >= 1 && i <= 8 && j >= 1 && j <= 8) { 
5422   26AD             _if139_cond:
5423   26AD FA FF FF      lea d, [bp + -1] ; $i
5424   26B0 2A            mov b, [d]
5425   26B1 38 00 00      mov c, 0
5426   26B4             ; --- START RELATIONAL
5427   26B4 D7            push a
5428   26B5 11            mov a, b
5429   26B6 FD 2E 01 00   mov32 cb, $00000001
5429   26BA 00 00 
5430   26BC B0            cmp a, b
5431   26BD FD 80         sge ; >=
5432   26BF E4            pop a
5433   26C0             ; --- END RELATIONAL
5434   26C0             ; --- START LOGICAL AND
5435   26C0 D7            push a
5436   26C1 11            mov a, b
5437   26C2 FA FF FF      lea d, [bp + -1] ; $i
5438   26C5 2A            mov b, [d]
5439   26C6 38 00 00      mov c, 0
5440   26C9             ; --- START RELATIONAL
5441   26C9 D7            push a
5442   26CA 11            mov a, b
5443   26CB FD 2E 08 00   mov32 cb, $00000008
5443   26CF 00 00 
5444   26D1 B0            cmp a, b
5445   26D2 FD 74         sle ; <= (signed)
5446   26D4 E4            pop a
5447   26D5             ; --- END RELATIONAL
5448   26D5 FD A7         sand a, b
5449   26D7 11            mov a, b
5450   26D8 FA FD FF      lea d, [bp + -3] ; $j
5451   26DB 2A            mov b, [d]
5452   26DC 38 00 00      mov c, 0
5453   26DF             ; --- START RELATIONAL
5454   26DF D7            push a
5455   26E0 11            mov a, b
5456   26E1 FD 2E 01 00   mov32 cb, $00000001
5456   26E5 00 00 
5457   26E7 B0            cmp a, b
5458   26E8 FD 80         sge ; >=
5459   26EA E4            pop a
5460   26EB             ; --- END RELATIONAL
5461   26EB FD A7         sand a, b
5462   26ED 11            mov a, b
5463   26EE FA FD FF      lea d, [bp + -3] ; $j
5464   26F1 2A            mov b, [d]
5465   26F2 38 00 00      mov c, 0
5466   26F5             ; --- START RELATIONAL
5467   26F5 D7            push a
5468   26F6 11            mov a, b
5469   26F7 FD 2E 08 00   mov32 cb, $00000008
5469   26FB 00 00 
5470   26FD B0            cmp a, b
5471   26FE FD 74         sle ; <= (signed)
5472   2700 E4            pop a
5473   2701             ; --- END RELATIONAL
5474   2701 FD A7         sand a, b
5475   2703 E4            pop a
5476   2704             ; --- END LOGICAL AND
5477   2704 C0 00 00      cmp b, 0
5478   2707 C6 A6 27      je _if139_exit
5479   270A             _if139_TRUE:
5480   270A             ; if (quad[i+-1][j+-1] == 		2      ) { 
5481   270A             _if140_cond:
5482   270A 3B 85 6E      mov d, _quad_data ; $quad
5483   270D D7            push a
5484   270E DA            push d
5485   270F FA FF FF      lea d, [bp + -1] ; $i
5486   2712 2A            mov b, [d]
5487   2713 38 00 00      mov c, 0
5488   2716             ; --- START TERMS
5489   2716 D7            push a
5490   2717 11            mov a, b
5491   2718 FD 2E FF FF   mov32 cb, $ffffffff
5491   271C FF FF 
5492   271E 56            add b, a
5493   271F E4            pop a
5494   2720             ; --- END TERMS
5495   2720 E7            pop d
5496   2721 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
5497   2725 DA            push d
5498   2726 FA FD FF      lea d, [bp + -3] ; $j
5499   2729 2A            mov b, [d]
5500   272A 38 00 00      mov c, 0
5501   272D             ; --- START TERMS
5502   272D D7            push a
5503   272E 11            mov a, b
5504   272F FD 2E FF FF   mov32 cb, $ffffffff
5504   2733 FF FF 
5505   2735 56            add b, a
5506   2736 E4            pop a
5507   2737             ; --- END TERMS
5508   2737 E7            pop d
5509   2738 5A            add d, b
5510   2739 E4            pop a
5511   273A 32            mov bl, [d]
5512   273B A7 00         mov bh, 0
5513   273D 38 00 00      mov c, 0
5514   2740             ; --- START RELATIONAL
5515   2740 D7            push a
5516   2741 11            mov a, b
5517   2742 FD 2E 02 00   mov32 cb, $00000002
5517   2746 00 00 
5518   2748 B0            cmp a, b
5519   2749 FD 71         seq ; ==
5520   274B E4            pop a
5521   274C             ; --- END RELATIONAL
5522   274C C0 00 00      cmp b, 0
5523   274F C6 A3 27      je _if140_exit
5524   2752             _if140_TRUE:
5525   2752             ; docked = 1; 
5526   2752 3B A8 6D      mov d, _docked ; $docked
5527   2755 DA            push d
5528   2756 FD 2E 01 00   mov32 cb, $00000001
5528   275A 00 00 
5529   275C E7            pop d
5530   275D FD 3E         mov [d], bl
5531   275F             ; sC = "DOCKED"; 
5532   275F FA FB FF      lea d, [bp + -5] ; $sC
5533   2762 DA            push d
5534   2763 26 74 76      mov b, _s77 ; "DOCKED"
5535   2766 E7            pop d
5536   2767 FD 43         mov [d], b
5537   2769             ; energy = energy0; 
5538   2769 3B A9 6D      mov d, _energy ; $energy
5539   276C DA            push d
5540   276D 3B AB 6D      mov d, _energy0 ; $energy0
5541   2770 2A            mov b, [d]
5542   2771 38 00 00      mov c, 0
5543   2774 E7            pop d
5544   2775 FD 43         mov [d], b
5545   2777             ; torps = torps0; 
5546   2777 3B 5E 6E      mov d, _torps ; $torps
5547   277A DA            push d
5548   277B 3B 5F 6E      mov d, _torps0 ; $torps0
5549   277E 32            mov bl, [d]
5550   277F A7 00         mov bh, 0
5551   2781 38 00 00      mov c, 0
5552   2784 E7            pop d
5553   2785 FD 3E         mov [d], bl
5554   2787             ; puts("Shields dropped for docking purposes."); 
5555   2787             ; --- START FUNCTION CALL
5556   2787 26 7B 76      mov b, _s78 ; "Shields dropped for docking purposes."
5557   278A FD AB         swp b
5558   278C D8            push b
5559   278D 07 85 69      call puts
5560   2790 51 02 00      add sp, 2
5561   2793             ; --- END FUNCTION CALL
5562   2793             ; shield = 0; 
5563   2793 3B 64 6E      mov d, _shield ; $shield
5564   2796 DA            push d
5565   2797 FD 2E 00 00   mov32 cb, $00000000
5565   279B 00 00 
5566   279D E7            pop d
5567   279E FD 43         mov [d], b
5568   27A0 0A A3 27      jmp _if140_exit
5569   27A3             _if140_exit:
5570   27A3 0A A6 27      jmp _if139_exit
5571   27A6             _if139_exit:
5572   27A6             _for138_update:
5573   27A6 FA FD FF      lea d, [bp + -3] ; $j
5574   27A9 2A            mov b, [d]
5575   27AA 38 00 00      mov c, 0
5576   27AD 11            mov a, b
5577   27AE FD 77         inc b
5578   27B0 FA FD FF      lea d, [bp + -3] ; $j
5579   27B3 FD 43         mov [d], b
5580   27B5 27            mov b, a
5581   27B6 0A 80 26      jmp _for138_cond
5582   27B9             _for138_exit:
5583   27B9             _for137_update:
5584   27B9 FA FF FF      lea d, [bp + -1] ; $i
5585   27BC 2A            mov b, [d]
5586   27BD 38 00 00      mov c, 0
5587   27C0 11            mov a, b
5588   27C1 FD 77         inc b
5589   27C3 FA FF FF      lea d, [bp + -1] ; $i
5590   27C6 FD 43         mov [d], b
5591   27C8 27            mov b, a
5592   27C9 0A 31 26      jmp _for137_cond
5593   27CC             _for137_exit:
5594   27CC             ; if (damage[2] < 0) { 
5595   27CC             _if141_cond:
5596   27CC 3B 6B 6E      mov d, _damage_data ; $damage
5597   27CF D7            push a
5598   27D0 DA            push d
5599   27D1 FD 2E 02 00   mov32 cb, $00000002
5599   27D5 00 00 
5600   27D7 E7            pop d
5601   27D8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5602   27DC E4            pop a
5603   27DD 2A            mov b, [d]
5604   27DE 38 00 00      mov c, 0
5605   27E1             ; --- START RELATIONAL
5606   27E1 D7            push a
5607   27E2 11            mov a, b
5608   27E3 FD 2E 00 00   mov32 cb, $00000000
5608   27E7 00 00 
5609   27E9 B0            cmp a, b
5610   27EA FD 73         slt ; < (signed)
5611   27EC E4            pop a
5612   27ED             ; --- END RELATIONAL
5613   27ED C0 00 00      cmp b, 0
5614   27F0 C6 04 28      je _if141_exit
5615   27F3             _if141_TRUE:
5616   27F3             ; puts("\n*** Short Range Sensors are out ***"); 
5617   27F3             ; --- START FUNCTION CALL
5618   27F3 26 A1 76      mov b, _s79 ; "\n*** Short Range Sensors are out ***"
5619   27F6 FD AB         swp b
5620   27F8 D8            push b
5621   27F9 07 85 69      call puts
5622   27FC 51 02 00      add sp, 2
5623   27FF             ; --- END FUNCTION CALL
5624   27FF             ; return; 
5625   27FF F9            leave
5626   2800 09            ret
5627   2801 0A 04 28      jmp _if141_exit
5628   2804             _if141_exit:
5629   2804             ; puts(srs_1); 
5630   2804             ; --- START FUNCTION CALL
5631   2804 3B 9F 6F      mov d, _srs_1 ; $srs_1
5632   2807 2A            mov b, [d]
5633   2808 38 00 00      mov c, 0
5634   280B FD AB         swp b
5635   280D D8            push b
5636   280E 07 85 69      call puts
5637   2811 51 02 00      add sp, 2
5638   2814             ; --- END FUNCTION CALL
5639   2814             ; for (i = 0; i < 8; i++) { 
5640   2814             _for142_init:
5641   2814 FA FF FF      lea d, [bp + -1] ; $i
5642   2817 DA            push d
5643   2818 FD 2E 00 00   mov32 cb, $00000000
5643   281C 00 00 
5644   281E E7            pop d
5645   281F FD 43         mov [d], b
5646   2821             _for142_cond:
5647   2821 FA FF FF      lea d, [bp + -1] ; $i
5648   2824 2A            mov b, [d]
5649   2825 38 00 00      mov c, 0
5650   2828             ; --- START RELATIONAL
5651   2828 D7            push a
5652   2829 11            mov a, b
5653   282A FD 2E 08 00   mov32 cb, $00000008
5653   282E 00 00 
5654   2830 B0            cmp a, b
5655   2831 FD 73         slt ; < (signed)
5656   2833 E4            pop a
5657   2834             ; --- END RELATIONAL
5658   2834 C0 00 00      cmp b, 0
5659   2837 C6 8E 2A      je _for142_exit
5660   283A             _for142_block:
5661   283A             ; for (j = 0; j < 8; j++) 
5662   283A             _for143_init:
5663   283A FA FD FF      lea d, [bp + -3] ; $j
5664   283D DA            push d
5665   283E FD 2E 00 00   mov32 cb, $00000000
5665   2842 00 00 
5666   2844 E7            pop d
5667   2845 FD 43         mov [d], b
5668   2847             _for143_cond:
5669   2847 FA FD FF      lea d, [bp + -3] ; $j
5670   284A 2A            mov b, [d]
5671   284B 38 00 00      mov c, 0
5672   284E             ; --- START RELATIONAL
5673   284E D7            push a
5674   284F 11            mov a, b
5675   2850 FD 2E 08 00   mov32 cb, $00000008
5675   2854 00 00 
5676   2856 B0            cmp a, b
5677   2857 FD 73         slt ; < (signed)
5678   2859 E4            pop a
5679   285A             ; --- END RELATIONAL
5680   285A C0 00 00      cmp b, 0
5681   285D C6 AD 28      je _for143_exit
5682   2860             _for143_block:
5683   2860             ; puts(tilestr[quad[i][j]]); 
5684   2860             ; --- START FUNCTION CALL
5685   2860 3B A1 6F      mov d, _tilestr_data ; $tilestr
5686   2863 D7            push a
5687   2864 DA            push d
5688   2865 3B 85 6E      mov d, _quad_data ; $quad
5689   2868 D7            push a
5690   2869 DA            push d
5691   286A FA FF FF      lea d, [bp + -1] ; $i
5692   286D 2A            mov b, [d]
5693   286E 38 00 00      mov c, 0
5694   2871 E7            pop d
5695   2872 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
5696   2876 DA            push d
5697   2877 FA FD FF      lea d, [bp + -3] ; $j
5698   287A 2A            mov b, [d]
5699   287B 38 00 00      mov c, 0
5700   287E E7            pop d
5701   287F 5A            add d, b
5702   2880 E4            pop a
5703   2881 32            mov bl, [d]
5704   2882 A7 00         mov bh, 0
5705   2884 38 00 00      mov c, 0
5706   2887 E7            pop d
5707   2888 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5708   288C E4            pop a
5709   288D 2A            mov b, [d]
5710   288E 38 00 00      mov c, 0
5711   2891 FD AB         swp b
5712   2893 D8            push b
5713   2894 07 85 69      call puts
5714   2897 51 02 00      add sp, 2
5715   289A             ; --- END FUNCTION CALL
5716   289A             _for143_update:
5717   289A FA FD FF      lea d, [bp + -3] ; $j
5718   289D 2A            mov b, [d]
5719   289E 38 00 00      mov c, 0
5720   28A1 11            mov a, b
5721   28A2 FD 77         inc b
5722   28A4 FA FD FF      lea d, [bp + -3] ; $j
5723   28A7 FD 43         mov [d], b
5724   28A9 27            mov b, a
5725   28AA 0A 47 28      jmp _for143_cond
5726   28AD             _for143_exit:
5727   28AD             ; if (i == 0) 
5728   28AD             _if144_cond:
5729   28AD FA FF FF      lea d, [bp + -1] ; $i
5730   28B0 2A            mov b, [d]
5731   28B1 38 00 00      mov c, 0
5732   28B4             ; --- START RELATIONAL
5733   28B4 D7            push a
5734   28B5 11            mov a, b
5735   28B6 FD 2E 00 00   mov32 cb, $00000000
5735   28BA 00 00 
5736   28BC B0            cmp a, b
5737   28BD FD 71         seq ; ==
5738   28BF E4            pop a
5739   28C0             ; --- END RELATIONAL
5740   28C0 C0 00 00      cmp b, 0
5741   28C3 C6 E8 28      je _if144_exit
5742   28C6             _if144_TRUE:
5743   28C6             ; printf("    Stardate            %d\n", FROM_FIXED(stardate)); 
5744   28C6             ; --- START FUNCTION CALL
5745   28C6             ; --- START FUNCTION CALL
5746   28C6 3B 83 6E      mov d, _stardate ; $stardate
5747   28C9 2A            mov b, [d]
5748   28CA 38 00 00      mov c, 0
5749   28CD FD AB         swp b
5750   28CF D8            push b
5751   28D0 07 68 04      call FROM_FIXED
5752   28D3 51 02 00      add sp, 2
5753   28D6             ; --- END FUNCTION CALL
5754   28D6 FD AB         swp b
5755   28D8 D8            push b
5756   28D9 26 C6 76      mov b, _s80 ; "    Stardate            %d\n"
5757   28DC FD AB         swp b
5758   28DE D8            push b
5759   28DF 07 78 60      call printf
5760   28E2 51 04 00      add sp, 4
5761   28E5             ; --- END FUNCTION CALL
5762   28E5 0A E8 28      jmp _if144_exit
5763   28E8             _if144_exit:
5764   28E8             ; if (i == 1) 
5765   28E8             _if145_cond:
5766   28E8 FA FF FF      lea d, [bp + -1] ; $i
5767   28EB 2A            mov b, [d]
5768   28EC 38 00 00      mov c, 0
5769   28EF             ; --- START RELATIONAL
5770   28EF D7            push a
5771   28F0 11            mov a, b
5772   28F1 FD 2E 01 00   mov32 cb, $00000001
5772   28F5 00 00 
5773   28F7 B0            cmp a, b
5774   28F8 FD 71         seq ; ==
5775   28FA E4            pop a
5776   28FB             ; --- END RELATIONAL
5777   28FB C0 00 00      cmp b, 0
5778   28FE C6 1A 29      je _if145_exit
5779   2901             _if145_TRUE:
5780   2901             ; printf("    Condition           %s\n", sC); 
5781   2901             ; --- START FUNCTION CALL
5782   2901 FA FB FF      lea d, [bp + -5] ; $sC
5783   2904 2A            mov b, [d]
5784   2905 38 00 00      mov c, 0
5785   2908 FD AB         swp b
5786   290A D8            push b
5787   290B 26 E2 76      mov b, _s81 ; "    Condition           %s\n"
5788   290E FD AB         swp b
5789   2910 D8            push b
5790   2911 07 78 60      call printf
5791   2914 51 04 00      add sp, 4
5792   2917             ; --- END FUNCTION CALL
5793   2917 0A 1A 29      jmp _if145_exit
5794   291A             _if145_exit:
5795   291A             ; if (i == 2) 
5796   291A             _if146_cond:
5797   291A FA FF FF      lea d, [bp + -1] ; $i
5798   291D 2A            mov b, [d]
5799   291E 38 00 00      mov c, 0
5800   2921             ; --- START RELATIONAL
5801   2921 D7            push a
5802   2922 11            mov a, b
5803   2923 FD 2E 02 00   mov32 cb, $00000002
5803   2927 00 00 
5804   2929 B0            cmp a, b
5805   292A FD 71         seq ; ==
5806   292C E4            pop a
5807   292D             ; --- END RELATIONAL
5808   292D C0 00 00      cmp b, 0
5809   2930 C6 56 29      je _if146_exit
5810   2933             _if146_TRUE:
5811   2933             ; printf("    Quadrant            %d, %d\n", quad_y, quad_x); 
5812   2933             ; --- START FUNCTION CALL
5813   2933 3B 62 6E      mov d, _quad_x ; $quad_x
5814   2936 2A            mov b, [d]
5815   2937 38 00 00      mov c, 0
5816   293A FD AB         swp b
5817   293C D8            push b
5818   293D 3B 60 6E      mov d, _quad_y ; $quad_y
5819   2940 2A            mov b, [d]
5820   2941 38 00 00      mov c, 0
5821   2944 FD AB         swp b
5822   2946 D8            push b
5823   2947 26 FE 76      mov b, _s82 ; "    Quadrant            %d, %d\n"
5824   294A FD AB         swp b
5825   294C D8            push b
5826   294D 07 78 60      call printf
5827   2950 51 06 00      add sp, 6
5828   2953             ; --- END FUNCTION CALL
5829   2953 0A 56 29      jmp _if146_exit
5830   2956             _if146_exit:
5831   2956             ; if (i == 3) 
5832   2956             _if147_cond:
5833   2956 FA FF FF      lea d, [bp + -1] ; $i
5834   2959 2A            mov b, [d]
5835   295A 38 00 00      mov c, 0
5836   295D             ; --- START RELATIONAL
5837   295D D7            push a
5838   295E 11            mov a, b
5839   295F FD 2E 03 00   mov32 cb, $00000003
5839   2963 00 00 
5840   2965 B0            cmp a, b
5841   2966 FD 71         seq ; ==
5842   2968 E4            pop a
5843   2969             ; --- END RELATIONAL
5844   2969 C0 00 00      cmp b, 0
5845   296C C6 A4 29      je _if147_exit
5846   296F             _if147_TRUE:
5847   296F             ; printf("    Sector              %d, %d\n", FROM_FIXED00(ship_y), FROM_FIXED00(ship_x)); 
5848   296F             ; --- START FUNCTION CALL
5849   296F             ; --- START FUNCTION CALL
5850   296F 3B 81 6E      mov d, _ship_x ; $ship_x
5851   2972 2A            mov b, [d]
5852   2973 38 00 00      mov c, 0
5853   2976 FD AB         swp b
5854   2978 D8            push b
5855   2979 07 DC 04      call FROM_FIXED00
5856   297C 51 02 00      add sp, 2
5857   297F             ; --- END FUNCTION CALL
5858   297F FD AB         swp b
5859   2981 D8            push b
5860   2982             ; --- START FUNCTION CALL
5861   2982 3B 7F 6E      mov d, _ship_y ; $ship_y
5862   2985 2A            mov b, [d]
5863   2986 38 00 00      mov c, 0
5864   2989 FD AB         swp b
5865   298B D8            push b
5866   298C 07 DC 04      call FROM_FIXED00
5867   298F 51 02 00      add sp, 2
5868   2992             ; --- END FUNCTION CALL
5869   2992 FD AB         swp b
5870   2994 D8            push b
5871   2995 26 1E 77      mov b, _s83 ; "    Sector              %d, %d\n"
5872   2998 FD AB         swp b
5873   299A D8            push b
5874   299B 07 78 60      call printf
5875   299E 51 06 00      add sp, 6
5876   29A1             ; --- END FUNCTION CALL
5877   29A1 0A A4 29      jmp _if147_exit
5878   29A4             _if147_exit:
5879   29A4             ; if (i == 4) 
5880   29A4             _if148_cond:
5881   29A4 FA FF FF      lea d, [bp + -1] ; $i
5882   29A7 2A            mov b, [d]
5883   29A8 38 00 00      mov c, 0
5884   29AB             ; --- START RELATIONAL
5885   29AB D7            push a
5886   29AC 11            mov a, b
5887   29AD FD 2E 04 00   mov32 cb, $00000004
5887   29B1 00 00 
5888   29B3 B0            cmp a, b
5889   29B4 FD 71         seq ; ==
5890   29B6 E4            pop a
5891   29B7             ; --- END RELATIONAL
5892   29B7 C0 00 00      cmp b, 0
5893   29BA C6 D8 29      je _if148_exit
5894   29BD             _if148_TRUE:
5895   29BD             ; printf("    Photon Torpedoes    %d\n", torps); 
5896   29BD             ; --- START FUNCTION CALL
5897   29BD 3B 5E 6E      mov d, _torps ; $torps
5898   29C0 32            mov bl, [d]
5899   29C1 A7 00         mov bh, 0
5900   29C3 38 00 00      mov c, 0
5901   29C6 FD AB         swp b
5902   29C8 D8            push b
5903   29C9 26 3E 77      mov b, _s84 ; "    Photon Torpedoes    %d\n"
5904   29CC FD AB         swp b
5905   29CE D8            push b
5906   29CF 07 78 60      call printf
5907   29D2 51 03 00      add sp, 3
5908   29D5             ; --- END FUNCTION CALL
5909   29D5 0A D8 29      jmp _if148_exit
5910   29D8             _if148_exit:
5911   29D8             ; if (i == 5) 
5912   29D8             _if149_cond:
5913   29D8 FA FF FF      lea d, [bp + -1] ; $i
5914   29DB 2A            mov b, [d]
5915   29DC 38 00 00      mov c, 0
5916   29DF             ; --- START RELATIONAL
5917   29DF D7            push a
5918   29E0 11            mov a, b
5919   29E1 FD 2E 05 00   mov32 cb, $00000005
5919   29E5 00 00 
5920   29E7 B0            cmp a, b
5921   29E8 FD 71         seq ; ==
5922   29EA E4            pop a
5923   29EB             ; --- END RELATIONAL
5924   29EB C0 00 00      cmp b, 0
5925   29EE C6 15 2A      je _if149_exit
5926   29F1             _if149_TRUE:
5927   29F1             ; printf("    Total Energy        %d\n", energy + shield); 
5928   29F1             ; --- START FUNCTION CALL
5929   29F1 3B A9 6D      mov d, _energy ; $energy
5930   29F4 2A            mov b, [d]
5931   29F5 38 00 00      mov c, 0
5932   29F8             ; --- START TERMS
5933   29F8 D7            push a
5934   29F9 11            mov a, b
5935   29FA 3B 64 6E      mov d, _shield ; $shield
5936   29FD 2A            mov b, [d]
5937   29FE 38 00 00      mov c, 0
5938   2A01 56            add b, a
5939   2A02 E4            pop a
5940   2A03             ; --- END TERMS
5941   2A03 FD AB         swp b
5942   2A05 D8            push b
5943   2A06 26 5A 77      mov b, _s85 ; "    Total Energy        %d\n"
5944   2A09 FD AB         swp b
5945   2A0B D8            push b
5946   2A0C 07 78 60      call printf
5947   2A0F 51 04 00      add sp, 4
5948   2A12             ; --- END FUNCTION CALL
5949   2A12 0A 15 2A      jmp _if149_exit
5950   2A15             _if149_exit:
5951   2A15             ; if (i == 6) 
5952   2A15             _if150_cond:
5953   2A15 FA FF FF      lea d, [bp + -1] ; $i
5954   2A18 2A            mov b, [d]
5955   2A19 38 00 00      mov c, 0
5956   2A1C             ; --- START RELATIONAL
5957   2A1C D7            push a
5958   2A1D 11            mov a, b
5959   2A1E FD 2E 06 00   mov32 cb, $00000006
5959   2A22 00 00 
5960   2A24 B0            cmp a, b
5961   2A25 FD 71         seq ; ==
5962   2A27 E4            pop a
5963   2A28             ; --- END RELATIONAL
5964   2A28 C0 00 00      cmp b, 0
5965   2A2B C6 47 2A      je _if150_exit
5966   2A2E             _if150_TRUE:
5967   2A2E             ; printf("    Shields             %d\n", shield); 
5968   2A2E             ; --- START FUNCTION CALL
5969   2A2E 3B 64 6E      mov d, _shield ; $shield
5970   2A31 2A            mov b, [d]
5971   2A32 38 00 00      mov c, 0
5972   2A35 FD AB         swp b
5973   2A37 D8            push b
5974   2A38 26 76 77      mov b, _s86 ; "    Shields             %d\n"
5975   2A3B FD AB         swp b
5976   2A3D D8            push b
5977   2A3E 07 78 60      call printf
5978   2A41 51 04 00      add sp, 4
5979   2A44             ; --- END FUNCTION CALL
5980   2A44 0A 47 2A      jmp _if150_exit
5981   2A47             _if150_exit:
5982   2A47             ; if (i == 7) 
5983   2A47             _if151_cond:
5984   2A47 FA FF FF      lea d, [bp + -1] ; $i
5985   2A4A 2A            mov b, [d]
5986   2A4B 38 00 00      mov c, 0
5987   2A4E             ; --- START RELATIONAL
5988   2A4E D7            push a
5989   2A4F 11            mov a, b
5990   2A50 FD 2E 07 00   mov32 cb, $00000007
5990   2A54 00 00 
5991   2A56 B0            cmp a, b
5992   2A57 FD 71         seq ; ==
5993   2A59 E4            pop a
5994   2A5A             ; --- END RELATIONAL
5995   2A5A C0 00 00      cmp b, 0
5996   2A5D C6 7B 2A      je _if151_exit
5997   2A60             _if151_TRUE:
5998   2A60             ; printf("    Klingons Remaining  %d\n", klingons_left); 
5999   2A60             ; --- START FUNCTION CALL
6000   2A60 3B 5D 6E      mov d, _klingons_left ; $klingons_left
6001   2A63 32            mov bl, [d]
6002   2A64 A7 00         mov bh, 0
6003   2A66 38 00 00      mov c, 0
6004   2A69 FD AB         swp b
6005   2A6B D8            push b
6006   2A6C 26 92 77      mov b, _s87 ; "    Klingons Remaining  %d\n"
6007   2A6F FD AB         swp b
6008   2A71 D8            push b
6009   2A72 07 78 60      call printf
6010   2A75 51 03 00      add sp, 3
6011   2A78             ; --- END FUNCTION CALL
6012   2A78 0A 7B 2A      jmp _if151_exit
6013   2A7B             _if151_exit:
6014   2A7B             _for142_update:
6015   2A7B FA FF FF      lea d, [bp + -1] ; $i
6016   2A7E 2A            mov b, [d]
6017   2A7F 38 00 00      mov c, 0
6018   2A82 11            mov a, b
6019   2A83 FD 77         inc b
6020   2A85 FA FF FF      lea d, [bp + -1] ; $i
6021   2A88 FD 43         mov [d], b
6022   2A8A 27            mov b, a
6023   2A8B 0A 21 28      jmp _for142_cond
6024   2A8E             _for142_exit:
6025   2A8E             ; puts(srs_1); 
6026   2A8E             ; --- START FUNCTION CALL
6027   2A8E 3B 9F 6F      mov d, _srs_1 ; $srs_1
6028   2A91 2A            mov b, [d]
6029   2A92 38 00 00      mov c, 0
6030   2A95 FD AB         swp b
6031   2A97 D8            push b
6032   2A98 07 85 69      call puts
6033   2A9B 51 02 00      add sp, 2
6034   2A9E             ; --- END FUNCTION CALL
6035   2A9E             ; putchar('\n'); 
6036   2A9E             ; --- START FUNCTION CALL
6037   2A9E FD 2E 0A 00   mov32 cb, $0000000a
6037   2AA2 00 00 
6038   2AA4 DD            push bl
6039   2AA5 07 FA 64      call putchar
6040   2AA8 51 01 00      add sp, 1
6041   2AAB             ; --- END FUNCTION CALL
6042   2AAB             ; return; 
6043   2AAB F9            leave
6044   2AAC 09            ret
6045   2AAD             
6046   2AAD             put1bcd:
6047   2AAD F8 00 00      enter 0 ; (push bp; mov bp, sp)
6048   2AB0             ; v = v & 0x0F; 
6049   2AB0 FA 05 00      lea d, [bp + 5] ; $v
6050   2AB3 DA            push d
6051   2AB4 FA 05 00      lea d, [bp + 5] ; $v
6052   2AB7 32            mov bl, [d]
6053   2AB8 A7 00         mov bh, 0
6054   2ABA 38 00 00      mov c, 0
6055   2ABD D7            push a
6056   2ABE 11            mov a, b
6057   2ABF FD 2E 0F 00   mov32 cb, $0000000f
6057   2AC3 00 00 
6058   2AC5 FD 92         and b, a ; &
6059   2AC7 E4            pop a
6060   2AC8 E7            pop d
6061   2AC9 FD 3E         mov [d], bl
6062   2ACB             ; putchar('0' + v); 
6063   2ACB             ; --- START FUNCTION CALL
6064   2ACB FD 2E 30 00   mov32 cb, $00000030
6064   2ACF 00 00 
6065   2AD1             ; --- START TERMS
6066   2AD1 D7            push a
6067   2AD2 11            mov a, b
6068   2AD3 FA 05 00      lea d, [bp + 5] ; $v
6069   2AD6 32            mov bl, [d]
6070   2AD7 A7 00         mov bh, 0
6071   2AD9 38 00 00      mov c, 0
6072   2ADC 56            add b, a
6073   2ADD E4            pop a
6074   2ADE             ; --- END TERMS
6075   2ADE DD            push bl
6076   2ADF 07 FA 64      call putchar
6077   2AE2 51 01 00      add sp, 1
6078   2AE5             ; --- END FUNCTION CALL
6079   2AE5 F9            leave
6080   2AE6 09            ret
6081   2AE7             
6082   2AE7             putbcd:
6083   2AE7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6084   2AEA             ; put1bcd(x >> 8); 
6085   2AEA             ; --- START FUNCTION CALL
6086   2AEA FA 05 00      lea d, [bp + 5] ; $x
6087   2AED 2A            mov b, [d]
6088   2AEE 38 00 00      mov c, 0
6089   2AF1             ; --- START SHIFT
6090   2AF1 D7            push a
6091   2AF2 11            mov a, b
6092   2AF3 FD 2E 08 00   mov32 cb, $00000008
6092   2AF7 00 00 
6093   2AF9 FD 39         mov c, b
6094   2AFB A1            shr a, cl
6095   2AFC 27            mov b, a
6096   2AFD E4            pop a
6097   2AFE             ; --- END SHIFT
6098   2AFE DD            push bl
6099   2AFF 07 AD 2A      call put1bcd
6100   2B02 51 01 00      add sp, 1
6101   2B05             ; --- END FUNCTION CALL
6102   2B05             ; put1bcd(x >> 4); 
6103   2B05             ; --- START FUNCTION CALL
6104   2B05 FA 05 00      lea d, [bp + 5] ; $x
6105   2B08 2A            mov b, [d]
6106   2B09 38 00 00      mov c, 0
6107   2B0C             ; --- START SHIFT
6108   2B0C D7            push a
6109   2B0D 11            mov a, b
6110   2B0E FD 2E 04 00   mov32 cb, $00000004
6110   2B12 00 00 
6111   2B14 FD 39         mov c, b
6112   2B16 A1            shr a, cl
6113   2B17 27            mov b, a
6114   2B18 E4            pop a
6115   2B19             ; --- END SHIFT
6116   2B19 DD            push bl
6117   2B1A 07 AD 2A      call put1bcd
6118   2B1D 51 01 00      add sp, 1
6119   2B20             ; --- END FUNCTION CALL
6120   2B20             ; put1bcd(x); 
6121   2B20             ; --- START FUNCTION CALL
6122   2B20 FA 05 00      lea d, [bp + 5] ; $x
6123   2B23 2A            mov b, [d]
6124   2B24 38 00 00      mov c, 0
6125   2B27 DD            push bl
6126   2B28 07 AD 2A      call put1bcd
6127   2B2B 51 01 00      add sp, 1
6128   2B2E             ; --- END FUNCTION CALL
6129   2B2E F9            leave
6130   2B2F 09            ret
6131   2B30             
6132   2B30             long_range_scan:
6133   2B30 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6134   2B33             ; int i, j; 
6135   2B33 52 02 00      sub sp, 2
6136   2B36 52 02 00      sub sp, 2
6137   2B39             ; if (inoperable(3)) 
6138   2B39             _if152_cond:
6139   2B39             ; --- START FUNCTION CALL
6140   2B39 FD 2E 03 00   mov32 cb, $00000003
6140   2B3D 00 00 
6141   2B3F DD            push bl
6142   2B40 07 7C 09      call inoperable
6143   2B43 51 01 00      add sp, 1
6144   2B46             ; --- END FUNCTION CALL
6145   2B46 C0 00 00      cmp b, 0
6146   2B49 C6 51 2B      je _if152_exit
6147   2B4C             _if152_TRUE:
6148   2B4C             ; return; 
6149   2B4C F9            leave
6150   2B4D 09            ret
6151   2B4E 0A 51 2B      jmp _if152_exit
6152   2B51             _if152_exit:
6153   2B51             ; printf("Long Range Scan for Quadrant %d, %d\n\n", quad_y, quad_x); 
6154   2B51             ; --- START FUNCTION CALL
6155   2B51 3B 62 6E      mov d, _quad_x ; $quad_x
6156   2B54 2A            mov b, [d]
6157   2B55 38 00 00      mov c, 0
6158   2B58 FD AB         swp b
6159   2B5A D8            push b
6160   2B5B 3B 60 6E      mov d, _quad_y ; $quad_y
6161   2B5E 2A            mov b, [d]
6162   2B5F 38 00 00      mov c, 0
6163   2B62 FD AB         swp b
6164   2B64 D8            push b
6165   2B65 26 AE 77      mov b, _s88 ; "Long Range Scan for Quadrant %d, %d\n\n"
6166   2B68 FD AB         swp b
6167   2B6A D8            push b
6168   2B6B 07 78 60      call printf
6169   2B6E 51 06 00      add sp, 6
6170   2B71             ; --- END FUNCTION CALL
6171   2B71             ; for (i = quad_y - 1; i <= quad_y + 1; i++) { 
6172   2B71             _for153_init:
6173   2B71 FA FF FF      lea d, [bp + -1] ; $i
6174   2B74 DA            push d
6175   2B75 3B 60 6E      mov d, _quad_y ; $quad_y
6176   2B78 2A            mov b, [d]
6177   2B79 38 00 00      mov c, 0
6178   2B7C             ; --- START TERMS
6179   2B7C D7            push a
6180   2B7D 11            mov a, b
6181   2B7E FD 2E 01 00   mov32 cb, $00000001
6181   2B82 00 00 
6182   2B84 60            sub a, b
6183   2B85 27            mov b, a
6184   2B86 E4            pop a
6185   2B87             ; --- END TERMS
6186   2B87 E7            pop d
6187   2B88 FD 43         mov [d], b
6188   2B8A             _for153_cond:
6189   2B8A FA FF FF      lea d, [bp + -1] ; $i
6190   2B8D 2A            mov b, [d]
6191   2B8E 38 00 00      mov c, 0
6192   2B91             ; --- START RELATIONAL
6193   2B91 D7            push a
6194   2B92 11            mov a, b
6195   2B93 3B 60 6E      mov d, _quad_y ; $quad_y
6196   2B96 2A            mov b, [d]
6197   2B97 38 00 00      mov c, 0
6198   2B9A             ; --- START TERMS
6199   2B9A D7            push a
6200   2B9B 11            mov a, b
6201   2B9C FD 2E 01 00   mov32 cb, $00000001
6201   2BA0 00 00 
6202   2BA2 56            add b, a
6203   2BA3 E4            pop a
6204   2BA4             ; --- END TERMS
6205   2BA4 B0            cmp a, b
6206   2BA5 FD 74         sle ; <= (signed)
6207   2BA7 E4            pop a
6208   2BA8             ; --- END RELATIONAL
6209   2BA8 C0 00 00      cmp b, 0
6210   2BAB C6 36 2D      je _for153_exit
6211   2BAE             _for153_block:
6212   2BAE             ; printf("%s:", lrs_1); 
6213   2BAE             ; --- START FUNCTION CALL
6214   2BAE 3B CA 6F      mov d, _lrs_1 ; $lrs_1
6215   2BB1 2A            mov b, [d]
6216   2BB2 38 00 00      mov c, 0
6217   2BB5 FD AB         swp b
6218   2BB7 D8            push b
6219   2BB8 26 D4 77      mov b, _s89 ; "%s:"
6220   2BBB FD AB         swp b
6221   2BBD D8            push b
6222   2BBE 07 78 60      call printf
6223   2BC1 51 04 00      add sp, 4
6224   2BC4             ; --- END FUNCTION CALL
6225   2BC4             ; for (j = quad_x - 1; j <= quad_x + 1; j++) { 
6226   2BC4             _for154_init:
6227   2BC4 FA FD FF      lea d, [bp + -3] ; $j
6228   2BC7 DA            push d
6229   2BC8 3B 62 6E      mov d, _quad_x ; $quad_x
6230   2BCB 2A            mov b, [d]
6231   2BCC 38 00 00      mov c, 0
6232   2BCF             ; --- START TERMS
6233   2BCF D7            push a
6234   2BD0 11            mov a, b
6235   2BD1 FD 2E 01 00   mov32 cb, $00000001
6235   2BD5 00 00 
6236   2BD7 60            sub a, b
6237   2BD8 27            mov b, a
6238   2BD9 E4            pop a
6239   2BDA             ; --- END TERMS
6240   2BDA E7            pop d
6241   2BDB FD 43         mov [d], b
6242   2BDD             _for154_cond:
6243   2BDD FA FD FF      lea d, [bp + -3] ; $j
6244   2BE0 2A            mov b, [d]
6245   2BE1 38 00 00      mov c, 0
6246   2BE4             ; --- START RELATIONAL
6247   2BE4 D7            push a
6248   2BE5 11            mov a, b
6249   2BE6 3B 62 6E      mov d, _quad_x ; $quad_x
6250   2BE9 2A            mov b, [d]
6251   2BEA 38 00 00      mov c, 0
6252   2BED             ; --- START TERMS
6253   2BED D7            push a
6254   2BEE 11            mov a, b
6255   2BEF FD 2E 01 00   mov32 cb, $00000001
6255   2BF3 00 00 
6256   2BF5 56            add b, a
6257   2BF6 E4            pop a
6258   2BF7             ; --- END TERMS
6259   2BF7 B0            cmp a, b
6260   2BF8 FD 74         sle ; <= (signed)
6261   2BFA E4            pop a
6262   2BFB             ; --- END RELATIONAL
6263   2BFB C0 00 00      cmp b, 0
6264   2BFE C6 16 2D      je _for154_exit
6265   2C01             _for154_block:
6266   2C01             ; putchar(' '); 
6267   2C01             ; --- START FUNCTION CALL
6268   2C01 FD 2E 20 00   mov32 cb, $00000020
6268   2C05 00 00 
6269   2C07 DD            push bl
6270   2C08 07 FA 64      call putchar
6271   2C0B 51 01 00      add sp, 1
6272   2C0E             ; --- END FUNCTION CALL
6273   2C0E             ; if (i > 0 && i <= 8 && j > 0 && j <= 8) { 
6274   2C0E             _if155_cond:
6275   2C0E FA FF FF      lea d, [bp + -1] ; $i
6276   2C11 2A            mov b, [d]
6277   2C12 38 00 00      mov c, 0
6278   2C15             ; --- START RELATIONAL
6279   2C15 D7            push a
6280   2C16 11            mov a, b
6281   2C17 FD 2E 00 00   mov32 cb, $00000000
6281   2C1B 00 00 
6282   2C1D B0            cmp a, b
6283   2C1E FD 7F         sgt ; >
6284   2C20 E4            pop a
6285   2C21             ; --- END RELATIONAL
6286   2C21             ; --- START LOGICAL AND
6287   2C21 D7            push a
6288   2C22 11            mov a, b
6289   2C23 FA FF FF      lea d, [bp + -1] ; $i
6290   2C26 2A            mov b, [d]
6291   2C27 38 00 00      mov c, 0
6292   2C2A             ; --- START RELATIONAL
6293   2C2A D7            push a
6294   2C2B 11            mov a, b
6295   2C2C FD 2E 08 00   mov32 cb, $00000008
6295   2C30 00 00 
6296   2C32 B0            cmp a, b
6297   2C33 FD 74         sle ; <= (signed)
6298   2C35 E4            pop a
6299   2C36             ; --- END RELATIONAL
6300   2C36 FD A7         sand a, b
6301   2C38 11            mov a, b
6302   2C39 FA FD FF      lea d, [bp + -3] ; $j
6303   2C3C 2A            mov b, [d]
6304   2C3D 38 00 00      mov c, 0
6305   2C40             ; --- START RELATIONAL
6306   2C40 D7            push a
6307   2C41 11            mov a, b
6308   2C42 FD 2E 00 00   mov32 cb, $00000000
6308   2C46 00 00 
6309   2C48 B0            cmp a, b
6310   2C49 FD 7F         sgt ; >
6311   2C4B E4            pop a
6312   2C4C             ; --- END RELATIONAL
6313   2C4C FD A7         sand a, b
6314   2C4E 11            mov a, b
6315   2C4F FA FD FF      lea d, [bp + -3] ; $j
6316   2C52 2A            mov b, [d]
6317   2C53 38 00 00      mov c, 0
6318   2C56             ; --- START RELATIONAL
6319   2C56 D7            push a
6320   2C57 11            mov a, b
6321   2C58 FD 2E 08 00   mov32 cb, $00000008
6321   2C5C 00 00 
6322   2C5E B0            cmp a, b
6323   2C5F FD 74         sle ; <= (signed)
6324   2C61 E4            pop a
6325   2C62             ; --- END RELATIONAL
6326   2C62 FD A7         sand a, b
6327   2C64 E4            pop a
6328   2C65             ; --- END LOGICAL AND
6329   2C65 C0 00 00      cmp b, 0
6330   2C68 C6 EB 2C      je _if155_else
6331   2C6B             _if155_TRUE:
6332   2C6B             ; map[i][j] = map[i][j] |  0x1000		/* Set if this sector was mapped */           ; 
6333   2C6B 3B AD 6D      mov d, _map_data ; $map
6334   2C6E D7            push a
6335   2C6F DA            push d
6336   2C70 FA FF FF      lea d, [bp + -1] ; $i
6337   2C73 2A            mov b, [d]
6338   2C74 38 00 00      mov c, 0
6339   2C77 E7            pop d
6340   2C78 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6341   2C7C DA            push d
6342   2C7D FA FD FF      lea d, [bp + -3] ; $j
6343   2C80 2A            mov b, [d]
6344   2C81 38 00 00      mov c, 0
6345   2C84 E7            pop d
6346   2C85 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6347   2C89 E4            pop a
6348   2C8A DA            push d
6349   2C8B 3B AD 6D      mov d, _map_data ; $map
6350   2C8E D7            push a
6351   2C8F DA            push d
6352   2C90 FA FF FF      lea d, [bp + -1] ; $i
6353   2C93 2A            mov b, [d]
6354   2C94 38 00 00      mov c, 0
6355   2C97 E7            pop d
6356   2C98 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6357   2C9C DA            push d
6358   2C9D FA FD FF      lea d, [bp + -3] ; $j
6359   2CA0 2A            mov b, [d]
6360   2CA1 38 00 00      mov c, 0
6361   2CA4 E7            pop d
6362   2CA5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6363   2CA9 E4            pop a
6364   2CAA 2A            mov b, [d]
6365   2CAB 38 00 00      mov c, 0
6366   2CAE D7            push a
6367   2CAF 11            mov a, b
6368   2CB0 FD 2E 00 10   mov32 cb, $00001000
6368   2CB4 00 00 
6369   2CB6 FD 70         or b, a ; |
6370   2CB8 E4            pop a
6371   2CB9 E7            pop d
6372   2CBA FD 43         mov [d], b
6373   2CBC             ; putbcd(map[i][j]); 
6374   2CBC             ; --- START FUNCTION CALL
6375   2CBC 3B AD 6D      mov d, _map_data ; $map
6376   2CBF D7            push a
6377   2CC0 DA            push d
6378   2CC1 FA FF FF      lea d, [bp + -1] ; $i
6379   2CC4 2A            mov b, [d]
6380   2CC5 38 00 00      mov c, 0
6381   2CC8 E7            pop d
6382   2CC9 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6383   2CCD DA            push d
6384   2CCE FA FD FF      lea d, [bp + -3] ; $j
6385   2CD1 2A            mov b, [d]
6386   2CD2 38 00 00      mov c, 0
6387   2CD5 E7            pop d
6388   2CD6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6389   2CDA E4            pop a
6390   2CDB 2A            mov b, [d]
6391   2CDC 38 00 00      mov c, 0
6392   2CDF FD AB         swp b
6393   2CE1 D8            push b
6394   2CE2 07 E7 2A      call putbcd
6395   2CE5 51 02 00      add sp, 2
6396   2CE8             ; --- END FUNCTION CALL
6397   2CE8 0A F7 2C      jmp _if155_exit
6398   2CEB             _if155_else:
6399   2CEB             ; puts("***"); 
6400   2CEB             ; --- START FUNCTION CALL
6401   2CEB 26 D8 77      mov b, _s90 ; "***"
6402   2CEE FD AB         swp b
6403   2CF0 D8            push b
6404   2CF1 07 85 69      call puts
6405   2CF4 51 02 00      add sp, 2
6406   2CF7             ; --- END FUNCTION CALL
6407   2CF7             _if155_exit:
6408   2CF7             ; puts(" :"); 
6409   2CF7             ; --- START FUNCTION CALL
6410   2CF7 26 DC 77      mov b, _s91 ; " :"
6411   2CFA FD AB         swp b
6412   2CFC D8            push b
6413   2CFD 07 85 69      call puts
6414   2D00 51 02 00      add sp, 2
6415   2D03             ; --- END FUNCTION CALL
6416   2D03             _for154_update:
6417   2D03 FA FD FF      lea d, [bp + -3] ; $j
6418   2D06 2A            mov b, [d]
6419   2D07 38 00 00      mov c, 0
6420   2D0A 11            mov a, b
6421   2D0B FD 77         inc b
6422   2D0D FA FD FF      lea d, [bp + -3] ; $j
6423   2D10 FD 43         mov [d], b
6424   2D12 27            mov b, a
6425   2D13 0A DD 2B      jmp _for154_cond
6426   2D16             _for154_exit:
6427   2D16             ; putchar('\n'); 
6428   2D16             ; --- START FUNCTION CALL
6429   2D16 FD 2E 0A 00   mov32 cb, $0000000a
6429   2D1A 00 00 
6430   2D1C DD            push bl
6431   2D1D 07 FA 64      call putchar
6432   2D20 51 01 00      add sp, 1
6433   2D23             ; --- END FUNCTION CALL
6434   2D23             _for153_update:
6435   2D23 FA FF FF      lea d, [bp + -1] ; $i
6436   2D26 2A            mov b, [d]
6437   2D27 38 00 00      mov c, 0
6438   2D2A 11            mov a, b
6439   2D2B FD 77         inc b
6440   2D2D FA FF FF      lea d, [bp + -1] ; $i
6441   2D30 FD 43         mov [d], b
6442   2D32 27            mov b, a
6443   2D33 0A 8A 2B      jmp _for153_cond
6444   2D36             _for153_exit:
6445   2D36             ; printf("%s\n", lrs_1); 
6446   2D36             ; --- START FUNCTION CALL
6447   2D36 3B CA 6F      mov d, _lrs_1 ; $lrs_1
6448   2D39 2A            mov b, [d]
6449   2D3A 38 00 00      mov c, 0
6450   2D3D FD AB         swp b
6451   2D3F D8            push b
6452   2D40 26 DF 77      mov b, _s92 ; "%s\n"
6453   2D43 FD AB         swp b
6454   2D45 D8            push b
6455   2D46 07 78 60      call printf
6456   2D49 51 04 00      add sp, 4
6457   2D4C             ; --- END FUNCTION CALL
6458   2D4C F9            leave
6459   2D4D 09            ret
6460   2D4E             
6461   2D4E             no_klingon:
6462   2D4E F8 00 00      enter 0 ; (push bp; mov bp, sp)
6463   2D51             ; if (klingons <= 0) { 
6464   2D51             _if156_cond:
6465   2D51 3B 5B 6E      mov d, _klingons ; $klingons
6466   2D54 32            mov bl, [d]
6467   2D55 A7 00         mov bh, 0
6468   2D57 38 00 00      mov c, 0
6469   2D5A             ; --- START RELATIONAL
6470   2D5A D7            push a
6471   2D5B 11            mov a, b
6472   2D5C FD 2E 00 00   mov32 cb, $00000000
6472   2D60 00 00 
6473   2D62 B0            cmp a, b
6474   2D63 FD 76         sleu ; <= (unsigned)
6475   2D65 E4            pop a
6476   2D66             ; --- END RELATIONAL
6477   2D66 C0 00 00      cmp b, 0
6478   2D69 C6 83 2D      je _if156_exit
6479   2D6C             _if156_TRUE:
6480   2D6C             ; puts("Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"); 
6481   2D6C             ; --- START FUNCTION CALL
6482   2D6C 26 E3 77      mov b, _s93 ; "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"
6483   2D6F FD AB         swp b
6484   2D71 D8            push b
6485   2D72 07 85 69      call puts
6486   2D75 51 02 00      add sp, 2
6487   2D78             ; --- END FUNCTION CALL
6488   2D78             ; return 1; 
6489   2D78 FD 2E 01 00   mov32 cb, $00000001
6489   2D7C 00 00 
6490   2D7E F9            leave
6491   2D7F 09            ret
6492   2D80 0A 83 2D      jmp _if156_exit
6493   2D83             _if156_exit:
6494   2D83             ; return 0; 
6495   2D83 FD 2E 00 00   mov32 cb, $00000000
6495   2D87 00 00 
6496   2D89 F9            leave
6497   2D8A 09            ret
6498   2D8B             
6499   2D8B             wipe_klingon:
6500   2D8B F8 00 00      enter 0 ; (push bp; mov bp, sp)
6501   2D8E             ; quad[k->y+-1][k->x+-1] = 		0       ; 
6502   2D8E 3B 85 6E      mov d, _quad_data ; $quad
6503   2D91 D7            push a
6504   2D92 DA            push d
6505   2D93 FA 05 00      lea d, [bp + 5] ; $k
6506   2D96 FD 2A         mov d, [d]
6507   2D98 58 00 00      add d, 0
6508   2D9B 32            mov bl, [d]
6509   2D9C A7 00         mov bh, 0
6510   2D9E 38 00 00      mov c, 0
6511   2DA1             ; --- START TERMS
6512   2DA1 D7            push a
6513   2DA2 11            mov a, b
6514   2DA3 FD 2E FF FF   mov32 cb, $ffffffff
6514   2DA7 FF FF 
6515   2DA9 56            add b, a
6516   2DAA E4            pop a
6517   2DAB             ; --- END TERMS
6518   2DAB E7            pop d
6519   2DAC FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
6520   2DB0 DA            push d
6521   2DB1 FA 05 00      lea d, [bp + 5] ; $k
6522   2DB4 FD 2A         mov d, [d]
6523   2DB6 58 01 00      add d, 1
6524   2DB9 32            mov bl, [d]
6525   2DBA A7 00         mov bh, 0
6526   2DBC 38 00 00      mov c, 0
6527   2DBF             ; --- START TERMS
6528   2DBF D7            push a
6529   2DC0 11            mov a, b
6530   2DC1 FD 2E FF FF   mov32 cb, $ffffffff
6530   2DC5 FF FF 
6531   2DC7 56            add b, a
6532   2DC8 E4            pop a
6533   2DC9             ; --- END TERMS
6534   2DC9 E7            pop d
6535   2DCA 5A            add d, b
6536   2DCB E4            pop a
6537   2DCC DA            push d
6538   2DCD FD 2E 00 00   mov32 cb, $00000000
6538   2DD1 00 00 
6539   2DD3 E7            pop d
6540   2DD4 FD 3E         mov [d], bl
6541   2DD6 F9            leave
6542   2DD7 09            ret
6543   2DD8             
6544   2DD8             phaser_control:
6545   2DD8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6546   2DDB             ; int i; 
6547   2DDB 52 02 00      sub sp, 2
6548   2DDE             ; long int        phaser_energy; 
6549   2DDE 52 04 00      sub sp, 4
6550   2DE1             ; long unsigned int         h1; 
6551   2DE1 52 04 00      sub sp, 4
6552   2DE4             ; int h; 
6553   2DE4 52 02 00      sub sp, 2
6554   2DE7             ; struct klingon *k; 
6555   2DE7 52 02 00      sub sp, 2
6556   2DEA             ; k = &kdata; 
6557   2DEA FA F3 FF      lea d, [bp + -13] ; $k
6558   2DED DA            push d
6559   2DEE 3B 4F 6E      mov d, _kdata_data ; $kdata
6560   2DF1 2D            mov b, d
6561   2DF2 E7            pop d
6562   2DF3 FD 43         mov [d], b
6563   2DF5             ; if (inoperable(4)) 
6564   2DF5             _if157_cond:
6565   2DF5             ; --- START FUNCTION CALL
6566   2DF5 FD 2E 04 00   mov32 cb, $00000004
6566   2DF9 00 00 
6567   2DFB DD            push bl
6568   2DFC 07 7C 09      call inoperable
6569   2DFF 51 01 00      add sp, 1
6570   2E02             ; --- END FUNCTION CALL
6571   2E02 C0 00 00      cmp b, 0
6572   2E05 C6 0D 2E      je _if157_exit
6573   2E08             _if157_TRUE:
6574   2E08             ; return; 
6575   2E08 F9            leave
6576   2E09 09            ret
6577   2E0A 0A 0D 2E      jmp _if157_exit
6578   2E0D             _if157_exit:
6579   2E0D             ; if (no_klingon()) 
6580   2E0D             _if158_cond:
6581   2E0D             ; --- START FUNCTION CALL
6582   2E0D 07 4E 2D      call no_klingon
6583   2E10 C0 00 00      cmp b, 0
6584   2E13 C6 1B 2E      je _if158_exit
6585   2E16             _if158_TRUE:
6586   2E16             ; return; 
6587   2E16 F9            leave
6588   2E17 09            ret
6589   2E18 0A 1B 2E      jmp _if158_exit
6590   2E1B             _if158_exit:
6591   2E1B             ; if (damage[8] < 0) 
6592   2E1B             _if159_cond:
6593   2E1B 3B 6B 6E      mov d, _damage_data ; $damage
6594   2E1E D7            push a
6595   2E1F DA            push d
6596   2E20 FD 2E 08 00   mov32 cb, $00000008
6596   2E24 00 00 
6597   2E26 E7            pop d
6598   2E27 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6599   2E2B E4            pop a
6600   2E2C 2A            mov b, [d]
6601   2E2D 38 00 00      mov c, 0
6602   2E30             ; --- START RELATIONAL
6603   2E30 D7            push a
6604   2E31 11            mov a, b
6605   2E32 FD 2E 00 00   mov32 cb, $00000000
6605   2E36 00 00 
6606   2E38 B0            cmp a, b
6607   2E39 FD 73         slt ; < (signed)
6608   2E3B E4            pop a
6609   2E3C             ; --- END RELATIONAL
6610   2E3C C0 00 00      cmp b, 0
6611   2E3F C6 51 2E      je _if159_exit
6612   2E42             _if159_TRUE:
6613   2E42             ; puts("Computer failure hampers accuracy."); 
6614   2E42             ; --- START FUNCTION CALL
6615   2E42 26 34 78      mov b, _s94 ; "Computer failure hampers accuracy."
6616   2E45 FD AB         swp b
6617   2E47 D8            push b
6618   2E48 07 85 69      call puts
6619   2E4B 51 02 00      add sp, 2
6620   2E4E             ; --- END FUNCTION CALL
6621   2E4E 0A 51 2E      jmp _if159_exit
6622   2E51             _if159_exit:
6623   2E51             ; printf("Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", energy); 
6624   2E51             ; --- START FUNCTION CALL
6625   2E51 3B A9 6D      mov d, _energy ; $energy
6626   2E54 2A            mov b, [d]
6627   2E55 38 00 00      mov c, 0
6628   2E58 FD AB         swp b
6629   2E5A D8            push b
6630   2E5B 26 57 78      mov b, _s95 ; "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: "
6631   2E5E FD AB         swp b
6632   2E60 D8            push b
6633   2E61 07 78 60      call printf
6634   2E64 51 04 00      add sp, 4
6635   2E67             ; --- END FUNCTION CALL
6636   2E67             ; phaser_energy = input_int(); 
6637   2E67 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6638   2E6A DA            push d
6639   2E6B             ; --- START FUNCTION CALL
6640   2E6B 07 BD 08      call input_int
6641   2E6E E7            pop d
6642   2E6F FD 43         mov [d], b
6643   2E71 26 00 00      mov b, 0
6644   2E74 FD 44 02 00   mov [d + 2], b
6645   2E78             ; if (phaser_energy <= 0) 
6646   2E78             _if160_cond:
6647   2E78 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6648   2E7B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6649   2E7E FD 39         mov c, b ; And place it into C
6650   2E80 2A            mov b, [d] ; Lower Word in B
6651   2E81             ; --- START RELATIONAL
6652   2E81 D7            push a
6653   2E82 FD D8         push g
6654   2E84 11            mov a, b
6655   2E85 FD 7A         mov g, c
6656   2E87 FD 2E 00 00   mov32 cb, $00000000
6656   2E8B 00 00 
6657   2E8D FD AF         cmp32 ga, cb
6658   2E8F FD 74         sle
6659   2E91 FD F1         pop g
6660   2E93 E4            pop a
6661   2E94             ; --- END RELATIONAL
6662   2E94 C0 00 00      cmp b, 0
6663   2E97 C6 9F 2E      je _if160_exit
6664   2E9A             _if160_TRUE:
6665   2E9A             ; return; 
6666   2E9A F9            leave
6667   2E9B 09            ret
6668   2E9C 0A 9F 2E      jmp _if160_exit
6669   2E9F             _if160_exit:
6670   2E9F             ; if (energy - phaser_energy < 0) { 
6671   2E9F             _if161_cond:
6672   2E9F 3B A9 6D      mov d, _energy ; $energy
6673   2EA2 2A            mov b, [d]
6674   2EA3 38 00 00      mov c, 0
6675   2EA6             ; --- START TERMS
6676   2EA6 D7            push a
6677   2EA7 11            mov a, b
6678   2EA8 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6679   2EAB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6680   2EAE FD 39         mov c, b ; And place it into C
6681   2EB0 2A            mov b, [d] ; Lower Word in B
6682   2EB1 FD 1C         sub32 ga, cb
6683   2EB3 27            mov b, a
6684   2EB4 FD 38         mov c, g
6685   2EB6 E4            pop a
6686   2EB7             ; --- END TERMS
6687   2EB7             ; --- START RELATIONAL
6688   2EB7 D7            push a
6689   2EB8 FD D8         push g
6690   2EBA 11            mov a, b
6691   2EBB FD 7A         mov g, c
6692   2EBD FD 2E 00 00   mov32 cb, $00000000
6692   2EC1 00 00 
6693   2EC3 FD AF         cmp32 ga, cb
6694   2EC5 FD 73         slt ; <
6695   2EC7 FD F1         pop g
6696   2EC9 E4            pop a
6697   2ECA             ; --- END RELATIONAL
6698   2ECA C0 00 00      cmp b, 0
6699   2ECD C6 E1 2E      je _if161_exit
6700   2ED0             _if161_TRUE:
6701   2ED0             ; puts("Not enough energy available.\n"); 
6702   2ED0             ; --- START FUNCTION CALL
6703   2ED0 26 AA 78      mov b, _s96 ; "Not enough energy available.\n"
6704   2ED3 FD AB         swp b
6705   2ED5 D8            push b
6706   2ED6 07 85 69      call puts
6707   2ED9 51 02 00      add sp, 2
6708   2EDC             ; --- END FUNCTION CALL
6709   2EDC             ; return; 
6710   2EDC F9            leave
6711   2EDD 09            ret
6712   2EDE 0A E1 2E      jmp _if161_exit
6713   2EE1             _if161_exit:
6714   2EE1             ; energy = energy -  phaser_energy; 
6715   2EE1 3B A9 6D      mov d, _energy ; $energy
6716   2EE4 DA            push d
6717   2EE5 3B A9 6D      mov d, _energy ; $energy
6718   2EE8 2A            mov b, [d]
6719   2EE9 38 00 00      mov c, 0
6720   2EEC             ; --- START TERMS
6721   2EEC D7            push a
6722   2EED 11            mov a, b
6723   2EEE FA FB FF      lea d, [bp + -5] ; $phaser_energy
6724   2EF1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6725   2EF4 FD 39         mov c, b ; And place it into C
6726   2EF6 2A            mov b, [d] ; Lower Word in B
6727   2EF7 FD 1C         sub32 ga, cb
6728   2EF9 27            mov b, a
6729   2EFA FD 38         mov c, g
6730   2EFC E4            pop a
6731   2EFD             ; --- END TERMS
6732   2EFD E7            pop d
6733   2EFE FD 43         mov [d], b
6734   2F00             ; if (damage[8] < 0) 
6735   2F00             _if162_cond:
6736   2F00 3B 6B 6E      mov d, _damage_data ; $damage
6737   2F03 D7            push a
6738   2F04 DA            push d
6739   2F05 FD 2E 08 00   mov32 cb, $00000008
6739   2F09 00 00 
6740   2F0B E7            pop d
6741   2F0C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6742   2F10 E4            pop a
6743   2F11 2A            mov b, [d]
6744   2F12 38 00 00      mov c, 0
6745   2F15             ; --- START RELATIONAL
6746   2F15 D7            push a
6747   2F16 11            mov a, b
6748   2F17 FD 2E 00 00   mov32 cb, $00000000
6748   2F1B 00 00 
6749   2F1D B0            cmp a, b
6750   2F1E FD 73         slt ; < (signed)
6751   2F20 E4            pop a
6752   2F21             ; --- END RELATIONAL
6753   2F21 C0 00 00      cmp b, 0
6754   2F24 C6 8D 2F      je _if162_else
6755   2F27             _if162_TRUE:
6756   2F27             ; phaser_energy =phaser_energy * get_rand(100); 
6757   2F27 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6758   2F2A DA            push d
6759   2F2B FA FB FF      lea d, [bp + -5] ; $phaser_energy
6760   2F2E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6761   2F31 FD 39         mov c, b ; And place it into C
6762   2F33 2A            mov b, [d] ; Lower Word in B
6763   2F34             ; --- START FACTORS
6764   2F34 D7            push a
6765   2F35 FD D8         push g
6766   2F37 11            mov a, b
6767   2F38 FD 7A         mov g, c
6768   2F3A             ; --- START FUNCTION CALL
6769   2F3A FD 2E 64 00   mov32 cb, $00000064
6769   2F3E 00 00 
6770   2F40 FD AB         swp b
6771   2F42 D8            push b
6772   2F43 07 FF 04      call get_rand
6773   2F46 51 02 00      add sp, 2
6774   2F49             ; --- END FUNCTION CALL
6775   2F49 D7            push a     ; save left operand
6776   2F4A 8E            xor a, b   ; xor sign bits
6777   2F4B FD AA         swp a      ; swap bytes
6778   2F4D 83            mov cl, al ; save result of xor into 'dl'
6779   2F4E E4            pop a      ; restore left side operator
6780   2F4F DF            push cl    ; save result of xor above
6781   2F50 FD AA         swp a  
6782   2F52 93 80         test al, $80  
6783   2F54 FD AA         swp a  
6784   2F56 C6 5B 2F      jz skip_invert_a_164  
6785   2F59 FD 95         neg a 
6786   2F5B             skip_invert_a_164:   
6787   2F5B FD AB         swp b
6788   2F5D FD 93 80      test bl, $80  
6789   2F60 FD AB         swp b
6790   2F62 C6 67 2F      jz skip_invert_b_164  
6791   2F65 FD 97         neg b 
6792   2F67             skip_invert_b_164:   
6793   2F67 AC            mul a, b ; *
6794   2F68 FD 78         mov g, a
6795   2F6A 11            mov a, b
6796   2F6B EA            pop bl
6797   2F6C FD 93 80      test bl, $80
6798   2F6F C6 7C 2F      jz _same_signs_164
6799   2F72 2F            mov bl, al
6800   2F73 95            not a
6801   2F74 FD 97         neg b
6802   2F76 5B 00 00      adc a, 0
6803   2F79 FD 78         mov g, a
6804   2F7B 11            mov a, b
6805   2F7C             _same_signs_164:
6806   2F7C FD 38         mov c, g
6807   2F7E 27            mov b, a
6808   2F7F FD F1         pop g
6809   2F81 E4            pop a
6810   2F82             ; --- END FACTORS
6811   2F82 E7            pop d
6812   2F83 FD 43         mov [d], b
6813   2F85 28            mov b, c
6814   2F86 FD 44 02 00   mov [d + 2], b
6815   2F8A 0A E7 2F      jmp _if162_exit
6816   2F8D             _if162_else:
6817   2F8D             ; phaser_energy = phaser_energy* 100; 
6818   2F8D FA FB FF      lea d, [bp + -5] ; $phaser_energy
6819   2F90 DA            push d
6820   2F91 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6821   2F94 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6822   2F97 FD 39         mov c, b ; And place it into C
6823   2F99 2A            mov b, [d] ; Lower Word in B
6824   2F9A             ; --- START FACTORS
6825   2F9A D7            push a
6826   2F9B FD D8         push g
6827   2F9D 11            mov a, b
6828   2F9E FD 7A         mov g, c
6829   2FA0 FD 2E 64 00   mov32 cb, $00000064
6829   2FA4 00 00 
6830   2FA6 D7            push a     ; save left operand
6831   2FA7 8E            xor a, b   ; xor sign bits
6832   2FA8 FD AA         swp a      ; swap bytes
6833   2FAA 83            mov cl, al ; save result of xor into 'dl'
6834   2FAB E4            pop a      ; restore left side operator
6835   2FAC DF            push cl    ; save result of xor above
6836   2FAD FD AA         swp a  
6837   2FAF 93 80         test al, $80  
6838   2FB1 FD AA         swp a  
6839   2FB3 C6 B8 2F      jz skip_invert_a_166  
6840   2FB6 FD 95         neg a 
6841   2FB8             skip_invert_a_166:   
6842   2FB8 FD AB         swp b
6843   2FBA FD 93 80      test bl, $80  
6844   2FBD FD AB         swp b
6845   2FBF C6 C4 2F      jz skip_invert_b_166  
6846   2FC2 FD 97         neg b 
6847   2FC4             skip_invert_b_166:   
6848   2FC4 AC            mul a, b ; *
6849   2FC5 FD 78         mov g, a
6850   2FC7 11            mov a, b
6851   2FC8 EA            pop bl
6852   2FC9 FD 93 80      test bl, $80
6853   2FCC C6 D9 2F      jz _same_signs_166
6854   2FCF 2F            mov bl, al
6855   2FD0 95            not a
6856   2FD1 FD 97         neg b
6857   2FD3 5B 00 00      adc a, 0
6858   2FD6 FD 78         mov g, a
6859   2FD8 11            mov a, b
6860   2FD9             _same_signs_166:
6861   2FD9 FD 38         mov c, g
6862   2FDB 27            mov b, a
6863   2FDC FD F1         pop g
6864   2FDE E4            pop a
6865   2FDF             ; --- END FACTORS
6866   2FDF E7            pop d
6867   2FE0 FD 43         mov [d], b
6868   2FE2 28            mov b, c
6869   2FE3 FD 44 02 00   mov [d + 2], b
6870   2FE7             _if162_exit:
6871   2FE7             ; h1 = phaser_energy / klingons; 
6872   2FE7 FA F7 FF      lea d, [bp + -9] ; $h1
6873   2FEA DA            push d
6874   2FEB FA FB FF      lea d, [bp + -5] ; $phaser_energy
6875   2FEE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6876   2FF1 FD 39         mov c, b ; And place it into C
6877   2FF3 2A            mov b, [d] ; Lower Word in B
6878   2FF4             ; --- START FACTORS
6879   2FF4 D7            push a
6880   2FF5 FD D8         push g
6881   2FF7 11            mov a, b
6882   2FF8 FD 7A         mov g, c
6883   2FFA 3B 5B 6E      mov d, _klingons ; $klingons
6884   2FFD 32            mov bl, [d]
6885   2FFE A7 00         mov bh, 0
6886   3000 38 00 00      mov c, 0
6887   3003 FD D8         push g ; save 'g' as the div instruction uses it
6888   3005 AE            div a, b ; /, a: quotient, b: remainder
6889   3006 FD F1         pop g
6890   3008 FD 38         mov c, g
6891   300A 27            mov b, a
6892   300B FD F1         pop g
6893   300D E4            pop a
6894   300E             ; --- END FACTORS
6895   300E E7            pop d
6896   300F FD 43         mov [d], b
6897   3011 28            mov b, c
6898   3012 FD 44 02 00   mov [d + 2], b
6899   3016             ; for (i = 0; i <= 2; i++) { 
6900   3016             _for169_init:
6901   3016 FA FF FF      lea d, [bp + -1] ; $i
6902   3019 DA            push d
6903   301A FD 2E 00 00   mov32 cb, $00000000
6903   301E 00 00 
6904   3020 E7            pop d
6905   3021 FD 43         mov [d], b
6906   3023             _for169_cond:
6907   3023 FA FF FF      lea d, [bp + -1] ; $i
6908   3026 2A            mov b, [d]
6909   3027 38 00 00      mov c, 0
6910   302A             ; --- START RELATIONAL
6911   302A D7            push a
6912   302B 11            mov a, b
6913   302C FD 2E 02 00   mov32 cb, $00000002
6913   3030 00 00 
6914   3032 B0            cmp a, b
6915   3033 FD 74         sle ; <= (signed)
6916   3035 E4            pop a
6917   3036             ; --- END RELATIONAL
6918   3036 C0 00 00      cmp b, 0
6919   3039 C6 38 33      je _for169_exit
6920   303C             _for169_block:
6921   303C             ; if (k->energy > 0) { 
6922   303C             _if170_cond:
6923   303C FA F3 FF      lea d, [bp + -13] ; $k
6924   303F FD 2A         mov d, [d]
6925   3041 58 02 00      add d, 2
6926   3044 2A            mov b, [d]
6927   3045 38 00 00      mov c, 0
6928   3048             ; --- START RELATIONAL
6929   3048 D7            push a
6930   3049 11            mov a, b
6931   304A FD 2E 00 00   mov32 cb, $00000000
6931   304E 00 00 
6932   3050 B0            cmp a, b
6933   3051 FD 7F         sgt ; >
6934   3053 E4            pop a
6935   3054             ; --- END RELATIONAL
6936   3054 C0 00 00      cmp b, 0
6937   3057 C6 13 33      je _if170_exit
6938   305A             _if170_TRUE:
6939   305A             ; h1 = h1 * (get_rand(100) + 200); 
6940   305A FA F7 FF      lea d, [bp + -9] ; $h1
6941   305D DA            push d
6942   305E FA F7 FF      lea d, [bp + -9] ; $h1
6943   3061 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6944   3064 FD 39         mov c, b ; And place it into C
6945   3066 2A            mov b, [d] ; Lower Word in B
6946   3067             ; --- START FACTORS
6947   3067 D7            push a
6948   3068 FD D8         push g
6949   306A 11            mov a, b
6950   306B FD 7A         mov g, c
6951   306D             ; --- START FUNCTION CALL
6952   306D FD 2E 64 00   mov32 cb, $00000064
6952   3071 00 00 
6953   3073 FD AB         swp b
6954   3075 D8            push b
6955   3076 07 FF 04      call get_rand
6956   3079 51 02 00      add sp, 2
6957   307C             ; --- END FUNCTION CALL
6958   307C             ; --- START TERMS
6959   307C D7            push a
6960   307D 11            mov a, b
6961   307E FD 2E C8 00   mov32 cb, $000000c8
6961   3082 00 00 
6962   3084 56            add b, a
6963   3085 E4            pop a
6964   3086             ; --- END TERMS
6965   3086 D7            push a     ; save left operand
6966   3087 8E            xor a, b   ; xor sign bits
6967   3088 FD AA         swp a      ; swap bytes
6968   308A 83            mov cl, al ; save result of xor into 'dl'
6969   308B E4            pop a      ; restore left side operator
6970   308C DF            push cl    ; save result of xor above
6971   308D FD AA         swp a  
6972   308F 93 80         test al, $80  
6973   3091 FD AA         swp a  
6974   3093 C6 98 30      jz skip_invert_a_172  
6975   3096 FD 95         neg a 
6976   3098             skip_invert_a_172:   
6977   3098 FD AB         swp b
6978   309A FD 93 80      test bl, $80  
6979   309D FD AB         swp b
6980   309F C6 A4 30      jz skip_invert_b_172  
6981   30A2 FD 97         neg b 
6982   30A4             skip_invert_b_172:   
6983   30A4 AC            mul a, b ; *
6984   30A5 FD 78         mov g, a
6985   30A7 11            mov a, b
6986   30A8 EA            pop bl
6987   30A9 FD 93 80      test bl, $80
6988   30AC C6 B9 30      jz _same_signs_172
6989   30AF 2F            mov bl, al
6990   30B0 95            not a
6991   30B1 FD 97         neg b
6992   30B3 5B 00 00      adc a, 0
6993   30B6 FD 78         mov g, a
6994   30B8 11            mov a, b
6995   30B9             _same_signs_172:
6996   30B9 FD 38         mov c, g
6997   30BB 27            mov b, a
6998   30BC FD F1         pop g
6999   30BE E4            pop a
7000   30BF             ; --- END FACTORS
7001   30BF E7            pop d
7002   30C0 FD 43         mov [d], b
7003   30C2 28            mov b, c
7004   30C3 FD 44 02 00   mov [d + 2], b
7005   30C7             ; h1 =h1/ distance_to(k); 
7006   30C7 FA F7 FF      lea d, [bp + -9] ; $h1
7007   30CA DA            push d
7008   30CB FA F7 FF      lea d, [bp + -9] ; $h1
7009   30CE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7010   30D1 FD 39         mov c, b ; And place it into C
7011   30D3 2A            mov b, [d] ; Lower Word in B
7012   30D4             ; --- START FACTORS
7013   30D4 D7            push a
7014   30D5 FD D8         push g
7015   30D7 11            mov a, b
7016   30D8 FD 7A         mov g, c
7017   30DA             ; --- START FUNCTION CALL
7018   30DA FA F3 FF      lea d, [bp + -13] ; $k
7019   30DD 2A            mov b, [d]
7020   30DE 38 00 00      mov c, 0
7021   30E1 FD AB         swp b
7022   30E3 D8            push b
7023   30E4 07 57 5D      call distance_to
7024   30E7 51 02 00      add sp, 2
7025   30EA             ; --- END FUNCTION CALL
7026   30EA FD D8         push g ; save 'g' as the div instruction uses it
7027   30EC AE            div a, b ; /, a: quotient, b: remainder
7028   30ED FD F1         pop g
7029   30EF FD 38         mov c, g
7030   30F1 27            mov b, a
7031   30F2 FD F1         pop g
7032   30F4 E4            pop a
7033   30F5             ; --- END FACTORS
7034   30F5 E7            pop d
7035   30F6 FD 43         mov [d], b
7036   30F8 28            mov b, c
7037   30F9 FD 44 02 00   mov [d + 2], b
7038   30FD             ; if (h1 <= 15 * k->energy) {	/* was 0.15 */ 
7039   30FD             _if175_cond:
7040   30FD FA F7 FF      lea d, [bp + -9] ; $h1
7041   3100 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7042   3103 FD 39         mov c, b ; And place it into C
7043   3105 2A            mov b, [d] ; Lower Word in B
7044   3106             ; --- START RELATIONAL
7045   3106 D7            push a
7046   3107 FD D8         push g
7047   3109 11            mov a, b
7048   310A FD 7A         mov g, c
7049   310C FD 2E 0F 00   mov32 cb, $0000000f
7049   3110 00 00 
7050   3112             ; --- START FACTORS
7051   3112 D7            push a
7052   3113 FD D8         push g
7053   3115 11            mov a, b
7054   3116 FD 7A         mov g, c
7055   3118 FA F3 FF      lea d, [bp + -13] ; $k
7056   311B FD 2A         mov d, [d]
7057   311D 58 02 00      add d, 2
7058   3120 2A            mov b, [d]
7059   3121 38 00 00      mov c, 0
7060   3124 D7            push a     ; save left operand
7061   3125 8E            xor a, b   ; xor sign bits
7062   3126 FD AA         swp a      ; swap bytes
7063   3128 83            mov cl, al ; save result of xor into 'dl'
7064   3129 E4            pop a      ; restore left side operator
7065   312A DF            push cl    ; save result of xor above
7066   312B FD AA         swp a  
7067   312D 93 80         test al, $80  
7068   312F FD AA         swp a  
7069   3131 C6 36 31      jz skip_invert_a_177  
7070   3134 FD 95         neg a 
7071   3136             skip_invert_a_177:   
7072   3136 FD AB         swp b
7073   3138 FD 93 80      test bl, $80  
7074   313B FD AB         swp b
7075   313D C6 42 31      jz skip_invert_b_177  
7076   3140 FD 97         neg b 
7077   3142             skip_invert_b_177:   
7078   3142 AC            mul a, b ; *
7079   3143 FD 78         mov g, a
7080   3145 11            mov a, b
7081   3146 EA            pop bl
7082   3147 FD 93 80      test bl, $80
7083   314A C6 57 31      jz _same_signs_177
7084   314D 2F            mov bl, al
7085   314E 95            not a
7086   314F FD 97         neg b
7087   3151 5B 00 00      adc a, 0
7088   3154 FD 78         mov g, a
7089   3156 11            mov a, b
7090   3157             _same_signs_177:
7091   3157 FD 38         mov c, g
7092   3159 27            mov b, a
7093   315A FD F1         pop g
7094   315C E4            pop a
7095   315D             ; --- END FACTORS
7096   315D FD AF         cmp32 ga, cb
7097   315F FD 76         sleu
7098   3161 FD F1         pop g
7099   3163 E4            pop a
7100   3164             ; --- END RELATIONAL
7101   3164 C0 00 00      cmp b, 0
7102   3167 C6 9B 31      je _if175_else
7103   316A             _if175_TRUE:
7104   316A             ; printf("Sensors show no damage to enemy at %d, %d\n\n", k->y, k->x); 
7105   316A             ; --- START FUNCTION CALL
7106   316A FA F3 FF      lea d, [bp + -13] ; $k
7107   316D FD 2A         mov d, [d]
7108   316F 58 01 00      add d, 1
7109   3172 32            mov bl, [d]
7110   3173 A7 00         mov bh, 0
7111   3175 38 00 00      mov c, 0
7112   3178 FD AB         swp b
7113   317A D8            push b
7114   317B FA F3 FF      lea d, [bp + -13] ; $k
7115   317E FD 2A         mov d, [d]
7116   3180 58 00 00      add d, 0
7117   3183 32            mov bl, [d]
7118   3184 A7 00         mov bh, 0
7119   3186 38 00 00      mov c, 0
7120   3189 FD AB         swp b
7121   318B D8            push b
7122   318C 26 C8 78      mov b, _s97 ; "Sensors show no damage to enemy at %d, %d\n\n"
7123   318F FD AB         swp b
7124   3191 D8            push b
7125   3192 07 78 60      call printf
7126   3195 51 04 00      add sp, 4
7127   3198             ; --- END FUNCTION CALL
7128   3198 0A 10 33      jmp _if175_exit
7129   319B             _if175_else:
7130   319B             ; h = FROM_FIXED00(h1); 
7131   319B FA F5 FF      lea d, [bp + -11] ; $h
7132   319E DA            push d
7133   319F             ; --- START FUNCTION CALL
7134   319F FA F7 FF      lea d, [bp + -9] ; $h1
7135   31A2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7136   31A5 FD 39         mov c, b ; And place it into C
7137   31A7 2A            mov b, [d] ; Lower Word in B
7138   31A8 FD AB         swp b
7139   31AA D8            push b
7140   31AB 07 DC 04      call FROM_FIXED00
7141   31AE 51 02 00      add sp, 2
7142   31B1             ; --- END FUNCTION CALL
7143   31B1 E7            pop d
7144   31B2 FD 43         mov [d], b
7145   31B4             ; k->energy = k->energy - h; 
7146   31B4 FA F3 FF      lea d, [bp + -13] ; $k
7147   31B7 FD 2A         mov d, [d]
7148   31B9 58 02 00      add d, 2
7149   31BC DA            push d
7150   31BD FA F3 FF      lea d, [bp + -13] ; $k
7151   31C0 FD 2A         mov d, [d]
7152   31C2 58 02 00      add d, 2
7153   31C5 2A            mov b, [d]
7154   31C6 38 00 00      mov c, 0
7155   31C9             ; --- START TERMS
7156   31C9 D7            push a
7157   31CA 11            mov a, b
7158   31CB FA F5 FF      lea d, [bp + -11] ; $h
7159   31CE 2A            mov b, [d]
7160   31CF 38 00 00      mov c, 0
7161   31D2 60            sub a, b
7162   31D3 27            mov b, a
7163   31D4 E4            pop a
7164   31D5             ; --- END TERMS
7165   31D5 E7            pop d
7166   31D6 FD 43         mov [d], b
7167   31D8             ; printf("%d unit hit on Klingon at sector %d, %d\n", 
7168   31D8             ; --- START FUNCTION CALL
7169   31D8 FA F3 FF      lea d, [bp + -13] ; $k
7170   31DB FD 2A         mov d, [d]
7171   31DD 58 01 00      add d, 1
7172   31E0 32            mov bl, [d]
7173   31E1 A7 00         mov bh, 0
7174   31E3 38 00 00      mov c, 0
7175   31E6 FD AB         swp b
7176   31E8 D8            push b
7177   31E9 FA F3 FF      lea d, [bp + -13] ; $k
7178   31EC FD 2A         mov d, [d]
7179   31EE 58 00 00      add d, 0
7180   31F1 32            mov bl, [d]
7181   31F2 A7 00         mov bh, 0
7182   31F4 38 00 00      mov c, 0
7183   31F7 FD AB         swp b
7184   31F9 D8            push b
7185   31FA FA F5 FF      lea d, [bp + -11] ; $h
7186   31FD 2A            mov b, [d]
7187   31FE 38 00 00      mov c, 0
7188   3201 FD AB         swp b
7189   3203 D8            push b
7190   3204 26 F4 78      mov b, _s98 ; "%d unit hit on Klingon at sector %d, %d\n"
7191   3207 FD AB         swp b
7192   3209 D8            push b
7193   320A 07 78 60      call printf
7194   320D 51 06 00      add sp, 6
7195   3210             ; --- END FUNCTION CALL
7196   3210             ; if (k->energy <= 0) { 
7197   3210             _if178_cond:
7198   3210 FA F3 FF      lea d, [bp + -13] ; $k
7199   3213 FD 2A         mov d, [d]
7200   3215 58 02 00      add d, 2
7201   3218 2A            mov b, [d]
7202   3219 38 00 00      mov c, 0
7203   321C             ; --- START RELATIONAL
7204   321C D7            push a
7205   321D 11            mov a, b
7206   321E FD 2E 00 00   mov32 cb, $00000000
7206   3222 00 00 
7207   3224 B0            cmp a, b
7208   3225 FD 74         sle ; <= (signed)
7209   3227 E4            pop a
7210   3228             ; --- END RELATIONAL
7211   3228 C0 00 00      cmp b, 0
7212   322B C6 F5 32      je _if178_else
7213   322E             _if178_TRUE:
7214   322E             ; puts("*** Klingon Destroyed ***\n"); 
7215   322E             ; --- START FUNCTION CALL
7216   322E 26 1D 79      mov b, _s99 ; "*** Klingon Destroyed ***\n"
7217   3231 FD AB         swp b
7218   3233 D8            push b
7219   3234 07 85 69      call puts
7220   3237 51 02 00      add sp, 2
7221   323A             ; --- END FUNCTION CALL
7222   323A             ; klingons--; 
7223   323A 3B 5B 6E      mov d, _klingons ; $klingons
7224   323D 32            mov bl, [d]
7225   323E A7 00         mov bh, 0
7226   3240 38 00 00      mov c, 0
7227   3243 FD 7D         dec b
7228   3245 3B 5B 6E      mov d, _klingons ; $klingons
7229   3248 FD 3E         mov [d], bl
7230   324A FD 77         inc b
7231   324C             ; klingons_left--; 
7232   324C 3B 5D 6E      mov d, _klingons_left ; $klingons_left
7233   324F 32            mov bl, [d]
7234   3250 A7 00         mov bh, 0
7235   3252 38 00 00      mov c, 0
7236   3255 FD 7D         dec b
7237   3257 3B 5D 6E      mov d, _klingons_left ; $klingons_left
7238   325A FD 3E         mov [d], bl
7239   325C FD 77         inc b
7240   325E             ; wipe_klingon(k); 
7241   325E             ; --- START FUNCTION CALL
7242   325E FA F3 FF      lea d, [bp + -13] ; $k
7243   3261 2A            mov b, [d]
7244   3262 38 00 00      mov c, 0
7245   3265 FD AB         swp b
7246   3267 D8            push b
7247   3268 07 8B 2D      call wipe_klingon
7248   326B 51 02 00      add sp, 2
7249   326E             ; --- END FUNCTION CALL
7250   326E             ; k->energy = 0; 
7251   326E FA F3 FF      lea d, [bp + -13] ; $k
7252   3271 FD 2A         mov d, [d]
7253   3273 58 02 00      add d, 2
7254   3276 DA            push d
7255   3277 FD 2E 00 00   mov32 cb, $00000000
7255   327B 00 00 
7256   327D E7            pop d
7257   327E FD 43         mov [d], b
7258   3280             ; map[quad_y][quad_x] = map[quad_y][quad_x] - 0x100; 
7259   3280 3B AD 6D      mov d, _map_data ; $map
7260   3283 D7            push a
7261   3284 DA            push d
7262   3285 3B 60 6E      mov d, _quad_y ; $quad_y
7263   3288 2A            mov b, [d]
7264   3289 38 00 00      mov c, 0
7265   328C E7            pop d
7266   328D FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
7267   3291 DA            push d
7268   3292 3B 62 6E      mov d, _quad_x ; $quad_x
7269   3295 2A            mov b, [d]
7270   3296 38 00 00      mov c, 0
7271   3299 E7            pop d
7272   329A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7273   329E E4            pop a
7274   329F DA            push d
7275   32A0 3B AD 6D      mov d, _map_data ; $map
7276   32A3 D7            push a
7277   32A4 DA            push d
7278   32A5 3B 60 6E      mov d, _quad_y ; $quad_y
7279   32A8 2A            mov b, [d]
7280   32A9 38 00 00      mov c, 0
7281   32AC E7            pop d
7282   32AD FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
7283   32B1 DA            push d
7284   32B2 3B 62 6E      mov d, _quad_x ; $quad_x
7285   32B5 2A            mov b, [d]
7286   32B6 38 00 00      mov c, 0
7287   32B9 E7            pop d
7288   32BA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7289   32BE E4            pop a
7290   32BF 2A            mov b, [d]
7291   32C0 38 00 00      mov c, 0
7292   32C3             ; --- START TERMS
7293   32C3 D7            push a
7294   32C4 11            mov a, b
7295   32C5 FD 2E 00 01   mov32 cb, $00000100
7295   32C9 00 00 
7296   32CB 60            sub a, b
7297   32CC 27            mov b, a
7298   32CD E4            pop a
7299   32CE             ; --- END TERMS
7300   32CE E7            pop d
7301   32CF FD 43         mov [d], b
7302   32D1             ; if (klingons_left <= 0) 
7303   32D1             _if179_cond:
7304   32D1 3B 5D 6E      mov d, _klingons_left ; $klingons_left
7305   32D4 32            mov bl, [d]
7306   32D5 A7 00         mov bh, 0
7307   32D7 38 00 00      mov c, 0
7308   32DA             ; --- START RELATIONAL
7309   32DA D7            push a
7310   32DB 11            mov a, b
7311   32DC FD 2E 00 00   mov32 cb, $00000000
7311   32E0 00 00 
7312   32E2 B0            cmp a, b
7313   32E3 FD 76         sleu ; <= (unsigned)
7314   32E5 E4            pop a
7315   32E6             ; --- END RELATIONAL
7316   32E6 C0 00 00      cmp b, 0
7317   32E9 C6 F2 32      je _if179_exit
7318   32EC             _if179_TRUE:
7319   32EC             ; won_game(); 
7320   32EC             ; --- START FUNCTION CALL
7321   32EC 07 29 4F      call won_game
7322   32EF 0A F2 32      jmp _if179_exit
7323   32F2             _if179_exit:
7324   32F2 0A 10 33      jmp _if178_exit
7325   32F5             _if178_else:
7326   32F5             ; printf("   (Sensors show %d units remaining.)\n\n", k->energy); 
7327   32F5             ; --- START FUNCTION CALL
7328   32F5 FA F3 FF      lea d, [bp + -13] ; $k
7329   32F8 FD 2A         mov d, [d]
7330   32FA 58 02 00      add d, 2
7331   32FD 2A            mov b, [d]
7332   32FE 38 00 00      mov c, 0
7333   3301 FD AB         swp b
7334   3303 D8            push b
7335   3304 26 38 79      mov b, _s100 ; "   (Sensors show %d units remaining.)\n\n"
7336   3307 FD AB         swp b
7337   3309 D8            push b
7338   330A 07 78 60      call printf
7339   330D 51 04 00      add sp, 4
7340   3310             ; --- END FUNCTION CALL
7341   3310             _if178_exit:
7342   3310             _if175_exit:
7343   3310 0A 13 33      jmp _if170_exit
7344   3313             _if170_exit:
7345   3313             ; k++; 
7346   3313 FA F3 FF      lea d, [bp + -13] ; $k
7347   3316 2A            mov b, [d]
7348   3317 38 00 00      mov c, 0
7349   331A 11            mov a, b
7350   331B FD 77         inc b
7351   331D FD 77         inc b
7352   331F FA F3 FF      lea d, [bp + -13] ; $k
7353   3322 FD 43         mov [d], b
7354   3324 27            mov b, a
7355   3325             _for169_update:
7356   3325 FA FF FF      lea d, [bp + -1] ; $i
7357   3328 2A            mov b, [d]
7358   3329 38 00 00      mov c, 0
7359   332C 11            mov a, b
7360   332D FD 77         inc b
7361   332F FA FF FF      lea d, [bp + -1] ; $i
7362   3332 FD 43         mov [d], b
7363   3334 27            mov b, a
7364   3335 0A 23 30      jmp _for169_cond
7365   3338             _for169_exit:
7366   3338             ; klingons_shoot(); 
7367   3338             ; --- START FUNCTION CALL
7368   3338 07 0F 51      call klingons_shoot
7369   333B F9            leave
7370   333C 09            ret
7371   333D             
7372   333D             photon_torpedoes:
7373   333D F8 00 00      enter 0 ; (push bp; mov bp, sp)
7374   3340             ; int x3, y3; 
7375   3340 52 02 00      sub sp, 2
7376   3343 52 02 00      sub sp, 2
7377   3346             ; int        c1; 
7378   3346 52 02 00      sub sp, 2
7379   3349             ; int c2, c3, c4; 
7380   3349 52 02 00      sub sp, 2
7381   334C 52 02 00      sub sp, 2
7382   334F 52 02 00      sub sp, 2
7383   3352             ; int        x, y, x1, x2; 
7384   3352 52 02 00      sub sp, 2
7385   3355 52 02 00      sub sp, 2
7386   3358 52 02 00      sub sp, 2
7387   335B 52 02 00      sub sp, 2
7388   335E             ; if (torps <= 0) { 
7389   335E             _if180_cond:
7390   335E 3B 5E 6E      mov d, _torps ; $torps
7391   3361 32            mov bl, [d]
7392   3362 A7 00         mov bh, 0
7393   3364 38 00 00      mov c, 0
7394   3367             ; --- START RELATIONAL
7395   3367 D7            push a
7396   3368 11            mov a, b
7397   3369 FD 2E 00 00   mov32 cb, $00000000
7397   336D 00 00 
7398   336F B0            cmp a, b
7399   3370 FD 76         sleu ; <= (unsigned)
7400   3372 E4            pop a
7401   3373             ; --- END RELATIONAL
7402   3373 C0 00 00      cmp b, 0
7403   3376 C6 8A 33      je _if180_exit
7404   3379             _if180_TRUE:
7405   3379             ; puts("All photon torpedoes expended"); 
7406   3379             ; --- START FUNCTION CALL
7407   3379 26 60 79      mov b, _s101 ; "All photon torpedoes expended"
7408   337C FD AB         swp b
7409   337E D8            push b
7410   337F 07 85 69      call puts
7411   3382 51 02 00      add sp, 2
7412   3385             ; --- END FUNCTION CALL
7413   3385             ; return; 
7414   3385 F9            leave
7415   3386 09            ret
7416   3387 0A 8A 33      jmp _if180_exit
7417   338A             _if180_exit:
7418   338A             ; if (inoperable(5)) 
7419   338A             _if181_cond:
7420   338A             ; --- START FUNCTION CALL
7421   338A FD 2E 05 00   mov32 cb, $00000005
7421   338E 00 00 
7422   3390 DD            push bl
7423   3391 07 7C 09      call inoperable
7424   3394 51 01 00      add sp, 1
7425   3397             ; --- END FUNCTION CALL
7426   3397 C0 00 00      cmp b, 0
7427   339A C6 A2 33      je _if181_exit
7428   339D             _if181_TRUE:
7429   339D             ; return; 
7430   339D F9            leave
7431   339E 09            ret
7432   339F 0A A2 33      jmp _if181_exit
7433   33A2             _if181_exit:
7434   33A2             ; puts("Course (0-9): "); 
7435   33A2             ; --- START FUNCTION CALL
7436   33A2 26 9C 73      mov b, _s63 ; "Course (0-9): "
7437   33A5 FD AB         swp b
7438   33A7 D8            push b
7439   33A8 07 85 69      call puts
7440   33AB 51 02 00      add sp, 2
7441   33AE             ; --- END FUNCTION CALL
7442   33AE             ; c1 = input_f00(); 
7443   33AE FA FB FF      lea d, [bp + -5] ; $c1
7444   33B1 DA            push d
7445   33B2             ; --- START FUNCTION CALL
7446   33B2 07 73 06      call input_f00
7447   33B5 E7            pop d
7448   33B6 FD 43         mov [d], b
7449   33B8             ; if (c1 == 900) 
7450   33B8             _if182_cond:
7451   33B8 FA FB FF      lea d, [bp + -5] ; $c1
7452   33BB 2A            mov b, [d]
7453   33BC 38 00 00      mov c, 0
7454   33BF             ; --- START RELATIONAL
7455   33BF D7            push a
7456   33C0 11            mov a, b
7457   33C1 FD 2E 84 03   mov32 cb, $00000384
7457   33C5 00 00 
7458   33C7 B0            cmp a, b
7459   33C8 FD 71         seq ; ==
7460   33CA E4            pop a
7461   33CB             ; --- END RELATIONAL
7462   33CB C0 00 00      cmp b, 0
7463   33CE C6 E1 33      je _if182_exit
7464   33D1             _if182_TRUE:
7465   33D1             ; c1 = 100; 
7466   33D1 FA FB FF      lea d, [bp + -5] ; $c1
7467   33D4 DA            push d
7468   33D5 FD 2E 64 00   mov32 cb, $00000064
7468   33D9 00 00 
7469   33DB E7            pop d
7470   33DC FD 43         mov [d], b
7471   33DE 0A E1 33      jmp _if182_exit
7472   33E1             _if182_exit:
7473   33E1             ; if (c1 < 100 || c1 >= 900) { 
7474   33E1             _if183_cond:
7475   33E1 FA FB FF      lea d, [bp + -5] ; $c1
7476   33E4 2A            mov b, [d]
7477   33E5 38 00 00      mov c, 0
7478   33E8             ; --- START RELATIONAL
7479   33E8 D7            push a
7480   33E9 11            mov a, b
7481   33EA FD 2E 64 00   mov32 cb, $00000064
7481   33EE 00 00 
7482   33F0 B0            cmp a, b
7483   33F1 FD 73         slt ; < (signed)
7484   33F3 E4            pop a
7485   33F4             ; --- END RELATIONAL
7486   33F4             ; --- START LOGICAL OR
7487   33F4 D7            push a
7488   33F5 11            mov a, b
7489   33F6 FA FB FF      lea d, [bp + -5] ; $c1
7490   33F9 2A            mov b, [d]
7491   33FA 38 00 00      mov c, 0
7492   33FD             ; --- START RELATIONAL
7493   33FD D7            push a
7494   33FE 11            mov a, b
7495   33FF FD 2E 84 03   mov32 cb, $00000384
7495   3403 00 00 
7496   3405 B0            cmp a, b
7497   3406 FD 80         sge ; >=
7498   3408 E4            pop a
7499   3409             ; --- END RELATIONAL
7500   3409 FD A8         sor a, b ; ||
7501   340B E4            pop a
7502   340C             ; --- END LOGICAL OR
7503   340C C0 00 00      cmp b, 0
7504   340F C6 2D 34      je _if183_exit
7505   3412             _if183_TRUE:
7506   3412             ; printf("Ensign Chekov%s", inc_1); 
7507   3412             ; --- START FUNCTION CALL
7508   3412 3B F9 6E      mov d, _inc_1 ; $inc_1
7509   3415 2A            mov b, [d]
7510   3416 38 00 00      mov c, 0
7511   3419 FD AB         swp b
7512   341B D8            push b
7513   341C 26 7E 79      mov b, _s102 ; "Ensign Chekov%s"
7514   341F FD AB         swp b
7515   3421 D8            push b
7516   3422 07 78 60      call printf
7517   3425 51 04 00      add sp, 4
7518   3428             ; --- END FUNCTION CALL
7519   3428             ; return; 
7520   3428 F9            leave
7521   3429 09            ret
7522   342A 0A 2D 34      jmp _if183_exit
7523   342D             _if183_exit:
7524   342D             ; energy = energy - 2; 
7525   342D 3B A9 6D      mov d, _energy ; $energy
7526   3430 DA            push d
7527   3431 3B A9 6D      mov d, _energy ; $energy
7528   3434 2A            mov b, [d]
7529   3435 38 00 00      mov c, 0
7530   3438             ; --- START TERMS
7531   3438 D7            push a
7532   3439 11            mov a, b
7533   343A FD 2E 02 00   mov32 cb, $00000002
7533   343E 00 00 
7534   3440 60            sub a, b
7535   3441 27            mov b, a
7536   3442 E4            pop a
7537   3443             ; --- END TERMS
7538   3443 E7            pop d
7539   3444 FD 43         mov [d], b
7540   3446             ; torps--; 
7541   3446 3B 5E 6E      mov d, _torps ; $torps
7542   3449 32            mov bl, [d]
7543   344A A7 00         mov bh, 0
7544   344C 38 00 00      mov c, 0
7545   344F FD 7D         dec b
7546   3451 3B 5E 6E      mov d, _torps ; $torps
7547   3454 FD 3E         mov [d], bl
7548   3456 FD 77         inc b
7549   3458             ; c2 = FROM_FIXED00(c1);	/* Integer part */ 
7550   3458 FA F9 FF      lea d, [bp + -7] ; $c2
7551   345B DA            push d
7552   345C             ; --- START FUNCTION CALL
7553   345C FA FB FF      lea d, [bp + -5] ; $c1
7554   345F 2A            mov b, [d]
7555   3460 38 00 00      mov c, 0
7556   3463 FD AB         swp b
7557   3465 D8            push b
7558   3466 07 DC 04      call FROM_FIXED00
7559   3469 51 02 00      add sp, 2
7560   346C             ; --- END FUNCTION CALL
7561   346C E7            pop d
7562   346D FD 43         mov [d], b
7563   346F             ; c3 = c2 + 1;		/* Next integer part */ 
7564   346F FA F7 FF      lea d, [bp + -9] ; $c3
7565   3472 DA            push d
7566   3473 FA F9 FF      lea d, [bp + -7] ; $c2
7567   3476 2A            mov b, [d]
7568   3477 38 00 00      mov c, 0
7569   347A             ; --- START TERMS
7570   347A D7            push a
7571   347B 11            mov a, b
7572   347C FD 2E 01 00   mov32 cb, $00000001
7572   3480 00 00 
7573   3482 56            add b, a
7574   3483 E4            pop a
7575   3484             ; --- END TERMS
7576   3484 E7            pop d
7577   3485 FD 43         mov [d], b
7578   3487             ; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
7579   3487 FA F5 FF      lea d, [bp + -11] ; $c4
7580   348A DA            push d
7581   348B FA FB FF      lea d, [bp + -5] ; $c1
7582   348E 2A            mov b, [d]
7583   348F 38 00 00      mov c, 0
7584   3492             ; --- START TERMS
7585   3492 D7            push a
7586   3493 11            mov a, b
7587   3494             ; --- START FUNCTION CALL
7588   3494 FA F9 FF      lea d, [bp + -7] ; $c2
7589   3497 2A            mov b, [d]
7590   3498 38 00 00      mov c, 0
7591   349B FD AB         swp b
7592   349D D8            push b
7593   349E 07 8B 04      call TO_FIXED00
7594   34A1 51 02 00      add sp, 2
7595   34A4             ; --- END FUNCTION CALL
7596   34A4 60            sub a, b
7597   34A5 27            mov b, a
7598   34A6 E4            pop a
7599   34A7             ; --- END TERMS
7600   34A7 E7            pop d
7601   34A8 FD 43         mov [d], b
7602   34AA             ; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
7603   34AA FA EF FF      lea d, [bp + -17] ; $x1
7604   34AD DA            push d
7605   34AE FD 2E 64 00   mov32 cb, $00000064
7605   34B2 00 00 
7606   34B4             ; --- START FACTORS
7607   34B4 D7            push a
7608   34B5 FD D8         push g
7609   34B7 11            mov a, b
7610   34B8 FD 7A         mov g, c
7611   34BA 3B 8A 6D      mov d, _c_data ; $c
7612   34BD D7            push a
7613   34BE DA            push d
7614   34BF FD 2E 01 00   mov32 cb, $00000001
7614   34C3 00 00 
7615   34C5 E7            pop d
7616   34C6 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7617   34CA DA            push d
7618   34CB FA F9 FF      lea d, [bp + -7] ; $c2
7619   34CE 2A            mov b, [d]
7620   34CF 38 00 00      mov c, 0
7621   34D2 E7            pop d
7622   34D3 5A            add d, b
7623   34D4 E4            pop a
7624   34D5 32            mov bl, [d]
7625   34D6 A7 00         mov bh, 0
7626   34D8 38 00 00      mov c, 0
7627   34DB D7            push a     ; save left operand
7628   34DC 8E            xor a, b   ; xor sign bits
7629   34DD FD AA         swp a      ; swap bytes
7630   34DF 83            mov cl, al ; save result of xor into 'dl'
7631   34E0 E4            pop a      ; restore left side operator
7632   34E1 DF            push cl    ; save result of xor above
7633   34E2 FD AA         swp a  
7634   34E4 93 80         test al, $80  
7635   34E6 FD AA         swp a  
7636   34E8 C6 ED 34      jz skip_invert_a_186  
7637   34EB FD 95         neg a 
7638   34ED             skip_invert_a_186:   
7639   34ED FD AB         swp b
7640   34EF FD 93 80      test bl, $80  
7641   34F2 FD AB         swp b
7642   34F4 C6 F9 34      jz skip_invert_b_186  
7643   34F7 FD 97         neg b 
7644   34F9             skip_invert_b_186:   
7645   34F9 AC            mul a, b ; *
7646   34FA FD 78         mov g, a
7647   34FC 11            mov a, b
7648   34FD EA            pop bl
7649   34FE FD 93 80      test bl, $80
7650   3501 C6 0E 35      jz _same_signs_186
7651   3504 2F            mov bl, al
7652   3505 95            not a
7653   3506 FD 97         neg b
7654   3508 5B 00 00      adc a, 0
7655   350B FD 78         mov g, a
7656   350D 11            mov a, b
7657   350E             _same_signs_186:
7658   350E FD 38         mov c, g
7659   3510 27            mov b, a
7660   3511 FD F1         pop g
7661   3513 E4            pop a
7662   3514             ; --- END FACTORS
7663   3514             ; --- START TERMS
7664   3514 D7            push a
7665   3515 FD D8         push g
7666   3517 11            mov a, b
7667   3518 FD 7A         mov g, c
7668   351A 3B 8A 6D      mov d, _c_data ; $c
7669   351D D7            push a
7670   351E DA            push d
7671   351F FD 2E 01 00   mov32 cb, $00000001
7671   3523 00 00 
7672   3525 E7            pop d
7673   3526 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7674   352A DA            push d
7675   352B FA F7 FF      lea d, [bp + -9] ; $c3
7676   352E 2A            mov b, [d]
7677   352F 38 00 00      mov c, 0
7678   3532 E7            pop d
7679   3533 5A            add d, b
7680   3534 E4            pop a
7681   3535 32            mov bl, [d]
7682   3536 A7 00         mov bh, 0
7683   3538 38 00 00      mov c, 0
7684   353B             ; --- START TERMS
7685   353B D7            push a
7686   353C 11            mov a, b
7687   353D 3B 8A 6D      mov d, _c_data ; $c
7688   3540 D7            push a
7689   3541 DA            push d
7690   3542 FD 2E 01 00   mov32 cb, $00000001
7690   3546 00 00 
7691   3548 E7            pop d
7692   3549 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7693   354D DA            push d
7694   354E FA F9 FF      lea d, [bp + -7] ; $c2
7695   3551 2A            mov b, [d]
7696   3552 38 00 00      mov c, 0
7697   3555 E7            pop d
7698   3556 5A            add d, b
7699   3557 E4            pop a
7700   3558 32            mov bl, [d]
7701   3559 A7 00         mov bh, 0
7702   355B 38 00 00      mov c, 0
7703   355E 60            sub a, b
7704   355F 27            mov b, a
7705   3560 E4            pop a
7706   3561             ; --- END TERMS
7707   3561             ; --- START FACTORS
7708   3561 D7            push a
7709   3562 FD D8         push g
7710   3564 11            mov a, b
7711   3565 FD 7A         mov g, c
7712   3567 FA F5 FF      lea d, [bp + -11] ; $c4
7713   356A 2A            mov b, [d]
7714   356B 38 00 00      mov c, 0
7715   356E D7            push a     ; save left operand
7716   356F 8E            xor a, b   ; xor sign bits
7717   3570 FD AA         swp a      ; swap bytes
7718   3572 83            mov cl, al ; save result of xor into 'dl'
7719   3573 E4            pop a      ; restore left side operator
7720   3574 DF            push cl    ; save result of xor above
7721   3575 FD AA         swp a  
7722   3577 93 80         test al, $80  
7723   3579 FD AA         swp a  
7724   357B C6 80 35      jz skip_invert_a_187  
7725   357E FD 95         neg a 
7726   3580             skip_invert_a_187:   
7727   3580 FD AB         swp b
7728   3582 FD 93 80      test bl, $80  
7729   3585 FD AB         swp b
7730   3587 C6 8C 35      jz skip_invert_b_187  
7731   358A FD 97         neg b 
7732   358C             skip_invert_b_187:   
7733   358C AC            mul a, b ; *
7734   358D FD 78         mov g, a
7735   358F 11            mov a, b
7736   3590 EA            pop bl
7737   3591 FD 93 80      test bl, $80
7738   3594 C6 A1 35      jz _same_signs_187
7739   3597 2F            mov bl, al
7740   3598 95            not a
7741   3599 FD 97         neg b
7742   359B 5B 00 00      adc a, 0
7743   359E FD 78         mov g, a
7744   35A0 11            mov a, b
7745   35A1             _same_signs_187:
7746   35A1 FD 38         mov c, g
7747   35A3 27            mov b, a
7748   35A4 FD F1         pop g
7749   35A6 E4            pop a
7750   35A7             ; --- END FACTORS
7751   35A7 FD 15         add32 cb, ga
7752   35A9 FD F1         pop g
7753   35AB E4            pop a
7754   35AC             ; --- END TERMS
7755   35AC E7            pop d
7756   35AD FD 43         mov [d], b
7757   35AF             ; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
7758   35AF FA ED FF      lea d, [bp + -19] ; $x2
7759   35B2 DA            push d
7760   35B3 FD 2E 64 00   mov32 cb, $00000064
7760   35B7 00 00 
7761   35B9             ; --- START FACTORS
7762   35B9 D7            push a
7763   35BA FD D8         push g
7764   35BC 11            mov a, b
7765   35BD FD 7A         mov g, c
7766   35BF 3B 8A 6D      mov d, _c_data ; $c
7767   35C2 D7            push a
7768   35C3 DA            push d
7769   35C4 FD 2E 02 00   mov32 cb, $00000002
7769   35C8 00 00 
7770   35CA E7            pop d
7771   35CB FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7772   35CF DA            push d
7773   35D0 FA F9 FF      lea d, [bp + -7] ; $c2
7774   35D3 2A            mov b, [d]
7775   35D4 38 00 00      mov c, 0
7776   35D7 E7            pop d
7777   35D8 5A            add d, b
7778   35D9 E4            pop a
7779   35DA 32            mov bl, [d]
7780   35DB A7 00         mov bh, 0
7781   35DD 38 00 00      mov c, 0
7782   35E0 D7            push a     ; save left operand
7783   35E1 8E            xor a, b   ; xor sign bits
7784   35E2 FD AA         swp a      ; swap bytes
7785   35E4 83            mov cl, al ; save result of xor into 'dl'
7786   35E5 E4            pop a      ; restore left side operator
7787   35E6 DF            push cl    ; save result of xor above
7788   35E7 FD AA         swp a  
7789   35E9 93 80         test al, $80  
7790   35EB FD AA         swp a  
7791   35ED C6 F2 35      jz skip_invert_a_190  
7792   35F0 FD 95         neg a 
7793   35F2             skip_invert_a_190:   
7794   35F2 FD AB         swp b
7795   35F4 FD 93 80      test bl, $80  
7796   35F7 FD AB         swp b
7797   35F9 C6 FE 35      jz skip_invert_b_190  
7798   35FC FD 97         neg b 
7799   35FE             skip_invert_b_190:   
7800   35FE AC            mul a, b ; *
7801   35FF FD 78         mov g, a
7802   3601 11            mov a, b
7803   3602 EA            pop bl
7804   3603 FD 93 80      test bl, $80
7805   3606 C6 13 36      jz _same_signs_190
7806   3609 2F            mov bl, al
7807   360A 95            not a
7808   360B FD 97         neg b
7809   360D 5B 00 00      adc a, 0
7810   3610 FD 78         mov g, a
7811   3612 11            mov a, b
7812   3613             _same_signs_190:
7813   3613 FD 38         mov c, g
7814   3615 27            mov b, a
7815   3616 FD F1         pop g
7816   3618 E4            pop a
7817   3619             ; --- END FACTORS
7818   3619             ; --- START TERMS
7819   3619 D7            push a
7820   361A FD D8         push g
7821   361C 11            mov a, b
7822   361D FD 7A         mov g, c
7823   361F 3B 8A 6D      mov d, _c_data ; $c
7824   3622 D7            push a
7825   3623 DA            push d
7826   3624 FD 2E 02 00   mov32 cb, $00000002
7826   3628 00 00 
7827   362A E7            pop d
7828   362B FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7829   362F DA            push d
7830   3630 FA F7 FF      lea d, [bp + -9] ; $c3
7831   3633 2A            mov b, [d]
7832   3634 38 00 00      mov c, 0
7833   3637 E7            pop d
7834   3638 5A            add d, b
7835   3639 E4            pop a
7836   363A 32            mov bl, [d]
7837   363B A7 00         mov bh, 0
7838   363D 38 00 00      mov c, 0
7839   3640             ; --- START TERMS
7840   3640 D7            push a
7841   3641 11            mov a, b
7842   3642 3B 8A 6D      mov d, _c_data ; $c
7843   3645 D7            push a
7844   3646 DA            push d
7845   3647 FD 2E 02 00   mov32 cb, $00000002
7845   364B 00 00 
7846   364D E7            pop d
7847   364E FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7848   3652 DA            push d
7849   3653 FA F9 FF      lea d, [bp + -7] ; $c2
7850   3656 2A            mov b, [d]
7851   3657 38 00 00      mov c, 0
7852   365A E7            pop d
7853   365B 5A            add d, b
7854   365C E4            pop a
7855   365D 32            mov bl, [d]
7856   365E A7 00         mov bh, 0
7857   3660 38 00 00      mov c, 0
7858   3663 60            sub a, b
7859   3664 27            mov b, a
7860   3665 E4            pop a
7861   3666             ; --- END TERMS
7862   3666             ; --- START FACTORS
7863   3666 D7            push a
7864   3667 FD D8         push g
7865   3669 11            mov a, b
7866   366A FD 7A         mov g, c
7867   366C FA F5 FF      lea d, [bp + -11] ; $c4
7868   366F 2A            mov b, [d]
7869   3670 38 00 00      mov c, 0
7870   3673 D7            push a     ; save left operand
7871   3674 8E            xor a, b   ; xor sign bits
7872   3675 FD AA         swp a      ; swap bytes
7873   3677 83            mov cl, al ; save result of xor into 'dl'
7874   3678 E4            pop a      ; restore left side operator
7875   3679 DF            push cl    ; save result of xor above
7876   367A FD AA         swp a  
7877   367C 93 80         test al, $80  
7878   367E FD AA         swp a  
7879   3680 C6 85 36      jz skip_invert_a_191  
7880   3683 FD 95         neg a 
7881   3685             skip_invert_a_191:   
7882   3685 FD AB         swp b
7883   3687 FD 93 80      test bl, $80  
7884   368A FD AB         swp b
7885   368C C6 91 36      jz skip_invert_b_191  
7886   368F FD 97         neg b 
7887   3691             skip_invert_b_191:   
7888   3691 AC            mul a, b ; *
7889   3692 FD 78         mov g, a
7890   3694 11            mov a, b
7891   3695 EA            pop bl
7892   3696 FD 93 80      test bl, $80
7893   3699 C6 A6 36      jz _same_signs_191
7894   369C 2F            mov bl, al
7895   369D 95            not a
7896   369E FD 97         neg b
7897   36A0 5B 00 00      adc a, 0
7898   36A3 FD 78         mov g, a
7899   36A5 11            mov a, b
7900   36A6             _same_signs_191:
7901   36A6 FD 38         mov c, g
7902   36A8 27            mov b, a
7903   36A9 FD F1         pop g
7904   36AB E4            pop a
7905   36AC             ; --- END FACTORS
7906   36AC FD 15         add32 cb, ga
7907   36AE FD F1         pop g
7908   36B0 E4            pop a
7909   36B1             ; --- END TERMS
7910   36B1 E7            pop d
7911   36B2 FD 43         mov [d], b
7912   36B4             ; x = ship_y + x1; 
7913   36B4 FA F3 FF      lea d, [bp + -13] ; $x
7914   36B7 DA            push d
7915   36B8 3B 7F 6E      mov d, _ship_y ; $ship_y
7916   36BB 2A            mov b, [d]
7917   36BC 38 00 00      mov c, 0
7918   36BF             ; --- START TERMS
7919   36BF D7            push a
7920   36C0 11            mov a, b
7921   36C1 FA EF FF      lea d, [bp + -17] ; $x1
7922   36C4 2A            mov b, [d]
7923   36C5 38 00 00      mov c, 0
7924   36C8 56            add b, a
7925   36C9 E4            pop a
7926   36CA             ; --- END TERMS
7927   36CA E7            pop d
7928   36CB FD 43         mov [d], b
7929   36CD             ; y = ship_x + x2; 
7930   36CD FA F1 FF      lea d, [bp + -15] ; $y
7931   36D0 DA            push d
7932   36D1 3B 81 6E      mov d, _ship_x ; $ship_x
7933   36D4 2A            mov b, [d]
7934   36D5 38 00 00      mov c, 0
7935   36D8             ; --- START TERMS
7936   36D8 D7            push a
7937   36D9 11            mov a, b
7938   36DA FA ED FF      lea d, [bp + -19] ; $x2
7939   36DD 2A            mov b, [d]
7940   36DE 38 00 00      mov c, 0
7941   36E1 56            add b, a
7942   36E2 E4            pop a
7943   36E3             ; --- END TERMS
7944   36E3 E7            pop d
7945   36E4 FD 43         mov [d], b
7946   36E6             ; x3 = FROM_FIXED00(x); 
7947   36E6 FA FF FF      lea d, [bp + -1] ; $x3
7948   36E9 DA            push d
7949   36EA             ; --- START FUNCTION CALL
7950   36EA FA F3 FF      lea d, [bp + -13] ; $x
7951   36ED 2A            mov b, [d]
7952   36EE 38 00 00      mov c, 0
7953   36F1 FD AB         swp b
7954   36F3 D8            push b
7955   36F4 07 DC 04      call FROM_FIXED00
7956   36F7 51 02 00      add sp, 2
7957   36FA             ; --- END FUNCTION CALL
7958   36FA E7            pop d
7959   36FB FD 43         mov [d], b
7960   36FD             ; y3 = FROM_FIXED00(y); 
7961   36FD FA FD FF      lea d, [bp + -3] ; $y3
7962   3700 DA            push d
7963   3701             ; --- START FUNCTION CALL
7964   3701 FA F1 FF      lea d, [bp + -15] ; $y
7965   3704 2A            mov b, [d]
7966   3705 38 00 00      mov c, 0
7967   3708 FD AB         swp b
7968   370A D8            push b
7969   370B 07 DC 04      call FROM_FIXED00
7970   370E 51 02 00      add sp, 2
7971   3711             ; --- END FUNCTION CALL
7972   3711 E7            pop d
7973   3712 FD 43         mov [d], b
7974   3714             ; puts("Torpedo Track:"); 
7975   3714             ; --- START FUNCTION CALL
7976   3714 26 8E 79      mov b, _s103 ; "Torpedo Track:"
7977   3717 FD AB         swp b
7978   3719 D8            push b
7979   371A 07 85 69      call puts
7980   371D 51 02 00      add sp, 2
7981   3720             ; --- END FUNCTION CALL
7982   3720             ; while (x3 >= 1 && x3 <= 8 && y3 >= 1 && y3 <= 8) { 
7983   3720             _while192_cond:
7984   3720 FA FF FF      lea d, [bp + -1] ; $x3
7985   3723 2A            mov b, [d]
7986   3724 38 00 00      mov c, 0
7987   3727             ; --- START RELATIONAL
7988   3727 D7            push a
7989   3728 11            mov a, b
7990   3729 FD 2E 01 00   mov32 cb, $00000001
7990   372D 00 00 
7991   372F B0            cmp a, b
7992   3730 FD 80         sge ; >=
7993   3732 E4            pop a
7994   3733             ; --- END RELATIONAL
7995   3733             ; --- START LOGICAL AND
7996   3733 D7            push a
7997   3734 11            mov a, b
7998   3735 FA FF FF      lea d, [bp + -1] ; $x3
7999   3738 2A            mov b, [d]
8000   3739 38 00 00      mov c, 0
8001   373C             ; --- START RELATIONAL
8002   373C D7            push a
8003   373D 11            mov a, b
8004   373E FD 2E 08 00   mov32 cb, $00000008
8004   3742 00 00 
8005   3744 B0            cmp a, b
8006   3745 FD 74         sle ; <= (signed)
8007   3747 E4            pop a
8008   3748             ; --- END RELATIONAL
8009   3748 FD A7         sand a, b
8010   374A 11            mov a, b
8011   374B FA FD FF      lea d, [bp + -3] ; $y3
8012   374E 2A            mov b, [d]
8013   374F 38 00 00      mov c, 0
8014   3752             ; --- START RELATIONAL
8015   3752 D7            push a
8016   3753 11            mov a, b
8017   3754 FD 2E 01 00   mov32 cb, $00000001
8017   3758 00 00 
8018   375A B0            cmp a, b
8019   375B FD 80         sge ; >=
8020   375D E4            pop a
8021   375E             ; --- END RELATIONAL
8022   375E FD A7         sand a, b
8023   3760 11            mov a, b
8024   3761 FA FD FF      lea d, [bp + -3] ; $y3
8025   3764 2A            mov b, [d]
8026   3765 38 00 00      mov c, 0
8027   3768             ; --- START RELATIONAL
8028   3768 D7            push a
8029   3769 11            mov a, b
8030   376A FD 2E 08 00   mov32 cb, $00000008
8030   376E 00 00 
8031   3770 B0            cmp a, b
8032   3771 FD 74         sle ; <= (signed)
8033   3773 E4            pop a
8034   3774             ; --- END RELATIONAL
8035   3774 FD A7         sand a, b
8036   3776 E4            pop a
8037   3777             ; --- END LOGICAL AND
8038   3777 C0 00 00      cmp b, 0
8039   377A C6 93 38      je _while192_exit
8040   377D             _while192_block:
8041   377D             ; unsigned char        p; 
8042   377D 52 01 00      sub sp, 1
8043   3780             ; printf("    %d, %d\n", x3, y3); 
8044   3780             ; --- START FUNCTION CALL
8045   3780 FA FD FF      lea d, [bp + -3] ; $y3
8046   3783 2A            mov b, [d]
8047   3784 38 00 00      mov c, 0
8048   3787 FD AB         swp b
8049   3789 D8            push b
8050   378A FA FF FF      lea d, [bp + -1] ; $x3
8051   378D 2A            mov b, [d]
8052   378E 38 00 00      mov c, 0
8053   3791 FD AB         swp b
8054   3793 D8            push b
8055   3794 26 9D 79      mov b, _s104 ; "    %d, %d\n"
8056   3797 FD AB         swp b
8057   3799 D8            push b
8058   379A 07 78 60      call printf
8059   379D 51 06 00      add sp, 6
8060   37A0             ; --- END FUNCTION CALL
8061   37A0             ; p = quad[x3+-1][y3+-1]; 
8062   37A0 FA EC FF      lea d, [bp + -20] ; $p
8063   37A3 DA            push d
8064   37A4 3B 85 6E      mov d, _quad_data ; $quad
8065   37A7 D7            push a
8066   37A8 DA            push d
8067   37A9 FA FF FF      lea d, [bp + -1] ; $x3
8068   37AC 2A            mov b, [d]
8069   37AD 38 00 00      mov c, 0
8070   37B0             ; --- START TERMS
8071   37B0 D7            push a
8072   37B1 11            mov a, b
8073   37B2 FD 2E FF FF   mov32 cb, $ffffffff
8073   37B6 FF FF 
8074   37B8 56            add b, a
8075   37B9 E4            pop a
8076   37BA             ; --- END TERMS
8077   37BA E7            pop d
8078   37BB FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8079   37BF DA            push d
8080   37C0 FA FD FF      lea d, [bp + -3] ; $y3
8081   37C3 2A            mov b, [d]
8082   37C4 38 00 00      mov c, 0
8083   37C7             ; --- START TERMS
8084   37C7 D7            push a
8085   37C8 11            mov a, b
8086   37C9 FD 2E FF FF   mov32 cb, $ffffffff
8086   37CD FF FF 
8087   37CF 56            add b, a
8088   37D0 E4            pop a
8089   37D1             ; --- END TERMS
8090   37D1 E7            pop d
8091   37D2 5A            add d, b
8092   37D3 E4            pop a
8093   37D4 32            mov bl, [d]
8094   37D5 A7 00         mov bh, 0
8095   37D7 38 00 00      mov c, 0
8096   37DA E7            pop d
8097   37DB FD 3E         mov [d], bl
8098   37DD             ; if (p != 		0        && p != 		4      ) { 
8099   37DD             _if193_cond:
8100   37DD FA EC FF      lea d, [bp + -20] ; $p
8101   37E0 32            mov bl, [d]
8102   37E1 A7 00         mov bh, 0
8103   37E3 38 00 00      mov c, 0
8104   37E6             ; --- START RELATIONAL
8105   37E6 D7            push a
8106   37E7 11            mov a, b
8107   37E8 FD 2E 00 00   mov32 cb, $00000000
8107   37EC 00 00 
8108   37EE B0            cmp a, b
8109   37EF FD 72         sneq ; !=
8110   37F1 E4            pop a
8111   37F2             ; --- END RELATIONAL
8112   37F2             ; --- START LOGICAL AND
8113   37F2 D7            push a
8114   37F3 11            mov a, b
8115   37F4 FA EC FF      lea d, [bp + -20] ; $p
8116   37F7 32            mov bl, [d]
8117   37F8 A7 00         mov bh, 0
8118   37FA 38 00 00      mov c, 0
8119   37FD             ; --- START RELATIONAL
8120   37FD D7            push a
8121   37FE 11            mov a, b
8122   37FF FD 2E 04 00   mov32 cb, $00000004
8122   3803 00 00 
8123   3805 B0            cmp a, b
8124   3806 FD 72         sneq ; !=
8125   3808 E4            pop a
8126   3809             ; --- END RELATIONAL
8127   3809 FD A7         sand a, b
8128   380B E4            pop a
8129   380C             ; --- END LOGICAL AND
8130   380C C0 00 00      cmp b, 0
8131   380F C6 30 38      je _if193_exit
8132   3812             _if193_TRUE:
8133   3812             ; torpedo_hit(x3, y3); 
8134   3812             ; --- START FUNCTION CALL
8135   3812 FA FD FF      lea d, [bp + -3] ; $y3
8136   3815 2A            mov b, [d]
8137   3816 38 00 00      mov c, 0
8138   3819 DD            push bl
8139   381A FA FF FF      lea d, [bp + -1] ; $x3
8140   381D 2A            mov b, [d]
8141   381E 38 00 00      mov c, 0
8142   3821 DD            push bl
8143   3822 07 A4 38      call torpedo_hit
8144   3825 51 02 00      add sp, 2
8145   3828             ; --- END FUNCTION CALL
8146   3828             ; klingons_shoot(); 
8147   3828             ; --- START FUNCTION CALL
8148   3828 07 0F 51      call klingons_shoot
8149   382B             ; return; 
8150   382B F9            leave
8151   382C 09            ret
8152   382D 0A 30 38      jmp _if193_exit
8153   3830             _if193_exit:
8154   3830             ; x = x + x1; 
8155   3830 FA F3 FF      lea d, [bp + -13] ; $x
8156   3833 DA            push d
8157   3834 FA F3 FF      lea d, [bp + -13] ; $x
8158   3837 2A            mov b, [d]
8159   3838 38 00 00      mov c, 0
8160   383B             ; --- START TERMS
8161   383B D7            push a
8162   383C 11            mov a, b
8163   383D FA EF FF      lea d, [bp + -17] ; $x1
8164   3840 2A            mov b, [d]
8165   3841 38 00 00      mov c, 0
8166   3844 56            add b, a
8167   3845 E4            pop a
8168   3846             ; --- END TERMS
8169   3846 E7            pop d
8170   3847 FD 43         mov [d], b
8171   3849             ; y = y + x2; 
8172   3849 FA F1 FF      lea d, [bp + -15] ; $y
8173   384C DA            push d
8174   384D FA F1 FF      lea d, [bp + -15] ; $y
8175   3850 2A            mov b, [d]
8176   3851 38 00 00      mov c, 0
8177   3854             ; --- START TERMS
8178   3854 D7            push a
8179   3855 11            mov a, b
8180   3856 FA ED FF      lea d, [bp + -19] ; $x2
8181   3859 2A            mov b, [d]
8182   385A 38 00 00      mov c, 0
8183   385D 56            add b, a
8184   385E E4            pop a
8185   385F             ; --- END TERMS
8186   385F E7            pop d
8187   3860 FD 43         mov [d], b
8188   3862             ; x3 = FROM_FIXED00(x); 
8189   3862 FA FF FF      lea d, [bp + -1] ; $x3
8190   3865 DA            push d
8191   3866             ; --- START FUNCTION CALL
8192   3866 FA F3 FF      lea d, [bp + -13] ; $x
8193   3869 2A            mov b, [d]
8194   386A 38 00 00      mov c, 0
8195   386D FD AB         swp b
8196   386F D8            push b
8197   3870 07 DC 04      call FROM_FIXED00
8198   3873 51 02 00      add sp, 2
8199   3876             ; --- END FUNCTION CALL
8200   3876 E7            pop d
8201   3877 FD 43         mov [d], b
8202   3879             ; y3 = FROM_FIXED00(y); 
8203   3879 FA FD FF      lea d, [bp + -3] ; $y3
8204   387C DA            push d
8205   387D             ; --- START FUNCTION CALL
8206   387D FA F1 FF      lea d, [bp + -15] ; $y
8207   3880 2A            mov b, [d]
8208   3881 38 00 00      mov c, 0
8209   3884 FD AB         swp b
8210   3886 D8            push b
8211   3887 07 DC 04      call FROM_FIXED00
8212   388A 51 02 00      add sp, 2
8213   388D             ; --- END FUNCTION CALL
8214   388D E7            pop d
8215   388E FD 43         mov [d], b
8216   3890 0A 20 37      jmp _while192_cond
8217   3893             _while192_exit:
8218   3893             ; puts("Torpedo Missed\n"); 
8219   3893             ; --- START FUNCTION CALL
8220   3893 26 A9 79      mov b, _s105 ; "Torpedo Missed\n"
8221   3896 FD AB         swp b
8222   3898 D8            push b
8223   3899 07 85 69      call puts
8224   389C 51 02 00      add sp, 2
8225   389F             ; --- END FUNCTION CALL
8226   389F             ; klingons_shoot(); 
8227   389F             ; --- START FUNCTION CALL
8228   389F 07 0F 51      call klingons_shoot
8229   38A2 F9            leave
8230   38A3 09            ret
8231   38A4             
8232   38A4             torpedo_hit:
8233   38A4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8234   38A7             ; int i; 
8235   38A7 52 02 00      sub sp, 2
8236   38AA             ; struct klingon *k; 
8237   38AA 52 02 00      sub sp, 2
8238   38AD             ; switch(quad[yp+-1][xp+-1]) { 
8239   38AD             _switch194_expr:
8240   38AD 3B 85 6E      mov d, _quad_data ; $quad
8241   38B0 D7            push a
8242   38B1 DA            push d
8243   38B2 FA 05 00      lea d, [bp + 5] ; $yp
8244   38B5 32            mov bl, [d]
8245   38B6 A7 00         mov bh, 0
8246   38B8 38 00 00      mov c, 0
8247   38BB             ; --- START TERMS
8248   38BB D7            push a
8249   38BC 11            mov a, b
8250   38BD FD 2E FF FF   mov32 cb, $ffffffff
8250   38C1 FF FF 
8251   38C3 56            add b, a
8252   38C4 E4            pop a
8253   38C5             ; --- END TERMS
8254   38C5 E7            pop d
8255   38C6 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8256   38CA DA            push d
8257   38CB FA 06 00      lea d, [bp + 6] ; $xp
8258   38CE 32            mov bl, [d]
8259   38CF A7 00         mov bh, 0
8260   38D1 38 00 00      mov c, 0
8261   38D4             ; --- START TERMS
8262   38D4 D7            push a
8263   38D5 11            mov a, b
8264   38D6 FD 2E FF FF   mov32 cb, $ffffffff
8264   38DA FF FF 
8265   38DC 56            add b, a
8266   38DD E4            pop a
8267   38DE             ; --- END TERMS
8268   38DE E7            pop d
8269   38DF 5A            add d, b
8270   38E0 E4            pop a
8271   38E1 32            mov bl, [d]
8272   38E2 A7 00         mov bh, 0
8273   38E4 38 00 00      mov c, 0
8274   38E7             _switch194_comparisons:
8275   38E7 C0 01 00      cmp b, 1
8276   38EA C6 FC 38      je _switch194_case0
8277   38ED C0 03 00      cmp b, 3
8278   38F0 C6 22 39      je _switch194_case1
8279   38F3 C0 02 00      cmp b, 2
8280   38F6 C6 7A 3A      je _switch194_case2
8281   38F9 0A A2 3B      jmp _switch194_exit
8282   38FC             _switch194_case0:
8283   38FC             ; printf("Star at %d, %d absorbed torpedo energy.\n\n", yp, xp); 
8284   38FC             ; --- START FUNCTION CALL
8285   38FC FA 06 00      lea d, [bp + 6] ; $xp
8286   38FF 32            mov bl, [d]
8287   3900 A7 00         mov bh, 0
8288   3902 38 00 00      mov c, 0
8289   3905 FD AB         swp b
8290   3907 D8            push b
8291   3908 FA 05 00      lea d, [bp + 5] ; $yp
8292   390B 32            mov bl, [d]
8293   390C A7 00         mov bh, 0
8294   390E 38 00 00      mov c, 0
8295   3911 FD AB         swp b
8296   3913 D8            push b
8297   3914 26 B9 79      mov b, _s106 ; "Star at %d, %d absorbed torpedo energy.\n\n"
8298   3917 FD AB         swp b
8299   3919 D8            push b
8300   391A 07 78 60      call printf
8301   391D 51 04 00      add sp, 4
8302   3920             ; --- END FUNCTION CALL
8303   3920             ; return; 
8304   3920 F9            leave
8305   3921 09            ret
8306   3922             _switch194_case1:
8307   3922             ; puts("*** Klingon Destroyed ***\n"); 
8308   3922             ; --- START FUNCTION CALL
8309   3922 26 1D 79      mov b, _s99 ; "*** Klingon Destroyed ***\n"
8310   3925 FD AB         swp b
8311   3927 D8            push b
8312   3928 07 85 69      call puts
8313   392B 51 02 00      add sp, 2
8314   392E             ; --- END FUNCTION CALL
8315   392E             ; klingons--; 
8316   392E 3B 5B 6E      mov d, _klingons ; $klingons
8317   3931 32            mov bl, [d]
8318   3932 A7 00         mov bh, 0
8319   3934 38 00 00      mov c, 0
8320   3937 FD 7D         dec b
8321   3939 3B 5B 6E      mov d, _klingons ; $klingons
8322   393C FD 3E         mov [d], bl
8323   393E FD 77         inc b
8324   3940             ; klingons_left--; 
8325   3940 3B 5D 6E      mov d, _klingons_left ; $klingons_left
8326   3943 32            mov bl, [d]
8327   3944 A7 00         mov bh, 0
8328   3946 38 00 00      mov c, 0
8329   3949 FD 7D         dec b
8330   394B 3B 5D 6E      mov d, _klingons_left ; $klingons_left
8331   394E FD 3E         mov [d], bl
8332   3950 FD 77         inc b
8333   3952             ; if (klingons_left <= 0) 
8334   3952             _if195_cond:
8335   3952 3B 5D 6E      mov d, _klingons_left ; $klingons_left
8336   3955 32            mov bl, [d]
8337   3956 A7 00         mov bh, 0
8338   3958 38 00 00      mov c, 0
8339   395B             ; --- START RELATIONAL
8340   395B D7            push a
8341   395C 11            mov a, b
8342   395D FD 2E 00 00   mov32 cb, $00000000
8342   3961 00 00 
8343   3963 B0            cmp a, b
8344   3964 FD 76         sleu ; <= (unsigned)
8345   3966 E4            pop a
8346   3967             ; --- END RELATIONAL
8347   3967 C0 00 00      cmp b, 0
8348   396A C6 73 39      je _if195_exit
8349   396D             _if195_TRUE:
8350   396D             ; won_game(); 
8351   396D             ; --- START FUNCTION CALL
8352   396D 07 29 4F      call won_game
8353   3970 0A 73 39      jmp _if195_exit
8354   3973             _if195_exit:
8355   3973             ; k = kdata; 
8356   3973 FA FD FF      lea d, [bp + -3] ; $k
8357   3976 DA            push d
8358   3977 3B 4F 6E      mov d, _kdata_data ; $kdata
8359   397A 2D            mov b, d
8360   397B 38 00 00      mov c, 0
8361   397E E7            pop d
8362   397F FD 43         mov [d], b
8363   3981             ; for (i = 0; i <= 2; i++) { 
8364   3981             _for196_init:
8365   3981 FA FF FF      lea d, [bp + -1] ; $i
8366   3984 DA            push d
8367   3985 FD 2E 00 00   mov32 cb, $00000000
8367   3989 00 00 
8368   398B E7            pop d
8369   398C FD 43         mov [d], b
8370   398E             _for196_cond:
8371   398E FA FF FF      lea d, [bp + -1] ; $i
8372   3991 2A            mov b, [d]
8373   3992 38 00 00      mov c, 0
8374   3995             ; --- START RELATIONAL
8375   3995 D7            push a
8376   3996 11            mov a, b
8377   3997 FD 2E 02 00   mov32 cb, $00000002
8377   399B 00 00 
8378   399D B0            cmp a, b
8379   399E FD 74         sle ; <= (signed)
8380   39A0 E4            pop a
8381   39A1             ; --- END RELATIONAL
8382   39A1 C0 00 00      cmp b, 0
8383   39A4 C6 26 3A      je _for196_exit
8384   39A7             _for196_block:
8385   39A7             ; if (yp == k->y && xp == k->x) 
8386   39A7             _if197_cond:
8387   39A7 FA 05 00      lea d, [bp + 5] ; $yp
8388   39AA 32            mov bl, [d]
8389   39AB A7 00         mov bh, 0
8390   39AD 38 00 00      mov c, 0
8391   39B0             ; --- START RELATIONAL
8392   39B0 D7            push a
8393   39B1 11            mov a, b
8394   39B2 FA FD FF      lea d, [bp + -3] ; $k
8395   39B5 FD 2A         mov d, [d]
8396   39B7 58 00 00      add d, 0
8397   39BA 32            mov bl, [d]
8398   39BB A7 00         mov bh, 0
8399   39BD 38 00 00      mov c, 0
8400   39C0 B0            cmp a, b
8401   39C1 FD 71         seq ; ==
8402   39C3 E4            pop a
8403   39C4             ; --- END RELATIONAL
8404   39C4             ; --- START LOGICAL AND
8405   39C4 D7            push a
8406   39C5 11            mov a, b
8407   39C6 FA 06 00      lea d, [bp + 6] ; $xp
8408   39C9 32            mov bl, [d]
8409   39CA A7 00         mov bh, 0
8410   39CC 38 00 00      mov c, 0
8411   39CF             ; --- START RELATIONAL
8412   39CF D7            push a
8413   39D0 11            mov a, b
8414   39D1 FA FD FF      lea d, [bp + -3] ; $k
8415   39D4 FD 2A         mov d, [d]
8416   39D6 58 01 00      add d, 1
8417   39D9 32            mov bl, [d]
8418   39DA A7 00         mov bh, 0
8419   39DC 38 00 00      mov c, 0
8420   39DF B0            cmp a, b
8421   39E0 FD 71         seq ; ==
8422   39E2 E4            pop a
8423   39E3             ; --- END RELATIONAL
8424   39E3 FD A7         sand a, b
8425   39E5 E4            pop a
8426   39E6             ; --- END LOGICAL AND
8427   39E6 C0 00 00      cmp b, 0
8428   39E9 C6 01 3A      je _if197_exit
8429   39EC             _if197_TRUE:
8430   39EC             ; k->energy = 0; 
8431   39EC FA FD FF      lea d, [bp + -3] ; $k
8432   39EF FD 2A         mov d, [d]
8433   39F1 58 02 00      add d, 2
8434   39F4 DA            push d
8435   39F5 FD 2E 00 00   mov32 cb, $00000000
8435   39F9 00 00 
8436   39FB E7            pop d
8437   39FC FD 43         mov [d], b
8438   39FE 0A 01 3A      jmp _if197_exit
8439   3A01             _if197_exit:
8440   3A01             ; k++; 
8441   3A01 FA FD FF      lea d, [bp + -3] ; $k
8442   3A04 2A            mov b, [d]
8443   3A05 38 00 00      mov c, 0
8444   3A08 11            mov a, b
8445   3A09 FD 77         inc b
8446   3A0B FD 77         inc b
8447   3A0D FA FD FF      lea d, [bp + -3] ; $k
8448   3A10 FD 43         mov [d], b
8449   3A12 27            mov b, a
8450   3A13             _for196_update:
8451   3A13 FA FF FF      lea d, [bp + -1] ; $i
8452   3A16 2A            mov b, [d]
8453   3A17 38 00 00      mov c, 0
8454   3A1A 11            mov a, b
8455   3A1B FD 77         inc b
8456   3A1D FA FF FF      lea d, [bp + -1] ; $i
8457   3A20 FD 43         mov [d], b
8458   3A22 27            mov b, a
8459   3A23 0A 8E 39      jmp _for196_cond
8460   3A26             _for196_exit:
8461   3A26             ; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x100; 
8462   3A26 3B AD 6D      mov d, _map_data ; $map
8463   3A29 D7            push a
8464   3A2A DA            push d
8465   3A2B 3B 60 6E      mov d, _quad_y ; $quad_y
8466   3A2E 2A            mov b, [d]
8467   3A2F 38 00 00      mov c, 0
8468   3A32 E7            pop d
8469   3A33 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8470   3A37 DA            push d
8471   3A38 3B 62 6E      mov d, _quad_x ; $quad_x
8472   3A3B 2A            mov b, [d]
8473   3A3C 38 00 00      mov c, 0
8474   3A3F E7            pop d
8475   3A40 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8476   3A44 E4            pop a
8477   3A45 DA            push d
8478   3A46 3B AD 6D      mov d, _map_data ; $map
8479   3A49 D7            push a
8480   3A4A DA            push d
8481   3A4B 3B 60 6E      mov d, _quad_y ; $quad_y
8482   3A4E 2A            mov b, [d]
8483   3A4F 38 00 00      mov c, 0
8484   3A52 E7            pop d
8485   3A53 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8486   3A57 DA            push d
8487   3A58 3B 62 6E      mov d, _quad_x ; $quad_x
8488   3A5B 2A            mov b, [d]
8489   3A5C 38 00 00      mov c, 0
8490   3A5F E7            pop d
8491   3A60 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8492   3A64 E4            pop a
8493   3A65 2A            mov b, [d]
8494   3A66 38 00 00      mov c, 0
8495   3A69             ; --- START TERMS
8496   3A69 D7            push a
8497   3A6A 11            mov a, b
8498   3A6B FD 2E 00 01   mov32 cb, $00000100
8498   3A6F 00 00 
8499   3A71 60            sub a, b
8500   3A72 27            mov b, a
8501   3A73 E4            pop a
8502   3A74             ; --- END TERMS
8503   3A74 E7            pop d
8504   3A75 FD 43         mov [d], b
8505   3A77             ; break; 
8506   3A77 0A A2 3B      jmp _switch194_exit ; case break
8507   3A7A             _switch194_case2:
8508   3A7A             ; puts("*** Starbase Destroyed ***"); 
8509   3A7A             ; --- START FUNCTION CALL
8510   3A7A 26 E3 79      mov b, _s107 ; "*** Starbase Destroyed ***"
8511   3A7D FD AB         swp b
8512   3A7F D8            push b
8513   3A80 07 85 69      call puts
8514   3A83 51 02 00      add sp, 2
8515   3A86             ; --- END FUNCTION CALL
8516   3A86             ; starbases--; 
8517   3A86 3B 86 6D      mov d, _starbases ; $starbases
8518   3A89 32            mov bl, [d]
8519   3A8A A7 00         mov bh, 0
8520   3A8C 38 00 00      mov c, 0
8521   3A8F FD 7D         dec b
8522   3A91 3B 86 6D      mov d, _starbases ; $starbases
8523   3A94 FD 3E         mov [d], bl
8524   3A96 FD 77         inc b
8525   3A98             ; starbases_left--; 
8526   3A98 3B 89 6D      mov d, _starbases_left ; $starbases_left
8527   3A9B 32            mov bl, [d]
8528   3A9C A7 00         mov bh, 0
8529   3A9E 38 00 00      mov c, 0
8530   3AA1 FD 7D         dec b
8531   3AA3 3B 89 6D      mov d, _starbases_left ; $starbases_left
8532   3AA6 FD 3E         mov [d], bl
8533   3AA8 FD 77         inc b
8534   3AAA             ; if (starbases_left <= 0 && klingons_left <= FROM_FIXED(stardate) - time_start - time_up) { 
8535   3AAA             _if198_cond:
8536   3AAA 3B 89 6D      mov d, _starbases_left ; $starbases_left
8537   3AAD 32            mov bl, [d]
8538   3AAE A7 00         mov bh, 0
8539   3AB0 38 00 00      mov c, 0
8540   3AB3             ; --- START RELATIONAL
8541   3AB3 D7            push a
8542   3AB4 11            mov a, b
8543   3AB5 FD 2E 00 00   mov32 cb, $00000000
8543   3AB9 00 00 
8544   3ABB B0            cmp a, b
8545   3ABC FD 74         sle ; <= (signed)
8546   3ABE E4            pop a
8547   3ABF             ; --- END RELATIONAL
8548   3ABF             ; --- START LOGICAL AND
8549   3ABF D7            push a
8550   3AC0 11            mov a, b
8551   3AC1 3B 5D 6E      mov d, _klingons_left ; $klingons_left
8552   3AC4 32            mov bl, [d]
8553   3AC5 A7 00         mov bh, 0
8554   3AC7 38 00 00      mov c, 0
8555   3ACA             ; --- START RELATIONAL
8556   3ACA D7            push a
8557   3ACB 11            mov a, b
8558   3ACC             ; --- START FUNCTION CALL
8559   3ACC 3B 83 6E      mov d, _stardate ; $stardate
8560   3ACF 2A            mov b, [d]
8561   3AD0 38 00 00      mov c, 0
8562   3AD3 FD AB         swp b
8563   3AD5 D8            push b
8564   3AD6 07 68 04      call FROM_FIXED
8565   3AD9 51 02 00      add sp, 2
8566   3ADC             ; --- END FUNCTION CALL
8567   3ADC             ; --- START TERMS
8568   3ADC D7            push a
8569   3ADD 11            mov a, b
8570   3ADE 3B 67 6E      mov d, _time_start ; $time_start
8571   3AE1 2A            mov b, [d]
8572   3AE2 38 00 00      mov c, 0
8573   3AE5 60            sub a, b
8574   3AE6 27            mov b, a
8575   3AE7 11            mov a, b
8576   3AE8 3B 69 6E      mov d, _time_up ; $time_up
8577   3AEB 2A            mov b, [d]
8578   3AEC 38 00 00      mov c, 0
8579   3AEF 60            sub a, b
8580   3AF0 27            mov b, a
8581   3AF1 E4            pop a
8582   3AF2             ; --- END TERMS
8583   3AF2 B0            cmp a, b
8584   3AF3 FD 76         sleu ; <= (unsigned)
8585   3AF5 E4            pop a
8586   3AF6             ; --- END RELATIONAL
8587   3AF6 FD A7         sand a, b
8588   3AF8 E4            pop a
8589   3AF9             ; --- END LOGICAL AND
8590   3AF9 C0 00 00      cmp b, 0
8591   3AFC C6 35 3B      je _if198_exit
8592   3AFF             _if198_TRUE:
8593   3AFF             ; puts("That does it, Captain!!"); 
8594   3AFF             ; --- START FUNCTION CALL
8595   3AFF 26 FE 79      mov b, _s108 ; "That does it, Captain!!"
8596   3B02 FD AB         swp b
8597   3B04 D8            push b
8598   3B05 07 85 69      call puts
8599   3B08 51 02 00      add sp, 2
8600   3B0B             ; --- END FUNCTION CALL
8601   3B0B             ; puts("You are hereby relieved of command\n"); 
8602   3B0B             ; --- START FUNCTION CALL
8603   3B0B 26 16 7A      mov b, _s109 ; "You are hereby relieved of command\n"
8604   3B0E FD AB         swp b
8605   3B10 D8            push b
8606   3B11 07 85 69      call puts
8607   3B14 51 02 00      add sp, 2
8608   3B17             ; --- END FUNCTION CALL
8609   3B17             ; puts("and sentenced to 99 stardates of hard"); 
8610   3B17             ; --- START FUNCTION CALL
8611   3B17 26 3A 7A      mov b, _s110 ; "and sentenced to 99 stardates of hard"
8612   3B1A FD AB         swp b
8613   3B1C D8            push b
8614   3B1D 07 85 69      call puts
8615   3B20 51 02 00      add sp, 2
8616   3B23             ; --- END FUNCTION CALL
8617   3B23             ; puts("labor on Cygnus 12!!\n"); 
8618   3B23             ; --- START FUNCTION CALL
8619   3B23 26 60 7A      mov b, _s111 ; "labor on Cygnus 12!!\n"
8620   3B26 FD AB         swp b
8621   3B28 D8            push b
8622   3B29 07 85 69      call puts
8623   3B2C 51 02 00      add sp, 2
8624   3B2F             ; --- END FUNCTION CALL
8625   3B2F             ; resign_commision(); 
8626   3B2F             ; --- START FUNCTION CALL
8627   3B2F 07 09 4F      call resign_commision
8628   3B32 0A 35 3B      jmp _if198_exit
8629   3B35             _if198_exit:
8630   3B35             ; puts("Starfleet Command reviewing your record to consider\n court martial!\n"); 
8631   3B35             ; --- START FUNCTION CALL
8632   3B35 26 76 7A      mov b, _s112 ; "Starfleet Command reviewing your record to consider\n court martial!\n"
8633   3B38 FD AB         swp b
8634   3B3A D8            push b
8635   3B3B 07 85 69      call puts
8636   3B3E 51 02 00      add sp, 2
8637   3B41             ; --- END FUNCTION CALL
8638   3B41             ; docked = 0;		/* Undock */ 
8639   3B41 3B A8 6D      mov d, _docked ; $docked
8640   3B44 DA            push d
8641   3B45 FD 2E 00 00   mov32 cb, $00000000
8641   3B49 00 00 
8642   3B4B E7            pop d
8643   3B4C FD 3E         mov [d], bl
8644   3B4E             ; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x10; 
8645   3B4E 3B AD 6D      mov d, _map_data ; $map
8646   3B51 D7            push a
8647   3B52 DA            push d
8648   3B53 3B 60 6E      mov d, _quad_y ; $quad_y
8649   3B56 2A            mov b, [d]
8650   3B57 38 00 00      mov c, 0
8651   3B5A E7            pop d
8652   3B5B FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8653   3B5F DA            push d
8654   3B60 3B 62 6E      mov d, _quad_x ; $quad_x
8655   3B63 2A            mov b, [d]
8656   3B64 38 00 00      mov c, 0
8657   3B67 E7            pop d
8658   3B68 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8659   3B6C E4            pop a
8660   3B6D DA            push d
8661   3B6E 3B AD 6D      mov d, _map_data ; $map
8662   3B71 D7            push a
8663   3B72 DA            push d
8664   3B73 3B 60 6E      mov d, _quad_y ; $quad_y
8665   3B76 2A            mov b, [d]
8666   3B77 38 00 00      mov c, 0
8667   3B7A E7            pop d
8668   3B7B FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8669   3B7F DA            push d
8670   3B80 3B 62 6E      mov d, _quad_x ; $quad_x
8671   3B83 2A            mov b, [d]
8672   3B84 38 00 00      mov c, 0
8673   3B87 E7            pop d
8674   3B88 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8675   3B8C E4            pop a
8676   3B8D 2A            mov b, [d]
8677   3B8E 38 00 00      mov c, 0
8678   3B91             ; --- START TERMS
8679   3B91 D7            push a
8680   3B92 11            mov a, b
8681   3B93 FD 2E 10 00   mov32 cb, $00000010
8681   3B97 00 00 
8682   3B99 60            sub a, b
8683   3B9A 27            mov b, a
8684   3B9B E4            pop a
8685   3B9C             ; --- END TERMS
8686   3B9C E7            pop d
8687   3B9D FD 43         mov [d], b
8688   3B9F             ; break; 
8689   3B9F 0A A2 3B      jmp _switch194_exit ; case break
8690   3BA2             _switch194_exit:
8691   3BA2             ; quad[yp+-1][xp+-1] = 		0       ; 
8692   3BA2 3B 85 6E      mov d, _quad_data ; $quad
8693   3BA5 D7            push a
8694   3BA6 DA            push d
8695   3BA7 FA 05 00      lea d, [bp + 5] ; $yp
8696   3BAA 32            mov bl, [d]
8697   3BAB A7 00         mov bh, 0
8698   3BAD 38 00 00      mov c, 0
8699   3BB0             ; --- START TERMS
8700   3BB0 D7            push a
8701   3BB1 11            mov a, b
8702   3BB2 FD 2E FF FF   mov32 cb, $ffffffff
8702   3BB6 FF FF 
8703   3BB8 56            add b, a
8704   3BB9 E4            pop a
8705   3BBA             ; --- END TERMS
8706   3BBA E7            pop d
8707   3BBB FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8708   3BBF DA            push d
8709   3BC0 FA 06 00      lea d, [bp + 6] ; $xp
8710   3BC3 32            mov bl, [d]
8711   3BC4 A7 00         mov bh, 0
8712   3BC6 38 00 00      mov c, 0
8713   3BC9             ; --- START TERMS
8714   3BC9 D7            push a
8715   3BCA 11            mov a, b
8716   3BCB FD 2E FF FF   mov32 cb, $ffffffff
8716   3BCF FF FF 
8717   3BD1 56            add b, a
8718   3BD2 E4            pop a
8719   3BD3             ; --- END TERMS
8720   3BD3 E7            pop d
8721   3BD4 5A            add d, b
8722   3BD5 E4            pop a
8723   3BD6 DA            push d
8724   3BD7 FD 2E 00 00   mov32 cb, $00000000
8724   3BDB 00 00 
8725   3BDD E7            pop d
8726   3BDE FD 3E         mov [d], bl
8727   3BE0 F9            leave
8728   3BE1 09            ret
8729   3BE2             
8730   3BE2             damage_control:
8731   3BE2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8732   3BE5             ; int        repair_cost = 0; 
8733   3BE5 52 02 00      sub sp, 2
8734   3BE8             ; --- START LOCAL VAR INITIALIZATION
8735   3BE8 FA FF FF      lea d, [bp + -1] ; $repair_cost
8736   3BEB DA            push d
8737   3BEC FD 2E 00 00   mov32 cb, $00000000
8737   3BF0 00 00 
8738   3BF2 E7            pop d
8739   3BF3 FD 43         mov [d], b
8740   3BF5             ; --- END LOCAL VAR INITIALIZATION
8741   3BF5             ; int i; 
8742   3BF5 52 02 00      sub sp, 2
8743   3BF8             ; if (damage[6] < 0) 
8744   3BF8             _if199_cond:
8745   3BF8 3B 6B 6E      mov d, _damage_data ; $damage
8746   3BFB D7            push a
8747   3BFC DA            push d
8748   3BFD FD 2E 06 00   mov32 cb, $00000006
8748   3C01 00 00 
8749   3C03 E7            pop d
8750   3C04 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8751   3C08 E4            pop a
8752   3C09 2A            mov b, [d]
8753   3C0A 38 00 00      mov c, 0
8754   3C0D             ; --- START RELATIONAL
8755   3C0D D7            push a
8756   3C0E 11            mov a, b
8757   3C0F FD 2E 00 00   mov32 cb, $00000000
8757   3C13 00 00 
8758   3C15 B0            cmp a, b
8759   3C16 FD 73         slt ; < (signed)
8760   3C18 E4            pop a
8761   3C19             ; --- END RELATIONAL
8762   3C19 C0 00 00      cmp b, 0
8763   3C1C C6 2E 3C      je _if199_exit
8764   3C1F             _if199_TRUE:
8765   3C1F             ; puts("Damage Control report not available."); 
8766   3C1F             ; --- START FUNCTION CALL
8767   3C1F 26 BB 7A      mov b, _s113 ; "Damage Control report not available."
8768   3C22 FD AB         swp b
8769   3C24 D8            push b
8770   3C25 07 85 69      call puts
8771   3C28 51 02 00      add sp, 2
8772   3C2B             ; --- END FUNCTION CALL
8773   3C2B 0A 2E 3C      jmp _if199_exit
8774   3C2E             _if199_exit:
8775   3C2E             ; if (docked) { 
8776   3C2E             _if200_cond:
8777   3C2E 3B A8 6D      mov d, _docked ; $docked
8778   3C31 32            mov bl, [d]
8779   3C32 A7 00         mov bh, 0
8780   3C34 38 00 00      mov c, 0
8781   3C37 C0 00 00      cmp b, 0
8782   3C3A C6 0A 3E      je _if200_exit
8783   3C3D             _if200_TRUE:
8784   3C3D             ; repair_cost = 0; 
8785   3C3D FA FF FF      lea d, [bp + -1] ; $repair_cost
8786   3C40 DA            push d
8787   3C41 FD 2E 00 00   mov32 cb, $00000000
8787   3C45 00 00 
8788   3C47 E7            pop d
8789   3C48 FD 43         mov [d], b
8790   3C4A             ; for (i = 1; i <= 8; i++) 
8791   3C4A             _for201_init:
8792   3C4A FA FD FF      lea d, [bp + -3] ; $i
8793   3C4D DA            push d
8794   3C4E FD 2E 01 00   mov32 cb, $00000001
8794   3C52 00 00 
8795   3C54 E7            pop d
8796   3C55 FD 43         mov [d], b
8797   3C57             _for201_cond:
8798   3C57 FA FD FF      lea d, [bp + -3] ; $i
8799   3C5A 2A            mov b, [d]
8800   3C5B 38 00 00      mov c, 0
8801   3C5E             ; --- START RELATIONAL
8802   3C5E D7            push a
8803   3C5F 11            mov a, b
8804   3C60 FD 2E 08 00   mov32 cb, $00000008
8804   3C64 00 00 
8805   3C66 B0            cmp a, b
8806   3C67 FD 74         sle ; <= (signed)
8807   3C69 E4            pop a
8808   3C6A             ; --- END RELATIONAL
8809   3C6A C0 00 00      cmp b, 0
8810   3C6D C6 C6 3C      je _for201_exit
8811   3C70             _for201_block:
8812   3C70             ; if (damage[i] < 0) 
8813   3C70             _if202_cond:
8814   3C70 3B 6B 6E      mov d, _damage_data ; $damage
8815   3C73 D7            push a
8816   3C74 DA            push d
8817   3C75 FA FD FF      lea d, [bp + -3] ; $i
8818   3C78 2A            mov b, [d]
8819   3C79 38 00 00      mov c, 0
8820   3C7C E7            pop d
8821   3C7D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8822   3C81 E4            pop a
8823   3C82 2A            mov b, [d]
8824   3C83 38 00 00      mov c, 0
8825   3C86             ; --- START RELATIONAL
8826   3C86 D7            push a
8827   3C87 11            mov a, b
8828   3C88 FD 2E 00 00   mov32 cb, $00000000
8828   3C8C 00 00 
8829   3C8E B0            cmp a, b
8830   3C8F FD 73         slt ; < (signed)
8831   3C91 E4            pop a
8832   3C92             ; --- END RELATIONAL
8833   3C92 C0 00 00      cmp b, 0
8834   3C95 C6 B3 3C      je _if202_exit
8835   3C98             _if202_TRUE:
8836   3C98             ; repair_cost = repair_cost + 10; 
8837   3C98 FA FF FF      lea d, [bp + -1] ; $repair_cost
8838   3C9B DA            push d
8839   3C9C FA FF FF      lea d, [bp + -1] ; $repair_cost
8840   3C9F 2A            mov b, [d]
8841   3CA0 38 00 00      mov c, 0
8842   3CA3             ; --- START TERMS
8843   3CA3 D7            push a
8844   3CA4 11            mov a, b
8845   3CA5 FD 2E 0A 00   mov32 cb, $0000000a
8845   3CA9 00 00 
8846   3CAB 56            add b, a
8847   3CAC E4            pop a
8848   3CAD             ; --- END TERMS
8849   3CAD E7            pop d
8850   3CAE FD 43         mov [d], b
8851   3CB0 0A B3 3C      jmp _if202_exit
8852   3CB3             _if202_exit:
8853   3CB3             _for201_update:
8854   3CB3 FA FD FF      lea d, [bp + -3] ; $i
8855   3CB6 2A            mov b, [d]
8856   3CB7 38 00 00      mov c, 0
8857   3CBA 11            mov a, b
8858   3CBB FD 77         inc b
8859   3CBD FA FD FF      lea d, [bp + -3] ; $i
8860   3CC0 FD 43         mov [d], b
8861   3CC2 27            mov b, a
8862   3CC3 0A 57 3C      jmp _for201_cond
8863   3CC6             _for201_exit:
8864   3CC6             ; if (repair_cost) { 
8865   3CC6             _if203_cond:
8866   3CC6 FA FF FF      lea d, [bp + -1] ; $repair_cost
8867   3CC9 2A            mov b, [d]
8868   3CCA 38 00 00      mov c, 0
8869   3CCD C0 00 00      cmp b, 0
8870   3CD0 C6 07 3E      je _if203_exit
8871   3CD3             _if203_TRUE:
8872   3CD3             ; repair_cost = repair_cost + d4; 
8873   3CD3 FA FF FF      lea d, [bp + -1] ; $repair_cost
8874   3CD6 DA            push d
8875   3CD7 FA FF FF      lea d, [bp + -1] ; $repair_cost
8876   3CDA 2A            mov b, [d]
8877   3CDB 38 00 00      mov c, 0
8878   3CDE             ; --- START TERMS
8879   3CDE D7            push a
8880   3CDF 11            mov a, b
8881   3CE0 3B 7D 6E      mov d, _d4 ; $d4
8882   3CE3 2A            mov b, [d]
8883   3CE4 38 00 00      mov c, 0
8884   3CE7 56            add b, a
8885   3CE8 E4            pop a
8886   3CE9             ; --- END TERMS
8887   3CE9 E7            pop d
8888   3CEA FD 43         mov [d], b
8889   3CEC             ; if (repair_cost >= 100) 
8890   3CEC             _if204_cond:
8891   3CEC FA FF FF      lea d, [bp + -1] ; $repair_cost
8892   3CEF 2A            mov b, [d]
8893   3CF0 38 00 00      mov c, 0
8894   3CF3             ; --- START RELATIONAL
8895   3CF3 D7            push a
8896   3CF4 11            mov a, b
8897   3CF5 FD 2E 64 00   mov32 cb, $00000064
8897   3CF9 00 00 
8898   3CFB B0            cmp a, b
8899   3CFC FD 80         sge ; >=
8900   3CFE E4            pop a
8901   3CFF             ; --- END RELATIONAL
8902   3CFF C0 00 00      cmp b, 0
8903   3D02 C6 15 3D      je _if204_exit
8904   3D05             _if204_TRUE:
8905   3D05             ; repair_cost = 90;	/* 0.9 */ 
8906   3D05 FA FF FF      lea d, [bp + -1] ; $repair_cost
8907   3D08 DA            push d
8908   3D09 FD 2E 5A 00   mov32 cb, $0000005a
8908   3D0D 00 00 
8909   3D0F E7            pop d
8910   3D10 FD 43         mov [d], b
8911   3D12 0A 15 3D      jmp _if204_exit
8912   3D15             _if204_exit:
8913   3D15             ; printf("\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? ", print100(repair_cost)); 
8914   3D15             ; --- START FUNCTION CALL
8915   3D15             ; --- START FUNCTION CALL
8916   3D15 FA FF FF      lea d, [bp + -1] ; $repair_cost
8917   3D18 2A            mov b, [d]
8918   3D19 38 00 00      mov c, 0
8919   3D1C FD AB         swp b
8920   3D1E D8            push b
8921   3D1F 07 12 09      call print100
8922   3D22 51 02 00      add sp, 2
8923   3D25             ; --- END FUNCTION CALL
8924   3D25 FD AB         swp b
8925   3D27 D8            push b
8926   3D28 26 E0 7A      mov b, _s114 ; "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? "
8927   3D2B FD AB         swp b
8928   3D2D D8            push b
8929   3D2E 07 78 60      call printf
8930   3D31 51 04 00      add sp, 4
8931   3D34             ; --- END FUNCTION CALL
8932   3D34             ; if (yesno()) { 
8933   3D34             _if205_cond:
8934   3D34             ; --- START FUNCTION CALL
8935   3D34 07 31 06      call yesno
8936   3D37 C0 00 00      cmp b, 0
8937   3D3A C6 02 3E      je _if205_exit
8938   3D3D             _if205_TRUE:
8939   3D3D             ; for (i = 1; i <= 8; i++) 
8940   3D3D             _for206_init:
8941   3D3D FA FD FF      lea d, [bp + -3] ; $i
8942   3D40 DA            push d
8943   3D41 FD 2E 01 00   mov32 cb, $00000001
8943   3D45 00 00 
8944   3D47 E7            pop d
8945   3D48 FD 43         mov [d], b
8946   3D4A             _for206_cond:
8947   3D4A FA FD FF      lea d, [bp + -3] ; $i
8948   3D4D 2A            mov b, [d]
8949   3D4E 38 00 00      mov c, 0
8950   3D51             ; --- START RELATIONAL
8951   3D51 D7            push a
8952   3D52 11            mov a, b
8953   3D53 FD 2E 08 00   mov32 cb, $00000008
8953   3D57 00 00 
8954   3D59 B0            cmp a, b
8955   3D5A FD 74         sle ; <= (signed)
8956   3D5C E4            pop a
8957   3D5D             ; --- END RELATIONAL
8958   3D5D C0 00 00      cmp b, 0
8959   3D60 C6 BD 3D      je _for206_exit
8960   3D63             _for206_block:
8961   3D63             ; if (damage[i] < 0) 
8962   3D63             _if207_cond:
8963   3D63 3B 6B 6E      mov d, _damage_data ; $damage
8964   3D66 D7            push a
8965   3D67 DA            push d
8966   3D68 FA FD FF      lea d, [bp + -3] ; $i
8967   3D6B 2A            mov b, [d]
8968   3D6C 38 00 00      mov c, 0
8969   3D6F E7            pop d
8970   3D70 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8971   3D74 E4            pop a
8972   3D75 2A            mov b, [d]
8973   3D76 38 00 00      mov c, 0
8974   3D79             ; --- START RELATIONAL
8975   3D79 D7            push a
8976   3D7A 11            mov a, b
8977   3D7B FD 2E 00 00   mov32 cb, $00000000
8977   3D7F 00 00 
8978   3D81 B0            cmp a, b
8979   3D82 FD 73         slt ; < (signed)
8980   3D84 E4            pop a
8981   3D85             ; --- END RELATIONAL
8982   3D85 C0 00 00      cmp b, 0
8983   3D88 C6 AA 3D      je _if207_exit
8984   3D8B             _if207_TRUE:
8985   3D8B             ; damage[i] = 0; 
8986   3D8B 3B 6B 6E      mov d, _damage_data ; $damage
8987   3D8E D7            push a
8988   3D8F DA            push d
8989   3D90 FA FD FF      lea d, [bp + -3] ; $i
8990   3D93 2A            mov b, [d]
8991   3D94 38 00 00      mov c, 0
8992   3D97 E7            pop d
8993   3D98 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8994   3D9C E4            pop a
8995   3D9D DA            push d
8996   3D9E FD 2E 00 00   mov32 cb, $00000000
8996   3DA2 00 00 
8997   3DA4 E7            pop d
8998   3DA5 FD 43         mov [d], b
8999   3DA7 0A AA 3D      jmp _if207_exit
9000   3DAA             _if207_exit:
9001   3DAA             _for206_update:
9002   3DAA FA FD FF      lea d, [bp + -3] ; $i
9003   3DAD 2A            mov b, [d]
9004   3DAE 38 00 00      mov c, 0
9005   3DB1 11            mov a, b
9006   3DB2 FD 77         inc b
9007   3DB4 FA FD FF      lea d, [bp + -3] ; $i
9008   3DB7 FD 43         mov [d], b
9009   3DB9 27            mov b, a
9010   3DBA 0A 4A 3D      jmp _for206_cond
9011   3DBD             _for206_exit:
9012   3DBD             ; stardate = stardate + (repair_cost + 5)/10 + 1; 
9013   3DBD 3B 83 6E      mov d, _stardate ; $stardate
9014   3DC0 DA            push d
9015   3DC1 3B 83 6E      mov d, _stardate ; $stardate
9016   3DC4 2A            mov b, [d]
9017   3DC5 38 00 00      mov c, 0
9018   3DC8             ; --- START TERMS
9019   3DC8 D7            push a
9020   3DC9 11            mov a, b
9021   3DCA FA FF FF      lea d, [bp + -1] ; $repair_cost
9022   3DCD 2A            mov b, [d]
9023   3DCE 38 00 00      mov c, 0
9024   3DD1             ; --- START TERMS
9025   3DD1 D7            push a
9026   3DD2 11            mov a, b
9027   3DD3 FD 2E 05 00   mov32 cb, $00000005
9027   3DD7 00 00 
9028   3DD9 56            add b, a
9029   3DDA E4            pop a
9030   3DDB             ; --- END TERMS
9031   3DDB             ; --- START FACTORS
9032   3DDB D7            push a
9033   3DDC FD D8         push g
9034   3DDE 11            mov a, b
9035   3DDF FD 7A         mov g, c
9036   3DE1 FD 2E 0A 00   mov32 cb, $0000000a
9036   3DE5 00 00 
9037   3DE7 FD D8         push g ; save 'g' as the div instruction uses it
9038   3DE9 AE            div a, b ; /, a: quotient, b: remainder
9039   3DEA FD F1         pop g
9040   3DEC FD 38         mov c, g
9041   3DEE 27            mov b, a
9042   3DEF FD F1         pop g
9043   3DF1 E4            pop a
9044   3DF2             ; --- END FACTORS
9045   3DF2 56            add b, a
9046   3DF3 11            mov a, b
9047   3DF4 FD 2E 01 00   mov32 cb, $00000001
9047   3DF8 00 00 
9048   3DFA 56            add b, a
9049   3DFB E4            pop a
9050   3DFC             ; --- END TERMS
9051   3DFC E7            pop d
9052   3DFD FD 43         mov [d], b
9053   3DFF 0A 02 3E      jmp _if205_exit
9054   3E02             _if205_exit:
9055   3E02             ; return; 
9056   3E02 F9            leave
9057   3E03 09            ret
9058   3E04 0A 07 3E      jmp _if203_exit
9059   3E07             _if203_exit:
9060   3E07 0A 0A 3E      jmp _if200_exit
9061   3E0A             _if200_exit:
9062   3E0A             ; if (damage[6] < 0) 
9063   3E0A             _if210_cond:
9064   3E0A 3B 6B 6E      mov d, _damage_data ; $damage
9065   3E0D D7            push a
9066   3E0E DA            push d
9067   3E0F FD 2E 06 00   mov32 cb, $00000006
9067   3E13 00 00 
9068   3E15 E7            pop d
9069   3E16 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9070   3E1A E4            pop a
9071   3E1B 2A            mov b, [d]
9072   3E1C 38 00 00      mov c, 0
9073   3E1F             ; --- START RELATIONAL
9074   3E1F D7            push a
9075   3E20 11            mov a, b
9076   3E21 FD 2E 00 00   mov32 cb, $00000000
9076   3E25 00 00 
9077   3E27 B0            cmp a, b
9078   3E28 FD 73         slt ; < (signed)
9079   3E2A E4            pop a
9080   3E2B             ; --- END RELATIONAL
9081   3E2B C0 00 00      cmp b, 0
9082   3E2E C6 36 3E      je _if210_exit
9083   3E31             _if210_TRUE:
9084   3E31             ; return; 
9085   3E31 F9            leave
9086   3E32 09            ret
9087   3E33 0A 36 3E      jmp _if210_exit
9088   3E36             _if210_exit:
9089   3E36             ; puts("Device            State of Repair"); 
9090   3E36             ; --- START FUNCTION CALL
9091   3E36 26 6E 7B      mov b, _s115 ; "Device            State of Repair"
9092   3E39 FD AB         swp b
9093   3E3B D8            push b
9094   3E3C 07 85 69      call puts
9095   3E3F 51 02 00      add sp, 2
9096   3E42             ; --- END FUNCTION CALL
9097   3E42             ; for (i = 1; i <= 8; i++) 
9098   3E42             _for211_init:
9099   3E42 FA FD FF      lea d, [bp + -3] ; $i
9100   3E45 DA            push d
9101   3E46 FD 2E 01 00   mov32 cb, $00000001
9101   3E4A 00 00 
9102   3E4C E7            pop d
9103   3E4D FD 43         mov [d], b
9104   3E4F             _for211_cond:
9105   3E4F FA FD FF      lea d, [bp + -3] ; $i
9106   3E52 2A            mov b, [d]
9107   3E53 38 00 00      mov c, 0
9108   3E56             ; --- START RELATIONAL
9109   3E56 D7            push a
9110   3E57 11            mov a, b
9111   3E58 FD 2E 08 00   mov32 cb, $00000008
9111   3E5C 00 00 
9112   3E5E B0            cmp a, b
9113   3E5F FD 74         sle ; <= (signed)
9114   3E61 E4            pop a
9115   3E62             ; --- END RELATIONAL
9116   3E62 C0 00 00      cmp b, 0
9117   3E65 C6 BC 3E      je _for211_exit
9118   3E68             _for211_block:
9119   3E68             ; printf("%-25s%6s\n", get_device_name(i), print100(damage[i])); 
9120   3E68             ; --- START FUNCTION CALL
9121   3E68             ; --- START FUNCTION CALL
9122   3E68 3B 6B 6E      mov d, _damage_data ; $damage
9123   3E6B D7            push a
9124   3E6C DA            push d
9125   3E6D FA FD FF      lea d, [bp + -3] ; $i
9126   3E70 2A            mov b, [d]
9127   3E71 38 00 00      mov c, 0
9128   3E74 E7            pop d
9129   3E75 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9130   3E79 E4            pop a
9131   3E7A 2A            mov b, [d]
9132   3E7B 38 00 00      mov c, 0
9133   3E7E FD AB         swp b
9134   3E80 D8            push b
9135   3E81 07 12 09      call print100
9136   3E84 51 02 00      add sp, 2
9137   3E87             ; --- END FUNCTION CALL
9138   3E87 FD AB         swp b
9139   3E89 D8            push b
9140   3E8A             ; --- START FUNCTION CALL
9141   3E8A FA FD FF      lea d, [bp + -3] ; $i
9142   3E8D 2A            mov b, [d]
9143   3E8E 38 00 00      mov c, 0
9144   3E91 FD AB         swp b
9145   3E93 D8            push b
9146   3E94 07 63 59      call get_device_name
9147   3E97 51 02 00      add sp, 2
9148   3E9A             ; --- END FUNCTION CALL
9149   3E9A FD AB         swp b
9150   3E9C D8            push b
9151   3E9D 26 90 7B      mov b, _s116 ; "%-25s%6s\n"
9152   3EA0 FD AB         swp b
9153   3EA2 D8            push b
9154   3EA3 07 78 60      call printf
9155   3EA6 51 06 00      add sp, 6
9156   3EA9             ; --- END FUNCTION CALL
9157   3EA9             _for211_update:
9158   3EA9 FA FD FF      lea d, [bp + -3] ; $i
9159   3EAC 2A            mov b, [d]
9160   3EAD 38 00 00      mov c, 0
9161   3EB0 11            mov a, b
9162   3EB1 FD 77         inc b
9163   3EB3 FA FD FF      lea d, [bp + -3] ; $i
9164   3EB6 FD 43         mov [d], b
9165   3EB8 27            mov b, a
9166   3EB9 0A 4F 3E      jmp _for211_cond
9167   3EBC             _for211_exit:
9168   3EBC             ; printf("\n"); 
9169   3EBC             ; --- START FUNCTION CALL
9170   3EBC 26 9A 7B      mov b, _s117 ; "\n"
9171   3EBF FD AB         swp b
9172   3EC1 D8            push b
9173   3EC2 07 78 60      call printf
9174   3EC5 51 02 00      add sp, 2
9175   3EC8             ; --- END FUNCTION CALL
9176   3EC8 F9            leave
9177   3EC9 09            ret
9178   3ECA             
9179   3ECA             shield_control:
9180   3ECA F8 00 00      enter 0 ; (push bp; mov bp, sp)
9181   3ECD             ; int i; 
9182   3ECD 52 02 00      sub sp, 2
9183   3ED0             ; if (inoperable(7)) 
9184   3ED0             _if212_cond:
9185   3ED0             ; --- START FUNCTION CALL
9186   3ED0 FD 2E 07 00   mov32 cb, $00000007
9186   3ED4 00 00 
9187   3ED6 DD            push bl
9188   3ED7 07 7C 09      call inoperable
9189   3EDA 51 01 00      add sp, 1
9190   3EDD             ; --- END FUNCTION CALL
9191   3EDD C0 00 00      cmp b, 0
9192   3EE0 C6 E8 3E      je _if212_exit
9193   3EE3             _if212_TRUE:
9194   3EE3             ; return; 
9195   3EE3 F9            leave
9196   3EE4 09            ret
9197   3EE5 0A E8 3E      jmp _if212_exit
9198   3EE8             _if212_exit:
9199   3EE8             ; printf("Energy available = %d\n\n Input number of units to shields: ", energy + shield); 
9200   3EE8             ; --- START FUNCTION CALL
9201   3EE8 3B A9 6D      mov d, _energy ; $energy
9202   3EEB 2A            mov b, [d]
9203   3EEC 38 00 00      mov c, 0
9204   3EEF             ; --- START TERMS
9205   3EEF D7            push a
9206   3EF0 11            mov a, b
9207   3EF1 3B 64 6E      mov d, _shield ; $shield
9208   3EF4 2A            mov b, [d]
9209   3EF5 38 00 00      mov c, 0
9210   3EF8 56            add b, a
9211   3EF9 E4            pop a
9212   3EFA             ; --- END TERMS
9213   3EFA FD AB         swp b
9214   3EFC D8            push b
9215   3EFD 26 9C 7B      mov b, _s118 ; "Energy available = %d\n\n Input number of units to shields: "
9216   3F00 FD AB         swp b
9217   3F02 D8            push b
9218   3F03 07 78 60      call printf
9219   3F06 51 04 00      add sp, 4
9220   3F09             ; --- END FUNCTION CALL
9221   3F09             ; i = input_int(); 
9222   3F09 FA FF FF      lea d, [bp + -1] ; $i
9223   3F0C DA            push d
9224   3F0D             ; --- START FUNCTION CALL
9225   3F0D 07 BD 08      call input_int
9226   3F10 E7            pop d
9227   3F11 FD 43         mov [d], b
9228   3F13             ; if (i < 0 || shield == i) { 
9229   3F13             _if213_cond:
9230   3F13 FA FF FF      lea d, [bp + -1] ; $i
9231   3F16 2A            mov b, [d]
9232   3F17 38 00 00      mov c, 0
9233   3F1A             ; --- START RELATIONAL
9234   3F1A D7            push a
9235   3F1B 11            mov a, b
9236   3F1C FD 2E 00 00   mov32 cb, $00000000
9236   3F20 00 00 
9237   3F22 B0            cmp a, b
9238   3F23 FD 73         slt ; < (signed)
9239   3F25 E4            pop a
9240   3F26             ; --- END RELATIONAL
9241   3F26             ; --- START LOGICAL OR
9242   3F26 D7            push a
9243   3F27 11            mov a, b
9244   3F28 3B 64 6E      mov d, _shield ; $shield
9245   3F2B 2A            mov b, [d]
9246   3F2C 38 00 00      mov c, 0
9247   3F2F             ; --- START RELATIONAL
9248   3F2F D7            push a
9249   3F30 11            mov a, b
9250   3F31 FA FF FF      lea d, [bp + -1] ; $i
9251   3F34 2A            mov b, [d]
9252   3F35 38 00 00      mov c, 0
9253   3F38 B0            cmp a, b
9254   3F39 FD 71         seq ; ==
9255   3F3B E4            pop a
9256   3F3C             ; --- END RELATIONAL
9257   3F3C FD A8         sor a, b ; ||
9258   3F3E E4            pop a
9259   3F3F             ; --- END LOGICAL OR
9260   3F3F C0 00 00      cmp b, 0
9261   3F42 C6 56 3F      je _if213_exit
9262   3F45             _if213_TRUE:
9263   3F45             ; puts("<Shields Unchanged>\n"); 
9264   3F45             ; --- START FUNCTION CALL
9265   3F45 26 D7 7B      mov b, _s119 ; "<Shields Unchanged>\n"
9266   3F48 FD AB         swp b
9267   3F4A D8            push b
9268   3F4B 07 85 69      call puts
9269   3F4E 51 02 00      add sp, 2
9270   3F51             ; --- END FUNCTION CALL
9271   3F51             ; return; 
9272   3F51 F9            leave
9273   3F52 09            ret
9274   3F53 0A 56 3F      jmp _if213_exit
9275   3F56             _if213_exit:
9276   3F56             ; if (i >= energy + shield) { 
9277   3F56             _if214_cond:
9278   3F56 FA FF FF      lea d, [bp + -1] ; $i
9279   3F59 2A            mov b, [d]
9280   3F5A 38 00 00      mov c, 0
9281   3F5D             ; --- START RELATIONAL
9282   3F5D D7            push a
9283   3F5E 11            mov a, b
9284   3F5F 3B A9 6D      mov d, _energy ; $energy
9285   3F62 2A            mov b, [d]
9286   3F63 38 00 00      mov c, 0
9287   3F66             ; --- START TERMS
9288   3F66 D7            push a
9289   3F67 11            mov a, b
9290   3F68 3B 64 6E      mov d, _shield ; $shield
9291   3F6B 2A            mov b, [d]
9292   3F6C 38 00 00      mov c, 0
9293   3F6F 56            add b, a
9294   3F70 E4            pop a
9295   3F71             ; --- END TERMS
9296   3F71 B0            cmp a, b
9297   3F72 FD 80         sge ; >=
9298   3F74 E4            pop a
9299   3F75             ; --- END RELATIONAL
9300   3F75 C0 00 00      cmp b, 0
9301   3F78 C6 8A 3F      je _if214_exit
9302   3F7B             _if214_TRUE:
9303   3F7B             ; puts("Shield Control Reports:\n  'This is not the Federation Treasury.'"); 
9304   3F7B             ; --- START FUNCTION CALL
9305   3F7B 26 EC 7B      mov b, _s120 ; "Shield Control Reports:\n  'This is not the Federation Treasury.'"
9306   3F7E FD AB         swp b
9307   3F80 D8            push b
9308   3F81 07 85 69      call puts
9309   3F84 51 02 00      add sp, 2
9310   3F87             ; --- END FUNCTION CALL
9311   3F87 0A 8A 3F      jmp _if214_exit
9312   3F8A             _if214_exit:
9313   3F8A             ; energy = energy + shield - i; 
9314   3F8A 3B A9 6D      mov d, _energy ; $energy
9315   3F8D DA            push d
9316   3F8E 3B A9 6D      mov d, _energy ; $energy
9317   3F91 2A            mov b, [d]
9318   3F92 38 00 00      mov c, 0
9319   3F95             ; --- START TERMS
9320   3F95 D7            push a
9321   3F96 11            mov a, b
9322   3F97 3B 64 6E      mov d, _shield ; $shield
9323   3F9A 2A            mov b, [d]
9324   3F9B 38 00 00      mov c, 0
9325   3F9E 56            add b, a
9326   3F9F 11            mov a, b
9327   3FA0 FA FF FF      lea d, [bp + -1] ; $i
9328   3FA3 2A            mov b, [d]
9329   3FA4 38 00 00      mov c, 0
9330   3FA7 60            sub a, b
9331   3FA8 27            mov b, a
9332   3FA9 E4            pop a
9333   3FAA             ; --- END TERMS
9334   3FAA E7            pop d
9335   3FAB FD 43         mov [d], b
9336   3FAD             ; shield = i; 
9337   3FAD 3B 64 6E      mov d, _shield ; $shield
9338   3FB0 DA            push d
9339   3FB1 FA FF FF      lea d, [bp + -1] ; $i
9340   3FB4 2A            mov b, [d]
9341   3FB5 38 00 00      mov c, 0
9342   3FB8 E7            pop d
9343   3FB9 FD 43         mov [d], b
9344   3FBB             ; printf("Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n", shield); 
9345   3FBB             ; --- START FUNCTION CALL
9346   3FBB 3B 64 6E      mov d, _shield ; $shield
9347   3FBE 2A            mov b, [d]
9348   3FBF 38 00 00      mov c, 0
9349   3FC2 FD AB         swp b
9350   3FC4 D8            push b
9351   3FC5 26 2D 7C      mov b, _s121 ; "Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n"
9352   3FC8 FD AB         swp b
9353   3FCA D8            push b
9354   3FCB 07 78 60      call printf
9355   3FCE 51 04 00      add sp, 4
9356   3FD1             ; --- END FUNCTION CALL
9357   3FD1 F9            leave
9358   3FD2 09            ret
9359   3FD3             
9360   3FD3             library_computer:
9361   3FD3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9362   3FD6             ; if (inoperable(8)) 
9363   3FD6             _if215_cond:
9364   3FD6             ; --- START FUNCTION CALL
9365   3FD6 FD 2E 08 00   mov32 cb, $00000008
9365   3FDA 00 00 
9366   3FDC DD            push bl
9367   3FDD 07 7C 09      call inoperable
9368   3FE0 51 01 00      add sp, 1
9369   3FE3             ; --- END FUNCTION CALL
9370   3FE3 C0 00 00      cmp b, 0
9371   3FE6 C6 EE 3F      je _if215_exit
9372   3FE9             _if215_TRUE:
9373   3FE9             ; return; 
9374   3FE9 F9            leave
9375   3FEA 09            ret
9376   3FEB 0A EE 3F      jmp _if215_exit
9377   3FEE             _if215_exit:
9378   3FEE             ; puts("Computer active and awating command: "); 
9379   3FEE             ; --- START FUNCTION CALL
9380   3FEE 26 7C 7C      mov b, _s122 ; "Computer active and awating command: "
9381   3FF1 FD AB         swp b
9382   3FF3 D8            push b
9383   3FF4 07 85 69      call puts
9384   3FF7 51 02 00      add sp, 2
9385   3FFA             ; --- END FUNCTION CALL
9386   3FFA             ; switch(input_int()) { 
9387   3FFA             _switch216_expr:
9388   3FFA             ; --- START FUNCTION CALL
9389   3FFA 07 BD 08      call input_int
9390   3FFD             _switch216_comparisons:
9391   3FFD C0 FF FF      cmp b, -1
9392   4000 C6 2D 40      je _switch216_case0
9393   4003 C0 00 00      cmp b, 0
9394   4006 C6 30 40      je _switch216_case1
9395   4009 C0 01 00      cmp b, 1
9396   400C C6 36 40      je _switch216_case2
9397   400F C0 02 00      cmp b, 2
9398   4012 C6 3C 40      je _switch216_case3
9399   4015 C0 03 00      cmp b, 3
9400   4018 C6 42 40      je _switch216_case4
9401   401B C0 04 00      cmp b, 4
9402   401E C6 48 40      je _switch216_case5
9403   4021 C0 05 00      cmp b, 5
9404   4024 C6 4E 40      je _switch216_case6
9405   4027 0A 54 40      jmp _switch216_default
9406   402A 0A A8 40      jmp _switch216_exit
9407   402D             _switch216_case0:
9408   402D             ; break; 
9409   402D 0A A8 40      jmp _switch216_exit ; case break
9410   4030             _switch216_case1:
9411   4030             ; galactic_record(); 
9412   4030             ; --- START FUNCTION CALL
9413   4030 07 AA 40      call galactic_record
9414   4033             ; break; 
9415   4033 0A A8 40      jmp _switch216_exit ; case break
9416   4036             _switch216_case2:
9417   4036             ; status_report(); 
9418   4036             ; --- START FUNCTION CALL
9419   4036 07 11 42      call status_report
9420   4039             ; break; 
9421   4039 0A A8 40      jmp _switch216_exit ; case break
9422   403C             _switch216_case3:
9423   403C             ; torpedo_data(); 
9424   403C             ; --- START FUNCTION CALL
9425   403C 07 79 43      call torpedo_data
9426   403F             ; break; 
9427   403F 0A A8 40      jmp _switch216_exit ; case break
9428   4042             _switch216_case4:
9429   4042             ; nav_data(); 
9430   4042             ; --- START FUNCTION CALL
9431   4042 07 BB 44      call nav_data
9432   4045             ; break; 
9433   4045 0A A8 40      jmp _switch216_exit ; case break
9434   4048             _switch216_case5:
9435   4048             ; dirdist_calc(); 
9436   4048             ; --- START FUNCTION CALL
9437   4048 07 32 45      call dirdist_calc
9438   404B             ; break; 
9439   404B 0A A8 40      jmp _switch216_exit ; case break
9440   404E             _switch216_case6:
9441   404E             ; galaxy_map(); 
9442   404E             ; --- START FUNCTION CALL
9443   404E 07 FF 46      call galaxy_map
9444   4051             ; break; 
9445   4051 0A A8 40      jmp _switch216_exit ; case break
9446   4054             _switch216_default:
9447   4054             ; puts("Functions available from Library-Computer:\n\n"); 
9448   4054             ; --- START FUNCTION CALL
9449   4054 26 A2 7C      mov b, _s123 ; "Functions available from Library-Computer:\n\n"
9450   4057 FD AB         swp b
9451   4059 D8            push b
9452   405A 07 85 69      call puts
9453   405D 51 02 00      add sp, 2
9454   4060             ; --- END FUNCTION CALL
9455   4060             ; puts("   0 = Cumulative Galactic Record\n"); 
9456   4060             ; --- START FUNCTION CALL
9457   4060 26 CF 7C      mov b, _s124 ; "   0 = Cumulative Galactic Record\n"
9458   4063 FD AB         swp b
9459   4065 D8            push b
9460   4066 07 85 69      call puts
9461   4069 51 02 00      add sp, 2
9462   406C             ; --- END FUNCTION CALL
9463   406C             ; puts("   1 = Status Report\n"); 
9464   406C             ; --- START FUNCTION CALL
9465   406C 26 F2 7C      mov b, _s125 ; "   1 = Status Report\n"
9466   406F FD AB         swp b
9467   4071 D8            push b
9468   4072 07 85 69      call puts
9469   4075 51 02 00      add sp, 2
9470   4078             ; --- END FUNCTION CALL
9471   4078             ; puts("   2 = Photon Torpedo Data\n"); 
9472   4078             ; --- START FUNCTION CALL
9473   4078 26 08 7D      mov b, _s126 ; "   2 = Photon Torpedo Data\n"
9474   407B FD AB         swp b
9475   407D D8            push b
9476   407E 07 85 69      call puts
9477   4081 51 02 00      add sp, 2
9478   4084             ; --- END FUNCTION CALL
9479   4084             ; puts("   3 = Starbase Nav Data\n"); 
9480   4084             ; --- START FUNCTION CALL
9481   4084 26 24 7D      mov b, _s127 ; "   3 = Starbase Nav Data\n"
9482   4087 FD AB         swp b
9483   4089 D8            push b
9484   408A 07 85 69      call puts
9485   408D 51 02 00      add sp, 2
9486   4090             ; --- END FUNCTION CALL
9487   4090             ; puts("   4 = Direction/Distance Calculator\n"); 
9488   4090             ; --- START FUNCTION CALL
9489   4090 26 3E 7D      mov b, _s128 ; "   4 = Direction/Distance Calculator\n"
9490   4093 FD AB         swp b
9491   4095 D8            push b
9492   4096 07 85 69      call puts
9493   4099 51 02 00      add sp, 2
9494   409C             ; --- END FUNCTION CALL
9495   409C             ; puts("   5 = Galaxy 'Region Name' Map\n"); 
9496   409C             ; --- START FUNCTION CALL
9497   409C 26 64 7D      mov b, _s129 ; "   5 = Galaxy 'Region Name' Map\n"
9498   409F FD AB         swp b
9499   40A1 D8            push b
9500   40A2 07 85 69      call puts
9501   40A5 51 02 00      add sp, 2
9502   40A8             ; --- END FUNCTION CALL
9503   40A8             _switch216_exit:
9504   40A8 F9            leave
9505   40A9 09            ret
9506   40AA             
9507   40AA             galactic_record:
9508   40AA F8 00 00      enter 0 ; (push bp; mov bp, sp)
9509   40AD             ; int i, j; 
9510   40AD 52 02 00      sub sp, 2
9511   40B0 52 02 00      sub sp, 2
9512   40B3             ; printf("\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", quad_y, quad_x); 
9513   40B3             ; --- START FUNCTION CALL
9514   40B3 3B 62 6E      mov d, _quad_x ; $quad_x
9515   40B6 2A            mov b, [d]
9516   40B7 38 00 00      mov c, 0
9517   40BA FD AB         swp b
9518   40BC D8            push b
9519   40BD 3B 60 6E      mov d, _quad_y ; $quad_y
9520   40C0 2A            mov b, [d]
9521   40C1 38 00 00      mov c, 0
9522   40C4 FD AB         swp b
9523   40C6 D8            push b
9524   40C7 26 85 7D      mov b, _s130 ; "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n"
9525   40CA FD AB         swp b
9526   40CC D8            push b
9527   40CD 07 78 60      call printf
9528   40D0 51 06 00      add sp, 6
9529   40D3             ; --- END FUNCTION CALL
9530   40D3             ; puts("     1     2     3     4     5     6     7     8"); 
9531   40D3             ; --- START FUNCTION CALL
9532   40D3 26 BA 7D      mov b, _s131 ; "     1     2     3     4     5     6     7     8"
9533   40D6 FD AB         swp b
9534   40D8 D8            push b
9535   40D9 07 85 69      call puts
9536   40DC 51 02 00      add sp, 2
9537   40DF             ; --- END FUNCTION CALL
9538   40DF             ; for (i = 1; i <= 8; i++) { 
9539   40DF             _for217_init:
9540   40DF FA FF FF      lea d, [bp + -1] ; $i
9541   40E2 DA            push d
9542   40E3 FD 2E 01 00   mov32 cb, $00000001
9542   40E7 00 00 
9543   40E9 E7            pop d
9544   40EA FD 43         mov [d], b
9545   40EC             _for217_cond:
9546   40EC FA FF FF      lea d, [bp + -1] ; $i
9547   40EF 2A            mov b, [d]
9548   40F0 38 00 00      mov c, 0
9549   40F3             ; --- START RELATIONAL
9550   40F3 D7            push a
9551   40F4 11            mov a, b
9552   40F5 FD 2E 08 00   mov32 cb, $00000008
9552   40F9 00 00 
9553   40FB B0            cmp a, b
9554   40FC FD 74         sle ; <= (signed)
9555   40FE E4            pop a
9556   40FF             ; --- END RELATIONAL
9557   40FF C0 00 00      cmp b, 0
9558   4102 C6 F9 41      je _for217_exit
9559   4105             _for217_block:
9560   4105             ; printf("%s%d", gr_1, i); 
9561   4105             ; --- START FUNCTION CALL
9562   4105 FA FF FF      lea d, [bp + -1] ; $i
9563   4108 2A            mov b, [d]
9564   4109 38 00 00      mov c, 0
9565   410C FD AB         swp b
9566   410E D8            push b
9567   410F 3B 00 70      mov d, _gr_1 ; $gr_1
9568   4112 2A            mov b, [d]
9569   4113 38 00 00      mov c, 0
9570   4116 FD AB         swp b
9571   4118 D8            push b
9572   4119 26 EB 7D      mov b, _s132 ; "%s%d"
9573   411C FD AB         swp b
9574   411E D8            push b
9575   411F 07 78 60      call printf
9576   4122 51 06 00      add sp, 6
9577   4125             ; --- END FUNCTION CALL
9578   4125             ; for (j = 1; j <= 8; j++) { 
9579   4125             _for218_init:
9580   4125 FA FD FF      lea d, [bp + -3] ; $j
9581   4128 DA            push d
9582   4129 FD 2E 01 00   mov32 cb, $00000001
9582   412D 00 00 
9583   412F E7            pop d
9584   4130 FD 43         mov [d], b
9585   4132             _for218_cond:
9586   4132 FA FD FF      lea d, [bp + -3] ; $j
9587   4135 2A            mov b, [d]
9588   4136 38 00 00      mov c, 0
9589   4139             ; --- START RELATIONAL
9590   4139 D7            push a
9591   413A 11            mov a, b
9592   413B FD 2E 08 00   mov32 cb, $00000008
9592   413F 00 00 
9593   4141 B0            cmp a, b
9594   4142 FD 74         sle ; <= (signed)
9595   4144 E4            pop a
9596   4145             ; --- END RELATIONAL
9597   4145 C0 00 00      cmp b, 0
9598   4148 C6 D9 41      je _for218_exit
9599   414B             _for218_block:
9600   414B             ; printf("   "); 
9601   414B             ; --- START FUNCTION CALL
9602   414B 26 71 71      mov b, _s25 ; "   "
9603   414E FD AB         swp b
9604   4150 D8            push b
9605   4151 07 78 60      call printf
9606   4154 51 02 00      add sp, 2
9607   4157             ; --- END FUNCTION CALL
9608   4157             ; if (map[i][j] &  0x1000		/* Set if this sector was mapped */           ) 
9609   4157             _if219_cond:
9610   4157 3B AD 6D      mov d, _map_data ; $map
9611   415A D7            push a
9612   415B DA            push d
9613   415C FA FF FF      lea d, [bp + -1] ; $i
9614   415F 2A            mov b, [d]
9615   4160 38 00 00      mov c, 0
9616   4163 E7            pop d
9617   4164 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9618   4168 DA            push d
9619   4169 FA FD FF      lea d, [bp + -3] ; $j
9620   416C 2A            mov b, [d]
9621   416D 38 00 00      mov c, 0
9622   4170 E7            pop d
9623   4171 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9624   4175 E4            pop a
9625   4176 2A            mov b, [d]
9626   4177 38 00 00      mov c, 0
9627   417A D7            push a
9628   417B 11            mov a, b
9629   417C FD 2E 00 10   mov32 cb, $00001000
9629   4180 00 00 
9630   4182 FD 92         and b, a ; &
9631   4184 E4            pop a
9632   4185 C0 00 00      cmp b, 0
9633   4188 C6 BA 41      je _if219_else
9634   418B             _if219_TRUE:
9635   418B             ; putbcd(map[i][j]); 
9636   418B             ; --- START FUNCTION CALL
9637   418B 3B AD 6D      mov d, _map_data ; $map
9638   418E D7            push a
9639   418F DA            push d
9640   4190 FA FF FF      lea d, [bp + -1] ; $i
9641   4193 2A            mov b, [d]
9642   4194 38 00 00      mov c, 0
9643   4197 E7            pop d
9644   4198 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9645   419C DA            push d
9646   419D FA FD FF      lea d, [bp + -3] ; $j
9647   41A0 2A            mov b, [d]
9648   41A1 38 00 00      mov c, 0
9649   41A4 E7            pop d
9650   41A5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9651   41A9 E4            pop a
9652   41AA 2A            mov b, [d]
9653   41AB 38 00 00      mov c, 0
9654   41AE FD AB         swp b
9655   41B0 D8            push b
9656   41B1 07 E7 2A      call putbcd
9657   41B4 51 02 00      add sp, 2
9658   41B7             ; --- END FUNCTION CALL
9659   41B7 0A C6 41      jmp _if219_exit
9660   41BA             _if219_else:
9661   41BA             ; printf("***"); 
9662   41BA             ; --- START FUNCTION CALL
9663   41BA 26 D8 77      mov b, _s90 ; "***"
9664   41BD FD AB         swp b
9665   41BF D8            push b
9666   41C0 07 78 60      call printf
9667   41C3 51 02 00      add sp, 2
9668   41C6             ; --- END FUNCTION CALL
9669   41C6             _if219_exit:
9670   41C6             _for218_update:
9671   41C6 FA FD FF      lea d, [bp + -3] ; $j
9672   41C9 2A            mov b, [d]
9673   41CA 38 00 00      mov c, 0
9674   41CD 11            mov a, b
9675   41CE FD 77         inc b
9676   41D0 FA FD FF      lea d, [bp + -3] ; $j
9677   41D3 FD 43         mov [d], b
9678   41D5 27            mov b, a
9679   41D6 0A 32 41      jmp _for218_cond
9680   41D9             _for218_exit:
9681   41D9             ; putchar('\n'); 
9682   41D9             ; --- START FUNCTION CALL
9683   41D9 FD 2E 0A 00   mov32 cb, $0000000a
9683   41DD 00 00 
9684   41DF DD            push bl
9685   41E0 07 FA 64      call putchar
9686   41E3 51 01 00      add sp, 1
9687   41E6             ; --- END FUNCTION CALL
9688   41E6             _for217_update:
9689   41E6 FA FF FF      lea d, [bp + -1] ; $i
9690   41E9 2A            mov b, [d]
9691   41EA 38 00 00      mov c, 0
9692   41ED 11            mov a, b
9693   41EE FD 77         inc b
9694   41F0 FA FF FF      lea d, [bp + -1] ; $i
9695   41F3 FD 43         mov [d], b
9696   41F5 27            mov b, a
9697   41F6 0A EC 40      jmp _for217_cond
9698   41F9             _for217_exit:
9699   41F9             ; printf("%s\n", gr_1); 
9700   41F9             ; --- START FUNCTION CALL
9701   41F9 3B 00 70      mov d, _gr_1 ; $gr_1
9702   41FC 2A            mov b, [d]
9703   41FD 38 00 00      mov c, 0
9704   4200 FD AB         swp b
9705   4202 D8            push b
9706   4203 26 DF 77      mov b, _s92 ; "%s\n"
9707   4206 FD AB         swp b
9708   4208 D8            push b
9709   4209 07 78 60      call printf
9710   420C 51 04 00      add sp, 4
9711   420F             ; --- END FUNCTION CALL
9712   420F F9            leave
9713   4210 09            ret
9714   4211             
9715   4211             status_report:
9716   4211 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9717   4214             ; char *plural; 
9718   4214 52 02 00      sub sp, 2
9719   4217             ; plural = str_s + 1; 
9720   4217 FA FF FF      lea d, [bp + -1] ; $plural
9721   421A DA            push d
9722   421B 3B 04 70      mov d, _str_s ; $str_s
9723   421E 2A            mov b, [d]
9724   421F 38 00 00      mov c, 0
9725   4222             ; --- START TERMS
9726   4222 D7            push a
9727   4223 11            mov a, b
9728   4224 FD 2E 01 00   mov32 cb, $00000001
9728   4228 00 00 
9729   422A 56            add b, a
9730   422B E4            pop a
9731   422C             ; --- END TERMS
9732   422C E7            pop d
9733   422D FD 43         mov [d], b
9734   422F             ; unsigned int         left; 
9735   422F 52 02 00      sub sp, 2
9736   4232             ; left = TO_FIXED(time_start + time_up) - stardate; 
9737   4232 FA FD FF      lea d, [bp + -3] ; $left
9738   4235 DA            push d
9739   4236             ; --- START FUNCTION CALL
9740   4236 3B 67 6E      mov d, _time_start ; $time_start
9741   4239 2A            mov b, [d]
9742   423A 38 00 00      mov c, 0
9743   423D             ; --- START TERMS
9744   423D D7            push a
9745   423E 11            mov a, b
9746   423F 3B 69 6E      mov d, _time_up ; $time_up
9747   4242 2A            mov b, [d]
9748   4243 38 00 00      mov c, 0
9749   4246 56            add b, a
9750   4247 E4            pop a
9751   4248             ; --- END TERMS
9752   4248 FD AB         swp b
9753   424A D8            push b
9754   424B 07 17 04      call TO_FIXED
9755   424E 51 02 00      add sp, 2
9756   4251             ; --- END FUNCTION CALL
9757   4251             ; --- START TERMS
9758   4251 D7            push a
9759   4252 11            mov a, b
9760   4253 3B 83 6E      mov d, _stardate ; $stardate
9761   4256 2A            mov b, [d]
9762   4257 38 00 00      mov c, 0
9763   425A 60            sub a, b
9764   425B 27            mov b, a
9765   425C E4            pop a
9766   425D             ; --- END TERMS
9767   425D E7            pop d
9768   425E FD 43         mov [d], b
9769   4260             ; puts("   Status Report:\n"); 
9770   4260             ; --- START FUNCTION CALL
9771   4260 26 F0 7D      mov b, _s133 ; "   Status Report:\n"
9772   4263 FD AB         swp b
9773   4265 D8            push b
9774   4266 07 85 69      call puts
9775   4269 51 02 00      add sp, 2
9776   426C             ; --- END FUNCTION CALL
9777   426C             ; if (klingons_left > 1) 
9778   426C             _if220_cond:
9779   426C 3B 5D 6E      mov d, _klingons_left ; $klingons_left
9780   426F 32            mov bl, [d]
9781   4270 A7 00         mov bh, 0
9782   4272 38 00 00      mov c, 0
9783   4275             ; --- START RELATIONAL
9784   4275 D7            push a
9785   4276 11            mov a, b
9786   4277 FD 2E 01 00   mov32 cb, $00000001
9786   427B 00 00 
9787   427D B0            cmp a, b
9788   427E FD 81         sgu ; > (unsigned)
9789   4280 E4            pop a
9790   4281             ; --- END RELATIONAL
9791   4281 C0 00 00      cmp b, 0
9792   4284 C6 98 42      je _if220_exit
9793   4287             _if220_TRUE:
9794   4287             ; plural = str_s; 
9795   4287 FA FF FF      lea d, [bp + -1] ; $plural
9796   428A DA            push d
9797   428B 3B 04 70      mov d, _str_s ; $str_s
9798   428E 2A            mov b, [d]
9799   428F 38 00 00      mov c, 0
9800   4292 E7            pop d
9801   4293 FD 43         mov [d], b
9802   4295 0A 98 42      jmp _if220_exit
9803   4298             _if220_exit:
9804   4298             ; printf("Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 
9805   4298             ; --- START FUNCTION CALL
9806   4298 FA FD FF      lea d, [bp + -3] ; $left
9807   429B 2A            mov b, [d]
9808   429C 38 00 00      mov c, 0
9809   429F             ; --- START FACTORS
9810   429F D7            push a
9811   42A0 FD D8         push g
9812   42A2 11            mov a, b
9813   42A3 FD 7A         mov g, c
9814   42A5 FD 2E 0A 00   mov32 cb, $0000000a
9814   42A9 00 00 
9815   42AB FD D8         push g ; save 'g' as the div instruction uses it
9816   42AD AE            div a, b ; %, a: quotient, b: remainder
9817   42AE 11            mov a, b
9818   42AF FD F1         pop g
9819   42B1 FD 38         mov c, g
9820   42B3 27            mov b, a
9821   42B4 FD F1         pop g
9822   42B6 E4            pop a
9823   42B7             ; --- END FACTORS
9824   42B7 FD AB         swp b
9825   42B9 D8            push b
9826   42BA             ; --- START FUNCTION CALL
9827   42BA FA FD FF      lea d, [bp + -3] ; $left
9828   42BD 2A            mov b, [d]
9829   42BE 38 00 00      mov c, 0
9830   42C1 FD AB         swp b
9831   42C3 D8            push b
9832   42C4 07 68 04      call FROM_FIXED
9833   42C7 51 02 00      add sp, 2
9834   42CA             ; --- END FUNCTION CALL
9835   42CA FD AB         swp b
9836   42CC D8            push b
9837   42CD 3B 5D 6E      mov d, _klingons_left ; $klingons_left
9838   42D0 32            mov bl, [d]
9839   42D1 A7 00         mov bh, 0
9840   42D3 38 00 00      mov c, 0
9841   42D6 FD AB         swp b
9842   42D8 D8            push b
9843   42D9 FA FF FF      lea d, [bp + -1] ; $plural
9844   42DC 2A            mov b, [d]
9845   42DD 38 00 00      mov c, 0
9846   42E0 FD AB         swp b
9847   42E2 D8            push b
9848   42E3 26 03 7E      mov b, _s134 ; "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n"
9849   42E6 FD AB         swp b
9850   42E8 D8            push b
9851   42E9 07 78 60      call printf
9852   42EC 51 09 00      add sp, 9
9853   42EF             ; --- END FUNCTION CALL
9854   42EF             ; if (starbases_left < 1) { 
9855   42EF             _if225_cond:
9856   42EF 3B 89 6D      mov d, _starbases_left ; $starbases_left
9857   42F2 32            mov bl, [d]
9858   42F3 A7 00         mov bh, 0
9859   42F5 38 00 00      mov c, 0
9860   42F8             ; --- START RELATIONAL
9861   42F8 D7            push a
9862   42F9 11            mov a, b
9863   42FA FD 2E 01 00   mov32 cb, $00000001
9863   42FE 00 00 
9864   4300 B0            cmp a, b
9865   4301 FD 73         slt ; < (signed)
9866   4303 E4            pop a
9867   4304             ; --- END RELATIONAL
9868   4304 C0 00 00      cmp b, 0
9869   4307 C6 19 43      je _if225_else
9870   430A             _if225_TRUE:
9871   430A             ; puts("Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"); 
9872   430A             ; --- START FUNCTION CALL
9873   430A 26 45 7E      mov b, _s135 ; "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"
9874   430D FD AB         swp b
9875   430F D8            push b
9876   4310 07 85 69      call puts
9877   4313 51 02 00      add sp, 2
9878   4316             ; --- END FUNCTION CALL
9879   4316 0A 77 43      jmp _if225_exit
9880   4319             _if225_else:
9881   4319             ; plural = str_s; 
9882   4319 FA FF FF      lea d, [bp + -1] ; $plural
9883   431C DA            push d
9884   431D 3B 04 70      mov d, _str_s ; $str_s
9885   4320 2A            mov b, [d]
9886   4321 38 00 00      mov c, 0
9887   4324 E7            pop d
9888   4325 FD 43         mov [d], b
9889   4327             ; if (starbases_left < 2) 
9890   4327             _if226_cond:
9891   4327 3B 89 6D      mov d, _starbases_left ; $starbases_left
9892   432A 32            mov bl, [d]
9893   432B A7 00         mov bh, 0
9894   432D 38 00 00      mov c, 0
9895   4330             ; --- START RELATIONAL
9896   4330 D7            push a
9897   4331 11            mov a, b
9898   4332 FD 2E 02 00   mov32 cb, $00000002
9898   4336 00 00 
9899   4338 B0            cmp a, b
9900   4339 FD 73         slt ; < (signed)
9901   433B E4            pop a
9902   433C             ; --- END RELATIONAL
9903   433C C0 00 00      cmp b, 0
9904   433F C6 55 43      je _if226_exit
9905   4342             _if226_TRUE:
9906   4342             ; plural++; 
9907   4342 FA FF FF      lea d, [bp + -1] ; $plural
9908   4345 2A            mov b, [d]
9909   4346 38 00 00      mov c, 0
9910   4349 FD 77         inc b
9911   434B FA FF FF      lea d, [bp + -1] ; $plural
9912   434E FD 43         mov [d], b
9913   4350 FD 7D         dec b
9914   4352 0A 55 43      jmp _if226_exit
9915   4355             _if226_exit:
9916   4355             ; printf("The Federation is maintaining %d starbase%s in the galaxy\n\n", starbases_left, plural); 
9917   4355             ; --- START FUNCTION CALL
9918   4355 FA FF FF      lea d, [bp + -1] ; $plural
9919   4358 2A            mov b, [d]
9920   4359 38 00 00      mov c, 0
9921   435C FD AB         swp b
9922   435E D8            push b
9923   435F 3B 89 6D      mov d, _starbases_left ; $starbases_left
9924   4362 32            mov bl, [d]
9925   4363 A7 00         mov bh, 0
9926   4365 38 00 00      mov c, 0
9927   4368 FD AB         swp b
9928   436A D8            push b
9929   436B 26 9C 7E      mov b, _s136 ; "The Federation is maintaining %d starbase%s in the galaxy\n\n"
9930   436E FD AB         swp b
9931   4370 D8            push b
9932   4371 07 78 60      call printf
9933   4374 51 05 00      add sp, 5
9934   4377             ; --- END FUNCTION CALL
9935   4377             _if225_exit:
9936   4377 F9            leave
9937   4378 09            ret
9938   4379             
9939   4379             torpedo_data:
9940   4379 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9941   437C             ; int i; 
9942   437C 52 02 00      sub sp, 2
9943   437F             ; char *plural; 
9944   437F 52 02 00      sub sp, 2
9945   4382             ; plural = str_s + 1; 
9946   4382 FA FD FF      lea d, [bp + -3] ; $plural
9947   4385 DA            push d
9948   4386 3B 04 70      mov d, _str_s ; $str_s
9949   4389 2A            mov b, [d]
9950   438A 38 00 00      mov c, 0
9951   438D             ; --- START TERMS
9952   438D D7            push a
9953   438E 11            mov a, b
9954   438F FD 2E 01 00   mov32 cb, $00000001
9954   4393 00 00 
9955   4395 56            add b, a
9956   4396 E4            pop a
9957   4397             ; --- END TERMS
9958   4397 E7            pop d
9959   4398 FD 43         mov [d], b
9960   439A             ; struct klingon *k; 
9961   439A 52 02 00      sub sp, 2
9962   439D             ; if (no_klingon()) 
9963   439D             _if227_cond:
9964   439D             ; --- START FUNCTION CALL
9965   439D 07 4E 2D      call no_klingon
9966   43A0 C0 00 00      cmp b, 0
9967   43A3 C6 AB 43      je _if227_exit
9968   43A6             _if227_TRUE:
9969   43A6             ; return; 
9970   43A6 F9            leave
9971   43A7 09            ret
9972   43A8 0A AB 43      jmp _if227_exit
9973   43AB             _if227_exit:
9974   43AB             ; if (klingons > 1) 
9975   43AB             _if228_cond:
9976   43AB 3B 5B 6E      mov d, _klingons ; $klingons
9977   43AE 32            mov bl, [d]
9978   43AF A7 00         mov bh, 0
9979   43B1 38 00 00      mov c, 0
9980   43B4             ; --- START RELATIONAL
9981   43B4 D7            push a
9982   43B5 11            mov a, b
9983   43B6 FD 2E 01 00   mov32 cb, $00000001
9983   43BA 00 00 
9984   43BC B0            cmp a, b
9985   43BD FD 81         sgu ; > (unsigned)
9986   43BF E4            pop a
9987   43C0             ; --- END RELATIONAL
9988   43C0 C0 00 00      cmp b, 0
9989   43C3 C6 D9 43      je _if228_exit
9990   43C6             _if228_TRUE:
9991   43C6             ; plural--; 
9992   43C6 FA FD FF      lea d, [bp + -3] ; $plural
9993   43C9 2A            mov b, [d]
9994   43CA 38 00 00      mov c, 0
9995   43CD FD 7D         dec b
9996   43CF FA FD FF      lea d, [bp + -3] ; $plural
9997   43D2 FD 43         mov [d], b
9998   43D4 FD 77         inc b
9999   43D6 0A D9 43      jmp _if228_exit
10000  43D9             _if228_exit:
10001  43D9             ; printf("From Enterprise to Klingon battlecriuser%s:\n\n", plural); 
10002  43D9             ; --- START FUNCTION CALL
10003  43D9 FA FD FF      lea d, [bp + -3] ; $plural
10004  43DC 2A            mov b, [d]
10005  43DD 38 00 00      mov c, 0
10006  43E0 FD AB         swp b
10007  43E2 D8            push b
10008  43E3 26 D8 7E      mov b, _s137 ; "From Enterprise to Klingon battlecriuser%s:\n\n"
10009  43E6 FD AB         swp b
10010  43E8 D8            push b
10011  43E9 07 78 60      call printf
10012  43EC 51 04 00      add sp, 4
10013  43EF             ; --- END FUNCTION CALL
10014  43EF             ; k = kdata; 
10015  43EF FA FB FF      lea d, [bp + -5] ; $k
10016  43F2 DA            push d
10017  43F3 3B 4F 6E      mov d, _kdata_data ; $kdata
10018  43F6 2D            mov b, d
10019  43F7 38 00 00      mov c, 0
10020  43FA E7            pop d
10021  43FB FD 43         mov [d], b
10022  43FD             ; for (i = 0; i <= 2; i++) { 
10023  43FD             _for229_init:
10024  43FD FA FF FF      lea d, [bp + -1] ; $i
10025  4400 DA            push d
10026  4401 FD 2E 00 00   mov32 cb, $00000000
10026  4405 00 00 
10027  4407 E7            pop d
10028  4408 FD 43         mov [d], b
10029  440A             _for229_cond:
10030  440A FA FF FF      lea d, [bp + -1] ; $i
10031  440D 2A            mov b, [d]
10032  440E 38 00 00      mov c, 0
10033  4411             ; --- START RELATIONAL
10034  4411 D7            push a
10035  4412 11            mov a, b
10036  4413 FD 2E 02 00   mov32 cb, $00000002
10036  4417 00 00 
10037  4419 B0            cmp a, b
10038  441A FD 74         sle ; <= (signed)
10039  441C E4            pop a
10040  441D             ; --- END RELATIONAL
10041  441D C0 00 00      cmp b, 0
10042  4420 C6 B9 44      je _for229_exit
10043  4423             _for229_block:
10044  4423             ; if (k->energy > 0) { 
10045  4423             _if230_cond:
10046  4423 FA FB FF      lea d, [bp + -5] ; $k
10047  4426 FD 2A         mov d, [d]
10048  4428 58 02 00      add d, 2
10049  442B 2A            mov b, [d]
10050  442C 38 00 00      mov c, 0
10051  442F             ; --- START RELATIONAL
10052  442F D7            push a
10053  4430 11            mov a, b
10054  4431 FD 2E 00 00   mov32 cb, $00000000
10054  4435 00 00 
10055  4437 B0            cmp a, b
10056  4438 FD 7F         sgt ; >
10057  443A E4            pop a
10058  443B             ; --- END RELATIONAL
10059  443B C0 00 00      cmp b, 0
10060  443E C6 94 44      je _if230_exit
10061  4441             _if230_TRUE:
10062  4441             ; compute_vector(TO_FIXED00(k->y), 
10063  4441             ; --- START FUNCTION CALL
10064  4441 3B 81 6E      mov d, _ship_x ; $ship_x
10065  4444 2A            mov b, [d]
10066  4445 38 00 00      mov c, 0
10067  4448 FD AB         swp b
10068  444A D8            push b
10069  444B 3B 7F 6E      mov d, _ship_y ; $ship_y
10070  444E 2A            mov b, [d]
10071  444F 38 00 00      mov c, 0
10072  4452 FD AB         swp b
10073  4454 D8            push b
10074  4455             ; --- START FUNCTION CALL
10075  4455 FA FB FF      lea d, [bp + -5] ; $k
10076  4458 FD 2A         mov d, [d]
10077  445A 58 01 00      add d, 1
10078  445D 32            mov bl, [d]
10079  445E A7 00         mov bh, 0
10080  4460 38 00 00      mov c, 0
10081  4463 AB            snex b
10082  4464 FD AB         swp b
10083  4466 D8            push b
10084  4467 07 8B 04      call TO_FIXED00
10085  446A 51 02 00      add sp, 2
10086  446D             ; --- END FUNCTION CALL
10087  446D FD AB         swp b
10088  446F D8            push b
10089  4470             ; --- START FUNCTION CALL
10090  4470 FA FB FF      lea d, [bp + -5] ; $k
10091  4473 FD 2A         mov d, [d]
10092  4475 58 00 00      add d, 0
10093  4478 32            mov bl, [d]
10094  4479 A7 00         mov bh, 0
10095  447B 38 00 00      mov c, 0
10096  447E AB            snex b
10097  447F FD AB         swp b
10098  4481 D8            push b
10099  4482 07 8B 04      call TO_FIXED00
10100  4485 51 02 00      add sp, 2
10101  4488             ; --- END FUNCTION CALL
10102  4488 FD AB         swp b
10103  448A D8            push b
10104  448B 07 6B 49      call compute_vector
10105  448E 51 08 00      add sp, 8
10106  4491             ; --- END FUNCTION CALL
10107  4491 0A 94 44      jmp _if230_exit
10108  4494             _if230_exit:
10109  4494             ; k++; 
10110  4494 FA FB FF      lea d, [bp + -5] ; $k
10111  4497 2A            mov b, [d]
10112  4498 38 00 00      mov c, 0
10113  449B 11            mov a, b
10114  449C FD 77         inc b
10115  449E FD 77         inc b
10116  44A0 FA FB FF      lea d, [bp + -5] ; $k
10117  44A3 FD 43         mov [d], b
10118  44A5 27            mov b, a
10119  44A6             _for229_update:
10120  44A6 FA FF FF      lea d, [bp + -1] ; $i
10121  44A9 2A            mov b, [d]
10122  44AA 38 00 00      mov c, 0
10123  44AD 11            mov a, b
10124  44AE FD 77         inc b
10125  44B0 FA FF FF      lea d, [bp + -1] ; $i
10126  44B3 FD 43         mov [d], b
10127  44B5 27            mov b, a
10128  44B6 0A 0A 44      jmp _for229_cond
10129  44B9             _for229_exit:
10130  44B9 F9            leave
10131  44BA 09            ret
10132  44BB             
10133  44BB             nav_data:
10134  44BB F8 00 00      enter 0 ; (push bp; mov bp, sp)
10135  44BE             ; if (starbases <= 0) { 
10136  44BE             _if231_cond:
10137  44BE 3B 86 6D      mov d, _starbases ; $starbases
10138  44C1 32            mov bl, [d]
10139  44C2 A7 00         mov bh, 0
10140  44C4 38 00 00      mov c, 0
10141  44C7             ; --- START RELATIONAL
10142  44C7 D7            push a
10143  44C8 11            mov a, b
10144  44C9 FD 2E 00 00   mov32 cb, $00000000
10144  44CD 00 00 
10145  44CF B0            cmp a, b
10146  44D0 FD 74         sle ; <= (signed)
10147  44D2 E4            pop a
10148  44D3             ; --- END RELATIONAL
10149  44D3 C0 00 00      cmp b, 0
10150  44D6 C6 EA 44      je _if231_exit
10151  44D9             _if231_TRUE:
10152  44D9             ; puts("Mr. Spock reports,\n  'Sensors show no starbases in this quadrant.'\n"); 
10153  44D9             ; --- START FUNCTION CALL
10154  44D9 26 06 7F      mov b, _s138 ; "Mr. Spock reports,\n  'Sensors show no starbases in this quadrant.'\n"
10155  44DC FD AB         swp b
10156  44DE D8            push b
10157  44DF 07 85 69      call puts
10158  44E2 51 02 00      add sp, 2
10159  44E5             ; --- END FUNCTION CALL
10160  44E5             ; return; 
10161  44E5 F9            leave
10162  44E6 09            ret
10163  44E7 0A EA 44      jmp _if231_exit
10164  44EA             _if231_exit:
10165  44EA             ; compute_vector(TO_FIXED00(base_y), TO_FIXED00(base_x), ship_y, ship_x); 
10166  44EA             ; --- START FUNCTION CALL
10167  44EA 3B 81 6E      mov d, _ship_x ; $ship_x
10168  44ED 2A            mov b, [d]
10169  44EE 38 00 00      mov c, 0
10170  44F1 FD AB         swp b
10171  44F3 D8            push b
10172  44F4 3B 7F 6E      mov d, _ship_y ; $ship_y
10173  44F7 2A            mov b, [d]
10174  44F8 38 00 00      mov c, 0
10175  44FB FD AB         swp b
10176  44FD D8            push b
10177  44FE             ; --- START FUNCTION CALL
10178  44FE 3B 88 6D      mov d, _base_x ; $base_x
10179  4501 32            mov bl, [d]
10180  4502 A7 00         mov bh, 0
10181  4504 38 00 00      mov c, 0
10182  4507 AB            snex b
10183  4508 FD AB         swp b
10184  450A D8            push b
10185  450B 07 8B 04      call TO_FIXED00
10186  450E 51 02 00      add sp, 2
10187  4511             ; --- END FUNCTION CALL
10188  4511 FD AB         swp b
10189  4513 D8            push b
10190  4514             ; --- START FUNCTION CALL
10191  4514 3B 87 6D      mov d, _base_y ; $base_y
10192  4517 32            mov bl, [d]
10193  4518 A7 00         mov bh, 0
10194  451A 38 00 00      mov c, 0
10195  451D AB            snex b
10196  451E FD AB         swp b
10197  4520 D8            push b
10198  4521 07 8B 04      call TO_FIXED00
10199  4524 51 02 00      add sp, 2
10200  4527             ; --- END FUNCTION CALL
10201  4527 FD AB         swp b
10202  4529 D8            push b
10203  452A 07 6B 49      call compute_vector
10204  452D 51 08 00      add sp, 8
10205  4530             ; --- END FUNCTION CALL
10206  4530 F9            leave
10207  4531 09            ret
10208  4532             
10209  4532             dirdist_calc:
10210  4532 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10211  4535             ; int        c1, a, w1, x; 
10212  4535 52 02 00      sub sp, 2
10213  4538 52 02 00      sub sp, 2
10214  453B 52 02 00      sub sp, 2
10215  453E 52 02 00      sub sp, 2
10216  4541             ; printf("Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 
10217  4541             ; --- START FUNCTION CALL
10218  4541             ; --- START FUNCTION CALL
10219  4541 3B 81 6E      mov d, _ship_x ; $ship_x
10220  4544 2A            mov b, [d]
10221  4545 38 00 00      mov c, 0
10222  4548 FD AB         swp b
10223  454A D8            push b
10224  454B 07 DC 04      call FROM_FIXED00
10225  454E 51 02 00      add sp, 2
10226  4551             ; --- END FUNCTION CALL
10227  4551 FD AB         swp b
10228  4553 D8            push b
10229  4554             ; --- START FUNCTION CALL
10230  4554 3B 7F 6E      mov d, _ship_y ; $ship_y
10231  4557 2A            mov b, [d]
10232  4558 38 00 00      mov c, 0
10233  455B FD AB         swp b
10234  455D D8            push b
10235  455E 07 DC 04      call FROM_FIXED00
10236  4561 51 02 00      add sp, 2
10237  4564             ; --- END FUNCTION CALL
10238  4564 FD AB         swp b
10239  4566 D8            push b
10240  4567 3B 62 6E      mov d, _quad_x ; $quad_x
10241  456A 2A            mov b, [d]
10242  456B 38 00 00      mov c, 0
10243  456E FD AB         swp b
10244  4570 D8            push b
10245  4571 3B 60 6E      mov d, _quad_y ; $quad_y
10246  4574 2A            mov b, [d]
10247  4575 38 00 00      mov c, 0
10248  4578 FD AB         swp b
10249  457A D8            push b
10250  457B 26 4A 7F      mov b, _s139 ; "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: "
10251  457E FD AB         swp b
10252  4580 D8            push b
10253  4581 07 78 60      call printf
10254  4584 51 0A 00      add sp, 10
10255  4587             ; --- END FUNCTION CALL
10256  4587             ; c1 = TO_FIXED00(input_int()); 
10257  4587 FA FF FF      lea d, [bp + -1] ; $c1
10258  458A DA            push d
10259  458B             ; --- START FUNCTION CALL
10260  458B             ; --- START FUNCTION CALL
10261  458B 07 BD 08      call input_int
10262  458E FD AB         swp b
10263  4590 D8            push b
10264  4591 07 8B 04      call TO_FIXED00
10265  4594 51 02 00      add sp, 2
10266  4597             ; --- END FUNCTION CALL
10267  4597 E7            pop d
10268  4598 FD 43         mov [d], b
10269  459A             ; if (c1 < 0 || c1 > 900 ) 
10270  459A             _if232_cond:
10271  459A FA FF FF      lea d, [bp + -1] ; $c1
10272  459D 2A            mov b, [d]
10273  459E 38 00 00      mov c, 0
10274  45A1             ; --- START RELATIONAL
10275  45A1 D7            push a
10276  45A2 11            mov a, b
10277  45A3 FD 2E 00 00   mov32 cb, $00000000
10277  45A7 00 00 
10278  45A9 B0            cmp a, b
10279  45AA FD 73         slt ; < (signed)
10280  45AC E4            pop a
10281  45AD             ; --- END RELATIONAL
10282  45AD             ; --- START LOGICAL OR
10283  45AD D7            push a
10284  45AE 11            mov a, b
10285  45AF FA FF FF      lea d, [bp + -1] ; $c1
10286  45B2 2A            mov b, [d]
10287  45B3 38 00 00      mov c, 0
10288  45B6             ; --- START RELATIONAL
10289  45B6 D7            push a
10290  45B7 11            mov a, b
10291  45B8 FD 2E 84 03   mov32 cb, $00000384
10291  45BC 00 00 
10292  45BE B0            cmp a, b
10293  45BF FD 7F         sgt ; >
10294  45C1 E4            pop a
10295  45C2             ; --- END RELATIONAL
10296  45C2 FD A8         sor a, b ; ||
10297  45C4 E4            pop a
10298  45C5             ; --- END LOGICAL OR
10299  45C5 C0 00 00      cmp b, 0
10300  45C8 C6 D0 45      je _if232_exit
10301  45CB             _if232_TRUE:
10302  45CB             ; return; 
10303  45CB F9            leave
10304  45CC 09            ret
10305  45CD 0A D0 45      jmp _if232_exit
10306  45D0             _if232_exit:
10307  45D0             ; puts("Please enter initial Y coordinate: "); 
10308  45D0             ; --- START FUNCTION CALL
10309  45D0 26 B6 7F      mov b, _s140 ; "Please enter initial Y coordinate: "
10310  45D3 FD AB         swp b
10311  45D5 D8            push b
10312  45D6 07 85 69      call puts
10313  45D9 51 02 00      add sp, 2
10314  45DC             ; --- END FUNCTION CALL
10315  45DC             ; a = TO_FIXED00(input_int()); 
10316  45DC FA FD FF      lea d, [bp + -3] ; $a
10317  45DF DA            push d
10318  45E0             ; --- START FUNCTION CALL
10319  45E0             ; --- START FUNCTION CALL
10320  45E0 07 BD 08      call input_int
10321  45E3 FD AB         swp b
10322  45E5 D8            push b
10323  45E6 07 8B 04      call TO_FIXED00
10324  45E9 51 02 00      add sp, 2
10325  45EC             ; --- END FUNCTION CALL
10326  45EC E7            pop d
10327  45ED FD 43         mov [d], b
10328  45EF             ; if (a < 0 || a > 900) 
10329  45EF             _if233_cond:
10330  45EF FA FD FF      lea d, [bp + -3] ; $a
10331  45F2 2A            mov b, [d]
10332  45F3 38 00 00      mov c, 0
10333  45F6             ; --- START RELATIONAL
10334  45F6 D7            push a
10335  45F7 11            mov a, b
10336  45F8 FD 2E 00 00   mov32 cb, $00000000
10336  45FC 00 00 
10337  45FE B0            cmp a, b
10338  45FF FD 73         slt ; < (signed)
10339  4601 E4            pop a
10340  4602             ; --- END RELATIONAL
10341  4602             ; --- START LOGICAL OR
10342  4602 D7            push a
10343  4603 11            mov a, b
10344  4604 FA FD FF      lea d, [bp + -3] ; $a
10345  4607 2A            mov b, [d]
10346  4608 38 00 00      mov c, 0
10347  460B             ; --- START RELATIONAL
10348  460B D7            push a
10349  460C 11            mov a, b
10350  460D FD 2E 84 03   mov32 cb, $00000384
10350  4611 00 00 
10351  4613 B0            cmp a, b
10352  4614 FD 7F         sgt ; >
10353  4616 E4            pop a
10354  4617             ; --- END RELATIONAL
10355  4617 FD A8         sor a, b ; ||
10356  4619 E4            pop a
10357  461A             ; --- END LOGICAL OR
10358  461A C0 00 00      cmp b, 0
10359  461D C6 25 46      je _if233_exit
10360  4620             _if233_TRUE:
10361  4620             ; return; 
10362  4620 F9            leave
10363  4621 09            ret
10364  4622 0A 25 46      jmp _if233_exit
10365  4625             _if233_exit:
10366  4625             ; puts("Please enter final X coordinate: "); 
10367  4625             ; --- START FUNCTION CALL
10368  4625 26 DA 7F      mov b, _s141 ; "Please enter final X coordinate: "
10369  4628 FD AB         swp b
10370  462A D8            push b
10371  462B 07 85 69      call puts
10372  462E 51 02 00      add sp, 2
10373  4631             ; --- END FUNCTION CALL
10374  4631             ; w1 = TO_FIXED00(input_int()); 
10375  4631 FA FB FF      lea d, [bp + -5] ; $w1
10376  4634 DA            push d
10377  4635             ; --- START FUNCTION CALL
10378  4635             ; --- START FUNCTION CALL
10379  4635 07 BD 08      call input_int
10380  4638 FD AB         swp b
10381  463A D8            push b
10382  463B 07 8B 04      call TO_FIXED00
10383  463E 51 02 00      add sp, 2
10384  4641             ; --- END FUNCTION CALL
10385  4641 E7            pop d
10386  4642 FD 43         mov [d], b
10387  4644             ; if (w1 < 0 || w1 > 900) 
10388  4644             _if234_cond:
10389  4644 FA FB FF      lea d, [bp + -5] ; $w1
10390  4647 2A            mov b, [d]
10391  4648 38 00 00      mov c, 0
10392  464B             ; --- START RELATIONAL
10393  464B D7            push a
10394  464C 11            mov a, b
10395  464D FD 2E 00 00   mov32 cb, $00000000
10395  4651 00 00 
10396  4653 B0            cmp a, b
10397  4654 FD 73         slt ; < (signed)
10398  4656 E4            pop a
10399  4657             ; --- END RELATIONAL
10400  4657             ; --- START LOGICAL OR
10401  4657 D7            push a
10402  4658 11            mov a, b
10403  4659 FA FB FF      lea d, [bp + -5] ; $w1
10404  465C 2A            mov b, [d]
10405  465D 38 00 00      mov c, 0
10406  4660             ; --- START RELATIONAL
10407  4660 D7            push a
10408  4661 11            mov a, b
10409  4662 FD 2E 84 03   mov32 cb, $00000384
10409  4666 00 00 
10410  4668 B0            cmp a, b
10411  4669 FD 7F         sgt ; >
10412  466B E4            pop a
10413  466C             ; --- END RELATIONAL
10414  466C FD A8         sor a, b ; ||
10415  466E E4            pop a
10416  466F             ; --- END LOGICAL OR
10417  466F C0 00 00      cmp b, 0
10418  4672 C6 7A 46      je _if234_exit
10419  4675             _if234_TRUE:
10420  4675             ; return; 
10421  4675 F9            leave
10422  4676 09            ret
10423  4677 0A 7A 46      jmp _if234_exit
10424  467A             _if234_exit:
10425  467A             ; puts("Please enter final Y coordinate: "); 
10426  467A             ; --- START FUNCTION CALL
10427  467A 26 FC 7F      mov b, _s142 ; "Please enter final Y coordinate: "
10428  467D FD AB         swp b
10429  467F D8            push b
10430  4680 07 85 69      call puts
10431  4683 51 02 00      add sp, 2
10432  4686             ; --- END FUNCTION CALL
10433  4686             ; x = TO_FIXED00(input_int()); 
10434  4686 FA F9 FF      lea d, [bp + -7] ; $x
10435  4689 DA            push d
10436  468A             ; --- START FUNCTION CALL
10437  468A             ; --- START FUNCTION CALL
10438  468A 07 BD 08      call input_int
10439  468D FD AB         swp b
10440  468F D8            push b
10441  4690 07 8B 04      call TO_FIXED00
10442  4693 51 02 00      add sp, 2
10443  4696             ; --- END FUNCTION CALL
10444  4696 E7            pop d
10445  4697 FD 43         mov [d], b
10446  4699             ; if (x < 0 || x > 900) 
10447  4699             _if235_cond:
10448  4699 FA F9 FF      lea d, [bp + -7] ; $x
10449  469C 2A            mov b, [d]
10450  469D 38 00 00      mov c, 0
10451  46A0             ; --- START RELATIONAL
10452  46A0 D7            push a
10453  46A1 11            mov a, b
10454  46A2 FD 2E 00 00   mov32 cb, $00000000
10454  46A6 00 00 
10455  46A8 B0            cmp a, b
10456  46A9 FD 73         slt ; < (signed)
10457  46AB E4            pop a
10458  46AC             ; --- END RELATIONAL
10459  46AC             ; --- START LOGICAL OR
10460  46AC D7            push a
10461  46AD 11            mov a, b
10462  46AE FA F9 FF      lea d, [bp + -7] ; $x
10463  46B1 2A            mov b, [d]
10464  46B2 38 00 00      mov c, 0
10465  46B5             ; --- START RELATIONAL
10466  46B5 D7            push a
10467  46B6 11            mov a, b
10468  46B7 FD 2E 84 03   mov32 cb, $00000384
10468  46BB 00 00 
10469  46BD B0            cmp a, b
10470  46BE FD 7F         sgt ; >
10471  46C0 E4            pop a
10472  46C1             ; --- END RELATIONAL
10473  46C1 FD A8         sor a, b ; ||
10474  46C3 E4            pop a
10475  46C4             ; --- END LOGICAL OR
10476  46C4 C0 00 00      cmp b, 0
10477  46C7 C6 CF 46      je _if235_exit
10478  46CA             _if235_TRUE:
10479  46CA             ; return; 
10480  46CA F9            leave
10481  46CB 09            ret
10482  46CC 0A CF 46      jmp _if235_exit
10483  46CF             _if235_exit:
10484  46CF             ; compute_vector(w1, x, c1, a); 
10485  46CF             ; --- START FUNCTION CALL
10486  46CF FA FD FF      lea d, [bp + -3] ; $a
10487  46D2 2A            mov b, [d]
10488  46D3 38 00 00      mov c, 0
10489  46D6 FD AB         swp b
10490  46D8 D8            push b
10491  46D9 FA FF FF      lea d, [bp + -1] ; $c1
10492  46DC 2A            mov b, [d]
10493  46DD 38 00 00      mov c, 0
10494  46E0 FD AB         swp b
10495  46E2 D8            push b
10496  46E3 FA F9 FF      lea d, [bp + -7] ; $x
10497  46E6 2A            mov b, [d]
10498  46E7 38 00 00      mov c, 0
10499  46EA FD AB         swp b
10500  46EC D8            push b
10501  46ED FA FB FF      lea d, [bp + -5] ; $w1
10502  46F0 2A            mov b, [d]
10503  46F1 38 00 00      mov c, 0
10504  46F4 FD AB         swp b
10505  46F6 D8            push b
10506  46F7 07 6B 49      call compute_vector
10507  46FA 51 08 00      add sp, 8
10508  46FD             ; --- END FUNCTION CALL
10509  46FD F9            leave
10510  46FE 09            ret
10511  46FF             
10512  46FF             galaxy_map:
10513  46FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
10514  4702             ; int i, j, j0; 
10515  4702 52 02 00      sub sp, 2
10516  4705 52 02 00      sub sp, 2
10517  4708 52 02 00      sub sp, 2
10518  470B             ; printf("\n                   The Galaxy\n\n"); 
10519  470B             ; --- START FUNCTION CALL
10520  470B 26 1E 80      mov b, _s143 ; "\n                   The Galaxy\n\n"
10521  470E FD AB         swp b
10522  4710 D8            push b
10523  4711 07 78 60      call printf
10524  4714 51 02 00      add sp, 2
10525  4717             ; --- END FUNCTION CALL
10526  4717             ; printf("    1     2     3     4     5     6     7     8\n"); 
10527  4717             ; --- START FUNCTION CALL
10528  4717 26 3F 80      mov b, _s144 ; "    1     2     3     4     5     6     7     8\n"
10529  471A FD AB         swp b
10530  471C D8            push b
10531  471D 07 78 60      call printf
10532  4720 51 02 00      add sp, 2
10533  4723             ; --- END FUNCTION CALL
10534  4723             ; for (i = 1; i <= 8; i++) { 
10535  4723             _for236_init:
10536  4723 FA FF FF      lea d, [bp + -1] ; $i
10537  4726 DA            push d
10538  4727 FD 2E 01 00   mov32 cb, $00000001
10538  472B 00 00 
10539  472D E7            pop d
10540  472E FD 43         mov [d], b
10541  4730             _for236_cond:
10542  4730 FA FF FF      lea d, [bp + -1] ; $i
10543  4733 2A            mov b, [d]
10544  4734 38 00 00      mov c, 0
10545  4737             ; --- START RELATIONAL
10546  4737 D7            push a
10547  4738 11            mov a, b
10548  4739 FD 2E 08 00   mov32 cb, $00000008
10548  473D 00 00 
10549  473F B0            cmp a, b
10550  4740 FD 74         sle ; <= (signed)
10551  4742 E4            pop a
10552  4743             ; --- END RELATIONAL
10553  4743 C0 00 00      cmp b, 0
10554  4746 C6 59 49      je _for236_exit
10555  4749             _for236_block:
10556  4749             ; printf("%s%d ", gm_1, i); 
10557  4749             ; --- START FUNCTION CALL
10558  4749 FA FF FF      lea d, [bp + -1] ; $i
10559  474C 2A            mov b, [d]
10560  474D 38 00 00      mov c, 0
10561  4750 FD AB         swp b
10562  4752 D8            push b
10563  4753 3B 39 70      mov d, _gm_1 ; $gm_1
10564  4756 2A            mov b, [d]
10565  4757 38 00 00      mov c, 0
10566  475A FD AB         swp b
10567  475C D8            push b
10568  475D 26 70 80      mov b, _s145 ; "%s%d "
10569  4760 FD AB         swp b
10570  4762 D8            push b
10571  4763 07 78 60      call printf
10572  4766 51 06 00      add sp, 6
10573  4769             ; --- END FUNCTION CALL
10574  4769             ; quadrant_name(1, i, 1); 
10575  4769             ; --- START FUNCTION CALL
10576  4769 FD 2E 01 00   mov32 cb, $00000001
10576  476D 00 00 
10577  476F DD            push bl
10578  4770 FA FF FF      lea d, [bp + -1] ; $i
10579  4773 2A            mov b, [d]
10580  4774 38 00 00      mov c, 0
10581  4777 DD            push bl
10582  4778 FD 2E 01 00   mov32 cb, $00000001
10582  477C 00 00 
10583  477E DD            push bl
10584  477F 07 BF 59      call quadrant_name
10585  4782 51 03 00      add sp, 3
10586  4785             ; --- END FUNCTION CALL
10587  4785             ; j0 = (int) (11 - (strlen(quadname) / 2)); 
10588  4785 FA FB FF      lea d, [bp + -5] ; $j0
10589  4788 DA            push d
10590  4789 FD 2E 0B 00   mov32 cb, $0000000b
10590  478D 00 00 
10591  478F             ; --- START TERMS
10592  478F D7            push a
10593  4790 11            mov a, b
10594  4791             ; --- START FUNCTION CALL
10595  4791 3B C5 6E      mov d, _quadname_data ; $quadname
10596  4794 2D            mov b, d
10597  4795 38 00 00      mov c, 0
10598  4798 FD AB         swp b
10599  479A D8            push b
10600  479B 07 1D 60      call strlen
10601  479E 51 02 00      add sp, 2
10602  47A1             ; --- END FUNCTION CALL
10603  47A1             ; --- START FACTORS
10604  47A1 D7            push a
10605  47A2 FD D8         push g
10606  47A4 11            mov a, b
10607  47A5 FD 7A         mov g, c
10608  47A7 FD 2E 02 00   mov32 cb, $00000002
10608  47AB 00 00 
10609  47AD FD D8         push g ; save 'g' as the div instruction uses it
10610  47AF AE            div a, b ; /, a: quotient, b: remainder
10611  47B0 FD F1         pop g
10612  47B2 FD 38         mov c, g
10613  47B4 27            mov b, a
10614  47B5 FD F1         pop g
10615  47B7 E4            pop a
10616  47B8             ; --- END FACTORS
10617  47B8 60            sub a, b
10618  47B9 27            mov b, a
10619  47BA E4            pop a
10620  47BB             ; --- END TERMS
10621  47BB E7            pop d
10622  47BC FD 43         mov [d], b
10623  47BE             ; for (j = 0; j < j0; j++) 
10624  47BE             _for245_init:
10625  47BE FA FD FF      lea d, [bp + -3] ; $j
10626  47C1 DA            push d
10627  47C2 FD 2E 00 00   mov32 cb, $00000000
10627  47C6 00 00 
10628  47C8 E7            pop d
10629  47C9 FD 43         mov [d], b
10630  47CB             _for245_cond:
10631  47CB FA FD FF      lea d, [bp + -3] ; $j
10632  47CE 2A            mov b, [d]
10633  47CF 38 00 00      mov c, 0
10634  47D2             ; --- START RELATIONAL
10635  47D2 D7            push a
10636  47D3 11            mov a, b
10637  47D4 FA FB FF      lea d, [bp + -5] ; $j0
10638  47D7 2A            mov b, [d]
10639  47D8 38 00 00      mov c, 0
10640  47DB B0            cmp a, b
10641  47DC FD 73         slt ; < (signed)
10642  47DE E4            pop a
10643  47DF             ; --- END RELATIONAL
10644  47DF C0 00 00      cmp b, 0
10645  47E2 C6 05 48      je _for245_exit
10646  47E5             _for245_block:
10647  47E5             ; putchar(' '); 
10648  47E5             ; --- START FUNCTION CALL
10649  47E5 FD 2E 20 00   mov32 cb, $00000020
10649  47E9 00 00 
10650  47EB DD            push bl
10651  47EC 07 FA 64      call putchar
10652  47EF 51 01 00      add sp, 1
10653  47F2             ; --- END FUNCTION CALL
10654  47F2             _for245_update:
10655  47F2 FA FD FF      lea d, [bp + -3] ; $j
10656  47F5 2A            mov b, [d]
10657  47F6 38 00 00      mov c, 0
10658  47F9 11            mov a, b
10659  47FA FD 77         inc b
10660  47FC FA FD FF      lea d, [bp + -3] ; $j
10661  47FF FD 43         mov [d], b
10662  4801 27            mov b, a
10663  4802 0A CB 47      jmp _for245_cond
10664  4805             _for245_exit:
10665  4805             ; puts(quadname); 
10666  4805             ; --- START FUNCTION CALL
10667  4805 3B C5 6E      mov d, _quadname_data ; $quadname
10668  4808 2D            mov b, d
10669  4809 38 00 00      mov c, 0
10670  480C FD AB         swp b
10671  480E D8            push b
10672  480F 07 85 69      call puts
10673  4812 51 02 00      add sp, 2
10674  4815             ; --- END FUNCTION CALL
10675  4815             ; for (j = 0; j < j0; j++) 
10676  4815             _for246_init:
10677  4815 FA FD FF      lea d, [bp + -3] ; $j
10678  4818 DA            push d
10679  4819 FD 2E 00 00   mov32 cb, $00000000
10679  481D 00 00 
10680  481F E7            pop d
10681  4820 FD 43         mov [d], b
10682  4822             _for246_cond:
10683  4822 FA FD FF      lea d, [bp + -3] ; $j
10684  4825 2A            mov b, [d]
10685  4826 38 00 00      mov c, 0
10686  4829             ; --- START RELATIONAL
10687  4829 D7            push a
10688  482A 11            mov a, b
10689  482B FA FB FF      lea d, [bp + -5] ; $j0
10690  482E 2A            mov b, [d]
10691  482F 38 00 00      mov c, 0
10692  4832 B0            cmp a, b
10693  4833 FD 73         slt ; < (signed)
10694  4835 E4            pop a
10695  4836             ; --- END RELATIONAL
10696  4836 C0 00 00      cmp b, 0
10697  4839 C6 5C 48      je _for246_exit
10698  483C             _for246_block:
10699  483C             ; putchar(' '); 
10700  483C             ; --- START FUNCTION CALL
10701  483C FD 2E 20 00   mov32 cb, $00000020
10701  4840 00 00 
10702  4842 DD            push bl
10703  4843 07 FA 64      call putchar
10704  4846 51 01 00      add sp, 1
10705  4849             ; --- END FUNCTION CALL
10706  4849             _for246_update:
10707  4849 FA FD FF      lea d, [bp + -3] ; $j
10708  484C 2A            mov b, [d]
10709  484D 38 00 00      mov c, 0
10710  4850 11            mov a, b
10711  4851 FD 77         inc b
10712  4853 FA FD FF      lea d, [bp + -3] ; $j
10713  4856 FD 43         mov [d], b
10714  4858 27            mov b, a
10715  4859 0A 22 48      jmp _for246_cond
10716  485C             _for246_exit:
10717  485C             ; if (!(strlen(quadname) % 2)) 
10718  485C             _if247_cond:
10719  485C             ; --- START FUNCTION CALL
10720  485C 3B C5 6E      mov d, _quadname_data ; $quadname
10721  485F 2D            mov b, d
10722  4860 38 00 00      mov c, 0
10723  4863 FD AB         swp b
10724  4865 D8            push b
10725  4866 07 1D 60      call strlen
10726  4869 51 02 00      add sp, 2
10727  486C             ; --- END FUNCTION CALL
10728  486C             ; --- START FACTORS
10729  486C D7            push a
10730  486D FD D8         push g
10731  486F 11            mov a, b
10732  4870 FD 7A         mov g, c
10733  4872 FD 2E 02 00   mov32 cb, $00000002
10733  4876 00 00 
10734  4878 FD D8         push g ; save 'g' as the div instruction uses it
10735  487A AE            div a, b ; %, a: quotient, b: remainder
10736  487B 11            mov a, b
10737  487C FD F1         pop g
10738  487E FD 38         mov c, g
10739  4880 27            mov b, a
10740  4881 FD F1         pop g
10741  4883 E4            pop a
10742  4884             ; --- END FACTORS
10743  4884 C0 00 00      cmp b, 0
10744  4887 C6 9A 48      je _if247_exit
10745  488A             _if247_TRUE:
10746  488A             ; putchar(' '); 
10747  488A             ; --- START FUNCTION CALL
10748  488A FD 2E 20 00   mov32 cb, $00000020
10748  488E 00 00 
10749  4890 DD            push bl
10750  4891 07 FA 64      call putchar
10751  4894 51 01 00      add sp, 1
10752  4897             ; --- END FUNCTION CALL
10753  4897 0A 9A 48      jmp _if247_exit
10754  489A             _if247_exit:
10755  489A             ; quadrant_name(1, i, 5); 
10756  489A             ; --- START FUNCTION CALL
10757  489A FD 2E 05 00   mov32 cb, $00000005
10757  489E 00 00 
10758  48A0 DD            push bl
10759  48A1 FA FF FF      lea d, [bp + -1] ; $i
10760  48A4 2A            mov b, [d]
10761  48A5 38 00 00      mov c, 0
10762  48A8 DD            push bl
10763  48A9 FD 2E 01 00   mov32 cb, $00000001
10763  48AD 00 00 
10764  48AF DD            push bl
10765  48B0 07 BF 59      call quadrant_name
10766  48B3 51 03 00      add sp, 3
10767  48B6             ; --- END FUNCTION CALL
10768  48B6             ; j0 = (int) (12 - (strlen(quadname) / 2)); 
10769  48B6 FA FB FF      lea d, [bp + -5] ; $j0
10770  48B9 DA            push d
10771  48BA FD 2E 0C 00   mov32 cb, $0000000c
10771  48BE 00 00 
10772  48C0             ; --- START TERMS
10773  48C0 D7            push a
10774  48C1 11            mov a, b
10775  48C2             ; --- START FUNCTION CALL
10776  48C2 3B C5 6E      mov d, _quadname_data ; $quadname
10777  48C5 2D            mov b, d
10778  48C6 38 00 00      mov c, 0
10779  48C9 FD AB         swp b
10780  48CB D8            push b
10781  48CC 07 1D 60      call strlen
10782  48CF 51 02 00      add sp, 2
10783  48D2             ; --- END FUNCTION CALL
10784  48D2             ; --- START FACTORS
10785  48D2 D7            push a
10786  48D3 FD D8         push g
10787  48D5 11            mov a, b
10788  48D6 FD 7A         mov g, c
10789  48D8 FD 2E 02 00   mov32 cb, $00000002
10789  48DC 00 00 
10790  48DE FD D8         push g ; save 'g' as the div instruction uses it
10791  48E0 AE            div a, b ; /, a: quotient, b: remainder
10792  48E1 FD F1         pop g
10793  48E3 FD 38         mov c, g
10794  48E5 27            mov b, a
10795  48E6 FD F1         pop g
10796  48E8 E4            pop a
10797  48E9             ; --- END FACTORS
10798  48E9 60            sub a, b
10799  48EA 27            mov b, a
10800  48EB E4            pop a
10801  48EC             ; --- END TERMS
10802  48EC E7            pop d
10803  48ED FD 43         mov [d], b
10804  48EF             ; for (j = 0; j < j0; j++) 
10805  48EF             _for260_init:
10806  48EF FA FD FF      lea d, [bp + -3] ; $j
10807  48F2 DA            push d
10808  48F3 FD 2E 00 00   mov32 cb, $00000000
10808  48F7 00 00 
10809  48F9 E7            pop d
10810  48FA FD 43         mov [d], b
10811  48FC             _for260_cond:
10812  48FC FA FD FF      lea d, [bp + -3] ; $j
10813  48FF 2A            mov b, [d]
10814  4900 38 00 00      mov c, 0
10815  4903             ; --- START RELATIONAL
10816  4903 D7            push a
10817  4904 11            mov a, b
10818  4905 FA FB FF      lea d, [bp + -5] ; $j0
10819  4908 2A            mov b, [d]
10820  4909 38 00 00      mov c, 0
10821  490C B0            cmp a, b
10822  490D FD 73         slt ; < (signed)
10823  490F E4            pop a
10824  4910             ; --- END RELATIONAL
10825  4910 C0 00 00      cmp b, 0
10826  4913 C6 36 49      je _for260_exit
10827  4916             _for260_block:
10828  4916             ; putchar(' '); 
10829  4916             ; --- START FUNCTION CALL
10830  4916 FD 2E 20 00   mov32 cb, $00000020
10830  491A 00 00 
10831  491C DD            push bl
10832  491D 07 FA 64      call putchar
10833  4920 51 01 00      add sp, 1
10834  4923             ; --- END FUNCTION CALL
10835  4923             _for260_update:
10836  4923 FA FD FF      lea d, [bp + -3] ; $j
10837  4926 2A            mov b, [d]
10838  4927 38 00 00      mov c, 0
10839  492A 11            mov a, b
10840  492B FD 77         inc b
10841  492D FA FD FF      lea d, [bp + -3] ; $j
10842  4930 FD 43         mov [d], b
10843  4932 27            mov b, a
10844  4933 0A FC 48      jmp _for260_cond
10845  4936             _for260_exit:
10846  4936             ; puts(quadname); 
10847  4936             ; --- START FUNCTION CALL
10848  4936 3B C5 6E      mov d, _quadname_data ; $quadname
10849  4939 2D            mov b, d
10850  493A 38 00 00      mov c, 0
10851  493D FD AB         swp b
10852  493F D8            push b
10853  4940 07 85 69      call puts
10854  4943 51 02 00      add sp, 2
10855  4946             ; --- END FUNCTION CALL
10856  4946             _for236_update:
10857  4946 FA FF FF      lea d, [bp + -1] ; $i
10858  4949 2A            mov b, [d]
10859  494A 38 00 00      mov c, 0
10860  494D 11            mov a, b
10861  494E FD 77         inc b
10862  4950 FA FF FF      lea d, [bp + -1] ; $i
10863  4953 FD 43         mov [d], b
10864  4955 27            mov b, a
10865  4956 0A 30 47      jmp _for236_cond
10866  4959             _for236_exit:
10867  4959             ; puts(gm_1); 
10868  4959             ; --- START FUNCTION CALL
10869  4959 3B 39 70      mov d, _gm_1 ; $gm_1
10870  495C 2A            mov b, [d]
10871  495D 38 00 00      mov c, 0
10872  4960 FD AB         swp b
10873  4962 D8            push b
10874  4963 07 85 69      call puts
10875  4966 51 02 00      add sp, 2
10876  4969             ; --- END FUNCTION CALL
10877  4969 F9            leave
10878  496A 09            ret
10879  496B             
10880  496B             compute_vector:
10881  496B F8 00 00      enter 0 ; (push bp; mov bp, sp)
10882  496E             ; long unsigned int         xl, al; 
10883  496E 52 04 00      sub sp, 4
10884  4971 52 04 00      sub sp, 4
10885  4974             ; puts("  DIRECTION = "); 
10886  4974             ; --- START FUNCTION CALL
10887  4974 26 76 80      mov b, _s146 ; "  DIRECTION = "
10888  4977 FD AB         swp b
10889  4979 D8            push b
10890  497A 07 85 69      call puts
10891  497D 51 02 00      add sp, 2
10892  4980             ; --- END FUNCTION CALL
10893  4980             ; x = x - a; 
10894  4980 FA 07 00      lea d, [bp + 7] ; $x
10895  4983 DA            push d
10896  4984 FA 07 00      lea d, [bp + 7] ; $x
10897  4987 2A            mov b, [d]
10898  4988 38 00 00      mov c, 0
10899  498B             ; --- START TERMS
10900  498B D7            push a
10901  498C 11            mov a, b
10902  498D FA 0B 00      lea d, [bp + 11] ; $a
10903  4990 2A            mov b, [d]
10904  4991 38 00 00      mov c, 0
10905  4994 60            sub a, b
10906  4995 27            mov b, a
10907  4996 E4            pop a
10908  4997             ; --- END TERMS
10909  4997 E7            pop d
10910  4998 FD 43         mov [d], b
10911  499A             ; a = c1 - w1; 
10912  499A FA 0B 00      lea d, [bp + 11] ; $a
10913  499D DA            push d
10914  499E FA 09 00      lea d, [bp + 9] ; $c1
10915  49A1 2A            mov b, [d]
10916  49A2 38 00 00      mov c, 0
10917  49A5             ; --- START TERMS
10918  49A5 D7            push a
10919  49A6 11            mov a, b
10920  49A7 FA 05 00      lea d, [bp + 5] ; $w1
10921  49AA 2A            mov b, [d]
10922  49AB 38 00 00      mov c, 0
10923  49AE 60            sub a, b
10924  49AF 27            mov b, a
10925  49B0 E4            pop a
10926  49B1             ; --- END TERMS
10927  49B1 E7            pop d
10928  49B2 FD 43         mov [d], b
10929  49B4             ; xl = abs(x); 
10930  49B4 FA FD FF      lea d, [bp + -3] ; $xl
10931  49B7 DA            push d
10932  49B8             ; --- START FUNCTION CALL
10933  49B8 FA 07 00      lea d, [bp + 7] ; $x
10934  49BB 2A            mov b, [d]
10935  49BC 38 00 00      mov c, 0
10936  49BF FD AB         swp b
10937  49C1 D8            push b
10938  49C2 07 66 6B      call abs
10939  49C5 51 02 00      add sp, 2
10940  49C8             ; --- END FUNCTION CALL
10941  49C8 E7            pop d
10942  49C9 FD 43         mov [d], b
10943  49CB 26 00 00      mov b, 0
10944  49CE FD 44 02 00   mov [d + 2], b
10945  49D2             ; al = abs(a); 
10946  49D2 FA F9 FF      lea d, [bp + -7] ; $al
10947  49D5 DA            push d
10948  49D6             ; --- START FUNCTION CALL
10949  49D6 FA 0B 00      lea d, [bp + 11] ; $a
10950  49D9 2A            mov b, [d]
10951  49DA 38 00 00      mov c, 0
10952  49DD FD AB         swp b
10953  49DF D8            push b
10954  49E0 07 66 6B      call abs
10955  49E3 51 02 00      add sp, 2
10956  49E6             ; --- END FUNCTION CALL
10957  49E6 E7            pop d
10958  49E7 FD 43         mov [d], b
10959  49E9 26 00 00      mov b, 0
10960  49EC FD 44 02 00   mov [d + 2], b
10961  49F0             ; if (x < 0) { 
10962  49F0             _if261_cond:
10963  49F0 FA 07 00      lea d, [bp + 7] ; $x
10964  49F3 2A            mov b, [d]
10965  49F4 38 00 00      mov c, 0
10966  49F7             ; --- START RELATIONAL
10967  49F7 D7            push a
10968  49F8 11            mov a, b
10969  49F9 FD 2E 00 00   mov32 cb, $00000000
10969  49FD 00 00 
10970  49FF B0            cmp a, b
10971  4A00 FD 73         slt ; < (signed)
10972  4A02 E4            pop a
10973  4A03             ; --- END RELATIONAL
10974  4A03 C0 00 00      cmp b, 0
10975  4A06 C6 52 4C      je _if261_else
10976  4A09             _if261_TRUE:
10977  4A09             ; if (a > 0) { 
10978  4A09             _if262_cond:
10979  4A09 FA 0B 00      lea d, [bp + 11] ; $a
10980  4A0C 2A            mov b, [d]
10981  4A0D 38 00 00      mov c, 0
10982  4A10             ; --- START RELATIONAL
10983  4A10 D7            push a
10984  4A11 11            mov a, b
10985  4A12 FD 2E 00 00   mov32 cb, $00000000
10985  4A16 00 00 
10986  4A18 B0            cmp a, b
10987  4A19 FD 7F         sgt ; >
10988  4A1B E4            pop a
10989  4A1C             ; --- END RELATIONAL
10990  4A1C C0 00 00      cmp b, 0
10991  4A1F C6 17 4C      je _if262_else
10992  4A22             _if262_TRUE:
10993  4A22             ; c1 = 300; 
10994  4A22 FA 09 00      lea d, [bp + 9] ; $c1
10995  4A25 DA            push d
10996  4A26 FD 2E 2C 01   mov32 cb, $0000012c
10996  4A2A 00 00 
10997  4A2C E7            pop d
10998  4A2D FD 43         mov [d], b
10999  4A2F             ; if (al >= xl) 
11000  4A2F             _if263_cond:
11001  4A2F FA F9 FF      lea d, [bp + -7] ; $al
11002  4A32 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11003  4A35 FD 39         mov c, b ; And place it into C
11004  4A37 2A            mov b, [d] ; Lower Word in B
11005  4A38             ; --- START RELATIONAL
11006  4A38 D7            push a
11007  4A39 FD D8         push g
11008  4A3B 11            mov a, b
11009  4A3C FD 7A         mov g, c
11010  4A3E FA FD FF      lea d, [bp + -3] ; $xl
11011  4A41 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11012  4A44 FD 39         mov c, b ; And place it into C
11013  4A46 2A            mov b, [d] ; Lower Word in B
11014  4A47 FD AF         cmp32 ga, cb
11015  4A49 FD 82         sgeu
11016  4A4B FD F1         pop g
11017  4A4D E4            pop a
11018  4A4E             ; --- END RELATIONAL
11019  4A4E C0 00 00      cmp b, 0
11020  4A51 C6 E3 4A      je _if263_else
11021  4A54             _if263_TRUE:
11022  4A54             ; printf("%s", print100(c1 + ((xl * 100) / al))); 
11023  4A54             ; --- START FUNCTION CALL
11024  4A54             ; --- START FUNCTION CALL
11025  4A54 FA 09 00      lea d, [bp + 9] ; $c1
11026  4A57 2A            mov b, [d]
11027  4A58 38 00 00      mov c, 0
11028  4A5B             ; --- START TERMS
11029  4A5B D7            push a
11030  4A5C 11            mov a, b
11031  4A5D FA FD FF      lea d, [bp + -3] ; $xl
11032  4A60 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11033  4A63 FD 39         mov c, b ; And place it into C
11034  4A65 2A            mov b, [d] ; Lower Word in B
11035  4A66             ; --- START FACTORS
11036  4A66 D7            push a
11037  4A67 FD D8         push g
11038  4A69 11            mov a, b
11039  4A6A FD 7A         mov g, c
11040  4A6C FD 2E 64 00   mov32 cb, $00000064
11040  4A70 00 00 
11041  4A72 D7            push a     ; save left operand
11042  4A73 8E            xor a, b   ; xor sign bits
11043  4A74 FD AA         swp a      ; swap bytes
11044  4A76 83            mov cl, al ; save result of xor into 'dl'
11045  4A77 E4            pop a      ; restore left side operator
11046  4A78 DF            push cl    ; save result of xor above
11047  4A79 FD AA         swp a  
11048  4A7B 93 80         test al, $80  
11049  4A7D FD AA         swp a  
11050  4A7F C6 84 4A      jz skip_invert_a_310  
11051  4A82 FD 95         neg a 
11052  4A84             skip_invert_a_310:   
11053  4A84 FD AB         swp b
11054  4A86 FD 93 80      test bl, $80  
11055  4A89 FD AB         swp b
11056  4A8B C6 90 4A      jz skip_invert_b_310  
11057  4A8E FD 97         neg b 
11058  4A90             skip_invert_b_310:   
11059  4A90 AC            mul a, b ; *
11060  4A91 FD 78         mov g, a
11061  4A93 11            mov a, b
11062  4A94 EA            pop bl
11063  4A95 FD 93 80      test bl, $80
11064  4A98 C6 A5 4A      jz _same_signs_310
11065  4A9B 2F            mov bl, al
11066  4A9C 95            not a
11067  4A9D FD 97         neg b
11068  4A9F 5B 00 00      adc a, 0
11069  4AA2 FD 78         mov g, a
11070  4AA4 11            mov a, b
11071  4AA5             _same_signs_310:
11072  4AA5 FD 38         mov c, g
11073  4AA7 27            mov b, a
11074  4AA8 FD F1         pop g
11075  4AAA E4            pop a
11076  4AAB             ; --- END FACTORS
11077  4AAB             ; --- START FACTORS
11078  4AAB D7            push a
11079  4AAC FD D8         push g
11080  4AAE 11            mov a, b
11081  4AAF FD 7A         mov g, c
11082  4AB1 FA F9 FF      lea d, [bp + -7] ; $al
11083  4AB4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11084  4AB7 FD 39         mov c, b ; And place it into C
11085  4AB9 2A            mov b, [d] ; Lower Word in B
11086  4ABA FD D8         push g ; save 'g' as the div instruction uses it
11087  4ABC AE            div a, b ; /, a: quotient, b: remainder
11088  4ABD FD F1         pop g
11089  4ABF FD 38         mov c, g
11090  4AC1 27            mov b, a
11091  4AC2 FD F1         pop g
11092  4AC4 E4            pop a
11093  4AC5             ; --- END FACTORS
11094  4AC5 FD 15         add32 cb, ga
11095  4AC7 E4            pop a
11096  4AC8             ; --- END TERMS
11097  4AC8 FD AB         swp b
11098  4ACA D8            push b
11099  4ACB 07 12 09      call print100
11100  4ACE 51 02 00      add sp, 2
11101  4AD1             ; --- END FUNCTION CALL
11102  4AD1 FD AB         swp b
11103  4AD3 D8            push b
11104  4AD4 26 85 80      mov b, _s147 ; "%s"
11105  4AD7 FD AB         swp b
11106  4AD9 D8            push b
11107  4ADA 07 78 60      call printf
11108  4ADD 51 04 00      add sp, 4
11109  4AE0             ; --- END FUNCTION CALL
11110  4AE0 0A CB 4B      jmp _if263_exit
11111  4AE3             _if263_else:
11112  4AE3             ; printf("%s", print100(c1 + ((((xl * 2) - al) * 100)  / xl))); 
11113  4AE3             ; --- START FUNCTION CALL
11114  4AE3             ; --- START FUNCTION CALL
11115  4AE3 FA 09 00      lea d, [bp + 9] ; $c1
11116  4AE6 2A            mov b, [d]
11117  4AE7 38 00 00      mov c, 0
11118  4AEA             ; --- START TERMS
11119  4AEA D7            push a
11120  4AEB 11            mov a, b
11121  4AEC FA FD FF      lea d, [bp + -3] ; $xl
11122  4AEF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11123  4AF2 FD 39         mov c, b ; And place it into C
11124  4AF4 2A            mov b, [d] ; Lower Word in B
11125  4AF5             ; --- START FACTORS
11126  4AF5 D7            push a
11127  4AF6 FD D8         push g
11128  4AF8 11            mov a, b
11129  4AF9 FD 7A         mov g, c
11130  4AFB FD 2E 02 00   mov32 cb, $00000002
11130  4AFF 00 00 
11131  4B01 D7            push a     ; save left operand
11132  4B02 8E            xor a, b   ; xor sign bits
11133  4B03 FD AA         swp a      ; swap bytes
11134  4B05 83            mov cl, al ; save result of xor into 'dl'
11135  4B06 E4            pop a      ; restore left side operator
11136  4B07 DF            push cl    ; save result of xor above
11137  4B08 FD AA         swp a  
11138  4B0A 93 80         test al, $80  
11139  4B0C FD AA         swp a  
11140  4B0E C6 13 4B      jz skip_invert_a_485  
11141  4B11 FD 95         neg a 
11142  4B13             skip_invert_a_485:   
11143  4B13 FD AB         swp b
11144  4B15 FD 93 80      test bl, $80  
11145  4B18 FD AB         swp b
11146  4B1A C6 1F 4B      jz skip_invert_b_485  
11147  4B1D FD 97         neg b 
11148  4B1F             skip_invert_b_485:   
11149  4B1F AC            mul a, b ; *
11150  4B20 FD 78         mov g, a
11151  4B22 11            mov a, b
11152  4B23 EA            pop bl
11153  4B24 FD 93 80      test bl, $80
11154  4B27 C6 34 4B      jz _same_signs_485
11155  4B2A 2F            mov bl, al
11156  4B2B 95            not a
11157  4B2C FD 97         neg b
11158  4B2E 5B 00 00      adc a, 0
11159  4B31 FD 78         mov g, a
11160  4B33 11            mov a, b
11161  4B34             _same_signs_485:
11162  4B34 FD 38         mov c, g
11163  4B36 27            mov b, a
11164  4B37 FD F1         pop g
11165  4B39 E4            pop a
11166  4B3A             ; --- END FACTORS
11167  4B3A             ; --- START TERMS
11168  4B3A D7            push a
11169  4B3B FD D8         push g
11170  4B3D 11            mov a, b
11171  4B3E FD 7A         mov g, c
11172  4B40 FA F9 FF      lea d, [bp + -7] ; $al
11173  4B43 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11174  4B46 FD 39         mov c, b ; And place it into C
11175  4B48 2A            mov b, [d] ; Lower Word in B
11176  4B49 FD 1C         sub32 ga, cb
11177  4B4B 27            mov b, a
11178  4B4C FD 38         mov c, g
11179  4B4E FD F1         pop g
11180  4B50 E4            pop a
11181  4B51             ; --- END TERMS
11182  4B51             ; --- START FACTORS
11183  4B51 D7            push a
11184  4B52 FD D8         push g
11185  4B54 11            mov a, b
11186  4B55 FD 7A         mov g, c
11187  4B57 FD 2E 64 00   mov32 cb, $00000064
11187  4B5B 00 00 
11188  4B5D D7            push a     ; save left operand
11189  4B5E 8E            xor a, b   ; xor sign bits
11190  4B5F FD AA         swp a      ; swap bytes
11191  4B61 83            mov cl, al ; save result of xor into 'dl'
11192  4B62 E4            pop a      ; restore left side operator
11193  4B63 DF            push cl    ; save result of xor above
11194  4B64 FD AA         swp a  
11195  4B66 93 80         test al, $80  
11196  4B68 FD AA         swp a  
11197  4B6A C6 6F 4B      jz skip_invert_a_486  
11198  4B6D FD 95         neg a 
11199  4B6F             skip_invert_a_486:   
11200  4B6F FD AB         swp b
11201  4B71 FD 93 80      test bl, $80  
11202  4B74 FD AB         swp b
11203  4B76 C6 7B 4B      jz skip_invert_b_486  
11204  4B79 FD 97         neg b 
11205  4B7B             skip_invert_b_486:   
11206  4B7B AC            mul a, b ; *
11207  4B7C FD 78         mov g, a
11208  4B7E 11            mov a, b
11209  4B7F EA            pop bl
11210  4B80 FD 93 80      test bl, $80
11211  4B83 C6 90 4B      jz _same_signs_486
11212  4B86 2F            mov bl, al
11213  4B87 95            not a
11214  4B88 FD 97         neg b
11215  4B8A 5B 00 00      adc a, 0
11216  4B8D FD 78         mov g, a
11217  4B8F 11            mov a, b
11218  4B90             _same_signs_486:
11219  4B90 FD 38         mov c, g
11220  4B92 27            mov b, a
11221  4B93 FD F1         pop g
11222  4B95 E4            pop a
11223  4B96             ; --- END FACTORS
11224  4B96             ; --- START FACTORS
11225  4B96 D7            push a
11226  4B97 FD D8         push g
11227  4B99 11            mov a, b
11228  4B9A FD 7A         mov g, c
11229  4B9C FA FD FF      lea d, [bp + -3] ; $xl
11230  4B9F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11231  4BA2 FD 39         mov c, b ; And place it into C
11232  4BA4 2A            mov b, [d] ; Lower Word in B
11233  4BA5 FD D8         push g ; save 'g' as the div instruction uses it
11234  4BA7 AE            div a, b ; /, a: quotient, b: remainder
11235  4BA8 FD F1         pop g
11236  4BAA FD 38         mov c, g
11237  4BAC 27            mov b, a
11238  4BAD FD F1         pop g
11239  4BAF E4            pop a
11240  4BB0             ; --- END FACTORS
11241  4BB0 FD 15         add32 cb, ga
11242  4BB2 E4            pop a
11243  4BB3             ; --- END TERMS
11244  4BB3 FD AB         swp b
11245  4BB5 D8            push b
11246  4BB6 07 12 09      call print100
11247  4BB9 51 02 00      add sp, 2
11248  4BBC             ; --- END FUNCTION CALL
11249  4BBC FD AB         swp b
11250  4BBE D8            push b
11251  4BBF 26 85 80      mov b, _s147 ; "%s"
11252  4BC2 FD AB         swp b
11253  4BC4 D8            push b
11254  4BC5 07 78 60      call printf
11255  4BC8 51 04 00      add sp, 4
11256  4BCB             ; --- END FUNCTION CALL
11257  4BCB             _if263_exit:
11258  4BCB             ; printf(dist_1, print100((x > a) ? x : a)); 
11259  4BCB             ; --- START FUNCTION CALL
11260  4BCB             ; --- START FUNCTION CALL
11261  4BCB             _ternary491_cond:
11262  4BCB FA 07 00      lea d, [bp + 7] ; $x
11263  4BCE 2A            mov b, [d]
11264  4BCF 38 00 00      mov c, 0
11265  4BD2             ; --- START RELATIONAL
11266  4BD2 D7            push a
11267  4BD3 11            mov a, b
11268  4BD4 FA 0B 00      lea d, [bp + 11] ; $a
11269  4BD7 2A            mov b, [d]
11270  4BD8 38 00 00      mov c, 0
11271  4BDB B0            cmp a, b
11272  4BDC FD 7F         sgt ; >
11273  4BDE E4            pop a
11274  4BDF             ; --- END RELATIONAL
11275  4BDF C0 00 00      cmp b, 0
11276  4BE2 C6 EF 4B      je _ternary491_FALSE
11277  4BE5             _ternary491_TRUE:
11278  4BE5 FA 07 00      lea d, [bp + 7] ; $x
11279  4BE8 2A            mov b, [d]
11280  4BE9 38 00 00      mov c, 0
11281  4BEC 0A F6 4B      jmp _ternary491_exit
11282  4BEF             _ternary491_FALSE:
11283  4BEF FA 0B 00      lea d, [bp + 11] ; $a
11284  4BF2 2A            mov b, [d]
11285  4BF3 38 00 00      mov c, 0
11286  4BF6             _ternary491_exit:
11287  4BF6 FD AB         swp b
11288  4BF8 D8            push b
11289  4BF9 07 12 09      call print100
11290  4BFC 51 02 00      add sp, 2
11291  4BFF             ; --- END FUNCTION CALL
11292  4BFF FD AB         swp b
11293  4C01 D8            push b
11294  4C02 3B 4D 70      mov d, _dist_1 ; $dist_1
11295  4C05 2A            mov b, [d]
11296  4C06 38 00 00      mov c, 0
11297  4C09 FD AB         swp b
11298  4C0B D8            push b
11299  4C0C 07 78 60      call printf
11300  4C0F 51 04 00      add sp, 4
11301  4C12             ; --- END FUNCTION CALL
11302  4C12             ; return; 
11303  4C12 F9            leave
11304  4C13 09            ret
11305  4C14 0A 4F 4C      jmp _if262_exit
11306  4C17             _if262_else:
11307  4C17             ; if (x != 0){ 
11308  4C17             _if492_cond:
11309  4C17 FA 07 00      lea d, [bp + 7] ; $x
11310  4C1A 2A            mov b, [d]
11311  4C1B 38 00 00      mov c, 0
11312  4C1E             ; --- START RELATIONAL
11313  4C1E D7            push a
11314  4C1F 11            mov a, b
11315  4C20 FD 2E 00 00   mov32 cb, $00000000
11315  4C24 00 00 
11316  4C26 B0            cmp a, b
11317  4C27 FD 72         sneq ; !=
11318  4C29 E4            pop a
11319  4C2A             ; --- END RELATIONAL
11320  4C2A C0 00 00      cmp b, 0
11321  4C2D C6 42 4C      je _if492_else
11322  4C30             _if492_TRUE:
11323  4C30             ; c1 = 500; 
11324  4C30 FA 09 00      lea d, [bp + 9] ; $c1
11325  4C33 DA            push d
11326  4C34 FD 2E F4 01   mov32 cb, $000001f4
11326  4C38 00 00 
11327  4C3A E7            pop d
11328  4C3B FD 43         mov [d], b
11329  4C3D             ; return; 
11330  4C3D F9            leave
11331  4C3E 09            ret
11332  4C3F 0A 4F 4C      jmp _if492_exit
11333  4C42             _if492_else:
11334  4C42             ; c1 = 700; 
11335  4C42 FA 09 00      lea d, [bp + 9] ; $c1
11336  4C45 DA            push d
11337  4C46 FD 2E BC 02   mov32 cb, $000002bc
11337  4C4A 00 00 
11338  4C4C E7            pop d
11339  4C4D FD 43         mov [d], b
11340  4C4F             _if492_exit:
11341  4C4F             _if262_exit:
11342  4C4F 0A CC 4E      jmp _if261_exit
11343  4C52             _if261_else:
11344  4C52             ; if (a < 0) { 
11345  4C52             _if493_cond:
11346  4C52 FA 0B 00      lea d, [bp + 11] ; $a
11347  4C55 2A            mov b, [d]
11348  4C56 38 00 00      mov c, 0
11349  4C59             ; --- START RELATIONAL
11350  4C59 D7            push a
11351  4C5A 11            mov a, b
11352  4C5B FD 2E 00 00   mov32 cb, $00000000
11352  4C5F 00 00 
11353  4C61 B0            cmp a, b
11354  4C62 FD 73         slt ; < (signed)
11355  4C64 E4            pop a
11356  4C65             ; --- END RELATIONAL
11357  4C65 C0 00 00      cmp b, 0
11358  4C68 C6 7B 4C      je _if493_else
11359  4C6B             _if493_TRUE:
11360  4C6B             ; c1 = 700; 
11361  4C6B FA 09 00      lea d, [bp + 9] ; $c1
11362  4C6E DA            push d
11363  4C6F FD 2E BC 02   mov32 cb, $000002bc
11363  4C73 00 00 
11364  4C75 E7            pop d
11365  4C76 FD 43         mov [d], b
11366  4C78 0A CC 4E      jmp _if493_exit
11367  4C7B             _if493_else:
11368  4C7B             ; if (x > 0) { 
11369  4C7B             _if494_cond:
11370  4C7B FA 07 00      lea d, [bp + 7] ; $x
11371  4C7E 2A            mov b, [d]
11372  4C7F 38 00 00      mov c, 0
11373  4C82             ; --- START RELATIONAL
11374  4C82 D7            push a
11375  4C83 11            mov a, b
11376  4C84 FD 2E 00 00   mov32 cb, $00000000
11376  4C88 00 00 
11377  4C8A B0            cmp a, b
11378  4C8B FD 7F         sgt ; >
11379  4C8D E4            pop a
11380  4C8E             ; --- END RELATIONAL
11381  4C8E C0 00 00      cmp b, 0
11382  4C91 C6 A4 4C      je _if494_else
11383  4C94             _if494_TRUE:
11384  4C94             ; c1 = 100; 
11385  4C94 FA 09 00      lea d, [bp + 9] ; $c1
11386  4C97 DA            push d
11387  4C98 FD 2E 64 00   mov32 cb, $00000064
11387  4C9C 00 00 
11388  4C9E E7            pop d
11389  4C9F FD 43         mov [d], b
11390  4CA1 0A CC 4E      jmp _if494_exit
11391  4CA4             _if494_else:
11392  4CA4             ; if (a == 0) { 
11393  4CA4             _if495_cond:
11394  4CA4 FA 0B 00      lea d, [bp + 11] ; $a
11395  4CA7 2A            mov b, [d]
11396  4CA8 38 00 00      mov c, 0
11397  4CAB             ; --- START RELATIONAL
11398  4CAB D7            push a
11399  4CAC 11            mov a, b
11400  4CAD FD 2E 00 00   mov32 cb, $00000000
11400  4CB1 00 00 
11401  4CB3 B0            cmp a, b
11402  4CB4 FD 71         seq ; ==
11403  4CB6 E4            pop a
11404  4CB7             ; --- END RELATIONAL
11405  4CB7 C0 00 00      cmp b, 0
11406  4CBA C6 CD 4C      je _if495_else
11407  4CBD             _if495_TRUE:
11408  4CBD             ; c1 = 500; 
11409  4CBD FA 09 00      lea d, [bp + 9] ; $c1
11410  4CC0 DA            push d
11411  4CC1 FD 2E F4 01   mov32 cb, $000001f4
11411  4CC5 00 00 
11412  4CC7 E7            pop d
11413  4CC8 FD 43         mov [d], b
11414  4CCA 0A CC 4E      jmp _if495_exit
11415  4CCD             _if495_else:
11416  4CCD             ; c1 = 100; 
11417  4CCD FA 09 00      lea d, [bp + 9] ; $c1
11418  4CD0 DA            push d
11419  4CD1 FD 2E 64 00   mov32 cb, $00000064
11419  4CD5 00 00 
11420  4CD7 E7            pop d
11421  4CD8 FD 43         mov [d], b
11422  4CDA             ; if (al <= xl) 
11423  4CDA             _if496_cond:
11424  4CDA FA F9 FF      lea d, [bp + -7] ; $al
11425  4CDD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11426  4CE0 FD 39         mov c, b ; And place it into C
11427  4CE2 2A            mov b, [d] ; Lower Word in B
11428  4CE3             ; --- START RELATIONAL
11429  4CE3 D7            push a
11430  4CE4 FD D8         push g
11431  4CE6 11            mov a, b
11432  4CE7 FD 7A         mov g, c
11433  4CE9 FA FD FF      lea d, [bp + -3] ; $xl
11434  4CEC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11435  4CEF FD 39         mov c, b ; And place it into C
11436  4CF1 2A            mov b, [d] ; Lower Word in B
11437  4CF2 FD AF         cmp32 ga, cb
11438  4CF4 FD 76         sleu
11439  4CF6 FD F1         pop g
11440  4CF8 E4            pop a
11441  4CF9             ; --- END RELATIONAL
11442  4CF9 C0 00 00      cmp b, 0
11443  4CFC C6 8E 4D      je _if496_else
11444  4CFF             _if496_TRUE:
11445  4CFF             ; printf("%s", print100(c1 + ((al * 100) / xl))); 
11446  4CFF             ; --- START FUNCTION CALL
11447  4CFF             ; --- START FUNCTION CALL
11448  4CFF FA 09 00      lea d, [bp + 9] ; $c1
11449  4D02 2A            mov b, [d]
11450  4D03 38 00 00      mov c, 0
11451  4D06             ; --- START TERMS
11452  4D06 D7            push a
11453  4D07 11            mov a, b
11454  4D08 FA F9 FF      lea d, [bp + -7] ; $al
11455  4D0B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11456  4D0E FD 39         mov c, b ; And place it into C
11457  4D10 2A            mov b, [d] ; Lower Word in B
11458  4D11             ; --- START FACTORS
11459  4D11 D7            push a
11460  4D12 FD D8         push g
11461  4D14 11            mov a, b
11462  4D15 FD 7A         mov g, c
11463  4D17 FD 2E 64 00   mov32 cb, $00000064
11463  4D1B 00 00 
11464  4D1D D7            push a     ; save left operand
11465  4D1E 8E            xor a, b   ; xor sign bits
11466  4D1F FD AA         swp a      ; swap bytes
11467  4D21 83            mov cl, al ; save result of xor into 'dl'
11468  4D22 E4            pop a      ; restore left side operator
11469  4D23 DF            push cl    ; save result of xor above
11470  4D24 FD AA         swp a  
11471  4D26 93 80         test al, $80  
11472  4D28 FD AA         swp a  
11473  4D2A C6 2F 4D      jz skip_invert_a_543  
11474  4D2D FD 95         neg a 
11475  4D2F             skip_invert_a_543:   
11476  4D2F FD AB         swp b
11477  4D31 FD 93 80      test bl, $80  
11478  4D34 FD AB         swp b
11479  4D36 C6 3B 4D      jz skip_invert_b_543  
11480  4D39 FD 97         neg b 
11481  4D3B             skip_invert_b_543:   
11482  4D3B AC            mul a, b ; *
11483  4D3C FD 78         mov g, a
11484  4D3E 11            mov a, b
11485  4D3F EA            pop bl
11486  4D40 FD 93 80      test bl, $80
11487  4D43 C6 50 4D      jz _same_signs_543
11488  4D46 2F            mov bl, al
11489  4D47 95            not a
11490  4D48 FD 97         neg b
11491  4D4A 5B 00 00      adc a, 0
11492  4D4D FD 78         mov g, a
11493  4D4F 11            mov a, b
11494  4D50             _same_signs_543:
11495  4D50 FD 38         mov c, g
11496  4D52 27            mov b, a
11497  4D53 FD F1         pop g
11498  4D55 E4            pop a
11499  4D56             ; --- END FACTORS
11500  4D56             ; --- START FACTORS
11501  4D56 D7            push a
11502  4D57 FD D8         push g
11503  4D59 11            mov a, b
11504  4D5A FD 7A         mov g, c
11505  4D5C FA FD FF      lea d, [bp + -3] ; $xl
11506  4D5F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11507  4D62 FD 39         mov c, b ; And place it into C
11508  4D64 2A            mov b, [d] ; Lower Word in B
11509  4D65 FD D8         push g ; save 'g' as the div instruction uses it
11510  4D67 AE            div a, b ; /, a: quotient, b: remainder
11511  4D68 FD F1         pop g
11512  4D6A FD 38         mov c, g
11513  4D6C 27            mov b, a
11514  4D6D FD F1         pop g
11515  4D6F E4            pop a
11516  4D70             ; --- END FACTORS
11517  4D70 FD 15         add32 cb, ga
11518  4D72 E4            pop a
11519  4D73             ; --- END TERMS
11520  4D73 FD AB         swp b
11521  4D75 D8            push b
11522  4D76 07 12 09      call print100
11523  4D79 51 02 00      add sp, 2
11524  4D7C             ; --- END FUNCTION CALL
11525  4D7C FD AB         swp b
11526  4D7E D8            push b
11527  4D7F 26 85 80      mov b, _s147 ; "%s"
11528  4D82 FD AB         swp b
11529  4D84 D8            push b
11530  4D85 07 78 60      call printf
11531  4D88 51 04 00      add sp, 4
11532  4D8B             ; --- END FUNCTION CALL
11533  4D8B 0A 76 4E      jmp _if496_exit
11534  4D8E             _if496_else:
11535  4D8E             ; printf("%s", print100(c1 + ((((al * 2) - xl) * 100) / al))); 
11536  4D8E             ; --- START FUNCTION CALL
11537  4D8E             ; --- START FUNCTION CALL
11538  4D8E FA 09 00      lea d, [bp + 9] ; $c1
11539  4D91 2A            mov b, [d]
11540  4D92 38 00 00      mov c, 0
11541  4D95             ; --- START TERMS
11542  4D95 D7            push a
11543  4D96 11            mov a, b
11544  4D97 FA F9 FF      lea d, [bp + -7] ; $al
11545  4D9A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11546  4D9D FD 39         mov c, b ; And place it into C
11547  4D9F 2A            mov b, [d] ; Lower Word in B
11548  4DA0             ; --- START FACTORS
11549  4DA0 D7            push a
11550  4DA1 FD D8         push g
11551  4DA3 11            mov a, b
11552  4DA4 FD 7A         mov g, c
11553  4DA6 FD 2E 02 00   mov32 cb, $00000002
11553  4DAA 00 00 
11554  4DAC D7            push a     ; save left operand
11555  4DAD 8E            xor a, b   ; xor sign bits
11556  4DAE FD AA         swp a      ; swap bytes
11557  4DB0 83            mov cl, al ; save result of xor into 'dl'
11558  4DB1 E4            pop a      ; restore left side operator
11559  4DB2 DF            push cl    ; save result of xor above
11560  4DB3 FD AA         swp a  
11561  4DB5 93 80         test al, $80  
11562  4DB7 FD AA         swp a  
11563  4DB9 C6 BE 4D      jz skip_invert_a_718  
11564  4DBC FD 95         neg a 
11565  4DBE             skip_invert_a_718:   
11566  4DBE FD AB         swp b
11567  4DC0 FD 93 80      test bl, $80  
11568  4DC3 FD AB         swp b
11569  4DC5 C6 CA 4D      jz skip_invert_b_718  
11570  4DC8 FD 97         neg b 
11571  4DCA             skip_invert_b_718:   
11572  4DCA AC            mul a, b ; *
11573  4DCB FD 78         mov g, a
11574  4DCD 11            mov a, b
11575  4DCE EA            pop bl
11576  4DCF FD 93 80      test bl, $80
11577  4DD2 C6 DF 4D      jz _same_signs_718
11578  4DD5 2F            mov bl, al
11579  4DD6 95            not a
11580  4DD7 FD 97         neg b
11581  4DD9 5B 00 00      adc a, 0
11582  4DDC FD 78         mov g, a
11583  4DDE 11            mov a, b
11584  4DDF             _same_signs_718:
11585  4DDF FD 38         mov c, g
11586  4DE1 27            mov b, a
11587  4DE2 FD F1         pop g
11588  4DE4 E4            pop a
11589  4DE5             ; --- END FACTORS
11590  4DE5             ; --- START TERMS
11591  4DE5 D7            push a
11592  4DE6 FD D8         push g
11593  4DE8 11            mov a, b
11594  4DE9 FD 7A         mov g, c
11595  4DEB FA FD FF      lea d, [bp + -3] ; $xl
11596  4DEE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11597  4DF1 FD 39         mov c, b ; And place it into C
11598  4DF3 2A            mov b, [d] ; Lower Word in B
11599  4DF4 FD 1C         sub32 ga, cb
11600  4DF6 27            mov b, a
11601  4DF7 FD 38         mov c, g
11602  4DF9 FD F1         pop g
11603  4DFB E4            pop a
11604  4DFC             ; --- END TERMS
11605  4DFC             ; --- START FACTORS
11606  4DFC D7            push a
11607  4DFD FD D8         push g
11608  4DFF 11            mov a, b
11609  4E00 FD 7A         mov g, c
11610  4E02 FD 2E 64 00   mov32 cb, $00000064
11610  4E06 00 00 
11611  4E08 D7            push a     ; save left operand
11612  4E09 8E            xor a, b   ; xor sign bits
11613  4E0A FD AA         swp a      ; swap bytes
11614  4E0C 83            mov cl, al ; save result of xor into 'dl'
11615  4E0D E4            pop a      ; restore left side operator
11616  4E0E DF            push cl    ; save result of xor above
11617  4E0F FD AA         swp a  
11618  4E11 93 80         test al, $80  
11619  4E13 FD AA         swp a  
11620  4E15 C6 1A 4E      jz skip_invert_a_719  
11621  4E18 FD 95         neg a 
11622  4E1A             skip_invert_a_719:   
11623  4E1A FD AB         swp b
11624  4E1C FD 93 80      test bl, $80  
11625  4E1F FD AB         swp b
11626  4E21 C6 26 4E      jz skip_invert_b_719  
11627  4E24 FD 97         neg b 
11628  4E26             skip_invert_b_719:   
11629  4E26 AC            mul a, b ; *
11630  4E27 FD 78         mov g, a
11631  4E29 11            mov a, b
11632  4E2A EA            pop bl
11633  4E2B FD 93 80      test bl, $80
11634  4E2E C6 3B 4E      jz _same_signs_719
11635  4E31 2F            mov bl, al
11636  4E32 95            not a
11637  4E33 FD 97         neg b
11638  4E35 5B 00 00      adc a, 0
11639  4E38 FD 78         mov g, a
11640  4E3A 11            mov a, b
11641  4E3B             _same_signs_719:
11642  4E3B FD 38         mov c, g
11643  4E3D 27            mov b, a
11644  4E3E FD F1         pop g
11645  4E40 E4            pop a
11646  4E41             ; --- END FACTORS
11647  4E41             ; --- START FACTORS
11648  4E41 D7            push a
11649  4E42 FD D8         push g
11650  4E44 11            mov a, b
11651  4E45 FD 7A         mov g, c
11652  4E47 FA F9 FF      lea d, [bp + -7] ; $al
11653  4E4A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11654  4E4D FD 39         mov c, b ; And place it into C
11655  4E4F 2A            mov b, [d] ; Lower Word in B
11656  4E50 FD D8         push g ; save 'g' as the div instruction uses it
11657  4E52 AE            div a, b ; /, a: quotient, b: remainder
11658  4E53 FD F1         pop g
11659  4E55 FD 38         mov c, g
11660  4E57 27            mov b, a
11661  4E58 FD F1         pop g
11662  4E5A E4            pop a
11663  4E5B             ; --- END FACTORS
11664  4E5B FD 15         add32 cb, ga
11665  4E5D E4            pop a
11666  4E5E             ; --- END TERMS
11667  4E5E FD AB         swp b
11668  4E60 D8            push b
11669  4E61 07 12 09      call print100
11670  4E64 51 02 00      add sp, 2
11671  4E67             ; --- END FUNCTION CALL
11672  4E67 FD AB         swp b
11673  4E69 D8            push b
11674  4E6A 26 85 80      mov b, _s147 ; "%s"
11675  4E6D FD AB         swp b
11676  4E6F D8            push b
11677  4E70 07 78 60      call printf
11678  4E73 51 04 00      add sp, 4
11679  4E76             ; --- END FUNCTION CALL
11680  4E76             _if496_exit:
11681  4E76             ; printf(dist_1, print100((xl > al) ? xl : al)); 
11682  4E76             ; --- START FUNCTION CALL
11683  4E76             ; --- START FUNCTION CALL
11684  4E76             _ternary724_cond:
11685  4E76 FA FD FF      lea d, [bp + -3] ; $xl
11686  4E79 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11687  4E7C FD 39         mov c, b ; And place it into C
11688  4E7E 2A            mov b, [d] ; Lower Word in B
11689  4E7F             ; --- START RELATIONAL
11690  4E7F D7            push a
11691  4E80 FD D8         push g
11692  4E82 11            mov a, b
11693  4E83 FD 7A         mov g, c
11694  4E85 FA F9 FF      lea d, [bp + -7] ; $al
11695  4E88 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11696  4E8B FD 39         mov c, b ; And place it into C
11697  4E8D 2A            mov b, [d] ; Lower Word in B
11698  4E8E FD AF         cmp32 ga, cb
11699  4E90 FD 81         sgu
11700  4E92 FD F1         pop g
11701  4E94 E4            pop a
11702  4E95             ; --- END RELATIONAL
11703  4E95 C0 00 00      cmp b, 0
11704  4E98 C6 A7 4E      je _ternary724_FALSE
11705  4E9B             _ternary724_TRUE:
11706  4E9B FA FD FF      lea d, [bp + -3] ; $xl
11707  4E9E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11708  4EA1 FD 39         mov c, b ; And place it into C
11709  4EA3 2A            mov b, [d] ; Lower Word in B
11710  4EA4 0A B0 4E      jmp _ternary724_exit
11711  4EA7             _ternary724_FALSE:
11712  4EA7 FA F9 FF      lea d, [bp + -7] ; $al
11713  4EAA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11714  4EAD FD 39         mov c, b ; And place it into C
11715  4EAF 2A            mov b, [d] ; Lower Word in B
11716  4EB0             _ternary724_exit:
11717  4EB0 FD AB         swp b
11718  4EB2 D8            push b
11719  4EB3 07 12 09      call print100
11720  4EB6 51 02 00      add sp, 2
11721  4EB9             ; --- END FUNCTION CALL
11722  4EB9 FD AB         swp b
11723  4EBB D8            push b
11724  4EBC 3B 4D 70      mov d, _dist_1 ; $dist_1
11725  4EBF 2A            mov b, [d]
11726  4EC0 38 00 00      mov c, 0
11727  4EC3 FD AB         swp b
11728  4EC5 D8            push b
11729  4EC6 07 78 60      call printf
11730  4EC9 51 04 00      add sp, 4
11731  4ECC             ; --- END FUNCTION CALL
11732  4ECC             _if495_exit:
11733  4ECC             _if494_exit:
11734  4ECC             _if493_exit:
11735  4ECC             _if261_exit:
11736  4ECC F9            leave
11737  4ECD 09            ret
11738  4ECE             
11739  4ECE             ship_destroyed:
11740  4ECE F8 00 00      enter 0 ; (push bp; mov bp, sp)
11741  4ED1             ; puts("The Enterprise has been destroyed. The Federation will be conquered.\n"); 
11742  4ED1             ; --- START FUNCTION CALL
11743  4ED1 26 88 80      mov b, _s148 ; "The Enterprise has been destroyed. The Federation will be conquered.\n"
11744  4ED4 FD AB         swp b
11745  4ED6 D8            push b
11746  4ED7 07 85 69      call puts
11747  4EDA 51 02 00      add sp, 2
11748  4EDD             ; --- END FUNCTION CALL
11749  4EDD             ; end_of_time(); 
11750  4EDD             ; --- START FUNCTION CALL
11751  4EDD 07 E2 4E      call end_of_time
11752  4EE0 F9            leave
11753  4EE1 09            ret
11754  4EE2             
11755  4EE2             end_of_time:
11756  4EE2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11757  4EE5             ; printf("It is stardate %d.\n\n",  FROM_FIXED(stardate)); 
11758  4EE5             ; --- START FUNCTION CALL
11759  4EE5             ; --- START FUNCTION CALL
11760  4EE5 3B 83 6E      mov d, _stardate ; $stardate
11761  4EE8 2A            mov b, [d]
11762  4EE9 38 00 00      mov c, 0
11763  4EEC FD AB         swp b
11764  4EEE D8            push b
11765  4EEF 07 68 04      call FROM_FIXED
11766  4EF2 51 02 00      add sp, 2
11767  4EF5             ; --- END FUNCTION CALL
11768  4EF5 FD AB         swp b
11769  4EF7 D8            push b
11770  4EF8 26 CE 80      mov b, _s149 ; "It is stardate %d.\n\n"
11771  4EFB FD AB         swp b
11772  4EFD D8            push b
11773  4EFE 07 78 60      call printf
11774  4F01 51 04 00      add sp, 4
11775  4F04             ; --- END FUNCTION CALL
11776  4F04             ; resign_commision(); 
11777  4F04             ; --- START FUNCTION CALL
11778  4F04 07 09 4F      call resign_commision
11779  4F07 F9            leave
11780  4F08 09            ret
11781  4F09             
11782  4F09             resign_commision:
11783  4F09 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11784  4F0C             ; printf("There were %d Klingon Battlecruisers left at the end of your mission.\n\n", klingons_left); 
11785  4F0C             ; --- START FUNCTION CALL
11786  4F0C 3B 5D 6E      mov d, _klingons_left ; $klingons_left
11787  4F0F 32            mov bl, [d]
11788  4F10 A7 00         mov bh, 0
11789  4F12 38 00 00      mov c, 0
11790  4F15 FD AB         swp b
11791  4F17 D8            push b
11792  4F18 26 E3 80      mov b, _s150 ; "There were %d Klingon Battlecruisers left at the end of your mission.\n\n"
11793  4F1B FD AB         swp b
11794  4F1D D8            push b
11795  4F1E 07 78 60      call printf
11796  4F21 51 03 00      add sp, 3
11797  4F24             ; --- END FUNCTION CALL
11798  4F24             ; end_of_game(); 
11799  4F24             ; --- START FUNCTION CALL
11800  4F24 07 CF 4F      call end_of_game
11801  4F27 F9            leave
11802  4F28 09            ret
11803  4F29             
11804  4F29             won_game:
11805  4F29 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11806  4F2C             ; puts("Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"); 
11807  4F2C             ; --- START FUNCTION CALL
11808  4F2C 26 2B 81      mov b, _s151 ; "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"
11809  4F2F FD AB         swp b
11810  4F31 D8            push b
11811  4F32 07 85 69      call puts
11812  4F35 51 02 00      add sp, 2
11813  4F38             ; --- END FUNCTION CALL
11814  4F38             ; if (FROM_FIXED(stardate) - time_start > 0) 
11815  4F38             _if725_cond:
11816  4F38             ; --- START FUNCTION CALL
11817  4F38 3B 83 6E      mov d, _stardate ; $stardate
11818  4F3B 2A            mov b, [d]
11819  4F3C 38 00 00      mov c, 0
11820  4F3F FD AB         swp b
11821  4F41 D8            push b
11822  4F42 07 68 04      call FROM_FIXED
11823  4F45 51 02 00      add sp, 2
11824  4F48             ; --- END FUNCTION CALL
11825  4F48             ; --- START TERMS
11826  4F48 D7            push a
11827  4F49 11            mov a, b
11828  4F4A 3B 67 6E      mov d, _time_start ; $time_start
11829  4F4D 2A            mov b, [d]
11830  4F4E 38 00 00      mov c, 0
11831  4F51 60            sub a, b
11832  4F52 27            mov b, a
11833  4F53 E4            pop a
11834  4F54             ; --- END TERMS
11835  4F54             ; --- START RELATIONAL
11836  4F54 D7            push a
11837  4F55 11            mov a, b
11838  4F56 FD 2E 00 00   mov32 cb, $00000000
11838  4F5A 00 00 
11839  4F5C B0            cmp a, b
11840  4F5D FD 81         sgu ; > (unsigned)
11841  4F5F E4            pop a
11842  4F60             ; --- END RELATIONAL
11843  4F60 C0 00 00      cmp b, 0
11844  4F63 C6 CA 4F      je _if725_exit
11845  4F66             _if725_TRUE:
11846  4F66             ; printf("Your efficiency rating is %s\n", 
11847  4F66             ; --- START FUNCTION CALL
11848  4F66             ; --- START FUNCTION CALL
11849  4F66             ; --- START FUNCTION CALL
11850  4F66             ; --- START FUNCTION CALL
11851  4F66 3B 5C 6E      mov d, _total_klingons ; $total_klingons
11852  4F69 32            mov bl, [d]
11853  4F6A A7 00         mov bh, 0
11854  4F6C 38 00 00      mov c, 0
11855  4F6F AB            snex b
11856  4F70 FD AB         swp b
11857  4F72 D8            push b
11858  4F73 07 8B 04      call TO_FIXED00
11859  4F76 51 02 00      add sp, 2
11860  4F79             ; --- END FUNCTION CALL
11861  4F79             ; --- START FACTORS
11862  4F79 D7            push a
11863  4F7A FD D8         push g
11864  4F7C 11            mov a, b
11865  4F7D FD 7A         mov g, c
11866  4F7F             ; --- START FUNCTION CALL
11867  4F7F 3B 83 6E      mov d, _stardate ; $stardate
11868  4F82 2A            mov b, [d]
11869  4F83 38 00 00      mov c, 0
11870  4F86 FD AB         swp b
11871  4F88 D8            push b
11872  4F89 07 68 04      call FROM_FIXED
11873  4F8C 51 02 00      add sp, 2
11874  4F8F             ; --- END FUNCTION CALL
11875  4F8F             ; --- START TERMS
11876  4F8F D7            push a
11877  4F90 11            mov a, b
11878  4F91 3B 67 6E      mov d, _time_start ; $time_start
11879  4F94 2A            mov b, [d]
11880  4F95 38 00 00      mov c, 0
11881  4F98 60            sub a, b
11882  4F99 27            mov b, a
11883  4F9A E4            pop a
11884  4F9B             ; --- END TERMS
11885  4F9B FD D8         push g ; save 'g' as the div instruction uses it
11886  4F9D AE            div a, b ; /, a: quotient, b: remainder
11887  4F9E FD F1         pop g
11888  4FA0 FD 38         mov c, g
11889  4FA2 27            mov b, a
11890  4FA3 FD F1         pop g
11891  4FA5 E4            pop a
11892  4FA6             ; --- END FACTORS
11893  4FA6 FD AB         swp b
11894  4FA8 D8            push b
11895  4FA9 07 34 5C      call square00
11896  4FAC 51 02 00      add sp, 2
11897  4FAF             ; --- END FUNCTION CALL
11898  4FAF FD AB         swp b
11899  4FB1 D8            push b
11900  4FB2 07 12 09      call print100
11901  4FB5 51 02 00      add sp, 2
11902  4FB8             ; --- END FUNCTION CALL
11903  4FB8 FD AB         swp b
11904  4FBA D8            push b
11905  4FBB 26 93 81      mov b, _s152 ; "Your efficiency rating is %s\n"
11906  4FBE FD AB         swp b
11907  4FC0 D8            push b
11908  4FC1 07 78 60      call printf
11909  4FC4 51 04 00      add sp, 4
11910  4FC7             ; --- END FUNCTION CALL
11911  4FC7 0A CA 4F      jmp _if725_exit
11912  4FCA             _if725_exit:
11913  4FCA             ; end_of_game(); 
11914  4FCA             ; --- START FUNCTION CALL
11915  4FCA 07 CF 4F      call end_of_game
11916  4FCD F9            leave
11917  4FCE 09            ret
11918  4FCF             
11919  4FCF             end_of_game:
11920  4FCF F8 00 00      enter 0 ; (push bp; mov bp, sp)
11921  4FD2             ; char x[4]; 
11922  4FD2 52 04 00      sub sp, 4
11923  4FD5             ; if (starbases_left > 0) { 
11924  4FD5             _if742_cond:
11925  4FD5 3B 89 6D      mov d, _starbases_left ; $starbases_left
11926  4FD8 32            mov bl, [d]
11927  4FD9 A7 00         mov bh, 0
11928  4FDB 38 00 00      mov c, 0
11929  4FDE             ; --- START RELATIONAL
11930  4FDE D7            push a
11931  4FDF 11            mov a, b
11932  4FE0 FD 2E 00 00   mov32 cb, $00000000
11932  4FE4 00 00 
11933  4FE6 B0            cmp a, b
11934  4FE7 FD 7F         sgt ; >
11935  4FE9 E4            pop a
11936  4FEA             ; --- END RELATIONAL
11937  4FEA C0 00 00      cmp b, 0
11938  4FED C6 3A 50      je _if742_exit
11939  4FF0             _if742_TRUE:
11940  4FF0             ; puts("The Federation is in need of a new starship commander"); 
11941  4FF0             ; --- START FUNCTION CALL
11942  4FF0 26 B1 81      mov b, _s153 ; "The Federation is in need of a new starship commander"
11943  4FF3 FD AB         swp b
11944  4FF5 D8            push b
11945  4FF6 07 85 69      call puts
11946  4FF9 51 02 00      add sp, 2
11947  4FFC             ; --- END FUNCTION CALL
11948  4FFC             ; puts(" for a similar mission.\n"); 
11949  4FFC             ; --- START FUNCTION CALL
11950  4FFC 26 E7 81      mov b, _s154 ; " for a similar mission.\n"
11951  4FFF FD AB         swp b
11952  5001 D8            push b
11953  5002 07 85 69      call puts
11954  5005 51 02 00      add sp, 2
11955  5008             ; --- END FUNCTION CALL
11956  5008             ; puts("If there is a volunteer, let him step forward and"); 
11957  5008             ; --- START FUNCTION CALL
11958  5008 26 00 82      mov b, _s155 ; "If there is a volunteer, let him step forward and"
11959  500B FD AB         swp b
11960  500D D8            push b
11961  500E 07 85 69      call puts
11962  5011 51 02 00      add sp, 2
11963  5014             ; --- END FUNCTION CALL
11964  5014             ; puts(" enter 'aye': "); 
11965  5014             ; --- START FUNCTION CALL
11966  5014 26 32 82      mov b, _s156 ; " enter 'aye': "
11967  5017 FD AB         swp b
11968  5019 D8            push b
11969  501A 07 85 69      call puts
11970  501D 51 02 00      add sp, 2
11971  5020             ; --- END FUNCTION CALL
11972  5020             ; input(x,4); 
11973  5020             ; --- START FUNCTION CALL
11974  5020 FD 2E 04 00   mov32 cb, $00000004
11974  5024 00 00 
11975  5026 DD            push bl
11976  5027 FA FD FF      lea d, [bp + -3] ; $x
11977  502A 2D            mov b, d
11978  502B 38 00 00      mov c, 0
11979  502E FD AB         swp b
11980  5030 D8            push b
11981  5031 07 83 05      call input
11982  5034 51 03 00      add sp, 3
11983  5037             ; --- END FUNCTION CALL
11984  5037 0A 3A 50      jmp _if742_exit
11985  503A             _if742_exit:
11986  503A             ; exit(1); 
11987  503A             ; --- START FUNCTION CALL
11988  503A FD 2E 01 00   mov32 cb, $00000001
11988  503E 00 00 
11989  5040 FD AB         swp b
11990  5042 D8            push b
11991  5043 07 35 5E      call exit
11992  5046 51 02 00      add sp, 2
11993  5049             ; --- END FUNCTION CALL
11994  5049 F9            leave
11995  504A 09            ret
11996  504B             
11997  504B             klingons_move:
11998  504B F8 00 00      enter 0 ; (push bp; mov bp, sp)
11999  504E             ; int i; 
12000  504E 52 02 00      sub sp, 2
12001  5051             ; struct klingon *k; 
12002  5051 52 02 00      sub sp, 2
12003  5054             ; k = &kdata; 
12004  5054 FA FD FF      lea d, [bp + -3] ; $k
12005  5057 DA            push d
12006  5058 3B 4F 6E      mov d, _kdata_data ; $kdata
12007  505B 2D            mov b, d
12008  505C E7            pop d
12009  505D FD 43         mov [d], b
12010  505F             ; for (i = 0; i <= 2; i++) { 
12011  505F             _for743_init:
12012  505F FA FF FF      lea d, [bp + -1] ; $i
12013  5062 DA            push d
12014  5063 FD 2E 00 00   mov32 cb, $00000000
12014  5067 00 00 
12015  5069 E7            pop d
12016  506A FD 43         mov [d], b
12017  506C             _for743_cond:
12018  506C FA FF FF      lea d, [bp + -1] ; $i
12019  506F 2A            mov b, [d]
12020  5070 38 00 00      mov c, 0
12021  5073             ; --- START RELATIONAL
12022  5073 D7            push a
12023  5074 11            mov a, b
12024  5075 FD 2E 02 00   mov32 cb, $00000002
12024  5079 00 00 
12025  507B B0            cmp a, b
12026  507C FD 74         sle ; <= (signed)
12027  507E E4            pop a
12028  507F             ; --- END RELATIONAL
12029  507F C0 00 00      cmp b, 0
12030  5082 C6 0A 51      je _for743_exit
12031  5085             _for743_block:
12032  5085             ; if (k->energy > 0) { 
12033  5085             _if744_cond:
12034  5085 FA FD FF      lea d, [bp + -3] ; $k
12035  5088 FD 2A         mov d, [d]
12036  508A 58 02 00      add d, 2
12037  508D 2A            mov b, [d]
12038  508E 38 00 00      mov c, 0
12039  5091             ; --- START RELATIONAL
12040  5091 D7            push a
12041  5092 11            mov a, b
12042  5093 FD 2E 00 00   mov32 cb, $00000000
12042  5097 00 00 
12043  5099 B0            cmp a, b
12044  509A FD 7F         sgt ; >
12045  509C E4            pop a
12046  509D             ; --- END RELATIONAL
12047  509D C0 00 00      cmp b, 0
12048  50A0 C6 E5 50      je _if744_exit
12049  50A3             _if744_TRUE:
12050  50A3             ; wipe_klingon(k); 
12051  50A3             ; --- START FUNCTION CALL
12052  50A3 FA FD FF      lea d, [bp + -3] ; $k
12053  50A6 2A            mov b, [d]
12054  50A7 38 00 00      mov c, 0
12055  50AA FD AB         swp b
12056  50AC D8            push b
12057  50AD 07 8B 2D      call wipe_klingon
12058  50B0 51 02 00      add sp, 2
12059  50B3             ; --- END FUNCTION CALL
12060  50B3             ; find_set_empty_place(	3         , k->y, k->x); 
12061  50B3             ; --- START FUNCTION CALL
12062  50B3 FA FD FF      lea d, [bp + -3] ; $k
12063  50B6 FD 2A         mov d, [d]
12064  50B8 58 01 00      add d, 1
12065  50BB 32            mov bl, [d]
12066  50BC A7 00         mov bh, 0
12067  50BE 38 00 00      mov c, 0
12068  50C1 FD AB         swp b
12069  50C3 D8            push b
12070  50C4 FA FD FF      lea d, [bp + -3] ; $k
12071  50C7 FD 2A         mov d, [d]
12072  50C9 58 00 00      add d, 0
12073  50CC 32            mov bl, [d]
12074  50CD A7 00         mov bh, 0
12075  50CF 38 00 00      mov c, 0
12076  50D2 FD AB         swp b
12077  50D4 D8            push b
12078  50D5 FD 2E 03 00   mov32 cb, $00000003
12078  50D9 00 00 
12079  50DB DD            push bl
12080  50DC 07 6F 58      call find_set_empty_place
12081  50DF 51 05 00      add sp, 5
12082  50E2             ; --- END FUNCTION CALL
12083  50E2 0A E5 50      jmp _if744_exit
12084  50E5             _if744_exit:
12085  50E5             ; k++; 
12086  50E5 FA FD FF      lea d, [bp + -3] ; $k
12087  50E8 2A            mov b, [d]
12088  50E9 38 00 00      mov c, 0
12089  50EC 11            mov a, b
12090  50ED FD 77         inc b
12091  50EF FD 77         inc b
12092  50F1 FA FD FF      lea d, [bp + -3] ; $k
12093  50F4 FD 43         mov [d], b
12094  50F6 27            mov b, a
12095  50F7             _for743_update:
12096  50F7 FA FF FF      lea d, [bp + -1] ; $i
12097  50FA 2A            mov b, [d]
12098  50FB 38 00 00      mov c, 0
12099  50FE 11            mov a, b
12100  50FF FD 77         inc b
12101  5101 FA FF FF      lea d, [bp + -1] ; $i
12102  5104 FD 43         mov [d], b
12103  5106 27            mov b, a
12104  5107 0A 6C 50      jmp _for743_cond
12105  510A             _for743_exit:
12106  510A             ; klingons_shoot(); 
12107  510A             ; --- START FUNCTION CALL
12108  510A 07 0F 51      call klingons_shoot
12109  510D F9            leave
12110  510E 09            ret
12111  510F             
12112  510F             klingons_shoot:
12113  510F F8 00 00      enter 0 ; (push bp; mov bp, sp)
12114  5112             ; unsigned char        r; 
12115  5112 52 01 00      sub sp, 1
12116  5115             ; long unsigned int         h; 
12117  5115 52 04 00      sub sp, 4
12118  5118             ; unsigned char        i; 
12119  5118 52 01 00      sub sp, 1
12120  511B             ; struct klingon *k; 
12121  511B 52 02 00      sub sp, 2
12122  511E             ; long unsigned int         ratio; 
12123  511E 52 04 00      sub sp, 4
12124  5121             ; k = &kdata; 
12125  5121 FA F9 FF      lea d, [bp + -7] ; $k
12126  5124 DA            push d
12127  5125 3B 4F 6E      mov d, _kdata_data ; $kdata
12128  5128 2D            mov b, d
12129  5129 E7            pop d
12130  512A FD 43         mov [d], b
12131  512C             ; if (klingons <= 0) 
12132  512C             _if745_cond:
12133  512C 3B 5B 6E      mov d, _klingons ; $klingons
12134  512F 32            mov bl, [d]
12135  5130 A7 00         mov bh, 0
12136  5132 38 00 00      mov c, 0
12137  5135             ; --- START RELATIONAL
12138  5135 D7            push a
12139  5136 11            mov a, b
12140  5137 FD 2E 00 00   mov32 cb, $00000000
12140  513B 00 00 
12141  513D B0            cmp a, b
12142  513E FD 76         sleu ; <= (unsigned)
12143  5140 E4            pop a
12144  5141             ; --- END RELATIONAL
12145  5141 C0 00 00      cmp b, 0
12146  5144 C6 4C 51      je _if745_exit
12147  5147             _if745_TRUE:
12148  5147             ; return; 
12149  5147 F9            leave
12150  5148 09            ret
12151  5149 0A 4C 51      jmp _if745_exit
12152  514C             _if745_exit:
12153  514C             ; if (docked) { 
12154  514C             _if746_cond:
12155  514C 3B A8 6D      mov d, _docked ; $docked
12156  514F 32            mov bl, [d]
12157  5150 A7 00         mov bh, 0
12158  5152 38 00 00      mov c, 0
12159  5155 C0 00 00      cmp b, 0
12160  5158 C6 6C 51      je _if746_exit
12161  515B             _if746_TRUE:
12162  515B             ; puts("Starbase shields protect the Enterprise\n"); 
12163  515B             ; --- START FUNCTION CALL
12164  515B 26 41 82      mov b, _s157 ; "Starbase shields protect the Enterprise\n"
12165  515E FD AB         swp b
12166  5160 D8            push b
12167  5161 07 85 69      call puts
12168  5164 51 02 00      add sp, 2
12169  5167             ; --- END FUNCTION CALL
12170  5167             ; return; 
12171  5167 F9            leave
12172  5168 09            ret
12173  5169 0A 6C 51      jmp _if746_exit
12174  516C             _if746_exit:
12175  516C             ; for (i = 0; i <= 2; i++) { 
12176  516C             _for747_init:
12177  516C FA FB FF      lea d, [bp + -5] ; $i
12178  516F DA            push d
12179  5170 FD 2E 00 00   mov32 cb, $00000000
12179  5174 00 00 
12180  5176 E7            pop d
12181  5177 FD 3E         mov [d], bl
12182  5179             _for747_cond:
12183  5179 FA FB FF      lea d, [bp + -5] ; $i
12184  517C 32            mov bl, [d]
12185  517D A7 00         mov bh, 0
12186  517F 38 00 00      mov c, 0
12187  5182             ; --- START RELATIONAL
12188  5182 D7            push a
12189  5183 11            mov a, b
12190  5184 FD 2E 02 00   mov32 cb, $00000002
12190  5188 00 00 
12191  518A B0            cmp a, b
12192  518B FD 76         sleu ; <= (unsigned)
12193  518D E4            pop a
12194  518E             ; --- END RELATIONAL
12195  518E C0 00 00      cmp b, 0
12196  5191 C6 25 55      je _for747_exit
12197  5194             _for747_block:
12198  5194             ; if (k->energy > 0) { 
12199  5194             _if748_cond:
12200  5194 FA F9 FF      lea d, [bp + -7] ; $k
12201  5197 FD 2A         mov d, [d]
12202  5199 58 02 00      add d, 2
12203  519C 2A            mov b, [d]
12204  519D 38 00 00      mov c, 0
12205  51A0             ; --- START RELATIONAL
12206  51A0 D7            push a
12207  51A1 11            mov a, b
12208  51A2 FD 2E 00 00   mov32 cb, $00000000
12208  51A6 00 00 
12209  51A8 B0            cmp a, b
12210  51A9 FD 7F         sgt ; >
12211  51AB E4            pop a
12212  51AC             ; --- END RELATIONAL
12213  51AC C0 00 00      cmp b, 0
12214  51AF C6 FE 54      je _if748_exit
12215  51B2             _if748_TRUE:
12216  51B2             ; h = k->energy * (200UL + get_rand(100)); 
12217  51B2 FA FC FF      lea d, [bp + -4] ; $h
12218  51B5 DA            push d
12219  51B6 FA F9 FF      lea d, [bp + -7] ; $k
12220  51B9 FD 2A         mov d, [d]
12221  51BB 58 02 00      add d, 2
12222  51BE 2A            mov b, [d]
12223  51BF 38 00 00      mov c, 0
12224  51C2             ; --- START FACTORS
12225  51C2 D7            push a
12226  51C3 FD D8         push g
12227  51C5 11            mov a, b
12228  51C6 FD 7A         mov g, c
12229  51C8 FD 2E C8 00   mov32 cb, $000000c8
12229  51CC 00 00 
12230  51CE             ; --- START TERMS
12231  51CE D7            push a
12232  51CF FD D8         push g
12233  51D1 11            mov a, b
12234  51D2 FD 7A         mov g, c
12235  51D4             ; --- START FUNCTION CALL
12236  51D4 FD 2E 64 00   mov32 cb, $00000064
12236  51D8 00 00 
12237  51DA FD AB         swp b
12238  51DC D8            push b
12239  51DD 07 FF 04      call get_rand
12240  51E0 51 02 00      add sp, 2
12241  51E3             ; --- END FUNCTION CALL
12242  51E3 FD 15         add32 cb, ga
12243  51E5 FD F1         pop g
12244  51E7 E4            pop a
12245  51E8             ; --- END TERMS
12246  51E8 D7            push a     ; save left operand
12247  51E9 8E            xor a, b   ; xor sign bits
12248  51EA FD AA         swp a      ; swap bytes
12249  51EC 83            mov cl, al ; save result of xor into 'dl'
12250  51ED E4            pop a      ; restore left side operator
12251  51EE DF            push cl    ; save result of xor above
12252  51EF FD AA         swp a  
12253  51F1 93 80         test al, $80  
12254  51F3 FD AA         swp a  
12255  51F5 C6 FA 51      jz skip_invert_a_750  
12256  51F8 FD 95         neg a 
12257  51FA             skip_invert_a_750:   
12258  51FA FD AB         swp b
12259  51FC FD 93 80      test bl, $80  
12260  51FF FD AB         swp b
12261  5201 C6 06 52      jz skip_invert_b_750  
12262  5204 FD 97         neg b 
12263  5206             skip_invert_b_750:   
12264  5206 AC            mul a, b ; *
12265  5207 FD 78         mov g, a
12266  5209 11            mov a, b
12267  520A EA            pop bl
12268  520B FD 93 80      test bl, $80
12269  520E C6 1B 52      jz _same_signs_750
12270  5211 2F            mov bl, al
12271  5212 95            not a
12272  5213 FD 97         neg b
12273  5215 5B 00 00      adc a, 0
12274  5218 FD 78         mov g, a
12275  521A 11            mov a, b
12276  521B             _same_signs_750:
12277  521B FD 38         mov c, g
12278  521D 27            mov b, a
12279  521E FD F1         pop g
12280  5220 E4            pop a
12281  5221             ; --- END FACTORS
12282  5221 E7            pop d
12283  5222 FD 43         mov [d], b
12284  5224 28            mov b, c
12285  5225 FD 44 02 00   mov [d + 2], b
12286  5229             ; h =h* 100;	/* Ready for division in fixed */ 
12287  5229 FA FC FF      lea d, [bp + -4] ; $h
12288  522C DA            push d
12289  522D FA FC FF      lea d, [bp + -4] ; $h
12290  5230 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12291  5233 FD 39         mov c, b ; And place it into C
12292  5235 2A            mov b, [d] ; Lower Word in B
12293  5236             ; --- START FACTORS
12294  5236 D7            push a
12295  5237 FD D8         push g
12296  5239 11            mov a, b
12297  523A FD 7A         mov g, c
12298  523C FD 2E 64 00   mov32 cb, $00000064
12298  5240 00 00 
12299  5242 D7            push a     ; save left operand
12300  5243 8E            xor a, b   ; xor sign bits
12301  5244 FD AA         swp a      ; swap bytes
12302  5246 83            mov cl, al ; save result of xor into 'dl'
12303  5247 E4            pop a      ; restore left side operator
12304  5248 DF            push cl    ; save result of xor above
12305  5249 FD AA         swp a  
12306  524B 93 80         test al, $80  
12307  524D FD AA         swp a  
12308  524F C6 54 52      jz skip_invert_a_752  
12309  5252 FD 95         neg a 
12310  5254             skip_invert_a_752:   
12311  5254 FD AB         swp b
12312  5256 FD 93 80      test bl, $80  
12313  5259 FD AB         swp b
12314  525B C6 60 52      jz skip_invert_b_752  
12315  525E FD 97         neg b 
12316  5260             skip_invert_b_752:   
12317  5260 AC            mul a, b ; *
12318  5261 FD 78         mov g, a
12319  5263 11            mov a, b
12320  5264 EA            pop bl
12321  5265 FD 93 80      test bl, $80
12322  5268 C6 75 52      jz _same_signs_752
12323  526B 2F            mov bl, al
12324  526C 95            not a
12325  526D FD 97         neg b
12326  526F 5B 00 00      adc a, 0
12327  5272 FD 78         mov g, a
12328  5274 11            mov a, b
12329  5275             _same_signs_752:
12330  5275 FD 38         mov c, g
12331  5277 27            mov b, a
12332  5278 FD F1         pop g
12333  527A E4            pop a
12334  527B             ; --- END FACTORS
12335  527B E7            pop d
12336  527C FD 43         mov [d], b
12337  527E 28            mov b, c
12338  527F FD 44 02 00   mov [d + 2], b
12339  5283             ; h =h/ distance_to(k); 
12340  5283 FA FC FF      lea d, [bp + -4] ; $h
12341  5286 DA            push d
12342  5287 FA FC FF      lea d, [bp + -4] ; $h
12343  528A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12344  528D FD 39         mov c, b ; And place it into C
12345  528F 2A            mov b, [d] ; Lower Word in B
12346  5290             ; --- START FACTORS
12347  5290 D7            push a
12348  5291 FD D8         push g
12349  5293 11            mov a, b
12350  5294 FD 7A         mov g, c
12351  5296             ; --- START FUNCTION CALL
12352  5296 FA F9 FF      lea d, [bp + -7] ; $k
12353  5299 2A            mov b, [d]
12354  529A 38 00 00      mov c, 0
12355  529D FD AB         swp b
12356  529F D8            push b
12357  52A0 07 57 5D      call distance_to
12358  52A3 51 02 00      add sp, 2
12359  52A6             ; --- END FUNCTION CALL
12360  52A6 FD D8         push g ; save 'g' as the div instruction uses it
12361  52A8 AE            div a, b ; /, a: quotient, b: remainder
12362  52A9 FD F1         pop g
12363  52AB FD 38         mov c, g
12364  52AD 27            mov b, a
12365  52AE FD F1         pop g
12366  52B0 E4            pop a
12367  52B1             ; --- END FACTORS
12368  52B1 E7            pop d
12369  52B2 FD 43         mov [d], b
12370  52B4 28            mov b, c
12371  52B5 FD 44 02 00   mov [d + 2], b
12372  52B9             ; shield = shield - FROM_FIXED00(h); 
12373  52B9 3B 64 6E      mov d, _shield ; $shield
12374  52BC DA            push d
12375  52BD 3B 64 6E      mov d, _shield ; $shield
12376  52C0 2A            mov b, [d]
12377  52C1 38 00 00      mov c, 0
12378  52C4             ; --- START TERMS
12379  52C4 D7            push a
12380  52C5 11            mov a, b
12381  52C6             ; --- START FUNCTION CALL
12382  52C6 FA FC FF      lea d, [bp + -4] ; $h
12383  52C9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12384  52CC FD 39         mov c, b ; And place it into C
12385  52CE 2A            mov b, [d] ; Lower Word in B
12386  52CF FD AB         swp b
12387  52D1 D8            push b
12388  52D2 07 DC 04      call FROM_FIXED00
12389  52D5 51 02 00      add sp, 2
12390  52D8             ; --- END FUNCTION CALL
12391  52D8 60            sub a, b
12392  52D9 27            mov b, a
12393  52DA E4            pop a
12394  52DB             ; --- END TERMS
12395  52DB E7            pop d
12396  52DC FD 43         mov [d], b
12397  52DE             ; k->energy = (k->energy * 100) / (300 + get_rand(100)); 
12398  52DE FA F9 FF      lea d, [bp + -7] ; $k
12399  52E1 FD 2A         mov d, [d]
12400  52E3 58 02 00      add d, 2
12401  52E6 DA            push d
12402  52E7 FA F9 FF      lea d, [bp + -7] ; $k
12403  52EA FD 2A         mov d, [d]
12404  52EC 58 02 00      add d, 2
12405  52EF 2A            mov b, [d]
12406  52F0 38 00 00      mov c, 0
12407  52F3             ; --- START FACTORS
12408  52F3 D7            push a
12409  52F4 FD D8         push g
12410  52F6 11            mov a, b
12411  52F7 FD 7A         mov g, c
12412  52F9 FD 2E 64 00   mov32 cb, $00000064
12412  52FD 00 00 
12413  52FF D7            push a     ; save left operand
12414  5300 8E            xor a, b   ; xor sign bits
12415  5301 FD AA         swp a      ; swap bytes
12416  5303 83            mov cl, al ; save result of xor into 'dl'
12417  5304 E4            pop a      ; restore left side operator
12418  5305 DF            push cl    ; save result of xor above
12419  5306 FD AA         swp a  
12420  5308 93 80         test al, $80  
12421  530A FD AA         swp a  
12422  530C C6 11 53      jz skip_invert_a_759  
12423  530F FD 95         neg a 
12424  5311             skip_invert_a_759:   
12425  5311 FD AB         swp b
12426  5313 FD 93 80      test bl, $80  
12427  5316 FD AB         swp b
12428  5318 C6 1D 53      jz skip_invert_b_759  
12429  531B FD 97         neg b 
12430  531D             skip_invert_b_759:   
12431  531D AC            mul a, b ; *
12432  531E FD 78         mov g, a
12433  5320 11            mov a, b
12434  5321 EA            pop bl
12435  5322 FD 93 80      test bl, $80
12436  5325 C6 32 53      jz _same_signs_759
12437  5328 2F            mov bl, al
12438  5329 95            not a
12439  532A FD 97         neg b
12440  532C 5B 00 00      adc a, 0
12441  532F FD 78         mov g, a
12442  5331 11            mov a, b
12443  5332             _same_signs_759:
12444  5332 FD 38         mov c, g
12445  5334 27            mov b, a
12446  5335 FD F1         pop g
12447  5337 E4            pop a
12448  5338             ; --- END FACTORS
12449  5338             ; --- START FACTORS
12450  5338 D7            push a
12451  5339 FD D8         push g
12452  533B 11            mov a, b
12453  533C FD 7A         mov g, c
12454  533E FD 2E 2C 01   mov32 cb, $0000012c
12454  5342 00 00 
12455  5344             ; --- START TERMS
12456  5344 D7            push a
12457  5345 11            mov a, b
12458  5346             ; --- START FUNCTION CALL
12459  5346 FD 2E 64 00   mov32 cb, $00000064
12459  534A 00 00 
12460  534C FD AB         swp b
12461  534E D8            push b
12462  534F 07 FF 04      call get_rand
12463  5352 51 02 00      add sp, 2
12464  5355             ; --- END FUNCTION CALL
12465  5355 56            add b, a
12466  5356 E4            pop a
12467  5357             ; --- END TERMS
12468  5357 FD D8         push g ; save 'g' as the div instruction uses it
12469  5359 AE            div a, b ; /, a: quotient, b: remainder
12470  535A FD F1         pop g
12471  535C FD 38         mov c, g
12472  535E 27            mov b, a
12473  535F FD F1         pop g
12474  5361 E4            pop a
12475  5362             ; --- END FACTORS
12476  5362 E7            pop d
12477  5363 FD 43         mov [d], b
12478  5365             ; printf("%d unit hit on Enterprise from sector %d, %d\n", (unsigned)FROM_FIXED00(h), k->y, k->x); 
12479  5365             ; --- START FUNCTION CALL
12480  5365 FA F9 FF      lea d, [bp + -7] ; $k
12481  5368 FD 2A         mov d, [d]
12482  536A 58 01 00      add d, 1
12483  536D 32            mov bl, [d]
12484  536E A7 00         mov bh, 0
12485  5370 38 00 00      mov c, 0
12486  5373 FD AB         swp b
12487  5375 D8            push b
12488  5376 FA F9 FF      lea d, [bp + -7] ; $k
12489  5379 FD 2A         mov d, [d]
12490  537B 58 00 00      add d, 0
12491  537E 32            mov bl, [d]
12492  537F A7 00         mov bh, 0
12493  5381 38 00 00      mov c, 0
12494  5384 FD AB         swp b
12495  5386 D8            push b
12496  5387 FA FC FF      lea d, [bp + -4] ; $h
12497  538A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12498  538D FD 39         mov c, b ; And place it into C
12499  538F 2A            mov b, [d] ; Lower Word in B
12500  5390 FD AB         swp b
12501  5392 D8            push b
12502  5393 26 6A 82      mov b, _s158 ; "%d unit hit on Enterprise from sector %d, %d\n"
12503  5396 FD AB         swp b
12504  5398 D8            push b
12505  5399 07 78 60      call printf
12506  539C 51 06 00      add sp, 6
12507  539F             ; --- END FUNCTION CALL
12508  539F             ; if (shield <= 0) { 
12509  539F             _if761_cond:
12510  539F 3B 64 6E      mov d, _shield ; $shield
12511  53A2 2A            mov b, [d]
12512  53A3 38 00 00      mov c, 0
12513  53A6             ; --- START RELATIONAL
12514  53A6 D7            push a
12515  53A7 11            mov a, b
12516  53A8 FD 2E 00 00   mov32 cb, $00000000
12516  53AC 00 00 
12517  53AE B0            cmp a, b
12518  53AF FD 74         sle ; <= (signed)
12519  53B1 E4            pop a
12520  53B2             ; --- END RELATIONAL
12521  53B2 C0 00 00      cmp b, 0
12522  53B5 C6 CB 53      je _if761_exit
12523  53B8             _if761_TRUE:
12524  53B8             ; putchar('\n'); 
12525  53B8             ; --- START FUNCTION CALL
12526  53B8 FD 2E 0A 00   mov32 cb, $0000000a
12526  53BC 00 00 
12527  53BE DD            push bl
12528  53BF 07 FA 64      call putchar
12529  53C2 51 01 00      add sp, 1
12530  53C5             ; --- END FUNCTION CALL
12531  53C5             ; ship_destroyed(); 
12532  53C5             ; --- START FUNCTION CALL
12533  53C5 07 CE 4E      call ship_destroyed
12534  53C8 0A CB 53      jmp _if761_exit
12535  53CB             _if761_exit:
12536  53CB             ; printf("    <Shields down to %d units>\n\n", shield); 
12537  53CB             ; --- START FUNCTION CALL
12538  53CB 3B 64 6E      mov d, _shield ; $shield
12539  53CE 2A            mov b, [d]
12540  53CF 38 00 00      mov c, 0
12541  53D2 FD AB         swp b
12542  53D4 D8            push b
12543  53D5 26 98 82      mov b, _s159 ; "    <Shields down to %d units>\n\n"
12544  53D8 FD AB         swp b
12545  53DA D8            push b
12546  53DB 07 78 60      call printf
12547  53DE 51 04 00      add sp, 4
12548  53E1             ; --- END FUNCTION CALL
12549  53E1             ; if (h >= 20) { 
12550  53E1             _if762_cond:
12551  53E1 FA FC FF      lea d, [bp + -4] ; $h
12552  53E4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12553  53E7 FD 39         mov c, b ; And place it into C
12554  53E9 2A            mov b, [d] ; Lower Word in B
12555  53EA             ; --- START RELATIONAL
12556  53EA D7            push a
12557  53EB FD D8         push g
12558  53ED 11            mov a, b
12559  53EE FD 7A         mov g, c
12560  53F0 FD 2E 14 00   mov32 cb, $00000014
12560  53F4 00 00 
12561  53F6 FD AF         cmp32 ga, cb
12562  53F8 FD 82         sgeu
12563  53FA FD F1         pop g
12564  53FC E4            pop a
12565  53FD             ; --- END RELATIONAL
12566  53FD C0 00 00      cmp b, 0
12567  5400 C6 FB 54      je _if762_exit
12568  5403             _if762_TRUE:
12569  5403             ; ratio = ((int)h)/shield; 
12570  5403 FA F5 FF      lea d, [bp + -11] ; $ratio
12571  5406 DA            push d
12572  5407 FA FC FF      lea d, [bp + -4] ; $h
12573  540A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12574  540D FD 39         mov c, b ; And place it into C
12575  540F 2A            mov b, [d] ; Lower Word in B
12576  5410             ; --- START FACTORS
12577  5410 D7            push a
12578  5411 FD D8         push g
12579  5413 11            mov a, b
12580  5414 FD 7A         mov g, c
12581  5416 3B 64 6E      mov d, _shield ; $shield
12582  5419 2A            mov b, [d]
12583  541A 38 00 00      mov c, 0
12584  541D FD D8         push g ; save 'g' as the div instruction uses it
12585  541F AE            div a, b ; /, a: quotient, b: remainder
12586  5420 FD F1         pop g
12587  5422 FD 38         mov c, g
12588  5424 27            mov b, a
12589  5425 FD F1         pop g
12590  5427 E4            pop a
12591  5428             ; --- END FACTORS
12592  5428 E7            pop d
12593  5429 FD 43         mov [d], b
12594  542B 26 00 00      mov b, 0
12595  542E FD 44 02 00   mov [d + 2], b
12596  5432             ; if (get_rand(10) <= 6 && ratio > 2) { 
12597  5432             _if765_cond:
12598  5432             ; --- START FUNCTION CALL
12599  5432 FD 2E 0A 00   mov32 cb, $0000000a
12599  5436 00 00 
12600  5438 FD AB         swp b
12601  543A D8            push b
12602  543B 07 FF 04      call get_rand
12603  543E 51 02 00      add sp, 2
12604  5441             ; --- END FUNCTION CALL
12605  5441             ; --- START RELATIONAL
12606  5441 D7            push a
12607  5442 11            mov a, b
12608  5443 FD 2E 06 00   mov32 cb, $00000006
12608  5447 00 00 
12609  5449 B0            cmp a, b
12610  544A FD 74         sle ; <= (signed)
12611  544C E4            pop a
12612  544D             ; --- END RELATIONAL
12613  544D             ; --- START LOGICAL AND
12614  544D D7            push a
12615  544E 11            mov a, b
12616  544F FA F5 FF      lea d, [bp + -11] ; $ratio
12617  5452 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12618  5455 FD 39         mov c, b ; And place it into C
12619  5457 2A            mov b, [d] ; Lower Word in B
12620  5458             ; --- START RELATIONAL
12621  5458 D7            push a
12622  5459 FD D8         push g
12623  545B 11            mov a, b
12624  545C FD 7A         mov g, c
12625  545E FD 2E 02 00   mov32 cb, $00000002
12625  5462 00 00 
12626  5464 FD AF         cmp32 ga, cb
12627  5466 FD 81         sgu
12628  5468 FD F1         pop g
12629  546A E4            pop a
12630  546B             ; --- END RELATIONAL
12631  546B FD A7         sand a, b
12632  546D E4            pop a
12633  546E             ; --- END LOGICAL AND
12634  546E C0 00 00      cmp b, 0
12635  5471 C6 F8 54      je _if765_exit
12636  5474             _if765_TRUE:
12637  5474             ; r = rand8(); 
12638  5474 FA 00 00      lea d, [bp + 0] ; $r
12639  5477 DA            push d
12640  5478             ; --- START FUNCTION CALL
12641  5478 07 6F 05      call rand8
12642  547B E7            pop d
12643  547C FD 3E         mov [d], bl
12644  547E             ; damage[r] =damage[r] - ratio + get_rand(50); 
12645  547E 3B 6B 6E      mov d, _damage_data ; $damage
12646  5481 D7            push a
12647  5482 DA            push d
12648  5483 FA 00 00      lea d, [bp + 0] ; $r
12649  5486 32            mov bl, [d]
12650  5487 A7 00         mov bh, 0
12651  5489 38 00 00      mov c, 0
12652  548C E7            pop d
12653  548D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12654  5491 E4            pop a
12655  5492 DA            push d
12656  5493 3B 6B 6E      mov d, _damage_data ; $damage
12657  5496 D7            push a
12658  5497 DA            push d
12659  5498 FA 00 00      lea d, [bp + 0] ; $r
12660  549B 32            mov bl, [d]
12661  549C A7 00         mov bh, 0
12662  549E 38 00 00      mov c, 0
12663  54A1 E7            pop d
12664  54A2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12665  54A6 E4            pop a
12666  54A7 2A            mov b, [d]
12667  54A8 38 00 00      mov c, 0
12668  54AB             ; --- START TERMS
12669  54AB D7            push a
12670  54AC 11            mov a, b
12671  54AD FA F5 FF      lea d, [bp + -11] ; $ratio
12672  54B0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12673  54B3 FD 39         mov c, b ; And place it into C
12674  54B5 2A            mov b, [d] ; Lower Word in B
12675  54B6 FD 1C         sub32 ga, cb
12676  54B8 27            mov b, a
12677  54B9 FD 38         mov c, g
12678  54BB 11            mov a, b
12679  54BC FD 7A         mov g, c
12680  54BE             ; --- START FUNCTION CALL
12681  54BE FD 2E 32 00   mov32 cb, $00000032
12681  54C2 00 00 
12682  54C4 FD AB         swp b
12683  54C6 D8            push b
12684  54C7 07 FF 04      call get_rand
12685  54CA 51 02 00      add sp, 2
12686  54CD             ; --- END FUNCTION CALL
12687  54CD FD 15         add32 cb, ga
12688  54CF E4            pop a
12689  54D0             ; --- END TERMS
12690  54D0 E7            pop d
12691  54D1 FD 43         mov [d], b
12692  54D3             ; printf("Damage Control reports\n'%s' damaged by hit\n\n", get_device_name(r)); 
12693  54D3             ; --- START FUNCTION CALL
12694  54D3             ; --- START FUNCTION CALL
12695  54D3 FA 00 00      lea d, [bp + 0] ; $r
12696  54D6 32            mov bl, [d]
12697  54D7 A7 00         mov bh, 0
12698  54D9 38 00 00      mov c, 0
12699  54DC AB            snex b
12700  54DD FD AB         swp b
12701  54DF D8            push b
12702  54E0 07 63 59      call get_device_name
12703  54E3 51 02 00      add sp, 2
12704  54E6             ; --- END FUNCTION CALL
12705  54E6 FD AB         swp b
12706  54E8 D8            push b
12707  54E9 26 B9 82      mov b, _s160 ; "Damage Control reports\n'%s' damaged by hit\n\n"
12708  54EC FD AB         swp b
12709  54EE D8            push b
12710  54EF 07 78 60      call printf
12711  54F2 51 04 00      add sp, 4
12712  54F5             ; --- END FUNCTION CALL
12713  54F5 0A F8 54      jmp _if765_exit
12714  54F8             _if765_exit:
12715  54F8 0A FB 54      jmp _if762_exit
12716  54FB             _if762_exit:
12717  54FB 0A FE 54      jmp _if748_exit
12718  54FE             _if748_exit:
12719  54FE             ; k++; 
12720  54FE FA F9 FF      lea d, [bp + -7] ; $k
12721  5501 2A            mov b, [d]
12722  5502 38 00 00      mov c, 0
12723  5505 11            mov a, b
12724  5506 FD 77         inc b
12725  5508 FD 77         inc b
12726  550A FA F9 FF      lea d, [bp + -7] ; $k
12727  550D FD 43         mov [d], b
12728  550F 27            mov b, a
12729  5510             _for747_update:
12730  5510 FA FB FF      lea d, [bp + -5] ; $i
12731  5513 32            mov bl, [d]
12732  5514 A7 00         mov bh, 0
12733  5516 38 00 00      mov c, 0
12734  5519 FD 77         inc b
12735  551B FA FB FF      lea d, [bp + -5] ; $i
12736  551E FD 3E         mov [d], bl
12737  5520 FD 7D         dec b
12738  5522 0A 79 51      jmp _for747_cond
12739  5525             _for747_exit:
12740  5525 F9            leave
12741  5526 09            ret
12742  5527             
12743  5527             repair_damage:
12744  5527 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12745  552A             ; int i; 
12746  552A 52 02 00      sub sp, 2
12747  552D             ; int d1; 
12748  552D 52 02 00      sub sp, 2
12749  5530             ; unsigned int         repair_factor;		/* Repair Factor */ 
12750  5530 52 02 00      sub sp, 2
12751  5533             ; repair_factor = warp; 
12752  5533 FA FB FF      lea d, [bp + -5] ; $repair_factor
12753  5536 DA            push d
12754  5537 FA 05 00      lea d, [bp + 5] ; $warp
12755  553A 2A            mov b, [d]
12756  553B 38 00 00      mov c, 0
12757  553E E7            pop d
12758  553F FD 43         mov [d], b
12759  5541             ; if (warp >= 100) 
12760  5541             _if766_cond:
12761  5541 FA 05 00      lea d, [bp + 5] ; $warp
12762  5544 2A            mov b, [d]
12763  5545 38 00 00      mov c, 0
12764  5548             ; --- START RELATIONAL
12765  5548 D7            push a
12766  5549 11            mov a, b
12767  554A FD 2E 64 00   mov32 cb, $00000064
12767  554E 00 00 
12768  5550 B0            cmp a, b
12769  5551 FD 82         sgeu ; >= (unsigned)
12770  5553 E4            pop a
12771  5554             ; --- END RELATIONAL
12772  5554 C0 00 00      cmp b, 0
12773  5557 C6 73 55      je _if766_exit
12774  555A             _if766_TRUE:
12775  555A             ; repair_factor = TO_FIXED00(1); 
12776  555A FA FB FF      lea d, [bp + -5] ; $repair_factor
12777  555D DA            push d
12778  555E             ; --- START FUNCTION CALL
12779  555E FD 2E 01 00   mov32 cb, $00000001
12779  5562 00 00 
12780  5564 FD AB         swp b
12781  5566 D8            push b
12782  5567 07 8B 04      call TO_FIXED00
12783  556A 51 02 00      add sp, 2
12784  556D             ; --- END FUNCTION CALL
12785  556D E7            pop d
12786  556E FD 43         mov [d], b
12787  5570 0A 73 55      jmp _if766_exit
12788  5573             _if766_exit:
12789  5573             ; for (i = 1; i <= 8; i++) { 
12790  5573             _for767_init:
12791  5573 FA FF FF      lea d, [bp + -1] ; $i
12792  5576 DA            push d
12793  5577 FD 2E 01 00   mov32 cb, $00000001
12793  557B 00 00 
12794  557D E7            pop d
12795  557E FD 43         mov [d], b
12796  5580             _for767_cond:
12797  5580 FA FF FF      lea d, [bp + -1] ; $i
12798  5583 2A            mov b, [d]
12799  5584 38 00 00      mov c, 0
12800  5587             ; --- START RELATIONAL
12801  5587 D7            push a
12802  5588 11            mov a, b
12803  5589 FD 2E 08 00   mov32 cb, $00000008
12803  558D 00 00 
12804  558F B0            cmp a, b
12805  5590 FD 74         sle ; <= (signed)
12806  5592 E4            pop a
12807  5593             ; --- END RELATIONAL
12808  5593 C0 00 00      cmp b, 0
12809  5596 C6 1B 57      je _for767_exit
12810  5599             _for767_block:
12811  5599             ; if (damage[i] < 0) { 
12812  5599             _if768_cond:
12813  5599 3B 6B 6E      mov d, _damage_data ; $damage
12814  559C D7            push a
12815  559D DA            push d
12816  559E FA FF FF      lea d, [bp + -1] ; $i
12817  55A1 2A            mov b, [d]
12818  55A2 38 00 00      mov c, 0
12819  55A5 E7            pop d
12820  55A6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12821  55AA E4            pop a
12822  55AB 2A            mov b, [d]
12823  55AC 38 00 00      mov c, 0
12824  55AF             ; --- START RELATIONAL
12825  55AF D7            push a
12826  55B0 11            mov a, b
12827  55B1 FD 2E 00 00   mov32 cb, $00000000
12827  55B5 00 00 
12828  55B7 B0            cmp a, b
12829  55B8 FD 73         slt ; < (signed)
12830  55BA E4            pop a
12831  55BB             ; --- END RELATIONAL
12832  55BB C0 00 00      cmp b, 0
12833  55BE C6 08 57      je _if768_exit
12834  55C1             _if768_TRUE:
12835  55C1             ; damage[i] = damage[i] + repair_factor; 
12836  55C1 3B 6B 6E      mov d, _damage_data ; $damage
12837  55C4 D7            push a
12838  55C5 DA            push d
12839  55C6 FA FF FF      lea d, [bp + -1] ; $i
12840  55C9 2A            mov b, [d]
12841  55CA 38 00 00      mov c, 0
12842  55CD E7            pop d
12843  55CE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12844  55D2 E4            pop a
12845  55D3 DA            push d
12846  55D4 3B 6B 6E      mov d, _damage_data ; $damage
12847  55D7 D7            push a
12848  55D8 DA            push d
12849  55D9 FA FF FF      lea d, [bp + -1] ; $i
12850  55DC 2A            mov b, [d]
12851  55DD 38 00 00      mov c, 0
12852  55E0 E7            pop d
12853  55E1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12854  55E5 E4            pop a
12855  55E6 2A            mov b, [d]
12856  55E7 38 00 00      mov c, 0
12857  55EA             ; --- START TERMS
12858  55EA D7            push a
12859  55EB 11            mov a, b
12860  55EC FA FB FF      lea d, [bp + -5] ; $repair_factor
12861  55EF 2A            mov b, [d]
12862  55F0 38 00 00      mov c, 0
12863  55F3 56            add b, a
12864  55F4 E4            pop a
12865  55F5             ; --- END TERMS
12866  55F5 E7            pop d
12867  55F6 FD 43         mov [d], b
12868  55F8             ; if (damage[i] > -10 && damage[i] < 0)	/* -0.1 */ 
12869  55F8             _if769_cond:
12870  55F8 3B 6B 6E      mov d, _damage_data ; $damage
12871  55FB D7            push a
12872  55FC DA            push d
12873  55FD FA FF FF      lea d, [bp + -1] ; $i
12874  5600 2A            mov b, [d]
12875  5601 38 00 00      mov c, 0
12876  5604 E7            pop d
12877  5605 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12878  5609 E4            pop a
12879  560A 2A            mov b, [d]
12880  560B 38 00 00      mov c, 0
12881  560E             ; --- START RELATIONAL
12882  560E D7            push a
12883  560F 11            mov a, b
12884  5610 FD 2E F6 FF   mov32 cb, $fffffff6
12884  5614 FF FF 
12885  5616 B0            cmp a, b
12886  5617 FD 7F         sgt ; >
12887  5619 E4            pop a
12888  561A             ; --- END RELATIONAL
12889  561A             ; --- START LOGICAL AND
12890  561A D7            push a
12891  561B 11            mov a, b
12892  561C 3B 6B 6E      mov d, _damage_data ; $damage
12893  561F D7            push a
12894  5620 DA            push d
12895  5621 FA FF FF      lea d, [bp + -1] ; $i
12896  5624 2A            mov b, [d]
12897  5625 38 00 00      mov c, 0
12898  5628 E7            pop d
12899  5629 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12900  562D E4            pop a
12901  562E 2A            mov b, [d]
12902  562F 38 00 00      mov c, 0
12903  5632             ; --- START RELATIONAL
12904  5632 D7            push a
12905  5633 11            mov a, b
12906  5634 FD 2E 00 00   mov32 cb, $00000000
12906  5638 00 00 
12907  563A B0            cmp a, b
12908  563B FD 73         slt ; < (signed)
12909  563D E4            pop a
12910  563E             ; --- END RELATIONAL
12911  563E FD A7         sand a, b
12912  5640 E4            pop a
12913  5641             ; --- END LOGICAL AND
12914  5641 C0 00 00      cmp b, 0
12915  5644 C6 66 56      je _if769_else
12916  5647             _if769_TRUE:
12917  5647             ; damage[i] = -10; 
12918  5647 3B 6B 6E      mov d, _damage_data ; $damage
12919  564A D7            push a
12920  564B DA            push d
12921  564C FA FF FF      lea d, [bp + -1] ; $i
12922  564F 2A            mov b, [d]
12923  5650 38 00 00      mov c, 0
12924  5653 E7            pop d
12925  5654 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12926  5658 E4            pop a
12927  5659 DA            push d
12928  565A FD 2E F6 FF   mov32 cb, $fffffff6
12928  565E FF FF 
12929  5660 E7            pop d
12930  5661 FD 43         mov [d], b
12931  5663 0A 05 57      jmp _if769_exit
12932  5666             _if769_else:
12933  5666             ; if (damage[i] >= 0) { 
12934  5666             _if770_cond:
12935  5666 3B 6B 6E      mov d, _damage_data ; $damage
12936  5669 D7            push a
12937  566A DA            push d
12938  566B FA FF FF      lea d, [bp + -1] ; $i
12939  566E 2A            mov b, [d]
12940  566F 38 00 00      mov c, 0
12941  5672 E7            pop d
12942  5673 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12943  5677 E4            pop a
12944  5678 2A            mov b, [d]
12945  5679 38 00 00      mov c, 0
12946  567C             ; --- START RELATIONAL
12947  567C D7            push a
12948  567D 11            mov a, b
12949  567E FD 2E 00 00   mov32 cb, $00000000
12949  5682 00 00 
12950  5684 B0            cmp a, b
12951  5685 FD 80         sge ; >=
12952  5687 E4            pop a
12953  5688             ; --- END RELATIONAL
12954  5688 C0 00 00      cmp b, 0
12955  568B C6 05 57      je _if770_exit
12956  568E             _if770_TRUE:
12957  568E             ; if (d1 != 1) { 
12958  568E             _if771_cond:
12959  568E FA FD FF      lea d, [bp + -3] ; $d1
12960  5691 2A            mov b, [d]
12961  5692 38 00 00      mov c, 0
12962  5695             ; --- START RELATIONAL
12963  5695 D7            push a
12964  5696 11            mov a, b
12965  5697 FD 2E 01 00   mov32 cb, $00000001
12965  569B 00 00 
12966  569D B0            cmp a, b
12967  569E FD 72         sneq ; !=
12968  56A0 E4            pop a
12969  56A1             ; --- END RELATIONAL
12970  56A1 C0 00 00      cmp b, 0
12971  56A4 C6 C7 56      je _if771_exit
12972  56A7             _if771_TRUE:
12973  56A7             ; d1 = 1; 
12974  56A7 FA FD FF      lea d, [bp + -3] ; $d1
12975  56AA DA            push d
12976  56AB FD 2E 01 00   mov32 cb, $00000001
12976  56AF 00 00 
12977  56B1 E7            pop d
12978  56B2 FD 43         mov [d], b
12979  56B4             ; puts(dcr_1); 
12980  56B4             ; --- START FUNCTION CALL
12981  56B4 3B 7A 6F      mov d, _dcr_1 ; $dcr_1
12982  56B7 2A            mov b, [d]
12983  56B8 38 00 00      mov c, 0
12984  56BB FD AB         swp b
12985  56BD D8            push b
12986  56BE 07 85 69      call puts
12987  56C1 51 02 00      add sp, 2
12988  56C4             ; --- END FUNCTION CALL
12989  56C4 0A C7 56      jmp _if771_exit
12990  56C7             _if771_exit:
12991  56C7             ; printf("    %s repair completed\n\n", 
12992  56C7             ; --- START FUNCTION CALL
12993  56C7             ; --- START FUNCTION CALL
12994  56C7 FA FF FF      lea d, [bp + -1] ; $i
12995  56CA 2A            mov b, [d]
12996  56CB 38 00 00      mov c, 0
12997  56CE FD AB         swp b
12998  56D0 D8            push b
12999  56D1 07 63 59      call get_device_name
13000  56D4 51 02 00      add sp, 2
13001  56D7             ; --- END FUNCTION CALL
13002  56D7 FD AB         swp b
13003  56D9 D8            push b
13004  56DA 26 E6 82      mov b, _s161 ; "    %s repair completed\n\n"
13005  56DD FD AB         swp b
13006  56DF D8            push b
13007  56E0 07 78 60      call printf
13008  56E3 51 04 00      add sp, 4
13009  56E6             ; --- END FUNCTION CALL
13010  56E6             ; damage[i] = 0; 
13011  56E6 3B 6B 6E      mov d, _damage_data ; $damage
13012  56E9 D7            push a
13013  56EA DA            push d
13014  56EB FA FF FF      lea d, [bp + -1] ; $i
13015  56EE 2A            mov b, [d]
13016  56EF 38 00 00      mov c, 0
13017  56F2 E7            pop d
13018  56F3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13019  56F7 E4            pop a
13020  56F8 DA            push d
13021  56F9 FD 2E 00 00   mov32 cb, $00000000
13021  56FD 00 00 
13022  56FF E7            pop d
13023  5700 FD 43         mov [d], b
13024  5702 0A 05 57      jmp _if770_exit
13025  5705             _if770_exit:
13026  5705             _if769_exit:
13027  5705 0A 08 57      jmp _if768_exit
13028  5708             _if768_exit:
13029  5708             _for767_update:
13030  5708 FA FF FF      lea d, [bp + -1] ; $i
13031  570B 2A            mov b, [d]
13032  570C 38 00 00      mov c, 0
13033  570F 11            mov a, b
13034  5710 FD 77         inc b
13035  5712 FA FF FF      lea d, [bp + -1] ; $i
13036  5715 FD 43         mov [d], b
13037  5717 27            mov b, a
13038  5718 0A 80 55      jmp _for767_cond
13039  571B             _for767_exit:
13040  571B             ; unsigned char        r; 
13041  571B 52 01 00      sub sp, 1
13042  571E             ; if (get_rand(10) <= 2) { 
13043  571E             _if772_cond:
13044  571E             ; --- START FUNCTION CALL
13045  571E FD 2E 0A 00   mov32 cb, $0000000a
13045  5722 00 00 
13046  5724 FD AB         swp b
13047  5726 D8            push b
13048  5727 07 FF 04      call get_rand
13049  572A 51 02 00      add sp, 2
13050  572D             ; --- END FUNCTION CALL
13051  572D             ; --- START RELATIONAL
13052  572D D7            push a
13053  572E 11            mov a, b
13054  572F FD 2E 02 00   mov32 cb, $00000002
13054  5733 00 00 
13055  5735 B0            cmp a, b
13056  5736 FD 74         sle ; <= (signed)
13057  5738 E4            pop a
13058  5739             ; --- END RELATIONAL
13059  5739 C0 00 00      cmp b, 0
13060  573C C6 6D 58      je _if772_exit
13061  573F             _if772_TRUE:
13062  573F             ; r = rand8(); 
13063  573F FA FA FF      lea d, [bp + -6] ; $r
13064  5742 DA            push d
13065  5743             ; --- START FUNCTION CALL
13066  5743 07 6F 05      call rand8
13067  5746 E7            pop d
13068  5747 FD 3E         mov [d], bl
13069  5749             ; if (get_rand(10) < 6) { 
13070  5749             _if773_cond:
13071  5749             ; --- START FUNCTION CALL
13072  5749 FD 2E 0A 00   mov32 cb, $0000000a
13072  574D 00 00 
13073  574F FD AB         swp b
13074  5751 D8            push b
13075  5752 07 FF 04      call get_rand
13076  5755 51 02 00      add sp, 2
13077  5758             ; --- END FUNCTION CALL
13078  5758             ; --- START RELATIONAL
13079  5758 D7            push a
13080  5759 11            mov a, b
13081  575A FD 2E 06 00   mov32 cb, $00000006
13081  575E 00 00 
13082  5760 B0            cmp a, b
13083  5761 FD 73         slt ; < (signed)
13084  5763 E4            pop a
13085  5764             ; --- END RELATIONAL
13086  5764 C0 00 00      cmp b, 0
13087  5767 C6 ED 57      je _if773_else
13088  576A             _if773_TRUE:
13089  576A             ; damage[r] =damage[r]- (get_rand(500) + 100); 
13090  576A 3B 6B 6E      mov d, _damage_data ; $damage
13091  576D D7            push a
13092  576E DA            push d
13093  576F FA FA FF      lea d, [bp + -6] ; $r
13094  5772 32            mov bl, [d]
13095  5773 A7 00         mov bh, 0
13096  5775 38 00 00      mov c, 0
13097  5778 E7            pop d
13098  5779 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13099  577D E4            pop a
13100  577E DA            push d
13101  577F 3B 6B 6E      mov d, _damage_data ; $damage
13102  5782 D7            push a
13103  5783 DA            push d
13104  5784 FA FA FF      lea d, [bp + -6] ; $r
13105  5787 32            mov bl, [d]
13106  5788 A7 00         mov bh, 0
13107  578A 38 00 00      mov c, 0
13108  578D E7            pop d
13109  578E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13110  5792 E4            pop a
13111  5793 2A            mov b, [d]
13112  5794 38 00 00      mov c, 0
13113  5797             ; --- START TERMS
13114  5797 D7            push a
13115  5798 11            mov a, b
13116  5799             ; --- START FUNCTION CALL
13117  5799 FD 2E F4 01   mov32 cb, $000001f4
13117  579D 00 00 
13118  579F FD AB         swp b
13119  57A1 D8            push b
13120  57A2 07 FF 04      call get_rand
13121  57A5 51 02 00      add sp, 2
13122  57A8             ; --- END FUNCTION CALL
13123  57A8             ; --- START TERMS
13124  57A8 D7            push a
13125  57A9 11            mov a, b
13126  57AA FD 2E 64 00   mov32 cb, $00000064
13126  57AE 00 00 
13127  57B0 56            add b, a
13128  57B1 E4            pop a
13129  57B2             ; --- END TERMS
13130  57B2 60            sub a, b
13131  57B3 27            mov b, a
13132  57B4 E4            pop a
13133  57B5             ; --- END TERMS
13134  57B5 E7            pop d
13135  57B6 FD 43         mov [d], b
13136  57B8             ; puts(dcr_1); 
13137  57B8             ; --- START FUNCTION CALL
13138  57B8 3B 7A 6F      mov d, _dcr_1 ; $dcr_1
13139  57BB 2A            mov b, [d]
13140  57BC 38 00 00      mov c, 0
13141  57BF FD AB         swp b
13142  57C1 D8            push b
13143  57C2 07 85 69      call puts
13144  57C5 51 02 00      add sp, 2
13145  57C8             ; --- END FUNCTION CALL
13146  57C8             ; printf("    %s damaged\n\n", get_device_name(r)); 
13147  57C8             ; --- START FUNCTION CALL
13148  57C8             ; --- START FUNCTION CALL
13149  57C8 FA FA FF      lea d, [bp + -6] ; $r
13150  57CB 32            mov bl, [d]
13151  57CC A7 00         mov bh, 0
13152  57CE 38 00 00      mov c, 0
13153  57D1 AB            snex b
13154  57D2 FD AB         swp b
13155  57D4 D8            push b
13156  57D5 07 63 59      call get_device_name
13157  57D8 51 02 00      add sp, 2
13158  57DB             ; --- END FUNCTION CALL
13159  57DB FD AB         swp b
13160  57DD D8            push b
13161  57DE 26 00 83      mov b, _s162 ; "    %s damaged\n\n"
13162  57E1 FD AB         swp b
13163  57E3 D8            push b
13164  57E4 07 78 60      call printf
13165  57E7 51 04 00      add sp, 4
13166  57EA             ; --- END FUNCTION CALL
13167  57EA 0A 6A 58      jmp _if773_exit
13168  57ED             _if773_else:
13169  57ED             ; damage[r] = damage[r] + get_rand(300) + 100; 
13170  57ED 3B 6B 6E      mov d, _damage_data ; $damage
13171  57F0 D7            push a
13172  57F1 DA            push d
13173  57F2 FA FA FF      lea d, [bp + -6] ; $r
13174  57F5 32            mov bl, [d]
13175  57F6 A7 00         mov bh, 0
13176  57F8 38 00 00      mov c, 0
13177  57FB E7            pop d
13178  57FC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13179  5800 E4            pop a
13180  5801 DA            push d
13181  5802 3B 6B 6E      mov d, _damage_data ; $damage
13182  5805 D7            push a
13183  5806 DA            push d
13184  5807 FA FA FF      lea d, [bp + -6] ; $r
13185  580A 32            mov bl, [d]
13186  580B A7 00         mov bh, 0
13187  580D 38 00 00      mov c, 0
13188  5810 E7            pop d
13189  5811 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13190  5815 E4            pop a
13191  5816 2A            mov b, [d]
13192  5817 38 00 00      mov c, 0
13193  581A             ; --- START TERMS
13194  581A D7            push a
13195  581B 11            mov a, b
13196  581C             ; --- START FUNCTION CALL
13197  581C FD 2E 2C 01   mov32 cb, $0000012c
13197  5820 00 00 
13198  5822 FD AB         swp b
13199  5824 D8            push b
13200  5825 07 FF 04      call get_rand
13201  5828 51 02 00      add sp, 2
13202  582B             ; --- END FUNCTION CALL
13203  582B 56            add b, a
13204  582C 11            mov a, b
13205  582D FD 2E 64 00   mov32 cb, $00000064
13205  5831 00 00 
13206  5833 56            add b, a
13207  5834 E4            pop a
13208  5835             ; --- END TERMS
13209  5835 E7            pop d
13210  5836 FD 43         mov [d], b
13211  5838             ; puts(dcr_1); 
13212  5838             ; --- START FUNCTION CALL
13213  5838 3B 7A 6F      mov d, _dcr_1 ; $dcr_1
13214  583B 2A            mov b, [d]
13215  583C 38 00 00      mov c, 0
13216  583F FD AB         swp b
13217  5841 D8            push b
13218  5842 07 85 69      call puts
13219  5845 51 02 00      add sp, 2
13220  5848             ; --- END FUNCTION CALL
13221  5848             ; printf("    %s state of repair improved\n\n", 
13222  5848             ; --- START FUNCTION CALL
13223  5848             ; --- START FUNCTION CALL
13224  5848 FA FA FF      lea d, [bp + -6] ; $r
13225  584B 32            mov bl, [d]
13226  584C A7 00         mov bh, 0
13227  584E 38 00 00      mov c, 0
13228  5851 AB            snex b
13229  5852 FD AB         swp b
13230  5854 D8            push b
13231  5855 07 63 59      call get_device_name
13232  5858 51 02 00      add sp, 2
13233  585B             ; --- END FUNCTION CALL
13234  585B FD AB         swp b
13235  585D D8            push b
13236  585E 26 11 83      mov b, _s163 ; "    %s state of repair improved\n\n"
13237  5861 FD AB         swp b
13238  5863 D8            push b
13239  5864 07 78 60      call printf
13240  5867 51 04 00      add sp, 4
13241  586A             ; --- END FUNCTION CALL
13242  586A             _if773_exit:
13243  586A 0A 6D 58      jmp _if772_exit
13244  586D             _if772_exit:
13245  586D F9            leave
13246  586E 09            ret
13247  586F             
13248  586F             find_set_empty_place:
13249  586F F8 00 00      enter 0 ; (push bp; mov bp, sp)
13250  5872             ; unsigned char        r1, r2; 
13251  5872 52 01 00      sub sp, 1
13252  5875 52 01 00      sub sp, 1
13253  5878             ; do { 
13254  5878             _do774_block:
13255  5878             ; r1 = rand8(); 
13256  5878 FA 00 00      lea d, [bp + 0] ; $r1
13257  587B DA            push d
13258  587C             ; --- START FUNCTION CALL
13259  587C 07 6F 05      call rand8
13260  587F E7            pop d
13261  5880 FD 3E         mov [d], bl
13262  5882             ; r2 = rand8(); 
13263  5882 FA FF FF      lea d, [bp + -1] ; $r2
13264  5885 DA            push d
13265  5886             ; --- START FUNCTION CALL
13266  5886 07 6F 05      call rand8
13267  5889 E7            pop d
13268  588A FD 3E         mov [d], bl
13269  588C             ; } while (quad[r1+-1][r2+-1] != 		0        ); 
13270  588C             _do774_cond:
13271  588C 3B 85 6E      mov d, _quad_data ; $quad
13272  588F D7            push a
13273  5890 DA            push d
13274  5891 FA 00 00      lea d, [bp + 0] ; $r1
13275  5894 32            mov bl, [d]
13276  5895 A7 00         mov bh, 0
13277  5897 38 00 00      mov c, 0
13278  589A             ; --- START TERMS
13279  589A D7            push a
13280  589B 11            mov a, b
13281  589C FD 2E FF FF   mov32 cb, $ffffffff
13281  58A0 FF FF 
13282  58A2 56            add b, a
13283  58A3 E4            pop a
13284  58A4             ; --- END TERMS
13285  58A4 E7            pop d
13286  58A5 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
13287  58A9 DA            push d
13288  58AA FA FF FF      lea d, [bp + -1] ; $r2
13289  58AD 32            mov bl, [d]
13290  58AE A7 00         mov bh, 0
13291  58B0 38 00 00      mov c, 0
13292  58B3             ; --- START TERMS
13293  58B3 D7            push a
13294  58B4 11            mov a, b
13295  58B5 FD 2E FF FF   mov32 cb, $ffffffff
13295  58B9 FF FF 
13296  58BB 56            add b, a
13297  58BC E4            pop a
13298  58BD             ; --- END TERMS
13299  58BD E7            pop d
13300  58BE 5A            add d, b
13301  58BF E4            pop a
13302  58C0 32            mov bl, [d]
13303  58C1 A7 00         mov bh, 0
13304  58C3 38 00 00      mov c, 0
13305  58C6             ; --- START RELATIONAL
13306  58C6 D7            push a
13307  58C7 11            mov a, b
13308  58C8 FD 2E 00 00   mov32 cb, $00000000
13308  58CC 00 00 
13309  58CE B0            cmp a, b
13310  58CF FD 72         sneq ; !=
13311  58D1 E4            pop a
13312  58D2             ; --- END RELATIONAL
13313  58D2 C0 01 00      cmp b, 1
13314  58D5 C6 78 58      je _do774_block
13315  58D8             _do774_exit:
13316  58D8             ; quad[r1+-1][r2+-1] = t; 
13317  58D8 3B 85 6E      mov d, _quad_data ; $quad
13318  58DB D7            push a
13319  58DC DA            push d
13320  58DD FA 00 00      lea d, [bp + 0] ; $r1
13321  58E0 32            mov bl, [d]
13322  58E1 A7 00         mov bh, 0
13323  58E3 38 00 00      mov c, 0
13324  58E6             ; --- START TERMS
13325  58E6 D7            push a
13326  58E7 11            mov a, b
13327  58E8 FD 2E FF FF   mov32 cb, $ffffffff
13327  58EC FF FF 
13328  58EE 56            add b, a
13329  58EF E4            pop a
13330  58F0             ; --- END TERMS
13331  58F0 E7            pop d
13332  58F1 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
13333  58F5 DA            push d
13334  58F6 FA FF FF      lea d, [bp + -1] ; $r2
13335  58F9 32            mov bl, [d]
13336  58FA A7 00         mov bh, 0
13337  58FC 38 00 00      mov c, 0
13338  58FF             ; --- START TERMS
13339  58FF D7            push a
13340  5900 11            mov a, b
13341  5901 FD 2E FF FF   mov32 cb, $ffffffff
13341  5905 FF FF 
13342  5907 56            add b, a
13343  5908 E4            pop a
13344  5909             ; --- END TERMS
13345  5909 E7            pop d
13346  590A 5A            add d, b
13347  590B E4            pop a
13348  590C DA            push d
13349  590D FA 05 00      lea d, [bp + 5] ; $t
13350  5910 32            mov bl, [d]
13351  5911 A7 00         mov bh, 0
13352  5913 38 00 00      mov c, 0
13353  5916 E7            pop d
13354  5917 FD 3E         mov [d], bl
13355  5919             ; if (z1) 
13356  5919             _if775_cond:
13357  5919 FA 06 00      lea d, [bp + 6] ; $z1
13358  591C 2A            mov b, [d]
13359  591D 38 00 00      mov c, 0
13360  5920 C0 00 00      cmp b, 0
13361  5923 C6 3D 59      je _if775_exit
13362  5926             _if775_TRUE:
13363  5926             ; *z1 = r1; 
13364  5926 FA 06 00      lea d, [bp + 6] ; $z1
13365  5929 2A            mov b, [d]
13366  592A 38 00 00      mov c, 0
13367  592D D8            push b
13368  592E FA 00 00      lea d, [bp + 0] ; $r1
13369  5931 32            mov bl, [d]
13370  5932 A7 00         mov bh, 0
13371  5934 38 00 00      mov c, 0
13372  5937 E7            pop d
13373  5938 FD 3E         mov [d], bl
13374  593A 0A 3D 59      jmp _if775_exit
13375  593D             _if775_exit:
13376  593D             ; if (z2) 
13377  593D             _if776_cond:
13378  593D FA 08 00      lea d, [bp + 8] ; $z2
13379  5940 2A            mov b, [d]
13380  5941 38 00 00      mov c, 0
13381  5944 C0 00 00      cmp b, 0
13382  5947 C6 61 59      je _if776_exit
13383  594A             _if776_TRUE:
13384  594A             ; *z2 = r2; 
13385  594A FA 08 00      lea d, [bp + 8] ; $z2
13386  594D 2A            mov b, [d]
13387  594E 38 00 00      mov c, 0
13388  5951 D8            push b
13389  5952 FA FF FF      lea d, [bp + -1] ; $r2
13390  5955 32            mov bl, [d]
13391  5956 A7 00         mov bh, 0
13392  5958 38 00 00      mov c, 0
13393  595B E7            pop d
13394  595C FD 3E         mov [d], bl
13395  595E 0A 61 59      jmp _if776_exit
13396  5961             _if776_exit:
13397  5961 F9            leave
13398  5962 09            ret
13399  5963             
13400  5963             get_device_name:
13401  5963 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13402  5966             ; if (n < 0 || n > 8) 
13403  5966             _if777_cond:
13404  5966 FA 05 00      lea d, [bp + 5] ; $n
13405  5969 2A            mov b, [d]
13406  596A 38 00 00      mov c, 0
13407  596D             ; --- START RELATIONAL
13408  596D D7            push a
13409  596E 11            mov a, b
13410  596F FD 2E 00 00   mov32 cb, $00000000
13410  5973 00 00 
13411  5975 B0            cmp a, b
13412  5976 FD 73         slt ; < (signed)
13413  5978 E4            pop a
13414  5979             ; --- END RELATIONAL
13415  5979             ; --- START LOGICAL OR
13416  5979 D7            push a
13417  597A 11            mov a, b
13418  597B FA 05 00      lea d, [bp + 5] ; $n
13419  597E 2A            mov b, [d]
13420  597F 38 00 00      mov c, 0
13421  5982             ; --- START RELATIONAL
13422  5982 D7            push a
13423  5983 11            mov a, b
13424  5984 FD 2E 08 00   mov32 cb, $00000008
13424  5988 00 00 
13425  598A B0            cmp a, b
13426  598B FD 7F         sgt ; >
13427  598D E4            pop a
13428  598E             ; --- END RELATIONAL
13429  598E FD A8         sor a, b ; ||
13430  5990 E4            pop a
13431  5991             ; --- END LOGICAL OR
13432  5991 C0 00 00      cmp b, 0
13433  5994 C6 A7 59      je _if777_exit
13434  5997             _if777_TRUE:
13435  5997             ; n = 0; 
13436  5997 FA 05 00      lea d, [bp + 5] ; $n
13437  599A DA            push d
13438  599B FD 2E 00 00   mov32 cb, $00000000
13438  599F 00 00 
13439  59A1 E7            pop d
13440  59A2 FD 43         mov [d], b
13441  59A4 0A A7 59      jmp _if777_exit
13442  59A7             _if777_exit:
13443  59A7             ; return device_name[n]; 
13444  59A7 3B 3F 6F      mov d, _device_name_data ; $device_name
13445  59AA D7            push a
13446  59AB DA            push d
13447  59AC FA 05 00      lea d, [bp + 5] ; $n
13448  59AF 2A            mov b, [d]
13449  59B0 38 00 00      mov c, 0
13450  59B3 E7            pop d
13451  59B4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13452  59B8 E4            pop a
13453  59B9 2A            mov b, [d]
13454  59BA 38 00 00      mov c, 0
13455  59BD F9            leave
13456  59BE 09            ret
13457  59BF             
13458  59BF             quadrant_name:
13459  59BF F8 00 00      enter 0 ; (push bp; mov bp, sp)
13460  59C2             ; static char *sect_name[] = { "", " I", " II", " III", " IV" }; 
13461  59C2 52 14 00      sub sp, 20
13462  59C5             ; if (y < 1 || y > 8 || x < 1 || x > 8) 
13463  59C5             _if778_cond:
13464  59C5 FA 06 00      lea d, [bp + 6] ; $y
13465  59C8 32            mov bl, [d]
13466  59C9 A7 00         mov bh, 0
13467  59CB 38 00 00      mov c, 0
13468  59CE             ; --- START RELATIONAL
13469  59CE D7            push a
13470  59CF 11            mov a, b
13471  59D0 FD 2E 01 00   mov32 cb, $00000001
13471  59D4 00 00 
13472  59D6 B0            cmp a, b
13473  59D7 FD 75         slu ; < (unsigned)
13474  59D9 E4            pop a
13475  59DA             ; --- END RELATIONAL
13476  59DA             ; --- START LOGICAL OR
13477  59DA D7            push a
13478  59DB 11            mov a, b
13479  59DC FA 06 00      lea d, [bp + 6] ; $y
13480  59DF 32            mov bl, [d]
13481  59E0 A7 00         mov bh, 0
13482  59E2 38 00 00      mov c, 0
13483  59E5             ; --- START RELATIONAL
13484  59E5 D7            push a
13485  59E6 11            mov a, b
13486  59E7 FD 2E 08 00   mov32 cb, $00000008
13486  59EB 00 00 
13487  59ED B0            cmp a, b
13488  59EE FD 81         sgu ; > (unsigned)
13489  59F0 E4            pop a
13490  59F1             ; --- END RELATIONAL
13491  59F1 FD A8         sor a, b ; ||
13492  59F3 11            mov a, b
13493  59F4 FA 07 00      lea d, [bp + 7] ; $x
13494  59F7 32            mov bl, [d]
13495  59F8 A7 00         mov bh, 0
13496  59FA 38 00 00      mov c, 0
13497  59FD             ; --- START RELATIONAL
13498  59FD D7            push a
13499  59FE 11            mov a, b
13500  59FF FD 2E 01 00   mov32 cb, $00000001
13500  5A03 00 00 
13501  5A05 B0            cmp a, b
13502  5A06 FD 75         slu ; < (unsigned)
13503  5A08 E4            pop a
13504  5A09             ; --- END RELATIONAL
13505  5A09 FD A8         sor a, b ; ||
13506  5A0B 11            mov a, b
13507  5A0C FA 07 00      lea d, [bp + 7] ; $x
13508  5A0F 32            mov bl, [d]
13509  5A10 A7 00         mov bh, 0
13510  5A12 38 00 00      mov c, 0
13511  5A15             ; --- START RELATIONAL
13512  5A15 D7            push a
13513  5A16 11            mov a, b
13514  5A17 FD 2E 08 00   mov32 cb, $00000008
13514  5A1B 00 00 
13515  5A1D B0            cmp a, b
13516  5A1E FD 81         sgu ; > (unsigned)
13517  5A20 E4            pop a
13518  5A21             ; --- END RELATIONAL
13519  5A21 FD A8         sor a, b ; ||
13520  5A23 E4            pop a
13521  5A24             ; --- END LOGICAL OR
13522  5A24 C0 00 00      cmp b, 0
13523  5A27 C6 43 5A      je _if778_exit
13524  5A2A             _if778_TRUE:
13525  5A2A             ; strcpy(quadname, "Unknown"); 
13526  5A2A             ; --- START FUNCTION CALL
13527  5A2A 26 43 83      mov b, _s168 ; "Unknown"
13528  5A2D FD AB         swp b
13529  5A2F D8            push b
13530  5A30 3B C5 6E      mov d, _quadname_data ; $quadname
13531  5A33 2D            mov b, d
13532  5A34 38 00 00      mov c, 0
13533  5A37 FD AB         swp b
13534  5A39 D8            push b
13535  5A3A 07 C0 5E      call strcpy
13536  5A3D 51 04 00      add sp, 4
13537  5A40             ; --- END FUNCTION CALL
13538  5A40 0A 43 5A      jmp _if778_exit
13539  5A43             _if778_exit:
13540  5A43             ; if (x <= 4) 
13541  5A43             _if779_cond:
13542  5A43 FA 07 00      lea d, [bp + 7] ; $x
13543  5A46 32            mov bl, [d]
13544  5A47 A7 00         mov bh, 0
13545  5A49 38 00 00      mov c, 0
13546  5A4C             ; --- START RELATIONAL
13547  5A4C D7            push a
13548  5A4D 11            mov a, b
13549  5A4E FD 2E 04 00   mov32 cb, $00000004
13549  5A52 00 00 
13550  5A54 B0            cmp a, b
13551  5A55 FD 76         sleu ; <= (unsigned)
13552  5A57 E4            pop a
13553  5A58             ; --- END RELATIONAL
13554  5A58 C0 00 00      cmp b, 0
13555  5A5B C6 8C 5A      je _if779_else
13556  5A5E             _if779_TRUE:
13557  5A5E             ; strcpy(quadname, quad_name[y]); 
13558  5A5E             ; --- START FUNCTION CALL
13559  5A5E 3B FB 6E      mov d, _quad_name_data ; $quad_name
13560  5A61 D7            push a
13561  5A62 DA            push d
13562  5A63 FA 06 00      lea d, [bp + 6] ; $y
13563  5A66 32            mov bl, [d]
13564  5A67 A7 00         mov bh, 0
13565  5A69 38 00 00      mov c, 0
13566  5A6C E7            pop d
13567  5A6D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13568  5A71 E4            pop a
13569  5A72 2A            mov b, [d]
13570  5A73 38 00 00      mov c, 0
13571  5A76 FD AB         swp b
13572  5A78 D8            push b
13573  5A79 3B C5 6E      mov d, _quadname_data ; $quadname
13574  5A7C 2D            mov b, d
13575  5A7D 38 00 00      mov c, 0
13576  5A80 FD AB         swp b
13577  5A82 D8            push b
13578  5A83 07 C0 5E      call strcpy
13579  5A86 51 04 00      add sp, 4
13580  5A89             ; --- END FUNCTION CALL
13581  5A89 0A C1 5A      jmp _if779_exit
13582  5A8C             _if779_else:
13583  5A8C             ; strcpy(quadname, quad_name[y + 8]); 
13584  5A8C             ; --- START FUNCTION CALL
13585  5A8C 3B FB 6E      mov d, _quad_name_data ; $quad_name
13586  5A8F D7            push a
13587  5A90 DA            push d
13588  5A91 FA 06 00      lea d, [bp + 6] ; $y
13589  5A94 32            mov bl, [d]
13590  5A95 A7 00         mov bh, 0
13591  5A97 38 00 00      mov c, 0
13592  5A9A             ; --- START TERMS
13593  5A9A D7            push a
13594  5A9B 11            mov a, b
13595  5A9C FD 2E 08 00   mov32 cb, $00000008
13595  5AA0 00 00 
13596  5AA2 56            add b, a
13597  5AA3 E4            pop a
13598  5AA4             ; --- END TERMS
13599  5AA4 E7            pop d
13600  5AA5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13601  5AA9 E4            pop a
13602  5AAA 2A            mov b, [d]
13603  5AAB 38 00 00      mov c, 0
13604  5AAE FD AB         swp b
13605  5AB0 D8            push b
13606  5AB1 3B C5 6E      mov d, _quadname_data ; $quadname
13607  5AB4 2D            mov b, d
13608  5AB5 38 00 00      mov c, 0
13609  5AB8 FD AB         swp b
13610  5ABA D8            push b
13611  5ABB 07 C0 5E      call strcpy
13612  5ABE 51 04 00      add sp, 4
13613  5AC1             ; --- END FUNCTION CALL
13614  5AC1             _if779_exit:
13615  5AC1             ; if (small != 1) { 
13616  5AC1             _if780_cond:
13617  5AC1 FA 05 00      lea d, [bp + 5] ; $small
13618  5AC4 32            mov bl, [d]
13619  5AC5 A7 00         mov bh, 0
13620  5AC7 38 00 00      mov c, 0
13621  5ACA             ; --- START RELATIONAL
13622  5ACA D7            push a
13623  5ACB 11            mov a, b
13624  5ACC FD 2E 01 00   mov32 cb, $00000001
13624  5AD0 00 00 
13625  5AD2 B0            cmp a, b
13626  5AD3 FD 72         sneq ; !=
13627  5AD5 E4            pop a
13628  5AD6             ; --- END RELATIONAL
13629  5AD6 C0 00 00      cmp b, 0
13630  5AD9 C6 43 5B      je _if780_exit
13631  5ADC             _if780_TRUE:
13632  5ADC             ; if (x > 4) 
13633  5ADC             _if781_cond:
13634  5ADC FA 07 00      lea d, [bp + 7] ; $x
13635  5ADF 32            mov bl, [d]
13636  5AE0 A7 00         mov bh, 0
13637  5AE2 38 00 00      mov c, 0
13638  5AE5             ; --- START RELATIONAL
13639  5AE5 D7            push a
13640  5AE6 11            mov a, b
13641  5AE7 FD 2E 04 00   mov32 cb, $00000004
13641  5AEB 00 00 
13642  5AED B0            cmp a, b
13643  5AEE FD 81         sgu ; > (unsigned)
13644  5AF0 E4            pop a
13645  5AF1             ; --- END RELATIONAL
13646  5AF1 C0 00 00      cmp b, 0
13647  5AF4 C6 15 5B      je _if781_exit
13648  5AF7             _if781_TRUE:
13649  5AF7             ; x = x - 4; 
13650  5AF7 FA 07 00      lea d, [bp + 7] ; $x
13651  5AFA DA            push d
13652  5AFB FA 07 00      lea d, [bp + 7] ; $x
13653  5AFE 32            mov bl, [d]
13654  5AFF A7 00         mov bh, 0
13655  5B01 38 00 00      mov c, 0
13656  5B04             ; --- START TERMS
13657  5B04 D7            push a
13658  5B05 11            mov a, b
13659  5B06 FD 2E 04 00   mov32 cb, $00000004
13659  5B0A 00 00 
13660  5B0C 60            sub a, b
13661  5B0D 27            mov b, a
13662  5B0E E4            pop a
13663  5B0F             ; --- END TERMS
13664  5B0F E7            pop d
13665  5B10 FD 3E         mov [d], bl
13666  5B12 0A 15 5B      jmp _if781_exit
13667  5B15             _if781_exit:
13668  5B15             ; strcat(quadname, sect_name[x]); 
13669  5B15             ; --- START FUNCTION CALL
13670  5B15 3B 5F 70      mov d, st_quadrant_name_sect_name_dt ; static sect_name
13671  5B18 D7            push a
13672  5B19 DA            push d
13673  5B1A FA 07 00      lea d, [bp + 7] ; $x
13674  5B1D 32            mov bl, [d]
13675  5B1E A7 00         mov bh, 0
13676  5B20 38 00 00      mov c, 0
13677  5B23 E7            pop d
13678  5B24 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13679  5B28 E4            pop a
13680  5B29 2A            mov b, [d]
13681  5B2A 38 00 00      mov c, 0
13682  5B2D FD AB         swp b
13683  5B2F D8            push b
13684  5B30 3B C5 6E      mov d, _quadname_data ; $quadname
13685  5B33 2D            mov b, d
13686  5B34 38 00 00      mov c, 0
13687  5B37 FD AB         swp b
13688  5B39 D8            push b
13689  5B3A 07 3A 5F      call strcat
13690  5B3D 51 04 00      add sp, 4
13691  5B40             ; --- END FUNCTION CALL
13692  5B40 0A 43 5B      jmp _if780_exit
13693  5B43             _if780_exit:
13694  5B43             ; return; 
13695  5B43 F9            leave
13696  5B44 09            ret
13697  5B45             
13698  5B45             isqrt:
13699  5B45 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13700  5B48             ; unsigned int         b, q, r, t; 
13701  5B48 52 02 00      sub sp, 2
13702  5B4B 52 02 00      sub sp, 2
13703  5B4E 52 02 00      sub sp, 2
13704  5B51 52 02 00      sub sp, 2
13705  5B54             ; b = 0x4000; 
13706  5B54 FA FF FF      lea d, [bp + -1] ; $b
13707  5B57 DA            push d
13708  5B58 FD 2E 00 40   mov32 cb, $00004000
13708  5B5C 00 00 
13709  5B5E E7            pop d
13710  5B5F FD 43         mov [d], b
13711  5B61             ; q = 0; 
13712  5B61 FA FD FF      lea d, [bp + -3] ; $q
13713  5B64 DA            push d
13714  5B65 FD 2E 00 00   mov32 cb, $00000000
13714  5B69 00 00 
13715  5B6B E7            pop d
13716  5B6C FD 43         mov [d], b
13717  5B6E             ; r = i; 
13718  5B6E FA FB FF      lea d, [bp + -5] ; $r
13719  5B71 DA            push d
13720  5B72 FA 05 00      lea d, [bp + 5] ; $i
13721  5B75 2A            mov b, [d]
13722  5B76 38 00 00      mov c, 0
13723  5B79 E7            pop d
13724  5B7A FD 43         mov [d], b
13725  5B7C             ; while (b) { 
13726  5B7C             _while782_cond:
13727  5B7C FA FF FF      lea d, [bp + -1] ; $b
13728  5B7F 2A            mov b, [d]
13729  5B80 38 00 00      mov c, 0
13730  5B83 C0 00 00      cmp b, 0
13731  5B86 C6 2B 5C      je _while782_exit
13732  5B89             _while782_block:
13733  5B89             ; t = q + b; 
13734  5B89 FA F9 FF      lea d, [bp + -7] ; $t
13735  5B8C DA            push d
13736  5B8D FA FD FF      lea d, [bp + -3] ; $q
13737  5B90 2A            mov b, [d]
13738  5B91 38 00 00      mov c, 0
13739  5B94             ; --- START TERMS
13740  5B94 D7            push a
13741  5B95 11            mov a, b
13742  5B96 FA FF FF      lea d, [bp + -1] ; $b
13743  5B99 2A            mov b, [d]
13744  5B9A 38 00 00      mov c, 0
13745  5B9D 56            add b, a
13746  5B9E E4            pop a
13747  5B9F             ; --- END TERMS
13748  5B9F E7            pop d
13749  5BA0 FD 43         mov [d], b
13750  5BA2             ; q =q>> 1; 
13751  5BA2 FA FD FF      lea d, [bp + -3] ; $q
13752  5BA5 DA            push d
13753  5BA6 FA FD FF      lea d, [bp + -3] ; $q
13754  5BA9 2A            mov b, [d]
13755  5BAA 38 00 00      mov c, 0
13756  5BAD             ; --- START SHIFT
13757  5BAD D7            push a
13758  5BAE 11            mov a, b
13759  5BAF FD 2E 01 00   mov32 cb, $00000001
13759  5BB3 00 00 
13760  5BB5 FD 39         mov c, b
13761  5BB7 A1            shr a, cl
13762  5BB8 27            mov b, a
13763  5BB9 E4            pop a
13764  5BBA             ; --- END SHIFT
13765  5BBA E7            pop d
13766  5BBB FD 43         mov [d], b
13767  5BBD             ; if (r >= t) { 
13768  5BBD             _if783_cond:
13769  5BBD FA FB FF      lea d, [bp + -5] ; $r
13770  5BC0 2A            mov b, [d]
13771  5BC1 38 00 00      mov c, 0
13772  5BC4             ; --- START RELATIONAL
13773  5BC4 D7            push a
13774  5BC5 11            mov a, b
13775  5BC6 FA F9 FF      lea d, [bp + -7] ; $t
13776  5BC9 2A            mov b, [d]
13777  5BCA 38 00 00      mov c, 0
13778  5BCD B0            cmp a, b
13779  5BCE FD 82         sgeu ; >= (unsigned)
13780  5BD0 E4            pop a
13781  5BD1             ; --- END RELATIONAL
13782  5BD1 C0 00 00      cmp b, 0
13783  5BD4 C6 0D 5C      je _if783_exit
13784  5BD7             _if783_TRUE:
13785  5BD7             ; r =r- t; 
13786  5BD7 FA FB FF      lea d, [bp + -5] ; $r
13787  5BDA DA            push d
13788  5BDB FA FB FF      lea d, [bp + -5] ; $r
13789  5BDE 2A            mov b, [d]
13790  5BDF 38 00 00      mov c, 0
13791  5BE2             ; --- START TERMS
13792  5BE2 D7            push a
13793  5BE3 11            mov a, b
13794  5BE4 FA F9 FF      lea d, [bp + -7] ; $t
13795  5BE7 2A            mov b, [d]
13796  5BE8 38 00 00      mov c, 0
13797  5BEB 60            sub a, b
13798  5BEC 27            mov b, a
13799  5BED E4            pop a
13800  5BEE             ; --- END TERMS
13801  5BEE E7            pop d
13802  5BEF FD 43         mov [d], b
13803  5BF1             ; q = q + b; 
13804  5BF1 FA FD FF      lea d, [bp + -3] ; $q
13805  5BF4 DA            push d
13806  5BF5 FA FD FF      lea d, [bp + -3] ; $q
13807  5BF8 2A            mov b, [d]
13808  5BF9 38 00 00      mov c, 0
13809  5BFC             ; --- START TERMS
13810  5BFC D7            push a
13811  5BFD 11            mov a, b
13812  5BFE FA FF FF      lea d, [bp + -1] ; $b
13813  5C01 2A            mov b, [d]
13814  5C02 38 00 00      mov c, 0
13815  5C05 56            add b, a
13816  5C06 E4            pop a
13817  5C07             ; --- END TERMS
13818  5C07 E7            pop d
13819  5C08 FD 43         mov [d], b
13820  5C0A 0A 0D 5C      jmp _if783_exit
13821  5C0D             _if783_exit:
13822  5C0D             ; b =b>> 2; 
13823  5C0D FA FF FF      lea d, [bp + -1] ; $b
13824  5C10 DA            push d
13825  5C11 FA FF FF      lea d, [bp + -1] ; $b
13826  5C14 2A            mov b, [d]
13827  5C15 38 00 00      mov c, 0
13828  5C18             ; --- START SHIFT
13829  5C18 D7            push a
13830  5C19 11            mov a, b
13831  5C1A FD 2E 02 00   mov32 cb, $00000002
13831  5C1E 00 00 
13832  5C20 FD 39         mov c, b
13833  5C22 A1            shr a, cl
13834  5C23 27            mov b, a
13835  5C24 E4            pop a
13836  5C25             ; --- END SHIFT
13837  5C25 E7            pop d
13838  5C26 FD 43         mov [d], b
13839  5C28 0A 7C 5B      jmp _while782_cond
13840  5C2B             _while782_exit:
13841  5C2B             ; return q; 
13842  5C2B FA FD FF      lea d, [bp + -3] ; $q
13843  5C2E 2A            mov b, [d]
13844  5C2F 38 00 00      mov c, 0
13845  5C32 F9            leave
13846  5C33 09            ret
13847  5C34             
13848  5C34             square00:
13849  5C34 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13850  5C37             ; if (abs(t) > 181) { 
13851  5C37             _if784_cond:
13852  5C37             ; --- START FUNCTION CALL
13853  5C37 FA 05 00      lea d, [bp + 5] ; $t
13854  5C3A 2A            mov b, [d]
13855  5C3B 38 00 00      mov c, 0
13856  5C3E FD AB         swp b
13857  5C40 D8            push b
13858  5C41 07 66 6B      call abs
13859  5C44 51 02 00      add sp, 2
13860  5C47             ; --- END FUNCTION CALL
13861  5C47             ; --- START RELATIONAL
13862  5C47 D7            push a
13863  5C48 11            mov a, b
13864  5C49 FD 2E B5 00   mov32 cb, $000000b5
13864  5C4D 00 00 
13865  5C4F B0            cmp a, b
13866  5C50 FD 7F         sgt ; >
13867  5C52 E4            pop a
13868  5C53             ; --- END RELATIONAL
13869  5C53 C0 00 00      cmp b, 0
13870  5C56 C6 D5 5C      je _if784_else
13871  5C59             _if784_TRUE:
13872  5C59             ; t =t/ 10; 
13873  5C59 FA 05 00      lea d, [bp + 5] ; $t
13874  5C5C DA            push d
13875  5C5D FA 05 00      lea d, [bp + 5] ; $t
13876  5C60 2A            mov b, [d]
13877  5C61 38 00 00      mov c, 0
13878  5C64             ; --- START FACTORS
13879  5C64 D7            push a
13880  5C65 FD D8         push g
13881  5C67 11            mov a, b
13882  5C68 FD 7A         mov g, c
13883  5C6A FD 2E 0A 00   mov32 cb, $0000000a
13883  5C6E 00 00 
13884  5C70 FD D8         push g ; save 'g' as the div instruction uses it
13885  5C72 AE            div a, b ; /, a: quotient, b: remainder
13886  5C73 FD F1         pop g
13887  5C75 FD 38         mov c, g
13888  5C77 27            mov b, a
13889  5C78 FD F1         pop g
13890  5C7A E4            pop a
13891  5C7B             ; --- END FACTORS
13892  5C7B E7            pop d
13893  5C7C FD 43         mov [d], b
13894  5C7E             ; t =t* t; 
13895  5C7E FA 05 00      lea d, [bp + 5] ; $t
13896  5C81 DA            push d
13897  5C82 FA 05 00      lea d, [bp + 5] ; $t
13898  5C85 2A            mov b, [d]
13899  5C86 38 00 00      mov c, 0
13900  5C89             ; --- START FACTORS
13901  5C89 D7            push a
13902  5C8A FD D8         push g
13903  5C8C 11            mov a, b
13904  5C8D FD 7A         mov g, c
13905  5C8F FA 05 00      lea d, [bp + 5] ; $t
13906  5C92 2A            mov b, [d]
13907  5C93 38 00 00      mov c, 0
13908  5C96 D7            push a     ; save left operand
13909  5C97 8E            xor a, b   ; xor sign bits
13910  5C98 FD AA         swp a      ; swap bytes
13911  5C9A 83            mov cl, al ; save result of xor into 'dl'
13912  5C9B E4            pop a      ; restore left side operator
13913  5C9C DF            push cl    ; save result of xor above
13914  5C9D FD AA         swp a  
13915  5C9F 93 80         test al, $80  
13916  5CA1 FD AA         swp a  
13917  5CA3 C6 A8 5C      jz skip_invert_a_788  
13918  5CA6 FD 95         neg a 
13919  5CA8             skip_invert_a_788:   
13920  5CA8 FD AB         swp b
13921  5CAA FD 93 80      test bl, $80  
13922  5CAD FD AB         swp b
13923  5CAF C6 B4 5C      jz skip_invert_b_788  
13924  5CB2 FD 97         neg b 
13925  5CB4             skip_invert_b_788:   
13926  5CB4 AC            mul a, b ; *
13927  5CB5 FD 78         mov g, a
13928  5CB7 11            mov a, b
13929  5CB8 EA            pop bl
13930  5CB9 FD 93 80      test bl, $80
13931  5CBC C6 C9 5C      jz _same_signs_788
13932  5CBF 2F            mov bl, al
13933  5CC0 95            not a
13934  5CC1 FD 97         neg b
13935  5CC3 5B 00 00      adc a, 0
13936  5CC6 FD 78         mov g, a
13937  5CC8 11            mov a, b
13938  5CC9             _same_signs_788:
13939  5CC9 FD 38         mov c, g
13940  5CCB 27            mov b, a
13941  5CCC FD F1         pop g
13942  5CCE E4            pop a
13943  5CCF             ; --- END FACTORS
13944  5CCF E7            pop d
13945  5CD0 FD 43         mov [d], b
13946  5CD2 0A 4E 5D      jmp _if784_exit
13947  5CD5             _if784_else:
13948  5CD5             ; t =t* t; 
13949  5CD5 FA 05 00      lea d, [bp + 5] ; $t
13950  5CD8 DA            push d
13951  5CD9 FA 05 00      lea d, [bp + 5] ; $t
13952  5CDC 2A            mov b, [d]
13953  5CDD 38 00 00      mov c, 0
13954  5CE0             ; --- START FACTORS
13955  5CE0 D7            push a
13956  5CE1 FD D8         push g
13957  5CE3 11            mov a, b
13958  5CE4 FD 7A         mov g, c
13959  5CE6 FA 05 00      lea d, [bp + 5] ; $t
13960  5CE9 2A            mov b, [d]
13961  5CEA 38 00 00      mov c, 0
13962  5CED D7            push a     ; save left operand
13963  5CEE 8E            xor a, b   ; xor sign bits
13964  5CEF FD AA         swp a      ; swap bytes
13965  5CF1 83            mov cl, al ; save result of xor into 'dl'
13966  5CF2 E4            pop a      ; restore left side operator
13967  5CF3 DF            push cl    ; save result of xor above
13968  5CF4 FD AA         swp a  
13969  5CF6 93 80         test al, $80  
13970  5CF8 FD AA         swp a  
13971  5CFA C6 FF 5C      jz skip_invert_a_790  
13972  5CFD FD 95         neg a 
13973  5CFF             skip_invert_a_790:   
13974  5CFF FD AB         swp b
13975  5D01 FD 93 80      test bl, $80  
13976  5D04 FD AB         swp b
13977  5D06 C6 0B 5D      jz skip_invert_b_790  
13978  5D09 FD 97         neg b 
13979  5D0B             skip_invert_b_790:   
13980  5D0B AC            mul a, b ; *
13981  5D0C FD 78         mov g, a
13982  5D0E 11            mov a, b
13983  5D0F EA            pop bl
13984  5D10 FD 93 80      test bl, $80
13985  5D13 C6 20 5D      jz _same_signs_790
13986  5D16 2F            mov bl, al
13987  5D17 95            not a
13988  5D18 FD 97         neg b
13989  5D1A 5B 00 00      adc a, 0
13990  5D1D FD 78         mov g, a
13991  5D1F 11            mov a, b
13992  5D20             _same_signs_790:
13993  5D20 FD 38         mov c, g
13994  5D22 27            mov b, a
13995  5D23 FD F1         pop g
13996  5D25 E4            pop a
13997  5D26             ; --- END FACTORS
13998  5D26 E7            pop d
13999  5D27 FD 43         mov [d], b
14000  5D29             ; t =t/ 100; 
14001  5D29 FA 05 00      lea d, [bp + 5] ; $t
14002  5D2C DA            push d
14003  5D2D FA 05 00      lea d, [bp + 5] ; $t
14004  5D30 2A            mov b, [d]
14005  5D31 38 00 00      mov c, 0
14006  5D34             ; --- START FACTORS
14007  5D34 D7            push a
14008  5D35 FD D8         push g
14009  5D37 11            mov a, b
14010  5D38 FD 7A         mov g, c
14011  5D3A FD 2E 64 00   mov32 cb, $00000064
14011  5D3E 00 00 
14012  5D40 FD D8         push g ; save 'g' as the div instruction uses it
14013  5D42 AE            div a, b ; /, a: quotient, b: remainder
14014  5D43 FD F1         pop g
14015  5D45 FD 38         mov c, g
14016  5D47 27            mov b, a
14017  5D48 FD F1         pop g
14018  5D4A E4            pop a
14019  5D4B             ; --- END FACTORS
14020  5D4B E7            pop d
14021  5D4C FD 43         mov [d], b
14022  5D4E             _if784_exit:
14023  5D4E             ; return t; 
14024  5D4E FA 05 00      lea d, [bp + 5] ; $t
14025  5D51 2A            mov b, [d]
14026  5D52 38 00 00      mov c, 0
14027  5D55 F9            leave
14028  5D56 09            ret
14029  5D57             
14030  5D57             distance_to:
14031  5D57 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14032  5D5A             ; unsigned int         j; 
14033  5D5A 52 02 00      sub sp, 2
14034  5D5D             ; j = square00(TO_FIXED00(k->y) - ship_y); 
14035  5D5D FA FF FF      lea d, [bp + -1] ; $j
14036  5D60 DA            push d
14037  5D61             ; --- START FUNCTION CALL
14038  5D61             ; --- START FUNCTION CALL
14039  5D61 FA 05 00      lea d, [bp + 5] ; $k
14040  5D64 FD 2A         mov d, [d]
14041  5D66 58 00 00      add d, 0
14042  5D69 32            mov bl, [d]
14043  5D6A A7 00         mov bh, 0
14044  5D6C 38 00 00      mov c, 0
14045  5D6F AB            snex b
14046  5D70 FD AB         swp b
14047  5D72 D8            push b
14048  5D73 07 8B 04      call TO_FIXED00
14049  5D76 51 02 00      add sp, 2
14050  5D79             ; --- END FUNCTION CALL
14051  5D79             ; --- START TERMS
14052  5D79 D7            push a
14053  5D7A 11            mov a, b
14054  5D7B 3B 7F 6E      mov d, _ship_y ; $ship_y
14055  5D7E 2A            mov b, [d]
14056  5D7F 38 00 00      mov c, 0
14057  5D82 60            sub a, b
14058  5D83 27            mov b, a
14059  5D84 E4            pop a
14060  5D85             ; --- END TERMS
14061  5D85 FD AB         swp b
14062  5D87 D8            push b
14063  5D88 07 34 5C      call square00
14064  5D8B 51 02 00      add sp, 2
14065  5D8E             ; --- END FUNCTION CALL
14066  5D8E E7            pop d
14067  5D8F FD 43         mov [d], b
14068  5D91             ; j = j + square00(TO_FIXED00(k->x) - ship_x); 
14069  5D91 FA FF FF      lea d, [bp + -1] ; $j
14070  5D94 DA            push d
14071  5D95 FA FF FF      lea d, [bp + -1] ; $j
14072  5D98 2A            mov b, [d]
14073  5D99 38 00 00      mov c, 0
14074  5D9C             ; --- START TERMS
14075  5D9C D7            push a
14076  5D9D 11            mov a, b
14077  5D9E             ; --- START FUNCTION CALL
14078  5D9E             ; --- START FUNCTION CALL
14079  5D9E FA 05 00      lea d, [bp + 5] ; $k
14080  5DA1 FD 2A         mov d, [d]
14081  5DA3 58 01 00      add d, 1
14082  5DA6 32            mov bl, [d]
14083  5DA7 A7 00         mov bh, 0
14084  5DA9 38 00 00      mov c, 0
14085  5DAC AB            snex b
14086  5DAD FD AB         swp b
14087  5DAF D8            push b
14088  5DB0 07 8B 04      call TO_FIXED00
14089  5DB3 51 02 00      add sp, 2
14090  5DB6             ; --- END FUNCTION CALL
14091  5DB6             ; --- START TERMS
14092  5DB6 D7            push a
14093  5DB7 11            mov a, b
14094  5DB8 3B 81 6E      mov d, _ship_x ; $ship_x
14095  5DBB 2A            mov b, [d]
14096  5DBC 38 00 00      mov c, 0
14097  5DBF 60            sub a, b
14098  5DC0 27            mov b, a
14099  5DC1 E4            pop a
14100  5DC2             ; --- END TERMS
14101  5DC2 FD AB         swp b
14102  5DC4 D8            push b
14103  5DC5 07 34 5C      call square00
14104  5DC8 51 02 00      add sp, 2
14105  5DCB             ; --- END FUNCTION CALL
14106  5DCB 56            add b, a
14107  5DCC E4            pop a
14108  5DCD             ; --- END TERMS
14109  5DCD E7            pop d
14110  5DCE FD 43         mov [d], b
14111  5DD0             ; j = isqrt(j); 
14112  5DD0 FA FF FF      lea d, [bp + -1] ; $j
14113  5DD3 DA            push d
14114  5DD4             ; --- START FUNCTION CALL
14115  5DD4 FA FF FF      lea d, [bp + -1] ; $j
14116  5DD7 2A            mov b, [d]
14117  5DD8 38 00 00      mov c, 0
14118  5DDB FD AB         swp b
14119  5DDD D8            push b
14120  5DDE 07 45 5B      call isqrt
14121  5DE1 51 02 00      add sp, 2
14122  5DE4             ; --- END FUNCTION CALL
14123  5DE4 E7            pop d
14124  5DE5 FD 43         mov [d], b
14125  5DE7 F9            leave
14126  5DE8 09            ret
14127  5DE9             
14128  5DE9             cint100:
14129  5DE9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14130  5DEC             ; return (d + 50) / 100; 
14131  5DEC FA 05 00      lea d, [bp + 5] ; $d
14132  5DEF 2A            mov b, [d]
14133  5DF0 38 00 00      mov c, 0
14134  5DF3             ; --- START TERMS
14135  5DF3 D7            push a
14136  5DF4 11            mov a, b
14137  5DF5 FD 2E 32 00   mov32 cb, $00000032
14137  5DF9 00 00 
14138  5DFB 56            add b, a
14139  5DFC E4            pop a
14140  5DFD             ; --- END TERMS
14141  5DFD             ; --- START FACTORS
14142  5DFD D7            push a
14143  5DFE FD D8         push g
14144  5E00 11            mov a, b
14145  5E01 FD 7A         mov g, c
14146  5E03 FD 2E 64 00   mov32 cb, $00000064
14146  5E07 00 00 
14147  5E09 FD D8         push g ; save 'g' as the div instruction uses it
14148  5E0B AE            div a, b ; /, a: quotient, b: remainder
14149  5E0C FD F1         pop g
14150  5E0E FD 38         mov c, g
14151  5E10 27            mov b, a
14152  5E11 FD F1         pop g
14153  5E13 E4            pop a
14154  5E14             ; --- END FACTORS
14155  5E14 F9            leave
14156  5E15 09            ret
14157  5E16             
14158  5E16             showfile:
14159  5E16 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14160  5E19 F9            leave
14161  5E1A 09            ret
14162  5E1B             
14163  5E1B             getchar:
14164  5E1B F8 00 00      enter 0 ; (push bp; mov bp, sp)
14165  5E1E             ; char c; 
14166  5E1E 52 01 00      sub sp, 1
14167  5E21             ; --- BEGIN INLINE ASM SEGMENT
14168  5E21 19 01         mov al, 1
14169  5E23 05 03         syscall sys_io      ; receive in AH
14170  5E25 1A            mov al, ah
14171  5E26 FA 00 00      lea d, [bp + 0] ; $c
14172  5E29 3E            mov [d], al
14173  5E2A             ; --- END INLINE ASM SEGMENT
14174  5E2A             ; return c; 
14175  5E2A FA 00 00      lea d, [bp + 0] ; $c
14176  5E2D 32            mov bl, [d]
14177  5E2E A7 00         mov bh, 0
14178  5E30 38 00 00      mov c, 0
14179  5E33 F9            leave
14180  5E34 09            ret
14181  5E35             
14182  5E35             exit:
14183  5E35 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14184  5E38             ; --- BEGIN INLINE ASM SEGMENT
14185  5E38 FA 05 00      lea d, [bp + 5] ; $status
14186  5E3B 2A            mov b, [d] ; return value
14187  5E3C 05 0B         syscall sys_terminate_proc
14188  5E3E             ; --- END INLINE ASM SEGMENT
14189  5E3E F9            leave
14190  5E3F 09            ret
14191  5E40             
14192  5E40             tolower:
14193  5E40 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14194  5E43             ; if (ch >= 'A' && ch <= 'Z')  
14195  5E43             _if795_cond:
14196  5E43 FA 05 00      lea d, [bp + 5] ; $ch
14197  5E46 32            mov bl, [d]
14198  5E47 A7 00         mov bh, 0
14199  5E49 38 00 00      mov c, 0
14200  5E4C             ; --- START RELATIONAL
14201  5E4C D7            push a
14202  5E4D 11            mov a, b
14203  5E4E FD 2E 41 00   mov32 cb, $00000041
14203  5E52 00 00 
14204  5E54 B0            cmp a, b
14205  5E55 FD 80         sge ; >=
14206  5E57 E4            pop a
14207  5E58             ; --- END RELATIONAL
14208  5E58             ; --- START LOGICAL AND
14209  5E58 D7            push a
14210  5E59 11            mov a, b
14211  5E5A FA 05 00      lea d, [bp + 5] ; $ch
14212  5E5D 32            mov bl, [d]
14213  5E5E A7 00         mov bh, 0
14214  5E60 38 00 00      mov c, 0
14215  5E63             ; --- START RELATIONAL
14216  5E63 D7            push a
14217  5E64 11            mov a, b
14218  5E65 FD 2E 5A 00   mov32 cb, $0000005a
14218  5E69 00 00 
14219  5E6B B0            cmp a, b
14220  5E6C FD 74         sle ; <= (signed)
14221  5E6E E4            pop a
14222  5E6F             ; --- END RELATIONAL
14223  5E6F FD A7         sand a, b
14224  5E71 E4            pop a
14225  5E72             ; --- END LOGICAL AND
14226  5E72 C0 00 00      cmp b, 0
14227  5E75 C6 99 5E      je _if795_else
14228  5E78             _if795_TRUE:
14229  5E78             ; return ch - 'A' + 'a'; 
14230  5E78 FA 05 00      lea d, [bp + 5] ; $ch
14231  5E7B 32            mov bl, [d]
14232  5E7C A7 00         mov bh, 0
14233  5E7E 38 00 00      mov c, 0
14234  5E81             ; --- START TERMS
14235  5E81 D7            push a
14236  5E82 11            mov a, b
14237  5E83 FD 2E 41 00   mov32 cb, $00000041
14237  5E87 00 00 
14238  5E89 60            sub a, b
14239  5E8A 27            mov b, a
14240  5E8B 11            mov a, b
14241  5E8C FD 2E 61 00   mov32 cb, $00000061
14241  5E90 00 00 
14242  5E92 56            add b, a
14243  5E93 E4            pop a
14244  5E94             ; --- END TERMS
14245  5E94 F9            leave
14246  5E95 09            ret
14247  5E96 0A A4 5E      jmp _if795_exit
14248  5E99             _if795_else:
14249  5E99             ; return ch; 
14250  5E99 FA 05 00      lea d, [bp + 5] ; $ch
14251  5E9C 32            mov bl, [d]
14252  5E9D A7 00         mov bh, 0
14253  5E9F 38 00 00      mov c, 0
14254  5EA2 F9            leave
14255  5EA3 09            ret
14256  5EA4             _if795_exit:
14257  5EA4 F9            leave
14258  5EA5 09            ret
14259  5EA6             
14260  5EA6             rand:
14261  5EA6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14262  5EA9             ; int  sec; 
14263  5EA9 52 02 00      sub sp, 2
14264  5EAC             ; --- BEGIN INLINE ASM SEGMENT
14265  5EAC 19 00         mov al, 0
14266  5EAE 05 01         syscall sys_rtc					; get seconds
14267  5EB0 1A            mov al, ah
14268  5EB1 FA FF FF      lea d, [bp + -1] ; $sec
14269  5EB4 1E            mov al, [d]
14270  5EB5 22 00         mov ah, 0
14271  5EB7             ; --- END INLINE ASM SEGMENT
14272  5EB7             ; return sec; 
14273  5EB7 FA FF FF      lea d, [bp + -1] ; $sec
14274  5EBA 2A            mov b, [d]
14275  5EBB 38 00 00      mov c, 0
14276  5EBE F9            leave
14277  5EBF 09            ret
14278  5EC0             
14279  5EC0             strcpy:
14280  5EC0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14281  5EC3             ; char *psrc; 
14282  5EC3 52 02 00      sub sp, 2
14283  5EC6             ; char *pdest; 
14284  5EC6 52 02 00      sub sp, 2
14285  5EC9             ; psrc = src; 
14286  5EC9 FA FF FF      lea d, [bp + -1] ; $psrc
14287  5ECC DA            push d
14288  5ECD FA 07 00      lea d, [bp + 7] ; $src
14289  5ED0 2A            mov b, [d]
14290  5ED1 38 00 00      mov c, 0
14291  5ED4 E7            pop d
14292  5ED5 FD 43         mov [d], b
14293  5ED7             ; pdest = dest; 
14294  5ED7 FA FD FF      lea d, [bp + -3] ; $pdest
14295  5EDA DA            push d
14296  5EDB FA 05 00      lea d, [bp + 5] ; $dest
14297  5EDE 2A            mov b, [d]
14298  5EDF 38 00 00      mov c, 0
14299  5EE2 E7            pop d
14300  5EE3 FD 43         mov [d], b
14301  5EE5             ; while(*psrc) *pdest++ = *psrc++; 
14302  5EE5             _while796_cond:
14303  5EE5 FA FF FF      lea d, [bp + -1] ; $psrc
14304  5EE8 2A            mov b, [d]
14305  5EE9 38 00 00      mov c, 0
14306  5EEC 74            mov d, b
14307  5EED 32            mov bl, [d]
14308  5EEE A7 00         mov bh, 0
14309  5EF0 38 00 00      mov c, 0
14310  5EF3 C0 00 00      cmp b, 0
14311  5EF6 C6 27 5F      je _while796_exit
14312  5EF9             _while796_block:
14313  5EF9             ; *pdest++ = *psrc++; 
14314  5EF9 FA FD FF      lea d, [bp + -3] ; $pdest
14315  5EFC 2A            mov b, [d]
14316  5EFD 38 00 00      mov c, 0
14317  5F00 FD 77         inc b
14318  5F02 FA FD FF      lea d, [bp + -3] ; $pdest
14319  5F05 FD 43         mov [d], b
14320  5F07 FD 7D         dec b
14321  5F09 D8            push b
14322  5F0A FA FF FF      lea d, [bp + -1] ; $psrc
14323  5F0D 2A            mov b, [d]
14324  5F0E 38 00 00      mov c, 0
14325  5F11 FD 77         inc b
14326  5F13 FA FF FF      lea d, [bp + -1] ; $psrc
14327  5F16 FD 43         mov [d], b
14328  5F18 FD 7D         dec b
14329  5F1A 74            mov d, b
14330  5F1B 32            mov bl, [d]
14331  5F1C A7 00         mov bh, 0
14332  5F1E 38 00 00      mov c, 0
14333  5F21 E7            pop d
14334  5F22 FD 3E         mov [d], bl
14335  5F24 0A E5 5E      jmp _while796_cond
14336  5F27             _while796_exit:
14337  5F27             ; *pdest = '\0'; 
14338  5F27 FA FD FF      lea d, [bp + -3] ; $pdest
14339  5F2A 2A            mov b, [d]
14340  5F2B 38 00 00      mov c, 0
14341  5F2E D8            push b
14342  5F2F FD 2E 00 00   mov32 cb, $00000000
14342  5F33 00 00 
14343  5F35 E7            pop d
14344  5F36 FD 3E         mov [d], bl
14345  5F38 F9            leave
14346  5F39 09            ret
14347  5F3A             
14348  5F3A             strcat:
14349  5F3A F8 00 00      enter 0 ; (push bp; mov bp, sp)
14350  5F3D             ; int dest_len; 
14351  5F3D 52 02 00      sub sp, 2
14352  5F40             ; int i; 
14353  5F40 52 02 00      sub sp, 2
14354  5F43             ; dest_len = strlen(dest); 
14355  5F43 FA FF FF      lea d, [bp + -1] ; $dest_len
14356  5F46 DA            push d
14357  5F47             ; --- START FUNCTION CALL
14358  5F47 FA 05 00      lea d, [bp + 5] ; $dest
14359  5F4A 2A            mov b, [d]
14360  5F4B 38 00 00      mov c, 0
14361  5F4E FD AB         swp b
14362  5F50 D8            push b
14363  5F51 07 1D 60      call strlen
14364  5F54 51 02 00      add sp, 2
14365  5F57             ; --- END FUNCTION CALL
14366  5F57 E7            pop d
14367  5F58 FD 43         mov [d], b
14368  5F5A             ; for (i = 0; src[i] != 0; i=i+1) { 
14369  5F5A             _for797_init:
14370  5F5A FA FD FF      lea d, [bp + -3] ; $i
14371  5F5D DA            push d
14372  5F5E FD 2E 00 00   mov32 cb, $00000000
14372  5F62 00 00 
14373  5F64 E7            pop d
14374  5F65 FD 43         mov [d], b
14375  5F67             _for797_cond:
14376  5F67 FA 07 00      lea d, [bp + 7] ; $src
14377  5F6A FD 2A         mov d, [d]
14378  5F6C D7            push a
14379  5F6D DA            push d
14380  5F6E FA FD FF      lea d, [bp + -3] ; $i
14381  5F71 2A            mov b, [d]
14382  5F72 38 00 00      mov c, 0
14383  5F75 E7            pop d
14384  5F76 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
14385  5F7A E4            pop a
14386  5F7B 32            mov bl, [d]
14387  5F7C A7 00         mov bh, 0
14388  5F7E 38 00 00      mov c, 0
14389  5F81             ; --- START RELATIONAL
14390  5F81 D7            push a
14391  5F82 11            mov a, b
14392  5F83 FD 2E 00 00   mov32 cb, $00000000
14392  5F87 00 00 
14393  5F89 B0            cmp a, b
14394  5F8A FD 72         sneq ; !=
14395  5F8C E4            pop a
14396  5F8D             ; --- END RELATIONAL
14397  5F8D C0 00 00      cmp b, 0
14398  5F90 C6 EB 5F      je _for797_exit
14399  5F93             _for797_block:
14400  5F93             ; dest[dest_len + i] = src[i]; 
14401  5F93 FA 05 00      lea d, [bp + 5] ; $dest
14402  5F96 FD 2A         mov d, [d]
14403  5F98 D7            push a
14404  5F99 DA            push d
14405  5F9A FA FF FF      lea d, [bp + -1] ; $dest_len
14406  5F9D 2A            mov b, [d]
14407  5F9E 38 00 00      mov c, 0
14408  5FA1             ; --- START TERMS
14409  5FA1 D7            push a
14410  5FA2 11            mov a, b
14411  5FA3 FA FD FF      lea d, [bp + -3] ; $i
14412  5FA6 2A            mov b, [d]
14413  5FA7 38 00 00      mov c, 0
14414  5FAA 56            add b, a
14415  5FAB E4            pop a
14416  5FAC             ; --- END TERMS
14417  5FAC E7            pop d
14418  5FAD FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
14419  5FB1 E4            pop a
14420  5FB2 DA            push d
14421  5FB3 FA 07 00      lea d, [bp + 7] ; $src
14422  5FB6 FD 2A         mov d, [d]
14423  5FB8 D7            push a
14424  5FB9 DA            push d
14425  5FBA FA FD FF      lea d, [bp + -3] ; $i
14426  5FBD 2A            mov b, [d]
14427  5FBE 38 00 00      mov c, 0
14428  5FC1 E7            pop d
14429  5FC2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
14430  5FC6 E4            pop a
14431  5FC7 32            mov bl, [d]
14432  5FC8 A7 00         mov bh, 0
14433  5FCA 38 00 00      mov c, 0
14434  5FCD E7            pop d
14435  5FCE FD 3E         mov [d], bl
14436  5FD0             _for797_update:
14437  5FD0 FA FD FF      lea d, [bp + -3] ; $i
14438  5FD3 DA            push d
14439  5FD4 FA FD FF      lea d, [bp + -3] ; $i
14440  5FD7 2A            mov b, [d]
14441  5FD8 38 00 00      mov c, 0
14442  5FDB             ; --- START TERMS
14443  5FDB D7            push a
14444  5FDC 11            mov a, b
14445  5FDD FD 2E 01 00   mov32 cb, $00000001
14445  5FE1 00 00 
14446  5FE3 56            add b, a
14447  5FE4 E4            pop a
14448  5FE5             ; --- END TERMS
14449  5FE5 E7            pop d
14450  5FE6 FD 43         mov [d], b
14451  5FE8 0A 67 5F      jmp _for797_cond
14452  5FEB             _for797_exit:
14453  5FEB             ; dest[dest_len + i] = 0; 
14454  5FEB FA 05 00      lea d, [bp + 5] ; $dest
14455  5FEE FD 2A         mov d, [d]
14456  5FF0 D7            push a
14457  5FF1 DA            push d
14458  5FF2 FA FF FF      lea d, [bp + -1] ; $dest_len
14459  5FF5 2A            mov b, [d]
14460  5FF6 38 00 00      mov c, 0
14461  5FF9             ; --- START TERMS
14462  5FF9 D7            push a
14463  5FFA 11            mov a, b
14464  5FFB FA FD FF      lea d, [bp + -3] ; $i
14465  5FFE 2A            mov b, [d]
14466  5FFF 38 00 00      mov c, 0
14467  6002 56            add b, a
14468  6003 E4            pop a
14469  6004             ; --- END TERMS
14470  6004 E7            pop d
14471  6005 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
14472  6009 E4            pop a
14473  600A DA            push d
14474  600B FD 2E 00 00   mov32 cb, $00000000
14474  600F 00 00 
14475  6011 E7            pop d
14476  6012 FD 3E         mov [d], bl
14477  6014             ; return dest; 
14478  6014 FA 05 00      lea d, [bp + 5] ; $dest
14479  6017 2A            mov b, [d]
14480  6018 38 00 00      mov c, 0
14481  601B F9            leave
14482  601C 09            ret
14483  601D             
14484  601D             strlen:
14485  601D F8 00 00      enter 0 ; (push bp; mov bp, sp)
14486  6020             ; int length; 
14487  6020 52 02 00      sub sp, 2
14488  6023             ; length = 0; 
14489  6023 FA FF FF      lea d, [bp + -1] ; $length
14490  6026 DA            push d
14491  6027 FD 2E 00 00   mov32 cb, $00000000
14491  602B 00 00 
14492  602D E7            pop d
14493  602E FD 43         mov [d], b
14494  6030             ; while (str[length] != 0) { 
14495  6030             _while798_cond:
14496  6030 FA 05 00      lea d, [bp + 5] ; $str
14497  6033 FD 2A         mov d, [d]
14498  6035 D7            push a
14499  6036 DA            push d
14500  6037 FA FF FF      lea d, [bp + -1] ; $length
14501  603A 2A            mov b, [d]
14502  603B 38 00 00      mov c, 0
14503  603E E7            pop d
14504  603F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
14505  6043 E4            pop a
14506  6044 32            mov bl, [d]
14507  6045 A7 00         mov bh, 0
14508  6047 38 00 00      mov c, 0
14509  604A             ; --- START RELATIONAL
14510  604A D7            push a
14511  604B 11            mov a, b
14512  604C FD 2E 00 00   mov32 cb, $00000000
14512  6050 00 00 
14513  6052 B0            cmp a, b
14514  6053 FD 72         sneq ; !=
14515  6055 E4            pop a
14516  6056             ; --- END RELATIONAL
14517  6056 C0 00 00      cmp b, 0
14518  6059 C6 6F 60      je _while798_exit
14519  605C             _while798_block:
14520  605C             ; length++; 
14521  605C FA FF FF      lea d, [bp + -1] ; $length
14522  605F 2A            mov b, [d]
14523  6060 38 00 00      mov c, 0
14524  6063 11            mov a, b
14525  6064 FD 77         inc b
14526  6066 FA FF FF      lea d, [bp + -1] ; $length
14527  6069 FD 43         mov [d], b
14528  606B 27            mov b, a
14529  606C 0A 30 60      jmp _while798_cond
14530  606F             _while798_exit:
14531  606F             ; return length; 
14532  606F FA FF FF      lea d, [bp + -1] ; $length
14533  6072 2A            mov b, [d]
14534  6073 38 00 00      mov c, 0
14535  6076 F9            leave
14536  6077 09            ret
14537  6078             
14538  6078             printf:
14539  6078 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14540  607B             ; char *p, *format_p; 
14541  607B 52 02 00      sub sp, 2
14542  607E 52 02 00      sub sp, 2
14543  6081             ; format_p = format; 
14544  6081 FA FD FF      lea d, [bp + -3] ; $format_p
14545  6084 DA            push d
14546  6085 FA 05 00      lea d, [bp + 5] ; $format
14547  6088 2A            mov b, [d]
14548  6089 38 00 00      mov c, 0
14549  608C E7            pop d
14550  608D FD 43         mov [d], b
14551  608F             ; p = &format + 2; 
14552  608F FA FF FF      lea d, [bp + -1] ; $p
14553  6092 DA            push d
14554  6093 FA 05 00      lea d, [bp + 5] ; $format
14555  6096 2D            mov b, d
14556  6097             ; --- START TERMS
14557  6097 D7            push a
14558  6098 11            mov a, b
14559  6099 FD 2E 02 00   mov32 cb, $00000002
14559  609D 00 00 
14560  609F 56            add b, a
14561  60A0 E4            pop a
14562  60A1             ; --- END TERMS
14563  60A1 E7            pop d
14564  60A2 FD 43         mov [d], b
14565  60A4             ; for(;;){ 
14566  60A4             _for799_init:
14567  60A4             _for799_cond:
14568  60A4             _for799_block:
14569  60A4             ; if(!*format_p) break; 
14570  60A4             _if800_cond:
14571  60A4 FA FD FF      lea d, [bp + -3] ; $format_p
14572  60A7 2A            mov b, [d]
14573  60A8 38 00 00      mov c, 0
14574  60AB 74            mov d, b
14575  60AC 32            mov bl, [d]
14576  60AD A7 00         mov bh, 0
14577  60AF 38 00 00      mov c, 0
14578  60B2 C0 00 00      cmp b, 0
14579  60B5 FD 71         seq ; !
14580  60B7 C0 00 00      cmp b, 0
14581  60BA C6 C3 60      je _if800_else
14582  60BD             _if800_TRUE:
14583  60BD             ; break; 
14584  60BD 0A 73 63      jmp _for799_exit ; for break
14585  60C0 0A 70 63      jmp _if800_exit
14586  60C3             _if800_else:
14587  60C3             ; if(*format_p == '%'){ 
14588  60C3             _if801_cond:
14589  60C3 FA FD FF      lea d, [bp + -3] ; $format_p
14590  60C6 2A            mov b, [d]
14591  60C7 38 00 00      mov c, 0
14592  60CA 74            mov d, b
14593  60CB 32            mov bl, [d]
14594  60CC A7 00         mov bh, 0
14595  60CE 38 00 00      mov c, 0
14596  60D1             ; --- START RELATIONAL
14597  60D1 D7            push a
14598  60D2 11            mov a, b
14599  60D3 FD 2E 25 00   mov32 cb, $00000025
14599  60D7 00 00 
14600  60D9 B0            cmp a, b
14601  60DA FD 71         seq ; ==
14602  60DC E4            pop a
14603  60DD             ; --- END RELATIONAL
14604  60DD C0 00 00      cmp b, 0
14605  60E0 C6 4B 63      je _if801_else
14606  60E3             _if801_TRUE:
14607  60E3             ; format_p++; 
14608  60E3 FA FD FF      lea d, [bp + -3] ; $format_p
14609  60E6 2A            mov b, [d]
14610  60E7 38 00 00      mov c, 0
14611  60EA FD 77         inc b
14612  60EC FA FD FF      lea d, [bp + -3] ; $format_p
14613  60EF FD 43         mov [d], b
14614  60F1 FD 7D         dec b
14615  60F3             ; switch(*format_p){ 
14616  60F3             _switch802_expr:
14617  60F3 FA FD FF      lea d, [bp + -3] ; $format_p
14618  60F6 2A            mov b, [d]
14619  60F7 38 00 00      mov c, 0
14620  60FA 74            mov d, b
14621  60FB 32            mov bl, [d]
14622  60FC A7 00         mov bh, 0
14623  60FE 38 00 00      mov c, 0
14624  6101             _switch802_comparisons:
14625  6101 C1 6C         cmp bl, $6c
14626  6103 C6 2F 61      je _switch802_case0
14627  6106 C1 4C         cmp bl, $4c
14628  6108 C6 2F 61      je _switch802_case1
14629  610B C1 64         cmp bl, $64
14630  610D C6 3F 62      je _switch802_case2
14631  6110 C1 69         cmp bl, $69
14632  6112 C6 3F 62      je _switch802_case3
14633  6115 C1 75         cmp bl, $75
14634  6117 C6 6F 62      je _switch802_case4
14635  611A C1 78         cmp bl, $78
14636  611C C6 9F 62      je _switch802_case5
14637  611F C1 63         cmp bl, $63
14638  6121 C6 CF 62      je _switch802_case6
14639  6124 C1 73         cmp bl, $73
14640  6126 C6 FF 62      je _switch802_case7
14641  6129 0A 2C 63      jmp _switch802_default
14642  612C 0A 38 63      jmp _switch802_exit
14643  612F             _switch802_case0:
14644  612F             _switch802_case1:
14645  612F             ; format_p++; 
14646  612F FA FD FF      lea d, [bp + -3] ; $format_p
14647  6132 2A            mov b, [d]
14648  6133 38 00 00      mov c, 0
14649  6136 FD 77         inc b
14650  6138 FA FD FF      lea d, [bp + -3] ; $format_p
14651  613B FD 43         mov [d], b
14652  613D FD 7D         dec b
14653  613F             ; if(*format_p == 'd' || *format_p == 'i') 
14654  613F             _if803_cond:
14655  613F FA FD FF      lea d, [bp + -3] ; $format_p
14656  6142 2A            mov b, [d]
14657  6143 38 00 00      mov c, 0
14658  6146 74            mov d, b
14659  6147 32            mov bl, [d]
14660  6148 A7 00         mov bh, 0
14661  614A 38 00 00      mov c, 0
14662  614D             ; --- START RELATIONAL
14663  614D D7            push a
14664  614E 11            mov a, b
14665  614F FD 2E 64 00   mov32 cb, $00000064
14665  6153 00 00 
14666  6155 B0            cmp a, b
14667  6156 FD 71         seq ; ==
14668  6158 E4            pop a
14669  6159             ; --- END RELATIONAL
14670  6159             ; --- START LOGICAL OR
14671  6159 D7            push a
14672  615A 11            mov a, b
14673  615B FA FD FF      lea d, [bp + -3] ; $format_p
14674  615E 2A            mov b, [d]
14675  615F 38 00 00      mov c, 0
14676  6162 74            mov d, b
14677  6163 32            mov bl, [d]
14678  6164 A7 00         mov bh, 0
14679  6166 38 00 00      mov c, 0
14680  6169             ; --- START RELATIONAL
14681  6169 D7            push a
14682  616A 11            mov a, b
14683  616B FD 2E 69 00   mov32 cb, $00000069
14683  616F 00 00 
14684  6171 B0            cmp a, b
14685  6172 FD 71         seq ; ==
14686  6174 E4            pop a
14687  6175             ; --- END RELATIONAL
14688  6175 FD A8         sor a, b ; ||
14689  6177 E4            pop a
14690  6178             ; --- END LOGICAL OR
14691  6178 C0 00 00      cmp b, 0
14692  617B C6 9C 61      je _if803_else
14693  617E             _if803_TRUE:
14694  617E             ; print_signed_long(*(long *)p); 
14695  617E             ; --- START FUNCTION CALL
14696  617E FA FF FF      lea d, [bp + -1] ; $p
14697  6181 2A            mov b, [d]
14698  6182 38 00 00      mov c, 0
14699  6185 74            mov d, b
14700  6186 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14701  6189 FD 39         mov c, b ; And place it into C
14702  618B 2A            mov b, [d] ; Lower Word in B
14703  618C 12            mov a, c
14704  618D FD AA         swp a
14705  618F D7            push a
14706  6190 FD AB         swp b
14707  6192 D8            push b
14708  6193 07 75 63      call print_signed_long
14709  6196 51 04 00      add sp, 4
14710  6199             ; --- END FUNCTION CALL
14711  6199 0A 24 62      jmp _if803_exit
14712  619C             _if803_else:
14713  619C             ; if(*format_p == 'u') 
14714  619C             _if804_cond:
14715  619C FA FD FF      lea d, [bp + -3] ; $format_p
14716  619F 2A            mov b, [d]
14717  61A0 38 00 00      mov c, 0
14718  61A3 74            mov d, b
14719  61A4 32            mov bl, [d]
14720  61A5 A7 00         mov bh, 0
14721  61A7 38 00 00      mov c, 0
14722  61AA             ; --- START RELATIONAL
14723  61AA D7            push a
14724  61AB 11            mov a, b
14725  61AC FD 2E 75 00   mov32 cb, $00000075
14725  61B0 00 00 
14726  61B2 B0            cmp a, b
14727  61B3 FD 71         seq ; ==
14728  61B5 E4            pop a
14729  61B6             ; --- END RELATIONAL
14730  61B6 C0 00 00      cmp b, 0
14731  61B9 C6 DA 61      je _if804_else
14732  61BC             _if804_TRUE:
14733  61BC             ; print_unsigned_long(*(unsigned long *)p); 
14734  61BC             ; --- START FUNCTION CALL
14735  61BC FA FF FF      lea d, [bp + -1] ; $p
14736  61BF 2A            mov b, [d]
14737  61C0 38 00 00      mov c, 0
14738  61C3 74            mov d, b
14739  61C4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14740  61C7 FD 39         mov c, b ; And place it into C
14741  61C9 2A            mov b, [d] ; Lower Word in B
14742  61CA 12            mov a, c
14743  61CB FD AA         swp a
14744  61CD D7            push a
14745  61CE FD AB         swp b
14746  61D0 D8            push b
14747  61D1 07 08 65      call print_unsigned_long
14748  61D4 51 04 00      add sp, 4
14749  61D7             ; --- END FUNCTION CALL
14750  61D7 0A 24 62      jmp _if804_exit
14751  61DA             _if804_else:
14752  61DA             ; if(*format_p == 'x') 
14753  61DA             _if805_cond:
14754  61DA FA FD FF      lea d, [bp + -3] ; $format_p
14755  61DD 2A            mov b, [d]
14756  61DE 38 00 00      mov c, 0
14757  61E1 74            mov d, b
14758  61E2 32            mov bl, [d]
14759  61E3 A7 00         mov bh, 0
14760  61E5 38 00 00      mov c, 0
14761  61E8             ; --- START RELATIONAL
14762  61E8 D7            push a
14763  61E9 11            mov a, b
14764  61EA FD 2E 78 00   mov32 cb, $00000078
14764  61EE 00 00 
14765  61F0 B0            cmp a, b
14766  61F1 FD 71         seq ; ==
14767  61F3 E4            pop a
14768  61F4             ; --- END RELATIONAL
14769  61F4 C0 00 00      cmp b, 0
14770  61F7 C6 18 62      je _if805_else
14771  61FA             _if805_TRUE:
14772  61FA             ; printx32(*(long int *)p); 
14773  61FA             ; --- START FUNCTION CALL
14774  61FA FA FF FF      lea d, [bp + -1] ; $p
14775  61FD 2A            mov b, [d]
14776  61FE 38 00 00      mov c, 0
14777  6201 74            mov d, b
14778  6202 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14779  6205 FD 39         mov c, b ; And place it into C
14780  6207 2A            mov b, [d] ; Lower Word in B
14781  6208 12            mov a, c
14782  6209 FD AA         swp a
14783  620B D7            push a
14784  620C FD AB         swp b
14785  620E D8            push b
14786  620F 07 3C 66      call printx32
14787  6212 51 04 00      add sp, 4
14788  6215             ; --- END FUNCTION CALL
14789  6215 0A 24 62      jmp _if805_exit
14790  6218             _if805_else:
14791  6218             ; err("Unexpected format in printf."); 
14792  6218             ; --- START FUNCTION CALL
14793  6218 26 4B 83      mov b, _s169 ; "Unexpected format in printf."
14794  621B FD AB         swp b
14795  621D D8            push b
14796  621E 07 9C 66      call err
14797  6221 51 02 00      add sp, 2
14798  6224             ; --- END FUNCTION CALL
14799  6224             _if805_exit:
14800  6224             _if804_exit:
14801  6224             _if803_exit:
14802  6224             ; p = p + 4; 
14803  6224 FA FF FF      lea d, [bp + -1] ; $p
14804  6227 DA            push d
14805  6228 FA FF FF      lea d, [bp + -1] ; $p
14806  622B 2A            mov b, [d]
14807  622C 38 00 00      mov c, 0
14808  622F             ; --- START TERMS
14809  622F D7            push a
14810  6230 11            mov a, b
14811  6231 FD 2E 04 00   mov32 cb, $00000004
14811  6235 00 00 
14812  6237 56            add b, a
14813  6238 E4            pop a
14814  6239             ; --- END TERMS
14815  6239 E7            pop d
14816  623A FD 43         mov [d], b
14817  623C             ; break; 
14818  623C 0A 38 63      jmp _switch802_exit ; case break
14819  623F             _switch802_case2:
14820  623F             _switch802_case3:
14821  623F             ; print_signed(*(int*)p); 
14822  623F             ; --- START FUNCTION CALL
14823  623F FA FF FF      lea d, [bp + -1] ; $p
14824  6242 2A            mov b, [d]
14825  6243 38 00 00      mov c, 0
14826  6246 74            mov d, b
14827  6247 2A            mov b, [d]
14828  6248 38 00 00      mov c, 0
14829  624B FD AB         swp b
14830  624D D8            push b
14831  624E 07 CA 66      call print_signed
14832  6251 51 02 00      add sp, 2
14833  6254             ; --- END FUNCTION CALL
14834  6254             ; p = p + 2; 
14835  6254 FA FF FF      lea d, [bp + -1] ; $p
14836  6257 DA            push d
14837  6258 FA FF FF      lea d, [bp + -1] ; $p
14838  625B 2A            mov b, [d]
14839  625C 38 00 00      mov c, 0
14840  625F             ; --- START TERMS
14841  625F D7            push a
14842  6260 11            mov a, b
14843  6261 FD 2E 02 00   mov32 cb, $00000002
14843  6265 00 00 
14844  6267 56            add b, a
14845  6268 E4            pop a
14846  6269             ; --- END TERMS
14847  6269 E7            pop d
14848  626A FD 43         mov [d], b
14849  626C             ; break; 
14850  626C 0A 38 63      jmp _switch802_exit ; case break
14851  626F             _switch802_case4:
14852  626F             ; print_unsigned(*(unsigned int*)p); 
14853  626F             ; --- START FUNCTION CALL
14854  626F FA FF FF      lea d, [bp + -1] ; $p
14855  6272 2A            mov b, [d]
14856  6273 38 00 00      mov c, 0
14857  6276 74            mov d, b
14858  6277 2A            mov b, [d]
14859  6278 38 00 00      mov c, 0
14860  627B FD AB         swp b
14861  627D D8            push b
14862  627E 07 1B 68      call print_unsigned
14863  6281 51 02 00      add sp, 2
14864  6284             ; --- END FUNCTION CALL
14865  6284             ; p = p + 2; 
14866  6284 FA FF FF      lea d, [bp + -1] ; $p
14867  6287 DA            push d
14868  6288 FA FF FF      lea d, [bp + -1] ; $p
14869  628B 2A            mov b, [d]
14870  628C 38 00 00      mov c, 0
14871  628F             ; --- START TERMS
14872  628F D7            push a
14873  6290 11            mov a, b
14874  6291 FD 2E 02 00   mov32 cb, $00000002
14874  6295 00 00 
14875  6297 56            add b, a
14876  6298 E4            pop a
14877  6299             ; --- END TERMS
14878  6299 E7            pop d
14879  629A FD 43         mov [d], b
14880  629C             ; break; 
14881  629C 0A 38 63      jmp _switch802_exit ; case break
14882  629F             _switch802_case5:
14883  629F             ; printx16(*(int*)p); 
14884  629F             ; --- START FUNCTION CALL
14885  629F FA FF FF      lea d, [bp + -1] ; $p
14886  62A2 2A            mov b, [d]
14887  62A3 38 00 00      mov c, 0
14888  62A6 74            mov d, b
14889  62A7 2A            mov b, [d]
14890  62A8 38 00 00      mov c, 0
14891  62AB FD AB         swp b
14892  62AD D8            push b
14893  62AE 07 33 69      call printx16
14894  62B1 51 02 00      add sp, 2
14895  62B4             ; --- END FUNCTION CALL
14896  62B4             ; p = p + 2; 
14897  62B4 FA FF FF      lea d, [bp + -1] ; $p
14898  62B7 DA            push d
14899  62B8 FA FF FF      lea d, [bp + -1] ; $p
14900  62BB 2A            mov b, [d]
14901  62BC 38 00 00      mov c, 0
14902  62BF             ; --- START TERMS
14903  62BF D7            push a
14904  62C0 11            mov a, b
14905  62C1 FD 2E 02 00   mov32 cb, $00000002
14905  62C5 00 00 
14906  62C7 56            add b, a
14907  62C8 E4            pop a
14908  62C9             ; --- END TERMS
14909  62C9 E7            pop d
14910  62CA FD 43         mov [d], b
14911  62CC             ; break; 
14912  62CC 0A 38 63      jmp _switch802_exit ; case break
14913  62CF             _switch802_case6:
14914  62CF             ; putchar(*(char*)p); 
14915  62CF             ; --- START FUNCTION CALL
14916  62CF FA FF FF      lea d, [bp + -1] ; $p
14917  62D2 2A            mov b, [d]
14918  62D3 38 00 00      mov c, 0
14919  62D6 74            mov d, b
14920  62D7 32            mov bl, [d]
14921  62D8 A7 00         mov bh, 0
14922  62DA 38 00 00      mov c, 0
14923  62DD DD            push bl
14924  62DE 07 FA 64      call putchar
14925  62E1 51 01 00      add sp, 1
14926  62E4             ; --- END FUNCTION CALL
14927  62E4             ; p = p + 2; 
14928  62E4 FA FF FF      lea d, [bp + -1] ; $p
14929  62E7 DA            push d
14930  62E8 FA FF FF      lea d, [bp + -1] ; $p
14931  62EB 2A            mov b, [d]
14932  62EC 38 00 00      mov c, 0
14933  62EF             ; --- START TERMS
14934  62EF D7            push a
14935  62F0 11            mov a, b
14936  62F1 FD 2E 02 00   mov32 cb, $00000002
14936  62F5 00 00 
14937  62F7 56            add b, a
14938  62F8 E4            pop a
14939  62F9             ; --- END TERMS
14940  62F9 E7            pop d
14941  62FA FD 43         mov [d], b
14942  62FC             ; break; 
14943  62FC 0A 38 63      jmp _switch802_exit ; case break
14944  62FF             _switch802_case7:
14945  62FF             ; print(*(char**)p); 
14946  62FF             ; --- START FUNCTION CALL
14947  62FF FA FF FF      lea d, [bp + -1] ; $p
14948  6302 2A            mov b, [d]
14949  6303 38 00 00      mov c, 0
14950  6306 74            mov d, b
14951  6307 2A            mov b, [d]
14952  6308 FD AB         swp b
14953  630A D8            push b
14954  630B 07 B1 66      call print
14955  630E 51 02 00      add sp, 2
14956  6311             ; --- END FUNCTION CALL
14957  6311             ; p = p + 2; 
14958  6311 FA FF FF      lea d, [bp + -1] ; $p
14959  6314 DA            push d
14960  6315 FA FF FF      lea d, [bp + -1] ; $p
14961  6318 2A            mov b, [d]
14962  6319 38 00 00      mov c, 0
14963  631C             ; --- START TERMS
14964  631C D7            push a
14965  631D 11            mov a, b
14966  631E FD 2E 02 00   mov32 cb, $00000002
14966  6322 00 00 
14967  6324 56            add b, a
14968  6325 E4            pop a
14969  6326             ; --- END TERMS
14970  6326 E7            pop d
14971  6327 FD 43         mov [d], b
14972  6329             ; break; 
14973  6329 0A 38 63      jmp _switch802_exit ; case break
14974  632C             _switch802_default:
14975  632C             ; print("Error: Unknown argument type.\n"); 
14976  632C             ; --- START FUNCTION CALL
14977  632C 26 68 83      mov b, _s170 ; "Error: Unknown argument type.\n"
14978  632F FD AB         swp b
14979  6331 D8            push b
14980  6332 07 B1 66      call print
14981  6335 51 02 00      add sp, 2
14982  6338             ; --- END FUNCTION CALL
14983  6338             _switch802_exit:
14984  6338             ; format_p++; 
14985  6338 FA FD FF      lea d, [bp + -3] ; $format_p
14986  633B 2A            mov b, [d]
14987  633C 38 00 00      mov c, 0
14988  633F FD 77         inc b
14989  6341 FA FD FF      lea d, [bp + -3] ; $format_p
14990  6344 FD 43         mov [d], b
14991  6346 FD 7D         dec b
14992  6348 0A 70 63      jmp _if801_exit
14993  634B             _if801_else:
14994  634B             ; putchar(*format_p); 
14995  634B             ; --- START FUNCTION CALL
14996  634B FA FD FF      lea d, [bp + -3] ; $format_p
14997  634E 2A            mov b, [d]
14998  634F 38 00 00      mov c, 0
14999  6352 74            mov d, b
15000  6353 32            mov bl, [d]
15001  6354 A7 00         mov bh, 0
15002  6356 38 00 00      mov c, 0
15003  6359 DD            push bl
15004  635A 07 FA 64      call putchar
15005  635D 51 01 00      add sp, 1
15006  6360             ; --- END FUNCTION CALL
15007  6360             ; format_p++; 
15008  6360 FA FD FF      lea d, [bp + -3] ; $format_p
15009  6363 2A            mov b, [d]
15010  6364 38 00 00      mov c, 0
15011  6367 FD 77         inc b
15012  6369 FA FD FF      lea d, [bp + -3] ; $format_p
15013  636C FD 43         mov [d], b
15014  636E FD 7D         dec b
15015  6370             _if801_exit:
15016  6370             _if800_exit:
15017  6370             _for799_update:
15018  6370 0A A4 60      jmp _for799_cond
15019  6373             _for799_exit:
15020  6373 F9            leave
15021  6374 09            ret
15022  6375             
15023  6375             print_signed_long:
15024  6375 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15025  6378             ; char digits[10]; 
15026  6378 52 0A 00      sub sp, 10
15027  637B             ; int i = 0; 
15028  637B 52 02 00      sub sp, 2
15029  637E             ; --- START LOCAL VAR INITIALIZATION
15030  637E FA F5 FF      lea d, [bp + -11] ; $i
15031  6381 DA            push d
15032  6382 FD 2E 00 00   mov32 cb, $00000000
15032  6386 00 00 
15033  6388 E7            pop d
15034  6389 FD 43         mov [d], b
15035  638B             ; --- END LOCAL VAR INITIALIZATION
15036  638B             ; if (num < 0) { 
15037  638B             _if806_cond:
15038  638B FA 05 00      lea d, [bp + 5] ; $num
15039  638E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15040  6391 FD 39         mov c, b ; And place it into C
15041  6393 2A            mov b, [d] ; Lower Word in B
15042  6394             ; --- START RELATIONAL
15043  6394 D7            push a
15044  6395 FD D8         push g
15045  6397 11            mov a, b
15046  6398 FD 7A         mov g, c
15047  639A FD 2E 00 00   mov32 cb, $00000000
15047  639E 00 00 
15048  63A0 FD AF         cmp32 ga, cb
15049  63A2 FD 73         slt ; <
15050  63A4 FD F1         pop g
15051  63A6 E4            pop a
15052  63A7             ; --- END RELATIONAL
15053  63A7 C0 00 00      cmp b, 0
15054  63AA C6 DC 63      je _if806_else
15055  63AD             _if806_TRUE:
15056  63AD             ; putchar('-'); 
15057  63AD             ; --- START FUNCTION CALL
15058  63AD FD 2E 2D 00   mov32 cb, $0000002d
15058  63B1 00 00 
15059  63B3 DD            push bl
15060  63B4 07 FA 64      call putchar
15061  63B7 51 01 00      add sp, 1
15062  63BA             ; --- END FUNCTION CALL
15063  63BA             ; num = -num; 
15064  63BA FA 05 00      lea d, [bp + 5] ; $num
15065  63BD DA            push d
15066  63BE FA 05 00      lea d, [bp + 5] ; $num
15067  63C1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15068  63C4 FD 39         mov c, b ; And place it into C
15069  63C6 2A            mov b, [d] ; Lower Word in B
15070  63C7 12            mov a, c
15071  63C8 95            not a
15072  63C9 97            not b
15073  63CA 55 01 00      add b, 1
15074  63CD 5B 00 00      adc a, 0
15075  63D0 39            mov c, a
15076  63D1 E7            pop d
15077  63D2 FD 43         mov [d], b
15078  63D4 28            mov b, c
15079  63D5 FD 44 02 00   mov [d + 2], b
15080  63D9 0A 10 64      jmp _if806_exit
15081  63DC             _if806_else:
15082  63DC             ; if (num == 0) { 
15083  63DC             _if807_cond:
15084  63DC FA 05 00      lea d, [bp + 5] ; $num
15085  63DF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15086  63E2 FD 39         mov c, b ; And place it into C
15087  63E4 2A            mov b, [d] ; Lower Word in B
15088  63E5             ; --- START RELATIONAL
15089  63E5 D7            push a
15090  63E6 FD D8         push g
15091  63E8 11            mov a, b
15092  63E9 FD 7A         mov g, c
15093  63EB FD 2E 00 00   mov32 cb, $00000000
15093  63EF 00 00 
15094  63F1 FD AF         cmp32 ga, cb
15095  63F3 FD 71         seq ; ==
15096  63F5 FD F1         pop g
15097  63F7 E4            pop a
15098  63F8             ; --- END RELATIONAL
15099  63F8 C0 00 00      cmp b, 0
15100  63FB C6 10 64      je _if807_exit
15101  63FE             _if807_TRUE:
15102  63FE             ; putchar('0'); 
15103  63FE             ; --- START FUNCTION CALL
15104  63FE FD 2E 30 00   mov32 cb, $00000030
15104  6402 00 00 
15105  6404 DD            push bl
15106  6405 07 FA 64      call putchar
15107  6408 51 01 00      add sp, 1
15108  640B             ; --- END FUNCTION CALL
15109  640B             ; return; 
15110  640B F9            leave
15111  640C 09            ret
15112  640D 0A 10 64      jmp _if807_exit
15113  6410             _if807_exit:
15114  6410             _if806_exit:
15115  6410             ; while (num > 0) { 
15116  6410             _while808_cond:
15117  6410 FA 05 00      lea d, [bp + 5] ; $num
15118  6413 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15119  6416 FD 39         mov c, b ; And place it into C
15120  6418 2A            mov b, [d] ; Lower Word in B
15121  6419             ; --- START RELATIONAL
15122  6419 D7            push a
15123  641A FD D8         push g
15124  641C 11            mov a, b
15125  641D FD 7A         mov g, c
15126  641F FD 2E 00 00   mov32 cb, $00000000
15126  6423 00 00 
15127  6425 FD AF         cmp32 ga, cb
15128  6427 FD 7F         sgt
15129  6429 FD F1         pop g
15130  642B E4            pop a
15131  642C             ; --- END RELATIONAL
15132  642C C0 00 00      cmp b, 0
15133  642F C6 B0 64      je _while808_exit
15134  6432             _while808_block:
15135  6432             ; digits[i] = '0' + (num % 10); 
15136  6432 FA F7 FF      lea d, [bp + -9] ; $digits
15137  6435 D7            push a
15138  6436 DA            push d
15139  6437 FA F5 FF      lea d, [bp + -11] ; $i
15140  643A 2A            mov b, [d]
15141  643B 38 00 00      mov c, 0
15142  643E E7            pop d
15143  643F 5A            add d, b
15144  6440 E4            pop a
15145  6441 DA            push d
15146  6442 FD 2E 30 00   mov32 cb, $00000030
15146  6446 00 00 
15147  6448             ; --- START TERMS
15148  6448 D7            push a
15149  6449 11            mov a, b
15150  644A FA 05 00      lea d, [bp + 5] ; $num
15151  644D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15152  6450 FD 39         mov c, b ; And place it into C
15153  6452 2A            mov b, [d] ; Lower Word in B
15154  6453             ; --- START FACTORS
15155  6453 D7            push a
15156  6454 FD D8         push g
15157  6456 11            mov a, b
15158  6457 FD 7A         mov g, c
15159  6459 FD 2E 0A 00   mov32 cb, $0000000a
15159  645D 00 00 
15160  645F FD D8         push g ; save 'g' as the div instruction uses it
15161  6461 AE            div a, b ; %, a: quotient, b: remainder
15162  6462 11            mov a, b
15163  6463 FD F1         pop g
15164  6465 FD 38         mov c, g
15165  6467 27            mov b, a
15166  6468 FD F1         pop g
15167  646A E4            pop a
15168  646B             ; --- END FACTORS
15169  646B FD 15         add32 cb, ga
15170  646D E4            pop a
15171  646E             ; --- END TERMS
15172  646E E7            pop d
15173  646F FD 3E         mov [d], bl
15174  6471             ; num = num / 10; 
15175  6471 FA 05 00      lea d, [bp + 5] ; $num
15176  6474 DA            push d
15177  6475 FA 05 00      lea d, [bp + 5] ; $num
15178  6478 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15179  647B FD 39         mov c, b ; And place it into C
15180  647D 2A            mov b, [d] ; Lower Word in B
15181  647E             ; --- START FACTORS
15182  647E D7            push a
15183  647F FD D8         push g
15184  6481 11            mov a, b
15185  6482 FD 7A         mov g, c
15186  6484 FD 2E 0A 00   mov32 cb, $0000000a
15186  6488 00 00 
15187  648A FD D8         push g ; save 'g' as the div instruction uses it
15188  648C AE            div a, b ; /, a: quotient, b: remainder
15189  648D FD F1         pop g
15190  648F FD 38         mov c, g
15191  6491 27            mov b, a
15192  6492 FD F1         pop g
15193  6494 E4            pop a
15194  6495             ; --- END FACTORS
15195  6495 E7            pop d
15196  6496 FD 43         mov [d], b
15197  6498 28            mov b, c
15198  6499 FD 44 02 00   mov [d + 2], b
15199  649D             ; i++; 
15200  649D FA F5 FF      lea d, [bp + -11] ; $i
15201  64A0 2A            mov b, [d]
15202  64A1 38 00 00      mov c, 0
15203  64A4 11            mov a, b
15204  64A5 FD 77         inc b
15205  64A7 FA F5 FF      lea d, [bp + -11] ; $i
15206  64AA FD 43         mov [d], b
15207  64AC 27            mov b, a
15208  64AD 0A 10 64      jmp _while808_cond
15209  64B0             _while808_exit:
15210  64B0             ; while (i > 0) { 
15211  64B0             _while815_cond:
15212  64B0 FA F5 FF      lea d, [bp + -11] ; $i
15213  64B3 2A            mov b, [d]
15214  64B4 38 00 00      mov c, 0
15215  64B7             ; --- START RELATIONAL
15216  64B7 D7            push a
15217  64B8 11            mov a, b
15218  64B9 FD 2E 00 00   mov32 cb, $00000000
15218  64BD 00 00 
15219  64BF B0            cmp a, b
15220  64C0 FD 7F         sgt ; >
15221  64C2 E4            pop a
15222  64C3             ; --- END RELATIONAL
15223  64C3 C0 00 00      cmp b, 0
15224  64C6 C6 F8 64      je _while815_exit
15225  64C9             _while815_block:
15226  64C9             ; i--; 
15227  64C9 FA F5 FF      lea d, [bp + -11] ; $i
15228  64CC 2A            mov b, [d]
15229  64CD 38 00 00      mov c, 0
15230  64D0 11            mov a, b
15231  64D1 FD 7D         dec b
15232  64D3 FA F5 FF      lea d, [bp + -11] ; $i
15233  64D6 FD 43         mov [d], b
15234  64D8 27            mov b, a
15235  64D9             ; putchar(digits[i]); 
15236  64D9             ; --- START FUNCTION CALL
15237  64D9 FA F7 FF      lea d, [bp + -9] ; $digits
15238  64DC D7            push a
15239  64DD DA            push d
15240  64DE FA F5 FF      lea d, [bp + -11] ; $i
15241  64E1 2A            mov b, [d]
15242  64E2 38 00 00      mov c, 0
15243  64E5 E7            pop d
15244  64E6 5A            add d, b
15245  64E7 E4            pop a
15246  64E8 32            mov bl, [d]
15247  64E9 A7 00         mov bh, 0
15248  64EB 38 00 00      mov c, 0
15249  64EE DD            push bl
15250  64EF 07 FA 64      call putchar
15251  64F2 51 01 00      add sp, 1
15252  64F5             ; --- END FUNCTION CALL
15253  64F5 0A B0 64      jmp _while815_cond
15254  64F8             _while815_exit:
15255  64F8 F9            leave
15256  64F9 09            ret
15257  64FA             
15258  64FA             putchar:
15259  64FA F8 00 00      enter 0 ; (push bp; mov bp, sp)
15260  64FD             ; --- BEGIN INLINE ASM SEGMENT
15261  64FD FA 05 00      lea d, [bp + 5] ; $c
15262  6500 1E            mov al, [d]
15263  6501 23            mov ah, al
15264  6502 19 00         mov al, 0
15265  6504 05 03         syscall sys_io      ; char in AH
15266  6506             ; --- END INLINE ASM SEGMENT
15267  6506 F9            leave
15268  6507 09            ret
15269  6508             
15270  6508             print_unsigned_long:
15271  6508 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15272  650B             ; char digits[10]; 
15273  650B 52 0A 00      sub sp, 10
15274  650E             ; int i; 
15275  650E 52 02 00      sub sp, 2
15276  6511             ; i = 0; 
15277  6511 FA F5 FF      lea d, [bp + -11] ; $i
15278  6514 DA            push d
15279  6515 FD 2E 00 00   mov32 cb, $00000000
15279  6519 00 00 
15280  651B E7            pop d
15281  651C FD 43         mov [d], b
15282  651E             ; if(num == 0){ 
15283  651E             _if816_cond:
15284  651E FA 05 00      lea d, [bp + 5] ; $num
15285  6521 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15286  6524 FD 39         mov c, b ; And place it into C
15287  6526 2A            mov b, [d] ; Lower Word in B
15288  6527             ; --- START RELATIONAL
15289  6527 D7            push a
15290  6528 FD D8         push g
15291  652A 11            mov a, b
15292  652B FD 7A         mov g, c
15293  652D FD 2E 00 00   mov32 cb, $00000000
15293  6531 00 00 
15294  6533 FD AF         cmp32 ga, cb
15295  6535 FD 71         seq ; ==
15296  6537 FD F1         pop g
15297  6539 E4            pop a
15298  653A             ; --- END RELATIONAL
15299  653A C0 00 00      cmp b, 0
15300  653D C6 52 65      je _if816_exit
15301  6540             _if816_TRUE:
15302  6540             ; putchar('0'); 
15303  6540             ; --- START FUNCTION CALL
15304  6540 FD 2E 30 00   mov32 cb, $00000030
15304  6544 00 00 
15305  6546 DD            push bl
15306  6547 07 FA 64      call putchar
15307  654A 51 01 00      add sp, 1
15308  654D             ; --- END FUNCTION CALL
15309  654D             ; return; 
15310  654D F9            leave
15311  654E 09            ret
15312  654F 0A 52 65      jmp _if816_exit
15313  6552             _if816_exit:
15314  6552             ; while (num > 0) { 
15315  6552             _while817_cond:
15316  6552 FA 05 00      lea d, [bp + 5] ; $num
15317  6555 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15318  6558 FD 39         mov c, b ; And place it into C
15319  655A 2A            mov b, [d] ; Lower Word in B
15320  655B             ; --- START RELATIONAL
15321  655B D7            push a
15322  655C FD D8         push g
15323  655E 11            mov a, b
15324  655F FD 7A         mov g, c
15325  6561 FD 2E 00 00   mov32 cb, $00000000
15325  6565 00 00 
15326  6567 FD AF         cmp32 ga, cb
15327  6569 FD 81         sgu
15328  656B FD F1         pop g
15329  656D E4            pop a
15330  656E             ; --- END RELATIONAL
15331  656E C0 00 00      cmp b, 0
15332  6571 C6 F2 65      je _while817_exit
15333  6574             _while817_block:
15334  6574             ; digits[i] = '0' + (num % 10); 
15335  6574 FA F7 FF      lea d, [bp + -9] ; $digits
15336  6577 D7            push a
15337  6578 DA            push d
15338  6579 FA F5 FF      lea d, [bp + -11] ; $i
15339  657C 2A            mov b, [d]
15340  657D 38 00 00      mov c, 0
15341  6580 E7            pop d
15342  6581 5A            add d, b
15343  6582 E4            pop a
15344  6583 DA            push d
15345  6584 FD 2E 30 00   mov32 cb, $00000030
15345  6588 00 00 
15346  658A             ; --- START TERMS
15347  658A D7            push a
15348  658B 11            mov a, b
15349  658C FA 05 00      lea d, [bp + 5] ; $num
15350  658F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15351  6592 FD 39         mov c, b ; And place it into C
15352  6594 2A            mov b, [d] ; Lower Word in B
15353  6595             ; --- START FACTORS
15354  6595 D7            push a
15355  6596 FD D8         push g
15356  6598 11            mov a, b
15357  6599 FD 7A         mov g, c
15358  659B FD 2E 0A 00   mov32 cb, $0000000a
15358  659F 00 00 
15359  65A1 FD D8         push g ; save 'g' as the div instruction uses it
15360  65A3 AE            div a, b ; %, a: quotient, b: remainder
15361  65A4 11            mov a, b
15362  65A5 FD F1         pop g
15363  65A7 FD 38         mov c, g
15364  65A9 27            mov b, a
15365  65AA FD F1         pop g
15366  65AC E4            pop a
15367  65AD             ; --- END FACTORS
15368  65AD FD 15         add32 cb, ga
15369  65AF E4            pop a
15370  65B0             ; --- END TERMS
15371  65B0 E7            pop d
15372  65B1 FD 3E         mov [d], bl
15373  65B3             ; num = num / 10; 
15374  65B3 FA 05 00      lea d, [bp + 5] ; $num
15375  65B6 DA            push d
15376  65B7 FA 05 00      lea d, [bp + 5] ; $num
15377  65BA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15378  65BD FD 39         mov c, b ; And place it into C
15379  65BF 2A            mov b, [d] ; Lower Word in B
15380  65C0             ; --- START FACTORS
15381  65C0 D7            push a
15382  65C1 FD D8         push g
15383  65C3 11            mov a, b
15384  65C4 FD 7A         mov g, c
15385  65C6 FD 2E 0A 00   mov32 cb, $0000000a
15385  65CA 00 00 
15386  65CC FD D8         push g ; save 'g' as the div instruction uses it
15387  65CE AE            div a, b ; /, a: quotient, b: remainder
15388  65CF FD F1         pop g
15389  65D1 FD 38         mov c, g
15390  65D3 27            mov b, a
15391  65D4 FD F1         pop g
15392  65D6 E4            pop a
15393  65D7             ; --- END FACTORS
15394  65D7 E7            pop d
15395  65D8 FD 43         mov [d], b
15396  65DA 28            mov b, c
15397  65DB FD 44 02 00   mov [d + 2], b
15398  65DF             ; i++; 
15399  65DF FA F5 FF      lea d, [bp + -11] ; $i
15400  65E2 2A            mov b, [d]
15401  65E3 38 00 00      mov c, 0
15402  65E6 11            mov a, b
15403  65E7 FD 77         inc b
15404  65E9 FA F5 FF      lea d, [bp + -11] ; $i
15405  65EC FD 43         mov [d], b
15406  65EE 27            mov b, a
15407  65EF 0A 52 65      jmp _while817_cond
15408  65F2             _while817_exit:
15409  65F2             ; while (i > 0) { 
15410  65F2             _while824_cond:
15411  65F2 FA F5 FF      lea d, [bp + -11] ; $i
15412  65F5 2A            mov b, [d]
15413  65F6 38 00 00      mov c, 0
15414  65F9             ; --- START RELATIONAL
15415  65F9 D7            push a
15416  65FA 11            mov a, b
15417  65FB FD 2E 00 00   mov32 cb, $00000000
15417  65FF 00 00 
15418  6601 B0            cmp a, b
15419  6602 FD 7F         sgt ; >
15420  6604 E4            pop a
15421  6605             ; --- END RELATIONAL
15422  6605 C0 00 00      cmp b, 0
15423  6608 C6 3A 66      je _while824_exit
15424  660B             _while824_block:
15425  660B             ; i--; 
15426  660B FA F5 FF      lea d, [bp + -11] ; $i
15427  660E 2A            mov b, [d]
15428  660F 38 00 00      mov c, 0
15429  6612 11            mov a, b
15430  6613 FD 7D         dec b
15431  6615 FA F5 FF      lea d, [bp + -11] ; $i
15432  6618 FD 43         mov [d], b
15433  661A 27            mov b, a
15434  661B             ; putchar(digits[i]); 
15435  661B             ; --- START FUNCTION CALL
15436  661B FA F7 FF      lea d, [bp + -9] ; $digits
15437  661E D7            push a
15438  661F DA            push d
15439  6620 FA F5 FF      lea d, [bp + -11] ; $i
15440  6623 2A            mov b, [d]
15441  6624 38 00 00      mov c, 0
15442  6627 E7            pop d
15443  6628 5A            add d, b
15444  6629 E4            pop a
15445  662A 32            mov bl, [d]
15446  662B A7 00         mov bh, 0
15447  662D 38 00 00      mov c, 0
15448  6630 DD            push bl
15449  6631 07 FA 64      call putchar
15450  6634 51 01 00      add sp, 1
15451  6637             ; --- END FUNCTION CALL
15452  6637 0A F2 65      jmp _while824_cond
15453  663A             _while824_exit:
15454  663A F9            leave
15455  663B 09            ret
15456  663C             
15457  663C             printx32:
15458  663C F8 00 00      enter 0 ; (push bp; mov bp, sp)
15459  663F             ; --- BEGIN INLINE ASM SEGMENT
15460  663F FA 05 00      lea d, [bp + 5] ; $hex
15461  6642 2B 02 00      mov b, [d+2]
15462  6645 07 4E 66      call print_u16x_printx32
15463  6648 2A            mov b, [d]
15464  6649 07 4E 66      call print_u16x_printx32
15465  664C             ; --- END INLINE ASM SEGMENT
15466  664C             ; return; 
15467  664C F9            leave
15468  664D 09            ret
15469  664E             ; --- BEGIN INLINE ASM SEGMENT
15470  664E             print_u16x_printx32:
15471  664E D7            push a
15472  664F D8            push b
15473  6650 DD            push bl
15474  6651 30            mov bl, bh
15475  6652 07 70 66      call _itoa_printx32        ; convert bh to char in A
15476  6655 2F            mov bl, al        ; save al
15477  6656 19 00         mov al, 0
15478  6658 05 03         syscall sys_io        ; display AH
15479  665A 24            mov ah, bl        ; retrieve al
15480  665B 19 00         mov al, 0
15481  665D 05 03         syscall sys_io        ; display AL
15482  665F EA            pop bl
15483  6660 07 70 66      call _itoa_printx32        ; convert bh to char in A
15484  6663 2F            mov bl, al        ; save al
15485  6664 19 00         mov al, 0
15486  6666 05 03         syscall sys_io        ; display AH
15487  6668 24            mov ah, bl        ; retrieve al
15488  6669 19 00         mov al, 0
15489  666B 05 03         syscall sys_io        ; display AL
15490  666D E5            pop b
15491  666E E4            pop a
15492  666F 09            ret
15493  6670             _itoa_printx32:
15494  6670 DA            push d
15495  6671 D8            push b
15496  6672 A7 00         mov bh, 0
15497  6674 FD A4 04      shr bl, 4  
15498  6677 74            mov d, b
15499  6678 1F 8A 66      mov al, [d + s_hex_digits_printx32]
15500  667B 23            mov ah, al
15501  667C E5            pop b
15502  667D D8            push b
15503  667E A7 00         mov bh, 0
15504  6680 FD 87 0F      and bl, $0F
15505  6683 74            mov d, b
15506  6684 1F 8A 66      mov al, [d + s_hex_digits_printx32]
15507  6687 E5            pop b
15508  6688 E7            pop d
15509  6689 09            ret
15510  668A 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
15510  668E 34 35 36 37 
15510  6692 38 39 41 42 
15510  6696 43 44 45 46 
15511  669A             ; --- END INLINE ASM SEGMENT
15512  669A F9            leave
15513  669B 09            ret
15514  669C             
15515  669C             err:
15516  669C F8 00 00      enter 0 ; (push bp; mov bp, sp)
15517  669F             ; print(e); 
15518  669F             ; --- START FUNCTION CALL
15519  669F FA 05 00      lea d, [bp + 5] ; $e
15520  66A2 2A            mov b, [d]
15521  66A3 38 00 00      mov c, 0
15522  66A6 FD AB         swp b
15523  66A8 D8            push b
15524  66A9 07 B1 66      call print
15525  66AC 51 02 00      add sp, 2
15526  66AF             ; --- END FUNCTION CALL
15527  66AF F9            leave
15528  66B0 09            ret
15529  66B1             
15530  66B1             print:
15531  66B1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15532  66B4             ; --- BEGIN INLINE ASM SEGMENT
15533  66B4 FA 05 00      lea d, [bp + 5] ; $s
15534  66B7 FD 2A         mov d, [d]
15535  66B9             _puts_L1_print:
15536  66B9 1E            mov al, [d]
15537  66BA B9 00         cmp al, 0
15538  66BC C6 C8 66      jz _puts_END_print
15539  66BF 23            mov ah, al
15540  66C0 19 00         mov al, 0
15541  66C2 05 03         syscall sys_io
15542  66C4 79            inc d
15543  66C5 0A B9 66      jmp _puts_L1_print
15544  66C8             _puts_END_print:
15545  66C8             ; --- END INLINE ASM SEGMENT
15546  66C8 F9            leave
15547  66C9 09            ret
15548  66CA             
15549  66CA             print_signed:
15550  66CA F8 00 00      enter 0 ; (push bp; mov bp, sp)
15551  66CD             ; char digits[5]; 
15552  66CD 52 05 00      sub sp, 5
15553  66D0             ; int i = 0; 
15554  66D0 52 02 00      sub sp, 2
15555  66D3             ; --- START LOCAL VAR INITIALIZATION
15556  66D3 FA FA FF      lea d, [bp + -6] ; $i
15557  66D6 DA            push d
15558  66D7 FD 2E 00 00   mov32 cb, $00000000
15558  66DB 00 00 
15559  66DD E7            pop d
15560  66DE FD 43         mov [d], b
15561  66E0             ; --- END LOCAL VAR INITIALIZATION
15562  66E0             ; if (num < 0) { 
15563  66E0             _if825_cond:
15564  66E0 FA 05 00      lea d, [bp + 5] ; $num
15565  66E3 2A            mov b, [d]
15566  66E4 38 00 00      mov c, 0
15567  66E7             ; --- START RELATIONAL
15568  66E7 D7            push a
15569  66E8 11            mov a, b
15570  66E9 FD 2E 00 00   mov32 cb, $00000000
15570  66ED 00 00 
15571  66EF B0            cmp a, b
15572  66F0 FD 73         slt ; < (signed)
15573  66F2 E4            pop a
15574  66F3             ; --- END RELATIONAL
15575  66F3 C0 00 00      cmp b, 0
15576  66F6 C6 19 67      je _if825_else
15577  66F9             _if825_TRUE:
15578  66F9             ; putchar('-'); 
15579  66F9             ; --- START FUNCTION CALL
15580  66F9 FD 2E 2D 00   mov32 cb, $0000002d
15580  66FD 00 00 
15581  66FF DD            push bl
15582  6700 07 FA 64      call putchar
15583  6703 51 01 00      add sp, 1
15584  6706             ; --- END FUNCTION CALL
15585  6706             ; num = -num; 
15586  6706 FA 05 00      lea d, [bp + 5] ; $num
15587  6709 DA            push d
15588  670A FA 05 00      lea d, [bp + 5] ; $num
15589  670D 2A            mov b, [d]
15590  670E 38 00 00      mov c, 0
15591  6711 FD 97         neg b
15592  6713 E7            pop d
15593  6714 FD 43         mov [d], b
15594  6716 0A 44 67      jmp _if825_exit
15595  6719             _if825_else:
15596  6719             ; if (num == 0) { 
15597  6719             _if826_cond:
15598  6719 FA 05 00      lea d, [bp + 5] ; $num
15599  671C 2A            mov b, [d]
15600  671D 38 00 00      mov c, 0
15601  6720             ; --- START RELATIONAL
15602  6720 D7            push a
15603  6721 11            mov a, b
15604  6722 FD 2E 00 00   mov32 cb, $00000000
15604  6726 00 00 
15605  6728 B0            cmp a, b
15606  6729 FD 71         seq ; ==
15607  672B E4            pop a
15608  672C             ; --- END RELATIONAL
15609  672C C0 00 00      cmp b, 0
15610  672F C6 44 67      je _if826_exit
15611  6732             _if826_TRUE:
15612  6732             ; putchar('0'); 
15613  6732             ; --- START FUNCTION CALL
15614  6732 FD 2E 30 00   mov32 cb, $00000030
15614  6736 00 00 
15615  6738 DD            push bl
15616  6739 07 FA 64      call putchar
15617  673C 51 01 00      add sp, 1
15618  673F             ; --- END FUNCTION CALL
15619  673F             ; return; 
15620  673F F9            leave
15621  6740 09            ret
15622  6741 0A 44 67      jmp _if826_exit
15623  6744             _if826_exit:
15624  6744             _if825_exit:
15625  6744             ; while (num > 0) { 
15626  6744             _while827_cond:
15627  6744 FA 05 00      lea d, [bp + 5] ; $num
15628  6747 2A            mov b, [d]
15629  6748 38 00 00      mov c, 0
15630  674B             ; --- START RELATIONAL
15631  674B D7            push a
15632  674C 11            mov a, b
15633  674D FD 2E 00 00   mov32 cb, $00000000
15633  6751 00 00 
15634  6753 B0            cmp a, b
15635  6754 FD 7F         sgt ; >
15636  6756 E4            pop a
15637  6757             ; --- END RELATIONAL
15638  6757 C0 00 00      cmp b, 0
15639  675A C6 D1 67      je _while827_exit
15640  675D             _while827_block:
15641  675D             ; digits[i] = '0' + (num % 10); 
15642  675D FA FC FF      lea d, [bp + -4] ; $digits
15643  6760 D7            push a
15644  6761 DA            push d
15645  6762 FA FA FF      lea d, [bp + -6] ; $i
15646  6765 2A            mov b, [d]
15647  6766 38 00 00      mov c, 0
15648  6769 E7            pop d
15649  676A 5A            add d, b
15650  676B E4            pop a
15651  676C DA            push d
15652  676D FD 2E 30 00   mov32 cb, $00000030
15652  6771 00 00 
15653  6773             ; --- START TERMS
15654  6773 D7            push a
15655  6774 11            mov a, b
15656  6775 FA 05 00      lea d, [bp + 5] ; $num
15657  6778 2A            mov b, [d]
15658  6779 38 00 00      mov c, 0
15659  677C             ; --- START FACTORS
15660  677C D7            push a
15661  677D FD D8         push g
15662  677F 11            mov a, b
15663  6780 FD 7A         mov g, c
15664  6782 FD 2E 0A 00   mov32 cb, $0000000a
15664  6786 00 00 
15665  6788 FD D8         push g ; save 'g' as the div instruction uses it
15666  678A AE            div a, b ; %, a: quotient, b: remainder
15667  678B 11            mov a, b
15668  678C FD F1         pop g
15669  678E FD 38         mov c, g
15670  6790 27            mov b, a
15671  6791 FD F1         pop g
15672  6793 E4            pop a
15673  6794             ; --- END FACTORS
15674  6794 56            add b, a
15675  6795 E4            pop a
15676  6796             ; --- END TERMS
15677  6796 E7            pop d
15678  6797 FD 3E         mov [d], bl
15679  6799             ; num = num / 10; 
15680  6799 FA 05 00      lea d, [bp + 5] ; $num
15681  679C DA            push d
15682  679D FA 05 00      lea d, [bp + 5] ; $num
15683  67A0 2A            mov b, [d]
15684  67A1 38 00 00      mov c, 0
15685  67A4             ; --- START FACTORS
15686  67A4 D7            push a
15687  67A5 FD D8         push g
15688  67A7 11            mov a, b
15689  67A8 FD 7A         mov g, c
15690  67AA FD 2E 0A 00   mov32 cb, $0000000a
15690  67AE 00 00 
15691  67B0 FD D8         push g ; save 'g' as the div instruction uses it
15692  67B2 AE            div a, b ; /, a: quotient, b: remainder
15693  67B3 FD F1         pop g
15694  67B5 FD 38         mov c, g
15695  67B7 27            mov b, a
15696  67B8 FD F1         pop g
15697  67BA E4            pop a
15698  67BB             ; --- END FACTORS
15699  67BB E7            pop d
15700  67BC FD 43         mov [d], b
15701  67BE             ; i++; 
15702  67BE FA FA FF      lea d, [bp + -6] ; $i
15703  67C1 2A            mov b, [d]
15704  67C2 38 00 00      mov c, 0
15705  67C5 11            mov a, b
15706  67C6 FD 77         inc b
15707  67C8 FA FA FF      lea d, [bp + -6] ; $i
15708  67CB FD 43         mov [d], b
15709  67CD 27            mov b, a
15710  67CE 0A 44 67      jmp _while827_cond
15711  67D1             _while827_exit:
15712  67D1             ; while (i > 0) { 
15713  67D1             _while834_cond:
15714  67D1 FA FA FF      lea d, [bp + -6] ; $i
15715  67D4 2A            mov b, [d]
15716  67D5 38 00 00      mov c, 0
15717  67D8             ; --- START RELATIONAL
15718  67D8 D7            push a
15719  67D9 11            mov a, b
15720  67DA FD 2E 00 00   mov32 cb, $00000000
15720  67DE 00 00 
15721  67E0 B0            cmp a, b
15722  67E1 FD 7F         sgt ; >
15723  67E3 E4            pop a
15724  67E4             ; --- END RELATIONAL
15725  67E4 C0 00 00      cmp b, 0
15726  67E7 C6 19 68      je _while834_exit
15727  67EA             _while834_block:
15728  67EA             ; i--; 
15729  67EA FA FA FF      lea d, [bp + -6] ; $i
15730  67ED 2A            mov b, [d]
15731  67EE 38 00 00      mov c, 0
15732  67F1 11            mov a, b
15733  67F2 FD 7D         dec b
15734  67F4 FA FA FF      lea d, [bp + -6] ; $i
15735  67F7 FD 43         mov [d], b
15736  67F9 27            mov b, a
15737  67FA             ; putchar(digits[i]); 
15738  67FA             ; --- START FUNCTION CALL
15739  67FA FA FC FF      lea d, [bp + -4] ; $digits
15740  67FD D7            push a
15741  67FE DA            push d
15742  67FF FA FA FF      lea d, [bp + -6] ; $i
15743  6802 2A            mov b, [d]
15744  6803 38 00 00      mov c, 0
15745  6806 E7            pop d
15746  6807 5A            add d, b
15747  6808 E4            pop a
15748  6809 32            mov bl, [d]
15749  680A A7 00         mov bh, 0
15750  680C 38 00 00      mov c, 0
15751  680F DD            push bl
15752  6810 07 FA 64      call putchar
15753  6813 51 01 00      add sp, 1
15754  6816             ; --- END FUNCTION CALL
15755  6816 0A D1 67      jmp _while834_cond
15756  6819             _while834_exit:
15757  6819 F9            leave
15758  681A 09            ret
15759  681B             
15760  681B             print_unsigned:
15761  681B F8 00 00      enter 0 ; (push bp; mov bp, sp)
15762  681E             ; char digits[5]; 
15763  681E 52 05 00      sub sp, 5
15764  6821             ; int i; 
15765  6821 52 02 00      sub sp, 2
15766  6824             ; i = 0; 
15767  6824 FA FA FF      lea d, [bp + -6] ; $i
15768  6827 DA            push d
15769  6828 FD 2E 00 00   mov32 cb, $00000000
15769  682C 00 00 
15770  682E E7            pop d
15771  682F FD 43         mov [d], b
15772  6831             ; if(num == 0){ 
15773  6831             _if835_cond:
15774  6831 FA 05 00      lea d, [bp + 5] ; $num
15775  6834 2A            mov b, [d]
15776  6835 38 00 00      mov c, 0
15777  6838             ; --- START RELATIONAL
15778  6838 D7            push a
15779  6839 11            mov a, b
15780  683A FD 2E 00 00   mov32 cb, $00000000
15780  683E 00 00 
15781  6840 B0            cmp a, b
15782  6841 FD 71         seq ; ==
15783  6843 E4            pop a
15784  6844             ; --- END RELATIONAL
15785  6844 C0 00 00      cmp b, 0
15786  6847 C6 5C 68      je _if835_exit
15787  684A             _if835_TRUE:
15788  684A             ; putchar('0'); 
15789  684A             ; --- START FUNCTION CALL
15790  684A FD 2E 30 00   mov32 cb, $00000030
15790  684E 00 00 
15791  6850 DD            push bl
15792  6851 07 FA 64      call putchar
15793  6854 51 01 00      add sp, 1
15794  6857             ; --- END FUNCTION CALL
15795  6857             ; return; 
15796  6857 F9            leave
15797  6858 09            ret
15798  6859 0A 5C 68      jmp _if835_exit
15799  685C             _if835_exit:
15800  685C             ; while (num > 0) { 
15801  685C             _while836_cond:
15802  685C FA 05 00      lea d, [bp + 5] ; $num
15803  685F 2A            mov b, [d]
15804  6860 38 00 00      mov c, 0
15805  6863             ; --- START RELATIONAL
15806  6863 D7            push a
15807  6864 11            mov a, b
15808  6865 FD 2E 00 00   mov32 cb, $00000000
15808  6869 00 00 
15809  686B B0            cmp a, b
15810  686C FD 81         sgu ; > (unsigned)
15811  686E E4            pop a
15812  686F             ; --- END RELATIONAL
15813  686F C0 00 00      cmp b, 0
15814  6872 C6 E9 68      je _while836_exit
15815  6875             _while836_block:
15816  6875             ; digits[i] = '0' + (num % 10); 
15817  6875 FA FC FF      lea d, [bp + -4] ; $digits
15818  6878 D7            push a
15819  6879 DA            push d
15820  687A FA FA FF      lea d, [bp + -6] ; $i
15821  687D 2A            mov b, [d]
15822  687E 38 00 00      mov c, 0
15823  6881 E7            pop d
15824  6882 5A            add d, b
15825  6883 E4            pop a
15826  6884 DA            push d
15827  6885 FD 2E 30 00   mov32 cb, $00000030
15827  6889 00 00 
15828  688B             ; --- START TERMS
15829  688B D7            push a
15830  688C 11            mov a, b
15831  688D FA 05 00      lea d, [bp + 5] ; $num
15832  6890 2A            mov b, [d]
15833  6891 38 00 00      mov c, 0
15834  6894             ; --- START FACTORS
15835  6894 D7            push a
15836  6895 FD D8         push g
15837  6897 11            mov a, b
15838  6898 FD 7A         mov g, c
15839  689A FD 2E 0A 00   mov32 cb, $0000000a
15839  689E 00 00 
15840  68A0 FD D8         push g ; save 'g' as the div instruction uses it
15841  68A2 AE            div a, b ; %, a: quotient, b: remainder
15842  68A3 11            mov a, b
15843  68A4 FD F1         pop g
15844  68A6 FD 38         mov c, g
15845  68A8 27            mov b, a
15846  68A9 FD F1         pop g
15847  68AB E4            pop a
15848  68AC             ; --- END FACTORS
15849  68AC 56            add b, a
15850  68AD E4            pop a
15851  68AE             ; --- END TERMS
15852  68AE E7            pop d
15853  68AF FD 3E         mov [d], bl
15854  68B1             ; num = num / 10; 
15855  68B1 FA 05 00      lea d, [bp + 5] ; $num
15856  68B4 DA            push d
15857  68B5 FA 05 00      lea d, [bp + 5] ; $num
15858  68B8 2A            mov b, [d]
15859  68B9 38 00 00      mov c, 0
15860  68BC             ; --- START FACTORS
15861  68BC D7            push a
15862  68BD FD D8         push g
15863  68BF 11            mov a, b
15864  68C0 FD 7A         mov g, c
15865  68C2 FD 2E 0A 00   mov32 cb, $0000000a
15865  68C6 00 00 
15866  68C8 FD D8         push g ; save 'g' as the div instruction uses it
15867  68CA AE            div a, b ; /, a: quotient, b: remainder
15868  68CB FD F1         pop g
15869  68CD FD 38         mov c, g
15870  68CF 27            mov b, a
15871  68D0 FD F1         pop g
15872  68D2 E4            pop a
15873  68D3             ; --- END FACTORS
15874  68D3 E7            pop d
15875  68D4 FD 43         mov [d], b
15876  68D6             ; i++; 
15877  68D6 FA FA FF      lea d, [bp + -6] ; $i
15878  68D9 2A            mov b, [d]
15879  68DA 38 00 00      mov c, 0
15880  68DD 11            mov a, b
15881  68DE FD 77         inc b
15882  68E0 FA FA FF      lea d, [bp + -6] ; $i
15883  68E3 FD 43         mov [d], b
15884  68E5 27            mov b, a
15885  68E6 0A 5C 68      jmp _while836_cond
15886  68E9             _while836_exit:
15887  68E9             ; while (i > 0) { 
15888  68E9             _while843_cond:
15889  68E9 FA FA FF      lea d, [bp + -6] ; $i
15890  68EC 2A            mov b, [d]
15891  68ED 38 00 00      mov c, 0
15892  68F0             ; --- START RELATIONAL
15893  68F0 D7            push a
15894  68F1 11            mov a, b
15895  68F2 FD 2E 00 00   mov32 cb, $00000000
15895  68F6 00 00 
15896  68F8 B0            cmp a, b
15897  68F9 FD 7F         sgt ; >
15898  68FB E4            pop a
15899  68FC             ; --- END RELATIONAL
15900  68FC C0 00 00      cmp b, 0
15901  68FF C6 31 69      je _while843_exit
15902  6902             _while843_block:
15903  6902             ; i--; 
15904  6902 FA FA FF      lea d, [bp + -6] ; $i
15905  6905 2A            mov b, [d]
15906  6906 38 00 00      mov c, 0
15907  6909 11            mov a, b
15908  690A FD 7D         dec b
15909  690C FA FA FF      lea d, [bp + -6] ; $i
15910  690F FD 43         mov [d], b
15911  6911 27            mov b, a
15912  6912             ; putchar(digits[i]); 
15913  6912             ; --- START FUNCTION CALL
15914  6912 FA FC FF      lea d, [bp + -4] ; $digits
15915  6915 D7            push a
15916  6916 DA            push d
15917  6917 FA FA FF      lea d, [bp + -6] ; $i
15918  691A 2A            mov b, [d]
15919  691B 38 00 00      mov c, 0
15920  691E E7            pop d
15921  691F 5A            add d, b
15922  6920 E4            pop a
15923  6921 32            mov bl, [d]
15924  6922 A7 00         mov bh, 0
15925  6924 38 00 00      mov c, 0
15926  6927 DD            push bl
15927  6928 07 FA 64      call putchar
15928  692B 51 01 00      add sp, 1
15929  692E             ; --- END FUNCTION CALL
15930  692E 0A E9 68      jmp _while843_cond
15931  6931             _while843_exit:
15932  6931 F9            leave
15933  6932 09            ret
15934  6933             
15935  6933             printx16:
15936  6933 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15937  6936             ; --- BEGIN INLINE ASM SEGMENT
15938  6936 FA 05 00      lea d, [bp + 5] ; $hex
15939  6939 2A            mov b, [d]
15940  693A             print_u16x_printx16:
15941  693A DD            push bl
15942  693B 30            mov bl, bh
15943  693C 07 59 69      call _itoa_printx16        ; convert bh to char in A
15944  693F 2F            mov bl, al        ; save al
15945  6940 19 00         mov al, 0
15946  6942 05 03         syscall sys_io        ; display AH
15947  6944 24            mov ah, bl        ; retrieve al
15948  6945 19 00         mov al, 0
15949  6947 05 03         syscall sys_io        ; display AL
15950  6949 EA            pop bl
15951  694A 07 59 69      call _itoa_printx16        ; convert bh to char in A
15952  694D 2F            mov bl, al        ; save al
15953  694E 19 00         mov al, 0
15954  6950 05 03         syscall sys_io        ; display AH
15955  6952 24            mov ah, bl        ; retrieve al
15956  6953 19 00         mov al, 0
15957  6955 05 03         syscall sys_io        ; display AL
15958  6957             ; --- END INLINE ASM SEGMENT
15959  6957             ; return; 
15960  6957 F9            leave
15961  6958 09            ret
15962  6959             ; --- BEGIN INLINE ASM SEGMENT
15963  6959             _itoa_printx16:
15964  6959 DA            push d
15965  695A D8            push b
15966  695B A7 00         mov bh, 0
15967  695D FD A4 04      shr bl, 4  
15968  6960 74            mov d, b
15969  6961 1F 73 69      mov al, [d + s_hex_digits_printx16]
15970  6964 23            mov ah, al
15971  6965 E5            pop b
15972  6966 D8            push b
15973  6967 A7 00         mov bh, 0
15974  6969 FD 87 0F      and bl, $0F
15975  696C 74            mov d, b
15976  696D 1F 73 69      mov al, [d + s_hex_digits_printx16]
15977  6970 E5            pop b
15978  6971 E7            pop d
15979  6972 09            ret
15980  6973 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
15980  6977 34 35 36 37 
15980  697B 38 39 41 42 
15980  697F 43 44 45 46 
15981  6983             ; --- END INLINE ASM SEGMENT
15982  6983 F9            leave
15983  6984 09            ret
15984  6985             
15985  6985             puts:
15986  6985 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15987  6988             ; --- BEGIN INLINE ASM SEGMENT
15988  6988 FA 05 00      lea d, [bp + 5] ; $s
15989  698B FD 2A         mov d, [d]
15990  698D             _puts_L1_puts:
15991  698D 1E            mov al, [d]
15992  698E B9 00         cmp al, 0
15993  6990 C6 9C 69      jz _puts_END_puts
15994  6993 23            mov ah, al
15995  6994 19 00         mov al, 0
15996  6996 05 03         syscall sys_io
15997  6998 79            inc d
15998  6999 0A 8D 69      jmp _puts_L1_puts
15999  699C             _puts_END_puts:
16000  699C 10 00 0A      mov a, $0A00
16001  699F 05 03         syscall sys_io
16002  69A1             ; --- END INLINE ASM SEGMENT
16003  69A1 F9            leave
16004  69A2 09            ret
16005  69A3             
16006  69A3             memset:
16007  69A3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
16008  69A6             ; int i; 
16009  69A6 52 02 00      sub sp, 2
16010  69A9             ; for(i = 0; i < size; i++){ 
16011  69A9             _for844_init:
16012  69A9 FA FF FF      lea d, [bp + -1] ; $i
16013  69AC DA            push d
16014  69AD FD 2E 00 00   mov32 cb, $00000000
16014  69B1 00 00 
16015  69B3 E7            pop d
16016  69B4 FD 43         mov [d], b
16017  69B6             _for844_cond:
16018  69B6 FA FF FF      lea d, [bp + -1] ; $i
16019  69B9 2A            mov b, [d]
16020  69BA 38 00 00      mov c, 0
16021  69BD             ; --- START RELATIONAL
16022  69BD D7            push a
16023  69BE 11            mov a, b
16024  69BF FA 08 00      lea d, [bp + 8] ; $size
16025  69C2 2A            mov b, [d]
16026  69C3 38 00 00      mov c, 0
16027  69C6 B0            cmp a, b
16028  69C7 FD 73         slt ; < (signed)
16029  69C9 E4            pop a
16030  69CA             ; --- END RELATIONAL
16031  69CA C0 00 00      cmp b, 0
16032  69CD C6 02 6A      je _for844_exit
16033  69D0             _for844_block:
16034  69D0             ; *(s+i) = c; 
16035  69D0 FA 05 00      lea d, [bp + 5] ; $s
16036  69D3 2A            mov b, [d]
16037  69D4 38 00 00      mov c, 0
16038  69D7             ; --- START TERMS
16039  69D7 D7            push a
16040  69D8 11            mov a, b
16041  69D9 FA FF FF      lea d, [bp + -1] ; $i
16042  69DC 2A            mov b, [d]
16043  69DD 38 00 00      mov c, 0
16044  69E0 56            add b, a
16045  69E1 E4            pop a
16046  69E2             ; --- END TERMS
16047  69E2 D8            push b
16048  69E3 FA 07 00      lea d, [bp + 7] ; $c
16049  69E6 32            mov bl, [d]
16050  69E7 A7 00         mov bh, 0
16051  69E9 38 00 00      mov c, 0
16052  69EC E7            pop d
16053  69ED FD 3E         mov [d], bl
16054  69EF             _for844_update:
16055  69EF FA FF FF      lea d, [bp + -1] ; $i
16056  69F2 2A            mov b, [d]
16057  69F3 38 00 00      mov c, 0
16058  69F6 11            mov a, b
16059  69F7 FD 77         inc b
16060  69F9 FA FF FF      lea d, [bp + -1] ; $i
16061  69FC FD 43         mov [d], b
16062  69FE 27            mov b, a
16063  69FF 0A B6 69      jmp _for844_cond
16064  6A02             _for844_exit:
16065  6A02             ; return s; 
16066  6A02 FA 05 00      lea d, [bp + 5] ; $s
16067  6A05 2A            mov b, [d]
16068  6A06 38 00 00      mov c, 0
16069  6A09 F9            leave
16070  6A0A 09            ret
16071  6A0B             
16072  6A0B             strncmp:
16073  6A0B F8 00 00      enter 0 ; (push bp; mov bp, sp)
16074  6A0E             ; int i; 
16075  6A0E 52 02 00      sub sp, 2
16076  6A11             ; for (i = 0; i < n; i++) { 
16077  6A11             _for845_init:
16078  6A11 FA FF FF      lea d, [bp + -1] ; $i
16079  6A14 DA            push d
16080  6A15 FD 2E 00 00   mov32 cb, $00000000
16080  6A19 00 00 
16081  6A1B E7            pop d
16082  6A1C FD 43         mov [d], b
16083  6A1E             _for845_cond:
16084  6A1E FA FF FF      lea d, [bp + -1] ; $i
16085  6A21 2A            mov b, [d]
16086  6A22 38 00 00      mov c, 0
16087  6A25             ; --- START RELATIONAL
16088  6A25 D7            push a
16089  6A26 11            mov a, b
16090  6A27 FA 09 00      lea d, [bp + 9] ; $n
16091  6A2A 2A            mov b, [d]
16092  6A2B 38 00 00      mov c, 0
16093  6A2E B0            cmp a, b
16094  6A2F FD 73         slt ; < (signed)
16095  6A31 E4            pop a
16096  6A32             ; --- END RELATIONAL
16097  6A32 C0 00 00      cmp b, 0
16098  6A35 C6 2A 6B      je _for845_exit
16099  6A38             _for845_block:
16100  6A38             ; if (str1[i] != str2[i]) { 
16101  6A38             _if846_cond:
16102  6A38 FA 05 00      lea d, [bp + 5] ; $str1
16103  6A3B FD 2A         mov d, [d]
16104  6A3D D7            push a
16105  6A3E DA            push d
16106  6A3F FA FF FF      lea d, [bp + -1] ; $i
16107  6A42 2A            mov b, [d]
16108  6A43 38 00 00      mov c, 0
16109  6A46 E7            pop d
16110  6A47 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16111  6A4B E4            pop a
16112  6A4C 32            mov bl, [d]
16113  6A4D A7 00         mov bh, 0
16114  6A4F 38 00 00      mov c, 0
16115  6A52             ; --- START RELATIONAL
16116  6A52 D7            push a
16117  6A53 11            mov a, b
16118  6A54 FA 07 00      lea d, [bp + 7] ; $str2
16119  6A57 FD 2A         mov d, [d]
16120  6A59 D7            push a
16121  6A5A DA            push d
16122  6A5B FA FF FF      lea d, [bp + -1] ; $i
16123  6A5E 2A            mov b, [d]
16124  6A5F 38 00 00      mov c, 0
16125  6A62 E7            pop d
16126  6A63 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16127  6A67 E4            pop a
16128  6A68 32            mov bl, [d]
16129  6A69 A7 00         mov bh, 0
16130  6A6B 38 00 00      mov c, 0
16131  6A6E B0            cmp a, b
16132  6A6F FD 72         sneq ; !=
16133  6A71 E4            pop a
16134  6A72             ; --- END RELATIONAL
16135  6A72 C0 00 00      cmp b, 0
16136  6A75 C6 BA 6A      je _if846_exit
16137  6A78             _if846_TRUE:
16138  6A78             ; return (unsigned char)str1[i] - (unsigned char)str2[i]; 
16139  6A78 FA 05 00      lea d, [bp + 5] ; $str1
16140  6A7B FD 2A         mov d, [d]
16141  6A7D D7            push a
16142  6A7E DA            push d
16143  6A7F FA FF FF      lea d, [bp + -1] ; $i
16144  6A82 2A            mov b, [d]
16145  6A83 38 00 00      mov c, 0
16146  6A86 E7            pop d
16147  6A87 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16148  6A8B E4            pop a
16149  6A8C 32            mov bl, [d]
16150  6A8D A7 00         mov bh, 0
16151  6A8F 38 00 00      mov c, 0
16152  6A92 A7 00         mov bh, 0
16153  6A94             ; --- START TERMS
16154  6A94 D7            push a
16155  6A95 11            mov a, b
16156  6A96 FA 07 00      lea d, [bp + 7] ; $str2
16157  6A99 FD 2A         mov d, [d]
16158  6A9B D7            push a
16159  6A9C DA            push d
16160  6A9D FA FF FF      lea d, [bp + -1] ; $i
16161  6AA0 2A            mov b, [d]
16162  6AA1 38 00 00      mov c, 0
16163  6AA4 E7            pop d
16164  6AA5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16165  6AA9 E4            pop a
16166  6AAA 32            mov bl, [d]
16167  6AAB A7 00         mov bh, 0
16168  6AAD 38 00 00      mov c, 0
16169  6AB0 A7 00         mov bh, 0
16170  6AB2 60            sub a, b
16171  6AB3 27            mov b, a
16172  6AB4 E4            pop a
16173  6AB5             ; --- END TERMS
16174  6AB5 F9            leave
16175  6AB6 09            ret
16176  6AB7 0A BA 6A      jmp _if846_exit
16177  6ABA             _if846_exit:
16178  6ABA             ; if (str1[i] == '\0' || str2[i] == '\0') { 
16179  6ABA             _if847_cond:
16180  6ABA FA 05 00      lea d, [bp + 5] ; $str1
16181  6ABD FD 2A         mov d, [d]
16182  6ABF D7            push a
16183  6AC0 DA            push d
16184  6AC1 FA FF FF      lea d, [bp + -1] ; $i
16185  6AC4 2A            mov b, [d]
16186  6AC5 38 00 00      mov c, 0
16187  6AC8 E7            pop d
16188  6AC9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16189  6ACD E4            pop a
16190  6ACE 32            mov bl, [d]
16191  6ACF A7 00         mov bh, 0
16192  6AD1 38 00 00      mov c, 0
16193  6AD4             ; --- START RELATIONAL
16194  6AD4 D7            push a
16195  6AD5 11            mov a, b
16196  6AD6 FD 2E 00 00   mov32 cb, $00000000
16196  6ADA 00 00 
16197  6ADC B0            cmp a, b
16198  6ADD FD 71         seq ; ==
16199  6ADF E4            pop a
16200  6AE0             ; --- END RELATIONAL
16201  6AE0             ; --- START LOGICAL OR
16202  6AE0 D7            push a
16203  6AE1 11            mov a, b
16204  6AE2 FA 07 00      lea d, [bp + 7] ; $str2
16205  6AE5 FD 2A         mov d, [d]
16206  6AE7 D7            push a
16207  6AE8 DA            push d
16208  6AE9 FA FF FF      lea d, [bp + -1] ; $i
16209  6AEC 2A            mov b, [d]
16210  6AED 38 00 00      mov c, 0
16211  6AF0 E7            pop d
16212  6AF1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16213  6AF5 E4            pop a
16214  6AF6 32            mov bl, [d]
16215  6AF7 A7 00         mov bh, 0
16216  6AF9 38 00 00      mov c, 0
16217  6AFC             ; --- START RELATIONAL
16218  6AFC D7            push a
16219  6AFD 11            mov a, b
16220  6AFE FD 2E 00 00   mov32 cb, $00000000
16220  6B02 00 00 
16221  6B04 B0            cmp a, b
16222  6B05 FD 71         seq ; ==
16223  6B07 E4            pop a
16224  6B08             ; --- END RELATIONAL
16225  6B08 FD A8         sor a, b ; ||
16226  6B0A E4            pop a
16227  6B0B             ; --- END LOGICAL OR
16228  6B0B C0 00 00      cmp b, 0
16229  6B0E C6 17 6B      je _if847_exit
16230  6B11             _if847_TRUE:
16231  6B11             ; break; 
16232  6B11 0A 2A 6B      jmp _for845_exit ; for break
16233  6B14 0A 17 6B      jmp _if847_exit
16234  6B17             _if847_exit:
16235  6B17             _for845_update:
16236  6B17 FA FF FF      lea d, [bp + -1] ; $i
16237  6B1A 2A            mov b, [d]
16238  6B1B 38 00 00      mov c, 0
16239  6B1E 11            mov a, b
16240  6B1F FD 77         inc b
16241  6B21 FA FF FF      lea d, [bp + -1] ; $i
16242  6B24 FD 43         mov [d], b
16243  6B26 27            mov b, a
16244  6B27 0A 1E 6A      jmp _for845_cond
16245  6B2A             _for845_exit:
16246  6B2A             ; return 0; 
16247  6B2A FD 2E 00 00   mov32 cb, $00000000
16247  6B2E 00 00 
16248  6B30 F9            leave
16249  6B31 09            ret
16250  6B32             
16251  6B32             is_digit:
16252  6B32 F8 00 00      enter 0 ; (push bp; mov bp, sp)
16253  6B35             ; return c >= '0' && c <= '9'; 
16254  6B35 FA 05 00      lea d, [bp + 5] ; $c
16255  6B38 32            mov bl, [d]
16256  6B39 A7 00         mov bh, 0
16257  6B3B 38 00 00      mov c, 0
16258  6B3E             ; --- START RELATIONAL
16259  6B3E D7            push a
16260  6B3F 11            mov a, b
16261  6B40 FD 2E 30 00   mov32 cb, $00000030
16261  6B44 00 00 
16262  6B46 B0            cmp a, b
16263  6B47 FD 80         sge ; >=
16264  6B49 E4            pop a
16265  6B4A             ; --- END RELATIONAL
16266  6B4A             ; --- START LOGICAL AND
16267  6B4A D7            push a
16268  6B4B 11            mov a, b
16269  6B4C FA 05 00      lea d, [bp + 5] ; $c
16270  6B4F 32            mov bl, [d]
16271  6B50 A7 00         mov bh, 0
16272  6B52 38 00 00      mov c, 0
16273  6B55             ; --- START RELATIONAL
16274  6B55 D7            push a
16275  6B56 11            mov a, b
16276  6B57 FD 2E 39 00   mov32 cb, $00000039
16276  6B5B 00 00 
16277  6B5D B0            cmp a, b
16278  6B5E FD 74         sle ; <= (signed)
16279  6B60 E4            pop a
16280  6B61             ; --- END RELATIONAL
16281  6B61 FD A7         sand a, b
16282  6B63 E4            pop a
16283  6B64             ; --- END LOGICAL AND
16284  6B64 F9            leave
16285  6B65 09            ret
16286  6B66             
16287  6B66             abs:
16288  6B66 F8 00 00      enter 0 ; (push bp; mov bp, sp)
16289  6B69             ; return i < 0 ? -i : i; 
16290  6B69             _ternary848_cond:
16291  6B69 FA 05 00      lea d, [bp + 5] ; $i
16292  6B6C 2A            mov b, [d]
16293  6B6D 38 00 00      mov c, 0
16294  6B70             ; --- START RELATIONAL
16295  6B70 D7            push a
16296  6B71 11            mov a, b
16297  6B72 FD 2E 00 00   mov32 cb, $00000000
16297  6B76 00 00 
16298  6B78 B0            cmp a, b
16299  6B79 FD 73         slt ; < (signed)
16300  6B7B E4            pop a
16301  6B7C             ; --- END RELATIONAL
16302  6B7C C0 00 00      cmp b, 0
16303  6B7F C6 8E 6B      je _ternary848_FALSE
16304  6B82             _ternary848_TRUE:
16305  6B82 FA 05 00      lea d, [bp + 5] ; $i
16306  6B85 2A            mov b, [d]
16307  6B86 38 00 00      mov c, 0
16308  6B89 FD 97         neg b
16309  6B8B 0A 95 6B      jmp _ternary848_exit
16310  6B8E             _ternary848_FALSE:
16311  6B8E FA 05 00      lea d, [bp + 5] ; $i
16312  6B91 2A            mov b, [d]
16313  6B92 38 00 00      mov c, 0
16314  6B95             _ternary848_exit:
16315  6B95 F9            leave
16316  6B96 09            ret
16317  6B97             
16318  6B97             atoi:
16319  6B97 F8 00 00      enter 0 ; (push bp; mov bp, sp)
16320  6B9A             ; int result = 0;  // Initialize result 
16321  6B9A 52 02 00      sub sp, 2
16322  6B9D             ; --- START LOCAL VAR INITIALIZATION
16323  6B9D FA FF FF      lea d, [bp + -1] ; $result
16324  6BA0 DA            push d
16325  6BA1 FD 2E 00 00   mov32 cb, $00000000
16325  6BA5 00 00 
16326  6BA7 E7            pop d
16327  6BA8 FD 43         mov [d], b
16328  6BAA             ; --- END LOCAL VAR INITIALIZATION
16329  6BAA             ; int sign = 1;    // Initialize sign as positive 
16330  6BAA 52 02 00      sub sp, 2
16331  6BAD             ; --- START LOCAL VAR INITIALIZATION
16332  6BAD FA FD FF      lea d, [bp + -3] ; $sign
16333  6BB0 DA            push d
16334  6BB1 FD 2E 01 00   mov32 cb, $00000001
16334  6BB5 00 00 
16335  6BB7 E7            pop d
16336  6BB8 FD 43         mov [d], b
16337  6BBA             ; --- END LOCAL VAR INITIALIZATION
16338  6BBA             ; while (*str == ' ') str++; 
16339  6BBA             _while849_cond:
16340  6BBA FA 05 00      lea d, [bp + 5] ; $str
16341  6BBD 2A            mov b, [d]
16342  6BBE 38 00 00      mov c, 0
16343  6BC1 74            mov d, b
16344  6BC2 32            mov bl, [d]
16345  6BC3 A7 00         mov bh, 0
16346  6BC5 38 00 00      mov c, 0
16347  6BC8             ; --- START RELATIONAL
16348  6BC8 D7            push a
16349  6BC9 11            mov a, b
16350  6BCA FD 2E 20 00   mov32 cb, $00000020
16350  6BCE 00 00 
16351  6BD0 B0            cmp a, b
16352  6BD1 FD 71         seq ; ==
16353  6BD3 E4            pop a
16354  6BD4             ; --- END RELATIONAL
16355  6BD4 C0 00 00      cmp b, 0
16356  6BD7 C6 ED 6B      je _while849_exit
16357  6BDA             _while849_block:
16358  6BDA             ; str++; 
16359  6BDA FA 05 00      lea d, [bp + 5] ; $str
16360  6BDD 2A            mov b, [d]
16361  6BDE 38 00 00      mov c, 0
16362  6BE1 FD 77         inc b
16363  6BE3 FA 05 00      lea d, [bp + 5] ; $str
16364  6BE6 FD 43         mov [d], b
16365  6BE8 FD 7D         dec b
16366  6BEA 0A BA 6B      jmp _while849_cond
16367  6BED             _while849_exit:
16368  6BED             ; if (*str == '-' || *str == '+') { 
16369  6BED             _if850_cond:
16370  6BED FA 05 00      lea d, [bp + 5] ; $str
16371  6BF0 2A            mov b, [d]
16372  6BF1 38 00 00      mov c, 0
16373  6BF4 74            mov d, b
16374  6BF5 32            mov bl, [d]
16375  6BF6 A7 00         mov bh, 0
16376  6BF8 38 00 00      mov c, 0
16377  6BFB             ; --- START RELATIONAL
16378  6BFB D7            push a
16379  6BFC 11            mov a, b
16380  6BFD FD 2E 2D 00   mov32 cb, $0000002d
16380  6C01 00 00 
16381  6C03 B0            cmp a, b
16382  6C04 FD 71         seq ; ==
16383  6C06 E4            pop a
16384  6C07             ; --- END RELATIONAL
16385  6C07             ; --- START LOGICAL OR
16386  6C07 D7            push a
16387  6C08 11            mov a, b
16388  6C09 FA 05 00      lea d, [bp + 5] ; $str
16389  6C0C 2A            mov b, [d]
16390  6C0D 38 00 00      mov c, 0
16391  6C10 74            mov d, b
16392  6C11 32            mov bl, [d]
16393  6C12 A7 00         mov bh, 0
16394  6C14 38 00 00      mov c, 0
16395  6C17             ; --- START RELATIONAL
16396  6C17 D7            push a
16397  6C18 11            mov a, b
16398  6C19 FD 2E 2B 00   mov32 cb, $0000002b
16398  6C1D 00 00 
16399  6C1F B0            cmp a, b
16400  6C20 FD 71         seq ; ==
16401  6C22 E4            pop a
16402  6C23             ; --- END RELATIONAL
16403  6C23 FD A8         sor a, b ; ||
16404  6C25 E4            pop a
16405  6C26             ; --- END LOGICAL OR
16406  6C26 C0 00 00      cmp b, 0
16407  6C29 C6 6F 6C      je _if850_exit
16408  6C2C             _if850_TRUE:
16409  6C2C             ; if (*str == '-') sign = -1; 
16410  6C2C             _if851_cond:
16411  6C2C FA 05 00      lea d, [bp + 5] ; $str
16412  6C2F 2A            mov b, [d]
16413  6C30 38 00 00      mov c, 0
16414  6C33 74            mov d, b
16415  6C34 32            mov bl, [d]
16416  6C35 A7 00         mov bh, 0
16417  6C37 38 00 00      mov c, 0
16418  6C3A             ; --- START RELATIONAL
16419  6C3A D7            push a
16420  6C3B 11            mov a, b
16421  6C3C FD 2E 2D 00   mov32 cb, $0000002d
16421  6C40 00 00 
16422  6C42 B0            cmp a, b
16423  6C43 FD 71         seq ; ==
16424  6C45 E4            pop a
16425  6C46             ; --- END RELATIONAL
16426  6C46 C0 00 00      cmp b, 0
16427  6C49 C6 5C 6C      je _if851_exit
16428  6C4C             _if851_TRUE:
16429  6C4C             ; sign = -1; 
16430  6C4C FA FD FF      lea d, [bp + -3] ; $sign
16431  6C4F DA            push d
16432  6C50 FD 2E FF FF   mov32 cb, $ffffffff
16432  6C54 FF FF 
16433  6C56 E7            pop d
16434  6C57 FD 43         mov [d], b
16435  6C59 0A 5C 6C      jmp _if851_exit
16436  6C5C             _if851_exit:
16437  6C5C             ; str++; 
16438  6C5C FA 05 00      lea d, [bp + 5] ; $str
16439  6C5F 2A            mov b, [d]
16440  6C60 38 00 00      mov c, 0
16441  6C63 FD 77         inc b
16442  6C65 FA 05 00      lea d, [bp + 5] ; $str
16443  6C68 FD 43         mov [d], b
16444  6C6A FD 7D         dec b
16445  6C6C 0A 6F 6C      jmp _if850_exit
16446  6C6F             _if850_exit:
16447  6C6F             ; while (*str >= '0' && *str <= '9') { 
16448  6C6F             _while852_cond:
16449  6C6F FA 05 00      lea d, [bp + 5] ; $str
16450  6C72 2A            mov b, [d]
16451  6C73 38 00 00      mov c, 0
16452  6C76 74            mov d, b
16453  6C77 32            mov bl, [d]
16454  6C78 A7 00         mov bh, 0
16455  6C7A 38 00 00      mov c, 0
16456  6C7D             ; --- START RELATIONAL
16457  6C7D D7            push a
16458  6C7E 11            mov a, b
16459  6C7F FD 2E 30 00   mov32 cb, $00000030
16459  6C83 00 00 
16460  6C85 B0            cmp a, b
16461  6C86 FD 82         sgeu ; >= (unsigned)
16462  6C88 E4            pop a
16463  6C89             ; --- END RELATIONAL
16464  6C89             ; --- START LOGICAL AND
16465  6C89 D7            push a
16466  6C8A 11            mov a, b
16467  6C8B FA 05 00      lea d, [bp + 5] ; $str
16468  6C8E 2A            mov b, [d]
16469  6C8F 38 00 00      mov c, 0
16470  6C92 74            mov d, b
16471  6C93 32            mov bl, [d]
16472  6C94 A7 00         mov bh, 0
16473  6C96 38 00 00      mov c, 0
16474  6C99             ; --- START RELATIONAL
16475  6C99 D7            push a
16476  6C9A 11            mov a, b
16477  6C9B FD 2E 39 00   mov32 cb, $00000039
16477  6C9F 00 00 
16478  6CA1 B0            cmp a, b
16479  6CA2 FD 76         sleu ; <= (unsigned)
16480  6CA4 E4            pop a
16481  6CA5             ; --- END RELATIONAL
16482  6CA5 FD A7         sand a, b
16483  6CA7 E4            pop a
16484  6CA8             ; --- END LOGICAL AND
16485  6CA8 C0 00 00      cmp b, 0
16486  6CAB C6 37 6D      je _while852_exit
16487  6CAE             _while852_block:
16488  6CAE             ; result = result * 10 + (*str - '0'); 
16489  6CAE FA FF FF      lea d, [bp + -1] ; $result
16490  6CB1 DA            push d
16491  6CB2 FA FF FF      lea d, [bp + -1] ; $result
16492  6CB5 2A            mov b, [d]
16493  6CB6 38 00 00      mov c, 0
16494  6CB9             ; --- START FACTORS
16495  6CB9 D7            push a
16496  6CBA FD D8         push g
16497  6CBC 11            mov a, b
16498  6CBD FD 7A         mov g, c
16499  6CBF FD 2E 0A 00   mov32 cb, $0000000a
16499  6CC3 00 00 
16500  6CC5 D7            push a     ; save left operand
16501  6CC6 8E            xor a, b   ; xor sign bits
16502  6CC7 FD AA         swp a      ; swap bytes
16503  6CC9 83            mov cl, al ; save result of xor into 'dl'
16504  6CCA E4            pop a      ; restore left side operator
16505  6CCB DF            push cl    ; save result of xor above
16506  6CCC FD AA         swp a  
16507  6CCE 93 80         test al, $80  
16508  6CD0 FD AA         swp a  
16509  6CD2 C6 D7 6C      jz skip_invert_a_854  
16510  6CD5 FD 95         neg a 
16511  6CD7             skip_invert_a_854:   
16512  6CD7 FD AB         swp b
16513  6CD9 FD 93 80      test bl, $80  
16514  6CDC FD AB         swp b
16515  6CDE C6 E3 6C      jz skip_invert_b_854  
16516  6CE1 FD 97         neg b 
16517  6CE3             skip_invert_b_854:   
16518  6CE3 AC            mul a, b ; *
16519  6CE4 FD 78         mov g, a
16520  6CE6 11            mov a, b
16521  6CE7 EA            pop bl
16522  6CE8 FD 93 80      test bl, $80
16523  6CEB C6 F8 6C      jz _same_signs_854
16524  6CEE 2F            mov bl, al
16525  6CEF 95            not a
16526  6CF0 FD 97         neg b
16527  6CF2 5B 00 00      adc a, 0
16528  6CF5 FD 78         mov g, a
16529  6CF7 11            mov a, b
16530  6CF8             _same_signs_854:
16531  6CF8 FD 38         mov c, g
16532  6CFA 27            mov b, a
16533  6CFB FD F1         pop g
16534  6CFD E4            pop a
16535  6CFE             ; --- END FACTORS
16536  6CFE             ; --- START TERMS
16537  6CFE D7            push a
16538  6CFF FD D8         push g
16539  6D01 11            mov a, b
16540  6D02 FD 7A         mov g, c
16541  6D04 FA 05 00      lea d, [bp + 5] ; $str
16542  6D07 2A            mov b, [d]
16543  6D08 38 00 00      mov c, 0
16544  6D0B 74            mov d, b
16545  6D0C 32            mov bl, [d]
16546  6D0D A7 00         mov bh, 0
16547  6D0F 38 00 00      mov c, 0
16548  6D12             ; --- START TERMS
16549  6D12 D7            push a
16550  6D13 11            mov a, b
16551  6D14 FD 2E 30 00   mov32 cb, $00000030
16551  6D18 00 00 
16552  6D1A 60            sub a, b
16553  6D1B 27            mov b, a
16554  6D1C E4            pop a
16555  6D1D             ; --- END TERMS
16556  6D1D 56            add b, a
16557  6D1E FD F1         pop g
16558  6D20 E4            pop a
16559  6D21             ; --- END TERMS
16560  6D21 E7            pop d
16561  6D22 FD 43         mov [d], b
16562  6D24             ; str++; 
16563  6D24 FA 05 00      lea d, [bp + 5] ; $str
16564  6D27 2A            mov b, [d]
16565  6D28 38 00 00      mov c, 0
16566  6D2B FD 77         inc b
16567  6D2D FA 05 00      lea d, [bp + 5] ; $str
16568  6D30 FD 43         mov [d], b
16569  6D32 FD 7D         dec b
16570  6D34 0A 6F 6C      jmp _while852_cond
16571  6D37             _while852_exit:
16572  6D37             ; return sign * result; 
16573  6D37 FA FD FF      lea d, [bp + -3] ; $sign
16574  6D3A 2A            mov b, [d]
16575  6D3B 38 00 00      mov c, 0
16576  6D3E             ; --- START FACTORS
16577  6D3E D7            push a
16578  6D3F FD D8         push g
16579  6D41 11            mov a, b
16580  6D42 FD 7A         mov g, c
16581  6D44 FA FF FF      lea d, [bp + -1] ; $result
16582  6D47 2A            mov b, [d]
16583  6D48 38 00 00      mov c, 0
16584  6D4B D7            push a     ; save left operand
16585  6D4C 8E            xor a, b   ; xor sign bits
16586  6D4D FD AA         swp a      ; swap bytes
16587  6D4F 83            mov cl, al ; save result of xor into 'dl'
16588  6D50 E4            pop a      ; restore left side operator
16589  6D51 DF            push cl    ; save result of xor above
16590  6D52 FD AA         swp a  
16591  6D54 93 80         test al, $80  
16592  6D56 FD AA         swp a  
16593  6D58 C6 5D 6D      jz skip_invert_a_856  
16594  6D5B FD 95         neg a 
16595  6D5D             skip_invert_a_856:   
16596  6D5D FD AB         swp b
16597  6D5F FD 93 80      test bl, $80  
16598  6D62 FD AB         swp b
16599  6D64 C6 69 6D      jz skip_invert_b_856  
16600  6D67 FD 97         neg b 
16601  6D69             skip_invert_b_856:   
16602  6D69 AC            mul a, b ; *
16603  6D6A FD 78         mov g, a
16604  6D6C 11            mov a, b
16605  6D6D EA            pop bl
16606  6D6E FD 93 80      test bl, $80
16607  6D71 C6 7E 6D      jz _same_signs_856
16608  6D74 2F            mov bl, al
16609  6D75 95            not a
16610  6D76 FD 97         neg b
16611  6D78 5B 00 00      adc a, 0
16612  6D7B FD 78         mov g, a
16613  6D7D 11            mov a, b
16614  6D7E             _same_signs_856:
16615  6D7E FD 38         mov c, g
16616  6D80 27            mov b, a
16617  6D81 FD F1         pop g
16618  6D83 E4            pop a
16619  6D84             ; --- END FACTORS
16620  6D84 F9            leave
16621  6D85 09            ret
16622  6D86             ; --- END TEXT SEGMENT
16623  6D86             
16624  6D86             ; --- BEGIN DATA SEGMENT
16625  6D86 00          _starbases: .fill 1, 0
16626  6D87 00          _base_y: .fill 1, 0
16627  6D88 00          _base_x: .fill 1, 0
16628  6D89 00          _starbases_left: .fill 1, 0
16629  6D8A 00 00 00 FF _c_data: .db $00,$00,$00,$ff,$ff,$ff,$00,$01,$01,$01,$00,$01,$01,$01,$00,
16629  6D8E FF FF 00 01 
16629  6D92 01 01 00 01 
16629  6D96 01 01 00 
16630  6D99 FF FF FF 00 .db $ff,$ff,$ff,$00,$01,$01,
16630  6D9D 01 01 
16631  6D9F             
16632  6D9F 00 00 00 00 .fill 9, 0
16632  6DA3 00 00 00 00 
16632  6DA7 00 
16633  6DA8 00          _docked: .fill 1, 0
16634  6DA9 00 00       _energy: .fill 2, 0
16635  6DAB B8 0B       _energy0: .dw $0bb8
16636  6DAD 00 00 00 00 _map_data: .fill 162, 0
16636  6DB1 00 00 00 00 
16636  6DB5 00 00 00 00 
16636  6DB9 00 00 00 00 
16636  6DBD 00 00 00 00 
16636  6DC1 00 00 00 00 
16636  6DC5 00 00 00 00 
16636  6DC9 00 00 00 00 
16636  6DCD 00 00 00 00 
16636  6DD1 00 00 00 00 
16636  6DD5 00 00 00 00 
16636  6DD9 00 00 00 00 
16636  6DDD 00 00 00 00 
16636  6DE1 00 00 00 00 
16636  6DE5 00 00 00 00 
16636  6DE9 00 00 00 00 
16636  6DED 00 00 00 00 
16636  6DF1 00 00 00 00 
16636  6DF5 00 00 00 00 
16636  6DF9 00 00 00 00 
16636  6DFD 00 00 00 00 
16636  6E01 00 00 00 00 
16636  6E05 00 00 00 00 
16636  6E09 00 00 00 00 
16636  6E0D 00 00 00 00 
16636  6E11 00 00 00 00 
16636  6E15 00 00 00 00 
16636  6E19 00 00 00 00 
16636  6E1D 00 00 00 00 
16636  6E21 00 00 00 00 
16636  6E25 00 00 00 00 
16636  6E29 00 00 00 00 
16636  6E2D 00 00 00 00 
16636  6E31 00 00 00 00 
16636  6E35 00 00 00 00 
16636  6E39 00 00 00 00 
16636  6E3D 00 00 00 00 
16636  6E41 00 00 00 00 
16636  6E45 00 00 00 00 
16636  6E49 00 00 00 00 
16636  6E4D 00 00 
16637  6E4F 00 00 00 00 _kdata_data: .fill 12, 0
16637  6E53 00 00 00 00 
16637  6E57 00 00 00 00 
16638  6E5B 00          _klingons: .fill 1, 0
16639  6E5C 00          _total_klingons: .fill 1, 0
16640  6E5D 00          _klingons_left: .fill 1, 0
16641  6E5E 00          _torps: .fill 1, 0
16642  6E5F 0A          _torps0: .db $0a
16643  6E60 00 00       _quad_y: .fill 2, 0
16644  6E62 00 00       _quad_x: .fill 2, 0
16645  6E64 00 00       _shield: .fill 2, 0
16646  6E66 00          _stars: .fill 1, 0
16647  6E67 00 00       _time_start: .fill 2, 0
16648  6E69 00 00       _time_up: .fill 2, 0
16649  6E6B 00 00 00 00 _damage_data: .fill 18, 0
16649  6E6F 00 00 00 00 
16649  6E73 00 00 00 00 
16649  6E77 00 00 00 00 
16649  6E7B 00 00 
16650  6E7D 00 00       _d4: .fill 2, 0
16651  6E7F 00 00       _ship_y: .fill 2, 0
16652  6E81 00 00       _ship_x: .fill 2, 0
16653  6E83 00 00       _stardate: .fill 2, 0
16654  6E85 00 00 00 00 _quad_data: .fill 64, 0
16654  6E89 00 00 00 00 
16654  6E8D 00 00 00 00 
16654  6E91 00 00 00 00 
16654  6E95 00 00 00 00 
16654  6E99 00 00 00 00 
16654  6E9D 00 00 00 00 
16654  6EA1 00 00 00 00 
16654  6EA5 00 00 00 00 
16654  6EA9 00 00 00 00 
16654  6EAD 00 00 00 00 
16654  6EB1 00 00 00 00 
16654  6EB5 00 00 00 00 
16654  6EB9 00 00 00 00 
16654  6EBD 00 00 00 00 
16654  6EC1 00 00 00 00 
16655  6EC5 00 00 00 00 _quadname_data: .fill 12, 0
16655  6EC9 00 00 00 00 
16655  6ECD 00 00 00 00 
16656  6ED1 72 65 70 6F _inc_1_data: .db "reports:\n  Incorrect course data, sir!\n", 0
16656  6ED5 72 74 73 3A 
16656  6ED9 0A 20 20 49 
16656  6EDD 6E 63 6F 72 
16656  6EE1 72 65 63 74 
16656  6EE5 20 63 6F 75 
16656  6EE9 72 73 65 20 
16656  6EED 64 61 74 61 
16656  6EF1 2C 20 73 69 
16656  6EF5 72 21 0A 00 
16657  6EF9 D1 6E       _inc_1: .dw _inc_1_data
16658  6EFB 73 70 74 70 _quad_name_data: .dw _s0, _s1, _s2, _s3, _s4, _s5, _s6, _s7, _s8, _s9, _s10, _s11, _s12, _s13, _s14, 
16658  6EFF 7C 70 82 70 
16658  6F03 8A 70 8F 70 
16658  6F07 97 70 9E 70 
16658  6F0B AA 70 B1 70 
16658  6F0F B8 70 BE 70 
16658  6F13 C6 70 D1 70 
16658  6F17 DB 70 
16659  6F19 E3 70 EC 70 .dw _s15, _s16, 
16660  6F1D             
16661  6F1D 00 00 00 00 .fill 34, 0
16661  6F21 00 00 00 00 
16661  6F25 00 00 00 00 
16661  6F29 00 00 00 00 
16661  6F2D 00 00 00 00 
16661  6F31 00 00 00 00 
16661  6F35 00 00 00 00 
16661  6F39 00 00 00 00 
16661  6F3D 00 00 
16662  6F3F 73 70 F2 70 _device_name_data: .dw _s0, _s17, _s18, _s19, _s20, _s21, _s22, _s23, _s24, 
16662  6F43 FF 70 13 71 
16662  6F47 26 71 35 71 
16662  6F4B 42 71 51 71 
16662  6F4F 60 71 
16663  6F51             
16664  6F51 00 00 00 00 .fill 18, 0
16664  6F55 00 00 00 00 
16664  6F59 00 00 00 00 
16664  6F5D 00 00 00 00 
16664  6F61 00 00 
16665  6F63 44 61 6D 61 _dcr_1_data: .db "Damage Control report:", 0
16665  6F67 67 65 20 43 
16665  6F6B 6F 6E 74 72 
16665  6F6F 6F 6C 20 72 
16665  6F73 65 70 6F 72 
16665  6F77 74 3A 00 
16666  6F7A 63 6F       _dcr_1: .dw _dcr_1_data
16667  6F7C 00 00       _plural_2_data: .db $00,$00,
16668  6F7E 69 73 00    _plural_data: .db $69,$73,$00,
16669  6F81             
16670  6F81 00          .fill 1, 0
16671  6F82 08          _warpmax_data: .db $08,
16672  6F83             
16673  6F83 00 00 00    .fill 3, 0
16674  6F86 2D 2D 2D 2D _srs_1_data: .db "------------------------", 0
16674  6F8A 2D 2D 2D 2D 
16674  6F8E 2D 2D 2D 2D 
16674  6F92 2D 2D 2D 2D 
16674  6F96 2D 2D 2D 2D 
16674  6F9A 2D 2D 2D 2D 
16674  6F9E 00 
16675  6F9F 86 6F       _srs_1: .dw _srs_1_data
16676  6FA1 71 71 75 71 _tilestr_data: .dw _s25, _s26, _s27, _s28, _s29, 
16676  6FA5 79 71 7D 71 
16676  6FA9 81 71 
16677  6FAB             
16678  6FAB 00 00 00 00 .fill 10, 0
16678  6FAF 00 00 00 00 
16678  6FB3 00 00 
16679  6FB5 2D 2D 2D 2D _lrs_1_data: .db "-------------------\n", 0
16679  6FB9 2D 2D 2D 2D 
16679  6FBD 2D 2D 2D 2D 
16679  6FC1 2D 2D 2D 2D 
16679  6FC5 2D 2D 2D 0A 
16679  6FC9 00 
16680  6FCA B5 6F       _lrs_1: .dw _lrs_1_data
16681  6FCC 20 20 20 2D _gr_1_data: .db "   ----- ----- ----- ----- ----- ----- ----- -----\n", 0
16681  6FD0 2D 2D 2D 2D 
16681  6FD4 20 2D 2D 2D 
16681  6FD8 2D 2D 20 2D 
16681  6FDC 2D 2D 2D 2D 
16681  6FE0 20 2D 2D 2D 
16681  6FE4 2D 2D 20 2D 
16681  6FE8 2D 2D 2D 2D 
16681  6FEC 20 2D 2D 2D 
16681  6FF0 2D 2D 20 2D 
16681  6FF4 2D 2D 2D 2D 
16681  6FF8 20 2D 2D 2D 
16681  6FFC 2D 2D 0A 00 
16682  7000 CC 6F       _gr_1: .dw _gr_1_data
16683  7002 73 00       _str_s_data: .db "s", 0
16684  7004 02 70       _str_s: .dw _str_s_data
16685  7006 20 20 2D 2D _gm_1_data: .db "  ----- ----- ----- ----- ----- ----- ----- -----\n", 0
16685  700A 2D 2D 2D 20 
16685  700E 2D 2D 2D 2D 
16685  7012 2D 20 2D 2D 
16685  7016 2D 2D 2D 20 
16685  701A 2D 2D 2D 2D 
16685  701E 2D 20 2D 2D 
16685  7022 2D 2D 2D 20 
16685  7026 2D 2D 2D 2D 
16685  702A 2D 20 2D 2D 
16685  702E 2D 2D 2D 20 
16685  7032 2D 2D 2D 2D 
16685  7036 2D 0A 00 
16686  7039 06 70       _gm_1: .dw _gm_1_data
16687  703B 20 20 44 49 _dist_1_data: .db "  DISTANCE = %s\n\n", 0
16687  703F 53 54 41 4E 
16687  7043 43 45 20 3D 
16687  7047 20 25 73 0A 
16687  704B 0A 00 
16688  704D 3B 70       _dist_1: .dw _dist_1_data
16689  704F 00 00 00 00 st_print100_buf_dt: .fill 16, 0
16689  7053 00 00 00 00 
16689  7057 00 00 00 00 
16689  705B 00 00 00 00 
16690  705F             
16691  705F             st_quadrant_name_sect_name_dt: 
16692  705F 73 70 33 83 .dw _s0, _s164, _s165, _s166, _s167, 
16692  7063 36 83 3A 83 
16692  7067 3F 83 
16693  7069 00 00 00 00 .fill 10, 0
16693  706D 00 00 00 00 
16693  7071 00 00 
16694  7073 00          _s0: .db "", 0
16695  7074 41 6E 74 61 _s1: .db "Antares", 0
16695  7078 72 65 73 00 
16696  707C 52 69 67 65 _s2: .db "Rigel", 0
16696  7080 6C 00 
16697  7082 50 72 6F 63 _s3: .db "Procyon", 0
16697  7086 79 6F 6E 00 
16698  708A 56 65 67 61 _s4: .db "Vega", 0
16698  708E 00 
16699  708F 43 61 6E 6F _s5: .db "Canopus", 0
16699  7093 70 75 73 00 
16700  7097 41 6C 74 61 _s6: .db "Altair", 0
16700  709B 69 72 00 
16701  709E 53 61 67 69 _s7: .db "Sagittarius", 0
16701  70A2 74 74 61 72 
16701  70A6 69 75 73 00 
16702  70AA 50 6F 6C 6C _s8: .db "Pollux", 0
16702  70AE 75 78 00 
16703  70B1 53 69 72 69 _s9: .db "Sirius", 0
16703  70B5 75 73 00 
16704  70B8 44 65 6E 65 _s10: .db "Deneb", 0
16704  70BC 62 00 
16705  70BE 43 61 70 65 _s11: .db "Capella", 0
16705  70C2 6C 6C 61 00 
16706  70C6 42 65 74 65 _s12: .db "Betelgeuse", 0
16706  70CA 6C 67 65 75 
16706  70CE 73 65 00 
16707  70D1 41 6C 64 65 _s13: .db "Aldebaran", 0
16707  70D5 62 61 72 61 
16707  70D9 6E 00 
16708  70DB 52 65 67 75 _s14: .db "Regulus", 0
16708  70DF 6C 75 73 00 
16709  70E3 41 72 63 74 _s15: .db "Arcturus", 0
16709  70E7 75 72 75 73 
16709  70EB 00 
16710  70EC 53 70 69 63 _s16: .db "Spica", 0
16710  70F0 61 00 
16711  70F2 57 61 72 70 _s17: .db "Warp engines", 0
16711  70F6 20 65 6E 67 
16711  70FA 69 6E 65 73 
16711  70FE 00 
16712  70FF 53 68 6F 72 _s18: .db "Short range sensors", 0
16712  7103 74 20 72 61 
16712  7107 6E 67 65 20 
16712  710B 73 65 6E 73 
16712  710F 6F 72 73 00 
16713  7113 4C 6F 6E 67 _s19: .db "Long range sensors", 0
16713  7117 20 72 61 6E 
16713  711B 67 65 20 73 
16713  711F 65 6E 73 6F 
16713  7123 72 73 00 
16714  7126 50 68 61 73 _s20: .db "Phaser control", 0
16714  712A 65 72 20 63 
16714  712E 6F 6E 74 72 
16714  7132 6F 6C 00 
16715  7135 50 68 6F 74 _s21: .db "Photon tubes", 0
16715  7139 6F 6E 20 74 
16715  713D 75 62 65 73 
16715  7141 00 
16716  7142 44 61 6D 61 _s22: .db "Damage control", 0
16716  7146 67 65 20 63 
16716  714A 6F 6E 74 72 
16716  714E 6F 6C 00 
16717  7151 53 68 69 65 _s23: .db "Shield control", 0
16717  7155 6C 64 20 63 
16717  7159 6F 6E 74 72 
16717  715D 6F 6C 00 
16718  7160 4C 69 62 72 _s24: .db "Library computer", 0
16718  7164 61 72 79 20 
16718  7168 63 6F 6D 70 
16718  716C 75 74 65 72 
16718  7170 00 
16719  7171 20 20 20 00 _s25: .db "   ", 0
16720  7175 20 2A 20 00 _s26: .db " * ", 0
16721  7179 3E 21 3C 00 _s27: .db ">!<", 0
16722  717D 2B 4B 2B 00 _s28: .db "+K+", 0
16723  7181 3C 2A 3E 00 _s29: .db "<*>", 0
16724  7185 61 72 65 00 _s30: .db "are", 0
16725  7189 69 73 00    _s31: .db "is", 0
16726  718C 25 73 20 25 _s32: .db "%s %s inoperable.\n", 0
16726  7190 73 20 69 6E 
16726  7194 6F 70 65 72 
16726  7198 61 62 6C 65 
16726  719C 2E 0A 00 
16727  719F 73 74 61 72 _s33: .db "startrek.intro", 0
16727  71A3 74 72 65 6B 
16727  71A7 2E 69 6E 74 
16727  71AB 72 6F 00 
16728  71AE 73 74 61 72 _s34: .db "startrek.doc", 0
16728  71B2 74 72 65 6B 
16728  71B6 2E 64 6F 63 
16728  71BA 00 
16729  71BB 73 74 61 72 _s35: .db "startrek.logo", 0
16729  71BF 74 72 65 6B 
16729  71C3 2E 6C 6F 67 
16729  71C7 6F 00 
16730  71C9 73 74 61 72 _s36: .db "startrek.fatal", 0
16730  71CD 74 72 65 6B 
16730  71D1 2E 66 61 74 
16730  71D5 61 6C 00 
16731  71D8 43 6F 6D 6D _s37: .db "Command? ", 0
16731  71DC 61 6E 64 3F 
16731  71E0 20 00 
16732  71E2 6E 61 76 00 _s38: .db "nav", 0
16733  71E6 73 72 73 00 _s39: .db "srs", 0
16734  71EA 6C 72 73 00 _s40: .db "lrs", 0
16735  71EE 70 68 61 00 _s41: .db "pha", 0
16736  71F2 74 6F 72 00 _s42: .db "tor", 0
16737  71F6 73 68 69 00 _s43: .db "shi", 0
16738  71FA 64 61 6D 00 _s44: .db "dam", 0
16739  71FE 63 6F 6D 00 _s45: .db "com", 0
16740  7202 78 78 78 00 _s46: .db "xxx", 0
16741  7206 45 6E 74 65 _s47: .db "Enter one of the following:\n", 0
16741  720A 72 20 6F 6E 
16741  720E 65 20 6F 66 
16741  7212 20 74 68 65 
16741  7216 20 66 6F 6C 
16741  721A 6C 6F 77 69 
16741  721E 6E 67 3A 0A 
16741  7222 00 
16742  7223 20 20 6E 61 _s48: .db "  nav - To Set Course", 0
16742  7227 76 20 2D 20 
16742  722B 54 6F 20 53 
16742  722F 65 74 20 43 
16742  7233 6F 75 72 73 
16742  7237 65 00 
16743  7239 20 20 73 72 _s49: .db "  srs - Short Range Sensors", 0
16743  723D 73 20 2D 20 
16743  7241 53 68 6F 72 
16743  7245 74 20 52 61 
16743  7249 6E 67 65 20 
16743  724D 53 65 6E 73 
16743  7251 6F 72 73 00 
16744  7255 20 20 6C 72 _s50: .db "  lrs - Long Range Sensors", 0
16744  7259 73 20 2D 20 
16744  725D 4C 6F 6E 67 
16744  7261 20 52 61 6E 
16744  7265 67 65 20 53 
16744  7269 65 6E 73 6F 
16744  726D 72 73 00 
16745  7270 20 20 70 68 _s51: .db "  pha - Phasers", 0
16745  7274 61 20 2D 20 
16745  7278 50 68 61 73 
16745  727C 65 72 73 00 
16746  7280 20 20 74 6F _s52: .db "  tor - Photon Torpedoes", 0
16746  7284 72 20 2D 20 
16746  7288 50 68 6F 74 
16746  728C 6F 6E 20 54 
16746  7290 6F 72 70 65 
16746  7294 64 6F 65 73 
16746  7298 00 
16747  7299 20 20 73 68 _s53: .db "  shi - Shield Control", 0
16747  729D 69 20 2D 20 
16747  72A1 53 68 69 65 
16747  72A5 6C 64 20 43 
16747  72A9 6F 6E 74 72 
16747  72AD 6F 6C 00 
16748  72B0 20 20 64 61 _s54: .db "  dam - Damage Control", 0
16748  72B4 6D 20 2D 20 
16748  72B8 44 61 6D 61 
16748  72BC 67 65 20 43 
16748  72C0 6F 6E 74 72 
16748  72C4 6F 6C 00 
16749  72C7 20 20 63 6F _s55: .db "  com - Library Computer", 0
16749  72CB 6D 20 2D 20 
16749  72CF 4C 69 62 72 
16749  72D3 61 72 79 20 
16749  72D7 43 6F 6D 70 
16749  72DB 75 74 65 72 
16749  72DF 00 
16750  72E0 20 20 78 78 _s56: .db "  xxx - Resign Command\n", 0
16750  72E4 78 20 2D 20 
16750  72E8 52 65 73 69 
16750  72EC 67 6E 20 43 
16750  72F0 6F 6D 6D 61 
16750  72F4 6E 64 0A 00 
16751  72F8 73 00       _s57: .db "s", 0
16752  72FA 4E 6F 77 20 _s58: .db "Now entering %s quadrant...\n\n", 0
16752  72FE 65 6E 74 65 
16752  7302 72 69 6E 67 
16752  7306 20 25 73 20 
16752  730A 71 75 61 64 
16752  730E 72 61 6E 74 
16752  7312 2E 2E 2E 0A 
16752  7316 0A 00 
16753  7318 0A 59 6F 75 _s59: .db "\nYour mission begins with your starship located", 0
16753  731C 72 20 6D 69 
16753  7320 73 73 69 6F 
16753  7324 6E 20 62 65 
16753  7328 67 69 6E 73 
16753  732C 20 77 69 74 
16753  7330 68 20 79 6F 
16753  7334 75 72 20 73 
16753  7338 74 61 72 73 
16753  733C 68 69 70 20 
16753  7340 6C 6F 63 61 
16753  7344 74 65 64 00 
16754  7348 69 6E 20 74 _s60: .db "in the galactic quadrant %s.\n\n", 0
16754  734C 68 65 20 67 
16754  7350 61 6C 61 63 
16754  7354 74 69 63 20 
16754  7358 71 75 61 64 
16754  735C 72 61 6E 74 
16754  7360 20 25 73 2E 
16754  7364 0A 0A 00 
16755  7367 43 6F 6D 62 _s61: .db "Combat Area  Condition Red\n", 0
16755  736B 61 74 20 41 
16755  736F 72 65 61 20 
16755  7373 20 43 6F 6E 
16755  7377 64 69 74 69 
16755  737B 6F 6E 20 52 
16755  737F 65 64 0A 00 
16756  7383 53 68 69 65 _s62: .db "Shields Dangerously Low\n", 0
16756  7387 6C 64 73 20 
16756  738B 44 61 6E 67 
16756  738F 65 72 6F 75 
16756  7393 73 6C 79 20 
16756  7397 4C 6F 77 0A 
16756  739B 00 
16757  739C 43 6F 75 72 _s63: .db "Course (0-9): ", 0
16757  73A0 73 65 20 28 
16757  73A4 30 2D 39 29 
16757  73A8 3A 20 00 
16758  73AB 4C 74 2E 20 _s64: .db "Lt. Sulu%s", 0
16758  73AF 53 75 6C 75 
16758  73B3 25 73 00 
16759  73B6 30 2E 32 00 _s65: .db "0.2", 0
16760  73BA 57 61 72 70 _s66: .db "Warp Factor (0-%s): ", 0
16760  73BE 20 46 61 63 
16760  73C2 74 6F 72 20 
16760  73C6 28 30 2D 25 
16760  73CA 73 29 3A 20 
16760  73CE 00 
16761  73CF 57 61 72 70 _s67: .db "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n", 0
16761  73D3 20 45 6E 67 
16761  73D7 69 6E 65 73 
16761  73DB 20 61 72 65 
16761  73DF 20 64 61 6D 
16761  73E3 61 67 65 64 
16761  73E7 2E 20 4D 61 
16761  73EB 78 69 6D 75 
16761  73EF 6D 20 73 70 
16761  73F3 65 65 64 20 
16761  73F7 3D 20 57 61 
16761  73FB 72 70 20 30 
16761  73FF 2E 32 2E 0A 
16761  7403 0A 00 
16762  7405 43 68 69 65 _s68: .db "Chief Engineer Scott reports:\n  The engines won't take warp %s!\n\n", 0
16762  7409 66 20 45 6E 
16762  740D 67 69 6E 65 
16762  7411 65 72 20 53 
16762  7415 63 6F 74 74 
16762  7419 20 72 65 70 
16762  741D 6F 72 74 73 
16762  7421 3A 0A 20 20 
16762  7425 54 68 65 20 
16762  7429 65 6E 67 69 
16762  742D 6E 65 73 20 
16762  7431 77 6F 6E 27 
16762  7435 74 20 74 61 
16762  7439 6B 65 20 77 
16762  743D 61 72 70 20 
16762  7441 25 73 21 0A 
16762  7445 0A 
16763  7446 45 6E 67 69 _s69: .db "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", 0
16763  744A 6E 65 65 72 
16763  744E 69 6E 67 20 
16763  7452 72 65 70 6F 
16763  7456 72 74 73 3A 
16763  745A 0A 20 20 49 
16763  745E 6E 73 75 66 
16763  7462 66 69 63 69 
16763  7466 65 6E 74 20 
16763  746A 65 6E 65 72 
16763  746E 67 79 20 61 
16763  7472 76 61 69 6C 
16763  7476 61 62 6C 65 
16763  747A 20 66 6F 72 
16763  747E 20 6D 61 6E 
16763  7482 65 75 76 65 
16763  7486 72 69 6E 67 
16763  748A 20 61 74 20 
16763  748E 77 61 72 70 
16763  7492 20 25 73 21 
16763  7496 0A 0A 00 
16764  7499 44 65 66 6C _s70: .db "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", 0
16764  749D 65 63 74 6F 
16764  74A1 72 20 43 6F 
16764  74A5 6E 74 72 6F 
16764  74A9 6C 20 52 6F 
16764  74AD 6F 6D 20 61 
16764  74B1 63 6B 6E 6F 
16764  74B5 77 6C 65 64 
16764  74B9 67 65 73 3A 
16764  74BD 0A 20 20 25 
16764  74C1 64 20 75 6E 
16764  74C5 69 74 73 20 
16764  74C9 6F 66 20 65 
16764  74CD 6E 65 72 67 
16764  74D1 79 20 70 72 
16764  74D5 65 73 65 6E 
16764  74D9 74 6C 79 20 
16764  74DD 64 65 70 6C 
16764  74E1 6F 79 65 64 
16764  74E5 20 74 6F 20 
16764  74E9 73 68 69 65 
16764  74ED 6C 64 73 2E 
16764  74F1 0A 00 
16765  74F3 4C 54 2E 20 _s71: .db "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denie"
16765  74F7 55 68 75 72 
16765  74FB 61 20 72 65 
16765  74FF 70 6F 72 74 
16765  7503 73 3A 0A 20 
16765  7507 4D 65 73 73 
16765  750B 61 67 65 20 
16765  750F 66 72 6F 6D 
16765  7513 20 53 74 61 
16765  7517 72 66 6C 65 
16765  751B 65 74 20 43 
16765  751F 6F 6D 6D 61 
16765  7523 6E 64 3A 0A 
16765  7527 0A 20 50 65 
16765  752B 72 6D 69 73 
16765  752F 73 69 6F 6E 
16765  7533 20 74 6F 20 
16765  7537 61 74 74 65 
16765  753B 6D 70 74 20 
16765  753F 63 72 6F 73 
16765  7543 73 69 6E 67 
16765  7547 20 6F 66 20 
16765  754B 67 61 6C 61 
16765  754F 63 74 69 63 
16765  7553 20 70 65 72 
16765  7557 69 6D 65 74 
16765  755B 65 72 0A 20 
16765  755F 69 73 20 68 
16765  7563 65 72 65 62 
16765  7567 79 20 2A 64 
16765  756B 65 6E 69 65 
16766  756F 64 2A 2E 20 .db "d*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", 0
16766  7573 53 68 75 74 
16766  7577 20 64 6F 77 
16766  757B 6E 20 79 6F 
16766  757F 75 72 20 65 
16766  7583 6E 67 69 6E 
16766  7587 65 73 2E 0A 
16766  758B 0A 20 43 68 
16766  758F 69 65 66 20 
16766  7593 45 6E 67 69 
16766  7597 6E 65 65 72 
16766  759B 20 53 63 6F 
16766  759F 74 74 20 72 
16766  75A3 65 70 6F 72 
16766  75A7 74 73 3A 0A 
16766  75AB 20 57 61 72 
16766  75AF 70 20 45 6E 
16766  75B3 67 69 6E 65 
16766  75B7 73 20 73 68 
16766  75BB 75 74 20 64 
16766  75BF 6F 77 6E 20 
16766  75C3 61 74 20 73 
16766  75C7 65 63 74 6F 
16766  75CB 72 20 25 64 
16766  75CF 2C 20 25 64 
16766  75D3 20 6F 66 20 
16766  75D7 71 75 61 64 
16766  75DB 72 61 6E 74 
16766  75DF 20 25 64 2C 
16766  75E3 20 25 64 2E 
16766  75E7 0A 0A 00 
16767  75EA 57 61 72 70 _s72: .db "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", 0
16767  75EE 20 45 6E 67 
16767  75F2 69 6E 65 73 
16767  75F6 20 73 68 75 
16767  75FA 74 20 64 6F 
16767  75FE 77 6E 20 61 
16767  7602 74 20 73 65 
16767  7606 63 74 6F 72 
16767  760A 20 25 64 2C 
16767  760E 20 25 64 20 
16767  7612 64 75 65 20 
16767  7616 74 6F 20 62 
16767  761A 61 64 20 6E 
16767  761E 61 76 69 67 
16767  7622 61 74 69 6F 
16767  7626 6E 2E 0A 0A 
16767  762A 00 
16768  762B 53 68 69 65 _s73: .db "Shield Control supplies energy to complete maneuver.\n", 0
16768  762F 6C 64 20 43 
16768  7633 6F 6E 74 72 
16768  7637 6F 6C 20 73 
16768  763B 75 70 70 6C 
16768  763F 69 65 73 20 
16768  7643 65 6E 65 72 
16768  7647 67 79 20 74 
16768  764B 6F 20 63 6F 
16768  764F 6D 70 6C 65 
16768  7653 74 65 20 6D 
16768  7657 61 6E 65 75 
16768  765B 76 65 72 2E 
16768  765F 0A 00 
16769  7661 47 52 45 45 _s74: .db "GREEN", 0
16769  7665 4E 00 
16770  7667 59 45 4C 4C _s75: .db "YELLOW", 0
16770  766B 4F 57 00 
16771  766E 2A 52 45 44 _s76: .db "*RED*", 0
16771  7672 2A 00 
16772  7674 44 4F 43 4B _s77: .db "DOCKED", 0
16772  7678 45 44 00 
16773  767B 53 68 69 65 _s78: .db "Shields dropped for docking purposes.", 0
16773  767F 6C 64 73 20 
16773  7683 64 72 6F 70 
16773  7687 70 65 64 20 
16773  768B 66 6F 72 20 
16773  768F 64 6F 63 6B 
16773  7693 69 6E 67 20 
16773  7697 70 75 72 70 
16773  769B 6F 73 65 73 
16773  769F 2E 00 
16774  76A1 0A 2A 2A 2A _s79: .db "\n*** Short Range Sensors are out ***", 0
16774  76A5 20 53 68 6F 
16774  76A9 72 74 20 52 
16774  76AD 61 6E 67 65 
16774  76B1 20 53 65 6E 
16774  76B5 73 6F 72 73 
16774  76B9 20 61 72 65 
16774  76BD 20 6F 75 74 
16774  76C1 20 2A 2A 2A 
16774  76C5 00 
16775  76C6 20 20 20 20 _s80: .db "    Stardate            %d\n", 0
16775  76CA 53 74 61 72 
16775  76CE 64 61 74 65 
16775  76D2 20 20 20 20 
16775  76D6 20 20 20 20 
16775  76DA 20 20 20 20 
16775  76DE 25 64 0A 00 
16776  76E2 20 20 20 20 _s81: .db "    Condition           %s\n", 0
16776  76E6 43 6F 6E 64 
16776  76EA 69 74 69 6F 
16776  76EE 6E 20 20 20 
16776  76F2 20 20 20 20 
16776  76F6 20 20 20 20 
16776  76FA 25 73 0A 00 
16777  76FE 20 20 20 20 _s82: .db "    Quadrant            %d, %d\n", 0
16777  7702 51 75 61 64 
16777  7706 72 61 6E 74 
16777  770A 20 20 20 20 
16777  770E 20 20 20 20 
16777  7712 20 20 20 20 
16777  7716 25 64 2C 20 
16777  771A 25 64 0A 00 
16778  771E 20 20 20 20 _s83: .db "    Sector              %d, %d\n", 0
16778  7722 53 65 63 74 
16778  7726 6F 72 20 20 
16778  772A 20 20 20 20 
16778  772E 20 20 20 20 
16778  7732 20 20 20 20 
16778  7736 25 64 2C 20 
16778  773A 25 64 0A 00 
16779  773E 20 20 20 20 _s84: .db "    Photon Torpedoes    %d\n", 0
16779  7742 50 68 6F 74 
16779  7746 6F 6E 20 54 
16779  774A 6F 72 70 65 
16779  774E 64 6F 65 73 
16779  7752 20 20 20 20 
16779  7756 25 64 0A 00 
16780  775A 20 20 20 20 _s85: .db "    Total Energy        %d\n", 0
16780  775E 54 6F 74 61 
16780  7762 6C 20 45 6E 
16780  7766 65 72 67 79 
16780  776A 20 20 20 20 
16780  776E 20 20 20 20 
16780  7772 25 64 0A 00 
16781  7776 20 20 20 20 _s86: .db "    Shields             %d\n", 0
16781  777A 53 68 69 65 
16781  777E 6C 64 73 20 
16781  7782 20 20 20 20 
16781  7786 20 20 20 20 
16781  778A 20 20 20 20 
16781  778E 25 64 0A 00 
16782  7792 20 20 20 20 _s87: .db "    Klingons Remaining  %d\n", 0
16782  7796 4B 6C 69 6E 
16782  779A 67 6F 6E 73 
16782  779E 20 52 65 6D 
16782  77A2 61 69 6E 69 
16782  77A6 6E 67 20 20 
16782  77AA 25 64 0A 00 
16783  77AE 4C 6F 6E 67 _s88: .db "Long Range Scan for Quadrant %d, %d\n\n", 0
16783  77B2 20 52 61 6E 
16783  77B6 67 65 20 53 
16783  77BA 63 61 6E 20 
16783  77BE 66 6F 72 20 
16783  77C2 51 75 61 64 
16783  77C6 72 61 6E 74 
16783  77CA 20 25 64 2C 
16783  77CE 20 25 64 0A 
16783  77D2 0A 00 
16784  77D4 25 73 3A 00 _s89: .db "%s:", 0
16785  77D8 2A 2A 2A 00 _s90: .db "***", 0
16786  77DC 20 3A 00    _s91: .db " :", 0
16787  77DF 25 73 0A 00 _s92: .db "%s\n", 0
16788  77E3 53 63 69 65 _s93: .db "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n", 0
16788  77E7 6E 63 65 20 
16788  77EB 4F 66 66 69 
16788  77EF 63 65 72 20 
16788  77F3 53 70 6F 63 
16788  77F7 6B 20 72 65 
16788  77FB 70 6F 72 74 
16788  77FF 73 3A 0A 20 
16788  7803 20 27 53 65 
16788  7807 6E 73 6F 72 
16788  780B 73 20 73 68 
16788  780F 6F 77 20 6E 
16788  7813 6F 20 65 6E 
16788  7817 65 6D 79 20 
16788  781B 73 68 69 70 
16788  781F 73 20 69 6E 
16788  7823 20 74 68 69 
16788  7827 73 20 71 75 
16788  782B 61 64 72 61 
16788  782F 6E 74 27 0A 
16788  7833 00 
16789  7834 43 6F 6D 70 _s94: .db "Computer failure hampers accuracy.", 0
16789  7838 75 74 65 72 
16789  783C 20 66 61 69 
16789  7840 6C 75 72 65 
16789  7844 20 68 61 6D 
16789  7848 70 65 72 73 
16789  784C 20 61 63 63 
16789  7850 75 72 61 63 
16789  7854 79 2E 00 
16790  7857 50 68 61 73 _s95: .db "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", 0
16790  785B 65 72 73 20 
16790  785F 6C 6F 63 6B 
16790  7863 65 64 20 6F 
16790  7867 6E 20 74 61 
16790  786B 72 67 65 74 
16790  786F 3B 0A 20 45 
16790  7873 6E 65 72 67 
16790  7877 79 20 61 76 
16790  787B 61 69 6C 61 
16790  787F 62 6C 65 20 
16790  7883 3D 20 25 64 
16790  7887 20 75 6E 69 
16790  788B 74 73 0A 0A 
16790  788F 20 4E 75 6D 
16790  7893 62 65 72 20 
16790  7897 6F 66 20 75 
16790  789B 6E 69 74 73 
16790  789F 20 74 6F 20 
16790  78A3 66 69 72 65 
16790  78A7 3A 20 00 
16791  78AA 4E 6F 74 20 _s96: .db "Not enough energy available.\n", 0
16791  78AE 65 6E 6F 75 
16791  78B2 67 68 20 65 
16791  78B6 6E 65 72 67 
16791  78BA 79 20 61 76 
16791  78BE 61 69 6C 61 
16791  78C2 62 6C 65 2E 
16791  78C6 0A 00 
16792  78C8 53 65 6E 73 _s97: .db "Sensors show no damage to enemy at %d, %d\n\n", 0
16792  78CC 6F 72 73 20 
16792  78D0 73 68 6F 77 
16792  78D4 20 6E 6F 20 
16792  78D8 64 61 6D 61 
16792  78DC 67 65 20 74 
16792  78E0 6F 20 65 6E 
16792  78E4 65 6D 79 20 
16792  78E8 61 74 20 25 
16792  78EC 64 2C 20 25 
16792  78F0 64 0A 0A 00 
16793  78F4 25 64 20 75 _s98: .db "%d unit hit on Klingon at sector %d, %d\n", 0
16793  78F8 6E 69 74 20 
16793  78FC 68 69 74 20 
16793  7900 6F 6E 20 4B 
16793  7904 6C 69 6E 67 
16793  7908 6F 6E 20 61 
16793  790C 74 20 73 65 
16793  7910 63 74 6F 72 
16793  7914 20 25 64 2C 
16793  7918 20 25 64 0A 
16793  791C 00 
16794  791D 2A 2A 2A 20 _s99: .db "*** Klingon Destroyed ***\n", 0
16794  7921 4B 6C 69 6E 
16794  7925 67 6F 6E 20 
16794  7929 44 65 73 74 
16794  792D 72 6F 79 65 
16794  7931 64 20 2A 2A 
16794  7935 2A 0A 00 
16795  7938 20 20 20 28 _s100: .db "   (Sensors show %d units remaining.)\n\n", 0
16795  793C 53 65 6E 73 
16795  7940 6F 72 73 20 
16795  7944 73 68 6F 77 
16795  7948 20 25 64 20 
16795  794C 75 6E 69 74 
16795  7950 73 20 72 65 
16795  7954 6D 61 69 6E 
16795  7958 69 6E 67 2E 
16795  795C 29 0A 0A 00 
16796  7960 41 6C 6C 20 _s101: .db "All photon torpedoes expended", 0
16796  7964 70 68 6F 74 
16796  7968 6F 6E 20 74 
16796  796C 6F 72 70 65 
16796  7970 64 6F 65 73 
16796  7974 20 65 78 70 
16796  7978 65 6E 64 65 
16796  797C 64 00 
16797  797E 45 6E 73 69 _s102: .db "Ensign Chekov%s", 0
16797  7982 67 6E 20 43 
16797  7986 68 65 6B 6F 
16797  798A 76 25 73 00 
16798  798E 54 6F 72 70 _s103: .db "Torpedo Track:", 0
16798  7992 65 64 6F 20 
16798  7996 54 72 61 63 
16798  799A 6B 3A 00 
16799  799D 20 20 20 20 _s104: .db "    %d, %d\n", 0
16799  79A1 25 64 2C 20 
16799  79A5 25 64 0A 00 
16800  79A9 54 6F 72 70 _s105: .db "Torpedo Missed\n", 0
16800  79AD 65 64 6F 20 
16800  79B1 4D 69 73 73 
16800  79B5 65 64 0A 00 
16801  79B9 53 74 61 72 _s106: .db "Star at %d, %d absorbed torpedo energy.\n\n", 0
16801  79BD 20 61 74 20 
16801  79C1 25 64 2C 20 
16801  79C5 25 64 20 61 
16801  79C9 62 73 6F 72 
16801  79CD 62 65 64 20 
16801  79D1 74 6F 72 70 
16801  79D5 65 64 6F 20 
16801  79D9 65 6E 65 72 
16801  79DD 67 79 2E 0A 
16801  79E1 0A 00 
16802  79E3 2A 2A 2A 20 _s107: .db "*** Starbase Destroyed ***", 0
16802  79E7 53 74 61 72 
16802  79EB 62 61 73 65 
16802  79EF 20 44 65 73 
16802  79F3 74 72 6F 79 
16802  79F7 65 64 20 2A 
16802  79FB 2A 2A 00 
16803  79FE 54 68 61 74 _s108: .db "That does it, Captain!!", 0
16803  7A02 20 64 6F 65 
16803  7A06 73 20 69 74 
16803  7A0A 2C 20 43 61 
16803  7A0E 70 74 61 69 
16803  7A12 6E 21 21 00 
16804  7A16 59 6F 75 20 _s109: .db "You are hereby relieved of command\n", 0
16804  7A1A 61 72 65 20 
16804  7A1E 68 65 72 65 
16804  7A22 62 79 20 72 
16804  7A26 65 6C 69 65 
16804  7A2A 76 65 64 20 
16804  7A2E 6F 66 20 63 
16804  7A32 6F 6D 6D 61 
16804  7A36 6E 64 0A 00 
16805  7A3A 61 6E 64 20 _s110: .db "and sentenced to 99 stardates of hard", 0
16805  7A3E 73 65 6E 74 
16805  7A42 65 6E 63 65 
16805  7A46 64 20 74 6F 
16805  7A4A 20 39 39 20 
16805  7A4E 73 74 61 72 
16805  7A52 64 61 74 65 
16805  7A56 73 20 6F 66 
16805  7A5A 20 68 61 72 
16805  7A5E 64 00 
16806  7A60 6C 61 62 6F _s111: .db "labor on Cygnus 12!!\n", 0
16806  7A64 72 20 6F 6E 
16806  7A68 20 43 79 67 
16806  7A6C 6E 75 73 20 
16806  7A70 31 32 21 21 
16806  7A74 0A 00 
16807  7A76 53 74 61 72 _s112: .db "Starfleet Command reviewing your record to consider\n court martial!\n", 0
16807  7A7A 66 6C 65 65 
16807  7A7E 74 20 43 6F 
16807  7A82 6D 6D 61 6E 
16807  7A86 64 20 72 65 
16807  7A8A 76 69 65 77 
16807  7A8E 69 6E 67 20 
16807  7A92 79 6F 75 72 
16807  7A96 20 72 65 63 
16807  7A9A 6F 72 64 20 
16807  7A9E 74 6F 20 63 
16807  7AA2 6F 6E 73 69 
16807  7AA6 64 65 72 0A 
16807  7AAA 20 63 6F 75 
16807  7AAE 72 74 20 6D 
16807  7AB2 61 72 74 69 
16807  7AB6 61 6C 21 0A 
16807  7ABA 00 
16808  7ABB 44 61 6D 61 _s113: .db "Damage Control report not available.", 0
16808  7ABF 67 65 20 43 
16808  7AC3 6F 6E 74 72 
16808  7AC7 6F 6C 20 72 
16808  7ACB 65 70 6F 72 
16808  7ACF 74 20 6E 6F 
16808  7AD3 74 20 61 76 
16808  7AD7 61 69 6C 61 
16808  7ADB 62 6C 65 2E 
16808  7ADF 00 
16809  7AE0 0A 54 65 63 _s114: .db "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repa"
16809  7AE4 68 6E 69 63 
16809  7AE8 69 61 6E 73 
16809  7AEC 20 73 74 61 
16809  7AF0 6E 64 69 6E 
16809  7AF4 67 20 62 79 
16809  7AF8 20 74 6F 20 
16809  7AFC 65 66 66 65 
16809  7B00 63 74 20 72 
16809  7B04 65 70 61 69 
16809  7B08 72 73 20 74 
16809  7B0C 6F 20 79 6F 
16809  7B10 75 72 20 73 
16809  7B14 68 69 70 3B 
16809  7B18 0A 45 73 74 
16809  7B1C 69 6D 61 74 
16809  7B20 65 64 20 74 
16809  7B24 69 6D 65 20 
16809  7B28 74 6F 20 72 
16809  7B2C 65 70 61 69 
16809  7B30 72 3A 20 25 
16809  7B34 73 20 73 74 
16809  7B38 61 72 64 61 
16809  7B3C 74 65 73 2E 
16809  7B40 0A 20 57 69 
16809  7B44 6C 6C 20 79 
16809  7B48 6F 75 20 61 
16809  7B4C 75 74 68 6F 
16809  7B50 72 69 7A 65 
16809  7B54 20 74 68 65 
16809  7B58 20 72 65 70 
16809  7B5C 61 
16810  7B5D 69 72 20 6F .db "ir order (y/N)? ", 0
16810  7B61 72 64 65 72 
16810  7B65 20 28 79 2F 
16810  7B69 4E 29 3F 20 
16810  7B6D 00 
16811  7B6E 44 65 76 69 _s115: .db "Device            State of Repair", 0
16811  7B72 63 65 20 20 
16811  7B76 20 20 20 20 
16811  7B7A 20 20 20 20 
16811  7B7E 20 20 53 74 
16811  7B82 61 74 65 20 
16811  7B86 6F 66 20 52 
16811  7B8A 65 70 61 69 
16811  7B8E 72 00 
16812  7B90 25 2D 32 35 _s116: .db "%-25s%6s\n", 0
16812  7B94 73 25 36 73 
16812  7B98 0A 00 
16813  7B9A 0A 00       _s117: .db "\n", 0
16814  7B9C 45 6E 65 72 _s118: .db "Energy available = %d\n\n Input number of units to shields: ", 0
16814  7BA0 67 79 20 61 
16814  7BA4 76 61 69 6C 
16814  7BA8 61 62 6C 65 
16814  7BAC 20 3D 20 25 
16814  7BB0 64 0A 0A 20 
16814  7BB4 49 6E 70 75 
16814  7BB8 74 20 6E 75 
16814  7BBC 6D 62 65 72 
16814  7BC0 20 6F 66 20 
16814  7BC4 75 6E 69 74 
16814  7BC8 73 20 74 6F 
16814  7BCC 20 73 68 69 
16814  7BD0 65 6C 64 73 
16814  7BD4 3A 20 00 
16815  7BD7 3C 53 68 69 _s119: .db "<Shields Unchanged>\n", 0
16815  7BDB 65 6C 64 73 
16815  7BDF 20 55 6E 63 
16815  7BE3 68 61 6E 67 
16815  7BE7 65 64 3E 0A 
16815  7BEB 00 
16816  7BEC 53 68 69 65 _s120: .db "Shield Control Reports:\n  'This is not the Federation Treasury.'", 0
16816  7BF0 6C 64 20 43 
16816  7BF4 6F 6E 74 72 
16816  7BF8 6F 6C 20 52 
16816  7BFC 65 70 6F 72 
16816  7C00 74 73 3A 0A 
16816  7C04 20 20 27 54 
16816  7C08 68 69 73 20 
16816  7C0C 69 73 20 6E 
16816  7C10 6F 74 20 74 
16816  7C14 68 65 20 46 
16816  7C18 65 64 65 72 
16816  7C1C 61 74 69 6F 
16816  7C20 6E 20 54 72 
16816  7C24 65 61 73 75 
16816  7C28 72 79 2E 27 
16816  7C2C 00 
16817  7C2D 44 65 66 6C _s121: .db "Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n", 0
16817  7C31 65 63 74 6F 
16817  7C35 72 20 43 6F 
16817  7C39 6E 74 72 6F 
16817  7C3D 6C 20 52 6F 
16817  7C41 6F 6D 20 72 
16817  7C45 65 70 6F 72 
16817  7C49 74 3A 0A 20 
16817  7C4D 20 27 53 68 
16817  7C51 69 65 6C 64 
16817  7C55 73 20 6E 6F 
16817  7C59 77 20 61 74 
16817  7C5D 20 25 64 20 
16817  7C61 75 6E 69 74 
16817  7C65 73 20 70 65 
16817  7C69 72 20 79 6F 
16817  7C6D 75 72 20 63 
16817  7C71 6F 6D 6D 61 
16817  7C75 6E 64 2E 27 
16817  7C79 0A 0A 00 
16818  7C7C 43 6F 6D 70 _s122: .db "Computer active and awating command: ", 0
16818  7C80 75 74 65 72 
16818  7C84 20 61 63 74 
16818  7C88 69 76 65 20 
16818  7C8C 61 6E 64 20 
16818  7C90 61 77 61 74 
16818  7C94 69 6E 67 20 
16818  7C98 63 6F 6D 6D 
16818  7C9C 61 6E 64 3A 
16818  7CA0 20 00 
16819  7CA2 46 75 6E 63 _s123: .db "Functions available from Library-Computer:\n\n", 0
16819  7CA6 74 69 6F 6E 
16819  7CAA 73 20 61 76 
16819  7CAE 61 69 6C 61 
16819  7CB2 62 6C 65 20 
16819  7CB6 66 72 6F 6D 
16819  7CBA 20 4C 69 62 
16819  7CBE 72 61 72 79 
16819  7CC2 2D 43 6F 6D 
16819  7CC6 70 75 74 65 
16819  7CCA 72 3A 0A 0A 
16819  7CCE 00 
16820  7CCF 20 20 20 30 _s124: .db "   0 = Cumulative Galactic Record\n", 0
16820  7CD3 20 3D 20 43 
16820  7CD7 75 6D 75 6C 
16820  7CDB 61 74 69 76 
16820  7CDF 65 20 47 61 
16820  7CE3 6C 61 63 74 
16820  7CE7 69 63 20 52 
16820  7CEB 65 63 6F 72 
16820  7CEF 64 0A 00 
16821  7CF2 20 20 20 31 _s125: .db "   1 = Status Report\n", 0
16821  7CF6 20 3D 20 53 
16821  7CFA 74 61 74 75 
16821  7CFE 73 20 52 65 
16821  7D02 70 6F 72 74 
16821  7D06 0A 00 
16822  7D08 20 20 20 32 _s126: .db "   2 = Photon Torpedo Data\n", 0
16822  7D0C 20 3D 20 50 
16822  7D10 68 6F 74 6F 
16822  7D14 6E 20 54 6F 
16822  7D18 72 70 65 64 
16822  7D1C 6F 20 44 61 
16822  7D20 74 61 0A 00 
16823  7D24 20 20 20 33 _s127: .db "   3 = Starbase Nav Data\n", 0
16823  7D28 20 3D 20 53 
16823  7D2C 74 61 72 62 
16823  7D30 61 73 65 20 
16823  7D34 4E 61 76 20 
16823  7D38 44 61 74 61 
16823  7D3C 0A 00 
16824  7D3E 20 20 20 34 _s128: .db "   4 = Direction/Distance Calculator\n", 0
16824  7D42 20 3D 20 44 
16824  7D46 69 72 65 63 
16824  7D4A 74 69 6F 6E 
16824  7D4E 2F 44 69 73 
16824  7D52 74 61 6E 63 
16824  7D56 65 20 43 61 
16824  7D5A 6C 63 75 6C 
16824  7D5E 61 74 6F 72 
16824  7D62 0A 00 
16825  7D64 20 20 20 35 _s129: .db "   5 = Galaxy 'Region Name' Map\n", 0
16825  7D68 20 3D 20 47 
16825  7D6C 61 6C 61 78 
16825  7D70 79 20 27 52 
16825  7D74 65 67 69 6F 
16825  7D78 6E 20 4E 61 
16825  7D7C 6D 65 27 20 
16825  7D80 4D 61 70 0A 
16825  7D84 00 
16826  7D85 0A 20 20 20 _s130: .db "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", 0
16826  7D89 20 20 43 6F 
16826  7D8D 6D 70 75 74 
16826  7D91 65 72 20 52 
16826  7D95 65 63 6F 72 
16826  7D99 64 20 6F 66 
16826  7D9D 20 47 61 6C 
16826  7DA1 61 78 79 20 
16826  7DA5 66 6F 72 20 
16826  7DA9 51 75 61 64 
16826  7DAD 72 61 6E 74 
16826  7DB1 20 25 64 2C 
16826  7DB5 25 64 0A 0A 
16826  7DB9 00 
16827  7DBA 20 20 20 20 _s131: .db "     1     2     3     4     5     6     7     8", 0
16827  7DBE 20 31 20 20 
16827  7DC2 20 20 20 32 
16827  7DC6 20 20 20 20 
16827  7DCA 20 33 20 20 
16827  7DCE 20 20 20 34 
16827  7DD2 20 20 20 20 
16827  7DD6 20 35 20 20 
16827  7DDA 20 20 20 36 
16827  7DDE 20 20 20 20 
16827  7DE2 20 37 20 20 
16827  7DE6 20 20 20 38 
16827  7DEA 00 
16828  7DEB 25 73 25 64 _s132: .db "%s%d", 0
16828  7DEF 00 
16829  7DF0 20 20 20 53 _s133: .db "   Status Report:\n", 0
16829  7DF4 74 61 74 75 
16829  7DF8 73 20 52 65 
16829  7DFC 70 6F 72 74 
16829  7E00 3A 0A 00 
16830  7E03 4B 6C 69 6E _s134: .db "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 0
16830  7E07 67 6F 6E 25 
16830  7E0B 73 20 4C 65 
16830  7E0F 66 74 3A 20 
16830  7E13 25 64 0A 20 
16830  7E17 4D 69 73 73 
16830  7E1B 69 6F 6E 20 
16830  7E1F 6D 75 73 74 
16830  7E23 20 62 65 20 
16830  7E27 63 6F 6D 70 
16830  7E2B 6C 65 74 65 
16830  7E2F 64 20 69 6E 
16830  7E33 20 25 64 2E 
16830  7E37 25 64 20 73 
16830  7E3B 74 61 72 64 
16830  7E3F 61 74 65 73 
16830  7E43 0A 00 
16831  7E45 59 6F 75 72 _s135: .db "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n", 0
16831  7E49 20 73 74 75 
16831  7E4D 70 69 64 69 
16831  7E51 74 79 20 68 
16831  7E55 61 73 20 6C 
16831  7E59 65 66 74 20 
16831  7E5D 79 6F 75 20 
16831  7E61 6F 6E 20 79 
16831  7E65 6F 75 72 20 
16831  7E69 6F 77 6E 20 
16831  7E6D 69 6E 20 74 
16831  7E71 68 65 20 67 
16831  7E75 61 6C 61 78 
16831  7E79 79 0A 20 2D 
16831  7E7D 2D 20 79 6F 
16831  7E81 75 20 68 61 
16831  7E85 76 65 20 6E 
16831  7E89 6F 20 73 74 
16831  7E8D 61 72 62 61 
16831  7E91 73 65 73 20 
16831  7E95 6C 65 66 74 
16831  7E99 21 0A 00 
16832  7E9C 54 68 65 20 _s136: .db "The Federation is maintaining %d starbase%s in the galaxy\n\n", 0
16832  7EA0 46 65 64 65 
16832  7EA4 72 61 74 69 
16832  7EA8 6F 6E 20 69 
16832  7EAC 73 20 6D 61 
16832  7EB0 69 6E 74 61 
16832  7EB4 69 6E 69 6E 
16832  7EB8 67 20 25 64 
16832  7EBC 20 73 74 61 
16832  7EC0 72 62 61 73 
16832  7EC4 65 25 73 20 
16832  7EC8 69 6E 20 74 
16832  7ECC 68 65 20 67 
16832  7ED0 61 6C 61 78 
16832  7ED4 79 0A 0A 00 
16833  7ED8 46 72 6F 6D _s137: .db "From Enterprise to Klingon battlecriuser%s:\n\n", 0
16833  7EDC 20 45 6E 74 
16833  7EE0 65 72 70 72 
16833  7EE4 69 73 65 20 
16833  7EE8 74 6F 20 4B 
16833  7EEC 6C 69 6E 67 
16833  7EF0 6F 6E 20 62 
16833  7EF4 61 74 74 6C 
16833  7EF8 65 63 72 69 
16833  7EFC 75 73 65 72 
16833  7F00 25 73 3A 0A 
16833  7F04 0A 00 
16834  7F06 4D 72 2E 20 _s138: .db "Mr. Spock reports,\n  'Sensors show no starbases in this quadrant.'\n", 0
16834  7F0A 53 70 6F 63 
16834  7F0E 6B 20 72 65 
16834  7F12 70 6F 72 74 
16834  7F16 73 2C 0A 20 
16834  7F1A 20 27 53 65 
16834  7F1E 6E 73 6F 72 
16834  7F22 73 20 73 68 
16834  7F26 6F 77 20 6E 
16834  7F2A 6F 20 73 74 
16834  7F2E 61 72 62 61 
16834  7F32 73 65 73 20 
16834  7F36 69 6E 20 74 
16834  7F3A 68 69 73 20 
16834  7F3E 71 75 61 64 
16834  7F42 72 61 6E 74 
16834  7F46 2E 27 0A 00 
16835  7F4A 44 69 72 65 _s139: .db "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 0
16835  7F4E 63 74 69 6F 
16835  7F52 6E 2F 44 69 
16835  7F56 73 74 61 6E 
16835  7F5A 63 65 20 43 
16835  7F5E 61 6C 63 75 
16835  7F62 6C 61 74 6F 
16835  7F66 72 0A 20 59 
16835  7F6A 6F 75 20 61 
16835  7F6E 72 65 20 61 
16835  7F72 74 20 71 75 
16835  7F76 61 64 72 61 
16835  7F7A 6E 74 20 25 
16835  7F7E 64 2C 25 64 
16835  7F82 20 73 65 63 
16835  7F86 74 6F 72 20 
16835  7F8A 25 64 2C 25 
16835  7F8E 64 0A 0A 20 
16835  7F92 50 6C 65 61 
16835  7F96 73 65 20 65 
16835  7F9A 6E 74 65 72 
16835  7F9E 20 69 6E 69 
16835  7FA2 74 69 61 6C 
16835  7FA6 20 58 20 63 
16835  7FAA 6F 6F 72 64 
16835  7FAE 69 6E 61 74 
16835  7FB2 65 3A 20 00 
16836  7FB6 50 6C 65 61 _s140: .db "Please enter initial Y coordinate: ", 0
16836  7FBA 73 65 20 65 
16836  7FBE 6E 74 65 72 
16836  7FC2 20 69 6E 69 
16836  7FC6 74 69 61 6C 
16836  7FCA 20 59 20 63 
16836  7FCE 6F 6F 72 64 
16836  7FD2 69 6E 61 74 
16836  7FD6 65 3A 20 00 
16837  7FDA 50 6C 65 61 _s141: .db "Please enter final X coordinate: ", 0
16837  7FDE 73 65 20 65 
16837  7FE2 6E 74 65 72 
16837  7FE6 20 66 69 6E 
16837  7FEA 61 6C 20 58 
16837  7FEE 20 63 6F 6F 
16837  7FF2 72 64 69 6E 
16837  7FF6 61 74 65 3A 
16837  7FFA 20 00 
16838  7FFC 50 6C 65 61 _s142: .db "Please enter final Y coordinate: ", 0
16838  8000 73 65 20 65 
16838  8004 6E 74 65 72 
16838  8008 20 66 69 6E 
16838  800C 61 6C 20 59 
16838  8010 20 63 6F 6F 
16838  8014 72 64 69 6E 
16838  8018 61 74 65 3A 
16838  801C 20 00 
16839  801E 0A 20 20 20 _s143: .db "\n                   The Galaxy\n\n", 0
16839  8022 20 20 20 20 
16839  8026 20 20 20 20 
16839  802A 20 20 20 20 
16839  802E 20 20 20 20 
16839  8032 54 68 65 20 
16839  8036 47 61 6C 61 
16839  803A 78 79 0A 0A 
16839  803E 00 
16840  803F 20 20 20 20 _s144: .db "    1     2     3     4     5     6     7     8\n", 0
16840  8043 31 20 20 20 
16840  8047 20 20 32 20 
16840  804B 20 20 20 20 
16840  804F 33 20 20 20 
16840  8053 20 20 34 20 
16840  8057 20 20 20 20 
16840  805B 35 20 20 20 
16840  805F 20 20 36 20 
16840  8063 20 20 20 20 
16840  8067 37 20 20 20 
16840  806B 20 20 38 0A 
16840  806F 00 
16841  8070 25 73 25 64 _s145: .db "%s%d ", 0
16841  8074 20 00 
16842  8076 20 20 44 49 _s146: .db "  DIRECTION = ", 0
16842  807A 52 45 43 54 
16842  807E 49 4F 4E 20 
16842  8082 3D 20 00 
16843  8085 25 73 00    _s147: .db "%s", 0
16844  8088 54 68 65 20 _s148: .db "The Enterprise has been destroyed. The Federation will be conquered.\n", 0
16844  808C 45 6E 74 65 
16844  8090 72 70 72 69 
16844  8094 73 65 20 68 
16844  8098 61 73 20 62 
16844  809C 65 65 6E 20 
16844  80A0 64 65 73 74 
16844  80A4 72 6F 79 65 
16844  80A8 64 2E 20 54 
16844  80AC 68 65 20 46 
16844  80B0 65 64 65 72 
16844  80B4 61 74 69 6F 
16844  80B8 6E 20 77 69 
16844  80BC 6C 6C 20 62 
16844  80C0 65 20 63 6F 
16844  80C4 6E 71 75 65 
16844  80C8 72 65 64 2E 
16844  80CC 0A 00 
16845  80CE 49 74 20 69 _s149: .db "It is stardate %d.\n\n", 0
16845  80D2 73 20 73 74 
16845  80D6 61 72 64 61 
16845  80DA 74 65 20 25 
16845  80DE 64 2E 0A 0A 
16845  80E2 00 
16846  80E3 54 68 65 72 _s150: .db "There were %d Klingon Battlecruisers left at the end of your mission.\n\n", 0
16846  80E7 65 20 77 65 
16846  80EB 72 65 20 25 
16846  80EF 64 20 4B 6C 
16846  80F3 69 6E 67 6F 
16846  80F7 6E 20 42 61 
16846  80FB 74 74 6C 65 
16846  80FF 63 72 75 69 
16846  8103 73 65 72 73 
16846  8107 20 6C 65 66 
16846  810B 74 20 61 74 
16846  810F 20 74 68 65 
16846  8113 20 65 6E 64 
16846  8117 20 6F 66 20 
16846  811B 79 6F 75 72 
16846  811F 20 6D 69 73 
16846  8123 73 69 6F 6E 
16846  8127 2E 0A 0A 00 
16847  812B 43 6F 6E 67 _s151: .db "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n", 0
16847  812F 72 61 74 75 
16847  8133 6C 61 74 69 
16847  8137 6F 6E 73 2C 
16847  813B 20 43 61 70 
16847  813F 74 61 69 6E 
16847  8143 21 20 20 54 
16847  8147 68 65 20 6C 
16847  814B 61 73 74 20 
16847  814F 4B 6C 69 6E 
16847  8153 67 6F 6E 20 
16847  8157 42 61 74 74 
16847  815B 6C 65 20 43 
16847  815F 72 75 69 73 
16847  8163 65 72 0A 20 
16847  8167 6D 65 6E 61 
16847  816B 63 69 6E 67 
16847  816F 20 74 68 65 
16847  8173 20 46 65 64 
16847  8177 65 72 61 74 
16847  817B 69 6F 6E 20 
16847  817F 68 61 73 20 
16847  8183 62 65 65 6E 
16847  8187 20 64 65 73 
16847  818B 74 6F 79 65 
16847  818F 64 2E 0A 00 
16848  8193 59 6F 75 72 _s152: .db "Your efficiency rating is %s\n", 0
16848  8197 20 65 66 66 
16848  819B 69 63 69 65 
16848  819F 6E 63 79 20 
16848  81A3 72 61 74 69 
16848  81A7 6E 67 20 69 
16848  81AB 73 20 25 73 
16848  81AF 0A 00 
16849  81B1 54 68 65 20 _s153: .db "The Federation is in need of a new starship commander", 0
16849  81B5 46 65 64 65 
16849  81B9 72 61 74 69 
16849  81BD 6F 6E 20 69 
16849  81C1 73 20 69 6E 
16849  81C5 20 6E 65 65 
16849  81C9 64 20 6F 66 
16849  81CD 20 61 20 6E 
16849  81D1 65 77 20 73 
16849  81D5 74 61 72 73 
16849  81D9 68 69 70 20 
16849  81DD 63 6F 6D 6D 
16849  81E1 61 6E 64 65 
16849  81E5 72 00 
16850  81E7 20 66 6F 72 _s154: .db " for a similar mission.\n", 0
16850  81EB 20 61 20 73 
16850  81EF 69 6D 69 6C 
16850  81F3 61 72 20 6D 
16850  81F7 69 73 73 69 
16850  81FB 6F 6E 2E 0A 
16850  81FF 00 
16851  8200 49 66 20 74 _s155: .db "If there is a volunteer, let him step forward and", 0
16851  8204 68 65 72 65 
16851  8208 20 69 73 20 
16851  820C 61 20 76 6F 
16851  8210 6C 75 6E 74 
16851  8214 65 65 72 2C 
16851  8218 20 6C 65 74 
16851  821C 20 68 69 6D 
16851  8220 20 73 74 65 
16851  8224 70 20 66 6F 
16851  8228 72 77 61 72 
16851  822C 64 20 61 6E 
16851  8230 64 00 
16852  8232 20 65 6E 74 _s156: .db " enter 'aye': ", 0
16852  8236 65 72 20 27 
16852  823A 61 79 65 27 
16852  823E 3A 20 00 
16853  8241 53 74 61 72 _s157: .db "Starbase shields protect the Enterprise\n", 0
16853  8245 62 61 73 65 
16853  8249 20 73 68 69 
16853  824D 65 6C 64 73 
16853  8251 20 70 72 6F 
16853  8255 74 65 63 74 
16853  8259 20 74 68 65 
16853  825D 20 45 6E 74 
16853  8261 65 72 70 72 
16853  8265 69 73 65 0A 
16853  8269 00 
16854  826A 25 64 20 75 _s158: .db "%d unit hit on Enterprise from sector %d, %d\n", 0
16854  826E 6E 69 74 20 
16854  8272 68 69 74 20 
16854  8276 6F 6E 20 45 
16854  827A 6E 74 65 72 
16854  827E 70 72 69 73 
16854  8282 65 20 66 72 
16854  8286 6F 6D 20 73 
16854  828A 65 63 74 6F 
16854  828E 72 20 25 64 
16854  8292 2C 20 25 64 
16854  8296 0A 00 
16855  8298 20 20 20 20 _s159: .db "    <Shields down to %d units>\n\n", 0
16855  829C 3C 53 68 69 
16855  82A0 65 6C 64 73 
16855  82A4 20 64 6F 77 
16855  82A8 6E 20 74 6F 
16855  82AC 20 25 64 20 
16855  82B0 75 6E 69 74 
16855  82B4 73 3E 0A 0A 
16855  82B8 00 
16856  82B9 44 61 6D 61 _s160: .db "Damage Control reports\n'%s' damaged by hit\n\n", 0
16856  82BD 67 65 20 43 
16856  82C1 6F 6E 74 72 
16856  82C5 6F 6C 20 72 
16856  82C9 65 70 6F 72 
16856  82CD 74 73 0A 27 
16856  82D1 25 73 27 20 
16856  82D5 64 61 6D 61 
16856  82D9 67 65 64 20 
16856  82DD 62 79 20 68 
16856  82E1 69 74 0A 0A 
16856  82E5 00 
16857  82E6 20 20 20 20 _s161: .db "    %s repair completed\n\n", 0
16857  82EA 25 73 20 72 
16857  82EE 65 70 61 69 
16857  82F2 72 20 63 6F 
16857  82F6 6D 70 6C 65 
16857  82FA 74 65 64 0A 
16857  82FE 0A 00 
16858  8300 20 20 20 20 _s162: .db "    %s damaged\n\n", 0
16858  8304 25 73 20 64 
16858  8308 61 6D 61 67 
16858  830C 65 64 0A 0A 
16858  8310 00 
16859  8311 20 20 20 20 _s163: .db "    %s state of repair improved\n\n", 0
16859  8315 25 73 20 73 
16859  8319 74 61 74 65 
16859  831D 20 6F 66 20 
16859  8321 72 65 70 61 
16859  8325 69 72 20 69 
16859  8329 6D 70 72 6F 
16859  832D 76 65 64 0A 
16859  8331 0A 00 
16860  8333 20 49 00    _s164: .db " I", 0
16861  8336 20 49 49 00 _s165: .db " II", 0
16862  833A 20 49 49 49 _s166: .db " III", 0
16862  833E 00 
16863  833F 20 49 56 00 _s167: .db " IV", 0
16864  8343 55 6E 6B 6E _s168: .db "Unknown", 0
16864  8347 6F 77 6E 00 
16865  834B 55 6E 65 78 _s169: .db "Unexpected format in printf.", 0
16865  834F 70 65 63 74 
16865  8353 65 64 20 66 
16865  8357 6F 72 6D 61 
16865  835B 74 20 69 6E 
16865  835F 20 70 72 69 
16865  8363 6E 74 66 2E 
16865  8367 00 
16866  8368 45 72 72 6F _s170: .db "Error: Unknown argument type.\n", 0
16866  836C 72 3A 20 55 
16866  8370 6E 6B 6E 6F 
16866  8374 77 6E 20 61 
16866  8378 72 67 75 6D 
16866  837C 65 6E 74 20 
16866  8380 74 79 70 65 
16866  8384 2E 0A 00 
16867  8387             
16868  8387 89 83       _heap_top: .dw _heap
16869  8389 00          _heap: .db 0
16870  838A             ; --- END DATA SEGMENT
16871  838A             
16872  838A             .end
tasm: Number of errors = 0
