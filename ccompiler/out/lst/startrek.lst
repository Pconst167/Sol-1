0001   0000             ; --- FILENAME: games/startrek.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; intro(); 
0011   0408 07 DF 23      call intro
0012   040B             ; new_game(); 
0013   040B 07 40 24      call new_game
0014   040E             ; return (0); 
0015   040E 26 00 00      mov b, $0
0016   0411 F9            leave
0017   0412 05 0B         syscall sys_terminate_proc
0018   0414             
0019   0414             strcpy:
0020   0414 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0021   0417             ; char *psrc; 
0022   0417 52 02 00      sub sp, 2
0023   041A             ; char *pdest; 
0024   041A 52 02 00      sub sp, 2
0025   041D             ; psrc = src; 
0026   041D FA FF FF      lea d, [bp + -1] ; $psrc
0027   0420 DA            push d
0028   0421 FA 07 00      lea d, [bp + 7] ; $src
0029   0424 2A            mov b, [d]
0030   0425 E7            pop d
0031   0426 FD 43         mov [d], b
0032   0428             ; pdest = dest; 
0033   0428 FA FD FF      lea d, [bp + -3] ; $pdest
0034   042B DA            push d
0035   042C FA 05 00      lea d, [bp + 5] ; $dest
0036   042F 2A            mov b, [d]
0037   0430 E7            pop d
0038   0431 FD 43         mov [d], b
0039   0433             ; while(*psrc) *pdest++ = *psrc++; 
0040   0433             _while1_cond:
0041   0433 FA FF FF      lea d, [bp + -1] ; $psrc
0042   0436 2A            mov b, [d]
0043   0437 74            mov d, b
0044   0438 32            mov bl, [d]
0045   0439 A7 00         mov bh, 0
0046   043B C0 00 00      cmp b, 0
0047   043E C6 66 04      je _while1_exit
0048   0441             _while1_block:
0049   0441             ; *pdest++ = *psrc++; 
0050   0441 FA FD FF      lea d, [bp + -3] ; $pdest
0051   0444 2A            mov b, [d]
0052   0445 FD 77         inc b
0053   0447 FA FD FF      lea d, [bp + -3] ; $pdest
0054   044A FD 43         mov [d], b
0055   044C FD 7D         dec b
0056   044E D8            push b
0057   044F FA FF FF      lea d, [bp + -1] ; $psrc
0058   0452 2A            mov b, [d]
0059   0453 FD 77         inc b
0060   0455 FA FF FF      lea d, [bp + -1] ; $psrc
0061   0458 FD 43         mov [d], b
0062   045A FD 7D         dec b
0063   045C 74            mov d, b
0064   045D 32            mov bl, [d]
0065   045E A7 00         mov bh, 0
0066   0460 E7            pop d
0067   0461 FD 3E         mov [d], bl
0068   0463 0A 33 04      jmp _while1_cond
0069   0466             _while1_exit:
0070   0466             ; *pdest = '\0'; 
0071   0466 FA FD FF      lea d, [bp + -3] ; $pdest
0072   0469 2A            mov b, [d]
0073   046A D8            push b
0074   046B 26 00 00      mov b, $0
0075   046E E7            pop d
0076   046F FD 3E         mov [d], bl
0077   0471 F9            leave
0078   0472 09            ret
0079   0473             
0080   0473             strcmp:
0081   0473 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0082   0476             ; while (*s1 && (*s1 == *s2)) { 
0083   0476             _while2_cond:
0084   0476 FA 05 00      lea d, [bp + 5] ; $s1
0085   0479 2A            mov b, [d]
0086   047A 74            mov d, b
0087   047B 32            mov bl, [d]
0088   047C A7 00         mov bh, 0
0089   047E             ; --- START LOGICAL AND
0090   047E D7            push a
0091   047F 11            mov a, b
0092   0480 FA 05 00      lea d, [bp + 5] ; $s1
0093   0483 2A            mov b, [d]
0094   0484 74            mov d, b
0095   0485 32            mov bl, [d]
0096   0486 A7 00         mov bh, 0
0097   0488             ; --- START RELATIONAL
0098   0488 D7            push a
0099   0489 11            mov a, b
0100   048A FA 07 00      lea d, [bp + 7] ; $s2
0101   048D 2A            mov b, [d]
0102   048E 74            mov d, b
0103   048F 32            mov bl, [d]
0104   0490 A7 00         mov bh, 0
0105   0492 B0            cmp a, b
0106   0493 FD 71         seq ; ==
0107   0495 E4            pop a
0108   0496             ; --- END RELATIONAL
0109   0496 FD A7         sand a, b
0110   0498 E4            pop a
0111   0499             ; --- END LOGICAL AND
0112   0499 C0 00 00      cmp b, 0
0113   049C C6 BC 04      je _while2_exit
0114   049F             _while2_block:
0115   049F             ; s1++; 
0116   049F FA 05 00      lea d, [bp + 5] ; $s1
0117   04A2 2A            mov b, [d]
0118   04A3 FD 77         inc b
0119   04A5 FA 05 00      lea d, [bp + 5] ; $s1
0120   04A8 FD 43         mov [d], b
0121   04AA FD 7D         dec b
0122   04AC             ; s2++; 
0123   04AC FA 07 00      lea d, [bp + 7] ; $s2
0124   04AF 2A            mov b, [d]
0125   04B0 FD 77         inc b
0126   04B2 FA 07 00      lea d, [bp + 7] ; $s2
0127   04B5 FD 43         mov [d], b
0128   04B7 FD 7D         dec b
0129   04B9 0A 76 04      jmp _while2_cond
0130   04BC             _while2_exit:
0131   04BC             ; return *s1 - *s2; 
0132   04BC FA 05 00      lea d, [bp + 5] ; $s1
0133   04BF 2A            mov b, [d]
0134   04C0 74            mov d, b
0135   04C1 32            mov bl, [d]
0136   04C2 A7 00         mov bh, 0
0137   04C4             ; --- START TERMS
0138   04C4 D7            push a
0139   04C5 11            mov a, b
0140   04C6 FA 07 00      lea d, [bp + 7] ; $s2
0141   04C9 2A            mov b, [d]
0142   04CA 74            mov d, b
0143   04CB 32            mov bl, [d]
0144   04CC A7 00         mov bh, 0
0145   04CE 60            sub a, b
0146   04CF 27            mov b, a
0147   04D0 E4            pop a
0148   04D1             ; --- END TERMS
0149   04D1 F9            leave
0150   04D2 09            ret
0151   04D3             
0152   04D3             strncmp:
0153   04D3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0154   04D6 F9            leave
0155   04D7 09            ret
0156   04D8             
0157   04D8             strcat:
0158   04D8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0159   04DB             ; int dest_len; 
0160   04DB 52 02 00      sub sp, 2
0161   04DE             ; int i; 
0162   04DE 52 02 00      sub sp, 2
0163   04E1             ; dest_len = strlen(dest); 
0164   04E1 FA FF FF      lea d, [bp + -1] ; $dest_len
0165   04E4 DA            push d
0166   04E5 FA 05 00      lea d, [bp + 5] ; $dest
0167   04E8 2A            mov b, [d]
0168   04E9 FD AB         swp b
0169   04EB D8            push b
0170   04EC 07 8E 05      call strlen
0171   04EF 51 02 00      add sp, 2
0172   04F2 E7            pop d
0173   04F3 FD 43         mov [d], b
0174   04F5             ; for (i = 0; src[i] != 0; i=i+1) { 
0175   04F5             _for3_init:
0176   04F5 FA FD FF      lea d, [bp + -3] ; $i
0177   04F8 DA            push d
0178   04F9 26 00 00      mov b, $0
0179   04FC E7            pop d
0180   04FD FD 43         mov [d], b
0181   04FF             _for3_cond:
0182   04FF FA 07 00      lea d, [bp + 7] ; $src
0183   0502 FD 2A         mov d, [d]
0184   0504 D7            push a
0185   0505 DA            push d
0186   0506 FA FD FF      lea d, [bp + -3] ; $i
0187   0509 2A            mov b, [d]
0188   050A E7            pop d
0189   050B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0190   050F E4            pop a
0191   0510 32            mov bl, [d]
0192   0511 A7 00         mov bh, 0
0193   0513             ; --- START RELATIONAL
0194   0513 D7            push a
0195   0514 11            mov a, b
0196   0515 26 00 00      mov b, $0
0197   0518 B0            cmp a, b
0198   0519 FD 72         sneq ; !=
0199   051B E4            pop a
0200   051C             ; --- END RELATIONAL
0201   051C C0 00 00      cmp b, 0
0202   051F C6 68 05      je _for3_exit
0203   0522             _for3_block:
0204   0522             ; dest[dest_len + i] = src[i]; 
0205   0522 FA 05 00      lea d, [bp + 5] ; $dest
0206   0525 FD 2A         mov d, [d]
0207   0527 D7            push a
0208   0528 DA            push d
0209   0529 FA FF FF      lea d, [bp + -1] ; $dest_len
0210   052C 2A            mov b, [d]
0211   052D             ; --- START TERMS
0212   052D D7            push a
0213   052E 11            mov a, b
0214   052F FA FD FF      lea d, [bp + -3] ; $i
0215   0532 2A            mov b, [d]
0216   0533 56            add b, a
0217   0534 E4            pop a
0218   0535             ; --- END TERMS
0219   0535 E7            pop d
0220   0536 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0221   053A E4            pop a
0222   053B DA            push d
0223   053C FA 07 00      lea d, [bp + 7] ; $src
0224   053F FD 2A         mov d, [d]
0225   0541 D7            push a
0226   0542 DA            push d
0227   0543 FA FD FF      lea d, [bp + -3] ; $i
0228   0546 2A            mov b, [d]
0229   0547 E7            pop d
0230   0548 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0231   054C E4            pop a
0232   054D 32            mov bl, [d]
0233   054E A7 00         mov bh, 0
0234   0550 E7            pop d
0235   0551 FD 3E         mov [d], bl
0236   0553             _for3_update:
0237   0553 FA FD FF      lea d, [bp + -3] ; $i
0238   0556 DA            push d
0239   0557 FA FD FF      lea d, [bp + -3] ; $i
0240   055A 2A            mov b, [d]
0241   055B             ; --- START TERMS
0242   055B D7            push a
0243   055C 11            mov a, b
0244   055D 26 01 00      mov b, $1
0245   0560 56            add b, a
0246   0561 E4            pop a
0247   0562             ; --- END TERMS
0248   0562 E7            pop d
0249   0563 FD 43         mov [d], b
0250   0565 0A FF 04      jmp _for3_cond
0251   0568             _for3_exit:
0252   0568             ; dest[dest_len + i] = 0; 
0253   0568 FA 05 00      lea d, [bp + 5] ; $dest
0254   056B FD 2A         mov d, [d]
0255   056D D7            push a
0256   056E DA            push d
0257   056F FA FF FF      lea d, [bp + -1] ; $dest_len
0258   0572 2A            mov b, [d]
0259   0573             ; --- START TERMS
0260   0573 D7            push a
0261   0574 11            mov a, b
0262   0575 FA FD FF      lea d, [bp + -3] ; $i
0263   0578 2A            mov b, [d]
0264   0579 56            add b, a
0265   057A E4            pop a
0266   057B             ; --- END TERMS
0267   057B E7            pop d
0268   057C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0269   0580 E4            pop a
0270   0581 DA            push d
0271   0582 26 00 00      mov b, $0
0272   0585 E7            pop d
0273   0586 FD 3E         mov [d], bl
0274   0588             ; return dest; 
0275   0588 FA 05 00      lea d, [bp + 5] ; $dest
0276   058B 2A            mov b, [d]
0277   058C F9            leave
0278   058D 09            ret
0279   058E             
0280   058E             strlen:
0281   058E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0282   0591             ; int length; 
0283   0591 52 02 00      sub sp, 2
0284   0594             ; length = 0; 
0285   0594 FA FF FF      lea d, [bp + -1] ; $length
0286   0597 DA            push d
0287   0598 26 00 00      mov b, $0
0288   059B E7            pop d
0289   059C FD 43         mov [d], b
0290   059E             ; while (str[length] != 0) { 
0291   059E             _while4_cond:
0292   059E FA 05 00      lea d, [bp + 5] ; $str
0293   05A1 FD 2A         mov d, [d]
0294   05A3 D7            push a
0295   05A4 DA            push d
0296   05A5 FA FF FF      lea d, [bp + -1] ; $length
0297   05A8 2A            mov b, [d]
0298   05A9 E7            pop d
0299   05AA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0300   05AE E4            pop a
0301   05AF 32            mov bl, [d]
0302   05B0 A7 00         mov bh, 0
0303   05B2             ; --- START RELATIONAL
0304   05B2 D7            push a
0305   05B3 11            mov a, b
0306   05B4 26 00 00      mov b, $0
0307   05B7 B0            cmp a, b
0308   05B8 FD 72         sneq ; !=
0309   05BA E4            pop a
0310   05BB             ; --- END RELATIONAL
0311   05BB C0 00 00      cmp b, 0
0312   05BE C6 D1 05      je _while4_exit
0313   05C1             _while4_block:
0314   05C1             ; length++; 
0315   05C1 FA FF FF      lea d, [bp + -1] ; $length
0316   05C4 2A            mov b, [d]
0317   05C5 FD 77         inc b
0318   05C7 FA FF FF      lea d, [bp + -1] ; $length
0319   05CA FD 43         mov [d], b
0320   05CC FD 7D         dec b
0321   05CE 0A 9E 05      jmp _while4_cond
0322   05D1             _while4_exit:
0323   05D1             ; return length; 
0324   05D1 FA FF FF      lea d, [bp + -1] ; $length
0325   05D4 2A            mov b, [d]
0326   05D5 F9            leave
0327   05D6 09            ret
0328   05D7             
0329   05D7             exit:
0330   05D7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0331   05DA             
0332   05DA             ; --- BEGIN INLINE ASM SEGMENT
0333   05DA 05 0B         syscall sys_terminate_proc
0334   05DC             ; --- END INLINE ASM SEGMENT
0335   05DC             
0336   05DC F9            leave
0337   05DD 09            ret
0338   05DE             
0339   05DE             memset:
0340   05DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0341   05E1             ; int i; 
0342   05E1 52 02 00      sub sp, 2
0343   05E4             ; for(i = 0; i < size; i++){ 
0344   05E4             _for5_init:
0345   05E4 FA FF FF      lea d, [bp + -1] ; $i
0346   05E7 DA            push d
0347   05E8 26 00 00      mov b, $0
0348   05EB E7            pop d
0349   05EC FD 43         mov [d], b
0350   05EE             _for5_cond:
0351   05EE FA FF FF      lea d, [bp + -1] ; $i
0352   05F1 2A            mov b, [d]
0353   05F2             ; --- START RELATIONAL
0354   05F2 D7            push a
0355   05F3 11            mov a, b
0356   05F4 FA 08 00      lea d, [bp + 8] ; $size
0357   05F7 2A            mov b, [d]
0358   05F8 B0            cmp a, b
0359   05F9 FD 73         slt ; < (signed)
0360   05FB E4            pop a
0361   05FC             ; --- END RELATIONAL
0362   05FC C0 00 00      cmp b, 0
0363   05FF C6 28 06      je _for5_exit
0364   0602             _for5_block:
0365   0602             ; *(s+i) = c; 
0366   0602 FA 05 00      lea d, [bp + 5] ; $s
0367   0605 2A            mov b, [d]
0368   0606             ; --- START TERMS
0369   0606 D7            push a
0370   0607 11            mov a, b
0371   0608 FA FF FF      lea d, [bp + -1] ; $i
0372   060B 2A            mov b, [d]
0373   060C 56            add b, a
0374   060D E4            pop a
0375   060E             ; --- END TERMS
0376   060E D8            push b
0377   060F FA 07 00      lea d, [bp + 7] ; $c
0378   0612 32            mov bl, [d]
0379   0613 A7 00         mov bh, 0
0380   0615 E7            pop d
0381   0616 FD 3E         mov [d], bl
0382   0618             _for5_update:
0383   0618 FA FF FF      lea d, [bp + -1] ; $i
0384   061B 2A            mov b, [d]
0385   061C FD 77         inc b
0386   061E FA FF FF      lea d, [bp + -1] ; $i
0387   0621 FD 43         mov [d], b
0388   0623 FD 7D         dec b
0389   0625 0A EE 05      jmp _for5_cond
0390   0628             _for5_exit:
0391   0628             ; return s; 
0392   0628 FA 05 00      lea d, [bp + 5] ; $s
0393   062B 2A            mov b, [d]
0394   062C F9            leave
0395   062D 09            ret
0396   062E             
0397   062E             atoi:
0398   062E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0399   0631             ; int result = 0;  // Initialize result 
0400   0631 52 02 00      sub sp, 2
0401   0634             ; --- START LOCAL VAR INITIALIZATION
0402   0634 FA FF FF      lea d, [bp + -1] ; $result
0403   0637 DA            push d
0404   0638 26 00 00      mov b, $0
0405   063B E7            pop d
0406   063C FD 43         mov [d], b
0407   063E             ; --- END LOCAL VAR INITIALIZATION
0408   063E             ; int sign = 1;    // Initialize sign as positive 
0409   063E 52 02 00      sub sp, 2
0410   0641             ; --- START LOCAL VAR INITIALIZATION
0411   0641 FA FD FF      lea d, [bp + -3] ; $sign
0412   0644 DA            push d
0413   0645 26 01 00      mov b, $1
0414   0648 E7            pop d
0415   0649 FD 43         mov [d], b
0416   064B             ; --- END LOCAL VAR INITIALIZATION
0417   064B             ; while (*str == ' ') str++; 
0418   064B             _while6_cond:
0419   064B FA 05 00      lea d, [bp + 5] ; $str
0420   064E 2A            mov b, [d]
0421   064F 74            mov d, b
0422   0650 32            mov bl, [d]
0423   0651 A7 00         mov bh, 0
0424   0653             ; --- START RELATIONAL
0425   0653 D7            push a
0426   0654 11            mov a, b
0427   0655 26 20 00      mov b, $20
0428   0658 B0            cmp a, b
0429   0659 FD 71         seq ; ==
0430   065B E4            pop a
0431   065C             ; --- END RELATIONAL
0432   065C C0 00 00      cmp b, 0
0433   065F C6 72 06      je _while6_exit
0434   0662             _while6_block:
0435   0662             ; str++; 
0436   0662 FA 05 00      lea d, [bp + 5] ; $str
0437   0665 2A            mov b, [d]
0438   0666 FD 77         inc b
0439   0668 FA 05 00      lea d, [bp + 5] ; $str
0440   066B FD 43         mov [d], b
0441   066D FD 7D         dec b
0442   066F 0A 4B 06      jmp _while6_cond
0443   0672             _while6_exit:
0444   0672             ; if (*str == '-' || *str == '+') { 
0445   0672             _if7_cond:
0446   0672 FA 05 00      lea d, [bp + 5] ; $str
0447   0675 2A            mov b, [d]
0448   0676 74            mov d, b
0449   0677 32            mov bl, [d]
0450   0678 A7 00         mov bh, 0
0451   067A             ; --- START RELATIONAL
0452   067A D7            push a
0453   067B 11            mov a, b
0454   067C 26 2D 00      mov b, $2d
0455   067F B0            cmp a, b
0456   0680 FD 71         seq ; ==
0457   0682 E4            pop a
0458   0683             ; --- END RELATIONAL
0459   0683             ; --- START LOGICAL OR
0460   0683 D7            push a
0461   0684 11            mov a, b
0462   0685 FA 05 00      lea d, [bp + 5] ; $str
0463   0688 2A            mov b, [d]
0464   0689 74            mov d, b
0465   068A 32            mov bl, [d]
0466   068B A7 00         mov bh, 0
0467   068D             ; --- START RELATIONAL
0468   068D D7            push a
0469   068E 11            mov a, b
0470   068F 26 2B 00      mov b, $2b
0471   0692 B0            cmp a, b
0472   0693 FD 71         seq ; ==
0473   0695 E4            pop a
0474   0696             ; --- END RELATIONAL
0475   0696 FD A8         sor a, b ; ||
0476   0698 E4            pop a
0477   0699             ; --- END LOGICAL OR
0478   0699 C0 00 00      cmp b, 0
0479   069C C6 D5 06      je _if7_exit
0480   069F             _if7_true:
0481   069F             ; if (*str == '-') sign = -1; 
0482   069F             _if8_cond:
0483   069F FA 05 00      lea d, [bp + 5] ; $str
0484   06A2 2A            mov b, [d]
0485   06A3 74            mov d, b
0486   06A4 32            mov bl, [d]
0487   06A5 A7 00         mov bh, 0
0488   06A7             ; --- START RELATIONAL
0489   06A7 D7            push a
0490   06A8 11            mov a, b
0491   06A9 26 2D 00      mov b, $2d
0492   06AC B0            cmp a, b
0493   06AD FD 71         seq ; ==
0494   06AF E4            pop a
0495   06B0             ; --- END RELATIONAL
0496   06B0 C0 00 00      cmp b, 0
0497   06B3 C6 C5 06      je _if8_exit
0498   06B6             _if8_true:
0499   06B6             ; sign = -1; 
0500   06B6 FA FD FF      lea d, [bp + -3] ; $sign
0501   06B9 DA            push d
0502   06BA 26 01 00      mov b, $1
0503   06BD FD 97         neg b
0504   06BF E7            pop d
0505   06C0 FD 43         mov [d], b
0506   06C2 0A C5 06      jmp _if8_exit
0507   06C5             _if8_exit:
0508   06C5             ; str++; 
0509   06C5 FA 05 00      lea d, [bp + 5] ; $str
0510   06C8 2A            mov b, [d]
0511   06C9 FD 77         inc b
0512   06CB FA 05 00      lea d, [bp + 5] ; $str
0513   06CE FD 43         mov [d], b
0514   06D0 FD 7D         dec b
0515   06D2 0A D5 06      jmp _if7_exit
0516   06D5             _if7_exit:
0517   06D5             ; while (*str >= '0' && *str <= '9') { 
0518   06D5             _while9_cond:
0519   06D5 FA 05 00      lea d, [bp + 5] ; $str
0520   06D8 2A            mov b, [d]
0521   06D9 74            mov d, b
0522   06DA 32            mov bl, [d]
0523   06DB A7 00         mov bh, 0
0524   06DD             ; --- START RELATIONAL
0525   06DD D7            push a
0526   06DE 11            mov a, b
0527   06DF 26 30 00      mov b, $30
0528   06E2 B0            cmp a, b
0529   06E3 FD 82         sgeu ; >= (unsigned)
0530   06E5 E4            pop a
0531   06E6             ; --- END RELATIONAL
0532   06E6             ; --- START LOGICAL AND
0533   06E6 D7            push a
0534   06E7 11            mov a, b
0535   06E8 FA 05 00      lea d, [bp + 5] ; $str
0536   06EB 2A            mov b, [d]
0537   06EC 74            mov d, b
0538   06ED 32            mov bl, [d]
0539   06EE A7 00         mov bh, 0
0540   06F0             ; --- START RELATIONAL
0541   06F0 D7            push a
0542   06F1 11            mov a, b
0543   06F2 26 39 00      mov b, $39
0544   06F5 B0            cmp a, b
0545   06F6 FD 76         sleu ; <= (unsigned)
0546   06F8 E4            pop a
0547   06F9             ; --- END RELATIONAL
0548   06F9 FD A7         sand a, b
0549   06FB E4            pop a
0550   06FC             ; --- END LOGICAL AND
0551   06FC C0 00 00      cmp b, 0
0552   06FF C6 3A 07      je _while9_exit
0553   0702             _while9_block:
0554   0702             ; result = result * 10 + (*str - '0'); 
0555   0702 FA FF FF      lea d, [bp + -1] ; $result
0556   0705 DA            push d
0557   0706 FA FF FF      lea d, [bp + -1] ; $result
0558   0709 2A            mov b, [d]
0559   070A             ; --- START FACTORS
0560   070A D7            push a
0561   070B 11            mov a, b
0562   070C 26 0A 00      mov b, $a
0563   070F AC            mul a, b ; *
0564   0710 11            mov a, b
0565   0711 27            mov b, a
0566   0712 E4            pop a
0567   0713             ; --- END FACTORS
0568   0713             ; --- START TERMS
0569   0713 D7            push a
0570   0714 11            mov a, b
0571   0715 FA 05 00      lea d, [bp + 5] ; $str
0572   0718 2A            mov b, [d]
0573   0719 74            mov d, b
0574   071A 32            mov bl, [d]
0575   071B A7 00         mov bh, 0
0576   071D             ; --- START TERMS
0577   071D D7            push a
0578   071E 11            mov a, b
0579   071F 26 30 00      mov b, $30
0580   0722 60            sub a, b
0581   0723 27            mov b, a
0582   0724 E4            pop a
0583   0725             ; --- END TERMS
0584   0725 56            add b, a
0585   0726 E4            pop a
0586   0727             ; --- END TERMS
0587   0727 E7            pop d
0588   0728 FD 43         mov [d], b
0589   072A             ; str++; 
0590   072A FA 05 00      lea d, [bp + 5] ; $str
0591   072D 2A            mov b, [d]
0592   072E FD 77         inc b
0593   0730 FA 05 00      lea d, [bp + 5] ; $str
0594   0733 FD 43         mov [d], b
0595   0735 FD 7D         dec b
0596   0737 0A D5 06      jmp _while9_cond
0597   073A             _while9_exit:
0598   073A             ; return sign * result; 
0599   073A FA FD FF      lea d, [bp + -3] ; $sign
0600   073D 2A            mov b, [d]
0601   073E             ; --- START FACTORS
0602   073E D7            push a
0603   073F 11            mov a, b
0604   0740 FA FF FF      lea d, [bp + -1] ; $result
0605   0743 2A            mov b, [d]
0606   0744 AC            mul a, b ; *
0607   0745 11            mov a, b
0608   0746 27            mov b, a
0609   0747 E4            pop a
0610   0748             ; --- END FACTORS
0611   0748 F9            leave
0612   0749 09            ret
0613   074A             
0614   074A             rand:
0615   074A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0616   074D             ; int  sec; 
0617   074D 52 02 00      sub sp, 2
0618   0750             
0619   0750             ; --- BEGIN INLINE ASM SEGMENT
0620   0750 19 00         mov al, 0
0621   0752 05 01         syscall sys_rtc					
0622   0754 1A            mov al, ah
0623   0755 FA FF FF      lea d, [bp + -1] ; $sec
0624   0758 1E            mov al, [d]
0625   0759 22 00         mov ah, 0
0626   075B             ; --- END INLINE ASM SEGMENT
0627   075B             
0628   075B             ; return sec; 
0629   075B FA FF FF      lea d, [bp + -1] ; $sec
0630   075E 2A            mov b, [d]
0631   075F F9            leave
0632   0760 09            ret
0633   0761             
0634   0761             alloc:
0635   0761 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0636   0764             ; heap_top = heap_top + bytes; 
0637   0764 3B D1 7A      mov d, _heap_top ; $heap_top
0638   0767 DA            push d
0639   0768 3B D1 7A      mov d, _heap_top ; $heap_top
0640   076B 2A            mov b, [d]
0641   076C             ; --- START TERMS
0642   076C D7            push a
0643   076D 11            mov a, b
0644   076E FA 05 00      lea d, [bp + 5] ; $bytes
0645   0771 2A            mov b, [d]
0646   0772 56            add b, a
0647   0773 E4            pop a
0648   0774             ; --- END TERMS
0649   0774 E7            pop d
0650   0775 FD 43         mov [d], b
0651   0777             ; return heap_top - bytes; 
0652   0777 3B D1 7A      mov d, _heap_top ; $heap_top
0653   077A 2A            mov b, [d]
0654   077B             ; --- START TERMS
0655   077B D7            push a
0656   077C 11            mov a, b
0657   077D FA 05 00      lea d, [bp + 5] ; $bytes
0658   0780 2A            mov b, [d]
0659   0781 60            sub a, b
0660   0782 27            mov b, a
0661   0783 E4            pop a
0662   0784             ; --- END TERMS
0663   0784 F9            leave
0664   0785 09            ret
0665   0786             
0666   0786             free:
0667   0786 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0668   0789             ; return heap_top = heap_top - bytes; 
0669   0789 3B D1 7A      mov d, _heap_top ; $heap_top
0670   078C DA            push d
0671   078D 3B D1 7A      mov d, _heap_top ; $heap_top
0672   0790 2A            mov b, [d]
0673   0791             ; --- START TERMS
0674   0791 D7            push a
0675   0792 11            mov a, b
0676   0793 FA 05 00      lea d, [bp + 5] ; $bytes
0677   0796 2A            mov b, [d]
0678   0797 60            sub a, b
0679   0798 27            mov b, a
0680   0799 E4            pop a
0681   079A             ; --- END TERMS
0682   079A E7            pop d
0683   079B FD 43         mov [d], b
0684   079D F9            leave
0685   079E 09            ret
0686   079F             
0687   079F             fopen:
0688   079F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0689   07A2             ; FILE *fp; 
0690   07A2 52 02 00      sub sp, 2
0691   07A5             ; fp = alloc(sizeof(int)); 
0692   07A5 FA FF FF      lea d, [bp + -1] ; $fp
0693   07A8 DA            push d
0694   07A9 26 02 00      mov b, 2
0695   07AC FD AB         swp b
0696   07AE D8            push b
0697   07AF 07 61 07      call alloc
0698   07B2 51 02 00      add sp, 2
0699   07B5 E7            pop d
0700   07B6 FD 43         mov [d], b
0701   07B8 F9            leave
0702   07B9 09            ret
0703   07BA             
0704   07BA             printf:
0705   07BA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0706   07BD             ; char *p, *format_p; 
0707   07BD 52 02 00      sub sp, 2
0708   07C0 52 02 00      sub sp, 2
0709   07C3             ; format_p = format; 
0710   07C3 FA FD FF      lea d, [bp + -3] ; $format_p
0711   07C6 DA            push d
0712   07C7 FA 05 00      lea d, [bp + 5] ; $format
0713   07CA 2A            mov b, [d]
0714   07CB E7            pop d
0715   07CC FD 43         mov [d], b
0716   07CE             ; p = &format + 2; 
0717   07CE FA FF FF      lea d, [bp + -1] ; $p
0718   07D1 DA            push d
0719   07D2 FA 05 00      lea d, [bp + 5] ; $format
0720   07D5 2D            mov b, d
0721   07D6             ; --- START TERMS
0722   07D6 D7            push a
0723   07D7 11            mov a, b
0724   07D8 26 02 00      mov b, $2
0725   07DB 56            add b, a
0726   07DC E4            pop a
0727   07DD             ; --- END TERMS
0728   07DD E7            pop d
0729   07DE FD 43         mov [d], b
0730   07E0             ; for(;;){ 
0731   07E0             _for10_init:
0732   07E0             _for10_cond:
0733   07E0             _for10_block:
0734   07E0             ; if(!*format_p) break; 
0735   07E0             _if11_cond:
0736   07E0 FA FD FF      lea d, [bp + -3] ; $format_p
0737   07E3 2A            mov b, [d]
0738   07E4 74            mov d, b
0739   07E5 32            mov bl, [d]
0740   07E6 A7 00         mov bh, 0
0741   07E8 C0 00 00      cmp b, 0
0742   07EB FD 71         seq ; !
0743   07ED C0 00 00      cmp b, 0
0744   07F0 C6 F9 07      je _if11_else
0745   07F3             _if11_true:
0746   07F3             ; break; 
0747   07F3 0A 20 0A      jmp _for10_exit ; for break
0748   07F6 0A 1D 0A      jmp _if11_exit
0749   07F9             _if11_else:
0750   07F9             ; if(*format_p == '%'){ 
0751   07F9             _if12_cond:
0752   07F9 FA FD FF      lea d, [bp + -3] ; $format_p
0753   07FC 2A            mov b, [d]
0754   07FD 74            mov d, b
0755   07FE 32            mov bl, [d]
0756   07FF A7 00         mov bh, 0
0757   0801             ; --- START RELATIONAL
0758   0801 D7            push a
0759   0802 11            mov a, b
0760   0803 26 25 00      mov b, $25
0761   0806 B0            cmp a, b
0762   0807 FD 71         seq ; ==
0763   0809 E4            pop a
0764   080A             ; --- END RELATIONAL
0765   080A C0 00 00      cmp b, 0
0766   080D C6 01 0A      je _if12_else
0767   0810             _if12_true:
0768   0810             ; format_p++; 
0769   0810 FA FD FF      lea d, [bp + -3] ; $format_p
0770   0813 2A            mov b, [d]
0771   0814 FD 77         inc b
0772   0816 FA FD FF      lea d, [bp + -3] ; $format_p
0773   0819 FD 43         mov [d], b
0774   081B FD 7D         dec b
0775   081D             ; switch(*format_p){ 
0776   081D             _switch13_expr:
0777   081D FA FD FF      lea d, [bp + -3] ; $format_p
0778   0820 2A            mov b, [d]
0779   0821 74            mov d, b
0780   0822 32            mov bl, [d]
0781   0823 A7 00         mov bh, 0
0782   0825             _switch13_comparisons:
0783   0825 C1 6C         cmp bl, $6c
0784   0827 C6 53 08      je _switch13_case0
0785   082A C1 4C         cmp bl, $4c
0786   082C C6 53 08      je _switch13_case1
0787   082F C1 64         cmp bl, $64
0788   0831 C6 41 09      je _switch13_case2
0789   0834 C1 69         cmp bl, $69
0790   0836 C6 41 09      je _switch13_case3
0791   0839 C1 75         cmp bl, $75
0792   083B C6 65 09      je _switch13_case4
0793   083E C1 78         cmp bl, $78
0794   0840 C6 89 09      je _switch13_case5
0795   0843 C1 63         cmp bl, $63
0796   0845 C6 A7 09      je _switch13_case6
0797   0848 C1 73         cmp bl, $73
0798   084A C6 C6 09      je _switch13_case7
0799   084D 0A E5 09      jmp _switch13_default
0800   0850 0A F1 09      jmp _switch13_exit
0801   0853             _switch13_case0:
0802   0853             _switch13_case1:
0803   0853             ; format_p++; 
0804   0853 FA FD FF      lea d, [bp + -3] ; $format_p
0805   0856 2A            mov b, [d]
0806   0857 FD 77         inc b
0807   0859 FA FD FF      lea d, [bp + -3] ; $format_p
0808   085C FD 43         mov [d], b
0809   085E FD 7D         dec b
0810   0860             ; if(*format_p == 'd' || *format_p == 'i') 
0811   0860             _if14_cond:
0812   0860 FA FD FF      lea d, [bp + -3] ; $format_p
0813   0863 2A            mov b, [d]
0814   0864 74            mov d, b
0815   0865 32            mov bl, [d]
0816   0866 A7 00         mov bh, 0
0817   0868             ; --- START RELATIONAL
0818   0868 D7            push a
0819   0869 11            mov a, b
0820   086A 26 64 00      mov b, $64
0821   086D B0            cmp a, b
0822   086E FD 71         seq ; ==
0823   0870 E4            pop a
0824   0871             ; --- END RELATIONAL
0825   0871             ; --- START LOGICAL OR
0826   0871 D7            push a
0827   0872 11            mov a, b
0828   0873 FA FD FF      lea d, [bp + -3] ; $format_p
0829   0876 2A            mov b, [d]
0830   0877 74            mov d, b
0831   0878 32            mov bl, [d]
0832   0879 A7 00         mov bh, 0
0833   087B             ; --- START RELATIONAL
0834   087B D7            push a
0835   087C 11            mov a, b
0836   087D 26 69 00      mov b, $69
0837   0880 B0            cmp a, b
0838   0881 FD 71         seq ; ==
0839   0883 E4            pop a
0840   0884             ; --- END RELATIONAL
0841   0884 FD A8         sor a, b ; ||
0842   0886 E4            pop a
0843   0887             ; --- END LOGICAL OR
0844   0887 C0 00 00      cmp b, 0
0845   088A C6 AF 08      je _if14_else
0846   088D             _if14_true:
0847   088D             ; print_signed_long(*(long *)p); 
0848   088D FA FF FF      lea d, [bp + -1] ; $p
0849   0890 2A            mov b, [d]
0850   0891 AB            snex b
0851   0892 FD 39         mov c, b
0852   0894 74            mov d, b
0853   0895 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0854   0898 FD 39         mov c, b ; And place it into C
0855   089A 2A            mov b, [d] ; Lower Word in B
0856   089B FD 79         mov g, b
0857   089D 28            mov b, c
0858   089E FD AB         swp b
0859   08A0 D8            push b
0860   08A1 FD 27         mov b, g
0861   08A3 FD AB         swp b
0862   08A5 D8            push b
0863   08A6 07 11 12      call print_signed_long
0864   08A9 51 04 00      add sp, 4
0865   08AC 0A 2C 09      jmp _if14_exit
0866   08AF             _if14_else:
0867   08AF             ; if(*format_p == 'u') 
0868   08AF             _if15_cond:
0869   08AF FA FD FF      lea d, [bp + -3] ; $format_p
0870   08B2 2A            mov b, [d]
0871   08B3 74            mov d, b
0872   08B4 32            mov bl, [d]
0873   08B5 A7 00         mov bh, 0
0874   08B7             ; --- START RELATIONAL
0875   08B7 D7            push a
0876   08B8 11            mov a, b
0877   08B9 26 75 00      mov b, $75
0878   08BC B0            cmp a, b
0879   08BD FD 71         seq ; ==
0880   08BF E4            pop a
0881   08C0             ; --- END RELATIONAL
0882   08C0 C0 00 00      cmp b, 0
0883   08C3 C6 EA 08      je _if15_else
0884   08C6             _if15_true:
0885   08C6             ; print_unsigned_long(*(unsigned long *)p); 
0886   08C6 FA FF FF      lea d, [bp + -1] ; $p
0887   08C9 2A            mov b, [d]
0888   08CA A7 00         mov bh, 0
0889   08CC 38 00 00      mov c, 0
0890   08CF 74            mov d, b
0891   08D0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0892   08D3 FD 39         mov c, b ; And place it into C
0893   08D5 2A            mov b, [d] ; Lower Word in B
0894   08D6 FD 79         mov g, b
0895   08D8 28            mov b, c
0896   08D9 FD AB         swp b
0897   08DB D8            push b
0898   08DC FD 27         mov b, g
0899   08DE FD AB         swp b
0900   08E0 D8            push b
0901   08E1 07 53 13      call print_unsigned_long
0902   08E4 51 04 00      add sp, 4
0903   08E7 0A 2C 09      jmp _if15_exit
0904   08EA             _if15_else:
0905   08EA             ; if(*format_p == 'x') 
0906   08EA             _if16_cond:
0907   08EA FA FD FF      lea d, [bp + -3] ; $format_p
0908   08ED 2A            mov b, [d]
0909   08EE 74            mov d, b
0910   08EF 32            mov bl, [d]
0911   08F0 A7 00         mov bh, 0
0912   08F2             ; --- START RELATIONAL
0913   08F2 D7            push a
0914   08F3 11            mov a, b
0915   08F4 26 78 00      mov b, $78
0916   08F7 B0            cmp a, b
0917   08F8 FD 71         seq ; ==
0918   08FA E4            pop a
0919   08FB             ; --- END RELATIONAL
0920   08FB C0 00 00      cmp b, 0
0921   08FE C6 20 09      je _if16_else
0922   0901             _if16_true:
0923   0901             ; printx32(*(long int *)p); 
0924   0901 FA FF FF      lea d, [bp + -1] ; $p
0925   0904 2A            mov b, [d]
0926   0905 74            mov d, b
0927   0906 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0928   0909 FD 39         mov c, b ; And place it into C
0929   090B 2A            mov b, [d] ; Lower Word in B
0930   090C FD 79         mov g, b
0931   090E 28            mov b, c
0932   090F FD AB         swp b
0933   0911 D8            push b
0934   0912 FD 27         mov b, g
0935   0914 FD AB         swp b
0936   0916 D8            push b
0937   0917 07 86 0F      call printx32
0938   091A 51 04 00      add sp, 4
0939   091D 0A 2C 09      jmp _if16_exit
0940   0920             _if16_else:
0941   0920             ; err("Unexpected format in printf."); 
0942   0920 26 AD 67      mov b, _s30 ; "Unexpected format in printf."
0943   0923 FD AB         swp b
0944   0925 D8            push b
0945   0926 07 74 0F      call err
0946   0929 51 02 00      add sp, 2
0947   092C             _if16_exit:
0948   092C             _if15_exit:
0949   092C             _if14_exit:
0950   092C             ; p = p + 4; 
0951   092C FA FF FF      lea d, [bp + -1] ; $p
0952   092F DA            push d
0953   0930 FA FF FF      lea d, [bp + -1] ; $p
0954   0933 2A            mov b, [d]
0955   0934             ; --- START TERMS
0956   0934 D7            push a
0957   0935 11            mov a, b
0958   0936 26 04 00      mov b, $4
0959   0939 56            add b, a
0960   093A E4            pop a
0961   093B             ; --- END TERMS
0962   093B E7            pop d
0963   093C FD 43         mov [d], b
0964   093E             ; break; 
0965   093E 0A F1 09      jmp _switch13_exit ; case break
0966   0941             _switch13_case2:
0967   0941             _switch13_case3:
0968   0941             ; print_signed(*(int*)p); 
0969   0941 FA FF FF      lea d, [bp + -1] ; $p
0970   0944 2A            mov b, [d]
0971   0945 74            mov d, b
0972   0946 2A            mov b, [d]
0973   0947 FD AB         swp b
0974   0949 D8            push b
0975   094A 07 1A 11      call print_signed
0976   094D 51 02 00      add sp, 2
0977   0950             ; p = p + 2; 
0978   0950 FA FF FF      lea d, [bp + -1] ; $p
0979   0953 DA            push d
0980   0954 FA FF FF      lea d, [bp + -1] ; $p
0981   0957 2A            mov b, [d]
0982   0958             ; --- START TERMS
0983   0958 D7            push a
0984   0959 11            mov a, b
0985   095A 26 02 00      mov b, $2
0986   095D 56            add b, a
0987   095E E4            pop a
0988   095F             ; --- END TERMS
0989   095F E7            pop d
0990   0960 FD 43         mov [d], b
0991   0962             ; break; 
0992   0962 0A F1 09      jmp _switch13_exit ; case break
0993   0965             _switch13_case4:
0994   0965             ; print_unsigned(*(unsigned int*)p); 
0995   0965 FA FF FF      lea d, [bp + -1] ; $p
0996   0968 2A            mov b, [d]
0997   0969 74            mov d, b
0998   096A 2A            mov b, [d]
0999   096B FD AB         swp b
1000   096D D8            push b
1001   096E 07 59 15      call print_unsigned
1002   0971 51 02 00      add sp, 2
1003   0974             ; p = p + 2; 
1004   0974 FA FF FF      lea d, [bp + -1] ; $p
1005   0977 DA            push d
1006   0978 FA FF FF      lea d, [bp + -1] ; $p
1007   097B 2A            mov b, [d]
1008   097C             ; --- START TERMS
1009   097C D7            push a
1010   097D 11            mov a, b
1011   097E 26 02 00      mov b, $2
1012   0981 56            add b, a
1013   0982 E4            pop a
1014   0983             ; --- END TERMS
1015   0983 E7            pop d
1016   0984 FD 43         mov [d], b
1017   0986             ; break; 
1018   0986 0A F1 09      jmp _switch13_exit ; case break
1019   0989             _switch13_case5:
1020   0989             
1021   0989             ; --- BEGIN INLINE ASM SEGMENT
1022   0989 FA FF FF      lea d, [bp + -1] ; $p
1023   098C FD 2A         mov d, [d]
1024   098E 2A            mov b, [d]
1025   098F 07 B8 1A      call print_u16x
1026   0992             ; --- END INLINE ASM SEGMENT
1027   0992             
1028   0992             ; p = p + 2; 
1029   0992 FA FF FF      lea d, [bp + -1] ; $p
1030   0995 DA            push d
1031   0996 FA FF FF      lea d, [bp + -1] ; $p
1032   0999 2A            mov b, [d]
1033   099A             ; --- START TERMS
1034   099A D7            push a
1035   099B 11            mov a, b
1036   099C 26 02 00      mov b, $2
1037   099F 56            add b, a
1038   09A0 E4            pop a
1039   09A1             ; --- END TERMS
1040   09A1 E7            pop d
1041   09A2 FD 43         mov [d], b
1042   09A4             ; break; 
1043   09A4 0A F1 09      jmp _switch13_exit ; case break
1044   09A7             _switch13_case6:
1045   09A7             
1046   09A7             ; --- BEGIN INLINE ASM SEGMENT
1047   09A7 FA FF FF      lea d, [bp + -1] ; $p
1048   09AA FD 2A         mov d, [d]
1049   09AC 1E            mov al, [d]
1050   09AD 23            mov ah, al
1051   09AE 07 16 19      call _putchar
1052   09B1             ; --- END INLINE ASM SEGMENT
1053   09B1             
1054   09B1             ; p = p + 1; 
1055   09B1 FA FF FF      lea d, [bp + -1] ; $p
1056   09B4 DA            push d
1057   09B5 FA FF FF      lea d, [bp + -1] ; $p
1058   09B8 2A            mov b, [d]
1059   09B9             ; --- START TERMS
1060   09B9 D7            push a
1061   09BA 11            mov a, b
1062   09BB 26 01 00      mov b, $1
1063   09BE 56            add b, a
1064   09BF E4            pop a
1065   09C0             ; --- END TERMS
1066   09C0 E7            pop d
1067   09C1 FD 43         mov [d], b
1068   09C3             ; break; 
1069   09C3 0A F1 09      jmp _switch13_exit ; case break
1070   09C6             _switch13_case7:
1071   09C6             
1072   09C6             ; --- BEGIN INLINE ASM SEGMENT
1073   09C6 FA FF FF      lea d, [bp + -1] ; $p
1074   09C9 FD 2A         mov d, [d]
1075   09CB FD 2A         mov d, [d]
1076   09CD 07 60 1A      call _puts
1077   09D0             ; --- END INLINE ASM SEGMENT
1078   09D0             
1079   09D0             ; p = p + 2; 
1080   09D0 FA FF FF      lea d, [bp + -1] ; $p
1081   09D3 DA            push d
1082   09D4 FA FF FF      lea d, [bp + -1] ; $p
1083   09D7 2A            mov b, [d]
1084   09D8             ; --- START TERMS
1085   09D8 D7            push a
1086   09D9 11            mov a, b
1087   09DA 26 02 00      mov b, $2
1088   09DD 56            add b, a
1089   09DE E4            pop a
1090   09DF             ; --- END TERMS
1091   09DF E7            pop d
1092   09E0 FD 43         mov [d], b
1093   09E2             ; break; 
1094   09E2 0A F1 09      jmp _switch13_exit ; case break
1095   09E5             _switch13_default:
1096   09E5             ; print("Error: Unknown argument type.\n"); 
1097   09E5 26 CA 67      mov b, _s31 ; "Error: Unknown argument type.\n"
1098   09E8 FD AB         swp b
1099   09EA D8            push b
1100   09EB 07 CD 17      call print
1101   09EE 51 02 00      add sp, 2
1102   09F1             _switch13_exit:
1103   09F1             ; format_p++; 
1104   09F1 FA FD FF      lea d, [bp + -3] ; $format_p
1105   09F4 2A            mov b, [d]
1106   09F5 FD 77         inc b
1107   09F7 FA FD FF      lea d, [bp + -3] ; $format_p
1108   09FA FD 43         mov [d], b
1109   09FC FD 7D         dec b
1110   09FE 0A 1D 0A      jmp _if12_exit
1111   0A01             _if12_else:
1112   0A01             ; putchar(*format_p); 
1113   0A01 FA FD FF      lea d, [bp + -3] ; $format_p
1114   0A04 2A            mov b, [d]
1115   0A05 74            mov d, b
1116   0A06 32            mov bl, [d]
1117   0A07 A7 00         mov bh, 0
1118   0A09 DD            push bl
1119   0A0A 07 85 17      call putchar
1120   0A0D 51 01 00      add sp, 1
1121   0A10             ; format_p++; 
1122   0A10 FA FD FF      lea d, [bp + -3] ; $format_p
1123   0A13 2A            mov b, [d]
1124   0A14 FD 77         inc b
1125   0A16 FA FD FF      lea d, [bp + -3] ; $format_p
1126   0A19 FD 43         mov [d], b
1127   0A1B FD 7D         dec b
1128   0A1D             _if12_exit:
1129   0A1D             _if11_exit:
1130   0A1D             _for10_update:
1131   0A1D 0A E0 07      jmp _for10_cond
1132   0A20             _for10_exit:
1133   0A20 F9            leave
1134   0A21 09            ret
1135   0A22             
1136   0A22             scanf:
1137   0A22 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1138   0A25             ; char *p, *format_p; 
1139   0A25 52 02 00      sub sp, 2
1140   0A28 52 02 00      sub sp, 2
1141   0A2B             ; char c; 
1142   0A2B 52 01 00      sub sp, 1
1143   0A2E             ; int i; 
1144   0A2E 52 02 00      sub sp, 2
1145   0A31             ; char input_string[  512                    ]; 
1146   0A31 52 00 02      sub sp, 512
1147   0A34             ; format_p = format; 
1148   0A34 FA FD FF      lea d, [bp + -3] ; $format_p
1149   0A37 DA            push d
1150   0A38 FA 05 00      lea d, [bp + 5] ; $format
1151   0A3B 2A            mov b, [d]
1152   0A3C E7            pop d
1153   0A3D FD 43         mov [d], b
1154   0A3F             ; p = &format + 2; 
1155   0A3F FA FF FF      lea d, [bp + -1] ; $p
1156   0A42 DA            push d
1157   0A43 FA 05 00      lea d, [bp + 5] ; $format
1158   0A46 2D            mov b, d
1159   0A47             ; --- START TERMS
1160   0A47 D7            push a
1161   0A48 11            mov a, b
1162   0A49 26 02 00      mov b, $2
1163   0A4C 56            add b, a
1164   0A4D E4            pop a
1165   0A4E             ; --- END TERMS
1166   0A4E E7            pop d
1167   0A4F FD 43         mov [d], b
1168   0A51             ; for(;;){ 
1169   0A51             _for17_init:
1170   0A51             _for17_cond:
1171   0A51             _for17_block:
1172   0A51             ; if(!*format_p) break; 
1173   0A51             _if18_cond:
1174   0A51 FA FD FF      lea d, [bp + -3] ; $format_p
1175   0A54 2A            mov b, [d]
1176   0A55 74            mov d, b
1177   0A56 32            mov bl, [d]
1178   0A57 A7 00         mov bh, 0
1179   0A59 C0 00 00      cmp b, 0
1180   0A5C FD 71         seq ; !
1181   0A5E C0 00 00      cmp b, 0
1182   0A61 C6 6A 0A      je _if18_else
1183   0A64             _if18_true:
1184   0A64             ; break; 
1185   0A64 0A 6B 0C      jmp _for17_exit ; for break
1186   0A67 0A 68 0C      jmp _if18_exit
1187   0A6A             _if18_else:
1188   0A6A             ; if(*format_p == '%'){ 
1189   0A6A             _if19_cond:
1190   0A6A FA FD FF      lea d, [bp + -3] ; $format_p
1191   0A6D 2A            mov b, [d]
1192   0A6E 74            mov d, b
1193   0A6F 32            mov bl, [d]
1194   0A70 A7 00         mov bh, 0
1195   0A72             ; --- START RELATIONAL
1196   0A72 D7            push a
1197   0A73 11            mov a, b
1198   0A74 26 25 00      mov b, $25
1199   0A77 B0            cmp a, b
1200   0A78 FD 71         seq ; ==
1201   0A7A E4            pop a
1202   0A7B             ; --- END RELATIONAL
1203   0A7B C0 00 00      cmp b, 0
1204   0A7E C6 4C 0C      je _if19_else
1205   0A81             _if19_true:
1206   0A81             ; format_p++; 
1207   0A81 FA FD FF      lea d, [bp + -3] ; $format_p
1208   0A84 2A            mov b, [d]
1209   0A85 FD 77         inc b
1210   0A87 FA FD FF      lea d, [bp + -3] ; $format_p
1211   0A8A FD 43         mov [d], b
1212   0A8C FD 7D         dec b
1213   0A8E             ; switch(*format_p){ 
1214   0A8E             _switch20_expr:
1215   0A8E FA FD FF      lea d, [bp + -3] ; $format_p
1216   0A91 2A            mov b, [d]
1217   0A92 74            mov d, b
1218   0A93 32            mov bl, [d]
1219   0A94 A7 00         mov bh, 0
1220   0A96             _switch20_comparisons:
1221   0A96 C1 6C         cmp bl, $6c
1222   0A98 C6 C4 0A      je _switch20_case0
1223   0A9B C1 4C         cmp bl, $4c
1224   0A9D C6 C4 0A      je _switch20_case1
1225   0AA0 C1 64         cmp bl, $64
1226   0AA2 C6 56 0B      je _switch20_case2
1227   0AA5 C1 69         cmp bl, $69
1228   0AA7 C6 56 0B      je _switch20_case3
1229   0AAA C1 75         cmp bl, $75
1230   0AAC C6 83 0B      je _switch20_case4
1231   0AAF C1 78         cmp bl, $78
1232   0AB1 C6 B0 0B      je _switch20_case5
1233   0AB4 C1 63         cmp bl, $63
1234   0AB6 C6 C5 0B      je _switch20_case6
1235   0AB9 C1 73         cmp bl, $73
1236   0ABB C6 F8 0B      je _switch20_case7
1237   0ABE 0A 30 0C      jmp _switch20_default
1238   0AC1 0A 3C 0C      jmp _switch20_exit
1239   0AC4             _switch20_case0:
1240   0AC4             _switch20_case1:
1241   0AC4             ; format_p++; 
1242   0AC4 FA FD FF      lea d, [bp + -3] ; $format_p
1243   0AC7 2A            mov b, [d]
1244   0AC8 FD 77         inc b
1245   0ACA FA FD FF      lea d, [bp + -3] ; $format_p
1246   0ACD FD 43         mov [d], b
1247   0ACF FD 7D         dec b
1248   0AD1             ; if(*format_p == 'd' || *format_p == 'i'); 
1249   0AD1             _if21_cond:
1250   0AD1 FA FD FF      lea d, [bp + -3] ; $format_p
1251   0AD4 2A            mov b, [d]
1252   0AD5 74            mov d, b
1253   0AD6 32            mov bl, [d]
1254   0AD7 A7 00         mov bh, 0
1255   0AD9             ; --- START RELATIONAL
1256   0AD9 D7            push a
1257   0ADA 11            mov a, b
1258   0ADB 26 64 00      mov b, $64
1259   0ADE B0            cmp a, b
1260   0ADF FD 71         seq ; ==
1261   0AE1 E4            pop a
1262   0AE2             ; --- END RELATIONAL
1263   0AE2             ; --- START LOGICAL OR
1264   0AE2 D7            push a
1265   0AE3 11            mov a, b
1266   0AE4 FA FD FF      lea d, [bp + -3] ; $format_p
1267   0AE7 2A            mov b, [d]
1268   0AE8 74            mov d, b
1269   0AE9 32            mov bl, [d]
1270   0AEA A7 00         mov bh, 0
1271   0AEC             ; --- START RELATIONAL
1272   0AEC D7            push a
1273   0AED 11            mov a, b
1274   0AEE 26 69 00      mov b, $69
1275   0AF1 B0            cmp a, b
1276   0AF2 FD 71         seq ; ==
1277   0AF4 E4            pop a
1278   0AF5             ; --- END RELATIONAL
1279   0AF5 FD A8         sor a, b ; ||
1280   0AF7 E4            pop a
1281   0AF8             ; --- END LOGICAL OR
1282   0AF8 C0 00 00      cmp b, 0
1283   0AFB C6 01 0B      je _if21_else
1284   0AFE             _if21_true:
1285   0AFE             ; ; 
1286   0AFE 0A 41 0B      jmp _if21_exit
1287   0B01             _if21_else:
1288   0B01             ; if(*format_p == 'u'); 
1289   0B01             _if22_cond:
1290   0B01 FA FD FF      lea d, [bp + -3] ; $format_p
1291   0B04 2A            mov b, [d]
1292   0B05 74            mov d, b
1293   0B06 32            mov bl, [d]
1294   0B07 A7 00         mov bh, 0
1295   0B09             ; --- START RELATIONAL
1296   0B09 D7            push a
1297   0B0A 11            mov a, b
1298   0B0B 26 75 00      mov b, $75
1299   0B0E B0            cmp a, b
1300   0B0F FD 71         seq ; ==
1301   0B11 E4            pop a
1302   0B12             ; --- END RELATIONAL
1303   0B12 C0 00 00      cmp b, 0
1304   0B15 C6 1B 0B      je _if22_else
1305   0B18             _if22_true:
1306   0B18             ; ; 
1307   0B18 0A 41 0B      jmp _if22_exit
1308   0B1B             _if22_else:
1309   0B1B             ; if(*format_p == 'x'); 
1310   0B1B             _if23_cond:
1311   0B1B FA FD FF      lea d, [bp + -3] ; $format_p
1312   0B1E 2A            mov b, [d]
1313   0B1F 74            mov d, b
1314   0B20 32            mov bl, [d]
1315   0B21 A7 00         mov bh, 0
1316   0B23             ; --- START RELATIONAL
1317   0B23 D7            push a
1318   0B24 11            mov a, b
1319   0B25 26 78 00      mov b, $78
1320   0B28 B0            cmp a, b
1321   0B29 FD 71         seq ; ==
1322   0B2B E4            pop a
1323   0B2C             ; --- END RELATIONAL
1324   0B2C C0 00 00      cmp b, 0
1325   0B2F C6 35 0B      je _if23_else
1326   0B32             _if23_true:
1327   0B32             ; ; 
1328   0B32 0A 41 0B      jmp _if23_exit
1329   0B35             _if23_else:
1330   0B35             ; err("Unexpected format in printf."); 
1331   0B35 26 AD 67      mov b, _s30 ; "Unexpected format in printf."
1332   0B38 FD AB         swp b
1333   0B3A D8            push b
1334   0B3B 07 74 0F      call err
1335   0B3E 51 02 00      add sp, 2
1336   0B41             _if23_exit:
1337   0B41             _if22_exit:
1338   0B41             _if21_exit:
1339   0B41             ; p = p + 4; 
1340   0B41 FA FF FF      lea d, [bp + -1] ; $p
1341   0B44 DA            push d
1342   0B45 FA FF FF      lea d, [bp + -1] ; $p
1343   0B48 2A            mov b, [d]
1344   0B49             ; --- START TERMS
1345   0B49 D7            push a
1346   0B4A 11            mov a, b
1347   0B4B 26 04 00      mov b, $4
1348   0B4E 56            add b, a
1349   0B4F E4            pop a
1350   0B50             ; --- END TERMS
1351   0B50 E7            pop d
1352   0B51 FD 43         mov [d], b
1353   0B53             ; break; 
1354   0B53 0A 3C 0C      jmp _switch20_exit ; case break
1355   0B56             _switch20_case2:
1356   0B56             _switch20_case3:
1357   0B56             ; i = scann(); 
1358   0B56 FA FA FF      lea d, [bp + -6] ; $i
1359   0B59 DA            push d
1360   0B5A 07 A8 17      call scann
1361   0B5D E7            pop d
1362   0B5E FD 43         mov [d], b
1363   0B60             ; **(int **)p = i; 
1364   0B60 FA FF FF      lea d, [bp + -1] ; $p
1365   0B63 2A            mov b, [d]
1366   0B64 74            mov d, b
1367   0B65 2A            mov b, [d]
1368   0B66 D8            push b
1369   0B67 FA FA FF      lea d, [bp + -6] ; $i
1370   0B6A 2A            mov b, [d]
1371   0B6B E7            pop d
1372   0B6C FD 43         mov [d], b
1373   0B6E             ; p = p + 2; 
1374   0B6E FA FF FF      lea d, [bp + -1] ; $p
1375   0B71 DA            push d
1376   0B72 FA FF FF      lea d, [bp + -1] ; $p
1377   0B75 2A            mov b, [d]
1378   0B76             ; --- START TERMS
1379   0B76 D7            push a
1380   0B77 11            mov a, b
1381   0B78 26 02 00      mov b, $2
1382   0B7B 56            add b, a
1383   0B7C E4            pop a
1384   0B7D             ; --- END TERMS
1385   0B7D E7            pop d
1386   0B7E FD 43         mov [d], b
1387   0B80             ; break; 
1388   0B80 0A 3C 0C      jmp _switch20_exit ; case break
1389   0B83             _switch20_case4:
1390   0B83             ; i = scann(); 
1391   0B83 FA FA FF      lea d, [bp + -6] ; $i
1392   0B86 DA            push d
1393   0B87 07 A8 17      call scann
1394   0B8A E7            pop d
1395   0B8B FD 43         mov [d], b
1396   0B8D             ; **(int **)p = i; 
1397   0B8D FA FF FF      lea d, [bp + -1] ; $p
1398   0B90 2A            mov b, [d]
1399   0B91 74            mov d, b
1400   0B92 2A            mov b, [d]
1401   0B93 D8            push b
1402   0B94 FA FA FF      lea d, [bp + -6] ; $i
1403   0B97 2A            mov b, [d]
1404   0B98 E7            pop d
1405   0B99 FD 43         mov [d], b
1406   0B9B             ; p = p + 2; 
1407   0B9B FA FF FF      lea d, [bp + -1] ; $p
1408   0B9E DA            push d
1409   0B9F FA FF FF      lea d, [bp + -1] ; $p
1410   0BA2 2A            mov b, [d]
1411   0BA3             ; --- START TERMS
1412   0BA3 D7            push a
1413   0BA4 11            mov a, b
1414   0BA5 26 02 00      mov b, $2
1415   0BA8 56            add b, a
1416   0BA9 E4            pop a
1417   0BAA             ; --- END TERMS
1418   0BAA E7            pop d
1419   0BAB FD 43         mov [d], b
1420   0BAD             ; break; 
1421   0BAD 0A 3C 0C      jmp _switch20_exit ; case break
1422   0BB0             _switch20_case5:
1423   0BB0             ; p = p + 2; 
1424   0BB0 FA FF FF      lea d, [bp + -1] ; $p
1425   0BB3 DA            push d
1426   0BB4 FA FF FF      lea d, [bp + -1] ; $p
1427   0BB7 2A            mov b, [d]
1428   0BB8             ; --- START TERMS
1429   0BB8 D7            push a
1430   0BB9 11            mov a, b
1431   0BBA 26 02 00      mov b, $2
1432   0BBD 56            add b, a
1433   0BBE E4            pop a
1434   0BBF             ; --- END TERMS
1435   0BBF E7            pop d
1436   0BC0 FD 43         mov [d], b
1437   0BC2             ; break; 
1438   0BC2 0A 3C 0C      jmp _switch20_exit ; case break
1439   0BC5             _switch20_case6:
1440   0BC5             ; c = getchar(); 
1441   0BC5 FA FC FF      lea d, [bp + -4] ; $c
1442   0BC8 DA            push d
1443   0BC9 07 92 17      call getchar
1444   0BCC E7            pop d
1445   0BCD FD 3E         mov [d], bl
1446   0BCF             ; **(char **)p = *(char *)c; 
1447   0BCF FA FF FF      lea d, [bp + -1] ; $p
1448   0BD2 2A            mov b, [d]
1449   0BD3 74            mov d, b
1450   0BD4 2A            mov b, [d]
1451   0BD5 D8            push b
1452   0BD6 FA FC FF      lea d, [bp + -4] ; $c
1453   0BD9 32            mov bl, [d]
1454   0BDA A7 00         mov bh, 0
1455   0BDC 74            mov d, b
1456   0BDD 32            mov bl, [d]
1457   0BDE A7 00         mov bh, 0
1458   0BE0 E7            pop d
1459   0BE1 FD 43         mov [d], b
1460   0BE3             ; p = p + 1; 
1461   0BE3 FA FF FF      lea d, [bp + -1] ; $p
1462   0BE6 DA            push d
1463   0BE7 FA FF FF      lea d, [bp + -1] ; $p
1464   0BEA 2A            mov b, [d]
1465   0BEB             ; --- START TERMS
1466   0BEB D7            push a
1467   0BEC 11            mov a, b
1468   0BED 26 01 00      mov b, $1
1469   0BF0 56            add b, a
1470   0BF1 E4            pop a
1471   0BF2             ; --- END TERMS
1472   0BF2 E7            pop d
1473   0BF3 FD 43         mov [d], b
1474   0BF5             ; break; 
1475   0BF5 0A 3C 0C      jmp _switch20_exit ; case break
1476   0BF8             _switch20_case7:
1477   0BF8             ; gets(input_string); 
1478   0BF8 FA FA FD      lea d, [bp + -518] ; $input_string
1479   0BFB 2D            mov b, d
1480   0BFC FD AB         swp b
1481   0BFE D8            push b
1482   0BFF 07 00 11      call gets
1483   0C02 51 02 00      add sp, 2
1484   0C05             ; strcpy(*(char **)p, input_string); 
1485   0C05 FA FA FD      lea d, [bp + -518] ; $input_string
1486   0C08 2D            mov b, d
1487   0C09 FD AB         swp b
1488   0C0B D8            push b
1489   0C0C FA FF FF      lea d, [bp + -1] ; $p
1490   0C0F 2A            mov b, [d]
1491   0C10 74            mov d, b
1492   0C11 2A            mov b, [d]
1493   0C12 FD AB         swp b
1494   0C14 D8            push b
1495   0C15 07 14 04      call strcpy
1496   0C18 51 04 00      add sp, 4
1497   0C1B             ; p = p + 2; 
1498   0C1B FA FF FF      lea d, [bp + -1] ; $p
1499   0C1E DA            push d
1500   0C1F FA FF FF      lea d, [bp + -1] ; $p
1501   0C22 2A            mov b, [d]
1502   0C23             ; --- START TERMS
1503   0C23 D7            push a
1504   0C24 11            mov a, b
1505   0C25 26 02 00      mov b, $2
1506   0C28 56            add b, a
1507   0C29 E4            pop a
1508   0C2A             ; --- END TERMS
1509   0C2A E7            pop d
1510   0C2B FD 43         mov [d], b
1511   0C2D             ; break; 
1512   0C2D 0A 3C 0C      jmp _switch20_exit ; case break
1513   0C30             _switch20_default:
1514   0C30             ; print("Error: Unknown argument type.\n"); 
1515   0C30 26 CA 67      mov b, _s31 ; "Error: Unknown argument type.\n"
1516   0C33 FD AB         swp b
1517   0C35 D8            push b
1518   0C36 07 CD 17      call print
1519   0C39 51 02 00      add sp, 2
1520   0C3C             _switch20_exit:
1521   0C3C             ; format_p++; 
1522   0C3C FA FD FF      lea d, [bp + -3] ; $format_p
1523   0C3F 2A            mov b, [d]
1524   0C40 FD 77         inc b
1525   0C42 FA FD FF      lea d, [bp + -3] ; $format_p
1526   0C45 FD 43         mov [d], b
1527   0C47 FD 7D         dec b
1528   0C49 0A 68 0C      jmp _if19_exit
1529   0C4C             _if19_else:
1530   0C4C             ; putchar(*format_p); 
1531   0C4C FA FD FF      lea d, [bp + -3] ; $format_p
1532   0C4F 2A            mov b, [d]
1533   0C50 74            mov d, b
1534   0C51 32            mov bl, [d]
1535   0C52 A7 00         mov bh, 0
1536   0C54 DD            push bl
1537   0C55 07 85 17      call putchar
1538   0C58 51 01 00      add sp, 1
1539   0C5B             ; format_p++; 
1540   0C5B FA FD FF      lea d, [bp + -3] ; $format_p
1541   0C5E 2A            mov b, [d]
1542   0C5F FD 77         inc b
1543   0C61 FA FD FF      lea d, [bp + -3] ; $format_p
1544   0C64 FD 43         mov [d], b
1545   0C66 FD 7D         dec b
1546   0C68             _if19_exit:
1547   0C68             _if18_exit:
1548   0C68             _for17_update:
1549   0C68 0A 51 0A      jmp _for17_cond
1550   0C6B             _for17_exit:
1551   0C6B F9            leave
1552   0C6C 09            ret
1553   0C6D             
1554   0C6D             sprintf:
1555   0C6D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1556   0C70             ; char *p, *format_p; 
1557   0C70 52 02 00      sub sp, 2
1558   0C73 52 02 00      sub sp, 2
1559   0C76             ; char *sp; 
1560   0C76 52 02 00      sub sp, 2
1561   0C79             ; sp = dest; 
1562   0C79 FA FB FF      lea d, [bp + -5] ; $sp
1563   0C7C DA            push d
1564   0C7D FA 05 00      lea d, [bp + 5] ; $dest
1565   0C80 2A            mov b, [d]
1566   0C81 E7            pop d
1567   0C82 FD 43         mov [d], b
1568   0C84             ; format_p = format; 
1569   0C84 FA FD FF      lea d, [bp + -3] ; $format_p
1570   0C87 DA            push d
1571   0C88 FA 07 00      lea d, [bp + 7] ; $format
1572   0C8B 2A            mov b, [d]
1573   0C8C E7            pop d
1574   0C8D FD 43         mov [d], b
1575   0C8F             ; p = &format + 2; 
1576   0C8F FA FF FF      lea d, [bp + -1] ; $p
1577   0C92 DA            push d
1578   0C93 FA 07 00      lea d, [bp + 7] ; $format
1579   0C96 2D            mov b, d
1580   0C97             ; --- START TERMS
1581   0C97 D7            push a
1582   0C98 11            mov a, b
1583   0C99 26 02 00      mov b, $2
1584   0C9C 56            add b, a
1585   0C9D E4            pop a
1586   0C9E             ; --- END TERMS
1587   0C9E E7            pop d
1588   0C9F FD 43         mov [d], b
1589   0CA1             ; for(;;){ 
1590   0CA1             _for24_init:
1591   0CA1             _for24_cond:
1592   0CA1             _for24_block:
1593   0CA1             ; if(!*format_p) break; 
1594   0CA1             _if25_cond:
1595   0CA1 FA FD FF      lea d, [bp + -3] ; $format_p
1596   0CA4 2A            mov b, [d]
1597   0CA5 74            mov d, b
1598   0CA6 32            mov bl, [d]
1599   0CA7 A7 00         mov bh, 0
1600   0CA9 C0 00 00      cmp b, 0
1601   0CAC FD 71         seq ; !
1602   0CAE C0 00 00      cmp b, 0
1603   0CB1 C6 BA 0C      je _if25_else
1604   0CB4             _if25_true:
1605   0CB4             ; break; 
1606   0CB4 0A 5A 0F      jmp _for24_exit ; for break
1607   0CB7 0A 57 0F      jmp _if25_exit
1608   0CBA             _if25_else:
1609   0CBA             ; if(*format_p == '%'){ 
1610   0CBA             _if26_cond:
1611   0CBA FA FD FF      lea d, [bp + -3] ; $format_p
1612   0CBD 2A            mov b, [d]
1613   0CBE 74            mov d, b
1614   0CBF 32            mov bl, [d]
1615   0CC0 A7 00         mov bh, 0
1616   0CC2             ; --- START RELATIONAL
1617   0CC2 D7            push a
1618   0CC3 11            mov a, b
1619   0CC4 26 25 00      mov b, $25
1620   0CC7 B0            cmp a, b
1621   0CC8 FD 71         seq ; ==
1622   0CCA E4            pop a
1623   0CCB             ; --- END RELATIONAL
1624   0CCB C0 00 00      cmp b, 0
1625   0CCE C6 35 0F      je _if26_else
1626   0CD1             _if26_true:
1627   0CD1             ; format_p++; 
1628   0CD1 FA FD FF      lea d, [bp + -3] ; $format_p
1629   0CD4 2A            mov b, [d]
1630   0CD5 FD 77         inc b
1631   0CD7 FA FD FF      lea d, [bp + -3] ; $format_p
1632   0CDA FD 43         mov [d], b
1633   0CDC FD 7D         dec b
1634   0CDE             ; switch(*format_p){ 
1635   0CDE             _switch27_expr:
1636   0CDE FA FD FF      lea d, [bp + -3] ; $format_p
1637   0CE1 2A            mov b, [d]
1638   0CE2 74            mov d, b
1639   0CE3 32            mov bl, [d]
1640   0CE4 A7 00         mov bh, 0
1641   0CE6             _switch27_comparisons:
1642   0CE6 C1 6C         cmp bl, $6c
1643   0CE8 C6 14 0D      je _switch27_case0
1644   0CEB C1 4C         cmp bl, $4c
1645   0CED C6 14 0D      je _switch27_case1
1646   0CF0 C1 64         cmp bl, $64
1647   0CF2 C6 02 0E      je _switch27_case2
1648   0CF5 C1 69         cmp bl, $69
1649   0CF7 C6 02 0E      je _switch27_case3
1650   0CFA C1 75         cmp bl, $75
1651   0CFC C6 3C 0E      je _switch27_case4
1652   0CFF C1 78         cmp bl, $78
1653   0D01 C6 76 0E      je _switch27_case5
1654   0D04 C1 63         cmp bl, $63
1655   0D06 C6 94 0E      je _switch27_case6
1656   0D09 C1 73         cmp bl, $73
1657   0D0B C6 C2 0E      je _switch27_case7
1658   0D0E 0A 19 0F      jmp _switch27_default
1659   0D11 0A 25 0F      jmp _switch27_exit
1660   0D14             _switch27_case0:
1661   0D14             _switch27_case1:
1662   0D14             ; format_p++; 
1663   0D14 FA FD FF      lea d, [bp + -3] ; $format_p
1664   0D17 2A            mov b, [d]
1665   0D18 FD 77         inc b
1666   0D1A FA FD FF      lea d, [bp + -3] ; $format_p
1667   0D1D FD 43         mov [d], b
1668   0D1F FD 7D         dec b
1669   0D21             ; if(*format_p == 'd' || *format_p == 'i') 
1670   0D21             _if28_cond:
1671   0D21 FA FD FF      lea d, [bp + -3] ; $format_p
1672   0D24 2A            mov b, [d]
1673   0D25 74            mov d, b
1674   0D26 32            mov bl, [d]
1675   0D27 A7 00         mov bh, 0
1676   0D29             ; --- START RELATIONAL
1677   0D29 D7            push a
1678   0D2A 11            mov a, b
1679   0D2B 26 64 00      mov b, $64
1680   0D2E B0            cmp a, b
1681   0D2F FD 71         seq ; ==
1682   0D31 E4            pop a
1683   0D32             ; --- END RELATIONAL
1684   0D32             ; --- START LOGICAL OR
1685   0D32 D7            push a
1686   0D33 11            mov a, b
1687   0D34 FA FD FF      lea d, [bp + -3] ; $format_p
1688   0D37 2A            mov b, [d]
1689   0D38 74            mov d, b
1690   0D39 32            mov bl, [d]
1691   0D3A A7 00         mov bh, 0
1692   0D3C             ; --- START RELATIONAL
1693   0D3C D7            push a
1694   0D3D 11            mov a, b
1695   0D3E 26 69 00      mov b, $69
1696   0D41 B0            cmp a, b
1697   0D42 FD 71         seq ; ==
1698   0D44 E4            pop a
1699   0D45             ; --- END RELATIONAL
1700   0D45 FD A8         sor a, b ; ||
1701   0D47 E4            pop a
1702   0D48             ; --- END LOGICAL OR
1703   0D48 C0 00 00      cmp b, 0
1704   0D4B C6 70 0D      je _if28_else
1705   0D4E             _if28_true:
1706   0D4E             ; print_signed_long(*(long *)p); 
1707   0D4E FA FF FF      lea d, [bp + -1] ; $p
1708   0D51 2A            mov b, [d]
1709   0D52 AB            snex b
1710   0D53 FD 39         mov c, b
1711   0D55 74            mov d, b
1712   0D56 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1713   0D59 FD 39         mov c, b ; And place it into C
1714   0D5B 2A            mov b, [d] ; Lower Word in B
1715   0D5C FD 79         mov g, b
1716   0D5E 28            mov b, c
1717   0D5F FD AB         swp b
1718   0D61 D8            push b
1719   0D62 FD 27         mov b, g
1720   0D64 FD AB         swp b
1721   0D66 D8            push b
1722   0D67 07 11 12      call print_signed_long
1723   0D6A 51 04 00      add sp, 4
1724   0D6D 0A ED 0D      jmp _if28_exit
1725   0D70             _if28_else:
1726   0D70             ; if(*format_p == 'u') 
1727   0D70             _if29_cond:
1728   0D70 FA FD FF      lea d, [bp + -3] ; $format_p
1729   0D73 2A            mov b, [d]
1730   0D74 74            mov d, b
1731   0D75 32            mov bl, [d]
1732   0D76 A7 00         mov bh, 0
1733   0D78             ; --- START RELATIONAL
1734   0D78 D7            push a
1735   0D79 11            mov a, b
1736   0D7A 26 75 00      mov b, $75
1737   0D7D B0            cmp a, b
1738   0D7E FD 71         seq ; ==
1739   0D80 E4            pop a
1740   0D81             ; --- END RELATIONAL
1741   0D81 C0 00 00      cmp b, 0
1742   0D84 C6 AB 0D      je _if29_else
1743   0D87             _if29_true:
1744   0D87             ; print_unsigned_long(*(unsigned long *)p); 
1745   0D87 FA FF FF      lea d, [bp + -1] ; $p
1746   0D8A 2A            mov b, [d]
1747   0D8B A7 00         mov bh, 0
1748   0D8D 38 00 00      mov c, 0
1749   0D90 74            mov d, b
1750   0D91 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1751   0D94 FD 39         mov c, b ; And place it into C
1752   0D96 2A            mov b, [d] ; Lower Word in B
1753   0D97 FD 79         mov g, b
1754   0D99 28            mov b, c
1755   0D9A FD AB         swp b
1756   0D9C D8            push b
1757   0D9D FD 27         mov b, g
1758   0D9F FD AB         swp b
1759   0DA1 D8            push b
1760   0DA2 07 53 13      call print_unsigned_long
1761   0DA5 51 04 00      add sp, 4
1762   0DA8 0A ED 0D      jmp _if29_exit
1763   0DAB             _if29_else:
1764   0DAB             ; if(*format_p == 'x') 
1765   0DAB             _if30_cond:
1766   0DAB FA FD FF      lea d, [bp + -3] ; $format_p
1767   0DAE 2A            mov b, [d]
1768   0DAF 74            mov d, b
1769   0DB0 32            mov bl, [d]
1770   0DB1 A7 00         mov bh, 0
1771   0DB3             ; --- START RELATIONAL
1772   0DB3 D7            push a
1773   0DB4 11            mov a, b
1774   0DB5 26 78 00      mov b, $78
1775   0DB8 B0            cmp a, b
1776   0DB9 FD 71         seq ; ==
1777   0DBB E4            pop a
1778   0DBC             ; --- END RELATIONAL
1779   0DBC C0 00 00      cmp b, 0
1780   0DBF C6 E1 0D      je _if30_else
1781   0DC2             _if30_true:
1782   0DC2             ; printx32(*(long int *)p); 
1783   0DC2 FA FF FF      lea d, [bp + -1] ; $p
1784   0DC5 2A            mov b, [d]
1785   0DC6 74            mov d, b
1786   0DC7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1787   0DCA FD 39         mov c, b ; And place it into C
1788   0DCC 2A            mov b, [d] ; Lower Word in B
1789   0DCD FD 79         mov g, b
1790   0DCF 28            mov b, c
1791   0DD0 FD AB         swp b
1792   0DD2 D8            push b
1793   0DD3 FD 27         mov b, g
1794   0DD5 FD AB         swp b
1795   0DD7 D8            push b
1796   0DD8 07 86 0F      call printx32
1797   0DDB 51 04 00      add sp, 4
1798   0DDE 0A ED 0D      jmp _if30_exit
1799   0DE1             _if30_else:
1800   0DE1             ; err("Unexpected format in printf."); 
1801   0DE1 26 AD 67      mov b, _s30 ; "Unexpected format in printf."
1802   0DE4 FD AB         swp b
1803   0DE6 D8            push b
1804   0DE7 07 74 0F      call err
1805   0DEA 51 02 00      add sp, 2
1806   0DED             _if30_exit:
1807   0DED             _if29_exit:
1808   0DED             _if28_exit:
1809   0DED             ; p = p + 4; 
1810   0DED FA FF FF      lea d, [bp + -1] ; $p
1811   0DF0 DA            push d
1812   0DF1 FA FF FF      lea d, [bp + -1] ; $p
1813   0DF4 2A            mov b, [d]
1814   0DF5             ; --- START TERMS
1815   0DF5 D7            push a
1816   0DF6 11            mov a, b
1817   0DF7 26 04 00      mov b, $4
1818   0DFA 56            add b, a
1819   0DFB E4            pop a
1820   0DFC             ; --- END TERMS
1821   0DFC E7            pop d
1822   0DFD FD 43         mov [d], b
1823   0DFF             ; break; 
1824   0DFF 0A 25 0F      jmp _switch27_exit ; case break
1825   0E02             _switch27_case2:
1826   0E02             _switch27_case3:
1827   0E02             ; sp = sp + sprint_signed(sp, *(int*)p); 
1828   0E02 FA FB FF      lea d, [bp + -5] ; $sp
1829   0E05 DA            push d
1830   0E06 FA FB FF      lea d, [bp + -5] ; $sp
1831   0E09 2A            mov b, [d]
1832   0E0A             ; --- START TERMS
1833   0E0A D7            push a
1834   0E0B 11            mov a, b
1835   0E0C FA FF FF      lea d, [bp + -1] ; $p
1836   0E0F 2A            mov b, [d]
1837   0E10 74            mov d, b
1838   0E11 2A            mov b, [d]
1839   0E12 FD AB         swp b
1840   0E14 D8            push b
1841   0E15 FA FB FF      lea d, [bp + -5] ; $sp
1842   0E18 2A            mov b, [d]
1843   0E19 FD AB         swp b
1844   0E1B D8            push b
1845   0E1C 07 23 16      call sprint_signed
1846   0E1F 51 04 00      add sp, 4
1847   0E22 56            add b, a
1848   0E23 E4            pop a
1849   0E24             ; --- END TERMS
1850   0E24 E7            pop d
1851   0E25 FD 43         mov [d], b
1852   0E27             ; p = p + 2; 
1853   0E27 FA FF FF      lea d, [bp + -1] ; $p
1854   0E2A DA            push d
1855   0E2B FA FF FF      lea d, [bp + -1] ; $p
1856   0E2E 2A            mov b, [d]
1857   0E2F             ; --- START TERMS
1858   0E2F D7            push a
1859   0E30 11            mov a, b
1860   0E31 26 02 00      mov b, $2
1861   0E34 56            add b, a
1862   0E35 E4            pop a
1863   0E36             ; --- END TERMS
1864   0E36 E7            pop d
1865   0E37 FD 43         mov [d], b
1866   0E39             ; break; 
1867   0E39 0A 25 0F      jmp _switch27_exit ; case break
1868   0E3C             _switch27_case4:
1869   0E3C             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
1870   0E3C FA FB FF      lea d, [bp + -5] ; $sp
1871   0E3F DA            push d
1872   0E40 FA FB FF      lea d, [bp + -5] ; $sp
1873   0E43 2A            mov b, [d]
1874   0E44             ; --- START TERMS
1875   0E44 D7            push a
1876   0E45 11            mov a, b
1877   0E46 FA FF FF      lea d, [bp + -1] ; $p
1878   0E49 2A            mov b, [d]
1879   0E4A 74            mov d, b
1880   0E4B 2A            mov b, [d]
1881   0E4C FD AB         swp b
1882   0E4E D8            push b
1883   0E4F FA FB FF      lea d, [bp + -5] ; $sp
1884   0E52 2A            mov b, [d]
1885   0E53 FD AB         swp b
1886   0E55 D8            push b
1887   0E56 07 4F 14      call sprint_unsigned
1888   0E59 51 04 00      add sp, 4
1889   0E5C 56            add b, a
1890   0E5D E4            pop a
1891   0E5E             ; --- END TERMS
1892   0E5E E7            pop d
1893   0E5F FD 43         mov [d], b
1894   0E61             ; p = p + 2; 
1895   0E61 FA FF FF      lea d, [bp + -1] ; $p
1896   0E64 DA            push d
1897   0E65 FA FF FF      lea d, [bp + -1] ; $p
1898   0E68 2A            mov b, [d]
1899   0E69             ; --- START TERMS
1900   0E69 D7            push a
1901   0E6A 11            mov a, b
1902   0E6B 26 02 00      mov b, $2
1903   0E6E 56            add b, a
1904   0E6F E4            pop a
1905   0E70             ; --- END TERMS
1906   0E70 E7            pop d
1907   0E71 FD 43         mov [d], b
1908   0E73             ; break; 
1909   0E73 0A 25 0F      jmp _switch27_exit ; case break
1910   0E76             _switch27_case5:
1911   0E76             
1912   0E76             ; --- BEGIN INLINE ASM SEGMENT
1913   0E76 FA FF FF      lea d, [bp + -1] ; $p
1914   0E79 FD 2A         mov d, [d]
1915   0E7B 2A            mov b, [d]
1916   0E7C 07 B8 1A      call print_u16x
1917   0E7F             ; --- END INLINE ASM SEGMENT
1918   0E7F             
1919   0E7F             ; p = p + 2; 
1920   0E7F FA FF FF      lea d, [bp + -1] ; $p
1921   0E82 DA            push d
1922   0E83 FA FF FF      lea d, [bp + -1] ; $p
1923   0E86 2A            mov b, [d]
1924   0E87             ; --- START TERMS
1925   0E87 D7            push a
1926   0E88 11            mov a, b
1927   0E89 26 02 00      mov b, $2
1928   0E8C 56            add b, a
1929   0E8D E4            pop a
1930   0E8E             ; --- END TERMS
1931   0E8E E7            pop d
1932   0E8F FD 43         mov [d], b
1933   0E91             ; break; 
1934   0E91 0A 25 0F      jmp _switch27_exit ; case break
1935   0E94             _switch27_case6:
1936   0E94             ; *sp++ = *(char *)p; 
1937   0E94 FA FB FF      lea d, [bp + -5] ; $sp
1938   0E97 2A            mov b, [d]
1939   0E98 FD 77         inc b
1940   0E9A FA FB FF      lea d, [bp + -5] ; $sp
1941   0E9D FD 43         mov [d], b
1942   0E9F FD 7D         dec b
1943   0EA1 D8            push b
1944   0EA2 FA FF FF      lea d, [bp + -1] ; $p
1945   0EA5 2A            mov b, [d]
1946   0EA6 74            mov d, b
1947   0EA7 32            mov bl, [d]
1948   0EA8 A7 00         mov bh, 0
1949   0EAA E7            pop d
1950   0EAB FD 3E         mov [d], bl
1951   0EAD             ; p = p + 1; 
1952   0EAD FA FF FF      lea d, [bp + -1] ; $p
1953   0EB0 DA            push d
1954   0EB1 FA FF FF      lea d, [bp + -1] ; $p
1955   0EB4 2A            mov b, [d]
1956   0EB5             ; --- START TERMS
1957   0EB5 D7            push a
1958   0EB6 11            mov a, b
1959   0EB7 26 01 00      mov b, $1
1960   0EBA 56            add b, a
1961   0EBB E4            pop a
1962   0EBC             ; --- END TERMS
1963   0EBC E7            pop d
1964   0EBD FD 43         mov [d], b
1965   0EBF             ; break; 
1966   0EBF 0A 25 0F      jmp _switch27_exit ; case break
1967   0EC2             _switch27_case7:
1968   0EC2             ; int len = strlen(*(char **)p); 
1969   0EC2 52 02 00      sub sp, 2
1970   0EC5             ; --- START LOCAL VAR INITIALIZATION
1971   0EC5 FA F9 FF      lea d, [bp + -7] ; $len
1972   0EC8 DA            push d
1973   0EC9 FA FF FF      lea d, [bp + -1] ; $p
1974   0ECC 2A            mov b, [d]
1975   0ECD 74            mov d, b
1976   0ECE 2A            mov b, [d]
1977   0ECF FD AB         swp b
1978   0ED1 D8            push b
1979   0ED2 07 8E 05      call strlen
1980   0ED5 51 02 00      add sp, 2
1981   0ED8 E7            pop d
1982   0ED9 FD 43         mov [d], b
1983   0EDB             ; --- END LOCAL VAR INITIALIZATION
1984   0EDB             ; strcpy(sp, *(char **)p); 
1985   0EDB FA FF FF      lea d, [bp + -1] ; $p
1986   0EDE 2A            mov b, [d]
1987   0EDF 74            mov d, b
1988   0EE0 2A            mov b, [d]
1989   0EE1 FD AB         swp b
1990   0EE3 D8            push b
1991   0EE4 FA FB FF      lea d, [bp + -5] ; $sp
1992   0EE7 2A            mov b, [d]
1993   0EE8 FD AB         swp b
1994   0EEA D8            push b
1995   0EEB 07 14 04      call strcpy
1996   0EEE 51 04 00      add sp, 4
1997   0EF1             ; sp = sp + len; 
1998   0EF1 FA FB FF      lea d, [bp + -5] ; $sp
1999   0EF4 DA            push d
2000   0EF5 FA FB FF      lea d, [bp + -5] ; $sp
2001   0EF8 2A            mov b, [d]
2002   0EF9             ; --- START TERMS
2003   0EF9 D7            push a
2004   0EFA 11            mov a, b
2005   0EFB FA F9 FF      lea d, [bp + -7] ; $len
2006   0EFE 2A            mov b, [d]
2007   0EFF 56            add b, a
2008   0F00 E4            pop a
2009   0F01             ; --- END TERMS
2010   0F01 E7            pop d
2011   0F02 FD 43         mov [d], b
2012   0F04             ; p = p + 2; 
2013   0F04 FA FF FF      lea d, [bp + -1] ; $p
2014   0F07 DA            push d
2015   0F08 FA FF FF      lea d, [bp + -1] ; $p
2016   0F0B 2A            mov b, [d]
2017   0F0C             ; --- START TERMS
2018   0F0C D7            push a
2019   0F0D 11            mov a, b
2020   0F0E 26 02 00      mov b, $2
2021   0F11 56            add b, a
2022   0F12 E4            pop a
2023   0F13             ; --- END TERMS
2024   0F13 E7            pop d
2025   0F14 FD 43         mov [d], b
2026   0F16             ; break; 
2027   0F16 0A 25 0F      jmp _switch27_exit ; case break
2028   0F19             _switch27_default:
2029   0F19             ; print("Error: Unknown argument type.\n"); 
2030   0F19 26 CA 67      mov b, _s31 ; "Error: Unknown argument type.\n"
2031   0F1C FD AB         swp b
2032   0F1E D8            push b
2033   0F1F 07 CD 17      call print
2034   0F22 51 02 00      add sp, 2
2035   0F25             _switch27_exit:
2036   0F25             ; format_p++; 
2037   0F25 FA FD FF      lea d, [bp + -3] ; $format_p
2038   0F28 2A            mov b, [d]
2039   0F29 FD 77         inc b
2040   0F2B FA FD FF      lea d, [bp + -3] ; $format_p
2041   0F2E FD 43         mov [d], b
2042   0F30 FD 7D         dec b
2043   0F32 0A 57 0F      jmp _if26_exit
2044   0F35             _if26_else:
2045   0F35             ; *sp++ = *format_p++; 
2046   0F35 FA FB FF      lea d, [bp + -5] ; $sp
2047   0F38 2A            mov b, [d]
2048   0F39 FD 77         inc b
2049   0F3B FA FB FF      lea d, [bp + -5] ; $sp
2050   0F3E FD 43         mov [d], b
2051   0F40 FD 7D         dec b
2052   0F42 D8            push b
2053   0F43 FA FD FF      lea d, [bp + -3] ; $format_p
2054   0F46 2A            mov b, [d]
2055   0F47 FD 77         inc b
2056   0F49 FA FD FF      lea d, [bp + -3] ; $format_p
2057   0F4C FD 43         mov [d], b
2058   0F4E FD 7D         dec b
2059   0F50 74            mov d, b
2060   0F51 32            mov bl, [d]
2061   0F52 A7 00         mov bh, 0
2062   0F54 E7            pop d
2063   0F55 FD 3E         mov [d], bl
2064   0F57             _if26_exit:
2065   0F57             _if25_exit:
2066   0F57             _for24_update:
2067   0F57 0A A1 0C      jmp _for24_cond
2068   0F5A             _for24_exit:
2069   0F5A             ; *sp = '\0'; 
2070   0F5A FA FB FF      lea d, [bp + -5] ; $sp
2071   0F5D 2A            mov b, [d]
2072   0F5E D8            push b
2073   0F5F 26 00 00      mov b, $0
2074   0F62 E7            pop d
2075   0F63 FD 3E         mov [d], bl
2076   0F65             ; return sp - dest; // return total number of chars written 
2077   0F65 FA FB FF      lea d, [bp + -5] ; $sp
2078   0F68 2A            mov b, [d]
2079   0F69             ; --- START TERMS
2080   0F69 D7            push a
2081   0F6A 11            mov a, b
2082   0F6B FA 05 00      lea d, [bp + 5] ; $dest
2083   0F6E 2A            mov b, [d]
2084   0F6F 60            sub a, b
2085   0F70 27            mov b, a
2086   0F71 E4            pop a
2087   0F72             ; --- END TERMS
2088   0F72 F9            leave
2089   0F73 09            ret
2090   0F74             
2091   0F74             err:
2092   0F74 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2093   0F77             ; print(e); 
2094   0F77 FA 05 00      lea d, [bp + 5] ; $e
2095   0F7A 2A            mov b, [d]
2096   0F7B FD AB         swp b
2097   0F7D D8            push b
2098   0F7E 07 CD 17      call print
2099   0F81 51 02 00      add sp, 2
2100   0F84 F9            leave
2101   0F85 09            ret
2102   0F86             
2103   0F86             printx32:
2104   0F86 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2105   0F89             
2106   0F89             ; --- BEGIN INLINE ASM SEGMENT
2107   0F89 FA 05 00      lea d, [bp + 5] ; $hex
2108   0F8C 2B 02 00      mov b, [d+2]
2109   0F8F 07 B8 1A      call print_u16x
2110   0F92 2A            mov b, [d]
2111   0F93 07 B8 1A      call print_u16x
2112   0F96             ; --- END INLINE ASM SEGMENT
2113   0F96             
2114   0F96 F9            leave
2115   0F97 09            ret
2116   0F98             
2117   0F98             printx16:
2118   0F98 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2119   0F9B             
2120   0F9B             ; --- BEGIN INLINE ASM SEGMENT
2121   0F9B FA 05 00      lea d, [bp + 5] ; $hex
2122   0F9E 2A            mov b, [d]
2123   0F9F 07 B8 1A      call print_u16x
2124   0FA2             ; --- END INLINE ASM SEGMENT
2125   0FA2             
2126   0FA2 F9            leave
2127   0FA3 09            ret
2128   0FA4             
2129   0FA4             printx8:
2130   0FA4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2131   0FA7             
2132   0FA7             ; --- BEGIN INLINE ASM SEGMENT
2133   0FA7 FA 05 00      lea d, [bp + 5] ; $hex
2134   0FAA 32            mov bl, [d]
2135   0FAB 07 FC 1A      call print_u8x
2136   0FAE             ; --- END INLINE ASM SEGMENT
2137   0FAE             
2138   0FAE F9            leave
2139   0FAF 09            ret
2140   0FB0             
2141   0FB0             hex_str_to_int:
2142   0FB0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2143   0FB3             ; int value = 0; 
2144   0FB3 52 02 00      sub sp, 2
2145   0FB6             ; --- START LOCAL VAR INITIALIZATION
2146   0FB6 FA FF FF      lea d, [bp + -1] ; $value
2147   0FB9 DA            push d
2148   0FBA 26 00 00      mov b, $0
2149   0FBD E7            pop d
2150   0FBE FD 43         mov [d], b
2151   0FC0             ; --- END LOCAL VAR INITIALIZATION
2152   0FC0             ; int i; 
2153   0FC0 52 02 00      sub sp, 2
2154   0FC3             ; char hex_char; 
2155   0FC3 52 01 00      sub sp, 1
2156   0FC6             ; int len; 
2157   0FC6 52 02 00      sub sp, 2
2158   0FC9             ; len = strlen(hex_string); 
2159   0FC9 FA FA FF      lea d, [bp + -6] ; $len
2160   0FCC DA            push d
2161   0FCD FA 05 00      lea d, [bp + 5] ; $hex_string
2162   0FD0 2A            mov b, [d]
2163   0FD1 FD AB         swp b
2164   0FD3 D8            push b
2165   0FD4 07 8E 05      call strlen
2166   0FD7 51 02 00      add sp, 2
2167   0FDA E7            pop d
2168   0FDB FD 43         mov [d], b
2169   0FDD             ; for (i = 0; i < len; i++) { 
2170   0FDD             _for31_init:
2171   0FDD FA FD FF      lea d, [bp + -3] ; $i
2172   0FE0 DA            push d
2173   0FE1 26 00 00      mov b, $0
2174   0FE4 E7            pop d
2175   0FE5 FD 43         mov [d], b
2176   0FE7             _for31_cond:
2177   0FE7 FA FD FF      lea d, [bp + -3] ; $i
2178   0FEA 2A            mov b, [d]
2179   0FEB             ; --- START RELATIONAL
2180   0FEB D7            push a
2181   0FEC 11            mov a, b
2182   0FED FA FA FF      lea d, [bp + -6] ; $len
2183   0FF0 2A            mov b, [d]
2184   0FF1 B0            cmp a, b
2185   0FF2 FD 73         slt ; < (signed)
2186   0FF4 E4            pop a
2187   0FF5             ; --- END RELATIONAL
2188   0FF5 C0 00 00      cmp b, 0
2189   0FF8 C6 FA 10      je _for31_exit
2190   0FFB             _for31_block:
2191   0FFB             ; hex_char = hex_string[i]; 
2192   0FFB FA FC FF      lea d, [bp + -4] ; $hex_char
2193   0FFE DA            push d
2194   0FFF FA 05 00      lea d, [bp + 5] ; $hex_string
2195   1002 FD 2A         mov d, [d]
2196   1004 D7            push a
2197   1005 DA            push d
2198   1006 FA FD FF      lea d, [bp + -3] ; $i
2199   1009 2A            mov b, [d]
2200   100A E7            pop d
2201   100B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2202   100F E4            pop a
2203   1010 32            mov bl, [d]
2204   1011 A7 00         mov bh, 0
2205   1013 E7            pop d
2206   1014 FD 3E         mov [d], bl
2207   1016             ; if (hex_char >= 'a' && hex_char <= 'f')  
2208   1016             _if32_cond:
2209   1016 FA FC FF      lea d, [bp + -4] ; $hex_char
2210   1019 32            mov bl, [d]
2211   101A A7 00         mov bh, 0
2212   101C             ; --- START RELATIONAL
2213   101C D7            push a
2214   101D 11            mov a, b
2215   101E 26 61 00      mov b, $61
2216   1021 B0            cmp a, b
2217   1022 FD 80         sge ; >=
2218   1024 E4            pop a
2219   1025             ; --- END RELATIONAL
2220   1025             ; --- START LOGICAL AND
2221   1025 D7            push a
2222   1026 11            mov a, b
2223   1027 FA FC FF      lea d, [bp + -4] ; $hex_char
2224   102A 32            mov bl, [d]
2225   102B A7 00         mov bh, 0
2226   102D             ; --- START RELATIONAL
2227   102D D7            push a
2228   102E 11            mov a, b
2229   102F 26 66 00      mov b, $66
2230   1032 B0            cmp a, b
2231   1033 FD 74         sle ; <= (signed)
2232   1035 E4            pop a
2233   1036             ; --- END RELATIONAL
2234   1036 FD A7         sand a, b
2235   1038 E4            pop a
2236   1039             ; --- END LOGICAL AND
2237   1039 C0 00 00      cmp b, 0
2238   103C C6 6D 10      je _if32_else
2239   103F             _if32_true:
2240   103F             ; value = (value * 16) + (hex_char - 'a' + 10); 
2241   103F FA FF FF      lea d, [bp + -1] ; $value
2242   1042 DA            push d
2243   1043 FA FF FF      lea d, [bp + -1] ; $value
2244   1046 2A            mov b, [d]
2245   1047             ; --- START FACTORS
2246   1047 D7            push a
2247   1048 11            mov a, b
2248   1049 26 10 00      mov b, $10
2249   104C AC            mul a, b ; *
2250   104D 11            mov a, b
2251   104E 27            mov b, a
2252   104F E4            pop a
2253   1050             ; --- END FACTORS
2254   1050             ; --- START TERMS
2255   1050 D7            push a
2256   1051 11            mov a, b
2257   1052 FA FC FF      lea d, [bp + -4] ; $hex_char
2258   1055 32            mov bl, [d]
2259   1056 A7 00         mov bh, 0
2260   1058             ; --- START TERMS
2261   1058 D7            push a
2262   1059 11            mov a, b
2263   105A 26 61 00      mov b, $61
2264   105D 60            sub a, b
2265   105E 27            mov b, a
2266   105F 11            mov a, b
2267   1060 26 0A 00      mov b, $a
2268   1063 56            add b, a
2269   1064 E4            pop a
2270   1065             ; --- END TERMS
2271   1065 56            add b, a
2272   1066 E4            pop a
2273   1067             ; --- END TERMS
2274   1067 E7            pop d
2275   1068 FD 43         mov [d], b
2276   106A 0A EA 10      jmp _if32_exit
2277   106D             _if32_else:
2278   106D             ; if (hex_char >= 'A' && hex_char <= 'F')  
2279   106D             _if33_cond:
2280   106D FA FC FF      lea d, [bp + -4] ; $hex_char
2281   1070 32            mov bl, [d]
2282   1071 A7 00         mov bh, 0
2283   1073             ; --- START RELATIONAL
2284   1073 D7            push a
2285   1074 11            mov a, b
2286   1075 26 41 00      mov b, $41
2287   1078 B0            cmp a, b
2288   1079 FD 80         sge ; >=
2289   107B E4            pop a
2290   107C             ; --- END RELATIONAL
2291   107C             ; --- START LOGICAL AND
2292   107C D7            push a
2293   107D 11            mov a, b
2294   107E FA FC FF      lea d, [bp + -4] ; $hex_char
2295   1081 32            mov bl, [d]
2296   1082 A7 00         mov bh, 0
2297   1084             ; --- START RELATIONAL
2298   1084 D7            push a
2299   1085 11            mov a, b
2300   1086 26 46 00      mov b, $46
2301   1089 B0            cmp a, b
2302   108A FD 74         sle ; <= (signed)
2303   108C E4            pop a
2304   108D             ; --- END RELATIONAL
2305   108D FD A7         sand a, b
2306   108F E4            pop a
2307   1090             ; --- END LOGICAL AND
2308   1090 C0 00 00      cmp b, 0
2309   1093 C6 C4 10      je _if33_else
2310   1096             _if33_true:
2311   1096             ; value = (value * 16) + (hex_char - 'A' + 10); 
2312   1096 FA FF FF      lea d, [bp + -1] ; $value
2313   1099 DA            push d
2314   109A FA FF FF      lea d, [bp + -1] ; $value
2315   109D 2A            mov b, [d]
2316   109E             ; --- START FACTORS
2317   109E D7            push a
2318   109F 11            mov a, b
2319   10A0 26 10 00      mov b, $10
2320   10A3 AC            mul a, b ; *
2321   10A4 11            mov a, b
2322   10A5 27            mov b, a
2323   10A6 E4            pop a
2324   10A7             ; --- END FACTORS
2325   10A7             ; --- START TERMS
2326   10A7 D7            push a
2327   10A8 11            mov a, b
2328   10A9 FA FC FF      lea d, [bp + -4] ; $hex_char
2329   10AC 32            mov bl, [d]
2330   10AD A7 00         mov bh, 0
2331   10AF             ; --- START TERMS
2332   10AF D7            push a
2333   10B0 11            mov a, b
2334   10B1 26 41 00      mov b, $41
2335   10B4 60            sub a, b
2336   10B5 27            mov b, a
2337   10B6 11            mov a, b
2338   10B7 26 0A 00      mov b, $a
2339   10BA 56            add b, a
2340   10BB E4            pop a
2341   10BC             ; --- END TERMS
2342   10BC 56            add b, a
2343   10BD E4            pop a
2344   10BE             ; --- END TERMS
2345   10BE E7            pop d
2346   10BF FD 43         mov [d], b
2347   10C1 0A EA 10      jmp _if33_exit
2348   10C4             _if33_else:
2349   10C4             ; value = (value * 16) + (hex_char - '0'); 
2350   10C4 FA FF FF      lea d, [bp + -1] ; $value
2351   10C7 DA            push d
2352   10C8 FA FF FF      lea d, [bp + -1] ; $value
2353   10CB 2A            mov b, [d]
2354   10CC             ; --- START FACTORS
2355   10CC D7            push a
2356   10CD 11            mov a, b
2357   10CE 26 10 00      mov b, $10
2358   10D1 AC            mul a, b ; *
2359   10D2 11            mov a, b
2360   10D3 27            mov b, a
2361   10D4 E4            pop a
2362   10D5             ; --- END FACTORS
2363   10D5             ; --- START TERMS
2364   10D5 D7            push a
2365   10D6 11            mov a, b
2366   10D7 FA FC FF      lea d, [bp + -4] ; $hex_char
2367   10DA 32            mov bl, [d]
2368   10DB A7 00         mov bh, 0
2369   10DD             ; --- START TERMS
2370   10DD D7            push a
2371   10DE 11            mov a, b
2372   10DF 26 30 00      mov b, $30
2373   10E2 60            sub a, b
2374   10E3 27            mov b, a
2375   10E4 E4            pop a
2376   10E5             ; --- END TERMS
2377   10E5 56            add b, a
2378   10E6 E4            pop a
2379   10E7             ; --- END TERMS
2380   10E7 E7            pop d
2381   10E8 FD 43         mov [d], b
2382   10EA             _if33_exit:
2383   10EA             _if32_exit:
2384   10EA             _for31_update:
2385   10EA FA FD FF      lea d, [bp + -3] ; $i
2386   10ED 2A            mov b, [d]
2387   10EE FD 77         inc b
2388   10F0 FA FD FF      lea d, [bp + -3] ; $i
2389   10F3 FD 43         mov [d], b
2390   10F5 FD 7D         dec b
2391   10F7 0A E7 0F      jmp _for31_cond
2392   10FA             _for31_exit:
2393   10FA             ; return value; 
2394   10FA FA FF FF      lea d, [bp + -1] ; $value
2395   10FD 2A            mov b, [d]
2396   10FE F9            leave
2397   10FF 09            ret
2398   1100             
2399   1100             gets:
2400   1100 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2401   1103             
2402   1103             ; --- BEGIN INLINE ASM SEGMENT
2403   1103 FA 05 00      lea d, [bp + 5] ; $s
2404   1106 15            mov a, [d]
2405   1107 3C            mov d, a
2406   1108 07 1D 19      call _gets
2407   110B             ; --- END INLINE ASM SEGMENT
2408   110B             
2409   110B             ; return strlen(s); 
2410   110B FA 05 00      lea d, [bp + 5] ; $s
2411   110E 2A            mov b, [d]
2412   110F FD AB         swp b
2413   1111 D8            push b
2414   1112 07 8E 05      call strlen
2415   1115 51 02 00      add sp, 2
2416   1118 F9            leave
2417   1119 09            ret
2418   111A             
2419   111A             print_signed:
2420   111A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2421   111D             ; char digits[5]; 
2422   111D 52 05 00      sub sp, 5
2423   1120             ; int i = 0; 
2424   1120 52 02 00      sub sp, 2
2425   1123             ; --- START LOCAL VAR INITIALIZATION
2426   1123 FA FA FF      lea d, [bp + -6] ; $i
2427   1126 DA            push d
2428   1127 26 00 00      mov b, $0
2429   112A E7            pop d
2430   112B FD 43         mov [d], b
2431   112D             ; --- END LOCAL VAR INITIALIZATION
2432   112D             ; if (num < 0) { 
2433   112D             _if34_cond:
2434   112D FA 05 00      lea d, [bp + 5] ; $num
2435   1130 2A            mov b, [d]
2436   1131             ; --- START RELATIONAL
2437   1131 D7            push a
2438   1132 11            mov a, b
2439   1133 26 00 00      mov b, $0
2440   1136 B0            cmp a, b
2441   1137 FD 73         slt ; < (signed)
2442   1139 E4            pop a
2443   113A             ; --- END RELATIONAL
2444   113A C0 00 00      cmp b, 0
2445   113D C6 5A 11      je _if34_else
2446   1140             _if34_true:
2447   1140             ; putchar('-'); 
2448   1140 26 2D 00      mov b, $2d
2449   1143 DD            push bl
2450   1144 07 85 17      call putchar
2451   1147 51 01 00      add sp, 1
2452   114A             ; num = -num; 
2453   114A FA 05 00      lea d, [bp + 5] ; $num
2454   114D DA            push d
2455   114E FA 05 00      lea d, [bp + 5] ; $num
2456   1151 2A            mov b, [d]
2457   1152 FD 97         neg b
2458   1154 E7            pop d
2459   1155 FD 43         mov [d], b
2460   1157 0A 7C 11      jmp _if34_exit
2461   115A             _if34_else:
2462   115A             ; if (num == 0) { 
2463   115A             _if35_cond:
2464   115A FA 05 00      lea d, [bp + 5] ; $num
2465   115D 2A            mov b, [d]
2466   115E             ; --- START RELATIONAL
2467   115E D7            push a
2468   115F 11            mov a, b
2469   1160 26 00 00      mov b, $0
2470   1163 B0            cmp a, b
2471   1164 FD 71         seq ; ==
2472   1166 E4            pop a
2473   1167             ; --- END RELATIONAL
2474   1167 C0 00 00      cmp b, 0
2475   116A C6 7C 11      je _if35_exit
2476   116D             _if35_true:
2477   116D             ; putchar('0'); 
2478   116D 26 30 00      mov b, $30
2479   1170 DD            push bl
2480   1171 07 85 17      call putchar
2481   1174 51 01 00      add sp, 1
2482   1177             ; return; 
2483   1177 F9            leave
2484   1178 09            ret
2485   1179 0A 7C 11      jmp _if35_exit
2486   117C             _if35_exit:
2487   117C             _if34_exit:
2488   117C             ; while (num > 0) { 
2489   117C             _while36_cond:
2490   117C FA 05 00      lea d, [bp + 5] ; $num
2491   117F 2A            mov b, [d]
2492   1180             ; --- START RELATIONAL
2493   1180 D7            push a
2494   1181 11            mov a, b
2495   1182 26 00 00      mov b, $0
2496   1185 B0            cmp a, b
2497   1186 FD 7F         sgt ; >
2498   1188 E4            pop a
2499   1189             ; --- END RELATIONAL
2500   1189 C0 00 00      cmp b, 0
2501   118C C6 D6 11      je _while36_exit
2502   118F             _while36_block:
2503   118F             ; digits[i] = '0' + (num % 10); 
2504   118F FA FC FF      lea d, [bp + -4] ; $digits
2505   1192 D7            push a
2506   1193 DA            push d
2507   1194 FA FA FF      lea d, [bp + -6] ; $i
2508   1197 2A            mov b, [d]
2509   1198 E7            pop d
2510   1199 5A            add d, b
2511   119A E4            pop a
2512   119B DA            push d
2513   119C 26 30 00      mov b, $30
2514   119F             ; --- START TERMS
2515   119F D7            push a
2516   11A0 11            mov a, b
2517   11A1 FA 05 00      lea d, [bp + 5] ; $num
2518   11A4 2A            mov b, [d]
2519   11A5             ; --- START FACTORS
2520   11A5 D7            push a
2521   11A6 11            mov a, b
2522   11A7 26 0A 00      mov b, $a
2523   11AA AE            div a, b ; 
2524   11AB 11            mov a, b
2525   11AC 27            mov b, a
2526   11AD E4            pop a
2527   11AE             ; --- END FACTORS
2528   11AE 56            add b, a
2529   11AF E4            pop a
2530   11B0             ; --- END TERMS
2531   11B0 E7            pop d
2532   11B1 FD 3E         mov [d], bl
2533   11B3             ; num = num / 10; 
2534   11B3 FA 05 00      lea d, [bp + 5] ; $num
2535   11B6 DA            push d
2536   11B7 FA 05 00      lea d, [bp + 5] ; $num
2537   11BA 2A            mov b, [d]
2538   11BB             ; --- START FACTORS
2539   11BB D7            push a
2540   11BC 11            mov a, b
2541   11BD 26 0A 00      mov b, $a
2542   11C0 AE            div a, b
2543   11C1 27            mov b, a
2544   11C2 E4            pop a
2545   11C3             ; --- END FACTORS
2546   11C3 E7            pop d
2547   11C4 FD 43         mov [d], b
2548   11C6             ; i++; 
2549   11C6 FA FA FF      lea d, [bp + -6] ; $i
2550   11C9 2A            mov b, [d]
2551   11CA FD 77         inc b
2552   11CC FA FA FF      lea d, [bp + -6] ; $i
2553   11CF FD 43         mov [d], b
2554   11D1 FD 7D         dec b
2555   11D3 0A 7C 11      jmp _while36_cond
2556   11D6             _while36_exit:
2557   11D6             ; while (i > 0) { 
2558   11D6             _while37_cond:
2559   11D6 FA FA FF      lea d, [bp + -6] ; $i
2560   11D9 2A            mov b, [d]
2561   11DA             ; --- START RELATIONAL
2562   11DA D7            push a
2563   11DB 11            mov a, b
2564   11DC 26 00 00      mov b, $0
2565   11DF B0            cmp a, b
2566   11E0 FD 7F         sgt ; >
2567   11E2 E4            pop a
2568   11E3             ; --- END RELATIONAL
2569   11E3 C0 00 00      cmp b, 0
2570   11E6 C6 0F 12      je _while37_exit
2571   11E9             _while37_block:
2572   11E9             ; i--; 
2573   11E9 FA FA FF      lea d, [bp + -6] ; $i
2574   11EC 2A            mov b, [d]
2575   11ED FD 7D         dec b
2576   11EF FA FA FF      lea d, [bp + -6] ; $i
2577   11F2 FD 43         mov [d], b
2578   11F4 FD 77         inc b
2579   11F6             ; putchar(digits[i]); 
2580   11F6 FA FC FF      lea d, [bp + -4] ; $digits
2581   11F9 D7            push a
2582   11FA DA            push d
2583   11FB FA FA FF      lea d, [bp + -6] ; $i
2584   11FE 2A            mov b, [d]
2585   11FF E7            pop d
2586   1200 5A            add d, b
2587   1201 E4            pop a
2588   1202 32            mov bl, [d]
2589   1203 A7 00         mov bh, 0
2590   1205 DD            push bl
2591   1206 07 85 17      call putchar
2592   1209 51 01 00      add sp, 1
2593   120C 0A D6 11      jmp _while37_cond
2594   120F             _while37_exit:
2595   120F F9            leave
2596   1210 09            ret
2597   1211             
2598   1211             print_signed_long:
2599   1211 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2600   1214             ; char digits[10]; 
2601   1214 52 0A 00      sub sp, 10
2602   1217             ; int i = 0; 
2603   1217 52 02 00      sub sp, 2
2604   121A             ; --- START LOCAL VAR INITIALIZATION
2605   121A FA F5 FF      lea d, [bp + -11] ; $i
2606   121D DA            push d
2607   121E 26 00 00      mov b, $0
2608   1221 E7            pop d
2609   1222 FD 43         mov [d], b
2610   1224             ; --- END LOCAL VAR INITIALIZATION
2611   1224             ; if (num < 0) { 
2612   1224             _if38_cond:
2613   1224 FA 05 00      lea d, [bp + 5] ; $num
2614   1227 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2615   122A FD 39         mov c, b ; And place it into C
2616   122C 2A            mov b, [d] ; Lower Word in B
2617   122D             ; --- START RELATIONAL
2618   122D D7            push a
2619   122E FD D8         push g
2620   1230 11            mov a, b
2621   1231 FD 7A         mov g, c
2622   1233 26 00 00      mov b, $0
2623   1236 38 00 00      mov c, 0
2624   1239 FD AF         cmp32 ga, cb
2625   123B FD 73         slt ; <
2626   123D FD F1         pop g
2627   123F E4            pop a
2628   1240             ; --- END RELATIONAL
2629   1240 C0 00 00      cmp b, 0
2630   1243 C6 6A 12      je _if38_else
2631   1246             _if38_true:
2632   1246             ; putchar('-'); 
2633   1246 26 2D 00      mov b, $2d
2634   1249 DD            push bl
2635   124A 07 85 17      call putchar
2636   124D 51 01 00      add sp, 1
2637   1250             ; num = -num; 
2638   1250 FA 05 00      lea d, [bp + 5] ; $num
2639   1253 DA            push d
2640   1254 FA 05 00      lea d, [bp + 5] ; $num
2641   1257 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2642   125A FD 39         mov c, b ; And place it into C
2643   125C 2A            mov b, [d] ; Lower Word in B
2644   125D FD 97         neg b
2645   125F E7            pop d
2646   1260 FD 43         mov [d], b
2647   1262 28            mov b, c
2648   1263 FD 44 02 00   mov [d + 2], b
2649   1267 0A 9B 12      jmp _if38_exit
2650   126A             _if38_else:
2651   126A             ; if (num == 0) { 
2652   126A             _if39_cond:
2653   126A FA 05 00      lea d, [bp + 5] ; $num
2654   126D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2655   1270 FD 39         mov c, b ; And place it into C
2656   1272 2A            mov b, [d] ; Lower Word in B
2657   1273             ; --- START RELATIONAL
2658   1273 D7            push a
2659   1274 FD D8         push g
2660   1276 11            mov a, b
2661   1277 FD 7A         mov g, c
2662   1279 26 00 00      mov b, $0
2663   127C 38 00 00      mov c, 0
2664   127F FD AF         cmp32 ga, cb
2665   1281 FD 71         seq ; ==
2666   1283 FD F1         pop g
2667   1285 E4            pop a
2668   1286             ; --- END RELATIONAL
2669   1286 C0 00 00      cmp b, 0
2670   1289 C6 9B 12      je _if39_exit
2671   128C             _if39_true:
2672   128C             ; putchar('0'); 
2673   128C 26 30 00      mov b, $30
2674   128F DD            push bl
2675   1290 07 85 17      call putchar
2676   1293 51 01 00      add sp, 1
2677   1296             ; return; 
2678   1296 F9            leave
2679   1297 09            ret
2680   1298 0A 9B 12      jmp _if39_exit
2681   129B             _if39_exit:
2682   129B             _if38_exit:
2683   129B             ; while (num > 0) { 
2684   129B             _while40_cond:
2685   129B FA 05 00      lea d, [bp + 5] ; $num
2686   129E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2687   12A1 FD 39         mov c, b ; And place it into C
2688   12A3 2A            mov b, [d] ; Lower Word in B
2689   12A4             ; --- START RELATIONAL
2690   12A4 D7            push a
2691   12A5 FD D8         push g
2692   12A7 11            mov a, b
2693   12A8 FD 7A         mov g, c
2694   12AA 26 00 00      mov b, $0
2695   12AD 38 00 00      mov c, 0
2696   12B0 FD 7F         sgt
2697   12B2 FD F1         pop g
2698   12B4 E4            pop a
2699   12B5             ; --- END RELATIONAL
2700   12B5 C0 00 00      cmp b, 0
2701   12B8 C6 18 13      je _while40_exit
2702   12BB             _while40_block:
2703   12BB             ; digits[i] = '0' + (num % 10); 
2704   12BB FA F7 FF      lea d, [bp + -9] ; $digits
2705   12BE D7            push a
2706   12BF DA            push d
2707   12C0 FA F5 FF      lea d, [bp + -11] ; $i
2708   12C3 2A            mov b, [d]
2709   12C4 E7            pop d
2710   12C5 5A            add d, b
2711   12C6 E4            pop a
2712   12C7 DA            push d
2713   12C8 26 30 00      mov b, $30
2714   12CB             ; --- START TERMS
2715   12CB D7            push a
2716   12CC 11            mov a, b
2717   12CD FA 05 00      lea d, [bp + 5] ; $num
2718   12D0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2719   12D3 FD 39         mov c, b ; And place it into C
2720   12D5 2A            mov b, [d] ; Lower Word in B
2721   12D6             ; --- START FACTORS
2722   12D6 D7            push a
2723   12D7 11            mov a, b
2724   12D8 26 0A 00      mov b, $a
2725   12DB AE            div a, b ; 
2726   12DC 11            mov a, b
2727   12DD 27            mov b, a
2728   12DE E4            pop a
2729   12DF             ; --- END FACTORS
2730   12DF 54            add a, b
2731   12E0 D7            push a
2732   12E1 FD 12         mov a, g
2733   12E3 28            mov b, c
2734   12E4 5C            adc a, b
2735   12E5 39            mov c, a
2736   12E6 E5            pop b
2737   12E7 E4            pop a
2738   12E8             ; --- END TERMS
2739   12E8 E7            pop d
2740   12E9 FD 3E         mov [d], bl
2741   12EB             ; num = num / 10; 
2742   12EB FA 05 00      lea d, [bp + 5] ; $num
2743   12EE DA            push d
2744   12EF FA 05 00      lea d, [bp + 5] ; $num
2745   12F2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2746   12F5 FD 39         mov c, b ; And place it into C
2747   12F7 2A            mov b, [d] ; Lower Word in B
2748   12F8             ; --- START FACTORS
2749   12F8 D7            push a
2750   12F9 11            mov a, b
2751   12FA 26 0A 00      mov b, $a
2752   12FD AE            div a, b
2753   12FE 27            mov b, a
2754   12FF E4            pop a
2755   1300             ; --- END FACTORS
2756   1300 E7            pop d
2757   1301 FD 43         mov [d], b
2758   1303 28            mov b, c
2759   1304 FD 44 02 00   mov [d + 2], b
2760   1308             ; i++; 
2761   1308 FA F5 FF      lea d, [bp + -11] ; $i
2762   130B 2A            mov b, [d]
2763   130C FD 77         inc b
2764   130E FA F5 FF      lea d, [bp + -11] ; $i
2765   1311 FD 43         mov [d], b
2766   1313 FD 7D         dec b
2767   1315 0A 9B 12      jmp _while40_cond
2768   1318             _while40_exit:
2769   1318             ; while (i > 0) { 
2770   1318             _while41_cond:
2771   1318 FA F5 FF      lea d, [bp + -11] ; $i
2772   131B 2A            mov b, [d]
2773   131C             ; --- START RELATIONAL
2774   131C D7            push a
2775   131D 11            mov a, b
2776   131E 26 00 00      mov b, $0
2777   1321 B0            cmp a, b
2778   1322 FD 7F         sgt ; >
2779   1324 E4            pop a
2780   1325             ; --- END RELATIONAL
2781   1325 C0 00 00      cmp b, 0
2782   1328 C6 51 13      je _while41_exit
2783   132B             _while41_block:
2784   132B             ; i--; 
2785   132B FA F5 FF      lea d, [bp + -11] ; $i
2786   132E 2A            mov b, [d]
2787   132F FD 7D         dec b
2788   1331 FA F5 FF      lea d, [bp + -11] ; $i
2789   1334 FD 43         mov [d], b
2790   1336 FD 77         inc b
2791   1338             ; putchar(digits[i]); 
2792   1338 FA F7 FF      lea d, [bp + -9] ; $digits
2793   133B D7            push a
2794   133C DA            push d
2795   133D FA F5 FF      lea d, [bp + -11] ; $i
2796   1340 2A            mov b, [d]
2797   1341 E7            pop d
2798   1342 5A            add d, b
2799   1343 E4            pop a
2800   1344 32            mov bl, [d]
2801   1345 A7 00         mov bh, 0
2802   1347 DD            push bl
2803   1348 07 85 17      call putchar
2804   134B 51 01 00      add sp, 1
2805   134E 0A 18 13      jmp _while41_cond
2806   1351             _while41_exit:
2807   1351 F9            leave
2808   1352 09            ret
2809   1353             
2810   1353             print_unsigned_long:
2811   1353 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2812   1356             ; char digits[10]; 
2813   1356 52 0A 00      sub sp, 10
2814   1359             ; int i; 
2815   1359 52 02 00      sub sp, 2
2816   135C             ; i = 0; 
2817   135C FA F5 FF      lea d, [bp + -11] ; $i
2818   135F DA            push d
2819   1360 26 00 00      mov b, $0
2820   1363 E7            pop d
2821   1364 FD 43         mov [d], b
2822   1366             ; if(num == 0){ 
2823   1366             _if42_cond:
2824   1366 FA 05 00      lea d, [bp + 5] ; $num
2825   1369 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2826   136C FD 39         mov c, b ; And place it into C
2827   136E 2A            mov b, [d] ; Lower Word in B
2828   136F             ; --- START RELATIONAL
2829   136F D7            push a
2830   1370 FD D8         push g
2831   1372 11            mov a, b
2832   1373 FD 7A         mov g, c
2833   1375 26 00 00      mov b, $0
2834   1378 38 00 00      mov c, 0
2835   137B FD AF         cmp32 ga, cb
2836   137D FD 71         seq ; ==
2837   137F FD F1         pop g
2838   1381 E4            pop a
2839   1382             ; --- END RELATIONAL
2840   1382 C0 00 00      cmp b, 0
2841   1385 C6 97 13      je _if42_exit
2842   1388             _if42_true:
2843   1388             ; putchar('0'); 
2844   1388 26 30 00      mov b, $30
2845   138B DD            push bl
2846   138C 07 85 17      call putchar
2847   138F 51 01 00      add sp, 1
2848   1392             ; return; 
2849   1392 F9            leave
2850   1393 09            ret
2851   1394 0A 97 13      jmp _if42_exit
2852   1397             _if42_exit:
2853   1397             ; while (num > 0) { 
2854   1397             _while43_cond:
2855   1397 FA 05 00      lea d, [bp + 5] ; $num
2856   139A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2857   139D FD 39         mov c, b ; And place it into C
2858   139F 2A            mov b, [d] ; Lower Word in B
2859   13A0             ; --- START RELATIONAL
2860   13A0 D7            push a
2861   13A1 FD D8         push g
2862   13A3 11            mov a, b
2863   13A4 FD 7A         mov g, c
2864   13A6 26 00 00      mov b, $0
2865   13A9 38 00 00      mov c, 0
2866   13AC FD 81         sgu
2867   13AE FD F1         pop g
2868   13B0 E4            pop a
2869   13B1             ; --- END RELATIONAL
2870   13B1 C0 00 00      cmp b, 0
2871   13B4 C6 14 14      je _while43_exit
2872   13B7             _while43_block:
2873   13B7             ; digits[i] = '0' + (num % 10); 
2874   13B7 FA F7 FF      lea d, [bp + -9] ; $digits
2875   13BA D7            push a
2876   13BB DA            push d
2877   13BC FA F5 FF      lea d, [bp + -11] ; $i
2878   13BF 2A            mov b, [d]
2879   13C0 E7            pop d
2880   13C1 5A            add d, b
2881   13C2 E4            pop a
2882   13C3 DA            push d
2883   13C4 26 30 00      mov b, $30
2884   13C7             ; --- START TERMS
2885   13C7 D7            push a
2886   13C8 11            mov a, b
2887   13C9 FA 05 00      lea d, [bp + 5] ; $num
2888   13CC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2889   13CF FD 39         mov c, b ; And place it into C
2890   13D1 2A            mov b, [d] ; Lower Word in B
2891   13D2             ; --- START FACTORS
2892   13D2 D7            push a
2893   13D3 11            mov a, b
2894   13D4 26 0A 00      mov b, $a
2895   13D7 AE            div a, b ; 
2896   13D8 11            mov a, b
2897   13D9 27            mov b, a
2898   13DA E4            pop a
2899   13DB             ; --- END FACTORS
2900   13DB 54            add a, b
2901   13DC D7            push a
2902   13DD FD 12         mov a, g
2903   13DF 28            mov b, c
2904   13E0 5C            adc a, b
2905   13E1 39            mov c, a
2906   13E2 E5            pop b
2907   13E3 E4            pop a
2908   13E4             ; --- END TERMS
2909   13E4 E7            pop d
2910   13E5 FD 3E         mov [d], bl
2911   13E7             ; num = num / 10; 
2912   13E7 FA 05 00      lea d, [bp + 5] ; $num
2913   13EA DA            push d
2914   13EB FA 05 00      lea d, [bp + 5] ; $num
2915   13EE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2916   13F1 FD 39         mov c, b ; And place it into C
2917   13F3 2A            mov b, [d] ; Lower Word in B
2918   13F4             ; --- START FACTORS
2919   13F4 D7            push a
2920   13F5 11            mov a, b
2921   13F6 26 0A 00      mov b, $a
2922   13F9 AE            div a, b
2923   13FA 27            mov b, a
2924   13FB E4            pop a
2925   13FC             ; --- END FACTORS
2926   13FC E7            pop d
2927   13FD FD 43         mov [d], b
2928   13FF 28            mov b, c
2929   1400 FD 44 02 00   mov [d + 2], b
2930   1404             ; i++; 
2931   1404 FA F5 FF      lea d, [bp + -11] ; $i
2932   1407 2A            mov b, [d]
2933   1408 FD 77         inc b
2934   140A FA F5 FF      lea d, [bp + -11] ; $i
2935   140D FD 43         mov [d], b
2936   140F FD 7D         dec b
2937   1411 0A 97 13      jmp _while43_cond
2938   1414             _while43_exit:
2939   1414             ; while (i > 0) { 
2940   1414             _while44_cond:
2941   1414 FA F5 FF      lea d, [bp + -11] ; $i
2942   1417 2A            mov b, [d]
2943   1418             ; --- START RELATIONAL
2944   1418 D7            push a
2945   1419 11            mov a, b
2946   141A 26 00 00      mov b, $0
2947   141D B0            cmp a, b
2948   141E FD 7F         sgt ; >
2949   1420 E4            pop a
2950   1421             ; --- END RELATIONAL
2951   1421 C0 00 00      cmp b, 0
2952   1424 C6 4D 14      je _while44_exit
2953   1427             _while44_block:
2954   1427             ; i--; 
2955   1427 FA F5 FF      lea d, [bp + -11] ; $i
2956   142A 2A            mov b, [d]
2957   142B FD 7D         dec b
2958   142D FA F5 FF      lea d, [bp + -11] ; $i
2959   1430 FD 43         mov [d], b
2960   1432 FD 77         inc b
2961   1434             ; putchar(digits[i]); 
2962   1434 FA F7 FF      lea d, [bp + -9] ; $digits
2963   1437 D7            push a
2964   1438 DA            push d
2965   1439 FA F5 FF      lea d, [bp + -11] ; $i
2966   143C 2A            mov b, [d]
2967   143D E7            pop d
2968   143E 5A            add d, b
2969   143F E4            pop a
2970   1440 32            mov bl, [d]
2971   1441 A7 00         mov bh, 0
2972   1443 DD            push bl
2973   1444 07 85 17      call putchar
2974   1447 51 01 00      add sp, 1
2975   144A 0A 14 14      jmp _while44_cond
2976   144D             _while44_exit:
2977   144D F9            leave
2978   144E 09            ret
2979   144F             
2980   144F             sprint_unsigned:
2981   144F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2982   1452             ; char digits[5]; 
2983   1452 52 05 00      sub sp, 5
2984   1455             ; int i; 
2985   1455 52 02 00      sub sp, 2
2986   1458             ; int len = 0; 
2987   1458 52 02 00      sub sp, 2
2988   145B             ; --- START LOCAL VAR INITIALIZATION
2989   145B FA F8 FF      lea d, [bp + -8] ; $len
2990   145E DA            push d
2991   145F 26 00 00      mov b, $0
2992   1462 E7            pop d
2993   1463 FD 43         mov [d], b
2994   1465             ; --- END LOCAL VAR INITIALIZATION
2995   1465             ; i = 0; 
2996   1465 FA FA FF      lea d, [bp + -6] ; $i
2997   1468 DA            push d
2998   1469 26 00 00      mov b, $0
2999   146C E7            pop d
3000   146D FD 43         mov [d], b
3001   146F             ; if(num == 0){ 
3002   146F             _if45_cond:
3003   146F FA 07 00      lea d, [bp + 7] ; $num
3004   1472 2A            mov b, [d]
3005   1473             ; --- START RELATIONAL
3006   1473 D7            push a
3007   1474 11            mov a, b
3008   1475 26 00 00      mov b, $0
3009   1478 B0            cmp a, b
3010   1479 FD 71         seq ; ==
3011   147B E4            pop a
3012   147C             ; --- END RELATIONAL
3013   147C C0 00 00      cmp b, 0
3014   147F C6 9E 14      je _if45_exit
3015   1482             _if45_true:
3016   1482             ; *dest++ = '0'; 
3017   1482 FA 05 00      lea d, [bp + 5] ; $dest
3018   1485 2A            mov b, [d]
3019   1486 FD 77         inc b
3020   1488 FA 05 00      lea d, [bp + 5] ; $dest
3021   148B FD 43         mov [d], b
3022   148D FD 7D         dec b
3023   148F D8            push b
3024   1490 26 30 00      mov b, $30
3025   1493 E7            pop d
3026   1494 FD 3E         mov [d], bl
3027   1496             ; return 1; 
3028   1496 26 01 00      mov b, $1
3029   1499 F9            leave
3030   149A 09            ret
3031   149B 0A 9E 14      jmp _if45_exit
3032   149E             _if45_exit:
3033   149E             ; while (num > 0) { 
3034   149E             _while46_cond:
3035   149E FA 07 00      lea d, [bp + 7] ; $num
3036   14A1 2A            mov b, [d]
3037   14A2             ; --- START RELATIONAL
3038   14A2 D7            push a
3039   14A3 11            mov a, b
3040   14A4 26 00 00      mov b, $0
3041   14A7 B0            cmp a, b
3042   14A8 FD 81         sgu ; > (unsigned)
3043   14AA E4            pop a
3044   14AB             ; --- END RELATIONAL
3045   14AB C0 00 00      cmp b, 0
3046   14AE C6 F8 14      je _while46_exit
3047   14B1             _while46_block:
3048   14B1             ; digits[i] = '0' + (num % 10); 
3049   14B1 FA FC FF      lea d, [bp + -4] ; $digits
3050   14B4 D7            push a
3051   14B5 DA            push d
3052   14B6 FA FA FF      lea d, [bp + -6] ; $i
3053   14B9 2A            mov b, [d]
3054   14BA E7            pop d
3055   14BB 5A            add d, b
3056   14BC E4            pop a
3057   14BD DA            push d
3058   14BE 26 30 00      mov b, $30
3059   14C1             ; --- START TERMS
3060   14C1 D7            push a
3061   14C2 11            mov a, b
3062   14C3 FA 07 00      lea d, [bp + 7] ; $num
3063   14C6 2A            mov b, [d]
3064   14C7             ; --- START FACTORS
3065   14C7 D7            push a
3066   14C8 11            mov a, b
3067   14C9 26 0A 00      mov b, $a
3068   14CC AE            div a, b ; 
3069   14CD 11            mov a, b
3070   14CE 27            mov b, a
3071   14CF E4            pop a
3072   14D0             ; --- END FACTORS
3073   14D0 56            add b, a
3074   14D1 E4            pop a
3075   14D2             ; --- END TERMS
3076   14D2 E7            pop d
3077   14D3 FD 3E         mov [d], bl
3078   14D5             ; num = num / 10; 
3079   14D5 FA 07 00      lea d, [bp + 7] ; $num
3080   14D8 DA            push d
3081   14D9 FA 07 00      lea d, [bp + 7] ; $num
3082   14DC 2A            mov b, [d]
3083   14DD             ; --- START FACTORS
3084   14DD D7            push a
3085   14DE 11            mov a, b
3086   14DF 26 0A 00      mov b, $a
3087   14E2 AE            div a, b
3088   14E3 27            mov b, a
3089   14E4 E4            pop a
3090   14E5             ; --- END FACTORS
3091   14E5 E7            pop d
3092   14E6 FD 43         mov [d], b
3093   14E8             ; i++; 
3094   14E8 FA FA FF      lea d, [bp + -6] ; $i
3095   14EB 2A            mov b, [d]
3096   14EC FD 77         inc b
3097   14EE FA FA FF      lea d, [bp + -6] ; $i
3098   14F1 FD 43         mov [d], b
3099   14F3 FD 7D         dec b
3100   14F5 0A 9E 14      jmp _while46_cond
3101   14F8             _while46_exit:
3102   14F8             ; while (i > 0) { 
3103   14F8             _while47_cond:
3104   14F8 FA FA FF      lea d, [bp + -6] ; $i
3105   14FB 2A            mov b, [d]
3106   14FC             ; --- START RELATIONAL
3107   14FC D7            push a
3108   14FD 11            mov a, b
3109   14FE 26 00 00      mov b, $0
3110   1501 B0            cmp a, b
3111   1502 FD 7F         sgt ; >
3112   1504 E4            pop a
3113   1505             ; --- END RELATIONAL
3114   1505 C0 00 00      cmp b, 0
3115   1508 C6 48 15      je _while47_exit
3116   150B             _while47_block:
3117   150B             ; i--; 
3118   150B FA FA FF      lea d, [bp + -6] ; $i
3119   150E 2A            mov b, [d]
3120   150F FD 7D         dec b
3121   1511 FA FA FF      lea d, [bp + -6] ; $i
3122   1514 FD 43         mov [d], b
3123   1516 FD 77         inc b
3124   1518             ; *dest++ = digits[i]; 
3125   1518 FA 05 00      lea d, [bp + 5] ; $dest
3126   151B 2A            mov b, [d]
3127   151C FD 77         inc b
3128   151E FA 05 00      lea d, [bp + 5] ; $dest
3129   1521 FD 43         mov [d], b
3130   1523 FD 7D         dec b
3131   1525 D8            push b
3132   1526 FA FC FF      lea d, [bp + -4] ; $digits
3133   1529 D7            push a
3134   152A DA            push d
3135   152B FA FA FF      lea d, [bp + -6] ; $i
3136   152E 2A            mov b, [d]
3137   152F E7            pop d
3138   1530 5A            add d, b
3139   1531 E4            pop a
3140   1532 32            mov bl, [d]
3141   1533 A7 00         mov bh, 0
3142   1535 E7            pop d
3143   1536 FD 3E         mov [d], bl
3144   1538             ; len++; 
3145   1538 FA F8 FF      lea d, [bp + -8] ; $len
3146   153B 2A            mov b, [d]
3147   153C FD 77         inc b
3148   153E FA F8 FF      lea d, [bp + -8] ; $len
3149   1541 FD 43         mov [d], b
3150   1543 FD 7D         dec b
3151   1545 0A F8 14      jmp _while47_cond
3152   1548             _while47_exit:
3153   1548             ; *dest = '\0'; 
3154   1548 FA 05 00      lea d, [bp + 5] ; $dest
3155   154B 2A            mov b, [d]
3156   154C D8            push b
3157   154D 26 00 00      mov b, $0
3158   1550 E7            pop d
3159   1551 FD 3E         mov [d], bl
3160   1553             ; return len; 
3161   1553 FA F8 FF      lea d, [bp + -8] ; $len
3162   1556 2A            mov b, [d]
3163   1557 F9            leave
3164   1558 09            ret
3165   1559             
3166   1559             print_unsigned:
3167   1559 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3168   155C             ; char digits[5]; 
3169   155C 52 05 00      sub sp, 5
3170   155F             ; int i; 
3171   155F 52 02 00      sub sp, 2
3172   1562             ; i = 0; 
3173   1562 FA FA FF      lea d, [bp + -6] ; $i
3174   1565 DA            push d
3175   1566 26 00 00      mov b, $0
3176   1569 E7            pop d
3177   156A FD 43         mov [d], b
3178   156C             ; if(num == 0){ 
3179   156C             _if48_cond:
3180   156C FA 05 00      lea d, [bp + 5] ; $num
3181   156F 2A            mov b, [d]
3182   1570             ; --- START RELATIONAL
3183   1570 D7            push a
3184   1571 11            mov a, b
3185   1572 26 00 00      mov b, $0
3186   1575 B0            cmp a, b
3187   1576 FD 71         seq ; ==
3188   1578 E4            pop a
3189   1579             ; --- END RELATIONAL
3190   1579 C0 00 00      cmp b, 0
3191   157C C6 8E 15      je _if48_exit
3192   157F             _if48_true:
3193   157F             ; putchar('0'); 
3194   157F 26 30 00      mov b, $30
3195   1582 DD            push bl
3196   1583 07 85 17      call putchar
3197   1586 51 01 00      add sp, 1
3198   1589             ; return; 
3199   1589 F9            leave
3200   158A 09            ret
3201   158B 0A 8E 15      jmp _if48_exit
3202   158E             _if48_exit:
3203   158E             ; while (num > 0) { 
3204   158E             _while49_cond:
3205   158E FA 05 00      lea d, [bp + 5] ; $num
3206   1591 2A            mov b, [d]
3207   1592             ; --- START RELATIONAL
3208   1592 D7            push a
3209   1593 11            mov a, b
3210   1594 26 00 00      mov b, $0
3211   1597 B0            cmp a, b
3212   1598 FD 81         sgu ; > (unsigned)
3213   159A E4            pop a
3214   159B             ; --- END RELATIONAL
3215   159B C0 00 00      cmp b, 0
3216   159E C6 E8 15      je _while49_exit
3217   15A1             _while49_block:
3218   15A1             ; digits[i] = '0' + (num % 10); 
3219   15A1 FA FC FF      lea d, [bp + -4] ; $digits
3220   15A4 D7            push a
3221   15A5 DA            push d
3222   15A6 FA FA FF      lea d, [bp + -6] ; $i
3223   15A9 2A            mov b, [d]
3224   15AA E7            pop d
3225   15AB 5A            add d, b
3226   15AC E4            pop a
3227   15AD DA            push d
3228   15AE 26 30 00      mov b, $30
3229   15B1             ; --- START TERMS
3230   15B1 D7            push a
3231   15B2 11            mov a, b
3232   15B3 FA 05 00      lea d, [bp + 5] ; $num
3233   15B6 2A            mov b, [d]
3234   15B7             ; --- START FACTORS
3235   15B7 D7            push a
3236   15B8 11            mov a, b
3237   15B9 26 0A 00      mov b, $a
3238   15BC AE            div a, b ; 
3239   15BD 11            mov a, b
3240   15BE 27            mov b, a
3241   15BF E4            pop a
3242   15C0             ; --- END FACTORS
3243   15C0 56            add b, a
3244   15C1 E4            pop a
3245   15C2             ; --- END TERMS
3246   15C2 E7            pop d
3247   15C3 FD 3E         mov [d], bl
3248   15C5             ; num = num / 10; 
3249   15C5 FA 05 00      lea d, [bp + 5] ; $num
3250   15C8 DA            push d
3251   15C9 FA 05 00      lea d, [bp + 5] ; $num
3252   15CC 2A            mov b, [d]
3253   15CD             ; --- START FACTORS
3254   15CD D7            push a
3255   15CE 11            mov a, b
3256   15CF 26 0A 00      mov b, $a
3257   15D2 AE            div a, b
3258   15D3 27            mov b, a
3259   15D4 E4            pop a
3260   15D5             ; --- END FACTORS
3261   15D5 E7            pop d
3262   15D6 FD 43         mov [d], b
3263   15D8             ; i++; 
3264   15D8 FA FA FF      lea d, [bp + -6] ; $i
3265   15DB 2A            mov b, [d]
3266   15DC FD 77         inc b
3267   15DE FA FA FF      lea d, [bp + -6] ; $i
3268   15E1 FD 43         mov [d], b
3269   15E3 FD 7D         dec b
3270   15E5 0A 8E 15      jmp _while49_cond
3271   15E8             _while49_exit:
3272   15E8             ; while (i > 0) { 
3273   15E8             _while50_cond:
3274   15E8 FA FA FF      lea d, [bp + -6] ; $i
3275   15EB 2A            mov b, [d]
3276   15EC             ; --- START RELATIONAL
3277   15EC D7            push a
3278   15ED 11            mov a, b
3279   15EE 26 00 00      mov b, $0
3280   15F1 B0            cmp a, b
3281   15F2 FD 7F         sgt ; >
3282   15F4 E4            pop a
3283   15F5             ; --- END RELATIONAL
3284   15F5 C0 00 00      cmp b, 0
3285   15F8 C6 21 16      je _while50_exit
3286   15FB             _while50_block:
3287   15FB             ; i--; 
3288   15FB FA FA FF      lea d, [bp + -6] ; $i
3289   15FE 2A            mov b, [d]
3290   15FF FD 7D         dec b
3291   1601 FA FA FF      lea d, [bp + -6] ; $i
3292   1604 FD 43         mov [d], b
3293   1606 FD 77         inc b
3294   1608             ; putchar(digits[i]); 
3295   1608 FA FC FF      lea d, [bp + -4] ; $digits
3296   160B D7            push a
3297   160C DA            push d
3298   160D FA FA FF      lea d, [bp + -6] ; $i
3299   1610 2A            mov b, [d]
3300   1611 E7            pop d
3301   1612 5A            add d, b
3302   1613 E4            pop a
3303   1614 32            mov bl, [d]
3304   1615 A7 00         mov bh, 0
3305   1617 DD            push bl
3306   1618 07 85 17      call putchar
3307   161B 51 01 00      add sp, 1
3308   161E 0A E8 15      jmp _while50_cond
3309   1621             _while50_exit:
3310   1621 F9            leave
3311   1622 09            ret
3312   1623             
3313   1623             sprint_signed:
3314   1623 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3315   1626             ; char digits[5]; 
3316   1626 52 05 00      sub sp, 5
3317   1629             ; int i = 0; 
3318   1629 52 02 00      sub sp, 2
3319   162C             ; --- START LOCAL VAR INITIALIZATION
3320   162C FA FA FF      lea d, [bp + -6] ; $i
3321   162F DA            push d
3322   1630 26 00 00      mov b, $0
3323   1633 E7            pop d
3324   1634 FD 43         mov [d], b
3325   1636             ; --- END LOCAL VAR INITIALIZATION
3326   1636             ; int len = 0; 
3327   1636 52 02 00      sub sp, 2
3328   1639             ; --- START LOCAL VAR INITIALIZATION
3329   1639 FA F8 FF      lea d, [bp + -8] ; $len
3330   163C DA            push d
3331   163D 26 00 00      mov b, $0
3332   1640 E7            pop d
3333   1641 FD 43         mov [d], b
3334   1643             ; --- END LOCAL VAR INITIALIZATION
3335   1643             ; if (num < 0) { 
3336   1643             _if51_cond:
3337   1643 FA 07 00      lea d, [bp + 7] ; $num
3338   1646 2A            mov b, [d]
3339   1647             ; --- START RELATIONAL
3340   1647 D7            push a
3341   1648 11            mov a, b
3342   1649 26 00 00      mov b, $0
3343   164C B0            cmp a, b
3344   164D FD 73         slt ; < (signed)
3345   164F E4            pop a
3346   1650             ; --- END RELATIONAL
3347   1650 C0 00 00      cmp b, 0
3348   1653 C6 87 16      je _if51_else
3349   1656             _if51_true:
3350   1656             ; *dest++ = '-'; 
3351   1656 FA 05 00      lea d, [bp + 5] ; $dest
3352   1659 2A            mov b, [d]
3353   165A FD 77         inc b
3354   165C FA 05 00      lea d, [bp + 5] ; $dest
3355   165F FD 43         mov [d], b
3356   1661 FD 7D         dec b
3357   1663 D8            push b
3358   1664 26 2D 00      mov b, $2d
3359   1667 E7            pop d
3360   1668 FD 3E         mov [d], bl
3361   166A             ; num = -num; 
3362   166A FA 07 00      lea d, [bp + 7] ; $num
3363   166D DA            push d
3364   166E FA 07 00      lea d, [bp + 7] ; $num
3365   1671 2A            mov b, [d]
3366   1672 FD 97         neg b
3367   1674 E7            pop d
3368   1675 FD 43         mov [d], b
3369   1677             ; len++; 
3370   1677 FA F8 FF      lea d, [bp + -8] ; $len
3371   167A 2A            mov b, [d]
3372   167B FD 77         inc b
3373   167D FA F8 FF      lea d, [bp + -8] ; $len
3374   1680 FD 43         mov [d], b
3375   1682 FD 7D         dec b
3376   1684 0A C1 16      jmp _if51_exit
3377   1687             _if51_else:
3378   1687             ; if (num == 0) { 
3379   1687             _if52_cond:
3380   1687 FA 07 00      lea d, [bp + 7] ; $num
3381   168A 2A            mov b, [d]
3382   168B             ; --- START RELATIONAL
3383   168B D7            push a
3384   168C 11            mov a, b
3385   168D 26 00 00      mov b, $0
3386   1690 B0            cmp a, b
3387   1691 FD 71         seq ; ==
3388   1693 E4            pop a
3389   1694             ; --- END RELATIONAL
3390   1694 C0 00 00      cmp b, 0
3391   1697 C6 C1 16      je _if52_exit
3392   169A             _if52_true:
3393   169A             ; *dest++ = '0'; 
3394   169A FA 05 00      lea d, [bp + 5] ; $dest
3395   169D 2A            mov b, [d]
3396   169E FD 77         inc b
3397   16A0 FA 05 00      lea d, [bp + 5] ; $dest
3398   16A3 FD 43         mov [d], b
3399   16A5 FD 7D         dec b
3400   16A7 D8            push b
3401   16A8 26 30 00      mov b, $30
3402   16AB E7            pop d
3403   16AC FD 3E         mov [d], bl
3404   16AE             ; *dest = '\0'; 
3405   16AE FA 05 00      lea d, [bp + 5] ; $dest
3406   16B1 2A            mov b, [d]
3407   16B2 D8            push b
3408   16B3 26 00 00      mov b, $0
3409   16B6 E7            pop d
3410   16B7 FD 3E         mov [d], bl
3411   16B9             ; return 1; 
3412   16B9 26 01 00      mov b, $1
3413   16BC F9            leave
3414   16BD 09            ret
3415   16BE 0A C1 16      jmp _if52_exit
3416   16C1             _if52_exit:
3417   16C1             _if51_exit:
3418   16C1             ; while (num > 0) { 
3419   16C1             _while53_cond:
3420   16C1 FA 07 00      lea d, [bp + 7] ; $num
3421   16C4 2A            mov b, [d]
3422   16C5             ; --- START RELATIONAL
3423   16C5 D7            push a
3424   16C6 11            mov a, b
3425   16C7 26 00 00      mov b, $0
3426   16CA B0            cmp a, b
3427   16CB FD 7F         sgt ; >
3428   16CD E4            pop a
3429   16CE             ; --- END RELATIONAL
3430   16CE C0 00 00      cmp b, 0
3431   16D1 C6 1B 17      je _while53_exit
3432   16D4             _while53_block:
3433   16D4             ; digits[i] = '0' + (num % 10); 
3434   16D4 FA FC FF      lea d, [bp + -4] ; $digits
3435   16D7 D7            push a
3436   16D8 DA            push d
3437   16D9 FA FA FF      lea d, [bp + -6] ; $i
3438   16DC 2A            mov b, [d]
3439   16DD E7            pop d
3440   16DE 5A            add d, b
3441   16DF E4            pop a
3442   16E0 DA            push d
3443   16E1 26 30 00      mov b, $30
3444   16E4             ; --- START TERMS
3445   16E4 D7            push a
3446   16E5 11            mov a, b
3447   16E6 FA 07 00      lea d, [bp + 7] ; $num
3448   16E9 2A            mov b, [d]
3449   16EA             ; --- START FACTORS
3450   16EA D7            push a
3451   16EB 11            mov a, b
3452   16EC 26 0A 00      mov b, $a
3453   16EF AE            div a, b ; 
3454   16F0 11            mov a, b
3455   16F1 27            mov b, a
3456   16F2 E4            pop a
3457   16F3             ; --- END FACTORS
3458   16F3 56            add b, a
3459   16F4 E4            pop a
3460   16F5             ; --- END TERMS
3461   16F5 E7            pop d
3462   16F6 FD 3E         mov [d], bl
3463   16F8             ; num = num / 10; 
3464   16F8 FA 07 00      lea d, [bp + 7] ; $num
3465   16FB DA            push d
3466   16FC FA 07 00      lea d, [bp + 7] ; $num
3467   16FF 2A            mov b, [d]
3468   1700             ; --- START FACTORS
3469   1700 D7            push a
3470   1701 11            mov a, b
3471   1702 26 0A 00      mov b, $a
3472   1705 AE            div a, b
3473   1706 27            mov b, a
3474   1707 E4            pop a
3475   1708             ; --- END FACTORS
3476   1708 E7            pop d
3477   1709 FD 43         mov [d], b
3478   170B             ; i++; 
3479   170B FA FA FF      lea d, [bp + -6] ; $i
3480   170E 2A            mov b, [d]
3481   170F FD 77         inc b
3482   1711 FA FA FF      lea d, [bp + -6] ; $i
3483   1714 FD 43         mov [d], b
3484   1716 FD 7D         dec b
3485   1718 0A C1 16      jmp _while53_cond
3486   171B             _while53_exit:
3487   171B             ; while (i > 0) { 
3488   171B             _while54_cond:
3489   171B FA FA FF      lea d, [bp + -6] ; $i
3490   171E 2A            mov b, [d]
3491   171F             ; --- START RELATIONAL
3492   171F D7            push a
3493   1720 11            mov a, b
3494   1721 26 00 00      mov b, $0
3495   1724 B0            cmp a, b
3496   1725 FD 7F         sgt ; >
3497   1727 E4            pop a
3498   1728             ; --- END RELATIONAL
3499   1728 C0 00 00      cmp b, 0
3500   172B C6 6B 17      je _while54_exit
3501   172E             _while54_block:
3502   172E             ; i--; 
3503   172E FA FA FF      lea d, [bp + -6] ; $i
3504   1731 2A            mov b, [d]
3505   1732 FD 7D         dec b
3506   1734 FA FA FF      lea d, [bp + -6] ; $i
3507   1737 FD 43         mov [d], b
3508   1739 FD 77         inc b
3509   173B             ; *dest++ = digits[i]; 
3510   173B FA 05 00      lea d, [bp + 5] ; $dest
3511   173E 2A            mov b, [d]
3512   173F FD 77         inc b
3513   1741 FA 05 00      lea d, [bp + 5] ; $dest
3514   1744 FD 43         mov [d], b
3515   1746 FD 7D         dec b
3516   1748 D8            push b
3517   1749 FA FC FF      lea d, [bp + -4] ; $digits
3518   174C D7            push a
3519   174D DA            push d
3520   174E FA FA FF      lea d, [bp + -6] ; $i
3521   1751 2A            mov b, [d]
3522   1752 E7            pop d
3523   1753 5A            add d, b
3524   1754 E4            pop a
3525   1755 32            mov bl, [d]
3526   1756 A7 00         mov bh, 0
3527   1758 E7            pop d
3528   1759 FD 3E         mov [d], bl
3529   175B             ; len++; 
3530   175B FA F8 FF      lea d, [bp + -8] ; $len
3531   175E 2A            mov b, [d]
3532   175F FD 77         inc b
3533   1761 FA F8 FF      lea d, [bp + -8] ; $len
3534   1764 FD 43         mov [d], b
3535   1766 FD 7D         dec b
3536   1768 0A 1B 17      jmp _while54_cond
3537   176B             _while54_exit:
3538   176B             ; *dest = '\0'; 
3539   176B FA 05 00      lea d, [bp + 5] ; $dest
3540   176E 2A            mov b, [d]
3541   176F D8            push b
3542   1770 26 00 00      mov b, $0
3543   1773 E7            pop d
3544   1774 FD 3E         mov [d], bl
3545   1776             ; return len; 
3546   1776 FA F8 FF      lea d, [bp + -8] ; $len
3547   1779 2A            mov b, [d]
3548   177A F9            leave
3549   177B 09            ret
3550   177C             
3551   177C             date:
3552   177C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3553   177F             
3554   177F             ; --- BEGIN INLINE ASM SEGMENT
3555   177F 19 00         mov al, 0 
3556   1781 05 07         syscall sys_datetime
3557   1783             ; --- END INLINE ASM SEGMENT
3558   1783             
3559   1783 F9            leave
3560   1784 09            ret
3561   1785             
3562   1785             putchar:
3563   1785 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3564   1788             
3565   1788             ; --- BEGIN INLINE ASM SEGMENT
3566   1788 FA 05 00      lea d, [bp + 5] ; $c
3567   178B 1E            mov al, [d]
3568   178C 23            mov ah, al
3569   178D 07 16 19      call _putchar
3570   1790             ; --- END INLINE ASM SEGMENT
3571   1790             
3572   1790 F9            leave
3573   1791 09            ret
3574   1792             
3575   1792             getchar:
3576   1792 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3577   1795             ; char c; 
3578   1795 52 01 00      sub sp, 1
3579   1798             
3580   1798             ; --- BEGIN INLINE ASM SEGMENT
3581   1798 07 0F 19      call getch
3582   179B 1A            mov al, ah
3583   179C FA 00 00      lea d, [bp + 0] ; $c
3584   179F 3E            mov [d], al
3585   17A0             ; --- END INLINE ASM SEGMENT
3586   17A0             
3587   17A0             ; return c; 
3588   17A0 FA 00 00      lea d, [bp + 0] ; $c
3589   17A3 32            mov bl, [d]
3590   17A4 A7 00         mov bh, 0
3591   17A6 F9            leave
3592   17A7 09            ret
3593   17A8             
3594   17A8             scann:
3595   17A8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3596   17AB             ; int m; 
3597   17AB 52 02 00      sub sp, 2
3598   17AE             
3599   17AE             ; --- BEGIN INLINE ASM SEGMENT
3600   17AE 07 5A 1B      call scan_u16d
3601   17B1 FA FF FF      lea d, [bp + -1] ; $m
3602   17B4 43            mov [d], a
3603   17B5             ; --- END INLINE ASM SEGMENT
3604   17B5             
3605   17B5             ; return m; 
3606   17B5 FA FF FF      lea d, [bp + -1] ; $m
3607   17B8 2A            mov b, [d]
3608   17B9 F9            leave
3609   17BA 09            ret
3610   17BB             
3611   17BB             puts:
3612   17BB F8 00 00      enter 0 ; (push bp; mov bp, sp)
3613   17BE             
3614   17BE             ; --- BEGIN INLINE ASM SEGMENT
3615   17BE FA 05 00      lea d, [bp + 5] ; $s
3616   17C1 15            mov a, [d]
3617   17C2 3C            mov d, a
3618   17C3 07 60 1A      call _puts
3619   17C6 10 00 0A      mov a, $0A00
3620   17C9 05 03         syscall sys_io
3621   17CB             ; --- END INLINE ASM SEGMENT
3622   17CB             
3623   17CB F9            leave
3624   17CC 09            ret
3625   17CD             
3626   17CD             print:
3627   17CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
3628   17D0             
3629   17D0             ; --- BEGIN INLINE ASM SEGMENT
3630   17D0 FA 05 00      lea d, [bp + 5] ; $s
3631   17D3 FD 2A         mov d, [d]
3632   17D5 07 60 1A      call _puts
3633   17D8             ; --- END INLINE ASM SEGMENT
3634   17D8             
3635   17D8 F9            leave
3636   17D9 09            ret
3637   17DA             
3638   17DA             getparam:
3639   17DA F8 00 00      enter 0 ; (push bp; mov bp, sp)
3640   17DD             ; char data; 
3641   17DD 52 01 00      sub sp, 1
3642   17E0             
3643   17E0             ; --- BEGIN INLINE ASM SEGMENT
3644   17E0 19 04         mov al, 4
3645   17E2 FA 05 00      lea d, [bp + 5] ; $address
3646   17E5 FD 2A         mov d, [d]
3647   17E7 05 0C         syscall sys_system
3648   17E9 FA 00 00      lea d, [bp + 0] ; $data
3649   17EC FD 3E         mov [d], bl
3650   17EE             ; --- END INLINE ASM SEGMENT
3651   17EE             
3652   17EE             ; return data; 
3653   17EE FA 00 00      lea d, [bp + 0] ; $data
3654   17F1 32            mov bl, [d]
3655   17F2 A7 00         mov bh, 0
3656   17F4 F9            leave
3657   17F5 09            ret
3658   17F6             
3659   17F6             clear:
3660   17F6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3661   17F9             ; print("\033[2J\033[H"); 
3662   17F9 26 E9 67      mov b, _s32 ; "\033[2J\033[H"
3663   17FC FD AB         swp b
3664   17FE D8            push b
3665   17FF 07 CD 17      call print
3666   1802 51 02 00      add sp, 2
3667   1805 F9            leave
3668   1806 09            ret
3669   1807             
3670   1807             abs:
3671   1807 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3672   180A             ; return i < 0 ? -i : i; 
3673   180A             _ternary55_cond:
3674   180A FA 05 00      lea d, [bp + 5] ; $i
3675   180D 2A            mov b, [d]
3676   180E             ; --- START RELATIONAL
3677   180E D7            push a
3678   180F 11            mov a, b
3679   1810 26 00 00      mov b, $0
3680   1813 B0            cmp a, b
3681   1814 FD 73         slt ; < (signed)
3682   1816 E4            pop a
3683   1817             ; --- END RELATIONAL
3684   1817 C0 00 00      cmp b, 0
3685   181A C6 26 18      je _ternary55_false
3686   181D             _ternary55_true:
3687   181D FA 05 00      lea d, [bp + 5] ; $i
3688   1820 2A            mov b, [d]
3689   1821 FD 97         neg b
3690   1823 0A 2A 18      jmp _ternary55_exit
3691   1826             _ternary55_false:
3692   1826 FA 05 00      lea d, [bp + 5] ; $i
3693   1829 2A            mov b, [d]
3694   182A             _ternary55_exit:
3695   182A F9            leave
3696   182B 09            ret
3697   182C             
3698   182C             include_stdio_asm:
3699   182C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3700   182F             
3701   182F             ; --- BEGIN INLINE ASM SEGMENT
3702   182F             .include "lib/asm/stdio.asm"
0001+  182F             ;-----------------------------------------------------------------------------
0002+  182F             ; stdio.s
0003+  182F             ;-----------------------------------------------------------------------------
0004+  182F             .include "lib/asm/string.asm"
0001++ 182F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 182F             ; string.s
0003++ 182F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 182F             
0005++ 182F             
0006++ 182F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 182F             ; _strrev
0008++ 182F             ; reverse a string
0009++ 182F             ; D = string address
0010++ 182F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 182F             ; 01234
0012++ 182F             _strrev:
0013++ 182F 4B          	pusha
0014++ 1830 07 76 18    	call _strlen	; length in C
0015++ 1833 12          	mov a, c
0016++ 1834 AF 01 00    	cmp a, 1
0017++ 1837 D0 51 18    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 183A 7D          	dec a
0019++ 183B FD 4E       	mov si, d	; beginning of string
0020++ 183D FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 183F 59          	add d, a	; end of string
0022++ 1840 12          	mov a, c
0023++ 1841 FD 9B       	shr a		; divide by 2
0024++ 1843 39          	mov c, a	; C now counts the steps
0025++ 1844             _strrev_L0:
0026++ 1844 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1845 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1846 3E          	mov [d], al	; store left char into right side
0029++ 1847 1B          	mov al, bl
0030++ 1848 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1849 7E          	dec c
0032++ 184A 7F          	dec d
0033++ 184B C2 00 00    	cmp c, 0
0034++ 184E C7 44 18    	jne _strrev_L0
0035++ 1851             _strrev_end:
0036++ 1851 4C          	popa
0037++ 1852 09          	ret
0038++ 1853             	
0039++ 1853             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1853             ; _strchr
0041++ 1853             ; search string in D for char in AL
0042++ 1853             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1853             _strchr:
0044++ 1853             _strchr_L0:
0045++ 1853 32          	mov bl, [d]
0046++ 1854 C1 00       	cmp bl, 0
0047++ 1856 C6 61 18    	je _strchr_end
0048++ 1859 BA          	cmp al, bl
0049++ 185A C6 61 18    	je _strchr_end
0050++ 185D 79          	inc d
0051++ 185E 0A 53 18    	jmp _strchr_L0
0052++ 1861             _strchr_end:
0053++ 1861 1B          	mov al, bl
0054++ 1862 09          	ret
0055++ 1863             
0056++ 1863             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1863             ; _strstr
0058++ 1863             ; find sub-string
0059++ 1863             ; str1 in SI
0060++ 1863             ; str2 in DI
0061++ 1863             ; SI points to end of source string
0062++ 1863             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1863             _strstr:
0064++ 1863 DB          	push al
0065++ 1864 DA          	push d
0066++ 1865 E3          	push di
0067++ 1866             _strstr_loop:
0068++ 1866 F3          	cmpsb					; compare a byte of the strings
0069++ 1867 C7 72 18    	jne _strstr_ret
0070++ 186A FC 00 00    	lea d, [di + 0]
0071++ 186D BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 186F C7 66 18    	jne _strstr_loop				; equal chars but not at end
0073++ 1872             _strstr_ret:
0074++ 1872 F0          	pop di
0075++ 1873 E7          	pop d
0076++ 1874 E8          	pop al
0077++ 1875 09          	ret
0078++ 1876             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1876             ; length of null terminated string
0080++ 1876             ; result in C
0081++ 1876             ; pointer in D
0082++ 1876             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1876             _strlen:
0084++ 1876 DA          	push d
0085++ 1877 38 00 00    	mov c, 0
0086++ 187A             _strlen_L1:
0087++ 187A BD 00       	cmp byte [d], 0
0088++ 187C C6 84 18    	je _strlen_ret
0089++ 187F 79          	inc d
0090++ 1880 78          	inc c
0091++ 1881 0A 7A 18    	jmp _strlen_L1
0092++ 1884             _strlen_ret:
0093++ 1884 E7          	pop d
0094++ 1885 09          	ret
0095++ 1886             
0096++ 1886             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1886             ; STRCMP
0098++ 1886             ; compare two strings
0099++ 1886             ; str1 in SI
0100++ 1886             ; str2 in DI
0101++ 1886             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1886             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1886             _strcmp:
0104++ 1886 DB          	push al
0105++ 1887 DA          	push d
0106++ 1888 E3          	push di
0107++ 1889 E2          	push si
0108++ 188A             _strcmp_loop:
0109++ 188A F3          	cmpsb					; compare a byte of the strings
0110++ 188B C7 96 18    	jne _strcmp_ret
0111++ 188E FB FF FF    	lea d, [si +- 1]
0112++ 1891 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1893 C7 8A 18    	jne _strcmp_loop				; equal chars but not at end
0114++ 1896             _strcmp_ret:
0115++ 1896 EF          	pop si
0116++ 1897 F0          	pop di
0117++ 1898 E7          	pop d
0118++ 1899 E8          	pop al
0119++ 189A 09          	ret
0120++ 189B             
0121++ 189B             
0122++ 189B             ; STRCPY
0123++ 189B             ; copy null terminated string from SI to DI
0124++ 189B             ; source in SI
0125++ 189B             ; destination in DI
0126++ 189B             _strcpy:
0127++ 189B E2          	push si
0128++ 189C E3          	push di
0129++ 189D DB          	push al
0130++ 189E             _strcpy_L1:
0131++ 189E F6          	lodsb
0132++ 189F F7          	stosb
0133++ 18A0 B9 00       	cmp al, 0
0134++ 18A2 C7 9E 18    	jne _strcpy_L1
0135++ 18A5             _strcpy_end:
0136++ 18A5 E8          	pop al
0137++ 18A6 F0          	pop di
0138++ 18A7 EF          	pop si
0139++ 18A8 09          	ret
0140++ 18A9             
0141++ 18A9             ; STRCAT
0142++ 18A9             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 18A9             ; source in SI
0144++ 18A9             ; destination in DI
0145++ 18A9             _strcat:
0146++ 18A9 E2          	push si
0147++ 18AA E3          	push di
0148++ 18AB D7          	push a
0149++ 18AC DA          	push d
0150++ 18AD 50          	mov a, di
0151++ 18AE 3C          	mov d, a
0152++ 18AF             _strcat_goto_end_L1:
0153++ 18AF BD 00       	cmp byte[d], 0
0154++ 18B1 C6 B8 18    	je _strcat_start
0155++ 18B4 79          	inc d
0156++ 18B5 0A AF 18    	jmp _strcat_goto_end_L1
0157++ 18B8             _strcat_start:
0158++ 18B8 FD 50       	mov di, d
0159++ 18BA             _strcat_L1:
0160++ 18BA F6          	lodsb
0161++ 18BB F7          	stosb
0162++ 18BC B9 00       	cmp al, 0
0163++ 18BE C7 BA 18    	jne _strcat_L1
0164++ 18C1             _strcat_end:
0165++ 18C1 E7          	pop d
0166++ 18C2 E4          	pop a
0167++ 18C3 F0          	pop di
0168++ 18C4 EF          	pop si
0169++ 18C5 09          	ret
0170++ 18C6             
0171++ 18C6             
0005+  18C6             
0006+  18C6             ;-----------------------------------------------------------------------------
0007+  18C6             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  18C6             ; ASCII in BL
0009+  18C6             ; result in AL
0010+  18C6             ; ascii for F = 0100 0110
0011+  18C6             ; ascii for 9 = 0011 1001
0012+  18C6             ;-----------------------------------------------------------------------------
0013+  18C6             hex_ascii_encode:
0014+  18C6 1B            mov al, bl
0015+  18C7 93 40         test al, $40        ; test if letter or number
0016+  18C9 C7 CF 18      jnz hex_letter
0017+  18CC 87 0F         and al, $0F        ; get number
0018+  18CE 09            ret
0019+  18CF             hex_letter:
0020+  18CF 87 0F         and al, $0F        ; get letter
0021+  18D1 6A 09         add al, 9
0022+  18D3 09            ret
0023+  18D4             
0024+  18D4             ;-----------------------------------------------------------------------------
0025+  18D4             ; ATOI
0026+  18D4             ; 2 letter hex string in B
0027+  18D4             ; 8bit integer returned in AL
0028+  18D4             ;-----------------------------------------------------------------------------
0029+  18D4             _atoi:
0030+  18D4 D8            push b
0031+  18D5 07 C6 18      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  18D8 30            mov bl, bh
0033+  18D9 DB            push al          ; save a
0034+  18DA 07 C6 18      call hex_ascii_encode
0035+  18DD EA            pop bl  
0036+  18DE FD 9E 04      shl al, 4
0037+  18E1 8C            or al, bl
0038+  18E2 E5            pop b
0039+  18E3 09            ret  
0040+  18E4             
0041+  18E4             
0042+  18E4             ;-----------------------------------------------------------------------------
0043+  18E4             ; ITOA
0044+  18E4             ; 8bit value in BL
0045+  18E4             ; 2 byte ASCII result in A
0046+  18E4             ;-----------------------------------------------------------------------------
0047+  18E4             _itoa:
0048+  18E4 DA            push d
0049+  18E5 D8            push b
0050+  18E6 A7 00         mov bh, 0
0051+  18E8 FD A4 04      shr bl, 4  
0052+  18EB 74            mov d, b
0053+  18EC 1F 94 1B      mov al, [d + s_hex_digits]
0054+  18EF 23            mov ah, al
0055+  18F0               
0056+  18F0 E5            pop b
0057+  18F1 D8            push b
0058+  18F2 A7 00         mov bh, 0
0059+  18F4 FD 87 0F      and bl, $0F
0060+  18F7 74            mov d, b
0061+  18F8 1F 94 1B      mov al, [d + s_hex_digits]
0062+  18FB E5            pop b
0063+  18FC E7            pop d
0064+  18FD 09            ret
0065+  18FE             
0066+  18FE             ;-----------------------------------------------------------------------------
0067+  18FE             ; HEX STRING TO BINARY
0068+  18FE             ; di = destination address
0069+  18FE             ; si = source
0070+  18FE             ;-----------------------------------------------------------------------------
0071+  18FE             _hex_to_int:
0072+  18FE             _hex_to_int_L1:
0073+  18FE F6            lodsb          ; load from [SI] to AL
0074+  18FF B9 00         cmp al, 0        ; check if ASCII 0
0075+  1901 C6 0E 19      jz _hex_to_int_ret
0076+  1904 36            mov bh, al
0077+  1905 F6            lodsb
0078+  1906 2F            mov bl, al
0079+  1907 07 D4 18      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  190A F7            stosb          ; store AL to [DI]
0081+  190B 0A FE 18      jmp _hex_to_int_L1
0082+  190E             _hex_to_int_ret:
0083+  190E 09            ret    
0084+  190F             
0085+  190F             ;-----------------------------------------------------------------------------
0086+  190F             ; GETCHAR
0087+  190F             ; char in ah
0088+  190F             ;-----------------------------------------------------------------------------
0089+  190F             getch:
0090+  190F DB            push al
0091+  1910             getch_retry:
0092+  1910 19 01         mov al, 1
0093+  1912 05 03         syscall sys_io      ; receive in AH
0094+  1914 E8            pop al
0095+  1915 09            ret
0096+  1916             
0097+  1916             ;-----------------------------------------------------------------------------
0098+  1916             ; PUTCHAR
0099+  1916             ; char in ah
0100+  1916             ;-----------------------------------------------------------------------------
0101+  1916             _putchar:
0102+  1916 D7            push a
0103+  1917 19 00         mov al, 0
0104+  1919 05 03         syscall sys_io      ; char in AH
0105+  191B E4            pop a
0106+  191C 09            ret
0107+  191D             
0108+  191D             ;-----------------------------------------------------------------------------
0109+  191D             ;; INPUT A STRING
0110+  191D             ;; terminates with null
0111+  191D             ;; pointer in D
0112+  191D             ;-----------------------------------------------------------------------------
0113+  191D             _gets:
0114+  191D D7            push a
0115+  191E DA            push d
0116+  191F             _gets_loop:
0117+  191F 19 01         mov al, 1
0118+  1921 05 03         syscall sys_io      ; receive in AH
0119+  1923 B9 00         cmp al, 0        ; check error code (AL)
0120+  1925 C6 1F 19      je _gets_loop      ; if no char received, retry
0121+  1928             
0122+  1928 76 1B         cmp ah, 27
0123+  192A C6 4B 19      je _gets_ansi_esc
0124+  192D 76 0A         cmp ah, $0A        ; LF
0125+  192F C6 B6 19      je _gets_end
0126+  1932 76 0D         cmp ah, $0D        ; CR
0127+  1934 C6 B6 19      je _gets_end
0128+  1937 76 5C         cmp ah, $5C        ; '\\'
0129+  1939 C6 77 19      je _gets_escape
0130+  193C               
0131+  193C 76 08         cmp ah, $08      ; check for backspace
0132+  193E C6 47 19      je _gets_backspace
0133+  1941             
0134+  1941 1A            mov al, ah
0135+  1942 3E            mov [d], al
0136+  1943 79            inc d
0137+  1944 0A 1F 19      jmp _gets_loop
0138+  1947             _gets_backspace:
0139+  1947 7F            dec d
0140+  1948 0A 1F 19      jmp _gets_loop
0141+  194B             _gets_ansi_esc:
0142+  194B 19 01         mov al, 1
0143+  194D 05 03         syscall sys_io        ; receive in AH without echo
0144+  194F B9 00         cmp al, 0          ; check error code (AL)
0145+  1951 C6 4B 19      je _gets_ansi_esc    ; if no char received, retry
0146+  1954 76 5B         cmp ah, '['
0147+  1956 C7 1F 19      jne _gets_loop
0148+  1959             _gets_ansi_esc_2:
0149+  1959 19 01         mov al, 1
0150+  195B 05 03         syscall sys_io          ; receive in AH without echo
0151+  195D B9 00         cmp al, 0            ; check error code (AL)
0152+  195F C6 59 19      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1962 76 44         cmp ah, 'D'
0154+  1964 C6 6F 19      je _gets_left_arrow
0155+  1967 76 43         cmp ah, 'C'
0156+  1969 C6 73 19      je _gets_right_arrow
0157+  196C 0A 1F 19      jmp _gets_loop
0158+  196F             _gets_left_arrow:
0159+  196F 7F            dec d
0160+  1970 0A 1F 19      jmp _gets_loop
0161+  1973             _gets_right_arrow:
0162+  1973 79            inc d
0163+  1974 0A 1F 19      jmp _gets_loop
0164+  1977             _gets_escape:
0165+  1977 19 01         mov al, 1
0166+  1979 05 03         syscall sys_io      ; receive in AH
0167+  197B B9 00         cmp al, 0        ; check error code (AL)
0168+  197D C6 77 19      je _gets_escape      ; if no char received, retry
0169+  1980 76 6E         cmp ah, 'n'
0170+  1982 C6 A1 19      je _gets_LF
0171+  1985 76 72         cmp ah, 'r'
0172+  1987 C6 A8 19      je _gets_CR
0173+  198A 76 30         cmp ah, '0'
0174+  198C C6 AF 19      je _gets_NULL
0175+  198F 76 5C         cmp ah, $5C  ; '\'
0176+  1991 C6 9A 19      je _gets_slash
0177+  1994 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1995 3E            mov [d], al
0179+  1996 79            inc d
0180+  1997 0A 1F 19      jmp _gets_loop
0181+  199A             _gets_slash:
0182+  199A 19 5C         mov al, $5C
0183+  199C 3E            mov [d], al
0184+  199D 79            inc d
0185+  199E 0A 1F 19      jmp _gets_loop
0186+  19A1             _gets_LF:
0187+  19A1 19 0A         mov al, $0A
0188+  19A3 3E            mov [d], al
0189+  19A4 79            inc d
0190+  19A5 0A 1F 19      jmp _gets_loop
0191+  19A8             _gets_CR:
0192+  19A8 19 0D         mov al, $0D
0193+  19AA 3E            mov [d], al
0194+  19AB 79            inc d
0195+  19AC 0A 1F 19      jmp _gets_loop
0196+  19AF             _gets_NULL:
0197+  19AF 19 00         mov al, $00
0198+  19B1 3E            mov [d], al
0199+  19B2 79            inc d
0200+  19B3 0A 1F 19      jmp _gets_loop
0201+  19B6             _gets_end:
0202+  19B6 19 00         mov al, 0
0203+  19B8 3E            mov [d], al        ; terminate string
0204+  19B9 E7            pop d
0205+  19BA E4            pop a
0206+  19BB 09            ret
0207+  19BC             
0208+  19BC             ;-----------------------------------------------------------------------------
0209+  19BC             ;; INPUT TEXT
0210+  19BC             ;; terminated with CTRL+D
0211+  19BC             ;; pointer in D
0212+  19BC             ;-----------------------------------------------------------------------------
0213+  19BC             _gettxt:
0214+  19BC D7            push a
0215+  19BD DA            push d
0216+  19BE             _gettxt_loop:
0217+  19BE 19 01         mov al, 1
0218+  19C0 05 03         syscall sys_io      ; receive in AH
0219+  19C2 B9 00         cmp al, 0        ; check error code (AL)
0220+  19C4 C6 BE 19      je _gettxt_loop    ; if no char received, retry
0221+  19C7 76 04         cmp ah, 4      ; EOT
0222+  19C9 C6 07 1A      je _gettxt_end
0223+  19CC 76 08         cmp ah, $08      ; check for backspace
0224+  19CE C6 03 1A      je _gettxt_backspace
0225+  19D1 76 5C         cmp ah, $5C        ; '\'
0226+  19D3 C6 DC 19      je _gettxt_escape
0227+  19D6 1A            mov al, ah
0228+  19D7 3E            mov [d], al
0229+  19D8 79            inc d
0230+  19D9 0A BE 19      jmp _gettxt_loop
0231+  19DC             _gettxt_escape:
0232+  19DC 19 01         mov al, 1
0233+  19DE 05 03         syscall sys_io      ; receive in AH
0234+  19E0 B9 00         cmp al, 0        ; check error code (AL)
0235+  19E2 C6 DC 19      je _gettxt_escape    ; if no char received, retry
0236+  19E5 76 6E         cmp ah, 'n'
0237+  19E7 C6 F5 19      je _gettxt_LF
0238+  19EA 76 72         cmp ah, 'r'
0239+  19EC C6 FC 19      je _gettxt_CR
0240+  19EF 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  19F0 3E            mov [d], al
0242+  19F1 79            inc d
0243+  19F2 0A BE 19      jmp _gettxt_loop
0244+  19F5             _gettxt_LF:
0245+  19F5 19 0A         mov al, $0A
0246+  19F7 3E            mov [d], al
0247+  19F8 79            inc d
0248+  19F9 0A BE 19      jmp _gettxt_loop
0249+  19FC             _gettxt_CR:
0250+  19FC 19 0D         mov al, $0D
0251+  19FE 3E            mov [d], al
0252+  19FF 79            inc d
0253+  1A00 0A BE 19      jmp _gettxt_loop
0254+  1A03             _gettxt_backspace:
0255+  1A03 7F            dec d
0256+  1A04 0A BE 19      jmp _gettxt_loop
0257+  1A07             _gettxt_end:
0258+  1A07 19 00         mov al, 0
0259+  1A09 3E            mov [d], al        ; terminate string
0260+  1A0A E7            pop d
0261+  1A0B E4            pop a
0262+  1A0C 09            ret
0263+  1A0D             
0264+  1A0D             ;-----------------------------------------------------------------------------
0265+  1A0D             ; PRINT NEW LINE
0266+  1A0D             ;-----------------------------------------------------------------------------
0267+  1A0D             printnl:
0268+  1A0D D7            push a
0269+  1A0E 10 00 0A      mov a, $0A00
0270+  1A11 05 03         syscall sys_io
0271+  1A13 10 00 0D      mov a, $0D00
0272+  1A16 05 03         syscall sys_io
0273+  1A18 E4            pop a
0274+  1A19 09            ret
0275+  1A1A             
0276+  1A1A             ;-----------------------------------------------------------------------------
0277+  1A1A             ; _strtoint
0278+  1A1A             ; 4 digit hex string number in d
0279+  1A1A             ; integer returned in A
0280+  1A1A             ;-----------------------------------------------------------------------------
0281+  1A1A             _strtointx:
0282+  1A1A D8            push b
0283+  1A1B 32            mov bl, [d]
0284+  1A1C 37            mov bh, bl
0285+  1A1D 33 01 00      mov bl, [d + 1]
0286+  1A20 07 D4 18      call _atoi        ; convert to int in AL
0287+  1A23 23            mov ah, al        ; move to AH
0288+  1A24 33 02 00      mov bl, [d + 2]
0289+  1A27 37            mov bh, bl
0290+  1A28 33 03 00      mov bl, [d + 3]
0291+  1A2B 07 D4 18      call _atoi        ; convert to int in AL
0292+  1A2E E5            pop b
0293+  1A2F 09            ret
0294+  1A30             
0295+  1A30             ;-----------------------------------------------------------------------------
0296+  1A30             ; _strtoint
0297+  1A30             ; 5 digit base10 string number in d
0298+  1A30             ; integer returned in A
0299+  1A30             ;-----------------------------------------------------------------------------
0300+  1A30             _strtoint:
0301+  1A30 E2            push si
0302+  1A31 D8            push b
0303+  1A32 D9            push c
0304+  1A33 DA            push d
0305+  1A34 07 76 18      call _strlen      ; get string length in C
0306+  1A37 7E            dec c
0307+  1A38 FD 4E         mov si, d
0308+  1A3A 12            mov a, c
0309+  1A3B FD 99         shl a
0310+  1A3D 3B AC 1B      mov d, table_power
0311+  1A40 59            add d, a
0312+  1A41 38 00 00      mov c, 0
0313+  1A44             _strtoint_L0:
0314+  1A44 F6            lodsb      ; load ASCII to al
0315+  1A45 B9 00         cmp al, 0
0316+  1A47 C6 5A 1A      je _strtoint_end
0317+  1A4A 6F 30         sub al, $30    ; make into integer
0318+  1A4C 22 00         mov ah, 0
0319+  1A4E 2A            mov b, [d]
0320+  1A4F AC            mul a, b      ; result in B since it fits in 16bits
0321+  1A50 11            mov a, b
0322+  1A51 28            mov b, c
0323+  1A52 54            add a, b
0324+  1A53 39            mov c, a
0325+  1A54 63 02 00      sub d, 2
0326+  1A57 0A 44 1A      jmp _strtoint_L0
0327+  1A5A             _strtoint_end:
0328+  1A5A 12            mov a, c
0329+  1A5B E7            pop d
0330+  1A5C E6            pop c
0331+  1A5D E5            pop b
0332+  1A5E EF            pop si
0333+  1A5F 09            ret
0334+  1A60             
0335+  1A60             ;-----------------------------------------------------------------------------
0336+  1A60             ; PRINT NULL TERMINATED STRING
0337+  1A60             ; pointer in D
0338+  1A60             ;-----------------------------------------------------------------------------
0339+  1A60             _puts:
0340+  1A60 D7            push a
0341+  1A61 DA            push d
0342+  1A62             _puts_L1:
0343+  1A62 1E            mov al, [d]
0344+  1A63 B9 00         cmp al, 0
0345+  1A65 C6 71 1A      jz _puts_END
0346+  1A68 23            mov ah, al
0347+  1A69 19 00         mov al, 0
0348+  1A6B 05 03         syscall sys_io
0349+  1A6D 79            inc d
0350+  1A6E 0A 62 1A      jmp _puts_L1
0351+  1A71             _puts_END:
0352+  1A71 E7            pop d
0353+  1A72 E4            pop a
0354+  1A73 09            ret
0355+  1A74             
0356+  1A74             ;-----------------------------------------------------------------------------
0357+  1A74             ; PRINT N SIZE STRING
0358+  1A74             ; pointer in D
0359+  1A74             ; size in C
0360+  1A74             ;-----------------------------------------------------------------------------
0361+  1A74             _putsn:
0362+  1A74 DB            push al
0363+  1A75 DA            push d
0364+  1A76 D9            push c
0365+  1A77             _putsn_L0:
0366+  1A77 1E            mov al, [d]
0367+  1A78 23            mov ah, al
0368+  1A79 19 00         mov al, 0
0369+  1A7B 05 03         syscall sys_io
0370+  1A7D 79            inc d
0371+  1A7E 7E            dec c  
0372+  1A7F C2 00 00      cmp c, 0
0373+  1A82 C7 77 1A      jne _putsn_L0
0374+  1A85             _putsn_end:
0375+  1A85 E6            pop c
0376+  1A86 E7            pop d
0377+  1A87 E8            pop al
0378+  1A88 09            ret
0379+  1A89             
0380+  1A89             ;-----------------------------------------------------------------------------
0381+  1A89             ; print 16bit decimal number
0382+  1A89             ; input number in A
0383+  1A89             ;-----------------------------------------------------------------------------
0384+  1A89             print_u16d:
0385+  1A89 D7            push a
0386+  1A8A D8            push b
0387+  1A8B 26 10 27      mov b, 10000
0388+  1A8E AE            div a, b      ; get 10000's coeff.
0389+  1A8F 07 B1 1A      call print_number
0390+  1A92 11            mov a, b
0391+  1A93 26 E8 03      mov b, 1000
0392+  1A96 AE            div a, b      ; get 1000's coeff.
0393+  1A97 07 B1 1A      call print_number
0394+  1A9A 11            mov a, b
0395+  1A9B 26 64 00      mov b, 100
0396+  1A9E AE            div a, b
0397+  1A9F 07 B1 1A      call print_number
0398+  1AA2 11            mov a, b
0399+  1AA3 26 0A 00      mov b, 10
0400+  1AA6 AE            div a, b
0401+  1AA7 07 B1 1A      call print_number
0402+  1AAA 1B            mov al, bl      ; 1's coeff in bl
0403+  1AAB 07 B1 1A      call print_number
0404+  1AAE E5            pop b
0405+  1AAF E4            pop a
0406+  1AB0 09            ret
0407+  1AB1             
0408+  1AB1             ;-----------------------------------------------------------------------------
0409+  1AB1             ; print AL
0410+  1AB1             ;-----------------------------------------------------------------------------
0411+  1AB1             print_number:
0412+  1AB1 6A 30         add al, $30
0413+  1AB3 23            mov ah, al
0414+  1AB4 07 16 19      call _putchar
0415+  1AB7 09            ret
0416+  1AB8             
0417+  1AB8             ;-----------------------------------------------------------------------------
0418+  1AB8             ; PRINT 16BIT HEX INTEGER
0419+  1AB8             ; integer value in reg B
0420+  1AB8             ;-----------------------------------------------------------------------------
0421+  1AB8             print_u16x:
0422+  1AB8 D7            push a
0423+  1AB9 D8            push b
0424+  1ABA DD            push bl
0425+  1ABB 30            mov bl, bh
0426+  1ABC 07 E4 18      call _itoa        ; convert bh to char in A
0427+  1ABF 2F            mov bl, al        ; save al
0428+  1AC0 19 00         mov al, 0
0429+  1AC2 05 03         syscall sys_io        ; display AH
0430+  1AC4 24            mov ah, bl        ; retrieve al
0431+  1AC5 19 00         mov al, 0
0432+  1AC7 05 03         syscall sys_io        ; display AL
0433+  1AC9             
0434+  1AC9 EA            pop bl
0435+  1ACA 07 E4 18      call _itoa        ; convert bh to char in A
0436+  1ACD 2F            mov bl, al        ; save al
0437+  1ACE 19 00         mov al, 0
0438+  1AD0 05 03         syscall sys_io        ; display AH
0439+  1AD2 24            mov ah, bl        ; retrieve al
0440+  1AD3 19 00         mov al, 0
0441+  1AD5 05 03         syscall sys_io        ; display AL
0442+  1AD7             
0443+  1AD7 E5            pop b
0444+  1AD8 E4            pop a
0445+  1AD9 09            ret
0446+  1ADA             
0447+  1ADA             ;-----------------------------------------------------------------------------
0448+  1ADA             ; INPUT 16BIT HEX INTEGER
0449+  1ADA             ; read 16bit integer into A
0450+  1ADA             ;-----------------------------------------------------------------------------
0451+  1ADA             scan_u16x:
0452+  1ADA F8 10 00      enter 16
0453+  1ADD D8            push b
0454+  1ADE DA            push d
0455+  1ADF             
0456+  1ADF FA F1 FF      lea d, [bp + -15]
0457+  1AE2 07 1D 19      call _gets        ; get number
0458+  1AE5             
0459+  1AE5 32            mov bl, [d]
0460+  1AE6 37            mov bh, bl
0461+  1AE7 33 01 00      mov bl, [d + 1]
0462+  1AEA 07 D4 18      call _atoi        ; convert to int in AL
0463+  1AED 23            mov ah, al        ; move to AH
0464+  1AEE             
0465+  1AEE 33 02 00      mov bl, [d + 2]
0466+  1AF1 37            mov bh, bl
0467+  1AF2 33 03 00      mov bl, [d + 3]
0468+  1AF5 07 D4 18      call _atoi        ; convert to int in AL
0469+  1AF8             
0470+  1AF8 E7            pop d
0471+  1AF9 E5            pop b
0472+  1AFA F9            leave
0473+  1AFB 09            ret
0474+  1AFC             
0475+  1AFC             ;-----------------------------------------------------------------------------
0476+  1AFC             ; PRINT 8bit HEX INTEGER
0477+  1AFC             ; integer value in reg bl
0478+  1AFC             ;-----------------------------------------------------------------------------
0479+  1AFC             print_u8x:
0480+  1AFC D7            push a
0481+  1AFD DD            push bl
0482+  1AFE             
0483+  1AFE 07 E4 18      call _itoa        ; convert bl to char in A
0484+  1B01 2F            mov bl, al        ; save al
0485+  1B02 19 00         mov al, 0
0486+  1B04 05 03         syscall sys_io        ; display AH
0487+  1B06 24            mov ah, bl        ; retrieve al
0488+  1B07 19 00         mov al, 0
0489+  1B09 05 03         syscall sys_io        ; display AL
0490+  1B0B             
0491+  1B0B EA            pop bl
0492+  1B0C E4            pop a
0493+  1B0D 09            ret
0494+  1B0E             
0495+  1B0E             ;-----------------------------------------------------------------------------
0496+  1B0E             ; print 8bit decimal unsigned number
0497+  1B0E             ; input number in AL
0498+  1B0E             ;-----------------------------------------------------------------------------
0499+  1B0E             print_u8d:
0500+  1B0E D7            push a
0501+  1B0F D8            push b
0502+  1B10             
0503+  1B10 22 00         mov ah, 0
0504+  1B12 26 64 00      mov b, 100
0505+  1B15 AE            div a, b
0506+  1B16 D8            push b      ; save remainder
0507+  1B17 B9 00         cmp al, 0
0508+  1B19 C6 23 1B      je skip100
0509+  1B1C 6A 30         add al, $30
0510+  1B1E 23            mov ah, al
0511+  1B1F 19 00         mov al, 0
0512+  1B21 05 03         syscall sys_io  ; print coeff
0513+  1B23             skip100:
0514+  1B23 E4            pop a
0515+  1B24 22 00         mov ah, 0
0516+  1B26 26 0A 00      mov b, 10
0517+  1B29 AE            div a, b
0518+  1B2A D8            push b      ; save remainder
0519+  1B2B B9 00         cmp al, 0
0520+  1B2D C6 37 1B      je skip10
0521+  1B30 6A 30         add al, $30
0522+  1B32 23            mov ah, al
0523+  1B33 19 00         mov al, 0
0524+  1B35 05 03         syscall sys_io  ; print coeff
0525+  1B37             skip10:
0526+  1B37 E4            pop a
0527+  1B38 1B            mov al, bl
0528+  1B39 6A 30         add al, $30
0529+  1B3B 23            mov ah, al
0530+  1B3C 19 00         mov al, 0
0531+  1B3E 05 03         syscall sys_io  ; print coeff
0532+  1B40 E5            pop b
0533+  1B41 E4            pop a
0534+  1B42 09            ret
0535+  1B43             
0536+  1B43             ;-----------------------------------------------------------------------------
0537+  1B43             ; INPUT 8BIT HEX INTEGER
0538+  1B43             ; read 8bit integer into AL
0539+  1B43             ;-----------------------------------------------------------------------------
0540+  1B43             scan_u8x:
0541+  1B43 F8 04 00      enter 4
0542+  1B46 D8            push b
0543+  1B47 DA            push d
0544+  1B48             
0545+  1B48 FA FD FF      lea d, [bp + -3]
0546+  1B4B 07 1D 19      call _gets        ; get number
0547+  1B4E             
0548+  1B4E 32            mov bl, [d]
0549+  1B4F 37            mov bh, bl
0550+  1B50 33 01 00      mov bl, [d + 1]
0551+  1B53 07 D4 18      call _atoi        ; convert to int in AL
0552+  1B56             
0553+  1B56 E7            pop d
0554+  1B57 E5            pop b
0555+  1B58 F9            leave
0556+  1B59 09            ret
0557+  1B5A             
0558+  1B5A             ;-----------------------------------------------------------------------------
0559+  1B5A             ; input decimal number
0560+  1B5A             ; result in A
0561+  1B5A             ; 655'\0'
0562+  1B5A             ; low--------high
0563+  1B5A             ;-----------------------------------------------------------------------------
0564+  1B5A             scan_u16d:
0565+  1B5A F8 08 00      enter 8
0566+  1B5D E2            push si
0567+  1B5E D8            push b
0568+  1B5F D9            push c
0569+  1B60 DA            push d
0570+  1B61 FA F9 FF      lea d, [bp +- 7]
0571+  1B64 07 1D 19      call _gets
0572+  1B67 07 76 18      call _strlen      ; get string length in C
0573+  1B6A 7E            dec c
0574+  1B6B FD 4E         mov si, d
0575+  1B6D 12            mov a, c
0576+  1B6E FD 99         shl a
0577+  1B70 3B AC 1B      mov d, table_power
0578+  1B73 59            add d, a
0579+  1B74 38 00 00      mov c, 0
0580+  1B77             mul_loop:
0581+  1B77 F6            lodsb      ; load ASCII to al
0582+  1B78 B9 00         cmp al, 0
0583+  1B7A C6 8D 1B      je mul_exit
0584+  1B7D 6F 30         sub al, $30    ; make into integer
0585+  1B7F 22 00         mov ah, 0
0586+  1B81 2A            mov b, [d]
0587+  1B82 AC            mul a, b      ; result in B since it fits in 16bits
0588+  1B83 11            mov a, b
0589+  1B84 28            mov b, c
0590+  1B85 54            add a, b
0591+  1B86 39            mov c, a
0592+  1B87 63 02 00      sub d, 2
0593+  1B8A 0A 77 1B      jmp mul_loop
0594+  1B8D             mul_exit:
0595+  1B8D 12            mov a, c
0596+  1B8E E7            pop d
0597+  1B8F E6            pop c
0598+  1B90 E5            pop b
0599+  1B91 EF            pop si
0600+  1B92 F9            leave
0601+  1B93 09            ret
0602+  1B94             
0603+  1B94 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1B98 34 35 36 37 
0603+  1B9C 38 39 41 42 
0603+  1BA0 43 44 45 46 
0604+  1BA4 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1BA8 1B 5B 48 00 
0605+  1BAC             
0606+  1BAC             table_power:
0607+  1BAC 01 00         .dw 1
0608+  1BAE 0A 00         .dw 10
0609+  1BB0 64 00         .dw 100
0610+  1BB2 E8 03         .dw 1000
0611+  1BB4 10 27         .dw 100003703   1BB6             ; --- END INLINE ASM SEGMENT
3704   1BB6             
3705   1BB6 F9            leave
3706   1BB7 09            ret
3707   1BB8             
3708   1BB8             include_ctype_lib:
3709   1BB8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3710   1BBB             
3711   1BBB             ; --- BEGIN INLINE ASM SEGMENT
3712   1BBB             .include "lib/asm/ctype.asm"
0001+  1BBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1BBB             ; ctype.s
0003+  1BBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1BBB             
0005+  1BBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  1BBB             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  1BBB             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  1BBB             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  1BBB             ;; characters are supported.
0010+  1BBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  1BBB             ;; _isalnum 
0012+  1BBB             ;; _isalpha 
0013+  1BBB             ;; islower 
0014+  1BBB             ;; isupper 
0015+  1BBB             ;; _isdigit 
0016+  1BBB             ;; isxdigit
0017+  1BBB             ;; iscntrl 
0018+  1BBB             ;; isgraph 
0019+  1BBB             ;; _isspace 
0020+  1BBB             ;; isblank 
0021+  1BBB             ;; isprint 
0022+  1BBB             ;; ispunct 
0023+  1BBB             ;; tolower 
0024+  1BBB             ;; toupper
0025+  1BBB             
0026+  1BBB             
0027+  1BBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  1BBB             ;; IS ALPHANUMERIC
0029+  1BBB             ;; sets ZF according with result
0030+  1BBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  1BBB             _isalnum:
0032+  1BBB 07 D8 1B    	call _isalpha
0033+  1BBE C6 C4 1B    	je _isalnum_exit
0034+  1BC1 07 C5 1B    	call _isdigit
0035+  1BC4             _isalnum_exit:
0036+  1BC4 09          	ret	
0037+  1BC5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  1BC5             ;; IS DIGIT
0039+  1BC5             ;; sets ZF according with result
0040+  1BC5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  1BC5             _isdigit:
0042+  1BC5 DB          	push al
0043+  1BC6 B9 30       	cmp al, '0'
0044+  1BC8 C8 D4 1B    	jlu _isdigit_false
0045+  1BCB B9 39       	cmp al, '9'
0046+  1BCD D1 D4 1B    	jgu _isdigit_false
0047+  1BD0 87 00       	and al, 0	; set ZF
0048+  1BD2 E8          	pop al
0049+  1BD3 09          	ret
0050+  1BD4             _isdigit_false:
0051+  1BD4 8B 01       	or al, 1	; clear ZF
0052+  1BD6 E8          	pop al
0053+  1BD7 09          	ret	
0054+  1BD8             	
0055+  1BD8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  1BD8             ;; IS ALPHA
0057+  1BD8             ;; sets ZF according with result
0058+  1BD8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  1BD8             _isalpha:
0060+  1BD8 DB          	push al
0061+  1BD9 B9 5F       	cmp al, '_'
0062+  1BDB C6 FB 1B    	je _isalpha_true
0063+  1BDE B9 2E       	cmp al, '.'
0064+  1BE0 C6 FB 1B    	je _isalpha_true
0065+  1BE3 B9 41       	cmp al, 'A'
0066+  1BE5 C8 F7 1B    	jlu _isalpha_false
0067+  1BE8 B9 7A       	cmp al, 'z'
0068+  1BEA D1 F7 1B    	jgu _isalpha_false
0069+  1BED B9 5A       	cmp al, 'Z'
0070+  1BEF D0 FB 1B    	jleu _isalpha_true
0071+  1BF2 B9 61       	cmp al, 'a'
0072+  1BF4 C9 FB 1B    	jgeu _isalpha_true
0073+  1BF7             _isalpha_false:
0074+  1BF7 8B 01       	or al, 1	; clear ZF
0075+  1BF9 E8          	pop al
0076+  1BFA 09          	ret
0077+  1BFB             _isalpha_true:
0078+  1BFB 87 00       	and al, 0	; set ZF
0079+  1BFD E8          	pop al
0080+  1BFE 09          	ret
0081+  1BFF             
0082+  1BFF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  1BFF             ;; IS PATH-ALPHA
0084+  1BFF             ;; sets ZF according with result
0085+  1BFF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  1BFF             ispath:
0087+  1BFF DB          	push al
0088+  1C00 07 C5 1B    	call _isdigit
0089+  1C03 C6 2D 1C    	je ispath_true
0090+  1C06 B9 5F       	cmp al, '_'
0091+  1C08 C6 2D 1C    	je ispath_true
0092+  1C0B B9 2F       	cmp al, '/'
0093+  1C0D C6 2D 1C    	je ispath_true
0094+  1C10 B9 2E       	cmp al, '.'
0095+  1C12 C6 2D 1C    	je ispath_true
0096+  1C15 B9 41       	cmp al, 'A'
0097+  1C17 C8 29 1C    	jlu ispath_false
0098+  1C1A B9 7A       	cmp al, 'z'
0099+  1C1C D1 29 1C    	jgu ispath_false
0100+  1C1F B9 5A       	cmp al, 'Z'
0101+  1C21 D0 2D 1C    	jleu ispath_true
0102+  1C24 B9 61       	cmp al, 'a'
0103+  1C26 C9 2D 1C    	jgeu ispath_true
0104+  1C29             ispath_false:
0105+  1C29 8B 01       	or al, 1	; clear ZF
0106+  1C2B E8          	pop al
0107+  1C2C 09          	ret
0108+  1C2D             ispath_true:
0109+  1C2D 87 00       	and al, 0	; set ZF
0110+  1C2F E8          	pop al
0111+  1C30 09          	ret
0112+  1C31             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  1C31             ;; IS SPACE
0114+  1C31             ;; sets ZF according with result
0115+  1C31             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  1C31             _isspace:
0117+  1C31 B9 20       	cmp al, $20		; ' '
0118+  1C33 C6 47 1C    	je _isspace_exit
0119+  1C36 B9 09       	cmp al, $09		; '\t'
0120+  1C38 C6 47 1C    	je _isspace_exit
0121+  1C3B B9 0A       	cmp al, $0A		; '\n'
0122+  1C3D C6 47 1C    	je _isspace_exit
0123+  1C40 B9 0D       	cmp al, $0D		; '\r'
0124+  1C42 C6 47 1C    	je _isspace_exit
0125+  1C45 B9 0B       	cmp al, $0B		; '\v'
0126+  1C47             _isspace_exit:
0127+  1C47 09          	ret	
0128+  1C48             
0129+  1C48             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1C48             ; TO LOWER
0131+  1C48             ; input in AL
0132+  1C48             ; output in AL
0133+  1C48             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  1C48             _to_lower:
0135+  1C48 B9 5A       	cmp al, 'Z'
0136+  1C4A D1 4F 1C    	jgu _to_lower_ret
0137+  1C4D 6A 20       	add al, $20				; convert to lower case
0138+  1C4F             _to_lower_ret:
0139+  1C4F 09          	ret
0140+  1C50             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  1C50             ; TO UPPER
0142+  1C50             ; input in AL
0143+  1C50             ; output in AL
0144+  1C50             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  1C50             _to_upper:
0146+  1C50 B9 61       	cmp al, 'a'
0147+  1C52 C8 57 1C    	jlu _to_upper_ret
0148+  1C55 6F 20       	sub al, $20			; convert to upper case
0149+  1C57             _to_upper_ret:
0150+  1C57 09          	ret
0151+  1C58             
3713   1C58             ; --- END INLINE ASM SEGMENT
3714   1C58             
3715   1C58 F9            leave
3716   1C59 09            ret
3717   1C5A             
3718   1C5A             is_space:
3719   1C5A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3720   1C5D             ; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
3721   1C5D FA 05 00      lea d, [bp + 5] ; $c
3722   1C60 32            mov bl, [d]
3723   1C61 A7 00         mov bh, 0
3724   1C63             ; --- START RELATIONAL
3725   1C63 D7            push a
3726   1C64 11            mov a, b
3727   1C65 26 20 00      mov b, $20
3728   1C68 B0            cmp a, b
3729   1C69 FD 71         seq ; ==
3730   1C6B E4            pop a
3731   1C6C             ; --- END RELATIONAL
3732   1C6C             ; --- START LOGICAL OR
3733   1C6C D7            push a
3734   1C6D 11            mov a, b
3735   1C6E FA 05 00      lea d, [bp + 5] ; $c
3736   1C71 32            mov bl, [d]
3737   1C72 A7 00         mov bh, 0
3738   1C74             ; --- START RELATIONAL
3739   1C74 D7            push a
3740   1C75 11            mov a, b
3741   1C76 26 09 00      mov b, $9
3742   1C79 B0            cmp a, b
3743   1C7A FD 71         seq ; ==
3744   1C7C E4            pop a
3745   1C7D             ; --- END RELATIONAL
3746   1C7D FD A8         sor a, b ; ||
3747   1C7F 11            mov a, b
3748   1C80 FA 05 00      lea d, [bp + 5] ; $c
3749   1C83 32            mov bl, [d]
3750   1C84 A7 00         mov bh, 0
3751   1C86             ; --- START RELATIONAL
3752   1C86 D7            push a
3753   1C87 11            mov a, b
3754   1C88 26 0A 00      mov b, $a
3755   1C8B B0            cmp a, b
3756   1C8C FD 71         seq ; ==
3757   1C8E E4            pop a
3758   1C8F             ; --- END RELATIONAL
3759   1C8F FD A8         sor a, b ; ||
3760   1C91 11            mov a, b
3761   1C92 FA 05 00      lea d, [bp + 5] ; $c
3762   1C95 32            mov bl, [d]
3763   1C96 A7 00         mov bh, 0
3764   1C98             ; --- START RELATIONAL
3765   1C98 D7            push a
3766   1C99 11            mov a, b
3767   1C9A 26 0D 00      mov b, $d
3768   1C9D B0            cmp a, b
3769   1C9E FD 71         seq ; ==
3770   1CA0 E4            pop a
3771   1CA1             ; --- END RELATIONAL
3772   1CA1 FD A8         sor a, b ; ||
3773   1CA3 E4            pop a
3774   1CA4             ; --- END LOGICAL OR
3775   1CA4 F9            leave
3776   1CA5 09            ret
3777   1CA6             
3778   1CA6             is_digit:
3779   1CA6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3780   1CA9             ; return c >= '0' && c <= '9'; 
3781   1CA9 FA 05 00      lea d, [bp + 5] ; $c
3782   1CAC 32            mov bl, [d]
3783   1CAD A7 00         mov bh, 0
3784   1CAF             ; --- START RELATIONAL
3785   1CAF D7            push a
3786   1CB0 11            mov a, b
3787   1CB1 26 30 00      mov b, $30
3788   1CB4 B0            cmp a, b
3789   1CB5 FD 80         sge ; >=
3790   1CB7 E4            pop a
3791   1CB8             ; --- END RELATIONAL
3792   1CB8             ; --- START LOGICAL AND
3793   1CB8 D7            push a
3794   1CB9 11            mov a, b
3795   1CBA FA 05 00      lea d, [bp + 5] ; $c
3796   1CBD 32            mov bl, [d]
3797   1CBE A7 00         mov bh, 0
3798   1CC0             ; --- START RELATIONAL
3799   1CC0 D7            push a
3800   1CC1 11            mov a, b
3801   1CC2 26 39 00      mov b, $39
3802   1CC5 B0            cmp a, b
3803   1CC6 FD 74         sle ; <= (signed)
3804   1CC8 E4            pop a
3805   1CC9             ; --- END RELATIONAL
3806   1CC9 FD A7         sand a, b
3807   1CCB E4            pop a
3808   1CCC             ; --- END LOGICAL AND
3809   1CCC F9            leave
3810   1CCD 09            ret
3811   1CCE             
3812   1CCE             is_alpha:
3813   1CCE F8 00 00      enter 0 ; (push bp; mov bp, sp)
3814   1CD1             ; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
3815   1CD1 FA 05 00      lea d, [bp + 5] ; $c
3816   1CD4 32            mov bl, [d]
3817   1CD5 A7 00         mov bh, 0
3818   1CD7             ; --- START RELATIONAL
3819   1CD7 D7            push a
3820   1CD8 11            mov a, b
3821   1CD9 26 61 00      mov b, $61
3822   1CDC B0            cmp a, b
3823   1CDD FD 80         sge ; >=
3824   1CDF E4            pop a
3825   1CE0             ; --- END RELATIONAL
3826   1CE0             ; --- START LOGICAL AND
3827   1CE0 D7            push a
3828   1CE1 11            mov a, b
3829   1CE2 FA 05 00      lea d, [bp + 5] ; $c
3830   1CE5 32            mov bl, [d]
3831   1CE6 A7 00         mov bh, 0
3832   1CE8             ; --- START RELATIONAL
3833   1CE8 D7            push a
3834   1CE9 11            mov a, b
3835   1CEA 26 7A 00      mov b, $7a
3836   1CED B0            cmp a, b
3837   1CEE FD 74         sle ; <= (signed)
3838   1CF0 E4            pop a
3839   1CF1             ; --- END RELATIONAL
3840   1CF1 FD A7         sand a, b
3841   1CF3 E4            pop a
3842   1CF4             ; --- END LOGICAL AND
3843   1CF4             ; --- START LOGICAL OR
3844   1CF4 D7            push a
3845   1CF5 11            mov a, b
3846   1CF6 FA 05 00      lea d, [bp + 5] ; $c
3847   1CF9 32            mov bl, [d]
3848   1CFA A7 00         mov bh, 0
3849   1CFC             ; --- START RELATIONAL
3850   1CFC D7            push a
3851   1CFD 11            mov a, b
3852   1CFE 26 41 00      mov b, $41
3853   1D01 B0            cmp a, b
3854   1D02 FD 80         sge ; >=
3855   1D04 E4            pop a
3856   1D05             ; --- END RELATIONAL
3857   1D05             ; --- START LOGICAL AND
3858   1D05 D7            push a
3859   1D06 11            mov a, b
3860   1D07 FA 05 00      lea d, [bp + 5] ; $c
3861   1D0A 32            mov bl, [d]
3862   1D0B A7 00         mov bh, 0
3863   1D0D             ; --- START RELATIONAL
3864   1D0D D7            push a
3865   1D0E 11            mov a, b
3866   1D0F 26 5A 00      mov b, $5a
3867   1D12 B0            cmp a, b
3868   1D13 FD 74         sle ; <= (signed)
3869   1D15 E4            pop a
3870   1D16             ; --- END RELATIONAL
3871   1D16 FD A7         sand a, b
3872   1D18 E4            pop a
3873   1D19             ; --- END LOGICAL AND
3874   1D19 FD A8         sor a, b ; ||
3875   1D1B 11            mov a, b
3876   1D1C FA 05 00      lea d, [bp + 5] ; $c
3877   1D1F 32            mov bl, [d]
3878   1D20 A7 00         mov bh, 0
3879   1D22             ; --- START RELATIONAL
3880   1D22 D7            push a
3881   1D23 11            mov a, b
3882   1D24 26 5F 00      mov b, $5f
3883   1D27 B0            cmp a, b
3884   1D28 FD 71         seq ; ==
3885   1D2A E4            pop a
3886   1D2B             ; --- END RELATIONAL
3887   1D2B FD A8         sor a, b ; ||
3888   1D2D E4            pop a
3889   1D2E             ; --- END LOGICAL OR
3890   1D2E F9            leave
3891   1D2F 09            ret
3892   1D30             
3893   1D30             tolower:
3894   1D30 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3895   1D33             ; if (ch >= 'A' && ch <= 'Z')  
3896   1D33             _if56_cond:
3897   1D33 FA 05 00      lea d, [bp + 5] ; $ch
3898   1D36 32            mov bl, [d]
3899   1D37 A7 00         mov bh, 0
3900   1D39             ; --- START RELATIONAL
3901   1D39 D7            push a
3902   1D3A 11            mov a, b
3903   1D3B 26 41 00      mov b, $41
3904   1D3E B0            cmp a, b
3905   1D3F FD 80         sge ; >=
3906   1D41 E4            pop a
3907   1D42             ; --- END RELATIONAL
3908   1D42             ; --- START LOGICAL AND
3909   1D42 D7            push a
3910   1D43 11            mov a, b
3911   1D44 FA 05 00      lea d, [bp + 5] ; $ch
3912   1D47 32            mov bl, [d]
3913   1D48 A7 00         mov bh, 0
3914   1D4A             ; --- START RELATIONAL
3915   1D4A D7            push a
3916   1D4B 11            mov a, b
3917   1D4C 26 5A 00      mov b, $5a
3918   1D4F B0            cmp a, b
3919   1D50 FD 74         sle ; <= (signed)
3920   1D52 E4            pop a
3921   1D53             ; --- END RELATIONAL
3922   1D53 FD A7         sand a, b
3923   1D55 E4            pop a
3924   1D56             ; --- END LOGICAL AND
3925   1D56 C0 00 00      cmp b, 0
3926   1D59 C6 74 1D      je _if56_else
3927   1D5C             _if56_true:
3928   1D5C             ; return ch - 'A' + 'a'; 
3929   1D5C FA 05 00      lea d, [bp + 5] ; $ch
3930   1D5F 32            mov bl, [d]
3931   1D60 A7 00         mov bh, 0
3932   1D62             ; --- START TERMS
3933   1D62 D7            push a
3934   1D63 11            mov a, b
3935   1D64 26 41 00      mov b, $41
3936   1D67 60            sub a, b
3937   1D68 27            mov b, a
3938   1D69 11            mov a, b
3939   1D6A 26 61 00      mov b, $61
3940   1D6D 56            add b, a
3941   1D6E E4            pop a
3942   1D6F             ; --- END TERMS
3943   1D6F F9            leave
3944   1D70 09            ret
3945   1D71 0A 7C 1D      jmp _if56_exit
3946   1D74             _if56_else:
3947   1D74             ; return ch; 
3948   1D74 FA 05 00      lea d, [bp + 5] ; $ch
3949   1D77 32            mov bl, [d]
3950   1D78 A7 00         mov bh, 0
3951   1D7A F9            leave
3952   1D7B 09            ret
3953   1D7C             _if56_exit:
3954   1D7C F9            leave
3955   1D7D 09            ret
3956   1D7E             
3957   1D7E             toupper:
3958   1D7E F8 00 00      enter 0 ; (push bp; mov bp, sp)
3959   1D81             ; if (ch >= 'a' && ch <= 'z')  
3960   1D81             _if57_cond:
3961   1D81 FA 05 00      lea d, [bp + 5] ; $ch
3962   1D84 32            mov bl, [d]
3963   1D85 A7 00         mov bh, 0
3964   1D87             ; --- START RELATIONAL
3965   1D87 D7            push a
3966   1D88 11            mov a, b
3967   1D89 26 61 00      mov b, $61
3968   1D8C B0            cmp a, b
3969   1D8D FD 80         sge ; >=
3970   1D8F E4            pop a
3971   1D90             ; --- END RELATIONAL
3972   1D90             ; --- START LOGICAL AND
3973   1D90 D7            push a
3974   1D91 11            mov a, b
3975   1D92 FA 05 00      lea d, [bp + 5] ; $ch
3976   1D95 32            mov bl, [d]
3977   1D96 A7 00         mov bh, 0
3978   1D98             ; --- START RELATIONAL
3979   1D98 D7            push a
3980   1D99 11            mov a, b
3981   1D9A 26 7A 00      mov b, $7a
3982   1D9D B0            cmp a, b
3983   1D9E FD 74         sle ; <= (signed)
3984   1DA0 E4            pop a
3985   1DA1             ; --- END RELATIONAL
3986   1DA1 FD A7         sand a, b
3987   1DA3 E4            pop a
3988   1DA4             ; --- END LOGICAL AND
3989   1DA4 C0 00 00      cmp b, 0
3990   1DA7 C6 C2 1D      je _if57_else
3991   1DAA             _if57_true:
3992   1DAA             ; return ch - 'a' + 'A'; 
3993   1DAA FA 05 00      lea d, [bp + 5] ; $ch
3994   1DAD 32            mov bl, [d]
3995   1DAE A7 00         mov bh, 0
3996   1DB0             ; --- START TERMS
3997   1DB0 D7            push a
3998   1DB1 11            mov a, b
3999   1DB2 26 61 00      mov b, $61
4000   1DB5 60            sub a, b
4001   1DB6 27            mov b, a
4002   1DB7 11            mov a, b
4003   1DB8 26 41 00      mov b, $41
4004   1DBB 56            add b, a
4005   1DBC E4            pop a
4006   1DBD             ; --- END TERMS
4007   1DBD F9            leave
4008   1DBE 09            ret
4009   1DBF 0A CA 1D      jmp _if57_exit
4010   1DC2             _if57_else:
4011   1DC2             ; return ch; 
4012   1DC2 FA 05 00      lea d, [bp + 5] ; $ch
4013   1DC5 32            mov bl, [d]
4014   1DC6 A7 00         mov bh, 0
4015   1DC8 F9            leave
4016   1DC9 09            ret
4017   1DCA             _if57_exit:
4018   1DCA F9            leave
4019   1DCB 09            ret
4020   1DCC             
4021   1DCC             is_delimiter:
4022   1DCC F8 00 00      enter 0 ; (push bp; mov bp, sp)
4023   1DCF             ; if( 
4024   1DCF             _if58_cond:
4025   1DCF FA 05 00      lea d, [bp + 5] ; $c
4026   1DD2 32            mov bl, [d]
4027   1DD3 A7 00         mov bh, 0
4028   1DD5             ; --- START RELATIONAL
4029   1DD5 D7            push a
4030   1DD6 11            mov a, b
4031   1DD7 26 40 00      mov b, $40
4032   1DDA B0            cmp a, b
4033   1DDB FD 71         seq ; ==
4034   1DDD E4            pop a
4035   1DDE             ; --- END RELATIONAL
4036   1DDE             ; --- START LOGICAL OR
4037   1DDE D7            push a
4038   1DDF 11            mov a, b
4039   1DE0 FA 05 00      lea d, [bp + 5] ; $c
4040   1DE3 32            mov bl, [d]
4041   1DE4 A7 00         mov bh, 0
4042   1DE6             ; --- START RELATIONAL
4043   1DE6 D7            push a
4044   1DE7 11            mov a, b
4045   1DE8 26 23 00      mov b, $23
4046   1DEB B0            cmp a, b
4047   1DEC FD 71         seq ; ==
4048   1DEE E4            pop a
4049   1DEF             ; --- END RELATIONAL
4050   1DEF FD A8         sor a, b ; ||
4051   1DF1 11            mov a, b
4052   1DF2 FA 05 00      lea d, [bp + 5] ; $c
4053   1DF5 32            mov bl, [d]
4054   1DF6 A7 00         mov bh, 0
4055   1DF8             ; --- START RELATIONAL
4056   1DF8 D7            push a
4057   1DF9 11            mov a, b
4058   1DFA 26 24 00      mov b, $24
4059   1DFD B0            cmp a, b
4060   1DFE FD 71         seq ; ==
4061   1E00 E4            pop a
4062   1E01             ; --- END RELATIONAL
4063   1E01 FD A8         sor a, b ; ||
4064   1E03 11            mov a, b
4065   1E04 FA 05 00      lea d, [bp + 5] ; $c
4066   1E07 32            mov bl, [d]
4067   1E08 A7 00         mov bh, 0
4068   1E0A             ; --- START RELATIONAL
4069   1E0A D7            push a
4070   1E0B 11            mov a, b
4071   1E0C 26 2B 00      mov b, $2b
4072   1E0F B0            cmp a, b
4073   1E10 FD 71         seq ; ==
4074   1E12 E4            pop a
4075   1E13             ; --- END RELATIONAL
4076   1E13 FD A8         sor a, b ; ||
4077   1E15 11            mov a, b
4078   1E16 FA 05 00      lea d, [bp + 5] ; $c
4079   1E19 32            mov bl, [d]
4080   1E1A A7 00         mov bh, 0
4081   1E1C             ; --- START RELATIONAL
4082   1E1C D7            push a
4083   1E1D 11            mov a, b
4084   1E1E 26 2D 00      mov b, $2d
4085   1E21 B0            cmp a, b
4086   1E22 FD 71         seq ; ==
4087   1E24 E4            pop a
4088   1E25             ; --- END RELATIONAL
4089   1E25 FD A8         sor a, b ; ||
4090   1E27 11            mov a, b
4091   1E28 FA 05 00      lea d, [bp + 5] ; $c
4092   1E2B 32            mov bl, [d]
4093   1E2C A7 00         mov bh, 0
4094   1E2E             ; --- START RELATIONAL
4095   1E2E D7            push a
4096   1E2F 11            mov a, b
4097   1E30 26 2A 00      mov b, $2a
4098   1E33 B0            cmp a, b
4099   1E34 FD 71         seq ; ==
4100   1E36 E4            pop a
4101   1E37             ; --- END RELATIONAL
4102   1E37 FD A8         sor a, b ; ||
4103   1E39 11            mov a, b
4104   1E3A FA 05 00      lea d, [bp + 5] ; $c
4105   1E3D 32            mov bl, [d]
4106   1E3E A7 00         mov bh, 0
4107   1E40             ; --- START RELATIONAL
4108   1E40 D7            push a
4109   1E41 11            mov a, b
4110   1E42 26 2F 00      mov b, $2f
4111   1E45 B0            cmp a, b
4112   1E46 FD 71         seq ; ==
4113   1E48 E4            pop a
4114   1E49             ; --- END RELATIONAL
4115   1E49 FD A8         sor a, b ; ||
4116   1E4B 11            mov a, b
4117   1E4C FA 05 00      lea d, [bp + 5] ; $c
4118   1E4F 32            mov bl, [d]
4119   1E50 A7 00         mov bh, 0
4120   1E52             ; --- START RELATIONAL
4121   1E52 D7            push a
4122   1E53 11            mov a, b
4123   1E54 26 25 00      mov b, $25
4124   1E57 B0            cmp a, b
4125   1E58 FD 71         seq ; ==
4126   1E5A E4            pop a
4127   1E5B             ; --- END RELATIONAL
4128   1E5B FD A8         sor a, b ; ||
4129   1E5D 11            mov a, b
4130   1E5E FA 05 00      lea d, [bp + 5] ; $c
4131   1E61 32            mov bl, [d]
4132   1E62 A7 00         mov bh, 0
4133   1E64             ; --- START RELATIONAL
4134   1E64 D7            push a
4135   1E65 11            mov a, b
4136   1E66 26 5B 00      mov b, $5b
4137   1E69 B0            cmp a, b
4138   1E6A FD 71         seq ; ==
4139   1E6C E4            pop a
4140   1E6D             ; --- END RELATIONAL
4141   1E6D FD A8         sor a, b ; ||
4142   1E6F 11            mov a, b
4143   1E70 FA 05 00      lea d, [bp + 5] ; $c
4144   1E73 32            mov bl, [d]
4145   1E74 A7 00         mov bh, 0
4146   1E76             ; --- START RELATIONAL
4147   1E76 D7            push a
4148   1E77 11            mov a, b
4149   1E78 26 5D 00      mov b, $5d
4150   1E7B B0            cmp a, b
4151   1E7C FD 71         seq ; ==
4152   1E7E E4            pop a
4153   1E7F             ; --- END RELATIONAL
4154   1E7F FD A8         sor a, b ; ||
4155   1E81 11            mov a, b
4156   1E82 FA 05 00      lea d, [bp + 5] ; $c
4157   1E85 32            mov bl, [d]
4158   1E86 A7 00         mov bh, 0
4159   1E88             ; --- START RELATIONAL
4160   1E88 D7            push a
4161   1E89 11            mov a, b
4162   1E8A 26 28 00      mov b, $28
4163   1E8D B0            cmp a, b
4164   1E8E FD 71         seq ; ==
4165   1E90 E4            pop a
4166   1E91             ; --- END RELATIONAL
4167   1E91 FD A8         sor a, b ; ||
4168   1E93 11            mov a, b
4169   1E94 FA 05 00      lea d, [bp + 5] ; $c
4170   1E97 32            mov bl, [d]
4171   1E98 A7 00         mov bh, 0
4172   1E9A             ; --- START RELATIONAL
4173   1E9A D7            push a
4174   1E9B 11            mov a, b
4175   1E9C 26 29 00      mov b, $29
4176   1E9F B0            cmp a, b
4177   1EA0 FD 71         seq ; ==
4178   1EA2 E4            pop a
4179   1EA3             ; --- END RELATIONAL
4180   1EA3 FD A8         sor a, b ; ||
4181   1EA5 11            mov a, b
4182   1EA6 FA 05 00      lea d, [bp + 5] ; $c
4183   1EA9 32            mov bl, [d]
4184   1EAA A7 00         mov bh, 0
4185   1EAC             ; --- START RELATIONAL
4186   1EAC D7            push a
4187   1EAD 11            mov a, b
4188   1EAE 26 7B 00      mov b, $7b
4189   1EB1 B0            cmp a, b
4190   1EB2 FD 71         seq ; ==
4191   1EB4 E4            pop a
4192   1EB5             ; --- END RELATIONAL
4193   1EB5 FD A8         sor a, b ; ||
4194   1EB7 11            mov a, b
4195   1EB8 FA 05 00      lea d, [bp + 5] ; $c
4196   1EBB 32            mov bl, [d]
4197   1EBC A7 00         mov bh, 0
4198   1EBE             ; --- START RELATIONAL
4199   1EBE D7            push a
4200   1EBF 11            mov a, b
4201   1EC0 26 7D 00      mov b, $7d
4202   1EC3 B0            cmp a, b
4203   1EC4 FD 71         seq ; ==
4204   1EC6 E4            pop a
4205   1EC7             ; --- END RELATIONAL
4206   1EC7 FD A8         sor a, b ; ||
4207   1EC9 11            mov a, b
4208   1ECA FA 05 00      lea d, [bp + 5] ; $c
4209   1ECD 32            mov bl, [d]
4210   1ECE A7 00         mov bh, 0
4211   1ED0             ; --- START RELATIONAL
4212   1ED0 D7            push a
4213   1ED1 11            mov a, b
4214   1ED2 26 3A 00      mov b, $3a
4215   1ED5 B0            cmp a, b
4216   1ED6 FD 71         seq ; ==
4217   1ED8 E4            pop a
4218   1ED9             ; --- END RELATIONAL
4219   1ED9 FD A8         sor a, b ; ||
4220   1EDB 11            mov a, b
4221   1EDC FA 05 00      lea d, [bp + 5] ; $c
4222   1EDF 32            mov bl, [d]
4223   1EE0 A7 00         mov bh, 0
4224   1EE2             ; --- START RELATIONAL
4225   1EE2 D7            push a
4226   1EE3 11            mov a, b
4227   1EE4 26 3B 00      mov b, $3b
4228   1EE7 B0            cmp a, b
4229   1EE8 FD 71         seq ; ==
4230   1EEA E4            pop a
4231   1EEB             ; --- END RELATIONAL
4232   1EEB FD A8         sor a, b ; ||
4233   1EED 11            mov a, b
4234   1EEE FA 05 00      lea d, [bp + 5] ; $c
4235   1EF1 32            mov bl, [d]
4236   1EF2 A7 00         mov bh, 0
4237   1EF4             ; --- START RELATIONAL
4238   1EF4 D7            push a
4239   1EF5 11            mov a, b
4240   1EF6 26 3C 00      mov b, $3c
4241   1EF9 B0            cmp a, b
4242   1EFA FD 71         seq ; ==
4243   1EFC E4            pop a
4244   1EFD             ; --- END RELATIONAL
4245   1EFD FD A8         sor a, b ; ||
4246   1EFF 11            mov a, b
4247   1F00 FA 05 00      lea d, [bp + 5] ; $c
4248   1F03 32            mov bl, [d]
4249   1F04 A7 00         mov bh, 0
4250   1F06             ; --- START RELATIONAL
4251   1F06 D7            push a
4252   1F07 11            mov a, b
4253   1F08 26 3E 00      mov b, $3e
4254   1F0B B0            cmp a, b
4255   1F0C FD 71         seq ; ==
4256   1F0E E4            pop a
4257   1F0F             ; --- END RELATIONAL
4258   1F0F FD A8         sor a, b ; ||
4259   1F11 11            mov a, b
4260   1F12 FA 05 00      lea d, [bp + 5] ; $c
4261   1F15 32            mov bl, [d]
4262   1F16 A7 00         mov bh, 0
4263   1F18             ; --- START RELATIONAL
4264   1F18 D7            push a
4265   1F19 11            mov a, b
4266   1F1A 26 3D 00      mov b, $3d
4267   1F1D B0            cmp a, b
4268   1F1E FD 71         seq ; ==
4269   1F20 E4            pop a
4270   1F21             ; --- END RELATIONAL
4271   1F21 FD A8         sor a, b ; ||
4272   1F23 11            mov a, b
4273   1F24 FA 05 00      lea d, [bp + 5] ; $c
4274   1F27 32            mov bl, [d]
4275   1F28 A7 00         mov bh, 0
4276   1F2A             ; --- START RELATIONAL
4277   1F2A D7            push a
4278   1F2B 11            mov a, b
4279   1F2C 26 21 00      mov b, $21
4280   1F2F B0            cmp a, b
4281   1F30 FD 71         seq ; ==
4282   1F32 E4            pop a
4283   1F33             ; --- END RELATIONAL
4284   1F33 FD A8         sor a, b ; ||
4285   1F35 11            mov a, b
4286   1F36 FA 05 00      lea d, [bp + 5] ; $c
4287   1F39 32            mov bl, [d]
4288   1F3A A7 00         mov bh, 0
4289   1F3C             ; --- START RELATIONAL
4290   1F3C D7            push a
4291   1F3D 11            mov a, b
4292   1F3E 26 5E 00      mov b, $5e
4293   1F41 B0            cmp a, b
4294   1F42 FD 71         seq ; ==
4295   1F44 E4            pop a
4296   1F45             ; --- END RELATIONAL
4297   1F45 FD A8         sor a, b ; ||
4298   1F47 11            mov a, b
4299   1F48 FA 05 00      lea d, [bp + 5] ; $c
4300   1F4B 32            mov bl, [d]
4301   1F4C A7 00         mov bh, 0
4302   1F4E             ; --- START RELATIONAL
4303   1F4E D7            push a
4304   1F4F 11            mov a, b
4305   1F50 26 26 00      mov b, $26
4306   1F53 B0            cmp a, b
4307   1F54 FD 71         seq ; ==
4308   1F56 E4            pop a
4309   1F57             ; --- END RELATIONAL
4310   1F57 FD A8         sor a, b ; ||
4311   1F59 11            mov a, b
4312   1F5A FA 05 00      lea d, [bp + 5] ; $c
4313   1F5D 32            mov bl, [d]
4314   1F5E A7 00         mov bh, 0
4315   1F60             ; --- START RELATIONAL
4316   1F60 D7            push a
4317   1F61 11            mov a, b
4318   1F62 26 7C 00      mov b, $7c
4319   1F65 B0            cmp a, b
4320   1F66 FD 71         seq ; ==
4321   1F68 E4            pop a
4322   1F69             ; --- END RELATIONAL
4323   1F69 FD A8         sor a, b ; ||
4324   1F6B 11            mov a, b
4325   1F6C FA 05 00      lea d, [bp + 5] ; $c
4326   1F6F 32            mov bl, [d]
4327   1F70 A7 00         mov bh, 0
4328   1F72             ; --- START RELATIONAL
4329   1F72 D7            push a
4330   1F73 11            mov a, b
4331   1F74 26 7E 00      mov b, $7e
4332   1F77 B0            cmp a, b
4333   1F78 FD 71         seq ; ==
4334   1F7A E4            pop a
4335   1F7B             ; --- END RELATIONAL
4336   1F7B FD A8         sor a, b ; ||
4337   1F7D 11            mov a, b
4338   1F7E FA 05 00      lea d, [bp + 5] ; $c
4339   1F81 32            mov bl, [d]
4340   1F82 A7 00         mov bh, 0
4341   1F84             ; --- START RELATIONAL
4342   1F84 D7            push a
4343   1F85 11            mov a, b
4344   1F86 26 2E 00      mov b, $2e
4345   1F89 B0            cmp a, b
4346   1F8A FD 71         seq ; ==
4347   1F8C E4            pop a
4348   1F8D             ; --- END RELATIONAL
4349   1F8D FD A8         sor a, b ; ||
4350   1F8F E4            pop a
4351   1F90             ; --- END LOGICAL OR
4352   1F90 C0 00 00      cmp b, 0
4353   1F93 C6 9E 1F      je _if58_else
4354   1F96             _if58_true:
4355   1F96             ; return 1; 
4356   1F96 26 01 00      mov b, $1
4357   1F99 F9            leave
4358   1F9A 09            ret
4359   1F9B 0A A3 1F      jmp _if58_exit
4360   1F9E             _if58_else:
4361   1F9E             ; return 0; 
4362   1F9E 26 00 00      mov b, $0
4363   1FA1 F9            leave
4364   1FA2 09            ret
4365   1FA3             _if58_exit:
4366   1FA3 F9            leave
4367   1FA4 09            ret
4368   1FA5             
4369   1FA5             TO_FIXED:
4370   1FA5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4371   1FA8             ; return x * 10; 
4372   1FA8 FA 05 00      lea d, [bp + 5] ; $x
4373   1FAB 2A            mov b, [d]
4374   1FAC             ; --- START FACTORS
4375   1FAC D7            push a
4376   1FAD 11            mov a, b
4377   1FAE 26 0A 00      mov b, $a
4378   1FB1 AC            mul a, b ; *
4379   1FB2 11            mov a, b
4380   1FB3 27            mov b, a
4381   1FB4 E4            pop a
4382   1FB5             ; --- END FACTORS
4383   1FB5 F9            leave
4384   1FB6 09            ret
4385   1FB7             
4386   1FB7             FROM_FIXED:
4387   1FB7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4388   1FBA             ; return x / 10; 
4389   1FBA FA 05 00      lea d, [bp + 5] ; $x
4390   1FBD 2A            mov b, [d]
4391   1FBE             ; --- START FACTORS
4392   1FBE D7            push a
4393   1FBF 11            mov a, b
4394   1FC0 26 0A 00      mov b, $a
4395   1FC3 AE            div a, b
4396   1FC4 27            mov b, a
4397   1FC5 E4            pop a
4398   1FC6             ; --- END FACTORS
4399   1FC6 F9            leave
4400   1FC7 09            ret
4401   1FC8             
4402   1FC8             TO_FIXED00:
4403   1FC8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4404   1FCB             ; return x * 100; 
4405   1FCB FA 05 00      lea d, [bp + 5] ; $x
4406   1FCE 2A            mov b, [d]
4407   1FCF             ; --- START FACTORS
4408   1FCF D7            push a
4409   1FD0 11            mov a, b
4410   1FD1 26 64 00      mov b, $64
4411   1FD4 AC            mul a, b ; *
4412   1FD5 11            mov a, b
4413   1FD6 27            mov b, a
4414   1FD7 E4            pop a
4415   1FD8             ; --- END FACTORS
4416   1FD8 F9            leave
4417   1FD9 09            ret
4418   1FDA             
4419   1FDA             FROM_FIXED00:
4420   1FDA F8 00 00      enter 0 ; (push bp; mov bp, sp)
4421   1FDD             ; return x / 100; 
4422   1FDD FA 05 00      lea d, [bp + 5] ; $x
4423   1FE0 2A            mov b, [d]
4424   1FE1             ; --- START FACTORS
4425   1FE1 D7            push a
4426   1FE2 11            mov a, b
4427   1FE3 26 64 00      mov b, $64
4428   1FE6 AE            div a, b
4429   1FE7 27            mov b, a
4430   1FE8 E4            pop a
4431   1FE9             ; --- END FACTORS
4432   1FE9 F9            leave
4433   1FEA 09            ret
4434   1FEB             
4435   1FEB             get_rand:
4436   1FEB F8 00 00      enter 0 ; (push bp; mov bp, sp)
4437   1FEE             ; unsigned int        r = rand(); 
4438   1FEE 52 02 00      sub sp, 2
4439   1FF1             ; --- START LOCAL VAR INITIALIZATION
4440   1FF1 FA FF FF      lea d, [bp + -1] ; $r
4441   1FF4 DA            push d
4442   1FF5 07 4A 07      call rand
4443   1FF8 E7            pop d
4444   1FF9 FD 43         mov [d], b
4445   1FFB             ; --- END LOCAL VAR INITIALIZATION
4446   1FFB             ; r = (r >> 8) | (r << 8); 
4447   1FFB FA FF FF      lea d, [bp + -1] ; $r
4448   1FFE DA            push d
4449   1FFF FA FF FF      lea d, [bp + -1] ; $r
4450   2002 2A            mov b, [d]
4451   2003             ; --- START SHIFT
4452   2003 D7            push a
4453   2004 11            mov a, b
4454   2005 26 08 00      mov b, $8
4455   2008 FD 39         mov c, b
4456   200A A1            shr a, cl
4457   200B 27            mov b, a
4458   200C E4            pop a
4459   200D             ; --- END SHIFT
4460   200D D7            push a
4461   200E 11            mov a, b
4462   200F FA FF FF      lea d, [bp + -1] ; $r
4463   2012 2A            mov b, [d]
4464   2013             ; --- START SHIFT
4465   2013 D7            push a
4466   2014 11            mov a, b
4467   2015 26 08 00      mov b, $8
4468   2018 FD 39         mov c, b
4469   201A 9D            shl a, cl
4470   201B 27            mov b, a
4471   201C E4            pop a
4472   201D             ; --- END SHIFT
4473   201D FD 70         or b, a ; |
4474   201F E4            pop a
4475   2020 E7            pop d
4476   2021 FD 43         mov [d], b
4477   2023             ; return ((r % spread) + 1); 
4478   2023 FA FF FF      lea d, [bp + -1] ; $r
4479   2026 2A            mov b, [d]
4480   2027             ; --- START FACTORS
4481   2027 D7            push a
4482   2028 11            mov a, b
4483   2029 FA 05 00      lea d, [bp + 5] ; $spread
4484   202C 2A            mov b, [d]
4485   202D AE            div a, b ; 
4486   202E 11            mov a, b
4487   202F 27            mov b, a
4488   2030 E4            pop a
4489   2031             ; --- END FACTORS
4490   2031             ; --- START TERMS
4491   2031 D7            push a
4492   2032 11            mov a, b
4493   2033 26 01 00      mov b, $1
4494   2036 56            add b, a
4495   2037 E4            pop a
4496   2038             ; --- END TERMS
4497   2038 F9            leave
4498   2039 09            ret
4499   203A             
4500   203A             rand8:
4501   203A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4502   203D             ; return (get_rand(8)); 
4503   203D 26 08 00      mov b, $8
4504   2040 FD AB         swp b
4505   2042 D8            push b
4506   2043 07 EB 1F      call get_rand
4507   2046 51 02 00      add sp, 2
4508   2049 F9            leave
4509   204A 09            ret
4510   204B             
4511   204B             input:
4512   204B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4513   204E             ; int c; 
4514   204E 52 02 00      sub sp, 2
4515   2051             ; while((c = getchar()) != '\n') { 
4516   2051             _while59_cond:
4517   2051 FA FF FF      lea d, [bp + -1] ; $c
4518   2054 DA            push d
4519   2055 07 92 17      call getchar
4520   2058 E7            pop d
4521   2059 FD 43         mov [d], b
4522   205B             ; --- START RELATIONAL
4523   205B D7            push a
4524   205C 11            mov a, b
4525   205D 26 0A 00      mov b, $a
4526   2060 B0            cmp a, b
4527   2061 FD 72         sneq ; !=
4528   2063 E4            pop a
4529   2064             ; --- END RELATIONAL
4530   2064 C0 00 00      cmp b, 0
4531   2067 C6 C4 20      je _while59_exit
4532   206A             _while59_block:
4533   206A             ; if (c ==   -1  ) 
4534   206A             _if60_cond:
4535   206A FA FF FF      lea d, [bp + -1] ; $c
4536   206D 2A            mov b, [d]
4537   206E             ; --- START RELATIONAL
4538   206E D7            push a
4539   206F 11            mov a, b
4540   2070 26 01 00      mov b, $1
4541   2073 FD 97         neg b
4542   2075 B0            cmp a, b
4543   2076 FD 71         seq ; ==
4544   2078 E4            pop a
4545   2079             ; --- END RELATIONAL
4546   2079 C0 00 00      cmp b, 0
4547   207C C6 85 20      je _if60_exit
4548   207F             _if60_true:
4549   207F             ; exit(); 
4550   207F 07 D7 05      call exit
4551   2082 0A 85 20      jmp _if60_exit
4552   2085             _if60_exit:
4553   2085             ; if (l > 1) { 
4554   2085             _if61_cond:
4555   2085 FA 07 00      lea d, [bp + 7] ; $l
4556   2088 32            mov bl, [d]
4557   2089 A7 00         mov bh, 0
4558   208B             ; --- START RELATIONAL
4559   208B D7            push a
4560   208C 11            mov a, b
4561   208D 26 01 00      mov b, $1
4562   2090 B0            cmp a, b
4563   2091 FD 81         sgu ; > (unsigned)
4564   2093 E4            pop a
4565   2094             ; --- END RELATIONAL
4566   2094 C0 00 00      cmp b, 0
4567   2097 C6 C1 20      je _if61_exit
4568   209A             _if61_true:
4569   209A             ; *b++ = c; 
4570   209A FA 05 00      lea d, [bp + 5] ; $b
4571   209D 2A            mov b, [d]
4572   209E FD 77         inc b
4573   20A0 FA 05 00      lea d, [bp + 5] ; $b
4574   20A3 FD 43         mov [d], b
4575   20A5 FD 7D         dec b
4576   20A7 D8            push b
4577   20A8 FA FF FF      lea d, [bp + -1] ; $c
4578   20AB 2A            mov b, [d]
4579   20AC E7            pop d
4580   20AD FD 3E         mov [d], bl
4581   20AF             ; l--; 
4582   20AF FA 07 00      lea d, [bp + 7] ; $l
4583   20B2 32            mov bl, [d]
4584   20B3 A7 00         mov bh, 0
4585   20B5 FD 7D         dec b
4586   20B7 FA 07 00      lea d, [bp + 7] ; $l
4587   20BA FD 43         mov [d], b
4588   20BC FD 77         inc b
4589   20BE 0A C1 20      jmp _if61_exit
4590   20C1             _if61_exit:
4591   20C1 0A 51 20      jmp _while59_cond
4592   20C4             _while59_exit:
4593   20C4             ; *b = 0; 
4594   20C4 FA 05 00      lea d, [bp + 5] ; $b
4595   20C7 2A            mov b, [d]
4596   20C8 D8            push b
4597   20C9 26 00 00      mov b, $0
4598   20CC E7            pop d
4599   20CD FD 3E         mov [d], bl
4600   20CF F9            leave
4601   20D0 09            ret
4602   20D1             
4603   20D1             yesno:
4604   20D1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4605   20D4             ; char b[2]; 
4606   20D4 52 02 00      sub sp, 2
4607   20D7             ; input(b,2); 
4608   20D7 26 02 00      mov b, $2
4609   20DA DD            push bl
4610   20DB FA FF FF      lea d, [bp + -1] ; $b
4611   20DE 2D            mov b, d
4612   20DF FD AB         swp b
4613   20E1 D8            push b
4614   20E2 07 4B 20      call input
4615   20E5 51 03 00      add sp, 3
4616   20E8             ; if (tolower(*b) == 'y') 
4617   20E8             _if62_cond:
4618   20E8 FA FF FF      lea d, [bp + -1] ; $b
4619   20EB 2D            mov b, d
4620   20EC 74            mov d, b
4621   20ED 32            mov bl, [d]
4622   20EE A7 00         mov bh, 0
4623   20F0 DD            push bl
4624   20F1 07 30 1D      call tolower
4625   20F4 51 01 00      add sp, 1
4626   20F7             ; --- START RELATIONAL
4627   20F7 D7            push a
4628   20F8 11            mov a, b
4629   20F9 26 79 00      mov b, $79
4630   20FC B0            cmp a, b
4631   20FD FD 71         seq ; ==
4632   20FF E4            pop a
4633   2100             ; --- END RELATIONAL
4634   2100 C0 00 00      cmp b, 0
4635   2103 C6 0E 21      je _if62_exit
4636   2106             _if62_true:
4637   2106             ; return 1; 
4638   2106 26 01 00      mov b, $1
4639   2109 F9            leave
4640   210A 09            ret
4641   210B 0A 0E 21      jmp _if62_exit
4642   210E             _if62_exit:
4643   210E             ; return 0; 
4644   210E 26 00 00      mov b, $0
4645   2111 F9            leave
4646   2112 09            ret
4647   2113             
4648   2113             input_f00:
4649   2113 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4650   2116             ; int       v; 
4651   2116 52 02 00      sub sp, 2
4652   2119             ; char buf[8]; 
4653   2119 52 08 00      sub sp, 8
4654   211C             ; char *x; 
4655   211C 52 02 00      sub sp, 2
4656   211F             ; input(buf, 8); 
4657   211F 26 08 00      mov b, $8
4658   2122 DD            push bl
4659   2123 FA F7 FF      lea d, [bp + -9] ; $buf
4660   2126 2D            mov b, d
4661   2127 FD AB         swp b
4662   2129 D8            push b
4663   212A 07 4B 20      call input
4664   212D 51 03 00      add sp, 3
4665   2130             ; x = buf; 
4666   2130 FA F5 FF      lea d, [bp + -11] ; $x
4667   2133 DA            push d
4668   2134 FA F7 FF      lea d, [bp + -9] ; $buf
4669   2137 2D            mov b, d
4670   2138 E7            pop d
4671   2139 FD 43         mov [d], b
4672   213B             ; if (!is_digit(*x)) 
4673   213B             _if63_cond:
4674   213B FA F5 FF      lea d, [bp + -11] ; $x
4675   213E 2A            mov b, [d]
4676   213F 74            mov d, b
4677   2140 32            mov bl, [d]
4678   2141 A7 00         mov bh, 0
4679   2143 DD            push bl
4680   2144 07 A6 1C      call is_digit
4681   2147 51 01 00      add sp, 1
4682   214A C0 00 00      cmp b, 0
4683   214D FD 71         seq ; !
4684   214F C0 00 00      cmp b, 0
4685   2152 C6 5F 21      je _if63_exit
4686   2155             _if63_true:
4687   2155             ; return -1; 
4688   2155 26 01 00      mov b, $1
4689   2158 FD 97         neg b
4690   215A F9            leave
4691   215B 09            ret
4692   215C 0A 5F 21      jmp _if63_exit
4693   215F             _if63_exit:
4694   215F             ; v = 100 * (*x++ - '0'); 
4695   215F FA FF FF      lea d, [bp + -1] ; $v
4696   2162 DA            push d
4697   2163 26 64 00      mov b, $64
4698   2166             ; --- START FACTORS
4699   2166 D7            push a
4700   2167 11            mov a, b
4701   2168 FA F5 FF      lea d, [bp + -11] ; $x
4702   216B 2A            mov b, [d]
4703   216C FD 77         inc b
4704   216E FA F5 FF      lea d, [bp + -11] ; $x
4705   2171 FD 43         mov [d], b
4706   2173 FD 7D         dec b
4707   2175 74            mov d, b
4708   2176 32            mov bl, [d]
4709   2177 A7 00         mov bh, 0
4710   2179             ; --- START TERMS
4711   2179 D7            push a
4712   217A 11            mov a, b
4713   217B 26 30 00      mov b, $30
4714   217E 60            sub a, b
4715   217F 27            mov b, a
4716   2180 E4            pop a
4717   2181             ; --- END TERMS
4718   2181 AC            mul a, b ; *
4719   2182 11            mov a, b
4720   2183 27            mov b, a
4721   2184 E4            pop a
4722   2185             ; --- END FACTORS
4723   2185 E7            pop d
4724   2186 FD 43         mov [d], b
4725   2188             ; if (*x == 0) 
4726   2188             _if64_cond:
4727   2188 FA F5 FF      lea d, [bp + -11] ; $x
4728   218B 2A            mov b, [d]
4729   218C 74            mov d, b
4730   218D 32            mov bl, [d]
4731   218E A7 00         mov bh, 0
4732   2190             ; --- START RELATIONAL
4733   2190 D7            push a
4734   2191 11            mov a, b
4735   2192 26 00 00      mov b, $0
4736   2195 B0            cmp a, b
4737   2196 FD 71         seq ; ==
4738   2198 E4            pop a
4739   2199             ; --- END RELATIONAL
4740   2199 C0 00 00      cmp b, 0
4741   219C C6 A8 21      je _if64_exit
4742   219F             _if64_true:
4743   219F             ; return v; 
4744   219F FA FF FF      lea d, [bp + -1] ; $v
4745   21A2 2A            mov b, [d]
4746   21A3 F9            leave
4747   21A4 09            ret
4748   21A5 0A A8 21      jmp _if64_exit
4749   21A8             _if64_exit:
4750   21A8             ; if (*x++ != '.') 
4751   21A8             _if65_cond:
4752   21A8 FA F5 FF      lea d, [bp + -11] ; $x
4753   21AB 2A            mov b, [d]
4754   21AC FD 77         inc b
4755   21AE FA F5 FF      lea d, [bp + -11] ; $x
4756   21B1 FD 43         mov [d], b
4757   21B3 FD 7D         dec b
4758   21B5 74            mov d, b
4759   21B6 32            mov bl, [d]
4760   21B7 A7 00         mov bh, 0
4761   21B9             ; --- START RELATIONAL
4762   21B9 D7            push a
4763   21BA 11            mov a, b
4764   21BB 26 2E 00      mov b, $2e
4765   21BE B0            cmp a, b
4766   21BF FD 72         sneq ; !=
4767   21C1 E4            pop a
4768   21C2             ; --- END RELATIONAL
4769   21C2 C0 00 00      cmp b, 0
4770   21C5 C6 D2 21      je _if65_exit
4771   21C8             _if65_true:
4772   21C8             ; return -1; 
4773   21C8 26 01 00      mov b, $1
4774   21CB FD 97         neg b
4775   21CD F9            leave
4776   21CE 09            ret
4777   21CF 0A D2 21      jmp _if65_exit
4778   21D2             _if65_exit:
4779   21D2             ; if (!is_digit(*x)) 
4780   21D2             _if66_cond:
4781   21D2 FA F5 FF      lea d, [bp + -11] ; $x
4782   21D5 2A            mov b, [d]
4783   21D6 74            mov d, b
4784   21D7 32            mov bl, [d]
4785   21D8 A7 00         mov bh, 0
4786   21DA DD            push bl
4787   21DB 07 A6 1C      call is_digit
4788   21DE 51 01 00      add sp, 1
4789   21E1 C0 00 00      cmp b, 0
4790   21E4 FD 71         seq ; !
4791   21E6 C0 00 00      cmp b, 0
4792   21E9 C6 F6 21      je _if66_exit
4793   21EC             _if66_true:
4794   21EC             ; return -1; 
4795   21EC 26 01 00      mov b, $1
4796   21EF FD 97         neg b
4797   21F1 F9            leave
4798   21F2 09            ret
4799   21F3 0A F6 21      jmp _if66_exit
4800   21F6             _if66_exit:
4801   21F6             ; v = v + 10 * (*x++ - '0'); 
4802   21F6 FA FF FF      lea d, [bp + -1] ; $v
4803   21F9 DA            push d
4804   21FA FA FF FF      lea d, [bp + -1] ; $v
4805   21FD 2A            mov b, [d]
4806   21FE             ; --- START TERMS
4807   21FE D7            push a
4808   21FF 11            mov a, b
4809   2200 26 0A 00      mov b, $a
4810   2203             ; --- START FACTORS
4811   2203 D7            push a
4812   2204 11            mov a, b
4813   2205 FA F5 FF      lea d, [bp + -11] ; $x
4814   2208 2A            mov b, [d]
4815   2209 FD 77         inc b
4816   220B FA F5 FF      lea d, [bp + -11] ; $x
4817   220E FD 43         mov [d], b
4818   2210 FD 7D         dec b
4819   2212 74            mov d, b
4820   2213 32            mov bl, [d]
4821   2214 A7 00         mov bh, 0
4822   2216             ; --- START TERMS
4823   2216 D7            push a
4824   2217 11            mov a, b
4825   2218 26 30 00      mov b, $30
4826   221B 60            sub a, b
4827   221C 27            mov b, a
4828   221D E4            pop a
4829   221E             ; --- END TERMS
4830   221E AC            mul a, b ; *
4831   221F 11            mov a, b
4832   2220 27            mov b, a
4833   2221 E4            pop a
4834   2222             ; --- END FACTORS
4835   2222 56            add b, a
4836   2223 E4            pop a
4837   2224             ; --- END TERMS
4838   2224 E7            pop d
4839   2225 FD 43         mov [d], b
4840   2227             ; if (!*x) 
4841   2227             _if67_cond:
4842   2227 FA F5 FF      lea d, [bp + -11] ; $x
4843   222A 2A            mov b, [d]
4844   222B 74            mov d, b
4845   222C 32            mov bl, [d]
4846   222D A7 00         mov bh, 0
4847   222F C0 00 00      cmp b, 0
4848   2232 FD 71         seq ; !
4849   2234 C0 00 00      cmp b, 0
4850   2237 C6 43 22      je _if67_exit
4851   223A             _if67_true:
4852   223A             ; return v; 
4853   223A FA FF FF      lea d, [bp + -1] ; $v
4854   223D 2A            mov b, [d]
4855   223E F9            leave
4856   223F 09            ret
4857   2240 0A 43 22      jmp _if67_exit
4858   2243             _if67_exit:
4859   2243             ; if (!is_digit(*x)) 
4860   2243             _if68_cond:
4861   2243 FA F5 FF      lea d, [bp + -11] ; $x
4862   2246 2A            mov b, [d]
4863   2247 74            mov d, b
4864   2248 32            mov bl, [d]
4865   2249 A7 00         mov bh, 0
4866   224B DD            push bl
4867   224C 07 A6 1C      call is_digit
4868   224F 51 01 00      add sp, 1
4869   2252 C0 00 00      cmp b, 0
4870   2255 FD 71         seq ; !
4871   2257 C0 00 00      cmp b, 0
4872   225A C6 67 22      je _if68_exit
4873   225D             _if68_true:
4874   225D             ; return -1; 
4875   225D 26 01 00      mov b, $1
4876   2260 FD 97         neg b
4877   2262 F9            leave
4878   2263 09            ret
4879   2264 0A 67 22      jmp _if68_exit
4880   2267             _if68_exit:
4881   2267             ; v = v + *x++ - '0'; 
4882   2267 FA FF FF      lea d, [bp + -1] ; $v
4883   226A DA            push d
4884   226B FA FF FF      lea d, [bp + -1] ; $v
4885   226E 2A            mov b, [d]
4886   226F             ; --- START TERMS
4887   226F D7            push a
4888   2270 11            mov a, b
4889   2271 FA F5 FF      lea d, [bp + -11] ; $x
4890   2274 2A            mov b, [d]
4891   2275 FD 77         inc b
4892   2277 FA F5 FF      lea d, [bp + -11] ; $x
4893   227A FD 43         mov [d], b
4894   227C FD 7D         dec b
4895   227E 74            mov d, b
4896   227F 32            mov bl, [d]
4897   2280 A7 00         mov bh, 0
4898   2282 56            add b, a
4899   2283 11            mov a, b
4900   2284 26 30 00      mov b, $30
4901   2287 60            sub a, b
4902   2288 27            mov b, a
4903   2289 E4            pop a
4904   228A             ; --- END TERMS
4905   228A E7            pop d
4906   228B FD 43         mov [d], b
4907   228D             ; return v; 
4908   228D FA FF FF      lea d, [bp + -1] ; $v
4909   2290 2A            mov b, [d]
4910   2291 F9            leave
4911   2292 09            ret
4912   2293             
4913   2293             input_int:
4914   2293 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4915   2296             ; char x[8]; 
4916   2296 52 08 00      sub sp, 8
4917   2299             ; input(x, 8); 
4918   2299 26 08 00      mov b, $8
4919   229C DD            push bl
4920   229D FA F9 FF      lea d, [bp + -7] ; $x
4921   22A0 2D            mov b, d
4922   22A1 FD AB         swp b
4923   22A3 D8            push b
4924   22A4 07 4B 20      call input
4925   22A7 51 03 00      add sp, 3
4926   22AA             ; if (!is_digit(*x)) 
4927   22AA             _if69_cond:
4928   22AA FA F9 FF      lea d, [bp + -7] ; $x
4929   22AD 2D            mov b, d
4930   22AE 74            mov d, b
4931   22AF 32            mov bl, [d]
4932   22B0 A7 00         mov bh, 0
4933   22B2 DD            push bl
4934   22B3 07 A6 1C      call is_digit
4935   22B6 51 01 00      add sp, 1
4936   22B9 C0 00 00      cmp b, 0
4937   22BC FD 71         seq ; !
4938   22BE C0 00 00      cmp b, 0
4939   22C1 C6 CE 22      je _if69_exit
4940   22C4             _if69_true:
4941   22C4             ; return -1; 
4942   22C4 26 01 00      mov b, $1
4943   22C7 FD 97         neg b
4944   22C9 F9            leave
4945   22CA 09            ret
4946   22CB 0A CE 22      jmp _if69_exit
4947   22CE             _if69_exit:
4948   22CE             ; return atoi(x); 
4949   22CE FA F9 FF      lea d, [bp + -7] ; $x
4950   22D1 2D            mov b, d
4951   22D2 FD AB         swp b
4952   22D4 D8            push b
4953   22D5 07 2E 06      call atoi
4954   22D8 51 02 00      add sp, 2
4955   22DB F9            leave
4956   22DC 09            ret
4957   22DD             
4958   22DD             print100:
4959   22DD F8 00 00      enter 0 ; (push bp; mov bp, sp)
4960   22E0             ; static char buf[16]; 
4961   22E0 52 10 00      sub sp, 16
4962   22E3             ; char *p = buf; 
4963   22E3 52 02 00      sub sp, 2
4964   22E6             ; --- START LOCAL VAR INITIALIZATION
4965   22E6 FA FF FF      lea d, [bp + -1] ; $p
4966   22E9 DA            push d
4967   22EA 3B 75 66      mov d, st_print100_buf_dt ; static buf
4968   22ED 2D            mov b, d
4969   22EE E7            pop d
4970   22EF FD 3E         mov [d], bl
4971   22F1             ; --- END LOCAL VAR INITIALIZATION
4972   22F1             ; if (v < 0) { 
4973   22F1             _if70_cond:
4974   22F1 FA 05 00      lea d, [bp + 5] ; $v
4975   22F4 2A            mov b, [d]
4976   22F5             ; --- START RELATIONAL
4977   22F5 D7            push a
4978   22F6 11            mov a, b
4979   22F7 26 00 00      mov b, $0
4980   22FA B0            cmp a, b
4981   22FB FD 73         slt ; < (signed)
4982   22FD E4            pop a
4983   22FE             ; --- END RELATIONAL
4984   22FE C0 00 00      cmp b, 0
4985   2301 C6 28 23      je _if70_exit
4986   2304             _if70_true:
4987   2304             ; v = -v; 
4988   2304 FA 05 00      lea d, [bp + 5] ; $v
4989   2307 DA            push d
4990   2308 FA 05 00      lea d, [bp + 5] ; $v
4991   230B 2A            mov b, [d]
4992   230C FD 97         neg b
4993   230E E7            pop d
4994   230F FD 43         mov [d], b
4995   2311             ; *p++ = '-'; 
4996   2311 FA FF FF      lea d, [bp + -1] ; $p
4997   2314 2A            mov b, [d]
4998   2315 FD 77         inc b
4999   2317 FA FF FF      lea d, [bp + -1] ; $p
5000   231A FD 43         mov [d], b
5001   231C FD 7D         dec b
5002   231E D8            push b
5003   231F 26 2D 00      mov b, $2d
5004   2322 E7            pop d
5005   2323 FD 3E         mov [d], bl
5006   2325 0A 28 23      jmp _if70_exit
5007   2328             _if70_exit:
5008   2328             ; p = p + sprintf(p, "%d.%d", v / 100, v%100); 
5009   2328 FA FF FF      lea d, [bp + -1] ; $p
5010   232B DA            push d
5011   232C FA FF FF      lea d, [bp + -1] ; $p
5012   232F 2A            mov b, [d]
5013   2330             ; --- START TERMS
5014   2330 D7            push a
5015   2331 11            mov a, b
5016   2332 FA 05 00      lea d, [bp + 5] ; $v
5017   2335 2A            mov b, [d]
5018   2336             ; --- START FACTORS
5019   2336 D7            push a
5020   2337 11            mov a, b
5021   2338 26 64 00      mov b, $64
5022   233B AE            div a, b ; 
5023   233C 11            mov a, b
5024   233D 27            mov b, a
5025   233E E4            pop a
5026   233F             ; --- END FACTORS
5027   233F FD AB         swp b
5028   2341 D8            push b
5029   2342 FA 05 00      lea d, [bp + 5] ; $v
5030   2345 2A            mov b, [d]
5031   2346             ; --- START FACTORS
5032   2346 D7            push a
5033   2347 11            mov a, b
5034   2348 26 64 00      mov b, $64
5035   234B AE            div a, b
5036   234C 27            mov b, a
5037   234D E4            pop a
5038   234E             ; --- END FACTORS
5039   234E FD AB         swp b
5040   2350 D8            push b
5041   2351 26 F1 67      mov b, _s33 ; "%d.%d"
5042   2354 FD AB         swp b
5043   2356 D8            push b
5044   2357 FA FF FF      lea d, [bp + -1] ; $p
5045   235A 2A            mov b, [d]
5046   235B FD AB         swp b
5047   235D D8            push b
5048   235E 07 6D 0C      call sprintf
5049   2361 51 08 00      add sp, 8
5050   2364 56            add b, a
5051   2365 E4            pop a
5052   2366             ; --- END TERMS
5053   2366 E7            pop d
5054   2367 FD 43         mov [d], b
5055   2369             ; return buf; 
5056   2369 3B 75 66      mov d, st_print100_buf_dt ; static buf
5057   236C 2D            mov b, d
5058   236D F9            leave
5059   236E 09            ret
5060   236F             
5061   236F             inoperable:
5062   236F F8 00 00      enter 0 ; (push bp; mov bp, sp)
5063   2372             ; if (damage[u] < 0) { 
5064   2372             _if71_cond:
5065   2372 3B 8A 64      mov d, _damage_data ; $damage
5066   2375 D7            push a
5067   2376 DA            push d
5068   2377 FA 05 00      lea d, [bp + 5] ; $u
5069   237A 32            mov bl, [d]
5070   237B A7 00         mov bh, 0
5071   237D E7            pop d
5072   237E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5073   2382 E4            pop a
5074   2383 2A            mov b, [d]
5075   2384             ; --- START RELATIONAL
5076   2384 D7            push a
5077   2385 11            mov a, b
5078   2386 26 00 00      mov b, $0
5079   2389 B0            cmp a, b
5080   238A FD 73         slt ; < (signed)
5081   238C E4            pop a
5082   238D             ; --- END RELATIONAL
5083   238D C0 00 00      cmp b, 0
5084   2390 C6 DA 23      je _if71_exit
5085   2393             _if71_true:
5086   2393             ; printf("%s %s inoperable.\n", 
5087   2393             _ternary73_cond:
5088   2393 FA 05 00      lea d, [bp + 5] ; $u
5089   2396 32            mov bl, [d]
5090   2397 A7 00         mov bh, 0
5091   2399             ; --- START RELATIONAL
5092   2399 D7            push a
5093   239A 11            mov a, b
5094   239B 26 05 00      mov b, $5
5095   239E B0            cmp a, b
5096   239F FD 71         seq ; ==
5097   23A1 E4            pop a
5098   23A2             ; --- END RELATIONAL
5099   23A2 C0 00 00      cmp b, 0
5100   23A5 C6 AE 23      je _ternary73_false
5101   23A8             _ternary73_true:
5102   23A8 26 F7 67      mov b, _s34 ; "are"
5103   23AB 0A B1 23      jmp _ternary73_exit
5104   23AE             _ternary73_false:
5105   23AE 26 FB 67      mov b, _s35 ; "is"
5106   23B1             _ternary73_exit:
5107   23B1 FD AB         swp b
5108   23B3 D8            push b
5109   23B4 FA 05 00      lea d, [bp + 5] ; $u
5110   23B7 32            mov bl, [d]
5111   23B8 A7 00         mov bh, 0
5112   23BA FD AB         swp b
5113   23BC D8            push b
5114   23BD 07 40 60      call get_device_name
5115   23C0 51 02 00      add sp, 2
5116   23C3 FD AB         swp b
5117   23C5 D8            push b
5118   23C6 26 FE 67      mov b, _s36 ; "%s %s inoperable.\n"
5119   23C9 FD AB         swp b
5120   23CB D8            push b
5121   23CC 07 BA 07      call printf
5122   23CF 51 06 00      add sp, 6
5123   23D2             ; return 1; 
5124   23D2 26 01 00      mov b, $1
5125   23D5 F9            leave
5126   23D6 09            ret
5127   23D7 0A DA 23      jmp _if71_exit
5128   23DA             _if71_exit:
5129   23DA             ; return 0; 
5130   23DA 26 00 00      mov b, $0
5131   23DD F9            leave
5132   23DE 09            ret
5133   23DF             
5134   23DF             intro:
5135   23DF F8 00 00      enter 0 ; (push bp; mov bp, sp)
5136   23E2             ; showfile("startrek.intro"); 
5137   23E2 26 11 68      mov b, _s37 ; "startrek.intro"
5138   23E5 FD AB         swp b
5139   23E7 D8            push b
5140   23E8 07 9E 63      call showfile
5141   23EB 51 02 00      add sp, 2
5142   23EE             ; if (yesno()) 
5143   23EE             _if74_cond:
5144   23EE 07 D1 20      call yesno
5145   23F1 C0 00 00      cmp b, 0
5146   23F4 C6 06 24      je _if74_exit
5147   23F7             _if74_true:
5148   23F7             ; showfile("startrek.doc"); 
5149   23F7 26 20 68      mov b, _s38 ; "startrek.doc"
5150   23FA FD AB         swp b
5151   23FC D8            push b
5152   23FD 07 9E 63      call showfile
5153   2400 51 02 00      add sp, 2
5154   2403 0A 06 24      jmp _if74_exit
5155   2406             _if74_exit:
5156   2406             ; showfile("startrek.logo"); 
5157   2406 26 2D 68      mov b, _s39 ; "startrek.logo"
5158   2409 FD AB         swp b
5159   240B D8            push b
5160   240C 07 9E 63      call showfile
5161   240F 51 02 00      add sp, 2
5162   2412             ; stardate = TO_FIXED((get_rand(20) + 20) * 100); 
5163   2412 3B A2 64      mov d, _stardate ; $stardate
5164   2415 DA            push d
5165   2416 26 14 00      mov b, $14
5166   2419 FD AB         swp b
5167   241B D8            push b
5168   241C 07 EB 1F      call get_rand
5169   241F 51 02 00      add sp, 2
5170   2422             ; --- START TERMS
5171   2422 D7            push a
5172   2423 11            mov a, b
5173   2424 26 14 00      mov b, $14
5174   2427 56            add b, a
5175   2428 E4            pop a
5176   2429             ; --- END TERMS
5177   2429             ; --- START FACTORS
5178   2429 D7            push a
5179   242A 11            mov a, b
5180   242B 26 64 00      mov b, $64
5181   242E AC            mul a, b ; *
5182   242F 11            mov a, b
5183   2430 27            mov b, a
5184   2431 E4            pop a
5185   2432             ; --- END FACTORS
5186   2432 FD AB         swp b
5187   2434 D8            push b
5188   2435 07 A5 1F      call TO_FIXED
5189   2438 51 02 00      add sp, 2
5190   243B E7            pop d
5191   243C FD 43         mov [d], b
5192   243E F9            leave
5193   243F 09            ret
5194   2440             
5195   2440             new_game:
5196   2440 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5197   2443             ; char cmd[4]; 
5198   2443 52 04 00      sub sp, 4
5199   2446             ; initialize(); 
5200   2446 07 D2 26      call initialize
5201   2449             ; new_quadrant(); 
5202   2449 07 7B 2B      call new_quadrant
5203   244C             ; short_range_scan(); 
5204   244C 07 8F 38      call short_range_scan
5205   244F             ; while (1) { 
5206   244F             _while75_cond:
5207   244F 26 01 00      mov b, $1
5208   2452 C0 00 00      cmp b, 0
5209   2455 C6 D0 26      je _while75_exit
5210   2458             _while75_block:
5211   2458             ; if (shield + energy <= 10 && (energy < 10 || damage[7] < 0)) { 
5212   2458             _if76_cond:
5213   2458 3B 83 64      mov d, _shield ; $shield
5214   245B 2A            mov b, [d]
5215   245C             ; --- START TERMS
5216   245C D7            push a
5217   245D 11            mov a, b
5218   245E 3B C8 63      mov d, _energy ; $energy
5219   2461 2A            mov b, [d]
5220   2462 56            add b, a
5221   2463 E4            pop a
5222   2464             ; --- END TERMS
5223   2464             ; --- START RELATIONAL
5224   2464 D7            push a
5225   2465 11            mov a, b
5226   2466 26 0A 00      mov b, $a
5227   2469 B0            cmp a, b
5228   246A FD 74         sle ; <= (signed)
5229   246C E4            pop a
5230   246D             ; --- END RELATIONAL
5231   246D             ; --- START LOGICAL AND
5232   246D D7            push a
5233   246E 11            mov a, b
5234   246F 3B C8 63      mov d, _energy ; $energy
5235   2472 2A            mov b, [d]
5236   2473             ; --- START RELATIONAL
5237   2473 D7            push a
5238   2474 11            mov a, b
5239   2475 26 0A 00      mov b, $a
5240   2478 B0            cmp a, b
5241   2479 FD 73         slt ; < (signed)
5242   247B E4            pop a
5243   247C             ; --- END RELATIONAL
5244   247C             ; --- START LOGICAL OR
5245   247C D7            push a
5246   247D 11            mov a, b
5247   247E 3B 8A 64      mov d, _damage_data ; $damage
5248   2481 D7            push a
5249   2482 DA            push d
5250   2483 26 07 00      mov b, $7
5251   2486 E7            pop d
5252   2487 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5253   248B E4            pop a
5254   248C 2A            mov b, [d]
5255   248D             ; --- START RELATIONAL
5256   248D D7            push a
5257   248E 11            mov a, b
5258   248F 26 00 00      mov b, $0
5259   2492 B0            cmp a, b
5260   2493 FD 73         slt ; < (signed)
5261   2495 E4            pop a
5262   2496             ; --- END RELATIONAL
5263   2496 FD A8         sor a, b ; ||
5264   2498 E4            pop a
5265   2499             ; --- END LOGICAL OR
5266   2499 FD A7         sand a, b
5267   249B E4            pop a
5268   249C             ; --- END LOGICAL AND
5269   249C C0 00 00      cmp b, 0
5270   249F C6 B4 24      je _if76_exit
5271   24A2             _if76_true:
5272   24A2             ; showfile("startrek.fatal"); 
5273   24A2 26 3B 68      mov b, _s40 ; "startrek.fatal"
5274   24A5 FD AB         swp b
5275   24A7 D8            push b
5276   24A8 07 9E 63      call showfile
5277   24AB 51 02 00      add sp, 2
5278   24AE             ; end_of_time(); 
5279   24AE 07 ED 57      call end_of_time
5280   24B1 0A B4 24      jmp _if76_exit
5281   24B4             _if76_exit:
5282   24B4             ; puts("Command? "); 
5283   24B4 26 4A 68      mov b, _s41 ; "Command? "
5284   24B7 FD AB         swp b
5285   24B9 D8            push b
5286   24BA 07 BB 17      call puts
5287   24BD 51 02 00      add sp, 2
5288   24C0             ; input(cmd, 4); 
5289   24C0 26 04 00      mov b, $4
5290   24C3 DD            push bl
5291   24C4 FA FD FF      lea d, [bp + -3] ; $cmd
5292   24C7 2D            mov b, d
5293   24C8 FD AB         swp b
5294   24CA D8            push b
5295   24CB 07 4B 20      call input
5296   24CE 51 03 00      add sp, 3
5297   24D1             ; putchar('\n'); 
5298   24D1 26 0A 00      mov b, $a
5299   24D4 DD            push bl
5300   24D5 07 85 17      call putchar
5301   24D8 51 01 00      add sp, 1
5302   24DB             ; if (!strncmp(cmd, "nav", 3)) 
5303   24DB             _if77_cond:
5304   24DB 26 03 00      mov b, $3
5305   24DE FD AB         swp b
5306   24E0 D8            push b
5307   24E1 26 54 68      mov b, _s42 ; "nav"
5308   24E4 FD AB         swp b
5309   24E6 D8            push b
5310   24E7 FA FD FF      lea d, [bp + -3] ; $cmd
5311   24EA 2D            mov b, d
5312   24EB FD AB         swp b
5313   24ED D8            push b
5314   24EE 07 D3 04      call strncmp
5315   24F1 51 06 00      add sp, 6
5316   24F4 C0 00 00      cmp b, 0
5317   24F7 FD 71         seq ; !
5318   24F9 C0 00 00      cmp b, 0
5319   24FC C6 05 25      je _if77_else
5320   24FF             _if77_true:
5321   24FF             ; course_control(); 
5322   24FF 07 0E 2F      call course_control
5323   2502 0A CD 26      jmp _if77_exit
5324   2505             _if77_else:
5325   2505             ; if (!strncmp(cmd, "srs", 3)) 
5326   2505             _if78_cond:
5327   2505 26 03 00      mov b, $3
5328   2508 FD AB         swp b
5329   250A D8            push b
5330   250B 26 58 68      mov b, _s43 ; "srs"
5331   250E FD AB         swp b
5332   2510 D8            push b
5333   2511 FA FD FF      lea d, [bp + -3] ; $cmd
5334   2514 2D            mov b, d
5335   2515 FD AB         swp b
5336   2517 D8            push b
5337   2518 07 D3 04      call strncmp
5338   251B 51 06 00      add sp, 6
5339   251E C0 00 00      cmp b, 0
5340   2521 FD 71         seq ; !
5341   2523 C0 00 00      cmp b, 0
5342   2526 C6 2F 25      je _if78_else
5343   2529             _if78_true:
5344   2529             ; short_range_scan(); 
5345   2529 07 8F 38      call short_range_scan
5346   252C 0A CD 26      jmp _if78_exit
5347   252F             _if78_else:
5348   252F             ; if (!strncmp(cmd, "lrs", 3)) 
5349   252F             _if79_cond:
5350   252F 26 03 00      mov b, $3
5351   2532 FD AB         swp b
5352   2534 D8            push b
5353   2535 26 5C 68      mov b, _s44 ; "lrs"
5354   2538 FD AB         swp b
5355   253A D8            push b
5356   253B FA FD FF      lea d, [bp + -3] ; $cmd
5357   253E 2D            mov b, d
5358   253F FD AB         swp b
5359   2541 D8            push b
5360   2542 07 D3 04      call strncmp
5361   2545 51 06 00      add sp, 6
5362   2548 C0 00 00      cmp b, 0
5363   254B FD 71         seq ; !
5364   254D C0 00 00      cmp b, 0
5365   2550 C6 59 25      je _if79_else
5366   2553             _if79_true:
5367   2553             ; long_range_scan(); 
5368   2553 07 1D 3D      call long_range_scan
5369   2556 0A CD 26      jmp _if79_exit
5370   2559             _if79_else:
5371   2559             ; if (!strncmp(cmd, "pha", 3)) 
5372   2559             _if80_cond:
5373   2559 26 03 00      mov b, $3
5374   255C FD AB         swp b
5375   255E D8            push b
5376   255F 26 60 68      mov b, _s45 ; "pha"
5377   2562 FD AB         swp b
5378   2564 D8            push b
5379   2565 FA FD FF      lea d, [bp + -3] ; $cmd
5380   2568 2D            mov b, d
5381   2569 FD AB         swp b
5382   256B D8            push b
5383   256C 07 D3 04      call strncmp
5384   256F 51 06 00      add sp, 6
5385   2572 C0 00 00      cmp b, 0
5386   2575 FD 71         seq ; !
5387   2577 C0 00 00      cmp b, 0
5388   257A C6 83 25      je _if80_else
5389   257D             _if80_true:
5390   257D             ; phaser_control(); 
5391   257D 07 3E 3F      call phaser_control
5392   2580 0A CD 26      jmp _if80_exit
5393   2583             _if80_else:
5394   2583             ; if (!strncmp(cmd, "tor", 3)) 
5395   2583             _if81_cond:
5396   2583 26 03 00      mov b, $3
5397   2586 FD AB         swp b
5398   2588 D8            push b
5399   2589 26 64 68      mov b, _s46 ; "tor"
5400   258C FD AB         swp b
5401   258E D8            push b
5402   258F FA FD FF      lea d, [bp + -3] ; $cmd
5403   2592 2D            mov b, d
5404   2593 FD AB         swp b
5405   2595 D8            push b
5406   2596 07 D3 04      call strncmp
5407   2599 51 06 00      add sp, 6
5408   259C C0 00 00      cmp b, 0
5409   259F FD 71         seq ; !
5410   25A1 C0 00 00      cmp b, 0
5411   25A4 C6 AD 25      je _if81_else
5412   25A7             _if81_true:
5413   25A7             ; photon_torpedoes(); 
5414   25A7 07 0B 43      call photon_torpedoes
5415   25AA 0A CD 26      jmp _if81_exit
5416   25AD             _if81_else:
5417   25AD             ; if (!strncmp(cmd, "shi", 3)) 
5418   25AD             _if82_cond:
5419   25AD 26 03 00      mov b, $3
5420   25B0 FD AB         swp b
5421   25B2 D8            push b
5422   25B3 26 68 68      mov b, _s47 ; "shi"
5423   25B6 FD AB         swp b
5424   25B8 D8            push b
5425   25B9 FA FD FF      lea d, [bp + -3] ; $cmd
5426   25BC 2D            mov b, d
5427   25BD FD AB         swp b
5428   25BF D8            push b
5429   25C0 07 D3 04      call strncmp
5430   25C3 51 06 00      add sp, 6
5431   25C6 C0 00 00      cmp b, 0
5432   25C9 FD 71         seq ; !
5433   25CB C0 00 00      cmp b, 0
5434   25CE C6 D7 25      je _if82_else
5435   25D1             _if82_true:
5436   25D1             ; shield_control(); 
5437   25D1 07 B2 4B      call shield_control
5438   25D4 0A CD 26      jmp _if82_exit
5439   25D7             _if82_else:
5440   25D7             ; if (!strncmp(cmd, "dam", 3)) 
5441   25D7             _if83_cond:
5442   25D7 26 03 00      mov b, $3
5443   25DA FD AB         swp b
5444   25DC D8            push b
5445   25DD 26 6C 68      mov b, _s48 ; "dam"
5446   25E0 FD AB         swp b
5447   25E2 D8            push b
5448   25E3 FA FD FF      lea d, [bp + -3] ; $cmd
5449   25E6 2D            mov b, d
5450   25E7 FD AB         swp b
5451   25E9 D8            push b
5452   25EA 07 D3 04      call strncmp
5453   25ED 51 06 00      add sp, 6
5454   25F0 C0 00 00      cmp b, 0
5455   25F3 FD 71         seq ; !
5456   25F5 C0 00 00      cmp b, 0
5457   25F8 C6 01 26      je _if83_else
5458   25FB             _if83_true:
5459   25FB             ; damage_control(); 
5460   25FB 07 54 49      call damage_control
5461   25FE 0A CD 26      jmp _if83_exit
5462   2601             _if83_else:
5463   2601             ; if (!strncmp(cmd, "com", 3)) 
5464   2601             _if84_cond:
5465   2601 26 03 00      mov b, $3
5466   2604 FD AB         swp b
5467   2606 D8            push b
5468   2607 26 70 68      mov b, _s49 ; "com"
5469   260A FD AB         swp b
5470   260C D8            push b
5471   260D FA FD FF      lea d, [bp + -3] ; $cmd
5472   2610 2D            mov b, d
5473   2611 FD AB         swp b
5474   2613 D8            push b
5475   2614 07 D3 04      call strncmp
5476   2617 51 06 00      add sp, 6
5477   261A C0 00 00      cmp b, 0
5478   261D FD 71         seq ; !
5479   261F C0 00 00      cmp b, 0
5480   2622 C6 2B 26      je _if84_else
5481   2625             _if84_true:
5482   2625             ; library_computer(); 
5483   2625 07 8E 4C      call library_computer
5484   2628 0A CD 26      jmp _if84_exit
5485   262B             _if84_else:
5486   262B             ; if (!strncmp(cmd, "xxx", 3)) 
5487   262B             _if85_cond:
5488   262B 26 03 00      mov b, $3
5489   262E FD AB         swp b
5490   2630 D8            push b
5491   2631 26 74 68      mov b, _s50 ; "xxx"
5492   2634 FD AB         swp b
5493   2636 D8            push b
5494   2637 FA FD FF      lea d, [bp + -3] ; $cmd
5495   263A 2D            mov b, d
5496   263B FD AB         swp b
5497   263D D8            push b
5498   263E 07 D3 04      call strncmp
5499   2641 51 06 00      add sp, 6
5500   2644 C0 00 00      cmp b, 0
5501   2647 FD 71         seq ; !
5502   2649 C0 00 00      cmp b, 0
5503   264C C6 55 26      je _if85_else
5504   264F             _if85_true:
5505   264F             ; resign_commision(); 
5506   264F 07 11 58      call resign_commision
5507   2652 0A CD 26      jmp _if85_exit
5508   2655             _if85_else:
5509   2655             ; puts("Enter one of the following:\n"); 
5510   2655 26 78 68      mov b, _s51 ; "Enter one of the following:\n"
5511   2658 FD AB         swp b
5512   265A D8            push b
5513   265B 07 BB 17      call puts
5514   265E 51 02 00      add sp, 2
5515   2661             ; puts("  nav - To Set Course"); 
5516   2661 26 95 68      mov b, _s52 ; "  nav - To Set Course"
5517   2664 FD AB         swp b
5518   2666 D8            push b
5519   2667 07 BB 17      call puts
5520   266A 51 02 00      add sp, 2
5521   266D             ; puts("  srs - Short Range Sensors"); 
5522   266D 26 AB 68      mov b, _s53 ; "  srs - Short Range Sensors"
5523   2670 FD AB         swp b
5524   2672 D8            push b
5525   2673 07 BB 17      call puts
5526   2676 51 02 00      add sp, 2
5527   2679             ; puts("  lrs - Long Range Sensors"); 
5528   2679 26 C7 68      mov b, _s54 ; "  lrs - Long Range Sensors"
5529   267C FD AB         swp b
5530   267E D8            push b
5531   267F 07 BB 17      call puts
5532   2682 51 02 00      add sp, 2
5533   2685             ; puts("  pha - Phasers"); 
5534   2685 26 E2 68      mov b, _s55 ; "  pha - Phasers"
5535   2688 FD AB         swp b
5536   268A D8            push b
5537   268B 07 BB 17      call puts
5538   268E 51 02 00      add sp, 2
5539   2691             ; puts("  tor - Photon Torpedoes"); 
5540   2691 26 F2 68      mov b, _s56 ; "  tor - Photon Torpedoes"
5541   2694 FD AB         swp b
5542   2696 D8            push b
5543   2697 07 BB 17      call puts
5544   269A 51 02 00      add sp, 2
5545   269D             ; puts("  shi - Shield Control"); 
5546   269D 26 0B 69      mov b, _s57 ; "  shi - Shield Control"
5547   26A0 FD AB         swp b
5548   26A2 D8            push b
5549   26A3 07 BB 17      call puts
5550   26A6 51 02 00      add sp, 2
5551   26A9             ; puts("  dam - Damage Control"); 
5552   26A9 26 22 69      mov b, _s58 ; "  dam - Damage Control"
5553   26AC FD AB         swp b
5554   26AE D8            push b
5555   26AF 07 BB 17      call puts
5556   26B2 51 02 00      add sp, 2
5557   26B5             ; puts("  com - Library Computer"); 
5558   26B5 26 39 69      mov b, _s59 ; "  com - Library Computer"
5559   26B8 FD AB         swp b
5560   26BA D8            push b
5561   26BB 07 BB 17      call puts
5562   26BE 51 02 00      add sp, 2
5563   26C1             ; puts("  xxx - Resign Command\n"); 
5564   26C1 26 52 69      mov b, _s60 ; "  xxx - Resign Command\n"
5565   26C4 FD AB         swp b
5566   26C6 D8            push b
5567   26C7 07 BB 17      call puts
5568   26CA 51 02 00      add sp, 2
5569   26CD             _if85_exit:
5570   26CD             _if84_exit:
5571   26CD             _if83_exit:
5572   26CD             _if82_exit:
5573   26CD             _if81_exit:
5574   26CD             _if80_exit:
5575   26CD             _if79_exit:
5576   26CD             _if78_exit:
5577   26CD             _if77_exit:
5578   26CD 0A 4F 24      jmp _while75_cond
5579   26D0             _while75_exit:
5580   26D0 F9            leave
5581   26D1 09            ret
5582   26D2             
5583   26D2             initialize:
5584   26D2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5585   26D5             ; int i, j; 
5586   26D5 52 02 00      sub sp, 2
5587   26D8 52 02 00      sub sp, 2
5588   26DB             ; unsigned char                         yp, xp; 
5589   26DB 52 01 00      sub sp, 1
5590   26DE 52 01 00      sub sp, 1
5591   26E1             ; unsigned char                         r; 
5592   26E1 52 01 00      sub sp, 1
5593   26E4             ; time_start = FROM_FIXED(stardate); 
5594   26E4 3B 86 64      mov d, _time_start ; $time_start
5595   26E7 DA            push d
5596   26E8 3B A2 64      mov d, _stardate ; $stardate
5597   26EB 2A            mov b, [d]
5598   26EC FD AB         swp b
5599   26EE D8            push b
5600   26EF 07 B7 1F      call FROM_FIXED
5601   26F2 51 02 00      add sp, 2
5602   26F5 E7            pop d
5603   26F6 FD 43         mov [d], b
5604   26F8             ; time_up = 25 + get_rand(10); 
5605   26F8 3B 88 64      mov d, _time_up ; $time_up
5606   26FB DA            push d
5607   26FC 26 19 00      mov b, $19
5608   26FF             ; --- START TERMS
5609   26FF D7            push a
5610   2700 11            mov a, b
5611   2701 26 0A 00      mov b, $a
5612   2704 FD AB         swp b
5613   2706 D8            push b
5614   2707 07 EB 1F      call get_rand
5615   270A 51 02 00      add sp, 2
5616   270D 56            add b, a
5617   270E E4            pop a
5618   270F             ; --- END TERMS
5619   270F E7            pop d
5620   2710 FD 43         mov [d], b
5621   2712             ; docked = 0; 
5622   2712 3B C7 63      mov d, _docked ; $docked
5623   2715 DA            push d
5624   2716 26 00 00      mov b, $0
5625   2719 E7            pop d
5626   271A FD 3E         mov [d], bl
5627   271C             ; energy = energy0; 
5628   271C 3B C8 63      mov d, _energy ; $energy
5629   271F DA            push d
5630   2720 3B CA 63      mov d, _energy0 ; $energy0
5631   2723 2A            mov b, [d]
5632   2724 E7            pop d
5633   2725 FD 43         mov [d], b
5634   2727             ; torps = torps0; 
5635   2727 3B 7D 64      mov d, _torps ; $torps
5636   272A DA            push d
5637   272B 3B 7E 64      mov d, _torps0 ; $torps0
5638   272E 32            mov bl, [d]
5639   272F A7 00         mov bh, 0
5640   2731 E7            pop d
5641   2732 FD 3E         mov [d], bl
5642   2734             ; shield = 0; 
5643   2734 3B 83 64      mov d, _shield ; $shield
5644   2737 DA            push d
5645   2738 26 00 00      mov b, $0
5646   273B E7            pop d
5647   273C FD 43         mov [d], b
5648   273E             ; quad_y = rand8(); 
5649   273E 3B 7F 64      mov d, _quad_y ; $quad_y
5650   2741 DA            push d
5651   2742 07 3A 20      call rand8
5652   2745 E7            pop d
5653   2746 FD 43         mov [d], b
5654   2748             ; quad_x = rand8(); 
5655   2748 3B 81 64      mov d, _quad_x ; $quad_x
5656   274B DA            push d
5657   274C 07 3A 20      call rand8
5658   274F E7            pop d
5659   2750 FD 43         mov [d], b
5660   2752             ; ship_y = TO_FIXED00(rand8()); 
5661   2752 3B 9E 64      mov d, _ship_y ; $ship_y
5662   2755 DA            push d
5663   2756 07 3A 20      call rand8
5664   2759 FD AB         swp b
5665   275B D8            push b
5666   275C 07 C8 1F      call TO_FIXED00
5667   275F 51 02 00      add sp, 2
5668   2762 E7            pop d
5669   2763 FD 43         mov [d], b
5670   2765             ; ship_x = TO_FIXED00(rand8()); 
5671   2765 3B A0 64      mov d, _ship_x ; $ship_x
5672   2768 DA            push d
5673   2769 07 3A 20      call rand8
5674   276C FD AB         swp b
5675   276E D8            push b
5676   276F 07 C8 1F      call TO_FIXED00
5677   2772 51 02 00      add sp, 2
5678   2775 E7            pop d
5679   2776 FD 43         mov [d], b
5680   2778             ; for (i = 1; i <= 8; i++) 
5681   2778             _for86_init:
5682   2778 FA FF FF      lea d, [bp + -1] ; $i
5683   277B DA            push d
5684   277C 26 01 00      mov b, $1
5685   277F E7            pop d
5686   2780 FD 43         mov [d], b
5687   2782             _for86_cond:
5688   2782 FA FF FF      lea d, [bp + -1] ; $i
5689   2785 2A            mov b, [d]
5690   2786             ; --- START RELATIONAL
5691   2786 D7            push a
5692   2787 11            mov a, b
5693   2788 26 08 00      mov b, $8
5694   278B B0            cmp a, b
5695   278C FD 74         sle ; <= (signed)
5696   278E E4            pop a
5697   278F             ; --- END RELATIONAL
5698   278F C0 00 00      cmp b, 0
5699   2792 C6 BB 27      je _for86_exit
5700   2795             _for86_block:
5701   2795             ; damage[i] = 0; 
5702   2795 3B 8A 64      mov d, _damage_data ; $damage
5703   2798 D7            push a
5704   2799 DA            push d
5705   279A FA FF FF      lea d, [bp + -1] ; $i
5706   279D 2A            mov b, [d]
5707   279E E7            pop d
5708   279F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5709   27A3 E4            pop a
5710   27A4 DA            push d
5711   27A5 26 00 00      mov b, $0
5712   27A8 E7            pop d
5713   27A9 FD 43         mov [d], b
5714   27AB             _for86_update:
5715   27AB FA FF FF      lea d, [bp + -1] ; $i
5716   27AE 2A            mov b, [d]
5717   27AF FD 77         inc b
5718   27B1 FA FF FF      lea d, [bp + -1] ; $i
5719   27B4 FD 43         mov [d], b
5720   27B6 FD 7D         dec b
5721   27B8 0A 82 27      jmp _for86_cond
5722   27BB             _for86_exit:
5723   27BB             ; for (i = 1; i <= 8; i++) { 
5724   27BB             _for87_init:
5725   27BB FA FF FF      lea d, [bp + -1] ; $i
5726   27BE DA            push d
5727   27BF 26 01 00      mov b, $1
5728   27C2 E7            pop d
5729   27C3 FD 43         mov [d], b
5730   27C5             _for87_cond:
5731   27C5 FA FF FF      lea d, [bp + -1] ; $i
5732   27C8 2A            mov b, [d]
5733   27C9             ; --- START RELATIONAL
5734   27C9 D7            push a
5735   27CA 11            mov a, b
5736   27CB 26 08 00      mov b, $8
5737   27CE B0            cmp a, b
5738   27CF FD 74         sle ; <= (signed)
5739   27D1 E4            pop a
5740   27D2             ; --- END RELATIONAL
5741   27D2 C0 00 00      cmp b, 0
5742   27D5 C6 3E 29      je _for87_exit
5743   27D8             _for87_block:
5744   27D8             ; for (j = 1; j <= 8; j++) { 
5745   27D8             _for88_init:
5746   27D8 FA FD FF      lea d, [bp + -3] ; $j
5747   27DB DA            push d
5748   27DC 26 01 00      mov b, $1
5749   27DF E7            pop d
5750   27E0 FD 43         mov [d], b
5751   27E2             _for88_cond:
5752   27E2 FA FD FF      lea d, [bp + -3] ; $j
5753   27E5 2A            mov b, [d]
5754   27E6             ; --- START RELATIONAL
5755   27E6 D7            push a
5756   27E7 11            mov a, b
5757   27E8 26 08 00      mov b, $8
5758   27EB B0            cmp a, b
5759   27EC FD 74         sle ; <= (signed)
5760   27EE E4            pop a
5761   27EF             ; --- END RELATIONAL
5762   27EF C0 00 00      cmp b, 0
5763   27F2 C6 2E 29      je _for88_exit
5764   27F5             _for88_block:
5765   27F5             ; r = get_rand(100); 
5766   27F5 FA FA FF      lea d, [bp + -6] ; $r
5767   27F8 DA            push d
5768   27F9 26 64 00      mov b, $64
5769   27FC FD AB         swp b
5770   27FE D8            push b
5771   27FF 07 EB 1F      call get_rand
5772   2802 51 02 00      add sp, 2
5773   2805 E7            pop d
5774   2806 FD 3E         mov [d], bl
5775   2808             ; klingons = 0; 
5776   2808 3B 7A 64      mov d, _klingons ; $klingons
5777   280B DA            push d
5778   280C 26 00 00      mov b, $0
5779   280F E7            pop d
5780   2810 FD 3E         mov [d], bl
5781   2812             ; if (r > 98) 
5782   2812             _if89_cond:
5783   2812 FA FA FF      lea d, [bp + -6] ; $r
5784   2815 32            mov bl, [d]
5785   2816 A7 00         mov bh, 0
5786   2818             ; --- START RELATIONAL
5787   2818 D7            push a
5788   2819 11            mov a, b
5789   281A 26 62 00      mov b, $62
5790   281D B0            cmp a, b
5791   281E FD 81         sgu ; > (unsigned)
5792   2820 E4            pop a
5793   2821             ; --- END RELATIONAL
5794   2821 C0 00 00      cmp b, 0
5795   2824 C6 34 28      je _if89_else
5796   2827             _if89_true:
5797   2827             ; klingons = 3; 
5798   2827 3B 7A 64      mov d, _klingons ; $klingons
5799   282A DA            push d
5800   282B 26 03 00      mov b, $3
5801   282E E7            pop d
5802   282F FD 3E         mov [d], bl
5803   2831 0A 78 28      jmp _if89_exit
5804   2834             _if89_else:
5805   2834             ; if (r > 95) 
5806   2834             _if90_cond:
5807   2834 FA FA FF      lea d, [bp + -6] ; $r
5808   2837 32            mov bl, [d]
5809   2838 A7 00         mov bh, 0
5810   283A             ; --- START RELATIONAL
5811   283A D7            push a
5812   283B 11            mov a, b
5813   283C 26 5F 00      mov b, $5f
5814   283F B0            cmp a, b
5815   2840 FD 81         sgu ; > (unsigned)
5816   2842 E4            pop a
5817   2843             ; --- END RELATIONAL
5818   2843 C0 00 00      cmp b, 0
5819   2846 C6 56 28      je _if90_else
5820   2849             _if90_true:
5821   2849             ; klingons = 2; 
5822   2849 3B 7A 64      mov d, _klingons ; $klingons
5823   284C DA            push d
5824   284D 26 02 00      mov b, $2
5825   2850 E7            pop d
5826   2851 FD 3E         mov [d], bl
5827   2853 0A 78 28      jmp _if90_exit
5828   2856             _if90_else:
5829   2856             ; if (r > 80) 
5830   2856             _if91_cond:
5831   2856 FA FA FF      lea d, [bp + -6] ; $r
5832   2859 32            mov bl, [d]
5833   285A A7 00         mov bh, 0
5834   285C             ; --- START RELATIONAL
5835   285C D7            push a
5836   285D 11            mov a, b
5837   285E 26 50 00      mov b, $50
5838   2861 B0            cmp a, b
5839   2862 FD 81         sgu ; > (unsigned)
5840   2864 E4            pop a
5841   2865             ; --- END RELATIONAL
5842   2865 C0 00 00      cmp b, 0
5843   2868 C6 78 28      je _if91_exit
5844   286B             _if91_true:
5845   286B             ; klingons = 1; 
5846   286B 3B 7A 64      mov d, _klingons ; $klingons
5847   286E DA            push d
5848   286F 26 01 00      mov b, $1
5849   2872 E7            pop d
5850   2873 FD 3E         mov [d], bl
5851   2875 0A 78 28      jmp _if91_exit
5852   2878             _if91_exit:
5853   2878             _if90_exit:
5854   2878             _if89_exit:
5855   2878             ; klingons_left = klingons_left + klingons; 
5856   2878 3B 7C 64      mov d, _klingons_left ; $klingons_left
5857   287B DA            push d
5858   287C 3B 7C 64      mov d, _klingons_left ; $klingons_left
5859   287F 32            mov bl, [d]
5860   2880 A7 00         mov bh, 0
5861   2882             ; --- START TERMS
5862   2882 D7            push a
5863   2883 11            mov a, b
5864   2884 3B 7A 64      mov d, _klingons ; $klingons
5865   2887 32            mov bl, [d]
5866   2888 A7 00         mov bh, 0
5867   288A 56            add b, a
5868   288B E4            pop a
5869   288C             ; --- END TERMS
5870   288C E7            pop d
5871   288D FD 3E         mov [d], bl
5872   288F             ; starbases = 0; 
5873   288F 3B A3 63      mov d, _starbases ; $starbases
5874   2892 DA            push d
5875   2893 26 00 00      mov b, $0
5876   2896 E7            pop d
5877   2897 FD 3E         mov [d], bl
5878   2899             ; if (get_rand(100) > 96) 
5879   2899             _if92_cond:
5880   2899 26 64 00      mov b, $64
5881   289C FD AB         swp b
5882   289E D8            push b
5883   289F 07 EB 1F      call get_rand
5884   28A2 51 02 00      add sp, 2
5885   28A5             ; --- START RELATIONAL
5886   28A5 D7            push a
5887   28A6 11            mov a, b
5888   28A7 26 60 00      mov b, $60
5889   28AA B0            cmp a, b
5890   28AB FD 7F         sgt ; >
5891   28AD E4            pop a
5892   28AE             ; --- END RELATIONAL
5893   28AE C0 00 00      cmp b, 0
5894   28B1 C6 C1 28      je _if92_exit
5895   28B4             _if92_true:
5896   28B4             ; starbases = 1; 
5897   28B4 3B A3 63      mov d, _starbases ; $starbases
5898   28B7 DA            push d
5899   28B8 26 01 00      mov b, $1
5900   28BB E7            pop d
5901   28BC FD 3E         mov [d], bl
5902   28BE 0A C1 28      jmp _if92_exit
5903   28C1             _if92_exit:
5904   28C1             ; starbases_left = starbases_left + starbases; 
5905   28C1 3B A6 63      mov d, _starbases_left ; $starbases_left
5906   28C4 DA            push d
5907   28C5 3B A6 63      mov d, _starbases_left ; $starbases_left
5908   28C8 32            mov bl, [d]
5909   28C9 A7 00         mov bh, 0
5910   28CB             ; --- START TERMS
5911   28CB D7            push a
5912   28CC 11            mov a, b
5913   28CD 3B A3 63      mov d, _starbases ; $starbases
5914   28D0 32            mov bl, [d]
5915   28D1 A7 00         mov bh, 0
5916   28D3 56            add b, a
5917   28D4 E4            pop a
5918   28D5             ; --- END TERMS
5919   28D5 E7            pop d
5920   28D6 FD 3E         mov [d], bl
5921   28D8             ; map[i][j] = (klingons << 8) + (starbases << 4) + rand8(); 
5922   28D8 3B CC 63      mov d, _map_data ; $map
5923   28DB D7            push a
5924   28DC DA            push d
5925   28DD FA FF FF      lea d, [bp + -1] ; $i
5926   28E0 2A            mov b, [d]
5927   28E1 E7            pop d
5928   28E2 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5929   28E6 DA            push d
5930   28E7 FA FD FF      lea d, [bp + -3] ; $j
5931   28EA 2A            mov b, [d]
5932   28EB E7            pop d
5933   28EC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5934   28F0 E4            pop a
5935   28F1 DA            push d
5936   28F2 3B 7A 64      mov d, _klingons ; $klingons
5937   28F5 32            mov bl, [d]
5938   28F6 A7 00         mov bh, 0
5939   28F8             ; --- START SHIFT
5940   28F8 D7            push a
5941   28F9 11            mov a, b
5942   28FA 26 08 00      mov b, $8
5943   28FD FD 39         mov c, b
5944   28FF 9D            shl a, cl
5945   2900 27            mov b, a
5946   2901 E4            pop a
5947   2902             ; --- END SHIFT
5948   2902             ; --- START TERMS
5949   2902 D7            push a
5950   2903 11            mov a, b
5951   2904 3B A3 63      mov d, _starbases ; $starbases
5952   2907 32            mov bl, [d]
5953   2908 A7 00         mov bh, 0
5954   290A             ; --- START SHIFT
5955   290A D7            push a
5956   290B 11            mov a, b
5957   290C 26 04 00      mov b, $4
5958   290F FD 39         mov c, b
5959   2911 9D            shl a, cl
5960   2912 27            mov b, a
5961   2913 E4            pop a
5962   2914             ; --- END SHIFT
5963   2914 56            add b, a
5964   2915 11            mov a, b
5965   2916 07 3A 20      call rand8
5966   2919 56            add b, a
5967   291A E4            pop a
5968   291B             ; --- END TERMS
5969   291B E7            pop d
5970   291C FD 43         mov [d], b
5971   291E             _for88_update:
5972   291E FA FD FF      lea d, [bp + -3] ; $j
5973   2921 2A            mov b, [d]
5974   2922 FD 77         inc b
5975   2924 FA FD FF      lea d, [bp + -3] ; $j
5976   2927 FD 43         mov [d], b
5977   2929 FD 7D         dec b
5978   292B 0A E2 27      jmp _for88_cond
5979   292E             _for88_exit:
5980   292E             _for87_update:
5981   292E FA FF FF      lea d, [bp + -1] ; $i
5982   2931 2A            mov b, [d]
5983   2932 FD 77         inc b
5984   2934 FA FF FF      lea d, [bp + -1] ; $i
5985   2937 FD 43         mov [d], b
5986   2939 FD 7D         dec b
5987   293B 0A C5 27      jmp _for87_cond
5988   293E             _for87_exit:
5989   293E             ; if (klingons_left > time_up) 
5990   293E             _if93_cond:
5991   293E 3B 7C 64      mov d, _klingons_left ; $klingons_left
5992   2941 32            mov bl, [d]
5993   2942 A7 00         mov bh, 0
5994   2944             ; --- START RELATIONAL
5995   2944 D7            push a
5996   2945 11            mov a, b
5997   2946 3B 88 64      mov d, _time_up ; $time_up
5998   2949 2A            mov b, [d]
5999   294A B0            cmp a, b
6000   294B FD 81         sgu ; > (unsigned)
6001   294D E4            pop a
6002   294E             ; --- END RELATIONAL
6003   294E C0 00 00      cmp b, 0
6004   2951 C6 6B 29      je _if93_exit
6005   2954             _if93_true:
6006   2954             ; time_up = klingons_left + 1; 
6007   2954 3B 88 64      mov d, _time_up ; $time_up
6008   2957 DA            push d
6009   2958 3B 7C 64      mov d, _klingons_left ; $klingons_left
6010   295B 32            mov bl, [d]
6011   295C A7 00         mov bh, 0
6012   295E             ; --- START TERMS
6013   295E D7            push a
6014   295F 11            mov a, b
6015   2960 26 01 00      mov b, $1
6016   2963 56            add b, a
6017   2964 E4            pop a
6018   2965             ; --- END TERMS
6019   2965 E7            pop d
6020   2966 FD 43         mov [d], b
6021   2968 0A 6B 29      jmp _if93_exit
6022   296B             _if93_exit:
6023   296B             ; if (starbases_left == 0) { 
6024   296B             _if94_cond:
6025   296B 3B A6 63      mov d, _starbases_left ; $starbases_left
6026   296E 32            mov bl, [d]
6027   296F A7 00         mov bh, 0
6028   2971             ; --- START RELATIONAL
6029   2971 D7            push a
6030   2972 11            mov a, b
6031   2973 26 00 00      mov b, $0
6032   2976 B0            cmp a, b
6033   2977 FD 71         seq ; ==
6034   2979 E4            pop a
6035   297A             ; --- END RELATIONAL
6036   297A C0 00 00      cmp b, 0
6037   297D C6 85 2A      je _if94_exit
6038   2980             _if94_true:
6039   2980             ; yp = rand8(); 
6040   2980 FA FC FF      lea d, [bp + -4] ; $yp
6041   2983 DA            push d
6042   2984 07 3A 20      call rand8
6043   2987 E7            pop d
6044   2988 FD 3E         mov [d], bl
6045   298A             ; xp = rand8(); 
6046   298A FA FB FF      lea d, [bp + -5] ; $xp
6047   298D DA            push d
6048   298E 07 3A 20      call rand8
6049   2991 E7            pop d
6050   2992 FD 3E         mov [d], bl
6051   2994             ; if (map[yp][xp] < 0x200) { 
6052   2994             _if95_cond:
6053   2994 3B CC 63      mov d, _map_data ; $map
6054   2997 D7            push a
6055   2998 DA            push d
6056   2999 FA FC FF      lea d, [bp + -4] ; $yp
6057   299C 32            mov bl, [d]
6058   299D A7 00         mov bh, 0
6059   299F E7            pop d
6060   29A0 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6061   29A4 DA            push d
6062   29A5 FA FB FF      lea d, [bp + -5] ; $xp
6063   29A8 32            mov bl, [d]
6064   29A9 A7 00         mov bh, 0
6065   29AB E7            pop d
6066   29AC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6067   29B0 E4            pop a
6068   29B1 2A            mov b, [d]
6069   29B2             ; --- START RELATIONAL
6070   29B2 D7            push a
6071   29B3 11            mov a, b
6072   29B4 26 00 02      mov b, $200
6073   29B7 B0            cmp a, b
6074   29B8 FD 75         slu ; < (unsigned)
6075   29BA E4            pop a
6076   29BB             ; --- END RELATIONAL
6077   29BB C0 00 00      cmp b, 0
6078   29BE C6 23 2A      je _if95_exit
6079   29C1             _if95_true:
6080   29C1             ; map[yp][xp] = map[yp][xp] + (1 << 8); 
6081   29C1 3B CC 63      mov d, _map_data ; $map
6082   29C4 D7            push a
6083   29C5 DA            push d
6084   29C6 FA FC FF      lea d, [bp + -4] ; $yp
6085   29C9 32            mov bl, [d]
6086   29CA A7 00         mov bh, 0
6087   29CC E7            pop d
6088   29CD FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6089   29D1 DA            push d
6090   29D2 FA FB FF      lea d, [bp + -5] ; $xp
6091   29D5 32            mov bl, [d]
6092   29D6 A7 00         mov bh, 0
6093   29D8 E7            pop d
6094   29D9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6095   29DD E4            pop a
6096   29DE DA            push d
6097   29DF 3B CC 63      mov d, _map_data ; $map
6098   29E2 D7            push a
6099   29E3 DA            push d
6100   29E4 FA FC FF      lea d, [bp + -4] ; $yp
6101   29E7 32            mov bl, [d]
6102   29E8 A7 00         mov bh, 0
6103   29EA E7            pop d
6104   29EB FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6105   29EF DA            push d
6106   29F0 FA FB FF      lea d, [bp + -5] ; $xp
6107   29F3 32            mov bl, [d]
6108   29F4 A7 00         mov bh, 0
6109   29F6 E7            pop d
6110   29F7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6111   29FB E4            pop a
6112   29FC 2A            mov b, [d]
6113   29FD             ; --- START TERMS
6114   29FD D7            push a
6115   29FE 11            mov a, b
6116   29FF 26 01 00      mov b, $1
6117   2A02             ; --- START SHIFT
6118   2A02 D7            push a
6119   2A03 11            mov a, b
6120   2A04 26 08 00      mov b, $8
6121   2A07 FD 39         mov c, b
6122   2A09 9D            shl a, cl
6123   2A0A 27            mov b, a
6124   2A0B E4            pop a
6125   2A0C             ; --- END SHIFT
6126   2A0C 56            add b, a
6127   2A0D E4            pop a
6128   2A0E             ; --- END TERMS
6129   2A0E E7            pop d
6130   2A0F FD 43         mov [d], b
6131   2A11             ; klingons_left++; 
6132   2A11 3B 7C 64      mov d, _klingons_left ; $klingons_left
6133   2A14 32            mov bl, [d]
6134   2A15 A7 00         mov bh, 0
6135   2A17 FD 77         inc b
6136   2A19 3B 7C 64      mov d, _klingons_left ; $klingons_left
6137   2A1C FD 43         mov [d], b
6138   2A1E FD 7D         dec b
6139   2A20 0A 23 2A      jmp _if95_exit
6140   2A23             _if95_exit:
6141   2A23             ; map[yp][xp] = map[yp][xp] + (1 << 4); 
6142   2A23 3B CC 63      mov d, _map_data ; $map
6143   2A26 D7            push a
6144   2A27 DA            push d
6145   2A28 FA FC FF      lea d, [bp + -4] ; $yp
6146   2A2B 32            mov bl, [d]
6147   2A2C A7 00         mov bh, 0
6148   2A2E E7            pop d
6149   2A2F FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6150   2A33 DA            push d
6151   2A34 FA FB FF      lea d, [bp + -5] ; $xp
6152   2A37 32            mov bl, [d]
6153   2A38 A7 00         mov bh, 0
6154   2A3A E7            pop d
6155   2A3B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6156   2A3F E4            pop a
6157   2A40 DA            push d
6158   2A41 3B CC 63      mov d, _map_data ; $map
6159   2A44 D7            push a
6160   2A45 DA            push d
6161   2A46 FA FC FF      lea d, [bp + -4] ; $yp
6162   2A49 32            mov bl, [d]
6163   2A4A A7 00         mov bh, 0
6164   2A4C E7            pop d
6165   2A4D FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6166   2A51 DA            push d
6167   2A52 FA FB FF      lea d, [bp + -5] ; $xp
6168   2A55 32            mov bl, [d]
6169   2A56 A7 00         mov bh, 0
6170   2A58 E7            pop d
6171   2A59 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6172   2A5D E4            pop a
6173   2A5E 2A            mov b, [d]
6174   2A5F             ; --- START TERMS
6175   2A5F D7            push a
6176   2A60 11            mov a, b
6177   2A61 26 01 00      mov b, $1
6178   2A64             ; --- START SHIFT
6179   2A64 D7            push a
6180   2A65 11            mov a, b
6181   2A66 26 04 00      mov b, $4
6182   2A69 FD 39         mov c, b
6183   2A6B 9D            shl a, cl
6184   2A6C 27            mov b, a
6185   2A6D E4            pop a
6186   2A6E             ; --- END SHIFT
6187   2A6E 56            add b, a
6188   2A6F E4            pop a
6189   2A70             ; --- END TERMS
6190   2A70 E7            pop d
6191   2A71 FD 43         mov [d], b
6192   2A73             ; starbases_left++; 
6193   2A73 3B A6 63      mov d, _starbases_left ; $starbases_left
6194   2A76 32            mov bl, [d]
6195   2A77 A7 00         mov bh, 0
6196   2A79 FD 77         inc b
6197   2A7B 3B A6 63      mov d, _starbases_left ; $starbases_left
6198   2A7E FD 43         mov [d], b
6199   2A80 FD 7D         dec b
6200   2A82 0A 85 2A      jmp _if94_exit
6201   2A85             _if94_exit:
6202   2A85             ; total_klingons = klingons_left; 
6203   2A85 3B 7B 64      mov d, _total_klingons ; $total_klingons
6204   2A88 DA            push d
6205   2A89 3B 7C 64      mov d, _klingons_left ; $klingons_left
6206   2A8C 32            mov bl, [d]
6207   2A8D A7 00         mov bh, 0
6208   2A8F E7            pop d
6209   2A90 FD 3E         mov [d], bl
6210   2A92             ; if (starbases_left != 1) { 
6211   2A92             _if96_cond:
6212   2A92 3B A6 63      mov d, _starbases_left ; $starbases_left
6213   2A95 32            mov bl, [d]
6214   2A96 A7 00         mov bh, 0
6215   2A98             ; --- START RELATIONAL
6216   2A98 D7            push a
6217   2A99 11            mov a, b
6218   2A9A 26 01 00      mov b, $1
6219   2A9D B0            cmp a, b
6220   2A9E FD 72         sneq ; !=
6221   2AA0 E4            pop a
6222   2AA1             ; --- END RELATIONAL
6223   2AA1 C0 00 00      cmp b, 0
6224   2AA4 C6 D0 2A      je _if96_exit
6225   2AA7             _if96_true:
6226   2AA7             ; strcpy(plural_2, "s"); 
6227   2AA7 26 6A 69      mov b, _s61 ; "s"
6228   2AAA FD AB         swp b
6229   2AAC D8            push b
6230   2AAD 3B 9F 65      mov d, _plural_2_data ; $plural_2
6231   2AB0 2D            mov b, d
6232   2AB1 FD AB         swp b
6233   2AB3 D8            push b
6234   2AB4 07 14 04      call strcpy
6235   2AB7 51 04 00      add sp, 4
6236   2ABA             ; strcpy(plural, "are"); 
6237   2ABA 26 F7 67      mov b, _s34 ; "are"
6238   2ABD FD AB         swp b
6239   2ABF D8            push b
6240   2AC0 3B A2 65      mov d, _plural_data ; $plural
6241   2AC3 2D            mov b, d
6242   2AC4 FD AB         swp b
6243   2AC6 D8            push b
6244   2AC7 07 14 04      call strcpy
6245   2ACA 51 04 00      add sp, 4
6246   2ACD 0A D0 2A      jmp _if96_exit
6247   2AD0             _if96_exit:
6248   2AD0             ; printf("Your orders are as follows:\nDestroy the %d Klingon warships which have",klingons_left); 
6249   2AD0 3B 7C 64      mov d, _klingons_left ; $klingons_left
6250   2AD3 32            mov bl, [d]
6251   2AD4 A7 00         mov bh, 0
6252   2AD6 DD            push bl
6253   2AD7 26 6C 69      mov b, _s62 ; "Your orders are as follows:\nDestroy the %d Klingon warships which have"
6254   2ADA FD AB         swp b
6255   2ADC D8            push b
6256   2ADD 07 BA 07      call printf
6257   2AE0 51 03 00      add sp, 3
6258   2AE3             ; printf("invaded\n the galaxy before they can attack Federation Headquarters\n"); 
6259   2AE3 26 B3 69      mov b, _s63 ; "invaded\n the galaxy before they can attack Federation Headquarters\n"
6260   2AE6 FD AB         swp b
6261   2AE8 D8            push b
6262   2AE9 07 BA 07      call printf
6263   2AEC 51 02 00      add sp, 2
6264   2AEF             ; printf(" on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy",  
6265   2AEF 3B 9F 65      mov d, _plural_2_data ; $plural_2
6266   2AF2 2D            mov b, d
6267   2AF3 FD AB         swp b
6268   2AF5 D8            push b
6269   2AF6 3B A6 63      mov d, _starbases_left ; $starbases_left
6270   2AF9 32            mov bl, [d]
6271   2AFA A7 00         mov bh, 0
6272   2AFC DD            push bl
6273   2AFD 3B A2 65      mov d, _plural_data ; $plural
6274   2B00 2D            mov b, d
6275   2B01 FD AB         swp b
6276   2B03 D8            push b
6277   2B04 3B 88 64      mov d, _time_up ; $time_up
6278   2B07 2A            mov b, [d]
6279   2B08 FD AB         swp b
6280   2B0A D8            push b
6281   2B0B 3B 86 64      mov d, _time_start ; $time_start
6282   2B0E 2A            mov b, [d]
6283   2B0F             ; --- START TERMS
6284   2B0F D7            push a
6285   2B10 11            mov a, b
6286   2B11 3B 88 64      mov d, _time_up ; $time_up
6287   2B14 2A            mov b, [d]
6288   2B15 56            add b, a
6289   2B16 E4            pop a
6290   2B17             ; --- END TERMS
6291   2B17 FD AB         swp b
6292   2B19 D8            push b
6293   2B1A 26 F7 69      mov b, _s64 ; " on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy"
6294   2B1D FD AB         swp b
6295   2B1F D8            push b
6296   2B20 07 BA 07      call printf
6297   2B23 51 0B 00      add sp, 11
6298   2B26             ; printf(" for resupplying your ship.\n\n Hit any key to accept command. "); 
6299   2B26 26 46 6A      mov b, _s65 ; " for resupplying your ship.\n\n Hit any key to accept command. "
6300   2B29 FD AB         swp b
6301   2B2B D8            push b
6302   2B2C 07 BA 07      call printf
6303   2B2F 51 02 00      add sp, 2
6304   2B32             ; getchar(); 
6305   2B32 07 92 17      call getchar
6306   2B35 F9            leave
6307   2B36 09            ret
6308   2B37             
6309   2B37             place_ship:
6310   2B37 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6311   2B3A             ; quad[FROM_FIXED00(ship_y) - 1][FROM_FIXED00(ship_x) - 1] =  		4     ; 
6312   2B3A 3B A4 64      mov d, _quad_data ; $quad
6313   2B3D D7            push a
6314   2B3E DA            push d
6315   2B3F 3B 9E 64      mov d, _ship_y ; $ship_y
6316   2B42 2A            mov b, [d]
6317   2B43 FD AB         swp b
6318   2B45 D8            push b
6319   2B46 07 DA 1F      call FROM_FIXED00
6320   2B49 51 02 00      add sp, 2
6321   2B4C             ; --- START TERMS
6322   2B4C D7            push a
6323   2B4D 11            mov a, b
6324   2B4E 26 01 00      mov b, $1
6325   2B51 60            sub a, b
6326   2B52 27            mov b, a
6327   2B53 E4            pop a
6328   2B54             ; --- END TERMS
6329   2B54 E7            pop d
6330   2B55 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
6331   2B59 DA            push d
6332   2B5A 3B A0 64      mov d, _ship_x ; $ship_x
6333   2B5D 2A            mov b, [d]
6334   2B5E FD AB         swp b
6335   2B60 D8            push b
6336   2B61 07 DA 1F      call FROM_FIXED00
6337   2B64 51 02 00      add sp, 2
6338   2B67             ; --- START TERMS
6339   2B67 D7            push a
6340   2B68 11            mov a, b
6341   2B69 26 01 00      mov b, $1
6342   2B6C 60            sub a, b
6343   2B6D 27            mov b, a
6344   2B6E E4            pop a
6345   2B6F             ; --- END TERMS
6346   2B6F E7            pop d
6347   2B70 5A            add d, b
6348   2B71 E4            pop a
6349   2B72 DA            push d
6350   2B73 26 04 00      mov b, $4
6351   2B76 E7            pop d
6352   2B77 FD 3E         mov [d], bl
6353   2B79 F9            leave
6354   2B7A 09            ret
6355   2B7B             
6356   2B7B             new_quadrant:
6357   2B7B F8 00 00      enter 0 ; (push bp; mov bp, sp)
6358   2B7E             ; int i; 
6359   2B7E 52 02 00      sub sp, 2
6360   2B81             ; unsigned int        tmp; 
6361   2B81 52 02 00      sub sp, 2
6362   2B84             ; struct klingon *k; 
6363   2B84 52 02 00      sub sp, 2
6364   2B87             ; k = &kdata; 
6365   2B87 FA FB FF      lea d, [bp + -5] ; $k
6366   2B8A DA            push d
6367   2B8B 3B 6E 64      mov d, _kdata_data ; $kdata
6368   2B8E 2D            mov b, d
6369   2B8F E7            pop d
6370   2B90 FD 43         mov [d], b
6371   2B92             ; klingons = 0; 
6372   2B92 3B 7A 64      mov d, _klingons ; $klingons
6373   2B95 DA            push d
6374   2B96 26 00 00      mov b, $0
6375   2B99 E7            pop d
6376   2B9A FD 3E         mov [d], bl
6377   2B9C             ; starbases = 0; 
6378   2B9C 3B A3 63      mov d, _starbases ; $starbases
6379   2B9F DA            push d
6380   2BA0 26 00 00      mov b, $0
6381   2BA3 E7            pop d
6382   2BA4 FD 3E         mov [d], bl
6383   2BA6             ; stars = 0; 
6384   2BA6 3B 85 64      mov d, _stars ; $stars
6385   2BA9 DA            push d
6386   2BAA 26 00 00      mov b, $0
6387   2BAD E7            pop d
6388   2BAE FD 3E         mov [d], bl
6389   2BB0             ; d4 = get_rand(50) - 1; 
6390   2BB0 3B 9C 64      mov d, _d4 ; $d4
6391   2BB3 DA            push d
6392   2BB4 26 32 00      mov b, $32
6393   2BB7 FD AB         swp b
6394   2BB9 D8            push b
6395   2BBA 07 EB 1F      call get_rand
6396   2BBD 51 02 00      add sp, 2
6397   2BC0             ; --- START TERMS
6398   2BC0 D7            push a
6399   2BC1 11            mov a, b
6400   2BC2 26 01 00      mov b, $1
6401   2BC5 60            sub a, b
6402   2BC6 27            mov b, a
6403   2BC7 E4            pop a
6404   2BC8             ; --- END TERMS
6405   2BC8 E7            pop d
6406   2BC9 FD 43         mov [d], b
6407   2BCB             ; map[quad_y][quad_x] = map[quad_y][quad_x] |   0x1000		/* Set if this sector was mapped */          ; 
6408   2BCB 3B CC 63      mov d, _map_data ; $map
6409   2BCE D7            push a
6410   2BCF DA            push d
6411   2BD0 3B 7F 64      mov d, _quad_y ; $quad_y
6412   2BD3 2A            mov b, [d]
6413   2BD4 E7            pop d
6414   2BD5 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6415   2BD9 DA            push d
6416   2BDA 3B 81 64      mov d, _quad_x ; $quad_x
6417   2BDD 2A            mov b, [d]
6418   2BDE E7            pop d
6419   2BDF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6420   2BE3 E4            pop a
6421   2BE4 DA            push d
6422   2BE5 3B CC 63      mov d, _map_data ; $map
6423   2BE8 D7            push a
6424   2BE9 DA            push d
6425   2BEA 3B 7F 64      mov d, _quad_y ; $quad_y
6426   2BED 2A            mov b, [d]
6427   2BEE E7            pop d
6428   2BEF FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6429   2BF3 DA            push d
6430   2BF4 3B 81 64      mov d, _quad_x ; $quad_x
6431   2BF7 2A            mov b, [d]
6432   2BF8 E7            pop d
6433   2BF9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6434   2BFD E4            pop a
6435   2BFE 2A            mov b, [d]
6436   2BFF D7            push a
6437   2C00 11            mov a, b
6438   2C01 26 00 10      mov b, $1000
6439   2C04 FD 70         or b, a ; |
6440   2C06 E4            pop a
6441   2C07 E7            pop d
6442   2C08 FD 43         mov [d], b
6443   2C0A             ; if (quad_y >= 1 && quad_y <= 8 && quad_x >= 1 && quad_x <= 8) { 
6444   2C0A             _if97_cond:
6445   2C0A 3B 7F 64      mov d, _quad_y ; $quad_y
6446   2C0D 2A            mov b, [d]
6447   2C0E             ; --- START RELATIONAL
6448   2C0E D7            push a
6449   2C0F 11            mov a, b
6450   2C10 26 01 00      mov b, $1
6451   2C13 B0            cmp a, b
6452   2C14 FD 80         sge ; >=
6453   2C16 E4            pop a
6454   2C17             ; --- END RELATIONAL
6455   2C17             ; --- START LOGICAL AND
6456   2C17 D7            push a
6457   2C18 11            mov a, b
6458   2C19 3B 7F 64      mov d, _quad_y ; $quad_y
6459   2C1C 2A            mov b, [d]
6460   2C1D             ; --- START RELATIONAL
6461   2C1D D7            push a
6462   2C1E 11            mov a, b
6463   2C1F 26 08 00      mov b, $8
6464   2C22 B0            cmp a, b
6465   2C23 FD 74         sle ; <= (signed)
6466   2C25 E4            pop a
6467   2C26             ; --- END RELATIONAL
6468   2C26 FD A7         sand a, b
6469   2C28 11            mov a, b
6470   2C29 3B 81 64      mov d, _quad_x ; $quad_x
6471   2C2C 2A            mov b, [d]
6472   2C2D             ; --- START RELATIONAL
6473   2C2D D7            push a
6474   2C2E 11            mov a, b
6475   2C2F 26 01 00      mov b, $1
6476   2C32 B0            cmp a, b
6477   2C33 FD 80         sge ; >=
6478   2C35 E4            pop a
6479   2C36             ; --- END RELATIONAL
6480   2C36 FD A7         sand a, b
6481   2C38 11            mov a, b
6482   2C39 3B 81 64      mov d, _quad_x ; $quad_x
6483   2C3C 2A            mov b, [d]
6484   2C3D             ; --- START RELATIONAL
6485   2C3D D7            push a
6486   2C3E 11            mov a, b
6487   2C3F 26 08 00      mov b, $8
6488   2C42 B0            cmp a, b
6489   2C43 FD 74         sle ; <= (signed)
6490   2C45 E4            pop a
6491   2C46             ; --- END RELATIONAL
6492   2C46 FD A7         sand a, b
6493   2C48 E4            pop a
6494   2C49             ; --- END LOGICAL AND
6495   2C49 C0 00 00      cmp b, 0
6496   2C4C C6 B8 2C      je _if97_exit
6497   2C4F             _if97_true:
6498   2C4F             ; quadrant_name(0, quad_y, quad_x); 
6499   2C4F 3B 81 64      mov d, _quad_x ; $quad_x
6500   2C52 2A            mov b, [d]
6501   2C53 DD            push bl
6502   2C54 3B 7F 64      mov d, _quad_y ; $quad_y
6503   2C57 2A            mov b, [d]
6504   2C58 DD            push bl
6505   2C59 26 00 00      mov b, $0
6506   2C5C DD            push bl
6507   2C5D 07 87 60      call quadrant_name
6508   2C60 51 03 00      add sp, 3
6509   2C63             ; if (TO_FIXED(time_start) != stardate) 
6510   2C63             _if98_cond:
6511   2C63 3B 86 64      mov d, _time_start ; $time_start
6512   2C66 2A            mov b, [d]
6513   2C67 FD AB         swp b
6514   2C69 D8            push b
6515   2C6A 07 A5 1F      call TO_FIXED
6516   2C6D 51 02 00      add sp, 2
6517   2C70             ; --- START RELATIONAL
6518   2C70 D7            push a
6519   2C71 11            mov a, b
6520   2C72 3B A2 64      mov d, _stardate ; $stardate
6521   2C75 2A            mov b, [d]
6522   2C76 B0            cmp a, b
6523   2C77 FD 72         sneq ; !=
6524   2C79 E4            pop a
6525   2C7A             ; --- END RELATIONAL
6526   2C7A C0 00 00      cmp b, 0
6527   2C7D C6 96 2C      je _if98_else
6528   2C80             _if98_true:
6529   2C80             ; printf("Now entering %s quadrant...\n\n", quadname); 
6530   2C80 3B E4 64      mov d, _quadname_data ; $quadname
6531   2C83 2D            mov b, d
6532   2C84 FD AB         swp b
6533   2C86 D8            push b
6534   2C87 26 84 6A      mov b, _s66 ; "Now entering %s quadrant...\n\n"
6535   2C8A FD AB         swp b
6536   2C8C D8            push b
6537   2C8D 07 BA 07      call printf
6538   2C90 51 04 00      add sp, 4
6539   2C93 0A B5 2C      jmp _if98_exit
6540   2C96             _if98_else:
6541   2C96             ; puts("\nYour mission begins with your starship located"); 
6542   2C96 26 A2 6A      mov b, _s67 ; "\nYour mission begins with your starship located"
6543   2C99 FD AB         swp b
6544   2C9B D8            push b
6545   2C9C 07 BB 17      call puts
6546   2C9F 51 02 00      add sp, 2
6547   2CA2             ; printf("in the galactic quadrant %s.\n\n", quadname); 
6548   2CA2 3B E4 64      mov d, _quadname_data ; $quadname
6549   2CA5 2D            mov b, d
6550   2CA6 FD AB         swp b
6551   2CA8 D8            push b
6552   2CA9 26 D2 6A      mov b, _s68 ; "in the galactic quadrant %s.\n\n"
6553   2CAC FD AB         swp b
6554   2CAE D8            push b
6555   2CAF 07 BA 07      call printf
6556   2CB2 51 04 00      add sp, 4
6557   2CB5             _if98_exit:
6558   2CB5 0A B8 2C      jmp _if97_exit
6559   2CB8             _if97_exit:
6560   2CB8             ; tmp = map[quad_y][quad_x]; 
6561   2CB8 FA FD FF      lea d, [bp + -3] ; $tmp
6562   2CBB DA            push d
6563   2CBC 3B CC 63      mov d, _map_data ; $map
6564   2CBF D7            push a
6565   2CC0 DA            push d
6566   2CC1 3B 7F 64      mov d, _quad_y ; $quad_y
6567   2CC4 2A            mov b, [d]
6568   2CC5 E7            pop d
6569   2CC6 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6570   2CCA DA            push d
6571   2CCB 3B 81 64      mov d, _quad_x ; $quad_x
6572   2CCE 2A            mov b, [d]
6573   2CCF E7            pop d
6574   2CD0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6575   2CD4 E4            pop a
6576   2CD5 2A            mov b, [d]
6577   2CD6 E7            pop d
6578   2CD7 FD 43         mov [d], b
6579   2CD9             ; klingons = (tmp >> 8) & 0x0F; 
6580   2CD9 3B 7A 64      mov d, _klingons ; $klingons
6581   2CDC DA            push d
6582   2CDD FA FD FF      lea d, [bp + -3] ; $tmp
6583   2CE0 2A            mov b, [d]
6584   2CE1             ; --- START SHIFT
6585   2CE1 D7            push a
6586   2CE2 11            mov a, b
6587   2CE3 26 08 00      mov b, $8
6588   2CE6 FD 39         mov c, b
6589   2CE8 A1            shr a, cl
6590   2CE9 27            mov b, a
6591   2CEA E4            pop a
6592   2CEB             ; --- END SHIFT
6593   2CEB D7            push a
6594   2CEC 11            mov a, b
6595   2CED 26 0F 00      mov b, $f
6596   2CF0 FD 92         and b, a ; &
6597   2CF2 E4            pop a
6598   2CF3 E7            pop d
6599   2CF4 FD 3E         mov [d], bl
6600   2CF6             ; starbases = (tmp >> 4) & 0x0F; 
6601   2CF6 3B A3 63      mov d, _starbases ; $starbases
6602   2CF9 DA            push d
6603   2CFA FA FD FF      lea d, [bp + -3] ; $tmp
6604   2CFD 2A            mov b, [d]
6605   2CFE             ; --- START SHIFT
6606   2CFE D7            push a
6607   2CFF 11            mov a, b
6608   2D00 26 04 00      mov b, $4
6609   2D03 FD 39         mov c, b
6610   2D05 A1            shr a, cl
6611   2D06 27            mov b, a
6612   2D07 E4            pop a
6613   2D08             ; --- END SHIFT
6614   2D08 D7            push a
6615   2D09 11            mov a, b
6616   2D0A 26 0F 00      mov b, $f
6617   2D0D FD 92         and b, a ; &
6618   2D0F E4            pop a
6619   2D10 E7            pop d
6620   2D11 FD 3E         mov [d], bl
6621   2D13             ; stars = tmp & 0x0F; 
6622   2D13 3B 85 64      mov d, _stars ; $stars
6623   2D16 DA            push d
6624   2D17 FA FD FF      lea d, [bp + -3] ; $tmp
6625   2D1A 2A            mov b, [d]
6626   2D1B D7            push a
6627   2D1C 11            mov a, b
6628   2D1D 26 0F 00      mov b, $f
6629   2D20 FD 92         and b, a ; &
6630   2D22 E4            pop a
6631   2D23 E7            pop d
6632   2D24 FD 3E         mov [d], bl
6633   2D26             ; if (klingons > 0) { 
6634   2D26             _if99_cond:
6635   2D26 3B 7A 64      mov d, _klingons ; $klingons
6636   2D29 32            mov bl, [d]
6637   2D2A A7 00         mov bh, 0
6638   2D2C             ; --- START RELATIONAL
6639   2D2C D7            push a
6640   2D2D 11            mov a, b
6641   2D2E 26 00 00      mov b, $0
6642   2D31 B0            cmp a, b
6643   2D32 FD 81         sgu ; > (unsigned)
6644   2D34 E4            pop a
6645   2D35             ; --- END RELATIONAL
6646   2D35 C0 00 00      cmp b, 0
6647   2D38 C6 6C 2D      je _if99_exit
6648   2D3B             _if99_true:
6649   2D3B             ; printf("Combat Area  Condition Red\n"); 
6650   2D3B 26 F1 6A      mov b, _s69 ; "Combat Area  Condition Red\n"
6651   2D3E FD AB         swp b
6652   2D40 D8            push b
6653   2D41 07 BA 07      call printf
6654   2D44 51 02 00      add sp, 2
6655   2D47             ; if (shield < 200) 
6656   2D47             _if100_cond:
6657   2D47 3B 83 64      mov d, _shield ; $shield
6658   2D4A 2A            mov b, [d]
6659   2D4B             ; --- START RELATIONAL
6660   2D4B D7            push a
6661   2D4C 11            mov a, b
6662   2D4D 26 C8 00      mov b, $c8
6663   2D50 B0            cmp a, b
6664   2D51 FD 73         slt ; < (signed)
6665   2D53 E4            pop a
6666   2D54             ; --- END RELATIONAL
6667   2D54 C0 00 00      cmp b, 0
6668   2D57 C6 69 2D      je _if100_exit
6669   2D5A             _if100_true:
6670   2D5A             ; printf("Shields Dangerously Low\n"); 
6671   2D5A 26 0D 6B      mov b, _s70 ; "Shields Dangerously Low\n"
6672   2D5D FD AB         swp b
6673   2D5F D8            push b
6674   2D60 07 BA 07      call printf
6675   2D63 51 02 00      add sp, 2
6676   2D66 0A 69 2D      jmp _if100_exit
6677   2D69             _if100_exit:
6678   2D69 0A 6C 2D      jmp _if99_exit
6679   2D6C             _if99_exit:
6680   2D6C             ; for (i = 1; i <= 3; i++) { 
6681   2D6C             _for101_init:
6682   2D6C FA FF FF      lea d, [bp + -1] ; $i
6683   2D6F DA            push d
6684   2D70 26 01 00      mov b, $1
6685   2D73 E7            pop d
6686   2D74 FD 43         mov [d], b
6687   2D76             _for101_cond:
6688   2D76 FA FF FF      lea d, [bp + -1] ; $i
6689   2D79 2A            mov b, [d]
6690   2D7A             ; --- START RELATIONAL
6691   2D7A D7            push a
6692   2D7B 11            mov a, b
6693   2D7C 26 03 00      mov b, $3
6694   2D7F B0            cmp a, b
6695   2D80 FD 74         sle ; <= (signed)
6696   2D82 E4            pop a
6697   2D83             ; --- END RELATIONAL
6698   2D83 C0 00 00      cmp b, 0
6699   2D86 C6 D7 2D      je _for101_exit
6700   2D89             _for101_block:
6701   2D89             ; k->y = 0; 
6702   2D89 FA FB FF      lea d, [bp + -5] ; $k
6703   2D8C FD 2A         mov d, [d]
6704   2D8E 58 00 00      add d, 0
6705   2D91 DA            push d
6706   2D92 26 00 00      mov b, $0
6707   2D95 E7            pop d
6708   2D96 FD 3E         mov [d], bl
6709   2D98             ; k->x = 0; 
6710   2D98 FA FB FF      lea d, [bp + -5] ; $k
6711   2D9B FD 2A         mov d, [d]
6712   2D9D 58 01 00      add d, 1
6713   2DA0 DA            push d
6714   2DA1 26 00 00      mov b, $0
6715   2DA4 E7            pop d
6716   2DA5 FD 3E         mov [d], bl
6717   2DA7             ; k->energy = 0; 
6718   2DA7 FA FB FF      lea d, [bp + -5] ; $k
6719   2DAA FD 2A         mov d, [d]
6720   2DAC 58 02 00      add d, 2
6721   2DAF DA            push d
6722   2DB0 26 00 00      mov b, $0
6723   2DB3 E7            pop d
6724   2DB4 FD 43         mov [d], b
6725   2DB6             ; k++; 
6726   2DB6 FA FB FF      lea d, [bp + -5] ; $k
6727   2DB9 2A            mov b, [d]
6728   2DBA FD 77         inc b
6729   2DBC FD 77         inc b
6730   2DBE FA FB FF      lea d, [bp + -5] ; $k
6731   2DC1 FD 43         mov [d], b
6732   2DC3 FD 7D         dec b
6733   2DC5 FD 7D         dec b
6734   2DC7             _for101_update:
6735   2DC7 FA FF FF      lea d, [bp + -1] ; $i
6736   2DCA 2A            mov b, [d]
6737   2DCB FD 77         inc b
6738   2DCD FA FF FF      lea d, [bp + -1] ; $i
6739   2DD0 FD 43         mov [d], b
6740   2DD2 FD 7D         dec b
6741   2DD4 0A 76 2D      jmp _for101_cond
6742   2DD7             _for101_exit:
6743   2DD7             ; memset(quad,  		0      , 64); 
6744   2DD7 26 40 00      mov b, $40
6745   2DDA FD AB         swp b
6746   2DDC D8            push b
6747   2DDD 26 00 00      mov b, $0
6748   2DE0 DD            push bl
6749   2DE1 3B A4 64      mov d, _quad_data ; $quad
6750   2DE4 2D            mov b, d
6751   2DE5 FD AB         swp b
6752   2DE7 D8            push b
6753   2DE8 07 DE 05      call memset
6754   2DEB 51 05 00      add sp, 5
6755   2DEE             ; place_ship(); 
6756   2DEE 07 37 2B      call place_ship
6757   2DF1             ; if (klingons > 0) { 
6758   2DF1             _if102_cond:
6759   2DF1 3B 7A 64      mov d, _klingons ; $klingons
6760   2DF4 32            mov bl, [d]
6761   2DF5 A7 00         mov bh, 0
6762   2DF7             ; --- START RELATIONAL
6763   2DF7 D7            push a
6764   2DF8 11            mov a, b
6765   2DF9 26 00 00      mov b, $0
6766   2DFC B0            cmp a, b
6767   2DFD FD 81         sgu ; > (unsigned)
6768   2DFF E4            pop a
6769   2E00             ; --- END RELATIONAL
6770   2E00 C0 00 00      cmp b, 0
6771   2E03 C6 96 2E      je _if102_exit
6772   2E06             _if102_true:
6773   2E06             ; k = kdata; 
6774   2E06 FA FB FF      lea d, [bp + -5] ; $k
6775   2E09 DA            push d
6776   2E0A 3B 6E 64      mov d, _kdata_data ; $kdata
6777   2E0D 2D            mov b, d
6778   2E0E E7            pop d
6779   2E0F FD 43         mov [d], b
6780   2E11             ; for (i = 0; i < klingons; i++) { 
6781   2E11             _for103_init:
6782   2E11 FA FF FF      lea d, [bp + -1] ; $i
6783   2E14 DA            push d
6784   2E15 26 00 00      mov b, $0
6785   2E18 E7            pop d
6786   2E19 FD 43         mov [d], b
6787   2E1B             _for103_cond:
6788   2E1B FA FF FF      lea d, [bp + -1] ; $i
6789   2E1E 2A            mov b, [d]
6790   2E1F             ; --- START RELATIONAL
6791   2E1F D7            push a
6792   2E20 11            mov a, b
6793   2E21 3B 7A 64      mov d, _klingons ; $klingons
6794   2E24 32            mov bl, [d]
6795   2E25 A7 00         mov bh, 0
6796   2E27 B0            cmp a, b
6797   2E28 FD 73         slt ; < (signed)
6798   2E2A E4            pop a
6799   2E2B             ; --- END RELATIONAL
6800   2E2B C0 00 00      cmp b, 0
6801   2E2E C6 93 2E      je _for103_exit
6802   2E31             _for103_block:
6803   2E31             ; find_set_empty_place( 	3        , &k->y, &k->x); 
6804   2E31 FA FB FF      lea d, [bp + -5] ; $k
6805   2E34 FD 2A         mov d, [d]
6806   2E36 58 01 00      add d, 1
6807   2E39 2D            mov b, d
6808   2E3A FD AB         swp b
6809   2E3C D8            push b
6810   2E3D FA FB FF      lea d, [bp + -5] ; $k
6811   2E40 FD 2A         mov d, [d]
6812   2E42 58 00 00      add d, 0
6813   2E45 2D            mov b, d
6814   2E46 FD AB         swp b
6815   2E48 D8            push b
6816   2E49 26 03 00      mov b, $3
6817   2E4C DD            push bl
6818   2E4D 07 7B 5F      call find_set_empty_place
6819   2E50 51 05 00      add sp, 5
6820   2E53             ; k->energy = 100 + get_rand(200); 
6821   2E53 FA FB FF      lea d, [bp + -5] ; $k
6822   2E56 FD 2A         mov d, [d]
6823   2E58 58 02 00      add d, 2
6824   2E5B DA            push d
6825   2E5C 26 64 00      mov b, $64
6826   2E5F             ; --- START TERMS
6827   2E5F D7            push a
6828   2E60 11            mov a, b
6829   2E61 26 C8 00      mov b, $c8
6830   2E64 FD AB         swp b
6831   2E66 D8            push b
6832   2E67 07 EB 1F      call get_rand
6833   2E6A 51 02 00      add sp, 2
6834   2E6D 56            add b, a
6835   2E6E E4            pop a
6836   2E6F             ; --- END TERMS
6837   2E6F E7            pop d
6838   2E70 FD 43         mov [d], b
6839   2E72             ; k++; 
6840   2E72 FA FB FF      lea d, [bp + -5] ; $k
6841   2E75 2A            mov b, [d]
6842   2E76 FD 77         inc b
6843   2E78 FD 77         inc b
6844   2E7A FA FB FF      lea d, [bp + -5] ; $k
6845   2E7D FD 43         mov [d], b
6846   2E7F FD 7D         dec b
6847   2E81 FD 7D         dec b
6848   2E83             _for103_update:
6849   2E83 FA FF FF      lea d, [bp + -1] ; $i
6850   2E86 2A            mov b, [d]
6851   2E87 FD 77         inc b
6852   2E89 FA FF FF      lea d, [bp + -1] ; $i
6853   2E8C FD 43         mov [d], b
6854   2E8E FD 7D         dec b
6855   2E90 0A 1B 2E      jmp _for103_cond
6856   2E93             _for103_exit:
6857   2E93 0A 96 2E      jmp _if102_exit
6858   2E96             _if102_exit:
6859   2E96             ; if (starbases > 0) 
6860   2E96             _if104_cond:
6861   2E96 3B A3 63      mov d, _starbases ; $starbases
6862   2E99 32            mov bl, [d]
6863   2E9A A7 00         mov bh, 0
6864   2E9C             ; --- START RELATIONAL
6865   2E9C D7            push a
6866   2E9D 11            mov a, b
6867   2E9E 26 00 00      mov b, $0
6868   2EA1 B0            cmp a, b
6869   2EA2 FD 7F         sgt ; >
6870   2EA4 E4            pop a
6871   2EA5             ; --- END RELATIONAL
6872   2EA5 C0 00 00      cmp b, 0
6873   2EA8 C6 C6 2E      je _if104_exit
6874   2EAB             _if104_true:
6875   2EAB             ; find_set_empty_place( 		2     , &base_y, &base_x); 
6876   2EAB 3B A5 63      mov d, _base_x ; $base_x
6877   2EAE 2D            mov b, d
6878   2EAF FD AB         swp b
6879   2EB1 D8            push b
6880   2EB2 3B A4 63      mov d, _base_y ; $base_y
6881   2EB5 2D            mov b, d
6882   2EB6 FD AB         swp b
6883   2EB8 D8            push b
6884   2EB9 26 02 00      mov b, $2
6885   2EBC DD            push bl
6886   2EBD 07 7B 5F      call find_set_empty_place
6887   2EC0 51 05 00      add sp, 5
6888   2EC3 0A C6 2E      jmp _if104_exit
6889   2EC6             _if104_exit:
6890   2EC6             ; for (i = 1; i <= stars; i++) 
6891   2EC6             _for105_init:
6892   2EC6 FA FF FF      lea d, [bp + -1] ; $i
6893   2EC9 DA            push d
6894   2ECA 26 01 00      mov b, $1
6895   2ECD E7            pop d
6896   2ECE FD 43         mov [d], b
6897   2ED0             _for105_cond:
6898   2ED0 FA FF FF      lea d, [bp + -1] ; $i
6899   2ED3 2A            mov b, [d]
6900   2ED4             ; --- START RELATIONAL
6901   2ED4 D7            push a
6902   2ED5 11            mov a, b
6903   2ED6 3B 85 64      mov d, _stars ; $stars
6904   2ED9 32            mov bl, [d]
6905   2EDA A7 00         mov bh, 0
6906   2EDC B0            cmp a, b
6907   2EDD FD 74         sle ; <= (signed)
6908   2EDF E4            pop a
6909   2EE0             ; --- END RELATIONAL
6910   2EE0 C0 00 00      cmp b, 0
6911   2EE3 C6 0C 2F      je _for105_exit
6912   2EE6             _for105_block:
6913   2EE6             ; find_set_empty_place( 		1     ,   0   ,   0   ); 
6914   2EE6 26 00 00      mov b, $0
6915   2EE9 FD AB         swp b
6916   2EEB D8            push b
6917   2EEC 26 00 00      mov b, $0
6918   2EEF FD AB         swp b
6919   2EF1 D8            push b
6920   2EF2 26 01 00      mov b, $1
6921   2EF5 DD            push bl
6922   2EF6 07 7B 5F      call find_set_empty_place
6923   2EF9 51 05 00      add sp, 5
6924   2EFC             _for105_update:
6925   2EFC FA FF FF      lea d, [bp + -1] ; $i
6926   2EFF 2A            mov b, [d]
6927   2F00 FD 77         inc b
6928   2F02 FA FF FF      lea d, [bp + -1] ; $i
6929   2F05 FD 43         mov [d], b
6930   2F07 FD 7D         dec b
6931   2F09 0A D0 2E      jmp _for105_cond
6932   2F0C             _for105_exit:
6933   2F0C F9            leave
6934   2F0D 09            ret
6935   2F0E             
6936   2F0E             course_control:
6937   2F0E F8 00 00      enter 0 ; (push bp; mov bp, sp)
6938   2F11             ; int i; 
6939   2F11 52 02 00      sub sp, 2
6940   2F14             ; int       c1; 
6941   2F14 52 02 00      sub sp, 2
6942   2F17             ; int       warp; 
6943   2F17 52 02 00      sub sp, 2
6944   2F1A             ; unsigned int        n; 
6945   2F1A 52 02 00      sub sp, 2
6946   2F1D             ; int c2, c3, c4; 
6947   2F1D 52 02 00      sub sp, 2
6948   2F20 52 02 00      sub sp, 2
6949   2F23 52 02 00      sub sp, 2
6950   2F26             ; int       z1, z2; 
6951   2F26 52 02 00      sub sp, 2
6952   2F29 52 02 00      sub sp, 2
6953   2F2C             ; int       x1, x2; 
6954   2F2C 52 02 00      sub sp, 2
6955   2F2F 52 02 00      sub sp, 2
6956   2F32             ; int       x, y; 
6957   2F32 52 02 00      sub sp, 2
6958   2F35 52 02 00      sub sp, 2
6959   2F38             ; unsigned char                         outside = 0;		/* Outside galaxy flag */ 
6960   2F38 52 01 00      sub sp, 1
6961   2F3B             ; --- START LOCAL VAR INITIALIZATION
6962   2F3B FA E6 FF      lea d, [bp + -26] ; $outside
6963   2F3E DA            push d
6964   2F3F 26 00 00      mov b, $0
6965   2F42 E7            pop d
6966   2F43 FD 43         mov [d], b
6967   2F45             ; --- END LOCAL VAR INITIALIZATION
6968   2F45             ; unsigned char                         quad_y_old; 
6969   2F45 52 01 00      sub sp, 1
6970   2F48             ; unsigned char                         quad_x_old; 
6971   2F48 52 01 00      sub sp, 1
6972   2F4B             ; puts("Course (0-9): " ); 
6973   2F4B 26 26 6B      mov b, _s71 ; "Course (0-9): "
6974   2F4E FD AB         swp b
6975   2F50 D8            push b
6976   2F51 07 BB 17      call puts
6977   2F54 51 02 00      add sp, 2
6978   2F57             ; c1 = input_f00(); 
6979   2F57 FA FD FF      lea d, [bp + -3] ; $c1
6980   2F5A DA            push d
6981   2F5B 07 13 21      call input_f00
6982   2F5E E7            pop d
6983   2F5F FD 43         mov [d], b
6984   2F61             ; if (c1 == 900) 
6985   2F61             _if106_cond:
6986   2F61 FA FD FF      lea d, [bp + -3] ; $c1
6987   2F64 2A            mov b, [d]
6988   2F65             ; --- START RELATIONAL
6989   2F65 D7            push a
6990   2F66 11            mov a, b
6991   2F67 26 84 03      mov b, $384
6992   2F6A B0            cmp a, b
6993   2F6B FD 71         seq ; ==
6994   2F6D E4            pop a
6995   2F6E             ; --- END RELATIONAL
6996   2F6E C0 00 00      cmp b, 0
6997   2F71 C6 81 2F      je _if106_exit
6998   2F74             _if106_true:
6999   2F74             ; c1 = 100; 
7000   2F74 FA FD FF      lea d, [bp + -3] ; $c1
7001   2F77 DA            push d
7002   2F78 26 64 00      mov b, $64
7003   2F7B E7            pop d
7004   2F7C FD 43         mov [d], b
7005   2F7E 0A 81 2F      jmp _if106_exit
7006   2F81             _if106_exit:
7007   2F81             ; if (c1 < 0 || c1 > 900) { 
7008   2F81             _if107_cond:
7009   2F81 FA FD FF      lea d, [bp + -3] ; $c1
7010   2F84 2A            mov b, [d]
7011   2F85             ; --- START RELATIONAL
7012   2F85 D7            push a
7013   2F86 11            mov a, b
7014   2F87 26 00 00      mov b, $0
7015   2F8A B0            cmp a, b
7016   2F8B FD 73         slt ; < (signed)
7017   2F8D E4            pop a
7018   2F8E             ; --- END RELATIONAL
7019   2F8E             ; --- START LOGICAL OR
7020   2F8E D7            push a
7021   2F8F 11            mov a, b
7022   2F90 FA FD FF      lea d, [bp + -3] ; $c1
7023   2F93 2A            mov b, [d]
7024   2F94             ; --- START RELATIONAL
7025   2F94 D7            push a
7026   2F95 11            mov a, b
7027   2F96 26 84 03      mov b, $384
7028   2F99 B0            cmp a, b
7029   2F9A FD 7F         sgt ; >
7030   2F9C E4            pop a
7031   2F9D             ; --- END RELATIONAL
7032   2F9D FD A8         sor a, b ; ||
7033   2F9F E4            pop a
7034   2FA0             ; --- END LOGICAL OR
7035   2FA0 C0 00 00      cmp b, 0
7036   2FA3 C6 BE 2F      je _if107_exit
7037   2FA6             _if107_true:
7038   2FA6             ; printf("Lt. Sulu%s", inc_1); 
7039   2FA6 3B 18 65      mov d, _inc_1 ; $inc_1
7040   2FA9 2A            mov b, [d]
7041   2FAA FD AB         swp b
7042   2FAC D8            push b
7043   2FAD 26 35 6B      mov b, _s72 ; "Lt. Sulu%s"
7044   2FB0 FD AB         swp b
7045   2FB2 D8            push b
7046   2FB3 07 BA 07      call printf
7047   2FB6 51 04 00      add sp, 4
7048   2FB9             ; return; 
7049   2FB9 F9            leave
7050   2FBA 09            ret
7051   2FBB 0A BE 2F      jmp _if107_exit
7052   2FBE             _if107_exit:
7053   2FBE             ; if (damage[1] < 0) 
7054   2FBE             _if108_cond:
7055   2FBE 3B 8A 64      mov d, _damage_data ; $damage
7056   2FC1 D7            push a
7057   2FC2 DA            push d
7058   2FC3 26 01 00      mov b, $1
7059   2FC6 E7            pop d
7060   2FC7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7061   2FCB E4            pop a
7062   2FCC 2A            mov b, [d]
7063   2FCD             ; --- START RELATIONAL
7064   2FCD D7            push a
7065   2FCE 11            mov a, b
7066   2FCF 26 00 00      mov b, $0
7067   2FD2 B0            cmp a, b
7068   2FD3 FD 73         slt ; < (signed)
7069   2FD5 E4            pop a
7070   2FD6             ; --- END RELATIONAL
7071   2FD6 C0 00 00      cmp b, 0
7072   2FD9 C6 F2 2F      je _if108_exit
7073   2FDC             _if108_true:
7074   2FDC             ; strcpy(warpmax, "0.2"); 
7075   2FDC 26 40 6B      mov b, _s73 ; "0.2"
7076   2FDF FD AB         swp b
7077   2FE1 D8            push b
7078   2FE2 3B A7 65      mov d, _warpmax_data ; $warpmax
7079   2FE5 2D            mov b, d
7080   2FE6 FD AB         swp b
7081   2FE8 D8            push b
7082   2FE9 07 14 04      call strcpy
7083   2FEC 51 04 00      add sp, 4
7084   2FEF 0A F2 2F      jmp _if108_exit
7085   2FF2             _if108_exit:
7086   2FF2             ; printf("Warp Factor (0-%s): ", warpmax); 
7087   2FF2 3B A7 65      mov d, _warpmax_data ; $warpmax
7088   2FF5 2D            mov b, d
7089   2FF6 FD AB         swp b
7090   2FF8 D8            push b
7091   2FF9 26 44 6B      mov b, _s74 ; "Warp Factor (0-%s): "
7092   2FFC FD AB         swp b
7093   2FFE D8            push b
7094   2FFF 07 BA 07      call printf
7095   3002 51 04 00      add sp, 4
7096   3005             ; warp = input_f00(); 
7097   3005 FA FB FF      lea d, [bp + -5] ; $warp
7098   3008 DA            push d
7099   3009 07 13 21      call input_f00
7100   300C E7            pop d
7101   300D FD 43         mov [d], b
7102   300F             ; if (damage[1] < 0 && warp > 20) { 
7103   300F             _if109_cond:
7104   300F 3B 8A 64      mov d, _damage_data ; $damage
7105   3012 D7            push a
7106   3013 DA            push d
7107   3014 26 01 00      mov b, $1
7108   3017 E7            pop d
7109   3018 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7110   301C E4            pop a
7111   301D 2A            mov b, [d]
7112   301E             ; --- START RELATIONAL
7113   301E D7            push a
7114   301F 11            mov a, b
7115   3020 26 00 00      mov b, $0
7116   3023 B0            cmp a, b
7117   3024 FD 73         slt ; < (signed)
7118   3026 E4            pop a
7119   3027             ; --- END RELATIONAL
7120   3027             ; --- START LOGICAL AND
7121   3027 D7            push a
7122   3028 11            mov a, b
7123   3029 FA FB FF      lea d, [bp + -5] ; $warp
7124   302C 2A            mov b, [d]
7125   302D             ; --- START RELATIONAL
7126   302D D7            push a
7127   302E 11            mov a, b
7128   302F 26 14 00      mov b, $14
7129   3032 B0            cmp a, b
7130   3033 FD 7F         sgt ; >
7131   3035 E4            pop a
7132   3036             ; --- END RELATIONAL
7133   3036 FD A7         sand a, b
7134   3038 E4            pop a
7135   3039             ; --- END LOGICAL AND
7136   3039 C0 00 00      cmp b, 0
7137   303C C6 50 30      je _if109_exit
7138   303F             _if109_true:
7139   303F             ; printf("Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"); 
7140   303F 26 59 6B      mov b, _s75 ; "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"
7141   3042 FD AB         swp b
7142   3044 D8            push b
7143   3045 07 BA 07      call printf
7144   3048 51 02 00      add sp, 2
7145   304B             ; return; 
7146   304B F9            leave
7147   304C 09            ret
7148   304D 0A 50 30      jmp _if109_exit
7149   3050             _if109_exit:
7150   3050             ; if (warp <= 0) 
7151   3050             _if110_cond:
7152   3050 FA FB FF      lea d, [bp + -5] ; $warp
7153   3053 2A            mov b, [d]
7154   3054             ; --- START RELATIONAL
7155   3054 D7            push a
7156   3055 11            mov a, b
7157   3056 26 00 00      mov b, $0
7158   3059 B0            cmp a, b
7159   305A FD 74         sle ; <= (signed)
7160   305C E4            pop a
7161   305D             ; --- END RELATIONAL
7162   305D C0 00 00      cmp b, 0
7163   3060 C6 68 30      je _if110_exit
7164   3063             _if110_true:
7165   3063             ; return; 
7166   3063 F9            leave
7167   3064 09            ret
7168   3065 0A 68 30      jmp _if110_exit
7169   3068             _if110_exit:
7170   3068             ; if (warp > 800) { 
7171   3068             _if111_cond:
7172   3068 FA FB FF      lea d, [bp + -5] ; $warp
7173   306B 2A            mov b, [d]
7174   306C             ; --- START RELATIONAL
7175   306C D7            push a
7176   306D 11            mov a, b
7177   306E 26 20 03      mov b, $320
7178   3071 B0            cmp a, b
7179   3072 FD 7F         sgt ; >
7180   3074 E4            pop a
7181   3075             ; --- END RELATIONAL
7182   3075 C0 00 00      cmp b, 0
7183   3078 C6 9C 30      je _if111_exit
7184   307B             _if111_true:
7185   307B             ; printf("Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n", print100(warp)); 
7186   307B FA FB FF      lea d, [bp + -5] ; $warp
7187   307E 2A            mov b, [d]
7188   307F FD AB         swp b
7189   3081 D8            push b
7190   3082 07 DD 22      call print100
7191   3085 51 02 00      add sp, 2
7192   3088 FD AB         swp b
7193   308A D8            push b
7194   308B 26 8F 6B      mov b, _s76 ; "Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n"
7195   308E FD AB         swp b
7196   3090 D8            push b
7197   3091 07 BA 07      call printf
7198   3094 51 04 00      add sp, 4
7199   3097             ; return; 
7200   3097 F9            leave
7201   3098 09            ret
7202   3099 0A 9C 30      jmp _if111_exit
7203   309C             _if111_exit:
7204   309C             ; n = warp * 8; 
7205   309C FA F9 FF      lea d, [bp + -7] ; $n
7206   309F DA            push d
7207   30A0 FA FB FF      lea d, [bp + -5] ; $warp
7208   30A3 2A            mov b, [d]
7209   30A4             ; --- START FACTORS
7210   30A4 D7            push a
7211   30A5 11            mov a, b
7212   30A6 26 08 00      mov b, $8
7213   30A9 AC            mul a, b ; *
7214   30AA 11            mov a, b
7215   30AB 27            mov b, a
7216   30AC E4            pop a
7217   30AD             ; --- END FACTORS
7218   30AD E7            pop d
7219   30AE FD 43         mov [d], b
7220   30B0             ; n = cint100(n);	 
7221   30B0 FA F9 FF      lea d, [bp + -7] ; $n
7222   30B3 DA            push d
7223   30B4 FA F9 FF      lea d, [bp + -7] ; $n
7224   30B7 2A            mov b, [d]
7225   30B8 FD AB         swp b
7226   30BA D8            push b
7227   30BB 07 86 63      call cint100
7228   30BE 51 02 00      add sp, 2
7229   30C1 E7            pop d
7230   30C2 FD 43         mov [d], b
7231   30C4             ; if (energy - n < 0) { 
7232   30C4             _if112_cond:
7233   30C4 3B C8 63      mov d, _energy ; $energy
7234   30C7 2A            mov b, [d]
7235   30C8             ; --- START TERMS
7236   30C8 D7            push a
7237   30C9 11            mov a, b
7238   30CA FA F9 FF      lea d, [bp + -7] ; $n
7239   30CD 2A            mov b, [d]
7240   30CE 60            sub a, b
7241   30CF 27            mov b, a
7242   30D0 E4            pop a
7243   30D1             ; --- END TERMS
7244   30D1             ; --- START RELATIONAL
7245   30D1 D7            push a
7246   30D2 11            mov a, b
7247   30D3 26 00 00      mov b, $0
7248   30D6 B0            cmp a, b
7249   30D7 FD 75         slu ; < (unsigned)
7250   30D9 E4            pop a
7251   30DA             ; --- END RELATIONAL
7252   30DA C0 00 00      cmp b, 0
7253   30DD C6 48 31      je _if112_exit
7254   30E0             _if112_true:
7255   30E0             ; printf("Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", print100(warp)); 
7256   30E0 FA FB FF      lea d, [bp + -5] ; $warp
7257   30E3 2A            mov b, [d]
7258   30E4 FD AB         swp b
7259   30E6 D8            push b
7260   30E7 07 DD 22      call print100
7261   30EA 51 02 00      add sp, 2
7262   30ED FD AB         swp b
7263   30EF D8            push b
7264   30F0 26 D0 6B      mov b, _s77 ; "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n"
7265   30F3 FD AB         swp b
7266   30F5 D8            push b
7267   30F6 07 BA 07      call printf
7268   30F9 51 04 00      add sp, 4
7269   30FC             ; if (shield >= n && damage[7] >= 0) { 
7270   30FC             _if113_cond:
7271   30FC 3B 83 64      mov d, _shield ; $shield
7272   30FF 2A            mov b, [d]
7273   3100             ; --- START RELATIONAL
7274   3100 D7            push a
7275   3101 11            mov a, b
7276   3102 FA F9 FF      lea d, [bp + -7] ; $n
7277   3105 2A            mov b, [d]
7278   3106 B0            cmp a, b
7279   3107 FD 80         sge ; >=
7280   3109 E4            pop a
7281   310A             ; --- END RELATIONAL
7282   310A             ; --- START LOGICAL AND
7283   310A D7            push a
7284   310B 11            mov a, b
7285   310C 3B 8A 64      mov d, _damage_data ; $damage
7286   310F D7            push a
7287   3110 DA            push d
7288   3111 26 07 00      mov b, $7
7289   3114 E7            pop d
7290   3115 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7291   3119 E4            pop a
7292   311A 2A            mov b, [d]
7293   311B             ; --- START RELATIONAL
7294   311B D7            push a
7295   311C 11            mov a, b
7296   311D 26 00 00      mov b, $0
7297   3120 B0            cmp a, b
7298   3121 FD 80         sge ; >=
7299   3123 E4            pop a
7300   3124             ; --- END RELATIONAL
7301   3124 FD A7         sand a, b
7302   3126 E4            pop a
7303   3127             ; --- END LOGICAL AND
7304   3127 C0 00 00      cmp b, 0
7305   312A C6 43 31      je _if113_exit
7306   312D             _if113_true:
7307   312D             ; printf("Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", shield); 
7308   312D 3B 83 64      mov d, _shield ; $shield
7309   3130 2A            mov b, [d]
7310   3131 FD AB         swp b
7311   3133 D8            push b
7312   3134 26 23 6C      mov b, _s78 ; "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n"
7313   3137 FD AB         swp b
7314   3139 D8            push b
7315   313A 07 BA 07      call printf
7316   313D 51 04 00      add sp, 4
7317   3140 0A 43 31      jmp _if113_exit
7318   3143             _if113_exit:
7319   3143             ; return; 
7320   3143 F9            leave
7321   3144 09            ret
7322   3145 0A 48 31      jmp _if112_exit
7323   3148             _if112_exit:
7324   3148             ; klingons_move(); 
7325   3148 07 41 59      call klingons_move
7326   314B             ; repair_damage(warp); 
7327   314B FA FB FF      lea d, [bp + -5] ; $warp
7328   314E 2A            mov b, [d]
7329   314F FD AB         swp b
7330   3151 D8            push b
7331   3152 07 CC 5C      call repair_damage
7332   3155 51 02 00      add sp, 2
7333   3158             ; z1 = FROM_FIXED00(ship_y); 
7334   3158 FA F1 FF      lea d, [bp + -15] ; $z1
7335   315B DA            push d
7336   315C 3B 9E 64      mov d, _ship_y ; $ship_y
7337   315F 2A            mov b, [d]
7338   3160 FD AB         swp b
7339   3162 D8            push b
7340   3163 07 DA 1F      call FROM_FIXED00
7341   3166 51 02 00      add sp, 2
7342   3169 E7            pop d
7343   316A FD 43         mov [d], b
7344   316C             ; z2 = FROM_FIXED00(ship_x); 
7345   316C FA EF FF      lea d, [bp + -17] ; $z2
7346   316F DA            push d
7347   3170 3B A0 64      mov d, _ship_x ; $ship_x
7348   3173 2A            mov b, [d]
7349   3174 FD AB         swp b
7350   3176 D8            push b
7351   3177 07 DA 1F      call FROM_FIXED00
7352   317A 51 02 00      add sp, 2
7353   317D E7            pop d
7354   317E FD 43         mov [d], b
7355   3180             ; quad[z1+-1][z2+-1] =  		0      ; 
7356   3180 3B A4 64      mov d, _quad_data ; $quad
7357   3183 D7            push a
7358   3184 DA            push d
7359   3185 FA F1 FF      lea d, [bp + -15] ; $z1
7360   3188 2A            mov b, [d]
7361   3189             ; --- START TERMS
7362   3189 D7            push a
7363   318A 11            mov a, b
7364   318B 26 FF FF      mov b, $ffff
7365   318E 56            add b, a
7366   318F E4            pop a
7367   3190             ; --- END TERMS
7368   3190 E7            pop d
7369   3191 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7370   3195 DA            push d
7371   3196 FA EF FF      lea d, [bp + -17] ; $z2
7372   3199 2A            mov b, [d]
7373   319A             ; --- START TERMS
7374   319A D7            push a
7375   319B 11            mov a, b
7376   319C 26 FF FF      mov b, $ffff
7377   319F 56            add b, a
7378   31A0 E4            pop a
7379   31A1             ; --- END TERMS
7380   31A1 E7            pop d
7381   31A2 5A            add d, b
7382   31A3 E4            pop a
7383   31A4 DA            push d
7384   31A5 26 00 00      mov b, $0
7385   31A8 E7            pop d
7386   31A9 FD 3E         mov [d], bl
7387   31AB             ; c2 = FROM_FIXED00(c1);	/* Integer part */ 
7388   31AB FA F7 FF      lea d, [bp + -9] ; $c2
7389   31AE DA            push d
7390   31AF FA FD FF      lea d, [bp + -3] ; $c1
7391   31B2 2A            mov b, [d]
7392   31B3 FD AB         swp b
7393   31B5 D8            push b
7394   31B6 07 DA 1F      call FROM_FIXED00
7395   31B9 51 02 00      add sp, 2
7396   31BC E7            pop d
7397   31BD FD 43         mov [d], b
7398   31BF             ; c3 = c2 + 1;		/* Next integer part */ 
7399   31BF FA F5 FF      lea d, [bp + -11] ; $c3
7400   31C2 DA            push d
7401   31C3 FA F7 FF      lea d, [bp + -9] ; $c2
7402   31C6 2A            mov b, [d]
7403   31C7             ; --- START TERMS
7404   31C7 D7            push a
7405   31C8 11            mov a, b
7406   31C9 26 01 00      mov b, $1
7407   31CC 56            add b, a
7408   31CD E4            pop a
7409   31CE             ; --- END TERMS
7410   31CE E7            pop d
7411   31CF FD 43         mov [d], b
7412   31D1             ; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
7413   31D1 FA F3 FF      lea d, [bp + -13] ; $c4
7414   31D4 DA            push d
7415   31D5 FA FD FF      lea d, [bp + -3] ; $c1
7416   31D8 2A            mov b, [d]
7417   31D9             ; --- START TERMS
7418   31D9 D7            push a
7419   31DA 11            mov a, b
7420   31DB FA F7 FF      lea d, [bp + -9] ; $c2
7421   31DE 2A            mov b, [d]
7422   31DF FD AB         swp b
7423   31E1 D8            push b
7424   31E2 07 C8 1F      call TO_FIXED00
7425   31E5 51 02 00      add sp, 2
7426   31E8 60            sub a, b
7427   31E9 27            mov b, a
7428   31EA E4            pop a
7429   31EB             ; --- END TERMS
7430   31EB E7            pop d
7431   31EC FD 43         mov [d], b
7432   31EE             ; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
7433   31EE FA ED FF      lea d, [bp + -19] ; $x1
7434   31F1 DA            push d
7435   31F2 26 64 00      mov b, $64
7436   31F5             ; --- START FACTORS
7437   31F5 D7            push a
7438   31F6 11            mov a, b
7439   31F7 3B A7 63      mov d, _c_data ; $c
7440   31FA D7            push a
7441   31FB DA            push d
7442   31FC 26 01 00      mov b, $1
7443   31FF E7            pop d
7444   3200 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7445   3204 DA            push d
7446   3205 FA F7 FF      lea d, [bp + -9] ; $c2
7447   3208 2A            mov b, [d]
7448   3209 E7            pop d
7449   320A 5A            add d, b
7450   320B E4            pop a
7451   320C 32            mov bl, [d]
7452   320D A7 00         mov bh, 0
7453   320F AC            mul a, b ; *
7454   3210 11            mov a, b
7455   3211 27            mov b, a
7456   3212 E4            pop a
7457   3213             ; --- END FACTORS
7458   3213             ; --- START TERMS
7459   3213 D7            push a
7460   3214 11            mov a, b
7461   3215 3B A7 63      mov d, _c_data ; $c
7462   3218 D7            push a
7463   3219 DA            push d
7464   321A 26 01 00      mov b, $1
7465   321D E7            pop d
7466   321E FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7467   3222 DA            push d
7468   3223 FA F5 FF      lea d, [bp + -11] ; $c3
7469   3226 2A            mov b, [d]
7470   3227 E7            pop d
7471   3228 5A            add d, b
7472   3229 E4            pop a
7473   322A 32            mov bl, [d]
7474   322B A7 00         mov bh, 0
7475   322D             ; --- START TERMS
7476   322D D7            push a
7477   322E 11            mov a, b
7478   322F 3B A7 63      mov d, _c_data ; $c
7479   3232 D7            push a
7480   3233 DA            push d
7481   3234 26 01 00      mov b, $1
7482   3237 E7            pop d
7483   3238 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7484   323C DA            push d
7485   323D FA F7 FF      lea d, [bp + -9] ; $c2
7486   3240 2A            mov b, [d]
7487   3241 E7            pop d
7488   3242 5A            add d, b
7489   3243 E4            pop a
7490   3244 32            mov bl, [d]
7491   3245 A7 00         mov bh, 0
7492   3247 60            sub a, b
7493   3248 27            mov b, a
7494   3249 E4            pop a
7495   324A             ; --- END TERMS
7496   324A             ; --- START FACTORS
7497   324A D7            push a
7498   324B 11            mov a, b
7499   324C FA F3 FF      lea d, [bp + -13] ; $c4
7500   324F 2A            mov b, [d]
7501   3250 AC            mul a, b ; *
7502   3251 11            mov a, b
7503   3252 27            mov b, a
7504   3253 E4            pop a
7505   3254             ; --- END FACTORS
7506   3254 56            add b, a
7507   3255 E4            pop a
7508   3256             ; --- END TERMS
7509   3256 E7            pop d
7510   3257 FD 43         mov [d], b
7511   3259             ; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
7512   3259 FA EB FF      lea d, [bp + -21] ; $x2
7513   325C DA            push d
7514   325D 26 64 00      mov b, $64
7515   3260             ; --- START FACTORS
7516   3260 D7            push a
7517   3261 11            mov a, b
7518   3262 3B A7 63      mov d, _c_data ; $c
7519   3265 D7            push a
7520   3266 DA            push d
7521   3267 26 02 00      mov b, $2
7522   326A E7            pop d
7523   326B FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7524   326F DA            push d
7525   3270 FA F7 FF      lea d, [bp + -9] ; $c2
7526   3273 2A            mov b, [d]
7527   3274 E7            pop d
7528   3275 5A            add d, b
7529   3276 E4            pop a
7530   3277 32            mov bl, [d]
7531   3278 A7 00         mov bh, 0
7532   327A AC            mul a, b ; *
7533   327B 11            mov a, b
7534   327C 27            mov b, a
7535   327D E4            pop a
7536   327E             ; --- END FACTORS
7537   327E             ; --- START TERMS
7538   327E D7            push a
7539   327F 11            mov a, b
7540   3280 3B A7 63      mov d, _c_data ; $c
7541   3283 D7            push a
7542   3284 DA            push d
7543   3285 26 02 00      mov b, $2
7544   3288 E7            pop d
7545   3289 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7546   328D DA            push d
7547   328E FA F5 FF      lea d, [bp + -11] ; $c3
7548   3291 2A            mov b, [d]
7549   3292 E7            pop d
7550   3293 5A            add d, b
7551   3294 E4            pop a
7552   3295 32            mov bl, [d]
7553   3296 A7 00         mov bh, 0
7554   3298             ; --- START TERMS
7555   3298 D7            push a
7556   3299 11            mov a, b
7557   329A 3B A7 63      mov d, _c_data ; $c
7558   329D D7            push a
7559   329E DA            push d
7560   329F 26 02 00      mov b, $2
7561   32A2 E7            pop d
7562   32A3 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7563   32A7 DA            push d
7564   32A8 FA F7 FF      lea d, [bp + -9] ; $c2
7565   32AB 2A            mov b, [d]
7566   32AC E7            pop d
7567   32AD 5A            add d, b
7568   32AE E4            pop a
7569   32AF 32            mov bl, [d]
7570   32B0 A7 00         mov bh, 0
7571   32B2 60            sub a, b
7572   32B3 27            mov b, a
7573   32B4 E4            pop a
7574   32B5             ; --- END TERMS
7575   32B5             ; --- START FACTORS
7576   32B5 D7            push a
7577   32B6 11            mov a, b
7578   32B7 FA F3 FF      lea d, [bp + -13] ; $c4
7579   32BA 2A            mov b, [d]
7580   32BB AC            mul a, b ; *
7581   32BC 11            mov a, b
7582   32BD 27            mov b, a
7583   32BE E4            pop a
7584   32BF             ; --- END FACTORS
7585   32BF 56            add b, a
7586   32C0 E4            pop a
7587   32C1             ; --- END TERMS
7588   32C1 E7            pop d
7589   32C2 FD 43         mov [d], b
7590   32C4             ; x = ship_y; 
7591   32C4 FA E9 FF      lea d, [bp + -23] ; $x
7592   32C7 DA            push d
7593   32C8 3B 9E 64      mov d, _ship_y ; $ship_y
7594   32CB 2A            mov b, [d]
7595   32CC E7            pop d
7596   32CD FD 43         mov [d], b
7597   32CF             ; y = ship_x; 
7598   32CF FA E7 FF      lea d, [bp + -25] ; $y
7599   32D2 DA            push d
7600   32D3 3B A0 64      mov d, _ship_x ; $ship_x
7601   32D6 2A            mov b, [d]
7602   32D7 E7            pop d
7603   32D8 FD 43         mov [d], b
7604   32DA             ; for (i = 1; i <= n; i++) { 
7605   32DA             _for114_init:
7606   32DA FA FF FF      lea d, [bp + -1] ; $i
7607   32DD DA            push d
7608   32DE 26 01 00      mov b, $1
7609   32E1 E7            pop d
7610   32E2 FD 43         mov [d], b
7611   32E4             _for114_cond:
7612   32E4 FA FF FF      lea d, [bp + -1] ; $i
7613   32E7 2A            mov b, [d]
7614   32E8             ; --- START RELATIONAL
7615   32E8 D7            push a
7616   32E9 11            mov a, b
7617   32EA FA F9 FF      lea d, [bp + -7] ; $n
7618   32ED 2A            mov b, [d]
7619   32EE B0            cmp a, b
7620   32EF FD 74         sle ; <= (signed)
7621   32F1 E4            pop a
7622   32F2             ; --- END RELATIONAL
7623   32F2 C0 00 00      cmp b, 0
7624   32F5 C6 5B 37      je _for114_exit
7625   32F8             _for114_block:
7626   32F8             ; ship_y = ship_y + x1; 
7627   32F8 3B 9E 64      mov d, _ship_y ; $ship_y
7628   32FB DA            push d
7629   32FC 3B 9E 64      mov d, _ship_y ; $ship_y
7630   32FF 2A            mov b, [d]
7631   3300             ; --- START TERMS
7632   3300 D7            push a
7633   3301 11            mov a, b
7634   3302 FA ED FF      lea d, [bp + -19] ; $x1
7635   3305 2A            mov b, [d]
7636   3306 56            add b, a
7637   3307 E4            pop a
7638   3308             ; --- END TERMS
7639   3308 E7            pop d
7640   3309 FD 43         mov [d], b
7641   330B             ; ship_x = ship_x + x2; 
7642   330B 3B A0 64      mov d, _ship_x ; $ship_x
7643   330E DA            push d
7644   330F 3B A0 64      mov d, _ship_x ; $ship_x
7645   3312 2A            mov b, [d]
7646   3313             ; --- START TERMS
7647   3313 D7            push a
7648   3314 11            mov a, b
7649   3315 FA EB FF      lea d, [bp + -21] ; $x2
7650   3318 2A            mov b, [d]
7651   3319 56            add b, a
7652   331A E4            pop a
7653   331B             ; --- END TERMS
7654   331B E7            pop d
7655   331C FD 43         mov [d], b
7656   331E             ; z1 = FROM_FIXED00(ship_y); 
7657   331E FA F1 FF      lea d, [bp + -15] ; $z1
7658   3321 DA            push d
7659   3322 3B 9E 64      mov d, _ship_y ; $ship_y
7660   3325 2A            mov b, [d]
7661   3326 FD AB         swp b
7662   3328 D8            push b
7663   3329 07 DA 1F      call FROM_FIXED00
7664   332C 51 02 00      add sp, 2
7665   332F E7            pop d
7666   3330 FD 43         mov [d], b
7667   3332             ; z2 = FROM_FIXED00(ship_x);	/* ?? cint100 ?? */ 
7668   3332 FA EF FF      lea d, [bp + -17] ; $z2
7669   3335 DA            push d
7670   3336 3B A0 64      mov d, _ship_x ; $ship_x
7671   3339 2A            mov b, [d]
7672   333A FD AB         swp b
7673   333C D8            push b
7674   333D 07 DA 1F      call FROM_FIXED00
7675   3340 51 02 00      add sp, 2
7676   3343 E7            pop d
7677   3344 FD 43         mov [d], b
7678   3346             ; if (z1 < 1 || z1 >= 9 || z2 < 1 || z2 >= 9) { 
7679   3346             _if115_cond:
7680   3346 FA F1 FF      lea d, [bp + -15] ; $z1
7681   3349 2A            mov b, [d]
7682   334A             ; --- START RELATIONAL
7683   334A D7            push a
7684   334B 11            mov a, b
7685   334C 26 01 00      mov b, $1
7686   334F B0            cmp a, b
7687   3350 FD 73         slt ; < (signed)
7688   3352 E4            pop a
7689   3353             ; --- END RELATIONAL
7690   3353             ; --- START LOGICAL OR
7691   3353 D7            push a
7692   3354 11            mov a, b
7693   3355 FA F1 FF      lea d, [bp + -15] ; $z1
7694   3358 2A            mov b, [d]
7695   3359             ; --- START RELATIONAL
7696   3359 D7            push a
7697   335A 11            mov a, b
7698   335B 26 09 00      mov b, $9
7699   335E B0            cmp a, b
7700   335F FD 80         sge ; >=
7701   3361 E4            pop a
7702   3362             ; --- END RELATIONAL
7703   3362 FD A8         sor a, b ; ||
7704   3364 11            mov a, b
7705   3365 FA EF FF      lea d, [bp + -17] ; $z2
7706   3368 2A            mov b, [d]
7707   3369             ; --- START RELATIONAL
7708   3369 D7            push a
7709   336A 11            mov a, b
7710   336B 26 01 00      mov b, $1
7711   336E B0            cmp a, b
7712   336F FD 73         slt ; < (signed)
7713   3371 E4            pop a
7714   3372             ; --- END RELATIONAL
7715   3372 FD A8         sor a, b ; ||
7716   3374 11            mov a, b
7717   3375 FA EF FF      lea d, [bp + -17] ; $z2
7718   3378 2A            mov b, [d]
7719   3379             ; --- START RELATIONAL
7720   3379 D7            push a
7721   337A 11            mov a, b
7722   337B 26 09 00      mov b, $9
7723   337E B0            cmp a, b
7724   337F FD 80         sge ; >=
7725   3381 E4            pop a
7726   3382             ; --- END RELATIONAL
7727   3382 FD A8         sor a, b ; ||
7728   3384 E4            pop a
7729   3385             ; --- END LOGICAL OR
7730   3385 C0 00 00      cmp b, 0
7731   3388 C6 BC 36      je _if115_exit
7732   338B             _if115_true:
7733   338B             ; outside = 0;		/* Outside galaxy flag */ 
7734   338B FA E6 FF      lea d, [bp + -26] ; $outside
7735   338E DA            push d
7736   338F 26 00 00      mov b, $0
7737   3392 E7            pop d
7738   3393 FD 3E         mov [d], bl
7739   3395             ; quad_y_old = quad_y; 
7740   3395 FA E5 FF      lea d, [bp + -27] ; $quad_y_old
7741   3398 DA            push d
7742   3399 3B 7F 64      mov d, _quad_y ; $quad_y
7743   339C 2A            mov b, [d]
7744   339D E7            pop d
7745   339E FD 3E         mov [d], bl
7746   33A0             ; quad_x_old = quad_x; 
7747   33A0 FA E4 FF      lea d, [bp + -28] ; $quad_x_old
7748   33A3 DA            push d
7749   33A4 3B 81 64      mov d, _quad_x ; $quad_x
7750   33A7 2A            mov b, [d]
7751   33A8 E7            pop d
7752   33A9 FD 3E         mov [d], bl
7753   33AB             ; x = (800 * quad_y) + x + (n * x1); 
7754   33AB FA E9 FF      lea d, [bp + -23] ; $x
7755   33AE DA            push d
7756   33AF 26 20 03      mov b, $320
7757   33B2             ; --- START FACTORS
7758   33B2 D7            push a
7759   33B3 11            mov a, b
7760   33B4 3B 7F 64      mov d, _quad_y ; $quad_y
7761   33B7 2A            mov b, [d]
7762   33B8 AC            mul a, b ; *
7763   33B9 11            mov a, b
7764   33BA 27            mov b, a
7765   33BB E4            pop a
7766   33BC             ; --- END FACTORS
7767   33BC             ; --- START TERMS
7768   33BC D7            push a
7769   33BD 11            mov a, b
7770   33BE FA E9 FF      lea d, [bp + -23] ; $x
7771   33C1 2A            mov b, [d]
7772   33C2 56            add b, a
7773   33C3 11            mov a, b
7774   33C4 FA F9 FF      lea d, [bp + -7] ; $n
7775   33C7 2A            mov b, [d]
7776   33C8             ; --- START FACTORS
7777   33C8 D7            push a
7778   33C9 11            mov a, b
7779   33CA FA ED FF      lea d, [bp + -19] ; $x1
7780   33CD 2A            mov b, [d]
7781   33CE AC            mul a, b ; *
7782   33CF 11            mov a, b
7783   33D0 27            mov b, a
7784   33D1 E4            pop a
7785   33D2             ; --- END FACTORS
7786   33D2 56            add b, a
7787   33D3 E4            pop a
7788   33D4             ; --- END TERMS
7789   33D4 E7            pop d
7790   33D5 FD 43         mov [d], b
7791   33D7             ; y = (800 * quad_x) + y + (n * x2); 
7792   33D7 FA E7 FF      lea d, [bp + -25] ; $y
7793   33DA DA            push d
7794   33DB 26 20 03      mov b, $320
7795   33DE             ; --- START FACTORS
7796   33DE D7            push a
7797   33DF 11            mov a, b
7798   33E0 3B 81 64      mov d, _quad_x ; $quad_x
7799   33E3 2A            mov b, [d]
7800   33E4 AC            mul a, b ; *
7801   33E5 11            mov a, b
7802   33E6 27            mov b, a
7803   33E7 E4            pop a
7804   33E8             ; --- END FACTORS
7805   33E8             ; --- START TERMS
7806   33E8 D7            push a
7807   33E9 11            mov a, b
7808   33EA FA E7 FF      lea d, [bp + -25] ; $y
7809   33ED 2A            mov b, [d]
7810   33EE 56            add b, a
7811   33EF 11            mov a, b
7812   33F0 FA F9 FF      lea d, [bp + -7] ; $n
7813   33F3 2A            mov b, [d]
7814   33F4             ; --- START FACTORS
7815   33F4 D7            push a
7816   33F5 11            mov a, b
7817   33F6 FA EB FF      lea d, [bp + -21] ; $x2
7818   33F9 2A            mov b, [d]
7819   33FA AC            mul a, b ; *
7820   33FB 11            mov a, b
7821   33FC 27            mov b, a
7822   33FD E4            pop a
7823   33FE             ; --- END FACTORS
7824   33FE 56            add b, a
7825   33FF E4            pop a
7826   3400             ; --- END TERMS
7827   3400 E7            pop d
7828   3401 FD 43         mov [d], b
7829   3403             ; quad_y = x / 800;	/* Fixed point to int and divide by 8 */ 
7830   3403 3B 7F 64      mov d, _quad_y ; $quad_y
7831   3406 DA            push d
7832   3407 FA E9 FF      lea d, [bp + -23] ; $x
7833   340A 2A            mov b, [d]
7834   340B             ; --- START FACTORS
7835   340B D7            push a
7836   340C 11            mov a, b
7837   340D 26 20 03      mov b, $320
7838   3410 AE            div a, b
7839   3411 27            mov b, a
7840   3412 E4            pop a
7841   3413             ; --- END FACTORS
7842   3413 E7            pop d
7843   3414 FD 43         mov [d], b
7844   3416             ; quad_x = y / 800;	/* Ditto */ 
7845   3416 3B 81 64      mov d, _quad_x ; $quad_x
7846   3419 DA            push d
7847   341A FA E7 FF      lea d, [bp + -25] ; $y
7848   341D 2A            mov b, [d]
7849   341E             ; --- START FACTORS
7850   341E D7            push a
7851   341F 11            mov a, b
7852   3420 26 20 03      mov b, $320
7853   3423 AE            div a, b
7854   3424 27            mov b, a
7855   3425 E4            pop a
7856   3426             ; --- END FACTORS
7857   3426 E7            pop d
7858   3427 FD 43         mov [d], b
7859   3429             ; ship_y = x - (quad_y * 800); 
7860   3429 3B 9E 64      mov d, _ship_y ; $ship_y
7861   342C DA            push d
7862   342D FA E9 FF      lea d, [bp + -23] ; $x
7863   3430 2A            mov b, [d]
7864   3431             ; --- START TERMS
7865   3431 D7            push a
7866   3432 11            mov a, b
7867   3433 3B 7F 64      mov d, _quad_y ; $quad_y
7868   3436 2A            mov b, [d]
7869   3437             ; --- START FACTORS
7870   3437 D7            push a
7871   3438 11            mov a, b
7872   3439 26 20 03      mov b, $320
7873   343C AC            mul a, b ; *
7874   343D 11            mov a, b
7875   343E 27            mov b, a
7876   343F E4            pop a
7877   3440             ; --- END FACTORS
7878   3440 60            sub a, b
7879   3441 27            mov b, a
7880   3442 E4            pop a
7881   3443             ; --- END TERMS
7882   3443 E7            pop d
7883   3444 FD 43         mov [d], b
7884   3446             ; ship_x = y - (quad_x * 800); 
7885   3446 3B A0 64      mov d, _ship_x ; $ship_x
7886   3449 DA            push d
7887   344A FA E7 FF      lea d, [bp + -25] ; $y
7888   344D 2A            mov b, [d]
7889   344E             ; --- START TERMS
7890   344E D7            push a
7891   344F 11            mov a, b
7892   3450 3B 81 64      mov d, _quad_x ; $quad_x
7893   3453 2A            mov b, [d]
7894   3454             ; --- START FACTORS
7895   3454 D7            push a
7896   3455 11            mov a, b
7897   3456 26 20 03      mov b, $320
7898   3459 AC            mul a, b ; *
7899   345A 11            mov a, b
7900   345B 27            mov b, a
7901   345C E4            pop a
7902   345D             ; --- END FACTORS
7903   345D 60            sub a, b
7904   345E 27            mov b, a
7905   345F E4            pop a
7906   3460             ; --- END TERMS
7907   3460 E7            pop d
7908   3461 FD 43         mov [d], b
7909   3463             ; if (ship_y < 100) { 
7910   3463             _if116_cond:
7911   3463 3B 9E 64      mov d, _ship_y ; $ship_y
7912   3466 2A            mov b, [d]
7913   3467             ; --- START RELATIONAL
7914   3467 D7            push a
7915   3468 11            mov a, b
7916   3469 26 64 00      mov b, $64
7917   346C B0            cmp a, b
7918   346D FD 73         slt ; < (signed)
7919   346F E4            pop a
7920   3470             ; --- END RELATIONAL
7921   3470 C0 00 00      cmp b, 0
7922   3473 C6 9E 34      je _if116_exit
7923   3476             _if116_true:
7924   3476             ; quad_y = quad_y - 1; 
7925   3476 3B 7F 64      mov d, _quad_y ; $quad_y
7926   3479 DA            push d
7927   347A 3B 7F 64      mov d, _quad_y ; $quad_y
7928   347D 2A            mov b, [d]
7929   347E             ; --- START TERMS
7930   347E D7            push a
7931   347F 11            mov a, b
7932   3480 26 01 00      mov b, $1
7933   3483 60            sub a, b
7934   3484 27            mov b, a
7935   3485 E4            pop a
7936   3486             ; --- END TERMS
7937   3486 E7            pop d
7938   3487 FD 43         mov [d], b
7939   3489             ; ship_y = ship_y + 800; 
7940   3489 3B 9E 64      mov d, _ship_y ; $ship_y
7941   348C DA            push d
7942   348D 3B 9E 64      mov d, _ship_y ; $ship_y
7943   3490 2A            mov b, [d]
7944   3491             ; --- START TERMS
7945   3491 D7            push a
7946   3492 11            mov a, b
7947   3493 26 20 03      mov b, $320
7948   3496 56            add b, a
7949   3497 E4            pop a
7950   3498             ; --- END TERMS
7951   3498 E7            pop d
7952   3499 FD 43         mov [d], b
7953   349B 0A 9E 34      jmp _if116_exit
7954   349E             _if116_exit:
7955   349E             ; if (ship_x < 100) { 
7956   349E             _if117_cond:
7957   349E 3B A0 64      mov d, _ship_x ; $ship_x
7958   34A1 2A            mov b, [d]
7959   34A2             ; --- START RELATIONAL
7960   34A2 D7            push a
7961   34A3 11            mov a, b
7962   34A4 26 64 00      mov b, $64
7963   34A7 B0            cmp a, b
7964   34A8 FD 73         slt ; < (signed)
7965   34AA E4            pop a
7966   34AB             ; --- END RELATIONAL
7967   34AB C0 00 00      cmp b, 0
7968   34AE C6 D9 34      je _if117_exit
7969   34B1             _if117_true:
7970   34B1             ; quad_x = quad_x - 1; 
7971   34B1 3B 81 64      mov d, _quad_x ; $quad_x
7972   34B4 DA            push d
7973   34B5 3B 81 64      mov d, _quad_x ; $quad_x
7974   34B8 2A            mov b, [d]
7975   34B9             ; --- START TERMS
7976   34B9 D7            push a
7977   34BA 11            mov a, b
7978   34BB 26 01 00      mov b, $1
7979   34BE 60            sub a, b
7980   34BF 27            mov b, a
7981   34C0 E4            pop a
7982   34C1             ; --- END TERMS
7983   34C1 E7            pop d
7984   34C2 FD 43         mov [d], b
7985   34C4             ; ship_x = ship_x + 800; 
7986   34C4 3B A0 64      mov d, _ship_x ; $ship_x
7987   34C7 DA            push d
7988   34C8 3B A0 64      mov d, _ship_x ; $ship_x
7989   34CB 2A            mov b, [d]
7990   34CC             ; --- START TERMS
7991   34CC D7            push a
7992   34CD 11            mov a, b
7993   34CE 26 20 03      mov b, $320
7994   34D1 56            add b, a
7995   34D2 E4            pop a
7996   34D3             ; --- END TERMS
7997   34D3 E7            pop d
7998   34D4 FD 43         mov [d], b
7999   34D6 0A D9 34      jmp _if117_exit
8000   34D9             _if117_exit:
8001   34D9             ; if (quad_y < 1) { 
8002   34D9             _if118_cond:
8003   34D9 3B 7F 64      mov d, _quad_y ; $quad_y
8004   34DC 2A            mov b, [d]
8005   34DD             ; --- START RELATIONAL
8006   34DD D7            push a
8007   34DE 11            mov a, b
8008   34DF 26 01 00      mov b, $1
8009   34E2 B0            cmp a, b
8010   34E3 FD 73         slt ; < (signed)
8011   34E5 E4            pop a
8012   34E6             ; --- END RELATIONAL
8013   34E6 C0 00 00      cmp b, 0
8014   34E9 C6 0D 35      je _if118_exit
8015   34EC             _if118_true:
8016   34EC             ; outside = 1; 
8017   34EC FA E6 FF      lea d, [bp + -26] ; $outside
8018   34EF DA            push d
8019   34F0 26 01 00      mov b, $1
8020   34F3 E7            pop d
8021   34F4 FD 3E         mov [d], bl
8022   34F6             ; quad_y = 1; 
8023   34F6 3B 7F 64      mov d, _quad_y ; $quad_y
8024   34F9 DA            push d
8025   34FA 26 01 00      mov b, $1
8026   34FD E7            pop d
8027   34FE FD 43         mov [d], b
8028   3500             ; ship_y = 100; 
8029   3500 3B 9E 64      mov d, _ship_y ; $ship_y
8030   3503 DA            push d
8031   3504 26 64 00      mov b, $64
8032   3507 E7            pop d
8033   3508 FD 43         mov [d], b
8034   350A 0A 0D 35      jmp _if118_exit
8035   350D             _if118_exit:
8036   350D             ; if (quad_y > 8) { 
8037   350D             _if119_cond:
8038   350D 3B 7F 64      mov d, _quad_y ; $quad_y
8039   3510 2A            mov b, [d]
8040   3511             ; --- START RELATIONAL
8041   3511 D7            push a
8042   3512 11            mov a, b
8043   3513 26 08 00      mov b, $8
8044   3516 B0            cmp a, b
8045   3517 FD 7F         sgt ; >
8046   3519 E4            pop a
8047   351A             ; --- END RELATIONAL
8048   351A C0 00 00      cmp b, 0
8049   351D C6 41 35      je _if119_exit
8050   3520             _if119_true:
8051   3520             ; outside = 1; 
8052   3520 FA E6 FF      lea d, [bp + -26] ; $outside
8053   3523 DA            push d
8054   3524 26 01 00      mov b, $1
8055   3527 E7            pop d
8056   3528 FD 3E         mov [d], bl
8057   352A             ; quad_y = 8; 
8058   352A 3B 7F 64      mov d, _quad_y ; $quad_y
8059   352D DA            push d
8060   352E 26 08 00      mov b, $8
8061   3531 E7            pop d
8062   3532 FD 43         mov [d], b
8063   3534             ; ship_y = 800; 
8064   3534 3B 9E 64      mov d, _ship_y ; $ship_y
8065   3537 DA            push d
8066   3538 26 20 03      mov b, $320
8067   353B E7            pop d
8068   353C FD 43         mov [d], b
8069   353E 0A 41 35      jmp _if119_exit
8070   3541             _if119_exit:
8071   3541             ; if (quad_x < 1) { 
8072   3541             _if120_cond:
8073   3541 3B 81 64      mov d, _quad_x ; $quad_x
8074   3544 2A            mov b, [d]
8075   3545             ; --- START RELATIONAL
8076   3545 D7            push a
8077   3546 11            mov a, b
8078   3547 26 01 00      mov b, $1
8079   354A B0            cmp a, b
8080   354B FD 73         slt ; < (signed)
8081   354D E4            pop a
8082   354E             ; --- END RELATIONAL
8083   354E C0 00 00      cmp b, 0
8084   3551 C6 75 35      je _if120_exit
8085   3554             _if120_true:
8086   3554             ; outside = 1; 
8087   3554 FA E6 FF      lea d, [bp + -26] ; $outside
8088   3557 DA            push d
8089   3558 26 01 00      mov b, $1
8090   355B E7            pop d
8091   355C FD 3E         mov [d], bl
8092   355E             ; quad_x = 1; 
8093   355E 3B 81 64      mov d, _quad_x ; $quad_x
8094   3561 DA            push d
8095   3562 26 01 00      mov b, $1
8096   3565 E7            pop d
8097   3566 FD 43         mov [d], b
8098   3568             ; ship_x = 100; 
8099   3568 3B A0 64      mov d, _ship_x ; $ship_x
8100   356B DA            push d
8101   356C 26 64 00      mov b, $64
8102   356F E7            pop d
8103   3570 FD 43         mov [d], b
8104   3572 0A 75 35      jmp _if120_exit
8105   3575             _if120_exit:
8106   3575             ; if (quad_x > 8) { 
8107   3575             _if121_cond:
8108   3575 3B 81 64      mov d, _quad_x ; $quad_x
8109   3578 2A            mov b, [d]
8110   3579             ; --- START RELATIONAL
8111   3579 D7            push a
8112   357A 11            mov a, b
8113   357B 26 08 00      mov b, $8
8114   357E B0            cmp a, b
8115   357F FD 7F         sgt ; >
8116   3581 E4            pop a
8117   3582             ; --- END RELATIONAL
8118   3582 C0 00 00      cmp b, 0
8119   3585 C6 A9 35      je _if121_exit
8120   3588             _if121_true:
8121   3588             ; outside = 1; 
8122   3588 FA E6 FF      lea d, [bp + -26] ; $outside
8123   358B DA            push d
8124   358C 26 01 00      mov b, $1
8125   358F E7            pop d
8126   3590 FD 3E         mov [d], bl
8127   3592             ; quad_x = 8; 
8128   3592 3B 81 64      mov d, _quad_x ; $quad_x
8129   3595 DA            push d
8130   3596 26 08 00      mov b, $8
8131   3599 E7            pop d
8132   359A FD 43         mov [d], b
8133   359C             ; ship_x = 800; 
8134   359C 3B A0 64      mov d, _ship_x ; $ship_x
8135   359F DA            push d
8136   35A0 26 20 03      mov b, $320
8137   35A3 E7            pop d
8138   35A4 FD 43         mov [d], b
8139   35A6 0A A9 35      jmp _if121_exit
8140   35A9             _if121_exit:
8141   35A9             ; if (outside == 1) { 
8142   35A9             _if122_cond:
8143   35A9 FA E6 FF      lea d, [bp + -26] ; $outside
8144   35AC 32            mov bl, [d]
8145   35AD A7 00         mov bh, 0
8146   35AF             ; --- START RELATIONAL
8147   35AF D7            push a
8148   35B0 11            mov a, b
8149   35B1 26 01 00      mov b, $1
8150   35B4 B0            cmp a, b
8151   35B5 FD 71         seq ; ==
8152   35B7 E4            pop a
8153   35B8             ; --- END RELATIONAL
8154   35B8 C0 00 00      cmp b, 0
8155   35BB C6 1F 36      je _if122_exit
8156   35BE             _if122_true:
8157   35BE             ; printf("LT. Uhura reports:\n Message from Starfleet Command:\n\n "); 
8158   35BE 26 7D 6C      mov b, _s79 ; "LT. Uhura reports:\n Message from Starfleet Command:\n\n "
8159   35C1 FD AB         swp b
8160   35C3 D8            push b
8161   35C4 07 BA 07      call printf
8162   35C7 51 02 00      add sp, 2
8163   35CA             ; printf("Permission to attempt crossing of galactic perimeter\n is hereby *denied*. "); 
8164   35CA 26 B4 6C      mov b, _s80 ; "Permission to attempt crossing of galactic perimeter\n is hereby *denied*. "
8165   35CD FD AB         swp b
8166   35CF D8            push b
8167   35D0 07 BA 07      call printf
8168   35D3 51 02 00      add sp, 2
8169   35D6             ; printf("Shut down your engines.\n\n Chief Engineer Scott reports:\n "); 
8170   35D6 26 FF 6C      mov b, _s81 ; "Shut down your engines.\n\n Chief Engineer Scott reports:\n "
8171   35D9 FD AB         swp b
8172   35DB D8            push b
8173   35DC 07 BA 07      call printf
8174   35DF 51 02 00      add sp, 2
8175   35E2             ; printf("Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n",  
8176   35E2 3B 81 64      mov d, _quad_x ; $quad_x
8177   35E5 2A            mov b, [d]
8178   35E6 FD AB         swp b
8179   35E8 D8            push b
8180   35E9 3B 7F 64      mov d, _quad_y ; $quad_y
8181   35EC 2A            mov b, [d]
8182   35ED FD AB         swp b
8183   35EF D8            push b
8184   35F0 3B A0 64      mov d, _ship_x ; $ship_x
8185   35F3 2A            mov b, [d]
8186   35F4 FD AB         swp b
8187   35F6 D8            push b
8188   35F7 07 DA 1F      call FROM_FIXED00
8189   35FA 51 02 00      add sp, 2
8190   35FD FD AB         swp b
8191   35FF D8            push b
8192   3600 3B 9E 64      mov d, _ship_y ; $ship_y
8193   3603 2A            mov b, [d]
8194   3604 FD AB         swp b
8195   3606 D8            push b
8196   3607 07 DA 1F      call FROM_FIXED00
8197   360A 51 02 00      add sp, 2
8198   360D FD AB         swp b
8199   360F D8            push b
8200   3610 26 39 6D      mov b, _s82 ; "Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n"
8201   3613 FD AB         swp b
8202   3615 D8            push b
8203   3616 07 BA 07      call printf
8204   3619 51 0A 00      add sp, 10
8205   361C 0A 1F 36      jmp _if122_exit
8206   361F             _if122_exit:
8207   361F             ; maneuver_energy(n); 
8208   361F FA F9 FF      lea d, [bp + -7] ; $n
8209   3622 2A            mov b, [d]
8210   3623 FD AB         swp b
8211   3625 D8            push b
8212   3626 07 10 38      call maneuver_energy
8213   3629 51 02 00      add sp, 2
8214   362C             ; if (FROM_FIXED(stardate) > time_start + time_up) 
8215   362C             _if123_cond:
8216   362C 3B A2 64      mov d, _stardate ; $stardate
8217   362F 2A            mov b, [d]
8218   3630 FD AB         swp b
8219   3632 D8            push b
8220   3633 07 B7 1F      call FROM_FIXED
8221   3636 51 02 00      add sp, 2
8222   3639             ; --- START RELATIONAL
8223   3639 D7            push a
8224   363A 11            mov a, b
8225   363B 3B 86 64      mov d, _time_start ; $time_start
8226   363E 2A            mov b, [d]
8227   363F             ; --- START TERMS
8228   363F D7            push a
8229   3640 11            mov a, b
8230   3641 3B 88 64      mov d, _time_up ; $time_up
8231   3644 2A            mov b, [d]
8232   3645 56            add b, a
8233   3646 E4            pop a
8234   3647             ; --- END TERMS
8235   3647 B0            cmp a, b
8236   3648 FD 7F         sgt ; >
8237   364A E4            pop a
8238   364B             ; --- END RELATIONAL
8239   364B C0 00 00      cmp b, 0
8240   364E C6 57 36      je _if123_exit
8241   3651             _if123_true:
8242   3651             ; end_of_time(); 
8243   3651 07 ED 57      call end_of_time
8244   3654 0A 57 36      jmp _if123_exit
8245   3657             _if123_exit:
8246   3657             ; if (quad_y != quad_y_old || quad_x != quad_x_old) { 
8247   3657             _if124_cond:
8248   3657 3B 7F 64      mov d, _quad_y ; $quad_y
8249   365A 2A            mov b, [d]
8250   365B             ; --- START RELATIONAL
8251   365B D7            push a
8252   365C 11            mov a, b
8253   365D FA E5 FF      lea d, [bp + -27] ; $quad_y_old
8254   3660 32            mov bl, [d]
8255   3661 A7 00         mov bh, 0
8256   3663 B0            cmp a, b
8257   3664 FD 72         sneq ; !=
8258   3666 E4            pop a
8259   3667             ; --- END RELATIONAL
8260   3667             ; --- START LOGICAL OR
8261   3667 D7            push a
8262   3668 11            mov a, b
8263   3669 3B 81 64      mov d, _quad_x ; $quad_x
8264   366C 2A            mov b, [d]
8265   366D             ; --- START RELATIONAL
8266   366D D7            push a
8267   366E 11            mov a, b
8268   366F FA E4 FF      lea d, [bp + -28] ; $quad_x_old
8269   3672 32            mov bl, [d]
8270   3673 A7 00         mov bh, 0
8271   3675 B0            cmp a, b
8272   3676 FD 72         sneq ; !=
8273   3678 E4            pop a
8274   3679             ; --- END RELATIONAL
8275   3679 FD A8         sor a, b ; ||
8276   367B E4            pop a
8277   367C             ; --- END LOGICAL OR
8278   367C C0 00 00      cmp b, 0
8279   367F C6 A3 36      je _if124_exit
8280   3682             _if124_true:
8281   3682             ; stardate = stardate + TO_FIXED(1); 
8282   3682 3B A2 64      mov d, _stardate ; $stardate
8283   3685 DA            push d
8284   3686 3B A2 64      mov d, _stardate ; $stardate
8285   3689 2A            mov b, [d]
8286   368A             ; --- START TERMS
8287   368A D7            push a
8288   368B 11            mov a, b
8289   368C 26 01 00      mov b, $1
8290   368F FD AB         swp b
8291   3691 D8            push b
8292   3692 07 A5 1F      call TO_FIXED
8293   3695 51 02 00      add sp, 2
8294   3698 56            add b, a
8295   3699 E4            pop a
8296   369A             ; --- END TERMS
8297   369A E7            pop d
8298   369B FD 43         mov [d], b
8299   369D             ; new_quadrant(); 
8300   369D 07 7B 2B      call new_quadrant
8301   36A0 0A A3 36      jmp _if124_exit
8302   36A3             _if124_exit:
8303   36A3             ; complete_maneuver(warp, n); 
8304   36A3 FA F9 FF      lea d, [bp + -7] ; $n
8305   36A6 2A            mov b, [d]
8306   36A7 FD AB         swp b
8307   36A9 D8            push b
8308   36AA FA FB FF      lea d, [bp + -5] ; $warp
8309   36AD 2A            mov b, [d]
8310   36AE FD AB         swp b
8311   36B0 D8            push b
8312   36B1 07 71 37      call complete_maneuver
8313   36B4 51 04 00      add sp, 4
8314   36B7             ; return; 
8315   36B7 F9            leave
8316   36B8 09            ret
8317   36B9 0A BC 36      jmp _if115_exit
8318   36BC             _if115_exit:
8319   36BC             ; if (quad[z1-1][z2-1] !=  		0      ) {	/* Sector not empty */ 
8320   36BC             _if125_cond:
8321   36BC 3B A4 64      mov d, _quad_data ; $quad
8322   36BF D7            push a
8323   36C0 DA            push d
8324   36C1 FA F1 FF      lea d, [bp + -15] ; $z1
8325   36C4 2A            mov b, [d]
8326   36C5             ; --- START TERMS
8327   36C5 D7            push a
8328   36C6 11            mov a, b
8329   36C7 26 01 00      mov b, $1
8330   36CA 60            sub a, b
8331   36CB 27            mov b, a
8332   36CC E4            pop a
8333   36CD             ; --- END TERMS
8334   36CD E7            pop d
8335   36CE FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8336   36D2 DA            push d
8337   36D3 FA EF FF      lea d, [bp + -17] ; $z2
8338   36D6 2A            mov b, [d]
8339   36D7             ; --- START TERMS
8340   36D7 D7            push a
8341   36D8 11            mov a, b
8342   36D9 26 01 00      mov b, $1
8343   36DC 60            sub a, b
8344   36DD 27            mov b, a
8345   36DE E4            pop a
8346   36DF             ; --- END TERMS
8347   36DF E7            pop d
8348   36E0 5A            add d, b
8349   36E1 E4            pop a
8350   36E2 32            mov bl, [d]
8351   36E3 A7 00         mov bh, 0
8352   36E5             ; --- START RELATIONAL
8353   36E5 D7            push a
8354   36E6 11            mov a, b
8355   36E7 26 00 00      mov b, $0
8356   36EA B0            cmp a, b
8357   36EB FD 72         sneq ; !=
8358   36ED E4            pop a
8359   36EE             ; --- END RELATIONAL
8360   36EE C0 00 00      cmp b, 0
8361   36F1 C6 4B 37      je _if125_exit
8362   36F4             _if125_true:
8363   36F4             ; ship_y = ship_y - x1; 
8364   36F4 3B 9E 64      mov d, _ship_y ; $ship_y
8365   36F7 DA            push d
8366   36F8 3B 9E 64      mov d, _ship_y ; $ship_y
8367   36FB 2A            mov b, [d]
8368   36FC             ; --- START TERMS
8369   36FC D7            push a
8370   36FD 11            mov a, b
8371   36FE FA ED FF      lea d, [bp + -19] ; $x1
8372   3701 2A            mov b, [d]
8373   3702 60            sub a, b
8374   3703 27            mov b, a
8375   3704 E4            pop a
8376   3705             ; --- END TERMS
8377   3705 E7            pop d
8378   3706 FD 43         mov [d], b
8379   3708             ; ship_x = ship_x - x2; 
8380   3708 3B A0 64      mov d, _ship_x ; $ship_x
8381   370B DA            push d
8382   370C 3B A0 64      mov d, _ship_x ; $ship_x
8383   370F 2A            mov b, [d]
8384   3710             ; --- START TERMS
8385   3710 D7            push a
8386   3711 11            mov a, b
8387   3712 FA EB FF      lea d, [bp + -21] ; $x2
8388   3715 2A            mov b, [d]
8389   3716 60            sub a, b
8390   3717 27            mov b, a
8391   3718 E4            pop a
8392   3719             ; --- END TERMS
8393   3719 E7            pop d
8394   371A FD 43         mov [d], b
8395   371C             ; printf("Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", z1, z2); 
8396   371C FA EF FF      lea d, [bp + -17] ; $z2
8397   371F 2A            mov b, [d]
8398   3720 FD AB         swp b
8399   3722 D8            push b
8400   3723 FA F1 FF      lea d, [bp + -15] ; $z1
8401   3726 2A            mov b, [d]
8402   3727 FD AB         swp b
8403   3729 D8            push b
8404   372A 26 77 6D      mov b, _s83 ; "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n"
8405   372D FD AB         swp b
8406   372F D8            push b
8407   3730 07 BA 07      call printf
8408   3733 51 06 00      add sp, 6
8409   3736             ; i = n + 1; 
8410   3736 FA FF FF      lea d, [bp + -1] ; $i
8411   3739 DA            push d
8412   373A FA F9 FF      lea d, [bp + -7] ; $n
8413   373D 2A            mov b, [d]
8414   373E             ; --- START TERMS
8415   373E D7            push a
8416   373F 11            mov a, b
8417   3740 26 01 00      mov b, $1
8418   3743 56            add b, a
8419   3744 E4            pop a
8420   3745             ; --- END TERMS
8421   3745 E7            pop d
8422   3746 FD 43         mov [d], b
8423   3748 0A 4B 37      jmp _if125_exit
8424   374B             _if125_exit:
8425   374B             _for114_update:
8426   374B FA FF FF      lea d, [bp + -1] ; $i
8427   374E 2A            mov b, [d]
8428   374F FD 77         inc b
8429   3751 FA FF FF      lea d, [bp + -1] ; $i
8430   3754 FD 43         mov [d], b
8431   3756 FD 7D         dec b
8432   3758 0A E4 32      jmp _for114_cond
8433   375B             _for114_exit:
8434   375B             ; complete_maneuver(warp, n); 
8435   375B FA F9 FF      lea d, [bp + -7] ; $n
8436   375E 2A            mov b, [d]
8437   375F FD AB         swp b
8438   3761 D8            push b
8439   3762 FA FB FF      lea d, [bp + -5] ; $warp
8440   3765 2A            mov b, [d]
8441   3766 FD AB         swp b
8442   3768 D8            push b
8443   3769 07 71 37      call complete_maneuver
8444   376C 51 04 00      add sp, 4
8445   376F F9            leave
8446   3770 09            ret
8447   3771             
8448   3771             complete_maneuver:
8449   3771 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8450   3774             ; unsigned int        time_used; 
8451   3774 52 02 00      sub sp, 2
8452   3777             ; place_ship(); 
8453   3777 07 37 2B      call place_ship
8454   377A             ; maneuver_energy(n); 
8455   377A FA 07 00      lea d, [bp + 7] ; $n
8456   377D 2A            mov b, [d]
8457   377E FD AB         swp b
8458   3780 D8            push b
8459   3781 07 10 38      call maneuver_energy
8460   3784 51 02 00      add sp, 2
8461   3787             ; time_used = TO_FIXED(1); 
8462   3787 FA FF FF      lea d, [bp + -1] ; $time_used
8463   378A DA            push d
8464   378B 26 01 00      mov b, $1
8465   378E FD AB         swp b
8466   3790 D8            push b
8467   3791 07 A5 1F      call TO_FIXED
8468   3794 51 02 00      add sp, 2
8469   3797 E7            pop d
8470   3798 FD 43         mov [d], b
8471   379A             ; if (warp < 100) 
8472   379A             _if126_cond:
8473   379A FA 05 00      lea d, [bp + 5] ; $warp
8474   379D 2A            mov b, [d]
8475   379E             ; --- START RELATIONAL
8476   379E D7            push a
8477   379F 11            mov a, b
8478   37A0 26 64 00      mov b, $64
8479   37A3 B0            cmp a, b
8480   37A4 FD 75         slu ; < (unsigned)
8481   37A6 E4            pop a
8482   37A7             ; --- END RELATIONAL
8483   37A7 C0 00 00      cmp b, 0
8484   37AA C6 CD 37      je _if126_exit
8485   37AD             _if126_true:
8486   37AD             ; time_used = TO_FIXED(FROM_FIXED00(warp)); 
8487   37AD FA FF FF      lea d, [bp + -1] ; $time_used
8488   37B0 DA            push d
8489   37B1 FA 05 00      lea d, [bp + 5] ; $warp
8490   37B4 2A            mov b, [d]
8491   37B5 FD AB         swp b
8492   37B7 D8            push b
8493   37B8 07 DA 1F      call FROM_FIXED00
8494   37BB 51 02 00      add sp, 2
8495   37BE FD AB         swp b
8496   37C0 D8            push b
8497   37C1 07 A5 1F      call TO_FIXED
8498   37C4 51 02 00      add sp, 2
8499   37C7 E7            pop d
8500   37C8 FD 43         mov [d], b
8501   37CA 0A CD 37      jmp _if126_exit
8502   37CD             _if126_exit:
8503   37CD             ; stardate = stardate + time_used; 
8504   37CD 3B A2 64      mov d, _stardate ; $stardate
8505   37D0 DA            push d
8506   37D1 3B A2 64      mov d, _stardate ; $stardate
8507   37D4 2A            mov b, [d]
8508   37D5             ; --- START TERMS
8509   37D5 D7            push a
8510   37D6 11            mov a, b
8511   37D7 FA FF FF      lea d, [bp + -1] ; $time_used
8512   37DA 2A            mov b, [d]
8513   37DB 56            add b, a
8514   37DC E4            pop a
8515   37DD             ; --- END TERMS
8516   37DD E7            pop d
8517   37DE FD 43         mov [d], b
8518   37E0             ; if (FROM_FIXED(stardate) > time_start + time_up) 
8519   37E0             _if127_cond:
8520   37E0 3B A2 64      mov d, _stardate ; $stardate
8521   37E3 2A            mov b, [d]
8522   37E4 FD AB         swp b
8523   37E6 D8            push b
8524   37E7 07 B7 1F      call FROM_FIXED
8525   37EA 51 02 00      add sp, 2
8526   37ED             ; --- START RELATIONAL
8527   37ED D7            push a
8528   37EE 11            mov a, b
8529   37EF 3B 86 64      mov d, _time_start ; $time_start
8530   37F2 2A            mov b, [d]
8531   37F3             ; --- START TERMS
8532   37F3 D7            push a
8533   37F4 11            mov a, b
8534   37F5 3B 88 64      mov d, _time_up ; $time_up
8535   37F8 2A            mov b, [d]
8536   37F9 56            add b, a
8537   37FA E4            pop a
8538   37FB             ; --- END TERMS
8539   37FB B0            cmp a, b
8540   37FC FD 7F         sgt ; >
8541   37FE E4            pop a
8542   37FF             ; --- END RELATIONAL
8543   37FF C0 00 00      cmp b, 0
8544   3802 C6 0B 38      je _if127_exit
8545   3805             _if127_true:
8546   3805             ; end_of_time(); 
8547   3805 07 ED 57      call end_of_time
8548   3808 0A 0B 38      jmp _if127_exit
8549   380B             _if127_exit:
8550   380B             ; short_range_scan(); 
8551   380B 07 8F 38      call short_range_scan
8552   380E F9            leave
8553   380F 09            ret
8554   3810             
8555   3810             maneuver_energy:
8556   3810 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8557   3813             ; energy = energy - n + 10; 
8558   3813 3B C8 63      mov d, _energy ; $energy
8559   3816 DA            push d
8560   3817 3B C8 63      mov d, _energy ; $energy
8561   381A 2A            mov b, [d]
8562   381B             ; --- START TERMS
8563   381B D7            push a
8564   381C 11            mov a, b
8565   381D FA 05 00      lea d, [bp + 5] ; $n
8566   3820 2A            mov b, [d]
8567   3821 60            sub a, b
8568   3822 27            mov b, a
8569   3823 11            mov a, b
8570   3824 26 0A 00      mov b, $a
8571   3827 56            add b, a
8572   3828 E4            pop a
8573   3829             ; --- END TERMS
8574   3829 E7            pop d
8575   382A FD 43         mov [d], b
8576   382C             ; if (energy >= 0) 
8577   382C             _if128_cond:
8578   382C 3B C8 63      mov d, _energy ; $energy
8579   382F 2A            mov b, [d]
8580   3830             ; --- START RELATIONAL
8581   3830 D7            push a
8582   3831 11            mov a, b
8583   3832 26 00 00      mov b, $0
8584   3835 B0            cmp a, b
8585   3836 FD 80         sge ; >=
8586   3838 E4            pop a
8587   3839             ; --- END RELATIONAL
8588   3839 C0 00 00      cmp b, 0
8589   383C C6 44 38      je _if128_exit
8590   383F             _if128_true:
8591   383F             ; return; 
8592   383F F9            leave
8593   3840 09            ret
8594   3841 0A 44 38      jmp _if128_exit
8595   3844             _if128_exit:
8596   3844             ; puts("Shield Control supplies energy to complete maneuver.\n"); 
8597   3844 26 B8 6D      mov b, _s84 ; "Shield Control supplies energy to complete maneuver.\n"
8598   3847 FD AB         swp b
8599   3849 D8            push b
8600   384A 07 BB 17      call puts
8601   384D 51 02 00      add sp, 2
8602   3850             ; shield = shield + energy; 
8603   3850 3B 83 64      mov d, _shield ; $shield
8604   3853 DA            push d
8605   3854 3B 83 64      mov d, _shield ; $shield
8606   3857 2A            mov b, [d]
8607   3858             ; --- START TERMS
8608   3858 D7            push a
8609   3859 11            mov a, b
8610   385A 3B C8 63      mov d, _energy ; $energy
8611   385D 2A            mov b, [d]
8612   385E 56            add b, a
8613   385F E4            pop a
8614   3860             ; --- END TERMS
8615   3860 E7            pop d
8616   3861 FD 43         mov [d], b
8617   3863             ; energy = 0; 
8618   3863 3B C8 63      mov d, _energy ; $energy
8619   3866 DA            push d
8620   3867 26 00 00      mov b, $0
8621   386A E7            pop d
8622   386B FD 43         mov [d], b
8623   386D             ; if (shield <= 0) 
8624   386D             _if129_cond:
8625   386D 3B 83 64      mov d, _shield ; $shield
8626   3870 2A            mov b, [d]
8627   3871             ; --- START RELATIONAL
8628   3871 D7            push a
8629   3872 11            mov a, b
8630   3873 26 00 00      mov b, $0
8631   3876 B0            cmp a, b
8632   3877 FD 74         sle ; <= (signed)
8633   3879 E4            pop a
8634   387A             ; --- END RELATIONAL
8635   387A C0 00 00      cmp b, 0
8636   387D C6 8D 38      je _if129_exit
8637   3880             _if129_true:
8638   3880             ; shield = 0; 
8639   3880 3B 83 64      mov d, _shield ; $shield
8640   3883 DA            push d
8641   3884 26 00 00      mov b, $0
8642   3887 E7            pop d
8643   3888 FD 43         mov [d], b
8644   388A 0A 8D 38      jmp _if129_exit
8645   388D             _if129_exit:
8646   388D F9            leave
8647   388E 09            ret
8648   388F             
8649   388F             short_range_scan:
8650   388F F8 00 00      enter 0 ; (push bp; mov bp, sp)
8651   3892             ; int i, j; 
8652   3892 52 02 00      sub sp, 2
8653   3895 52 02 00      sub sp, 2
8654   3898             ; char *sC = "GREEN"; 
8655   3898 52 02 00      sub sp, 2
8656   389B             ; --- START LOCAL VAR INITIALIZATION
8657   389B FA FB FF      lea d, [bp + -5] ; $sC
8658   389E DA            push d
8659   389F 26 EE 6D      mov b, _s85 ; "GREEN"
8660   38A2 E7            pop d
8661   38A3 FD 43         mov [d], b
8662   38A5             ; --- END LOCAL VAR INITIALIZATION
8663   38A5             ; if (energy < energy0 / 10) 
8664   38A5             _if130_cond:
8665   38A5 3B C8 63      mov d, _energy ; $energy
8666   38A8 2A            mov b, [d]
8667   38A9             ; --- START RELATIONAL
8668   38A9 D7            push a
8669   38AA 11            mov a, b
8670   38AB 3B CA 63      mov d, _energy0 ; $energy0
8671   38AE 2A            mov b, [d]
8672   38AF             ; --- START FACTORS
8673   38AF D7            push a
8674   38B0 11            mov a, b
8675   38B1 26 0A 00      mov b, $a
8676   38B4 AE            div a, b
8677   38B5 27            mov b, a
8678   38B6 E4            pop a
8679   38B7             ; --- END FACTORS
8680   38B7 B0            cmp a, b
8681   38B8 FD 73         slt ; < (signed)
8682   38BA E4            pop a
8683   38BB             ; --- END RELATIONAL
8684   38BB C0 00 00      cmp b, 0
8685   38BE C6 CE 38      je _if130_exit
8686   38C1             _if130_true:
8687   38C1             ; sC = "YELLOW"; 
8688   38C1 FA FB FF      lea d, [bp + -5] ; $sC
8689   38C4 DA            push d
8690   38C5 26 F4 6D      mov b, _s86 ; "YELLOW"
8691   38C8 E7            pop d
8692   38C9 FD 43         mov [d], b
8693   38CB 0A CE 38      jmp _if130_exit
8694   38CE             _if130_exit:
8695   38CE             ; if (klingons > 0) 
8696   38CE             _if131_cond:
8697   38CE 3B 7A 64      mov d, _klingons ; $klingons
8698   38D1 32            mov bl, [d]
8699   38D2 A7 00         mov bh, 0
8700   38D4             ; --- START RELATIONAL
8701   38D4 D7            push a
8702   38D5 11            mov a, b
8703   38D6 26 00 00      mov b, $0
8704   38D9 B0            cmp a, b
8705   38DA FD 81         sgu ; > (unsigned)
8706   38DC E4            pop a
8707   38DD             ; --- END RELATIONAL
8708   38DD C0 00 00      cmp b, 0
8709   38E0 C6 F0 38      je _if131_exit
8710   38E3             _if131_true:
8711   38E3             ; sC = "*RED*"; 
8712   38E3 FA FB FF      lea d, [bp + -5] ; $sC
8713   38E6 DA            push d
8714   38E7 26 FB 6D      mov b, _s87 ; "*RED*"
8715   38EA E7            pop d
8716   38EB FD 43         mov [d], b
8717   38ED 0A F0 38      jmp _if131_exit
8718   38F0             _if131_exit:
8719   38F0             ; docked = 0; 
8720   38F0 3B C7 63      mov d, _docked ; $docked
8721   38F3 DA            push d
8722   38F4 26 00 00      mov b, $0
8723   38F7 E7            pop d
8724   38F8 FD 3E         mov [d], bl
8725   38FA             ; for (i = (int) (FROM_FIXED00(ship_y) - 1); i <= (int) (FROM_FIXED00(ship_y) + 1); i++) 
8726   38FA             _for132_init:
8727   38FA FA FF FF      lea d, [bp + -1] ; $i
8728   38FD DA            push d
8729   38FE 3B 9E 64      mov d, _ship_y ; $ship_y
8730   3901 2A            mov b, [d]
8731   3902 FD AB         swp b
8732   3904 D8            push b
8733   3905 07 DA 1F      call FROM_FIXED00
8734   3908 51 02 00      add sp, 2
8735   390B             ; --- START TERMS
8736   390B D7            push a
8737   390C 11            mov a, b
8738   390D 26 01 00      mov b, $1
8739   3910 60            sub a, b
8740   3911 27            mov b, a
8741   3912 E4            pop a
8742   3913             ; --- END TERMS
8743   3913 E7            pop d
8744   3914 FD 43         mov [d], b
8745   3916             _for132_cond:
8746   3916 FA FF FF      lea d, [bp + -1] ; $i
8747   3919 2A            mov b, [d]
8748   391A             ; --- START RELATIONAL
8749   391A D7            push a
8750   391B 11            mov a, b
8751   391C 3B 9E 64      mov d, _ship_y ; $ship_y
8752   391F 2A            mov b, [d]
8753   3920 FD AB         swp b
8754   3922 D8            push b
8755   3923 07 DA 1F      call FROM_FIXED00
8756   3926 51 02 00      add sp, 2
8757   3929             ; --- START TERMS
8758   3929 D7            push a
8759   392A 11            mov a, b
8760   392B 26 01 00      mov b, $1
8761   392E 56            add b, a
8762   392F E4            pop a
8763   3930             ; --- END TERMS
8764   3930 B0            cmp a, b
8765   3931 FD 74         sle ; <= (signed)
8766   3933 E4            pop a
8767   3934             ; --- END RELATIONAL
8768   3934 C0 00 00      cmp b, 0
8769   3937 C6 5F 3A      je _for132_exit
8770   393A             _for132_block:
8771   393A             ; for (j = (int) (FROM_FIXED00(ship_x) - 1); j <= (int) (FROM_FIXED00(ship_x) + 1); j++) 
8772   393A             _for133_init:
8773   393A FA FD FF      lea d, [bp + -3] ; $j
8774   393D DA            push d
8775   393E 3B A0 64      mov d, _ship_x ; $ship_x
8776   3941 2A            mov b, [d]
8777   3942 FD AB         swp b
8778   3944 D8            push b
8779   3945 07 DA 1F      call FROM_FIXED00
8780   3948 51 02 00      add sp, 2
8781   394B             ; --- START TERMS
8782   394B D7            push a
8783   394C 11            mov a, b
8784   394D 26 01 00      mov b, $1
8785   3950 60            sub a, b
8786   3951 27            mov b, a
8787   3952 E4            pop a
8788   3953             ; --- END TERMS
8789   3953 E7            pop d
8790   3954 FD 43         mov [d], b
8791   3956             _for133_cond:
8792   3956 FA FD FF      lea d, [bp + -3] ; $j
8793   3959 2A            mov b, [d]
8794   395A             ; --- START RELATIONAL
8795   395A D7            push a
8796   395B 11            mov a, b
8797   395C 3B A0 64      mov d, _ship_x ; $ship_x
8798   395F 2A            mov b, [d]
8799   3960 FD AB         swp b
8800   3962 D8            push b
8801   3963 07 DA 1F      call FROM_FIXED00
8802   3966 51 02 00      add sp, 2
8803   3969             ; --- START TERMS
8804   3969 D7            push a
8805   396A 11            mov a, b
8806   396B 26 01 00      mov b, $1
8807   396E 56            add b, a
8808   396F E4            pop a
8809   3970             ; --- END TERMS
8810   3970 B0            cmp a, b
8811   3971 FD 74         sle ; <= (signed)
8812   3973 E4            pop a
8813   3974             ; --- END RELATIONAL
8814   3974 C0 00 00      cmp b, 0
8815   3977 C6 4F 3A      je _for133_exit
8816   397A             _for133_block:
8817   397A             ; if (i >= 1 && i <= 8 && j >= 1 && j <= 8) { 
8818   397A             _if134_cond:
8819   397A FA FF FF      lea d, [bp + -1] ; $i
8820   397D 2A            mov b, [d]
8821   397E             ; --- START RELATIONAL
8822   397E D7            push a
8823   397F 11            mov a, b
8824   3980 26 01 00      mov b, $1
8825   3983 B0            cmp a, b
8826   3984 FD 80         sge ; >=
8827   3986 E4            pop a
8828   3987             ; --- END RELATIONAL
8829   3987             ; --- START LOGICAL AND
8830   3987 D7            push a
8831   3988 11            mov a, b
8832   3989 FA FF FF      lea d, [bp + -1] ; $i
8833   398C 2A            mov b, [d]
8834   398D             ; --- START RELATIONAL
8835   398D D7            push a
8836   398E 11            mov a, b
8837   398F 26 08 00      mov b, $8
8838   3992 B0            cmp a, b
8839   3993 FD 74         sle ; <= (signed)
8840   3995 E4            pop a
8841   3996             ; --- END RELATIONAL
8842   3996 FD A7         sand a, b
8843   3998 11            mov a, b
8844   3999 FA FD FF      lea d, [bp + -3] ; $j
8845   399C 2A            mov b, [d]
8846   399D             ; --- START RELATIONAL
8847   399D D7            push a
8848   399E 11            mov a, b
8849   399F 26 01 00      mov b, $1
8850   39A2 B0            cmp a, b
8851   39A3 FD 80         sge ; >=
8852   39A5 E4            pop a
8853   39A6             ; --- END RELATIONAL
8854   39A6 FD A7         sand a, b
8855   39A8 11            mov a, b
8856   39A9 FA FD FF      lea d, [bp + -3] ; $j
8857   39AC 2A            mov b, [d]
8858   39AD             ; --- START RELATIONAL
8859   39AD D7            push a
8860   39AE 11            mov a, b
8861   39AF 26 08 00      mov b, $8
8862   39B2 B0            cmp a, b
8863   39B3 FD 74         sle ; <= (signed)
8864   39B5 E4            pop a
8865   39B6             ; --- END RELATIONAL
8866   39B6 FD A7         sand a, b
8867   39B8 E4            pop a
8868   39B9             ; --- END LOGICAL AND
8869   39B9 C0 00 00      cmp b, 0
8870   39BC C6 3F 3A      je _if134_exit
8871   39BF             _if134_true:
8872   39BF             ; if (quad[i-1][j-1] ==  		2     ) { 
8873   39BF             _if135_cond:
8874   39BF 3B A4 64      mov d, _quad_data ; $quad
8875   39C2 D7            push a
8876   39C3 DA            push d
8877   39C4 FA FF FF      lea d, [bp + -1] ; $i
8878   39C7 2A            mov b, [d]
8879   39C8             ; --- START TERMS
8880   39C8 D7            push a
8881   39C9 11            mov a, b
8882   39CA 26 01 00      mov b, $1
8883   39CD 60            sub a, b
8884   39CE 27            mov b, a
8885   39CF E4            pop a
8886   39D0             ; --- END TERMS
8887   39D0 E7            pop d
8888   39D1 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8889   39D5 DA            push d
8890   39D6 FA FD FF      lea d, [bp + -3] ; $j
8891   39D9 2A            mov b, [d]
8892   39DA             ; --- START TERMS
8893   39DA D7            push a
8894   39DB 11            mov a, b
8895   39DC 26 01 00      mov b, $1
8896   39DF 60            sub a, b
8897   39E0 27            mov b, a
8898   39E1 E4            pop a
8899   39E2             ; --- END TERMS
8900   39E2 E7            pop d
8901   39E3 5A            add d, b
8902   39E4 E4            pop a
8903   39E5 32            mov bl, [d]
8904   39E6 A7 00         mov bh, 0
8905   39E8             ; --- START RELATIONAL
8906   39E8 D7            push a
8907   39E9 11            mov a, b
8908   39EA 26 02 00      mov b, $2
8909   39ED B0            cmp a, b
8910   39EE FD 71         seq ; ==
8911   39F0 E4            pop a
8912   39F1             ; --- END RELATIONAL
8913   39F1 C0 00 00      cmp b, 0
8914   39F4 C6 3C 3A      je _if135_exit
8915   39F7             _if135_true:
8916   39F7             ; docked = 1; 
8917   39F7 3B C7 63      mov d, _docked ; $docked
8918   39FA DA            push d
8919   39FB 26 01 00      mov b, $1
8920   39FE E7            pop d
8921   39FF FD 3E         mov [d], bl
8922   3A01             ; sC = "DOCKED"; 
8923   3A01 FA FB FF      lea d, [bp + -5] ; $sC
8924   3A04 DA            push d
8925   3A05 26 01 6E      mov b, _s88 ; "DOCKED"
8926   3A08 E7            pop d
8927   3A09 FD 43         mov [d], b
8928   3A0B             ; energy = energy0; 
8929   3A0B 3B C8 63      mov d, _energy ; $energy
8930   3A0E DA            push d
8931   3A0F 3B CA 63      mov d, _energy0 ; $energy0
8932   3A12 2A            mov b, [d]
8933   3A13 E7            pop d
8934   3A14 FD 43         mov [d], b
8935   3A16             ; torps = torps0; 
8936   3A16 3B 7D 64      mov d, _torps ; $torps
8937   3A19 DA            push d
8938   3A1A 3B 7E 64      mov d, _torps0 ; $torps0
8939   3A1D 32            mov bl, [d]
8940   3A1E A7 00         mov bh, 0
8941   3A20 E7            pop d
8942   3A21 FD 3E         mov [d], bl
8943   3A23             ; puts("Shields dropped for docking purposes."); 
8944   3A23 26 08 6E      mov b, _s89 ; "Shields dropped for docking purposes."
8945   3A26 FD AB         swp b
8946   3A28 D8            push b
8947   3A29 07 BB 17      call puts
8948   3A2C 51 02 00      add sp, 2
8949   3A2F             ; shield = 0; 
8950   3A2F 3B 83 64      mov d, _shield ; $shield
8951   3A32 DA            push d
8952   3A33 26 00 00      mov b, $0
8953   3A36 E7            pop d
8954   3A37 FD 43         mov [d], b
8955   3A39 0A 3C 3A      jmp _if135_exit
8956   3A3C             _if135_exit:
8957   3A3C 0A 3F 3A      jmp _if134_exit
8958   3A3F             _if134_exit:
8959   3A3F             _for133_update:
8960   3A3F FA FD FF      lea d, [bp + -3] ; $j
8961   3A42 2A            mov b, [d]
8962   3A43 FD 77         inc b
8963   3A45 FA FD FF      lea d, [bp + -3] ; $j
8964   3A48 FD 43         mov [d], b
8965   3A4A FD 7D         dec b
8966   3A4C 0A 56 39      jmp _for133_cond
8967   3A4F             _for133_exit:
8968   3A4F             _for132_update:
8969   3A4F FA FF FF      lea d, [bp + -1] ; $i
8970   3A52 2A            mov b, [d]
8971   3A53 FD 77         inc b
8972   3A55 FA FF FF      lea d, [bp + -1] ; $i
8973   3A58 FD 43         mov [d], b
8974   3A5A FD 7D         dec b
8975   3A5C 0A 16 39      jmp _for132_cond
8976   3A5F             _for132_exit:
8977   3A5F             ; if (damage[2] < 0) { 
8978   3A5F             _if136_cond:
8979   3A5F 3B 8A 64      mov d, _damage_data ; $damage
8980   3A62 D7            push a
8981   3A63 DA            push d
8982   3A64 26 02 00      mov b, $2
8983   3A67 E7            pop d
8984   3A68 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8985   3A6C E4            pop a
8986   3A6D 2A            mov b, [d]
8987   3A6E             ; --- START RELATIONAL
8988   3A6E D7            push a
8989   3A6F 11            mov a, b
8990   3A70 26 00 00      mov b, $0
8991   3A73 B0            cmp a, b
8992   3A74 FD 73         slt ; < (signed)
8993   3A76 E4            pop a
8994   3A77             ; --- END RELATIONAL
8995   3A77 C0 00 00      cmp b, 0
8996   3A7A C6 8E 3A      je _if136_exit
8997   3A7D             _if136_true:
8998   3A7D             ; puts("\n*** Short Range Sensors are out ***"); 
8999   3A7D 26 2E 6E      mov b, _s90 ; "\n*** Short Range Sensors are out ***"
9000   3A80 FD AB         swp b
9001   3A82 D8            push b
9002   3A83 07 BB 17      call puts
9003   3A86 51 02 00      add sp, 2
9004   3A89             ; return; 
9005   3A89 F9            leave
9006   3A8A 09            ret
9007   3A8B 0A 8E 3A      jmp _if136_exit
9008   3A8E             _if136_exit:
9009   3A8E             ; puts(srs_1); 
9010   3A8E 3B C5 65      mov d, _srs_1 ; $srs_1
9011   3A91 2A            mov b, [d]
9012   3A92 FD AB         swp b
9013   3A94 D8            push b
9014   3A95 07 BB 17      call puts
9015   3A98 51 02 00      add sp, 2
9016   3A9B             ; for (i = 0; i < 8; i++) { 
9017   3A9B             _for137_init:
9018   3A9B FA FF FF      lea d, [bp + -1] ; $i
9019   3A9E DA            push d
9020   3A9F 26 00 00      mov b, $0
9021   3AA2 E7            pop d
9022   3AA3 FD 43         mov [d], b
9023   3AA5             _for137_cond:
9024   3AA5 FA FF FF      lea d, [bp + -1] ; $i
9025   3AA8 2A            mov b, [d]
9026   3AA9             ; --- START RELATIONAL
9027   3AA9 D7            push a
9028   3AAA 11            mov a, b
9029   3AAB 26 08 00      mov b, $8
9030   3AAE B0            cmp a, b
9031   3AAF FD 73         slt ; < (signed)
9032   3AB1 E4            pop a
9033   3AB2             ; --- END RELATIONAL
9034   3AB2 C0 00 00      cmp b, 0
9035   3AB5 C6 9C 3C      je _for137_exit
9036   3AB8             _for137_block:
9037   3AB8             ; for (j = 0; j < 8; j++) 
9038   3AB8             _for138_init:
9039   3AB8 FA FD FF      lea d, [bp + -3] ; $j
9040   3ABB DA            push d
9041   3ABC 26 00 00      mov b, $0
9042   3ABF E7            pop d
9043   3AC0 FD 43         mov [d], b
9044   3AC2             _for138_cond:
9045   3AC2 FA FD FF      lea d, [bp + -3] ; $j
9046   3AC5 2A            mov b, [d]
9047   3AC6             ; --- START RELATIONAL
9048   3AC6 D7            push a
9049   3AC7 11            mov a, b
9050   3AC8 26 08 00      mov b, $8
9051   3ACB B0            cmp a, b
9052   3ACC FD 73         slt ; < (signed)
9053   3ACE E4            pop a
9054   3ACF             ; --- END RELATIONAL
9055   3ACF C0 00 00      cmp b, 0
9056   3AD2 C6 13 3B      je _for138_exit
9057   3AD5             _for138_block:
9058   3AD5             ; puts(tilestr[quad[i][j]]); 
9059   3AD5 3B C7 65      mov d, _tilestr_data ; $tilestr
9060   3AD8 D7            push a
9061   3AD9 DA            push d
9062   3ADA 3B A4 64      mov d, _quad_data ; $quad
9063   3ADD D7            push a
9064   3ADE DA            push d
9065   3ADF FA FF FF      lea d, [bp + -1] ; $i
9066   3AE2 2A            mov b, [d]
9067   3AE3 E7            pop d
9068   3AE4 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
9069   3AE8 DA            push d
9070   3AE9 FA FD FF      lea d, [bp + -3] ; $j
9071   3AEC 2A            mov b, [d]
9072   3AED E7            pop d
9073   3AEE 5A            add d, b
9074   3AEF E4            pop a
9075   3AF0 32            mov bl, [d]
9076   3AF1 A7 00         mov bh, 0
9077   3AF3 E7            pop d
9078   3AF4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9079   3AF8 E4            pop a
9080   3AF9 2A            mov b, [d]
9081   3AFA FD AB         swp b
9082   3AFC D8            push b
9083   3AFD 07 BB 17      call puts
9084   3B00 51 02 00      add sp, 2
9085   3B03             _for138_update:
9086   3B03 FA FD FF      lea d, [bp + -3] ; $j
9087   3B06 2A            mov b, [d]
9088   3B07 FD 77         inc b
9089   3B09 FA FD FF      lea d, [bp + -3] ; $j
9090   3B0C FD 43         mov [d], b
9091   3B0E FD 7D         dec b
9092   3B10 0A C2 3A      jmp _for138_cond
9093   3B13             _for138_exit:
9094   3B13             ; if (i == 0) 
9095   3B13             _if139_cond:
9096   3B13 FA FF FF      lea d, [bp + -1] ; $i
9097   3B16 2A            mov b, [d]
9098   3B17             ; --- START RELATIONAL
9099   3B17 D7            push a
9100   3B18 11            mov a, b
9101   3B19 26 00 00      mov b, $0
9102   3B1C B0            cmp a, b
9103   3B1D FD 71         seq ; ==
9104   3B1F E4            pop a
9105   3B20             ; --- END RELATIONAL
9106   3B20 C0 00 00      cmp b, 0
9107   3B23 C6 45 3B      je _if139_exit
9108   3B26             _if139_true:
9109   3B26             ; printf("    Stardate            %d\n", FROM_FIXED(stardate)); 
9110   3B26 3B A2 64      mov d, _stardate ; $stardate
9111   3B29 2A            mov b, [d]
9112   3B2A FD AB         swp b
9113   3B2C D8            push b
9114   3B2D 07 B7 1F      call FROM_FIXED
9115   3B30 51 02 00      add sp, 2
9116   3B33 FD AB         swp b
9117   3B35 D8            push b
9118   3B36 26 53 6E      mov b, _s91 ; "    Stardate            %d\n"
9119   3B39 FD AB         swp b
9120   3B3B D8            push b
9121   3B3C 07 BA 07      call printf
9122   3B3F 51 04 00      add sp, 4
9123   3B42 0A 45 3B      jmp _if139_exit
9124   3B45             _if139_exit:
9125   3B45             ; if (i == 1) 
9126   3B45             _if140_cond:
9127   3B45 FA FF FF      lea d, [bp + -1] ; $i
9128   3B48 2A            mov b, [d]
9129   3B49             ; --- START RELATIONAL
9130   3B49 D7            push a
9131   3B4A 11            mov a, b
9132   3B4B 26 01 00      mov b, $1
9133   3B4E B0            cmp a, b
9134   3B4F FD 71         seq ; ==
9135   3B51 E4            pop a
9136   3B52             ; --- END RELATIONAL
9137   3B52 C0 00 00      cmp b, 0
9138   3B55 C6 6E 3B      je _if140_exit
9139   3B58             _if140_true:
9140   3B58             ; printf("    Condition           %s\n", sC); 
9141   3B58 FA FB FF      lea d, [bp + -5] ; $sC
9142   3B5B 2A            mov b, [d]
9143   3B5C FD AB         swp b
9144   3B5E D8            push b
9145   3B5F 26 6F 6E      mov b, _s92 ; "    Condition           %s\n"
9146   3B62 FD AB         swp b
9147   3B64 D8            push b
9148   3B65 07 BA 07      call printf
9149   3B68 51 04 00      add sp, 4
9150   3B6B 0A 6E 3B      jmp _if140_exit
9151   3B6E             _if140_exit:
9152   3B6E             ; if (i == 2) 
9153   3B6E             _if141_cond:
9154   3B6E FA FF FF      lea d, [bp + -1] ; $i
9155   3B71 2A            mov b, [d]
9156   3B72             ; --- START RELATIONAL
9157   3B72 D7            push a
9158   3B73 11            mov a, b
9159   3B74 26 02 00      mov b, $2
9160   3B77 B0            cmp a, b
9161   3B78 FD 71         seq ; ==
9162   3B7A E4            pop a
9163   3B7B             ; --- END RELATIONAL
9164   3B7B C0 00 00      cmp b, 0
9165   3B7E C6 9E 3B      je _if141_exit
9166   3B81             _if141_true:
9167   3B81             ; printf("    Quadrant            %d, %d\n", quad_y, quad_x); 
9168   3B81 3B 81 64      mov d, _quad_x ; $quad_x
9169   3B84 2A            mov b, [d]
9170   3B85 FD AB         swp b
9171   3B87 D8            push b
9172   3B88 3B 7F 64      mov d, _quad_y ; $quad_y
9173   3B8B 2A            mov b, [d]
9174   3B8C FD AB         swp b
9175   3B8E D8            push b
9176   3B8F 26 8B 6E      mov b, _s93 ; "    Quadrant            %d, %d\n"
9177   3B92 FD AB         swp b
9178   3B94 D8            push b
9179   3B95 07 BA 07      call printf
9180   3B98 51 06 00      add sp, 6
9181   3B9B 0A 9E 3B      jmp _if141_exit
9182   3B9E             _if141_exit:
9183   3B9E             ; if (i == 3) 
9184   3B9E             _if142_cond:
9185   3B9E FA FF FF      lea d, [bp + -1] ; $i
9186   3BA1 2A            mov b, [d]
9187   3BA2             ; --- START RELATIONAL
9188   3BA2 D7            push a
9189   3BA3 11            mov a, b
9190   3BA4 26 03 00      mov b, $3
9191   3BA7 B0            cmp a, b
9192   3BA8 FD 71         seq ; ==
9193   3BAA E4            pop a
9194   3BAB             ; --- END RELATIONAL
9195   3BAB C0 00 00      cmp b, 0
9196   3BAE C6 E0 3B      je _if142_exit
9197   3BB1             _if142_true:
9198   3BB1             ; printf("    Sector              %d, %d\n", FROM_FIXED00(ship_y), FROM_FIXED00(ship_x)); 
9199   3BB1 3B A0 64      mov d, _ship_x ; $ship_x
9200   3BB4 2A            mov b, [d]
9201   3BB5 FD AB         swp b
9202   3BB7 D8            push b
9203   3BB8 07 DA 1F      call FROM_FIXED00
9204   3BBB 51 02 00      add sp, 2
9205   3BBE FD AB         swp b
9206   3BC0 D8            push b
9207   3BC1 3B 9E 64      mov d, _ship_y ; $ship_y
9208   3BC4 2A            mov b, [d]
9209   3BC5 FD AB         swp b
9210   3BC7 D8            push b
9211   3BC8 07 DA 1F      call FROM_FIXED00
9212   3BCB 51 02 00      add sp, 2
9213   3BCE FD AB         swp b
9214   3BD0 D8            push b
9215   3BD1 26 AB 6E      mov b, _s94 ; "    Sector              %d, %d\n"
9216   3BD4 FD AB         swp b
9217   3BD6 D8            push b
9218   3BD7 07 BA 07      call printf
9219   3BDA 51 06 00      add sp, 6
9220   3BDD 0A E0 3B      jmp _if142_exit
9221   3BE0             _if142_exit:
9222   3BE0             ; if (i == 4) 
9223   3BE0             _if143_cond:
9224   3BE0 FA FF FF      lea d, [bp + -1] ; $i
9225   3BE3 2A            mov b, [d]
9226   3BE4             ; --- START RELATIONAL
9227   3BE4 D7            push a
9228   3BE5 11            mov a, b
9229   3BE6 26 04 00      mov b, $4
9230   3BE9 B0            cmp a, b
9231   3BEA FD 71         seq ; ==
9232   3BEC E4            pop a
9233   3BED             ; --- END RELATIONAL
9234   3BED C0 00 00      cmp b, 0
9235   3BF0 C6 09 3C      je _if143_exit
9236   3BF3             _if143_true:
9237   3BF3             ; printf("    Photon Torpedoes    %d\n", torps); 
9238   3BF3 3B 7D 64      mov d, _torps ; $torps
9239   3BF6 32            mov bl, [d]
9240   3BF7 A7 00         mov bh, 0
9241   3BF9 DD            push bl
9242   3BFA 26 CB 6E      mov b, _s95 ; "    Photon Torpedoes    %d\n"
9243   3BFD FD AB         swp b
9244   3BFF D8            push b
9245   3C00 07 BA 07      call printf
9246   3C03 51 03 00      add sp, 3
9247   3C06 0A 09 3C      jmp _if143_exit
9248   3C09             _if143_exit:
9249   3C09             ; if (i == 5) 
9250   3C09             _if144_cond:
9251   3C09 FA FF FF      lea d, [bp + -1] ; $i
9252   3C0C 2A            mov b, [d]
9253   3C0D             ; --- START RELATIONAL
9254   3C0D D7            push a
9255   3C0E 11            mov a, b
9256   3C0F 26 05 00      mov b, $5
9257   3C12 B0            cmp a, b
9258   3C13 FD 71         seq ; ==
9259   3C15 E4            pop a
9260   3C16             ; --- END RELATIONAL
9261   3C16 C0 00 00      cmp b, 0
9262   3C19 C6 3A 3C      je _if144_exit
9263   3C1C             _if144_true:
9264   3C1C             ; printf("    Total Energy        %d\n", energy + shield); 
9265   3C1C 3B C8 63      mov d, _energy ; $energy
9266   3C1F 2A            mov b, [d]
9267   3C20             ; --- START TERMS
9268   3C20 D7            push a
9269   3C21 11            mov a, b
9270   3C22 3B 83 64      mov d, _shield ; $shield
9271   3C25 2A            mov b, [d]
9272   3C26 56            add b, a
9273   3C27 E4            pop a
9274   3C28             ; --- END TERMS
9275   3C28 FD AB         swp b
9276   3C2A D8            push b
9277   3C2B 26 E7 6E      mov b, _s96 ; "    Total Energy        %d\n"
9278   3C2E FD AB         swp b
9279   3C30 D8            push b
9280   3C31 07 BA 07      call printf
9281   3C34 51 04 00      add sp, 4
9282   3C37 0A 3A 3C      jmp _if144_exit
9283   3C3A             _if144_exit:
9284   3C3A             ; if (i == 6) 
9285   3C3A             _if145_cond:
9286   3C3A FA FF FF      lea d, [bp + -1] ; $i
9287   3C3D 2A            mov b, [d]
9288   3C3E             ; --- START RELATIONAL
9289   3C3E D7            push a
9290   3C3F 11            mov a, b
9291   3C40 26 06 00      mov b, $6
9292   3C43 B0            cmp a, b
9293   3C44 FD 71         seq ; ==
9294   3C46 E4            pop a
9295   3C47             ; --- END RELATIONAL
9296   3C47 C0 00 00      cmp b, 0
9297   3C4A C6 63 3C      je _if145_exit
9298   3C4D             _if145_true:
9299   3C4D             ; printf("    Shields             %d\n", shield); 
9300   3C4D 3B 83 64      mov d, _shield ; $shield
9301   3C50 2A            mov b, [d]
9302   3C51 FD AB         swp b
9303   3C53 D8            push b
9304   3C54 26 03 6F      mov b, _s97 ; "    Shields             %d\n"
9305   3C57 FD AB         swp b
9306   3C59 D8            push b
9307   3C5A 07 BA 07      call printf
9308   3C5D 51 04 00      add sp, 4
9309   3C60 0A 63 3C      jmp _if145_exit
9310   3C63             _if145_exit:
9311   3C63             ; if (i == 7) 
9312   3C63             _if146_cond:
9313   3C63 FA FF FF      lea d, [bp + -1] ; $i
9314   3C66 2A            mov b, [d]
9315   3C67             ; --- START RELATIONAL
9316   3C67 D7            push a
9317   3C68 11            mov a, b
9318   3C69 26 07 00      mov b, $7
9319   3C6C B0            cmp a, b
9320   3C6D FD 71         seq ; ==
9321   3C6F E4            pop a
9322   3C70             ; --- END RELATIONAL
9323   3C70 C0 00 00      cmp b, 0
9324   3C73 C6 8C 3C      je _if146_exit
9325   3C76             _if146_true:
9326   3C76             ; printf("    Klingons Remaining  %d\n", klingons_left); 
9327   3C76 3B 7C 64      mov d, _klingons_left ; $klingons_left
9328   3C79 32            mov bl, [d]
9329   3C7A A7 00         mov bh, 0
9330   3C7C DD            push bl
9331   3C7D 26 1F 6F      mov b, _s98 ; "    Klingons Remaining  %d\n"
9332   3C80 FD AB         swp b
9333   3C82 D8            push b
9334   3C83 07 BA 07      call printf
9335   3C86 51 03 00      add sp, 3
9336   3C89 0A 8C 3C      jmp _if146_exit
9337   3C8C             _if146_exit:
9338   3C8C             _for137_update:
9339   3C8C FA FF FF      lea d, [bp + -1] ; $i
9340   3C8F 2A            mov b, [d]
9341   3C90 FD 77         inc b
9342   3C92 FA FF FF      lea d, [bp + -1] ; $i
9343   3C95 FD 43         mov [d], b
9344   3C97 FD 7D         dec b
9345   3C99 0A A5 3A      jmp _for137_cond
9346   3C9C             _for137_exit:
9347   3C9C             ; puts(srs_1); 
9348   3C9C 3B C5 65      mov d, _srs_1 ; $srs_1
9349   3C9F 2A            mov b, [d]
9350   3CA0 FD AB         swp b
9351   3CA2 D8            push b
9352   3CA3 07 BB 17      call puts
9353   3CA6 51 02 00      add sp, 2
9354   3CA9             ; putchar('\n'); 
9355   3CA9 26 0A 00      mov b, $a
9356   3CAC DD            push bl
9357   3CAD 07 85 17      call putchar
9358   3CB0 51 01 00      add sp, 1
9359   3CB3             ; return; 
9360   3CB3 F9            leave
9361   3CB4 09            ret
9362   3CB5             
9363   3CB5             put1bcd:
9364   3CB5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9365   3CB8             ; v = v & 0x0F; 
9366   3CB8 FA 05 00      lea d, [bp + 5] ; $v
9367   3CBB DA            push d
9368   3CBC FA 05 00      lea d, [bp + 5] ; $v
9369   3CBF 32            mov bl, [d]
9370   3CC0 A7 00         mov bh, 0
9371   3CC2 D7            push a
9372   3CC3 11            mov a, b
9373   3CC4 26 0F 00      mov b, $f
9374   3CC7 FD 92         and b, a ; &
9375   3CC9 E4            pop a
9376   3CCA E7            pop d
9377   3CCB FD 3E         mov [d], bl
9378   3CCD             ; putchar('0' + v); 
9379   3CCD 26 30 00      mov b, $30
9380   3CD0             ; --- START TERMS
9381   3CD0 D7            push a
9382   3CD1 11            mov a, b
9383   3CD2 FA 05 00      lea d, [bp + 5] ; $v
9384   3CD5 32            mov bl, [d]
9385   3CD6 A7 00         mov bh, 0
9386   3CD8 56            add b, a
9387   3CD9 E4            pop a
9388   3CDA             ; --- END TERMS
9389   3CDA DD            push bl
9390   3CDB 07 85 17      call putchar
9391   3CDE 51 01 00      add sp, 1
9392   3CE1 F9            leave
9393   3CE2 09            ret
9394   3CE3             
9395   3CE3             putbcd:
9396   3CE3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9397   3CE6             ; put1bcd(x >> 8); 
9398   3CE6 FA 05 00      lea d, [bp + 5] ; $x
9399   3CE9 2A            mov b, [d]
9400   3CEA             ; --- START SHIFT
9401   3CEA D7            push a
9402   3CEB 11            mov a, b
9403   3CEC 26 08 00      mov b, $8
9404   3CEF FD 39         mov c, b
9405   3CF1 A1            shr a, cl
9406   3CF2 27            mov b, a
9407   3CF3 E4            pop a
9408   3CF4             ; --- END SHIFT
9409   3CF4 DD            push bl
9410   3CF5 07 B5 3C      call put1bcd
9411   3CF8 51 01 00      add sp, 1
9412   3CFB             ; put1bcd(x >> 4); 
9413   3CFB FA 05 00      lea d, [bp + 5] ; $x
9414   3CFE 2A            mov b, [d]
9415   3CFF             ; --- START SHIFT
9416   3CFF D7            push a
9417   3D00 11            mov a, b
9418   3D01 26 04 00      mov b, $4
9419   3D04 FD 39         mov c, b
9420   3D06 A1            shr a, cl
9421   3D07 27            mov b, a
9422   3D08 E4            pop a
9423   3D09             ; --- END SHIFT
9424   3D09 DD            push bl
9425   3D0A 07 B5 3C      call put1bcd
9426   3D0D 51 01 00      add sp, 1
9427   3D10             ; put1bcd(x); 
9428   3D10 FA 05 00      lea d, [bp + 5] ; $x
9429   3D13 2A            mov b, [d]
9430   3D14 DD            push bl
9431   3D15 07 B5 3C      call put1bcd
9432   3D18 51 01 00      add sp, 1
9433   3D1B F9            leave
9434   3D1C 09            ret
9435   3D1D             
9436   3D1D             long_range_scan:
9437   3D1D F8 00 00      enter 0 ; (push bp; mov bp, sp)
9438   3D20             ; int i, j; 
9439   3D20 52 02 00      sub sp, 2
9440   3D23 52 02 00      sub sp, 2
9441   3D26             ; if (inoperable(3)) 
9442   3D26             _if147_cond:
9443   3D26 26 03 00      mov b, $3
9444   3D29 DD            push bl
9445   3D2A 07 6F 23      call inoperable
9446   3D2D 51 01 00      add sp, 1
9447   3D30 C0 00 00      cmp b, 0
9448   3D33 C6 3B 3D      je _if147_exit
9449   3D36             _if147_true:
9450   3D36             ; return; 
9451   3D36 F9            leave
9452   3D37 09            ret
9453   3D38 0A 3B 3D      jmp _if147_exit
9454   3D3B             _if147_exit:
9455   3D3B             ; printf("Long Range Scan for Quadrant %d, %d\n\n", quad_y, quad_x); 
9456   3D3B 3B 81 64      mov d, _quad_x ; $quad_x
9457   3D3E 2A            mov b, [d]
9458   3D3F FD AB         swp b
9459   3D41 D8            push b
9460   3D42 3B 7F 64      mov d, _quad_y ; $quad_y
9461   3D45 2A            mov b, [d]
9462   3D46 FD AB         swp b
9463   3D48 D8            push b
9464   3D49 26 3B 6F      mov b, _s99 ; "Long Range Scan for Quadrant %d, %d\n\n"
9465   3D4C FD AB         swp b
9466   3D4E D8            push b
9467   3D4F 07 BA 07      call printf
9468   3D52 51 06 00      add sp, 6
9469   3D55             ; for (i = quad_y - 1; i <= quad_y + 1; i++) { 
9470   3D55             _for148_init:
9471   3D55 FA FF FF      lea d, [bp + -1] ; $i
9472   3D58 DA            push d
9473   3D59 3B 7F 64      mov d, _quad_y ; $quad_y
9474   3D5C 2A            mov b, [d]
9475   3D5D             ; --- START TERMS
9476   3D5D D7            push a
9477   3D5E 11            mov a, b
9478   3D5F 26 01 00      mov b, $1
9479   3D62 60            sub a, b
9480   3D63 27            mov b, a
9481   3D64 E4            pop a
9482   3D65             ; --- END TERMS
9483   3D65 E7            pop d
9484   3D66 FD 43         mov [d], b
9485   3D68             _for148_cond:
9486   3D68 FA FF FF      lea d, [bp + -1] ; $i
9487   3D6B 2A            mov b, [d]
9488   3D6C             ; --- START RELATIONAL
9489   3D6C D7            push a
9490   3D6D 11            mov a, b
9491   3D6E 3B 7F 64      mov d, _quad_y ; $quad_y
9492   3D71 2A            mov b, [d]
9493   3D72             ; --- START TERMS
9494   3D72 D7            push a
9495   3D73 11            mov a, b
9496   3D74 26 01 00      mov b, $1
9497   3D77 56            add b, a
9498   3D78 E4            pop a
9499   3D79             ; --- END TERMS
9500   3D79 B0            cmp a, b
9501   3D7A FD 74         sle ; <= (signed)
9502   3D7C E4            pop a
9503   3D7D             ; --- END RELATIONAL
9504   3D7D C0 00 00      cmp b, 0
9505   3D80 C6 BA 3E      je _for148_exit
9506   3D83             _for148_block:
9507   3D83             ; printf("%s:", lrs_1); 
9508   3D83 3B F2 65      mov d, _lrs_1 ; $lrs_1
9509   3D86 2A            mov b, [d]
9510   3D87 FD AB         swp b
9511   3D89 D8            push b
9512   3D8A 26 61 6F      mov b, _s100 ; "%s:"
9513   3D8D FD AB         swp b
9514   3D8F D8            push b
9515   3D90 07 BA 07      call printf
9516   3D93 51 04 00      add sp, 4
9517   3D96             ; for (j = quad_x - 1; j <= quad_x + 1; j++) { 
9518   3D96             _for149_init:
9519   3D96 FA FD FF      lea d, [bp + -3] ; $j
9520   3D99 DA            push d
9521   3D9A 3B 81 64      mov d, _quad_x ; $quad_x
9522   3D9D 2A            mov b, [d]
9523   3D9E             ; --- START TERMS
9524   3D9E D7            push a
9525   3D9F 11            mov a, b
9526   3DA0 26 01 00      mov b, $1
9527   3DA3 60            sub a, b
9528   3DA4 27            mov b, a
9529   3DA5 E4            pop a
9530   3DA6             ; --- END TERMS
9531   3DA6 E7            pop d
9532   3DA7 FD 43         mov [d], b
9533   3DA9             _for149_cond:
9534   3DA9 FA FD FF      lea d, [bp + -3] ; $j
9535   3DAC 2A            mov b, [d]
9536   3DAD             ; --- START RELATIONAL
9537   3DAD D7            push a
9538   3DAE 11            mov a, b
9539   3DAF 3B 81 64      mov d, _quad_x ; $quad_x
9540   3DB2 2A            mov b, [d]
9541   3DB3             ; --- START TERMS
9542   3DB3 D7            push a
9543   3DB4 11            mov a, b
9544   3DB5 26 01 00      mov b, $1
9545   3DB8 56            add b, a
9546   3DB9 E4            pop a
9547   3DBA             ; --- END TERMS
9548   3DBA B0            cmp a, b
9549   3DBB FD 74         sle ; <= (signed)
9550   3DBD E4            pop a
9551   3DBE             ; --- END RELATIONAL
9552   3DBE C0 00 00      cmp b, 0
9553   3DC1 C6 A0 3E      je _for149_exit
9554   3DC4             _for149_block:
9555   3DC4             ; putchar(' '); 
9556   3DC4 26 20 00      mov b, $20
9557   3DC7 DD            push bl
9558   3DC8 07 85 17      call putchar
9559   3DCB 51 01 00      add sp, 1
9560   3DCE             ; if (i > 0 && i <= 8 && j > 0 && j <= 8) { 
9561   3DCE             _if150_cond:
9562   3DCE FA FF FF      lea d, [bp + -1] ; $i
9563   3DD1 2A            mov b, [d]
9564   3DD2             ; --- START RELATIONAL
9565   3DD2 D7            push a
9566   3DD3 11            mov a, b
9567   3DD4 26 00 00      mov b, $0
9568   3DD7 B0            cmp a, b
9569   3DD8 FD 7F         sgt ; >
9570   3DDA E4            pop a
9571   3DDB             ; --- END RELATIONAL
9572   3DDB             ; --- START LOGICAL AND
9573   3DDB D7            push a
9574   3DDC 11            mov a, b
9575   3DDD FA FF FF      lea d, [bp + -1] ; $i
9576   3DE0 2A            mov b, [d]
9577   3DE1             ; --- START RELATIONAL
9578   3DE1 D7            push a
9579   3DE2 11            mov a, b
9580   3DE3 26 08 00      mov b, $8
9581   3DE6 B0            cmp a, b
9582   3DE7 FD 74         sle ; <= (signed)
9583   3DE9 E4            pop a
9584   3DEA             ; --- END RELATIONAL
9585   3DEA FD A7         sand a, b
9586   3DEC 11            mov a, b
9587   3DED FA FD FF      lea d, [bp + -3] ; $j
9588   3DF0 2A            mov b, [d]
9589   3DF1             ; --- START RELATIONAL
9590   3DF1 D7            push a
9591   3DF2 11            mov a, b
9592   3DF3 26 00 00      mov b, $0
9593   3DF6 B0            cmp a, b
9594   3DF7 FD 7F         sgt ; >
9595   3DF9 E4            pop a
9596   3DFA             ; --- END RELATIONAL
9597   3DFA FD A7         sand a, b
9598   3DFC 11            mov a, b
9599   3DFD FA FD FF      lea d, [bp + -3] ; $j
9600   3E00 2A            mov b, [d]
9601   3E01             ; --- START RELATIONAL
9602   3E01 D7            push a
9603   3E02 11            mov a, b
9604   3E03 26 08 00      mov b, $8
9605   3E06 B0            cmp a, b
9606   3E07 FD 74         sle ; <= (signed)
9607   3E09 E4            pop a
9608   3E0A             ; --- END RELATIONAL
9609   3E0A FD A7         sand a, b
9610   3E0C E4            pop a
9611   3E0D             ; --- END LOGICAL AND
9612   3E0D C0 00 00      cmp b, 0
9613   3E10 C6 78 3E      je _if150_else
9614   3E13             _if150_true:
9615   3E13             ; map[i][j] = map[i][j] |   0x1000		/* Set if this sector was mapped */          ; 
9616   3E13 3B CC 63      mov d, _map_data ; $map
9617   3E16 D7            push a
9618   3E17 DA            push d
9619   3E18 FA FF FF      lea d, [bp + -1] ; $i
9620   3E1B 2A            mov b, [d]
9621   3E1C E7            pop d
9622   3E1D FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9623   3E21 DA            push d
9624   3E22 FA FD FF      lea d, [bp + -3] ; $j
9625   3E25 2A            mov b, [d]
9626   3E26 E7            pop d
9627   3E27 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9628   3E2B E4            pop a
9629   3E2C DA            push d
9630   3E2D 3B CC 63      mov d, _map_data ; $map
9631   3E30 D7            push a
9632   3E31 DA            push d
9633   3E32 FA FF FF      lea d, [bp + -1] ; $i
9634   3E35 2A            mov b, [d]
9635   3E36 E7            pop d
9636   3E37 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9637   3E3B DA            push d
9638   3E3C FA FD FF      lea d, [bp + -3] ; $j
9639   3E3F 2A            mov b, [d]
9640   3E40 E7            pop d
9641   3E41 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9642   3E45 E4            pop a
9643   3E46 2A            mov b, [d]
9644   3E47 D7            push a
9645   3E48 11            mov a, b
9646   3E49 26 00 10      mov b, $1000
9647   3E4C FD 70         or b, a ; |
9648   3E4E E4            pop a
9649   3E4F E7            pop d
9650   3E50 FD 43         mov [d], b
9651   3E52             ; putbcd(map[i][j]); 
9652   3E52 3B CC 63      mov d, _map_data ; $map
9653   3E55 D7            push a
9654   3E56 DA            push d
9655   3E57 FA FF FF      lea d, [bp + -1] ; $i
9656   3E5A 2A            mov b, [d]
9657   3E5B E7            pop d
9658   3E5C FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9659   3E60 DA            push d
9660   3E61 FA FD FF      lea d, [bp + -3] ; $j
9661   3E64 2A            mov b, [d]
9662   3E65 E7            pop d
9663   3E66 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9664   3E6A E4            pop a
9665   3E6B 2A            mov b, [d]
9666   3E6C FD AB         swp b
9667   3E6E D8            push b
9668   3E6F 07 E3 3C      call putbcd
9669   3E72 51 02 00      add sp, 2
9670   3E75 0A 84 3E      jmp _if150_exit
9671   3E78             _if150_else:
9672   3E78             ; puts("***"); 
9673   3E78 26 65 6F      mov b, _s101 ; "***"
9674   3E7B FD AB         swp b
9675   3E7D D8            push b
9676   3E7E 07 BB 17      call puts
9677   3E81 51 02 00      add sp, 2
9678   3E84             _if150_exit:
9679   3E84             ; puts(" :"); 
9680   3E84 26 69 6F      mov b, _s102 ; " :"
9681   3E87 FD AB         swp b
9682   3E89 D8            push b
9683   3E8A 07 BB 17      call puts
9684   3E8D 51 02 00      add sp, 2
9685   3E90             _for149_update:
9686   3E90 FA FD FF      lea d, [bp + -3] ; $j
9687   3E93 2A            mov b, [d]
9688   3E94 FD 77         inc b
9689   3E96 FA FD FF      lea d, [bp + -3] ; $j
9690   3E99 FD 43         mov [d], b
9691   3E9B FD 7D         dec b
9692   3E9D 0A A9 3D      jmp _for149_cond
9693   3EA0             _for149_exit:
9694   3EA0             ; putchar('\n'); 
9695   3EA0 26 0A 00      mov b, $a
9696   3EA3 DD            push bl
9697   3EA4 07 85 17      call putchar
9698   3EA7 51 01 00      add sp, 1
9699   3EAA             _for148_update:
9700   3EAA FA FF FF      lea d, [bp + -1] ; $i
9701   3EAD 2A            mov b, [d]
9702   3EAE FD 77         inc b
9703   3EB0 FA FF FF      lea d, [bp + -1] ; $i
9704   3EB3 FD 43         mov [d], b
9705   3EB5 FD 7D         dec b
9706   3EB7 0A 68 3D      jmp _for148_cond
9707   3EBA             _for148_exit:
9708   3EBA             ; printf("%s\n", lrs_1); 
9709   3EBA 3B F2 65      mov d, _lrs_1 ; $lrs_1
9710   3EBD 2A            mov b, [d]
9711   3EBE FD AB         swp b
9712   3EC0 D8            push b
9713   3EC1 26 6C 6F      mov b, _s103 ; "%s\n"
9714   3EC4 FD AB         swp b
9715   3EC6 D8            push b
9716   3EC7 07 BA 07      call printf
9717   3ECA 51 04 00      add sp, 4
9718   3ECD F9            leave
9719   3ECE 09            ret
9720   3ECF             
9721   3ECF             no_klingon:
9722   3ECF F8 00 00      enter 0 ; (push bp; mov bp, sp)
9723   3ED2             ; if (klingons <= 0) { 
9724   3ED2             _if151_cond:
9725   3ED2 3B 7A 64      mov d, _klingons ; $klingons
9726   3ED5 32            mov bl, [d]
9727   3ED6 A7 00         mov bh, 0
9728   3ED8             ; --- START RELATIONAL
9729   3ED8 D7            push a
9730   3ED9 11            mov a, b
9731   3EDA 26 00 00      mov b, $0
9732   3EDD B0            cmp a, b
9733   3EDE FD 76         sleu ; <= (unsigned)
9734   3EE0 E4            pop a
9735   3EE1             ; --- END RELATIONAL
9736   3EE1 C0 00 00      cmp b, 0
9737   3EE4 C6 FB 3E      je _if151_exit
9738   3EE7             _if151_true:
9739   3EE7             ; puts("Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"); 
9740   3EE7 26 70 6F      mov b, _s104 ; "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"
9741   3EEA FD AB         swp b
9742   3EEC D8            push b
9743   3EED 07 BB 17      call puts
9744   3EF0 51 02 00      add sp, 2
9745   3EF3             ; return 1; 
9746   3EF3 26 01 00      mov b, $1
9747   3EF6 F9            leave
9748   3EF7 09            ret
9749   3EF8 0A FB 3E      jmp _if151_exit
9750   3EFB             _if151_exit:
9751   3EFB             ; return 0; 
9752   3EFB 26 00 00      mov b, $0
9753   3EFE F9            leave
9754   3EFF 09            ret
9755   3F00             
9756   3F00             wipe_klingon:
9757   3F00 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9758   3F03             ; quad[k->y+-1][k->x+-1] =  		0      ; 
9759   3F03 3B A4 64      mov d, _quad_data ; $quad
9760   3F06 D7            push a
9761   3F07 DA            push d
9762   3F08 FA 05 00      lea d, [bp + 5] ; $k
9763   3F0B FD 2A         mov d, [d]
9764   3F0D 58 00 00      add d, 0
9765   3F10 32            mov bl, [d]
9766   3F11 A7 00         mov bh, 0
9767   3F13             ; --- START TERMS
9768   3F13 D7            push a
9769   3F14 11            mov a, b
9770   3F15 26 FF FF      mov b, $ffff
9771   3F18 56            add b, a
9772   3F19 E4            pop a
9773   3F1A             ; --- END TERMS
9774   3F1A E7            pop d
9775   3F1B FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
9776   3F1F DA            push d
9777   3F20 FA 05 00      lea d, [bp + 5] ; $k
9778   3F23 FD 2A         mov d, [d]
9779   3F25 58 01 00      add d, 1
9780   3F28 32            mov bl, [d]
9781   3F29 A7 00         mov bh, 0
9782   3F2B             ; --- START TERMS
9783   3F2B D7            push a
9784   3F2C 11            mov a, b
9785   3F2D 26 FF FF      mov b, $ffff
9786   3F30 56            add b, a
9787   3F31 E4            pop a
9788   3F32             ; --- END TERMS
9789   3F32 E7            pop d
9790   3F33 5A            add d, b
9791   3F34 E4            pop a
9792   3F35 DA            push d
9793   3F36 26 00 00      mov b, $0
9794   3F39 E7            pop d
9795   3F3A FD 3E         mov [d], bl
9796   3F3C F9            leave
9797   3F3D 09            ret
9798   3F3E             
9799   3F3E             phaser_control:
9800   3F3E F8 00 00      enter 0 ; (push bp; mov bp, sp)
9801   3F41             ; int i; 
9802   3F41 52 02 00      sub sp, 2
9803   3F44             ; long int       phaser_energy; 
9804   3F44 52 04 00      sub sp, 4
9805   3F47             ; long unsigned int        h1; 
9806   3F47 52 04 00      sub sp, 4
9807   3F4A             ; int h; 
9808   3F4A 52 02 00      sub sp, 2
9809   3F4D             ; struct klingon *k; 
9810   3F4D 52 02 00      sub sp, 2
9811   3F50             ; k = &kdata; 
9812   3F50 FA F3 FF      lea d, [bp + -13] ; $k
9813   3F53 DA            push d
9814   3F54 3B 6E 64      mov d, _kdata_data ; $kdata
9815   3F57 2D            mov b, d
9816   3F58 E7            pop d
9817   3F59 FD 43         mov [d], b
9818   3F5B             ; if (inoperable(4)) 
9819   3F5B             _if152_cond:
9820   3F5B 26 04 00      mov b, $4
9821   3F5E DD            push bl
9822   3F5F 07 6F 23      call inoperable
9823   3F62 51 01 00      add sp, 1
9824   3F65 C0 00 00      cmp b, 0
9825   3F68 C6 70 3F      je _if152_exit
9826   3F6B             _if152_true:
9827   3F6B             ; return; 
9828   3F6B F9            leave
9829   3F6C 09            ret
9830   3F6D 0A 70 3F      jmp _if152_exit
9831   3F70             _if152_exit:
9832   3F70             ; if (no_klingon()) 
9833   3F70             _if153_cond:
9834   3F70 07 CF 3E      call no_klingon
9835   3F73 C0 00 00      cmp b, 0
9836   3F76 C6 7E 3F      je _if153_exit
9837   3F79             _if153_true:
9838   3F79             ; return; 
9839   3F79 F9            leave
9840   3F7A 09            ret
9841   3F7B 0A 7E 3F      jmp _if153_exit
9842   3F7E             _if153_exit:
9843   3F7E             ; if (damage[8] < 0) 
9844   3F7E             _if154_cond:
9845   3F7E 3B 8A 64      mov d, _damage_data ; $damage
9846   3F81 D7            push a
9847   3F82 DA            push d
9848   3F83 26 08 00      mov b, $8
9849   3F86 E7            pop d
9850   3F87 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9851   3F8B E4            pop a
9852   3F8C 2A            mov b, [d]
9853   3F8D             ; --- START RELATIONAL
9854   3F8D D7            push a
9855   3F8E 11            mov a, b
9856   3F8F 26 00 00      mov b, $0
9857   3F92 B0            cmp a, b
9858   3F93 FD 73         slt ; < (signed)
9859   3F95 E4            pop a
9860   3F96             ; --- END RELATIONAL
9861   3F96 C0 00 00      cmp b, 0
9862   3F99 C6 AB 3F      je _if154_exit
9863   3F9C             _if154_true:
9864   3F9C             ; puts("Computer failure hampers accuracy."); 
9865   3F9C 26 C1 6F      mov b, _s105 ; "Computer failure hampers accuracy."
9866   3F9F FD AB         swp b
9867   3FA1 D8            push b
9868   3FA2 07 BB 17      call puts
9869   3FA5 51 02 00      add sp, 2
9870   3FA8 0A AB 3F      jmp _if154_exit
9871   3FAB             _if154_exit:
9872   3FAB             ; printf("Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", energy); 
9873   3FAB 3B C8 63      mov d, _energy ; $energy
9874   3FAE 2A            mov b, [d]
9875   3FAF FD AB         swp b
9876   3FB1 D8            push b
9877   3FB2 26 E4 6F      mov b, _s106 ; "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: "
9878   3FB5 FD AB         swp b
9879   3FB7 D8            push b
9880   3FB8 07 BA 07      call printf
9881   3FBB 51 04 00      add sp, 4
9882   3FBE             ; phaser_energy = input_int(); 
9883   3FBE FA FB FF      lea d, [bp + -5] ; $phaser_energy
9884   3FC1 DA            push d
9885   3FC2 07 93 22      call input_int
9886   3FC5 E7            pop d
9887   3FC6 FD 43         mov [d], b
9888   3FC8 28            mov b, c
9889   3FC9 FD 44 02 00   mov [d + 2], b
9890   3FCD             ; if (phaser_energy <= 0) 
9891   3FCD             _if155_cond:
9892   3FCD FA FB FF      lea d, [bp + -5] ; $phaser_energy
9893   3FD0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9894   3FD3 FD 39         mov c, b ; And place it into C
9895   3FD5 2A            mov b, [d] ; Lower Word in B
9896   3FD6             ; --- START RELATIONAL
9897   3FD6 D7            push a
9898   3FD7 FD D8         push g
9899   3FD9 11            mov a, b
9900   3FDA FD 7A         mov g, c
9901   3FDC 26 00 00      mov b, $0
9902   3FDF 38 00 00      mov c, 0
9903   3FE2 FD 74         sle
9904   3FE4 FD F1         pop g
9905   3FE6 E4            pop a
9906   3FE7             ; --- END RELATIONAL
9907   3FE7 C0 00 00      cmp b, 0
9908   3FEA C6 F2 3F      je _if155_exit
9909   3FED             _if155_true:
9910   3FED             ; return; 
9911   3FED F9            leave
9912   3FEE 09            ret
9913   3FEF 0A F2 3F      jmp _if155_exit
9914   3FF2             _if155_exit:
9915   3FF2             ; if (energy - phaser_energy < 0) { 
9916   3FF2             _if156_cond:
9917   3FF2 3B C8 63      mov d, _energy ; $energy
9918   3FF5 2A            mov b, [d]
9919   3FF6             ; --- START TERMS
9920   3FF6 D7            push a
9921   3FF7 11            mov a, b
9922   3FF8 FA FB FF      lea d, [bp + -5] ; $phaser_energy
9923   3FFB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9924   3FFE FD 39         mov c, b ; And place it into C
9925   4000 2A            mov b, [d] ; Lower Word in B
9926   4001 60            sub a, b
9927   4002 27            mov b, a
9928   4003 E4            pop a
9929   4004             ; --- END TERMS
9930   4004             ; --- START RELATIONAL
9931   4004 D7            push a
9932   4005 FD D8         push g
9933   4007 11            mov a, b
9934   4008 FD 7A         mov g, c
9935   400A 26 00 00      mov b, $0
9936   400D 38 00 00      mov c, 0
9937   4010 FD AF         cmp32 ga, cb
9938   4012 FD 73         slt ; <
9939   4014 FD F1         pop g
9940   4016 E4            pop a
9941   4017             ; --- END RELATIONAL
9942   4017 C0 00 00      cmp b, 0
9943   401A C6 2E 40      je _if156_exit
9944   401D             _if156_true:
9945   401D             ; puts("Not enough energy available.\n"); 
9946   401D 26 37 70      mov b, _s107 ; "Not enough energy available.\n"
9947   4020 FD AB         swp b
9948   4022 D8            push b
9949   4023 07 BB 17      call puts
9950   4026 51 02 00      add sp, 2
9951   4029             ; return; 
9952   4029 F9            leave
9953   402A 09            ret
9954   402B 0A 2E 40      jmp _if156_exit
9955   402E             _if156_exit:
9956   402E             ; energy = energy -  phaser_energy; 
9957   402E 3B C8 63      mov d, _energy ; $energy
9958   4031 DA            push d
9959   4032 3B C8 63      mov d, _energy ; $energy
9960   4035 2A            mov b, [d]
9961   4036             ; --- START TERMS
9962   4036 D7            push a
9963   4037 11            mov a, b
9964   4038 FA FB FF      lea d, [bp + -5] ; $phaser_energy
9965   403B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9966   403E FD 39         mov c, b ; And place it into C
9967   4040 2A            mov b, [d] ; Lower Word in B
9968   4041 60            sub a, b
9969   4042 27            mov b, a
9970   4043 E4            pop a
9971   4044             ; --- END TERMS
9972   4044 E7            pop d
9973   4045 FD 43         mov [d], b
9974   4047             ; if (damage[8] < 0) 
9975   4047             _if157_cond:
9976   4047 3B 8A 64      mov d, _damage_data ; $damage
9977   404A D7            push a
9978   404B DA            push d
9979   404C 26 08 00      mov b, $8
9980   404F E7            pop d
9981   4050 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9982   4054 E4            pop a
9983   4055 2A            mov b, [d]
9984   4056             ; --- START RELATIONAL
9985   4056 D7            push a
9986   4057 11            mov a, b
9987   4058 26 00 00      mov b, $0
9988   405B B0            cmp a, b
9989   405C FD 73         slt ; < (signed)
9990   405E E4            pop a
9991   405F             ; --- END RELATIONAL
9992   405F C0 00 00      cmp b, 0
9993   4062 C6 8F 40      je _if157_else
9994   4065             _if157_true:
9995   4065             ; phaser_energy =phaser_energy * get_rand(100); 
9996   4065 FA FB FF      lea d, [bp + -5] ; $phaser_energy
9997   4068 DA            push d
9998   4069 FA FB FF      lea d, [bp + -5] ; $phaser_energy
9999   406C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10000  406F FD 39         mov c, b ; And place it into C
10001  4071 2A            mov b, [d] ; Lower Word in B
10002  4072             ; --- START FACTORS
10003  4072 D7            push a
10004  4073 11            mov a, b
10005  4074 26 64 00      mov b, $64
10006  4077 FD AB         swp b
10007  4079 D8            push b
10008  407A 07 EB 1F      call get_rand
10009  407D 51 02 00      add sp, 2
10010  4080 AC            mul a, b ; *
10011  4081 11            mov a, b
10012  4082 27            mov b, a
10013  4083 E4            pop a
10014  4084             ; --- END FACTORS
10015  4084 E7            pop d
10016  4085 FD 43         mov [d], b
10017  4087 28            mov b, c
10018  4088 FD 44 02 00   mov [d + 2], b
10019  408C 0A AD 40      jmp _if157_exit
10020  408F             _if157_else:
10021  408F             ; phaser_energy = phaser_energy* 100; 
10022  408F FA FB FF      lea d, [bp + -5] ; $phaser_energy
10023  4092 DA            push d
10024  4093 FA FB FF      lea d, [bp + -5] ; $phaser_energy
10025  4096 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10026  4099 FD 39         mov c, b ; And place it into C
10027  409B 2A            mov b, [d] ; Lower Word in B
10028  409C             ; --- START FACTORS
10029  409C D7            push a
10030  409D 11            mov a, b
10031  409E 26 64 00      mov b, $64
10032  40A1 AC            mul a, b ; *
10033  40A2 11            mov a, b
10034  40A3 27            mov b, a
10035  40A4 E4            pop a
10036  40A5             ; --- END FACTORS
10037  40A5 E7            pop d
10038  40A6 FD 43         mov [d], b
10039  40A8 28            mov b, c
10040  40A9 FD 44 02 00   mov [d + 2], b
10041  40AD             _if157_exit:
10042  40AD             ; h1 = phaser_energy / klingons; 
10043  40AD FA F7 FF      lea d, [bp + -9] ; $h1
10044  40B0 DA            push d
10045  40B1 FA FB FF      lea d, [bp + -5] ; $phaser_energy
10046  40B4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10047  40B7 FD 39         mov c, b ; And place it into C
10048  40B9 2A            mov b, [d] ; Lower Word in B
10049  40BA             ; --- START FACTORS
10050  40BA D7            push a
10051  40BB 11            mov a, b
10052  40BC 3B 7A 64      mov d, _klingons ; $klingons
10053  40BF 32            mov bl, [d]
10054  40C0 A7 00         mov bh, 0
10055  40C2 AE            div a, b
10056  40C3 27            mov b, a
10057  40C4 E4            pop a
10058  40C5             ; --- END FACTORS
10059  40C5 E7            pop d
10060  40C6 FD 43         mov [d], b
10061  40C8 28            mov b, c
10062  40C9 FD 44 02 00   mov [d + 2], b
10063  40CD             ; for (i = 0; i <= 2; i++) { 
10064  40CD             _for158_init:
10065  40CD FA FF FF      lea d, [bp + -1] ; $i
10066  40D0 DA            push d
10067  40D1 26 00 00      mov b, $0
10068  40D4 E7            pop d
10069  40D5 FD 43         mov [d], b
10070  40D7             _for158_cond:
10071  40D7 FA FF FF      lea d, [bp + -1] ; $i
10072  40DA 2A            mov b, [d]
10073  40DB             ; --- START RELATIONAL
10074  40DB D7            push a
10075  40DC 11            mov a, b
10076  40DD 26 02 00      mov b, $2
10077  40E0 B0            cmp a, b
10078  40E1 FD 74         sle ; <= (signed)
10079  40E3 E4            pop a
10080  40E4             ; --- END RELATIONAL
10081  40E4 C0 00 00      cmp b, 0
10082  40E7 C6 06 43      je _for158_exit
10083  40EA             _for158_block:
10084  40EA             ; if (k->energy > 0) { 
10085  40EA             _if159_cond:
10086  40EA FA F3 FF      lea d, [bp + -13] ; $k
10087  40ED FD 2A         mov d, [d]
10088  40EF 58 02 00      add d, 2
10089  40F2 2A            mov b, [d]
10090  40F3             ; --- START RELATIONAL
10091  40F3 D7            push a
10092  40F4 11            mov a, b
10093  40F5 26 00 00      mov b, $0
10094  40F8 B0            cmp a, b
10095  40F9 FD 7F         sgt ; >
10096  40FB E4            pop a
10097  40FC             ; --- END RELATIONAL
10098  40FC C0 00 00      cmp b, 0
10099  40FF C6 E5 42      je _if159_exit
10100  4102             _if159_true:
10101  4102             ; h1 = h1 * (get_rand(100) + 200); 
10102  4102 FA F7 FF      lea d, [bp + -9] ; $h1
10103  4105 DA            push d
10104  4106 FA F7 FF      lea d, [bp + -9] ; $h1
10105  4109 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10106  410C FD 39         mov c, b ; And place it into C
10107  410E 2A            mov b, [d] ; Lower Word in B
10108  410F             ; --- START FACTORS
10109  410F D7            push a
10110  4110 11            mov a, b
10111  4111 26 64 00      mov b, $64
10112  4114 FD AB         swp b
10113  4116 D8            push b
10114  4117 07 EB 1F      call get_rand
10115  411A 51 02 00      add sp, 2
10116  411D             ; --- START TERMS
10117  411D D7            push a
10118  411E 11            mov a, b
10119  411F 26 C8 00      mov b, $c8
10120  4122 56            add b, a
10121  4123 E4            pop a
10122  4124             ; --- END TERMS
10123  4124 AC            mul a, b ; *
10124  4125 11            mov a, b
10125  4126 27            mov b, a
10126  4127 E4            pop a
10127  4128             ; --- END FACTORS
10128  4128 E7            pop d
10129  4129 FD 43         mov [d], b
10130  412B 28            mov b, c
10131  412C FD 44 02 00   mov [d + 2], b
10132  4130             ; h1 =h1/ distance_to(k); 
10133  4130 FA F7 FF      lea d, [bp + -9] ; $h1
10134  4133 DA            push d
10135  4134 FA F7 FF      lea d, [bp + -9] ; $h1
10136  4137 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10137  413A FD 39         mov c, b ; And place it into C
10138  413C 2A            mov b, [d] ; Lower Word in B
10139  413D             ; --- START FACTORS
10140  413D D7            push a
10141  413E 11            mov a, b
10142  413F FA F3 FF      lea d, [bp + -13] ; $k
10143  4142 2A            mov b, [d]
10144  4143 FD AB         swp b
10145  4145 D8            push b
10146  4146 07 F0 62      call distance_to
10147  4149 51 02 00      add sp, 2
10148  414C AE            div a, b
10149  414D 27            mov b, a
10150  414E E4            pop a
10151  414F             ; --- END FACTORS
10152  414F E7            pop d
10153  4150 FD 43         mov [d], b
10154  4152 28            mov b, c
10155  4153 FD 44 02 00   mov [d + 2], b
10156  4157             ; if (h1 <= 15 * k->energy) {	/* was 0.15 */ 
10157  4157             _if160_cond:
10158  4157 FA F7 FF      lea d, [bp + -9] ; $h1
10159  415A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10160  415D FD 39         mov c, b ; And place it into C
10161  415F 2A            mov b, [d] ; Lower Word in B
10162  4160             ; --- START RELATIONAL
10163  4160 D7            push a
10164  4161 FD D8         push g
10165  4163 11            mov a, b
10166  4164 FD 7A         mov g, c
10167  4166 26 0F 00      mov b, $f
10168  4169             ; --- START FACTORS
10169  4169 D7            push a
10170  416A 11            mov a, b
10171  416B FA F3 FF      lea d, [bp + -13] ; $k
10172  416E FD 2A         mov d, [d]
10173  4170 58 02 00      add d, 2
10174  4173 2A            mov b, [d]
10175  4174 AC            mul a, b ; *
10176  4175 11            mov a, b
10177  4176 27            mov b, a
10178  4177 E4            pop a
10179  4178             ; --- END FACTORS
10180  4178 38 00 00      mov c, 0
10181  417B FD 76         sleu
10182  417D FD F1         pop g
10183  417F E4            pop a
10184  4180             ; --- END RELATIONAL
10185  4180 C0 00 00      cmp b, 0
10186  4183 C6 AD 41      je _if160_else
10187  4186             _if160_true:
10188  4186             ; printf("Sensors show no damage to enemy at %d, %d\n\n", k->y, k->x); 
10189  4186 FA F3 FF      lea d, [bp + -13] ; $k
10190  4189 FD 2A         mov d, [d]
10191  418B 58 01 00      add d, 1
10192  418E 32            mov bl, [d]
10193  418F A7 00         mov bh, 0
10194  4191 DD            push bl
10195  4192 FA F3 FF      lea d, [bp + -13] ; $k
10196  4195 FD 2A         mov d, [d]
10197  4197 58 00 00      add d, 0
10198  419A 32            mov bl, [d]
10199  419B A7 00         mov bh, 0
10200  419D DD            push bl
10201  419E 26 55 70      mov b, _s108 ; "Sensors show no damage to enemy at %d, %d\n\n"
10202  41A1 FD AB         swp b
10203  41A3 D8            push b
10204  41A4 07 BA 07      call printf
10205  41A7 51 04 00      add sp, 4
10206  41AA 0A E2 42      jmp _if160_exit
10207  41AD             _if160_else:
10208  41AD             ; h = FROM_FIXED00(h1); 
10209  41AD FA F5 FF      lea d, [bp + -11] ; $h
10210  41B0 DA            push d
10211  41B1 FA F7 FF      lea d, [bp + -9] ; $h1
10212  41B4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10213  41B7 FD 39         mov c, b ; And place it into C
10214  41B9 2A            mov b, [d] ; Lower Word in B
10215  41BA FD AB         swp b
10216  41BC D8            push b
10217  41BD 07 DA 1F      call FROM_FIXED00
10218  41C0 51 02 00      add sp, 2
10219  41C3 E7            pop d
10220  41C4 FD 43         mov [d], b
10221  41C6             ; k->energy = k->energy - h; 
10222  41C6 FA F3 FF      lea d, [bp + -13] ; $k
10223  41C9 FD 2A         mov d, [d]
10224  41CB 58 02 00      add d, 2
10225  41CE DA            push d
10226  41CF FA F3 FF      lea d, [bp + -13] ; $k
10227  41D2 FD 2A         mov d, [d]
10228  41D4 58 02 00      add d, 2
10229  41D7 2A            mov b, [d]
10230  41D8             ; --- START TERMS
10231  41D8 D7            push a
10232  41D9 11            mov a, b
10233  41DA FA F5 FF      lea d, [bp + -11] ; $h
10234  41DD 2A            mov b, [d]
10235  41DE 60            sub a, b
10236  41DF 27            mov b, a
10237  41E0 E4            pop a
10238  41E1             ; --- END TERMS
10239  41E1 E7            pop d
10240  41E2 FD 43         mov [d], b
10241  41E4             ; printf("%d unit hit on Klingon at sector %d, %d\n", 
10242  41E4 FA F3 FF      lea d, [bp + -13] ; $k
10243  41E7 FD 2A         mov d, [d]
10244  41E9 58 01 00      add d, 1
10245  41EC 32            mov bl, [d]
10246  41ED A7 00         mov bh, 0
10247  41EF DD            push bl
10248  41F0 FA F3 FF      lea d, [bp + -13] ; $k
10249  41F3 FD 2A         mov d, [d]
10250  41F5 58 00 00      add d, 0
10251  41F8 32            mov bl, [d]
10252  41F9 A7 00         mov bh, 0
10253  41FB DD            push bl
10254  41FC FA F5 FF      lea d, [bp + -11] ; $h
10255  41FF 2A            mov b, [d]
10256  4200 FD AB         swp b
10257  4202 D8            push b
10258  4203 26 81 70      mov b, _s109 ; "%d unit hit on Klingon at sector %d, %d\n"
10259  4206 FD AB         swp b
10260  4208 D8            push b
10261  4209 07 BA 07      call printf
10262  420C 51 06 00      add sp, 6
10263  420F             ; if (k->energy <= 0) { 
10264  420F             _if161_cond:
10265  420F FA F3 FF      lea d, [bp + -13] ; $k
10266  4212 FD 2A         mov d, [d]
10267  4214 58 02 00      add d, 2
10268  4217 2A            mov b, [d]
10269  4218             ; --- START RELATIONAL
10270  4218 D7            push a
10271  4219 11            mov a, b
10272  421A 26 00 00      mov b, $0
10273  421D B0            cmp a, b
10274  421E FD 74         sle ; <= (signed)
10275  4220 E4            pop a
10276  4221             ; --- END RELATIONAL
10277  4221 C0 00 00      cmp b, 0
10278  4224 C6 CA 42      je _if161_else
10279  4227             _if161_true:
10280  4227             ; puts("*** Klingon Destroyed ***\n"); 
10281  4227 26 AA 70      mov b, _s110 ; "*** Klingon Destroyed ***\n"
10282  422A FD AB         swp b
10283  422C D8            push b
10284  422D 07 BB 17      call puts
10285  4230 51 02 00      add sp, 2
10286  4233             ; klingons--; 
10287  4233 3B 7A 64      mov d, _klingons ; $klingons
10288  4236 32            mov bl, [d]
10289  4237 A7 00         mov bh, 0
10290  4239 FD 7D         dec b
10291  423B 3B 7A 64      mov d, _klingons ; $klingons
10292  423E FD 43         mov [d], b
10293  4240 FD 77         inc b
10294  4242             ; klingons_left--; 
10295  4242 3B 7C 64      mov d, _klingons_left ; $klingons_left
10296  4245 32            mov bl, [d]
10297  4246 A7 00         mov bh, 0
10298  4248 FD 7D         dec b
10299  424A 3B 7C 64      mov d, _klingons_left ; $klingons_left
10300  424D FD 43         mov [d], b
10301  424F FD 77         inc b
10302  4251             ; wipe_klingon(k); 
10303  4251 FA F3 FF      lea d, [bp + -13] ; $k
10304  4254 2A            mov b, [d]
10305  4255 FD AB         swp b
10306  4257 D8            push b
10307  4258 07 00 3F      call wipe_klingon
10308  425B 51 02 00      add sp, 2
10309  425E             ; k->energy = 0; 
10310  425E FA F3 FF      lea d, [bp + -13] ; $k
10311  4261 FD 2A         mov d, [d]
10312  4263 58 02 00      add d, 2
10313  4266 DA            push d
10314  4267 26 00 00      mov b, $0
10315  426A E7            pop d
10316  426B FD 43         mov [d], b
10317  426D             ; map[quad_y][quad_x] = map[quad_y][quad_x] - 0x100; 
10318  426D 3B CC 63      mov d, _map_data ; $map
10319  4270 D7            push a
10320  4271 DA            push d
10321  4272 3B 7F 64      mov d, _quad_y ; $quad_y
10322  4275 2A            mov b, [d]
10323  4276 E7            pop d
10324  4277 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10325  427B DA            push d
10326  427C 3B 81 64      mov d, _quad_x ; $quad_x
10327  427F 2A            mov b, [d]
10328  4280 E7            pop d
10329  4281 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10330  4285 E4            pop a
10331  4286 DA            push d
10332  4287 3B CC 63      mov d, _map_data ; $map
10333  428A D7            push a
10334  428B DA            push d
10335  428C 3B 7F 64      mov d, _quad_y ; $quad_y
10336  428F 2A            mov b, [d]
10337  4290 E7            pop d
10338  4291 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10339  4295 DA            push d
10340  4296 3B 81 64      mov d, _quad_x ; $quad_x
10341  4299 2A            mov b, [d]
10342  429A E7            pop d
10343  429B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10344  429F E4            pop a
10345  42A0 2A            mov b, [d]
10346  42A1             ; --- START TERMS
10347  42A1 D7            push a
10348  42A2 11            mov a, b
10349  42A3 26 00 01      mov b, $100
10350  42A6 60            sub a, b
10351  42A7 27            mov b, a
10352  42A8 E4            pop a
10353  42A9             ; --- END TERMS
10354  42A9 E7            pop d
10355  42AA FD 43         mov [d], b
10356  42AC             ; if (klingons_left <= 0) 
10357  42AC             _if162_cond:
10358  42AC 3B 7C 64      mov d, _klingons_left ; $klingons_left
10359  42AF 32            mov bl, [d]
10360  42B0 A7 00         mov bh, 0
10361  42B2             ; --- START RELATIONAL
10362  42B2 D7            push a
10363  42B3 11            mov a, b
10364  42B4 26 00 00      mov b, $0
10365  42B7 B0            cmp a, b
10366  42B8 FD 76         sleu ; <= (unsigned)
10367  42BA E4            pop a
10368  42BB             ; --- END RELATIONAL
10369  42BB C0 00 00      cmp b, 0
10370  42BE C6 C7 42      je _if162_exit
10371  42C1             _if162_true:
10372  42C1             ; won_game(); 
10373  42C1 07 2C 58      call won_game
10374  42C4 0A C7 42      jmp _if162_exit
10375  42C7             _if162_exit:
10376  42C7 0A E2 42      jmp _if161_exit
10377  42CA             _if161_else:
10378  42CA             ; printf("   (Sensors show %d units remaining.)\n\n", k->energy); 
10379  42CA FA F3 FF      lea d, [bp + -13] ; $k
10380  42CD FD 2A         mov d, [d]
10381  42CF 58 02 00      add d, 2
10382  42D2 2A            mov b, [d]
10383  42D3 FD AB         swp b
10384  42D5 D8            push b
10385  42D6 26 C5 70      mov b, _s111 ; "   (Sensors show %d units remaining.)\n\n"
10386  42D9 FD AB         swp b
10387  42DB D8            push b
10388  42DC 07 BA 07      call printf
10389  42DF 51 04 00      add sp, 4
10390  42E2             _if161_exit:
10391  42E2             _if160_exit:
10392  42E2 0A E5 42      jmp _if159_exit
10393  42E5             _if159_exit:
10394  42E5             ; k++; 
10395  42E5 FA F3 FF      lea d, [bp + -13] ; $k
10396  42E8 2A            mov b, [d]
10397  42E9 FD 77         inc b
10398  42EB FD 77         inc b
10399  42ED FA F3 FF      lea d, [bp + -13] ; $k
10400  42F0 FD 43         mov [d], b
10401  42F2 FD 7D         dec b
10402  42F4 FD 7D         dec b
10403  42F6             _for158_update:
10404  42F6 FA FF FF      lea d, [bp + -1] ; $i
10405  42F9 2A            mov b, [d]
10406  42FA FD 77         inc b
10407  42FC FA FF FF      lea d, [bp + -1] ; $i
10408  42FF FD 43         mov [d], b
10409  4301 FD 7D         dec b
10410  4303 0A D7 40      jmp _for158_cond
10411  4306             _for158_exit:
10412  4306             ; klingons_shoot(); 
10413  4306 07 E2 59      call klingons_shoot
10414  4309 F9            leave
10415  430A 09            ret
10416  430B             
10417  430B             photon_torpedoes:
10418  430B F8 00 00      enter 0 ; (push bp; mov bp, sp)
10419  430E             ; int x3, y3; 
10420  430E 52 02 00      sub sp, 2
10421  4311 52 02 00      sub sp, 2
10422  4314             ; int       c1; 
10423  4314 52 02 00      sub sp, 2
10424  4317             ; int c2, c3, c4; 
10425  4317 52 02 00      sub sp, 2
10426  431A 52 02 00      sub sp, 2
10427  431D 52 02 00      sub sp, 2
10428  4320             ; int       x, y, x1, x2; 
10429  4320 52 02 00      sub sp, 2
10430  4323 52 02 00      sub sp, 2
10431  4326 52 02 00      sub sp, 2
10432  4329 52 02 00      sub sp, 2
10433  432C             ; if (torps <= 0) { 
10434  432C             _if163_cond:
10435  432C 3B 7D 64      mov d, _torps ; $torps
10436  432F 32            mov bl, [d]
10437  4330 A7 00         mov bh, 0
10438  4332             ; --- START RELATIONAL
10439  4332 D7            push a
10440  4333 11            mov a, b
10441  4334 26 00 00      mov b, $0
10442  4337 B0            cmp a, b
10443  4338 FD 76         sleu ; <= (unsigned)
10444  433A E4            pop a
10445  433B             ; --- END RELATIONAL
10446  433B C0 00 00      cmp b, 0
10447  433E C6 52 43      je _if163_exit
10448  4341             _if163_true:
10449  4341             ; puts("All photon torpedoes expended"); 
10450  4341 26 ED 70      mov b, _s112 ; "All photon torpedoes expended"
10451  4344 FD AB         swp b
10452  4346 D8            push b
10453  4347 07 BB 17      call puts
10454  434A 51 02 00      add sp, 2
10455  434D             ; return; 
10456  434D F9            leave
10457  434E 09            ret
10458  434F 0A 52 43      jmp _if163_exit
10459  4352             _if163_exit:
10460  4352             ; if (inoperable(5)) 
10461  4352             _if164_cond:
10462  4352 26 05 00      mov b, $5
10463  4355 DD            push bl
10464  4356 07 6F 23      call inoperable
10465  4359 51 01 00      add sp, 1
10466  435C C0 00 00      cmp b, 0
10467  435F C6 67 43      je _if164_exit
10468  4362             _if164_true:
10469  4362             ; return; 
10470  4362 F9            leave
10471  4363 09            ret
10472  4364 0A 67 43      jmp _if164_exit
10473  4367             _if164_exit:
10474  4367             ; puts("Course (0-9): "); 
10475  4367 26 26 6B      mov b, _s71 ; "Course (0-9): "
10476  436A FD AB         swp b
10477  436C D8            push b
10478  436D 07 BB 17      call puts
10479  4370 51 02 00      add sp, 2
10480  4373             ; c1 = input_f00(); 
10481  4373 FA FB FF      lea d, [bp + -5] ; $c1
10482  4376 DA            push d
10483  4377 07 13 21      call input_f00
10484  437A E7            pop d
10485  437B FD 43         mov [d], b
10486  437D             ; if (c1 == 900) 
10487  437D             _if165_cond:
10488  437D FA FB FF      lea d, [bp + -5] ; $c1
10489  4380 2A            mov b, [d]
10490  4381             ; --- START RELATIONAL
10491  4381 D7            push a
10492  4382 11            mov a, b
10493  4383 26 84 03      mov b, $384
10494  4386 B0            cmp a, b
10495  4387 FD 71         seq ; ==
10496  4389 E4            pop a
10497  438A             ; --- END RELATIONAL
10498  438A C0 00 00      cmp b, 0
10499  438D C6 9D 43      je _if165_exit
10500  4390             _if165_true:
10501  4390             ; c1 = 100; 
10502  4390 FA FB FF      lea d, [bp + -5] ; $c1
10503  4393 DA            push d
10504  4394 26 64 00      mov b, $64
10505  4397 E7            pop d
10506  4398 FD 43         mov [d], b
10507  439A 0A 9D 43      jmp _if165_exit
10508  439D             _if165_exit:
10509  439D             ; if (c1 < 100 || c1 >= 900) { 
10510  439D             _if166_cond:
10511  439D FA FB FF      lea d, [bp + -5] ; $c1
10512  43A0 2A            mov b, [d]
10513  43A1             ; --- START RELATIONAL
10514  43A1 D7            push a
10515  43A2 11            mov a, b
10516  43A3 26 64 00      mov b, $64
10517  43A6 B0            cmp a, b
10518  43A7 FD 73         slt ; < (signed)
10519  43A9 E4            pop a
10520  43AA             ; --- END RELATIONAL
10521  43AA             ; --- START LOGICAL OR
10522  43AA D7            push a
10523  43AB 11            mov a, b
10524  43AC FA FB FF      lea d, [bp + -5] ; $c1
10525  43AF 2A            mov b, [d]
10526  43B0             ; --- START RELATIONAL
10527  43B0 D7            push a
10528  43B1 11            mov a, b
10529  43B2 26 84 03      mov b, $384
10530  43B5 B0            cmp a, b
10531  43B6 FD 80         sge ; >=
10532  43B8 E4            pop a
10533  43B9             ; --- END RELATIONAL
10534  43B9 FD A8         sor a, b ; ||
10535  43BB E4            pop a
10536  43BC             ; --- END LOGICAL OR
10537  43BC C0 00 00      cmp b, 0
10538  43BF C6 DA 43      je _if166_exit
10539  43C2             _if166_true:
10540  43C2             ; printf("Ensign Chekov%s", inc_1); 
10541  43C2 3B 18 65      mov d, _inc_1 ; $inc_1
10542  43C5 2A            mov b, [d]
10543  43C6 FD AB         swp b
10544  43C8 D8            push b
10545  43C9 26 0B 71      mov b, _s113 ; "Ensign Chekov%s"
10546  43CC FD AB         swp b
10547  43CE D8            push b
10548  43CF 07 BA 07      call printf
10549  43D2 51 04 00      add sp, 4
10550  43D5             ; return; 
10551  43D5 F9            leave
10552  43D6 09            ret
10553  43D7 0A DA 43      jmp _if166_exit
10554  43DA             _if166_exit:
10555  43DA             ; energy = energy - 2; 
10556  43DA 3B C8 63      mov d, _energy ; $energy
10557  43DD DA            push d
10558  43DE 3B C8 63      mov d, _energy ; $energy
10559  43E1 2A            mov b, [d]
10560  43E2             ; --- START TERMS
10561  43E2 D7            push a
10562  43E3 11            mov a, b
10563  43E4 26 02 00      mov b, $2
10564  43E7 60            sub a, b
10565  43E8 27            mov b, a
10566  43E9 E4            pop a
10567  43EA             ; --- END TERMS
10568  43EA E7            pop d
10569  43EB FD 43         mov [d], b
10570  43ED             ; torps--; 
10571  43ED 3B 7D 64      mov d, _torps ; $torps
10572  43F0 32            mov bl, [d]
10573  43F1 A7 00         mov bh, 0
10574  43F3 FD 7D         dec b
10575  43F5 3B 7D 64      mov d, _torps ; $torps
10576  43F8 FD 43         mov [d], b
10577  43FA FD 77         inc b
10578  43FC             ; c2 = FROM_FIXED00(c1);	/* Integer part */ 
10579  43FC FA F9 FF      lea d, [bp + -7] ; $c2
10580  43FF DA            push d
10581  4400 FA FB FF      lea d, [bp + -5] ; $c1
10582  4403 2A            mov b, [d]
10583  4404 FD AB         swp b
10584  4406 D8            push b
10585  4407 07 DA 1F      call FROM_FIXED00
10586  440A 51 02 00      add sp, 2
10587  440D E7            pop d
10588  440E FD 43         mov [d], b
10589  4410             ; c3 = c2 + 1;		/* Next integer part */ 
10590  4410 FA F7 FF      lea d, [bp + -9] ; $c3
10591  4413 DA            push d
10592  4414 FA F9 FF      lea d, [bp + -7] ; $c2
10593  4417 2A            mov b, [d]
10594  4418             ; --- START TERMS
10595  4418 D7            push a
10596  4419 11            mov a, b
10597  441A 26 01 00      mov b, $1
10598  441D 56            add b, a
10599  441E E4            pop a
10600  441F             ; --- END TERMS
10601  441F E7            pop d
10602  4420 FD 43         mov [d], b
10603  4422             ; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
10604  4422 FA F5 FF      lea d, [bp + -11] ; $c4
10605  4425 DA            push d
10606  4426 FA FB FF      lea d, [bp + -5] ; $c1
10607  4429 2A            mov b, [d]
10608  442A             ; --- START TERMS
10609  442A D7            push a
10610  442B 11            mov a, b
10611  442C FA F9 FF      lea d, [bp + -7] ; $c2
10612  442F 2A            mov b, [d]
10613  4430 FD AB         swp b
10614  4432 D8            push b
10615  4433 07 C8 1F      call TO_FIXED00
10616  4436 51 02 00      add sp, 2
10617  4439 60            sub a, b
10618  443A 27            mov b, a
10619  443B E4            pop a
10620  443C             ; --- END TERMS
10621  443C E7            pop d
10622  443D FD 43         mov [d], b
10623  443F             ; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
10624  443F FA EF FF      lea d, [bp + -17] ; $x1
10625  4442 DA            push d
10626  4443 26 64 00      mov b, $64
10627  4446             ; --- START FACTORS
10628  4446 D7            push a
10629  4447 11            mov a, b
10630  4448 3B A7 63      mov d, _c_data ; $c
10631  444B D7            push a
10632  444C DA            push d
10633  444D 26 01 00      mov b, $1
10634  4450 E7            pop d
10635  4451 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
10636  4455 DA            push d
10637  4456 FA F9 FF      lea d, [bp + -7] ; $c2
10638  4459 2A            mov b, [d]
10639  445A E7            pop d
10640  445B 5A            add d, b
10641  445C E4            pop a
10642  445D 32            mov bl, [d]
10643  445E A7 00         mov bh, 0
10644  4460 AC            mul a, b ; *
10645  4461 11            mov a, b
10646  4462 27            mov b, a
10647  4463 E4            pop a
10648  4464             ; --- END FACTORS
10649  4464             ; --- START TERMS
10650  4464 D7            push a
10651  4465 11            mov a, b
10652  4466 3B A7 63      mov d, _c_data ; $c
10653  4469 D7            push a
10654  446A DA            push d
10655  446B 26 01 00      mov b, $1
10656  446E E7            pop d
10657  446F FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
10658  4473 DA            push d
10659  4474 FA F7 FF      lea d, [bp + -9] ; $c3
10660  4477 2A            mov b, [d]
10661  4478 E7            pop d
10662  4479 5A            add d, b
10663  447A E4            pop a
10664  447B 32            mov bl, [d]
10665  447C A7 00         mov bh, 0
10666  447E             ; --- START TERMS
10667  447E D7            push a
10668  447F 11            mov a, b
10669  4480 3B A7 63      mov d, _c_data ; $c
10670  4483 D7            push a
10671  4484 DA            push d
10672  4485 26 01 00      mov b, $1
10673  4488 E7            pop d
10674  4489 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
10675  448D DA            push d
10676  448E FA F9 FF      lea d, [bp + -7] ; $c2
10677  4491 2A            mov b, [d]
10678  4492 E7            pop d
10679  4493 5A            add d, b
10680  4494 E4            pop a
10681  4495 32            mov bl, [d]
10682  4496 A7 00         mov bh, 0
10683  4498 60            sub a, b
10684  4499 27            mov b, a
10685  449A E4            pop a
10686  449B             ; --- END TERMS
10687  449B             ; --- START FACTORS
10688  449B D7            push a
10689  449C 11            mov a, b
10690  449D FA F5 FF      lea d, [bp + -11] ; $c4
10691  44A0 2A            mov b, [d]
10692  44A1 AC            mul a, b ; *
10693  44A2 11            mov a, b
10694  44A3 27            mov b, a
10695  44A4 E4            pop a
10696  44A5             ; --- END FACTORS
10697  44A5 56            add b, a
10698  44A6 E4            pop a
10699  44A7             ; --- END TERMS
10700  44A7 E7            pop d
10701  44A8 FD 43         mov [d], b
10702  44AA             ; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
10703  44AA FA ED FF      lea d, [bp + -19] ; $x2
10704  44AD DA            push d
10705  44AE 26 64 00      mov b, $64
10706  44B1             ; --- START FACTORS
10707  44B1 D7            push a
10708  44B2 11            mov a, b
10709  44B3 3B A7 63      mov d, _c_data ; $c
10710  44B6 D7            push a
10711  44B7 DA            push d
10712  44B8 26 02 00      mov b, $2
10713  44BB E7            pop d
10714  44BC FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
10715  44C0 DA            push d
10716  44C1 FA F9 FF      lea d, [bp + -7] ; $c2
10717  44C4 2A            mov b, [d]
10718  44C5 E7            pop d
10719  44C6 5A            add d, b
10720  44C7 E4            pop a
10721  44C8 32            mov bl, [d]
10722  44C9 A7 00         mov bh, 0
10723  44CB AC            mul a, b ; *
10724  44CC 11            mov a, b
10725  44CD 27            mov b, a
10726  44CE E4            pop a
10727  44CF             ; --- END FACTORS
10728  44CF             ; --- START TERMS
10729  44CF D7            push a
10730  44D0 11            mov a, b
10731  44D1 3B A7 63      mov d, _c_data ; $c
10732  44D4 D7            push a
10733  44D5 DA            push d
10734  44D6 26 02 00      mov b, $2
10735  44D9 E7            pop d
10736  44DA FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
10737  44DE DA            push d
10738  44DF FA F7 FF      lea d, [bp + -9] ; $c3
10739  44E2 2A            mov b, [d]
10740  44E3 E7            pop d
10741  44E4 5A            add d, b
10742  44E5 E4            pop a
10743  44E6 32            mov bl, [d]
10744  44E7 A7 00         mov bh, 0
10745  44E9             ; --- START TERMS
10746  44E9 D7            push a
10747  44EA 11            mov a, b
10748  44EB 3B A7 63      mov d, _c_data ; $c
10749  44EE D7            push a
10750  44EF DA            push d
10751  44F0 26 02 00      mov b, $2
10752  44F3 E7            pop d
10753  44F4 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
10754  44F8 DA            push d
10755  44F9 FA F9 FF      lea d, [bp + -7] ; $c2
10756  44FC 2A            mov b, [d]
10757  44FD E7            pop d
10758  44FE 5A            add d, b
10759  44FF E4            pop a
10760  4500 32            mov bl, [d]
10761  4501 A7 00         mov bh, 0
10762  4503 60            sub a, b
10763  4504 27            mov b, a
10764  4505 E4            pop a
10765  4506             ; --- END TERMS
10766  4506             ; --- START FACTORS
10767  4506 D7            push a
10768  4507 11            mov a, b
10769  4508 FA F5 FF      lea d, [bp + -11] ; $c4
10770  450B 2A            mov b, [d]
10771  450C AC            mul a, b ; *
10772  450D 11            mov a, b
10773  450E 27            mov b, a
10774  450F E4            pop a
10775  4510             ; --- END FACTORS
10776  4510 56            add b, a
10777  4511 E4            pop a
10778  4512             ; --- END TERMS
10779  4512 E7            pop d
10780  4513 FD 43         mov [d], b
10781  4515             ; x = ship_y + x1; 
10782  4515 FA F3 FF      lea d, [bp + -13] ; $x
10783  4518 DA            push d
10784  4519 3B 9E 64      mov d, _ship_y ; $ship_y
10785  451C 2A            mov b, [d]
10786  451D             ; --- START TERMS
10787  451D D7            push a
10788  451E 11            mov a, b
10789  451F FA EF FF      lea d, [bp + -17] ; $x1
10790  4522 2A            mov b, [d]
10791  4523 56            add b, a
10792  4524 E4            pop a
10793  4525             ; --- END TERMS
10794  4525 E7            pop d
10795  4526 FD 43         mov [d], b
10796  4528             ; y = ship_x + x2; 
10797  4528 FA F1 FF      lea d, [bp + -15] ; $y
10798  452B DA            push d
10799  452C 3B A0 64      mov d, _ship_x ; $ship_x
10800  452F 2A            mov b, [d]
10801  4530             ; --- START TERMS
10802  4530 D7            push a
10803  4531 11            mov a, b
10804  4532 FA ED FF      lea d, [bp + -19] ; $x2
10805  4535 2A            mov b, [d]
10806  4536 56            add b, a
10807  4537 E4            pop a
10808  4538             ; --- END TERMS
10809  4538 E7            pop d
10810  4539 FD 43         mov [d], b
10811  453B             ; x3 = FROM_FIXED00(x); 
10812  453B FA FF FF      lea d, [bp + -1] ; $x3
10813  453E DA            push d
10814  453F FA F3 FF      lea d, [bp + -13] ; $x
10815  4542 2A            mov b, [d]
10816  4543 FD AB         swp b
10817  4545 D8            push b
10818  4546 07 DA 1F      call FROM_FIXED00
10819  4549 51 02 00      add sp, 2
10820  454C E7            pop d
10821  454D FD 43         mov [d], b
10822  454F             ; y3 = FROM_FIXED00(y); 
10823  454F FA FD FF      lea d, [bp + -3] ; $y3
10824  4552 DA            push d
10825  4553 FA F1 FF      lea d, [bp + -15] ; $y
10826  4556 2A            mov b, [d]
10827  4557 FD AB         swp b
10828  4559 D8            push b
10829  455A 07 DA 1F      call FROM_FIXED00
10830  455D 51 02 00      add sp, 2
10831  4560 E7            pop d
10832  4561 FD 43         mov [d], b
10833  4563             ; puts("Torpedo Track:"); 
10834  4563 26 1B 71      mov b, _s114 ; "Torpedo Track:"
10835  4566 FD AB         swp b
10836  4568 D8            push b
10837  4569 07 BB 17      call puts
10838  456C 51 02 00      add sp, 2
10839  456F             ; while (x3 >= 1 && x3 <= 8 && y3 >= 1 && y3 <= 8) { 
10840  456F             _while167_cond:
10841  456F FA FF FF      lea d, [bp + -1] ; $x3
10842  4572 2A            mov b, [d]
10843  4573             ; --- START RELATIONAL
10844  4573 D7            push a
10845  4574 11            mov a, b
10846  4575 26 01 00      mov b, $1
10847  4578 B0            cmp a, b
10848  4579 FD 80         sge ; >=
10849  457B E4            pop a
10850  457C             ; --- END RELATIONAL
10851  457C             ; --- START LOGICAL AND
10852  457C D7            push a
10853  457D 11            mov a, b
10854  457E FA FF FF      lea d, [bp + -1] ; $x3
10855  4581 2A            mov b, [d]
10856  4582             ; --- START RELATIONAL
10857  4582 D7            push a
10858  4583 11            mov a, b
10859  4584 26 08 00      mov b, $8
10860  4587 B0            cmp a, b
10861  4588 FD 74         sle ; <= (signed)
10862  458A E4            pop a
10863  458B             ; --- END RELATIONAL
10864  458B FD A7         sand a, b
10865  458D 11            mov a, b
10866  458E FA FD FF      lea d, [bp + -3] ; $y3
10867  4591 2A            mov b, [d]
10868  4592             ; --- START RELATIONAL
10869  4592 D7            push a
10870  4593 11            mov a, b
10871  4594 26 01 00      mov b, $1
10872  4597 B0            cmp a, b
10873  4598 FD 80         sge ; >=
10874  459A E4            pop a
10875  459B             ; --- END RELATIONAL
10876  459B FD A7         sand a, b
10877  459D 11            mov a, b
10878  459E FA FD FF      lea d, [bp + -3] ; $y3
10879  45A1 2A            mov b, [d]
10880  45A2             ; --- START RELATIONAL
10881  45A2 D7            push a
10882  45A3 11            mov a, b
10883  45A4 26 08 00      mov b, $8
10884  45A7 B0            cmp a, b
10885  45A8 FD 74         sle ; <= (signed)
10886  45AA E4            pop a
10887  45AB             ; --- END RELATIONAL
10888  45AB FD A7         sand a, b
10889  45AD E4            pop a
10890  45AE             ; --- END LOGICAL AND
10891  45AE C0 00 00      cmp b, 0
10892  45B1 C6 93 46      je _while167_exit
10893  45B4             _while167_block:
10894  45B4             ; unsigned char                         p; 
10895  45B4 52 01 00      sub sp, 1
10896  45B7             ; printf("    %d, %d\n", x3, y3); 
10897  45B7 FA FD FF      lea d, [bp + -3] ; $y3
10898  45BA 2A            mov b, [d]
10899  45BB FD AB         swp b
10900  45BD D8            push b
10901  45BE FA FF FF      lea d, [bp + -1] ; $x3
10902  45C1 2A            mov b, [d]
10903  45C2 FD AB         swp b
10904  45C4 D8            push b
10905  45C5 26 2A 71      mov b, _s115 ; "    %d, %d\n"
10906  45C8 FD AB         swp b
10907  45CA D8            push b
10908  45CB 07 BA 07      call printf
10909  45CE 51 06 00      add sp, 6
10910  45D1             ; p = quad[x3-1][y3-1]; 
10911  45D1 FA EC FF      lea d, [bp + -20] ; $p
10912  45D4 DA            push d
10913  45D5 3B A4 64      mov d, _quad_data ; $quad
10914  45D8 D7            push a
10915  45D9 DA            push d
10916  45DA FA FF FF      lea d, [bp + -1] ; $x3
10917  45DD 2A            mov b, [d]
10918  45DE             ; --- START TERMS
10919  45DE D7            push a
10920  45DF 11            mov a, b
10921  45E0 26 01 00      mov b, $1
10922  45E3 60            sub a, b
10923  45E4 27            mov b, a
10924  45E5 E4            pop a
10925  45E6             ; --- END TERMS
10926  45E6 E7            pop d
10927  45E7 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
10928  45EB DA            push d
10929  45EC FA FD FF      lea d, [bp + -3] ; $y3
10930  45EF 2A            mov b, [d]
10931  45F0             ; --- START TERMS
10932  45F0 D7            push a
10933  45F1 11            mov a, b
10934  45F2 26 01 00      mov b, $1
10935  45F5 60            sub a, b
10936  45F6 27            mov b, a
10937  45F7 E4            pop a
10938  45F8             ; --- END TERMS
10939  45F8 E7            pop d
10940  45F9 5A            add d, b
10941  45FA E4            pop a
10942  45FB 32            mov bl, [d]
10943  45FC A7 00         mov bh, 0
10944  45FE E7            pop d
10945  45FF FD 3E         mov [d], bl
10946  4601             ; if (p !=  		0       && p !=  		4     ) { 
10947  4601             _if168_cond:
10948  4601 FA EC FF      lea d, [bp + -20] ; $p
10949  4604 32            mov bl, [d]
10950  4605 A7 00         mov bh, 0
10951  4607             ; --- START RELATIONAL
10952  4607 D7            push a
10953  4608 11            mov a, b
10954  4609 26 00 00      mov b, $0
10955  460C B0            cmp a, b
10956  460D FD 72         sneq ; !=
10957  460F E4            pop a
10958  4610             ; --- END RELATIONAL
10959  4610             ; --- START LOGICAL AND
10960  4610 D7            push a
10961  4611 11            mov a, b
10962  4612 FA EC FF      lea d, [bp + -20] ; $p
10963  4615 32            mov bl, [d]
10964  4616 A7 00         mov bh, 0
10965  4618             ; --- START RELATIONAL
10966  4618 D7            push a
10967  4619 11            mov a, b
10968  461A 26 04 00      mov b, $4
10969  461D B0            cmp a, b
10970  461E FD 72         sneq ; !=
10971  4620 E4            pop a
10972  4621             ; --- END RELATIONAL
10973  4621 FD A7         sand a, b
10974  4623 E4            pop a
10975  4624             ; --- END LOGICAL AND
10976  4624 C0 00 00      cmp b, 0
10977  4627 C6 42 46      je _if168_exit
10978  462A             _if168_true:
10979  462A             ; torpedo_hit(x3, y3); 
10980  462A FA FD FF      lea d, [bp + -3] ; $y3
10981  462D 2A            mov b, [d]
10982  462E DD            push bl
10983  462F FA FF FF      lea d, [bp + -1] ; $x3
10984  4632 2A            mov b, [d]
10985  4633 DD            push bl
10986  4634 07 A4 46      call torpedo_hit
10987  4637 51 02 00      add sp, 2
10988  463A             ; klingons_shoot(); 
10989  463A 07 E2 59      call klingons_shoot
10990  463D             ; return; 
10991  463D F9            leave
10992  463E 09            ret
10993  463F 0A 42 46      jmp _if168_exit
10994  4642             _if168_exit:
10995  4642             ; x = x + x1; 
10996  4642 FA F3 FF      lea d, [bp + -13] ; $x
10997  4645 DA            push d
10998  4646 FA F3 FF      lea d, [bp + -13] ; $x
10999  4649 2A            mov b, [d]
11000  464A             ; --- START TERMS
11001  464A D7            push a
11002  464B 11            mov a, b
11003  464C FA EF FF      lea d, [bp + -17] ; $x1
11004  464F 2A            mov b, [d]
11005  4650 56            add b, a
11006  4651 E4            pop a
11007  4652             ; --- END TERMS
11008  4652 E7            pop d
11009  4653 FD 43         mov [d], b
11010  4655             ; y = y + x2; 
11011  4655 FA F1 FF      lea d, [bp + -15] ; $y
11012  4658 DA            push d
11013  4659 FA F1 FF      lea d, [bp + -15] ; $y
11014  465C 2A            mov b, [d]
11015  465D             ; --- START TERMS
11016  465D D7            push a
11017  465E 11            mov a, b
11018  465F FA ED FF      lea d, [bp + -19] ; $x2
11019  4662 2A            mov b, [d]
11020  4663 56            add b, a
11021  4664 E4            pop a
11022  4665             ; --- END TERMS
11023  4665 E7            pop d
11024  4666 FD 43         mov [d], b
11025  4668             ; x3 = FROM_FIXED00(x); 
11026  4668 FA FF FF      lea d, [bp + -1] ; $x3
11027  466B DA            push d
11028  466C FA F3 FF      lea d, [bp + -13] ; $x
11029  466F 2A            mov b, [d]
11030  4670 FD AB         swp b
11031  4672 D8            push b
11032  4673 07 DA 1F      call FROM_FIXED00
11033  4676 51 02 00      add sp, 2
11034  4679 E7            pop d
11035  467A FD 43         mov [d], b
11036  467C             ; y3 = FROM_FIXED00(y); 
11037  467C FA FD FF      lea d, [bp + -3] ; $y3
11038  467F DA            push d
11039  4680 FA F1 FF      lea d, [bp + -15] ; $y
11040  4683 2A            mov b, [d]
11041  4684 FD AB         swp b
11042  4686 D8            push b
11043  4687 07 DA 1F      call FROM_FIXED00
11044  468A 51 02 00      add sp, 2
11045  468D E7            pop d
11046  468E FD 43         mov [d], b
11047  4690 0A 6F 45      jmp _while167_cond
11048  4693             _while167_exit:
11049  4693             ; puts("Torpedo Missed\n"); 
11050  4693 26 36 71      mov b, _s116 ; "Torpedo Missed\n"
11051  4696 FD AB         swp b
11052  4698 D8            push b
11053  4699 07 BB 17      call puts
11054  469C 51 02 00      add sp, 2
11055  469F             ; klingons_shoot(); 
11056  469F 07 E2 59      call klingons_shoot
11057  46A2 F9            leave
11058  46A3 09            ret
11059  46A4             
11060  46A4             torpedo_hit:
11061  46A4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11062  46A7             ; int i; 
11063  46A7 52 02 00      sub sp, 2
11064  46AA             ; struct klingon *k; 
11065  46AA 52 02 00      sub sp, 2
11066  46AD             ; switch(quad[yp-1][xp-1]) { 
11067  46AD             _switch169_expr:
11068  46AD 3B A4 64      mov d, _quad_data ; $quad
11069  46B0 D7            push a
11070  46B1 DA            push d
11071  46B2 FA 05 00      lea d, [bp + 5] ; $yp
11072  46B5 32            mov bl, [d]
11073  46B6 A7 00         mov bh, 0
11074  46B8             ; --- START TERMS
11075  46B8 D7            push a
11076  46B9 11            mov a, b
11077  46BA 26 01 00      mov b, $1
11078  46BD 60            sub a, b
11079  46BE 27            mov b, a
11080  46BF E4            pop a
11081  46C0             ; --- END TERMS
11082  46C0 E7            pop d
11083  46C1 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
11084  46C5 DA            push d
11085  46C6 FA 06 00      lea d, [bp + 6] ; $xp
11086  46C9 32            mov bl, [d]
11087  46CA A7 00         mov bh, 0
11088  46CC             ; --- START TERMS
11089  46CC D7            push a
11090  46CD 11            mov a, b
11091  46CE 26 01 00      mov b, $1
11092  46D1 60            sub a, b
11093  46D2 27            mov b, a
11094  46D3 E4            pop a
11095  46D4             ; --- END TERMS
11096  46D4 E7            pop d
11097  46D5 5A            add d, b
11098  46D6 E4            pop a
11099  46D7 32            mov bl, [d]
11100  46D8 A7 00         mov bh, 0
11101  46DA             _switch169_comparisons:
11102  46DA C0 01 00      cmp b, 1
11103  46DD C6 EF 46      je _switch169_case0
11104  46E0 C0 03 00      cmp b, 3
11105  46E3 C6 0B 47      je _switch169_case1
11106  46E6 C0 02 00      cmp b, 2
11107  46E9 C6 26 48      je _switch169_case2
11108  46EC 0A 21 49      jmp _switch169_exit
11109  46EF             _switch169_case0:
11110  46EF             ; printf("Star at %d, %d absorbed torpedo energy.\n\n", yp, xp); 
11111  46EF FA 06 00      lea d, [bp + 6] ; $xp
11112  46F2 32            mov bl, [d]
11113  46F3 A7 00         mov bh, 0
11114  46F5 DD            push bl
11115  46F6 FA 05 00      lea d, [bp + 5] ; $yp
11116  46F9 32            mov bl, [d]
11117  46FA A7 00         mov bh, 0
11118  46FC DD            push bl
11119  46FD 26 46 71      mov b, _s117 ; "Star at %d, %d absorbed torpedo energy.\n\n"
11120  4700 FD AB         swp b
11121  4702 D8            push b
11122  4703 07 BA 07      call printf
11123  4706 51 04 00      add sp, 4
11124  4709             ; return; 
11125  4709 F9            leave
11126  470A 09            ret
11127  470B             _switch169_case1:
11128  470B             ; puts("*** Klingon Destroyed ***\n"); 
11129  470B 26 AA 70      mov b, _s110 ; "*** Klingon Destroyed ***\n"
11130  470E FD AB         swp b
11131  4710 D8            push b
11132  4711 07 BB 17      call puts
11133  4714 51 02 00      add sp, 2
11134  4717             ; klingons--; 
11135  4717 3B 7A 64      mov d, _klingons ; $klingons
11136  471A 32            mov bl, [d]
11137  471B A7 00         mov bh, 0
11138  471D FD 7D         dec b
11139  471F 3B 7A 64      mov d, _klingons ; $klingons
11140  4722 FD 43         mov [d], b
11141  4724 FD 77         inc b
11142  4726             ; klingons_left--; 
11143  4726 3B 7C 64      mov d, _klingons_left ; $klingons_left
11144  4729 32            mov bl, [d]
11145  472A A7 00         mov bh, 0
11146  472C FD 7D         dec b
11147  472E 3B 7C 64      mov d, _klingons_left ; $klingons_left
11148  4731 FD 43         mov [d], b
11149  4733 FD 77         inc b
11150  4735             ; if (klingons_left <= 0) 
11151  4735             _if170_cond:
11152  4735 3B 7C 64      mov d, _klingons_left ; $klingons_left
11153  4738 32            mov bl, [d]
11154  4739 A7 00         mov bh, 0
11155  473B             ; --- START RELATIONAL
11156  473B D7            push a
11157  473C 11            mov a, b
11158  473D 26 00 00      mov b, $0
11159  4740 B0            cmp a, b
11160  4741 FD 76         sleu ; <= (unsigned)
11161  4743 E4            pop a
11162  4744             ; --- END RELATIONAL
11163  4744 C0 00 00      cmp b, 0
11164  4747 C6 50 47      je _if170_exit
11165  474A             _if170_true:
11166  474A             ; won_game(); 
11167  474A 07 2C 58      call won_game
11168  474D 0A 50 47      jmp _if170_exit
11169  4750             _if170_exit:
11170  4750             ; k = kdata; 
11171  4750 FA FD FF      lea d, [bp + -3] ; $k
11172  4753 DA            push d
11173  4754 3B 6E 64      mov d, _kdata_data ; $kdata
11174  4757 2D            mov b, d
11175  4758 E7            pop d
11176  4759 FD 43         mov [d], b
11177  475B             ; for (i = 0; i <= 2; i++) { 
11178  475B             _for171_init:
11179  475B FA FF FF      lea d, [bp + -1] ; $i
11180  475E DA            push d
11181  475F 26 00 00      mov b, $0
11182  4762 E7            pop d
11183  4763 FD 43         mov [d], b
11184  4765             _for171_cond:
11185  4765 FA FF FF      lea d, [bp + -1] ; $i
11186  4768 2A            mov b, [d]
11187  4769             ; --- START RELATIONAL
11188  4769 D7            push a
11189  476A 11            mov a, b
11190  476B 26 02 00      mov b, $2
11191  476E B0            cmp a, b
11192  476F FD 74         sle ; <= (signed)
11193  4771 E4            pop a
11194  4772             ; --- END RELATIONAL
11195  4772 C0 00 00      cmp b, 0
11196  4775 C6 E4 47      je _for171_exit
11197  4778             _for171_block:
11198  4778             ; if (yp == k->y && xp == k->x) 
11199  4778             _if172_cond:
11200  4778 FA 05 00      lea d, [bp + 5] ; $yp
11201  477B 32            mov bl, [d]
11202  477C A7 00         mov bh, 0
11203  477E             ; --- START RELATIONAL
11204  477E D7            push a
11205  477F 11            mov a, b
11206  4780 FA FD FF      lea d, [bp + -3] ; $k
11207  4783 FD 2A         mov d, [d]
11208  4785 58 00 00      add d, 0
11209  4788 32            mov bl, [d]
11210  4789 A7 00         mov bh, 0
11211  478B B0            cmp a, b
11212  478C FD 71         seq ; ==
11213  478E E4            pop a
11214  478F             ; --- END RELATIONAL
11215  478F             ; --- START LOGICAL AND
11216  478F D7            push a
11217  4790 11            mov a, b
11218  4791 FA 06 00      lea d, [bp + 6] ; $xp
11219  4794 32            mov bl, [d]
11220  4795 A7 00         mov bh, 0
11221  4797             ; --- START RELATIONAL
11222  4797 D7            push a
11223  4798 11            mov a, b
11224  4799 FA FD FF      lea d, [bp + -3] ; $k
11225  479C FD 2A         mov d, [d]
11226  479E 58 01 00      add d, 1
11227  47A1 32            mov bl, [d]
11228  47A2 A7 00         mov bh, 0
11229  47A4 B0            cmp a, b
11230  47A5 FD 71         seq ; ==
11231  47A7 E4            pop a
11232  47A8             ; --- END RELATIONAL
11233  47A8 FD A7         sand a, b
11234  47AA E4            pop a
11235  47AB             ; --- END LOGICAL AND
11236  47AB C0 00 00      cmp b, 0
11237  47AE C6 C3 47      je _if172_exit
11238  47B1             _if172_true:
11239  47B1             ; k->energy = 0; 
11240  47B1 FA FD FF      lea d, [bp + -3] ; $k
11241  47B4 FD 2A         mov d, [d]
11242  47B6 58 02 00      add d, 2
11243  47B9 DA            push d
11244  47BA 26 00 00      mov b, $0
11245  47BD E7            pop d
11246  47BE FD 43         mov [d], b
11247  47C0 0A C3 47      jmp _if172_exit
11248  47C3             _if172_exit:
11249  47C3             ; k++; 
11250  47C3 FA FD FF      lea d, [bp + -3] ; $k
11251  47C6 2A            mov b, [d]
11252  47C7 FD 77         inc b
11253  47C9 FD 77         inc b
11254  47CB FA FD FF      lea d, [bp + -3] ; $k
11255  47CE FD 43         mov [d], b
11256  47D0 FD 7D         dec b
11257  47D2 FD 7D         dec b
11258  47D4             _for171_update:
11259  47D4 FA FF FF      lea d, [bp + -1] ; $i
11260  47D7 2A            mov b, [d]
11261  47D8 FD 77         inc b
11262  47DA FA FF FF      lea d, [bp + -1] ; $i
11263  47DD FD 43         mov [d], b
11264  47DF FD 7D         dec b
11265  47E1 0A 65 47      jmp _for171_cond
11266  47E4             _for171_exit:
11267  47E4             ; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x100; 
11268  47E4 3B CC 63      mov d, _map_data ; $map
11269  47E7 D7            push a
11270  47E8 DA            push d
11271  47E9 3B 7F 64      mov d, _quad_y ; $quad_y
11272  47EC 2A            mov b, [d]
11273  47ED E7            pop d
11274  47EE FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11275  47F2 DA            push d
11276  47F3 3B 81 64      mov d, _quad_x ; $quad_x
11277  47F6 2A            mov b, [d]
11278  47F7 E7            pop d
11279  47F8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11280  47FC E4            pop a
11281  47FD DA            push d
11282  47FE 3B CC 63      mov d, _map_data ; $map
11283  4801 D7            push a
11284  4802 DA            push d
11285  4803 3B 7F 64      mov d, _quad_y ; $quad_y
11286  4806 2A            mov b, [d]
11287  4807 E7            pop d
11288  4808 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11289  480C DA            push d
11290  480D 3B 81 64      mov d, _quad_x ; $quad_x
11291  4810 2A            mov b, [d]
11292  4811 E7            pop d
11293  4812 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11294  4816 E4            pop a
11295  4817 2A            mov b, [d]
11296  4818             ; --- START TERMS
11297  4818 D7            push a
11298  4819 11            mov a, b
11299  481A 26 00 01      mov b, $100
11300  481D 60            sub a, b
11301  481E 27            mov b, a
11302  481F E4            pop a
11303  4820             ; --- END TERMS
11304  4820 E7            pop d
11305  4821 FD 43         mov [d], b
11306  4823             ; break; 
11307  4823 0A 21 49      jmp _switch169_exit ; case break
11308  4826             _switch169_case2:
11309  4826             ; puts("*** Starbase Destroyed ***"); 
11310  4826 26 70 71      mov b, _s118 ; "*** Starbase Destroyed ***"
11311  4829 FD AB         swp b
11312  482B D8            push b
11313  482C 07 BB 17      call puts
11314  482F 51 02 00      add sp, 2
11315  4832             ; starbases--; 
11316  4832 3B A3 63      mov d, _starbases ; $starbases
11317  4835 32            mov bl, [d]
11318  4836 A7 00         mov bh, 0
11319  4838 FD 7D         dec b
11320  483A 3B A3 63      mov d, _starbases ; $starbases
11321  483D FD 43         mov [d], b
11322  483F FD 77         inc b
11323  4841             ; starbases_left--; 
11324  4841 3B A6 63      mov d, _starbases_left ; $starbases_left
11325  4844 32            mov bl, [d]
11326  4845 A7 00         mov bh, 0
11327  4847 FD 7D         dec b
11328  4849 3B A6 63      mov d, _starbases_left ; $starbases_left
11329  484C FD 43         mov [d], b
11330  484E FD 77         inc b
11331  4850             ; if (starbases_left <= 0 && klingons_left <= FROM_FIXED(stardate) - time_start - time_up) { 
11332  4850             _if173_cond:
11333  4850 3B A6 63      mov d, _starbases_left ; $starbases_left
11334  4853 32            mov bl, [d]
11335  4854 A7 00         mov bh, 0
11336  4856             ; --- START RELATIONAL
11337  4856 D7            push a
11338  4857 11            mov a, b
11339  4858 26 00 00      mov b, $0
11340  485B B0            cmp a, b
11341  485C FD 74         sle ; <= (signed)
11342  485E E4            pop a
11343  485F             ; --- END RELATIONAL
11344  485F             ; --- START LOGICAL AND
11345  485F D7            push a
11346  4860 11            mov a, b
11347  4861 3B 7C 64      mov d, _klingons_left ; $klingons_left
11348  4864 32            mov bl, [d]
11349  4865 A7 00         mov bh, 0
11350  4867             ; --- START RELATIONAL
11351  4867 D7            push a
11352  4868 11            mov a, b
11353  4869 3B A2 64      mov d, _stardate ; $stardate
11354  486C 2A            mov b, [d]
11355  486D FD AB         swp b
11356  486F D8            push b
11357  4870 07 B7 1F      call FROM_FIXED
11358  4873 51 02 00      add sp, 2
11359  4876             ; --- START TERMS
11360  4876 D7            push a
11361  4877 11            mov a, b
11362  4878 3B 86 64      mov d, _time_start ; $time_start
11363  487B 2A            mov b, [d]
11364  487C 60            sub a, b
11365  487D 27            mov b, a
11366  487E 11            mov a, b
11367  487F 3B 88 64      mov d, _time_up ; $time_up
11368  4882 2A            mov b, [d]
11369  4883 60            sub a, b
11370  4884 27            mov b, a
11371  4885 E4            pop a
11372  4886             ; --- END TERMS
11373  4886 B0            cmp a, b
11374  4887 FD 76         sleu ; <= (unsigned)
11375  4889 E4            pop a
11376  488A             ; --- END RELATIONAL
11377  488A FD A7         sand a, b
11378  488C E4            pop a
11379  488D             ; --- END LOGICAL AND
11380  488D C0 00 00      cmp b, 0
11381  4890 C6 C9 48      je _if173_exit
11382  4893             _if173_true:
11383  4893             ; puts("That does it, Captain!!"); 
11384  4893 26 8B 71      mov b, _s119 ; "That does it, Captain!!"
11385  4896 FD AB         swp b
11386  4898 D8            push b
11387  4899 07 BB 17      call puts
11388  489C 51 02 00      add sp, 2
11389  489F             ; puts("You are hereby relieved of command\n"); 
11390  489F 26 A3 71      mov b, _s120 ; "You are hereby relieved of command\n"
11391  48A2 FD AB         swp b
11392  48A4 D8            push b
11393  48A5 07 BB 17      call puts
11394  48A8 51 02 00      add sp, 2
11395  48AB             ; puts("and sentenced to 99 stardates of hard"); 
11396  48AB 26 C7 71      mov b, _s121 ; "and sentenced to 99 stardates of hard"
11397  48AE FD AB         swp b
11398  48B0 D8            push b
11399  48B1 07 BB 17      call puts
11400  48B4 51 02 00      add sp, 2
11401  48B7             ; puts("labor on Cygnus 12!!\n"); 
11402  48B7 26 ED 71      mov b, _s122 ; "labor on Cygnus 12!!\n"
11403  48BA FD AB         swp b
11404  48BC D8            push b
11405  48BD 07 BB 17      call puts
11406  48C0 51 02 00      add sp, 2
11407  48C3             ; resign_commision(); 
11408  48C3 07 11 58      call resign_commision
11409  48C6 0A C9 48      jmp _if173_exit
11410  48C9             _if173_exit:
11411  48C9             ; puts("Starfleet Command reviewing your record to consider\n court martial!\n"); 
11412  48C9 26 03 72      mov b, _s123 ; "Starfleet Command reviewing your record to consider\n court martial!\n"
11413  48CC FD AB         swp b
11414  48CE D8            push b
11415  48CF 07 BB 17      call puts
11416  48D2 51 02 00      add sp, 2
11417  48D5             ; docked = 0;		/* Undock */ 
11418  48D5 3B C7 63      mov d, _docked ; $docked
11419  48D8 DA            push d
11420  48D9 26 00 00      mov b, $0
11421  48DC E7            pop d
11422  48DD FD 3E         mov [d], bl
11423  48DF             ; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x10; 
11424  48DF 3B CC 63      mov d, _map_data ; $map
11425  48E2 D7            push a
11426  48E3 DA            push d
11427  48E4 3B 7F 64      mov d, _quad_y ; $quad_y
11428  48E7 2A            mov b, [d]
11429  48E8 E7            pop d
11430  48E9 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11431  48ED DA            push d
11432  48EE 3B 81 64      mov d, _quad_x ; $quad_x
11433  48F1 2A            mov b, [d]
11434  48F2 E7            pop d
11435  48F3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11436  48F7 E4            pop a
11437  48F8 DA            push d
11438  48F9 3B CC 63      mov d, _map_data ; $map
11439  48FC D7            push a
11440  48FD DA            push d
11441  48FE 3B 7F 64      mov d, _quad_y ; $quad_y
11442  4901 2A            mov b, [d]
11443  4902 E7            pop d
11444  4903 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11445  4907 DA            push d
11446  4908 3B 81 64      mov d, _quad_x ; $quad_x
11447  490B 2A            mov b, [d]
11448  490C E7            pop d
11449  490D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11450  4911 E4            pop a
11451  4912 2A            mov b, [d]
11452  4913             ; --- START TERMS
11453  4913 D7            push a
11454  4914 11            mov a, b
11455  4915 26 10 00      mov b, $10
11456  4918 60            sub a, b
11457  4919 27            mov b, a
11458  491A E4            pop a
11459  491B             ; --- END TERMS
11460  491B E7            pop d
11461  491C FD 43         mov [d], b
11462  491E             ; break; 
11463  491E 0A 21 49      jmp _switch169_exit ; case break
11464  4921             _switch169_exit:
11465  4921             ; quad[yp-1][xp-1] =  		0      ; 
11466  4921 3B A4 64      mov d, _quad_data ; $quad
11467  4924 D7            push a
11468  4925 DA            push d
11469  4926 FA 05 00      lea d, [bp + 5] ; $yp
11470  4929 32            mov bl, [d]
11471  492A A7 00         mov bh, 0
11472  492C             ; --- START TERMS
11473  492C D7            push a
11474  492D 11            mov a, b
11475  492E 26 01 00      mov b, $1
11476  4931 60            sub a, b
11477  4932 27            mov b, a
11478  4933 E4            pop a
11479  4934             ; --- END TERMS
11480  4934 E7            pop d
11481  4935 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
11482  4939 DA            push d
11483  493A FA 06 00      lea d, [bp + 6] ; $xp
11484  493D 32            mov bl, [d]
11485  493E A7 00         mov bh, 0
11486  4940             ; --- START TERMS
11487  4940 D7            push a
11488  4941 11            mov a, b
11489  4942 26 01 00      mov b, $1
11490  4945 60            sub a, b
11491  4946 27            mov b, a
11492  4947 E4            pop a
11493  4948             ; --- END TERMS
11494  4948 E7            pop d
11495  4949 5A            add d, b
11496  494A E4            pop a
11497  494B DA            push d
11498  494C 26 00 00      mov b, $0
11499  494F E7            pop d
11500  4950 FD 3E         mov [d], bl
11501  4952 F9            leave
11502  4953 09            ret
11503  4954             
11504  4954             damage_control:
11505  4954 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11506  4957             ; int       repair_cost = 0; 
11507  4957 52 02 00      sub sp, 2
11508  495A             ; --- START LOCAL VAR INITIALIZATION
11509  495A FA FF FF      lea d, [bp + -1] ; $repair_cost
11510  495D DA            push d
11511  495E 26 00 00      mov b, $0
11512  4961 E7            pop d
11513  4962 FD 43         mov [d], b
11514  4964             ; --- END LOCAL VAR INITIALIZATION
11515  4964             ; int i; 
11516  4964 52 02 00      sub sp, 2
11517  4967             ; if (damage[6] < 0) 
11518  4967             _if174_cond:
11519  4967 3B 8A 64      mov d, _damage_data ; $damage
11520  496A D7            push a
11521  496B DA            push d
11522  496C 26 06 00      mov b, $6
11523  496F E7            pop d
11524  4970 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11525  4974 E4            pop a
11526  4975 2A            mov b, [d]
11527  4976             ; --- START RELATIONAL
11528  4976 D7            push a
11529  4977 11            mov a, b
11530  4978 26 00 00      mov b, $0
11531  497B B0            cmp a, b
11532  497C FD 73         slt ; < (signed)
11533  497E E4            pop a
11534  497F             ; --- END RELATIONAL
11535  497F C0 00 00      cmp b, 0
11536  4982 C6 94 49      je _if174_exit
11537  4985             _if174_true:
11538  4985             ; puts("Damage Control report not available."); 
11539  4985 26 48 72      mov b, _s124 ; "Damage Control report not available."
11540  4988 FD AB         swp b
11541  498A D8            push b
11542  498B 07 BB 17      call puts
11543  498E 51 02 00      add sp, 2
11544  4991 0A 94 49      jmp _if174_exit
11545  4994             _if174_exit:
11546  4994             ; if (docked) { 
11547  4994             _if175_cond:
11548  4994 3B C7 63      mov d, _docked ; $docked
11549  4997 32            mov bl, [d]
11550  4998 A7 00         mov bh, 0
11551  499A C0 00 00      cmp b, 0
11552  499D C6 10 4B      je _if175_exit
11553  49A0             _if175_true:
11554  49A0             ; repair_cost = 0; 
11555  49A0 FA FF FF      lea d, [bp + -1] ; $repair_cost
11556  49A3 DA            push d
11557  49A4 26 00 00      mov b, $0
11558  49A7 E7            pop d
11559  49A8 FD 43         mov [d], b
11560  49AA             ; for (i = 1; i <= 8; i++) 
11561  49AA             _for176_init:
11562  49AA FA FD FF      lea d, [bp + -3] ; $i
11563  49AD DA            push d
11564  49AE 26 01 00      mov b, $1
11565  49B1 E7            pop d
11566  49B2 FD 43         mov [d], b
11567  49B4             _for176_cond:
11568  49B4 FA FD FF      lea d, [bp + -3] ; $i
11569  49B7 2A            mov b, [d]
11570  49B8             ; --- START RELATIONAL
11571  49B8 D7            push a
11572  49B9 11            mov a, b
11573  49BA 26 08 00      mov b, $8
11574  49BD B0            cmp a, b
11575  49BE FD 74         sle ; <= (signed)
11576  49C0 E4            pop a
11577  49C1             ; --- END RELATIONAL
11578  49C1 C0 00 00      cmp b, 0
11579  49C4 C6 0B 4A      je _for176_exit
11580  49C7             _for176_block:
11581  49C7             ; if (damage[i] < 0) 
11582  49C7             _if177_cond:
11583  49C7 3B 8A 64      mov d, _damage_data ; $damage
11584  49CA D7            push a
11585  49CB DA            push d
11586  49CC FA FD FF      lea d, [bp + -3] ; $i
11587  49CF 2A            mov b, [d]
11588  49D0 E7            pop d
11589  49D1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11590  49D5 E4            pop a
11591  49D6 2A            mov b, [d]
11592  49D7             ; --- START RELATIONAL
11593  49D7 D7            push a
11594  49D8 11            mov a, b
11595  49D9 26 00 00      mov b, $0
11596  49DC B0            cmp a, b
11597  49DD FD 73         slt ; < (signed)
11598  49DF E4            pop a
11599  49E0             ; --- END RELATIONAL
11600  49E0 C0 00 00      cmp b, 0
11601  49E3 C6 FB 49      je _if177_exit
11602  49E6             _if177_true:
11603  49E6             ; repair_cost = repair_cost + 10; 
11604  49E6 FA FF FF      lea d, [bp + -1] ; $repair_cost
11605  49E9 DA            push d
11606  49EA FA FF FF      lea d, [bp + -1] ; $repair_cost
11607  49ED 2A            mov b, [d]
11608  49EE             ; --- START TERMS
11609  49EE D7            push a
11610  49EF 11            mov a, b
11611  49F0 26 0A 00      mov b, $a
11612  49F3 56            add b, a
11613  49F4 E4            pop a
11614  49F5             ; --- END TERMS
11615  49F5 E7            pop d
11616  49F6 FD 43         mov [d], b
11617  49F8 0A FB 49      jmp _if177_exit
11618  49FB             _if177_exit:
11619  49FB             _for176_update:
11620  49FB FA FD FF      lea d, [bp + -3] ; $i
11621  49FE 2A            mov b, [d]
11622  49FF FD 77         inc b
11623  4A01 FA FD FF      lea d, [bp + -3] ; $i
11624  4A04 FD 43         mov [d], b
11625  4A06 FD 7D         dec b
11626  4A08 0A B4 49      jmp _for176_cond
11627  4A0B             _for176_exit:
11628  4A0B             ; if (repair_cost) { 
11629  4A0B             _if178_cond:
11630  4A0B FA FF FF      lea d, [bp + -1] ; $repair_cost
11631  4A0E 2A            mov b, [d]
11632  4A0F C0 00 00      cmp b, 0
11633  4A12 C6 0D 4B      je _if178_exit
11634  4A15             _if178_true:
11635  4A15             ; repair_cost = repair_cost + d4; 
11636  4A15 FA FF FF      lea d, [bp + -1] ; $repair_cost
11637  4A18 DA            push d
11638  4A19 FA FF FF      lea d, [bp + -1] ; $repair_cost
11639  4A1C 2A            mov b, [d]
11640  4A1D             ; --- START TERMS
11641  4A1D D7            push a
11642  4A1E 11            mov a, b
11643  4A1F 3B 9C 64      mov d, _d4 ; $d4
11644  4A22 2A            mov b, [d]
11645  4A23 56            add b, a
11646  4A24 E4            pop a
11647  4A25             ; --- END TERMS
11648  4A25 E7            pop d
11649  4A26 FD 43         mov [d], b
11650  4A28             ; if (repair_cost >= 100) 
11651  4A28             _if179_cond:
11652  4A28 FA FF FF      lea d, [bp + -1] ; $repair_cost
11653  4A2B 2A            mov b, [d]
11654  4A2C             ; --- START RELATIONAL
11655  4A2C D7            push a
11656  4A2D 11            mov a, b
11657  4A2E 26 64 00      mov b, $64
11658  4A31 B0            cmp a, b
11659  4A32 FD 80         sge ; >=
11660  4A34 E4            pop a
11661  4A35             ; --- END RELATIONAL
11662  4A35 C0 00 00      cmp b, 0
11663  4A38 C6 48 4A      je _if179_exit
11664  4A3B             _if179_true:
11665  4A3B             ; repair_cost = 90;	/* 0.9 */ 
11666  4A3B FA FF FF      lea d, [bp + -1] ; $repair_cost
11667  4A3E DA            push d
11668  4A3F 26 5A 00      mov b, $5a
11669  4A42 E7            pop d
11670  4A43 FD 43         mov [d], b
11671  4A45 0A 48 4A      jmp _if179_exit
11672  4A48             _if179_exit:
11673  4A48             ; printf("\nTechnicians standing by to effect repairs to your ship;\n"); 
11674  4A48 26 6D 72      mov b, _s125 ; "\nTechnicians standing by to effect repairs to your ship;\n"
11675  4A4B FD AB         swp b
11676  4A4D D8            push b
11677  4A4E 07 BA 07      call printf
11678  4A51 51 02 00      add sp, 2
11679  4A54             ; printf("Estimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? ", print100(repair_cost)); 
11680  4A54 FA FF FF      lea d, [bp + -1] ; $repair_cost
11681  4A57 2A            mov b, [d]
11682  4A58 FD AB         swp b
11683  4A5A D8            push b
11684  4A5B 07 DD 22      call print100
11685  4A5E 51 02 00      add sp, 2
11686  4A61 FD AB         swp b
11687  4A63 D8            push b
11688  4A64 26 A7 72      mov b, _s126 ; "Estimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? "
11689  4A67 FD AB         swp b
11690  4A69 D8            push b
11691  4A6A 07 BA 07      call printf
11692  4A6D 51 04 00      add sp, 4
11693  4A70             ; if (yesno()) { 
11694  4A70             _if180_cond:
11695  4A70 07 D1 20      call yesno
11696  4A73 C0 00 00      cmp b, 0
11697  4A76 C6 08 4B      je _if180_exit
11698  4A79             _if180_true:
11699  4A79             ; for (i = 1; i <= 8; i++) 
11700  4A79             _for181_init:
11701  4A79 FA FD FF      lea d, [bp + -3] ; $i
11702  4A7C DA            push d
11703  4A7D 26 01 00      mov b, $1
11704  4A80 E7            pop d
11705  4A81 FD 43         mov [d], b
11706  4A83             _for181_cond:
11707  4A83 FA FD FF      lea d, [bp + -3] ; $i
11708  4A86 2A            mov b, [d]
11709  4A87             ; --- START RELATIONAL
11710  4A87 D7            push a
11711  4A88 11            mov a, b
11712  4A89 26 08 00      mov b, $8
11713  4A8C B0            cmp a, b
11714  4A8D FD 74         sle ; <= (signed)
11715  4A8F E4            pop a
11716  4A90             ; --- END RELATIONAL
11717  4A90 C0 00 00      cmp b, 0
11718  4A93 C6 DE 4A      je _for181_exit
11719  4A96             _for181_block:
11720  4A96             ; if (damage[i] < 0) 
11721  4A96             _if182_cond:
11722  4A96 3B 8A 64      mov d, _damage_data ; $damage
11723  4A99 D7            push a
11724  4A9A DA            push d
11725  4A9B FA FD FF      lea d, [bp + -3] ; $i
11726  4A9E 2A            mov b, [d]
11727  4A9F E7            pop d
11728  4AA0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11729  4AA4 E4            pop a
11730  4AA5 2A            mov b, [d]
11731  4AA6             ; --- START RELATIONAL
11732  4AA6 D7            push a
11733  4AA7 11            mov a, b
11734  4AA8 26 00 00      mov b, $0
11735  4AAB B0            cmp a, b
11736  4AAC FD 73         slt ; < (signed)
11737  4AAE E4            pop a
11738  4AAF             ; --- END RELATIONAL
11739  4AAF C0 00 00      cmp b, 0
11740  4AB2 C6 CE 4A      je _if182_exit
11741  4AB5             _if182_true:
11742  4AB5             ; damage[i] = 0; 
11743  4AB5 3B 8A 64      mov d, _damage_data ; $damage
11744  4AB8 D7            push a
11745  4AB9 DA            push d
11746  4ABA FA FD FF      lea d, [bp + -3] ; $i
11747  4ABD 2A            mov b, [d]
11748  4ABE E7            pop d
11749  4ABF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11750  4AC3 E4            pop a
11751  4AC4 DA            push d
11752  4AC5 26 00 00      mov b, $0
11753  4AC8 E7            pop d
11754  4AC9 FD 43         mov [d], b
11755  4ACB 0A CE 4A      jmp _if182_exit
11756  4ACE             _if182_exit:
11757  4ACE             _for181_update:
11758  4ACE FA FD FF      lea d, [bp + -3] ; $i
11759  4AD1 2A            mov b, [d]
11760  4AD2 FD 77         inc b
11761  4AD4 FA FD FF      lea d, [bp + -3] ; $i
11762  4AD7 FD 43         mov [d], b
11763  4AD9 FD 7D         dec b
11764  4ADB 0A 83 4A      jmp _for181_cond
11765  4ADE             _for181_exit:
11766  4ADE             ; stardate = stardate + (repair_cost + 5)/10 + 1; 
11767  4ADE 3B A2 64      mov d, _stardate ; $stardate
11768  4AE1 DA            push d
11769  4AE2 3B A2 64      mov d, _stardate ; $stardate
11770  4AE5 2A            mov b, [d]
11771  4AE6             ; --- START TERMS
11772  4AE6 D7            push a
11773  4AE7 11            mov a, b
11774  4AE8 FA FF FF      lea d, [bp + -1] ; $repair_cost
11775  4AEB 2A            mov b, [d]
11776  4AEC             ; --- START TERMS
11777  4AEC D7            push a
11778  4AED 11            mov a, b
11779  4AEE 26 05 00      mov b, $5
11780  4AF1 56            add b, a
11781  4AF2 E4            pop a
11782  4AF3             ; --- END TERMS
11783  4AF3             ; --- START FACTORS
11784  4AF3 D7            push a
11785  4AF4 11            mov a, b
11786  4AF5 26 0A 00      mov b, $a
11787  4AF8 AE            div a, b
11788  4AF9 27            mov b, a
11789  4AFA E4            pop a
11790  4AFB             ; --- END FACTORS
11791  4AFB 56            add b, a
11792  4AFC 11            mov a, b
11793  4AFD 26 01 00      mov b, $1
11794  4B00 56            add b, a
11795  4B01 E4            pop a
11796  4B02             ; --- END TERMS
11797  4B02 E7            pop d
11798  4B03 FD 43         mov [d], b
11799  4B05 0A 08 4B      jmp _if180_exit
11800  4B08             _if180_exit:
11801  4B08             ; return; 
11802  4B08 F9            leave
11803  4B09 09            ret
11804  4B0A 0A 0D 4B      jmp _if178_exit
11805  4B0D             _if178_exit:
11806  4B0D 0A 10 4B      jmp _if175_exit
11807  4B10             _if175_exit:
11808  4B10             ; if (damage[6] < 0) 
11809  4B10             _if183_cond:
11810  4B10 3B 8A 64      mov d, _damage_data ; $damage
11811  4B13 D7            push a
11812  4B14 DA            push d
11813  4B15 26 06 00      mov b, $6
11814  4B18 E7            pop d
11815  4B19 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11816  4B1D E4            pop a
11817  4B1E 2A            mov b, [d]
11818  4B1F             ; --- START RELATIONAL
11819  4B1F D7            push a
11820  4B20 11            mov a, b
11821  4B21 26 00 00      mov b, $0
11822  4B24 B0            cmp a, b
11823  4B25 FD 73         slt ; < (signed)
11824  4B27 E4            pop a
11825  4B28             ; --- END RELATIONAL
11826  4B28 C0 00 00      cmp b, 0
11827  4B2B C6 33 4B      je _if183_exit
11828  4B2E             _if183_true:
11829  4B2E             ; return; 
11830  4B2E F9            leave
11831  4B2F 09            ret
11832  4B30 0A 33 4B      jmp _if183_exit
11833  4B33             _if183_exit:
11834  4B33             ; puts("Device            State of Repair"); 
11835  4B33 26 FC 72      mov b, _s127 ; "Device            State of Repair"
11836  4B36 FD AB         swp b
11837  4B38 D8            push b
11838  4B39 07 BB 17      call puts
11839  4B3C 51 02 00      add sp, 2
11840  4B3F             ; for (i = 1; i <= 8; i++) 
11841  4B3F             _for184_init:
11842  4B3F FA FD FF      lea d, [bp + -3] ; $i
11843  4B42 DA            push d
11844  4B43 26 01 00      mov b, $1
11845  4B46 E7            pop d
11846  4B47 FD 43         mov [d], b
11847  4B49             _for184_cond:
11848  4B49 FA FD FF      lea d, [bp + -3] ; $i
11849  4B4C 2A            mov b, [d]
11850  4B4D             ; --- START RELATIONAL
11851  4B4D D7            push a
11852  4B4E 11            mov a, b
11853  4B4F 26 08 00      mov b, $8
11854  4B52 B0            cmp a, b
11855  4B53 FD 74         sle ; <= (signed)
11856  4B55 E4            pop a
11857  4B56             ; --- END RELATIONAL
11858  4B56 C0 00 00      cmp b, 0
11859  4B59 C6 A4 4B      je _for184_exit
11860  4B5C             _for184_block:
11861  4B5C             ; printf("%-25s%6s\n", get_device_name(i), print100(damage[i])); 
11862  4B5C 3B 8A 64      mov d, _damage_data ; $damage
11863  4B5F D7            push a
11864  4B60 DA            push d
11865  4B61 FA FD FF      lea d, [bp + -3] ; $i
11866  4B64 2A            mov b, [d]
11867  4B65 E7            pop d
11868  4B66 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11869  4B6A E4            pop a
11870  4B6B 2A            mov b, [d]
11871  4B6C FD AB         swp b
11872  4B6E D8            push b
11873  4B6F 07 DD 22      call print100
11874  4B72 51 02 00      add sp, 2
11875  4B75 FD AB         swp b
11876  4B77 D8            push b
11877  4B78 FA FD FF      lea d, [bp + -3] ; $i
11878  4B7B 2A            mov b, [d]
11879  4B7C FD AB         swp b
11880  4B7E D8            push b
11881  4B7F 07 40 60      call get_device_name
11882  4B82 51 02 00      add sp, 2
11883  4B85 FD AB         swp b
11884  4B87 D8            push b
11885  4B88 26 1E 73      mov b, _s128 ; "%-25s%6s\n"
11886  4B8B FD AB         swp b
11887  4B8D D8            push b
11888  4B8E 07 BA 07      call printf
11889  4B91 51 06 00      add sp, 6
11890  4B94             _for184_update:
11891  4B94 FA FD FF      lea d, [bp + -3] ; $i
11892  4B97 2A            mov b, [d]
11893  4B98 FD 77         inc b
11894  4B9A FA FD FF      lea d, [bp + -3] ; $i
11895  4B9D FD 43         mov [d], b
11896  4B9F FD 7D         dec b
11897  4BA1 0A 49 4B      jmp _for184_cond
11898  4BA4             _for184_exit:
11899  4BA4             ; printf("\n"); 
11900  4BA4 26 28 73      mov b, _s129 ; "\n"
11901  4BA7 FD AB         swp b
11902  4BA9 D8            push b
11903  4BAA 07 BA 07      call printf
11904  4BAD 51 02 00      add sp, 2
11905  4BB0 F9            leave
11906  4BB1 09            ret
11907  4BB2             
11908  4BB2             shield_control:
11909  4BB2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11910  4BB5             ; int i; 
11911  4BB5 52 02 00      sub sp, 2
11912  4BB8             ; if (inoperable(7)) 
11913  4BB8             _if185_cond:
11914  4BB8 26 07 00      mov b, $7
11915  4BBB DD            push bl
11916  4BBC 07 6F 23      call inoperable
11917  4BBF 51 01 00      add sp, 1
11918  4BC2 C0 00 00      cmp b, 0
11919  4BC5 C6 CD 4B      je _if185_exit
11920  4BC8             _if185_true:
11921  4BC8             ; return; 
11922  4BC8 F9            leave
11923  4BC9 09            ret
11924  4BCA 0A CD 4B      jmp _if185_exit
11925  4BCD             _if185_exit:
11926  4BCD             ; printf("Energy available = %d\n\n Input number of units to shields: ", energy + shield); 
11927  4BCD 3B C8 63      mov d, _energy ; $energy
11928  4BD0 2A            mov b, [d]
11929  4BD1             ; --- START TERMS
11930  4BD1 D7            push a
11931  4BD2 11            mov a, b
11932  4BD3 3B 83 64      mov d, _shield ; $shield
11933  4BD6 2A            mov b, [d]
11934  4BD7 56            add b, a
11935  4BD8 E4            pop a
11936  4BD9             ; --- END TERMS
11937  4BD9 FD AB         swp b
11938  4BDB D8            push b
11939  4BDC 26 2A 73      mov b, _s130 ; "Energy available = %d\n\n Input number of units to shields: "
11940  4BDF FD AB         swp b
11941  4BE1 D8            push b
11942  4BE2 07 BA 07      call printf
11943  4BE5 51 04 00      add sp, 4
11944  4BE8             ; i = input_int(); 
11945  4BE8 FA FF FF      lea d, [bp + -1] ; $i
11946  4BEB DA            push d
11947  4BEC 07 93 22      call input_int
11948  4BEF E7            pop d
11949  4BF0 FD 43         mov [d], b
11950  4BF2             ; if (i < 0 || shield == i) { 
11951  4BF2             _if186_cond:
11952  4BF2 FA FF FF      lea d, [bp + -1] ; $i
11953  4BF5 2A            mov b, [d]
11954  4BF6             ; --- START RELATIONAL
11955  4BF6 D7            push a
11956  4BF7 11            mov a, b
11957  4BF8 26 00 00      mov b, $0
11958  4BFB B0            cmp a, b
11959  4BFC FD 73         slt ; < (signed)
11960  4BFE E4            pop a
11961  4BFF             ; --- END RELATIONAL
11962  4BFF             ; --- START LOGICAL OR
11963  4BFF D7            push a
11964  4C00 11            mov a, b
11965  4C01 3B 83 64      mov d, _shield ; $shield
11966  4C04 2A            mov b, [d]
11967  4C05             ; --- START RELATIONAL
11968  4C05 D7            push a
11969  4C06 11            mov a, b
11970  4C07 FA FF FF      lea d, [bp + -1] ; $i
11971  4C0A 2A            mov b, [d]
11972  4C0B B0            cmp a, b
11973  4C0C FD 71         seq ; ==
11974  4C0E E4            pop a
11975  4C0F             ; --- END RELATIONAL
11976  4C0F FD A8         sor a, b ; ||
11977  4C11 E4            pop a
11978  4C12             ; --- END LOGICAL OR
11979  4C12 C0 00 00      cmp b, 0
11980  4C15 C6 29 4C      je _if186_exit
11981  4C18             _if186_true:
11982  4C18             ; puts("<Shields Unchanged>\n"); 
11983  4C18 26 65 73      mov b, _s131 ; "<Shields Unchanged>\n"
11984  4C1B FD AB         swp b
11985  4C1D D8            push b
11986  4C1E 07 BB 17      call puts
11987  4C21 51 02 00      add sp, 2
11988  4C24             ; return; 
11989  4C24 F9            leave
11990  4C25 09            ret
11991  4C26 0A 29 4C      jmp _if186_exit
11992  4C29             _if186_exit:
11993  4C29             ; if (i >= energy + shield) { 
11994  4C29             _if187_cond:
11995  4C29 FA FF FF      lea d, [bp + -1] ; $i
11996  4C2C 2A            mov b, [d]
11997  4C2D             ; --- START RELATIONAL
11998  4C2D D7            push a
11999  4C2E 11            mov a, b
12000  4C2F 3B C8 63      mov d, _energy ; $energy
12001  4C32 2A            mov b, [d]
12002  4C33             ; --- START TERMS
12003  4C33 D7            push a
12004  4C34 11            mov a, b
12005  4C35 3B 83 64      mov d, _shield ; $shield
12006  4C38 2A            mov b, [d]
12007  4C39 56            add b, a
12008  4C3A E4            pop a
12009  4C3B             ; --- END TERMS
12010  4C3B B0            cmp a, b
12011  4C3C FD 80         sge ; >=
12012  4C3E E4            pop a
12013  4C3F             ; --- END RELATIONAL
12014  4C3F C0 00 00      cmp b, 0
12015  4C42 C6 54 4C      je _if187_exit
12016  4C45             _if187_true:
12017  4C45             ; puts("Shield Control Reports:\n  This is not the Federation Treasury."); 
12018  4C45 26 7A 73      mov b, _s132 ; "Shield Control Reports:\n  This is not the Federation Treasury."
12019  4C48 FD AB         swp b
12020  4C4A D8            push b
12021  4C4B 07 BB 17      call puts
12022  4C4E 51 02 00      add sp, 2
12023  4C51 0A 54 4C      jmp _if187_exit
12024  4C54             _if187_exit:
12025  4C54             ; energy = energy + shield - i; 
12026  4C54 3B C8 63      mov d, _energy ; $energy
12027  4C57 DA            push d
12028  4C58 3B C8 63      mov d, _energy ; $energy
12029  4C5B 2A            mov b, [d]
12030  4C5C             ; --- START TERMS
12031  4C5C D7            push a
12032  4C5D 11            mov a, b
12033  4C5E 3B 83 64      mov d, _shield ; $shield
12034  4C61 2A            mov b, [d]
12035  4C62 56            add b, a
12036  4C63 11            mov a, b
12037  4C64 FA FF FF      lea d, [bp + -1] ; $i
12038  4C67 2A            mov b, [d]
12039  4C68 60            sub a, b
12040  4C69 27            mov b, a
12041  4C6A E4            pop a
12042  4C6B             ; --- END TERMS
12043  4C6B E7            pop d
12044  4C6C FD 43         mov [d], b
12045  4C6E             ; shield = i; 
12046  4C6E 3B 83 64      mov d, _shield ; $shield
12047  4C71 DA            push d
12048  4C72 FA FF FF      lea d, [bp + -1] ; $i
12049  4C75 2A            mov b, [d]
12050  4C76 E7            pop d
12051  4C77 FD 43         mov [d], b
12052  4C79             ; printf("Deflector Control Room report:\n  Shields now at %d units per your command.\n\n", shield); 
12053  4C79 3B 83 64      mov d, _shield ; $shield
12054  4C7C 2A            mov b, [d]
12055  4C7D FD AB         swp b
12056  4C7F D8            push b
12057  4C80 26 B9 73      mov b, _s133 ; "Deflector Control Room report:\n  Shields now at %d units per your command.\n\n"
12058  4C83 FD AB         swp b
12059  4C85 D8            push b
12060  4C86 07 BA 07      call printf
12061  4C89 51 04 00      add sp, 4
12062  4C8C F9            leave
12063  4C8D 09            ret
12064  4C8E             
12065  4C8E             library_computer:
12066  4C8E F8 00 00      enter 0 ; (push bp; mov bp, sp)
12067  4C91             ; if (inoperable(8)) 
12068  4C91             _if188_cond:
12069  4C91 26 08 00      mov b, $8
12070  4C94 DD            push bl
12071  4C95 07 6F 23      call inoperable
12072  4C98 51 01 00      add sp, 1
12073  4C9B C0 00 00      cmp b, 0
12074  4C9E C6 A6 4C      je _if188_exit
12075  4CA1             _if188_true:
12076  4CA1             ; return; 
12077  4CA1 F9            leave
12078  4CA2 09            ret
12079  4CA3 0A A6 4C      jmp _if188_exit
12080  4CA6             _if188_exit:
12081  4CA6             ; puts("Computer active and awating command: "); 
12082  4CA6 26 06 74      mov b, _s134 ; "Computer active and awating command: "
12083  4CA9 FD AB         swp b
12084  4CAB D8            push b
12085  4CAC 07 BB 17      call puts
12086  4CAF 51 02 00      add sp, 2
12087  4CB2             ; switch(input_int()) { 
12088  4CB2             _switch189_expr:
12089  4CB2 07 93 22      call input_int
12090  4CB5             _switch189_comparisons:
12091  4CB5 C0 FF FF      cmp b, -1
12092  4CB8 C6 E5 4C      je _switch189_case0
12093  4CBB C0 00 00      cmp b, 0
12094  4CBE C6 E8 4C      je _switch189_case1
12095  4CC1 C0 01 00      cmp b, 1
12096  4CC4 C6 EE 4C      je _switch189_case2
12097  4CC7 C0 02 00      cmp b, 2
12098  4CCA C6 F4 4C      je _switch189_case3
12099  4CCD C0 03 00      cmp b, 3
12100  4CD0 C6 FA 4C      je _switch189_case4
12101  4CD3 C0 04 00      cmp b, 4
12102  4CD6 C6 00 4D      je _switch189_case5
12103  4CD9 C0 05 00      cmp b, 5
12104  4CDC C6 06 4D      je _switch189_case6
12105  4CDF 0A 0C 4D      jmp _switch189_default
12106  4CE2 0A 60 4D      jmp _switch189_exit
12107  4CE5             _switch189_case0:
12108  4CE5             ; break; 
12109  4CE5 0A 60 4D      jmp _switch189_exit ; case break
12110  4CE8             _switch189_case1:
12111  4CE8             ; galactic_record(); 
12112  4CE8 07 62 4D      call galactic_record
12113  4CEB             ; break; 
12114  4CEB 0A 60 4D      jmp _switch189_exit ; case break
12115  4CEE             _switch189_case2:
12116  4CEE             ; status_report(); 
12117  4CEE 07 8A 4E      call status_report
12118  4CF1             ; break; 
12119  4CF1 0A 60 4D      jmp _switch189_exit ; case break
12120  4CF4             _switch189_case3:
12121  4CF4             ; torpedo_data(); 
12122  4CF4 07 A3 4F      call torpedo_data
12123  4CF7             ; break; 
12124  4CF7 0A 60 4D      jmp _switch189_exit ; case break
12125  4CFA             _switch189_case4:
12126  4CFA             ; nav_data(); 
12127  4CFA 07 AF 50      call nav_data
12128  4CFD             ; break; 
12129  4CFD 0A 60 4D      jmp _switch189_exit ; case break
12130  4D00             _switch189_case5:
12131  4D00             ; dirdist_calc(); 
12132  4D00 07 12 51      call dirdist_calc
12133  4D03             ; break; 
12134  4D03 0A 60 4D      jmp _switch189_exit ; case break
12135  4D06             _switch189_case6:
12136  4D06             ; galaxy_map(); 
12137  4D06 07 97 52      call galaxy_map
12138  4D09             ; break; 
12139  4D09 0A 60 4D      jmp _switch189_exit ; case break
12140  4D0C             _switch189_default:
12141  4D0C             ; puts("Functions available from Library-Computer:\n\n"); 
12142  4D0C 26 2C 74      mov b, _s135 ; "Functions available from Library-Computer:\n\n"
12143  4D0F FD AB         swp b
12144  4D11 D8            push b
12145  4D12 07 BB 17      call puts
12146  4D15 51 02 00      add sp, 2
12147  4D18             ; puts("   0 = Cumulative Galactic Record\n"); 
12148  4D18 26 59 74      mov b, _s136 ; "   0 = Cumulative Galactic Record\n"
12149  4D1B FD AB         swp b
12150  4D1D D8            push b
12151  4D1E 07 BB 17      call puts
12152  4D21 51 02 00      add sp, 2
12153  4D24             ; puts("   1 = Status Report\n"); 
12154  4D24 26 7C 74      mov b, _s137 ; "   1 = Status Report\n"
12155  4D27 FD AB         swp b
12156  4D29 D8            push b
12157  4D2A 07 BB 17      call puts
12158  4D2D 51 02 00      add sp, 2
12159  4D30             ; puts("   2 = Photon Torpedo Data\n"); 
12160  4D30 26 92 74      mov b, _s138 ; "   2 = Photon Torpedo Data\n"
12161  4D33 FD AB         swp b
12162  4D35 D8            push b
12163  4D36 07 BB 17      call puts
12164  4D39 51 02 00      add sp, 2
12165  4D3C             ; puts("   3 = Starbase Nav Data\n"); 
12166  4D3C 26 AE 74      mov b, _s139 ; "   3 = Starbase Nav Data\n"
12167  4D3F FD AB         swp b
12168  4D41 D8            push b
12169  4D42 07 BB 17      call puts
12170  4D45 51 02 00      add sp, 2
12171  4D48             ; puts("   4 = Direction/Distance Calculator\n"); 
12172  4D48 26 C8 74      mov b, _s140 ; "   4 = Direction/Distance Calculator\n"
12173  4D4B FD AB         swp b
12174  4D4D D8            push b
12175  4D4E 07 BB 17      call puts
12176  4D51 51 02 00      add sp, 2
12177  4D54             ; puts("   5 = Galaxy Region Name Map\n"); 
12178  4D54 26 EE 74      mov b, _s141 ; "   5 = Galaxy Region Name Map\n"
12179  4D57 FD AB         swp b
12180  4D59 D8            push b
12181  4D5A 07 BB 17      call puts
12182  4D5D 51 02 00      add sp, 2
12183  4D60             _switch189_exit:
12184  4D60 F9            leave
12185  4D61 09            ret
12186  4D62             
12187  4D62             galactic_record:
12188  4D62 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12189  4D65             ; int i, j; 
12190  4D65 52 02 00      sub sp, 2
12191  4D68 52 02 00      sub sp, 2
12192  4D6B             ; printf("\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", quad_y, quad_x); 
12193  4D6B 3B 81 64      mov d, _quad_x ; $quad_x
12194  4D6E 2A            mov b, [d]
12195  4D6F FD AB         swp b
12196  4D71 D8            push b
12197  4D72 3B 7F 64      mov d, _quad_y ; $quad_y
12198  4D75 2A            mov b, [d]
12199  4D76 FD AB         swp b
12200  4D78 D8            push b
12201  4D79 26 0D 75      mov b, _s142 ; "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n"
12202  4D7C FD AB         swp b
12203  4D7E D8            push b
12204  4D7F 07 BA 07      call printf
12205  4D82 51 06 00      add sp, 6
12206  4D85             ; puts("     1     2     3     4     5     6     7     8"); 
12207  4D85 26 42 75      mov b, _s143 ; "     1     2     3     4     5     6     7     8"
12208  4D88 FD AB         swp b
12209  4D8A D8            push b
12210  4D8B 07 BB 17      call puts
12211  4D8E 51 02 00      add sp, 2
12212  4D91             ; for (i = 1; i <= 8; i++) { 
12213  4D91             _for190_init:
12214  4D91 FA FF FF      lea d, [bp + -1] ; $i
12215  4D94 DA            push d
12216  4D95 26 01 00      mov b, $1
12217  4D98 E7            pop d
12218  4D99 FD 43         mov [d], b
12219  4D9B             _for190_cond:
12220  4D9B FA FF FF      lea d, [bp + -1] ; $i
12221  4D9E 2A            mov b, [d]
12222  4D9F             ; --- START RELATIONAL
12223  4D9F D7            push a
12224  4DA0 11            mov a, b
12225  4DA1 26 08 00      mov b, $8
12226  4DA4 B0            cmp a, b
12227  4DA5 FD 74         sle ; <= (signed)
12228  4DA7 E4            pop a
12229  4DA8             ; --- END RELATIONAL
12230  4DA8 C0 00 00      cmp b, 0
12231  4DAB C6 75 4E      je _for190_exit
12232  4DAE             _for190_block:
12233  4DAE             ; printf("%s%d", gr_1, i); 
12234  4DAE FA FF FF      lea d, [bp + -1] ; $i
12235  4DB1 2A            mov b, [d]
12236  4DB2 FD AB         swp b
12237  4DB4 D8            push b
12238  4DB5 3B 28 66      mov d, _gr_1 ; $gr_1
12239  4DB8 2A            mov b, [d]
12240  4DB9 FD AB         swp b
12241  4DBB D8            push b
12242  4DBC 26 73 75      mov b, _s144 ; "%s%d"
12243  4DBF FD AB         swp b
12244  4DC1 D8            push b
12245  4DC2 07 BA 07      call printf
12246  4DC5 51 06 00      add sp, 6
12247  4DC8             ; for (j = 1; j <= 8; j++) { 
12248  4DC8             _for191_init:
12249  4DC8 FA FD FF      lea d, [bp + -3] ; $j
12250  4DCB DA            push d
12251  4DCC 26 01 00      mov b, $1
12252  4DCF E7            pop d
12253  4DD0 FD 43         mov [d], b
12254  4DD2             _for191_cond:
12255  4DD2 FA FD FF      lea d, [bp + -3] ; $j
12256  4DD5 2A            mov b, [d]
12257  4DD6             ; --- START RELATIONAL
12258  4DD6 D7            push a
12259  4DD7 11            mov a, b
12260  4DD8 26 08 00      mov b, $8
12261  4DDB B0            cmp a, b
12262  4DDC FD 74         sle ; <= (signed)
12263  4DDE E4            pop a
12264  4DDF             ; --- END RELATIONAL
12265  4DDF C0 00 00      cmp b, 0
12266  4DE2 C6 5B 4E      je _for191_exit
12267  4DE5             _for191_block:
12268  4DE5             ; printf("   "); 
12269  4DE5 26 99 67      mov b, _s25 ; "   "
12270  4DE8 FD AB         swp b
12271  4DEA D8            push b
12272  4DEB 07 BA 07      call printf
12273  4DEE 51 02 00      add sp, 2
12274  4DF1             ; if (map[i][j] &   0x1000		/* Set if this sector was mapped */          ) 
12275  4DF1             _if192_cond:
12276  4DF1 3B CC 63      mov d, _map_data ; $map
12277  4DF4 D7            push a
12278  4DF5 DA            push d
12279  4DF6 FA FF FF      lea d, [bp + -1] ; $i
12280  4DF9 2A            mov b, [d]
12281  4DFA E7            pop d
12282  4DFB FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
12283  4DFF DA            push d
12284  4E00 FA FD FF      lea d, [bp + -3] ; $j
12285  4E03 2A            mov b, [d]
12286  4E04 E7            pop d
12287  4E05 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12288  4E09 E4            pop a
12289  4E0A 2A            mov b, [d]
12290  4E0B D7            push a
12291  4E0C 11            mov a, b
12292  4E0D 26 00 10      mov b, $1000
12293  4E10 FD 92         and b, a ; &
12294  4E12 E4            pop a
12295  4E13 C0 00 00      cmp b, 0
12296  4E16 C6 3F 4E      je _if192_else
12297  4E19             _if192_true:
12298  4E19             ; putbcd(map[i][j]); 
12299  4E19 3B CC 63      mov d, _map_data ; $map
12300  4E1C D7            push a
12301  4E1D DA            push d
12302  4E1E FA FF FF      lea d, [bp + -1] ; $i
12303  4E21 2A            mov b, [d]
12304  4E22 E7            pop d
12305  4E23 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
12306  4E27 DA            push d
12307  4E28 FA FD FF      lea d, [bp + -3] ; $j
12308  4E2B 2A            mov b, [d]
12309  4E2C E7            pop d
12310  4E2D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12311  4E31 E4            pop a
12312  4E32 2A            mov b, [d]
12313  4E33 FD AB         swp b
12314  4E35 D8            push b
12315  4E36 07 E3 3C      call putbcd
12316  4E39 51 02 00      add sp, 2
12317  4E3C 0A 4B 4E      jmp _if192_exit
12318  4E3F             _if192_else:
12319  4E3F             ; printf("***"); 
12320  4E3F 26 65 6F      mov b, _s101 ; "***"
12321  4E42 FD AB         swp b
12322  4E44 D8            push b
12323  4E45 07 BA 07      call printf
12324  4E48 51 02 00      add sp, 2
12325  4E4B             _if192_exit:
12326  4E4B             _for191_update:
12327  4E4B FA FD FF      lea d, [bp + -3] ; $j
12328  4E4E 2A            mov b, [d]
12329  4E4F FD 77         inc b
12330  4E51 FA FD FF      lea d, [bp + -3] ; $j
12331  4E54 FD 43         mov [d], b
12332  4E56 FD 7D         dec b
12333  4E58 0A D2 4D      jmp _for191_cond
12334  4E5B             _for191_exit:
12335  4E5B             ; putchar('\n'); 
12336  4E5B 26 0A 00      mov b, $a
12337  4E5E DD            push bl
12338  4E5F 07 85 17      call putchar
12339  4E62 51 01 00      add sp, 1
12340  4E65             _for190_update:
12341  4E65 FA FF FF      lea d, [bp + -1] ; $i
12342  4E68 2A            mov b, [d]
12343  4E69 FD 77         inc b
12344  4E6B FA FF FF      lea d, [bp + -1] ; $i
12345  4E6E FD 43         mov [d], b
12346  4E70 FD 7D         dec b
12347  4E72 0A 9B 4D      jmp _for190_cond
12348  4E75             _for190_exit:
12349  4E75             ; printf("%s\n", gr_1); 
12350  4E75 3B 28 66      mov d, _gr_1 ; $gr_1
12351  4E78 2A            mov b, [d]
12352  4E79 FD AB         swp b
12353  4E7B D8            push b
12354  4E7C 26 6C 6F      mov b, _s103 ; "%s\n"
12355  4E7F FD AB         swp b
12356  4E81 D8            push b
12357  4E82 07 BA 07      call printf
12358  4E85 51 04 00      add sp, 4
12359  4E88 F9            leave
12360  4E89 09            ret
12361  4E8A             
12362  4E8A             status_report:
12363  4E8A F8 00 00      enter 0 ; (push bp; mov bp, sp)
12364  4E8D             ; char *plural = str_s + 1; 
12365  4E8D 52 02 00      sub sp, 2
12366  4E90             ; --- START LOCAL VAR INITIALIZATION
12367  4E90 FA FF FF      lea d, [bp + -1] ; $plural
12368  4E93 DA            push d
12369  4E94 3B 2C 66      mov d, _str_s ; $str_s
12370  4E97 2A            mov b, [d]
12371  4E98             ; --- START TERMS
12372  4E98 D7            push a
12373  4E99 11            mov a, b
12374  4E9A 26 01 00      mov b, $1
12375  4E9D 56            add b, a
12376  4E9E E4            pop a
12377  4E9F             ; --- END TERMS
12378  4E9F E7            pop d
12379  4EA0 FD 43         mov [d], b
12380  4EA2             ; --- END LOCAL VAR INITIALIZATION
12381  4EA2             ; unsigned int        left = TO_FIXED(time_start + time_up) - stardate; 
12382  4EA2 52 02 00      sub sp, 2
12383  4EA5             ; --- START LOCAL VAR INITIALIZATION
12384  4EA5 FA FD FF      lea d, [bp + -3] ; $left
12385  4EA8 DA            push d
12386  4EA9 3B 86 64      mov d, _time_start ; $time_start
12387  4EAC 2A            mov b, [d]
12388  4EAD             ; --- START TERMS
12389  4EAD D7            push a
12390  4EAE 11            mov a, b
12391  4EAF 3B 88 64      mov d, _time_up ; $time_up
12392  4EB2 2A            mov b, [d]
12393  4EB3 56            add b, a
12394  4EB4 E4            pop a
12395  4EB5             ; --- END TERMS
12396  4EB5 FD AB         swp b
12397  4EB7 D8            push b
12398  4EB8 07 A5 1F      call TO_FIXED
12399  4EBB 51 02 00      add sp, 2
12400  4EBE             ; --- START TERMS
12401  4EBE D7            push a
12402  4EBF 11            mov a, b
12403  4EC0 3B A2 64      mov d, _stardate ; $stardate
12404  4EC3 2A            mov b, [d]
12405  4EC4 60            sub a, b
12406  4EC5 27            mov b, a
12407  4EC6 E4            pop a
12408  4EC7             ; --- END TERMS
12409  4EC7 E7            pop d
12410  4EC8 FD 43         mov [d], b
12411  4ECA             ; --- END LOCAL VAR INITIALIZATION
12412  4ECA             ; puts("   Status Report:\n"); 
12413  4ECA 26 78 75      mov b, _s145 ; "   Status Report:\n"
12414  4ECD FD AB         swp b
12415  4ECF D8            push b
12416  4ED0 07 BB 17      call puts
12417  4ED3 51 02 00      add sp, 2
12418  4ED6             ; if (klingons_left > 1) 
12419  4ED6             _if193_cond:
12420  4ED6 3B 7C 64      mov d, _klingons_left ; $klingons_left
12421  4ED9 32            mov bl, [d]
12422  4EDA A7 00         mov bh, 0
12423  4EDC             ; --- START RELATIONAL
12424  4EDC D7            push a
12425  4EDD 11            mov a, b
12426  4EDE 26 01 00      mov b, $1
12427  4EE1 B0            cmp a, b
12428  4EE2 FD 81         sgu ; > (unsigned)
12429  4EE4 E4            pop a
12430  4EE5             ; --- END RELATIONAL
12431  4EE5 C0 00 00      cmp b, 0
12432  4EE8 C6 F9 4E      je _if193_exit
12433  4EEB             _if193_true:
12434  4EEB             ; plural = str_s; 
12435  4EEB FA FF FF      lea d, [bp + -1] ; $plural
12436  4EEE DA            push d
12437  4EEF 3B 2C 66      mov d, _str_s ; $str_s
12438  4EF2 2A            mov b, [d]
12439  4EF3 E7            pop d
12440  4EF4 FD 43         mov [d], b
12441  4EF6 0A F9 4E      jmp _if193_exit
12442  4EF9             _if193_exit:
12443  4EF9             ; printf("Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 
12444  4EF9 FA FD FF      lea d, [bp + -3] ; $left
12445  4EFC 2A            mov b, [d]
12446  4EFD             ; --- START FACTORS
12447  4EFD D7            push a
12448  4EFE 11            mov a, b
12449  4EFF 26 0A 00      mov b, $a
12450  4F02 AE            div a, b ; 
12451  4F03 11            mov a, b
12452  4F04 27            mov b, a
12453  4F05 E4            pop a
12454  4F06             ; --- END FACTORS
12455  4F06 FD AB         swp b
12456  4F08 D8            push b
12457  4F09 FA FD FF      lea d, [bp + -3] ; $left
12458  4F0C 2A            mov b, [d]
12459  4F0D FD AB         swp b
12460  4F0F D8            push b
12461  4F10 07 B7 1F      call FROM_FIXED
12462  4F13 51 02 00      add sp, 2
12463  4F16 FD AB         swp b
12464  4F18 D8            push b
12465  4F19 3B 7C 64      mov d, _klingons_left ; $klingons_left
12466  4F1C 32            mov bl, [d]
12467  4F1D A7 00         mov bh, 0
12468  4F1F DD            push bl
12469  4F20 FA FF FF      lea d, [bp + -1] ; $plural
12470  4F23 2A            mov b, [d]
12471  4F24 FD AB         swp b
12472  4F26 D8            push b
12473  4F27 26 8B 75      mov b, _s146 ; "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n"
12474  4F2A FD AB         swp b
12475  4F2C D8            push b
12476  4F2D 07 BA 07      call printf
12477  4F30 51 09 00      add sp, 9
12478  4F33             ; if (starbases_left < 1) { 
12479  4F33             _if194_cond:
12480  4F33 3B A6 63      mov d, _starbases_left ; $starbases_left
12481  4F36 32            mov bl, [d]
12482  4F37 A7 00         mov bh, 0
12483  4F39             ; --- START RELATIONAL
12484  4F39 D7            push a
12485  4F3A 11            mov a, b
12486  4F3B 26 01 00      mov b, $1
12487  4F3E B0            cmp a, b
12488  4F3F FD 73         slt ; < (signed)
12489  4F41 E4            pop a
12490  4F42             ; --- END RELATIONAL
12491  4F42 C0 00 00      cmp b, 0
12492  4F45 C6 57 4F      je _if194_else
12493  4F48             _if194_true:
12494  4F48             ; puts("Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"); 
12495  4F48 26 CD 75      mov b, _s147 ; "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"
12496  4F4B FD AB         swp b
12497  4F4D D8            push b
12498  4F4E 07 BB 17      call puts
12499  4F51 51 02 00      add sp, 2
12500  4F54 0A A1 4F      jmp _if194_exit
12501  4F57             _if194_else:
12502  4F57             ; plural = str_s; 
12503  4F57 FA FF FF      lea d, [bp + -1] ; $plural
12504  4F5A DA            push d
12505  4F5B 3B 2C 66      mov d, _str_s ; $str_s
12506  4F5E 2A            mov b, [d]
12507  4F5F E7            pop d
12508  4F60 FD 43         mov [d], b
12509  4F62             ; if (starbases_left < 2) 
12510  4F62             _if195_cond:
12511  4F62 3B A6 63      mov d, _starbases_left ; $starbases_left
12512  4F65 32            mov bl, [d]
12513  4F66 A7 00         mov bh, 0
12514  4F68             ; --- START RELATIONAL
12515  4F68 D7            push a
12516  4F69 11            mov a, b
12517  4F6A 26 02 00      mov b, $2
12518  4F6D B0            cmp a, b
12519  4F6E FD 73         slt ; < (signed)
12520  4F70 E4            pop a
12521  4F71             ; --- END RELATIONAL
12522  4F71 C0 00 00      cmp b, 0
12523  4F74 C6 87 4F      je _if195_exit
12524  4F77             _if195_true:
12525  4F77             ; plural++; 
12526  4F77 FA FF FF      lea d, [bp + -1] ; $plural
12527  4F7A 2A            mov b, [d]
12528  4F7B FD 77         inc b
12529  4F7D FA FF FF      lea d, [bp + -1] ; $plural
12530  4F80 FD 43         mov [d], b
12531  4F82 FD 7D         dec b
12532  4F84 0A 87 4F      jmp _if195_exit
12533  4F87             _if195_exit:
12534  4F87             ; printf("The Federation is maintaining %d starbase%s in the galaxy\n\n", starbases_left, plural); 
12535  4F87 FA FF FF      lea d, [bp + -1] ; $plural
12536  4F8A 2A            mov b, [d]
12537  4F8B FD AB         swp b
12538  4F8D D8            push b
12539  4F8E 3B A6 63      mov d, _starbases_left ; $starbases_left
12540  4F91 32            mov bl, [d]
12541  4F92 A7 00         mov bh, 0
12542  4F94 DD            push bl
12543  4F95 26 24 76      mov b, _s148 ; "The Federation is maintaining %d starbase%s in the galaxy\n\n"
12544  4F98 FD AB         swp b
12545  4F9A D8            push b
12546  4F9B 07 BA 07      call printf
12547  4F9E 51 05 00      add sp, 5
12548  4FA1             _if194_exit:
12549  4FA1 F9            leave
12550  4FA2 09            ret
12551  4FA3             
12552  4FA3             torpedo_data:
12553  4FA3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12554  4FA6             ; int i; 
12555  4FA6 52 02 00      sub sp, 2
12556  4FA9             ; const char *plural = str_s + 1; 
12557  4FA9 52 02 00      sub sp, 2
12558  4FAC             ; --- START LOCAL VAR INITIALIZATION
12559  4FAC FA FD FF      lea d, [bp + -3] ; $plural
12560  4FAF DA            push d
12561  4FB0 3B 2C 66      mov d, _str_s ; $str_s
12562  4FB3 2A            mov b, [d]
12563  4FB4             ; --- START TERMS
12564  4FB4 D7            push a
12565  4FB5 11            mov a, b
12566  4FB6 26 01 00      mov b, $1
12567  4FB9 56            add b, a
12568  4FBA E4            pop a
12569  4FBB             ; --- END TERMS
12570  4FBB E7            pop d
12571  4FBC FD 43         mov [d], b
12572  4FBE             ; --- END LOCAL VAR INITIALIZATION
12573  4FBE             ; struct klingon *k; 
12574  4FBE 52 02 00      sub sp, 2
12575  4FC1             ; if (no_klingon()) 
12576  4FC1             _if196_cond:
12577  4FC1 07 CF 3E      call no_klingon
12578  4FC4 C0 00 00      cmp b, 0
12579  4FC7 C6 CF 4F      je _if196_exit
12580  4FCA             _if196_true:
12581  4FCA             ; return; 
12582  4FCA F9            leave
12583  4FCB 09            ret
12584  4FCC 0A CF 4F      jmp _if196_exit
12585  4FCF             _if196_exit:
12586  4FCF             ; if (klingons > 1) 
12587  4FCF             _if197_cond:
12588  4FCF 3B 7A 64      mov d, _klingons ; $klingons
12589  4FD2 32            mov bl, [d]
12590  4FD3 A7 00         mov bh, 0
12591  4FD5             ; --- START RELATIONAL
12592  4FD5 D7            push a
12593  4FD6 11            mov a, b
12594  4FD7 26 01 00      mov b, $1
12595  4FDA B0            cmp a, b
12596  4FDB FD 81         sgu ; > (unsigned)
12597  4FDD E4            pop a
12598  4FDE             ; --- END RELATIONAL
12599  4FDE C0 00 00      cmp b, 0
12600  4FE1 C6 F4 4F      je _if197_exit
12601  4FE4             _if197_true:
12602  4FE4             ; plural--; 
12603  4FE4 FA FD FF      lea d, [bp + -3] ; $plural
12604  4FE7 2A            mov b, [d]
12605  4FE8 FD 7D         dec b
12606  4FEA FA FD FF      lea d, [bp + -3] ; $plural
12607  4FED FD 43         mov [d], b
12608  4FEF FD 77         inc b
12609  4FF1 0A F4 4F      jmp _if197_exit
12610  4FF4             _if197_exit:
12611  4FF4             ; printf("From Enterprise to Klingon battlecriuser%s:\n\n", plural); 
12612  4FF4 FA FD FF      lea d, [bp + -3] ; $plural
12613  4FF7 2A            mov b, [d]
12614  4FF8 FD AB         swp b
12615  4FFA D8            push b
12616  4FFB 26 60 76      mov b, _s149 ; "From Enterprise to Klingon battlecriuser%s:\n\n"
12617  4FFE FD AB         swp b
12618  5000 D8            push b
12619  5001 07 BA 07      call printf
12620  5004 51 04 00      add sp, 4
12621  5007             ; k = kdata; 
12622  5007 FA FB FF      lea d, [bp + -5] ; $k
12623  500A DA            push d
12624  500B 3B 6E 64      mov d, _kdata_data ; $kdata
12625  500E 2D            mov b, d
12626  500F E7            pop d
12627  5010 FD 43         mov [d], b
12628  5012             ; for (i = 0; i <= 2; i++) { 
12629  5012             _for198_init:
12630  5012 FA FF FF      lea d, [bp + -1] ; $i
12631  5015 DA            push d
12632  5016 26 00 00      mov b, $0
12633  5019 E7            pop d
12634  501A FD 43         mov [d], b
12635  501C             _for198_cond:
12636  501C FA FF FF      lea d, [bp + -1] ; $i
12637  501F 2A            mov b, [d]
12638  5020             ; --- START RELATIONAL
12639  5020 D7            push a
12640  5021 11            mov a, b
12641  5022 26 02 00      mov b, $2
12642  5025 B0            cmp a, b
12643  5026 FD 74         sle ; <= (signed)
12644  5028 E4            pop a
12645  5029             ; --- END RELATIONAL
12646  5029 C0 00 00      cmp b, 0
12647  502C C6 AD 50      je _for198_exit
12648  502F             _for198_block:
12649  502F             ; if (k->energy > 0) { 
12650  502F             _if199_cond:
12651  502F FA FB FF      lea d, [bp + -5] ; $k
12652  5032 FD 2A         mov d, [d]
12653  5034 58 02 00      add d, 2
12654  5037 2A            mov b, [d]
12655  5038             ; --- START RELATIONAL
12656  5038 D7            push a
12657  5039 11            mov a, b
12658  503A 26 00 00      mov b, $0
12659  503D B0            cmp a, b
12660  503E FD 7F         sgt ; >
12661  5040 E4            pop a
12662  5041             ; --- END RELATIONAL
12663  5041 C0 00 00      cmp b, 0
12664  5044 C6 8C 50      je _if199_exit
12665  5047             _if199_true:
12666  5047             ; compute_vector(TO_FIXED00(k->y), 
12667  5047 3B A0 64      mov d, _ship_x ; $ship_x
12668  504A 2A            mov b, [d]
12669  504B FD AB         swp b
12670  504D D8            push b
12671  504E 3B 9E 64      mov d, _ship_y ; $ship_y
12672  5051 2A            mov b, [d]
12673  5052 FD AB         swp b
12674  5054 D8            push b
12675  5055 FA FB FF      lea d, [bp + -5] ; $k
12676  5058 FD 2A         mov d, [d]
12677  505A 58 01 00      add d, 1
12678  505D 32            mov bl, [d]
12679  505E A7 00         mov bh, 0
12680  5060 FD AB         swp b
12681  5062 D8            push b
12682  5063 07 C8 1F      call TO_FIXED00
12683  5066 51 02 00      add sp, 2
12684  5069 FD AB         swp b
12685  506B D8            push b
12686  506C FA FB FF      lea d, [bp + -5] ; $k
12687  506F FD 2A         mov d, [d]
12688  5071 58 00 00      add d, 0
12689  5074 32            mov bl, [d]
12690  5075 A7 00         mov bh, 0
12691  5077 FD AB         swp b
12692  5079 D8            push b
12693  507A 07 C8 1F      call TO_FIXED00
12694  507D 51 02 00      add sp, 2
12695  5080 FD AB         swp b
12696  5082 D8            push b
12697  5083 07 6F 54      call compute_vector
12698  5086 51 08 00      add sp, 8
12699  5089 0A 8C 50      jmp _if199_exit
12700  508C             _if199_exit:
12701  508C             ; k++; 
12702  508C FA FB FF      lea d, [bp + -5] ; $k
12703  508F 2A            mov b, [d]
12704  5090 FD 77         inc b
12705  5092 FD 77         inc b
12706  5094 FA FB FF      lea d, [bp + -5] ; $k
12707  5097 FD 43         mov [d], b
12708  5099 FD 7D         dec b
12709  509B FD 7D         dec b
12710  509D             _for198_update:
12711  509D FA FF FF      lea d, [bp + -1] ; $i
12712  50A0 2A            mov b, [d]
12713  50A1 FD 77         inc b
12714  50A3 FA FF FF      lea d, [bp + -1] ; $i
12715  50A6 FD 43         mov [d], b
12716  50A8 FD 7D         dec b
12717  50AA 0A 1C 50      jmp _for198_cond
12718  50AD             _for198_exit:
12719  50AD F9            leave
12720  50AE 09            ret
12721  50AF             
12722  50AF             nav_data:
12723  50AF F8 00 00      enter 0 ; (push bp; mov bp, sp)
12724  50B2             ; if (starbases <= 0) { 
12725  50B2             _if200_cond:
12726  50B2 3B A3 63      mov d, _starbases ; $starbases
12727  50B5 32            mov bl, [d]
12728  50B6 A7 00         mov bh, 0
12729  50B8             ; --- START RELATIONAL
12730  50B8 D7            push a
12731  50B9 11            mov a, b
12732  50BA 26 00 00      mov b, $0
12733  50BD B0            cmp a, b
12734  50BE FD 74         sle ; <= (signed)
12735  50C0 E4            pop a
12736  50C1             ; --- END RELATIONAL
12737  50C1 C0 00 00      cmp b, 0
12738  50C4 C6 D8 50      je _if200_exit
12739  50C7             _if200_true:
12740  50C7             ; puts("Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n"); 
12741  50C7 26 8E 76      mov b, _s150 ; "Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n"
12742  50CA FD AB         swp b
12743  50CC D8            push b
12744  50CD 07 BB 17      call puts
12745  50D0 51 02 00      add sp, 2
12746  50D3             ; return; 
12747  50D3 F9            leave
12748  50D4 09            ret
12749  50D5 0A D8 50      jmp _if200_exit
12750  50D8             _if200_exit:
12751  50D8             ; compute_vector(TO_FIXED00(base_y), TO_FIXED00(base_x), ship_y, ship_x); 
12752  50D8 3B A0 64      mov d, _ship_x ; $ship_x
12753  50DB 2A            mov b, [d]
12754  50DC FD AB         swp b
12755  50DE D8            push b
12756  50DF 3B 9E 64      mov d, _ship_y ; $ship_y
12757  50E2 2A            mov b, [d]
12758  50E3 FD AB         swp b
12759  50E5 D8            push b
12760  50E6 3B A5 63      mov d, _base_x ; $base_x
12761  50E9 32            mov bl, [d]
12762  50EA A7 00         mov bh, 0
12763  50EC FD AB         swp b
12764  50EE D8            push b
12765  50EF 07 C8 1F      call TO_FIXED00
12766  50F2 51 02 00      add sp, 2
12767  50F5 FD AB         swp b
12768  50F7 D8            push b
12769  50F8 3B A4 63      mov d, _base_y ; $base_y
12770  50FB 32            mov bl, [d]
12771  50FC A7 00         mov bh, 0
12772  50FE FD AB         swp b
12773  5100 D8            push b
12774  5101 07 C8 1F      call TO_FIXED00
12775  5104 51 02 00      add sp, 2
12776  5107 FD AB         swp b
12777  5109 D8            push b
12778  510A 07 6F 54      call compute_vector
12779  510D 51 08 00      add sp, 8
12780  5110 F9            leave
12781  5111 09            ret
12782  5112             
12783  5112             dirdist_calc:
12784  5112 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12785  5115             ; int       c1, a, w1, x; 
12786  5115 52 02 00      sub sp, 2
12787  5118 52 02 00      sub sp, 2
12788  511B 52 02 00      sub sp, 2
12789  511E 52 02 00      sub sp, 2
12790  5121             ; printf("Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 
12791  5121 3B A0 64      mov d, _ship_x ; $ship_x
12792  5124 2A            mov b, [d]
12793  5125 FD AB         swp b
12794  5127 D8            push b
12795  5128 07 DA 1F      call FROM_FIXED00
12796  512B 51 02 00      add sp, 2
12797  512E FD AB         swp b
12798  5130 D8            push b
12799  5131 3B 9E 64      mov d, _ship_y ; $ship_y
12800  5134 2A            mov b, [d]
12801  5135 FD AB         swp b
12802  5137 D8            push b
12803  5138 07 DA 1F      call FROM_FIXED00
12804  513B 51 02 00      add sp, 2
12805  513E FD AB         swp b
12806  5140 D8            push b
12807  5141 3B 81 64      mov d, _quad_x ; $quad_x
12808  5144 2A            mov b, [d]
12809  5145 FD AB         swp b
12810  5147 D8            push b
12811  5148 3B 7F 64      mov d, _quad_y ; $quad_y
12812  514B 2A            mov b, [d]
12813  514C FD AB         swp b
12814  514E D8            push b
12815  514F 26 D0 76      mov b, _s151 ; "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: "
12816  5152 FD AB         swp b
12817  5154 D8            push b
12818  5155 07 BA 07      call printf
12819  5158 51 0A 00      add sp, 10
12820  515B             ; c1 = TO_FIXED00(input_int()); 
12821  515B FA FF FF      lea d, [bp + -1] ; $c1
12822  515E DA            push d
12823  515F 07 93 22      call input_int
12824  5162 FD AB         swp b
12825  5164 D8            push b
12826  5165 07 C8 1F      call TO_FIXED00
12827  5168 51 02 00      add sp, 2
12828  516B E7            pop d
12829  516C FD 43         mov [d], b
12830  516E             ; if (c1 < 0 || c1 > 900 ) 
12831  516E             _if201_cond:
12832  516E FA FF FF      lea d, [bp + -1] ; $c1
12833  5171 2A            mov b, [d]
12834  5172             ; --- START RELATIONAL
12835  5172 D7            push a
12836  5173 11            mov a, b
12837  5174 26 00 00      mov b, $0
12838  5177 B0            cmp a, b
12839  5178 FD 73         slt ; < (signed)
12840  517A E4            pop a
12841  517B             ; --- END RELATIONAL
12842  517B             ; --- START LOGICAL OR
12843  517B D7            push a
12844  517C 11            mov a, b
12845  517D FA FF FF      lea d, [bp + -1] ; $c1
12846  5180 2A            mov b, [d]
12847  5181             ; --- START RELATIONAL
12848  5181 D7            push a
12849  5182 11            mov a, b
12850  5183 26 84 03      mov b, $384
12851  5186 B0            cmp a, b
12852  5187 FD 7F         sgt ; >
12853  5189 E4            pop a
12854  518A             ; --- END RELATIONAL
12855  518A FD A8         sor a, b ; ||
12856  518C E4            pop a
12857  518D             ; --- END LOGICAL OR
12858  518D C0 00 00      cmp b, 0
12859  5190 C6 98 51      je _if201_exit
12860  5193             _if201_true:
12861  5193             ; return; 
12862  5193 F9            leave
12863  5194 09            ret
12864  5195 0A 98 51      jmp _if201_exit
12865  5198             _if201_exit:
12866  5198             ; puts("Please enter initial Y coordinate: "); 
12867  5198 26 3C 77      mov b, _s152 ; "Please enter initial Y coordinate: "
12868  519B FD AB         swp b
12869  519D D8            push b
12870  519E 07 BB 17      call puts
12871  51A1 51 02 00      add sp, 2
12872  51A4             ; a = TO_FIXED00(input_int()); 
12873  51A4 FA FD FF      lea d, [bp + -3] ; $a
12874  51A7 DA            push d
12875  51A8 07 93 22      call input_int
12876  51AB FD AB         swp b
12877  51AD D8            push b
12878  51AE 07 C8 1F      call TO_FIXED00
12879  51B1 51 02 00      add sp, 2
12880  51B4 E7            pop d
12881  51B5 FD 43         mov [d], b
12882  51B7             ; if (a < 0 || a > 900) 
12883  51B7             _if202_cond:
12884  51B7 FA FD FF      lea d, [bp + -3] ; $a
12885  51BA 2A            mov b, [d]
12886  51BB             ; --- START RELATIONAL
12887  51BB D7            push a
12888  51BC 11            mov a, b
12889  51BD 26 00 00      mov b, $0
12890  51C0 B0            cmp a, b
12891  51C1 FD 73         slt ; < (signed)
12892  51C3 E4            pop a
12893  51C4             ; --- END RELATIONAL
12894  51C4             ; --- START LOGICAL OR
12895  51C4 D7            push a
12896  51C5 11            mov a, b
12897  51C6 FA FD FF      lea d, [bp + -3] ; $a
12898  51C9 2A            mov b, [d]
12899  51CA             ; --- START RELATIONAL
12900  51CA D7            push a
12901  51CB 11            mov a, b
12902  51CC 26 84 03      mov b, $384
12903  51CF B0            cmp a, b
12904  51D0 FD 7F         sgt ; >
12905  51D2 E4            pop a
12906  51D3             ; --- END RELATIONAL
12907  51D3 FD A8         sor a, b ; ||
12908  51D5 E4            pop a
12909  51D6             ; --- END LOGICAL OR
12910  51D6 C0 00 00      cmp b, 0
12911  51D9 C6 E1 51      je _if202_exit
12912  51DC             _if202_true:
12913  51DC             ; return; 
12914  51DC F9            leave
12915  51DD 09            ret
12916  51DE 0A E1 51      jmp _if202_exit
12917  51E1             _if202_exit:
12918  51E1             ; puts("Please enter final X coordinate: "); 
12919  51E1 26 60 77      mov b, _s153 ; "Please enter final X coordinate: "
12920  51E4 FD AB         swp b
12921  51E6 D8            push b
12922  51E7 07 BB 17      call puts
12923  51EA 51 02 00      add sp, 2
12924  51ED             ; w1 = TO_FIXED00(input_int()); 
12925  51ED FA FB FF      lea d, [bp + -5] ; $w1
12926  51F0 DA            push d
12927  51F1 07 93 22      call input_int
12928  51F4 FD AB         swp b
12929  51F6 D8            push b
12930  51F7 07 C8 1F      call TO_FIXED00
12931  51FA 51 02 00      add sp, 2
12932  51FD E7            pop d
12933  51FE FD 43         mov [d], b
12934  5200             ; if (w1 < 0 || w1 > 900) 
12935  5200             _if203_cond:
12936  5200 FA FB FF      lea d, [bp + -5] ; $w1
12937  5203 2A            mov b, [d]
12938  5204             ; --- START RELATIONAL
12939  5204 D7            push a
12940  5205 11            mov a, b
12941  5206 26 00 00      mov b, $0
12942  5209 B0            cmp a, b
12943  520A FD 73         slt ; < (signed)
12944  520C E4            pop a
12945  520D             ; --- END RELATIONAL
12946  520D             ; --- START LOGICAL OR
12947  520D D7            push a
12948  520E 11            mov a, b
12949  520F FA FB FF      lea d, [bp + -5] ; $w1
12950  5212 2A            mov b, [d]
12951  5213             ; --- START RELATIONAL
12952  5213 D7            push a
12953  5214 11            mov a, b
12954  5215 26 84 03      mov b, $384
12955  5218 B0            cmp a, b
12956  5219 FD 7F         sgt ; >
12957  521B E4            pop a
12958  521C             ; --- END RELATIONAL
12959  521C FD A8         sor a, b ; ||
12960  521E E4            pop a
12961  521F             ; --- END LOGICAL OR
12962  521F C0 00 00      cmp b, 0
12963  5222 C6 2A 52      je _if203_exit
12964  5225             _if203_true:
12965  5225             ; return; 
12966  5225 F9            leave
12967  5226 09            ret
12968  5227 0A 2A 52      jmp _if203_exit
12969  522A             _if203_exit:
12970  522A             ; puts("Please enter final Y coordinate: "); 
12971  522A 26 82 77      mov b, _s154 ; "Please enter final Y coordinate: "
12972  522D FD AB         swp b
12973  522F D8            push b
12974  5230 07 BB 17      call puts
12975  5233 51 02 00      add sp, 2
12976  5236             ; x = TO_FIXED00(input_int()); 
12977  5236 FA F9 FF      lea d, [bp + -7] ; $x
12978  5239 DA            push d
12979  523A 07 93 22      call input_int
12980  523D FD AB         swp b
12981  523F D8            push b
12982  5240 07 C8 1F      call TO_FIXED00
12983  5243 51 02 00      add sp, 2
12984  5246 E7            pop d
12985  5247 FD 43         mov [d], b
12986  5249             ; if (x < 0 || x > 900) 
12987  5249             _if204_cond:
12988  5249 FA F9 FF      lea d, [bp + -7] ; $x
12989  524C 2A            mov b, [d]
12990  524D             ; --- START RELATIONAL
12991  524D D7            push a
12992  524E 11            mov a, b
12993  524F 26 00 00      mov b, $0
12994  5252 B0            cmp a, b
12995  5253 FD 73         slt ; < (signed)
12996  5255 E4            pop a
12997  5256             ; --- END RELATIONAL
12998  5256             ; --- START LOGICAL OR
12999  5256 D7            push a
13000  5257 11            mov a, b
13001  5258 FA F9 FF      lea d, [bp + -7] ; $x
13002  525B 2A            mov b, [d]
13003  525C             ; --- START RELATIONAL
13004  525C D7            push a
13005  525D 11            mov a, b
13006  525E 26 84 03      mov b, $384
13007  5261 B0            cmp a, b
13008  5262 FD 7F         sgt ; >
13009  5264 E4            pop a
13010  5265             ; --- END RELATIONAL
13011  5265 FD A8         sor a, b ; ||
13012  5267 E4            pop a
13013  5268             ; --- END LOGICAL OR
13014  5268 C0 00 00      cmp b, 0
13015  526B C6 73 52      je _if204_exit
13016  526E             _if204_true:
13017  526E             ; return; 
13018  526E F9            leave
13019  526F 09            ret
13020  5270 0A 73 52      jmp _if204_exit
13021  5273             _if204_exit:
13022  5273             ; compute_vector(w1, x, c1, a); 
13023  5273 FA FD FF      lea d, [bp + -3] ; $a
13024  5276 2A            mov b, [d]
13025  5277 FD AB         swp b
13026  5279 D8            push b
13027  527A FA FF FF      lea d, [bp + -1] ; $c1
13028  527D 2A            mov b, [d]
13029  527E FD AB         swp b
13030  5280 D8            push b
13031  5281 FA F9 FF      lea d, [bp + -7] ; $x
13032  5284 2A            mov b, [d]
13033  5285 FD AB         swp b
13034  5287 D8            push b
13035  5288 FA FB FF      lea d, [bp + -5] ; $w1
13036  528B 2A            mov b, [d]
13037  528C FD AB         swp b
13038  528E D8            push b
13039  528F 07 6F 54      call compute_vector
13040  5292 51 08 00      add sp, 8
13041  5295 F9            leave
13042  5296 09            ret
13043  5297             
13044  5297             galaxy_map:
13045  5297 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13046  529A             ; int i, j, j0; 
13047  529A 52 02 00      sub sp, 2
13048  529D 52 02 00      sub sp, 2
13049  52A0 52 02 00      sub sp, 2
13050  52A3             ; printf("\n                   The Galaxy\n\n"); 
13051  52A3 26 A4 77      mov b, _s155 ; "\n                   The Galaxy\n\n"
13052  52A6 FD AB         swp b
13053  52A8 D8            push b
13054  52A9 07 BA 07      call printf
13055  52AC 51 02 00      add sp, 2
13056  52AF             ; printf("    1     2     3     4     5     6     7     8\n"); 
13057  52AF 26 C5 77      mov b, _s156 ; "    1     2     3     4     5     6     7     8\n"
13058  52B2 FD AB         swp b
13059  52B4 D8            push b
13060  52B5 07 BA 07      call printf
13061  52B8 51 02 00      add sp, 2
13062  52BB             ; for (i = 1; i <= 8; i++) { 
13063  52BB             _for205_init:
13064  52BB FA FF FF      lea d, [bp + -1] ; $i
13065  52BE DA            push d
13066  52BF 26 01 00      mov b, $1
13067  52C2 E7            pop d
13068  52C3 FD 43         mov [d], b
13069  52C5             _for205_cond:
13070  52C5 FA FF FF      lea d, [bp + -1] ; $i
13071  52C8 2A            mov b, [d]
13072  52C9             ; --- START RELATIONAL
13073  52C9 D7            push a
13074  52CA 11            mov a, b
13075  52CB 26 08 00      mov b, $8
13076  52CE B0            cmp a, b
13077  52CF FD 74         sle ; <= (signed)
13078  52D1 E4            pop a
13079  52D2             ; --- END RELATIONAL
13080  52D2 C0 00 00      cmp b, 0
13081  52D5 C6 60 54      je _for205_exit
13082  52D8             _for205_block:
13083  52D8             ; printf("%s%d ", gm_1, i); 
13084  52D8 FA FF FF      lea d, [bp + -1] ; $i
13085  52DB 2A            mov b, [d]
13086  52DC FD AB         swp b
13087  52DE D8            push b
13088  52DF 3B 61 66      mov d, _gm_1 ; $gm_1
13089  52E2 2A            mov b, [d]
13090  52E3 FD AB         swp b
13091  52E5 D8            push b
13092  52E6 26 F6 77      mov b, _s157 ; "%s%d "
13093  52E9 FD AB         swp b
13094  52EB D8            push b
13095  52EC 07 BA 07      call printf
13096  52EF 51 06 00      add sp, 6
13097  52F2             ; quadrant_name(1, i, 1); 
13098  52F2 26 01 00      mov b, $1
13099  52F5 DD            push bl
13100  52F6 FA FF FF      lea d, [bp + -1] ; $i
13101  52F9 2A            mov b, [d]
13102  52FA DD            push bl
13103  52FB 26 01 00      mov b, $1
13104  52FE DD            push bl
13105  52FF 07 87 60      call quadrant_name
13106  5302 51 03 00      add sp, 3
13107  5305             ; j0 = (int) (11 - (strlen(quadname) / 2)); 
13108  5305 FA FB FF      lea d, [bp + -5] ; $j0
13109  5308 DA            push d
13110  5309 26 0B 00      mov b, $b
13111  530C             ; --- START TERMS
13112  530C D7            push a
13113  530D 11            mov a, b
13114  530E 3B E4 64      mov d, _quadname_data ; $quadname
13115  5311 2D            mov b, d
13116  5312 FD AB         swp b
13117  5314 D8            push b
13118  5315 07 8E 05      call strlen
13119  5318 51 02 00      add sp, 2
13120  531B             ; --- START FACTORS
13121  531B D7            push a
13122  531C 11            mov a, b
13123  531D 26 02 00      mov b, $2
13124  5320 AE            div a, b
13125  5321 27            mov b, a
13126  5322 E4            pop a
13127  5323             ; --- END FACTORS
13128  5323 60            sub a, b
13129  5324 27            mov b, a
13130  5325 E4            pop a
13131  5326             ; --- END TERMS
13132  5326 E7            pop d
13133  5327 FD 43         mov [d], b
13134  5329             ; for (j = 0; j < j0; j++) 
13135  5329             _for206_init:
13136  5329 FA FD FF      lea d, [bp + -3] ; $j
13137  532C DA            push d
13138  532D 26 00 00      mov b, $0
13139  5330 E7            pop d
13140  5331 FD 43         mov [d], b
13141  5333             _for206_cond:
13142  5333 FA FD FF      lea d, [bp + -3] ; $j
13143  5336 2A            mov b, [d]
13144  5337             ; --- START RELATIONAL
13145  5337 D7            push a
13146  5338 11            mov a, b
13147  5339 FA FB FF      lea d, [bp + -5] ; $j0
13148  533C 2A            mov b, [d]
13149  533D B0            cmp a, b
13150  533E FD 73         slt ; < (signed)
13151  5340 E4            pop a
13152  5341             ; --- END RELATIONAL
13153  5341 C0 00 00      cmp b, 0
13154  5344 C6 61 53      je _for206_exit
13155  5347             _for206_block:
13156  5347             ; putchar(' '); 
13157  5347 26 20 00      mov b, $20
13158  534A DD            push bl
13159  534B 07 85 17      call putchar
13160  534E 51 01 00      add sp, 1
13161  5351             _for206_update:
13162  5351 FA FD FF      lea d, [bp + -3] ; $j
13163  5354 2A            mov b, [d]
13164  5355 FD 77         inc b
13165  5357 FA FD FF      lea d, [bp + -3] ; $j
13166  535A FD 43         mov [d], b
13167  535C FD 7D         dec b
13168  535E 0A 33 53      jmp _for206_cond
13169  5361             _for206_exit:
13170  5361             ; puts(quadname); 
13171  5361 3B E4 64      mov d, _quadname_data ; $quadname
13172  5364 2D            mov b, d
13173  5365 FD AB         swp b
13174  5367 D8            push b
13175  5368 07 BB 17      call puts
13176  536B 51 02 00      add sp, 2
13177  536E             ; for (j = 0; j < j0; j++) 
13178  536E             _for207_init:
13179  536E FA FD FF      lea d, [bp + -3] ; $j
13180  5371 DA            push d
13181  5372 26 00 00      mov b, $0
13182  5375 E7            pop d
13183  5376 FD 43         mov [d], b
13184  5378             _for207_cond:
13185  5378 FA FD FF      lea d, [bp + -3] ; $j
13186  537B 2A            mov b, [d]
13187  537C             ; --- START RELATIONAL
13188  537C D7            push a
13189  537D 11            mov a, b
13190  537E FA FB FF      lea d, [bp + -5] ; $j0
13191  5381 2A            mov b, [d]
13192  5382 B0            cmp a, b
13193  5383 FD 73         slt ; < (signed)
13194  5385 E4            pop a
13195  5386             ; --- END RELATIONAL
13196  5386 C0 00 00      cmp b, 0
13197  5389 C6 A6 53      je _for207_exit
13198  538C             _for207_block:
13199  538C             ; putchar(' '); 
13200  538C 26 20 00      mov b, $20
13201  538F DD            push bl
13202  5390 07 85 17      call putchar
13203  5393 51 01 00      add sp, 1
13204  5396             _for207_update:
13205  5396 FA FD FF      lea d, [bp + -3] ; $j
13206  5399 2A            mov b, [d]
13207  539A FD 77         inc b
13208  539C FA FD FF      lea d, [bp + -3] ; $j
13209  539F FD 43         mov [d], b
13210  53A1 FD 7D         dec b
13211  53A3 0A 78 53      jmp _for207_cond
13212  53A6             _for207_exit:
13213  53A6             ; if (!(strlen(quadname) % 2)) 
13214  53A6             _if208_cond:
13215  53A6 3B E4 64      mov d, _quadname_data ; $quadname
13216  53A9 2D            mov b, d
13217  53AA FD AB         swp b
13218  53AC D8            push b
13219  53AD 07 8E 05      call strlen
13220  53B0 51 02 00      add sp, 2
13221  53B3             ; --- START FACTORS
13222  53B3 D7            push a
13223  53B4 11            mov a, b
13224  53B5 26 02 00      mov b, $2
13225  53B8 AE            div a, b ; 
13226  53B9 11            mov a, b
13227  53BA 27            mov b, a
13228  53BB E4            pop a
13229  53BC             ; --- END FACTORS
13230  53BC C0 00 00      cmp b, 0
13231  53BF FD 71         seq ; !
13232  53C1 C0 00 00      cmp b, 0
13233  53C4 C6 D4 53      je _if208_exit
13234  53C7             _if208_true:
13235  53C7             ; putchar(' '); 
13236  53C7 26 20 00      mov b, $20
13237  53CA DD            push bl
13238  53CB 07 85 17      call putchar
13239  53CE 51 01 00      add sp, 1
13240  53D1 0A D4 53      jmp _if208_exit
13241  53D4             _if208_exit:
13242  53D4             ; quadrant_name(1, i, 5); 
13243  53D4 26 05 00      mov b, $5
13244  53D7 DD            push bl
13245  53D8 FA FF FF      lea d, [bp + -1] ; $i
13246  53DB 2A            mov b, [d]
13247  53DC DD            push bl
13248  53DD 26 01 00      mov b, $1
13249  53E0 DD            push bl
13250  53E1 07 87 60      call quadrant_name
13251  53E4 51 03 00      add sp, 3
13252  53E7             ; j0 = (int) (12 - (strlen(quadname) / 2)); 
13253  53E7 FA FB FF      lea d, [bp + -5] ; $j0
13254  53EA DA            push d
13255  53EB 26 0C 00      mov b, $c
13256  53EE             ; --- START TERMS
13257  53EE D7            push a
13258  53EF 11            mov a, b
13259  53F0 3B E4 64      mov d, _quadname_data ; $quadname
13260  53F3 2D            mov b, d
13261  53F4 FD AB         swp b
13262  53F6 D8            push b
13263  53F7 07 8E 05      call strlen
13264  53FA 51 02 00      add sp, 2
13265  53FD             ; --- START FACTORS
13266  53FD D7            push a
13267  53FE 11            mov a, b
13268  53FF 26 02 00      mov b, $2
13269  5402 AE            div a, b
13270  5403 27            mov b, a
13271  5404 E4            pop a
13272  5405             ; --- END FACTORS
13273  5405 60            sub a, b
13274  5406 27            mov b, a
13275  5407 E4            pop a
13276  5408             ; --- END TERMS
13277  5408 E7            pop d
13278  5409 FD 43         mov [d], b
13279  540B             ; for (j = 0; j < j0; j++) 
13280  540B             _for209_init:
13281  540B FA FD FF      lea d, [bp + -3] ; $j
13282  540E DA            push d
13283  540F 26 00 00      mov b, $0
13284  5412 E7            pop d
13285  5413 FD 43         mov [d], b
13286  5415             _for209_cond:
13287  5415 FA FD FF      lea d, [bp + -3] ; $j
13288  5418 2A            mov b, [d]
13289  5419             ; --- START RELATIONAL
13290  5419 D7            push a
13291  541A 11            mov a, b
13292  541B FA FB FF      lea d, [bp + -5] ; $j0
13293  541E 2A            mov b, [d]
13294  541F B0            cmp a, b
13295  5420 FD 73         slt ; < (signed)
13296  5422 E4            pop a
13297  5423             ; --- END RELATIONAL
13298  5423 C0 00 00      cmp b, 0
13299  5426 C6 43 54      je _for209_exit
13300  5429             _for209_block:
13301  5429             ; putchar(' '); 
13302  5429 26 20 00      mov b, $20
13303  542C DD            push bl
13304  542D 07 85 17      call putchar
13305  5430 51 01 00      add sp, 1
13306  5433             _for209_update:
13307  5433 FA FD FF      lea d, [bp + -3] ; $j
13308  5436 2A            mov b, [d]
13309  5437 FD 77         inc b
13310  5439 FA FD FF      lea d, [bp + -3] ; $j
13311  543C FD 43         mov [d], b
13312  543E FD 7D         dec b
13313  5440 0A 15 54      jmp _for209_cond
13314  5443             _for209_exit:
13315  5443             ; puts(quadname); 
13316  5443 3B E4 64      mov d, _quadname_data ; $quadname
13317  5446 2D            mov b, d
13318  5447 FD AB         swp b
13319  5449 D8            push b
13320  544A 07 BB 17      call puts
13321  544D 51 02 00      add sp, 2
13322  5450             _for205_update:
13323  5450 FA FF FF      lea d, [bp + -1] ; $i
13324  5453 2A            mov b, [d]
13325  5454 FD 77         inc b
13326  5456 FA FF FF      lea d, [bp + -1] ; $i
13327  5459 FD 43         mov [d], b
13328  545B FD 7D         dec b
13329  545D 0A C5 52      jmp _for205_cond
13330  5460             _for205_exit:
13331  5460             ; puts(gm_1); 
13332  5460 3B 61 66      mov d, _gm_1 ; $gm_1
13333  5463 2A            mov b, [d]
13334  5464 FD AB         swp b
13335  5466 D8            push b
13336  5467 07 BB 17      call puts
13337  546A 51 02 00      add sp, 2
13338  546D F9            leave
13339  546E 09            ret
13340  546F             
13341  546F             compute_vector:
13342  546F F8 00 00      enter 0 ; (push bp; mov bp, sp)
13343  5472             ; long unsigned int        xl, al; 
13344  5472 52 04 00      sub sp, 4
13345  5475 52 04 00      sub sp, 4
13346  5478             ; puts("  DIRECTION = "); 
13347  5478 26 FC 77      mov b, _s158 ; "  DIRECTION = "
13348  547B FD AB         swp b
13349  547D D8            push b
13350  547E 07 BB 17      call puts
13351  5481 51 02 00      add sp, 2
13352  5484             ; x = x - a; 
13353  5484 FA 07 00      lea d, [bp + 7] ; $x
13354  5487 DA            push d
13355  5488 FA 07 00      lea d, [bp + 7] ; $x
13356  548B 2A            mov b, [d]
13357  548C             ; --- START TERMS
13358  548C D7            push a
13359  548D 11            mov a, b
13360  548E FA 0B 00      lea d, [bp + 11] ; $a
13361  5491 2A            mov b, [d]
13362  5492 60            sub a, b
13363  5493 27            mov b, a
13364  5494 E4            pop a
13365  5495             ; --- END TERMS
13366  5495 E7            pop d
13367  5496 FD 43         mov [d], b
13368  5498             ; a = c1 - w1; 
13369  5498 FA 0B 00      lea d, [bp + 11] ; $a
13370  549B DA            push d
13371  549C FA 09 00      lea d, [bp + 9] ; $c1
13372  549F 2A            mov b, [d]
13373  54A0             ; --- START TERMS
13374  54A0 D7            push a
13375  54A1 11            mov a, b
13376  54A2 FA 05 00      lea d, [bp + 5] ; $w1
13377  54A5 2A            mov b, [d]
13378  54A6 60            sub a, b
13379  54A7 27            mov b, a
13380  54A8 E4            pop a
13381  54A9             ; --- END TERMS
13382  54A9 E7            pop d
13383  54AA FD 43         mov [d], b
13384  54AC             ; xl = abs(x); 
13385  54AC FA FD FF      lea d, [bp + -3] ; $xl
13386  54AF DA            push d
13387  54B0 FA 07 00      lea d, [bp + 7] ; $x
13388  54B3 2A            mov b, [d]
13389  54B4 FD AB         swp b
13390  54B6 D8            push b
13391  54B7 07 07 18      call abs
13392  54BA 51 02 00      add sp, 2
13393  54BD E7            pop d
13394  54BE FD 43         mov [d], b
13395  54C0 28            mov b, c
13396  54C1 FD 44 02 00   mov [d + 2], b
13397  54C5             ; al = abs(a); 
13398  54C5 FA F9 FF      lea d, [bp + -7] ; $al
13399  54C8 DA            push d
13400  54C9 FA 0B 00      lea d, [bp + 11] ; $a
13401  54CC 2A            mov b, [d]
13402  54CD FD AB         swp b
13403  54CF D8            push b
13404  54D0 07 07 18      call abs
13405  54D3 51 02 00      add sp, 2
13406  54D6 E7            pop d
13407  54D7 FD 43         mov [d], b
13408  54D9 28            mov b, c
13409  54DA FD 44 02 00   mov [d + 2], b
13410  54DE             ; if (x < 0) { 
13411  54DE             _if210_cond:
13412  54DE FA 07 00      lea d, [bp + 7] ; $x
13413  54E1 2A            mov b, [d]
13414  54E2             ; --- START RELATIONAL
13415  54E2 D7            push a
13416  54E3 11            mov a, b
13417  54E4 26 00 00      mov b, $0
13418  54E7 B0            cmp a, b
13419  54E8 FD 73         slt ; < (signed)
13420  54EA E4            pop a
13421  54EB             ; --- END RELATIONAL
13422  54EB C0 00 00      cmp b, 0
13423  54EE C6 4B 56      je _if210_else
13424  54F1             _if210_true:
13425  54F1             ; if (a > 0) { 
13426  54F1             _if211_cond:
13427  54F1 FA 0B 00      lea d, [bp + 11] ; $a
13428  54F4 2A            mov b, [d]
13429  54F5             ; --- START RELATIONAL
13430  54F5 D7            push a
13431  54F6 11            mov a, b
13432  54F7 26 00 00      mov b, $0
13433  54FA B0            cmp a, b
13434  54FB FD 7F         sgt ; >
13435  54FD E4            pop a
13436  54FE             ; --- END RELATIONAL
13437  54FE C0 00 00      cmp b, 0
13438  5501 C6 1C 56      je _if211_else
13439  5504             _if211_true:
13440  5504             ; c1 = 300; 
13441  5504 FA 09 00      lea d, [bp + 9] ; $c1
13442  5507 DA            push d
13443  5508 26 2C 01      mov b, $12c
13444  550B E7            pop d
13445  550C FD 43         mov [d], b
13446  550E             ; if (al >= xl) 
13447  550E             _if212_cond:
13448  550E FA F9 FF      lea d, [bp + -7] ; $al
13449  5511 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13450  5514 FD 39         mov c, b ; And place it into C
13451  5516 2A            mov b, [d] ; Lower Word in B
13452  5517             ; --- START RELATIONAL
13453  5517 D7            push a
13454  5518 FD D8         push g
13455  551A 11            mov a, b
13456  551B FD 7A         mov g, c
13457  551D FA FD FF      lea d, [bp + -3] ; $xl
13458  5520 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13459  5523 FD 39         mov c, b ; And place it into C
13460  5525 2A            mov b, [d] ; Lower Word in B
13461  5526 FD 82         sgeu
13462  5528 FD F1         pop g
13463  552A E4            pop a
13464  552B             ; --- END RELATIONAL
13465  552B C0 00 00      cmp b, 0
13466  552E C6 7B 55      je _if212_else
13467  5531             _if212_true:
13468  5531             ; printf("%s", print100(c1 + ((xl * 100) / al))); 
13469  5531 FA 09 00      lea d, [bp + 9] ; $c1
13470  5534 2A            mov b, [d]
13471  5535             ; --- START TERMS
13472  5535 D7            push a
13473  5536 11            mov a, b
13474  5537 FA FD FF      lea d, [bp + -3] ; $xl
13475  553A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13476  553D FD 39         mov c, b ; And place it into C
13477  553F 2A            mov b, [d] ; Lower Word in B
13478  5540             ; --- START FACTORS
13479  5540 D7            push a
13480  5541 11            mov a, b
13481  5542 26 64 00      mov b, $64
13482  5545 AC            mul a, b ; *
13483  5546 11            mov a, b
13484  5547 27            mov b, a
13485  5548 E4            pop a
13486  5549             ; --- END FACTORS
13487  5549             ; --- START FACTORS
13488  5549 D7            push a
13489  554A 11            mov a, b
13490  554B FA F9 FF      lea d, [bp + -7] ; $al
13491  554E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13492  5551 FD 39         mov c, b ; And place it into C
13493  5553 2A            mov b, [d] ; Lower Word in B
13494  5554 AE            div a, b
13495  5555 27            mov b, a
13496  5556 E4            pop a
13497  5557             ; --- END FACTORS
13498  5557 54            add a, b
13499  5558 D7            push a
13500  5559 FD 12         mov a, g
13501  555B 28            mov b, c
13502  555C 5C            adc a, b
13503  555D 39            mov c, a
13504  555E E5            pop b
13505  555F E4            pop a
13506  5560             ; --- END TERMS
13507  5560 FD AB         swp b
13508  5562 D8            push b
13509  5563 07 DD 22      call print100
13510  5566 51 02 00      add sp, 2
13511  5569 FD AB         swp b
13512  556B D8            push b
13513  556C 26 0B 78      mov b, _s159 ; "%s"
13514  556F FD AB         swp b
13515  5571 D8            push b
13516  5572 07 BA 07      call printf
13517  5575 51 04 00      add sp, 4
13518  5578 0A DF 55      jmp _if212_exit
13519  557B             _if212_else:
13520  557B             ; printf("%s", print100(c1 + ((((xl * 2) - al) * 100)  / xl))); 
13521  557B FA 09 00      lea d, [bp + 9] ; $c1
13522  557E 2A            mov b, [d]
13523  557F             ; --- START TERMS
13524  557F D7            push a
13525  5580 11            mov a, b
13526  5581 FA FD FF      lea d, [bp + -3] ; $xl
13527  5584 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13528  5587 FD 39         mov c, b ; And place it into C
13529  5589 2A            mov b, [d] ; Lower Word in B
13530  558A             ; --- START FACTORS
13531  558A D7            push a
13532  558B 11            mov a, b
13533  558C 26 02 00      mov b, $2
13534  558F AC            mul a, b ; *
13535  5590 11            mov a, b
13536  5591 27            mov b, a
13537  5592 E4            pop a
13538  5593             ; --- END FACTORS
13539  5593             ; --- START TERMS
13540  5593 D7            push a
13541  5594 FD D8         push g
13542  5596 11            mov a, b
13543  5597 FD 7A         mov g, c
13544  5599 FA F9 FF      lea d, [bp + -7] ; $al
13545  559C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13546  559F FD 39         mov c, b ; And place it into C
13547  55A1 2A            mov b, [d] ; Lower Word in B
13548  55A2 60            sub a, b
13549  55A3 27            mov b, a
13550  55A4 FD F1         pop g
13551  55A6 E4            pop a
13552  55A7             ; --- END TERMS
13553  55A7             ; --- START FACTORS
13554  55A7 D7            push a
13555  55A8 11            mov a, b
13556  55A9 26 64 00      mov b, $64
13557  55AC AC            mul a, b ; *
13558  55AD 11            mov a, b
13559  55AE 27            mov b, a
13560  55AF E4            pop a
13561  55B0             ; --- END FACTORS
13562  55B0             ; --- START FACTORS
13563  55B0 D7            push a
13564  55B1 11            mov a, b
13565  55B2 FA FD FF      lea d, [bp + -3] ; $xl
13566  55B5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13567  55B8 FD 39         mov c, b ; And place it into C
13568  55BA 2A            mov b, [d] ; Lower Word in B
13569  55BB AE            div a, b
13570  55BC 27            mov b, a
13571  55BD E4            pop a
13572  55BE             ; --- END FACTORS
13573  55BE 54            add a, b
13574  55BF D7            push a
13575  55C0 FD 12         mov a, g
13576  55C2 28            mov b, c
13577  55C3 5C            adc a, b
13578  55C4 39            mov c, a
13579  55C5 E5            pop b
13580  55C6 E4            pop a
13581  55C7             ; --- END TERMS
13582  55C7 FD AB         swp b
13583  55C9 D8            push b
13584  55CA 07 DD 22      call print100
13585  55CD 51 02 00      add sp, 2
13586  55D0 FD AB         swp b
13587  55D2 D8            push b
13588  55D3 26 0B 78      mov b, _s159 ; "%s"
13589  55D6 FD AB         swp b
13590  55D8 D8            push b
13591  55D9 07 BA 07      call printf
13592  55DC 51 04 00      add sp, 4
13593  55DF             _if212_exit:
13594  55DF             ; printf(dist_1, print100((x > a) ? x : a)); 
13595  55DF             _ternary216_cond:
13596  55DF FA 07 00      lea d, [bp + 7] ; $x
13597  55E2 2A            mov b, [d]
13598  55E3             ; --- START RELATIONAL
13599  55E3 D7            push a
13600  55E4 11            mov a, b
13601  55E5 FA 0B 00      lea d, [bp + 11] ; $a
13602  55E8 2A            mov b, [d]
13603  55E9 B0            cmp a, b
13604  55EA FD 7F         sgt ; >
13605  55EC E4            pop a
13606  55ED             ; --- END RELATIONAL
13607  55ED C0 00 00      cmp b, 0
13608  55F0 C6 FA 55      je _ternary216_false
13609  55F3             _ternary216_true:
13610  55F3 FA 07 00      lea d, [bp + 7] ; $x
13611  55F6 2A            mov b, [d]
13612  55F7 0A FE 55      jmp _ternary216_exit
13613  55FA             _ternary216_false:
13614  55FA FA 0B 00      lea d, [bp + 11] ; $a
13615  55FD 2A            mov b, [d]
13616  55FE             _ternary216_exit:
13617  55FE FD AB         swp b
13618  5600 D8            push b
13619  5601 07 DD 22      call print100
13620  5604 51 02 00      add sp, 2
13621  5607 FD AB         swp b
13622  5609 D8            push b
13623  560A 3B 73 66      mov d, _dist_1 ; $dist_1
13624  560D 2A            mov b, [d]
13625  560E FD AB         swp b
13626  5610 D8            push b
13627  5611 07 BA 07      call printf
13628  5614 51 04 00      add sp, 4
13629  5617             ; return; 
13630  5617 F9            leave
13631  5618 09            ret
13632  5619 0A 48 56      jmp _if211_exit
13633  561C             _if211_else:
13634  561C             ; if (x != 0){ 
13635  561C             _if217_cond:
13636  561C FA 07 00      lea d, [bp + 7] ; $x
13637  561F 2A            mov b, [d]
13638  5620             ; --- START RELATIONAL
13639  5620 D7            push a
13640  5621 11            mov a, b
13641  5622 26 00 00      mov b, $0
13642  5625 B0            cmp a, b
13643  5626 FD 72         sneq ; !=
13644  5628 E4            pop a
13645  5629             ; --- END RELATIONAL
13646  5629 C0 00 00      cmp b, 0
13647  562C C6 3E 56      je _if217_else
13648  562F             _if217_true:
13649  562F             ; c1 = 500; 
13650  562F FA 09 00      lea d, [bp + 9] ; $c1
13651  5632 DA            push d
13652  5633 26 F4 01      mov b, $1f4
13653  5636 E7            pop d
13654  5637 FD 43         mov [d], b
13655  5639             ; return; 
13656  5639 F9            leave
13657  563A 09            ret
13658  563B 0A 48 56      jmp _if217_exit
13659  563E             _if217_else:
13660  563E             ; c1 = 700; 
13661  563E FA 09 00      lea d, [bp + 9] ; $c1
13662  5641 DA            push d
13663  5642 26 BC 02      mov b, $2bc
13664  5645 E7            pop d
13665  5646 FD 43         mov [d], b
13666  5648             _if217_exit:
13667  5648             _if211_exit:
13668  5648 0A D7 57      jmp _if210_exit
13669  564B             _if210_else:
13670  564B             ; if (a < 0) { 
13671  564B             _if218_cond:
13672  564B FA 0B 00      lea d, [bp + 11] ; $a
13673  564E 2A            mov b, [d]
13674  564F             ; --- START RELATIONAL
13675  564F D7            push a
13676  5650 11            mov a, b
13677  5651 26 00 00      mov b, $0
13678  5654 B0            cmp a, b
13679  5655 FD 73         slt ; < (signed)
13680  5657 E4            pop a
13681  5658             ; --- END RELATIONAL
13682  5658 C0 00 00      cmp b, 0
13683  565B C6 6B 56      je _if218_else
13684  565E             _if218_true:
13685  565E             ; c1 = 700; 
13686  565E FA 09 00      lea d, [bp + 9] ; $c1
13687  5661 DA            push d
13688  5662 26 BC 02      mov b, $2bc
13689  5665 E7            pop d
13690  5666 FD 43         mov [d], b
13691  5668 0A D7 57      jmp _if218_exit
13692  566B             _if218_else:
13693  566B             ; if (x > 0) { 
13694  566B             _if219_cond:
13695  566B FA 07 00      lea d, [bp + 7] ; $x
13696  566E 2A            mov b, [d]
13697  566F             ; --- START RELATIONAL
13698  566F D7            push a
13699  5670 11            mov a, b
13700  5671 26 00 00      mov b, $0
13701  5674 B0            cmp a, b
13702  5675 FD 7F         sgt ; >
13703  5677 E4            pop a
13704  5678             ; --- END RELATIONAL
13705  5678 C0 00 00      cmp b, 0
13706  567B C6 8B 56      je _if219_else
13707  567E             _if219_true:
13708  567E             ; c1 = 100; 
13709  567E FA 09 00      lea d, [bp + 9] ; $c1
13710  5681 DA            push d
13711  5682 26 64 00      mov b, $64
13712  5685 E7            pop d
13713  5686 FD 43         mov [d], b
13714  5688 0A D7 57      jmp _if219_exit
13715  568B             _if219_else:
13716  568B             ; if (a == 0) { 
13717  568B             _if220_cond:
13718  568B FA 0B 00      lea d, [bp + 11] ; $a
13719  568E 2A            mov b, [d]
13720  568F             ; --- START RELATIONAL
13721  568F D7            push a
13722  5690 11            mov a, b
13723  5691 26 00 00      mov b, $0
13724  5694 B0            cmp a, b
13725  5695 FD 71         seq ; ==
13726  5697 E4            pop a
13727  5698             ; --- END RELATIONAL
13728  5698 C0 00 00      cmp b, 0
13729  569B C6 AB 56      je _if220_else
13730  569E             _if220_true:
13731  569E             ; c1 = 500; 
13732  569E FA 09 00      lea d, [bp + 9] ; $c1
13733  56A1 DA            push d
13734  56A2 26 F4 01      mov b, $1f4
13735  56A5 E7            pop d
13736  56A6 FD 43         mov [d], b
13737  56A8 0A D7 57      jmp _if220_exit
13738  56AB             _if220_else:
13739  56AB             ; c1 = 100; 
13740  56AB FA 09 00      lea d, [bp + 9] ; $c1
13741  56AE DA            push d
13742  56AF 26 64 00      mov b, $64
13743  56B2 E7            pop d
13744  56B3 FD 43         mov [d], b
13745  56B5             ; if (al <= xl) 
13746  56B5             _if221_cond:
13747  56B5 FA F9 FF      lea d, [bp + -7] ; $al
13748  56B8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13749  56BB FD 39         mov c, b ; And place it into C
13750  56BD 2A            mov b, [d] ; Lower Word in B
13751  56BE             ; --- START RELATIONAL
13752  56BE D7            push a
13753  56BF FD D8         push g
13754  56C1 11            mov a, b
13755  56C2 FD 7A         mov g, c
13756  56C4 FA FD FF      lea d, [bp + -3] ; $xl
13757  56C7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13758  56CA FD 39         mov c, b ; And place it into C
13759  56CC 2A            mov b, [d] ; Lower Word in B
13760  56CD FD 76         sleu
13761  56CF FD F1         pop g
13762  56D1 E4            pop a
13763  56D2             ; --- END RELATIONAL
13764  56D2 C0 00 00      cmp b, 0
13765  56D5 C6 22 57      je _if221_else
13766  56D8             _if221_true:
13767  56D8             ; printf("%s", print100(c1 + ((al * 100) / xl))); 
13768  56D8 FA 09 00      lea d, [bp + 9] ; $c1
13769  56DB 2A            mov b, [d]
13770  56DC             ; --- START TERMS
13771  56DC D7            push a
13772  56DD 11            mov a, b
13773  56DE FA F9 FF      lea d, [bp + -7] ; $al
13774  56E1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13775  56E4 FD 39         mov c, b ; And place it into C
13776  56E6 2A            mov b, [d] ; Lower Word in B
13777  56E7             ; --- START FACTORS
13778  56E7 D7            push a
13779  56E8 11            mov a, b
13780  56E9 26 64 00      mov b, $64
13781  56EC AC            mul a, b ; *
13782  56ED 11            mov a, b
13783  56EE 27            mov b, a
13784  56EF E4            pop a
13785  56F0             ; --- END FACTORS
13786  56F0             ; --- START FACTORS
13787  56F0 D7            push a
13788  56F1 11            mov a, b
13789  56F2 FA FD FF      lea d, [bp + -3] ; $xl
13790  56F5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13791  56F8 FD 39         mov c, b ; And place it into C
13792  56FA 2A            mov b, [d] ; Lower Word in B
13793  56FB AE            div a, b
13794  56FC 27            mov b, a
13795  56FD E4            pop a
13796  56FE             ; --- END FACTORS
13797  56FE 54            add a, b
13798  56FF D7            push a
13799  5700 FD 12         mov a, g
13800  5702 28            mov b, c
13801  5703 5C            adc a, b
13802  5704 39            mov c, a
13803  5705 E5            pop b
13804  5706 E4            pop a
13805  5707             ; --- END TERMS
13806  5707 FD AB         swp b
13807  5709 D8            push b
13808  570A 07 DD 22      call print100
13809  570D 51 02 00      add sp, 2
13810  5710 FD AB         swp b
13811  5712 D8            push b
13812  5713 26 0B 78      mov b, _s159 ; "%s"
13813  5716 FD AB         swp b
13814  5718 D8            push b
13815  5719 07 BA 07      call printf
13816  571C 51 04 00      add sp, 4
13817  571F 0A 86 57      jmp _if221_exit
13818  5722             _if221_else:
13819  5722             ; printf("%s", print100(c1 + ((((al * 2) - xl) * 100) / al))); 
13820  5722 FA 09 00      lea d, [bp + 9] ; $c1
13821  5725 2A            mov b, [d]
13822  5726             ; --- START TERMS
13823  5726 D7            push a
13824  5727 11            mov a, b
13825  5728 FA F9 FF      lea d, [bp + -7] ; $al
13826  572B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13827  572E FD 39         mov c, b ; And place it into C
13828  5730 2A            mov b, [d] ; Lower Word in B
13829  5731             ; --- START FACTORS
13830  5731 D7            push a
13831  5732 11            mov a, b
13832  5733 26 02 00      mov b, $2
13833  5736 AC            mul a, b ; *
13834  5737 11            mov a, b
13835  5738 27            mov b, a
13836  5739 E4            pop a
13837  573A             ; --- END FACTORS
13838  573A             ; --- START TERMS
13839  573A D7            push a
13840  573B FD D8         push g
13841  573D 11            mov a, b
13842  573E FD 7A         mov g, c
13843  5740 FA FD FF      lea d, [bp + -3] ; $xl
13844  5743 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13845  5746 FD 39         mov c, b ; And place it into C
13846  5748 2A            mov b, [d] ; Lower Word in B
13847  5749 60            sub a, b
13848  574A 27            mov b, a
13849  574B FD F1         pop g
13850  574D E4            pop a
13851  574E             ; --- END TERMS
13852  574E             ; --- START FACTORS
13853  574E D7            push a
13854  574F 11            mov a, b
13855  5750 26 64 00      mov b, $64
13856  5753 AC            mul a, b ; *
13857  5754 11            mov a, b
13858  5755 27            mov b, a
13859  5756 E4            pop a
13860  5757             ; --- END FACTORS
13861  5757             ; --- START FACTORS
13862  5757 D7            push a
13863  5758 11            mov a, b
13864  5759 FA F9 FF      lea d, [bp + -7] ; $al
13865  575C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13866  575F FD 39         mov c, b ; And place it into C
13867  5761 2A            mov b, [d] ; Lower Word in B
13868  5762 AE            div a, b
13869  5763 27            mov b, a
13870  5764 E4            pop a
13871  5765             ; --- END FACTORS
13872  5765 54            add a, b
13873  5766 D7            push a
13874  5767 FD 12         mov a, g
13875  5769 28            mov b, c
13876  576A 5C            adc a, b
13877  576B 39            mov c, a
13878  576C E5            pop b
13879  576D E4            pop a
13880  576E             ; --- END TERMS
13881  576E FD AB         swp b
13882  5770 D8            push b
13883  5771 07 DD 22      call print100
13884  5774 51 02 00      add sp, 2
13885  5777 FD AB         swp b
13886  5779 D8            push b
13887  577A 26 0B 78      mov b, _s159 ; "%s"
13888  577D FD AB         swp b
13889  577F D8            push b
13890  5780 07 BA 07      call printf
13891  5783 51 04 00      add sp, 4
13892  5786             _if221_exit:
13893  5786             ; printf(dist_1, print100((xl > al) ? xl : al)); 
13894  5786             _ternary225_cond:
13895  5786 FA FD FF      lea d, [bp + -3] ; $xl
13896  5789 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13897  578C FD 39         mov c, b ; And place it into C
13898  578E 2A            mov b, [d] ; Lower Word in B
13899  578F             ; --- START RELATIONAL
13900  578F D7            push a
13901  5790 FD D8         push g
13902  5792 11            mov a, b
13903  5793 FD 7A         mov g, c
13904  5795 FA F9 FF      lea d, [bp + -7] ; $al
13905  5798 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13906  579B FD 39         mov c, b ; And place it into C
13907  579D 2A            mov b, [d] ; Lower Word in B
13908  579E FD 81         sgu
13909  57A0 FD F1         pop g
13910  57A2 E4            pop a
13911  57A3             ; --- END RELATIONAL
13912  57A3 C0 00 00      cmp b, 0
13913  57A6 C6 B5 57      je _ternary225_false
13914  57A9             _ternary225_true:
13915  57A9 FA FD FF      lea d, [bp + -3] ; $xl
13916  57AC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13917  57AF FD 39         mov c, b ; And place it into C
13918  57B1 2A            mov b, [d] ; Lower Word in B
13919  57B2 0A BE 57      jmp _ternary225_exit
13920  57B5             _ternary225_false:
13921  57B5 FA F9 FF      lea d, [bp + -7] ; $al
13922  57B8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13923  57BB FD 39         mov c, b ; And place it into C
13924  57BD 2A            mov b, [d] ; Lower Word in B
13925  57BE             _ternary225_exit:
13926  57BE FD AB         swp b
13927  57C0 D8            push b
13928  57C1 07 DD 22      call print100
13929  57C4 51 02 00      add sp, 2
13930  57C7 FD AB         swp b
13931  57C9 D8            push b
13932  57CA 3B 73 66      mov d, _dist_1 ; $dist_1
13933  57CD 2A            mov b, [d]
13934  57CE FD AB         swp b
13935  57D0 D8            push b
13936  57D1 07 BA 07      call printf
13937  57D4 51 04 00      add sp, 4
13938  57D7             _if220_exit:
13939  57D7             _if219_exit:
13940  57D7             _if218_exit:
13941  57D7             _if210_exit:
13942  57D7 F9            leave
13943  57D8 09            ret
13944  57D9             
13945  57D9             ship_destroyed:
13946  57D9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13947  57DC             ; puts("The Enterprise has been destroyed. The Federation will be conquered.\n"); 
13948  57DC 26 0E 78      mov b, _s160 ; "The Enterprise has been destroyed. The Federation will be conquered.\n"
13949  57DF FD AB         swp b
13950  57E1 D8            push b
13951  57E2 07 BB 17      call puts
13952  57E5 51 02 00      add sp, 2
13953  57E8             ; end_of_time(); 
13954  57E8 07 ED 57      call end_of_time
13955  57EB F9            leave
13956  57EC 09            ret
13957  57ED             
13958  57ED             end_of_time:
13959  57ED F8 00 00      enter 0 ; (push bp; mov bp, sp)
13960  57F0             ; printf("It is stardate %d.\n\n",  FROM_FIXED(stardate)); 
13961  57F0 3B A2 64      mov d, _stardate ; $stardate
13962  57F3 2A            mov b, [d]
13963  57F4 FD AB         swp b
13964  57F6 D8            push b
13965  57F7 07 B7 1F      call FROM_FIXED
13966  57FA 51 02 00      add sp, 2
13967  57FD FD AB         swp b
13968  57FF D8            push b
13969  5800 26 54 78      mov b, _s161 ; "It is stardate %d.\n\n"
13970  5803 FD AB         swp b
13971  5805 D8            push b
13972  5806 07 BA 07      call printf
13973  5809 51 04 00      add sp, 4
13974  580C             ; resign_commision(); 
13975  580C 07 11 58      call resign_commision
13976  580F F9            leave
13977  5810 09            ret
13978  5811             
13979  5811             resign_commision:
13980  5811 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13981  5814             ; printf("There were %d Klingon Battlecruisers left at the end of your mission.\n\n", klingons_left); 
13982  5814 3B 7C 64      mov d, _klingons_left ; $klingons_left
13983  5817 32            mov bl, [d]
13984  5818 A7 00         mov bh, 0
13985  581A DD            push bl
13986  581B 26 69 78      mov b, _s162 ; "There were %d Klingon Battlecruisers left at the end of your mission.\n\n"
13987  581E FD AB         swp b
13988  5820 D8            push b
13989  5821 07 BA 07      call printf
13990  5824 51 03 00      add sp, 3
13991  5827             ; end_of_game(); 
13992  5827 07 B3 58      call end_of_game
13993  582A F9            leave
13994  582B 09            ret
13995  582C             
13996  582C             won_game:
13997  582C F8 00 00      enter 0 ; (push bp; mov bp, sp)
13998  582F             ; puts("Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"); 
13999  582F 26 B1 78      mov b, _s163 ; "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"
14000  5832 FD AB         swp b
14001  5834 D8            push b
14002  5835 07 BB 17      call puts
14003  5838 51 02 00      add sp, 2
14004  583B             ; if (FROM_FIXED(stardate) - time_start > 0) 
14005  583B             _if226_cond:
14006  583B 3B A2 64      mov d, _stardate ; $stardate
14007  583E 2A            mov b, [d]
14008  583F FD AB         swp b
14009  5841 D8            push b
14010  5842 07 B7 1F      call FROM_FIXED
14011  5845 51 02 00      add sp, 2
14012  5848             ; --- START TERMS
14013  5848 D7            push a
14014  5849 11            mov a, b
14015  584A 3B 86 64      mov d, _time_start ; $time_start
14016  584D 2A            mov b, [d]
14017  584E 60            sub a, b
14018  584F 27            mov b, a
14019  5850 E4            pop a
14020  5851             ; --- END TERMS
14021  5851             ; --- START RELATIONAL
14022  5851 D7            push a
14023  5852 11            mov a, b
14024  5853 26 00 00      mov b, $0
14025  5856 B0            cmp a, b
14026  5857 FD 81         sgu ; > (unsigned)
14027  5859 E4            pop a
14028  585A             ; --- END RELATIONAL
14029  585A C0 00 00      cmp b, 0
14030  585D C6 AE 58      je _if226_exit
14031  5860             _if226_true:
14032  5860             ; printf("Your efficiency rating is %s\n", 
14033  5860 3B 7B 64      mov d, _total_klingons ; $total_klingons
14034  5863 32            mov bl, [d]
14035  5864 A7 00         mov bh, 0
14036  5866 FD AB         swp b
14037  5868 D8            push b
14038  5869 07 C8 1F      call TO_FIXED00
14039  586C 51 02 00      add sp, 2
14040  586F             ; --- START FACTORS
14041  586F D7            push a
14042  5870 11            mov a, b
14043  5871 3B A2 64      mov d, _stardate ; $stardate
14044  5874 2A            mov b, [d]
14045  5875 FD AB         swp b
14046  5877 D8            push b
14047  5878 07 B7 1F      call FROM_FIXED
14048  587B 51 02 00      add sp, 2
14049  587E             ; --- START TERMS
14050  587E D7            push a
14051  587F 11            mov a, b
14052  5880 3B 86 64      mov d, _time_start ; $time_start
14053  5883 2A            mov b, [d]
14054  5884 60            sub a, b
14055  5885 27            mov b, a
14056  5886 E4            pop a
14057  5887             ; --- END TERMS
14058  5887 AE            div a, b
14059  5888 27            mov b, a
14060  5889 E4            pop a
14061  588A             ; --- END FACTORS
14062  588A FD AB         swp b
14063  588C D8            push b
14064  588D 07 78 62      call square00
14065  5890 51 02 00      add sp, 2
14066  5893 FD AB         swp b
14067  5895 D8            push b
14068  5896 07 DD 22      call print100
14069  5899 51 02 00      add sp, 2
14070  589C FD AB         swp b
14071  589E D8            push b
14072  589F 26 19 79      mov b, _s164 ; "Your efficiency rating is %s\n"
14073  58A2 FD AB         swp b
14074  58A4 D8            push b
14075  58A5 07 BA 07      call printf
14076  58A8 51 04 00      add sp, 4
14077  58AB 0A AE 58      jmp _if226_exit
14078  58AE             _if226_exit:
14079  58AE             ; end_of_game(); 
14080  58AE 07 B3 58      call end_of_game
14081  58B1 F9            leave
14082  58B2 09            ret
14083  58B3             
14084  58B3             end_of_game:
14085  58B3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14086  58B6             ; char x[4]; 
14087  58B6 52 04 00      sub sp, 4
14088  58B9             ; if (starbases_left > 0) { 
14089  58B9             _if227_cond:
14090  58B9 3B A6 63      mov d, _starbases_left ; $starbases_left
14091  58BC 32            mov bl, [d]
14092  58BD A7 00         mov bh, 0
14093  58BF             ; --- START RELATIONAL
14094  58BF D7            push a
14095  58C0 11            mov a, b
14096  58C1 26 00 00      mov b, $0
14097  58C4 B0            cmp a, b
14098  58C5 FD 7F         sgt ; >
14099  58C7 E4            pop a
14100  58C8             ; --- END RELATIONAL
14101  58C8 C0 00 00      cmp b, 0
14102  58CB C6 3C 59      je _if227_exit
14103  58CE             _if227_true:
14104  58CE             ; puts("The Federation is in need of a new starship commander"); 
14105  58CE 26 37 79      mov b, _s165 ; "The Federation is in need of a new starship commander"
14106  58D1 FD AB         swp b
14107  58D3 D8            push b
14108  58D4 07 BB 17      call puts
14109  58D7 51 02 00      add sp, 2
14110  58DA             ; puts(" for a similar mission.\n"); 
14111  58DA 26 6D 79      mov b, _s166 ; " for a similar mission.\n"
14112  58DD FD AB         swp b
14113  58DF D8            push b
14114  58E0 07 BB 17      call puts
14115  58E3 51 02 00      add sp, 2
14116  58E6             ; puts("If there is a volunteer, let him step forward and"); 
14117  58E6 26 86 79      mov b, _s167 ; "If there is a volunteer, let him step forward and"
14118  58E9 FD AB         swp b
14119  58EB D8            push b
14120  58EC 07 BB 17      call puts
14121  58EF 51 02 00      add sp, 2
14122  58F2             ; puts(" enter aye: "); 
14123  58F2 26 B8 79      mov b, _s168 ; " enter aye: "
14124  58F5 FD AB         swp b
14125  58F7 D8            push b
14126  58F8 07 BB 17      call puts
14127  58FB 51 02 00      add sp, 2
14128  58FE             ; input(x,4); 
14129  58FE 26 04 00      mov b, $4
14130  5901 DD            push bl
14131  5902 FA FD FF      lea d, [bp + -3] ; $x
14132  5905 2D            mov b, d
14133  5906 FD AB         swp b
14134  5908 D8            push b
14135  5909 07 4B 20      call input
14136  590C 51 03 00      add sp, 3
14137  590F             ; if (!strncmp(x, "aye", 3)) 
14138  590F             _if228_cond:
14139  590F 26 03 00      mov b, $3
14140  5912 FD AB         swp b
14141  5914 D8            push b
14142  5915 26 C5 79      mov b, _s169 ; "aye"
14143  5918 FD AB         swp b
14144  591A D8            push b
14145  591B FA FD FF      lea d, [bp + -3] ; $x
14146  591E 2D            mov b, d
14147  591F FD AB         swp b
14148  5921 D8            push b
14149  5922 07 D3 04      call strncmp
14150  5925 51 06 00      add sp, 6
14151  5928 C0 00 00      cmp b, 0
14152  592B FD 71         seq ; !
14153  592D C0 00 00      cmp b, 0
14154  5930 C6 39 59      je _if228_exit
14155  5933             _if228_true:
14156  5933             ; new_game(); 
14157  5933 07 40 24      call new_game
14158  5936 0A 39 59      jmp _if228_exit
14159  5939             _if228_exit:
14160  5939 0A 3C 59      jmp _if227_exit
14161  593C             _if227_exit:
14162  593C             ; exit(); 
14163  593C 07 D7 05      call exit
14164  593F F9            leave
14165  5940 09            ret
14166  5941             
14167  5941             klingons_move:
14168  5941 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14169  5944             ; int i; 
14170  5944 52 02 00      sub sp, 2
14171  5947             ; struct klingon *k; 
14172  5947 52 02 00      sub sp, 2
14173  594A             ; k = &kdata; 
14174  594A FA FD FF      lea d, [bp + -3] ; $k
14175  594D DA            push d
14176  594E 3B 6E 64      mov d, _kdata_data ; $kdata
14177  5951 2D            mov b, d
14178  5952 E7            pop d
14179  5953 FD 43         mov [d], b
14180  5955             ; for (i = 0; i <= 2; i++) { 
14181  5955             _for229_init:
14182  5955 FA FF FF      lea d, [bp + -1] ; $i
14183  5958 DA            push d
14184  5959 26 00 00      mov b, $0
14185  595C E7            pop d
14186  595D FD 43         mov [d], b
14187  595F             _for229_cond:
14188  595F FA FF FF      lea d, [bp + -1] ; $i
14189  5962 2A            mov b, [d]
14190  5963             ; --- START RELATIONAL
14191  5963 D7            push a
14192  5964 11            mov a, b
14193  5965 26 02 00      mov b, $2
14194  5968 B0            cmp a, b
14195  5969 FD 74         sle ; <= (signed)
14196  596B E4            pop a
14197  596C             ; --- END RELATIONAL
14198  596C C0 00 00      cmp b, 0
14199  596F C6 DD 59      je _for229_exit
14200  5972             _for229_block:
14201  5972             ; if (k->energy > 0) { 
14202  5972             _if230_cond:
14203  5972 FA FD FF      lea d, [bp + -3] ; $k
14204  5975 FD 2A         mov d, [d]
14205  5977 58 02 00      add d, 2
14206  597A 2A            mov b, [d]
14207  597B             ; --- START RELATIONAL
14208  597B D7            push a
14209  597C 11            mov a, b
14210  597D 26 00 00      mov b, $0
14211  5980 B0            cmp a, b
14212  5981 FD 7F         sgt ; >
14213  5983 E4            pop a
14214  5984             ; --- END RELATIONAL
14215  5984 C0 00 00      cmp b, 0
14216  5987 C6 BC 59      je _if230_exit
14217  598A             _if230_true:
14218  598A             ; wipe_klingon(k); 
14219  598A FA FD FF      lea d, [bp + -3] ; $k
14220  598D 2A            mov b, [d]
14221  598E FD AB         swp b
14222  5990 D8            push b
14223  5991 07 00 3F      call wipe_klingon
14224  5994 51 02 00      add sp, 2
14225  5997             ; find_set_empty_place( 	3        , &k->y, &k->x); 
14226  5997 FA FD FF      lea d, [bp + -3] ; $k
14227  599A FD 2A         mov d, [d]
14228  599C 58 01 00      add d, 1
14229  599F 2D            mov b, d
14230  59A0 FD AB         swp b
14231  59A2 D8            push b
14232  59A3 FA FD FF      lea d, [bp + -3] ; $k
14233  59A6 FD 2A         mov d, [d]
14234  59A8 58 00 00      add d, 0
14235  59AB 2D            mov b, d
14236  59AC FD AB         swp b
14237  59AE D8            push b
14238  59AF 26 03 00      mov b, $3
14239  59B2 DD            push bl
14240  59B3 07 7B 5F      call find_set_empty_place
14241  59B6 51 05 00      add sp, 5
14242  59B9 0A BC 59      jmp _if230_exit
14243  59BC             _if230_exit:
14244  59BC             ; k++; 
14245  59BC FA FD FF      lea d, [bp + -3] ; $k
14246  59BF 2A            mov b, [d]
14247  59C0 FD 77         inc b
14248  59C2 FD 77         inc b
14249  59C4 FA FD FF      lea d, [bp + -3] ; $k
14250  59C7 FD 43         mov [d], b
14251  59C9 FD 7D         dec b
14252  59CB FD 7D         dec b
14253  59CD             _for229_update:
14254  59CD FA FF FF      lea d, [bp + -1] ; $i
14255  59D0 2A            mov b, [d]
14256  59D1 FD 77         inc b
14257  59D3 FA FF FF      lea d, [bp + -1] ; $i
14258  59D6 FD 43         mov [d], b
14259  59D8 FD 7D         dec b
14260  59DA 0A 5F 59      jmp _for229_cond
14261  59DD             _for229_exit:
14262  59DD             ; klingons_shoot(); 
14263  59DD 07 E2 59      call klingons_shoot
14264  59E0 F9            leave
14265  59E1 09            ret
14266  59E2             
14267  59E2             klingons_shoot:
14268  59E2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14269  59E5             ; unsigned char                         r; 
14270  59E5 52 01 00      sub sp, 1
14271  59E8             ; long unsigned int        h; 
14272  59E8 52 04 00      sub sp, 4
14273  59EB             ; unsigned char                         i; 
14274  59EB 52 01 00      sub sp, 1
14275  59EE             ; struct klingon *k; 
14276  59EE 52 02 00      sub sp, 2
14277  59F1             ; long unsigned int        ratio; 
14278  59F1 52 04 00      sub sp, 4
14279  59F4             ; k = &kdata; 
14280  59F4 FA F9 FF      lea d, [bp + -7] ; $k
14281  59F7 DA            push d
14282  59F8 3B 6E 64      mov d, _kdata_data ; $kdata
14283  59FB 2D            mov b, d
14284  59FC E7            pop d
14285  59FD FD 43         mov [d], b
14286  59FF             ; if (klingons <= 0) 
14287  59FF             _if231_cond:
14288  59FF 3B 7A 64      mov d, _klingons ; $klingons
14289  5A02 32            mov bl, [d]
14290  5A03 A7 00         mov bh, 0
14291  5A05             ; --- START RELATIONAL
14292  5A05 D7            push a
14293  5A06 11            mov a, b
14294  5A07 26 00 00      mov b, $0
14295  5A0A B0            cmp a, b
14296  5A0B FD 76         sleu ; <= (unsigned)
14297  5A0D E4            pop a
14298  5A0E             ; --- END RELATIONAL
14299  5A0E C0 00 00      cmp b, 0
14300  5A11 C6 19 5A      je _if231_exit
14301  5A14             _if231_true:
14302  5A14             ; return; 
14303  5A14 F9            leave
14304  5A15 09            ret
14305  5A16 0A 19 5A      jmp _if231_exit
14306  5A19             _if231_exit:
14307  5A19             ; if (docked) { 
14308  5A19             _if232_cond:
14309  5A19 3B C7 63      mov d, _docked ; $docked
14310  5A1C 32            mov bl, [d]
14311  5A1D A7 00         mov bh, 0
14312  5A1F C0 00 00      cmp b, 0
14313  5A22 C6 36 5A      je _if232_exit
14314  5A25             _if232_true:
14315  5A25             ; puts("Starbase shields protect the Enterprise\n"); 
14316  5A25 26 C9 79      mov b, _s170 ; "Starbase shields protect the Enterprise\n"
14317  5A28 FD AB         swp b
14318  5A2A D8            push b
14319  5A2B 07 BB 17      call puts
14320  5A2E 51 02 00      add sp, 2
14321  5A31             ; return; 
14322  5A31 F9            leave
14323  5A32 09            ret
14324  5A33 0A 36 5A      jmp _if232_exit
14325  5A36             _if232_exit:
14326  5A36             ; for (i = 0; i <= 2; i++) { 
14327  5A36             _for233_init:
14328  5A36 FA FB FF      lea d, [bp + -5] ; $i
14329  5A39 DA            push d
14330  5A3A 26 00 00      mov b, $0
14331  5A3D E7            pop d
14332  5A3E FD 3E         mov [d], bl
14333  5A40             _for233_cond:
14334  5A40 FA FB FF      lea d, [bp + -5] ; $i
14335  5A43 32            mov bl, [d]
14336  5A44 A7 00         mov bh, 0
14337  5A46             ; --- START RELATIONAL
14338  5A46 D7            push a
14339  5A47 11            mov a, b
14340  5A48 26 02 00      mov b, $2
14341  5A4B B0            cmp a, b
14342  5A4C FD 76         sleu ; <= (unsigned)
14343  5A4E E4            pop a
14344  5A4F             ; --- END RELATIONAL
14345  5A4F C0 00 00      cmp b, 0
14346  5A52 C6 CA 5C      je _for233_exit
14347  5A55             _for233_block:
14348  5A55             ; if (k->energy > 0) { 
14349  5A55             _if234_cond:
14350  5A55 FA F9 FF      lea d, [bp + -7] ; $k
14351  5A58 FD 2A         mov d, [d]
14352  5A5A 58 02 00      add d, 2
14353  5A5D 2A            mov b, [d]
14354  5A5E             ; --- START RELATIONAL
14355  5A5E D7            push a
14356  5A5F 11            mov a, b
14357  5A60 26 00 00      mov b, $0
14358  5A63 B0            cmp a, b
14359  5A64 FD 7F         sgt ; >
14360  5A66 E4            pop a
14361  5A67             ; --- END RELATIONAL
14362  5A67 C0 00 00      cmp b, 0
14363  5A6A C6 A7 5C      je _if234_exit
14364  5A6D             _if234_true:
14365  5A6D             ; h = k->energy * (200UL + get_rand(100)); 
14366  5A6D FA FC FF      lea d, [bp + -4] ; $h
14367  5A70 DA            push d
14368  5A71 FA F9 FF      lea d, [bp + -7] ; $k
14369  5A74 FD 2A         mov d, [d]
14370  5A76 58 02 00      add d, 2
14371  5A79 2A            mov b, [d]
14372  5A7A             ; --- START FACTORS
14373  5A7A D7            push a
14374  5A7B 11            mov a, b
14375  5A7C 26 C8 00      mov b, 200
14376  5A7F 38 00 00      mov c, 0
14377  5A82             ; --- START TERMS
14378  5A82 D7            push a
14379  5A83 FD D8         push g
14380  5A85 11            mov a, b
14381  5A86 FD 7A         mov g, c
14382  5A88 26 64 00      mov b, $64
14383  5A8B FD AB         swp b
14384  5A8D D8            push b
14385  5A8E 07 EB 1F      call get_rand
14386  5A91 51 02 00      add sp, 2
14387  5A94 54            add a, b
14388  5A95 D7            push a
14389  5A96 FD 12         mov a, g
14390  5A98 28            mov b, c
14391  5A99 5C            adc a, b
14392  5A9A 39            mov c, a
14393  5A9B E5            pop b
14394  5A9C FD F1         pop g
14395  5A9E E4            pop a
14396  5A9F             ; --- END TERMS
14397  5A9F AC            mul a, b ; *
14398  5AA0 11            mov a, b
14399  5AA1 27            mov b, a
14400  5AA2 E4            pop a
14401  5AA3             ; --- END FACTORS
14402  5AA3 E7            pop d
14403  5AA4 FD 43         mov [d], b
14404  5AA6 28            mov b, c
14405  5AA7 FD 44 02 00   mov [d + 2], b
14406  5AAB             ; h =h* 100;	/* Ready for division in fixed */ 
14407  5AAB FA FC FF      lea d, [bp + -4] ; $h
14408  5AAE DA            push d
14409  5AAF FA FC FF      lea d, [bp + -4] ; $h
14410  5AB2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14411  5AB5 FD 39         mov c, b ; And place it into C
14412  5AB7 2A            mov b, [d] ; Lower Word in B
14413  5AB8             ; --- START FACTORS
14414  5AB8 D7            push a
14415  5AB9 11            mov a, b
14416  5ABA 26 64 00      mov b, $64
14417  5ABD AC            mul a, b ; *
14418  5ABE 11            mov a, b
14419  5ABF 27            mov b, a
14420  5AC0 E4            pop a
14421  5AC1             ; --- END FACTORS
14422  5AC1 E7            pop d
14423  5AC2 FD 43         mov [d], b
14424  5AC4 28            mov b, c
14425  5AC5 FD 44 02 00   mov [d + 2], b
14426  5AC9             ; h =h/ distance_to(k); 
14427  5AC9 FA FC FF      lea d, [bp + -4] ; $h
14428  5ACC DA            push d
14429  5ACD FA FC FF      lea d, [bp + -4] ; $h
14430  5AD0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14431  5AD3 FD 39         mov c, b ; And place it into C
14432  5AD5 2A            mov b, [d] ; Lower Word in B
14433  5AD6             ; --- START FACTORS
14434  5AD6 D7            push a
14435  5AD7 11            mov a, b
14436  5AD8 FA F9 FF      lea d, [bp + -7] ; $k
14437  5ADB 2A            mov b, [d]
14438  5ADC FD AB         swp b
14439  5ADE D8            push b
14440  5ADF 07 F0 62      call distance_to
14441  5AE2 51 02 00      add sp, 2
14442  5AE5 AE            div a, b
14443  5AE6 27            mov b, a
14444  5AE7 E4            pop a
14445  5AE8             ; --- END FACTORS
14446  5AE8 E7            pop d
14447  5AE9 FD 43         mov [d], b
14448  5AEB 28            mov b, c
14449  5AEC FD 44 02 00   mov [d + 2], b
14450  5AF0             ; shield = shield - FROM_FIXED00(h); 
14451  5AF0 3B 83 64      mov d, _shield ; $shield
14452  5AF3 DA            push d
14453  5AF4 3B 83 64      mov d, _shield ; $shield
14454  5AF7 2A            mov b, [d]
14455  5AF8             ; --- START TERMS
14456  5AF8 D7            push a
14457  5AF9 11            mov a, b
14458  5AFA FA FC FF      lea d, [bp + -4] ; $h
14459  5AFD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14460  5B00 FD 39         mov c, b ; And place it into C
14461  5B02 2A            mov b, [d] ; Lower Word in B
14462  5B03 FD AB         swp b
14463  5B05 D8            push b
14464  5B06 07 DA 1F      call FROM_FIXED00
14465  5B09 51 02 00      add sp, 2
14466  5B0C 60            sub a, b
14467  5B0D 27            mov b, a
14468  5B0E E4            pop a
14469  5B0F             ; --- END TERMS
14470  5B0F E7            pop d
14471  5B10 FD 43         mov [d], b
14472  5B12             ; k->energy = (k->energy * 100) / (300 + get_rand(100)); 
14473  5B12 FA F9 FF      lea d, [bp + -7] ; $k
14474  5B15 FD 2A         mov d, [d]
14475  5B17 58 02 00      add d, 2
14476  5B1A DA            push d
14477  5B1B FA F9 FF      lea d, [bp + -7] ; $k
14478  5B1E FD 2A         mov d, [d]
14479  5B20 58 02 00      add d, 2
14480  5B23 2A            mov b, [d]
14481  5B24             ; --- START FACTORS
14482  5B24 D7            push a
14483  5B25 11            mov a, b
14484  5B26 26 64 00      mov b, $64
14485  5B29 AC            mul a, b ; *
14486  5B2A 11            mov a, b
14487  5B2B 27            mov b, a
14488  5B2C E4            pop a
14489  5B2D             ; --- END FACTORS
14490  5B2D             ; --- START FACTORS
14491  5B2D D7            push a
14492  5B2E 11            mov a, b
14493  5B2F 26 2C 01      mov b, $12c
14494  5B32             ; --- START TERMS
14495  5B32 D7            push a
14496  5B33 11            mov a, b
14497  5B34 26 64 00      mov b, $64
14498  5B37 FD AB         swp b
14499  5B39 D8            push b
14500  5B3A 07 EB 1F      call get_rand
14501  5B3D 51 02 00      add sp, 2
14502  5B40 56            add b, a
14503  5B41 E4            pop a
14504  5B42             ; --- END TERMS
14505  5B42 AE            div a, b
14506  5B43 27            mov b, a
14507  5B44 E4            pop a
14508  5B45             ; --- END FACTORS
14509  5B45 E7            pop d
14510  5B46 FD 43         mov [d], b
14511  5B48             ; printf("%d unit hit on Enterprise from sector %d, %d\n", (unsigned)FROM_FIXED00(h), k->y, k->x); 
14512  5B48 FA F9 FF      lea d, [bp + -7] ; $k
14513  5B4B FD 2A         mov d, [d]
14514  5B4D 58 01 00      add d, 1
14515  5B50 32            mov bl, [d]
14516  5B51 A7 00         mov bh, 0
14517  5B53 DD            push bl
14518  5B54 FA F9 FF      lea d, [bp + -7] ; $k
14519  5B57 FD 2A         mov d, [d]
14520  5B59 58 00 00      add d, 0
14521  5B5C 32            mov bl, [d]
14522  5B5D A7 00         mov bh, 0
14523  5B5F DD            push bl
14524  5B60 FA FC FF      lea d, [bp + -4] ; $h
14525  5B63 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14526  5B66 FD 39         mov c, b ; And place it into C
14527  5B68 2A            mov b, [d] ; Lower Word in B
14528  5B69 FD AB         swp b
14529  5B6B D8            push b
14530  5B6C 26 F2 79      mov b, _s171 ; "%d unit hit on Enterprise from sector %d, %d\n"
14531  5B6F FD AB         swp b
14532  5B71 D8            push b
14533  5B72 07 BA 07      call printf
14534  5B75 51 06 00      add sp, 6
14535  5B78             ; if (shield <= 0) { 
14536  5B78             _if235_cond:
14537  5B78 3B 83 64      mov d, _shield ; $shield
14538  5B7B 2A            mov b, [d]
14539  5B7C             ; --- START RELATIONAL
14540  5B7C D7            push a
14541  5B7D 11            mov a, b
14542  5B7E 26 00 00      mov b, $0
14543  5B81 B0            cmp a, b
14544  5B82 FD 74         sle ; <= (signed)
14545  5B84 E4            pop a
14546  5B85             ; --- END RELATIONAL
14547  5B85 C0 00 00      cmp b, 0
14548  5B88 C6 9B 5B      je _if235_exit
14549  5B8B             _if235_true:
14550  5B8B             ; putchar('\n'); 
14551  5B8B 26 0A 00      mov b, $a
14552  5B8E DD            push bl
14553  5B8F 07 85 17      call putchar
14554  5B92 51 01 00      add sp, 1
14555  5B95             ; ship_destroyed(); 
14556  5B95 07 D9 57      call ship_destroyed
14557  5B98 0A 9B 5B      jmp _if235_exit
14558  5B9B             _if235_exit:
14559  5B9B             ; printf("    <Shields down to %d units>\n\n", shield); 
14560  5B9B 3B 83 64      mov d, _shield ; $shield
14561  5B9E 2A            mov b, [d]
14562  5B9F FD AB         swp b
14563  5BA1 D8            push b
14564  5BA2 26 20 7A      mov b, _s172 ; "    <Shields down to %d units>\n\n"
14565  5BA5 FD AB         swp b
14566  5BA7 D8            push b
14567  5BA8 07 BA 07      call printf
14568  5BAB 51 04 00      add sp, 4
14569  5BAE             ; if (h >= 20) { 
14570  5BAE             _if236_cond:
14571  5BAE FA FC FF      lea d, [bp + -4] ; $h
14572  5BB1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14573  5BB4 FD 39         mov c, b ; And place it into C
14574  5BB6 2A            mov b, [d] ; Lower Word in B
14575  5BB7             ; --- START RELATIONAL
14576  5BB7 D7            push a
14577  5BB8 FD D8         push g
14578  5BBA 11            mov a, b
14579  5BBB FD 7A         mov g, c
14580  5BBD 26 14 00      mov b, $14
14581  5BC0 38 00 00      mov c, 0
14582  5BC3 FD 82         sgeu
14583  5BC5 FD F1         pop g
14584  5BC7 E4            pop a
14585  5BC8             ; --- END RELATIONAL
14586  5BC8 C0 00 00      cmp b, 0
14587  5BCB C6 A4 5C      je _if236_exit
14588  5BCE             _if236_true:
14589  5BCE             ; ratio = ((int)h)/shield; 
14590  5BCE FA F5 FF      lea d, [bp + -11] ; $ratio
14591  5BD1 DA            push d
14592  5BD2 FA FC FF      lea d, [bp + -4] ; $h
14593  5BD5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14594  5BD8 FD 39         mov c, b ; And place it into C
14595  5BDA 2A            mov b, [d] ; Lower Word in B
14596  5BDB             ; --- START FACTORS
14597  5BDB D7            push a
14598  5BDC 11            mov a, b
14599  5BDD 3B 83 64      mov d, _shield ; $shield
14600  5BE0 2A            mov b, [d]
14601  5BE1 AE            div a, b
14602  5BE2 27            mov b, a
14603  5BE3 E4            pop a
14604  5BE4             ; --- END FACTORS
14605  5BE4 E7            pop d
14606  5BE5 FD 43         mov [d], b
14607  5BE7 28            mov b, c
14608  5BE8 FD 44 02 00   mov [d + 2], b
14609  5BEC             ; if (get_rand(10) <= 6 && ratio > 2) { 
14610  5BEC             _if237_cond:
14611  5BEC 26 0A 00      mov b, $a
14612  5BEF FD AB         swp b
14613  5BF1 D8            push b
14614  5BF2 07 EB 1F      call get_rand
14615  5BF5 51 02 00      add sp, 2
14616  5BF8             ; --- START RELATIONAL
14617  5BF8 D7            push a
14618  5BF9 11            mov a, b
14619  5BFA 26 06 00      mov b, $6
14620  5BFD B0            cmp a, b
14621  5BFE FD 74         sle ; <= (signed)
14622  5C00 E4            pop a
14623  5C01             ; --- END RELATIONAL
14624  5C01             ; --- START LOGICAL AND
14625  5C01 D7            push a
14626  5C02 11            mov a, b
14627  5C03 FA F5 FF      lea d, [bp + -11] ; $ratio
14628  5C06 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14629  5C09 FD 39         mov c, b ; And place it into C
14630  5C0B 2A            mov b, [d] ; Lower Word in B
14631  5C0C             ; --- START RELATIONAL
14632  5C0C D7            push a
14633  5C0D FD D8         push g
14634  5C0F 11            mov a, b
14635  5C10 FD 7A         mov g, c
14636  5C12 26 02 00      mov b, $2
14637  5C15 38 00 00      mov c, 0
14638  5C18 FD 81         sgu
14639  5C1A FD F1         pop g
14640  5C1C E4            pop a
14641  5C1D             ; --- END RELATIONAL
14642  5C1D FD 22 00 00   mov g, 0
14643  5C21 FD B1         sand32 ga, cb
14644  5C23 E4            pop a
14645  5C24             ; --- END LOGICAL AND
14646  5C24 C0 00 00      cmp b, 0
14647  5C27 C6 A1 5C      je _if237_exit
14648  5C2A             _if237_true:
14649  5C2A             ; r = rand8(); 
14650  5C2A FA 00 00      lea d, [bp + 0] ; $r
14651  5C2D DA            push d
14652  5C2E 07 3A 20      call rand8
14653  5C31 E7            pop d
14654  5C32 FD 3E         mov [d], bl
14655  5C34             ; damage[r] =damage[r] - ratio + get_rand(50); 
14656  5C34 3B 8A 64      mov d, _damage_data ; $damage
14657  5C37 D7            push a
14658  5C38 DA            push d
14659  5C39 FA 00 00      lea d, [bp + 0] ; $r
14660  5C3C 32            mov bl, [d]
14661  5C3D A7 00         mov bh, 0
14662  5C3F E7            pop d
14663  5C40 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14664  5C44 E4            pop a
14665  5C45 DA            push d
14666  5C46 3B 8A 64      mov d, _damage_data ; $damage
14667  5C49 D7            push a
14668  5C4A DA            push d
14669  5C4B FA 00 00      lea d, [bp + 0] ; $r
14670  5C4E 32            mov bl, [d]
14671  5C4F A7 00         mov bh, 0
14672  5C51 E7            pop d
14673  5C52 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14674  5C56 E4            pop a
14675  5C57 2A            mov b, [d]
14676  5C58             ; --- START TERMS
14677  5C58 D7            push a
14678  5C59 11            mov a, b
14679  5C5A FA F5 FF      lea d, [bp + -11] ; $ratio
14680  5C5D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14681  5C60 FD 39         mov c, b ; And place it into C
14682  5C62 2A            mov b, [d] ; Lower Word in B
14683  5C63 60            sub a, b
14684  5C64 27            mov b, a
14685  5C65 11            mov a, b
14686  5C66 FD 7A         mov g, c
14687  5C68 26 32 00      mov b, $32
14688  5C6B FD AB         swp b
14689  5C6D D8            push b
14690  5C6E 07 EB 1F      call get_rand
14691  5C71 51 02 00      add sp, 2
14692  5C74 54            add a, b
14693  5C75 D7            push a
14694  5C76 FD 12         mov a, g
14695  5C78 28            mov b, c
14696  5C79 5C            adc a, b
14697  5C7A 39            mov c, a
14698  5C7B E5            pop b
14699  5C7C E4            pop a
14700  5C7D             ; --- END TERMS
14701  5C7D E7            pop d
14702  5C7E FD 43         mov [d], b
14703  5C80             ; printf("Damage Control reports\n%s damaged by hit\n\n", get_device_name(r)); 
14704  5C80 FA 00 00      lea d, [bp + 0] ; $r
14705  5C83 32            mov bl, [d]
14706  5C84 A7 00         mov bh, 0
14707  5C86 FD AB         swp b
14708  5C88 D8            push b
14709  5C89 07 40 60      call get_device_name
14710  5C8C 51 02 00      add sp, 2
14711  5C8F FD AB         swp b
14712  5C91 D8            push b
14713  5C92 26 41 7A      mov b, _s173 ; "Damage Control reports\n%s damaged by hit\n\n"
14714  5C95 FD AB         swp b
14715  5C97 D8            push b
14716  5C98 07 BA 07      call printf
14717  5C9B 51 04 00      add sp, 4
14718  5C9E 0A A1 5C      jmp _if237_exit
14719  5CA1             _if237_exit:
14720  5CA1 0A A4 5C      jmp _if236_exit
14721  5CA4             _if236_exit:
14722  5CA4 0A A7 5C      jmp _if234_exit
14723  5CA7             _if234_exit:
14724  5CA7             ; k++; 
14725  5CA7 FA F9 FF      lea d, [bp + -7] ; $k
14726  5CAA 2A            mov b, [d]
14727  5CAB FD 77         inc b
14728  5CAD FD 77         inc b
14729  5CAF FA F9 FF      lea d, [bp + -7] ; $k
14730  5CB2 FD 43         mov [d], b
14731  5CB4 FD 7D         dec b
14732  5CB6 FD 7D         dec b
14733  5CB8             _for233_update:
14734  5CB8 FA FB FF      lea d, [bp + -5] ; $i
14735  5CBB 32            mov bl, [d]
14736  5CBC A7 00         mov bh, 0
14737  5CBE FD 77         inc b
14738  5CC0 FA FB FF      lea d, [bp + -5] ; $i
14739  5CC3 FD 43         mov [d], b
14740  5CC5 FD 7D         dec b
14741  5CC7 0A 40 5A      jmp _for233_cond
14742  5CCA             _for233_exit:
14743  5CCA F9            leave
14744  5CCB 09            ret
14745  5CCC             
14746  5CCC             repair_damage:
14747  5CCC F8 00 00      enter 0 ; (push bp; mov bp, sp)
14748  5CCF             ; int i; 
14749  5CCF 52 02 00      sub sp, 2
14750  5CD2             ; int d1; 
14751  5CD2 52 02 00      sub sp, 2
14752  5CD5             ; unsigned int        repair_factor;		/* Repair Factor */ 
14753  5CD5 52 02 00      sub sp, 2
14754  5CD8             ; repair_factor = warp; 
14755  5CD8 FA FB FF      lea d, [bp + -5] ; $repair_factor
14756  5CDB DA            push d
14757  5CDC FA 05 00      lea d, [bp + 5] ; $warp
14758  5CDF 2A            mov b, [d]
14759  5CE0 E7            pop d
14760  5CE1 FD 43         mov [d], b
14761  5CE3             ; if (warp >= 100) 
14762  5CE3             _if238_cond:
14763  5CE3 FA 05 00      lea d, [bp + 5] ; $warp
14764  5CE6 2A            mov b, [d]
14765  5CE7             ; --- START RELATIONAL
14766  5CE7 D7            push a
14767  5CE8 11            mov a, b
14768  5CE9 26 64 00      mov b, $64
14769  5CEC B0            cmp a, b
14770  5CED FD 82         sgeu ; >= (unsigned)
14771  5CEF E4            pop a
14772  5CF0             ; --- END RELATIONAL
14773  5CF0 C0 00 00      cmp b, 0
14774  5CF3 C6 0C 5D      je _if238_exit
14775  5CF6             _if238_true:
14776  5CF6             ; repair_factor = TO_FIXED00(1); 
14777  5CF6 FA FB FF      lea d, [bp + -5] ; $repair_factor
14778  5CF9 DA            push d
14779  5CFA 26 01 00      mov b, $1
14780  5CFD FD AB         swp b
14781  5CFF D8            push b
14782  5D00 07 C8 1F      call TO_FIXED00
14783  5D03 51 02 00      add sp, 2
14784  5D06 E7            pop d
14785  5D07 FD 43         mov [d], b
14786  5D09 0A 0C 5D      jmp _if238_exit
14787  5D0C             _if238_exit:
14788  5D0C             ; for (i = 1; i <= 8; i++) { 
14789  5D0C             _for239_init:
14790  5D0C FA FF FF      lea d, [bp + -1] ; $i
14791  5D0F DA            push d
14792  5D10 26 01 00      mov b, $1
14793  5D13 E7            pop d
14794  5D14 FD 43         mov [d], b
14795  5D16             _for239_cond:
14796  5D16 FA FF FF      lea d, [bp + -1] ; $i
14797  5D19 2A            mov b, [d]
14798  5D1A             ; --- START RELATIONAL
14799  5D1A D7            push a
14800  5D1B 11            mov a, b
14801  5D1C 26 08 00      mov b, $8
14802  5D1F B0            cmp a, b
14803  5D20 FD 74         sle ; <= (signed)
14804  5D22 E4            pop a
14805  5D23             ; --- END RELATIONAL
14806  5D23 C0 00 00      cmp b, 0
14807  5D26 C6 5F 5E      je _for239_exit
14808  5D29             _for239_block:
14809  5D29             ; if (damage[i] < 0) { 
14810  5D29             _if240_cond:
14811  5D29 3B 8A 64      mov d, _damage_data ; $damage
14812  5D2C D7            push a
14813  5D2D DA            push d
14814  5D2E FA FF FF      lea d, [bp + -1] ; $i
14815  5D31 2A            mov b, [d]
14816  5D32 E7            pop d
14817  5D33 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14818  5D37 E4            pop a
14819  5D38 2A            mov b, [d]
14820  5D39             ; --- START RELATIONAL
14821  5D39 D7            push a
14822  5D3A 11            mov a, b
14823  5D3B 26 00 00      mov b, $0
14824  5D3E B0            cmp a, b
14825  5D3F FD 73         slt ; < (signed)
14826  5D41 E4            pop a
14827  5D42             ; --- END RELATIONAL
14828  5D42 C0 00 00      cmp b, 0
14829  5D45 C6 4F 5E      je _if240_exit
14830  5D48             _if240_true:
14831  5D48             ; damage[i] = damage[i] + repair_factor; 
14832  5D48 3B 8A 64      mov d, _damage_data ; $damage
14833  5D4B D7            push a
14834  5D4C DA            push d
14835  5D4D FA FF FF      lea d, [bp + -1] ; $i
14836  5D50 2A            mov b, [d]
14837  5D51 E7            pop d
14838  5D52 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14839  5D56 E4            pop a
14840  5D57 DA            push d
14841  5D58 3B 8A 64      mov d, _damage_data ; $damage
14842  5D5B D7            push a
14843  5D5C DA            push d
14844  5D5D FA FF FF      lea d, [bp + -1] ; $i
14845  5D60 2A            mov b, [d]
14846  5D61 E7            pop d
14847  5D62 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14848  5D66 E4            pop a
14849  5D67 2A            mov b, [d]
14850  5D68             ; --- START TERMS
14851  5D68 D7            push a
14852  5D69 11            mov a, b
14853  5D6A FA FB FF      lea d, [bp + -5] ; $repair_factor
14854  5D6D 2A            mov b, [d]
14855  5D6E 56            add b, a
14856  5D6F E4            pop a
14857  5D70             ; --- END TERMS
14858  5D70 E7            pop d
14859  5D71 FD 43         mov [d], b
14860  5D73             ; if (damage[i] > -10 && damage[i] < 0)	/* -0.1 */ 
14861  5D73             _if241_cond:
14862  5D73 3B 8A 64      mov d, _damage_data ; $damage
14863  5D76 D7            push a
14864  5D77 DA            push d
14865  5D78 FA FF FF      lea d, [bp + -1] ; $i
14866  5D7B 2A            mov b, [d]
14867  5D7C E7            pop d
14868  5D7D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14869  5D81 E4            pop a
14870  5D82 2A            mov b, [d]
14871  5D83             ; --- START RELATIONAL
14872  5D83 D7            push a
14873  5D84 11            mov a, b
14874  5D85 26 F6 FF      mov b, $fff6
14875  5D88 B0            cmp a, b
14876  5D89 FD 7F         sgt ; >
14877  5D8B E4            pop a
14878  5D8C             ; --- END RELATIONAL
14879  5D8C             ; --- START LOGICAL AND
14880  5D8C D7            push a
14881  5D8D 11            mov a, b
14882  5D8E 3B 8A 64      mov d, _damage_data ; $damage
14883  5D91 D7            push a
14884  5D92 DA            push d
14885  5D93 FA FF FF      lea d, [bp + -1] ; $i
14886  5D96 2A            mov b, [d]
14887  5D97 E7            pop d
14888  5D98 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14889  5D9C E4            pop a
14890  5D9D 2A            mov b, [d]
14891  5D9E             ; --- START RELATIONAL
14892  5D9E D7            push a
14893  5D9F 11            mov a, b
14894  5DA0 26 00 00      mov b, $0
14895  5DA3 B0            cmp a, b
14896  5DA4 FD 73         slt ; < (signed)
14897  5DA6 E4            pop a
14898  5DA7             ; --- END RELATIONAL
14899  5DA7 FD A7         sand a, b
14900  5DA9 E4            pop a
14901  5DAA             ; --- END LOGICAL AND
14902  5DAA C0 00 00      cmp b, 0
14903  5DAD C6 CB 5D      je _if241_else
14904  5DB0             _if241_true:
14905  5DB0             ; damage[i] = -10; 
14906  5DB0 3B 8A 64      mov d, _damage_data ; $damage
14907  5DB3 D7            push a
14908  5DB4 DA            push d
14909  5DB5 FA FF FF      lea d, [bp + -1] ; $i
14910  5DB8 2A            mov b, [d]
14911  5DB9 E7            pop d
14912  5DBA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14913  5DBE E4            pop a
14914  5DBF DA            push d
14915  5DC0 26 0A 00      mov b, $a
14916  5DC3 FD 97         neg b
14917  5DC5 E7            pop d
14918  5DC6 FD 43         mov [d], b
14919  5DC8 0A 4C 5E      jmp _if241_exit
14920  5DCB             _if241_else:
14921  5DCB             ; if (damage[i] >= 0) { 
14922  5DCB             _if242_cond:
14923  5DCB 3B 8A 64      mov d, _damage_data ; $damage
14924  5DCE D7            push a
14925  5DCF DA            push d
14926  5DD0 FA FF FF      lea d, [bp + -1] ; $i
14927  5DD3 2A            mov b, [d]
14928  5DD4 E7            pop d
14929  5DD5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14930  5DD9 E4            pop a
14931  5DDA 2A            mov b, [d]
14932  5DDB             ; --- START RELATIONAL
14933  5DDB D7            push a
14934  5DDC 11            mov a, b
14935  5DDD 26 00 00      mov b, $0
14936  5DE0 B0            cmp a, b
14937  5DE1 FD 80         sge ; >=
14938  5DE3 E4            pop a
14939  5DE4             ; --- END RELATIONAL
14940  5DE4 C0 00 00      cmp b, 0
14941  5DE7 C6 4C 5E      je _if242_exit
14942  5DEA             _if242_true:
14943  5DEA             ; if (d1 != 1) { 
14944  5DEA             _if243_cond:
14945  5DEA FA FD FF      lea d, [bp + -3] ; $d1
14946  5DED 2A            mov b, [d]
14947  5DEE             ; --- START RELATIONAL
14948  5DEE D7            push a
14949  5DEF 11            mov a, b
14950  5DF0 26 01 00      mov b, $1
14951  5DF3 B0            cmp a, b
14952  5DF4 FD 72         sneq ; !=
14953  5DF6 E4            pop a
14954  5DF7             ; --- END RELATIONAL
14955  5DF7 C0 00 00      cmp b, 0
14956  5DFA C6 17 5E      je _if243_exit
14957  5DFD             _if243_true:
14958  5DFD             ; d1 = 1; 
14959  5DFD FA FD FF      lea d, [bp + -3] ; $d1
14960  5E00 DA            push d
14961  5E01 26 01 00      mov b, $1
14962  5E04 E7            pop d
14963  5E05 FD 43         mov [d], b
14964  5E07             ; puts(dcr_1); 
14965  5E07 3B 9D 65      mov d, _dcr_1 ; $dcr_1
14966  5E0A 2A            mov b, [d]
14967  5E0B FD AB         swp b
14968  5E0D D8            push b
14969  5E0E 07 BB 17      call puts
14970  5E11 51 02 00      add sp, 2
14971  5E14 0A 17 5E      jmp _if243_exit
14972  5E17             _if243_exit:
14973  5E17             ; printf("    %s repair completed\n\n", 
14974  5E17 FA FF FF      lea d, [bp + -1] ; $i
14975  5E1A 2A            mov b, [d]
14976  5E1B FD AB         swp b
14977  5E1D D8            push b
14978  5E1E 07 40 60      call get_device_name
14979  5E21 51 02 00      add sp, 2
14980  5E24 FD AB         swp b
14981  5E26 D8            push b
14982  5E27 26 6C 7A      mov b, _s174 ; "    %s repair completed\n\n"
14983  5E2A FD AB         swp b
14984  5E2C D8            push b
14985  5E2D 07 BA 07      call printf
14986  5E30 51 04 00      add sp, 4
14987  5E33             ; damage[i] = 0; 
14988  5E33 3B 8A 64      mov d, _damage_data ; $damage
14989  5E36 D7            push a
14990  5E37 DA            push d
14991  5E38 FA FF FF      lea d, [bp + -1] ; $i
14992  5E3B 2A            mov b, [d]
14993  5E3C E7            pop d
14994  5E3D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14995  5E41 E4            pop a
14996  5E42 DA            push d
14997  5E43 26 00 00      mov b, $0
14998  5E46 E7            pop d
14999  5E47 FD 43         mov [d], b
15000  5E49 0A 4C 5E      jmp _if242_exit
15001  5E4C             _if242_exit:
15002  5E4C             _if241_exit:
15003  5E4C 0A 4F 5E      jmp _if240_exit
15004  5E4F             _if240_exit:
15005  5E4F             _for239_update:
15006  5E4F FA FF FF      lea d, [bp + -1] ; $i
15007  5E52 2A            mov b, [d]
15008  5E53 FD 77         inc b
15009  5E55 FA FF FF      lea d, [bp + -1] ; $i
15010  5E58 FD 43         mov [d], b
15011  5E5A FD 7D         dec b
15012  5E5C 0A 16 5D      jmp _for239_cond
15013  5E5F             _for239_exit:
15014  5E5F             ; unsigned char                         r; 
15015  5E5F 52 01 00      sub sp, 1
15016  5E62             ; if (get_rand(10) <= 2) { 
15017  5E62             _if244_cond:
15018  5E62 26 0A 00      mov b, $a
15019  5E65 FD AB         swp b
15020  5E67 D8            push b
15021  5E68 07 EB 1F      call get_rand
15022  5E6B 51 02 00      add sp, 2
15023  5E6E             ; --- START RELATIONAL
15024  5E6E D7            push a
15025  5E6F 11            mov a, b
15026  5E70 26 02 00      mov b, $2
15027  5E73 B0            cmp a, b
15028  5E74 FD 74         sle ; <= (signed)
15029  5E76 E4            pop a
15030  5E77             ; --- END RELATIONAL
15031  5E77 C0 00 00      cmp b, 0
15032  5E7A C6 79 5F      je _if244_exit
15033  5E7D             _if244_true:
15034  5E7D             ; r = rand8(); 
15035  5E7D FA FA FF      lea d, [bp + -6] ; $r
15036  5E80 DA            push d
15037  5E81 07 3A 20      call rand8
15038  5E84 E7            pop d
15039  5E85 FD 3E         mov [d], bl
15040  5E87             ; if (get_rand(10) < 6) { 
15041  5E87             _if245_cond:
15042  5E87 26 0A 00      mov b, $a
15043  5E8A FD AB         swp b
15044  5E8C D8            push b
15045  5E8D 07 EB 1F      call get_rand
15046  5E90 51 02 00      add sp, 2
15047  5E93             ; --- START RELATIONAL
15048  5E93 D7            push a
15049  5E94 11            mov a, b
15050  5E95 26 06 00      mov b, $6
15051  5E98 B0            cmp a, b
15052  5E99 FD 73         slt ; < (signed)
15053  5E9B E4            pop a
15054  5E9C             ; --- END RELATIONAL
15055  5E9C C0 00 00      cmp b, 0
15056  5E9F C6 0F 5F      je _if245_else
15057  5EA2             _if245_true:
15058  5EA2             ; damage[r] =damage[r]- (get_rand(500) + 100); 
15059  5EA2 3B 8A 64      mov d, _damage_data ; $damage
15060  5EA5 D7            push a
15061  5EA6 DA            push d
15062  5EA7 FA FA FF      lea d, [bp + -6] ; $r
15063  5EAA 32            mov bl, [d]
15064  5EAB A7 00         mov bh, 0
15065  5EAD E7            pop d
15066  5EAE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
15067  5EB2 E4            pop a
15068  5EB3 DA            push d
15069  5EB4 3B 8A 64      mov d, _damage_data ; $damage
15070  5EB7 D7            push a
15071  5EB8 DA            push d
15072  5EB9 FA FA FF      lea d, [bp + -6] ; $r
15073  5EBC 32            mov bl, [d]
15074  5EBD A7 00         mov bh, 0
15075  5EBF E7            pop d
15076  5EC0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
15077  5EC4 E4            pop a
15078  5EC5 2A            mov b, [d]
15079  5EC6             ; --- START TERMS
15080  5EC6 D7            push a
15081  5EC7 11            mov a, b
15082  5EC8 26 F4 01      mov b, $1f4
15083  5ECB FD AB         swp b
15084  5ECD D8            push b
15085  5ECE 07 EB 1F      call get_rand
15086  5ED1 51 02 00      add sp, 2
15087  5ED4             ; --- START TERMS
15088  5ED4 D7            push a
15089  5ED5 11            mov a, b
15090  5ED6 26 64 00      mov b, $64
15091  5ED9 56            add b, a
15092  5EDA E4            pop a
15093  5EDB             ; --- END TERMS
15094  5EDB 60            sub a, b
15095  5EDC 27            mov b, a
15096  5EDD E4            pop a
15097  5EDE             ; --- END TERMS
15098  5EDE E7            pop d
15099  5EDF FD 43         mov [d], b
15100  5EE1             ; puts(dcr_1); 
15101  5EE1 3B 9D 65      mov d, _dcr_1 ; $dcr_1
15102  5EE4 2A            mov b, [d]
15103  5EE5 FD AB         swp b
15104  5EE7 D8            push b
15105  5EE8 07 BB 17      call puts
15106  5EEB 51 02 00      add sp, 2
15107  5EEE             ; printf("    %s damaged\n\n", get_device_name(r)); 
15108  5EEE FA FA FF      lea d, [bp + -6] ; $r
15109  5EF1 32            mov bl, [d]
15110  5EF2 A7 00         mov bh, 0
15111  5EF4 FD AB         swp b
15112  5EF6 D8            push b
15113  5EF7 07 40 60      call get_device_name
15114  5EFA 51 02 00      add sp, 2
15115  5EFD FD AB         swp b
15116  5EFF D8            push b
15117  5F00 26 86 7A      mov b, _s175 ; "    %s damaged\n\n"
15118  5F03 FD AB         swp b
15119  5F05 D8            push b
15120  5F06 07 BA 07      call printf
15121  5F09 51 04 00      add sp, 4
15122  5F0C 0A 76 5F      jmp _if245_exit
15123  5F0F             _if245_else:
15124  5F0F             ; damage[r] = damage[r] + get_rand(300) + 100; 
15125  5F0F 3B 8A 64      mov d, _damage_data ; $damage
15126  5F12 D7            push a
15127  5F13 DA            push d
15128  5F14 FA FA FF      lea d, [bp + -6] ; $r
15129  5F17 32            mov bl, [d]
15130  5F18 A7 00         mov bh, 0
15131  5F1A E7            pop d
15132  5F1B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
15133  5F1F E4            pop a
15134  5F20 DA            push d
15135  5F21 3B 8A 64      mov d, _damage_data ; $damage
15136  5F24 D7            push a
15137  5F25 DA            push d
15138  5F26 FA FA FF      lea d, [bp + -6] ; $r
15139  5F29 32            mov bl, [d]
15140  5F2A A7 00         mov bh, 0
15141  5F2C E7            pop d
15142  5F2D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
15143  5F31 E4            pop a
15144  5F32 2A            mov b, [d]
15145  5F33             ; --- START TERMS
15146  5F33 D7            push a
15147  5F34 11            mov a, b
15148  5F35 26 2C 01      mov b, $12c
15149  5F38 FD AB         swp b
15150  5F3A D8            push b
15151  5F3B 07 EB 1F      call get_rand
15152  5F3E 51 02 00      add sp, 2
15153  5F41 56            add b, a
15154  5F42 11            mov a, b
15155  5F43 26 64 00      mov b, $64
15156  5F46 56            add b, a
15157  5F47 E4            pop a
15158  5F48             ; --- END TERMS
15159  5F48 E7            pop d
15160  5F49 FD 43         mov [d], b
15161  5F4B             ; puts(dcr_1); 
15162  5F4B 3B 9D 65      mov d, _dcr_1 ; $dcr_1
15163  5F4E 2A            mov b, [d]
15164  5F4F FD AB         swp b
15165  5F51 D8            push b
15166  5F52 07 BB 17      call puts
15167  5F55 51 02 00      add sp, 2
15168  5F58             ; printf("    %s state of repair improved\n\n", 
15169  5F58 FA FA FF      lea d, [bp + -6] ; $r
15170  5F5B 32            mov bl, [d]
15171  5F5C A7 00         mov bh, 0
15172  5F5E FD AB         swp b
15173  5F60 D8            push b
15174  5F61 07 40 60      call get_device_name
15175  5F64 51 02 00      add sp, 2
15176  5F67 FD AB         swp b
15177  5F69 D8            push b
15178  5F6A 26 97 7A      mov b, _s176 ; "    %s state of repair improved\n\n"
15179  5F6D FD AB         swp b
15180  5F6F D8            push b
15181  5F70 07 BA 07      call printf
15182  5F73 51 04 00      add sp, 4
15183  5F76             _if245_exit:
15184  5F76 0A 79 5F      jmp _if244_exit
15185  5F79             _if244_exit:
15186  5F79 F9            leave
15187  5F7A 09            ret
15188  5F7B             
15189  5F7B             find_set_empty_place:
15190  5F7B F8 00 00      enter 0 ; (push bp; mov bp, sp)
15191  5F7E             ; unsigned char                         r1, r2; 
15192  5F7E 52 01 00      sub sp, 1
15193  5F81 52 01 00      sub sp, 1
15194  5F84             ; do { 
15195  5F84             _do246_block:
15196  5F84             ; r1 = rand8(); 
15197  5F84 FA 00 00      lea d, [bp + 0] ; $r1
15198  5F87 DA            push d
15199  5F88 07 3A 20      call rand8
15200  5F8B E7            pop d
15201  5F8C FD 3E         mov [d], bl
15202  5F8E             ; r2 = rand8(); 
15203  5F8E FA FF FF      lea d, [bp + -1] ; $r2
15204  5F91 DA            push d
15205  5F92 07 3A 20      call rand8
15206  5F95 E7            pop d
15207  5F96 FD 3E         mov [d], bl
15208  5F98             ; } while (quad[r1-1][r2-1] !=  		0       ); 
15209  5F98             _do246_cond:
15210  5F98 3B A4 64      mov d, _quad_data ; $quad
15211  5F9B D7            push a
15212  5F9C DA            push d
15213  5F9D FA 00 00      lea d, [bp + 0] ; $r1
15214  5FA0 32            mov bl, [d]
15215  5FA1 A7 00         mov bh, 0
15216  5FA3             ; --- START TERMS
15217  5FA3 D7            push a
15218  5FA4 11            mov a, b
15219  5FA5 26 01 00      mov b, $1
15220  5FA8 60            sub a, b
15221  5FA9 27            mov b, a
15222  5FAA E4            pop a
15223  5FAB             ; --- END TERMS
15224  5FAB E7            pop d
15225  5FAC FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
15226  5FB0 DA            push d
15227  5FB1 FA FF FF      lea d, [bp + -1] ; $r2
15228  5FB4 32            mov bl, [d]
15229  5FB5 A7 00         mov bh, 0
15230  5FB7             ; --- START TERMS
15231  5FB7 D7            push a
15232  5FB8 11            mov a, b
15233  5FB9 26 01 00      mov b, $1
15234  5FBC 60            sub a, b
15235  5FBD 27            mov b, a
15236  5FBE E4            pop a
15237  5FBF             ; --- END TERMS
15238  5FBF E7            pop d
15239  5FC0 5A            add d, b
15240  5FC1 E4            pop a
15241  5FC2 32            mov bl, [d]
15242  5FC3 A7 00         mov bh, 0
15243  5FC5             ; --- START RELATIONAL
15244  5FC5 D7            push a
15245  5FC6 11            mov a, b
15246  5FC7 26 00 00      mov b, $0
15247  5FCA B0            cmp a, b
15248  5FCB FD 72         sneq ; !=
15249  5FCD E4            pop a
15250  5FCE             ; --- END RELATIONAL
15251  5FCE C0 01 00      cmp b, 1
15252  5FD1 C6 84 5F      je _do246_block
15253  5FD4             _do246_exit:
15254  5FD4             ; quad[r1-1][r2-1] = t; 
15255  5FD4 3B A4 64      mov d, _quad_data ; $quad
15256  5FD7 D7            push a
15257  5FD8 DA            push d
15258  5FD9 FA 00 00      lea d, [bp + 0] ; $r1
15259  5FDC 32            mov bl, [d]
15260  5FDD A7 00         mov bh, 0
15261  5FDF             ; --- START TERMS
15262  5FDF D7            push a
15263  5FE0 11            mov a, b
15264  5FE1 26 01 00      mov b, $1
15265  5FE4 60            sub a, b
15266  5FE5 27            mov b, a
15267  5FE6 E4            pop a
15268  5FE7             ; --- END TERMS
15269  5FE7 E7            pop d
15270  5FE8 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
15271  5FEC DA            push d
15272  5FED FA FF FF      lea d, [bp + -1] ; $r2
15273  5FF0 32            mov bl, [d]
15274  5FF1 A7 00         mov bh, 0
15275  5FF3             ; --- START TERMS
15276  5FF3 D7            push a
15277  5FF4 11            mov a, b
15278  5FF5 26 01 00      mov b, $1
15279  5FF8 60            sub a, b
15280  5FF9 27            mov b, a
15281  5FFA E4            pop a
15282  5FFB             ; --- END TERMS
15283  5FFB E7            pop d
15284  5FFC 5A            add d, b
15285  5FFD E4            pop a
15286  5FFE DA            push d
15287  5FFF FA 05 00      lea d, [bp + 5] ; $t
15288  6002 32            mov bl, [d]
15289  6003 A7 00         mov bh, 0
15290  6005 E7            pop d
15291  6006 FD 3E         mov [d], bl
15292  6008             ; if (z1) 
15293  6008             _if247_cond:
15294  6008 FA 06 00      lea d, [bp + 6] ; $z1
15295  600B 2A            mov b, [d]
15296  600C C0 00 00      cmp b, 0
15297  600F C6 23 60      je _if247_exit
15298  6012             _if247_true:
15299  6012             ; *z1 = r1; 
15300  6012 FA 06 00      lea d, [bp + 6] ; $z1
15301  6015 2A            mov b, [d]
15302  6016 D8            push b
15303  6017 FA 00 00      lea d, [bp + 0] ; $r1
15304  601A 32            mov bl, [d]
15305  601B A7 00         mov bh, 0
15306  601D E7            pop d
15307  601E FD 3E         mov [d], bl
15308  6020 0A 23 60      jmp _if247_exit
15309  6023             _if247_exit:
15310  6023             ; if (z2) 
15311  6023             _if248_cond:
15312  6023 FA 08 00      lea d, [bp + 8] ; $z2
15313  6026 2A            mov b, [d]
15314  6027 C0 00 00      cmp b, 0
15315  602A C6 3E 60      je _if248_exit
15316  602D             _if248_true:
15317  602D             ; *z2 = r2; 
15318  602D FA 08 00      lea d, [bp + 8] ; $z2
15319  6030 2A            mov b, [d]
15320  6031 D8            push b
15321  6032 FA FF FF      lea d, [bp + -1] ; $r2
15322  6035 32            mov bl, [d]
15323  6036 A7 00         mov bh, 0
15324  6038 E7            pop d
15325  6039 FD 3E         mov [d], bl
15326  603B 0A 3E 60      jmp _if248_exit
15327  603E             _if248_exit:
15328  603E F9            leave
15329  603F 09            ret
15330  6040             
15331  6040             get_device_name:
15332  6040 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15333  6043             ; if (n < 0 || n > 8) 
15334  6043             _if249_cond:
15335  6043 FA 05 00      lea d, [bp + 5] ; $n
15336  6046 2A            mov b, [d]
15337  6047             ; --- START RELATIONAL
15338  6047 D7            push a
15339  6048 11            mov a, b
15340  6049 26 00 00      mov b, $0
15341  604C B0            cmp a, b
15342  604D FD 73         slt ; < (signed)
15343  604F E4            pop a
15344  6050             ; --- END RELATIONAL
15345  6050             ; --- START LOGICAL OR
15346  6050 D7            push a
15347  6051 11            mov a, b
15348  6052 FA 05 00      lea d, [bp + 5] ; $n
15349  6055 2A            mov b, [d]
15350  6056             ; --- START RELATIONAL
15351  6056 D7            push a
15352  6057 11            mov a, b
15353  6058 26 08 00      mov b, $8
15354  605B B0            cmp a, b
15355  605C FD 7F         sgt ; >
15356  605E E4            pop a
15357  605F             ; --- END RELATIONAL
15358  605F FD A8         sor a, b ; ||
15359  6061 E4            pop a
15360  6062             ; --- END LOGICAL OR
15361  6062 C0 00 00      cmp b, 0
15362  6065 C6 75 60      je _if249_exit
15363  6068             _if249_true:
15364  6068             ; n = 0; 
15365  6068 FA 05 00      lea d, [bp + 5] ; $n
15366  606B DA            push d
15367  606C 26 00 00      mov b, $0
15368  606F E7            pop d
15369  6070 FD 43         mov [d], b
15370  6072 0A 75 60      jmp _if249_exit
15371  6075             _if249_exit:
15372  6075             ; return device_name[n]; 
15373  6075 3B 60 65      mov d, _device_name_data ; $device_name
15374  6078 D7            push a
15375  6079 DA            push d
15376  607A FA 05 00      lea d, [bp + 5] ; $n
15377  607D 2A            mov b, [d]
15378  607E E7            pop d
15379  607F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
15380  6083 E4            pop a
15381  6084 2A            mov b, [d]
15382  6085 F9            leave
15383  6086 09            ret
15384  6087             
15385  6087             quadrant_name:
15386  6087 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15387  608A             ; static char *sect_name[] = { "", " I", " II", " III", " IV" }; 
15388  608A 52 14 00      sub sp, 20
15389  608D             ; if (y < 1 || y > 8 || x < 1 || x > 8) 
15390  608D             _if250_cond:
15391  608D FA 06 00      lea d, [bp + 6] ; $y
15392  6090 32            mov bl, [d]
15393  6091 A7 00         mov bh, 0
15394  6093             ; --- START RELATIONAL
15395  6093 D7            push a
15396  6094 11            mov a, b
15397  6095 26 01 00      mov b, $1
15398  6098 B0            cmp a, b
15399  6099 FD 75         slu ; < (unsigned)
15400  609B E4            pop a
15401  609C             ; --- END RELATIONAL
15402  609C             ; --- START LOGICAL OR
15403  609C D7            push a
15404  609D 11            mov a, b
15405  609E FA 06 00      lea d, [bp + 6] ; $y
15406  60A1 32            mov bl, [d]
15407  60A2 A7 00         mov bh, 0
15408  60A4             ; --- START RELATIONAL
15409  60A4 D7            push a
15410  60A5 11            mov a, b
15411  60A6 26 08 00      mov b, $8
15412  60A9 B0            cmp a, b
15413  60AA FD 81         sgu ; > (unsigned)
15414  60AC E4            pop a
15415  60AD             ; --- END RELATIONAL
15416  60AD FD A8         sor a, b ; ||
15417  60AF 11            mov a, b
15418  60B0 FA 07 00      lea d, [bp + 7] ; $x
15419  60B3 32            mov bl, [d]
15420  60B4 A7 00         mov bh, 0
15421  60B6             ; --- START RELATIONAL
15422  60B6 D7            push a
15423  60B7 11            mov a, b
15424  60B8 26 01 00      mov b, $1
15425  60BB B0            cmp a, b
15426  60BC FD 75         slu ; < (unsigned)
15427  60BE E4            pop a
15428  60BF             ; --- END RELATIONAL
15429  60BF FD A8         sor a, b ; ||
15430  60C1 11            mov a, b
15431  60C2 FA 07 00      lea d, [bp + 7] ; $x
15432  60C5 32            mov bl, [d]
15433  60C6 A7 00         mov bh, 0
15434  60C8             ; --- START RELATIONAL
15435  60C8 D7            push a
15436  60C9 11            mov a, b
15437  60CA 26 08 00      mov b, $8
15438  60CD B0            cmp a, b
15439  60CE FD 81         sgu ; > (unsigned)
15440  60D0 E4            pop a
15441  60D1             ; --- END RELATIONAL
15442  60D1 FD A8         sor a, b ; ||
15443  60D3 E4            pop a
15444  60D4             ; --- END LOGICAL OR
15445  60D4 C0 00 00      cmp b, 0
15446  60D7 C6 F0 60      je _if250_exit
15447  60DA             _if250_true:
15448  60DA             ; strcpy(quadname, "Unknown"); 
15449  60DA 26 C9 7A      mov b, _s181 ; "Unknown"
15450  60DD FD AB         swp b
15451  60DF D8            push b
15452  60E0 3B E4 64      mov d, _quadname_data ; $quadname
15453  60E3 2D            mov b, d
15454  60E4 FD AB         swp b
15455  60E6 D8            push b
15456  60E7 07 14 04      call strcpy
15457  60EA 51 04 00      add sp, 4
15458  60ED 0A F0 60      jmp _if250_exit
15459  60F0             _if250_exit:
15460  60F0             ; if (x <= 4) 
15461  60F0             _if251_cond:
15462  60F0 FA 07 00      lea d, [bp + 7] ; $x
15463  60F3 32            mov bl, [d]
15464  60F4 A7 00         mov bh, 0
15465  60F6             ; --- START RELATIONAL
15466  60F6 D7            push a
15467  60F7 11            mov a, b
15468  60F8 26 04 00      mov b, $4
15469  60FB B0            cmp a, b
15470  60FC FD 76         sleu ; <= (unsigned)
15471  60FE E4            pop a
15472  60FF             ; --- END RELATIONAL
15473  60FF C0 00 00      cmp b, 0
15474  6102 C6 2A 61      je _if251_else
15475  6105             _if251_true:
15476  6105             ; strcpy(quadname, quad_name[y]); 
15477  6105 3B 1A 65      mov d, _quad_name_data ; $quad_name
15478  6108 D7            push a
15479  6109 DA            push d
15480  610A FA 06 00      lea d, [bp + 6] ; $y
15481  610D 32            mov bl, [d]
15482  610E A7 00         mov bh, 0
15483  6110 E7            pop d
15484  6111 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
15485  6115 E4            pop a
15486  6116 2A            mov b, [d]
15487  6117 FD AB         swp b
15488  6119 D8            push b
15489  611A 3B E4 64      mov d, _quadname_data ; $quadname
15490  611D 2D            mov b, d
15491  611E FD AB         swp b
15492  6120 D8            push b
15493  6121 07 14 04      call strcpy
15494  6124 51 04 00      add sp, 4
15495  6127 0A 53 61      jmp _if251_exit
15496  612A             _if251_else:
15497  612A             ; strcpy(quadname, quad_name[y + 8]); 
15498  612A 3B 1A 65      mov d, _quad_name_data ; $quad_name
15499  612D D7            push a
15500  612E DA            push d
15501  612F FA 06 00      lea d, [bp + 6] ; $y
15502  6132 32            mov bl, [d]
15503  6133 A7 00         mov bh, 0
15504  6135             ; --- START TERMS
15505  6135 D7            push a
15506  6136 11            mov a, b
15507  6137 26 08 00      mov b, $8
15508  613A 56            add b, a
15509  613B E4            pop a
15510  613C             ; --- END TERMS
15511  613C E7            pop d
15512  613D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
15513  6141 E4            pop a
15514  6142 2A            mov b, [d]
15515  6143 FD AB         swp b
15516  6145 D8            push b
15517  6146 3B E4 64      mov d, _quadname_data ; $quadname
15518  6149 2D            mov b, d
15519  614A FD AB         swp b
15520  614C D8            push b
15521  614D 07 14 04      call strcpy
15522  6150 51 04 00      add sp, 4
15523  6153             _if251_exit:
15524  6153             ; if (small != 1) { 
15525  6153             _if252_cond:
15526  6153 FA 05 00      lea d, [bp + 5] ; $small
15527  6156 32            mov bl, [d]
15528  6157 A7 00         mov bh, 0
15529  6159             ; --- START RELATIONAL
15530  6159 D7            push a
15531  615A 11            mov a, b
15532  615B 26 01 00      mov b, $1
15533  615E B0            cmp a, b
15534  615F FD 72         sneq ; !=
15535  6161 E4            pop a
15536  6162             ; --- END RELATIONAL
15537  6162 C0 00 00      cmp b, 0
15538  6165 C6 BA 61      je _if252_exit
15539  6168             _if252_true:
15540  6168             ; if (x > 4) 
15541  6168             _if253_cond:
15542  6168 FA 07 00      lea d, [bp + 7] ; $x
15543  616B 32            mov bl, [d]
15544  616C A7 00         mov bh, 0
15545  616E             ; --- START RELATIONAL
15546  616E D7            push a
15547  616F 11            mov a, b
15548  6170 26 04 00      mov b, $4
15549  6173 B0            cmp a, b
15550  6174 FD 81         sgu ; > (unsigned)
15551  6176 E4            pop a
15552  6177             ; --- END RELATIONAL
15553  6177 C0 00 00      cmp b, 0
15554  617A C6 95 61      je _if253_exit
15555  617D             _if253_true:
15556  617D             ; x = x - 4; 
15557  617D FA 07 00      lea d, [bp + 7] ; $x
15558  6180 DA            push d
15559  6181 FA 07 00      lea d, [bp + 7] ; $x
15560  6184 32            mov bl, [d]
15561  6185 A7 00         mov bh, 0
15562  6187             ; --- START TERMS
15563  6187 D7            push a
15564  6188 11            mov a, b
15565  6189 26 04 00      mov b, $4
15566  618C 60            sub a, b
15567  618D 27            mov b, a
15568  618E E4            pop a
15569  618F             ; --- END TERMS
15570  618F E7            pop d
15571  6190 FD 3E         mov [d], bl
15572  6192 0A 95 61      jmp _if253_exit
15573  6195             _if253_exit:
15574  6195             ; strcat(quadname, sect_name[x]); 
15575  6195 3B 85 66      mov d, st_quadrant_name_sect_name_dt ; static sect_name
15576  6198 D7            push a
15577  6199 DA            push d
15578  619A FA 07 00      lea d, [bp + 7] ; $x
15579  619D 32            mov bl, [d]
15580  619E A7 00         mov bh, 0
15581  61A0 E7            pop d
15582  61A1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
15583  61A5 E4            pop a
15584  61A6 2A            mov b, [d]
15585  61A7 FD AB         swp b
15586  61A9 D8            push b
15587  61AA 3B E4 64      mov d, _quadname_data ; $quadname
15588  61AD 2D            mov b, d
15589  61AE FD AB         swp b
15590  61B0 D8            push b
15591  61B1 07 D8 04      call strcat
15592  61B4 51 04 00      add sp, 4
15593  61B7 0A BA 61      jmp _if252_exit
15594  61BA             _if252_exit:
15595  61BA             ; return; 
15596  61BA F9            leave
15597  61BB 09            ret
15598  61BC             
15599  61BC             isqrt:
15600  61BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
15601  61BF             ; unsigned int        b = 0x4000, q = 0, r = i, t; 
15602  61BF 52 02 00      sub sp, 2
15603  61C2             ; --- START LOCAL VAR INITIALIZATION
15604  61C2 FA FF FF      lea d, [bp + -1] ; $b
15605  61C5 DA            push d
15606  61C6 26 00 40      mov b, $4000
15607  61C9 E7            pop d
15608  61CA FD 43         mov [d], b
15609  61CC             ; --- END LOCAL VAR INITIALIZATION
15610  61CC 52 02 00      sub sp, 2
15611  61CF             ; --- START LOCAL VAR INITIALIZATION
15612  61CF FA FD FF      lea d, [bp + -3] ; $q
15613  61D2 DA            push d
15614  61D3 26 00 00      mov b, $0
15615  61D6 E7            pop d
15616  61D7 FD 43         mov [d], b
15617  61D9             ; --- END LOCAL VAR INITIALIZATION
15618  61D9 52 02 00      sub sp, 2
15619  61DC             ; --- START LOCAL VAR INITIALIZATION
15620  61DC FA FB FF      lea d, [bp + -5] ; $r
15621  61DF DA            push d
15622  61E0 FA 05 00      lea d, [bp + 5] ; $i
15623  61E3 2A            mov b, [d]
15624  61E4 E7            pop d
15625  61E5 FD 43         mov [d], b
15626  61E7             ; --- END LOCAL VAR INITIALIZATION
15627  61E7 52 02 00      sub sp, 2
15628  61EA             ; while (b) { 
15629  61EA             _while254_cond:
15630  61EA FA FF FF      lea d, [bp + -1] ; $b
15631  61ED 2A            mov b, [d]
15632  61EE C0 00 00      cmp b, 0
15633  61F1 C6 72 62      je _while254_exit
15634  61F4             _while254_block:
15635  61F4             ; t = q + b; 
15636  61F4 FA F9 FF      lea d, [bp + -7] ; $t
15637  61F7 DA            push d
15638  61F8 FA FD FF      lea d, [bp + -3] ; $q
15639  61FB 2A            mov b, [d]
15640  61FC             ; --- START TERMS
15641  61FC D7            push a
15642  61FD 11            mov a, b
15643  61FE FA FF FF      lea d, [bp + -1] ; $b
15644  6201 2A            mov b, [d]
15645  6202 56            add b, a
15646  6203 E4            pop a
15647  6204             ; --- END TERMS
15648  6204 E7            pop d
15649  6205 FD 43         mov [d], b
15650  6207             ; q =q>> 1; 
15651  6207 FA FD FF      lea d, [bp + -3] ; $q
15652  620A DA            push d
15653  620B FA FD FF      lea d, [bp + -3] ; $q
15654  620E 2A            mov b, [d]
15655  620F             ; --- START SHIFT
15656  620F D7            push a
15657  6210 11            mov a, b
15658  6211 26 01 00      mov b, $1
15659  6214 FD 39         mov c, b
15660  6216 A1            shr a, cl
15661  6217 27            mov b, a
15662  6218 E4            pop a
15663  6219             ; --- END SHIFT
15664  6219 E7            pop d
15665  621A FD 43         mov [d], b
15666  621C             ; if (r >= t) { 
15667  621C             _if255_cond:
15668  621C FA FB FF      lea d, [bp + -5] ; $r
15669  621F 2A            mov b, [d]
15670  6220             ; --- START RELATIONAL
15671  6220 D7            push a
15672  6221 11            mov a, b
15673  6222 FA F9 FF      lea d, [bp + -7] ; $t
15674  6225 2A            mov b, [d]
15675  6226 B0            cmp a, b
15676  6227 FD 82         sgeu ; >= (unsigned)
15677  6229 E4            pop a
15678  622A             ; --- END RELATIONAL
15679  622A C0 00 00      cmp b, 0
15680  622D C6 5A 62      je _if255_exit
15681  6230             _if255_true:
15682  6230             ; r =r- t; 
15683  6230 FA FB FF      lea d, [bp + -5] ; $r
15684  6233 DA            push d
15685  6234 FA FB FF      lea d, [bp + -5] ; $r
15686  6237 2A            mov b, [d]
15687  6238             ; --- START TERMS
15688  6238 D7            push a
15689  6239 11            mov a, b
15690  623A FA F9 FF      lea d, [bp + -7] ; $t
15691  623D 2A            mov b, [d]
15692  623E 60            sub a, b
15693  623F 27            mov b, a
15694  6240 E4            pop a
15695  6241             ; --- END TERMS
15696  6241 E7            pop d
15697  6242 FD 43         mov [d], b
15698  6244             ; q = q + b; 
15699  6244 FA FD FF      lea d, [bp + -3] ; $q
15700  6247 DA            push d
15701  6248 FA FD FF      lea d, [bp + -3] ; $q
15702  624B 2A            mov b, [d]
15703  624C             ; --- START TERMS
15704  624C D7            push a
15705  624D 11            mov a, b
15706  624E FA FF FF      lea d, [bp + -1] ; $b
15707  6251 2A            mov b, [d]
15708  6252 56            add b, a
15709  6253 E4            pop a
15710  6254             ; --- END TERMS
15711  6254 E7            pop d
15712  6255 FD 43         mov [d], b
15713  6257 0A 5A 62      jmp _if255_exit
15714  625A             _if255_exit:
15715  625A             ; b =b>> 2; 
15716  625A FA FF FF      lea d, [bp + -1] ; $b
15717  625D DA            push d
15718  625E FA FF FF      lea d, [bp + -1] ; $b
15719  6261 2A            mov b, [d]
15720  6262             ; --- START SHIFT
15721  6262 D7            push a
15722  6263 11            mov a, b
15723  6264 26 02 00      mov b, $2
15724  6267 FD 39         mov c, b
15725  6269 A1            shr a, cl
15726  626A 27            mov b, a
15727  626B E4            pop a
15728  626C             ; --- END SHIFT
15729  626C E7            pop d
15730  626D FD 43         mov [d], b
15731  626F 0A EA 61      jmp _while254_cond
15732  6272             _while254_exit:
15733  6272             ; return q; 
15734  6272 FA FD FF      lea d, [bp + -3] ; $q
15735  6275 2A            mov b, [d]
15736  6276 F9            leave
15737  6277 09            ret
15738  6278             
15739  6278             square00:
15740  6278 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15741  627B             ; if (abs(t) > 181) { 
15742  627B             _if256_cond:
15743  627B FA 05 00      lea d, [bp + 5] ; $t
15744  627E 2A            mov b, [d]
15745  627F FD AB         swp b
15746  6281 D8            push b
15747  6282 07 07 18      call abs
15748  6285 51 02 00      add sp, 2
15749  6288             ; --- START RELATIONAL
15750  6288 D7            push a
15751  6289 11            mov a, b
15752  628A 26 B5 00      mov b, $b5
15753  628D B0            cmp a, b
15754  628E FD 7F         sgt ; >
15755  6290 E4            pop a
15756  6291             ; --- END RELATIONAL
15757  6291 C0 00 00      cmp b, 0
15758  6294 C6 C2 62      je _if256_else
15759  6297             _if256_true:
15760  6297             ; t =t/ 10; 
15761  6297 FA 05 00      lea d, [bp + 5] ; $t
15762  629A DA            push d
15763  629B FA 05 00      lea d, [bp + 5] ; $t
15764  629E 2A            mov b, [d]
15765  629F             ; --- START FACTORS
15766  629F D7            push a
15767  62A0 11            mov a, b
15768  62A1 26 0A 00      mov b, $a
15769  62A4 AE            div a, b
15770  62A5 27            mov b, a
15771  62A6 E4            pop a
15772  62A7             ; --- END FACTORS
15773  62A7 E7            pop d
15774  62A8 FD 43         mov [d], b
15775  62AA             ; t =t* t; 
15776  62AA FA 05 00      lea d, [bp + 5] ; $t
15777  62AD DA            push d
15778  62AE FA 05 00      lea d, [bp + 5] ; $t
15779  62B1 2A            mov b, [d]
15780  62B2             ; --- START FACTORS
15781  62B2 D7            push a
15782  62B3 11            mov a, b
15783  62B4 FA 05 00      lea d, [bp + 5] ; $t
15784  62B7 2A            mov b, [d]
15785  62B8 AC            mul a, b ; *
15786  62B9 11            mov a, b
15787  62BA 27            mov b, a
15788  62BB E4            pop a
15789  62BC             ; --- END FACTORS
15790  62BC E7            pop d
15791  62BD FD 43         mov [d], b
15792  62BF 0A EA 62      jmp _if256_exit
15793  62C2             _if256_else:
15794  62C2             ; t =t* t; 
15795  62C2 FA 05 00      lea d, [bp + 5] ; $t
15796  62C5 DA            push d
15797  62C6 FA 05 00      lea d, [bp + 5] ; $t
15798  62C9 2A            mov b, [d]
15799  62CA             ; --- START FACTORS
15800  62CA D7            push a
15801  62CB 11            mov a, b
15802  62CC FA 05 00      lea d, [bp + 5] ; $t
15803  62CF 2A            mov b, [d]
15804  62D0 AC            mul a, b ; *
15805  62D1 11            mov a, b
15806  62D2 27            mov b, a
15807  62D3 E4            pop a
15808  62D4             ; --- END FACTORS
15809  62D4 E7            pop d
15810  62D5 FD 43         mov [d], b
15811  62D7             ; t =t/ 100; 
15812  62D7 FA 05 00      lea d, [bp + 5] ; $t
15813  62DA DA            push d
15814  62DB FA 05 00      lea d, [bp + 5] ; $t
15815  62DE 2A            mov b, [d]
15816  62DF             ; --- START FACTORS
15817  62DF D7            push a
15818  62E0 11            mov a, b
15819  62E1 26 64 00      mov b, $64
15820  62E4 AE            div a, b
15821  62E5 27            mov b, a
15822  62E6 E4            pop a
15823  62E7             ; --- END FACTORS
15824  62E7 E7            pop d
15825  62E8 FD 43         mov [d], b
15826  62EA             _if256_exit:
15827  62EA             ; return t; 
15828  62EA FA 05 00      lea d, [bp + 5] ; $t
15829  62ED 2A            mov b, [d]
15830  62EE F9            leave
15831  62EF 09            ret
15832  62F0             
15833  62F0             distance_to:
15834  62F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15835  62F3             ; unsigned int        j; 
15836  62F3 52 02 00      sub sp, 2
15837  62F6             ; j = square00(TO_FIXED00(k->y) - ship_y); 
15838  62F6 FA FF FF      lea d, [bp + -1] ; $j
15839  62F9 DA            push d
15840  62FA FA 05 00      lea d, [bp + 5] ; $k
15841  62FD FD 2A         mov d, [d]
15842  62FF 58 00 00      add d, 0
15843  6302 32            mov bl, [d]
15844  6303 A7 00         mov bh, 0
15845  6305 FD AB         swp b
15846  6307 D8            push b
15847  6308 07 C8 1F      call TO_FIXED00
15848  630B 51 02 00      add sp, 2
15849  630E             ; --- START TERMS
15850  630E D7            push a
15851  630F 11            mov a, b
15852  6310 3B 9E 64      mov d, _ship_y ; $ship_y
15853  6313 2A            mov b, [d]
15854  6314 60            sub a, b
15855  6315 27            mov b, a
15856  6316 E4            pop a
15857  6317             ; --- END TERMS
15858  6317 FD AB         swp b
15859  6319 D8            push b
15860  631A 07 78 62      call square00
15861  631D 51 02 00      add sp, 2
15862  6320 E7            pop d
15863  6321 FD 43         mov [d], b
15864  6323             ; j = j + square00(TO_FIXED00(k->x) - ship_x); 
15865  6323 FA FF FF      lea d, [bp + -1] ; $j
15866  6326 DA            push d
15867  6327 FA FF FF      lea d, [bp + -1] ; $j
15868  632A 2A            mov b, [d]
15869  632B             ; --- START TERMS
15870  632B D7            push a
15871  632C 11            mov a, b
15872  632D FA 05 00      lea d, [bp + 5] ; $k
15873  6330 FD 2A         mov d, [d]
15874  6332 58 01 00      add d, 1
15875  6335 32            mov bl, [d]
15876  6336 A7 00         mov bh, 0
15877  6338 FD AB         swp b
15878  633A D8            push b
15879  633B 07 C8 1F      call TO_FIXED00
15880  633E 51 02 00      add sp, 2
15881  6341             ; --- START TERMS
15882  6341 D7            push a
15883  6342 11            mov a, b
15884  6343 3B A0 64      mov d, _ship_x ; $ship_x
15885  6346 2A            mov b, [d]
15886  6347 60            sub a, b
15887  6348 27            mov b, a
15888  6349 E4            pop a
15889  634A             ; --- END TERMS
15890  634A FD AB         swp b
15891  634C D8            push b
15892  634D 07 78 62      call square00
15893  6350 51 02 00      add sp, 2
15894  6353 56            add b, a
15895  6354 E4            pop a
15896  6355             ; --- END TERMS
15897  6355 E7            pop d
15898  6356 FD 43         mov [d], b
15899  6358             ; j = isqrt(j); 
15900  6358 FA FF FF      lea d, [bp + -1] ; $j
15901  635B DA            push d
15902  635C FA FF FF      lea d, [bp + -1] ; $j
15903  635F 2A            mov b, [d]
15904  6360 FD AB         swp b
15905  6362 D8            push b
15906  6363 07 BC 61      call isqrt
15907  6366 51 02 00      add sp, 2
15908  6369 E7            pop d
15909  636A FD 43         mov [d], b
15910  636C             ; j =j* 10; 
15911  636C FA FF FF      lea d, [bp + -1] ; $j
15912  636F DA            push d
15913  6370 FA FF FF      lea d, [bp + -1] ; $j
15914  6373 2A            mov b, [d]
15915  6374             ; --- START FACTORS
15916  6374 D7            push a
15917  6375 11            mov a, b
15918  6376 26 0A 00      mov b, $a
15919  6379 AC            mul a, b ; *
15920  637A 11            mov a, b
15921  637B 27            mov b, a
15922  637C E4            pop a
15923  637D             ; --- END FACTORS
15924  637D E7            pop d
15925  637E FD 43         mov [d], b
15926  6380             ; return j; 
15927  6380 FA FF FF      lea d, [bp + -1] ; $j
15928  6383 2A            mov b, [d]
15929  6384 F9            leave
15930  6385 09            ret
15931  6386             
15932  6386             cint100:
15933  6386 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15934  6389             ; return (d + 50) / 100; 
15935  6389 FA 05 00      lea d, [bp + 5] ; $d
15936  638C 2A            mov b, [d]
15937  638D             ; --- START TERMS
15938  638D D7            push a
15939  638E 11            mov a, b
15940  638F 26 32 00      mov b, $32
15941  6392 56            add b, a
15942  6393 E4            pop a
15943  6394             ; --- END TERMS
15944  6394             ; --- START FACTORS
15945  6394 D7            push a
15946  6395 11            mov a, b
15947  6396 26 64 00      mov b, $64
15948  6399 AE            div a, b
15949  639A 27            mov b, a
15950  639B E4            pop a
15951  639C             ; --- END FACTORS
15952  639C F9            leave
15953  639D 09            ret
15954  639E             
15955  639E             showfile:
15956  639E F8 00 00      enter 0 ; (push bp; mov bp, sp)
15957  63A1 F9            leave
15958  63A2 09            ret
15959  63A3             ; --- END TEXT SEGMENT
15960  63A3             
15961  63A3             ; --- BEGIN DATA SEGMENT
15962  63A3 00          _starbases: .fill 1, 0
15963  63A4 00          _base_y: .fill 1, 0
15964  63A5 00          _base_x: .fill 1, 0
15965  63A6 00          _starbases_left: .fill 1, 0
15966  63A7             _c_data: 
15967  63A7 00          .db 
15968  63A8 00          .db 
15969  63A9 00 00 00 FF .db $0,$0,$0,$ffff,$ffff,$ffff,$0,$1,$1,$1,$0,$1,$1,$1,$0,$ffff,$ffff,$ffff,$0,$1,$1,
15969  63AD FF FF 00 01 
15969  63B1 01 01 00 01 
15969  63B5 01 01 00 FF 
15969  63B9 FF FF 00 01 
15969  63BD 01 
15970  63BE 00 00 00 00 .fill 9, 0
15970  63C2 00 00 00 00 
15970  63C6 00 
15971  63C7 00          _docked: .fill 1, 0
15972  63C8 00 00       _energy: .fill 2, 0
15973  63CA B8 0B       _energy0: .dw 3000
15974  63CC 00 00 00 00 _map_data: .fill 162, 0
15974  63D0 00 00 00 00 
15974  63D4 00 00 00 00 
15974  63D8 00 00 00 00 
15974  63DC 00 00 00 00 
15974  63E0 00 00 00 00 
15974  63E4 00 00 00 00 
15974  63E8 00 00 00 00 
15974  63EC 00 00 00 00 
15974  63F0 00 00 00 00 
15974  63F4 00 00 00 00 
15974  63F8 00 00 00 00 
15974  63FC 00 00 00 00 
15974  6400 00 00 00 00 
15974  6404 00 00 00 00 
15974  6408 00 00 00 00 
15974  640C 00 00 00 00 
15974  6410 00 00 00 00 
15974  6414 00 00 00 00 
15974  6418 00 00 00 00 
15974  641C 00 00 00 00 
15974  6420 00 00 00 00 
15974  6424 00 00 00 00 
15974  6428 00 00 00 00 
15974  642C 00 00 00 00 
15974  6430 00 00 00 00 
15974  6434 00 00 00 00 
15974  6438 00 00 00 00 
15974  643C 00 00 00 00 
15974  6440 00 00 00 00 
15974  6444 00 00 00 00 
15974  6448 00 00 00 00 
15974  644C 00 00 00 00 
15974  6450 00 00 00 00 
15974  6454 00 00 00 00 
15974  6458 00 00 00 00 
15974  645C 00 00 00 00 
15974  6460 00 00 00 00 
15974  6464 00 00 00 00 
15974  6468 00 00 00 00 
15974  646C 00 00 
15975  646E 00 00 00 00 _kdata_data: .fill 12, 0
15975  6472 00 00 00 00 
15975  6476 00 00 00 00 
15976  647A 00          _klingons: .fill 1, 0
15977  647B 00          _total_klingons: .fill 1, 0
15978  647C 00          _klingons_left: .fill 1, 0
15979  647D 00          _torps: .fill 1, 0
15980  647E 0A          _torps0: .db 10
15981  647F 00 00       _quad_y: .fill 2, 0
15982  6481 00 00       _quad_x: .fill 2, 0
15983  6483 00 00       _shield: .fill 2, 0
15984  6485 00          _stars: .fill 1, 0
15985  6486 00 00       _time_start: .fill 2, 0
15986  6488 00 00       _time_up: .fill 2, 0
15987  648A 00 00 00 00 _damage_data: .fill 18, 0
15987  648E 00 00 00 00 
15987  6492 00 00 00 00 
15987  6496 00 00 00 00 
15987  649A 00 00 
15988  649C 00 00       _d4: .fill 2, 0
15989  649E 00 00       _ship_y: .fill 2, 0
15990  64A0 00 00       _ship_x: .fill 2, 0
15991  64A2 00 00       _stardate: .fill 2, 0
15992  64A4 00 00 00 00 _quad_data: .fill 64, 0
15992  64A8 00 00 00 00 
15992  64AC 00 00 00 00 
15992  64B0 00 00 00 00 
15992  64B4 00 00 00 00 
15992  64B8 00 00 00 00 
15992  64BC 00 00 00 00 
15992  64C0 00 00 00 00 
15992  64C4 00 00 00 00 
15992  64C8 00 00 00 00 
15992  64CC 00 00 00 00 
15992  64D0 00 00 00 00 
15992  64D4 00 00 00 00 
15992  64D8 00 00 00 00 
15992  64DC 00 00 00 00 
15992  64E0 00 00 00 00 
15993  64E4 00 00 00 00 _quadname_data: .fill 12, 0
15993  64E8 00 00 00 00 
15993  64EC 00 00 00 00 
15994  64F0 72 65 70 6F _inc_1_data: .db "reports:\n  Incorrect course data, sir!\n", 0
15994  64F4 72 74 73 3A 
15994  64F8 0A 20 20 49 
15994  64FC 6E 63 6F 72 
15994  6500 72 65 63 74 
15994  6504 20 63 6F 75 
15994  6508 72 73 65 20 
15994  650C 64 61 74 61 
15994  6510 2C 20 73 69 
15994  6514 72 21 0A 00 
15995  6518 F0 64       _inc_1: .dw _inc_1_data
15996  651A             _quad_name_data: 
15997  651A 00 00       .dw 
15998  651C 9B 66 9C 66 .dw _s0, _s1, _s2, _s3, _s4, _s5, _s6, _s7, _s8, _s9, _s10, _s11, _s12, _s13, _s14, _s15, _s16, 
15998  6520 A4 66 AA 66 
15998  6524 B2 66 B7 66 
15998  6528 BF 66 C6 66 
15998  652C D2 66 D9 66 
15998  6530 E0 66 E6 66 
15998  6534 EE 66 F9 66 
15998  6538 03 67 0B 67 
15998  653C 14 67 
15999  653E 00 00 00 00 .fill 34, 0
15999  6542 00 00 00 00 
15999  6546 00 00 00 00 
15999  654A 00 00 00 00 
15999  654E 00 00 00 00 
15999  6552 00 00 00 00 
15999  6556 00 00 00 00 
15999  655A 00 00 00 00 
15999  655E 00 00 
16000  6560             _device_name_data: 
16001  6560 00 00       .dw 
16002  6562 9B 66 1A 67 .dw _s0, _s17, _s18, _s19, _s20, _s21, _s22, _s23, _s24, 
16002  6566 27 67 3B 67 
16002  656A 4E 67 5D 67 
16002  656E 6A 67 79 67 
16002  6572 88 67 
16003  6574 00 00 00 00 .fill 18, 0
16003  6578 00 00 00 00 
16003  657C 00 00 00 00 
16003  6580 00 00 00 00 
16003  6584 00 00 
16004  6586 44 61 6D 61 _dcr_1_data: .db "Damage Control report:", 0
16004  658A 67 65 20 43 
16004  658E 6F 6E 74 72 
16004  6592 6F 6C 20 72 
16004  6596 65 70 6F 72 
16004  659A 74 3A 00 
16005  659D 86 65       _dcr_1: .dw _dcr_1_data
16006  659F             _plural_2_data: 
16007  659F 00          .db 
16008  65A0 00 00       .db $0,$0,
16009  65A2             _plural_data: 
16010  65A2 00          .db 
16011  65A3 69 73 00    .db $69,$73,$0,
16012  65A6 00          .fill 1, 0
16013  65A7             _warpmax_data: 
16014  65A7 00          .db 
16015  65A8 08          .db $8,
16016  65A9 00 00 00    .fill 3, 0
16017  65AC 2D 2D 2D 2D _srs_1_data: .db "------------------------", 0
16017  65B0 2D 2D 2D 2D 
16017  65B4 2D 2D 2D 2D 
16017  65B8 2D 2D 2D 2D 
16017  65BC 2D 2D 2D 2D 
16017  65C0 2D 2D 2D 2D 
16017  65C4 00 
16018  65C5 AC 65       _srs_1: .dw _srs_1_data
16019  65C7             _tilestr_data: 
16020  65C7 00 00       .dw 
16021  65C9 99 67 9D 67 .dw _s25, _s26, _s27, _s28, _s29, 
16021  65CD A1 67 A5 67 
16021  65D1 A9 67 
16022  65D3 00 00 00 00 .fill 10, 0
16022  65D7 00 00 00 00 
16022  65DB 00 00 
16023  65DD 2D 2D 2D 2D _lrs_1_data: .db "-------------------\n", 0
16023  65E1 2D 2D 2D 2D 
16023  65E5 2D 2D 2D 2D 
16023  65E9 2D 2D 2D 2D 
16023  65ED 2D 2D 2D 0A 
16023  65F1 00 
16024  65F2 DD 65       _lrs_1: .dw _lrs_1_data
16025  65F4 20 20 20 2D _gr_1_data: .db "   ----- ----- ----- ----- ----- ----- ----- -----\n", 0
16025  65F8 2D 2D 2D 2D 
16025  65FC 20 2D 2D 2D 
16025  6600 2D 2D 20 2D 
16025  6604 2D 2D 2D 2D 
16025  6608 20 2D 2D 2D 
16025  660C 2D 2D 20 2D 
16025  6610 2D 2D 2D 2D 
16025  6614 20 2D 2D 2D 
16025  6618 2D 2D 20 2D 
16025  661C 2D 2D 2D 2D 
16025  6620 20 2D 2D 2D 
16025  6624 2D 2D 0A 00 
16026  6628 F4 65       _gr_1: .dw _gr_1_data
16027  662A 73 00       _str_s_data: .db "s", 0
16028  662C 2A 66       _str_s: .dw _str_s_data
16029  662E 20 20 2D 2D _gm_1_data: .db "  ----- ----- ----- ----- ----- ----- ----- -----\n", 0
16029  6632 2D 2D 2D 20 
16029  6636 2D 2D 2D 2D 
16029  663A 2D 20 2D 2D 
16029  663E 2D 2D 2D 20 
16029  6642 2D 2D 2D 2D 
16029  6646 2D 20 2D 2D 
16029  664A 2D 2D 2D 20 
16029  664E 2D 2D 2D 2D 
16029  6652 2D 20 2D 2D 
16029  6656 2D 2D 2D 20 
16029  665A 2D 2D 2D 2D 
16029  665E 2D 0A 00 
16030  6661 2E 66       _gm_1: .dw _gm_1_data
16031  6663 20 20 44 49 _dist_1_data: .db "  DISTANCE = \n\n", 0
16031  6667 53 54 41 4E 
16031  666B 43 45 20 3D 
16031  666F 20 0A 0A 00 
16032  6673 63 66       _dist_1: .dw _dist_1_data
16033  6675 00 00 00 00 st_print100_buf_dt: .fill 16, 0
16033  6679 00 00 00 00 
16033  667D 00 00 00 00 
16033  6681 00 00 00 00 
16034  6685             st_quadrant_name_sect_name_dt: 
16035  6685 9B 66 B9 7A .dw _s0, _s177, _s178, _s179, _s180, 
16035  6689 BC 7A C0 7A 
16035  668D C5 7A 
16036  668F 00 00 00 00 .fill 10, 0
16036  6693 00 00 00 00 
16036  6697 00 00 
16037  6699 85 66       st_quadrant_name_sect_name: .dw st_quadrant_name_sect_name_dt
16038  669B 00          _s0: .db "", 0
16039  669C 41 6E 74 61 _s1: .db "Antares", 0
16039  66A0 72 65 73 00 
16040  66A4 52 69 67 65 _s2: .db "Rigel", 0
16040  66A8 6C 00 
16041  66AA 50 72 6F 63 _s3: .db "Procyon", 0
16041  66AE 79 6F 6E 00 
16042  66B2 56 65 67 61 _s4: .db "Vega", 0
16042  66B6 00 
16043  66B7 43 61 6E 6F _s5: .db "Canopus", 0
16043  66BB 70 75 73 00 
16044  66BF 41 6C 74 61 _s6: .db "Altair", 0
16044  66C3 69 72 00 
16045  66C6 53 61 67 69 _s7: .db "Sagittarius", 0
16045  66CA 74 74 61 72 
16045  66CE 69 75 73 00 
16046  66D2 50 6F 6C 6C _s8: .db "Pollux", 0
16046  66D6 75 78 00 
16047  66D9 53 69 72 69 _s9: .db "Sirius", 0
16047  66DD 75 73 00 
16048  66E0 44 65 6E 65 _s10: .db "Deneb", 0
16048  66E4 62 00 
16049  66E6 43 61 70 65 _s11: .db "Capella", 0
16049  66EA 6C 6C 61 00 
16050  66EE 42 65 74 65 _s12: .db "Betelgeuse", 0
16050  66F2 6C 67 65 75 
16050  66F6 73 65 00 
16051  66F9 41 6C 64 65 _s13: .db "Aldebaran", 0
16051  66FD 62 61 72 61 
16051  6701 6E 00 
16052  6703 52 65 67 75 _s14: .db "Regulus", 0
16052  6707 6C 75 73 00 
16053  670B 41 72 63 74 _s15: .db "Arcturus", 0
16053  670F 75 72 75 73 
16053  6713 00 
16054  6714 53 70 69 63 _s16: .db "Spica", 0
16054  6718 61 00 
16055  671A 57 61 72 70 _s17: .db "Warp engines", 0
16055  671E 20 65 6E 67 
16055  6722 69 6E 65 73 
16055  6726 00 
16056  6727 53 68 6F 72 _s18: .db "Short range sensors", 0
16056  672B 74 20 72 61 
16056  672F 6E 67 65 20 
16056  6733 73 65 6E 73 
16056  6737 6F 72 73 00 
16057  673B 4C 6F 6E 67 _s19: .db "Long range sensors", 0
16057  673F 20 72 61 6E 
16057  6743 67 65 20 73 
16057  6747 65 6E 73 6F 
16057  674B 72 73 00 
16058  674E 50 68 61 73 _s20: .db "Phaser control", 0
16058  6752 65 72 20 63 
16058  6756 6F 6E 74 72 
16058  675A 6F 6C 00 
16059  675D 50 68 6F 74 _s21: .db "Photon tubes", 0
16059  6761 6F 6E 20 74 
16059  6765 75 62 65 73 
16059  6769 00 
16060  676A 44 61 6D 61 _s22: .db "Damage control", 0
16060  676E 67 65 20 63 
16060  6772 6F 6E 74 72 
16060  6776 6F 6C 00 
16061  6779 53 68 69 65 _s23: .db "Shield control", 0
16061  677D 6C 64 20 63 
16061  6781 6F 6E 74 72 
16061  6785 6F 6C 00 
16062  6788 4C 69 62 72 _s24: .db "Library computer", 0
16062  678C 61 72 79 20 
16062  6790 63 6F 6D 70 
16062  6794 75 74 65 72 
16062  6798 00 
16063  6799 20 20 20 00 _s25: .db "   ", 0
16064  679D 20 2A 20 00 _s26: .db " * ", 0
16065  67A1 3E 21 3C 00 _s27: .db ">!<", 0
16066  67A5 2B 4B 2B 00 _s28: .db "+K+", 0
16067  67A9 3C 2A 3E 00 _s29: .db "<*>", 0
16068  67AD 55 6E 65 78 _s30: .db "Unexpected format in printf.", 0
16068  67B1 70 65 63 74 
16068  67B5 65 64 20 66 
16068  67B9 6F 72 6D 61 
16068  67BD 74 20 69 6E 
16068  67C1 20 70 72 69 
16068  67C5 6E 74 66 2E 
16068  67C9 00 
16069  67CA 45 72 72 6F _s31: .db "Error: Unknown argument type.\n", 0
16069  67CE 72 3A 20 55 
16069  67D2 6E 6B 6E 6F 
16069  67D6 77 6E 20 61 
16069  67DA 72 67 75 6D 
16069  67DE 65 6E 74 20 
16069  67E2 74 79 70 65 
16069  67E6 2E 0A 00 
16070  67E9 1B 5B 32 4A _s32: .db "\033[2J\033[H", 0
16070  67ED 1B 5B 48 00 
16071  67F1 25 64 2E 25 _s33: .db "%d.%d", 0
16071  67F5 64 00 
16072  67F7 61 72 65 00 _s34: .db "are", 0
16073  67FB 69 73 00    _s35: .db "is", 0
16074  67FE 25 73 20 25 _s36: .db "%s %s inoperable.\n", 0
16074  6802 73 20 69 6E 
16074  6806 6F 70 65 72 
16074  680A 61 62 6C 65 
16074  680E 2E 0A 00 
16075  6811 73 74 61 72 _s37: .db "startrek.intro", 0
16075  6815 74 72 65 6B 
16075  6819 2E 69 6E 74 
16075  681D 72 6F 00 
16076  6820 73 74 61 72 _s38: .db "startrek.doc", 0
16076  6824 74 72 65 6B 
16076  6828 2E 64 6F 63 
16076  682C 00 
16077  682D 73 74 61 72 _s39: .db "startrek.logo", 0
16077  6831 74 72 65 6B 
16077  6835 2E 6C 6F 67 
16077  6839 6F 00 
16078  683B 73 74 61 72 _s40: .db "startrek.fatal", 0
16078  683F 74 72 65 6B 
16078  6843 2E 66 61 74 
16078  6847 61 6C 00 
16079  684A 43 6F 6D 6D _s41: .db "Command? ", 0
16079  684E 61 6E 64 3F 
16079  6852 20 00 
16080  6854 6E 61 76 00 _s42: .db "nav", 0
16081  6858 73 72 73 00 _s43: .db "srs", 0
16082  685C 6C 72 73 00 _s44: .db "lrs", 0
16083  6860 70 68 61 00 _s45: .db "pha", 0
16084  6864 74 6F 72 00 _s46: .db "tor", 0
16085  6868 73 68 69 00 _s47: .db "shi", 0
16086  686C 64 61 6D 00 _s48: .db "dam", 0
16087  6870 63 6F 6D 00 _s49: .db "com", 0
16088  6874 78 78 78 00 _s50: .db "xxx", 0
16089  6878 45 6E 74 65 _s51: .db "Enter one of the following:\n", 0
16089  687C 72 20 6F 6E 
16089  6880 65 20 6F 66 
16089  6884 20 74 68 65 
16089  6888 20 66 6F 6C 
16089  688C 6C 6F 77 69 
16089  6890 6E 67 3A 0A 
16089  6894 00 
16090  6895 20 20 6E 61 _s52: .db "  nav - To Set Course", 0
16090  6899 76 20 2D 20 
16090  689D 54 6F 20 53 
16090  68A1 65 74 20 43 
16090  68A5 6F 75 72 73 
16090  68A9 65 00 
16091  68AB 20 20 73 72 _s53: .db "  srs - Short Range Sensors", 0
16091  68AF 73 20 2D 20 
16091  68B3 53 68 6F 72 
16091  68B7 74 20 52 61 
16091  68BB 6E 67 65 20 
16091  68BF 53 65 6E 73 
16091  68C3 6F 72 73 00 
16092  68C7 20 20 6C 72 _s54: .db "  lrs - Long Range Sensors", 0
16092  68CB 73 20 2D 20 
16092  68CF 4C 6F 6E 67 
16092  68D3 20 52 61 6E 
16092  68D7 67 65 20 53 
16092  68DB 65 6E 73 6F 
16092  68DF 72 73 00 
16093  68E2 20 20 70 68 _s55: .db "  pha - Phasers", 0
16093  68E6 61 20 2D 20 
16093  68EA 50 68 61 73 
16093  68EE 65 72 73 00 
16094  68F2 20 20 74 6F _s56: .db "  tor - Photon Torpedoes", 0
16094  68F6 72 20 2D 20 
16094  68FA 50 68 6F 74 
16094  68FE 6F 6E 20 54 
16094  6902 6F 72 70 65 
16094  6906 64 6F 65 73 
16094  690A 00 
16095  690B 20 20 73 68 _s57: .db "  shi - Shield Control", 0
16095  690F 69 20 2D 20 
16095  6913 53 68 69 65 
16095  6917 6C 64 20 43 
16095  691B 6F 6E 74 72 
16095  691F 6F 6C 00 
16096  6922 20 20 64 61 _s58: .db "  dam - Damage Control", 0
16096  6926 6D 20 2D 20 
16096  692A 44 61 6D 61 
16096  692E 67 65 20 43 
16096  6932 6F 6E 74 72 
16096  6936 6F 6C 00 
16097  6939 20 20 63 6F _s59: .db "  com - Library Computer", 0
16097  693D 6D 20 2D 20 
16097  6941 4C 69 62 72 
16097  6945 61 72 79 20 
16097  6949 43 6F 6D 70 
16097  694D 75 74 65 72 
16097  6951 00 
16098  6952 20 20 78 78 _s60: .db "  xxx - Resign Command\n", 0
16098  6956 78 20 2D 20 
16098  695A 52 65 73 69 
16098  695E 67 6E 20 43 
16098  6962 6F 6D 6D 61 
16098  6966 6E 64 0A 00 
16099  696A 73 00       _s61: .db "s", 0
16100  696C 59 6F 75 72 _s62: .db "Your orders are as follows:\nDestroy the %d Klingon warships which have", 0
16100  6970 20 6F 72 64 
16100  6974 65 72 73 20 
16100  6978 61 72 65 20 
16100  697C 61 73 20 66 
16100  6980 6F 6C 6C 6F 
16100  6984 77 73 3A 0A 
16100  6988 44 65 73 74 
16100  698C 72 6F 79 20 
16100  6990 74 68 65 20 
16100  6994 25 64 20 4B 
16100  6998 6C 69 6E 67 
16100  699C 6F 6E 20 77 
16100  69A0 61 72 73 68 
16100  69A4 69 70 73 20 
16100  69A8 77 68 69 63 
16100  69AC 68 20 68 61 
16100  69B0 76 65 00 
16101  69B3 69 6E 76 61 _s63: .db "invaded\n the galaxy before they can attack Federation Headquarters\n", 0
16101  69B7 64 65 64 0A 
16101  69BB 20 74 68 65 
16101  69BF 20 67 61 6C 
16101  69C3 61 78 79 20 
16101  69C7 62 65 66 6F 
16101  69CB 72 65 20 74 
16101  69CF 68 65 79 20 
16101  69D3 63 61 6E 20 
16101  69D7 61 74 74 61 
16101  69DB 63 6B 20 46 
16101  69DF 65 64 65 72 
16101  69E3 61 74 69 6F 
16101  69E7 6E 20 48 65 
16101  69EB 61 64 71 75 
16101  69EF 61 72 74 65 
16101  69F3 72 73 0A 00 
16102  69F7 20 6F 6E 20 _s64: .db " on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy", 0
16102  69FB 73 74 61 72 
16102  69FF 64 61 74 65 
16102  6A03 20 25 75 2E 
16102  6A07 20 54 68 69 
16102  6A0B 73 20 67 69 
16102  6A0F 76 65 73 20 
16102  6A13 79 6F 75 20 
16102  6A17 25 64 20 64 
16102  6A1B 61 79 73 2E 
16102  6A1F 20 54 68 65 
16102  6A23 72 65 20 25 
16102  6A27 73 0A 20 25 
16102  6A2B 64 20 73 74 
16102  6A2F 61 72 62 61 
16102  6A33 73 65 25 73 
16102  6A37 20 69 6E 20 
16102  6A3B 74 68 65 20 
16102  6A3F 67 61 6C 61 
16102  6A43 78 79 00 
16103  6A46 20 66 6F 72 _s65: .db " for resupplying your ship.\n\n Hit any key to accept command. ", 0
16103  6A4A 20 72 65 73 
16103  6A4E 75 70 70 6C 
16103  6A52 79 69 6E 67 
16103  6A56 20 79 6F 75 
16103  6A5A 72 20 73 68 
16103  6A5E 69 70 2E 0A 
16103  6A62 0A 20 48 69 
16103  6A66 74 20 61 6E 
16103  6A6A 79 20 6B 65 
16103  6A6E 79 20 74 6F 
16103  6A72 20 61 63 63 
16103  6A76 65 70 74 20 
16103  6A7A 63 6F 6D 6D 
16103  6A7E 61 6E 64 2E 
16103  6A82 20 00 
16104  6A84 4E 6F 77 20 _s66: .db "Now entering %s quadrant...\n\n", 0
16104  6A88 65 6E 74 65 
16104  6A8C 72 69 6E 67 
16104  6A90 20 25 73 20 
16104  6A94 71 75 61 64 
16104  6A98 72 61 6E 74 
16104  6A9C 2E 2E 2E 0A 
16104  6AA0 0A 00 
16105  6AA2 0A 59 6F 75 _s67: .db "\nYour mission begins with your starship located", 0
16105  6AA6 72 20 6D 69 
16105  6AAA 73 73 69 6F 
16105  6AAE 6E 20 62 65 
16105  6AB2 67 69 6E 73 
16105  6AB6 20 77 69 74 
16105  6ABA 68 20 79 6F 
16105  6ABE 75 72 20 73 
16105  6AC2 74 61 72 73 
16105  6AC6 68 69 70 20 
16105  6ACA 6C 6F 63 61 
16105  6ACE 74 65 64 00 
16106  6AD2 69 6E 20 74 _s68: .db "in the galactic quadrant %s.\n\n", 0
16106  6AD6 68 65 20 67 
16106  6ADA 61 6C 61 63 
16106  6ADE 74 69 63 20 
16106  6AE2 71 75 61 64 
16106  6AE6 72 61 6E 74 
16106  6AEA 20 25 73 2E 
16106  6AEE 0A 0A 00 
16107  6AF1 43 6F 6D 62 _s69: .db "Combat Area  Condition Red\n", 0
16107  6AF5 61 74 20 41 
16107  6AF9 72 65 61 20 
16107  6AFD 20 43 6F 6E 
16107  6B01 64 69 74 69 
16107  6B05 6F 6E 20 52 
16107  6B09 65 64 0A 00 
16108  6B0D 53 68 69 65 _s70: .db "Shields Dangerously Low\n", 0
16108  6B11 6C 64 73 20 
16108  6B15 44 61 6E 67 
16108  6B19 65 72 6F 75 
16108  6B1D 73 6C 79 20 
16108  6B21 4C 6F 77 0A 
16108  6B25 00 
16109  6B26 43 6F 75 72 _s71: .db "Course (0-9): ", 0
16109  6B2A 73 65 20 28 
16109  6B2E 30 2D 39 29 
16109  6B32 3A 20 00 
16110  6B35 4C 74 2E 20 _s72: .db "Lt. Sulu%s", 0
16110  6B39 53 75 6C 75 
16110  6B3D 25 73 00 
16111  6B40 30 2E 32 00 _s73: .db "0.2", 0
16112  6B44 57 61 72 70 _s74: .db "Warp Factor (0-%s): ", 0
16112  6B48 20 46 61 63 
16112  6B4C 74 6F 72 20 
16112  6B50 28 30 2D 25 
16112  6B54 73 29 3A 20 
16112  6B58 00 
16113  6B59 57 61 72 70 _s75: .db "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n", 0
16113  6B5D 20 45 6E 67 
16113  6B61 69 6E 65 73 
16113  6B65 20 61 72 65 
16113  6B69 20 64 61 6D 
16113  6B6D 61 67 65 64 
16113  6B71 2E 20 4D 61 
16113  6B75 78 69 6D 75 
16113  6B79 6D 20 73 70 
16113  6B7D 65 65 64 20 
16113  6B81 3D 20 57 61 
16113  6B85 72 70 20 30 
16113  6B89 2E 32 2E 0A 
16113  6B8D 0A 00 
16114  6B8F 43 68 69 65 _s76: .db "Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n", 0
16114  6B93 66 20 45 6E 
16114  6B97 67 69 6E 65 
16114  6B9B 65 72 20 53 
16114  6B9F 63 6F 74 74 
16114  6BA3 20 72 65 70 
16114  6BA7 6F 72 74 73 
16114  6BAB 3A 0A 20 20 
16114  6BAF 54 68 65 20 
16114  6BB3 65 6E 67 69 
16114  6BB7 6E 65 73 20 
16114  6BBB 77 6F 6E 74 
16114  6BBF 20 74 61 6B 
16114  6BC3 65 20 77 61 
16114  6BC7 72 70 20 25 
16114  6BCB 73 21 0A 0A 
16114  6BCF 00 
16115  6BD0 45 6E 67 69 _s77: .db "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", 0
16115  6BD4 6E 65 65 72 
16115  6BD8 69 6E 67 20 
16115  6BDC 72 65 70 6F 
16115  6BE0 72 74 73 3A 
16115  6BE4 0A 20 20 49 
16115  6BE8 6E 73 75 66 
16115  6BEC 66 69 63 69 
16115  6BF0 65 6E 74 20 
16115  6BF4 65 6E 65 72 
16115  6BF8 67 79 20 61 
16115  6BFC 76 61 69 6C 
16115  6C00 61 62 6C 65 
16115  6C04 20 66 6F 72 
16115  6C08 20 6D 61 6E 
16115  6C0C 65 75 76 65 
16115  6C10 72 69 6E 67 
16115  6C14 20 61 74 20 
16115  6C18 77 61 72 70 
16115  6C1C 20 25 73 21 
16115  6C20 0A 0A 00 
16116  6C23 44 65 66 6C _s78: .db "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", 0
16116  6C27 65 63 74 6F 
16116  6C2B 72 20 43 6F 
16116  6C2F 6E 74 72 6F 
16116  6C33 6C 20 52 6F 
16116  6C37 6F 6D 20 61 
16116  6C3B 63 6B 6E 6F 
16116  6C3F 77 6C 65 64 
16116  6C43 67 65 73 3A 
16116  6C47 0A 20 20 25 
16116  6C4B 64 20 75 6E 
16116  6C4F 69 74 73 20 
16116  6C53 6F 66 20 65 
16116  6C57 6E 65 72 67 
16116  6C5B 79 20 70 72 
16116  6C5F 65 73 65 6E 
16116  6C63 74 6C 79 20 
16116  6C67 64 65 70 6C 
16116  6C6B 6F 79 65 64 
16116  6C6F 20 74 6F 20 
16116  6C73 73 68 69 65 
16116  6C77 6C 64 73 2E 
16116  6C7B 0A 00 
16117  6C7D 4C 54 2E 20 _s79: .db "LT. Uhura reports:\n Message from Starfleet Command:\n\n ", 0
16117  6C81 55 68 75 72 
16117  6C85 61 20 72 65 
16117  6C89 70 6F 72 74 
16117  6C8D 73 3A 0A 20 
16117  6C91 4D 65 73 73 
16117  6C95 61 67 65 20 
16117  6C99 66 72 6F 6D 
16117  6C9D 20 53 74 61 
16117  6CA1 72 66 6C 65 
16117  6CA5 65 74 20 43 
16117  6CA9 6F 6D 6D 61 
16117  6CAD 6E 64 3A 0A 
16117  6CB1 0A 20 00 
16118  6CB4 50 65 72 6D _s80: .db "Permission to attempt crossing of galactic perimeter\n is hereby *denied*. ", 0
16118  6CB8 69 73 73 69 
16118  6CBC 6F 6E 20 74 
16118  6CC0 6F 20 61 74 
16118  6CC4 74 65 6D 70 
16118  6CC8 74 20 63 72 
16118  6CCC 6F 73 73 69 
16118  6CD0 6E 67 20 6F 
16118  6CD4 66 20 67 61 
16118  6CD8 6C 61 63 74 
16118  6CDC 69 63 20 70 
16118  6CE0 65 72 69 6D 
16118  6CE4 65 74 65 72 
16118  6CE8 0A 20 69 73 
16118  6CEC 20 68 65 72 
16118  6CF0 65 62 79 20 
16118  6CF4 2A 64 65 6E 
16118  6CF8 69 65 64 2A 
16118  6CFC 2E 20 00 
16119  6CFF 53 68 75 74 _s81: .db "Shut down your engines.\n\n Chief Engineer Scott reports:\n ", 0
16119  6D03 20 64 6F 77 
16119  6D07 6E 20 79 6F 
16119  6D0B 75 72 20 65 
16119  6D0F 6E 67 69 6E 
16119  6D13 65 73 2E 0A 
16119  6D17 0A 20 43 68 
16119  6D1B 69 65 66 20 
16119  6D1F 45 6E 67 69 
16119  6D23 6E 65 65 72 
16119  6D27 20 53 63 6F 
16119  6D2B 74 74 20 72 
16119  6D2F 65 70 6F 72 
16119  6D33 74 73 3A 0A 
16119  6D37 20 00 
16120  6D39 57 61 72 70 _s82: .db "Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", 0
16120  6D3D 20 45 6E 67 
16120  6D41 69 6E 65 73 
16120  6D45 20 73 68 75 
16120  6D49 74 20 64 6F 
16120  6D4D 77 6E 20 61 
16120  6D51 74 20 73 65 
16120  6D55 63 74 6F 72 
16120  6D59 20 25 64 2C 
16120  6D5D 20 25 64 20 
16120  6D61 6F 66 20 71 
16120  6D65 75 61 64 72 
16120  6D69 61 6E 74 20 
16120  6D6D 25 64 2C 20 
16120  6D71 25 64 2E 0A 
16120  6D75 0A 00 
16121  6D77 57 61 72 70 _s83: .db "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", 0
16121  6D7B 20 45 6E 67 
16121  6D7F 69 6E 65 73 
16121  6D83 20 73 68 75 
16121  6D87 74 20 64 6F 
16121  6D8B 77 6E 20 61 
16121  6D8F 74 20 73 65 
16121  6D93 63 74 6F 72 
16121  6D97 20 25 64 2C 
16121  6D9B 20 25 64 20 
16121  6D9F 64 75 65 20 
16121  6DA3 74 6F 20 62 
16121  6DA7 61 64 20 6E 
16121  6DAB 61 76 69 67 
16121  6DAF 61 74 69 6F 
16121  6DB3 6E 2E 0A 0A 
16121  6DB7 00 
16122  6DB8 53 68 69 65 _s84: .db "Shield Control supplies energy to complete maneuver.\n", 0
16122  6DBC 6C 64 20 43 
16122  6DC0 6F 6E 74 72 
16122  6DC4 6F 6C 20 73 
16122  6DC8 75 70 70 6C 
16122  6DCC 69 65 73 20 
16122  6DD0 65 6E 65 72 
16122  6DD4 67 79 20 74 
16122  6DD8 6F 20 63 6F 
16122  6DDC 6D 70 6C 65 
16122  6DE0 74 65 20 6D 
16122  6DE4 61 6E 65 75 
16122  6DE8 76 65 72 2E 
16122  6DEC 0A 00 
16123  6DEE 47 52 45 45 _s85: .db "GREEN", 0
16123  6DF2 4E 00 
16124  6DF4 59 45 4C 4C _s86: .db "YELLOW", 0
16124  6DF8 4F 57 00 
16125  6DFB 2A 52 45 44 _s87: .db "*RED*", 0
16125  6DFF 2A 00 
16126  6E01 44 4F 43 4B _s88: .db "DOCKED", 0
16126  6E05 45 44 00 
16127  6E08 53 68 69 65 _s89: .db "Shields dropped for docking purposes.", 0
16127  6E0C 6C 64 73 20 
16127  6E10 64 72 6F 70 
16127  6E14 70 65 64 20 
16127  6E18 66 6F 72 20 
16127  6E1C 64 6F 63 6B 
16127  6E20 69 6E 67 20 
16127  6E24 70 75 72 70 
16127  6E28 6F 73 65 73 
16127  6E2C 2E 00 
16128  6E2E 0A 2A 2A 2A _s90: .db "\n*** Short Range Sensors are out ***", 0
16128  6E32 20 53 68 6F 
16128  6E36 72 74 20 52 
16128  6E3A 61 6E 67 65 
16128  6E3E 20 53 65 6E 
16128  6E42 73 6F 72 73 
16128  6E46 20 61 72 65 
16128  6E4A 20 6F 75 74 
16128  6E4E 20 2A 2A 2A 
16128  6E52 00 
16129  6E53 20 20 20 20 _s91: .db "    Stardate            %d\n", 0
16129  6E57 53 74 61 72 
16129  6E5B 64 61 74 65 
16129  6E5F 20 20 20 20 
16129  6E63 20 20 20 20 
16129  6E67 20 20 20 20 
16129  6E6B 25 64 0A 00 
16130  6E6F 20 20 20 20 _s92: .db "    Condition           %s\n", 0
16130  6E73 43 6F 6E 64 
16130  6E77 69 74 69 6F 
16130  6E7B 6E 20 20 20 
16130  6E7F 20 20 20 20 
16130  6E83 20 20 20 20 
16130  6E87 25 73 0A 00 
16131  6E8B 20 20 20 20 _s93: .db "    Quadrant            %d, %d\n", 0
16131  6E8F 51 75 61 64 
16131  6E93 72 61 6E 74 
16131  6E97 20 20 20 20 
16131  6E9B 20 20 20 20 
16131  6E9F 20 20 20 20 
16131  6EA3 25 64 2C 20 
16131  6EA7 25 64 0A 00 
16132  6EAB 20 20 20 20 _s94: .db "    Sector              %d, %d\n", 0
16132  6EAF 53 65 63 74 
16132  6EB3 6F 72 20 20 
16132  6EB7 20 20 20 20 
16132  6EBB 20 20 20 20 
16132  6EBF 20 20 20 20 
16132  6EC3 25 64 2C 20 
16132  6EC7 25 64 0A 00 
16133  6ECB 20 20 20 20 _s95: .db "    Photon Torpedoes    %d\n", 0
16133  6ECF 50 68 6F 74 
16133  6ED3 6F 6E 20 54 
16133  6ED7 6F 72 70 65 
16133  6EDB 64 6F 65 73 
16133  6EDF 20 20 20 20 
16133  6EE3 25 64 0A 00 
16134  6EE7 20 20 20 20 _s96: .db "    Total Energy        %d\n", 0
16134  6EEB 54 6F 74 61 
16134  6EEF 6C 20 45 6E 
16134  6EF3 65 72 67 79 
16134  6EF7 20 20 20 20 
16134  6EFB 20 20 20 20 
16134  6EFF 25 64 0A 00 
16135  6F03 20 20 20 20 _s97: .db "    Shields             %d\n", 0
16135  6F07 53 68 69 65 
16135  6F0B 6C 64 73 20 
16135  6F0F 20 20 20 20 
16135  6F13 20 20 20 20 
16135  6F17 20 20 20 20 
16135  6F1B 25 64 0A 00 
16136  6F1F 20 20 20 20 _s98: .db "    Klingons Remaining  %d\n", 0
16136  6F23 4B 6C 69 6E 
16136  6F27 67 6F 6E 73 
16136  6F2B 20 52 65 6D 
16136  6F2F 61 69 6E 69 
16136  6F33 6E 67 20 20 
16136  6F37 25 64 0A 00 
16137  6F3B 4C 6F 6E 67 _s99: .db "Long Range Scan for Quadrant %d, %d\n\n", 0
16137  6F3F 20 52 61 6E 
16137  6F43 67 65 20 53 
16137  6F47 63 61 6E 20 
16137  6F4B 66 6F 72 20 
16137  6F4F 51 75 61 64 
16137  6F53 72 61 6E 74 
16137  6F57 20 25 64 2C 
16137  6F5B 20 25 64 0A 
16137  6F5F 0A 00 
16138  6F61 25 73 3A 00 _s100: .db "%s:", 0
16139  6F65 2A 2A 2A 00 _s101: .db "***", 0
16140  6F69 20 3A 00    _s102: .db " :", 0
16141  6F6C 25 73 0A 00 _s103: .db "%s\n", 0
16142  6F70 53 63 69 65 _s104: .db "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n", 0
16142  6F74 6E 63 65 20 
16142  6F78 4F 66 66 69 
16142  6F7C 63 65 72 20 
16142  6F80 53 70 6F 63 
16142  6F84 6B 20 72 65 
16142  6F88 70 6F 72 74 
16142  6F8C 73 3A 0A 20 
16142  6F90 20 27 53 65 
16142  6F94 6E 73 6F 72 
16142  6F98 73 20 73 68 
16142  6F9C 6F 77 20 6E 
16142  6FA0 6F 20 65 6E 
16142  6FA4 65 6D 79 20 
16142  6FA8 73 68 69 70 
16142  6FAC 73 20 69 6E 
16142  6FB0 20 74 68 69 
16142  6FB4 73 20 71 75 
16142  6FB8 61 64 72 61 
16142  6FBC 6E 74 27 0A 
16142  6FC0 00 
16143  6FC1 43 6F 6D 70 _s105: .db "Computer failure hampers accuracy.", 0
16143  6FC5 75 74 65 72 
16143  6FC9 20 66 61 69 
16143  6FCD 6C 75 72 65 
16143  6FD1 20 68 61 6D 
16143  6FD5 70 65 72 73 
16143  6FD9 20 61 63 63 
16143  6FDD 75 72 61 63 
16143  6FE1 79 2E 00 
16144  6FE4 50 68 61 73 _s106: .db "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", 0
16144  6FE8 65 72 73 20 
16144  6FEC 6C 6F 63 6B 
16144  6FF0 65 64 20 6F 
16144  6FF4 6E 20 74 61 
16144  6FF8 72 67 65 74 
16144  6FFC 3B 0A 20 45 
16144  7000 6E 65 72 67 
16144  7004 79 20 61 76 
16144  7008 61 69 6C 61 
16144  700C 62 6C 65 20 
16144  7010 3D 20 25 64 
16144  7014 20 75 6E 69 
16144  7018 74 73 0A 0A 
16144  701C 20 4E 75 6D 
16144  7020 62 65 72 20 
16144  7024 6F 66 20 75 
16144  7028 6E 69 74 73 
16144  702C 20 74 6F 20 
16144  7030 66 69 72 65 
16144  7034 3A 20 00 
16145  7037 4E 6F 74 20 _s107: .db "Not enough energy available.\n", 0
16145  703B 65 6E 6F 75 
16145  703F 67 68 20 65 
16145  7043 6E 65 72 67 
16145  7047 79 20 61 76 
16145  704B 61 69 6C 61 
16145  704F 62 6C 65 2E 
16145  7053 0A 00 
16146  7055 53 65 6E 73 _s108: .db "Sensors show no damage to enemy at %d, %d\n\n", 0
16146  7059 6F 72 73 20 
16146  705D 73 68 6F 77 
16146  7061 20 6E 6F 20 
16146  7065 64 61 6D 61 
16146  7069 67 65 20 74 
16146  706D 6F 20 65 6E 
16146  7071 65 6D 79 20 
16146  7075 61 74 20 25 
16146  7079 64 2C 20 25 
16146  707D 64 0A 0A 00 
16147  7081 25 64 20 75 _s109: .db "%d unit hit on Klingon at sector %d, %d\n", 0
16147  7085 6E 69 74 20 
16147  7089 68 69 74 20 
16147  708D 6F 6E 20 4B 
16147  7091 6C 69 6E 67 
16147  7095 6F 6E 20 61 
16147  7099 74 20 73 65 
16147  709D 63 74 6F 72 
16147  70A1 20 25 64 2C 
16147  70A5 20 25 64 0A 
16147  70A9 00 
16148  70AA 2A 2A 2A 20 _s110: .db "*** Klingon Destroyed ***\n", 0
16148  70AE 4B 6C 69 6E 
16148  70B2 67 6F 6E 20 
16148  70B6 44 65 73 74 
16148  70BA 72 6F 79 65 
16148  70BE 64 20 2A 2A 
16148  70C2 2A 0A 00 
16149  70C5 20 20 20 28 _s111: .db "   (Sensors show %d units remaining.)\n\n", 0
16149  70C9 53 65 6E 73 
16149  70CD 6F 72 73 20 
16149  70D1 73 68 6F 77 
16149  70D5 20 25 64 20 
16149  70D9 75 6E 69 74 
16149  70DD 73 20 72 65 
16149  70E1 6D 61 69 6E 
16149  70E5 69 6E 67 2E 
16149  70E9 29 0A 0A 00 
16150  70ED 41 6C 6C 20 _s112: .db "All photon torpedoes expended", 0
16150  70F1 70 68 6F 74 
16150  70F5 6F 6E 20 74 
16150  70F9 6F 72 70 65 
16150  70FD 64 6F 65 73 
16150  7101 20 65 78 70 
16150  7105 65 6E 64 65 
16150  7109 64 00 
16151  710B 45 6E 73 69 _s113: .db "Ensign Chekov%s", 0
16151  710F 67 6E 20 43 
16151  7113 68 65 6B 6F 
16151  7117 76 25 73 00 
16152  711B 54 6F 72 70 _s114: .db "Torpedo Track:", 0
16152  711F 65 64 6F 20 
16152  7123 54 72 61 63 
16152  7127 6B 3A 00 
16153  712A 20 20 20 20 _s115: .db "    %d, %d\n", 0
16153  712E 25 64 2C 20 
16153  7132 25 64 0A 00 
16154  7136 54 6F 72 70 _s116: .db "Torpedo Missed\n", 0
16154  713A 65 64 6F 20 
16154  713E 4D 69 73 73 
16154  7142 65 64 0A 00 
16155  7146 53 74 61 72 _s117: .db "Star at %d, %d absorbed torpedo energy.\n\n", 0
16155  714A 20 61 74 20 
16155  714E 25 64 2C 20 
16155  7152 25 64 20 61 
16155  7156 62 73 6F 72 
16155  715A 62 65 64 20 
16155  715E 74 6F 72 70 
16155  7162 65 64 6F 20 
16155  7166 65 6E 65 72 
16155  716A 67 79 2E 0A 
16155  716E 0A 00 
16156  7170 2A 2A 2A 20 _s118: .db "*** Starbase Destroyed ***", 0
16156  7174 53 74 61 72 
16156  7178 62 61 73 65 
16156  717C 20 44 65 73 
16156  7180 74 72 6F 79 
16156  7184 65 64 20 2A 
16156  7188 2A 2A 00 
16157  718B 54 68 61 74 _s119: .db "That does it, Captain!!", 0
16157  718F 20 64 6F 65 
16157  7193 73 20 69 74 
16157  7197 2C 20 43 61 
16157  719B 70 74 61 69 
16157  719F 6E 21 21 00 
16158  71A3 59 6F 75 20 _s120: .db "You are hereby relieved of command\n", 0
16158  71A7 61 72 65 20 
16158  71AB 68 65 72 65 
16158  71AF 62 79 20 72 
16158  71B3 65 6C 69 65 
16158  71B7 76 65 64 20 
16158  71BB 6F 66 20 63 
16158  71BF 6F 6D 6D 61 
16158  71C3 6E 64 0A 00 
16159  71C7 61 6E 64 20 _s121: .db "and sentenced to 99 stardates of hard", 0
16159  71CB 73 65 6E 74 
16159  71CF 65 6E 63 65 
16159  71D3 64 20 74 6F 
16159  71D7 20 39 39 20 
16159  71DB 73 74 61 72 
16159  71DF 64 61 74 65 
16159  71E3 73 20 6F 66 
16159  71E7 20 68 61 72 
16159  71EB 64 00 
16160  71ED 6C 61 62 6F _s122: .db "labor on Cygnus 12!!\n", 0
16160  71F1 72 20 6F 6E 
16160  71F5 20 43 79 67 
16160  71F9 6E 75 73 20 
16160  71FD 31 32 21 21 
16160  7201 0A 00 
16161  7203 53 74 61 72 _s123: .db "Starfleet Command reviewing your record to consider\n court martial!\n", 0
16161  7207 66 6C 65 65 
16161  720B 74 20 43 6F 
16161  720F 6D 6D 61 6E 
16161  7213 64 20 72 65 
16161  7217 76 69 65 77 
16161  721B 69 6E 67 20 
16161  721F 79 6F 75 72 
16161  7223 20 72 65 63 
16161  7227 6F 72 64 20 
16161  722B 74 6F 20 63 
16161  722F 6F 6E 73 69 
16161  7233 64 65 72 0A 
16161  7237 20 63 6F 75 
16161  723B 72 74 20 6D 
16161  723F 61 72 74 69 
16161  7243 61 6C 21 0A 
16161  7247 00 
16162  7248 44 61 6D 61 _s124: .db "Damage Control report not available.", 0
16162  724C 67 65 20 43 
16162  7250 6F 6E 74 72 
16162  7254 6F 6C 20 72 
16162  7258 65 70 6F 72 
16162  725C 74 20 6E 6F 
16162  7260 74 20 61 76 
16162  7264 61 69 6C 61 
16162  7268 62 6C 65 2E 
16162  726C 00 
16163  726D 0A 54 65 63 _s125: .db "\nTechnicians standing by to effect repairs to your ship;\n", 0
16163  7271 68 6E 69 63 
16163  7275 69 61 6E 73 
16163  7279 20 73 74 61 
16163  727D 6E 64 69 6E 
16163  7281 67 20 62 79 
16163  7285 20 74 6F 20 
16163  7289 65 66 66 65 
16163  728D 63 74 20 72 
16163  7291 65 70 61 69 
16163  7295 72 73 20 74 
16163  7299 6F 20 79 6F 
16163  729D 75 72 20 73 
16163  72A1 68 69 70 3B 
16163  72A5 0A 00 
16164  72A7 45 73 74 69 _s126: .db "Estimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? ", 0
16164  72AB 6D 61 74 65 
16164  72AF 64 20 74 69 
16164  72B3 6D 65 20 74 
16164  72B7 6F 20 72 65 
16164  72BB 70 61 69 72 
16164  72BF 3A 20 25 73 
16164  72C3 20 73 74 61 
16164  72C7 72 64 61 74 
16164  72CB 65 73 2E 0A 
16164  72CF 20 57 69 6C 
16164  72D3 6C 20 79 6F 
16164  72D7 75 20 61 75 
16164  72DB 74 68 6F 72 
16164  72DF 69 7A 65 20 
16164  72E3 74 68 65 20 
16164  72E7 72 65 70 61 
16164  72EB 69 72 20 6F 
16164  72EF 72 64 65 72 
16164  72F3 20 28 79 2F 
16164  72F7 4E 29 3F 20 
16164  72FB 00 
16165  72FC 44 65 76 69 _s127: .db "Device            State of Repair", 0
16165  7300 63 65 20 20 
16165  7304 20 20 20 20 
16165  7308 20 20 20 20 
16165  730C 20 20 53 74 
16165  7310 61 74 65 20 
16165  7314 6F 66 20 52 
16165  7318 65 70 61 69 
16165  731C 72 00 
16166  731E 25 2D 32 35 _s128: .db "%-25s%6s\n", 0
16166  7322 73 25 36 73 
16166  7326 0A 00 
16167  7328 0A 00       _s129: .db "\n", 0
16168  732A 45 6E 65 72 _s130: .db "Energy available = %d\n\n Input number of units to shields: ", 0
16168  732E 67 79 20 61 
16168  7332 76 61 69 6C 
16168  7336 61 62 6C 65 
16168  733A 20 3D 20 25 
16168  733E 64 0A 0A 20 
16168  7342 49 6E 70 75 
16168  7346 74 20 6E 75 
16168  734A 6D 62 65 72 
16168  734E 20 6F 66 20 
16168  7352 75 6E 69 74 
16168  7356 73 20 74 6F 
16168  735A 20 73 68 69 
16168  735E 65 6C 64 73 
16168  7362 3A 20 00 
16169  7365 3C 53 68 69 _s131: .db "<Shields Unchanged>\n", 0
16169  7369 65 6C 64 73 
16169  736D 20 55 6E 63 
16169  7371 68 61 6E 67 
16169  7375 65 64 3E 0A 
16169  7379 00 
16170  737A 53 68 69 65 _s132: .db "Shield Control Reports:\n  This is not the Federation Treasury.", 0
16170  737E 6C 64 20 43 
16170  7382 6F 6E 74 72 
16170  7386 6F 6C 20 52 
16170  738A 65 70 6F 72 
16170  738E 74 73 3A 0A 
16170  7392 20 20 54 68 
16170  7396 69 73 20 69 
16170  739A 73 20 6E 6F 
16170  739E 74 20 74 68 
16170  73A2 65 20 46 65 
16170  73A6 64 65 72 61 
16170  73AA 74 69 6F 6E 
16170  73AE 20 54 72 65 
16170  73B2 61 73 75 72 
16170  73B6 79 2E 00 
16171  73B9 44 65 66 6C _s133: .db "Deflector Control Room report:\n  Shields now at %d units per your command.\n\n", 0
16171  73BD 65 63 74 6F 
16171  73C1 72 20 43 6F 
16171  73C5 6E 74 72 6F 
16171  73C9 6C 20 52 6F 
16171  73CD 6F 6D 20 72 
16171  73D1 65 70 6F 72 
16171  73D5 74 3A 0A 20 
16171  73D9 20 53 68 69 
16171  73DD 65 6C 64 73 
16171  73E1 20 6E 6F 77 
16171  73E5 20 61 74 20 
16171  73E9 25 64 20 75 
16171  73ED 6E 69 74 73 
16171  73F1 20 70 65 72 
16171  73F5 20 79 6F 75 
16171  73F9 72 20 63 6F 
16171  73FD 6D 6D 61 6E 
16171  7401 64 2E 0A 0A 
16171  7405 00 
16172  7406 43 6F 6D 70 _s134: .db "Computer active and awating command: ", 0
16172  740A 75 74 65 72 
16172  740E 20 61 63 74 
16172  7412 69 76 65 20 
16172  7416 61 6E 64 20 
16172  741A 61 77 61 74 
16172  741E 69 6E 67 20 
16172  7422 63 6F 6D 6D 
16172  7426 61 6E 64 3A 
16172  742A 20 00 
16173  742C 46 75 6E 63 _s135: .db "Functions available from Library-Computer:\n\n", 0
16173  7430 74 69 6F 6E 
16173  7434 73 20 61 76 
16173  7438 61 69 6C 61 
16173  743C 62 6C 65 20 
16173  7440 66 72 6F 6D 
16173  7444 20 4C 69 62 
16173  7448 72 61 72 79 
16173  744C 2D 43 6F 6D 
16173  7450 70 75 74 65 
16173  7454 72 3A 0A 0A 
16173  7458 00 
16174  7459 20 20 20 30 _s136: .db "   0 = Cumulative Galactic Record\n", 0
16174  745D 20 3D 20 43 
16174  7461 75 6D 75 6C 
16174  7465 61 74 69 76 
16174  7469 65 20 47 61 
16174  746D 6C 61 63 74 
16174  7471 69 63 20 52 
16174  7475 65 63 6F 72 
16174  7479 64 0A 00 
16175  747C 20 20 20 31 _s137: .db "   1 = Status Report\n", 0
16175  7480 20 3D 20 53 
16175  7484 74 61 74 75 
16175  7488 73 20 52 65 
16175  748C 70 6F 72 74 
16175  7490 0A 00 
16176  7492 20 20 20 32 _s138: .db "   2 = Photon Torpedo Data\n", 0
16176  7496 20 3D 20 50 
16176  749A 68 6F 74 6F 
16176  749E 6E 20 54 6F 
16176  74A2 72 70 65 64 
16176  74A6 6F 20 44 61 
16176  74AA 74 61 0A 00 
16177  74AE 20 20 20 33 _s139: .db "   3 = Starbase Nav Data\n", 0
16177  74B2 20 3D 20 53 
16177  74B6 74 61 72 62 
16177  74BA 61 73 65 20 
16177  74BE 4E 61 76 20 
16177  74C2 44 61 74 61 
16177  74C6 0A 00 
16178  74C8 20 20 20 34 _s140: .db "   4 = Direction/Distance Calculator\n", 0
16178  74CC 20 3D 20 44 
16178  74D0 69 72 65 63 
16178  74D4 74 69 6F 6E 
16178  74D8 2F 44 69 73 
16178  74DC 74 61 6E 63 
16178  74E0 65 20 43 61 
16178  74E4 6C 63 75 6C 
16178  74E8 61 74 6F 72 
16178  74EC 0A 00 
16179  74EE 20 20 20 35 _s141: .db "   5 = Galaxy Region Name Map\n", 0
16179  74F2 20 3D 20 47 
16179  74F6 61 6C 61 78 
16179  74FA 79 20 52 65 
16179  74FE 67 69 6F 6E 
16179  7502 20 4E 61 6D 
16179  7506 65 20 4D 61 
16179  750A 70 0A 00 
16180  750D 0A 20 20 20 _s142: .db "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", 0
16180  7511 20 20 43 6F 
16180  7515 6D 70 75 74 
16180  7519 65 72 20 52 
16180  751D 65 63 6F 72 
16180  7521 64 20 6F 66 
16180  7525 20 47 61 6C 
16180  7529 61 78 79 20 
16180  752D 66 6F 72 20 
16180  7531 51 75 61 64 
16180  7535 72 61 6E 74 
16180  7539 20 25 64 2C 
16180  753D 25 64 0A 0A 
16180  7541 00 
16181  7542 20 20 20 20 _s143: .db "     1     2     3     4     5     6     7     8", 0
16181  7546 20 31 20 20 
16181  754A 20 20 20 32 
16181  754E 20 20 20 20 
16181  7552 20 33 20 20 
16181  7556 20 20 20 34 
16181  755A 20 20 20 20 
16181  755E 20 35 20 20 
16181  7562 20 20 20 36 
16181  7566 20 20 20 20 
16181  756A 20 37 20 20 
16181  756E 20 20 20 38 
16181  7572 00 
16182  7573 25 73 25 64 _s144: .db "%s%d", 0
16182  7577 00 
16183  7578 20 20 20 53 _s145: .db "   Status Report:\n", 0
16183  757C 74 61 74 75 
16183  7580 73 20 52 65 
16183  7584 70 6F 72 74 
16183  7588 3A 0A 00 
16184  758B 4B 6C 69 6E _s146: .db "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 0
16184  758F 67 6F 6E 25 
16184  7593 73 20 4C 65 
16184  7597 66 74 3A 20 
16184  759B 25 64 0A 20 
16184  759F 4D 69 73 73 
16184  75A3 69 6F 6E 20 
16184  75A7 6D 75 73 74 
16184  75AB 20 62 65 20 
16184  75AF 63 6F 6D 70 
16184  75B3 6C 65 74 65 
16184  75B7 64 20 69 6E 
16184  75BB 20 25 64 2E 
16184  75BF 25 64 20 73 
16184  75C3 74 61 72 64 
16184  75C7 61 74 65 73 
16184  75CB 0A 00 
16185  75CD 59 6F 75 72 _s147: .db "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n", 0
16185  75D1 20 73 74 75 
16185  75D5 70 69 64 69 
16185  75D9 74 79 20 68 
16185  75DD 61 73 20 6C 
16185  75E1 65 66 74 20 
16185  75E5 79 6F 75 20 
16185  75E9 6F 6E 20 79 
16185  75ED 6F 75 72 20 
16185  75F1 6F 77 6E 20 
16185  75F5 69 6E 20 74 
16185  75F9 68 65 20 67 
16185  75FD 61 6C 61 78 
16185  7601 79 0A 20 2D 
16185  7605 2D 20 79 6F 
16185  7609 75 20 68 61 
16185  760D 76 65 20 6E 
16185  7611 6F 20 73 74 
16185  7615 61 72 62 61 
16185  7619 73 65 73 20 
16185  761D 6C 65 66 74 
16185  7621 21 0A 00 
16186  7624 54 68 65 20 _s148: .db "The Federation is maintaining %d starbase%s in the galaxy\n\n", 0
16186  7628 46 65 64 65 
16186  762C 72 61 74 69 
16186  7630 6F 6E 20 69 
16186  7634 73 20 6D 61 
16186  7638 69 6E 74 61 
16186  763C 69 6E 69 6E 
16186  7640 67 20 25 64 
16186  7644 20 73 74 61 
16186  7648 72 62 61 73 
16186  764C 65 25 73 20 
16186  7650 69 6E 20 74 
16186  7654 68 65 20 67 
16186  7658 61 6C 61 78 
16186  765C 79 0A 0A 00 
16187  7660 46 72 6F 6D _s149: .db "From Enterprise to Klingon battlecriuser%s:\n\n", 0
16187  7664 20 45 6E 74 
16187  7668 65 72 70 72 
16187  766C 69 73 65 20 
16187  7670 74 6F 20 4B 
16187  7674 6C 69 6E 67 
16187  7678 6F 6E 20 62 
16187  767C 61 74 74 6C 
16187  7680 65 63 72 69 
16187  7684 75 73 65 72 
16187  7688 25 73 3A 0A 
16187  768C 0A 00 
16188  768E 4D 72 2E 20 _s150: .db "Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n", 0
16188  7692 53 70 6F 63 
16188  7696 6B 20 72 65 
16188  769A 70 6F 72 74 
16188  769E 73 2C 0A 20 
16188  76A2 20 53 65 6E 
16188  76A6 73 6F 72 73 
16188  76AA 20 73 68 6F 
16188  76AE 77 20 6E 6F 
16188  76B2 20 73 74 61 
16188  76B6 72 62 61 73 
16188  76BA 65 73 20 69 
16188  76BE 6E 20 74 68 
16188  76C2 69 73 20 71 
16188  76C6 75 61 64 72 
16188  76CA 61 6E 74 2E 
16188  76CE 0A 00 
16189  76D0 44 69 72 65 _s151: .db "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 0
16189  76D4 63 74 69 6F 
16189  76D8 6E 2F 44 69 
16189  76DC 73 74 61 6E 
16189  76E0 63 65 20 43 
16189  76E4 61 6C 63 75 
16189  76E8 6C 61 74 6F 
16189  76EC 72 0A 20 59 
16189  76F0 6F 75 20 61 
16189  76F4 72 65 20 61 
16189  76F8 74 20 71 75 
16189  76FC 61 64 72 61 
16189  7700 6E 74 20 25 
16189  7704 64 2C 25 64 
16189  7708 20 73 65 63 
16189  770C 74 6F 72 20 
16189  7710 25 64 2C 25 
16189  7714 64 0A 0A 20 
16189  7718 50 6C 65 61 
16189  771C 73 65 20 65 
16189  7720 6E 74 65 72 
16189  7724 20 69 6E 69 
16189  7728 74 69 61 6C 
16189  772C 20 58 20 63 
16189  7730 6F 6F 72 64 
16189  7734 69 6E 61 74 
16189  7738 65 3A 20 00 
16190  773C 50 6C 65 61 _s152: .db "Please enter initial Y coordinate: ", 0
16190  7740 73 65 20 65 
16190  7744 6E 74 65 72 
16190  7748 20 69 6E 69 
16190  774C 74 69 61 6C 
16190  7750 20 59 20 63 
16190  7754 6F 6F 72 64 
16190  7758 69 6E 61 74 
16190  775C 65 3A 20 00 
16191  7760 50 6C 65 61 _s153: .db "Please enter final X coordinate: ", 0
16191  7764 73 65 20 65 
16191  7768 6E 74 65 72 
16191  776C 20 66 69 6E 
16191  7770 61 6C 20 58 
16191  7774 20 63 6F 6F 
16191  7778 72 64 69 6E 
16191  777C 61 74 65 3A 
16191  7780 20 00 
16192  7782 50 6C 65 61 _s154: .db "Please enter final Y coordinate: ", 0
16192  7786 73 65 20 65 
16192  778A 6E 74 65 72 
16192  778E 20 66 69 6E 
16192  7792 61 6C 20 59 
16192  7796 20 63 6F 6F 
16192  779A 72 64 69 6E 
16192  779E 61 74 65 3A 
16192  77A2 20 00 
16193  77A4 0A 20 20 20 _s155: .db "\n                   The Galaxy\n\n", 0
16193  77A8 20 20 20 20 
16193  77AC 20 20 20 20 
16193  77B0 20 20 20 20 
16193  77B4 20 20 20 20 
16193  77B8 54 68 65 20 
16193  77BC 47 61 6C 61 
16193  77C0 78 79 0A 0A 
16193  77C4 00 
16194  77C5 20 20 20 20 _s156: .db "    1     2     3     4     5     6     7     8\n", 0
16194  77C9 31 20 20 20 
16194  77CD 20 20 32 20 
16194  77D1 20 20 20 20 
16194  77D5 33 20 20 20 
16194  77D9 20 20 34 20 
16194  77DD 20 20 20 20 
16194  77E1 35 20 20 20 
16194  77E5 20 20 36 20 
16194  77E9 20 20 20 20 
16194  77ED 37 20 20 20 
16194  77F1 20 20 38 0A 
16194  77F5 00 
16195  77F6 25 73 25 64 _s157: .db "%s%d ", 0
16195  77FA 20 00 
16196  77FC 20 20 44 49 _s158: .db "  DIRECTION = ", 0
16196  7800 52 45 43 54 
16196  7804 49 4F 4E 20 
16196  7808 3D 20 00 
16197  780B 25 73 00    _s159: .db "%s", 0
16198  780E 54 68 65 20 _s160: .db "The Enterprise has been destroyed. The Federation will be conquered.\n", 0
16198  7812 45 6E 74 65 
16198  7816 72 70 72 69 
16198  781A 73 65 20 68 
16198  781E 61 73 20 62 
16198  7822 65 65 6E 20 
16198  7826 64 65 73 74 
16198  782A 72 6F 79 65 
16198  782E 64 2E 20 54 
16198  7832 68 65 20 46 
16198  7836 65 64 65 72 
16198  783A 61 74 69 6F 
16198  783E 6E 20 77 69 
16198  7842 6C 6C 20 62 
16198  7846 65 20 63 6F 
16198  784A 6E 71 75 65 
16198  784E 72 65 64 2E 
16198  7852 0A 00 
16199  7854 49 74 20 69 _s161: .db "It is stardate %d.\n\n", 0
16199  7858 73 20 73 74 
16199  785C 61 72 64 61 
16199  7860 74 65 20 25 
16199  7864 64 2E 0A 0A 
16199  7868 00 
16200  7869 54 68 65 72 _s162: .db "There were %d Klingon Battlecruisers left at the end of your mission.\n\n", 0
16200  786D 65 20 77 65 
16200  7871 72 65 20 25 
16200  7875 64 20 4B 6C 
16200  7879 69 6E 67 6F 
16200  787D 6E 20 42 61 
16200  7881 74 74 6C 65 
16200  7885 63 72 75 69 
16200  7889 73 65 72 73 
16200  788D 20 6C 65 66 
16200  7891 74 20 61 74 
16200  7895 20 74 68 65 
16200  7899 20 65 6E 64 
16200  789D 20 6F 66 20 
16200  78A1 79 6F 75 72 
16200  78A5 20 6D 69 73 
16200  78A9 73 69 6F 6E 
16200  78AD 2E 0A 0A 00 
16201  78B1 43 6F 6E 67 _s163: .db "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n", 0
16201  78B5 72 61 74 75 
16201  78B9 6C 61 74 69 
16201  78BD 6F 6E 73 2C 
16201  78C1 20 43 61 70 
16201  78C5 74 61 69 6E 
16201  78C9 21 20 20 54 
16201  78CD 68 65 20 6C 
16201  78D1 61 73 74 20 
16201  78D5 4B 6C 69 6E 
16201  78D9 67 6F 6E 20 
16201  78DD 42 61 74 74 
16201  78E1 6C 65 20 43 
16201  78E5 72 75 69 73 
16201  78E9 65 72 0A 20 
16201  78ED 6D 65 6E 61 
16201  78F1 63 69 6E 67 
16201  78F5 20 74 68 65 
16201  78F9 20 46 65 64 
16201  78FD 65 72 61 74 
16201  7901 69 6F 6E 20 
16201  7905 68 61 73 20 
16201  7909 62 65 65 6E 
16201  790D 20 64 65 73 
16201  7911 74 6F 79 65 
16201  7915 64 2E 0A 00 
16202  7919 59 6F 75 72 _s164: .db "Your efficiency rating is %s\n", 0
16202  791D 20 65 66 66 
16202  7921 69 63 69 65 
16202  7925 6E 63 79 20 
16202  7929 72 61 74 69 
16202  792D 6E 67 20 69 
16202  7931 73 20 25 73 
16202  7935 0A 00 
16203  7937 54 68 65 20 _s165: .db "The Federation is in need of a new starship commander", 0
16203  793B 46 65 64 65 
16203  793F 72 61 74 69 
16203  7943 6F 6E 20 69 
16203  7947 73 20 69 6E 
16203  794B 20 6E 65 65 
16203  794F 64 20 6F 66 
16203  7953 20 61 20 6E 
16203  7957 65 77 20 73 
16203  795B 74 61 72 73 
16203  795F 68 69 70 20 
16203  7963 63 6F 6D 6D 
16203  7967 61 6E 64 65 
16203  796B 72 00 
16204  796D 20 66 6F 72 _s166: .db " for a similar mission.\n", 0
16204  7971 20 61 20 73 
16204  7975 69 6D 69 6C 
16204  7979 61 72 20 6D 
16204  797D 69 73 73 69 
16204  7981 6F 6E 2E 0A 
16204  7985 00 
16205  7986 49 66 20 74 _s167: .db "If there is a volunteer, let him step forward and", 0
16205  798A 68 65 72 65 
16205  798E 20 69 73 20 
16205  7992 61 20 76 6F 
16205  7996 6C 75 6E 74 
16205  799A 65 65 72 2C 
16205  799E 20 6C 65 74 
16205  79A2 20 68 69 6D 
16205  79A6 20 73 74 65 
16205  79AA 70 20 66 6F 
16205  79AE 72 77 61 72 
16205  79B2 64 20 61 6E 
16205  79B6 64 00 
16206  79B8 20 65 6E 74 _s168: .db " enter aye: ", 0
16206  79BC 65 72 20 61 
16206  79C0 79 65 3A 20 
16206  79C4 00 
16207  79C5 61 79 65 00 _s169: .db "aye", 0
16208  79C9 53 74 61 72 _s170: .db "Starbase shields protect the Enterprise\n", 0
16208  79CD 62 61 73 65 
16208  79D1 20 73 68 69 
16208  79D5 65 6C 64 73 
16208  79D9 20 70 72 6F 
16208  79DD 74 65 63 74 
16208  79E1 20 74 68 65 
16208  79E5 20 45 6E 74 
16208  79E9 65 72 70 72 
16208  79ED 69 73 65 0A 
16208  79F1 00 
16209  79F2 25 64 20 75 _s171: .db "%d unit hit on Enterprise from sector %d, %d\n", 0
16209  79F6 6E 69 74 20 
16209  79FA 68 69 74 20 
16209  79FE 6F 6E 20 45 
16209  7A02 6E 74 65 72 
16209  7A06 70 72 69 73 
16209  7A0A 65 20 66 72 
16209  7A0E 6F 6D 20 73 
16209  7A12 65 63 74 6F 
16209  7A16 72 20 25 64 
16209  7A1A 2C 20 25 64 
16209  7A1E 0A 00 
16210  7A20 20 20 20 20 _s172: .db "    <Shields down to %d units>\n\n", 0
16210  7A24 3C 53 68 69 
16210  7A28 65 6C 64 73 
16210  7A2C 20 64 6F 77 
16210  7A30 6E 20 74 6F 
16210  7A34 20 25 64 20 
16210  7A38 75 6E 69 74 
16210  7A3C 73 3E 0A 0A 
16210  7A40 00 
16211  7A41 44 61 6D 61 _s173: .db "Damage Control reports\n%s damaged by hit\n\n", 0
16211  7A45 67 65 20 43 
16211  7A49 6F 6E 74 72 
16211  7A4D 6F 6C 20 72 
16211  7A51 65 70 6F 72 
16211  7A55 74 73 0A 25 
16211  7A59 73 20 64 61 
16211  7A5D 6D 61 67 65 
16211  7A61 64 20 62 79 
16211  7A65 20 68 69 74 
16211  7A69 0A 0A 00 
16212  7A6C 20 20 20 20 _s174: .db "    %s repair completed\n\n", 0
16212  7A70 25 73 20 72 
16212  7A74 65 70 61 69 
16212  7A78 72 20 63 6F 
16212  7A7C 6D 70 6C 65 
16212  7A80 74 65 64 0A 
16212  7A84 0A 00 
16213  7A86 20 20 20 20 _s175: .db "    %s damaged\n\n", 0
16213  7A8A 25 73 20 64 
16213  7A8E 61 6D 61 67 
16213  7A92 65 64 0A 0A 
16213  7A96 00 
16214  7A97 20 20 20 20 _s176: .db "    %s state of repair improved\n\n", 0
16214  7A9B 25 73 20 73 
16214  7A9F 74 61 74 65 
16214  7AA3 20 6F 66 20 
16214  7AA7 72 65 70 61 
16214  7AAB 69 72 20 69 
16214  7AAF 6D 70 72 6F 
16214  7AB3 76 65 64 0A 
16214  7AB7 0A 00 
16215  7AB9 20 49 00    _s177: .db " I", 0
16216  7ABC 20 49 49 00 _s178: .db " II", 0
16217  7AC0 20 49 49 49 _s179: .db " III", 0
16217  7AC4 00 
16218  7AC5 20 49 56 00 _s180: .db " IV", 0
16219  7AC9 55 6E 6B 6E _s181: .db "Unknown", 0
16219  7ACD 6F 77 6E 00 
16220  7AD1             
16221  7AD1 D3 7A       _heap_top: .dw _heap
16222  7AD3 00          _heap: .db 0
16223  7AD4             ; --- END DATA SEGMENT
16224  7AD4             
16225  7AD4             .end
tasm: Number of errors = 0
