0001   0000             ; --- FILENAME: games/startrek
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; intro(); 
0011   0408 07 2E 21      call intro
0012   040B             ;; new_game(); 
0013   040B 07 8F 21      call new_game
0014   040E             ;; return (0); 
0015   040E 26 00 00      mov b, $0
0016   0411 F9            leave
0017   0412 05 0B         syscall sys_terminate_proc
0018   0414             
0019   0414             strcpy:
0020   0414 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0021   0417             ;; char *psrc; 
0022   0417 52 02 00      sub sp, 2 ; psrc
0023   041A             ;; char *pdest; 
0024   041A 52 02 00      sub sp, 2 ; pdest
0025   041D             ;; psrc = src; 
0026   041D FA FF FF      lea d, [bp + -1] ; $psrc
0027   0420 DA            push d
0028   0421 FA 07 00      lea d, [bp + 7] ; $src
0029   0424 2A            mov b, [d]
0030   0425 E7            pop d
0031   0426 FD 43         mov [d], b
0032   0428             ;; pdest = dest; 
0033   0428 FA FD FF      lea d, [bp + -3] ; $pdest
0034   042B DA            push d
0035   042C FA 05 00      lea d, [bp + 5] ; $dest
0036   042F 2A            mov b, [d]
0037   0430 E7            pop d
0038   0431 FD 43         mov [d], b
0039   0433             ;; while(*psrc) *pdest++ = *psrc++; 
0040   0433             _while1_cond:
0041   0433 FA FF FF      lea d, [bp + -1] ; $psrc
0042   0436 2A            mov b, [d]
0043   0437 74            mov d, b
0044   0438 32            mov bl, [d]
0045   0439 A7 00         mov bh, 0
0046   043B C0 00 00      cmp b, 0
0047   043E C6 66 04      je _while1_exit
0048   0441             _while1_block:
0049   0441             ;; *pdest++ = *psrc++; 
0050   0441 FA FD FF      lea d, [bp + -3] ; $pdest
0051   0444 2A            mov b, [d]
0052   0445 FD 77         inc b
0053   0447 FA FD FF      lea d, [bp + -3] ; $pdest
0054   044A FD 43         mov [d], b
0055   044C FD 7D         dec b
0056   044E D8            push b
0057   044F FA FF FF      lea d, [bp + -1] ; $psrc
0058   0452 2A            mov b, [d]
0059   0453 FD 77         inc b
0060   0455 FA FF FF      lea d, [bp + -1] ; $psrc
0061   0458 FD 43         mov [d], b
0062   045A FD 7D         dec b
0063   045C 74            mov d, b
0064   045D 32            mov bl, [d]
0065   045E A7 00         mov bh, 0
0066   0460 E7            pop d
0067   0461 FD 3E         mov [d], bl
0068   0463 0A 33 04      jmp _while1_cond
0069   0466             _while1_exit:
0070   0466             ;; *pdest = '\0'; 
0071   0466 FA FD FF      lea d, [bp + -3] ; $pdest
0072   0469 2A            mov b, [d]
0073   046A D8            push b
0074   046B 26 00 00      mov b, $0
0075   046E E7            pop d
0076   046F FD 3E         mov [d], bl
0077   0471 F9            leave
0078   0472 09            ret
0079   0473             
0080   0473             strcmp:
0081   0473 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0082   0476             ;; while (*s1 && (*s1 == *s2)) { 
0083   0476             _while2_cond:
0084   0476 FA 05 00      lea d, [bp + 5] ; $s1
0085   0479 2A            mov b, [d]
0086   047A 74            mov d, b
0087   047B 32            mov bl, [d]
0088   047C A7 00         mov bh, 0
0089   047E             ; START LOGICAL AND
0090   047E D7            push a
0091   047F 11            mov a, b
0092   0480 FA 05 00      lea d, [bp + 5] ; $s1
0093   0483 2A            mov b, [d]
0094   0484 74            mov d, b
0095   0485 32            mov bl, [d]
0096   0486 A7 00         mov bh, 0
0097   0488             ; START RELATIONAL
0098   0488 D7            push a
0099   0489 11            mov a, b
0100   048A FA 07 00      lea d, [bp + 7] ; $s2
0101   048D 2A            mov b, [d]
0102   048E 74            mov d, b
0103   048F 32            mov bl, [d]
0104   0490 A7 00         mov bh, 0
0105   0492 B0            cmp a, b
0106   0493 FD 71         seq ; ==
0107   0495 E4            pop a
0108   0496             ; END RELATIONAL
0109   0496 FD A7         sand a, b
0110   0498 E4            pop a
0111   0499             ; END LOGICAL AND
0112   0499 C0 00 00      cmp b, 0
0113   049C C6 BC 04      je _while2_exit
0114   049F             _while2_block:
0115   049F             ;; s1++; 
0116   049F FA 05 00      lea d, [bp + 5] ; $s1
0117   04A2 2A            mov b, [d]
0118   04A3 FD 77         inc b
0119   04A5 FA 05 00      lea d, [bp + 5] ; $s1
0120   04A8 FD 43         mov [d], b
0121   04AA FD 7D         dec b
0122   04AC             ;; s2++; 
0123   04AC FA 07 00      lea d, [bp + 7] ; $s2
0124   04AF 2A            mov b, [d]
0125   04B0 FD 77         inc b
0126   04B2 FA 07 00      lea d, [bp + 7] ; $s2
0127   04B5 FD 43         mov [d], b
0128   04B7 FD 7D         dec b
0129   04B9 0A 76 04      jmp _while2_cond
0130   04BC             _while2_exit:
0131   04BC             ;; return *s1 - *s2; 
0132   04BC FA 05 00      lea d, [bp + 5] ; $s1
0133   04BF 2A            mov b, [d]
0134   04C0 74            mov d, b
0135   04C1 32            mov bl, [d]
0136   04C2 A7 00         mov bh, 0
0137   04C4             ; START TERMS
0138   04C4 D7            push a
0139   04C5 11            mov a, b
0140   04C6 FA 07 00      lea d, [bp + 7] ; $s2
0141   04C9 2A            mov b, [d]
0142   04CA 74            mov d, b
0143   04CB 32            mov bl, [d]
0144   04CC A7 00         mov bh, 0
0145   04CE 60            sub a, b
0146   04CF 27            mov b, a
0147   04D0 E4            pop a
0148   04D1             ; END TERMS
0149   04D1 F9            leave
0150   04D2 09            ret
0151   04D3             
0152   04D3             strncmp:
0153   04D3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0154   04D6 F9            leave
0155   04D7 09            ret
0156   04D8             
0157   04D8             strcat:
0158   04D8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0159   04DB             ;; int dest_len; 
0160   04DB 52 02 00      sub sp, 2 ; dest_len
0161   04DE             ;; int i; 
0162   04DE 52 02 00      sub sp, 2 ; i
0163   04E1             ;; dest_len = strlen(dest); 
0164   04E1 FA FF FF      lea d, [bp + -1] ; $dest_len
0165   04E4 DA            push d
0166   04E5 FA 05 00      lea d, [bp + 5] ; $dest
0167   04E8 2A            mov b, [d]
0168   04E9 FD AB         swp b
0169   04EB D8            push b
0170   04EC 07 8E 05      call strlen
0171   04EF 51 02 00      add sp, 2
0172   04F2 E7            pop d
0173   04F3 FD 43         mov [d], b
0174   04F5             ;; for (i = 0; src[i] != 0; i=i+1) { 
0175   04F5             _for3_init:
0176   04F5 FA FD FF      lea d, [bp + -3] ; $i
0177   04F8 DA            push d
0178   04F9 26 00 00      mov b, $0
0179   04FC E7            pop d
0180   04FD FD 43         mov [d], b
0181   04FF             _for3_cond:
0182   04FF FA 07 00      lea d, [bp + 7] ; $src
0183   0502 FD 2A         mov d, [d]
0184   0504 D7            push a
0185   0505 DA            push d
0186   0506 FA FD FF      lea d, [bp + -3] ; $i
0187   0509 2A            mov b, [d]
0188   050A E7            pop d
0189   050B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0190   050F E4            pop a
0191   0510 32            mov bl, [d]
0192   0511 A7 00         mov bh, 0
0193   0513             ; START RELATIONAL
0194   0513 D7            push a
0195   0514 11            mov a, b
0196   0515 26 00 00      mov b, $0
0197   0518 B0            cmp a, b
0198   0519 FD 72         sneq ; !=
0199   051B E4            pop a
0200   051C             ; END RELATIONAL
0201   051C C0 00 00      cmp b, 0
0202   051F C6 68 05      je _for3_exit
0203   0522             _for3_block:
0204   0522             ;; dest[dest_len + i] = src[i]; 
0205   0522 FA 05 00      lea d, [bp + 5] ; $dest
0206   0525 FD 2A         mov d, [d]
0207   0527 D7            push a
0208   0528 DA            push d
0209   0529 FA FF FF      lea d, [bp + -1] ; $dest_len
0210   052C 2A            mov b, [d]
0211   052D             ; START TERMS
0212   052D D7            push a
0213   052E 11            mov a, b
0214   052F FA FD FF      lea d, [bp + -3] ; $i
0215   0532 2A            mov b, [d]
0216   0533 56            add b, a
0217   0534 E4            pop a
0218   0535             ; END TERMS
0219   0535 E7            pop d
0220   0536 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0221   053A E4            pop a
0222   053B DA            push d
0223   053C FA 07 00      lea d, [bp + 7] ; $src
0224   053F FD 2A         mov d, [d]
0225   0541 D7            push a
0226   0542 DA            push d
0227   0543 FA FD FF      lea d, [bp + -3] ; $i
0228   0546 2A            mov b, [d]
0229   0547 E7            pop d
0230   0548 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0231   054C E4            pop a
0232   054D 32            mov bl, [d]
0233   054E A7 00         mov bh, 0
0234   0550 E7            pop d
0235   0551 FD 3E         mov [d], bl
0236   0553             _for3_update:
0237   0553 FA FD FF      lea d, [bp + -3] ; $i
0238   0556 DA            push d
0239   0557 FA FD FF      lea d, [bp + -3] ; $i
0240   055A 2A            mov b, [d]
0241   055B             ; START TERMS
0242   055B D7            push a
0243   055C 11            mov a, b
0244   055D 26 01 00      mov b, $1
0245   0560 56            add b, a
0246   0561 E4            pop a
0247   0562             ; END TERMS
0248   0562 E7            pop d
0249   0563 FD 43         mov [d], b
0250   0565 0A FF 04      jmp _for3_cond
0251   0568             _for3_exit:
0252   0568             ;; dest[dest_len + i] = 0; 
0253   0568 FA 05 00      lea d, [bp + 5] ; $dest
0254   056B FD 2A         mov d, [d]
0255   056D D7            push a
0256   056E DA            push d
0257   056F FA FF FF      lea d, [bp + -1] ; $dest_len
0258   0572 2A            mov b, [d]
0259   0573             ; START TERMS
0260   0573 D7            push a
0261   0574 11            mov a, b
0262   0575 FA FD FF      lea d, [bp + -3] ; $i
0263   0578 2A            mov b, [d]
0264   0579 56            add b, a
0265   057A E4            pop a
0266   057B             ; END TERMS
0267   057B E7            pop d
0268   057C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0269   0580 E4            pop a
0270   0581 DA            push d
0271   0582 26 00 00      mov b, $0
0272   0585 E7            pop d
0273   0586 FD 3E         mov [d], bl
0274   0588             ;; return dest; 
0275   0588 FA 05 00      lea d, [bp + 5] ; $dest
0276   058B 2A            mov b, [d]
0277   058C F9            leave
0278   058D 09            ret
0279   058E             
0280   058E             strlen:
0281   058E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0282   0591             ;; int length; 
0283   0591 52 02 00      sub sp, 2 ; length
0284   0594             ;; length = 0; 
0285   0594 FA FF FF      lea d, [bp + -1] ; $length
0286   0597 DA            push d
0287   0598 26 00 00      mov b, $0
0288   059B E7            pop d
0289   059C FD 43         mov [d], b
0290   059E             ;; while (str[length] != 0) { 
0291   059E             _while4_cond:
0292   059E FA 05 00      lea d, [bp + 5] ; $str
0293   05A1 FD 2A         mov d, [d]
0294   05A3 D7            push a
0295   05A4 DA            push d
0296   05A5 FA FF FF      lea d, [bp + -1] ; $length
0297   05A8 2A            mov b, [d]
0298   05A9 E7            pop d
0299   05AA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0300   05AE E4            pop a
0301   05AF 32            mov bl, [d]
0302   05B0 A7 00         mov bh, 0
0303   05B2             ; START RELATIONAL
0304   05B2 D7            push a
0305   05B3 11            mov a, b
0306   05B4 26 00 00      mov b, $0
0307   05B7 B0            cmp a, b
0308   05B8 FD 72         sneq ; !=
0309   05BA E4            pop a
0310   05BB             ; END RELATIONAL
0311   05BB C0 00 00      cmp b, 0
0312   05BE C6 D1 05      je _while4_exit
0313   05C1             _while4_block:
0314   05C1             ;; length++; 
0315   05C1 FA FF FF      lea d, [bp + -1] ; $length
0316   05C4 2A            mov b, [d]
0317   05C5 FD 77         inc b
0318   05C7 FA FF FF      lea d, [bp + -1] ; $length
0319   05CA FD 43         mov [d], b
0320   05CC FD 7D         dec b
0321   05CE 0A 9E 05      jmp _while4_cond
0322   05D1             _while4_exit:
0323   05D1             ;; return length; 
0324   05D1 FA FF FF      lea d, [bp + -1] ; $length
0325   05D4 2A            mov b, [d]
0326   05D5 F9            leave
0327   05D6 09            ret
0328   05D7             
0329   05D7             exit:
0330   05D7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0331   05DA             
0332   05DA             ; --- BEGIN INLINE ASM BLOCK
0333   05DA 05 0B         syscall sys_terminate_proc
0334   05DC             ; --- END INLINE ASM BLOCK
0335   05DC             
0336   05DC F9            leave
0337   05DD 09            ret
0338   05DE             
0339   05DE             memset:
0340   05DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0341   05E1             ;; int i; 
0342   05E1 52 02 00      sub sp, 2 ; i
0343   05E4             ;; for(i = 0; i < size; i++){ 
0344   05E4             _for5_init:
0345   05E4 FA FF FF      lea d, [bp + -1] ; $i
0346   05E7 DA            push d
0347   05E8 26 00 00      mov b, $0
0348   05EB E7            pop d
0349   05EC FD 43         mov [d], b
0350   05EE             _for5_cond:
0351   05EE FA FF FF      lea d, [bp + -1] ; $i
0352   05F1 2A            mov b, [d]
0353   05F2             ; START RELATIONAL
0354   05F2 D7            push a
0355   05F3 11            mov a, b
0356   05F4 FA 08 00      lea d, [bp + 8] ; $size
0357   05F7 2A            mov b, [d]
0358   05F8 B0            cmp a, b
0359   05F9 FD 73         slt ; < (signed)
0360   05FB E4            pop a
0361   05FC             ; END RELATIONAL
0362   05FC C0 00 00      cmp b, 0
0363   05FF C6 28 06      je _for5_exit
0364   0602             _for5_block:
0365   0602             ;; *(s+i) = c; 
0366   0602 FA 05 00      lea d, [bp + 5] ; $s
0367   0605 2A            mov b, [d]
0368   0606             ; START TERMS
0369   0606 D7            push a
0370   0607 11            mov a, b
0371   0608 FA FF FF      lea d, [bp + -1] ; $i
0372   060B 2A            mov b, [d]
0373   060C 56            add b, a
0374   060D E4            pop a
0375   060E             ; END TERMS
0376   060E D8            push b
0377   060F FA 07 00      lea d, [bp + 7] ; $c
0378   0612 32            mov bl, [d]
0379   0613 A7 00         mov bh, 0
0380   0615 E7            pop d
0381   0616 FD 3E         mov [d], bl
0382   0618             _for5_update:
0383   0618 FA FF FF      lea d, [bp + -1] ; $i
0384   061B 2A            mov b, [d]
0385   061C FD 77         inc b
0386   061E FA FF FF      lea d, [bp + -1] ; $i
0387   0621 FD 43         mov [d], b
0388   0623 FD 7D         dec b
0389   0625 0A EE 05      jmp _for5_cond
0390   0628             _for5_exit:
0391   0628             ;; return s; 
0392   0628 FA 05 00      lea d, [bp + 5] ; $s
0393   062B 2A            mov b, [d]
0394   062C F9            leave
0395   062D 09            ret
0396   062E             
0397   062E             atoi:
0398   062E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0399   0631             ;; int result = 0;  // Initialize result 
0400   0631 52 02 00      sub sp, 2 ; result
0401   0634             ; --- START LOCAL VAR INITIALIZATION
0402   0634 FA FF FF      lea d, [bp + -1] ; $result
0403   0637 DA            push d
0404   0638 26 00 00      mov b, $0
0405   063B E7            pop d
0406   063C FD 43         mov [d], b
0407   063E             ; --- END LOCAL VAR INITIALIZATION
0408   063E             ;; int sign = 1;    // Initialize sign as positive 
0409   063E 52 02 00      sub sp, 2 ; sign
0410   0641             ; --- START LOCAL VAR INITIALIZATION
0411   0641 FA FD FF      lea d, [bp + -3] ; $sign
0412   0644 DA            push d
0413   0645 26 01 00      mov b, $1
0414   0648 E7            pop d
0415   0649 FD 43         mov [d], b
0416   064B             ; --- END LOCAL VAR INITIALIZATION
0417   064B             ;; while (*str == ' ') str++; 
0418   064B             _while6_cond:
0419   064B FA 05 00      lea d, [bp + 5] ; $str
0420   064E 2A            mov b, [d]
0421   064F 74            mov d, b
0422   0650 32            mov bl, [d]
0423   0651 A7 00         mov bh, 0
0424   0653             ; START RELATIONAL
0425   0653 D7            push a
0426   0654 11            mov a, b
0427   0655 26 20 00      mov b, $20
0428   0658 B0            cmp a, b
0429   0659 FD 71         seq ; ==
0430   065B E4            pop a
0431   065C             ; END RELATIONAL
0432   065C C0 00 00      cmp b, 0
0433   065F C6 72 06      je _while6_exit
0434   0662             _while6_block:
0435   0662             ;; str++; 
0436   0662 FA 05 00      lea d, [bp + 5] ; $str
0437   0665 2A            mov b, [d]
0438   0666 FD 77         inc b
0439   0668 FA 05 00      lea d, [bp + 5] ; $str
0440   066B FD 43         mov [d], b
0441   066D FD 7D         dec b
0442   066F 0A 4B 06      jmp _while6_cond
0443   0672             _while6_exit:
0444   0672             ;; if (*str == '-' || *str == '+') { 
0445   0672             _if7_cond:
0446   0672 FA 05 00      lea d, [bp + 5] ; $str
0447   0675 2A            mov b, [d]
0448   0676 74            mov d, b
0449   0677 32            mov bl, [d]
0450   0678 A7 00         mov bh, 0
0451   067A             ; START RELATIONAL
0452   067A D7            push a
0453   067B 11            mov a, b
0454   067C 26 2D 00      mov b, $2d
0455   067F B0            cmp a, b
0456   0680 FD 71         seq ; ==
0457   0682 E4            pop a
0458   0683             ; END RELATIONAL
0459   0683             ; START LOGICAL OR
0460   0683 D7            push a
0461   0684 11            mov a, b
0462   0685 FA 05 00      lea d, [bp + 5] ; $str
0463   0688 2A            mov b, [d]
0464   0689 74            mov d, b
0465   068A 32            mov bl, [d]
0466   068B A7 00         mov bh, 0
0467   068D             ; START RELATIONAL
0468   068D D7            push a
0469   068E 11            mov a, b
0470   068F 26 2B 00      mov b, $2b
0471   0692 B0            cmp a, b
0472   0693 FD 71         seq ; ==
0473   0695 E4            pop a
0474   0696             ; END RELATIONAL
0475   0696 FD A8         sor a, b ; ||
0476   0698 E4            pop a
0477   0699             ; END LOGICAL OR
0478   0699 C0 00 00      cmp b, 0
0479   069C C6 D5 06      je _if7_exit
0480   069F             _if7_true:
0481   069F             ;; if (*str == '-') sign = -1; 
0482   069F             _if8_cond:
0483   069F FA 05 00      lea d, [bp + 5] ; $str
0484   06A2 2A            mov b, [d]
0485   06A3 74            mov d, b
0486   06A4 32            mov bl, [d]
0487   06A5 A7 00         mov bh, 0
0488   06A7             ; START RELATIONAL
0489   06A7 D7            push a
0490   06A8 11            mov a, b
0491   06A9 26 2D 00      mov b, $2d
0492   06AC B0            cmp a, b
0493   06AD FD 71         seq ; ==
0494   06AF E4            pop a
0495   06B0             ; END RELATIONAL
0496   06B0 C0 00 00      cmp b, 0
0497   06B3 C6 C5 06      je _if8_exit
0498   06B6             _if8_true:
0499   06B6             ;; sign = -1; 
0500   06B6 FA FD FF      lea d, [bp + -3] ; $sign
0501   06B9 DA            push d
0502   06BA 26 01 00      mov b, $1
0503   06BD FD 97         neg b
0504   06BF E7            pop d
0505   06C0 FD 43         mov [d], b
0506   06C2 0A C5 06      jmp _if8_exit
0507   06C5             _if8_exit:
0508   06C5             ;; str++; 
0509   06C5 FA 05 00      lea d, [bp + 5] ; $str
0510   06C8 2A            mov b, [d]
0511   06C9 FD 77         inc b
0512   06CB FA 05 00      lea d, [bp + 5] ; $str
0513   06CE FD 43         mov [d], b
0514   06D0 FD 7D         dec b
0515   06D2 0A D5 06      jmp _if7_exit
0516   06D5             _if7_exit:
0517   06D5             ;; while (*str >= '0' && *str <= '9') { 
0518   06D5             _while9_cond:
0519   06D5 FA 05 00      lea d, [bp + 5] ; $str
0520   06D8 2A            mov b, [d]
0521   06D9 74            mov d, b
0522   06DA 32            mov bl, [d]
0523   06DB A7 00         mov bh, 0
0524   06DD             ; START RELATIONAL
0525   06DD D7            push a
0526   06DE 11            mov a, b
0527   06DF 26 30 00      mov b, $30
0528   06E2 B0            cmp a, b
0529   06E3 FD 82         sgeu ; >= (unsigned)
0530   06E5 E4            pop a
0531   06E6             ; END RELATIONAL
0532   06E6             ; START LOGICAL AND
0533   06E6 D7            push a
0534   06E7 11            mov a, b
0535   06E8 FA 05 00      lea d, [bp + 5] ; $str
0536   06EB 2A            mov b, [d]
0537   06EC 74            mov d, b
0538   06ED 32            mov bl, [d]
0539   06EE A7 00         mov bh, 0
0540   06F0             ; START RELATIONAL
0541   06F0 D7            push a
0542   06F1 11            mov a, b
0543   06F2 26 39 00      mov b, $39
0544   06F5 B0            cmp a, b
0545   06F6 FD 76         sleu ; <= (unsigned)
0546   06F8 E4            pop a
0547   06F9             ; END RELATIONAL
0548   06F9 FD A7         sand a, b
0549   06FB E4            pop a
0550   06FC             ; END LOGICAL AND
0551   06FC C0 00 00      cmp b, 0
0552   06FF C6 3A 07      je _while9_exit
0553   0702             _while9_block:
0554   0702             ;; result = result * 10 + (*str - '0'); 
0555   0702 FA FF FF      lea d, [bp + -1] ; $result
0556   0705 DA            push d
0557   0706 FA FF FF      lea d, [bp + -1] ; $result
0558   0709 2A            mov b, [d]
0559   070A             ; START FACTORS
0560   070A D7            push a
0561   070B 11            mov a, b
0562   070C 26 0A 00      mov b, $a
0563   070F AC            mul a, b ; *
0564   0710 11            mov a, b
0565   0711 27            mov b, a
0566   0712 E4            pop a
0567   0713             ; END FACTORS
0568   0713             ; START TERMS
0569   0713 D7            push a
0570   0714 11            mov a, b
0571   0715 FA 05 00      lea d, [bp + 5] ; $str
0572   0718 2A            mov b, [d]
0573   0719 74            mov d, b
0574   071A 32            mov bl, [d]
0575   071B A7 00         mov bh, 0
0576   071D             ; START TERMS
0577   071D D7            push a
0578   071E 11            mov a, b
0579   071F 26 30 00      mov b, $30
0580   0722 60            sub a, b
0581   0723 27            mov b, a
0582   0724 E4            pop a
0583   0725             ; END TERMS
0584   0725 56            add b, a
0585   0726 E4            pop a
0586   0727             ; END TERMS
0587   0727 E7            pop d
0588   0728 FD 43         mov [d], b
0589   072A             ;; str++; 
0590   072A FA 05 00      lea d, [bp + 5] ; $str
0591   072D 2A            mov b, [d]
0592   072E FD 77         inc b
0593   0730 FA 05 00      lea d, [bp + 5] ; $str
0594   0733 FD 43         mov [d], b
0595   0735 FD 7D         dec b
0596   0737 0A D5 06      jmp _while9_cond
0597   073A             _while9_exit:
0598   073A             ;; return sign * result; 
0599   073A FA FD FF      lea d, [bp + -3] ; $sign
0600   073D 2A            mov b, [d]
0601   073E             ; START FACTORS
0602   073E D7            push a
0603   073F 11            mov a, b
0604   0740 FA FF FF      lea d, [bp + -1] ; $result
0605   0743 2A            mov b, [d]
0606   0744 AC            mul a, b ; *
0607   0745 11            mov a, b
0608   0746 27            mov b, a
0609   0747 E4            pop a
0610   0748             ; END FACTORS
0611   0748 F9            leave
0612   0749 09            ret
0613   074A             
0614   074A             rand:
0615   074A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0616   074D             ;; int  sec; 
0617   074D 52 02 00      sub sp, 2 ; sec
0618   0750             
0619   0750             ; --- BEGIN INLINE ASM BLOCK
0620   0750 19 00         mov al, 0
0621   0752 05 01         syscall sys_rtc					
0622   0754 1A            mov al, ah
0623   0755 FA FF FF      lea d, [bp + -1] ; $sec
0624   0758 1E            mov al, [d]
0625   0759 22 00         mov ah, 0
0626   075B             ; --- END INLINE ASM BLOCK
0627   075B             
0628   075B             ;; return sec; 
0629   075B FA FF FF      lea d, [bp + -1] ; $sec
0630   075E 2A            mov b, [d]
0631   075F F9            leave
0632   0760 09            ret
0633   0761             
0634   0761             alloc:
0635   0761 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0636   0764             ;; heap_top = heap_top + bytes; 
0637   0764 3B D9 78      mov d, _heap_top ; $heap_top
0638   0767 DA            push d
0639   0768 3B D9 78      mov d, _heap_top ; $heap_top
0640   076B 2A            mov b, [d]
0641   076C             ; START TERMS
0642   076C D7            push a
0643   076D 11            mov a, b
0644   076E FA 05 00      lea d, [bp + 5] ; $bytes
0645   0771 2A            mov b, [d]
0646   0772 56            add b, a
0647   0773 E4            pop a
0648   0774             ; END TERMS
0649   0774 E7            pop d
0650   0775 FD 43         mov [d], b
0651   0777             ;; return heap_top - bytes; 
0652   0777 3B D9 78      mov d, _heap_top ; $heap_top
0653   077A 2A            mov b, [d]
0654   077B             ; START TERMS
0655   077B D7            push a
0656   077C 11            mov a, b
0657   077D FA 05 00      lea d, [bp + 5] ; $bytes
0658   0780 2A            mov b, [d]
0659   0781 60            sub a, b
0660   0782 27            mov b, a
0661   0783 E4            pop a
0662   0784             ; END TERMS
0663   0784 F9            leave
0664   0785 09            ret
0665   0786             
0666   0786             free:
0667   0786 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0668   0789             ;; return heap_top = heap_top - bytes; 
0669   0789 3B D9 78      mov d, _heap_top ; $heap_top
0670   078C DA            push d
0671   078D 3B D9 78      mov d, _heap_top ; $heap_top
0672   0790 2A            mov b, [d]
0673   0791             ; START TERMS
0674   0791 D7            push a
0675   0792 11            mov a, b
0676   0793 FA 05 00      lea d, [bp + 5] ; $bytes
0677   0796 2A            mov b, [d]
0678   0797 60            sub a, b
0679   0798 27            mov b, a
0680   0799 E4            pop a
0681   079A             ; END TERMS
0682   079A E7            pop d
0683   079B FD 43         mov [d], b
0684   079D F9            leave
0685   079E 09            ret
0686   079F             
0687   079F             fopen:
0688   079F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0689   07A2             ;; FILE *fp; 
0690   07A2 52 02 00      sub sp, 2 ; fp
0691   07A5             ;; fp = alloc(sizeof(int)); 
0692   07A5 FA FF FF      lea d, [bp + -1] ; $fp
0693   07A8 DA            push d
0694   07A9 26 02 00      mov b, 2
0695   07AC FD AB         swp b
0696   07AE D8            push b
0697   07AF 07 61 07      call alloc
0698   07B2 51 02 00      add sp, 2
0699   07B5 E7            pop d
0700   07B6 FD 43         mov [d], b
0701   07B8 F9            leave
0702   07B9 09            ret
0703   07BA             
0704   07BA             printf:
0705   07BA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0706   07BD             ;; char *p, *format_p; 
0707   07BD 52 02 00      sub sp, 2 ; p
0708   07C0 52 02 00      sub sp, 2 ; format_p
0709   07C3             ;; format_p = format; 
0710   07C3 FA FD FF      lea d, [bp + -3] ; $format_p
0711   07C6 DA            push d
0712   07C7 FA 05 00      lea d, [bp + 5] ; $format
0713   07CA 2A            mov b, [d]
0714   07CB E7            pop d
0715   07CC FD 43         mov [d], b
0716   07CE             ;; p = &format + 2; 
0717   07CE FA FF FF      lea d, [bp + -1] ; $p
0718   07D1 DA            push d
0719   07D2 FA 05 00      lea d, [bp + 5] ; $format
0720   07D5 2D            mov b, d
0721   07D6             ; START TERMS
0722   07D6 D7            push a
0723   07D7 11            mov a, b
0724   07D8 26 02 00      mov b, $2
0725   07DB 56            add b, a
0726   07DC E4            pop a
0727   07DD             ; END TERMS
0728   07DD E7            pop d
0729   07DE FD 43         mov [d], b
0730   07E0             ;; for(;;){ 
0731   07E0             _for10_init:
0732   07E0             _for10_cond:
0733   07E0             _for10_block:
0734   07E0             ;; if(!*format_p) break; 
0735   07E0             _if11_cond:
0736   07E0 FA FD FF      lea d, [bp + -3] ; $format_p
0737   07E3 2A            mov b, [d]
0738   07E4 74            mov d, b
0739   07E5 32            mov bl, [d]
0740   07E6 A7 00         mov bh, 0
0741   07E8 C0 00 00      cmp b, 0
0742   07EB FD 71         seq ; !
0743   07ED C0 00 00      cmp b, 0
0744   07F0 C6 F9 07      je _if11_else
0745   07F3             _if11_true:
0746   07F3             ;; break; 
0747   07F3 0A 20 0A      jmp _for10_exit ; for break
0748   07F6 0A 1D 0A      jmp _if11_exit
0749   07F9             _if11_else:
0750   07F9             ;; if(*format_p == '%'){ 
0751   07F9             _if12_cond:
0752   07F9 FA FD FF      lea d, [bp + -3] ; $format_p
0753   07FC 2A            mov b, [d]
0754   07FD 74            mov d, b
0755   07FE 32            mov bl, [d]
0756   07FF A7 00         mov bh, 0
0757   0801             ; START RELATIONAL
0758   0801 D7            push a
0759   0802 11            mov a, b
0760   0803 26 25 00      mov b, $25
0761   0806 B0            cmp a, b
0762   0807 FD 71         seq ; ==
0763   0809 E4            pop a
0764   080A             ; END RELATIONAL
0765   080A C0 00 00      cmp b, 0
0766   080D C6 01 0A      je _if12_else
0767   0810             _if12_true:
0768   0810             ;; format_p++; 
0769   0810 FA FD FF      lea d, [bp + -3] ; $format_p
0770   0813 2A            mov b, [d]
0771   0814 FD 77         inc b
0772   0816 FA FD FF      lea d, [bp + -3] ; $format_p
0773   0819 FD 43         mov [d], b
0774   081B FD 7D         dec b
0775   081D             ;; switch(*format_p){ 
0776   081D             _switch13_expr:
0777   081D FA FD FF      lea d, [bp + -3] ; $format_p
0778   0820 2A            mov b, [d]
0779   0821 74            mov d, b
0780   0822 32            mov bl, [d]
0781   0823 A7 00         mov bh, 0
0782   0825             _switch13_comparisons:
0783   0825 C1 6C         cmp bl, $6c
0784   0827 C6 53 08      je _switch13_case0
0785   082A C1 4C         cmp bl, $4c
0786   082C C6 53 08      je _switch13_case1
0787   082F C1 64         cmp bl, $64
0788   0831 C6 41 09      je _switch13_case2
0789   0834 C1 69         cmp bl, $69
0790   0836 C6 41 09      je _switch13_case3
0791   0839 C1 75         cmp bl, $75
0792   083B C6 65 09      je _switch13_case4
0793   083E C1 78         cmp bl, $78
0794   0840 C6 89 09      je _switch13_case5
0795   0843 C1 63         cmp bl, $63
0796   0845 C6 A7 09      je _switch13_case6
0797   0848 C1 73         cmp bl, $73
0798   084A C6 C6 09      je _switch13_case7
0799   084D 0A E5 09      jmp _switch13_default
0800   0850 0A F1 09      jmp _switch13_exit
0801   0853             _switch13_case0:
0802   0853             _switch13_case1:
0803   0853             ;; format_p++; 
0804   0853 FA FD FF      lea d, [bp + -3] ; $format_p
0805   0856 2A            mov b, [d]
0806   0857 FD 77         inc b
0807   0859 FA FD FF      lea d, [bp + -3] ; $format_p
0808   085C FD 43         mov [d], b
0809   085E FD 7D         dec b
0810   0860             ;; if(*format_p == 'd' || *format_p == 'i') 
0811   0860             _if14_cond:
0812   0860 FA FD FF      lea d, [bp + -3] ; $format_p
0813   0863 2A            mov b, [d]
0814   0864 74            mov d, b
0815   0865 32            mov bl, [d]
0816   0866 A7 00         mov bh, 0
0817   0868             ; START RELATIONAL
0818   0868 D7            push a
0819   0869 11            mov a, b
0820   086A 26 64 00      mov b, $64
0821   086D B0            cmp a, b
0822   086E FD 71         seq ; ==
0823   0870 E4            pop a
0824   0871             ; END RELATIONAL
0825   0871             ; START LOGICAL OR
0826   0871 D7            push a
0827   0872 11            mov a, b
0828   0873 FA FD FF      lea d, [bp + -3] ; $format_p
0829   0876 2A            mov b, [d]
0830   0877 74            mov d, b
0831   0878 32            mov bl, [d]
0832   0879 A7 00         mov bh, 0
0833   087B             ; START RELATIONAL
0834   087B D7            push a
0835   087C 11            mov a, b
0836   087D 26 69 00      mov b, $69
0837   0880 B0            cmp a, b
0838   0881 FD 71         seq ; ==
0839   0883 E4            pop a
0840   0884             ; END RELATIONAL
0841   0884 FD A8         sor a, b ; ||
0842   0886 E4            pop a
0843   0887             ; END LOGICAL OR
0844   0887 C0 00 00      cmp b, 0
0845   088A C6 AF 08      je _if14_else
0846   088D             _if14_true:
0847   088D             ;; print_signed_long(*(long *)p); 
0848   088D FA FF FF      lea d, [bp + -1] ; $p
0849   0890 2A            mov b, [d]
0850   0891 AB            snex b
0851   0892 FD 39         mov c, b
0852   0894 74            mov d, b
0853   0895 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0854   0898 FD 39         mov c, b ; And place it into C
0855   089A 2A            mov b, [d] ; Lower Word in B
0856   089B FD 79         mov g, b
0857   089D 28            mov b, c
0858   089E FD AB         swp b
0859   08A0 D8            push b
0860   08A1 FD 27         mov b, g
0861   08A3 FD AB         swp b
0862   08A5 D8            push b
0863   08A6 07 06 0F      call print_signed_long
0864   08A9 51 04 00      add sp, 4
0865   08AC 0A 2C 09      jmp _if14_exit
0866   08AF             _if14_else:
0867   08AF             ;; if(*format_p == 'u') 
0868   08AF             _if15_cond:
0869   08AF FA FD FF      lea d, [bp + -3] ; $format_p
0870   08B2 2A            mov b, [d]
0871   08B3 74            mov d, b
0872   08B4 32            mov bl, [d]
0873   08B5 A7 00         mov bh, 0
0874   08B7             ; START RELATIONAL
0875   08B7 D7            push a
0876   08B8 11            mov a, b
0877   08B9 26 75 00      mov b, $75
0878   08BC B0            cmp a, b
0879   08BD FD 71         seq ; ==
0880   08BF E4            pop a
0881   08C0             ; END RELATIONAL
0882   08C0 C0 00 00      cmp b, 0
0883   08C3 C6 EA 08      je _if15_else
0884   08C6             _if15_true:
0885   08C6             ;; print_unsigned_long(*(unsigned long *)p); 
0886   08C6 FA FF FF      lea d, [bp + -1] ; $p
0887   08C9 2A            mov b, [d]
0888   08CA A7 00         mov bh, 0
0889   08CC 38 00 00      mov c, 0
0890   08CF 74            mov d, b
0891   08D0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0892   08D3 FD 39         mov c, b ; And place it into C
0893   08D5 2A            mov b, [d] ; Lower Word in B
0894   08D6 FD 79         mov g, b
0895   08D8 28            mov b, c
0896   08D9 FD AB         swp b
0897   08DB D8            push b
0898   08DC FD 27         mov b, g
0899   08DE FD AB         swp b
0900   08E0 D8            push b
0901   08E1 07 46 12      call print_unsigned_long
0902   08E4 51 04 00      add sp, 4
0903   08E7 0A 2C 09      jmp _if15_exit
0904   08EA             _if15_else:
0905   08EA             ;; if(*format_p == 'x') 
0906   08EA             _if16_cond:
0907   08EA FA FD FF      lea d, [bp + -3] ; $format_p
0908   08ED 2A            mov b, [d]
0909   08EE 74            mov d, b
0910   08EF 32            mov bl, [d]
0911   08F0 A7 00         mov bh, 0
0912   08F2             ; START RELATIONAL
0913   08F2 D7            push a
0914   08F3 11            mov a, b
0915   08F4 26 78 00      mov b, $78
0916   08F7 B0            cmp a, b
0917   08F8 FD 71         seq ; ==
0918   08FA E4            pop a
0919   08FB             ; END RELATIONAL
0920   08FB C0 00 00      cmp b, 0
0921   08FE C6 20 09      je _if16_else
0922   0901             _if16_true:
0923   0901             ;; printx32(*(long int *)p); 
0924   0901 FA FF FF      lea d, [bp + -1] ; $p
0925   0904 2A            mov b, [d]
0926   0905 74            mov d, b
0927   0906 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0928   0909 FD 39         mov c, b ; And place it into C
0929   090B 2A            mov b, [d] ; Lower Word in B
0930   090C FD 79         mov g, b
0931   090E 28            mov b, c
0932   090F FD AB         swp b
0933   0911 D8            push b
0934   0912 FD 27         mov b, g
0935   0914 FD AB         swp b
0936   0916 D8            push b
0937   0917 07 7B 0C      call printx32
0938   091A 51 04 00      add sp, 4
0939   091D 0A 2C 09      jmp _if16_exit
0940   0920             _if16_else:
0941   0920             ;; err("Unexpected format in printf."); 
0942   0920 26 BF 65      mov b, _s30 ; "Unexpected format in printf."
0943   0923 FD AB         swp b
0944   0925 D8            push b
0945   0926 07 69 0C      call err
0946   0929 51 02 00      add sp, 2
0947   092C             _if16_exit:
0948   092C             _if15_exit:
0949   092C             _if14_exit:
0950   092C             ;; p = p + 4; 
0951   092C FA FF FF      lea d, [bp + -1] ; $p
0952   092F DA            push d
0953   0930 FA FF FF      lea d, [bp + -1] ; $p
0954   0933 2A            mov b, [d]
0955   0934             ; START TERMS
0956   0934 D7            push a
0957   0935 11            mov a, b
0958   0936 26 04 00      mov b, $4
0959   0939 56            add b, a
0960   093A E4            pop a
0961   093B             ; END TERMS
0962   093B E7            pop d
0963   093C FD 43         mov [d], b
0964   093E             ;; break; 
0965   093E 0A F1 09      jmp _switch13_exit ; case break
0966   0941             _switch13_case2:
0967   0941             _switch13_case3:
0968   0941             ;; print_signed(*(int*)p); 
0969   0941 FA FF FF      lea d, [bp + -1] ; $p
0970   0944 2A            mov b, [d]
0971   0945 74            mov d, b
0972   0946 2A            mov b, [d]
0973   0947 FD AB         swp b
0974   0949 D8            push b
0975   094A 07 0F 0E      call print_signed
0976   094D 51 02 00      add sp, 2
0977   0950             ;; p = p + 2; 
0978   0950 FA FF FF      lea d, [bp + -1] ; $p
0979   0953 DA            push d
0980   0954 FA FF FF      lea d, [bp + -1] ; $p
0981   0957 2A            mov b, [d]
0982   0958             ; START TERMS
0983   0958 D7            push a
0984   0959 11            mov a, b
0985   095A 26 02 00      mov b, $2
0986   095D 56            add b, a
0987   095E E4            pop a
0988   095F             ; END TERMS
0989   095F E7            pop d
0990   0960 FD 43         mov [d], b
0991   0962             ;; break; 
0992   0962 0A F1 09      jmp _switch13_exit ; case break
0993   0965             _switch13_case4:
0994   0965             ;; print_unsigned(*(unsigned int*)p); 
0995   0965 FA FF FF      lea d, [bp + -1] ; $p
0996   0968 2A            mov b, [d]
0997   0969 74            mov d, b
0998   096A 2A            mov b, [d]
0999   096B FD AB         swp b
1000   096D D8            push b
1001   096E 07 41 14      call print_unsigned
1002   0971 51 02 00      add sp, 2
1003   0974             ;; p = p + 2; 
1004   0974 FA FF FF      lea d, [bp + -1] ; $p
1005   0977 DA            push d
1006   0978 FA FF FF      lea d, [bp + -1] ; $p
1007   097B 2A            mov b, [d]
1008   097C             ; START TERMS
1009   097C D7            push a
1010   097D 11            mov a, b
1011   097E 26 02 00      mov b, $2
1012   0981 56            add b, a
1013   0982 E4            pop a
1014   0983             ; END TERMS
1015   0983 E7            pop d
1016   0984 FD 43         mov [d], b
1017   0986             ;; break; 
1018   0986 0A F1 09      jmp _switch13_exit ; case break
1019   0989             _switch13_case5:
1020   0989             
1021   0989             ; --- BEGIN INLINE ASM BLOCK
1022   0989 FA FF FF      lea d, [bp + -1] ; $p
1023   098C FD 2A         mov d, [d]
1024   098E 2A            mov b, [d]
1025   098F 07 47 18      call print_u16x
1026   0992             ; --- END INLINE ASM BLOCK
1027   0992             
1028   0992             ;; p = p + 2; 
1029   0992 FA FF FF      lea d, [bp + -1] ; $p
1030   0995 DA            push d
1031   0996 FA FF FF      lea d, [bp + -1] ; $p
1032   0999 2A            mov b, [d]
1033   099A             ; START TERMS
1034   099A D7            push a
1035   099B 11            mov a, b
1036   099C 26 02 00      mov b, $2
1037   099F 56            add b, a
1038   09A0 E4            pop a
1039   09A1             ; END TERMS
1040   09A1 E7            pop d
1041   09A2 FD 43         mov [d], b
1042   09A4             ;; break; 
1043   09A4 0A F1 09      jmp _switch13_exit ; case break
1044   09A7             _switch13_case6:
1045   09A7             
1046   09A7             ; --- BEGIN INLINE ASM BLOCK
1047   09A7 FA FF FF      lea d, [bp + -1] ; $p
1048   09AA FD 2A         mov d, [d]
1049   09AC 1E            mov al, [d]
1050   09AD 23            mov ah, al
1051   09AE 07 A5 16      call _putchar
1052   09B1             ; --- END INLINE ASM BLOCK
1053   09B1             
1054   09B1             ;; p = p + 2; 
1055   09B1 FA FF FF      lea d, [bp + -1] ; $p
1056   09B4 DA            push d
1057   09B5 FA FF FF      lea d, [bp + -1] ; $p
1058   09B8 2A            mov b, [d]
1059   09B9             ; START TERMS
1060   09B9 D7            push a
1061   09BA 11            mov a, b
1062   09BB 26 02 00      mov b, $2
1063   09BE 56            add b, a
1064   09BF E4            pop a
1065   09C0             ; END TERMS
1066   09C0 E7            pop d
1067   09C1 FD 43         mov [d], b
1068   09C3             ;; break; 
1069   09C3 0A F1 09      jmp _switch13_exit ; case break
1070   09C6             _switch13_case7:
1071   09C6             
1072   09C6             ; --- BEGIN INLINE ASM BLOCK
1073   09C6 FA FF FF      lea d, [bp + -1] ; $p
1074   09C9 FD 2A         mov d, [d]
1075   09CB FD 2A         mov d, [d]
1076   09CD 07 EF 17      call _puts
1077   09D0             ; --- END INLINE ASM BLOCK
1078   09D0             
1079   09D0             ;; p = p + 2; 
1080   09D0 FA FF FF      lea d, [bp + -1] ; $p
1081   09D3 DA            push d
1082   09D4 FA FF FF      lea d, [bp + -1] ; $p
1083   09D7 2A            mov b, [d]
1084   09D8             ; START TERMS
1085   09D8 D7            push a
1086   09D9 11            mov a, b
1087   09DA 26 02 00      mov b, $2
1088   09DD 56            add b, a
1089   09DE E4            pop a
1090   09DF             ; END TERMS
1091   09DF E7            pop d
1092   09E0 FD 43         mov [d], b
1093   09E2             ;; break; 
1094   09E2 0A F1 09      jmp _switch13_exit ; case break
1095   09E5             _switch13_default:
1096   09E5             ;; print("Error: Unknown argument type.\n"); 
1097   09E5 26 DC 65      mov b, _s31 ; "Error: Unknown argument type.\n"
1098   09E8 FD AB         swp b
1099   09EA D8            push b
1100   09EB 07 5C 15      call print
1101   09EE 51 02 00      add sp, 2
1102   09F1             _switch13_exit:
1103   09F1             ;; format_p++; 
1104   09F1 FA FD FF      lea d, [bp + -3] ; $format_p
1105   09F4 2A            mov b, [d]
1106   09F5 FD 77         inc b
1107   09F7 FA FD FF      lea d, [bp + -3] ; $format_p
1108   09FA FD 43         mov [d], b
1109   09FC FD 7D         dec b
1110   09FE 0A 1D 0A      jmp _if12_exit
1111   0A01             _if12_else:
1112   0A01             ;; putchar(*format_p); 
1113   0A01 FA FD FF      lea d, [bp + -3] ; $format_p
1114   0A04 2A            mov b, [d]
1115   0A05 74            mov d, b
1116   0A06 32            mov bl, [d]
1117   0A07 A7 00         mov bh, 0
1118   0A09 DD            push bl
1119   0A0A 07 14 15      call putchar
1120   0A0D 51 01 00      add sp, 1
1121   0A10             ;; format_p++; 
1122   0A10 FA FD FF      lea d, [bp + -3] ; $format_p
1123   0A13 2A            mov b, [d]
1124   0A14 FD 77         inc b
1125   0A16 FA FD FF      lea d, [bp + -3] ; $format_p
1126   0A19 FD 43         mov [d], b
1127   0A1B FD 7D         dec b
1128   0A1D             _if12_exit:
1129   0A1D             _if11_exit:
1130   0A1D             _for10_update:
1131   0A1D 0A E0 07      jmp _for10_cond
1132   0A20             _for10_exit:
1133   0A20 F9            leave
1134   0A21 09            ret
1135   0A22             
1136   0A22             scanf:
1137   0A22 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1138   0A25             ;; char *p, *format_p; 
1139   0A25 52 02 00      sub sp, 2 ; p
1140   0A28 52 02 00      sub sp, 2 ; format_p
1141   0A2B             ;; char c; 
1142   0A2B 52 01 00      sub sp, 1 ; c
1143   0A2E             ;; int i; 
1144   0A2E 52 02 00      sub sp, 2 ; i
1145   0A31             ;; char input_string[  512                    ]; 
1146   0A31 52 00 02      sub sp, 512 ; input_string
1147   0A34             ;; format_p = format; 
1148   0A34 FA FD FF      lea d, [bp + -3] ; $format_p
1149   0A37 DA            push d
1150   0A38 FA 05 00      lea d, [bp + 5] ; $format
1151   0A3B 2A            mov b, [d]
1152   0A3C E7            pop d
1153   0A3D FD 43         mov [d], b
1154   0A3F             ;; p = &format + 2; 
1155   0A3F FA FF FF      lea d, [bp + -1] ; $p
1156   0A42 DA            push d
1157   0A43 FA 05 00      lea d, [bp + 5] ; $format
1158   0A46 2D            mov b, d
1159   0A47             ; START TERMS
1160   0A47 D7            push a
1161   0A48 11            mov a, b
1162   0A49 26 02 00      mov b, $2
1163   0A4C 56            add b, a
1164   0A4D E4            pop a
1165   0A4E             ; END TERMS
1166   0A4E E7            pop d
1167   0A4F FD 43         mov [d], b
1168   0A51             ;; for(;;){ 
1169   0A51             _for17_init:
1170   0A51             _for17_cond:
1171   0A51             _for17_block:
1172   0A51             ;; if(!*format_p) break; 
1173   0A51             _if18_cond:
1174   0A51 FA FD FF      lea d, [bp + -3] ; $format_p
1175   0A54 2A            mov b, [d]
1176   0A55 74            mov d, b
1177   0A56 32            mov bl, [d]
1178   0A57 A7 00         mov bh, 0
1179   0A59 C0 00 00      cmp b, 0
1180   0A5C FD 71         seq ; !
1181   0A5E C0 00 00      cmp b, 0
1182   0A61 C6 6A 0A      je _if18_else
1183   0A64             _if18_true:
1184   0A64             ;; break; 
1185   0A64 0A 67 0C      jmp _for17_exit ; for break
1186   0A67 0A 64 0C      jmp _if18_exit
1187   0A6A             _if18_else:
1188   0A6A             ;; if(*format_p == '%'){ 
1189   0A6A             _if19_cond:
1190   0A6A FA FD FF      lea d, [bp + -3] ; $format_p
1191   0A6D 2A            mov b, [d]
1192   0A6E 74            mov d, b
1193   0A6F 32            mov bl, [d]
1194   0A70 A7 00         mov bh, 0
1195   0A72             ; START RELATIONAL
1196   0A72 D7            push a
1197   0A73 11            mov a, b
1198   0A74 26 25 00      mov b, $25
1199   0A77 B0            cmp a, b
1200   0A78 FD 71         seq ; ==
1201   0A7A E4            pop a
1202   0A7B             ; END RELATIONAL
1203   0A7B C0 00 00      cmp b, 0
1204   0A7E C6 48 0C      je _if19_else
1205   0A81             _if19_true:
1206   0A81             ;; format_p++; 
1207   0A81 FA FD FF      lea d, [bp + -3] ; $format_p
1208   0A84 2A            mov b, [d]
1209   0A85 FD 77         inc b
1210   0A87 FA FD FF      lea d, [bp + -3] ; $format_p
1211   0A8A FD 43         mov [d], b
1212   0A8C FD 7D         dec b
1213   0A8E             ;; switch(*format_p){ 
1214   0A8E             _switch20_expr:
1215   0A8E FA FD FF      lea d, [bp + -3] ; $format_p
1216   0A91 2A            mov b, [d]
1217   0A92 74            mov d, b
1218   0A93 32            mov bl, [d]
1219   0A94 A7 00         mov bh, 0
1220   0A96             _switch20_comparisons:
1221   0A96 C1 6C         cmp bl, $6c
1222   0A98 C6 C4 0A      je _switch20_case0
1223   0A9B C1 4C         cmp bl, $4c
1224   0A9D C6 C4 0A      je _switch20_case1
1225   0AA0 C1 64         cmp bl, $64
1226   0AA2 C6 56 0B      je _switch20_case2
1227   0AA5 C1 69         cmp bl, $69
1228   0AA7 C6 56 0B      je _switch20_case3
1229   0AAA C1 75         cmp bl, $75
1230   0AAC C6 83 0B      je _switch20_case4
1231   0AAF C1 78         cmp bl, $78
1232   0AB1 C6 B0 0B      je _switch20_case5
1233   0AB4 C1 63         cmp bl, $63
1234   0AB6 C6 C5 0B      je _switch20_case6
1235   0AB9 C1 73         cmp bl, $73
1236   0ABB C6 F4 0B      je _switch20_case7
1237   0ABE 0A 2C 0C      jmp _switch20_default
1238   0AC1 0A 38 0C      jmp _switch20_exit
1239   0AC4             _switch20_case0:
1240   0AC4             _switch20_case1:
1241   0AC4             ;; format_p++; 
1242   0AC4 FA FD FF      lea d, [bp + -3] ; $format_p
1243   0AC7 2A            mov b, [d]
1244   0AC8 FD 77         inc b
1245   0ACA FA FD FF      lea d, [bp + -3] ; $format_p
1246   0ACD FD 43         mov [d], b
1247   0ACF FD 7D         dec b
1248   0AD1             ;; if(*format_p == 'd' || *format_p == 'i'); 
1249   0AD1             _if21_cond:
1250   0AD1 FA FD FF      lea d, [bp + -3] ; $format_p
1251   0AD4 2A            mov b, [d]
1252   0AD5 74            mov d, b
1253   0AD6 32            mov bl, [d]
1254   0AD7 A7 00         mov bh, 0
1255   0AD9             ; START RELATIONAL
1256   0AD9 D7            push a
1257   0ADA 11            mov a, b
1258   0ADB 26 64 00      mov b, $64
1259   0ADE B0            cmp a, b
1260   0ADF FD 71         seq ; ==
1261   0AE1 E4            pop a
1262   0AE2             ; END RELATIONAL
1263   0AE2             ; START LOGICAL OR
1264   0AE2 D7            push a
1265   0AE3 11            mov a, b
1266   0AE4 FA FD FF      lea d, [bp + -3] ; $format_p
1267   0AE7 2A            mov b, [d]
1268   0AE8 74            mov d, b
1269   0AE9 32            mov bl, [d]
1270   0AEA A7 00         mov bh, 0
1271   0AEC             ; START RELATIONAL
1272   0AEC D7            push a
1273   0AED 11            mov a, b
1274   0AEE 26 69 00      mov b, $69
1275   0AF1 B0            cmp a, b
1276   0AF2 FD 71         seq ; ==
1277   0AF4 E4            pop a
1278   0AF5             ; END RELATIONAL
1279   0AF5 FD A8         sor a, b ; ||
1280   0AF7 E4            pop a
1281   0AF8             ; END LOGICAL OR
1282   0AF8 C0 00 00      cmp b, 0
1283   0AFB C6 01 0B      je _if21_else
1284   0AFE             _if21_true:
1285   0AFE             ;; ; 
1286   0AFE 0A 41 0B      jmp _if21_exit
1287   0B01             _if21_else:
1288   0B01             ;; if(*format_p == 'u'); 
1289   0B01             _if22_cond:
1290   0B01 FA FD FF      lea d, [bp + -3] ; $format_p
1291   0B04 2A            mov b, [d]
1292   0B05 74            mov d, b
1293   0B06 32            mov bl, [d]
1294   0B07 A7 00         mov bh, 0
1295   0B09             ; START RELATIONAL
1296   0B09 D7            push a
1297   0B0A 11            mov a, b
1298   0B0B 26 75 00      mov b, $75
1299   0B0E B0            cmp a, b
1300   0B0F FD 71         seq ; ==
1301   0B11 E4            pop a
1302   0B12             ; END RELATIONAL
1303   0B12 C0 00 00      cmp b, 0
1304   0B15 C6 1B 0B      je _if22_else
1305   0B18             _if22_true:
1306   0B18             ;; ; 
1307   0B18 0A 41 0B      jmp _if22_exit
1308   0B1B             _if22_else:
1309   0B1B             ;; if(*format_p == 'x'); 
1310   0B1B             _if23_cond:
1311   0B1B FA FD FF      lea d, [bp + -3] ; $format_p
1312   0B1E 2A            mov b, [d]
1313   0B1F 74            mov d, b
1314   0B20 32            mov bl, [d]
1315   0B21 A7 00         mov bh, 0
1316   0B23             ; START RELATIONAL
1317   0B23 D7            push a
1318   0B24 11            mov a, b
1319   0B25 26 78 00      mov b, $78
1320   0B28 B0            cmp a, b
1321   0B29 FD 71         seq ; ==
1322   0B2B E4            pop a
1323   0B2C             ; END RELATIONAL
1324   0B2C C0 00 00      cmp b, 0
1325   0B2F C6 35 0B      je _if23_else
1326   0B32             _if23_true:
1327   0B32             ;; ; 
1328   0B32 0A 41 0B      jmp _if23_exit
1329   0B35             _if23_else:
1330   0B35             ;; err("Unexpected format in printf."); 
1331   0B35 26 BF 65      mov b, _s30 ; "Unexpected format in printf."
1332   0B38 FD AB         swp b
1333   0B3A D8            push b
1334   0B3B 07 69 0C      call err
1335   0B3E 51 02 00      add sp, 2
1336   0B41             _if23_exit:
1337   0B41             _if22_exit:
1338   0B41             _if21_exit:
1339   0B41             ;; p = p + 4; 
1340   0B41 FA FF FF      lea d, [bp + -1] ; $p
1341   0B44 DA            push d
1342   0B45 FA FF FF      lea d, [bp + -1] ; $p
1343   0B48 2A            mov b, [d]
1344   0B49             ; START TERMS
1345   0B49 D7            push a
1346   0B4A 11            mov a, b
1347   0B4B 26 04 00      mov b, $4
1348   0B4E 56            add b, a
1349   0B4F E4            pop a
1350   0B50             ; END TERMS
1351   0B50 E7            pop d
1352   0B51 FD 43         mov [d], b
1353   0B53             ;; break; 
1354   0B53 0A 38 0C      jmp _switch20_exit ; case break
1355   0B56             _switch20_case2:
1356   0B56             _switch20_case3:
1357   0B56             ;; i = scann(); 
1358   0B56 FA FA FF      lea d, [bp + -6] ; $i
1359   0B59 DA            push d
1360   0B5A 07 37 15      call scann
1361   0B5D E7            pop d
1362   0B5E FD 43         mov [d], b
1363   0B60             ;; **(int **)p = i; 
1364   0B60 FA FF FF      lea d, [bp + -1] ; $p
1365   0B63 2A            mov b, [d]
1366   0B64 74            mov d, b
1367   0B65 2A            mov b, [d]
1368   0B66 D8            push b
1369   0B67 FA FA FF      lea d, [bp + -6] ; $i
1370   0B6A 2A            mov b, [d]
1371   0B6B E7            pop d
1372   0B6C FD 43         mov [d], b
1373   0B6E             ;; p = p + 2; 
1374   0B6E FA FF FF      lea d, [bp + -1] ; $p
1375   0B71 DA            push d
1376   0B72 FA FF FF      lea d, [bp + -1] ; $p
1377   0B75 2A            mov b, [d]
1378   0B76             ; START TERMS
1379   0B76 D7            push a
1380   0B77 11            mov a, b
1381   0B78 26 02 00      mov b, $2
1382   0B7B 56            add b, a
1383   0B7C E4            pop a
1384   0B7D             ; END TERMS
1385   0B7D E7            pop d
1386   0B7E FD 43         mov [d], b
1387   0B80             ;; break; 
1388   0B80 0A 38 0C      jmp _switch20_exit ; case break
1389   0B83             _switch20_case4:
1390   0B83             ;; i = scann(); 
1391   0B83 FA FA FF      lea d, [bp + -6] ; $i
1392   0B86 DA            push d
1393   0B87 07 37 15      call scann
1394   0B8A E7            pop d
1395   0B8B FD 43         mov [d], b
1396   0B8D             ;; **(int **)p = i; 
1397   0B8D FA FF FF      lea d, [bp + -1] ; $p
1398   0B90 2A            mov b, [d]
1399   0B91 74            mov d, b
1400   0B92 2A            mov b, [d]
1401   0B93 D8            push b
1402   0B94 FA FA FF      lea d, [bp + -6] ; $i
1403   0B97 2A            mov b, [d]
1404   0B98 E7            pop d
1405   0B99 FD 43         mov [d], b
1406   0B9B             ;; p = p + 2; 
1407   0B9B FA FF FF      lea d, [bp + -1] ; $p
1408   0B9E DA            push d
1409   0B9F FA FF FF      lea d, [bp + -1] ; $p
1410   0BA2 2A            mov b, [d]
1411   0BA3             ; START TERMS
1412   0BA3 D7            push a
1413   0BA4 11            mov a, b
1414   0BA5 26 02 00      mov b, $2
1415   0BA8 56            add b, a
1416   0BA9 E4            pop a
1417   0BAA             ; END TERMS
1418   0BAA E7            pop d
1419   0BAB FD 43         mov [d], b
1420   0BAD             ;; break; 
1421   0BAD 0A 38 0C      jmp _switch20_exit ; case break
1422   0BB0             _switch20_case5:
1423   0BB0             ;; p = p + 2; 
1424   0BB0 FA FF FF      lea d, [bp + -1] ; $p
1425   0BB3 DA            push d
1426   0BB4 FA FF FF      lea d, [bp + -1] ; $p
1427   0BB7 2A            mov b, [d]
1428   0BB8             ; START TERMS
1429   0BB8 D7            push a
1430   0BB9 11            mov a, b
1431   0BBA 26 02 00      mov b, $2
1432   0BBD 56            add b, a
1433   0BBE E4            pop a
1434   0BBF             ; END TERMS
1435   0BBF E7            pop d
1436   0BC0 FD 43         mov [d], b
1437   0BC2             ;; break; 
1438   0BC2 0A 38 0C      jmp _switch20_exit ; case break
1439   0BC5             _switch20_case6:
1440   0BC5             ;; c = getchar(); 
1441   0BC5 FA FC FF      lea d, [bp + -4] ; $c
1442   0BC8 DA            push d
1443   0BC9 07 21 15      call getchar
1444   0BCC E7            pop d
1445   0BCD FD 3E         mov [d], bl
1446   0BCF             ;; **(char **)p = c; 
1447   0BCF FA FF FF      lea d, [bp + -1] ; $p
1448   0BD2 2A            mov b, [d]
1449   0BD3 74            mov d, b
1450   0BD4 2A            mov b, [d]
1451   0BD5 D8            push b
1452   0BD6 FA FC FF      lea d, [bp + -4] ; $c
1453   0BD9 32            mov bl, [d]
1454   0BDA A7 00         mov bh, 0
1455   0BDC E7            pop d
1456   0BDD FD 43         mov [d], b
1457   0BDF             ;; p = p + 2; 
1458   0BDF FA FF FF      lea d, [bp + -1] ; $p
1459   0BE2 DA            push d
1460   0BE3 FA FF FF      lea d, [bp + -1] ; $p
1461   0BE6 2A            mov b, [d]
1462   0BE7             ; START TERMS
1463   0BE7 D7            push a
1464   0BE8 11            mov a, b
1465   0BE9 26 02 00      mov b, $2
1466   0BEC 56            add b, a
1467   0BED E4            pop a
1468   0BEE             ; END TERMS
1469   0BEE E7            pop d
1470   0BEF FD 43         mov [d], b
1471   0BF1             ;; break; 
1472   0BF1 0A 38 0C      jmp _switch20_exit ; case break
1473   0BF4             _switch20_case7:
1474   0BF4             ;; gets(input_string); 
1475   0BF4 FA FA FD      lea d, [bp + -518] ; $input_string
1476   0BF7 2D            mov b, d
1477   0BF8 FD AB         swp b
1478   0BFA D8            push b
1479   0BFB 07 F5 0D      call gets
1480   0BFE 51 02 00      add sp, 2
1481   0C01             ;; strcpy(*(char **)p, input_string); 
1482   0C01 FA FA FD      lea d, [bp + -518] ; $input_string
1483   0C04 2D            mov b, d
1484   0C05 FD AB         swp b
1485   0C07 D8            push b
1486   0C08 FA FF FF      lea d, [bp + -1] ; $p
1487   0C0B 2A            mov b, [d]
1488   0C0C 74            mov d, b
1489   0C0D 2A            mov b, [d]
1490   0C0E FD AB         swp b
1491   0C10 D8            push b
1492   0C11 07 14 04      call strcpy
1493   0C14 51 04 00      add sp, 4
1494   0C17             ;; p = p + 2; 
1495   0C17 FA FF FF      lea d, [bp + -1] ; $p
1496   0C1A DA            push d
1497   0C1B FA FF FF      lea d, [bp + -1] ; $p
1498   0C1E 2A            mov b, [d]
1499   0C1F             ; START TERMS
1500   0C1F D7            push a
1501   0C20 11            mov a, b
1502   0C21 26 02 00      mov b, $2
1503   0C24 56            add b, a
1504   0C25 E4            pop a
1505   0C26             ; END TERMS
1506   0C26 E7            pop d
1507   0C27 FD 43         mov [d], b
1508   0C29             ;; break; 
1509   0C29 0A 38 0C      jmp _switch20_exit ; case break
1510   0C2C             _switch20_default:
1511   0C2C             ;; print("Error: Unknown argument type.\n"); 
1512   0C2C 26 DC 65      mov b, _s31 ; "Error: Unknown argument type.\n"
1513   0C2F FD AB         swp b
1514   0C31 D8            push b
1515   0C32 07 5C 15      call print
1516   0C35 51 02 00      add sp, 2
1517   0C38             _switch20_exit:
1518   0C38             ;; format_p++; 
1519   0C38 FA FD FF      lea d, [bp + -3] ; $format_p
1520   0C3B 2A            mov b, [d]
1521   0C3C FD 77         inc b
1522   0C3E FA FD FF      lea d, [bp + -3] ; $format_p
1523   0C41 FD 43         mov [d], b
1524   0C43 FD 7D         dec b
1525   0C45 0A 64 0C      jmp _if19_exit
1526   0C48             _if19_else:
1527   0C48             ;; putchar(*format_p); 
1528   0C48 FA FD FF      lea d, [bp + -3] ; $format_p
1529   0C4B 2A            mov b, [d]
1530   0C4C 74            mov d, b
1531   0C4D 32            mov bl, [d]
1532   0C4E A7 00         mov bh, 0
1533   0C50 DD            push bl
1534   0C51 07 14 15      call putchar
1535   0C54 51 01 00      add sp, 1
1536   0C57             ;; format_p++; 
1537   0C57 FA FD FF      lea d, [bp + -3] ; $format_p
1538   0C5A 2A            mov b, [d]
1539   0C5B FD 77         inc b
1540   0C5D FA FD FF      lea d, [bp + -3] ; $format_p
1541   0C60 FD 43         mov [d], b
1542   0C62 FD 7D         dec b
1543   0C64             _if19_exit:
1544   0C64             _if18_exit:
1545   0C64             _for17_update:
1546   0C64 0A 51 0A      jmp _for17_cond
1547   0C67             _for17_exit:
1548   0C67 F9            leave
1549   0C68 09            ret
1550   0C69             
1551   0C69             err:
1552   0C69 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1553   0C6C             ;; print(e); 
1554   0C6C FA 05 00      lea d, [bp + 5] ; $e
1555   0C6F 2A            mov b, [d]
1556   0C70 FD AB         swp b
1557   0C72 D8            push b
1558   0C73 07 5C 15      call print
1559   0C76 51 02 00      add sp, 2
1560   0C79 F9            leave
1561   0C7A 09            ret
1562   0C7B             
1563   0C7B             printx32:
1564   0C7B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1565   0C7E             
1566   0C7E             ; --- BEGIN INLINE ASM BLOCK
1567   0C7E FA 05 00      lea d, [bp + 5] ; $hex
1568   0C81 2B 02 00      mov b, [d+2]
1569   0C84 07 47 18      call print_u16x
1570   0C87 2A            mov b, [d]
1571   0C88 07 47 18      call print_u16x
1572   0C8B             ; --- END INLINE ASM BLOCK
1573   0C8B             
1574   0C8B F9            leave
1575   0C8C 09            ret
1576   0C8D             
1577   0C8D             printx16:
1578   0C8D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1579   0C90             
1580   0C90             ; --- BEGIN INLINE ASM BLOCK
1581   0C90 FA 05 00      lea d, [bp + 5] ; $hex
1582   0C93 2A            mov b, [d]
1583   0C94 07 47 18      call print_u16x
1584   0C97             ; --- END INLINE ASM BLOCK
1585   0C97             
1586   0C97 F9            leave
1587   0C98 09            ret
1588   0C99             
1589   0C99             printx8:
1590   0C99 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1591   0C9C             
1592   0C9C             ; --- BEGIN INLINE ASM BLOCK
1593   0C9C FA 05 00      lea d, [bp + 5] ; $hex
1594   0C9F 32            mov bl, [d]
1595   0CA0 07 8B 18      call print_u8x
1596   0CA3             ; --- END INLINE ASM BLOCK
1597   0CA3             
1598   0CA3 F9            leave
1599   0CA4 09            ret
1600   0CA5             
1601   0CA5             hex_str_to_int:
1602   0CA5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1603   0CA8             ;; int value = 0; 
1604   0CA8 52 02 00      sub sp, 2 ; value
1605   0CAB             ; --- START LOCAL VAR INITIALIZATION
1606   0CAB FA FF FF      lea d, [bp + -1] ; $value
1607   0CAE DA            push d
1608   0CAF 26 00 00      mov b, $0
1609   0CB2 E7            pop d
1610   0CB3 FD 43         mov [d], b
1611   0CB5             ; --- END LOCAL VAR INITIALIZATION
1612   0CB5             ;; int i; 
1613   0CB5 52 02 00      sub sp, 2 ; i
1614   0CB8             ;; char hex_char; 
1615   0CB8 52 01 00      sub sp, 1 ; hex_char
1616   0CBB             ;; int len; 
1617   0CBB 52 02 00      sub sp, 2 ; len
1618   0CBE             ;; len = strlen(hex_string); 
1619   0CBE FA FA FF      lea d, [bp + -6] ; $len
1620   0CC1 DA            push d
1621   0CC2 FA 05 00      lea d, [bp + 5] ; $hex_string
1622   0CC5 2A            mov b, [d]
1623   0CC6 FD AB         swp b
1624   0CC8 D8            push b
1625   0CC9 07 8E 05      call strlen
1626   0CCC 51 02 00      add sp, 2
1627   0CCF E7            pop d
1628   0CD0 FD 43         mov [d], b
1629   0CD2             ;; for (i = 0; i < len; i++) { 
1630   0CD2             _for24_init:
1631   0CD2 FA FD FF      lea d, [bp + -3] ; $i
1632   0CD5 DA            push d
1633   0CD6 26 00 00      mov b, $0
1634   0CD9 E7            pop d
1635   0CDA FD 43         mov [d], b
1636   0CDC             _for24_cond:
1637   0CDC FA FD FF      lea d, [bp + -3] ; $i
1638   0CDF 2A            mov b, [d]
1639   0CE0             ; START RELATIONAL
1640   0CE0 D7            push a
1641   0CE1 11            mov a, b
1642   0CE2 FA FA FF      lea d, [bp + -6] ; $len
1643   0CE5 2A            mov b, [d]
1644   0CE6 B0            cmp a, b
1645   0CE7 FD 73         slt ; < (signed)
1646   0CE9 E4            pop a
1647   0CEA             ; END RELATIONAL
1648   0CEA C0 00 00      cmp b, 0
1649   0CED C6 EF 0D      je _for24_exit
1650   0CF0             _for24_block:
1651   0CF0             ;; hex_char = hex_string[i]; 
1652   0CF0 FA FC FF      lea d, [bp + -4] ; $hex_char
1653   0CF3 DA            push d
1654   0CF4 FA 05 00      lea d, [bp + 5] ; $hex_string
1655   0CF7 FD 2A         mov d, [d]
1656   0CF9 D7            push a
1657   0CFA DA            push d
1658   0CFB FA FD FF      lea d, [bp + -3] ; $i
1659   0CFE 2A            mov b, [d]
1660   0CFF E7            pop d
1661   0D00 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1662   0D04 E4            pop a
1663   0D05 32            mov bl, [d]
1664   0D06 A7 00         mov bh, 0
1665   0D08 E7            pop d
1666   0D09 FD 3E         mov [d], bl
1667   0D0B             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1668   0D0B             _if25_cond:
1669   0D0B FA FC FF      lea d, [bp + -4] ; $hex_char
1670   0D0E 32            mov bl, [d]
1671   0D0F A7 00         mov bh, 0
1672   0D11             ; START RELATIONAL
1673   0D11 D7            push a
1674   0D12 11            mov a, b
1675   0D13 26 61 00      mov b, $61
1676   0D16 B0            cmp a, b
1677   0D17 FD 80         sge ; >=
1678   0D19 E4            pop a
1679   0D1A             ; END RELATIONAL
1680   0D1A             ; START LOGICAL AND
1681   0D1A D7            push a
1682   0D1B 11            mov a, b
1683   0D1C FA FC FF      lea d, [bp + -4] ; $hex_char
1684   0D1F 32            mov bl, [d]
1685   0D20 A7 00         mov bh, 0
1686   0D22             ; START RELATIONAL
1687   0D22 D7            push a
1688   0D23 11            mov a, b
1689   0D24 26 66 00      mov b, $66
1690   0D27 B0            cmp a, b
1691   0D28 FD 74         sle ; <= (signed)
1692   0D2A E4            pop a
1693   0D2B             ; END RELATIONAL
1694   0D2B FD A7         sand a, b
1695   0D2D E4            pop a
1696   0D2E             ; END LOGICAL AND
1697   0D2E C0 00 00      cmp b, 0
1698   0D31 C6 62 0D      je _if25_else
1699   0D34             _if25_true:
1700   0D34             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1701   0D34 FA FF FF      lea d, [bp + -1] ; $value
1702   0D37 DA            push d
1703   0D38 FA FF FF      lea d, [bp + -1] ; $value
1704   0D3B 2A            mov b, [d]
1705   0D3C             ; START FACTORS
1706   0D3C D7            push a
1707   0D3D 11            mov a, b
1708   0D3E 26 10 00      mov b, $10
1709   0D41 AC            mul a, b ; *
1710   0D42 11            mov a, b
1711   0D43 27            mov b, a
1712   0D44 E4            pop a
1713   0D45             ; END FACTORS
1714   0D45             ; START TERMS
1715   0D45 D7            push a
1716   0D46 11            mov a, b
1717   0D47 FA FC FF      lea d, [bp + -4] ; $hex_char
1718   0D4A 32            mov bl, [d]
1719   0D4B A7 00         mov bh, 0
1720   0D4D             ; START TERMS
1721   0D4D D7            push a
1722   0D4E 11            mov a, b
1723   0D4F 26 61 00      mov b, $61
1724   0D52 60            sub a, b
1725   0D53 27            mov b, a
1726   0D54 11            mov a, b
1727   0D55 26 0A 00      mov b, $a
1728   0D58 56            add b, a
1729   0D59 E4            pop a
1730   0D5A             ; END TERMS
1731   0D5A 56            add b, a
1732   0D5B E4            pop a
1733   0D5C             ; END TERMS
1734   0D5C E7            pop d
1735   0D5D FD 43         mov [d], b
1736   0D5F 0A DF 0D      jmp _if25_exit
1737   0D62             _if25_else:
1738   0D62             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1739   0D62             _if26_cond:
1740   0D62 FA FC FF      lea d, [bp + -4] ; $hex_char
1741   0D65 32            mov bl, [d]
1742   0D66 A7 00         mov bh, 0
1743   0D68             ; START RELATIONAL
1744   0D68 D7            push a
1745   0D69 11            mov a, b
1746   0D6A 26 41 00      mov b, $41
1747   0D6D B0            cmp a, b
1748   0D6E FD 80         sge ; >=
1749   0D70 E4            pop a
1750   0D71             ; END RELATIONAL
1751   0D71             ; START LOGICAL AND
1752   0D71 D7            push a
1753   0D72 11            mov a, b
1754   0D73 FA FC FF      lea d, [bp + -4] ; $hex_char
1755   0D76 32            mov bl, [d]
1756   0D77 A7 00         mov bh, 0
1757   0D79             ; START RELATIONAL
1758   0D79 D7            push a
1759   0D7A 11            mov a, b
1760   0D7B 26 46 00      mov b, $46
1761   0D7E B0            cmp a, b
1762   0D7F FD 74         sle ; <= (signed)
1763   0D81 E4            pop a
1764   0D82             ; END RELATIONAL
1765   0D82 FD A7         sand a, b
1766   0D84 E4            pop a
1767   0D85             ; END LOGICAL AND
1768   0D85 C0 00 00      cmp b, 0
1769   0D88 C6 B9 0D      je _if26_else
1770   0D8B             _if26_true:
1771   0D8B             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1772   0D8B FA FF FF      lea d, [bp + -1] ; $value
1773   0D8E DA            push d
1774   0D8F FA FF FF      lea d, [bp + -1] ; $value
1775   0D92 2A            mov b, [d]
1776   0D93             ; START FACTORS
1777   0D93 D7            push a
1778   0D94 11            mov a, b
1779   0D95 26 10 00      mov b, $10
1780   0D98 AC            mul a, b ; *
1781   0D99 11            mov a, b
1782   0D9A 27            mov b, a
1783   0D9B E4            pop a
1784   0D9C             ; END FACTORS
1785   0D9C             ; START TERMS
1786   0D9C D7            push a
1787   0D9D 11            mov a, b
1788   0D9E FA FC FF      lea d, [bp + -4] ; $hex_char
1789   0DA1 32            mov bl, [d]
1790   0DA2 A7 00         mov bh, 0
1791   0DA4             ; START TERMS
1792   0DA4 D7            push a
1793   0DA5 11            mov a, b
1794   0DA6 26 41 00      mov b, $41
1795   0DA9 60            sub a, b
1796   0DAA 27            mov b, a
1797   0DAB 11            mov a, b
1798   0DAC 26 0A 00      mov b, $a
1799   0DAF 56            add b, a
1800   0DB0 E4            pop a
1801   0DB1             ; END TERMS
1802   0DB1 56            add b, a
1803   0DB2 E4            pop a
1804   0DB3             ; END TERMS
1805   0DB3 E7            pop d
1806   0DB4 FD 43         mov [d], b
1807   0DB6 0A DF 0D      jmp _if26_exit
1808   0DB9             _if26_else:
1809   0DB9             ;; value = (value * 16) + (hex_char - '0'); 
1810   0DB9 FA FF FF      lea d, [bp + -1] ; $value
1811   0DBC DA            push d
1812   0DBD FA FF FF      lea d, [bp + -1] ; $value
1813   0DC0 2A            mov b, [d]
1814   0DC1             ; START FACTORS
1815   0DC1 D7            push a
1816   0DC2 11            mov a, b
1817   0DC3 26 10 00      mov b, $10
1818   0DC6 AC            mul a, b ; *
1819   0DC7 11            mov a, b
1820   0DC8 27            mov b, a
1821   0DC9 E4            pop a
1822   0DCA             ; END FACTORS
1823   0DCA             ; START TERMS
1824   0DCA D7            push a
1825   0DCB 11            mov a, b
1826   0DCC FA FC FF      lea d, [bp + -4] ; $hex_char
1827   0DCF 32            mov bl, [d]
1828   0DD0 A7 00         mov bh, 0
1829   0DD2             ; START TERMS
1830   0DD2 D7            push a
1831   0DD3 11            mov a, b
1832   0DD4 26 30 00      mov b, $30
1833   0DD7 60            sub a, b
1834   0DD8 27            mov b, a
1835   0DD9 E4            pop a
1836   0DDA             ; END TERMS
1837   0DDA 56            add b, a
1838   0DDB E4            pop a
1839   0DDC             ; END TERMS
1840   0DDC E7            pop d
1841   0DDD FD 43         mov [d], b
1842   0DDF             _if26_exit:
1843   0DDF             _if25_exit:
1844   0DDF             _for24_update:
1845   0DDF FA FD FF      lea d, [bp + -3] ; $i
1846   0DE2 2A            mov b, [d]
1847   0DE3 FD 77         inc b
1848   0DE5 FA FD FF      lea d, [bp + -3] ; $i
1849   0DE8 FD 43         mov [d], b
1850   0DEA FD 7D         dec b
1851   0DEC 0A DC 0C      jmp _for24_cond
1852   0DEF             _for24_exit:
1853   0DEF             ;; return value; 
1854   0DEF FA FF FF      lea d, [bp + -1] ; $value
1855   0DF2 2A            mov b, [d]
1856   0DF3 F9            leave
1857   0DF4 09            ret
1858   0DF5             
1859   0DF5             gets:
1860   0DF5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1861   0DF8             
1862   0DF8             ; --- BEGIN INLINE ASM BLOCK
1863   0DF8 FA 05 00      lea d, [bp + 5] ; $s
1864   0DFB 15            mov a, [d]
1865   0DFC 3C            mov d, a
1866   0DFD 07 AC 16      call _gets
1867   0E00             ; --- END INLINE ASM BLOCK
1868   0E00             
1869   0E00             ;; return strlen(s); 
1870   0E00 FA 05 00      lea d, [bp + 5] ; $s
1871   0E03 2A            mov b, [d]
1872   0E04 FD AB         swp b
1873   0E06 D8            push b
1874   0E07 07 8E 05      call strlen
1875   0E0A 51 02 00      add sp, 2
1876   0E0D F9            leave
1877   0E0E 09            ret
1878   0E0F             
1879   0E0F             print_signed:
1880   0E0F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1881   0E12             ;; char digits[5]; 
1882   0E12 52 05 00      sub sp, 5 ; digits
1883   0E15             ;; int i = 0; 
1884   0E15 52 02 00      sub sp, 2 ; i
1885   0E18             ; --- START LOCAL VAR INITIALIZATION
1886   0E18 FA FA FF      lea d, [bp + -6] ; $i
1887   0E1B DA            push d
1888   0E1C 26 00 00      mov b, $0
1889   0E1F E7            pop d
1890   0E20 FD 43         mov [d], b
1891   0E22             ; --- END LOCAL VAR INITIALIZATION
1892   0E22             ;; if (num < 0) { 
1893   0E22             _if27_cond:
1894   0E22 FA 05 00      lea d, [bp + 5] ; $num
1895   0E25 2A            mov b, [d]
1896   0E26             ; START RELATIONAL
1897   0E26 D7            push a
1898   0E27 11            mov a, b
1899   0E28 26 00 00      mov b, $0
1900   0E2B B0            cmp a, b
1901   0E2C FD 73         slt ; < (signed)
1902   0E2E E4            pop a
1903   0E2F             ; END RELATIONAL
1904   0E2F C0 00 00      cmp b, 0
1905   0E32 C6 4F 0E      je _if27_else
1906   0E35             _if27_true:
1907   0E35             ;; putchar('-'); 
1908   0E35 26 2D 00      mov b, $2d
1909   0E38 DD            push bl
1910   0E39 07 14 15      call putchar
1911   0E3C 51 01 00      add sp, 1
1912   0E3F             ;; num = -num; 
1913   0E3F FA 05 00      lea d, [bp + 5] ; $num
1914   0E42 DA            push d
1915   0E43 FA 05 00      lea d, [bp + 5] ; $num
1916   0E46 2A            mov b, [d]
1917   0E47 FD 97         neg b
1918   0E49 E7            pop d
1919   0E4A FD 43         mov [d], b
1920   0E4C 0A 71 0E      jmp _if27_exit
1921   0E4F             _if27_else:
1922   0E4F             ;; if (num == 0) { 
1923   0E4F             _if28_cond:
1924   0E4F FA 05 00      lea d, [bp + 5] ; $num
1925   0E52 2A            mov b, [d]
1926   0E53             ; START RELATIONAL
1927   0E53 D7            push a
1928   0E54 11            mov a, b
1929   0E55 26 00 00      mov b, $0
1930   0E58 B0            cmp a, b
1931   0E59 FD 71         seq ; ==
1932   0E5B E4            pop a
1933   0E5C             ; END RELATIONAL
1934   0E5C C0 00 00      cmp b, 0
1935   0E5F C6 71 0E      je _if28_exit
1936   0E62             _if28_true:
1937   0E62             ;; putchar('0'); 
1938   0E62 26 30 00      mov b, $30
1939   0E65 DD            push bl
1940   0E66 07 14 15      call putchar
1941   0E69 51 01 00      add sp, 1
1942   0E6C             ;; return; 
1943   0E6C F9            leave
1944   0E6D 09            ret
1945   0E6E 0A 71 0E      jmp _if28_exit
1946   0E71             _if28_exit:
1947   0E71             _if27_exit:
1948   0E71             ;; while (num > 0) { 
1949   0E71             _while29_cond:
1950   0E71 FA 05 00      lea d, [bp + 5] ; $num
1951   0E74 2A            mov b, [d]
1952   0E75             ; START RELATIONAL
1953   0E75 D7            push a
1954   0E76 11            mov a, b
1955   0E77 26 00 00      mov b, $0
1956   0E7A B0            cmp a, b
1957   0E7B FD 7F         sgt ; >
1958   0E7D E4            pop a
1959   0E7E             ; END RELATIONAL
1960   0E7E C0 00 00      cmp b, 0
1961   0E81 C6 CB 0E      je _while29_exit
1962   0E84             _while29_block:
1963   0E84             ;; digits[i] = '0' + (num % 10); 
1964   0E84 FA FC FF      lea d, [bp + -4] ; $digits
1965   0E87 D7            push a
1966   0E88 DA            push d
1967   0E89 FA FA FF      lea d, [bp + -6] ; $i
1968   0E8C 2A            mov b, [d]
1969   0E8D E7            pop d
1970   0E8E 5A            add d, b
1971   0E8F E4            pop a
1972   0E90 DA            push d
1973   0E91 26 30 00      mov b, $30
1974   0E94             ; START TERMS
1975   0E94 D7            push a
1976   0E95 11            mov a, b
1977   0E96 FA 05 00      lea d, [bp + 5] ; $num
1978   0E99 2A            mov b, [d]
1979   0E9A             ; START FACTORS
1980   0E9A D7            push a
1981   0E9B 11            mov a, b
1982   0E9C 26 0A 00      mov b, $a
1983   0E9F AE            div a, b ; 
1984   0EA0 11            mov a, b
1985   0EA1 27            mov b, a
1986   0EA2 E4            pop a
1987   0EA3             ; END FACTORS
1988   0EA3 56            add b, a
1989   0EA4 E4            pop a
1990   0EA5             ; END TERMS
1991   0EA5 E7            pop d
1992   0EA6 FD 3E         mov [d], bl
1993   0EA8             ;; num = num / 10; 
1994   0EA8 FA 05 00      lea d, [bp + 5] ; $num
1995   0EAB DA            push d
1996   0EAC FA 05 00      lea d, [bp + 5] ; $num
1997   0EAF 2A            mov b, [d]
1998   0EB0             ; START FACTORS
1999   0EB0 D7            push a
2000   0EB1 11            mov a, b
2001   0EB2 26 0A 00      mov b, $a
2002   0EB5 AE            div a, b
2003   0EB6 27            mov b, a
2004   0EB7 E4            pop a
2005   0EB8             ; END FACTORS
2006   0EB8 E7            pop d
2007   0EB9 FD 43         mov [d], b
2008   0EBB             ;; i++; 
2009   0EBB FA FA FF      lea d, [bp + -6] ; $i
2010   0EBE 2A            mov b, [d]
2011   0EBF FD 77         inc b
2012   0EC1 FA FA FF      lea d, [bp + -6] ; $i
2013   0EC4 FD 43         mov [d], b
2014   0EC6 FD 7D         dec b
2015   0EC8 0A 71 0E      jmp _while29_cond
2016   0ECB             _while29_exit:
2017   0ECB             ;; while (i > 0) { 
2018   0ECB             _while30_cond:
2019   0ECB FA FA FF      lea d, [bp + -6] ; $i
2020   0ECE 2A            mov b, [d]
2021   0ECF             ; START RELATIONAL
2022   0ECF D7            push a
2023   0ED0 11            mov a, b
2024   0ED1 26 00 00      mov b, $0
2025   0ED4 B0            cmp a, b
2026   0ED5 FD 7F         sgt ; >
2027   0ED7 E4            pop a
2028   0ED8             ; END RELATIONAL
2029   0ED8 C0 00 00      cmp b, 0
2030   0EDB C6 04 0F      je _while30_exit
2031   0EDE             _while30_block:
2032   0EDE             ;; i--; 
2033   0EDE FA FA FF      lea d, [bp + -6] ; $i
2034   0EE1 2A            mov b, [d]
2035   0EE2 FD 7D         dec b
2036   0EE4 FA FA FF      lea d, [bp + -6] ; $i
2037   0EE7 FD 43         mov [d], b
2038   0EE9 FD 77         inc b
2039   0EEB             ;; putchar(digits[i]); 
2040   0EEB FA FC FF      lea d, [bp + -4] ; $digits
2041   0EEE D7            push a
2042   0EEF DA            push d
2043   0EF0 FA FA FF      lea d, [bp + -6] ; $i
2044   0EF3 2A            mov b, [d]
2045   0EF4 E7            pop d
2046   0EF5 5A            add d, b
2047   0EF6 E4            pop a
2048   0EF7 32            mov bl, [d]
2049   0EF8 A7 00         mov bh, 0
2050   0EFA DD            push bl
2051   0EFB 07 14 15      call putchar
2052   0EFE 51 01 00      add sp, 1
2053   0F01 0A CB 0E      jmp _while30_cond
2054   0F04             _while30_exit:
2055   0F04 F9            leave
2056   0F05 09            ret
2057   0F06             
2058   0F06             print_signed_long:
2059   0F06 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2060   0F09             ;; char digits[10]; 
2061   0F09 52 0A 00      sub sp, 10 ; digits
2062   0F0C             ;; int i = 0; 
2063   0F0C 52 02 00      sub sp, 2 ; i
2064   0F0F             ; --- START LOCAL VAR INITIALIZATION
2065   0F0F FA F5 FF      lea d, [bp + -11] ; $i
2066   0F12 DA            push d
2067   0F13 26 00 00      mov b, $0
2068   0F16 E7            pop d
2069   0F17 FD 43         mov [d], b
2070   0F19             ; --- END LOCAL VAR INITIALIZATION
2071   0F19             ;; if (num < 0) { 
2072   0F19             _if31_cond:
2073   0F19 FA 05 00      lea d, [bp + 5] ; $num
2074   0F1C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2075   0F1F FD 39         mov c, b ; And place it into C
2076   0F21 2A            mov b, [d] ; Lower Word in B
2077   0F22             ; START RELATIONAL
2078   0F22 D7            push a
2079   0F23 FD D8         push g
2080   0F25 11            mov a, b
2081   0F26 FD 7A         mov g, c
2082   0F28 26 00 00      mov b, $0
2083   0F2B 38 00 00      mov c, 0
2084   0F2E FD AF 00 00   cmp32 ga, cb
2084   0F32 00 00 00 00 
2084   0F36 00 00 00 00 
2084   0F3A 00 00 00 00 
2084   0F3E 00 00 00 00 
2084   0F42 00 00 00 00 
2084   0F46 00 00 00 00 
2084   0F4A 00 00 00 00 
2084   0F4E 00 00 00 00 
2084   0F52 00 00 00 00 
2084   0F56 00 00 00 00 
2084   0F5A 00 00 00 00 
2084   0F5E 00 00 00 00 
2084   0F62 00 00 00 00 
2084   0F66 00 00 00 00 
2084   0F6A 00 00 00 00 
2084   0F6E 00 00 00 00 
2084   0F72 00 00 00 00 
2084   0F76 00 00 00 00 
2084   0F7A 00 00 00 00 
2084   0F7E 00 00 00 00 
2084   0F82 00 00 00 00 
2084   0F86 00 00 00 00 
2084   0F8A 00 00 00 00 
2084   0F8E 00 00 00 00 
2084   0F92 00 00 00 00 
2084   0F96 00 00 00 00 
2084   0F9A 00 00 00 00 
2084   0F9E 00 00 00 00 
2084   0FA2 00 00 00 00 
2084   0FA6 00 00 00 00 
2084   0FAA 00 00 00 00 
2084   0FAE 00 00 00 00 
2084   0FB2 00 00 00 00 
2084   0FB6 00 00 00 00 
2084   0FBA 00 00 00 00 
2084   0FBE 00 00 00 00 
2084   0FC2 00 00 00 00 
2084   0FC6 00 00 00 00 
2084   0FCA 00 00 00 00 
2084   0FCE 00 00 00 00 
2084   0FD2 00 00 00 00 
2084   0FD6 00 00 00 00 
2084   0FDA 00 00 00 00 
2084   0FDE 00 00 00 00 
2084   0FE2 00 00 00 00 
2084   0FE6 00 00 00 00 
2084   0FEA 00 00 00 00 
2084   0FEE 00 00 00 00 
2084   0FF2 00 00 00 00 
2084   0FF6 00 00 00 00 
2084   0FFA 00 00 00 00 
2084   0FFE 00 00 00 00 
2084   1002 00 00 00 00 
2084   1006 00 00 00 00 
2084   100A 00 00 00 00 
2084   100E 00 00 00 00 
2084   1012 00 00 00 00 
2084   1016 00 00 00 00 
2084   101A 00 00 00 00 
2084   101E 00 00 00 00 
2084   1022 00 00 00 00 
2084   1026 00 00 00 00 
2084   102A 00 00 00 00 
2084   102E 00 
2085   102F FD 73         slt ; <
2086   1031 FD F1         pop g
2087   1033 E4            pop a
2088   1034             ; END RELATIONAL
2089   1034 C0 00 00      cmp b, 0
2090   1037 C6 5E 10      je _if31_else
2091   103A             _if31_true:
2092   103A             ;; putchar('-'); 
2093   103A 26 2D 00      mov b, $2d
2094   103D DD            push bl
2095   103E 07 14 15      call putchar
2096   1041 51 01 00      add sp, 1
2097   1044             ;; num = -num; 
2098   1044 FA 05 00      lea d, [bp + 5] ; $num
2099   1047 DA            push d
2100   1048 FA 05 00      lea d, [bp + 5] ; $num
2101   104B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2102   104E FD 39         mov c, b ; And place it into C
2103   1050 2A            mov b, [d] ; Lower Word in B
2104   1051 FD 97         neg b
2105   1053 E7            pop d
2106   1054 FD 43         mov [d], b
2107   1056 28            mov b, c
2108   1057 FD 44 02 00   mov [d + 2], b
2109   105B 0A 8E 11      jmp _if31_exit
2110   105E             _if31_else:
2111   105E             ;; if (num == 0) { 
2112   105E             _if32_cond:
2113   105E FA 05 00      lea d, [bp + 5] ; $num
2114   1061 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2115   1064 FD 39         mov c, b ; And place it into C
2116   1066 2A            mov b, [d] ; Lower Word in B
2117   1067             ; START RELATIONAL
2118   1067 D7            push a
2119   1068 FD D8         push g
2120   106A 11            mov a, b
2121   106B FD 7A         mov g, c
2122   106D 26 00 00      mov b, $0
2123   1070 38 00 00      mov c, 0
2124   1073 FD AF 00 00   cmp32 ga, cb
2124   1077 00 00 00 00 
2124   107B 00 00 00 00 
2124   107F 00 00 00 00 
2124   1083 00 00 00 00 
2124   1087 00 00 00 00 
2124   108B 00 00 00 00 
2124   108F 00 00 00 00 
2124   1093 00 00 00 00 
2124   1097 00 00 00 00 
2124   109B 00 00 00 00 
2124   109F 00 00 00 00 
2124   10A3 00 00 00 00 
2124   10A7 00 00 00 00 
2124   10AB 00 00 00 00 
2124   10AF 00 00 00 00 
2124   10B3 00 00 00 00 
2124   10B7 00 00 00 00 
2124   10BB 00 00 00 00 
2124   10BF 00 00 00 00 
2124   10C3 00 00 00 00 
2124   10C7 00 00 00 00 
2124   10CB 00 00 00 00 
2124   10CF 00 00 00 00 
2124   10D3 00 00 00 00 
2124   10D7 00 00 00 00 
2124   10DB 00 00 00 00 
2124   10DF 00 00 00 00 
2124   10E3 00 00 00 00 
2124   10E7 00 00 00 00 
2124   10EB 00 00 00 00 
2124   10EF 00 00 00 00 
2124   10F3 00 00 00 00 
2124   10F7 00 00 00 00 
2124   10FB 00 00 00 00 
2124   10FF 00 00 00 00 
2124   1103 00 00 00 00 
2124   1107 00 00 00 00 
2124   110B 00 00 00 00 
2124   110F 00 00 00 00 
2124   1113 00 00 00 00 
2124   1117 00 00 00 00 
2124   111B 00 00 00 00 
2124   111F 00 00 00 00 
2124   1123 00 00 00 00 
2124   1127 00 00 00 00 
2124   112B 00 00 00 00 
2124   112F 00 00 00 00 
2124   1133 00 00 00 00 
2124   1137 00 00 00 00 
2124   113B 00 00 00 00 
2124   113F 00 00 00 00 
2124   1143 00 00 00 00 
2124   1147 00 00 00 00 
2124   114B 00 00 00 00 
2124   114F 00 00 00 00 
2124   1153 00 00 00 00 
2124   1157 00 00 00 00 
2124   115B 00 00 00 00 
2124   115F 00 00 00 00 
2124   1163 00 00 00 00 
2124   1167 00 00 00 00 
2124   116B 00 00 00 00 
2124   116F 00 00 00 00 
2124   1173 00 
2125   1174 FD 71         seq ; ==
2126   1176 FD F1         pop g
2127   1178 E4            pop a
2128   1179             ; END RELATIONAL
2129   1179 C0 00 00      cmp b, 0
2130   117C C6 8E 11      je _if32_exit
2131   117F             _if32_true:
2132   117F             ;; putchar('0'); 
2133   117F 26 30 00      mov b, $30
2134   1182 DD            push bl
2135   1183 07 14 15      call putchar
2136   1186 51 01 00      add sp, 1
2137   1189             ;; return; 
2138   1189 F9            leave
2139   118A 09            ret
2140   118B 0A 8E 11      jmp _if32_exit
2141   118E             _if32_exit:
2142   118E             _if31_exit:
2143   118E             ;; while (num > 0) { 
2144   118E             _while33_cond:
2145   118E FA 05 00      lea d, [bp + 5] ; $num
2146   1191 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2147   1194 FD 39         mov c, b ; And place it into C
2148   1196 2A            mov b, [d] ; Lower Word in B
2149   1197             ; START RELATIONAL
2150   1197 D7            push a
2151   1198 FD D8         push g
2152   119A 11            mov a, b
2153   119B FD 7A         mov g, c
2154   119D 26 00 00      mov b, $0
2155   11A0 38 00 00      mov c, 0
2156   11A3 FD 7F         sgt
2157   11A5 FD F1         pop g
2158   11A7 E4            pop a
2159   11A8             ; END RELATIONAL
2160   11A8 C0 00 00      cmp b, 0
2161   11AB C6 0B 12      je _while33_exit
2162   11AE             _while33_block:
2163   11AE             ;; digits[i] = '0' + (num % 10); 
2164   11AE FA F7 FF      lea d, [bp + -9] ; $digits
2165   11B1 D7            push a
2166   11B2 DA            push d
2167   11B3 FA F5 FF      lea d, [bp + -11] ; $i
2168   11B6 2A            mov b, [d]
2169   11B7 E7            pop d
2170   11B8 5A            add d, b
2171   11B9 E4            pop a
2172   11BA DA            push d
2173   11BB 26 30 00      mov b, $30
2174   11BE             ; START TERMS
2175   11BE D7            push a
2176   11BF 11            mov a, b
2177   11C0 FA 05 00      lea d, [bp + 5] ; $num
2178   11C3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2179   11C6 FD 39         mov c, b ; And place it into C
2180   11C8 2A            mov b, [d] ; Lower Word in B
2181   11C9             ; START FACTORS
2182   11C9 D7            push a
2183   11CA 11            mov a, b
2184   11CB 26 0A 00      mov b, $a
2185   11CE AE            div a, b ; 
2186   11CF 11            mov a, b
2187   11D0 27            mov b, a
2188   11D1 E4            pop a
2189   11D2             ; END FACTORS
2190   11D2 54            add a, b
2191   11D3 D7            push a
2192   11D4 FD 12         mov a, g
2193   11D6 28            mov b, c
2194   11D7 5C            adc a, b
2195   11D8 39            mov c, a
2196   11D9 E5            pop b
2197   11DA E4            pop a
2198   11DB             ; END TERMS
2199   11DB E7            pop d
2200   11DC FD 3E         mov [d], bl
2201   11DE             ;; num = num / 10; 
2202   11DE FA 05 00      lea d, [bp + 5] ; $num
2203   11E1 DA            push d
2204   11E2 FA 05 00      lea d, [bp + 5] ; $num
2205   11E5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2206   11E8 FD 39         mov c, b ; And place it into C
2207   11EA 2A            mov b, [d] ; Lower Word in B
2208   11EB             ; START FACTORS
2209   11EB D7            push a
2210   11EC 11            mov a, b
2211   11ED 26 0A 00      mov b, $a
2212   11F0 AE            div a, b
2213   11F1 27            mov b, a
2214   11F2 E4            pop a
2215   11F3             ; END FACTORS
2216   11F3 E7            pop d
2217   11F4 FD 43         mov [d], b
2218   11F6 28            mov b, c
2219   11F7 FD 44 02 00   mov [d + 2], b
2220   11FB             ;; i++; 
2221   11FB FA F5 FF      lea d, [bp + -11] ; $i
2222   11FE 2A            mov b, [d]
2223   11FF FD 77         inc b
2224   1201 FA F5 FF      lea d, [bp + -11] ; $i
2225   1204 FD 43         mov [d], b
2226   1206 FD 7D         dec b
2227   1208 0A 8E 11      jmp _while33_cond
2228   120B             _while33_exit:
2229   120B             ;; while (i > 0) { 
2230   120B             _while34_cond:
2231   120B FA F5 FF      lea d, [bp + -11] ; $i
2232   120E 2A            mov b, [d]
2233   120F             ; START RELATIONAL
2234   120F D7            push a
2235   1210 11            mov a, b
2236   1211 26 00 00      mov b, $0
2237   1214 B0            cmp a, b
2238   1215 FD 7F         sgt ; >
2239   1217 E4            pop a
2240   1218             ; END RELATIONAL
2241   1218 C0 00 00      cmp b, 0
2242   121B C6 44 12      je _while34_exit
2243   121E             _while34_block:
2244   121E             ;; i--; 
2245   121E FA F5 FF      lea d, [bp + -11] ; $i
2246   1221 2A            mov b, [d]
2247   1222 FD 7D         dec b
2248   1224 FA F5 FF      lea d, [bp + -11] ; $i
2249   1227 FD 43         mov [d], b
2250   1229 FD 77         inc b
2251   122B             ;; putchar(digits[i]); 
2252   122B FA F7 FF      lea d, [bp + -9] ; $digits
2253   122E D7            push a
2254   122F DA            push d
2255   1230 FA F5 FF      lea d, [bp + -11] ; $i
2256   1233 2A            mov b, [d]
2257   1234 E7            pop d
2258   1235 5A            add d, b
2259   1236 E4            pop a
2260   1237 32            mov bl, [d]
2261   1238 A7 00         mov bh, 0
2262   123A DD            push bl
2263   123B 07 14 15      call putchar
2264   123E 51 01 00      add sp, 1
2265   1241 0A 0B 12      jmp _while34_cond
2266   1244             _while34_exit:
2267   1244 F9            leave
2268   1245 09            ret
2269   1246             
2270   1246             print_unsigned_long:
2271   1246 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2272   1249             ;; char digits[10]; 
2273   1249 52 0A 00      sub sp, 10 ; digits
2274   124C             ;; int i; 
2275   124C 52 02 00      sub sp, 2 ; i
2276   124F             ;; i = 0; 
2277   124F FA F5 FF      lea d, [bp + -11] ; $i
2278   1252 DA            push d
2279   1253 26 00 00      mov b, $0
2280   1256 E7            pop d
2281   1257 FD 43         mov [d], b
2282   1259             ;; if(num == 0){ 
2283   1259             _if35_cond:
2284   1259 FA 05 00      lea d, [bp + 5] ; $num
2285   125C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2286   125F FD 39         mov c, b ; And place it into C
2287   1261 2A            mov b, [d] ; Lower Word in B
2288   1262             ; START RELATIONAL
2289   1262 D7            push a
2290   1263 FD D8         push g
2291   1265 11            mov a, b
2292   1266 FD 7A         mov g, c
2293   1268 26 00 00      mov b, $0
2294   126B 38 00 00      mov c, 0
2295   126E FD AF 00 00   cmp32 ga, cb
2295   1272 00 00 00 00 
2295   1276 00 00 00 00 
2295   127A 00 00 00 00 
2295   127E 00 00 00 00 
2295   1282 00 00 00 00 
2295   1286 00 00 00 00 
2295   128A 00 00 00 00 
2295   128E 00 00 00 00 
2295   1292 00 00 00 00 
2295   1296 00 00 00 00 
2295   129A 00 00 00 00 
2295   129E 00 00 00 00 
2295   12A2 00 00 00 00 
2295   12A6 00 00 00 00 
2295   12AA 00 00 00 00 
2295   12AE 00 00 00 00 
2295   12B2 00 00 00 00 
2295   12B6 00 00 00 00 
2295   12BA 00 00 00 00 
2295   12BE 00 00 00 00 
2295   12C2 00 00 00 00 
2295   12C6 00 00 00 00 
2295   12CA 00 00 00 00 
2295   12CE 00 00 00 00 
2295   12D2 00 00 00 00 
2295   12D6 00 00 00 00 
2295   12DA 00 00 00 00 
2295   12DE 00 00 00 00 
2295   12E2 00 00 00 00 
2295   12E6 00 00 00 00 
2295   12EA 00 00 00 00 
2295   12EE 00 00 00 00 
2295   12F2 00 00 00 00 
2295   12F6 00 00 00 00 
2295   12FA 00 00 00 00 
2295   12FE 00 00 00 00 
2295   1302 00 00 00 00 
2295   1306 00 00 00 00 
2295   130A 00 00 00 00 
2295   130E 00 00 00 00 
2295   1312 00 00 00 00 
2295   1316 00 00 00 00 
2295   131A 00 00 00 00 
2295   131E 00 00 00 00 
2295   1322 00 00 00 00 
2295   1326 00 00 00 00 
2295   132A 00 00 00 00 
2295   132E 00 00 00 00 
2295   1332 00 00 00 00 
2295   1336 00 00 00 00 
2295   133A 00 00 00 00 
2295   133E 00 00 00 00 
2295   1342 00 00 00 00 
2295   1346 00 00 00 00 
2295   134A 00 00 00 00 
2295   134E 00 00 00 00 
2295   1352 00 00 00 00 
2295   1356 00 00 00 00 
2295   135A 00 00 00 00 
2295   135E 00 00 00 00 
2295   1362 00 00 00 00 
2295   1366 00 00 00 00 
2295   136A 00 00 00 00 
2295   136E 00 
2296   136F FD 71         seq ; ==
2297   1371 FD F1         pop g
2298   1373 E4            pop a
2299   1374             ; END RELATIONAL
2300   1374 C0 00 00      cmp b, 0
2301   1377 C6 89 13      je _if35_exit
2302   137A             _if35_true:
2303   137A             ;; putchar('0'); 
2304   137A 26 30 00      mov b, $30
2305   137D DD            push bl
2306   137E 07 14 15      call putchar
2307   1381 51 01 00      add sp, 1
2308   1384             ;; return; 
2309   1384 F9            leave
2310   1385 09            ret
2311   1386 0A 89 13      jmp _if35_exit
2312   1389             _if35_exit:
2313   1389             ;; while (num > 0) { 
2314   1389             _while36_cond:
2315   1389 FA 05 00      lea d, [bp + 5] ; $num
2316   138C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2317   138F FD 39         mov c, b ; And place it into C
2318   1391 2A            mov b, [d] ; Lower Word in B
2319   1392             ; START RELATIONAL
2320   1392 D7            push a
2321   1393 FD D8         push g
2322   1395 11            mov a, b
2323   1396 FD 7A         mov g, c
2324   1398 26 00 00      mov b, $0
2325   139B 38 00 00      mov c, 0
2326   139E FD 81         sgu
2327   13A0 FD F1         pop g
2328   13A2 E4            pop a
2329   13A3             ; END RELATIONAL
2330   13A3 C0 00 00      cmp b, 0
2331   13A6 C6 06 14      je _while36_exit
2332   13A9             _while36_block:
2333   13A9             ;; digits[i] = '0' + (num % 10); 
2334   13A9 FA F7 FF      lea d, [bp + -9] ; $digits
2335   13AC D7            push a
2336   13AD DA            push d
2337   13AE FA F5 FF      lea d, [bp + -11] ; $i
2338   13B1 2A            mov b, [d]
2339   13B2 E7            pop d
2340   13B3 5A            add d, b
2341   13B4 E4            pop a
2342   13B5 DA            push d
2343   13B6 26 30 00      mov b, $30
2344   13B9             ; START TERMS
2345   13B9 D7            push a
2346   13BA 11            mov a, b
2347   13BB FA 05 00      lea d, [bp + 5] ; $num
2348   13BE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2349   13C1 FD 39         mov c, b ; And place it into C
2350   13C3 2A            mov b, [d] ; Lower Word in B
2351   13C4             ; START FACTORS
2352   13C4 D7            push a
2353   13C5 11            mov a, b
2354   13C6 26 0A 00      mov b, $a
2355   13C9 AE            div a, b ; 
2356   13CA 11            mov a, b
2357   13CB 27            mov b, a
2358   13CC E4            pop a
2359   13CD             ; END FACTORS
2360   13CD 54            add a, b
2361   13CE D7            push a
2362   13CF FD 12         mov a, g
2363   13D1 28            mov b, c
2364   13D2 5C            adc a, b
2365   13D3 39            mov c, a
2366   13D4 E5            pop b
2367   13D5 E4            pop a
2368   13D6             ; END TERMS
2369   13D6 E7            pop d
2370   13D7 FD 3E         mov [d], bl
2371   13D9             ;; num = num / 10; 
2372   13D9 FA 05 00      lea d, [bp + 5] ; $num
2373   13DC DA            push d
2374   13DD FA 05 00      lea d, [bp + 5] ; $num
2375   13E0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2376   13E3 FD 39         mov c, b ; And place it into C
2377   13E5 2A            mov b, [d] ; Lower Word in B
2378   13E6             ; START FACTORS
2379   13E6 D7            push a
2380   13E7 11            mov a, b
2381   13E8 26 0A 00      mov b, $a
2382   13EB AE            div a, b
2383   13EC 27            mov b, a
2384   13ED E4            pop a
2385   13EE             ; END FACTORS
2386   13EE E7            pop d
2387   13EF FD 43         mov [d], b
2388   13F1 28            mov b, c
2389   13F2 FD 44 02 00   mov [d + 2], b
2390   13F6             ;; i++; 
2391   13F6 FA F5 FF      lea d, [bp + -11] ; $i
2392   13F9 2A            mov b, [d]
2393   13FA FD 77         inc b
2394   13FC FA F5 FF      lea d, [bp + -11] ; $i
2395   13FF FD 43         mov [d], b
2396   1401 FD 7D         dec b
2397   1403 0A 89 13      jmp _while36_cond
2398   1406             _while36_exit:
2399   1406             ;; while (i > 0) { 
2400   1406             _while37_cond:
2401   1406 FA F5 FF      lea d, [bp + -11] ; $i
2402   1409 2A            mov b, [d]
2403   140A             ; START RELATIONAL
2404   140A D7            push a
2405   140B 11            mov a, b
2406   140C 26 00 00      mov b, $0
2407   140F B0            cmp a, b
2408   1410 FD 7F         sgt ; >
2409   1412 E4            pop a
2410   1413             ; END RELATIONAL
2411   1413 C0 00 00      cmp b, 0
2412   1416 C6 3F 14      je _while37_exit
2413   1419             _while37_block:
2414   1419             ;; i--; 
2415   1419 FA F5 FF      lea d, [bp + -11] ; $i
2416   141C 2A            mov b, [d]
2417   141D FD 7D         dec b
2418   141F FA F5 FF      lea d, [bp + -11] ; $i
2419   1422 FD 43         mov [d], b
2420   1424 FD 77         inc b
2421   1426             ;; putchar(digits[i]); 
2422   1426 FA F7 FF      lea d, [bp + -9] ; $digits
2423   1429 D7            push a
2424   142A DA            push d
2425   142B FA F5 FF      lea d, [bp + -11] ; $i
2426   142E 2A            mov b, [d]
2427   142F E7            pop d
2428   1430 5A            add d, b
2429   1431 E4            pop a
2430   1432 32            mov bl, [d]
2431   1433 A7 00         mov bh, 0
2432   1435 DD            push bl
2433   1436 07 14 15      call putchar
2434   1439 51 01 00      add sp, 1
2435   143C 0A 06 14      jmp _while37_cond
2436   143F             _while37_exit:
2437   143F F9            leave
2438   1440 09            ret
2439   1441             
2440   1441             print_unsigned:
2441   1441 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2442   1444             ;; char digits[5]; 
2443   1444 52 05 00      sub sp, 5 ; digits
2444   1447             ;; int i; 
2445   1447 52 02 00      sub sp, 2 ; i
2446   144A             ;; i = 0; 
2447   144A FA FA FF      lea d, [bp + -6] ; $i
2448   144D DA            push d
2449   144E 26 00 00      mov b, $0
2450   1451 E7            pop d
2451   1452 FD 43         mov [d], b
2452   1454             ;; if(num == 0){ 
2453   1454             _if38_cond:
2454   1454 FA 05 00      lea d, [bp + 5] ; $num
2455   1457 2A            mov b, [d]
2456   1458             ; START RELATIONAL
2457   1458 D7            push a
2458   1459 11            mov a, b
2459   145A 26 00 00      mov b, $0
2460   145D B0            cmp a, b
2461   145E FD 71         seq ; ==
2462   1460 E4            pop a
2463   1461             ; END RELATIONAL
2464   1461 C0 00 00      cmp b, 0
2465   1464 C6 76 14      je _if38_exit
2466   1467             _if38_true:
2467   1467             ;; putchar('0'); 
2468   1467 26 30 00      mov b, $30
2469   146A DD            push bl
2470   146B 07 14 15      call putchar
2471   146E 51 01 00      add sp, 1
2472   1471             ;; return; 
2473   1471 F9            leave
2474   1472 09            ret
2475   1473 0A 76 14      jmp _if38_exit
2476   1476             _if38_exit:
2477   1476             ;; while (num > 0) { 
2478   1476             _while39_cond:
2479   1476 FA 05 00      lea d, [bp + 5] ; $num
2480   1479 2A            mov b, [d]
2481   147A             ; START RELATIONAL
2482   147A D7            push a
2483   147B 11            mov a, b
2484   147C 26 00 00      mov b, $0
2485   147F B0            cmp a, b
2486   1480 FD 81         sgu ; > (unsigned)
2487   1482 E4            pop a
2488   1483             ; END RELATIONAL
2489   1483 C0 00 00      cmp b, 0
2490   1486 C6 D0 14      je _while39_exit
2491   1489             _while39_block:
2492   1489             ;; digits[i] = '0' + (num % 10); 
2493   1489 FA FC FF      lea d, [bp + -4] ; $digits
2494   148C D7            push a
2495   148D DA            push d
2496   148E FA FA FF      lea d, [bp + -6] ; $i
2497   1491 2A            mov b, [d]
2498   1492 E7            pop d
2499   1493 5A            add d, b
2500   1494 E4            pop a
2501   1495 DA            push d
2502   1496 26 30 00      mov b, $30
2503   1499             ; START TERMS
2504   1499 D7            push a
2505   149A 11            mov a, b
2506   149B FA 05 00      lea d, [bp + 5] ; $num
2507   149E 2A            mov b, [d]
2508   149F             ; START FACTORS
2509   149F D7            push a
2510   14A0 11            mov a, b
2511   14A1 26 0A 00      mov b, $a
2512   14A4 AE            div a, b ; 
2513   14A5 11            mov a, b
2514   14A6 27            mov b, a
2515   14A7 E4            pop a
2516   14A8             ; END FACTORS
2517   14A8 56            add b, a
2518   14A9 E4            pop a
2519   14AA             ; END TERMS
2520   14AA E7            pop d
2521   14AB FD 3E         mov [d], bl
2522   14AD             ;; num = num / 10; 
2523   14AD FA 05 00      lea d, [bp + 5] ; $num
2524   14B0 DA            push d
2525   14B1 FA 05 00      lea d, [bp + 5] ; $num
2526   14B4 2A            mov b, [d]
2527   14B5             ; START FACTORS
2528   14B5 D7            push a
2529   14B6 11            mov a, b
2530   14B7 26 0A 00      mov b, $a
2531   14BA AE            div a, b
2532   14BB 27            mov b, a
2533   14BC E4            pop a
2534   14BD             ; END FACTORS
2535   14BD E7            pop d
2536   14BE FD 43         mov [d], b
2537   14C0             ;; i++; 
2538   14C0 FA FA FF      lea d, [bp + -6] ; $i
2539   14C3 2A            mov b, [d]
2540   14C4 FD 77         inc b
2541   14C6 FA FA FF      lea d, [bp + -6] ; $i
2542   14C9 FD 43         mov [d], b
2543   14CB FD 7D         dec b
2544   14CD 0A 76 14      jmp _while39_cond
2545   14D0             _while39_exit:
2546   14D0             ;; while (i > 0) { 
2547   14D0             _while40_cond:
2548   14D0 FA FA FF      lea d, [bp + -6] ; $i
2549   14D3 2A            mov b, [d]
2550   14D4             ; START RELATIONAL
2551   14D4 D7            push a
2552   14D5 11            mov a, b
2553   14D6 26 00 00      mov b, $0
2554   14D9 B0            cmp a, b
2555   14DA FD 7F         sgt ; >
2556   14DC E4            pop a
2557   14DD             ; END RELATIONAL
2558   14DD C0 00 00      cmp b, 0
2559   14E0 C6 09 15      je _while40_exit
2560   14E3             _while40_block:
2561   14E3             ;; i--; 
2562   14E3 FA FA FF      lea d, [bp + -6] ; $i
2563   14E6 2A            mov b, [d]
2564   14E7 FD 7D         dec b
2565   14E9 FA FA FF      lea d, [bp + -6] ; $i
2566   14EC FD 43         mov [d], b
2567   14EE FD 77         inc b
2568   14F0             ;; putchar(digits[i]); 
2569   14F0 FA FC FF      lea d, [bp + -4] ; $digits
2570   14F3 D7            push a
2571   14F4 DA            push d
2572   14F5 FA FA FF      lea d, [bp + -6] ; $i
2573   14F8 2A            mov b, [d]
2574   14F9 E7            pop d
2575   14FA 5A            add d, b
2576   14FB E4            pop a
2577   14FC 32            mov bl, [d]
2578   14FD A7 00         mov bh, 0
2579   14FF DD            push bl
2580   1500 07 14 15      call putchar
2581   1503 51 01 00      add sp, 1
2582   1506 0A D0 14      jmp _while40_cond
2583   1509             _while40_exit:
2584   1509 F9            leave
2585   150A 09            ret
2586   150B             
2587   150B             date:
2588   150B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2589   150E             
2590   150E             ; --- BEGIN INLINE ASM BLOCK
2591   150E 19 00         mov al, 0 
2592   1510 05 07         syscall sys_datetime
2593   1512             ; --- END INLINE ASM BLOCK
2594   1512             
2595   1512 F9            leave
2596   1513 09            ret
2597   1514             
2598   1514             putchar:
2599   1514 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2600   1517             
2601   1517             ; --- BEGIN INLINE ASM BLOCK
2602   1517 FA 05 00      lea d, [bp + 5] ; $c
2603   151A 1E            mov al, [d]
2604   151B 23            mov ah, al
2605   151C 07 A5 16      call _putchar
2606   151F             ; --- END INLINE ASM BLOCK
2607   151F             
2608   151F F9            leave
2609   1520 09            ret
2610   1521             
2611   1521             getchar:
2612   1521 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2613   1524             ;; char c; 
2614   1524 52 01 00      sub sp, 1 ; c
2615   1527             
2616   1527             ; --- BEGIN INLINE ASM BLOCK
2617   1527 07 9E 16      call getch
2618   152A 1A            mov al, ah
2619   152B FA 00 00      lea d, [bp + 0] ; $c
2620   152E 3E            mov [d], al
2621   152F             ; --- END INLINE ASM BLOCK
2622   152F             
2623   152F             ;; return c; 
2624   152F FA 00 00      lea d, [bp + 0] ; $c
2625   1532 32            mov bl, [d]
2626   1533 A7 00         mov bh, 0
2627   1535 F9            leave
2628   1536 09            ret
2629   1537             
2630   1537             scann:
2631   1537 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2632   153A             ;; int m; 
2633   153A 52 02 00      sub sp, 2 ; m
2634   153D             
2635   153D             ; --- BEGIN INLINE ASM BLOCK
2636   153D 07 E9 18      call scan_u16d
2637   1540 FA FF FF      lea d, [bp + -1] ; $m
2638   1543 43            mov [d], a
2639   1544             ; --- END INLINE ASM BLOCK
2640   1544             
2641   1544             ;; return m; 
2642   1544 FA FF FF      lea d, [bp + -1] ; $m
2643   1547 2A            mov b, [d]
2644   1548 F9            leave
2645   1549 09            ret
2646   154A             
2647   154A             puts:
2648   154A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2649   154D             
2650   154D             ; --- BEGIN INLINE ASM BLOCK
2651   154D FA 05 00      lea d, [bp + 5] ; $s
2652   1550 15            mov a, [d]
2653   1551 3C            mov d, a
2654   1552 07 EF 17      call _puts
2655   1555 10 00 0A      mov a, $0A00
2656   1558 05 03         syscall sys_io
2657   155A             ; --- END INLINE ASM BLOCK
2658   155A             
2659   155A F9            leave
2660   155B 09            ret
2661   155C             
2662   155C             print:
2663   155C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2664   155F             
2665   155F             ; --- BEGIN INLINE ASM BLOCK
2666   155F FA 05 00      lea d, [bp + 5] ; $s
2667   1562 FD 2A         mov d, [d]
2668   1564 07 EF 17      call _puts
2669   1567             ; --- END INLINE ASM BLOCK
2670   1567             
2671   1567 F9            leave
2672   1568 09            ret
2673   1569             
2674   1569             getparam:
2675   1569 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2676   156C             ;; char data; 
2677   156C 52 01 00      sub sp, 1 ; data
2678   156F             
2679   156F             ; --- BEGIN INLINE ASM BLOCK
2680   156F 19 04         mov al, 4
2681   1571 FA 05 00      lea d, [bp + 5] ; $address
2682   1574 FD 2A         mov d, [d]
2683   1576 05 0C         syscall sys_system
2684   1578 FA 00 00      lea d, [bp + 0] ; $data
2685   157B FD 3E         mov [d], bl
2686   157D             ; --- END INLINE ASM BLOCK
2687   157D             
2688   157D             ;; return data; 
2689   157D FA 00 00      lea d, [bp + 0] ; $data
2690   1580 32            mov bl, [d]
2691   1581 A7 00         mov bh, 0
2692   1583 F9            leave
2693   1584 09            ret
2694   1585             
2695   1585             clear:
2696   1585 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2697   1588             ;; print("\033[2J\033[H"); 
2698   1588 26 FB 65      mov b, _s32 ; "\033[2J\033[H"
2699   158B FD AB         swp b
2700   158D D8            push b
2701   158E 07 5C 15      call print
2702   1591 51 02 00      add sp, 2
2703   1594 F9            leave
2704   1595 09            ret
2705   1596             
2706   1596             abs:
2707   1596 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2708   1599             ;; return i < 0 ? -i : i; 
2709   1599             _ternary41_cond:
2710   1599 FA 05 00      lea d, [bp + 5] ; $i
2711   159C 2A            mov b, [d]
2712   159D             ; START RELATIONAL
2713   159D D7            push a
2714   159E 11            mov a, b
2715   159F 26 00 00      mov b, $0
2716   15A2 B0            cmp a, b
2717   15A3 FD 73         slt ; < (signed)
2718   15A5 E4            pop a
2719   15A6             ; END RELATIONAL
2720   15A6 C0 00 00      cmp b, 0
2721   15A9 C6 B5 15      je _ternary41_false
2722   15AC             _ternary41_true:
2723   15AC FA 05 00      lea d, [bp + 5] ; $i
2724   15AF 2A            mov b, [d]
2725   15B0 FD 97         neg b
2726   15B2 0A B9 15      jmp _ternary41_exit
2727   15B5             _ternary41_false:
2728   15B5 FA 05 00      lea d, [bp + 5] ; $i
2729   15B8 2A            mov b, [d]
2730   15B9             _ternary41_exit:
2731   15B9 F9            leave
2732   15BA 09            ret
2733   15BB             
2734   15BB             include_stdio_asm:
2735   15BB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2736   15BE             
2737   15BE             ; --- BEGIN INLINE ASM BLOCK
2738   15BE             .include "lib/asm/stdio.asm"
0001+  15BE             ;-----------------------------------------------------------------------------
0002+  15BE             ; stdio.s
0003+  15BE             ;-----------------------------------------------------------------------------
0004+  15BE             .include "lib/asm/string.asm"
0001++ 15BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 15BE             ; string.s
0003++ 15BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 15BE             
0005++ 15BE             
0006++ 15BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 15BE             ; _strrev
0008++ 15BE             ; reverse a string
0009++ 15BE             ; D = string address
0010++ 15BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 15BE             ; 01234
0012++ 15BE             _strrev:
0013++ 15BE 4B          	pusha
0014++ 15BF 07 05 16    	call _strlen	; length in C
0015++ 15C2 12          	mov a, c
0016++ 15C3 AF 01 00    	cmp a, 1
0017++ 15C6 D0 E0 15    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 15C9 7D          	dec a
0019++ 15CA FD 4E       	mov si, d	; beginning of string
0020++ 15CC FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 15CE 59          	add d, a	; end of string
0022++ 15CF 12          	mov a, c
0023++ 15D0 FD 9B       	shr a		; divide by 2
0024++ 15D2 39          	mov c, a	; C now counts the steps
0025++ 15D3             _strrev_L0:
0026++ 15D3 32          	mov bl, [d]	; save load right-side char into BL
0027++ 15D4 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 15D5 3E          	mov [d], al	; store left char into right side
0029++ 15D6 1B          	mov al, bl
0030++ 15D7 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 15D8 7E          	dec c
0032++ 15D9 7F          	dec d
0033++ 15DA C2 00 00    	cmp c, 0
0034++ 15DD C7 D3 15    	jne _strrev_L0
0035++ 15E0             _strrev_end:
0036++ 15E0 4C          	popa
0037++ 15E1 09          	ret
0038++ 15E2             	
0039++ 15E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 15E2             ; _strchr
0041++ 15E2             ; search string in D for char in AL
0042++ 15E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 15E2             _strchr:
0044++ 15E2             _strchr_L0:
0045++ 15E2 32          	mov bl, [d]
0046++ 15E3 C1 00       	cmp bl, 0
0047++ 15E5 C6 F0 15    	je _strchr_end
0048++ 15E8 BA          	cmp al, bl
0049++ 15E9 C6 F0 15    	je _strchr_end
0050++ 15EC 79          	inc d
0051++ 15ED 0A E2 15    	jmp _strchr_L0
0052++ 15F0             _strchr_end:
0053++ 15F0 1B          	mov al, bl
0054++ 15F1 09          	ret
0055++ 15F2             
0056++ 15F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 15F2             ; _strstr
0058++ 15F2             ; find sub-string
0059++ 15F2             ; str1 in SI
0060++ 15F2             ; str2 in DI
0061++ 15F2             ; SI points to end of source string
0062++ 15F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 15F2             _strstr:
0064++ 15F2 DB          	push al
0065++ 15F3 DA          	push d
0066++ 15F4 E3          	push di
0067++ 15F5             _strstr_loop:
0068++ 15F5 F3          	cmpsb					; compare a byte of the strings
0069++ 15F6 C7 01 16    	jne _strstr_ret
0070++ 15F9 FC 00 00    	lea d, [di + 0]
0071++ 15FC BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 15FE C7 F5 15    	jne _strstr_loop				; equal chars but not at end
0073++ 1601             _strstr_ret:
0074++ 1601 F0          	pop di
0075++ 1602 E7          	pop d
0076++ 1603 E8          	pop al
0077++ 1604 09          	ret
0078++ 1605             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1605             ; length of null terminated string
0080++ 1605             ; result in C
0081++ 1605             ; pointer in D
0082++ 1605             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1605             _strlen:
0084++ 1605 DA          	push d
0085++ 1606 38 00 00    	mov c, 0
0086++ 1609             _strlen_L1:
0087++ 1609 BD 00       	cmp byte [d], 0
0088++ 160B C6 13 16    	je _strlen_ret
0089++ 160E 79          	inc d
0090++ 160F 78          	inc c
0091++ 1610 0A 09 16    	jmp _strlen_L1
0092++ 1613             _strlen_ret:
0093++ 1613 E7          	pop d
0094++ 1614 09          	ret
0095++ 1615             
0096++ 1615             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1615             ; STRCMP
0098++ 1615             ; compare two strings
0099++ 1615             ; str1 in SI
0100++ 1615             ; str2 in DI
0101++ 1615             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1615             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1615             _strcmp:
0104++ 1615 DB          	push al
0105++ 1616 DA          	push d
0106++ 1617 E3          	push di
0107++ 1618 E2          	push si
0108++ 1619             _strcmp_loop:
0109++ 1619 F3          	cmpsb					; compare a byte of the strings
0110++ 161A C7 25 16    	jne _strcmp_ret
0111++ 161D FB FF FF    	lea d, [si +- 1]
0112++ 1620 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1622 C7 19 16    	jne _strcmp_loop				; equal chars but not at end
0114++ 1625             _strcmp_ret:
0115++ 1625 EF          	pop si
0116++ 1626 F0          	pop di
0117++ 1627 E7          	pop d
0118++ 1628 E8          	pop al
0119++ 1629 09          	ret
0120++ 162A             
0121++ 162A             
0122++ 162A             ; STRCPY
0123++ 162A             ; copy null terminated string from SI to DI
0124++ 162A             ; source in SI
0125++ 162A             ; destination in DI
0126++ 162A             _strcpy:
0127++ 162A E2          	push si
0128++ 162B E3          	push di
0129++ 162C DB          	push al
0130++ 162D             _strcpy_L1:
0131++ 162D F6          	lodsb
0132++ 162E F7          	stosb
0133++ 162F B9 00       	cmp al, 0
0134++ 1631 C7 2D 16    	jne _strcpy_L1
0135++ 1634             _strcpy_end:
0136++ 1634 E8          	pop al
0137++ 1635 F0          	pop di
0138++ 1636 EF          	pop si
0139++ 1637 09          	ret
0140++ 1638             
0141++ 1638             ; STRCAT
0142++ 1638             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1638             ; source in SI
0144++ 1638             ; destination in DI
0145++ 1638             _strcat:
0146++ 1638 E2          	push si
0147++ 1639 E3          	push di
0148++ 163A D7          	push a
0149++ 163B DA          	push d
0150++ 163C 50          	mov a, di
0151++ 163D 3C          	mov d, a
0152++ 163E             _strcat_goto_end_L1:
0153++ 163E BD 00       	cmp byte[d], 0
0154++ 1640 C6 47 16    	je _strcat_start
0155++ 1643 79          	inc d
0156++ 1644 0A 3E 16    	jmp _strcat_goto_end_L1
0157++ 1647             _strcat_start:
0158++ 1647 FD 50       	mov di, d
0159++ 1649             _strcat_L1:
0160++ 1649 F6          	lodsb
0161++ 164A F7          	stosb
0162++ 164B B9 00       	cmp al, 0
0163++ 164D C7 49 16    	jne _strcat_L1
0164++ 1650             _strcat_end:
0165++ 1650 E7          	pop d
0166++ 1651 E4          	pop a
0167++ 1652 F0          	pop di
0168++ 1653 EF          	pop si
0169++ 1654 09          	ret
0170++ 1655             
0171++ 1655             
0005+  1655             
0006+  1655             ;-----------------------------------------------------------------------------
0007+  1655             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1655             ; ASCII in BL
0009+  1655             ; result in AL
0010+  1655             ; ascii for F = 0100 0110
0011+  1655             ; ascii for 9 = 0011 1001
0012+  1655             ;-----------------------------------------------------------------------------
0013+  1655             hex_ascii_encode:
0014+  1655 1B            mov al, bl
0015+  1656 93 40         test al, $40        ; test if letter or number
0016+  1658 C7 5E 16      jnz hex_letter
0017+  165B 87 0F         and al, $0F        ; get number
0018+  165D 09            ret
0019+  165E             hex_letter:
0020+  165E 87 0F         and al, $0F        ; get letter
0021+  1660 6A 09         add al, 9
0022+  1662 09            ret
0023+  1663             
0024+  1663             ;-----------------------------------------------------------------------------
0025+  1663             ; ATOI
0026+  1663             ; 2 letter hex string in B
0027+  1663             ; 8bit integer returned in AL
0028+  1663             ;-----------------------------------------------------------------------------
0029+  1663             _atoi:
0030+  1663 D8            push b
0031+  1664 07 55 16      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1667 30            mov bl, bh
0033+  1668 DB            push al          ; save a
0034+  1669 07 55 16      call hex_ascii_encode
0035+  166C EA            pop bl  
0036+  166D FD 9E 04      shl al, 4
0037+  1670 8C            or al, bl
0038+  1671 E5            pop b
0039+  1672 09            ret  
0040+  1673             
0041+  1673             
0042+  1673             ;-----------------------------------------------------------------------------
0043+  1673             ; ITOA
0044+  1673             ; 8bit value in BL
0045+  1673             ; 2 byte ASCII result in A
0046+  1673             ;-----------------------------------------------------------------------------
0047+  1673             _itoa:
0048+  1673 DA            push d
0049+  1674 D8            push b
0050+  1675 A7 00         mov bh, 0
0051+  1677 FD A4 04      shr bl, 4  
0052+  167A 74            mov d, b
0053+  167B 1F 23 19      mov al, [d + s_hex_digits]
0054+  167E 23            mov ah, al
0055+  167F               
0056+  167F E5            pop b
0057+  1680 D8            push b
0058+  1681 A7 00         mov bh, 0
0059+  1683 FD 87 0F      and bl, $0F
0060+  1686 74            mov d, b
0061+  1687 1F 23 19      mov al, [d + s_hex_digits]
0062+  168A E5            pop b
0063+  168B E7            pop d
0064+  168C 09            ret
0065+  168D             
0066+  168D             ;-----------------------------------------------------------------------------
0067+  168D             ; HEX STRING TO BINARY
0068+  168D             ; di = destination address
0069+  168D             ; si = source
0070+  168D             ;-----------------------------------------------------------------------------
0071+  168D             _hex_to_int:
0072+  168D             _hex_to_int_L1:
0073+  168D F6            lodsb          ; load from [SI] to AL
0074+  168E B9 00         cmp al, 0        ; check if ASCII 0
0075+  1690 C6 9D 16      jz _hex_to_int_ret
0076+  1693 36            mov bh, al
0077+  1694 F6            lodsb
0078+  1695 2F            mov bl, al
0079+  1696 07 63 16      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1699 F7            stosb          ; store AL to [DI]
0081+  169A 0A 8D 16      jmp _hex_to_int_L1
0082+  169D             _hex_to_int_ret:
0083+  169D 09            ret    
0084+  169E             
0085+  169E             ;-----------------------------------------------------------------------------
0086+  169E             ; GETCHAR
0087+  169E             ; char in ah
0088+  169E             ;-----------------------------------------------------------------------------
0089+  169E             getch:
0090+  169E DB            push al
0091+  169F             getch_retry:
0092+  169F 19 01         mov al, 1
0093+  16A1 05 03         syscall sys_io      ; receive in AH
0094+  16A3 E8            pop al
0095+  16A4 09            ret
0096+  16A5             
0097+  16A5             ;-----------------------------------------------------------------------------
0098+  16A5             ; PUTCHAR
0099+  16A5             ; char in ah
0100+  16A5             ;-----------------------------------------------------------------------------
0101+  16A5             _putchar:
0102+  16A5 D7            push a
0103+  16A6 19 00         mov al, 0
0104+  16A8 05 03         syscall sys_io      ; char in AH
0105+  16AA E4            pop a
0106+  16AB 09            ret
0107+  16AC             
0108+  16AC             ;-----------------------------------------------------------------------------
0109+  16AC             ;; INPUT A STRING
0110+  16AC             ;; terminates with null
0111+  16AC             ;; pointer in D
0112+  16AC             ;-----------------------------------------------------------------------------
0113+  16AC             _gets:
0114+  16AC D7            push a
0115+  16AD DA            push d
0116+  16AE             _gets_loop:
0117+  16AE 19 01         mov al, 1
0118+  16B0 05 03         syscall sys_io      ; receive in AH
0119+  16B2 B9 00         cmp al, 0        ; check error code (AL)
0120+  16B4 C6 AE 16      je _gets_loop      ; if no char received, retry
0121+  16B7             
0122+  16B7 76 1B         cmp ah, 27
0123+  16B9 C6 DA 16      je _gets_ansi_esc
0124+  16BC 76 0A         cmp ah, $0A        ; LF
0125+  16BE C6 45 17      je _gets_end
0126+  16C1 76 0D         cmp ah, $0D        ; CR
0127+  16C3 C6 45 17      je _gets_end
0128+  16C6 76 5C         cmp ah, $5C        ; '\\'
0129+  16C8 C6 06 17      je _gets_escape
0130+  16CB               
0131+  16CB 76 08         cmp ah, $08      ; check for backspace
0132+  16CD C6 D6 16      je _gets_backspace
0133+  16D0             
0134+  16D0 1A            mov al, ah
0135+  16D1 3E            mov [d], al
0136+  16D2 79            inc d
0137+  16D3 0A AE 16      jmp _gets_loop
0138+  16D6             _gets_backspace:
0139+  16D6 7F            dec d
0140+  16D7 0A AE 16      jmp _gets_loop
0141+  16DA             _gets_ansi_esc:
0142+  16DA 19 01         mov al, 1
0143+  16DC 05 03         syscall sys_io        ; receive in AH without echo
0144+  16DE B9 00         cmp al, 0          ; check error code (AL)
0145+  16E0 C6 DA 16      je _gets_ansi_esc    ; if no char received, retry
0146+  16E3 76 5B         cmp ah, '['
0147+  16E5 C7 AE 16      jne _gets_loop
0148+  16E8             _gets_ansi_esc_2:
0149+  16E8 19 01         mov al, 1
0150+  16EA 05 03         syscall sys_io          ; receive in AH without echo
0151+  16EC B9 00         cmp al, 0            ; check error code (AL)
0152+  16EE C6 E8 16      je _gets_ansi_esc_2  ; if no char received, retry
0153+  16F1 76 44         cmp ah, 'D'
0154+  16F3 C6 FE 16      je _gets_left_arrow
0155+  16F6 76 43         cmp ah, 'C'
0156+  16F8 C6 02 17      je _gets_right_arrow
0157+  16FB 0A AE 16      jmp _gets_loop
0158+  16FE             _gets_left_arrow:
0159+  16FE 7F            dec d
0160+  16FF 0A AE 16      jmp _gets_loop
0161+  1702             _gets_right_arrow:
0162+  1702 79            inc d
0163+  1703 0A AE 16      jmp _gets_loop
0164+  1706             _gets_escape:
0165+  1706 19 01         mov al, 1
0166+  1708 05 03         syscall sys_io      ; receive in AH
0167+  170A B9 00         cmp al, 0        ; check error code (AL)
0168+  170C C6 06 17      je _gets_escape      ; if no char received, retry
0169+  170F 76 6E         cmp ah, 'n'
0170+  1711 C6 30 17      je _gets_LF
0171+  1714 76 72         cmp ah, 'r'
0172+  1716 C6 37 17      je _gets_CR
0173+  1719 76 30         cmp ah, '0'
0174+  171B C6 3E 17      je _gets_NULL
0175+  171E 76 5C         cmp ah, $5C  ; '\'
0176+  1720 C6 29 17      je _gets_slash
0177+  1723 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1724 3E            mov [d], al
0179+  1725 79            inc d
0180+  1726 0A AE 16      jmp _gets_loop
0181+  1729             _gets_slash:
0182+  1729 19 5C         mov al, $5C
0183+  172B 3E            mov [d], al
0184+  172C 79            inc d
0185+  172D 0A AE 16      jmp _gets_loop
0186+  1730             _gets_LF:
0187+  1730 19 0A         mov al, $0A
0188+  1732 3E            mov [d], al
0189+  1733 79            inc d
0190+  1734 0A AE 16      jmp _gets_loop
0191+  1737             _gets_CR:
0192+  1737 19 0D         mov al, $0D
0193+  1739 3E            mov [d], al
0194+  173A 79            inc d
0195+  173B 0A AE 16      jmp _gets_loop
0196+  173E             _gets_NULL:
0197+  173E 19 00         mov al, $00
0198+  1740 3E            mov [d], al
0199+  1741 79            inc d
0200+  1742 0A AE 16      jmp _gets_loop
0201+  1745             _gets_end:
0202+  1745 19 00         mov al, 0
0203+  1747 3E            mov [d], al        ; terminate string
0204+  1748 E7            pop d
0205+  1749 E4            pop a
0206+  174A 09            ret
0207+  174B             
0208+  174B             ;-----------------------------------------------------------------------------
0209+  174B             ;; INPUT TEXT
0210+  174B             ;; terminated with CTRL+D
0211+  174B             ;; pointer in D
0212+  174B             ;-----------------------------------------------------------------------------
0213+  174B             _gettxt:
0214+  174B D7            push a
0215+  174C DA            push d
0216+  174D             _gettxt_loop:
0217+  174D 19 01         mov al, 1
0218+  174F 05 03         syscall sys_io      ; receive in AH
0219+  1751 B9 00         cmp al, 0        ; check error code (AL)
0220+  1753 C6 4D 17      je _gettxt_loop    ; if no char received, retry
0221+  1756 76 04         cmp ah, 4      ; EOT
0222+  1758 C6 96 17      je _gettxt_end
0223+  175B 76 08         cmp ah, $08      ; check for backspace
0224+  175D C6 92 17      je _gettxt_backspace
0225+  1760 76 5C         cmp ah, $5C        ; '\'
0226+  1762 C6 6B 17      je _gettxt_escape
0227+  1765 1A            mov al, ah
0228+  1766 3E            mov [d], al
0229+  1767 79            inc d
0230+  1768 0A 4D 17      jmp _gettxt_loop
0231+  176B             _gettxt_escape:
0232+  176B 19 01         mov al, 1
0233+  176D 05 03         syscall sys_io      ; receive in AH
0234+  176F B9 00         cmp al, 0        ; check error code (AL)
0235+  1771 C6 6B 17      je _gettxt_escape    ; if no char received, retry
0236+  1774 76 6E         cmp ah, 'n'
0237+  1776 C6 84 17      je _gettxt_LF
0238+  1779 76 72         cmp ah, 'r'
0239+  177B C6 8B 17      je _gettxt_CR
0240+  177E 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  177F 3E            mov [d], al
0242+  1780 79            inc d
0243+  1781 0A 4D 17      jmp _gettxt_loop
0244+  1784             _gettxt_LF:
0245+  1784 19 0A         mov al, $0A
0246+  1786 3E            mov [d], al
0247+  1787 79            inc d
0248+  1788 0A 4D 17      jmp _gettxt_loop
0249+  178B             _gettxt_CR:
0250+  178B 19 0D         mov al, $0D
0251+  178D 3E            mov [d], al
0252+  178E 79            inc d
0253+  178F 0A 4D 17      jmp _gettxt_loop
0254+  1792             _gettxt_backspace:
0255+  1792 7F            dec d
0256+  1793 0A 4D 17      jmp _gettxt_loop
0257+  1796             _gettxt_end:
0258+  1796 19 00         mov al, 0
0259+  1798 3E            mov [d], al        ; terminate string
0260+  1799 E7            pop d
0261+  179A E4            pop a
0262+  179B 09            ret
0263+  179C             
0264+  179C             ;-----------------------------------------------------------------------------
0265+  179C             ; PRINT NEW LINE
0266+  179C             ;-----------------------------------------------------------------------------
0267+  179C             printnl:
0268+  179C D7            push a
0269+  179D 10 00 0A      mov a, $0A00
0270+  17A0 05 03         syscall sys_io
0271+  17A2 10 00 0D      mov a, $0D00
0272+  17A5 05 03         syscall sys_io
0273+  17A7 E4            pop a
0274+  17A8 09            ret
0275+  17A9             
0276+  17A9             ;-----------------------------------------------------------------------------
0277+  17A9             ; _strtoint
0278+  17A9             ; 4 digit hex string number in d
0279+  17A9             ; integer returned in A
0280+  17A9             ;-----------------------------------------------------------------------------
0281+  17A9             _strtointx:
0282+  17A9 D8            push b
0283+  17AA 32            mov bl, [d]
0284+  17AB 37            mov bh, bl
0285+  17AC 33 01 00      mov bl, [d + 1]
0286+  17AF 07 63 16      call _atoi        ; convert to int in AL
0287+  17B2 23            mov ah, al        ; move to AH
0288+  17B3 33 02 00      mov bl, [d + 2]
0289+  17B6 37            mov bh, bl
0290+  17B7 33 03 00      mov bl, [d + 3]
0291+  17BA 07 63 16      call _atoi        ; convert to int in AL
0292+  17BD E5            pop b
0293+  17BE 09            ret
0294+  17BF             
0295+  17BF             ;-----------------------------------------------------------------------------
0296+  17BF             ; _strtoint
0297+  17BF             ; 5 digit base10 string number in d
0298+  17BF             ; integer returned in A
0299+  17BF             ;-----------------------------------------------------------------------------
0300+  17BF             _strtoint:
0301+  17BF E2            push si
0302+  17C0 D8            push b
0303+  17C1 D9            push c
0304+  17C2 DA            push d
0305+  17C3 07 05 16      call _strlen      ; get string length in C
0306+  17C6 7E            dec c
0307+  17C7 FD 4E         mov si, d
0308+  17C9 12            mov a, c
0309+  17CA FD 99         shl a
0310+  17CC 3B 3B 19      mov d, table_power
0311+  17CF 59            add d, a
0312+  17D0 38 00 00      mov c, 0
0313+  17D3             _strtoint_L0:
0314+  17D3 F6            lodsb      ; load ASCII to al
0315+  17D4 B9 00         cmp al, 0
0316+  17D6 C6 E9 17      je _strtoint_end
0317+  17D9 6F 30         sub al, $30    ; make into integer
0318+  17DB 22 00         mov ah, 0
0319+  17DD 2A            mov b, [d]
0320+  17DE AC            mul a, b      ; result in B since it fits in 16bits
0321+  17DF 11            mov a, b
0322+  17E0 28            mov b, c
0323+  17E1 54            add a, b
0324+  17E2 39            mov c, a
0325+  17E3 63 02 00      sub d, 2
0326+  17E6 0A D3 17      jmp _strtoint_L0
0327+  17E9             _strtoint_end:
0328+  17E9 12            mov a, c
0329+  17EA E7            pop d
0330+  17EB E6            pop c
0331+  17EC E5            pop b
0332+  17ED EF            pop si
0333+  17EE 09            ret
0334+  17EF             
0335+  17EF             ;-----------------------------------------------------------------------------
0336+  17EF             ; PRINT NULL TERMINATED STRING
0337+  17EF             ; pointer in D
0338+  17EF             ;-----------------------------------------------------------------------------
0339+  17EF             _puts:
0340+  17EF D7            push a
0341+  17F0 DA            push d
0342+  17F1             _puts_L1:
0343+  17F1 1E            mov al, [d]
0344+  17F2 B9 00         cmp al, 0
0345+  17F4 C6 00 18      jz _puts_END
0346+  17F7 23            mov ah, al
0347+  17F8 19 00         mov al, 0
0348+  17FA 05 03         syscall sys_io
0349+  17FC 79            inc d
0350+  17FD 0A F1 17      jmp _puts_L1
0351+  1800             _puts_END:
0352+  1800 E7            pop d
0353+  1801 E4            pop a
0354+  1802 09            ret
0355+  1803             
0356+  1803             ;-----------------------------------------------------------------------------
0357+  1803             ; PRINT N SIZE STRING
0358+  1803             ; pointer in D
0359+  1803             ; size in C
0360+  1803             ;-----------------------------------------------------------------------------
0361+  1803             _putsn:
0362+  1803 DB            push al
0363+  1804 DA            push d
0364+  1805 D9            push c
0365+  1806             _putsn_L0:
0366+  1806 1E            mov al, [d]
0367+  1807 23            mov ah, al
0368+  1808 19 00         mov al, 0
0369+  180A 05 03         syscall sys_io
0370+  180C 79            inc d
0371+  180D 7E            dec c  
0372+  180E C2 00 00      cmp c, 0
0373+  1811 C7 06 18      jne _putsn_L0
0374+  1814             _putsn_end:
0375+  1814 E6            pop c
0376+  1815 E7            pop d
0377+  1816 E8            pop al
0378+  1817 09            ret
0379+  1818             
0380+  1818             ;-----------------------------------------------------------------------------
0381+  1818             ; print 16bit decimal number
0382+  1818             ; input number in A
0383+  1818             ;-----------------------------------------------------------------------------
0384+  1818             print_u16d:
0385+  1818 D7            push a
0386+  1819 D8            push b
0387+  181A 26 10 27      mov b, 10000
0388+  181D AE            div a, b      ; get 10000's coeff.
0389+  181E 07 40 18      call print_number
0390+  1821 11            mov a, b
0391+  1822 26 E8 03      mov b, 1000
0392+  1825 AE            div a, b      ; get 1000's coeff.
0393+  1826 07 40 18      call print_number
0394+  1829 11            mov a, b
0395+  182A 26 64 00      mov b, 100
0396+  182D AE            div a, b
0397+  182E 07 40 18      call print_number
0398+  1831 11            mov a, b
0399+  1832 26 0A 00      mov b, 10
0400+  1835 AE            div a, b
0401+  1836 07 40 18      call print_number
0402+  1839 1B            mov al, bl      ; 1's coeff in bl
0403+  183A 07 40 18      call print_number
0404+  183D E5            pop b
0405+  183E E4            pop a
0406+  183F 09            ret
0407+  1840             
0408+  1840             ;-----------------------------------------------------------------------------
0409+  1840             ; print AL
0410+  1840             ;-----------------------------------------------------------------------------
0411+  1840             print_number:
0412+  1840 6A 30         add al, $30
0413+  1842 23            mov ah, al
0414+  1843 07 A5 16      call _putchar
0415+  1846 09            ret
0416+  1847             
0417+  1847             ;-----------------------------------------------------------------------------
0418+  1847             ; PRINT 16BIT HEX INTEGER
0419+  1847             ; integer value in reg B
0420+  1847             ;-----------------------------------------------------------------------------
0421+  1847             print_u16x:
0422+  1847 D7            push a
0423+  1848 D8            push b
0424+  1849 DD            push bl
0425+  184A 30            mov bl, bh
0426+  184B 07 73 16      call _itoa        ; convert bh to char in A
0427+  184E 2F            mov bl, al        ; save al
0428+  184F 19 00         mov al, 0
0429+  1851 05 03         syscall sys_io        ; display AH
0430+  1853 24            mov ah, bl        ; retrieve al
0431+  1854 19 00         mov al, 0
0432+  1856 05 03         syscall sys_io        ; display AL
0433+  1858             
0434+  1858 EA            pop bl
0435+  1859 07 73 16      call _itoa        ; convert bh to char in A
0436+  185C 2F            mov bl, al        ; save al
0437+  185D 19 00         mov al, 0
0438+  185F 05 03         syscall sys_io        ; display AH
0439+  1861 24            mov ah, bl        ; retrieve al
0440+  1862 19 00         mov al, 0
0441+  1864 05 03         syscall sys_io        ; display AL
0442+  1866             
0443+  1866 E5            pop b
0444+  1867 E4            pop a
0445+  1868 09            ret
0446+  1869             
0447+  1869             ;-----------------------------------------------------------------------------
0448+  1869             ; INPUT 16BIT HEX INTEGER
0449+  1869             ; read 16bit integer into A
0450+  1869             ;-----------------------------------------------------------------------------
0451+  1869             scan_u16x:
0452+  1869 F8 10 00      enter 16
0453+  186C D8            push b
0454+  186D DA            push d
0455+  186E             
0456+  186E FA F1 FF      lea d, [bp + -15]
0457+  1871 07 AC 16      call _gets        ; get number
0458+  1874             
0459+  1874 32            mov bl, [d]
0460+  1875 37            mov bh, bl
0461+  1876 33 01 00      mov bl, [d + 1]
0462+  1879 07 63 16      call _atoi        ; convert to int in AL
0463+  187C 23            mov ah, al        ; move to AH
0464+  187D             
0465+  187D 33 02 00      mov bl, [d + 2]
0466+  1880 37            mov bh, bl
0467+  1881 33 03 00      mov bl, [d + 3]
0468+  1884 07 63 16      call _atoi        ; convert to int in AL
0469+  1887             
0470+  1887 E7            pop d
0471+  1888 E5            pop b
0472+  1889 F9            leave
0473+  188A 09            ret
0474+  188B             
0475+  188B             ;-----------------------------------------------------------------------------
0476+  188B             ; PRINT 8bit HEX INTEGER
0477+  188B             ; integer value in reg bl
0478+  188B             ;-----------------------------------------------------------------------------
0479+  188B             print_u8x:
0480+  188B D7            push a
0481+  188C DD            push bl
0482+  188D             
0483+  188D 07 73 16      call _itoa        ; convert bl to char in A
0484+  1890 2F            mov bl, al        ; save al
0485+  1891 19 00         mov al, 0
0486+  1893 05 03         syscall sys_io        ; display AH
0487+  1895 24            mov ah, bl        ; retrieve al
0488+  1896 19 00         mov al, 0
0489+  1898 05 03         syscall sys_io        ; display AL
0490+  189A             
0491+  189A EA            pop bl
0492+  189B E4            pop a
0493+  189C 09            ret
0494+  189D             
0495+  189D             ;-----------------------------------------------------------------------------
0496+  189D             ; print 8bit decimal unsigned number
0497+  189D             ; input number in AL
0498+  189D             ;-----------------------------------------------------------------------------
0499+  189D             print_u8d:
0500+  189D D7            push a
0501+  189E D8            push b
0502+  189F             
0503+  189F 22 00         mov ah, 0
0504+  18A1 26 64 00      mov b, 100
0505+  18A4 AE            div a, b
0506+  18A5 D8            push b      ; save remainder
0507+  18A6 B9 00         cmp al, 0
0508+  18A8 C6 B2 18      je skip100
0509+  18AB 6A 30         add al, $30
0510+  18AD 23            mov ah, al
0511+  18AE 19 00         mov al, 0
0512+  18B0 05 03         syscall sys_io  ; print coeff
0513+  18B2             skip100:
0514+  18B2 E4            pop a
0515+  18B3 22 00         mov ah, 0
0516+  18B5 26 0A 00      mov b, 10
0517+  18B8 AE            div a, b
0518+  18B9 D8            push b      ; save remainder
0519+  18BA B9 00         cmp al, 0
0520+  18BC C6 C6 18      je skip10
0521+  18BF 6A 30         add al, $30
0522+  18C1 23            mov ah, al
0523+  18C2 19 00         mov al, 0
0524+  18C4 05 03         syscall sys_io  ; print coeff
0525+  18C6             skip10:
0526+  18C6 E4            pop a
0527+  18C7 1B            mov al, bl
0528+  18C8 6A 30         add al, $30
0529+  18CA 23            mov ah, al
0530+  18CB 19 00         mov al, 0
0531+  18CD 05 03         syscall sys_io  ; print coeff
0532+  18CF E5            pop b
0533+  18D0 E4            pop a
0534+  18D1 09            ret
0535+  18D2             
0536+  18D2             ;-----------------------------------------------------------------------------
0537+  18D2             ; INPUT 8BIT HEX INTEGER
0538+  18D2             ; read 8bit integer into AL
0539+  18D2             ;-----------------------------------------------------------------------------
0540+  18D2             scan_u8x:
0541+  18D2 F8 04 00      enter 4
0542+  18D5 D8            push b
0543+  18D6 DA            push d
0544+  18D7             
0545+  18D7 FA FD FF      lea d, [bp + -3]
0546+  18DA 07 AC 16      call _gets        ; get number
0547+  18DD             
0548+  18DD 32            mov bl, [d]
0549+  18DE 37            mov bh, bl
0550+  18DF 33 01 00      mov bl, [d + 1]
0551+  18E2 07 63 16      call _atoi        ; convert to int in AL
0552+  18E5             
0553+  18E5 E7            pop d
0554+  18E6 E5            pop b
0555+  18E7 F9            leave
0556+  18E8 09            ret
0557+  18E9             
0558+  18E9             ;-----------------------------------------------------------------------------
0559+  18E9             ; input decimal number
0560+  18E9             ; result in A
0561+  18E9             ; 655'\0'
0562+  18E9             ; low--------high
0563+  18E9             ;-----------------------------------------------------------------------------
0564+  18E9             scan_u16d:
0565+  18E9 F8 08 00      enter 8
0566+  18EC E2            push si
0567+  18ED D8            push b
0568+  18EE D9            push c
0569+  18EF DA            push d
0570+  18F0 FA F9 FF      lea d, [bp +- 7]
0571+  18F3 07 AC 16      call _gets
0572+  18F6 07 05 16      call _strlen      ; get string length in C
0573+  18F9 7E            dec c
0574+  18FA FD 4E         mov si, d
0575+  18FC 12            mov a, c
0576+  18FD FD 99         shl a
0577+  18FF 3B 3B 19      mov d, table_power
0578+  1902 59            add d, a
0579+  1903 38 00 00      mov c, 0
0580+  1906             mul_loop:
0581+  1906 F6            lodsb      ; load ASCII to al
0582+  1907 B9 00         cmp al, 0
0583+  1909 C6 1C 19      je mul_exit
0584+  190C 6F 30         sub al, $30    ; make into integer
0585+  190E 22 00         mov ah, 0
0586+  1910 2A            mov b, [d]
0587+  1911 AC            mul a, b      ; result in B since it fits in 16bits
0588+  1912 11            mov a, b
0589+  1913 28            mov b, c
0590+  1914 54            add a, b
0591+  1915 39            mov c, a
0592+  1916 63 02 00      sub d, 2
0593+  1919 0A 06 19      jmp mul_loop
0594+  191C             mul_exit:
0595+  191C 12            mov a, c
0596+  191D E7            pop d
0597+  191E E6            pop c
0598+  191F E5            pop b
0599+  1920 EF            pop si
0600+  1921 F9            leave
0601+  1922 09            ret
0602+  1923             
0603+  1923 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1927 34 35 36 37 
0603+  192B 38 39 41 42 
0603+  192F 43 44 45 46 
0604+  1933 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1937 1B 5B 48 00 
0605+  193B             
0606+  193B             table_power:
0607+  193B 01 00         .dw 1
0608+  193D 0A 00         .dw 10
0609+  193F 64 00         .dw 100
0610+  1941 E8 03         .dw 1000
0611+  1943 10 27         .dw 100002739   1945             ; --- END INLINE ASM BLOCK
2740   1945             
2741   1945 F9            leave
2742   1946 09            ret
2743   1947             
2744   1947             include_ctype_lib:
2745   1947 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2746   194A             
2747   194A             ; --- BEGIN INLINE ASM BLOCK
2748   194A             .include "lib/asm/ctype.asm"
0001+  194A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  194A             ; ctype.s
0003+  194A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  194A             
0005+  194A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  194A             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  194A             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  194A             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  194A             ;; characters are supported.
0010+  194A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  194A             ;; _isalnum 
0012+  194A             ;; _isalpha 
0013+  194A             ;; islower 
0014+  194A             ;; isupper 
0015+  194A             ;; _isdigit 
0016+  194A             ;; isxdigit
0017+  194A             ;; iscntrl 
0018+  194A             ;; isgraph 
0019+  194A             ;; _isspace 
0020+  194A             ;; isblank 
0021+  194A             ;; isprint 
0022+  194A             ;; ispunct 
0023+  194A             ;; tolower 
0024+  194A             ;; toupper
0025+  194A             
0026+  194A             
0027+  194A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  194A             ;; IS ALPHANUMERIC
0029+  194A             ;; sets ZF according with result
0030+  194A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  194A             _isalnum:
0032+  194A 07 67 19    	call _isalpha
0033+  194D C6 53 19    	je _isalnum_exit
0034+  1950 07 54 19    	call _isdigit
0035+  1953             _isalnum_exit:
0036+  1953 09          	ret	
0037+  1954             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  1954             ;; IS DIGIT
0039+  1954             ;; sets ZF according with result
0040+  1954             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  1954             _isdigit:
0042+  1954 DB          	push al
0043+  1955 B9 30       	cmp al, '0'
0044+  1957 C8 63 19    	jlu _isdigit_false
0045+  195A B9 39       	cmp al, '9'
0046+  195C D1 63 19    	jgu _isdigit_false
0047+  195F 87 00       	and al, 0	; set ZF
0048+  1961 E8          	pop al
0049+  1962 09          	ret
0050+  1963             _isdigit_false:
0051+  1963 8B 01       	or al, 1	; clear ZF
0052+  1965 E8          	pop al
0053+  1966 09          	ret	
0054+  1967             	
0055+  1967             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  1967             ;; IS ALPHA
0057+  1967             ;; sets ZF according with result
0058+  1967             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  1967             _isalpha:
0060+  1967 DB          	push al
0061+  1968 B9 5F       	cmp al, '_'
0062+  196A C6 8A 19    	je _isalpha_true
0063+  196D B9 2E       	cmp al, '.'
0064+  196F C6 8A 19    	je _isalpha_true
0065+  1972 B9 41       	cmp al, 'A'
0066+  1974 C8 86 19    	jlu _isalpha_false
0067+  1977 B9 7A       	cmp al, 'z'
0068+  1979 D1 86 19    	jgu _isalpha_false
0069+  197C B9 5A       	cmp al, 'Z'
0070+  197E D0 8A 19    	jleu _isalpha_true
0071+  1981 B9 61       	cmp al, 'a'
0072+  1983 C9 8A 19    	jgeu _isalpha_true
0073+  1986             _isalpha_false:
0074+  1986 8B 01       	or al, 1	; clear ZF
0075+  1988 E8          	pop al
0076+  1989 09          	ret
0077+  198A             _isalpha_true:
0078+  198A 87 00       	and al, 0	; set ZF
0079+  198C E8          	pop al
0080+  198D 09          	ret
0081+  198E             
0082+  198E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  198E             ;; IS PATH-ALPHA
0084+  198E             ;; sets ZF according with result
0085+  198E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  198E             ispath:
0087+  198E DB          	push al
0088+  198F 07 54 19    	call _isdigit
0089+  1992 C6 BC 19    	je ispath_true
0090+  1995 B9 5F       	cmp al, '_'
0091+  1997 C6 BC 19    	je ispath_true
0092+  199A B9 2F       	cmp al, '/'
0093+  199C C6 BC 19    	je ispath_true
0094+  199F B9 2E       	cmp al, '.'
0095+  19A1 C6 BC 19    	je ispath_true
0096+  19A4 B9 41       	cmp al, 'A'
0097+  19A6 C8 B8 19    	jlu ispath_false
0098+  19A9 B9 7A       	cmp al, 'z'
0099+  19AB D1 B8 19    	jgu ispath_false
0100+  19AE B9 5A       	cmp al, 'Z'
0101+  19B0 D0 BC 19    	jleu ispath_true
0102+  19B3 B9 61       	cmp al, 'a'
0103+  19B5 C9 BC 19    	jgeu ispath_true
0104+  19B8             ispath_false:
0105+  19B8 8B 01       	or al, 1	; clear ZF
0106+  19BA E8          	pop al
0107+  19BB 09          	ret
0108+  19BC             ispath_true:
0109+  19BC 87 00       	and al, 0	; set ZF
0110+  19BE E8          	pop al
0111+  19BF 09          	ret
0112+  19C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  19C0             ;; IS SPACE
0114+  19C0             ;; sets ZF according with result
0115+  19C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  19C0             _isspace:
0117+  19C0 B9 20       	cmp al, $20		; ' '
0118+  19C2 C6 D6 19    	je _isspace_exit
0119+  19C5 B9 09       	cmp al, $09		; '\t'
0120+  19C7 C6 D6 19    	je _isspace_exit
0121+  19CA B9 0A       	cmp al, $0A		; '\n'
0122+  19CC C6 D6 19    	je _isspace_exit
0123+  19CF B9 0D       	cmp al, $0D		; '\r'
0124+  19D1 C6 D6 19    	je _isspace_exit
0125+  19D4 B9 0B       	cmp al, $0B		; '\v'
0126+  19D6             _isspace_exit:
0127+  19D6 09          	ret	
0128+  19D7             
0129+  19D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  19D7             ; TO LOWER
0131+  19D7             ; input in AL
0132+  19D7             ; output in AL
0133+  19D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  19D7             _to_lower:
0135+  19D7 B9 5A       	cmp al, 'Z'
0136+  19D9 D1 DE 19    	jgu _to_lower_ret
0137+  19DC 6A 20       	add al, $20				; convert to lower case
0138+  19DE             _to_lower_ret:
0139+  19DE 09          	ret
0140+  19DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  19DF             ; TO UPPER
0142+  19DF             ; input in AL
0143+  19DF             ; output in AL
0144+  19DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  19DF             _to_upper:
0146+  19DF B9 61       	cmp al, 'a'
0147+  19E1 C8 E6 19    	jlu _to_upper_ret
0148+  19E4 6F 20       	sub al, $20			; convert to upper case
0149+  19E6             _to_upper_ret:
0150+  19E6 09          	ret
0151+  19E7             
2749   19E7             ; --- END INLINE ASM BLOCK
2750   19E7             
2751   19E7 F9            leave
2752   19E8 09            ret
2753   19E9             
2754   19E9             is_space:
2755   19E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2756   19EC             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
2757   19EC FA 05 00      lea d, [bp + 5] ; $c
2758   19EF 32            mov bl, [d]
2759   19F0 A7 00         mov bh, 0
2760   19F2             ; START RELATIONAL
2761   19F2 D7            push a
2762   19F3 11            mov a, b
2763   19F4 26 20 00      mov b, $20
2764   19F7 B0            cmp a, b
2765   19F8 FD 71         seq ; ==
2766   19FA E4            pop a
2767   19FB             ; END RELATIONAL
2768   19FB             ; START LOGICAL OR
2769   19FB D7            push a
2770   19FC 11            mov a, b
2771   19FD FA 05 00      lea d, [bp + 5] ; $c
2772   1A00 32            mov bl, [d]
2773   1A01 A7 00         mov bh, 0
2774   1A03             ; START RELATIONAL
2775   1A03 D7            push a
2776   1A04 11            mov a, b
2777   1A05 26 09 00      mov b, $9
2778   1A08 B0            cmp a, b
2779   1A09 FD 71         seq ; ==
2780   1A0B E4            pop a
2781   1A0C             ; END RELATIONAL
2782   1A0C FD A8         sor a, b ; ||
2783   1A0E 11            mov a, b
2784   1A0F FA 05 00      lea d, [bp + 5] ; $c
2785   1A12 32            mov bl, [d]
2786   1A13 A7 00         mov bh, 0
2787   1A15             ; START RELATIONAL
2788   1A15 D7            push a
2789   1A16 11            mov a, b
2790   1A17 26 0A 00      mov b, $a
2791   1A1A B0            cmp a, b
2792   1A1B FD 71         seq ; ==
2793   1A1D E4            pop a
2794   1A1E             ; END RELATIONAL
2795   1A1E FD A8         sor a, b ; ||
2796   1A20 11            mov a, b
2797   1A21 FA 05 00      lea d, [bp + 5] ; $c
2798   1A24 32            mov bl, [d]
2799   1A25 A7 00         mov bh, 0
2800   1A27             ; START RELATIONAL
2801   1A27 D7            push a
2802   1A28 11            mov a, b
2803   1A29 26 0D 00      mov b, $d
2804   1A2C B0            cmp a, b
2805   1A2D FD 71         seq ; ==
2806   1A2F E4            pop a
2807   1A30             ; END RELATIONAL
2808   1A30 FD A8         sor a, b ; ||
2809   1A32 E4            pop a
2810   1A33             ; END LOGICAL OR
2811   1A33 F9            leave
2812   1A34 09            ret
2813   1A35             
2814   1A35             is_digit:
2815   1A35 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2816   1A38             ;; return c >= '0' && c <= '9'; 
2817   1A38 FA 05 00      lea d, [bp + 5] ; $c
2818   1A3B 32            mov bl, [d]
2819   1A3C A7 00         mov bh, 0
2820   1A3E             ; START RELATIONAL
2821   1A3E D7            push a
2822   1A3F 11            mov a, b
2823   1A40 26 30 00      mov b, $30
2824   1A43 B0            cmp a, b
2825   1A44 FD 80         sge ; >=
2826   1A46 E4            pop a
2827   1A47             ; END RELATIONAL
2828   1A47             ; START LOGICAL AND
2829   1A47 D7            push a
2830   1A48 11            mov a, b
2831   1A49 FA 05 00      lea d, [bp + 5] ; $c
2832   1A4C 32            mov bl, [d]
2833   1A4D A7 00         mov bh, 0
2834   1A4F             ; START RELATIONAL
2835   1A4F D7            push a
2836   1A50 11            mov a, b
2837   1A51 26 39 00      mov b, $39
2838   1A54 B0            cmp a, b
2839   1A55 FD 74         sle ; <= (signed)
2840   1A57 E4            pop a
2841   1A58             ; END RELATIONAL
2842   1A58 FD A7         sand a, b
2843   1A5A E4            pop a
2844   1A5B             ; END LOGICAL AND
2845   1A5B F9            leave
2846   1A5C 09            ret
2847   1A5D             
2848   1A5D             is_alpha:
2849   1A5D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2850   1A60             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
2851   1A60 FA 05 00      lea d, [bp + 5] ; $c
2852   1A63 32            mov bl, [d]
2853   1A64 A7 00         mov bh, 0
2854   1A66             ; START RELATIONAL
2855   1A66 D7            push a
2856   1A67 11            mov a, b
2857   1A68 26 61 00      mov b, $61
2858   1A6B B0            cmp a, b
2859   1A6C FD 80         sge ; >=
2860   1A6E E4            pop a
2861   1A6F             ; END RELATIONAL
2862   1A6F             ; START LOGICAL AND
2863   1A6F D7            push a
2864   1A70 11            mov a, b
2865   1A71 FA 05 00      lea d, [bp + 5] ; $c
2866   1A74 32            mov bl, [d]
2867   1A75 A7 00         mov bh, 0
2868   1A77             ; START RELATIONAL
2869   1A77 D7            push a
2870   1A78 11            mov a, b
2871   1A79 26 7A 00      mov b, $7a
2872   1A7C B0            cmp a, b
2873   1A7D FD 74         sle ; <= (signed)
2874   1A7F E4            pop a
2875   1A80             ; END RELATIONAL
2876   1A80 FD A7         sand a, b
2877   1A82 E4            pop a
2878   1A83             ; END LOGICAL AND
2879   1A83             ; START LOGICAL OR
2880   1A83 D7            push a
2881   1A84 11            mov a, b
2882   1A85 FA 05 00      lea d, [bp + 5] ; $c
2883   1A88 32            mov bl, [d]
2884   1A89 A7 00         mov bh, 0
2885   1A8B             ; START RELATIONAL
2886   1A8B D7            push a
2887   1A8C 11            mov a, b
2888   1A8D 26 41 00      mov b, $41
2889   1A90 B0            cmp a, b
2890   1A91 FD 80         sge ; >=
2891   1A93 E4            pop a
2892   1A94             ; END RELATIONAL
2893   1A94             ; START LOGICAL AND
2894   1A94 D7            push a
2895   1A95 11            mov a, b
2896   1A96 FA 05 00      lea d, [bp + 5] ; $c
2897   1A99 32            mov bl, [d]
2898   1A9A A7 00         mov bh, 0
2899   1A9C             ; START RELATIONAL
2900   1A9C D7            push a
2901   1A9D 11            mov a, b
2902   1A9E 26 5A 00      mov b, $5a
2903   1AA1 B0            cmp a, b
2904   1AA2 FD 74         sle ; <= (signed)
2905   1AA4 E4            pop a
2906   1AA5             ; END RELATIONAL
2907   1AA5 FD A7         sand a, b
2908   1AA7 E4            pop a
2909   1AA8             ; END LOGICAL AND
2910   1AA8 FD A8         sor a, b ; ||
2911   1AAA 11            mov a, b
2912   1AAB FA 05 00      lea d, [bp + 5] ; $c
2913   1AAE 32            mov bl, [d]
2914   1AAF A7 00         mov bh, 0
2915   1AB1             ; START RELATIONAL
2916   1AB1 D7            push a
2917   1AB2 11            mov a, b
2918   1AB3 26 5F 00      mov b, $5f
2919   1AB6 B0            cmp a, b
2920   1AB7 FD 71         seq ; ==
2921   1AB9 E4            pop a
2922   1ABA             ; END RELATIONAL
2923   1ABA FD A8         sor a, b ; ||
2924   1ABC E4            pop a
2925   1ABD             ; END LOGICAL OR
2926   1ABD F9            leave
2927   1ABE 09            ret
2928   1ABF             
2929   1ABF             tolower:
2930   1ABF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2931   1AC2             ;; if (ch >= 'A' && ch <= 'Z')  
2932   1AC2             _if42_cond:
2933   1AC2 FA 05 00      lea d, [bp + 5] ; $ch
2934   1AC5 32            mov bl, [d]
2935   1AC6 A7 00         mov bh, 0
2936   1AC8             ; START RELATIONAL
2937   1AC8 D7            push a
2938   1AC9 11            mov a, b
2939   1ACA 26 41 00      mov b, $41
2940   1ACD B0            cmp a, b
2941   1ACE FD 80         sge ; >=
2942   1AD0 E4            pop a
2943   1AD1             ; END RELATIONAL
2944   1AD1             ; START LOGICAL AND
2945   1AD1 D7            push a
2946   1AD2 11            mov a, b
2947   1AD3 FA 05 00      lea d, [bp + 5] ; $ch
2948   1AD6 32            mov bl, [d]
2949   1AD7 A7 00         mov bh, 0
2950   1AD9             ; START RELATIONAL
2951   1AD9 D7            push a
2952   1ADA 11            mov a, b
2953   1ADB 26 5A 00      mov b, $5a
2954   1ADE B0            cmp a, b
2955   1ADF FD 74         sle ; <= (signed)
2956   1AE1 E4            pop a
2957   1AE2             ; END RELATIONAL
2958   1AE2 FD A7         sand a, b
2959   1AE4 E4            pop a
2960   1AE5             ; END LOGICAL AND
2961   1AE5 C0 00 00      cmp b, 0
2962   1AE8 C6 03 1B      je _if42_else
2963   1AEB             _if42_true:
2964   1AEB             ;; return ch - 'A' + 'a'; 
2965   1AEB FA 05 00      lea d, [bp + 5] ; $ch
2966   1AEE 32            mov bl, [d]
2967   1AEF A7 00         mov bh, 0
2968   1AF1             ; START TERMS
2969   1AF1 D7            push a
2970   1AF2 11            mov a, b
2971   1AF3 26 41 00      mov b, $41
2972   1AF6 60            sub a, b
2973   1AF7 27            mov b, a
2974   1AF8 11            mov a, b
2975   1AF9 26 61 00      mov b, $61
2976   1AFC 56            add b, a
2977   1AFD E4            pop a
2978   1AFE             ; END TERMS
2979   1AFE F9            leave
2980   1AFF 09            ret
2981   1B00 0A 0B 1B      jmp _if42_exit
2982   1B03             _if42_else:
2983   1B03             ;; return ch; 
2984   1B03 FA 05 00      lea d, [bp + 5] ; $ch
2985   1B06 32            mov bl, [d]
2986   1B07 A7 00         mov bh, 0
2987   1B09 F9            leave
2988   1B0A 09            ret
2989   1B0B             _if42_exit:
2990   1B0B F9            leave
2991   1B0C 09            ret
2992   1B0D             
2993   1B0D             toupper:
2994   1B0D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2995   1B10             ;; if (ch >= 'a' && ch <= 'z')  
2996   1B10             _if43_cond:
2997   1B10 FA 05 00      lea d, [bp + 5] ; $ch
2998   1B13 32            mov bl, [d]
2999   1B14 A7 00         mov bh, 0
3000   1B16             ; START RELATIONAL
3001   1B16 D7            push a
3002   1B17 11            mov a, b
3003   1B18 26 61 00      mov b, $61
3004   1B1B B0            cmp a, b
3005   1B1C FD 80         sge ; >=
3006   1B1E E4            pop a
3007   1B1F             ; END RELATIONAL
3008   1B1F             ; START LOGICAL AND
3009   1B1F D7            push a
3010   1B20 11            mov a, b
3011   1B21 FA 05 00      lea d, [bp + 5] ; $ch
3012   1B24 32            mov bl, [d]
3013   1B25 A7 00         mov bh, 0
3014   1B27             ; START RELATIONAL
3015   1B27 D7            push a
3016   1B28 11            mov a, b
3017   1B29 26 7A 00      mov b, $7a
3018   1B2C B0            cmp a, b
3019   1B2D FD 74         sle ; <= (signed)
3020   1B2F E4            pop a
3021   1B30             ; END RELATIONAL
3022   1B30 FD A7         sand a, b
3023   1B32 E4            pop a
3024   1B33             ; END LOGICAL AND
3025   1B33 C0 00 00      cmp b, 0
3026   1B36 C6 51 1B      je _if43_else
3027   1B39             _if43_true:
3028   1B39             ;; return ch - 'a' + 'A'; 
3029   1B39 FA 05 00      lea d, [bp + 5] ; $ch
3030   1B3C 32            mov bl, [d]
3031   1B3D A7 00         mov bh, 0
3032   1B3F             ; START TERMS
3033   1B3F D7            push a
3034   1B40 11            mov a, b
3035   1B41 26 61 00      mov b, $61
3036   1B44 60            sub a, b
3037   1B45 27            mov b, a
3038   1B46 11            mov a, b
3039   1B47 26 41 00      mov b, $41
3040   1B4A 56            add b, a
3041   1B4B E4            pop a
3042   1B4C             ; END TERMS
3043   1B4C F9            leave
3044   1B4D 09            ret
3045   1B4E 0A 59 1B      jmp _if43_exit
3046   1B51             _if43_else:
3047   1B51             ;; return ch; 
3048   1B51 FA 05 00      lea d, [bp + 5] ; $ch
3049   1B54 32            mov bl, [d]
3050   1B55 A7 00         mov bh, 0
3051   1B57 F9            leave
3052   1B58 09            ret
3053   1B59             _if43_exit:
3054   1B59 F9            leave
3055   1B5A 09            ret
3056   1B5B             
3057   1B5B             is_delimiter:
3058   1B5B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3059   1B5E             ;; if( 
3060   1B5E             _if44_cond:
3061   1B5E FA 05 00      lea d, [bp + 5] ; $c
3062   1B61 32            mov bl, [d]
3063   1B62 A7 00         mov bh, 0
3064   1B64             ; START RELATIONAL
3065   1B64 D7            push a
3066   1B65 11            mov a, b
3067   1B66 26 40 00      mov b, $40
3068   1B69 B0            cmp a, b
3069   1B6A FD 71         seq ; ==
3070   1B6C E4            pop a
3071   1B6D             ; END RELATIONAL
3072   1B6D             ; START LOGICAL OR
3073   1B6D D7            push a
3074   1B6E 11            mov a, b
3075   1B6F FA 05 00      lea d, [bp + 5] ; $c
3076   1B72 32            mov bl, [d]
3077   1B73 A7 00         mov bh, 0
3078   1B75             ; START RELATIONAL
3079   1B75 D7            push a
3080   1B76 11            mov a, b
3081   1B77 26 23 00      mov b, $23
3082   1B7A B0            cmp a, b
3083   1B7B FD 71         seq ; ==
3084   1B7D E4            pop a
3085   1B7E             ; END RELATIONAL
3086   1B7E FD A8         sor a, b ; ||
3087   1B80 11            mov a, b
3088   1B81 FA 05 00      lea d, [bp + 5] ; $c
3089   1B84 32            mov bl, [d]
3090   1B85 A7 00         mov bh, 0
3091   1B87             ; START RELATIONAL
3092   1B87 D7            push a
3093   1B88 11            mov a, b
3094   1B89 26 24 00      mov b, $24
3095   1B8C B0            cmp a, b
3096   1B8D FD 71         seq ; ==
3097   1B8F E4            pop a
3098   1B90             ; END RELATIONAL
3099   1B90 FD A8         sor a, b ; ||
3100   1B92 11            mov a, b
3101   1B93 FA 05 00      lea d, [bp + 5] ; $c
3102   1B96 32            mov bl, [d]
3103   1B97 A7 00         mov bh, 0
3104   1B99             ; START RELATIONAL
3105   1B99 D7            push a
3106   1B9A 11            mov a, b
3107   1B9B 26 2B 00      mov b, $2b
3108   1B9E B0            cmp a, b
3109   1B9F FD 71         seq ; ==
3110   1BA1 E4            pop a
3111   1BA2             ; END RELATIONAL
3112   1BA2 FD A8         sor a, b ; ||
3113   1BA4 11            mov a, b
3114   1BA5 FA 05 00      lea d, [bp + 5] ; $c
3115   1BA8 32            mov bl, [d]
3116   1BA9 A7 00         mov bh, 0
3117   1BAB             ; START RELATIONAL
3118   1BAB D7            push a
3119   1BAC 11            mov a, b
3120   1BAD 26 2D 00      mov b, $2d
3121   1BB0 B0            cmp a, b
3122   1BB1 FD 71         seq ; ==
3123   1BB3 E4            pop a
3124   1BB4             ; END RELATIONAL
3125   1BB4 FD A8         sor a, b ; ||
3126   1BB6 11            mov a, b
3127   1BB7 FA 05 00      lea d, [bp + 5] ; $c
3128   1BBA 32            mov bl, [d]
3129   1BBB A7 00         mov bh, 0
3130   1BBD             ; START RELATIONAL
3131   1BBD D7            push a
3132   1BBE 11            mov a, b
3133   1BBF 26 2A 00      mov b, $2a
3134   1BC2 B0            cmp a, b
3135   1BC3 FD 71         seq ; ==
3136   1BC5 E4            pop a
3137   1BC6             ; END RELATIONAL
3138   1BC6 FD A8         sor a, b ; ||
3139   1BC8 11            mov a, b
3140   1BC9 FA 05 00      lea d, [bp + 5] ; $c
3141   1BCC 32            mov bl, [d]
3142   1BCD A7 00         mov bh, 0
3143   1BCF             ; START RELATIONAL
3144   1BCF D7            push a
3145   1BD0 11            mov a, b
3146   1BD1 26 2F 00      mov b, $2f
3147   1BD4 B0            cmp a, b
3148   1BD5 FD 71         seq ; ==
3149   1BD7 E4            pop a
3150   1BD8             ; END RELATIONAL
3151   1BD8 FD A8         sor a, b ; ||
3152   1BDA 11            mov a, b
3153   1BDB FA 05 00      lea d, [bp + 5] ; $c
3154   1BDE 32            mov bl, [d]
3155   1BDF A7 00         mov bh, 0
3156   1BE1             ; START RELATIONAL
3157   1BE1 D7            push a
3158   1BE2 11            mov a, b
3159   1BE3 26 25 00      mov b, $25
3160   1BE6 B0            cmp a, b
3161   1BE7 FD 71         seq ; ==
3162   1BE9 E4            pop a
3163   1BEA             ; END RELATIONAL
3164   1BEA FD A8         sor a, b ; ||
3165   1BEC 11            mov a, b
3166   1BED FA 05 00      lea d, [bp + 5] ; $c
3167   1BF0 32            mov bl, [d]
3168   1BF1 A7 00         mov bh, 0
3169   1BF3             ; START RELATIONAL
3170   1BF3 D7            push a
3171   1BF4 11            mov a, b
3172   1BF5 26 5B 00      mov b, $5b
3173   1BF8 B0            cmp a, b
3174   1BF9 FD 71         seq ; ==
3175   1BFB E4            pop a
3176   1BFC             ; END RELATIONAL
3177   1BFC FD A8         sor a, b ; ||
3178   1BFE 11            mov a, b
3179   1BFF FA 05 00      lea d, [bp + 5] ; $c
3180   1C02 32            mov bl, [d]
3181   1C03 A7 00         mov bh, 0
3182   1C05             ; START RELATIONAL
3183   1C05 D7            push a
3184   1C06 11            mov a, b
3185   1C07 26 5D 00      mov b, $5d
3186   1C0A B0            cmp a, b
3187   1C0B FD 71         seq ; ==
3188   1C0D E4            pop a
3189   1C0E             ; END RELATIONAL
3190   1C0E FD A8         sor a, b ; ||
3191   1C10 11            mov a, b
3192   1C11 FA 05 00      lea d, [bp + 5] ; $c
3193   1C14 32            mov bl, [d]
3194   1C15 A7 00         mov bh, 0
3195   1C17             ; START RELATIONAL
3196   1C17 D7            push a
3197   1C18 11            mov a, b
3198   1C19 26 28 00      mov b, $28
3199   1C1C B0            cmp a, b
3200   1C1D FD 71         seq ; ==
3201   1C1F E4            pop a
3202   1C20             ; END RELATIONAL
3203   1C20 FD A8         sor a, b ; ||
3204   1C22 11            mov a, b
3205   1C23 FA 05 00      lea d, [bp + 5] ; $c
3206   1C26 32            mov bl, [d]
3207   1C27 A7 00         mov bh, 0
3208   1C29             ; START RELATIONAL
3209   1C29 D7            push a
3210   1C2A 11            mov a, b
3211   1C2B 26 29 00      mov b, $29
3212   1C2E B0            cmp a, b
3213   1C2F FD 71         seq ; ==
3214   1C31 E4            pop a
3215   1C32             ; END RELATIONAL
3216   1C32 FD A8         sor a, b ; ||
3217   1C34 11            mov a, b
3218   1C35 FA 05 00      lea d, [bp + 5] ; $c
3219   1C38 32            mov bl, [d]
3220   1C39 A7 00         mov bh, 0
3221   1C3B             ; START RELATIONAL
3222   1C3B D7            push a
3223   1C3C 11            mov a, b
3224   1C3D 26 7B 00      mov b, $7b
3225   1C40 B0            cmp a, b
3226   1C41 FD 71         seq ; ==
3227   1C43 E4            pop a
3228   1C44             ; END RELATIONAL
3229   1C44 FD A8         sor a, b ; ||
3230   1C46 11            mov a, b
3231   1C47 FA 05 00      lea d, [bp + 5] ; $c
3232   1C4A 32            mov bl, [d]
3233   1C4B A7 00         mov bh, 0
3234   1C4D             ; START RELATIONAL
3235   1C4D D7            push a
3236   1C4E 11            mov a, b
3237   1C4F 26 7D 00      mov b, $7d
3238   1C52 B0            cmp a, b
3239   1C53 FD 71         seq ; ==
3240   1C55 E4            pop a
3241   1C56             ; END RELATIONAL
3242   1C56 FD A8         sor a, b ; ||
3243   1C58 11            mov a, b
3244   1C59 FA 05 00      lea d, [bp + 5] ; $c
3245   1C5C 32            mov bl, [d]
3246   1C5D A7 00         mov bh, 0
3247   1C5F             ; START RELATIONAL
3248   1C5F D7            push a
3249   1C60 11            mov a, b
3250   1C61 26 3A 00      mov b, $3a
3251   1C64 B0            cmp a, b
3252   1C65 FD 71         seq ; ==
3253   1C67 E4            pop a
3254   1C68             ; END RELATIONAL
3255   1C68 FD A8         sor a, b ; ||
3256   1C6A 11            mov a, b
3257   1C6B FA 05 00      lea d, [bp + 5] ; $c
3258   1C6E 32            mov bl, [d]
3259   1C6F A7 00         mov bh, 0
3260   1C71             ; START RELATIONAL
3261   1C71 D7            push a
3262   1C72 11            mov a, b
3263   1C73 26 3B 00      mov b, $3b
3264   1C76 B0            cmp a, b
3265   1C77 FD 71         seq ; ==
3266   1C79 E4            pop a
3267   1C7A             ; END RELATIONAL
3268   1C7A FD A8         sor a, b ; ||
3269   1C7C 11            mov a, b
3270   1C7D FA 05 00      lea d, [bp + 5] ; $c
3271   1C80 32            mov bl, [d]
3272   1C81 A7 00         mov bh, 0
3273   1C83             ; START RELATIONAL
3274   1C83 D7            push a
3275   1C84 11            mov a, b
3276   1C85 26 3C 00      mov b, $3c
3277   1C88 B0            cmp a, b
3278   1C89 FD 71         seq ; ==
3279   1C8B E4            pop a
3280   1C8C             ; END RELATIONAL
3281   1C8C FD A8         sor a, b ; ||
3282   1C8E 11            mov a, b
3283   1C8F FA 05 00      lea d, [bp + 5] ; $c
3284   1C92 32            mov bl, [d]
3285   1C93 A7 00         mov bh, 0
3286   1C95             ; START RELATIONAL
3287   1C95 D7            push a
3288   1C96 11            mov a, b
3289   1C97 26 3E 00      mov b, $3e
3290   1C9A B0            cmp a, b
3291   1C9B FD 71         seq ; ==
3292   1C9D E4            pop a
3293   1C9E             ; END RELATIONAL
3294   1C9E FD A8         sor a, b ; ||
3295   1CA0 11            mov a, b
3296   1CA1 FA 05 00      lea d, [bp + 5] ; $c
3297   1CA4 32            mov bl, [d]
3298   1CA5 A7 00         mov bh, 0
3299   1CA7             ; START RELATIONAL
3300   1CA7 D7            push a
3301   1CA8 11            mov a, b
3302   1CA9 26 3D 00      mov b, $3d
3303   1CAC B0            cmp a, b
3304   1CAD FD 71         seq ; ==
3305   1CAF E4            pop a
3306   1CB0             ; END RELATIONAL
3307   1CB0 FD A8         sor a, b ; ||
3308   1CB2 11            mov a, b
3309   1CB3 FA 05 00      lea d, [bp + 5] ; $c
3310   1CB6 32            mov bl, [d]
3311   1CB7 A7 00         mov bh, 0
3312   1CB9             ; START RELATIONAL
3313   1CB9 D7            push a
3314   1CBA 11            mov a, b
3315   1CBB 26 21 00      mov b, $21
3316   1CBE B0            cmp a, b
3317   1CBF FD 71         seq ; ==
3318   1CC1 E4            pop a
3319   1CC2             ; END RELATIONAL
3320   1CC2 FD A8         sor a, b ; ||
3321   1CC4 11            mov a, b
3322   1CC5 FA 05 00      lea d, [bp + 5] ; $c
3323   1CC8 32            mov bl, [d]
3324   1CC9 A7 00         mov bh, 0
3325   1CCB             ; START RELATIONAL
3326   1CCB D7            push a
3327   1CCC 11            mov a, b
3328   1CCD 26 5E 00      mov b, $5e
3329   1CD0 B0            cmp a, b
3330   1CD1 FD 71         seq ; ==
3331   1CD3 E4            pop a
3332   1CD4             ; END RELATIONAL
3333   1CD4 FD A8         sor a, b ; ||
3334   1CD6 11            mov a, b
3335   1CD7 FA 05 00      lea d, [bp + 5] ; $c
3336   1CDA 32            mov bl, [d]
3337   1CDB A7 00         mov bh, 0
3338   1CDD             ; START RELATIONAL
3339   1CDD D7            push a
3340   1CDE 11            mov a, b
3341   1CDF 26 26 00      mov b, $26
3342   1CE2 B0            cmp a, b
3343   1CE3 FD 71         seq ; ==
3344   1CE5 E4            pop a
3345   1CE6             ; END RELATIONAL
3346   1CE6 FD A8         sor a, b ; ||
3347   1CE8 11            mov a, b
3348   1CE9 FA 05 00      lea d, [bp + 5] ; $c
3349   1CEC 32            mov bl, [d]
3350   1CED A7 00         mov bh, 0
3351   1CEF             ; START RELATIONAL
3352   1CEF D7            push a
3353   1CF0 11            mov a, b
3354   1CF1 26 7C 00      mov b, $7c
3355   1CF4 B0            cmp a, b
3356   1CF5 FD 71         seq ; ==
3357   1CF7 E4            pop a
3358   1CF8             ; END RELATIONAL
3359   1CF8 FD A8         sor a, b ; ||
3360   1CFA 11            mov a, b
3361   1CFB FA 05 00      lea d, [bp + 5] ; $c
3362   1CFE 32            mov bl, [d]
3363   1CFF A7 00         mov bh, 0
3364   1D01             ; START RELATIONAL
3365   1D01 D7            push a
3366   1D02 11            mov a, b
3367   1D03 26 7E 00      mov b, $7e
3368   1D06 B0            cmp a, b
3369   1D07 FD 71         seq ; ==
3370   1D09 E4            pop a
3371   1D0A             ; END RELATIONAL
3372   1D0A FD A8         sor a, b ; ||
3373   1D0C 11            mov a, b
3374   1D0D FA 05 00      lea d, [bp + 5] ; $c
3375   1D10 32            mov bl, [d]
3376   1D11 A7 00         mov bh, 0
3377   1D13             ; START RELATIONAL
3378   1D13 D7            push a
3379   1D14 11            mov a, b
3380   1D15 26 2E 00      mov b, $2e
3381   1D18 B0            cmp a, b
3382   1D19 FD 71         seq ; ==
3383   1D1B E4            pop a
3384   1D1C             ; END RELATIONAL
3385   1D1C FD A8         sor a, b ; ||
3386   1D1E E4            pop a
3387   1D1F             ; END LOGICAL OR
3388   1D1F C0 00 00      cmp b, 0
3389   1D22 C6 2D 1D      je _if44_else
3390   1D25             _if44_true:
3391   1D25             ;; return 1; 
3392   1D25 26 01 00      mov b, $1
3393   1D28 F9            leave
3394   1D29 09            ret
3395   1D2A 0A 32 1D      jmp _if44_exit
3396   1D2D             _if44_else:
3397   1D2D             ;; return 0; 
3398   1D2D 26 00 00      mov b, $0
3399   1D30 F9            leave
3400   1D31 09            ret
3401   1D32             _if44_exit:
3402   1D32 F9            leave
3403   1D33 09            ret
3404   1D34             
3405   1D34             TO_FIXED:
3406   1D34 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3407   1D37             ;; return x * 10; 
3408   1D37 FA 05 00      lea d, [bp + 5] ; $x
3409   1D3A 2A            mov b, [d]
3410   1D3B             ; START FACTORS
3411   1D3B D7            push a
3412   1D3C 11            mov a, b
3413   1D3D 26 0A 00      mov b, $a
3414   1D40 AC            mul a, b ; *
3415   1D41 11            mov a, b
3416   1D42 27            mov b, a
3417   1D43 E4            pop a
3418   1D44             ; END FACTORS
3419   1D44 F9            leave
3420   1D45 09            ret
3421   1D46             
3422   1D46             FROM_FIXED:
3423   1D46 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3424   1D49             ;; return x / 10; 
3425   1D49 FA 05 00      lea d, [bp + 5] ; $x
3426   1D4C 2A            mov b, [d]
3427   1D4D             ; START FACTORS
3428   1D4D D7            push a
3429   1D4E 11            mov a, b
3430   1D4F 26 0A 00      mov b, $a
3431   1D52 AE            div a, b
3432   1D53 27            mov b, a
3433   1D54 E4            pop a
3434   1D55             ; END FACTORS
3435   1D55 F9            leave
3436   1D56 09            ret
3437   1D57             
3438   1D57             TO_FIXED00:
3439   1D57 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3440   1D5A             ;; return x * 100; 
3441   1D5A FA 05 00      lea d, [bp + 5] ; $x
3442   1D5D 2A            mov b, [d]
3443   1D5E             ; START FACTORS
3444   1D5E D7            push a
3445   1D5F 11            mov a, b
3446   1D60 26 64 00      mov b, $64
3447   1D63 AC            mul a, b ; *
3448   1D64 11            mov a, b
3449   1D65 27            mov b, a
3450   1D66 E4            pop a
3451   1D67             ; END FACTORS
3452   1D67 F9            leave
3453   1D68 09            ret
3454   1D69             
3455   1D69             FROM_FIXED00:
3456   1D69 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3457   1D6C             ;; return x / 100; 
3458   1D6C FA 05 00      lea d, [bp + 5] ; $x
3459   1D6F 2A            mov b, [d]
3460   1D70             ; START FACTORS
3461   1D70 D7            push a
3462   1D71 11            mov a, b
3463   1D72 26 64 00      mov b, $64
3464   1D75 AE            div a, b
3465   1D76 27            mov b, a
3466   1D77 E4            pop a
3467   1D78             ; END FACTORS
3468   1D78 F9            leave
3469   1D79 09            ret
3470   1D7A             
3471   1D7A             get_rand:
3472   1D7A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3473   1D7D             ;; unsigned int        r ; 
3474   1D7D 52 02 00      sub sp, 2 ; r
3475   1D80             ;; r = rand(); 
3476   1D80 FA FF FF      lea d, [bp + -1] ; $r
3477   1D83 DA            push d
3478   1D84 07 4A 07      call rand
3479   1D87 E7            pop d
3480   1D88 FD 43         mov [d], b
3481   1D8A             ;; r = (r >> 8) | (r << 8); 
3482   1D8A FA FF FF      lea d, [bp + -1] ; $r
3483   1D8D DA            push d
3484   1D8E FA FF FF      lea d, [bp + -1] ; $r
3485   1D91 2A            mov b, [d]
3486   1D92             ; START SHIFT
3487   1D92 D7            push a
3488   1D93 11            mov a, b
3489   1D94 26 08 00      mov b, $8
3490   1D97 FD 39         mov c, b
3491   1D99 A1            shr a, cl
3492   1D9A 27            mov b, a
3493   1D9B E4            pop a
3494   1D9C             ; END SHIFT
3495   1D9C D7            push a
3496   1D9D 11            mov a, b
3497   1D9E FA FF FF      lea d, [bp + -1] ; $r
3498   1DA1 2A            mov b, [d]
3499   1DA2             ; START SHIFT
3500   1DA2 D7            push a
3501   1DA3 11            mov a, b
3502   1DA4 26 08 00      mov b, $8
3503   1DA7 FD 39         mov c, b
3504   1DA9 9D            shl a, cl
3505   1DAA 27            mov b, a
3506   1DAB E4            pop a
3507   1DAC             ; END SHIFT
3508   1DAC FD 70         or b, a ; |
3509   1DAE E4            pop a
3510   1DAF E7            pop d
3511   1DB0 FD 43         mov [d], b
3512   1DB2             ;; return ((r % spread) + 1); 
3513   1DB2 FA FF FF      lea d, [bp + -1] ; $r
3514   1DB5 2A            mov b, [d]
3515   1DB6             ; START FACTORS
3516   1DB6 D7            push a
3517   1DB7 11            mov a, b
3518   1DB8 FA 05 00      lea d, [bp + 5] ; $spread
3519   1DBB 2A            mov b, [d]
3520   1DBC AE            div a, b ; 
3521   1DBD 11            mov a, b
3522   1DBE 27            mov b, a
3523   1DBF E4            pop a
3524   1DC0             ; END FACTORS
3525   1DC0             ; START TERMS
3526   1DC0 D7            push a
3527   1DC1 11            mov a, b
3528   1DC2 26 01 00      mov b, $1
3529   1DC5 56            add b, a
3530   1DC6 E4            pop a
3531   1DC7             ; END TERMS
3532   1DC7 F9            leave
3533   1DC8 09            ret
3534   1DC9             
3535   1DC9             rand8:
3536   1DC9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3537   1DCC             ;; return (get_rand(8)); 
3538   1DCC 26 08 00      mov b, $8
3539   1DCF FD AB         swp b
3540   1DD1 D8            push b
3541   1DD2 07 7A 1D      call get_rand
3542   1DD5 51 02 00      add sp, 2
3543   1DD8 F9            leave
3544   1DD9 09            ret
3545   1DDA             
3546   1DDA             input:
3547   1DDA F8 00 00      enter 0 ; (push bp; mov bp, sp)
3548   1DDD             ;; int c; 
3549   1DDD 52 02 00      sub sp, 2 ; c
3550   1DE0             ;; while((c = getchar()) != '\n') { 
3551   1DE0             _while45_cond:
3552   1DE0 FA FF FF      lea d, [bp + -1] ; $c
3553   1DE3 DA            push d
3554   1DE4 07 21 15      call getchar
3555   1DE7 E7            pop d
3556   1DE8 FD 43         mov [d], b
3557   1DEA             ; START RELATIONAL
3558   1DEA D7            push a
3559   1DEB 11            mov a, b
3560   1DEC 26 0A 00      mov b, $a
3561   1DEF B0            cmp a, b
3562   1DF0 FD 72         sneq ; !=
3563   1DF2 E4            pop a
3564   1DF3             ; END RELATIONAL
3565   1DF3 C0 00 00      cmp b, 0
3566   1DF6 C6 53 1E      je _while45_exit
3567   1DF9             _while45_block:
3568   1DF9             ;; if (c == -1) 
3569   1DF9             _if46_cond:
3570   1DF9 FA FF FF      lea d, [bp + -1] ; $c
3571   1DFC 2A            mov b, [d]
3572   1DFD             ; START RELATIONAL
3573   1DFD D7            push a
3574   1DFE 11            mov a, b
3575   1DFF 26 01 00      mov b, $1
3576   1E02 FD 97         neg b
3577   1E04 B0            cmp a, b
3578   1E05 FD 71         seq ; ==
3579   1E07 E4            pop a
3580   1E08             ; END RELATIONAL
3581   1E08 C0 00 00      cmp b, 0
3582   1E0B C6 14 1E      je _if46_exit
3583   1E0E             _if46_true:
3584   1E0E             ;; exit(); 
3585   1E0E 07 D7 05      call exit
3586   1E11 0A 14 1E      jmp _if46_exit
3587   1E14             _if46_exit:
3588   1E14             ;; if (l > 1) { 
3589   1E14             _if47_cond:
3590   1E14 FA 07 00      lea d, [bp + 7] ; $l
3591   1E17 32            mov bl, [d]
3592   1E18 A7 00         mov bh, 0
3593   1E1A             ; START RELATIONAL
3594   1E1A D7            push a
3595   1E1B 11            mov a, b
3596   1E1C 26 01 00      mov b, $1
3597   1E1F B0            cmp a, b
3598   1E20 FD 81         sgu ; > (unsigned)
3599   1E22 E4            pop a
3600   1E23             ; END RELATIONAL
3601   1E23 C0 00 00      cmp b, 0
3602   1E26 C6 50 1E      je _if47_exit
3603   1E29             _if47_true:
3604   1E29             ;; *b++ = c; 
3605   1E29 FA 05 00      lea d, [bp + 5] ; $b
3606   1E2C 2A            mov b, [d]
3607   1E2D FD 77         inc b
3608   1E2F FA 05 00      lea d, [bp + 5] ; $b
3609   1E32 FD 43         mov [d], b
3610   1E34 FD 7D         dec b
3611   1E36 D8            push b
3612   1E37 FA FF FF      lea d, [bp + -1] ; $c
3613   1E3A 2A            mov b, [d]
3614   1E3B E7            pop d
3615   1E3C FD 3E         mov [d], bl
3616   1E3E             ;; l--; 
3617   1E3E FA 07 00      lea d, [bp + 7] ; $l
3618   1E41 32            mov bl, [d]
3619   1E42 A7 00         mov bh, 0
3620   1E44 FD 7D         dec b
3621   1E46 FA 07 00      lea d, [bp + 7] ; $l
3622   1E49 FD 43         mov [d], b
3623   1E4B FD 77         inc b
3624   1E4D 0A 50 1E      jmp _if47_exit
3625   1E50             _if47_exit:
3626   1E50 0A E0 1D      jmp _while45_cond
3627   1E53             _while45_exit:
3628   1E53             ;; *b = 0; 
3629   1E53 FA 05 00      lea d, [bp + 5] ; $b
3630   1E56 2A            mov b, [d]
3631   1E57 D8            push b
3632   1E58 26 00 00      mov b, $0
3633   1E5B E7            pop d
3634   1E5C FD 3E         mov [d], bl
3635   1E5E F9            leave
3636   1E5F 09            ret
3637   1E60             
3638   1E60             yesno:
3639   1E60 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3640   1E63             ;; char b[2]; 
3641   1E63 52 02 00      sub sp, 2 ; b
3642   1E66             ;; input(b,2); 
3643   1E66 26 02 00      mov b, $2
3644   1E69 DD            push bl
3645   1E6A FA FF FF      lea d, [bp + -1] ; $b
3646   1E6D 2D            mov b, d
3647   1E6E FD AB         swp b
3648   1E70 D8            push b
3649   1E71 07 DA 1D      call input
3650   1E74 51 03 00      add sp, 3
3651   1E77             ;; if (tolower(*b) == 'y') 
3652   1E77             _if48_cond:
3653   1E77 FA FF FF      lea d, [bp + -1] ; $b
3654   1E7A 2D            mov b, d
3655   1E7B 74            mov d, b
3656   1E7C 32            mov bl, [d]
3657   1E7D A7 00         mov bh, 0
3658   1E7F DD            push bl
3659   1E80 07 BF 1A      call tolower
3660   1E83 51 01 00      add sp, 1
3661   1E86             ; START RELATIONAL
3662   1E86 D7            push a
3663   1E87 11            mov a, b
3664   1E88 26 79 00      mov b, $79
3665   1E8B B0            cmp a, b
3666   1E8C FD 71         seq ; ==
3667   1E8E E4            pop a
3668   1E8F             ; END RELATIONAL
3669   1E8F C0 00 00      cmp b, 0
3670   1E92 C6 9D 1E      je _if48_exit
3671   1E95             _if48_true:
3672   1E95             ;; return 1; 
3673   1E95 26 01 00      mov b, $1
3674   1E98 F9            leave
3675   1E99 09            ret
3676   1E9A 0A 9D 1E      jmp _if48_exit
3677   1E9D             _if48_exit:
3678   1E9D             ;; return 0; 
3679   1E9D 26 00 00      mov b, $0
3680   1EA0 F9            leave
3681   1EA1 09            ret
3682   1EA2             
3683   1EA2             input_f00:
3684   1EA2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3685   1EA5             ;; int       v; 
3686   1EA5 52 02 00      sub sp, 2 ; v
3687   1EA8             ;; char buf[8]; 
3688   1EA8 52 08 00      sub sp, 8 ; buf
3689   1EAB             ;; char *x; 
3690   1EAB 52 02 00      sub sp, 2 ; x
3691   1EAE             ;; input(buf, 8); 
3692   1EAE 26 08 00      mov b, $8
3693   1EB1 DD            push bl
3694   1EB2 FA F7 FF      lea d, [bp + -9] ; $buf
3695   1EB5 2D            mov b, d
3696   1EB6 FD AB         swp b
3697   1EB8 D8            push b
3698   1EB9 07 DA 1D      call input
3699   1EBC 51 03 00      add sp, 3
3700   1EBF             ;; x = buf; 
3701   1EBF FA F5 FF      lea d, [bp + -11] ; $x
3702   1EC2 DA            push d
3703   1EC3 FA F7 FF      lea d, [bp + -9] ; $buf
3704   1EC6 2D            mov b, d
3705   1EC7 E7            pop d
3706   1EC8 FD 43         mov [d], b
3707   1ECA             ;; if (!is_digit(*x)) 
3708   1ECA             _if49_cond:
3709   1ECA FA F5 FF      lea d, [bp + -11] ; $x
3710   1ECD 2A            mov b, [d]
3711   1ECE 74            mov d, b
3712   1ECF 32            mov bl, [d]
3713   1ED0 A7 00         mov bh, 0
3714   1ED2 DD            push bl
3715   1ED3 07 35 1A      call is_digit
3716   1ED6 51 01 00      add sp, 1
3717   1ED9 C0 00 00      cmp b, 0
3718   1EDC FD 71         seq ; !
3719   1EDE C0 00 00      cmp b, 0
3720   1EE1 C6 EE 1E      je _if49_exit
3721   1EE4             _if49_true:
3722   1EE4             ;; return -1; 
3723   1EE4 26 01 00      mov b, $1
3724   1EE7 FD 97         neg b
3725   1EE9 F9            leave
3726   1EEA 09            ret
3727   1EEB 0A EE 1E      jmp _if49_exit
3728   1EEE             _if49_exit:
3729   1EEE             ;; v = 100 * (*x++ - '0'); 
3730   1EEE FA FF FF      lea d, [bp + -1] ; $v
3731   1EF1 DA            push d
3732   1EF2 26 64 00      mov b, $64
3733   1EF5             ; START FACTORS
3734   1EF5 D7            push a
3735   1EF6 11            mov a, b
3736   1EF7 FA F5 FF      lea d, [bp + -11] ; $x
3737   1EFA 2A            mov b, [d]
3738   1EFB FD 77         inc b
3739   1EFD FA F5 FF      lea d, [bp + -11] ; $x
3740   1F00 FD 43         mov [d], b
3741   1F02 FD 7D         dec b
3742   1F04 74            mov d, b
3743   1F05 32            mov bl, [d]
3744   1F06 A7 00         mov bh, 0
3745   1F08             ; START TERMS
3746   1F08 D7            push a
3747   1F09 11            mov a, b
3748   1F0A 26 30 00      mov b, $30
3749   1F0D 60            sub a, b
3750   1F0E 27            mov b, a
3751   1F0F E4            pop a
3752   1F10             ; END TERMS
3753   1F10 AC            mul a, b ; *
3754   1F11 11            mov a, b
3755   1F12 27            mov b, a
3756   1F13 E4            pop a
3757   1F14             ; END FACTORS
3758   1F14 E7            pop d
3759   1F15 FD 43         mov [d], b
3760   1F17             ;; if (*x == 0) 
3761   1F17             _if50_cond:
3762   1F17 FA F5 FF      lea d, [bp + -11] ; $x
3763   1F1A 2A            mov b, [d]
3764   1F1B 74            mov d, b
3765   1F1C 32            mov bl, [d]
3766   1F1D A7 00         mov bh, 0
3767   1F1F             ; START RELATIONAL
3768   1F1F D7            push a
3769   1F20 11            mov a, b
3770   1F21 26 00 00      mov b, $0
3771   1F24 B0            cmp a, b
3772   1F25 FD 71         seq ; ==
3773   1F27 E4            pop a
3774   1F28             ; END RELATIONAL
3775   1F28 C0 00 00      cmp b, 0
3776   1F2B C6 37 1F      je _if50_exit
3777   1F2E             _if50_true:
3778   1F2E             ;; return v; 
3779   1F2E FA FF FF      lea d, [bp + -1] ; $v
3780   1F31 2A            mov b, [d]
3781   1F32 F9            leave
3782   1F33 09            ret
3783   1F34 0A 37 1F      jmp _if50_exit
3784   1F37             _if50_exit:
3785   1F37             ;; if (*x++ != '.') 
3786   1F37             _if51_cond:
3787   1F37 FA F5 FF      lea d, [bp + -11] ; $x
3788   1F3A 2A            mov b, [d]
3789   1F3B FD 77         inc b
3790   1F3D FA F5 FF      lea d, [bp + -11] ; $x
3791   1F40 FD 43         mov [d], b
3792   1F42 FD 7D         dec b
3793   1F44 74            mov d, b
3794   1F45 32            mov bl, [d]
3795   1F46 A7 00         mov bh, 0
3796   1F48             ; START RELATIONAL
3797   1F48 D7            push a
3798   1F49 11            mov a, b
3799   1F4A 26 2E 00      mov b, $2e
3800   1F4D B0            cmp a, b
3801   1F4E FD 72         sneq ; !=
3802   1F50 E4            pop a
3803   1F51             ; END RELATIONAL
3804   1F51 C0 00 00      cmp b, 0
3805   1F54 C6 61 1F      je _if51_exit
3806   1F57             _if51_true:
3807   1F57             ;; return -1; 
3808   1F57 26 01 00      mov b, $1
3809   1F5A FD 97         neg b
3810   1F5C F9            leave
3811   1F5D 09            ret
3812   1F5E 0A 61 1F      jmp _if51_exit
3813   1F61             _if51_exit:
3814   1F61             ;; if (!is_digit(*x)) 
3815   1F61             _if52_cond:
3816   1F61 FA F5 FF      lea d, [bp + -11] ; $x
3817   1F64 2A            mov b, [d]
3818   1F65 74            mov d, b
3819   1F66 32            mov bl, [d]
3820   1F67 A7 00         mov bh, 0
3821   1F69 DD            push bl
3822   1F6A 07 35 1A      call is_digit
3823   1F6D 51 01 00      add sp, 1
3824   1F70 C0 00 00      cmp b, 0
3825   1F73 FD 71         seq ; !
3826   1F75 C0 00 00      cmp b, 0
3827   1F78 C6 85 1F      je _if52_exit
3828   1F7B             _if52_true:
3829   1F7B             ;; return -1; 
3830   1F7B 26 01 00      mov b, $1
3831   1F7E FD 97         neg b
3832   1F80 F9            leave
3833   1F81 09            ret
3834   1F82 0A 85 1F      jmp _if52_exit
3835   1F85             _if52_exit:
3836   1F85             ;; v = v + 10 * (*x++ - '0'); 
3837   1F85 FA FF FF      lea d, [bp + -1] ; $v
3838   1F88 DA            push d
3839   1F89 FA FF FF      lea d, [bp + -1] ; $v
3840   1F8C 2A            mov b, [d]
3841   1F8D             ; START TERMS
3842   1F8D D7            push a
3843   1F8E 11            mov a, b
3844   1F8F 26 0A 00      mov b, $a
3845   1F92             ; START FACTORS
3846   1F92 D7            push a
3847   1F93 11            mov a, b
3848   1F94 FA F5 FF      lea d, [bp + -11] ; $x
3849   1F97 2A            mov b, [d]
3850   1F98 FD 77         inc b
3851   1F9A FA F5 FF      lea d, [bp + -11] ; $x
3852   1F9D FD 43         mov [d], b
3853   1F9F FD 7D         dec b
3854   1FA1 74            mov d, b
3855   1FA2 32            mov bl, [d]
3856   1FA3 A7 00         mov bh, 0
3857   1FA5             ; START TERMS
3858   1FA5 D7            push a
3859   1FA6 11            mov a, b
3860   1FA7 26 30 00      mov b, $30
3861   1FAA 60            sub a, b
3862   1FAB 27            mov b, a
3863   1FAC E4            pop a
3864   1FAD             ; END TERMS
3865   1FAD AC            mul a, b ; *
3866   1FAE 11            mov a, b
3867   1FAF 27            mov b, a
3868   1FB0 E4            pop a
3869   1FB1             ; END FACTORS
3870   1FB1 56            add b, a
3871   1FB2 E4            pop a
3872   1FB3             ; END TERMS
3873   1FB3 E7            pop d
3874   1FB4 FD 43         mov [d], b
3875   1FB6             ;; if (!*x) 
3876   1FB6             _if53_cond:
3877   1FB6 FA F5 FF      lea d, [bp + -11] ; $x
3878   1FB9 2A            mov b, [d]
3879   1FBA 74            mov d, b
3880   1FBB 32            mov bl, [d]
3881   1FBC A7 00         mov bh, 0
3882   1FBE C0 00 00      cmp b, 0
3883   1FC1 FD 71         seq ; !
3884   1FC3 C0 00 00      cmp b, 0
3885   1FC6 C6 D2 1F      je _if53_exit
3886   1FC9             _if53_true:
3887   1FC9             ;; return v; 
3888   1FC9 FA FF FF      lea d, [bp + -1] ; $v
3889   1FCC 2A            mov b, [d]
3890   1FCD F9            leave
3891   1FCE 09            ret
3892   1FCF 0A D2 1F      jmp _if53_exit
3893   1FD2             _if53_exit:
3894   1FD2             ;; if (!is_digit(*x)) 
3895   1FD2             _if54_cond:
3896   1FD2 FA F5 FF      lea d, [bp + -11] ; $x
3897   1FD5 2A            mov b, [d]
3898   1FD6 74            mov d, b
3899   1FD7 32            mov bl, [d]
3900   1FD8 A7 00         mov bh, 0
3901   1FDA DD            push bl
3902   1FDB 07 35 1A      call is_digit
3903   1FDE 51 01 00      add sp, 1
3904   1FE1 C0 00 00      cmp b, 0
3905   1FE4 FD 71         seq ; !
3906   1FE6 C0 00 00      cmp b, 0
3907   1FE9 C6 F6 1F      je _if54_exit
3908   1FEC             _if54_true:
3909   1FEC             ;; return -1; 
3910   1FEC 26 01 00      mov b, $1
3911   1FEF FD 97         neg b
3912   1FF1 F9            leave
3913   1FF2 09            ret
3914   1FF3 0A F6 1F      jmp _if54_exit
3915   1FF6             _if54_exit:
3916   1FF6             ;; v = v + *x++ - '0'; 
3917   1FF6 FA FF FF      lea d, [bp + -1] ; $v
3918   1FF9 DA            push d
3919   1FFA FA FF FF      lea d, [bp + -1] ; $v
3920   1FFD 2A            mov b, [d]
3921   1FFE             ; START TERMS
3922   1FFE D7            push a
3923   1FFF 11            mov a, b
3924   2000 FA F5 FF      lea d, [bp + -11] ; $x
3925   2003 2A            mov b, [d]
3926   2004 FD 77         inc b
3927   2006 FA F5 FF      lea d, [bp + -11] ; $x
3928   2009 FD 43         mov [d], b
3929   200B FD 7D         dec b
3930   200D 74            mov d, b
3931   200E 32            mov bl, [d]
3932   200F A7 00         mov bh, 0
3933   2011 56            add b, a
3934   2012 11            mov a, b
3935   2013 26 30 00      mov b, $30
3936   2016 60            sub a, b
3937   2017 27            mov b, a
3938   2018 E4            pop a
3939   2019             ; END TERMS
3940   2019 E7            pop d
3941   201A FD 43         mov [d], b
3942   201C             ;; return v; 
3943   201C FA FF FF      lea d, [bp + -1] ; $v
3944   201F 2A            mov b, [d]
3945   2020 F9            leave
3946   2021 09            ret
3947   2022             
3948   2022             input_int:
3949   2022 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3950   2025             ;; char x[8]; 
3951   2025 52 08 00      sub sp, 8 ; x
3952   2028             ;; input(x, 8); 
3953   2028 26 08 00      mov b, $8
3954   202B DD            push bl
3955   202C FA F9 FF      lea d, [bp + -7] ; $x
3956   202F 2D            mov b, d
3957   2030 FD AB         swp b
3958   2032 D8            push b
3959   2033 07 DA 1D      call input
3960   2036 51 03 00      add sp, 3
3961   2039             ;; if (!is_digit(*x)) 
3962   2039             _if55_cond:
3963   2039 FA F9 FF      lea d, [bp + -7] ; $x
3964   203C 2D            mov b, d
3965   203D 74            mov d, b
3966   203E 32            mov bl, [d]
3967   203F A7 00         mov bh, 0
3968   2041 DD            push bl
3969   2042 07 35 1A      call is_digit
3970   2045 51 01 00      add sp, 1
3971   2048 C0 00 00      cmp b, 0
3972   204B FD 71         seq ; !
3973   204D C0 00 00      cmp b, 0
3974   2050 C6 5D 20      je _if55_exit
3975   2053             _if55_true:
3976   2053             ;; return -1; 
3977   2053 26 01 00      mov b, $1
3978   2056 FD 97         neg b
3979   2058 F9            leave
3980   2059 09            ret
3981   205A 0A 5D 20      jmp _if55_exit
3982   205D             _if55_exit:
3983   205D             ;; return atoi(x); 
3984   205D FA F9 FF      lea d, [bp + -7] ; $x
3985   2060 2D            mov b, d
3986   2061 FD AB         swp b
3987   2063 D8            push b
3988   2064 07 2E 06      call atoi
3989   2067 51 02 00      add sp, 2
3990   206A F9            leave
3991   206B 09            ret
3992   206C             
3993   206C             print100:
3994   206C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3995   206F             ;; static char buf[16]; 
3996   206F 52 10 00      sub sp, 16 ; buf
3997   2072             ;; char *p; 
3998   2072 52 02 00      sub sp, 2 ; p
3999   2075             ;; *p = buf; 
4000   2075 FA FF FF      lea d, [bp + -1] ; $p
4001   2078 2A            mov b, [d]
4002   2079 D8            push b
4003   207A 3B 87 64      mov d, st_print100_buf_dt ; static buf
4004   207D 2D            mov b, d
4005   207E E7            pop d
4006   207F FD 3E         mov [d], bl
4007   2081             ;; if (v < 0) { 
4008   2081             _if56_cond:
4009   2081 FA 05 00      lea d, [bp + 5] ; $v
4010   2084 2A            mov b, [d]
4011   2085             ; START RELATIONAL
4012   2085 D7            push a
4013   2086 11            mov a, b
4014   2087 26 00 00      mov b, $0
4015   208A B0            cmp a, b
4016   208B FD 73         slt ; < (signed)
4017   208D E4            pop a
4018   208E             ; END RELATIONAL
4019   208E C0 00 00      cmp b, 0
4020   2091 C6 B8 20      je _if56_exit
4021   2094             _if56_true:
4022   2094             ;; v = -v; 
4023   2094 FA 05 00      lea d, [bp + 5] ; $v
4024   2097 DA            push d
4025   2098 FA 05 00      lea d, [bp + 5] ; $v
4026   209B 2A            mov b, [d]
4027   209C FD 97         neg b
4028   209E E7            pop d
4029   209F FD 43         mov [d], b
4030   20A1             ;; *p++ = '-'; 
4031   20A1 FA FF FF      lea d, [bp + -1] ; $p
4032   20A4 2A            mov b, [d]
4033   20A5 FD 77         inc b
4034   20A7 FA FF FF      lea d, [bp + -1] ; $p
4035   20AA FD 43         mov [d], b
4036   20AC FD 7D         dec b
4037   20AE D8            push b
4038   20AF 26 2D 00      mov b, $2d
4039   20B2 E7            pop d
4040   20B3 FD 3E         mov [d], bl
4041   20B5 0A B8 20      jmp _if56_exit
4042   20B8             _if56_exit:
4043   20B8             ;; return buf; 
4044   20B8 3B 87 64      mov d, st_print100_buf_dt ; static buf
4045   20BB 2D            mov b, d
4046   20BC F9            leave
4047   20BD 09            ret
4048   20BE             
4049   20BE             inoperable:
4050   20BE F8 00 00      enter 0 ; (push bp; mov bp, sp)
4051   20C1             ;; if (damage[u] < 0) { 
4052   20C1             _if57_cond:
4053   20C1 3B A5 62      mov d, _damage_data ; $damage
4054   20C4 D7            push a
4055   20C5 DA            push d
4056   20C6 FA 05 00      lea d, [bp + 5] ; $u
4057   20C9 32            mov bl, [d]
4058   20CA A7 00         mov bh, 0
4059   20CC E7            pop d
4060   20CD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4061   20D1 E4            pop a
4062   20D2 2A            mov b, [d]
4063   20D3             ; START RELATIONAL
4064   20D3 D7            push a
4065   20D4 11            mov a, b
4066   20D5 26 00 00      mov b, $0
4067   20D8 B0            cmp a, b
4068   20D9 FD 73         slt ; < (signed)
4069   20DB E4            pop a
4070   20DC             ; END RELATIONAL
4071   20DC C0 00 00      cmp b, 0
4072   20DF C6 29 21      je _if57_exit
4073   20E2             _if57_true:
4074   20E2             ;; printf("%s %s inoperable.\n", 
4075   20E2             _ternary59_cond:
4076   20E2 FA 05 00      lea d, [bp + 5] ; $u
4077   20E5 32            mov bl, [d]
4078   20E6 A7 00         mov bh, 0
4079   20E8             ; START RELATIONAL
4080   20E8 D7            push a
4081   20E9 11            mov a, b
4082   20EA 26 05 00      mov b, $5
4083   20ED B0            cmp a, b
4084   20EE FD 71         seq ; ==
4085   20F0 E4            pop a
4086   20F1             ; END RELATIONAL
4087   20F1 C0 00 00      cmp b, 0
4088   20F4 C6 FD 20      je _ternary59_false
4089   20F7             _ternary59_true:
4090   20F7 26 03 66      mov b, _s33 ; "are"
4091   20FA 0A 00 21      jmp _ternary59_exit
4092   20FD             _ternary59_false:
4093   20FD 26 07 66      mov b, _s34 ; "is"
4094   2100             _ternary59_exit:
4095   2100 FD AB         swp b
4096   2102 D8            push b
4097   2103 FA 05 00      lea d, [bp + 5] ; $u
4098   2106 32            mov bl, [d]
4099   2107 A7 00         mov bh, 0
4100   2109 FD AB         swp b
4101   210B D8            push b
4102   210C 07 5C 5E      call get_device_name
4103   210F 51 02 00      add sp, 2
4104   2112 FD AB         swp b
4105   2114 D8            push b
4106   2115 26 0A 66      mov b, _s35 ; "%s %s inoperable.\n"
4107   2118 FD AB         swp b
4108   211A D8            push b
4109   211B 07 BA 07      call printf
4110   211E 51 06 00      add sp, 6
4111   2121             ;; return 1; 
4112   2121 26 01 00      mov b, $1
4113   2124 F9            leave
4114   2125 09            ret
4115   2126 0A 29 21      jmp _if57_exit
4116   2129             _if57_exit:
4117   2129             ;; return 0; 
4118   2129 26 00 00      mov b, $0
4119   212C F9            leave
4120   212D 09            ret
4121   212E             
4122   212E             intro:
4123   212E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4124   2131             ;; showfile("startrek.intro"); 
4125   2131 26 1D 66      mov b, _s36 ; "startrek.intro"
4126   2134 FD AB         swp b
4127   2136 D8            push b
4128   2137 07 BA 61      call showfile
4129   213A 51 02 00      add sp, 2
4130   213D             ;; if (yesno()) 
4131   213D             _if60_cond:
4132   213D 07 60 1E      call yesno
4133   2140 C0 00 00      cmp b, 0
4134   2143 C6 55 21      je _if60_exit
4135   2146             _if60_true:
4136   2146             ;; showfile("startrek.doc"); 
4137   2146 26 2C 66      mov b, _s37 ; "startrek.doc"
4138   2149 FD AB         swp b
4139   214B D8            push b
4140   214C 07 BA 61      call showfile
4141   214F 51 02 00      add sp, 2
4142   2152 0A 55 21      jmp _if60_exit
4143   2155             _if60_exit:
4144   2155             ;; showfile("startrek.logo"); 
4145   2155 26 39 66      mov b, _s38 ; "startrek.logo"
4146   2158 FD AB         swp b
4147   215A D8            push b
4148   215B 07 BA 61      call showfile
4149   215E 51 02 00      add sp, 2
4150   2161             ;; stardate = TO_FIXED((get_rand(20) + 20) * 100); 
4151   2161 3B BD 62      mov d, _stardate ; $stardate
4152   2164 DA            push d
4153   2165 26 14 00      mov b, $14
4154   2168 FD AB         swp b
4155   216A D8            push b
4156   216B 07 7A 1D      call get_rand
4157   216E 51 02 00      add sp, 2
4158   2171             ; START TERMS
4159   2171 D7            push a
4160   2172 11            mov a, b
4161   2173 26 14 00      mov b, $14
4162   2176 56            add b, a
4163   2177 E4            pop a
4164   2178             ; END TERMS
4165   2178             ; START FACTORS
4166   2178 D7            push a
4167   2179 11            mov a, b
4168   217A 26 64 00      mov b, $64
4169   217D AC            mul a, b ; *
4170   217E 11            mov a, b
4171   217F 27            mov b, a
4172   2180 E4            pop a
4173   2181             ; END FACTORS
4174   2181 FD AB         swp b
4175   2183 D8            push b
4176   2184 07 34 1D      call TO_FIXED
4177   2187 51 02 00      add sp, 2
4178   218A E7            pop d
4179   218B FD 43         mov [d], b
4180   218D F9            leave
4181   218E 09            ret
4182   218F             
4183   218F             new_game:
4184   218F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4185   2192             ;; char cmd[4]; 
4186   2192 52 04 00      sub sp, 4 ; cmd
4187   2195             ;; initialize(); 
4188   2195 07 21 24      call initialize
4189   2198             ;; new_quadrant(); 
4190   2198 07 CA 28      call new_quadrant
4191   219B             ;; short_range_scan(); 
4192   219B 07 BC 35      call short_range_scan
4193   219E             ;; while (1) { 
4194   219E             _while61_cond:
4195   219E 26 01 00      mov b, $1
4196   21A1 C0 00 00      cmp b, 0
4197   21A4 C6 1F 24      je _while61_exit
4198   21A7             _while61_block:
4199   21A7             ;; if (shield + energy <= 10 && (energy < 10 || damage[7] < 0)) { 
4200   21A7             _if62_cond:
4201   21A7 3B 9E 62      mov d, _shield ; $shield
4202   21AA 2A            mov b, [d]
4203   21AB             ; START TERMS
4204   21AB D7            push a
4205   21AC 11            mov a, b
4206   21AD 3B E3 61      mov d, _energy ; $energy
4207   21B0 2A            mov b, [d]
4208   21B1 56            add b, a
4209   21B2 E4            pop a
4210   21B3             ; END TERMS
4211   21B3             ; START RELATIONAL
4212   21B3 D7            push a
4213   21B4 11            mov a, b
4214   21B5 26 0A 00      mov b, $a
4215   21B8 B0            cmp a, b
4216   21B9 FD 74         sle ; <= (signed)
4217   21BB E4            pop a
4218   21BC             ; END RELATIONAL
4219   21BC             ; START LOGICAL AND
4220   21BC D7            push a
4221   21BD 11            mov a, b
4222   21BE 3B E3 61      mov d, _energy ; $energy
4223   21C1 2A            mov b, [d]
4224   21C2             ; START RELATIONAL
4225   21C2 D7            push a
4226   21C3 11            mov a, b
4227   21C4 26 0A 00      mov b, $a
4228   21C7 B0            cmp a, b
4229   21C8 FD 73         slt ; < (signed)
4230   21CA E4            pop a
4231   21CB             ; END RELATIONAL
4232   21CB             ; START LOGICAL OR
4233   21CB D7            push a
4234   21CC 11            mov a, b
4235   21CD 3B A5 62      mov d, _damage_data ; $damage
4236   21D0 D7            push a
4237   21D1 DA            push d
4238   21D2 26 07 00      mov b, $7
4239   21D5 E7            pop d
4240   21D6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4241   21DA E4            pop a
4242   21DB 2A            mov b, [d]
4243   21DC             ; START RELATIONAL
4244   21DC D7            push a
4245   21DD 11            mov a, b
4246   21DE 26 00 00      mov b, $0
4247   21E1 B0            cmp a, b
4248   21E2 FD 73         slt ; < (signed)
4249   21E4 E4            pop a
4250   21E5             ; END RELATIONAL
4251   21E5 FD A8         sor a, b ; ||
4252   21E7 E4            pop a
4253   21E8             ; END LOGICAL OR
4254   21E8 FD A7         sand a, b
4255   21EA E4            pop a
4256   21EB             ; END LOGICAL AND
4257   21EB C0 00 00      cmp b, 0
4258   21EE C6 03 22      je _if62_exit
4259   21F1             _if62_true:
4260   21F1             ;; showfile("startrek.fatal"); 
4261   21F1 26 47 66      mov b, _s39 ; "startrek.fatal"
4262   21F4 FD AB         swp b
4263   21F6 D8            push b
4264   21F7 07 BA 61      call showfile
4265   21FA 51 02 00      add sp, 2
4266   21FD             ;; end_of_time(); 
4267   21FD 07 05 56      call end_of_time
4268   2200 0A 03 22      jmp _if62_exit
4269   2203             _if62_exit:
4270   2203             ;; puts("Command? "); 
4271   2203 26 56 66      mov b, _s40 ; "Command? "
4272   2206 FD AB         swp b
4273   2208 D8            push b
4274   2209 07 4A 15      call puts
4275   220C 51 02 00      add sp, 2
4276   220F             ;; input(cmd, 4); 
4277   220F 26 04 00      mov b, $4
4278   2212 DD            push bl
4279   2213 FA FD FF      lea d, [bp + -3] ; $cmd
4280   2216 2D            mov b, d
4281   2217 FD AB         swp b
4282   2219 D8            push b
4283   221A 07 DA 1D      call input
4284   221D 51 03 00      add sp, 3
4285   2220             ;; putchar('\n'); 
4286   2220 26 0A 00      mov b, $a
4287   2223 DD            push bl
4288   2224 07 14 15      call putchar
4289   2227 51 01 00      add sp, 1
4290   222A             ;; if (!strncmp(cmd, "nav", 3)) 
4291   222A             _if63_cond:
4292   222A 26 03 00      mov b, $3
4293   222D FD AB         swp b
4294   222F D8            push b
4295   2230 26 60 66      mov b, _s41 ; "nav"
4296   2233 FD AB         swp b
4297   2235 D8            push b
4298   2236 FA FD FF      lea d, [bp + -3] ; $cmd
4299   2239 2D            mov b, d
4300   223A FD AB         swp b
4301   223C D8            push b
4302   223D 07 D3 04      call strncmp
4303   2240 51 06 00      add sp, 6
4304   2243 C0 00 00      cmp b, 0
4305   2246 FD 71         seq ; !
4306   2248 C0 00 00      cmp b, 0
4307   224B C6 54 22      je _if63_else
4308   224E             _if63_true:
4309   224E             ;; course_control(); 
4310   224E 07 61 2C      call course_control
4311   2251 0A 1C 24      jmp _if63_exit
4312   2254             _if63_else:
4313   2254             ;; if (!strncmp(cmd, "srs", 3)) 
4314   2254             _if64_cond:
4315   2254 26 03 00      mov b, $3
4316   2257 FD AB         swp b
4317   2259 D8            push b
4318   225A 26 64 66      mov b, _s42 ; "srs"
4319   225D FD AB         swp b
4320   225F D8            push b
4321   2260 FA FD FF      lea d, [bp + -3] ; $cmd
4322   2263 2D            mov b, d
4323   2264 FD AB         swp b
4324   2266 D8            push b
4325   2267 07 D3 04      call strncmp
4326   226A 51 06 00      add sp, 6
4327   226D C0 00 00      cmp b, 0
4328   2270 FD 71         seq ; !
4329   2272 C0 00 00      cmp b, 0
4330   2275 C6 7E 22      je _if64_else
4331   2278             _if64_true:
4332   2278             ;; short_range_scan(); 
4333   2278 07 BC 35      call short_range_scan
4334   227B 0A 1C 24      jmp _if64_exit
4335   227E             _if64_else:
4336   227E             ;; if (!strncmp(cmd, "lrs", 3)) 
4337   227E             _if65_cond:
4338   227E 26 03 00      mov b, $3
4339   2281 FD AB         swp b
4340   2283 D8            push b
4341   2284 26 68 66      mov b, _s43 ; "lrs"
4342   2287 FD AB         swp b
4343   2289 D8            push b
4344   228A FA FD FF      lea d, [bp + -3] ; $cmd
4345   228D 2D            mov b, d
4346   228E FD AB         swp b
4347   2290 D8            push b
4348   2291 07 D3 04      call strncmp
4349   2294 51 06 00      add sp, 6
4350   2297 C0 00 00      cmp b, 0
4351   229A FD 71         seq ; !
4352   229C C0 00 00      cmp b, 0
4353   229F C6 A8 22      je _if65_else
4354   22A2             _if65_true:
4355   22A2             ;; long_range_scan(); 
4356   22A2 07 48 3A      call long_range_scan
4357   22A5 0A 1C 24      jmp _if65_exit
4358   22A8             _if65_else:
4359   22A8             ;; if (!strncmp(cmd, "pha", 3)) 
4360   22A8             _if66_cond:
4361   22A8 26 03 00      mov b, $3
4362   22AB FD AB         swp b
4363   22AD D8            push b
4364   22AE 26 6C 66      mov b, _s44 ; "pha"
4365   22B1 FD AB         swp b
4366   22B3 D8            push b
4367   22B4 FA FD FF      lea d, [bp + -3] ; $cmd
4368   22B7 2D            mov b, d
4369   22B8 FD AB         swp b
4370   22BA D8            push b
4371   22BB 07 D3 04      call strncmp
4372   22BE 51 06 00      add sp, 6
4373   22C1 C0 00 00      cmp b, 0
4374   22C4 FD 71         seq ; !
4375   22C6 C0 00 00      cmp b, 0
4376   22C9 C6 D2 22      je _if66_else
4377   22CC             _if66_true:
4378   22CC             ;; phaser_control(); 
4379   22CC 07 69 3C      call phaser_control
4380   22CF 0A 1C 24      jmp _if66_exit
4381   22D2             _if66_else:
4382   22D2             ;; if (!strncmp(cmd, "tor", 3)) 
4383   22D2             _if67_cond:
4384   22D2 26 03 00      mov b, $3
4385   22D5 FD AB         swp b
4386   22D7 D8            push b
4387   22D8 26 70 66      mov b, _s45 ; "tor"
4388   22DB FD AB         swp b
4389   22DD D8            push b
4390   22DE FA FD FF      lea d, [bp + -3] ; $cmd
4391   22E1 2D            mov b, d
4392   22E2 FD AB         swp b
4393   22E4 D8            push b
4394   22E5 07 D3 04      call strncmp
4395   22E8 51 06 00      add sp, 6
4396   22EB C0 00 00      cmp b, 0
4397   22EE FD 71         seq ; !
4398   22F0 C0 00 00      cmp b, 0
4399   22F3 C6 FC 22      je _if67_else
4400   22F6             _if67_true:
4401   22F6             ;; photon_torpedoes(); 
4402   22F6 07 35 41      call photon_torpedoes
4403   22F9 0A 1C 24      jmp _if67_exit
4404   22FC             _if67_else:
4405   22FC             ;; if (!strncmp(cmd, "shi", 3)) 
4406   22FC             _if68_cond:
4407   22FC 26 03 00      mov b, $3
4408   22FF FD AB         swp b
4409   2301 D8            push b
4410   2302 26 74 66      mov b, _s46 ; "shi"
4411   2305 FD AB         swp b
4412   2307 D8            push b
4413   2308 FA FD FF      lea d, [bp + -3] ; $cmd
4414   230B 2D            mov b, d
4415   230C FD AB         swp b
4416   230E D8            push b
4417   230F 07 D3 04      call strncmp
4418   2312 51 06 00      add sp, 6
4419   2315 C0 00 00      cmp b, 0
4420   2318 FD 71         seq ; !
4421   231A C0 00 00      cmp b, 0
4422   231D C6 26 23      je _if68_else
4423   2320             _if68_true:
4424   2320             ;; shield_control(); 
4425   2320 07 CA 49      call shield_control
4426   2323 0A 1C 24      jmp _if68_exit
4427   2326             _if68_else:
4428   2326             ;; if (!strncmp(cmd, "dam", 3)) 
4429   2326             _if69_cond:
4430   2326 26 03 00      mov b, $3
4431   2329 FD AB         swp b
4432   232B D8            push b
4433   232C 26 78 66      mov b, _s47 ; "dam"
4434   232F FD AB         swp b
4435   2331 D8            push b
4436   2332 FA FD FF      lea d, [bp + -3] ; $cmd
4437   2335 2D            mov b, d
4438   2336 FD AB         swp b
4439   2338 D8            push b
4440   2339 07 D3 04      call strncmp
4441   233C 51 06 00      add sp, 6
4442   233F C0 00 00      cmp b, 0
4443   2342 FD 71         seq ; !
4444   2344 C0 00 00      cmp b, 0
4445   2347 C6 50 23      je _if69_else
4446   234A             _if69_true:
4447   234A             ;; damage_control(); 
4448   234A 07 78 47      call damage_control
4449   234D 0A 1C 24      jmp _if69_exit
4450   2350             _if69_else:
4451   2350             ;; if (!strncmp(cmd, "com", 3)) 
4452   2350             _if70_cond:
4453   2350 26 03 00      mov b, $3
4454   2353 FD AB         swp b
4455   2355 D8            push b
4456   2356 26 7C 66      mov b, _s48 ; "com"
4457   2359 FD AB         swp b
4458   235B D8            push b
4459   235C FA FD FF      lea d, [bp + -3] ; $cmd
4460   235F 2D            mov b, d
4461   2360 FD AB         swp b
4462   2362 D8            push b
4463   2363 07 D3 04      call strncmp
4464   2366 51 06 00      add sp, 6
4465   2369 C0 00 00      cmp b, 0
4466   236C FD 71         seq ; !
4467   236E C0 00 00      cmp b, 0
4468   2371 C6 7A 23      je _if70_else
4469   2374             _if70_true:
4470   2374             ;; library_computer(); 
4471   2374 07 A6 4A      call library_computer
4472   2377 0A 1C 24      jmp _if70_exit
4473   237A             _if70_else:
4474   237A             ;; if (!strncmp(cmd, "xxx", 3)) 
4475   237A             _if71_cond:
4476   237A 26 03 00      mov b, $3
4477   237D FD AB         swp b
4478   237F D8            push b
4479   2380 26 80 66      mov b, _s49 ; "xxx"
4480   2383 FD AB         swp b
4481   2385 D8            push b
4482   2386 FA FD FF      lea d, [bp + -3] ; $cmd
4483   2389 2D            mov b, d
4484   238A FD AB         swp b
4485   238C D8            push b
4486   238D 07 D3 04      call strncmp
4487   2390 51 06 00      add sp, 6
4488   2393 C0 00 00      cmp b, 0
4489   2396 FD 71         seq ; !
4490   2398 C0 00 00      cmp b, 0
4491   239B C6 A4 23      je _if71_else
4492   239E             _if71_true:
4493   239E             ;; resign_commision(); 
4494   239E 07 29 56      call resign_commision
4495   23A1 0A 1C 24      jmp _if71_exit
4496   23A4             _if71_else:
4497   23A4             ;; puts("Enter one of the following:\n"); 
4498   23A4 26 84 66      mov b, _s50 ; "Enter one of the following:\n"
4499   23A7 FD AB         swp b
4500   23A9 D8            push b
4501   23AA 07 4A 15      call puts
4502   23AD 51 02 00      add sp, 2
4503   23B0             ;; puts("  nav - To Set Course"); 
4504   23B0 26 A1 66      mov b, _s51 ; "  nav - To Set Course"
4505   23B3 FD AB         swp b
4506   23B5 D8            push b
4507   23B6 07 4A 15      call puts
4508   23B9 51 02 00      add sp, 2
4509   23BC             ;; puts("  srs - Short Range Sensors"); 
4510   23BC 26 B7 66      mov b, _s52 ; "  srs - Short Range Sensors"
4511   23BF FD AB         swp b
4512   23C1 D8            push b
4513   23C2 07 4A 15      call puts
4514   23C5 51 02 00      add sp, 2
4515   23C8             ;; puts("  lrs - Long Range Sensors"); 
4516   23C8 26 D3 66      mov b, _s53 ; "  lrs - Long Range Sensors"
4517   23CB FD AB         swp b
4518   23CD D8            push b
4519   23CE 07 4A 15      call puts
4520   23D1 51 02 00      add sp, 2
4521   23D4             ;; puts("  pha - Phasers"); 
4522   23D4 26 EE 66      mov b, _s54 ; "  pha - Phasers"
4523   23D7 FD AB         swp b
4524   23D9 D8            push b
4525   23DA 07 4A 15      call puts
4526   23DD 51 02 00      add sp, 2
4527   23E0             ;; puts("  tor - Photon Torpedoes"); 
4528   23E0 26 FE 66      mov b, _s55 ; "  tor - Photon Torpedoes"
4529   23E3 FD AB         swp b
4530   23E5 D8            push b
4531   23E6 07 4A 15      call puts
4532   23E9 51 02 00      add sp, 2
4533   23EC             ;; puts("  shi - Shield Control"); 
4534   23EC 26 17 67      mov b, _s56 ; "  shi - Shield Control"
4535   23EF FD AB         swp b
4536   23F1 D8            push b
4537   23F2 07 4A 15      call puts
4538   23F5 51 02 00      add sp, 2
4539   23F8             ;; puts("  dam - Damage Control"); 
4540   23F8 26 2E 67      mov b, _s57 ; "  dam - Damage Control"
4541   23FB FD AB         swp b
4542   23FD D8            push b
4543   23FE 07 4A 15      call puts
4544   2401 51 02 00      add sp, 2
4545   2404             ;; puts("  com - Library Computer"); 
4546   2404 26 45 67      mov b, _s58 ; "  com - Library Computer"
4547   2407 FD AB         swp b
4548   2409 D8            push b
4549   240A 07 4A 15      call puts
4550   240D 51 02 00      add sp, 2
4551   2410             ;; puts("  xxx - Resign Command\n"); 
4552   2410 26 5E 67      mov b, _s59 ; "  xxx - Resign Command\n"
4553   2413 FD AB         swp b
4554   2415 D8            push b
4555   2416 07 4A 15      call puts
4556   2419 51 02 00      add sp, 2
4557   241C             _if71_exit:
4558   241C             _if70_exit:
4559   241C             _if69_exit:
4560   241C             _if68_exit:
4561   241C             _if67_exit:
4562   241C             _if66_exit:
4563   241C             _if65_exit:
4564   241C             _if64_exit:
4565   241C             _if63_exit:
4566   241C 0A 9E 21      jmp _while61_cond
4567   241F             _while61_exit:
4568   241F F9            leave
4569   2420 09            ret
4570   2421             
4571   2421             initialize:
4572   2421 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4573   2424             ;; int i, j; 
4574   2424 52 02 00      sub sp, 2 ; i
4575   2427 52 02 00      sub sp, 2 ; j
4576   242A             ;; unsigned char                         yp, xp; 
4577   242A 52 01 00      sub sp, 1 ; yp
4578   242D 52 01 00      sub sp, 1 ; xp
4579   2430             ;; unsigned char                         r; 
4580   2430 52 01 00      sub sp, 1 ; r
4581   2433             ;; time_start = FROM_FIXED(stardate); 
4582   2433 3B A1 62      mov d, _time_start ; $time_start
4583   2436 DA            push d
4584   2437 3B BD 62      mov d, _stardate ; $stardate
4585   243A 2A            mov b, [d]
4586   243B FD AB         swp b
4587   243D D8            push b
4588   243E 07 46 1D      call FROM_FIXED
4589   2441 51 02 00      add sp, 2
4590   2444 E7            pop d
4591   2445 FD 43         mov [d], b
4592   2447             ;; time_up = 25 + get_rand(10); 
4593   2447 3B A3 62      mov d, _time_up ; $time_up
4594   244A DA            push d
4595   244B 26 19 00      mov b, $19
4596   244E             ; START TERMS
4597   244E D7            push a
4598   244F 11            mov a, b
4599   2450 26 0A 00      mov b, $a
4600   2453 FD AB         swp b
4601   2455 D8            push b
4602   2456 07 7A 1D      call get_rand
4603   2459 51 02 00      add sp, 2
4604   245C 56            add b, a
4605   245D E4            pop a
4606   245E             ; END TERMS
4607   245E E7            pop d
4608   245F FD 43         mov [d], b
4609   2461             ;; docked = 0; 
4610   2461 3B E2 61      mov d, _docked ; $docked
4611   2464 DA            push d
4612   2465 26 00 00      mov b, $0
4613   2468 E7            pop d
4614   2469 FD 3E         mov [d], bl
4615   246B             ;; energy = energy0; 
4616   246B 3B E3 61      mov d, _energy ; $energy
4617   246E DA            push d
4618   246F 3B E5 61      mov d, _energy0 ; $energy0
4619   2472 2A            mov b, [d]
4620   2473 E7            pop d
4621   2474 FD 43         mov [d], b
4622   2476             ;; torps = torps0; 
4623   2476 3B 98 62      mov d, _torps ; $torps
4624   2479 DA            push d
4625   247A 3B 99 62      mov d, _torps0 ; $torps0
4626   247D 32            mov bl, [d]
4627   247E A7 00         mov bh, 0
4628   2480 E7            pop d
4629   2481 FD 3E         mov [d], bl
4630   2483             ;; shield = 0; 
4631   2483 3B 9E 62      mov d, _shield ; $shield
4632   2486 DA            push d
4633   2487 26 00 00      mov b, $0
4634   248A E7            pop d
4635   248B FD 43         mov [d], b
4636   248D             ;; quad_y = rand8(); 
4637   248D 3B 9A 62      mov d, _quad_y ; $quad_y
4638   2490 DA            push d
4639   2491 07 C9 1D      call rand8
4640   2494 E7            pop d
4641   2495 FD 43         mov [d], b
4642   2497             ;; quad_x = rand8(); 
4643   2497 3B 9C 62      mov d, _quad_x ; $quad_x
4644   249A DA            push d
4645   249B 07 C9 1D      call rand8
4646   249E E7            pop d
4647   249F FD 43         mov [d], b
4648   24A1             ;; ship_y = TO_FIXED00(rand8()); 
4649   24A1 3B B9 62      mov d, _ship_y ; $ship_y
4650   24A4 DA            push d
4651   24A5 07 C9 1D      call rand8
4652   24A8 FD AB         swp b
4653   24AA D8            push b
4654   24AB 07 57 1D      call TO_FIXED00
4655   24AE 51 02 00      add sp, 2
4656   24B1 E7            pop d
4657   24B2 FD 43         mov [d], b
4658   24B4             ;; ship_x = TO_FIXED00(rand8()); 
4659   24B4 3B BB 62      mov d, _ship_x ; $ship_x
4660   24B7 DA            push d
4661   24B8 07 C9 1D      call rand8
4662   24BB FD AB         swp b
4663   24BD D8            push b
4664   24BE 07 57 1D      call TO_FIXED00
4665   24C1 51 02 00      add sp, 2
4666   24C4 E7            pop d
4667   24C5 FD 43         mov [d], b
4668   24C7             ;; for (i = 1; i <= 8; i++) 
4669   24C7             _for72_init:
4670   24C7 FA FF FF      lea d, [bp + -1] ; $i
4671   24CA DA            push d
4672   24CB 26 01 00      mov b, $1
4673   24CE E7            pop d
4674   24CF FD 43         mov [d], b
4675   24D1             _for72_cond:
4676   24D1 FA FF FF      lea d, [bp + -1] ; $i
4677   24D4 2A            mov b, [d]
4678   24D5             ; START RELATIONAL
4679   24D5 D7            push a
4680   24D6 11            mov a, b
4681   24D7 26 08 00      mov b, $8
4682   24DA B0            cmp a, b
4683   24DB FD 74         sle ; <= (signed)
4684   24DD E4            pop a
4685   24DE             ; END RELATIONAL
4686   24DE C0 00 00      cmp b, 0
4687   24E1 C6 0A 25      je _for72_exit
4688   24E4             _for72_block:
4689   24E4             ;; damage[i] = 0; 
4690   24E4 3B A5 62      mov d, _damage_data ; $damage
4691   24E7 D7            push a
4692   24E8 DA            push d
4693   24E9 FA FF FF      lea d, [bp + -1] ; $i
4694   24EC 2A            mov b, [d]
4695   24ED E7            pop d
4696   24EE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4697   24F2 E4            pop a
4698   24F3 DA            push d
4699   24F4 26 00 00      mov b, $0
4700   24F7 E7            pop d
4701   24F8 FD 43         mov [d], b
4702   24FA             _for72_update:
4703   24FA FA FF FF      lea d, [bp + -1] ; $i
4704   24FD 2A            mov b, [d]
4705   24FE FD 77         inc b
4706   2500 FA FF FF      lea d, [bp + -1] ; $i
4707   2503 FD 43         mov [d], b
4708   2505 FD 7D         dec b
4709   2507 0A D1 24      jmp _for72_cond
4710   250A             _for72_exit:
4711   250A             ;; for (i = 1; i <= 8; i++) { 
4712   250A             _for73_init:
4713   250A FA FF FF      lea d, [bp + -1] ; $i
4714   250D DA            push d
4715   250E 26 01 00      mov b, $1
4716   2511 E7            pop d
4717   2512 FD 43         mov [d], b
4718   2514             _for73_cond:
4719   2514 FA FF FF      lea d, [bp + -1] ; $i
4720   2517 2A            mov b, [d]
4721   2518             ; START RELATIONAL
4722   2518 D7            push a
4723   2519 11            mov a, b
4724   251A 26 08 00      mov b, $8
4725   251D B0            cmp a, b
4726   251E FD 74         sle ; <= (signed)
4727   2520 E4            pop a
4728   2521             ; END RELATIONAL
4729   2521 C0 00 00      cmp b, 0
4730   2524 C6 8D 26      je _for73_exit
4731   2527             _for73_block:
4732   2527             ;; for (j = 1; j <= 8; j++) { 
4733   2527             _for74_init:
4734   2527 FA FD FF      lea d, [bp + -3] ; $j
4735   252A DA            push d
4736   252B 26 01 00      mov b, $1
4737   252E E7            pop d
4738   252F FD 43         mov [d], b
4739   2531             _for74_cond:
4740   2531 FA FD FF      lea d, [bp + -3] ; $j
4741   2534 2A            mov b, [d]
4742   2535             ; START RELATIONAL
4743   2535 D7            push a
4744   2536 11            mov a, b
4745   2537 26 08 00      mov b, $8
4746   253A B0            cmp a, b
4747   253B FD 74         sle ; <= (signed)
4748   253D E4            pop a
4749   253E             ; END RELATIONAL
4750   253E C0 00 00      cmp b, 0
4751   2541 C6 7D 26      je _for74_exit
4752   2544             _for74_block:
4753   2544             ;; r = get_rand(100); 
4754   2544 FA FA FF      lea d, [bp + -6] ; $r
4755   2547 DA            push d
4756   2548 26 64 00      mov b, $64
4757   254B FD AB         swp b
4758   254D D8            push b
4759   254E 07 7A 1D      call get_rand
4760   2551 51 02 00      add sp, 2
4761   2554 E7            pop d
4762   2555 FD 3E         mov [d], bl
4763   2557             ;; klingons = 0; 
4764   2557 3B 95 62      mov d, _klingons ; $klingons
4765   255A DA            push d
4766   255B 26 00 00      mov b, $0
4767   255E E7            pop d
4768   255F FD 3E         mov [d], bl
4769   2561             ;; if (r > 98) 
4770   2561             _if75_cond:
4771   2561 FA FA FF      lea d, [bp + -6] ; $r
4772   2564 32            mov bl, [d]
4773   2565 A7 00         mov bh, 0
4774   2567             ; START RELATIONAL
4775   2567 D7            push a
4776   2568 11            mov a, b
4777   2569 26 62 00      mov b, $62
4778   256C B0            cmp a, b
4779   256D FD 81         sgu ; > (unsigned)
4780   256F E4            pop a
4781   2570             ; END RELATIONAL
4782   2570 C0 00 00      cmp b, 0
4783   2573 C6 83 25      je _if75_else
4784   2576             _if75_true:
4785   2576             ;; klingons = 3; 
4786   2576 3B 95 62      mov d, _klingons ; $klingons
4787   2579 DA            push d
4788   257A 26 03 00      mov b, $3
4789   257D E7            pop d
4790   257E FD 3E         mov [d], bl
4791   2580 0A C7 25      jmp _if75_exit
4792   2583             _if75_else:
4793   2583             ;; if (r > 95) 
4794   2583             _if76_cond:
4795   2583 FA FA FF      lea d, [bp + -6] ; $r
4796   2586 32            mov bl, [d]
4797   2587 A7 00         mov bh, 0
4798   2589             ; START RELATIONAL
4799   2589 D7            push a
4800   258A 11            mov a, b
4801   258B 26 5F 00      mov b, $5f
4802   258E B0            cmp a, b
4803   258F FD 81         sgu ; > (unsigned)
4804   2591 E4            pop a
4805   2592             ; END RELATIONAL
4806   2592 C0 00 00      cmp b, 0
4807   2595 C6 A5 25      je _if76_else
4808   2598             _if76_true:
4809   2598             ;; klingons = 2; 
4810   2598 3B 95 62      mov d, _klingons ; $klingons
4811   259B DA            push d
4812   259C 26 02 00      mov b, $2
4813   259F E7            pop d
4814   25A0 FD 3E         mov [d], bl
4815   25A2 0A C7 25      jmp _if76_exit
4816   25A5             _if76_else:
4817   25A5             ;; if (r > 80) 
4818   25A5             _if77_cond:
4819   25A5 FA FA FF      lea d, [bp + -6] ; $r
4820   25A8 32            mov bl, [d]
4821   25A9 A7 00         mov bh, 0
4822   25AB             ; START RELATIONAL
4823   25AB D7            push a
4824   25AC 11            mov a, b
4825   25AD 26 50 00      mov b, $50
4826   25B0 B0            cmp a, b
4827   25B1 FD 81         sgu ; > (unsigned)
4828   25B3 E4            pop a
4829   25B4             ; END RELATIONAL
4830   25B4 C0 00 00      cmp b, 0
4831   25B7 C6 C7 25      je _if77_exit
4832   25BA             _if77_true:
4833   25BA             ;; klingons = 1; 
4834   25BA 3B 95 62      mov d, _klingons ; $klingons
4835   25BD DA            push d
4836   25BE 26 01 00      mov b, $1
4837   25C1 E7            pop d
4838   25C2 FD 3E         mov [d], bl
4839   25C4 0A C7 25      jmp _if77_exit
4840   25C7             _if77_exit:
4841   25C7             _if76_exit:
4842   25C7             _if75_exit:
4843   25C7             ;; klingons_left = klingons_left + klingons; 
4844   25C7 3B 97 62      mov d, _klingons_left ; $klingons_left
4845   25CA DA            push d
4846   25CB 3B 97 62      mov d, _klingons_left ; $klingons_left
4847   25CE 32            mov bl, [d]
4848   25CF A7 00         mov bh, 0
4849   25D1             ; START TERMS
4850   25D1 D7            push a
4851   25D2 11            mov a, b
4852   25D3 3B 95 62      mov d, _klingons ; $klingons
4853   25D6 32            mov bl, [d]
4854   25D7 A7 00         mov bh, 0
4855   25D9 56            add b, a
4856   25DA E4            pop a
4857   25DB             ; END TERMS
4858   25DB E7            pop d
4859   25DC FD 3E         mov [d], bl
4860   25DE             ;; starbases = 0; 
4861   25DE 3B BF 61      mov d, _starbases ; $starbases
4862   25E1 DA            push d
4863   25E2 26 00 00      mov b, $0
4864   25E5 E7            pop d
4865   25E6 FD 3E         mov [d], bl
4866   25E8             ;; if (get_rand(100) > 96) 
4867   25E8             _if78_cond:
4868   25E8 26 64 00      mov b, $64
4869   25EB FD AB         swp b
4870   25ED D8            push b
4871   25EE 07 7A 1D      call get_rand
4872   25F1 51 02 00      add sp, 2
4873   25F4             ; START RELATIONAL
4874   25F4 D7            push a
4875   25F5 11            mov a, b
4876   25F6 26 60 00      mov b, $60
4877   25F9 B0            cmp a, b
4878   25FA FD 7F         sgt ; >
4879   25FC E4            pop a
4880   25FD             ; END RELATIONAL
4881   25FD C0 00 00      cmp b, 0
4882   2600 C6 10 26      je _if78_exit
4883   2603             _if78_true:
4884   2603             ;; starbases = 1; 
4885   2603 3B BF 61      mov d, _starbases ; $starbases
4886   2606 DA            push d
4887   2607 26 01 00      mov b, $1
4888   260A E7            pop d
4889   260B FD 3E         mov [d], bl
4890   260D 0A 10 26      jmp _if78_exit
4891   2610             _if78_exit:
4892   2610             ;; starbases_left = starbases_left + starbases; 
4893   2610 3B C2 61      mov d, _starbases_left ; $starbases_left
4894   2613 DA            push d
4895   2614 3B C2 61      mov d, _starbases_left ; $starbases_left
4896   2617 32            mov bl, [d]
4897   2618 A7 00         mov bh, 0
4898   261A             ; START TERMS
4899   261A D7            push a
4900   261B 11            mov a, b
4901   261C 3B BF 61      mov d, _starbases ; $starbases
4902   261F 32            mov bl, [d]
4903   2620 A7 00         mov bh, 0
4904   2622 56            add b, a
4905   2623 E4            pop a
4906   2624             ; END TERMS
4907   2624 E7            pop d
4908   2625 FD 3E         mov [d], bl
4909   2627             ;; map[i][j] = (klingons << 8) + (starbases << 4) + rand8(); 
4910   2627 3B E7 61      mov d, _map_data ; $map
4911   262A D7            push a
4912   262B DA            push d
4913   262C FA FF FF      lea d, [bp + -1] ; $i
4914   262F 2A            mov b, [d]
4915   2630 E7            pop d
4916   2631 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4917   2635 DA            push d
4918   2636 FA FD FF      lea d, [bp + -3] ; $j
4919   2639 2A            mov b, [d]
4920   263A E7            pop d
4921   263B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4922   263F E4            pop a
4923   2640 DA            push d
4924   2641 3B 95 62      mov d, _klingons ; $klingons
4925   2644 32            mov bl, [d]
4926   2645 A7 00         mov bh, 0
4927   2647             ; START SHIFT
4928   2647 D7            push a
4929   2648 11            mov a, b
4930   2649 26 08 00      mov b, $8
4931   264C FD 39         mov c, b
4932   264E 9D            shl a, cl
4933   264F 27            mov b, a
4934   2650 E4            pop a
4935   2651             ; END SHIFT
4936   2651             ; START TERMS
4937   2651 D7            push a
4938   2652 11            mov a, b
4939   2653 3B BF 61      mov d, _starbases ; $starbases
4940   2656 32            mov bl, [d]
4941   2657 A7 00         mov bh, 0
4942   2659             ; START SHIFT
4943   2659 D7            push a
4944   265A 11            mov a, b
4945   265B 26 04 00      mov b, $4
4946   265E FD 39         mov c, b
4947   2660 9D            shl a, cl
4948   2661 27            mov b, a
4949   2662 E4            pop a
4950   2663             ; END SHIFT
4951   2663 56            add b, a
4952   2664 11            mov a, b
4953   2665 07 C9 1D      call rand8
4954   2668 56            add b, a
4955   2669 E4            pop a
4956   266A             ; END TERMS
4957   266A E7            pop d
4958   266B FD 43         mov [d], b
4959   266D             _for74_update:
4960   266D FA FD FF      lea d, [bp + -3] ; $j
4961   2670 2A            mov b, [d]
4962   2671 FD 77         inc b
4963   2673 FA FD FF      lea d, [bp + -3] ; $j
4964   2676 FD 43         mov [d], b
4965   2678 FD 7D         dec b
4966   267A 0A 31 25      jmp _for74_cond
4967   267D             _for74_exit:
4968   267D             _for73_update:
4969   267D FA FF FF      lea d, [bp + -1] ; $i
4970   2680 2A            mov b, [d]
4971   2681 FD 77         inc b
4972   2683 FA FF FF      lea d, [bp + -1] ; $i
4973   2686 FD 43         mov [d], b
4974   2688 FD 7D         dec b
4975   268A 0A 14 25      jmp _for73_cond
4976   268D             _for73_exit:
4977   268D             ;; if (klingons_left > time_up) 
4978   268D             _if79_cond:
4979   268D 3B 97 62      mov d, _klingons_left ; $klingons_left
4980   2690 32            mov bl, [d]
4981   2691 A7 00         mov bh, 0
4982   2693             ; START RELATIONAL
4983   2693 D7            push a
4984   2694 11            mov a, b
4985   2695 3B A3 62      mov d, _time_up ; $time_up
4986   2698 2A            mov b, [d]
4987   2699 B0            cmp a, b
4988   269A FD 81         sgu ; > (unsigned)
4989   269C E4            pop a
4990   269D             ; END RELATIONAL
4991   269D C0 00 00      cmp b, 0
4992   26A0 C6 BA 26      je _if79_exit
4993   26A3             _if79_true:
4994   26A3             ;; time_up = klingons_left + 1; 
4995   26A3 3B A3 62      mov d, _time_up ; $time_up
4996   26A6 DA            push d
4997   26A7 3B 97 62      mov d, _klingons_left ; $klingons_left
4998   26AA 32            mov bl, [d]
4999   26AB A7 00         mov bh, 0
5000   26AD             ; START TERMS
5001   26AD D7            push a
5002   26AE 11            mov a, b
5003   26AF 26 01 00      mov b, $1
5004   26B2 56            add b, a
5005   26B3 E4            pop a
5006   26B4             ; END TERMS
5007   26B4 E7            pop d
5008   26B5 FD 43         mov [d], b
5009   26B7 0A BA 26      jmp _if79_exit
5010   26BA             _if79_exit:
5011   26BA             ;; if (starbases_left == 0) { 
5012   26BA             _if80_cond:
5013   26BA 3B C2 61      mov d, _starbases_left ; $starbases_left
5014   26BD 32            mov bl, [d]
5015   26BE A7 00         mov bh, 0
5016   26C0             ; START RELATIONAL
5017   26C0 D7            push a
5018   26C1 11            mov a, b
5019   26C2 26 00 00      mov b, $0
5020   26C5 B0            cmp a, b
5021   26C6 FD 71         seq ; ==
5022   26C8 E4            pop a
5023   26C9             ; END RELATIONAL
5024   26C9 C0 00 00      cmp b, 0
5025   26CC C6 D4 27      je _if80_exit
5026   26CF             _if80_true:
5027   26CF             ;; yp = rand8(); 
5028   26CF FA FC FF      lea d, [bp + -4] ; $yp
5029   26D2 DA            push d
5030   26D3 07 C9 1D      call rand8
5031   26D6 E7            pop d
5032   26D7 FD 3E         mov [d], bl
5033   26D9             ;; xp = rand8(); 
5034   26D9 FA FB FF      lea d, [bp + -5] ; $xp
5035   26DC DA            push d
5036   26DD 07 C9 1D      call rand8
5037   26E0 E7            pop d
5038   26E1 FD 3E         mov [d], bl
5039   26E3             ;; if (map[yp][xp] < 0x200) { 
5040   26E3             _if81_cond:
5041   26E3 3B E7 61      mov d, _map_data ; $map
5042   26E6 D7            push a
5043   26E7 DA            push d
5044   26E8 FA FC FF      lea d, [bp + -4] ; $yp
5045   26EB 32            mov bl, [d]
5046   26EC A7 00         mov bh, 0
5047   26EE E7            pop d
5048   26EF FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5049   26F3 DA            push d
5050   26F4 FA FB FF      lea d, [bp + -5] ; $xp
5051   26F7 32            mov bl, [d]
5052   26F8 A7 00         mov bh, 0
5053   26FA E7            pop d
5054   26FB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5055   26FF E4            pop a
5056   2700 2A            mov b, [d]
5057   2701             ; START RELATIONAL
5058   2701 D7            push a
5059   2702 11            mov a, b
5060   2703 26 00 02      mov b, $200
5061   2706 B0            cmp a, b
5062   2707 FD 75         slu ; < (unsigned)
5063   2709 E4            pop a
5064   270A             ; END RELATIONAL
5065   270A C0 00 00      cmp b, 0
5066   270D C6 72 27      je _if81_exit
5067   2710             _if81_true:
5068   2710             ;; map[yp][xp] = map[yp][xp] + (1 << 8); 
5069   2710 3B E7 61      mov d, _map_data ; $map
5070   2713 D7            push a
5071   2714 DA            push d
5072   2715 FA FC FF      lea d, [bp + -4] ; $yp
5073   2718 32            mov bl, [d]
5074   2719 A7 00         mov bh, 0
5075   271B E7            pop d
5076   271C FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5077   2720 DA            push d
5078   2721 FA FB FF      lea d, [bp + -5] ; $xp
5079   2724 32            mov bl, [d]
5080   2725 A7 00         mov bh, 0
5081   2727 E7            pop d
5082   2728 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5083   272C E4            pop a
5084   272D DA            push d
5085   272E 3B E7 61      mov d, _map_data ; $map
5086   2731 D7            push a
5087   2732 DA            push d
5088   2733 FA FC FF      lea d, [bp + -4] ; $yp
5089   2736 32            mov bl, [d]
5090   2737 A7 00         mov bh, 0
5091   2739 E7            pop d
5092   273A FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5093   273E DA            push d
5094   273F FA FB FF      lea d, [bp + -5] ; $xp
5095   2742 32            mov bl, [d]
5096   2743 A7 00         mov bh, 0
5097   2745 E7            pop d
5098   2746 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5099   274A E4            pop a
5100   274B 2A            mov b, [d]
5101   274C             ; START TERMS
5102   274C D7            push a
5103   274D 11            mov a, b
5104   274E 26 01 00      mov b, $1
5105   2751             ; START SHIFT
5106   2751 D7            push a
5107   2752 11            mov a, b
5108   2753 26 08 00      mov b, $8
5109   2756 FD 39         mov c, b
5110   2758 9D            shl a, cl
5111   2759 27            mov b, a
5112   275A E4            pop a
5113   275B             ; END SHIFT
5114   275B 56            add b, a
5115   275C E4            pop a
5116   275D             ; END TERMS
5117   275D E7            pop d
5118   275E FD 43         mov [d], b
5119   2760             ;; klingons_left++; 
5120   2760 3B 97 62      mov d, _klingons_left ; $klingons_left
5121   2763 32            mov bl, [d]
5122   2764 A7 00         mov bh, 0
5123   2766 FD 77         inc b
5124   2768 3B 97 62      mov d, _klingons_left ; $klingons_left
5125   276B FD 43         mov [d], b
5126   276D FD 7D         dec b
5127   276F 0A 72 27      jmp _if81_exit
5128   2772             _if81_exit:
5129   2772             ;; map[yp][xp] = map[yp][xp] + (1 << 4); 
5130   2772 3B E7 61      mov d, _map_data ; $map
5131   2775 D7            push a
5132   2776 DA            push d
5133   2777 FA FC FF      lea d, [bp + -4] ; $yp
5134   277A 32            mov bl, [d]
5135   277B A7 00         mov bh, 0
5136   277D E7            pop d
5137   277E FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5138   2782 DA            push d
5139   2783 FA FB FF      lea d, [bp + -5] ; $xp
5140   2786 32            mov bl, [d]
5141   2787 A7 00         mov bh, 0
5142   2789 E7            pop d
5143   278A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5144   278E E4            pop a
5145   278F DA            push d
5146   2790 3B E7 61      mov d, _map_data ; $map
5147   2793 D7            push a
5148   2794 DA            push d
5149   2795 FA FC FF      lea d, [bp + -4] ; $yp
5150   2798 32            mov bl, [d]
5151   2799 A7 00         mov bh, 0
5152   279B E7            pop d
5153   279C FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5154   27A0 DA            push d
5155   27A1 FA FB FF      lea d, [bp + -5] ; $xp
5156   27A4 32            mov bl, [d]
5157   27A5 A7 00         mov bh, 0
5158   27A7 E7            pop d
5159   27A8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5160   27AC E4            pop a
5161   27AD 2A            mov b, [d]
5162   27AE             ; START TERMS
5163   27AE D7            push a
5164   27AF 11            mov a, b
5165   27B0 26 01 00      mov b, $1
5166   27B3             ; START SHIFT
5167   27B3 D7            push a
5168   27B4 11            mov a, b
5169   27B5 26 04 00      mov b, $4
5170   27B8 FD 39         mov c, b
5171   27BA 9D            shl a, cl
5172   27BB 27            mov b, a
5173   27BC E4            pop a
5174   27BD             ; END SHIFT
5175   27BD 56            add b, a
5176   27BE E4            pop a
5177   27BF             ; END TERMS
5178   27BF E7            pop d
5179   27C0 FD 43         mov [d], b
5180   27C2             ;; starbases_left++; 
5181   27C2 3B C2 61      mov d, _starbases_left ; $starbases_left
5182   27C5 32            mov bl, [d]
5183   27C6 A7 00         mov bh, 0
5184   27C8 FD 77         inc b
5185   27CA 3B C2 61      mov d, _starbases_left ; $starbases_left
5186   27CD FD 43         mov [d], b
5187   27CF FD 7D         dec b
5188   27D1 0A D4 27      jmp _if80_exit
5189   27D4             _if80_exit:
5190   27D4             ;; total_klingons = klingons_left; 
5191   27D4 3B 96 62      mov d, _total_klingons ; $total_klingons
5192   27D7 DA            push d
5193   27D8 3B 97 62      mov d, _klingons_left ; $klingons_left
5194   27DB 32            mov bl, [d]
5195   27DC A7 00         mov bh, 0
5196   27DE E7            pop d
5197   27DF FD 3E         mov [d], bl
5198   27E1             ;; if (starbases_left != 1) { 
5199   27E1             _if82_cond:
5200   27E1 3B C2 61      mov d, _starbases_left ; $starbases_left
5201   27E4 32            mov bl, [d]
5202   27E5 A7 00         mov bh, 0
5203   27E7             ; START RELATIONAL
5204   27E7 D7            push a
5205   27E8 11            mov a, b
5206   27E9 26 01 00      mov b, $1
5207   27EC B0            cmp a, b
5208   27ED FD 72         sneq ; !=
5209   27EF E4            pop a
5210   27F0             ; END RELATIONAL
5211   27F0 C0 00 00      cmp b, 0
5212   27F3 C6 1F 28      je _if82_exit
5213   27F6             _if82_true:
5214   27F6             ;; strcpy(plural_2, "s"); 
5215   27F6 26 76 67      mov b, _s60 ; "s"
5216   27F9 FD AB         swp b
5217   27FB D8            push b
5218   27FC 3B B6 63      mov d, _plural_2_data ; $plural_2
5219   27FF 2D            mov b, d
5220   2800 FD AB         swp b
5221   2802 D8            push b
5222   2803 07 14 04      call strcpy
5223   2806 51 04 00      add sp, 4
5224   2809             ;; strcpy(plural, "are"); 
5225   2809 26 03 66      mov b, _s33 ; "are"
5226   280C FD AB         swp b
5227   280E D8            push b
5228   280F 3B B8 63      mov d, _plural_data ; $plural
5229   2812 2D            mov b, d
5230   2813 FD AB         swp b
5231   2815 D8            push b
5232   2816 07 14 04      call strcpy
5233   2819 51 04 00      add sp, 4
5234   281C 0A 1F 28      jmp _if82_exit
5235   281F             _if82_exit:
5236   281F             ;; printf("Your orders are as follows:\nDestroy the %d Klingon warships which have",klingons_left); 
5237   281F 3B 97 62      mov d, _klingons_left ; $klingons_left
5238   2822 32            mov bl, [d]
5239   2823 A7 00         mov bh, 0
5240   2825 DD            push bl
5241   2826 26 78 67      mov b, _s61 ; "Your orders are as follows:\nDestroy the %d Klingon warships which have"
5242   2829 FD AB         swp b
5243   282B D8            push b
5244   282C 07 BA 07      call printf
5245   282F 51 03 00      add sp, 3
5246   2832             ;; printf("invaded\n the galaxy before they can attack Federation Headquarters\n"); 
5247   2832 26 BF 67      mov b, _s62 ; "invaded\n the galaxy before they can attack Federation Headquarters\n"
5248   2835 FD AB         swp b
5249   2837 D8            push b
5250   2838 07 BA 07      call printf
5251   283B 51 02 00      add sp, 2
5252   283E             ;; printf(" on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy",  
5253   283E 3B B6 63      mov d, _plural_2_data ; $plural_2
5254   2841 2D            mov b, d
5255   2842 FD AB         swp b
5256   2844 D8            push b
5257   2845 3B C2 61      mov d, _starbases_left ; $starbases_left
5258   2848 32            mov bl, [d]
5259   2849 A7 00         mov bh, 0
5260   284B DD            push bl
5261   284C 3B B8 63      mov d, _plural_data ; $plural
5262   284F 2D            mov b, d
5263   2850 FD AB         swp b
5264   2852 D8            push b
5265   2853 3B A3 62      mov d, _time_up ; $time_up
5266   2856 2A            mov b, [d]
5267   2857 FD AB         swp b
5268   2859 D8            push b
5269   285A 3B A1 62      mov d, _time_start ; $time_start
5270   285D 2A            mov b, [d]
5271   285E             ; START TERMS
5272   285E D7            push a
5273   285F 11            mov a, b
5274   2860 3B A3 62      mov d, _time_up ; $time_up
5275   2863 2A            mov b, [d]
5276   2864 56            add b, a
5277   2865 E4            pop a
5278   2866             ; END TERMS
5279   2866 FD AB         swp b
5280   2868 D8            push b
5281   2869 26 03 68      mov b, _s63 ; " on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy"
5282   286C FD AB         swp b
5283   286E D8            push b
5284   286F 07 BA 07      call printf
5285   2872 51 0B 00      add sp, 11
5286   2875             ;; printf(" for resupplying your ship.\n\n Hit any key to accept command. "); 
5287   2875 26 52 68      mov b, _s64 ; " for resupplying your ship.\n\n Hit any key to accept command. "
5288   2878 FD AB         swp b
5289   287A D8            push b
5290   287B 07 BA 07      call printf
5291   287E 51 02 00      add sp, 2
5292   2881             ;; getchar(); 
5293   2881 07 21 15      call getchar
5294   2884 F9            leave
5295   2885 09            ret
5296   2886             
5297   2886             place_ship:
5298   2886 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5299   2889             ;; quad[FROM_FIXED00(ship_y) - 1][FROM_FIXED00(ship_x) - 1] =  		4     ; 
5300   2889 3B BF 62      mov d, _quad_data ; $quad
5301   288C D7            push a
5302   288D DA            push d
5303   288E 3B B9 62      mov d, _ship_y ; $ship_y
5304   2891 2A            mov b, [d]
5305   2892 FD AB         swp b
5306   2894 D8            push b
5307   2895 07 69 1D      call FROM_FIXED00
5308   2898 51 02 00      add sp, 2
5309   289B             ; START TERMS
5310   289B D7            push a
5311   289C 11            mov a, b
5312   289D 26 01 00      mov b, $1
5313   28A0 60            sub a, b
5314   28A1 27            mov b, a
5315   28A2 E4            pop a
5316   28A3             ; END TERMS
5317   28A3 E7            pop d
5318   28A4 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
5319   28A8 DA            push d
5320   28A9 3B BB 62      mov d, _ship_x ; $ship_x
5321   28AC 2A            mov b, [d]
5322   28AD FD AB         swp b
5323   28AF D8            push b
5324   28B0 07 69 1D      call FROM_FIXED00
5325   28B3 51 02 00      add sp, 2
5326   28B6             ; START TERMS
5327   28B6 D7            push a
5328   28B7 11            mov a, b
5329   28B8 26 01 00      mov b, $1
5330   28BB 60            sub a, b
5331   28BC 27            mov b, a
5332   28BD E4            pop a
5333   28BE             ; END TERMS
5334   28BE E7            pop d
5335   28BF 5A            add d, b
5336   28C0 E4            pop a
5337   28C1 DA            push d
5338   28C2 26 04 00      mov b, $4
5339   28C5 E7            pop d
5340   28C6 FD 3E         mov [d], bl
5341   28C8 F9            leave
5342   28C9 09            ret
5343   28CA             
5344   28CA             new_quadrant:
5345   28CA F8 00 00      enter 0 ; (push bp; mov bp, sp)
5346   28CD             ;; int i; 
5347   28CD 52 02 00      sub sp, 2 ; i
5348   28D0             ;; unsigned int        tmp; 
5349   28D0 52 02 00      sub sp, 2 ; tmp
5350   28D3             ;; struct klingon *k; 
5351   28D3 52 02 00      sub sp, 2 ; k
5352   28D6             ;; k = &kdata; 
5353   28D6 FA FB FF      lea d, [bp + -5] ; $k
5354   28D9 DA            push d
5355   28DA 3B 89 62      mov d, _kdata_data ; $kdata
5356   28DD 2D            mov b, d
5357   28DE E7            pop d
5358   28DF FD 43         mov [d], b
5359   28E1             ;; klingons = 0; 
5360   28E1 3B 95 62      mov d, _klingons ; $klingons
5361   28E4 DA            push d
5362   28E5 26 00 00      mov b, $0
5363   28E8 E7            pop d
5364   28E9 FD 3E         mov [d], bl
5365   28EB             ;; starbases = 0; 
5366   28EB 3B BF 61      mov d, _starbases ; $starbases
5367   28EE DA            push d
5368   28EF 26 00 00      mov b, $0
5369   28F2 E7            pop d
5370   28F3 FD 3E         mov [d], bl
5371   28F5             ;; stars = 0; 
5372   28F5 3B A0 62      mov d, _stars ; $stars
5373   28F8 DA            push d
5374   28F9 26 00 00      mov b, $0
5375   28FC E7            pop d
5376   28FD FD 3E         mov [d], bl
5377   28FF             ;; d4 = get_rand(50) - 1; 
5378   28FF 3B B7 62      mov d, _d4 ; $d4
5379   2902 DA            push d
5380   2903 26 32 00      mov b, $32
5381   2906 FD AB         swp b
5382   2908 D8            push b
5383   2909 07 7A 1D      call get_rand
5384   290C 51 02 00      add sp, 2
5385   290F             ; START TERMS
5386   290F D7            push a
5387   2910 11            mov a, b
5388   2911 26 01 00      mov b, $1
5389   2914 60            sub a, b
5390   2915 27            mov b, a
5391   2916 E4            pop a
5392   2917             ; END TERMS
5393   2917 E7            pop d
5394   2918 FD 43         mov [d], b
5395   291A             ;; map[quad_y][quad_x] = map[quad_y][quad_x] |   0x1000		/* Set if this sector was mapped */          ; 
5396   291A 3B E7 61      mov d, _map_data ; $map
5397   291D D7            push a
5398   291E DA            push d
5399   291F 3B 9A 62      mov d, _quad_y ; $quad_y
5400   2922 2A            mov b, [d]
5401   2923 E7            pop d
5402   2924 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5403   2928 DA            push d
5404   2929 3B 9C 62      mov d, _quad_x ; $quad_x
5405   292C 2A            mov b, [d]
5406   292D E7            pop d
5407   292E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5408   2932 E4            pop a
5409   2933 DA            push d
5410   2934 3B E7 61      mov d, _map_data ; $map
5411   2937 D7            push a
5412   2938 DA            push d
5413   2939 3B 9A 62      mov d, _quad_y ; $quad_y
5414   293C 2A            mov b, [d]
5415   293D E7            pop d
5416   293E FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5417   2942 DA            push d
5418   2943 3B 9C 62      mov d, _quad_x ; $quad_x
5419   2946 2A            mov b, [d]
5420   2947 E7            pop d
5421   2948 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5422   294C E4            pop a
5423   294D 2A            mov b, [d]
5424   294E D7            push a
5425   294F 11            mov a, b
5426   2950 26 00 10      mov b, $1000
5427   2953 FD 70         or b, a ; |
5428   2955 E4            pop a
5429   2956 E7            pop d
5430   2957 FD 43         mov [d], b
5431   2959             ;; if (quad_y >= 1 && quad_y <= 8 && quad_x >= 1 && quad_x <= 8) { 
5432   2959             _if83_cond:
5433   2959 3B 9A 62      mov d, _quad_y ; $quad_y
5434   295C 2A            mov b, [d]
5435   295D             ; START RELATIONAL
5436   295D D7            push a
5437   295E 11            mov a, b
5438   295F 26 01 00      mov b, $1
5439   2962 B0            cmp a, b
5440   2963 FD 80         sge ; >=
5441   2965 E4            pop a
5442   2966             ; END RELATIONAL
5443   2966             ; START LOGICAL AND
5444   2966 D7            push a
5445   2967 11            mov a, b
5446   2968 3B 9A 62      mov d, _quad_y ; $quad_y
5447   296B 2A            mov b, [d]
5448   296C             ; START RELATIONAL
5449   296C D7            push a
5450   296D 11            mov a, b
5451   296E 26 08 00      mov b, $8
5452   2971 B0            cmp a, b
5453   2972 FD 74         sle ; <= (signed)
5454   2974 E4            pop a
5455   2975             ; END RELATIONAL
5456   2975 FD A7         sand a, b
5457   2977 11            mov a, b
5458   2978 3B 9C 62      mov d, _quad_x ; $quad_x
5459   297B 2A            mov b, [d]
5460   297C             ; START RELATIONAL
5461   297C D7            push a
5462   297D 11            mov a, b
5463   297E 26 01 00      mov b, $1
5464   2981 B0            cmp a, b
5465   2982 FD 80         sge ; >=
5466   2984 E4            pop a
5467   2985             ; END RELATIONAL
5468   2985 FD A7         sand a, b
5469   2987 11            mov a, b
5470   2988 3B 9C 62      mov d, _quad_x ; $quad_x
5471   298B 2A            mov b, [d]
5472   298C             ; START RELATIONAL
5473   298C D7            push a
5474   298D 11            mov a, b
5475   298E 26 08 00      mov b, $8
5476   2991 B0            cmp a, b
5477   2992 FD 74         sle ; <= (signed)
5478   2994 E4            pop a
5479   2995             ; END RELATIONAL
5480   2995 FD A7         sand a, b
5481   2997 E4            pop a
5482   2998             ; END LOGICAL AND
5483   2998 C0 00 00      cmp b, 0
5484   299B C6 07 2A      je _if83_exit
5485   299E             _if83_true:
5486   299E             ;; quadrant_name(0, quad_y, quad_x); 
5487   299E 3B 9C 62      mov d, _quad_x ; $quad_x
5488   29A1 2A            mov b, [d]
5489   29A2 DD            push bl
5490   29A3 3B 9A 62      mov d, _quad_y ; $quad_y
5491   29A6 2A            mov b, [d]
5492   29A7 DD            push bl
5493   29A8 26 00 00      mov b, $0
5494   29AB DD            push bl
5495   29AC 07 A3 5E      call quadrant_name
5496   29AF 51 03 00      add sp, 3
5497   29B2             ;; if (TO_FIXED(time_start) != stardate) 
5498   29B2             _if84_cond:
5499   29B2 3B A1 62      mov d, _time_start ; $time_start
5500   29B5 2A            mov b, [d]
5501   29B6 FD AB         swp b
5502   29B8 D8            push b
5503   29B9 07 34 1D      call TO_FIXED
5504   29BC 51 02 00      add sp, 2
5505   29BF             ; START RELATIONAL
5506   29BF D7            push a
5507   29C0 11            mov a, b
5508   29C1 3B BD 62      mov d, _stardate ; $stardate
5509   29C4 2A            mov b, [d]
5510   29C5 B0            cmp a, b
5511   29C6 FD 72         sneq ; !=
5512   29C8 E4            pop a
5513   29C9             ; END RELATIONAL
5514   29C9 C0 00 00      cmp b, 0
5515   29CC C6 E5 29      je _if84_else
5516   29CF             _if84_true:
5517   29CF             ;; printf("Now entering %s quadrant...\n\n", quadname); 
5518   29CF 3B FF 62      mov d, _quadname_data ; $quadname
5519   29D2 2D            mov b, d
5520   29D3 FD AB         swp b
5521   29D5 D8            push b
5522   29D6 26 90 68      mov b, _s65 ; "Now entering %s quadrant...\n\n"
5523   29D9 FD AB         swp b
5524   29DB D8            push b
5525   29DC 07 BA 07      call printf
5526   29DF 51 04 00      add sp, 4
5527   29E2 0A 04 2A      jmp _if84_exit
5528   29E5             _if84_else:
5529   29E5             ;; puts("\nYour mission begins with your starship located"); 
5530   29E5 26 AE 68      mov b, _s66 ; "\nYour mission begins with your starship located"
5531   29E8 FD AB         swp b
5532   29EA D8            push b
5533   29EB 07 4A 15      call puts
5534   29EE 51 02 00      add sp, 2
5535   29F1             ;; printf("in the galactic quadrant %s.\n\n", quadname); 
5536   29F1 3B FF 62      mov d, _quadname_data ; $quadname
5537   29F4 2D            mov b, d
5538   29F5 FD AB         swp b
5539   29F7 D8            push b
5540   29F8 26 DE 68      mov b, _s67 ; "in the galactic quadrant %s.\n\n"
5541   29FB FD AB         swp b
5542   29FD D8            push b
5543   29FE 07 BA 07      call printf
5544   2A01 51 04 00      add sp, 4
5545   2A04             _if84_exit:
5546   2A04 0A 07 2A      jmp _if83_exit
5547   2A07             _if83_exit:
5548   2A07             ;; tmp = map[quad_y][quad_x]; 
5549   2A07 FA FD FF      lea d, [bp + -3] ; $tmp
5550   2A0A DA            push d
5551   2A0B 3B E7 61      mov d, _map_data ; $map
5552   2A0E D7            push a
5553   2A0F DA            push d
5554   2A10 3B 9A 62      mov d, _quad_y ; $quad_y
5555   2A13 2A            mov b, [d]
5556   2A14 E7            pop d
5557   2A15 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5558   2A19 DA            push d
5559   2A1A 3B 9C 62      mov d, _quad_x ; $quad_x
5560   2A1D 2A            mov b, [d]
5561   2A1E E7            pop d
5562   2A1F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5563   2A23 E4            pop a
5564   2A24 2A            mov b, [d]
5565   2A25 E7            pop d
5566   2A26 FD 43         mov [d], b
5567   2A28             ;; klingons = (tmp >> 8) & 0x0F; 
5568   2A28 3B 95 62      mov d, _klingons ; $klingons
5569   2A2B DA            push d
5570   2A2C FA FD FF      lea d, [bp + -3] ; $tmp
5571   2A2F 2A            mov b, [d]
5572   2A30             ; START SHIFT
5573   2A30 D7            push a
5574   2A31 11            mov a, b
5575   2A32 26 08 00      mov b, $8
5576   2A35 FD 39         mov c, b
5577   2A37 A1            shr a, cl
5578   2A38 27            mov b, a
5579   2A39 E4            pop a
5580   2A3A             ; END SHIFT
5581   2A3A D7            push a
5582   2A3B 11            mov a, b
5583   2A3C 26 0F 00      mov b, $f
5584   2A3F FD 92         and b, a ; &
5585   2A41 E4            pop a
5586   2A42 E7            pop d
5587   2A43 FD 3E         mov [d], bl
5588   2A45             ;; starbases = (tmp >> 4) & 0x0F; 
5589   2A45 3B BF 61      mov d, _starbases ; $starbases
5590   2A48 DA            push d
5591   2A49 FA FD FF      lea d, [bp + -3] ; $tmp
5592   2A4C 2A            mov b, [d]
5593   2A4D             ; START SHIFT
5594   2A4D D7            push a
5595   2A4E 11            mov a, b
5596   2A4F 26 04 00      mov b, $4
5597   2A52 FD 39         mov c, b
5598   2A54 A1            shr a, cl
5599   2A55 27            mov b, a
5600   2A56 E4            pop a
5601   2A57             ; END SHIFT
5602   2A57 D7            push a
5603   2A58 11            mov a, b
5604   2A59 26 0F 00      mov b, $f
5605   2A5C FD 92         and b, a ; &
5606   2A5E E4            pop a
5607   2A5F E7            pop d
5608   2A60 FD 3E         mov [d], bl
5609   2A62             ;; stars = tmp & 0x0F; 
5610   2A62 3B A0 62      mov d, _stars ; $stars
5611   2A65 DA            push d
5612   2A66 FA FD FF      lea d, [bp + -3] ; $tmp
5613   2A69 2A            mov b, [d]
5614   2A6A D7            push a
5615   2A6B 11            mov a, b
5616   2A6C 26 0F 00      mov b, $f
5617   2A6F FD 92         and b, a ; &
5618   2A71 E4            pop a
5619   2A72 E7            pop d
5620   2A73 FD 3E         mov [d], bl
5621   2A75             ;; if (klingons > 0) { 
5622   2A75             _if85_cond:
5623   2A75 3B 95 62      mov d, _klingons ; $klingons
5624   2A78 32            mov bl, [d]
5625   2A79 A7 00         mov bh, 0
5626   2A7B             ; START RELATIONAL
5627   2A7B D7            push a
5628   2A7C 11            mov a, b
5629   2A7D 26 00 00      mov b, $0
5630   2A80 B0            cmp a, b
5631   2A81 FD 81         sgu ; > (unsigned)
5632   2A83 E4            pop a
5633   2A84             ; END RELATIONAL
5634   2A84 C0 00 00      cmp b, 0
5635   2A87 C6 BB 2A      je _if85_exit
5636   2A8A             _if85_true:
5637   2A8A             ;; printf("Combat Area  Condition Red\n"); 
5638   2A8A 26 FD 68      mov b, _s68 ; "Combat Area  Condition Red\n"
5639   2A8D FD AB         swp b
5640   2A8F D8            push b
5641   2A90 07 BA 07      call printf
5642   2A93 51 02 00      add sp, 2
5643   2A96             ;; if (shield < 200) 
5644   2A96             _if86_cond:
5645   2A96 3B 9E 62      mov d, _shield ; $shield
5646   2A99 2A            mov b, [d]
5647   2A9A             ; START RELATIONAL
5648   2A9A D7            push a
5649   2A9B 11            mov a, b
5650   2A9C 26 C8 00      mov b, $c8
5651   2A9F B0            cmp a, b
5652   2AA0 FD 73         slt ; < (signed)
5653   2AA2 E4            pop a
5654   2AA3             ; END RELATIONAL
5655   2AA3 C0 00 00      cmp b, 0
5656   2AA6 C6 B8 2A      je _if86_exit
5657   2AA9             _if86_true:
5658   2AA9             ;; printf("Shields Dangerously Low\n"); 
5659   2AA9 26 19 69      mov b, _s69 ; "Shields Dangerously Low\n"
5660   2AAC FD AB         swp b
5661   2AAE D8            push b
5662   2AAF 07 BA 07      call printf
5663   2AB2 51 02 00      add sp, 2
5664   2AB5 0A B8 2A      jmp _if86_exit
5665   2AB8             _if86_exit:
5666   2AB8 0A BB 2A      jmp _if85_exit
5667   2ABB             _if85_exit:
5668   2ABB             ;; for (i = 1; i <= 3; i++) { 
5669   2ABB             _for87_init:
5670   2ABB FA FF FF      lea d, [bp + -1] ; $i
5671   2ABE DA            push d
5672   2ABF 26 01 00      mov b, $1
5673   2AC2 E7            pop d
5674   2AC3 FD 43         mov [d], b
5675   2AC5             _for87_cond:
5676   2AC5 FA FF FF      lea d, [bp + -1] ; $i
5677   2AC8 2A            mov b, [d]
5678   2AC9             ; START RELATIONAL
5679   2AC9 D7            push a
5680   2ACA 11            mov a, b
5681   2ACB 26 03 00      mov b, $3
5682   2ACE B0            cmp a, b
5683   2ACF FD 74         sle ; <= (signed)
5684   2AD1 E4            pop a
5685   2AD2             ; END RELATIONAL
5686   2AD2 C0 00 00      cmp b, 0
5687   2AD5 C6 26 2B      je _for87_exit
5688   2AD8             _for87_block:
5689   2AD8             ;; k->y = 0; 
5690   2AD8 FA FB FF      lea d, [bp + -5] ; $k
5691   2ADB FD 2A         mov d, [d]
5692   2ADD 58 00 00      add d, 0
5693   2AE0 DA            push d
5694   2AE1 26 00 00      mov b, $0
5695   2AE4 E7            pop d
5696   2AE5 FD 3E         mov [d], bl
5697   2AE7             ;; k->x = 0; 
5698   2AE7 FA FB FF      lea d, [bp + -5] ; $k
5699   2AEA FD 2A         mov d, [d]
5700   2AEC 58 01 00      add d, 1
5701   2AEF DA            push d
5702   2AF0 26 00 00      mov b, $0
5703   2AF3 E7            pop d
5704   2AF4 FD 3E         mov [d], bl
5705   2AF6             ;; k->energy = 0; 
5706   2AF6 FA FB FF      lea d, [bp + -5] ; $k
5707   2AF9 FD 2A         mov d, [d]
5708   2AFB 58 02 00      add d, 2
5709   2AFE DA            push d
5710   2AFF 26 00 00      mov b, $0
5711   2B02 E7            pop d
5712   2B03 FD 43         mov [d], b
5713   2B05             ;; k++; 
5714   2B05 FA FB FF      lea d, [bp + -5] ; $k
5715   2B08 2A            mov b, [d]
5716   2B09 FD 77         inc b
5717   2B0B FD 77         inc b
5718   2B0D FA FB FF      lea d, [bp + -5] ; $k
5719   2B10 FD 43         mov [d], b
5720   2B12 FD 7D         dec b
5721   2B14 FD 7D         dec b
5722   2B16             _for87_update:
5723   2B16 FA FF FF      lea d, [bp + -1] ; $i
5724   2B19 2A            mov b, [d]
5725   2B1A FD 77         inc b
5726   2B1C FA FF FF      lea d, [bp + -1] ; $i
5727   2B1F FD 43         mov [d], b
5728   2B21 FD 7D         dec b
5729   2B23 0A C5 2A      jmp _for87_cond
5730   2B26             _for87_exit:
5731   2B26             ;; memset(quad,  		0      , 64); 
5732   2B26 26 40 00      mov b, $40
5733   2B29 FD AB         swp b
5734   2B2B D8            push b
5735   2B2C 26 00 00      mov b, $0
5736   2B2F DD            push bl
5737   2B30 3B BF 62      mov d, _quad_data ; $quad
5738   2B33 2D            mov b, d
5739   2B34 FD AB         swp b
5740   2B36 D8            push b
5741   2B37 07 DE 05      call memset
5742   2B3A 51 05 00      add sp, 5
5743   2B3D             ;; place_ship(); 
5744   2B3D 07 86 28      call place_ship
5745   2B40             ;; if (klingons > 0) { 
5746   2B40             _if88_cond:
5747   2B40 3B 95 62      mov d, _klingons ; $klingons
5748   2B43 32            mov bl, [d]
5749   2B44 A7 00         mov bh, 0
5750   2B46             ; START RELATIONAL
5751   2B46 D7            push a
5752   2B47 11            mov a, b
5753   2B48 26 00 00      mov b, $0
5754   2B4B B0            cmp a, b
5755   2B4C FD 81         sgu ; > (unsigned)
5756   2B4E E4            pop a
5757   2B4F             ; END RELATIONAL
5758   2B4F C0 00 00      cmp b, 0
5759   2B52 C6 E9 2B      je _if88_exit
5760   2B55             _if88_true:
5761   2B55             ;; k = kdata; 
5762   2B55 FA FB FF      lea d, [bp + -5] ; $k
5763   2B58 DA            push d
5764   2B59 3B 89 62      mov d, _kdata_data ; $kdata
5765   2B5C 2D            mov b, d
5766   2B5D E7            pop d
5767   2B5E FD 43         mov [d], b
5768   2B60             ;; for (i = 0; i < klingons; i++) { 
5769   2B60             _for89_init:
5770   2B60 FA FF FF      lea d, [bp + -1] ; $i
5771   2B63 DA            push d
5772   2B64 26 00 00      mov b, $0
5773   2B67 E7            pop d
5774   2B68 FD 43         mov [d], b
5775   2B6A             _for89_cond:
5776   2B6A FA FF FF      lea d, [bp + -1] ; $i
5777   2B6D 2A            mov b, [d]
5778   2B6E             ; START RELATIONAL
5779   2B6E D7            push a
5780   2B6F 11            mov a, b
5781   2B70 3B 95 62      mov d, _klingons ; $klingons
5782   2B73 32            mov bl, [d]
5783   2B74 A7 00         mov bh, 0
5784   2B76 B0            cmp a, b
5785   2B77 FD 73         slt ; < (signed)
5786   2B79 E4            pop a
5787   2B7A             ; END RELATIONAL
5788   2B7A C0 00 00      cmp b, 0
5789   2B7D C6 E6 2B      je _for89_exit
5790   2B80             _for89_block:
5791   2B80             ;; find_set_empty_place( 	3        , k->y, k->x); 
5792   2B80 FA FB FF      lea d, [bp + -5] ; $k
5793   2B83 FD 2A         mov d, [d]
5794   2B85 58 01 00      add d, 1
5795   2B88 32            mov bl, [d]
5796   2B89 A7 00         mov bh, 0
5797   2B8B FD AB         swp b
5798   2B8D D8            push b
5799   2B8E FA FB FF      lea d, [bp + -5] ; $k
5800   2B91 FD 2A         mov d, [d]
5801   2B93 58 00 00      add d, 0
5802   2B96 32            mov bl, [d]
5803   2B97 A7 00         mov bh, 0
5804   2B99 FD AB         swp b
5805   2B9B D8            push b
5806   2B9C 26 03 00      mov b, $3
5807   2B9F DD            push bl
5808   2BA0 07 9B 5D      call find_set_empty_place
5809   2BA3 51 05 00      add sp, 5
5810   2BA6             ;; k->energy = 100 + get_rand(200); 
5811   2BA6 FA FB FF      lea d, [bp + -5] ; $k
5812   2BA9 FD 2A         mov d, [d]
5813   2BAB 58 02 00      add d, 2
5814   2BAE DA            push d
5815   2BAF 26 64 00      mov b, $64
5816   2BB2             ; START TERMS
5817   2BB2 D7            push a
5818   2BB3 11            mov a, b
5819   2BB4 26 C8 00      mov b, $c8
5820   2BB7 FD AB         swp b
5821   2BB9 D8            push b
5822   2BBA 07 7A 1D      call get_rand
5823   2BBD 51 02 00      add sp, 2
5824   2BC0 56            add b, a
5825   2BC1 E4            pop a
5826   2BC2             ; END TERMS
5827   2BC2 E7            pop d
5828   2BC3 FD 43         mov [d], b
5829   2BC5             ;; k++; 
5830   2BC5 FA FB FF      lea d, [bp + -5] ; $k
5831   2BC8 2A            mov b, [d]
5832   2BC9 FD 77         inc b
5833   2BCB FD 77         inc b
5834   2BCD FA FB FF      lea d, [bp + -5] ; $k
5835   2BD0 FD 43         mov [d], b
5836   2BD2 FD 7D         dec b
5837   2BD4 FD 7D         dec b
5838   2BD6             _for89_update:
5839   2BD6 FA FF FF      lea d, [bp + -1] ; $i
5840   2BD9 2A            mov b, [d]
5841   2BDA FD 77         inc b
5842   2BDC FA FF FF      lea d, [bp + -1] ; $i
5843   2BDF FD 43         mov [d], b
5844   2BE1 FD 7D         dec b
5845   2BE3 0A 6A 2B      jmp _for89_cond
5846   2BE6             _for89_exit:
5847   2BE6 0A E9 2B      jmp _if88_exit
5848   2BE9             _if88_exit:
5849   2BE9             ;; if (starbases > 0) 
5850   2BE9             _if90_cond:
5851   2BE9 3B BF 61      mov d, _starbases ; $starbases
5852   2BEC 32            mov bl, [d]
5853   2BED A7 00         mov bh, 0
5854   2BEF             ; START RELATIONAL
5855   2BEF D7            push a
5856   2BF0 11            mov a, b
5857   2BF1 26 00 00      mov b, $0
5858   2BF4 B0            cmp a, b
5859   2BF5 FD 7F         sgt ; >
5860   2BF7 E4            pop a
5861   2BF8             ; END RELATIONAL
5862   2BF8 C0 00 00      cmp b, 0
5863   2BFB C6 19 2C      je _if90_exit
5864   2BFE             _if90_true:
5865   2BFE             ;; find_set_empty_place( 		2     , &base_y, &base_x); 
5866   2BFE 3B C1 61      mov d, _base_x ; $base_x
5867   2C01 2D            mov b, d
5868   2C02 FD AB         swp b
5869   2C04 D8            push b
5870   2C05 3B C0 61      mov d, _base_y ; $base_y
5871   2C08 2D            mov b, d
5872   2C09 FD AB         swp b
5873   2C0B D8            push b
5874   2C0C 26 02 00      mov b, $2
5875   2C0F DD            push bl
5876   2C10 07 9B 5D      call find_set_empty_place
5877   2C13 51 05 00      add sp, 5
5878   2C16 0A 19 2C      jmp _if90_exit
5879   2C19             _if90_exit:
5880   2C19             ;; for (i = 1; i <= stars; i++) 
5881   2C19             _for91_init:
5882   2C19 FA FF FF      lea d, [bp + -1] ; $i
5883   2C1C DA            push d
5884   2C1D 26 01 00      mov b, $1
5885   2C20 E7            pop d
5886   2C21 FD 43         mov [d], b
5887   2C23             _for91_cond:
5888   2C23 FA FF FF      lea d, [bp + -1] ; $i
5889   2C26 2A            mov b, [d]
5890   2C27             ; START RELATIONAL
5891   2C27 D7            push a
5892   2C28 11            mov a, b
5893   2C29 3B A0 62      mov d, _stars ; $stars
5894   2C2C 32            mov bl, [d]
5895   2C2D A7 00         mov bh, 0
5896   2C2F B0            cmp a, b
5897   2C30 FD 74         sle ; <= (signed)
5898   2C32 E4            pop a
5899   2C33             ; END RELATIONAL
5900   2C33 C0 00 00      cmp b, 0
5901   2C36 C6 5F 2C      je _for91_exit
5902   2C39             _for91_block:
5903   2C39             ;; find_set_empty_place( 		1     ,   0   ,   0   ); 
5904   2C39 26 00 00      mov b, $0
5905   2C3C FD AB         swp b
5906   2C3E D8            push b
5907   2C3F 26 00 00      mov b, $0
5908   2C42 FD AB         swp b
5909   2C44 D8            push b
5910   2C45 26 01 00      mov b, $1
5911   2C48 DD            push bl
5912   2C49 07 9B 5D      call find_set_empty_place
5913   2C4C 51 05 00      add sp, 5
5914   2C4F             _for91_update:
5915   2C4F FA FF FF      lea d, [bp + -1] ; $i
5916   2C52 2A            mov b, [d]
5917   2C53 FD 77         inc b
5918   2C55 FA FF FF      lea d, [bp + -1] ; $i
5919   2C58 FD 43         mov [d], b
5920   2C5A FD 7D         dec b
5921   2C5C 0A 23 2C      jmp _for91_cond
5922   2C5F             _for91_exit:
5923   2C5F F9            leave
5924   2C60 09            ret
5925   2C61             
5926   2C61             course_control:
5927   2C61 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5928   2C64             ;; int i; 
5929   2C64 52 02 00      sub sp, 2 ; i
5930   2C67             ;; int       c1; 
5931   2C67 52 02 00      sub sp, 2 ; c1
5932   2C6A             ;; int       warp; 
5933   2C6A 52 02 00      sub sp, 2 ; warp
5934   2C6D             ;; unsigned int        n; 
5935   2C6D 52 02 00      sub sp, 2 ; n
5936   2C70             ;; int c2, c3, c4; 
5937   2C70 52 02 00      sub sp, 2 ; c2
5938   2C73 52 02 00      sub sp, 2 ; c3
5939   2C76 52 02 00      sub sp, 2 ; c4
5940   2C79             ;; int       z1, z2; 
5941   2C79 52 02 00      sub sp, 2 ; z1
5942   2C7C 52 02 00      sub sp, 2 ; z2
5943   2C7F             ;; int       x1, x2; 
5944   2C7F 52 02 00      sub sp, 2 ; x1
5945   2C82 52 02 00      sub sp, 2 ; x2
5946   2C85             ;; int       x, y; 
5947   2C85 52 02 00      sub sp, 2 ; x
5948   2C88 52 02 00      sub sp, 2 ; y
5949   2C8B             ;; unsigned char                         outside = 0;		/* Outside galaxy flag */ 
5950   2C8B 52 01 00      sub sp, 1 ; outside
5951   2C8E             ; --- START LOCAL VAR INITIALIZATION
5952   2C8E FA E6 FF      lea d, [bp + -26] ; $outside
5953   2C91 DA            push d
5954   2C92 26 00 00      mov b, $0
5955   2C95 E7            pop d
5956   2C96 FD 43         mov [d], b
5957   2C98             ; --- END LOCAL VAR INITIALIZATION
5958   2C98             ;; unsigned char                         quad_y_old; 
5959   2C98 52 01 00      sub sp, 1 ; quad_y_old
5960   2C9B             ;; unsigned char                         quad_x_old; 
5961   2C9B 52 01 00      sub sp, 1 ; quad_x_old
5962   2C9E             ;; puts("Course (0-9): " ); 
5963   2C9E 26 32 69      mov b, _s70 ; "Course (0-9): "
5964   2CA1 FD AB         swp b
5965   2CA3 D8            push b
5966   2CA4 07 4A 15      call puts
5967   2CA7 51 02 00      add sp, 2
5968   2CAA             ;; c1 = input_f00(); 
5969   2CAA FA FD FF      lea d, [bp + -3] ; $c1
5970   2CAD DA            push d
5971   2CAE 07 A2 1E      call input_f00
5972   2CB1 E7            pop d
5973   2CB2 FD 43         mov [d], b
5974   2CB4             ;; if (c1 == 900) 
5975   2CB4             _if92_cond:
5976   2CB4 FA FD FF      lea d, [bp + -3] ; $c1
5977   2CB7 2A            mov b, [d]
5978   2CB8             ; START RELATIONAL
5979   2CB8 D7            push a
5980   2CB9 11            mov a, b
5981   2CBA 26 84 03      mov b, $384
5982   2CBD B0            cmp a, b
5983   2CBE FD 71         seq ; ==
5984   2CC0 E4            pop a
5985   2CC1             ; END RELATIONAL
5986   2CC1 C0 00 00      cmp b, 0
5987   2CC4 C6 D4 2C      je _if92_exit
5988   2CC7             _if92_true:
5989   2CC7             ;; c1 = 100; 
5990   2CC7 FA FD FF      lea d, [bp + -3] ; $c1
5991   2CCA DA            push d
5992   2CCB 26 64 00      mov b, $64
5993   2CCE E7            pop d
5994   2CCF FD 43         mov [d], b
5995   2CD1 0A D4 2C      jmp _if92_exit
5996   2CD4             _if92_exit:
5997   2CD4             ;; if (c1 < 0 || c1 > 900) { 
5998   2CD4             _if93_cond:
5999   2CD4 FA FD FF      lea d, [bp + -3] ; $c1
6000   2CD7 2A            mov b, [d]
6001   2CD8             ; START RELATIONAL
6002   2CD8 D7            push a
6003   2CD9 11            mov a, b
6004   2CDA 26 00 00      mov b, $0
6005   2CDD B0            cmp a, b
6006   2CDE FD 73         slt ; < (signed)
6007   2CE0 E4            pop a
6008   2CE1             ; END RELATIONAL
6009   2CE1             ; START LOGICAL OR
6010   2CE1 D7            push a
6011   2CE2 11            mov a, b
6012   2CE3 FA FD FF      lea d, [bp + -3] ; $c1
6013   2CE6 2A            mov b, [d]
6014   2CE7             ; START RELATIONAL
6015   2CE7 D7            push a
6016   2CE8 11            mov a, b
6017   2CE9 26 84 03      mov b, $384
6018   2CEC B0            cmp a, b
6019   2CED FD 7F         sgt ; >
6020   2CEF E4            pop a
6021   2CF0             ; END RELATIONAL
6022   2CF0 FD A8         sor a, b ; ||
6023   2CF2 E4            pop a
6024   2CF3             ; END LOGICAL OR
6025   2CF3 C0 00 00      cmp b, 0
6026   2CF6 C6 11 2D      je _if93_exit
6027   2CF9             _if93_true:
6028   2CF9             ;; printf("Lt. Sulu%s", inc_1); 
6029   2CF9 3B 33 63      mov d, _inc_1 ; $inc_1
6030   2CFC 2A            mov b, [d]
6031   2CFD FD AB         swp b
6032   2CFF D8            push b
6033   2D00 26 41 69      mov b, _s71 ; "Lt. Sulu%s"
6034   2D03 FD AB         swp b
6035   2D05 D8            push b
6036   2D06 07 BA 07      call printf
6037   2D09 51 04 00      add sp, 4
6038   2D0C             ;; return; 
6039   2D0C F9            leave
6040   2D0D 09            ret
6041   2D0E 0A 11 2D      jmp _if93_exit
6042   2D11             _if93_exit:
6043   2D11             ;; if (damage[1] < 0) 
6044   2D11             _if94_cond:
6045   2D11 3B A5 62      mov d, _damage_data ; $damage
6046   2D14 D7            push a
6047   2D15 DA            push d
6048   2D16 26 01 00      mov b, $1
6049   2D19 E7            pop d
6050   2D1A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6051   2D1E E4            pop a
6052   2D1F 2A            mov b, [d]
6053   2D20             ; START RELATIONAL
6054   2D20 D7            push a
6055   2D21 11            mov a, b
6056   2D22 26 00 00      mov b, $0
6057   2D25 B0            cmp a, b
6058   2D26 FD 73         slt ; < (signed)
6059   2D28 E4            pop a
6060   2D29             ; END RELATIONAL
6061   2D29 C0 00 00      cmp b, 0
6062   2D2C C6 45 2D      je _if94_exit
6063   2D2F             _if94_true:
6064   2D2F             ;; strcpy(warpmax, "0.2"); 
6065   2D2F 26 4C 69      mov b, _s72 ; "0.2"
6066   2D32 FD AB         swp b
6067   2D34 D8            push b
6068   2D35 3B BC 63      mov d, _warpmax_data ; $warpmax
6069   2D38 2D            mov b, d
6070   2D39 FD AB         swp b
6071   2D3B D8            push b
6072   2D3C 07 14 04      call strcpy
6073   2D3F 51 04 00      add sp, 4
6074   2D42 0A 45 2D      jmp _if94_exit
6075   2D45             _if94_exit:
6076   2D45             ;; printf("Warp Factor (0-%s): ", warpmax); 
6077   2D45 3B BC 63      mov d, _warpmax_data ; $warpmax
6078   2D48 2D            mov b, d
6079   2D49 FD AB         swp b
6080   2D4B D8            push b
6081   2D4C 26 50 69      mov b, _s73 ; "Warp Factor (0-%s): "
6082   2D4F FD AB         swp b
6083   2D51 D8            push b
6084   2D52 07 BA 07      call printf
6085   2D55 51 04 00      add sp, 4
6086   2D58             ;; warp = input_f00(); 
6087   2D58 FA FB FF      lea d, [bp + -5] ; $warp
6088   2D5B DA            push d
6089   2D5C 07 A2 1E      call input_f00
6090   2D5F E7            pop d
6091   2D60 FD 43         mov [d], b
6092   2D62             ;; if (damage[1] < 0 && warp > 20) { 
6093   2D62             _if95_cond:
6094   2D62 3B A5 62      mov d, _damage_data ; $damage
6095   2D65 D7            push a
6096   2D66 DA            push d
6097   2D67 26 01 00      mov b, $1
6098   2D6A E7            pop d
6099   2D6B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6100   2D6F E4            pop a
6101   2D70 2A            mov b, [d]
6102   2D71             ; START RELATIONAL
6103   2D71 D7            push a
6104   2D72 11            mov a, b
6105   2D73 26 00 00      mov b, $0
6106   2D76 B0            cmp a, b
6107   2D77 FD 73         slt ; < (signed)
6108   2D79 E4            pop a
6109   2D7A             ; END RELATIONAL
6110   2D7A             ; START LOGICAL AND
6111   2D7A D7            push a
6112   2D7B 11            mov a, b
6113   2D7C FA FB FF      lea d, [bp + -5] ; $warp
6114   2D7F 2A            mov b, [d]
6115   2D80             ; START RELATIONAL
6116   2D80 D7            push a
6117   2D81 11            mov a, b
6118   2D82 26 14 00      mov b, $14
6119   2D85 B0            cmp a, b
6120   2D86 FD 7F         sgt ; >
6121   2D88 E4            pop a
6122   2D89             ; END RELATIONAL
6123   2D89 FD A7         sand a, b
6124   2D8B E4            pop a
6125   2D8C             ; END LOGICAL AND
6126   2D8C C0 00 00      cmp b, 0
6127   2D8F C6 A3 2D      je _if95_exit
6128   2D92             _if95_true:
6129   2D92             ;; printf("Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"); 
6130   2D92 26 65 69      mov b, _s74 ; "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"
6131   2D95 FD AB         swp b
6132   2D97 D8            push b
6133   2D98 07 BA 07      call printf
6134   2D9B 51 02 00      add sp, 2
6135   2D9E             ;; return; 
6136   2D9E F9            leave
6137   2D9F 09            ret
6138   2DA0 0A A3 2D      jmp _if95_exit
6139   2DA3             _if95_exit:
6140   2DA3             ;; if (warp <= 0) 
6141   2DA3             _if96_cond:
6142   2DA3 FA FB FF      lea d, [bp + -5] ; $warp
6143   2DA6 2A            mov b, [d]
6144   2DA7             ; START RELATIONAL
6145   2DA7 D7            push a
6146   2DA8 11            mov a, b
6147   2DA9 26 00 00      mov b, $0
6148   2DAC B0            cmp a, b
6149   2DAD FD 74         sle ; <= (signed)
6150   2DAF E4            pop a
6151   2DB0             ; END RELATIONAL
6152   2DB0 C0 00 00      cmp b, 0
6153   2DB3 C6 BB 2D      je _if96_exit
6154   2DB6             _if96_true:
6155   2DB6             ;; return; 
6156   2DB6 F9            leave
6157   2DB7 09            ret
6158   2DB8 0A BB 2D      jmp _if96_exit
6159   2DBB             _if96_exit:
6160   2DBB             ;; if (warp > 800) { 
6161   2DBB             _if97_cond:
6162   2DBB FA FB FF      lea d, [bp + -5] ; $warp
6163   2DBE 2A            mov b, [d]
6164   2DBF             ; START RELATIONAL
6165   2DBF D7            push a
6166   2DC0 11            mov a, b
6167   2DC1 26 20 03      mov b, $320
6168   2DC4 B0            cmp a, b
6169   2DC5 FD 7F         sgt ; >
6170   2DC7 E4            pop a
6171   2DC8             ; END RELATIONAL
6172   2DC8 C0 00 00      cmp b, 0
6173   2DCB C6 EF 2D      je _if97_exit
6174   2DCE             _if97_true:
6175   2DCE             ;; printf("Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n", print100(warp)); 
6176   2DCE FA FB FF      lea d, [bp + -5] ; $warp
6177   2DD1 2A            mov b, [d]
6178   2DD2 FD AB         swp b
6179   2DD4 D8            push b
6180   2DD5 07 6C 20      call print100
6181   2DD8 51 02 00      add sp, 2
6182   2DDB FD AB         swp b
6183   2DDD D8            push b
6184   2DDE 26 9B 69      mov b, _s75 ; "Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n"
6185   2DE1 FD AB         swp b
6186   2DE3 D8            push b
6187   2DE4 07 BA 07      call printf
6188   2DE7 51 04 00      add sp, 4
6189   2DEA             ;; return; 
6190   2DEA F9            leave
6191   2DEB 09            ret
6192   2DEC 0A EF 2D      jmp _if97_exit
6193   2DEF             _if97_exit:
6194   2DEF             ;; n = warp * 8; 
6195   2DEF FA F9 FF      lea d, [bp + -7] ; $n
6196   2DF2 DA            push d
6197   2DF3 FA FB FF      lea d, [bp + -5] ; $warp
6198   2DF6 2A            mov b, [d]
6199   2DF7             ; START FACTORS
6200   2DF7 D7            push a
6201   2DF8 11            mov a, b
6202   2DF9 26 08 00      mov b, $8
6203   2DFC AC            mul a, b ; *
6204   2DFD 11            mov a, b
6205   2DFE 27            mov b, a
6206   2DFF E4            pop a
6207   2E00             ; END FACTORS
6208   2E00 E7            pop d
6209   2E01 FD 43         mov [d], b
6210   2E03             ;; n = cint100(n);	 
6211   2E03 FA F9 FF      lea d, [bp + -7] ; $n
6212   2E06 DA            push d
6213   2E07 FA F9 FF      lea d, [bp + -7] ; $n
6214   2E0A 2A            mov b, [d]
6215   2E0B FD AB         swp b
6216   2E0D D8            push b
6217   2E0E 07 A2 61      call cint100
6218   2E11 51 02 00      add sp, 2
6219   2E14 E7            pop d
6220   2E15 FD 43         mov [d], b
6221   2E17             ;; if (energy - n < 0) { 
6222   2E17             _if98_cond:
6223   2E17 3B E3 61      mov d, _energy ; $energy
6224   2E1A 2A            mov b, [d]
6225   2E1B             ; START TERMS
6226   2E1B D7            push a
6227   2E1C 11            mov a, b
6228   2E1D FA F9 FF      lea d, [bp + -7] ; $n
6229   2E20 2A            mov b, [d]
6230   2E21 60            sub a, b
6231   2E22 27            mov b, a
6232   2E23 E4            pop a
6233   2E24             ; END TERMS
6234   2E24             ; START RELATIONAL
6235   2E24 D7            push a
6236   2E25 11            mov a, b
6237   2E26 26 00 00      mov b, $0
6238   2E29 B0            cmp a, b
6239   2E2A FD 75         slu ; < (unsigned)
6240   2E2C E4            pop a
6241   2E2D             ; END RELATIONAL
6242   2E2D C0 00 00      cmp b, 0
6243   2E30 C6 9B 2E      je _if98_exit
6244   2E33             _if98_true:
6245   2E33             ;; printf("Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", print100(warp)); 
6246   2E33 FA FB FF      lea d, [bp + -5] ; $warp
6247   2E36 2A            mov b, [d]
6248   2E37 FD AB         swp b
6249   2E39 D8            push b
6250   2E3A 07 6C 20      call print100
6251   2E3D 51 02 00      add sp, 2
6252   2E40 FD AB         swp b
6253   2E42 D8            push b
6254   2E43 26 DC 69      mov b, _s76 ; "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n"
6255   2E46 FD AB         swp b
6256   2E48 D8            push b
6257   2E49 07 BA 07      call printf
6258   2E4C 51 04 00      add sp, 4
6259   2E4F             ;; if (shield >= n && damage[7] >= 0) { 
6260   2E4F             _if99_cond:
6261   2E4F 3B 9E 62      mov d, _shield ; $shield
6262   2E52 2A            mov b, [d]
6263   2E53             ; START RELATIONAL
6264   2E53 D7            push a
6265   2E54 11            mov a, b
6266   2E55 FA F9 FF      lea d, [bp + -7] ; $n
6267   2E58 2A            mov b, [d]
6268   2E59 B0            cmp a, b
6269   2E5A FD 80         sge ; >=
6270   2E5C E4            pop a
6271   2E5D             ; END RELATIONAL
6272   2E5D             ; START LOGICAL AND
6273   2E5D D7            push a
6274   2E5E 11            mov a, b
6275   2E5F 3B A5 62      mov d, _damage_data ; $damage
6276   2E62 D7            push a
6277   2E63 DA            push d
6278   2E64 26 07 00      mov b, $7
6279   2E67 E7            pop d
6280   2E68 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6281   2E6C E4            pop a
6282   2E6D 2A            mov b, [d]
6283   2E6E             ; START RELATIONAL
6284   2E6E D7            push a
6285   2E6F 11            mov a, b
6286   2E70 26 00 00      mov b, $0
6287   2E73 B0            cmp a, b
6288   2E74 FD 80         sge ; >=
6289   2E76 E4            pop a
6290   2E77             ; END RELATIONAL
6291   2E77 FD A7         sand a, b
6292   2E79 E4            pop a
6293   2E7A             ; END LOGICAL AND
6294   2E7A C0 00 00      cmp b, 0
6295   2E7D C6 96 2E      je _if99_exit
6296   2E80             _if99_true:
6297   2E80             ;; printf("Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", shield); 
6298   2E80 3B 9E 62      mov d, _shield ; $shield
6299   2E83 2A            mov b, [d]
6300   2E84 FD AB         swp b
6301   2E86 D8            push b
6302   2E87 26 2F 6A      mov b, _s77 ; "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n"
6303   2E8A FD AB         swp b
6304   2E8C D8            push b
6305   2E8D 07 BA 07      call printf
6306   2E90 51 04 00      add sp, 4
6307   2E93 0A 96 2E      jmp _if99_exit
6308   2E96             _if99_exit:
6309   2E96             ;; return; 
6310   2E96 F9            leave
6311   2E97 09            ret
6312   2E98 0A 9B 2E      jmp _if98_exit
6313   2E9B             _if98_exit:
6314   2E9B             ;; klingons_move(); 
6315   2E9B 07 59 57      call klingons_move
6316   2E9E             ;; repair_damage(warp); 
6317   2E9E FA FB FF      lea d, [bp + -5] ; $warp
6318   2EA1 2A            mov b, [d]
6319   2EA2 FD AB         swp b
6320   2EA4 D8            push b
6321   2EA5 07 EC 5A      call repair_damage
6322   2EA8 51 02 00      add sp, 2
6323   2EAB             ;; z1 = FROM_FIXED00(ship_y); 
6324   2EAB FA F1 FF      lea d, [bp + -15] ; $z1
6325   2EAE DA            push d
6326   2EAF 3B B9 62      mov d, _ship_y ; $ship_y
6327   2EB2 2A            mov b, [d]
6328   2EB3 FD AB         swp b
6329   2EB5 D8            push b
6330   2EB6 07 69 1D      call FROM_FIXED00
6331   2EB9 51 02 00      add sp, 2
6332   2EBC E7            pop d
6333   2EBD FD 43         mov [d], b
6334   2EBF             ;; z2 = FROM_FIXED00(ship_x); 
6335   2EBF FA EF FF      lea d, [bp + -17] ; $z2
6336   2EC2 DA            push d
6337   2EC3 3B BB 62      mov d, _ship_x ; $ship_x
6338   2EC6 2A            mov b, [d]
6339   2EC7 FD AB         swp b
6340   2EC9 D8            push b
6341   2ECA 07 69 1D      call FROM_FIXED00
6342   2ECD 51 02 00      add sp, 2
6343   2ED0 E7            pop d
6344   2ED1 FD 43         mov [d], b
6345   2ED3             ;; quad[z1+-1][z2+-1] =  		0      ; 
6346   2ED3 3B BF 62      mov d, _quad_data ; $quad
6347   2ED6 D7            push a
6348   2ED7 DA            push d
6349   2ED8 FA F1 FF      lea d, [bp + -15] ; $z1
6350   2EDB 2A            mov b, [d]
6351   2EDC             ; START TERMS
6352   2EDC D7            push a
6353   2EDD 11            mov a, b
6354   2EDE 26 FF FF      mov b, $ffff
6355   2EE1 56            add b, a
6356   2EE2 E4            pop a
6357   2EE3             ; END TERMS
6358   2EE3 E7            pop d
6359   2EE4 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
6360   2EE8 DA            push d
6361   2EE9 FA EF FF      lea d, [bp + -17] ; $z2
6362   2EEC 2A            mov b, [d]
6363   2EED             ; START TERMS
6364   2EED D7            push a
6365   2EEE 11            mov a, b
6366   2EEF 26 FF FF      mov b, $ffff
6367   2EF2 56            add b, a
6368   2EF3 E4            pop a
6369   2EF4             ; END TERMS
6370   2EF4 E7            pop d
6371   2EF5 5A            add d, b
6372   2EF6 E4            pop a
6373   2EF7 DA            push d
6374   2EF8 26 00 00      mov b, $0
6375   2EFB E7            pop d
6376   2EFC FD 3E         mov [d], bl
6377   2EFE             ;; c2 = FROM_FIXED00(c1);	/* Integer part */ 
6378   2EFE FA F7 FF      lea d, [bp + -9] ; $c2
6379   2F01 DA            push d
6380   2F02 FA FD FF      lea d, [bp + -3] ; $c1
6381   2F05 2A            mov b, [d]
6382   2F06 FD AB         swp b
6383   2F08 D8            push b
6384   2F09 07 69 1D      call FROM_FIXED00
6385   2F0C 51 02 00      add sp, 2
6386   2F0F E7            pop d
6387   2F10 FD 43         mov [d], b
6388   2F12             ;; c3 = c2 + 1;		/* Next integer part */ 
6389   2F12 FA F5 FF      lea d, [bp + -11] ; $c3
6390   2F15 DA            push d
6391   2F16 FA F7 FF      lea d, [bp + -9] ; $c2
6392   2F19 2A            mov b, [d]
6393   2F1A             ; START TERMS
6394   2F1A D7            push a
6395   2F1B 11            mov a, b
6396   2F1C 26 01 00      mov b, $1
6397   2F1F 56            add b, a
6398   2F20 E4            pop a
6399   2F21             ; END TERMS
6400   2F21 E7            pop d
6401   2F22 FD 43         mov [d], b
6402   2F24             ;; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
6403   2F24 FA F3 FF      lea d, [bp + -13] ; $c4
6404   2F27 DA            push d
6405   2F28 FA FD FF      lea d, [bp + -3] ; $c1
6406   2F2B 2A            mov b, [d]
6407   2F2C             ; START TERMS
6408   2F2C D7            push a
6409   2F2D 11            mov a, b
6410   2F2E FA F7 FF      lea d, [bp + -9] ; $c2
6411   2F31 2A            mov b, [d]
6412   2F32 FD AB         swp b
6413   2F34 D8            push b
6414   2F35 07 57 1D      call TO_FIXED00
6415   2F38 51 02 00      add sp, 2
6416   2F3B 60            sub a, b
6417   2F3C 27            mov b, a
6418   2F3D E4            pop a
6419   2F3E             ; END TERMS
6420   2F3E E7            pop d
6421   2F3F FD 43         mov [d], b
6422   2F41             ;; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
6423   2F41 FA ED FF      lea d, [bp + -19] ; $x1
6424   2F44 DA            push d
6425   2F45 26 64 00      mov b, $64
6426   2F48             ; START FACTORS
6427   2F48 D7            push a
6428   2F49 11            mov a, b
6429   2F4A 3B C3 61      mov d, _c_data ; $c
6430   2F4D D7            push a
6431   2F4E DA            push d
6432   2F4F 26 01 00      mov b, $1
6433   2F52 E7            pop d
6434   2F53 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6435   2F57 DA            push d
6436   2F58 FA F7 FF      lea d, [bp + -9] ; $c2
6437   2F5B 2A            mov b, [d]
6438   2F5C E7            pop d
6439   2F5D 5A            add d, b
6440   2F5E E4            pop a
6441   2F5F 32            mov bl, [d]
6442   2F60 A7 00         mov bh, 0
6443   2F62 AC            mul a, b ; *
6444   2F63 11            mov a, b
6445   2F64 27            mov b, a
6446   2F65 E4            pop a
6447   2F66             ; END FACTORS
6448   2F66             ; START TERMS
6449   2F66 D7            push a
6450   2F67 11            mov a, b
6451   2F68 3B C3 61      mov d, _c_data ; $c
6452   2F6B D7            push a
6453   2F6C DA            push d
6454   2F6D 26 01 00      mov b, $1
6455   2F70 E7            pop d
6456   2F71 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6457   2F75 DA            push d
6458   2F76 FA F5 FF      lea d, [bp + -11] ; $c3
6459   2F79 2A            mov b, [d]
6460   2F7A E7            pop d
6461   2F7B 5A            add d, b
6462   2F7C E4            pop a
6463   2F7D 32            mov bl, [d]
6464   2F7E A7 00         mov bh, 0
6465   2F80             ; START TERMS
6466   2F80 D7            push a
6467   2F81 11            mov a, b
6468   2F82 3B C3 61      mov d, _c_data ; $c
6469   2F85 D7            push a
6470   2F86 DA            push d
6471   2F87 26 01 00      mov b, $1
6472   2F8A E7            pop d
6473   2F8B FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6474   2F8F DA            push d
6475   2F90 FA F7 FF      lea d, [bp + -9] ; $c2
6476   2F93 2A            mov b, [d]
6477   2F94 E7            pop d
6478   2F95 5A            add d, b
6479   2F96 E4            pop a
6480   2F97 32            mov bl, [d]
6481   2F98 A7 00         mov bh, 0
6482   2F9A 60            sub a, b
6483   2F9B 27            mov b, a
6484   2F9C E4            pop a
6485   2F9D             ; END TERMS
6486   2F9D             ; START FACTORS
6487   2F9D D7            push a
6488   2F9E 11            mov a, b
6489   2F9F FA F3 FF      lea d, [bp + -13] ; $c4
6490   2FA2 2A            mov b, [d]
6491   2FA3 AC            mul a, b ; *
6492   2FA4 11            mov a, b
6493   2FA5 27            mov b, a
6494   2FA6 E4            pop a
6495   2FA7             ; END FACTORS
6496   2FA7 56            add b, a
6497   2FA8 E4            pop a
6498   2FA9             ; END TERMS
6499   2FA9 E7            pop d
6500   2FAA FD 43         mov [d], b
6501   2FAC             ;; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
6502   2FAC FA EB FF      lea d, [bp + -21] ; $x2
6503   2FAF DA            push d
6504   2FB0 26 64 00      mov b, $64
6505   2FB3             ; START FACTORS
6506   2FB3 D7            push a
6507   2FB4 11            mov a, b
6508   2FB5 3B C3 61      mov d, _c_data ; $c
6509   2FB8 D7            push a
6510   2FB9 DA            push d
6511   2FBA 26 02 00      mov b, $2
6512   2FBD E7            pop d
6513   2FBE FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6514   2FC2 DA            push d
6515   2FC3 FA F7 FF      lea d, [bp + -9] ; $c2
6516   2FC6 2A            mov b, [d]
6517   2FC7 E7            pop d
6518   2FC8 5A            add d, b
6519   2FC9 E4            pop a
6520   2FCA 32            mov bl, [d]
6521   2FCB A7 00         mov bh, 0
6522   2FCD AC            mul a, b ; *
6523   2FCE 11            mov a, b
6524   2FCF 27            mov b, a
6525   2FD0 E4            pop a
6526   2FD1             ; END FACTORS
6527   2FD1             ; START TERMS
6528   2FD1 D7            push a
6529   2FD2 11            mov a, b
6530   2FD3 3B C3 61      mov d, _c_data ; $c
6531   2FD6 D7            push a
6532   2FD7 DA            push d
6533   2FD8 26 02 00      mov b, $2
6534   2FDB E7            pop d
6535   2FDC FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6536   2FE0 DA            push d
6537   2FE1 FA F5 FF      lea d, [bp + -11] ; $c3
6538   2FE4 2A            mov b, [d]
6539   2FE5 E7            pop d
6540   2FE6 5A            add d, b
6541   2FE7 E4            pop a
6542   2FE8 32            mov bl, [d]
6543   2FE9 A7 00         mov bh, 0
6544   2FEB             ; START TERMS
6545   2FEB D7            push a
6546   2FEC 11            mov a, b
6547   2FED 3B C3 61      mov d, _c_data ; $c
6548   2FF0 D7            push a
6549   2FF1 DA            push d
6550   2FF2 26 02 00      mov b, $2
6551   2FF5 E7            pop d
6552   2FF6 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6553   2FFA DA            push d
6554   2FFB FA F7 FF      lea d, [bp + -9] ; $c2
6555   2FFE 2A            mov b, [d]
6556   2FFF E7            pop d
6557   3000 5A            add d, b
6558   3001 E4            pop a
6559   3002 32            mov bl, [d]
6560   3003 A7 00         mov bh, 0
6561   3005 60            sub a, b
6562   3006 27            mov b, a
6563   3007 E4            pop a
6564   3008             ; END TERMS
6565   3008             ; START FACTORS
6566   3008 D7            push a
6567   3009 11            mov a, b
6568   300A FA F3 FF      lea d, [bp + -13] ; $c4
6569   300D 2A            mov b, [d]
6570   300E AC            mul a, b ; *
6571   300F 11            mov a, b
6572   3010 27            mov b, a
6573   3011 E4            pop a
6574   3012             ; END FACTORS
6575   3012 56            add b, a
6576   3013 E4            pop a
6577   3014             ; END TERMS
6578   3014 E7            pop d
6579   3015 FD 43         mov [d], b
6580   3017             ;; x = ship_y; 
6581   3017 FA E9 FF      lea d, [bp + -23] ; $x
6582   301A DA            push d
6583   301B 3B B9 62      mov d, _ship_y ; $ship_y
6584   301E 2A            mov b, [d]
6585   301F E7            pop d
6586   3020 FD 43         mov [d], b
6587   3022             ;; y = ship_x; 
6588   3022 FA E7 FF      lea d, [bp + -25] ; $y
6589   3025 DA            push d
6590   3026 3B BB 62      mov d, _ship_x ; $ship_x
6591   3029 2A            mov b, [d]
6592   302A E7            pop d
6593   302B FD 43         mov [d], b
6594   302D             ;; for (i = 1; i <= n; i++) { 
6595   302D             _for100_init:
6596   302D FA FF FF      lea d, [bp + -1] ; $i
6597   3030 DA            push d
6598   3031 26 01 00      mov b, $1
6599   3034 E7            pop d
6600   3035 FD 43         mov [d], b
6601   3037             _for100_cond:
6602   3037 FA FF FF      lea d, [bp + -1] ; $i
6603   303A 2A            mov b, [d]
6604   303B             ; START RELATIONAL
6605   303B D7            push a
6606   303C 11            mov a, b
6607   303D FA F9 FF      lea d, [bp + -7] ; $n
6608   3040 2A            mov b, [d]
6609   3041 B0            cmp a, b
6610   3042 FD 74         sle ; <= (signed)
6611   3044 E4            pop a
6612   3045             ; END RELATIONAL
6613   3045 C0 00 00      cmp b, 0
6614   3048 C6 88 34      je _for100_exit
6615   304B             _for100_block:
6616   304B             ;; ship_y = ship_y + x1; 
6617   304B 3B B9 62      mov d, _ship_y ; $ship_y
6618   304E DA            push d
6619   304F 3B B9 62      mov d, _ship_y ; $ship_y
6620   3052 2A            mov b, [d]
6621   3053             ; START TERMS
6622   3053 D7            push a
6623   3054 11            mov a, b
6624   3055 FA ED FF      lea d, [bp + -19] ; $x1
6625   3058 2A            mov b, [d]
6626   3059 56            add b, a
6627   305A E4            pop a
6628   305B             ; END TERMS
6629   305B E7            pop d
6630   305C FD 43         mov [d], b
6631   305E             ;; ship_x = ship_x + x2; 
6632   305E 3B BB 62      mov d, _ship_x ; $ship_x
6633   3061 DA            push d
6634   3062 3B BB 62      mov d, _ship_x ; $ship_x
6635   3065 2A            mov b, [d]
6636   3066             ; START TERMS
6637   3066 D7            push a
6638   3067 11            mov a, b
6639   3068 FA EB FF      lea d, [bp + -21] ; $x2
6640   306B 2A            mov b, [d]
6641   306C 56            add b, a
6642   306D E4            pop a
6643   306E             ; END TERMS
6644   306E E7            pop d
6645   306F FD 43         mov [d], b
6646   3071             ;; z1 = FROM_FIXED00(ship_y); 
6647   3071 FA F1 FF      lea d, [bp + -15] ; $z1
6648   3074 DA            push d
6649   3075 3B B9 62      mov d, _ship_y ; $ship_y
6650   3078 2A            mov b, [d]
6651   3079 FD AB         swp b
6652   307B D8            push b
6653   307C 07 69 1D      call FROM_FIXED00
6654   307F 51 02 00      add sp, 2
6655   3082 E7            pop d
6656   3083 FD 43         mov [d], b
6657   3085             ;; z2 = FROM_FIXED00(ship_x);	/* ?? cint100 ?? */ 
6658   3085 FA EF FF      lea d, [bp + -17] ; $z2
6659   3088 DA            push d
6660   3089 3B BB 62      mov d, _ship_x ; $ship_x
6661   308C 2A            mov b, [d]
6662   308D FD AB         swp b
6663   308F D8            push b
6664   3090 07 69 1D      call FROM_FIXED00
6665   3093 51 02 00      add sp, 2
6666   3096 E7            pop d
6667   3097 FD 43         mov [d], b
6668   3099             ;; if (z1 < 1 || z1 >= 9 || z2 < 1 || z2 >= 9) { 
6669   3099             _if101_cond:
6670   3099 FA F1 FF      lea d, [bp + -15] ; $z1
6671   309C 2A            mov b, [d]
6672   309D             ; START RELATIONAL
6673   309D D7            push a
6674   309E 11            mov a, b
6675   309F 26 01 00      mov b, $1
6676   30A2 B0            cmp a, b
6677   30A3 FD 73         slt ; < (signed)
6678   30A5 E4            pop a
6679   30A6             ; END RELATIONAL
6680   30A6             ; START LOGICAL OR
6681   30A6 D7            push a
6682   30A7 11            mov a, b
6683   30A8 FA F1 FF      lea d, [bp + -15] ; $z1
6684   30AB 2A            mov b, [d]
6685   30AC             ; START RELATIONAL
6686   30AC D7            push a
6687   30AD 11            mov a, b
6688   30AE 26 09 00      mov b, $9
6689   30B1 B0            cmp a, b
6690   30B2 FD 80         sge ; >=
6691   30B4 E4            pop a
6692   30B5             ; END RELATIONAL
6693   30B5 FD A8         sor a, b ; ||
6694   30B7 11            mov a, b
6695   30B8 FA EF FF      lea d, [bp + -17] ; $z2
6696   30BB 2A            mov b, [d]
6697   30BC             ; START RELATIONAL
6698   30BC D7            push a
6699   30BD 11            mov a, b
6700   30BE 26 01 00      mov b, $1
6701   30C1 B0            cmp a, b
6702   30C2 FD 73         slt ; < (signed)
6703   30C4 E4            pop a
6704   30C5             ; END RELATIONAL
6705   30C5 FD A8         sor a, b ; ||
6706   30C7 11            mov a, b
6707   30C8 FA EF FF      lea d, [bp + -17] ; $z2
6708   30CB 2A            mov b, [d]
6709   30CC             ; START RELATIONAL
6710   30CC D7            push a
6711   30CD 11            mov a, b
6712   30CE 26 09 00      mov b, $9
6713   30D1 B0            cmp a, b
6714   30D2 FD 80         sge ; >=
6715   30D4 E4            pop a
6716   30D5             ; END RELATIONAL
6717   30D5 FD A8         sor a, b ; ||
6718   30D7 E4            pop a
6719   30D8             ; END LOGICAL OR
6720   30D8 C0 00 00      cmp b, 0
6721   30DB C6 EB 33      je _if101_exit
6722   30DE             _if101_true:
6723   30DE             ;; outside = 0;		/* Outside galaxy flag */ 
6724   30DE FA E6 FF      lea d, [bp + -26] ; $outside
6725   30E1 DA            push d
6726   30E2 26 00 00      mov b, $0
6727   30E5 E7            pop d
6728   30E6 FD 3E         mov [d], bl
6729   30E8             ;; quad_y_old = quad_y; 
6730   30E8 FA E5 FF      lea d, [bp + -27] ; $quad_y_old
6731   30EB DA            push d
6732   30EC 3B 9A 62      mov d, _quad_y ; $quad_y
6733   30EF 2A            mov b, [d]
6734   30F0 E7            pop d
6735   30F1 FD 3E         mov [d], bl
6736   30F3             ;; quad_x_old = quad_x; 
6737   30F3 FA E4 FF      lea d, [bp + -28] ; $quad_x_old
6738   30F6 DA            push d
6739   30F7 3B 9C 62      mov d, _quad_x ; $quad_x
6740   30FA 2A            mov b, [d]
6741   30FB E7            pop d
6742   30FC FD 3E         mov [d], bl
6743   30FE             ;; x = (800 * quad_y) + x + (n * x1); 
6744   30FE FA E9 FF      lea d, [bp + -23] ; $x
6745   3101 DA            push d
6746   3102 26 20 03      mov b, $320
6747   3105             ; START FACTORS
6748   3105 D7            push a
6749   3106 11            mov a, b
6750   3107 3B 9A 62      mov d, _quad_y ; $quad_y
6751   310A 2A            mov b, [d]
6752   310B AC            mul a, b ; *
6753   310C 11            mov a, b
6754   310D 27            mov b, a
6755   310E E4            pop a
6756   310F             ; END FACTORS
6757   310F             ; START TERMS
6758   310F D7            push a
6759   3110 11            mov a, b
6760   3111 FA E9 FF      lea d, [bp + -23] ; $x
6761   3114 2A            mov b, [d]
6762   3115 56            add b, a
6763   3116 11            mov a, b
6764   3117 FA F9 FF      lea d, [bp + -7] ; $n
6765   311A 2A            mov b, [d]
6766   311B             ; START FACTORS
6767   311B D7            push a
6768   311C 11            mov a, b
6769   311D FA ED FF      lea d, [bp + -19] ; $x1
6770   3120 2A            mov b, [d]
6771   3121 AC            mul a, b ; *
6772   3122 11            mov a, b
6773   3123 27            mov b, a
6774   3124 E4            pop a
6775   3125             ; END FACTORS
6776   3125 56            add b, a
6777   3126 E4            pop a
6778   3127             ; END TERMS
6779   3127 E7            pop d
6780   3128 FD 43         mov [d], b
6781   312A             ;; y = (800 * quad_x) + y + (n * x2); 
6782   312A FA E7 FF      lea d, [bp + -25] ; $y
6783   312D DA            push d
6784   312E 26 20 03      mov b, $320
6785   3131             ; START FACTORS
6786   3131 D7            push a
6787   3132 11            mov a, b
6788   3133 3B 9C 62      mov d, _quad_x ; $quad_x
6789   3136 2A            mov b, [d]
6790   3137 AC            mul a, b ; *
6791   3138 11            mov a, b
6792   3139 27            mov b, a
6793   313A E4            pop a
6794   313B             ; END FACTORS
6795   313B             ; START TERMS
6796   313B D7            push a
6797   313C 11            mov a, b
6798   313D FA E7 FF      lea d, [bp + -25] ; $y
6799   3140 2A            mov b, [d]
6800   3141 56            add b, a
6801   3142 11            mov a, b
6802   3143 FA F9 FF      lea d, [bp + -7] ; $n
6803   3146 2A            mov b, [d]
6804   3147             ; START FACTORS
6805   3147 D7            push a
6806   3148 11            mov a, b
6807   3149 FA EB FF      lea d, [bp + -21] ; $x2
6808   314C 2A            mov b, [d]
6809   314D AC            mul a, b ; *
6810   314E 11            mov a, b
6811   314F 27            mov b, a
6812   3150 E4            pop a
6813   3151             ; END FACTORS
6814   3151 56            add b, a
6815   3152 E4            pop a
6816   3153             ; END TERMS
6817   3153 E7            pop d
6818   3154 FD 43         mov [d], b
6819   3156             ;; quad_y = x / 800;	/* Fixed point to int and divide by 8 */ 
6820   3156 3B 9A 62      mov d, _quad_y ; $quad_y
6821   3159 DA            push d
6822   315A FA E9 FF      lea d, [bp + -23] ; $x
6823   315D 2A            mov b, [d]
6824   315E             ; START FACTORS
6825   315E D7            push a
6826   315F 11            mov a, b
6827   3160 26 20 03      mov b, $320
6828   3163 AE            div a, b
6829   3164 27            mov b, a
6830   3165 E4            pop a
6831   3166             ; END FACTORS
6832   3166 E7            pop d
6833   3167 FD 43         mov [d], b
6834   3169             ;; quad_x = y / 800;	/* Ditto */ 
6835   3169 3B 9C 62      mov d, _quad_x ; $quad_x
6836   316C DA            push d
6837   316D FA E7 FF      lea d, [bp + -25] ; $y
6838   3170 2A            mov b, [d]
6839   3171             ; START FACTORS
6840   3171 D7            push a
6841   3172 11            mov a, b
6842   3173 26 20 03      mov b, $320
6843   3176 AE            div a, b
6844   3177 27            mov b, a
6845   3178 E4            pop a
6846   3179             ; END FACTORS
6847   3179 E7            pop d
6848   317A FD 43         mov [d], b
6849   317C             ;; ship_y = x - (quad_y * 800); 
6850   317C 3B B9 62      mov d, _ship_y ; $ship_y
6851   317F DA            push d
6852   3180 FA E9 FF      lea d, [bp + -23] ; $x
6853   3183 2A            mov b, [d]
6854   3184             ; START TERMS
6855   3184 D7            push a
6856   3185 11            mov a, b
6857   3186 3B 9A 62      mov d, _quad_y ; $quad_y
6858   3189 2A            mov b, [d]
6859   318A             ; START FACTORS
6860   318A D7            push a
6861   318B 11            mov a, b
6862   318C 26 20 03      mov b, $320
6863   318F AC            mul a, b ; *
6864   3190 11            mov a, b
6865   3191 27            mov b, a
6866   3192 E4            pop a
6867   3193             ; END FACTORS
6868   3193 60            sub a, b
6869   3194 27            mov b, a
6870   3195 E4            pop a
6871   3196             ; END TERMS
6872   3196 E7            pop d
6873   3197 FD 43         mov [d], b
6874   3199             ;; ship_x = y - (quad_x * 800); 
6875   3199 3B BB 62      mov d, _ship_x ; $ship_x
6876   319C DA            push d
6877   319D FA E7 FF      lea d, [bp + -25] ; $y
6878   31A0 2A            mov b, [d]
6879   31A1             ; START TERMS
6880   31A1 D7            push a
6881   31A2 11            mov a, b
6882   31A3 3B 9C 62      mov d, _quad_x ; $quad_x
6883   31A6 2A            mov b, [d]
6884   31A7             ; START FACTORS
6885   31A7 D7            push a
6886   31A8 11            mov a, b
6887   31A9 26 20 03      mov b, $320
6888   31AC AC            mul a, b ; *
6889   31AD 11            mov a, b
6890   31AE 27            mov b, a
6891   31AF E4            pop a
6892   31B0             ; END FACTORS
6893   31B0 60            sub a, b
6894   31B1 27            mov b, a
6895   31B2 E4            pop a
6896   31B3             ; END TERMS
6897   31B3 E7            pop d
6898   31B4 FD 43         mov [d], b
6899   31B6             ;; if (ship_y < 100) { 
6900   31B6             _if102_cond:
6901   31B6 3B B9 62      mov d, _ship_y ; $ship_y
6902   31B9 2A            mov b, [d]
6903   31BA             ; START RELATIONAL
6904   31BA D7            push a
6905   31BB 11            mov a, b
6906   31BC 26 64 00      mov b, $64
6907   31BF B0            cmp a, b
6908   31C0 FD 73         slt ; < (signed)
6909   31C2 E4            pop a
6910   31C3             ; END RELATIONAL
6911   31C3 C0 00 00      cmp b, 0
6912   31C6 C6 F1 31      je _if102_exit
6913   31C9             _if102_true:
6914   31C9             ;; quad_y = quad_y - 1; 
6915   31C9 3B 9A 62      mov d, _quad_y ; $quad_y
6916   31CC DA            push d
6917   31CD 3B 9A 62      mov d, _quad_y ; $quad_y
6918   31D0 2A            mov b, [d]
6919   31D1             ; START TERMS
6920   31D1 D7            push a
6921   31D2 11            mov a, b
6922   31D3 26 01 00      mov b, $1
6923   31D6 60            sub a, b
6924   31D7 27            mov b, a
6925   31D8 E4            pop a
6926   31D9             ; END TERMS
6927   31D9 E7            pop d
6928   31DA FD 43         mov [d], b
6929   31DC             ;; ship_y = ship_y + 800; 
6930   31DC 3B B9 62      mov d, _ship_y ; $ship_y
6931   31DF DA            push d
6932   31E0 3B B9 62      mov d, _ship_y ; $ship_y
6933   31E3 2A            mov b, [d]
6934   31E4             ; START TERMS
6935   31E4 D7            push a
6936   31E5 11            mov a, b
6937   31E6 26 20 03      mov b, $320
6938   31E9 56            add b, a
6939   31EA E4            pop a
6940   31EB             ; END TERMS
6941   31EB E7            pop d
6942   31EC FD 43         mov [d], b
6943   31EE 0A F1 31      jmp _if102_exit
6944   31F1             _if102_exit:
6945   31F1             ;; if (ship_x < 100) { 
6946   31F1             _if103_cond:
6947   31F1 3B BB 62      mov d, _ship_x ; $ship_x
6948   31F4 2A            mov b, [d]
6949   31F5             ; START RELATIONAL
6950   31F5 D7            push a
6951   31F6 11            mov a, b
6952   31F7 26 64 00      mov b, $64
6953   31FA B0            cmp a, b
6954   31FB FD 73         slt ; < (signed)
6955   31FD E4            pop a
6956   31FE             ; END RELATIONAL
6957   31FE C0 00 00      cmp b, 0
6958   3201 C6 2C 32      je _if103_exit
6959   3204             _if103_true:
6960   3204             ;; quad_x = quad_x - 1; 
6961   3204 3B 9C 62      mov d, _quad_x ; $quad_x
6962   3207 DA            push d
6963   3208 3B 9C 62      mov d, _quad_x ; $quad_x
6964   320B 2A            mov b, [d]
6965   320C             ; START TERMS
6966   320C D7            push a
6967   320D 11            mov a, b
6968   320E 26 01 00      mov b, $1
6969   3211 60            sub a, b
6970   3212 27            mov b, a
6971   3213 E4            pop a
6972   3214             ; END TERMS
6973   3214 E7            pop d
6974   3215 FD 43         mov [d], b
6975   3217             ;; ship_x = ship_x + 800; 
6976   3217 3B BB 62      mov d, _ship_x ; $ship_x
6977   321A DA            push d
6978   321B 3B BB 62      mov d, _ship_x ; $ship_x
6979   321E 2A            mov b, [d]
6980   321F             ; START TERMS
6981   321F D7            push a
6982   3220 11            mov a, b
6983   3221 26 20 03      mov b, $320
6984   3224 56            add b, a
6985   3225 E4            pop a
6986   3226             ; END TERMS
6987   3226 E7            pop d
6988   3227 FD 43         mov [d], b
6989   3229 0A 2C 32      jmp _if103_exit
6990   322C             _if103_exit:
6991   322C             ;; if (quad_y < 1) { 
6992   322C             _if104_cond:
6993   322C 3B 9A 62      mov d, _quad_y ; $quad_y
6994   322F 2A            mov b, [d]
6995   3230             ; START RELATIONAL
6996   3230 D7            push a
6997   3231 11            mov a, b
6998   3232 26 01 00      mov b, $1
6999   3235 B0            cmp a, b
7000   3236 FD 73         slt ; < (signed)
7001   3238 E4            pop a
7002   3239             ; END RELATIONAL
7003   3239 C0 00 00      cmp b, 0
7004   323C C6 60 32      je _if104_exit
7005   323F             _if104_true:
7006   323F             ;; outside = 1; 
7007   323F FA E6 FF      lea d, [bp + -26] ; $outside
7008   3242 DA            push d
7009   3243 26 01 00      mov b, $1
7010   3246 E7            pop d
7011   3247 FD 3E         mov [d], bl
7012   3249             ;; quad_y = 1; 
7013   3249 3B 9A 62      mov d, _quad_y ; $quad_y
7014   324C DA            push d
7015   324D 26 01 00      mov b, $1
7016   3250 E7            pop d
7017   3251 FD 43         mov [d], b
7018   3253             ;; ship_y = 100; 
7019   3253 3B B9 62      mov d, _ship_y ; $ship_y
7020   3256 DA            push d
7021   3257 26 64 00      mov b, $64
7022   325A E7            pop d
7023   325B FD 43         mov [d], b
7024   325D 0A 60 32      jmp _if104_exit
7025   3260             _if104_exit:
7026   3260             ;; if (quad_y > 8) { 
7027   3260             _if105_cond:
7028   3260 3B 9A 62      mov d, _quad_y ; $quad_y
7029   3263 2A            mov b, [d]
7030   3264             ; START RELATIONAL
7031   3264 D7            push a
7032   3265 11            mov a, b
7033   3266 26 08 00      mov b, $8
7034   3269 B0            cmp a, b
7035   326A FD 7F         sgt ; >
7036   326C E4            pop a
7037   326D             ; END RELATIONAL
7038   326D C0 00 00      cmp b, 0
7039   3270 C6 94 32      je _if105_exit
7040   3273             _if105_true:
7041   3273             ;; outside = 1; 
7042   3273 FA E6 FF      lea d, [bp + -26] ; $outside
7043   3276 DA            push d
7044   3277 26 01 00      mov b, $1
7045   327A E7            pop d
7046   327B FD 3E         mov [d], bl
7047   327D             ;; quad_y = 8; 
7048   327D 3B 9A 62      mov d, _quad_y ; $quad_y
7049   3280 DA            push d
7050   3281 26 08 00      mov b, $8
7051   3284 E7            pop d
7052   3285 FD 43         mov [d], b
7053   3287             ;; ship_y = 800; 
7054   3287 3B B9 62      mov d, _ship_y ; $ship_y
7055   328A DA            push d
7056   328B 26 20 03      mov b, $320
7057   328E E7            pop d
7058   328F FD 43         mov [d], b
7059   3291 0A 94 32      jmp _if105_exit
7060   3294             _if105_exit:
7061   3294             ;; if (quad_x < 1) { 
7062   3294             _if106_cond:
7063   3294 3B 9C 62      mov d, _quad_x ; $quad_x
7064   3297 2A            mov b, [d]
7065   3298             ; START RELATIONAL
7066   3298 D7            push a
7067   3299 11            mov a, b
7068   329A 26 01 00      mov b, $1
7069   329D B0            cmp a, b
7070   329E FD 73         slt ; < (signed)
7071   32A0 E4            pop a
7072   32A1             ; END RELATIONAL
7073   32A1 C0 00 00      cmp b, 0
7074   32A4 C6 C8 32      je _if106_exit
7075   32A7             _if106_true:
7076   32A7             ;; outside = 1; 
7077   32A7 FA E6 FF      lea d, [bp + -26] ; $outside
7078   32AA DA            push d
7079   32AB 26 01 00      mov b, $1
7080   32AE E7            pop d
7081   32AF FD 3E         mov [d], bl
7082   32B1             ;; quad_x = 1; 
7083   32B1 3B 9C 62      mov d, _quad_x ; $quad_x
7084   32B4 DA            push d
7085   32B5 26 01 00      mov b, $1
7086   32B8 E7            pop d
7087   32B9 FD 43         mov [d], b
7088   32BB             ;; ship_x = 100; 
7089   32BB 3B BB 62      mov d, _ship_x ; $ship_x
7090   32BE DA            push d
7091   32BF 26 64 00      mov b, $64
7092   32C2 E7            pop d
7093   32C3 FD 43         mov [d], b
7094   32C5 0A C8 32      jmp _if106_exit
7095   32C8             _if106_exit:
7096   32C8             ;; if (quad_x > 8) { 
7097   32C8             _if107_cond:
7098   32C8 3B 9C 62      mov d, _quad_x ; $quad_x
7099   32CB 2A            mov b, [d]
7100   32CC             ; START RELATIONAL
7101   32CC D7            push a
7102   32CD 11            mov a, b
7103   32CE 26 08 00      mov b, $8
7104   32D1 B0            cmp a, b
7105   32D2 FD 7F         sgt ; >
7106   32D4 E4            pop a
7107   32D5             ; END RELATIONAL
7108   32D5 C0 00 00      cmp b, 0
7109   32D8 C6 FC 32      je _if107_exit
7110   32DB             _if107_true:
7111   32DB             ;; outside = 1; 
7112   32DB FA E6 FF      lea d, [bp + -26] ; $outside
7113   32DE DA            push d
7114   32DF 26 01 00      mov b, $1
7115   32E2 E7            pop d
7116   32E3 FD 3E         mov [d], bl
7117   32E5             ;; quad_x = 8; 
7118   32E5 3B 9C 62      mov d, _quad_x ; $quad_x
7119   32E8 DA            push d
7120   32E9 26 08 00      mov b, $8
7121   32EC E7            pop d
7122   32ED FD 43         mov [d], b
7123   32EF             ;; ship_x = 800; 
7124   32EF 3B BB 62      mov d, _ship_x ; $ship_x
7125   32F2 DA            push d
7126   32F3 26 20 03      mov b, $320
7127   32F6 E7            pop d
7128   32F7 FD 43         mov [d], b
7129   32F9 0A FC 32      jmp _if107_exit
7130   32FC             _if107_exit:
7131   32FC             ;; if (outside == 1) { 
7132   32FC             _if108_cond:
7133   32FC FA E6 FF      lea d, [bp + -26] ; $outside
7134   32FF 32            mov bl, [d]
7135   3300 A7 00         mov bh, 0
7136   3302             ; START RELATIONAL
7137   3302 D7            push a
7138   3303 11            mov a, b
7139   3304 26 01 00      mov b, $1
7140   3307 B0            cmp a, b
7141   3308 FD 71         seq ; ==
7142   330A E4            pop a
7143   330B             ; END RELATIONAL
7144   330B C0 00 00      cmp b, 0
7145   330E C6 4E 33      je _if108_exit
7146   3311             _if108_true:
7147   3311             ;; printf("LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", FROM_FIXED00(ship_y), 
7148   3311 3B 9C 62      mov d, _quad_x ; $quad_x
7149   3314 2A            mov b, [d]
7150   3315 FD AB         swp b
7151   3317 D8            push b
7152   3318 3B 9A 62      mov d, _quad_y ; $quad_y
7153   331B 2A            mov b, [d]
7154   331C FD AB         swp b
7155   331E D8            push b
7156   331F 3B BB 62      mov d, _ship_x ; $ship_x
7157   3322 2A            mov b, [d]
7158   3323 FD AB         swp b
7159   3325 D8            push b
7160   3326 07 69 1D      call FROM_FIXED00
7161   3329 51 02 00      add sp, 2
7162   332C FD AB         swp b
7163   332E D8            push b
7164   332F 3B B9 62      mov d, _ship_y ; $ship_y
7165   3332 2A            mov b, [d]
7166   3333 FD AB         swp b
7167   3335 D8            push b
7168   3336 07 69 1D      call FROM_FIXED00
7169   3339 51 02 00      add sp, 2
7170   333C FD AB         swp b
7171   333E D8            push b
7172   333F 26 89 6A      mov b, _s78 ; "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n"
7173   3342 FD AB         swp b
7174   3344 D8            push b
7175   3345 07 BA 07      call printf
7176   3348 51 0A 00      add sp, 10
7177   334B 0A 4E 33      jmp _if108_exit
7178   334E             _if108_exit:
7179   334E             ;; maneuver_energy(n); 
7180   334E FA F9 FF      lea d, [bp + -7] ; $n
7181   3351 2A            mov b, [d]
7182   3352 FD AB         swp b
7183   3354 D8            push b
7184   3355 07 3D 35      call maneuver_energy
7185   3358 51 02 00      add sp, 2
7186   335B             ;; if (FROM_FIXED(stardate) > time_start + time_up) 
7187   335B             _if109_cond:
7188   335B 3B BD 62      mov d, _stardate ; $stardate
7189   335E 2A            mov b, [d]
7190   335F FD AB         swp b
7191   3361 D8            push b
7192   3362 07 46 1D      call FROM_FIXED
7193   3365 51 02 00      add sp, 2
7194   3368             ; START RELATIONAL
7195   3368 D7            push a
7196   3369 11            mov a, b
7197   336A 3B A1 62      mov d, _time_start ; $time_start
7198   336D 2A            mov b, [d]
7199   336E             ; START TERMS
7200   336E D7            push a
7201   336F 11            mov a, b
7202   3370 3B A3 62      mov d, _time_up ; $time_up
7203   3373 2A            mov b, [d]
7204   3374 56            add b, a
7205   3375 E4            pop a
7206   3376             ; END TERMS
7207   3376 B0            cmp a, b
7208   3377 FD 7F         sgt ; >
7209   3379 E4            pop a
7210   337A             ; END RELATIONAL
7211   337A C0 00 00      cmp b, 0
7212   337D C6 86 33      je _if109_exit
7213   3380             _if109_true:
7214   3380             ;; end_of_time(); 
7215   3380 07 05 56      call end_of_time
7216   3383 0A 86 33      jmp _if109_exit
7217   3386             _if109_exit:
7218   3386             ;; if (quad_y != quad_y_old || quad_x != quad_x_old) { 
7219   3386             _if110_cond:
7220   3386 3B 9A 62      mov d, _quad_y ; $quad_y
7221   3389 2A            mov b, [d]
7222   338A             ; START RELATIONAL
7223   338A D7            push a
7224   338B 11            mov a, b
7225   338C FA E5 FF      lea d, [bp + -27] ; $quad_y_old
7226   338F 32            mov bl, [d]
7227   3390 A7 00         mov bh, 0
7228   3392 B0            cmp a, b
7229   3393 FD 72         sneq ; !=
7230   3395 E4            pop a
7231   3396             ; END RELATIONAL
7232   3396             ; START LOGICAL OR
7233   3396 D7            push a
7234   3397 11            mov a, b
7235   3398 3B 9C 62      mov d, _quad_x ; $quad_x
7236   339B 2A            mov b, [d]
7237   339C             ; START RELATIONAL
7238   339C D7            push a
7239   339D 11            mov a, b
7240   339E FA E4 FF      lea d, [bp + -28] ; $quad_x_old
7241   33A1 32            mov bl, [d]
7242   33A2 A7 00         mov bh, 0
7243   33A4 B0            cmp a, b
7244   33A5 FD 72         sneq ; !=
7245   33A7 E4            pop a
7246   33A8             ; END RELATIONAL
7247   33A8 FD A8         sor a, b ; ||
7248   33AA E4            pop a
7249   33AB             ; END LOGICAL OR
7250   33AB C0 00 00      cmp b, 0
7251   33AE C6 D2 33      je _if110_exit
7252   33B1             _if110_true:
7253   33B1             ;; stardate = stardate + TO_FIXED(1); 
7254   33B1 3B BD 62      mov d, _stardate ; $stardate
7255   33B4 DA            push d
7256   33B5 3B BD 62      mov d, _stardate ; $stardate
7257   33B8 2A            mov b, [d]
7258   33B9             ; START TERMS
7259   33B9 D7            push a
7260   33BA 11            mov a, b
7261   33BB 26 01 00      mov b, $1
7262   33BE FD AB         swp b
7263   33C0 D8            push b
7264   33C1 07 34 1D      call TO_FIXED
7265   33C4 51 02 00      add sp, 2
7266   33C7 56            add b, a
7267   33C8 E4            pop a
7268   33C9             ; END TERMS
7269   33C9 E7            pop d
7270   33CA FD 43         mov [d], b
7271   33CC             ;; new_quadrant(); 
7272   33CC 07 CA 28      call new_quadrant
7273   33CF 0A D2 33      jmp _if110_exit
7274   33D2             _if110_exit:
7275   33D2             ;; complete_maneuver(warp, n); 
7276   33D2 FA F9 FF      lea d, [bp + -7] ; $n
7277   33D5 2A            mov b, [d]
7278   33D6 FD AB         swp b
7279   33D8 D8            push b
7280   33D9 FA FB FF      lea d, [bp + -5] ; $warp
7281   33DC 2A            mov b, [d]
7282   33DD FD AB         swp b
7283   33DF D8            push b
7284   33E0 07 9E 34      call complete_maneuver
7285   33E3 51 04 00      add sp, 4
7286   33E6             ;; return; 
7287   33E6 F9            leave
7288   33E7 09            ret
7289   33E8 0A EB 33      jmp _if101_exit
7290   33EB             _if101_exit:
7291   33EB             ;; if (quad[z1+-1][z2+-1] !=  		0      ) {	/* Sector not empty */ 
7292   33EB             _if111_cond:
7293   33EB 3B BF 62      mov d, _quad_data ; $quad
7294   33EE D7            push a
7295   33EF DA            push d
7296   33F0 FA F1 FF      lea d, [bp + -15] ; $z1
7297   33F3 2A            mov b, [d]
7298   33F4             ; START TERMS
7299   33F4 D7            push a
7300   33F5 11            mov a, b
7301   33F6 26 FF FF      mov b, $ffff
7302   33F9 56            add b, a
7303   33FA E4            pop a
7304   33FB             ; END TERMS
7305   33FB E7            pop d
7306   33FC FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7307   3400 DA            push d
7308   3401 FA EF FF      lea d, [bp + -17] ; $z2
7309   3404 2A            mov b, [d]
7310   3405             ; START TERMS
7311   3405 D7            push a
7312   3406 11            mov a, b
7313   3407 26 FF FF      mov b, $ffff
7314   340A 56            add b, a
7315   340B E4            pop a
7316   340C             ; END TERMS
7317   340C E7            pop d
7318   340D 5A            add d, b
7319   340E E4            pop a
7320   340F 32            mov bl, [d]
7321   3410 A7 00         mov bh, 0
7322   3412             ; START RELATIONAL
7323   3412 D7            push a
7324   3413 11            mov a, b
7325   3414 26 00 00      mov b, $0
7326   3417 B0            cmp a, b
7327   3418 FD 72         sneq ; !=
7328   341A E4            pop a
7329   341B             ; END RELATIONAL
7330   341B C0 00 00      cmp b, 0
7331   341E C6 78 34      je _if111_exit
7332   3421             _if111_true:
7333   3421             ;; ship_y = ship_y - x1; 
7334   3421 3B B9 62      mov d, _ship_y ; $ship_y
7335   3424 DA            push d
7336   3425 3B B9 62      mov d, _ship_y ; $ship_y
7337   3428 2A            mov b, [d]
7338   3429             ; START TERMS
7339   3429 D7            push a
7340   342A 11            mov a, b
7341   342B FA ED FF      lea d, [bp + -19] ; $x1
7342   342E 2A            mov b, [d]
7343   342F 60            sub a, b
7344   3430 27            mov b, a
7345   3431 E4            pop a
7346   3432             ; END TERMS
7347   3432 E7            pop d
7348   3433 FD 43         mov [d], b
7349   3435             ;; ship_x = ship_x - x2; 
7350   3435 3B BB 62      mov d, _ship_x ; $ship_x
7351   3438 DA            push d
7352   3439 3B BB 62      mov d, _ship_x ; $ship_x
7353   343C 2A            mov b, [d]
7354   343D             ; START TERMS
7355   343D D7            push a
7356   343E 11            mov a, b
7357   343F FA EB FF      lea d, [bp + -21] ; $x2
7358   3442 2A            mov b, [d]
7359   3443 60            sub a, b
7360   3444 27            mov b, a
7361   3445 E4            pop a
7362   3446             ; END TERMS
7363   3446 E7            pop d
7364   3447 FD 43         mov [d], b
7365   3449             ;; printf("Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", z1, z2); 
7366   3449 FA EF FF      lea d, [bp + -17] ; $z2
7367   344C 2A            mov b, [d]
7368   344D FD AB         swp b
7369   344F D8            push b
7370   3450 FA F1 FF      lea d, [bp + -15] ; $z1
7371   3453 2A            mov b, [d]
7372   3454 FD AB         swp b
7373   3456 D8            push b
7374   3457 26 80 6B      mov b, _s79 ; "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n"
7375   345A FD AB         swp b
7376   345C D8            push b
7377   345D 07 BA 07      call printf
7378   3460 51 06 00      add sp, 6
7379   3463             ;; i = n + 1; 
7380   3463 FA FF FF      lea d, [bp + -1] ; $i
7381   3466 DA            push d
7382   3467 FA F9 FF      lea d, [bp + -7] ; $n
7383   346A 2A            mov b, [d]
7384   346B             ; START TERMS
7385   346B D7            push a
7386   346C 11            mov a, b
7387   346D 26 01 00      mov b, $1
7388   3470 56            add b, a
7389   3471 E4            pop a
7390   3472             ; END TERMS
7391   3472 E7            pop d
7392   3473 FD 43         mov [d], b
7393   3475 0A 78 34      jmp _if111_exit
7394   3478             _if111_exit:
7395   3478             _for100_update:
7396   3478 FA FF FF      lea d, [bp + -1] ; $i
7397   347B 2A            mov b, [d]
7398   347C FD 77         inc b
7399   347E FA FF FF      lea d, [bp + -1] ; $i
7400   3481 FD 43         mov [d], b
7401   3483 FD 7D         dec b
7402   3485 0A 37 30      jmp _for100_cond
7403   3488             _for100_exit:
7404   3488             ;; complete_maneuver(warp, n); 
7405   3488 FA F9 FF      lea d, [bp + -7] ; $n
7406   348B 2A            mov b, [d]
7407   348C FD AB         swp b
7408   348E D8            push b
7409   348F FA FB FF      lea d, [bp + -5] ; $warp
7410   3492 2A            mov b, [d]
7411   3493 FD AB         swp b
7412   3495 D8            push b
7413   3496 07 9E 34      call complete_maneuver
7414   3499 51 04 00      add sp, 4
7415   349C F9            leave
7416   349D 09            ret
7417   349E             
7418   349E             complete_maneuver:
7419   349E F8 00 00      enter 0 ; (push bp; mov bp, sp)
7420   34A1             ;; unsigned int        time_used; 
7421   34A1 52 02 00      sub sp, 2 ; time_used
7422   34A4             ;; place_ship(); 
7423   34A4 07 86 28      call place_ship
7424   34A7             ;; maneuver_energy(n); 
7425   34A7 FA 07 00      lea d, [bp + 7] ; $n
7426   34AA 2A            mov b, [d]
7427   34AB FD AB         swp b
7428   34AD D8            push b
7429   34AE 07 3D 35      call maneuver_energy
7430   34B1 51 02 00      add sp, 2
7431   34B4             ;; time_used = TO_FIXED(1); 
7432   34B4 FA FF FF      lea d, [bp + -1] ; $time_used
7433   34B7 DA            push d
7434   34B8 26 01 00      mov b, $1
7435   34BB FD AB         swp b
7436   34BD D8            push b
7437   34BE 07 34 1D      call TO_FIXED
7438   34C1 51 02 00      add sp, 2
7439   34C4 E7            pop d
7440   34C5 FD 43         mov [d], b
7441   34C7             ;; if (warp < 100) 
7442   34C7             _if112_cond:
7443   34C7 FA 05 00      lea d, [bp + 5] ; $warp
7444   34CA 2A            mov b, [d]
7445   34CB             ; START RELATIONAL
7446   34CB D7            push a
7447   34CC 11            mov a, b
7448   34CD 26 64 00      mov b, $64
7449   34D0 B0            cmp a, b
7450   34D1 FD 75         slu ; < (unsigned)
7451   34D3 E4            pop a
7452   34D4             ; END RELATIONAL
7453   34D4 C0 00 00      cmp b, 0
7454   34D7 C6 FA 34      je _if112_exit
7455   34DA             _if112_true:
7456   34DA             ;; time_used = TO_FIXED(FROM_FIXED00(warp)); 
7457   34DA FA FF FF      lea d, [bp + -1] ; $time_used
7458   34DD DA            push d
7459   34DE FA 05 00      lea d, [bp + 5] ; $warp
7460   34E1 2A            mov b, [d]
7461   34E2 FD AB         swp b
7462   34E4 D8            push b
7463   34E5 07 69 1D      call FROM_FIXED00
7464   34E8 51 02 00      add sp, 2
7465   34EB FD AB         swp b
7466   34ED D8            push b
7467   34EE 07 34 1D      call TO_FIXED
7468   34F1 51 02 00      add sp, 2
7469   34F4 E7            pop d
7470   34F5 FD 43         mov [d], b
7471   34F7 0A FA 34      jmp _if112_exit
7472   34FA             _if112_exit:
7473   34FA             ;; stardate = stardate + time_used; 
7474   34FA 3B BD 62      mov d, _stardate ; $stardate
7475   34FD DA            push d
7476   34FE 3B BD 62      mov d, _stardate ; $stardate
7477   3501 2A            mov b, [d]
7478   3502             ; START TERMS
7479   3502 D7            push a
7480   3503 11            mov a, b
7481   3504 FA FF FF      lea d, [bp + -1] ; $time_used
7482   3507 2A            mov b, [d]
7483   3508 56            add b, a
7484   3509 E4            pop a
7485   350A             ; END TERMS
7486   350A E7            pop d
7487   350B FD 43         mov [d], b
7488   350D             ;; if (FROM_FIXED(stardate) > time_start + time_up) 
7489   350D             _if113_cond:
7490   350D 3B BD 62      mov d, _stardate ; $stardate
7491   3510 2A            mov b, [d]
7492   3511 FD AB         swp b
7493   3513 D8            push b
7494   3514 07 46 1D      call FROM_FIXED
7495   3517 51 02 00      add sp, 2
7496   351A             ; START RELATIONAL
7497   351A D7            push a
7498   351B 11            mov a, b
7499   351C 3B A1 62      mov d, _time_start ; $time_start
7500   351F 2A            mov b, [d]
7501   3520             ; START TERMS
7502   3520 D7            push a
7503   3521 11            mov a, b
7504   3522 3B A3 62      mov d, _time_up ; $time_up
7505   3525 2A            mov b, [d]
7506   3526 56            add b, a
7507   3527 E4            pop a
7508   3528             ; END TERMS
7509   3528 B0            cmp a, b
7510   3529 FD 7F         sgt ; >
7511   352B E4            pop a
7512   352C             ; END RELATIONAL
7513   352C C0 00 00      cmp b, 0
7514   352F C6 38 35      je _if113_exit
7515   3532             _if113_true:
7516   3532             ;; end_of_time(); 
7517   3532 07 05 56      call end_of_time
7518   3535 0A 38 35      jmp _if113_exit
7519   3538             _if113_exit:
7520   3538             ;; short_range_scan(); 
7521   3538 07 BC 35      call short_range_scan
7522   353B F9            leave
7523   353C 09            ret
7524   353D             
7525   353D             maneuver_energy:
7526   353D F8 00 00      enter 0 ; (push bp; mov bp, sp)
7527   3540             ;; energy = energy - n + 10; 
7528   3540 3B E3 61      mov d, _energy ; $energy
7529   3543 DA            push d
7530   3544 3B E3 61      mov d, _energy ; $energy
7531   3547 2A            mov b, [d]
7532   3548             ; START TERMS
7533   3548 D7            push a
7534   3549 11            mov a, b
7535   354A FA 05 00      lea d, [bp + 5] ; $n
7536   354D 2A            mov b, [d]
7537   354E 60            sub a, b
7538   354F 27            mov b, a
7539   3550 11            mov a, b
7540   3551 26 0A 00      mov b, $a
7541   3554 56            add b, a
7542   3555 E4            pop a
7543   3556             ; END TERMS
7544   3556 E7            pop d
7545   3557 FD 43         mov [d], b
7546   3559             ;; if (energy >= 0) 
7547   3559             _if114_cond:
7548   3559 3B E3 61      mov d, _energy ; $energy
7549   355C 2A            mov b, [d]
7550   355D             ; START RELATIONAL
7551   355D D7            push a
7552   355E 11            mov a, b
7553   355F 26 00 00      mov b, $0
7554   3562 B0            cmp a, b
7555   3563 FD 80         sge ; >=
7556   3565 E4            pop a
7557   3566             ; END RELATIONAL
7558   3566 C0 00 00      cmp b, 0
7559   3569 C6 71 35      je _if114_exit
7560   356C             _if114_true:
7561   356C             ;; return; 
7562   356C F9            leave
7563   356D 09            ret
7564   356E 0A 71 35      jmp _if114_exit
7565   3571             _if114_exit:
7566   3571             ;; puts("Shield Control supplies energy to complete maneuver.\n"); 
7567   3571 26 C1 6B      mov b, _s80 ; "Shield Control supplies energy to complete maneuver.\n"
7568   3574 FD AB         swp b
7569   3576 D8            push b
7570   3577 07 4A 15      call puts
7571   357A 51 02 00      add sp, 2
7572   357D             ;; shield = shield + energy; 
7573   357D 3B 9E 62      mov d, _shield ; $shield
7574   3580 DA            push d
7575   3581 3B 9E 62      mov d, _shield ; $shield
7576   3584 2A            mov b, [d]
7577   3585             ; START TERMS
7578   3585 D7            push a
7579   3586 11            mov a, b
7580   3587 3B E3 61      mov d, _energy ; $energy
7581   358A 2A            mov b, [d]
7582   358B 56            add b, a
7583   358C E4            pop a
7584   358D             ; END TERMS
7585   358D E7            pop d
7586   358E FD 43         mov [d], b
7587   3590             ;; energy = 0; 
7588   3590 3B E3 61      mov d, _energy ; $energy
7589   3593 DA            push d
7590   3594 26 00 00      mov b, $0
7591   3597 E7            pop d
7592   3598 FD 43         mov [d], b
7593   359A             ;; if (shield <= 0) 
7594   359A             _if115_cond:
7595   359A 3B 9E 62      mov d, _shield ; $shield
7596   359D 2A            mov b, [d]
7597   359E             ; START RELATIONAL
7598   359E D7            push a
7599   359F 11            mov a, b
7600   35A0 26 00 00      mov b, $0
7601   35A3 B0            cmp a, b
7602   35A4 FD 74         sle ; <= (signed)
7603   35A6 E4            pop a
7604   35A7             ; END RELATIONAL
7605   35A7 C0 00 00      cmp b, 0
7606   35AA C6 BA 35      je _if115_exit
7607   35AD             _if115_true:
7608   35AD             ;; shield = 0; 
7609   35AD 3B 9E 62      mov d, _shield ; $shield
7610   35B0 DA            push d
7611   35B1 26 00 00      mov b, $0
7612   35B4 E7            pop d
7613   35B5 FD 43         mov [d], b
7614   35B7 0A BA 35      jmp _if115_exit
7615   35BA             _if115_exit:
7616   35BA F9            leave
7617   35BB 09            ret
7618   35BC             
7619   35BC             short_range_scan:
7620   35BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
7621   35BF             ;; int i, j; 
7622   35BF 52 02 00      sub sp, 2 ; i
7623   35C2 52 02 00      sub sp, 2 ; j
7624   35C5             ;; char *sC = "GREEN"; 
7625   35C5 52 02 00      sub sp, 2 ; sC
7626   35C8             ; --- START LOCAL VAR INITIALIZATION
7627   35C8 FA FB FF      lea d, [bp + -5] ; $sC
7628   35CB DA            push d
7629   35CC 26 F7 6B      mov b, _s81 ; "GREEN"
7630   35CF E7            pop d
7631   35D0 FD 43         mov [d], b
7632   35D2             ; --- END LOCAL VAR INITIALIZATION
7633   35D2             ;; if (energy < energy0 / 10) 
7634   35D2             _if116_cond:
7635   35D2 3B E3 61      mov d, _energy ; $energy
7636   35D5 2A            mov b, [d]
7637   35D6             ; START RELATIONAL
7638   35D6 D7            push a
7639   35D7 11            mov a, b
7640   35D8 3B E5 61      mov d, _energy0 ; $energy0
7641   35DB 2A            mov b, [d]
7642   35DC             ; START FACTORS
7643   35DC D7            push a
7644   35DD 11            mov a, b
7645   35DE 26 0A 00      mov b, $a
7646   35E1 AE            div a, b
7647   35E2 27            mov b, a
7648   35E3 E4            pop a
7649   35E4             ; END FACTORS
7650   35E4 B0            cmp a, b
7651   35E5 FD 73         slt ; < (signed)
7652   35E7 E4            pop a
7653   35E8             ; END RELATIONAL
7654   35E8 C0 00 00      cmp b, 0
7655   35EB C6 FB 35      je _if116_exit
7656   35EE             _if116_true:
7657   35EE             ;; sC = "YELLOW"; 
7658   35EE FA FB FF      lea d, [bp + -5] ; $sC
7659   35F1 DA            push d
7660   35F2 26 FD 6B      mov b, _s82 ; "YELLOW"
7661   35F5 E7            pop d
7662   35F6 FD 43         mov [d], b
7663   35F8 0A FB 35      jmp _if116_exit
7664   35FB             _if116_exit:
7665   35FB             ;; if (klingons > 0) 
7666   35FB             _if117_cond:
7667   35FB 3B 95 62      mov d, _klingons ; $klingons
7668   35FE 32            mov bl, [d]
7669   35FF A7 00         mov bh, 0
7670   3601             ; START RELATIONAL
7671   3601 D7            push a
7672   3602 11            mov a, b
7673   3603 26 00 00      mov b, $0
7674   3606 B0            cmp a, b
7675   3607 FD 81         sgu ; > (unsigned)
7676   3609 E4            pop a
7677   360A             ; END RELATIONAL
7678   360A C0 00 00      cmp b, 0
7679   360D C6 1D 36      je _if117_exit
7680   3610             _if117_true:
7681   3610             ;; sC = "*RED*"; 
7682   3610 FA FB FF      lea d, [bp + -5] ; $sC
7683   3613 DA            push d
7684   3614 26 04 6C      mov b, _s83 ; "*RED*"
7685   3617 E7            pop d
7686   3618 FD 43         mov [d], b
7687   361A 0A 1D 36      jmp _if117_exit
7688   361D             _if117_exit:
7689   361D             ;; docked = 0; 
7690   361D 3B E2 61      mov d, _docked ; $docked
7691   3620 DA            push d
7692   3621 26 00 00      mov b, $0
7693   3624 E7            pop d
7694   3625 FD 3E         mov [d], bl
7695   3627             ;; for (i = (int) (FROM_FIXED00(ship_y) - 1); i <= (int) (FROM_FIXED00(ship_y) + 1); i++) 
7696   3627             _for118_init:
7697   3627 FA FF FF      lea d, [bp + -1] ; $i
7698   362A DA            push d
7699   362B 3B B9 62      mov d, _ship_y ; $ship_y
7700   362E 2A            mov b, [d]
7701   362F FD AB         swp b
7702   3631 D8            push b
7703   3632 07 69 1D      call FROM_FIXED00
7704   3635 51 02 00      add sp, 2
7705   3638             ; START TERMS
7706   3638 D7            push a
7707   3639 11            mov a, b
7708   363A 26 01 00      mov b, $1
7709   363D 60            sub a, b
7710   363E 27            mov b, a
7711   363F E4            pop a
7712   3640             ; END TERMS
7713   3640 E7            pop d
7714   3641 FD 43         mov [d], b
7715   3643             _for118_cond:
7716   3643 FA FF FF      lea d, [bp + -1] ; $i
7717   3646 2A            mov b, [d]
7718   3647             ; START RELATIONAL
7719   3647 D7            push a
7720   3648 11            mov a, b
7721   3649 3B B9 62      mov d, _ship_y ; $ship_y
7722   364C 2A            mov b, [d]
7723   364D FD AB         swp b
7724   364F D8            push b
7725   3650 07 69 1D      call FROM_FIXED00
7726   3653 51 02 00      add sp, 2
7727   3656             ; START TERMS
7728   3656 D7            push a
7729   3657 11            mov a, b
7730   3658 26 01 00      mov b, $1
7731   365B 56            add b, a
7732   365C E4            pop a
7733   365D             ; END TERMS
7734   365D B0            cmp a, b
7735   365E FD 74         sle ; <= (signed)
7736   3660 E4            pop a
7737   3661             ; END RELATIONAL
7738   3661 C0 00 00      cmp b, 0
7739   3664 C6 8A 37      je _for118_exit
7740   3667             _for118_block:
7741   3667             ;; for (j = (int) (FROM_FIXED00(ship_x) - 1); j <= (int) (FROM_FIXED00(ship_x) + 1); j++) 
7742   3667             _for119_init:
7743   3667 FA FD FF      lea d, [bp + -3] ; $j
7744   366A DA            push d
7745   366B 3B BB 62      mov d, _ship_x ; $ship_x
7746   366E 2A            mov b, [d]
7747   366F FD AB         swp b
7748   3671 D8            push b
7749   3672 07 69 1D      call FROM_FIXED00
7750   3675 51 02 00      add sp, 2
7751   3678             ; START TERMS
7752   3678 D7            push a
7753   3679 11            mov a, b
7754   367A 26 01 00      mov b, $1
7755   367D 60            sub a, b
7756   367E 27            mov b, a
7757   367F E4            pop a
7758   3680             ; END TERMS
7759   3680 E7            pop d
7760   3681 FD 43         mov [d], b
7761   3683             _for119_cond:
7762   3683 FA FD FF      lea d, [bp + -3] ; $j
7763   3686 2A            mov b, [d]
7764   3687             ; START RELATIONAL
7765   3687 D7            push a
7766   3688 11            mov a, b
7767   3689 3B BB 62      mov d, _ship_x ; $ship_x
7768   368C 2A            mov b, [d]
7769   368D FD AB         swp b
7770   368F D8            push b
7771   3690 07 69 1D      call FROM_FIXED00
7772   3693 51 02 00      add sp, 2
7773   3696             ; START TERMS
7774   3696 D7            push a
7775   3697 11            mov a, b
7776   3698 26 01 00      mov b, $1
7777   369B 56            add b, a
7778   369C E4            pop a
7779   369D             ; END TERMS
7780   369D B0            cmp a, b
7781   369E FD 74         sle ; <= (signed)
7782   36A0 E4            pop a
7783   36A1             ; END RELATIONAL
7784   36A1 C0 00 00      cmp b, 0
7785   36A4 C6 7A 37      je _for119_exit
7786   36A7             _for119_block:
7787   36A7             ;; if (i >= 1 && i <= 8 && j >= 1 && j <= 8) { 
7788   36A7             _if120_cond:
7789   36A7 FA FF FF      lea d, [bp + -1] ; $i
7790   36AA 2A            mov b, [d]
7791   36AB             ; START RELATIONAL
7792   36AB D7            push a
7793   36AC 11            mov a, b
7794   36AD 26 01 00      mov b, $1
7795   36B0 B0            cmp a, b
7796   36B1 FD 80         sge ; >=
7797   36B3 E4            pop a
7798   36B4             ; END RELATIONAL
7799   36B4             ; START LOGICAL AND
7800   36B4 D7            push a
7801   36B5 11            mov a, b
7802   36B6 FA FF FF      lea d, [bp + -1] ; $i
7803   36B9 2A            mov b, [d]
7804   36BA             ; START RELATIONAL
7805   36BA D7            push a
7806   36BB 11            mov a, b
7807   36BC 26 08 00      mov b, $8
7808   36BF B0            cmp a, b
7809   36C0 FD 74         sle ; <= (signed)
7810   36C2 E4            pop a
7811   36C3             ; END RELATIONAL
7812   36C3 FD A7         sand a, b
7813   36C5 11            mov a, b
7814   36C6 FA FD FF      lea d, [bp + -3] ; $j
7815   36C9 2A            mov b, [d]
7816   36CA             ; START RELATIONAL
7817   36CA D7            push a
7818   36CB 11            mov a, b
7819   36CC 26 01 00      mov b, $1
7820   36CF B0            cmp a, b
7821   36D0 FD 80         sge ; >=
7822   36D2 E4            pop a
7823   36D3             ; END RELATIONAL
7824   36D3 FD A7         sand a, b
7825   36D5 11            mov a, b
7826   36D6 FA FD FF      lea d, [bp + -3] ; $j
7827   36D9 2A            mov b, [d]
7828   36DA             ; START RELATIONAL
7829   36DA D7            push a
7830   36DB 11            mov a, b
7831   36DC 26 08 00      mov b, $8
7832   36DF B0            cmp a, b
7833   36E0 FD 74         sle ; <= (signed)
7834   36E2 E4            pop a
7835   36E3             ; END RELATIONAL
7836   36E3 FD A7         sand a, b
7837   36E5 E4            pop a
7838   36E6             ; END LOGICAL AND
7839   36E6 C0 00 00      cmp b, 0
7840   36E9 C6 6A 37      je _if120_exit
7841   36EC             _if120_true:
7842   36EC             ;; if (quad[i+-1][j+-1] ==  		2     ) { 
7843   36EC             _if121_cond:
7844   36EC 3B BF 62      mov d, _quad_data ; $quad
7845   36EF D7            push a
7846   36F0 DA            push d
7847   36F1 FA FF FF      lea d, [bp + -1] ; $i
7848   36F4 2A            mov b, [d]
7849   36F5             ; START TERMS
7850   36F5 D7            push a
7851   36F6 11            mov a, b
7852   36F7 26 FF FF      mov b, $ffff
7853   36FA 56            add b, a
7854   36FB E4            pop a
7855   36FC             ; END TERMS
7856   36FC E7            pop d
7857   36FD FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7858   3701 DA            push d
7859   3702 FA FD FF      lea d, [bp + -3] ; $j
7860   3705 2A            mov b, [d]
7861   3706             ; START TERMS
7862   3706 D7            push a
7863   3707 11            mov a, b
7864   3708 26 FF FF      mov b, $ffff
7865   370B 56            add b, a
7866   370C E4            pop a
7867   370D             ; END TERMS
7868   370D E7            pop d
7869   370E 5A            add d, b
7870   370F E4            pop a
7871   3710 32            mov bl, [d]
7872   3711 A7 00         mov bh, 0
7873   3713             ; START RELATIONAL
7874   3713 D7            push a
7875   3714 11            mov a, b
7876   3715 26 02 00      mov b, $2
7877   3718 B0            cmp a, b
7878   3719 FD 71         seq ; ==
7879   371B E4            pop a
7880   371C             ; END RELATIONAL
7881   371C C0 00 00      cmp b, 0
7882   371F C6 67 37      je _if121_exit
7883   3722             _if121_true:
7884   3722             ;; docked = 1; 
7885   3722 3B E2 61      mov d, _docked ; $docked
7886   3725 DA            push d
7887   3726 26 01 00      mov b, $1
7888   3729 E7            pop d
7889   372A FD 3E         mov [d], bl
7890   372C             ;; sC = "DOCKED"; 
7891   372C FA FB FF      lea d, [bp + -5] ; $sC
7892   372F DA            push d
7893   3730 26 0A 6C      mov b, _s84 ; "DOCKED"
7894   3733 E7            pop d
7895   3734 FD 43         mov [d], b
7896   3736             ;; energy = energy0; 
7897   3736 3B E3 61      mov d, _energy ; $energy
7898   3739 DA            push d
7899   373A 3B E5 61      mov d, _energy0 ; $energy0
7900   373D 2A            mov b, [d]
7901   373E E7            pop d
7902   373F FD 43         mov [d], b
7903   3741             ;; torps = torps0; 
7904   3741 3B 98 62      mov d, _torps ; $torps
7905   3744 DA            push d
7906   3745 3B 99 62      mov d, _torps0 ; $torps0
7907   3748 32            mov bl, [d]
7908   3749 A7 00         mov bh, 0
7909   374B E7            pop d
7910   374C FD 3E         mov [d], bl
7911   374E             ;; puts("Shields dropped for docking purposes."); 
7912   374E 26 11 6C      mov b, _s85 ; "Shields dropped for docking purposes."
7913   3751 FD AB         swp b
7914   3753 D8            push b
7915   3754 07 4A 15      call puts
7916   3757 51 02 00      add sp, 2
7917   375A             ;; shield = 0; 
7918   375A 3B 9E 62      mov d, _shield ; $shield
7919   375D DA            push d
7920   375E 26 00 00      mov b, $0
7921   3761 E7            pop d
7922   3762 FD 43         mov [d], b
7923   3764 0A 67 37      jmp _if121_exit
7924   3767             _if121_exit:
7925   3767 0A 6A 37      jmp _if120_exit
7926   376A             _if120_exit:
7927   376A             _for119_update:
7928   376A FA FD FF      lea d, [bp + -3] ; $j
7929   376D 2A            mov b, [d]
7930   376E FD 77         inc b
7931   3770 FA FD FF      lea d, [bp + -3] ; $j
7932   3773 FD 43         mov [d], b
7933   3775 FD 7D         dec b
7934   3777 0A 83 36      jmp _for119_cond
7935   377A             _for119_exit:
7936   377A             _for118_update:
7937   377A FA FF FF      lea d, [bp + -1] ; $i
7938   377D 2A            mov b, [d]
7939   377E FD 77         inc b
7940   3780 FA FF FF      lea d, [bp + -1] ; $i
7941   3783 FD 43         mov [d], b
7942   3785 FD 7D         dec b
7943   3787 0A 43 36      jmp _for118_cond
7944   378A             _for118_exit:
7945   378A             ;; if (damage[2] < 0) { 
7946   378A             _if122_cond:
7947   378A 3B A5 62      mov d, _damage_data ; $damage
7948   378D D7            push a
7949   378E DA            push d
7950   378F 26 02 00      mov b, $2
7951   3792 E7            pop d
7952   3793 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7953   3797 E4            pop a
7954   3798 2A            mov b, [d]
7955   3799             ; START RELATIONAL
7956   3799 D7            push a
7957   379A 11            mov a, b
7958   379B 26 00 00      mov b, $0
7959   379E B0            cmp a, b
7960   379F FD 73         slt ; < (signed)
7961   37A1 E4            pop a
7962   37A2             ; END RELATIONAL
7963   37A2 C0 00 00      cmp b, 0
7964   37A5 C6 B9 37      je _if122_exit
7965   37A8             _if122_true:
7966   37A8             ;; puts("\n*** Short Range Sensors are out ***"); 
7967   37A8 26 37 6C      mov b, _s86 ; "\n*** Short Range Sensors are out ***"
7968   37AB FD AB         swp b
7969   37AD D8            push b
7970   37AE 07 4A 15      call puts
7971   37B1 51 02 00      add sp, 2
7972   37B4             ;; return; 
7973   37B4 F9            leave
7974   37B5 09            ret
7975   37B6 0A B9 37      jmp _if122_exit
7976   37B9             _if122_exit:
7977   37B9             ;; puts(srs_1); 
7978   37B9 3B D9 63      mov d, _srs_1 ; $srs_1
7979   37BC 2A            mov b, [d]
7980   37BD FD AB         swp b
7981   37BF D8            push b
7982   37C0 07 4A 15      call puts
7983   37C3 51 02 00      add sp, 2
7984   37C6             ;; for (i = 0; i < 8; i++) { 
7985   37C6             _for123_init:
7986   37C6 FA FF FF      lea d, [bp + -1] ; $i
7987   37C9 DA            push d
7988   37CA 26 00 00      mov b, $0
7989   37CD E7            pop d
7990   37CE FD 43         mov [d], b
7991   37D0             _for123_cond:
7992   37D0 FA FF FF      lea d, [bp + -1] ; $i
7993   37D3 2A            mov b, [d]
7994   37D4             ; START RELATIONAL
7995   37D4 D7            push a
7996   37D5 11            mov a, b
7997   37D6 26 08 00      mov b, $8
7998   37D9 B0            cmp a, b
7999   37DA FD 73         slt ; < (signed)
8000   37DC E4            pop a
8001   37DD             ; END RELATIONAL
8002   37DD C0 00 00      cmp b, 0
8003   37E0 C6 C7 39      je _for123_exit
8004   37E3             _for123_block:
8005   37E3             ;; for (j = 0; j < 8; j++) 
8006   37E3             _for124_init:
8007   37E3 FA FD FF      lea d, [bp + -3] ; $j
8008   37E6 DA            push d
8009   37E7 26 00 00      mov b, $0
8010   37EA E7            pop d
8011   37EB FD 43         mov [d], b
8012   37ED             _for124_cond:
8013   37ED FA FD FF      lea d, [bp + -3] ; $j
8014   37F0 2A            mov b, [d]
8015   37F1             ; START RELATIONAL
8016   37F1 D7            push a
8017   37F2 11            mov a, b
8018   37F3 26 08 00      mov b, $8
8019   37F6 B0            cmp a, b
8020   37F7 FD 73         slt ; < (signed)
8021   37F9 E4            pop a
8022   37FA             ; END RELATIONAL
8023   37FA C0 00 00      cmp b, 0
8024   37FD C6 3E 38      je _for124_exit
8025   3800             _for124_block:
8026   3800             ;; puts(tilestr[quad[i][j]]); 
8027   3800 3B DB 63      mov d, _tilestr_data ; $tilestr
8028   3803 D7            push a
8029   3804 DA            push d
8030   3805 3B BF 62      mov d, _quad_data ; $quad
8031   3808 D7            push a
8032   3809 DA            push d
8033   380A FA FF FF      lea d, [bp + -1] ; $i
8034   380D 2A            mov b, [d]
8035   380E E7            pop d
8036   380F FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8037   3813 DA            push d
8038   3814 FA FD FF      lea d, [bp + -3] ; $j
8039   3817 2A            mov b, [d]
8040   3818 E7            pop d
8041   3819 5A            add d, b
8042   381A E4            pop a
8043   381B 32            mov bl, [d]
8044   381C A7 00         mov bh, 0
8045   381E E7            pop d
8046   381F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8047   3823 E4            pop a
8048   3824 2A            mov b, [d]
8049   3825 FD AB         swp b
8050   3827 D8            push b
8051   3828 07 4A 15      call puts
8052   382B 51 02 00      add sp, 2
8053   382E             _for124_update:
8054   382E FA FD FF      lea d, [bp + -3] ; $j
8055   3831 2A            mov b, [d]
8056   3832 FD 77         inc b
8057   3834 FA FD FF      lea d, [bp + -3] ; $j
8058   3837 FD 43         mov [d], b
8059   3839 FD 7D         dec b
8060   383B 0A ED 37      jmp _for124_cond
8061   383E             _for124_exit:
8062   383E             ;; if (i == 0) 
8063   383E             _if125_cond:
8064   383E FA FF FF      lea d, [bp + -1] ; $i
8065   3841 2A            mov b, [d]
8066   3842             ; START RELATIONAL
8067   3842 D7            push a
8068   3843 11            mov a, b
8069   3844 26 00 00      mov b, $0
8070   3847 B0            cmp a, b
8071   3848 FD 71         seq ; ==
8072   384A E4            pop a
8073   384B             ; END RELATIONAL
8074   384B C0 00 00      cmp b, 0
8075   384E C6 70 38      je _if125_exit
8076   3851             _if125_true:
8077   3851             ;; printf("    Stardate            %d\n", FROM_FIXED(stardate)); 
8078   3851 3B BD 62      mov d, _stardate ; $stardate
8079   3854 2A            mov b, [d]
8080   3855 FD AB         swp b
8081   3857 D8            push b
8082   3858 07 46 1D      call FROM_FIXED
8083   385B 51 02 00      add sp, 2
8084   385E FD AB         swp b
8085   3860 D8            push b
8086   3861 26 5C 6C      mov b, _s87 ; "    Stardate            %d\n"
8087   3864 FD AB         swp b
8088   3866 D8            push b
8089   3867 07 BA 07      call printf
8090   386A 51 04 00      add sp, 4
8091   386D 0A 70 38      jmp _if125_exit
8092   3870             _if125_exit:
8093   3870             ;; if (i == 1) 
8094   3870             _if126_cond:
8095   3870 FA FF FF      lea d, [bp + -1] ; $i
8096   3873 2A            mov b, [d]
8097   3874             ; START RELATIONAL
8098   3874 D7            push a
8099   3875 11            mov a, b
8100   3876 26 01 00      mov b, $1
8101   3879 B0            cmp a, b
8102   387A FD 71         seq ; ==
8103   387C E4            pop a
8104   387D             ; END RELATIONAL
8105   387D C0 00 00      cmp b, 0
8106   3880 C6 99 38      je _if126_exit
8107   3883             _if126_true:
8108   3883             ;; printf("    Condition           %s\n", sC); 
8109   3883 FA FB FF      lea d, [bp + -5] ; $sC
8110   3886 2A            mov b, [d]
8111   3887 FD AB         swp b
8112   3889 D8            push b
8113   388A 26 78 6C      mov b, _s88 ; "    Condition           %s\n"
8114   388D FD AB         swp b
8115   388F D8            push b
8116   3890 07 BA 07      call printf
8117   3893 51 04 00      add sp, 4
8118   3896 0A 99 38      jmp _if126_exit
8119   3899             _if126_exit:
8120   3899             ;; if (i == 2) 
8121   3899             _if127_cond:
8122   3899 FA FF FF      lea d, [bp + -1] ; $i
8123   389C 2A            mov b, [d]
8124   389D             ; START RELATIONAL
8125   389D D7            push a
8126   389E 11            mov a, b
8127   389F 26 02 00      mov b, $2
8128   38A2 B0            cmp a, b
8129   38A3 FD 71         seq ; ==
8130   38A5 E4            pop a
8131   38A6             ; END RELATIONAL
8132   38A6 C0 00 00      cmp b, 0
8133   38A9 C6 C9 38      je _if127_exit
8134   38AC             _if127_true:
8135   38AC             ;; printf("    Quadrant            %d, %d\n", quad_y, quad_x); 
8136   38AC 3B 9C 62      mov d, _quad_x ; $quad_x
8137   38AF 2A            mov b, [d]
8138   38B0 FD AB         swp b
8139   38B2 D8            push b
8140   38B3 3B 9A 62      mov d, _quad_y ; $quad_y
8141   38B6 2A            mov b, [d]
8142   38B7 FD AB         swp b
8143   38B9 D8            push b
8144   38BA 26 94 6C      mov b, _s89 ; "    Quadrant            %d, %d\n"
8145   38BD FD AB         swp b
8146   38BF D8            push b
8147   38C0 07 BA 07      call printf
8148   38C3 51 06 00      add sp, 6
8149   38C6 0A C9 38      jmp _if127_exit
8150   38C9             _if127_exit:
8151   38C9             ;; if (i == 3) 
8152   38C9             _if128_cond:
8153   38C9 FA FF FF      lea d, [bp + -1] ; $i
8154   38CC 2A            mov b, [d]
8155   38CD             ; START RELATIONAL
8156   38CD D7            push a
8157   38CE 11            mov a, b
8158   38CF 26 03 00      mov b, $3
8159   38D2 B0            cmp a, b
8160   38D3 FD 71         seq ; ==
8161   38D5 E4            pop a
8162   38D6             ; END RELATIONAL
8163   38D6 C0 00 00      cmp b, 0
8164   38D9 C6 0B 39      je _if128_exit
8165   38DC             _if128_true:
8166   38DC             ;; printf("    Sector              %d, %d\n", FROM_FIXED00(ship_y), FROM_FIXED00(ship_x)); 
8167   38DC 3B BB 62      mov d, _ship_x ; $ship_x
8168   38DF 2A            mov b, [d]
8169   38E0 FD AB         swp b
8170   38E2 D8            push b
8171   38E3 07 69 1D      call FROM_FIXED00
8172   38E6 51 02 00      add sp, 2
8173   38E9 FD AB         swp b
8174   38EB D8            push b
8175   38EC 3B B9 62      mov d, _ship_y ; $ship_y
8176   38EF 2A            mov b, [d]
8177   38F0 FD AB         swp b
8178   38F2 D8            push b
8179   38F3 07 69 1D      call FROM_FIXED00
8180   38F6 51 02 00      add sp, 2
8181   38F9 FD AB         swp b
8182   38FB D8            push b
8183   38FC 26 B4 6C      mov b, _s90 ; "    Sector              %d, %d\n"
8184   38FF FD AB         swp b
8185   3901 D8            push b
8186   3902 07 BA 07      call printf
8187   3905 51 06 00      add sp, 6
8188   3908 0A 0B 39      jmp _if128_exit
8189   390B             _if128_exit:
8190   390B             ;; if (i == 4) 
8191   390B             _if129_cond:
8192   390B FA FF FF      lea d, [bp + -1] ; $i
8193   390E 2A            mov b, [d]
8194   390F             ; START RELATIONAL
8195   390F D7            push a
8196   3910 11            mov a, b
8197   3911 26 04 00      mov b, $4
8198   3914 B0            cmp a, b
8199   3915 FD 71         seq ; ==
8200   3917 E4            pop a
8201   3918             ; END RELATIONAL
8202   3918 C0 00 00      cmp b, 0
8203   391B C6 34 39      je _if129_exit
8204   391E             _if129_true:
8205   391E             ;; printf("    Photon Torpedoes    %d\n", torps); 
8206   391E 3B 98 62      mov d, _torps ; $torps
8207   3921 32            mov bl, [d]
8208   3922 A7 00         mov bh, 0
8209   3924 DD            push bl
8210   3925 26 D4 6C      mov b, _s91 ; "    Photon Torpedoes    %d\n"
8211   3928 FD AB         swp b
8212   392A D8            push b
8213   392B 07 BA 07      call printf
8214   392E 51 03 00      add sp, 3
8215   3931 0A 34 39      jmp _if129_exit
8216   3934             _if129_exit:
8217   3934             ;; if (i == 5) 
8218   3934             _if130_cond:
8219   3934 FA FF FF      lea d, [bp + -1] ; $i
8220   3937 2A            mov b, [d]
8221   3938             ; START RELATIONAL
8222   3938 D7            push a
8223   3939 11            mov a, b
8224   393A 26 05 00      mov b, $5
8225   393D B0            cmp a, b
8226   393E FD 71         seq ; ==
8227   3940 E4            pop a
8228   3941             ; END RELATIONAL
8229   3941 C0 00 00      cmp b, 0
8230   3944 C6 65 39      je _if130_exit
8231   3947             _if130_true:
8232   3947             ;; printf("    Total Energy        %d\n", energy + shield); 
8233   3947 3B E3 61      mov d, _energy ; $energy
8234   394A 2A            mov b, [d]
8235   394B             ; START TERMS
8236   394B D7            push a
8237   394C 11            mov a, b
8238   394D 3B 9E 62      mov d, _shield ; $shield
8239   3950 2A            mov b, [d]
8240   3951 56            add b, a
8241   3952 E4            pop a
8242   3953             ; END TERMS
8243   3953 FD AB         swp b
8244   3955 D8            push b
8245   3956 26 F0 6C      mov b, _s92 ; "    Total Energy        %d\n"
8246   3959 FD AB         swp b
8247   395B D8            push b
8248   395C 07 BA 07      call printf
8249   395F 51 04 00      add sp, 4
8250   3962 0A 65 39      jmp _if130_exit
8251   3965             _if130_exit:
8252   3965             ;; if (i == 6) 
8253   3965             _if131_cond:
8254   3965 FA FF FF      lea d, [bp + -1] ; $i
8255   3968 2A            mov b, [d]
8256   3969             ; START RELATIONAL
8257   3969 D7            push a
8258   396A 11            mov a, b
8259   396B 26 06 00      mov b, $6
8260   396E B0            cmp a, b
8261   396F FD 71         seq ; ==
8262   3971 E4            pop a
8263   3972             ; END RELATIONAL
8264   3972 C0 00 00      cmp b, 0
8265   3975 C6 8E 39      je _if131_exit
8266   3978             _if131_true:
8267   3978             ;; printf("    Shields             %d\n", shield); 
8268   3978 3B 9E 62      mov d, _shield ; $shield
8269   397B 2A            mov b, [d]
8270   397C FD AB         swp b
8271   397E D8            push b
8272   397F 26 0C 6D      mov b, _s93 ; "    Shields             %d\n"
8273   3982 FD AB         swp b
8274   3984 D8            push b
8275   3985 07 BA 07      call printf
8276   3988 51 04 00      add sp, 4
8277   398B 0A 8E 39      jmp _if131_exit
8278   398E             _if131_exit:
8279   398E             ;; if (i == 7) 
8280   398E             _if132_cond:
8281   398E FA FF FF      lea d, [bp + -1] ; $i
8282   3991 2A            mov b, [d]
8283   3992             ; START RELATIONAL
8284   3992 D7            push a
8285   3993 11            mov a, b
8286   3994 26 07 00      mov b, $7
8287   3997 B0            cmp a, b
8288   3998 FD 71         seq ; ==
8289   399A E4            pop a
8290   399B             ; END RELATIONAL
8291   399B C0 00 00      cmp b, 0
8292   399E C6 B7 39      je _if132_exit
8293   39A1             _if132_true:
8294   39A1             ;; printf("    Klingons Remaining  %d\n", klingons_left); 
8295   39A1 3B 97 62      mov d, _klingons_left ; $klingons_left
8296   39A4 32            mov bl, [d]
8297   39A5 A7 00         mov bh, 0
8298   39A7 DD            push bl
8299   39A8 26 28 6D      mov b, _s94 ; "    Klingons Remaining  %d\n"
8300   39AB FD AB         swp b
8301   39AD D8            push b
8302   39AE 07 BA 07      call printf
8303   39B1 51 03 00      add sp, 3
8304   39B4 0A B7 39      jmp _if132_exit
8305   39B7             _if132_exit:
8306   39B7             _for123_update:
8307   39B7 FA FF FF      lea d, [bp + -1] ; $i
8308   39BA 2A            mov b, [d]
8309   39BB FD 77         inc b
8310   39BD FA FF FF      lea d, [bp + -1] ; $i
8311   39C0 FD 43         mov [d], b
8312   39C2 FD 7D         dec b
8313   39C4 0A D0 37      jmp _for123_cond
8314   39C7             _for123_exit:
8315   39C7             ;; puts(srs_1); 
8316   39C7 3B D9 63      mov d, _srs_1 ; $srs_1
8317   39CA 2A            mov b, [d]
8318   39CB FD AB         swp b
8319   39CD D8            push b
8320   39CE 07 4A 15      call puts
8321   39D1 51 02 00      add sp, 2
8322   39D4             ;; putchar('\n'); 
8323   39D4 26 0A 00      mov b, $a
8324   39D7 DD            push bl
8325   39D8 07 14 15      call putchar
8326   39DB 51 01 00      add sp, 1
8327   39DE             ;; return; 
8328   39DE F9            leave
8329   39DF 09            ret
8330   39E0             
8331   39E0             put1bcd:
8332   39E0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8333   39E3             ;; v = v & 0x0F; 
8334   39E3 FA 05 00      lea d, [bp + 5] ; $v
8335   39E6 DA            push d
8336   39E7 FA 05 00      lea d, [bp + 5] ; $v
8337   39EA 32            mov bl, [d]
8338   39EB A7 00         mov bh, 0
8339   39ED D7            push a
8340   39EE 11            mov a, b
8341   39EF 26 0F 00      mov b, $f
8342   39F2 FD 92         and b, a ; &
8343   39F4 E4            pop a
8344   39F5 E7            pop d
8345   39F6 FD 3E         mov [d], bl
8346   39F8             ;; putchar('0' + v); 
8347   39F8 26 30 00      mov b, $30
8348   39FB             ; START TERMS
8349   39FB D7            push a
8350   39FC 11            mov a, b
8351   39FD FA 05 00      lea d, [bp + 5] ; $v
8352   3A00 32            mov bl, [d]
8353   3A01 A7 00         mov bh, 0
8354   3A03 56            add b, a
8355   3A04 E4            pop a
8356   3A05             ; END TERMS
8357   3A05 DD            push bl
8358   3A06 07 14 15      call putchar
8359   3A09 51 01 00      add sp, 1
8360   3A0C F9            leave
8361   3A0D 09            ret
8362   3A0E             
8363   3A0E             putbcd:
8364   3A0E F8 00 00      enter 0 ; (push bp; mov bp, sp)
8365   3A11             ;; put1bcd(x >> 8); 
8366   3A11 FA 05 00      lea d, [bp + 5] ; $x
8367   3A14 2A            mov b, [d]
8368   3A15             ; START SHIFT
8369   3A15 D7            push a
8370   3A16 11            mov a, b
8371   3A17 26 08 00      mov b, $8
8372   3A1A FD 39         mov c, b
8373   3A1C A1            shr a, cl
8374   3A1D 27            mov b, a
8375   3A1E E4            pop a
8376   3A1F             ; END SHIFT
8377   3A1F DD            push bl
8378   3A20 07 E0 39      call put1bcd
8379   3A23 51 01 00      add sp, 1
8380   3A26             ;; put1bcd(x >> 4); 
8381   3A26 FA 05 00      lea d, [bp + 5] ; $x
8382   3A29 2A            mov b, [d]
8383   3A2A             ; START SHIFT
8384   3A2A D7            push a
8385   3A2B 11            mov a, b
8386   3A2C 26 04 00      mov b, $4
8387   3A2F FD 39         mov c, b
8388   3A31 A1            shr a, cl
8389   3A32 27            mov b, a
8390   3A33 E4            pop a
8391   3A34             ; END SHIFT
8392   3A34 DD            push bl
8393   3A35 07 E0 39      call put1bcd
8394   3A38 51 01 00      add sp, 1
8395   3A3B             ;; put1bcd(x); 
8396   3A3B FA 05 00      lea d, [bp + 5] ; $x
8397   3A3E 2A            mov b, [d]
8398   3A3F DD            push bl
8399   3A40 07 E0 39      call put1bcd
8400   3A43 51 01 00      add sp, 1
8401   3A46 F9            leave
8402   3A47 09            ret
8403   3A48             
8404   3A48             long_range_scan:
8405   3A48 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8406   3A4B             ;; int i, j; 
8407   3A4B 52 02 00      sub sp, 2 ; i
8408   3A4E 52 02 00      sub sp, 2 ; j
8409   3A51             ;; if (inoperable(3)) 
8410   3A51             _if133_cond:
8411   3A51 26 03 00      mov b, $3
8412   3A54 DD            push bl
8413   3A55 07 BE 20      call inoperable
8414   3A58 51 01 00      add sp, 1
8415   3A5B C0 00 00      cmp b, 0
8416   3A5E C6 66 3A      je _if133_exit
8417   3A61             _if133_true:
8418   3A61             ;; return; 
8419   3A61 F9            leave
8420   3A62 09            ret
8421   3A63 0A 66 3A      jmp _if133_exit
8422   3A66             _if133_exit:
8423   3A66             ;; printf("Long Range Scan for Quadrant %d, %d\n\n", quad_y, quad_x); 
8424   3A66 3B 9C 62      mov d, _quad_x ; $quad_x
8425   3A69 2A            mov b, [d]
8426   3A6A FD AB         swp b
8427   3A6C D8            push b
8428   3A6D 3B 9A 62      mov d, _quad_y ; $quad_y
8429   3A70 2A            mov b, [d]
8430   3A71 FD AB         swp b
8431   3A73 D8            push b
8432   3A74 26 44 6D      mov b, _s95 ; "Long Range Scan for Quadrant %d, %d\n\n"
8433   3A77 FD AB         swp b
8434   3A79 D8            push b
8435   3A7A 07 BA 07      call printf
8436   3A7D 51 06 00      add sp, 6
8437   3A80             ;; for (i = quad_y - 1; i <= quad_y + 1; i++) { 
8438   3A80             _for134_init:
8439   3A80 FA FF FF      lea d, [bp + -1] ; $i
8440   3A83 DA            push d
8441   3A84 3B 9A 62      mov d, _quad_y ; $quad_y
8442   3A87 2A            mov b, [d]
8443   3A88             ; START TERMS
8444   3A88 D7            push a
8445   3A89 11            mov a, b
8446   3A8A 26 01 00      mov b, $1
8447   3A8D 60            sub a, b
8448   3A8E 27            mov b, a
8449   3A8F E4            pop a
8450   3A90             ; END TERMS
8451   3A90 E7            pop d
8452   3A91 FD 43         mov [d], b
8453   3A93             _for134_cond:
8454   3A93 FA FF FF      lea d, [bp + -1] ; $i
8455   3A96 2A            mov b, [d]
8456   3A97             ; START RELATIONAL
8457   3A97 D7            push a
8458   3A98 11            mov a, b
8459   3A99 3B 9A 62      mov d, _quad_y ; $quad_y
8460   3A9C 2A            mov b, [d]
8461   3A9D             ; START TERMS
8462   3A9D D7            push a
8463   3A9E 11            mov a, b
8464   3A9F 26 01 00      mov b, $1
8465   3AA2 56            add b, a
8466   3AA3 E4            pop a
8467   3AA4             ; END TERMS
8468   3AA4 B0            cmp a, b
8469   3AA5 FD 74         sle ; <= (signed)
8470   3AA7 E4            pop a
8471   3AA8             ; END RELATIONAL
8472   3AA8 C0 00 00      cmp b, 0
8473   3AAB C6 E5 3B      je _for134_exit
8474   3AAE             _for134_block:
8475   3AAE             ;; printf("%s:", lrs_1); 
8476   3AAE 3B 04 64      mov d, _lrs_1 ; $lrs_1
8477   3AB1 2A            mov b, [d]
8478   3AB2 FD AB         swp b
8479   3AB4 D8            push b
8480   3AB5 26 6A 6D      mov b, _s96 ; "%s:"
8481   3AB8 FD AB         swp b
8482   3ABA D8            push b
8483   3ABB 07 BA 07      call printf
8484   3ABE 51 04 00      add sp, 4
8485   3AC1             ;; for (j = quad_x - 1; j <= quad_x + 1; j++) { 
8486   3AC1             _for135_init:
8487   3AC1 FA FD FF      lea d, [bp + -3] ; $j
8488   3AC4 DA            push d
8489   3AC5 3B 9C 62      mov d, _quad_x ; $quad_x
8490   3AC8 2A            mov b, [d]
8491   3AC9             ; START TERMS
8492   3AC9 D7            push a
8493   3ACA 11            mov a, b
8494   3ACB 26 01 00      mov b, $1
8495   3ACE 60            sub a, b
8496   3ACF 27            mov b, a
8497   3AD0 E4            pop a
8498   3AD1             ; END TERMS
8499   3AD1 E7            pop d
8500   3AD2 FD 43         mov [d], b
8501   3AD4             _for135_cond:
8502   3AD4 FA FD FF      lea d, [bp + -3] ; $j
8503   3AD7 2A            mov b, [d]
8504   3AD8             ; START RELATIONAL
8505   3AD8 D7            push a
8506   3AD9 11            mov a, b
8507   3ADA 3B 9C 62      mov d, _quad_x ; $quad_x
8508   3ADD 2A            mov b, [d]
8509   3ADE             ; START TERMS
8510   3ADE D7            push a
8511   3ADF 11            mov a, b
8512   3AE0 26 01 00      mov b, $1
8513   3AE3 56            add b, a
8514   3AE4 E4            pop a
8515   3AE5             ; END TERMS
8516   3AE5 B0            cmp a, b
8517   3AE6 FD 74         sle ; <= (signed)
8518   3AE8 E4            pop a
8519   3AE9             ; END RELATIONAL
8520   3AE9 C0 00 00      cmp b, 0
8521   3AEC C6 CB 3B      je _for135_exit
8522   3AEF             _for135_block:
8523   3AEF             ;; putchar(' '); 
8524   3AEF 26 20 00      mov b, $20
8525   3AF2 DD            push bl
8526   3AF3 07 14 15      call putchar
8527   3AF6 51 01 00      add sp, 1
8528   3AF9             ;; if (i > 0 && i <= 8 && j > 0 && j <= 8) { 
8529   3AF9             _if136_cond:
8530   3AF9 FA FF FF      lea d, [bp + -1] ; $i
8531   3AFC 2A            mov b, [d]
8532   3AFD             ; START RELATIONAL
8533   3AFD D7            push a
8534   3AFE 11            mov a, b
8535   3AFF 26 00 00      mov b, $0
8536   3B02 B0            cmp a, b
8537   3B03 FD 7F         sgt ; >
8538   3B05 E4            pop a
8539   3B06             ; END RELATIONAL
8540   3B06             ; START LOGICAL AND
8541   3B06 D7            push a
8542   3B07 11            mov a, b
8543   3B08 FA FF FF      lea d, [bp + -1] ; $i
8544   3B0B 2A            mov b, [d]
8545   3B0C             ; START RELATIONAL
8546   3B0C D7            push a
8547   3B0D 11            mov a, b
8548   3B0E 26 08 00      mov b, $8
8549   3B11 B0            cmp a, b
8550   3B12 FD 74         sle ; <= (signed)
8551   3B14 E4            pop a
8552   3B15             ; END RELATIONAL
8553   3B15 FD A7         sand a, b
8554   3B17 11            mov a, b
8555   3B18 FA FD FF      lea d, [bp + -3] ; $j
8556   3B1B 2A            mov b, [d]
8557   3B1C             ; START RELATIONAL
8558   3B1C D7            push a
8559   3B1D 11            mov a, b
8560   3B1E 26 00 00      mov b, $0
8561   3B21 B0            cmp a, b
8562   3B22 FD 7F         sgt ; >
8563   3B24 E4            pop a
8564   3B25             ; END RELATIONAL
8565   3B25 FD A7         sand a, b
8566   3B27 11            mov a, b
8567   3B28 FA FD FF      lea d, [bp + -3] ; $j
8568   3B2B 2A            mov b, [d]
8569   3B2C             ; START RELATIONAL
8570   3B2C D7            push a
8571   3B2D 11            mov a, b
8572   3B2E 26 08 00      mov b, $8
8573   3B31 B0            cmp a, b
8574   3B32 FD 74         sle ; <= (signed)
8575   3B34 E4            pop a
8576   3B35             ; END RELATIONAL
8577   3B35 FD A7         sand a, b
8578   3B37 E4            pop a
8579   3B38             ; END LOGICAL AND
8580   3B38 C0 00 00      cmp b, 0
8581   3B3B C6 A3 3B      je _if136_else
8582   3B3E             _if136_true:
8583   3B3E             ;; map[i][j] = map[i][j] |   0x1000		/* Set if this sector was mapped */          ; 
8584   3B3E 3B E7 61      mov d, _map_data ; $map
8585   3B41 D7            push a
8586   3B42 DA            push d
8587   3B43 FA FF FF      lea d, [bp + -1] ; $i
8588   3B46 2A            mov b, [d]
8589   3B47 E7            pop d
8590   3B48 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8591   3B4C DA            push d
8592   3B4D FA FD FF      lea d, [bp + -3] ; $j
8593   3B50 2A            mov b, [d]
8594   3B51 E7            pop d
8595   3B52 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8596   3B56 E4            pop a
8597   3B57 DA            push d
8598   3B58 3B E7 61      mov d, _map_data ; $map
8599   3B5B D7            push a
8600   3B5C DA            push d
8601   3B5D FA FF FF      lea d, [bp + -1] ; $i
8602   3B60 2A            mov b, [d]
8603   3B61 E7            pop d
8604   3B62 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8605   3B66 DA            push d
8606   3B67 FA FD FF      lea d, [bp + -3] ; $j
8607   3B6A 2A            mov b, [d]
8608   3B6B E7            pop d
8609   3B6C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8610   3B70 E4            pop a
8611   3B71 2A            mov b, [d]
8612   3B72 D7            push a
8613   3B73 11            mov a, b
8614   3B74 26 00 10      mov b, $1000
8615   3B77 FD 70         or b, a ; |
8616   3B79 E4            pop a
8617   3B7A E7            pop d
8618   3B7B FD 43         mov [d], b
8619   3B7D             ;; putbcd(map[i][j]); 
8620   3B7D 3B E7 61      mov d, _map_data ; $map
8621   3B80 D7            push a
8622   3B81 DA            push d
8623   3B82 FA FF FF      lea d, [bp + -1] ; $i
8624   3B85 2A            mov b, [d]
8625   3B86 E7            pop d
8626   3B87 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8627   3B8B DA            push d
8628   3B8C FA FD FF      lea d, [bp + -3] ; $j
8629   3B8F 2A            mov b, [d]
8630   3B90 E7            pop d
8631   3B91 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8632   3B95 E4            pop a
8633   3B96 2A            mov b, [d]
8634   3B97 FD AB         swp b
8635   3B99 D8            push b
8636   3B9A 07 0E 3A      call putbcd
8637   3B9D 51 02 00      add sp, 2
8638   3BA0 0A AF 3B      jmp _if136_exit
8639   3BA3             _if136_else:
8640   3BA3             ;; puts("***"); 
8641   3BA3 26 6E 6D      mov b, _s97 ; "***"
8642   3BA6 FD AB         swp b
8643   3BA8 D8            push b
8644   3BA9 07 4A 15      call puts
8645   3BAC 51 02 00      add sp, 2
8646   3BAF             _if136_exit:
8647   3BAF             ;; puts(" :"); 
8648   3BAF 26 72 6D      mov b, _s98 ; " :"
8649   3BB2 FD AB         swp b
8650   3BB4 D8            push b
8651   3BB5 07 4A 15      call puts
8652   3BB8 51 02 00      add sp, 2
8653   3BBB             _for135_update:
8654   3BBB FA FD FF      lea d, [bp + -3] ; $j
8655   3BBE 2A            mov b, [d]
8656   3BBF FD 77         inc b
8657   3BC1 FA FD FF      lea d, [bp + -3] ; $j
8658   3BC4 FD 43         mov [d], b
8659   3BC6 FD 7D         dec b
8660   3BC8 0A D4 3A      jmp _for135_cond
8661   3BCB             _for135_exit:
8662   3BCB             ;; putchar('\n'); 
8663   3BCB 26 0A 00      mov b, $a
8664   3BCE DD            push bl
8665   3BCF 07 14 15      call putchar
8666   3BD2 51 01 00      add sp, 1
8667   3BD5             _for134_update:
8668   3BD5 FA FF FF      lea d, [bp + -1] ; $i
8669   3BD8 2A            mov b, [d]
8670   3BD9 FD 77         inc b
8671   3BDB FA FF FF      lea d, [bp + -1] ; $i
8672   3BDE FD 43         mov [d], b
8673   3BE0 FD 7D         dec b
8674   3BE2 0A 93 3A      jmp _for134_cond
8675   3BE5             _for134_exit:
8676   3BE5             ;; printf("%s\n", lrs_1); 
8677   3BE5 3B 04 64      mov d, _lrs_1 ; $lrs_1
8678   3BE8 2A            mov b, [d]
8679   3BE9 FD AB         swp b
8680   3BEB D8            push b
8681   3BEC 26 75 6D      mov b, _s99 ; "%s\n"
8682   3BEF FD AB         swp b
8683   3BF1 D8            push b
8684   3BF2 07 BA 07      call printf
8685   3BF5 51 04 00      add sp, 4
8686   3BF8 F9            leave
8687   3BF9 09            ret
8688   3BFA             
8689   3BFA             no_klingon:
8690   3BFA F8 00 00      enter 0 ; (push bp; mov bp, sp)
8691   3BFD             ;; if (klingons <= 0) { 
8692   3BFD             _if137_cond:
8693   3BFD 3B 95 62      mov d, _klingons ; $klingons
8694   3C00 32            mov bl, [d]
8695   3C01 A7 00         mov bh, 0
8696   3C03             ; START RELATIONAL
8697   3C03 D7            push a
8698   3C04 11            mov a, b
8699   3C05 26 00 00      mov b, $0
8700   3C08 B0            cmp a, b
8701   3C09 FD 76         sleu ; <= (unsigned)
8702   3C0B E4            pop a
8703   3C0C             ; END RELATIONAL
8704   3C0C C0 00 00      cmp b, 0
8705   3C0F C6 26 3C      je _if137_exit
8706   3C12             _if137_true:
8707   3C12             ;; puts("Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"); 
8708   3C12 26 79 6D      mov b, _s100 ; "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"
8709   3C15 FD AB         swp b
8710   3C17 D8            push b
8711   3C18 07 4A 15      call puts
8712   3C1B 51 02 00      add sp, 2
8713   3C1E             ;; return 1; 
8714   3C1E 26 01 00      mov b, $1
8715   3C21 F9            leave
8716   3C22 09            ret
8717   3C23 0A 26 3C      jmp _if137_exit
8718   3C26             _if137_exit:
8719   3C26             ;; return 0; 
8720   3C26 26 00 00      mov b, $0
8721   3C29 F9            leave
8722   3C2A 09            ret
8723   3C2B             
8724   3C2B             wipe_klingon:
8725   3C2B F8 00 00      enter 0 ; (push bp; mov bp, sp)
8726   3C2E             ;; quad[k->y+-1][k->x+-1] =  		0      ; 
8727   3C2E 3B BF 62      mov d, _quad_data ; $quad
8728   3C31 D7            push a
8729   3C32 DA            push d
8730   3C33 FA 05 00      lea d, [bp + 5] ; $k
8731   3C36 FD 2A         mov d, [d]
8732   3C38 58 00 00      add d, 0
8733   3C3B 32            mov bl, [d]
8734   3C3C A7 00         mov bh, 0
8735   3C3E             ; START TERMS
8736   3C3E D7            push a
8737   3C3F 11            mov a, b
8738   3C40 26 FF FF      mov b, $ffff
8739   3C43 56            add b, a
8740   3C44 E4            pop a
8741   3C45             ; END TERMS
8742   3C45 E7            pop d
8743   3C46 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8744   3C4A DA            push d
8745   3C4B FA 05 00      lea d, [bp + 5] ; $k
8746   3C4E FD 2A         mov d, [d]
8747   3C50 58 01 00      add d, 1
8748   3C53 32            mov bl, [d]
8749   3C54 A7 00         mov bh, 0
8750   3C56             ; START TERMS
8751   3C56 D7            push a
8752   3C57 11            mov a, b
8753   3C58 26 FF FF      mov b, $ffff
8754   3C5B 56            add b, a
8755   3C5C E4            pop a
8756   3C5D             ; END TERMS
8757   3C5D E7            pop d
8758   3C5E 5A            add d, b
8759   3C5F E4            pop a
8760   3C60 DA            push d
8761   3C61 26 00 00      mov b, $0
8762   3C64 E7            pop d
8763   3C65 FD 3E         mov [d], bl
8764   3C67 F9            leave
8765   3C68 09            ret
8766   3C69             
8767   3C69             phaser_control:
8768   3C69 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8769   3C6C             ;; int i; 
8770   3C6C 52 02 00      sub sp, 2 ; i
8771   3C6F             ;; long int       phaser_energy; 
8772   3C6F 52 04 00      sub sp, 4 ; phaser_energy
8773   3C72             ;; long unsigned int        h1; 
8774   3C72 52 04 00      sub sp, 4 ; h1
8775   3C75             ;; int h; 
8776   3C75 52 02 00      sub sp, 2 ; h
8777   3C78             ;; struct klingon *k; 
8778   3C78 52 02 00      sub sp, 2 ; k
8779   3C7B             ;; k = &kdata; 
8780   3C7B FA F3 FF      lea d, [bp + -13] ; $k
8781   3C7E DA            push d
8782   3C7F 3B 89 62      mov d, _kdata_data ; $kdata
8783   3C82 2D            mov b, d
8784   3C83 E7            pop d
8785   3C84 FD 43         mov [d], b
8786   3C86             ;; if (inoperable(4)) 
8787   3C86             _if138_cond:
8788   3C86 26 04 00      mov b, $4
8789   3C89 DD            push bl
8790   3C8A 07 BE 20      call inoperable
8791   3C8D 51 01 00      add sp, 1
8792   3C90 C0 00 00      cmp b, 0
8793   3C93 C6 9B 3C      je _if138_exit
8794   3C96             _if138_true:
8795   3C96             ;; return; 
8796   3C96 F9            leave
8797   3C97 09            ret
8798   3C98 0A 9B 3C      jmp _if138_exit
8799   3C9B             _if138_exit:
8800   3C9B             ;; if (no_klingon()) 
8801   3C9B             _if139_cond:
8802   3C9B 07 FA 3B      call no_klingon
8803   3C9E C0 00 00      cmp b, 0
8804   3CA1 C6 A9 3C      je _if139_exit
8805   3CA4             _if139_true:
8806   3CA4             ;; return; 
8807   3CA4 F9            leave
8808   3CA5 09            ret
8809   3CA6 0A A9 3C      jmp _if139_exit
8810   3CA9             _if139_exit:
8811   3CA9             ;; if (damage[8] < 0) 
8812   3CA9             _if140_cond:
8813   3CA9 3B A5 62      mov d, _damage_data ; $damage
8814   3CAC D7            push a
8815   3CAD DA            push d
8816   3CAE 26 08 00      mov b, $8
8817   3CB1 E7            pop d
8818   3CB2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8819   3CB6 E4            pop a
8820   3CB7 2A            mov b, [d]
8821   3CB8             ; START RELATIONAL
8822   3CB8 D7            push a
8823   3CB9 11            mov a, b
8824   3CBA 26 00 00      mov b, $0
8825   3CBD B0            cmp a, b
8826   3CBE FD 73         slt ; < (signed)
8827   3CC0 E4            pop a
8828   3CC1             ; END RELATIONAL
8829   3CC1 C0 00 00      cmp b, 0
8830   3CC4 C6 D6 3C      je _if140_exit
8831   3CC7             _if140_true:
8832   3CC7             ;; puts("Computer failure hampers accuracy."); 
8833   3CC7 26 CA 6D      mov b, _s101 ; "Computer failure hampers accuracy."
8834   3CCA FD AB         swp b
8835   3CCC D8            push b
8836   3CCD 07 4A 15      call puts
8837   3CD0 51 02 00      add sp, 2
8838   3CD3 0A D6 3C      jmp _if140_exit
8839   3CD6             _if140_exit:
8840   3CD6             ;; printf("Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", energy); 
8841   3CD6 3B E3 61      mov d, _energy ; $energy
8842   3CD9 2A            mov b, [d]
8843   3CDA FD AB         swp b
8844   3CDC D8            push b
8845   3CDD 26 ED 6D      mov b, _s102 ; "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: "
8846   3CE0 FD AB         swp b
8847   3CE2 D8            push b
8848   3CE3 07 BA 07      call printf
8849   3CE6 51 04 00      add sp, 4
8850   3CE9             ;; phaser_energy = input_int(); 
8851   3CE9 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8852   3CEC DA            push d
8853   3CED 07 22 20      call input_int
8854   3CF0 E7            pop d
8855   3CF1 FD 43         mov [d], b
8856   3CF3 28            mov b, c
8857   3CF4 FD 44 02 00   mov [d + 2], b
8858   3CF8             ;; if (phaser_energy <= 0) 
8859   3CF8             _if141_cond:
8860   3CF8 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8861   3CFB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8862   3CFE FD 39         mov c, b ; And place it into C
8863   3D00 2A            mov b, [d] ; Lower Word in B
8864   3D01             ; START RELATIONAL
8865   3D01 D7            push a
8866   3D02 FD D8         push g
8867   3D04 11            mov a, b
8868   3D05 FD 7A         mov g, c
8869   3D07 26 00 00      mov b, $0
8870   3D0A 38 00 00      mov c, 0
8871   3D0D FD 74         sle
8872   3D0F FD F1         pop g
8873   3D11 E4            pop a
8874   3D12             ; END RELATIONAL
8875   3D12 C0 00 00      cmp b, 0
8876   3D15 C6 1D 3D      je _if141_exit
8877   3D18             _if141_true:
8878   3D18             ;; return; 
8879   3D18 F9            leave
8880   3D19 09            ret
8881   3D1A 0A 1D 3D      jmp _if141_exit
8882   3D1D             _if141_exit:
8883   3D1D             ;; if (energy - phaser_energy < 0) { 
8884   3D1D             _if142_cond:
8885   3D1D 3B E3 61      mov d, _energy ; $energy
8886   3D20 2A            mov b, [d]
8887   3D21             ; START TERMS
8888   3D21 D7            push a
8889   3D22 11            mov a, b
8890   3D23 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8891   3D26 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8892   3D29 FD 39         mov c, b ; And place it into C
8893   3D2B 2A            mov b, [d] ; Lower Word in B
8894   3D2C 60            sub a, b
8895   3D2D 27            mov b, a
8896   3D2E E4            pop a
8897   3D2F             ; END TERMS
8898   3D2F             ; START RELATIONAL
8899   3D2F D7            push a
8900   3D30 FD D8         push g
8901   3D32 11            mov a, b
8902   3D33 FD 7A         mov g, c
8903   3D35 26 00 00      mov b, $0
8904   3D38 38 00 00      mov c, 0
8905   3D3B FD AF 00 00   cmp32 ga, cb
8905   3D3F 00 00 00 00 
8905   3D43 00 00 00 00 
8905   3D47 00 00 00 00 
8905   3D4B 00 00 00 00 
8905   3D4F 00 00 00 00 
8905   3D53 00 00 00 00 
8905   3D57 00 00 00 00 
8905   3D5B 00 00 00 00 
8905   3D5F 00 00 00 00 
8905   3D63 00 00 00 00 
8905   3D67 00 00 00 00 
8905   3D6B 00 00 00 00 
8905   3D6F 00 00 00 00 
8905   3D73 00 00 00 00 
8905   3D77 00 00 00 00 
8905   3D7B 00 00 00 00 
8905   3D7F 00 00 00 00 
8905   3D83 00 00 00 00 
8905   3D87 00 00 00 00 
8905   3D8B 00 00 00 00 
8905   3D8F 00 00 00 00 
8905   3D93 00 00 00 00 
8905   3D97 00 00 00 00 
8905   3D9B 00 00 00 00 
8905   3D9F 00 00 00 00 
8905   3DA3 00 00 00 00 
8905   3DA7 00 00 00 00 
8905   3DAB 00 00 00 00 
8905   3DAF 00 00 00 00 
8905   3DB3 00 00 00 00 
8905   3DB7 00 00 00 00 
8905   3DBB 00 00 00 00 
8905   3DBF 00 00 00 00 
8905   3DC3 00 00 00 00 
8905   3DC7 00 00 00 00 
8905   3DCB 00 00 00 00 
8905   3DCF 00 00 00 00 
8905   3DD3 00 00 00 00 
8905   3DD7 00 00 00 00 
8905   3DDB 00 00 00 00 
8905   3DDF 00 00 00 00 
8905   3DE3 00 00 00 00 
8905   3DE7 00 00 00 00 
8905   3DEB 00 00 00 00 
8905   3DEF 00 00 00 00 
8905   3DF3 00 00 00 00 
8905   3DF7 00 00 00 00 
8905   3DFB 00 00 00 00 
8905   3DFF 00 00 00 00 
8905   3E03 00 00 00 00 
8905   3E07 00 00 00 00 
8905   3E0B 00 00 00 00 
8905   3E0F 00 00 00 00 
8905   3E13 00 00 00 00 
8905   3E17 00 00 00 00 
8905   3E1B 00 00 00 00 
8905   3E1F 00 00 00 00 
8905   3E23 00 00 00 00 
8905   3E27 00 00 00 00 
8905   3E2B 00 00 00 00 
8905   3E2F 00 00 00 00 
8905   3E33 00 00 00 00 
8905   3E37 00 00 00 00 
8905   3E3B 00 
8906   3E3C FD 73         slt ; <
8907   3E3E FD F1         pop g
8908   3E40 E4            pop a
8909   3E41             ; END RELATIONAL
8910   3E41 C0 00 00      cmp b, 0
8911   3E44 C6 58 3E      je _if142_exit
8912   3E47             _if142_true:
8913   3E47             ;; puts("Not enough energy available.\n"); 
8914   3E47 26 40 6E      mov b, _s103 ; "Not enough energy available.\n"
8915   3E4A FD AB         swp b
8916   3E4C D8            push b
8917   3E4D 07 4A 15      call puts
8918   3E50 51 02 00      add sp, 2
8919   3E53             ;; return; 
8920   3E53 F9            leave
8921   3E54 09            ret
8922   3E55 0A 58 3E      jmp _if142_exit
8923   3E58             _if142_exit:
8924   3E58             ;; energy = energy -  phaser_energy; 
8925   3E58 3B E3 61      mov d, _energy ; $energy
8926   3E5B DA            push d
8927   3E5C 3B E3 61      mov d, _energy ; $energy
8928   3E5F 2A            mov b, [d]
8929   3E60             ; START TERMS
8930   3E60 D7            push a
8931   3E61 11            mov a, b
8932   3E62 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8933   3E65 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8934   3E68 FD 39         mov c, b ; And place it into C
8935   3E6A 2A            mov b, [d] ; Lower Word in B
8936   3E6B 60            sub a, b
8937   3E6C 27            mov b, a
8938   3E6D E4            pop a
8939   3E6E             ; END TERMS
8940   3E6E E7            pop d
8941   3E6F FD 43         mov [d], b
8942   3E71             ;; if (damage[8] < 0) 
8943   3E71             _if143_cond:
8944   3E71 3B A5 62      mov d, _damage_data ; $damage
8945   3E74 D7            push a
8946   3E75 DA            push d
8947   3E76 26 08 00      mov b, $8
8948   3E79 E7            pop d
8949   3E7A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8950   3E7E E4            pop a
8951   3E7F 2A            mov b, [d]
8952   3E80             ; START RELATIONAL
8953   3E80 D7            push a
8954   3E81 11            mov a, b
8955   3E82 26 00 00      mov b, $0
8956   3E85 B0            cmp a, b
8957   3E86 FD 73         slt ; < (signed)
8958   3E88 E4            pop a
8959   3E89             ; END RELATIONAL
8960   3E89 C0 00 00      cmp b, 0
8961   3E8C C6 B9 3E      je _if143_else
8962   3E8F             _if143_true:
8963   3E8F             ;; phaser_energy =phaser_energy * get_rand(100); 
8964   3E8F FA FB FF      lea d, [bp + -5] ; $phaser_energy
8965   3E92 DA            push d
8966   3E93 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8967   3E96 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8968   3E99 FD 39         mov c, b ; And place it into C
8969   3E9B 2A            mov b, [d] ; Lower Word in B
8970   3E9C             ; START FACTORS
8971   3E9C D7            push a
8972   3E9D 11            mov a, b
8973   3E9E 26 64 00      mov b, $64
8974   3EA1 FD AB         swp b
8975   3EA3 D8            push b
8976   3EA4 07 7A 1D      call get_rand
8977   3EA7 51 02 00      add sp, 2
8978   3EAA AC            mul a, b ; *
8979   3EAB 11            mov a, b
8980   3EAC 27            mov b, a
8981   3EAD E4            pop a
8982   3EAE             ; END FACTORS
8983   3EAE E7            pop d
8984   3EAF FD 43         mov [d], b
8985   3EB1 28            mov b, c
8986   3EB2 FD 44 02 00   mov [d + 2], b
8987   3EB6 0A D7 3E      jmp _if143_exit
8988   3EB9             _if143_else:
8989   3EB9             ;; phaser_energy = phaser_energy* 100; 
8990   3EB9 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8991   3EBC DA            push d
8992   3EBD FA FB FF      lea d, [bp + -5] ; $phaser_energy
8993   3EC0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8994   3EC3 FD 39         mov c, b ; And place it into C
8995   3EC5 2A            mov b, [d] ; Lower Word in B
8996   3EC6             ; START FACTORS
8997   3EC6 D7            push a
8998   3EC7 11            mov a, b
8999   3EC8 26 64 00      mov b, $64
9000   3ECB AC            mul a, b ; *
9001   3ECC 11            mov a, b
9002   3ECD 27            mov b, a
9003   3ECE E4            pop a
9004   3ECF             ; END FACTORS
9005   3ECF E7            pop d
9006   3ED0 FD 43         mov [d], b
9007   3ED2 28            mov b, c
9008   3ED3 FD 44 02 00   mov [d + 2], b
9009   3ED7             _if143_exit:
9010   3ED7             ;; h1 = phaser_energy / klingons; 
9011   3ED7 FA F7 FF      lea d, [bp + -9] ; $h1
9012   3EDA DA            push d
9013   3EDB FA FB FF      lea d, [bp + -5] ; $phaser_energy
9014   3EDE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9015   3EE1 FD 39         mov c, b ; And place it into C
9016   3EE3 2A            mov b, [d] ; Lower Word in B
9017   3EE4             ; START FACTORS
9018   3EE4 D7            push a
9019   3EE5 11            mov a, b
9020   3EE6 3B 95 62      mov d, _klingons ; $klingons
9021   3EE9 32            mov bl, [d]
9022   3EEA A7 00         mov bh, 0
9023   3EEC AE            div a, b
9024   3EED 27            mov b, a
9025   3EEE E4            pop a
9026   3EEF             ; END FACTORS
9027   3EEF E7            pop d
9028   3EF0 FD 43         mov [d], b
9029   3EF2 28            mov b, c
9030   3EF3 FD 44 02 00   mov [d + 2], b
9031   3EF7             ;; for (i = 0; i <= 2; i++) { 
9032   3EF7             _for144_init:
9033   3EF7 FA FF FF      lea d, [bp + -1] ; $i
9034   3EFA DA            push d
9035   3EFB 26 00 00      mov b, $0
9036   3EFE E7            pop d
9037   3EFF FD 43         mov [d], b
9038   3F01             _for144_cond:
9039   3F01 FA FF FF      lea d, [bp + -1] ; $i
9040   3F04 2A            mov b, [d]
9041   3F05             ; START RELATIONAL
9042   3F05 D7            push a
9043   3F06 11            mov a, b
9044   3F07 26 02 00      mov b, $2
9045   3F0A B0            cmp a, b
9046   3F0B FD 74         sle ; <= (signed)
9047   3F0D E4            pop a
9048   3F0E             ; END RELATIONAL
9049   3F0E C0 00 00      cmp b, 0
9050   3F11 C6 30 41      je _for144_exit
9051   3F14             _for144_block:
9052   3F14             ;; if (k->energy > 0) { 
9053   3F14             _if145_cond:
9054   3F14 FA F3 FF      lea d, [bp + -13] ; $k
9055   3F17 FD 2A         mov d, [d]
9056   3F19 58 02 00      add d, 2
9057   3F1C 2A            mov b, [d]
9058   3F1D             ; START RELATIONAL
9059   3F1D D7            push a
9060   3F1E 11            mov a, b
9061   3F1F 26 00 00      mov b, $0
9062   3F22 B0            cmp a, b
9063   3F23 FD 7F         sgt ; >
9064   3F25 E4            pop a
9065   3F26             ; END RELATIONAL
9066   3F26 C0 00 00      cmp b, 0
9067   3F29 C6 0F 41      je _if145_exit
9068   3F2C             _if145_true:
9069   3F2C             ;; h1 = h1 * (get_rand(100) + 200); 
9070   3F2C FA F7 FF      lea d, [bp + -9] ; $h1
9071   3F2F DA            push d
9072   3F30 FA F7 FF      lea d, [bp + -9] ; $h1
9073   3F33 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9074   3F36 FD 39         mov c, b ; And place it into C
9075   3F38 2A            mov b, [d] ; Lower Word in B
9076   3F39             ; START FACTORS
9077   3F39 D7            push a
9078   3F3A 11            mov a, b
9079   3F3B 26 64 00      mov b, $64
9080   3F3E FD AB         swp b
9081   3F40 D8            push b
9082   3F41 07 7A 1D      call get_rand
9083   3F44 51 02 00      add sp, 2
9084   3F47             ; START TERMS
9085   3F47 D7            push a
9086   3F48 11            mov a, b
9087   3F49 26 C8 00      mov b, $c8
9088   3F4C 56            add b, a
9089   3F4D E4            pop a
9090   3F4E             ; END TERMS
9091   3F4E AC            mul a, b ; *
9092   3F4F 11            mov a, b
9093   3F50 27            mov b, a
9094   3F51 E4            pop a
9095   3F52             ; END FACTORS
9096   3F52 E7            pop d
9097   3F53 FD 43         mov [d], b
9098   3F55 28            mov b, c
9099   3F56 FD 44 02 00   mov [d + 2], b
9100   3F5A             ;; h1 =h1/ distance_to(k); 
9101   3F5A FA F7 FF      lea d, [bp + -9] ; $h1
9102   3F5D DA            push d
9103   3F5E FA F7 FF      lea d, [bp + -9] ; $h1
9104   3F61 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9105   3F64 FD 39         mov c, b ; And place it into C
9106   3F66 2A            mov b, [d] ; Lower Word in B
9107   3F67             ; START FACTORS
9108   3F67 D7            push a
9109   3F68 11            mov a, b
9110   3F69 FA F3 FF      lea d, [bp + -13] ; $k
9111   3F6C 2A            mov b, [d]
9112   3F6D FD AB         swp b
9113   3F6F D8            push b
9114   3F70 07 0C 61      call distance_to
9115   3F73 51 02 00      add sp, 2
9116   3F76 AE            div a, b
9117   3F77 27            mov b, a
9118   3F78 E4            pop a
9119   3F79             ; END FACTORS
9120   3F79 E7            pop d
9121   3F7A FD 43         mov [d], b
9122   3F7C 28            mov b, c
9123   3F7D FD 44 02 00   mov [d + 2], b
9124   3F81             ;; if (h1 <= 15 * k->energy) {	/* was 0.15 */ 
9125   3F81             _if146_cond:
9126   3F81 FA F7 FF      lea d, [bp + -9] ; $h1
9127   3F84 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9128   3F87 FD 39         mov c, b ; And place it into C
9129   3F89 2A            mov b, [d] ; Lower Word in B
9130   3F8A             ; START RELATIONAL
9131   3F8A D7            push a
9132   3F8B FD D8         push g
9133   3F8D 11            mov a, b
9134   3F8E FD 7A         mov g, c
9135   3F90 26 0F 00      mov b, $f
9136   3F93             ; START FACTORS
9137   3F93 D7            push a
9138   3F94 11            mov a, b
9139   3F95 FA F3 FF      lea d, [bp + -13] ; $k
9140   3F98 FD 2A         mov d, [d]
9141   3F9A 58 02 00      add d, 2
9142   3F9D 2A            mov b, [d]
9143   3F9E AC            mul a, b ; *
9144   3F9F 11            mov a, b
9145   3FA0 27            mov b, a
9146   3FA1 E4            pop a
9147   3FA2             ; END FACTORS
9148   3FA2 38 00 00      mov c, 0
9149   3FA5 FD 76         sleu
9150   3FA7 FD F1         pop g
9151   3FA9 E4            pop a
9152   3FAA             ; END RELATIONAL
9153   3FAA C0 00 00      cmp b, 0
9154   3FAD C6 D7 3F      je _if146_else
9155   3FB0             _if146_true:
9156   3FB0             ;; printf("Sensors show no damage to enemy at %d, %d\n\n", k->y, k->x); 
9157   3FB0 FA F3 FF      lea d, [bp + -13] ; $k
9158   3FB3 FD 2A         mov d, [d]
9159   3FB5 58 01 00      add d, 1
9160   3FB8 32            mov bl, [d]
9161   3FB9 A7 00         mov bh, 0
9162   3FBB DD            push bl
9163   3FBC FA F3 FF      lea d, [bp + -13] ; $k
9164   3FBF FD 2A         mov d, [d]
9165   3FC1 58 00 00      add d, 0
9166   3FC4 32            mov bl, [d]
9167   3FC5 A7 00         mov bh, 0
9168   3FC7 DD            push bl
9169   3FC8 26 5E 6E      mov b, _s104 ; "Sensors show no damage to enemy at %d, %d\n\n"
9170   3FCB FD AB         swp b
9171   3FCD D8            push b
9172   3FCE 07 BA 07      call printf
9173   3FD1 51 04 00      add sp, 4
9174   3FD4 0A 0C 41      jmp _if146_exit
9175   3FD7             _if146_else:
9176   3FD7             ;; h = FROM_FIXED00(h1); 
9177   3FD7 FA F5 FF      lea d, [bp + -11] ; $h
9178   3FDA DA            push d
9179   3FDB FA F7 FF      lea d, [bp + -9] ; $h1
9180   3FDE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9181   3FE1 FD 39         mov c, b ; And place it into C
9182   3FE3 2A            mov b, [d] ; Lower Word in B
9183   3FE4 FD AB         swp b
9184   3FE6 D8            push b
9185   3FE7 07 69 1D      call FROM_FIXED00
9186   3FEA 51 02 00      add sp, 2
9187   3FED E7            pop d
9188   3FEE FD 43         mov [d], b
9189   3FF0             ;; k->energy = k->energy - h; 
9190   3FF0 FA F3 FF      lea d, [bp + -13] ; $k
9191   3FF3 FD 2A         mov d, [d]
9192   3FF5 58 02 00      add d, 2
9193   3FF8 DA            push d
9194   3FF9 FA F3 FF      lea d, [bp + -13] ; $k
9195   3FFC FD 2A         mov d, [d]
9196   3FFE 58 02 00      add d, 2
9197   4001 2A            mov b, [d]
9198   4002             ; START TERMS
9199   4002 D7            push a
9200   4003 11            mov a, b
9201   4004 FA F5 FF      lea d, [bp + -11] ; $h
9202   4007 2A            mov b, [d]
9203   4008 60            sub a, b
9204   4009 27            mov b, a
9205   400A E4            pop a
9206   400B             ; END TERMS
9207   400B E7            pop d
9208   400C FD 43         mov [d], b
9209   400E             ;; printf("%d unit hit on Klingon at sector %d, %d\n", 
9210   400E FA F3 FF      lea d, [bp + -13] ; $k
9211   4011 FD 2A         mov d, [d]
9212   4013 58 01 00      add d, 1
9213   4016 32            mov bl, [d]
9214   4017 A7 00         mov bh, 0
9215   4019 DD            push bl
9216   401A FA F3 FF      lea d, [bp + -13] ; $k
9217   401D FD 2A         mov d, [d]
9218   401F 58 00 00      add d, 0
9219   4022 32            mov bl, [d]
9220   4023 A7 00         mov bh, 0
9221   4025 DD            push bl
9222   4026 FA F5 FF      lea d, [bp + -11] ; $h
9223   4029 2A            mov b, [d]
9224   402A FD AB         swp b
9225   402C D8            push b
9226   402D 26 8A 6E      mov b, _s105 ; "%d unit hit on Klingon at sector %d, %d\n"
9227   4030 FD AB         swp b
9228   4032 D8            push b
9229   4033 07 BA 07      call printf
9230   4036 51 06 00      add sp, 6
9231   4039             ;; if (k->energy <= 0) { 
9232   4039             _if147_cond:
9233   4039 FA F3 FF      lea d, [bp + -13] ; $k
9234   403C FD 2A         mov d, [d]
9235   403E 58 02 00      add d, 2
9236   4041 2A            mov b, [d]
9237   4042             ; START RELATIONAL
9238   4042 D7            push a
9239   4043 11            mov a, b
9240   4044 26 00 00      mov b, $0
9241   4047 B0            cmp a, b
9242   4048 FD 74         sle ; <= (signed)
9243   404A E4            pop a
9244   404B             ; END RELATIONAL
9245   404B C0 00 00      cmp b, 0
9246   404E C6 F4 40      je _if147_else
9247   4051             _if147_true:
9248   4051             ;; puts("*** Klingon Destroyed ***\n"); 
9249   4051 26 B3 6E      mov b, _s106 ; "*** Klingon Destroyed ***\n"
9250   4054 FD AB         swp b
9251   4056 D8            push b
9252   4057 07 4A 15      call puts
9253   405A 51 02 00      add sp, 2
9254   405D             ;; klingons--; 
9255   405D 3B 95 62      mov d, _klingons ; $klingons
9256   4060 32            mov bl, [d]
9257   4061 A7 00         mov bh, 0
9258   4063 FD 7D         dec b
9259   4065 3B 95 62      mov d, _klingons ; $klingons
9260   4068 FD 43         mov [d], b
9261   406A FD 77         inc b
9262   406C             ;; klingons_left--; 
9263   406C 3B 97 62      mov d, _klingons_left ; $klingons_left
9264   406F 32            mov bl, [d]
9265   4070 A7 00         mov bh, 0
9266   4072 FD 7D         dec b
9267   4074 3B 97 62      mov d, _klingons_left ; $klingons_left
9268   4077 FD 43         mov [d], b
9269   4079 FD 77         inc b
9270   407B             ;; wipe_klingon(k); 
9271   407B FA F3 FF      lea d, [bp + -13] ; $k
9272   407E 2A            mov b, [d]
9273   407F FD AB         swp b
9274   4081 D8            push b
9275   4082 07 2B 3C      call wipe_klingon
9276   4085 51 02 00      add sp, 2
9277   4088             ;; k->energy = 0; 
9278   4088 FA F3 FF      lea d, [bp + -13] ; $k
9279   408B FD 2A         mov d, [d]
9280   408D 58 02 00      add d, 2
9281   4090 DA            push d
9282   4091 26 00 00      mov b, $0
9283   4094 E7            pop d
9284   4095 FD 43         mov [d], b
9285   4097             ;; map[quad_y][quad_x] = map[quad_y][quad_x] - 0x100; 
9286   4097 3B E7 61      mov d, _map_data ; $map
9287   409A D7            push a
9288   409B DA            push d
9289   409C 3B 9A 62      mov d, _quad_y ; $quad_y
9290   409F 2A            mov b, [d]
9291   40A0 E7            pop d
9292   40A1 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9293   40A5 DA            push d
9294   40A6 3B 9C 62      mov d, _quad_x ; $quad_x
9295   40A9 2A            mov b, [d]
9296   40AA E7            pop d
9297   40AB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9298   40AF E4            pop a
9299   40B0 DA            push d
9300   40B1 3B E7 61      mov d, _map_data ; $map
9301   40B4 D7            push a
9302   40B5 DA            push d
9303   40B6 3B 9A 62      mov d, _quad_y ; $quad_y
9304   40B9 2A            mov b, [d]
9305   40BA E7            pop d
9306   40BB FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9307   40BF DA            push d
9308   40C0 3B 9C 62      mov d, _quad_x ; $quad_x
9309   40C3 2A            mov b, [d]
9310   40C4 E7            pop d
9311   40C5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9312   40C9 E4            pop a
9313   40CA 2A            mov b, [d]
9314   40CB             ; START TERMS
9315   40CB D7            push a
9316   40CC 11            mov a, b
9317   40CD 26 00 01      mov b, $100
9318   40D0 60            sub a, b
9319   40D1 27            mov b, a
9320   40D2 E4            pop a
9321   40D3             ; END TERMS
9322   40D3 E7            pop d
9323   40D4 FD 43         mov [d], b
9324   40D6             ;; if (klingons_left <= 0) 
9325   40D6             _if148_cond:
9326   40D6 3B 97 62      mov d, _klingons_left ; $klingons_left
9327   40D9 32            mov bl, [d]
9328   40DA A7 00         mov bh, 0
9329   40DC             ; START RELATIONAL
9330   40DC D7            push a
9331   40DD 11            mov a, b
9332   40DE 26 00 00      mov b, $0
9333   40E1 B0            cmp a, b
9334   40E2 FD 76         sleu ; <= (unsigned)
9335   40E4 E4            pop a
9336   40E5             ; END RELATIONAL
9337   40E5 C0 00 00      cmp b, 0
9338   40E8 C6 F1 40      je _if148_exit
9339   40EB             _if148_true:
9340   40EB             ;; won_game(); 
9341   40EB 07 44 56      call won_game
9342   40EE 0A F1 40      jmp _if148_exit
9343   40F1             _if148_exit:
9344   40F1 0A 0C 41      jmp _if147_exit
9345   40F4             _if147_else:
9346   40F4             ;; printf("   (Sensors show %d units remaining.)\n\n", k->energy); 
9347   40F4 FA F3 FF      lea d, [bp + -13] ; $k
9348   40F7 FD 2A         mov d, [d]
9349   40F9 58 02 00      add d, 2
9350   40FC 2A            mov b, [d]
9351   40FD FD AB         swp b
9352   40FF D8            push b
9353   4100 26 CE 6E      mov b, _s107 ; "   (Sensors show %d units remaining.)\n\n"
9354   4103 FD AB         swp b
9355   4105 D8            push b
9356   4106 07 BA 07      call printf
9357   4109 51 04 00      add sp, 4
9358   410C             _if147_exit:
9359   410C             _if146_exit:
9360   410C 0A 0F 41      jmp _if145_exit
9361   410F             _if145_exit:
9362   410F             ;; k++; 
9363   410F FA F3 FF      lea d, [bp + -13] ; $k
9364   4112 2A            mov b, [d]
9365   4113 FD 77         inc b
9366   4115 FD 77         inc b
9367   4117 FA F3 FF      lea d, [bp + -13] ; $k
9368   411A FD 43         mov [d], b
9369   411C FD 7D         dec b
9370   411E FD 7D         dec b
9371   4120             _for144_update:
9372   4120 FA FF FF      lea d, [bp + -1] ; $i
9373   4123 2A            mov b, [d]
9374   4124 FD 77         inc b
9375   4126 FA FF FF      lea d, [bp + -1] ; $i
9376   4129 FD 43         mov [d], b
9377   412B FD 7D         dec b
9378   412D 0A 01 3F      jmp _for144_cond
9379   4130             _for144_exit:
9380   4130             ;; klingons_shoot(); 
9381   4130 07 FE 57      call klingons_shoot
9382   4133 F9            leave
9383   4134 09            ret
9384   4135             
9385   4135             photon_torpedoes:
9386   4135 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9387   4138             ;; int x3, y3; 
9388   4138 52 02 00      sub sp, 2 ; x3
9389   413B 52 02 00      sub sp, 2 ; y3
9390   413E             ;; int       c1; 
9391   413E 52 02 00      sub sp, 2 ; c1
9392   4141             ;; int c2, c3, c4; 
9393   4141 52 02 00      sub sp, 2 ; c2
9394   4144 52 02 00      sub sp, 2 ; c3
9395   4147 52 02 00      sub sp, 2 ; c4
9396   414A             ;; int       x, y, x1, x2; 
9397   414A 52 02 00      sub sp, 2 ; x
9398   414D 52 02 00      sub sp, 2 ; y
9399   4150 52 02 00      sub sp, 2 ; x1
9400   4153 52 02 00      sub sp, 2 ; x2
9401   4156             ;; if (torps <= 0) { 
9402   4156             _if149_cond:
9403   4156 3B 98 62      mov d, _torps ; $torps
9404   4159 32            mov bl, [d]
9405   415A A7 00         mov bh, 0
9406   415C             ; START RELATIONAL
9407   415C D7            push a
9408   415D 11            mov a, b
9409   415E 26 00 00      mov b, $0
9410   4161 B0            cmp a, b
9411   4162 FD 76         sleu ; <= (unsigned)
9412   4164 E4            pop a
9413   4165             ; END RELATIONAL
9414   4165 C0 00 00      cmp b, 0
9415   4168 C6 7C 41      je _if149_exit
9416   416B             _if149_true:
9417   416B             ;; puts("All photon torpedoes expended"); 
9418   416B 26 F6 6E      mov b, _s108 ; "All photon torpedoes expended"
9419   416E FD AB         swp b
9420   4170 D8            push b
9421   4171 07 4A 15      call puts
9422   4174 51 02 00      add sp, 2
9423   4177             ;; return; 
9424   4177 F9            leave
9425   4178 09            ret
9426   4179 0A 7C 41      jmp _if149_exit
9427   417C             _if149_exit:
9428   417C             ;; if (inoperable(5)) 
9429   417C             _if150_cond:
9430   417C 26 05 00      mov b, $5
9431   417F DD            push bl
9432   4180 07 BE 20      call inoperable
9433   4183 51 01 00      add sp, 1
9434   4186 C0 00 00      cmp b, 0
9435   4189 C6 91 41      je _if150_exit
9436   418C             _if150_true:
9437   418C             ;; return; 
9438   418C F9            leave
9439   418D 09            ret
9440   418E 0A 91 41      jmp _if150_exit
9441   4191             _if150_exit:
9442   4191             ;; puts("Course (0-9): "); 
9443   4191 26 32 69      mov b, _s70 ; "Course (0-9): "
9444   4194 FD AB         swp b
9445   4196 D8            push b
9446   4197 07 4A 15      call puts
9447   419A 51 02 00      add sp, 2
9448   419D             ;; c1 = input_f00(); 
9449   419D FA FB FF      lea d, [bp + -5] ; $c1
9450   41A0 DA            push d
9451   41A1 07 A2 1E      call input_f00
9452   41A4 E7            pop d
9453   41A5 FD 43         mov [d], b
9454   41A7             ;; if (c1 == 900) 
9455   41A7             _if151_cond:
9456   41A7 FA FB FF      lea d, [bp + -5] ; $c1
9457   41AA 2A            mov b, [d]
9458   41AB             ; START RELATIONAL
9459   41AB D7            push a
9460   41AC 11            mov a, b
9461   41AD 26 84 03      mov b, $384
9462   41B0 B0            cmp a, b
9463   41B1 FD 71         seq ; ==
9464   41B3 E4            pop a
9465   41B4             ; END RELATIONAL
9466   41B4 C0 00 00      cmp b, 0
9467   41B7 C6 C7 41      je _if151_exit
9468   41BA             _if151_true:
9469   41BA             ;; c1 = 100; 
9470   41BA FA FB FF      lea d, [bp + -5] ; $c1
9471   41BD DA            push d
9472   41BE 26 64 00      mov b, $64
9473   41C1 E7            pop d
9474   41C2 FD 43         mov [d], b
9475   41C4 0A C7 41      jmp _if151_exit
9476   41C7             _if151_exit:
9477   41C7             ;; if (c1 < 100 || c1 >= 900) { 
9478   41C7             _if152_cond:
9479   41C7 FA FB FF      lea d, [bp + -5] ; $c1
9480   41CA 2A            mov b, [d]
9481   41CB             ; START RELATIONAL
9482   41CB D7            push a
9483   41CC 11            mov a, b
9484   41CD 26 64 00      mov b, $64
9485   41D0 B0            cmp a, b
9486   41D1 FD 73         slt ; < (signed)
9487   41D3 E4            pop a
9488   41D4             ; END RELATIONAL
9489   41D4             ; START LOGICAL OR
9490   41D4 D7            push a
9491   41D5 11            mov a, b
9492   41D6 FA FB FF      lea d, [bp + -5] ; $c1
9493   41D9 2A            mov b, [d]
9494   41DA             ; START RELATIONAL
9495   41DA D7            push a
9496   41DB 11            mov a, b
9497   41DC 26 84 03      mov b, $384
9498   41DF B0            cmp a, b
9499   41E0 FD 80         sge ; >=
9500   41E2 E4            pop a
9501   41E3             ; END RELATIONAL
9502   41E3 FD A8         sor a, b ; ||
9503   41E5 E4            pop a
9504   41E6             ; END LOGICAL OR
9505   41E6 C0 00 00      cmp b, 0
9506   41E9 C6 04 42      je _if152_exit
9507   41EC             _if152_true:
9508   41EC             ;; printf("Ensign Chekov%s", inc_1); 
9509   41EC 3B 33 63      mov d, _inc_1 ; $inc_1
9510   41EF 2A            mov b, [d]
9511   41F0 FD AB         swp b
9512   41F2 D8            push b
9513   41F3 26 14 6F      mov b, _s109 ; "Ensign Chekov%s"
9514   41F6 FD AB         swp b
9515   41F8 D8            push b
9516   41F9 07 BA 07      call printf
9517   41FC 51 04 00      add sp, 4
9518   41FF             ;; return; 
9519   41FF F9            leave
9520   4200 09            ret
9521   4201 0A 04 42      jmp _if152_exit
9522   4204             _if152_exit:
9523   4204             ;; energy = energy - 2; 
9524   4204 3B E3 61      mov d, _energy ; $energy
9525   4207 DA            push d
9526   4208 3B E3 61      mov d, _energy ; $energy
9527   420B 2A            mov b, [d]
9528   420C             ; START TERMS
9529   420C D7            push a
9530   420D 11            mov a, b
9531   420E 26 02 00      mov b, $2
9532   4211 60            sub a, b
9533   4212 27            mov b, a
9534   4213 E4            pop a
9535   4214             ; END TERMS
9536   4214 E7            pop d
9537   4215 FD 43         mov [d], b
9538   4217             ;; torps--; 
9539   4217 3B 98 62      mov d, _torps ; $torps
9540   421A 32            mov bl, [d]
9541   421B A7 00         mov bh, 0
9542   421D FD 7D         dec b
9543   421F 3B 98 62      mov d, _torps ; $torps
9544   4222 FD 43         mov [d], b
9545   4224 FD 77         inc b
9546   4226             ;; c2 = FROM_FIXED00(c1);	/* Integer part */ 
9547   4226 FA F9 FF      lea d, [bp + -7] ; $c2
9548   4229 DA            push d
9549   422A FA FB FF      lea d, [bp + -5] ; $c1
9550   422D 2A            mov b, [d]
9551   422E FD AB         swp b
9552   4230 D8            push b
9553   4231 07 69 1D      call FROM_FIXED00
9554   4234 51 02 00      add sp, 2
9555   4237 E7            pop d
9556   4238 FD 43         mov [d], b
9557   423A             ;; c3 = c2 + 1;		/* Next integer part */ 
9558   423A FA F7 FF      lea d, [bp + -9] ; $c3
9559   423D DA            push d
9560   423E FA F9 FF      lea d, [bp + -7] ; $c2
9561   4241 2A            mov b, [d]
9562   4242             ; START TERMS
9563   4242 D7            push a
9564   4243 11            mov a, b
9565   4244 26 01 00      mov b, $1
9566   4247 56            add b, a
9567   4248 E4            pop a
9568   4249             ; END TERMS
9569   4249 E7            pop d
9570   424A FD 43         mov [d], b
9571   424C             ;; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
9572   424C FA F5 FF      lea d, [bp + -11] ; $c4
9573   424F DA            push d
9574   4250 FA FB FF      lea d, [bp + -5] ; $c1
9575   4253 2A            mov b, [d]
9576   4254             ; START TERMS
9577   4254 D7            push a
9578   4255 11            mov a, b
9579   4256 FA F9 FF      lea d, [bp + -7] ; $c2
9580   4259 2A            mov b, [d]
9581   425A FD AB         swp b
9582   425C D8            push b
9583   425D 07 57 1D      call TO_FIXED00
9584   4260 51 02 00      add sp, 2
9585   4263 60            sub a, b
9586   4264 27            mov b, a
9587   4265 E4            pop a
9588   4266             ; END TERMS
9589   4266 E7            pop d
9590   4267 FD 43         mov [d], b
9591   4269             ;; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
9592   4269 FA EF FF      lea d, [bp + -17] ; $x1
9593   426C DA            push d
9594   426D 26 64 00      mov b, $64
9595   4270             ; START FACTORS
9596   4270 D7            push a
9597   4271 11            mov a, b
9598   4272 3B C3 61      mov d, _c_data ; $c
9599   4275 D7            push a
9600   4276 DA            push d
9601   4277 26 01 00      mov b, $1
9602   427A E7            pop d
9603   427B FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9604   427F DA            push d
9605   4280 FA F9 FF      lea d, [bp + -7] ; $c2
9606   4283 2A            mov b, [d]
9607   4284 E7            pop d
9608   4285 5A            add d, b
9609   4286 E4            pop a
9610   4287 32            mov bl, [d]
9611   4288 A7 00         mov bh, 0
9612   428A AC            mul a, b ; *
9613   428B 11            mov a, b
9614   428C 27            mov b, a
9615   428D E4            pop a
9616   428E             ; END FACTORS
9617   428E             ; START TERMS
9618   428E D7            push a
9619   428F 11            mov a, b
9620   4290 3B C3 61      mov d, _c_data ; $c
9621   4293 D7            push a
9622   4294 DA            push d
9623   4295 26 01 00      mov b, $1
9624   4298 E7            pop d
9625   4299 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9626   429D DA            push d
9627   429E FA F7 FF      lea d, [bp + -9] ; $c3
9628   42A1 2A            mov b, [d]
9629   42A2 E7            pop d
9630   42A3 5A            add d, b
9631   42A4 E4            pop a
9632   42A5 32            mov bl, [d]
9633   42A6 A7 00         mov bh, 0
9634   42A8             ; START TERMS
9635   42A8 D7            push a
9636   42A9 11            mov a, b
9637   42AA 3B C3 61      mov d, _c_data ; $c
9638   42AD D7            push a
9639   42AE DA            push d
9640   42AF 26 01 00      mov b, $1
9641   42B2 E7            pop d
9642   42B3 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9643   42B7 DA            push d
9644   42B8 FA F9 FF      lea d, [bp + -7] ; $c2
9645   42BB 2A            mov b, [d]
9646   42BC E7            pop d
9647   42BD 5A            add d, b
9648   42BE E4            pop a
9649   42BF 32            mov bl, [d]
9650   42C0 A7 00         mov bh, 0
9651   42C2 60            sub a, b
9652   42C3 27            mov b, a
9653   42C4 E4            pop a
9654   42C5             ; END TERMS
9655   42C5             ; START FACTORS
9656   42C5 D7            push a
9657   42C6 11            mov a, b
9658   42C7 FA F5 FF      lea d, [bp + -11] ; $c4
9659   42CA 2A            mov b, [d]
9660   42CB AC            mul a, b ; *
9661   42CC 11            mov a, b
9662   42CD 27            mov b, a
9663   42CE E4            pop a
9664   42CF             ; END FACTORS
9665   42CF 56            add b, a
9666   42D0 E4            pop a
9667   42D1             ; END TERMS
9668   42D1 E7            pop d
9669   42D2 FD 43         mov [d], b
9670   42D4             ;; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
9671   42D4 FA ED FF      lea d, [bp + -19] ; $x2
9672   42D7 DA            push d
9673   42D8 26 64 00      mov b, $64
9674   42DB             ; START FACTORS
9675   42DB D7            push a
9676   42DC 11            mov a, b
9677   42DD 3B C3 61      mov d, _c_data ; $c
9678   42E0 D7            push a
9679   42E1 DA            push d
9680   42E2 26 02 00      mov b, $2
9681   42E5 E7            pop d
9682   42E6 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9683   42EA DA            push d
9684   42EB FA F9 FF      lea d, [bp + -7] ; $c2
9685   42EE 2A            mov b, [d]
9686   42EF E7            pop d
9687   42F0 5A            add d, b
9688   42F1 E4            pop a
9689   42F2 32            mov bl, [d]
9690   42F3 A7 00         mov bh, 0
9691   42F5 AC            mul a, b ; *
9692   42F6 11            mov a, b
9693   42F7 27            mov b, a
9694   42F8 E4            pop a
9695   42F9             ; END FACTORS
9696   42F9             ; START TERMS
9697   42F9 D7            push a
9698   42FA 11            mov a, b
9699   42FB 3B C3 61      mov d, _c_data ; $c
9700   42FE D7            push a
9701   42FF DA            push d
9702   4300 26 02 00      mov b, $2
9703   4303 E7            pop d
9704   4304 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9705   4308 DA            push d
9706   4309 FA F7 FF      lea d, [bp + -9] ; $c3
9707   430C 2A            mov b, [d]
9708   430D E7            pop d
9709   430E 5A            add d, b
9710   430F E4            pop a
9711   4310 32            mov bl, [d]
9712   4311 A7 00         mov bh, 0
9713   4313             ; START TERMS
9714   4313 D7            push a
9715   4314 11            mov a, b
9716   4315 3B C3 61      mov d, _c_data ; $c
9717   4318 D7            push a
9718   4319 DA            push d
9719   431A 26 02 00      mov b, $2
9720   431D E7            pop d
9721   431E FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9722   4322 DA            push d
9723   4323 FA F9 FF      lea d, [bp + -7] ; $c2
9724   4326 2A            mov b, [d]
9725   4327 E7            pop d
9726   4328 5A            add d, b
9727   4329 E4            pop a
9728   432A 32            mov bl, [d]
9729   432B A7 00         mov bh, 0
9730   432D 60            sub a, b
9731   432E 27            mov b, a
9732   432F E4            pop a
9733   4330             ; END TERMS
9734   4330             ; START FACTORS
9735   4330 D7            push a
9736   4331 11            mov a, b
9737   4332 FA F5 FF      lea d, [bp + -11] ; $c4
9738   4335 2A            mov b, [d]
9739   4336 AC            mul a, b ; *
9740   4337 11            mov a, b
9741   4338 27            mov b, a
9742   4339 E4            pop a
9743   433A             ; END FACTORS
9744   433A 56            add b, a
9745   433B E4            pop a
9746   433C             ; END TERMS
9747   433C E7            pop d
9748   433D FD 43         mov [d], b
9749   433F             ;; x = ship_y + x1; 
9750   433F FA F3 FF      lea d, [bp + -13] ; $x
9751   4342 DA            push d
9752   4343 3B B9 62      mov d, _ship_y ; $ship_y
9753   4346 2A            mov b, [d]
9754   4347             ; START TERMS
9755   4347 D7            push a
9756   4348 11            mov a, b
9757   4349 FA EF FF      lea d, [bp + -17] ; $x1
9758   434C 2A            mov b, [d]
9759   434D 56            add b, a
9760   434E E4            pop a
9761   434F             ; END TERMS
9762   434F E7            pop d
9763   4350 FD 43         mov [d], b
9764   4352             ;; y = ship_x + x2; 
9765   4352 FA F1 FF      lea d, [bp + -15] ; $y
9766   4355 DA            push d
9767   4356 3B BB 62      mov d, _ship_x ; $ship_x
9768   4359 2A            mov b, [d]
9769   435A             ; START TERMS
9770   435A D7            push a
9771   435B 11            mov a, b
9772   435C FA ED FF      lea d, [bp + -19] ; $x2
9773   435F 2A            mov b, [d]
9774   4360 56            add b, a
9775   4361 E4            pop a
9776   4362             ; END TERMS
9777   4362 E7            pop d
9778   4363 FD 43         mov [d], b
9779   4365             ;; x3 = FROM_FIXED00(x); 
9780   4365 FA FF FF      lea d, [bp + -1] ; $x3
9781   4368 DA            push d
9782   4369 FA F3 FF      lea d, [bp + -13] ; $x
9783   436C 2A            mov b, [d]
9784   436D FD AB         swp b
9785   436F D8            push b
9786   4370 07 69 1D      call FROM_FIXED00
9787   4373 51 02 00      add sp, 2
9788   4376 E7            pop d
9789   4377 FD 43         mov [d], b
9790   4379             ;; y3 = FROM_FIXED00(y); 
9791   4379 FA FD FF      lea d, [bp + -3] ; $y3
9792   437C DA            push d
9793   437D FA F1 FF      lea d, [bp + -15] ; $y
9794   4380 2A            mov b, [d]
9795   4381 FD AB         swp b
9796   4383 D8            push b
9797   4384 07 69 1D      call FROM_FIXED00
9798   4387 51 02 00      add sp, 2
9799   438A E7            pop d
9800   438B FD 43         mov [d], b
9801   438D             ;; puts("Torpedo Track:"); 
9802   438D 26 24 6F      mov b, _s110 ; "Torpedo Track:"
9803   4390 FD AB         swp b
9804   4392 D8            push b
9805   4393 07 4A 15      call puts
9806   4396 51 02 00      add sp, 2
9807   4399             ;; while (x3 >= 1 && x3 <= 8 && y3 >= 1 && y3 <= 8) { 
9808   4399             _while153_cond:
9809   4399 FA FF FF      lea d, [bp + -1] ; $x3
9810   439C 2A            mov b, [d]
9811   439D             ; START RELATIONAL
9812   439D D7            push a
9813   439E 11            mov a, b
9814   439F 26 01 00      mov b, $1
9815   43A2 B0            cmp a, b
9816   43A3 FD 80         sge ; >=
9817   43A5 E4            pop a
9818   43A6             ; END RELATIONAL
9819   43A6             ; START LOGICAL AND
9820   43A6 D7            push a
9821   43A7 11            mov a, b
9822   43A8 FA FF FF      lea d, [bp + -1] ; $x3
9823   43AB 2A            mov b, [d]
9824   43AC             ; START RELATIONAL
9825   43AC D7            push a
9826   43AD 11            mov a, b
9827   43AE 26 08 00      mov b, $8
9828   43B1 B0            cmp a, b
9829   43B2 FD 74         sle ; <= (signed)
9830   43B4 E4            pop a
9831   43B5             ; END RELATIONAL
9832   43B5 FD A7         sand a, b
9833   43B7 11            mov a, b
9834   43B8 FA FD FF      lea d, [bp + -3] ; $y3
9835   43BB 2A            mov b, [d]
9836   43BC             ; START RELATIONAL
9837   43BC D7            push a
9838   43BD 11            mov a, b
9839   43BE 26 01 00      mov b, $1
9840   43C1 B0            cmp a, b
9841   43C2 FD 80         sge ; >=
9842   43C4 E4            pop a
9843   43C5             ; END RELATIONAL
9844   43C5 FD A7         sand a, b
9845   43C7 11            mov a, b
9846   43C8 FA FD FF      lea d, [bp + -3] ; $y3
9847   43CB 2A            mov b, [d]
9848   43CC             ; START RELATIONAL
9849   43CC D7            push a
9850   43CD 11            mov a, b
9851   43CE 26 08 00      mov b, $8
9852   43D1 B0            cmp a, b
9853   43D2 FD 74         sle ; <= (signed)
9854   43D4 E4            pop a
9855   43D5             ; END RELATIONAL
9856   43D5 FD A7         sand a, b
9857   43D7 E4            pop a
9858   43D8             ; END LOGICAL AND
9859   43D8 C0 00 00      cmp b, 0
9860   43DB C6 BB 44      je _while153_exit
9861   43DE             _while153_block:
9862   43DE             ;; unsigned char                         p; 
9863   43DE 52 01 00      sub sp, 1 ; p
9864   43E1             ;; printf("    %d, %d\n", x3, y3); 
9865   43E1 FA FD FF      lea d, [bp + -3] ; $y3
9866   43E4 2A            mov b, [d]
9867   43E5 FD AB         swp b
9868   43E7 D8            push b
9869   43E8 FA FF FF      lea d, [bp + -1] ; $x3
9870   43EB 2A            mov b, [d]
9871   43EC FD AB         swp b
9872   43EE D8            push b
9873   43EF 26 33 6F      mov b, _s111 ; "    %d, %d\n"
9874   43F2 FD AB         swp b
9875   43F4 D8            push b
9876   43F5 07 BA 07      call printf
9877   43F8 51 06 00      add sp, 6
9878   43FB             ;; p = quad[x3+-1][y3+-1]; 
9879   43FB FA EC FF      lea d, [bp + -20] ; $p
9880   43FE DA            push d
9881   43FF 3B BF 62      mov d, _quad_data ; $quad
9882   4402 D7            push a
9883   4403 DA            push d
9884   4404 FA FF FF      lea d, [bp + -1] ; $x3
9885   4407 2A            mov b, [d]
9886   4408             ; START TERMS
9887   4408 D7            push a
9888   4409 11            mov a, b
9889   440A 26 FF FF      mov b, $ffff
9890   440D 56            add b, a
9891   440E E4            pop a
9892   440F             ; END TERMS
9893   440F E7            pop d
9894   4410 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
9895   4414 DA            push d
9896   4415 FA FD FF      lea d, [bp + -3] ; $y3
9897   4418 2A            mov b, [d]
9898   4419             ; START TERMS
9899   4419 D7            push a
9900   441A 11            mov a, b
9901   441B 26 FF FF      mov b, $ffff
9902   441E 56            add b, a
9903   441F E4            pop a
9904   4420             ; END TERMS
9905   4420 E7            pop d
9906   4421 5A            add d, b
9907   4422 E4            pop a
9908   4423 32            mov bl, [d]
9909   4424 A7 00         mov bh, 0
9910   4426 E7            pop d
9911   4427 FD 3E         mov [d], bl
9912   4429             ;; if (p !=  		0       && p !=  		4     ) { 
9913   4429             _if154_cond:
9914   4429 FA EC FF      lea d, [bp + -20] ; $p
9915   442C 32            mov bl, [d]
9916   442D A7 00         mov bh, 0
9917   442F             ; START RELATIONAL
9918   442F D7            push a
9919   4430 11            mov a, b
9920   4431 26 00 00      mov b, $0
9921   4434 B0            cmp a, b
9922   4435 FD 72         sneq ; !=
9923   4437 E4            pop a
9924   4438             ; END RELATIONAL
9925   4438             ; START LOGICAL AND
9926   4438 D7            push a
9927   4439 11            mov a, b
9928   443A FA EC FF      lea d, [bp + -20] ; $p
9929   443D 32            mov bl, [d]
9930   443E A7 00         mov bh, 0
9931   4440             ; START RELATIONAL
9932   4440 D7            push a
9933   4441 11            mov a, b
9934   4442 26 04 00      mov b, $4
9935   4445 B0            cmp a, b
9936   4446 FD 72         sneq ; !=
9937   4448 E4            pop a
9938   4449             ; END RELATIONAL
9939   4449 FD A7         sand a, b
9940   444B E4            pop a
9941   444C             ; END LOGICAL AND
9942   444C C0 00 00      cmp b, 0
9943   444F C6 6A 44      je _if154_exit
9944   4452             _if154_true:
9945   4452             ;; torpedo_hit(x3, y3); 
9946   4452 FA FD FF      lea d, [bp + -3] ; $y3
9947   4455 2A            mov b, [d]
9948   4456 DD            push bl
9949   4457 FA FF FF      lea d, [bp + -1] ; $x3
9950   445A 2A            mov b, [d]
9951   445B DD            push bl
9952   445C 07 CC 44      call torpedo_hit
9953   445F 51 02 00      add sp, 2
9954   4462             ;; klingons_shoot(); 
9955   4462 07 FE 57      call klingons_shoot
9956   4465             ;; return; 
9957   4465 F9            leave
9958   4466 09            ret
9959   4467 0A 6A 44      jmp _if154_exit
9960   446A             _if154_exit:
9961   446A             ;; x = x + x1; 
9962   446A FA F3 FF      lea d, [bp + -13] ; $x
9963   446D DA            push d
9964   446E FA F3 FF      lea d, [bp + -13] ; $x
9965   4471 2A            mov b, [d]
9966   4472             ; START TERMS
9967   4472 D7            push a
9968   4473 11            mov a, b
9969   4474 FA EF FF      lea d, [bp + -17] ; $x1
9970   4477 2A            mov b, [d]
9971   4478 56            add b, a
9972   4479 E4            pop a
9973   447A             ; END TERMS
9974   447A E7            pop d
9975   447B FD 43         mov [d], b
9976   447D             ;; y = y + x2; 
9977   447D FA F1 FF      lea d, [bp + -15] ; $y
9978   4480 DA            push d
9979   4481 FA F1 FF      lea d, [bp + -15] ; $y
9980   4484 2A            mov b, [d]
9981   4485             ; START TERMS
9982   4485 D7            push a
9983   4486 11            mov a, b
9984   4487 FA ED FF      lea d, [bp + -19] ; $x2
9985   448A 2A            mov b, [d]
9986   448B 56            add b, a
9987   448C E4            pop a
9988   448D             ; END TERMS
9989   448D E7            pop d
9990   448E FD 43         mov [d], b
9991   4490             ;; x3 = FROM_FIXED00(x); 
9992   4490 FA FF FF      lea d, [bp + -1] ; $x3
9993   4493 DA            push d
9994   4494 FA F3 FF      lea d, [bp + -13] ; $x
9995   4497 2A            mov b, [d]
9996   4498 FD AB         swp b
9997   449A D8            push b
9998   449B 07 69 1D      call FROM_FIXED00
9999   449E 51 02 00      add sp, 2
10000  44A1 E7            pop d
10001  44A2 FD 43         mov [d], b
10002  44A4             ;; y3 = FROM_FIXED00(y); 
10003  44A4 FA FD FF      lea d, [bp + -3] ; $y3
10004  44A7 DA            push d
10005  44A8 FA F1 FF      lea d, [bp + -15] ; $y
10006  44AB 2A            mov b, [d]
10007  44AC FD AB         swp b
10008  44AE D8            push b
10009  44AF 07 69 1D      call FROM_FIXED00
10010  44B2 51 02 00      add sp, 2
10011  44B5 E7            pop d
10012  44B6 FD 43         mov [d], b
10013  44B8 0A 99 43      jmp _while153_cond
10014  44BB             _while153_exit:
10015  44BB             ;; puts("Torpedo Missed\n"); 
10016  44BB 26 3F 6F      mov b, _s112 ; "Torpedo Missed\n"
10017  44BE FD AB         swp b
10018  44C0 D8            push b
10019  44C1 07 4A 15      call puts
10020  44C4 51 02 00      add sp, 2
10021  44C7             ;; klingons_shoot(); 
10022  44C7 07 FE 57      call klingons_shoot
10023  44CA F9            leave
10024  44CB 09            ret
10025  44CC             
10026  44CC             torpedo_hit:
10027  44CC F8 00 00      enter 0 ; (push bp; mov bp, sp)
10028  44CF             ;; int i; 
10029  44CF 52 02 00      sub sp, 2 ; i
10030  44D2             ;; struct klingon *k; 
10031  44D2 52 02 00      sub sp, 2 ; k
10032  44D5             ;; switch(quad[yp+-1][xp+-1]) { 
10033  44D5             _switch155_expr:
10034  44D5 3B BF 62      mov d, _quad_data ; $quad
10035  44D8 D7            push a
10036  44D9 DA            push d
10037  44DA FA 05 00      lea d, [bp + 5] ; $yp
10038  44DD 32            mov bl, [d]
10039  44DE A7 00         mov bh, 0
10040  44E0             ; START TERMS
10041  44E0 D7            push a
10042  44E1 11            mov a, b
10043  44E2 26 FF FF      mov b, $ffff
10044  44E5 56            add b, a
10045  44E6 E4            pop a
10046  44E7             ; END TERMS
10047  44E7 E7            pop d
10048  44E8 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
10049  44EC DA            push d
10050  44ED FA 06 00      lea d, [bp + 6] ; $xp
10051  44F0 32            mov bl, [d]
10052  44F1 A7 00         mov bh, 0
10053  44F3             ; START TERMS
10054  44F3 D7            push a
10055  44F4 11            mov a, b
10056  44F5 26 FF FF      mov b, $ffff
10057  44F8 56            add b, a
10058  44F9 E4            pop a
10059  44FA             ; END TERMS
10060  44FA E7            pop d
10061  44FB 5A            add d, b
10062  44FC E4            pop a
10063  44FD 32            mov bl, [d]
10064  44FE A7 00         mov bh, 0
10065  4500             _switch155_comparisons:
10066  4500 C0 01 00      cmp b, 1
10067  4503 C6 15 45      je _switch155_case0
10068  4506 C0 03 00      cmp b, 3
10069  4509 C6 31 45      je _switch155_case1
10070  450C C0 02 00      cmp b, 2
10071  450F C6 4C 46      je _switch155_case2
10072  4512 0A 47 47      jmp _switch155_exit
10073  4515             _switch155_case0:
10074  4515             ;; printf("Star at %d, %d absorbed torpedo energy.\n\n", yp, xp); 
10075  4515 FA 06 00      lea d, [bp + 6] ; $xp
10076  4518 32            mov bl, [d]
10077  4519 A7 00         mov bh, 0
10078  451B DD            push bl
10079  451C FA 05 00      lea d, [bp + 5] ; $yp
10080  451F 32            mov bl, [d]
10081  4520 A7 00         mov bh, 0
10082  4522 DD            push bl
10083  4523 26 4F 6F      mov b, _s113 ; "Star at %d, %d absorbed torpedo energy.\n\n"
10084  4526 FD AB         swp b
10085  4528 D8            push b
10086  4529 07 BA 07      call printf
10087  452C 51 04 00      add sp, 4
10088  452F             ;; return; 
10089  452F F9            leave
10090  4530 09            ret
10091  4531             _switch155_case1:
10092  4531             ;; puts("*** Klingon Destroyed ***\n"); 
10093  4531 26 B3 6E      mov b, _s106 ; "*** Klingon Destroyed ***\n"
10094  4534 FD AB         swp b
10095  4536 D8            push b
10096  4537 07 4A 15      call puts
10097  453A 51 02 00      add sp, 2
10098  453D             ;; klingons--; 
10099  453D 3B 95 62      mov d, _klingons ; $klingons
10100  4540 32            mov bl, [d]
10101  4541 A7 00         mov bh, 0
10102  4543 FD 7D         dec b
10103  4545 3B 95 62      mov d, _klingons ; $klingons
10104  4548 FD 43         mov [d], b
10105  454A FD 77         inc b
10106  454C             ;; klingons_left--; 
10107  454C 3B 97 62      mov d, _klingons_left ; $klingons_left
10108  454F 32            mov bl, [d]
10109  4550 A7 00         mov bh, 0
10110  4552 FD 7D         dec b
10111  4554 3B 97 62      mov d, _klingons_left ; $klingons_left
10112  4557 FD 43         mov [d], b
10113  4559 FD 77         inc b
10114  455B             ;; if (klingons_left <= 0) 
10115  455B             _if156_cond:
10116  455B 3B 97 62      mov d, _klingons_left ; $klingons_left
10117  455E 32            mov bl, [d]
10118  455F A7 00         mov bh, 0
10119  4561             ; START RELATIONAL
10120  4561 D7            push a
10121  4562 11            mov a, b
10122  4563 26 00 00      mov b, $0
10123  4566 B0            cmp a, b
10124  4567 FD 76         sleu ; <= (unsigned)
10125  4569 E4            pop a
10126  456A             ; END RELATIONAL
10127  456A C0 00 00      cmp b, 0
10128  456D C6 76 45      je _if156_exit
10129  4570             _if156_true:
10130  4570             ;; won_game(); 
10131  4570 07 44 56      call won_game
10132  4573 0A 76 45      jmp _if156_exit
10133  4576             _if156_exit:
10134  4576             ;; k = kdata; 
10135  4576 FA FD FF      lea d, [bp + -3] ; $k
10136  4579 DA            push d
10137  457A 3B 89 62      mov d, _kdata_data ; $kdata
10138  457D 2D            mov b, d
10139  457E E7            pop d
10140  457F FD 43         mov [d], b
10141  4581             ;; for (i = 0; i <= 2; i++) { 
10142  4581             _for157_init:
10143  4581 FA FF FF      lea d, [bp + -1] ; $i
10144  4584 DA            push d
10145  4585 26 00 00      mov b, $0
10146  4588 E7            pop d
10147  4589 FD 43         mov [d], b
10148  458B             _for157_cond:
10149  458B FA FF FF      lea d, [bp + -1] ; $i
10150  458E 2A            mov b, [d]
10151  458F             ; START RELATIONAL
10152  458F D7            push a
10153  4590 11            mov a, b
10154  4591 26 02 00      mov b, $2
10155  4594 B0            cmp a, b
10156  4595 FD 74         sle ; <= (signed)
10157  4597 E4            pop a
10158  4598             ; END RELATIONAL
10159  4598 C0 00 00      cmp b, 0
10160  459B C6 0A 46      je _for157_exit
10161  459E             _for157_block:
10162  459E             ;; if (yp == k->y && xp == k->x) 
10163  459E             _if158_cond:
10164  459E FA 05 00      lea d, [bp + 5] ; $yp
10165  45A1 32            mov bl, [d]
10166  45A2 A7 00         mov bh, 0
10167  45A4             ; START RELATIONAL
10168  45A4 D7            push a
10169  45A5 11            mov a, b
10170  45A6 FA FD FF      lea d, [bp + -3] ; $k
10171  45A9 FD 2A         mov d, [d]
10172  45AB 58 00 00      add d, 0
10173  45AE 32            mov bl, [d]
10174  45AF A7 00         mov bh, 0
10175  45B1 B0            cmp a, b
10176  45B2 FD 71         seq ; ==
10177  45B4 E4            pop a
10178  45B5             ; END RELATIONAL
10179  45B5             ; START LOGICAL AND
10180  45B5 D7            push a
10181  45B6 11            mov a, b
10182  45B7 FA 06 00      lea d, [bp + 6] ; $xp
10183  45BA 32            mov bl, [d]
10184  45BB A7 00         mov bh, 0
10185  45BD             ; START RELATIONAL
10186  45BD D7            push a
10187  45BE 11            mov a, b
10188  45BF FA FD FF      lea d, [bp + -3] ; $k
10189  45C2 FD 2A         mov d, [d]
10190  45C4 58 01 00      add d, 1
10191  45C7 32            mov bl, [d]
10192  45C8 A7 00         mov bh, 0
10193  45CA B0            cmp a, b
10194  45CB FD 71         seq ; ==
10195  45CD E4            pop a
10196  45CE             ; END RELATIONAL
10197  45CE FD A7         sand a, b
10198  45D0 E4            pop a
10199  45D1             ; END LOGICAL AND
10200  45D1 C0 00 00      cmp b, 0
10201  45D4 C6 E9 45      je _if158_exit
10202  45D7             _if158_true:
10203  45D7             ;; k->energy = 0; 
10204  45D7 FA FD FF      lea d, [bp + -3] ; $k
10205  45DA FD 2A         mov d, [d]
10206  45DC 58 02 00      add d, 2
10207  45DF DA            push d
10208  45E0 26 00 00      mov b, $0
10209  45E3 E7            pop d
10210  45E4 FD 43         mov [d], b
10211  45E6 0A E9 45      jmp _if158_exit
10212  45E9             _if158_exit:
10213  45E9             ;; k++; 
10214  45E9 FA FD FF      lea d, [bp + -3] ; $k
10215  45EC 2A            mov b, [d]
10216  45ED FD 77         inc b
10217  45EF FD 77         inc b
10218  45F1 FA FD FF      lea d, [bp + -3] ; $k
10219  45F4 FD 43         mov [d], b
10220  45F6 FD 7D         dec b
10221  45F8 FD 7D         dec b
10222  45FA             _for157_update:
10223  45FA FA FF FF      lea d, [bp + -1] ; $i
10224  45FD 2A            mov b, [d]
10225  45FE FD 77         inc b
10226  4600 FA FF FF      lea d, [bp + -1] ; $i
10227  4603 FD 43         mov [d], b
10228  4605 FD 7D         dec b
10229  4607 0A 8B 45      jmp _for157_cond
10230  460A             _for157_exit:
10231  460A             ;; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x100; 
10232  460A 3B E7 61      mov d, _map_data ; $map
10233  460D D7            push a
10234  460E DA            push d
10235  460F 3B 9A 62      mov d, _quad_y ; $quad_y
10236  4612 2A            mov b, [d]
10237  4613 E7            pop d
10238  4614 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10239  4618 DA            push d
10240  4619 3B 9C 62      mov d, _quad_x ; $quad_x
10241  461C 2A            mov b, [d]
10242  461D E7            pop d
10243  461E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10244  4622 E4            pop a
10245  4623 DA            push d
10246  4624 3B E7 61      mov d, _map_data ; $map
10247  4627 D7            push a
10248  4628 DA            push d
10249  4629 3B 9A 62      mov d, _quad_y ; $quad_y
10250  462C 2A            mov b, [d]
10251  462D E7            pop d
10252  462E FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10253  4632 DA            push d
10254  4633 3B 9C 62      mov d, _quad_x ; $quad_x
10255  4636 2A            mov b, [d]
10256  4637 E7            pop d
10257  4638 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10258  463C E4            pop a
10259  463D 2A            mov b, [d]
10260  463E             ; START TERMS
10261  463E D7            push a
10262  463F 11            mov a, b
10263  4640 26 00 01      mov b, $100
10264  4643 60            sub a, b
10265  4644 27            mov b, a
10266  4645 E4            pop a
10267  4646             ; END TERMS
10268  4646 E7            pop d
10269  4647 FD 43         mov [d], b
10270  4649             ;; break; 
10271  4649 0A 47 47      jmp _switch155_exit ; case break
10272  464C             _switch155_case2:
10273  464C             ;; puts("*** Starbase Destroyed ***"); 
10274  464C 26 79 6F      mov b, _s114 ; "*** Starbase Destroyed ***"
10275  464F FD AB         swp b
10276  4651 D8            push b
10277  4652 07 4A 15      call puts
10278  4655 51 02 00      add sp, 2
10279  4658             ;; starbases--; 
10280  4658 3B BF 61      mov d, _starbases ; $starbases
10281  465B 32            mov bl, [d]
10282  465C A7 00         mov bh, 0
10283  465E FD 7D         dec b
10284  4660 3B BF 61      mov d, _starbases ; $starbases
10285  4663 FD 43         mov [d], b
10286  4665 FD 77         inc b
10287  4667             ;; starbases_left--; 
10288  4667 3B C2 61      mov d, _starbases_left ; $starbases_left
10289  466A 32            mov bl, [d]
10290  466B A7 00         mov bh, 0
10291  466D FD 7D         dec b
10292  466F 3B C2 61      mov d, _starbases_left ; $starbases_left
10293  4672 FD 43         mov [d], b
10294  4674 FD 77         inc b
10295  4676             ;; if (starbases_left <= 0 && klingons_left <= FROM_FIXED(stardate) - time_start - time_up) { 
10296  4676             _if159_cond:
10297  4676 3B C2 61      mov d, _starbases_left ; $starbases_left
10298  4679 32            mov bl, [d]
10299  467A A7 00         mov bh, 0
10300  467C             ; START RELATIONAL
10301  467C D7            push a
10302  467D 11            mov a, b
10303  467E 26 00 00      mov b, $0
10304  4681 B0            cmp a, b
10305  4682 FD 74         sle ; <= (signed)
10306  4684 E4            pop a
10307  4685             ; END RELATIONAL
10308  4685             ; START LOGICAL AND
10309  4685 D7            push a
10310  4686 11            mov a, b
10311  4687 3B 97 62      mov d, _klingons_left ; $klingons_left
10312  468A 32            mov bl, [d]
10313  468B A7 00         mov bh, 0
10314  468D             ; START RELATIONAL
10315  468D D7            push a
10316  468E 11            mov a, b
10317  468F 3B BD 62      mov d, _stardate ; $stardate
10318  4692 2A            mov b, [d]
10319  4693 FD AB         swp b
10320  4695 D8            push b
10321  4696 07 46 1D      call FROM_FIXED
10322  4699 51 02 00      add sp, 2
10323  469C             ; START TERMS
10324  469C D7            push a
10325  469D 11            mov a, b
10326  469E 3B A1 62      mov d, _time_start ; $time_start
10327  46A1 2A            mov b, [d]
10328  46A2 60            sub a, b
10329  46A3 27            mov b, a
10330  46A4 11            mov a, b
10331  46A5 3B A3 62      mov d, _time_up ; $time_up
10332  46A8 2A            mov b, [d]
10333  46A9 60            sub a, b
10334  46AA 27            mov b, a
10335  46AB E4            pop a
10336  46AC             ; END TERMS
10337  46AC B0            cmp a, b
10338  46AD FD 76         sleu ; <= (unsigned)
10339  46AF E4            pop a
10340  46B0             ; END RELATIONAL
10341  46B0 FD A7         sand a, b
10342  46B2 E4            pop a
10343  46B3             ; END LOGICAL AND
10344  46B3 C0 00 00      cmp b, 0
10345  46B6 C6 EF 46      je _if159_exit
10346  46B9             _if159_true:
10347  46B9             ;; puts("That does it, Captain!!"); 
10348  46B9 26 94 6F      mov b, _s115 ; "That does it, Captain!!"
10349  46BC FD AB         swp b
10350  46BE D8            push b
10351  46BF 07 4A 15      call puts
10352  46C2 51 02 00      add sp, 2
10353  46C5             ;; puts("You are hereby relieved of command\n"); 
10354  46C5 26 AC 6F      mov b, _s116 ; "You are hereby relieved of command\n"
10355  46C8 FD AB         swp b
10356  46CA D8            push b
10357  46CB 07 4A 15      call puts
10358  46CE 51 02 00      add sp, 2
10359  46D1             ;; puts("and sentenced to 99 stardates of hard"); 
10360  46D1 26 D0 6F      mov b, _s117 ; "and sentenced to 99 stardates of hard"
10361  46D4 FD AB         swp b
10362  46D6 D8            push b
10363  46D7 07 4A 15      call puts
10364  46DA 51 02 00      add sp, 2
10365  46DD             ;; puts("labor on Cygnus 12!!\n"); 
10366  46DD 26 F6 6F      mov b, _s118 ; "labor on Cygnus 12!!\n"
10367  46E0 FD AB         swp b
10368  46E2 D8            push b
10369  46E3 07 4A 15      call puts
10370  46E6 51 02 00      add sp, 2
10371  46E9             ;; resign_commision(); 
10372  46E9 07 29 56      call resign_commision
10373  46EC 0A EF 46      jmp _if159_exit
10374  46EF             _if159_exit:
10375  46EF             ;; puts("Starfleet Command reviewing your record to consider\n court martial!\n"); 
10376  46EF 26 0C 70      mov b, _s119 ; "Starfleet Command reviewing your record to consider\n court martial!\n"
10377  46F2 FD AB         swp b
10378  46F4 D8            push b
10379  46F5 07 4A 15      call puts
10380  46F8 51 02 00      add sp, 2
10381  46FB             ;; docked = 0;		/* Undock */ 
10382  46FB 3B E2 61      mov d, _docked ; $docked
10383  46FE DA            push d
10384  46FF 26 00 00      mov b, $0
10385  4702 E7            pop d
10386  4703 FD 3E         mov [d], bl
10387  4705             ;; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x10; 
10388  4705 3B E7 61      mov d, _map_data ; $map
10389  4708 D7            push a
10390  4709 DA            push d
10391  470A 3B 9A 62      mov d, _quad_y ; $quad_y
10392  470D 2A            mov b, [d]
10393  470E E7            pop d
10394  470F FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10395  4713 DA            push d
10396  4714 3B 9C 62      mov d, _quad_x ; $quad_x
10397  4717 2A            mov b, [d]
10398  4718 E7            pop d
10399  4719 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10400  471D E4            pop a
10401  471E DA            push d
10402  471F 3B E7 61      mov d, _map_data ; $map
10403  4722 D7            push a
10404  4723 DA            push d
10405  4724 3B 9A 62      mov d, _quad_y ; $quad_y
10406  4727 2A            mov b, [d]
10407  4728 E7            pop d
10408  4729 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10409  472D DA            push d
10410  472E 3B 9C 62      mov d, _quad_x ; $quad_x
10411  4731 2A            mov b, [d]
10412  4732 E7            pop d
10413  4733 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10414  4737 E4            pop a
10415  4738 2A            mov b, [d]
10416  4739             ; START TERMS
10417  4739 D7            push a
10418  473A 11            mov a, b
10419  473B 26 10 00      mov b, $10
10420  473E 60            sub a, b
10421  473F 27            mov b, a
10422  4740 E4            pop a
10423  4741             ; END TERMS
10424  4741 E7            pop d
10425  4742 FD 43         mov [d], b
10426  4744             ;; break; 
10427  4744 0A 47 47      jmp _switch155_exit ; case break
10428  4747             _switch155_exit:
10429  4747             ;; quad[yp+-1][xp+-1] =  		0      ; 
10430  4747 3B BF 62      mov d, _quad_data ; $quad
10431  474A D7            push a
10432  474B DA            push d
10433  474C FA 05 00      lea d, [bp + 5] ; $yp
10434  474F 32            mov bl, [d]
10435  4750 A7 00         mov bh, 0
10436  4752             ; START TERMS
10437  4752 D7            push a
10438  4753 11            mov a, b
10439  4754 26 FF FF      mov b, $ffff
10440  4757 56            add b, a
10441  4758 E4            pop a
10442  4759             ; END TERMS
10443  4759 E7            pop d
10444  475A FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
10445  475E DA            push d
10446  475F FA 06 00      lea d, [bp + 6] ; $xp
10447  4762 32            mov bl, [d]
10448  4763 A7 00         mov bh, 0
10449  4765             ; START TERMS
10450  4765 D7            push a
10451  4766 11            mov a, b
10452  4767 26 FF FF      mov b, $ffff
10453  476A 56            add b, a
10454  476B E4            pop a
10455  476C             ; END TERMS
10456  476C E7            pop d
10457  476D 5A            add d, b
10458  476E E4            pop a
10459  476F DA            push d
10460  4770 26 00 00      mov b, $0
10461  4773 E7            pop d
10462  4774 FD 3E         mov [d], bl
10463  4776 F9            leave
10464  4777 09            ret
10465  4778             
10466  4778             damage_control:
10467  4778 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10468  477B             ;; int       repair_cost = 0; 
10469  477B 52 02 00      sub sp, 2 ; repair_cost
10470  477E             ; --- START LOCAL VAR INITIALIZATION
10471  477E FA FF FF      lea d, [bp + -1] ; $repair_cost
10472  4781 DA            push d
10473  4782 26 00 00      mov b, $0
10474  4785 E7            pop d
10475  4786 FD 43         mov [d], b
10476  4788             ; --- END LOCAL VAR INITIALIZATION
10477  4788             ;; int i; 
10478  4788 52 02 00      sub sp, 2 ; i
10479  478B             ;; if (damage[6] < 0) 
10480  478B             _if160_cond:
10481  478B 3B A5 62      mov d, _damage_data ; $damage
10482  478E D7            push a
10483  478F DA            push d
10484  4790 26 06 00      mov b, $6
10485  4793 E7            pop d
10486  4794 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10487  4798 E4            pop a
10488  4799 2A            mov b, [d]
10489  479A             ; START RELATIONAL
10490  479A D7            push a
10491  479B 11            mov a, b
10492  479C 26 00 00      mov b, $0
10493  479F B0            cmp a, b
10494  47A0 FD 73         slt ; < (signed)
10495  47A2 E4            pop a
10496  47A3             ; END RELATIONAL
10497  47A3 C0 00 00      cmp b, 0
10498  47A6 C6 B8 47      je _if160_exit
10499  47A9             _if160_true:
10500  47A9             ;; puts("Damage Control report not available."); 
10501  47A9 26 51 70      mov b, _s120 ; "Damage Control report not available."
10502  47AC FD AB         swp b
10503  47AE D8            push b
10504  47AF 07 4A 15      call puts
10505  47B2 51 02 00      add sp, 2
10506  47B5 0A B8 47      jmp _if160_exit
10507  47B8             _if160_exit:
10508  47B8             ;; if (docked) { 
10509  47B8             _if161_cond:
10510  47B8 3B E2 61      mov d, _docked ; $docked
10511  47BB 32            mov bl, [d]
10512  47BC A7 00         mov bh, 0
10513  47BE C0 00 00      cmp b, 0
10514  47C1 C6 28 49      je _if161_exit
10515  47C4             _if161_true:
10516  47C4             ;; repair_cost = 0; 
10517  47C4 FA FF FF      lea d, [bp + -1] ; $repair_cost
10518  47C7 DA            push d
10519  47C8 26 00 00      mov b, $0
10520  47CB E7            pop d
10521  47CC FD 43         mov [d], b
10522  47CE             ;; for (i = 1; i <= 8; i++) 
10523  47CE             _for162_init:
10524  47CE FA FD FF      lea d, [bp + -3] ; $i
10525  47D1 DA            push d
10526  47D2 26 01 00      mov b, $1
10527  47D5 E7            pop d
10528  47D6 FD 43         mov [d], b
10529  47D8             _for162_cond:
10530  47D8 FA FD FF      lea d, [bp + -3] ; $i
10531  47DB 2A            mov b, [d]
10532  47DC             ; START RELATIONAL
10533  47DC D7            push a
10534  47DD 11            mov a, b
10535  47DE 26 08 00      mov b, $8
10536  47E1 B0            cmp a, b
10537  47E2 FD 74         sle ; <= (signed)
10538  47E4 E4            pop a
10539  47E5             ; END RELATIONAL
10540  47E5 C0 00 00      cmp b, 0
10541  47E8 C6 2F 48      je _for162_exit
10542  47EB             _for162_block:
10543  47EB             ;; if (damage[i] < 0) 
10544  47EB             _if163_cond:
10545  47EB 3B A5 62      mov d, _damage_data ; $damage
10546  47EE D7            push a
10547  47EF DA            push d
10548  47F0 FA FD FF      lea d, [bp + -3] ; $i
10549  47F3 2A            mov b, [d]
10550  47F4 E7            pop d
10551  47F5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10552  47F9 E4            pop a
10553  47FA 2A            mov b, [d]
10554  47FB             ; START RELATIONAL
10555  47FB D7            push a
10556  47FC 11            mov a, b
10557  47FD 26 00 00      mov b, $0
10558  4800 B0            cmp a, b
10559  4801 FD 73         slt ; < (signed)
10560  4803 E4            pop a
10561  4804             ; END RELATIONAL
10562  4804 C0 00 00      cmp b, 0
10563  4807 C6 1F 48      je _if163_exit
10564  480A             _if163_true:
10565  480A             ;; repair_cost = repair_cost + 10; 
10566  480A FA FF FF      lea d, [bp + -1] ; $repair_cost
10567  480D DA            push d
10568  480E FA FF FF      lea d, [bp + -1] ; $repair_cost
10569  4811 2A            mov b, [d]
10570  4812             ; START TERMS
10571  4812 D7            push a
10572  4813 11            mov a, b
10573  4814 26 0A 00      mov b, $a
10574  4817 56            add b, a
10575  4818 E4            pop a
10576  4819             ; END TERMS
10577  4819 E7            pop d
10578  481A FD 43         mov [d], b
10579  481C 0A 1F 48      jmp _if163_exit
10580  481F             _if163_exit:
10581  481F             _for162_update:
10582  481F FA FD FF      lea d, [bp + -3] ; $i
10583  4822 2A            mov b, [d]
10584  4823 FD 77         inc b
10585  4825 FA FD FF      lea d, [bp + -3] ; $i
10586  4828 FD 43         mov [d], b
10587  482A FD 7D         dec b
10588  482C 0A D8 47      jmp _for162_cond
10589  482F             _for162_exit:
10590  482F             ;; if (repair_cost) { 
10591  482F             _if164_cond:
10592  482F FA FF FF      lea d, [bp + -1] ; $repair_cost
10593  4832 2A            mov b, [d]
10594  4833 C0 00 00      cmp b, 0
10595  4836 C6 25 49      je _if164_exit
10596  4839             _if164_true:
10597  4839             ;; repair_cost = repair_cost + d4; 
10598  4839 FA FF FF      lea d, [bp + -1] ; $repair_cost
10599  483C DA            push d
10600  483D FA FF FF      lea d, [bp + -1] ; $repair_cost
10601  4840 2A            mov b, [d]
10602  4841             ; START TERMS
10603  4841 D7            push a
10604  4842 11            mov a, b
10605  4843 3B B7 62      mov d, _d4 ; $d4
10606  4846 2A            mov b, [d]
10607  4847 56            add b, a
10608  4848 E4            pop a
10609  4849             ; END TERMS
10610  4849 E7            pop d
10611  484A FD 43         mov [d], b
10612  484C             ;; if (repair_cost >= 100) 
10613  484C             _if165_cond:
10614  484C FA FF FF      lea d, [bp + -1] ; $repair_cost
10615  484F 2A            mov b, [d]
10616  4850             ; START RELATIONAL
10617  4850 D7            push a
10618  4851 11            mov a, b
10619  4852 26 64 00      mov b, $64
10620  4855 B0            cmp a, b
10621  4856 FD 80         sge ; >=
10622  4858 E4            pop a
10623  4859             ; END RELATIONAL
10624  4859 C0 00 00      cmp b, 0
10625  485C C6 6C 48      je _if165_exit
10626  485F             _if165_true:
10627  485F             ;; repair_cost = 90;	/* 0.9 */ 
10628  485F FA FF FF      lea d, [bp + -1] ; $repair_cost
10629  4862 DA            push d
10630  4863 26 5A 00      mov b, $5a
10631  4866 E7            pop d
10632  4867 FD 43         mov [d], b
10633  4869 0A 6C 48      jmp _if165_exit
10634  486C             _if165_exit:
10635  486C             ;; printf("\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? ", print100(repair_cost)); 
10636  486C FA FF FF      lea d, [bp + -1] ; $repair_cost
10637  486F 2A            mov b, [d]
10638  4870 FD AB         swp b
10639  4872 D8            push b
10640  4873 07 6C 20      call print100
10641  4876 51 02 00      add sp, 2
10642  4879 FD AB         swp b
10643  487B D8            push b
10644  487C 26 76 70      mov b, _s121 ; "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? "
10645  487F FD AB         swp b
10646  4881 D8            push b
10647  4882 07 BA 07      call printf
10648  4885 51 04 00      add sp, 4
10649  4888             ;; if (yesno()) { 
10650  4888             _if166_cond:
10651  4888 07 60 1E      call yesno
10652  488B C0 00 00      cmp b, 0
10653  488E C6 20 49      je _if166_exit
10654  4891             _if166_true:
10655  4891             ;; for (i = 1; i <= 8; i++) 
10656  4891             _for167_init:
10657  4891 FA FD FF      lea d, [bp + -3] ; $i
10658  4894 DA            push d
10659  4895 26 01 00      mov b, $1
10660  4898 E7            pop d
10661  4899 FD 43         mov [d], b
10662  489B             _for167_cond:
10663  489B FA FD FF      lea d, [bp + -3] ; $i
10664  489E 2A            mov b, [d]
10665  489F             ; START RELATIONAL
10666  489F D7            push a
10667  48A0 11            mov a, b
10668  48A1 26 08 00      mov b, $8
10669  48A4 B0            cmp a, b
10670  48A5 FD 74         sle ; <= (signed)
10671  48A7 E4            pop a
10672  48A8             ; END RELATIONAL
10673  48A8 C0 00 00      cmp b, 0
10674  48AB C6 F6 48      je _for167_exit
10675  48AE             _for167_block:
10676  48AE             ;; if (damage[i] < 0) 
10677  48AE             _if168_cond:
10678  48AE 3B A5 62      mov d, _damage_data ; $damage
10679  48B1 D7            push a
10680  48B2 DA            push d
10681  48B3 FA FD FF      lea d, [bp + -3] ; $i
10682  48B6 2A            mov b, [d]
10683  48B7 E7            pop d
10684  48B8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10685  48BC E4            pop a
10686  48BD 2A            mov b, [d]
10687  48BE             ; START RELATIONAL
10688  48BE D7            push a
10689  48BF 11            mov a, b
10690  48C0 26 00 00      mov b, $0
10691  48C3 B0            cmp a, b
10692  48C4 FD 73         slt ; < (signed)
10693  48C6 E4            pop a
10694  48C7             ; END RELATIONAL
10695  48C7 C0 00 00      cmp b, 0
10696  48CA C6 E6 48      je _if168_exit
10697  48CD             _if168_true:
10698  48CD             ;; damage[i] = 0; 
10699  48CD 3B A5 62      mov d, _damage_data ; $damage
10700  48D0 D7            push a
10701  48D1 DA            push d
10702  48D2 FA FD FF      lea d, [bp + -3] ; $i
10703  48D5 2A            mov b, [d]
10704  48D6 E7            pop d
10705  48D7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10706  48DB E4            pop a
10707  48DC DA            push d
10708  48DD 26 00 00      mov b, $0
10709  48E0 E7            pop d
10710  48E1 FD 43         mov [d], b
10711  48E3 0A E6 48      jmp _if168_exit
10712  48E6             _if168_exit:
10713  48E6             _for167_update:
10714  48E6 FA FD FF      lea d, [bp + -3] ; $i
10715  48E9 2A            mov b, [d]
10716  48EA FD 77         inc b
10717  48EC FA FD FF      lea d, [bp + -3] ; $i
10718  48EF FD 43         mov [d], b
10719  48F1 FD 7D         dec b
10720  48F3 0A 9B 48      jmp _for167_cond
10721  48F6             _for167_exit:
10722  48F6             ;; stardate = stardate + (repair_cost + 5)/10 + 1; 
10723  48F6 3B BD 62      mov d, _stardate ; $stardate
10724  48F9 DA            push d
10725  48FA 3B BD 62      mov d, _stardate ; $stardate
10726  48FD 2A            mov b, [d]
10727  48FE             ; START TERMS
10728  48FE D7            push a
10729  48FF 11            mov a, b
10730  4900 FA FF FF      lea d, [bp + -1] ; $repair_cost
10731  4903 2A            mov b, [d]
10732  4904             ; START TERMS
10733  4904 D7            push a
10734  4905 11            mov a, b
10735  4906 26 05 00      mov b, $5
10736  4909 56            add b, a
10737  490A E4            pop a
10738  490B             ; END TERMS
10739  490B             ; START FACTORS
10740  490B D7            push a
10741  490C 11            mov a, b
10742  490D 26 0A 00      mov b, $a
10743  4910 AE            div a, b
10744  4911 27            mov b, a
10745  4912 E4            pop a
10746  4913             ; END FACTORS
10747  4913 56            add b, a
10748  4914 11            mov a, b
10749  4915 26 01 00      mov b, $1
10750  4918 56            add b, a
10751  4919 E4            pop a
10752  491A             ; END TERMS
10753  491A E7            pop d
10754  491B FD 43         mov [d], b
10755  491D 0A 20 49      jmp _if166_exit
10756  4920             _if166_exit:
10757  4920             ;; return; 
10758  4920 F9            leave
10759  4921 09            ret
10760  4922 0A 25 49      jmp _if164_exit
10761  4925             _if164_exit:
10762  4925 0A 28 49      jmp _if161_exit
10763  4928             _if161_exit:
10764  4928             ;; if (damage[6] < 0) 
10765  4928             _if169_cond:
10766  4928 3B A5 62      mov d, _damage_data ; $damage
10767  492B D7            push a
10768  492C DA            push d
10769  492D 26 06 00      mov b, $6
10770  4930 E7            pop d
10771  4931 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10772  4935 E4            pop a
10773  4936 2A            mov b, [d]
10774  4937             ; START RELATIONAL
10775  4937 D7            push a
10776  4938 11            mov a, b
10777  4939 26 00 00      mov b, $0
10778  493C B0            cmp a, b
10779  493D FD 73         slt ; < (signed)
10780  493F E4            pop a
10781  4940             ; END RELATIONAL
10782  4940 C0 00 00      cmp b, 0
10783  4943 C6 4B 49      je _if169_exit
10784  4946             _if169_true:
10785  4946             ;; return; 
10786  4946 F9            leave
10787  4947 09            ret
10788  4948 0A 4B 49      jmp _if169_exit
10789  494B             _if169_exit:
10790  494B             ;; puts("Device            State of Repair"); 
10791  494B 26 04 71      mov b, _s122 ; "Device            State of Repair"
10792  494E FD AB         swp b
10793  4950 D8            push b
10794  4951 07 4A 15      call puts
10795  4954 51 02 00      add sp, 2
10796  4957             ;; for (i = 1; i <= 8; i++) 
10797  4957             _for170_init:
10798  4957 FA FD FF      lea d, [bp + -3] ; $i
10799  495A DA            push d
10800  495B 26 01 00      mov b, $1
10801  495E E7            pop d
10802  495F FD 43         mov [d], b
10803  4961             _for170_cond:
10804  4961 FA FD FF      lea d, [bp + -3] ; $i
10805  4964 2A            mov b, [d]
10806  4965             ; START RELATIONAL
10807  4965 D7            push a
10808  4966 11            mov a, b
10809  4967 26 08 00      mov b, $8
10810  496A B0            cmp a, b
10811  496B FD 74         sle ; <= (signed)
10812  496D E4            pop a
10813  496E             ; END RELATIONAL
10814  496E C0 00 00      cmp b, 0
10815  4971 C6 BC 49      je _for170_exit
10816  4974             _for170_block:
10817  4974             ;; printf("%-25s%6s\n", get_device_name(i), print100(damage[i])); 
10818  4974 3B A5 62      mov d, _damage_data ; $damage
10819  4977 D7            push a
10820  4978 DA            push d
10821  4979 FA FD FF      lea d, [bp + -3] ; $i
10822  497C 2A            mov b, [d]
10823  497D E7            pop d
10824  497E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10825  4982 E4            pop a
10826  4983 2A            mov b, [d]
10827  4984 FD AB         swp b
10828  4986 D8            push b
10829  4987 07 6C 20      call print100
10830  498A 51 02 00      add sp, 2
10831  498D FD AB         swp b
10832  498F D8            push b
10833  4990 FA FD FF      lea d, [bp + -3] ; $i
10834  4993 2A            mov b, [d]
10835  4994 FD AB         swp b
10836  4996 D8            push b
10837  4997 07 5C 5E      call get_device_name
10838  499A 51 02 00      add sp, 2
10839  499D FD AB         swp b
10840  499F D8            push b
10841  49A0 26 26 71      mov b, _s123 ; "%-25s%6s\n"
10842  49A3 FD AB         swp b
10843  49A5 D8            push b
10844  49A6 07 BA 07      call printf
10845  49A9 51 06 00      add sp, 6
10846  49AC             _for170_update:
10847  49AC FA FD FF      lea d, [bp + -3] ; $i
10848  49AF 2A            mov b, [d]
10849  49B0 FD 77         inc b
10850  49B2 FA FD FF      lea d, [bp + -3] ; $i
10851  49B5 FD 43         mov [d], b
10852  49B7 FD 7D         dec b
10853  49B9 0A 61 49      jmp _for170_cond
10854  49BC             _for170_exit:
10855  49BC             ;; printf("\n"); 
10856  49BC 26 30 71      mov b, _s124 ; "\n"
10857  49BF FD AB         swp b
10858  49C1 D8            push b
10859  49C2 07 BA 07      call printf
10860  49C5 51 02 00      add sp, 2
10861  49C8 F9            leave
10862  49C9 09            ret
10863  49CA             
10864  49CA             shield_control:
10865  49CA F8 00 00      enter 0 ; (push bp; mov bp, sp)
10866  49CD             ;; int i; 
10867  49CD 52 02 00      sub sp, 2 ; i
10868  49D0             ;; if (inoperable(7)) 
10869  49D0             _if171_cond:
10870  49D0 26 07 00      mov b, $7
10871  49D3 DD            push bl
10872  49D4 07 BE 20      call inoperable
10873  49D7 51 01 00      add sp, 1
10874  49DA C0 00 00      cmp b, 0
10875  49DD C6 E5 49      je _if171_exit
10876  49E0             _if171_true:
10877  49E0             ;; return; 
10878  49E0 F9            leave
10879  49E1 09            ret
10880  49E2 0A E5 49      jmp _if171_exit
10881  49E5             _if171_exit:
10882  49E5             ;; printf("Energy available = %d\n\n Input number of units to shields: ", energy + shield); 
10883  49E5 3B E3 61      mov d, _energy ; $energy
10884  49E8 2A            mov b, [d]
10885  49E9             ; START TERMS
10886  49E9 D7            push a
10887  49EA 11            mov a, b
10888  49EB 3B 9E 62      mov d, _shield ; $shield
10889  49EE 2A            mov b, [d]
10890  49EF 56            add b, a
10891  49F0 E4            pop a
10892  49F1             ; END TERMS
10893  49F1 FD AB         swp b
10894  49F3 D8            push b
10895  49F4 26 32 71      mov b, _s125 ; "Energy available = %d\n\n Input number of units to shields: "
10896  49F7 FD AB         swp b
10897  49F9 D8            push b
10898  49FA 07 BA 07      call printf
10899  49FD 51 04 00      add sp, 4
10900  4A00             ;; i = input_int(); 
10901  4A00 FA FF FF      lea d, [bp + -1] ; $i
10902  4A03 DA            push d
10903  4A04 07 22 20      call input_int
10904  4A07 E7            pop d
10905  4A08 FD 43         mov [d], b
10906  4A0A             ;; if (i < 0 || shield == i) { 
10907  4A0A             _if172_cond:
10908  4A0A FA FF FF      lea d, [bp + -1] ; $i
10909  4A0D 2A            mov b, [d]
10910  4A0E             ; START RELATIONAL
10911  4A0E D7            push a
10912  4A0F 11            mov a, b
10913  4A10 26 00 00      mov b, $0
10914  4A13 B0            cmp a, b
10915  4A14 FD 73         slt ; < (signed)
10916  4A16 E4            pop a
10917  4A17             ; END RELATIONAL
10918  4A17             ; START LOGICAL OR
10919  4A17 D7            push a
10920  4A18 11            mov a, b
10921  4A19 3B 9E 62      mov d, _shield ; $shield
10922  4A1C 2A            mov b, [d]
10923  4A1D             ; START RELATIONAL
10924  4A1D D7            push a
10925  4A1E 11            mov a, b
10926  4A1F FA FF FF      lea d, [bp + -1] ; $i
10927  4A22 2A            mov b, [d]
10928  4A23 B0            cmp a, b
10929  4A24 FD 71         seq ; ==
10930  4A26 E4            pop a
10931  4A27             ; END RELATIONAL
10932  4A27 FD A8         sor a, b ; ||
10933  4A29 E4            pop a
10934  4A2A             ; END LOGICAL OR
10935  4A2A C0 00 00      cmp b, 0
10936  4A2D C6 41 4A      je _if172_exit
10937  4A30             _if172_true:
10938  4A30             ;; puts("<Shields Unchanged>\n"); 
10939  4A30 26 6D 71      mov b, _s126 ; "<Shields Unchanged>\n"
10940  4A33 FD AB         swp b
10941  4A35 D8            push b
10942  4A36 07 4A 15      call puts
10943  4A39 51 02 00      add sp, 2
10944  4A3C             ;; return; 
10945  4A3C F9            leave
10946  4A3D 09            ret
10947  4A3E 0A 41 4A      jmp _if172_exit
10948  4A41             _if172_exit:
10949  4A41             ;; if (i >= energy + shield) { 
10950  4A41             _if173_cond:
10951  4A41 FA FF FF      lea d, [bp + -1] ; $i
10952  4A44 2A            mov b, [d]
10953  4A45             ; START RELATIONAL
10954  4A45 D7            push a
10955  4A46 11            mov a, b
10956  4A47 3B E3 61      mov d, _energy ; $energy
10957  4A4A 2A            mov b, [d]
10958  4A4B             ; START TERMS
10959  4A4B D7            push a
10960  4A4C 11            mov a, b
10961  4A4D 3B 9E 62      mov d, _shield ; $shield
10962  4A50 2A            mov b, [d]
10963  4A51 56            add b, a
10964  4A52 E4            pop a
10965  4A53             ; END TERMS
10966  4A53 B0            cmp a, b
10967  4A54 FD 80         sge ; >=
10968  4A56 E4            pop a
10969  4A57             ; END RELATIONAL
10970  4A57 C0 00 00      cmp b, 0
10971  4A5A C6 6C 4A      je _if173_exit
10972  4A5D             _if173_true:
10973  4A5D             ;; puts("Shield Control Reports:\n  This is not the Federation Treasury."); 
10974  4A5D 26 82 71      mov b, _s127 ; "Shield Control Reports:\n  This is not the Federation Treasury."
10975  4A60 FD AB         swp b
10976  4A62 D8            push b
10977  4A63 07 4A 15      call puts
10978  4A66 51 02 00      add sp, 2
10979  4A69 0A 6C 4A      jmp _if173_exit
10980  4A6C             _if173_exit:
10981  4A6C             ;; energy = energy + shield - i; 
10982  4A6C 3B E3 61      mov d, _energy ; $energy
10983  4A6F DA            push d
10984  4A70 3B E3 61      mov d, _energy ; $energy
10985  4A73 2A            mov b, [d]
10986  4A74             ; START TERMS
10987  4A74 D7            push a
10988  4A75 11            mov a, b
10989  4A76 3B 9E 62      mov d, _shield ; $shield
10990  4A79 2A            mov b, [d]
10991  4A7A 56            add b, a
10992  4A7B 11            mov a, b
10993  4A7C FA FF FF      lea d, [bp + -1] ; $i
10994  4A7F 2A            mov b, [d]
10995  4A80 60            sub a, b
10996  4A81 27            mov b, a
10997  4A82 E4            pop a
10998  4A83             ; END TERMS
10999  4A83 E7            pop d
11000  4A84 FD 43         mov [d], b
11001  4A86             ;; shield = i; 
11002  4A86 3B 9E 62      mov d, _shield ; $shield
11003  4A89 DA            push d
11004  4A8A FA FF FF      lea d, [bp + -1] ; $i
11005  4A8D 2A            mov b, [d]
11006  4A8E E7            pop d
11007  4A8F FD 43         mov [d], b
11008  4A91             ;; printf("Deflector Control Room report:\n  Shields now at %d units per your command.\n\n", shield); 
11009  4A91 3B 9E 62      mov d, _shield ; $shield
11010  4A94 2A            mov b, [d]
11011  4A95 FD AB         swp b
11012  4A97 D8            push b
11013  4A98 26 C1 71      mov b, _s128 ; "Deflector Control Room report:\n  Shields now at %d units per your command.\n\n"
11014  4A9B FD AB         swp b
11015  4A9D D8            push b
11016  4A9E 07 BA 07      call printf
11017  4AA1 51 04 00      add sp, 4
11018  4AA4 F9            leave
11019  4AA5 09            ret
11020  4AA6             
11021  4AA6             library_computer:
11022  4AA6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11023  4AA9             ;; if (inoperable(8)) 
11024  4AA9             _if174_cond:
11025  4AA9 26 08 00      mov b, $8
11026  4AAC DD            push bl
11027  4AAD 07 BE 20      call inoperable
11028  4AB0 51 01 00      add sp, 1
11029  4AB3 C0 00 00      cmp b, 0
11030  4AB6 C6 BE 4A      je _if174_exit
11031  4AB9             _if174_true:
11032  4AB9             ;; return; 
11033  4AB9 F9            leave
11034  4ABA 09            ret
11035  4ABB 0A BE 4A      jmp _if174_exit
11036  4ABE             _if174_exit:
11037  4ABE             ;; puts("Computer active and awating command: "); 
11038  4ABE 26 0E 72      mov b, _s129 ; "Computer active and awating command: "
11039  4AC1 FD AB         swp b
11040  4AC3 D8            push b
11041  4AC4 07 4A 15      call puts
11042  4AC7 51 02 00      add sp, 2
11043  4ACA             ;; switch(input_int()) { 
11044  4ACA             _switch175_expr:
11045  4ACA 07 22 20      call input_int
11046  4ACD             _switch175_comparisons:
11047  4ACD C0 FF FF      cmp b, -1
11048  4AD0 C6 FD 4A      je _switch175_case0
11049  4AD3 C0 00 00      cmp b, 0
11050  4AD6 C6 00 4B      je _switch175_case1
11051  4AD9 C0 01 00      cmp b, 1
11052  4ADC C6 06 4B      je _switch175_case2
11053  4ADF C0 02 00      cmp b, 2
11054  4AE2 C6 0C 4B      je _switch175_case3
11055  4AE5 C0 03 00      cmp b, 3
11056  4AE8 C6 12 4B      je _switch175_case4
11057  4AEB C0 04 00      cmp b, 4
11058  4AEE C6 18 4B      je _switch175_case5
11059  4AF1 C0 05 00      cmp b, 5
11060  4AF4 C6 1E 4B      je _switch175_case6
11061  4AF7 0A 24 4B      jmp _switch175_default
11062  4AFA 0A 78 4B      jmp _switch175_exit
11063  4AFD             _switch175_case0:
11064  4AFD             ;; break; 
11065  4AFD 0A 78 4B      jmp _switch175_exit ; case break
11066  4B00             _switch175_case1:
11067  4B00             ;; galactic_record(); 
11068  4B00 07 7A 4B      call galactic_record
11069  4B03             ;; break; 
11070  4B03 0A 78 4B      jmp _switch175_exit ; case break
11071  4B06             _switch175_case2:
11072  4B06             ;; status_report(); 
11073  4B06 07 A2 4C      call status_report
11074  4B09             ;; break; 
11075  4B09 0A 78 4B      jmp _switch175_exit ; case break
11076  4B0C             _switch175_case3:
11077  4B0C             ;; torpedo_data(); 
11078  4B0C 07 BB 4D      call torpedo_data
11079  4B0F             ;; break; 
11080  4B0F 0A 78 4B      jmp _switch175_exit ; case break
11081  4B12             _switch175_case4:
11082  4B12             ;; nav_data(); 
11083  4B12 07 C7 4E      call nav_data
11084  4B15             ;; break; 
11085  4B15 0A 78 4B      jmp _switch175_exit ; case break
11086  4B18             _switch175_case5:
11087  4B18             ;; dirdist_calc(); 
11088  4B18 07 2A 4F      call dirdist_calc
11089  4B1B             ;; break; 
11090  4B1B 0A 78 4B      jmp _switch175_exit ; case break
11091  4B1E             _switch175_case6:
11092  4B1E             ;; galaxy_map(); 
11093  4B1E 07 AF 50      call galaxy_map
11094  4B21             ;; break; 
11095  4B21 0A 78 4B      jmp _switch175_exit ; case break
11096  4B24             _switch175_default:
11097  4B24             ;; puts("Functions available from Library-Computer:\n\n"); 
11098  4B24 26 34 72      mov b, _s130 ; "Functions available from Library-Computer:\n\n"
11099  4B27 FD AB         swp b
11100  4B29 D8            push b
11101  4B2A 07 4A 15      call puts
11102  4B2D 51 02 00      add sp, 2
11103  4B30             ;; puts("   0 = Cumulative Galactic Record\n"); 
11104  4B30 26 61 72      mov b, _s131 ; "   0 = Cumulative Galactic Record\n"
11105  4B33 FD AB         swp b
11106  4B35 D8            push b
11107  4B36 07 4A 15      call puts
11108  4B39 51 02 00      add sp, 2
11109  4B3C             ;; puts("   1 = Status Report\n"); 
11110  4B3C 26 84 72      mov b, _s132 ; "   1 = Status Report\n"
11111  4B3F FD AB         swp b
11112  4B41 D8            push b
11113  4B42 07 4A 15      call puts
11114  4B45 51 02 00      add sp, 2
11115  4B48             ;; puts("   2 = Photon Torpedo Data\n"); 
11116  4B48 26 9A 72      mov b, _s133 ; "   2 = Photon Torpedo Data\n"
11117  4B4B FD AB         swp b
11118  4B4D D8            push b
11119  4B4E 07 4A 15      call puts
11120  4B51 51 02 00      add sp, 2
11121  4B54             ;; puts("   3 = Starbase Nav Data\n"); 
11122  4B54 26 B6 72      mov b, _s134 ; "   3 = Starbase Nav Data\n"
11123  4B57 FD AB         swp b
11124  4B59 D8            push b
11125  4B5A 07 4A 15      call puts
11126  4B5D 51 02 00      add sp, 2
11127  4B60             ;; puts("   4 = Direction/Distance Calculator\n"); 
11128  4B60 26 D0 72      mov b, _s135 ; "   4 = Direction/Distance Calculator\n"
11129  4B63 FD AB         swp b
11130  4B65 D8            push b
11131  4B66 07 4A 15      call puts
11132  4B69 51 02 00      add sp, 2
11133  4B6C             ;; puts("   5 = Galaxy Region Name Map\n"); 
11134  4B6C 26 F6 72      mov b, _s136 ; "   5 = Galaxy Region Name Map\n"
11135  4B6F FD AB         swp b
11136  4B71 D8            push b
11137  4B72 07 4A 15      call puts
11138  4B75 51 02 00      add sp, 2
11139  4B78             _switch175_exit:
11140  4B78 F9            leave
11141  4B79 09            ret
11142  4B7A             
11143  4B7A             galactic_record:
11144  4B7A F8 00 00      enter 0 ; (push bp; mov bp, sp)
11145  4B7D             ;; int i, j; 
11146  4B7D 52 02 00      sub sp, 2 ; i
11147  4B80 52 02 00      sub sp, 2 ; j
11148  4B83             ;; printf("\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", quad_y, quad_x); 
11149  4B83 3B 9C 62      mov d, _quad_x ; $quad_x
11150  4B86 2A            mov b, [d]
11151  4B87 FD AB         swp b
11152  4B89 D8            push b
11153  4B8A 3B 9A 62      mov d, _quad_y ; $quad_y
11154  4B8D 2A            mov b, [d]
11155  4B8E FD AB         swp b
11156  4B90 D8            push b
11157  4B91 26 15 73      mov b, _s137 ; "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n"
11158  4B94 FD AB         swp b
11159  4B96 D8            push b
11160  4B97 07 BA 07      call printf
11161  4B9A 51 06 00      add sp, 6
11162  4B9D             ;; puts("     1     2     3     4     5     6     7     8"); 
11163  4B9D 26 4A 73      mov b, _s138 ; "     1     2     3     4     5     6     7     8"
11164  4BA0 FD AB         swp b
11165  4BA2 D8            push b
11166  4BA3 07 4A 15      call puts
11167  4BA6 51 02 00      add sp, 2
11168  4BA9             ;; for (i = 1; i <= 8; i++) { 
11169  4BA9             _for176_init:
11170  4BA9 FA FF FF      lea d, [bp + -1] ; $i
11171  4BAC DA            push d
11172  4BAD 26 01 00      mov b, $1
11173  4BB0 E7            pop d
11174  4BB1 FD 43         mov [d], b
11175  4BB3             _for176_cond:
11176  4BB3 FA FF FF      lea d, [bp + -1] ; $i
11177  4BB6 2A            mov b, [d]
11178  4BB7             ; START RELATIONAL
11179  4BB7 D7            push a
11180  4BB8 11            mov a, b
11181  4BB9 26 08 00      mov b, $8
11182  4BBC B0            cmp a, b
11183  4BBD FD 74         sle ; <= (signed)
11184  4BBF E4            pop a
11185  4BC0             ; END RELATIONAL
11186  4BC0 C0 00 00      cmp b, 0
11187  4BC3 C6 8D 4C      je _for176_exit
11188  4BC6             _for176_block:
11189  4BC6             ;; printf("%s%d", gr_1, i); 
11190  4BC6 FA FF FF      lea d, [bp + -1] ; $i
11191  4BC9 2A            mov b, [d]
11192  4BCA FD AB         swp b
11193  4BCC D8            push b
11194  4BCD 3B 3A 64      mov d, _gr_1 ; $gr_1
11195  4BD0 2A            mov b, [d]
11196  4BD1 FD AB         swp b
11197  4BD3 D8            push b
11198  4BD4 26 7B 73      mov b, _s139 ; "%s%d"
11199  4BD7 FD AB         swp b
11200  4BD9 D8            push b
11201  4BDA 07 BA 07      call printf
11202  4BDD 51 06 00      add sp, 6
11203  4BE0             ;; for (j = 1; j <= 8; j++) { 
11204  4BE0             _for177_init:
11205  4BE0 FA FD FF      lea d, [bp + -3] ; $j
11206  4BE3 DA            push d
11207  4BE4 26 01 00      mov b, $1
11208  4BE7 E7            pop d
11209  4BE8 FD 43         mov [d], b
11210  4BEA             _for177_cond:
11211  4BEA FA FD FF      lea d, [bp + -3] ; $j
11212  4BED 2A            mov b, [d]
11213  4BEE             ; START RELATIONAL
11214  4BEE D7            push a
11215  4BEF 11            mov a, b
11216  4BF0 26 08 00      mov b, $8
11217  4BF3 B0            cmp a, b
11218  4BF4 FD 74         sle ; <= (signed)
11219  4BF6 E4            pop a
11220  4BF7             ; END RELATIONAL
11221  4BF7 C0 00 00      cmp b, 0
11222  4BFA C6 73 4C      je _for177_exit
11223  4BFD             _for177_block:
11224  4BFD             ;; printf("   "); 
11225  4BFD 26 AB 65      mov b, _s25 ; "   "
11226  4C00 FD AB         swp b
11227  4C02 D8            push b
11228  4C03 07 BA 07      call printf
11229  4C06 51 02 00      add sp, 2
11230  4C09             ;; if (map[i][j] &   0x1000		/* Set if this sector was mapped */          ) 
11231  4C09             _if178_cond:
11232  4C09 3B E7 61      mov d, _map_data ; $map
11233  4C0C D7            push a
11234  4C0D DA            push d
11235  4C0E FA FF FF      lea d, [bp + -1] ; $i
11236  4C11 2A            mov b, [d]
11237  4C12 E7            pop d
11238  4C13 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11239  4C17 DA            push d
11240  4C18 FA FD FF      lea d, [bp + -3] ; $j
11241  4C1B 2A            mov b, [d]
11242  4C1C E7            pop d
11243  4C1D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11244  4C21 E4            pop a
11245  4C22 2A            mov b, [d]
11246  4C23 D7            push a
11247  4C24 11            mov a, b
11248  4C25 26 00 10      mov b, $1000
11249  4C28 FD 92         and b, a ; &
11250  4C2A E4            pop a
11251  4C2B C0 00 00      cmp b, 0
11252  4C2E C6 57 4C      je _if178_else
11253  4C31             _if178_true:
11254  4C31             ;; putbcd(map[i][j]); 
11255  4C31 3B E7 61      mov d, _map_data ; $map
11256  4C34 D7            push a
11257  4C35 DA            push d
11258  4C36 FA FF FF      lea d, [bp + -1] ; $i
11259  4C39 2A            mov b, [d]
11260  4C3A E7            pop d
11261  4C3B FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11262  4C3F DA            push d
11263  4C40 FA FD FF      lea d, [bp + -3] ; $j
11264  4C43 2A            mov b, [d]
11265  4C44 E7            pop d
11266  4C45 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11267  4C49 E4            pop a
11268  4C4A 2A            mov b, [d]
11269  4C4B FD AB         swp b
11270  4C4D D8            push b
11271  4C4E 07 0E 3A      call putbcd
11272  4C51 51 02 00      add sp, 2
11273  4C54 0A 63 4C      jmp _if178_exit
11274  4C57             _if178_else:
11275  4C57             ;; printf("***"); 
11276  4C57 26 6E 6D      mov b, _s97 ; "***"
11277  4C5A FD AB         swp b
11278  4C5C D8            push b
11279  4C5D 07 BA 07      call printf
11280  4C60 51 02 00      add sp, 2
11281  4C63             _if178_exit:
11282  4C63             _for177_update:
11283  4C63 FA FD FF      lea d, [bp + -3] ; $j
11284  4C66 2A            mov b, [d]
11285  4C67 FD 77         inc b
11286  4C69 FA FD FF      lea d, [bp + -3] ; $j
11287  4C6C FD 43         mov [d], b
11288  4C6E FD 7D         dec b
11289  4C70 0A EA 4B      jmp _for177_cond
11290  4C73             _for177_exit:
11291  4C73             ;; putchar('\n'); 
11292  4C73 26 0A 00      mov b, $a
11293  4C76 DD            push bl
11294  4C77 07 14 15      call putchar
11295  4C7A 51 01 00      add sp, 1
11296  4C7D             _for176_update:
11297  4C7D FA FF FF      lea d, [bp + -1] ; $i
11298  4C80 2A            mov b, [d]
11299  4C81 FD 77         inc b
11300  4C83 FA FF FF      lea d, [bp + -1] ; $i
11301  4C86 FD 43         mov [d], b
11302  4C88 FD 7D         dec b
11303  4C8A 0A B3 4B      jmp _for176_cond
11304  4C8D             _for176_exit:
11305  4C8D             ;; printf("%s\n", gr_1); 
11306  4C8D 3B 3A 64      mov d, _gr_1 ; $gr_1
11307  4C90 2A            mov b, [d]
11308  4C91 FD AB         swp b
11309  4C93 D8            push b
11310  4C94 26 75 6D      mov b, _s99 ; "%s\n"
11311  4C97 FD AB         swp b
11312  4C99 D8            push b
11313  4C9A 07 BA 07      call printf
11314  4C9D 51 04 00      add sp, 4
11315  4CA0 F9            leave
11316  4CA1 09            ret
11317  4CA2             
11318  4CA2             status_report:
11319  4CA2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11320  4CA5             ;; char *plural; 
11321  4CA5 52 02 00      sub sp, 2 ; plural
11322  4CA8             ;; plural = str_s + 1; 
11323  4CA8 FA FF FF      lea d, [bp + -1] ; $plural
11324  4CAB DA            push d
11325  4CAC 3B 3E 64      mov d, _str_s ; $str_s
11326  4CAF 2A            mov b, [d]
11327  4CB0             ; START TERMS
11328  4CB0 D7            push a
11329  4CB1 11            mov a, b
11330  4CB2 26 01 00      mov b, $1
11331  4CB5 56            add b, a
11332  4CB6 E4            pop a
11333  4CB7             ; END TERMS
11334  4CB7 E7            pop d
11335  4CB8 FD 43         mov [d], b
11336  4CBA             ;; unsigned int        left; 
11337  4CBA 52 02 00      sub sp, 2 ; left
11338  4CBD             ;; left = TO_FIXED(time_start + time_up) - stardate; 
11339  4CBD FA FD FF      lea d, [bp + -3] ; $left
11340  4CC0 DA            push d
11341  4CC1 3B A1 62      mov d, _time_start ; $time_start
11342  4CC4 2A            mov b, [d]
11343  4CC5             ; START TERMS
11344  4CC5 D7            push a
11345  4CC6 11            mov a, b
11346  4CC7 3B A3 62      mov d, _time_up ; $time_up
11347  4CCA 2A            mov b, [d]
11348  4CCB 56            add b, a
11349  4CCC E4            pop a
11350  4CCD             ; END TERMS
11351  4CCD FD AB         swp b
11352  4CCF D8            push b
11353  4CD0 07 34 1D      call TO_FIXED
11354  4CD3 51 02 00      add sp, 2
11355  4CD6             ; START TERMS
11356  4CD6 D7            push a
11357  4CD7 11            mov a, b
11358  4CD8 3B BD 62      mov d, _stardate ; $stardate
11359  4CDB 2A            mov b, [d]
11360  4CDC 60            sub a, b
11361  4CDD 27            mov b, a
11362  4CDE E4            pop a
11363  4CDF             ; END TERMS
11364  4CDF E7            pop d
11365  4CE0 FD 43         mov [d], b
11366  4CE2             ;; puts("   Status Report:\n"); 
11367  4CE2 26 80 73      mov b, _s140 ; "   Status Report:\n"
11368  4CE5 FD AB         swp b
11369  4CE7 D8            push b
11370  4CE8 07 4A 15      call puts
11371  4CEB 51 02 00      add sp, 2
11372  4CEE             ;; if (klingons_left > 1) 
11373  4CEE             _if179_cond:
11374  4CEE 3B 97 62      mov d, _klingons_left ; $klingons_left
11375  4CF1 32            mov bl, [d]
11376  4CF2 A7 00         mov bh, 0
11377  4CF4             ; START RELATIONAL
11378  4CF4 D7            push a
11379  4CF5 11            mov a, b
11380  4CF6 26 01 00      mov b, $1
11381  4CF9 B0            cmp a, b
11382  4CFA FD 81         sgu ; > (unsigned)
11383  4CFC E4            pop a
11384  4CFD             ; END RELATIONAL
11385  4CFD C0 00 00      cmp b, 0
11386  4D00 C6 11 4D      je _if179_exit
11387  4D03             _if179_true:
11388  4D03             ;; plural = str_s; 
11389  4D03 FA FF FF      lea d, [bp + -1] ; $plural
11390  4D06 DA            push d
11391  4D07 3B 3E 64      mov d, _str_s ; $str_s
11392  4D0A 2A            mov b, [d]
11393  4D0B E7            pop d
11394  4D0C FD 43         mov [d], b
11395  4D0E 0A 11 4D      jmp _if179_exit
11396  4D11             _if179_exit:
11397  4D11             ;; printf("Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 
11398  4D11 FA FD FF      lea d, [bp + -3] ; $left
11399  4D14 2A            mov b, [d]
11400  4D15             ; START FACTORS
11401  4D15 D7            push a
11402  4D16 11            mov a, b
11403  4D17 26 0A 00      mov b, $a
11404  4D1A AE            div a, b ; 
11405  4D1B 11            mov a, b
11406  4D1C 27            mov b, a
11407  4D1D E4            pop a
11408  4D1E             ; END FACTORS
11409  4D1E FD AB         swp b
11410  4D20 D8            push b
11411  4D21 FA FD FF      lea d, [bp + -3] ; $left
11412  4D24 2A            mov b, [d]
11413  4D25 FD AB         swp b
11414  4D27 D8            push b
11415  4D28 07 46 1D      call FROM_FIXED
11416  4D2B 51 02 00      add sp, 2
11417  4D2E FD AB         swp b
11418  4D30 D8            push b
11419  4D31 3B 97 62      mov d, _klingons_left ; $klingons_left
11420  4D34 32            mov bl, [d]
11421  4D35 A7 00         mov bh, 0
11422  4D37 DD            push bl
11423  4D38 FA FF FF      lea d, [bp + -1] ; $plural
11424  4D3B 2A            mov b, [d]
11425  4D3C FD AB         swp b
11426  4D3E D8            push b
11427  4D3F 26 93 73      mov b, _s141 ; "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n"
11428  4D42 FD AB         swp b
11429  4D44 D8            push b
11430  4D45 07 BA 07      call printf
11431  4D48 51 09 00      add sp, 9
11432  4D4B             ;; if (starbases_left < 1) { 
11433  4D4B             _if180_cond:
11434  4D4B 3B C2 61      mov d, _starbases_left ; $starbases_left
11435  4D4E 32            mov bl, [d]
11436  4D4F A7 00         mov bh, 0
11437  4D51             ; START RELATIONAL
11438  4D51 D7            push a
11439  4D52 11            mov a, b
11440  4D53 26 01 00      mov b, $1
11441  4D56 B0            cmp a, b
11442  4D57 FD 73         slt ; < (signed)
11443  4D59 E4            pop a
11444  4D5A             ; END RELATIONAL
11445  4D5A C0 00 00      cmp b, 0
11446  4D5D C6 6F 4D      je _if180_else
11447  4D60             _if180_true:
11448  4D60             ;; puts("Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"); 
11449  4D60 26 D5 73      mov b, _s142 ; "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"
11450  4D63 FD AB         swp b
11451  4D65 D8            push b
11452  4D66 07 4A 15      call puts
11453  4D69 51 02 00      add sp, 2
11454  4D6C 0A B9 4D      jmp _if180_exit
11455  4D6F             _if180_else:
11456  4D6F             ;; plural = str_s; 
11457  4D6F FA FF FF      lea d, [bp + -1] ; $plural
11458  4D72 DA            push d
11459  4D73 3B 3E 64      mov d, _str_s ; $str_s
11460  4D76 2A            mov b, [d]
11461  4D77 E7            pop d
11462  4D78 FD 43         mov [d], b
11463  4D7A             ;; if (starbases_left < 2) 
11464  4D7A             _if181_cond:
11465  4D7A 3B C2 61      mov d, _starbases_left ; $starbases_left
11466  4D7D 32            mov bl, [d]
11467  4D7E A7 00         mov bh, 0
11468  4D80             ; START RELATIONAL
11469  4D80 D7            push a
11470  4D81 11            mov a, b
11471  4D82 26 02 00      mov b, $2
11472  4D85 B0            cmp a, b
11473  4D86 FD 73         slt ; < (signed)
11474  4D88 E4            pop a
11475  4D89             ; END RELATIONAL
11476  4D89 C0 00 00      cmp b, 0
11477  4D8C C6 9F 4D      je _if181_exit
11478  4D8F             _if181_true:
11479  4D8F             ;; plural++; 
11480  4D8F FA FF FF      lea d, [bp + -1] ; $plural
11481  4D92 2A            mov b, [d]
11482  4D93 FD 77         inc b
11483  4D95 FA FF FF      lea d, [bp + -1] ; $plural
11484  4D98 FD 43         mov [d], b
11485  4D9A FD 7D         dec b
11486  4D9C 0A 9F 4D      jmp _if181_exit
11487  4D9F             _if181_exit:
11488  4D9F             ;; printf("The Federation is maintaining %d starbase%s in the galaxy\n\n", starbases_left, plural); 
11489  4D9F FA FF FF      lea d, [bp + -1] ; $plural
11490  4DA2 2A            mov b, [d]
11491  4DA3 FD AB         swp b
11492  4DA5 D8            push b
11493  4DA6 3B C2 61      mov d, _starbases_left ; $starbases_left
11494  4DA9 32            mov bl, [d]
11495  4DAA A7 00         mov bh, 0
11496  4DAC DD            push bl
11497  4DAD 26 2C 74      mov b, _s143 ; "The Federation is maintaining %d starbase%s in the galaxy\n\n"
11498  4DB0 FD AB         swp b
11499  4DB2 D8            push b
11500  4DB3 07 BA 07      call printf
11501  4DB6 51 05 00      add sp, 5
11502  4DB9             _if180_exit:
11503  4DB9 F9            leave
11504  4DBA 09            ret
11505  4DBB             
11506  4DBB             torpedo_data:
11507  4DBB F8 00 00      enter 0 ; (push bp; mov bp, sp)
11508  4DBE             ;; int i; 
11509  4DBE 52 02 00      sub sp, 2 ; i
11510  4DC1             ;; char *plural; 
11511  4DC1 52 02 00      sub sp, 2 ; plural
11512  4DC4             ;; plural = str_s + 1; 
11513  4DC4 FA FD FF      lea d, [bp + -3] ; $plural
11514  4DC7 DA            push d
11515  4DC8 3B 3E 64      mov d, _str_s ; $str_s
11516  4DCB 2A            mov b, [d]
11517  4DCC             ; START TERMS
11518  4DCC D7            push a
11519  4DCD 11            mov a, b
11520  4DCE 26 01 00      mov b, $1
11521  4DD1 56            add b, a
11522  4DD2 E4            pop a
11523  4DD3             ; END TERMS
11524  4DD3 E7            pop d
11525  4DD4 FD 43         mov [d], b
11526  4DD6             ;; struct klingon *k; 
11527  4DD6 52 02 00      sub sp, 2 ; k
11528  4DD9             ;; if (no_klingon()) 
11529  4DD9             _if182_cond:
11530  4DD9 07 FA 3B      call no_klingon
11531  4DDC C0 00 00      cmp b, 0
11532  4DDF C6 E7 4D      je _if182_exit
11533  4DE2             _if182_true:
11534  4DE2             ;; return; 
11535  4DE2 F9            leave
11536  4DE3 09            ret
11537  4DE4 0A E7 4D      jmp _if182_exit
11538  4DE7             _if182_exit:
11539  4DE7             ;; if (klingons > 1) 
11540  4DE7             _if183_cond:
11541  4DE7 3B 95 62      mov d, _klingons ; $klingons
11542  4DEA 32            mov bl, [d]
11543  4DEB A7 00         mov bh, 0
11544  4DED             ; START RELATIONAL
11545  4DED D7            push a
11546  4DEE 11            mov a, b
11547  4DEF 26 01 00      mov b, $1
11548  4DF2 B0            cmp a, b
11549  4DF3 FD 81         sgu ; > (unsigned)
11550  4DF5 E4            pop a
11551  4DF6             ; END RELATIONAL
11552  4DF6 C0 00 00      cmp b, 0
11553  4DF9 C6 0C 4E      je _if183_exit
11554  4DFC             _if183_true:
11555  4DFC             ;; plural--; 
11556  4DFC FA FD FF      lea d, [bp + -3] ; $plural
11557  4DFF 2A            mov b, [d]
11558  4E00 FD 7D         dec b
11559  4E02 FA FD FF      lea d, [bp + -3] ; $plural
11560  4E05 FD 43         mov [d], b
11561  4E07 FD 77         inc b
11562  4E09 0A 0C 4E      jmp _if183_exit
11563  4E0C             _if183_exit:
11564  4E0C             ;; printf("From Enterprise to Klingon battlecriuser%s:\n\n", plural); 
11565  4E0C FA FD FF      lea d, [bp + -3] ; $plural
11566  4E0F 2A            mov b, [d]
11567  4E10 FD AB         swp b
11568  4E12 D8            push b
11569  4E13 26 68 74      mov b, _s144 ; "From Enterprise to Klingon battlecriuser%s:\n\n"
11570  4E16 FD AB         swp b
11571  4E18 D8            push b
11572  4E19 07 BA 07      call printf
11573  4E1C 51 04 00      add sp, 4
11574  4E1F             ;; k = kdata; 
11575  4E1F FA FB FF      lea d, [bp + -5] ; $k
11576  4E22 DA            push d
11577  4E23 3B 89 62      mov d, _kdata_data ; $kdata
11578  4E26 2D            mov b, d
11579  4E27 E7            pop d
11580  4E28 FD 43         mov [d], b
11581  4E2A             ;; for (i = 0; i <= 2; i++) { 
11582  4E2A             _for184_init:
11583  4E2A FA FF FF      lea d, [bp + -1] ; $i
11584  4E2D DA            push d
11585  4E2E 26 00 00      mov b, $0
11586  4E31 E7            pop d
11587  4E32 FD 43         mov [d], b
11588  4E34             _for184_cond:
11589  4E34 FA FF FF      lea d, [bp + -1] ; $i
11590  4E37 2A            mov b, [d]
11591  4E38             ; START RELATIONAL
11592  4E38 D7            push a
11593  4E39 11            mov a, b
11594  4E3A 26 02 00      mov b, $2
11595  4E3D B0            cmp a, b
11596  4E3E FD 74         sle ; <= (signed)
11597  4E40 E4            pop a
11598  4E41             ; END RELATIONAL
11599  4E41 C0 00 00      cmp b, 0
11600  4E44 C6 C5 4E      je _for184_exit
11601  4E47             _for184_block:
11602  4E47             ;; if (k->energy > 0) { 
11603  4E47             _if185_cond:
11604  4E47 FA FB FF      lea d, [bp + -5] ; $k
11605  4E4A FD 2A         mov d, [d]
11606  4E4C 58 02 00      add d, 2
11607  4E4F 2A            mov b, [d]
11608  4E50             ; START RELATIONAL
11609  4E50 D7            push a
11610  4E51 11            mov a, b
11611  4E52 26 00 00      mov b, $0
11612  4E55 B0            cmp a, b
11613  4E56 FD 7F         sgt ; >
11614  4E58 E4            pop a
11615  4E59             ; END RELATIONAL
11616  4E59 C0 00 00      cmp b, 0
11617  4E5C C6 A4 4E      je _if185_exit
11618  4E5F             _if185_true:
11619  4E5F             ;; compute_vector(TO_FIXED00(k->y), 
11620  4E5F 3B BB 62      mov d, _ship_x ; $ship_x
11621  4E62 2A            mov b, [d]
11622  4E63 FD AB         swp b
11623  4E65 D8            push b
11624  4E66 3B B9 62      mov d, _ship_y ; $ship_y
11625  4E69 2A            mov b, [d]
11626  4E6A FD AB         swp b
11627  4E6C D8            push b
11628  4E6D FA FB FF      lea d, [bp + -5] ; $k
11629  4E70 FD 2A         mov d, [d]
11630  4E72 58 01 00      add d, 1
11631  4E75 32            mov bl, [d]
11632  4E76 A7 00         mov bh, 0
11633  4E78 FD AB         swp b
11634  4E7A D8            push b
11635  4E7B 07 57 1D      call TO_FIXED00
11636  4E7E 51 02 00      add sp, 2
11637  4E81 FD AB         swp b
11638  4E83 D8            push b
11639  4E84 FA FB FF      lea d, [bp + -5] ; $k
11640  4E87 FD 2A         mov d, [d]
11641  4E89 58 00 00      add d, 0
11642  4E8C 32            mov bl, [d]
11643  4E8D A7 00         mov bh, 0
11644  4E8F FD AB         swp b
11645  4E91 D8            push b
11646  4E92 07 57 1D      call TO_FIXED00
11647  4E95 51 02 00      add sp, 2
11648  4E98 FD AB         swp b
11649  4E9A D8            push b
11650  4E9B 07 87 52      call compute_vector
11651  4E9E 51 08 00      add sp, 8
11652  4EA1 0A A4 4E      jmp _if185_exit
11653  4EA4             _if185_exit:
11654  4EA4             ;; k++; 
11655  4EA4 FA FB FF      lea d, [bp + -5] ; $k
11656  4EA7 2A            mov b, [d]
11657  4EA8 FD 77         inc b
11658  4EAA FD 77         inc b
11659  4EAC FA FB FF      lea d, [bp + -5] ; $k
11660  4EAF FD 43         mov [d], b
11661  4EB1 FD 7D         dec b
11662  4EB3 FD 7D         dec b
11663  4EB5             _for184_update:
11664  4EB5 FA FF FF      lea d, [bp + -1] ; $i
11665  4EB8 2A            mov b, [d]
11666  4EB9 FD 77         inc b
11667  4EBB FA FF FF      lea d, [bp + -1] ; $i
11668  4EBE FD 43         mov [d], b
11669  4EC0 FD 7D         dec b
11670  4EC2 0A 34 4E      jmp _for184_cond
11671  4EC5             _for184_exit:
11672  4EC5 F9            leave
11673  4EC6 09            ret
11674  4EC7             
11675  4EC7             nav_data:
11676  4EC7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11677  4ECA             ;; if (starbases <= 0) { 
11678  4ECA             _if186_cond:
11679  4ECA 3B BF 61      mov d, _starbases ; $starbases
11680  4ECD 32            mov bl, [d]
11681  4ECE A7 00         mov bh, 0
11682  4ED0             ; START RELATIONAL
11683  4ED0 D7            push a
11684  4ED1 11            mov a, b
11685  4ED2 26 00 00      mov b, $0
11686  4ED5 B0            cmp a, b
11687  4ED6 FD 74         sle ; <= (signed)
11688  4ED8 E4            pop a
11689  4ED9             ; END RELATIONAL
11690  4ED9 C0 00 00      cmp b, 0
11691  4EDC C6 F0 4E      je _if186_exit
11692  4EDF             _if186_true:
11693  4EDF             ;; puts("Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n"); 
11694  4EDF 26 96 74      mov b, _s145 ; "Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n"
11695  4EE2 FD AB         swp b
11696  4EE4 D8            push b
11697  4EE5 07 4A 15      call puts
11698  4EE8 51 02 00      add sp, 2
11699  4EEB             ;; return; 
11700  4EEB F9            leave
11701  4EEC 09            ret
11702  4EED 0A F0 4E      jmp _if186_exit
11703  4EF0             _if186_exit:
11704  4EF0             ;; compute_vector(TO_FIXED00(base_y), TO_FIXED00(base_x), ship_y, ship_x); 
11705  4EF0 3B BB 62      mov d, _ship_x ; $ship_x
11706  4EF3 2A            mov b, [d]
11707  4EF4 FD AB         swp b
11708  4EF6 D8            push b
11709  4EF7 3B B9 62      mov d, _ship_y ; $ship_y
11710  4EFA 2A            mov b, [d]
11711  4EFB FD AB         swp b
11712  4EFD D8            push b
11713  4EFE 3B C1 61      mov d, _base_x ; $base_x
11714  4F01 32            mov bl, [d]
11715  4F02 A7 00         mov bh, 0
11716  4F04 FD AB         swp b
11717  4F06 D8            push b
11718  4F07 07 57 1D      call TO_FIXED00
11719  4F0A 51 02 00      add sp, 2
11720  4F0D FD AB         swp b
11721  4F0F D8            push b
11722  4F10 3B C0 61      mov d, _base_y ; $base_y
11723  4F13 32            mov bl, [d]
11724  4F14 A7 00         mov bh, 0
11725  4F16 FD AB         swp b
11726  4F18 D8            push b
11727  4F19 07 57 1D      call TO_FIXED00
11728  4F1C 51 02 00      add sp, 2
11729  4F1F FD AB         swp b
11730  4F21 D8            push b
11731  4F22 07 87 52      call compute_vector
11732  4F25 51 08 00      add sp, 8
11733  4F28 F9            leave
11734  4F29 09            ret
11735  4F2A             
11736  4F2A             dirdist_calc:
11737  4F2A F8 00 00      enter 0 ; (push bp; mov bp, sp)
11738  4F2D             ;; int       c1, a, w1, x; 
11739  4F2D 52 02 00      sub sp, 2 ; c1
11740  4F30 52 02 00      sub sp, 2 ; a
11741  4F33 52 02 00      sub sp, 2 ; w1
11742  4F36 52 02 00      sub sp, 2 ; x
11743  4F39             ;; printf("Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 
11744  4F39 3B BB 62      mov d, _ship_x ; $ship_x
11745  4F3C 2A            mov b, [d]
11746  4F3D FD AB         swp b
11747  4F3F D8            push b
11748  4F40 07 69 1D      call FROM_FIXED00
11749  4F43 51 02 00      add sp, 2
11750  4F46 FD AB         swp b
11751  4F48 D8            push b
11752  4F49 3B B9 62      mov d, _ship_y ; $ship_y
11753  4F4C 2A            mov b, [d]
11754  4F4D FD AB         swp b
11755  4F4F D8            push b
11756  4F50 07 69 1D      call FROM_FIXED00
11757  4F53 51 02 00      add sp, 2
11758  4F56 FD AB         swp b
11759  4F58 D8            push b
11760  4F59 3B 9C 62      mov d, _quad_x ; $quad_x
11761  4F5C 2A            mov b, [d]
11762  4F5D FD AB         swp b
11763  4F5F D8            push b
11764  4F60 3B 9A 62      mov d, _quad_y ; $quad_y
11765  4F63 2A            mov b, [d]
11766  4F64 FD AB         swp b
11767  4F66 D8            push b
11768  4F67 26 D8 74      mov b, _s146 ; "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: "
11769  4F6A FD AB         swp b
11770  4F6C D8            push b
11771  4F6D 07 BA 07      call printf
11772  4F70 51 0A 00      add sp, 10
11773  4F73             ;; c1 = TO_FIXED00(input_int()); 
11774  4F73 FA FF FF      lea d, [bp + -1] ; $c1
11775  4F76 DA            push d
11776  4F77 07 22 20      call input_int
11777  4F7A FD AB         swp b
11778  4F7C D8            push b
11779  4F7D 07 57 1D      call TO_FIXED00
11780  4F80 51 02 00      add sp, 2
11781  4F83 E7            pop d
11782  4F84 FD 43         mov [d], b
11783  4F86             ;; if (c1 < 0 || c1 > 900 ) 
11784  4F86             _if187_cond:
11785  4F86 FA FF FF      lea d, [bp + -1] ; $c1
11786  4F89 2A            mov b, [d]
11787  4F8A             ; START RELATIONAL
11788  4F8A D7            push a
11789  4F8B 11            mov a, b
11790  4F8C 26 00 00      mov b, $0
11791  4F8F B0            cmp a, b
11792  4F90 FD 73         slt ; < (signed)
11793  4F92 E4            pop a
11794  4F93             ; END RELATIONAL
11795  4F93             ; START LOGICAL OR
11796  4F93 D7            push a
11797  4F94 11            mov a, b
11798  4F95 FA FF FF      lea d, [bp + -1] ; $c1
11799  4F98 2A            mov b, [d]
11800  4F99             ; START RELATIONAL
11801  4F99 D7            push a
11802  4F9A 11            mov a, b
11803  4F9B 26 84 03      mov b, $384
11804  4F9E B0            cmp a, b
11805  4F9F FD 7F         sgt ; >
11806  4FA1 E4            pop a
11807  4FA2             ; END RELATIONAL
11808  4FA2 FD A8         sor a, b ; ||
11809  4FA4 E4            pop a
11810  4FA5             ; END LOGICAL OR
11811  4FA5 C0 00 00      cmp b, 0
11812  4FA8 C6 B0 4F      je _if187_exit
11813  4FAB             _if187_true:
11814  4FAB             ;; return; 
11815  4FAB F9            leave
11816  4FAC 09            ret
11817  4FAD 0A B0 4F      jmp _if187_exit
11818  4FB0             _if187_exit:
11819  4FB0             ;; puts("Please enter initial Y coordinate: "); 
11820  4FB0 26 44 75      mov b, _s147 ; "Please enter initial Y coordinate: "
11821  4FB3 FD AB         swp b
11822  4FB5 D8            push b
11823  4FB6 07 4A 15      call puts
11824  4FB9 51 02 00      add sp, 2
11825  4FBC             ;; a = TO_FIXED00(input_int()); 
11826  4FBC FA FD FF      lea d, [bp + -3] ; $a
11827  4FBF DA            push d
11828  4FC0 07 22 20      call input_int
11829  4FC3 FD AB         swp b
11830  4FC5 D8            push b
11831  4FC6 07 57 1D      call TO_FIXED00
11832  4FC9 51 02 00      add sp, 2
11833  4FCC E7            pop d
11834  4FCD FD 43         mov [d], b
11835  4FCF             ;; if (a < 0 || a > 900) 
11836  4FCF             _if188_cond:
11837  4FCF FA FD FF      lea d, [bp + -3] ; $a
11838  4FD2 2A            mov b, [d]
11839  4FD3             ; START RELATIONAL
11840  4FD3 D7            push a
11841  4FD4 11            mov a, b
11842  4FD5 26 00 00      mov b, $0
11843  4FD8 B0            cmp a, b
11844  4FD9 FD 73         slt ; < (signed)
11845  4FDB E4            pop a
11846  4FDC             ; END RELATIONAL
11847  4FDC             ; START LOGICAL OR
11848  4FDC D7            push a
11849  4FDD 11            mov a, b
11850  4FDE FA FD FF      lea d, [bp + -3] ; $a
11851  4FE1 2A            mov b, [d]
11852  4FE2             ; START RELATIONAL
11853  4FE2 D7            push a
11854  4FE3 11            mov a, b
11855  4FE4 26 84 03      mov b, $384
11856  4FE7 B0            cmp a, b
11857  4FE8 FD 7F         sgt ; >
11858  4FEA E4            pop a
11859  4FEB             ; END RELATIONAL
11860  4FEB FD A8         sor a, b ; ||
11861  4FED E4            pop a
11862  4FEE             ; END LOGICAL OR
11863  4FEE C0 00 00      cmp b, 0
11864  4FF1 C6 F9 4F      je _if188_exit
11865  4FF4             _if188_true:
11866  4FF4             ;; return; 
11867  4FF4 F9            leave
11868  4FF5 09            ret
11869  4FF6 0A F9 4F      jmp _if188_exit
11870  4FF9             _if188_exit:
11871  4FF9             ;; puts("Please enter final X coordinate: "); 
11872  4FF9 26 68 75      mov b, _s148 ; "Please enter final X coordinate: "
11873  4FFC FD AB         swp b
11874  4FFE D8            push b
11875  4FFF 07 4A 15      call puts
11876  5002 51 02 00      add sp, 2
11877  5005             ;; w1 = TO_FIXED00(input_int()); 
11878  5005 FA FB FF      lea d, [bp + -5] ; $w1
11879  5008 DA            push d
11880  5009 07 22 20      call input_int
11881  500C FD AB         swp b
11882  500E D8            push b
11883  500F 07 57 1D      call TO_FIXED00
11884  5012 51 02 00      add sp, 2
11885  5015 E7            pop d
11886  5016 FD 43         mov [d], b
11887  5018             ;; if (w1 < 0 || w1 > 900) 
11888  5018             _if189_cond:
11889  5018 FA FB FF      lea d, [bp + -5] ; $w1
11890  501B 2A            mov b, [d]
11891  501C             ; START RELATIONAL
11892  501C D7            push a
11893  501D 11            mov a, b
11894  501E 26 00 00      mov b, $0
11895  5021 B0            cmp a, b
11896  5022 FD 73         slt ; < (signed)
11897  5024 E4            pop a
11898  5025             ; END RELATIONAL
11899  5025             ; START LOGICAL OR
11900  5025 D7            push a
11901  5026 11            mov a, b
11902  5027 FA FB FF      lea d, [bp + -5] ; $w1
11903  502A 2A            mov b, [d]
11904  502B             ; START RELATIONAL
11905  502B D7            push a
11906  502C 11            mov a, b
11907  502D 26 84 03      mov b, $384
11908  5030 B0            cmp a, b
11909  5031 FD 7F         sgt ; >
11910  5033 E4            pop a
11911  5034             ; END RELATIONAL
11912  5034 FD A8         sor a, b ; ||
11913  5036 E4            pop a
11914  5037             ; END LOGICAL OR
11915  5037 C0 00 00      cmp b, 0
11916  503A C6 42 50      je _if189_exit
11917  503D             _if189_true:
11918  503D             ;; return; 
11919  503D F9            leave
11920  503E 09            ret
11921  503F 0A 42 50      jmp _if189_exit
11922  5042             _if189_exit:
11923  5042             ;; puts("Please enter final Y coordinate: "); 
11924  5042 26 8A 75      mov b, _s149 ; "Please enter final Y coordinate: "
11925  5045 FD AB         swp b
11926  5047 D8            push b
11927  5048 07 4A 15      call puts
11928  504B 51 02 00      add sp, 2
11929  504E             ;; x = TO_FIXED00(input_int()); 
11930  504E FA F9 FF      lea d, [bp + -7] ; $x
11931  5051 DA            push d
11932  5052 07 22 20      call input_int
11933  5055 FD AB         swp b
11934  5057 D8            push b
11935  5058 07 57 1D      call TO_FIXED00
11936  505B 51 02 00      add sp, 2
11937  505E E7            pop d
11938  505F FD 43         mov [d], b
11939  5061             ;; if (x < 0 || x > 900) 
11940  5061             _if190_cond:
11941  5061 FA F9 FF      lea d, [bp + -7] ; $x
11942  5064 2A            mov b, [d]
11943  5065             ; START RELATIONAL
11944  5065 D7            push a
11945  5066 11            mov a, b
11946  5067 26 00 00      mov b, $0
11947  506A B0            cmp a, b
11948  506B FD 73         slt ; < (signed)
11949  506D E4            pop a
11950  506E             ; END RELATIONAL
11951  506E             ; START LOGICAL OR
11952  506E D7            push a
11953  506F 11            mov a, b
11954  5070 FA F9 FF      lea d, [bp + -7] ; $x
11955  5073 2A            mov b, [d]
11956  5074             ; START RELATIONAL
11957  5074 D7            push a
11958  5075 11            mov a, b
11959  5076 26 84 03      mov b, $384
11960  5079 B0            cmp a, b
11961  507A FD 7F         sgt ; >
11962  507C E4            pop a
11963  507D             ; END RELATIONAL
11964  507D FD A8         sor a, b ; ||
11965  507F E4            pop a
11966  5080             ; END LOGICAL OR
11967  5080 C0 00 00      cmp b, 0
11968  5083 C6 8B 50      je _if190_exit
11969  5086             _if190_true:
11970  5086             ;; return; 
11971  5086 F9            leave
11972  5087 09            ret
11973  5088 0A 8B 50      jmp _if190_exit
11974  508B             _if190_exit:
11975  508B             ;; compute_vector(w1, x, c1, a); 
11976  508B FA FD FF      lea d, [bp + -3] ; $a
11977  508E 2A            mov b, [d]
11978  508F FD AB         swp b
11979  5091 D8            push b
11980  5092 FA FF FF      lea d, [bp + -1] ; $c1
11981  5095 2A            mov b, [d]
11982  5096 FD AB         swp b
11983  5098 D8            push b
11984  5099 FA F9 FF      lea d, [bp + -7] ; $x
11985  509C 2A            mov b, [d]
11986  509D FD AB         swp b
11987  509F D8            push b
11988  50A0 FA FB FF      lea d, [bp + -5] ; $w1
11989  50A3 2A            mov b, [d]
11990  50A4 FD AB         swp b
11991  50A6 D8            push b
11992  50A7 07 87 52      call compute_vector
11993  50AA 51 08 00      add sp, 8
11994  50AD F9            leave
11995  50AE 09            ret
11996  50AF             
11997  50AF             galaxy_map:
11998  50AF F8 00 00      enter 0 ; (push bp; mov bp, sp)
11999  50B2             ;; int i, j, j0; 
12000  50B2 52 02 00      sub sp, 2 ; i
12001  50B5 52 02 00      sub sp, 2 ; j
12002  50B8 52 02 00      sub sp, 2 ; j0
12003  50BB             ;; printf("\n                   The Galaxy\n\n"); 
12004  50BB 26 AC 75      mov b, _s150 ; "\n                   The Galaxy\n\n"
12005  50BE FD AB         swp b
12006  50C0 D8            push b
12007  50C1 07 BA 07      call printf
12008  50C4 51 02 00      add sp, 2
12009  50C7             ;; printf("    1     2     3     4     5     6     7     8\n"); 
12010  50C7 26 CD 75      mov b, _s151 ; "    1     2     3     4     5     6     7     8\n"
12011  50CA FD AB         swp b
12012  50CC D8            push b
12013  50CD 07 BA 07      call printf
12014  50D0 51 02 00      add sp, 2
12015  50D3             ;; for (i = 1; i <= 8; i++) { 
12016  50D3             _for191_init:
12017  50D3 FA FF FF      lea d, [bp + -1] ; $i
12018  50D6 DA            push d
12019  50D7 26 01 00      mov b, $1
12020  50DA E7            pop d
12021  50DB FD 43         mov [d], b
12022  50DD             _for191_cond:
12023  50DD FA FF FF      lea d, [bp + -1] ; $i
12024  50E0 2A            mov b, [d]
12025  50E1             ; START RELATIONAL
12026  50E1 D7            push a
12027  50E2 11            mov a, b
12028  50E3 26 08 00      mov b, $8
12029  50E6 B0            cmp a, b
12030  50E7 FD 74         sle ; <= (signed)
12031  50E9 E4            pop a
12032  50EA             ; END RELATIONAL
12033  50EA C0 00 00      cmp b, 0
12034  50ED C6 78 52      je _for191_exit
12035  50F0             _for191_block:
12036  50F0             ;; printf("%s%d ", gm_1, i); 
12037  50F0 FA FF FF      lea d, [bp + -1] ; $i
12038  50F3 2A            mov b, [d]
12039  50F4 FD AB         swp b
12040  50F6 D8            push b
12041  50F7 3B 73 64      mov d, _gm_1 ; $gm_1
12042  50FA 2A            mov b, [d]
12043  50FB FD AB         swp b
12044  50FD D8            push b
12045  50FE 26 FE 75      mov b, _s152 ; "%s%d "
12046  5101 FD AB         swp b
12047  5103 D8            push b
12048  5104 07 BA 07      call printf
12049  5107 51 06 00      add sp, 6
12050  510A             ;; quadrant_name(1, i, 1); 
12051  510A 26 01 00      mov b, $1
12052  510D DD            push bl
12053  510E FA FF FF      lea d, [bp + -1] ; $i
12054  5111 2A            mov b, [d]
12055  5112 DD            push bl
12056  5113 26 01 00      mov b, $1
12057  5116 DD            push bl
12058  5117 07 A3 5E      call quadrant_name
12059  511A 51 03 00      add sp, 3
12060  511D             ;; j0 = (int) (11 - (strlen(quadname) / 2)); 
12061  511D FA FB FF      lea d, [bp + -5] ; $j0
12062  5120 DA            push d
12063  5121 26 0B 00      mov b, $b
12064  5124             ; START TERMS
12065  5124 D7            push a
12066  5125 11            mov a, b
12067  5126 3B FF 62      mov d, _quadname_data ; $quadname
12068  5129 2D            mov b, d
12069  512A FD AB         swp b
12070  512C D8            push b
12071  512D 07 8E 05      call strlen
12072  5130 51 02 00      add sp, 2
12073  5133             ; START FACTORS
12074  5133 D7            push a
12075  5134 11            mov a, b
12076  5135 26 02 00      mov b, $2
12077  5138 AE            div a, b
12078  5139 27            mov b, a
12079  513A E4            pop a
12080  513B             ; END FACTORS
12081  513B 60            sub a, b
12082  513C 27            mov b, a
12083  513D E4            pop a
12084  513E             ; END TERMS
12085  513E E7            pop d
12086  513F FD 43         mov [d], b
12087  5141             ;; for (j = 0; j < j0; j++) 
12088  5141             _for192_init:
12089  5141 FA FD FF      lea d, [bp + -3] ; $j
12090  5144 DA            push d
12091  5145 26 00 00      mov b, $0
12092  5148 E7            pop d
12093  5149 FD 43         mov [d], b
12094  514B             _for192_cond:
12095  514B FA FD FF      lea d, [bp + -3] ; $j
12096  514E 2A            mov b, [d]
12097  514F             ; START RELATIONAL
12098  514F D7            push a
12099  5150 11            mov a, b
12100  5151 FA FB FF      lea d, [bp + -5] ; $j0
12101  5154 2A            mov b, [d]
12102  5155 B0            cmp a, b
12103  5156 FD 73         slt ; < (signed)
12104  5158 E4            pop a
12105  5159             ; END RELATIONAL
12106  5159 C0 00 00      cmp b, 0
12107  515C C6 79 51      je _for192_exit
12108  515F             _for192_block:
12109  515F             ;; putchar(' '); 
12110  515F 26 20 00      mov b, $20
12111  5162 DD            push bl
12112  5163 07 14 15      call putchar
12113  5166 51 01 00      add sp, 1
12114  5169             _for192_update:
12115  5169 FA FD FF      lea d, [bp + -3] ; $j
12116  516C 2A            mov b, [d]
12117  516D FD 77         inc b
12118  516F FA FD FF      lea d, [bp + -3] ; $j
12119  5172 FD 43         mov [d], b
12120  5174 FD 7D         dec b
12121  5176 0A 4B 51      jmp _for192_cond
12122  5179             _for192_exit:
12123  5179             ;; puts(quadname); 
12124  5179 3B FF 62      mov d, _quadname_data ; $quadname
12125  517C 2D            mov b, d
12126  517D FD AB         swp b
12127  517F D8            push b
12128  5180 07 4A 15      call puts
12129  5183 51 02 00      add sp, 2
12130  5186             ;; for (j = 0; j < j0; j++) 
12131  5186             _for193_init:
12132  5186 FA FD FF      lea d, [bp + -3] ; $j
12133  5189 DA            push d
12134  518A 26 00 00      mov b, $0
12135  518D E7            pop d
12136  518E FD 43         mov [d], b
12137  5190             _for193_cond:
12138  5190 FA FD FF      lea d, [bp + -3] ; $j
12139  5193 2A            mov b, [d]
12140  5194             ; START RELATIONAL
12141  5194 D7            push a
12142  5195 11            mov a, b
12143  5196 FA FB FF      lea d, [bp + -5] ; $j0
12144  5199 2A            mov b, [d]
12145  519A B0            cmp a, b
12146  519B FD 73         slt ; < (signed)
12147  519D E4            pop a
12148  519E             ; END RELATIONAL
12149  519E C0 00 00      cmp b, 0
12150  51A1 C6 BE 51      je _for193_exit
12151  51A4             _for193_block:
12152  51A4             ;; putchar(' '); 
12153  51A4 26 20 00      mov b, $20
12154  51A7 DD            push bl
12155  51A8 07 14 15      call putchar
12156  51AB 51 01 00      add sp, 1
12157  51AE             _for193_update:
12158  51AE FA FD FF      lea d, [bp + -3] ; $j
12159  51B1 2A            mov b, [d]
12160  51B2 FD 77         inc b
12161  51B4 FA FD FF      lea d, [bp + -3] ; $j
12162  51B7 FD 43         mov [d], b
12163  51B9 FD 7D         dec b
12164  51BB 0A 90 51      jmp _for193_cond
12165  51BE             _for193_exit:
12166  51BE             ;; if (!(strlen(quadname) % 2)) 
12167  51BE             _if194_cond:
12168  51BE 3B FF 62      mov d, _quadname_data ; $quadname
12169  51C1 2D            mov b, d
12170  51C2 FD AB         swp b
12171  51C4 D8            push b
12172  51C5 07 8E 05      call strlen
12173  51C8 51 02 00      add sp, 2
12174  51CB             ; START FACTORS
12175  51CB D7            push a
12176  51CC 11            mov a, b
12177  51CD 26 02 00      mov b, $2
12178  51D0 AE            div a, b ; 
12179  51D1 11            mov a, b
12180  51D2 27            mov b, a
12181  51D3 E4            pop a
12182  51D4             ; END FACTORS
12183  51D4 C0 00 00      cmp b, 0
12184  51D7 FD 71         seq ; !
12185  51D9 C0 00 00      cmp b, 0
12186  51DC C6 EC 51      je _if194_exit
12187  51DF             _if194_true:
12188  51DF             ;; putchar(' '); 
12189  51DF 26 20 00      mov b, $20
12190  51E2 DD            push bl
12191  51E3 07 14 15      call putchar
12192  51E6 51 01 00      add sp, 1
12193  51E9 0A EC 51      jmp _if194_exit
12194  51EC             _if194_exit:
12195  51EC             ;; quadrant_name(1, i, 5); 
12196  51EC 26 05 00      mov b, $5
12197  51EF DD            push bl
12198  51F0 FA FF FF      lea d, [bp + -1] ; $i
12199  51F3 2A            mov b, [d]
12200  51F4 DD            push bl
12201  51F5 26 01 00      mov b, $1
12202  51F8 DD            push bl
12203  51F9 07 A3 5E      call quadrant_name
12204  51FC 51 03 00      add sp, 3
12205  51FF             ;; j0 = (int) (12 - (strlen(quadname) / 2)); 
12206  51FF FA FB FF      lea d, [bp + -5] ; $j0
12207  5202 DA            push d
12208  5203 26 0C 00      mov b, $c
12209  5206             ; START TERMS
12210  5206 D7            push a
12211  5207 11            mov a, b
12212  5208 3B FF 62      mov d, _quadname_data ; $quadname
12213  520B 2D            mov b, d
12214  520C FD AB         swp b
12215  520E D8            push b
12216  520F 07 8E 05      call strlen
12217  5212 51 02 00      add sp, 2
12218  5215             ; START FACTORS
12219  5215 D7            push a
12220  5216 11            mov a, b
12221  5217 26 02 00      mov b, $2
12222  521A AE            div a, b
12223  521B 27            mov b, a
12224  521C E4            pop a
12225  521D             ; END FACTORS
12226  521D 60            sub a, b
12227  521E 27            mov b, a
12228  521F E4            pop a
12229  5220             ; END TERMS
12230  5220 E7            pop d
12231  5221 FD 43         mov [d], b
12232  5223             ;; for (j = 0; j < j0; j++) 
12233  5223             _for195_init:
12234  5223 FA FD FF      lea d, [bp + -3] ; $j
12235  5226 DA            push d
12236  5227 26 00 00      mov b, $0
12237  522A E7            pop d
12238  522B FD 43         mov [d], b
12239  522D             _for195_cond:
12240  522D FA FD FF      lea d, [bp + -3] ; $j
12241  5230 2A            mov b, [d]
12242  5231             ; START RELATIONAL
12243  5231 D7            push a
12244  5232 11            mov a, b
12245  5233 FA FB FF      lea d, [bp + -5] ; $j0
12246  5236 2A            mov b, [d]
12247  5237 B0            cmp a, b
12248  5238 FD 73         slt ; < (signed)
12249  523A E4            pop a
12250  523B             ; END RELATIONAL
12251  523B C0 00 00      cmp b, 0
12252  523E C6 5B 52      je _for195_exit
12253  5241             _for195_block:
12254  5241             ;; putchar(' '); 
12255  5241 26 20 00      mov b, $20
12256  5244 DD            push bl
12257  5245 07 14 15      call putchar
12258  5248 51 01 00      add sp, 1
12259  524B             _for195_update:
12260  524B FA FD FF      lea d, [bp + -3] ; $j
12261  524E 2A            mov b, [d]
12262  524F FD 77         inc b
12263  5251 FA FD FF      lea d, [bp + -3] ; $j
12264  5254 FD 43         mov [d], b
12265  5256 FD 7D         dec b
12266  5258 0A 2D 52      jmp _for195_cond
12267  525B             _for195_exit:
12268  525B             ;; puts(quadname); 
12269  525B 3B FF 62      mov d, _quadname_data ; $quadname
12270  525E 2D            mov b, d
12271  525F FD AB         swp b
12272  5261 D8            push b
12273  5262 07 4A 15      call puts
12274  5265 51 02 00      add sp, 2
12275  5268             _for191_update:
12276  5268 FA FF FF      lea d, [bp + -1] ; $i
12277  526B 2A            mov b, [d]
12278  526C FD 77         inc b
12279  526E FA FF FF      lea d, [bp + -1] ; $i
12280  5271 FD 43         mov [d], b
12281  5273 FD 7D         dec b
12282  5275 0A DD 50      jmp _for191_cond
12283  5278             _for191_exit:
12284  5278             ;; puts(gm_1); 
12285  5278 3B 73 64      mov d, _gm_1 ; $gm_1
12286  527B 2A            mov b, [d]
12287  527C FD AB         swp b
12288  527E D8            push b
12289  527F 07 4A 15      call puts
12290  5282 51 02 00      add sp, 2
12291  5285 F9            leave
12292  5286 09            ret
12293  5287             
12294  5287             compute_vector:
12295  5287 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12296  528A             ;; long unsigned int        xl, al; 
12297  528A 52 04 00      sub sp, 4 ; xl
12298  528D 52 04 00      sub sp, 4 ; al
12299  5290             ;; puts("  DIRECTION = "); 
12300  5290 26 04 76      mov b, _s153 ; "  DIRECTION = "
12301  5293 FD AB         swp b
12302  5295 D8            push b
12303  5296 07 4A 15      call puts
12304  5299 51 02 00      add sp, 2
12305  529C             ;; x = x - a; 
12306  529C FA 07 00      lea d, [bp + 7] ; $x
12307  529F DA            push d
12308  52A0 FA 07 00      lea d, [bp + 7] ; $x
12309  52A3 2A            mov b, [d]
12310  52A4             ; START TERMS
12311  52A4 D7            push a
12312  52A5 11            mov a, b
12313  52A6 FA 0B 00      lea d, [bp + 11] ; $a
12314  52A9 2A            mov b, [d]
12315  52AA 60            sub a, b
12316  52AB 27            mov b, a
12317  52AC E4            pop a
12318  52AD             ; END TERMS
12319  52AD E7            pop d
12320  52AE FD 43         mov [d], b
12321  52B0             ;; a = c1 - w1; 
12322  52B0 FA 0B 00      lea d, [bp + 11] ; $a
12323  52B3 DA            push d
12324  52B4 FA 09 00      lea d, [bp + 9] ; $c1
12325  52B7 2A            mov b, [d]
12326  52B8             ; START TERMS
12327  52B8 D7            push a
12328  52B9 11            mov a, b
12329  52BA FA 05 00      lea d, [bp + 5] ; $w1
12330  52BD 2A            mov b, [d]
12331  52BE 60            sub a, b
12332  52BF 27            mov b, a
12333  52C0 E4            pop a
12334  52C1             ; END TERMS
12335  52C1 E7            pop d
12336  52C2 FD 43         mov [d], b
12337  52C4             ;; xl = abs(x); 
12338  52C4 FA FD FF      lea d, [bp + -3] ; $xl
12339  52C7 DA            push d
12340  52C8 FA 07 00      lea d, [bp + 7] ; $x
12341  52CB 2A            mov b, [d]
12342  52CC FD AB         swp b
12343  52CE D8            push b
12344  52CF 07 96 15      call abs
12345  52D2 51 02 00      add sp, 2
12346  52D5 E7            pop d
12347  52D6 FD 43         mov [d], b
12348  52D8 28            mov b, c
12349  52D9 FD 44 02 00   mov [d + 2], b
12350  52DD             ;; al = abs(a); 
12351  52DD FA F9 FF      lea d, [bp + -7] ; $al
12352  52E0 DA            push d
12353  52E1 FA 0B 00      lea d, [bp + 11] ; $a
12354  52E4 2A            mov b, [d]
12355  52E5 FD AB         swp b
12356  52E7 D8            push b
12357  52E8 07 96 15      call abs
12358  52EB 51 02 00      add sp, 2
12359  52EE E7            pop d
12360  52EF FD 43         mov [d], b
12361  52F1 28            mov b, c
12362  52F2 FD 44 02 00   mov [d + 2], b
12363  52F6             ;; if (x < 0) { 
12364  52F6             _if196_cond:
12365  52F6 FA 07 00      lea d, [bp + 7] ; $x
12366  52F9 2A            mov b, [d]
12367  52FA             ; START RELATIONAL
12368  52FA D7            push a
12369  52FB 11            mov a, b
12370  52FC 26 00 00      mov b, $0
12371  52FF B0            cmp a, b
12372  5300 FD 73         slt ; < (signed)
12373  5302 E4            pop a
12374  5303             ; END RELATIONAL
12375  5303 C0 00 00      cmp b, 0
12376  5306 C6 63 54      je _if196_else
12377  5309             _if196_true:
12378  5309             ;; if (a > 0) { 
12379  5309             _if197_cond:
12380  5309 FA 0B 00      lea d, [bp + 11] ; $a
12381  530C 2A            mov b, [d]
12382  530D             ; START RELATIONAL
12383  530D D7            push a
12384  530E 11            mov a, b
12385  530F 26 00 00      mov b, $0
12386  5312 B0            cmp a, b
12387  5313 FD 7F         sgt ; >
12388  5315 E4            pop a
12389  5316             ; END RELATIONAL
12390  5316 C0 00 00      cmp b, 0
12391  5319 C6 34 54      je _if197_else
12392  531C             _if197_true:
12393  531C             ;; c1 = 300; 
12394  531C FA 09 00      lea d, [bp + 9] ; $c1
12395  531F DA            push d
12396  5320 26 2C 01      mov b, $12c
12397  5323 E7            pop d
12398  5324 FD 43         mov [d], b
12399  5326             ;; if (al >= xl) 
12400  5326             _if198_cond:
12401  5326 FA F9 FF      lea d, [bp + -7] ; $al
12402  5329 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12403  532C FD 39         mov c, b ; And place it into C
12404  532E 2A            mov b, [d] ; Lower Word in B
12405  532F             ; START RELATIONAL
12406  532F D7            push a
12407  5330 FD D8         push g
12408  5332 11            mov a, b
12409  5333 FD 7A         mov g, c
12410  5335 FA FD FF      lea d, [bp + -3] ; $xl
12411  5338 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12412  533B FD 39         mov c, b ; And place it into C
12413  533D 2A            mov b, [d] ; Lower Word in B
12414  533E FD 82         sgeu
12415  5340 FD F1         pop g
12416  5342 E4            pop a
12417  5343             ; END RELATIONAL
12418  5343 C0 00 00      cmp b, 0
12419  5346 C6 93 53      je _if198_else
12420  5349             _if198_true:
12421  5349             ;; printf("%s", print100(c1 + ((xl * 100) / al))); 
12422  5349 FA 09 00      lea d, [bp + 9] ; $c1
12423  534C 2A            mov b, [d]
12424  534D             ; START TERMS
12425  534D D7            push a
12426  534E 11            mov a, b
12427  534F FA FD FF      lea d, [bp + -3] ; $xl
12428  5352 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12429  5355 FD 39         mov c, b ; And place it into C
12430  5357 2A            mov b, [d] ; Lower Word in B
12431  5358             ; START FACTORS
12432  5358 D7            push a
12433  5359 11            mov a, b
12434  535A 26 64 00      mov b, $64
12435  535D AC            mul a, b ; *
12436  535E 11            mov a, b
12437  535F 27            mov b, a
12438  5360 E4            pop a
12439  5361             ; END FACTORS
12440  5361             ; START FACTORS
12441  5361 D7            push a
12442  5362 11            mov a, b
12443  5363 FA F9 FF      lea d, [bp + -7] ; $al
12444  5366 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12445  5369 FD 39         mov c, b ; And place it into C
12446  536B 2A            mov b, [d] ; Lower Word in B
12447  536C AE            div a, b
12448  536D 27            mov b, a
12449  536E E4            pop a
12450  536F             ; END FACTORS
12451  536F 54            add a, b
12452  5370 D7            push a
12453  5371 FD 12         mov a, g
12454  5373 28            mov b, c
12455  5374 5C            adc a, b
12456  5375 39            mov c, a
12457  5376 E5            pop b
12458  5377 E4            pop a
12459  5378             ; END TERMS
12460  5378 FD AB         swp b
12461  537A D8            push b
12462  537B 07 6C 20      call print100
12463  537E 51 02 00      add sp, 2
12464  5381 FD AB         swp b
12465  5383 D8            push b
12466  5384 26 13 76      mov b, _s154 ; "%s"
12467  5387 FD AB         swp b
12468  5389 D8            push b
12469  538A 07 BA 07      call printf
12470  538D 51 04 00      add sp, 4
12471  5390 0A F7 53      jmp _if198_exit
12472  5393             _if198_else:
12473  5393             ;; printf("%s", print100(c1 + ((((xl * 2) - al) * 100)  / xl))); 
12474  5393 FA 09 00      lea d, [bp + 9] ; $c1
12475  5396 2A            mov b, [d]
12476  5397             ; START TERMS
12477  5397 D7            push a
12478  5398 11            mov a, b
12479  5399 FA FD FF      lea d, [bp + -3] ; $xl
12480  539C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12481  539F FD 39         mov c, b ; And place it into C
12482  53A1 2A            mov b, [d] ; Lower Word in B
12483  53A2             ; START FACTORS
12484  53A2 D7            push a
12485  53A3 11            mov a, b
12486  53A4 26 02 00      mov b, $2
12487  53A7 AC            mul a, b ; *
12488  53A8 11            mov a, b
12489  53A9 27            mov b, a
12490  53AA E4            pop a
12491  53AB             ; END FACTORS
12492  53AB             ; START TERMS
12493  53AB D7            push a
12494  53AC FD D8         push g
12495  53AE 11            mov a, b
12496  53AF FD 7A         mov g, c
12497  53B1 FA F9 FF      lea d, [bp + -7] ; $al
12498  53B4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12499  53B7 FD 39         mov c, b ; And place it into C
12500  53B9 2A            mov b, [d] ; Lower Word in B
12501  53BA 60            sub a, b
12502  53BB 27            mov b, a
12503  53BC FD F1         pop g
12504  53BE E4            pop a
12505  53BF             ; END TERMS
12506  53BF             ; START FACTORS
12507  53BF D7            push a
12508  53C0 11            mov a, b
12509  53C1 26 64 00      mov b, $64
12510  53C4 AC            mul a, b ; *
12511  53C5 11            mov a, b
12512  53C6 27            mov b, a
12513  53C7 E4            pop a
12514  53C8             ; END FACTORS
12515  53C8             ; START FACTORS
12516  53C8 D7            push a
12517  53C9 11            mov a, b
12518  53CA FA FD FF      lea d, [bp + -3] ; $xl
12519  53CD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12520  53D0 FD 39         mov c, b ; And place it into C
12521  53D2 2A            mov b, [d] ; Lower Word in B
12522  53D3 AE            div a, b
12523  53D4 27            mov b, a
12524  53D5 E4            pop a
12525  53D6             ; END FACTORS
12526  53D6 54            add a, b
12527  53D7 D7            push a
12528  53D8 FD 12         mov a, g
12529  53DA 28            mov b, c
12530  53DB 5C            adc a, b
12531  53DC 39            mov c, a
12532  53DD E5            pop b
12533  53DE E4            pop a
12534  53DF             ; END TERMS
12535  53DF FD AB         swp b
12536  53E1 D8            push b
12537  53E2 07 6C 20      call print100
12538  53E5 51 02 00      add sp, 2
12539  53E8 FD AB         swp b
12540  53EA D8            push b
12541  53EB 26 13 76      mov b, _s154 ; "%s"
12542  53EE FD AB         swp b
12543  53F0 D8            push b
12544  53F1 07 BA 07      call printf
12545  53F4 51 04 00      add sp, 4
12546  53F7             _if198_exit:
12547  53F7             ;; printf(dist_1, print100((x > a) ? x : a)); 
12548  53F7             _ternary202_cond:
12549  53F7 FA 07 00      lea d, [bp + 7] ; $x
12550  53FA 2A            mov b, [d]
12551  53FB             ; START RELATIONAL
12552  53FB D7            push a
12553  53FC 11            mov a, b
12554  53FD FA 0B 00      lea d, [bp + 11] ; $a
12555  5400 2A            mov b, [d]
12556  5401 B0            cmp a, b
12557  5402 FD 7F         sgt ; >
12558  5404 E4            pop a
12559  5405             ; END RELATIONAL
12560  5405 C0 00 00      cmp b, 0
12561  5408 C6 12 54      je _ternary202_false
12562  540B             _ternary202_true:
12563  540B FA 07 00      lea d, [bp + 7] ; $x
12564  540E 2A            mov b, [d]
12565  540F 0A 16 54      jmp _ternary202_exit
12566  5412             _ternary202_false:
12567  5412 FA 0B 00      lea d, [bp + 11] ; $a
12568  5415 2A            mov b, [d]
12569  5416             _ternary202_exit:
12570  5416 FD AB         swp b
12571  5418 D8            push b
12572  5419 07 6C 20      call print100
12573  541C 51 02 00      add sp, 2
12574  541F FD AB         swp b
12575  5421 D8            push b
12576  5422 3B 85 64      mov d, _dist_1 ; $dist_1
12577  5425 2A            mov b, [d]
12578  5426 FD AB         swp b
12579  5428 D8            push b
12580  5429 07 BA 07      call printf
12581  542C 51 04 00      add sp, 4
12582  542F             ;; return; 
12583  542F F9            leave
12584  5430 09            ret
12585  5431 0A 60 54      jmp _if197_exit
12586  5434             _if197_else:
12587  5434             ;; if (x != 0){ 
12588  5434             _if203_cond:
12589  5434 FA 07 00      lea d, [bp + 7] ; $x
12590  5437 2A            mov b, [d]
12591  5438             ; START RELATIONAL
12592  5438 D7            push a
12593  5439 11            mov a, b
12594  543A 26 00 00      mov b, $0
12595  543D B0            cmp a, b
12596  543E FD 72         sneq ; !=
12597  5440 E4            pop a
12598  5441             ; END RELATIONAL
12599  5441 C0 00 00      cmp b, 0
12600  5444 C6 56 54      je _if203_else
12601  5447             _if203_true:
12602  5447             ;; c1 = 500; 
12603  5447 FA 09 00      lea d, [bp + 9] ; $c1
12604  544A DA            push d
12605  544B 26 F4 01      mov b, $1f4
12606  544E E7            pop d
12607  544F FD 43         mov [d], b
12608  5451             ;; return; 
12609  5451 F9            leave
12610  5452 09            ret
12611  5453 0A 60 54      jmp _if203_exit
12612  5456             _if203_else:
12613  5456             ;; c1 = 700; 
12614  5456 FA 09 00      lea d, [bp + 9] ; $c1
12615  5459 DA            push d
12616  545A 26 BC 02      mov b, $2bc
12617  545D E7            pop d
12618  545E FD 43         mov [d], b
12619  5460             _if203_exit:
12620  5460             _if197_exit:
12621  5460 0A EF 55      jmp _if196_exit
12622  5463             _if196_else:
12623  5463             ;; if (a < 0) { 
12624  5463             _if204_cond:
12625  5463 FA 0B 00      lea d, [bp + 11] ; $a
12626  5466 2A            mov b, [d]
12627  5467             ; START RELATIONAL
12628  5467 D7            push a
12629  5468 11            mov a, b
12630  5469 26 00 00      mov b, $0
12631  546C B0            cmp a, b
12632  546D FD 73         slt ; < (signed)
12633  546F E4            pop a
12634  5470             ; END RELATIONAL
12635  5470 C0 00 00      cmp b, 0
12636  5473 C6 83 54      je _if204_else
12637  5476             _if204_true:
12638  5476             ;; c1 = 700; 
12639  5476 FA 09 00      lea d, [bp + 9] ; $c1
12640  5479 DA            push d
12641  547A 26 BC 02      mov b, $2bc
12642  547D E7            pop d
12643  547E FD 43         mov [d], b
12644  5480 0A EF 55      jmp _if204_exit
12645  5483             _if204_else:
12646  5483             ;; if (x > 0) { 
12647  5483             _if205_cond:
12648  5483 FA 07 00      lea d, [bp + 7] ; $x
12649  5486 2A            mov b, [d]
12650  5487             ; START RELATIONAL
12651  5487 D7            push a
12652  5488 11            mov a, b
12653  5489 26 00 00      mov b, $0
12654  548C B0            cmp a, b
12655  548D FD 7F         sgt ; >
12656  548F E4            pop a
12657  5490             ; END RELATIONAL
12658  5490 C0 00 00      cmp b, 0
12659  5493 C6 A3 54      je _if205_else
12660  5496             _if205_true:
12661  5496             ;; c1 = 100; 
12662  5496 FA 09 00      lea d, [bp + 9] ; $c1
12663  5499 DA            push d
12664  549A 26 64 00      mov b, $64
12665  549D E7            pop d
12666  549E FD 43         mov [d], b
12667  54A0 0A EF 55      jmp _if205_exit
12668  54A3             _if205_else:
12669  54A3             ;; if (a == 0) { 
12670  54A3             _if206_cond:
12671  54A3 FA 0B 00      lea d, [bp + 11] ; $a
12672  54A6 2A            mov b, [d]
12673  54A7             ; START RELATIONAL
12674  54A7 D7            push a
12675  54A8 11            mov a, b
12676  54A9 26 00 00      mov b, $0
12677  54AC B0            cmp a, b
12678  54AD FD 71         seq ; ==
12679  54AF E4            pop a
12680  54B0             ; END RELATIONAL
12681  54B0 C0 00 00      cmp b, 0
12682  54B3 C6 C3 54      je _if206_else
12683  54B6             _if206_true:
12684  54B6             ;; c1 = 500; 
12685  54B6 FA 09 00      lea d, [bp + 9] ; $c1
12686  54B9 DA            push d
12687  54BA 26 F4 01      mov b, $1f4
12688  54BD E7            pop d
12689  54BE FD 43         mov [d], b
12690  54C0 0A EF 55      jmp _if206_exit
12691  54C3             _if206_else:
12692  54C3             ;; c1 = 100; 
12693  54C3 FA 09 00      lea d, [bp + 9] ; $c1
12694  54C6 DA            push d
12695  54C7 26 64 00      mov b, $64
12696  54CA E7            pop d
12697  54CB FD 43         mov [d], b
12698  54CD             ;; if (al <= xl) 
12699  54CD             _if207_cond:
12700  54CD FA F9 FF      lea d, [bp + -7] ; $al
12701  54D0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12702  54D3 FD 39         mov c, b ; And place it into C
12703  54D5 2A            mov b, [d] ; Lower Word in B
12704  54D6             ; START RELATIONAL
12705  54D6 D7            push a
12706  54D7 FD D8         push g
12707  54D9 11            mov a, b
12708  54DA FD 7A         mov g, c
12709  54DC FA FD FF      lea d, [bp + -3] ; $xl
12710  54DF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12711  54E2 FD 39         mov c, b ; And place it into C
12712  54E4 2A            mov b, [d] ; Lower Word in B
12713  54E5 FD 76         sleu
12714  54E7 FD F1         pop g
12715  54E9 E4            pop a
12716  54EA             ; END RELATIONAL
12717  54EA C0 00 00      cmp b, 0
12718  54ED C6 3A 55      je _if207_else
12719  54F0             _if207_true:
12720  54F0             ;; printf("%s", print100(c1 + ((al * 100) / xl))); 
12721  54F0 FA 09 00      lea d, [bp + 9] ; $c1
12722  54F3 2A            mov b, [d]
12723  54F4             ; START TERMS
12724  54F4 D7            push a
12725  54F5 11            mov a, b
12726  54F6 FA F9 FF      lea d, [bp + -7] ; $al
12727  54F9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12728  54FC FD 39         mov c, b ; And place it into C
12729  54FE 2A            mov b, [d] ; Lower Word in B
12730  54FF             ; START FACTORS
12731  54FF D7            push a
12732  5500 11            mov a, b
12733  5501 26 64 00      mov b, $64
12734  5504 AC            mul a, b ; *
12735  5505 11            mov a, b
12736  5506 27            mov b, a
12737  5507 E4            pop a
12738  5508             ; END FACTORS
12739  5508             ; START FACTORS
12740  5508 D7            push a
12741  5509 11            mov a, b
12742  550A FA FD FF      lea d, [bp + -3] ; $xl
12743  550D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12744  5510 FD 39         mov c, b ; And place it into C
12745  5512 2A            mov b, [d] ; Lower Word in B
12746  5513 AE            div a, b
12747  5514 27            mov b, a
12748  5515 E4            pop a
12749  5516             ; END FACTORS
12750  5516 54            add a, b
12751  5517 D7            push a
12752  5518 FD 12         mov a, g
12753  551A 28            mov b, c
12754  551B 5C            adc a, b
12755  551C 39            mov c, a
12756  551D E5            pop b
12757  551E E4            pop a
12758  551F             ; END TERMS
12759  551F FD AB         swp b
12760  5521 D8            push b
12761  5522 07 6C 20      call print100
12762  5525 51 02 00      add sp, 2
12763  5528 FD AB         swp b
12764  552A D8            push b
12765  552B 26 13 76      mov b, _s154 ; "%s"
12766  552E FD AB         swp b
12767  5530 D8            push b
12768  5531 07 BA 07      call printf
12769  5534 51 04 00      add sp, 4
12770  5537 0A 9E 55      jmp _if207_exit
12771  553A             _if207_else:
12772  553A             ;; printf("%s", print100(c1 + ((((al * 2) - xl) * 100) / al))); 
12773  553A FA 09 00      lea d, [bp + 9] ; $c1
12774  553D 2A            mov b, [d]
12775  553E             ; START TERMS
12776  553E D7            push a
12777  553F 11            mov a, b
12778  5540 FA F9 FF      lea d, [bp + -7] ; $al
12779  5543 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12780  5546 FD 39         mov c, b ; And place it into C
12781  5548 2A            mov b, [d] ; Lower Word in B
12782  5549             ; START FACTORS
12783  5549 D7            push a
12784  554A 11            mov a, b
12785  554B 26 02 00      mov b, $2
12786  554E AC            mul a, b ; *
12787  554F 11            mov a, b
12788  5550 27            mov b, a
12789  5551 E4            pop a
12790  5552             ; END FACTORS
12791  5552             ; START TERMS
12792  5552 D7            push a
12793  5553 FD D8         push g
12794  5555 11            mov a, b
12795  5556 FD 7A         mov g, c
12796  5558 FA FD FF      lea d, [bp + -3] ; $xl
12797  555B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12798  555E FD 39         mov c, b ; And place it into C
12799  5560 2A            mov b, [d] ; Lower Word in B
12800  5561 60            sub a, b
12801  5562 27            mov b, a
12802  5563 FD F1         pop g
12803  5565 E4            pop a
12804  5566             ; END TERMS
12805  5566             ; START FACTORS
12806  5566 D7            push a
12807  5567 11            mov a, b
12808  5568 26 64 00      mov b, $64
12809  556B AC            mul a, b ; *
12810  556C 11            mov a, b
12811  556D 27            mov b, a
12812  556E E4            pop a
12813  556F             ; END FACTORS
12814  556F             ; START FACTORS
12815  556F D7            push a
12816  5570 11            mov a, b
12817  5571 FA F9 FF      lea d, [bp + -7] ; $al
12818  5574 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12819  5577 FD 39         mov c, b ; And place it into C
12820  5579 2A            mov b, [d] ; Lower Word in B
12821  557A AE            div a, b
12822  557B 27            mov b, a
12823  557C E4            pop a
12824  557D             ; END FACTORS
12825  557D 54            add a, b
12826  557E D7            push a
12827  557F FD 12         mov a, g
12828  5581 28            mov b, c
12829  5582 5C            adc a, b
12830  5583 39            mov c, a
12831  5584 E5            pop b
12832  5585 E4            pop a
12833  5586             ; END TERMS
12834  5586 FD AB         swp b
12835  5588 D8            push b
12836  5589 07 6C 20      call print100
12837  558C 51 02 00      add sp, 2
12838  558F FD AB         swp b
12839  5591 D8            push b
12840  5592 26 13 76      mov b, _s154 ; "%s"
12841  5595 FD AB         swp b
12842  5597 D8            push b
12843  5598 07 BA 07      call printf
12844  559B 51 04 00      add sp, 4
12845  559E             _if207_exit:
12846  559E             ;; printf(dist_1, print100((xl > al) ? xl : al)); 
12847  559E             _ternary211_cond:
12848  559E FA FD FF      lea d, [bp + -3] ; $xl
12849  55A1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12850  55A4 FD 39         mov c, b ; And place it into C
12851  55A6 2A            mov b, [d] ; Lower Word in B
12852  55A7             ; START RELATIONAL
12853  55A7 D7            push a
12854  55A8 FD D8         push g
12855  55AA 11            mov a, b
12856  55AB FD 7A         mov g, c
12857  55AD FA F9 FF      lea d, [bp + -7] ; $al
12858  55B0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12859  55B3 FD 39         mov c, b ; And place it into C
12860  55B5 2A            mov b, [d] ; Lower Word in B
12861  55B6 FD 81         sgu
12862  55B8 FD F1         pop g
12863  55BA E4            pop a
12864  55BB             ; END RELATIONAL
12865  55BB C0 00 00      cmp b, 0
12866  55BE C6 CD 55      je _ternary211_false
12867  55C1             _ternary211_true:
12868  55C1 FA FD FF      lea d, [bp + -3] ; $xl
12869  55C4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12870  55C7 FD 39         mov c, b ; And place it into C
12871  55C9 2A            mov b, [d] ; Lower Word in B
12872  55CA 0A D6 55      jmp _ternary211_exit
12873  55CD             _ternary211_false:
12874  55CD FA F9 FF      lea d, [bp + -7] ; $al
12875  55D0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12876  55D3 FD 39         mov c, b ; And place it into C
12877  55D5 2A            mov b, [d] ; Lower Word in B
12878  55D6             _ternary211_exit:
12879  55D6 FD AB         swp b
12880  55D8 D8            push b
12881  55D9 07 6C 20      call print100
12882  55DC 51 02 00      add sp, 2
12883  55DF FD AB         swp b
12884  55E1 D8            push b
12885  55E2 3B 85 64      mov d, _dist_1 ; $dist_1
12886  55E5 2A            mov b, [d]
12887  55E6 FD AB         swp b
12888  55E8 D8            push b
12889  55E9 07 BA 07      call printf
12890  55EC 51 04 00      add sp, 4
12891  55EF             _if206_exit:
12892  55EF             _if205_exit:
12893  55EF             _if204_exit:
12894  55EF             _if196_exit:
12895  55EF F9            leave
12896  55F0 09            ret
12897  55F1             
12898  55F1             ship_destroyed:
12899  55F1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12900  55F4             ;; puts("The Enterprise has been destroyed. The Federation will be conquered.\n"); 
12901  55F4 26 16 76      mov b, _s155 ; "The Enterprise has been destroyed. The Federation will be conquered.\n"
12902  55F7 FD AB         swp b
12903  55F9 D8            push b
12904  55FA 07 4A 15      call puts
12905  55FD 51 02 00      add sp, 2
12906  5600             ;; end_of_time(); 
12907  5600 07 05 56      call end_of_time
12908  5603 F9            leave
12909  5604 09            ret
12910  5605             
12911  5605             end_of_time:
12912  5605 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12913  5608             ;; printf("It is stardate %d.\n\n",  FROM_FIXED(stardate)); 
12914  5608 3B BD 62      mov d, _stardate ; $stardate
12915  560B 2A            mov b, [d]
12916  560C FD AB         swp b
12917  560E D8            push b
12918  560F 07 46 1D      call FROM_FIXED
12919  5612 51 02 00      add sp, 2
12920  5615 FD AB         swp b
12921  5617 D8            push b
12922  5618 26 5C 76      mov b, _s156 ; "It is stardate %d.\n\n"
12923  561B FD AB         swp b
12924  561D D8            push b
12925  561E 07 BA 07      call printf
12926  5621 51 04 00      add sp, 4
12927  5624             ;; resign_commision(); 
12928  5624 07 29 56      call resign_commision
12929  5627 F9            leave
12930  5628 09            ret
12931  5629             
12932  5629             resign_commision:
12933  5629 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12934  562C             ;; printf("There were %d Klingon Battlecruisers left at the end of your mission.\n\n", klingons_left); 
12935  562C 3B 97 62      mov d, _klingons_left ; $klingons_left
12936  562F 32            mov bl, [d]
12937  5630 A7 00         mov bh, 0
12938  5632 DD            push bl
12939  5633 26 71 76      mov b, _s157 ; "There were %d Klingon Battlecruisers left at the end of your mission.\n\n"
12940  5636 FD AB         swp b
12941  5638 D8            push b
12942  5639 07 BA 07      call printf
12943  563C 51 03 00      add sp, 3
12944  563F             ;; end_of_game(); 
12945  563F 07 CB 56      call end_of_game
12946  5642 F9            leave
12947  5643 09            ret
12948  5644             
12949  5644             won_game:
12950  5644 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12951  5647             ;; puts("Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"); 
12952  5647 26 B9 76      mov b, _s158 ; "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"
12953  564A FD AB         swp b
12954  564C D8            push b
12955  564D 07 4A 15      call puts
12956  5650 51 02 00      add sp, 2
12957  5653             ;; if (FROM_FIXED(stardate) - time_start > 0) 
12958  5653             _if212_cond:
12959  5653 3B BD 62      mov d, _stardate ; $stardate
12960  5656 2A            mov b, [d]
12961  5657 FD AB         swp b
12962  5659 D8            push b
12963  565A 07 46 1D      call FROM_FIXED
12964  565D 51 02 00      add sp, 2
12965  5660             ; START TERMS
12966  5660 D7            push a
12967  5661 11            mov a, b
12968  5662 3B A1 62      mov d, _time_start ; $time_start
12969  5665 2A            mov b, [d]
12970  5666 60            sub a, b
12971  5667 27            mov b, a
12972  5668 E4            pop a
12973  5669             ; END TERMS
12974  5669             ; START RELATIONAL
12975  5669 D7            push a
12976  566A 11            mov a, b
12977  566B 26 00 00      mov b, $0
12978  566E B0            cmp a, b
12979  566F FD 81         sgu ; > (unsigned)
12980  5671 E4            pop a
12981  5672             ; END RELATIONAL
12982  5672 C0 00 00      cmp b, 0
12983  5675 C6 C6 56      je _if212_exit
12984  5678             _if212_true:
12985  5678             ;; printf("Your efficiency rating is %s\n", 
12986  5678 3B 96 62      mov d, _total_klingons ; $total_klingons
12987  567B 32            mov bl, [d]
12988  567C A7 00         mov bh, 0
12989  567E FD AB         swp b
12990  5680 D8            push b
12991  5681 07 57 1D      call TO_FIXED00
12992  5684 51 02 00      add sp, 2
12993  5687             ; START FACTORS
12994  5687 D7            push a
12995  5688 11            mov a, b
12996  5689 3B BD 62      mov d, _stardate ; $stardate
12997  568C 2A            mov b, [d]
12998  568D FD AB         swp b
12999  568F D8            push b
13000  5690 07 46 1D      call FROM_FIXED
13001  5693 51 02 00      add sp, 2
13002  5696             ; START TERMS
13003  5696 D7            push a
13004  5697 11            mov a, b
13005  5698 3B A1 62      mov d, _time_start ; $time_start
13006  569B 2A            mov b, [d]
13007  569C 60            sub a, b
13008  569D 27            mov b, a
13009  569E E4            pop a
13010  569F             ; END TERMS
13011  569F AE            div a, b
13012  56A0 27            mov b, a
13013  56A1 E4            pop a
13014  56A2             ; END FACTORS
13015  56A2 FD AB         swp b
13016  56A4 D8            push b
13017  56A5 07 94 60      call square00
13018  56A8 51 02 00      add sp, 2
13019  56AB FD AB         swp b
13020  56AD D8            push b
13021  56AE 07 6C 20      call print100
13022  56B1 51 02 00      add sp, 2
13023  56B4 FD AB         swp b
13024  56B6 D8            push b
13025  56B7 26 21 77      mov b, _s159 ; "Your efficiency rating is %s\n"
13026  56BA FD AB         swp b
13027  56BC D8            push b
13028  56BD 07 BA 07      call printf
13029  56C0 51 04 00      add sp, 4
13030  56C3 0A C6 56      jmp _if212_exit
13031  56C6             _if212_exit:
13032  56C6             ;; end_of_game(); 
13033  56C6 07 CB 56      call end_of_game
13034  56C9 F9            leave
13035  56CA 09            ret
13036  56CB             
13037  56CB             end_of_game:
13038  56CB F8 00 00      enter 0 ; (push bp; mov bp, sp)
13039  56CE             ;; char x[4]; 
13040  56CE 52 04 00      sub sp, 4 ; x
13041  56D1             ;; if (starbases_left > 0) { 
13042  56D1             _if213_cond:
13043  56D1 3B C2 61      mov d, _starbases_left ; $starbases_left
13044  56D4 32            mov bl, [d]
13045  56D5 A7 00         mov bh, 0
13046  56D7             ; START RELATIONAL
13047  56D7 D7            push a
13048  56D8 11            mov a, b
13049  56D9 26 00 00      mov b, $0
13050  56DC B0            cmp a, b
13051  56DD FD 7F         sgt ; >
13052  56DF E4            pop a
13053  56E0             ; END RELATIONAL
13054  56E0 C0 00 00      cmp b, 0
13055  56E3 C6 54 57      je _if213_exit
13056  56E6             _if213_true:
13057  56E6             ;; puts("The Federation is in need of a new starship commander"); 
13058  56E6 26 3F 77      mov b, _s160 ; "The Federation is in need of a new starship commander"
13059  56E9 FD AB         swp b
13060  56EB D8            push b
13061  56EC 07 4A 15      call puts
13062  56EF 51 02 00      add sp, 2
13063  56F2             ;; puts(" for a similar mission.\n"); 
13064  56F2 26 75 77      mov b, _s161 ; " for a similar mission.\n"
13065  56F5 FD AB         swp b
13066  56F7 D8            push b
13067  56F8 07 4A 15      call puts
13068  56FB 51 02 00      add sp, 2
13069  56FE             ;; puts("If there is a volunteer, let him step forward and"); 
13070  56FE 26 8E 77      mov b, _s162 ; "If there is a volunteer, let him step forward and"
13071  5701 FD AB         swp b
13072  5703 D8            push b
13073  5704 07 4A 15      call puts
13074  5707 51 02 00      add sp, 2
13075  570A             ;; puts(" enter aye: "); 
13076  570A 26 C0 77      mov b, _s163 ; " enter aye: "
13077  570D FD AB         swp b
13078  570F D8            push b
13079  5710 07 4A 15      call puts
13080  5713 51 02 00      add sp, 2
13081  5716             ;; input(x,4); 
13082  5716 26 04 00      mov b, $4
13083  5719 DD            push bl
13084  571A FA FD FF      lea d, [bp + -3] ; $x
13085  571D 2D            mov b, d
13086  571E FD AB         swp b
13087  5720 D8            push b
13088  5721 07 DA 1D      call input
13089  5724 51 03 00      add sp, 3
13090  5727             ;; if (!strncmp(x, "aye", 3)) 
13091  5727             _if214_cond:
13092  5727 26 03 00      mov b, $3
13093  572A FD AB         swp b
13094  572C D8            push b
13095  572D 26 CD 77      mov b, _s164 ; "aye"
13096  5730 FD AB         swp b
13097  5732 D8            push b
13098  5733 FA FD FF      lea d, [bp + -3] ; $x
13099  5736 2D            mov b, d
13100  5737 FD AB         swp b
13101  5739 D8            push b
13102  573A 07 D3 04      call strncmp
13103  573D 51 06 00      add sp, 6
13104  5740 C0 00 00      cmp b, 0
13105  5743 FD 71         seq ; !
13106  5745 C0 00 00      cmp b, 0
13107  5748 C6 51 57      je _if214_exit
13108  574B             _if214_true:
13109  574B             ;; new_game(); 
13110  574B 07 8F 21      call new_game
13111  574E 0A 51 57      jmp _if214_exit
13112  5751             _if214_exit:
13113  5751 0A 54 57      jmp _if213_exit
13114  5754             _if213_exit:
13115  5754             ;; exit(); 
13116  5754 07 D7 05      call exit
13117  5757 F9            leave
13118  5758 09            ret
13119  5759             
13120  5759             klingons_move:
13121  5759 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13122  575C             ;; int i; 
13123  575C 52 02 00      sub sp, 2 ; i
13124  575F             ;; struct klingon *k; 
13125  575F 52 02 00      sub sp, 2 ; k
13126  5762             ;; k = &kdata; 
13127  5762 FA FD FF      lea d, [bp + -3] ; $k
13128  5765 DA            push d
13129  5766 3B 89 62      mov d, _kdata_data ; $kdata
13130  5769 2D            mov b, d
13131  576A E7            pop d
13132  576B FD 43         mov [d], b
13133  576D             ;; for (i = 0; i <= 2; i++) { 
13134  576D             _for215_init:
13135  576D FA FF FF      lea d, [bp + -1] ; $i
13136  5770 DA            push d
13137  5771 26 00 00      mov b, $0
13138  5774 E7            pop d
13139  5775 FD 43         mov [d], b
13140  5777             _for215_cond:
13141  5777 FA FF FF      lea d, [bp + -1] ; $i
13142  577A 2A            mov b, [d]
13143  577B             ; START RELATIONAL
13144  577B D7            push a
13145  577C 11            mov a, b
13146  577D 26 02 00      mov b, $2
13147  5780 B0            cmp a, b
13148  5781 FD 74         sle ; <= (signed)
13149  5783 E4            pop a
13150  5784             ; END RELATIONAL
13151  5784 C0 00 00      cmp b, 0
13152  5787 C6 F9 57      je _for215_exit
13153  578A             _for215_block:
13154  578A             ;; if (k->energy > 0) { 
13155  578A             _if216_cond:
13156  578A FA FD FF      lea d, [bp + -3] ; $k
13157  578D FD 2A         mov d, [d]
13158  578F 58 02 00      add d, 2
13159  5792 2A            mov b, [d]
13160  5793             ; START RELATIONAL
13161  5793 D7            push a
13162  5794 11            mov a, b
13163  5795 26 00 00      mov b, $0
13164  5798 B0            cmp a, b
13165  5799 FD 7F         sgt ; >
13166  579B E4            pop a
13167  579C             ; END RELATIONAL
13168  579C C0 00 00      cmp b, 0
13169  579F C6 D8 57      je _if216_exit
13170  57A2             _if216_true:
13171  57A2             ;; wipe_klingon(k); 
13172  57A2 FA FD FF      lea d, [bp + -3] ; $k
13173  57A5 2A            mov b, [d]
13174  57A6 FD AB         swp b
13175  57A8 D8            push b
13176  57A9 07 2B 3C      call wipe_klingon
13177  57AC 51 02 00      add sp, 2
13178  57AF             ;; find_set_empty_place( 	3        , k->y, k->x); 
13179  57AF FA FD FF      lea d, [bp + -3] ; $k
13180  57B2 FD 2A         mov d, [d]
13181  57B4 58 01 00      add d, 1
13182  57B7 32            mov bl, [d]
13183  57B8 A7 00         mov bh, 0
13184  57BA FD AB         swp b
13185  57BC D8            push b
13186  57BD FA FD FF      lea d, [bp + -3] ; $k
13187  57C0 FD 2A         mov d, [d]
13188  57C2 58 00 00      add d, 0
13189  57C5 32            mov bl, [d]
13190  57C6 A7 00         mov bh, 0
13191  57C8 FD AB         swp b
13192  57CA D8            push b
13193  57CB 26 03 00      mov b, $3
13194  57CE DD            push bl
13195  57CF 07 9B 5D      call find_set_empty_place
13196  57D2 51 05 00      add sp, 5
13197  57D5 0A D8 57      jmp _if216_exit
13198  57D8             _if216_exit:
13199  57D8             ;; k++; 
13200  57D8 FA FD FF      lea d, [bp + -3] ; $k
13201  57DB 2A            mov b, [d]
13202  57DC FD 77         inc b
13203  57DE FD 77         inc b
13204  57E0 FA FD FF      lea d, [bp + -3] ; $k
13205  57E3 FD 43         mov [d], b
13206  57E5 FD 7D         dec b
13207  57E7 FD 7D         dec b
13208  57E9             _for215_update:
13209  57E9 FA FF FF      lea d, [bp + -1] ; $i
13210  57EC 2A            mov b, [d]
13211  57ED FD 77         inc b
13212  57EF FA FF FF      lea d, [bp + -1] ; $i
13213  57F2 FD 43         mov [d], b
13214  57F4 FD 7D         dec b
13215  57F6 0A 77 57      jmp _for215_cond
13216  57F9             _for215_exit:
13217  57F9             ;; klingons_shoot(); 
13218  57F9 07 FE 57      call klingons_shoot
13219  57FC F9            leave
13220  57FD 09            ret
13221  57FE             
13222  57FE             klingons_shoot:
13223  57FE F8 00 00      enter 0 ; (push bp; mov bp, sp)
13224  5801             ;; unsigned char                         r; 
13225  5801 52 01 00      sub sp, 1 ; r
13226  5804             ;; long unsigned int        h; 
13227  5804 52 04 00      sub sp, 4 ; h
13228  5807             ;; unsigned char                         i; 
13229  5807 52 01 00      sub sp, 1 ; i
13230  580A             ;; struct klingon *k; 
13231  580A 52 02 00      sub sp, 2 ; k
13232  580D             ;; long unsigned int        ratio; 
13233  580D 52 04 00      sub sp, 4 ; ratio
13234  5810             ;; k = &kdata; 
13235  5810 FA F9 FF      lea d, [bp + -7] ; $k
13236  5813 DA            push d
13237  5814 3B 89 62      mov d, _kdata_data ; $kdata
13238  5817 2D            mov b, d
13239  5818 E7            pop d
13240  5819 FD 43         mov [d], b
13241  581B             ;; if (klingons <= 0) 
13242  581B             _if217_cond:
13243  581B 3B 95 62      mov d, _klingons ; $klingons
13244  581E 32            mov bl, [d]
13245  581F A7 00         mov bh, 0
13246  5821             ; START RELATIONAL
13247  5821 D7            push a
13248  5822 11            mov a, b
13249  5823 26 00 00      mov b, $0
13250  5826 B0            cmp a, b
13251  5827 FD 76         sleu ; <= (unsigned)
13252  5829 E4            pop a
13253  582A             ; END RELATIONAL
13254  582A C0 00 00      cmp b, 0
13255  582D C6 35 58      je _if217_exit
13256  5830             _if217_true:
13257  5830             ;; return; 
13258  5830 F9            leave
13259  5831 09            ret
13260  5832 0A 35 58      jmp _if217_exit
13261  5835             _if217_exit:
13262  5835             ;; if (docked) { 
13263  5835             _if218_cond:
13264  5835 3B E2 61      mov d, _docked ; $docked
13265  5838 32            mov bl, [d]
13266  5839 A7 00         mov bh, 0
13267  583B C0 00 00      cmp b, 0
13268  583E C6 52 58      je _if218_exit
13269  5841             _if218_true:
13270  5841             ;; puts("Starbase shields protect the Enterprise\n"); 
13271  5841 26 D1 77      mov b, _s165 ; "Starbase shields protect the Enterprise\n"
13272  5844 FD AB         swp b
13273  5846 D8            push b
13274  5847 07 4A 15      call puts
13275  584A 51 02 00      add sp, 2
13276  584D             ;; return; 
13277  584D F9            leave
13278  584E 09            ret
13279  584F 0A 52 58      jmp _if218_exit
13280  5852             _if218_exit:
13281  5852             ;; for (i = 0; i <= 2; i++) { 
13282  5852             _for219_init:
13283  5852 FA FB FF      lea d, [bp + -5] ; $i
13284  5855 DA            push d
13285  5856 26 00 00      mov b, $0
13286  5859 E7            pop d
13287  585A FD 3E         mov [d], bl
13288  585C             _for219_cond:
13289  585C FA FB FF      lea d, [bp + -5] ; $i
13290  585F 32            mov bl, [d]
13291  5860 A7 00         mov bh, 0
13292  5862             ; START RELATIONAL
13293  5862 D7            push a
13294  5863 11            mov a, b
13295  5864 26 02 00      mov b, $2
13296  5867 B0            cmp a, b
13297  5868 FD 76         sleu ; <= (unsigned)
13298  586A E4            pop a
13299  586B             ; END RELATIONAL
13300  586B C0 00 00      cmp b, 0
13301  586E C6 EA 5A      je _for219_exit
13302  5871             _for219_block:
13303  5871             ;; if (k->energy > 0) { 
13304  5871             _if220_cond:
13305  5871 FA F9 FF      lea d, [bp + -7] ; $k
13306  5874 FD 2A         mov d, [d]
13307  5876 58 02 00      add d, 2
13308  5879 2A            mov b, [d]
13309  587A             ; START RELATIONAL
13310  587A D7            push a
13311  587B 11            mov a, b
13312  587C 26 00 00      mov b, $0
13313  587F B0            cmp a, b
13314  5880 FD 7F         sgt ; >
13315  5882 E4            pop a
13316  5883             ; END RELATIONAL
13317  5883 C0 00 00      cmp b, 0
13318  5886 C6 C7 5A      je _if220_exit
13319  5889             _if220_true:
13320  5889             ;; h = k->energy * (200UL + get_rand(100)); 
13321  5889 FA FC FF      lea d, [bp + -4] ; $h
13322  588C DA            push d
13323  588D FA F9 FF      lea d, [bp + -7] ; $k
13324  5890 FD 2A         mov d, [d]
13325  5892 58 02 00      add d, 2
13326  5895 2A            mov b, [d]
13327  5896             ; START FACTORS
13328  5896 D7            push a
13329  5897 11            mov a, b
13330  5898 26 C8 00      mov b, 200
13331  589B 38 00 00      mov c, 0
13332  589E             ; START TERMS
13333  589E D7            push a
13334  589F FD D8         push g
13335  58A1 11            mov a, b
13336  58A2 FD 7A         mov g, c
13337  58A4 26 64 00      mov b, $64
13338  58A7 FD AB         swp b
13339  58A9 D8            push b
13340  58AA 07 7A 1D      call get_rand
13341  58AD 51 02 00      add sp, 2
13342  58B0 54            add a, b
13343  58B1 D7            push a
13344  58B2 FD 12         mov a, g
13345  58B4 28            mov b, c
13346  58B5 5C            adc a, b
13347  58B6 39            mov c, a
13348  58B7 E5            pop b
13349  58B8 FD F1         pop g
13350  58BA E4            pop a
13351  58BB             ; END TERMS
13352  58BB AC            mul a, b ; *
13353  58BC 11            mov a, b
13354  58BD 27            mov b, a
13355  58BE E4            pop a
13356  58BF             ; END FACTORS
13357  58BF E7            pop d
13358  58C0 FD 43         mov [d], b
13359  58C2 28            mov b, c
13360  58C3 FD 44 02 00   mov [d + 2], b
13361  58C7             ;; h =h* 100;	/* Ready for division in fixed */ 
13362  58C7 FA FC FF      lea d, [bp + -4] ; $h
13363  58CA DA            push d
13364  58CB FA FC FF      lea d, [bp + -4] ; $h
13365  58CE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13366  58D1 FD 39         mov c, b ; And place it into C
13367  58D3 2A            mov b, [d] ; Lower Word in B
13368  58D4             ; START FACTORS
13369  58D4 D7            push a
13370  58D5 11            mov a, b
13371  58D6 26 64 00      mov b, $64
13372  58D9 AC            mul a, b ; *
13373  58DA 11            mov a, b
13374  58DB 27            mov b, a
13375  58DC E4            pop a
13376  58DD             ; END FACTORS
13377  58DD E7            pop d
13378  58DE FD 43         mov [d], b
13379  58E0 28            mov b, c
13380  58E1 FD 44 02 00   mov [d + 2], b
13381  58E5             ;; h =h/ distance_to(k); 
13382  58E5 FA FC FF      lea d, [bp + -4] ; $h
13383  58E8 DA            push d
13384  58E9 FA FC FF      lea d, [bp + -4] ; $h
13385  58EC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13386  58EF FD 39         mov c, b ; And place it into C
13387  58F1 2A            mov b, [d] ; Lower Word in B
13388  58F2             ; START FACTORS
13389  58F2 D7            push a
13390  58F3 11            mov a, b
13391  58F4 FA F9 FF      lea d, [bp + -7] ; $k
13392  58F7 2A            mov b, [d]
13393  58F8 FD AB         swp b
13394  58FA D8            push b
13395  58FB 07 0C 61      call distance_to
13396  58FE 51 02 00      add sp, 2
13397  5901 AE            div a, b
13398  5902 27            mov b, a
13399  5903 E4            pop a
13400  5904             ; END FACTORS
13401  5904 E7            pop d
13402  5905 FD 43         mov [d], b
13403  5907 28            mov b, c
13404  5908 FD 44 02 00   mov [d + 2], b
13405  590C             ;; shield = shield - FROM_FIXED00(h); 
13406  590C 3B 9E 62      mov d, _shield ; $shield
13407  590F DA            push d
13408  5910 3B 9E 62      mov d, _shield ; $shield
13409  5913 2A            mov b, [d]
13410  5914             ; START TERMS
13411  5914 D7            push a
13412  5915 11            mov a, b
13413  5916 FA FC FF      lea d, [bp + -4] ; $h
13414  5919 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13415  591C FD 39         mov c, b ; And place it into C
13416  591E 2A            mov b, [d] ; Lower Word in B
13417  591F FD AB         swp b
13418  5921 D8            push b
13419  5922 07 69 1D      call FROM_FIXED00
13420  5925 51 02 00      add sp, 2
13421  5928 60            sub a, b
13422  5929 27            mov b, a
13423  592A E4            pop a
13424  592B             ; END TERMS
13425  592B E7            pop d
13426  592C FD 43         mov [d], b
13427  592E             ;; k->energy = (k->energy * 100) / (300 + get_rand(100)); 
13428  592E FA F9 FF      lea d, [bp + -7] ; $k
13429  5931 FD 2A         mov d, [d]
13430  5933 58 02 00      add d, 2
13431  5936 DA            push d
13432  5937 FA F9 FF      lea d, [bp + -7] ; $k
13433  593A FD 2A         mov d, [d]
13434  593C 58 02 00      add d, 2
13435  593F 2A            mov b, [d]
13436  5940             ; START FACTORS
13437  5940 D7            push a
13438  5941 11            mov a, b
13439  5942 26 64 00      mov b, $64
13440  5945 AC            mul a, b ; *
13441  5946 11            mov a, b
13442  5947 27            mov b, a
13443  5948 E4            pop a
13444  5949             ; END FACTORS
13445  5949             ; START FACTORS
13446  5949 D7            push a
13447  594A 11            mov a, b
13448  594B 26 2C 01      mov b, $12c
13449  594E             ; START TERMS
13450  594E D7            push a
13451  594F 11            mov a, b
13452  5950 26 64 00      mov b, $64
13453  5953 FD AB         swp b
13454  5955 D8            push b
13455  5956 07 7A 1D      call get_rand
13456  5959 51 02 00      add sp, 2
13457  595C 56            add b, a
13458  595D E4            pop a
13459  595E             ; END TERMS
13460  595E AE            div a, b
13461  595F 27            mov b, a
13462  5960 E4            pop a
13463  5961             ; END FACTORS
13464  5961 E7            pop d
13465  5962 FD 43         mov [d], b
13466  5964             ;; printf("%d unit hit on Enterprise from sector %d, %d\n", (unsigned)FROM_FIXED00(h), k->y, k->x); 
13467  5964 FA F9 FF      lea d, [bp + -7] ; $k
13468  5967 FD 2A         mov d, [d]
13469  5969 58 01 00      add d, 1
13470  596C 32            mov bl, [d]
13471  596D A7 00         mov bh, 0
13472  596F DD            push bl
13473  5970 FA F9 FF      lea d, [bp + -7] ; $k
13474  5973 FD 2A         mov d, [d]
13475  5975 58 00 00      add d, 0
13476  5978 32            mov bl, [d]
13477  5979 A7 00         mov bh, 0
13478  597B DD            push bl
13479  597C FA FC FF      lea d, [bp + -4] ; $h
13480  597F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13481  5982 FD 39         mov c, b ; And place it into C
13482  5984 2A            mov b, [d] ; Lower Word in B
13483  5985 FD AB         swp b
13484  5987 D8            push b
13485  5988 26 FA 77      mov b, _s166 ; "%d unit hit on Enterprise from sector %d, %d\n"
13486  598B FD AB         swp b
13487  598D D8            push b
13488  598E 07 BA 07      call printf
13489  5991 51 06 00      add sp, 6
13490  5994             ;; if (shield <= 0) { 
13491  5994             _if221_cond:
13492  5994 3B 9E 62      mov d, _shield ; $shield
13493  5997 2A            mov b, [d]
13494  5998             ; START RELATIONAL
13495  5998 D7            push a
13496  5999 11            mov a, b
13497  599A 26 00 00      mov b, $0
13498  599D B0            cmp a, b
13499  599E FD 74         sle ; <= (signed)
13500  59A0 E4            pop a
13501  59A1             ; END RELATIONAL
13502  59A1 C0 00 00      cmp b, 0
13503  59A4 C6 B7 59      je _if221_exit
13504  59A7             _if221_true:
13505  59A7             ;; putchar('\n'); 
13506  59A7 26 0A 00      mov b, $a
13507  59AA DD            push bl
13508  59AB 07 14 15      call putchar
13509  59AE 51 01 00      add sp, 1
13510  59B1             ;; ship_destroyed(); 
13511  59B1 07 F1 55      call ship_destroyed
13512  59B4 0A B7 59      jmp _if221_exit
13513  59B7             _if221_exit:
13514  59B7             ;; printf("    <Shields down to %d units>\n\n", shield); 
13515  59B7 3B 9E 62      mov d, _shield ; $shield
13516  59BA 2A            mov b, [d]
13517  59BB FD AB         swp b
13518  59BD D8            push b
13519  59BE 26 28 78      mov b, _s167 ; "    <Shields down to %d units>\n\n"
13520  59C1 FD AB         swp b
13521  59C3 D8            push b
13522  59C4 07 BA 07      call printf
13523  59C7 51 04 00      add sp, 4
13524  59CA             ;; if (h >= 20) { 
13525  59CA             _if222_cond:
13526  59CA FA FC FF      lea d, [bp + -4] ; $h
13527  59CD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13528  59D0 FD 39         mov c, b ; And place it into C
13529  59D2 2A            mov b, [d] ; Lower Word in B
13530  59D3             ; START RELATIONAL
13531  59D3 D7            push a
13532  59D4 FD D8         push g
13533  59D6 11            mov a, b
13534  59D7 FD 7A         mov g, c
13535  59D9 26 14 00      mov b, $14
13536  59DC 38 00 00      mov c, 0
13537  59DF FD 82         sgeu
13538  59E1 FD F1         pop g
13539  59E3 E4            pop a
13540  59E4             ; END RELATIONAL
13541  59E4 C0 00 00      cmp b, 0
13542  59E7 C6 C4 5A      je _if222_exit
13543  59EA             _if222_true:
13544  59EA             ;; ratio = ((int)h)/shield; 
13545  59EA FA F5 FF      lea d, [bp + -11] ; $ratio
13546  59ED DA            push d
13547  59EE FA FC FF      lea d, [bp + -4] ; $h
13548  59F1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13549  59F4 FD 39         mov c, b ; And place it into C
13550  59F6 2A            mov b, [d] ; Lower Word in B
13551  59F7             ; START FACTORS
13552  59F7 D7            push a
13553  59F8 11            mov a, b
13554  59F9 3B 9E 62      mov d, _shield ; $shield
13555  59FC 2A            mov b, [d]
13556  59FD AE            div a, b
13557  59FE 27            mov b, a
13558  59FF E4            pop a
13559  5A00             ; END FACTORS
13560  5A00 E7            pop d
13561  5A01 FD 43         mov [d], b
13562  5A03 28            mov b, c
13563  5A04 FD 44 02 00   mov [d + 2], b
13564  5A08             ;; if (get_rand(10) <= 6 && ratio > 2) { 
13565  5A08             _if223_cond:
13566  5A08 26 0A 00      mov b, $a
13567  5A0B FD AB         swp b
13568  5A0D D8            push b
13569  5A0E 07 7A 1D      call get_rand
13570  5A11 51 02 00      add sp, 2
13571  5A14             ; START RELATIONAL
13572  5A14 D7            push a
13573  5A15 11            mov a, b
13574  5A16 26 06 00      mov b, $6
13575  5A19 B0            cmp a, b
13576  5A1A FD 74         sle ; <= (signed)
13577  5A1C E4            pop a
13578  5A1D             ; END RELATIONAL
13579  5A1D             ; START LOGICAL AND
13580  5A1D D7            push a
13581  5A1E 11            mov a, b
13582  5A1F FA F5 FF      lea d, [bp + -11] ; $ratio
13583  5A22 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13584  5A25 FD 39         mov c, b ; And place it into C
13585  5A27 2A            mov b, [d] ; Lower Word in B
13586  5A28             ; START RELATIONAL
13587  5A28 D7            push a
13588  5A29 FD D8         push g
13589  5A2B 11            mov a, b
13590  5A2C FD 7A         mov g, c
13591  5A2E 26 02 00      mov b, $2
13592  5A31 38 00 00      mov c, 0
13593  5A34 FD 81         sgu
13594  5A36 FD F1         pop g
13595  5A38 E4            pop a
13596  5A39             ; END RELATIONAL
13597  5A39 FD 22 00 00   mov g, 0
13598  5A3D FD B1 00 00   sand32 ga, cb
13598  5A41 00 00 
13599  5A43 E4            pop a
13600  5A44             ; END LOGICAL AND
13601  5A44 C0 00 00      cmp b, 0
13602  5A47 C6 C1 5A      je _if223_exit
13603  5A4A             _if223_true:
13604  5A4A             ;; r = rand8(); 
13605  5A4A FA 00 00      lea d, [bp + 0] ; $r
13606  5A4D DA            push d
13607  5A4E 07 C9 1D      call rand8
13608  5A51 E7            pop d
13609  5A52 FD 3E         mov [d], bl
13610  5A54             ;; damage[r] =damage[r] - ratio + get_rand(50); 
13611  5A54 3B A5 62      mov d, _damage_data ; $damage
13612  5A57 D7            push a
13613  5A58 DA            push d
13614  5A59 FA 00 00      lea d, [bp + 0] ; $r
13615  5A5C 32            mov bl, [d]
13616  5A5D A7 00         mov bh, 0
13617  5A5F E7            pop d
13618  5A60 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13619  5A64 E4            pop a
13620  5A65 DA            push d
13621  5A66 3B A5 62      mov d, _damage_data ; $damage
13622  5A69 D7            push a
13623  5A6A DA            push d
13624  5A6B FA 00 00      lea d, [bp + 0] ; $r
13625  5A6E 32            mov bl, [d]
13626  5A6F A7 00         mov bh, 0
13627  5A71 E7            pop d
13628  5A72 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13629  5A76 E4            pop a
13630  5A77 2A            mov b, [d]
13631  5A78             ; START TERMS
13632  5A78 D7            push a
13633  5A79 11            mov a, b
13634  5A7A FA F5 FF      lea d, [bp + -11] ; $ratio
13635  5A7D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13636  5A80 FD 39         mov c, b ; And place it into C
13637  5A82 2A            mov b, [d] ; Lower Word in B
13638  5A83 60            sub a, b
13639  5A84 27            mov b, a
13640  5A85 11            mov a, b
13641  5A86 FD 7A         mov g, c
13642  5A88 26 32 00      mov b, $32
13643  5A8B FD AB         swp b
13644  5A8D D8            push b
13645  5A8E 07 7A 1D      call get_rand
13646  5A91 51 02 00      add sp, 2
13647  5A94 54            add a, b
13648  5A95 D7            push a
13649  5A96 FD 12         mov a, g
13650  5A98 28            mov b, c
13651  5A99 5C            adc a, b
13652  5A9A 39            mov c, a
13653  5A9B E5            pop b
13654  5A9C E4            pop a
13655  5A9D             ; END TERMS
13656  5A9D E7            pop d
13657  5A9E FD 43         mov [d], b
13658  5AA0             ;; printf("Damage Control reports\n%s damaged by hit\n\n", get_device_name(r)); 
13659  5AA0 FA 00 00      lea d, [bp + 0] ; $r
13660  5AA3 32            mov bl, [d]
13661  5AA4 A7 00         mov bh, 0
13662  5AA6 FD AB         swp b
13663  5AA8 D8            push b
13664  5AA9 07 5C 5E      call get_device_name
13665  5AAC 51 02 00      add sp, 2
13666  5AAF FD AB         swp b
13667  5AB1 D8            push b
13668  5AB2 26 49 78      mov b, _s168 ; "Damage Control reports\n%s damaged by hit\n\n"
13669  5AB5 FD AB         swp b
13670  5AB7 D8            push b
13671  5AB8 07 BA 07      call printf
13672  5ABB 51 04 00      add sp, 4
13673  5ABE 0A C1 5A      jmp _if223_exit
13674  5AC1             _if223_exit:
13675  5AC1 0A C4 5A      jmp _if222_exit
13676  5AC4             _if222_exit:
13677  5AC4 0A C7 5A      jmp _if220_exit
13678  5AC7             _if220_exit:
13679  5AC7             ;; k++; 
13680  5AC7 FA F9 FF      lea d, [bp + -7] ; $k
13681  5ACA 2A            mov b, [d]
13682  5ACB FD 77         inc b
13683  5ACD FD 77         inc b
13684  5ACF FA F9 FF      lea d, [bp + -7] ; $k
13685  5AD2 FD 43         mov [d], b
13686  5AD4 FD 7D         dec b
13687  5AD6 FD 7D         dec b
13688  5AD8             _for219_update:
13689  5AD8 FA FB FF      lea d, [bp + -5] ; $i
13690  5ADB 32            mov bl, [d]
13691  5ADC A7 00         mov bh, 0
13692  5ADE FD 77         inc b
13693  5AE0 FA FB FF      lea d, [bp + -5] ; $i
13694  5AE3 FD 43         mov [d], b
13695  5AE5 FD 7D         dec b
13696  5AE7 0A 5C 58      jmp _for219_cond
13697  5AEA             _for219_exit:
13698  5AEA F9            leave
13699  5AEB 09            ret
13700  5AEC             
13701  5AEC             repair_damage:
13702  5AEC F8 00 00      enter 0 ; (push bp; mov bp, sp)
13703  5AEF             ;; int i; 
13704  5AEF 52 02 00      sub sp, 2 ; i
13705  5AF2             ;; int d1; 
13706  5AF2 52 02 00      sub sp, 2 ; d1
13707  5AF5             ;; unsigned int        repair_factor;		/* Repair Factor */ 
13708  5AF5 52 02 00      sub sp, 2 ; repair_factor
13709  5AF8             ;; repair_factor = warp; 
13710  5AF8 FA FB FF      lea d, [bp + -5] ; $repair_factor
13711  5AFB DA            push d
13712  5AFC FA 05 00      lea d, [bp + 5] ; $warp
13713  5AFF 2A            mov b, [d]
13714  5B00 E7            pop d
13715  5B01 FD 43         mov [d], b
13716  5B03             ;; if (warp >= 100) 
13717  5B03             _if224_cond:
13718  5B03 FA 05 00      lea d, [bp + 5] ; $warp
13719  5B06 2A            mov b, [d]
13720  5B07             ; START RELATIONAL
13721  5B07 D7            push a
13722  5B08 11            mov a, b
13723  5B09 26 64 00      mov b, $64
13724  5B0C B0            cmp a, b
13725  5B0D FD 82         sgeu ; >= (unsigned)
13726  5B0F E4            pop a
13727  5B10             ; END RELATIONAL
13728  5B10 C0 00 00      cmp b, 0
13729  5B13 C6 2C 5B      je _if224_exit
13730  5B16             _if224_true:
13731  5B16             ;; repair_factor = TO_FIXED00(1); 
13732  5B16 FA FB FF      lea d, [bp + -5] ; $repair_factor
13733  5B19 DA            push d
13734  5B1A 26 01 00      mov b, $1
13735  5B1D FD AB         swp b
13736  5B1F D8            push b
13737  5B20 07 57 1D      call TO_FIXED00
13738  5B23 51 02 00      add sp, 2
13739  5B26 E7            pop d
13740  5B27 FD 43         mov [d], b
13741  5B29 0A 2C 5B      jmp _if224_exit
13742  5B2C             _if224_exit:
13743  5B2C             ;; for (i = 1; i <= 8; i++) { 
13744  5B2C             _for225_init:
13745  5B2C FA FF FF      lea d, [bp + -1] ; $i
13746  5B2F DA            push d
13747  5B30 26 01 00      mov b, $1
13748  5B33 E7            pop d
13749  5B34 FD 43         mov [d], b
13750  5B36             _for225_cond:
13751  5B36 FA FF FF      lea d, [bp + -1] ; $i
13752  5B39 2A            mov b, [d]
13753  5B3A             ; START RELATIONAL
13754  5B3A D7            push a
13755  5B3B 11            mov a, b
13756  5B3C 26 08 00      mov b, $8
13757  5B3F B0            cmp a, b
13758  5B40 FD 74         sle ; <= (signed)
13759  5B42 E4            pop a
13760  5B43             ; END RELATIONAL
13761  5B43 C0 00 00      cmp b, 0
13762  5B46 C6 7F 5C      je _for225_exit
13763  5B49             _for225_block:
13764  5B49             ;; if (damage[i] < 0) { 
13765  5B49             _if226_cond:
13766  5B49 3B A5 62      mov d, _damage_data ; $damage
13767  5B4C D7            push a
13768  5B4D DA            push d
13769  5B4E FA FF FF      lea d, [bp + -1] ; $i
13770  5B51 2A            mov b, [d]
13771  5B52 E7            pop d
13772  5B53 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13773  5B57 E4            pop a
13774  5B58 2A            mov b, [d]
13775  5B59             ; START RELATIONAL
13776  5B59 D7            push a
13777  5B5A 11            mov a, b
13778  5B5B 26 00 00      mov b, $0
13779  5B5E B0            cmp a, b
13780  5B5F FD 73         slt ; < (signed)
13781  5B61 E4            pop a
13782  5B62             ; END RELATIONAL
13783  5B62 C0 00 00      cmp b, 0
13784  5B65 C6 6F 5C      je _if226_exit
13785  5B68             _if226_true:
13786  5B68             ;; damage[i] = damage[i] + repair_factor; 
13787  5B68 3B A5 62      mov d, _damage_data ; $damage
13788  5B6B D7            push a
13789  5B6C DA            push d
13790  5B6D FA FF FF      lea d, [bp + -1] ; $i
13791  5B70 2A            mov b, [d]
13792  5B71 E7            pop d
13793  5B72 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13794  5B76 E4            pop a
13795  5B77 DA            push d
13796  5B78 3B A5 62      mov d, _damage_data ; $damage
13797  5B7B D7            push a
13798  5B7C DA            push d
13799  5B7D FA FF FF      lea d, [bp + -1] ; $i
13800  5B80 2A            mov b, [d]
13801  5B81 E7            pop d
13802  5B82 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13803  5B86 E4            pop a
13804  5B87 2A            mov b, [d]
13805  5B88             ; START TERMS
13806  5B88 D7            push a
13807  5B89 11            mov a, b
13808  5B8A FA FB FF      lea d, [bp + -5] ; $repair_factor
13809  5B8D 2A            mov b, [d]
13810  5B8E 56            add b, a
13811  5B8F E4            pop a
13812  5B90             ; END TERMS
13813  5B90 E7            pop d
13814  5B91 FD 43         mov [d], b
13815  5B93             ;; if (damage[i] > -10 && damage[i] < 0)	/* -0.1 */ 
13816  5B93             _if227_cond:
13817  5B93 3B A5 62      mov d, _damage_data ; $damage
13818  5B96 D7            push a
13819  5B97 DA            push d
13820  5B98 FA FF FF      lea d, [bp + -1] ; $i
13821  5B9B 2A            mov b, [d]
13822  5B9C E7            pop d
13823  5B9D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13824  5BA1 E4            pop a
13825  5BA2 2A            mov b, [d]
13826  5BA3             ; START RELATIONAL
13827  5BA3 D7            push a
13828  5BA4 11            mov a, b
13829  5BA5 26 F6 FF      mov b, $fff6
13830  5BA8 B0            cmp a, b
13831  5BA9 FD 7F         sgt ; >
13832  5BAB E4            pop a
13833  5BAC             ; END RELATIONAL
13834  5BAC             ; START LOGICAL AND
13835  5BAC D7            push a
13836  5BAD 11            mov a, b
13837  5BAE 3B A5 62      mov d, _damage_data ; $damage
13838  5BB1 D7            push a
13839  5BB2 DA            push d
13840  5BB3 FA FF FF      lea d, [bp + -1] ; $i
13841  5BB6 2A            mov b, [d]
13842  5BB7 E7            pop d
13843  5BB8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13844  5BBC E4            pop a
13845  5BBD 2A            mov b, [d]
13846  5BBE             ; START RELATIONAL
13847  5BBE D7            push a
13848  5BBF 11            mov a, b
13849  5BC0 26 00 00      mov b, $0
13850  5BC3 B0            cmp a, b
13851  5BC4 FD 73         slt ; < (signed)
13852  5BC6 E4            pop a
13853  5BC7             ; END RELATIONAL
13854  5BC7 FD A7         sand a, b
13855  5BC9 E4            pop a
13856  5BCA             ; END LOGICAL AND
13857  5BCA C0 00 00      cmp b, 0
13858  5BCD C6 EB 5B      je _if227_else
13859  5BD0             _if227_true:
13860  5BD0             ;; damage[i] = -10; 
13861  5BD0 3B A5 62      mov d, _damage_data ; $damage
13862  5BD3 D7            push a
13863  5BD4 DA            push d
13864  5BD5 FA FF FF      lea d, [bp + -1] ; $i
13865  5BD8 2A            mov b, [d]
13866  5BD9 E7            pop d
13867  5BDA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13868  5BDE E4            pop a
13869  5BDF DA            push d
13870  5BE0 26 0A 00      mov b, $a
13871  5BE3 FD 97         neg b
13872  5BE5 E7            pop d
13873  5BE6 FD 43         mov [d], b
13874  5BE8 0A 6C 5C      jmp _if227_exit
13875  5BEB             _if227_else:
13876  5BEB             ;; if (damage[i] >= 0) { 
13877  5BEB             _if228_cond:
13878  5BEB 3B A5 62      mov d, _damage_data ; $damage
13879  5BEE D7            push a
13880  5BEF DA            push d
13881  5BF0 FA FF FF      lea d, [bp + -1] ; $i
13882  5BF3 2A            mov b, [d]
13883  5BF4 E7            pop d
13884  5BF5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13885  5BF9 E4            pop a
13886  5BFA 2A            mov b, [d]
13887  5BFB             ; START RELATIONAL
13888  5BFB D7            push a
13889  5BFC 11            mov a, b
13890  5BFD 26 00 00      mov b, $0
13891  5C00 B0            cmp a, b
13892  5C01 FD 80         sge ; >=
13893  5C03 E4            pop a
13894  5C04             ; END RELATIONAL
13895  5C04 C0 00 00      cmp b, 0
13896  5C07 C6 6C 5C      je _if228_exit
13897  5C0A             _if228_true:
13898  5C0A             ;; if (d1 != 1) { 
13899  5C0A             _if229_cond:
13900  5C0A FA FD FF      lea d, [bp + -3] ; $d1
13901  5C0D 2A            mov b, [d]
13902  5C0E             ; START RELATIONAL
13903  5C0E D7            push a
13904  5C0F 11            mov a, b
13905  5C10 26 01 00      mov b, $1
13906  5C13 B0            cmp a, b
13907  5C14 FD 72         sneq ; !=
13908  5C16 E4            pop a
13909  5C17             ; END RELATIONAL
13910  5C17 C0 00 00      cmp b, 0
13911  5C1A C6 37 5C      je _if229_exit
13912  5C1D             _if229_true:
13913  5C1D             ;; d1 = 1; 
13914  5C1D FA FD FF      lea d, [bp + -3] ; $d1
13915  5C20 DA            push d
13916  5C21 26 01 00      mov b, $1
13917  5C24 E7            pop d
13918  5C25 FD 43         mov [d], b
13919  5C27             ;; puts(dcr_1); 
13920  5C27 3B B4 63      mov d, _dcr_1 ; $dcr_1
13921  5C2A 2A            mov b, [d]
13922  5C2B FD AB         swp b
13923  5C2D D8            push b
13924  5C2E 07 4A 15      call puts
13925  5C31 51 02 00      add sp, 2
13926  5C34 0A 37 5C      jmp _if229_exit
13927  5C37             _if229_exit:
13928  5C37             ;; printf("    %s repair completed\n\n", 
13929  5C37 FA FF FF      lea d, [bp + -1] ; $i
13930  5C3A 2A            mov b, [d]
13931  5C3B FD AB         swp b
13932  5C3D D8            push b
13933  5C3E 07 5C 5E      call get_device_name
13934  5C41 51 02 00      add sp, 2
13935  5C44 FD AB         swp b
13936  5C46 D8            push b
13937  5C47 26 74 78      mov b, _s169 ; "    %s repair completed\n\n"
13938  5C4A FD AB         swp b
13939  5C4C D8            push b
13940  5C4D 07 BA 07      call printf
13941  5C50 51 04 00      add sp, 4
13942  5C53             ;; damage[i] = 0; 
13943  5C53 3B A5 62      mov d, _damage_data ; $damage
13944  5C56 D7            push a
13945  5C57 DA            push d
13946  5C58 FA FF FF      lea d, [bp + -1] ; $i
13947  5C5B 2A            mov b, [d]
13948  5C5C E7            pop d
13949  5C5D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13950  5C61 E4            pop a
13951  5C62 DA            push d
13952  5C63 26 00 00      mov b, $0
13953  5C66 E7            pop d
13954  5C67 FD 43         mov [d], b
13955  5C69 0A 6C 5C      jmp _if228_exit
13956  5C6C             _if228_exit:
13957  5C6C             _if227_exit:
13958  5C6C 0A 6F 5C      jmp _if226_exit
13959  5C6F             _if226_exit:
13960  5C6F             _for225_update:
13961  5C6F FA FF FF      lea d, [bp + -1] ; $i
13962  5C72 2A            mov b, [d]
13963  5C73 FD 77         inc b
13964  5C75 FA FF FF      lea d, [bp + -1] ; $i
13965  5C78 FD 43         mov [d], b
13966  5C7A FD 7D         dec b
13967  5C7C 0A 36 5B      jmp _for225_cond
13968  5C7F             _for225_exit:
13969  5C7F             ;; unsigned char                         r; 
13970  5C7F 52 01 00      sub sp, 1 ; r
13971  5C82             ;; if (get_rand(10) <= 2) { 
13972  5C82             _if230_cond:
13973  5C82 26 0A 00      mov b, $a
13974  5C85 FD AB         swp b
13975  5C87 D8            push b
13976  5C88 07 7A 1D      call get_rand
13977  5C8B 51 02 00      add sp, 2
13978  5C8E             ; START RELATIONAL
13979  5C8E D7            push a
13980  5C8F 11            mov a, b
13981  5C90 26 02 00      mov b, $2
13982  5C93 B0            cmp a, b
13983  5C94 FD 74         sle ; <= (signed)
13984  5C96 E4            pop a
13985  5C97             ; END RELATIONAL
13986  5C97 C0 00 00      cmp b, 0
13987  5C9A C6 99 5D      je _if230_exit
13988  5C9D             _if230_true:
13989  5C9D             ;; r = rand8(); 
13990  5C9D FA FA FF      lea d, [bp + -6] ; $r
13991  5CA0 DA            push d
13992  5CA1 07 C9 1D      call rand8
13993  5CA4 E7            pop d
13994  5CA5 FD 3E         mov [d], bl
13995  5CA7             ;; if (get_rand(10) < 6) { 
13996  5CA7             _if231_cond:
13997  5CA7 26 0A 00      mov b, $a
13998  5CAA FD AB         swp b
13999  5CAC D8            push b
14000  5CAD 07 7A 1D      call get_rand
14001  5CB0 51 02 00      add sp, 2
14002  5CB3             ; START RELATIONAL
14003  5CB3 D7            push a
14004  5CB4 11            mov a, b
14005  5CB5 26 06 00      mov b, $6
14006  5CB8 B0            cmp a, b
14007  5CB9 FD 73         slt ; < (signed)
14008  5CBB E4            pop a
14009  5CBC             ; END RELATIONAL
14010  5CBC C0 00 00      cmp b, 0
14011  5CBF C6 2F 5D      je _if231_else
14012  5CC2             _if231_true:
14013  5CC2             ;; damage[r] =damage[r]- (get_rand(500) + 100); 
14014  5CC2 3B A5 62      mov d, _damage_data ; $damage
14015  5CC5 D7            push a
14016  5CC6 DA            push d
14017  5CC7 FA FA FF      lea d, [bp + -6] ; $r
14018  5CCA 32            mov bl, [d]
14019  5CCB A7 00         mov bh, 0
14020  5CCD E7            pop d
14021  5CCE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14022  5CD2 E4            pop a
14023  5CD3 DA            push d
14024  5CD4 3B A5 62      mov d, _damage_data ; $damage
14025  5CD7 D7            push a
14026  5CD8 DA            push d
14027  5CD9 FA FA FF      lea d, [bp + -6] ; $r
14028  5CDC 32            mov bl, [d]
14029  5CDD A7 00         mov bh, 0
14030  5CDF E7            pop d
14031  5CE0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14032  5CE4 E4            pop a
14033  5CE5 2A            mov b, [d]
14034  5CE6             ; START TERMS
14035  5CE6 D7            push a
14036  5CE7 11            mov a, b
14037  5CE8 26 F4 01      mov b, $1f4
14038  5CEB FD AB         swp b
14039  5CED D8            push b
14040  5CEE 07 7A 1D      call get_rand
14041  5CF1 51 02 00      add sp, 2
14042  5CF4             ; START TERMS
14043  5CF4 D7            push a
14044  5CF5 11            mov a, b
14045  5CF6 26 64 00      mov b, $64
14046  5CF9 56            add b, a
14047  5CFA E4            pop a
14048  5CFB             ; END TERMS
14049  5CFB 60            sub a, b
14050  5CFC 27            mov b, a
14051  5CFD E4            pop a
14052  5CFE             ; END TERMS
14053  5CFE E7            pop d
14054  5CFF FD 43         mov [d], b
14055  5D01             ;; puts(dcr_1); 
14056  5D01 3B B4 63      mov d, _dcr_1 ; $dcr_1
14057  5D04 2A            mov b, [d]
14058  5D05 FD AB         swp b
14059  5D07 D8            push b
14060  5D08 07 4A 15      call puts
14061  5D0B 51 02 00      add sp, 2
14062  5D0E             ;; printf("    %s damaged\n\n", get_device_name(r)); 
14063  5D0E FA FA FF      lea d, [bp + -6] ; $r
14064  5D11 32            mov bl, [d]
14065  5D12 A7 00         mov bh, 0
14066  5D14 FD AB         swp b
14067  5D16 D8            push b
14068  5D17 07 5C 5E      call get_device_name
14069  5D1A 51 02 00      add sp, 2
14070  5D1D FD AB         swp b
14071  5D1F D8            push b
14072  5D20 26 8E 78      mov b, _s170 ; "    %s damaged\n\n"
14073  5D23 FD AB         swp b
14074  5D25 D8            push b
14075  5D26 07 BA 07      call printf
14076  5D29 51 04 00      add sp, 4
14077  5D2C 0A 96 5D      jmp _if231_exit
14078  5D2F             _if231_else:
14079  5D2F             ;; damage[r] = damage[r] + get_rand(300) + 100; 
14080  5D2F 3B A5 62      mov d, _damage_data ; $damage
14081  5D32 D7            push a
14082  5D33 DA            push d
14083  5D34 FA FA FF      lea d, [bp + -6] ; $r
14084  5D37 32            mov bl, [d]
14085  5D38 A7 00         mov bh, 0
14086  5D3A E7            pop d
14087  5D3B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14088  5D3F E4            pop a
14089  5D40 DA            push d
14090  5D41 3B A5 62      mov d, _damage_data ; $damage
14091  5D44 D7            push a
14092  5D45 DA            push d
14093  5D46 FA FA FF      lea d, [bp + -6] ; $r
14094  5D49 32            mov bl, [d]
14095  5D4A A7 00         mov bh, 0
14096  5D4C E7            pop d
14097  5D4D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14098  5D51 E4            pop a
14099  5D52 2A            mov b, [d]
14100  5D53             ; START TERMS
14101  5D53 D7            push a
14102  5D54 11            mov a, b
14103  5D55 26 2C 01      mov b, $12c
14104  5D58 FD AB         swp b
14105  5D5A D8            push b
14106  5D5B 07 7A 1D      call get_rand
14107  5D5E 51 02 00      add sp, 2
14108  5D61 56            add b, a
14109  5D62 11            mov a, b
14110  5D63 26 64 00      mov b, $64
14111  5D66 56            add b, a
14112  5D67 E4            pop a
14113  5D68             ; END TERMS
14114  5D68 E7            pop d
14115  5D69 FD 43         mov [d], b
14116  5D6B             ;; puts(dcr_1); 
14117  5D6B 3B B4 63      mov d, _dcr_1 ; $dcr_1
14118  5D6E 2A            mov b, [d]
14119  5D6F FD AB         swp b
14120  5D71 D8            push b
14121  5D72 07 4A 15      call puts
14122  5D75 51 02 00      add sp, 2
14123  5D78             ;; printf("    %s state of repair improved\n\n", 
14124  5D78 FA FA FF      lea d, [bp + -6] ; $r
14125  5D7B 32            mov bl, [d]
14126  5D7C A7 00         mov bh, 0
14127  5D7E FD AB         swp b
14128  5D80 D8            push b
14129  5D81 07 5C 5E      call get_device_name
14130  5D84 51 02 00      add sp, 2
14131  5D87 FD AB         swp b
14132  5D89 D8            push b
14133  5D8A 26 9F 78      mov b, _s171 ; "    %s state of repair improved\n\n"
14134  5D8D FD AB         swp b
14135  5D8F D8            push b
14136  5D90 07 BA 07      call printf
14137  5D93 51 04 00      add sp, 4
14138  5D96             _if231_exit:
14139  5D96 0A 99 5D      jmp _if230_exit
14140  5D99             _if230_exit:
14141  5D99 F9            leave
14142  5D9A 09            ret
14143  5D9B             
14144  5D9B             find_set_empty_place:
14145  5D9B F8 00 00      enter 0 ; (push bp; mov bp, sp)
14146  5D9E             ;; unsigned char                         r1, r2; 
14147  5D9E 52 01 00      sub sp, 1 ; r1
14148  5DA1 52 01 00      sub sp, 1 ; r2
14149  5DA4             ;; do { 
14150  5DA4             _do232_block:
14151  5DA4             ;; r1 = rand8(); 
14152  5DA4 FA 00 00      lea d, [bp + 0] ; $r1
14153  5DA7 DA            push d
14154  5DA8 07 C9 1D      call rand8
14155  5DAB E7            pop d
14156  5DAC FD 3E         mov [d], bl
14157  5DAE             ;; r2 = rand8(); 
14158  5DAE FA FF FF      lea d, [bp + -1] ; $r2
14159  5DB1 DA            push d
14160  5DB2 07 C9 1D      call rand8
14161  5DB5 E7            pop d
14162  5DB6 FD 3E         mov [d], bl
14163  5DB8             ;; } while (quad[r1+-1][r2+-1] !=  		0       ); 
14164  5DB8             _do232_cond:
14165  5DB8 3B BF 62      mov d, _quad_data ; $quad
14166  5DBB D7            push a
14167  5DBC DA            push d
14168  5DBD FA 00 00      lea d, [bp + 0] ; $r1
14169  5DC0 32            mov bl, [d]
14170  5DC1 A7 00         mov bh, 0
14171  5DC3             ; START TERMS
14172  5DC3 D7            push a
14173  5DC4 11            mov a, b
14174  5DC5 26 FF FF      mov b, $ffff
14175  5DC8 56            add b, a
14176  5DC9 E4            pop a
14177  5DCA             ; END TERMS
14178  5DCA E7            pop d
14179  5DCB FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
14180  5DCF DA            push d
14181  5DD0 FA FF FF      lea d, [bp + -1] ; $r2
14182  5DD3 32            mov bl, [d]
14183  5DD4 A7 00         mov bh, 0
14184  5DD6             ; START TERMS
14185  5DD6 D7            push a
14186  5DD7 11            mov a, b
14187  5DD8 26 FF FF      mov b, $ffff
14188  5DDB 56            add b, a
14189  5DDC E4            pop a
14190  5DDD             ; END TERMS
14191  5DDD E7            pop d
14192  5DDE 5A            add d, b
14193  5DDF E4            pop a
14194  5DE0 32            mov bl, [d]
14195  5DE1 A7 00         mov bh, 0
14196  5DE3             ; START RELATIONAL
14197  5DE3 D7            push a
14198  5DE4 11            mov a, b
14199  5DE5 26 00 00      mov b, $0
14200  5DE8 B0            cmp a, b
14201  5DE9 FD 72         sneq ; !=
14202  5DEB E4            pop a
14203  5DEC             ; END RELATIONAL
14204  5DEC C0 01 00      cmp b, 1
14205  5DEF C6 A4 5D      je _do232_block
14206  5DF2             _do232_exit:
14207  5DF2             ;; quad[r1+-1][r2+-1] = t; 
14208  5DF2 3B BF 62      mov d, _quad_data ; $quad
14209  5DF5 D7            push a
14210  5DF6 DA            push d
14211  5DF7 FA 00 00      lea d, [bp + 0] ; $r1
14212  5DFA 32            mov bl, [d]
14213  5DFB A7 00         mov bh, 0
14214  5DFD             ; START TERMS
14215  5DFD D7            push a
14216  5DFE 11            mov a, b
14217  5DFF 26 FF FF      mov b, $ffff
14218  5E02 56            add b, a
14219  5E03 E4            pop a
14220  5E04             ; END TERMS
14221  5E04 E7            pop d
14222  5E05 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
14223  5E09 DA            push d
14224  5E0A FA FF FF      lea d, [bp + -1] ; $r2
14225  5E0D 32            mov bl, [d]
14226  5E0E A7 00         mov bh, 0
14227  5E10             ; START TERMS
14228  5E10 D7            push a
14229  5E11 11            mov a, b
14230  5E12 26 FF FF      mov b, $ffff
14231  5E15 56            add b, a
14232  5E16 E4            pop a
14233  5E17             ; END TERMS
14234  5E17 E7            pop d
14235  5E18 5A            add d, b
14236  5E19 E4            pop a
14237  5E1A DA            push d
14238  5E1B FA 05 00      lea d, [bp + 5] ; $t
14239  5E1E 32            mov bl, [d]
14240  5E1F A7 00         mov bh, 0
14241  5E21 E7            pop d
14242  5E22 FD 3E         mov [d], bl
14243  5E24             ;; if (z1) 
14244  5E24             _if233_cond:
14245  5E24 FA 06 00      lea d, [bp + 6] ; $z1
14246  5E27 2A            mov b, [d]
14247  5E28 C0 00 00      cmp b, 0
14248  5E2B C6 3F 5E      je _if233_exit
14249  5E2E             _if233_true:
14250  5E2E             ;; *z1 = r1; 
14251  5E2E FA 06 00      lea d, [bp + 6] ; $z1
14252  5E31 2A            mov b, [d]
14253  5E32 D8            push b
14254  5E33 FA 00 00      lea d, [bp + 0] ; $r1
14255  5E36 32            mov bl, [d]
14256  5E37 A7 00         mov bh, 0
14257  5E39 E7            pop d
14258  5E3A FD 3E         mov [d], bl
14259  5E3C 0A 3F 5E      jmp _if233_exit
14260  5E3F             _if233_exit:
14261  5E3F             ;; if (z2) 
14262  5E3F             _if234_cond:
14263  5E3F FA 08 00      lea d, [bp + 8] ; $z2
14264  5E42 2A            mov b, [d]
14265  5E43 C0 00 00      cmp b, 0
14266  5E46 C6 5A 5E      je _if234_exit
14267  5E49             _if234_true:
14268  5E49             ;; *z2 = r2; 
14269  5E49 FA 08 00      lea d, [bp + 8] ; $z2
14270  5E4C 2A            mov b, [d]
14271  5E4D D8            push b
14272  5E4E FA FF FF      lea d, [bp + -1] ; $r2
14273  5E51 32            mov bl, [d]
14274  5E52 A7 00         mov bh, 0
14275  5E54 E7            pop d
14276  5E55 FD 3E         mov [d], bl
14277  5E57 0A 5A 5E      jmp _if234_exit
14278  5E5A             _if234_exit:
14279  5E5A F9            leave
14280  5E5B 09            ret
14281  5E5C             
14282  5E5C             get_device_name:
14283  5E5C F8 00 00      enter 0 ; (push bp; mov bp, sp)
14284  5E5F             ;; if (n < 0 || n > 8) 
14285  5E5F             _if235_cond:
14286  5E5F FA 05 00      lea d, [bp + 5] ; $n
14287  5E62 2A            mov b, [d]
14288  5E63             ; START RELATIONAL
14289  5E63 D7            push a
14290  5E64 11            mov a, b
14291  5E65 26 00 00      mov b, $0
14292  5E68 B0            cmp a, b
14293  5E69 FD 73         slt ; < (signed)
14294  5E6B E4            pop a
14295  5E6C             ; END RELATIONAL
14296  5E6C             ; START LOGICAL OR
14297  5E6C D7            push a
14298  5E6D 11            mov a, b
14299  5E6E FA 05 00      lea d, [bp + 5] ; $n
14300  5E71 2A            mov b, [d]
14301  5E72             ; START RELATIONAL
14302  5E72 D7            push a
14303  5E73 11            mov a, b
14304  5E74 26 08 00      mov b, $8
14305  5E77 B0            cmp a, b
14306  5E78 FD 7F         sgt ; >
14307  5E7A E4            pop a
14308  5E7B             ; END RELATIONAL
14309  5E7B FD A8         sor a, b ; ||
14310  5E7D E4            pop a
14311  5E7E             ; END LOGICAL OR
14312  5E7E C0 00 00      cmp b, 0
14313  5E81 C6 91 5E      je _if235_exit
14314  5E84             _if235_true:
14315  5E84             ;; n = 0; 
14316  5E84 FA 05 00      lea d, [bp + 5] ; $n
14317  5E87 DA            push d
14318  5E88 26 00 00      mov b, $0
14319  5E8B E7            pop d
14320  5E8C FD 43         mov [d], b
14321  5E8E 0A 91 5E      jmp _if235_exit
14322  5E91             _if235_exit:
14323  5E91             ;; return device_name[n]; 
14324  5E91 3B 79 63      mov d, _device_name_data ; $device_name
14325  5E94 D7            push a
14326  5E95 DA            push d
14327  5E96 FA 05 00      lea d, [bp + 5] ; $n
14328  5E99 2A            mov b, [d]
14329  5E9A E7            pop d
14330  5E9B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14331  5E9F E4            pop a
14332  5EA0 2A            mov b, [d]
14333  5EA1 F9            leave
14334  5EA2 09            ret
14335  5EA3             
14336  5EA3             quadrant_name:
14337  5EA3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14338  5EA6             ;; static char *sect_name[] = { "", " I", " II", " III", " IV" }; 
14339  5EA6 52 14 00      sub sp, 20 ; sect_name
14340  5EA9             ;; if (y < 1 || y > 8 || x < 1 || x > 8) 
14341  5EA9             _if236_cond:
14342  5EA9 FA 06 00      lea d, [bp + 6] ; $y
14343  5EAC 32            mov bl, [d]
14344  5EAD A7 00         mov bh, 0
14345  5EAF             ; START RELATIONAL
14346  5EAF D7            push a
14347  5EB0 11            mov a, b
14348  5EB1 26 01 00      mov b, $1
14349  5EB4 B0            cmp a, b
14350  5EB5 FD 75         slu ; < (unsigned)
14351  5EB7 E4            pop a
14352  5EB8             ; END RELATIONAL
14353  5EB8             ; START LOGICAL OR
14354  5EB8 D7            push a
14355  5EB9 11            mov a, b
14356  5EBA FA 06 00      lea d, [bp + 6] ; $y
14357  5EBD 32            mov bl, [d]
14358  5EBE A7 00         mov bh, 0
14359  5EC0             ; START RELATIONAL
14360  5EC0 D7            push a
14361  5EC1 11            mov a, b
14362  5EC2 26 08 00      mov b, $8
14363  5EC5 B0            cmp a, b
14364  5EC6 FD 81         sgu ; > (unsigned)
14365  5EC8 E4            pop a
14366  5EC9             ; END RELATIONAL
14367  5EC9 FD A8         sor a, b ; ||
14368  5ECB 11            mov a, b
14369  5ECC FA 07 00      lea d, [bp + 7] ; $x
14370  5ECF 32            mov bl, [d]
14371  5ED0 A7 00         mov bh, 0
14372  5ED2             ; START RELATIONAL
14373  5ED2 D7            push a
14374  5ED3 11            mov a, b
14375  5ED4 26 01 00      mov b, $1
14376  5ED7 B0            cmp a, b
14377  5ED8 FD 75         slu ; < (unsigned)
14378  5EDA E4            pop a
14379  5EDB             ; END RELATIONAL
14380  5EDB FD A8         sor a, b ; ||
14381  5EDD 11            mov a, b
14382  5EDE FA 07 00      lea d, [bp + 7] ; $x
14383  5EE1 32            mov bl, [d]
14384  5EE2 A7 00         mov bh, 0
14385  5EE4             ; START RELATIONAL
14386  5EE4 D7            push a
14387  5EE5 11            mov a, b
14388  5EE6 26 08 00      mov b, $8
14389  5EE9 B0            cmp a, b
14390  5EEA FD 81         sgu ; > (unsigned)
14391  5EEC E4            pop a
14392  5EED             ; END RELATIONAL
14393  5EED FD A8         sor a, b ; ||
14394  5EEF E4            pop a
14395  5EF0             ; END LOGICAL OR
14396  5EF0 C0 00 00      cmp b, 0
14397  5EF3 C6 0C 5F      je _if236_exit
14398  5EF6             _if236_true:
14399  5EF6             ;; strcpy(quadname, "Unknown"); 
14400  5EF6 26 D1 78      mov b, _s176 ; "Unknown"
14401  5EF9 FD AB         swp b
14402  5EFB D8            push b
14403  5EFC 3B FF 62      mov d, _quadname_data ; $quadname
14404  5EFF 2D            mov b, d
14405  5F00 FD AB         swp b
14406  5F02 D8            push b
14407  5F03 07 14 04      call strcpy
14408  5F06 51 04 00      add sp, 4
14409  5F09 0A 0C 5F      jmp _if236_exit
14410  5F0C             _if236_exit:
14411  5F0C             ;; if (x <= 4) 
14412  5F0C             _if237_cond:
14413  5F0C FA 07 00      lea d, [bp + 7] ; $x
14414  5F0F 32            mov bl, [d]
14415  5F10 A7 00         mov bh, 0
14416  5F12             ; START RELATIONAL
14417  5F12 D7            push a
14418  5F13 11            mov a, b
14419  5F14 26 04 00      mov b, $4
14420  5F17 B0            cmp a, b
14421  5F18 FD 76         sleu ; <= (unsigned)
14422  5F1A E4            pop a
14423  5F1B             ; END RELATIONAL
14424  5F1B C0 00 00      cmp b, 0
14425  5F1E C6 46 5F      je _if237_else
14426  5F21             _if237_true:
14427  5F21             ;; strcpy(quadname, quad_name[y]); 
14428  5F21 3B 35 63      mov d, _quad_name_data ; $quad_name
14429  5F24 D7            push a
14430  5F25 DA            push d
14431  5F26 FA 06 00      lea d, [bp + 6] ; $y
14432  5F29 32            mov bl, [d]
14433  5F2A A7 00         mov bh, 0
14434  5F2C E7            pop d
14435  5F2D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14436  5F31 E4            pop a
14437  5F32 2A            mov b, [d]
14438  5F33 FD AB         swp b
14439  5F35 D8            push b
14440  5F36 3B FF 62      mov d, _quadname_data ; $quadname
14441  5F39 2D            mov b, d
14442  5F3A FD AB         swp b
14443  5F3C D8            push b
14444  5F3D 07 14 04      call strcpy
14445  5F40 51 04 00      add sp, 4
14446  5F43 0A 6F 5F      jmp _if237_exit
14447  5F46             _if237_else:
14448  5F46             ;; strcpy(quadname, quad_name[y + 8]); 
14449  5F46 3B 35 63      mov d, _quad_name_data ; $quad_name
14450  5F49 D7            push a
14451  5F4A DA            push d
14452  5F4B FA 06 00      lea d, [bp + 6] ; $y
14453  5F4E 32            mov bl, [d]
14454  5F4F A7 00         mov bh, 0
14455  5F51             ; START TERMS
14456  5F51 D7            push a
14457  5F52 11            mov a, b
14458  5F53 26 08 00      mov b, $8
14459  5F56 56            add b, a
14460  5F57 E4            pop a
14461  5F58             ; END TERMS
14462  5F58 E7            pop d
14463  5F59 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14464  5F5D E4            pop a
14465  5F5E 2A            mov b, [d]
14466  5F5F FD AB         swp b
14467  5F61 D8            push b
14468  5F62 3B FF 62      mov d, _quadname_data ; $quadname
14469  5F65 2D            mov b, d
14470  5F66 FD AB         swp b
14471  5F68 D8            push b
14472  5F69 07 14 04      call strcpy
14473  5F6C 51 04 00      add sp, 4
14474  5F6F             _if237_exit:
14475  5F6F             ;; if (small != 1) { 
14476  5F6F             _if238_cond:
14477  5F6F FA 05 00      lea d, [bp + 5] ; $small
14478  5F72 32            mov bl, [d]
14479  5F73 A7 00         mov bh, 0
14480  5F75             ; START RELATIONAL
14481  5F75 D7            push a
14482  5F76 11            mov a, b
14483  5F77 26 01 00      mov b, $1
14484  5F7A B0            cmp a, b
14485  5F7B FD 72         sneq ; !=
14486  5F7D E4            pop a
14487  5F7E             ; END RELATIONAL
14488  5F7E C0 00 00      cmp b, 0
14489  5F81 C6 D6 5F      je _if238_exit
14490  5F84             _if238_true:
14491  5F84             ;; if (x > 4) 
14492  5F84             _if239_cond:
14493  5F84 FA 07 00      lea d, [bp + 7] ; $x
14494  5F87 32            mov bl, [d]
14495  5F88 A7 00         mov bh, 0
14496  5F8A             ; START RELATIONAL
14497  5F8A D7            push a
14498  5F8B 11            mov a, b
14499  5F8C 26 04 00      mov b, $4
14500  5F8F B0            cmp a, b
14501  5F90 FD 81         sgu ; > (unsigned)
14502  5F92 E4            pop a
14503  5F93             ; END RELATIONAL
14504  5F93 C0 00 00      cmp b, 0
14505  5F96 C6 B1 5F      je _if239_exit
14506  5F99             _if239_true:
14507  5F99             ;; x = x - 4; 
14508  5F99 FA 07 00      lea d, [bp + 7] ; $x
14509  5F9C DA            push d
14510  5F9D FA 07 00      lea d, [bp + 7] ; $x
14511  5FA0 32            mov bl, [d]
14512  5FA1 A7 00         mov bh, 0
14513  5FA3             ; START TERMS
14514  5FA3 D7            push a
14515  5FA4 11            mov a, b
14516  5FA5 26 04 00      mov b, $4
14517  5FA8 60            sub a, b
14518  5FA9 27            mov b, a
14519  5FAA E4            pop a
14520  5FAB             ; END TERMS
14521  5FAB E7            pop d
14522  5FAC FD 3E         mov [d], bl
14523  5FAE 0A B1 5F      jmp _if239_exit
14524  5FB1             _if239_exit:
14525  5FB1             ;; strcat(quadname, sect_name[x]); 
14526  5FB1 3B 97 64      mov d, st_quadrant_name_sect_name_dt ; static sect_name
14527  5FB4 D7            push a
14528  5FB5 DA            push d
14529  5FB6 FA 07 00      lea d, [bp + 7] ; $x
14530  5FB9 32            mov bl, [d]
14531  5FBA A7 00         mov bh, 0
14532  5FBC E7            pop d
14533  5FBD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14534  5FC1 E4            pop a
14535  5FC2 2A            mov b, [d]
14536  5FC3 FD AB         swp b
14537  5FC5 D8            push b
14538  5FC6 3B FF 62      mov d, _quadname_data ; $quadname
14539  5FC9 2D            mov b, d
14540  5FCA FD AB         swp b
14541  5FCC D8            push b
14542  5FCD 07 D8 04      call strcat
14543  5FD0 51 04 00      add sp, 4
14544  5FD3 0A D6 5F      jmp _if238_exit
14545  5FD6             _if238_exit:
14546  5FD6             ;; return; 
14547  5FD6 F9            leave
14548  5FD7 09            ret
14549  5FD8             
14550  5FD8             isqrt:
14551  5FD8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14552  5FDB             ;; unsigned int        b, q, r, t; 
14553  5FDB 52 02 00      sub sp, 2 ; b
14554  5FDE 52 02 00      sub sp, 2 ; q
14555  5FE1 52 02 00      sub sp, 2 ; r
14556  5FE4 52 02 00      sub sp, 2 ; t
14557  5FE7             ;; b = 0x4000; 
14558  5FE7 FA FF FF      lea d, [bp + -1] ; $b
14559  5FEA DA            push d
14560  5FEB 26 00 40      mov b, $4000
14561  5FEE E7            pop d
14562  5FEF FD 43         mov [d], b
14563  5FF1             ;; q = 0; 
14564  5FF1 FA FD FF      lea d, [bp + -3] ; $q
14565  5FF4 DA            push d
14566  5FF5 26 00 00      mov b, $0
14567  5FF8 E7            pop d
14568  5FF9 FD 43         mov [d], b
14569  5FFB             ;; r = i; 
14570  5FFB FA FB FF      lea d, [bp + -5] ; $r
14571  5FFE DA            push d
14572  5FFF FA 05 00      lea d, [bp + 5] ; $i
14573  6002 2A            mov b, [d]
14574  6003 E7            pop d
14575  6004 FD 43         mov [d], b
14576  6006             ;; while (b) { 
14577  6006             _while240_cond:
14578  6006 FA FF FF      lea d, [bp + -1] ; $b
14579  6009 2A            mov b, [d]
14580  600A C0 00 00      cmp b, 0
14581  600D C6 8E 60      je _while240_exit
14582  6010             _while240_block:
14583  6010             ;; t = q + b; 
14584  6010 FA F9 FF      lea d, [bp + -7] ; $t
14585  6013 DA            push d
14586  6014 FA FD FF      lea d, [bp + -3] ; $q
14587  6017 2A            mov b, [d]
14588  6018             ; START TERMS
14589  6018 D7            push a
14590  6019 11            mov a, b
14591  601A FA FF FF      lea d, [bp + -1] ; $b
14592  601D 2A            mov b, [d]
14593  601E 56            add b, a
14594  601F E4            pop a
14595  6020             ; END TERMS
14596  6020 E7            pop d
14597  6021 FD 43         mov [d], b
14598  6023             ;; q =q>> 1; 
14599  6023 FA FD FF      lea d, [bp + -3] ; $q
14600  6026 DA            push d
14601  6027 FA FD FF      lea d, [bp + -3] ; $q
14602  602A 2A            mov b, [d]
14603  602B             ; START SHIFT
14604  602B D7            push a
14605  602C 11            mov a, b
14606  602D 26 01 00      mov b, $1
14607  6030 FD 39         mov c, b
14608  6032 A1            shr a, cl
14609  6033 27            mov b, a
14610  6034 E4            pop a
14611  6035             ; END SHIFT
14612  6035 E7            pop d
14613  6036 FD 43         mov [d], b
14614  6038             ;; if (r >= t) { 
14615  6038             _if241_cond:
14616  6038 FA FB FF      lea d, [bp + -5] ; $r
14617  603B 2A            mov b, [d]
14618  603C             ; START RELATIONAL
14619  603C D7            push a
14620  603D 11            mov a, b
14621  603E FA F9 FF      lea d, [bp + -7] ; $t
14622  6041 2A            mov b, [d]
14623  6042 B0            cmp a, b
14624  6043 FD 82         sgeu ; >= (unsigned)
14625  6045 E4            pop a
14626  6046             ; END RELATIONAL
14627  6046 C0 00 00      cmp b, 0
14628  6049 C6 76 60      je _if241_exit
14629  604C             _if241_true:
14630  604C             ;; r =r- t; 
14631  604C FA FB FF      lea d, [bp + -5] ; $r
14632  604F DA            push d
14633  6050 FA FB FF      lea d, [bp + -5] ; $r
14634  6053 2A            mov b, [d]
14635  6054             ; START TERMS
14636  6054 D7            push a
14637  6055 11            mov a, b
14638  6056 FA F9 FF      lea d, [bp + -7] ; $t
14639  6059 2A            mov b, [d]
14640  605A 60            sub a, b
14641  605B 27            mov b, a
14642  605C E4            pop a
14643  605D             ; END TERMS
14644  605D E7            pop d
14645  605E FD 43         mov [d], b
14646  6060             ;; q = q + b; 
14647  6060 FA FD FF      lea d, [bp + -3] ; $q
14648  6063 DA            push d
14649  6064 FA FD FF      lea d, [bp + -3] ; $q
14650  6067 2A            mov b, [d]
14651  6068             ; START TERMS
14652  6068 D7            push a
14653  6069 11            mov a, b
14654  606A FA FF FF      lea d, [bp + -1] ; $b
14655  606D 2A            mov b, [d]
14656  606E 56            add b, a
14657  606F E4            pop a
14658  6070             ; END TERMS
14659  6070 E7            pop d
14660  6071 FD 43         mov [d], b
14661  6073 0A 76 60      jmp _if241_exit
14662  6076             _if241_exit:
14663  6076             ;; b =b>> 2; 
14664  6076 FA FF FF      lea d, [bp + -1] ; $b
14665  6079 DA            push d
14666  607A FA FF FF      lea d, [bp + -1] ; $b
14667  607D 2A            mov b, [d]
14668  607E             ; START SHIFT
14669  607E D7            push a
14670  607F 11            mov a, b
14671  6080 26 02 00      mov b, $2
14672  6083 FD 39         mov c, b
14673  6085 A1            shr a, cl
14674  6086 27            mov b, a
14675  6087 E4            pop a
14676  6088             ; END SHIFT
14677  6088 E7            pop d
14678  6089 FD 43         mov [d], b
14679  608B 0A 06 60      jmp _while240_cond
14680  608E             _while240_exit:
14681  608E             ;; return q; 
14682  608E FA FD FF      lea d, [bp + -3] ; $q
14683  6091 2A            mov b, [d]
14684  6092 F9            leave
14685  6093 09            ret
14686  6094             
14687  6094             square00:
14688  6094 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14689  6097             ;; if (abs(t) > 181) { 
14690  6097             _if242_cond:
14691  6097 FA 05 00      lea d, [bp + 5] ; $t
14692  609A 2A            mov b, [d]
14693  609B FD AB         swp b
14694  609D D8            push b
14695  609E 07 96 15      call abs
14696  60A1 51 02 00      add sp, 2
14697  60A4             ; START RELATIONAL
14698  60A4 D7            push a
14699  60A5 11            mov a, b
14700  60A6 26 B5 00      mov b, $b5
14701  60A9 B0            cmp a, b
14702  60AA FD 7F         sgt ; >
14703  60AC E4            pop a
14704  60AD             ; END RELATIONAL
14705  60AD C0 00 00      cmp b, 0
14706  60B0 C6 DE 60      je _if242_else
14707  60B3             _if242_true:
14708  60B3             ;; t =t/ 10; 
14709  60B3 FA 05 00      lea d, [bp + 5] ; $t
14710  60B6 DA            push d
14711  60B7 FA 05 00      lea d, [bp + 5] ; $t
14712  60BA 2A            mov b, [d]
14713  60BB             ; START FACTORS
14714  60BB D7            push a
14715  60BC 11            mov a, b
14716  60BD 26 0A 00      mov b, $a
14717  60C0 AE            div a, b
14718  60C1 27            mov b, a
14719  60C2 E4            pop a
14720  60C3             ; END FACTORS
14721  60C3 E7            pop d
14722  60C4 FD 43         mov [d], b
14723  60C6             ;; t =t* t; 
14724  60C6 FA 05 00      lea d, [bp + 5] ; $t
14725  60C9 DA            push d
14726  60CA FA 05 00      lea d, [bp + 5] ; $t
14727  60CD 2A            mov b, [d]
14728  60CE             ; START FACTORS
14729  60CE D7            push a
14730  60CF 11            mov a, b
14731  60D0 FA 05 00      lea d, [bp + 5] ; $t
14732  60D3 2A            mov b, [d]
14733  60D4 AC            mul a, b ; *
14734  60D5 11            mov a, b
14735  60D6 27            mov b, a
14736  60D7 E4            pop a
14737  60D8             ; END FACTORS
14738  60D8 E7            pop d
14739  60D9 FD 43         mov [d], b
14740  60DB 0A 06 61      jmp _if242_exit
14741  60DE             _if242_else:
14742  60DE             ;; t =t* t; 
14743  60DE FA 05 00      lea d, [bp + 5] ; $t
14744  60E1 DA            push d
14745  60E2 FA 05 00      lea d, [bp + 5] ; $t
14746  60E5 2A            mov b, [d]
14747  60E6             ; START FACTORS
14748  60E6 D7            push a
14749  60E7 11            mov a, b
14750  60E8 FA 05 00      lea d, [bp + 5] ; $t
14751  60EB 2A            mov b, [d]
14752  60EC AC            mul a, b ; *
14753  60ED 11            mov a, b
14754  60EE 27            mov b, a
14755  60EF E4            pop a
14756  60F0             ; END FACTORS
14757  60F0 E7            pop d
14758  60F1 FD 43         mov [d], b
14759  60F3             ;; t =t/ 100; 
14760  60F3 FA 05 00      lea d, [bp + 5] ; $t
14761  60F6 DA            push d
14762  60F7 FA 05 00      lea d, [bp + 5] ; $t
14763  60FA 2A            mov b, [d]
14764  60FB             ; START FACTORS
14765  60FB D7            push a
14766  60FC 11            mov a, b
14767  60FD 26 64 00      mov b, $64
14768  6100 AE            div a, b
14769  6101 27            mov b, a
14770  6102 E4            pop a
14771  6103             ; END FACTORS
14772  6103 E7            pop d
14773  6104 FD 43         mov [d], b
14774  6106             _if242_exit:
14775  6106             ;; return t; 
14776  6106 FA 05 00      lea d, [bp + 5] ; $t
14777  6109 2A            mov b, [d]
14778  610A F9            leave
14779  610B 09            ret
14780  610C             
14781  610C             distance_to:
14782  610C F8 00 00      enter 0 ; (push bp; mov bp, sp)
14783  610F             ;; unsigned int        j; 
14784  610F 52 02 00      sub sp, 2 ; j
14785  6112             ;; j = square00(TO_FIXED00(k->y) - ship_y); 
14786  6112 FA FF FF      lea d, [bp + -1] ; $j
14787  6115 DA            push d
14788  6116 FA 05 00      lea d, [bp + 5] ; $k
14789  6119 FD 2A         mov d, [d]
14790  611B 58 00 00      add d, 0
14791  611E 32            mov bl, [d]
14792  611F A7 00         mov bh, 0
14793  6121 FD AB         swp b
14794  6123 D8            push b
14795  6124 07 57 1D      call TO_FIXED00
14796  6127 51 02 00      add sp, 2
14797  612A             ; START TERMS
14798  612A D7            push a
14799  612B 11            mov a, b
14800  612C 3B B9 62      mov d, _ship_y ; $ship_y
14801  612F 2A            mov b, [d]
14802  6130 60            sub a, b
14803  6131 27            mov b, a
14804  6132 E4            pop a
14805  6133             ; END TERMS
14806  6133 FD AB         swp b
14807  6135 D8            push b
14808  6136 07 94 60      call square00
14809  6139 51 02 00      add sp, 2
14810  613C E7            pop d
14811  613D FD 43         mov [d], b
14812  613F             ;; j = j + square00(TO_FIXED00(k->x) - ship_x); 
14813  613F FA FF FF      lea d, [bp + -1] ; $j
14814  6142 DA            push d
14815  6143 FA FF FF      lea d, [bp + -1] ; $j
14816  6146 2A            mov b, [d]
14817  6147             ; START TERMS
14818  6147 D7            push a
14819  6148 11            mov a, b
14820  6149 FA 05 00      lea d, [bp + 5] ; $k
14821  614C FD 2A         mov d, [d]
14822  614E 58 01 00      add d, 1
14823  6151 32            mov bl, [d]
14824  6152 A7 00         mov bh, 0
14825  6154 FD AB         swp b
14826  6156 D8            push b
14827  6157 07 57 1D      call TO_FIXED00
14828  615A 51 02 00      add sp, 2
14829  615D             ; START TERMS
14830  615D D7            push a
14831  615E 11            mov a, b
14832  615F 3B BB 62      mov d, _ship_x ; $ship_x
14833  6162 2A            mov b, [d]
14834  6163 60            sub a, b
14835  6164 27            mov b, a
14836  6165 E4            pop a
14837  6166             ; END TERMS
14838  6166 FD AB         swp b
14839  6168 D8            push b
14840  6169 07 94 60      call square00
14841  616C 51 02 00      add sp, 2
14842  616F 56            add b, a
14843  6170 E4            pop a
14844  6171             ; END TERMS
14845  6171 E7            pop d
14846  6172 FD 43         mov [d], b
14847  6174             ;; j = isqrt(j); 
14848  6174 FA FF FF      lea d, [bp + -1] ; $j
14849  6177 DA            push d
14850  6178 FA FF FF      lea d, [bp + -1] ; $j
14851  617B 2A            mov b, [d]
14852  617C FD AB         swp b
14853  617E D8            push b
14854  617F 07 D8 5F      call isqrt
14855  6182 51 02 00      add sp, 2
14856  6185 E7            pop d
14857  6186 FD 43         mov [d], b
14858  6188             ;; j =j* 10; 
14859  6188 FA FF FF      lea d, [bp + -1] ; $j
14860  618B DA            push d
14861  618C FA FF FF      lea d, [bp + -1] ; $j
14862  618F 2A            mov b, [d]
14863  6190             ; START FACTORS
14864  6190 D7            push a
14865  6191 11            mov a, b
14866  6192 26 0A 00      mov b, $a
14867  6195 AC            mul a, b ; *
14868  6196 11            mov a, b
14869  6197 27            mov b, a
14870  6198 E4            pop a
14871  6199             ; END FACTORS
14872  6199 E7            pop d
14873  619A FD 43         mov [d], b
14874  619C             ;; return j; 
14875  619C FA FF FF      lea d, [bp + -1] ; $j
14876  619F 2A            mov b, [d]
14877  61A0 F9            leave
14878  61A1 09            ret
14879  61A2             
14880  61A2             cint100:
14881  61A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14882  61A5             ;; return (d + 50) / 100; 
14883  61A5 FA 05 00      lea d, [bp + 5] ; $d
14884  61A8 2A            mov b, [d]
14885  61A9             ; START TERMS
14886  61A9 D7            push a
14887  61AA 11            mov a, b
14888  61AB 26 32 00      mov b, $32
14889  61AE 56            add b, a
14890  61AF E4            pop a
14891  61B0             ; END TERMS
14892  61B0             ; START FACTORS
14893  61B0 D7            push a
14894  61B1 11            mov a, b
14895  61B2 26 64 00      mov b, $64
14896  61B5 AE            div a, b
14897  61B6 27            mov b, a
14898  61B7 E4            pop a
14899  61B8             ; END FACTORS
14900  61B8 F9            leave
14901  61B9 09            ret
14902  61BA             
14903  61BA             showfile:
14904  61BA F8 00 00      enter 0 ; (push bp; mov bp, sp)
14905  61BD F9            leave
14906  61BE 09            ret
14907  61BF             ; --- END TEXT BLOCK
14908  61BF             
14909  61BF             ; --- BEGIN DATA BLOCK
14910  61BF 00          _starbases: .fill 1, 0
14911  61C0 00          _base_y: .fill 1, 0
14912  61C1 00          _base_x: .fill 1, 0
14913  61C2 00          _starbases_left: .fill 1, 0
14914  61C3             _c_data: 
14915  61C3 00          .db 
14916  61C4 00 00 00 FF .db $0,$0,$0,$ffff,$ffff,$ffff,$0,$1,$1,$1,$0,$1,$1,$1,$0,$ffff,$ffff,$ffff,$0,$1,$1,
14916  61C8 FF FF 00 01 
14916  61CC 01 01 00 01 
14916  61D0 01 01 00 FF 
14916  61D4 FF FF 00 01 
14916  61D8 01 
14917  61D9 00 00 00 00 .fill 9, 0
14917  61DD 00 00 00 00 
14917  61E1 00 
14918  61E2 00          _docked: .fill 1, 0
14919  61E3 00 00       _energy: .fill 2, 0
14920  61E5 B8 0B       _energy0: .dw 3000
14921  61E7 00 00 00 00 _map_data: .fill 162, 0
14921  61EB 00 00 00 00 
14921  61EF 00 00 00 00 
14921  61F3 00 00 00 00 
14921  61F7 00 00 00 00 
14921  61FB 00 00 00 00 
14921  61FF 00 00 00 00 
14921  6203 00 00 00 00 
14921  6207 00 00 00 00 
14921  620B 00 00 00 00 
14921  620F 00 00 00 00 
14921  6213 00 00 00 00 
14921  6217 00 00 00 00 
14921  621B 00 00 00 00 
14921  621F 00 00 00 00 
14921  6223 00 00 00 00 
14921  6227 00 00 00 00 
14921  622B 00 00 00 00 
14921  622F 00 00 00 00 
14921  6233 00 00 00 00 
14921  6237 00 00 00 00 
14921  623B 00 00 00 00 
14921  623F 00 00 00 00 
14921  6243 00 00 00 00 
14921  6247 00 00 00 00 
14921  624B 00 00 00 00 
14921  624F 00 00 00 00 
14921  6253 00 00 00 00 
14921  6257 00 00 00 00 
14921  625B 00 00 00 00 
14921  625F 00 00 00 00 
14921  6263 00 00 00 00 
14921  6267 00 00 00 00 
14921  626B 00 00 00 00 
14921  626F 00 00 00 00 
14921  6273 00 00 00 00 
14921  6277 00 00 00 00 
14921  627B 00 00 00 00 
14921  627F 00 00 00 00 
14921  6283 00 00 00 00 
14921  6287 00 00 
14922  6289 00 00 00 00 _kdata_data: .fill 12, 0
14922  628D 00 00 00 00 
14922  6291 00 00 00 00 
14923  6295 00          _klingons: .fill 1, 0
14924  6296 00          _total_klingons: .fill 1, 0
14925  6297 00          _klingons_left: .fill 1, 0
14926  6298 00          _torps: .fill 1, 0
14927  6299 0A          _torps0: .db 10
14928  629A 00 00       _quad_y: .fill 2, 0
14929  629C 00 00       _quad_x: .fill 2, 0
14930  629E 00 00       _shield: .fill 2, 0
14931  62A0 00          _stars: .fill 1, 0
14932  62A1 00 00       _time_start: .fill 2, 0
14933  62A3 00 00       _time_up: .fill 2, 0
14934  62A5 00 00 00 00 _damage_data: .fill 18, 0
14934  62A9 00 00 00 00 
14934  62AD 00 00 00 00 
14934  62B1 00 00 00 00 
14934  62B5 00 00 
14935  62B7 00 00       _d4: .fill 2, 0
14936  62B9 00 00       _ship_y: .fill 2, 0
14937  62BB 00 00       _ship_x: .fill 2, 0
14938  62BD 00 00       _stardate: .fill 2, 0
14939  62BF 00 00 00 00 _quad_data: .fill 64, 0
14939  62C3 00 00 00 00 
14939  62C7 00 00 00 00 
14939  62CB 00 00 00 00 
14939  62CF 00 00 00 00 
14939  62D3 00 00 00 00 
14939  62D7 00 00 00 00 
14939  62DB 00 00 00 00 
14939  62DF 00 00 00 00 
14939  62E3 00 00 00 00 
14939  62E7 00 00 00 00 
14939  62EB 00 00 00 00 
14939  62EF 00 00 00 00 
14939  62F3 00 00 00 00 
14939  62F7 00 00 00 00 
14939  62FB 00 00 00 00 
14940  62FF 00 00 00 00 _quadname_data: .fill 12, 0
14940  6303 00 00 00 00 
14940  6307 00 00 00 00 
14941  630B 72 65 70 6F _inc_1_data: .db "reports:\n  Incorrect course data, sir!\n", 0
14941  630F 72 74 73 3A 
14941  6313 0A 20 20 49 
14941  6317 6E 63 6F 72 
14941  631B 72 65 63 74 
14941  631F 20 63 6F 75 
14941  6323 72 73 65 20 
14941  6327 64 61 74 61 
14941  632B 2C 20 73 69 
14941  632F 72 21 0A 00 
14942  6333 0B 63       _inc_1: .dw _inc_1_data
14943  6335             _quad_name_data: 
14944  6335 AD 64 AE 64 .dw _s0, _s1, _s2, _s3, _s4, _s5, _s6, _s7, _s8, _s9, _s10, _s11, _s12, _s13, _s14, _s15, _s16, 
14944  6339 B6 64 BC 64 
14944  633D C4 64 C9 64 
14944  6341 D1 64 D8 64 
14944  6345 E4 64 EB 64 
14944  6349 F2 64 F8 64 
14944  634D 00 65 0B 65 
14944  6351 15 65 1D 65 
14944  6355 26 65 
14945  6357 00 00 00 00 .fill 34, 0
14945  635B 00 00 00 00 
14945  635F 00 00 00 00 
14945  6363 00 00 00 00 
14945  6367 00 00 00 00 
14945  636B 00 00 00 00 
14945  636F 00 00 00 00 
14945  6373 00 00 00 00 
14945  6377 00 00 
14946  6379             _device_name_data: 
14947  6379 AD 64 2C 65 .dw _s0, _s17, _s18, _s19, _s20, _s21, _s22, _s23, _s24, 
14947  637D 39 65 4D 65 
14947  6381 60 65 6F 65 
14947  6385 7C 65 8B 65 
14947  6389 9A 65 
14948  638B 00 00 00 00 .fill 18, 0
14948  638F 00 00 00 00 
14948  6393 00 00 00 00 
14948  6397 00 00 00 00 
14948  639B 00 00 
14949  639D 44 61 6D 61 _dcr_1_data: .db "Damage Control report:", 0
14949  63A1 67 65 20 43 
14949  63A5 6F 6E 74 72 
14949  63A9 6F 6C 20 72 
14949  63AD 65 70 6F 72 
14949  63B1 74 3A 00 
14950  63B4 9D 63       _dcr_1: .dw _dcr_1_data
14951  63B6             _plural_2_data: 
14952  63B6 00 00       .db $0,$0,
14953  63B8             _plural_data: 
14954  63B8 69 73 00    .db $69,$73,$0,
14955  63BB 00          .fill 1, 0
14956  63BC             _warpmax_data: 
14957  63BC 08          .db $8,
14958  63BD 00 00 00    .fill 3, 0
14959  63C0 2D 2D 2D 2D _srs_1_data: .db "------------------------", 0
14959  63C4 2D 2D 2D 2D 
14959  63C8 2D 2D 2D 2D 
14959  63CC 2D 2D 2D 2D 
14959  63D0 2D 2D 2D 2D 
14959  63D4 2D 2D 2D 2D 
14959  63D8 00 
14960  63D9 C0 63       _srs_1: .dw _srs_1_data
14961  63DB             _tilestr_data: 
14962  63DB AB 65 AF 65 .dw _s25, _s26, _s27, _s28, _s29, 
14962  63DF B3 65 B7 65 
14962  63E3 BB 65 
14963  63E5 00 00 00 00 .fill 10, 0
14963  63E9 00 00 00 00 
14963  63ED 00 00 
14964  63EF 2D 2D 2D 2D _lrs_1_data: .db "-------------------\n", 0
14964  63F3 2D 2D 2D 2D 
14964  63F7 2D 2D 2D 2D 
14964  63FB 2D 2D 2D 2D 
14964  63FF 2D 2D 2D 0A 
14964  6403 00 
14965  6404 EF 63       _lrs_1: .dw _lrs_1_data
14966  6406 20 20 20 2D _gr_1_data: .db "   ----- ----- ----- ----- ----- ----- ----- -----\n", 0
14966  640A 2D 2D 2D 2D 
14966  640E 20 2D 2D 2D 
14966  6412 2D 2D 20 2D 
14966  6416 2D 2D 2D 2D 
14966  641A 20 2D 2D 2D 
14966  641E 2D 2D 20 2D 
14966  6422 2D 2D 2D 2D 
14966  6426 20 2D 2D 2D 
14966  642A 2D 2D 20 2D 
14966  642E 2D 2D 2D 2D 
14966  6432 20 2D 2D 2D 
14966  6436 2D 2D 0A 00 
14967  643A 06 64       _gr_1: .dw _gr_1_data
14968  643C 73 00       _str_s_data: .db "s", 0
14969  643E 3C 64       _str_s: .dw _str_s_data
14970  6440 20 20 2D 2D _gm_1_data: .db "  ----- ----- ----- ----- ----- ----- ----- -----\n", 0
14970  6444 2D 2D 2D 20 
14970  6448 2D 2D 2D 2D 
14970  644C 2D 20 2D 2D 
14970  6450 2D 2D 2D 20 
14970  6454 2D 2D 2D 2D 
14970  6458 2D 20 2D 2D 
14970  645C 2D 2D 2D 20 
14970  6460 2D 2D 2D 2D 
14970  6464 2D 20 2D 2D 
14970  6468 2D 2D 2D 20 
14970  646C 2D 2D 2D 2D 
14970  6470 2D 0A 00 
14971  6473 40 64       _gm_1: .dw _gm_1_data
14972  6475 20 20 44 49 _dist_1_data: .db "  DISTANCE = \n\n", 0
14972  6479 53 54 41 4E 
14972  647D 43 45 20 3D 
14972  6481 20 0A 0A 00 
14973  6485 75 64       _dist_1: .dw _dist_1_data
14974  6487 00 00 00 00 st_print100_buf_dt: .fill 16, 0
14974  648B 00 00 00 00 
14974  648F 00 00 00 00 
14974  6493 00 00 00 00 
14975  6497             st_quadrant_name_sect_name_dt: 
14976  6497 AD 64 C1 78 .dw _s0, _s172, _s173, _s174, _s175, 
14976  649B C4 78 C8 78 
14976  649F CD 78 
14977  64A1 00 00 00 00 .fill 10, 0
14977  64A5 00 00 00 00 
14977  64A9 00 00 
14978  64AB 97 64       st_quadrant_name_sect_name: .dw st_quadrant_name_sect_name_dt
14979  64AD 00          _s0: .db "", 0
14980  64AE 41 6E 74 61 _s1: .db "Antares", 0
14980  64B2 72 65 73 00 
14981  64B6 52 69 67 65 _s2: .db "Rigel", 0
14981  64BA 6C 00 
14982  64BC 50 72 6F 63 _s3: .db "Procyon", 0
14982  64C0 79 6F 6E 00 
14983  64C4 56 65 67 61 _s4: .db "Vega", 0
14983  64C8 00 
14984  64C9 43 61 6E 6F _s5: .db "Canopus", 0
14984  64CD 70 75 73 00 
14985  64D1 41 6C 74 61 _s6: .db "Altair", 0
14985  64D5 69 72 00 
14986  64D8 53 61 67 69 _s7: .db "Sagittarius", 0
14986  64DC 74 74 61 72 
14986  64E0 69 75 73 00 
14987  64E4 50 6F 6C 6C _s8: .db "Pollux", 0
14987  64E8 75 78 00 
14988  64EB 53 69 72 69 _s9: .db "Sirius", 0
14988  64EF 75 73 00 
14989  64F2 44 65 6E 65 _s10: .db "Deneb", 0
14989  64F6 62 00 
14990  64F8 43 61 70 65 _s11: .db "Capella", 0
14990  64FC 6C 6C 61 00 
14991  6500 42 65 74 65 _s12: .db "Betelgeuse", 0
14991  6504 6C 67 65 75 
14991  6508 73 65 00 
14992  650B 41 6C 64 65 _s13: .db "Aldebaran", 0
14992  650F 62 61 72 61 
14992  6513 6E 00 
14993  6515 52 65 67 75 _s14: .db "Regulus", 0
14993  6519 6C 75 73 00 
14994  651D 41 72 63 74 _s15: .db "Arcturus", 0
14994  6521 75 72 75 73 
14994  6525 00 
14995  6526 53 70 69 63 _s16: .db "Spica", 0
14995  652A 61 00 
14996  652C 57 61 72 70 _s17: .db "Warp engines", 0
14996  6530 20 65 6E 67 
14996  6534 69 6E 65 73 
14996  6538 00 
14997  6539 53 68 6F 72 _s18: .db "Short range sensors", 0
14997  653D 74 20 72 61 
14997  6541 6E 67 65 20 
14997  6545 73 65 6E 73 
14997  6549 6F 72 73 00 
14998  654D 4C 6F 6E 67 _s19: .db "Long range sensors", 0
14998  6551 20 72 61 6E 
14998  6555 67 65 20 73 
14998  6559 65 6E 73 6F 
14998  655D 72 73 00 
14999  6560 50 68 61 73 _s20: .db "Phaser control", 0
14999  6564 65 72 20 63 
14999  6568 6F 6E 74 72 
14999  656C 6F 6C 00 
15000  656F 50 68 6F 74 _s21: .db "Photon tubes", 0
15000  6573 6F 6E 20 74 
15000  6577 75 62 65 73 
15000  657B 00 
15001  657C 44 61 6D 61 _s22: .db "Damage control", 0
15001  6580 67 65 20 63 
15001  6584 6F 6E 74 72 
15001  6588 6F 6C 00 
15002  658B 53 68 69 65 _s23: .db "Shield control", 0
15002  658F 6C 64 20 63 
15002  6593 6F 6E 74 72 
15002  6597 6F 6C 00 
15003  659A 4C 69 62 72 _s24: .db "Library computer", 0
15003  659E 61 72 79 20 
15003  65A2 63 6F 6D 70 
15003  65A6 75 74 65 72 
15003  65AA 00 
15004  65AB 20 20 20 00 _s25: .db "   ", 0
15005  65AF 20 2A 20 00 _s26: .db " * ", 0
15006  65B3 3E 21 3C 00 _s27: .db ">!<", 0
15007  65B7 2B 4B 2B 00 _s28: .db "+K+", 0
15008  65BB 3C 2A 3E 00 _s29: .db "<*>", 0
15009  65BF 55 6E 65 78 _s30: .db "Unexpected format in printf.", 0
15009  65C3 70 65 63 74 
15009  65C7 65 64 20 66 
15009  65CB 6F 72 6D 61 
15009  65CF 74 20 69 6E 
15009  65D3 20 70 72 69 
15009  65D7 6E 74 66 2E 
15009  65DB 00 
15010  65DC 45 72 72 6F _s31: .db "Error: Unknown argument type.\n", 0
15010  65E0 72 3A 20 55 
15010  65E4 6E 6B 6E 6F 
15010  65E8 77 6E 20 61 
15010  65EC 72 67 75 6D 
15010  65F0 65 6E 74 20 
15010  65F4 74 79 70 65 
15010  65F8 2E 0A 00 
15011  65FB 1B 5B 32 4A _s32: .db "\033[2J\033[H", 0
15011  65FF 1B 5B 48 00 
15012  6603 61 72 65 00 _s33: .db "are", 0
15013  6607 69 73 00    _s34: .db "is", 0
15014  660A 25 73 20 25 _s35: .db "%s %s inoperable.\n", 0
15014  660E 73 20 69 6E 
15014  6612 6F 70 65 72 
15014  6616 61 62 6C 65 
15014  661A 2E 0A 00 
15015  661D 73 74 61 72 _s36: .db "startrek.intro", 0
15015  6621 74 72 65 6B 
15015  6625 2E 69 6E 74 
15015  6629 72 6F 00 
15016  662C 73 74 61 72 _s37: .db "startrek.doc", 0
15016  6630 74 72 65 6B 
15016  6634 2E 64 6F 63 
15016  6638 00 
15017  6639 73 74 61 72 _s38: .db "startrek.logo", 0
15017  663D 74 72 65 6B 
15017  6641 2E 6C 6F 67 
15017  6645 6F 00 
15018  6647 73 74 61 72 _s39: .db "startrek.fatal", 0
15018  664B 74 72 65 6B 
15018  664F 2E 66 61 74 
15018  6653 61 6C 00 
15019  6656 43 6F 6D 6D _s40: .db "Command? ", 0
15019  665A 61 6E 64 3F 
15019  665E 20 00 
15020  6660 6E 61 76 00 _s41: .db "nav", 0
15021  6664 73 72 73 00 _s42: .db "srs", 0
15022  6668 6C 72 73 00 _s43: .db "lrs", 0
15023  666C 70 68 61 00 _s44: .db "pha", 0
15024  6670 74 6F 72 00 _s45: .db "tor", 0
15025  6674 73 68 69 00 _s46: .db "shi", 0
15026  6678 64 61 6D 00 _s47: .db "dam", 0
15027  667C 63 6F 6D 00 _s48: .db "com", 0
15028  6680 78 78 78 00 _s49: .db "xxx", 0
15029  6684 45 6E 74 65 _s50: .db "Enter one of the following:\n", 0
15029  6688 72 20 6F 6E 
15029  668C 65 20 6F 66 
15029  6690 20 74 68 65 
15029  6694 20 66 6F 6C 
15029  6698 6C 6F 77 69 
15029  669C 6E 67 3A 0A 
15029  66A0 00 
15030  66A1 20 20 6E 61 _s51: .db "  nav - To Set Course", 0
15030  66A5 76 20 2D 20 
15030  66A9 54 6F 20 53 
15030  66AD 65 74 20 43 
15030  66B1 6F 75 72 73 
15030  66B5 65 00 
15031  66B7 20 20 73 72 _s52: .db "  srs - Short Range Sensors", 0
15031  66BB 73 20 2D 20 
15031  66BF 53 68 6F 72 
15031  66C3 74 20 52 61 
15031  66C7 6E 67 65 20 
15031  66CB 53 65 6E 73 
15031  66CF 6F 72 73 00 
15032  66D3 20 20 6C 72 _s53: .db "  lrs - Long Range Sensors", 0
15032  66D7 73 20 2D 20 
15032  66DB 4C 6F 6E 67 
15032  66DF 20 52 61 6E 
15032  66E3 67 65 20 53 
15032  66E7 65 6E 73 6F 
15032  66EB 72 73 00 
15033  66EE 20 20 70 68 _s54: .db "  pha - Phasers", 0
15033  66F2 61 20 2D 20 
15033  66F6 50 68 61 73 
15033  66FA 65 72 73 00 
15034  66FE 20 20 74 6F _s55: .db "  tor - Photon Torpedoes", 0
15034  6702 72 20 2D 20 
15034  6706 50 68 6F 74 
15034  670A 6F 6E 20 54 
15034  670E 6F 72 70 65 
15034  6712 64 6F 65 73 
15034  6716 00 
15035  6717 20 20 73 68 _s56: .db "  shi - Shield Control", 0
15035  671B 69 20 2D 20 
15035  671F 53 68 69 65 
15035  6723 6C 64 20 43 
15035  6727 6F 6E 74 72 
15035  672B 6F 6C 00 
15036  672E 20 20 64 61 _s57: .db "  dam - Damage Control", 0
15036  6732 6D 20 2D 20 
15036  6736 44 61 6D 61 
15036  673A 67 65 20 43 
15036  673E 6F 6E 74 72 
15036  6742 6F 6C 00 
15037  6745 20 20 63 6F _s58: .db "  com - Library Computer", 0
15037  6749 6D 20 2D 20 
15037  674D 4C 69 62 72 
15037  6751 61 72 79 20 
15037  6755 43 6F 6D 70 
15037  6759 75 74 65 72 
15037  675D 00 
15038  675E 20 20 78 78 _s59: .db "  xxx - Resign Command\n", 0
15038  6762 78 20 2D 20 
15038  6766 52 65 73 69 
15038  676A 67 6E 20 43 
15038  676E 6F 6D 6D 61 
15038  6772 6E 64 0A 00 
15039  6776 73 00       _s60: .db "s", 0
15040  6778 59 6F 75 72 _s61: .db "Your orders are as follows:\nDestroy the %d Klingon warships which have", 0
15040  677C 20 6F 72 64 
15040  6780 65 72 73 20 
15040  6784 61 72 65 20 
15040  6788 61 73 20 66 
15040  678C 6F 6C 6C 6F 
15040  6790 77 73 3A 0A 
15040  6794 44 65 73 74 
15040  6798 72 6F 79 20 
15040  679C 74 68 65 20 
15040  67A0 25 64 20 4B 
15040  67A4 6C 69 6E 67 
15040  67A8 6F 6E 20 77 
15040  67AC 61 72 73 68 
15040  67B0 69 70 73 20 
15040  67B4 77 68 69 63 
15040  67B8 68 20 68 61 
15040  67BC 76 65 00 
15041  67BF 69 6E 76 61 _s62: .db "invaded\n the galaxy before they can attack Federation Headquarters\n", 0
15041  67C3 64 65 64 0A 
15041  67C7 20 74 68 65 
15041  67CB 20 67 61 6C 
15041  67CF 61 78 79 20 
15041  67D3 62 65 66 6F 
15041  67D7 72 65 20 74 
15041  67DB 68 65 79 20 
15041  67DF 63 61 6E 20 
15041  67E3 61 74 74 61 
15041  67E7 63 6B 20 46 
15041  67EB 65 64 65 72 
15041  67EF 61 74 69 6F 
15041  67F3 6E 20 48 65 
15041  67F7 61 64 71 75 
15041  67FB 61 72 74 65 
15041  67FF 72 73 0A 00 
15042  6803 20 6F 6E 20 _s63: .db " on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy", 0
15042  6807 73 74 61 72 
15042  680B 64 61 74 65 
15042  680F 20 25 75 2E 
15042  6813 20 54 68 69 
15042  6817 73 20 67 69 
15042  681B 76 65 73 20 
15042  681F 79 6F 75 20 
15042  6823 25 64 20 64 
15042  6827 61 79 73 2E 
15042  682B 20 54 68 65 
15042  682F 72 65 20 25 
15042  6833 73 0A 20 25 
15042  6837 64 20 73 74 
15042  683B 61 72 62 61 
15042  683F 73 65 25 73 
15042  6843 20 69 6E 20 
15042  6847 74 68 65 20 
15042  684B 67 61 6C 61 
15042  684F 78 79 00 
15043  6852 20 66 6F 72 _s64: .db " for resupplying your ship.\n\n Hit any key to accept command. ", 0
15043  6856 20 72 65 73 
15043  685A 75 70 70 6C 
15043  685E 79 69 6E 67 
15043  6862 20 79 6F 75 
15043  6866 72 20 73 68 
15043  686A 69 70 2E 0A 
15043  686E 0A 20 48 69 
15043  6872 74 20 61 6E 
15043  6876 79 20 6B 65 
15043  687A 79 20 74 6F 
15043  687E 20 61 63 63 
15043  6882 65 70 74 20 
15043  6886 63 6F 6D 6D 
15043  688A 61 6E 64 2E 
15043  688E 20 00 
15044  6890 4E 6F 77 20 _s65: .db "Now entering %s quadrant...\n\n", 0
15044  6894 65 6E 74 65 
15044  6898 72 69 6E 67 
15044  689C 20 25 73 20 
15044  68A0 71 75 61 64 
15044  68A4 72 61 6E 74 
15044  68A8 2E 2E 2E 0A 
15044  68AC 0A 00 
15045  68AE 0A 59 6F 75 _s66: .db "\nYour mission begins with your starship located", 0
15045  68B2 72 20 6D 69 
15045  68B6 73 73 69 6F 
15045  68BA 6E 20 62 65 
15045  68BE 67 69 6E 73 
15045  68C2 20 77 69 74 
15045  68C6 68 20 79 6F 
15045  68CA 75 72 20 73 
15045  68CE 74 61 72 73 
15045  68D2 68 69 70 20 
15045  68D6 6C 6F 63 61 
15045  68DA 74 65 64 00 
15046  68DE 69 6E 20 74 _s67: .db "in the galactic quadrant %s.\n\n", 0
15046  68E2 68 65 20 67 
15046  68E6 61 6C 61 63 
15046  68EA 74 69 63 20 
15046  68EE 71 75 61 64 
15046  68F2 72 61 6E 74 
15046  68F6 20 25 73 2E 
15046  68FA 0A 0A 00 
15047  68FD 43 6F 6D 62 _s68: .db "Combat Area  Condition Red\n", 0
15047  6901 61 74 20 41 
15047  6905 72 65 61 20 
15047  6909 20 43 6F 6E 
15047  690D 64 69 74 69 
15047  6911 6F 6E 20 52 
15047  6915 65 64 0A 00 
15048  6919 53 68 69 65 _s69: .db "Shields Dangerously Low\n", 0
15048  691D 6C 64 73 20 
15048  6921 44 61 6E 67 
15048  6925 65 72 6F 75 
15048  6929 73 6C 79 20 
15048  692D 4C 6F 77 0A 
15048  6931 00 
15049  6932 43 6F 75 72 _s70: .db "Course (0-9): ", 0
15049  6936 73 65 20 28 
15049  693A 30 2D 39 29 
15049  693E 3A 20 00 
15050  6941 4C 74 2E 20 _s71: .db "Lt. Sulu%s", 0
15050  6945 53 75 6C 75 
15050  6949 25 73 00 
15051  694C 30 2E 32 00 _s72: .db "0.2", 0
15052  6950 57 61 72 70 _s73: .db "Warp Factor (0-%s): ", 0
15052  6954 20 46 61 63 
15052  6958 74 6F 72 20 
15052  695C 28 30 2D 25 
15052  6960 73 29 3A 20 
15052  6964 00 
15053  6965 57 61 72 70 _s74: .db "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n", 0
15053  6969 20 45 6E 67 
15053  696D 69 6E 65 73 
15053  6971 20 61 72 65 
15053  6975 20 64 61 6D 
15053  6979 61 67 65 64 
15053  697D 2E 20 4D 61 
15053  6981 78 69 6D 75 
15053  6985 6D 20 73 70 
15053  6989 65 65 64 20 
15053  698D 3D 20 57 61 
15053  6991 72 70 20 30 
15053  6995 2E 32 2E 0A 
15053  6999 0A 00 
15054  699B 43 68 69 65 _s75: .db "Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n", 0
15054  699F 66 20 45 6E 
15054  69A3 67 69 6E 65 
15054  69A7 65 72 20 53 
15054  69AB 63 6F 74 74 
15054  69AF 20 72 65 70 
15054  69B3 6F 72 74 73 
15054  69B7 3A 0A 20 20 
15054  69BB 54 68 65 20 
15054  69BF 65 6E 67 69 
15054  69C3 6E 65 73 20 
15054  69C7 77 6F 6E 74 
15054  69CB 20 74 61 6B 
15054  69CF 65 20 77 61 
15054  69D3 72 70 20 25 
15054  69D7 73 21 0A 0A 
15054  69DB 00 
15055  69DC 45 6E 67 69 _s76: .db "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", 0
15055  69E0 6E 65 65 72 
15055  69E4 69 6E 67 20 
15055  69E8 72 65 70 6F 
15055  69EC 72 74 73 3A 
15055  69F0 0A 20 20 49 
15055  69F4 6E 73 75 66 
15055  69F8 66 69 63 69 
15055  69FC 65 6E 74 20 
15055  6A00 65 6E 65 72 
15055  6A04 67 79 20 61 
15055  6A08 76 61 69 6C 
15055  6A0C 61 62 6C 65 
15055  6A10 20 66 6F 72 
15055  6A14 20 6D 61 6E 
15055  6A18 65 75 76 65 
15055  6A1C 72 69 6E 67 
15055  6A20 20 61 74 20 
15055  6A24 77 61 72 70 
15055  6A28 20 25 73 21 
15055  6A2C 0A 0A 00 
15056  6A2F 44 65 66 6C _s77: .db "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", 0
15056  6A33 65 63 74 6F 
15056  6A37 72 20 43 6F 
15056  6A3B 6E 74 72 6F 
15056  6A3F 6C 20 52 6F 
15056  6A43 6F 6D 20 61 
15056  6A47 63 6B 6E 6F 
15056  6A4B 77 6C 65 64 
15056  6A4F 67 65 73 3A 
15056  6A53 0A 20 20 25 
15056  6A57 64 20 75 6E 
15056  6A5B 69 74 73 20 
15056  6A5F 6F 66 20 65 
15056  6A63 6E 65 72 67 
15056  6A67 79 20 70 72 
15056  6A6B 65 73 65 6E 
15056  6A6F 74 6C 79 20 
15056  6A73 64 65 70 6C 
15056  6A77 6F 79 65 64 
15056  6A7B 20 74 6F 20 
15056  6A7F 73 68 69 65 
15056  6A83 6C 64 73 2E 
15056  6A87 0A 00 
15057  6A89 4C 54 2E 20 _s78: .db "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denie"
15057  6A8D 55 68 75 72 
15057  6A91 61 20 72 65 
15057  6A95 70 6F 72 74 
15057  6A99 73 3A 0A 20 
15057  6A9D 4D 65 73 73 
15057  6AA1 61 67 65 20 
15057  6AA5 66 72 6F 6D 
15057  6AA9 20 53 74 61 
15057  6AAD 72 66 6C 65 
15057  6AB1 65 74 20 43 
15057  6AB5 6F 6D 6D 61 
15057  6AB9 6E 64 3A 0A 
15057  6ABD 0A 20 50 65 
15057  6AC1 72 6D 69 73 
15057  6AC5 73 69 6F 6E 
15057  6AC9 20 74 6F 20 
15057  6ACD 61 74 74 65 
15057  6AD1 6D 70 74 20 
15057  6AD5 63 72 6F 73 
15057  6AD9 73 69 6E 67 
15057  6ADD 20 6F 66 20 
15057  6AE1 67 61 6C 61 
15057  6AE5 63 74 69 63 
15057  6AE9 20 70 65 72 
15057  6AED 69 6D 65 74 
15057  6AF1 65 72 0A 20 
15057  6AF5 69 73 20 68 
15057  6AF9 65 72 65 62 
15057  6AFD 79 20 2A 64 
15057  6B01 65 6E 69 65 
15058  6B05 64 2A 2E 20 .db "d*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", 0
15058  6B09 53 68 75 74 
15058  6B0D 20 64 6F 77 
15058  6B11 6E 20 79 6F 
15058  6B15 75 72 20 65 
15058  6B19 6E 67 69 6E 
15058  6B1D 65 73 2E 0A 
15058  6B21 0A 20 43 68 
15058  6B25 69 65 66 20 
15058  6B29 45 6E 67 69 
15058  6B2D 6E 65 65 72 
15058  6B31 20 53 63 6F 
15058  6B35 74 74 20 72 
15058  6B39 65 70 6F 72 
15058  6B3D 74 73 3A 0A 
15058  6B41 20 57 61 72 
15058  6B45 70 20 45 6E 
15058  6B49 67 69 6E 65 
15058  6B4D 73 20 73 68 
15058  6B51 75 74 20 64 
15058  6B55 6F 77 6E 20 
15058  6B59 61 74 20 73 
15058  6B5D 65 63 74 6F 
15058  6B61 72 20 25 64 
15058  6B65 2C 20 25 64 
15058  6B69 20 6F 66 20 
15058  6B6D 71 75 61 64 
15058  6B71 72 61 6E 74 
15058  6B75 20 25 64 2C 
15058  6B79 20 25 64 2E 
15058  6B7D 0A 0A 00 
15059  6B80 57 61 72 70 _s79: .db "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", 0
15059  6B84 20 45 6E 67 
15059  6B88 69 6E 65 73 
15059  6B8C 20 73 68 75 
15059  6B90 74 20 64 6F 
15059  6B94 77 6E 20 61 
15059  6B98 74 20 73 65 
15059  6B9C 63 74 6F 72 
15059  6BA0 20 25 64 2C 
15059  6BA4 20 25 64 20 
15059  6BA8 64 75 65 20 
15059  6BAC 74 6F 20 62 
15059  6BB0 61 64 20 6E 
15059  6BB4 61 76 69 67 
15059  6BB8 61 74 69 6F 
15059  6BBC 6E 2E 0A 0A 
15059  6BC0 00 
15060  6BC1 53 68 69 65 _s80: .db "Shield Control supplies energy to complete maneuver.\n", 0
15060  6BC5 6C 64 20 43 
15060  6BC9 6F 6E 74 72 
15060  6BCD 6F 6C 20 73 
15060  6BD1 75 70 70 6C 
15060  6BD5 69 65 73 20 
15060  6BD9 65 6E 65 72 
15060  6BDD 67 79 20 74 
15060  6BE1 6F 20 63 6F 
15060  6BE5 6D 70 6C 65 
15060  6BE9 74 65 20 6D 
15060  6BED 61 6E 65 75 
15060  6BF1 76 65 72 2E 
15060  6BF5 0A 00 
15061  6BF7 47 52 45 45 _s81: .db "GREEN", 0
15061  6BFB 4E 00 
15062  6BFD 59 45 4C 4C _s82: .db "YELLOW", 0
15062  6C01 4F 57 00 
15063  6C04 2A 52 45 44 _s83: .db "*RED*", 0
15063  6C08 2A 00 
15064  6C0A 44 4F 43 4B _s84: .db "DOCKED", 0
15064  6C0E 45 44 00 
15065  6C11 53 68 69 65 _s85: .db "Shields dropped for docking purposes.", 0
15065  6C15 6C 64 73 20 
15065  6C19 64 72 6F 70 
15065  6C1D 70 65 64 20 
15065  6C21 66 6F 72 20 
15065  6C25 64 6F 63 6B 
15065  6C29 69 6E 67 20 
15065  6C2D 70 75 72 70 
15065  6C31 6F 73 65 73 
15065  6C35 2E 00 
15066  6C37 0A 2A 2A 2A _s86: .db "\n*** Short Range Sensors are out ***", 0
15066  6C3B 20 53 68 6F 
15066  6C3F 72 74 20 52 
15066  6C43 61 6E 67 65 
15066  6C47 20 53 65 6E 
15066  6C4B 73 6F 72 73 
15066  6C4F 20 61 72 65 
15066  6C53 20 6F 75 74 
15066  6C57 20 2A 2A 2A 
15066  6C5B 00 
15067  6C5C 20 20 20 20 _s87: .db "    Stardate            %d\n", 0
15067  6C60 53 74 61 72 
15067  6C64 64 61 74 65 
15067  6C68 20 20 20 20 
15067  6C6C 20 20 20 20 
15067  6C70 20 20 20 20 
15067  6C74 25 64 0A 00 
15068  6C78 20 20 20 20 _s88: .db "    Condition           %s\n", 0
15068  6C7C 43 6F 6E 64 
15068  6C80 69 74 69 6F 
15068  6C84 6E 20 20 20 
15068  6C88 20 20 20 20 
15068  6C8C 20 20 20 20 
15068  6C90 25 73 0A 00 
15069  6C94 20 20 20 20 _s89: .db "    Quadrant            %d, %d\n", 0
15069  6C98 51 75 61 64 
15069  6C9C 72 61 6E 74 
15069  6CA0 20 20 20 20 
15069  6CA4 20 20 20 20 
15069  6CA8 20 20 20 20 
15069  6CAC 25 64 2C 20 
15069  6CB0 25 64 0A 00 
15070  6CB4 20 20 20 20 _s90: .db "    Sector              %d, %d\n", 0
15070  6CB8 53 65 63 74 
15070  6CBC 6F 72 20 20 
15070  6CC0 20 20 20 20 
15070  6CC4 20 20 20 20 
15070  6CC8 20 20 20 20 
15070  6CCC 25 64 2C 20 
15070  6CD0 25 64 0A 00 
15071  6CD4 20 20 20 20 _s91: .db "    Photon Torpedoes    %d\n", 0
15071  6CD8 50 68 6F 74 
15071  6CDC 6F 6E 20 54 
15071  6CE0 6F 72 70 65 
15071  6CE4 64 6F 65 73 
15071  6CE8 20 20 20 20 
15071  6CEC 25 64 0A 00 
15072  6CF0 20 20 20 20 _s92: .db "    Total Energy        %d\n", 0
15072  6CF4 54 6F 74 61 
15072  6CF8 6C 20 45 6E 
15072  6CFC 65 72 67 79 
15072  6D00 20 20 20 20 
15072  6D04 20 20 20 20 
15072  6D08 25 64 0A 00 
15073  6D0C 20 20 20 20 _s93: .db "    Shields             %d\n", 0
15073  6D10 53 68 69 65 
15073  6D14 6C 64 73 20 
15073  6D18 20 20 20 20 
15073  6D1C 20 20 20 20 
15073  6D20 20 20 20 20 
15073  6D24 25 64 0A 00 
15074  6D28 20 20 20 20 _s94: .db "    Klingons Remaining  %d\n", 0
15074  6D2C 4B 6C 69 6E 
15074  6D30 67 6F 6E 73 
15074  6D34 20 52 65 6D 
15074  6D38 61 69 6E 69 
15074  6D3C 6E 67 20 20 
15074  6D40 25 64 0A 00 
15075  6D44 4C 6F 6E 67 _s95: .db "Long Range Scan for Quadrant %d, %d\n\n", 0
15075  6D48 20 52 61 6E 
15075  6D4C 67 65 20 53 
15075  6D50 63 61 6E 20 
15075  6D54 66 6F 72 20 
15075  6D58 51 75 61 64 
15075  6D5C 72 61 6E 74 
15075  6D60 20 25 64 2C 
15075  6D64 20 25 64 0A 
15075  6D68 0A 00 
15076  6D6A 25 73 3A 00 _s96: .db "%s:", 0
15077  6D6E 2A 2A 2A 00 _s97: .db "***", 0
15078  6D72 20 3A 00    _s98: .db " :", 0
15079  6D75 25 73 0A 00 _s99: .db "%s\n", 0
15080  6D79 53 63 69 65 _s100: .db "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n", 0
15080  6D7D 6E 63 65 20 
15080  6D81 4F 66 66 69 
15080  6D85 63 65 72 20 
15080  6D89 53 70 6F 63 
15080  6D8D 6B 20 72 65 
15080  6D91 70 6F 72 74 
15080  6D95 73 3A 0A 20 
15080  6D99 20 27 53 65 
15080  6D9D 6E 73 6F 72 
15080  6DA1 73 20 73 68 
15080  6DA5 6F 77 20 6E 
15080  6DA9 6F 20 65 6E 
15080  6DAD 65 6D 79 20 
15080  6DB1 73 68 69 70 
15080  6DB5 73 20 69 6E 
15080  6DB9 20 74 68 69 
15080  6DBD 73 20 71 75 
15080  6DC1 61 64 72 61 
15080  6DC5 6E 74 27 0A 
15080  6DC9 00 
15081  6DCA 43 6F 6D 70 _s101: .db "Computer failure hampers accuracy.", 0
15081  6DCE 75 74 65 72 
15081  6DD2 20 66 61 69 
15081  6DD6 6C 75 72 65 
15081  6DDA 20 68 61 6D 
15081  6DDE 70 65 72 73 
15081  6DE2 20 61 63 63 
15081  6DE6 75 72 61 63 
15081  6DEA 79 2E 00 
15082  6DED 50 68 61 73 _s102: .db "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", 0
15082  6DF1 65 72 73 20 
15082  6DF5 6C 6F 63 6B 
15082  6DF9 65 64 20 6F 
15082  6DFD 6E 20 74 61 
15082  6E01 72 67 65 74 
15082  6E05 3B 0A 20 45 
15082  6E09 6E 65 72 67 
15082  6E0D 79 20 61 76 
15082  6E11 61 69 6C 61 
15082  6E15 62 6C 65 20 
15082  6E19 3D 20 25 64 
15082  6E1D 20 75 6E 69 
15082  6E21 74 73 0A 0A 
15082  6E25 20 4E 75 6D 
15082  6E29 62 65 72 20 
15082  6E2D 6F 66 20 75 
15082  6E31 6E 69 74 73 
15082  6E35 20 74 6F 20 
15082  6E39 66 69 72 65 
15082  6E3D 3A 20 00 
15083  6E40 4E 6F 74 20 _s103: .db "Not enough energy available.\n", 0
15083  6E44 65 6E 6F 75 
15083  6E48 67 68 20 65 
15083  6E4C 6E 65 72 67 
15083  6E50 79 20 61 76 
15083  6E54 61 69 6C 61 
15083  6E58 62 6C 65 2E 
15083  6E5C 0A 00 
15084  6E5E 53 65 6E 73 _s104: .db "Sensors show no damage to enemy at %d, %d\n\n", 0
15084  6E62 6F 72 73 20 
15084  6E66 73 68 6F 77 
15084  6E6A 20 6E 6F 20 
15084  6E6E 64 61 6D 61 
15084  6E72 67 65 20 74 
15084  6E76 6F 20 65 6E 
15084  6E7A 65 6D 79 20 
15084  6E7E 61 74 20 25 
15084  6E82 64 2C 20 25 
15084  6E86 64 0A 0A 00 
15085  6E8A 25 64 20 75 _s105: .db "%d unit hit on Klingon at sector %d, %d\n", 0
15085  6E8E 6E 69 74 20 
15085  6E92 68 69 74 20 
15085  6E96 6F 6E 20 4B 
15085  6E9A 6C 69 6E 67 
15085  6E9E 6F 6E 20 61 
15085  6EA2 74 20 73 65 
15085  6EA6 63 74 6F 72 
15085  6EAA 20 25 64 2C 
15085  6EAE 20 25 64 0A 
15085  6EB2 00 
15086  6EB3 2A 2A 2A 20 _s106: .db "*** Klingon Destroyed ***\n", 0
15086  6EB7 4B 6C 69 6E 
15086  6EBB 67 6F 6E 20 
15086  6EBF 44 65 73 74 
15086  6EC3 72 6F 79 65 
15086  6EC7 64 20 2A 2A 
15086  6ECB 2A 0A 00 
15087  6ECE 20 20 20 28 _s107: .db "   (Sensors show %d units remaining.)\n\n", 0
15087  6ED2 53 65 6E 73 
15087  6ED6 6F 72 73 20 
15087  6EDA 73 68 6F 77 
15087  6EDE 20 25 64 20 
15087  6EE2 75 6E 69 74 
15087  6EE6 73 20 72 65 
15087  6EEA 6D 61 69 6E 
15087  6EEE 69 6E 67 2E 
15087  6EF2 29 0A 0A 00 
15088  6EF6 41 6C 6C 20 _s108: .db "All photon torpedoes expended", 0
15088  6EFA 70 68 6F 74 
15088  6EFE 6F 6E 20 74 
15088  6F02 6F 72 70 65 
15088  6F06 64 6F 65 73 
15088  6F0A 20 65 78 70 
15088  6F0E 65 6E 64 65 
15088  6F12 64 00 
15089  6F14 45 6E 73 69 _s109: .db "Ensign Chekov%s", 0
15089  6F18 67 6E 20 43 
15089  6F1C 68 65 6B 6F 
15089  6F20 76 25 73 00 
15090  6F24 54 6F 72 70 _s110: .db "Torpedo Track:", 0
15090  6F28 65 64 6F 20 
15090  6F2C 54 72 61 63 
15090  6F30 6B 3A 00 
15091  6F33 20 20 20 20 _s111: .db "    %d, %d\n", 0
15091  6F37 25 64 2C 20 
15091  6F3B 25 64 0A 00 
15092  6F3F 54 6F 72 70 _s112: .db "Torpedo Missed\n", 0
15092  6F43 65 64 6F 20 
15092  6F47 4D 69 73 73 
15092  6F4B 65 64 0A 00 
15093  6F4F 53 74 61 72 _s113: .db "Star at %d, %d absorbed torpedo energy.\n\n", 0
15093  6F53 20 61 74 20 
15093  6F57 25 64 2C 20 
15093  6F5B 25 64 20 61 
15093  6F5F 62 73 6F 72 
15093  6F63 62 65 64 20 
15093  6F67 74 6F 72 70 
15093  6F6B 65 64 6F 20 
15093  6F6F 65 6E 65 72 
15093  6F73 67 79 2E 0A 
15093  6F77 0A 00 
15094  6F79 2A 2A 2A 20 _s114: .db "*** Starbase Destroyed ***", 0
15094  6F7D 53 74 61 72 
15094  6F81 62 61 73 65 
15094  6F85 20 44 65 73 
15094  6F89 74 72 6F 79 
15094  6F8D 65 64 20 2A 
15094  6F91 2A 2A 00 
15095  6F94 54 68 61 74 _s115: .db "That does it, Captain!!", 0
15095  6F98 20 64 6F 65 
15095  6F9C 73 20 69 74 
15095  6FA0 2C 20 43 61 
15095  6FA4 70 74 61 69 
15095  6FA8 6E 21 21 00 
15096  6FAC 59 6F 75 20 _s116: .db "You are hereby relieved of command\n", 0
15096  6FB0 61 72 65 20 
15096  6FB4 68 65 72 65 
15096  6FB8 62 79 20 72 
15096  6FBC 65 6C 69 65 
15096  6FC0 76 65 64 20 
15096  6FC4 6F 66 20 63 
15096  6FC8 6F 6D 6D 61 
15096  6FCC 6E 64 0A 00 
15097  6FD0 61 6E 64 20 _s117: .db "and sentenced to 99 stardates of hard", 0
15097  6FD4 73 65 6E 74 
15097  6FD8 65 6E 63 65 
15097  6FDC 64 20 74 6F 
15097  6FE0 20 39 39 20 
15097  6FE4 73 74 61 72 
15097  6FE8 64 61 74 65 
15097  6FEC 73 20 6F 66 
15097  6FF0 20 68 61 72 
15097  6FF4 64 00 
15098  6FF6 6C 61 62 6F _s118: .db "labor on Cygnus 12!!\n", 0
15098  6FFA 72 20 6F 6E 
15098  6FFE 20 43 79 67 
15098  7002 6E 75 73 20 
15098  7006 31 32 21 21 
15098  700A 0A 00 
15099  700C 53 74 61 72 _s119: .db "Starfleet Command reviewing your record to consider\n court martial!\n", 0
15099  7010 66 6C 65 65 
15099  7014 74 20 43 6F 
15099  7018 6D 6D 61 6E 
15099  701C 64 20 72 65 
15099  7020 76 69 65 77 
15099  7024 69 6E 67 20 
15099  7028 79 6F 75 72 
15099  702C 20 72 65 63 
15099  7030 6F 72 64 20 
15099  7034 74 6F 20 63 
15099  7038 6F 6E 73 69 
15099  703C 64 65 72 0A 
15099  7040 20 63 6F 75 
15099  7044 72 74 20 6D 
15099  7048 61 72 74 69 
15099  704C 61 6C 21 0A 
15099  7050 00 
15100  7051 44 61 6D 61 _s120: .db "Damage Control report not available.", 0
15100  7055 67 65 20 43 
15100  7059 6F 6E 74 72 
15100  705D 6F 6C 20 72 
15100  7061 65 70 6F 72 
15100  7065 74 20 6E 6F 
15100  7069 74 20 61 76 
15100  706D 61 69 6C 61 
15100  7071 62 6C 65 2E 
15100  7075 00 
15101  7076 0A 54 65 63 _s121: .db "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repa"
15101  707A 68 6E 69 63 
15101  707E 69 61 6E 73 
15101  7082 20 73 74 61 
15101  7086 6E 64 69 6E 
15101  708A 67 20 62 79 
15101  708E 20 74 6F 20 
15101  7092 65 66 66 65 
15101  7096 63 74 20 72 
15101  709A 65 70 61 69 
15101  709E 72 73 20 74 
15101  70A2 6F 20 79 6F 
15101  70A6 75 72 20 73 
15101  70AA 68 69 70 3B 
15101  70AE 0A 45 73 74 
15101  70B2 69 6D 61 74 
15101  70B6 65 64 20 74 
15101  70BA 69 6D 65 20 
15101  70BE 74 6F 20 72 
15101  70C2 65 70 61 69 
15101  70C6 72 3A 20 25 
15101  70CA 73 20 73 74 
15101  70CE 61 72 64 61 
15101  70D2 74 65 73 2E 
15101  70D6 0A 20 57 69 
15101  70DA 6C 6C 20 79 
15101  70DE 6F 75 20 61 
15101  70E2 75 74 68 6F 
15101  70E6 72 69 7A 65 
15101  70EA 20 74 68 65 
15101  70EE 20 72 65 70 
15101  70F2 61 
15102  70F3 69 72 20 6F .db "ir order (y/N)? ", 0
15102  70F7 72 64 65 72 
15102  70FB 20 28 79 2F 
15102  70FF 4E 29 3F 20 
15102  7103 00 
15103  7104 44 65 76 69 _s122: .db "Device            State of Repair", 0
15103  7108 63 65 20 20 
15103  710C 20 20 20 20 
15103  7110 20 20 20 20 
15103  7114 20 20 53 74 
15103  7118 61 74 65 20 
15103  711C 6F 66 20 52 
15103  7120 65 70 61 69 
15103  7124 72 00 
15104  7126 25 2D 32 35 _s123: .db "%-25s%6s\n", 0
15104  712A 73 25 36 73 
15104  712E 0A 00 
15105  7130 0A 00       _s124: .db "\n", 0
15106  7132 45 6E 65 72 _s125: .db "Energy available = %d\n\n Input number of units to shields: ", 0
15106  7136 67 79 20 61 
15106  713A 76 61 69 6C 
15106  713E 61 62 6C 65 
15106  7142 20 3D 20 25 
15106  7146 64 0A 0A 20 
15106  714A 49 6E 70 75 
15106  714E 74 20 6E 75 
15106  7152 6D 62 65 72 
15106  7156 20 6F 66 20 
15106  715A 75 6E 69 74 
15106  715E 73 20 74 6F 
15106  7162 20 73 68 69 
15106  7166 65 6C 64 73 
15106  716A 3A 20 00 
15107  716D 3C 53 68 69 _s126: .db "<Shields Unchanged>\n", 0
15107  7171 65 6C 64 73 
15107  7175 20 55 6E 63 
15107  7179 68 61 6E 67 
15107  717D 65 64 3E 0A 
15107  7181 00 
15108  7182 53 68 69 65 _s127: .db "Shield Control Reports:\n  This is not the Federation Treasury.", 0
15108  7186 6C 64 20 43 
15108  718A 6F 6E 74 72 
15108  718E 6F 6C 20 52 
15108  7192 65 70 6F 72 
15108  7196 74 73 3A 0A 
15108  719A 20 20 54 68 
15108  719E 69 73 20 69 
15108  71A2 73 20 6E 6F 
15108  71A6 74 20 74 68 
15108  71AA 65 20 46 65 
15108  71AE 64 65 72 61 
15108  71B2 74 69 6F 6E 
15108  71B6 20 54 72 65 
15108  71BA 61 73 75 72 
15108  71BE 79 2E 00 
15109  71C1 44 65 66 6C _s128: .db "Deflector Control Room report:\n  Shields now at %d units per your command.\n\n", 0
15109  71C5 65 63 74 6F 
15109  71C9 72 20 43 6F 
15109  71CD 6E 74 72 6F 
15109  71D1 6C 20 52 6F 
15109  71D5 6F 6D 20 72 
15109  71D9 65 70 6F 72 
15109  71DD 74 3A 0A 20 
15109  71E1 20 53 68 69 
15109  71E5 65 6C 64 73 
15109  71E9 20 6E 6F 77 
15109  71ED 20 61 74 20 
15109  71F1 25 64 20 75 
15109  71F5 6E 69 74 73 
15109  71F9 20 70 65 72 
15109  71FD 20 79 6F 75 
15109  7201 72 20 63 6F 
15109  7205 6D 6D 61 6E 
15109  7209 64 2E 0A 0A 
15109  720D 00 
15110  720E 43 6F 6D 70 _s129: .db "Computer active and awating command: ", 0
15110  7212 75 74 65 72 
15110  7216 20 61 63 74 
15110  721A 69 76 65 20 
15110  721E 61 6E 64 20 
15110  7222 61 77 61 74 
15110  7226 69 6E 67 20 
15110  722A 63 6F 6D 6D 
15110  722E 61 6E 64 3A 
15110  7232 20 00 
15111  7234 46 75 6E 63 _s130: .db "Functions available from Library-Computer:\n\n", 0
15111  7238 74 69 6F 6E 
15111  723C 73 20 61 76 
15111  7240 61 69 6C 61 
15111  7244 62 6C 65 20 
15111  7248 66 72 6F 6D 
15111  724C 20 4C 69 62 
15111  7250 72 61 72 79 
15111  7254 2D 43 6F 6D 
15111  7258 70 75 74 65 
15111  725C 72 3A 0A 0A 
15111  7260 00 
15112  7261 20 20 20 30 _s131: .db "   0 = Cumulative Galactic Record\n", 0
15112  7265 20 3D 20 43 
15112  7269 75 6D 75 6C 
15112  726D 61 74 69 76 
15112  7271 65 20 47 61 
15112  7275 6C 61 63 74 
15112  7279 69 63 20 52 
15112  727D 65 63 6F 72 
15112  7281 64 0A 00 
15113  7284 20 20 20 31 _s132: .db "   1 = Status Report\n", 0
15113  7288 20 3D 20 53 
15113  728C 74 61 74 75 
15113  7290 73 20 52 65 
15113  7294 70 6F 72 74 
15113  7298 0A 00 
15114  729A 20 20 20 32 _s133: .db "   2 = Photon Torpedo Data\n", 0
15114  729E 20 3D 20 50 
15114  72A2 68 6F 74 6F 
15114  72A6 6E 20 54 6F 
15114  72AA 72 70 65 64 
15114  72AE 6F 20 44 61 
15114  72B2 74 61 0A 00 
15115  72B6 20 20 20 33 _s134: .db "   3 = Starbase Nav Data\n", 0
15115  72BA 20 3D 20 53 
15115  72BE 74 61 72 62 
15115  72C2 61 73 65 20 
15115  72C6 4E 61 76 20 
15115  72CA 44 61 74 61 
15115  72CE 0A 00 
15116  72D0 20 20 20 34 _s135: .db "   4 = Direction/Distance Calculator\n", 0
15116  72D4 20 3D 20 44 
15116  72D8 69 72 65 63 
15116  72DC 74 69 6F 6E 
15116  72E0 2F 44 69 73 
15116  72E4 74 61 6E 63 
15116  72E8 65 20 43 61 
15116  72EC 6C 63 75 6C 
15116  72F0 61 74 6F 72 
15116  72F4 0A 00 
15117  72F6 20 20 20 35 _s136: .db "   5 = Galaxy Region Name Map\n", 0
15117  72FA 20 3D 20 47 
15117  72FE 61 6C 61 78 
15117  7302 79 20 52 65 
15117  7306 67 69 6F 6E 
15117  730A 20 4E 61 6D 
15117  730E 65 20 4D 61 
15117  7312 70 0A 00 
15118  7315 0A 20 20 20 _s137: .db "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", 0
15118  7319 20 20 43 6F 
15118  731D 6D 70 75 74 
15118  7321 65 72 20 52 
15118  7325 65 63 6F 72 
15118  7329 64 20 6F 66 
15118  732D 20 47 61 6C 
15118  7331 61 78 79 20 
15118  7335 66 6F 72 20 
15118  7339 51 75 61 64 
15118  733D 72 61 6E 74 
15118  7341 20 25 64 2C 
15118  7345 25 64 0A 0A 
15118  7349 00 
15119  734A 20 20 20 20 _s138: .db "     1     2     3     4     5     6     7     8", 0
15119  734E 20 31 20 20 
15119  7352 20 20 20 32 
15119  7356 20 20 20 20 
15119  735A 20 33 20 20 
15119  735E 20 20 20 34 
15119  7362 20 20 20 20 
15119  7366 20 35 20 20 
15119  736A 20 20 20 36 
15119  736E 20 20 20 20 
15119  7372 20 37 20 20 
15119  7376 20 20 20 38 
15119  737A 00 
15120  737B 25 73 25 64 _s139: .db "%s%d", 0
15120  737F 00 
15121  7380 20 20 20 53 _s140: .db "   Status Report:\n", 0
15121  7384 74 61 74 75 
15121  7388 73 20 52 65 
15121  738C 70 6F 72 74 
15121  7390 3A 0A 00 
15122  7393 4B 6C 69 6E _s141: .db "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 0
15122  7397 67 6F 6E 25 
15122  739B 73 20 4C 65 
15122  739F 66 74 3A 20 
15122  73A3 25 64 0A 20 
15122  73A7 4D 69 73 73 
15122  73AB 69 6F 6E 20 
15122  73AF 6D 75 73 74 
15122  73B3 20 62 65 20 
15122  73B7 63 6F 6D 70 
15122  73BB 6C 65 74 65 
15122  73BF 64 20 69 6E 
15122  73C3 20 25 64 2E 
15122  73C7 25 64 20 73 
15122  73CB 74 61 72 64 
15122  73CF 61 74 65 73 
15122  73D3 0A 00 
15123  73D5 59 6F 75 72 _s142: .db "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n", 0
15123  73D9 20 73 74 75 
15123  73DD 70 69 64 69 
15123  73E1 74 79 20 68 
15123  73E5 61 73 20 6C 
15123  73E9 65 66 74 20 
15123  73ED 79 6F 75 20 
15123  73F1 6F 6E 20 79 
15123  73F5 6F 75 72 20 
15123  73F9 6F 77 6E 20 
15123  73FD 69 6E 20 74 
15123  7401 68 65 20 67 
15123  7405 61 6C 61 78 
15123  7409 79 0A 20 2D 
15123  740D 2D 20 79 6F 
15123  7411 75 20 68 61 
15123  7415 76 65 20 6E 
15123  7419 6F 20 73 74 
15123  741D 61 72 62 61 
15123  7421 73 65 73 20 
15123  7425 6C 65 66 74 
15123  7429 21 0A 00 
15124  742C 54 68 65 20 _s143: .db "The Federation is maintaining %d starbase%s in the galaxy\n\n", 0
15124  7430 46 65 64 65 
15124  7434 72 61 74 69 
15124  7438 6F 6E 20 69 
15124  743C 73 20 6D 61 
15124  7440 69 6E 74 61 
15124  7444 69 6E 69 6E 
15124  7448 67 20 25 64 
15124  744C 20 73 74 61 
15124  7450 72 62 61 73 
15124  7454 65 25 73 20 
15124  7458 69 6E 20 74 
15124  745C 68 65 20 67 
15124  7460 61 6C 61 78 
15124  7464 79 0A 0A 00 
15125  7468 46 72 6F 6D _s144: .db "From Enterprise to Klingon battlecriuser%s:\n\n", 0
15125  746C 20 45 6E 74 
15125  7470 65 72 70 72 
15125  7474 69 73 65 20 
15125  7478 74 6F 20 4B 
15125  747C 6C 69 6E 67 
15125  7480 6F 6E 20 62 
15125  7484 61 74 74 6C 
15125  7488 65 63 72 69 
15125  748C 75 73 65 72 
15125  7490 25 73 3A 0A 
15125  7494 0A 00 
15126  7496 4D 72 2E 20 _s145: .db "Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n", 0
15126  749A 53 70 6F 63 
15126  749E 6B 20 72 65 
15126  74A2 70 6F 72 74 
15126  74A6 73 2C 0A 20 
15126  74AA 20 53 65 6E 
15126  74AE 73 6F 72 73 
15126  74B2 20 73 68 6F 
15126  74B6 77 20 6E 6F 
15126  74BA 20 73 74 61 
15126  74BE 72 62 61 73 
15126  74C2 65 73 20 69 
15126  74C6 6E 20 74 68 
15126  74CA 69 73 20 71 
15126  74CE 75 61 64 72 
15126  74D2 61 6E 74 2E 
15126  74D6 0A 00 
15127  74D8 44 69 72 65 _s146: .db "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 0
15127  74DC 63 74 69 6F 
15127  74E0 6E 2F 44 69 
15127  74E4 73 74 61 6E 
15127  74E8 63 65 20 43 
15127  74EC 61 6C 63 75 
15127  74F0 6C 61 74 6F 
15127  74F4 72 0A 20 59 
15127  74F8 6F 75 20 61 
15127  74FC 72 65 20 61 
15127  7500 74 20 71 75 
15127  7504 61 64 72 61 
15127  7508 6E 74 20 25 
15127  750C 64 2C 25 64 
15127  7510 20 73 65 63 
15127  7514 74 6F 72 20 
15127  7518 25 64 2C 25 
15127  751C 64 0A 0A 20 
15127  7520 50 6C 65 61 
15127  7524 73 65 20 65 
15127  7528 6E 74 65 72 
15127  752C 20 69 6E 69 
15127  7530 74 69 61 6C 
15127  7534 20 58 20 63 
15127  7538 6F 6F 72 64 
15127  753C 69 6E 61 74 
15127  7540 65 3A 20 00 
15128  7544 50 6C 65 61 _s147: .db "Please enter initial Y coordinate: ", 0
15128  7548 73 65 20 65 
15128  754C 6E 74 65 72 
15128  7550 20 69 6E 69 
15128  7554 74 69 61 6C 
15128  7558 20 59 20 63 
15128  755C 6F 6F 72 64 
15128  7560 69 6E 61 74 
15128  7564 65 3A 20 00 
15129  7568 50 6C 65 61 _s148: .db "Please enter final X coordinate: ", 0
15129  756C 73 65 20 65 
15129  7570 6E 74 65 72 
15129  7574 20 66 69 6E 
15129  7578 61 6C 20 58 
15129  757C 20 63 6F 6F 
15129  7580 72 64 69 6E 
15129  7584 61 74 65 3A 
15129  7588 20 00 
15130  758A 50 6C 65 61 _s149: .db "Please enter final Y coordinate: ", 0
15130  758E 73 65 20 65 
15130  7592 6E 74 65 72 
15130  7596 20 66 69 6E 
15130  759A 61 6C 20 59 
15130  759E 20 63 6F 6F 
15130  75A2 72 64 69 6E 
15130  75A6 61 74 65 3A 
15130  75AA 20 00 
15131  75AC 0A 20 20 20 _s150: .db "\n                   The Galaxy\n\n", 0
15131  75B0 20 20 20 20 
15131  75B4 20 20 20 20 
15131  75B8 20 20 20 20 
15131  75BC 20 20 20 20 
15131  75C0 54 68 65 20 
15131  75C4 47 61 6C 61 
15131  75C8 78 79 0A 0A 
15131  75CC 00 
15132  75CD 20 20 20 20 _s151: .db "    1     2     3     4     5     6     7     8\n", 0
15132  75D1 31 20 20 20 
15132  75D5 20 20 32 20 
15132  75D9 20 20 20 20 
15132  75DD 33 20 20 20 
15132  75E1 20 20 34 20 
15132  75E5 20 20 20 20 
15132  75E9 35 20 20 20 
15132  75ED 20 20 36 20 
15132  75F1 20 20 20 20 
15132  75F5 37 20 20 20 
15132  75F9 20 20 38 0A 
15132  75FD 00 
15133  75FE 25 73 25 64 _s152: .db "%s%d ", 0
15133  7602 20 00 
15134  7604 20 20 44 49 _s153: .db "  DIRECTION = ", 0
15134  7608 52 45 43 54 
15134  760C 49 4F 4E 20 
15134  7610 3D 20 00 
15135  7613 25 73 00    _s154: .db "%s", 0
15136  7616 54 68 65 20 _s155: .db "The Enterprise has been destroyed. The Federation will be conquered.\n", 0
15136  761A 45 6E 74 65 
15136  761E 72 70 72 69 
15136  7622 73 65 20 68 
15136  7626 61 73 20 62 
15136  762A 65 65 6E 20 
15136  762E 64 65 73 74 
15136  7632 72 6F 79 65 
15136  7636 64 2E 20 54 
15136  763A 68 65 20 46 
15136  763E 65 64 65 72 
15136  7642 61 74 69 6F 
15136  7646 6E 20 77 69 
15136  764A 6C 6C 20 62 
15136  764E 65 20 63 6F 
15136  7652 6E 71 75 65 
15136  7656 72 65 64 2E 
15136  765A 0A 00 
15137  765C 49 74 20 69 _s156: .db "It is stardate %d.\n\n", 0
15137  7660 73 20 73 74 
15137  7664 61 72 64 61 
15137  7668 74 65 20 25 
15137  766C 64 2E 0A 0A 
15137  7670 00 
15138  7671 54 68 65 72 _s157: .db "There were %d Klingon Battlecruisers left at the end of your mission.\n\n", 0
15138  7675 65 20 77 65 
15138  7679 72 65 20 25 
15138  767D 64 20 4B 6C 
15138  7681 69 6E 67 6F 
15138  7685 6E 20 42 61 
15138  7689 74 74 6C 65 
15138  768D 63 72 75 69 
15138  7691 73 65 72 73 
15138  7695 20 6C 65 66 
15138  7699 74 20 61 74 
15138  769D 20 74 68 65 
15138  76A1 20 65 6E 64 
15138  76A5 20 6F 66 20 
15138  76A9 79 6F 75 72 
15138  76AD 20 6D 69 73 
15138  76B1 73 69 6F 6E 
15138  76B5 2E 0A 0A 00 
15139  76B9 43 6F 6E 67 _s158: .db "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n", 0
15139  76BD 72 61 74 75 
15139  76C1 6C 61 74 69 
15139  76C5 6F 6E 73 2C 
15139  76C9 20 43 61 70 
15139  76CD 74 61 69 6E 
15139  76D1 21 20 20 54 
15139  76D5 68 65 20 6C 
15139  76D9 61 73 74 20 
15139  76DD 4B 6C 69 6E 
15139  76E1 67 6F 6E 20 
15139  76E5 42 61 74 74 
15139  76E9 6C 65 20 43 
15139  76ED 72 75 69 73 
15139  76F1 65 72 0A 20 
15139  76F5 6D 65 6E 61 
15139  76F9 63 69 6E 67 
15139  76FD 20 74 68 65 
15139  7701 20 46 65 64 
15139  7705 65 72 61 74 
15139  7709 69 6F 6E 20 
15139  770D 68 61 73 20 
15139  7711 62 65 65 6E 
15139  7715 20 64 65 73 
15139  7719 74 6F 79 65 
15139  771D 64 2E 0A 00 
15140  7721 59 6F 75 72 _s159: .db "Your efficiency rating is %s\n", 0
15140  7725 20 65 66 66 
15140  7729 69 63 69 65 
15140  772D 6E 63 79 20 
15140  7731 72 61 74 69 
15140  7735 6E 67 20 69 
15140  7739 73 20 25 73 
15140  773D 0A 00 
15141  773F 54 68 65 20 _s160: .db "The Federation is in need of a new starship commander", 0
15141  7743 46 65 64 65 
15141  7747 72 61 74 69 
15141  774B 6F 6E 20 69 
15141  774F 73 20 69 6E 
15141  7753 20 6E 65 65 
15141  7757 64 20 6F 66 
15141  775B 20 61 20 6E 
15141  775F 65 77 20 73 
15141  7763 74 61 72 73 
15141  7767 68 69 70 20 
15141  776B 63 6F 6D 6D 
15141  776F 61 6E 64 65 
15141  7773 72 00 
15142  7775 20 66 6F 72 _s161: .db " for a similar mission.\n", 0
15142  7779 20 61 20 73 
15142  777D 69 6D 69 6C 
15142  7781 61 72 20 6D 
15142  7785 69 73 73 69 
15142  7789 6F 6E 2E 0A 
15142  778D 00 
15143  778E 49 66 20 74 _s162: .db "If there is a volunteer, let him step forward and", 0
15143  7792 68 65 72 65 
15143  7796 20 69 73 20 
15143  779A 61 20 76 6F 
15143  779E 6C 75 6E 74 
15143  77A2 65 65 72 2C 
15143  77A6 20 6C 65 74 
15143  77AA 20 68 69 6D 
15143  77AE 20 73 74 65 
15143  77B2 70 20 66 6F 
15143  77B6 72 77 61 72 
15143  77BA 64 20 61 6E 
15143  77BE 64 00 
15144  77C0 20 65 6E 74 _s163: .db " enter aye: ", 0
15144  77C4 65 72 20 61 
15144  77C8 79 65 3A 20 
15144  77CC 00 
15145  77CD 61 79 65 00 _s164: .db "aye", 0
15146  77D1 53 74 61 72 _s165: .db "Starbase shields protect the Enterprise\n", 0
15146  77D5 62 61 73 65 
15146  77D9 20 73 68 69 
15146  77DD 65 6C 64 73 
15146  77E1 20 70 72 6F 
15146  77E5 74 65 63 74 
15146  77E9 20 74 68 65 
15146  77ED 20 45 6E 74 
15146  77F1 65 72 70 72 
15146  77F5 69 73 65 0A 
15146  77F9 00 
15147  77FA 25 64 20 75 _s166: .db "%d unit hit on Enterprise from sector %d, %d\n", 0
15147  77FE 6E 69 74 20 
15147  7802 68 69 74 20 
15147  7806 6F 6E 20 45 
15147  780A 6E 74 65 72 
15147  780E 70 72 69 73 
15147  7812 65 20 66 72 
15147  7816 6F 6D 20 73 
15147  781A 65 63 74 6F 
15147  781E 72 20 25 64 
15147  7822 2C 20 25 64 
15147  7826 0A 00 
15148  7828 20 20 20 20 _s167: .db "    <Shields down to %d units>\n\n", 0
15148  782C 3C 53 68 69 
15148  7830 65 6C 64 73 
15148  7834 20 64 6F 77 
15148  7838 6E 20 74 6F 
15148  783C 20 25 64 20 
15148  7840 75 6E 69 74 
15148  7844 73 3E 0A 0A 
15148  7848 00 
15149  7849 44 61 6D 61 _s168: .db "Damage Control reports\n%s damaged by hit\n\n", 0
15149  784D 67 65 20 43 
15149  7851 6F 6E 74 72 
15149  7855 6F 6C 20 72 
15149  7859 65 70 6F 72 
15149  785D 74 73 0A 25 
15149  7861 73 20 64 61 
15149  7865 6D 61 67 65 
15149  7869 64 20 62 79 
15149  786D 20 68 69 74 
15149  7871 0A 0A 00 
15150  7874 20 20 20 20 _s169: .db "    %s repair completed\n\n", 0
15150  7878 25 73 20 72 
15150  787C 65 70 61 69 
15150  7880 72 20 63 6F 
15150  7884 6D 70 6C 65 
15150  7888 74 65 64 0A 
15150  788C 0A 00 
15151  788E 20 20 20 20 _s170: .db "    %s damaged\n\n", 0
15151  7892 25 73 20 64 
15151  7896 61 6D 61 67 
15151  789A 65 64 0A 0A 
15151  789E 00 
15152  789F 20 20 20 20 _s171: .db "    %s state of repair improved\n\n", 0
15152  78A3 25 73 20 73 
15152  78A7 74 61 74 65 
15152  78AB 20 6F 66 20 
15152  78AF 72 65 70 61 
15152  78B3 69 72 20 69 
15152  78B7 6D 70 72 6F 
15152  78BB 76 65 64 0A 
15152  78BF 0A 00 
15153  78C1 20 49 00    _s172: .db " I", 0
15154  78C4 20 49 49 00 _s173: .db " II", 0
15155  78C8 20 49 49 49 _s174: .db " III", 0
15155  78CC 00 
15156  78CD 20 49 56 00 _s175: .db " IV", 0
15157  78D1 55 6E 6B 6E _s176: .db "Unknown", 0
15157  78D5 6F 77 6E 00 
15158  78D9             
15159  78D9 DB 78       _heap_top: .dw _heap
15160  78DB 00          _heap: .db 0
15161  78DC             ; --- END DATA BLOCK
15162  78DC             
15163  78DC             .end
tasm: Number of errors = 0
