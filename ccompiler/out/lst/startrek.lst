0001   0000             ; --- FILENAME: games/startrek.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; intro(); 
0011   0408             ; --- START FUNCTION CALL
0012   0408 07 F9 09      call intro
0013   040B             ; new_game(); 
0014   040B             ; --- START FUNCTION CALL
0015   040B 07 9C 0A      call new_game
0016   040E             ; return 0; 
0017   040E FD 2E 00 00   mov32 cb, $00000000
0017   0412 00 00 
0018   0414 F9            leave
0019   0415 05 0B         syscall sys_terminate_proc
0020   0417             
0021   0417             TO_FIXED:
0022   0417 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0023   041A             ; return x * 10; 
0024   041A FA 05 00      lea d, [bp + 5] ; $x
0025   041D 2A            mov b, [d]
0026   041E 38 00 00      mov c, 0
0027   0421             ; --- START FACTORS
0028   0421 D7            push a
0029   0422 FD D8         push g
0030   0424 11            mov a, b
0031   0425 FD 7A         mov g, c
0032   0427 FD 2E 0A 00   mov32 cb, $0000000a
0032   042B 00 00 
0033   042D D7            push a     ; save left operand
0034   042E 8E            xor a, b   ; xor sign bits
0035   042F FD AA         swp a      ; swap bytes
0036   0431 83            mov cl, al ; save result of xor into 'dl'
0037   0432 E4            pop a      ; restore left side operator
0038   0433 DF            push cl    ; save result of xor above
0039   0434 FD AA         swp a  
0040   0436 93 80         test al, $80  
0041   0438 FD AA         swp a  
0042   043A C6 3F 04      jz skip_invert_a_2  
0043   043D FD 95         neg a 
0044   043F             skip_invert_a_2:   
0045   043F FD AB         swp b
0046   0441 FD 93 80      test bl, $80  
0047   0444 FD AB         swp b
0048   0446 C6 4B 04      jz skip_invert_b_2  
0049   0449 FD 97         neg b 
0050   044B             skip_invert_b_2:   
0051   044B AC            mul a, b ; *
0052   044C FD 78         mov g, a
0053   044E 11            mov a, b
0054   044F EA            pop bl
0055   0450 FD 93 80      test bl, $80
0056   0453 C6 60 04      jz _same_signs_2
0057   0456 2F            mov bl, al
0058   0457 95            not a
0059   0458 FD 97         neg b
0060   045A 5B 00 00      adc a, 0
0061   045D FD 78         mov g, a
0062   045F 11            mov a, b
0063   0460             _same_signs_2:
0064   0460 FD 38         mov c, g
0065   0462 27            mov b, a
0066   0463 FD F1         pop g
0067   0465 E4            pop a
0068   0466             ; --- END FACTORS
0069   0466 F9            leave
0070   0467 09            ret
0071   0468             
0072   0468             FROM_FIXED:
0073   0468 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0074   046B             ; return x / 10; 
0075   046B FA 05 00      lea d, [bp + 5] ; $x
0076   046E 2A            mov b, [d]
0077   046F 38 00 00      mov c, 0
0078   0472             ; --- START FACTORS
0079   0472 D7            push a
0080   0473 FD D8         push g
0081   0475 11            mov a, b
0082   0476 FD 7A         mov g, c
0083   0478 FD 2E 0A 00   mov32 cb, $0000000a
0083   047C 00 00 
0084   047E FD D8         push g ; save 'g' as the div instruction uses it
0085   0480 AE            div a, b ; /, a: quotient, b: remainder
0086   0481 FD F1         pop g
0087   0483 FD 38         mov c, g
0088   0485 27            mov b, a
0089   0486 FD F1         pop g
0090   0488 E4            pop a
0091   0489             ; --- END FACTORS
0092   0489 F9            leave
0093   048A 09            ret
0094   048B             
0095   048B             TO_FIXED00:
0096   048B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0097   048E             ; return x * 100; 
0098   048E FA 05 00      lea d, [bp + 5] ; $x
0099   0491 2A            mov b, [d]
0100   0492 38 00 00      mov c, 0
0101   0495             ; --- START FACTORS
0102   0495 D7            push a
0103   0496 FD D8         push g
0104   0498 11            mov a, b
0105   0499 FD 7A         mov g, c
0106   049B FD 2E 64 00   mov32 cb, $00000064
0106   049F 00 00 
0107   04A1 D7            push a     ; save left operand
0108   04A2 8E            xor a, b   ; xor sign bits
0109   04A3 FD AA         swp a      ; swap bytes
0110   04A5 83            mov cl, al ; save result of xor into 'dl'
0111   04A6 E4            pop a      ; restore left side operator
0112   04A7 DF            push cl    ; save result of xor above
0113   04A8 FD AA         swp a  
0114   04AA 93 80         test al, $80  
0115   04AC FD AA         swp a  
0116   04AE C6 B3 04      jz skip_invert_a_6  
0117   04B1 FD 95         neg a 
0118   04B3             skip_invert_a_6:   
0119   04B3 FD AB         swp b
0120   04B5 FD 93 80      test bl, $80  
0121   04B8 FD AB         swp b
0122   04BA C6 BF 04      jz skip_invert_b_6  
0123   04BD FD 97         neg b 
0124   04BF             skip_invert_b_6:   
0125   04BF AC            mul a, b ; *
0126   04C0 FD 78         mov g, a
0127   04C2 11            mov a, b
0128   04C3 EA            pop bl
0129   04C4 FD 93 80      test bl, $80
0130   04C7 C6 D4 04      jz _same_signs_6
0131   04CA 2F            mov bl, al
0132   04CB 95            not a
0133   04CC FD 97         neg b
0134   04CE 5B 00 00      adc a, 0
0135   04D1 FD 78         mov g, a
0136   04D3 11            mov a, b
0137   04D4             _same_signs_6:
0138   04D4 FD 38         mov c, g
0139   04D6 27            mov b, a
0140   04D7 FD F1         pop g
0141   04D9 E4            pop a
0142   04DA             ; --- END FACTORS
0143   04DA F9            leave
0144   04DB 09            ret
0145   04DC             
0146   04DC             FROM_FIXED00:
0147   04DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0148   04DF             ; return x / 100; 
0149   04DF FA 05 00      lea d, [bp + 5] ; $x
0150   04E2 2A            mov b, [d]
0151   04E3 38 00 00      mov c, 0
0152   04E6             ; --- START FACTORS
0153   04E6 D7            push a
0154   04E7 FD D8         push g
0155   04E9 11            mov a, b
0156   04EA FD 7A         mov g, c
0157   04EC FD 2E 64 00   mov32 cb, $00000064
0157   04F0 00 00 
0158   04F2 FD D8         push g ; save 'g' as the div instruction uses it
0159   04F4 AE            div a, b ; /, a: quotient, b: remainder
0160   04F5 FD F1         pop g
0161   04F7 FD 38         mov c, g
0162   04F9 27            mov b, a
0163   04FA FD F1         pop g
0164   04FC E4            pop a
0165   04FD             ; --- END FACTORS
0166   04FD F9            leave
0167   04FE 09            ret
0168   04FF             
0169   04FF             get_rand:
0170   04FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0171   0502             ; unsigned int         r ; 
0172   0502 52 02 00      sub sp, 2
0173   0505             ; r = rand(); 
0174   0505 FA FF FF      lea d, [bp + -1] ; $r
0175   0508 DA            push d
0176   0509             ; --- START FUNCTION CALL
0177   0509 07 64 5E      call rand
0178   050C E7            pop d
0179   050D FD 43         mov [d], b
0180   050F             ; r = (r >> 8) | (r << 8); 
0181   050F FA FF FF      lea d, [bp + -1] ; $r
0182   0512 DA            push d
0183   0513 FA FF FF      lea d, [bp + -1] ; $r
0184   0516 2A            mov b, [d]
0185   0517 38 00 00      mov c, 0
0186   051A             ; --- START SHIFT
0187   051A D7            push a
0188   051B 11            mov a, b
0189   051C FD 2E 08 00   mov32 cb, $00000008
0189   0520 00 00 
0190   0522 FD 39         mov c, b
0191   0524 A1            shr a, cl
0192   0525 27            mov b, a
0193   0526 E4            pop a
0194   0527             ; --- END SHIFT
0195   0527 D7            push a
0196   0528 11            mov a, b
0197   0529 FA FF FF      lea d, [bp + -1] ; $r
0198   052C 2A            mov b, [d]
0199   052D 38 00 00      mov c, 0
0200   0530             ; --- START SHIFT
0201   0530 D7            push a
0202   0531 11            mov a, b
0203   0532 FD 2E 08 00   mov32 cb, $00000008
0203   0536 00 00 
0204   0538 FD 39         mov c, b
0205   053A 9D            shl a, cl
0206   053B 27            mov b, a
0207   053C E4            pop a
0208   053D             ; --- END SHIFT
0209   053D FD 70         or b, a ; |
0210   053F E4            pop a
0211   0540 E7            pop d
0212   0541 FD 43         mov [d], b
0213   0543             ; return ((r % spread) + 1); 
0214   0543 FA FF FF      lea d, [bp + -1] ; $r
0215   0546 2A            mov b, [d]
0216   0547 38 00 00      mov c, 0
0217   054A             ; --- START FACTORS
0218   054A D7            push a
0219   054B FD D8         push g
0220   054D 11            mov a, b
0221   054E FD 7A         mov g, c
0222   0550 FA 05 00      lea d, [bp + 5] ; $spread
0223   0553 2A            mov b, [d]
0224   0554 38 00 00      mov c, 0
0225   0557 FD D8         push g ; save 'g' as the div instruction uses it
0226   0559 AE            div a, b ; %, a: quotient, b: remainder
0227   055A 11            mov a, b
0228   055B FD F1         pop g
0229   055D FD 38         mov c, g
0230   055F 27            mov b, a
0231   0560 FD F1         pop g
0232   0562 E4            pop a
0233   0563             ; --- END FACTORS
0234   0563             ; --- START TERMS
0235   0563 D7            push a
0236   0564 11            mov a, b
0237   0565 FD 2E 01 00   mov32 cb, $00000001
0237   0569 00 00 
0238   056B 56            add b, a
0239   056C E4            pop a
0240   056D             ; --- END TERMS
0241   056D F9            leave
0242   056E 09            ret
0243   056F             
0244   056F             rand8:
0245   056F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0246   0572             ; return (get_rand(8)); 
0247   0572             ; --- START FUNCTION CALL
0248   0572 FD 2E 08 00   mov32 cb, $00000008
0248   0576 00 00 
0249   0578 FD AB         swp b
0250   057A D8            push b
0251   057B 07 FF 04      call get_rand
0252   057E 51 02 00      add sp, 2
0253   0581             ; --- END FUNCTION CALL
0254   0581 F9            leave
0255   0582 09            ret
0256   0583             
0257   0583             input:
0258   0583 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0259   0586             ; int c; 
0260   0586 52 02 00      sub sp, 2
0261   0589             ; while((c = getchar()) != '\n') { 
0262   0589             _while17_cond:
0263   0589 FA FF FF      lea d, [bp + -1] ; $c
0264   058C DA            push d
0265   058D             ; --- START FUNCTION CALL
0266   058D 07 DD 5D      call getchar
0267   0590 E7            pop d
0268   0591 FD 43         mov [d], b
0269   0593             ; --- START RELATIONAL
0270   0593 D7            push a
0271   0594 11            mov a, b
0272   0595 FD 2E 0A 00   mov32 cb, $0000000a
0272   0599 00 00 
0273   059B B0            cmp a, b
0274   059C FD 72         sneq ; !=
0275   059E E4            pop a
0276   059F             ; --- END RELATIONAL
0277   059F C0 00 00      cmp b, 0
0278   05A2 C6 12 06      je _while17_exit
0279   05A5             _while17_block:
0280   05A5             ; if (c == -1) 
0281   05A5             _if18_cond:
0282   05A5 FA FF FF      lea d, [bp + -1] ; $c
0283   05A8 2A            mov b, [d]
0284   05A9 38 00 00      mov c, 0
0285   05AC             ; --- START RELATIONAL
0286   05AC D7            push a
0287   05AD 11            mov a, b
0288   05AE FD 2E FF FF   mov32 cb, $ffffffff
0288   05B2 FF FF 
0289   05B4 B0            cmp a, b
0290   05B5 FD 71         seq ; ==
0291   05B7 E4            pop a
0292   05B8             ; --- END RELATIONAL
0293   05B8 C0 00 00      cmp b, 0
0294   05BB C6 C4 05      je _if18_exit
0295   05BE             _if18_TRUE:
0296   05BE             ; exit(); 
0297   05BE             ; --- START FUNCTION CALL
0298   05BE 07 F7 5D      call exit
0299   05C1 0A C4 05      jmp _if18_exit
0300   05C4             _if18_exit:
0301   05C4             ; if (l > 1) { 
0302   05C4             _if19_cond:
0303   05C4 FA 07 00      lea d, [bp + 7] ; $l
0304   05C7 32            mov bl, [d]
0305   05C8 A7 00         mov bh, 0
0306   05CA 38 00 00      mov c, 0
0307   05CD             ; --- START RELATIONAL
0308   05CD D7            push a
0309   05CE 11            mov a, b
0310   05CF FD 2E 01 00   mov32 cb, $00000001
0310   05D3 00 00 
0311   05D5 B0            cmp a, b
0312   05D6 FD 81         sgu ; > (unsigned)
0313   05D8 E4            pop a
0314   05D9             ; --- END RELATIONAL
0315   05D9 C0 00 00      cmp b, 0
0316   05DC C6 0F 06      je _if19_exit
0317   05DF             _if19_TRUE:
0318   05DF             ; *b++ = c; 
0319   05DF FA 05 00      lea d, [bp + 5] ; $b
0320   05E2 2A            mov b, [d]
0321   05E3 38 00 00      mov c, 0
0322   05E6 FD 77         inc b
0323   05E8 FA 05 00      lea d, [bp + 5] ; $b
0324   05EB FD 43         mov [d], b
0325   05ED FD 7D         dec b
0326   05EF D8            push b
0327   05F0 FA FF FF      lea d, [bp + -1] ; $c
0328   05F3 2A            mov b, [d]
0329   05F4 38 00 00      mov c, 0
0330   05F7 E7            pop d
0331   05F8 FD 3E         mov [d], bl
0332   05FA             ; l--; 
0333   05FA FA 07 00      lea d, [bp + 7] ; $l
0334   05FD 32            mov bl, [d]
0335   05FE A7 00         mov bh, 0
0336   0600 38 00 00      mov c, 0
0337   0603 FD 7D         dec b
0338   0605 FA 07 00      lea d, [bp + 7] ; $l
0339   0608 FD 3E         mov [d], bl
0340   060A FD 77         inc b
0341   060C 0A 0F 06      jmp _if19_exit
0342   060F             _if19_exit:
0343   060F 0A 89 05      jmp _while17_cond
0344   0612             _while17_exit:
0345   0612             ; *b = 0; 
0346   0612 FA 05 00      lea d, [bp + 5] ; $b
0347   0615 2A            mov b, [d]
0348   0616 38 00 00      mov c, 0
0349   0619 D8            push b
0350   061A FD 2E 00 00   mov32 cb, $00000000
0350   061E 00 00 
0351   0620 E7            pop d
0352   0621 FD 3E         mov [d], bl
0353   0623 F9            leave
0354   0624 09            ret
0355   0625             
0356   0625             yesno:
0357   0625 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0358   0628             ; char b[2]; 
0359   0628 52 02 00      sub sp, 2
0360   062B             ; input(b,2); 
0361   062B             ; --- START FUNCTION CALL
0362   062B FD 2E 02 00   mov32 cb, $00000002
0362   062F 00 00 
0363   0631 DD            push bl
0364   0632 FA FF FF      lea d, [bp + -1] ; $b
0365   0635 2D            mov b, d
0366   0636 38 00 00      mov c, 0
0367   0639 FD AB         swp b
0368   063B D8            push b
0369   063C 07 83 05      call input
0370   063F 51 03 00      add sp, 3
0371   0642             ; --- END FUNCTION CALL
0372   0642             ; tolower(*b); 
0373   0642             ; --- START FUNCTION CALL
0374   0642 FA FF FF      lea d, [bp + -1] ; $b
0375   0645 2D            mov b, d
0376   0646 38 00 00      mov c, 0
0377   0649 74            mov d, b
0378   064A 32            mov bl, [d]
0379   064B A7 00         mov bh, 0
0380   064D 38 00 00      mov c, 0
0381   0650 DD            push bl
0382   0651 07 FE 5D      call tolower
0383   0654 51 01 00      add sp, 1
0384   0657             ; --- END FUNCTION CALL
0385   0657             ; return 1; 
0386   0657 FD 2E 01 00   mov32 cb, $00000001
0386   065B 00 00 
0387   065D F9            leave
0388   065E 09            ret
0389   065F             ; return 0; 
0390   065F FD 2E 00 00   mov32 cb, $00000000
0390   0663 00 00 
0391   0665 F9            leave
0392   0666 09            ret
0393   0667             
0394   0667             input_f00:
0395   0667 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0396   066A             ; int        v; 
0397   066A 52 02 00      sub sp, 2
0398   066D             ; char buf[8]; 
0399   066D 52 08 00      sub sp, 8
0400   0670             ; char *x; 
0401   0670 52 02 00      sub sp, 2
0402   0673             ; input(buf, 8); 
0403   0673             ; --- START FUNCTION CALL
0404   0673 FD 2E 08 00   mov32 cb, $00000008
0404   0677 00 00 
0405   0679 DD            push bl
0406   067A FA F7 FF      lea d, [bp + -9] ; $buf
0407   067D 2D            mov b, d
0408   067E 38 00 00      mov c, 0
0409   0681 FD AB         swp b
0410   0683 D8            push b
0411   0684 07 83 05      call input
0412   0687 51 03 00      add sp, 3
0413   068A             ; --- END FUNCTION CALL
0414   068A             ; x = buf; 
0415   068A FA F5 FF      lea d, [bp + -11] ; $x
0416   068D DA            push d
0417   068E FA F7 FF      lea d, [bp + -9] ; $buf
0418   0691 2D            mov b, d
0419   0692 38 00 00      mov c, 0
0420   0695 E7            pop d
0421   0696 FD 43         mov [d], b
0422   0698             ; if (!is_digit(*x)) 
0423   0698             _if20_cond:
0424   0698             ; --- START FUNCTION CALL
0425   0698 FA F5 FF      lea d, [bp + -11] ; $x
0426   069B 2A            mov b, [d]
0427   069C 38 00 00      mov c, 0
0428   069F 74            mov d, b
0429   06A0 32            mov bl, [d]
0430   06A1 A7 00         mov bh, 0
0431   06A3 38 00 00      mov c, 0
0432   06A6 DD            push bl
0433   06A7 07 F4 6A      call is_digit
0434   06AA 51 01 00      add sp, 1
0435   06AD             ; --- END FUNCTION CALL
0436   06AD C0 00 00      cmp b, 0
0437   06B0 C6 BE 06      je _if20_exit
0438   06B3             _if20_TRUE:
0439   06B3             ; return -1; 
0440   06B3 FD 2E FF FF   mov32 cb, $ffffffff
0440   06B7 FF FF 
0441   06B9 F9            leave
0442   06BA 09            ret
0443   06BB 0A BE 06      jmp _if20_exit
0444   06BE             _if20_exit:
0445   06BE             ; v = 100 * (*x++ - '0'); 
0446   06BE FA FF FF      lea d, [bp + -1] ; $v
0447   06C1 DA            push d
0448   06C2 FD 2E 64 00   mov32 cb, $00000064
0448   06C6 00 00 
0449   06C8             ; --- START FACTORS
0450   06C8 D7            push a
0451   06C9 FD D8         push g
0452   06CB 11            mov a, b
0453   06CC FD 7A         mov g, c
0454   06CE FA F5 FF      lea d, [bp + -11] ; $x
0455   06D1 2A            mov b, [d]
0456   06D2 38 00 00      mov c, 0
0457   06D5 FD 77         inc b
0458   06D7 FA F5 FF      lea d, [bp + -11] ; $x
0459   06DA FD 43         mov [d], b
0460   06DC FD 7D         dec b
0461   06DE 74            mov d, b
0462   06DF 32            mov bl, [d]
0463   06E0 A7 00         mov bh, 0
0464   06E2 38 00 00      mov c, 0
0465   06E5             ; --- START TERMS
0466   06E5 D7            push a
0467   06E6 11            mov a, b
0468   06E7 FD 2E 30 00   mov32 cb, $00000030
0468   06EB 00 00 
0469   06ED 60            sub a, b
0470   06EE 27            mov b, a
0471   06EF E4            pop a
0472   06F0             ; --- END TERMS
0473   06F0 D7            push a     ; save left operand
0474   06F1 8E            xor a, b   ; xor sign bits
0475   06F2 FD AA         swp a      ; swap bytes
0476   06F4 83            mov cl, al ; save result of xor into 'dl'
0477   06F5 E4            pop a      ; restore left side operator
0478   06F6 DF            push cl    ; save result of xor above
0479   06F7 FD AA         swp a  
0480   06F9 93 80         test al, $80  
0481   06FB FD AA         swp a  
0482   06FD C6 02 07      jz skip_invert_a_22  
0483   0700 FD 95         neg a 
0484   0702             skip_invert_a_22:   
0485   0702 FD AB         swp b
0486   0704 FD 93 80      test bl, $80  
0487   0707 FD AB         swp b
0488   0709 C6 0E 07      jz skip_invert_b_22  
0489   070C FD 97         neg b 
0490   070E             skip_invert_b_22:   
0491   070E AC            mul a, b ; *
0492   070F FD 78         mov g, a
0493   0711 11            mov a, b
0494   0712 EA            pop bl
0495   0713 FD 93 80      test bl, $80
0496   0716 C6 23 07      jz _same_signs_22
0497   0719 2F            mov bl, al
0498   071A 95            not a
0499   071B FD 97         neg b
0500   071D 5B 00 00      adc a, 0
0501   0720 FD 78         mov g, a
0502   0722 11            mov a, b
0503   0723             _same_signs_22:
0504   0723 FD 38         mov c, g
0505   0725 27            mov b, a
0506   0726 FD F1         pop g
0507   0728 E4            pop a
0508   0729             ; --- END FACTORS
0509   0729 E7            pop d
0510   072A FD 43         mov [d], b
0511   072C             ; if (*x == 0) 
0512   072C             _if23_cond:
0513   072C FA F5 FF      lea d, [bp + -11] ; $x
0514   072F 2A            mov b, [d]
0515   0730 38 00 00      mov c, 0
0516   0733 74            mov d, b
0517   0734 32            mov bl, [d]
0518   0735 A7 00         mov bh, 0
0519   0737 38 00 00      mov c, 0
0520   073A             ; --- START RELATIONAL
0521   073A D7            push a
0522   073B 11            mov a, b
0523   073C FD 2E 00 00   mov32 cb, $00000000
0523   0740 00 00 
0524   0742 B0            cmp a, b
0525   0743 FD 71         seq ; ==
0526   0745 E4            pop a
0527   0746             ; --- END RELATIONAL
0528   0746 C0 00 00      cmp b, 0
0529   0749 C6 58 07      je _if23_exit
0530   074C             _if23_TRUE:
0531   074C             ; return v; 
0532   074C FA FF FF      lea d, [bp + -1] ; $v
0533   074F 2A            mov b, [d]
0534   0750 38 00 00      mov c, 0
0535   0753 F9            leave
0536   0754 09            ret
0537   0755 0A 58 07      jmp _if23_exit
0538   0758             _if23_exit:
0539   0758             ; if (*x++ != '.') 
0540   0758             _if24_cond:
0541   0758 FA F5 FF      lea d, [bp + -11] ; $x
0542   075B 2A            mov b, [d]
0543   075C 38 00 00      mov c, 0
0544   075F FD 77         inc b
0545   0761 FA F5 FF      lea d, [bp + -11] ; $x
0546   0764 FD 43         mov [d], b
0547   0766 FD 7D         dec b
0548   0768 74            mov d, b
0549   0769 32            mov bl, [d]
0550   076A A7 00         mov bh, 0
0551   076C 38 00 00      mov c, 0
0552   076F             ; --- START RELATIONAL
0553   076F D7            push a
0554   0770 11            mov a, b
0555   0771 FD 2E 2E 00   mov32 cb, $0000002e
0555   0775 00 00 
0556   0777 B0            cmp a, b
0557   0778 FD 72         sneq ; !=
0558   077A E4            pop a
0559   077B             ; --- END RELATIONAL
0560   077B C0 00 00      cmp b, 0
0561   077E C6 8C 07      je _if24_exit
0562   0781             _if24_TRUE:
0563   0781             ; return -1; 
0564   0781 FD 2E FF FF   mov32 cb, $ffffffff
0564   0785 FF FF 
0565   0787 F9            leave
0566   0788 09            ret
0567   0789 0A 8C 07      jmp _if24_exit
0568   078C             _if24_exit:
0569   078C             ; if (!is_digit(*x)) 
0570   078C             _if25_cond:
0571   078C             ; --- START FUNCTION CALL
0572   078C FA F5 FF      lea d, [bp + -11] ; $x
0573   078F 2A            mov b, [d]
0574   0790 38 00 00      mov c, 0
0575   0793 74            mov d, b
0576   0794 32            mov bl, [d]
0577   0795 A7 00         mov bh, 0
0578   0797 38 00 00      mov c, 0
0579   079A DD            push bl
0580   079B 07 F4 6A      call is_digit
0581   079E 51 01 00      add sp, 1
0582   07A1             ; --- END FUNCTION CALL
0583   07A1 C0 00 00      cmp b, 0
0584   07A4 C6 B2 07      je _if25_exit
0585   07A7             _if25_TRUE:
0586   07A7             ; return -1; 
0587   07A7 FD 2E FF FF   mov32 cb, $ffffffff
0587   07AB FF FF 
0588   07AD F9            leave
0589   07AE 09            ret
0590   07AF 0A B2 07      jmp _if25_exit
0591   07B2             _if25_exit:
0592   07B2             ; v = v + 10 * (*x++ - '0'); 
0593   07B2 FA FF FF      lea d, [bp + -1] ; $v
0594   07B5 DA            push d
0595   07B6 FA FF FF      lea d, [bp + -1] ; $v
0596   07B9 2A            mov b, [d]
0597   07BA 38 00 00      mov c, 0
0598   07BD             ; --- START TERMS
0599   07BD D7            push a
0600   07BE 11            mov a, b
0601   07BF FD 2E 0A 00   mov32 cb, $0000000a
0601   07C3 00 00 
0602   07C5             ; --- START FACTORS
0603   07C5 D7            push a
0604   07C6 FD D8         push g
0605   07C8 11            mov a, b
0606   07C9 FD 7A         mov g, c
0607   07CB FA F5 FF      lea d, [bp + -11] ; $x
0608   07CE 2A            mov b, [d]
0609   07CF 38 00 00      mov c, 0
0610   07D2 FD 77         inc b
0611   07D4 FA F5 FF      lea d, [bp + -11] ; $x
0612   07D7 FD 43         mov [d], b
0613   07D9 FD 7D         dec b
0614   07DB 74            mov d, b
0615   07DC 32            mov bl, [d]
0616   07DD A7 00         mov bh, 0
0617   07DF 38 00 00      mov c, 0
0618   07E2             ; --- START TERMS
0619   07E2 D7            push a
0620   07E3 11            mov a, b
0621   07E4 FD 2E 30 00   mov32 cb, $00000030
0621   07E8 00 00 
0622   07EA 60            sub a, b
0623   07EB 27            mov b, a
0624   07EC E4            pop a
0625   07ED             ; --- END TERMS
0626   07ED D7            push a     ; save left operand
0627   07EE 8E            xor a, b   ; xor sign bits
0628   07EF FD AA         swp a      ; swap bytes
0629   07F1 83            mov cl, al ; save result of xor into 'dl'
0630   07F2 E4            pop a      ; restore left side operator
0631   07F3 DF            push cl    ; save result of xor above
0632   07F4 FD AA         swp a  
0633   07F6 93 80         test al, $80  
0634   07F8 FD AA         swp a  
0635   07FA C6 FF 07      jz skip_invert_a_27  
0636   07FD FD 95         neg a 
0637   07FF             skip_invert_a_27:   
0638   07FF FD AB         swp b
0639   0801 FD 93 80      test bl, $80  
0640   0804 FD AB         swp b
0641   0806 C6 0B 08      jz skip_invert_b_27  
0642   0809 FD 97         neg b 
0643   080B             skip_invert_b_27:   
0644   080B AC            mul a, b ; *
0645   080C FD 78         mov g, a
0646   080E 11            mov a, b
0647   080F EA            pop bl
0648   0810 FD 93 80      test bl, $80
0649   0813 C6 20 08      jz _same_signs_27
0650   0816 2F            mov bl, al
0651   0817 95            not a
0652   0818 FD 97         neg b
0653   081A 5B 00 00      adc a, 0
0654   081D FD 78         mov g, a
0655   081F 11            mov a, b
0656   0820             _same_signs_27:
0657   0820 FD 38         mov c, g
0658   0822 27            mov b, a
0659   0823 FD F1         pop g
0660   0825 E4            pop a
0661   0826             ; --- END FACTORS
0662   0826 FD 15         add32 cb, ga
0663   0828 E4            pop a
0664   0829             ; --- END TERMS
0665   0829 E7            pop d
0666   082A FD 43         mov [d], b
0667   082C             ; if (!*x) 
0668   082C             _if28_cond:
0669   082C FA F5 FF      lea d, [bp + -11] ; $x
0670   082F 2A            mov b, [d]
0671   0830 38 00 00      mov c, 0
0672   0833 74            mov d, b
0673   0834 32            mov bl, [d]
0674   0835 A7 00         mov bh, 0
0675   0837 38 00 00      mov c, 0
0676   083A C0 00 00      cmp b, 0
0677   083D FD 71         seq ; !
0678   083F C0 00 00      cmp b, 0
0679   0842 C6 51 08      je _if28_exit
0680   0845             _if28_TRUE:
0681   0845             ; return v; 
0682   0845 FA FF FF      lea d, [bp + -1] ; $v
0683   0848 2A            mov b, [d]
0684   0849 38 00 00      mov c, 0
0685   084C F9            leave
0686   084D 09            ret
0687   084E 0A 51 08      jmp _if28_exit
0688   0851             _if28_exit:
0689   0851             ; if (!is_digit(*x)) 
0690   0851             _if29_cond:
0691   0851             ; --- START FUNCTION CALL
0692   0851 FA F5 FF      lea d, [bp + -11] ; $x
0693   0854 2A            mov b, [d]
0694   0855 38 00 00      mov c, 0
0695   0858 74            mov d, b
0696   0859 32            mov bl, [d]
0697   085A A7 00         mov bh, 0
0698   085C 38 00 00      mov c, 0
0699   085F DD            push bl
0700   0860 07 F4 6A      call is_digit
0701   0863 51 01 00      add sp, 1
0702   0866             ; --- END FUNCTION CALL
0703   0866 C0 00 00      cmp b, 0
0704   0869 C6 77 08      je _if29_exit
0705   086C             _if29_TRUE:
0706   086C             ; return -1; 
0707   086C FD 2E FF FF   mov32 cb, $ffffffff
0707   0870 FF FF 
0708   0872 F9            leave
0709   0873 09            ret
0710   0874 0A 77 08      jmp _if29_exit
0711   0877             _if29_exit:
0712   0877             ; v = v + *x++ - '0'; 
0713   0877 FA FF FF      lea d, [bp + -1] ; $v
0714   087A DA            push d
0715   087B FA FF FF      lea d, [bp + -1] ; $v
0716   087E 2A            mov b, [d]
0717   087F 38 00 00      mov c, 0
0718   0882             ; --- START TERMS
0719   0882 D7            push a
0720   0883 11            mov a, b
0721   0884 FA F5 FF      lea d, [bp + -11] ; $x
0722   0887 2A            mov b, [d]
0723   0888 38 00 00      mov c, 0
0724   088B FD 77         inc b
0725   088D FA F5 FF      lea d, [bp + -11] ; $x
0726   0890 FD 43         mov [d], b
0727   0892 FD 7D         dec b
0728   0894 74            mov d, b
0729   0895 32            mov bl, [d]
0730   0896 A7 00         mov bh, 0
0731   0898 38 00 00      mov c, 0
0732   089B 56            add b, a
0733   089C 11            mov a, b
0734   089D FD 2E 30 00   mov32 cb, $00000030
0734   08A1 00 00 
0735   08A3 60            sub a, b
0736   08A4 27            mov b, a
0737   08A5 E4            pop a
0738   08A6             ; --- END TERMS
0739   08A6 E7            pop d
0740   08A7 FD 43         mov [d], b
0741   08A9             ; return v; 
0742   08A9 FA FF FF      lea d, [bp + -1] ; $v
0743   08AC 2A            mov b, [d]
0744   08AD 38 00 00      mov c, 0
0745   08B0 F9            leave
0746   08B1 09            ret
0747   08B2             
0748   08B2             input_int:
0749   08B2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0750   08B5             ; char x[8]; 
0751   08B5 52 08 00      sub sp, 8
0752   08B8             ; input(x, 8); 
0753   08B8             ; --- START FUNCTION CALL
0754   08B8 FD 2E 08 00   mov32 cb, $00000008
0754   08BC 00 00 
0755   08BE DD            push bl
0756   08BF FA F9 FF      lea d, [bp + -7] ; $x
0757   08C2 2D            mov b, d
0758   08C3 38 00 00      mov c, 0
0759   08C6 FD AB         swp b
0760   08C8 D8            push b
0761   08C9 07 83 05      call input
0762   08CC 51 03 00      add sp, 3
0763   08CF             ; --- END FUNCTION CALL
0764   08CF             ; if (!is_digit(*x)) 
0765   08CF             _if30_cond:
0766   08CF             ; --- START FUNCTION CALL
0767   08CF FA F9 FF      lea d, [bp + -7] ; $x
0768   08D2 2D            mov b, d
0769   08D3 38 00 00      mov c, 0
0770   08D6 74            mov d, b
0771   08D7 32            mov bl, [d]
0772   08D8 A7 00         mov bh, 0
0773   08DA 38 00 00      mov c, 0
0774   08DD DD            push bl
0775   08DE 07 F4 6A      call is_digit
0776   08E1 51 01 00      add sp, 1
0777   08E4             ; --- END FUNCTION CALL
0778   08E4 C0 00 00      cmp b, 0
0779   08E7 C6 F5 08      je _if30_exit
0780   08EA             _if30_TRUE:
0781   08EA             ; return -1; 
0782   08EA FD 2E FF FF   mov32 cb, $ffffffff
0782   08EE FF FF 
0783   08F0 F9            leave
0784   08F1 09            ret
0785   08F2 0A F5 08      jmp _if30_exit
0786   08F5             _if30_exit:
0787   08F5             ; return atoi(x); 
0788   08F5             ; --- START FUNCTION CALL
0789   08F5 FA F9 FF      lea d, [bp + -7] ; $x
0790   08F8 2D            mov b, d
0791   08F9 38 00 00      mov c, 0
0792   08FC FD AB         swp b
0793   08FE D8            push b
0794   08FF 07 59 6B      call atoi
0795   0902 51 02 00      add sp, 2
0796   0905             ; --- END FUNCTION CALL
0797   0905 F9            leave
0798   0906 09            ret
0799   0907             
0800   0907             print100:
0801   0907 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0802   090A             ; static char buf[16]; 
0803   090A 52 10 00      sub sp, 16
0804   090D             ; char *p; 
0805   090D 52 02 00      sub sp, 2
0806   0910             ; *p = buf; 
0807   0910 FA FF FF      lea d, [bp + -1] ; $p
0808   0913 2A            mov b, [d]
0809   0914 38 00 00      mov c, 0
0810   0917 D8            push b
0811   0918 3B 1D 70      mov d, st_print100_buf_dt ; static buf
0812   091B 2D            mov b, d
0813   091C 38 00 00      mov c, 0
0814   091F E7            pop d
0815   0920 FD 3E         mov [d], bl
0816   0922             ; if (v < 0) { 
0817   0922             _if31_cond:
0818   0922 FA 05 00      lea d, [bp + 5] ; $v
0819   0925 2A            mov b, [d]
0820   0926 38 00 00      mov c, 0
0821   0929             ; --- START RELATIONAL
0822   0929 D7            push a
0823   092A 11            mov a, b
0824   092B FD 2E 00 00   mov32 cb, $00000000
0824   092F 00 00 
0825   0931 B0            cmp a, b
0826   0932 FD 73         slt ; < (signed)
0827   0934 E4            pop a
0828   0935             ; --- END RELATIONAL
0829   0935 C0 00 00      cmp b, 0
0830   0938 C6 68 09      je _if31_exit
0831   093B             _if31_TRUE:
0832   093B             ; v = -v; 
0833   093B FA 05 00      lea d, [bp + 5] ; $v
0834   093E DA            push d
0835   093F FA 05 00      lea d, [bp + 5] ; $v
0836   0942 2A            mov b, [d]
0837   0943 38 00 00      mov c, 0
0838   0946 FD 97         neg b
0839   0948 E7            pop d
0840   0949 FD 43         mov [d], b
0841   094B             ; *p++ = '-'; 
0842   094B FA FF FF      lea d, [bp + -1] ; $p
0843   094E 2A            mov b, [d]
0844   094F 38 00 00      mov c, 0
0845   0952 FD 77         inc b
0846   0954 FA FF FF      lea d, [bp + -1] ; $p
0847   0957 FD 43         mov [d], b
0848   0959 FD 7D         dec b
0849   095B D8            push b
0850   095C FD 2E 2D 00   mov32 cb, $0000002d
0850   0960 00 00 
0851   0962 E7            pop d
0852   0963 FD 3E         mov [d], bl
0853   0965 0A 68 09      jmp _if31_exit
0854   0968             _if31_exit:
0855   0968             ; return buf; 
0856   0968 3B 1D 70      mov d, st_print100_buf_dt ; static buf
0857   096B 2D            mov b, d
0858   096C 38 00 00      mov c, 0
0859   096F F9            leave
0860   0970 09            ret
0861   0971             
0862   0971             inoperable:
0863   0971 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0864   0974             ; if (damage[u] < 0) { 
0865   0974             _if32_cond:
0866   0974 3B 30 6E      mov d, _damage_data ; $damage
0867   0977 D7            push a
0868   0978 DA            push d
0869   0979 FA 05 00      lea d, [bp + 5] ; $u
0870   097C 32            mov bl, [d]
0871   097D A7 00         mov bh, 0
0872   097F 38 00 00      mov c, 0
0873   0982 E7            pop d
0874   0983 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0875   0987 E4            pop a
0876   0988 2A            mov b, [d]
0877   0989 38 00 00      mov c, 0
0878   098C             ; --- START RELATIONAL
0879   098C D7            push a
0880   098D 11            mov a, b
0881   098E FD 2E 00 00   mov32 cb, $00000000
0881   0992 00 00 
0882   0994 B0            cmp a, b
0883   0995 FD 73         slt ; < (signed)
0884   0997 E4            pop a
0885   0998             ; --- END RELATIONAL
0886   0998 C0 00 00      cmp b, 0
0887   099B C6 F1 09      je _if32_exit
0888   099E             _if32_TRUE:
0889   099E             ; printf("%s %s inoperable.\n", 
0890   099E             ; --- START FUNCTION CALL
0891   099E             _ternary34_cond:
0892   099E FA 05 00      lea d, [bp + 5] ; $u
0893   09A1 32            mov bl, [d]
0894   09A2 A7 00         mov bh, 0
0895   09A4 38 00 00      mov c, 0
0896   09A7             ; --- START RELATIONAL
0897   09A7 D7            push a
0898   09A8 11            mov a, b
0899   09A9 FD 2E 05 00   mov32 cb, $00000005
0899   09AD 00 00 
0900   09AF B0            cmp a, b
0901   09B0 FD 71         seq ; ==
0902   09B2 E4            pop a
0903   09B3             ; --- END RELATIONAL
0904   09B3 C0 00 00      cmp b, 0
0905   09B6 C6 BF 09      je _ternary34_FALSE
0906   09B9             _ternary34_TRUE:
0907   09B9 26 55 71      mov b, _s30 ; "are"
0908   09BC 0A C2 09      jmp _ternary34_exit
0909   09BF             _ternary34_FALSE:
0910   09BF 26 59 71      mov b, _s31 ; "is"
0911   09C2             _ternary34_exit:
0912   09C2 FD AB         swp b
0913   09C4 D8            push b
0914   09C5             ; --- START FUNCTION CALL
0915   09C5 FA 05 00      lea d, [bp + 5] ; $u
0916   09C8 32            mov bl, [d]
0917   09C9 A7 00         mov bh, 0
0918   09CB 38 00 00      mov c, 0
0919   09CE FD AB         swp b
0920   09D0 D8            push b
0921   09D1 07 27 59      call get_device_name
0922   09D4 51 02 00      add sp, 2
0923   09D7             ; --- END FUNCTION CALL
0924   09D7 FD AB         swp b
0925   09D9 D8            push b
0926   09DA 26 5C 71      mov b, _s32 ; "%s %s inoperable.\n"
0927   09DD FD AB         swp b
0928   09DF D8            push b
0929   09E0 07 36 60      call printf
0930   09E3 51 06 00      add sp, 6
0931   09E6             ; --- END FUNCTION CALL
0932   09E6             ; return 1; 
0933   09E6 FD 2E 01 00   mov32 cb, $00000001
0933   09EA 00 00 
0934   09EC F9            leave
0935   09ED 09            ret
0936   09EE 0A F1 09      jmp _if32_exit
0937   09F1             _if32_exit:
0938   09F1             ; return 0; 
0939   09F1 FD 2E 00 00   mov32 cb, $00000000
0939   09F5 00 00 
0940   09F7 F9            leave
0941   09F8 09            ret
0942   09F9             
0943   09F9             intro:
0944   09F9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0945   09FC             ; showfile("startrek.intro"); 
0946   09FC             ; --- START FUNCTION CALL
0947   09FC 26 6F 71      mov b, _s33 ; "startrek.intro"
0948   09FF FD AB         swp b
0949   0A01 D8            push b
0950   0A02 07 D8 5D      call showfile
0951   0A05 51 02 00      add sp, 2
0952   0A08             ; --- END FUNCTION CALL
0953   0A08             ; if (yesno()) 
0954   0A08             _if35_cond:
0955   0A08             ; --- START FUNCTION CALL
0956   0A08 07 25 06      call yesno
0957   0A0B C0 00 00      cmp b, 0
0958   0A0E C6 20 0A      je _if35_exit
0959   0A11             _if35_TRUE:
0960   0A11             ; showfile("startrek.doc"); 
0961   0A11             ; --- START FUNCTION CALL
0962   0A11 26 7E 71      mov b, _s34 ; "startrek.doc"
0963   0A14 FD AB         swp b
0964   0A16 D8            push b
0965   0A17 07 D8 5D      call showfile
0966   0A1A 51 02 00      add sp, 2
0967   0A1D             ; --- END FUNCTION CALL
0968   0A1D 0A 20 0A      jmp _if35_exit
0969   0A20             _if35_exit:
0970   0A20             ; showfile("startrek.logo"); 
0971   0A20             ; --- START FUNCTION CALL
0972   0A20 26 8B 71      mov b, _s35 ; "startrek.logo"
0973   0A23 FD AB         swp b
0974   0A25 D8            push b
0975   0A26 07 D8 5D      call showfile
0976   0A29 51 02 00      add sp, 2
0977   0A2C             ; --- END FUNCTION CALL
0978   0A2C             ; stardate = TO_FIXED((get_rand(20) + 20) * 100); 
0979   0A2C 3B 48 6E      mov d, _stardate ; $stardate
0980   0A2F DA            push d
0981   0A30             ; --- START FUNCTION CALL
0982   0A30             ; --- START FUNCTION CALL
0983   0A30 FD 2E 14 00   mov32 cb, $00000014
0983   0A34 00 00 
0984   0A36 FD AB         swp b
0985   0A38 D8            push b
0986   0A39 07 FF 04      call get_rand
0987   0A3C 51 02 00      add sp, 2
0988   0A3F             ; --- END FUNCTION CALL
0989   0A3F             ; --- START TERMS
0990   0A3F D7            push a
0991   0A40 11            mov a, b
0992   0A41 FD 2E 14 00   mov32 cb, $00000014
0992   0A45 00 00 
0993   0A47 56            add b, a
0994   0A48 E4            pop a
0995   0A49             ; --- END TERMS
0996   0A49             ; --- START FACTORS
0997   0A49 D7            push a
0998   0A4A FD D8         push g
0999   0A4C 11            mov a, b
1000   0A4D FD 7A         mov g, c
1001   0A4F FD 2E 64 00   mov32 cb, $00000064
1001   0A53 00 00 
1002   0A55 D7            push a     ; save left operand
1003   0A56 8E            xor a, b   ; xor sign bits
1004   0A57 FD AA         swp a      ; swap bytes
1005   0A59 83            mov cl, al ; save result of xor into 'dl'
1006   0A5A E4            pop a      ; restore left side operator
1007   0A5B DF            push cl    ; save result of xor above
1008   0A5C FD AA         swp a  
1009   0A5E 93 80         test al, $80  
1010   0A60 FD AA         swp a  
1011   0A62 C6 67 0A      jz skip_invert_a_39  
1012   0A65 FD 95         neg a 
1013   0A67             skip_invert_a_39:   
1014   0A67 FD AB         swp b
1015   0A69 FD 93 80      test bl, $80  
1016   0A6C FD AB         swp b
1017   0A6E C6 73 0A      jz skip_invert_b_39  
1018   0A71 FD 97         neg b 
1019   0A73             skip_invert_b_39:   
1020   0A73 AC            mul a, b ; *
1021   0A74 FD 78         mov g, a
1022   0A76 11            mov a, b
1023   0A77 EA            pop bl
1024   0A78 FD 93 80      test bl, $80
1025   0A7B C6 88 0A      jz _same_signs_39
1026   0A7E 2F            mov bl, al
1027   0A7F 95            not a
1028   0A80 FD 97         neg b
1029   0A82 5B 00 00      adc a, 0
1030   0A85 FD 78         mov g, a
1031   0A87 11            mov a, b
1032   0A88             _same_signs_39:
1033   0A88 FD 38         mov c, g
1034   0A8A 27            mov b, a
1035   0A8B FD F1         pop g
1036   0A8D E4            pop a
1037   0A8E             ; --- END FACTORS
1038   0A8E FD AB         swp b
1039   0A90 D8            push b
1040   0A91 07 17 04      call TO_FIXED
1041   0A94 51 02 00      add sp, 2
1042   0A97             ; --- END FUNCTION CALL
1043   0A97 E7            pop d
1044   0A98 FD 43         mov [d], b
1045   0A9A F9            leave
1046   0A9B 09            ret
1047   0A9C             
1048   0A9C             new_game:
1049   0A9C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1050   0A9F             ; char cmd[4]; 
1051   0A9F 52 04 00      sub sp, 4
1052   0AA2             ; initialize(); 
1053   0AA2             ; --- START FUNCTION CALL
1054   0AA2 07 5B 0D      call initialize
1055   0AA5             ; new_quadrant(); 
1056   0AA5             ; --- START FUNCTION CALL
1057   0AA5 07 98 12      call new_quadrant
1058   0AA8             ; short_range_scan(); 
1059   0AA8             ; --- START FUNCTION CALL
1060   0AA8 07 5E 25      call short_range_scan
1061   0AAB             ; while (1) { 
1062   0AAB             _while40_cond:
1063   0AAB FD 2E 01 00   mov32 cb, $00000001
1063   0AAF 00 00 
1064   0AB1 C0 00 00      cmp b, 0
1065   0AB4 C6 59 0D      je _while40_exit
1066   0AB7             _while40_block:
1067   0AB7             ; if (shield + energy <= 10 && (energy < 10 || damage[7] < 0)) { 
1068   0AB7             _if41_cond:
1069   0AB7 3B 29 6E      mov d, _shield ; $shield
1070   0ABA 2A            mov b, [d]
1071   0ABB 38 00 00      mov c, 0
1072   0ABE             ; --- START TERMS
1073   0ABE D7            push a
1074   0ABF 11            mov a, b
1075   0AC0 3B 6E 6D      mov d, _energy ; $energy
1076   0AC3 2A            mov b, [d]
1077   0AC4 38 00 00      mov c, 0
1078   0AC7 56            add b, a
1079   0AC8 E4            pop a
1080   0AC9             ; --- END TERMS
1081   0AC9             ; --- START RELATIONAL
1082   0AC9 D7            push a
1083   0ACA 11            mov a, b
1084   0ACB FD 2E 0A 00   mov32 cb, $0000000a
1084   0ACF 00 00 
1085   0AD1 B0            cmp a, b
1086   0AD2 FD 74         sle ; <= (signed)
1087   0AD4 E4            pop a
1088   0AD5             ; --- END RELATIONAL
1089   0AD5             ; --- START LOGICAL AND
1090   0AD5 D7            push a
1091   0AD6 11            mov a, b
1092   0AD7 3B 6E 6D      mov d, _energy ; $energy
1093   0ADA 2A            mov b, [d]
1094   0ADB 38 00 00      mov c, 0
1095   0ADE             ; --- START RELATIONAL
1096   0ADE D7            push a
1097   0ADF 11            mov a, b
1098   0AE0 FD 2E 0A 00   mov32 cb, $0000000a
1098   0AE4 00 00 
1099   0AE6 B0            cmp a, b
1100   0AE7 FD 73         slt ; < (signed)
1101   0AE9 E4            pop a
1102   0AEA             ; --- END RELATIONAL
1103   0AEA             ; --- START LOGICAL OR
1104   0AEA D7            push a
1105   0AEB 11            mov a, b
1106   0AEC 3B 30 6E      mov d, _damage_data ; $damage
1107   0AEF D7            push a
1108   0AF0 DA            push d
1109   0AF1 FD 2E 07 00   mov32 cb, $00000007
1109   0AF5 00 00 
1110   0AF7 E7            pop d
1111   0AF8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1112   0AFC E4            pop a
1113   0AFD 2A            mov b, [d]
1114   0AFE 38 00 00      mov c, 0
1115   0B01             ; --- START RELATIONAL
1116   0B01 D7            push a
1117   0B02 11            mov a, b
1118   0B03 FD 2E 00 00   mov32 cb, $00000000
1118   0B07 00 00 
1119   0B09 B0            cmp a, b
1120   0B0A FD 73         slt ; < (signed)
1121   0B0C E4            pop a
1122   0B0D             ; --- END RELATIONAL
1123   0B0D FD A8         sor a, b ; ||
1124   0B0F E4            pop a
1125   0B10             ; --- END LOGICAL OR
1126   0B10 FD A7         sand a, b
1127   0B12 E4            pop a
1128   0B13             ; --- END LOGICAL AND
1129   0B13 C0 00 00      cmp b, 0
1130   0B16 C6 2B 0B      je _if41_exit
1131   0B19             _if41_TRUE:
1132   0B19             ; showfile("startrek.fatal"); 
1133   0B19             ; --- START FUNCTION CALL
1134   0B19 26 99 71      mov b, _s36 ; "startrek.fatal"
1135   0B1C FD AB         swp b
1136   0B1E D8            push b
1137   0B1F 07 D8 5D      call showfile
1138   0B22 51 02 00      add sp, 2
1139   0B25             ; --- END FUNCTION CALL
1140   0B25             ; end_of_time(); 
1141   0B25             ; --- START FUNCTION CALL
1142   0B25 07 B0 4E      call end_of_time
1143   0B28 0A 2B 0B      jmp _if41_exit
1144   0B2B             _if41_exit:
1145   0B2B             ; puts("Command? "); 
1146   0B2B             ; --- START FUNCTION CALL
1147   0B2B 26 A8 71      mov b, _s37 ; "Command? "
1148   0B2E FD AB         swp b
1149   0B30 D8            push b
1150   0B31 07 47 69      call puts
1151   0B34 51 02 00      add sp, 2
1152   0B37             ; --- END FUNCTION CALL
1153   0B37             ; input(cmd, 4); 
1154   0B37             ; --- START FUNCTION CALL
1155   0B37 FD 2E 04 00   mov32 cb, $00000004
1155   0B3B 00 00 
1156   0B3D DD            push bl
1157   0B3E FA FD FF      lea d, [bp + -3] ; $cmd
1158   0B41 2D            mov b, d
1159   0B42 38 00 00      mov c, 0
1160   0B45 FD AB         swp b
1161   0B47 D8            push b
1162   0B48 07 83 05      call input
1163   0B4B 51 03 00      add sp, 3
1164   0B4E             ; --- END FUNCTION CALL
1165   0B4E             ; putchar('\n'); 
1166   0B4E             ; --- START FUNCTION CALL
1167   0B4E FD 2E 0A 00   mov32 cb, $0000000a
1167   0B52 00 00 
1168   0B54 DD            push bl
1169   0B55 07 BB 64      call putchar
1170   0B58 51 01 00      add sp, 1
1171   0B5B             ; --- END FUNCTION CALL
1172   0B5B             ; if (!strncmp(cmd, "nav", 3)) 
1173   0B5B             _if42_cond:
1174   0B5B             ; --- START FUNCTION CALL
1175   0B5B FD 2E 03 00   mov32 cb, $00000003
1175   0B5F 00 00 
1176   0B61 FD AB         swp b
1177   0B63 D8            push b
1178   0B64 26 B2 71      mov b, _s38 ; "nav"
1179   0B67 FD AB         swp b
1180   0B69 D8            push b
1181   0B6A FA FD FF      lea d, [bp + -3] ; $cmd
1182   0B6D 2D            mov b, d
1183   0B6E 38 00 00      mov c, 0
1184   0B71 FD AB         swp b
1185   0B73 D8            push b
1186   0B74 07 CD 69      call strncmp
1187   0B77 51 06 00      add sp, 6
1188   0B7A             ; --- END FUNCTION CALL
1189   0B7A C0 00 00      cmp b, 0
1190   0B7D C6 86 0B      je _if42_else
1191   0B80             _if42_TRUE:
1192   0B80             ; course_control(); 
1193   0B80             ; --- START FUNCTION CALL
1194   0B80 07 0C 17      call course_control
1195   0B83 0A 56 0D      jmp _if42_exit
1196   0B86             _if42_else:
1197   0B86             ; if (!strncmp(cmd, "srs", 3)) 
1198   0B86             _if43_cond:
1199   0B86             ; --- START FUNCTION CALL
1200   0B86 FD 2E 03 00   mov32 cb, $00000003
1200   0B8A 00 00 
1201   0B8C FD AB         swp b
1202   0B8E D8            push b
1203   0B8F 26 B6 71      mov b, _s39 ; "srs"
1204   0B92 FD AB         swp b
1205   0B94 D8            push b
1206   0B95 FA FD FF      lea d, [bp + -3] ; $cmd
1207   0B98 2D            mov b, d
1208   0B99 38 00 00      mov c, 0
1209   0B9C FD AB         swp b
1210   0B9E D8            push b
1211   0B9F 07 CD 69      call strncmp
1212   0BA2 51 06 00      add sp, 6
1213   0BA5             ; --- END FUNCTION CALL
1214   0BA5 C0 00 00      cmp b, 0
1215   0BA8 C6 B1 0B      je _if43_else
1216   0BAB             _if43_TRUE:
1217   0BAB             ; short_range_scan(); 
1218   0BAB             ; --- START FUNCTION CALL
1219   0BAB 07 5E 25      call short_range_scan
1220   0BAE 0A 56 0D      jmp _if43_exit
1221   0BB1             _if43_else:
1222   0BB1             ; if (!strncmp(cmd, "lrs", 3)) 
1223   0BB1             _if44_cond:
1224   0BB1             ; --- START FUNCTION CALL
1225   0BB1 FD 2E 03 00   mov32 cb, $00000003
1225   0BB5 00 00 
1226   0BB7 FD AB         swp b
1227   0BB9 D8            push b
1228   0BBA 26 BA 71      mov b, _s40 ; "lrs"
1229   0BBD FD AB         swp b
1230   0BBF D8            push b
1231   0BC0 FA FD FF      lea d, [bp + -3] ; $cmd
1232   0BC3 2D            mov b, d
1233   0BC4 38 00 00      mov c, 0
1234   0BC7 FD AB         swp b
1235   0BC9 D8            push b
1236   0BCA 07 CD 69      call strncmp
1237   0BCD 51 06 00      add sp, 6
1238   0BD0             ; --- END FUNCTION CALL
1239   0BD0 C0 00 00      cmp b, 0
1240   0BD3 C6 DC 0B      je _if44_else
1241   0BD6             _if44_TRUE:
1242   0BD6             ; long_range_scan(); 
1243   0BD6             ; --- START FUNCTION CALL
1244   0BD6 07 08 2B      call long_range_scan
1245   0BD9 0A 56 0D      jmp _if44_exit
1246   0BDC             _if44_else:
1247   0BDC             ; if (!strncmp(cmd, "pha", 3)) 
1248   0BDC             _if45_cond:
1249   0BDC             ; --- START FUNCTION CALL
1250   0BDC FD 2E 03 00   mov32 cb, $00000003
1250   0BE0 00 00 
1251   0BE2 FD AB         swp b
1252   0BE4 D8            push b
1253   0BE5 26 BE 71      mov b, _s41 ; "pha"
1254   0BE8 FD AB         swp b
1255   0BEA D8            push b
1256   0BEB FA FD FF      lea d, [bp + -3] ; $cmd
1257   0BEE 2D            mov b, d
1258   0BEF 38 00 00      mov c, 0
1259   0BF2 FD AB         swp b
1260   0BF4 D8            push b
1261   0BF5 07 CD 69      call strncmp
1262   0BF8 51 06 00      add sp, 6
1263   0BFB             ; --- END FUNCTION CALL
1264   0BFB C0 00 00      cmp b, 0
1265   0BFE C6 07 0C      je _if45_else
1266   0C01             _if45_TRUE:
1267   0C01             ; phaser_control(); 
1268   0C01             ; --- START FUNCTION CALL
1269   0C01 07 B0 2D      call phaser_control
1270   0C04 0A 56 0D      jmp _if45_exit
1271   0C07             _if45_else:
1272   0C07             ; if (!strncmp(cmd, "tor", 3)) 
1273   0C07             _if46_cond:
1274   0C07             ; --- START FUNCTION CALL
1275   0C07 FD 2E 03 00   mov32 cb, $00000003
1275   0C0B 00 00 
1276   0C0D FD AB         swp b
1277   0C0F D8            push b
1278   0C10 26 C2 71      mov b, _s42 ; "tor"
1279   0C13 FD AB         swp b
1280   0C15 D8            push b
1281   0C16 FA FD FF      lea d, [bp + -3] ; $cmd
1282   0C19 2D            mov b, d
1283   0C1A 38 00 00      mov c, 0
1284   0C1D FD AB         swp b
1285   0C1F D8            push b
1286   0C20 07 CD 69      call strncmp
1287   0C23 51 06 00      add sp, 6
1288   0C26             ; --- END FUNCTION CALL
1289   0C26 C0 00 00      cmp b, 0
1290   0C29 C6 32 0C      je _if46_else
1291   0C2C             _if46_TRUE:
1292   0C2C             ; photon_torpedoes(); 
1293   0C2C             ; --- START FUNCTION CALL
1294   0C2C 07 1F 33      call photon_torpedoes
1295   0C2F 0A 56 0D      jmp _if46_exit
1296   0C32             _if46_else:
1297   0C32             ; if (!strncmp(cmd, "shi", 3)) 
1298   0C32             _if47_cond:
1299   0C32             ; --- START FUNCTION CALL
1300   0C32 FD 2E 03 00   mov32 cb, $00000003
1300   0C36 00 00 
1301   0C38 FD AB         swp b
1302   0C3A D8            push b
1303   0C3B 26 C6 71      mov b, _s43 ; "shi"
1304   0C3E FD AB         swp b
1305   0C40 D8            push b
1306   0C41 FA FD FF      lea d, [bp + -3] ; $cmd
1307   0C44 2D            mov b, d
1308   0C45 38 00 00      mov c, 0
1309   0C48 FD AB         swp b
1310   0C4A D8            push b
1311   0C4B 07 CD 69      call strncmp
1312   0C4E 51 06 00      add sp, 6
1313   0C51             ; --- END FUNCTION CALL
1314   0C51 C0 00 00      cmp b, 0
1315   0C54 C6 5D 0C      je _if47_else
1316   0C57             _if47_TRUE:
1317   0C57             ; shield_control(); 
1318   0C57             ; --- START FUNCTION CALL
1319   0C57 07 AC 3E      call shield_control
1320   0C5A 0A 56 0D      jmp _if47_exit
1321   0C5D             _if47_else:
1322   0C5D             ; if (!strncmp(cmd, "dam", 3)) 
1323   0C5D             _if48_cond:
1324   0C5D             ; --- START FUNCTION CALL
1325   0C5D FD 2E 03 00   mov32 cb, $00000003
1325   0C61 00 00 
1326   0C63 FD AB         swp b
1327   0C65 D8            push b
1328   0C66 26 CA 71      mov b, _s44 ; "dam"
1329   0C69 FD AB         swp b
1330   0C6B D8            push b
1331   0C6C FA FD FF      lea d, [bp + -3] ; $cmd
1332   0C6F 2D            mov b, d
1333   0C70 38 00 00      mov c, 0
1334   0C73 FD AB         swp b
1335   0C75 D8            push b
1336   0C76 07 CD 69      call strncmp
1337   0C79 51 06 00      add sp, 6
1338   0C7C             ; --- END FUNCTION CALL
1339   0C7C C0 00 00      cmp b, 0
1340   0C7F C6 88 0C      je _if48_else
1341   0C82             _if48_TRUE:
1342   0C82             ; damage_control(); 
1343   0C82             ; --- START FUNCTION CALL
1344   0C82 07 C4 3B      call damage_control
1345   0C85 0A 56 0D      jmp _if48_exit
1346   0C88             _if48_else:
1347   0C88             ; if (!strncmp(cmd, "com", 3)) 
1348   0C88             _if49_cond:
1349   0C88             ; --- START FUNCTION CALL
1350   0C88 FD 2E 03 00   mov32 cb, $00000003
1350   0C8C 00 00 
1351   0C8E FD AB         swp b
1352   0C90 D8            push b
1353   0C91 26 CE 71      mov b, _s45 ; "com"
1354   0C94 FD AB         swp b
1355   0C96 D8            push b
1356   0C97 FA FD FF      lea d, [bp + -3] ; $cmd
1357   0C9A 2D            mov b, d
1358   0C9B 38 00 00      mov c, 0
1359   0C9E FD AB         swp b
1360   0CA0 D8            push b
1361   0CA1 07 CD 69      call strncmp
1362   0CA4 51 06 00      add sp, 6
1363   0CA7             ; --- END FUNCTION CALL
1364   0CA7 C0 00 00      cmp b, 0
1365   0CAA C6 B3 0C      je _if49_else
1366   0CAD             _if49_TRUE:
1367   0CAD             ; library_computer(); 
1368   0CAD             ; --- START FUNCTION CALL
1369   0CAD 07 B5 3F      call library_computer
1370   0CB0 0A 56 0D      jmp _if49_exit
1371   0CB3             _if49_else:
1372   0CB3             ; if (!strncmp(cmd, "xxx", 3)) 
1373   0CB3             _if50_cond:
1374   0CB3             ; --- START FUNCTION CALL
1375   0CB3 FD 2E 03 00   mov32 cb, $00000003
1375   0CB7 00 00 
1376   0CB9 FD AB         swp b
1377   0CBB D8            push b
1378   0CBC 26 D2 71      mov b, _s46 ; "xxx"
1379   0CBF FD AB         swp b
1380   0CC1 D8            push b
1381   0CC2 FA FD FF      lea d, [bp + -3] ; $cmd
1382   0CC5 2D            mov b, d
1383   0CC6 38 00 00      mov c, 0
1384   0CC9 FD AB         swp b
1385   0CCB D8            push b
1386   0CCC 07 CD 69      call strncmp
1387   0CCF 51 06 00      add sp, 6
1388   0CD2             ; --- END FUNCTION CALL
1389   0CD2 C0 00 00      cmp b, 0
1390   0CD5 C6 DE 0C      je _if50_else
1391   0CD8             _if50_TRUE:
1392   0CD8             ; resign_commision(); 
1393   0CD8             ; --- START FUNCTION CALL
1394   0CD8 07 D7 4E      call resign_commision
1395   0CDB 0A 56 0D      jmp _if50_exit
1396   0CDE             _if50_else:
1397   0CDE             ; puts("Enter one of the following:\n"); 
1398   0CDE             ; --- START FUNCTION CALL
1399   0CDE 26 D6 71      mov b, _s47 ; "Enter one of the following:\n"
1400   0CE1 FD AB         swp b
1401   0CE3 D8            push b
1402   0CE4 07 47 69      call puts
1403   0CE7 51 02 00      add sp, 2
1404   0CEA             ; --- END FUNCTION CALL
1405   0CEA             ; puts("  nav - To Set Course"); 
1406   0CEA             ; --- START FUNCTION CALL
1407   0CEA 26 F3 71      mov b, _s48 ; "  nav - To Set Course"
1408   0CED FD AB         swp b
1409   0CEF D8            push b
1410   0CF0 07 47 69      call puts
1411   0CF3 51 02 00      add sp, 2
1412   0CF6             ; --- END FUNCTION CALL
1413   0CF6             ; puts("  srs - Short Range Sensors"); 
1414   0CF6             ; --- START FUNCTION CALL
1415   0CF6 26 09 72      mov b, _s49 ; "  srs - Short Range Sensors"
1416   0CF9 FD AB         swp b
1417   0CFB D8            push b
1418   0CFC 07 47 69      call puts
1419   0CFF 51 02 00      add sp, 2
1420   0D02             ; --- END FUNCTION CALL
1421   0D02             ; puts("  lrs - Long Range Sensors"); 
1422   0D02             ; --- START FUNCTION CALL
1423   0D02 26 25 72      mov b, _s50 ; "  lrs - Long Range Sensors"
1424   0D05 FD AB         swp b
1425   0D07 D8            push b
1426   0D08 07 47 69      call puts
1427   0D0B 51 02 00      add sp, 2
1428   0D0E             ; --- END FUNCTION CALL
1429   0D0E             ; puts("  pha - Phasers"); 
1430   0D0E             ; --- START FUNCTION CALL
1431   0D0E 26 40 72      mov b, _s51 ; "  pha - Phasers"
1432   0D11 FD AB         swp b
1433   0D13 D8            push b
1434   0D14 07 47 69      call puts
1435   0D17 51 02 00      add sp, 2
1436   0D1A             ; --- END FUNCTION CALL
1437   0D1A             ; puts("  tor - Photon Torpedoes"); 
1438   0D1A             ; --- START FUNCTION CALL
1439   0D1A 26 50 72      mov b, _s52 ; "  tor - Photon Torpedoes"
1440   0D1D FD AB         swp b
1441   0D1F D8            push b
1442   0D20 07 47 69      call puts
1443   0D23 51 02 00      add sp, 2
1444   0D26             ; --- END FUNCTION CALL
1445   0D26             ; puts("  shi - Shield Control"); 
1446   0D26             ; --- START FUNCTION CALL
1447   0D26 26 69 72      mov b, _s53 ; "  shi - Shield Control"
1448   0D29 FD AB         swp b
1449   0D2B D8            push b
1450   0D2C 07 47 69      call puts
1451   0D2F 51 02 00      add sp, 2
1452   0D32             ; --- END FUNCTION CALL
1453   0D32             ; puts("  dam - Damage Control"); 
1454   0D32             ; --- START FUNCTION CALL
1455   0D32 26 80 72      mov b, _s54 ; "  dam - Damage Control"
1456   0D35 FD AB         swp b
1457   0D37 D8            push b
1458   0D38 07 47 69      call puts
1459   0D3B 51 02 00      add sp, 2
1460   0D3E             ; --- END FUNCTION CALL
1461   0D3E             ; puts("  com - Library Computer"); 
1462   0D3E             ; --- START FUNCTION CALL
1463   0D3E 26 97 72      mov b, _s55 ; "  com - Library Computer"
1464   0D41 FD AB         swp b
1465   0D43 D8            push b
1466   0D44 07 47 69      call puts
1467   0D47 51 02 00      add sp, 2
1468   0D4A             ; --- END FUNCTION CALL
1469   0D4A             ; puts("  xxx - Resign Command\n"); 
1470   0D4A             ; --- START FUNCTION CALL
1471   0D4A 26 B0 72      mov b, _s56 ; "  xxx - Resign Command\n"
1472   0D4D FD AB         swp b
1473   0D4F D8            push b
1474   0D50 07 47 69      call puts
1475   0D53 51 02 00      add sp, 2
1476   0D56             ; --- END FUNCTION CALL
1477   0D56             _if50_exit:
1478   0D56             _if49_exit:
1479   0D56             _if48_exit:
1480   0D56             _if47_exit:
1481   0D56             _if46_exit:
1482   0D56             _if45_exit:
1483   0D56             _if44_exit:
1484   0D56             _if43_exit:
1485   0D56             _if42_exit:
1486   0D56 0A AB 0A      jmp _while40_cond
1487   0D59             _while40_exit:
1488   0D59 F9            leave
1489   0D5A 09            ret
1490   0D5B             
1491   0D5B             initialize:
1492   0D5B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1493   0D5E             ; int i, j; 
1494   0D5E 52 02 00      sub sp, 2
1495   0D61 52 02 00      sub sp, 2
1496   0D64             ; unsigned char        yp, xp; 
1497   0D64 52 01 00      sub sp, 1
1498   0D67 52 01 00      sub sp, 1
1499   0D6A             ; unsigned char        r; 
1500   0D6A 52 01 00      sub sp, 1
1501   0D6D             ; time_start = FROM_FIXED(stardate); 
1502   0D6D 3B 2C 6E      mov d, _time_start ; $time_start
1503   0D70 DA            push d
1504   0D71             ; --- START FUNCTION CALL
1505   0D71 3B 48 6E      mov d, _stardate ; $stardate
1506   0D74 2A            mov b, [d]
1507   0D75 38 00 00      mov c, 0
1508   0D78 FD AB         swp b
1509   0D7A D8            push b
1510   0D7B 07 68 04      call FROM_FIXED
1511   0D7E 51 02 00      add sp, 2
1512   0D81             ; --- END FUNCTION CALL
1513   0D81 E7            pop d
1514   0D82 FD 43         mov [d], b
1515   0D84             ; time_up = 25 + get_rand(10); 
1516   0D84 3B 2E 6E      mov d, _time_up ; $time_up
1517   0D87 DA            push d
1518   0D88 FD 2E 19 00   mov32 cb, $00000019
1518   0D8C 00 00 
1519   0D8E             ; --- START TERMS
1520   0D8E D7            push a
1521   0D8F 11            mov a, b
1522   0D90             ; --- START FUNCTION CALL
1523   0D90 FD 2E 0A 00   mov32 cb, $0000000a
1523   0D94 00 00 
1524   0D96 FD AB         swp b
1525   0D98 D8            push b
1526   0D99 07 FF 04      call get_rand
1527   0D9C 51 02 00      add sp, 2
1528   0D9F             ; --- END FUNCTION CALL
1529   0D9F 56            add b, a
1530   0DA0 E4            pop a
1531   0DA1             ; --- END TERMS
1532   0DA1 E7            pop d
1533   0DA2 FD 43         mov [d], b
1534   0DA4             ; docked = 0; 
1535   0DA4 3B 6D 6D      mov d, _docked ; $docked
1536   0DA7 DA            push d
1537   0DA8 FD 2E 00 00   mov32 cb, $00000000
1537   0DAC 00 00 
1538   0DAE E7            pop d
1539   0DAF FD 3E         mov [d], bl
1540   0DB1             ; energy = energy0; 
1541   0DB1 3B 6E 6D      mov d, _energy ; $energy
1542   0DB4 DA            push d
1543   0DB5 3B 70 6D      mov d, _energy0 ; $energy0
1544   0DB8 2A            mov b, [d]
1545   0DB9 38 00 00      mov c, 0
1546   0DBC E7            pop d
1547   0DBD FD 43         mov [d], b
1548   0DBF             ; torps = torps0; 
1549   0DBF 3B 23 6E      mov d, _torps ; $torps
1550   0DC2 DA            push d
1551   0DC3 3B 24 6E      mov d, _torps0 ; $torps0
1552   0DC6 32            mov bl, [d]
1553   0DC7 A7 00         mov bh, 0
1554   0DC9 38 00 00      mov c, 0
1555   0DCC E7            pop d
1556   0DCD FD 3E         mov [d], bl
1557   0DCF             ; shield = 0; 
1558   0DCF 3B 29 6E      mov d, _shield ; $shield
1559   0DD2 DA            push d
1560   0DD3 FD 2E 00 00   mov32 cb, $00000000
1560   0DD7 00 00 
1561   0DD9 E7            pop d
1562   0DDA FD 43         mov [d], b
1563   0DDC             ; quad_y = rand8(); 
1564   0DDC 3B 25 6E      mov d, _quad_y ; $quad_y
1565   0DDF DA            push d
1566   0DE0             ; --- START FUNCTION CALL
1567   0DE0 07 6F 05      call rand8
1568   0DE3 E7            pop d
1569   0DE4 FD 43         mov [d], b
1570   0DE6             ; quad_x = rand8(); 
1571   0DE6 3B 27 6E      mov d, _quad_x ; $quad_x
1572   0DE9 DA            push d
1573   0DEA             ; --- START FUNCTION CALL
1574   0DEA 07 6F 05      call rand8
1575   0DED E7            pop d
1576   0DEE FD 43         mov [d], b
1577   0DF0             ; ship_y = TO_FIXED00(rand8()); 
1578   0DF0 3B 44 6E      mov d, _ship_y ; $ship_y
1579   0DF3 DA            push d
1580   0DF4             ; --- START FUNCTION CALL
1581   0DF4             ; --- START FUNCTION CALL
1582   0DF4 07 6F 05      call rand8
1583   0DF7 FD AB         swp b
1584   0DF9 D8            push b
1585   0DFA 07 8B 04      call TO_FIXED00
1586   0DFD 51 02 00      add sp, 2
1587   0E00             ; --- END FUNCTION CALL
1588   0E00 E7            pop d
1589   0E01 FD 43         mov [d], b
1590   0E03             ; ship_x = TO_FIXED00(rand8()); 
1591   0E03 3B 46 6E      mov d, _ship_x ; $ship_x
1592   0E06 DA            push d
1593   0E07             ; --- START FUNCTION CALL
1594   0E07             ; --- START FUNCTION CALL
1595   0E07 07 6F 05      call rand8
1596   0E0A FD AB         swp b
1597   0E0C D8            push b
1598   0E0D 07 8B 04      call TO_FIXED00
1599   0E10 51 02 00      add sp, 2
1600   0E13             ; --- END FUNCTION CALL
1601   0E13 E7            pop d
1602   0E14 FD 43         mov [d], b
1603   0E16             ; for (i = 1; i <= 8; i++) 
1604   0E16             _for51_init:
1605   0E16 FA FF FF      lea d, [bp + -1] ; $i
1606   0E19 DA            push d
1607   0E1A FD 2E 01 00   mov32 cb, $00000001
1607   0E1E 00 00 
1608   0E20 E7            pop d
1609   0E21 FD 43         mov [d], b
1610   0E23             _for51_cond:
1611   0E23 FA FF FF      lea d, [bp + -1] ; $i
1612   0E26 2A            mov b, [d]
1613   0E27 38 00 00      mov c, 0
1614   0E2A             ; --- START RELATIONAL
1615   0E2A D7            push a
1616   0E2B 11            mov a, b
1617   0E2C FD 2E 08 00   mov32 cb, $00000008
1617   0E30 00 00 
1618   0E32 B0            cmp a, b
1619   0E33 FD 74         sle ; <= (signed)
1620   0E35 E4            pop a
1621   0E36             ; --- END RELATIONAL
1622   0E36 C0 00 00      cmp b, 0
1623   0E39 C6 6B 0E      je _for51_exit
1624   0E3C             _for51_block:
1625   0E3C             ; damage[i] = 0; 
1626   0E3C 3B 30 6E      mov d, _damage_data ; $damage
1627   0E3F D7            push a
1628   0E40 DA            push d
1629   0E41 FA FF FF      lea d, [bp + -1] ; $i
1630   0E44 2A            mov b, [d]
1631   0E45 38 00 00      mov c, 0
1632   0E48 E7            pop d
1633   0E49 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1634   0E4D E4            pop a
1635   0E4E DA            push d
1636   0E4F FD 2E 00 00   mov32 cb, $00000000
1636   0E53 00 00 
1637   0E55 E7            pop d
1638   0E56 FD 43         mov [d], b
1639   0E58             _for51_update:
1640   0E58 FA FF FF      lea d, [bp + -1] ; $i
1641   0E5B 2A            mov b, [d]
1642   0E5C 38 00 00      mov c, 0
1643   0E5F 11            mov a, b
1644   0E60 FD 77         inc b
1645   0E62 FA FF FF      lea d, [bp + -1] ; $i
1646   0E65 FD 43         mov [d], b
1647   0E67 27            mov b, a
1648   0E68 0A 23 0E      jmp _for51_cond
1649   0E6B             _for51_exit:
1650   0E6B             ; for (i = 1; i <= 8; i++) { 
1651   0E6B             _for52_init:
1652   0E6B FA FF FF      lea d, [bp + -1] ; $i
1653   0E6E DA            push d
1654   0E6F FD 2E 01 00   mov32 cb, $00000001
1654   0E73 00 00 
1655   0E75 E7            pop d
1656   0E76 FD 43         mov [d], b
1657   0E78             _for52_cond:
1658   0E78 FA FF FF      lea d, [bp + -1] ; $i
1659   0E7B 2A            mov b, [d]
1660   0E7C 38 00 00      mov c, 0
1661   0E7F             ; --- START RELATIONAL
1662   0E7F D7            push a
1663   0E80 11            mov a, b
1664   0E81 FD 2E 08 00   mov32 cb, $00000008
1664   0E85 00 00 
1665   0E87 B0            cmp a, b
1666   0E88 FD 74         sle ; <= (signed)
1667   0E8A E4            pop a
1668   0E8B             ; --- END RELATIONAL
1669   0E8B C0 00 00      cmp b, 0
1670   0E8E C6 51 10      je _for52_exit
1671   0E91             _for52_block:
1672   0E91             ; for (j = 1; j <= 8; j++) { 
1673   0E91             _for53_init:
1674   0E91 FA FD FF      lea d, [bp + -3] ; $j
1675   0E94 DA            push d
1676   0E95 FD 2E 01 00   mov32 cb, $00000001
1676   0E99 00 00 
1677   0E9B E7            pop d
1678   0E9C FD 43         mov [d], b
1679   0E9E             _for53_cond:
1680   0E9E FA FD FF      lea d, [bp + -3] ; $j
1681   0EA1 2A            mov b, [d]
1682   0EA2 38 00 00      mov c, 0
1683   0EA5             ; --- START RELATIONAL
1684   0EA5 D7            push a
1685   0EA6 11            mov a, b
1686   0EA7 FD 2E 08 00   mov32 cb, $00000008
1686   0EAB 00 00 
1687   0EAD B0            cmp a, b
1688   0EAE FD 74         sle ; <= (signed)
1689   0EB0 E4            pop a
1690   0EB1             ; --- END RELATIONAL
1691   0EB1 C0 00 00      cmp b, 0
1692   0EB4 C6 3E 10      je _for53_exit
1693   0EB7             _for53_block:
1694   0EB7             ; r = get_rand(100); 
1695   0EB7 FA FA FF      lea d, [bp + -6] ; $r
1696   0EBA DA            push d
1697   0EBB             ; --- START FUNCTION CALL
1698   0EBB FD 2E 64 00   mov32 cb, $00000064
1698   0EBF 00 00 
1699   0EC1 FD AB         swp b
1700   0EC3 D8            push b
1701   0EC4 07 FF 04      call get_rand
1702   0EC7 51 02 00      add sp, 2
1703   0ECA             ; --- END FUNCTION CALL
1704   0ECA E7            pop d
1705   0ECB FD 3E         mov [d], bl
1706   0ECD             ; klingons = 0; 
1707   0ECD 3B 20 6E      mov d, _klingons ; $klingons
1708   0ED0 DA            push d
1709   0ED1 FD 2E 00 00   mov32 cb, $00000000
1709   0ED5 00 00 
1710   0ED7 E7            pop d
1711   0ED8 FD 3E         mov [d], bl
1712   0EDA             ; if (r > 98) 
1713   0EDA             _if54_cond:
1714   0EDA FA FA FF      lea d, [bp + -6] ; $r
1715   0EDD 32            mov bl, [d]
1716   0EDE A7 00         mov bh, 0
1717   0EE0 38 00 00      mov c, 0
1718   0EE3             ; --- START RELATIONAL
1719   0EE3 D7            push a
1720   0EE4 11            mov a, b
1721   0EE5 FD 2E 62 00   mov32 cb, $00000062
1721   0EE9 00 00 
1722   0EEB B0            cmp a, b
1723   0EEC FD 81         sgu ; > (unsigned)
1724   0EEE E4            pop a
1725   0EEF             ; --- END RELATIONAL
1726   0EEF C0 00 00      cmp b, 0
1727   0EF2 C6 05 0F      je _if54_else
1728   0EF5             _if54_TRUE:
1729   0EF5             ; klingons = 3; 
1730   0EF5 3B 20 6E      mov d, _klingons ; $klingons
1731   0EF8 DA            push d
1732   0EF9 FD 2E 03 00   mov32 cb, $00000003
1732   0EFD 00 00 
1733   0EFF E7            pop d
1734   0F00 FD 3E         mov [d], bl
1735   0F02 0A 5B 0F      jmp _if54_exit
1736   0F05             _if54_else:
1737   0F05             ; if (r > 95) 
1738   0F05             _if55_cond:
1739   0F05 FA FA FF      lea d, [bp + -6] ; $r
1740   0F08 32            mov bl, [d]
1741   0F09 A7 00         mov bh, 0
1742   0F0B 38 00 00      mov c, 0
1743   0F0E             ; --- START RELATIONAL
1744   0F0E D7            push a
1745   0F0F 11            mov a, b
1746   0F10 FD 2E 5F 00   mov32 cb, $0000005f
1746   0F14 00 00 
1747   0F16 B0            cmp a, b
1748   0F17 FD 81         sgu ; > (unsigned)
1749   0F19 E4            pop a
1750   0F1A             ; --- END RELATIONAL
1751   0F1A C0 00 00      cmp b, 0
1752   0F1D C6 30 0F      je _if55_else
1753   0F20             _if55_TRUE:
1754   0F20             ; klingons = 2; 
1755   0F20 3B 20 6E      mov d, _klingons ; $klingons
1756   0F23 DA            push d
1757   0F24 FD 2E 02 00   mov32 cb, $00000002
1757   0F28 00 00 
1758   0F2A E7            pop d
1759   0F2B FD 3E         mov [d], bl
1760   0F2D 0A 5B 0F      jmp _if55_exit
1761   0F30             _if55_else:
1762   0F30             ; if (r > 80) 
1763   0F30             _if56_cond:
1764   0F30 FA FA FF      lea d, [bp + -6] ; $r
1765   0F33 32            mov bl, [d]
1766   0F34 A7 00         mov bh, 0
1767   0F36 38 00 00      mov c, 0
1768   0F39             ; --- START RELATIONAL
1769   0F39 D7            push a
1770   0F3A 11            mov a, b
1771   0F3B FD 2E 50 00   mov32 cb, $00000050
1771   0F3F 00 00 
1772   0F41 B0            cmp a, b
1773   0F42 FD 81         sgu ; > (unsigned)
1774   0F44 E4            pop a
1775   0F45             ; --- END RELATIONAL
1776   0F45 C0 00 00      cmp b, 0
1777   0F48 C6 5B 0F      je _if56_exit
1778   0F4B             _if56_TRUE:
1779   0F4B             ; klingons = 1; 
1780   0F4B 3B 20 6E      mov d, _klingons ; $klingons
1781   0F4E DA            push d
1782   0F4F FD 2E 01 00   mov32 cb, $00000001
1782   0F53 00 00 
1783   0F55 E7            pop d
1784   0F56 FD 3E         mov [d], bl
1785   0F58 0A 5B 0F      jmp _if56_exit
1786   0F5B             _if56_exit:
1787   0F5B             _if55_exit:
1788   0F5B             _if54_exit:
1789   0F5B             ; klingons_left = klingons_left + klingons; 
1790   0F5B 3B 22 6E      mov d, _klingons_left ; $klingons_left
1791   0F5E DA            push d
1792   0F5F 3B 22 6E      mov d, _klingons_left ; $klingons_left
1793   0F62 32            mov bl, [d]
1794   0F63 A7 00         mov bh, 0
1795   0F65 38 00 00      mov c, 0
1796   0F68             ; --- START TERMS
1797   0F68 D7            push a
1798   0F69 11            mov a, b
1799   0F6A 3B 20 6E      mov d, _klingons ; $klingons
1800   0F6D 32            mov bl, [d]
1801   0F6E A7 00         mov bh, 0
1802   0F70 38 00 00      mov c, 0
1803   0F73 56            add b, a
1804   0F74 E4            pop a
1805   0F75             ; --- END TERMS
1806   0F75 E7            pop d
1807   0F76 FD 3E         mov [d], bl
1808   0F78             ; starbases = 0; 
1809   0F78 3B 49 6D      mov d, _starbases ; $starbases
1810   0F7B DA            push d
1811   0F7C FD 2E 00 00   mov32 cb, $00000000
1811   0F80 00 00 
1812   0F82 E7            pop d
1813   0F83 FD 3E         mov [d], bl
1814   0F85             ; if (get_rand(100) > 96) 
1815   0F85             _if57_cond:
1816   0F85             ; --- START FUNCTION CALL
1817   0F85 FD 2E 64 00   mov32 cb, $00000064
1817   0F89 00 00 
1818   0F8B FD AB         swp b
1819   0F8D D8            push b
1820   0F8E 07 FF 04      call get_rand
1821   0F91 51 02 00      add sp, 2
1822   0F94             ; --- END FUNCTION CALL
1823   0F94             ; --- START RELATIONAL
1824   0F94 D7            push a
1825   0F95 11            mov a, b
1826   0F96 FD 2E 60 00   mov32 cb, $00000060
1826   0F9A 00 00 
1827   0F9C B0            cmp a, b
1828   0F9D FD 7F         sgt ; >
1829   0F9F E4            pop a
1830   0FA0             ; --- END RELATIONAL
1831   0FA0 C0 00 00      cmp b, 0
1832   0FA3 C6 B6 0F      je _if57_exit
1833   0FA6             _if57_TRUE:
1834   0FA6             ; starbases = 1; 
1835   0FA6 3B 49 6D      mov d, _starbases ; $starbases
1836   0FA9 DA            push d
1837   0FAA FD 2E 01 00   mov32 cb, $00000001
1837   0FAE 00 00 
1838   0FB0 E7            pop d
1839   0FB1 FD 3E         mov [d], bl
1840   0FB3 0A B6 0F      jmp _if57_exit
1841   0FB6             _if57_exit:
1842   0FB6             ; starbases_left = starbases_left + starbases; 
1843   0FB6 3B 4C 6D      mov d, _starbases_left ; $starbases_left
1844   0FB9 DA            push d
1845   0FBA 3B 4C 6D      mov d, _starbases_left ; $starbases_left
1846   0FBD 32            mov bl, [d]
1847   0FBE A7 00         mov bh, 0
1848   0FC0 38 00 00      mov c, 0
1849   0FC3             ; --- START TERMS
1850   0FC3 D7            push a
1851   0FC4 11            mov a, b
1852   0FC5 3B 49 6D      mov d, _starbases ; $starbases
1853   0FC8 32            mov bl, [d]
1854   0FC9 A7 00         mov bh, 0
1855   0FCB 38 00 00      mov c, 0
1856   0FCE 56            add b, a
1857   0FCF E4            pop a
1858   0FD0             ; --- END TERMS
1859   0FD0 E7            pop d
1860   0FD1 FD 3E         mov [d], bl
1861   0FD3             ; map[i][j] = (klingons << 8) + (starbases << 4) + rand8(); 
1862   0FD3 3B 72 6D      mov d, _map_data ; $map
1863   0FD6 D7            push a
1864   0FD7 DA            push d
1865   0FD8 FA FF FF      lea d, [bp + -1] ; $i
1866   0FDB 2A            mov b, [d]
1867   0FDC 38 00 00      mov c, 0
1868   0FDF E7            pop d
1869   0FE0 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1870   0FE4 DA            push d
1871   0FE5 FA FD FF      lea d, [bp + -3] ; $j
1872   0FE8 2A            mov b, [d]
1873   0FE9 38 00 00      mov c, 0
1874   0FEC E7            pop d
1875   0FED FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1876   0FF1 E4            pop a
1877   0FF2 DA            push d
1878   0FF3 3B 20 6E      mov d, _klingons ; $klingons
1879   0FF6 32            mov bl, [d]
1880   0FF7 A7 00         mov bh, 0
1881   0FF9 38 00 00      mov c, 0
1882   0FFC             ; --- START SHIFT
1883   0FFC D7            push a
1884   0FFD 11            mov a, b
1885   0FFE FD 2E 08 00   mov32 cb, $00000008
1885   1002 00 00 
1886   1004 FD 39         mov c, b
1887   1006 9D            shl a, cl
1888   1007 27            mov b, a
1889   1008 E4            pop a
1890   1009             ; --- END SHIFT
1891   1009             ; --- START TERMS
1892   1009 D7            push a
1893   100A 11            mov a, b
1894   100B 3B 49 6D      mov d, _starbases ; $starbases
1895   100E 32            mov bl, [d]
1896   100F A7 00         mov bh, 0
1897   1011 38 00 00      mov c, 0
1898   1014             ; --- START SHIFT
1899   1014 D7            push a
1900   1015 11            mov a, b
1901   1016 FD 2E 04 00   mov32 cb, $00000004
1901   101A 00 00 
1902   101C FD 39         mov c, b
1903   101E 9D            shl a, cl
1904   101F 27            mov b, a
1905   1020 E4            pop a
1906   1021             ; --- END SHIFT
1907   1021 56            add b, a
1908   1022 11            mov a, b
1909   1023             ; --- START FUNCTION CALL
1910   1023 07 6F 05      call rand8
1911   1026 56            add b, a
1912   1027 E4            pop a
1913   1028             ; --- END TERMS
1914   1028 E7            pop d
1915   1029 FD 43         mov [d], b
1916   102B             _for53_update:
1917   102B FA FD FF      lea d, [bp + -3] ; $j
1918   102E 2A            mov b, [d]
1919   102F 38 00 00      mov c, 0
1920   1032 11            mov a, b
1921   1033 FD 77         inc b
1922   1035 FA FD FF      lea d, [bp + -3] ; $j
1923   1038 FD 43         mov [d], b
1924   103A 27            mov b, a
1925   103B 0A 9E 0E      jmp _for53_cond
1926   103E             _for53_exit:
1927   103E             _for52_update:
1928   103E FA FF FF      lea d, [bp + -1] ; $i
1929   1041 2A            mov b, [d]
1930   1042 38 00 00      mov c, 0
1931   1045 11            mov a, b
1932   1046 FD 77         inc b
1933   1048 FA FF FF      lea d, [bp + -1] ; $i
1934   104B FD 43         mov [d], b
1935   104D 27            mov b, a
1936   104E 0A 78 0E      jmp _for52_cond
1937   1051             _for52_exit:
1938   1051             ; if (klingons_left > time_up) 
1939   1051             _if58_cond:
1940   1051 3B 22 6E      mov d, _klingons_left ; $klingons_left
1941   1054 32            mov bl, [d]
1942   1055 A7 00         mov bh, 0
1943   1057 38 00 00      mov c, 0
1944   105A             ; --- START RELATIONAL
1945   105A D7            push a
1946   105B 11            mov a, b
1947   105C 3B 2E 6E      mov d, _time_up ; $time_up
1948   105F 2A            mov b, [d]
1949   1060 38 00 00      mov c, 0
1950   1063 B0            cmp a, b
1951   1064 FD 81         sgu ; > (unsigned)
1952   1066 E4            pop a
1953   1067             ; --- END RELATIONAL
1954   1067 C0 00 00      cmp b, 0
1955   106A C6 8A 10      je _if58_exit
1956   106D             _if58_TRUE:
1957   106D             ; time_up = klingons_left + 1; 
1958   106D 3B 2E 6E      mov d, _time_up ; $time_up
1959   1070 DA            push d
1960   1071 3B 22 6E      mov d, _klingons_left ; $klingons_left
1961   1074 32            mov bl, [d]
1962   1075 A7 00         mov bh, 0
1963   1077 38 00 00      mov c, 0
1964   107A             ; --- START TERMS
1965   107A D7            push a
1966   107B 11            mov a, b
1967   107C FD 2E 01 00   mov32 cb, $00000001
1967   1080 00 00 
1968   1082 56            add b, a
1969   1083 E4            pop a
1970   1084             ; --- END TERMS
1971   1084 E7            pop d
1972   1085 FD 43         mov [d], b
1973   1087 0A 8A 10      jmp _if58_exit
1974   108A             _if58_exit:
1975   108A             ; if (starbases_left == 0) { 
1976   108A             _if59_cond:
1977   108A 3B 4C 6D      mov d, _starbases_left ; $starbases_left
1978   108D 32            mov bl, [d]
1979   108E A7 00         mov bh, 0
1980   1090 38 00 00      mov c, 0
1981   1093             ; --- START RELATIONAL
1982   1093 D7            push a
1983   1094 11            mov a, b
1984   1095 FD 2E 00 00   mov32 cb, $00000000
1984   1099 00 00 
1985   109B B0            cmp a, b
1986   109C FD 71         seq ; ==
1987   109E E4            pop a
1988   109F             ; --- END RELATIONAL
1989   109F C0 00 00      cmp b, 0
1990   10A2 C6 E6 11      je _if59_exit
1991   10A5             _if59_TRUE:
1992   10A5             ; yp = rand8(); 
1993   10A5 FA FC FF      lea d, [bp + -4] ; $yp
1994   10A8 DA            push d
1995   10A9             ; --- START FUNCTION CALL
1996   10A9 07 6F 05      call rand8
1997   10AC E7            pop d
1998   10AD FD 3E         mov [d], bl
1999   10AF             ; xp = rand8(); 
2000   10AF FA FB FF      lea d, [bp + -5] ; $xp
2001   10B2 DA            push d
2002   10B3             ; --- START FUNCTION CALL
2003   10B3 07 6F 05      call rand8
2004   10B6 E7            pop d
2005   10B7 FD 3E         mov [d], bl
2006   10B9             ; if (map[yp][xp] < 0x200) { 
2007   10B9             _if60_cond:
2008   10B9 3B 72 6D      mov d, _map_data ; $map
2009   10BC D7            push a
2010   10BD DA            push d
2011   10BE FA FC FF      lea d, [bp + -4] ; $yp
2012   10C1 32            mov bl, [d]
2013   10C2 A7 00         mov bh, 0
2014   10C4 38 00 00      mov c, 0
2015   10C7 E7            pop d
2016   10C8 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2017   10CC DA            push d
2018   10CD FA FB FF      lea d, [bp + -5] ; $xp
2019   10D0 32            mov bl, [d]
2020   10D1 A7 00         mov bh, 0
2021   10D3 38 00 00      mov c, 0
2022   10D6 E7            pop d
2023   10D7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2024   10DB E4            pop a
2025   10DC 2A            mov b, [d]
2026   10DD 38 00 00      mov c, 0
2027   10E0             ; --- START RELATIONAL
2028   10E0 D7            push a
2029   10E1 11            mov a, b
2030   10E2 FD 2E 00 02   mov32 cb, $00000200
2030   10E6 00 00 
2031   10E8 B0            cmp a, b
2032   10E9 FD 75         slu ; < (unsigned)
2033   10EB E4            pop a
2034   10EC             ; --- END RELATIONAL
2035   10EC C0 00 00      cmp b, 0
2036   10EF C6 6C 11      je _if60_exit
2037   10F2             _if60_TRUE:
2038   10F2             ; map[yp][xp] = map[yp][xp] + (1 << 8); 
2039   10F2 3B 72 6D      mov d, _map_data ; $map
2040   10F5 D7            push a
2041   10F6 DA            push d
2042   10F7 FA FC FF      lea d, [bp + -4] ; $yp
2043   10FA 32            mov bl, [d]
2044   10FB A7 00         mov bh, 0
2045   10FD 38 00 00      mov c, 0
2046   1100 E7            pop d
2047   1101 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2048   1105 DA            push d
2049   1106 FA FB FF      lea d, [bp + -5] ; $xp
2050   1109 32            mov bl, [d]
2051   110A A7 00         mov bh, 0
2052   110C 38 00 00      mov c, 0
2053   110F E7            pop d
2054   1110 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2055   1114 E4            pop a
2056   1115 DA            push d
2057   1116 3B 72 6D      mov d, _map_data ; $map
2058   1119 D7            push a
2059   111A DA            push d
2060   111B FA FC FF      lea d, [bp + -4] ; $yp
2061   111E 32            mov bl, [d]
2062   111F A7 00         mov bh, 0
2063   1121 38 00 00      mov c, 0
2064   1124 E7            pop d
2065   1125 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2066   1129 DA            push d
2067   112A FA FB FF      lea d, [bp + -5] ; $xp
2068   112D 32            mov bl, [d]
2069   112E A7 00         mov bh, 0
2070   1130 38 00 00      mov c, 0
2071   1133 E7            pop d
2072   1134 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2073   1138 E4            pop a
2074   1139 2A            mov b, [d]
2075   113A 38 00 00      mov c, 0
2076   113D             ; --- START TERMS
2077   113D D7            push a
2078   113E 11            mov a, b
2079   113F FD 2E 01 00   mov32 cb, $00000001
2079   1143 00 00 
2080   1145             ; --- START SHIFT
2081   1145 D7            push a
2082   1146 11            mov a, b
2083   1147 FD 2E 08 00   mov32 cb, $00000008
2083   114B 00 00 
2084   114D FD 39         mov c, b
2085   114F 9D            shl a, cl
2086   1150 27            mov b, a
2087   1151 E4            pop a
2088   1152             ; --- END SHIFT
2089   1152 56            add b, a
2090   1153 E4            pop a
2091   1154             ; --- END TERMS
2092   1154 E7            pop d
2093   1155 FD 43         mov [d], b
2094   1157             ; klingons_left++; 
2095   1157 3B 22 6E      mov d, _klingons_left ; $klingons_left
2096   115A 32            mov bl, [d]
2097   115B A7 00         mov bh, 0
2098   115D 38 00 00      mov c, 0
2099   1160 FD 77         inc b
2100   1162 3B 22 6E      mov d, _klingons_left ; $klingons_left
2101   1165 FD 3E         mov [d], bl
2102   1167 FD 7D         dec b
2103   1169 0A 6C 11      jmp _if60_exit
2104   116C             _if60_exit:
2105   116C             ; map[yp][xp] = map[yp][xp] + (1 << 4); 
2106   116C 3B 72 6D      mov d, _map_data ; $map
2107   116F D7            push a
2108   1170 DA            push d
2109   1171 FA FC FF      lea d, [bp + -4] ; $yp
2110   1174 32            mov bl, [d]
2111   1175 A7 00         mov bh, 0
2112   1177 38 00 00      mov c, 0
2113   117A E7            pop d
2114   117B FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2115   117F DA            push d
2116   1180 FA FB FF      lea d, [bp + -5] ; $xp
2117   1183 32            mov bl, [d]
2118   1184 A7 00         mov bh, 0
2119   1186 38 00 00      mov c, 0
2120   1189 E7            pop d
2121   118A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2122   118E E4            pop a
2123   118F DA            push d
2124   1190 3B 72 6D      mov d, _map_data ; $map
2125   1193 D7            push a
2126   1194 DA            push d
2127   1195 FA FC FF      lea d, [bp + -4] ; $yp
2128   1198 32            mov bl, [d]
2129   1199 A7 00         mov bh, 0
2130   119B 38 00 00      mov c, 0
2131   119E E7            pop d
2132   119F FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2133   11A3 DA            push d
2134   11A4 FA FB FF      lea d, [bp + -5] ; $xp
2135   11A7 32            mov bl, [d]
2136   11A8 A7 00         mov bh, 0
2137   11AA 38 00 00      mov c, 0
2138   11AD E7            pop d
2139   11AE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2140   11B2 E4            pop a
2141   11B3 2A            mov b, [d]
2142   11B4 38 00 00      mov c, 0
2143   11B7             ; --- START TERMS
2144   11B7 D7            push a
2145   11B8 11            mov a, b
2146   11B9 FD 2E 01 00   mov32 cb, $00000001
2146   11BD 00 00 
2147   11BF             ; --- START SHIFT
2148   11BF D7            push a
2149   11C0 11            mov a, b
2150   11C1 FD 2E 04 00   mov32 cb, $00000004
2150   11C5 00 00 
2151   11C7 FD 39         mov c, b
2152   11C9 9D            shl a, cl
2153   11CA 27            mov b, a
2154   11CB E4            pop a
2155   11CC             ; --- END SHIFT
2156   11CC 56            add b, a
2157   11CD E4            pop a
2158   11CE             ; --- END TERMS
2159   11CE E7            pop d
2160   11CF FD 43         mov [d], b
2161   11D1             ; starbases_left++; 
2162   11D1 3B 4C 6D      mov d, _starbases_left ; $starbases_left
2163   11D4 32            mov bl, [d]
2164   11D5 A7 00         mov bh, 0
2165   11D7 38 00 00      mov c, 0
2166   11DA FD 77         inc b
2167   11DC 3B 4C 6D      mov d, _starbases_left ; $starbases_left
2168   11DF FD 3E         mov [d], bl
2169   11E1 FD 7D         dec b
2170   11E3 0A E6 11      jmp _if59_exit
2171   11E6             _if59_exit:
2172   11E6             ; total_klingons = klingons_left; 
2173   11E6 3B 21 6E      mov d, _total_klingons ; $total_klingons
2174   11E9 DA            push d
2175   11EA 3B 22 6E      mov d, _klingons_left ; $klingons_left
2176   11ED 32            mov bl, [d]
2177   11EE A7 00         mov bh, 0
2178   11F0 38 00 00      mov c, 0
2179   11F3 E7            pop d
2180   11F4 FD 3E         mov [d], bl
2181   11F6             ; if (starbases_left != 1) { 
2182   11F6             _if61_cond:
2183   11F6 3B 4C 6D      mov d, _starbases_left ; $starbases_left
2184   11F9 32            mov bl, [d]
2185   11FA A7 00         mov bh, 0
2186   11FC 38 00 00      mov c, 0
2187   11FF             ; --- START RELATIONAL
2188   11FF D7            push a
2189   1200 11            mov a, b
2190   1201 FD 2E 01 00   mov32 cb, $00000001
2190   1205 00 00 
2191   1207 B0            cmp a, b
2192   1208 FD 72         sneq ; !=
2193   120A E4            pop a
2194   120B             ; --- END RELATIONAL
2195   120B C0 00 00      cmp b, 0
2196   120E C6 40 12      je _if61_exit
2197   1211             _if61_TRUE:
2198   1211             ; strcpy(plural_2, "s"); 
2199   1211             ; --- START FUNCTION CALL
2200   1211 26 C8 72      mov b, _s57 ; "s"
2201   1214 FD AB         swp b
2202   1216 D8            push b
2203   1217 3B 45 6F      mov d, _plural_2_data ; $plural_2
2204   121A 2D            mov b, d
2205   121B 38 00 00      mov c, 0
2206   121E FD AB         swp b
2207   1220 D8            push b
2208   1221 07 7E 5E      call strcpy
2209   1224 51 04 00      add sp, 4
2210   1227             ; --- END FUNCTION CALL
2211   1227             ; strcpy(plural, "are"); 
2212   1227             ; --- START FUNCTION CALL
2213   1227 26 55 71      mov b, _s30 ; "are"
2214   122A FD AB         swp b
2215   122C D8            push b
2216   122D 3B 48 6F      mov d, _plural_data ; $plural
2217   1230 2D            mov b, d
2218   1231 38 00 00      mov c, 0
2219   1234 FD AB         swp b
2220   1236 D8            push b
2221   1237 07 7E 5E      call strcpy
2222   123A 51 04 00      add sp, 4
2223   123D             ; --- END FUNCTION CALL
2224   123D 0A 40 12      jmp _if61_exit
2225   1240             _if61_exit:
2226   1240             ; getchar(); 
2227   1240             ; --- START FUNCTION CALL
2228   1240 07 DD 5D      call getchar
2229   1243 F9            leave
2230   1244 09            ret
2231   1245             
2232   1245             place_ship:
2233   1245 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2234   1248             ; quad[FROM_FIXED00(ship_y) - 1][FROM_FIXED00(ship_x) - 1] = 		4      ; 
2235   1248 3B 4A 6E      mov d, _quad_data ; $quad
2236   124B D7            push a
2237   124C DA            push d
2238   124D             ; --- START FUNCTION CALL
2239   124D 3B 44 6E      mov d, _ship_y ; $ship_y
2240   1250 2A            mov b, [d]
2241   1251 38 00 00      mov c, 0
2242   1254 FD AB         swp b
2243   1256 D8            push b
2244   1257 07 DC 04      call FROM_FIXED00
2245   125A 51 02 00      add sp, 2
2246   125D             ; --- END FUNCTION CALL
2247   125D             ; --- START TERMS
2248   125D D7            push a
2249   125E 11            mov a, b
2250   125F FD 2E 01 00   mov32 cb, $00000001
2250   1263 00 00 
2251   1265 60            sub a, b
2252   1266 27            mov b, a
2253   1267 E4            pop a
2254   1268             ; --- END TERMS
2255   1268 E7            pop d
2256   1269 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
2257   126D DA            push d
2258   126E             ; --- START FUNCTION CALL
2259   126E 3B 46 6E      mov d, _ship_x ; $ship_x
2260   1271 2A            mov b, [d]
2261   1272 38 00 00      mov c, 0
2262   1275 FD AB         swp b
2263   1277 D8            push b
2264   1278 07 DC 04      call FROM_FIXED00
2265   127B 51 02 00      add sp, 2
2266   127E             ; --- END FUNCTION CALL
2267   127E             ; --- START TERMS
2268   127E D7            push a
2269   127F 11            mov a, b
2270   1280 FD 2E 01 00   mov32 cb, $00000001
2270   1284 00 00 
2271   1286 60            sub a, b
2272   1287 27            mov b, a
2273   1288 E4            pop a
2274   1289             ; --- END TERMS
2275   1289 E7            pop d
2276   128A 5A            add d, b
2277   128B E4            pop a
2278   128C DA            push d
2279   128D FD 2E 04 00   mov32 cb, $00000004
2279   1291 00 00 
2280   1293 E7            pop d
2281   1294 FD 3E         mov [d], bl
2282   1296 F9            leave
2283   1297 09            ret
2284   1298             
2285   1298             new_quadrant:
2286   1298 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2287   129B             ; int i; 
2288   129B 52 02 00      sub sp, 2
2289   129E             ; unsigned int         tmp; 
2290   129E 52 02 00      sub sp, 2
2291   12A1             ; struct klingon *k; 
2292   12A1 52 02 00      sub sp, 2
2293   12A4             ; k = &kdata; 
2294   12A4 FA FB FF      lea d, [bp + -5] ; $k
2295   12A7 DA            push d
2296   12A8 3B 14 6E      mov d, _kdata_data ; $kdata
2297   12AB 2D            mov b, d
2298   12AC E7            pop d
2299   12AD FD 43         mov [d], b
2300   12AF             ; klingons = 0; 
2301   12AF 3B 20 6E      mov d, _klingons ; $klingons
2302   12B2 DA            push d
2303   12B3 FD 2E 00 00   mov32 cb, $00000000
2303   12B7 00 00 
2304   12B9 E7            pop d
2305   12BA FD 3E         mov [d], bl
2306   12BC             ; starbases = 0; 
2307   12BC 3B 49 6D      mov d, _starbases ; $starbases
2308   12BF DA            push d
2309   12C0 FD 2E 00 00   mov32 cb, $00000000
2309   12C4 00 00 
2310   12C6 E7            pop d
2311   12C7 FD 3E         mov [d], bl
2312   12C9             ; stars = 0; 
2313   12C9 3B 2B 6E      mov d, _stars ; $stars
2314   12CC DA            push d
2315   12CD FD 2E 00 00   mov32 cb, $00000000
2315   12D1 00 00 
2316   12D3 E7            pop d
2317   12D4 FD 3E         mov [d], bl
2318   12D6             ; d4 = get_rand(50) - 1; 
2319   12D6 3B 42 6E      mov d, _d4 ; $d4
2320   12D9 DA            push d
2321   12DA             ; --- START FUNCTION CALL
2322   12DA FD 2E 32 00   mov32 cb, $00000032
2322   12DE 00 00 
2323   12E0 FD AB         swp b
2324   12E2 D8            push b
2325   12E3 07 FF 04      call get_rand
2326   12E6 51 02 00      add sp, 2
2327   12E9             ; --- END FUNCTION CALL
2328   12E9             ; --- START TERMS
2329   12E9 D7            push a
2330   12EA 11            mov a, b
2331   12EB FD 2E 01 00   mov32 cb, $00000001
2331   12EF 00 00 
2332   12F1 60            sub a, b
2333   12F2 27            mov b, a
2334   12F3 E4            pop a
2335   12F4             ; --- END TERMS
2336   12F4 E7            pop d
2337   12F5 FD 43         mov [d], b
2338   12F7             ; map[quad_y][quad_x] = map[quad_y][quad_x] |  0x1000		/* Set if this sector was mapped */           ; 
2339   12F7 3B 72 6D      mov d, _map_data ; $map
2340   12FA D7            push a
2341   12FB DA            push d
2342   12FC 3B 25 6E      mov d, _quad_y ; $quad_y
2343   12FF 2A            mov b, [d]
2344   1300 38 00 00      mov c, 0
2345   1303 E7            pop d
2346   1304 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2347   1308 DA            push d
2348   1309 3B 27 6E      mov d, _quad_x ; $quad_x
2349   130C 2A            mov b, [d]
2350   130D 38 00 00      mov c, 0
2351   1310 E7            pop d
2352   1311 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2353   1315 E4            pop a
2354   1316 DA            push d
2355   1317 3B 72 6D      mov d, _map_data ; $map
2356   131A D7            push a
2357   131B DA            push d
2358   131C 3B 25 6E      mov d, _quad_y ; $quad_y
2359   131F 2A            mov b, [d]
2360   1320 38 00 00      mov c, 0
2361   1323 E7            pop d
2362   1324 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2363   1328 DA            push d
2364   1329 3B 27 6E      mov d, _quad_x ; $quad_x
2365   132C 2A            mov b, [d]
2366   132D 38 00 00      mov c, 0
2367   1330 E7            pop d
2368   1331 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2369   1335 E4            pop a
2370   1336 2A            mov b, [d]
2371   1337 38 00 00      mov c, 0
2372   133A D7            push a
2373   133B 11            mov a, b
2374   133C FD 2E 00 10   mov32 cb, $00001000
2374   1340 00 00 
2375   1342 FD 70         or b, a ; |
2376   1344 E4            pop a
2377   1345 E7            pop d
2378   1346 FD 43         mov [d], b
2379   1348             ; if (quad_y >= 1 && quad_y <= 8 && quad_x >= 1 && quad_x <= 8) { 
2380   1348             _if62_cond:
2381   1348 3B 25 6E      mov d, _quad_y ; $quad_y
2382   134B 2A            mov b, [d]
2383   134C 38 00 00      mov c, 0
2384   134F             ; --- START RELATIONAL
2385   134F D7            push a
2386   1350 11            mov a, b
2387   1351 FD 2E 01 00   mov32 cb, $00000001
2387   1355 00 00 
2388   1357 B0            cmp a, b
2389   1358 FD 80         sge ; >=
2390   135A E4            pop a
2391   135B             ; --- END RELATIONAL
2392   135B             ; --- START LOGICAL AND
2393   135B D7            push a
2394   135C 11            mov a, b
2395   135D 3B 25 6E      mov d, _quad_y ; $quad_y
2396   1360 2A            mov b, [d]
2397   1361 38 00 00      mov c, 0
2398   1364             ; --- START RELATIONAL
2399   1364 D7            push a
2400   1365 11            mov a, b
2401   1366 FD 2E 08 00   mov32 cb, $00000008
2401   136A 00 00 
2402   136C B0            cmp a, b
2403   136D FD 74         sle ; <= (signed)
2404   136F E4            pop a
2405   1370             ; --- END RELATIONAL
2406   1370 FD A7         sand a, b
2407   1372 11            mov a, b
2408   1373 3B 27 6E      mov d, _quad_x ; $quad_x
2409   1376 2A            mov b, [d]
2410   1377 38 00 00      mov c, 0
2411   137A             ; --- START RELATIONAL
2412   137A D7            push a
2413   137B 11            mov a, b
2414   137C FD 2E 01 00   mov32 cb, $00000001
2414   1380 00 00 
2415   1382 B0            cmp a, b
2416   1383 FD 80         sge ; >=
2417   1385 E4            pop a
2418   1386             ; --- END RELATIONAL
2419   1386 FD A7         sand a, b
2420   1388 11            mov a, b
2421   1389 3B 27 6E      mov d, _quad_x ; $quad_x
2422   138C 2A            mov b, [d]
2423   138D 38 00 00      mov c, 0
2424   1390             ; --- START RELATIONAL
2425   1390 D7            push a
2426   1391 11            mov a, b
2427   1392 FD 2E 08 00   mov32 cb, $00000008
2427   1396 00 00 
2428   1398 B0            cmp a, b
2429   1399 FD 74         sle ; <= (signed)
2430   139B E4            pop a
2431   139C             ; --- END RELATIONAL
2432   139C FD A7         sand a, b
2433   139E E4            pop a
2434   139F             ; --- END LOGICAL AND
2435   139F C0 00 00      cmp b, 0
2436   13A2 C6 23 14      je _if62_exit
2437   13A5             _if62_TRUE:
2438   13A5             ; quadrant_name(0, quad_y, quad_x); 
2439   13A5             ; --- START FUNCTION CALL
2440   13A5 3B 27 6E      mov d, _quad_x ; $quad_x
2441   13A8 2A            mov b, [d]
2442   13A9 38 00 00      mov c, 0
2443   13AC DD            push bl
2444   13AD 3B 25 6E      mov d, _quad_y ; $quad_y
2445   13B0 2A            mov b, [d]
2446   13B1 38 00 00      mov c, 0
2447   13B4 DD            push bl
2448   13B5 FD 2E 00 00   mov32 cb, $00000000
2448   13B9 00 00 
2449   13BB DD            push bl
2450   13BC 07 83 59      call quadrant_name
2451   13BF 51 03 00      add sp, 3
2452   13C2             ; --- END FUNCTION CALL
2453   13C2             ; if (TO_FIXED(time_start) != stardate) 
2454   13C2             _if63_cond:
2455   13C2             ; --- START FUNCTION CALL
2456   13C2 3B 2C 6E      mov d, _time_start ; $time_start
2457   13C5 2A            mov b, [d]
2458   13C6 38 00 00      mov c, 0
2459   13C9 FD AB         swp b
2460   13CB D8            push b
2461   13CC 07 17 04      call TO_FIXED
2462   13CF 51 02 00      add sp, 2
2463   13D2             ; --- END FUNCTION CALL
2464   13D2             ; --- START RELATIONAL
2465   13D2 D7            push a
2466   13D3 11            mov a, b
2467   13D4 3B 48 6E      mov d, _stardate ; $stardate
2468   13D7 2A            mov b, [d]
2469   13D8 38 00 00      mov c, 0
2470   13DB B0            cmp a, b
2471   13DC FD 72         sneq ; !=
2472   13DE E4            pop a
2473   13DF             ; --- END RELATIONAL
2474   13DF C0 00 00      cmp b, 0
2475   13E2 C6 FE 13      je _if63_else
2476   13E5             _if63_TRUE:
2477   13E5             ; printf("Now entering %s quadrant...\n\n", quadname); 
2478   13E5             ; --- START FUNCTION CALL
2479   13E5 3B 8A 6E      mov d, _quadname_data ; $quadname
2480   13E8 2D            mov b, d
2481   13E9 38 00 00      mov c, 0
2482   13EC FD AB         swp b
2483   13EE D8            push b
2484   13EF 26 CA 72      mov b, _s58 ; "Now entering %s quadrant...\n\n"
2485   13F2 FD AB         swp b
2486   13F4 D8            push b
2487   13F5 07 36 60      call printf
2488   13F8 51 04 00      add sp, 4
2489   13FB             ; --- END FUNCTION CALL
2490   13FB 0A 20 14      jmp _if63_exit
2491   13FE             _if63_else:
2492   13FE             ; puts("\nYour mission begins with your starship located"); 
2493   13FE             ; --- START FUNCTION CALL
2494   13FE 26 E8 72      mov b, _s59 ; "\nYour mission begins with your starship located"
2495   1401 FD AB         swp b
2496   1403 D8            push b
2497   1404 07 47 69      call puts
2498   1407 51 02 00      add sp, 2
2499   140A             ; --- END FUNCTION CALL
2500   140A             ; printf("in the galactic quadrant %s.\n\n", quadname); 
2501   140A             ; --- START FUNCTION CALL
2502   140A 3B 8A 6E      mov d, _quadname_data ; $quadname
2503   140D 2D            mov b, d
2504   140E 38 00 00      mov c, 0
2505   1411 FD AB         swp b
2506   1413 D8            push b
2507   1414 26 18 73      mov b, _s60 ; "in the galactic quadrant %s.\n\n"
2508   1417 FD AB         swp b
2509   1419 D8            push b
2510   141A 07 36 60      call printf
2511   141D 51 04 00      add sp, 4
2512   1420             ; --- END FUNCTION CALL
2513   1420             _if63_exit:
2514   1420 0A 23 14      jmp _if62_exit
2515   1423             _if62_exit:
2516   1423             ; tmp = map[quad_y][quad_x]; 
2517   1423 FA FD FF      lea d, [bp + -3] ; $tmp
2518   1426 DA            push d
2519   1427 3B 72 6D      mov d, _map_data ; $map
2520   142A D7            push a
2521   142B DA            push d
2522   142C 3B 25 6E      mov d, _quad_y ; $quad_y
2523   142F 2A            mov b, [d]
2524   1430 38 00 00      mov c, 0
2525   1433 E7            pop d
2526   1434 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2527   1438 DA            push d
2528   1439 3B 27 6E      mov d, _quad_x ; $quad_x
2529   143C 2A            mov b, [d]
2530   143D 38 00 00      mov c, 0
2531   1440 E7            pop d
2532   1441 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2533   1445 E4            pop a
2534   1446 2A            mov b, [d]
2535   1447 38 00 00      mov c, 0
2536   144A E7            pop d
2537   144B FD 43         mov [d], b
2538   144D             ; klingons = (tmp >> 8) & 0x0F; 
2539   144D 3B 20 6E      mov d, _klingons ; $klingons
2540   1450 DA            push d
2541   1451 FA FD FF      lea d, [bp + -3] ; $tmp
2542   1454 2A            mov b, [d]
2543   1455 38 00 00      mov c, 0
2544   1458             ; --- START SHIFT
2545   1458 D7            push a
2546   1459 11            mov a, b
2547   145A FD 2E 08 00   mov32 cb, $00000008
2547   145E 00 00 
2548   1460 FD 39         mov c, b
2549   1462 A1            shr a, cl
2550   1463 27            mov b, a
2551   1464 E4            pop a
2552   1465             ; --- END SHIFT
2553   1465 D7            push a
2554   1466 11            mov a, b
2555   1467 FD 2E 0F 00   mov32 cb, $0000000f
2555   146B 00 00 
2556   146D FD 92         and b, a ; &
2557   146F E4            pop a
2558   1470 E7            pop d
2559   1471 FD 3E         mov [d], bl
2560   1473             ; starbases = (tmp >> 4) & 0x0F; 
2561   1473 3B 49 6D      mov d, _starbases ; $starbases
2562   1476 DA            push d
2563   1477 FA FD FF      lea d, [bp + -3] ; $tmp
2564   147A 2A            mov b, [d]
2565   147B 38 00 00      mov c, 0
2566   147E             ; --- START SHIFT
2567   147E D7            push a
2568   147F 11            mov a, b
2569   1480 FD 2E 04 00   mov32 cb, $00000004
2569   1484 00 00 
2570   1486 FD 39         mov c, b
2571   1488 A1            shr a, cl
2572   1489 27            mov b, a
2573   148A E4            pop a
2574   148B             ; --- END SHIFT
2575   148B D7            push a
2576   148C 11            mov a, b
2577   148D FD 2E 0F 00   mov32 cb, $0000000f
2577   1491 00 00 
2578   1493 FD 92         and b, a ; &
2579   1495 E4            pop a
2580   1496 E7            pop d
2581   1497 FD 3E         mov [d], bl
2582   1499             ; stars = tmp & 0x0F; 
2583   1499 3B 2B 6E      mov d, _stars ; $stars
2584   149C DA            push d
2585   149D FA FD FF      lea d, [bp + -3] ; $tmp
2586   14A0 2A            mov b, [d]
2587   14A1 38 00 00      mov c, 0
2588   14A4 D7            push a
2589   14A5 11            mov a, b
2590   14A6 FD 2E 0F 00   mov32 cb, $0000000f
2590   14AA 00 00 
2591   14AC FD 92         and b, a ; &
2592   14AE E4            pop a
2593   14AF E7            pop d
2594   14B0 FD 3E         mov [d], bl
2595   14B2             ; if (klingons > 0) { 
2596   14B2             _if64_cond:
2597   14B2 3B 20 6E      mov d, _klingons ; $klingons
2598   14B5 32            mov bl, [d]
2599   14B6 A7 00         mov bh, 0
2600   14B8 38 00 00      mov c, 0
2601   14BB             ; --- START RELATIONAL
2602   14BB D7            push a
2603   14BC 11            mov a, b
2604   14BD FD 2E 00 00   mov32 cb, $00000000
2604   14C1 00 00 
2605   14C3 B0            cmp a, b
2606   14C4 FD 81         sgu ; > (unsigned)
2607   14C6 E4            pop a
2608   14C7             ; --- END RELATIONAL
2609   14C7 C0 00 00      cmp b, 0
2610   14CA C6 04 15      je _if64_exit
2611   14CD             _if64_TRUE:
2612   14CD             ; printf("Combat Area  Condition Red\n"); 
2613   14CD             ; --- START FUNCTION CALL
2614   14CD 26 37 73      mov b, _s61 ; "Combat Area  Condition Red\n"
2615   14D0 FD AB         swp b
2616   14D2 D8            push b
2617   14D3 07 36 60      call printf
2618   14D6 51 02 00      add sp, 2
2619   14D9             ; --- END FUNCTION CALL
2620   14D9             ; if (shield < 200) 
2621   14D9             _if65_cond:
2622   14D9 3B 29 6E      mov d, _shield ; $shield
2623   14DC 2A            mov b, [d]
2624   14DD 38 00 00      mov c, 0
2625   14E0             ; --- START RELATIONAL
2626   14E0 D7            push a
2627   14E1 11            mov a, b
2628   14E2 FD 2E C8 00   mov32 cb, $000000c8
2628   14E6 00 00 
2629   14E8 B0            cmp a, b
2630   14E9 FD 73         slt ; < (signed)
2631   14EB E4            pop a
2632   14EC             ; --- END RELATIONAL
2633   14EC C0 00 00      cmp b, 0
2634   14EF C6 01 15      je _if65_exit
2635   14F2             _if65_TRUE:
2636   14F2             ; printf("Shields Dangerously Low\n"); 
2637   14F2             ; --- START FUNCTION CALL
2638   14F2 26 53 73      mov b, _s62 ; "Shields Dangerously Low\n"
2639   14F5 FD AB         swp b
2640   14F7 D8            push b
2641   14F8 07 36 60      call printf
2642   14FB 51 02 00      add sp, 2
2643   14FE             ; --- END FUNCTION CALL
2644   14FE 0A 01 15      jmp _if65_exit
2645   1501             _if65_exit:
2646   1501 0A 04 15      jmp _if64_exit
2647   1504             _if64_exit:
2648   1504             ; for (i = 1; i <= 3; i++) { 
2649   1504             _for66_init:
2650   1504 FA FF FF      lea d, [bp + -1] ; $i
2651   1507 DA            push d
2652   1508 FD 2E 01 00   mov32 cb, $00000001
2652   150C 00 00 
2653   150E E7            pop d
2654   150F FD 43         mov [d], b
2655   1511             _for66_cond:
2656   1511 FA FF FF      lea d, [bp + -1] ; $i
2657   1514 2A            mov b, [d]
2658   1515 38 00 00      mov c, 0
2659   1518             ; --- START RELATIONAL
2660   1518 D7            push a
2661   1519 11            mov a, b
2662   151A FD 2E 03 00   mov32 cb, $00000003
2662   151E 00 00 
2663   1520 B0            cmp a, b
2664   1521 FD 74         sle ; <= (signed)
2665   1523 E4            pop a
2666   1524             ; --- END RELATIONAL
2667   1524 C0 00 00      cmp b, 0
2668   1527 C6 85 15      je _for66_exit
2669   152A             _for66_block:
2670   152A             ; k->y = 0; 
2671   152A FA FB FF      lea d, [bp + -5] ; $k
2672   152D FD 2A         mov d, [d]
2673   152F 58 00 00      add d, 0
2674   1532 DA            push d
2675   1533 FD 2E 00 00   mov32 cb, $00000000
2675   1537 00 00 
2676   1539 E7            pop d
2677   153A FD 3E         mov [d], bl
2678   153C             ; k->x = 0; 
2679   153C FA FB FF      lea d, [bp + -5] ; $k
2680   153F FD 2A         mov d, [d]
2681   1541 58 01 00      add d, 1
2682   1544 DA            push d
2683   1545 FD 2E 00 00   mov32 cb, $00000000
2683   1549 00 00 
2684   154B E7            pop d
2685   154C FD 3E         mov [d], bl
2686   154E             ; k->energy = 0; 
2687   154E FA FB FF      lea d, [bp + -5] ; $k
2688   1551 FD 2A         mov d, [d]
2689   1553 58 02 00      add d, 2
2690   1556 DA            push d
2691   1557 FD 2E 00 00   mov32 cb, $00000000
2691   155B 00 00 
2692   155D E7            pop d
2693   155E FD 43         mov [d], b
2694   1560             ; k++; 
2695   1560 FA FB FF      lea d, [bp + -5] ; $k
2696   1563 2A            mov b, [d]
2697   1564 38 00 00      mov c, 0
2698   1567 11            mov a, b
2699   1568 FD 77         inc b
2700   156A FD 77         inc b
2701   156C FA FB FF      lea d, [bp + -5] ; $k
2702   156F FD 43         mov [d], b
2703   1571 27            mov b, a
2704   1572             _for66_update:
2705   1572 FA FF FF      lea d, [bp + -1] ; $i
2706   1575 2A            mov b, [d]
2707   1576 38 00 00      mov c, 0
2708   1579 11            mov a, b
2709   157A FD 77         inc b
2710   157C FA FF FF      lea d, [bp + -1] ; $i
2711   157F FD 43         mov [d], b
2712   1581 27            mov b, a
2713   1582 0A 11 15      jmp _for66_cond
2714   1585             _for66_exit:
2715   1585             ; memset(quad, 		0       , 64); 
2716   1585             ; --- START FUNCTION CALL
2717   1585 FD 2E 40 00   mov32 cb, $00000040
2717   1589 00 00 
2718   158B FD AB         swp b
2719   158D D8            push b
2720   158E FD 2E 00 00   mov32 cb, $00000000
2720   1592 00 00 
2721   1594 DD            push bl
2722   1595 3B 4A 6E      mov d, _quad_data ; $quad
2723   1598 2D            mov b, d
2724   1599 38 00 00      mov c, 0
2725   159C FD AB         swp b
2726   159E D8            push b
2727   159F 07 65 69      call memset
2728   15A2 51 05 00      add sp, 5
2729   15A5             ; --- END FUNCTION CALL
2730   15A5             ; place_ship(); 
2731   15A5             ; --- START FUNCTION CALL
2732   15A5 07 45 12      call place_ship
2733   15A8             ; if (klingons > 0) { 
2734   15A8             _if67_cond:
2735   15A8 3B 20 6E      mov d, _klingons ; $klingons
2736   15AB 32            mov bl, [d]
2737   15AC A7 00         mov bh, 0
2738   15AE 38 00 00      mov c, 0
2739   15B1             ; --- START RELATIONAL
2740   15B1 D7            push a
2741   15B2 11            mov a, b
2742   15B3 FD 2E 00 00   mov32 cb, $00000000
2742   15B7 00 00 
2743   15B9 B0            cmp a, b
2744   15BA FD 81         sgu ; > (unsigned)
2745   15BC E4            pop a
2746   15BD             ; --- END RELATIONAL
2747   15BD C0 00 00      cmp b, 0
2748   15C0 C6 76 16      je _if67_exit
2749   15C3             _if67_TRUE:
2750   15C3             ; k = kdata; 
2751   15C3 FA FB FF      lea d, [bp + -5] ; $k
2752   15C6 DA            push d
2753   15C7 3B 14 6E      mov d, _kdata_data ; $kdata
2754   15CA 2D            mov b, d
2755   15CB 38 00 00      mov c, 0
2756   15CE E7            pop d
2757   15CF FD 43         mov [d], b
2758   15D1             ; for (i = 0; i < klingons; i++) { 
2759   15D1             _for68_init:
2760   15D1 FA FF FF      lea d, [bp + -1] ; $i
2761   15D4 DA            push d
2762   15D5 FD 2E 00 00   mov32 cb, $00000000
2762   15D9 00 00 
2763   15DB E7            pop d
2764   15DC FD 43         mov [d], b
2765   15DE             _for68_cond:
2766   15DE FA FF FF      lea d, [bp + -1] ; $i
2767   15E1 2A            mov b, [d]
2768   15E2 38 00 00      mov c, 0
2769   15E5             ; --- START RELATIONAL
2770   15E5 D7            push a
2771   15E6 11            mov a, b
2772   15E7 3B 20 6E      mov d, _klingons ; $klingons
2773   15EA 32            mov bl, [d]
2774   15EB A7 00         mov bh, 0
2775   15ED 38 00 00      mov c, 0
2776   15F0 B0            cmp a, b
2777   15F1 FD 73         slt ; < (signed)
2778   15F3 E4            pop a
2779   15F4             ; --- END RELATIONAL
2780   15F4 C0 00 00      cmp b, 0
2781   15F7 C6 73 16      je _for68_exit
2782   15FA             _for68_block:
2783   15FA             ; find_set_empty_place(	3         , k->y, k->x); 
2784   15FA             ; --- START FUNCTION CALL
2785   15FA FA FB FF      lea d, [bp + -5] ; $k
2786   15FD FD 2A         mov d, [d]
2787   15FF 58 01 00      add d, 1
2788   1602 32            mov bl, [d]
2789   1603 A7 00         mov bh, 0
2790   1605 38 00 00      mov c, 0
2791   1608 FD AB         swp b
2792   160A D8            push b
2793   160B FA FB FF      lea d, [bp + -5] ; $k
2794   160E FD 2A         mov d, [d]
2795   1610 58 00 00      add d, 0
2796   1613 32            mov bl, [d]
2797   1614 A7 00         mov bh, 0
2798   1616 38 00 00      mov c, 0
2799   1619 FD AB         swp b
2800   161B D8            push b
2801   161C FD 2E 03 00   mov32 cb, $00000003
2801   1620 00 00 
2802   1622 DD            push bl
2803   1623 07 33 58      call find_set_empty_place
2804   1626 51 05 00      add sp, 5
2805   1629             ; --- END FUNCTION CALL
2806   1629             ; k->energy = 100 + get_rand(200); 
2807   1629 FA FB FF      lea d, [bp + -5] ; $k
2808   162C FD 2A         mov d, [d]
2809   162E 58 02 00      add d, 2
2810   1631 DA            push d
2811   1632 FD 2E 64 00   mov32 cb, $00000064
2811   1636 00 00 
2812   1638             ; --- START TERMS
2813   1638 D7            push a
2814   1639 11            mov a, b
2815   163A             ; --- START FUNCTION CALL
2816   163A FD 2E C8 00   mov32 cb, $000000c8
2816   163E 00 00 
2817   1640 FD AB         swp b
2818   1642 D8            push b
2819   1643 07 FF 04      call get_rand
2820   1646 51 02 00      add sp, 2
2821   1649             ; --- END FUNCTION CALL
2822   1649 56            add b, a
2823   164A E4            pop a
2824   164B             ; --- END TERMS
2825   164B E7            pop d
2826   164C FD 43         mov [d], b
2827   164E             ; k++; 
2828   164E FA FB FF      lea d, [bp + -5] ; $k
2829   1651 2A            mov b, [d]
2830   1652 38 00 00      mov c, 0
2831   1655 11            mov a, b
2832   1656 FD 77         inc b
2833   1658 FD 77         inc b
2834   165A FA FB FF      lea d, [bp + -5] ; $k
2835   165D FD 43         mov [d], b
2836   165F 27            mov b, a
2837   1660             _for68_update:
2838   1660 FA FF FF      lea d, [bp + -1] ; $i
2839   1663 2A            mov b, [d]
2840   1664 38 00 00      mov c, 0
2841   1667 11            mov a, b
2842   1668 FD 77         inc b
2843   166A FA FF FF      lea d, [bp + -1] ; $i
2844   166D FD 43         mov [d], b
2845   166F 27            mov b, a
2846   1670 0A DE 15      jmp _for68_cond
2847   1673             _for68_exit:
2848   1673 0A 76 16      jmp _if67_exit
2849   1676             _if67_exit:
2850   1676             ; if (starbases > 0) 
2851   1676             _if69_cond:
2852   1676 3B 49 6D      mov d, _starbases ; $starbases
2853   1679 32            mov bl, [d]
2854   167A A7 00         mov bh, 0
2855   167C 38 00 00      mov c, 0
2856   167F             ; --- START RELATIONAL
2857   167F D7            push a
2858   1680 11            mov a, b
2859   1681 FD 2E 00 00   mov32 cb, $00000000
2859   1685 00 00 
2860   1687 B0            cmp a, b
2861   1688 FD 7F         sgt ; >
2862   168A E4            pop a
2863   168B             ; --- END RELATIONAL
2864   168B C0 00 00      cmp b, 0
2865   168E C6 AF 16      je _if69_exit
2866   1691             _if69_TRUE:
2867   1691             ; find_set_empty_place(		2      , &base_y, &base_x); 
2868   1691             ; --- START FUNCTION CALL
2869   1691 3B 4B 6D      mov d, _base_x ; $base_x
2870   1694 2D            mov b, d
2871   1695 FD AB         swp b
2872   1697 D8            push b
2873   1698 3B 4A 6D      mov d, _base_y ; $base_y
2874   169B 2D            mov b, d
2875   169C FD AB         swp b
2876   169E D8            push b
2877   169F FD 2E 02 00   mov32 cb, $00000002
2877   16A3 00 00 
2878   16A5 DD            push bl
2879   16A6 07 33 58      call find_set_empty_place
2880   16A9 51 05 00      add sp, 5
2881   16AC             ; --- END FUNCTION CALL
2882   16AC 0A AF 16      jmp _if69_exit
2883   16AF             _if69_exit:
2884   16AF             ; for (i = 1; i <= stars; i++) 
2885   16AF             _for70_init:
2886   16AF FA FF FF      lea d, [bp + -1] ; $i
2887   16B2 DA            push d
2888   16B3 FD 2E 01 00   mov32 cb, $00000001
2888   16B7 00 00 
2889   16B9 E7            pop d
2890   16BA FD 43         mov [d], b
2891   16BC             _for70_cond:
2892   16BC FA FF FF      lea d, [bp + -1] ; $i
2893   16BF 2A            mov b, [d]
2894   16C0 38 00 00      mov c, 0
2895   16C3             ; --- START RELATIONAL
2896   16C3 D7            push a
2897   16C4 11            mov a, b
2898   16C5 3B 2B 6E      mov d, _stars ; $stars
2899   16C8 32            mov bl, [d]
2900   16C9 A7 00         mov bh, 0
2901   16CB 38 00 00      mov c, 0
2902   16CE B0            cmp a, b
2903   16CF FD 74         sle ; <= (signed)
2904   16D1 E4            pop a
2905   16D2             ; --- END RELATIONAL
2906   16D2 C0 00 00      cmp b, 0
2907   16D5 C6 0A 17      je _for70_exit
2908   16D8             _for70_block:
2909   16D8             ; find_set_empty_place(		1      ,  0    ,  0    ); 
2910   16D8             ; --- START FUNCTION CALL
2911   16D8 FD 2E 00 00   mov32 cb, $00000000
2911   16DC 00 00 
2912   16DE FD AB         swp b
2913   16E0 D8            push b
2914   16E1 FD 2E 00 00   mov32 cb, $00000000
2914   16E5 00 00 
2915   16E7 FD AB         swp b
2916   16E9 D8            push b
2917   16EA FD 2E 01 00   mov32 cb, $00000001
2917   16EE 00 00 
2918   16F0 DD            push bl
2919   16F1 07 33 58      call find_set_empty_place
2920   16F4 51 05 00      add sp, 5
2921   16F7             ; --- END FUNCTION CALL
2922   16F7             _for70_update:
2923   16F7 FA FF FF      lea d, [bp + -1] ; $i
2924   16FA 2A            mov b, [d]
2925   16FB 38 00 00      mov c, 0
2926   16FE 11            mov a, b
2927   16FF FD 77         inc b
2928   1701 FA FF FF      lea d, [bp + -1] ; $i
2929   1704 FD 43         mov [d], b
2930   1706 27            mov b, a
2931   1707 0A BC 16      jmp _for70_cond
2932   170A             _for70_exit:
2933   170A F9            leave
2934   170B 09            ret
2935   170C             
2936   170C             course_control:
2937   170C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2938   170F             ; int i; 
2939   170F 52 02 00      sub sp, 2
2940   1712             ; int        c1; 
2941   1712 52 02 00      sub sp, 2
2942   1715             ; int        warp; 
2943   1715 52 02 00      sub sp, 2
2944   1718             ; unsigned int         n; 
2945   1718 52 02 00      sub sp, 2
2946   171B             ; int c2, c3, c4; 
2947   171B 52 02 00      sub sp, 2
2948   171E 52 02 00      sub sp, 2
2949   1721 52 02 00      sub sp, 2
2950   1724             ; int        z1, z2; 
2951   1724 52 02 00      sub sp, 2
2952   1727 52 02 00      sub sp, 2
2953   172A             ; int        x1, x2; 
2954   172A 52 02 00      sub sp, 2
2955   172D 52 02 00      sub sp, 2
2956   1730             ; int        x, y; 
2957   1730 52 02 00      sub sp, 2
2958   1733 52 02 00      sub sp, 2
2959   1736             ; unsigned char        outside = 0;		/* Outside galaxy flag */ 
2960   1736 52 01 00      sub sp, 1
2961   1739             ; --- START LOCAL VAR INITIALIZATION
2962   1739 FA E6 FF      lea d, [bp + -26] ; $outside
2963   173C DA            push d
2964   173D FD 2E 00 00   mov32 cb, $00000000
2964   1741 00 00 
2965   1743 E7            pop d
2966   1744 FD 43         mov [d], b
2967   1746             ; --- END LOCAL VAR INITIALIZATION
2968   1746             ; unsigned char        quad_y_old; 
2969   1746 52 01 00      sub sp, 1
2970   1749             ; unsigned char        quad_x_old; 
2971   1749 52 01 00      sub sp, 1
2972   174C             ; puts("Course (0-9): " ); 
2973   174C             ; --- START FUNCTION CALL
2974   174C 26 6C 73      mov b, _s63 ; "Course (0-9): "
2975   174F FD AB         swp b
2976   1751 D8            push b
2977   1752 07 47 69      call puts
2978   1755 51 02 00      add sp, 2
2979   1758             ; --- END FUNCTION CALL
2980   1758             ; c1 = input_f00(); 
2981   1758 FA FD FF      lea d, [bp + -3] ; $c1
2982   175B DA            push d
2983   175C             ; --- START FUNCTION CALL
2984   175C 07 67 06      call input_f00
2985   175F E7            pop d
2986   1760 FD 43         mov [d], b
2987   1762             ; if (c1 == 900) 
2988   1762             _if71_cond:
2989   1762 FA FD FF      lea d, [bp + -3] ; $c1
2990   1765 2A            mov b, [d]
2991   1766 38 00 00      mov c, 0
2992   1769             ; --- START RELATIONAL
2993   1769 D7            push a
2994   176A 11            mov a, b
2995   176B FD 2E 84 03   mov32 cb, $00000384
2995   176F 00 00 
2996   1771 B0            cmp a, b
2997   1772 FD 71         seq ; ==
2998   1774 E4            pop a
2999   1775             ; --- END RELATIONAL
3000   1775 C0 00 00      cmp b, 0
3001   1778 C6 8B 17      je _if71_exit
3002   177B             _if71_TRUE:
3003   177B             ; c1 = 100; 
3004   177B FA FD FF      lea d, [bp + -3] ; $c1
3005   177E DA            push d
3006   177F FD 2E 64 00   mov32 cb, $00000064
3006   1783 00 00 
3007   1785 E7            pop d
3008   1786 FD 43         mov [d], b
3009   1788 0A 8B 17      jmp _if71_exit
3010   178B             _if71_exit:
3011   178B             ; if (c1 < 0 || c1 > 900) { 
3012   178B             _if72_cond:
3013   178B FA FD FF      lea d, [bp + -3] ; $c1
3014   178E 2A            mov b, [d]
3015   178F 38 00 00      mov c, 0
3016   1792             ; --- START RELATIONAL
3017   1792 D7            push a
3018   1793 11            mov a, b
3019   1794 FD 2E 00 00   mov32 cb, $00000000
3019   1798 00 00 
3020   179A B0            cmp a, b
3021   179B FD 73         slt ; < (signed)
3022   179D E4            pop a
3023   179E             ; --- END RELATIONAL
3024   179E             ; --- START LOGICAL OR
3025   179E D7            push a
3026   179F 11            mov a, b
3027   17A0 FA FD FF      lea d, [bp + -3] ; $c1
3028   17A3 2A            mov b, [d]
3029   17A4 38 00 00      mov c, 0
3030   17A7             ; --- START RELATIONAL
3031   17A7 D7            push a
3032   17A8 11            mov a, b
3033   17A9 FD 2E 84 03   mov32 cb, $00000384
3033   17AD 00 00 
3034   17AF B0            cmp a, b
3035   17B0 FD 7F         sgt ; >
3036   17B2 E4            pop a
3037   17B3             ; --- END RELATIONAL
3038   17B3 FD A8         sor a, b ; ||
3039   17B5 E4            pop a
3040   17B6             ; --- END LOGICAL OR
3041   17B6 C0 00 00      cmp b, 0
3042   17B9 C6 D7 17      je _if72_exit
3043   17BC             _if72_TRUE:
3044   17BC             ; printf("Lt. Sulu%s", inc_1); 
3045   17BC             ; --- START FUNCTION CALL
3046   17BC 3B BE 6E      mov d, _inc_1 ; $inc_1
3047   17BF 2A            mov b, [d]
3048   17C0 38 00 00      mov c, 0
3049   17C3 FD AB         swp b
3050   17C5 D8            push b
3051   17C6 26 7B 73      mov b, _s64 ; "Lt. Sulu%s"
3052   17C9 FD AB         swp b
3053   17CB D8            push b
3054   17CC 07 36 60      call printf
3055   17CF 51 04 00      add sp, 4
3056   17D2             ; --- END FUNCTION CALL
3057   17D2             ; return; 
3058   17D2 F9            leave
3059   17D3 09            ret
3060   17D4 0A D7 17      jmp _if72_exit
3061   17D7             _if72_exit:
3062   17D7             ; if (damage[1] < 0) 
3063   17D7             _if73_cond:
3064   17D7 3B 30 6E      mov d, _damage_data ; $damage
3065   17DA D7            push a
3066   17DB DA            push d
3067   17DC FD 2E 01 00   mov32 cb, $00000001
3067   17E0 00 00 
3068   17E2 E7            pop d
3069   17E3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3070   17E7 E4            pop a
3071   17E8 2A            mov b, [d]
3072   17E9 38 00 00      mov c, 0
3073   17EC             ; --- START RELATIONAL
3074   17EC D7            push a
3075   17ED 11            mov a, b
3076   17EE FD 2E 00 00   mov32 cb, $00000000
3076   17F2 00 00 
3077   17F4 B0            cmp a, b
3078   17F5 FD 73         slt ; < (signed)
3079   17F7 E4            pop a
3080   17F8             ; --- END RELATIONAL
3081   17F8 C0 00 00      cmp b, 0
3082   17FB C6 17 18      je _if73_exit
3083   17FE             _if73_TRUE:
3084   17FE             ; strcpy(warpmax, "0.2"); 
3085   17FE             ; --- START FUNCTION CALL
3086   17FE 26 86 73      mov b, _s65 ; "0.2"
3087   1801 FD AB         swp b
3088   1803 D8            push b
3089   1804 3B 4D 6F      mov d, _warpmax_data ; $warpmax
3090   1807 2D            mov b, d
3091   1808 38 00 00      mov c, 0
3092   180B FD AB         swp b
3093   180D D8            push b
3094   180E 07 7E 5E      call strcpy
3095   1811 51 04 00      add sp, 4
3096   1814             ; --- END FUNCTION CALL
3097   1814 0A 17 18      jmp _if73_exit
3098   1817             _if73_exit:
3099   1817             ; printf("Warp Factor (0-%s): ", warpmax); 
3100   1817             ; --- START FUNCTION CALL
3101   1817 3B 4D 6F      mov d, _warpmax_data ; $warpmax
3102   181A 2D            mov b, d
3103   181B 38 00 00      mov c, 0
3104   181E FD AB         swp b
3105   1820 D8            push b
3106   1821 26 8A 73      mov b, _s66 ; "Warp Factor (0-%s): "
3107   1824 FD AB         swp b
3108   1826 D8            push b
3109   1827 07 36 60      call printf
3110   182A 51 04 00      add sp, 4
3111   182D             ; --- END FUNCTION CALL
3112   182D             ; warp = input_f00(); 
3113   182D FA FB FF      lea d, [bp + -5] ; $warp
3114   1830 DA            push d
3115   1831             ; --- START FUNCTION CALL
3116   1831 07 67 06      call input_f00
3117   1834 E7            pop d
3118   1835 FD 43         mov [d], b
3119   1837             ; if (damage[1] < 0 && warp > 20) { 
3120   1837             _if74_cond:
3121   1837 3B 30 6E      mov d, _damage_data ; $damage
3122   183A D7            push a
3123   183B DA            push d
3124   183C FD 2E 01 00   mov32 cb, $00000001
3124   1840 00 00 
3125   1842 E7            pop d
3126   1843 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3127   1847 E4            pop a
3128   1848 2A            mov b, [d]
3129   1849 38 00 00      mov c, 0
3130   184C             ; --- START RELATIONAL
3131   184C D7            push a
3132   184D 11            mov a, b
3133   184E FD 2E 00 00   mov32 cb, $00000000
3133   1852 00 00 
3134   1854 B0            cmp a, b
3135   1855 FD 73         slt ; < (signed)
3136   1857 E4            pop a
3137   1858             ; --- END RELATIONAL
3138   1858             ; --- START LOGICAL AND
3139   1858 D7            push a
3140   1859 11            mov a, b
3141   185A FA FB FF      lea d, [bp + -5] ; $warp
3142   185D 2A            mov b, [d]
3143   185E 38 00 00      mov c, 0
3144   1861             ; --- START RELATIONAL
3145   1861 D7            push a
3146   1862 11            mov a, b
3147   1863 FD 2E 14 00   mov32 cb, $00000014
3147   1867 00 00 
3148   1869 B0            cmp a, b
3149   186A FD 7F         sgt ; >
3150   186C E4            pop a
3151   186D             ; --- END RELATIONAL
3152   186D FD A7         sand a, b
3153   186F E4            pop a
3154   1870             ; --- END LOGICAL AND
3155   1870 C0 00 00      cmp b, 0
3156   1873 C6 87 18      je _if74_exit
3157   1876             _if74_TRUE:
3158   1876             ; printf("Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"); 
3159   1876             ; --- START FUNCTION CALL
3160   1876 26 9F 73      mov b, _s67 ; "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"
3161   1879 FD AB         swp b
3162   187B D8            push b
3163   187C 07 36 60      call printf
3164   187F 51 02 00      add sp, 2
3165   1882             ; --- END FUNCTION CALL
3166   1882             ; return; 
3167   1882 F9            leave
3168   1883 09            ret
3169   1884 0A 87 18      jmp _if74_exit
3170   1887             _if74_exit:
3171   1887             ; if (warp <= 0) 
3172   1887             _if75_cond:
3173   1887 FA FB FF      lea d, [bp + -5] ; $warp
3174   188A 2A            mov b, [d]
3175   188B 38 00 00      mov c, 0
3176   188E             ; --- START RELATIONAL
3177   188E D7            push a
3178   188F 11            mov a, b
3179   1890 FD 2E 00 00   mov32 cb, $00000000
3179   1894 00 00 
3180   1896 B0            cmp a, b
3181   1897 FD 74         sle ; <= (signed)
3182   1899 E4            pop a
3183   189A             ; --- END RELATIONAL
3184   189A C0 00 00      cmp b, 0
3185   189D C6 A5 18      je _if75_exit
3186   18A0             _if75_TRUE:
3187   18A0             ; return; 
3188   18A0 F9            leave
3189   18A1 09            ret
3190   18A2 0A A5 18      jmp _if75_exit
3191   18A5             _if75_exit:
3192   18A5             ; if (warp > 800) { 
3193   18A5             _if76_cond:
3194   18A5 FA FB FF      lea d, [bp + -5] ; $warp
3195   18A8 2A            mov b, [d]
3196   18A9 38 00 00      mov c, 0
3197   18AC             ; --- START RELATIONAL
3198   18AC D7            push a
3199   18AD 11            mov a, b
3200   18AE FD 2E 20 03   mov32 cb, $00000320
3200   18B2 00 00 
3201   18B4 B0            cmp a, b
3202   18B5 FD 7F         sgt ; >
3203   18B7 E4            pop a
3204   18B8             ; --- END RELATIONAL
3205   18B8 C0 00 00      cmp b, 0
3206   18BB C6 E2 18      je _if76_exit
3207   18BE             _if76_TRUE:
3208   18BE             ; printf("Chief Engineer Scott reports:\n  The engines won't take warp %s!\n\n", print100(warp)); 
3209   18BE             ; --- START FUNCTION CALL
3210   18BE             ; --- START FUNCTION CALL
3211   18BE FA FB FF      lea d, [bp + -5] ; $warp
3212   18C1 2A            mov b, [d]
3213   18C2 38 00 00      mov c, 0
3214   18C5 FD AB         swp b
3215   18C7 D8            push b
3216   18C8 07 07 09      call print100
3217   18CB 51 02 00      add sp, 2
3218   18CE             ; --- END FUNCTION CALL
3219   18CE FD AB         swp b
3220   18D0 D8            push b
3221   18D1 26 D5 73      mov b, _s68 ; "Chief Engineer Scott reports:\n  The engines won't take warp %s!\n\n"
3222   18D4 FD AB         swp b
3223   18D6 D8            push b
3224   18D7 07 36 60      call printf
3225   18DA 51 04 00      add sp, 4
3226   18DD             ; --- END FUNCTION CALL
3227   18DD             ; return; 
3228   18DD F9            leave
3229   18DE 09            ret
3230   18DF 0A E2 18      jmp _if76_exit
3231   18E2             _if76_exit:
3232   18E2             ; n = warp * 8; 
3233   18E2 FA F9 FF      lea d, [bp + -7] ; $n
3234   18E5 DA            push d
3235   18E6 FA FB FF      lea d, [bp + -5] ; $warp
3236   18E9 2A            mov b, [d]
3237   18EA 38 00 00      mov c, 0
3238   18ED             ; --- START FACTORS
3239   18ED D7            push a
3240   18EE FD D8         push g
3241   18F0 11            mov a, b
3242   18F1 FD 7A         mov g, c
3243   18F3 FD 2E 08 00   mov32 cb, $00000008
3243   18F7 00 00 
3244   18F9 D7            push a     ; save left operand
3245   18FA 8E            xor a, b   ; xor sign bits
3246   18FB FD AA         swp a      ; swap bytes
3247   18FD 83            mov cl, al ; save result of xor into 'dl'
3248   18FE E4            pop a      ; restore left side operator
3249   18FF DF            push cl    ; save result of xor above
3250   1900 FD AA         swp a  
3251   1902 93 80         test al, $80  
3252   1904 FD AA         swp a  
3253   1906 C6 0B 19      jz skip_invert_a_78  
3254   1909 FD 95         neg a 
3255   190B             skip_invert_a_78:   
3256   190B FD AB         swp b
3257   190D FD 93 80      test bl, $80  
3258   1910 FD AB         swp b
3259   1912 C6 17 19      jz skip_invert_b_78  
3260   1915 FD 97         neg b 
3261   1917             skip_invert_b_78:   
3262   1917 AC            mul a, b ; *
3263   1918 FD 78         mov g, a
3264   191A 11            mov a, b
3265   191B EA            pop bl
3266   191C FD 93 80      test bl, $80
3267   191F C6 2C 19      jz _same_signs_78
3268   1922 2F            mov bl, al
3269   1923 95            not a
3270   1924 FD 97         neg b
3271   1926 5B 00 00      adc a, 0
3272   1929 FD 78         mov g, a
3273   192B 11            mov a, b
3274   192C             _same_signs_78:
3275   192C FD 38         mov c, g
3276   192E 27            mov b, a
3277   192F FD F1         pop g
3278   1931 E4            pop a
3279   1932             ; --- END FACTORS
3280   1932 E7            pop d
3281   1933 FD 43         mov [d], b
3282   1935             ; n = cint100(n);	 
3283   1935 FA F9 FF      lea d, [bp + -7] ; $n
3284   1938 DA            push d
3285   1939             ; --- START FUNCTION CALL
3286   1939 FA F9 FF      lea d, [bp + -7] ; $n
3287   193C 2A            mov b, [d]
3288   193D 38 00 00      mov c, 0
3289   1940 FD AB         swp b
3290   1942 D8            push b
3291   1943 07 AB 5D      call cint100
3292   1946 51 02 00      add sp, 2
3293   1949             ; --- END FUNCTION CALL
3294   1949 E7            pop d
3295   194A FD 43         mov [d], b
3296   194C             ; if (energy - n < 0) { 
3297   194C             _if79_cond:
3298   194C 3B 6E 6D      mov d, _energy ; $energy
3299   194F 2A            mov b, [d]
3300   1950 38 00 00      mov c, 0
3301   1953             ; --- START TERMS
3302   1953 D7            push a
3303   1954 11            mov a, b
3304   1955 FA F9 FF      lea d, [bp + -7] ; $n
3305   1958 2A            mov b, [d]
3306   1959 38 00 00      mov c, 0
3307   195C 60            sub a, b
3308   195D 27            mov b, a
3309   195E E4            pop a
3310   195F             ; --- END TERMS
3311   195F             ; --- START RELATIONAL
3312   195F D7            push a
3313   1960 11            mov a, b
3314   1961 FD 2E 00 00   mov32 cb, $00000000
3314   1965 00 00 
3315   1967 B0            cmp a, b
3316   1968 FD 75         slu ; < (unsigned)
3317   196A E4            pop a
3318   196B             ; --- END RELATIONAL
3319   196B C0 00 00      cmp b, 0
3320   196E C6 EE 19      je _if79_exit
3321   1971             _if79_TRUE:
3322   1971             ; printf("Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", print100(warp)); 
3323   1971             ; --- START FUNCTION CALL
3324   1971             ; --- START FUNCTION CALL
3325   1971 FA FB FF      lea d, [bp + -5] ; $warp
3326   1974 2A            mov b, [d]
3327   1975 38 00 00      mov c, 0
3328   1978 FD AB         swp b
3329   197A D8            push b
3330   197B 07 07 09      call print100
3331   197E 51 02 00      add sp, 2
3332   1981             ; --- END FUNCTION CALL
3333   1981 FD AB         swp b
3334   1983 D8            push b
3335   1984 26 16 74      mov b, _s69 ; "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n"
3336   1987 FD AB         swp b
3337   1989 D8            push b
3338   198A 07 36 60      call printf
3339   198D 51 04 00      add sp, 4
3340   1990             ; --- END FUNCTION CALL
3341   1990             ; if (shield >= n && damage[7] >= 0) { 
3342   1990             _if80_cond:
3343   1990 3B 29 6E      mov d, _shield ; $shield
3344   1993 2A            mov b, [d]
3345   1994 38 00 00      mov c, 0
3346   1997             ; --- START RELATIONAL
3347   1997 D7            push a
3348   1998 11            mov a, b
3349   1999 FA F9 FF      lea d, [bp + -7] ; $n
3350   199C 2A            mov b, [d]
3351   199D 38 00 00      mov c, 0
3352   19A0 B0            cmp a, b
3353   19A1 FD 80         sge ; >=
3354   19A3 E4            pop a
3355   19A4             ; --- END RELATIONAL
3356   19A4             ; --- START LOGICAL AND
3357   19A4 D7            push a
3358   19A5 11            mov a, b
3359   19A6 3B 30 6E      mov d, _damage_data ; $damage
3360   19A9 D7            push a
3361   19AA DA            push d
3362   19AB FD 2E 07 00   mov32 cb, $00000007
3362   19AF 00 00 
3363   19B1 E7            pop d
3364   19B2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3365   19B6 E4            pop a
3366   19B7 2A            mov b, [d]
3367   19B8 38 00 00      mov c, 0
3368   19BB             ; --- START RELATIONAL
3369   19BB D7            push a
3370   19BC 11            mov a, b
3371   19BD FD 2E 00 00   mov32 cb, $00000000
3371   19C1 00 00 
3372   19C3 B0            cmp a, b
3373   19C4 FD 80         sge ; >=
3374   19C6 E4            pop a
3375   19C7             ; --- END RELATIONAL
3376   19C7 FD A7         sand a, b
3377   19C9 E4            pop a
3378   19CA             ; --- END LOGICAL AND
3379   19CA C0 00 00      cmp b, 0
3380   19CD C6 E9 19      je _if80_exit
3381   19D0             _if80_TRUE:
3382   19D0             ; printf("Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", shield); 
3383   19D0             ; --- START FUNCTION CALL
3384   19D0 3B 29 6E      mov d, _shield ; $shield
3385   19D3 2A            mov b, [d]
3386   19D4 38 00 00      mov c, 0
3387   19D7 FD AB         swp b
3388   19D9 D8            push b
3389   19DA 26 69 74      mov b, _s70 ; "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n"
3390   19DD FD AB         swp b
3391   19DF D8            push b
3392   19E0 07 36 60      call printf
3393   19E3 51 04 00      add sp, 4
3394   19E6             ; --- END FUNCTION CALL
3395   19E6 0A E9 19      jmp _if80_exit
3396   19E9             _if80_exit:
3397   19E9             ; return; 
3398   19E9 F9            leave
3399   19EA 09            ret
3400   19EB 0A EE 19      jmp _if79_exit
3401   19EE             _if79_exit:
3402   19EE             ; klingons_move(); 
3403   19EE             ; --- START FUNCTION CALL
3404   19EE 07 0C 50      call klingons_move
3405   19F1             ; repair_damage(warp); 
3406   19F1             ; --- START FUNCTION CALL
3407   19F1 FA FB FF      lea d, [bp + -5] ; $warp
3408   19F4 2A            mov b, [d]
3409   19F5 38 00 00      mov c, 0
3410   19F8 FD AB         swp b
3411   19FA D8            push b
3412   19FB 07 ED 54      call repair_damage
3413   19FE 51 02 00      add sp, 2
3414   1A01             ; --- END FUNCTION CALL
3415   1A01             ; z1 = FROM_FIXED00(ship_y); 
3416   1A01 FA F1 FF      lea d, [bp + -15] ; $z1
3417   1A04 DA            push d
3418   1A05             ; --- START FUNCTION CALL
3419   1A05 3B 44 6E      mov d, _ship_y ; $ship_y
3420   1A08 2A            mov b, [d]
3421   1A09 38 00 00      mov c, 0
3422   1A0C FD AB         swp b
3423   1A0E D8            push b
3424   1A0F 07 DC 04      call FROM_FIXED00
3425   1A12 51 02 00      add sp, 2
3426   1A15             ; --- END FUNCTION CALL
3427   1A15 E7            pop d
3428   1A16 FD 43         mov [d], b
3429   1A18             ; z2 = FROM_FIXED00(ship_x); 
3430   1A18 FA EF FF      lea d, [bp + -17] ; $z2
3431   1A1B DA            push d
3432   1A1C             ; --- START FUNCTION CALL
3433   1A1C 3B 46 6E      mov d, _ship_x ; $ship_x
3434   1A1F 2A            mov b, [d]
3435   1A20 38 00 00      mov c, 0
3436   1A23 FD AB         swp b
3437   1A25 D8            push b
3438   1A26 07 DC 04      call FROM_FIXED00
3439   1A29 51 02 00      add sp, 2
3440   1A2C             ; --- END FUNCTION CALL
3441   1A2C E7            pop d
3442   1A2D FD 43         mov [d], b
3443   1A2F             ; quad[z1+-1][z2+-1] = 		0       ; 
3444   1A2F 3B 4A 6E      mov d, _quad_data ; $quad
3445   1A32 D7            push a
3446   1A33 DA            push d
3447   1A34 FA F1 FF      lea d, [bp + -15] ; $z1
3448   1A37 2A            mov b, [d]
3449   1A38 38 00 00      mov c, 0
3450   1A3B             ; --- START TERMS
3451   1A3B D7            push a
3452   1A3C 11            mov a, b
3453   1A3D FD 2E FF FF   mov32 cb, $ffffffff
3453   1A41 FF FF 
3454   1A43 56            add b, a
3455   1A44 E4            pop a
3456   1A45             ; --- END TERMS
3457   1A45 E7            pop d
3458   1A46 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
3459   1A4A DA            push d
3460   1A4B FA EF FF      lea d, [bp + -17] ; $z2
3461   1A4E 2A            mov b, [d]
3462   1A4F 38 00 00      mov c, 0
3463   1A52             ; --- START TERMS
3464   1A52 D7            push a
3465   1A53 11            mov a, b
3466   1A54 FD 2E FF FF   mov32 cb, $ffffffff
3466   1A58 FF FF 
3467   1A5A 56            add b, a
3468   1A5B E4            pop a
3469   1A5C             ; --- END TERMS
3470   1A5C E7            pop d
3471   1A5D 5A            add d, b
3472   1A5E E4            pop a
3473   1A5F DA            push d
3474   1A60 FD 2E 00 00   mov32 cb, $00000000
3474   1A64 00 00 
3475   1A66 E7            pop d
3476   1A67 FD 3E         mov [d], bl
3477   1A69             ; c2 = FROM_FIXED00(c1);	/* Integer part */ 
3478   1A69 FA F7 FF      lea d, [bp + -9] ; $c2
3479   1A6C DA            push d
3480   1A6D             ; --- START FUNCTION CALL
3481   1A6D FA FD FF      lea d, [bp + -3] ; $c1
3482   1A70 2A            mov b, [d]
3483   1A71 38 00 00      mov c, 0
3484   1A74 FD AB         swp b
3485   1A76 D8            push b
3486   1A77 07 DC 04      call FROM_FIXED00
3487   1A7A 51 02 00      add sp, 2
3488   1A7D             ; --- END FUNCTION CALL
3489   1A7D E7            pop d
3490   1A7E FD 43         mov [d], b
3491   1A80             ; c3 = c2 + 1;		/* Next integer part */ 
3492   1A80 FA F5 FF      lea d, [bp + -11] ; $c3
3493   1A83 DA            push d
3494   1A84 FA F7 FF      lea d, [bp + -9] ; $c2
3495   1A87 2A            mov b, [d]
3496   1A88 38 00 00      mov c, 0
3497   1A8B             ; --- START TERMS
3498   1A8B D7            push a
3499   1A8C 11            mov a, b
3500   1A8D FD 2E 01 00   mov32 cb, $00000001
3500   1A91 00 00 
3501   1A93 56            add b, a
3502   1A94 E4            pop a
3503   1A95             ; --- END TERMS
3504   1A95 E7            pop d
3505   1A96 FD 43         mov [d], b
3506   1A98             ; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
3507   1A98 FA F3 FF      lea d, [bp + -13] ; $c4
3508   1A9B DA            push d
3509   1A9C FA FD FF      lea d, [bp + -3] ; $c1
3510   1A9F 2A            mov b, [d]
3511   1AA0 38 00 00      mov c, 0
3512   1AA3             ; --- START TERMS
3513   1AA3 D7            push a
3514   1AA4 11            mov a, b
3515   1AA5             ; --- START FUNCTION CALL
3516   1AA5 FA F7 FF      lea d, [bp + -9] ; $c2
3517   1AA8 2A            mov b, [d]
3518   1AA9 38 00 00      mov c, 0
3519   1AAC FD AB         swp b
3520   1AAE D8            push b
3521   1AAF 07 8B 04      call TO_FIXED00
3522   1AB2 51 02 00      add sp, 2
3523   1AB5             ; --- END FUNCTION CALL
3524   1AB5 60            sub a, b
3525   1AB6 27            mov b, a
3526   1AB7 E4            pop a
3527   1AB8             ; --- END TERMS
3528   1AB8 E7            pop d
3529   1AB9 FD 43         mov [d], b
3530   1ABB             ; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
3531   1ABB FA ED FF      lea d, [bp + -19] ; $x1
3532   1ABE DA            push d
3533   1ABF FD 2E 64 00   mov32 cb, $00000064
3533   1AC3 00 00 
3534   1AC5             ; --- START FACTORS
3535   1AC5 D7            push a
3536   1AC6 FD D8         push g
3537   1AC8 11            mov a, b
3538   1AC9 FD 7A         mov g, c
3539   1ACB 3B 4D 6D      mov d, _c_data ; $c
3540   1ACE D7            push a
3541   1ACF DA            push d
3542   1AD0 FD 2E 01 00   mov32 cb, $00000001
3542   1AD4 00 00 
3543   1AD6 E7            pop d
3544   1AD7 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3545   1ADB DA            push d
3546   1ADC FA F7 FF      lea d, [bp + -9] ; $c2
3547   1ADF 2A            mov b, [d]
3548   1AE0 38 00 00      mov c, 0
3549   1AE3 E7            pop d
3550   1AE4 5A            add d, b
3551   1AE5 E4            pop a
3552   1AE6 32            mov bl, [d]
3553   1AE7 A7 00         mov bh, 0
3554   1AE9 38 00 00      mov c, 0
3555   1AEC D7            push a     ; save left operand
3556   1AED 8E            xor a, b   ; xor sign bits
3557   1AEE FD AA         swp a      ; swap bytes
3558   1AF0 83            mov cl, al ; save result of xor into 'dl'
3559   1AF1 E4            pop a      ; restore left side operator
3560   1AF2 DF            push cl    ; save result of xor above
3561   1AF3 FD AA         swp a  
3562   1AF5 93 80         test al, $80  
3563   1AF7 FD AA         swp a  
3564   1AF9 C6 FE 1A      jz skip_invert_a_83  
3565   1AFC FD 95         neg a 
3566   1AFE             skip_invert_a_83:   
3567   1AFE FD AB         swp b
3568   1B00 FD 93 80      test bl, $80  
3569   1B03 FD AB         swp b
3570   1B05 C6 0A 1B      jz skip_invert_b_83  
3571   1B08 FD 97         neg b 
3572   1B0A             skip_invert_b_83:   
3573   1B0A AC            mul a, b ; *
3574   1B0B FD 78         mov g, a
3575   1B0D 11            mov a, b
3576   1B0E EA            pop bl
3577   1B0F FD 93 80      test bl, $80
3578   1B12 C6 1F 1B      jz _same_signs_83
3579   1B15 2F            mov bl, al
3580   1B16 95            not a
3581   1B17 FD 97         neg b
3582   1B19 5B 00 00      adc a, 0
3583   1B1C FD 78         mov g, a
3584   1B1E 11            mov a, b
3585   1B1F             _same_signs_83:
3586   1B1F FD 38         mov c, g
3587   1B21 27            mov b, a
3588   1B22 FD F1         pop g
3589   1B24 E4            pop a
3590   1B25             ; --- END FACTORS
3591   1B25             ; --- START TERMS
3592   1B25 D7            push a
3593   1B26 FD D8         push g
3594   1B28 11            mov a, b
3595   1B29 FD 7A         mov g, c
3596   1B2B 3B 4D 6D      mov d, _c_data ; $c
3597   1B2E D7            push a
3598   1B2F DA            push d
3599   1B30 FD 2E 01 00   mov32 cb, $00000001
3599   1B34 00 00 
3600   1B36 E7            pop d
3601   1B37 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3602   1B3B DA            push d
3603   1B3C FA F5 FF      lea d, [bp + -11] ; $c3
3604   1B3F 2A            mov b, [d]
3605   1B40 38 00 00      mov c, 0
3606   1B43 E7            pop d
3607   1B44 5A            add d, b
3608   1B45 E4            pop a
3609   1B46 32            mov bl, [d]
3610   1B47 A7 00         mov bh, 0
3611   1B49 38 00 00      mov c, 0
3612   1B4C             ; --- START TERMS
3613   1B4C D7            push a
3614   1B4D 11            mov a, b
3615   1B4E 3B 4D 6D      mov d, _c_data ; $c
3616   1B51 D7            push a
3617   1B52 DA            push d
3618   1B53 FD 2E 01 00   mov32 cb, $00000001
3618   1B57 00 00 
3619   1B59 E7            pop d
3620   1B5A FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3621   1B5E DA            push d
3622   1B5F FA F7 FF      lea d, [bp + -9] ; $c2
3623   1B62 2A            mov b, [d]
3624   1B63 38 00 00      mov c, 0
3625   1B66 E7            pop d
3626   1B67 5A            add d, b
3627   1B68 E4            pop a
3628   1B69 32            mov bl, [d]
3629   1B6A A7 00         mov bh, 0
3630   1B6C 38 00 00      mov c, 0
3631   1B6F 60            sub a, b
3632   1B70 27            mov b, a
3633   1B71 E4            pop a
3634   1B72             ; --- END TERMS
3635   1B72             ; --- START FACTORS
3636   1B72 D7            push a
3637   1B73 FD D8         push g
3638   1B75 11            mov a, b
3639   1B76 FD 7A         mov g, c
3640   1B78 FA F3 FF      lea d, [bp + -13] ; $c4
3641   1B7B 2A            mov b, [d]
3642   1B7C 38 00 00      mov c, 0
3643   1B7F D7            push a     ; save left operand
3644   1B80 8E            xor a, b   ; xor sign bits
3645   1B81 FD AA         swp a      ; swap bytes
3646   1B83 83            mov cl, al ; save result of xor into 'dl'
3647   1B84 E4            pop a      ; restore left side operator
3648   1B85 DF            push cl    ; save result of xor above
3649   1B86 FD AA         swp a  
3650   1B88 93 80         test al, $80  
3651   1B8A FD AA         swp a  
3652   1B8C C6 91 1B      jz skip_invert_a_84  
3653   1B8F FD 95         neg a 
3654   1B91             skip_invert_a_84:   
3655   1B91 FD AB         swp b
3656   1B93 FD 93 80      test bl, $80  
3657   1B96 FD AB         swp b
3658   1B98 C6 9D 1B      jz skip_invert_b_84  
3659   1B9B FD 97         neg b 
3660   1B9D             skip_invert_b_84:   
3661   1B9D AC            mul a, b ; *
3662   1B9E FD 78         mov g, a
3663   1BA0 11            mov a, b
3664   1BA1 EA            pop bl
3665   1BA2 FD 93 80      test bl, $80
3666   1BA5 C6 B2 1B      jz _same_signs_84
3667   1BA8 2F            mov bl, al
3668   1BA9 95            not a
3669   1BAA FD 97         neg b
3670   1BAC 5B 00 00      adc a, 0
3671   1BAF FD 78         mov g, a
3672   1BB1 11            mov a, b
3673   1BB2             _same_signs_84:
3674   1BB2 FD 38         mov c, g
3675   1BB4 27            mov b, a
3676   1BB5 FD F1         pop g
3677   1BB7 E4            pop a
3678   1BB8             ; --- END FACTORS
3679   1BB8 FD 15         add32 cb, ga
3680   1BBA FD F1         pop g
3681   1BBC E4            pop a
3682   1BBD             ; --- END TERMS
3683   1BBD E7            pop d
3684   1BBE FD 43         mov [d], b
3685   1BC0             ; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
3686   1BC0 FA EB FF      lea d, [bp + -21] ; $x2
3687   1BC3 DA            push d
3688   1BC4 FD 2E 64 00   mov32 cb, $00000064
3688   1BC8 00 00 
3689   1BCA             ; --- START FACTORS
3690   1BCA D7            push a
3691   1BCB FD D8         push g
3692   1BCD 11            mov a, b
3693   1BCE FD 7A         mov g, c
3694   1BD0 3B 4D 6D      mov d, _c_data ; $c
3695   1BD3 D7            push a
3696   1BD4 DA            push d
3697   1BD5 FD 2E 02 00   mov32 cb, $00000002
3697   1BD9 00 00 
3698   1BDB E7            pop d
3699   1BDC FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3700   1BE0 DA            push d
3701   1BE1 FA F7 FF      lea d, [bp + -9] ; $c2
3702   1BE4 2A            mov b, [d]
3703   1BE5 38 00 00      mov c, 0
3704   1BE8 E7            pop d
3705   1BE9 5A            add d, b
3706   1BEA E4            pop a
3707   1BEB 32            mov bl, [d]
3708   1BEC A7 00         mov bh, 0
3709   1BEE 38 00 00      mov c, 0
3710   1BF1 D7            push a     ; save left operand
3711   1BF2 8E            xor a, b   ; xor sign bits
3712   1BF3 FD AA         swp a      ; swap bytes
3713   1BF5 83            mov cl, al ; save result of xor into 'dl'
3714   1BF6 E4            pop a      ; restore left side operator
3715   1BF7 DF            push cl    ; save result of xor above
3716   1BF8 FD AA         swp a  
3717   1BFA 93 80         test al, $80  
3718   1BFC FD AA         swp a  
3719   1BFE C6 03 1C      jz skip_invert_a_87  
3720   1C01 FD 95         neg a 
3721   1C03             skip_invert_a_87:   
3722   1C03 FD AB         swp b
3723   1C05 FD 93 80      test bl, $80  
3724   1C08 FD AB         swp b
3725   1C0A C6 0F 1C      jz skip_invert_b_87  
3726   1C0D FD 97         neg b 
3727   1C0F             skip_invert_b_87:   
3728   1C0F AC            mul a, b ; *
3729   1C10 FD 78         mov g, a
3730   1C12 11            mov a, b
3731   1C13 EA            pop bl
3732   1C14 FD 93 80      test bl, $80
3733   1C17 C6 24 1C      jz _same_signs_87
3734   1C1A 2F            mov bl, al
3735   1C1B 95            not a
3736   1C1C FD 97         neg b
3737   1C1E 5B 00 00      adc a, 0
3738   1C21 FD 78         mov g, a
3739   1C23 11            mov a, b
3740   1C24             _same_signs_87:
3741   1C24 FD 38         mov c, g
3742   1C26 27            mov b, a
3743   1C27 FD F1         pop g
3744   1C29 E4            pop a
3745   1C2A             ; --- END FACTORS
3746   1C2A             ; --- START TERMS
3747   1C2A D7            push a
3748   1C2B FD D8         push g
3749   1C2D 11            mov a, b
3750   1C2E FD 7A         mov g, c
3751   1C30 3B 4D 6D      mov d, _c_data ; $c
3752   1C33 D7            push a
3753   1C34 DA            push d
3754   1C35 FD 2E 02 00   mov32 cb, $00000002
3754   1C39 00 00 
3755   1C3B E7            pop d
3756   1C3C FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3757   1C40 DA            push d
3758   1C41 FA F5 FF      lea d, [bp + -11] ; $c3
3759   1C44 2A            mov b, [d]
3760   1C45 38 00 00      mov c, 0
3761   1C48 E7            pop d
3762   1C49 5A            add d, b
3763   1C4A E4            pop a
3764   1C4B 32            mov bl, [d]
3765   1C4C A7 00         mov bh, 0
3766   1C4E 38 00 00      mov c, 0
3767   1C51             ; --- START TERMS
3768   1C51 D7            push a
3769   1C52 11            mov a, b
3770   1C53 3B 4D 6D      mov d, _c_data ; $c
3771   1C56 D7            push a
3772   1C57 DA            push d
3773   1C58 FD 2E 02 00   mov32 cb, $00000002
3773   1C5C 00 00 
3774   1C5E E7            pop d
3775   1C5F FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3776   1C63 DA            push d
3777   1C64 FA F7 FF      lea d, [bp + -9] ; $c2
3778   1C67 2A            mov b, [d]
3779   1C68 38 00 00      mov c, 0
3780   1C6B E7            pop d
3781   1C6C 5A            add d, b
3782   1C6D E4            pop a
3783   1C6E 32            mov bl, [d]
3784   1C6F A7 00         mov bh, 0
3785   1C71 38 00 00      mov c, 0
3786   1C74 60            sub a, b
3787   1C75 27            mov b, a
3788   1C76 E4            pop a
3789   1C77             ; --- END TERMS
3790   1C77             ; --- START FACTORS
3791   1C77 D7            push a
3792   1C78 FD D8         push g
3793   1C7A 11            mov a, b
3794   1C7B FD 7A         mov g, c
3795   1C7D FA F3 FF      lea d, [bp + -13] ; $c4
3796   1C80 2A            mov b, [d]
3797   1C81 38 00 00      mov c, 0
3798   1C84 D7            push a     ; save left operand
3799   1C85 8E            xor a, b   ; xor sign bits
3800   1C86 FD AA         swp a      ; swap bytes
3801   1C88 83            mov cl, al ; save result of xor into 'dl'
3802   1C89 E4            pop a      ; restore left side operator
3803   1C8A DF            push cl    ; save result of xor above
3804   1C8B FD AA         swp a  
3805   1C8D 93 80         test al, $80  
3806   1C8F FD AA         swp a  
3807   1C91 C6 96 1C      jz skip_invert_a_88  
3808   1C94 FD 95         neg a 
3809   1C96             skip_invert_a_88:   
3810   1C96 FD AB         swp b
3811   1C98 FD 93 80      test bl, $80  
3812   1C9B FD AB         swp b
3813   1C9D C6 A2 1C      jz skip_invert_b_88  
3814   1CA0 FD 97         neg b 
3815   1CA2             skip_invert_b_88:   
3816   1CA2 AC            mul a, b ; *
3817   1CA3 FD 78         mov g, a
3818   1CA5 11            mov a, b
3819   1CA6 EA            pop bl
3820   1CA7 FD 93 80      test bl, $80
3821   1CAA C6 B7 1C      jz _same_signs_88
3822   1CAD 2F            mov bl, al
3823   1CAE 95            not a
3824   1CAF FD 97         neg b
3825   1CB1 5B 00 00      adc a, 0
3826   1CB4 FD 78         mov g, a
3827   1CB6 11            mov a, b
3828   1CB7             _same_signs_88:
3829   1CB7 FD 38         mov c, g
3830   1CB9 27            mov b, a
3831   1CBA FD F1         pop g
3832   1CBC E4            pop a
3833   1CBD             ; --- END FACTORS
3834   1CBD FD 15         add32 cb, ga
3835   1CBF FD F1         pop g
3836   1CC1 E4            pop a
3837   1CC2             ; --- END TERMS
3838   1CC2 E7            pop d
3839   1CC3 FD 43         mov [d], b
3840   1CC5             ; x = ship_y; 
3841   1CC5 FA E9 FF      lea d, [bp + -23] ; $x
3842   1CC8 DA            push d
3843   1CC9 3B 44 6E      mov d, _ship_y ; $ship_y
3844   1CCC 2A            mov b, [d]
3845   1CCD 38 00 00      mov c, 0
3846   1CD0 E7            pop d
3847   1CD1 FD 43         mov [d], b
3848   1CD3             ; y = ship_x; 
3849   1CD3 FA E7 FF      lea d, [bp + -25] ; $y
3850   1CD6 DA            push d
3851   1CD7 3B 46 6E      mov d, _ship_x ; $ship_x
3852   1CDA 2A            mov b, [d]
3853   1CDB 38 00 00      mov c, 0
3854   1CDE E7            pop d
3855   1CDF FD 43         mov [d], b
3856   1CE1             ; for (i = 1; i <= n; i++) { 
3857   1CE1             _for89_init:
3858   1CE1 FA FF FF      lea d, [bp + -1] ; $i
3859   1CE4 DA            push d
3860   1CE5 FD 2E 01 00   mov32 cb, $00000001
3860   1CE9 00 00 
3861   1CEB E7            pop d
3862   1CEC FD 43         mov [d], b
3863   1CEE             _for89_cond:
3864   1CEE FA FF FF      lea d, [bp + -1] ; $i
3865   1CF1 2A            mov b, [d]
3866   1CF2 38 00 00      mov c, 0
3867   1CF5             ; --- START RELATIONAL
3868   1CF5 D7            push a
3869   1CF6 11            mov a, b
3870   1CF7 FA F9 FF      lea d, [bp + -7] ; $n
3871   1CFA 2A            mov b, [d]
3872   1CFB 38 00 00      mov c, 0
3873   1CFE B0            cmp a, b
3874   1CFF FD 74         sle ; <= (signed)
3875   1D01 E4            pop a
3876   1D02             ; --- END RELATIONAL
3877   1D02 C0 00 00      cmp b, 0
3878   1D05 C6 E5 23      je _for89_exit
3879   1D08             _for89_block:
3880   1D08             ; ship_y = ship_y + x1; 
3881   1D08 3B 44 6E      mov d, _ship_y ; $ship_y
3882   1D0B DA            push d
3883   1D0C 3B 44 6E      mov d, _ship_y ; $ship_y
3884   1D0F 2A            mov b, [d]
3885   1D10 38 00 00      mov c, 0
3886   1D13             ; --- START TERMS
3887   1D13 D7            push a
3888   1D14 11            mov a, b
3889   1D15 FA ED FF      lea d, [bp + -19] ; $x1
3890   1D18 2A            mov b, [d]
3891   1D19 38 00 00      mov c, 0
3892   1D1C 56            add b, a
3893   1D1D E4            pop a
3894   1D1E             ; --- END TERMS
3895   1D1E E7            pop d
3896   1D1F FD 43         mov [d], b
3897   1D21             ; ship_x = ship_x + x2; 
3898   1D21 3B 46 6E      mov d, _ship_x ; $ship_x
3899   1D24 DA            push d
3900   1D25 3B 46 6E      mov d, _ship_x ; $ship_x
3901   1D28 2A            mov b, [d]
3902   1D29 38 00 00      mov c, 0
3903   1D2C             ; --- START TERMS
3904   1D2C D7            push a
3905   1D2D 11            mov a, b
3906   1D2E FA EB FF      lea d, [bp + -21] ; $x2
3907   1D31 2A            mov b, [d]
3908   1D32 38 00 00      mov c, 0
3909   1D35 56            add b, a
3910   1D36 E4            pop a
3911   1D37             ; --- END TERMS
3912   1D37 E7            pop d
3913   1D38 FD 43         mov [d], b
3914   1D3A             ; z1 = FROM_FIXED00(ship_y); 
3915   1D3A FA F1 FF      lea d, [bp + -15] ; $z1
3916   1D3D DA            push d
3917   1D3E             ; --- START FUNCTION CALL
3918   1D3E 3B 44 6E      mov d, _ship_y ; $ship_y
3919   1D41 2A            mov b, [d]
3920   1D42 38 00 00      mov c, 0
3921   1D45 FD AB         swp b
3922   1D47 D8            push b
3923   1D48 07 DC 04      call FROM_FIXED00
3924   1D4B 51 02 00      add sp, 2
3925   1D4E             ; --- END FUNCTION CALL
3926   1D4E E7            pop d
3927   1D4F FD 43         mov [d], b
3928   1D51             ; z2 = FROM_FIXED00(ship_x);	/* ?? cint100 ?? */ 
3929   1D51 FA EF FF      lea d, [bp + -17] ; $z2
3930   1D54 DA            push d
3931   1D55             ; --- START FUNCTION CALL
3932   1D55 3B 46 6E      mov d, _ship_x ; $ship_x
3933   1D58 2A            mov b, [d]
3934   1D59 38 00 00      mov c, 0
3935   1D5C FD AB         swp b
3936   1D5E D8            push b
3937   1D5F 07 DC 04      call FROM_FIXED00
3938   1D62 51 02 00      add sp, 2
3939   1D65             ; --- END FUNCTION CALL
3940   1D65 E7            pop d
3941   1D66 FD 43         mov [d], b
3942   1D68             ; if (z1 < 1 || z1 >= 9 || z2 < 1 || z2 >= 9) { 
3943   1D68             _if90_cond:
3944   1D68 FA F1 FF      lea d, [bp + -15] ; $z1
3945   1D6B 2A            mov b, [d]
3946   1D6C 38 00 00      mov c, 0
3947   1D6F             ; --- START RELATIONAL
3948   1D6F D7            push a
3949   1D70 11            mov a, b
3950   1D71 FD 2E 01 00   mov32 cb, $00000001
3950   1D75 00 00 
3951   1D77 B0            cmp a, b
3952   1D78 FD 73         slt ; < (signed)
3953   1D7A E4            pop a
3954   1D7B             ; --- END RELATIONAL
3955   1D7B             ; --- START LOGICAL OR
3956   1D7B D7            push a
3957   1D7C 11            mov a, b
3958   1D7D FA F1 FF      lea d, [bp + -15] ; $z1
3959   1D80 2A            mov b, [d]
3960   1D81 38 00 00      mov c, 0
3961   1D84             ; --- START RELATIONAL
3962   1D84 D7            push a
3963   1D85 11            mov a, b
3964   1D86 FD 2E 09 00   mov32 cb, $00000009
3964   1D8A 00 00 
3965   1D8C B0            cmp a, b
3966   1D8D FD 80         sge ; >=
3967   1D8F E4            pop a
3968   1D90             ; --- END RELATIONAL
3969   1D90 FD A8         sor a, b ; ||
3970   1D92 11            mov a, b
3971   1D93 FA EF FF      lea d, [bp + -17] ; $z2
3972   1D96 2A            mov b, [d]
3973   1D97 38 00 00      mov c, 0
3974   1D9A             ; --- START RELATIONAL
3975   1D9A D7            push a
3976   1D9B 11            mov a, b
3977   1D9C FD 2E 01 00   mov32 cb, $00000001
3977   1DA0 00 00 
3978   1DA2 B0            cmp a, b
3979   1DA3 FD 73         slt ; < (signed)
3980   1DA5 E4            pop a
3981   1DA6             ; --- END RELATIONAL
3982   1DA6 FD A8         sor a, b ; ||
3983   1DA8 11            mov a, b
3984   1DA9 FA EF FF      lea d, [bp + -17] ; $z2
3985   1DAC 2A            mov b, [d]
3986   1DAD 38 00 00      mov c, 0
3987   1DB0             ; --- START RELATIONAL
3988   1DB0 D7            push a
3989   1DB1 11            mov a, b
3990   1DB2 FD 2E 09 00   mov32 cb, $00000009
3990   1DB6 00 00 
3991   1DB8 B0            cmp a, b
3992   1DB9 FD 80         sge ; >=
3993   1DBB E4            pop a
3994   1DBC             ; --- END RELATIONAL
3995   1DBC FD A8         sor a, b ; ||
3996   1DBE E4            pop a
3997   1DBF             ; --- END LOGICAL OR
3998   1DBF C0 00 00      cmp b, 0
3999   1DC2 C6 1B 23      je _if90_exit
4000   1DC5             _if90_TRUE:
4001   1DC5             ; outside = 0;		/* Outside galaxy flag */ 
4002   1DC5 FA E6 FF      lea d, [bp + -26] ; $outside
4003   1DC8 DA            push d
4004   1DC9 FD 2E 00 00   mov32 cb, $00000000
4004   1DCD 00 00 
4005   1DCF E7            pop d
4006   1DD0 FD 3E         mov [d], bl
4007   1DD2             ; quad_y_old = quad_y; 
4008   1DD2 FA E5 FF      lea d, [bp + -27] ; $quad_y_old
4009   1DD5 DA            push d
4010   1DD6 3B 25 6E      mov d, _quad_y ; $quad_y
4011   1DD9 2A            mov b, [d]
4012   1DDA 38 00 00      mov c, 0
4013   1DDD E7            pop d
4014   1DDE FD 3E         mov [d], bl
4015   1DE0             ; quad_x_old = quad_x; 
4016   1DE0 FA E4 FF      lea d, [bp + -28] ; $quad_x_old
4017   1DE3 DA            push d
4018   1DE4 3B 27 6E      mov d, _quad_x ; $quad_x
4019   1DE7 2A            mov b, [d]
4020   1DE8 38 00 00      mov c, 0
4021   1DEB E7            pop d
4022   1DEC FD 3E         mov [d], bl
4023   1DEE             ; x = (800 * quad_y) + x + (n * x1); 
4024   1DEE FA E9 FF      lea d, [bp + -23] ; $x
4025   1DF1 DA            push d
4026   1DF2 FD 2E 20 03   mov32 cb, $00000320
4026   1DF6 00 00 
4027   1DF8             ; --- START FACTORS
4028   1DF8 D7            push a
4029   1DF9 FD D8         push g
4030   1DFB 11            mov a, b
4031   1DFC FD 7A         mov g, c
4032   1DFE 3B 25 6E      mov d, _quad_y ; $quad_y
4033   1E01 2A            mov b, [d]
4034   1E02 38 00 00      mov c, 0
4035   1E05 D7            push a     ; save left operand
4036   1E06 8E            xor a, b   ; xor sign bits
4037   1E07 FD AA         swp a      ; swap bytes
4038   1E09 83            mov cl, al ; save result of xor into 'dl'
4039   1E0A E4            pop a      ; restore left side operator
4040   1E0B DF            push cl    ; save result of xor above
4041   1E0C FD AA         swp a  
4042   1E0E 93 80         test al, $80  
4043   1E10 FD AA         swp a  
4044   1E12 C6 17 1E      jz skip_invert_a_96  
4045   1E15 FD 95         neg a 
4046   1E17             skip_invert_a_96:   
4047   1E17 FD AB         swp b
4048   1E19 FD 93 80      test bl, $80  
4049   1E1C FD AB         swp b
4050   1E1E C6 23 1E      jz skip_invert_b_96  
4051   1E21 FD 97         neg b 
4052   1E23             skip_invert_b_96:   
4053   1E23 AC            mul a, b ; *
4054   1E24 FD 78         mov g, a
4055   1E26 11            mov a, b
4056   1E27 EA            pop bl
4057   1E28 FD 93 80      test bl, $80
4058   1E2B C6 38 1E      jz _same_signs_96
4059   1E2E 2F            mov bl, al
4060   1E2F 95            not a
4061   1E30 FD 97         neg b
4062   1E32 5B 00 00      adc a, 0
4063   1E35 FD 78         mov g, a
4064   1E37 11            mov a, b
4065   1E38             _same_signs_96:
4066   1E38 FD 38         mov c, g
4067   1E3A 27            mov b, a
4068   1E3B FD F1         pop g
4069   1E3D E4            pop a
4070   1E3E             ; --- END FACTORS
4071   1E3E             ; --- START TERMS
4072   1E3E D7            push a
4073   1E3F 11            mov a, b
4074   1E40 FA E9 FF      lea d, [bp + -23] ; $x
4075   1E43 2A            mov b, [d]
4076   1E44 38 00 00      mov c, 0
4077   1E47 56            add b, a
4078   1E48 11            mov a, b
4079   1E49 FA F9 FF      lea d, [bp + -7] ; $n
4080   1E4C 2A            mov b, [d]
4081   1E4D 38 00 00      mov c, 0
4082   1E50             ; --- START FACTORS
4083   1E50 D7            push a
4084   1E51 FD D8         push g
4085   1E53 11            mov a, b
4086   1E54 FD 7A         mov g, c
4087   1E56 FA ED FF      lea d, [bp + -19] ; $x1
4088   1E59 2A            mov b, [d]
4089   1E5A 38 00 00      mov c, 0
4090   1E5D D7            push a     ; save left operand
4091   1E5E 8E            xor a, b   ; xor sign bits
4092   1E5F FD AA         swp a      ; swap bytes
4093   1E61 83            mov cl, al ; save result of xor into 'dl'
4094   1E62 E4            pop a      ; restore left side operator
4095   1E63 DF            push cl    ; save result of xor above
4096   1E64 FD AA         swp a  
4097   1E66 93 80         test al, $80  
4098   1E68 FD AA         swp a  
4099   1E6A C6 6F 1E      jz skip_invert_a_98  
4100   1E6D FD 95         neg a 
4101   1E6F             skip_invert_a_98:   
4102   1E6F FD AB         swp b
4103   1E71 FD 93 80      test bl, $80  
4104   1E74 FD AB         swp b
4105   1E76 C6 7B 1E      jz skip_invert_b_98  
4106   1E79 FD 97         neg b 
4107   1E7B             skip_invert_b_98:   
4108   1E7B AC            mul a, b ; *
4109   1E7C FD 78         mov g, a
4110   1E7E 11            mov a, b
4111   1E7F EA            pop bl
4112   1E80 FD 93 80      test bl, $80
4113   1E83 C6 90 1E      jz _same_signs_98
4114   1E86 2F            mov bl, al
4115   1E87 95            not a
4116   1E88 FD 97         neg b
4117   1E8A 5B 00 00      adc a, 0
4118   1E8D FD 78         mov g, a
4119   1E8F 11            mov a, b
4120   1E90             _same_signs_98:
4121   1E90 FD 38         mov c, g
4122   1E92 27            mov b, a
4123   1E93 FD F1         pop g
4124   1E95 E4            pop a
4125   1E96             ; --- END FACTORS
4126   1E96 56            add b, a
4127   1E97 E4            pop a
4128   1E98             ; --- END TERMS
4129   1E98 E7            pop d
4130   1E99 FD 43         mov [d], b
4131   1E9B             ; y = (800 * quad_x) + y + (n * x2); 
4132   1E9B FA E7 FF      lea d, [bp + -25] ; $y
4133   1E9E DA            push d
4134   1E9F FD 2E 20 03   mov32 cb, $00000320
4134   1EA3 00 00 
4135   1EA5             ; --- START FACTORS
4136   1EA5 D7            push a
4137   1EA6 FD D8         push g
4138   1EA8 11            mov a, b
4139   1EA9 FD 7A         mov g, c
4140   1EAB 3B 27 6E      mov d, _quad_x ; $quad_x
4141   1EAE 2A            mov b, [d]
4142   1EAF 38 00 00      mov c, 0
4143   1EB2 D7            push a     ; save left operand
4144   1EB3 8E            xor a, b   ; xor sign bits
4145   1EB4 FD AA         swp a      ; swap bytes
4146   1EB6 83            mov cl, al ; save result of xor into 'dl'
4147   1EB7 E4            pop a      ; restore left side operator
4148   1EB8 DF            push cl    ; save result of xor above
4149   1EB9 FD AA         swp a  
4150   1EBB 93 80         test al, $80  
4151   1EBD FD AA         swp a  
4152   1EBF C6 C4 1E      jz skip_invert_a_104  
4153   1EC2 FD 95         neg a 
4154   1EC4             skip_invert_a_104:   
4155   1EC4 FD AB         swp b
4156   1EC6 FD 93 80      test bl, $80  
4157   1EC9 FD AB         swp b
4158   1ECB C6 D0 1E      jz skip_invert_b_104  
4159   1ECE FD 97         neg b 
4160   1ED0             skip_invert_b_104:   
4161   1ED0 AC            mul a, b ; *
4162   1ED1 FD 78         mov g, a
4163   1ED3 11            mov a, b
4164   1ED4 EA            pop bl
4165   1ED5 FD 93 80      test bl, $80
4166   1ED8 C6 E5 1E      jz _same_signs_104
4167   1EDB 2F            mov bl, al
4168   1EDC 95            not a
4169   1EDD FD 97         neg b
4170   1EDF 5B 00 00      adc a, 0
4171   1EE2 FD 78         mov g, a
4172   1EE4 11            mov a, b
4173   1EE5             _same_signs_104:
4174   1EE5 FD 38         mov c, g
4175   1EE7 27            mov b, a
4176   1EE8 FD F1         pop g
4177   1EEA E4            pop a
4178   1EEB             ; --- END FACTORS
4179   1EEB             ; --- START TERMS
4180   1EEB D7            push a
4181   1EEC 11            mov a, b
4182   1EED FA E7 FF      lea d, [bp + -25] ; $y
4183   1EF0 2A            mov b, [d]
4184   1EF1 38 00 00      mov c, 0
4185   1EF4 56            add b, a
4186   1EF5 11            mov a, b
4187   1EF6 FA F9 FF      lea d, [bp + -7] ; $n
4188   1EF9 2A            mov b, [d]
4189   1EFA 38 00 00      mov c, 0
4190   1EFD             ; --- START FACTORS
4191   1EFD D7            push a
4192   1EFE FD D8         push g
4193   1F00 11            mov a, b
4194   1F01 FD 7A         mov g, c
4195   1F03 FA EB FF      lea d, [bp + -21] ; $x2
4196   1F06 2A            mov b, [d]
4197   1F07 38 00 00      mov c, 0
4198   1F0A D7            push a     ; save left operand
4199   1F0B 8E            xor a, b   ; xor sign bits
4200   1F0C FD AA         swp a      ; swap bytes
4201   1F0E 83            mov cl, al ; save result of xor into 'dl'
4202   1F0F E4            pop a      ; restore left side operator
4203   1F10 DF            push cl    ; save result of xor above
4204   1F11 FD AA         swp a  
4205   1F13 93 80         test al, $80  
4206   1F15 FD AA         swp a  
4207   1F17 C6 1C 1F      jz skip_invert_a_106  
4208   1F1A FD 95         neg a 
4209   1F1C             skip_invert_a_106:   
4210   1F1C FD AB         swp b
4211   1F1E FD 93 80      test bl, $80  
4212   1F21 FD AB         swp b
4213   1F23 C6 28 1F      jz skip_invert_b_106  
4214   1F26 FD 97         neg b 
4215   1F28             skip_invert_b_106:   
4216   1F28 AC            mul a, b ; *
4217   1F29 FD 78         mov g, a
4218   1F2B 11            mov a, b
4219   1F2C EA            pop bl
4220   1F2D FD 93 80      test bl, $80
4221   1F30 C6 3D 1F      jz _same_signs_106
4222   1F33 2F            mov bl, al
4223   1F34 95            not a
4224   1F35 FD 97         neg b
4225   1F37 5B 00 00      adc a, 0
4226   1F3A FD 78         mov g, a
4227   1F3C 11            mov a, b
4228   1F3D             _same_signs_106:
4229   1F3D FD 38         mov c, g
4230   1F3F 27            mov b, a
4231   1F40 FD F1         pop g
4232   1F42 E4            pop a
4233   1F43             ; --- END FACTORS
4234   1F43 56            add b, a
4235   1F44 E4            pop a
4236   1F45             ; --- END TERMS
4237   1F45 E7            pop d
4238   1F46 FD 43         mov [d], b
4239   1F48             ; quad_y = x / 800;	/* Fixed point to int and divide by 8 */ 
4240   1F48 3B 25 6E      mov d, _quad_y ; $quad_y
4241   1F4B DA            push d
4242   1F4C FA E9 FF      lea d, [bp + -23] ; $x
4243   1F4F 2A            mov b, [d]
4244   1F50 38 00 00      mov c, 0
4245   1F53             ; --- START FACTORS
4246   1F53 D7            push a
4247   1F54 FD D8         push g
4248   1F56 11            mov a, b
4249   1F57 FD 7A         mov g, c
4250   1F59 FD 2E 20 03   mov32 cb, $00000320
4250   1F5D 00 00 
4251   1F5F FD D8         push g ; save 'g' as the div instruction uses it
4252   1F61 AE            div a, b ; /, a: quotient, b: remainder
4253   1F62 FD F1         pop g
4254   1F64 FD 38         mov c, g
4255   1F66 27            mov b, a
4256   1F67 FD F1         pop g
4257   1F69 E4            pop a
4258   1F6A             ; --- END FACTORS
4259   1F6A E7            pop d
4260   1F6B FD 43         mov [d], b
4261   1F6D             ; quad_x = y / 800;	/* Ditto */ 
4262   1F6D 3B 27 6E      mov d, _quad_x ; $quad_x
4263   1F70 DA            push d
4264   1F71 FA E7 FF      lea d, [bp + -25] ; $y
4265   1F74 2A            mov b, [d]
4266   1F75 38 00 00      mov c, 0
4267   1F78             ; --- START FACTORS
4268   1F78 D7            push a
4269   1F79 FD D8         push g
4270   1F7B 11            mov a, b
4271   1F7C FD 7A         mov g, c
4272   1F7E FD 2E 20 03   mov32 cb, $00000320
4272   1F82 00 00 
4273   1F84 FD D8         push g ; save 'g' as the div instruction uses it
4274   1F86 AE            div a, b ; /, a: quotient, b: remainder
4275   1F87 FD F1         pop g
4276   1F89 FD 38         mov c, g
4277   1F8B 27            mov b, a
4278   1F8C FD F1         pop g
4279   1F8E E4            pop a
4280   1F8F             ; --- END FACTORS
4281   1F8F E7            pop d
4282   1F90 FD 43         mov [d], b
4283   1F92             ; ship_y = x - (quad_y * 800); 
4284   1F92 3B 44 6E      mov d, _ship_y ; $ship_y
4285   1F95 DA            push d
4286   1F96 FA E9 FF      lea d, [bp + -23] ; $x
4287   1F99 2A            mov b, [d]
4288   1F9A 38 00 00      mov c, 0
4289   1F9D             ; --- START TERMS
4290   1F9D D7            push a
4291   1F9E 11            mov a, b
4292   1F9F 3B 25 6E      mov d, _quad_y ; $quad_y
4293   1FA2 2A            mov b, [d]
4294   1FA3 38 00 00      mov c, 0
4295   1FA6             ; --- START FACTORS
4296   1FA6 D7            push a
4297   1FA7 FD D8         push g
4298   1FA9 11            mov a, b
4299   1FAA FD 7A         mov g, c
4300   1FAC FD 2E 20 03   mov32 cb, $00000320
4300   1FB0 00 00 
4301   1FB2 D7            push a     ; save left operand
4302   1FB3 8E            xor a, b   ; xor sign bits
4303   1FB4 FD AA         swp a      ; swap bytes
4304   1FB6 83            mov cl, al ; save result of xor into 'dl'
4305   1FB7 E4            pop a      ; restore left side operator
4306   1FB8 DF            push cl    ; save result of xor above
4307   1FB9 FD AA         swp a  
4308   1FBB 93 80         test al, $80  
4309   1FBD FD AA         swp a  
4310   1FBF C6 C4 1F      jz skip_invert_a_114  
4311   1FC2 FD 95         neg a 
4312   1FC4             skip_invert_a_114:   
4313   1FC4 FD AB         swp b
4314   1FC6 FD 93 80      test bl, $80  
4315   1FC9 FD AB         swp b
4316   1FCB C6 D0 1F      jz skip_invert_b_114  
4317   1FCE FD 97         neg b 
4318   1FD0             skip_invert_b_114:   
4319   1FD0 AC            mul a, b ; *
4320   1FD1 FD 78         mov g, a
4321   1FD3 11            mov a, b
4322   1FD4 EA            pop bl
4323   1FD5 FD 93 80      test bl, $80
4324   1FD8 C6 E5 1F      jz _same_signs_114
4325   1FDB 2F            mov bl, al
4326   1FDC 95            not a
4327   1FDD FD 97         neg b
4328   1FDF 5B 00 00      adc a, 0
4329   1FE2 FD 78         mov g, a
4330   1FE4 11            mov a, b
4331   1FE5             _same_signs_114:
4332   1FE5 FD 38         mov c, g
4333   1FE7 27            mov b, a
4334   1FE8 FD F1         pop g
4335   1FEA E4            pop a
4336   1FEB             ; --- END FACTORS
4337   1FEB 60            sub a, b
4338   1FEC 27            mov b, a
4339   1FED E4            pop a
4340   1FEE             ; --- END TERMS
4341   1FEE E7            pop d
4342   1FEF FD 43         mov [d], b
4343   1FF1             ; ship_x = y - (quad_x * 800); 
4344   1FF1 3B 46 6E      mov d, _ship_x ; $ship_x
4345   1FF4 DA            push d
4346   1FF5 FA E7 FF      lea d, [bp + -25] ; $y
4347   1FF8 2A            mov b, [d]
4348   1FF9 38 00 00      mov c, 0
4349   1FFC             ; --- START TERMS
4350   1FFC D7            push a
4351   1FFD 11            mov a, b
4352   1FFE 3B 27 6E      mov d, _quad_x ; $quad_x
4353   2001 2A            mov b, [d]
4354   2002 38 00 00      mov c, 0
4355   2005             ; --- START FACTORS
4356   2005 D7            push a
4357   2006 FD D8         push g
4358   2008 11            mov a, b
4359   2009 FD 7A         mov g, c
4360   200B FD 2E 20 03   mov32 cb, $00000320
4360   200F 00 00 
4361   2011 D7            push a     ; save left operand
4362   2012 8E            xor a, b   ; xor sign bits
4363   2013 FD AA         swp a      ; swap bytes
4364   2015 83            mov cl, al ; save result of xor into 'dl'
4365   2016 E4            pop a      ; restore left side operator
4366   2017 DF            push cl    ; save result of xor above
4367   2018 FD AA         swp a  
4368   201A 93 80         test al, $80  
4369   201C FD AA         swp a  
4370   201E C6 23 20      jz skip_invert_a_118  
4371   2021 FD 95         neg a 
4372   2023             skip_invert_a_118:   
4373   2023 FD AB         swp b
4374   2025 FD 93 80      test bl, $80  
4375   2028 FD AB         swp b
4376   202A C6 2F 20      jz skip_invert_b_118  
4377   202D FD 97         neg b 
4378   202F             skip_invert_b_118:   
4379   202F AC            mul a, b ; *
4380   2030 FD 78         mov g, a
4381   2032 11            mov a, b
4382   2033 EA            pop bl
4383   2034 FD 93 80      test bl, $80
4384   2037 C6 44 20      jz _same_signs_118
4385   203A 2F            mov bl, al
4386   203B 95            not a
4387   203C FD 97         neg b
4388   203E 5B 00 00      adc a, 0
4389   2041 FD 78         mov g, a
4390   2043 11            mov a, b
4391   2044             _same_signs_118:
4392   2044 FD 38         mov c, g
4393   2046 27            mov b, a
4394   2047 FD F1         pop g
4395   2049 E4            pop a
4396   204A             ; --- END FACTORS
4397   204A 60            sub a, b
4398   204B 27            mov b, a
4399   204C E4            pop a
4400   204D             ; --- END TERMS
4401   204D E7            pop d
4402   204E FD 43         mov [d], b
4403   2050             ; if (ship_y < 100) { 
4404   2050             _if119_cond:
4405   2050 3B 44 6E      mov d, _ship_y ; $ship_y
4406   2053 2A            mov b, [d]
4407   2054 38 00 00      mov c, 0
4408   2057             ; --- START RELATIONAL
4409   2057 D7            push a
4410   2058 11            mov a, b
4411   2059 FD 2E 64 00   mov32 cb, $00000064
4411   205D 00 00 
4412   205F B0            cmp a, b
4413   2060 FD 73         slt ; < (signed)
4414   2062 E4            pop a
4415   2063             ; --- END RELATIONAL
4416   2063 C0 00 00      cmp b, 0
4417   2066 C6 9D 20      je _if119_exit
4418   2069             _if119_TRUE:
4419   2069             ; quad_y = quad_y - 1; 
4420   2069 3B 25 6E      mov d, _quad_y ; $quad_y
4421   206C DA            push d
4422   206D 3B 25 6E      mov d, _quad_y ; $quad_y
4423   2070 2A            mov b, [d]
4424   2071 38 00 00      mov c, 0
4425   2074             ; --- START TERMS
4426   2074 D7            push a
4427   2075 11            mov a, b
4428   2076 FD 2E 01 00   mov32 cb, $00000001
4428   207A 00 00 
4429   207C 60            sub a, b
4430   207D 27            mov b, a
4431   207E E4            pop a
4432   207F             ; --- END TERMS
4433   207F E7            pop d
4434   2080 FD 43         mov [d], b
4435   2082             ; ship_y = ship_y + 800; 
4436   2082 3B 44 6E      mov d, _ship_y ; $ship_y
4437   2085 DA            push d
4438   2086 3B 44 6E      mov d, _ship_y ; $ship_y
4439   2089 2A            mov b, [d]
4440   208A 38 00 00      mov c, 0
4441   208D             ; --- START TERMS
4442   208D D7            push a
4443   208E 11            mov a, b
4444   208F FD 2E 20 03   mov32 cb, $00000320
4444   2093 00 00 
4445   2095 56            add b, a
4446   2096 E4            pop a
4447   2097             ; --- END TERMS
4448   2097 E7            pop d
4449   2098 FD 43         mov [d], b
4450   209A 0A 9D 20      jmp _if119_exit
4451   209D             _if119_exit:
4452   209D             ; if (ship_x < 100) { 
4453   209D             _if120_cond:
4454   209D 3B 46 6E      mov d, _ship_x ; $ship_x
4455   20A0 2A            mov b, [d]
4456   20A1 38 00 00      mov c, 0
4457   20A4             ; --- START RELATIONAL
4458   20A4 D7            push a
4459   20A5 11            mov a, b
4460   20A6 FD 2E 64 00   mov32 cb, $00000064
4460   20AA 00 00 
4461   20AC B0            cmp a, b
4462   20AD FD 73         slt ; < (signed)
4463   20AF E4            pop a
4464   20B0             ; --- END RELATIONAL
4465   20B0 C0 00 00      cmp b, 0
4466   20B3 C6 EA 20      je _if120_exit
4467   20B6             _if120_TRUE:
4468   20B6             ; quad_x = quad_x - 1; 
4469   20B6 3B 27 6E      mov d, _quad_x ; $quad_x
4470   20B9 DA            push d
4471   20BA 3B 27 6E      mov d, _quad_x ; $quad_x
4472   20BD 2A            mov b, [d]
4473   20BE 38 00 00      mov c, 0
4474   20C1             ; --- START TERMS
4475   20C1 D7            push a
4476   20C2 11            mov a, b
4477   20C3 FD 2E 01 00   mov32 cb, $00000001
4477   20C7 00 00 
4478   20C9 60            sub a, b
4479   20CA 27            mov b, a
4480   20CB E4            pop a
4481   20CC             ; --- END TERMS
4482   20CC E7            pop d
4483   20CD FD 43         mov [d], b
4484   20CF             ; ship_x = ship_x + 800; 
4485   20CF 3B 46 6E      mov d, _ship_x ; $ship_x
4486   20D2 DA            push d
4487   20D3 3B 46 6E      mov d, _ship_x ; $ship_x
4488   20D6 2A            mov b, [d]
4489   20D7 38 00 00      mov c, 0
4490   20DA             ; --- START TERMS
4491   20DA D7            push a
4492   20DB 11            mov a, b
4493   20DC FD 2E 20 03   mov32 cb, $00000320
4493   20E0 00 00 
4494   20E2 56            add b, a
4495   20E3 E4            pop a
4496   20E4             ; --- END TERMS
4497   20E4 E7            pop d
4498   20E5 FD 43         mov [d], b
4499   20E7 0A EA 20      jmp _if120_exit
4500   20EA             _if120_exit:
4501   20EA             ; if (quad_y < 1) { 
4502   20EA             _if121_cond:
4503   20EA 3B 25 6E      mov d, _quad_y ; $quad_y
4504   20ED 2A            mov b, [d]
4505   20EE 38 00 00      mov c, 0
4506   20F1             ; --- START RELATIONAL
4507   20F1 D7            push a
4508   20F2 11            mov a, b
4509   20F3 FD 2E 01 00   mov32 cb, $00000001
4509   20F7 00 00 
4510   20F9 B0            cmp a, b
4511   20FA FD 73         slt ; < (signed)
4512   20FC E4            pop a
4513   20FD             ; --- END RELATIONAL
4514   20FD C0 00 00      cmp b, 0
4515   2100 C6 2D 21      je _if121_exit
4516   2103             _if121_TRUE:
4517   2103             ; outside = 1; 
4518   2103 FA E6 FF      lea d, [bp + -26] ; $outside
4519   2106 DA            push d
4520   2107 FD 2E 01 00   mov32 cb, $00000001
4520   210B 00 00 
4521   210D E7            pop d
4522   210E FD 3E         mov [d], bl
4523   2110             ; quad_y = 1; 
4524   2110 3B 25 6E      mov d, _quad_y ; $quad_y
4525   2113 DA            push d
4526   2114 FD 2E 01 00   mov32 cb, $00000001
4526   2118 00 00 
4527   211A E7            pop d
4528   211B FD 43         mov [d], b
4529   211D             ; ship_y = 100; 
4530   211D 3B 44 6E      mov d, _ship_y ; $ship_y
4531   2120 DA            push d
4532   2121 FD 2E 64 00   mov32 cb, $00000064
4532   2125 00 00 
4533   2127 E7            pop d
4534   2128 FD 43         mov [d], b
4535   212A 0A 2D 21      jmp _if121_exit
4536   212D             _if121_exit:
4537   212D             ; if (quad_y > 8) { 
4538   212D             _if122_cond:
4539   212D 3B 25 6E      mov d, _quad_y ; $quad_y
4540   2130 2A            mov b, [d]
4541   2131 38 00 00      mov c, 0
4542   2134             ; --- START RELATIONAL
4543   2134 D7            push a
4544   2135 11            mov a, b
4545   2136 FD 2E 08 00   mov32 cb, $00000008
4545   213A 00 00 
4546   213C B0            cmp a, b
4547   213D FD 7F         sgt ; >
4548   213F E4            pop a
4549   2140             ; --- END RELATIONAL
4550   2140 C0 00 00      cmp b, 0
4551   2143 C6 70 21      je _if122_exit
4552   2146             _if122_TRUE:
4553   2146             ; outside = 1; 
4554   2146 FA E6 FF      lea d, [bp + -26] ; $outside
4555   2149 DA            push d
4556   214A FD 2E 01 00   mov32 cb, $00000001
4556   214E 00 00 
4557   2150 E7            pop d
4558   2151 FD 3E         mov [d], bl
4559   2153             ; quad_y = 8; 
4560   2153 3B 25 6E      mov d, _quad_y ; $quad_y
4561   2156 DA            push d
4562   2157 FD 2E 08 00   mov32 cb, $00000008
4562   215B 00 00 
4563   215D E7            pop d
4564   215E FD 43         mov [d], b
4565   2160             ; ship_y = 800; 
4566   2160 3B 44 6E      mov d, _ship_y ; $ship_y
4567   2163 DA            push d
4568   2164 FD 2E 20 03   mov32 cb, $00000320
4568   2168 00 00 
4569   216A E7            pop d
4570   216B FD 43         mov [d], b
4571   216D 0A 70 21      jmp _if122_exit
4572   2170             _if122_exit:
4573   2170             ; if (quad_x < 1) { 
4574   2170             _if123_cond:
4575   2170 3B 27 6E      mov d, _quad_x ; $quad_x
4576   2173 2A            mov b, [d]
4577   2174 38 00 00      mov c, 0
4578   2177             ; --- START RELATIONAL
4579   2177 D7            push a
4580   2178 11            mov a, b
4581   2179 FD 2E 01 00   mov32 cb, $00000001
4581   217D 00 00 
4582   217F B0            cmp a, b
4583   2180 FD 73         slt ; < (signed)
4584   2182 E4            pop a
4585   2183             ; --- END RELATIONAL
4586   2183 C0 00 00      cmp b, 0
4587   2186 C6 B3 21      je _if123_exit
4588   2189             _if123_TRUE:
4589   2189             ; outside = 1; 
4590   2189 FA E6 FF      lea d, [bp + -26] ; $outside
4591   218C DA            push d
4592   218D FD 2E 01 00   mov32 cb, $00000001
4592   2191 00 00 
4593   2193 E7            pop d
4594   2194 FD 3E         mov [d], bl
4595   2196             ; quad_x = 1; 
4596   2196 3B 27 6E      mov d, _quad_x ; $quad_x
4597   2199 DA            push d
4598   219A FD 2E 01 00   mov32 cb, $00000001
4598   219E 00 00 
4599   21A0 E7            pop d
4600   21A1 FD 43         mov [d], b
4601   21A3             ; ship_x = 100; 
4602   21A3 3B 46 6E      mov d, _ship_x ; $ship_x
4603   21A6 DA            push d
4604   21A7 FD 2E 64 00   mov32 cb, $00000064
4604   21AB 00 00 
4605   21AD E7            pop d
4606   21AE FD 43         mov [d], b
4607   21B0 0A B3 21      jmp _if123_exit
4608   21B3             _if123_exit:
4609   21B3             ; if (quad_x > 8) { 
4610   21B3             _if124_cond:
4611   21B3 3B 27 6E      mov d, _quad_x ; $quad_x
4612   21B6 2A            mov b, [d]
4613   21B7 38 00 00      mov c, 0
4614   21BA             ; --- START RELATIONAL
4615   21BA D7            push a
4616   21BB 11            mov a, b
4617   21BC FD 2E 08 00   mov32 cb, $00000008
4617   21C0 00 00 
4618   21C2 B0            cmp a, b
4619   21C3 FD 7F         sgt ; >
4620   21C5 E4            pop a
4621   21C6             ; --- END RELATIONAL
4622   21C6 C0 00 00      cmp b, 0
4623   21C9 C6 F6 21      je _if124_exit
4624   21CC             _if124_TRUE:
4625   21CC             ; outside = 1; 
4626   21CC FA E6 FF      lea d, [bp + -26] ; $outside
4627   21CF DA            push d
4628   21D0 FD 2E 01 00   mov32 cb, $00000001
4628   21D4 00 00 
4629   21D6 E7            pop d
4630   21D7 FD 3E         mov [d], bl
4631   21D9             ; quad_x = 8; 
4632   21D9 3B 27 6E      mov d, _quad_x ; $quad_x
4633   21DC DA            push d
4634   21DD FD 2E 08 00   mov32 cb, $00000008
4634   21E1 00 00 
4635   21E3 E7            pop d
4636   21E4 FD 43         mov [d], b
4637   21E6             ; ship_x = 800; 
4638   21E6 3B 46 6E      mov d, _ship_x ; $ship_x
4639   21E9 DA            push d
4640   21EA FD 2E 20 03   mov32 cb, $00000320
4640   21EE 00 00 
4641   21F0 E7            pop d
4642   21F1 FD 43         mov [d], b
4643   21F3 0A F6 21      jmp _if124_exit
4644   21F6             _if124_exit:
4645   21F6             ; if (outside == 1) { 
4646   21F6             _if125_cond:
4647   21F6 FA E6 FF      lea d, [bp + -26] ; $outside
4648   21F9 32            mov bl, [d]
4649   21FA A7 00         mov bh, 0
4650   21FC 38 00 00      mov c, 0
4651   21FF             ; --- START RELATIONAL
4652   21FF D7            push a
4653   2200 11            mov a, b
4654   2201 FD 2E 01 00   mov32 cb, $00000001
4654   2205 00 00 
4655   2207 B0            cmp a, b
4656   2208 FD 71         seq ; ==
4657   220A E4            pop a
4658   220B             ; --- END RELATIONAL
4659   220B C0 00 00      cmp b, 0
4660   220E C6 5A 22      je _if125_exit
4661   2211             _if125_TRUE:
4662   2211             ; printf("LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", FROM_FIXED00(ship_y), 
4663   2211             ; --- START FUNCTION CALL
4664   2211 3B 27 6E      mov d, _quad_x ; $quad_x
4665   2214 2A            mov b, [d]
4666   2215 38 00 00      mov c, 0
4667   2218 FD AB         swp b
4668   221A D8            push b
4669   221B 3B 25 6E      mov d, _quad_y ; $quad_y
4670   221E 2A            mov b, [d]
4671   221F 38 00 00      mov c, 0
4672   2222 FD AB         swp b
4673   2224 D8            push b
4674   2225             ; --- START FUNCTION CALL
4675   2225 3B 46 6E      mov d, _ship_x ; $ship_x
4676   2228 2A            mov b, [d]
4677   2229 38 00 00      mov c, 0
4678   222C FD AB         swp b
4679   222E D8            push b
4680   222F 07 DC 04      call FROM_FIXED00
4681   2232 51 02 00      add sp, 2
4682   2235             ; --- END FUNCTION CALL
4683   2235 FD AB         swp b
4684   2237 D8            push b
4685   2238             ; --- START FUNCTION CALL
4686   2238 3B 44 6E      mov d, _ship_y ; $ship_y
4687   223B 2A            mov b, [d]
4688   223C 38 00 00      mov c, 0
4689   223F FD AB         swp b
4690   2241 D8            push b
4691   2242 07 DC 04      call FROM_FIXED00
4692   2245 51 02 00      add sp, 2
4693   2248             ; --- END FUNCTION CALL
4694   2248 FD AB         swp b
4695   224A D8            push b
4696   224B 26 C3 74      mov b, _s71 ; "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n"
4697   224E FD AB         swp b
4698   2250 D8            push b
4699   2251 07 36 60      call printf
4700   2254 51 0A 00      add sp, 10
4701   2257             ; --- END FUNCTION CALL
4702   2257 0A 5A 22      jmp _if125_exit
4703   225A             _if125_exit:
4704   225A             ; maneuver_energy(n); 
4705   225A             ; --- START FUNCTION CALL
4706   225A FA F9 FF      lea d, [bp + -7] ; $n
4707   225D 2A            mov b, [d]
4708   225E 38 00 00      mov c, 0
4709   2261 FD AB         swp b
4710   2263 D8            push b
4711   2264 07 BE 24      call maneuver_energy
4712   2267 51 02 00      add sp, 2
4713   226A             ; --- END FUNCTION CALL
4714   226A             ; if (FROM_FIXED(stardate) > time_start + time_up) 
4715   226A             _if126_cond:
4716   226A             ; --- START FUNCTION CALL
4717   226A 3B 48 6E      mov d, _stardate ; $stardate
4718   226D 2A            mov b, [d]
4719   226E 38 00 00      mov c, 0
4720   2271 FD AB         swp b
4721   2273 D8            push b
4722   2274 07 68 04      call FROM_FIXED
4723   2277 51 02 00      add sp, 2
4724   227A             ; --- END FUNCTION CALL
4725   227A             ; --- START RELATIONAL
4726   227A D7            push a
4727   227B 11            mov a, b
4728   227C 3B 2C 6E      mov d, _time_start ; $time_start
4729   227F 2A            mov b, [d]
4730   2280 38 00 00      mov c, 0
4731   2283             ; --- START TERMS
4732   2283 D7            push a
4733   2284 11            mov a, b
4734   2285 3B 2E 6E      mov d, _time_up ; $time_up
4735   2288 2A            mov b, [d]
4736   2289 38 00 00      mov c, 0
4737   228C 56            add b, a
4738   228D E4            pop a
4739   228E             ; --- END TERMS
4740   228E B0            cmp a, b
4741   228F FD 7F         sgt ; >
4742   2291 E4            pop a
4743   2292             ; --- END RELATIONAL
4744   2292 C0 00 00      cmp b, 0
4745   2295 C6 9E 22      je _if126_exit
4746   2298             _if126_TRUE:
4747   2298             ; end_of_time(); 
4748   2298             ; --- START FUNCTION CALL
4749   2298 07 B0 4E      call end_of_time
4750   229B 0A 9E 22      jmp _if126_exit
4751   229E             _if126_exit:
4752   229E             ; if (quad_y != quad_y_old || quad_x != quad_x_old) { 
4753   229E             _if127_cond:
4754   229E 3B 25 6E      mov d, _quad_y ; $quad_y
4755   22A1 2A            mov b, [d]
4756   22A2 38 00 00      mov c, 0
4757   22A5             ; --- START RELATIONAL
4758   22A5 D7            push a
4759   22A6 11            mov a, b
4760   22A7 FA E5 FF      lea d, [bp + -27] ; $quad_y_old
4761   22AA 32            mov bl, [d]
4762   22AB A7 00         mov bh, 0
4763   22AD 38 00 00      mov c, 0
4764   22B0 B0            cmp a, b
4765   22B1 FD 72         sneq ; !=
4766   22B3 E4            pop a
4767   22B4             ; --- END RELATIONAL
4768   22B4             ; --- START LOGICAL OR
4769   22B4 D7            push a
4770   22B5 11            mov a, b
4771   22B6 3B 27 6E      mov d, _quad_x ; $quad_x
4772   22B9 2A            mov b, [d]
4773   22BA 38 00 00      mov c, 0
4774   22BD             ; --- START RELATIONAL
4775   22BD D7            push a
4776   22BE 11            mov a, b
4777   22BF FA E4 FF      lea d, [bp + -28] ; $quad_x_old
4778   22C2 32            mov bl, [d]
4779   22C3 A7 00         mov bh, 0
4780   22C5 38 00 00      mov c, 0
4781   22C8 B0            cmp a, b
4782   22C9 FD 72         sneq ; !=
4783   22CB E4            pop a
4784   22CC             ; --- END RELATIONAL
4785   22CC FD A8         sor a, b ; ||
4786   22CE E4            pop a
4787   22CF             ; --- END LOGICAL OR
4788   22CF C0 00 00      cmp b, 0
4789   22D2 C6 FC 22      je _if127_exit
4790   22D5             _if127_TRUE:
4791   22D5             ; stardate = stardate + TO_FIXED(1); 
4792   22D5 3B 48 6E      mov d, _stardate ; $stardate
4793   22D8 DA            push d
4794   22D9 3B 48 6E      mov d, _stardate ; $stardate
4795   22DC 2A            mov b, [d]
4796   22DD 38 00 00      mov c, 0
4797   22E0             ; --- START TERMS
4798   22E0 D7            push a
4799   22E1 11            mov a, b
4800   22E2             ; --- START FUNCTION CALL
4801   22E2 FD 2E 01 00   mov32 cb, $00000001
4801   22E6 00 00 
4802   22E8 FD AB         swp b
4803   22EA D8            push b
4804   22EB 07 17 04      call TO_FIXED
4805   22EE 51 02 00      add sp, 2
4806   22F1             ; --- END FUNCTION CALL
4807   22F1 56            add b, a
4808   22F2 E4            pop a
4809   22F3             ; --- END TERMS
4810   22F3 E7            pop d
4811   22F4 FD 43         mov [d], b
4812   22F6             ; new_quadrant(); 
4813   22F6             ; --- START FUNCTION CALL
4814   22F6 07 98 12      call new_quadrant
4815   22F9 0A FC 22      jmp _if127_exit
4816   22FC             _if127_exit:
4817   22FC             ; complete_maneuver(warp, n); 
4818   22FC             ; --- START FUNCTION CALL
4819   22FC FA F9 FF      lea d, [bp + -7] ; $n
4820   22FF 2A            mov b, [d]
4821   2300 38 00 00      mov c, 0
4822   2303 FD AB         swp b
4823   2305 D8            push b
4824   2306 FA FB FF      lea d, [bp + -5] ; $warp
4825   2309 2A            mov b, [d]
4826   230A 38 00 00      mov c, 0
4827   230D FD AB         swp b
4828   230F D8            push b
4829   2310 07 01 24      call complete_maneuver
4830   2313 51 04 00      add sp, 4
4831   2316             ; --- END FUNCTION CALL
4832   2316             ; return; 
4833   2316 F9            leave
4834   2317 09            ret
4835   2318 0A 1B 23      jmp _if90_exit
4836   231B             _if90_exit:
4837   231B             ; if (quad[z1+-1][z2+-1] != 		0       ) {	/* Sector not empty */ 
4838   231B             _if128_cond:
4839   231B 3B 4A 6E      mov d, _quad_data ; $quad
4840   231E D7            push a
4841   231F DA            push d
4842   2320 FA F1 FF      lea d, [bp + -15] ; $z1
4843   2323 2A            mov b, [d]
4844   2324 38 00 00      mov c, 0
4845   2327             ; --- START TERMS
4846   2327 D7            push a
4847   2328 11            mov a, b
4848   2329 FD 2E FF FF   mov32 cb, $ffffffff
4848   232D FF FF 
4849   232F 56            add b, a
4850   2330 E4            pop a
4851   2331             ; --- END TERMS
4852   2331 E7            pop d
4853   2332 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
4854   2336 DA            push d
4855   2337 FA EF FF      lea d, [bp + -17] ; $z2
4856   233A 2A            mov b, [d]
4857   233B 38 00 00      mov c, 0
4858   233E             ; --- START TERMS
4859   233E D7            push a
4860   233F 11            mov a, b
4861   2340 FD 2E FF FF   mov32 cb, $ffffffff
4861   2344 FF FF 
4862   2346 56            add b, a
4863   2347 E4            pop a
4864   2348             ; --- END TERMS
4865   2348 E7            pop d
4866   2349 5A            add d, b
4867   234A E4            pop a
4868   234B 32            mov bl, [d]
4869   234C A7 00         mov bh, 0
4870   234E 38 00 00      mov c, 0
4871   2351             ; --- START RELATIONAL
4872   2351 D7            push a
4873   2352 11            mov a, b
4874   2353 FD 2E 00 00   mov32 cb, $00000000
4874   2357 00 00 
4875   2359 B0            cmp a, b
4876   235A FD 72         sneq ; !=
4877   235C E4            pop a
4878   235D             ; --- END RELATIONAL
4879   235D C0 00 00      cmp b, 0
4880   2360 C6 D2 23      je _if128_exit
4881   2363             _if128_TRUE:
4882   2363             ; ship_y = ship_y - x1; 
4883   2363 3B 44 6E      mov d, _ship_y ; $ship_y
4884   2366 DA            push d
4885   2367 3B 44 6E      mov d, _ship_y ; $ship_y
4886   236A 2A            mov b, [d]
4887   236B 38 00 00      mov c, 0
4888   236E             ; --- START TERMS
4889   236E D7            push a
4890   236F 11            mov a, b
4891   2370 FA ED FF      lea d, [bp + -19] ; $x1
4892   2373 2A            mov b, [d]
4893   2374 38 00 00      mov c, 0
4894   2377 60            sub a, b
4895   2378 27            mov b, a
4896   2379 E4            pop a
4897   237A             ; --- END TERMS
4898   237A E7            pop d
4899   237B FD 43         mov [d], b
4900   237D             ; ship_x = ship_x - x2; 
4901   237D 3B 46 6E      mov d, _ship_x ; $ship_x
4902   2380 DA            push d
4903   2381 3B 46 6E      mov d, _ship_x ; $ship_x
4904   2384 2A            mov b, [d]
4905   2385 38 00 00      mov c, 0
4906   2388             ; --- START TERMS
4907   2388 D7            push a
4908   2389 11            mov a, b
4909   238A FA EB FF      lea d, [bp + -21] ; $x2
4910   238D 2A            mov b, [d]
4911   238E 38 00 00      mov c, 0
4912   2391 60            sub a, b
4913   2392 27            mov b, a
4914   2393 E4            pop a
4915   2394             ; --- END TERMS
4916   2394 E7            pop d
4917   2395 FD 43         mov [d], b
4918   2397             ; printf("Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", z1, z2); 
4919   2397             ; --- START FUNCTION CALL
4920   2397 FA EF FF      lea d, [bp + -17] ; $z2
4921   239A 2A            mov b, [d]
4922   239B 38 00 00      mov c, 0
4923   239E FD AB         swp b
4924   23A0 D8            push b
4925   23A1 FA F1 FF      lea d, [bp + -15] ; $z1
4926   23A4 2A            mov b, [d]
4927   23A5 38 00 00      mov c, 0
4928   23A8 FD AB         swp b
4929   23AA D8            push b
4930   23AB 26 BA 75      mov b, _s72 ; "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n"
4931   23AE FD AB         swp b
4932   23B0 D8            push b
4933   23B1 07 36 60      call printf
4934   23B4 51 06 00      add sp, 6
4935   23B7             ; --- END FUNCTION CALL
4936   23B7             ; i = n + 1; 
4937   23B7 FA FF FF      lea d, [bp + -1] ; $i
4938   23BA DA            push d
4939   23BB FA F9 FF      lea d, [bp + -7] ; $n
4940   23BE 2A            mov b, [d]
4941   23BF 38 00 00      mov c, 0
4942   23C2             ; --- START TERMS
4943   23C2 D7            push a
4944   23C3 11            mov a, b
4945   23C4 FD 2E 01 00   mov32 cb, $00000001
4945   23C8 00 00 
4946   23CA 56            add b, a
4947   23CB E4            pop a
4948   23CC             ; --- END TERMS
4949   23CC E7            pop d
4950   23CD FD 43         mov [d], b
4951   23CF 0A D2 23      jmp _if128_exit
4952   23D2             _if128_exit:
4953   23D2             _for89_update:
4954   23D2 FA FF FF      lea d, [bp + -1] ; $i
4955   23D5 2A            mov b, [d]
4956   23D6 38 00 00      mov c, 0
4957   23D9 11            mov a, b
4958   23DA FD 77         inc b
4959   23DC FA FF FF      lea d, [bp + -1] ; $i
4960   23DF FD 43         mov [d], b
4961   23E1 27            mov b, a
4962   23E2 0A EE 1C      jmp _for89_cond
4963   23E5             _for89_exit:
4964   23E5             ; complete_maneuver(warp, n); 
4965   23E5             ; --- START FUNCTION CALL
4966   23E5 FA F9 FF      lea d, [bp + -7] ; $n
4967   23E8 2A            mov b, [d]
4968   23E9 38 00 00      mov c, 0
4969   23EC FD AB         swp b
4970   23EE D8            push b
4971   23EF FA FB FF      lea d, [bp + -5] ; $warp
4972   23F2 2A            mov b, [d]
4973   23F3 38 00 00      mov c, 0
4974   23F6 FD AB         swp b
4975   23F8 D8            push b
4976   23F9 07 01 24      call complete_maneuver
4977   23FC 51 04 00      add sp, 4
4978   23FF             ; --- END FUNCTION CALL
4979   23FF F9            leave
4980   2400 09            ret
4981   2401             
4982   2401             complete_maneuver:
4983   2401 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4984   2404             ; unsigned int         time_used; 
4985   2404 52 02 00      sub sp, 2
4986   2407             ; place_ship(); 
4987   2407             ; --- START FUNCTION CALL
4988   2407 07 45 12      call place_ship
4989   240A             ; maneuver_energy(n); 
4990   240A             ; --- START FUNCTION CALL
4991   240A FA 07 00      lea d, [bp + 7] ; $n
4992   240D 2A            mov b, [d]
4993   240E 38 00 00      mov c, 0
4994   2411 FD AB         swp b
4995   2413 D8            push b
4996   2414 07 BE 24      call maneuver_energy
4997   2417 51 02 00      add sp, 2
4998   241A             ; --- END FUNCTION CALL
4999   241A             ; time_used = TO_FIXED(1); 
5000   241A FA FF FF      lea d, [bp + -1] ; $time_used
5001   241D DA            push d
5002   241E             ; --- START FUNCTION CALL
5003   241E FD 2E 01 00   mov32 cb, $00000001
5003   2422 00 00 
5004   2424 FD AB         swp b
5005   2426 D8            push b
5006   2427 07 17 04      call TO_FIXED
5007   242A 51 02 00      add sp, 2
5008   242D             ; --- END FUNCTION CALL
5009   242D E7            pop d
5010   242E FD 43         mov [d], b
5011   2430             ; if (warp < 100) 
5012   2430             _if129_cond:
5013   2430 FA 05 00      lea d, [bp + 5] ; $warp
5014   2433 2A            mov b, [d]
5015   2434 38 00 00      mov c, 0
5016   2437             ; --- START RELATIONAL
5017   2437 D7            push a
5018   2438 11            mov a, b
5019   2439 FD 2E 64 00   mov32 cb, $00000064
5019   243D 00 00 
5020   243F B0            cmp a, b
5021   2440 FD 75         slu ; < (unsigned)
5022   2442 E4            pop a
5023   2443             ; --- END RELATIONAL
5024   2443 C0 00 00      cmp b, 0
5025   2446 C6 6C 24      je _if129_exit
5026   2449             _if129_TRUE:
5027   2449             ; time_used = TO_FIXED(FROM_FIXED00(warp)); 
5028   2449 FA FF FF      lea d, [bp + -1] ; $time_used
5029   244C DA            push d
5030   244D             ; --- START FUNCTION CALL
5031   244D             ; --- START FUNCTION CALL
5032   244D FA 05 00      lea d, [bp + 5] ; $warp
5033   2450 2A            mov b, [d]
5034   2451 38 00 00      mov c, 0
5035   2454 FD AB         swp b
5036   2456 D8            push b
5037   2457 07 DC 04      call FROM_FIXED00
5038   245A 51 02 00      add sp, 2
5039   245D             ; --- END FUNCTION CALL
5040   245D FD AB         swp b
5041   245F D8            push b
5042   2460 07 17 04      call TO_FIXED
5043   2463 51 02 00      add sp, 2
5044   2466             ; --- END FUNCTION CALL
5045   2466 E7            pop d
5046   2467 FD 43         mov [d], b
5047   2469 0A 6C 24      jmp _if129_exit
5048   246C             _if129_exit:
5049   246C             ; stardate = stardate + time_used; 
5050   246C 3B 48 6E      mov d, _stardate ; $stardate
5051   246F DA            push d
5052   2470 3B 48 6E      mov d, _stardate ; $stardate
5053   2473 2A            mov b, [d]
5054   2474 38 00 00      mov c, 0
5055   2477             ; --- START TERMS
5056   2477 D7            push a
5057   2478 11            mov a, b
5058   2479 FA FF FF      lea d, [bp + -1] ; $time_used
5059   247C 2A            mov b, [d]
5060   247D 38 00 00      mov c, 0
5061   2480 56            add b, a
5062   2481 E4            pop a
5063   2482             ; --- END TERMS
5064   2482 E7            pop d
5065   2483 FD 43         mov [d], b
5066   2485             ; if (FROM_FIXED(stardate) > time_start + time_up) 
5067   2485             _if130_cond:
5068   2485             ; --- START FUNCTION CALL
5069   2485 3B 48 6E      mov d, _stardate ; $stardate
5070   2488 2A            mov b, [d]
5071   2489 38 00 00      mov c, 0
5072   248C FD AB         swp b
5073   248E D8            push b
5074   248F 07 68 04      call FROM_FIXED
5075   2492 51 02 00      add sp, 2
5076   2495             ; --- END FUNCTION CALL
5077   2495             ; --- START RELATIONAL
5078   2495 D7            push a
5079   2496 11            mov a, b
5080   2497 3B 2C 6E      mov d, _time_start ; $time_start
5081   249A 2A            mov b, [d]
5082   249B 38 00 00      mov c, 0
5083   249E             ; --- START TERMS
5084   249E D7            push a
5085   249F 11            mov a, b
5086   24A0 3B 2E 6E      mov d, _time_up ; $time_up
5087   24A3 2A            mov b, [d]
5088   24A4 38 00 00      mov c, 0
5089   24A7 56            add b, a
5090   24A8 E4            pop a
5091   24A9             ; --- END TERMS
5092   24A9 B0            cmp a, b
5093   24AA FD 7F         sgt ; >
5094   24AC E4            pop a
5095   24AD             ; --- END RELATIONAL
5096   24AD C0 00 00      cmp b, 0
5097   24B0 C6 B9 24      je _if130_exit
5098   24B3             _if130_TRUE:
5099   24B3             ; end_of_time(); 
5100   24B3             ; --- START FUNCTION CALL
5101   24B3 07 B0 4E      call end_of_time
5102   24B6 0A B9 24      jmp _if130_exit
5103   24B9             _if130_exit:
5104   24B9             ; short_range_scan(); 
5105   24B9             ; --- START FUNCTION CALL
5106   24B9 07 5E 25      call short_range_scan
5107   24BC F9            leave
5108   24BD 09            ret
5109   24BE             
5110   24BE             maneuver_energy:
5111   24BE F8 00 00      enter 0 ; (push bp; mov bp, sp)
5112   24C1             ; energy = energy - n + 10; 
5113   24C1 3B 6E 6D      mov d, _energy ; $energy
5114   24C4 DA            push d
5115   24C5 3B 6E 6D      mov d, _energy ; $energy
5116   24C8 2A            mov b, [d]
5117   24C9 38 00 00      mov c, 0
5118   24CC             ; --- START TERMS
5119   24CC D7            push a
5120   24CD 11            mov a, b
5121   24CE FA 05 00      lea d, [bp + 5] ; $n
5122   24D1 2A            mov b, [d]
5123   24D2 38 00 00      mov c, 0
5124   24D5 60            sub a, b
5125   24D6 27            mov b, a
5126   24D7 11            mov a, b
5127   24D8 FD 2E 0A 00   mov32 cb, $0000000a
5127   24DC 00 00 
5128   24DE 56            add b, a
5129   24DF E4            pop a
5130   24E0             ; --- END TERMS
5131   24E0 E7            pop d
5132   24E1 FD 43         mov [d], b
5133   24E3             ; if (energy >= 0) 
5134   24E3             _if131_cond:
5135   24E3 3B 6E 6D      mov d, _energy ; $energy
5136   24E6 2A            mov b, [d]
5137   24E7 38 00 00      mov c, 0
5138   24EA             ; --- START RELATIONAL
5139   24EA D7            push a
5140   24EB 11            mov a, b
5141   24EC FD 2E 00 00   mov32 cb, $00000000
5141   24F0 00 00 
5142   24F2 B0            cmp a, b
5143   24F3 FD 80         sge ; >=
5144   24F5 E4            pop a
5145   24F6             ; --- END RELATIONAL
5146   24F6 C0 00 00      cmp b, 0
5147   24F9 C6 01 25      je _if131_exit
5148   24FC             _if131_TRUE:
5149   24FC             ; return; 
5150   24FC F9            leave
5151   24FD 09            ret
5152   24FE 0A 01 25      jmp _if131_exit
5153   2501             _if131_exit:
5154   2501             ; puts("Shield Control supplies energy to complete maneuver.\n"); 
5155   2501             ; --- START FUNCTION CALL
5156   2501 26 FB 75      mov b, _s73 ; "Shield Control supplies energy to complete maneuver.\n"
5157   2504 FD AB         swp b
5158   2506 D8            push b
5159   2507 07 47 69      call puts
5160   250A 51 02 00      add sp, 2
5161   250D             ; --- END FUNCTION CALL
5162   250D             ; shield = shield + energy; 
5163   250D 3B 29 6E      mov d, _shield ; $shield
5164   2510 DA            push d
5165   2511 3B 29 6E      mov d, _shield ; $shield
5166   2514 2A            mov b, [d]
5167   2515 38 00 00      mov c, 0
5168   2518             ; --- START TERMS
5169   2518 D7            push a
5170   2519 11            mov a, b
5171   251A 3B 6E 6D      mov d, _energy ; $energy
5172   251D 2A            mov b, [d]
5173   251E 38 00 00      mov c, 0
5174   2521 56            add b, a
5175   2522 E4            pop a
5176   2523             ; --- END TERMS
5177   2523 E7            pop d
5178   2524 FD 43         mov [d], b
5179   2526             ; energy = 0; 
5180   2526 3B 6E 6D      mov d, _energy ; $energy
5181   2529 DA            push d
5182   252A FD 2E 00 00   mov32 cb, $00000000
5182   252E 00 00 
5183   2530 E7            pop d
5184   2531 FD 43         mov [d], b
5185   2533             ; if (shield <= 0) 
5186   2533             _if132_cond:
5187   2533 3B 29 6E      mov d, _shield ; $shield
5188   2536 2A            mov b, [d]
5189   2537 38 00 00      mov c, 0
5190   253A             ; --- START RELATIONAL
5191   253A D7            push a
5192   253B 11            mov a, b
5193   253C FD 2E 00 00   mov32 cb, $00000000
5193   2540 00 00 
5194   2542 B0            cmp a, b
5195   2543 FD 74         sle ; <= (signed)
5196   2545 E4            pop a
5197   2546             ; --- END RELATIONAL
5198   2546 C0 00 00      cmp b, 0
5199   2549 C6 5C 25      je _if132_exit
5200   254C             _if132_TRUE:
5201   254C             ; shield = 0; 
5202   254C 3B 29 6E      mov d, _shield ; $shield
5203   254F DA            push d
5204   2550 FD 2E 00 00   mov32 cb, $00000000
5204   2554 00 00 
5205   2556 E7            pop d
5206   2557 FD 43         mov [d], b
5207   2559 0A 5C 25      jmp _if132_exit
5208   255C             _if132_exit:
5209   255C F9            leave
5210   255D 09            ret
5211   255E             
5212   255E             short_range_scan:
5213   255E F8 00 00      enter 0 ; (push bp; mov bp, sp)
5214   2561             ; int i, j; 
5215   2561 52 02 00      sub sp, 2
5216   2564 52 02 00      sub sp, 2
5217   2567             ; char *sC = "GREEN"; 
5218   2567 52 02 00      sub sp, 2
5219   256A             ; --- START LOCAL VAR INITIALIZATION
5220   256A FA FB FF      lea d, [bp + -5] ; $sC
5221   256D DA            push d
5222   256E 26 31 76      mov b, _s74 ; "GREEN"
5223   2571 E7            pop d
5224   2572 FD 43         mov [d], b
5225   2574             ; --- END LOCAL VAR INITIALIZATION
5226   2574             ; if (energy < energy0 / 10) 
5227   2574             _if133_cond:
5228   2574 3B 6E 6D      mov d, _energy ; $energy
5229   2577 2A            mov b, [d]
5230   2578 38 00 00      mov c, 0
5231   257B             ; --- START RELATIONAL
5232   257B D7            push a
5233   257C 11            mov a, b
5234   257D 3B 70 6D      mov d, _energy0 ; $energy0
5235   2580 2A            mov b, [d]
5236   2581 38 00 00      mov c, 0
5237   2584             ; --- START FACTORS
5238   2584 D7            push a
5239   2585 FD D8         push g
5240   2587 11            mov a, b
5241   2588 FD 7A         mov g, c
5242   258A FD 2E 0A 00   mov32 cb, $0000000a
5242   258E 00 00 
5243   2590 FD D8         push g ; save 'g' as the div instruction uses it
5244   2592 AE            div a, b ; /, a: quotient, b: remainder
5245   2593 FD F1         pop g
5246   2595 FD 38         mov c, g
5247   2597 27            mov b, a
5248   2598 FD F1         pop g
5249   259A E4            pop a
5250   259B             ; --- END FACTORS
5251   259B B0            cmp a, b
5252   259C FD 73         slt ; < (signed)
5253   259E E4            pop a
5254   259F             ; --- END RELATIONAL
5255   259F C0 00 00      cmp b, 0
5256   25A2 C6 B2 25      je _if133_exit
5257   25A5             _if133_TRUE:
5258   25A5             ; sC = "YELLOW"; 
5259   25A5 FA FB FF      lea d, [bp + -5] ; $sC
5260   25A8 DA            push d
5261   25A9 26 37 76      mov b, _s75 ; "YELLOW"
5262   25AC E7            pop d
5263   25AD FD 43         mov [d], b
5264   25AF 0A B2 25      jmp _if133_exit
5265   25B2             _if133_exit:
5266   25B2             ; if (klingons > 0) 
5267   25B2             _if136_cond:
5268   25B2 3B 20 6E      mov d, _klingons ; $klingons
5269   25B5 32            mov bl, [d]
5270   25B6 A7 00         mov bh, 0
5271   25B8 38 00 00      mov c, 0
5272   25BB             ; --- START RELATIONAL
5273   25BB D7            push a
5274   25BC 11            mov a, b
5275   25BD FD 2E 00 00   mov32 cb, $00000000
5275   25C1 00 00 
5276   25C3 B0            cmp a, b
5277   25C4 FD 81         sgu ; > (unsigned)
5278   25C6 E4            pop a
5279   25C7             ; --- END RELATIONAL
5280   25C7 C0 00 00      cmp b, 0
5281   25CA C6 DA 25      je _if136_exit
5282   25CD             _if136_TRUE:
5283   25CD             ; sC = "*RED*"; 
5284   25CD FA FB FF      lea d, [bp + -5] ; $sC
5285   25D0 DA            push d
5286   25D1 26 3E 76      mov b, _s76 ; "*RED*"
5287   25D4 E7            pop d
5288   25D5 FD 43         mov [d], b
5289   25D7 0A DA 25      jmp _if136_exit
5290   25DA             _if136_exit:
5291   25DA             ; docked = 0; 
5292   25DA 3B 6D 6D      mov d, _docked ; $docked
5293   25DD DA            push d
5294   25DE FD 2E 00 00   mov32 cb, $00000000
5294   25E2 00 00 
5295   25E4 E7            pop d
5296   25E5 FD 3E         mov [d], bl
5297   25E7             ; for (i = (int) (FROM_FIXED00(ship_y) - 1); i <= (int) (FROM_FIXED00(ship_y) + 1); i++) 
5298   25E7             _for137_init:
5299   25E7 FA FF FF      lea d, [bp + -1] ; $i
5300   25EA DA            push d
5301   25EB             ; --- START FUNCTION CALL
5302   25EB 3B 44 6E      mov d, _ship_y ; $ship_y
5303   25EE 2A            mov b, [d]
5304   25EF 38 00 00      mov c, 0
5305   25F2 FD AB         swp b
5306   25F4 D8            push b
5307   25F5 07 DC 04      call FROM_FIXED00
5308   25F8 51 02 00      add sp, 2
5309   25FB             ; --- END FUNCTION CALL
5310   25FB             ; --- START TERMS
5311   25FB D7            push a
5312   25FC 11            mov a, b
5313   25FD FD 2E 01 00   mov32 cb, $00000001
5313   2601 00 00 
5314   2603 60            sub a, b
5315   2604 27            mov b, a
5316   2605 E4            pop a
5317   2606             ; --- END TERMS
5318   2606 E7            pop d
5319   2607 FD 43         mov [d], b
5320   2609             _for137_cond:
5321   2609 FA FF FF      lea d, [bp + -1] ; $i
5322   260C 2A            mov b, [d]
5323   260D 38 00 00      mov c, 0
5324   2610             ; --- START RELATIONAL
5325   2610 D7            push a
5326   2611 11            mov a, b
5327   2612             ; --- START FUNCTION CALL
5328   2612 3B 44 6E      mov d, _ship_y ; $ship_y
5329   2615 2A            mov b, [d]
5330   2616 38 00 00      mov c, 0
5331   2619 FD AB         swp b
5332   261B D8            push b
5333   261C 07 DC 04      call FROM_FIXED00
5334   261F 51 02 00      add sp, 2
5335   2622             ; --- END FUNCTION CALL
5336   2622             ; --- START TERMS
5337   2622 D7            push a
5338   2623 11            mov a, b
5339   2624 FD 2E 01 00   mov32 cb, $00000001
5339   2628 00 00 
5340   262A 56            add b, a
5341   262B E4            pop a
5342   262C             ; --- END TERMS
5343   262C B0            cmp a, b
5344   262D FD 74         sle ; <= (signed)
5345   262F E4            pop a
5346   2630             ; --- END RELATIONAL
5347   2630 C0 00 00      cmp b, 0
5348   2633 C6 A4 27      je _for137_exit
5349   2636             _for137_block:
5350   2636             ; for (j = (int) (FROM_FIXED00(ship_x) - 1); j <= (int) (FROM_FIXED00(ship_x) + 1); j++) 
5351   2636             _for138_init:
5352   2636 FA FD FF      lea d, [bp + -3] ; $j
5353   2639 DA            push d
5354   263A             ; --- START FUNCTION CALL
5355   263A 3B 46 6E      mov d, _ship_x ; $ship_x
5356   263D 2A            mov b, [d]
5357   263E 38 00 00      mov c, 0
5358   2641 FD AB         swp b
5359   2643 D8            push b
5360   2644 07 DC 04      call FROM_FIXED00
5361   2647 51 02 00      add sp, 2
5362   264A             ; --- END FUNCTION CALL
5363   264A             ; --- START TERMS
5364   264A D7            push a
5365   264B 11            mov a, b
5366   264C FD 2E 01 00   mov32 cb, $00000001
5366   2650 00 00 
5367   2652 60            sub a, b
5368   2653 27            mov b, a
5369   2654 E4            pop a
5370   2655             ; --- END TERMS
5371   2655 E7            pop d
5372   2656 FD 43         mov [d], b
5373   2658             _for138_cond:
5374   2658 FA FD FF      lea d, [bp + -3] ; $j
5375   265B 2A            mov b, [d]
5376   265C 38 00 00      mov c, 0
5377   265F             ; --- START RELATIONAL
5378   265F D7            push a
5379   2660 11            mov a, b
5380   2661             ; --- START FUNCTION CALL
5381   2661 3B 46 6E      mov d, _ship_x ; $ship_x
5382   2664 2A            mov b, [d]
5383   2665 38 00 00      mov c, 0
5384   2668 FD AB         swp b
5385   266A D8            push b
5386   266B 07 DC 04      call FROM_FIXED00
5387   266E 51 02 00      add sp, 2
5388   2671             ; --- END FUNCTION CALL
5389   2671             ; --- START TERMS
5390   2671 D7            push a
5391   2672 11            mov a, b
5392   2673 FD 2E 01 00   mov32 cb, $00000001
5392   2677 00 00 
5393   2679 56            add b, a
5394   267A E4            pop a
5395   267B             ; --- END TERMS
5396   267B B0            cmp a, b
5397   267C FD 74         sle ; <= (signed)
5398   267E E4            pop a
5399   267F             ; --- END RELATIONAL
5400   267F C0 00 00      cmp b, 0
5401   2682 C6 91 27      je _for138_exit
5402   2685             _for138_block:
5403   2685             ; if (i >= 1 && i <= 8 && j >= 1 && j <= 8) { 
5404   2685             _if139_cond:
5405   2685 FA FF FF      lea d, [bp + -1] ; $i
5406   2688 2A            mov b, [d]
5407   2689 38 00 00      mov c, 0
5408   268C             ; --- START RELATIONAL
5409   268C D7            push a
5410   268D 11            mov a, b
5411   268E FD 2E 01 00   mov32 cb, $00000001
5411   2692 00 00 
5412   2694 B0            cmp a, b
5413   2695 FD 80         sge ; >=
5414   2697 E4            pop a
5415   2698             ; --- END RELATIONAL
5416   2698             ; --- START LOGICAL AND
5417   2698 D7            push a
5418   2699 11            mov a, b
5419   269A FA FF FF      lea d, [bp + -1] ; $i
5420   269D 2A            mov b, [d]
5421   269E 38 00 00      mov c, 0
5422   26A1             ; --- START RELATIONAL
5423   26A1 D7            push a
5424   26A2 11            mov a, b
5425   26A3 FD 2E 08 00   mov32 cb, $00000008
5425   26A7 00 00 
5426   26A9 B0            cmp a, b
5427   26AA FD 74         sle ; <= (signed)
5428   26AC E4            pop a
5429   26AD             ; --- END RELATIONAL
5430   26AD FD A7         sand a, b
5431   26AF 11            mov a, b
5432   26B0 FA FD FF      lea d, [bp + -3] ; $j
5433   26B3 2A            mov b, [d]
5434   26B4 38 00 00      mov c, 0
5435   26B7             ; --- START RELATIONAL
5436   26B7 D7            push a
5437   26B8 11            mov a, b
5438   26B9 FD 2E 01 00   mov32 cb, $00000001
5438   26BD 00 00 
5439   26BF B0            cmp a, b
5440   26C0 FD 80         sge ; >=
5441   26C2 E4            pop a
5442   26C3             ; --- END RELATIONAL
5443   26C3 FD A7         sand a, b
5444   26C5 11            mov a, b
5445   26C6 FA FD FF      lea d, [bp + -3] ; $j
5446   26C9 2A            mov b, [d]
5447   26CA 38 00 00      mov c, 0
5448   26CD             ; --- START RELATIONAL
5449   26CD D7            push a
5450   26CE 11            mov a, b
5451   26CF FD 2E 08 00   mov32 cb, $00000008
5451   26D3 00 00 
5452   26D5 B0            cmp a, b
5453   26D6 FD 74         sle ; <= (signed)
5454   26D8 E4            pop a
5455   26D9             ; --- END RELATIONAL
5456   26D9 FD A7         sand a, b
5457   26DB E4            pop a
5458   26DC             ; --- END LOGICAL AND
5459   26DC C0 00 00      cmp b, 0
5460   26DF C6 7E 27      je _if139_exit
5461   26E2             _if139_TRUE:
5462   26E2             ; if (quad[i+-1][j+-1] == 		2      ) { 
5463   26E2             _if140_cond:
5464   26E2 3B 4A 6E      mov d, _quad_data ; $quad
5465   26E5 D7            push a
5466   26E6 DA            push d
5467   26E7 FA FF FF      lea d, [bp + -1] ; $i
5468   26EA 2A            mov b, [d]
5469   26EB 38 00 00      mov c, 0
5470   26EE             ; --- START TERMS
5471   26EE D7            push a
5472   26EF 11            mov a, b
5473   26F0 FD 2E FF FF   mov32 cb, $ffffffff
5473   26F4 FF FF 
5474   26F6 56            add b, a
5475   26F7 E4            pop a
5476   26F8             ; --- END TERMS
5477   26F8 E7            pop d
5478   26F9 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
5479   26FD DA            push d
5480   26FE FA FD FF      lea d, [bp + -3] ; $j
5481   2701 2A            mov b, [d]
5482   2702 38 00 00      mov c, 0
5483   2705             ; --- START TERMS
5484   2705 D7            push a
5485   2706 11            mov a, b
5486   2707 FD 2E FF FF   mov32 cb, $ffffffff
5486   270B FF FF 
5487   270D 56            add b, a
5488   270E E4            pop a
5489   270F             ; --- END TERMS
5490   270F E7            pop d
5491   2710 5A            add d, b
5492   2711 E4            pop a
5493   2712 32            mov bl, [d]
5494   2713 A7 00         mov bh, 0
5495   2715 38 00 00      mov c, 0
5496   2718             ; --- START RELATIONAL
5497   2718 D7            push a
5498   2719 11            mov a, b
5499   271A FD 2E 02 00   mov32 cb, $00000002
5499   271E 00 00 
5500   2720 B0            cmp a, b
5501   2721 FD 71         seq ; ==
5502   2723 E4            pop a
5503   2724             ; --- END RELATIONAL
5504   2724 C0 00 00      cmp b, 0
5505   2727 C6 7B 27      je _if140_exit
5506   272A             _if140_TRUE:
5507   272A             ; docked = 1; 
5508   272A 3B 6D 6D      mov d, _docked ; $docked
5509   272D DA            push d
5510   272E FD 2E 01 00   mov32 cb, $00000001
5510   2732 00 00 
5511   2734 E7            pop d
5512   2735 FD 3E         mov [d], bl
5513   2737             ; sC = "DOCKED"; 
5514   2737 FA FB FF      lea d, [bp + -5] ; $sC
5515   273A DA            push d
5516   273B 26 44 76      mov b, _s77 ; "DOCKED"
5517   273E E7            pop d
5518   273F FD 43         mov [d], b
5519   2741             ; energy = energy0; 
5520   2741 3B 6E 6D      mov d, _energy ; $energy
5521   2744 DA            push d
5522   2745 3B 70 6D      mov d, _energy0 ; $energy0
5523   2748 2A            mov b, [d]
5524   2749 38 00 00      mov c, 0
5525   274C E7            pop d
5526   274D FD 43         mov [d], b
5527   274F             ; torps = torps0; 
5528   274F 3B 23 6E      mov d, _torps ; $torps
5529   2752 DA            push d
5530   2753 3B 24 6E      mov d, _torps0 ; $torps0
5531   2756 32            mov bl, [d]
5532   2757 A7 00         mov bh, 0
5533   2759 38 00 00      mov c, 0
5534   275C E7            pop d
5535   275D FD 3E         mov [d], bl
5536   275F             ; puts("Shields dropped for docking purposes."); 
5537   275F             ; --- START FUNCTION CALL
5538   275F 26 4B 76      mov b, _s78 ; "Shields dropped for docking purposes."
5539   2762 FD AB         swp b
5540   2764 D8            push b
5541   2765 07 47 69      call puts
5542   2768 51 02 00      add sp, 2
5543   276B             ; --- END FUNCTION CALL
5544   276B             ; shield = 0; 
5545   276B 3B 29 6E      mov d, _shield ; $shield
5546   276E DA            push d
5547   276F FD 2E 00 00   mov32 cb, $00000000
5547   2773 00 00 
5548   2775 E7            pop d
5549   2776 FD 43         mov [d], b
5550   2778 0A 7B 27      jmp _if140_exit
5551   277B             _if140_exit:
5552   277B 0A 7E 27      jmp _if139_exit
5553   277E             _if139_exit:
5554   277E             _for138_update:
5555   277E FA FD FF      lea d, [bp + -3] ; $j
5556   2781 2A            mov b, [d]
5557   2782 38 00 00      mov c, 0
5558   2785 11            mov a, b
5559   2786 FD 77         inc b
5560   2788 FA FD FF      lea d, [bp + -3] ; $j
5561   278B FD 43         mov [d], b
5562   278D 27            mov b, a
5563   278E 0A 58 26      jmp _for138_cond
5564   2791             _for138_exit:
5565   2791             _for137_update:
5566   2791 FA FF FF      lea d, [bp + -1] ; $i
5567   2794 2A            mov b, [d]
5568   2795 38 00 00      mov c, 0
5569   2798 11            mov a, b
5570   2799 FD 77         inc b
5571   279B FA FF FF      lea d, [bp + -1] ; $i
5572   279E FD 43         mov [d], b
5573   27A0 27            mov b, a
5574   27A1 0A 09 26      jmp _for137_cond
5575   27A4             _for137_exit:
5576   27A4             ; if (damage[2] < 0) { 
5577   27A4             _if141_cond:
5578   27A4 3B 30 6E      mov d, _damage_data ; $damage
5579   27A7 D7            push a
5580   27A8 DA            push d
5581   27A9 FD 2E 02 00   mov32 cb, $00000002
5581   27AD 00 00 
5582   27AF E7            pop d
5583   27B0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5584   27B4 E4            pop a
5585   27B5 2A            mov b, [d]
5586   27B6 38 00 00      mov c, 0
5587   27B9             ; --- START RELATIONAL
5588   27B9 D7            push a
5589   27BA 11            mov a, b
5590   27BB FD 2E 00 00   mov32 cb, $00000000
5590   27BF 00 00 
5591   27C1 B0            cmp a, b
5592   27C2 FD 73         slt ; < (signed)
5593   27C4 E4            pop a
5594   27C5             ; --- END RELATIONAL
5595   27C5 C0 00 00      cmp b, 0
5596   27C8 C6 DC 27      je _if141_exit
5597   27CB             _if141_TRUE:
5598   27CB             ; puts("\n*** Short Range Sensors are out ***"); 
5599   27CB             ; --- START FUNCTION CALL
5600   27CB 26 71 76      mov b, _s79 ; "\n*** Short Range Sensors are out ***"
5601   27CE FD AB         swp b
5602   27D0 D8            push b
5603   27D1 07 47 69      call puts
5604   27D4 51 02 00      add sp, 2
5605   27D7             ; --- END FUNCTION CALL
5606   27D7             ; return; 
5607   27D7 F9            leave
5608   27D8 09            ret
5609   27D9 0A DC 27      jmp _if141_exit
5610   27DC             _if141_exit:
5611   27DC             ; puts(srs_1); 
5612   27DC             ; --- START FUNCTION CALL
5613   27DC 3B 6B 6F      mov d, _srs_1 ; $srs_1
5614   27DF 2A            mov b, [d]
5615   27E0 38 00 00      mov c, 0
5616   27E3 FD AB         swp b
5617   27E5 D8            push b
5618   27E6 07 47 69      call puts
5619   27E9 51 02 00      add sp, 2
5620   27EC             ; --- END FUNCTION CALL
5621   27EC             ; for (i = 0; i < 8; i++) { 
5622   27EC             _for142_init:
5623   27EC FA FF FF      lea d, [bp + -1] ; $i
5624   27EF DA            push d
5625   27F0 FD 2E 00 00   mov32 cb, $00000000
5625   27F4 00 00 
5626   27F6 E7            pop d
5627   27F7 FD 43         mov [d], b
5628   27F9             _for142_cond:
5629   27F9 FA FF FF      lea d, [bp + -1] ; $i
5630   27FC 2A            mov b, [d]
5631   27FD 38 00 00      mov c, 0
5632   2800             ; --- START RELATIONAL
5633   2800 D7            push a
5634   2801 11            mov a, b
5635   2802 FD 2E 08 00   mov32 cb, $00000008
5635   2806 00 00 
5636   2808 B0            cmp a, b
5637   2809 FD 73         slt ; < (signed)
5638   280B E4            pop a
5639   280C             ; --- END RELATIONAL
5640   280C C0 00 00      cmp b, 0
5641   280F C6 66 2A      je _for142_exit
5642   2812             _for142_block:
5643   2812             ; for (j = 0; j < 8; j++) 
5644   2812             _for143_init:
5645   2812 FA FD FF      lea d, [bp + -3] ; $j
5646   2815 DA            push d
5647   2816 FD 2E 00 00   mov32 cb, $00000000
5647   281A 00 00 
5648   281C E7            pop d
5649   281D FD 43         mov [d], b
5650   281F             _for143_cond:
5651   281F FA FD FF      lea d, [bp + -3] ; $j
5652   2822 2A            mov b, [d]
5653   2823 38 00 00      mov c, 0
5654   2826             ; --- START RELATIONAL
5655   2826 D7            push a
5656   2827 11            mov a, b
5657   2828 FD 2E 08 00   mov32 cb, $00000008
5657   282C 00 00 
5658   282E B0            cmp a, b
5659   282F FD 73         slt ; < (signed)
5660   2831 E4            pop a
5661   2832             ; --- END RELATIONAL
5662   2832 C0 00 00      cmp b, 0
5663   2835 C6 85 28      je _for143_exit
5664   2838             _for143_block:
5665   2838             ; puts(tilestr[quad[i][j]]); 
5666   2838             ; --- START FUNCTION CALL
5667   2838 3B 6D 6F      mov d, _tilestr_data ; $tilestr
5668   283B D7            push a
5669   283C DA            push d
5670   283D 3B 4A 6E      mov d, _quad_data ; $quad
5671   2840 D7            push a
5672   2841 DA            push d
5673   2842 FA FF FF      lea d, [bp + -1] ; $i
5674   2845 2A            mov b, [d]
5675   2846 38 00 00      mov c, 0
5676   2849 E7            pop d
5677   284A FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
5678   284E DA            push d
5679   284F FA FD FF      lea d, [bp + -3] ; $j
5680   2852 2A            mov b, [d]
5681   2853 38 00 00      mov c, 0
5682   2856 E7            pop d
5683   2857 5A            add d, b
5684   2858 E4            pop a
5685   2859 32            mov bl, [d]
5686   285A A7 00         mov bh, 0
5687   285C 38 00 00      mov c, 0
5688   285F E7            pop d
5689   2860 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5690   2864 E4            pop a
5691   2865 2A            mov b, [d]
5692   2866 38 00 00      mov c, 0
5693   2869 FD AB         swp b
5694   286B D8            push b
5695   286C 07 47 69      call puts
5696   286F 51 02 00      add sp, 2
5697   2872             ; --- END FUNCTION CALL
5698   2872             _for143_update:
5699   2872 FA FD FF      lea d, [bp + -3] ; $j
5700   2875 2A            mov b, [d]
5701   2876 38 00 00      mov c, 0
5702   2879 11            mov a, b
5703   287A FD 77         inc b
5704   287C FA FD FF      lea d, [bp + -3] ; $j
5705   287F FD 43         mov [d], b
5706   2881 27            mov b, a
5707   2882 0A 1F 28      jmp _for143_cond
5708   2885             _for143_exit:
5709   2885             ; if (i == 0) 
5710   2885             _if144_cond:
5711   2885 FA FF FF      lea d, [bp + -1] ; $i
5712   2888 2A            mov b, [d]
5713   2889 38 00 00      mov c, 0
5714   288C             ; --- START RELATIONAL
5715   288C D7            push a
5716   288D 11            mov a, b
5717   288E FD 2E 00 00   mov32 cb, $00000000
5717   2892 00 00 
5718   2894 B0            cmp a, b
5719   2895 FD 71         seq ; ==
5720   2897 E4            pop a
5721   2898             ; --- END RELATIONAL
5722   2898 C0 00 00      cmp b, 0
5723   289B C6 C0 28      je _if144_exit
5724   289E             _if144_TRUE:
5725   289E             ; printf("    Stardate            %d\n", FROM_FIXED(stardate)); 
5726   289E             ; --- START FUNCTION CALL
5727   289E             ; --- START FUNCTION CALL
5728   289E 3B 48 6E      mov d, _stardate ; $stardate
5729   28A1 2A            mov b, [d]
5730   28A2 38 00 00      mov c, 0
5731   28A5 FD AB         swp b
5732   28A7 D8            push b
5733   28A8 07 68 04      call FROM_FIXED
5734   28AB 51 02 00      add sp, 2
5735   28AE             ; --- END FUNCTION CALL
5736   28AE FD AB         swp b
5737   28B0 D8            push b
5738   28B1 26 96 76      mov b, _s80 ; "    Stardate            %d\n"
5739   28B4 FD AB         swp b
5740   28B6 D8            push b
5741   28B7 07 36 60      call printf
5742   28BA 51 04 00      add sp, 4
5743   28BD             ; --- END FUNCTION CALL
5744   28BD 0A C0 28      jmp _if144_exit
5745   28C0             _if144_exit:
5746   28C0             ; if (i == 1) 
5747   28C0             _if145_cond:
5748   28C0 FA FF FF      lea d, [bp + -1] ; $i
5749   28C3 2A            mov b, [d]
5750   28C4 38 00 00      mov c, 0
5751   28C7             ; --- START RELATIONAL
5752   28C7 D7            push a
5753   28C8 11            mov a, b
5754   28C9 FD 2E 01 00   mov32 cb, $00000001
5754   28CD 00 00 
5755   28CF B0            cmp a, b
5756   28D0 FD 71         seq ; ==
5757   28D2 E4            pop a
5758   28D3             ; --- END RELATIONAL
5759   28D3 C0 00 00      cmp b, 0
5760   28D6 C6 F2 28      je _if145_exit
5761   28D9             _if145_TRUE:
5762   28D9             ; printf("    Condition           %s\n", sC); 
5763   28D9             ; --- START FUNCTION CALL
5764   28D9 FA FB FF      lea d, [bp + -5] ; $sC
5765   28DC 2A            mov b, [d]
5766   28DD 38 00 00      mov c, 0
5767   28E0 FD AB         swp b
5768   28E2 D8            push b
5769   28E3 26 B2 76      mov b, _s81 ; "    Condition           %s\n"
5770   28E6 FD AB         swp b
5771   28E8 D8            push b
5772   28E9 07 36 60      call printf
5773   28EC 51 04 00      add sp, 4
5774   28EF             ; --- END FUNCTION CALL
5775   28EF 0A F2 28      jmp _if145_exit
5776   28F2             _if145_exit:
5777   28F2             ; if (i == 2) 
5778   28F2             _if146_cond:
5779   28F2 FA FF FF      lea d, [bp + -1] ; $i
5780   28F5 2A            mov b, [d]
5781   28F6 38 00 00      mov c, 0
5782   28F9             ; --- START RELATIONAL
5783   28F9 D7            push a
5784   28FA 11            mov a, b
5785   28FB FD 2E 02 00   mov32 cb, $00000002
5785   28FF 00 00 
5786   2901 B0            cmp a, b
5787   2902 FD 71         seq ; ==
5788   2904 E4            pop a
5789   2905             ; --- END RELATIONAL
5790   2905 C0 00 00      cmp b, 0
5791   2908 C6 2E 29      je _if146_exit
5792   290B             _if146_TRUE:
5793   290B             ; printf("    Quadrant            %d, %d\n", quad_y, quad_x); 
5794   290B             ; --- START FUNCTION CALL
5795   290B 3B 27 6E      mov d, _quad_x ; $quad_x
5796   290E 2A            mov b, [d]
5797   290F 38 00 00      mov c, 0
5798   2912 FD AB         swp b
5799   2914 D8            push b
5800   2915 3B 25 6E      mov d, _quad_y ; $quad_y
5801   2918 2A            mov b, [d]
5802   2919 38 00 00      mov c, 0
5803   291C FD AB         swp b
5804   291E D8            push b
5805   291F 26 CE 76      mov b, _s82 ; "    Quadrant            %d, %d\n"
5806   2922 FD AB         swp b
5807   2924 D8            push b
5808   2925 07 36 60      call printf
5809   2928 51 06 00      add sp, 6
5810   292B             ; --- END FUNCTION CALL
5811   292B 0A 2E 29      jmp _if146_exit
5812   292E             _if146_exit:
5813   292E             ; if (i == 3) 
5814   292E             _if147_cond:
5815   292E FA FF FF      lea d, [bp + -1] ; $i
5816   2931 2A            mov b, [d]
5817   2932 38 00 00      mov c, 0
5818   2935             ; --- START RELATIONAL
5819   2935 D7            push a
5820   2936 11            mov a, b
5821   2937 FD 2E 03 00   mov32 cb, $00000003
5821   293B 00 00 
5822   293D B0            cmp a, b
5823   293E FD 71         seq ; ==
5824   2940 E4            pop a
5825   2941             ; --- END RELATIONAL
5826   2941 C0 00 00      cmp b, 0
5827   2944 C6 7C 29      je _if147_exit
5828   2947             _if147_TRUE:
5829   2947             ; printf("    Sector              %d, %d\n", FROM_FIXED00(ship_y), FROM_FIXED00(ship_x)); 
5830   2947             ; --- START FUNCTION CALL
5831   2947             ; --- START FUNCTION CALL
5832   2947 3B 46 6E      mov d, _ship_x ; $ship_x
5833   294A 2A            mov b, [d]
5834   294B 38 00 00      mov c, 0
5835   294E FD AB         swp b
5836   2950 D8            push b
5837   2951 07 DC 04      call FROM_FIXED00
5838   2954 51 02 00      add sp, 2
5839   2957             ; --- END FUNCTION CALL
5840   2957 FD AB         swp b
5841   2959 D8            push b
5842   295A             ; --- START FUNCTION CALL
5843   295A 3B 44 6E      mov d, _ship_y ; $ship_y
5844   295D 2A            mov b, [d]
5845   295E 38 00 00      mov c, 0
5846   2961 FD AB         swp b
5847   2963 D8            push b
5848   2964 07 DC 04      call FROM_FIXED00
5849   2967 51 02 00      add sp, 2
5850   296A             ; --- END FUNCTION CALL
5851   296A FD AB         swp b
5852   296C D8            push b
5853   296D 26 EE 76      mov b, _s83 ; "    Sector              %d, %d\n"
5854   2970 FD AB         swp b
5855   2972 D8            push b
5856   2973 07 36 60      call printf
5857   2976 51 06 00      add sp, 6
5858   2979             ; --- END FUNCTION CALL
5859   2979 0A 7C 29      jmp _if147_exit
5860   297C             _if147_exit:
5861   297C             ; if (i == 4) 
5862   297C             _if148_cond:
5863   297C FA FF FF      lea d, [bp + -1] ; $i
5864   297F 2A            mov b, [d]
5865   2980 38 00 00      mov c, 0
5866   2983             ; --- START RELATIONAL
5867   2983 D7            push a
5868   2984 11            mov a, b
5869   2985 FD 2E 04 00   mov32 cb, $00000004
5869   2989 00 00 
5870   298B B0            cmp a, b
5871   298C FD 71         seq ; ==
5872   298E E4            pop a
5873   298F             ; --- END RELATIONAL
5874   298F C0 00 00      cmp b, 0
5875   2992 C6 B0 29      je _if148_exit
5876   2995             _if148_TRUE:
5877   2995             ; printf("    Photon Torpedoes    %d\n", torps); 
5878   2995             ; --- START FUNCTION CALL
5879   2995 3B 23 6E      mov d, _torps ; $torps
5880   2998 32            mov bl, [d]
5881   2999 A7 00         mov bh, 0
5882   299B 38 00 00      mov c, 0
5883   299E FD AB         swp b
5884   29A0 D8            push b
5885   29A1 26 0E 77      mov b, _s84 ; "    Photon Torpedoes    %d\n"
5886   29A4 FD AB         swp b
5887   29A6 D8            push b
5888   29A7 07 36 60      call printf
5889   29AA 51 04 00      add sp, 4
5890   29AD             ; --- END FUNCTION CALL
5891   29AD 0A B0 29      jmp _if148_exit
5892   29B0             _if148_exit:
5893   29B0             ; if (i == 5) 
5894   29B0             _if149_cond:
5895   29B0 FA FF FF      lea d, [bp + -1] ; $i
5896   29B3 2A            mov b, [d]
5897   29B4 38 00 00      mov c, 0
5898   29B7             ; --- START RELATIONAL
5899   29B7 D7            push a
5900   29B8 11            mov a, b
5901   29B9 FD 2E 05 00   mov32 cb, $00000005
5901   29BD 00 00 
5902   29BF B0            cmp a, b
5903   29C0 FD 71         seq ; ==
5904   29C2 E4            pop a
5905   29C3             ; --- END RELATIONAL
5906   29C3 C0 00 00      cmp b, 0
5907   29C6 C6 ED 29      je _if149_exit
5908   29C9             _if149_TRUE:
5909   29C9             ; printf("    Total Energy        %d\n", energy + shield); 
5910   29C9             ; --- START FUNCTION CALL
5911   29C9 3B 6E 6D      mov d, _energy ; $energy
5912   29CC 2A            mov b, [d]
5913   29CD 38 00 00      mov c, 0
5914   29D0             ; --- START TERMS
5915   29D0 D7            push a
5916   29D1 11            mov a, b
5917   29D2 3B 29 6E      mov d, _shield ; $shield
5918   29D5 2A            mov b, [d]
5919   29D6 38 00 00      mov c, 0
5920   29D9 56            add b, a
5921   29DA E4            pop a
5922   29DB             ; --- END TERMS
5923   29DB FD AB         swp b
5924   29DD D8            push b
5925   29DE 26 2A 77      mov b, _s85 ; "    Total Energy        %d\n"
5926   29E1 FD AB         swp b
5927   29E3 D8            push b
5928   29E4 07 36 60      call printf
5929   29E7 51 04 00      add sp, 4
5930   29EA             ; --- END FUNCTION CALL
5931   29EA 0A ED 29      jmp _if149_exit
5932   29ED             _if149_exit:
5933   29ED             ; if (i == 6) 
5934   29ED             _if150_cond:
5935   29ED FA FF FF      lea d, [bp + -1] ; $i
5936   29F0 2A            mov b, [d]
5937   29F1 38 00 00      mov c, 0
5938   29F4             ; --- START RELATIONAL
5939   29F4 D7            push a
5940   29F5 11            mov a, b
5941   29F6 FD 2E 06 00   mov32 cb, $00000006
5941   29FA 00 00 
5942   29FC B0            cmp a, b
5943   29FD FD 71         seq ; ==
5944   29FF E4            pop a
5945   2A00             ; --- END RELATIONAL
5946   2A00 C0 00 00      cmp b, 0
5947   2A03 C6 1F 2A      je _if150_exit
5948   2A06             _if150_TRUE:
5949   2A06             ; printf("    Shields             %d\n", shield); 
5950   2A06             ; --- START FUNCTION CALL
5951   2A06 3B 29 6E      mov d, _shield ; $shield
5952   2A09 2A            mov b, [d]
5953   2A0A 38 00 00      mov c, 0
5954   2A0D FD AB         swp b
5955   2A0F D8            push b
5956   2A10 26 46 77      mov b, _s86 ; "    Shields             %d\n"
5957   2A13 FD AB         swp b
5958   2A15 D8            push b
5959   2A16 07 36 60      call printf
5960   2A19 51 04 00      add sp, 4
5961   2A1C             ; --- END FUNCTION CALL
5962   2A1C 0A 1F 2A      jmp _if150_exit
5963   2A1F             _if150_exit:
5964   2A1F             ; if (i == 7) 
5965   2A1F             _if151_cond:
5966   2A1F FA FF FF      lea d, [bp + -1] ; $i
5967   2A22 2A            mov b, [d]
5968   2A23 38 00 00      mov c, 0
5969   2A26             ; --- START RELATIONAL
5970   2A26 D7            push a
5971   2A27 11            mov a, b
5972   2A28 FD 2E 07 00   mov32 cb, $00000007
5972   2A2C 00 00 
5973   2A2E B0            cmp a, b
5974   2A2F FD 71         seq ; ==
5975   2A31 E4            pop a
5976   2A32             ; --- END RELATIONAL
5977   2A32 C0 00 00      cmp b, 0
5978   2A35 C6 53 2A      je _if151_exit
5979   2A38             _if151_TRUE:
5980   2A38             ; printf("    Klingons Remaining  %d\n", klingons_left); 
5981   2A38             ; --- START FUNCTION CALL
5982   2A38 3B 22 6E      mov d, _klingons_left ; $klingons_left
5983   2A3B 32            mov bl, [d]
5984   2A3C A7 00         mov bh, 0
5985   2A3E 38 00 00      mov c, 0
5986   2A41 FD AB         swp b
5987   2A43 D8            push b
5988   2A44 26 62 77      mov b, _s87 ; "    Klingons Remaining  %d\n"
5989   2A47 FD AB         swp b
5990   2A49 D8            push b
5991   2A4A 07 36 60      call printf
5992   2A4D 51 04 00      add sp, 4
5993   2A50             ; --- END FUNCTION CALL
5994   2A50 0A 53 2A      jmp _if151_exit
5995   2A53             _if151_exit:
5996   2A53             _for142_update:
5997   2A53 FA FF FF      lea d, [bp + -1] ; $i
5998   2A56 2A            mov b, [d]
5999   2A57 38 00 00      mov c, 0
6000   2A5A 11            mov a, b
6001   2A5B FD 77         inc b
6002   2A5D FA FF FF      lea d, [bp + -1] ; $i
6003   2A60 FD 43         mov [d], b
6004   2A62 27            mov b, a
6005   2A63 0A F9 27      jmp _for142_cond
6006   2A66             _for142_exit:
6007   2A66             ; puts(srs_1); 
6008   2A66             ; --- START FUNCTION CALL
6009   2A66 3B 6B 6F      mov d, _srs_1 ; $srs_1
6010   2A69 2A            mov b, [d]
6011   2A6A 38 00 00      mov c, 0
6012   2A6D FD AB         swp b
6013   2A6F D8            push b
6014   2A70 07 47 69      call puts
6015   2A73 51 02 00      add sp, 2
6016   2A76             ; --- END FUNCTION CALL
6017   2A76             ; putchar('\n'); 
6018   2A76             ; --- START FUNCTION CALL
6019   2A76 FD 2E 0A 00   mov32 cb, $0000000a
6019   2A7A 00 00 
6020   2A7C DD            push bl
6021   2A7D 07 BB 64      call putchar
6022   2A80 51 01 00      add sp, 1
6023   2A83             ; --- END FUNCTION CALL
6024   2A83             ; return; 
6025   2A83 F9            leave
6026   2A84 09            ret
6027   2A85             
6028   2A85             put1bcd:
6029   2A85 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6030   2A88             ; v = v & 0x0F; 
6031   2A88 FA 05 00      lea d, [bp + 5] ; $v
6032   2A8B DA            push d
6033   2A8C FA 05 00      lea d, [bp + 5] ; $v
6034   2A8F 32            mov bl, [d]
6035   2A90 A7 00         mov bh, 0
6036   2A92 38 00 00      mov c, 0
6037   2A95 D7            push a
6038   2A96 11            mov a, b
6039   2A97 FD 2E 0F 00   mov32 cb, $0000000f
6039   2A9B 00 00 
6040   2A9D FD 92         and b, a ; &
6041   2A9F E4            pop a
6042   2AA0 E7            pop d
6043   2AA1 FD 3E         mov [d], bl
6044   2AA3             ; putchar('0' + v); 
6045   2AA3             ; --- START FUNCTION CALL
6046   2AA3 FD 2E 30 00   mov32 cb, $00000030
6046   2AA7 00 00 
6047   2AA9             ; --- START TERMS
6048   2AA9 D7            push a
6049   2AAA 11            mov a, b
6050   2AAB FA 05 00      lea d, [bp + 5] ; $v
6051   2AAE 32            mov bl, [d]
6052   2AAF A7 00         mov bh, 0
6053   2AB1 38 00 00      mov c, 0
6054   2AB4 56            add b, a
6055   2AB5 E4            pop a
6056   2AB6             ; --- END TERMS
6057   2AB6 DD            push bl
6058   2AB7 07 BB 64      call putchar
6059   2ABA 51 01 00      add sp, 1
6060   2ABD             ; --- END FUNCTION CALL
6061   2ABD F9            leave
6062   2ABE 09            ret
6063   2ABF             
6064   2ABF             putbcd:
6065   2ABF F8 00 00      enter 0 ; (push bp; mov bp, sp)
6066   2AC2             ; put1bcd(x >> 8); 
6067   2AC2             ; --- START FUNCTION CALL
6068   2AC2 FA 05 00      lea d, [bp + 5] ; $x
6069   2AC5 2A            mov b, [d]
6070   2AC6 38 00 00      mov c, 0
6071   2AC9             ; --- START SHIFT
6072   2AC9 D7            push a
6073   2ACA 11            mov a, b
6074   2ACB FD 2E 08 00   mov32 cb, $00000008
6074   2ACF 00 00 
6075   2AD1 FD 39         mov c, b
6076   2AD3 A1            shr a, cl
6077   2AD4 27            mov b, a
6078   2AD5 E4            pop a
6079   2AD6             ; --- END SHIFT
6080   2AD6 DD            push bl
6081   2AD7 07 85 2A      call put1bcd
6082   2ADA 51 01 00      add sp, 1
6083   2ADD             ; --- END FUNCTION CALL
6084   2ADD             ; put1bcd(x >> 4); 
6085   2ADD             ; --- START FUNCTION CALL
6086   2ADD FA 05 00      lea d, [bp + 5] ; $x
6087   2AE0 2A            mov b, [d]
6088   2AE1 38 00 00      mov c, 0
6089   2AE4             ; --- START SHIFT
6090   2AE4 D7            push a
6091   2AE5 11            mov a, b
6092   2AE6 FD 2E 04 00   mov32 cb, $00000004
6092   2AEA 00 00 
6093   2AEC FD 39         mov c, b
6094   2AEE A1            shr a, cl
6095   2AEF 27            mov b, a
6096   2AF0 E4            pop a
6097   2AF1             ; --- END SHIFT
6098   2AF1 DD            push bl
6099   2AF2 07 85 2A      call put1bcd
6100   2AF5 51 01 00      add sp, 1
6101   2AF8             ; --- END FUNCTION CALL
6102   2AF8             ; put1bcd(x); 
6103   2AF8             ; --- START FUNCTION CALL
6104   2AF8 FA 05 00      lea d, [bp + 5] ; $x
6105   2AFB 2A            mov b, [d]
6106   2AFC 38 00 00      mov c, 0
6107   2AFF DD            push bl
6108   2B00 07 85 2A      call put1bcd
6109   2B03 51 01 00      add sp, 1
6110   2B06             ; --- END FUNCTION CALL
6111   2B06 F9            leave
6112   2B07 09            ret
6113   2B08             
6114   2B08             long_range_scan:
6115   2B08 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6116   2B0B             ; int i, j; 
6117   2B0B 52 02 00      sub sp, 2
6118   2B0E 52 02 00      sub sp, 2
6119   2B11             ; if (inoperable(3)) 
6120   2B11             _if152_cond:
6121   2B11             ; --- START FUNCTION CALL
6122   2B11 FD 2E 03 00   mov32 cb, $00000003
6122   2B15 00 00 
6123   2B17 DD            push bl
6124   2B18 07 71 09      call inoperable
6125   2B1B 51 01 00      add sp, 1
6126   2B1E             ; --- END FUNCTION CALL
6127   2B1E C0 00 00      cmp b, 0
6128   2B21 C6 29 2B      je _if152_exit
6129   2B24             _if152_TRUE:
6130   2B24             ; return; 
6131   2B24 F9            leave
6132   2B25 09            ret
6133   2B26 0A 29 2B      jmp _if152_exit
6134   2B29             _if152_exit:
6135   2B29             ; printf("Long Range Scan for Quadrant %d, %d\n\n", quad_y, quad_x); 
6136   2B29             ; --- START FUNCTION CALL
6137   2B29 3B 27 6E      mov d, _quad_x ; $quad_x
6138   2B2C 2A            mov b, [d]
6139   2B2D 38 00 00      mov c, 0
6140   2B30 FD AB         swp b
6141   2B32 D8            push b
6142   2B33 3B 25 6E      mov d, _quad_y ; $quad_y
6143   2B36 2A            mov b, [d]
6144   2B37 38 00 00      mov c, 0
6145   2B3A FD AB         swp b
6146   2B3C D8            push b
6147   2B3D 26 7E 77      mov b, _s88 ; "Long Range Scan for Quadrant %d, %d\n\n"
6148   2B40 FD AB         swp b
6149   2B42 D8            push b
6150   2B43 07 36 60      call printf
6151   2B46 51 06 00      add sp, 6
6152   2B49             ; --- END FUNCTION CALL
6153   2B49             ; for (i = quad_y - 1; i <= quad_y + 1; i++) { 
6154   2B49             _for153_init:
6155   2B49 FA FF FF      lea d, [bp + -1] ; $i
6156   2B4C DA            push d
6157   2B4D 3B 25 6E      mov d, _quad_y ; $quad_y
6158   2B50 2A            mov b, [d]
6159   2B51 38 00 00      mov c, 0
6160   2B54             ; --- START TERMS
6161   2B54 D7            push a
6162   2B55 11            mov a, b
6163   2B56 FD 2E 01 00   mov32 cb, $00000001
6163   2B5A 00 00 
6164   2B5C 60            sub a, b
6165   2B5D 27            mov b, a
6166   2B5E E4            pop a
6167   2B5F             ; --- END TERMS
6168   2B5F E7            pop d
6169   2B60 FD 43         mov [d], b
6170   2B62             _for153_cond:
6171   2B62 FA FF FF      lea d, [bp + -1] ; $i
6172   2B65 2A            mov b, [d]
6173   2B66 38 00 00      mov c, 0
6174   2B69             ; --- START RELATIONAL
6175   2B69 D7            push a
6176   2B6A 11            mov a, b
6177   2B6B 3B 25 6E      mov d, _quad_y ; $quad_y
6178   2B6E 2A            mov b, [d]
6179   2B6F 38 00 00      mov c, 0
6180   2B72             ; --- START TERMS
6181   2B72 D7            push a
6182   2B73 11            mov a, b
6183   2B74 FD 2E 01 00   mov32 cb, $00000001
6183   2B78 00 00 
6184   2B7A 56            add b, a
6185   2B7B E4            pop a
6186   2B7C             ; --- END TERMS
6187   2B7C B0            cmp a, b
6188   2B7D FD 74         sle ; <= (signed)
6189   2B7F E4            pop a
6190   2B80             ; --- END RELATIONAL
6191   2B80 C0 00 00      cmp b, 0
6192   2B83 C6 0E 2D      je _for153_exit
6193   2B86             _for153_block:
6194   2B86             ; printf("%s:", lrs_1); 
6195   2B86             ; --- START FUNCTION CALL
6196   2B86 3B 98 6F      mov d, _lrs_1 ; $lrs_1
6197   2B89 2A            mov b, [d]
6198   2B8A 38 00 00      mov c, 0
6199   2B8D FD AB         swp b
6200   2B8F D8            push b
6201   2B90 26 A4 77      mov b, _s89 ; "%s:"
6202   2B93 FD AB         swp b
6203   2B95 D8            push b
6204   2B96 07 36 60      call printf
6205   2B99 51 04 00      add sp, 4
6206   2B9C             ; --- END FUNCTION CALL
6207   2B9C             ; for (j = quad_x - 1; j <= quad_x + 1; j++) { 
6208   2B9C             _for154_init:
6209   2B9C FA FD FF      lea d, [bp + -3] ; $j
6210   2B9F DA            push d
6211   2BA0 3B 27 6E      mov d, _quad_x ; $quad_x
6212   2BA3 2A            mov b, [d]
6213   2BA4 38 00 00      mov c, 0
6214   2BA7             ; --- START TERMS
6215   2BA7 D7            push a
6216   2BA8 11            mov a, b
6217   2BA9 FD 2E 01 00   mov32 cb, $00000001
6217   2BAD 00 00 
6218   2BAF 60            sub a, b
6219   2BB0 27            mov b, a
6220   2BB1 E4            pop a
6221   2BB2             ; --- END TERMS
6222   2BB2 E7            pop d
6223   2BB3 FD 43         mov [d], b
6224   2BB5             _for154_cond:
6225   2BB5 FA FD FF      lea d, [bp + -3] ; $j
6226   2BB8 2A            mov b, [d]
6227   2BB9 38 00 00      mov c, 0
6228   2BBC             ; --- START RELATIONAL
6229   2BBC D7            push a
6230   2BBD 11            mov a, b
6231   2BBE 3B 27 6E      mov d, _quad_x ; $quad_x
6232   2BC1 2A            mov b, [d]
6233   2BC2 38 00 00      mov c, 0
6234   2BC5             ; --- START TERMS
6235   2BC5 D7            push a
6236   2BC6 11            mov a, b
6237   2BC7 FD 2E 01 00   mov32 cb, $00000001
6237   2BCB 00 00 
6238   2BCD 56            add b, a
6239   2BCE E4            pop a
6240   2BCF             ; --- END TERMS
6241   2BCF B0            cmp a, b
6242   2BD0 FD 74         sle ; <= (signed)
6243   2BD2 E4            pop a
6244   2BD3             ; --- END RELATIONAL
6245   2BD3 C0 00 00      cmp b, 0
6246   2BD6 C6 EE 2C      je _for154_exit
6247   2BD9             _for154_block:
6248   2BD9             ; putchar(' '); 
6249   2BD9             ; --- START FUNCTION CALL
6250   2BD9 FD 2E 20 00   mov32 cb, $00000020
6250   2BDD 00 00 
6251   2BDF DD            push bl
6252   2BE0 07 BB 64      call putchar
6253   2BE3 51 01 00      add sp, 1
6254   2BE6             ; --- END FUNCTION CALL
6255   2BE6             ; if (i > 0 && i <= 8 && j > 0 && j <= 8) { 
6256   2BE6             _if155_cond:
6257   2BE6 FA FF FF      lea d, [bp + -1] ; $i
6258   2BE9 2A            mov b, [d]
6259   2BEA 38 00 00      mov c, 0
6260   2BED             ; --- START RELATIONAL
6261   2BED D7            push a
6262   2BEE 11            mov a, b
6263   2BEF FD 2E 00 00   mov32 cb, $00000000
6263   2BF3 00 00 
6264   2BF5 B0            cmp a, b
6265   2BF6 FD 7F         sgt ; >
6266   2BF8 E4            pop a
6267   2BF9             ; --- END RELATIONAL
6268   2BF9             ; --- START LOGICAL AND
6269   2BF9 D7            push a
6270   2BFA 11            mov a, b
6271   2BFB FA FF FF      lea d, [bp + -1] ; $i
6272   2BFE 2A            mov b, [d]
6273   2BFF 38 00 00      mov c, 0
6274   2C02             ; --- START RELATIONAL
6275   2C02 D7            push a
6276   2C03 11            mov a, b
6277   2C04 FD 2E 08 00   mov32 cb, $00000008
6277   2C08 00 00 
6278   2C0A B0            cmp a, b
6279   2C0B FD 74         sle ; <= (signed)
6280   2C0D E4            pop a
6281   2C0E             ; --- END RELATIONAL
6282   2C0E FD A7         sand a, b
6283   2C10 11            mov a, b
6284   2C11 FA FD FF      lea d, [bp + -3] ; $j
6285   2C14 2A            mov b, [d]
6286   2C15 38 00 00      mov c, 0
6287   2C18             ; --- START RELATIONAL
6288   2C18 D7            push a
6289   2C19 11            mov a, b
6290   2C1A FD 2E 00 00   mov32 cb, $00000000
6290   2C1E 00 00 
6291   2C20 B0            cmp a, b
6292   2C21 FD 7F         sgt ; >
6293   2C23 E4            pop a
6294   2C24             ; --- END RELATIONAL
6295   2C24 FD A7         sand a, b
6296   2C26 11            mov a, b
6297   2C27 FA FD FF      lea d, [bp + -3] ; $j
6298   2C2A 2A            mov b, [d]
6299   2C2B 38 00 00      mov c, 0
6300   2C2E             ; --- START RELATIONAL
6301   2C2E D7            push a
6302   2C2F 11            mov a, b
6303   2C30 FD 2E 08 00   mov32 cb, $00000008
6303   2C34 00 00 
6304   2C36 B0            cmp a, b
6305   2C37 FD 74         sle ; <= (signed)
6306   2C39 E4            pop a
6307   2C3A             ; --- END RELATIONAL
6308   2C3A FD A7         sand a, b
6309   2C3C E4            pop a
6310   2C3D             ; --- END LOGICAL AND
6311   2C3D C0 00 00      cmp b, 0
6312   2C40 C6 C3 2C      je _if155_else
6313   2C43             _if155_TRUE:
6314   2C43             ; map[i][j] = map[i][j] |  0x1000		/* Set if this sector was mapped */           ; 
6315   2C43 3B 72 6D      mov d, _map_data ; $map
6316   2C46 D7            push a
6317   2C47 DA            push d
6318   2C48 FA FF FF      lea d, [bp + -1] ; $i
6319   2C4B 2A            mov b, [d]
6320   2C4C 38 00 00      mov c, 0
6321   2C4F E7            pop d
6322   2C50 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6323   2C54 DA            push d
6324   2C55 FA FD FF      lea d, [bp + -3] ; $j
6325   2C58 2A            mov b, [d]
6326   2C59 38 00 00      mov c, 0
6327   2C5C E7            pop d
6328   2C5D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6329   2C61 E4            pop a
6330   2C62 DA            push d
6331   2C63 3B 72 6D      mov d, _map_data ; $map
6332   2C66 D7            push a
6333   2C67 DA            push d
6334   2C68 FA FF FF      lea d, [bp + -1] ; $i
6335   2C6B 2A            mov b, [d]
6336   2C6C 38 00 00      mov c, 0
6337   2C6F E7            pop d
6338   2C70 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6339   2C74 DA            push d
6340   2C75 FA FD FF      lea d, [bp + -3] ; $j
6341   2C78 2A            mov b, [d]
6342   2C79 38 00 00      mov c, 0
6343   2C7C E7            pop d
6344   2C7D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6345   2C81 E4            pop a
6346   2C82 2A            mov b, [d]
6347   2C83 38 00 00      mov c, 0
6348   2C86 D7            push a
6349   2C87 11            mov a, b
6350   2C88 FD 2E 00 10   mov32 cb, $00001000
6350   2C8C 00 00 
6351   2C8E FD 70         or b, a ; |
6352   2C90 E4            pop a
6353   2C91 E7            pop d
6354   2C92 FD 43         mov [d], b
6355   2C94             ; putbcd(map[i][j]); 
6356   2C94             ; --- START FUNCTION CALL
6357   2C94 3B 72 6D      mov d, _map_data ; $map
6358   2C97 D7            push a
6359   2C98 DA            push d
6360   2C99 FA FF FF      lea d, [bp + -1] ; $i
6361   2C9C 2A            mov b, [d]
6362   2C9D 38 00 00      mov c, 0
6363   2CA0 E7            pop d
6364   2CA1 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6365   2CA5 DA            push d
6366   2CA6 FA FD FF      lea d, [bp + -3] ; $j
6367   2CA9 2A            mov b, [d]
6368   2CAA 38 00 00      mov c, 0
6369   2CAD E7            pop d
6370   2CAE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6371   2CB2 E4            pop a
6372   2CB3 2A            mov b, [d]
6373   2CB4 38 00 00      mov c, 0
6374   2CB7 FD AB         swp b
6375   2CB9 D8            push b
6376   2CBA 07 BF 2A      call putbcd
6377   2CBD 51 02 00      add sp, 2
6378   2CC0             ; --- END FUNCTION CALL
6379   2CC0 0A CF 2C      jmp _if155_exit
6380   2CC3             _if155_else:
6381   2CC3             ; puts("***"); 
6382   2CC3             ; --- START FUNCTION CALL
6383   2CC3 26 A8 77      mov b, _s90 ; "***"
6384   2CC6 FD AB         swp b
6385   2CC8 D8            push b
6386   2CC9 07 47 69      call puts
6387   2CCC 51 02 00      add sp, 2
6388   2CCF             ; --- END FUNCTION CALL
6389   2CCF             _if155_exit:
6390   2CCF             ; puts(" :"); 
6391   2CCF             ; --- START FUNCTION CALL
6392   2CCF 26 AC 77      mov b, _s91 ; " :"
6393   2CD2 FD AB         swp b
6394   2CD4 D8            push b
6395   2CD5 07 47 69      call puts
6396   2CD8 51 02 00      add sp, 2
6397   2CDB             ; --- END FUNCTION CALL
6398   2CDB             _for154_update:
6399   2CDB FA FD FF      lea d, [bp + -3] ; $j
6400   2CDE 2A            mov b, [d]
6401   2CDF 38 00 00      mov c, 0
6402   2CE2 11            mov a, b
6403   2CE3 FD 77         inc b
6404   2CE5 FA FD FF      lea d, [bp + -3] ; $j
6405   2CE8 FD 43         mov [d], b
6406   2CEA 27            mov b, a
6407   2CEB 0A B5 2B      jmp _for154_cond
6408   2CEE             _for154_exit:
6409   2CEE             ; putchar('\n'); 
6410   2CEE             ; --- START FUNCTION CALL
6411   2CEE FD 2E 0A 00   mov32 cb, $0000000a
6411   2CF2 00 00 
6412   2CF4 DD            push bl
6413   2CF5 07 BB 64      call putchar
6414   2CF8 51 01 00      add sp, 1
6415   2CFB             ; --- END FUNCTION CALL
6416   2CFB             _for153_update:
6417   2CFB FA FF FF      lea d, [bp + -1] ; $i
6418   2CFE 2A            mov b, [d]
6419   2CFF 38 00 00      mov c, 0
6420   2D02 11            mov a, b
6421   2D03 FD 77         inc b
6422   2D05 FA FF FF      lea d, [bp + -1] ; $i
6423   2D08 FD 43         mov [d], b
6424   2D0A 27            mov b, a
6425   2D0B 0A 62 2B      jmp _for153_cond
6426   2D0E             _for153_exit:
6427   2D0E             ; printf("%s\n", lrs_1); 
6428   2D0E             ; --- START FUNCTION CALL
6429   2D0E 3B 98 6F      mov d, _lrs_1 ; $lrs_1
6430   2D11 2A            mov b, [d]
6431   2D12 38 00 00      mov c, 0
6432   2D15 FD AB         swp b
6433   2D17 D8            push b
6434   2D18 26 AF 77      mov b, _s92 ; "%s\n"
6435   2D1B FD AB         swp b
6436   2D1D D8            push b
6437   2D1E 07 36 60      call printf
6438   2D21 51 04 00      add sp, 4
6439   2D24             ; --- END FUNCTION CALL
6440   2D24 F9            leave
6441   2D25 09            ret
6442   2D26             
6443   2D26             no_klingon:
6444   2D26 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6445   2D29             ; if (klingons <= 0) { 
6446   2D29             _if156_cond:
6447   2D29 3B 20 6E      mov d, _klingons ; $klingons
6448   2D2C 32            mov bl, [d]
6449   2D2D A7 00         mov bh, 0
6450   2D2F 38 00 00      mov c, 0
6451   2D32             ; --- START RELATIONAL
6452   2D32 D7            push a
6453   2D33 11            mov a, b
6454   2D34 FD 2E 00 00   mov32 cb, $00000000
6454   2D38 00 00 
6455   2D3A B0            cmp a, b
6456   2D3B FD 76         sleu ; <= (unsigned)
6457   2D3D E4            pop a
6458   2D3E             ; --- END RELATIONAL
6459   2D3E C0 00 00      cmp b, 0
6460   2D41 C6 5B 2D      je _if156_exit
6461   2D44             _if156_TRUE:
6462   2D44             ; puts("Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"); 
6463   2D44             ; --- START FUNCTION CALL
6464   2D44 26 B3 77      mov b, _s93 ; "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"
6465   2D47 FD AB         swp b
6466   2D49 D8            push b
6467   2D4A 07 47 69      call puts
6468   2D4D 51 02 00      add sp, 2
6469   2D50             ; --- END FUNCTION CALL
6470   2D50             ; return 1; 
6471   2D50 FD 2E 01 00   mov32 cb, $00000001
6471   2D54 00 00 
6472   2D56 F9            leave
6473   2D57 09            ret
6474   2D58 0A 5B 2D      jmp _if156_exit
6475   2D5B             _if156_exit:
6476   2D5B             ; return 0; 
6477   2D5B FD 2E 00 00   mov32 cb, $00000000
6477   2D5F 00 00 
6478   2D61 F9            leave
6479   2D62 09            ret
6480   2D63             
6481   2D63             wipe_klingon:
6482   2D63 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6483   2D66             ; quad[k->y+-1][k->x+-1] = 		0       ; 
6484   2D66 3B 4A 6E      mov d, _quad_data ; $quad
6485   2D69 D7            push a
6486   2D6A DA            push d
6487   2D6B FA 05 00      lea d, [bp + 5] ; $k
6488   2D6E FD 2A         mov d, [d]
6489   2D70 58 00 00      add d, 0
6490   2D73 32            mov bl, [d]
6491   2D74 A7 00         mov bh, 0
6492   2D76 38 00 00      mov c, 0
6493   2D79             ; --- START TERMS
6494   2D79 D7            push a
6495   2D7A 11            mov a, b
6496   2D7B FD 2E FF FF   mov32 cb, $ffffffff
6496   2D7F FF FF 
6497   2D81 56            add b, a
6498   2D82 E4            pop a
6499   2D83             ; --- END TERMS
6500   2D83 E7            pop d
6501   2D84 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
6502   2D88 DA            push d
6503   2D89 FA 05 00      lea d, [bp + 5] ; $k
6504   2D8C FD 2A         mov d, [d]
6505   2D8E 58 01 00      add d, 1
6506   2D91 32            mov bl, [d]
6507   2D92 A7 00         mov bh, 0
6508   2D94 38 00 00      mov c, 0
6509   2D97             ; --- START TERMS
6510   2D97 D7            push a
6511   2D98 11            mov a, b
6512   2D99 FD 2E FF FF   mov32 cb, $ffffffff
6512   2D9D FF FF 
6513   2D9F 56            add b, a
6514   2DA0 E4            pop a
6515   2DA1             ; --- END TERMS
6516   2DA1 E7            pop d
6517   2DA2 5A            add d, b
6518   2DA3 E4            pop a
6519   2DA4 DA            push d
6520   2DA5 FD 2E 00 00   mov32 cb, $00000000
6520   2DA9 00 00 
6521   2DAB E7            pop d
6522   2DAC FD 3E         mov [d], bl
6523   2DAE F9            leave
6524   2DAF 09            ret
6525   2DB0             
6526   2DB0             phaser_control:
6527   2DB0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6528   2DB3             ; int i; 
6529   2DB3 52 02 00      sub sp, 2
6530   2DB6             ; long int        phaser_energy; 
6531   2DB6 52 04 00      sub sp, 4
6532   2DB9             ; long unsigned int         h1; 
6533   2DB9 52 04 00      sub sp, 4
6534   2DBC             ; int h; 
6535   2DBC 52 02 00      sub sp, 2
6536   2DBF             ; struct klingon *k; 
6537   2DBF 52 02 00      sub sp, 2
6538   2DC2             ; k = &kdata; 
6539   2DC2 FA F3 FF      lea d, [bp + -13] ; $k
6540   2DC5 DA            push d
6541   2DC6 3B 14 6E      mov d, _kdata_data ; $kdata
6542   2DC9 2D            mov b, d
6543   2DCA E7            pop d
6544   2DCB FD 43         mov [d], b
6545   2DCD             ; if (inoperable(4)) 
6546   2DCD             _if157_cond:
6547   2DCD             ; --- START FUNCTION CALL
6548   2DCD FD 2E 04 00   mov32 cb, $00000004
6548   2DD1 00 00 
6549   2DD3 DD            push bl
6550   2DD4 07 71 09      call inoperable
6551   2DD7 51 01 00      add sp, 1
6552   2DDA             ; --- END FUNCTION CALL
6553   2DDA C0 00 00      cmp b, 0
6554   2DDD C6 E5 2D      je _if157_exit
6555   2DE0             _if157_TRUE:
6556   2DE0             ; return; 
6557   2DE0 F9            leave
6558   2DE1 09            ret
6559   2DE2 0A E5 2D      jmp _if157_exit
6560   2DE5             _if157_exit:
6561   2DE5             ; if (no_klingon()) 
6562   2DE5             _if158_cond:
6563   2DE5             ; --- START FUNCTION CALL
6564   2DE5 07 26 2D      call no_klingon
6565   2DE8 C0 00 00      cmp b, 0
6566   2DEB C6 F3 2D      je _if158_exit
6567   2DEE             _if158_TRUE:
6568   2DEE             ; return; 
6569   2DEE F9            leave
6570   2DEF 09            ret
6571   2DF0 0A F3 2D      jmp _if158_exit
6572   2DF3             _if158_exit:
6573   2DF3             ; if (damage[8] < 0) 
6574   2DF3             _if159_cond:
6575   2DF3 3B 30 6E      mov d, _damage_data ; $damage
6576   2DF6 D7            push a
6577   2DF7 DA            push d
6578   2DF8 FD 2E 08 00   mov32 cb, $00000008
6578   2DFC 00 00 
6579   2DFE E7            pop d
6580   2DFF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6581   2E03 E4            pop a
6582   2E04 2A            mov b, [d]
6583   2E05 38 00 00      mov c, 0
6584   2E08             ; --- START RELATIONAL
6585   2E08 D7            push a
6586   2E09 11            mov a, b
6587   2E0A FD 2E 00 00   mov32 cb, $00000000
6587   2E0E 00 00 
6588   2E10 B0            cmp a, b
6589   2E11 FD 73         slt ; < (signed)
6590   2E13 E4            pop a
6591   2E14             ; --- END RELATIONAL
6592   2E14 C0 00 00      cmp b, 0
6593   2E17 C6 29 2E      je _if159_exit
6594   2E1A             _if159_TRUE:
6595   2E1A             ; puts("Computer failure hampers accuracy."); 
6596   2E1A             ; --- START FUNCTION CALL
6597   2E1A 26 04 78      mov b, _s94 ; "Computer failure hampers accuracy."
6598   2E1D FD AB         swp b
6599   2E1F D8            push b
6600   2E20 07 47 69      call puts
6601   2E23 51 02 00      add sp, 2
6602   2E26             ; --- END FUNCTION CALL
6603   2E26 0A 29 2E      jmp _if159_exit
6604   2E29             _if159_exit:
6605   2E29             ; printf("Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", energy); 
6606   2E29             ; --- START FUNCTION CALL
6607   2E29 3B 6E 6D      mov d, _energy ; $energy
6608   2E2C 2A            mov b, [d]
6609   2E2D 38 00 00      mov c, 0
6610   2E30 FD AB         swp b
6611   2E32 D8            push b
6612   2E33 26 27 78      mov b, _s95 ; "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: "
6613   2E36 FD AB         swp b
6614   2E38 D8            push b
6615   2E39 07 36 60      call printf
6616   2E3C 51 04 00      add sp, 4
6617   2E3F             ; --- END FUNCTION CALL
6618   2E3F             ; phaser_energy = input_int(); 
6619   2E3F FA FB FF      lea d, [bp + -5] ; $phaser_energy
6620   2E42 DA            push d
6621   2E43             ; --- START FUNCTION CALL
6622   2E43 07 B2 08      call input_int
6623   2E46 E7            pop d
6624   2E47 FD 43         mov [d], b
6625   2E49 26 00 00      mov b, 0
6626   2E4C FD 44 02 00   mov [d + 2], b
6627   2E50             ; if (phaser_energy <= 0) 
6628   2E50             _if160_cond:
6629   2E50 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6630   2E53 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6631   2E56 FD 39         mov c, b ; And place it into C
6632   2E58 2A            mov b, [d] ; Lower Word in B
6633   2E59             ; --- START RELATIONAL
6634   2E59 D7            push a
6635   2E5A FD D8         push g
6636   2E5C 11            mov a, b
6637   2E5D FD 7A         mov g, c
6638   2E5F FD 2E 00 00   mov32 cb, $00000000
6638   2E63 00 00 
6639   2E65 FD AF         cmp32 ga, cb
6640   2E67 FD 74         sle
6641   2E69 FD F1         pop g
6642   2E6B E4            pop a
6643   2E6C             ; --- END RELATIONAL
6644   2E6C C0 00 00      cmp b, 0
6645   2E6F C6 77 2E      je _if160_exit
6646   2E72             _if160_TRUE:
6647   2E72             ; return; 
6648   2E72 F9            leave
6649   2E73 09            ret
6650   2E74 0A 77 2E      jmp _if160_exit
6651   2E77             _if160_exit:
6652   2E77             ; if (energy - phaser_energy < 0) { 
6653   2E77             _if161_cond:
6654   2E77 3B 6E 6D      mov d, _energy ; $energy
6655   2E7A 2A            mov b, [d]
6656   2E7B 38 00 00      mov c, 0
6657   2E7E             ; --- START TERMS
6658   2E7E D7            push a
6659   2E7F 11            mov a, b
6660   2E80 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6661   2E83 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6662   2E86 FD 39         mov c, b ; And place it into C
6663   2E88 2A            mov b, [d] ; Lower Word in B
6664   2E89 FD 1C         sub32 ga, cb
6665   2E8B 27            mov b, a
6666   2E8C FD 38         mov c, g
6667   2E8E E4            pop a
6668   2E8F             ; --- END TERMS
6669   2E8F             ; --- START RELATIONAL
6670   2E8F D7            push a
6671   2E90 FD D8         push g
6672   2E92 11            mov a, b
6673   2E93 FD 7A         mov g, c
6674   2E95 FD 2E 00 00   mov32 cb, $00000000
6674   2E99 00 00 
6675   2E9B FD AF         cmp32 ga, cb
6676   2E9D FD 73         slt ; <
6677   2E9F FD F1         pop g
6678   2EA1 E4            pop a
6679   2EA2             ; --- END RELATIONAL
6680   2EA2 C0 00 00      cmp b, 0
6681   2EA5 C6 B9 2E      je _if161_exit
6682   2EA8             _if161_TRUE:
6683   2EA8             ; puts("Not enough energy available.\n"); 
6684   2EA8             ; --- START FUNCTION CALL
6685   2EA8 26 7A 78      mov b, _s96 ; "Not enough energy available.\n"
6686   2EAB FD AB         swp b
6687   2EAD D8            push b
6688   2EAE 07 47 69      call puts
6689   2EB1 51 02 00      add sp, 2
6690   2EB4             ; --- END FUNCTION CALL
6691   2EB4             ; return; 
6692   2EB4 F9            leave
6693   2EB5 09            ret
6694   2EB6 0A B9 2E      jmp _if161_exit
6695   2EB9             _if161_exit:
6696   2EB9             ; energy = energy -  phaser_energy; 
6697   2EB9 3B 6E 6D      mov d, _energy ; $energy
6698   2EBC DA            push d
6699   2EBD 3B 6E 6D      mov d, _energy ; $energy
6700   2EC0 2A            mov b, [d]
6701   2EC1 38 00 00      mov c, 0
6702   2EC4             ; --- START TERMS
6703   2EC4 D7            push a
6704   2EC5 11            mov a, b
6705   2EC6 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6706   2EC9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6707   2ECC FD 39         mov c, b ; And place it into C
6708   2ECE 2A            mov b, [d] ; Lower Word in B
6709   2ECF FD 1C         sub32 ga, cb
6710   2ED1 27            mov b, a
6711   2ED2 FD 38         mov c, g
6712   2ED4 E4            pop a
6713   2ED5             ; --- END TERMS
6714   2ED5 E7            pop d
6715   2ED6 FD 43         mov [d], b
6716   2ED8             ; if (damage[8] < 0) 
6717   2ED8             _if162_cond:
6718   2ED8 3B 30 6E      mov d, _damage_data ; $damage
6719   2EDB D7            push a
6720   2EDC DA            push d
6721   2EDD FD 2E 08 00   mov32 cb, $00000008
6721   2EE1 00 00 
6722   2EE3 E7            pop d
6723   2EE4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6724   2EE8 E4            pop a
6725   2EE9 2A            mov b, [d]
6726   2EEA 38 00 00      mov c, 0
6727   2EED             ; --- START RELATIONAL
6728   2EED D7            push a
6729   2EEE 11            mov a, b
6730   2EEF FD 2E 00 00   mov32 cb, $00000000
6730   2EF3 00 00 
6731   2EF5 B0            cmp a, b
6732   2EF6 FD 73         slt ; < (signed)
6733   2EF8 E4            pop a
6734   2EF9             ; --- END RELATIONAL
6735   2EF9 C0 00 00      cmp b, 0
6736   2EFC C6 67 2F      je _if162_else
6737   2EFF             _if162_TRUE:
6738   2EFF             ; phaser_energy =phaser_energy * get_rand(100); 
6739   2EFF FA FB FF      lea d, [bp + -5] ; $phaser_energy
6740   2F02 DA            push d
6741   2F03 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6742   2F06 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6743   2F09 FD 39         mov c, b ; And place it into C
6744   2F0B 2A            mov b, [d] ; Lower Word in B
6745   2F0C             ; --- START FACTORS
6746   2F0C D7            push a
6747   2F0D FD D8         push g
6748   2F0F 11            mov a, b
6749   2F10 FD 7A         mov g, c
6750   2F12             ; --- START FUNCTION CALL
6751   2F12 FD 2E 64 00   mov32 cb, $00000064
6751   2F16 00 00 
6752   2F18 FD AB         swp b
6753   2F1A D8            push b
6754   2F1B 07 FF 04      call get_rand
6755   2F1E 51 02 00      add sp, 2
6756   2F21             ; --- END FUNCTION CALL
6757   2F21 D7            push a     ; save left operand
6758   2F22 8E            xor a, b   ; xor sign bits
6759   2F23 FD AA         swp a      ; swap bytes
6760   2F25 83            mov cl, al ; save result of xor into 'dl'
6761   2F26 E4            pop a      ; restore left side operator
6762   2F27 DF            push cl    ; save result of xor above
6763   2F28 FD AA         swp a  
6764   2F2A 93 80         test al, $80  
6765   2F2C FD AA         swp a  
6766   2F2E C6 33 2F      jz skip_invert_a_164  
6767   2F31 FD 95         neg a 
6768   2F33             skip_invert_a_164:   
6769   2F33 FD AB         swp b
6770   2F35 FD 93 80      test bl, $80  
6771   2F38 FD AB         swp b
6772   2F3A C6 3F 2F      jz skip_invert_b_164  
6773   2F3D FD 97         neg b 
6774   2F3F             skip_invert_b_164:   
6775   2F3F AC            mul a, b ; *
6776   2F40 FD 78         mov g, a
6777   2F42 11            mov a, b
6778   2F43 EA            pop bl
6779   2F44 FD 93 80      test bl, $80
6780   2F47 C6 54 2F      jz _same_signs_164
6781   2F4A 2F            mov bl, al
6782   2F4B 95            not a
6783   2F4C FD 97         neg b
6784   2F4E 5B 00 00      adc a, 0
6785   2F51 FD 78         mov g, a
6786   2F53 11            mov a, b
6787   2F54             _same_signs_164:
6788   2F54 FD 38         mov c, g
6789   2F56 27            mov b, a
6790   2F57 FD F1         pop g
6791   2F59 E4            pop a
6792   2F5A             ; --- END FACTORS
6793   2F5A E7            pop d
6794   2F5B FD 43         mov [d], b
6795   2F5D 26 00 00      mov b, 0
6796   2F60 FD 44 02 00   mov [d + 2], b
6797   2F64 0A C3 2F      jmp _if162_exit
6798   2F67             _if162_else:
6799   2F67             ; phaser_energy = phaser_energy* 100; 
6800   2F67 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6801   2F6A DA            push d
6802   2F6B FA FB FF      lea d, [bp + -5] ; $phaser_energy
6803   2F6E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6804   2F71 FD 39         mov c, b ; And place it into C
6805   2F73 2A            mov b, [d] ; Lower Word in B
6806   2F74             ; --- START FACTORS
6807   2F74 D7            push a
6808   2F75 FD D8         push g
6809   2F77 11            mov a, b
6810   2F78 FD 7A         mov g, c
6811   2F7A FD 2E 64 00   mov32 cb, $00000064
6811   2F7E 00 00 
6812   2F80 D7            push a     ; save left operand
6813   2F81 8E            xor a, b   ; xor sign bits
6814   2F82 FD AA         swp a      ; swap bytes
6815   2F84 83            mov cl, al ; save result of xor into 'dl'
6816   2F85 E4            pop a      ; restore left side operator
6817   2F86 DF            push cl    ; save result of xor above
6818   2F87 FD AA         swp a  
6819   2F89 93 80         test al, $80  
6820   2F8B FD AA         swp a  
6821   2F8D C6 92 2F      jz skip_invert_a_166  
6822   2F90 FD 95         neg a 
6823   2F92             skip_invert_a_166:   
6824   2F92 FD AB         swp b
6825   2F94 FD 93 80      test bl, $80  
6826   2F97 FD AB         swp b
6827   2F99 C6 9E 2F      jz skip_invert_b_166  
6828   2F9C FD 97         neg b 
6829   2F9E             skip_invert_b_166:   
6830   2F9E AC            mul a, b ; *
6831   2F9F FD 78         mov g, a
6832   2FA1 11            mov a, b
6833   2FA2 EA            pop bl
6834   2FA3 FD 93 80      test bl, $80
6835   2FA6 C6 B3 2F      jz _same_signs_166
6836   2FA9 2F            mov bl, al
6837   2FAA 95            not a
6838   2FAB FD 97         neg b
6839   2FAD 5B 00 00      adc a, 0
6840   2FB0 FD 78         mov g, a
6841   2FB2 11            mov a, b
6842   2FB3             _same_signs_166:
6843   2FB3 FD 38         mov c, g
6844   2FB5 27            mov b, a
6845   2FB6 FD F1         pop g
6846   2FB8 E4            pop a
6847   2FB9             ; --- END FACTORS
6848   2FB9 E7            pop d
6849   2FBA FD 43         mov [d], b
6850   2FBC 26 00 00      mov b, 0
6851   2FBF FD 44 02 00   mov [d + 2], b
6852   2FC3             _if162_exit:
6853   2FC3             ; h1 = phaser_energy / klingons; 
6854   2FC3 FA F7 FF      lea d, [bp + -9] ; $h1
6855   2FC6 DA            push d
6856   2FC7 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6857   2FCA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6858   2FCD FD 39         mov c, b ; And place it into C
6859   2FCF 2A            mov b, [d] ; Lower Word in B
6860   2FD0             ; --- START FACTORS
6861   2FD0 D7            push a
6862   2FD1 FD D8         push g
6863   2FD3 11            mov a, b
6864   2FD4 FD 7A         mov g, c
6865   2FD6 3B 20 6E      mov d, _klingons ; $klingons
6866   2FD9 32            mov bl, [d]
6867   2FDA A7 00         mov bh, 0
6868   2FDC 38 00 00      mov c, 0
6869   2FDF FD D8         push g ; save 'g' as the div instruction uses it
6870   2FE1 AE            div a, b ; /, a: quotient, b: remainder
6871   2FE2 FD F1         pop g
6872   2FE4 FD 38         mov c, g
6873   2FE6 27            mov b, a
6874   2FE7 FD F1         pop g
6875   2FE9 E4            pop a
6876   2FEA             ; --- END FACTORS
6877   2FEA E7            pop d
6878   2FEB FD 43         mov [d], b
6879   2FED 26 00 00      mov b, 0
6880   2FF0 FD 44 02 00   mov [d + 2], b
6881   2FF4             ; for (i = 0; i <= 2; i++) { 
6882   2FF4             _for169_init:
6883   2FF4 FA FF FF      lea d, [bp + -1] ; $i
6884   2FF7 DA            push d
6885   2FF8 FD 2E 00 00   mov32 cb, $00000000
6885   2FFC 00 00 
6886   2FFE E7            pop d
6887   2FFF FD 43         mov [d], b
6888   3001             _for169_cond:
6889   3001 FA FF FF      lea d, [bp + -1] ; $i
6890   3004 2A            mov b, [d]
6891   3005 38 00 00      mov c, 0
6892   3008             ; --- START RELATIONAL
6893   3008 D7            push a
6894   3009 11            mov a, b
6895   300A FD 2E 02 00   mov32 cb, $00000002
6895   300E 00 00 
6896   3010 B0            cmp a, b
6897   3011 FD 74         sle ; <= (signed)
6898   3013 E4            pop a
6899   3014             ; --- END RELATIONAL
6900   3014 C0 00 00      cmp b, 0
6901   3017 C6 1A 33      je _for169_exit
6902   301A             _for169_block:
6903   301A             ; if (k->energy > 0) { 
6904   301A             _if170_cond:
6905   301A FA F3 FF      lea d, [bp + -13] ; $k
6906   301D FD 2A         mov d, [d]
6907   301F 58 02 00      add d, 2
6908   3022 2A            mov b, [d]
6909   3023 38 00 00      mov c, 0
6910   3026             ; --- START RELATIONAL
6911   3026 D7            push a
6912   3027 11            mov a, b
6913   3028 FD 2E 00 00   mov32 cb, $00000000
6913   302C 00 00 
6914   302E B0            cmp a, b
6915   302F FD 7F         sgt ; >
6916   3031 E4            pop a
6917   3032             ; --- END RELATIONAL
6918   3032 C0 00 00      cmp b, 0
6919   3035 C6 F5 32      je _if170_exit
6920   3038             _if170_TRUE:
6921   3038             ; h1 = h1 * (get_rand(100) + 200); 
6922   3038 FA F7 FF      lea d, [bp + -9] ; $h1
6923   303B DA            push d
6924   303C FA F7 FF      lea d, [bp + -9] ; $h1
6925   303F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6926   3042 FD 39         mov c, b ; And place it into C
6927   3044 2A            mov b, [d] ; Lower Word in B
6928   3045             ; --- START FACTORS
6929   3045 D7            push a
6930   3046 FD D8         push g
6931   3048 11            mov a, b
6932   3049 FD 7A         mov g, c
6933   304B             ; --- START FUNCTION CALL
6934   304B FD 2E 64 00   mov32 cb, $00000064
6934   304F 00 00 
6935   3051 FD AB         swp b
6936   3053 D8            push b
6937   3054 07 FF 04      call get_rand
6938   3057 51 02 00      add sp, 2
6939   305A             ; --- END FUNCTION CALL
6940   305A             ; --- START TERMS
6941   305A D7            push a
6942   305B 11            mov a, b
6943   305C FD 2E C8 00   mov32 cb, $000000c8
6943   3060 00 00 
6944   3062 56            add b, a
6945   3063 E4            pop a
6946   3064             ; --- END TERMS
6947   3064 D7            push a     ; save left operand
6948   3065 8E            xor a, b   ; xor sign bits
6949   3066 FD AA         swp a      ; swap bytes
6950   3068 83            mov cl, al ; save result of xor into 'dl'
6951   3069 E4            pop a      ; restore left side operator
6952   306A DF            push cl    ; save result of xor above
6953   306B FD AA         swp a  
6954   306D 93 80         test al, $80  
6955   306F FD AA         swp a  
6956   3071 C6 76 30      jz skip_invert_a_172  
6957   3074 FD 95         neg a 
6958   3076             skip_invert_a_172:   
6959   3076 FD AB         swp b
6960   3078 FD 93 80      test bl, $80  
6961   307B FD AB         swp b
6962   307D C6 82 30      jz skip_invert_b_172  
6963   3080 FD 97         neg b 
6964   3082             skip_invert_b_172:   
6965   3082 AC            mul a, b ; *
6966   3083 FD 78         mov g, a
6967   3085 11            mov a, b
6968   3086 EA            pop bl
6969   3087 FD 93 80      test bl, $80
6970   308A C6 97 30      jz _same_signs_172
6971   308D 2F            mov bl, al
6972   308E 95            not a
6973   308F FD 97         neg b
6974   3091 5B 00 00      adc a, 0
6975   3094 FD 78         mov g, a
6976   3096 11            mov a, b
6977   3097             _same_signs_172:
6978   3097 FD 38         mov c, g
6979   3099 27            mov b, a
6980   309A FD F1         pop g
6981   309C E4            pop a
6982   309D             ; --- END FACTORS
6983   309D E7            pop d
6984   309E FD 43         mov [d], b
6985   30A0 26 00 00      mov b, 0
6986   30A3 FD 44 02 00   mov [d + 2], b
6987   30A7             ; h1 =h1/ distance_to(k); 
6988   30A7 FA F7 FF      lea d, [bp + -9] ; $h1
6989   30AA DA            push d
6990   30AB FA F7 FF      lea d, [bp + -9] ; $h1
6991   30AE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6992   30B1 FD 39         mov c, b ; And place it into C
6993   30B3 2A            mov b, [d] ; Lower Word in B
6994   30B4             ; --- START FACTORS
6995   30B4 D7            push a
6996   30B5 FD D8         push g
6997   30B7 11            mov a, b
6998   30B8 FD 7A         mov g, c
6999   30BA             ; --- START FUNCTION CALL
7000   30BA FA F3 FF      lea d, [bp + -13] ; $k
7001   30BD 2A            mov b, [d]
7002   30BE 38 00 00      mov c, 0
7003   30C1 FD AB         swp b
7004   30C3 D8            push b
7005   30C4 07 1B 5D      call distance_to
7006   30C7 51 02 00      add sp, 2
7007   30CA             ; --- END FUNCTION CALL
7008   30CA FD D8         push g ; save 'g' as the div instruction uses it
7009   30CC AE            div a, b ; /, a: quotient, b: remainder
7010   30CD FD F1         pop g
7011   30CF FD 38         mov c, g
7012   30D1 27            mov b, a
7013   30D2 FD F1         pop g
7014   30D4 E4            pop a
7015   30D5             ; --- END FACTORS
7016   30D5 E7            pop d
7017   30D6 FD 43         mov [d], b
7018   30D8 26 00 00      mov b, 0
7019   30DB FD 44 02 00   mov [d + 2], b
7020   30DF             ; if (h1 <= 15 * k->energy) {	/* was 0.15 */ 
7021   30DF             _if175_cond:
7022   30DF FA F7 FF      lea d, [bp + -9] ; $h1
7023   30E2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7024   30E5 FD 39         mov c, b ; And place it into C
7025   30E7 2A            mov b, [d] ; Lower Word in B
7026   30E8             ; --- START RELATIONAL
7027   30E8 D7            push a
7028   30E9 FD D8         push g
7029   30EB 11            mov a, b
7030   30EC FD 7A         mov g, c
7031   30EE FD 2E 0F 00   mov32 cb, $0000000f
7031   30F2 00 00 
7032   30F4             ; --- START FACTORS
7033   30F4 D7            push a
7034   30F5 FD D8         push g
7035   30F7 11            mov a, b
7036   30F8 FD 7A         mov g, c
7037   30FA FA F3 FF      lea d, [bp + -13] ; $k
7038   30FD FD 2A         mov d, [d]
7039   30FF 58 02 00      add d, 2
7040   3102 2A            mov b, [d]
7041   3103 38 00 00      mov c, 0
7042   3106 D7            push a     ; save left operand
7043   3107 8E            xor a, b   ; xor sign bits
7044   3108 FD AA         swp a      ; swap bytes
7045   310A 83            mov cl, al ; save result of xor into 'dl'
7046   310B E4            pop a      ; restore left side operator
7047   310C DF            push cl    ; save result of xor above
7048   310D FD AA         swp a  
7049   310F 93 80         test al, $80  
7050   3111 FD AA         swp a  
7051   3113 C6 18 31      jz skip_invert_a_177  
7052   3116 FD 95         neg a 
7053   3118             skip_invert_a_177:   
7054   3118 FD AB         swp b
7055   311A FD 93 80      test bl, $80  
7056   311D FD AB         swp b
7057   311F C6 24 31      jz skip_invert_b_177  
7058   3122 FD 97         neg b 
7059   3124             skip_invert_b_177:   
7060   3124 AC            mul a, b ; *
7061   3125 FD 78         mov g, a
7062   3127 11            mov a, b
7063   3128 EA            pop bl
7064   3129 FD 93 80      test bl, $80
7065   312C C6 39 31      jz _same_signs_177
7066   312F 2F            mov bl, al
7067   3130 95            not a
7068   3131 FD 97         neg b
7069   3133 5B 00 00      adc a, 0
7070   3136 FD 78         mov g, a
7071   3138 11            mov a, b
7072   3139             _same_signs_177:
7073   3139 FD 38         mov c, g
7074   313B 27            mov b, a
7075   313C FD F1         pop g
7076   313E E4            pop a
7077   313F             ; --- END FACTORS
7078   313F FD AF         cmp32 ga, cb
7079   3141 FD 76         sleu
7080   3143 FD F1         pop g
7081   3145 E4            pop a
7082   3146             ; --- END RELATIONAL
7083   3146 C0 00 00      cmp b, 0
7084   3149 C6 7D 31      je _if175_else
7085   314C             _if175_TRUE:
7086   314C             ; printf("Sensors show no damage to enemy at %d, %d\n\n", k->y, k->x); 
7087   314C             ; --- START FUNCTION CALL
7088   314C FA F3 FF      lea d, [bp + -13] ; $k
7089   314F FD 2A         mov d, [d]
7090   3151 58 01 00      add d, 1
7091   3154 32            mov bl, [d]
7092   3155 A7 00         mov bh, 0
7093   3157 38 00 00      mov c, 0
7094   315A FD AB         swp b
7095   315C D8            push b
7096   315D FA F3 FF      lea d, [bp + -13] ; $k
7097   3160 FD 2A         mov d, [d]
7098   3162 58 00 00      add d, 0
7099   3165 32            mov bl, [d]
7100   3166 A7 00         mov bh, 0
7101   3168 38 00 00      mov c, 0
7102   316B FD AB         swp b
7103   316D D8            push b
7104   316E 26 98 78      mov b, _s97 ; "Sensors show no damage to enemy at %d, %d\n\n"
7105   3171 FD AB         swp b
7106   3173 D8            push b
7107   3174 07 36 60      call printf
7108   3177 51 06 00      add sp, 6
7109   317A             ; --- END FUNCTION CALL
7110   317A 0A F2 32      jmp _if175_exit
7111   317D             _if175_else:
7112   317D             ; h = FROM_FIXED00(h1); 
7113   317D FA F5 FF      lea d, [bp + -11] ; $h
7114   3180 DA            push d
7115   3181             ; --- START FUNCTION CALL
7116   3181 FA F7 FF      lea d, [bp + -9] ; $h1
7117   3184 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7118   3187 FD 39         mov c, b ; And place it into C
7119   3189 2A            mov b, [d] ; Lower Word in B
7120   318A FD AB         swp b
7121   318C D8            push b
7122   318D 07 DC 04      call FROM_FIXED00
7123   3190 51 02 00      add sp, 2
7124   3193             ; --- END FUNCTION CALL
7125   3193 E7            pop d
7126   3194 FD 43         mov [d], b
7127   3196             ; k->energy = k->energy - h; 
7128   3196 FA F3 FF      lea d, [bp + -13] ; $k
7129   3199 FD 2A         mov d, [d]
7130   319B 58 02 00      add d, 2
7131   319E DA            push d
7132   319F FA F3 FF      lea d, [bp + -13] ; $k
7133   31A2 FD 2A         mov d, [d]
7134   31A4 58 02 00      add d, 2
7135   31A7 2A            mov b, [d]
7136   31A8 38 00 00      mov c, 0
7137   31AB             ; --- START TERMS
7138   31AB D7            push a
7139   31AC 11            mov a, b
7140   31AD FA F5 FF      lea d, [bp + -11] ; $h
7141   31B0 2A            mov b, [d]
7142   31B1 38 00 00      mov c, 0
7143   31B4 60            sub a, b
7144   31B5 27            mov b, a
7145   31B6 E4            pop a
7146   31B7             ; --- END TERMS
7147   31B7 E7            pop d
7148   31B8 FD 43         mov [d], b
7149   31BA             ; printf("%d unit hit on Klingon at sector %d, %d\n", 
7150   31BA             ; --- START FUNCTION CALL
7151   31BA FA F3 FF      lea d, [bp + -13] ; $k
7152   31BD FD 2A         mov d, [d]
7153   31BF 58 01 00      add d, 1
7154   31C2 32            mov bl, [d]
7155   31C3 A7 00         mov bh, 0
7156   31C5 38 00 00      mov c, 0
7157   31C8 FD AB         swp b
7158   31CA D8            push b
7159   31CB FA F3 FF      lea d, [bp + -13] ; $k
7160   31CE FD 2A         mov d, [d]
7161   31D0 58 00 00      add d, 0
7162   31D3 32            mov bl, [d]
7163   31D4 A7 00         mov bh, 0
7164   31D6 38 00 00      mov c, 0
7165   31D9 FD AB         swp b
7166   31DB D8            push b
7167   31DC FA F5 FF      lea d, [bp + -11] ; $h
7168   31DF 2A            mov b, [d]
7169   31E0 38 00 00      mov c, 0
7170   31E3 FD AB         swp b
7171   31E5 D8            push b
7172   31E6 26 C4 78      mov b, _s98 ; "%d unit hit on Klingon at sector %d, %d\n"
7173   31E9 FD AB         swp b
7174   31EB D8            push b
7175   31EC 07 36 60      call printf
7176   31EF 51 08 00      add sp, 8
7177   31F2             ; --- END FUNCTION CALL
7178   31F2             ; if (k->energy <= 0) { 
7179   31F2             _if178_cond:
7180   31F2 FA F3 FF      lea d, [bp + -13] ; $k
7181   31F5 FD 2A         mov d, [d]
7182   31F7 58 02 00      add d, 2
7183   31FA 2A            mov b, [d]
7184   31FB 38 00 00      mov c, 0
7185   31FE             ; --- START RELATIONAL
7186   31FE D7            push a
7187   31FF 11            mov a, b
7188   3200 FD 2E 00 00   mov32 cb, $00000000
7188   3204 00 00 
7189   3206 B0            cmp a, b
7190   3207 FD 74         sle ; <= (signed)
7191   3209 E4            pop a
7192   320A             ; --- END RELATIONAL
7193   320A C0 00 00      cmp b, 0
7194   320D C6 D7 32      je _if178_else
7195   3210             _if178_TRUE:
7196   3210             ; puts("*** Klingon Destroyed ***\n"); 
7197   3210             ; --- START FUNCTION CALL
7198   3210 26 ED 78      mov b, _s99 ; "*** Klingon Destroyed ***\n"
7199   3213 FD AB         swp b
7200   3215 D8            push b
7201   3216 07 47 69      call puts
7202   3219 51 02 00      add sp, 2
7203   321C             ; --- END FUNCTION CALL
7204   321C             ; klingons--; 
7205   321C 3B 20 6E      mov d, _klingons ; $klingons
7206   321F 32            mov bl, [d]
7207   3220 A7 00         mov bh, 0
7208   3222 38 00 00      mov c, 0
7209   3225 FD 7D         dec b
7210   3227 3B 20 6E      mov d, _klingons ; $klingons
7211   322A FD 3E         mov [d], bl
7212   322C FD 77         inc b
7213   322E             ; klingons_left--; 
7214   322E 3B 22 6E      mov d, _klingons_left ; $klingons_left
7215   3231 32            mov bl, [d]
7216   3232 A7 00         mov bh, 0
7217   3234 38 00 00      mov c, 0
7218   3237 FD 7D         dec b
7219   3239 3B 22 6E      mov d, _klingons_left ; $klingons_left
7220   323C FD 3E         mov [d], bl
7221   323E FD 77         inc b
7222   3240             ; wipe_klingon(k); 
7223   3240             ; --- START FUNCTION CALL
7224   3240 FA F3 FF      lea d, [bp + -13] ; $k
7225   3243 2A            mov b, [d]
7226   3244 38 00 00      mov c, 0
7227   3247 FD AB         swp b
7228   3249 D8            push b
7229   324A 07 63 2D      call wipe_klingon
7230   324D 51 02 00      add sp, 2
7231   3250             ; --- END FUNCTION CALL
7232   3250             ; k->energy = 0; 
7233   3250 FA F3 FF      lea d, [bp + -13] ; $k
7234   3253 FD 2A         mov d, [d]
7235   3255 58 02 00      add d, 2
7236   3258 DA            push d
7237   3259 FD 2E 00 00   mov32 cb, $00000000
7237   325D 00 00 
7238   325F E7            pop d
7239   3260 FD 43         mov [d], b
7240   3262             ; map[quad_y][quad_x] = map[quad_y][quad_x] - 0x100; 
7241   3262 3B 72 6D      mov d, _map_data ; $map
7242   3265 D7            push a
7243   3266 DA            push d
7244   3267 3B 25 6E      mov d, _quad_y ; $quad_y
7245   326A 2A            mov b, [d]
7246   326B 38 00 00      mov c, 0
7247   326E E7            pop d
7248   326F FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
7249   3273 DA            push d
7250   3274 3B 27 6E      mov d, _quad_x ; $quad_x
7251   3277 2A            mov b, [d]
7252   3278 38 00 00      mov c, 0
7253   327B E7            pop d
7254   327C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7255   3280 E4            pop a
7256   3281 DA            push d
7257   3282 3B 72 6D      mov d, _map_data ; $map
7258   3285 D7            push a
7259   3286 DA            push d
7260   3287 3B 25 6E      mov d, _quad_y ; $quad_y
7261   328A 2A            mov b, [d]
7262   328B 38 00 00      mov c, 0
7263   328E E7            pop d
7264   328F FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
7265   3293 DA            push d
7266   3294 3B 27 6E      mov d, _quad_x ; $quad_x
7267   3297 2A            mov b, [d]
7268   3298 38 00 00      mov c, 0
7269   329B E7            pop d
7270   329C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7271   32A0 E4            pop a
7272   32A1 2A            mov b, [d]
7273   32A2 38 00 00      mov c, 0
7274   32A5             ; --- START TERMS
7275   32A5 D7            push a
7276   32A6 11            mov a, b
7277   32A7 FD 2E 00 01   mov32 cb, $00000100
7277   32AB 00 00 
7278   32AD 60            sub a, b
7279   32AE 27            mov b, a
7280   32AF E4            pop a
7281   32B0             ; --- END TERMS
7282   32B0 E7            pop d
7283   32B1 FD 43         mov [d], b
7284   32B3             ; if (klingons_left <= 0) 
7285   32B3             _if179_cond:
7286   32B3 3B 22 6E      mov d, _klingons_left ; $klingons_left
7287   32B6 32            mov bl, [d]
7288   32B7 A7 00         mov bh, 0
7289   32B9 38 00 00      mov c, 0
7290   32BC             ; --- START RELATIONAL
7291   32BC D7            push a
7292   32BD 11            mov a, b
7293   32BE FD 2E 00 00   mov32 cb, $00000000
7293   32C2 00 00 
7294   32C4 B0            cmp a, b
7295   32C5 FD 76         sleu ; <= (unsigned)
7296   32C7 E4            pop a
7297   32C8             ; --- END RELATIONAL
7298   32C8 C0 00 00      cmp b, 0
7299   32CB C6 D4 32      je _if179_exit
7300   32CE             _if179_TRUE:
7301   32CE             ; won_game(); 
7302   32CE             ; --- START FUNCTION CALL
7303   32CE 07 F7 4E      call won_game
7304   32D1 0A D4 32      jmp _if179_exit
7305   32D4             _if179_exit:
7306   32D4 0A F2 32      jmp _if178_exit
7307   32D7             _if178_else:
7308   32D7             ; printf("   (Sensors show %d units remaining.)\n\n", k->energy); 
7309   32D7             ; --- START FUNCTION CALL
7310   32D7 FA F3 FF      lea d, [bp + -13] ; $k
7311   32DA FD 2A         mov d, [d]
7312   32DC 58 02 00      add d, 2
7313   32DF 2A            mov b, [d]
7314   32E0 38 00 00      mov c, 0
7315   32E3 FD AB         swp b
7316   32E5 D8            push b
7317   32E6 26 08 79      mov b, _s100 ; "   (Sensors show %d units remaining.)\n\n"
7318   32E9 FD AB         swp b
7319   32EB D8            push b
7320   32EC 07 36 60      call printf
7321   32EF 51 04 00      add sp, 4
7322   32F2             ; --- END FUNCTION CALL
7323   32F2             _if178_exit:
7324   32F2             _if175_exit:
7325   32F2 0A F5 32      jmp _if170_exit
7326   32F5             _if170_exit:
7327   32F5             ; k++; 
7328   32F5 FA F3 FF      lea d, [bp + -13] ; $k
7329   32F8 2A            mov b, [d]
7330   32F9 38 00 00      mov c, 0
7331   32FC 11            mov a, b
7332   32FD FD 77         inc b
7333   32FF FD 77         inc b
7334   3301 FA F3 FF      lea d, [bp + -13] ; $k
7335   3304 FD 43         mov [d], b
7336   3306 27            mov b, a
7337   3307             _for169_update:
7338   3307 FA FF FF      lea d, [bp + -1] ; $i
7339   330A 2A            mov b, [d]
7340   330B 38 00 00      mov c, 0
7341   330E 11            mov a, b
7342   330F FD 77         inc b
7343   3311 FA FF FF      lea d, [bp + -1] ; $i
7344   3314 FD 43         mov [d], b
7345   3316 27            mov b, a
7346   3317 0A 01 30      jmp _for169_cond
7347   331A             _for169_exit:
7348   331A             ; klingons_shoot(); 
7349   331A             ; --- START FUNCTION CALL
7350   331A 07 D0 50      call klingons_shoot
7351   331D F9            leave
7352   331E 09            ret
7353   331F             
7354   331F             photon_torpedoes:
7355   331F F8 00 00      enter 0 ; (push bp; mov bp, sp)
7356   3322             ; int x3, y3; 
7357   3322 52 02 00      sub sp, 2
7358   3325 52 02 00      sub sp, 2
7359   3328             ; int        c1; 
7360   3328 52 02 00      sub sp, 2
7361   332B             ; int c2, c3, c4; 
7362   332B 52 02 00      sub sp, 2
7363   332E 52 02 00      sub sp, 2
7364   3331 52 02 00      sub sp, 2
7365   3334             ; int        x, y, x1, x2; 
7366   3334 52 02 00      sub sp, 2
7367   3337 52 02 00      sub sp, 2
7368   333A 52 02 00      sub sp, 2
7369   333D 52 02 00      sub sp, 2
7370   3340             ; if (torps <= 0) { 
7371   3340             _if180_cond:
7372   3340 3B 23 6E      mov d, _torps ; $torps
7373   3343 32            mov bl, [d]
7374   3344 A7 00         mov bh, 0
7375   3346 38 00 00      mov c, 0
7376   3349             ; --- START RELATIONAL
7377   3349 D7            push a
7378   334A 11            mov a, b
7379   334B FD 2E 00 00   mov32 cb, $00000000
7379   334F 00 00 
7380   3351 B0            cmp a, b
7381   3352 FD 76         sleu ; <= (unsigned)
7382   3354 E4            pop a
7383   3355             ; --- END RELATIONAL
7384   3355 C0 00 00      cmp b, 0
7385   3358 C6 6C 33      je _if180_exit
7386   335B             _if180_TRUE:
7387   335B             ; puts("All photon torpedoes expended"); 
7388   335B             ; --- START FUNCTION CALL
7389   335B 26 30 79      mov b, _s101 ; "All photon torpedoes expended"
7390   335E FD AB         swp b
7391   3360 D8            push b
7392   3361 07 47 69      call puts
7393   3364 51 02 00      add sp, 2
7394   3367             ; --- END FUNCTION CALL
7395   3367             ; return; 
7396   3367 F9            leave
7397   3368 09            ret
7398   3369 0A 6C 33      jmp _if180_exit
7399   336C             _if180_exit:
7400   336C             ; if (inoperable(5)) 
7401   336C             _if181_cond:
7402   336C             ; --- START FUNCTION CALL
7403   336C FD 2E 05 00   mov32 cb, $00000005
7403   3370 00 00 
7404   3372 DD            push bl
7405   3373 07 71 09      call inoperable
7406   3376 51 01 00      add sp, 1
7407   3379             ; --- END FUNCTION CALL
7408   3379 C0 00 00      cmp b, 0
7409   337C C6 84 33      je _if181_exit
7410   337F             _if181_TRUE:
7411   337F             ; return; 
7412   337F F9            leave
7413   3380 09            ret
7414   3381 0A 84 33      jmp _if181_exit
7415   3384             _if181_exit:
7416   3384             ; puts("Course (0-9): "); 
7417   3384             ; --- START FUNCTION CALL
7418   3384 26 6C 73      mov b, _s63 ; "Course (0-9): "
7419   3387 FD AB         swp b
7420   3389 D8            push b
7421   338A 07 47 69      call puts
7422   338D 51 02 00      add sp, 2
7423   3390             ; --- END FUNCTION CALL
7424   3390             ; c1 = input_f00(); 
7425   3390 FA FB FF      lea d, [bp + -5] ; $c1
7426   3393 DA            push d
7427   3394             ; --- START FUNCTION CALL
7428   3394 07 67 06      call input_f00
7429   3397 E7            pop d
7430   3398 FD 43         mov [d], b
7431   339A             ; if (c1 == 900) 
7432   339A             _if182_cond:
7433   339A FA FB FF      lea d, [bp + -5] ; $c1
7434   339D 2A            mov b, [d]
7435   339E 38 00 00      mov c, 0
7436   33A1             ; --- START RELATIONAL
7437   33A1 D7            push a
7438   33A2 11            mov a, b
7439   33A3 FD 2E 84 03   mov32 cb, $00000384
7439   33A7 00 00 
7440   33A9 B0            cmp a, b
7441   33AA FD 71         seq ; ==
7442   33AC E4            pop a
7443   33AD             ; --- END RELATIONAL
7444   33AD C0 00 00      cmp b, 0
7445   33B0 C6 C3 33      je _if182_exit
7446   33B3             _if182_TRUE:
7447   33B3             ; c1 = 100; 
7448   33B3 FA FB FF      lea d, [bp + -5] ; $c1
7449   33B6 DA            push d
7450   33B7 FD 2E 64 00   mov32 cb, $00000064
7450   33BB 00 00 
7451   33BD E7            pop d
7452   33BE FD 43         mov [d], b
7453   33C0 0A C3 33      jmp _if182_exit
7454   33C3             _if182_exit:
7455   33C3             ; if (c1 < 100 || c1 >= 900) { 
7456   33C3             _if183_cond:
7457   33C3 FA FB FF      lea d, [bp + -5] ; $c1
7458   33C6 2A            mov b, [d]
7459   33C7 38 00 00      mov c, 0
7460   33CA             ; --- START RELATIONAL
7461   33CA D7            push a
7462   33CB 11            mov a, b
7463   33CC FD 2E 64 00   mov32 cb, $00000064
7463   33D0 00 00 
7464   33D2 B0            cmp a, b
7465   33D3 FD 73         slt ; < (signed)
7466   33D5 E4            pop a
7467   33D6             ; --- END RELATIONAL
7468   33D6             ; --- START LOGICAL OR
7469   33D6 D7            push a
7470   33D7 11            mov a, b
7471   33D8 FA FB FF      lea d, [bp + -5] ; $c1
7472   33DB 2A            mov b, [d]
7473   33DC 38 00 00      mov c, 0
7474   33DF             ; --- START RELATIONAL
7475   33DF D7            push a
7476   33E0 11            mov a, b
7477   33E1 FD 2E 84 03   mov32 cb, $00000384
7477   33E5 00 00 
7478   33E7 B0            cmp a, b
7479   33E8 FD 80         sge ; >=
7480   33EA E4            pop a
7481   33EB             ; --- END RELATIONAL
7482   33EB FD A8         sor a, b ; ||
7483   33ED E4            pop a
7484   33EE             ; --- END LOGICAL OR
7485   33EE C0 00 00      cmp b, 0
7486   33F1 C6 0F 34      je _if183_exit
7487   33F4             _if183_TRUE:
7488   33F4             ; printf("Ensign Chekov%s", inc_1); 
7489   33F4             ; --- START FUNCTION CALL
7490   33F4 3B BE 6E      mov d, _inc_1 ; $inc_1
7491   33F7 2A            mov b, [d]
7492   33F8 38 00 00      mov c, 0
7493   33FB FD AB         swp b
7494   33FD D8            push b
7495   33FE 26 4E 79      mov b, _s102 ; "Ensign Chekov%s"
7496   3401 FD AB         swp b
7497   3403 D8            push b
7498   3404 07 36 60      call printf
7499   3407 51 04 00      add sp, 4
7500   340A             ; --- END FUNCTION CALL
7501   340A             ; return; 
7502   340A F9            leave
7503   340B 09            ret
7504   340C 0A 0F 34      jmp _if183_exit
7505   340F             _if183_exit:
7506   340F             ; energy = energy - 2; 
7507   340F 3B 6E 6D      mov d, _energy ; $energy
7508   3412 DA            push d
7509   3413 3B 6E 6D      mov d, _energy ; $energy
7510   3416 2A            mov b, [d]
7511   3417 38 00 00      mov c, 0
7512   341A             ; --- START TERMS
7513   341A D7            push a
7514   341B 11            mov a, b
7515   341C FD 2E 02 00   mov32 cb, $00000002
7515   3420 00 00 
7516   3422 60            sub a, b
7517   3423 27            mov b, a
7518   3424 E4            pop a
7519   3425             ; --- END TERMS
7520   3425 E7            pop d
7521   3426 FD 43         mov [d], b
7522   3428             ; torps--; 
7523   3428 3B 23 6E      mov d, _torps ; $torps
7524   342B 32            mov bl, [d]
7525   342C A7 00         mov bh, 0
7526   342E 38 00 00      mov c, 0
7527   3431 FD 7D         dec b
7528   3433 3B 23 6E      mov d, _torps ; $torps
7529   3436 FD 3E         mov [d], bl
7530   3438 FD 77         inc b
7531   343A             ; c2 = FROM_FIXED00(c1);	/* Integer part */ 
7532   343A FA F9 FF      lea d, [bp + -7] ; $c2
7533   343D DA            push d
7534   343E             ; --- START FUNCTION CALL
7535   343E FA FB FF      lea d, [bp + -5] ; $c1
7536   3441 2A            mov b, [d]
7537   3442 38 00 00      mov c, 0
7538   3445 FD AB         swp b
7539   3447 D8            push b
7540   3448 07 DC 04      call FROM_FIXED00
7541   344B 51 02 00      add sp, 2
7542   344E             ; --- END FUNCTION CALL
7543   344E E7            pop d
7544   344F FD 43         mov [d], b
7545   3451             ; c3 = c2 + 1;		/* Next integer part */ 
7546   3451 FA F7 FF      lea d, [bp + -9] ; $c3
7547   3454 DA            push d
7548   3455 FA F9 FF      lea d, [bp + -7] ; $c2
7549   3458 2A            mov b, [d]
7550   3459 38 00 00      mov c, 0
7551   345C             ; --- START TERMS
7552   345C D7            push a
7553   345D 11            mov a, b
7554   345E FD 2E 01 00   mov32 cb, $00000001
7554   3462 00 00 
7555   3464 56            add b, a
7556   3465 E4            pop a
7557   3466             ; --- END TERMS
7558   3466 E7            pop d
7559   3467 FD 43         mov [d], b
7560   3469             ; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
7561   3469 FA F5 FF      lea d, [bp + -11] ; $c4
7562   346C DA            push d
7563   346D FA FB FF      lea d, [bp + -5] ; $c1
7564   3470 2A            mov b, [d]
7565   3471 38 00 00      mov c, 0
7566   3474             ; --- START TERMS
7567   3474 D7            push a
7568   3475 11            mov a, b
7569   3476             ; --- START FUNCTION CALL
7570   3476 FA F9 FF      lea d, [bp + -7] ; $c2
7571   3479 2A            mov b, [d]
7572   347A 38 00 00      mov c, 0
7573   347D FD AB         swp b
7574   347F D8            push b
7575   3480 07 8B 04      call TO_FIXED00
7576   3483 51 02 00      add sp, 2
7577   3486             ; --- END FUNCTION CALL
7578   3486 60            sub a, b
7579   3487 27            mov b, a
7580   3488 E4            pop a
7581   3489             ; --- END TERMS
7582   3489 E7            pop d
7583   348A FD 43         mov [d], b
7584   348C             ; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
7585   348C FA EF FF      lea d, [bp + -17] ; $x1
7586   348F DA            push d
7587   3490 FD 2E 64 00   mov32 cb, $00000064
7587   3494 00 00 
7588   3496             ; --- START FACTORS
7589   3496 D7            push a
7590   3497 FD D8         push g
7591   3499 11            mov a, b
7592   349A FD 7A         mov g, c
7593   349C 3B 4D 6D      mov d, _c_data ; $c
7594   349F D7            push a
7595   34A0 DA            push d
7596   34A1 FD 2E 01 00   mov32 cb, $00000001
7596   34A5 00 00 
7597   34A7 E7            pop d
7598   34A8 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7599   34AC DA            push d
7600   34AD FA F9 FF      lea d, [bp + -7] ; $c2
7601   34B0 2A            mov b, [d]
7602   34B1 38 00 00      mov c, 0
7603   34B4 E7            pop d
7604   34B5 5A            add d, b
7605   34B6 E4            pop a
7606   34B7 32            mov bl, [d]
7607   34B8 A7 00         mov bh, 0
7608   34BA 38 00 00      mov c, 0
7609   34BD D7            push a     ; save left operand
7610   34BE 8E            xor a, b   ; xor sign bits
7611   34BF FD AA         swp a      ; swap bytes
7612   34C1 83            mov cl, al ; save result of xor into 'dl'
7613   34C2 E4            pop a      ; restore left side operator
7614   34C3 DF            push cl    ; save result of xor above
7615   34C4 FD AA         swp a  
7616   34C6 93 80         test al, $80  
7617   34C8 FD AA         swp a  
7618   34CA C6 CF 34      jz skip_invert_a_186  
7619   34CD FD 95         neg a 
7620   34CF             skip_invert_a_186:   
7621   34CF FD AB         swp b
7622   34D1 FD 93 80      test bl, $80  
7623   34D4 FD AB         swp b
7624   34D6 C6 DB 34      jz skip_invert_b_186  
7625   34D9 FD 97         neg b 
7626   34DB             skip_invert_b_186:   
7627   34DB AC            mul a, b ; *
7628   34DC FD 78         mov g, a
7629   34DE 11            mov a, b
7630   34DF EA            pop bl
7631   34E0 FD 93 80      test bl, $80
7632   34E3 C6 F0 34      jz _same_signs_186
7633   34E6 2F            mov bl, al
7634   34E7 95            not a
7635   34E8 FD 97         neg b
7636   34EA 5B 00 00      adc a, 0
7637   34ED FD 78         mov g, a
7638   34EF 11            mov a, b
7639   34F0             _same_signs_186:
7640   34F0 FD 38         mov c, g
7641   34F2 27            mov b, a
7642   34F3 FD F1         pop g
7643   34F5 E4            pop a
7644   34F6             ; --- END FACTORS
7645   34F6             ; --- START TERMS
7646   34F6 D7            push a
7647   34F7 FD D8         push g
7648   34F9 11            mov a, b
7649   34FA FD 7A         mov g, c
7650   34FC 3B 4D 6D      mov d, _c_data ; $c
7651   34FF D7            push a
7652   3500 DA            push d
7653   3501 FD 2E 01 00   mov32 cb, $00000001
7653   3505 00 00 
7654   3507 E7            pop d
7655   3508 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7656   350C DA            push d
7657   350D FA F7 FF      lea d, [bp + -9] ; $c3
7658   3510 2A            mov b, [d]
7659   3511 38 00 00      mov c, 0
7660   3514 E7            pop d
7661   3515 5A            add d, b
7662   3516 E4            pop a
7663   3517 32            mov bl, [d]
7664   3518 A7 00         mov bh, 0
7665   351A 38 00 00      mov c, 0
7666   351D             ; --- START TERMS
7667   351D D7            push a
7668   351E 11            mov a, b
7669   351F 3B 4D 6D      mov d, _c_data ; $c
7670   3522 D7            push a
7671   3523 DA            push d
7672   3524 FD 2E 01 00   mov32 cb, $00000001
7672   3528 00 00 
7673   352A E7            pop d
7674   352B FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7675   352F DA            push d
7676   3530 FA F9 FF      lea d, [bp + -7] ; $c2
7677   3533 2A            mov b, [d]
7678   3534 38 00 00      mov c, 0
7679   3537 E7            pop d
7680   3538 5A            add d, b
7681   3539 E4            pop a
7682   353A 32            mov bl, [d]
7683   353B A7 00         mov bh, 0
7684   353D 38 00 00      mov c, 0
7685   3540 60            sub a, b
7686   3541 27            mov b, a
7687   3542 E4            pop a
7688   3543             ; --- END TERMS
7689   3543             ; --- START FACTORS
7690   3543 D7            push a
7691   3544 FD D8         push g
7692   3546 11            mov a, b
7693   3547 FD 7A         mov g, c
7694   3549 FA F5 FF      lea d, [bp + -11] ; $c4
7695   354C 2A            mov b, [d]
7696   354D 38 00 00      mov c, 0
7697   3550 D7            push a     ; save left operand
7698   3551 8E            xor a, b   ; xor sign bits
7699   3552 FD AA         swp a      ; swap bytes
7700   3554 83            mov cl, al ; save result of xor into 'dl'
7701   3555 E4            pop a      ; restore left side operator
7702   3556 DF            push cl    ; save result of xor above
7703   3557 FD AA         swp a  
7704   3559 93 80         test al, $80  
7705   355B FD AA         swp a  
7706   355D C6 62 35      jz skip_invert_a_187  
7707   3560 FD 95         neg a 
7708   3562             skip_invert_a_187:   
7709   3562 FD AB         swp b
7710   3564 FD 93 80      test bl, $80  
7711   3567 FD AB         swp b
7712   3569 C6 6E 35      jz skip_invert_b_187  
7713   356C FD 97         neg b 
7714   356E             skip_invert_b_187:   
7715   356E AC            mul a, b ; *
7716   356F FD 78         mov g, a
7717   3571 11            mov a, b
7718   3572 EA            pop bl
7719   3573 FD 93 80      test bl, $80
7720   3576 C6 83 35      jz _same_signs_187
7721   3579 2F            mov bl, al
7722   357A 95            not a
7723   357B FD 97         neg b
7724   357D 5B 00 00      adc a, 0
7725   3580 FD 78         mov g, a
7726   3582 11            mov a, b
7727   3583             _same_signs_187:
7728   3583 FD 38         mov c, g
7729   3585 27            mov b, a
7730   3586 FD F1         pop g
7731   3588 E4            pop a
7732   3589             ; --- END FACTORS
7733   3589 FD 15         add32 cb, ga
7734   358B FD F1         pop g
7735   358D E4            pop a
7736   358E             ; --- END TERMS
7737   358E E7            pop d
7738   358F FD 43         mov [d], b
7739   3591             ; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
7740   3591 FA ED FF      lea d, [bp + -19] ; $x2
7741   3594 DA            push d
7742   3595 FD 2E 64 00   mov32 cb, $00000064
7742   3599 00 00 
7743   359B             ; --- START FACTORS
7744   359B D7            push a
7745   359C FD D8         push g
7746   359E 11            mov a, b
7747   359F FD 7A         mov g, c
7748   35A1 3B 4D 6D      mov d, _c_data ; $c
7749   35A4 D7            push a
7750   35A5 DA            push d
7751   35A6 FD 2E 02 00   mov32 cb, $00000002
7751   35AA 00 00 
7752   35AC E7            pop d
7753   35AD FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7754   35B1 DA            push d
7755   35B2 FA F9 FF      lea d, [bp + -7] ; $c2
7756   35B5 2A            mov b, [d]
7757   35B6 38 00 00      mov c, 0
7758   35B9 E7            pop d
7759   35BA 5A            add d, b
7760   35BB E4            pop a
7761   35BC 32            mov bl, [d]
7762   35BD A7 00         mov bh, 0
7763   35BF 38 00 00      mov c, 0
7764   35C2 D7            push a     ; save left operand
7765   35C3 8E            xor a, b   ; xor sign bits
7766   35C4 FD AA         swp a      ; swap bytes
7767   35C6 83            mov cl, al ; save result of xor into 'dl'
7768   35C7 E4            pop a      ; restore left side operator
7769   35C8 DF            push cl    ; save result of xor above
7770   35C9 FD AA         swp a  
7771   35CB 93 80         test al, $80  
7772   35CD FD AA         swp a  
7773   35CF C6 D4 35      jz skip_invert_a_190  
7774   35D2 FD 95         neg a 
7775   35D4             skip_invert_a_190:   
7776   35D4 FD AB         swp b
7777   35D6 FD 93 80      test bl, $80  
7778   35D9 FD AB         swp b
7779   35DB C6 E0 35      jz skip_invert_b_190  
7780   35DE FD 97         neg b 
7781   35E0             skip_invert_b_190:   
7782   35E0 AC            mul a, b ; *
7783   35E1 FD 78         mov g, a
7784   35E3 11            mov a, b
7785   35E4 EA            pop bl
7786   35E5 FD 93 80      test bl, $80
7787   35E8 C6 F5 35      jz _same_signs_190
7788   35EB 2F            mov bl, al
7789   35EC 95            not a
7790   35ED FD 97         neg b
7791   35EF 5B 00 00      adc a, 0
7792   35F2 FD 78         mov g, a
7793   35F4 11            mov a, b
7794   35F5             _same_signs_190:
7795   35F5 FD 38         mov c, g
7796   35F7 27            mov b, a
7797   35F8 FD F1         pop g
7798   35FA E4            pop a
7799   35FB             ; --- END FACTORS
7800   35FB             ; --- START TERMS
7801   35FB D7            push a
7802   35FC FD D8         push g
7803   35FE 11            mov a, b
7804   35FF FD 7A         mov g, c
7805   3601 3B 4D 6D      mov d, _c_data ; $c
7806   3604 D7            push a
7807   3605 DA            push d
7808   3606 FD 2E 02 00   mov32 cb, $00000002
7808   360A 00 00 
7809   360C E7            pop d
7810   360D FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7811   3611 DA            push d
7812   3612 FA F7 FF      lea d, [bp + -9] ; $c3
7813   3615 2A            mov b, [d]
7814   3616 38 00 00      mov c, 0
7815   3619 E7            pop d
7816   361A 5A            add d, b
7817   361B E4            pop a
7818   361C 32            mov bl, [d]
7819   361D A7 00         mov bh, 0
7820   361F 38 00 00      mov c, 0
7821   3622             ; --- START TERMS
7822   3622 D7            push a
7823   3623 11            mov a, b
7824   3624 3B 4D 6D      mov d, _c_data ; $c
7825   3627 D7            push a
7826   3628 DA            push d
7827   3629 FD 2E 02 00   mov32 cb, $00000002
7827   362D 00 00 
7828   362F E7            pop d
7829   3630 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7830   3634 DA            push d
7831   3635 FA F9 FF      lea d, [bp + -7] ; $c2
7832   3638 2A            mov b, [d]
7833   3639 38 00 00      mov c, 0
7834   363C E7            pop d
7835   363D 5A            add d, b
7836   363E E4            pop a
7837   363F 32            mov bl, [d]
7838   3640 A7 00         mov bh, 0
7839   3642 38 00 00      mov c, 0
7840   3645 60            sub a, b
7841   3646 27            mov b, a
7842   3647 E4            pop a
7843   3648             ; --- END TERMS
7844   3648             ; --- START FACTORS
7845   3648 D7            push a
7846   3649 FD D8         push g
7847   364B 11            mov a, b
7848   364C FD 7A         mov g, c
7849   364E FA F5 FF      lea d, [bp + -11] ; $c4
7850   3651 2A            mov b, [d]
7851   3652 38 00 00      mov c, 0
7852   3655 D7            push a     ; save left operand
7853   3656 8E            xor a, b   ; xor sign bits
7854   3657 FD AA         swp a      ; swap bytes
7855   3659 83            mov cl, al ; save result of xor into 'dl'
7856   365A E4            pop a      ; restore left side operator
7857   365B DF            push cl    ; save result of xor above
7858   365C FD AA         swp a  
7859   365E 93 80         test al, $80  
7860   3660 FD AA         swp a  
7861   3662 C6 67 36      jz skip_invert_a_191  
7862   3665 FD 95         neg a 
7863   3667             skip_invert_a_191:   
7864   3667 FD AB         swp b
7865   3669 FD 93 80      test bl, $80  
7866   366C FD AB         swp b
7867   366E C6 73 36      jz skip_invert_b_191  
7868   3671 FD 97         neg b 
7869   3673             skip_invert_b_191:   
7870   3673 AC            mul a, b ; *
7871   3674 FD 78         mov g, a
7872   3676 11            mov a, b
7873   3677 EA            pop bl
7874   3678 FD 93 80      test bl, $80
7875   367B C6 88 36      jz _same_signs_191
7876   367E 2F            mov bl, al
7877   367F 95            not a
7878   3680 FD 97         neg b
7879   3682 5B 00 00      adc a, 0
7880   3685 FD 78         mov g, a
7881   3687 11            mov a, b
7882   3688             _same_signs_191:
7883   3688 FD 38         mov c, g
7884   368A 27            mov b, a
7885   368B FD F1         pop g
7886   368D E4            pop a
7887   368E             ; --- END FACTORS
7888   368E FD 15         add32 cb, ga
7889   3690 FD F1         pop g
7890   3692 E4            pop a
7891   3693             ; --- END TERMS
7892   3693 E7            pop d
7893   3694 FD 43         mov [d], b
7894   3696             ; x = ship_y + x1; 
7895   3696 FA F3 FF      lea d, [bp + -13] ; $x
7896   3699 DA            push d
7897   369A 3B 44 6E      mov d, _ship_y ; $ship_y
7898   369D 2A            mov b, [d]
7899   369E 38 00 00      mov c, 0
7900   36A1             ; --- START TERMS
7901   36A1 D7            push a
7902   36A2 11            mov a, b
7903   36A3 FA EF FF      lea d, [bp + -17] ; $x1
7904   36A6 2A            mov b, [d]
7905   36A7 38 00 00      mov c, 0
7906   36AA 56            add b, a
7907   36AB E4            pop a
7908   36AC             ; --- END TERMS
7909   36AC E7            pop d
7910   36AD FD 43         mov [d], b
7911   36AF             ; y = ship_x + x2; 
7912   36AF FA F1 FF      lea d, [bp + -15] ; $y
7913   36B2 DA            push d
7914   36B3 3B 46 6E      mov d, _ship_x ; $ship_x
7915   36B6 2A            mov b, [d]
7916   36B7 38 00 00      mov c, 0
7917   36BA             ; --- START TERMS
7918   36BA D7            push a
7919   36BB 11            mov a, b
7920   36BC FA ED FF      lea d, [bp + -19] ; $x2
7921   36BF 2A            mov b, [d]
7922   36C0 38 00 00      mov c, 0
7923   36C3 56            add b, a
7924   36C4 E4            pop a
7925   36C5             ; --- END TERMS
7926   36C5 E7            pop d
7927   36C6 FD 43         mov [d], b
7928   36C8             ; x3 = FROM_FIXED00(x); 
7929   36C8 FA FF FF      lea d, [bp + -1] ; $x3
7930   36CB DA            push d
7931   36CC             ; --- START FUNCTION CALL
7932   36CC FA F3 FF      lea d, [bp + -13] ; $x
7933   36CF 2A            mov b, [d]
7934   36D0 38 00 00      mov c, 0
7935   36D3 FD AB         swp b
7936   36D5 D8            push b
7937   36D6 07 DC 04      call FROM_FIXED00
7938   36D9 51 02 00      add sp, 2
7939   36DC             ; --- END FUNCTION CALL
7940   36DC E7            pop d
7941   36DD FD 43         mov [d], b
7942   36DF             ; y3 = FROM_FIXED00(y); 
7943   36DF FA FD FF      lea d, [bp + -3] ; $y3
7944   36E2 DA            push d
7945   36E3             ; --- START FUNCTION CALL
7946   36E3 FA F1 FF      lea d, [bp + -15] ; $y
7947   36E6 2A            mov b, [d]
7948   36E7 38 00 00      mov c, 0
7949   36EA FD AB         swp b
7950   36EC D8            push b
7951   36ED 07 DC 04      call FROM_FIXED00
7952   36F0 51 02 00      add sp, 2
7953   36F3             ; --- END FUNCTION CALL
7954   36F3 E7            pop d
7955   36F4 FD 43         mov [d], b
7956   36F6             ; puts("Torpedo Track:"); 
7957   36F6             ; --- START FUNCTION CALL
7958   36F6 26 5E 79      mov b, _s103 ; "Torpedo Track:"
7959   36F9 FD AB         swp b
7960   36FB D8            push b
7961   36FC 07 47 69      call puts
7962   36FF 51 02 00      add sp, 2
7963   3702             ; --- END FUNCTION CALL
7964   3702             ; while (x3 >= 1 && x3 <= 8 && y3 >= 1 && y3 <= 8) { 
7965   3702             _while192_cond:
7966   3702 FA FF FF      lea d, [bp + -1] ; $x3
7967   3705 2A            mov b, [d]
7968   3706 38 00 00      mov c, 0
7969   3709             ; --- START RELATIONAL
7970   3709 D7            push a
7971   370A 11            mov a, b
7972   370B FD 2E 01 00   mov32 cb, $00000001
7972   370F 00 00 
7973   3711 B0            cmp a, b
7974   3712 FD 80         sge ; >=
7975   3714 E4            pop a
7976   3715             ; --- END RELATIONAL
7977   3715             ; --- START LOGICAL AND
7978   3715 D7            push a
7979   3716 11            mov a, b
7980   3717 FA FF FF      lea d, [bp + -1] ; $x3
7981   371A 2A            mov b, [d]
7982   371B 38 00 00      mov c, 0
7983   371E             ; --- START RELATIONAL
7984   371E D7            push a
7985   371F 11            mov a, b
7986   3720 FD 2E 08 00   mov32 cb, $00000008
7986   3724 00 00 
7987   3726 B0            cmp a, b
7988   3727 FD 74         sle ; <= (signed)
7989   3729 E4            pop a
7990   372A             ; --- END RELATIONAL
7991   372A FD A7         sand a, b
7992   372C 11            mov a, b
7993   372D FA FD FF      lea d, [bp + -3] ; $y3
7994   3730 2A            mov b, [d]
7995   3731 38 00 00      mov c, 0
7996   3734             ; --- START RELATIONAL
7997   3734 D7            push a
7998   3735 11            mov a, b
7999   3736 FD 2E 01 00   mov32 cb, $00000001
7999   373A 00 00 
8000   373C B0            cmp a, b
8001   373D FD 80         sge ; >=
8002   373F E4            pop a
8003   3740             ; --- END RELATIONAL
8004   3740 FD A7         sand a, b
8005   3742 11            mov a, b
8006   3743 FA FD FF      lea d, [bp + -3] ; $y3
8007   3746 2A            mov b, [d]
8008   3747 38 00 00      mov c, 0
8009   374A             ; --- START RELATIONAL
8010   374A D7            push a
8011   374B 11            mov a, b
8012   374C FD 2E 08 00   mov32 cb, $00000008
8012   3750 00 00 
8013   3752 B0            cmp a, b
8014   3753 FD 74         sle ; <= (signed)
8015   3755 E4            pop a
8016   3756             ; --- END RELATIONAL
8017   3756 FD A7         sand a, b
8018   3758 E4            pop a
8019   3759             ; --- END LOGICAL AND
8020   3759 C0 00 00      cmp b, 0
8021   375C C6 75 38      je _while192_exit
8022   375F             _while192_block:
8023   375F             ; unsigned char        p; 
8024   375F 52 01 00      sub sp, 1
8025   3762             ; printf("    %d, %d\n", x3, y3); 
8026   3762             ; --- START FUNCTION CALL
8027   3762 FA FD FF      lea d, [bp + -3] ; $y3
8028   3765 2A            mov b, [d]
8029   3766 38 00 00      mov c, 0
8030   3769 FD AB         swp b
8031   376B D8            push b
8032   376C FA FF FF      lea d, [bp + -1] ; $x3
8033   376F 2A            mov b, [d]
8034   3770 38 00 00      mov c, 0
8035   3773 FD AB         swp b
8036   3775 D8            push b
8037   3776 26 6D 79      mov b, _s104 ; "    %d, %d\n"
8038   3779 FD AB         swp b
8039   377B D8            push b
8040   377C 07 36 60      call printf
8041   377F 51 06 00      add sp, 6
8042   3782             ; --- END FUNCTION CALL
8043   3782             ; p = quad[x3+-1][y3+-1]; 
8044   3782 FA EC FF      lea d, [bp + -20] ; $p
8045   3785 DA            push d
8046   3786 3B 4A 6E      mov d, _quad_data ; $quad
8047   3789 D7            push a
8048   378A DA            push d
8049   378B FA FF FF      lea d, [bp + -1] ; $x3
8050   378E 2A            mov b, [d]
8051   378F 38 00 00      mov c, 0
8052   3792             ; --- START TERMS
8053   3792 D7            push a
8054   3793 11            mov a, b
8055   3794 FD 2E FF FF   mov32 cb, $ffffffff
8055   3798 FF FF 
8056   379A 56            add b, a
8057   379B E4            pop a
8058   379C             ; --- END TERMS
8059   379C E7            pop d
8060   379D FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8061   37A1 DA            push d
8062   37A2 FA FD FF      lea d, [bp + -3] ; $y3
8063   37A5 2A            mov b, [d]
8064   37A6 38 00 00      mov c, 0
8065   37A9             ; --- START TERMS
8066   37A9 D7            push a
8067   37AA 11            mov a, b
8068   37AB FD 2E FF FF   mov32 cb, $ffffffff
8068   37AF FF FF 
8069   37B1 56            add b, a
8070   37B2 E4            pop a
8071   37B3             ; --- END TERMS
8072   37B3 E7            pop d
8073   37B4 5A            add d, b
8074   37B5 E4            pop a
8075   37B6 32            mov bl, [d]
8076   37B7 A7 00         mov bh, 0
8077   37B9 38 00 00      mov c, 0
8078   37BC E7            pop d
8079   37BD FD 3E         mov [d], bl
8080   37BF             ; if (p != 		0        && p != 		4      ) { 
8081   37BF             _if193_cond:
8082   37BF FA EC FF      lea d, [bp + -20] ; $p
8083   37C2 32            mov bl, [d]
8084   37C3 A7 00         mov bh, 0
8085   37C5 38 00 00      mov c, 0
8086   37C8             ; --- START RELATIONAL
8087   37C8 D7            push a
8088   37C9 11            mov a, b
8089   37CA FD 2E 00 00   mov32 cb, $00000000
8089   37CE 00 00 
8090   37D0 B0            cmp a, b
8091   37D1 FD 72         sneq ; !=
8092   37D3 E4            pop a
8093   37D4             ; --- END RELATIONAL
8094   37D4             ; --- START LOGICAL AND
8095   37D4 D7            push a
8096   37D5 11            mov a, b
8097   37D6 FA EC FF      lea d, [bp + -20] ; $p
8098   37D9 32            mov bl, [d]
8099   37DA A7 00         mov bh, 0
8100   37DC 38 00 00      mov c, 0
8101   37DF             ; --- START RELATIONAL
8102   37DF D7            push a
8103   37E0 11            mov a, b
8104   37E1 FD 2E 04 00   mov32 cb, $00000004
8104   37E5 00 00 
8105   37E7 B0            cmp a, b
8106   37E8 FD 72         sneq ; !=
8107   37EA E4            pop a
8108   37EB             ; --- END RELATIONAL
8109   37EB FD A7         sand a, b
8110   37ED E4            pop a
8111   37EE             ; --- END LOGICAL AND
8112   37EE C0 00 00      cmp b, 0
8113   37F1 C6 12 38      je _if193_exit
8114   37F4             _if193_TRUE:
8115   37F4             ; torpedo_hit(x3, y3); 
8116   37F4             ; --- START FUNCTION CALL
8117   37F4 FA FD FF      lea d, [bp + -3] ; $y3
8118   37F7 2A            mov b, [d]
8119   37F8 38 00 00      mov c, 0
8120   37FB DD            push bl
8121   37FC FA FF FF      lea d, [bp + -1] ; $x3
8122   37FF 2A            mov b, [d]
8123   3800 38 00 00      mov c, 0
8124   3803 DD            push bl
8125   3804 07 86 38      call torpedo_hit
8126   3807 51 02 00      add sp, 2
8127   380A             ; --- END FUNCTION CALL
8128   380A             ; klingons_shoot(); 
8129   380A             ; --- START FUNCTION CALL
8130   380A 07 D0 50      call klingons_shoot
8131   380D             ; return; 
8132   380D F9            leave
8133   380E 09            ret
8134   380F 0A 12 38      jmp _if193_exit
8135   3812             _if193_exit:
8136   3812             ; x = x + x1; 
8137   3812 FA F3 FF      lea d, [bp + -13] ; $x
8138   3815 DA            push d
8139   3816 FA F3 FF      lea d, [bp + -13] ; $x
8140   3819 2A            mov b, [d]
8141   381A 38 00 00      mov c, 0
8142   381D             ; --- START TERMS
8143   381D D7            push a
8144   381E 11            mov a, b
8145   381F FA EF FF      lea d, [bp + -17] ; $x1
8146   3822 2A            mov b, [d]
8147   3823 38 00 00      mov c, 0
8148   3826 56            add b, a
8149   3827 E4            pop a
8150   3828             ; --- END TERMS
8151   3828 E7            pop d
8152   3829 FD 43         mov [d], b
8153   382B             ; y = y + x2; 
8154   382B FA F1 FF      lea d, [bp + -15] ; $y
8155   382E DA            push d
8156   382F FA F1 FF      lea d, [bp + -15] ; $y
8157   3832 2A            mov b, [d]
8158   3833 38 00 00      mov c, 0
8159   3836             ; --- START TERMS
8160   3836 D7            push a
8161   3837 11            mov a, b
8162   3838 FA ED FF      lea d, [bp + -19] ; $x2
8163   383B 2A            mov b, [d]
8164   383C 38 00 00      mov c, 0
8165   383F 56            add b, a
8166   3840 E4            pop a
8167   3841             ; --- END TERMS
8168   3841 E7            pop d
8169   3842 FD 43         mov [d], b
8170   3844             ; x3 = FROM_FIXED00(x); 
8171   3844 FA FF FF      lea d, [bp + -1] ; $x3
8172   3847 DA            push d
8173   3848             ; --- START FUNCTION CALL
8174   3848 FA F3 FF      lea d, [bp + -13] ; $x
8175   384B 2A            mov b, [d]
8176   384C 38 00 00      mov c, 0
8177   384F FD AB         swp b
8178   3851 D8            push b
8179   3852 07 DC 04      call FROM_FIXED00
8180   3855 51 02 00      add sp, 2
8181   3858             ; --- END FUNCTION CALL
8182   3858 E7            pop d
8183   3859 FD 43         mov [d], b
8184   385B             ; y3 = FROM_FIXED00(y); 
8185   385B FA FD FF      lea d, [bp + -3] ; $y3
8186   385E DA            push d
8187   385F             ; --- START FUNCTION CALL
8188   385F FA F1 FF      lea d, [bp + -15] ; $y
8189   3862 2A            mov b, [d]
8190   3863 38 00 00      mov c, 0
8191   3866 FD AB         swp b
8192   3868 D8            push b
8193   3869 07 DC 04      call FROM_FIXED00
8194   386C 51 02 00      add sp, 2
8195   386F             ; --- END FUNCTION CALL
8196   386F E7            pop d
8197   3870 FD 43         mov [d], b
8198   3872 0A 02 37      jmp _while192_cond
8199   3875             _while192_exit:
8200   3875             ; puts("Torpedo Missed\n"); 
8201   3875             ; --- START FUNCTION CALL
8202   3875 26 79 79      mov b, _s105 ; "Torpedo Missed\n"
8203   3878 FD AB         swp b
8204   387A D8            push b
8205   387B 07 47 69      call puts
8206   387E 51 02 00      add sp, 2
8207   3881             ; --- END FUNCTION CALL
8208   3881             ; klingons_shoot(); 
8209   3881             ; --- START FUNCTION CALL
8210   3881 07 D0 50      call klingons_shoot
8211   3884 F9            leave
8212   3885 09            ret
8213   3886             
8214   3886             torpedo_hit:
8215   3886 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8216   3889             ; int i; 
8217   3889 52 02 00      sub sp, 2
8218   388C             ; struct klingon *k; 
8219   388C 52 02 00      sub sp, 2
8220   388F             ; switch(quad[yp+-1][xp+-1]) { 
8221   388F             _switch194_expr:
8222   388F 3B 4A 6E      mov d, _quad_data ; $quad
8223   3892 D7            push a
8224   3893 DA            push d
8225   3894 FA 05 00      lea d, [bp + 5] ; $yp
8226   3897 32            mov bl, [d]
8227   3898 A7 00         mov bh, 0
8228   389A 38 00 00      mov c, 0
8229   389D             ; --- START TERMS
8230   389D D7            push a
8231   389E 11            mov a, b
8232   389F FD 2E FF FF   mov32 cb, $ffffffff
8232   38A3 FF FF 
8233   38A5 56            add b, a
8234   38A6 E4            pop a
8235   38A7             ; --- END TERMS
8236   38A7 E7            pop d
8237   38A8 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8238   38AC DA            push d
8239   38AD FA 06 00      lea d, [bp + 6] ; $xp
8240   38B0 32            mov bl, [d]
8241   38B1 A7 00         mov bh, 0
8242   38B3 38 00 00      mov c, 0
8243   38B6             ; --- START TERMS
8244   38B6 D7            push a
8245   38B7 11            mov a, b
8246   38B8 FD 2E FF FF   mov32 cb, $ffffffff
8246   38BC FF FF 
8247   38BE 56            add b, a
8248   38BF E4            pop a
8249   38C0             ; --- END TERMS
8250   38C0 E7            pop d
8251   38C1 5A            add d, b
8252   38C2 E4            pop a
8253   38C3 32            mov bl, [d]
8254   38C4 A7 00         mov bh, 0
8255   38C6 38 00 00      mov c, 0
8256   38C9             _switch194_comparisons:
8257   38C9 C0 01 00      cmp b, 1
8258   38CC C6 DE 38      je _switch194_case0
8259   38CF C0 03 00      cmp b, 3
8260   38D2 C6 04 39      je _switch194_case1
8261   38D5 C0 02 00      cmp b, 2
8262   38D8 C6 5C 3A      je _switch194_case2
8263   38DB 0A 84 3B      jmp _switch194_exit
8264   38DE             _switch194_case0:
8265   38DE             ; printf("Star at %d, %d absorbed torpedo energy.\n\n", yp, xp); 
8266   38DE             ; --- START FUNCTION CALL
8267   38DE FA 06 00      lea d, [bp + 6] ; $xp
8268   38E1 32            mov bl, [d]
8269   38E2 A7 00         mov bh, 0
8270   38E4 38 00 00      mov c, 0
8271   38E7 FD AB         swp b
8272   38E9 D8            push b
8273   38EA FA 05 00      lea d, [bp + 5] ; $yp
8274   38ED 32            mov bl, [d]
8275   38EE A7 00         mov bh, 0
8276   38F0 38 00 00      mov c, 0
8277   38F3 FD AB         swp b
8278   38F5 D8            push b
8279   38F6 26 89 79      mov b, _s106 ; "Star at %d, %d absorbed torpedo energy.\n\n"
8280   38F9 FD AB         swp b
8281   38FB D8            push b
8282   38FC 07 36 60      call printf
8283   38FF 51 06 00      add sp, 6
8284   3902             ; --- END FUNCTION CALL
8285   3902             ; return; 
8286   3902 F9            leave
8287   3903 09            ret
8288   3904             _switch194_case1:
8289   3904             ; puts("*** Klingon Destroyed ***\n"); 
8290   3904             ; --- START FUNCTION CALL
8291   3904 26 ED 78      mov b, _s99 ; "*** Klingon Destroyed ***\n"
8292   3907 FD AB         swp b
8293   3909 D8            push b
8294   390A 07 47 69      call puts
8295   390D 51 02 00      add sp, 2
8296   3910             ; --- END FUNCTION CALL
8297   3910             ; klingons--; 
8298   3910 3B 20 6E      mov d, _klingons ; $klingons
8299   3913 32            mov bl, [d]
8300   3914 A7 00         mov bh, 0
8301   3916 38 00 00      mov c, 0
8302   3919 FD 7D         dec b
8303   391B 3B 20 6E      mov d, _klingons ; $klingons
8304   391E FD 3E         mov [d], bl
8305   3920 FD 77         inc b
8306   3922             ; klingons_left--; 
8307   3922 3B 22 6E      mov d, _klingons_left ; $klingons_left
8308   3925 32            mov bl, [d]
8309   3926 A7 00         mov bh, 0
8310   3928 38 00 00      mov c, 0
8311   392B FD 7D         dec b
8312   392D 3B 22 6E      mov d, _klingons_left ; $klingons_left
8313   3930 FD 3E         mov [d], bl
8314   3932 FD 77         inc b
8315   3934             ; if (klingons_left <= 0) 
8316   3934             _if195_cond:
8317   3934 3B 22 6E      mov d, _klingons_left ; $klingons_left
8318   3937 32            mov bl, [d]
8319   3938 A7 00         mov bh, 0
8320   393A 38 00 00      mov c, 0
8321   393D             ; --- START RELATIONAL
8322   393D D7            push a
8323   393E 11            mov a, b
8324   393F FD 2E 00 00   mov32 cb, $00000000
8324   3943 00 00 
8325   3945 B0            cmp a, b
8326   3946 FD 76         sleu ; <= (unsigned)
8327   3948 E4            pop a
8328   3949             ; --- END RELATIONAL
8329   3949 C0 00 00      cmp b, 0
8330   394C C6 55 39      je _if195_exit
8331   394F             _if195_TRUE:
8332   394F             ; won_game(); 
8333   394F             ; --- START FUNCTION CALL
8334   394F 07 F7 4E      call won_game
8335   3952 0A 55 39      jmp _if195_exit
8336   3955             _if195_exit:
8337   3955             ; k = kdata; 
8338   3955 FA FD FF      lea d, [bp + -3] ; $k
8339   3958 DA            push d
8340   3959 3B 14 6E      mov d, _kdata_data ; $kdata
8341   395C 2D            mov b, d
8342   395D 38 00 00      mov c, 0
8343   3960 E7            pop d
8344   3961 FD 43         mov [d], b
8345   3963             ; for (i = 0; i <= 2; i++) { 
8346   3963             _for196_init:
8347   3963 FA FF FF      lea d, [bp + -1] ; $i
8348   3966 DA            push d
8349   3967 FD 2E 00 00   mov32 cb, $00000000
8349   396B 00 00 
8350   396D E7            pop d
8351   396E FD 43         mov [d], b
8352   3970             _for196_cond:
8353   3970 FA FF FF      lea d, [bp + -1] ; $i
8354   3973 2A            mov b, [d]
8355   3974 38 00 00      mov c, 0
8356   3977             ; --- START RELATIONAL
8357   3977 D7            push a
8358   3978 11            mov a, b
8359   3979 FD 2E 02 00   mov32 cb, $00000002
8359   397D 00 00 
8360   397F B0            cmp a, b
8361   3980 FD 74         sle ; <= (signed)
8362   3982 E4            pop a
8363   3983             ; --- END RELATIONAL
8364   3983 C0 00 00      cmp b, 0
8365   3986 C6 08 3A      je _for196_exit
8366   3989             _for196_block:
8367   3989             ; if (yp == k->y && xp == k->x) 
8368   3989             _if197_cond:
8369   3989 FA 05 00      lea d, [bp + 5] ; $yp
8370   398C 32            mov bl, [d]
8371   398D A7 00         mov bh, 0
8372   398F 38 00 00      mov c, 0
8373   3992             ; --- START RELATIONAL
8374   3992 D7            push a
8375   3993 11            mov a, b
8376   3994 FA FD FF      lea d, [bp + -3] ; $k
8377   3997 FD 2A         mov d, [d]
8378   3999 58 00 00      add d, 0
8379   399C 32            mov bl, [d]
8380   399D A7 00         mov bh, 0
8381   399F 38 00 00      mov c, 0
8382   39A2 B0            cmp a, b
8383   39A3 FD 71         seq ; ==
8384   39A5 E4            pop a
8385   39A6             ; --- END RELATIONAL
8386   39A6             ; --- START LOGICAL AND
8387   39A6 D7            push a
8388   39A7 11            mov a, b
8389   39A8 FA 06 00      lea d, [bp + 6] ; $xp
8390   39AB 32            mov bl, [d]
8391   39AC A7 00         mov bh, 0
8392   39AE 38 00 00      mov c, 0
8393   39B1             ; --- START RELATIONAL
8394   39B1 D7            push a
8395   39B2 11            mov a, b
8396   39B3 FA FD FF      lea d, [bp + -3] ; $k
8397   39B6 FD 2A         mov d, [d]
8398   39B8 58 01 00      add d, 1
8399   39BB 32            mov bl, [d]
8400   39BC A7 00         mov bh, 0
8401   39BE 38 00 00      mov c, 0
8402   39C1 B0            cmp a, b
8403   39C2 FD 71         seq ; ==
8404   39C4 E4            pop a
8405   39C5             ; --- END RELATIONAL
8406   39C5 FD A7         sand a, b
8407   39C7 E4            pop a
8408   39C8             ; --- END LOGICAL AND
8409   39C8 C0 00 00      cmp b, 0
8410   39CB C6 E3 39      je _if197_exit
8411   39CE             _if197_TRUE:
8412   39CE             ; k->energy = 0; 
8413   39CE FA FD FF      lea d, [bp + -3] ; $k
8414   39D1 FD 2A         mov d, [d]
8415   39D3 58 02 00      add d, 2
8416   39D6 DA            push d
8417   39D7 FD 2E 00 00   mov32 cb, $00000000
8417   39DB 00 00 
8418   39DD E7            pop d
8419   39DE FD 43         mov [d], b
8420   39E0 0A E3 39      jmp _if197_exit
8421   39E3             _if197_exit:
8422   39E3             ; k++; 
8423   39E3 FA FD FF      lea d, [bp + -3] ; $k
8424   39E6 2A            mov b, [d]
8425   39E7 38 00 00      mov c, 0
8426   39EA 11            mov a, b
8427   39EB FD 77         inc b
8428   39ED FD 77         inc b
8429   39EF FA FD FF      lea d, [bp + -3] ; $k
8430   39F2 FD 43         mov [d], b
8431   39F4 27            mov b, a
8432   39F5             _for196_update:
8433   39F5 FA FF FF      lea d, [bp + -1] ; $i
8434   39F8 2A            mov b, [d]
8435   39F9 38 00 00      mov c, 0
8436   39FC 11            mov a, b
8437   39FD FD 77         inc b
8438   39FF FA FF FF      lea d, [bp + -1] ; $i
8439   3A02 FD 43         mov [d], b
8440   3A04 27            mov b, a
8441   3A05 0A 70 39      jmp _for196_cond
8442   3A08             _for196_exit:
8443   3A08             ; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x100; 
8444   3A08 3B 72 6D      mov d, _map_data ; $map
8445   3A0B D7            push a
8446   3A0C DA            push d
8447   3A0D 3B 25 6E      mov d, _quad_y ; $quad_y
8448   3A10 2A            mov b, [d]
8449   3A11 38 00 00      mov c, 0
8450   3A14 E7            pop d
8451   3A15 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8452   3A19 DA            push d
8453   3A1A 3B 27 6E      mov d, _quad_x ; $quad_x
8454   3A1D 2A            mov b, [d]
8455   3A1E 38 00 00      mov c, 0
8456   3A21 E7            pop d
8457   3A22 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8458   3A26 E4            pop a
8459   3A27 DA            push d
8460   3A28 3B 72 6D      mov d, _map_data ; $map
8461   3A2B D7            push a
8462   3A2C DA            push d
8463   3A2D 3B 25 6E      mov d, _quad_y ; $quad_y
8464   3A30 2A            mov b, [d]
8465   3A31 38 00 00      mov c, 0
8466   3A34 E7            pop d
8467   3A35 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8468   3A39 DA            push d
8469   3A3A 3B 27 6E      mov d, _quad_x ; $quad_x
8470   3A3D 2A            mov b, [d]
8471   3A3E 38 00 00      mov c, 0
8472   3A41 E7            pop d
8473   3A42 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8474   3A46 E4            pop a
8475   3A47 2A            mov b, [d]
8476   3A48 38 00 00      mov c, 0
8477   3A4B             ; --- START TERMS
8478   3A4B D7            push a
8479   3A4C 11            mov a, b
8480   3A4D FD 2E 00 01   mov32 cb, $00000100
8480   3A51 00 00 
8481   3A53 60            sub a, b
8482   3A54 27            mov b, a
8483   3A55 E4            pop a
8484   3A56             ; --- END TERMS
8485   3A56 E7            pop d
8486   3A57 FD 43         mov [d], b
8487   3A59             ; break; 
8488   3A59 0A 84 3B      jmp _switch194_exit ; case break
8489   3A5C             _switch194_case2:
8490   3A5C             ; puts("*** Starbase Destroyed ***"); 
8491   3A5C             ; --- START FUNCTION CALL
8492   3A5C 26 B3 79      mov b, _s107 ; "*** Starbase Destroyed ***"
8493   3A5F FD AB         swp b
8494   3A61 D8            push b
8495   3A62 07 47 69      call puts
8496   3A65 51 02 00      add sp, 2
8497   3A68             ; --- END FUNCTION CALL
8498   3A68             ; starbases--; 
8499   3A68 3B 49 6D      mov d, _starbases ; $starbases
8500   3A6B 32            mov bl, [d]
8501   3A6C A7 00         mov bh, 0
8502   3A6E 38 00 00      mov c, 0
8503   3A71 FD 7D         dec b
8504   3A73 3B 49 6D      mov d, _starbases ; $starbases
8505   3A76 FD 3E         mov [d], bl
8506   3A78 FD 77         inc b
8507   3A7A             ; starbases_left--; 
8508   3A7A 3B 4C 6D      mov d, _starbases_left ; $starbases_left
8509   3A7D 32            mov bl, [d]
8510   3A7E A7 00         mov bh, 0
8511   3A80 38 00 00      mov c, 0
8512   3A83 FD 7D         dec b
8513   3A85 3B 4C 6D      mov d, _starbases_left ; $starbases_left
8514   3A88 FD 3E         mov [d], bl
8515   3A8A FD 77         inc b
8516   3A8C             ; if (starbases_left <= 0 && klingons_left <= FROM_FIXED(stardate) - time_start - time_up) { 
8517   3A8C             _if198_cond:
8518   3A8C 3B 4C 6D      mov d, _starbases_left ; $starbases_left
8519   3A8F 32            mov bl, [d]
8520   3A90 A7 00         mov bh, 0
8521   3A92 38 00 00      mov c, 0
8522   3A95             ; --- START RELATIONAL
8523   3A95 D7            push a
8524   3A96 11            mov a, b
8525   3A97 FD 2E 00 00   mov32 cb, $00000000
8525   3A9B 00 00 
8526   3A9D B0            cmp a, b
8527   3A9E FD 74         sle ; <= (signed)
8528   3AA0 E4            pop a
8529   3AA1             ; --- END RELATIONAL
8530   3AA1             ; --- START LOGICAL AND
8531   3AA1 D7            push a
8532   3AA2 11            mov a, b
8533   3AA3 3B 22 6E      mov d, _klingons_left ; $klingons_left
8534   3AA6 32            mov bl, [d]
8535   3AA7 A7 00         mov bh, 0
8536   3AA9 38 00 00      mov c, 0
8537   3AAC             ; --- START RELATIONAL
8538   3AAC D7            push a
8539   3AAD 11            mov a, b
8540   3AAE             ; --- START FUNCTION CALL
8541   3AAE 3B 48 6E      mov d, _stardate ; $stardate
8542   3AB1 2A            mov b, [d]
8543   3AB2 38 00 00      mov c, 0
8544   3AB5 FD AB         swp b
8545   3AB7 D8            push b
8546   3AB8 07 68 04      call FROM_FIXED
8547   3ABB 51 02 00      add sp, 2
8548   3ABE             ; --- END FUNCTION CALL
8549   3ABE             ; --- START TERMS
8550   3ABE D7            push a
8551   3ABF 11            mov a, b
8552   3AC0 3B 2C 6E      mov d, _time_start ; $time_start
8553   3AC3 2A            mov b, [d]
8554   3AC4 38 00 00      mov c, 0
8555   3AC7 60            sub a, b
8556   3AC8 27            mov b, a
8557   3AC9 11            mov a, b
8558   3ACA 3B 2E 6E      mov d, _time_up ; $time_up
8559   3ACD 2A            mov b, [d]
8560   3ACE 38 00 00      mov c, 0
8561   3AD1 60            sub a, b
8562   3AD2 27            mov b, a
8563   3AD3 E4            pop a
8564   3AD4             ; --- END TERMS
8565   3AD4 B0            cmp a, b
8566   3AD5 FD 76         sleu ; <= (unsigned)
8567   3AD7 E4            pop a
8568   3AD8             ; --- END RELATIONAL
8569   3AD8 FD A7         sand a, b
8570   3ADA E4            pop a
8571   3ADB             ; --- END LOGICAL AND
8572   3ADB C0 00 00      cmp b, 0
8573   3ADE C6 17 3B      je _if198_exit
8574   3AE1             _if198_TRUE:
8575   3AE1             ; puts("That does it, Captain!!"); 
8576   3AE1             ; --- START FUNCTION CALL
8577   3AE1 26 CE 79      mov b, _s108 ; "That does it, Captain!!"
8578   3AE4 FD AB         swp b
8579   3AE6 D8            push b
8580   3AE7 07 47 69      call puts
8581   3AEA 51 02 00      add sp, 2
8582   3AED             ; --- END FUNCTION CALL
8583   3AED             ; puts("You are hereby relieved of command\n"); 
8584   3AED             ; --- START FUNCTION CALL
8585   3AED 26 E6 79      mov b, _s109 ; "You are hereby relieved of command\n"
8586   3AF0 FD AB         swp b
8587   3AF2 D8            push b
8588   3AF3 07 47 69      call puts
8589   3AF6 51 02 00      add sp, 2
8590   3AF9             ; --- END FUNCTION CALL
8591   3AF9             ; puts("and sentenced to 99 stardates of hard"); 
8592   3AF9             ; --- START FUNCTION CALL
8593   3AF9 26 0A 7A      mov b, _s110 ; "and sentenced to 99 stardates of hard"
8594   3AFC FD AB         swp b
8595   3AFE D8            push b
8596   3AFF 07 47 69      call puts
8597   3B02 51 02 00      add sp, 2
8598   3B05             ; --- END FUNCTION CALL
8599   3B05             ; puts("labor on Cygnus 12!!\n"); 
8600   3B05             ; --- START FUNCTION CALL
8601   3B05 26 30 7A      mov b, _s111 ; "labor on Cygnus 12!!\n"
8602   3B08 FD AB         swp b
8603   3B0A D8            push b
8604   3B0B 07 47 69      call puts
8605   3B0E 51 02 00      add sp, 2
8606   3B11             ; --- END FUNCTION CALL
8607   3B11             ; resign_commision(); 
8608   3B11             ; --- START FUNCTION CALL
8609   3B11 07 D7 4E      call resign_commision
8610   3B14 0A 17 3B      jmp _if198_exit
8611   3B17             _if198_exit:
8612   3B17             ; puts("Starfleet Command reviewing your record to consider\n court martial!\n"); 
8613   3B17             ; --- START FUNCTION CALL
8614   3B17 26 46 7A      mov b, _s112 ; "Starfleet Command reviewing your record to consider\n court martial!\n"
8615   3B1A FD AB         swp b
8616   3B1C D8            push b
8617   3B1D 07 47 69      call puts
8618   3B20 51 02 00      add sp, 2
8619   3B23             ; --- END FUNCTION CALL
8620   3B23             ; docked = 0;		/* Undock */ 
8621   3B23 3B 6D 6D      mov d, _docked ; $docked
8622   3B26 DA            push d
8623   3B27 FD 2E 00 00   mov32 cb, $00000000
8623   3B2B 00 00 
8624   3B2D E7            pop d
8625   3B2E FD 3E         mov [d], bl
8626   3B30             ; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x10; 
8627   3B30 3B 72 6D      mov d, _map_data ; $map
8628   3B33 D7            push a
8629   3B34 DA            push d
8630   3B35 3B 25 6E      mov d, _quad_y ; $quad_y
8631   3B38 2A            mov b, [d]
8632   3B39 38 00 00      mov c, 0
8633   3B3C E7            pop d
8634   3B3D FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8635   3B41 DA            push d
8636   3B42 3B 27 6E      mov d, _quad_x ; $quad_x
8637   3B45 2A            mov b, [d]
8638   3B46 38 00 00      mov c, 0
8639   3B49 E7            pop d
8640   3B4A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8641   3B4E E4            pop a
8642   3B4F DA            push d
8643   3B50 3B 72 6D      mov d, _map_data ; $map
8644   3B53 D7            push a
8645   3B54 DA            push d
8646   3B55 3B 25 6E      mov d, _quad_y ; $quad_y
8647   3B58 2A            mov b, [d]
8648   3B59 38 00 00      mov c, 0
8649   3B5C E7            pop d
8650   3B5D FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8651   3B61 DA            push d
8652   3B62 3B 27 6E      mov d, _quad_x ; $quad_x
8653   3B65 2A            mov b, [d]
8654   3B66 38 00 00      mov c, 0
8655   3B69 E7            pop d
8656   3B6A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8657   3B6E E4            pop a
8658   3B6F 2A            mov b, [d]
8659   3B70 38 00 00      mov c, 0
8660   3B73             ; --- START TERMS
8661   3B73 D7            push a
8662   3B74 11            mov a, b
8663   3B75 FD 2E 10 00   mov32 cb, $00000010
8663   3B79 00 00 
8664   3B7B 60            sub a, b
8665   3B7C 27            mov b, a
8666   3B7D E4            pop a
8667   3B7E             ; --- END TERMS
8668   3B7E E7            pop d
8669   3B7F FD 43         mov [d], b
8670   3B81             ; break; 
8671   3B81 0A 84 3B      jmp _switch194_exit ; case break
8672   3B84             _switch194_exit:
8673   3B84             ; quad[yp+-1][xp+-1] = 		0       ; 
8674   3B84 3B 4A 6E      mov d, _quad_data ; $quad
8675   3B87 D7            push a
8676   3B88 DA            push d
8677   3B89 FA 05 00      lea d, [bp + 5] ; $yp
8678   3B8C 32            mov bl, [d]
8679   3B8D A7 00         mov bh, 0
8680   3B8F 38 00 00      mov c, 0
8681   3B92             ; --- START TERMS
8682   3B92 D7            push a
8683   3B93 11            mov a, b
8684   3B94 FD 2E FF FF   mov32 cb, $ffffffff
8684   3B98 FF FF 
8685   3B9A 56            add b, a
8686   3B9B E4            pop a
8687   3B9C             ; --- END TERMS
8688   3B9C E7            pop d
8689   3B9D FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8690   3BA1 DA            push d
8691   3BA2 FA 06 00      lea d, [bp + 6] ; $xp
8692   3BA5 32            mov bl, [d]
8693   3BA6 A7 00         mov bh, 0
8694   3BA8 38 00 00      mov c, 0
8695   3BAB             ; --- START TERMS
8696   3BAB D7            push a
8697   3BAC 11            mov a, b
8698   3BAD FD 2E FF FF   mov32 cb, $ffffffff
8698   3BB1 FF FF 
8699   3BB3 56            add b, a
8700   3BB4 E4            pop a
8701   3BB5             ; --- END TERMS
8702   3BB5 E7            pop d
8703   3BB6 5A            add d, b
8704   3BB7 E4            pop a
8705   3BB8 DA            push d
8706   3BB9 FD 2E 00 00   mov32 cb, $00000000
8706   3BBD 00 00 
8707   3BBF E7            pop d
8708   3BC0 FD 3E         mov [d], bl
8709   3BC2 F9            leave
8710   3BC3 09            ret
8711   3BC4             
8712   3BC4             damage_control:
8713   3BC4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8714   3BC7             ; int        repair_cost = 0; 
8715   3BC7 52 02 00      sub sp, 2
8716   3BCA             ; --- START LOCAL VAR INITIALIZATION
8717   3BCA FA FF FF      lea d, [bp + -1] ; $repair_cost
8718   3BCD DA            push d
8719   3BCE FD 2E 00 00   mov32 cb, $00000000
8719   3BD2 00 00 
8720   3BD4 E7            pop d
8721   3BD5 FD 43         mov [d], b
8722   3BD7             ; --- END LOCAL VAR INITIALIZATION
8723   3BD7             ; int i; 
8724   3BD7 52 02 00      sub sp, 2
8725   3BDA             ; if (damage[6] < 0) 
8726   3BDA             _if199_cond:
8727   3BDA 3B 30 6E      mov d, _damage_data ; $damage
8728   3BDD D7            push a
8729   3BDE DA            push d
8730   3BDF FD 2E 06 00   mov32 cb, $00000006
8730   3BE3 00 00 
8731   3BE5 E7            pop d
8732   3BE6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8733   3BEA E4            pop a
8734   3BEB 2A            mov b, [d]
8735   3BEC 38 00 00      mov c, 0
8736   3BEF             ; --- START RELATIONAL
8737   3BEF D7            push a
8738   3BF0 11            mov a, b
8739   3BF1 FD 2E 00 00   mov32 cb, $00000000
8739   3BF5 00 00 
8740   3BF7 B0            cmp a, b
8741   3BF8 FD 73         slt ; < (signed)
8742   3BFA E4            pop a
8743   3BFB             ; --- END RELATIONAL
8744   3BFB C0 00 00      cmp b, 0
8745   3BFE C6 10 3C      je _if199_exit
8746   3C01             _if199_TRUE:
8747   3C01             ; puts("Damage Control report not available."); 
8748   3C01             ; --- START FUNCTION CALL
8749   3C01 26 8B 7A      mov b, _s113 ; "Damage Control report not available."
8750   3C04 FD AB         swp b
8751   3C06 D8            push b
8752   3C07 07 47 69      call puts
8753   3C0A 51 02 00      add sp, 2
8754   3C0D             ; --- END FUNCTION CALL
8755   3C0D 0A 10 3C      jmp _if199_exit
8756   3C10             _if199_exit:
8757   3C10             ; if (docked) { 
8758   3C10             _if200_cond:
8759   3C10 3B 6D 6D      mov d, _docked ; $docked
8760   3C13 32            mov bl, [d]
8761   3C14 A7 00         mov bh, 0
8762   3C16 38 00 00      mov c, 0
8763   3C19 C0 00 00      cmp b, 0
8764   3C1C C6 EC 3D      je _if200_exit
8765   3C1F             _if200_TRUE:
8766   3C1F             ; repair_cost = 0; 
8767   3C1F FA FF FF      lea d, [bp + -1] ; $repair_cost
8768   3C22 DA            push d
8769   3C23 FD 2E 00 00   mov32 cb, $00000000
8769   3C27 00 00 
8770   3C29 E7            pop d
8771   3C2A FD 43         mov [d], b
8772   3C2C             ; for (i = 1; i <= 8; i++) 
8773   3C2C             _for201_init:
8774   3C2C FA FD FF      lea d, [bp + -3] ; $i
8775   3C2F DA            push d
8776   3C30 FD 2E 01 00   mov32 cb, $00000001
8776   3C34 00 00 
8777   3C36 E7            pop d
8778   3C37 FD 43         mov [d], b
8779   3C39             _for201_cond:
8780   3C39 FA FD FF      lea d, [bp + -3] ; $i
8781   3C3C 2A            mov b, [d]
8782   3C3D 38 00 00      mov c, 0
8783   3C40             ; --- START RELATIONAL
8784   3C40 D7            push a
8785   3C41 11            mov a, b
8786   3C42 FD 2E 08 00   mov32 cb, $00000008
8786   3C46 00 00 
8787   3C48 B0            cmp a, b
8788   3C49 FD 74         sle ; <= (signed)
8789   3C4B E4            pop a
8790   3C4C             ; --- END RELATIONAL
8791   3C4C C0 00 00      cmp b, 0
8792   3C4F C6 A8 3C      je _for201_exit
8793   3C52             _for201_block:
8794   3C52             ; if (damage[i] < 0) 
8795   3C52             _if202_cond:
8796   3C52 3B 30 6E      mov d, _damage_data ; $damage
8797   3C55 D7            push a
8798   3C56 DA            push d
8799   3C57 FA FD FF      lea d, [bp + -3] ; $i
8800   3C5A 2A            mov b, [d]
8801   3C5B 38 00 00      mov c, 0
8802   3C5E E7            pop d
8803   3C5F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8804   3C63 E4            pop a
8805   3C64 2A            mov b, [d]
8806   3C65 38 00 00      mov c, 0
8807   3C68             ; --- START RELATIONAL
8808   3C68 D7            push a
8809   3C69 11            mov a, b
8810   3C6A FD 2E 00 00   mov32 cb, $00000000
8810   3C6E 00 00 
8811   3C70 B0            cmp a, b
8812   3C71 FD 73         slt ; < (signed)
8813   3C73 E4            pop a
8814   3C74             ; --- END RELATIONAL
8815   3C74 C0 00 00      cmp b, 0
8816   3C77 C6 95 3C      je _if202_exit
8817   3C7A             _if202_TRUE:
8818   3C7A             ; repair_cost = repair_cost + 10; 
8819   3C7A FA FF FF      lea d, [bp + -1] ; $repair_cost
8820   3C7D DA            push d
8821   3C7E FA FF FF      lea d, [bp + -1] ; $repair_cost
8822   3C81 2A            mov b, [d]
8823   3C82 38 00 00      mov c, 0
8824   3C85             ; --- START TERMS
8825   3C85 D7            push a
8826   3C86 11            mov a, b
8827   3C87 FD 2E 0A 00   mov32 cb, $0000000a
8827   3C8B 00 00 
8828   3C8D 56            add b, a
8829   3C8E E4            pop a
8830   3C8F             ; --- END TERMS
8831   3C8F E7            pop d
8832   3C90 FD 43         mov [d], b
8833   3C92 0A 95 3C      jmp _if202_exit
8834   3C95             _if202_exit:
8835   3C95             _for201_update:
8836   3C95 FA FD FF      lea d, [bp + -3] ; $i
8837   3C98 2A            mov b, [d]
8838   3C99 38 00 00      mov c, 0
8839   3C9C 11            mov a, b
8840   3C9D FD 77         inc b
8841   3C9F FA FD FF      lea d, [bp + -3] ; $i
8842   3CA2 FD 43         mov [d], b
8843   3CA4 27            mov b, a
8844   3CA5 0A 39 3C      jmp _for201_cond
8845   3CA8             _for201_exit:
8846   3CA8             ; if (repair_cost) { 
8847   3CA8             _if203_cond:
8848   3CA8 FA FF FF      lea d, [bp + -1] ; $repair_cost
8849   3CAB 2A            mov b, [d]
8850   3CAC 38 00 00      mov c, 0
8851   3CAF C0 00 00      cmp b, 0
8852   3CB2 C6 E9 3D      je _if203_exit
8853   3CB5             _if203_TRUE:
8854   3CB5             ; repair_cost = repair_cost + d4; 
8855   3CB5 FA FF FF      lea d, [bp + -1] ; $repair_cost
8856   3CB8 DA            push d
8857   3CB9 FA FF FF      lea d, [bp + -1] ; $repair_cost
8858   3CBC 2A            mov b, [d]
8859   3CBD 38 00 00      mov c, 0
8860   3CC0             ; --- START TERMS
8861   3CC0 D7            push a
8862   3CC1 11            mov a, b
8863   3CC2 3B 42 6E      mov d, _d4 ; $d4
8864   3CC5 2A            mov b, [d]
8865   3CC6 38 00 00      mov c, 0
8866   3CC9 56            add b, a
8867   3CCA E4            pop a
8868   3CCB             ; --- END TERMS
8869   3CCB E7            pop d
8870   3CCC FD 43         mov [d], b
8871   3CCE             ; if (repair_cost >= 100) 
8872   3CCE             _if204_cond:
8873   3CCE FA FF FF      lea d, [bp + -1] ; $repair_cost
8874   3CD1 2A            mov b, [d]
8875   3CD2 38 00 00      mov c, 0
8876   3CD5             ; --- START RELATIONAL
8877   3CD5 D7            push a
8878   3CD6 11            mov a, b
8879   3CD7 FD 2E 64 00   mov32 cb, $00000064
8879   3CDB 00 00 
8880   3CDD B0            cmp a, b
8881   3CDE FD 80         sge ; >=
8882   3CE0 E4            pop a
8883   3CE1             ; --- END RELATIONAL
8884   3CE1 C0 00 00      cmp b, 0
8885   3CE4 C6 F7 3C      je _if204_exit
8886   3CE7             _if204_TRUE:
8887   3CE7             ; repair_cost = 90;	/* 0.9 */ 
8888   3CE7 FA FF FF      lea d, [bp + -1] ; $repair_cost
8889   3CEA DA            push d
8890   3CEB FD 2E 5A 00   mov32 cb, $0000005a
8890   3CEF 00 00 
8891   3CF1 E7            pop d
8892   3CF2 FD 43         mov [d], b
8893   3CF4 0A F7 3C      jmp _if204_exit
8894   3CF7             _if204_exit:
8895   3CF7             ; printf("\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? ", print100(repair_cost)); 
8896   3CF7             ; --- START FUNCTION CALL
8897   3CF7             ; --- START FUNCTION CALL
8898   3CF7 FA FF FF      lea d, [bp + -1] ; $repair_cost
8899   3CFA 2A            mov b, [d]
8900   3CFB 38 00 00      mov c, 0
8901   3CFE FD AB         swp b
8902   3D00 D8            push b
8903   3D01 07 07 09      call print100
8904   3D04 51 02 00      add sp, 2
8905   3D07             ; --- END FUNCTION CALL
8906   3D07 FD AB         swp b
8907   3D09 D8            push b
8908   3D0A 26 B0 7A      mov b, _s114 ; "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? "
8909   3D0D FD AB         swp b
8910   3D0F D8            push b
8911   3D10 07 36 60      call printf
8912   3D13 51 04 00      add sp, 4
8913   3D16             ; --- END FUNCTION CALL
8914   3D16             ; if (yesno()) { 
8915   3D16             _if205_cond:
8916   3D16             ; --- START FUNCTION CALL
8917   3D16 07 25 06      call yesno
8918   3D19 C0 00 00      cmp b, 0
8919   3D1C C6 E4 3D      je _if205_exit
8920   3D1F             _if205_TRUE:
8921   3D1F             ; for (i = 1; i <= 8; i++) 
8922   3D1F             _for206_init:
8923   3D1F FA FD FF      lea d, [bp + -3] ; $i
8924   3D22 DA            push d
8925   3D23 FD 2E 01 00   mov32 cb, $00000001
8925   3D27 00 00 
8926   3D29 E7            pop d
8927   3D2A FD 43         mov [d], b
8928   3D2C             _for206_cond:
8929   3D2C FA FD FF      lea d, [bp + -3] ; $i
8930   3D2F 2A            mov b, [d]
8931   3D30 38 00 00      mov c, 0
8932   3D33             ; --- START RELATIONAL
8933   3D33 D7            push a
8934   3D34 11            mov a, b
8935   3D35 FD 2E 08 00   mov32 cb, $00000008
8935   3D39 00 00 
8936   3D3B B0            cmp a, b
8937   3D3C FD 74         sle ; <= (signed)
8938   3D3E E4            pop a
8939   3D3F             ; --- END RELATIONAL
8940   3D3F C0 00 00      cmp b, 0
8941   3D42 C6 9F 3D      je _for206_exit
8942   3D45             _for206_block:
8943   3D45             ; if (damage[i] < 0) 
8944   3D45             _if207_cond:
8945   3D45 3B 30 6E      mov d, _damage_data ; $damage
8946   3D48 D7            push a
8947   3D49 DA            push d
8948   3D4A FA FD FF      lea d, [bp + -3] ; $i
8949   3D4D 2A            mov b, [d]
8950   3D4E 38 00 00      mov c, 0
8951   3D51 E7            pop d
8952   3D52 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8953   3D56 E4            pop a
8954   3D57 2A            mov b, [d]
8955   3D58 38 00 00      mov c, 0
8956   3D5B             ; --- START RELATIONAL
8957   3D5B D7            push a
8958   3D5C 11            mov a, b
8959   3D5D FD 2E 00 00   mov32 cb, $00000000
8959   3D61 00 00 
8960   3D63 B0            cmp a, b
8961   3D64 FD 73         slt ; < (signed)
8962   3D66 E4            pop a
8963   3D67             ; --- END RELATIONAL
8964   3D67 C0 00 00      cmp b, 0
8965   3D6A C6 8C 3D      je _if207_exit
8966   3D6D             _if207_TRUE:
8967   3D6D             ; damage[i] = 0; 
8968   3D6D 3B 30 6E      mov d, _damage_data ; $damage
8969   3D70 D7            push a
8970   3D71 DA            push d
8971   3D72 FA FD FF      lea d, [bp + -3] ; $i
8972   3D75 2A            mov b, [d]
8973   3D76 38 00 00      mov c, 0
8974   3D79 E7            pop d
8975   3D7A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8976   3D7E E4            pop a
8977   3D7F DA            push d
8978   3D80 FD 2E 00 00   mov32 cb, $00000000
8978   3D84 00 00 
8979   3D86 E7            pop d
8980   3D87 FD 43         mov [d], b
8981   3D89 0A 8C 3D      jmp _if207_exit
8982   3D8C             _if207_exit:
8983   3D8C             _for206_update:
8984   3D8C FA FD FF      lea d, [bp + -3] ; $i
8985   3D8F 2A            mov b, [d]
8986   3D90 38 00 00      mov c, 0
8987   3D93 11            mov a, b
8988   3D94 FD 77         inc b
8989   3D96 FA FD FF      lea d, [bp + -3] ; $i
8990   3D99 FD 43         mov [d], b
8991   3D9B 27            mov b, a
8992   3D9C 0A 2C 3D      jmp _for206_cond
8993   3D9F             _for206_exit:
8994   3D9F             ; stardate = stardate + (repair_cost + 5)/10 + 1; 
8995   3D9F 3B 48 6E      mov d, _stardate ; $stardate
8996   3DA2 DA            push d
8997   3DA3 3B 48 6E      mov d, _stardate ; $stardate
8998   3DA6 2A            mov b, [d]
8999   3DA7 38 00 00      mov c, 0
9000   3DAA             ; --- START TERMS
9001   3DAA D7            push a
9002   3DAB 11            mov a, b
9003   3DAC FA FF FF      lea d, [bp + -1] ; $repair_cost
9004   3DAF 2A            mov b, [d]
9005   3DB0 38 00 00      mov c, 0
9006   3DB3             ; --- START TERMS
9007   3DB3 D7            push a
9008   3DB4 11            mov a, b
9009   3DB5 FD 2E 05 00   mov32 cb, $00000005
9009   3DB9 00 00 
9010   3DBB 56            add b, a
9011   3DBC E4            pop a
9012   3DBD             ; --- END TERMS
9013   3DBD             ; --- START FACTORS
9014   3DBD D7            push a
9015   3DBE FD D8         push g
9016   3DC0 11            mov a, b
9017   3DC1 FD 7A         mov g, c
9018   3DC3 FD 2E 0A 00   mov32 cb, $0000000a
9018   3DC7 00 00 
9019   3DC9 FD D8         push g ; save 'g' as the div instruction uses it
9020   3DCB AE            div a, b ; /, a: quotient, b: remainder
9021   3DCC FD F1         pop g
9022   3DCE FD 38         mov c, g
9023   3DD0 27            mov b, a
9024   3DD1 FD F1         pop g
9025   3DD3 E4            pop a
9026   3DD4             ; --- END FACTORS
9027   3DD4 56            add b, a
9028   3DD5 11            mov a, b
9029   3DD6 FD 2E 01 00   mov32 cb, $00000001
9029   3DDA 00 00 
9030   3DDC 56            add b, a
9031   3DDD E4            pop a
9032   3DDE             ; --- END TERMS
9033   3DDE E7            pop d
9034   3DDF FD 43         mov [d], b
9035   3DE1 0A E4 3D      jmp _if205_exit
9036   3DE4             _if205_exit:
9037   3DE4             ; return; 
9038   3DE4 F9            leave
9039   3DE5 09            ret
9040   3DE6 0A E9 3D      jmp _if203_exit
9041   3DE9             _if203_exit:
9042   3DE9 0A EC 3D      jmp _if200_exit
9043   3DEC             _if200_exit:
9044   3DEC             ; if (damage[6] < 0) 
9045   3DEC             _if210_cond:
9046   3DEC 3B 30 6E      mov d, _damage_data ; $damage
9047   3DEF D7            push a
9048   3DF0 DA            push d
9049   3DF1 FD 2E 06 00   mov32 cb, $00000006
9049   3DF5 00 00 
9050   3DF7 E7            pop d
9051   3DF8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9052   3DFC E4            pop a
9053   3DFD 2A            mov b, [d]
9054   3DFE 38 00 00      mov c, 0
9055   3E01             ; --- START RELATIONAL
9056   3E01 D7            push a
9057   3E02 11            mov a, b
9058   3E03 FD 2E 00 00   mov32 cb, $00000000
9058   3E07 00 00 
9059   3E09 B0            cmp a, b
9060   3E0A FD 73         slt ; < (signed)
9061   3E0C E4            pop a
9062   3E0D             ; --- END RELATIONAL
9063   3E0D C0 00 00      cmp b, 0
9064   3E10 C6 18 3E      je _if210_exit
9065   3E13             _if210_TRUE:
9066   3E13             ; return; 
9067   3E13 F9            leave
9068   3E14 09            ret
9069   3E15 0A 18 3E      jmp _if210_exit
9070   3E18             _if210_exit:
9071   3E18             ; puts("Device            State of Repair"); 
9072   3E18             ; --- START FUNCTION CALL
9073   3E18 26 3E 7B      mov b, _s115 ; "Device            State of Repair"
9074   3E1B FD AB         swp b
9075   3E1D D8            push b
9076   3E1E 07 47 69      call puts
9077   3E21 51 02 00      add sp, 2
9078   3E24             ; --- END FUNCTION CALL
9079   3E24             ; for (i = 1; i <= 8; i++) 
9080   3E24             _for211_init:
9081   3E24 FA FD FF      lea d, [bp + -3] ; $i
9082   3E27 DA            push d
9083   3E28 FD 2E 01 00   mov32 cb, $00000001
9083   3E2C 00 00 
9084   3E2E E7            pop d
9085   3E2F FD 43         mov [d], b
9086   3E31             _for211_cond:
9087   3E31 FA FD FF      lea d, [bp + -3] ; $i
9088   3E34 2A            mov b, [d]
9089   3E35 38 00 00      mov c, 0
9090   3E38             ; --- START RELATIONAL
9091   3E38 D7            push a
9092   3E39 11            mov a, b
9093   3E3A FD 2E 08 00   mov32 cb, $00000008
9093   3E3E 00 00 
9094   3E40 B0            cmp a, b
9095   3E41 FD 74         sle ; <= (signed)
9096   3E43 E4            pop a
9097   3E44             ; --- END RELATIONAL
9098   3E44 C0 00 00      cmp b, 0
9099   3E47 C6 9E 3E      je _for211_exit
9100   3E4A             _for211_block:
9101   3E4A             ; printf("%-25s%6s\n", get_device_name(i), print100(damage[i])); 
9102   3E4A             ; --- START FUNCTION CALL
9103   3E4A             ; --- START FUNCTION CALL
9104   3E4A 3B 30 6E      mov d, _damage_data ; $damage
9105   3E4D D7            push a
9106   3E4E DA            push d
9107   3E4F FA FD FF      lea d, [bp + -3] ; $i
9108   3E52 2A            mov b, [d]
9109   3E53 38 00 00      mov c, 0
9110   3E56 E7            pop d
9111   3E57 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9112   3E5B E4            pop a
9113   3E5C 2A            mov b, [d]
9114   3E5D 38 00 00      mov c, 0
9115   3E60 FD AB         swp b
9116   3E62 D8            push b
9117   3E63 07 07 09      call print100
9118   3E66 51 02 00      add sp, 2
9119   3E69             ; --- END FUNCTION CALL
9120   3E69 FD AB         swp b
9121   3E6B D8            push b
9122   3E6C             ; --- START FUNCTION CALL
9123   3E6C FA FD FF      lea d, [bp + -3] ; $i
9124   3E6F 2A            mov b, [d]
9125   3E70 38 00 00      mov c, 0
9126   3E73 FD AB         swp b
9127   3E75 D8            push b
9128   3E76 07 27 59      call get_device_name
9129   3E79 51 02 00      add sp, 2
9130   3E7C             ; --- END FUNCTION CALL
9131   3E7C FD AB         swp b
9132   3E7E D8            push b
9133   3E7F 26 60 7B      mov b, _s116 ; "%-25s%6s\n"
9134   3E82 FD AB         swp b
9135   3E84 D8            push b
9136   3E85 07 36 60      call printf
9137   3E88 51 06 00      add sp, 6
9138   3E8B             ; --- END FUNCTION CALL
9139   3E8B             _for211_update:
9140   3E8B FA FD FF      lea d, [bp + -3] ; $i
9141   3E8E 2A            mov b, [d]
9142   3E8F 38 00 00      mov c, 0
9143   3E92 11            mov a, b
9144   3E93 FD 77         inc b
9145   3E95 FA FD FF      lea d, [bp + -3] ; $i
9146   3E98 FD 43         mov [d], b
9147   3E9A 27            mov b, a
9148   3E9B 0A 31 3E      jmp _for211_cond
9149   3E9E             _for211_exit:
9150   3E9E             ; printf("\n"); 
9151   3E9E             ; --- START FUNCTION CALL
9152   3E9E 26 6A 7B      mov b, _s117 ; "\n"
9153   3EA1 FD AB         swp b
9154   3EA3 D8            push b
9155   3EA4 07 36 60      call printf
9156   3EA7 51 02 00      add sp, 2
9157   3EAA             ; --- END FUNCTION CALL
9158   3EAA F9            leave
9159   3EAB 09            ret
9160   3EAC             
9161   3EAC             shield_control:
9162   3EAC F8 00 00      enter 0 ; (push bp; mov bp, sp)
9163   3EAF             ; int i; 
9164   3EAF 52 02 00      sub sp, 2
9165   3EB2             ; if (inoperable(7)) 
9166   3EB2             _if212_cond:
9167   3EB2             ; --- START FUNCTION CALL
9168   3EB2 FD 2E 07 00   mov32 cb, $00000007
9168   3EB6 00 00 
9169   3EB8 DD            push bl
9170   3EB9 07 71 09      call inoperable
9171   3EBC 51 01 00      add sp, 1
9172   3EBF             ; --- END FUNCTION CALL
9173   3EBF C0 00 00      cmp b, 0
9174   3EC2 C6 CA 3E      je _if212_exit
9175   3EC5             _if212_TRUE:
9176   3EC5             ; return; 
9177   3EC5 F9            leave
9178   3EC6 09            ret
9179   3EC7 0A CA 3E      jmp _if212_exit
9180   3ECA             _if212_exit:
9181   3ECA             ; printf("Energy available = %d\n\n Input number of units to shields: ", energy + shield); 
9182   3ECA             ; --- START FUNCTION CALL
9183   3ECA 3B 6E 6D      mov d, _energy ; $energy
9184   3ECD 2A            mov b, [d]
9185   3ECE 38 00 00      mov c, 0
9186   3ED1             ; --- START TERMS
9187   3ED1 D7            push a
9188   3ED2 11            mov a, b
9189   3ED3 3B 29 6E      mov d, _shield ; $shield
9190   3ED6 2A            mov b, [d]
9191   3ED7 38 00 00      mov c, 0
9192   3EDA 56            add b, a
9193   3EDB E4            pop a
9194   3EDC             ; --- END TERMS
9195   3EDC FD AB         swp b
9196   3EDE D8            push b
9197   3EDF 26 6C 7B      mov b, _s118 ; "Energy available = %d\n\n Input number of units to shields: "
9198   3EE2 FD AB         swp b
9199   3EE4 D8            push b
9200   3EE5 07 36 60      call printf
9201   3EE8 51 04 00      add sp, 4
9202   3EEB             ; --- END FUNCTION CALL
9203   3EEB             ; i = input_int(); 
9204   3EEB FA FF FF      lea d, [bp + -1] ; $i
9205   3EEE DA            push d
9206   3EEF             ; --- START FUNCTION CALL
9207   3EEF 07 B2 08      call input_int
9208   3EF2 E7            pop d
9209   3EF3 FD 43         mov [d], b
9210   3EF5             ; if (i < 0 || shield == i) { 
9211   3EF5             _if213_cond:
9212   3EF5 FA FF FF      lea d, [bp + -1] ; $i
9213   3EF8 2A            mov b, [d]
9214   3EF9 38 00 00      mov c, 0
9215   3EFC             ; --- START RELATIONAL
9216   3EFC D7            push a
9217   3EFD 11            mov a, b
9218   3EFE FD 2E 00 00   mov32 cb, $00000000
9218   3F02 00 00 
9219   3F04 B0            cmp a, b
9220   3F05 FD 73         slt ; < (signed)
9221   3F07 E4            pop a
9222   3F08             ; --- END RELATIONAL
9223   3F08             ; --- START LOGICAL OR
9224   3F08 D7            push a
9225   3F09 11            mov a, b
9226   3F0A 3B 29 6E      mov d, _shield ; $shield
9227   3F0D 2A            mov b, [d]
9228   3F0E 38 00 00      mov c, 0
9229   3F11             ; --- START RELATIONAL
9230   3F11 D7            push a
9231   3F12 11            mov a, b
9232   3F13 FA FF FF      lea d, [bp + -1] ; $i
9233   3F16 2A            mov b, [d]
9234   3F17 38 00 00      mov c, 0
9235   3F1A B0            cmp a, b
9236   3F1B FD 71         seq ; ==
9237   3F1D E4            pop a
9238   3F1E             ; --- END RELATIONAL
9239   3F1E FD A8         sor a, b ; ||
9240   3F20 E4            pop a
9241   3F21             ; --- END LOGICAL OR
9242   3F21 C0 00 00      cmp b, 0
9243   3F24 C6 38 3F      je _if213_exit
9244   3F27             _if213_TRUE:
9245   3F27             ; puts("<Shields Unchanged>\n"); 
9246   3F27             ; --- START FUNCTION CALL
9247   3F27 26 A7 7B      mov b, _s119 ; "<Shields Unchanged>\n"
9248   3F2A FD AB         swp b
9249   3F2C D8            push b
9250   3F2D 07 47 69      call puts
9251   3F30 51 02 00      add sp, 2
9252   3F33             ; --- END FUNCTION CALL
9253   3F33             ; return; 
9254   3F33 F9            leave
9255   3F34 09            ret
9256   3F35 0A 38 3F      jmp _if213_exit
9257   3F38             _if213_exit:
9258   3F38             ; if (i >= energy + shield) { 
9259   3F38             _if214_cond:
9260   3F38 FA FF FF      lea d, [bp + -1] ; $i
9261   3F3B 2A            mov b, [d]
9262   3F3C 38 00 00      mov c, 0
9263   3F3F             ; --- START RELATIONAL
9264   3F3F D7            push a
9265   3F40 11            mov a, b
9266   3F41 3B 6E 6D      mov d, _energy ; $energy
9267   3F44 2A            mov b, [d]
9268   3F45 38 00 00      mov c, 0
9269   3F48             ; --- START TERMS
9270   3F48 D7            push a
9271   3F49 11            mov a, b
9272   3F4A 3B 29 6E      mov d, _shield ; $shield
9273   3F4D 2A            mov b, [d]
9274   3F4E 38 00 00      mov c, 0
9275   3F51 56            add b, a
9276   3F52 E4            pop a
9277   3F53             ; --- END TERMS
9278   3F53 B0            cmp a, b
9279   3F54 FD 80         sge ; >=
9280   3F56 E4            pop a
9281   3F57             ; --- END RELATIONAL
9282   3F57 C0 00 00      cmp b, 0
9283   3F5A C6 6C 3F      je _if214_exit
9284   3F5D             _if214_TRUE:
9285   3F5D             ; puts("Shield Control Reports:\n  'This is not the Federation Treasury.'"); 
9286   3F5D             ; --- START FUNCTION CALL
9287   3F5D 26 BC 7B      mov b, _s120 ; "Shield Control Reports:\n  'This is not the Federation Treasury.'"
9288   3F60 FD AB         swp b
9289   3F62 D8            push b
9290   3F63 07 47 69      call puts
9291   3F66 51 02 00      add sp, 2
9292   3F69             ; --- END FUNCTION CALL
9293   3F69 0A 6C 3F      jmp _if214_exit
9294   3F6C             _if214_exit:
9295   3F6C             ; energy = energy + shield - i; 
9296   3F6C 3B 6E 6D      mov d, _energy ; $energy
9297   3F6F DA            push d
9298   3F70 3B 6E 6D      mov d, _energy ; $energy
9299   3F73 2A            mov b, [d]
9300   3F74 38 00 00      mov c, 0
9301   3F77             ; --- START TERMS
9302   3F77 D7            push a
9303   3F78 11            mov a, b
9304   3F79 3B 29 6E      mov d, _shield ; $shield
9305   3F7C 2A            mov b, [d]
9306   3F7D 38 00 00      mov c, 0
9307   3F80 56            add b, a
9308   3F81 11            mov a, b
9309   3F82 FA FF FF      lea d, [bp + -1] ; $i
9310   3F85 2A            mov b, [d]
9311   3F86 38 00 00      mov c, 0
9312   3F89 60            sub a, b
9313   3F8A 27            mov b, a
9314   3F8B E4            pop a
9315   3F8C             ; --- END TERMS
9316   3F8C E7            pop d
9317   3F8D FD 43         mov [d], b
9318   3F8F             ; shield = i; 
9319   3F8F 3B 29 6E      mov d, _shield ; $shield
9320   3F92 DA            push d
9321   3F93 FA FF FF      lea d, [bp + -1] ; $i
9322   3F96 2A            mov b, [d]
9323   3F97 38 00 00      mov c, 0
9324   3F9A E7            pop d
9325   3F9B FD 43         mov [d], b
9326   3F9D             ; printf("Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n", shield); 
9327   3F9D             ; --- START FUNCTION CALL
9328   3F9D 3B 29 6E      mov d, _shield ; $shield
9329   3FA0 2A            mov b, [d]
9330   3FA1 38 00 00      mov c, 0
9331   3FA4 FD AB         swp b
9332   3FA6 D8            push b
9333   3FA7 26 FD 7B      mov b, _s121 ; "Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n"
9334   3FAA FD AB         swp b
9335   3FAC D8            push b
9336   3FAD 07 36 60      call printf
9337   3FB0 51 04 00      add sp, 4
9338   3FB3             ; --- END FUNCTION CALL
9339   3FB3 F9            leave
9340   3FB4 09            ret
9341   3FB5             
9342   3FB5             library_computer:
9343   3FB5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9344   3FB8             ; if (inoperable(8)) 
9345   3FB8             _if215_cond:
9346   3FB8             ; --- START FUNCTION CALL
9347   3FB8 FD 2E 08 00   mov32 cb, $00000008
9347   3FBC 00 00 
9348   3FBE DD            push bl
9349   3FBF 07 71 09      call inoperable
9350   3FC2 51 01 00      add sp, 1
9351   3FC5             ; --- END FUNCTION CALL
9352   3FC5 C0 00 00      cmp b, 0
9353   3FC8 C6 D0 3F      je _if215_exit
9354   3FCB             _if215_TRUE:
9355   3FCB             ; return; 
9356   3FCB F9            leave
9357   3FCC 09            ret
9358   3FCD 0A D0 3F      jmp _if215_exit
9359   3FD0             _if215_exit:
9360   3FD0             ; puts("Computer active and awating command: "); 
9361   3FD0             ; --- START FUNCTION CALL
9362   3FD0 26 4C 7C      mov b, _s122 ; "Computer active and awating command: "
9363   3FD3 FD AB         swp b
9364   3FD5 D8            push b
9365   3FD6 07 47 69      call puts
9366   3FD9 51 02 00      add sp, 2
9367   3FDC             ; --- END FUNCTION CALL
9368   3FDC             ; switch(input_int()) { 
9369   3FDC             _switch216_expr:
9370   3FDC             ; --- START FUNCTION CALL
9371   3FDC 07 B2 08      call input_int
9372   3FDF             _switch216_comparisons:
9373   3FDF C0 FF FF      cmp b, -1
9374   3FE2 C6 0F 40      je _switch216_case0
9375   3FE5 C0 00 00      cmp b, 0
9376   3FE8 C6 12 40      je _switch216_case1
9377   3FEB C0 01 00      cmp b, 1
9378   3FEE C6 18 40      je _switch216_case2
9379   3FF1 C0 02 00      cmp b, 2
9380   3FF4 C6 1E 40      je _switch216_case3
9381   3FF7 C0 03 00      cmp b, 3
9382   3FFA C6 24 40      je _switch216_case4
9383   3FFD C0 04 00      cmp b, 4
9384   4000 C6 2A 40      je _switch216_case5
9385   4003 C0 05 00      cmp b, 5
9386   4006 C6 30 40      je _switch216_case6
9387   4009 0A 36 40      jmp _switch216_default
9388   400C 0A 8A 40      jmp _switch216_exit
9389   400F             _switch216_case0:
9390   400F             ; break; 
9391   400F 0A 8A 40      jmp _switch216_exit ; case break
9392   4012             _switch216_case1:
9393   4012             ; galactic_record(); 
9394   4012             ; --- START FUNCTION CALL
9395   4012 07 8C 40      call galactic_record
9396   4015             ; break; 
9397   4015 0A 8A 40      jmp _switch216_exit ; case break
9398   4018             _switch216_case2:
9399   4018             ; status_report(); 
9400   4018             ; --- START FUNCTION CALL
9401   4018 07 F3 41      call status_report
9402   401B             ; break; 
9403   401B 0A 8A 40      jmp _switch216_exit ; case break
9404   401E             _switch216_case3:
9405   401E             ; torpedo_data(); 
9406   401E             ; --- START FUNCTION CALL
9407   401E 07 5B 43      call torpedo_data
9408   4021             ; break; 
9409   4021 0A 8A 40      jmp _switch216_exit ; case break
9410   4024             _switch216_case4:
9411   4024             ; nav_data(); 
9412   4024             ; --- START FUNCTION CALL
9413   4024 07 9B 44      call nav_data
9414   4027             ; break; 
9415   4027 0A 8A 40      jmp _switch216_exit ; case break
9416   402A             _switch216_case5:
9417   402A             ; dirdist_calc(); 
9418   402A             ; --- START FUNCTION CALL
9419   402A 07 10 45      call dirdist_calc
9420   402D             ; break; 
9421   402D 0A 8A 40      jmp _switch216_exit ; case break
9422   4030             _switch216_case6:
9423   4030             ; galaxy_map(); 
9424   4030             ; --- START FUNCTION CALL
9425   4030 07 DD 46      call galaxy_map
9426   4033             ; break; 
9427   4033 0A 8A 40      jmp _switch216_exit ; case break
9428   4036             _switch216_default:
9429   4036             ; puts("Functions available from Library-Computer:\n\n"); 
9430   4036             ; --- START FUNCTION CALL
9431   4036 26 72 7C      mov b, _s123 ; "Functions available from Library-Computer:\n\n"
9432   4039 FD AB         swp b
9433   403B D8            push b
9434   403C 07 47 69      call puts
9435   403F 51 02 00      add sp, 2
9436   4042             ; --- END FUNCTION CALL
9437   4042             ; puts("   0 = Cumulative Galactic Record\n"); 
9438   4042             ; --- START FUNCTION CALL
9439   4042 26 9F 7C      mov b, _s124 ; "   0 = Cumulative Galactic Record\n"
9440   4045 FD AB         swp b
9441   4047 D8            push b
9442   4048 07 47 69      call puts
9443   404B 51 02 00      add sp, 2
9444   404E             ; --- END FUNCTION CALL
9445   404E             ; puts("   1 = Status Report\n"); 
9446   404E             ; --- START FUNCTION CALL
9447   404E 26 C2 7C      mov b, _s125 ; "   1 = Status Report\n"
9448   4051 FD AB         swp b
9449   4053 D8            push b
9450   4054 07 47 69      call puts
9451   4057 51 02 00      add sp, 2
9452   405A             ; --- END FUNCTION CALL
9453   405A             ; puts("   2 = Photon Torpedo Data\n"); 
9454   405A             ; --- START FUNCTION CALL
9455   405A 26 D8 7C      mov b, _s126 ; "   2 = Photon Torpedo Data\n"
9456   405D FD AB         swp b
9457   405F D8            push b
9458   4060 07 47 69      call puts
9459   4063 51 02 00      add sp, 2
9460   4066             ; --- END FUNCTION CALL
9461   4066             ; puts("   3 = Starbase Nav Data\n"); 
9462   4066             ; --- START FUNCTION CALL
9463   4066 26 F4 7C      mov b, _s127 ; "   3 = Starbase Nav Data\n"
9464   4069 FD AB         swp b
9465   406B D8            push b
9466   406C 07 47 69      call puts
9467   406F 51 02 00      add sp, 2
9468   4072             ; --- END FUNCTION CALL
9469   4072             ; puts("   4 = Direction/Distance Calculator\n"); 
9470   4072             ; --- START FUNCTION CALL
9471   4072 26 0E 7D      mov b, _s128 ; "   4 = Direction/Distance Calculator\n"
9472   4075 FD AB         swp b
9473   4077 D8            push b
9474   4078 07 47 69      call puts
9475   407B 51 02 00      add sp, 2
9476   407E             ; --- END FUNCTION CALL
9477   407E             ; puts("   5 = Galaxy 'Region Name' Map\n"); 
9478   407E             ; --- START FUNCTION CALL
9479   407E 26 34 7D      mov b, _s129 ; "   5 = Galaxy 'Region Name' Map\n"
9480   4081 FD AB         swp b
9481   4083 D8            push b
9482   4084 07 47 69      call puts
9483   4087 51 02 00      add sp, 2
9484   408A             ; --- END FUNCTION CALL
9485   408A             _switch216_exit:
9486   408A F9            leave
9487   408B 09            ret
9488   408C             
9489   408C             galactic_record:
9490   408C F8 00 00      enter 0 ; (push bp; mov bp, sp)
9491   408F             ; int i, j; 
9492   408F 52 02 00      sub sp, 2
9493   4092 52 02 00      sub sp, 2
9494   4095             ; printf("\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", quad_y, quad_x); 
9495   4095             ; --- START FUNCTION CALL
9496   4095 3B 27 6E      mov d, _quad_x ; $quad_x
9497   4098 2A            mov b, [d]
9498   4099 38 00 00      mov c, 0
9499   409C FD AB         swp b
9500   409E D8            push b
9501   409F 3B 25 6E      mov d, _quad_y ; $quad_y
9502   40A2 2A            mov b, [d]
9503   40A3 38 00 00      mov c, 0
9504   40A6 FD AB         swp b
9505   40A8 D8            push b
9506   40A9 26 55 7D      mov b, _s130 ; "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n"
9507   40AC FD AB         swp b
9508   40AE D8            push b
9509   40AF 07 36 60      call printf
9510   40B2 51 06 00      add sp, 6
9511   40B5             ; --- END FUNCTION CALL
9512   40B5             ; puts("     1     2     3     4     5     6     7     8"); 
9513   40B5             ; --- START FUNCTION CALL
9514   40B5 26 8A 7D      mov b, _s131 ; "     1     2     3     4     5     6     7     8"
9515   40B8 FD AB         swp b
9516   40BA D8            push b
9517   40BB 07 47 69      call puts
9518   40BE 51 02 00      add sp, 2
9519   40C1             ; --- END FUNCTION CALL
9520   40C1             ; for (i = 1; i <= 8; i++) { 
9521   40C1             _for217_init:
9522   40C1 FA FF FF      lea d, [bp + -1] ; $i
9523   40C4 DA            push d
9524   40C5 FD 2E 01 00   mov32 cb, $00000001
9524   40C9 00 00 
9525   40CB E7            pop d
9526   40CC FD 43         mov [d], b
9527   40CE             _for217_cond:
9528   40CE FA FF FF      lea d, [bp + -1] ; $i
9529   40D1 2A            mov b, [d]
9530   40D2 38 00 00      mov c, 0
9531   40D5             ; --- START RELATIONAL
9532   40D5 D7            push a
9533   40D6 11            mov a, b
9534   40D7 FD 2E 08 00   mov32 cb, $00000008
9534   40DB 00 00 
9535   40DD B0            cmp a, b
9536   40DE FD 74         sle ; <= (signed)
9537   40E0 E4            pop a
9538   40E1             ; --- END RELATIONAL
9539   40E1 C0 00 00      cmp b, 0
9540   40E4 C6 DB 41      je _for217_exit
9541   40E7             _for217_block:
9542   40E7             ; printf("%s%d", gr_1, i); 
9543   40E7             ; --- START FUNCTION CALL
9544   40E7 FA FF FF      lea d, [bp + -1] ; $i
9545   40EA 2A            mov b, [d]
9546   40EB 38 00 00      mov c, 0
9547   40EE FD AB         swp b
9548   40F0 D8            push b
9549   40F1 3B CE 6F      mov d, _gr_1 ; $gr_1
9550   40F4 2A            mov b, [d]
9551   40F5 38 00 00      mov c, 0
9552   40F8 FD AB         swp b
9553   40FA D8            push b
9554   40FB 26 BB 7D      mov b, _s132 ; "%s%d"
9555   40FE FD AB         swp b
9556   4100 D8            push b
9557   4101 07 36 60      call printf
9558   4104 51 06 00      add sp, 6
9559   4107             ; --- END FUNCTION CALL
9560   4107             ; for (j = 1; j <= 8; j++) { 
9561   4107             _for218_init:
9562   4107 FA FD FF      lea d, [bp + -3] ; $j
9563   410A DA            push d
9564   410B FD 2E 01 00   mov32 cb, $00000001
9564   410F 00 00 
9565   4111 E7            pop d
9566   4112 FD 43         mov [d], b
9567   4114             _for218_cond:
9568   4114 FA FD FF      lea d, [bp + -3] ; $j
9569   4117 2A            mov b, [d]
9570   4118 38 00 00      mov c, 0
9571   411B             ; --- START RELATIONAL
9572   411B D7            push a
9573   411C 11            mov a, b
9574   411D FD 2E 08 00   mov32 cb, $00000008
9574   4121 00 00 
9575   4123 B0            cmp a, b
9576   4124 FD 74         sle ; <= (signed)
9577   4126 E4            pop a
9578   4127             ; --- END RELATIONAL
9579   4127 C0 00 00      cmp b, 0
9580   412A C6 BB 41      je _for218_exit
9581   412D             _for218_block:
9582   412D             ; printf("   "); 
9583   412D             ; --- START FUNCTION CALL
9584   412D 26 41 71      mov b, _s25 ; "   "
9585   4130 FD AB         swp b
9586   4132 D8            push b
9587   4133 07 36 60      call printf
9588   4136 51 02 00      add sp, 2
9589   4139             ; --- END FUNCTION CALL
9590   4139             ; if (map[i][j] &  0x1000		/* Set if this sector was mapped */           ) 
9591   4139             _if219_cond:
9592   4139 3B 72 6D      mov d, _map_data ; $map
9593   413C D7            push a
9594   413D DA            push d
9595   413E FA FF FF      lea d, [bp + -1] ; $i
9596   4141 2A            mov b, [d]
9597   4142 38 00 00      mov c, 0
9598   4145 E7            pop d
9599   4146 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9600   414A DA            push d
9601   414B FA FD FF      lea d, [bp + -3] ; $j
9602   414E 2A            mov b, [d]
9603   414F 38 00 00      mov c, 0
9604   4152 E7            pop d
9605   4153 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9606   4157 E4            pop a
9607   4158 2A            mov b, [d]
9608   4159 38 00 00      mov c, 0
9609   415C D7            push a
9610   415D 11            mov a, b
9611   415E FD 2E 00 10   mov32 cb, $00001000
9611   4162 00 00 
9612   4164 FD 92         and b, a ; &
9613   4166 E4            pop a
9614   4167 C0 00 00      cmp b, 0
9615   416A C6 9C 41      je _if219_else
9616   416D             _if219_TRUE:
9617   416D             ; putbcd(map[i][j]); 
9618   416D             ; --- START FUNCTION CALL
9619   416D 3B 72 6D      mov d, _map_data ; $map
9620   4170 D7            push a
9621   4171 DA            push d
9622   4172 FA FF FF      lea d, [bp + -1] ; $i
9623   4175 2A            mov b, [d]
9624   4176 38 00 00      mov c, 0
9625   4179 E7            pop d
9626   417A FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9627   417E DA            push d
9628   417F FA FD FF      lea d, [bp + -3] ; $j
9629   4182 2A            mov b, [d]
9630   4183 38 00 00      mov c, 0
9631   4186 E7            pop d
9632   4187 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9633   418B E4            pop a
9634   418C 2A            mov b, [d]
9635   418D 38 00 00      mov c, 0
9636   4190 FD AB         swp b
9637   4192 D8            push b
9638   4193 07 BF 2A      call putbcd
9639   4196 51 02 00      add sp, 2
9640   4199             ; --- END FUNCTION CALL
9641   4199 0A A8 41      jmp _if219_exit
9642   419C             _if219_else:
9643   419C             ; printf("***"); 
9644   419C             ; --- START FUNCTION CALL
9645   419C 26 A8 77      mov b, _s90 ; "***"
9646   419F FD AB         swp b
9647   41A1 D8            push b
9648   41A2 07 36 60      call printf
9649   41A5 51 02 00      add sp, 2
9650   41A8             ; --- END FUNCTION CALL
9651   41A8             _if219_exit:
9652   41A8             _for218_update:
9653   41A8 FA FD FF      lea d, [bp + -3] ; $j
9654   41AB 2A            mov b, [d]
9655   41AC 38 00 00      mov c, 0
9656   41AF 11            mov a, b
9657   41B0 FD 77         inc b
9658   41B2 FA FD FF      lea d, [bp + -3] ; $j
9659   41B5 FD 43         mov [d], b
9660   41B7 27            mov b, a
9661   41B8 0A 14 41      jmp _for218_cond
9662   41BB             _for218_exit:
9663   41BB             ; putchar('\n'); 
9664   41BB             ; --- START FUNCTION CALL
9665   41BB FD 2E 0A 00   mov32 cb, $0000000a
9665   41BF 00 00 
9666   41C1 DD            push bl
9667   41C2 07 BB 64      call putchar
9668   41C5 51 01 00      add sp, 1
9669   41C8             ; --- END FUNCTION CALL
9670   41C8             _for217_update:
9671   41C8 FA FF FF      lea d, [bp + -1] ; $i
9672   41CB 2A            mov b, [d]
9673   41CC 38 00 00      mov c, 0
9674   41CF 11            mov a, b
9675   41D0 FD 77         inc b
9676   41D2 FA FF FF      lea d, [bp + -1] ; $i
9677   41D5 FD 43         mov [d], b
9678   41D7 27            mov b, a
9679   41D8 0A CE 40      jmp _for217_cond
9680   41DB             _for217_exit:
9681   41DB             ; printf("%s\n", gr_1); 
9682   41DB             ; --- START FUNCTION CALL
9683   41DB 3B CE 6F      mov d, _gr_1 ; $gr_1
9684   41DE 2A            mov b, [d]
9685   41DF 38 00 00      mov c, 0
9686   41E2 FD AB         swp b
9687   41E4 D8            push b
9688   41E5 26 AF 77      mov b, _s92 ; "%s\n"
9689   41E8 FD AB         swp b
9690   41EA D8            push b
9691   41EB 07 36 60      call printf
9692   41EE 51 04 00      add sp, 4
9693   41F1             ; --- END FUNCTION CALL
9694   41F1 F9            leave
9695   41F2 09            ret
9696   41F3             
9697   41F3             status_report:
9698   41F3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9699   41F6             ; char *plural; 
9700   41F6 52 02 00      sub sp, 2
9701   41F9             ; plural = str_s + 1; 
9702   41F9 FA FF FF      lea d, [bp + -1] ; $plural
9703   41FC DA            push d
9704   41FD 3B D2 6F      mov d, _str_s ; $str_s
9705   4200 2A            mov b, [d]
9706   4201 38 00 00      mov c, 0
9707   4204             ; --- START TERMS
9708   4204 D7            push a
9709   4205 11            mov a, b
9710   4206 FD 2E 01 00   mov32 cb, $00000001
9710   420A 00 00 
9711   420C 56            add b, a
9712   420D E4            pop a
9713   420E             ; --- END TERMS
9714   420E E7            pop d
9715   420F FD 43         mov [d], b
9716   4211             ; unsigned int         left; 
9717   4211 52 02 00      sub sp, 2
9718   4214             ; left = TO_FIXED(time_start + time_up) - stardate; 
9719   4214 FA FD FF      lea d, [bp + -3] ; $left
9720   4217 DA            push d
9721   4218             ; --- START FUNCTION CALL
9722   4218 3B 2C 6E      mov d, _time_start ; $time_start
9723   421B 2A            mov b, [d]
9724   421C 38 00 00      mov c, 0
9725   421F             ; --- START TERMS
9726   421F D7            push a
9727   4220 11            mov a, b
9728   4221 3B 2E 6E      mov d, _time_up ; $time_up
9729   4224 2A            mov b, [d]
9730   4225 38 00 00      mov c, 0
9731   4228 56            add b, a
9732   4229 E4            pop a
9733   422A             ; --- END TERMS
9734   422A FD AB         swp b
9735   422C D8            push b
9736   422D 07 17 04      call TO_FIXED
9737   4230 51 02 00      add sp, 2
9738   4233             ; --- END FUNCTION CALL
9739   4233             ; --- START TERMS
9740   4233 D7            push a
9741   4234 11            mov a, b
9742   4235 3B 48 6E      mov d, _stardate ; $stardate
9743   4238 2A            mov b, [d]
9744   4239 38 00 00      mov c, 0
9745   423C 60            sub a, b
9746   423D 27            mov b, a
9747   423E E4            pop a
9748   423F             ; --- END TERMS
9749   423F E7            pop d
9750   4240 FD 43         mov [d], b
9751   4242             ; puts("   Status Report:\n"); 
9752   4242             ; --- START FUNCTION CALL
9753   4242 26 C0 7D      mov b, _s133 ; "   Status Report:\n"
9754   4245 FD AB         swp b
9755   4247 D8            push b
9756   4248 07 47 69      call puts
9757   424B 51 02 00      add sp, 2
9758   424E             ; --- END FUNCTION CALL
9759   424E             ; if (klingons_left > 1) 
9760   424E             _if220_cond:
9761   424E 3B 22 6E      mov d, _klingons_left ; $klingons_left
9762   4251 32            mov bl, [d]
9763   4252 A7 00         mov bh, 0
9764   4254 38 00 00      mov c, 0
9765   4257             ; --- START RELATIONAL
9766   4257 D7            push a
9767   4258 11            mov a, b
9768   4259 FD 2E 01 00   mov32 cb, $00000001
9768   425D 00 00 
9769   425F B0            cmp a, b
9770   4260 FD 81         sgu ; > (unsigned)
9771   4262 E4            pop a
9772   4263             ; --- END RELATIONAL
9773   4263 C0 00 00      cmp b, 0
9774   4266 C6 7A 42      je _if220_exit
9775   4269             _if220_TRUE:
9776   4269             ; plural = str_s; 
9777   4269 FA FF FF      lea d, [bp + -1] ; $plural
9778   426C DA            push d
9779   426D 3B D2 6F      mov d, _str_s ; $str_s
9780   4270 2A            mov b, [d]
9781   4271 38 00 00      mov c, 0
9782   4274 E7            pop d
9783   4275 FD 43         mov [d], b
9784   4277 0A 7A 42      jmp _if220_exit
9785   427A             _if220_exit:
9786   427A             ; printf("Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 
9787   427A             ; --- START FUNCTION CALL
9788   427A FA FD FF      lea d, [bp + -3] ; $left
9789   427D 2A            mov b, [d]
9790   427E 38 00 00      mov c, 0
9791   4281             ; --- START FACTORS
9792   4281 D7            push a
9793   4282 FD D8         push g
9794   4284 11            mov a, b
9795   4285 FD 7A         mov g, c
9796   4287 FD 2E 0A 00   mov32 cb, $0000000a
9796   428B 00 00 
9797   428D FD D8         push g ; save 'g' as the div instruction uses it
9798   428F AE            div a, b ; %, a: quotient, b: remainder
9799   4290 11            mov a, b
9800   4291 FD F1         pop g
9801   4293 FD 38         mov c, g
9802   4295 27            mov b, a
9803   4296 FD F1         pop g
9804   4298 E4            pop a
9805   4299             ; --- END FACTORS
9806   4299 FD AB         swp b
9807   429B D8            push b
9808   429C             ; --- START FUNCTION CALL
9809   429C FA FD FF      lea d, [bp + -3] ; $left
9810   429F 2A            mov b, [d]
9811   42A0 38 00 00      mov c, 0
9812   42A3 FD AB         swp b
9813   42A5 D8            push b
9814   42A6 07 68 04      call FROM_FIXED
9815   42A9 51 02 00      add sp, 2
9816   42AC             ; --- END FUNCTION CALL
9817   42AC FD AB         swp b
9818   42AE D8            push b
9819   42AF 3B 22 6E      mov d, _klingons_left ; $klingons_left
9820   42B2 32            mov bl, [d]
9821   42B3 A7 00         mov bh, 0
9822   42B5 38 00 00      mov c, 0
9823   42B8 FD AB         swp b
9824   42BA D8            push b
9825   42BB FA FF FF      lea d, [bp + -1] ; $plural
9826   42BE 2A            mov b, [d]
9827   42BF 38 00 00      mov c, 0
9828   42C2 FD AB         swp b
9829   42C4 D8            push b
9830   42C5 26 D3 7D      mov b, _s134 ; "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n"
9831   42C8 FD AB         swp b
9832   42CA D8            push b
9833   42CB 07 36 60      call printf
9834   42CE 51 0A 00      add sp, 10
9835   42D1             ; --- END FUNCTION CALL
9836   42D1             ; if (starbases_left < 1) { 
9837   42D1             _if225_cond:
9838   42D1 3B 4C 6D      mov d, _starbases_left ; $starbases_left
9839   42D4 32            mov bl, [d]
9840   42D5 A7 00         mov bh, 0
9841   42D7 38 00 00      mov c, 0
9842   42DA             ; --- START RELATIONAL
9843   42DA D7            push a
9844   42DB 11            mov a, b
9845   42DC FD 2E 01 00   mov32 cb, $00000001
9845   42E0 00 00 
9846   42E2 B0            cmp a, b
9847   42E3 FD 73         slt ; < (signed)
9848   42E5 E4            pop a
9849   42E6             ; --- END RELATIONAL
9850   42E6 C0 00 00      cmp b, 0
9851   42E9 C6 FB 42      je _if225_else
9852   42EC             _if225_TRUE:
9853   42EC             ; puts("Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"); 
9854   42EC             ; --- START FUNCTION CALL
9855   42EC 26 15 7E      mov b, _s135 ; "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"
9856   42EF FD AB         swp b
9857   42F1 D8            push b
9858   42F2 07 47 69      call puts
9859   42F5 51 02 00      add sp, 2
9860   42F8             ; --- END FUNCTION CALL
9861   42F8 0A 59 43      jmp _if225_exit
9862   42FB             _if225_else:
9863   42FB             ; plural = str_s; 
9864   42FB FA FF FF      lea d, [bp + -1] ; $plural
9865   42FE DA            push d
9866   42FF 3B D2 6F      mov d, _str_s ; $str_s
9867   4302 2A            mov b, [d]
9868   4303 38 00 00      mov c, 0
9869   4306 E7            pop d
9870   4307 FD 43         mov [d], b
9871   4309             ; if (starbases_left < 2) 
9872   4309             _if226_cond:
9873   4309 3B 4C 6D      mov d, _starbases_left ; $starbases_left
9874   430C 32            mov bl, [d]
9875   430D A7 00         mov bh, 0
9876   430F 38 00 00      mov c, 0
9877   4312             ; --- START RELATIONAL
9878   4312 D7            push a
9879   4313 11            mov a, b
9880   4314 FD 2E 02 00   mov32 cb, $00000002
9880   4318 00 00 
9881   431A B0            cmp a, b
9882   431B FD 73         slt ; < (signed)
9883   431D E4            pop a
9884   431E             ; --- END RELATIONAL
9885   431E C0 00 00      cmp b, 0
9886   4321 C6 37 43      je _if226_exit
9887   4324             _if226_TRUE:
9888   4324             ; plural++; 
9889   4324 FA FF FF      lea d, [bp + -1] ; $plural
9890   4327 2A            mov b, [d]
9891   4328 38 00 00      mov c, 0
9892   432B FD 77         inc b
9893   432D FA FF FF      lea d, [bp + -1] ; $plural
9894   4330 FD 43         mov [d], b
9895   4332 FD 7D         dec b
9896   4334 0A 37 43      jmp _if226_exit
9897   4337             _if226_exit:
9898   4337             ; printf("The Federation is maintaining %d starbase%s in the galaxy\n\n", starbases_left, plural); 
9899   4337             ; --- START FUNCTION CALL
9900   4337 FA FF FF      lea d, [bp + -1] ; $plural
9901   433A 2A            mov b, [d]
9902   433B 38 00 00      mov c, 0
9903   433E FD AB         swp b
9904   4340 D8            push b
9905   4341 3B 4C 6D      mov d, _starbases_left ; $starbases_left
9906   4344 32            mov bl, [d]
9907   4345 A7 00         mov bh, 0
9908   4347 38 00 00      mov c, 0
9909   434A FD AB         swp b
9910   434C D8            push b
9911   434D 26 6C 7E      mov b, _s136 ; "The Federation is maintaining %d starbase%s in the galaxy\n\n"
9912   4350 FD AB         swp b
9913   4352 D8            push b
9914   4353 07 36 60      call printf
9915   4356 51 06 00      add sp, 6
9916   4359             ; --- END FUNCTION CALL
9917   4359             _if225_exit:
9918   4359 F9            leave
9919   435A 09            ret
9920   435B             
9921   435B             torpedo_data:
9922   435B F8 00 00      enter 0 ; (push bp; mov bp, sp)
9923   435E             ; int i; 
9924   435E 52 02 00      sub sp, 2
9925   4361             ; char *plural; 
9926   4361 52 02 00      sub sp, 2
9927   4364             ; plural = str_s + 1; 
9928   4364 FA FD FF      lea d, [bp + -3] ; $plural
9929   4367 DA            push d
9930   4368 3B D2 6F      mov d, _str_s ; $str_s
9931   436B 2A            mov b, [d]
9932   436C 38 00 00      mov c, 0
9933   436F             ; --- START TERMS
9934   436F D7            push a
9935   4370 11            mov a, b
9936   4371 FD 2E 01 00   mov32 cb, $00000001
9936   4375 00 00 
9937   4377 56            add b, a
9938   4378 E4            pop a
9939   4379             ; --- END TERMS
9940   4379 E7            pop d
9941   437A FD 43         mov [d], b
9942   437C             ; struct klingon *k; 
9943   437C 52 02 00      sub sp, 2
9944   437F             ; if (no_klingon()) 
9945   437F             _if227_cond:
9946   437F             ; --- START FUNCTION CALL
9947   437F 07 26 2D      call no_klingon
9948   4382 C0 00 00      cmp b, 0
9949   4385 C6 8D 43      je _if227_exit
9950   4388             _if227_TRUE:
9951   4388             ; return; 
9952   4388 F9            leave
9953   4389 09            ret
9954   438A 0A 8D 43      jmp _if227_exit
9955   438D             _if227_exit:
9956   438D             ; if (klingons > 1) 
9957   438D             _if228_cond:
9958   438D 3B 20 6E      mov d, _klingons ; $klingons
9959   4390 32            mov bl, [d]
9960   4391 A7 00         mov bh, 0
9961   4393 38 00 00      mov c, 0
9962   4396             ; --- START RELATIONAL
9963   4396 D7            push a
9964   4397 11            mov a, b
9965   4398 FD 2E 01 00   mov32 cb, $00000001
9965   439C 00 00 
9966   439E B0            cmp a, b
9967   439F FD 81         sgu ; > (unsigned)
9968   43A1 E4            pop a
9969   43A2             ; --- END RELATIONAL
9970   43A2 C0 00 00      cmp b, 0
9971   43A5 C6 BB 43      je _if228_exit
9972   43A8             _if228_TRUE:
9973   43A8             ; plural--; 
9974   43A8 FA FD FF      lea d, [bp + -3] ; $plural
9975   43AB 2A            mov b, [d]
9976   43AC 38 00 00      mov c, 0
9977   43AF FD 7D         dec b
9978   43B1 FA FD FF      lea d, [bp + -3] ; $plural
9979   43B4 FD 43         mov [d], b
9980   43B6 FD 77         inc b
9981   43B8 0A BB 43      jmp _if228_exit
9982   43BB             _if228_exit:
9983   43BB             ; printf("From Enterprise to Klingon battlecriuser%s:\n\n", plural); 
9984   43BB             ; --- START FUNCTION CALL
9985   43BB FA FD FF      lea d, [bp + -3] ; $plural
9986   43BE 2A            mov b, [d]
9987   43BF 38 00 00      mov c, 0
9988   43C2 FD AB         swp b
9989   43C4 D8            push b
9990   43C5 26 A8 7E      mov b, _s137 ; "From Enterprise to Klingon battlecriuser%s:\n\n"
9991   43C8 FD AB         swp b
9992   43CA D8            push b
9993   43CB 07 36 60      call printf
9994   43CE 51 04 00      add sp, 4
9995   43D1             ; --- END FUNCTION CALL
9996   43D1             ; k = kdata; 
9997   43D1 FA FB FF      lea d, [bp + -5] ; $k
9998   43D4 DA            push d
9999   43D5 3B 14 6E      mov d, _kdata_data ; $kdata
10000  43D8 2D            mov b, d
10001  43D9 38 00 00      mov c, 0
10002  43DC E7            pop d
10003  43DD FD 43         mov [d], b
10004  43DF             ; for (i = 0; i <= 2; i++) { 
10005  43DF             _for229_init:
10006  43DF FA FF FF      lea d, [bp + -1] ; $i
10007  43E2 DA            push d
10008  43E3 FD 2E 00 00   mov32 cb, $00000000
10008  43E7 00 00 
10009  43E9 E7            pop d
10010  43EA FD 43         mov [d], b
10011  43EC             _for229_cond:
10012  43EC FA FF FF      lea d, [bp + -1] ; $i
10013  43EF 2A            mov b, [d]
10014  43F0 38 00 00      mov c, 0
10015  43F3             ; --- START RELATIONAL
10016  43F3 D7            push a
10017  43F4 11            mov a, b
10018  43F5 FD 2E 02 00   mov32 cb, $00000002
10018  43F9 00 00 
10019  43FB B0            cmp a, b
10020  43FC FD 74         sle ; <= (signed)
10021  43FE E4            pop a
10022  43FF             ; --- END RELATIONAL
10023  43FF C0 00 00      cmp b, 0
10024  4402 C6 99 44      je _for229_exit
10025  4405             _for229_block:
10026  4405             ; if (k->energy > 0) { 
10027  4405             _if230_cond:
10028  4405 FA FB FF      lea d, [bp + -5] ; $k
10029  4408 FD 2A         mov d, [d]
10030  440A 58 02 00      add d, 2
10031  440D 2A            mov b, [d]
10032  440E 38 00 00      mov c, 0
10033  4411             ; --- START RELATIONAL
10034  4411 D7            push a
10035  4412 11            mov a, b
10036  4413 FD 2E 00 00   mov32 cb, $00000000
10036  4417 00 00 
10037  4419 B0            cmp a, b
10038  441A FD 7F         sgt ; >
10039  441C E4            pop a
10040  441D             ; --- END RELATIONAL
10041  441D C0 00 00      cmp b, 0
10042  4420 C6 74 44      je _if230_exit
10043  4423             _if230_TRUE:
10044  4423             ; compute_vector(TO_FIXED00(k->y), 
10045  4423             ; --- START FUNCTION CALL
10046  4423 3B 46 6E      mov d, _ship_x ; $ship_x
10047  4426 2A            mov b, [d]
10048  4427 38 00 00      mov c, 0
10049  442A FD AB         swp b
10050  442C D8            push b
10051  442D 3B 44 6E      mov d, _ship_y ; $ship_y
10052  4430 2A            mov b, [d]
10053  4431 38 00 00      mov c, 0
10054  4434 FD AB         swp b
10055  4436 D8            push b
10056  4437             ; --- START FUNCTION CALL
10057  4437 FA FB FF      lea d, [bp + -5] ; $k
10058  443A FD 2A         mov d, [d]
10059  443C 58 01 00      add d, 1
10060  443F 32            mov bl, [d]
10061  4440 A7 00         mov bh, 0
10062  4442 38 00 00      mov c, 0
10063  4445 FD AB         swp b
10064  4447 D8            push b
10065  4448 07 8B 04      call TO_FIXED00
10066  444B 51 02 00      add sp, 2
10067  444E             ; --- END FUNCTION CALL
10068  444E FD AB         swp b
10069  4450 D8            push b
10070  4451             ; --- START FUNCTION CALL
10071  4451 FA FB FF      lea d, [bp + -5] ; $k
10072  4454 FD 2A         mov d, [d]
10073  4456 58 00 00      add d, 0
10074  4459 32            mov bl, [d]
10075  445A A7 00         mov bh, 0
10076  445C 38 00 00      mov c, 0
10077  445F FD AB         swp b
10078  4461 D8            push b
10079  4462 07 8B 04      call TO_FIXED00
10080  4465 51 02 00      add sp, 2
10081  4468             ; --- END FUNCTION CALL
10082  4468 FD AB         swp b
10083  446A D8            push b
10084  446B 07 49 49      call compute_vector
10085  446E 51 08 00      add sp, 8
10086  4471             ; --- END FUNCTION CALL
10087  4471 0A 74 44      jmp _if230_exit
10088  4474             _if230_exit:
10089  4474             ; k++; 
10090  4474 FA FB FF      lea d, [bp + -5] ; $k
10091  4477 2A            mov b, [d]
10092  4478 38 00 00      mov c, 0
10093  447B 11            mov a, b
10094  447C FD 77         inc b
10095  447E FD 77         inc b
10096  4480 FA FB FF      lea d, [bp + -5] ; $k
10097  4483 FD 43         mov [d], b
10098  4485 27            mov b, a
10099  4486             _for229_update:
10100  4486 FA FF FF      lea d, [bp + -1] ; $i
10101  4489 2A            mov b, [d]
10102  448A 38 00 00      mov c, 0
10103  448D 11            mov a, b
10104  448E FD 77         inc b
10105  4490 FA FF FF      lea d, [bp + -1] ; $i
10106  4493 FD 43         mov [d], b
10107  4495 27            mov b, a
10108  4496 0A EC 43      jmp _for229_cond
10109  4499             _for229_exit:
10110  4499 F9            leave
10111  449A 09            ret
10112  449B             
10113  449B             nav_data:
10114  449B F8 00 00      enter 0 ; (push bp; mov bp, sp)
10115  449E             ; if (starbases <= 0) { 
10116  449E             _if231_cond:
10117  449E 3B 49 6D      mov d, _starbases ; $starbases
10118  44A1 32            mov bl, [d]
10119  44A2 A7 00         mov bh, 0
10120  44A4 38 00 00      mov c, 0
10121  44A7             ; --- START RELATIONAL
10122  44A7 D7            push a
10123  44A8 11            mov a, b
10124  44A9 FD 2E 00 00   mov32 cb, $00000000
10124  44AD 00 00 
10125  44AF B0            cmp a, b
10126  44B0 FD 74         sle ; <= (signed)
10127  44B2 E4            pop a
10128  44B3             ; --- END RELATIONAL
10129  44B3 C0 00 00      cmp b, 0
10130  44B6 C6 CA 44      je _if231_exit
10131  44B9             _if231_TRUE:
10132  44B9             ; puts("Mr. Spock reports,\n  'Sensors show no starbases in this quadrant.'\n"); 
10133  44B9             ; --- START FUNCTION CALL
10134  44B9 26 D6 7E      mov b, _s138 ; "Mr. Spock reports,\n  'Sensors show no starbases in this quadrant.'\n"
10135  44BC FD AB         swp b
10136  44BE D8            push b
10137  44BF 07 47 69      call puts
10138  44C2 51 02 00      add sp, 2
10139  44C5             ; --- END FUNCTION CALL
10140  44C5             ; return; 
10141  44C5 F9            leave
10142  44C6 09            ret
10143  44C7 0A CA 44      jmp _if231_exit
10144  44CA             _if231_exit:
10145  44CA             ; compute_vector(TO_FIXED00(base_y), TO_FIXED00(base_x), ship_y, ship_x); 
10146  44CA             ; --- START FUNCTION CALL
10147  44CA 3B 46 6E      mov d, _ship_x ; $ship_x
10148  44CD 2A            mov b, [d]
10149  44CE 38 00 00      mov c, 0
10150  44D1 FD AB         swp b
10151  44D3 D8            push b
10152  44D4 3B 44 6E      mov d, _ship_y ; $ship_y
10153  44D7 2A            mov b, [d]
10154  44D8 38 00 00      mov c, 0
10155  44DB FD AB         swp b
10156  44DD D8            push b
10157  44DE             ; --- START FUNCTION CALL
10158  44DE 3B 4B 6D      mov d, _base_x ; $base_x
10159  44E1 32            mov bl, [d]
10160  44E2 A7 00         mov bh, 0
10161  44E4 38 00 00      mov c, 0
10162  44E7 FD AB         swp b
10163  44E9 D8            push b
10164  44EA 07 8B 04      call TO_FIXED00
10165  44ED 51 02 00      add sp, 2
10166  44F0             ; --- END FUNCTION CALL
10167  44F0 FD AB         swp b
10168  44F2 D8            push b
10169  44F3             ; --- START FUNCTION CALL
10170  44F3 3B 4A 6D      mov d, _base_y ; $base_y
10171  44F6 32            mov bl, [d]
10172  44F7 A7 00         mov bh, 0
10173  44F9 38 00 00      mov c, 0
10174  44FC FD AB         swp b
10175  44FE D8            push b
10176  44FF 07 8B 04      call TO_FIXED00
10177  4502 51 02 00      add sp, 2
10178  4505             ; --- END FUNCTION CALL
10179  4505 FD AB         swp b
10180  4507 D8            push b
10181  4508 07 49 49      call compute_vector
10182  450B 51 08 00      add sp, 8
10183  450E             ; --- END FUNCTION CALL
10184  450E F9            leave
10185  450F 09            ret
10186  4510             
10187  4510             dirdist_calc:
10188  4510 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10189  4513             ; int        c1, a, w1, x; 
10190  4513 52 02 00      sub sp, 2
10191  4516 52 02 00      sub sp, 2
10192  4519 52 02 00      sub sp, 2
10193  451C 52 02 00      sub sp, 2
10194  451F             ; printf("Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 
10195  451F             ; --- START FUNCTION CALL
10196  451F             ; --- START FUNCTION CALL
10197  451F 3B 46 6E      mov d, _ship_x ; $ship_x
10198  4522 2A            mov b, [d]
10199  4523 38 00 00      mov c, 0
10200  4526 FD AB         swp b
10201  4528 D8            push b
10202  4529 07 DC 04      call FROM_FIXED00
10203  452C 51 02 00      add sp, 2
10204  452F             ; --- END FUNCTION CALL
10205  452F FD AB         swp b
10206  4531 D8            push b
10207  4532             ; --- START FUNCTION CALL
10208  4532 3B 44 6E      mov d, _ship_y ; $ship_y
10209  4535 2A            mov b, [d]
10210  4536 38 00 00      mov c, 0
10211  4539 FD AB         swp b
10212  453B D8            push b
10213  453C 07 DC 04      call FROM_FIXED00
10214  453F 51 02 00      add sp, 2
10215  4542             ; --- END FUNCTION CALL
10216  4542 FD AB         swp b
10217  4544 D8            push b
10218  4545 3B 27 6E      mov d, _quad_x ; $quad_x
10219  4548 2A            mov b, [d]
10220  4549 38 00 00      mov c, 0
10221  454C FD AB         swp b
10222  454E D8            push b
10223  454F 3B 25 6E      mov d, _quad_y ; $quad_y
10224  4552 2A            mov b, [d]
10225  4553 38 00 00      mov c, 0
10226  4556 FD AB         swp b
10227  4558 D8            push b
10228  4559 26 1A 7F      mov b, _s139 ; "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: "
10229  455C FD AB         swp b
10230  455E D8            push b
10231  455F 07 36 60      call printf
10232  4562 51 0A 00      add sp, 10
10233  4565             ; --- END FUNCTION CALL
10234  4565             ; c1 = TO_FIXED00(input_int()); 
10235  4565 FA FF FF      lea d, [bp + -1] ; $c1
10236  4568 DA            push d
10237  4569             ; --- START FUNCTION CALL
10238  4569             ; --- START FUNCTION CALL
10239  4569 07 B2 08      call input_int
10240  456C FD AB         swp b
10241  456E D8            push b
10242  456F 07 8B 04      call TO_FIXED00
10243  4572 51 02 00      add sp, 2
10244  4575             ; --- END FUNCTION CALL
10245  4575 E7            pop d
10246  4576 FD 43         mov [d], b
10247  4578             ; if (c1 < 0 || c1 > 900 ) 
10248  4578             _if232_cond:
10249  4578 FA FF FF      lea d, [bp + -1] ; $c1
10250  457B 2A            mov b, [d]
10251  457C 38 00 00      mov c, 0
10252  457F             ; --- START RELATIONAL
10253  457F D7            push a
10254  4580 11            mov a, b
10255  4581 FD 2E 00 00   mov32 cb, $00000000
10255  4585 00 00 
10256  4587 B0            cmp a, b
10257  4588 FD 73         slt ; < (signed)
10258  458A E4            pop a
10259  458B             ; --- END RELATIONAL
10260  458B             ; --- START LOGICAL OR
10261  458B D7            push a
10262  458C 11            mov a, b
10263  458D FA FF FF      lea d, [bp + -1] ; $c1
10264  4590 2A            mov b, [d]
10265  4591 38 00 00      mov c, 0
10266  4594             ; --- START RELATIONAL
10267  4594 D7            push a
10268  4595 11            mov a, b
10269  4596 FD 2E 84 03   mov32 cb, $00000384
10269  459A 00 00 
10270  459C B0            cmp a, b
10271  459D FD 7F         sgt ; >
10272  459F E4            pop a
10273  45A0             ; --- END RELATIONAL
10274  45A0 FD A8         sor a, b ; ||
10275  45A2 E4            pop a
10276  45A3             ; --- END LOGICAL OR
10277  45A3 C0 00 00      cmp b, 0
10278  45A6 C6 AE 45      je _if232_exit
10279  45A9             _if232_TRUE:
10280  45A9             ; return; 
10281  45A9 F9            leave
10282  45AA 09            ret
10283  45AB 0A AE 45      jmp _if232_exit
10284  45AE             _if232_exit:
10285  45AE             ; puts("Please enter initial Y coordinate: "); 
10286  45AE             ; --- START FUNCTION CALL
10287  45AE 26 86 7F      mov b, _s140 ; "Please enter initial Y coordinate: "
10288  45B1 FD AB         swp b
10289  45B3 D8            push b
10290  45B4 07 47 69      call puts
10291  45B7 51 02 00      add sp, 2
10292  45BA             ; --- END FUNCTION CALL
10293  45BA             ; a = TO_FIXED00(input_int()); 
10294  45BA FA FD FF      lea d, [bp + -3] ; $a
10295  45BD DA            push d
10296  45BE             ; --- START FUNCTION CALL
10297  45BE             ; --- START FUNCTION CALL
10298  45BE 07 B2 08      call input_int
10299  45C1 FD AB         swp b
10300  45C3 D8            push b
10301  45C4 07 8B 04      call TO_FIXED00
10302  45C7 51 02 00      add sp, 2
10303  45CA             ; --- END FUNCTION CALL
10304  45CA E7            pop d
10305  45CB FD 43         mov [d], b
10306  45CD             ; if (a < 0 || a > 900) 
10307  45CD             _if233_cond:
10308  45CD FA FD FF      lea d, [bp + -3] ; $a
10309  45D0 2A            mov b, [d]
10310  45D1 38 00 00      mov c, 0
10311  45D4             ; --- START RELATIONAL
10312  45D4 D7            push a
10313  45D5 11            mov a, b
10314  45D6 FD 2E 00 00   mov32 cb, $00000000
10314  45DA 00 00 
10315  45DC B0            cmp a, b
10316  45DD FD 73         slt ; < (signed)
10317  45DF E4            pop a
10318  45E0             ; --- END RELATIONAL
10319  45E0             ; --- START LOGICAL OR
10320  45E0 D7            push a
10321  45E1 11            mov a, b
10322  45E2 FA FD FF      lea d, [bp + -3] ; $a
10323  45E5 2A            mov b, [d]
10324  45E6 38 00 00      mov c, 0
10325  45E9             ; --- START RELATIONAL
10326  45E9 D7            push a
10327  45EA 11            mov a, b
10328  45EB FD 2E 84 03   mov32 cb, $00000384
10328  45EF 00 00 
10329  45F1 B0            cmp a, b
10330  45F2 FD 7F         sgt ; >
10331  45F4 E4            pop a
10332  45F5             ; --- END RELATIONAL
10333  45F5 FD A8         sor a, b ; ||
10334  45F7 E4            pop a
10335  45F8             ; --- END LOGICAL OR
10336  45F8 C0 00 00      cmp b, 0
10337  45FB C6 03 46      je _if233_exit
10338  45FE             _if233_TRUE:
10339  45FE             ; return; 
10340  45FE F9            leave
10341  45FF 09            ret
10342  4600 0A 03 46      jmp _if233_exit
10343  4603             _if233_exit:
10344  4603             ; puts("Please enter final X coordinate: "); 
10345  4603             ; --- START FUNCTION CALL
10346  4603 26 AA 7F      mov b, _s141 ; "Please enter final X coordinate: "
10347  4606 FD AB         swp b
10348  4608 D8            push b
10349  4609 07 47 69      call puts
10350  460C 51 02 00      add sp, 2
10351  460F             ; --- END FUNCTION CALL
10352  460F             ; w1 = TO_FIXED00(input_int()); 
10353  460F FA FB FF      lea d, [bp + -5] ; $w1
10354  4612 DA            push d
10355  4613             ; --- START FUNCTION CALL
10356  4613             ; --- START FUNCTION CALL
10357  4613 07 B2 08      call input_int
10358  4616 FD AB         swp b
10359  4618 D8            push b
10360  4619 07 8B 04      call TO_FIXED00
10361  461C 51 02 00      add sp, 2
10362  461F             ; --- END FUNCTION CALL
10363  461F E7            pop d
10364  4620 FD 43         mov [d], b
10365  4622             ; if (w1 < 0 || w1 > 900) 
10366  4622             _if234_cond:
10367  4622 FA FB FF      lea d, [bp + -5] ; $w1
10368  4625 2A            mov b, [d]
10369  4626 38 00 00      mov c, 0
10370  4629             ; --- START RELATIONAL
10371  4629 D7            push a
10372  462A 11            mov a, b
10373  462B FD 2E 00 00   mov32 cb, $00000000
10373  462F 00 00 
10374  4631 B0            cmp a, b
10375  4632 FD 73         slt ; < (signed)
10376  4634 E4            pop a
10377  4635             ; --- END RELATIONAL
10378  4635             ; --- START LOGICAL OR
10379  4635 D7            push a
10380  4636 11            mov a, b
10381  4637 FA FB FF      lea d, [bp + -5] ; $w1
10382  463A 2A            mov b, [d]
10383  463B 38 00 00      mov c, 0
10384  463E             ; --- START RELATIONAL
10385  463E D7            push a
10386  463F 11            mov a, b
10387  4640 FD 2E 84 03   mov32 cb, $00000384
10387  4644 00 00 
10388  4646 B0            cmp a, b
10389  4647 FD 7F         sgt ; >
10390  4649 E4            pop a
10391  464A             ; --- END RELATIONAL
10392  464A FD A8         sor a, b ; ||
10393  464C E4            pop a
10394  464D             ; --- END LOGICAL OR
10395  464D C0 00 00      cmp b, 0
10396  4650 C6 58 46      je _if234_exit
10397  4653             _if234_TRUE:
10398  4653             ; return; 
10399  4653 F9            leave
10400  4654 09            ret
10401  4655 0A 58 46      jmp _if234_exit
10402  4658             _if234_exit:
10403  4658             ; puts("Please enter final Y coordinate: "); 
10404  4658             ; --- START FUNCTION CALL
10405  4658 26 CC 7F      mov b, _s142 ; "Please enter final Y coordinate: "
10406  465B FD AB         swp b
10407  465D D8            push b
10408  465E 07 47 69      call puts
10409  4661 51 02 00      add sp, 2
10410  4664             ; --- END FUNCTION CALL
10411  4664             ; x = TO_FIXED00(input_int()); 
10412  4664 FA F9 FF      lea d, [bp + -7] ; $x
10413  4667 DA            push d
10414  4668             ; --- START FUNCTION CALL
10415  4668             ; --- START FUNCTION CALL
10416  4668 07 B2 08      call input_int
10417  466B FD AB         swp b
10418  466D D8            push b
10419  466E 07 8B 04      call TO_FIXED00
10420  4671 51 02 00      add sp, 2
10421  4674             ; --- END FUNCTION CALL
10422  4674 E7            pop d
10423  4675 FD 43         mov [d], b
10424  4677             ; if (x < 0 || x > 900) 
10425  4677             _if235_cond:
10426  4677 FA F9 FF      lea d, [bp + -7] ; $x
10427  467A 2A            mov b, [d]
10428  467B 38 00 00      mov c, 0
10429  467E             ; --- START RELATIONAL
10430  467E D7            push a
10431  467F 11            mov a, b
10432  4680 FD 2E 00 00   mov32 cb, $00000000
10432  4684 00 00 
10433  4686 B0            cmp a, b
10434  4687 FD 73         slt ; < (signed)
10435  4689 E4            pop a
10436  468A             ; --- END RELATIONAL
10437  468A             ; --- START LOGICAL OR
10438  468A D7            push a
10439  468B 11            mov a, b
10440  468C FA F9 FF      lea d, [bp + -7] ; $x
10441  468F 2A            mov b, [d]
10442  4690 38 00 00      mov c, 0
10443  4693             ; --- START RELATIONAL
10444  4693 D7            push a
10445  4694 11            mov a, b
10446  4695 FD 2E 84 03   mov32 cb, $00000384
10446  4699 00 00 
10447  469B B0            cmp a, b
10448  469C FD 7F         sgt ; >
10449  469E E4            pop a
10450  469F             ; --- END RELATIONAL
10451  469F FD A8         sor a, b ; ||
10452  46A1 E4            pop a
10453  46A2             ; --- END LOGICAL OR
10454  46A2 C0 00 00      cmp b, 0
10455  46A5 C6 AD 46      je _if235_exit
10456  46A8             _if235_TRUE:
10457  46A8             ; return; 
10458  46A8 F9            leave
10459  46A9 09            ret
10460  46AA 0A AD 46      jmp _if235_exit
10461  46AD             _if235_exit:
10462  46AD             ; compute_vector(w1, x, c1, a); 
10463  46AD             ; --- START FUNCTION CALL
10464  46AD FA FD FF      lea d, [bp + -3] ; $a
10465  46B0 2A            mov b, [d]
10466  46B1 38 00 00      mov c, 0
10467  46B4 FD AB         swp b
10468  46B6 D8            push b
10469  46B7 FA FF FF      lea d, [bp + -1] ; $c1
10470  46BA 2A            mov b, [d]
10471  46BB 38 00 00      mov c, 0
10472  46BE FD AB         swp b
10473  46C0 D8            push b
10474  46C1 FA F9 FF      lea d, [bp + -7] ; $x
10475  46C4 2A            mov b, [d]
10476  46C5 38 00 00      mov c, 0
10477  46C8 FD AB         swp b
10478  46CA D8            push b
10479  46CB FA FB FF      lea d, [bp + -5] ; $w1
10480  46CE 2A            mov b, [d]
10481  46CF 38 00 00      mov c, 0
10482  46D2 FD AB         swp b
10483  46D4 D8            push b
10484  46D5 07 49 49      call compute_vector
10485  46D8 51 08 00      add sp, 8
10486  46DB             ; --- END FUNCTION CALL
10487  46DB F9            leave
10488  46DC 09            ret
10489  46DD             
10490  46DD             galaxy_map:
10491  46DD F8 00 00      enter 0 ; (push bp; mov bp, sp)
10492  46E0             ; int i, j, j0; 
10493  46E0 52 02 00      sub sp, 2
10494  46E3 52 02 00      sub sp, 2
10495  46E6 52 02 00      sub sp, 2
10496  46E9             ; printf("\n                   The Galaxy\n\n"); 
10497  46E9             ; --- START FUNCTION CALL
10498  46E9 26 EE 7F      mov b, _s143 ; "\n                   The Galaxy\n\n"
10499  46EC FD AB         swp b
10500  46EE D8            push b
10501  46EF 07 36 60      call printf
10502  46F2 51 02 00      add sp, 2
10503  46F5             ; --- END FUNCTION CALL
10504  46F5             ; printf("    1     2     3     4     5     6     7     8\n"); 
10505  46F5             ; --- START FUNCTION CALL
10506  46F5 26 0F 80      mov b, _s144 ; "    1     2     3     4     5     6     7     8\n"
10507  46F8 FD AB         swp b
10508  46FA D8            push b
10509  46FB 07 36 60      call printf
10510  46FE 51 02 00      add sp, 2
10511  4701             ; --- END FUNCTION CALL
10512  4701             ; for (i = 1; i <= 8; i++) { 
10513  4701             _for236_init:
10514  4701 FA FF FF      lea d, [bp + -1] ; $i
10515  4704 DA            push d
10516  4705 FD 2E 01 00   mov32 cb, $00000001
10516  4709 00 00 
10517  470B E7            pop d
10518  470C FD 43         mov [d], b
10519  470E             _for236_cond:
10520  470E FA FF FF      lea d, [bp + -1] ; $i
10521  4711 2A            mov b, [d]
10522  4712 38 00 00      mov c, 0
10523  4715             ; --- START RELATIONAL
10524  4715 D7            push a
10525  4716 11            mov a, b
10526  4717 FD 2E 08 00   mov32 cb, $00000008
10526  471B 00 00 
10527  471D B0            cmp a, b
10528  471E FD 74         sle ; <= (signed)
10529  4720 E4            pop a
10530  4721             ; --- END RELATIONAL
10531  4721 C0 00 00      cmp b, 0
10532  4724 C6 37 49      je _for236_exit
10533  4727             _for236_block:
10534  4727             ; printf("%s%d ", gm_1, i); 
10535  4727             ; --- START FUNCTION CALL
10536  4727 FA FF FF      lea d, [bp + -1] ; $i
10537  472A 2A            mov b, [d]
10538  472B 38 00 00      mov c, 0
10539  472E FD AB         swp b
10540  4730 D8            push b
10541  4731 3B 07 70      mov d, _gm_1 ; $gm_1
10542  4734 2A            mov b, [d]
10543  4735 38 00 00      mov c, 0
10544  4738 FD AB         swp b
10545  473A D8            push b
10546  473B 26 40 80      mov b, _s145 ; "%s%d "
10547  473E FD AB         swp b
10548  4740 D8            push b
10549  4741 07 36 60      call printf
10550  4744 51 06 00      add sp, 6
10551  4747             ; --- END FUNCTION CALL
10552  4747             ; quadrant_name(1, i, 1); 
10553  4747             ; --- START FUNCTION CALL
10554  4747 FD 2E 01 00   mov32 cb, $00000001
10554  474B 00 00 
10555  474D DD            push bl
10556  474E FA FF FF      lea d, [bp + -1] ; $i
10557  4751 2A            mov b, [d]
10558  4752 38 00 00      mov c, 0
10559  4755 DD            push bl
10560  4756 FD 2E 01 00   mov32 cb, $00000001
10560  475A 00 00 
10561  475C DD            push bl
10562  475D 07 83 59      call quadrant_name
10563  4760 51 03 00      add sp, 3
10564  4763             ; --- END FUNCTION CALL
10565  4763             ; j0 = (int) (11 - (strlen(quadname) / 2)); 
10566  4763 FA FB FF      lea d, [bp + -5] ; $j0
10567  4766 DA            push d
10568  4767 FD 2E 0B 00   mov32 cb, $0000000b
10568  476B 00 00 
10569  476D             ; --- START TERMS
10570  476D D7            push a
10571  476E 11            mov a, b
10572  476F             ; --- START FUNCTION CALL
10573  476F 3B 8A 6E      mov d, _quadname_data ; $quadname
10574  4772 2D            mov b, d
10575  4773 38 00 00      mov c, 0
10576  4776 FD AB         swp b
10577  4778 D8            push b
10578  4779 07 DB 5F      call strlen
10579  477C 51 02 00      add sp, 2
10580  477F             ; --- END FUNCTION CALL
10581  477F             ; --- START FACTORS
10582  477F D7            push a
10583  4780 FD D8         push g
10584  4782 11            mov a, b
10585  4783 FD 7A         mov g, c
10586  4785 FD 2E 02 00   mov32 cb, $00000002
10586  4789 00 00 
10587  478B FD D8         push g ; save 'g' as the div instruction uses it
10588  478D AE            div a, b ; /, a: quotient, b: remainder
10589  478E FD F1         pop g
10590  4790 FD 38         mov c, g
10591  4792 27            mov b, a
10592  4793 FD F1         pop g
10593  4795 E4            pop a
10594  4796             ; --- END FACTORS
10595  4796 60            sub a, b
10596  4797 27            mov b, a
10597  4798 E4            pop a
10598  4799             ; --- END TERMS
10599  4799 E7            pop d
10600  479A FD 43         mov [d], b
10601  479C             ; for (j = 0; j < j0; j++) 
10602  479C             _for245_init:
10603  479C FA FD FF      lea d, [bp + -3] ; $j
10604  479F DA            push d
10605  47A0 FD 2E 00 00   mov32 cb, $00000000
10605  47A4 00 00 
10606  47A6 E7            pop d
10607  47A7 FD 43         mov [d], b
10608  47A9             _for245_cond:
10609  47A9 FA FD FF      lea d, [bp + -3] ; $j
10610  47AC 2A            mov b, [d]
10611  47AD 38 00 00      mov c, 0
10612  47B0             ; --- START RELATIONAL
10613  47B0 D7            push a
10614  47B1 11            mov a, b
10615  47B2 FA FB FF      lea d, [bp + -5] ; $j0
10616  47B5 2A            mov b, [d]
10617  47B6 38 00 00      mov c, 0
10618  47B9 B0            cmp a, b
10619  47BA FD 73         slt ; < (signed)
10620  47BC E4            pop a
10621  47BD             ; --- END RELATIONAL
10622  47BD C0 00 00      cmp b, 0
10623  47C0 C6 E3 47      je _for245_exit
10624  47C3             _for245_block:
10625  47C3             ; putchar(' '); 
10626  47C3             ; --- START FUNCTION CALL
10627  47C3 FD 2E 20 00   mov32 cb, $00000020
10627  47C7 00 00 
10628  47C9 DD            push bl
10629  47CA 07 BB 64      call putchar
10630  47CD 51 01 00      add sp, 1
10631  47D0             ; --- END FUNCTION CALL
10632  47D0             _for245_update:
10633  47D0 FA FD FF      lea d, [bp + -3] ; $j
10634  47D3 2A            mov b, [d]
10635  47D4 38 00 00      mov c, 0
10636  47D7 11            mov a, b
10637  47D8 FD 77         inc b
10638  47DA FA FD FF      lea d, [bp + -3] ; $j
10639  47DD FD 43         mov [d], b
10640  47DF 27            mov b, a
10641  47E0 0A A9 47      jmp _for245_cond
10642  47E3             _for245_exit:
10643  47E3             ; puts(quadname); 
10644  47E3             ; --- START FUNCTION CALL
10645  47E3 3B 8A 6E      mov d, _quadname_data ; $quadname
10646  47E6 2D            mov b, d
10647  47E7 38 00 00      mov c, 0
10648  47EA FD AB         swp b
10649  47EC D8            push b
10650  47ED 07 47 69      call puts
10651  47F0 51 02 00      add sp, 2
10652  47F3             ; --- END FUNCTION CALL
10653  47F3             ; for (j = 0; j < j0; j++) 
10654  47F3             _for246_init:
10655  47F3 FA FD FF      lea d, [bp + -3] ; $j
10656  47F6 DA            push d
10657  47F7 FD 2E 00 00   mov32 cb, $00000000
10657  47FB 00 00 
10658  47FD E7            pop d
10659  47FE FD 43         mov [d], b
10660  4800             _for246_cond:
10661  4800 FA FD FF      lea d, [bp + -3] ; $j
10662  4803 2A            mov b, [d]
10663  4804 38 00 00      mov c, 0
10664  4807             ; --- START RELATIONAL
10665  4807 D7            push a
10666  4808 11            mov a, b
10667  4809 FA FB FF      lea d, [bp + -5] ; $j0
10668  480C 2A            mov b, [d]
10669  480D 38 00 00      mov c, 0
10670  4810 B0            cmp a, b
10671  4811 FD 73         slt ; < (signed)
10672  4813 E4            pop a
10673  4814             ; --- END RELATIONAL
10674  4814 C0 00 00      cmp b, 0
10675  4817 C6 3A 48      je _for246_exit
10676  481A             _for246_block:
10677  481A             ; putchar(' '); 
10678  481A             ; --- START FUNCTION CALL
10679  481A FD 2E 20 00   mov32 cb, $00000020
10679  481E 00 00 
10680  4820 DD            push bl
10681  4821 07 BB 64      call putchar
10682  4824 51 01 00      add sp, 1
10683  4827             ; --- END FUNCTION CALL
10684  4827             _for246_update:
10685  4827 FA FD FF      lea d, [bp + -3] ; $j
10686  482A 2A            mov b, [d]
10687  482B 38 00 00      mov c, 0
10688  482E 11            mov a, b
10689  482F FD 77         inc b
10690  4831 FA FD FF      lea d, [bp + -3] ; $j
10691  4834 FD 43         mov [d], b
10692  4836 27            mov b, a
10693  4837 0A 00 48      jmp _for246_cond
10694  483A             _for246_exit:
10695  483A             ; if (!(strlen(quadname) % 2)) 
10696  483A             _if247_cond:
10697  483A             ; --- START FUNCTION CALL
10698  483A 3B 8A 6E      mov d, _quadname_data ; $quadname
10699  483D 2D            mov b, d
10700  483E 38 00 00      mov c, 0
10701  4841 FD AB         swp b
10702  4843 D8            push b
10703  4844 07 DB 5F      call strlen
10704  4847 51 02 00      add sp, 2
10705  484A             ; --- END FUNCTION CALL
10706  484A             ; --- START FACTORS
10707  484A D7            push a
10708  484B FD D8         push g
10709  484D 11            mov a, b
10710  484E FD 7A         mov g, c
10711  4850 FD 2E 02 00   mov32 cb, $00000002
10711  4854 00 00 
10712  4856 FD D8         push g ; save 'g' as the div instruction uses it
10713  4858 AE            div a, b ; %, a: quotient, b: remainder
10714  4859 11            mov a, b
10715  485A FD F1         pop g
10716  485C FD 38         mov c, g
10717  485E 27            mov b, a
10718  485F FD F1         pop g
10719  4861 E4            pop a
10720  4862             ; --- END FACTORS
10721  4862 C0 00 00      cmp b, 0
10722  4865 C6 78 48      je _if247_exit
10723  4868             _if247_TRUE:
10724  4868             ; putchar(' '); 
10725  4868             ; --- START FUNCTION CALL
10726  4868 FD 2E 20 00   mov32 cb, $00000020
10726  486C 00 00 
10727  486E DD            push bl
10728  486F 07 BB 64      call putchar
10729  4872 51 01 00      add sp, 1
10730  4875             ; --- END FUNCTION CALL
10731  4875 0A 78 48      jmp _if247_exit
10732  4878             _if247_exit:
10733  4878             ; quadrant_name(1, i, 5); 
10734  4878             ; --- START FUNCTION CALL
10735  4878 FD 2E 05 00   mov32 cb, $00000005
10735  487C 00 00 
10736  487E DD            push bl
10737  487F FA FF FF      lea d, [bp + -1] ; $i
10738  4882 2A            mov b, [d]
10739  4883 38 00 00      mov c, 0
10740  4886 DD            push bl
10741  4887 FD 2E 01 00   mov32 cb, $00000001
10741  488B 00 00 
10742  488D DD            push bl
10743  488E 07 83 59      call quadrant_name
10744  4891 51 03 00      add sp, 3
10745  4894             ; --- END FUNCTION CALL
10746  4894             ; j0 = (int) (12 - (strlen(quadname) / 2)); 
10747  4894 FA FB FF      lea d, [bp + -5] ; $j0
10748  4897 DA            push d
10749  4898 FD 2E 0C 00   mov32 cb, $0000000c
10749  489C 00 00 
10750  489E             ; --- START TERMS
10751  489E D7            push a
10752  489F 11            mov a, b
10753  48A0             ; --- START FUNCTION CALL
10754  48A0 3B 8A 6E      mov d, _quadname_data ; $quadname
10755  48A3 2D            mov b, d
10756  48A4 38 00 00      mov c, 0
10757  48A7 FD AB         swp b
10758  48A9 D8            push b
10759  48AA 07 DB 5F      call strlen
10760  48AD 51 02 00      add sp, 2
10761  48B0             ; --- END FUNCTION CALL
10762  48B0             ; --- START FACTORS
10763  48B0 D7            push a
10764  48B1 FD D8         push g
10765  48B3 11            mov a, b
10766  48B4 FD 7A         mov g, c
10767  48B6 FD 2E 02 00   mov32 cb, $00000002
10767  48BA 00 00 
10768  48BC FD D8         push g ; save 'g' as the div instruction uses it
10769  48BE AE            div a, b ; /, a: quotient, b: remainder
10770  48BF FD F1         pop g
10771  48C1 FD 38         mov c, g
10772  48C3 27            mov b, a
10773  48C4 FD F1         pop g
10774  48C6 E4            pop a
10775  48C7             ; --- END FACTORS
10776  48C7 60            sub a, b
10777  48C8 27            mov b, a
10778  48C9 E4            pop a
10779  48CA             ; --- END TERMS
10780  48CA E7            pop d
10781  48CB FD 43         mov [d], b
10782  48CD             ; for (j = 0; j < j0; j++) 
10783  48CD             _for260_init:
10784  48CD FA FD FF      lea d, [bp + -3] ; $j
10785  48D0 DA            push d
10786  48D1 FD 2E 00 00   mov32 cb, $00000000
10786  48D5 00 00 
10787  48D7 E7            pop d
10788  48D8 FD 43         mov [d], b
10789  48DA             _for260_cond:
10790  48DA FA FD FF      lea d, [bp + -3] ; $j
10791  48DD 2A            mov b, [d]
10792  48DE 38 00 00      mov c, 0
10793  48E1             ; --- START RELATIONAL
10794  48E1 D7            push a
10795  48E2 11            mov a, b
10796  48E3 FA FB FF      lea d, [bp + -5] ; $j0
10797  48E6 2A            mov b, [d]
10798  48E7 38 00 00      mov c, 0
10799  48EA B0            cmp a, b
10800  48EB FD 73         slt ; < (signed)
10801  48ED E4            pop a
10802  48EE             ; --- END RELATIONAL
10803  48EE C0 00 00      cmp b, 0
10804  48F1 C6 14 49      je _for260_exit
10805  48F4             _for260_block:
10806  48F4             ; putchar(' '); 
10807  48F4             ; --- START FUNCTION CALL
10808  48F4 FD 2E 20 00   mov32 cb, $00000020
10808  48F8 00 00 
10809  48FA DD            push bl
10810  48FB 07 BB 64      call putchar
10811  48FE 51 01 00      add sp, 1
10812  4901             ; --- END FUNCTION CALL
10813  4901             _for260_update:
10814  4901 FA FD FF      lea d, [bp + -3] ; $j
10815  4904 2A            mov b, [d]
10816  4905 38 00 00      mov c, 0
10817  4908 11            mov a, b
10818  4909 FD 77         inc b
10819  490B FA FD FF      lea d, [bp + -3] ; $j
10820  490E FD 43         mov [d], b
10821  4910 27            mov b, a
10822  4911 0A DA 48      jmp _for260_cond
10823  4914             _for260_exit:
10824  4914             ; puts(quadname); 
10825  4914             ; --- START FUNCTION CALL
10826  4914 3B 8A 6E      mov d, _quadname_data ; $quadname
10827  4917 2D            mov b, d
10828  4918 38 00 00      mov c, 0
10829  491B FD AB         swp b
10830  491D D8            push b
10831  491E 07 47 69      call puts
10832  4921 51 02 00      add sp, 2
10833  4924             ; --- END FUNCTION CALL
10834  4924             _for236_update:
10835  4924 FA FF FF      lea d, [bp + -1] ; $i
10836  4927 2A            mov b, [d]
10837  4928 38 00 00      mov c, 0
10838  492B 11            mov a, b
10839  492C FD 77         inc b
10840  492E FA FF FF      lea d, [bp + -1] ; $i
10841  4931 FD 43         mov [d], b
10842  4933 27            mov b, a
10843  4934 0A 0E 47      jmp _for236_cond
10844  4937             _for236_exit:
10845  4937             ; puts(gm_1); 
10846  4937             ; --- START FUNCTION CALL
10847  4937 3B 07 70      mov d, _gm_1 ; $gm_1
10848  493A 2A            mov b, [d]
10849  493B 38 00 00      mov c, 0
10850  493E FD AB         swp b
10851  4940 D8            push b
10852  4941 07 47 69      call puts
10853  4944 51 02 00      add sp, 2
10854  4947             ; --- END FUNCTION CALL
10855  4947 F9            leave
10856  4948 09            ret
10857  4949             
10858  4949             compute_vector:
10859  4949 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10860  494C             ; long unsigned int         xl, al; 
10861  494C 52 04 00      sub sp, 4
10862  494F 52 04 00      sub sp, 4
10863  4952             ; puts("  DIRECTION = "); 
10864  4952             ; --- START FUNCTION CALL
10865  4952 26 46 80      mov b, _s146 ; "  DIRECTION = "
10866  4955 FD AB         swp b
10867  4957 D8            push b
10868  4958 07 47 69      call puts
10869  495B 51 02 00      add sp, 2
10870  495E             ; --- END FUNCTION CALL
10871  495E             ; x = x - a; 
10872  495E FA 07 00      lea d, [bp + 7] ; $x
10873  4961 DA            push d
10874  4962 FA 07 00      lea d, [bp + 7] ; $x
10875  4965 2A            mov b, [d]
10876  4966 38 00 00      mov c, 0
10877  4969             ; --- START TERMS
10878  4969 D7            push a
10879  496A 11            mov a, b
10880  496B FA 0B 00      lea d, [bp + 11] ; $a
10881  496E 2A            mov b, [d]
10882  496F 38 00 00      mov c, 0
10883  4972 60            sub a, b
10884  4973 27            mov b, a
10885  4974 E4            pop a
10886  4975             ; --- END TERMS
10887  4975 E7            pop d
10888  4976 FD 43         mov [d], b
10889  4978             ; a = c1 - w1; 
10890  4978 FA 0B 00      lea d, [bp + 11] ; $a
10891  497B DA            push d
10892  497C FA 09 00      lea d, [bp + 9] ; $c1
10893  497F 2A            mov b, [d]
10894  4980 38 00 00      mov c, 0
10895  4983             ; --- START TERMS
10896  4983 D7            push a
10897  4984 11            mov a, b
10898  4985 FA 05 00      lea d, [bp + 5] ; $w1
10899  4988 2A            mov b, [d]
10900  4989 38 00 00      mov c, 0
10901  498C 60            sub a, b
10902  498D 27            mov b, a
10903  498E E4            pop a
10904  498F             ; --- END TERMS
10905  498F E7            pop d
10906  4990 FD 43         mov [d], b
10907  4992             ; xl = abs(x); 
10908  4992 FA FD FF      lea d, [bp + -3] ; $xl
10909  4995 DA            push d
10910  4996             ; --- START FUNCTION CALL
10911  4996 FA 07 00      lea d, [bp + 7] ; $x
10912  4999 2A            mov b, [d]
10913  499A 38 00 00      mov c, 0
10914  499D FD AB         swp b
10915  499F D8            push b
10916  49A0 07 28 6B      call abs
10917  49A3 51 02 00      add sp, 2
10918  49A6             ; --- END FUNCTION CALL
10919  49A6 E7            pop d
10920  49A7 FD 43         mov [d], b
10921  49A9 26 00 00      mov b, 0
10922  49AC FD 44 02 00   mov [d + 2], b
10923  49B0             ; al = abs(a); 
10924  49B0 FA F9 FF      lea d, [bp + -7] ; $al
10925  49B3 DA            push d
10926  49B4             ; --- START FUNCTION CALL
10927  49B4 FA 0B 00      lea d, [bp + 11] ; $a
10928  49B7 2A            mov b, [d]
10929  49B8 38 00 00      mov c, 0
10930  49BB FD AB         swp b
10931  49BD D8            push b
10932  49BE 07 28 6B      call abs
10933  49C1 51 02 00      add sp, 2
10934  49C4             ; --- END FUNCTION CALL
10935  49C4 E7            pop d
10936  49C5 FD 43         mov [d], b
10937  49C7 26 00 00      mov b, 0
10938  49CA FD 44 02 00   mov [d + 2], b
10939  49CE             ; if (x < 0) { 
10940  49CE             _if261_cond:
10941  49CE FA 07 00      lea d, [bp + 7] ; $x
10942  49D1 2A            mov b, [d]
10943  49D2 38 00 00      mov c, 0
10944  49D5             ; --- START RELATIONAL
10945  49D5 D7            push a
10946  49D6 11            mov a, b
10947  49D7 FD 2E 00 00   mov32 cb, $00000000
10947  49DB 00 00 
10948  49DD B0            cmp a, b
10949  49DE FD 73         slt ; < (signed)
10950  49E0 E4            pop a
10951  49E1             ; --- END RELATIONAL
10952  49E1 C0 00 00      cmp b, 0
10953  49E4 C6 28 4C      je _if261_else
10954  49E7             _if261_TRUE:
10955  49E7             ; if (a > 0) { 
10956  49E7             _if262_cond:
10957  49E7 FA 0B 00      lea d, [bp + 11] ; $a
10958  49EA 2A            mov b, [d]
10959  49EB 38 00 00      mov c, 0
10960  49EE             ; --- START RELATIONAL
10961  49EE D7            push a
10962  49EF 11            mov a, b
10963  49F0 FD 2E 00 00   mov32 cb, $00000000
10963  49F4 00 00 
10964  49F6 B0            cmp a, b
10965  49F7 FD 7F         sgt ; >
10966  49F9 E4            pop a
10967  49FA             ; --- END RELATIONAL
10968  49FA C0 00 00      cmp b, 0
10969  49FD C6 ED 4B      je _if262_else
10970  4A00             _if262_TRUE:
10971  4A00             ; c1 = 300; 
10972  4A00 FA 09 00      lea d, [bp + 9] ; $c1
10973  4A03 DA            push d
10974  4A04 FD 2E 2C 01   mov32 cb, $0000012c
10974  4A08 00 00 
10975  4A0A E7            pop d
10976  4A0B FD 43         mov [d], b
10977  4A0D             ; if (al >= xl) 
10978  4A0D             _if263_cond:
10979  4A0D FA F9 FF      lea d, [bp + -7] ; $al
10980  4A10 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10981  4A13 FD 39         mov c, b ; And place it into C
10982  4A15 2A            mov b, [d] ; Lower Word in B
10983  4A16             ; --- START RELATIONAL
10984  4A16 D7            push a
10985  4A17 FD D8         push g
10986  4A19 11            mov a, b
10987  4A1A FD 7A         mov g, c
10988  4A1C FA FD FF      lea d, [bp + -3] ; $xl
10989  4A1F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10990  4A22 FD 39         mov c, b ; And place it into C
10991  4A24 2A            mov b, [d] ; Lower Word in B
10992  4A25 FD AF         cmp32 ga, cb
10993  4A27 FD 82         sgeu
10994  4A29 FD F1         pop g
10995  4A2B E4            pop a
10996  4A2C             ; --- END RELATIONAL
10997  4A2C C0 00 00      cmp b, 0
10998  4A2F C6 C0 4A      je _if263_else
10999  4A32             _if263_TRUE:
11000  4A32             ; printf("%s", print100(c1 + ((xl * 100) / al))); 
11001  4A32             ; --- START FUNCTION CALL
11002  4A32             ; --- START FUNCTION CALL
11003  4A32 FA 09 00      lea d, [bp + 9] ; $c1
11004  4A35 2A            mov b, [d]
11005  4A36 38 00 00      mov c, 0
11006  4A39             ; --- START TERMS
11007  4A39 D7            push a
11008  4A3A 11            mov a, b
11009  4A3B FA FD FF      lea d, [bp + -3] ; $xl
11010  4A3E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11011  4A41 FD 39         mov c, b ; And place it into C
11012  4A43 2A            mov b, [d] ; Lower Word in B
11013  4A44             ; --- START FACTORS
11014  4A44 D7            push a
11015  4A45 FD D8         push g
11016  4A47 11            mov a, b
11017  4A48 FD 7A         mov g, c
11018  4A4A FD 2E 64 00   mov32 cb, $00000064
11018  4A4E 00 00 
11019  4A50 D7            push a     ; save left operand
11020  4A51 8E            xor a, b   ; xor sign bits
11021  4A52 FD AA         swp a      ; swap bytes
11022  4A54 83            mov cl, al ; save result of xor into 'dl'
11023  4A55 E4            pop a      ; restore left side operator
11024  4A56 DF            push cl    ; save result of xor above
11025  4A57 FD AA         swp a  
11026  4A59 93 80         test al, $80  
11027  4A5B FD AA         swp a  
11028  4A5D C6 62 4A      jz skip_invert_a_310  
11029  4A60 FD 95         neg a 
11030  4A62             skip_invert_a_310:   
11031  4A62 FD AB         swp b
11032  4A64 FD 93 80      test bl, $80  
11033  4A67 FD AB         swp b
11034  4A69 C6 6E 4A      jz skip_invert_b_310  
11035  4A6C FD 97         neg b 
11036  4A6E             skip_invert_b_310:   
11037  4A6E AC            mul a, b ; *
11038  4A6F FD 78         mov g, a
11039  4A71 11            mov a, b
11040  4A72 EA            pop bl
11041  4A73 FD 93 80      test bl, $80
11042  4A76 C6 83 4A      jz _same_signs_310
11043  4A79 2F            mov bl, al
11044  4A7A 95            not a
11045  4A7B FD 97         neg b
11046  4A7D 5B 00 00      adc a, 0
11047  4A80 FD 78         mov g, a
11048  4A82 11            mov a, b
11049  4A83             _same_signs_310:
11050  4A83 FD 38         mov c, g
11051  4A85 27            mov b, a
11052  4A86 FD F1         pop g
11053  4A88 E4            pop a
11054  4A89             ; --- END FACTORS
11055  4A89             ; --- START FACTORS
11056  4A89 D7            push a
11057  4A8A FD D8         push g
11058  4A8C 11            mov a, b
11059  4A8D FD 7A         mov g, c
11060  4A8F FA F9 FF      lea d, [bp + -7] ; $al
11061  4A92 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11062  4A95 FD 39         mov c, b ; And place it into C
11063  4A97 2A            mov b, [d] ; Lower Word in B
11064  4A98 FD D8         push g ; save 'g' as the div instruction uses it
11065  4A9A AE            div a, b ; /, a: quotient, b: remainder
11066  4A9B FD F1         pop g
11067  4A9D FD 38         mov c, g
11068  4A9F 27            mov b, a
11069  4AA0 FD F1         pop g
11070  4AA2 E4            pop a
11071  4AA3             ; --- END FACTORS
11072  4AA3 56            add b, a
11073  4AA4 E4            pop a
11074  4AA5             ; --- END TERMS
11075  4AA5 FD AB         swp b
11076  4AA7 D8            push b
11077  4AA8 07 07 09      call print100
11078  4AAB 51 02 00      add sp, 2
11079  4AAE             ; --- END FUNCTION CALL
11080  4AAE FD AB         swp b
11081  4AB0 D8            push b
11082  4AB1 26 55 80      mov b, _s147 ; "%s"
11083  4AB4 FD AB         swp b
11084  4AB6 D8            push b
11085  4AB7 07 36 60      call printf
11086  4ABA 51 04 00      add sp, 4
11087  4ABD             ; --- END FUNCTION CALL
11088  4ABD 0A A1 4B      jmp _if263_exit
11089  4AC0             _if263_else:
11090  4AC0             ; printf("%s", print100(c1 + ((((xl * 2) - al) * 100)  / xl))); 
11091  4AC0             ; --- START FUNCTION CALL
11092  4AC0             ; --- START FUNCTION CALL
11093  4AC0 FA 09 00      lea d, [bp + 9] ; $c1
11094  4AC3 2A            mov b, [d]
11095  4AC4 38 00 00      mov c, 0
11096  4AC7             ; --- START TERMS
11097  4AC7 D7            push a
11098  4AC8 11            mov a, b
11099  4AC9 FA FD FF      lea d, [bp + -3] ; $xl
11100  4ACC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11101  4ACF FD 39         mov c, b ; And place it into C
11102  4AD1 2A            mov b, [d] ; Lower Word in B
11103  4AD2             ; --- START FACTORS
11104  4AD2 D7            push a
11105  4AD3 FD D8         push g
11106  4AD5 11            mov a, b
11107  4AD6 FD 7A         mov g, c
11108  4AD8 FD 2E 02 00   mov32 cb, $00000002
11108  4ADC 00 00 
11109  4ADE D7            push a     ; save left operand
11110  4ADF 8E            xor a, b   ; xor sign bits
11111  4AE0 FD AA         swp a      ; swap bytes
11112  4AE2 83            mov cl, al ; save result of xor into 'dl'
11113  4AE3 E4            pop a      ; restore left side operator
11114  4AE4 DF            push cl    ; save result of xor above
11115  4AE5 FD AA         swp a  
11116  4AE7 93 80         test al, $80  
11117  4AE9 FD AA         swp a  
11118  4AEB C6 F0 4A      jz skip_invert_a_485  
11119  4AEE FD 95         neg a 
11120  4AF0             skip_invert_a_485:   
11121  4AF0 FD AB         swp b
11122  4AF2 FD 93 80      test bl, $80  
11123  4AF5 FD AB         swp b
11124  4AF7 C6 FC 4A      jz skip_invert_b_485  
11125  4AFA FD 97         neg b 
11126  4AFC             skip_invert_b_485:   
11127  4AFC AC            mul a, b ; *
11128  4AFD FD 78         mov g, a
11129  4AFF 11            mov a, b
11130  4B00 EA            pop bl
11131  4B01 FD 93 80      test bl, $80
11132  4B04 C6 11 4B      jz _same_signs_485
11133  4B07 2F            mov bl, al
11134  4B08 95            not a
11135  4B09 FD 97         neg b
11136  4B0B 5B 00 00      adc a, 0
11137  4B0E FD 78         mov g, a
11138  4B10 11            mov a, b
11139  4B11             _same_signs_485:
11140  4B11 FD 38         mov c, g
11141  4B13 27            mov b, a
11142  4B14 FD F1         pop g
11143  4B16 E4            pop a
11144  4B17             ; --- END FACTORS
11145  4B17             ; --- START TERMS
11146  4B17 D7            push a
11147  4B18 11            mov a, b
11148  4B19 FA F9 FF      lea d, [bp + -7] ; $al
11149  4B1C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11150  4B1F FD 39         mov c, b ; And place it into C
11151  4B21 2A            mov b, [d] ; Lower Word in B
11152  4B22 FD 1C         sub32 ga, cb
11153  4B24 27            mov b, a
11154  4B25 FD 38         mov c, g
11155  4B27 E4            pop a
11156  4B28             ; --- END TERMS
11157  4B28             ; --- START FACTORS
11158  4B28 D7            push a
11159  4B29 FD D8         push g
11160  4B2B 11            mov a, b
11161  4B2C FD 7A         mov g, c
11162  4B2E FD 2E 64 00   mov32 cb, $00000064
11162  4B32 00 00 
11163  4B34 D7            push a     ; save left operand
11164  4B35 8E            xor a, b   ; xor sign bits
11165  4B36 FD AA         swp a      ; swap bytes
11166  4B38 83            mov cl, al ; save result of xor into 'dl'
11167  4B39 E4            pop a      ; restore left side operator
11168  4B3A DF            push cl    ; save result of xor above
11169  4B3B FD AA         swp a  
11170  4B3D 93 80         test al, $80  
11171  4B3F FD AA         swp a  
11172  4B41 C6 46 4B      jz skip_invert_a_486  
11173  4B44 FD 95         neg a 
11174  4B46             skip_invert_a_486:   
11175  4B46 FD AB         swp b
11176  4B48 FD 93 80      test bl, $80  
11177  4B4B FD AB         swp b
11178  4B4D C6 52 4B      jz skip_invert_b_486  
11179  4B50 FD 97         neg b 
11180  4B52             skip_invert_b_486:   
11181  4B52 AC            mul a, b ; *
11182  4B53 FD 78         mov g, a
11183  4B55 11            mov a, b
11184  4B56 EA            pop bl
11185  4B57 FD 93 80      test bl, $80
11186  4B5A C6 67 4B      jz _same_signs_486
11187  4B5D 2F            mov bl, al
11188  4B5E 95            not a
11189  4B5F FD 97         neg b
11190  4B61 5B 00 00      adc a, 0
11191  4B64 FD 78         mov g, a
11192  4B66 11            mov a, b
11193  4B67             _same_signs_486:
11194  4B67 FD 38         mov c, g
11195  4B69 27            mov b, a
11196  4B6A FD F1         pop g
11197  4B6C E4            pop a
11198  4B6D             ; --- END FACTORS
11199  4B6D             ; --- START FACTORS
11200  4B6D D7            push a
11201  4B6E FD D8         push g
11202  4B70 11            mov a, b
11203  4B71 FD 7A         mov g, c
11204  4B73 FA FD FF      lea d, [bp + -3] ; $xl
11205  4B76 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11206  4B79 FD 39         mov c, b ; And place it into C
11207  4B7B 2A            mov b, [d] ; Lower Word in B
11208  4B7C FD D8         push g ; save 'g' as the div instruction uses it
11209  4B7E AE            div a, b ; /, a: quotient, b: remainder
11210  4B7F FD F1         pop g
11211  4B81 FD 38         mov c, g
11212  4B83 27            mov b, a
11213  4B84 FD F1         pop g
11214  4B86 E4            pop a
11215  4B87             ; --- END FACTORS
11216  4B87 56            add b, a
11217  4B88 E4            pop a
11218  4B89             ; --- END TERMS
11219  4B89 FD AB         swp b
11220  4B8B D8            push b
11221  4B8C 07 07 09      call print100
11222  4B8F 51 02 00      add sp, 2
11223  4B92             ; --- END FUNCTION CALL
11224  4B92 FD AB         swp b
11225  4B94 D8            push b
11226  4B95 26 55 80      mov b, _s147 ; "%s"
11227  4B98 FD AB         swp b
11228  4B9A D8            push b
11229  4B9B 07 36 60      call printf
11230  4B9E 51 04 00      add sp, 4
11231  4BA1             ; --- END FUNCTION CALL
11232  4BA1             _if263_exit:
11233  4BA1             ; printf(dist_1, print100((x > a) ? x : a)); 
11234  4BA1             ; --- START FUNCTION CALL
11235  4BA1             ; --- START FUNCTION CALL
11236  4BA1             _ternary491_cond:
11237  4BA1 FA 07 00      lea d, [bp + 7] ; $x
11238  4BA4 2A            mov b, [d]
11239  4BA5 38 00 00      mov c, 0
11240  4BA8             ; --- START RELATIONAL
11241  4BA8 D7            push a
11242  4BA9 11            mov a, b
11243  4BAA FA 0B 00      lea d, [bp + 11] ; $a
11244  4BAD 2A            mov b, [d]
11245  4BAE 38 00 00      mov c, 0
11246  4BB1 B0            cmp a, b
11247  4BB2 FD 7F         sgt ; >
11248  4BB4 E4            pop a
11249  4BB5             ; --- END RELATIONAL
11250  4BB5 C0 00 00      cmp b, 0
11251  4BB8 C6 C5 4B      je _ternary491_FALSE
11252  4BBB             _ternary491_TRUE:
11253  4BBB FA 07 00      lea d, [bp + 7] ; $x
11254  4BBE 2A            mov b, [d]
11255  4BBF 38 00 00      mov c, 0
11256  4BC2 0A CC 4B      jmp _ternary491_exit
11257  4BC5             _ternary491_FALSE:
11258  4BC5 FA 0B 00      lea d, [bp + 11] ; $a
11259  4BC8 2A            mov b, [d]
11260  4BC9 38 00 00      mov c, 0
11261  4BCC             _ternary491_exit:
11262  4BCC FD AB         swp b
11263  4BCE D8            push b
11264  4BCF 07 07 09      call print100
11265  4BD2 51 02 00      add sp, 2
11266  4BD5             ; --- END FUNCTION CALL
11267  4BD5 FD AB         swp b
11268  4BD7 D8            push b
11269  4BD8 3B 1B 70      mov d, _dist_1 ; $dist_1
11270  4BDB 2A            mov b, [d]
11271  4BDC 38 00 00      mov c, 0
11272  4BDF FD AB         swp b
11273  4BE1 D8            push b
11274  4BE2 07 36 60      call printf
11275  4BE5 51 04 00      add sp, 4
11276  4BE8             ; --- END FUNCTION CALL
11277  4BE8             ; return; 
11278  4BE8 F9            leave
11279  4BE9 09            ret
11280  4BEA 0A 25 4C      jmp _if262_exit
11281  4BED             _if262_else:
11282  4BED             ; if (x != 0){ 
11283  4BED             _if492_cond:
11284  4BED FA 07 00      lea d, [bp + 7] ; $x
11285  4BF0 2A            mov b, [d]
11286  4BF1 38 00 00      mov c, 0
11287  4BF4             ; --- START RELATIONAL
11288  4BF4 D7            push a
11289  4BF5 11            mov a, b
11290  4BF6 FD 2E 00 00   mov32 cb, $00000000
11290  4BFA 00 00 
11291  4BFC B0            cmp a, b
11292  4BFD FD 72         sneq ; !=
11293  4BFF E4            pop a
11294  4C00             ; --- END RELATIONAL
11295  4C00 C0 00 00      cmp b, 0
11296  4C03 C6 18 4C      je _if492_else
11297  4C06             _if492_TRUE:
11298  4C06             ; c1 = 500; 
11299  4C06 FA 09 00      lea d, [bp + 9] ; $c1
11300  4C09 DA            push d
11301  4C0A FD 2E F4 01   mov32 cb, $000001f4
11301  4C0E 00 00 
11302  4C10 E7            pop d
11303  4C11 FD 43         mov [d], b
11304  4C13             ; return; 
11305  4C13 F9            leave
11306  4C14 09            ret
11307  4C15 0A 25 4C      jmp _if492_exit
11308  4C18             _if492_else:
11309  4C18             ; c1 = 700; 
11310  4C18 FA 09 00      lea d, [bp + 9] ; $c1
11311  4C1B DA            push d
11312  4C1C FD 2E BC 02   mov32 cb, $000002bc
11312  4C20 00 00 
11313  4C22 E7            pop d
11314  4C23 FD 43         mov [d], b
11315  4C25             _if492_exit:
11316  4C25             _if262_exit:
11317  4C25 0A 9A 4E      jmp _if261_exit
11318  4C28             _if261_else:
11319  4C28             ; if (a < 0) { 
11320  4C28             _if493_cond:
11321  4C28 FA 0B 00      lea d, [bp + 11] ; $a
11322  4C2B 2A            mov b, [d]
11323  4C2C 38 00 00      mov c, 0
11324  4C2F             ; --- START RELATIONAL
11325  4C2F D7            push a
11326  4C30 11            mov a, b
11327  4C31 FD 2E 00 00   mov32 cb, $00000000
11327  4C35 00 00 
11328  4C37 B0            cmp a, b
11329  4C38 FD 73         slt ; < (signed)
11330  4C3A E4            pop a
11331  4C3B             ; --- END RELATIONAL
11332  4C3B C0 00 00      cmp b, 0
11333  4C3E C6 51 4C      je _if493_else
11334  4C41             _if493_TRUE:
11335  4C41             ; c1 = 700; 
11336  4C41 FA 09 00      lea d, [bp + 9] ; $c1
11337  4C44 DA            push d
11338  4C45 FD 2E BC 02   mov32 cb, $000002bc
11338  4C49 00 00 
11339  4C4B E7            pop d
11340  4C4C FD 43         mov [d], b
11341  4C4E 0A 9A 4E      jmp _if493_exit
11342  4C51             _if493_else:
11343  4C51             ; if (x > 0) { 
11344  4C51             _if494_cond:
11345  4C51 FA 07 00      lea d, [bp + 7] ; $x
11346  4C54 2A            mov b, [d]
11347  4C55 38 00 00      mov c, 0
11348  4C58             ; --- START RELATIONAL
11349  4C58 D7            push a
11350  4C59 11            mov a, b
11351  4C5A FD 2E 00 00   mov32 cb, $00000000
11351  4C5E 00 00 
11352  4C60 B0            cmp a, b
11353  4C61 FD 7F         sgt ; >
11354  4C63 E4            pop a
11355  4C64             ; --- END RELATIONAL
11356  4C64 C0 00 00      cmp b, 0
11357  4C67 C6 7A 4C      je _if494_else
11358  4C6A             _if494_TRUE:
11359  4C6A             ; c1 = 100; 
11360  4C6A FA 09 00      lea d, [bp + 9] ; $c1
11361  4C6D DA            push d
11362  4C6E FD 2E 64 00   mov32 cb, $00000064
11362  4C72 00 00 
11363  4C74 E7            pop d
11364  4C75 FD 43         mov [d], b
11365  4C77 0A 9A 4E      jmp _if494_exit
11366  4C7A             _if494_else:
11367  4C7A             ; if (a == 0) { 
11368  4C7A             _if495_cond:
11369  4C7A FA 0B 00      lea d, [bp + 11] ; $a
11370  4C7D 2A            mov b, [d]
11371  4C7E 38 00 00      mov c, 0
11372  4C81             ; --- START RELATIONAL
11373  4C81 D7            push a
11374  4C82 11            mov a, b
11375  4C83 FD 2E 00 00   mov32 cb, $00000000
11375  4C87 00 00 
11376  4C89 B0            cmp a, b
11377  4C8A FD 71         seq ; ==
11378  4C8C E4            pop a
11379  4C8D             ; --- END RELATIONAL
11380  4C8D C0 00 00      cmp b, 0
11381  4C90 C6 A3 4C      je _if495_else
11382  4C93             _if495_TRUE:
11383  4C93             ; c1 = 500; 
11384  4C93 FA 09 00      lea d, [bp + 9] ; $c1
11385  4C96 DA            push d
11386  4C97 FD 2E F4 01   mov32 cb, $000001f4
11386  4C9B 00 00 
11387  4C9D E7            pop d
11388  4C9E FD 43         mov [d], b
11389  4CA0 0A 9A 4E      jmp _if495_exit
11390  4CA3             _if495_else:
11391  4CA3             ; c1 = 100; 
11392  4CA3 FA 09 00      lea d, [bp + 9] ; $c1
11393  4CA6 DA            push d
11394  4CA7 FD 2E 64 00   mov32 cb, $00000064
11394  4CAB 00 00 
11395  4CAD E7            pop d
11396  4CAE FD 43         mov [d], b
11397  4CB0             ; if (al <= xl) 
11398  4CB0             _if496_cond:
11399  4CB0 FA F9 FF      lea d, [bp + -7] ; $al
11400  4CB3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11401  4CB6 FD 39         mov c, b ; And place it into C
11402  4CB8 2A            mov b, [d] ; Lower Word in B
11403  4CB9             ; --- START RELATIONAL
11404  4CB9 D7            push a
11405  4CBA FD D8         push g
11406  4CBC 11            mov a, b
11407  4CBD FD 7A         mov g, c
11408  4CBF FA FD FF      lea d, [bp + -3] ; $xl
11409  4CC2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11410  4CC5 FD 39         mov c, b ; And place it into C
11411  4CC7 2A            mov b, [d] ; Lower Word in B
11412  4CC8 FD AF         cmp32 ga, cb
11413  4CCA FD 76         sleu
11414  4CCC FD F1         pop g
11415  4CCE E4            pop a
11416  4CCF             ; --- END RELATIONAL
11417  4CCF C0 00 00      cmp b, 0
11418  4CD2 C6 63 4D      je _if496_else
11419  4CD5             _if496_TRUE:
11420  4CD5             ; printf("%s", print100(c1 + ((al * 100) / xl))); 
11421  4CD5             ; --- START FUNCTION CALL
11422  4CD5             ; --- START FUNCTION CALL
11423  4CD5 FA 09 00      lea d, [bp + 9] ; $c1
11424  4CD8 2A            mov b, [d]
11425  4CD9 38 00 00      mov c, 0
11426  4CDC             ; --- START TERMS
11427  4CDC D7            push a
11428  4CDD 11            mov a, b
11429  4CDE FA F9 FF      lea d, [bp + -7] ; $al
11430  4CE1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11431  4CE4 FD 39         mov c, b ; And place it into C
11432  4CE6 2A            mov b, [d] ; Lower Word in B
11433  4CE7             ; --- START FACTORS
11434  4CE7 D7            push a
11435  4CE8 FD D8         push g
11436  4CEA 11            mov a, b
11437  4CEB FD 7A         mov g, c
11438  4CED FD 2E 64 00   mov32 cb, $00000064
11438  4CF1 00 00 
11439  4CF3 D7            push a     ; save left operand
11440  4CF4 8E            xor a, b   ; xor sign bits
11441  4CF5 FD AA         swp a      ; swap bytes
11442  4CF7 83            mov cl, al ; save result of xor into 'dl'
11443  4CF8 E4            pop a      ; restore left side operator
11444  4CF9 DF            push cl    ; save result of xor above
11445  4CFA FD AA         swp a  
11446  4CFC 93 80         test al, $80  
11447  4CFE FD AA         swp a  
11448  4D00 C6 05 4D      jz skip_invert_a_543  
11449  4D03 FD 95         neg a 
11450  4D05             skip_invert_a_543:   
11451  4D05 FD AB         swp b
11452  4D07 FD 93 80      test bl, $80  
11453  4D0A FD AB         swp b
11454  4D0C C6 11 4D      jz skip_invert_b_543  
11455  4D0F FD 97         neg b 
11456  4D11             skip_invert_b_543:   
11457  4D11 AC            mul a, b ; *
11458  4D12 FD 78         mov g, a
11459  4D14 11            mov a, b
11460  4D15 EA            pop bl
11461  4D16 FD 93 80      test bl, $80
11462  4D19 C6 26 4D      jz _same_signs_543
11463  4D1C 2F            mov bl, al
11464  4D1D 95            not a
11465  4D1E FD 97         neg b
11466  4D20 5B 00 00      adc a, 0
11467  4D23 FD 78         mov g, a
11468  4D25 11            mov a, b
11469  4D26             _same_signs_543:
11470  4D26 FD 38         mov c, g
11471  4D28 27            mov b, a
11472  4D29 FD F1         pop g
11473  4D2B E4            pop a
11474  4D2C             ; --- END FACTORS
11475  4D2C             ; --- START FACTORS
11476  4D2C D7            push a
11477  4D2D FD D8         push g
11478  4D2F 11            mov a, b
11479  4D30 FD 7A         mov g, c
11480  4D32 FA FD FF      lea d, [bp + -3] ; $xl
11481  4D35 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11482  4D38 FD 39         mov c, b ; And place it into C
11483  4D3A 2A            mov b, [d] ; Lower Word in B
11484  4D3B FD D8         push g ; save 'g' as the div instruction uses it
11485  4D3D AE            div a, b ; /, a: quotient, b: remainder
11486  4D3E FD F1         pop g
11487  4D40 FD 38         mov c, g
11488  4D42 27            mov b, a
11489  4D43 FD F1         pop g
11490  4D45 E4            pop a
11491  4D46             ; --- END FACTORS
11492  4D46 56            add b, a
11493  4D47 E4            pop a
11494  4D48             ; --- END TERMS
11495  4D48 FD AB         swp b
11496  4D4A D8            push b
11497  4D4B 07 07 09      call print100
11498  4D4E 51 02 00      add sp, 2
11499  4D51             ; --- END FUNCTION CALL
11500  4D51 FD AB         swp b
11501  4D53 D8            push b
11502  4D54 26 55 80      mov b, _s147 ; "%s"
11503  4D57 FD AB         swp b
11504  4D59 D8            push b
11505  4D5A 07 36 60      call printf
11506  4D5D 51 04 00      add sp, 4
11507  4D60             ; --- END FUNCTION CALL
11508  4D60 0A 44 4E      jmp _if496_exit
11509  4D63             _if496_else:
11510  4D63             ; printf("%s", print100(c1 + ((((al * 2) - xl) * 100) / al))); 
11511  4D63             ; --- START FUNCTION CALL
11512  4D63             ; --- START FUNCTION CALL
11513  4D63 FA 09 00      lea d, [bp + 9] ; $c1
11514  4D66 2A            mov b, [d]
11515  4D67 38 00 00      mov c, 0
11516  4D6A             ; --- START TERMS
11517  4D6A D7            push a
11518  4D6B 11            mov a, b
11519  4D6C FA F9 FF      lea d, [bp + -7] ; $al
11520  4D6F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11521  4D72 FD 39         mov c, b ; And place it into C
11522  4D74 2A            mov b, [d] ; Lower Word in B
11523  4D75             ; --- START FACTORS
11524  4D75 D7            push a
11525  4D76 FD D8         push g
11526  4D78 11            mov a, b
11527  4D79 FD 7A         mov g, c
11528  4D7B FD 2E 02 00   mov32 cb, $00000002
11528  4D7F 00 00 
11529  4D81 D7            push a     ; save left operand
11530  4D82 8E            xor a, b   ; xor sign bits
11531  4D83 FD AA         swp a      ; swap bytes
11532  4D85 83            mov cl, al ; save result of xor into 'dl'
11533  4D86 E4            pop a      ; restore left side operator
11534  4D87 DF            push cl    ; save result of xor above
11535  4D88 FD AA         swp a  
11536  4D8A 93 80         test al, $80  
11537  4D8C FD AA         swp a  
11538  4D8E C6 93 4D      jz skip_invert_a_718  
11539  4D91 FD 95         neg a 
11540  4D93             skip_invert_a_718:   
11541  4D93 FD AB         swp b
11542  4D95 FD 93 80      test bl, $80  
11543  4D98 FD AB         swp b
11544  4D9A C6 9F 4D      jz skip_invert_b_718  
11545  4D9D FD 97         neg b 
11546  4D9F             skip_invert_b_718:   
11547  4D9F AC            mul a, b ; *
11548  4DA0 FD 78         mov g, a
11549  4DA2 11            mov a, b
11550  4DA3 EA            pop bl
11551  4DA4 FD 93 80      test bl, $80
11552  4DA7 C6 B4 4D      jz _same_signs_718
11553  4DAA 2F            mov bl, al
11554  4DAB 95            not a
11555  4DAC FD 97         neg b
11556  4DAE 5B 00 00      adc a, 0
11557  4DB1 FD 78         mov g, a
11558  4DB3 11            mov a, b
11559  4DB4             _same_signs_718:
11560  4DB4 FD 38         mov c, g
11561  4DB6 27            mov b, a
11562  4DB7 FD F1         pop g
11563  4DB9 E4            pop a
11564  4DBA             ; --- END FACTORS
11565  4DBA             ; --- START TERMS
11566  4DBA D7            push a
11567  4DBB 11            mov a, b
11568  4DBC FA FD FF      lea d, [bp + -3] ; $xl
11569  4DBF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11570  4DC2 FD 39         mov c, b ; And place it into C
11571  4DC4 2A            mov b, [d] ; Lower Word in B
11572  4DC5 FD 1C         sub32 ga, cb
11573  4DC7 27            mov b, a
11574  4DC8 FD 38         mov c, g
11575  4DCA E4            pop a
11576  4DCB             ; --- END TERMS
11577  4DCB             ; --- START FACTORS
11578  4DCB D7            push a
11579  4DCC FD D8         push g
11580  4DCE 11            mov a, b
11581  4DCF FD 7A         mov g, c
11582  4DD1 FD 2E 64 00   mov32 cb, $00000064
11582  4DD5 00 00 
11583  4DD7 D7            push a     ; save left operand
11584  4DD8 8E            xor a, b   ; xor sign bits
11585  4DD9 FD AA         swp a      ; swap bytes
11586  4DDB 83            mov cl, al ; save result of xor into 'dl'
11587  4DDC E4            pop a      ; restore left side operator
11588  4DDD DF            push cl    ; save result of xor above
11589  4DDE FD AA         swp a  
11590  4DE0 93 80         test al, $80  
11591  4DE2 FD AA         swp a  
11592  4DE4 C6 E9 4D      jz skip_invert_a_719  
11593  4DE7 FD 95         neg a 
11594  4DE9             skip_invert_a_719:   
11595  4DE9 FD AB         swp b
11596  4DEB FD 93 80      test bl, $80  
11597  4DEE FD AB         swp b
11598  4DF0 C6 F5 4D      jz skip_invert_b_719  
11599  4DF3 FD 97         neg b 
11600  4DF5             skip_invert_b_719:   
11601  4DF5 AC            mul a, b ; *
11602  4DF6 FD 78         mov g, a
11603  4DF8 11            mov a, b
11604  4DF9 EA            pop bl
11605  4DFA FD 93 80      test bl, $80
11606  4DFD C6 0A 4E      jz _same_signs_719
11607  4E00 2F            mov bl, al
11608  4E01 95            not a
11609  4E02 FD 97         neg b
11610  4E04 5B 00 00      adc a, 0
11611  4E07 FD 78         mov g, a
11612  4E09 11            mov a, b
11613  4E0A             _same_signs_719:
11614  4E0A FD 38         mov c, g
11615  4E0C 27            mov b, a
11616  4E0D FD F1         pop g
11617  4E0F E4            pop a
11618  4E10             ; --- END FACTORS
11619  4E10             ; --- START FACTORS
11620  4E10 D7            push a
11621  4E11 FD D8         push g
11622  4E13 11            mov a, b
11623  4E14 FD 7A         mov g, c
11624  4E16 FA F9 FF      lea d, [bp + -7] ; $al
11625  4E19 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11626  4E1C FD 39         mov c, b ; And place it into C
11627  4E1E 2A            mov b, [d] ; Lower Word in B
11628  4E1F FD D8         push g ; save 'g' as the div instruction uses it
11629  4E21 AE            div a, b ; /, a: quotient, b: remainder
11630  4E22 FD F1         pop g
11631  4E24 FD 38         mov c, g
11632  4E26 27            mov b, a
11633  4E27 FD F1         pop g
11634  4E29 E4            pop a
11635  4E2A             ; --- END FACTORS
11636  4E2A 56            add b, a
11637  4E2B E4            pop a
11638  4E2C             ; --- END TERMS
11639  4E2C FD AB         swp b
11640  4E2E D8            push b
11641  4E2F 07 07 09      call print100
11642  4E32 51 02 00      add sp, 2
11643  4E35             ; --- END FUNCTION CALL
11644  4E35 FD AB         swp b
11645  4E37 D8            push b
11646  4E38 26 55 80      mov b, _s147 ; "%s"
11647  4E3B FD AB         swp b
11648  4E3D D8            push b
11649  4E3E 07 36 60      call printf
11650  4E41 51 04 00      add sp, 4
11651  4E44             ; --- END FUNCTION CALL
11652  4E44             _if496_exit:
11653  4E44             ; printf(dist_1, print100((xl > al) ? xl : al)); 
11654  4E44             ; --- START FUNCTION CALL
11655  4E44             ; --- START FUNCTION CALL
11656  4E44             _ternary724_cond:
11657  4E44 FA FD FF      lea d, [bp + -3] ; $xl
11658  4E47 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11659  4E4A FD 39         mov c, b ; And place it into C
11660  4E4C 2A            mov b, [d] ; Lower Word in B
11661  4E4D             ; --- START RELATIONAL
11662  4E4D D7            push a
11663  4E4E FD D8         push g
11664  4E50 11            mov a, b
11665  4E51 FD 7A         mov g, c
11666  4E53 FA F9 FF      lea d, [bp + -7] ; $al
11667  4E56 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11668  4E59 FD 39         mov c, b ; And place it into C
11669  4E5B 2A            mov b, [d] ; Lower Word in B
11670  4E5C FD AF         cmp32 ga, cb
11671  4E5E FD 81         sgu
11672  4E60 FD F1         pop g
11673  4E62 E4            pop a
11674  4E63             ; --- END RELATIONAL
11675  4E63 C0 00 00      cmp b, 0
11676  4E66 C6 75 4E      je _ternary724_FALSE
11677  4E69             _ternary724_TRUE:
11678  4E69 FA FD FF      lea d, [bp + -3] ; $xl
11679  4E6C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11680  4E6F FD 39         mov c, b ; And place it into C
11681  4E71 2A            mov b, [d] ; Lower Word in B
11682  4E72 0A 7E 4E      jmp _ternary724_exit
11683  4E75             _ternary724_FALSE:
11684  4E75 FA F9 FF      lea d, [bp + -7] ; $al
11685  4E78 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11686  4E7B FD 39         mov c, b ; And place it into C
11687  4E7D 2A            mov b, [d] ; Lower Word in B
11688  4E7E             _ternary724_exit:
11689  4E7E FD AB         swp b
11690  4E80 D8            push b
11691  4E81 07 07 09      call print100
11692  4E84 51 02 00      add sp, 2
11693  4E87             ; --- END FUNCTION CALL
11694  4E87 FD AB         swp b
11695  4E89 D8            push b
11696  4E8A 3B 1B 70      mov d, _dist_1 ; $dist_1
11697  4E8D 2A            mov b, [d]
11698  4E8E 38 00 00      mov c, 0
11699  4E91 FD AB         swp b
11700  4E93 D8            push b
11701  4E94 07 36 60      call printf
11702  4E97 51 04 00      add sp, 4
11703  4E9A             ; --- END FUNCTION CALL
11704  4E9A             _if495_exit:
11705  4E9A             _if494_exit:
11706  4E9A             _if493_exit:
11707  4E9A             _if261_exit:
11708  4E9A F9            leave
11709  4E9B 09            ret
11710  4E9C             
11711  4E9C             ship_destroyed:
11712  4E9C F8 00 00      enter 0 ; (push bp; mov bp, sp)
11713  4E9F             ; puts("The Enterprise has been destroyed. The Federation will be conquered.\n"); 
11714  4E9F             ; --- START FUNCTION CALL
11715  4E9F 26 58 80      mov b, _s148 ; "The Enterprise has been destroyed. The Federation will be conquered.\n"
11716  4EA2 FD AB         swp b
11717  4EA4 D8            push b
11718  4EA5 07 47 69      call puts
11719  4EA8 51 02 00      add sp, 2
11720  4EAB             ; --- END FUNCTION CALL
11721  4EAB             ; end_of_time(); 
11722  4EAB             ; --- START FUNCTION CALL
11723  4EAB 07 B0 4E      call end_of_time
11724  4EAE F9            leave
11725  4EAF 09            ret
11726  4EB0             
11727  4EB0             end_of_time:
11728  4EB0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11729  4EB3             ; printf("It is stardate %d.\n\n",  FROM_FIXED(stardate)); 
11730  4EB3             ; --- START FUNCTION CALL
11731  4EB3             ; --- START FUNCTION CALL
11732  4EB3 3B 48 6E      mov d, _stardate ; $stardate
11733  4EB6 2A            mov b, [d]
11734  4EB7 38 00 00      mov c, 0
11735  4EBA FD AB         swp b
11736  4EBC D8            push b
11737  4EBD 07 68 04      call FROM_FIXED
11738  4EC0 51 02 00      add sp, 2
11739  4EC3             ; --- END FUNCTION CALL
11740  4EC3 FD AB         swp b
11741  4EC5 D8            push b
11742  4EC6 26 9E 80      mov b, _s149 ; "It is stardate %d.\n\n"
11743  4EC9 FD AB         swp b
11744  4ECB D8            push b
11745  4ECC 07 36 60      call printf
11746  4ECF 51 04 00      add sp, 4
11747  4ED2             ; --- END FUNCTION CALL
11748  4ED2             ; resign_commision(); 
11749  4ED2             ; --- START FUNCTION CALL
11750  4ED2 07 D7 4E      call resign_commision
11751  4ED5 F9            leave
11752  4ED6 09            ret
11753  4ED7             
11754  4ED7             resign_commision:
11755  4ED7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11756  4EDA             ; printf("There were %d Klingon Battlecruisers left at the end of your mission.\n\n", klingons_left); 
11757  4EDA             ; --- START FUNCTION CALL
11758  4EDA 3B 22 6E      mov d, _klingons_left ; $klingons_left
11759  4EDD 32            mov bl, [d]
11760  4EDE A7 00         mov bh, 0
11761  4EE0 38 00 00      mov c, 0
11762  4EE3 FD AB         swp b
11763  4EE5 D8            push b
11764  4EE6 26 B3 80      mov b, _s150 ; "There were %d Klingon Battlecruisers left at the end of your mission.\n\n"
11765  4EE9 FD AB         swp b
11766  4EEB D8            push b
11767  4EEC 07 36 60      call printf
11768  4EEF 51 04 00      add sp, 4
11769  4EF2             ; --- END FUNCTION CALL
11770  4EF2             ; end_of_game(); 
11771  4EF2             ; --- START FUNCTION CALL
11772  4EF2 07 9C 4F      call end_of_game
11773  4EF5 F9            leave
11774  4EF6 09            ret
11775  4EF7             
11776  4EF7             won_game:
11777  4EF7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11778  4EFA             ; puts("Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"); 
11779  4EFA             ; --- START FUNCTION CALL
11780  4EFA 26 FB 80      mov b, _s151 ; "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"
11781  4EFD FD AB         swp b
11782  4EFF D8            push b
11783  4F00 07 47 69      call puts
11784  4F03 51 02 00      add sp, 2
11785  4F06             ; --- END FUNCTION CALL
11786  4F06             ; if (FROM_FIXED(stardate) - time_start > 0) 
11787  4F06             _if725_cond:
11788  4F06             ; --- START FUNCTION CALL
11789  4F06 3B 48 6E      mov d, _stardate ; $stardate
11790  4F09 2A            mov b, [d]
11791  4F0A 38 00 00      mov c, 0
11792  4F0D FD AB         swp b
11793  4F0F D8            push b
11794  4F10 07 68 04      call FROM_FIXED
11795  4F13 51 02 00      add sp, 2
11796  4F16             ; --- END FUNCTION CALL
11797  4F16             ; --- START TERMS
11798  4F16 D7            push a
11799  4F17 11            mov a, b
11800  4F18 3B 2C 6E      mov d, _time_start ; $time_start
11801  4F1B 2A            mov b, [d]
11802  4F1C 38 00 00      mov c, 0
11803  4F1F 60            sub a, b
11804  4F20 27            mov b, a
11805  4F21 E4            pop a
11806  4F22             ; --- END TERMS
11807  4F22             ; --- START RELATIONAL
11808  4F22 D7            push a
11809  4F23 11            mov a, b
11810  4F24 FD 2E 00 00   mov32 cb, $00000000
11810  4F28 00 00 
11811  4F2A B0            cmp a, b
11812  4F2B FD 81         sgu ; > (unsigned)
11813  4F2D E4            pop a
11814  4F2E             ; --- END RELATIONAL
11815  4F2E C0 00 00      cmp b, 0
11816  4F31 C6 97 4F      je _if725_exit
11817  4F34             _if725_TRUE:
11818  4F34             ; printf("Your efficiency rating is %s\n", 
11819  4F34             ; --- START FUNCTION CALL
11820  4F34             ; --- START FUNCTION CALL
11821  4F34             ; --- START FUNCTION CALL
11822  4F34             ; --- START FUNCTION CALL
11823  4F34 3B 21 6E      mov d, _total_klingons ; $total_klingons
11824  4F37 32            mov bl, [d]
11825  4F38 A7 00         mov bh, 0
11826  4F3A 38 00 00      mov c, 0
11827  4F3D FD AB         swp b
11828  4F3F D8            push b
11829  4F40 07 8B 04      call TO_FIXED00
11830  4F43 51 02 00      add sp, 2
11831  4F46             ; --- END FUNCTION CALL
11832  4F46             ; --- START FACTORS
11833  4F46 D7            push a
11834  4F47 FD D8         push g
11835  4F49 11            mov a, b
11836  4F4A FD 7A         mov g, c
11837  4F4C             ; --- START FUNCTION CALL
11838  4F4C 3B 48 6E      mov d, _stardate ; $stardate
11839  4F4F 2A            mov b, [d]
11840  4F50 38 00 00      mov c, 0
11841  4F53 FD AB         swp b
11842  4F55 D8            push b
11843  4F56 07 68 04      call FROM_FIXED
11844  4F59 51 02 00      add sp, 2
11845  4F5C             ; --- END FUNCTION CALL
11846  4F5C             ; --- START TERMS
11847  4F5C D7            push a
11848  4F5D 11            mov a, b
11849  4F5E 3B 2C 6E      mov d, _time_start ; $time_start
11850  4F61 2A            mov b, [d]
11851  4F62 38 00 00      mov c, 0
11852  4F65 60            sub a, b
11853  4F66 27            mov b, a
11854  4F67 E4            pop a
11855  4F68             ; --- END TERMS
11856  4F68 FD D8         push g ; save 'g' as the div instruction uses it
11857  4F6A AE            div a, b ; /, a: quotient, b: remainder
11858  4F6B FD F1         pop g
11859  4F6D FD 38         mov c, g
11860  4F6F 27            mov b, a
11861  4F70 FD F1         pop g
11862  4F72 E4            pop a
11863  4F73             ; --- END FACTORS
11864  4F73 FD AB         swp b
11865  4F75 D8            push b
11866  4F76 07 F8 5B      call square00
11867  4F79 51 02 00      add sp, 2
11868  4F7C             ; --- END FUNCTION CALL
11869  4F7C FD AB         swp b
11870  4F7E D8            push b
11871  4F7F 07 07 09      call print100
11872  4F82 51 02 00      add sp, 2
11873  4F85             ; --- END FUNCTION CALL
11874  4F85 FD AB         swp b
11875  4F87 D8            push b
11876  4F88 26 63 81      mov b, _s152 ; "Your efficiency rating is %s\n"
11877  4F8B FD AB         swp b
11878  4F8D D8            push b
11879  4F8E 07 36 60      call printf
11880  4F91 51 04 00      add sp, 4
11881  4F94             ; --- END FUNCTION CALL
11882  4F94 0A 97 4F      jmp _if725_exit
11883  4F97             _if725_exit:
11884  4F97             ; end_of_game(); 
11885  4F97             ; --- START FUNCTION CALL
11886  4F97 07 9C 4F      call end_of_game
11887  4F9A F9            leave
11888  4F9B 09            ret
11889  4F9C             
11890  4F9C             end_of_game:
11891  4F9C F8 00 00      enter 0 ; (push bp; mov bp, sp)
11892  4F9F             ; char x[4]; 
11893  4F9F 52 04 00      sub sp, 4
11894  4FA2             ; if (starbases_left > 0) { 
11895  4FA2             _if742_cond:
11896  4FA2 3B 4C 6D      mov d, _starbases_left ; $starbases_left
11897  4FA5 32            mov bl, [d]
11898  4FA6 A7 00         mov bh, 0
11899  4FA8 38 00 00      mov c, 0
11900  4FAB             ; --- START RELATIONAL
11901  4FAB D7            push a
11902  4FAC 11            mov a, b
11903  4FAD FD 2E 00 00   mov32 cb, $00000000
11903  4FB1 00 00 
11904  4FB3 B0            cmp a, b
11905  4FB4 FD 7F         sgt ; >
11906  4FB6 E4            pop a
11907  4FB7             ; --- END RELATIONAL
11908  4FB7 C0 00 00      cmp b, 0
11909  4FBA C6 07 50      je _if742_exit
11910  4FBD             _if742_TRUE:
11911  4FBD             ; puts("The Federation is in need of a new starship commander"); 
11912  4FBD             ; --- START FUNCTION CALL
11913  4FBD 26 81 81      mov b, _s153 ; "The Federation is in need of a new starship commander"
11914  4FC0 FD AB         swp b
11915  4FC2 D8            push b
11916  4FC3 07 47 69      call puts
11917  4FC6 51 02 00      add sp, 2
11918  4FC9             ; --- END FUNCTION CALL
11919  4FC9             ; puts(" for a similar mission.\n"); 
11920  4FC9             ; --- START FUNCTION CALL
11921  4FC9 26 B7 81      mov b, _s154 ; " for a similar mission.\n"
11922  4FCC FD AB         swp b
11923  4FCE D8            push b
11924  4FCF 07 47 69      call puts
11925  4FD2 51 02 00      add sp, 2
11926  4FD5             ; --- END FUNCTION CALL
11927  4FD5             ; puts("If there is a volunteer, let him step forward and"); 
11928  4FD5             ; --- START FUNCTION CALL
11929  4FD5 26 D0 81      mov b, _s155 ; "If there is a volunteer, let him step forward and"
11930  4FD8 FD AB         swp b
11931  4FDA D8            push b
11932  4FDB 07 47 69      call puts
11933  4FDE 51 02 00      add sp, 2
11934  4FE1             ; --- END FUNCTION CALL
11935  4FE1             ; puts(" enter 'aye': "); 
11936  4FE1             ; --- START FUNCTION CALL
11937  4FE1 26 02 82      mov b, _s156 ; " enter 'aye': "
11938  4FE4 FD AB         swp b
11939  4FE6 D8            push b
11940  4FE7 07 47 69      call puts
11941  4FEA 51 02 00      add sp, 2
11942  4FED             ; --- END FUNCTION CALL
11943  4FED             ; input(x,4); 
11944  4FED             ; --- START FUNCTION CALL
11945  4FED FD 2E 04 00   mov32 cb, $00000004
11945  4FF1 00 00 
11946  4FF3 DD            push bl
11947  4FF4 FA FD FF      lea d, [bp + -3] ; $x
11948  4FF7 2D            mov b, d
11949  4FF8 38 00 00      mov c, 0
11950  4FFB FD AB         swp b
11951  4FFD D8            push b
11952  4FFE 07 83 05      call input
11953  5001 51 03 00      add sp, 3
11954  5004             ; --- END FUNCTION CALL
11955  5004 0A 07 50      jmp _if742_exit
11956  5007             _if742_exit:
11957  5007             ; exit(); 
11958  5007             ; --- START FUNCTION CALL
11959  5007 07 F7 5D      call exit
11960  500A F9            leave
11961  500B 09            ret
11962  500C             
11963  500C             klingons_move:
11964  500C F8 00 00      enter 0 ; (push bp; mov bp, sp)
11965  500F             ; int i; 
11966  500F 52 02 00      sub sp, 2
11967  5012             ; struct klingon *k; 
11968  5012 52 02 00      sub sp, 2
11969  5015             ; k = &kdata; 
11970  5015 FA FD FF      lea d, [bp + -3] ; $k
11971  5018 DA            push d
11972  5019 3B 14 6E      mov d, _kdata_data ; $kdata
11973  501C 2D            mov b, d
11974  501D E7            pop d
11975  501E FD 43         mov [d], b
11976  5020             ; for (i = 0; i <= 2; i++) { 
11977  5020             _for743_init:
11978  5020 FA FF FF      lea d, [bp + -1] ; $i
11979  5023 DA            push d
11980  5024 FD 2E 00 00   mov32 cb, $00000000
11980  5028 00 00 
11981  502A E7            pop d
11982  502B FD 43         mov [d], b
11983  502D             _for743_cond:
11984  502D FA FF FF      lea d, [bp + -1] ; $i
11985  5030 2A            mov b, [d]
11986  5031 38 00 00      mov c, 0
11987  5034             ; --- START RELATIONAL
11988  5034 D7            push a
11989  5035 11            mov a, b
11990  5036 FD 2E 02 00   mov32 cb, $00000002
11990  503A 00 00 
11991  503C B0            cmp a, b
11992  503D FD 74         sle ; <= (signed)
11993  503F E4            pop a
11994  5040             ; --- END RELATIONAL
11995  5040 C0 00 00      cmp b, 0
11996  5043 C6 CB 50      je _for743_exit
11997  5046             _for743_block:
11998  5046             ; if (k->energy > 0) { 
11999  5046             _if744_cond:
12000  5046 FA FD FF      lea d, [bp + -3] ; $k
12001  5049 FD 2A         mov d, [d]
12002  504B 58 02 00      add d, 2
12003  504E 2A            mov b, [d]
12004  504F 38 00 00      mov c, 0
12005  5052             ; --- START RELATIONAL
12006  5052 D7            push a
12007  5053 11            mov a, b
12008  5054 FD 2E 00 00   mov32 cb, $00000000
12008  5058 00 00 
12009  505A B0            cmp a, b
12010  505B FD 7F         sgt ; >
12011  505D E4            pop a
12012  505E             ; --- END RELATIONAL
12013  505E C0 00 00      cmp b, 0
12014  5061 C6 A6 50      je _if744_exit
12015  5064             _if744_TRUE:
12016  5064             ; wipe_klingon(k); 
12017  5064             ; --- START FUNCTION CALL
12018  5064 FA FD FF      lea d, [bp + -3] ; $k
12019  5067 2A            mov b, [d]
12020  5068 38 00 00      mov c, 0
12021  506B FD AB         swp b
12022  506D D8            push b
12023  506E 07 63 2D      call wipe_klingon
12024  5071 51 02 00      add sp, 2
12025  5074             ; --- END FUNCTION CALL
12026  5074             ; find_set_empty_place(	3         , k->y, k->x); 
12027  5074             ; --- START FUNCTION CALL
12028  5074 FA FD FF      lea d, [bp + -3] ; $k
12029  5077 FD 2A         mov d, [d]
12030  5079 58 01 00      add d, 1
12031  507C 32            mov bl, [d]
12032  507D A7 00         mov bh, 0
12033  507F 38 00 00      mov c, 0
12034  5082 FD AB         swp b
12035  5084 D8            push b
12036  5085 FA FD FF      lea d, [bp + -3] ; $k
12037  5088 FD 2A         mov d, [d]
12038  508A 58 00 00      add d, 0
12039  508D 32            mov bl, [d]
12040  508E A7 00         mov bh, 0
12041  5090 38 00 00      mov c, 0
12042  5093 FD AB         swp b
12043  5095 D8            push b
12044  5096 FD 2E 03 00   mov32 cb, $00000003
12044  509A 00 00 
12045  509C DD            push bl
12046  509D 07 33 58      call find_set_empty_place
12047  50A0 51 05 00      add sp, 5
12048  50A3             ; --- END FUNCTION CALL
12049  50A3 0A A6 50      jmp _if744_exit
12050  50A6             _if744_exit:
12051  50A6             ; k++; 
12052  50A6 FA FD FF      lea d, [bp + -3] ; $k
12053  50A9 2A            mov b, [d]
12054  50AA 38 00 00      mov c, 0
12055  50AD 11            mov a, b
12056  50AE FD 77         inc b
12057  50B0 FD 77         inc b
12058  50B2 FA FD FF      lea d, [bp + -3] ; $k
12059  50B5 FD 43         mov [d], b
12060  50B7 27            mov b, a
12061  50B8             _for743_update:
12062  50B8 FA FF FF      lea d, [bp + -1] ; $i
12063  50BB 2A            mov b, [d]
12064  50BC 38 00 00      mov c, 0
12065  50BF 11            mov a, b
12066  50C0 FD 77         inc b
12067  50C2 FA FF FF      lea d, [bp + -1] ; $i
12068  50C5 FD 43         mov [d], b
12069  50C7 27            mov b, a
12070  50C8 0A 2D 50      jmp _for743_cond
12071  50CB             _for743_exit:
12072  50CB             ; klingons_shoot(); 
12073  50CB             ; --- START FUNCTION CALL
12074  50CB 07 D0 50      call klingons_shoot
12075  50CE F9            leave
12076  50CF 09            ret
12077  50D0             
12078  50D0             klingons_shoot:
12079  50D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12080  50D3             ; unsigned char        r; 
12081  50D3 52 01 00      sub sp, 1
12082  50D6             ; long unsigned int         h; 
12083  50D6 52 04 00      sub sp, 4
12084  50D9             ; unsigned char        i; 
12085  50D9 52 01 00      sub sp, 1
12086  50DC             ; struct klingon *k; 
12087  50DC 52 02 00      sub sp, 2
12088  50DF             ; long unsigned int         ratio; 
12089  50DF 52 04 00      sub sp, 4
12090  50E2             ; k = &kdata; 
12091  50E2 FA F9 FF      lea d, [bp + -7] ; $k
12092  50E5 DA            push d
12093  50E6 3B 14 6E      mov d, _kdata_data ; $kdata
12094  50E9 2D            mov b, d
12095  50EA E7            pop d
12096  50EB FD 43         mov [d], b
12097  50ED             ; if (klingons <= 0) 
12098  50ED             _if745_cond:
12099  50ED 3B 20 6E      mov d, _klingons ; $klingons
12100  50F0 32            mov bl, [d]
12101  50F1 A7 00         mov bh, 0
12102  50F3 38 00 00      mov c, 0
12103  50F6             ; --- START RELATIONAL
12104  50F6 D7            push a
12105  50F7 11            mov a, b
12106  50F8 FD 2E 00 00   mov32 cb, $00000000
12106  50FC 00 00 
12107  50FE B0            cmp a, b
12108  50FF FD 76         sleu ; <= (unsigned)
12109  5101 E4            pop a
12110  5102             ; --- END RELATIONAL
12111  5102 C0 00 00      cmp b, 0
12112  5105 C6 0D 51      je _if745_exit
12113  5108             _if745_TRUE:
12114  5108             ; return; 
12115  5108 F9            leave
12116  5109 09            ret
12117  510A 0A 0D 51      jmp _if745_exit
12118  510D             _if745_exit:
12119  510D             ; if (docked) { 
12120  510D             _if746_cond:
12121  510D 3B 6D 6D      mov d, _docked ; $docked
12122  5110 32            mov bl, [d]
12123  5111 A7 00         mov bh, 0
12124  5113 38 00 00      mov c, 0
12125  5116 C0 00 00      cmp b, 0
12126  5119 C6 2D 51      je _if746_exit
12127  511C             _if746_TRUE:
12128  511C             ; puts("Starbase shields protect the Enterprise\n"); 
12129  511C             ; --- START FUNCTION CALL
12130  511C 26 11 82      mov b, _s157 ; "Starbase shields protect the Enterprise\n"
12131  511F FD AB         swp b
12132  5121 D8            push b
12133  5122 07 47 69      call puts
12134  5125 51 02 00      add sp, 2
12135  5128             ; --- END FUNCTION CALL
12136  5128             ; return; 
12137  5128 F9            leave
12138  5129 09            ret
12139  512A 0A 2D 51      jmp _if746_exit
12140  512D             _if746_exit:
12141  512D             ; for (i = 0; i <= 2; i++) { 
12142  512D             _for747_init:
12143  512D FA FB FF      lea d, [bp + -5] ; $i
12144  5130 DA            push d
12145  5131 FD 2E 00 00   mov32 cb, $00000000
12145  5135 00 00 
12146  5137 E7            pop d
12147  5138 FD 3E         mov [d], bl
12148  513A             _for747_cond:
12149  513A FA FB FF      lea d, [bp + -5] ; $i
12150  513D 32            mov bl, [d]
12151  513E A7 00         mov bh, 0
12152  5140 38 00 00      mov c, 0
12153  5143             ; --- START RELATIONAL
12154  5143 D7            push a
12155  5144 11            mov a, b
12156  5145 FD 2E 02 00   mov32 cb, $00000002
12156  5149 00 00 
12157  514B B0            cmp a, b
12158  514C FD 76         sleu ; <= (unsigned)
12159  514E E4            pop a
12160  514F             ; --- END RELATIONAL
12161  514F C0 00 00      cmp b, 0
12162  5152 C6 EB 54      je _for747_exit
12163  5155             _for747_block:
12164  5155             ; if (k->energy > 0) { 
12165  5155             _if748_cond:
12166  5155 FA F9 FF      lea d, [bp + -7] ; $k
12167  5158 FD 2A         mov d, [d]
12168  515A 58 02 00      add d, 2
12169  515D 2A            mov b, [d]
12170  515E 38 00 00      mov c, 0
12171  5161             ; --- START RELATIONAL
12172  5161 D7            push a
12173  5162 11            mov a, b
12174  5163 FD 2E 00 00   mov32 cb, $00000000
12174  5167 00 00 
12175  5169 B0            cmp a, b
12176  516A FD 7F         sgt ; >
12177  516C E4            pop a
12178  516D             ; --- END RELATIONAL
12179  516D C0 00 00      cmp b, 0
12180  5170 C6 C4 54      je _if748_exit
12181  5173             _if748_TRUE:
12182  5173             ; h = k->energy * (200UL + get_rand(100)); 
12183  5173 FA FC FF      lea d, [bp + -4] ; $h
12184  5176 DA            push d
12185  5177 FA F9 FF      lea d, [bp + -7] ; $k
12186  517A FD 2A         mov d, [d]
12187  517C 58 02 00      add d, 2
12188  517F 2A            mov b, [d]
12189  5180 38 00 00      mov c, 0
12190  5183             ; --- START FACTORS
12191  5183 D7            push a
12192  5184 FD D8         push g
12193  5186 11            mov a, b
12194  5187 FD 7A         mov g, c
12195  5189 FD 2E C8 00   mov32 cb, $000000c8
12195  518D 00 00 
12196  518F             ; --- START TERMS
12197  518F D7            push a
12198  5190 FD D8         push g
12199  5192 11            mov a, b
12200  5193 FD 7A         mov g, c
12201  5195             ; --- START FUNCTION CALL
12202  5195 FD 2E 64 00   mov32 cb, $00000064
12202  5199 00 00 
12203  519B FD AB         swp b
12204  519D D8            push b
12205  519E 07 FF 04      call get_rand
12206  51A1 51 02 00      add sp, 2
12207  51A4             ; --- END FUNCTION CALL
12208  51A4 FD 15         add32 cb, ga
12209  51A6 FD F1         pop g
12210  51A8 E4            pop a
12211  51A9             ; --- END TERMS
12212  51A9 D7            push a     ; save left operand
12213  51AA 8E            xor a, b   ; xor sign bits
12214  51AB FD AA         swp a      ; swap bytes
12215  51AD 83            mov cl, al ; save result of xor into 'dl'
12216  51AE E4            pop a      ; restore left side operator
12217  51AF DF            push cl    ; save result of xor above
12218  51B0 FD AA         swp a  
12219  51B2 93 80         test al, $80  
12220  51B4 FD AA         swp a  
12221  51B6 C6 BB 51      jz skip_invert_a_750  
12222  51B9 FD 95         neg a 
12223  51BB             skip_invert_a_750:   
12224  51BB FD AB         swp b
12225  51BD FD 93 80      test bl, $80  
12226  51C0 FD AB         swp b
12227  51C2 C6 C7 51      jz skip_invert_b_750  
12228  51C5 FD 97         neg b 
12229  51C7             skip_invert_b_750:   
12230  51C7 AC            mul a, b ; *
12231  51C8 FD 78         mov g, a
12232  51CA 11            mov a, b
12233  51CB EA            pop bl
12234  51CC FD 93 80      test bl, $80
12235  51CF C6 DC 51      jz _same_signs_750
12236  51D2 2F            mov bl, al
12237  51D3 95            not a
12238  51D4 FD 97         neg b
12239  51D6 5B 00 00      adc a, 0
12240  51D9 FD 78         mov g, a
12241  51DB 11            mov a, b
12242  51DC             _same_signs_750:
12243  51DC FD 38         mov c, g
12244  51DE 27            mov b, a
12245  51DF FD F1         pop g
12246  51E1 E4            pop a
12247  51E2             ; --- END FACTORS
12248  51E2 E7            pop d
12249  51E3 FD 43         mov [d], b
12250  51E5 26 00 00      mov b, 0
12251  51E8 FD 44 02 00   mov [d + 2], b
12252  51EC             ; h =h* 100;	/* Ready for division in fixed */ 
12253  51EC FA FC FF      lea d, [bp + -4] ; $h
12254  51EF DA            push d
12255  51F0 FA FC FF      lea d, [bp + -4] ; $h
12256  51F3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12257  51F6 FD 39         mov c, b ; And place it into C
12258  51F8 2A            mov b, [d] ; Lower Word in B
12259  51F9             ; --- START FACTORS
12260  51F9 D7            push a
12261  51FA FD D8         push g
12262  51FC 11            mov a, b
12263  51FD FD 7A         mov g, c
12264  51FF FD 2E 64 00   mov32 cb, $00000064
12264  5203 00 00 
12265  5205 D7            push a     ; save left operand
12266  5206 8E            xor a, b   ; xor sign bits
12267  5207 FD AA         swp a      ; swap bytes
12268  5209 83            mov cl, al ; save result of xor into 'dl'
12269  520A E4            pop a      ; restore left side operator
12270  520B DF            push cl    ; save result of xor above
12271  520C FD AA         swp a  
12272  520E 93 80         test al, $80  
12273  5210 FD AA         swp a  
12274  5212 C6 17 52      jz skip_invert_a_752  
12275  5215 FD 95         neg a 
12276  5217             skip_invert_a_752:   
12277  5217 FD AB         swp b
12278  5219 FD 93 80      test bl, $80  
12279  521C FD AB         swp b
12280  521E C6 23 52      jz skip_invert_b_752  
12281  5221 FD 97         neg b 
12282  5223             skip_invert_b_752:   
12283  5223 AC            mul a, b ; *
12284  5224 FD 78         mov g, a
12285  5226 11            mov a, b
12286  5227 EA            pop bl
12287  5228 FD 93 80      test bl, $80
12288  522B C6 38 52      jz _same_signs_752
12289  522E 2F            mov bl, al
12290  522F 95            not a
12291  5230 FD 97         neg b
12292  5232 5B 00 00      adc a, 0
12293  5235 FD 78         mov g, a
12294  5237 11            mov a, b
12295  5238             _same_signs_752:
12296  5238 FD 38         mov c, g
12297  523A 27            mov b, a
12298  523B FD F1         pop g
12299  523D E4            pop a
12300  523E             ; --- END FACTORS
12301  523E E7            pop d
12302  523F FD 43         mov [d], b
12303  5241 26 00 00      mov b, 0
12304  5244 FD 44 02 00   mov [d + 2], b
12305  5248             ; h =h/ distance_to(k); 
12306  5248 FA FC FF      lea d, [bp + -4] ; $h
12307  524B DA            push d
12308  524C FA FC FF      lea d, [bp + -4] ; $h
12309  524F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12310  5252 FD 39         mov c, b ; And place it into C
12311  5254 2A            mov b, [d] ; Lower Word in B
12312  5255             ; --- START FACTORS
12313  5255 D7            push a
12314  5256 FD D8         push g
12315  5258 11            mov a, b
12316  5259 FD 7A         mov g, c
12317  525B             ; --- START FUNCTION CALL
12318  525B FA F9 FF      lea d, [bp + -7] ; $k
12319  525E 2A            mov b, [d]
12320  525F 38 00 00      mov c, 0
12321  5262 FD AB         swp b
12322  5264 D8            push b
12323  5265 07 1B 5D      call distance_to
12324  5268 51 02 00      add sp, 2
12325  526B             ; --- END FUNCTION CALL
12326  526B FD D8         push g ; save 'g' as the div instruction uses it
12327  526D AE            div a, b ; /, a: quotient, b: remainder
12328  526E FD F1         pop g
12329  5270 FD 38         mov c, g
12330  5272 27            mov b, a
12331  5273 FD F1         pop g
12332  5275 E4            pop a
12333  5276             ; --- END FACTORS
12334  5276 E7            pop d
12335  5277 FD 43         mov [d], b
12336  5279 26 00 00      mov b, 0
12337  527C FD 44 02 00   mov [d + 2], b
12338  5280             ; shield = shield - FROM_FIXED00(h); 
12339  5280 3B 29 6E      mov d, _shield ; $shield
12340  5283 DA            push d
12341  5284 3B 29 6E      mov d, _shield ; $shield
12342  5287 2A            mov b, [d]
12343  5288 38 00 00      mov c, 0
12344  528B             ; --- START TERMS
12345  528B D7            push a
12346  528C 11            mov a, b
12347  528D             ; --- START FUNCTION CALL
12348  528D FA FC FF      lea d, [bp + -4] ; $h
12349  5290 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12350  5293 FD 39         mov c, b ; And place it into C
12351  5295 2A            mov b, [d] ; Lower Word in B
12352  5296 FD AB         swp b
12353  5298 D8            push b
12354  5299 07 DC 04      call FROM_FIXED00
12355  529C 51 02 00      add sp, 2
12356  529F             ; --- END FUNCTION CALL
12357  529F 60            sub a, b
12358  52A0 27            mov b, a
12359  52A1 E4            pop a
12360  52A2             ; --- END TERMS
12361  52A2 E7            pop d
12362  52A3 FD 43         mov [d], b
12363  52A5             ; k->energy = (k->energy * 100) / (300 + get_rand(100)); 
12364  52A5 FA F9 FF      lea d, [bp + -7] ; $k
12365  52A8 FD 2A         mov d, [d]
12366  52AA 58 02 00      add d, 2
12367  52AD DA            push d
12368  52AE FA F9 FF      lea d, [bp + -7] ; $k
12369  52B1 FD 2A         mov d, [d]
12370  52B3 58 02 00      add d, 2
12371  52B6 2A            mov b, [d]
12372  52B7 38 00 00      mov c, 0
12373  52BA             ; --- START FACTORS
12374  52BA D7            push a
12375  52BB FD D8         push g
12376  52BD 11            mov a, b
12377  52BE FD 7A         mov g, c
12378  52C0 FD 2E 64 00   mov32 cb, $00000064
12378  52C4 00 00 
12379  52C6 D7            push a     ; save left operand
12380  52C7 8E            xor a, b   ; xor sign bits
12381  52C8 FD AA         swp a      ; swap bytes
12382  52CA 83            mov cl, al ; save result of xor into 'dl'
12383  52CB E4            pop a      ; restore left side operator
12384  52CC DF            push cl    ; save result of xor above
12385  52CD FD AA         swp a  
12386  52CF 93 80         test al, $80  
12387  52D1 FD AA         swp a  
12388  52D3 C6 D8 52      jz skip_invert_a_759  
12389  52D6 FD 95         neg a 
12390  52D8             skip_invert_a_759:   
12391  52D8 FD AB         swp b
12392  52DA FD 93 80      test bl, $80  
12393  52DD FD AB         swp b
12394  52DF C6 E4 52      jz skip_invert_b_759  
12395  52E2 FD 97         neg b 
12396  52E4             skip_invert_b_759:   
12397  52E4 AC            mul a, b ; *
12398  52E5 FD 78         mov g, a
12399  52E7 11            mov a, b
12400  52E8 EA            pop bl
12401  52E9 FD 93 80      test bl, $80
12402  52EC C6 F9 52      jz _same_signs_759
12403  52EF 2F            mov bl, al
12404  52F0 95            not a
12405  52F1 FD 97         neg b
12406  52F3 5B 00 00      adc a, 0
12407  52F6 FD 78         mov g, a
12408  52F8 11            mov a, b
12409  52F9             _same_signs_759:
12410  52F9 FD 38         mov c, g
12411  52FB 27            mov b, a
12412  52FC FD F1         pop g
12413  52FE E4            pop a
12414  52FF             ; --- END FACTORS
12415  52FF             ; --- START FACTORS
12416  52FF D7            push a
12417  5300 FD D8         push g
12418  5302 11            mov a, b
12419  5303 FD 7A         mov g, c
12420  5305 FD 2E 2C 01   mov32 cb, $0000012c
12420  5309 00 00 
12421  530B             ; --- START TERMS
12422  530B D7            push a
12423  530C 11            mov a, b
12424  530D             ; --- START FUNCTION CALL
12425  530D FD 2E 64 00   mov32 cb, $00000064
12425  5311 00 00 
12426  5313 FD AB         swp b
12427  5315 D8            push b
12428  5316 07 FF 04      call get_rand
12429  5319 51 02 00      add sp, 2
12430  531C             ; --- END FUNCTION CALL
12431  531C 56            add b, a
12432  531D E4            pop a
12433  531E             ; --- END TERMS
12434  531E FD D8         push g ; save 'g' as the div instruction uses it
12435  5320 AE            div a, b ; /, a: quotient, b: remainder
12436  5321 FD F1         pop g
12437  5323 FD 38         mov c, g
12438  5325 27            mov b, a
12439  5326 FD F1         pop g
12440  5328 E4            pop a
12441  5329             ; --- END FACTORS
12442  5329 E7            pop d
12443  532A FD 43         mov [d], b
12444  532C             ; printf("%d unit hit on Enterprise from sector %d, %d\n", (unsigned)FROM_FIXED00(h), k->y, k->x); 
12445  532C             ; --- START FUNCTION CALL
12446  532C FA F9 FF      lea d, [bp + -7] ; $k
12447  532F FD 2A         mov d, [d]
12448  5331 58 01 00      add d, 1
12449  5334 32            mov bl, [d]
12450  5335 A7 00         mov bh, 0
12451  5337 38 00 00      mov c, 0
12452  533A FD AB         swp b
12453  533C D8            push b
12454  533D FA F9 FF      lea d, [bp + -7] ; $k
12455  5340 FD 2A         mov d, [d]
12456  5342 58 00 00      add d, 0
12457  5345 32            mov bl, [d]
12458  5346 A7 00         mov bh, 0
12459  5348 38 00 00      mov c, 0
12460  534B FD AB         swp b
12461  534D D8            push b
12462  534E FA FC FF      lea d, [bp + -4] ; $h
12463  5351 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12464  5354 FD 39         mov c, b ; And place it into C
12465  5356 2A            mov b, [d] ; Lower Word in B
12466  5357 FD AB         swp b
12467  5359 D8            push b
12468  535A 26 3A 82      mov b, _s158 ; "%d unit hit on Enterprise from sector %d, %d\n"
12469  535D FD AB         swp b
12470  535F D8            push b
12471  5360 07 36 60      call printf
12472  5363 51 08 00      add sp, 8
12473  5366             ; --- END FUNCTION CALL
12474  5366             ; if (shield <= 0) { 
12475  5366             _if761_cond:
12476  5366 3B 29 6E      mov d, _shield ; $shield
12477  5369 2A            mov b, [d]
12478  536A 38 00 00      mov c, 0
12479  536D             ; --- START RELATIONAL
12480  536D D7            push a
12481  536E 11            mov a, b
12482  536F FD 2E 00 00   mov32 cb, $00000000
12482  5373 00 00 
12483  5375 B0            cmp a, b
12484  5376 FD 74         sle ; <= (signed)
12485  5378 E4            pop a
12486  5379             ; --- END RELATIONAL
12487  5379 C0 00 00      cmp b, 0
12488  537C C6 92 53      je _if761_exit
12489  537F             _if761_TRUE:
12490  537F             ; putchar('\n'); 
12491  537F             ; --- START FUNCTION CALL
12492  537F FD 2E 0A 00   mov32 cb, $0000000a
12492  5383 00 00 
12493  5385 DD            push bl
12494  5386 07 BB 64      call putchar
12495  5389 51 01 00      add sp, 1
12496  538C             ; --- END FUNCTION CALL
12497  538C             ; ship_destroyed(); 
12498  538C             ; --- START FUNCTION CALL
12499  538C 07 9C 4E      call ship_destroyed
12500  538F 0A 92 53      jmp _if761_exit
12501  5392             _if761_exit:
12502  5392             ; printf("    <Shields down to %d units>\n\n", shield); 
12503  5392             ; --- START FUNCTION CALL
12504  5392 3B 29 6E      mov d, _shield ; $shield
12505  5395 2A            mov b, [d]
12506  5396 38 00 00      mov c, 0
12507  5399 FD AB         swp b
12508  539B D8            push b
12509  539C 26 68 82      mov b, _s159 ; "    <Shields down to %d units>\n\n"
12510  539F FD AB         swp b
12511  53A1 D8            push b
12512  53A2 07 36 60      call printf
12513  53A5 51 04 00      add sp, 4
12514  53A8             ; --- END FUNCTION CALL
12515  53A8             ; if (h >= 20) { 
12516  53A8             _if762_cond:
12517  53A8 FA FC FF      lea d, [bp + -4] ; $h
12518  53AB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12519  53AE FD 39         mov c, b ; And place it into C
12520  53B0 2A            mov b, [d] ; Lower Word in B
12521  53B1             ; --- START RELATIONAL
12522  53B1 D7            push a
12523  53B2 FD D8         push g
12524  53B4 11            mov a, b
12525  53B5 FD 7A         mov g, c
12526  53B7 FD 2E 14 00   mov32 cb, $00000014
12526  53BB 00 00 
12527  53BD FD AF         cmp32 ga, cb
12528  53BF FD 82         sgeu
12529  53C1 FD F1         pop g
12530  53C3 E4            pop a
12531  53C4             ; --- END RELATIONAL
12532  53C4 C0 00 00      cmp b, 0
12533  53C7 C6 C1 54      je _if762_exit
12534  53CA             _if762_TRUE:
12535  53CA             ; ratio = ((int)h)/shield; 
12536  53CA FA F5 FF      lea d, [bp + -11] ; $ratio
12537  53CD DA            push d
12538  53CE FA FC FF      lea d, [bp + -4] ; $h
12539  53D1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12540  53D4 FD 39         mov c, b ; And place it into C
12541  53D6 2A            mov b, [d] ; Lower Word in B
12542  53D7             ; --- START FACTORS
12543  53D7 D7            push a
12544  53D8 FD D8         push g
12545  53DA 11            mov a, b
12546  53DB FD 7A         mov g, c
12547  53DD 3B 29 6E      mov d, _shield ; $shield
12548  53E0 2A            mov b, [d]
12549  53E1 38 00 00      mov c, 0
12550  53E4 FD D8         push g ; save 'g' as the div instruction uses it
12551  53E6 AE            div a, b ; /, a: quotient, b: remainder
12552  53E7 FD F1         pop g
12553  53E9 FD 38         mov c, g
12554  53EB 27            mov b, a
12555  53EC FD F1         pop g
12556  53EE E4            pop a
12557  53EF             ; --- END FACTORS
12558  53EF E7            pop d
12559  53F0 FD 43         mov [d], b
12560  53F2 26 00 00      mov b, 0
12561  53F5 FD 44 02 00   mov [d + 2], b
12562  53F9             ; if (get_rand(10) <= 6 && ratio > 2) { 
12563  53F9             _if765_cond:
12564  53F9             ; --- START FUNCTION CALL
12565  53F9 FD 2E 0A 00   mov32 cb, $0000000a
12565  53FD 00 00 
12566  53FF FD AB         swp b
12567  5401 D8            push b
12568  5402 07 FF 04      call get_rand
12569  5405 51 02 00      add sp, 2
12570  5408             ; --- END FUNCTION CALL
12571  5408             ; --- START RELATIONAL
12572  5408 D7            push a
12573  5409 11            mov a, b
12574  540A FD 2E 06 00   mov32 cb, $00000006
12574  540E 00 00 
12575  5410 B0            cmp a, b
12576  5411 FD 74         sle ; <= (signed)
12577  5413 E4            pop a
12578  5414             ; --- END RELATIONAL
12579  5414             ; --- START LOGICAL AND
12580  5414 D7            push a
12581  5415 11            mov a, b
12582  5416 FA F5 FF      lea d, [bp + -11] ; $ratio
12583  5419 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12584  541C FD 39         mov c, b ; And place it into C
12585  541E 2A            mov b, [d] ; Lower Word in B
12586  541F             ; --- START RELATIONAL
12587  541F D7            push a
12588  5420 FD D8         push g
12589  5422 11            mov a, b
12590  5423 FD 7A         mov g, c
12591  5425 FD 2E 02 00   mov32 cb, $00000002
12591  5429 00 00 
12592  542B FD AF         cmp32 ga, cb
12593  542D FD 81         sgu
12594  542F FD F1         pop g
12595  5431 E4            pop a
12596  5432             ; --- END RELATIONAL
12597  5432 FD A7         sand a, b
12598  5434 E4            pop a
12599  5435             ; --- END LOGICAL AND
12600  5435 C0 00 00      cmp b, 0
12601  5438 C6 BE 54      je _if765_exit
12602  543B             _if765_TRUE:
12603  543B             ; r = rand8(); 
12604  543B FA 00 00      lea d, [bp + 0] ; $r
12605  543E DA            push d
12606  543F             ; --- START FUNCTION CALL
12607  543F 07 6F 05      call rand8
12608  5442 E7            pop d
12609  5443 FD 3E         mov [d], bl
12610  5445             ; damage[r] =damage[r] - ratio + get_rand(50); 
12611  5445 3B 30 6E      mov d, _damage_data ; $damage
12612  5448 D7            push a
12613  5449 DA            push d
12614  544A FA 00 00      lea d, [bp + 0] ; $r
12615  544D 32            mov bl, [d]
12616  544E A7 00         mov bh, 0
12617  5450 38 00 00      mov c, 0
12618  5453 E7            pop d
12619  5454 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12620  5458 E4            pop a
12621  5459 DA            push d
12622  545A 3B 30 6E      mov d, _damage_data ; $damage
12623  545D D7            push a
12624  545E DA            push d
12625  545F FA 00 00      lea d, [bp + 0] ; $r
12626  5462 32            mov bl, [d]
12627  5463 A7 00         mov bh, 0
12628  5465 38 00 00      mov c, 0
12629  5468 E7            pop d
12630  5469 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12631  546D E4            pop a
12632  546E 2A            mov b, [d]
12633  546F 38 00 00      mov c, 0
12634  5472             ; --- START TERMS
12635  5472 D7            push a
12636  5473 11            mov a, b
12637  5474 FA F5 FF      lea d, [bp + -11] ; $ratio
12638  5477 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12639  547A FD 39         mov c, b ; And place it into C
12640  547C 2A            mov b, [d] ; Lower Word in B
12641  547D FD 1C         sub32 ga, cb
12642  547F 27            mov b, a
12643  5480 FD 38         mov c, g
12644  5482 11            mov a, b
12645  5483 FD 7A         mov g, c
12646  5485             ; --- START FUNCTION CALL
12647  5485 FD 2E 32 00   mov32 cb, $00000032
12647  5489 00 00 
12648  548B FD AB         swp b
12649  548D D8            push b
12650  548E 07 FF 04      call get_rand
12651  5491 51 02 00      add sp, 2
12652  5494             ; --- END FUNCTION CALL
12653  5494 FD 15         add32 cb, ga
12654  5496 E4            pop a
12655  5497             ; --- END TERMS
12656  5497 E7            pop d
12657  5498 FD 43         mov [d], b
12658  549A             ; printf("Damage Control reports\n'%s' damaged by hit\n\n", get_device_name(r)); 
12659  549A             ; --- START FUNCTION CALL
12660  549A             ; --- START FUNCTION CALL
12661  549A FA 00 00      lea d, [bp + 0] ; $r
12662  549D 32            mov bl, [d]
12663  549E A7 00         mov bh, 0
12664  54A0 38 00 00      mov c, 0
12665  54A3 FD AB         swp b
12666  54A5 D8            push b
12667  54A6 07 27 59      call get_device_name
12668  54A9 51 02 00      add sp, 2
12669  54AC             ; --- END FUNCTION CALL
12670  54AC FD AB         swp b
12671  54AE D8            push b
12672  54AF 26 89 82      mov b, _s160 ; "Damage Control reports\n'%s' damaged by hit\n\n"
12673  54B2 FD AB         swp b
12674  54B4 D8            push b
12675  54B5 07 36 60      call printf
12676  54B8 51 04 00      add sp, 4
12677  54BB             ; --- END FUNCTION CALL
12678  54BB 0A BE 54      jmp _if765_exit
12679  54BE             _if765_exit:
12680  54BE 0A C1 54      jmp _if762_exit
12681  54C1             _if762_exit:
12682  54C1 0A C4 54      jmp _if748_exit
12683  54C4             _if748_exit:
12684  54C4             ; k++; 
12685  54C4 FA F9 FF      lea d, [bp + -7] ; $k
12686  54C7 2A            mov b, [d]
12687  54C8 38 00 00      mov c, 0
12688  54CB 11            mov a, b
12689  54CC FD 77         inc b
12690  54CE FD 77         inc b
12691  54D0 FA F9 FF      lea d, [bp + -7] ; $k
12692  54D3 FD 43         mov [d], b
12693  54D5 27            mov b, a
12694  54D6             _for747_update:
12695  54D6 FA FB FF      lea d, [bp + -5] ; $i
12696  54D9 32            mov bl, [d]
12697  54DA A7 00         mov bh, 0
12698  54DC 38 00 00      mov c, 0
12699  54DF FD 77         inc b
12700  54E1 FA FB FF      lea d, [bp + -5] ; $i
12701  54E4 FD 3E         mov [d], bl
12702  54E6 FD 7D         dec b
12703  54E8 0A 3A 51      jmp _for747_cond
12704  54EB             _for747_exit:
12705  54EB F9            leave
12706  54EC 09            ret
12707  54ED             
12708  54ED             repair_damage:
12709  54ED F8 00 00      enter 0 ; (push bp; mov bp, sp)
12710  54F0             ; int i; 
12711  54F0 52 02 00      sub sp, 2
12712  54F3             ; int d1; 
12713  54F3 52 02 00      sub sp, 2
12714  54F6             ; unsigned int         repair_factor;		/* Repair Factor */ 
12715  54F6 52 02 00      sub sp, 2
12716  54F9             ; repair_factor = warp; 
12717  54F9 FA FB FF      lea d, [bp + -5] ; $repair_factor
12718  54FC DA            push d
12719  54FD FA 05 00      lea d, [bp + 5] ; $warp
12720  5500 2A            mov b, [d]
12721  5501 38 00 00      mov c, 0
12722  5504 E7            pop d
12723  5505 FD 43         mov [d], b
12724  5507             ; if (warp >= 100) 
12725  5507             _if766_cond:
12726  5507 FA 05 00      lea d, [bp + 5] ; $warp
12727  550A 2A            mov b, [d]
12728  550B 38 00 00      mov c, 0
12729  550E             ; --- START RELATIONAL
12730  550E D7            push a
12731  550F 11            mov a, b
12732  5510 FD 2E 64 00   mov32 cb, $00000064
12732  5514 00 00 
12733  5516 B0            cmp a, b
12734  5517 FD 82         sgeu ; >= (unsigned)
12735  5519 E4            pop a
12736  551A             ; --- END RELATIONAL
12737  551A C0 00 00      cmp b, 0
12738  551D C6 39 55      je _if766_exit
12739  5520             _if766_TRUE:
12740  5520             ; repair_factor = TO_FIXED00(1); 
12741  5520 FA FB FF      lea d, [bp + -5] ; $repair_factor
12742  5523 DA            push d
12743  5524             ; --- START FUNCTION CALL
12744  5524 FD 2E 01 00   mov32 cb, $00000001
12744  5528 00 00 
12745  552A FD AB         swp b
12746  552C D8            push b
12747  552D 07 8B 04      call TO_FIXED00
12748  5530 51 02 00      add sp, 2
12749  5533             ; --- END FUNCTION CALL
12750  5533 E7            pop d
12751  5534 FD 43         mov [d], b
12752  5536 0A 39 55      jmp _if766_exit
12753  5539             _if766_exit:
12754  5539             ; for (i = 1; i <= 8; i++) { 
12755  5539             _for767_init:
12756  5539 FA FF FF      lea d, [bp + -1] ; $i
12757  553C DA            push d
12758  553D FD 2E 01 00   mov32 cb, $00000001
12758  5541 00 00 
12759  5543 E7            pop d
12760  5544 FD 43         mov [d], b
12761  5546             _for767_cond:
12762  5546 FA FF FF      lea d, [bp + -1] ; $i
12763  5549 2A            mov b, [d]
12764  554A 38 00 00      mov c, 0
12765  554D             ; --- START RELATIONAL
12766  554D D7            push a
12767  554E 11            mov a, b
12768  554F FD 2E 08 00   mov32 cb, $00000008
12768  5553 00 00 
12769  5555 B0            cmp a, b
12770  5556 FD 74         sle ; <= (signed)
12771  5558 E4            pop a
12772  5559             ; --- END RELATIONAL
12773  5559 C0 00 00      cmp b, 0
12774  555C C6 E1 56      je _for767_exit
12775  555F             _for767_block:
12776  555F             ; if (damage[i] < 0) { 
12777  555F             _if768_cond:
12778  555F 3B 30 6E      mov d, _damage_data ; $damage
12779  5562 D7            push a
12780  5563 DA            push d
12781  5564 FA FF FF      lea d, [bp + -1] ; $i
12782  5567 2A            mov b, [d]
12783  5568 38 00 00      mov c, 0
12784  556B E7            pop d
12785  556C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12786  5570 E4            pop a
12787  5571 2A            mov b, [d]
12788  5572 38 00 00      mov c, 0
12789  5575             ; --- START RELATIONAL
12790  5575 D7            push a
12791  5576 11            mov a, b
12792  5577 FD 2E 00 00   mov32 cb, $00000000
12792  557B 00 00 
12793  557D B0            cmp a, b
12794  557E FD 73         slt ; < (signed)
12795  5580 E4            pop a
12796  5581             ; --- END RELATIONAL
12797  5581 C0 00 00      cmp b, 0
12798  5584 C6 CE 56      je _if768_exit
12799  5587             _if768_TRUE:
12800  5587             ; damage[i] = damage[i] + repair_factor; 
12801  5587 3B 30 6E      mov d, _damage_data ; $damage
12802  558A D7            push a
12803  558B DA            push d
12804  558C FA FF FF      lea d, [bp + -1] ; $i
12805  558F 2A            mov b, [d]
12806  5590 38 00 00      mov c, 0
12807  5593 E7            pop d
12808  5594 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12809  5598 E4            pop a
12810  5599 DA            push d
12811  559A 3B 30 6E      mov d, _damage_data ; $damage
12812  559D D7            push a
12813  559E DA            push d
12814  559F FA FF FF      lea d, [bp + -1] ; $i
12815  55A2 2A            mov b, [d]
12816  55A3 38 00 00      mov c, 0
12817  55A6 E7            pop d
12818  55A7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12819  55AB E4            pop a
12820  55AC 2A            mov b, [d]
12821  55AD 38 00 00      mov c, 0
12822  55B0             ; --- START TERMS
12823  55B0 D7            push a
12824  55B1 11            mov a, b
12825  55B2 FA FB FF      lea d, [bp + -5] ; $repair_factor
12826  55B5 2A            mov b, [d]
12827  55B6 38 00 00      mov c, 0
12828  55B9 56            add b, a
12829  55BA E4            pop a
12830  55BB             ; --- END TERMS
12831  55BB E7            pop d
12832  55BC FD 43         mov [d], b
12833  55BE             ; if (damage[i] > -10 && damage[i] < 0)	/* -0.1 */ 
12834  55BE             _if769_cond:
12835  55BE 3B 30 6E      mov d, _damage_data ; $damage
12836  55C1 D7            push a
12837  55C2 DA            push d
12838  55C3 FA FF FF      lea d, [bp + -1] ; $i
12839  55C6 2A            mov b, [d]
12840  55C7 38 00 00      mov c, 0
12841  55CA E7            pop d
12842  55CB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12843  55CF E4            pop a
12844  55D0 2A            mov b, [d]
12845  55D1 38 00 00      mov c, 0
12846  55D4             ; --- START RELATIONAL
12847  55D4 D7            push a
12848  55D5 11            mov a, b
12849  55D6 FD 2E F6 FF   mov32 cb, $fffffff6
12849  55DA FF FF 
12850  55DC B0            cmp a, b
12851  55DD FD 7F         sgt ; >
12852  55DF E4            pop a
12853  55E0             ; --- END RELATIONAL
12854  55E0             ; --- START LOGICAL AND
12855  55E0 D7            push a
12856  55E1 11            mov a, b
12857  55E2 3B 30 6E      mov d, _damage_data ; $damage
12858  55E5 D7            push a
12859  55E6 DA            push d
12860  55E7 FA FF FF      lea d, [bp + -1] ; $i
12861  55EA 2A            mov b, [d]
12862  55EB 38 00 00      mov c, 0
12863  55EE E7            pop d
12864  55EF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12865  55F3 E4            pop a
12866  55F4 2A            mov b, [d]
12867  55F5 38 00 00      mov c, 0
12868  55F8             ; --- START RELATIONAL
12869  55F8 D7            push a
12870  55F9 11            mov a, b
12871  55FA FD 2E 00 00   mov32 cb, $00000000
12871  55FE 00 00 
12872  5600 B0            cmp a, b
12873  5601 FD 73         slt ; < (signed)
12874  5603 E4            pop a
12875  5604             ; --- END RELATIONAL
12876  5604 FD A7         sand a, b
12877  5606 E4            pop a
12878  5607             ; --- END LOGICAL AND
12879  5607 C0 00 00      cmp b, 0
12880  560A C6 2C 56      je _if769_else
12881  560D             _if769_TRUE:
12882  560D             ; damage[i] = -10; 
12883  560D 3B 30 6E      mov d, _damage_data ; $damage
12884  5610 D7            push a
12885  5611 DA            push d
12886  5612 FA FF FF      lea d, [bp + -1] ; $i
12887  5615 2A            mov b, [d]
12888  5616 38 00 00      mov c, 0
12889  5619 E7            pop d
12890  561A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12891  561E E4            pop a
12892  561F DA            push d
12893  5620 FD 2E F6 FF   mov32 cb, $fffffff6
12893  5624 FF FF 
12894  5626 E7            pop d
12895  5627 FD 43         mov [d], b
12896  5629 0A CB 56      jmp _if769_exit
12897  562C             _if769_else:
12898  562C             ; if (damage[i] >= 0) { 
12899  562C             _if770_cond:
12900  562C 3B 30 6E      mov d, _damage_data ; $damage
12901  562F D7            push a
12902  5630 DA            push d
12903  5631 FA FF FF      lea d, [bp + -1] ; $i
12904  5634 2A            mov b, [d]
12905  5635 38 00 00      mov c, 0
12906  5638 E7            pop d
12907  5639 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12908  563D E4            pop a
12909  563E 2A            mov b, [d]
12910  563F 38 00 00      mov c, 0
12911  5642             ; --- START RELATIONAL
12912  5642 D7            push a
12913  5643 11            mov a, b
12914  5644 FD 2E 00 00   mov32 cb, $00000000
12914  5648 00 00 
12915  564A B0            cmp a, b
12916  564B FD 80         sge ; >=
12917  564D E4            pop a
12918  564E             ; --- END RELATIONAL
12919  564E C0 00 00      cmp b, 0
12920  5651 C6 CB 56      je _if770_exit
12921  5654             _if770_TRUE:
12922  5654             ; if (d1 != 1) { 
12923  5654             _if771_cond:
12924  5654 FA FD FF      lea d, [bp + -3] ; $d1
12925  5657 2A            mov b, [d]
12926  5658 38 00 00      mov c, 0
12927  565B             ; --- START RELATIONAL
12928  565B D7            push a
12929  565C 11            mov a, b
12930  565D FD 2E 01 00   mov32 cb, $00000001
12930  5661 00 00 
12931  5663 B0            cmp a, b
12932  5664 FD 72         sneq ; !=
12933  5666 E4            pop a
12934  5667             ; --- END RELATIONAL
12935  5667 C0 00 00      cmp b, 0
12936  566A C6 8D 56      je _if771_exit
12937  566D             _if771_TRUE:
12938  566D             ; d1 = 1; 
12939  566D FA FD FF      lea d, [bp + -3] ; $d1
12940  5670 DA            push d
12941  5671 FD 2E 01 00   mov32 cb, $00000001
12941  5675 00 00 
12942  5677 E7            pop d
12943  5678 FD 43         mov [d], b
12944  567A             ; puts(dcr_1); 
12945  567A             ; --- START FUNCTION CALL
12946  567A 3B 43 6F      mov d, _dcr_1 ; $dcr_1
12947  567D 2A            mov b, [d]
12948  567E 38 00 00      mov c, 0
12949  5681 FD AB         swp b
12950  5683 D8            push b
12951  5684 07 47 69      call puts
12952  5687 51 02 00      add sp, 2
12953  568A             ; --- END FUNCTION CALL
12954  568A 0A 8D 56      jmp _if771_exit
12955  568D             _if771_exit:
12956  568D             ; printf("    %s repair completed\n\n", 
12957  568D             ; --- START FUNCTION CALL
12958  568D             ; --- START FUNCTION CALL
12959  568D FA FF FF      lea d, [bp + -1] ; $i
12960  5690 2A            mov b, [d]
12961  5691 38 00 00      mov c, 0
12962  5694 FD AB         swp b
12963  5696 D8            push b
12964  5697 07 27 59      call get_device_name
12965  569A 51 02 00      add sp, 2
12966  569D             ; --- END FUNCTION CALL
12967  569D FD AB         swp b
12968  569F D8            push b
12969  56A0 26 B6 82      mov b, _s161 ; "    %s repair completed\n\n"
12970  56A3 FD AB         swp b
12971  56A5 D8            push b
12972  56A6 07 36 60      call printf
12973  56A9 51 04 00      add sp, 4
12974  56AC             ; --- END FUNCTION CALL
12975  56AC             ; damage[i] = 0; 
12976  56AC 3B 30 6E      mov d, _damage_data ; $damage
12977  56AF D7            push a
12978  56B0 DA            push d
12979  56B1 FA FF FF      lea d, [bp + -1] ; $i
12980  56B4 2A            mov b, [d]
12981  56B5 38 00 00      mov c, 0
12982  56B8 E7            pop d
12983  56B9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12984  56BD E4            pop a
12985  56BE DA            push d
12986  56BF FD 2E 00 00   mov32 cb, $00000000
12986  56C3 00 00 
12987  56C5 E7            pop d
12988  56C6 FD 43         mov [d], b
12989  56C8 0A CB 56      jmp _if770_exit
12990  56CB             _if770_exit:
12991  56CB             _if769_exit:
12992  56CB 0A CE 56      jmp _if768_exit
12993  56CE             _if768_exit:
12994  56CE             _for767_update:
12995  56CE FA FF FF      lea d, [bp + -1] ; $i
12996  56D1 2A            mov b, [d]
12997  56D2 38 00 00      mov c, 0
12998  56D5 11            mov a, b
12999  56D6 FD 77         inc b
13000  56D8 FA FF FF      lea d, [bp + -1] ; $i
13001  56DB FD 43         mov [d], b
13002  56DD 27            mov b, a
13003  56DE 0A 46 55      jmp _for767_cond
13004  56E1             _for767_exit:
13005  56E1             ; unsigned char        r; 
13006  56E1 52 01 00      sub sp, 1
13007  56E4             ; if (get_rand(10) <= 2) { 
13008  56E4             _if772_cond:
13009  56E4             ; --- START FUNCTION CALL
13010  56E4 FD 2E 0A 00   mov32 cb, $0000000a
13010  56E8 00 00 
13011  56EA FD AB         swp b
13012  56EC D8            push b
13013  56ED 07 FF 04      call get_rand
13014  56F0 51 02 00      add sp, 2
13015  56F3             ; --- END FUNCTION CALL
13016  56F3             ; --- START RELATIONAL
13017  56F3 D7            push a
13018  56F4 11            mov a, b
13019  56F5 FD 2E 02 00   mov32 cb, $00000002
13019  56F9 00 00 
13020  56FB B0            cmp a, b
13021  56FC FD 74         sle ; <= (signed)
13022  56FE E4            pop a
13023  56FF             ; --- END RELATIONAL
13024  56FF C0 00 00      cmp b, 0
13025  5702 C6 31 58      je _if772_exit
13026  5705             _if772_TRUE:
13027  5705             ; r = rand8(); 
13028  5705 FA FA FF      lea d, [bp + -6] ; $r
13029  5708 DA            push d
13030  5709             ; --- START FUNCTION CALL
13031  5709 07 6F 05      call rand8
13032  570C E7            pop d
13033  570D FD 3E         mov [d], bl
13034  570F             ; if (get_rand(10) < 6) { 
13035  570F             _if773_cond:
13036  570F             ; --- START FUNCTION CALL
13037  570F FD 2E 0A 00   mov32 cb, $0000000a
13037  5713 00 00 
13038  5715 FD AB         swp b
13039  5717 D8            push b
13040  5718 07 FF 04      call get_rand
13041  571B 51 02 00      add sp, 2
13042  571E             ; --- END FUNCTION CALL
13043  571E             ; --- START RELATIONAL
13044  571E D7            push a
13045  571F 11            mov a, b
13046  5720 FD 2E 06 00   mov32 cb, $00000006
13046  5724 00 00 
13047  5726 B0            cmp a, b
13048  5727 FD 73         slt ; < (signed)
13049  5729 E4            pop a
13050  572A             ; --- END RELATIONAL
13051  572A C0 00 00      cmp b, 0
13052  572D C6 B2 57      je _if773_else
13053  5730             _if773_TRUE:
13054  5730             ; damage[r] =damage[r]- (get_rand(500) + 100); 
13055  5730 3B 30 6E      mov d, _damage_data ; $damage
13056  5733 D7            push a
13057  5734 DA            push d
13058  5735 FA FA FF      lea d, [bp + -6] ; $r
13059  5738 32            mov bl, [d]
13060  5739 A7 00         mov bh, 0
13061  573B 38 00 00      mov c, 0
13062  573E E7            pop d
13063  573F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13064  5743 E4            pop a
13065  5744 DA            push d
13066  5745 3B 30 6E      mov d, _damage_data ; $damage
13067  5748 D7            push a
13068  5749 DA            push d
13069  574A FA FA FF      lea d, [bp + -6] ; $r
13070  574D 32            mov bl, [d]
13071  574E A7 00         mov bh, 0
13072  5750 38 00 00      mov c, 0
13073  5753 E7            pop d
13074  5754 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13075  5758 E4            pop a
13076  5759 2A            mov b, [d]
13077  575A 38 00 00      mov c, 0
13078  575D             ; --- START TERMS
13079  575D D7            push a
13080  575E 11            mov a, b
13081  575F             ; --- START FUNCTION CALL
13082  575F FD 2E F4 01   mov32 cb, $000001f4
13082  5763 00 00 
13083  5765 FD AB         swp b
13084  5767 D8            push b
13085  5768 07 FF 04      call get_rand
13086  576B 51 02 00      add sp, 2
13087  576E             ; --- END FUNCTION CALL
13088  576E             ; --- START TERMS
13089  576E D7            push a
13090  576F 11            mov a, b
13091  5770 FD 2E 64 00   mov32 cb, $00000064
13091  5774 00 00 
13092  5776 56            add b, a
13093  5777 E4            pop a
13094  5778             ; --- END TERMS
13095  5778 60            sub a, b
13096  5779 27            mov b, a
13097  577A E4            pop a
13098  577B             ; --- END TERMS
13099  577B E7            pop d
13100  577C FD 43         mov [d], b
13101  577E             ; puts(dcr_1); 
13102  577E             ; --- START FUNCTION CALL
13103  577E 3B 43 6F      mov d, _dcr_1 ; $dcr_1
13104  5781 2A            mov b, [d]
13105  5782 38 00 00      mov c, 0
13106  5785 FD AB         swp b
13107  5787 D8            push b
13108  5788 07 47 69      call puts
13109  578B 51 02 00      add sp, 2
13110  578E             ; --- END FUNCTION CALL
13111  578E             ; printf("    %s damaged\n\n", get_device_name(r)); 
13112  578E             ; --- START FUNCTION CALL
13113  578E             ; --- START FUNCTION CALL
13114  578E FA FA FF      lea d, [bp + -6] ; $r
13115  5791 32            mov bl, [d]
13116  5792 A7 00         mov bh, 0
13117  5794 38 00 00      mov c, 0
13118  5797 FD AB         swp b
13119  5799 D8            push b
13120  579A 07 27 59      call get_device_name
13121  579D 51 02 00      add sp, 2
13122  57A0             ; --- END FUNCTION CALL
13123  57A0 FD AB         swp b
13124  57A2 D8            push b
13125  57A3 26 D0 82      mov b, _s162 ; "    %s damaged\n\n"
13126  57A6 FD AB         swp b
13127  57A8 D8            push b
13128  57A9 07 36 60      call printf
13129  57AC 51 04 00      add sp, 4
13130  57AF             ; --- END FUNCTION CALL
13131  57AF 0A 2E 58      jmp _if773_exit
13132  57B2             _if773_else:
13133  57B2             ; damage[r] = damage[r] + get_rand(300) + 100; 
13134  57B2 3B 30 6E      mov d, _damage_data ; $damage
13135  57B5 D7            push a
13136  57B6 DA            push d
13137  57B7 FA FA FF      lea d, [bp + -6] ; $r
13138  57BA 32            mov bl, [d]
13139  57BB A7 00         mov bh, 0
13140  57BD 38 00 00      mov c, 0
13141  57C0 E7            pop d
13142  57C1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13143  57C5 E4            pop a
13144  57C6 DA            push d
13145  57C7 3B 30 6E      mov d, _damage_data ; $damage
13146  57CA D7            push a
13147  57CB DA            push d
13148  57CC FA FA FF      lea d, [bp + -6] ; $r
13149  57CF 32            mov bl, [d]
13150  57D0 A7 00         mov bh, 0
13151  57D2 38 00 00      mov c, 0
13152  57D5 E7            pop d
13153  57D6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13154  57DA E4            pop a
13155  57DB 2A            mov b, [d]
13156  57DC 38 00 00      mov c, 0
13157  57DF             ; --- START TERMS
13158  57DF D7            push a
13159  57E0 11            mov a, b
13160  57E1             ; --- START FUNCTION CALL
13161  57E1 FD 2E 2C 01   mov32 cb, $0000012c
13161  57E5 00 00 
13162  57E7 FD AB         swp b
13163  57E9 D8            push b
13164  57EA 07 FF 04      call get_rand
13165  57ED 51 02 00      add sp, 2
13166  57F0             ; --- END FUNCTION CALL
13167  57F0 56            add b, a
13168  57F1 11            mov a, b
13169  57F2 FD 2E 64 00   mov32 cb, $00000064
13169  57F6 00 00 
13170  57F8 56            add b, a
13171  57F9 E4            pop a
13172  57FA             ; --- END TERMS
13173  57FA E7            pop d
13174  57FB FD 43         mov [d], b
13175  57FD             ; puts(dcr_1); 
13176  57FD             ; --- START FUNCTION CALL
13177  57FD 3B 43 6F      mov d, _dcr_1 ; $dcr_1
13178  5800 2A            mov b, [d]
13179  5801 38 00 00      mov c, 0
13180  5804 FD AB         swp b
13181  5806 D8            push b
13182  5807 07 47 69      call puts
13183  580A 51 02 00      add sp, 2
13184  580D             ; --- END FUNCTION CALL
13185  580D             ; printf("    %s state of repair improved\n\n", 
13186  580D             ; --- START FUNCTION CALL
13187  580D             ; --- START FUNCTION CALL
13188  580D FA FA FF      lea d, [bp + -6] ; $r
13189  5810 32            mov bl, [d]
13190  5811 A7 00         mov bh, 0
13191  5813 38 00 00      mov c, 0
13192  5816 FD AB         swp b
13193  5818 D8            push b
13194  5819 07 27 59      call get_device_name
13195  581C 51 02 00      add sp, 2
13196  581F             ; --- END FUNCTION CALL
13197  581F FD AB         swp b
13198  5821 D8            push b
13199  5822 26 E1 82      mov b, _s163 ; "    %s state of repair improved\n\n"
13200  5825 FD AB         swp b
13201  5827 D8            push b
13202  5828 07 36 60      call printf
13203  582B 51 04 00      add sp, 4
13204  582E             ; --- END FUNCTION CALL
13205  582E             _if773_exit:
13206  582E 0A 31 58      jmp _if772_exit
13207  5831             _if772_exit:
13208  5831 F9            leave
13209  5832 09            ret
13210  5833             
13211  5833             find_set_empty_place:
13212  5833 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13213  5836             ; unsigned char        r1, r2; 
13214  5836 52 01 00      sub sp, 1
13215  5839 52 01 00      sub sp, 1
13216  583C             ; do { 
13217  583C             _do774_block:
13218  583C             ; r1 = rand8(); 
13219  583C FA 00 00      lea d, [bp + 0] ; $r1
13220  583F DA            push d
13221  5840             ; --- START FUNCTION CALL
13222  5840 07 6F 05      call rand8
13223  5843 E7            pop d
13224  5844 FD 3E         mov [d], bl
13225  5846             ; r2 = rand8(); 
13226  5846 FA FF FF      lea d, [bp + -1] ; $r2
13227  5849 DA            push d
13228  584A             ; --- START FUNCTION CALL
13229  584A 07 6F 05      call rand8
13230  584D E7            pop d
13231  584E FD 3E         mov [d], bl
13232  5850             ; } while (quad[r1+-1][r2+-1] != 		0        ); 
13233  5850             _do774_cond:
13234  5850 3B 4A 6E      mov d, _quad_data ; $quad
13235  5853 D7            push a
13236  5854 DA            push d
13237  5855 FA 00 00      lea d, [bp + 0] ; $r1
13238  5858 32            mov bl, [d]
13239  5859 A7 00         mov bh, 0
13240  585B 38 00 00      mov c, 0
13241  585E             ; --- START TERMS
13242  585E D7            push a
13243  585F 11            mov a, b
13244  5860 FD 2E FF FF   mov32 cb, $ffffffff
13244  5864 FF FF 
13245  5866 56            add b, a
13246  5867 E4            pop a
13247  5868             ; --- END TERMS
13248  5868 E7            pop d
13249  5869 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
13250  586D DA            push d
13251  586E FA FF FF      lea d, [bp + -1] ; $r2
13252  5871 32            mov bl, [d]
13253  5872 A7 00         mov bh, 0
13254  5874 38 00 00      mov c, 0
13255  5877             ; --- START TERMS
13256  5877 D7            push a
13257  5878 11            mov a, b
13258  5879 FD 2E FF FF   mov32 cb, $ffffffff
13258  587D FF FF 
13259  587F 56            add b, a
13260  5880 E4            pop a
13261  5881             ; --- END TERMS
13262  5881 E7            pop d
13263  5882 5A            add d, b
13264  5883 E4            pop a
13265  5884 32            mov bl, [d]
13266  5885 A7 00         mov bh, 0
13267  5887 38 00 00      mov c, 0
13268  588A             ; --- START RELATIONAL
13269  588A D7            push a
13270  588B 11            mov a, b
13271  588C FD 2E 00 00   mov32 cb, $00000000
13271  5890 00 00 
13272  5892 B0            cmp a, b
13273  5893 FD 72         sneq ; !=
13274  5895 E4            pop a
13275  5896             ; --- END RELATIONAL
13276  5896 C0 01 00      cmp b, 1
13277  5899 C6 3C 58      je _do774_block
13278  589C             _do774_exit:
13279  589C             ; quad[r1+-1][r2+-1] = t; 
13280  589C 3B 4A 6E      mov d, _quad_data ; $quad
13281  589F D7            push a
13282  58A0 DA            push d
13283  58A1 FA 00 00      lea d, [bp + 0] ; $r1
13284  58A4 32            mov bl, [d]
13285  58A5 A7 00         mov bh, 0
13286  58A7 38 00 00      mov c, 0
13287  58AA             ; --- START TERMS
13288  58AA D7            push a
13289  58AB 11            mov a, b
13290  58AC FD 2E FF FF   mov32 cb, $ffffffff
13290  58B0 FF FF 
13291  58B2 56            add b, a
13292  58B3 E4            pop a
13293  58B4             ; --- END TERMS
13294  58B4 E7            pop d
13295  58B5 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
13296  58B9 DA            push d
13297  58BA FA FF FF      lea d, [bp + -1] ; $r2
13298  58BD 32            mov bl, [d]
13299  58BE A7 00         mov bh, 0
13300  58C0 38 00 00      mov c, 0
13301  58C3             ; --- START TERMS
13302  58C3 D7            push a
13303  58C4 11            mov a, b
13304  58C5 FD 2E FF FF   mov32 cb, $ffffffff
13304  58C9 FF FF 
13305  58CB 56            add b, a
13306  58CC E4            pop a
13307  58CD             ; --- END TERMS
13308  58CD E7            pop d
13309  58CE 5A            add d, b
13310  58CF E4            pop a
13311  58D0 DA            push d
13312  58D1 FA 05 00      lea d, [bp + 5] ; $t
13313  58D4 32            mov bl, [d]
13314  58D5 A7 00         mov bh, 0
13315  58D7 38 00 00      mov c, 0
13316  58DA E7            pop d
13317  58DB FD 3E         mov [d], bl
13318  58DD             ; if (z1) 
13319  58DD             _if775_cond:
13320  58DD FA 06 00      lea d, [bp + 6] ; $z1
13321  58E0 2A            mov b, [d]
13322  58E1 38 00 00      mov c, 0
13323  58E4 C0 00 00      cmp b, 0
13324  58E7 C6 01 59      je _if775_exit
13325  58EA             _if775_TRUE:
13326  58EA             ; *z1 = r1; 
13327  58EA FA 06 00      lea d, [bp + 6] ; $z1
13328  58ED 2A            mov b, [d]
13329  58EE 38 00 00      mov c, 0
13330  58F1 D8            push b
13331  58F2 FA 00 00      lea d, [bp + 0] ; $r1
13332  58F5 32            mov bl, [d]
13333  58F6 A7 00         mov bh, 0
13334  58F8 38 00 00      mov c, 0
13335  58FB E7            pop d
13336  58FC FD 3E         mov [d], bl
13337  58FE 0A 01 59      jmp _if775_exit
13338  5901             _if775_exit:
13339  5901             ; if (z2) 
13340  5901             _if776_cond:
13341  5901 FA 08 00      lea d, [bp + 8] ; $z2
13342  5904 2A            mov b, [d]
13343  5905 38 00 00      mov c, 0
13344  5908 C0 00 00      cmp b, 0
13345  590B C6 25 59      je _if776_exit
13346  590E             _if776_TRUE:
13347  590E             ; *z2 = r2; 
13348  590E FA 08 00      lea d, [bp + 8] ; $z2
13349  5911 2A            mov b, [d]
13350  5912 38 00 00      mov c, 0
13351  5915 D8            push b
13352  5916 FA FF FF      lea d, [bp + -1] ; $r2
13353  5919 32            mov bl, [d]
13354  591A A7 00         mov bh, 0
13355  591C 38 00 00      mov c, 0
13356  591F E7            pop d
13357  5920 FD 3E         mov [d], bl
13358  5922 0A 25 59      jmp _if776_exit
13359  5925             _if776_exit:
13360  5925 F9            leave
13361  5926 09            ret
13362  5927             
13363  5927             get_device_name:
13364  5927 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13365  592A             ; if (n < 0 || n > 8) 
13366  592A             _if777_cond:
13367  592A FA 05 00      lea d, [bp + 5] ; $n
13368  592D 2A            mov b, [d]
13369  592E 38 00 00      mov c, 0
13370  5931             ; --- START RELATIONAL
13371  5931 D7            push a
13372  5932 11            mov a, b
13373  5933 FD 2E 00 00   mov32 cb, $00000000
13373  5937 00 00 
13374  5939 B0            cmp a, b
13375  593A FD 73         slt ; < (signed)
13376  593C E4            pop a
13377  593D             ; --- END RELATIONAL
13378  593D             ; --- START LOGICAL OR
13379  593D D7            push a
13380  593E 11            mov a, b
13381  593F FA 05 00      lea d, [bp + 5] ; $n
13382  5942 2A            mov b, [d]
13383  5943 38 00 00      mov c, 0
13384  5946             ; --- START RELATIONAL
13385  5946 D7            push a
13386  5947 11            mov a, b
13387  5948 FD 2E 08 00   mov32 cb, $00000008
13387  594C 00 00 
13388  594E B0            cmp a, b
13389  594F FD 7F         sgt ; >
13390  5951 E4            pop a
13391  5952             ; --- END RELATIONAL
13392  5952 FD A8         sor a, b ; ||
13393  5954 E4            pop a
13394  5955             ; --- END LOGICAL OR
13395  5955 C0 00 00      cmp b, 0
13396  5958 C6 6B 59      je _if777_exit
13397  595B             _if777_TRUE:
13398  595B             ; n = 0; 
13399  595B FA 05 00      lea d, [bp + 5] ; $n
13400  595E DA            push d
13401  595F FD 2E 00 00   mov32 cb, $00000000
13401  5963 00 00 
13402  5965 E7            pop d
13403  5966 FD 43         mov [d], b
13404  5968 0A 6B 59      jmp _if777_exit
13405  596B             _if777_exit:
13406  596B             ; return device_name[n]; 
13407  596B 3B 06 6F      mov d, _device_name_data ; $device_name
13408  596E D7            push a
13409  596F DA            push d
13410  5970 FA 05 00      lea d, [bp + 5] ; $n
13411  5973 2A            mov b, [d]
13412  5974 38 00 00      mov c, 0
13413  5977 E7            pop d
13414  5978 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13415  597C E4            pop a
13416  597D 2A            mov b, [d]
13417  597E 38 00 00      mov c, 0
13418  5981 F9            leave
13419  5982 09            ret
13420  5983             
13421  5983             quadrant_name:
13422  5983 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13423  5986             ; static char *sect_name[] = { "", " I", " II", " III", " IV" }; 
13424  5986 52 14 00      sub sp, 20
13425  5989             ; if (y < 1 || y > 8 || x < 1 || x > 8) 
13426  5989             _if778_cond:
13427  5989 FA 06 00      lea d, [bp + 6] ; $y
13428  598C 32            mov bl, [d]
13429  598D A7 00         mov bh, 0
13430  598F 38 00 00      mov c, 0
13431  5992             ; --- START RELATIONAL
13432  5992 D7            push a
13433  5993 11            mov a, b
13434  5994 FD 2E 01 00   mov32 cb, $00000001
13434  5998 00 00 
13435  599A B0            cmp a, b
13436  599B FD 75         slu ; < (unsigned)
13437  599D E4            pop a
13438  599E             ; --- END RELATIONAL
13439  599E             ; --- START LOGICAL OR
13440  599E D7            push a
13441  599F 11            mov a, b
13442  59A0 FA 06 00      lea d, [bp + 6] ; $y
13443  59A3 32            mov bl, [d]
13444  59A4 A7 00         mov bh, 0
13445  59A6 38 00 00      mov c, 0
13446  59A9             ; --- START RELATIONAL
13447  59A9 D7            push a
13448  59AA 11            mov a, b
13449  59AB FD 2E 08 00   mov32 cb, $00000008
13449  59AF 00 00 
13450  59B1 B0            cmp a, b
13451  59B2 FD 81         sgu ; > (unsigned)
13452  59B4 E4            pop a
13453  59B5             ; --- END RELATIONAL
13454  59B5 FD A8         sor a, b ; ||
13455  59B7 11            mov a, b
13456  59B8 FA 07 00      lea d, [bp + 7] ; $x
13457  59BB 32            mov bl, [d]
13458  59BC A7 00         mov bh, 0
13459  59BE 38 00 00      mov c, 0
13460  59C1             ; --- START RELATIONAL
13461  59C1 D7            push a
13462  59C2 11            mov a, b
13463  59C3 FD 2E 01 00   mov32 cb, $00000001
13463  59C7 00 00 
13464  59C9 B0            cmp a, b
13465  59CA FD 75         slu ; < (unsigned)
13466  59CC E4            pop a
13467  59CD             ; --- END RELATIONAL
13468  59CD FD A8         sor a, b ; ||
13469  59CF 11            mov a, b
13470  59D0 FA 07 00      lea d, [bp + 7] ; $x
13471  59D3 32            mov bl, [d]
13472  59D4 A7 00         mov bh, 0
13473  59D6 38 00 00      mov c, 0
13474  59D9             ; --- START RELATIONAL
13475  59D9 D7            push a
13476  59DA 11            mov a, b
13477  59DB FD 2E 08 00   mov32 cb, $00000008
13477  59DF 00 00 
13478  59E1 B0            cmp a, b
13479  59E2 FD 81         sgu ; > (unsigned)
13480  59E4 E4            pop a
13481  59E5             ; --- END RELATIONAL
13482  59E5 FD A8         sor a, b ; ||
13483  59E7 E4            pop a
13484  59E8             ; --- END LOGICAL OR
13485  59E8 C0 00 00      cmp b, 0
13486  59EB C6 07 5A      je _if778_exit
13487  59EE             _if778_TRUE:
13488  59EE             ; strcpy(quadname, "Unknown"); 
13489  59EE             ; --- START FUNCTION CALL
13490  59EE 26 13 83      mov b, _s168 ; "Unknown"
13491  59F1 FD AB         swp b
13492  59F3 D8            push b
13493  59F4 3B 8A 6E      mov d, _quadname_data ; $quadname
13494  59F7 2D            mov b, d
13495  59F8 38 00 00      mov c, 0
13496  59FB FD AB         swp b
13497  59FD D8            push b
13498  59FE 07 7E 5E      call strcpy
13499  5A01 51 04 00      add sp, 4
13500  5A04             ; --- END FUNCTION CALL
13501  5A04 0A 07 5A      jmp _if778_exit
13502  5A07             _if778_exit:
13503  5A07             ; if (x <= 4) 
13504  5A07             _if779_cond:
13505  5A07 FA 07 00      lea d, [bp + 7] ; $x
13506  5A0A 32            mov bl, [d]
13507  5A0B A7 00         mov bh, 0
13508  5A0D 38 00 00      mov c, 0
13509  5A10             ; --- START RELATIONAL
13510  5A10 D7            push a
13511  5A11 11            mov a, b
13512  5A12 FD 2E 04 00   mov32 cb, $00000004
13512  5A16 00 00 
13513  5A18 B0            cmp a, b
13514  5A19 FD 76         sleu ; <= (unsigned)
13515  5A1B E4            pop a
13516  5A1C             ; --- END RELATIONAL
13517  5A1C C0 00 00      cmp b, 0
13518  5A1F C6 50 5A      je _if779_else
13519  5A22             _if779_TRUE:
13520  5A22             ; strcpy(quadname, quad_name[y]); 
13521  5A22             ; --- START FUNCTION CALL
13522  5A22 3B C0 6E      mov d, _quad_name_data ; $quad_name
13523  5A25 D7            push a
13524  5A26 DA            push d
13525  5A27 FA 06 00      lea d, [bp + 6] ; $y
13526  5A2A 32            mov bl, [d]
13527  5A2B A7 00         mov bh, 0
13528  5A2D 38 00 00      mov c, 0
13529  5A30 E7            pop d
13530  5A31 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13531  5A35 E4            pop a
13532  5A36 2A            mov b, [d]
13533  5A37 38 00 00      mov c, 0
13534  5A3A FD AB         swp b
13535  5A3C D8            push b
13536  5A3D 3B 8A 6E      mov d, _quadname_data ; $quadname
13537  5A40 2D            mov b, d
13538  5A41 38 00 00      mov c, 0
13539  5A44 FD AB         swp b
13540  5A46 D8            push b
13541  5A47 07 7E 5E      call strcpy
13542  5A4A 51 04 00      add sp, 4
13543  5A4D             ; --- END FUNCTION CALL
13544  5A4D 0A 85 5A      jmp _if779_exit
13545  5A50             _if779_else:
13546  5A50             ; strcpy(quadname, quad_name[y + 8]); 
13547  5A50             ; --- START FUNCTION CALL
13548  5A50 3B C0 6E      mov d, _quad_name_data ; $quad_name
13549  5A53 D7            push a
13550  5A54 DA            push d
13551  5A55 FA 06 00      lea d, [bp + 6] ; $y
13552  5A58 32            mov bl, [d]
13553  5A59 A7 00         mov bh, 0
13554  5A5B 38 00 00      mov c, 0
13555  5A5E             ; --- START TERMS
13556  5A5E D7            push a
13557  5A5F 11            mov a, b
13558  5A60 FD 2E 08 00   mov32 cb, $00000008
13558  5A64 00 00 
13559  5A66 56            add b, a
13560  5A67 E4            pop a
13561  5A68             ; --- END TERMS
13562  5A68 E7            pop d
13563  5A69 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13564  5A6D E4            pop a
13565  5A6E 2A            mov b, [d]
13566  5A6F 38 00 00      mov c, 0
13567  5A72 FD AB         swp b
13568  5A74 D8            push b
13569  5A75 3B 8A 6E      mov d, _quadname_data ; $quadname
13570  5A78 2D            mov b, d
13571  5A79 38 00 00      mov c, 0
13572  5A7C FD AB         swp b
13573  5A7E D8            push b
13574  5A7F 07 7E 5E      call strcpy
13575  5A82 51 04 00      add sp, 4
13576  5A85             ; --- END FUNCTION CALL
13577  5A85             _if779_exit:
13578  5A85             ; if (small != 1) { 
13579  5A85             _if780_cond:
13580  5A85 FA 05 00      lea d, [bp + 5] ; $small
13581  5A88 32            mov bl, [d]
13582  5A89 A7 00         mov bh, 0
13583  5A8B 38 00 00      mov c, 0
13584  5A8E             ; --- START RELATIONAL
13585  5A8E D7            push a
13586  5A8F 11            mov a, b
13587  5A90 FD 2E 01 00   mov32 cb, $00000001
13587  5A94 00 00 
13588  5A96 B0            cmp a, b
13589  5A97 FD 72         sneq ; !=
13590  5A99 E4            pop a
13591  5A9A             ; --- END RELATIONAL
13592  5A9A C0 00 00      cmp b, 0
13593  5A9D C6 07 5B      je _if780_exit
13594  5AA0             _if780_TRUE:
13595  5AA0             ; if (x > 4) 
13596  5AA0             _if781_cond:
13597  5AA0 FA 07 00      lea d, [bp + 7] ; $x
13598  5AA3 32            mov bl, [d]
13599  5AA4 A7 00         mov bh, 0
13600  5AA6 38 00 00      mov c, 0
13601  5AA9             ; --- START RELATIONAL
13602  5AA9 D7            push a
13603  5AAA 11            mov a, b
13604  5AAB FD 2E 04 00   mov32 cb, $00000004
13604  5AAF 00 00 
13605  5AB1 B0            cmp a, b
13606  5AB2 FD 81         sgu ; > (unsigned)
13607  5AB4 E4            pop a
13608  5AB5             ; --- END RELATIONAL
13609  5AB5 C0 00 00      cmp b, 0
13610  5AB8 C6 D9 5A      je _if781_exit
13611  5ABB             _if781_TRUE:
13612  5ABB             ; x = x - 4; 
13613  5ABB FA 07 00      lea d, [bp + 7] ; $x
13614  5ABE DA            push d
13615  5ABF FA 07 00      lea d, [bp + 7] ; $x
13616  5AC2 32            mov bl, [d]
13617  5AC3 A7 00         mov bh, 0
13618  5AC5 38 00 00      mov c, 0
13619  5AC8             ; --- START TERMS
13620  5AC8 D7            push a
13621  5AC9 11            mov a, b
13622  5ACA FD 2E 04 00   mov32 cb, $00000004
13622  5ACE 00 00 
13623  5AD0 60            sub a, b
13624  5AD1 27            mov b, a
13625  5AD2 E4            pop a
13626  5AD3             ; --- END TERMS
13627  5AD3 E7            pop d
13628  5AD4 FD 3E         mov [d], bl
13629  5AD6 0A D9 5A      jmp _if781_exit
13630  5AD9             _if781_exit:
13631  5AD9             ; strcat(quadname, sect_name[x]); 
13632  5AD9             ; --- START FUNCTION CALL
13633  5AD9 3B 2D 70      mov d, st_quadrant_name_sect_name_dt ; static sect_name
13634  5ADC D7            push a
13635  5ADD DA            push d
13636  5ADE FA 07 00      lea d, [bp + 7] ; $x
13637  5AE1 32            mov bl, [d]
13638  5AE2 A7 00         mov bh, 0
13639  5AE4 38 00 00      mov c, 0
13640  5AE7 E7            pop d
13641  5AE8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13642  5AEC E4            pop a
13643  5AED 2A            mov b, [d]
13644  5AEE 38 00 00      mov c, 0
13645  5AF1 FD AB         swp b
13646  5AF3 D8            push b
13647  5AF4 3B 8A 6E      mov d, _quadname_data ; $quadname
13648  5AF7 2D            mov b, d
13649  5AF8 38 00 00      mov c, 0
13650  5AFB FD AB         swp b
13651  5AFD D8            push b
13652  5AFE 07 F8 5E      call strcat
13653  5B01 51 04 00      add sp, 4
13654  5B04             ; --- END FUNCTION CALL
13655  5B04 0A 07 5B      jmp _if780_exit
13656  5B07             _if780_exit:
13657  5B07             ; return; 
13658  5B07 F9            leave
13659  5B08 09            ret
13660  5B09             
13661  5B09             isqrt:
13662  5B09 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13663  5B0C             ; unsigned int         b, q, r, t; 
13664  5B0C 52 02 00      sub sp, 2
13665  5B0F 52 02 00      sub sp, 2
13666  5B12 52 02 00      sub sp, 2
13667  5B15 52 02 00      sub sp, 2
13668  5B18             ; b = 0x4000; 
13669  5B18 FA FF FF      lea d, [bp + -1] ; $b
13670  5B1B DA            push d
13671  5B1C FD 2E 00 40   mov32 cb, $00004000
13671  5B20 00 00 
13672  5B22 E7            pop d
13673  5B23 FD 43         mov [d], b
13674  5B25             ; q = 0; 
13675  5B25 FA FD FF      lea d, [bp + -3] ; $q
13676  5B28 DA            push d
13677  5B29 FD 2E 00 00   mov32 cb, $00000000
13677  5B2D 00 00 
13678  5B2F E7            pop d
13679  5B30 FD 43         mov [d], b
13680  5B32             ; r = i; 
13681  5B32 FA FB FF      lea d, [bp + -5] ; $r
13682  5B35 DA            push d
13683  5B36 FA 05 00      lea d, [bp + 5] ; $i
13684  5B39 2A            mov b, [d]
13685  5B3A 38 00 00      mov c, 0
13686  5B3D E7            pop d
13687  5B3E FD 43         mov [d], b
13688  5B40             ; while (b) { 
13689  5B40             _while782_cond:
13690  5B40 FA FF FF      lea d, [bp + -1] ; $b
13691  5B43 2A            mov b, [d]
13692  5B44 38 00 00      mov c, 0
13693  5B47 C0 00 00      cmp b, 0
13694  5B4A C6 EF 5B      je _while782_exit
13695  5B4D             _while782_block:
13696  5B4D             ; t = q + b; 
13697  5B4D FA F9 FF      lea d, [bp + -7] ; $t
13698  5B50 DA            push d
13699  5B51 FA FD FF      lea d, [bp + -3] ; $q
13700  5B54 2A            mov b, [d]
13701  5B55 38 00 00      mov c, 0
13702  5B58             ; --- START TERMS
13703  5B58 D7            push a
13704  5B59 11            mov a, b
13705  5B5A FA FF FF      lea d, [bp + -1] ; $b
13706  5B5D 2A            mov b, [d]
13707  5B5E 38 00 00      mov c, 0
13708  5B61 56            add b, a
13709  5B62 E4            pop a
13710  5B63             ; --- END TERMS
13711  5B63 E7            pop d
13712  5B64 FD 43         mov [d], b
13713  5B66             ; q =q>> 1; 
13714  5B66 FA FD FF      lea d, [bp + -3] ; $q
13715  5B69 DA            push d
13716  5B6A FA FD FF      lea d, [bp + -3] ; $q
13717  5B6D 2A            mov b, [d]
13718  5B6E 38 00 00      mov c, 0
13719  5B71             ; --- START SHIFT
13720  5B71 D7            push a
13721  5B72 11            mov a, b
13722  5B73 FD 2E 01 00   mov32 cb, $00000001
13722  5B77 00 00 
13723  5B79 FD 39         mov c, b
13724  5B7B A1            shr a, cl
13725  5B7C 27            mov b, a
13726  5B7D E4            pop a
13727  5B7E             ; --- END SHIFT
13728  5B7E E7            pop d
13729  5B7F FD 43         mov [d], b
13730  5B81             ; if (r >= t) { 
13731  5B81             _if783_cond:
13732  5B81 FA FB FF      lea d, [bp + -5] ; $r
13733  5B84 2A            mov b, [d]
13734  5B85 38 00 00      mov c, 0
13735  5B88             ; --- START RELATIONAL
13736  5B88 D7            push a
13737  5B89 11            mov a, b
13738  5B8A FA F9 FF      lea d, [bp + -7] ; $t
13739  5B8D 2A            mov b, [d]
13740  5B8E 38 00 00      mov c, 0
13741  5B91 B0            cmp a, b
13742  5B92 FD 82         sgeu ; >= (unsigned)
13743  5B94 E4            pop a
13744  5B95             ; --- END RELATIONAL
13745  5B95 C0 00 00      cmp b, 0
13746  5B98 C6 D1 5B      je _if783_exit
13747  5B9B             _if783_TRUE:
13748  5B9B             ; r =r- t; 
13749  5B9B FA FB FF      lea d, [bp + -5] ; $r
13750  5B9E DA            push d
13751  5B9F FA FB FF      lea d, [bp + -5] ; $r
13752  5BA2 2A            mov b, [d]
13753  5BA3 38 00 00      mov c, 0
13754  5BA6             ; --- START TERMS
13755  5BA6 D7            push a
13756  5BA7 11            mov a, b
13757  5BA8 FA F9 FF      lea d, [bp + -7] ; $t
13758  5BAB 2A            mov b, [d]
13759  5BAC 38 00 00      mov c, 0
13760  5BAF 60            sub a, b
13761  5BB0 27            mov b, a
13762  5BB1 E4            pop a
13763  5BB2             ; --- END TERMS
13764  5BB2 E7            pop d
13765  5BB3 FD 43         mov [d], b
13766  5BB5             ; q = q + b; 
13767  5BB5 FA FD FF      lea d, [bp + -3] ; $q
13768  5BB8 DA            push d
13769  5BB9 FA FD FF      lea d, [bp + -3] ; $q
13770  5BBC 2A            mov b, [d]
13771  5BBD 38 00 00      mov c, 0
13772  5BC0             ; --- START TERMS
13773  5BC0 D7            push a
13774  5BC1 11            mov a, b
13775  5BC2 FA FF FF      lea d, [bp + -1] ; $b
13776  5BC5 2A            mov b, [d]
13777  5BC6 38 00 00      mov c, 0
13778  5BC9 56            add b, a
13779  5BCA E4            pop a
13780  5BCB             ; --- END TERMS
13781  5BCB E7            pop d
13782  5BCC FD 43         mov [d], b
13783  5BCE 0A D1 5B      jmp _if783_exit
13784  5BD1             _if783_exit:
13785  5BD1             ; b =b>> 2; 
13786  5BD1 FA FF FF      lea d, [bp + -1] ; $b
13787  5BD4 DA            push d
13788  5BD5 FA FF FF      lea d, [bp + -1] ; $b
13789  5BD8 2A            mov b, [d]
13790  5BD9 38 00 00      mov c, 0
13791  5BDC             ; --- START SHIFT
13792  5BDC D7            push a
13793  5BDD 11            mov a, b
13794  5BDE FD 2E 02 00   mov32 cb, $00000002
13794  5BE2 00 00 
13795  5BE4 FD 39         mov c, b
13796  5BE6 A1            shr a, cl
13797  5BE7 27            mov b, a
13798  5BE8 E4            pop a
13799  5BE9             ; --- END SHIFT
13800  5BE9 E7            pop d
13801  5BEA FD 43         mov [d], b
13802  5BEC 0A 40 5B      jmp _while782_cond
13803  5BEF             _while782_exit:
13804  5BEF             ; return q; 
13805  5BEF FA FD FF      lea d, [bp + -3] ; $q
13806  5BF2 2A            mov b, [d]
13807  5BF3 38 00 00      mov c, 0
13808  5BF6 F9            leave
13809  5BF7 09            ret
13810  5BF8             
13811  5BF8             square00:
13812  5BF8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13813  5BFB             ; if (abs(t) > 181) { 
13814  5BFB             _if784_cond:
13815  5BFB             ; --- START FUNCTION CALL
13816  5BFB FA 05 00      lea d, [bp + 5] ; $t
13817  5BFE 2A            mov b, [d]
13818  5BFF 38 00 00      mov c, 0
13819  5C02 FD AB         swp b
13820  5C04 D8            push b
13821  5C05 07 28 6B      call abs
13822  5C08 51 02 00      add sp, 2
13823  5C0B             ; --- END FUNCTION CALL
13824  5C0B             ; --- START RELATIONAL
13825  5C0B D7            push a
13826  5C0C 11            mov a, b
13827  5C0D FD 2E B5 00   mov32 cb, $000000b5
13827  5C11 00 00 
13828  5C13 B0            cmp a, b
13829  5C14 FD 7F         sgt ; >
13830  5C16 E4            pop a
13831  5C17             ; --- END RELATIONAL
13832  5C17 C0 00 00      cmp b, 0
13833  5C1A C6 99 5C      je _if784_else
13834  5C1D             _if784_TRUE:
13835  5C1D             ; t =t/ 10; 
13836  5C1D FA 05 00      lea d, [bp + 5] ; $t
13837  5C20 DA            push d
13838  5C21 FA 05 00      lea d, [bp + 5] ; $t
13839  5C24 2A            mov b, [d]
13840  5C25 38 00 00      mov c, 0
13841  5C28             ; --- START FACTORS
13842  5C28 D7            push a
13843  5C29 FD D8         push g
13844  5C2B 11            mov a, b
13845  5C2C FD 7A         mov g, c
13846  5C2E FD 2E 0A 00   mov32 cb, $0000000a
13846  5C32 00 00 
13847  5C34 FD D8         push g ; save 'g' as the div instruction uses it
13848  5C36 AE            div a, b ; /, a: quotient, b: remainder
13849  5C37 FD F1         pop g
13850  5C39 FD 38         mov c, g
13851  5C3B 27            mov b, a
13852  5C3C FD F1         pop g
13853  5C3E E4            pop a
13854  5C3F             ; --- END FACTORS
13855  5C3F E7            pop d
13856  5C40 FD 43         mov [d], b
13857  5C42             ; t =t* t; 
13858  5C42 FA 05 00      lea d, [bp + 5] ; $t
13859  5C45 DA            push d
13860  5C46 FA 05 00      lea d, [bp + 5] ; $t
13861  5C49 2A            mov b, [d]
13862  5C4A 38 00 00      mov c, 0
13863  5C4D             ; --- START FACTORS
13864  5C4D D7            push a
13865  5C4E FD D8         push g
13866  5C50 11            mov a, b
13867  5C51 FD 7A         mov g, c
13868  5C53 FA 05 00      lea d, [bp + 5] ; $t
13869  5C56 2A            mov b, [d]
13870  5C57 38 00 00      mov c, 0
13871  5C5A D7            push a     ; save left operand
13872  5C5B 8E            xor a, b   ; xor sign bits
13873  5C5C FD AA         swp a      ; swap bytes
13874  5C5E 83            mov cl, al ; save result of xor into 'dl'
13875  5C5F E4            pop a      ; restore left side operator
13876  5C60 DF            push cl    ; save result of xor above
13877  5C61 FD AA         swp a  
13878  5C63 93 80         test al, $80  
13879  5C65 FD AA         swp a  
13880  5C67 C6 6C 5C      jz skip_invert_a_788  
13881  5C6A FD 95         neg a 
13882  5C6C             skip_invert_a_788:   
13883  5C6C FD AB         swp b
13884  5C6E FD 93 80      test bl, $80  
13885  5C71 FD AB         swp b
13886  5C73 C6 78 5C      jz skip_invert_b_788  
13887  5C76 FD 97         neg b 
13888  5C78             skip_invert_b_788:   
13889  5C78 AC            mul a, b ; *
13890  5C79 FD 78         mov g, a
13891  5C7B 11            mov a, b
13892  5C7C EA            pop bl
13893  5C7D FD 93 80      test bl, $80
13894  5C80 C6 8D 5C      jz _same_signs_788
13895  5C83 2F            mov bl, al
13896  5C84 95            not a
13897  5C85 FD 97         neg b
13898  5C87 5B 00 00      adc a, 0
13899  5C8A FD 78         mov g, a
13900  5C8C 11            mov a, b
13901  5C8D             _same_signs_788:
13902  5C8D FD 38         mov c, g
13903  5C8F 27            mov b, a
13904  5C90 FD F1         pop g
13905  5C92 E4            pop a
13906  5C93             ; --- END FACTORS
13907  5C93 E7            pop d
13908  5C94 FD 43         mov [d], b
13909  5C96 0A 12 5D      jmp _if784_exit
13910  5C99             _if784_else:
13911  5C99             ; t =t* t; 
13912  5C99 FA 05 00      lea d, [bp + 5] ; $t
13913  5C9C DA            push d
13914  5C9D FA 05 00      lea d, [bp + 5] ; $t
13915  5CA0 2A            mov b, [d]
13916  5CA1 38 00 00      mov c, 0
13917  5CA4             ; --- START FACTORS
13918  5CA4 D7            push a
13919  5CA5 FD D8         push g
13920  5CA7 11            mov a, b
13921  5CA8 FD 7A         mov g, c
13922  5CAA FA 05 00      lea d, [bp + 5] ; $t
13923  5CAD 2A            mov b, [d]
13924  5CAE 38 00 00      mov c, 0
13925  5CB1 D7            push a     ; save left operand
13926  5CB2 8E            xor a, b   ; xor sign bits
13927  5CB3 FD AA         swp a      ; swap bytes
13928  5CB5 83            mov cl, al ; save result of xor into 'dl'
13929  5CB6 E4            pop a      ; restore left side operator
13930  5CB7 DF            push cl    ; save result of xor above
13931  5CB8 FD AA         swp a  
13932  5CBA 93 80         test al, $80  
13933  5CBC FD AA         swp a  
13934  5CBE C6 C3 5C      jz skip_invert_a_790  
13935  5CC1 FD 95         neg a 
13936  5CC3             skip_invert_a_790:   
13937  5CC3 FD AB         swp b
13938  5CC5 FD 93 80      test bl, $80  
13939  5CC8 FD AB         swp b
13940  5CCA C6 CF 5C      jz skip_invert_b_790  
13941  5CCD FD 97         neg b 
13942  5CCF             skip_invert_b_790:   
13943  5CCF AC            mul a, b ; *
13944  5CD0 FD 78         mov g, a
13945  5CD2 11            mov a, b
13946  5CD3 EA            pop bl
13947  5CD4 FD 93 80      test bl, $80
13948  5CD7 C6 E4 5C      jz _same_signs_790
13949  5CDA 2F            mov bl, al
13950  5CDB 95            not a
13951  5CDC FD 97         neg b
13952  5CDE 5B 00 00      adc a, 0
13953  5CE1 FD 78         mov g, a
13954  5CE3 11            mov a, b
13955  5CE4             _same_signs_790:
13956  5CE4 FD 38         mov c, g
13957  5CE6 27            mov b, a
13958  5CE7 FD F1         pop g
13959  5CE9 E4            pop a
13960  5CEA             ; --- END FACTORS
13961  5CEA E7            pop d
13962  5CEB FD 43         mov [d], b
13963  5CED             ; t =t/ 100; 
13964  5CED FA 05 00      lea d, [bp + 5] ; $t
13965  5CF0 DA            push d
13966  5CF1 FA 05 00      lea d, [bp + 5] ; $t
13967  5CF4 2A            mov b, [d]
13968  5CF5 38 00 00      mov c, 0
13969  5CF8             ; --- START FACTORS
13970  5CF8 D7            push a
13971  5CF9 FD D8         push g
13972  5CFB 11            mov a, b
13973  5CFC FD 7A         mov g, c
13974  5CFE FD 2E 64 00   mov32 cb, $00000064
13974  5D02 00 00 
13975  5D04 FD D8         push g ; save 'g' as the div instruction uses it
13976  5D06 AE            div a, b ; /, a: quotient, b: remainder
13977  5D07 FD F1         pop g
13978  5D09 FD 38         mov c, g
13979  5D0B 27            mov b, a
13980  5D0C FD F1         pop g
13981  5D0E E4            pop a
13982  5D0F             ; --- END FACTORS
13983  5D0F E7            pop d
13984  5D10 FD 43         mov [d], b
13985  5D12             _if784_exit:
13986  5D12             ; return t; 
13987  5D12 FA 05 00      lea d, [bp + 5] ; $t
13988  5D15 2A            mov b, [d]
13989  5D16 38 00 00      mov c, 0
13990  5D19 F9            leave
13991  5D1A 09            ret
13992  5D1B             
13993  5D1B             distance_to:
13994  5D1B F8 00 00      enter 0 ; (push bp; mov bp, sp)
13995  5D1E             ; unsigned int         j; 
13996  5D1E 52 02 00      sub sp, 2
13997  5D21             ; j = square00(TO_FIXED00(k->y) - ship_y); 
13998  5D21 FA FF FF      lea d, [bp + -1] ; $j
13999  5D24 DA            push d
14000  5D25             ; --- START FUNCTION CALL
14001  5D25             ; --- START FUNCTION CALL
14002  5D25 FA 05 00      lea d, [bp + 5] ; $k
14003  5D28 FD 2A         mov d, [d]
14004  5D2A 58 00 00      add d, 0
14005  5D2D 32            mov bl, [d]
14006  5D2E A7 00         mov bh, 0
14007  5D30 38 00 00      mov c, 0
14008  5D33 FD AB         swp b
14009  5D35 D8            push b
14010  5D36 07 8B 04      call TO_FIXED00
14011  5D39 51 02 00      add sp, 2
14012  5D3C             ; --- END FUNCTION CALL
14013  5D3C             ; --- START TERMS
14014  5D3C D7            push a
14015  5D3D 11            mov a, b
14016  5D3E 3B 44 6E      mov d, _ship_y ; $ship_y
14017  5D41 2A            mov b, [d]
14018  5D42 38 00 00      mov c, 0
14019  5D45 60            sub a, b
14020  5D46 27            mov b, a
14021  5D47 E4            pop a
14022  5D48             ; --- END TERMS
14023  5D48 FD AB         swp b
14024  5D4A D8            push b
14025  5D4B 07 F8 5B      call square00
14026  5D4E 51 02 00      add sp, 2
14027  5D51             ; --- END FUNCTION CALL
14028  5D51 E7            pop d
14029  5D52 FD 43         mov [d], b
14030  5D54             ; j = j + square00(TO_FIXED00(k->x) - ship_x); 
14031  5D54 FA FF FF      lea d, [bp + -1] ; $j
14032  5D57 DA            push d
14033  5D58 FA FF FF      lea d, [bp + -1] ; $j
14034  5D5B 2A            mov b, [d]
14035  5D5C 38 00 00      mov c, 0
14036  5D5F             ; --- START TERMS
14037  5D5F D7            push a
14038  5D60 11            mov a, b
14039  5D61             ; --- START FUNCTION CALL
14040  5D61             ; --- START FUNCTION CALL
14041  5D61 FA 05 00      lea d, [bp + 5] ; $k
14042  5D64 FD 2A         mov d, [d]
14043  5D66 58 01 00      add d, 1
14044  5D69 32            mov bl, [d]
14045  5D6A A7 00         mov bh, 0
14046  5D6C 38 00 00      mov c, 0
14047  5D6F FD AB         swp b
14048  5D71 D8            push b
14049  5D72 07 8B 04      call TO_FIXED00
14050  5D75 51 02 00      add sp, 2
14051  5D78             ; --- END FUNCTION CALL
14052  5D78             ; --- START TERMS
14053  5D78 D7            push a
14054  5D79 11            mov a, b
14055  5D7A 3B 46 6E      mov d, _ship_x ; $ship_x
14056  5D7D 2A            mov b, [d]
14057  5D7E 38 00 00      mov c, 0
14058  5D81 60            sub a, b
14059  5D82 27            mov b, a
14060  5D83 E4            pop a
14061  5D84             ; --- END TERMS
14062  5D84 FD AB         swp b
14063  5D86 D8            push b
14064  5D87 07 F8 5B      call square00
14065  5D8A 51 02 00      add sp, 2
14066  5D8D             ; --- END FUNCTION CALL
14067  5D8D 56            add b, a
14068  5D8E E4            pop a
14069  5D8F             ; --- END TERMS
14070  5D8F E7            pop d
14071  5D90 FD 43         mov [d], b
14072  5D92             ; j = isqrt(j); 
14073  5D92 FA FF FF      lea d, [bp + -1] ; $j
14074  5D95 DA            push d
14075  5D96             ; --- START FUNCTION CALL
14076  5D96 FA FF FF      lea d, [bp + -1] ; $j
14077  5D99 2A            mov b, [d]
14078  5D9A 38 00 00      mov c, 0
14079  5D9D FD AB         swp b
14080  5D9F D8            push b
14081  5DA0 07 09 5B      call isqrt
14082  5DA3 51 02 00      add sp, 2
14083  5DA6             ; --- END FUNCTION CALL
14084  5DA6 E7            pop d
14085  5DA7 FD 43         mov [d], b
14086  5DA9 F9            leave
14087  5DAA 09            ret
14088  5DAB             
14089  5DAB             cint100:
14090  5DAB F8 00 00      enter 0 ; (push bp; mov bp, sp)
14091  5DAE             ; return (d + 50) / 100; 
14092  5DAE FA 05 00      lea d, [bp + 5] ; $d
14093  5DB1 2A            mov b, [d]
14094  5DB2 38 00 00      mov c, 0
14095  5DB5             ; --- START TERMS
14096  5DB5 D7            push a
14097  5DB6 11            mov a, b
14098  5DB7 FD 2E 32 00   mov32 cb, $00000032
14098  5DBB 00 00 
14099  5DBD 56            add b, a
14100  5DBE E4            pop a
14101  5DBF             ; --- END TERMS
14102  5DBF             ; --- START FACTORS
14103  5DBF D7            push a
14104  5DC0 FD D8         push g
14105  5DC2 11            mov a, b
14106  5DC3 FD 7A         mov g, c
14107  5DC5 FD 2E 64 00   mov32 cb, $00000064
14107  5DC9 00 00 
14108  5DCB FD D8         push g ; save 'g' as the div instruction uses it
14109  5DCD AE            div a, b ; /, a: quotient, b: remainder
14110  5DCE FD F1         pop g
14111  5DD0 FD 38         mov c, g
14112  5DD2 27            mov b, a
14113  5DD3 FD F1         pop g
14114  5DD5 E4            pop a
14115  5DD6             ; --- END FACTORS
14116  5DD6 F9            leave
14117  5DD7 09            ret
14118  5DD8             
14119  5DD8             showfile:
14120  5DD8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14121  5DDB F9            leave
14122  5DDC 09            ret
14123  5DDD             
14124  5DDD             getchar:
14125  5DDD F8 00 00      enter 0 ; (push bp; mov bp, sp)
14126  5DE0             ; char c; 
14127  5DE0 52 01 00      sub sp, 1
14128  5DE3             ; --- BEGIN INLINE ASM SEGMENT
14129  5DE3 19 01         mov al, 1
14130  5DE5 05 03         syscall sys_io      ; receive in AH
14131  5DE7 1A            mov al, ah
14132  5DE8 FA 00 00      lea d, [bp + 0] ; $c
14133  5DEB 3E            mov [d], al
14134  5DEC             ; --- END INLINE ASM SEGMENT
14135  5DEC             ; return c; 
14136  5DEC FA 00 00      lea d, [bp + 0] ; $c
14137  5DEF 32            mov bl, [d]
14138  5DF0 A7 00         mov bh, 0
14139  5DF2 38 00 00      mov c, 0
14140  5DF5 F9            leave
14141  5DF6 09            ret
14142  5DF7             
14143  5DF7             exit:
14144  5DF7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14145  5DFA             ; --- BEGIN INLINE ASM SEGMENT
14146  5DFA 05 0B         syscall sys_terminate_proc
14147  5DFC             ; --- END INLINE ASM SEGMENT
14148  5DFC F9            leave
14149  5DFD 09            ret
14150  5DFE             
14151  5DFE             tolower:
14152  5DFE F8 00 00      enter 0 ; (push bp; mov bp, sp)
14153  5E01             ; if (ch >= 'A' && ch <= 'Z')  
14154  5E01             _if795_cond:
14155  5E01 FA 05 00      lea d, [bp + 5] ; $ch
14156  5E04 32            mov bl, [d]
14157  5E05 A7 00         mov bh, 0
14158  5E07 38 00 00      mov c, 0
14159  5E0A             ; --- START RELATIONAL
14160  5E0A D7            push a
14161  5E0B 11            mov a, b
14162  5E0C FD 2E 41 00   mov32 cb, $00000041
14162  5E10 00 00 
14163  5E12 B0            cmp a, b
14164  5E13 FD 80         sge ; >=
14165  5E15 E4            pop a
14166  5E16             ; --- END RELATIONAL
14167  5E16             ; --- START LOGICAL AND
14168  5E16 D7            push a
14169  5E17 11            mov a, b
14170  5E18 FA 05 00      lea d, [bp + 5] ; $ch
14171  5E1B 32            mov bl, [d]
14172  5E1C A7 00         mov bh, 0
14173  5E1E 38 00 00      mov c, 0
14174  5E21             ; --- START RELATIONAL
14175  5E21 D7            push a
14176  5E22 11            mov a, b
14177  5E23 FD 2E 5A 00   mov32 cb, $0000005a
14177  5E27 00 00 
14178  5E29 B0            cmp a, b
14179  5E2A FD 74         sle ; <= (signed)
14180  5E2C E4            pop a
14181  5E2D             ; --- END RELATIONAL
14182  5E2D FD A7         sand a, b
14183  5E2F E4            pop a
14184  5E30             ; --- END LOGICAL AND
14185  5E30 C0 00 00      cmp b, 0
14186  5E33 C6 57 5E      je _if795_else
14187  5E36             _if795_TRUE:
14188  5E36             ; return ch - 'A' + 'a'; 
14189  5E36 FA 05 00      lea d, [bp + 5] ; $ch
14190  5E39 32            mov bl, [d]
14191  5E3A A7 00         mov bh, 0
14192  5E3C 38 00 00      mov c, 0
14193  5E3F             ; --- START TERMS
14194  5E3F D7            push a
14195  5E40 11            mov a, b
14196  5E41 FD 2E 41 00   mov32 cb, $00000041
14196  5E45 00 00 
14197  5E47 60            sub a, b
14198  5E48 27            mov b, a
14199  5E49 11            mov a, b
14200  5E4A FD 2E 61 00   mov32 cb, $00000061
14200  5E4E 00 00 
14201  5E50 56            add b, a
14202  5E51 E4            pop a
14203  5E52             ; --- END TERMS
14204  5E52 F9            leave
14205  5E53 09            ret
14206  5E54 0A 62 5E      jmp _if795_exit
14207  5E57             _if795_else:
14208  5E57             ; return ch; 
14209  5E57 FA 05 00      lea d, [bp + 5] ; $ch
14210  5E5A 32            mov bl, [d]
14211  5E5B A7 00         mov bh, 0
14212  5E5D 38 00 00      mov c, 0
14213  5E60 F9            leave
14214  5E61 09            ret
14215  5E62             _if795_exit:
14216  5E62 F9            leave
14217  5E63 09            ret
14218  5E64             
14219  5E64             rand:
14220  5E64 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14221  5E67             ; int  sec; 
14222  5E67 52 02 00      sub sp, 2
14223  5E6A             ; --- BEGIN INLINE ASM SEGMENT
14224  5E6A 19 00         mov al, 0
14225  5E6C 05 01         syscall sys_rtc					; get seconds
14226  5E6E 1A            mov al, ah
14227  5E6F FA FF FF      lea d, [bp + -1] ; $sec
14228  5E72 1E            mov al, [d]
14229  5E73 22 00         mov ah, 0
14230  5E75             ; --- END INLINE ASM SEGMENT
14231  5E75             ; return sec; 
14232  5E75 FA FF FF      lea d, [bp + -1] ; $sec
14233  5E78 2A            mov b, [d]
14234  5E79 38 00 00      mov c, 0
14235  5E7C F9            leave
14236  5E7D 09            ret
14237  5E7E             
14238  5E7E             strcpy:
14239  5E7E F8 00 00      enter 0 ; (push bp; mov bp, sp)
14240  5E81             ; char *psrc; 
14241  5E81 52 02 00      sub sp, 2
14242  5E84             ; char *pdest; 
14243  5E84 52 02 00      sub sp, 2
14244  5E87             ; psrc = src; 
14245  5E87 FA FF FF      lea d, [bp + -1] ; $psrc
14246  5E8A DA            push d
14247  5E8B FA 07 00      lea d, [bp + 7] ; $src
14248  5E8E 2A            mov b, [d]
14249  5E8F 38 00 00      mov c, 0
14250  5E92 E7            pop d
14251  5E93 FD 43         mov [d], b
14252  5E95             ; pdest = dest; 
14253  5E95 FA FD FF      lea d, [bp + -3] ; $pdest
14254  5E98 DA            push d
14255  5E99 FA 05 00      lea d, [bp + 5] ; $dest
14256  5E9C 2A            mov b, [d]
14257  5E9D 38 00 00      mov c, 0
14258  5EA0 E7            pop d
14259  5EA1 FD 43         mov [d], b
14260  5EA3             ; while(*psrc) *pdest++ = *psrc++; 
14261  5EA3             _while796_cond:
14262  5EA3 FA FF FF      lea d, [bp + -1] ; $psrc
14263  5EA6 2A            mov b, [d]
14264  5EA7 38 00 00      mov c, 0
14265  5EAA 74            mov d, b
14266  5EAB 32            mov bl, [d]
14267  5EAC A7 00         mov bh, 0
14268  5EAE 38 00 00      mov c, 0
14269  5EB1 C0 00 00      cmp b, 0
14270  5EB4 C6 E5 5E      je _while796_exit
14271  5EB7             _while796_block:
14272  5EB7             ; *pdest++ = *psrc++; 
14273  5EB7 FA FD FF      lea d, [bp + -3] ; $pdest
14274  5EBA 2A            mov b, [d]
14275  5EBB 38 00 00      mov c, 0
14276  5EBE FD 77         inc b
14277  5EC0 FA FD FF      lea d, [bp + -3] ; $pdest
14278  5EC3 FD 43         mov [d], b
14279  5EC5 FD 7D         dec b
14280  5EC7 D8            push b
14281  5EC8 FA FF FF      lea d, [bp + -1] ; $psrc
14282  5ECB 2A            mov b, [d]
14283  5ECC 38 00 00      mov c, 0
14284  5ECF FD 77         inc b
14285  5ED1 FA FF FF      lea d, [bp + -1] ; $psrc
14286  5ED4 FD 43         mov [d], b
14287  5ED6 FD 7D         dec b
14288  5ED8 74            mov d, b
14289  5ED9 32            mov bl, [d]
14290  5EDA A7 00         mov bh, 0
14291  5EDC 38 00 00      mov c, 0
14292  5EDF E7            pop d
14293  5EE0 FD 3E         mov [d], bl
14294  5EE2 0A A3 5E      jmp _while796_cond
14295  5EE5             _while796_exit:
14296  5EE5             ; *pdest = '\0'; 
14297  5EE5 FA FD FF      lea d, [bp + -3] ; $pdest
14298  5EE8 2A            mov b, [d]
14299  5EE9 38 00 00      mov c, 0
14300  5EEC D8            push b
14301  5EED FD 2E 00 00   mov32 cb, $00000000
14301  5EF1 00 00 
14302  5EF3 E7            pop d
14303  5EF4 FD 3E         mov [d], bl
14304  5EF6 F9            leave
14305  5EF7 09            ret
14306  5EF8             
14307  5EF8             strcat:
14308  5EF8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14309  5EFB             ; int dest_len; 
14310  5EFB 52 02 00      sub sp, 2
14311  5EFE             ; int i; 
14312  5EFE 52 02 00      sub sp, 2
14313  5F01             ; dest_len = strlen(dest); 
14314  5F01 FA FF FF      lea d, [bp + -1] ; $dest_len
14315  5F04 DA            push d
14316  5F05             ; --- START FUNCTION CALL
14317  5F05 FA 05 00      lea d, [bp + 5] ; $dest
14318  5F08 2A            mov b, [d]
14319  5F09 38 00 00      mov c, 0
14320  5F0C FD AB         swp b
14321  5F0E D8            push b
14322  5F0F 07 DB 5F      call strlen
14323  5F12 51 02 00      add sp, 2
14324  5F15             ; --- END FUNCTION CALL
14325  5F15 E7            pop d
14326  5F16 FD 43         mov [d], b
14327  5F18             ; for (i = 0; src[i] != 0; i=i+1) { 
14328  5F18             _for797_init:
14329  5F18 FA FD FF      lea d, [bp + -3] ; $i
14330  5F1B DA            push d
14331  5F1C FD 2E 00 00   mov32 cb, $00000000
14331  5F20 00 00 
14332  5F22 E7            pop d
14333  5F23 FD 43         mov [d], b
14334  5F25             _for797_cond:
14335  5F25 FA 07 00      lea d, [bp + 7] ; $src
14336  5F28 FD 2A         mov d, [d]
14337  5F2A D7            push a
14338  5F2B DA            push d
14339  5F2C FA FD FF      lea d, [bp + -3] ; $i
14340  5F2F 2A            mov b, [d]
14341  5F30 38 00 00      mov c, 0
14342  5F33 E7            pop d
14343  5F34 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
14344  5F38 E4            pop a
14345  5F39 32            mov bl, [d]
14346  5F3A A7 00         mov bh, 0
14347  5F3C 38 00 00      mov c, 0
14348  5F3F             ; --- START RELATIONAL
14349  5F3F D7            push a
14350  5F40 11            mov a, b
14351  5F41 FD 2E 00 00   mov32 cb, $00000000
14351  5F45 00 00 
14352  5F47 B0            cmp a, b
14353  5F48 FD 72         sneq ; !=
14354  5F4A E4            pop a
14355  5F4B             ; --- END RELATIONAL
14356  5F4B C0 00 00      cmp b, 0
14357  5F4E C6 A9 5F      je _for797_exit
14358  5F51             _for797_block:
14359  5F51             ; dest[dest_len + i] = src[i]; 
14360  5F51 FA 05 00      lea d, [bp + 5] ; $dest
14361  5F54 FD 2A         mov d, [d]
14362  5F56 D7            push a
14363  5F57 DA            push d
14364  5F58 FA FF FF      lea d, [bp + -1] ; $dest_len
14365  5F5B 2A            mov b, [d]
14366  5F5C 38 00 00      mov c, 0
14367  5F5F             ; --- START TERMS
14368  5F5F D7            push a
14369  5F60 11            mov a, b
14370  5F61 FA FD FF      lea d, [bp + -3] ; $i
14371  5F64 2A            mov b, [d]
14372  5F65 38 00 00      mov c, 0
14373  5F68 56            add b, a
14374  5F69 E4            pop a
14375  5F6A             ; --- END TERMS
14376  5F6A E7            pop d
14377  5F6B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
14378  5F6F E4            pop a
14379  5F70 DA            push d
14380  5F71 FA 07 00      lea d, [bp + 7] ; $src
14381  5F74 FD 2A         mov d, [d]
14382  5F76 D7            push a
14383  5F77 DA            push d
14384  5F78 FA FD FF      lea d, [bp + -3] ; $i
14385  5F7B 2A            mov b, [d]
14386  5F7C 38 00 00      mov c, 0
14387  5F7F E7            pop d
14388  5F80 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
14389  5F84 E4            pop a
14390  5F85 32            mov bl, [d]
14391  5F86 A7 00         mov bh, 0
14392  5F88 38 00 00      mov c, 0
14393  5F8B E7            pop d
14394  5F8C FD 3E         mov [d], bl
14395  5F8E             _for797_update:
14396  5F8E FA FD FF      lea d, [bp + -3] ; $i
14397  5F91 DA            push d
14398  5F92 FA FD FF      lea d, [bp + -3] ; $i
14399  5F95 2A            mov b, [d]
14400  5F96 38 00 00      mov c, 0
14401  5F99             ; --- START TERMS
14402  5F99 D7            push a
14403  5F9A 11            mov a, b
14404  5F9B FD 2E 01 00   mov32 cb, $00000001
14404  5F9F 00 00 
14405  5FA1 56            add b, a
14406  5FA2 E4            pop a
14407  5FA3             ; --- END TERMS
14408  5FA3 E7            pop d
14409  5FA4 FD 43         mov [d], b
14410  5FA6 0A 25 5F      jmp _for797_cond
14411  5FA9             _for797_exit:
14412  5FA9             ; dest[dest_len + i] = 0; 
14413  5FA9 FA 05 00      lea d, [bp + 5] ; $dest
14414  5FAC FD 2A         mov d, [d]
14415  5FAE D7            push a
14416  5FAF DA            push d
14417  5FB0 FA FF FF      lea d, [bp + -1] ; $dest_len
14418  5FB3 2A            mov b, [d]
14419  5FB4 38 00 00      mov c, 0
14420  5FB7             ; --- START TERMS
14421  5FB7 D7            push a
14422  5FB8 11            mov a, b
14423  5FB9 FA FD FF      lea d, [bp + -3] ; $i
14424  5FBC 2A            mov b, [d]
14425  5FBD 38 00 00      mov c, 0
14426  5FC0 56            add b, a
14427  5FC1 E4            pop a
14428  5FC2             ; --- END TERMS
14429  5FC2 E7            pop d
14430  5FC3 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
14431  5FC7 E4            pop a
14432  5FC8 DA            push d
14433  5FC9 FD 2E 00 00   mov32 cb, $00000000
14433  5FCD 00 00 
14434  5FCF E7            pop d
14435  5FD0 FD 3E         mov [d], bl
14436  5FD2             ; return dest; 
14437  5FD2 FA 05 00      lea d, [bp + 5] ; $dest
14438  5FD5 2A            mov b, [d]
14439  5FD6 38 00 00      mov c, 0
14440  5FD9 F9            leave
14441  5FDA 09            ret
14442  5FDB             
14443  5FDB             strlen:
14444  5FDB F8 00 00      enter 0 ; (push bp; mov bp, sp)
14445  5FDE             ; int length; 
14446  5FDE 52 02 00      sub sp, 2
14447  5FE1             ; length = 0; 
14448  5FE1 FA FF FF      lea d, [bp + -1] ; $length
14449  5FE4 DA            push d
14450  5FE5 FD 2E 00 00   mov32 cb, $00000000
14450  5FE9 00 00 
14451  5FEB E7            pop d
14452  5FEC FD 43         mov [d], b
14453  5FEE             ; while (str[length] != 0) { 
14454  5FEE             _while798_cond:
14455  5FEE FA 05 00      lea d, [bp + 5] ; $str
14456  5FF1 FD 2A         mov d, [d]
14457  5FF3 D7            push a
14458  5FF4 DA            push d
14459  5FF5 FA FF FF      lea d, [bp + -1] ; $length
14460  5FF8 2A            mov b, [d]
14461  5FF9 38 00 00      mov c, 0
14462  5FFC E7            pop d
14463  5FFD FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
14464  6001 E4            pop a
14465  6002 32            mov bl, [d]
14466  6003 A7 00         mov bh, 0
14467  6005 38 00 00      mov c, 0
14468  6008             ; --- START RELATIONAL
14469  6008 D7            push a
14470  6009 11            mov a, b
14471  600A FD 2E 00 00   mov32 cb, $00000000
14471  600E 00 00 
14472  6010 B0            cmp a, b
14473  6011 FD 72         sneq ; !=
14474  6013 E4            pop a
14475  6014             ; --- END RELATIONAL
14476  6014 C0 00 00      cmp b, 0
14477  6017 C6 2D 60      je _while798_exit
14478  601A             _while798_block:
14479  601A             ; length++; 
14480  601A FA FF FF      lea d, [bp + -1] ; $length
14481  601D 2A            mov b, [d]
14482  601E 38 00 00      mov c, 0
14483  6021 11            mov a, b
14484  6022 FD 77         inc b
14485  6024 FA FF FF      lea d, [bp + -1] ; $length
14486  6027 FD 43         mov [d], b
14487  6029 27            mov b, a
14488  602A 0A EE 5F      jmp _while798_cond
14489  602D             _while798_exit:
14490  602D             ; return length; 
14491  602D FA FF FF      lea d, [bp + -1] ; $length
14492  6030 2A            mov b, [d]
14493  6031 38 00 00      mov c, 0
14494  6034 F9            leave
14495  6035 09            ret
14496  6036             
14497  6036             printf:
14498  6036 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14499  6039             ; char *p, *format_p; 
14500  6039 52 02 00      sub sp, 2
14501  603C 52 02 00      sub sp, 2
14502  603F             ; format_p = format; 
14503  603F FA FD FF      lea d, [bp + -3] ; $format_p
14504  6042 DA            push d
14505  6043 FA 05 00      lea d, [bp + 5] ; $format
14506  6046 2A            mov b, [d]
14507  6047 38 00 00      mov c, 0
14508  604A E7            pop d
14509  604B FD 43         mov [d], b
14510  604D             ; p = &format + 2; 
14511  604D FA FF FF      lea d, [bp + -1] ; $p
14512  6050 DA            push d
14513  6051 FA 05 00      lea d, [bp + 5] ; $format
14514  6054 2D            mov b, d
14515  6055             ; --- START TERMS
14516  6055 D7            push a
14517  6056 11            mov a, b
14518  6057 FD 2E 02 00   mov32 cb, $00000002
14518  605B 00 00 
14519  605D 56            add b, a
14520  605E E4            pop a
14521  605F             ; --- END TERMS
14522  605F E7            pop d
14523  6060 FD 43         mov [d], b
14524  6062             ; for(;;){ 
14525  6062             _for799_init:
14526  6062             _for799_cond:
14527  6062             _for799_block:
14528  6062             ; if(!*format_p) break; 
14529  6062             _if800_cond:
14530  6062 FA FD FF      lea d, [bp + -3] ; $format_p
14531  6065 2A            mov b, [d]
14532  6066 38 00 00      mov c, 0
14533  6069 74            mov d, b
14534  606A 32            mov bl, [d]
14535  606B A7 00         mov bh, 0
14536  606D 38 00 00      mov c, 0
14537  6070 C0 00 00      cmp b, 0
14538  6073 FD 71         seq ; !
14539  6075 C0 00 00      cmp b, 0
14540  6078 C6 81 60      je _if800_else
14541  607B             _if800_TRUE:
14542  607B             ; break; 
14543  607B 0A 31 63      jmp _for799_exit ; for break
14544  607E 0A 2E 63      jmp _if800_exit
14545  6081             _if800_else:
14546  6081             ; if(*format_p == '%'){ 
14547  6081             _if801_cond:
14548  6081 FA FD FF      lea d, [bp + -3] ; $format_p
14549  6084 2A            mov b, [d]
14550  6085 38 00 00      mov c, 0
14551  6088 74            mov d, b
14552  6089 32            mov bl, [d]
14553  608A A7 00         mov bh, 0
14554  608C 38 00 00      mov c, 0
14555  608F             ; --- START RELATIONAL
14556  608F D7            push a
14557  6090 11            mov a, b
14558  6091 FD 2E 25 00   mov32 cb, $00000025
14558  6095 00 00 
14559  6097 B0            cmp a, b
14560  6098 FD 71         seq ; ==
14561  609A E4            pop a
14562  609B             ; --- END RELATIONAL
14563  609B C0 00 00      cmp b, 0
14564  609E C6 09 63      je _if801_else
14565  60A1             _if801_TRUE:
14566  60A1             ; format_p++; 
14567  60A1 FA FD FF      lea d, [bp + -3] ; $format_p
14568  60A4 2A            mov b, [d]
14569  60A5 38 00 00      mov c, 0
14570  60A8 FD 77         inc b
14571  60AA FA FD FF      lea d, [bp + -3] ; $format_p
14572  60AD FD 43         mov [d], b
14573  60AF FD 7D         dec b
14574  60B1             ; switch(*format_p){ 
14575  60B1             _switch802_expr:
14576  60B1 FA FD FF      lea d, [bp + -3] ; $format_p
14577  60B4 2A            mov b, [d]
14578  60B5 38 00 00      mov c, 0
14579  60B8 74            mov d, b
14580  60B9 32            mov bl, [d]
14581  60BA A7 00         mov bh, 0
14582  60BC 38 00 00      mov c, 0
14583  60BF             _switch802_comparisons:
14584  60BF C1 6C         cmp bl, $6c
14585  60C1 C6 ED 60      je _switch802_case0
14586  60C4 C1 4C         cmp bl, $4c
14587  60C6 C6 ED 60      je _switch802_case1
14588  60C9 C1 64         cmp bl, $64
14589  60CB C6 FD 61      je _switch802_case2
14590  60CE C1 69         cmp bl, $69
14591  60D0 C6 FD 61      je _switch802_case3
14592  60D3 C1 75         cmp bl, $75
14593  60D5 C6 2D 62      je _switch802_case4
14594  60D8 C1 78         cmp bl, $78
14595  60DA C6 5D 62      je _switch802_case5
14596  60DD C1 63         cmp bl, $63
14597  60DF C6 8D 62      je _switch802_case6
14598  60E2 C1 73         cmp bl, $73
14599  60E4 C6 BD 62      je _switch802_case7
14600  60E7 0A EA 62      jmp _switch802_default
14601  60EA 0A F6 62      jmp _switch802_exit
14602  60ED             _switch802_case0:
14603  60ED             _switch802_case1:
14604  60ED             ; format_p++; 
14605  60ED FA FD FF      lea d, [bp + -3] ; $format_p
14606  60F0 2A            mov b, [d]
14607  60F1 38 00 00      mov c, 0
14608  60F4 FD 77         inc b
14609  60F6 FA FD FF      lea d, [bp + -3] ; $format_p
14610  60F9 FD 43         mov [d], b
14611  60FB FD 7D         dec b
14612  60FD             ; if(*format_p == 'd' || *format_p == 'i') 
14613  60FD             _if803_cond:
14614  60FD FA FD FF      lea d, [bp + -3] ; $format_p
14615  6100 2A            mov b, [d]
14616  6101 38 00 00      mov c, 0
14617  6104 74            mov d, b
14618  6105 32            mov bl, [d]
14619  6106 A7 00         mov bh, 0
14620  6108 38 00 00      mov c, 0
14621  610B             ; --- START RELATIONAL
14622  610B D7            push a
14623  610C 11            mov a, b
14624  610D FD 2E 64 00   mov32 cb, $00000064
14624  6111 00 00 
14625  6113 B0            cmp a, b
14626  6114 FD 71         seq ; ==
14627  6116 E4            pop a
14628  6117             ; --- END RELATIONAL
14629  6117             ; --- START LOGICAL OR
14630  6117 D7            push a
14631  6118 11            mov a, b
14632  6119 FA FD FF      lea d, [bp + -3] ; $format_p
14633  611C 2A            mov b, [d]
14634  611D 38 00 00      mov c, 0
14635  6120 74            mov d, b
14636  6121 32            mov bl, [d]
14637  6122 A7 00         mov bh, 0
14638  6124 38 00 00      mov c, 0
14639  6127             ; --- START RELATIONAL
14640  6127 D7            push a
14641  6128 11            mov a, b
14642  6129 FD 2E 69 00   mov32 cb, $00000069
14642  612D 00 00 
14643  612F B0            cmp a, b
14644  6130 FD 71         seq ; ==
14645  6132 E4            pop a
14646  6133             ; --- END RELATIONAL
14647  6133 FD A8         sor a, b ; ||
14648  6135 E4            pop a
14649  6136             ; --- END LOGICAL OR
14650  6136 C0 00 00      cmp b, 0
14651  6139 C6 5A 61      je _if803_else
14652  613C             _if803_TRUE:
14653  613C             ; print_signed_long(*(long *)p); 
14654  613C             ; --- START FUNCTION CALL
14655  613C FA FF FF      lea d, [bp + -1] ; $p
14656  613F 2A            mov b, [d]
14657  6140 38 00 00      mov c, 0
14658  6143 74            mov d, b
14659  6144 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14660  6147 FD 39         mov c, b ; And place it into C
14661  6149 2A            mov b, [d] ; Lower Word in B
14662  614A 12            mov a, c
14663  614B FD AA         swp a
14664  614D D7            push a
14665  614E FD AB         swp b
14666  6150 D8            push b
14667  6151 07 33 63      call print_signed_long
14668  6154 51 04 00      add sp, 4
14669  6157             ; --- END FUNCTION CALL
14670  6157 0A E2 61      jmp _if803_exit
14671  615A             _if803_else:
14672  615A             ; if(*format_p == 'u') 
14673  615A             _if804_cond:
14674  615A FA FD FF      lea d, [bp + -3] ; $format_p
14675  615D 2A            mov b, [d]
14676  615E 38 00 00      mov c, 0
14677  6161 74            mov d, b
14678  6162 32            mov bl, [d]
14679  6163 A7 00         mov bh, 0
14680  6165 38 00 00      mov c, 0
14681  6168             ; --- START RELATIONAL
14682  6168 D7            push a
14683  6169 11            mov a, b
14684  616A FD 2E 75 00   mov32 cb, $00000075
14684  616E 00 00 
14685  6170 B0            cmp a, b
14686  6171 FD 71         seq ; ==
14687  6173 E4            pop a
14688  6174             ; --- END RELATIONAL
14689  6174 C0 00 00      cmp b, 0
14690  6177 C6 98 61      je _if804_else
14691  617A             _if804_TRUE:
14692  617A             ; print_unsigned_long(*(unsigned long *)p); 
14693  617A             ; --- START FUNCTION CALL
14694  617A FA FF FF      lea d, [bp + -1] ; $p
14695  617D 2A            mov b, [d]
14696  617E 38 00 00      mov c, 0
14697  6181 74            mov d, b
14698  6182 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14699  6185 FD 39         mov c, b ; And place it into C
14700  6187 2A            mov b, [d] ; Lower Word in B
14701  6188 12            mov a, c
14702  6189 FD AA         swp a
14703  618B D7            push a
14704  618C FD AB         swp b
14705  618E D8            push b
14706  618F 07 C9 64      call print_unsigned_long
14707  6192 51 04 00      add sp, 4
14708  6195             ; --- END FUNCTION CALL
14709  6195 0A E2 61      jmp _if804_exit
14710  6198             _if804_else:
14711  6198             ; if(*format_p == 'x') 
14712  6198             _if805_cond:
14713  6198 FA FD FF      lea d, [bp + -3] ; $format_p
14714  619B 2A            mov b, [d]
14715  619C 38 00 00      mov c, 0
14716  619F 74            mov d, b
14717  61A0 32            mov bl, [d]
14718  61A1 A7 00         mov bh, 0
14719  61A3 38 00 00      mov c, 0
14720  61A6             ; --- START RELATIONAL
14721  61A6 D7            push a
14722  61A7 11            mov a, b
14723  61A8 FD 2E 78 00   mov32 cb, $00000078
14723  61AC 00 00 
14724  61AE B0            cmp a, b
14725  61AF FD 71         seq ; ==
14726  61B1 E4            pop a
14727  61B2             ; --- END RELATIONAL
14728  61B2 C0 00 00      cmp b, 0
14729  61B5 C6 D6 61      je _if805_else
14730  61B8             _if805_TRUE:
14731  61B8             ; printx32(*(long int *)p); 
14732  61B8             ; --- START FUNCTION CALL
14733  61B8 FA FF FF      lea d, [bp + -1] ; $p
14734  61BB 2A            mov b, [d]
14735  61BC 38 00 00      mov c, 0
14736  61BF 74            mov d, b
14737  61C0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14738  61C3 FD 39         mov c, b ; And place it into C
14739  61C5 2A            mov b, [d] ; Lower Word in B
14740  61C6 12            mov a, c
14741  61C7 FD AA         swp a
14742  61C9 D7            push a
14743  61CA FD AB         swp b
14744  61CC D8            push b
14745  61CD 07 FE 65      call printx32
14746  61D0 51 04 00      add sp, 4
14747  61D3             ; --- END FUNCTION CALL
14748  61D3 0A E2 61      jmp _if805_exit
14749  61D6             _if805_else:
14750  61D6             ; err("Unexpected format in printf."); 
14751  61D6             ; --- START FUNCTION CALL
14752  61D6 26 1B 83      mov b, _s169 ; "Unexpected format in printf."
14753  61D9 FD AB         swp b
14754  61DB D8            push b
14755  61DC 07 5E 66      call err
14756  61DF 51 02 00      add sp, 2
14757  61E2             ; --- END FUNCTION CALL
14758  61E2             _if805_exit:
14759  61E2             _if804_exit:
14760  61E2             _if803_exit:
14761  61E2             ; p = p + 4; 
14762  61E2 FA FF FF      lea d, [bp + -1] ; $p
14763  61E5 DA            push d
14764  61E6 FA FF FF      lea d, [bp + -1] ; $p
14765  61E9 2A            mov b, [d]
14766  61EA 38 00 00      mov c, 0
14767  61ED             ; --- START TERMS
14768  61ED D7            push a
14769  61EE 11            mov a, b
14770  61EF FD 2E 04 00   mov32 cb, $00000004
14770  61F3 00 00 
14771  61F5 56            add b, a
14772  61F6 E4            pop a
14773  61F7             ; --- END TERMS
14774  61F7 E7            pop d
14775  61F8 FD 43         mov [d], b
14776  61FA             ; break; 
14777  61FA 0A F6 62      jmp _switch802_exit ; case break
14778  61FD             _switch802_case2:
14779  61FD             _switch802_case3:
14780  61FD             ; print_signed(*(int*)p); 
14781  61FD             ; --- START FUNCTION CALL
14782  61FD FA FF FF      lea d, [bp + -1] ; $p
14783  6200 2A            mov b, [d]
14784  6201 38 00 00      mov c, 0
14785  6204 74            mov d, b
14786  6205 2A            mov b, [d]
14787  6206 38 00 00      mov c, 0
14788  6209 FD AB         swp b
14789  620B D8            push b
14790  620C 07 8C 66      call print_signed
14791  620F 51 02 00      add sp, 2
14792  6212             ; --- END FUNCTION CALL
14793  6212             ; p = p + 2; 
14794  6212 FA FF FF      lea d, [bp + -1] ; $p
14795  6215 DA            push d
14796  6216 FA FF FF      lea d, [bp + -1] ; $p
14797  6219 2A            mov b, [d]
14798  621A 38 00 00      mov c, 0
14799  621D             ; --- START TERMS
14800  621D D7            push a
14801  621E 11            mov a, b
14802  621F FD 2E 02 00   mov32 cb, $00000002
14802  6223 00 00 
14803  6225 56            add b, a
14804  6226 E4            pop a
14805  6227             ; --- END TERMS
14806  6227 E7            pop d
14807  6228 FD 43         mov [d], b
14808  622A             ; break; 
14809  622A 0A F6 62      jmp _switch802_exit ; case break
14810  622D             _switch802_case4:
14811  622D             ; print_unsigned(*(unsigned int*)p); 
14812  622D             ; --- START FUNCTION CALL
14813  622D FA FF FF      lea d, [bp + -1] ; $p
14814  6230 2A            mov b, [d]
14815  6231 38 00 00      mov c, 0
14816  6234 74            mov d, b
14817  6235 2A            mov b, [d]
14818  6236 38 00 00      mov c, 0
14819  6239 FD AB         swp b
14820  623B D8            push b
14821  623C 07 DD 67      call print_unsigned
14822  623F 51 02 00      add sp, 2
14823  6242             ; --- END FUNCTION CALL
14824  6242             ; p = p + 2; 
14825  6242 FA FF FF      lea d, [bp + -1] ; $p
14826  6245 DA            push d
14827  6246 FA FF FF      lea d, [bp + -1] ; $p
14828  6249 2A            mov b, [d]
14829  624A 38 00 00      mov c, 0
14830  624D             ; --- START TERMS
14831  624D D7            push a
14832  624E 11            mov a, b
14833  624F FD 2E 02 00   mov32 cb, $00000002
14833  6253 00 00 
14834  6255 56            add b, a
14835  6256 E4            pop a
14836  6257             ; --- END TERMS
14837  6257 E7            pop d
14838  6258 FD 43         mov [d], b
14839  625A             ; break; 
14840  625A 0A F6 62      jmp _switch802_exit ; case break
14841  625D             _switch802_case5:
14842  625D             ; printx16(*(int*)p); 
14843  625D             ; --- START FUNCTION CALL
14844  625D FA FF FF      lea d, [bp + -1] ; $p
14845  6260 2A            mov b, [d]
14846  6261 38 00 00      mov c, 0
14847  6264 74            mov d, b
14848  6265 2A            mov b, [d]
14849  6266 38 00 00      mov c, 0
14850  6269 FD AB         swp b
14851  626B D8            push b
14852  626C 07 F5 68      call printx16
14853  626F 51 02 00      add sp, 2
14854  6272             ; --- END FUNCTION CALL
14855  6272             ; p = p + 2; 
14856  6272 FA FF FF      lea d, [bp + -1] ; $p
14857  6275 DA            push d
14858  6276 FA FF FF      lea d, [bp + -1] ; $p
14859  6279 2A            mov b, [d]
14860  627A 38 00 00      mov c, 0
14861  627D             ; --- START TERMS
14862  627D D7            push a
14863  627E 11            mov a, b
14864  627F FD 2E 02 00   mov32 cb, $00000002
14864  6283 00 00 
14865  6285 56            add b, a
14866  6286 E4            pop a
14867  6287             ; --- END TERMS
14868  6287 E7            pop d
14869  6288 FD 43         mov [d], b
14870  628A             ; break; 
14871  628A 0A F6 62      jmp _switch802_exit ; case break
14872  628D             _switch802_case6:
14873  628D             ; putchar(*(char*)p); 
14874  628D             ; --- START FUNCTION CALL
14875  628D FA FF FF      lea d, [bp + -1] ; $p
14876  6290 2A            mov b, [d]
14877  6291 38 00 00      mov c, 0
14878  6294 74            mov d, b
14879  6295 32            mov bl, [d]
14880  6296 A7 00         mov bh, 0
14881  6298 38 00 00      mov c, 0
14882  629B DD            push bl
14883  629C 07 BB 64      call putchar
14884  629F 51 01 00      add sp, 1
14885  62A2             ; --- END FUNCTION CALL
14886  62A2             ; p = p + 1; 
14887  62A2 FA FF FF      lea d, [bp + -1] ; $p
14888  62A5 DA            push d
14889  62A6 FA FF FF      lea d, [bp + -1] ; $p
14890  62A9 2A            mov b, [d]
14891  62AA 38 00 00      mov c, 0
14892  62AD             ; --- START TERMS
14893  62AD D7            push a
14894  62AE 11            mov a, b
14895  62AF FD 2E 01 00   mov32 cb, $00000001
14895  62B3 00 00 
14896  62B5 56            add b, a
14897  62B6 E4            pop a
14898  62B7             ; --- END TERMS
14899  62B7 E7            pop d
14900  62B8 FD 43         mov [d], b
14901  62BA             ; break; 
14902  62BA 0A F6 62      jmp _switch802_exit ; case break
14903  62BD             _switch802_case7:
14904  62BD             ; print(*(char**)p); 
14905  62BD             ; --- START FUNCTION CALL
14906  62BD FA FF FF      lea d, [bp + -1] ; $p
14907  62C0 2A            mov b, [d]
14908  62C1 38 00 00      mov c, 0
14909  62C4 74            mov d, b
14910  62C5 2A            mov b, [d]
14911  62C6 FD AB         swp b
14912  62C8 D8            push b
14913  62C9 07 73 66      call print
14914  62CC 51 02 00      add sp, 2
14915  62CF             ; --- END FUNCTION CALL
14916  62CF             ; p = p + 2; 
14917  62CF FA FF FF      lea d, [bp + -1] ; $p
14918  62D2 DA            push d
14919  62D3 FA FF FF      lea d, [bp + -1] ; $p
14920  62D6 2A            mov b, [d]
14921  62D7 38 00 00      mov c, 0
14922  62DA             ; --- START TERMS
14923  62DA D7            push a
14924  62DB 11            mov a, b
14925  62DC FD 2E 02 00   mov32 cb, $00000002
14925  62E0 00 00 
14926  62E2 56            add b, a
14927  62E3 E4            pop a
14928  62E4             ; --- END TERMS
14929  62E4 E7            pop d
14930  62E5 FD 43         mov [d], b
14931  62E7             ; break; 
14932  62E7 0A F6 62      jmp _switch802_exit ; case break
14933  62EA             _switch802_default:
14934  62EA             ; print("Error: Unknown argument type.\n"); 
14935  62EA             ; --- START FUNCTION CALL
14936  62EA 26 38 83      mov b, _s170 ; "Error: Unknown argument type.\n"
14937  62ED FD AB         swp b
14938  62EF D8            push b
14939  62F0 07 73 66      call print
14940  62F3 51 02 00      add sp, 2
14941  62F6             ; --- END FUNCTION CALL
14942  62F6             _switch802_exit:
14943  62F6             ; format_p++; 
14944  62F6 FA FD FF      lea d, [bp + -3] ; $format_p
14945  62F9 2A            mov b, [d]
14946  62FA 38 00 00      mov c, 0
14947  62FD FD 77         inc b
14948  62FF FA FD FF      lea d, [bp + -3] ; $format_p
14949  6302 FD 43         mov [d], b
14950  6304 FD 7D         dec b
14951  6306 0A 2E 63      jmp _if801_exit
14952  6309             _if801_else:
14953  6309             ; putchar(*format_p); 
14954  6309             ; --- START FUNCTION CALL
14955  6309 FA FD FF      lea d, [bp + -3] ; $format_p
14956  630C 2A            mov b, [d]
14957  630D 38 00 00      mov c, 0
14958  6310 74            mov d, b
14959  6311 32            mov bl, [d]
14960  6312 A7 00         mov bh, 0
14961  6314 38 00 00      mov c, 0
14962  6317 DD            push bl
14963  6318 07 BB 64      call putchar
14964  631B 51 01 00      add sp, 1
14965  631E             ; --- END FUNCTION CALL
14966  631E             ; format_p++; 
14967  631E FA FD FF      lea d, [bp + -3] ; $format_p
14968  6321 2A            mov b, [d]
14969  6322 38 00 00      mov c, 0
14970  6325 FD 77         inc b
14971  6327 FA FD FF      lea d, [bp + -3] ; $format_p
14972  632A FD 43         mov [d], b
14973  632C FD 7D         dec b
14974  632E             _if801_exit:
14975  632E             _if800_exit:
14976  632E             _for799_update:
14977  632E 0A 62 60      jmp _for799_cond
14978  6331             _for799_exit:
14979  6331 F9            leave
14980  6332 09            ret
14981  6333             
14982  6333             print_signed_long:
14983  6333 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14984  6336             ; char digits[10]; 
14985  6336 52 0A 00      sub sp, 10
14986  6339             ; int i = 0; 
14987  6339 52 02 00      sub sp, 2
14988  633C             ; --- START LOCAL VAR INITIALIZATION
14989  633C FA F5 FF      lea d, [bp + -11] ; $i
14990  633F DA            push d
14991  6340 FD 2E 00 00   mov32 cb, $00000000
14991  6344 00 00 
14992  6346 E7            pop d
14993  6347 FD 43         mov [d], b
14994  6349             ; --- END LOCAL VAR INITIALIZATION
14995  6349             ; if (num < 0) { 
14996  6349             _if806_cond:
14997  6349 FA 05 00      lea d, [bp + 5] ; $num
14998  634C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14999  634F FD 39         mov c, b ; And place it into C
15000  6351 2A            mov b, [d] ; Lower Word in B
15001  6352             ; --- START RELATIONAL
15002  6352 D7            push a
15003  6353 FD D8         push g
15004  6355 11            mov a, b
15005  6356 FD 7A         mov g, c
15006  6358 FD 2E 00 00   mov32 cb, $00000000
15006  635C 00 00 
15007  635E FD AF         cmp32 ga, cb
15008  6360 FD 73         slt ; <
15009  6362 FD F1         pop g
15010  6364 E4            pop a
15011  6365             ; --- END RELATIONAL
15012  6365 C0 00 00      cmp b, 0
15013  6368 C6 9C 63      je _if806_else
15014  636B             _if806_TRUE:
15015  636B             ; putchar('-'); 
15016  636B             ; --- START FUNCTION CALL
15017  636B FD 2E 2D 00   mov32 cb, $0000002d
15017  636F 00 00 
15018  6371 DD            push bl
15019  6372 07 BB 64      call putchar
15020  6375 51 01 00      add sp, 1
15021  6378             ; --- END FUNCTION CALL
15022  6378             ; num = -num; 
15023  6378 FA 05 00      lea d, [bp + 5] ; $num
15024  637B DA            push d
15025  637C FA 05 00      lea d, [bp + 5] ; $num
15026  637F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15027  6382 FD 39         mov c, b ; And place it into C
15028  6384 2A            mov b, [d] ; Lower Word in B
15029  6385 12            mov a, c
15030  6386 95            not a
15031  6387 97            not b
15032  6388 55 01 00      add b, 1
15033  638B 5B 00 00      adc a, 0
15034  638E 39            mov c, a
15035  638F E7            pop d
15036  6390 FD 43         mov [d], b
15037  6392 26 00 00      mov b, 0
15038  6395 FD 44 02 00   mov [d + 2], b
15039  6399 0A D0 63      jmp _if806_exit
15040  639C             _if806_else:
15041  639C             ; if (num == 0) { 
15042  639C             _if807_cond:
15043  639C FA 05 00      lea d, [bp + 5] ; $num
15044  639F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15045  63A2 FD 39         mov c, b ; And place it into C
15046  63A4 2A            mov b, [d] ; Lower Word in B
15047  63A5             ; --- START RELATIONAL
15048  63A5 D7            push a
15049  63A6 FD D8         push g
15050  63A8 11            mov a, b
15051  63A9 FD 7A         mov g, c
15052  63AB FD 2E 00 00   mov32 cb, $00000000
15052  63AF 00 00 
15053  63B1 FD AF         cmp32 ga, cb
15054  63B3 FD 71         seq ; ==
15055  63B5 FD F1         pop g
15056  63B7 E4            pop a
15057  63B8             ; --- END RELATIONAL
15058  63B8 C0 00 00      cmp b, 0
15059  63BB C6 D0 63      je _if807_exit
15060  63BE             _if807_TRUE:
15061  63BE             ; putchar('0'); 
15062  63BE             ; --- START FUNCTION CALL
15063  63BE FD 2E 30 00   mov32 cb, $00000030
15063  63C2 00 00 
15064  63C4 DD            push bl
15065  63C5 07 BB 64      call putchar
15066  63C8 51 01 00      add sp, 1
15067  63CB             ; --- END FUNCTION CALL
15068  63CB             ; return; 
15069  63CB F9            leave
15070  63CC 09            ret
15071  63CD 0A D0 63      jmp _if807_exit
15072  63D0             _if807_exit:
15073  63D0             _if806_exit:
15074  63D0             ; while (num > 0) { 
15075  63D0             _while808_cond:
15076  63D0 FA 05 00      lea d, [bp + 5] ; $num
15077  63D3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15078  63D6 FD 39         mov c, b ; And place it into C
15079  63D8 2A            mov b, [d] ; Lower Word in B
15080  63D9             ; --- START RELATIONAL
15081  63D9 D7            push a
15082  63DA FD D8         push g
15083  63DC 11            mov a, b
15084  63DD FD 7A         mov g, c
15085  63DF FD 2E 00 00   mov32 cb, $00000000
15085  63E3 00 00 
15086  63E5 FD AF         cmp32 ga, cb
15087  63E7 FD 7F         sgt
15088  63E9 FD F1         pop g
15089  63EB E4            pop a
15090  63EC             ; --- END RELATIONAL
15091  63EC C0 00 00      cmp b, 0
15092  63EF C6 71 64      je _while808_exit
15093  63F2             _while808_block:
15094  63F2             ; digits[i] = '0' + (num % 10); 
15095  63F2 FA F7 FF      lea d, [bp + -9] ; $digits
15096  63F5 D7            push a
15097  63F6 DA            push d
15098  63F7 FA F5 FF      lea d, [bp + -11] ; $i
15099  63FA 2A            mov b, [d]
15100  63FB 38 00 00      mov c, 0
15101  63FE E7            pop d
15102  63FF 5A            add d, b
15103  6400 E4            pop a
15104  6401 DA            push d
15105  6402 FD 2E 30 00   mov32 cb, $00000030
15105  6406 00 00 
15106  6408             ; --- START TERMS
15107  6408 D7            push a
15108  6409 11            mov a, b
15109  640A FA 05 00      lea d, [bp + 5] ; $num
15110  640D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15111  6410 FD 39         mov c, b ; And place it into C
15112  6412 2A            mov b, [d] ; Lower Word in B
15113  6413             ; --- START FACTORS
15114  6413 D7            push a
15115  6414 FD D8         push g
15116  6416 11            mov a, b
15117  6417 FD 7A         mov g, c
15118  6419 FD 2E 0A 00   mov32 cb, $0000000a
15118  641D 00 00 
15119  641F FD D8         push g ; save 'g' as the div instruction uses it
15120  6421 AE            div a, b ; %, a: quotient, b: remainder
15121  6422 11            mov a, b
15122  6423 FD F1         pop g
15123  6425 FD 38         mov c, g
15124  6427 27            mov b, a
15125  6428 FD F1         pop g
15126  642A E4            pop a
15127  642B             ; --- END FACTORS
15128  642B 56            add b, a
15129  642C E4            pop a
15130  642D             ; --- END TERMS
15131  642D E7            pop d
15132  642E FD 3E         mov [d], bl
15133  6430             ; num = num / 10; 
15134  6430 FA 05 00      lea d, [bp + 5] ; $num
15135  6433 DA            push d
15136  6434 FA 05 00      lea d, [bp + 5] ; $num
15137  6437 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15138  643A FD 39         mov c, b ; And place it into C
15139  643C 2A            mov b, [d] ; Lower Word in B
15140  643D             ; --- START FACTORS
15141  643D D7            push a
15142  643E FD D8         push g
15143  6440 11            mov a, b
15144  6441 FD 7A         mov g, c
15145  6443 FD 2E 0A 00   mov32 cb, $0000000a
15145  6447 00 00 
15146  6449 FD D8         push g ; save 'g' as the div instruction uses it
15147  644B AE            div a, b ; /, a: quotient, b: remainder
15148  644C FD F1         pop g
15149  644E FD 38         mov c, g
15150  6450 27            mov b, a
15151  6451 FD F1         pop g
15152  6453 E4            pop a
15153  6454             ; --- END FACTORS
15154  6454 E7            pop d
15155  6455 FD 43         mov [d], b
15156  6457 26 00 00      mov b, 0
15157  645A FD 44 02 00   mov [d + 2], b
15158  645E             ; i++; 
15159  645E FA F5 FF      lea d, [bp + -11] ; $i
15160  6461 2A            mov b, [d]
15161  6462 38 00 00      mov c, 0
15162  6465 11            mov a, b
15163  6466 FD 77         inc b
15164  6468 FA F5 FF      lea d, [bp + -11] ; $i
15165  646B FD 43         mov [d], b
15166  646D 27            mov b, a
15167  646E 0A D0 63      jmp _while808_cond
15168  6471             _while808_exit:
15169  6471             ; while (i > 0) { 
15170  6471             _while815_cond:
15171  6471 FA F5 FF      lea d, [bp + -11] ; $i
15172  6474 2A            mov b, [d]
15173  6475 38 00 00      mov c, 0
15174  6478             ; --- START RELATIONAL
15175  6478 D7            push a
15176  6479 11            mov a, b
15177  647A FD 2E 00 00   mov32 cb, $00000000
15177  647E 00 00 
15178  6480 B0            cmp a, b
15179  6481 FD 7F         sgt ; >
15180  6483 E4            pop a
15181  6484             ; --- END RELATIONAL
15182  6484 C0 00 00      cmp b, 0
15183  6487 C6 B9 64      je _while815_exit
15184  648A             _while815_block:
15185  648A             ; i--; 
15186  648A FA F5 FF      lea d, [bp + -11] ; $i
15187  648D 2A            mov b, [d]
15188  648E 38 00 00      mov c, 0
15189  6491 11            mov a, b
15190  6492 FD 7D         dec b
15191  6494 FA F5 FF      lea d, [bp + -11] ; $i
15192  6497 FD 43         mov [d], b
15193  6499 27            mov b, a
15194  649A             ; putchar(digits[i]); 
15195  649A             ; --- START FUNCTION CALL
15196  649A FA F7 FF      lea d, [bp + -9] ; $digits
15197  649D D7            push a
15198  649E DA            push d
15199  649F FA F5 FF      lea d, [bp + -11] ; $i
15200  64A2 2A            mov b, [d]
15201  64A3 38 00 00      mov c, 0
15202  64A6 E7            pop d
15203  64A7 5A            add d, b
15204  64A8 E4            pop a
15205  64A9 32            mov bl, [d]
15206  64AA A7 00         mov bh, 0
15207  64AC 38 00 00      mov c, 0
15208  64AF DD            push bl
15209  64B0 07 BB 64      call putchar
15210  64B3 51 01 00      add sp, 1
15211  64B6             ; --- END FUNCTION CALL
15212  64B6 0A 71 64      jmp _while815_cond
15213  64B9             _while815_exit:
15214  64B9 F9            leave
15215  64BA 09            ret
15216  64BB             
15217  64BB             putchar:
15218  64BB F8 00 00      enter 0 ; (push bp; mov bp, sp)
15219  64BE             ; --- BEGIN INLINE ASM SEGMENT
15220  64BE FA 05 00      lea d, [bp + 5] ; $c
15221  64C1 1E            mov al, [d]
15222  64C2 23            mov ah, al
15223  64C3 19 00         mov al, 0
15224  64C5 05 03         syscall sys_io      ; char in AH
15225  64C7             ; --- END INLINE ASM SEGMENT
15226  64C7 F9            leave
15227  64C8 09            ret
15228  64C9             
15229  64C9             print_unsigned_long:
15230  64C9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15231  64CC             ; char digits[10]; 
15232  64CC 52 0A 00      sub sp, 10
15233  64CF             ; int i; 
15234  64CF 52 02 00      sub sp, 2
15235  64D2             ; i = 0; 
15236  64D2 FA F5 FF      lea d, [bp + -11] ; $i
15237  64D5 DA            push d
15238  64D6 FD 2E 00 00   mov32 cb, $00000000
15238  64DA 00 00 
15239  64DC E7            pop d
15240  64DD FD 43         mov [d], b
15241  64DF             ; if(num == 0){ 
15242  64DF             _if816_cond:
15243  64DF FA 05 00      lea d, [bp + 5] ; $num
15244  64E2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15245  64E5 FD 39         mov c, b ; And place it into C
15246  64E7 2A            mov b, [d] ; Lower Word in B
15247  64E8             ; --- START RELATIONAL
15248  64E8 D7            push a
15249  64E9 FD D8         push g
15250  64EB 11            mov a, b
15251  64EC FD 7A         mov g, c
15252  64EE FD 2E 00 00   mov32 cb, $00000000
15252  64F2 00 00 
15253  64F4 FD AF         cmp32 ga, cb
15254  64F6 FD 71         seq ; ==
15255  64F8 FD F1         pop g
15256  64FA E4            pop a
15257  64FB             ; --- END RELATIONAL
15258  64FB C0 00 00      cmp b, 0
15259  64FE C6 13 65      je _if816_exit
15260  6501             _if816_TRUE:
15261  6501             ; putchar('0'); 
15262  6501             ; --- START FUNCTION CALL
15263  6501 FD 2E 30 00   mov32 cb, $00000030
15263  6505 00 00 
15264  6507 DD            push bl
15265  6508 07 BB 64      call putchar
15266  650B 51 01 00      add sp, 1
15267  650E             ; --- END FUNCTION CALL
15268  650E             ; return; 
15269  650E F9            leave
15270  650F 09            ret
15271  6510 0A 13 65      jmp _if816_exit
15272  6513             _if816_exit:
15273  6513             ; while (num > 0) { 
15274  6513             _while817_cond:
15275  6513 FA 05 00      lea d, [bp + 5] ; $num
15276  6516 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15277  6519 FD 39         mov c, b ; And place it into C
15278  651B 2A            mov b, [d] ; Lower Word in B
15279  651C             ; --- START RELATIONAL
15280  651C D7            push a
15281  651D FD D8         push g
15282  651F 11            mov a, b
15283  6520 FD 7A         mov g, c
15284  6522 FD 2E 00 00   mov32 cb, $00000000
15284  6526 00 00 
15285  6528 FD AF         cmp32 ga, cb
15286  652A FD 81         sgu
15287  652C FD F1         pop g
15288  652E E4            pop a
15289  652F             ; --- END RELATIONAL
15290  652F C0 00 00      cmp b, 0
15291  6532 C6 B4 65      je _while817_exit
15292  6535             _while817_block:
15293  6535             ; digits[i] = '0' + (num % 10); 
15294  6535 FA F7 FF      lea d, [bp + -9] ; $digits
15295  6538 D7            push a
15296  6539 DA            push d
15297  653A FA F5 FF      lea d, [bp + -11] ; $i
15298  653D 2A            mov b, [d]
15299  653E 38 00 00      mov c, 0
15300  6541 E7            pop d
15301  6542 5A            add d, b
15302  6543 E4            pop a
15303  6544 DA            push d
15304  6545 FD 2E 30 00   mov32 cb, $00000030
15304  6549 00 00 
15305  654B             ; --- START TERMS
15306  654B D7            push a
15307  654C 11            mov a, b
15308  654D FA 05 00      lea d, [bp + 5] ; $num
15309  6550 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15310  6553 FD 39         mov c, b ; And place it into C
15311  6555 2A            mov b, [d] ; Lower Word in B
15312  6556             ; --- START FACTORS
15313  6556 D7            push a
15314  6557 FD D8         push g
15315  6559 11            mov a, b
15316  655A FD 7A         mov g, c
15317  655C FD 2E 0A 00   mov32 cb, $0000000a
15317  6560 00 00 
15318  6562 FD D8         push g ; save 'g' as the div instruction uses it
15319  6564 AE            div a, b ; %, a: quotient, b: remainder
15320  6565 11            mov a, b
15321  6566 FD F1         pop g
15322  6568 FD 38         mov c, g
15323  656A 27            mov b, a
15324  656B FD F1         pop g
15325  656D E4            pop a
15326  656E             ; --- END FACTORS
15327  656E 56            add b, a
15328  656F E4            pop a
15329  6570             ; --- END TERMS
15330  6570 E7            pop d
15331  6571 FD 3E         mov [d], bl
15332  6573             ; num = num / 10; 
15333  6573 FA 05 00      lea d, [bp + 5] ; $num
15334  6576 DA            push d
15335  6577 FA 05 00      lea d, [bp + 5] ; $num
15336  657A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
15337  657D FD 39         mov c, b ; And place it into C
15338  657F 2A            mov b, [d] ; Lower Word in B
15339  6580             ; --- START FACTORS
15340  6580 D7            push a
15341  6581 FD D8         push g
15342  6583 11            mov a, b
15343  6584 FD 7A         mov g, c
15344  6586 FD 2E 0A 00   mov32 cb, $0000000a
15344  658A 00 00 
15345  658C FD D8         push g ; save 'g' as the div instruction uses it
15346  658E AE            div a, b ; /, a: quotient, b: remainder
15347  658F FD F1         pop g
15348  6591 FD 38         mov c, g
15349  6593 27            mov b, a
15350  6594 FD F1         pop g
15351  6596 E4            pop a
15352  6597             ; --- END FACTORS
15353  6597 E7            pop d
15354  6598 FD 43         mov [d], b
15355  659A 26 00 00      mov b, 0
15356  659D FD 44 02 00   mov [d + 2], b
15357  65A1             ; i++; 
15358  65A1 FA F5 FF      lea d, [bp + -11] ; $i
15359  65A4 2A            mov b, [d]
15360  65A5 38 00 00      mov c, 0
15361  65A8 11            mov a, b
15362  65A9 FD 77         inc b
15363  65AB FA F5 FF      lea d, [bp + -11] ; $i
15364  65AE FD 43         mov [d], b
15365  65B0 27            mov b, a
15366  65B1 0A 13 65      jmp _while817_cond
15367  65B4             _while817_exit:
15368  65B4             ; while (i > 0) { 
15369  65B4             _while824_cond:
15370  65B4 FA F5 FF      lea d, [bp + -11] ; $i
15371  65B7 2A            mov b, [d]
15372  65B8 38 00 00      mov c, 0
15373  65BB             ; --- START RELATIONAL
15374  65BB D7            push a
15375  65BC 11            mov a, b
15376  65BD FD 2E 00 00   mov32 cb, $00000000
15376  65C1 00 00 
15377  65C3 B0            cmp a, b
15378  65C4 FD 7F         sgt ; >
15379  65C6 E4            pop a
15380  65C7             ; --- END RELATIONAL
15381  65C7 C0 00 00      cmp b, 0
15382  65CA C6 FC 65      je _while824_exit
15383  65CD             _while824_block:
15384  65CD             ; i--; 
15385  65CD FA F5 FF      lea d, [bp + -11] ; $i
15386  65D0 2A            mov b, [d]
15387  65D1 38 00 00      mov c, 0
15388  65D4 11            mov a, b
15389  65D5 FD 7D         dec b
15390  65D7 FA F5 FF      lea d, [bp + -11] ; $i
15391  65DA FD 43         mov [d], b
15392  65DC 27            mov b, a
15393  65DD             ; putchar(digits[i]); 
15394  65DD             ; --- START FUNCTION CALL
15395  65DD FA F7 FF      lea d, [bp + -9] ; $digits
15396  65E0 D7            push a
15397  65E1 DA            push d
15398  65E2 FA F5 FF      lea d, [bp + -11] ; $i
15399  65E5 2A            mov b, [d]
15400  65E6 38 00 00      mov c, 0
15401  65E9 E7            pop d
15402  65EA 5A            add d, b
15403  65EB E4            pop a
15404  65EC 32            mov bl, [d]
15405  65ED A7 00         mov bh, 0
15406  65EF 38 00 00      mov c, 0
15407  65F2 DD            push bl
15408  65F3 07 BB 64      call putchar
15409  65F6 51 01 00      add sp, 1
15410  65F9             ; --- END FUNCTION CALL
15411  65F9 0A B4 65      jmp _while824_cond
15412  65FC             _while824_exit:
15413  65FC F9            leave
15414  65FD 09            ret
15415  65FE             
15416  65FE             printx32:
15417  65FE F8 00 00      enter 0 ; (push bp; mov bp, sp)
15418  6601             ; --- BEGIN INLINE ASM SEGMENT
15419  6601 FA 05 00      lea d, [bp + 5] ; $hex
15420  6604 2B 02 00      mov b, [d+2]
15421  6607 07 10 66      call print_u16x_printx32
15422  660A 2A            mov b, [d]
15423  660B 07 10 66      call print_u16x_printx32
15424  660E             ; --- END INLINE ASM SEGMENT
15425  660E             ; return; 
15426  660E F9            leave
15427  660F 09            ret
15428  6610             ; --- BEGIN INLINE ASM SEGMENT
15429  6610             print_u16x_printx32:
15430  6610 D7            push a
15431  6611 D8            push b
15432  6612 DD            push bl
15433  6613 30            mov bl, bh
15434  6614 07 32 66      call _itoa_printx32        ; convert bh to char in A
15435  6617 2F            mov bl, al        ; save al
15436  6618 19 00         mov al, 0
15437  661A 05 03         syscall sys_io        ; display AH
15438  661C 24            mov ah, bl        ; retrieve al
15439  661D 19 00         mov al, 0
15440  661F 05 03         syscall sys_io        ; display AL
15441  6621 EA            pop bl
15442  6622 07 32 66      call _itoa_printx32        ; convert bh to char in A
15443  6625 2F            mov bl, al        ; save al
15444  6626 19 00         mov al, 0
15445  6628 05 03         syscall sys_io        ; display AH
15446  662A 24            mov ah, bl        ; retrieve al
15447  662B 19 00         mov al, 0
15448  662D 05 03         syscall sys_io        ; display AL
15449  662F E5            pop b
15450  6630 E4            pop a
15451  6631 09            ret
15452  6632             _itoa_printx32:
15453  6632 DA            push d
15454  6633 D8            push b
15455  6634 A7 00         mov bh, 0
15456  6636 FD A4 04      shr bl, 4  
15457  6639 74            mov d, b
15458  663A 1F 4C 66      mov al, [d + s_hex_digits_printx32]
15459  663D 23            mov ah, al
15460  663E E5            pop b
15461  663F D8            push b
15462  6640 A7 00         mov bh, 0
15463  6642 FD 87 0F      and bl, $0F
15464  6645 74            mov d, b
15465  6646 1F 4C 66      mov al, [d + s_hex_digits_printx32]
15466  6649 E5            pop b
15467  664A E7            pop d
15468  664B 09            ret
15469  664C 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
15469  6650 34 35 36 37 
15469  6654 38 39 41 42 
15469  6658 43 44 45 46 
15470  665C             ; --- END INLINE ASM SEGMENT
15471  665C F9            leave
15472  665D 09            ret
15473  665E             
15474  665E             err:
15475  665E F8 00 00      enter 0 ; (push bp; mov bp, sp)
15476  6661             ; print(e); 
15477  6661             ; --- START FUNCTION CALL
15478  6661 FA 05 00      lea d, [bp + 5] ; $e
15479  6664 2A            mov b, [d]
15480  6665 38 00 00      mov c, 0
15481  6668 FD AB         swp b
15482  666A D8            push b
15483  666B 07 73 66      call print
15484  666E 51 02 00      add sp, 2
15485  6671             ; --- END FUNCTION CALL
15486  6671 F9            leave
15487  6672 09            ret
15488  6673             
15489  6673             print:
15490  6673 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15491  6676             ; --- BEGIN INLINE ASM SEGMENT
15492  6676 FA 05 00      lea d, [bp + 5] ; $s
15493  6679 FD 2A         mov d, [d]
15494  667B             _puts_L1_print:
15495  667B 1E            mov al, [d]
15496  667C B9 00         cmp al, 0
15497  667E C6 8A 66      jz _puts_END_print
15498  6681 23            mov ah, al
15499  6682 19 00         mov al, 0
15500  6684 05 03         syscall sys_io
15501  6686 79            inc d
15502  6687 0A 7B 66      jmp _puts_L1_print
15503  668A             _puts_END_print:
15504  668A             ; --- END INLINE ASM SEGMENT
15505  668A F9            leave
15506  668B 09            ret
15507  668C             
15508  668C             print_signed:
15509  668C F8 00 00      enter 0 ; (push bp; mov bp, sp)
15510  668F             ; char digits[5]; 
15511  668F 52 05 00      sub sp, 5
15512  6692             ; int i = 0; 
15513  6692 52 02 00      sub sp, 2
15514  6695             ; --- START LOCAL VAR INITIALIZATION
15515  6695 FA FA FF      lea d, [bp + -6] ; $i
15516  6698 DA            push d
15517  6699 FD 2E 00 00   mov32 cb, $00000000
15517  669D 00 00 
15518  669F E7            pop d
15519  66A0 FD 43         mov [d], b
15520  66A2             ; --- END LOCAL VAR INITIALIZATION
15521  66A2             ; if (num < 0) { 
15522  66A2             _if825_cond:
15523  66A2 FA 05 00      lea d, [bp + 5] ; $num
15524  66A5 2A            mov b, [d]
15525  66A6 38 00 00      mov c, 0
15526  66A9             ; --- START RELATIONAL
15527  66A9 D7            push a
15528  66AA 11            mov a, b
15529  66AB FD 2E 00 00   mov32 cb, $00000000
15529  66AF 00 00 
15530  66B1 B0            cmp a, b
15531  66B2 FD 73         slt ; < (signed)
15532  66B4 E4            pop a
15533  66B5             ; --- END RELATIONAL
15534  66B5 C0 00 00      cmp b, 0
15535  66B8 C6 DB 66      je _if825_else
15536  66BB             _if825_TRUE:
15537  66BB             ; putchar('-'); 
15538  66BB             ; --- START FUNCTION CALL
15539  66BB FD 2E 2D 00   mov32 cb, $0000002d
15539  66BF 00 00 
15540  66C1 DD            push bl
15541  66C2 07 BB 64      call putchar
15542  66C5 51 01 00      add sp, 1
15543  66C8             ; --- END FUNCTION CALL
15544  66C8             ; num = -num; 
15545  66C8 FA 05 00      lea d, [bp + 5] ; $num
15546  66CB DA            push d
15547  66CC FA 05 00      lea d, [bp + 5] ; $num
15548  66CF 2A            mov b, [d]
15549  66D0 38 00 00      mov c, 0
15550  66D3 FD 97         neg b
15551  66D5 E7            pop d
15552  66D6 FD 43         mov [d], b
15553  66D8 0A 06 67      jmp _if825_exit
15554  66DB             _if825_else:
15555  66DB             ; if (num == 0) { 
15556  66DB             _if826_cond:
15557  66DB FA 05 00      lea d, [bp + 5] ; $num
15558  66DE 2A            mov b, [d]
15559  66DF 38 00 00      mov c, 0
15560  66E2             ; --- START RELATIONAL
15561  66E2 D7            push a
15562  66E3 11            mov a, b
15563  66E4 FD 2E 00 00   mov32 cb, $00000000
15563  66E8 00 00 
15564  66EA B0            cmp a, b
15565  66EB FD 71         seq ; ==
15566  66ED E4            pop a
15567  66EE             ; --- END RELATIONAL
15568  66EE C0 00 00      cmp b, 0
15569  66F1 C6 06 67      je _if826_exit
15570  66F4             _if826_TRUE:
15571  66F4             ; putchar('0'); 
15572  66F4             ; --- START FUNCTION CALL
15573  66F4 FD 2E 30 00   mov32 cb, $00000030
15573  66F8 00 00 
15574  66FA DD            push bl
15575  66FB 07 BB 64      call putchar
15576  66FE 51 01 00      add sp, 1
15577  6701             ; --- END FUNCTION CALL
15578  6701             ; return; 
15579  6701 F9            leave
15580  6702 09            ret
15581  6703 0A 06 67      jmp _if826_exit
15582  6706             _if826_exit:
15583  6706             _if825_exit:
15584  6706             ; while (num > 0) { 
15585  6706             _while827_cond:
15586  6706 FA 05 00      lea d, [bp + 5] ; $num
15587  6709 2A            mov b, [d]
15588  670A 38 00 00      mov c, 0
15589  670D             ; --- START RELATIONAL
15590  670D D7            push a
15591  670E 11            mov a, b
15592  670F FD 2E 00 00   mov32 cb, $00000000
15592  6713 00 00 
15593  6715 B0            cmp a, b
15594  6716 FD 7F         sgt ; >
15595  6718 E4            pop a
15596  6719             ; --- END RELATIONAL
15597  6719 C0 00 00      cmp b, 0
15598  671C C6 93 67      je _while827_exit
15599  671F             _while827_block:
15600  671F             ; digits[i] = '0' + (num % 10); 
15601  671F FA FC FF      lea d, [bp + -4] ; $digits
15602  6722 D7            push a
15603  6723 DA            push d
15604  6724 FA FA FF      lea d, [bp + -6] ; $i
15605  6727 2A            mov b, [d]
15606  6728 38 00 00      mov c, 0
15607  672B E7            pop d
15608  672C 5A            add d, b
15609  672D E4            pop a
15610  672E DA            push d
15611  672F FD 2E 30 00   mov32 cb, $00000030
15611  6733 00 00 
15612  6735             ; --- START TERMS
15613  6735 D7            push a
15614  6736 11            mov a, b
15615  6737 FA 05 00      lea d, [bp + 5] ; $num
15616  673A 2A            mov b, [d]
15617  673B 38 00 00      mov c, 0
15618  673E             ; --- START FACTORS
15619  673E D7            push a
15620  673F FD D8         push g
15621  6741 11            mov a, b
15622  6742 FD 7A         mov g, c
15623  6744 FD 2E 0A 00   mov32 cb, $0000000a
15623  6748 00 00 
15624  674A FD D8         push g ; save 'g' as the div instruction uses it
15625  674C AE            div a, b ; %, a: quotient, b: remainder
15626  674D 11            mov a, b
15627  674E FD F1         pop g
15628  6750 FD 38         mov c, g
15629  6752 27            mov b, a
15630  6753 FD F1         pop g
15631  6755 E4            pop a
15632  6756             ; --- END FACTORS
15633  6756 56            add b, a
15634  6757 E4            pop a
15635  6758             ; --- END TERMS
15636  6758 E7            pop d
15637  6759 FD 3E         mov [d], bl
15638  675B             ; num = num / 10; 
15639  675B FA 05 00      lea d, [bp + 5] ; $num
15640  675E DA            push d
15641  675F FA 05 00      lea d, [bp + 5] ; $num
15642  6762 2A            mov b, [d]
15643  6763 38 00 00      mov c, 0
15644  6766             ; --- START FACTORS
15645  6766 D7            push a
15646  6767 FD D8         push g
15647  6769 11            mov a, b
15648  676A FD 7A         mov g, c
15649  676C FD 2E 0A 00   mov32 cb, $0000000a
15649  6770 00 00 
15650  6772 FD D8         push g ; save 'g' as the div instruction uses it
15651  6774 AE            div a, b ; /, a: quotient, b: remainder
15652  6775 FD F1         pop g
15653  6777 FD 38         mov c, g
15654  6779 27            mov b, a
15655  677A FD F1         pop g
15656  677C E4            pop a
15657  677D             ; --- END FACTORS
15658  677D E7            pop d
15659  677E FD 43         mov [d], b
15660  6780             ; i++; 
15661  6780 FA FA FF      lea d, [bp + -6] ; $i
15662  6783 2A            mov b, [d]
15663  6784 38 00 00      mov c, 0
15664  6787 11            mov a, b
15665  6788 FD 77         inc b
15666  678A FA FA FF      lea d, [bp + -6] ; $i
15667  678D FD 43         mov [d], b
15668  678F 27            mov b, a
15669  6790 0A 06 67      jmp _while827_cond
15670  6793             _while827_exit:
15671  6793             ; while (i > 0) { 
15672  6793             _while834_cond:
15673  6793 FA FA FF      lea d, [bp + -6] ; $i
15674  6796 2A            mov b, [d]
15675  6797 38 00 00      mov c, 0
15676  679A             ; --- START RELATIONAL
15677  679A D7            push a
15678  679B 11            mov a, b
15679  679C FD 2E 00 00   mov32 cb, $00000000
15679  67A0 00 00 
15680  67A2 B0            cmp a, b
15681  67A3 FD 7F         sgt ; >
15682  67A5 E4            pop a
15683  67A6             ; --- END RELATIONAL
15684  67A6 C0 00 00      cmp b, 0
15685  67A9 C6 DB 67      je _while834_exit
15686  67AC             _while834_block:
15687  67AC             ; i--; 
15688  67AC FA FA FF      lea d, [bp + -6] ; $i
15689  67AF 2A            mov b, [d]
15690  67B0 38 00 00      mov c, 0
15691  67B3 11            mov a, b
15692  67B4 FD 7D         dec b
15693  67B6 FA FA FF      lea d, [bp + -6] ; $i
15694  67B9 FD 43         mov [d], b
15695  67BB 27            mov b, a
15696  67BC             ; putchar(digits[i]); 
15697  67BC             ; --- START FUNCTION CALL
15698  67BC FA FC FF      lea d, [bp + -4] ; $digits
15699  67BF D7            push a
15700  67C0 DA            push d
15701  67C1 FA FA FF      lea d, [bp + -6] ; $i
15702  67C4 2A            mov b, [d]
15703  67C5 38 00 00      mov c, 0
15704  67C8 E7            pop d
15705  67C9 5A            add d, b
15706  67CA E4            pop a
15707  67CB 32            mov bl, [d]
15708  67CC A7 00         mov bh, 0
15709  67CE 38 00 00      mov c, 0
15710  67D1 DD            push bl
15711  67D2 07 BB 64      call putchar
15712  67D5 51 01 00      add sp, 1
15713  67D8             ; --- END FUNCTION CALL
15714  67D8 0A 93 67      jmp _while834_cond
15715  67DB             _while834_exit:
15716  67DB F9            leave
15717  67DC 09            ret
15718  67DD             
15719  67DD             print_unsigned:
15720  67DD F8 00 00      enter 0 ; (push bp; mov bp, sp)
15721  67E0             ; char digits[5]; 
15722  67E0 52 05 00      sub sp, 5
15723  67E3             ; int i; 
15724  67E3 52 02 00      sub sp, 2
15725  67E6             ; i = 0; 
15726  67E6 FA FA FF      lea d, [bp + -6] ; $i
15727  67E9 DA            push d
15728  67EA FD 2E 00 00   mov32 cb, $00000000
15728  67EE 00 00 
15729  67F0 E7            pop d
15730  67F1 FD 43         mov [d], b
15731  67F3             ; if(num == 0){ 
15732  67F3             _if835_cond:
15733  67F3 FA 05 00      lea d, [bp + 5] ; $num
15734  67F6 2A            mov b, [d]
15735  67F7 38 00 00      mov c, 0
15736  67FA             ; --- START RELATIONAL
15737  67FA D7            push a
15738  67FB 11            mov a, b
15739  67FC FD 2E 00 00   mov32 cb, $00000000
15739  6800 00 00 
15740  6802 B0            cmp a, b
15741  6803 FD 71         seq ; ==
15742  6805 E4            pop a
15743  6806             ; --- END RELATIONAL
15744  6806 C0 00 00      cmp b, 0
15745  6809 C6 1E 68      je _if835_exit
15746  680C             _if835_TRUE:
15747  680C             ; putchar('0'); 
15748  680C             ; --- START FUNCTION CALL
15749  680C FD 2E 30 00   mov32 cb, $00000030
15749  6810 00 00 
15750  6812 DD            push bl
15751  6813 07 BB 64      call putchar
15752  6816 51 01 00      add sp, 1
15753  6819             ; --- END FUNCTION CALL
15754  6819             ; return; 
15755  6819 F9            leave
15756  681A 09            ret
15757  681B 0A 1E 68      jmp _if835_exit
15758  681E             _if835_exit:
15759  681E             ; while (num > 0) { 
15760  681E             _while836_cond:
15761  681E FA 05 00      lea d, [bp + 5] ; $num
15762  6821 2A            mov b, [d]
15763  6822 38 00 00      mov c, 0
15764  6825             ; --- START RELATIONAL
15765  6825 D7            push a
15766  6826 11            mov a, b
15767  6827 FD 2E 00 00   mov32 cb, $00000000
15767  682B 00 00 
15768  682D B0            cmp a, b
15769  682E FD 81         sgu ; > (unsigned)
15770  6830 E4            pop a
15771  6831             ; --- END RELATIONAL
15772  6831 C0 00 00      cmp b, 0
15773  6834 C6 AB 68      je _while836_exit
15774  6837             _while836_block:
15775  6837             ; digits[i] = '0' + (num % 10); 
15776  6837 FA FC FF      lea d, [bp + -4] ; $digits
15777  683A D7            push a
15778  683B DA            push d
15779  683C FA FA FF      lea d, [bp + -6] ; $i
15780  683F 2A            mov b, [d]
15781  6840 38 00 00      mov c, 0
15782  6843 E7            pop d
15783  6844 5A            add d, b
15784  6845 E4            pop a
15785  6846 DA            push d
15786  6847 FD 2E 30 00   mov32 cb, $00000030
15786  684B 00 00 
15787  684D             ; --- START TERMS
15788  684D D7            push a
15789  684E 11            mov a, b
15790  684F FA 05 00      lea d, [bp + 5] ; $num
15791  6852 2A            mov b, [d]
15792  6853 38 00 00      mov c, 0
15793  6856             ; --- START FACTORS
15794  6856 D7            push a
15795  6857 FD D8         push g
15796  6859 11            mov a, b
15797  685A FD 7A         mov g, c
15798  685C FD 2E 0A 00   mov32 cb, $0000000a
15798  6860 00 00 
15799  6862 FD D8         push g ; save 'g' as the div instruction uses it
15800  6864 AE            div a, b ; %, a: quotient, b: remainder
15801  6865 11            mov a, b
15802  6866 FD F1         pop g
15803  6868 FD 38         mov c, g
15804  686A 27            mov b, a
15805  686B FD F1         pop g
15806  686D E4            pop a
15807  686E             ; --- END FACTORS
15808  686E 56            add b, a
15809  686F E4            pop a
15810  6870             ; --- END TERMS
15811  6870 E7            pop d
15812  6871 FD 3E         mov [d], bl
15813  6873             ; num = num / 10; 
15814  6873 FA 05 00      lea d, [bp + 5] ; $num
15815  6876 DA            push d
15816  6877 FA 05 00      lea d, [bp + 5] ; $num
15817  687A 2A            mov b, [d]
15818  687B 38 00 00      mov c, 0
15819  687E             ; --- START FACTORS
15820  687E D7            push a
15821  687F FD D8         push g
15822  6881 11            mov a, b
15823  6882 FD 7A         mov g, c
15824  6884 FD 2E 0A 00   mov32 cb, $0000000a
15824  6888 00 00 
15825  688A FD D8         push g ; save 'g' as the div instruction uses it
15826  688C AE            div a, b ; /, a: quotient, b: remainder
15827  688D FD F1         pop g
15828  688F FD 38         mov c, g
15829  6891 27            mov b, a
15830  6892 FD F1         pop g
15831  6894 E4            pop a
15832  6895             ; --- END FACTORS
15833  6895 E7            pop d
15834  6896 FD 43         mov [d], b
15835  6898             ; i++; 
15836  6898 FA FA FF      lea d, [bp + -6] ; $i
15837  689B 2A            mov b, [d]
15838  689C 38 00 00      mov c, 0
15839  689F 11            mov a, b
15840  68A0 FD 77         inc b
15841  68A2 FA FA FF      lea d, [bp + -6] ; $i
15842  68A5 FD 43         mov [d], b
15843  68A7 27            mov b, a
15844  68A8 0A 1E 68      jmp _while836_cond
15845  68AB             _while836_exit:
15846  68AB             ; while (i > 0) { 
15847  68AB             _while843_cond:
15848  68AB FA FA FF      lea d, [bp + -6] ; $i
15849  68AE 2A            mov b, [d]
15850  68AF 38 00 00      mov c, 0
15851  68B2             ; --- START RELATIONAL
15852  68B2 D7            push a
15853  68B3 11            mov a, b
15854  68B4 FD 2E 00 00   mov32 cb, $00000000
15854  68B8 00 00 
15855  68BA B0            cmp a, b
15856  68BB FD 7F         sgt ; >
15857  68BD E4            pop a
15858  68BE             ; --- END RELATIONAL
15859  68BE C0 00 00      cmp b, 0
15860  68C1 C6 F3 68      je _while843_exit
15861  68C4             _while843_block:
15862  68C4             ; i--; 
15863  68C4 FA FA FF      lea d, [bp + -6] ; $i
15864  68C7 2A            mov b, [d]
15865  68C8 38 00 00      mov c, 0
15866  68CB 11            mov a, b
15867  68CC FD 7D         dec b
15868  68CE FA FA FF      lea d, [bp + -6] ; $i
15869  68D1 FD 43         mov [d], b
15870  68D3 27            mov b, a
15871  68D4             ; putchar(digits[i]); 
15872  68D4             ; --- START FUNCTION CALL
15873  68D4 FA FC FF      lea d, [bp + -4] ; $digits
15874  68D7 D7            push a
15875  68D8 DA            push d
15876  68D9 FA FA FF      lea d, [bp + -6] ; $i
15877  68DC 2A            mov b, [d]
15878  68DD 38 00 00      mov c, 0
15879  68E0 E7            pop d
15880  68E1 5A            add d, b
15881  68E2 E4            pop a
15882  68E3 32            mov bl, [d]
15883  68E4 A7 00         mov bh, 0
15884  68E6 38 00 00      mov c, 0
15885  68E9 DD            push bl
15886  68EA 07 BB 64      call putchar
15887  68ED 51 01 00      add sp, 1
15888  68F0             ; --- END FUNCTION CALL
15889  68F0 0A AB 68      jmp _while843_cond
15890  68F3             _while843_exit:
15891  68F3 F9            leave
15892  68F4 09            ret
15893  68F5             
15894  68F5             printx16:
15895  68F5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15896  68F8             ; --- BEGIN INLINE ASM SEGMENT
15897  68F8 FA 05 00      lea d, [bp + 5] ; $hex
15898  68FB 2A            mov b, [d]
15899  68FC             print_u16x_printx16:
15900  68FC DD            push bl
15901  68FD 30            mov bl, bh
15902  68FE 07 1B 69      call _itoa_printx16        ; convert bh to char in A
15903  6901 2F            mov bl, al        ; save al
15904  6902 19 00         mov al, 0
15905  6904 05 03         syscall sys_io        ; display AH
15906  6906 24            mov ah, bl        ; retrieve al
15907  6907 19 00         mov al, 0
15908  6909 05 03         syscall sys_io        ; display AL
15909  690B EA            pop bl
15910  690C 07 1B 69      call _itoa_printx16        ; convert bh to char in A
15911  690F 2F            mov bl, al        ; save al
15912  6910 19 00         mov al, 0
15913  6912 05 03         syscall sys_io        ; display AH
15914  6914 24            mov ah, bl        ; retrieve al
15915  6915 19 00         mov al, 0
15916  6917 05 03         syscall sys_io        ; display AL
15917  6919             ; --- END INLINE ASM SEGMENT
15918  6919             ; return; 
15919  6919 F9            leave
15920  691A 09            ret
15921  691B             ; --- BEGIN INLINE ASM SEGMENT
15922  691B             _itoa_printx16:
15923  691B DA            push d
15924  691C D8            push b
15925  691D A7 00         mov bh, 0
15926  691F FD A4 04      shr bl, 4  
15927  6922 74            mov d, b
15928  6923 1F 35 69      mov al, [d + s_hex_digits_printx16]
15929  6926 23            mov ah, al
15930  6927 E5            pop b
15931  6928 D8            push b
15932  6929 A7 00         mov bh, 0
15933  692B FD 87 0F      and bl, $0F
15934  692E 74            mov d, b
15935  692F 1F 35 69      mov al, [d + s_hex_digits_printx16]
15936  6932 E5            pop b
15937  6933 E7            pop d
15938  6934 09            ret
15939  6935 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
15939  6939 34 35 36 37 
15939  693D 38 39 41 42 
15939  6941 43 44 45 46 
15940  6945             ; --- END INLINE ASM SEGMENT
15941  6945 F9            leave
15942  6946 09            ret
15943  6947             
15944  6947             puts:
15945  6947 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15946  694A             ; --- BEGIN INLINE ASM SEGMENT
15947  694A FA 05 00      lea d, [bp + 5] ; $s
15948  694D FD 2A         mov d, [d]
15949  694F             _puts_L1_puts:
15950  694F 1E            mov al, [d]
15951  6950 B9 00         cmp al, 0
15952  6952 C6 5E 69      jz _puts_END_puts
15953  6955 23            mov ah, al
15954  6956 19 00         mov al, 0
15955  6958 05 03         syscall sys_io
15956  695A 79            inc d
15957  695B 0A 4F 69      jmp _puts_L1_puts
15958  695E             _puts_END_puts:
15959  695E 10 00 0A      mov a, $0A00
15960  6961 05 03         syscall sys_io
15961  6963             ; --- END INLINE ASM SEGMENT
15962  6963 F9            leave
15963  6964 09            ret
15964  6965             
15965  6965             memset:
15966  6965 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15967  6968             ; int i; 
15968  6968 52 02 00      sub sp, 2
15969  696B             ; for(i = 0; i < size; i++){ 
15970  696B             _for844_init:
15971  696B FA FF FF      lea d, [bp + -1] ; $i
15972  696E DA            push d
15973  696F FD 2E 00 00   mov32 cb, $00000000
15973  6973 00 00 
15974  6975 E7            pop d
15975  6976 FD 43         mov [d], b
15976  6978             _for844_cond:
15977  6978 FA FF FF      lea d, [bp + -1] ; $i
15978  697B 2A            mov b, [d]
15979  697C 38 00 00      mov c, 0
15980  697F             ; --- START RELATIONAL
15981  697F D7            push a
15982  6980 11            mov a, b
15983  6981 FA 08 00      lea d, [bp + 8] ; $size
15984  6984 2A            mov b, [d]
15985  6985 38 00 00      mov c, 0
15986  6988 B0            cmp a, b
15987  6989 FD 73         slt ; < (signed)
15988  698B E4            pop a
15989  698C             ; --- END RELATIONAL
15990  698C C0 00 00      cmp b, 0
15991  698F C6 C4 69      je _for844_exit
15992  6992             _for844_block:
15993  6992             ; *(s+i) = c; 
15994  6992 FA 05 00      lea d, [bp + 5] ; $s
15995  6995 2A            mov b, [d]
15996  6996 38 00 00      mov c, 0
15997  6999             ; --- START TERMS
15998  6999 D7            push a
15999  699A 11            mov a, b
16000  699B FA FF FF      lea d, [bp + -1] ; $i
16001  699E 2A            mov b, [d]
16002  699F 38 00 00      mov c, 0
16003  69A2 56            add b, a
16004  69A3 E4            pop a
16005  69A4             ; --- END TERMS
16006  69A4 D8            push b
16007  69A5 FA 07 00      lea d, [bp + 7] ; $c
16008  69A8 32            mov bl, [d]
16009  69A9 A7 00         mov bh, 0
16010  69AB 38 00 00      mov c, 0
16011  69AE E7            pop d
16012  69AF FD 43         mov [d], b
16013  69B1             _for844_update:
16014  69B1 FA FF FF      lea d, [bp + -1] ; $i
16015  69B4 2A            mov b, [d]
16016  69B5 38 00 00      mov c, 0
16017  69B8 11            mov a, b
16018  69B9 FD 77         inc b
16019  69BB FA FF FF      lea d, [bp + -1] ; $i
16020  69BE FD 43         mov [d], b
16021  69C0 27            mov b, a
16022  69C1 0A 78 69      jmp _for844_cond
16023  69C4             _for844_exit:
16024  69C4             ; return s; 
16025  69C4 FA 05 00      lea d, [bp + 5] ; $s
16026  69C7 2A            mov b, [d]
16027  69C8 38 00 00      mov c, 0
16028  69CB F9            leave
16029  69CC 09            ret
16030  69CD             
16031  69CD             strncmp:
16032  69CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
16033  69D0             ; int i; 
16034  69D0 52 02 00      sub sp, 2
16035  69D3             ; for (i = 0; i < n; i++) { 
16036  69D3             _for845_init:
16037  69D3 FA FF FF      lea d, [bp + -1] ; $i
16038  69D6 DA            push d
16039  69D7 FD 2E 00 00   mov32 cb, $00000000
16039  69DB 00 00 
16040  69DD E7            pop d
16041  69DE FD 43         mov [d], b
16042  69E0             _for845_cond:
16043  69E0 FA FF FF      lea d, [bp + -1] ; $i
16044  69E3 2A            mov b, [d]
16045  69E4 38 00 00      mov c, 0
16046  69E7             ; --- START RELATIONAL
16047  69E7 D7            push a
16048  69E8 11            mov a, b
16049  69E9 FA 09 00      lea d, [bp + 9] ; $n
16050  69EC 2A            mov b, [d]
16051  69ED 38 00 00      mov c, 0
16052  69F0 B0            cmp a, b
16053  69F1 FD 73         slt ; < (signed)
16054  69F3 E4            pop a
16055  69F4             ; --- END RELATIONAL
16056  69F4 C0 00 00      cmp b, 0
16057  69F7 C6 EC 6A      je _for845_exit
16058  69FA             _for845_block:
16059  69FA             ; if (str1[i] != str2[i]) { 
16060  69FA             _if846_cond:
16061  69FA FA 05 00      lea d, [bp + 5] ; $str1
16062  69FD FD 2A         mov d, [d]
16063  69FF D7            push a
16064  6A00 DA            push d
16065  6A01 FA FF FF      lea d, [bp + -1] ; $i
16066  6A04 2A            mov b, [d]
16067  6A05 38 00 00      mov c, 0
16068  6A08 E7            pop d
16069  6A09 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16070  6A0D E4            pop a
16071  6A0E 32            mov bl, [d]
16072  6A0F A7 00         mov bh, 0
16073  6A11 38 00 00      mov c, 0
16074  6A14             ; --- START RELATIONAL
16075  6A14 D7            push a
16076  6A15 11            mov a, b
16077  6A16 FA 07 00      lea d, [bp + 7] ; $str2
16078  6A19 FD 2A         mov d, [d]
16079  6A1B D7            push a
16080  6A1C DA            push d
16081  6A1D FA FF FF      lea d, [bp + -1] ; $i
16082  6A20 2A            mov b, [d]
16083  6A21 38 00 00      mov c, 0
16084  6A24 E7            pop d
16085  6A25 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16086  6A29 E4            pop a
16087  6A2A 32            mov bl, [d]
16088  6A2B A7 00         mov bh, 0
16089  6A2D 38 00 00      mov c, 0
16090  6A30 B0            cmp a, b
16091  6A31 FD 72         sneq ; !=
16092  6A33 E4            pop a
16093  6A34             ; --- END RELATIONAL
16094  6A34 C0 00 00      cmp b, 0
16095  6A37 C6 7C 6A      je _if846_exit
16096  6A3A             _if846_TRUE:
16097  6A3A             ; return (unsigned char)str1[i] - (unsigned char)str2[i]; 
16098  6A3A FA 05 00      lea d, [bp + 5] ; $str1
16099  6A3D FD 2A         mov d, [d]
16100  6A3F D7            push a
16101  6A40 DA            push d
16102  6A41 FA FF FF      lea d, [bp + -1] ; $i
16103  6A44 2A            mov b, [d]
16104  6A45 38 00 00      mov c, 0
16105  6A48 E7            pop d
16106  6A49 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16107  6A4D E4            pop a
16108  6A4E 32            mov bl, [d]
16109  6A4F A7 00         mov bh, 0
16110  6A51 38 00 00      mov c, 0
16111  6A54 A7 00         mov bh, 0
16112  6A56             ; --- START TERMS
16113  6A56 D7            push a
16114  6A57 11            mov a, b
16115  6A58 FA 07 00      lea d, [bp + 7] ; $str2
16116  6A5B FD 2A         mov d, [d]
16117  6A5D D7            push a
16118  6A5E DA            push d
16119  6A5F FA FF FF      lea d, [bp + -1] ; $i
16120  6A62 2A            mov b, [d]
16121  6A63 38 00 00      mov c, 0
16122  6A66 E7            pop d
16123  6A67 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16124  6A6B E4            pop a
16125  6A6C 32            mov bl, [d]
16126  6A6D A7 00         mov bh, 0
16127  6A6F 38 00 00      mov c, 0
16128  6A72 A7 00         mov bh, 0
16129  6A74 60            sub a, b
16130  6A75 27            mov b, a
16131  6A76 E4            pop a
16132  6A77             ; --- END TERMS
16133  6A77 F9            leave
16134  6A78 09            ret
16135  6A79 0A 7C 6A      jmp _if846_exit
16136  6A7C             _if846_exit:
16137  6A7C             ; if (str1[i] == '\0' || str2[i] == '\0') { 
16138  6A7C             _if847_cond:
16139  6A7C FA 05 00      lea d, [bp + 5] ; $str1
16140  6A7F FD 2A         mov d, [d]
16141  6A81 D7            push a
16142  6A82 DA            push d
16143  6A83 FA FF FF      lea d, [bp + -1] ; $i
16144  6A86 2A            mov b, [d]
16145  6A87 38 00 00      mov c, 0
16146  6A8A E7            pop d
16147  6A8B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16148  6A8F E4            pop a
16149  6A90 32            mov bl, [d]
16150  6A91 A7 00         mov bh, 0
16151  6A93 38 00 00      mov c, 0
16152  6A96             ; --- START RELATIONAL
16153  6A96 D7            push a
16154  6A97 11            mov a, b
16155  6A98 FD 2E 00 00   mov32 cb, $00000000
16155  6A9C 00 00 
16156  6A9E B0            cmp a, b
16157  6A9F FD 71         seq ; ==
16158  6AA1 E4            pop a
16159  6AA2             ; --- END RELATIONAL
16160  6AA2             ; --- START LOGICAL OR
16161  6AA2 D7            push a
16162  6AA3 11            mov a, b
16163  6AA4 FA 07 00      lea d, [bp + 7] ; $str2
16164  6AA7 FD 2A         mov d, [d]
16165  6AA9 D7            push a
16166  6AAA DA            push d
16167  6AAB FA FF FF      lea d, [bp + -1] ; $i
16168  6AAE 2A            mov b, [d]
16169  6AAF 38 00 00      mov c, 0
16170  6AB2 E7            pop d
16171  6AB3 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
16172  6AB7 E4            pop a
16173  6AB8 32            mov bl, [d]
16174  6AB9 A7 00         mov bh, 0
16175  6ABB 38 00 00      mov c, 0
16176  6ABE             ; --- START RELATIONAL
16177  6ABE D7            push a
16178  6ABF 11            mov a, b
16179  6AC0 FD 2E 00 00   mov32 cb, $00000000
16179  6AC4 00 00 
16180  6AC6 B0            cmp a, b
16181  6AC7 FD 71         seq ; ==
16182  6AC9 E4            pop a
16183  6ACA             ; --- END RELATIONAL
16184  6ACA FD A8         sor a, b ; ||
16185  6ACC E4            pop a
16186  6ACD             ; --- END LOGICAL OR
16187  6ACD C0 00 00      cmp b, 0
16188  6AD0 C6 D9 6A      je _if847_exit
16189  6AD3             _if847_TRUE:
16190  6AD3             ; break; 
16191  6AD3 0A EC 6A      jmp _for845_exit ; for break
16192  6AD6 0A D9 6A      jmp _if847_exit
16193  6AD9             _if847_exit:
16194  6AD9             _for845_update:
16195  6AD9 FA FF FF      lea d, [bp + -1] ; $i
16196  6ADC 2A            mov b, [d]
16197  6ADD 38 00 00      mov c, 0
16198  6AE0 11            mov a, b
16199  6AE1 FD 77         inc b
16200  6AE3 FA FF FF      lea d, [bp + -1] ; $i
16201  6AE6 FD 43         mov [d], b
16202  6AE8 27            mov b, a
16203  6AE9 0A E0 69      jmp _for845_cond
16204  6AEC             _for845_exit:
16205  6AEC             ; return 0; 
16206  6AEC FD 2E 00 00   mov32 cb, $00000000
16206  6AF0 00 00 
16207  6AF2 F9            leave
16208  6AF3 09            ret
16209  6AF4             
16210  6AF4             is_digit:
16211  6AF4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
16212  6AF7             ; return c >= '0' && c <= '9'; 
16213  6AF7 FA 05 00      lea d, [bp + 5] ; $c
16214  6AFA 32            mov bl, [d]
16215  6AFB A7 00         mov bh, 0
16216  6AFD 38 00 00      mov c, 0
16217  6B00             ; --- START RELATIONAL
16218  6B00 D7            push a
16219  6B01 11            mov a, b
16220  6B02 FD 2E 30 00   mov32 cb, $00000030
16220  6B06 00 00 
16221  6B08 B0            cmp a, b
16222  6B09 FD 80         sge ; >=
16223  6B0B E4            pop a
16224  6B0C             ; --- END RELATIONAL
16225  6B0C             ; --- START LOGICAL AND
16226  6B0C D7            push a
16227  6B0D 11            mov a, b
16228  6B0E FA 05 00      lea d, [bp + 5] ; $c
16229  6B11 32            mov bl, [d]
16230  6B12 A7 00         mov bh, 0
16231  6B14 38 00 00      mov c, 0
16232  6B17             ; --- START RELATIONAL
16233  6B17 D7            push a
16234  6B18 11            mov a, b
16235  6B19 FD 2E 39 00   mov32 cb, $00000039
16235  6B1D 00 00 
16236  6B1F B0            cmp a, b
16237  6B20 FD 74         sle ; <= (signed)
16238  6B22 E4            pop a
16239  6B23             ; --- END RELATIONAL
16240  6B23 FD A7         sand a, b
16241  6B25 E4            pop a
16242  6B26             ; --- END LOGICAL AND
16243  6B26 F9            leave
16244  6B27 09            ret
16245  6B28             
16246  6B28             abs:
16247  6B28 F8 00 00      enter 0 ; (push bp; mov bp, sp)
16248  6B2B             ; return i < 0 ? -i : i; 
16249  6B2B             _ternary848_cond:
16250  6B2B FA 05 00      lea d, [bp + 5] ; $i
16251  6B2E 2A            mov b, [d]
16252  6B2F 38 00 00      mov c, 0
16253  6B32             ; --- START RELATIONAL
16254  6B32 D7            push a
16255  6B33 11            mov a, b
16256  6B34 FD 2E 00 00   mov32 cb, $00000000
16256  6B38 00 00 
16257  6B3A B0            cmp a, b
16258  6B3B FD 73         slt ; < (signed)
16259  6B3D E4            pop a
16260  6B3E             ; --- END RELATIONAL
16261  6B3E C0 00 00      cmp b, 0
16262  6B41 C6 50 6B      je _ternary848_FALSE
16263  6B44             _ternary848_TRUE:
16264  6B44 FA 05 00      lea d, [bp + 5] ; $i
16265  6B47 2A            mov b, [d]
16266  6B48 38 00 00      mov c, 0
16267  6B4B FD 97         neg b
16268  6B4D 0A 57 6B      jmp _ternary848_exit
16269  6B50             _ternary848_FALSE:
16270  6B50 FA 05 00      lea d, [bp + 5] ; $i
16271  6B53 2A            mov b, [d]
16272  6B54 38 00 00      mov c, 0
16273  6B57             _ternary848_exit:
16274  6B57 F9            leave
16275  6B58 09            ret
16276  6B59             
16277  6B59             atoi:
16278  6B59 F8 00 00      enter 0 ; (push bp; mov bp, sp)
16279  6B5C             ; int result = 0;  // Initialize result 
16280  6B5C 52 02 00      sub sp, 2
16281  6B5F             ; --- START LOCAL VAR INITIALIZATION
16282  6B5F FA FF FF      lea d, [bp + -1] ; $result
16283  6B62 DA            push d
16284  6B63 FD 2E 00 00   mov32 cb, $00000000
16284  6B67 00 00 
16285  6B69 E7            pop d
16286  6B6A FD 43         mov [d], b
16287  6B6C             ; --- END LOCAL VAR INITIALIZATION
16288  6B6C             ; int sign = 1;    // Initialize sign as positive 
16289  6B6C 52 02 00      sub sp, 2
16290  6B6F             ; --- START LOCAL VAR INITIALIZATION
16291  6B6F FA FD FF      lea d, [bp + -3] ; $sign
16292  6B72 DA            push d
16293  6B73 FD 2E 01 00   mov32 cb, $00000001
16293  6B77 00 00 
16294  6B79 E7            pop d
16295  6B7A FD 43         mov [d], b
16296  6B7C             ; --- END LOCAL VAR INITIALIZATION
16297  6B7C             ; while (*str == ' ') str++; 
16298  6B7C             _while849_cond:
16299  6B7C FA 05 00      lea d, [bp + 5] ; $str
16300  6B7F 2A            mov b, [d]
16301  6B80 38 00 00      mov c, 0
16302  6B83 74            mov d, b
16303  6B84 32            mov bl, [d]
16304  6B85 A7 00         mov bh, 0
16305  6B87 38 00 00      mov c, 0
16306  6B8A             ; --- START RELATIONAL
16307  6B8A D7            push a
16308  6B8B 11            mov a, b
16309  6B8C FD 2E 20 00   mov32 cb, $00000020
16309  6B90 00 00 
16310  6B92 B0            cmp a, b
16311  6B93 FD 71         seq ; ==
16312  6B95 E4            pop a
16313  6B96             ; --- END RELATIONAL
16314  6B96 C0 00 00      cmp b, 0
16315  6B99 C6 AF 6B      je _while849_exit
16316  6B9C             _while849_block:
16317  6B9C             ; str++; 
16318  6B9C FA 05 00      lea d, [bp + 5] ; $str
16319  6B9F 2A            mov b, [d]
16320  6BA0 38 00 00      mov c, 0
16321  6BA3 FD 77         inc b
16322  6BA5 FA 05 00      lea d, [bp + 5] ; $str
16323  6BA8 FD 43         mov [d], b
16324  6BAA FD 7D         dec b
16325  6BAC 0A 7C 6B      jmp _while849_cond
16326  6BAF             _while849_exit:
16327  6BAF             ; if (*str == '-' || *str == '+') { 
16328  6BAF             _if850_cond:
16329  6BAF FA 05 00      lea d, [bp + 5] ; $str
16330  6BB2 2A            mov b, [d]
16331  6BB3 38 00 00      mov c, 0
16332  6BB6 74            mov d, b
16333  6BB7 32            mov bl, [d]
16334  6BB8 A7 00         mov bh, 0
16335  6BBA 38 00 00      mov c, 0
16336  6BBD             ; --- START RELATIONAL
16337  6BBD D7            push a
16338  6BBE 11            mov a, b
16339  6BBF FD 2E 2D 00   mov32 cb, $0000002d
16339  6BC3 00 00 
16340  6BC5 B0            cmp a, b
16341  6BC6 FD 71         seq ; ==
16342  6BC8 E4            pop a
16343  6BC9             ; --- END RELATIONAL
16344  6BC9             ; --- START LOGICAL OR
16345  6BC9 D7            push a
16346  6BCA 11            mov a, b
16347  6BCB FA 05 00      lea d, [bp + 5] ; $str
16348  6BCE 2A            mov b, [d]
16349  6BCF 38 00 00      mov c, 0
16350  6BD2 74            mov d, b
16351  6BD3 32            mov bl, [d]
16352  6BD4 A7 00         mov bh, 0
16353  6BD6 38 00 00      mov c, 0
16354  6BD9             ; --- START RELATIONAL
16355  6BD9 D7            push a
16356  6BDA 11            mov a, b
16357  6BDB FD 2E 2B 00   mov32 cb, $0000002b
16357  6BDF 00 00 
16358  6BE1 B0            cmp a, b
16359  6BE2 FD 71         seq ; ==
16360  6BE4 E4            pop a
16361  6BE5             ; --- END RELATIONAL
16362  6BE5 FD A8         sor a, b ; ||
16363  6BE7 E4            pop a
16364  6BE8             ; --- END LOGICAL OR
16365  6BE8 C0 00 00      cmp b, 0
16366  6BEB C6 31 6C      je _if850_exit
16367  6BEE             _if850_TRUE:
16368  6BEE             ; if (*str == '-') sign = -1; 
16369  6BEE             _if851_cond:
16370  6BEE FA 05 00      lea d, [bp + 5] ; $str
16371  6BF1 2A            mov b, [d]
16372  6BF2 38 00 00      mov c, 0
16373  6BF5 74            mov d, b
16374  6BF6 32            mov bl, [d]
16375  6BF7 A7 00         mov bh, 0
16376  6BF9 38 00 00      mov c, 0
16377  6BFC             ; --- START RELATIONAL
16378  6BFC D7            push a
16379  6BFD 11            mov a, b
16380  6BFE FD 2E 2D 00   mov32 cb, $0000002d
16380  6C02 00 00 
16381  6C04 B0            cmp a, b
16382  6C05 FD 71         seq ; ==
16383  6C07 E4            pop a
16384  6C08             ; --- END RELATIONAL
16385  6C08 C0 00 00      cmp b, 0
16386  6C0B C6 1E 6C      je _if851_exit
16387  6C0E             _if851_TRUE:
16388  6C0E             ; sign = -1; 
16389  6C0E FA FD FF      lea d, [bp + -3] ; $sign
16390  6C11 DA            push d
16391  6C12 FD 2E FF FF   mov32 cb, $ffffffff
16391  6C16 FF FF 
16392  6C18 E7            pop d
16393  6C19 FD 43         mov [d], b
16394  6C1B 0A 1E 6C      jmp _if851_exit
16395  6C1E             _if851_exit:
16396  6C1E             ; str++; 
16397  6C1E FA 05 00      lea d, [bp + 5] ; $str
16398  6C21 2A            mov b, [d]
16399  6C22 38 00 00      mov c, 0
16400  6C25 FD 77         inc b
16401  6C27 FA 05 00      lea d, [bp + 5] ; $str
16402  6C2A FD 43         mov [d], b
16403  6C2C FD 7D         dec b
16404  6C2E 0A 31 6C      jmp _if850_exit
16405  6C31             _if850_exit:
16406  6C31             ; while (*str >= '0' && *str <= '9') { 
16407  6C31             _while852_cond:
16408  6C31 FA 05 00      lea d, [bp + 5] ; $str
16409  6C34 2A            mov b, [d]
16410  6C35 38 00 00      mov c, 0
16411  6C38 74            mov d, b
16412  6C39 32            mov bl, [d]
16413  6C3A A7 00         mov bh, 0
16414  6C3C 38 00 00      mov c, 0
16415  6C3F             ; --- START RELATIONAL
16416  6C3F D7            push a
16417  6C40 11            mov a, b
16418  6C41 FD 2E 30 00   mov32 cb, $00000030
16418  6C45 00 00 
16419  6C47 B0            cmp a, b
16420  6C48 FD 82         sgeu ; >= (unsigned)
16421  6C4A E4            pop a
16422  6C4B             ; --- END RELATIONAL
16423  6C4B             ; --- START LOGICAL AND
16424  6C4B D7            push a
16425  6C4C 11            mov a, b
16426  6C4D FA 05 00      lea d, [bp + 5] ; $str
16427  6C50 2A            mov b, [d]
16428  6C51 38 00 00      mov c, 0
16429  6C54 74            mov d, b
16430  6C55 32            mov bl, [d]
16431  6C56 A7 00         mov bh, 0
16432  6C58 38 00 00      mov c, 0
16433  6C5B             ; --- START RELATIONAL
16434  6C5B D7            push a
16435  6C5C 11            mov a, b
16436  6C5D FD 2E 39 00   mov32 cb, $00000039
16436  6C61 00 00 
16437  6C63 B0            cmp a, b
16438  6C64 FD 76         sleu ; <= (unsigned)
16439  6C66 E4            pop a
16440  6C67             ; --- END RELATIONAL
16441  6C67 FD A7         sand a, b
16442  6C69 E4            pop a
16443  6C6A             ; --- END LOGICAL AND
16444  6C6A C0 00 00      cmp b, 0
16445  6C6D C6 FA 6C      je _while852_exit
16446  6C70             _while852_block:
16447  6C70             ; result = result * 10 + (*str - '0'); 
16448  6C70 FA FF FF      lea d, [bp + -1] ; $result
16449  6C73 DA            push d
16450  6C74 FA FF FF      lea d, [bp + -1] ; $result
16451  6C77 2A            mov b, [d]
16452  6C78 38 00 00      mov c, 0
16453  6C7B             ; --- START FACTORS
16454  6C7B D7            push a
16455  6C7C FD D8         push g
16456  6C7E 11            mov a, b
16457  6C7F FD 7A         mov g, c
16458  6C81 FD 2E 0A 00   mov32 cb, $0000000a
16458  6C85 00 00 
16459  6C87 D7            push a     ; save left operand
16460  6C88 8E            xor a, b   ; xor sign bits
16461  6C89 FD AA         swp a      ; swap bytes
16462  6C8B 83            mov cl, al ; save result of xor into 'dl'
16463  6C8C E4            pop a      ; restore left side operator
16464  6C8D DF            push cl    ; save result of xor above
16465  6C8E FD AA         swp a  
16466  6C90 93 80         test al, $80  
16467  6C92 FD AA         swp a  
16468  6C94 C6 99 6C      jz skip_invert_a_854  
16469  6C97 FD 95         neg a 
16470  6C99             skip_invert_a_854:   
16471  6C99 FD AB         swp b
16472  6C9B FD 93 80      test bl, $80  
16473  6C9E FD AB         swp b
16474  6CA0 C6 A5 6C      jz skip_invert_b_854  
16475  6CA3 FD 97         neg b 
16476  6CA5             skip_invert_b_854:   
16477  6CA5 AC            mul a, b ; *
16478  6CA6 FD 78         mov g, a
16479  6CA8 11            mov a, b
16480  6CA9 EA            pop bl
16481  6CAA FD 93 80      test bl, $80
16482  6CAD C6 BA 6C      jz _same_signs_854
16483  6CB0 2F            mov bl, al
16484  6CB1 95            not a
16485  6CB2 FD 97         neg b
16486  6CB4 5B 00 00      adc a, 0
16487  6CB7 FD 78         mov g, a
16488  6CB9 11            mov a, b
16489  6CBA             _same_signs_854:
16490  6CBA FD 38         mov c, g
16491  6CBC 27            mov b, a
16492  6CBD FD F1         pop g
16493  6CBF E4            pop a
16494  6CC0             ; --- END FACTORS
16495  6CC0             ; --- START TERMS
16496  6CC0 D7            push a
16497  6CC1 FD D8         push g
16498  6CC3 11            mov a, b
16499  6CC4 FD 7A         mov g, c
16500  6CC6 FA 05 00      lea d, [bp + 5] ; $str
16501  6CC9 2A            mov b, [d]
16502  6CCA 38 00 00      mov c, 0
16503  6CCD 74            mov d, b
16504  6CCE 32            mov bl, [d]
16505  6CCF A7 00         mov bh, 0
16506  6CD1 38 00 00      mov c, 0
16507  6CD4             ; --- START TERMS
16508  6CD4 D7            push a
16509  6CD5 11            mov a, b
16510  6CD6 FD 2E 30 00   mov32 cb, $00000030
16510  6CDA 00 00 
16511  6CDC 60            sub a, b
16512  6CDD 27            mov b, a
16513  6CDE E4            pop a
16514  6CDF             ; --- END TERMS
16515  6CDF FD 15         add32 cb, ga
16516  6CE1 FD F1         pop g
16517  6CE3 E4            pop a
16518  6CE4             ; --- END TERMS
16519  6CE4 E7            pop d
16520  6CE5 FD 43         mov [d], b
16521  6CE7             ; str++; 
16522  6CE7 FA 05 00      lea d, [bp + 5] ; $str
16523  6CEA 2A            mov b, [d]
16524  6CEB 38 00 00      mov c, 0
16525  6CEE FD 77         inc b
16526  6CF0 FA 05 00      lea d, [bp + 5] ; $str
16527  6CF3 FD 43         mov [d], b
16528  6CF5 FD 7D         dec b
16529  6CF7 0A 31 6C      jmp _while852_cond
16530  6CFA             _while852_exit:
16531  6CFA             ; return sign * result; 
16532  6CFA FA FD FF      lea d, [bp + -3] ; $sign
16533  6CFD 2A            mov b, [d]
16534  6CFE 38 00 00      mov c, 0
16535  6D01             ; --- START FACTORS
16536  6D01 D7            push a
16537  6D02 FD D8         push g
16538  6D04 11            mov a, b
16539  6D05 FD 7A         mov g, c
16540  6D07 FA FF FF      lea d, [bp + -1] ; $result
16541  6D0A 2A            mov b, [d]
16542  6D0B 38 00 00      mov c, 0
16543  6D0E D7            push a     ; save left operand
16544  6D0F 8E            xor a, b   ; xor sign bits
16545  6D10 FD AA         swp a      ; swap bytes
16546  6D12 83            mov cl, al ; save result of xor into 'dl'
16547  6D13 E4            pop a      ; restore left side operator
16548  6D14 DF            push cl    ; save result of xor above
16549  6D15 FD AA         swp a  
16550  6D17 93 80         test al, $80  
16551  6D19 FD AA         swp a  
16552  6D1B C6 20 6D      jz skip_invert_a_856  
16553  6D1E FD 95         neg a 
16554  6D20             skip_invert_a_856:   
16555  6D20 FD AB         swp b
16556  6D22 FD 93 80      test bl, $80  
16557  6D25 FD AB         swp b
16558  6D27 C6 2C 6D      jz skip_invert_b_856  
16559  6D2A FD 97         neg b 
16560  6D2C             skip_invert_b_856:   
16561  6D2C AC            mul a, b ; *
16562  6D2D FD 78         mov g, a
16563  6D2F 11            mov a, b
16564  6D30 EA            pop bl
16565  6D31 FD 93 80      test bl, $80
16566  6D34 C6 41 6D      jz _same_signs_856
16567  6D37 2F            mov bl, al
16568  6D38 95            not a
16569  6D39 FD 97         neg b
16570  6D3B 5B 00 00      adc a, 0
16571  6D3E FD 78         mov g, a
16572  6D40 11            mov a, b
16573  6D41             _same_signs_856:
16574  6D41 FD 38         mov c, g
16575  6D43 27            mov b, a
16576  6D44 FD F1         pop g
16577  6D46 E4            pop a
16578  6D47             ; --- END FACTORS
16579  6D47 F9            leave
16580  6D48 09            ret
16581  6D49             ; --- END TEXT SEGMENT
16582  6D49             
16583  6D49             ; --- BEGIN DATA SEGMENT
16584  6D49 00          _starbases: .fill 1, 0
16585  6D4A 00          _base_y: .fill 1, 0
16586  6D4B 00          _base_x: .fill 1, 0
16587  6D4C 00          _starbases_left: .fill 1, 0
16588  6D4D             _c_data: 
16589  6D4D 00          .db 
16590  6D4E 00          .db 
16591  6D4F 00 00 00 FF .db $00,$00,$00,$ff,$ff,$ff,$00,$01,$01,$01,$00,$01,$01,$01,$00,$ff,$ff,$ff,$00,$01,$01,
16591  6D53 FF FF 00 01 
16591  6D57 01 01 00 01 
16591  6D5B 01 01 00 FF 
16591  6D5F FF FF 00 01 
16591  6D63 01 
16592  6D64 00 00 00 00 .fill 9, 0
16592  6D68 00 00 00 00 
16592  6D6C 00 
16593  6D6D 00          _docked: .fill 1, 0
16594  6D6E 00 00       _energy: .fill 2, 0
16595  6D70 B8 0B       _energy0: .dw $0bb8
16596  6D72 00 00 00 00 _map_data: .fill 162, 0
16596  6D76 00 00 00 00 
16596  6D7A 00 00 00 00 
16596  6D7E 00 00 00 00 
16596  6D82 00 00 00 00 
16596  6D86 00 00 00 00 
16596  6D8A 00 00 00 00 
16596  6D8E 00 00 00 00 
16596  6D92 00 00 00 00 
16596  6D96 00 00 00 00 
16596  6D9A 00 00 00 00 
16596  6D9E 00 00 00 00 
16596  6DA2 00 00 00 00 
16596  6DA6 00 00 00 00 
16596  6DAA 00 00 00 00 
16596  6DAE 00 00 00 00 
16596  6DB2 00 00 00 00 
16596  6DB6 00 00 00 00 
16596  6DBA 00 00 00 00 
16596  6DBE 00 00 00 00 
16596  6DC2 00 00 00 00 
16596  6DC6 00 00 00 00 
16596  6DCA 00 00 00 00 
16596  6DCE 00 00 00 00 
16596  6DD2 00 00 00 00 
16596  6DD6 00 00 00 00 
16596  6DDA 00 00 00 00 
16596  6DDE 00 00 00 00 
16596  6DE2 00 00 00 00 
16596  6DE6 00 00 00 00 
16596  6DEA 00 00 00 00 
16596  6DEE 00 00 00 00 
16596  6DF2 00 00 00 00 
16596  6DF6 00 00 00 00 
16596  6DFA 00 00 00 00 
16596  6DFE 00 00 00 00 
16596  6E02 00 00 00 00 
16596  6E06 00 00 00 00 
16596  6E0A 00 00 00 00 
16596  6E0E 00 00 00 00 
16596  6E12 00 00 
16597  6E14 00 00 00 00 _kdata_data: .fill 12, 0
16597  6E18 00 00 00 00 
16597  6E1C 00 00 00 00 
16598  6E20 00          _klingons: .fill 1, 0
16599  6E21 00          _total_klingons: .fill 1, 0
16600  6E22 00          _klingons_left: .fill 1, 0
16601  6E23 00          _torps: .fill 1, 0
16602  6E24 0A          _torps0: .db $0a
16603  6E25 00 00       _quad_y: .fill 2, 0
16604  6E27 00 00       _quad_x: .fill 2, 0
16605  6E29 00 00       _shield: .fill 2, 0
16606  6E2B 00          _stars: .fill 1, 0
16607  6E2C 00 00       _time_start: .fill 2, 0
16608  6E2E 00 00       _time_up: .fill 2, 0
16609  6E30 00 00 00 00 _damage_data: .fill 18, 0
16609  6E34 00 00 00 00 
16609  6E38 00 00 00 00 
16609  6E3C 00 00 00 00 
16609  6E40 00 00 
16610  6E42 00 00       _d4: .fill 2, 0
16611  6E44 00 00       _ship_y: .fill 2, 0
16612  6E46 00 00       _ship_x: .fill 2, 0
16613  6E48 00 00       _stardate: .fill 2, 0
16614  6E4A 00 00 00 00 _quad_data: .fill 64, 0
16614  6E4E 00 00 00 00 
16614  6E52 00 00 00 00 
16614  6E56 00 00 00 00 
16614  6E5A 00 00 00 00 
16614  6E5E 00 00 00 00 
16614  6E62 00 00 00 00 
16614  6E66 00 00 00 00 
16614  6E6A 00 00 00 00 
16614  6E6E 00 00 00 00 
16614  6E72 00 00 00 00 
16614  6E76 00 00 00 00 
16614  6E7A 00 00 00 00 
16614  6E7E 00 00 00 00 
16614  6E82 00 00 00 00 
16614  6E86 00 00 00 00 
16615  6E8A 00 00 00 00 _quadname_data: .fill 12, 0
16615  6E8E 00 00 00 00 
16615  6E92 00 00 00 00 
16616  6E96 72 65 70 6F _inc_1_data: .db "reports:\n  Incorrect course data, sir!\n", 0
16616  6E9A 72 74 73 3A 
16616  6E9E 0A 20 20 49 
16616  6EA2 6E 63 6F 72 
16616  6EA6 72 65 63 74 
16616  6EAA 20 63 6F 75 
16616  6EAE 72 73 65 20 
16616  6EB2 64 61 74 61 
16616  6EB6 2C 20 73 69 
16616  6EBA 72 21 0A 00 
16617  6EBE 96 6E       _inc_1: .dw _inc_1_data
16618  6EC0             _quad_name_data: 
16619  6EC0 00 00       .dw 
16620  6EC2 43 70 44 70 .dw _s0, _s1, _s2, _s3, _s4, _s5, _s6, _s7, _s8, _s9, _s10, _s11, _s12, _s13, _s14, _s15, _s16, 
16620  6EC6 4C 70 52 70 
16620  6ECA 5A 70 5F 70 
16620  6ECE 67 70 6E 70 
16620  6ED2 7A 70 81 70 
16620  6ED6 88 70 8E 70 
16620  6EDA 96 70 A1 70 
16620  6EDE AB 70 B3 70 
16620  6EE2 BC 70 
16621  6EE4 00 00 00 00 .fill 34, 0
16621  6EE8 00 00 00 00 
16621  6EEC 00 00 00 00 
16621  6EF0 00 00 00 00 
16621  6EF4 00 00 00 00 
16621  6EF8 00 00 00 00 
16621  6EFC 00 00 00 00 
16621  6F00 00 00 00 00 
16621  6F04 00 00 
16622  6F06             _device_name_data: 
16623  6F06 00 00       .dw 
16624  6F08 43 70 C2 70 .dw _s0, _s17, _s18, _s19, _s20, _s21, _s22, _s23, _s24, 
16624  6F0C CF 70 E3 70 
16624  6F10 F6 70 05 71 
16624  6F14 12 71 21 71 
16624  6F18 30 71 
16625  6F1A 00 00 00 00 .fill 18, 0
16625  6F1E 00 00 00 00 
16625  6F22 00 00 00 00 
16625  6F26 00 00 00 00 
16625  6F2A 00 00 
16626  6F2C 44 61 6D 61 _dcr_1_data: .db "Damage Control report:", 0
16626  6F30 67 65 20 43 
16626  6F34 6F 6E 74 72 
16626  6F38 6F 6C 20 72 
16626  6F3C 65 70 6F 72 
16626  6F40 74 3A 00 
16627  6F43 2C 6F       _dcr_1: .dw _dcr_1_data
16628  6F45             _plural_2_data: 
16629  6F45 00          .db 
16630  6F46 00 00       .db $00,$00,
16631  6F48             _plural_data: 
16632  6F48 00          .db 
16633  6F49 69 73 00    .db $69,$73,$00,
16634  6F4C 00          .fill 1, 0
16635  6F4D             _warpmax_data: 
16636  6F4D 00          .db 
16637  6F4E 08          .db $08,
16638  6F4F 00 00 00    .fill 3, 0
16639  6F52 2D 2D 2D 2D _srs_1_data: .db "------------------------", 0
16639  6F56 2D 2D 2D 2D 
16639  6F5A 2D 2D 2D 2D 
16639  6F5E 2D 2D 2D 2D 
16639  6F62 2D 2D 2D 2D 
16639  6F66 2D 2D 2D 2D 
16639  6F6A 00 
16640  6F6B 52 6F       _srs_1: .dw _srs_1_data
16641  6F6D             _tilestr_data: 
16642  6F6D 00 00       .dw 
16643  6F6F 41 71 45 71 .dw _s25, _s26, _s27, _s28, _s29, 
16643  6F73 49 71 4D 71 
16643  6F77 51 71 
16644  6F79 00 00 00 00 .fill 10, 0
16644  6F7D 00 00 00 00 
16644  6F81 00 00 
16645  6F83 2D 2D 2D 2D _lrs_1_data: .db "-------------------\n", 0
16645  6F87 2D 2D 2D 2D 
16645  6F8B 2D 2D 2D 2D 
16645  6F8F 2D 2D 2D 2D 
16645  6F93 2D 2D 2D 0A 
16645  6F97 00 
16646  6F98 83 6F       _lrs_1: .dw _lrs_1_data
16647  6F9A 20 20 20 2D _gr_1_data: .db "   ----- ----- ----- ----- ----- ----- ----- -----\n", 0
16647  6F9E 2D 2D 2D 2D 
16647  6FA2 20 2D 2D 2D 
16647  6FA6 2D 2D 20 2D 
16647  6FAA 2D 2D 2D 2D 
16647  6FAE 20 2D 2D 2D 
16647  6FB2 2D 2D 20 2D 
16647  6FB6 2D 2D 2D 2D 
16647  6FBA 20 2D 2D 2D 
16647  6FBE 2D 2D 20 2D 
16647  6FC2 2D 2D 2D 2D 
16647  6FC6 20 2D 2D 2D 
16647  6FCA 2D 2D 0A 00 
16648  6FCE 9A 6F       _gr_1: .dw _gr_1_data
16649  6FD0 73 00       _str_s_data: .db "s", 0
16650  6FD2 D0 6F       _str_s: .dw _str_s_data
16651  6FD4 20 20 2D 2D _gm_1_data: .db "  ----- ----- ----- ----- ----- ----- ----- -----\n", 0
16651  6FD8 2D 2D 2D 20 
16651  6FDC 2D 2D 2D 2D 
16651  6FE0 2D 20 2D 2D 
16651  6FE4 2D 2D 2D 20 
16651  6FE8 2D 2D 2D 2D 
16651  6FEC 2D 20 2D 2D 
16651  6FF0 2D 2D 2D 20 
16651  6FF4 2D 2D 2D 2D 
16651  6FF8 2D 20 2D 2D 
16651  6FFC 2D 2D 2D 20 
16651  7000 2D 2D 2D 2D 
16651  7004 2D 0A 00 
16652  7007 D4 6F       _gm_1: .dw _gm_1_data
16653  7009 20 20 44 49 _dist_1_data: .db "  DISTANCE = %s\n\n", 0
16653  700D 53 54 41 4E 
16653  7011 43 45 20 3D 
16653  7015 20 25 73 0A 
16653  7019 0A 00 
16654  701B 09 70       _dist_1: .dw _dist_1_data
16655  701D 00 00 00 00 st_print100_buf_dt: .fill 16, 0
16655  7021 00 00 00 00 
16655  7025 00 00 00 00 
16655  7029 00 00 00 00 
16656  702D             st_quadrant_name_sect_name_dt: 
16657  702D 43 70 03 83 .dw _s0, _s164, _s165, _s166, _s167, 
16657  7031 06 83 0A 83 
16657  7035 0F 83 
16658  7037 00 00 00 00 .fill 10, 0
16658  703B 00 00 00 00 
16658  703F 00 00 
16659  7041 2D 70       st_quadrant_name_sect_name: .dw st_quadrant_name_sect_name_dt
16660  7043 00          _s0: .db "", 0
16661  7044 41 6E 74 61 _s1: .db "Antares", 0
16661  7048 72 65 73 00 
16662  704C 52 69 67 65 _s2: .db "Rigel", 0
16662  7050 6C 00 
16663  7052 50 72 6F 63 _s3: .db "Procyon", 0
16663  7056 79 6F 6E 00 
16664  705A 56 65 67 61 _s4: .db "Vega", 0
16664  705E 00 
16665  705F 43 61 6E 6F _s5: .db "Canopus", 0
16665  7063 70 75 73 00 
16666  7067 41 6C 74 61 _s6: .db "Altair", 0
16666  706B 69 72 00 
16667  706E 53 61 67 69 _s7: .db "Sagittarius", 0
16667  7072 74 74 61 72 
16667  7076 69 75 73 00 
16668  707A 50 6F 6C 6C _s8: .db "Pollux", 0
16668  707E 75 78 00 
16669  7081 53 69 72 69 _s9: .db "Sirius", 0
16669  7085 75 73 00 
16670  7088 44 65 6E 65 _s10: .db "Deneb", 0
16670  708C 62 00 
16671  708E 43 61 70 65 _s11: .db "Capella", 0
16671  7092 6C 6C 61 00 
16672  7096 42 65 74 65 _s12: .db "Betelgeuse", 0
16672  709A 6C 67 65 75 
16672  709E 73 65 00 
16673  70A1 41 6C 64 65 _s13: .db "Aldebaran", 0
16673  70A5 62 61 72 61 
16673  70A9 6E 00 
16674  70AB 52 65 67 75 _s14: .db "Regulus", 0
16674  70AF 6C 75 73 00 
16675  70B3 41 72 63 74 _s15: .db "Arcturus", 0
16675  70B7 75 72 75 73 
16675  70BB 00 
16676  70BC 53 70 69 63 _s16: .db "Spica", 0
16676  70C0 61 00 
16677  70C2 57 61 72 70 _s17: .db "Warp engines", 0
16677  70C6 20 65 6E 67 
16677  70CA 69 6E 65 73 
16677  70CE 00 
16678  70CF 53 68 6F 72 _s18: .db "Short range sensors", 0
16678  70D3 74 20 72 61 
16678  70D7 6E 67 65 20 
16678  70DB 73 65 6E 73 
16678  70DF 6F 72 73 00 
16679  70E3 4C 6F 6E 67 _s19: .db "Long range sensors", 0
16679  70E7 20 72 61 6E 
16679  70EB 67 65 20 73 
16679  70EF 65 6E 73 6F 
16679  70F3 72 73 00 
16680  70F6 50 68 61 73 _s20: .db "Phaser control", 0
16680  70FA 65 72 20 63 
16680  70FE 6F 6E 74 72 
16680  7102 6F 6C 00 
16681  7105 50 68 6F 74 _s21: .db "Photon tubes", 0
16681  7109 6F 6E 20 74 
16681  710D 75 62 65 73 
16681  7111 00 
16682  7112 44 61 6D 61 _s22: .db "Damage control", 0
16682  7116 67 65 20 63 
16682  711A 6F 6E 74 72 
16682  711E 6F 6C 00 
16683  7121 53 68 69 65 _s23: .db "Shield control", 0
16683  7125 6C 64 20 63 
16683  7129 6F 6E 74 72 
16683  712D 6F 6C 00 
16684  7130 4C 69 62 72 _s24: .db "Library computer", 0
16684  7134 61 72 79 20 
16684  7138 63 6F 6D 70 
16684  713C 75 74 65 72 
16684  7140 00 
16685  7141 20 20 20 00 _s25: .db "   ", 0
16686  7145 20 2A 20 00 _s26: .db " * ", 0
16687  7149 3E 21 3C 00 _s27: .db ">!<", 0
16688  714D 2B 4B 2B 00 _s28: .db "+K+", 0
16689  7151 3C 2A 3E 00 _s29: .db "<*>", 0
16690  7155 61 72 65 00 _s30: .db "are", 0
16691  7159 69 73 00    _s31: .db "is", 0
16692  715C 25 73 20 25 _s32: .db "%s %s inoperable.\n", 0
16692  7160 73 20 69 6E 
16692  7164 6F 70 65 72 
16692  7168 61 62 6C 65 
16692  716C 2E 0A 00 
16693  716F 73 74 61 72 _s33: .db "startrek.intro", 0
16693  7173 74 72 65 6B 
16693  7177 2E 69 6E 74 
16693  717B 72 6F 00 
16694  717E 73 74 61 72 _s34: .db "startrek.doc", 0
16694  7182 74 72 65 6B 
16694  7186 2E 64 6F 63 
16694  718A 00 
16695  718B 73 74 61 72 _s35: .db "startrek.logo", 0
16695  718F 74 72 65 6B 
16695  7193 2E 6C 6F 67 
16695  7197 6F 00 
16696  7199 73 74 61 72 _s36: .db "startrek.fatal", 0
16696  719D 74 72 65 6B 
16696  71A1 2E 66 61 74 
16696  71A5 61 6C 00 
16697  71A8 43 6F 6D 6D _s37: .db "Command? ", 0
16697  71AC 61 6E 64 3F 
16697  71B0 20 00 
16698  71B2 6E 61 76 00 _s38: .db "nav", 0
16699  71B6 73 72 73 00 _s39: .db "srs", 0
16700  71BA 6C 72 73 00 _s40: .db "lrs", 0
16701  71BE 70 68 61 00 _s41: .db "pha", 0
16702  71C2 74 6F 72 00 _s42: .db "tor", 0
16703  71C6 73 68 69 00 _s43: .db "shi", 0
16704  71CA 64 61 6D 00 _s44: .db "dam", 0
16705  71CE 63 6F 6D 00 _s45: .db "com", 0
16706  71D2 78 78 78 00 _s46: .db "xxx", 0
16707  71D6 45 6E 74 65 _s47: .db "Enter one of the following:\n", 0
16707  71DA 72 20 6F 6E 
16707  71DE 65 20 6F 66 
16707  71E2 20 74 68 65 
16707  71E6 20 66 6F 6C 
16707  71EA 6C 6F 77 69 
16707  71EE 6E 67 3A 0A 
16707  71F2 00 
16708  71F3 20 20 6E 61 _s48: .db "  nav - To Set Course", 0
16708  71F7 76 20 2D 20 
16708  71FB 54 6F 20 53 
16708  71FF 65 74 20 43 
16708  7203 6F 75 72 73 
16708  7207 65 00 
16709  7209 20 20 73 72 _s49: .db "  srs - Short Range Sensors", 0
16709  720D 73 20 2D 20 
16709  7211 53 68 6F 72 
16709  7215 74 20 52 61 
16709  7219 6E 67 65 20 
16709  721D 53 65 6E 73 
16709  7221 6F 72 73 00 
16710  7225 20 20 6C 72 _s50: .db "  lrs - Long Range Sensors", 0
16710  7229 73 20 2D 20 
16710  722D 4C 6F 6E 67 
16710  7231 20 52 61 6E 
16710  7235 67 65 20 53 
16710  7239 65 6E 73 6F 
16710  723D 72 73 00 
16711  7240 20 20 70 68 _s51: .db "  pha - Phasers", 0
16711  7244 61 20 2D 20 
16711  7248 50 68 61 73 
16711  724C 65 72 73 00 
16712  7250 20 20 74 6F _s52: .db "  tor - Photon Torpedoes", 0
16712  7254 72 20 2D 20 
16712  7258 50 68 6F 74 
16712  725C 6F 6E 20 54 
16712  7260 6F 72 70 65 
16712  7264 64 6F 65 73 
16712  7268 00 
16713  7269 20 20 73 68 _s53: .db "  shi - Shield Control", 0
16713  726D 69 20 2D 20 
16713  7271 53 68 69 65 
16713  7275 6C 64 20 43 
16713  7279 6F 6E 74 72 
16713  727D 6F 6C 00 
16714  7280 20 20 64 61 _s54: .db "  dam - Damage Control", 0
16714  7284 6D 20 2D 20 
16714  7288 44 61 6D 61 
16714  728C 67 65 20 43 
16714  7290 6F 6E 74 72 
16714  7294 6F 6C 00 
16715  7297 20 20 63 6F _s55: .db "  com - Library Computer", 0
16715  729B 6D 20 2D 20 
16715  729F 4C 69 62 72 
16715  72A3 61 72 79 20 
16715  72A7 43 6F 6D 70 
16715  72AB 75 74 65 72 
16715  72AF 00 
16716  72B0 20 20 78 78 _s56: .db "  xxx - Resign Command\n", 0
16716  72B4 78 20 2D 20 
16716  72B8 52 65 73 69 
16716  72BC 67 6E 20 43 
16716  72C0 6F 6D 6D 61 
16716  72C4 6E 64 0A 00 
16717  72C8 73 00       _s57: .db "s", 0
16718  72CA 4E 6F 77 20 _s58: .db "Now entering %s quadrant...\n\n", 0
16718  72CE 65 6E 74 65 
16718  72D2 72 69 6E 67 
16718  72D6 20 25 73 20 
16718  72DA 71 75 61 64 
16718  72DE 72 61 6E 74 
16718  72E2 2E 2E 2E 0A 
16718  72E6 0A 00 
16719  72E8 0A 59 6F 75 _s59: .db "\nYour mission begins with your starship located", 0
16719  72EC 72 20 6D 69 
16719  72F0 73 73 69 6F 
16719  72F4 6E 20 62 65 
16719  72F8 67 69 6E 73 
16719  72FC 20 77 69 74 
16719  7300 68 20 79 6F 
16719  7304 75 72 20 73 
16719  7308 74 61 72 73 
16719  730C 68 69 70 20 
16719  7310 6C 6F 63 61 
16719  7314 74 65 64 00 
16720  7318 69 6E 20 74 _s60: .db "in the galactic quadrant %s.\n\n", 0
16720  731C 68 65 20 67 
16720  7320 61 6C 61 63 
16720  7324 74 69 63 20 
16720  7328 71 75 61 64 
16720  732C 72 61 6E 74 
16720  7330 20 25 73 2E 
16720  7334 0A 0A 00 
16721  7337 43 6F 6D 62 _s61: .db "Combat Area  Condition Red\n", 0
16721  733B 61 74 20 41 
16721  733F 72 65 61 20 
16721  7343 20 43 6F 6E 
16721  7347 64 69 74 69 
16721  734B 6F 6E 20 52 
16721  734F 65 64 0A 00 
16722  7353 53 68 69 65 _s62: .db "Shields Dangerously Low\n", 0
16722  7357 6C 64 73 20 
16722  735B 44 61 6E 67 
16722  735F 65 72 6F 75 
16722  7363 73 6C 79 20 
16722  7367 4C 6F 77 0A 
16722  736B 00 
16723  736C 43 6F 75 72 _s63: .db "Course (0-9): ", 0
16723  7370 73 65 20 28 
16723  7374 30 2D 39 29 
16723  7378 3A 20 00 
16724  737B 4C 74 2E 20 _s64: .db "Lt. Sulu%s", 0
16724  737F 53 75 6C 75 
16724  7383 25 73 00 
16725  7386 30 2E 32 00 _s65: .db "0.2", 0
16726  738A 57 61 72 70 _s66: .db "Warp Factor (0-%s): ", 0
16726  738E 20 46 61 63 
16726  7392 74 6F 72 20 
16726  7396 28 30 2D 25 
16726  739A 73 29 3A 20 
16726  739E 00 
16727  739F 57 61 72 70 _s67: .db "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n", 0
16727  73A3 20 45 6E 67 
16727  73A7 69 6E 65 73 
16727  73AB 20 61 72 65 
16727  73AF 20 64 61 6D 
16727  73B3 61 67 65 64 
16727  73B7 2E 20 4D 61 
16727  73BB 78 69 6D 75 
16727  73BF 6D 20 73 70 
16727  73C3 65 65 64 20 
16727  73C7 3D 20 57 61 
16727  73CB 72 70 20 30 
16727  73CF 2E 32 2E 0A 
16727  73D3 0A 00 
16728  73D5 43 68 69 65 _s68: .db "Chief Engineer Scott reports:\n  The engines won't take warp %s!\n\n", 0
16728  73D9 66 20 45 6E 
16728  73DD 67 69 6E 65 
16728  73E1 65 72 20 53 
16728  73E5 63 6F 74 74 
16728  73E9 20 72 65 70 
16728  73ED 6F 72 74 73 
16728  73F1 3A 0A 20 20 
16728  73F5 54 68 65 20 
16728  73F9 65 6E 67 69 
16728  73FD 6E 65 73 20 
16728  7401 77 6F 6E 27 
16728  7405 74 20 74 61 
16728  7409 6B 65 20 77 
16728  740D 61 72 70 20 
16728  7411 25 73 21 0A 
16728  7415 0A 
16729  7416 45 6E 67 69 _s69: .db "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", 0
16729  741A 6E 65 65 72 
16729  741E 69 6E 67 20 
16729  7422 72 65 70 6F 
16729  7426 72 74 73 3A 
16729  742A 0A 20 20 49 
16729  742E 6E 73 75 66 
16729  7432 66 69 63 69 
16729  7436 65 6E 74 20 
16729  743A 65 6E 65 72 
16729  743E 67 79 20 61 
16729  7442 76 61 69 6C 
16729  7446 61 62 6C 65 
16729  744A 20 66 6F 72 
16729  744E 20 6D 61 6E 
16729  7452 65 75 76 65 
16729  7456 72 69 6E 67 
16729  745A 20 61 74 20 
16729  745E 77 61 72 70 
16729  7462 20 25 73 21 
16729  7466 0A 0A 00 
16730  7469 44 65 66 6C _s70: .db "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", 0
16730  746D 65 63 74 6F 
16730  7471 72 20 43 6F 
16730  7475 6E 74 72 6F 
16730  7479 6C 20 52 6F 
16730  747D 6F 6D 20 61 
16730  7481 63 6B 6E 6F 
16730  7485 77 6C 65 64 
16730  7489 67 65 73 3A 
16730  748D 0A 20 20 25 
16730  7491 64 20 75 6E 
16730  7495 69 74 73 20 
16730  7499 6F 66 20 65 
16730  749D 6E 65 72 67 
16730  74A1 79 20 70 72 
16730  74A5 65 73 65 6E 
16730  74A9 74 6C 79 20 
16730  74AD 64 65 70 6C 
16730  74B1 6F 79 65 64 
16730  74B5 20 74 6F 20 
16730  74B9 73 68 69 65 
16730  74BD 6C 64 73 2E 
16730  74C1 0A 00 
16731  74C3 4C 54 2E 20 _s71: .db "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denie"
16731  74C7 55 68 75 72 
16731  74CB 61 20 72 65 
16731  74CF 70 6F 72 74 
16731  74D3 73 3A 0A 20 
16731  74D7 4D 65 73 73 
16731  74DB 61 67 65 20 
16731  74DF 66 72 6F 6D 
16731  74E3 20 53 74 61 
16731  74E7 72 66 6C 65 
16731  74EB 65 74 20 43 
16731  74EF 6F 6D 6D 61 
16731  74F3 6E 64 3A 0A 
16731  74F7 0A 20 50 65 
16731  74FB 72 6D 69 73 
16731  74FF 73 69 6F 6E 
16731  7503 20 74 6F 20 
16731  7507 61 74 74 65 
16731  750B 6D 70 74 20 
16731  750F 63 72 6F 73 
16731  7513 73 69 6E 67 
16731  7517 20 6F 66 20 
16731  751B 67 61 6C 61 
16731  751F 63 74 69 63 
16731  7523 20 70 65 72 
16731  7527 69 6D 65 74 
16731  752B 65 72 0A 20 
16731  752F 69 73 20 68 
16731  7533 65 72 65 62 
16731  7537 79 20 2A 64 
16731  753B 65 6E 69 65 
16732  753F 64 2A 2E 20 .db "d*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", 0
16732  7543 53 68 75 74 
16732  7547 20 64 6F 77 
16732  754B 6E 20 79 6F 
16732  754F 75 72 20 65 
16732  7553 6E 67 69 6E 
16732  7557 65 73 2E 0A 
16732  755B 0A 20 43 68 
16732  755F 69 65 66 20 
16732  7563 45 6E 67 69 
16732  7567 6E 65 65 72 
16732  756B 20 53 63 6F 
16732  756F 74 74 20 72 
16732  7573 65 70 6F 72 
16732  7577 74 73 3A 0A 
16732  757B 20 57 61 72 
16732  757F 70 20 45 6E 
16732  7583 67 69 6E 65 
16732  7587 73 20 73 68 
16732  758B 75 74 20 64 
16732  758F 6F 77 6E 20 
16732  7593 61 74 20 73 
16732  7597 65 63 74 6F 
16732  759B 72 20 25 64 
16732  759F 2C 20 25 64 
16732  75A3 20 6F 66 20 
16732  75A7 71 75 61 64 
16732  75AB 72 61 6E 74 
16732  75AF 20 25 64 2C 
16732  75B3 20 25 64 2E 
16732  75B7 0A 0A 00 
16733  75BA 57 61 72 70 _s72: .db "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", 0
16733  75BE 20 45 6E 67 
16733  75C2 69 6E 65 73 
16733  75C6 20 73 68 75 
16733  75CA 74 20 64 6F 
16733  75CE 77 6E 20 61 
16733  75D2 74 20 73 65 
16733  75D6 63 74 6F 72 
16733  75DA 20 25 64 2C 
16733  75DE 20 25 64 20 
16733  75E2 64 75 65 20 
16733  75E6 74 6F 20 62 
16733  75EA 61 64 20 6E 
16733  75EE 61 76 69 67 
16733  75F2 61 74 69 6F 
16733  75F6 6E 2E 0A 0A 
16733  75FA 00 
16734  75FB 53 68 69 65 _s73: .db "Shield Control supplies energy to complete maneuver.\n", 0
16734  75FF 6C 64 20 43 
16734  7603 6F 6E 74 72 
16734  7607 6F 6C 20 73 
16734  760B 75 70 70 6C 
16734  760F 69 65 73 20 
16734  7613 65 6E 65 72 
16734  7617 67 79 20 74 
16734  761B 6F 20 63 6F 
16734  761F 6D 70 6C 65 
16734  7623 74 65 20 6D 
16734  7627 61 6E 65 75 
16734  762B 76 65 72 2E 
16734  762F 0A 00 
16735  7631 47 52 45 45 _s74: .db "GREEN", 0
16735  7635 4E 00 
16736  7637 59 45 4C 4C _s75: .db "YELLOW", 0
16736  763B 4F 57 00 
16737  763E 2A 52 45 44 _s76: .db "*RED*", 0
16737  7642 2A 00 
16738  7644 44 4F 43 4B _s77: .db "DOCKED", 0
16738  7648 45 44 00 
16739  764B 53 68 69 65 _s78: .db "Shields dropped for docking purposes.", 0
16739  764F 6C 64 73 20 
16739  7653 64 72 6F 70 
16739  7657 70 65 64 20 
16739  765B 66 6F 72 20 
16739  765F 64 6F 63 6B 
16739  7663 69 6E 67 20 
16739  7667 70 75 72 70 
16739  766B 6F 73 65 73 
16739  766F 2E 00 
16740  7671 0A 2A 2A 2A _s79: .db "\n*** Short Range Sensors are out ***", 0
16740  7675 20 53 68 6F 
16740  7679 72 74 20 52 
16740  767D 61 6E 67 65 
16740  7681 20 53 65 6E 
16740  7685 73 6F 72 73 
16740  7689 20 61 72 65 
16740  768D 20 6F 75 74 
16740  7691 20 2A 2A 2A 
16740  7695 00 
16741  7696 20 20 20 20 _s80: .db "    Stardate            %d\n", 0
16741  769A 53 74 61 72 
16741  769E 64 61 74 65 
16741  76A2 20 20 20 20 
16741  76A6 20 20 20 20 
16741  76AA 20 20 20 20 
16741  76AE 25 64 0A 00 
16742  76B2 20 20 20 20 _s81: .db "    Condition           %s\n", 0
16742  76B6 43 6F 6E 64 
16742  76BA 69 74 69 6F 
16742  76BE 6E 20 20 20 
16742  76C2 20 20 20 20 
16742  76C6 20 20 20 20 
16742  76CA 25 73 0A 00 
16743  76CE 20 20 20 20 _s82: .db "    Quadrant            %d, %d\n", 0
16743  76D2 51 75 61 64 
16743  76D6 72 61 6E 74 
16743  76DA 20 20 20 20 
16743  76DE 20 20 20 20 
16743  76E2 20 20 20 20 
16743  76E6 25 64 2C 20 
16743  76EA 25 64 0A 00 
16744  76EE 20 20 20 20 _s83: .db "    Sector              %d, %d\n", 0
16744  76F2 53 65 63 74 
16744  76F6 6F 72 20 20 
16744  76FA 20 20 20 20 
16744  76FE 20 20 20 20 
16744  7702 20 20 20 20 
16744  7706 25 64 2C 20 
16744  770A 25 64 0A 00 
16745  770E 20 20 20 20 _s84: .db "    Photon Torpedoes    %d\n", 0
16745  7712 50 68 6F 74 
16745  7716 6F 6E 20 54 
16745  771A 6F 72 70 65 
16745  771E 64 6F 65 73 
16745  7722 20 20 20 20 
16745  7726 25 64 0A 00 
16746  772A 20 20 20 20 _s85: .db "    Total Energy        %d\n", 0
16746  772E 54 6F 74 61 
16746  7732 6C 20 45 6E 
16746  7736 65 72 67 79 
16746  773A 20 20 20 20 
16746  773E 20 20 20 20 
16746  7742 25 64 0A 00 
16747  7746 20 20 20 20 _s86: .db "    Shields             %d\n", 0
16747  774A 53 68 69 65 
16747  774E 6C 64 73 20 
16747  7752 20 20 20 20 
16747  7756 20 20 20 20 
16747  775A 20 20 20 20 
16747  775E 25 64 0A 00 
16748  7762 20 20 20 20 _s87: .db "    Klingons Remaining  %d\n", 0
16748  7766 4B 6C 69 6E 
16748  776A 67 6F 6E 73 
16748  776E 20 52 65 6D 
16748  7772 61 69 6E 69 
16748  7776 6E 67 20 20 
16748  777A 25 64 0A 00 
16749  777E 4C 6F 6E 67 _s88: .db "Long Range Scan for Quadrant %d, %d\n\n", 0
16749  7782 20 52 61 6E 
16749  7786 67 65 20 53 
16749  778A 63 61 6E 20 
16749  778E 66 6F 72 20 
16749  7792 51 75 61 64 
16749  7796 72 61 6E 74 
16749  779A 20 25 64 2C 
16749  779E 20 25 64 0A 
16749  77A2 0A 00 
16750  77A4 25 73 3A 00 _s89: .db "%s:", 0
16751  77A8 2A 2A 2A 00 _s90: .db "***", 0
16752  77AC 20 3A 00    _s91: .db " :", 0
16753  77AF 25 73 0A 00 _s92: .db "%s\n", 0
16754  77B3 53 63 69 65 _s93: .db "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n", 0
16754  77B7 6E 63 65 20 
16754  77BB 4F 66 66 69 
16754  77BF 63 65 72 20 
16754  77C3 53 70 6F 63 
16754  77C7 6B 20 72 65 
16754  77CB 70 6F 72 74 
16754  77CF 73 3A 0A 20 
16754  77D3 20 27 53 65 
16754  77D7 6E 73 6F 72 
16754  77DB 73 20 73 68 
16754  77DF 6F 77 20 6E 
16754  77E3 6F 20 65 6E 
16754  77E7 65 6D 79 20 
16754  77EB 73 68 69 70 
16754  77EF 73 20 69 6E 
16754  77F3 20 74 68 69 
16754  77F7 73 20 71 75 
16754  77FB 61 64 72 61 
16754  77FF 6E 74 27 0A 
16754  7803 00 
16755  7804 43 6F 6D 70 _s94: .db "Computer failure hampers accuracy.", 0
16755  7808 75 74 65 72 
16755  780C 20 66 61 69 
16755  7810 6C 75 72 65 
16755  7814 20 68 61 6D 
16755  7818 70 65 72 73 
16755  781C 20 61 63 63 
16755  7820 75 72 61 63 
16755  7824 79 2E 00 
16756  7827 50 68 61 73 _s95: .db "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", 0
16756  782B 65 72 73 20 
16756  782F 6C 6F 63 6B 
16756  7833 65 64 20 6F 
16756  7837 6E 20 74 61 
16756  783B 72 67 65 74 
16756  783F 3B 0A 20 45 
16756  7843 6E 65 72 67 
16756  7847 79 20 61 76 
16756  784B 61 69 6C 61 
16756  784F 62 6C 65 20 
16756  7853 3D 20 25 64 
16756  7857 20 75 6E 69 
16756  785B 74 73 0A 0A 
16756  785F 20 4E 75 6D 
16756  7863 62 65 72 20 
16756  7867 6F 66 20 75 
16756  786B 6E 69 74 73 
16756  786F 20 74 6F 20 
16756  7873 66 69 72 65 
16756  7877 3A 20 00 
16757  787A 4E 6F 74 20 _s96: .db "Not enough energy available.\n", 0
16757  787E 65 6E 6F 75 
16757  7882 67 68 20 65 
16757  7886 6E 65 72 67 
16757  788A 79 20 61 76 
16757  788E 61 69 6C 61 
16757  7892 62 6C 65 2E 
16757  7896 0A 00 
16758  7898 53 65 6E 73 _s97: .db "Sensors show no damage to enemy at %d, %d\n\n", 0
16758  789C 6F 72 73 20 
16758  78A0 73 68 6F 77 
16758  78A4 20 6E 6F 20 
16758  78A8 64 61 6D 61 
16758  78AC 67 65 20 74 
16758  78B0 6F 20 65 6E 
16758  78B4 65 6D 79 20 
16758  78B8 61 74 20 25 
16758  78BC 64 2C 20 25 
16758  78C0 64 0A 0A 00 
16759  78C4 25 64 20 75 _s98: .db "%d unit hit on Klingon at sector %d, %d\n", 0
16759  78C8 6E 69 74 20 
16759  78CC 68 69 74 20 
16759  78D0 6F 6E 20 4B 
16759  78D4 6C 69 6E 67 
16759  78D8 6F 6E 20 61 
16759  78DC 74 20 73 65 
16759  78E0 63 74 6F 72 
16759  78E4 20 25 64 2C 
16759  78E8 20 25 64 0A 
16759  78EC 00 
16760  78ED 2A 2A 2A 20 _s99: .db "*** Klingon Destroyed ***\n", 0
16760  78F1 4B 6C 69 6E 
16760  78F5 67 6F 6E 20 
16760  78F9 44 65 73 74 
16760  78FD 72 6F 79 65 
16760  7901 64 20 2A 2A 
16760  7905 2A 0A 00 
16761  7908 20 20 20 28 _s100: .db "   (Sensors show %d units remaining.)\n\n", 0
16761  790C 53 65 6E 73 
16761  7910 6F 72 73 20 
16761  7914 73 68 6F 77 
16761  7918 20 25 64 20 
16761  791C 75 6E 69 74 
16761  7920 73 20 72 65 
16761  7924 6D 61 69 6E 
16761  7928 69 6E 67 2E 
16761  792C 29 0A 0A 00 
16762  7930 41 6C 6C 20 _s101: .db "All photon torpedoes expended", 0
16762  7934 70 68 6F 74 
16762  7938 6F 6E 20 74 
16762  793C 6F 72 70 65 
16762  7940 64 6F 65 73 
16762  7944 20 65 78 70 
16762  7948 65 6E 64 65 
16762  794C 64 00 
16763  794E 45 6E 73 69 _s102: .db "Ensign Chekov%s", 0
16763  7952 67 6E 20 43 
16763  7956 68 65 6B 6F 
16763  795A 76 25 73 00 
16764  795E 54 6F 72 70 _s103: .db "Torpedo Track:", 0
16764  7962 65 64 6F 20 
16764  7966 54 72 61 63 
16764  796A 6B 3A 00 
16765  796D 20 20 20 20 _s104: .db "    %d, %d\n", 0
16765  7971 25 64 2C 20 
16765  7975 25 64 0A 00 
16766  7979 54 6F 72 70 _s105: .db "Torpedo Missed\n", 0
16766  797D 65 64 6F 20 
16766  7981 4D 69 73 73 
16766  7985 65 64 0A 00 
16767  7989 53 74 61 72 _s106: .db "Star at %d, %d absorbed torpedo energy.\n\n", 0
16767  798D 20 61 74 20 
16767  7991 25 64 2C 20 
16767  7995 25 64 20 61 
16767  7999 62 73 6F 72 
16767  799D 62 65 64 20 
16767  79A1 74 6F 72 70 
16767  79A5 65 64 6F 20 
16767  79A9 65 6E 65 72 
16767  79AD 67 79 2E 0A 
16767  79B1 0A 00 
16768  79B3 2A 2A 2A 20 _s107: .db "*** Starbase Destroyed ***", 0
16768  79B7 53 74 61 72 
16768  79BB 62 61 73 65 
16768  79BF 20 44 65 73 
16768  79C3 74 72 6F 79 
16768  79C7 65 64 20 2A 
16768  79CB 2A 2A 00 
16769  79CE 54 68 61 74 _s108: .db "That does it, Captain!!", 0
16769  79D2 20 64 6F 65 
16769  79D6 73 20 69 74 
16769  79DA 2C 20 43 61 
16769  79DE 70 74 61 69 
16769  79E2 6E 21 21 00 
16770  79E6 59 6F 75 20 _s109: .db "You are hereby relieved of command\n", 0
16770  79EA 61 72 65 20 
16770  79EE 68 65 72 65 
16770  79F2 62 79 20 72 
16770  79F6 65 6C 69 65 
16770  79FA 76 65 64 20 
16770  79FE 6F 66 20 63 
16770  7A02 6F 6D 6D 61 
16770  7A06 6E 64 0A 00 
16771  7A0A 61 6E 64 20 _s110: .db "and sentenced to 99 stardates of hard", 0
16771  7A0E 73 65 6E 74 
16771  7A12 65 6E 63 65 
16771  7A16 64 20 74 6F 
16771  7A1A 20 39 39 20 
16771  7A1E 73 74 61 72 
16771  7A22 64 61 74 65 
16771  7A26 73 20 6F 66 
16771  7A2A 20 68 61 72 
16771  7A2E 64 00 
16772  7A30 6C 61 62 6F _s111: .db "labor on Cygnus 12!!\n", 0
16772  7A34 72 20 6F 6E 
16772  7A38 20 43 79 67 
16772  7A3C 6E 75 73 20 
16772  7A40 31 32 21 21 
16772  7A44 0A 00 
16773  7A46 53 74 61 72 _s112: .db "Starfleet Command reviewing your record to consider\n court martial!\n", 0
16773  7A4A 66 6C 65 65 
16773  7A4E 74 20 43 6F 
16773  7A52 6D 6D 61 6E 
16773  7A56 64 20 72 65 
16773  7A5A 76 69 65 77 
16773  7A5E 69 6E 67 20 
16773  7A62 79 6F 75 72 
16773  7A66 20 72 65 63 
16773  7A6A 6F 72 64 20 
16773  7A6E 74 6F 20 63 
16773  7A72 6F 6E 73 69 
16773  7A76 64 65 72 0A 
16773  7A7A 20 63 6F 75 
16773  7A7E 72 74 20 6D 
16773  7A82 61 72 74 69 
16773  7A86 61 6C 21 0A 
16773  7A8A 00 
16774  7A8B 44 61 6D 61 _s113: .db "Damage Control report not available.", 0
16774  7A8F 67 65 20 43 
16774  7A93 6F 6E 74 72 
16774  7A97 6F 6C 20 72 
16774  7A9B 65 70 6F 72 
16774  7A9F 74 20 6E 6F 
16774  7AA3 74 20 61 76 
16774  7AA7 61 69 6C 61 
16774  7AAB 62 6C 65 2E 
16774  7AAF 00 
16775  7AB0 0A 54 65 63 _s114: .db "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repa"
16775  7AB4 68 6E 69 63 
16775  7AB8 69 61 6E 73 
16775  7ABC 20 73 74 61 
16775  7AC0 6E 64 69 6E 
16775  7AC4 67 20 62 79 
16775  7AC8 20 74 6F 20 
16775  7ACC 65 66 66 65 
16775  7AD0 63 74 20 72 
16775  7AD4 65 70 61 69 
16775  7AD8 72 73 20 74 
16775  7ADC 6F 20 79 6F 
16775  7AE0 75 72 20 73 
16775  7AE4 68 69 70 3B 
16775  7AE8 0A 45 73 74 
16775  7AEC 69 6D 61 74 
16775  7AF0 65 64 20 74 
16775  7AF4 69 6D 65 20 
16775  7AF8 74 6F 20 72 
16775  7AFC 65 70 61 69 
16775  7B00 72 3A 20 25 
16775  7B04 73 20 73 74 
16775  7B08 61 72 64 61 
16775  7B0C 74 65 73 2E 
16775  7B10 0A 20 57 69 
16775  7B14 6C 6C 20 79 
16775  7B18 6F 75 20 61 
16775  7B1C 75 74 68 6F 
16775  7B20 72 69 7A 65 
16775  7B24 20 74 68 65 
16775  7B28 20 72 65 70 
16775  7B2C 61 
16776  7B2D 69 72 20 6F .db "ir order (y/N)? ", 0
16776  7B31 72 64 65 72 
16776  7B35 20 28 79 2F 
16776  7B39 4E 29 3F 20 
16776  7B3D 00 
16777  7B3E 44 65 76 69 _s115: .db "Device            State of Repair", 0
16777  7B42 63 65 20 20 
16777  7B46 20 20 20 20 
16777  7B4A 20 20 20 20 
16777  7B4E 20 20 53 74 
16777  7B52 61 74 65 20 
16777  7B56 6F 66 20 52 
16777  7B5A 65 70 61 69 
16777  7B5E 72 00 
16778  7B60 25 2D 32 35 _s116: .db "%-25s%6s\n", 0
16778  7B64 73 25 36 73 
16778  7B68 0A 00 
16779  7B6A 0A 00       _s117: .db "\n", 0
16780  7B6C 45 6E 65 72 _s118: .db "Energy available = %d\n\n Input number of units to shields: ", 0
16780  7B70 67 79 20 61 
16780  7B74 76 61 69 6C 
16780  7B78 61 62 6C 65 
16780  7B7C 20 3D 20 25 
16780  7B80 64 0A 0A 20 
16780  7B84 49 6E 70 75 
16780  7B88 74 20 6E 75 
16780  7B8C 6D 62 65 72 
16780  7B90 20 6F 66 20 
16780  7B94 75 6E 69 74 
16780  7B98 73 20 74 6F 
16780  7B9C 20 73 68 69 
16780  7BA0 65 6C 64 73 
16780  7BA4 3A 20 00 
16781  7BA7 3C 53 68 69 _s119: .db "<Shields Unchanged>\n", 0
16781  7BAB 65 6C 64 73 
16781  7BAF 20 55 6E 63 
16781  7BB3 68 61 6E 67 
16781  7BB7 65 64 3E 0A 
16781  7BBB 00 
16782  7BBC 53 68 69 65 _s120: .db "Shield Control Reports:\n  'This is not the Federation Treasury.'", 0
16782  7BC0 6C 64 20 43 
16782  7BC4 6F 6E 74 72 
16782  7BC8 6F 6C 20 52 
16782  7BCC 65 70 6F 72 
16782  7BD0 74 73 3A 0A 
16782  7BD4 20 20 27 54 
16782  7BD8 68 69 73 20 
16782  7BDC 69 73 20 6E 
16782  7BE0 6F 74 20 74 
16782  7BE4 68 65 20 46 
16782  7BE8 65 64 65 72 
16782  7BEC 61 74 69 6F 
16782  7BF0 6E 20 54 72 
16782  7BF4 65 61 73 75 
16782  7BF8 72 79 2E 27 
16782  7BFC 00 
16783  7BFD 44 65 66 6C _s121: .db "Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n", 0
16783  7C01 65 63 74 6F 
16783  7C05 72 20 43 6F 
16783  7C09 6E 74 72 6F 
16783  7C0D 6C 20 52 6F 
16783  7C11 6F 6D 20 72 
16783  7C15 65 70 6F 72 
16783  7C19 74 3A 0A 20 
16783  7C1D 20 27 53 68 
16783  7C21 69 65 6C 64 
16783  7C25 73 20 6E 6F 
16783  7C29 77 20 61 74 
16783  7C2D 20 25 64 20 
16783  7C31 75 6E 69 74 
16783  7C35 73 20 70 65 
16783  7C39 72 20 79 6F 
16783  7C3D 75 72 20 63 
16783  7C41 6F 6D 6D 61 
16783  7C45 6E 64 2E 27 
16783  7C49 0A 0A 00 
16784  7C4C 43 6F 6D 70 _s122: .db "Computer active and awating command: ", 0
16784  7C50 75 74 65 72 
16784  7C54 20 61 63 74 
16784  7C58 69 76 65 20 
16784  7C5C 61 6E 64 20 
16784  7C60 61 77 61 74 
16784  7C64 69 6E 67 20 
16784  7C68 63 6F 6D 6D 
16784  7C6C 61 6E 64 3A 
16784  7C70 20 00 
16785  7C72 46 75 6E 63 _s123: .db "Functions available from Library-Computer:\n\n", 0
16785  7C76 74 69 6F 6E 
16785  7C7A 73 20 61 76 
16785  7C7E 61 69 6C 61 
16785  7C82 62 6C 65 20 
16785  7C86 66 72 6F 6D 
16785  7C8A 20 4C 69 62 
16785  7C8E 72 61 72 79 
16785  7C92 2D 43 6F 6D 
16785  7C96 70 75 74 65 
16785  7C9A 72 3A 0A 0A 
16785  7C9E 00 
16786  7C9F 20 20 20 30 _s124: .db "   0 = Cumulative Galactic Record\n", 0
16786  7CA3 20 3D 20 43 
16786  7CA7 75 6D 75 6C 
16786  7CAB 61 74 69 76 
16786  7CAF 65 20 47 61 
16786  7CB3 6C 61 63 74 
16786  7CB7 69 63 20 52 
16786  7CBB 65 63 6F 72 
16786  7CBF 64 0A 00 
16787  7CC2 20 20 20 31 _s125: .db "   1 = Status Report\n", 0
16787  7CC6 20 3D 20 53 
16787  7CCA 74 61 74 75 
16787  7CCE 73 20 52 65 
16787  7CD2 70 6F 72 74 
16787  7CD6 0A 00 
16788  7CD8 20 20 20 32 _s126: .db "   2 = Photon Torpedo Data\n", 0
16788  7CDC 20 3D 20 50 
16788  7CE0 68 6F 74 6F 
16788  7CE4 6E 20 54 6F 
16788  7CE8 72 70 65 64 
16788  7CEC 6F 20 44 61 
16788  7CF0 74 61 0A 00 
16789  7CF4 20 20 20 33 _s127: .db "   3 = Starbase Nav Data\n", 0
16789  7CF8 20 3D 20 53 
16789  7CFC 74 61 72 62 
16789  7D00 61 73 65 20 
16789  7D04 4E 61 76 20 
16789  7D08 44 61 74 61 
16789  7D0C 0A 00 
16790  7D0E 20 20 20 34 _s128: .db "   4 = Direction/Distance Calculator\n", 0
16790  7D12 20 3D 20 44 
16790  7D16 69 72 65 63 
16790  7D1A 74 69 6F 6E 
16790  7D1E 2F 44 69 73 
16790  7D22 74 61 6E 63 
16790  7D26 65 20 43 61 
16790  7D2A 6C 63 75 6C 
16790  7D2E 61 74 6F 72 
16790  7D32 0A 00 
16791  7D34 20 20 20 35 _s129: .db "   5 = Galaxy 'Region Name' Map\n", 0
16791  7D38 20 3D 20 47 
16791  7D3C 61 6C 61 78 
16791  7D40 79 20 27 52 
16791  7D44 65 67 69 6F 
16791  7D48 6E 20 4E 61 
16791  7D4C 6D 65 27 20 
16791  7D50 4D 61 70 0A 
16791  7D54 00 
16792  7D55 0A 20 20 20 _s130: .db "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", 0
16792  7D59 20 20 43 6F 
16792  7D5D 6D 70 75 74 
16792  7D61 65 72 20 52 
16792  7D65 65 63 6F 72 
16792  7D69 64 20 6F 66 
16792  7D6D 20 47 61 6C 
16792  7D71 61 78 79 20 
16792  7D75 66 6F 72 20 
16792  7D79 51 75 61 64 
16792  7D7D 72 61 6E 74 
16792  7D81 20 25 64 2C 
16792  7D85 25 64 0A 0A 
16792  7D89 00 
16793  7D8A 20 20 20 20 _s131: .db "     1     2     3     4     5     6     7     8", 0
16793  7D8E 20 31 20 20 
16793  7D92 20 20 20 32 
16793  7D96 20 20 20 20 
16793  7D9A 20 33 20 20 
16793  7D9E 20 20 20 34 
16793  7DA2 20 20 20 20 
16793  7DA6 20 35 20 20 
16793  7DAA 20 20 20 36 
16793  7DAE 20 20 20 20 
16793  7DB2 20 37 20 20 
16793  7DB6 20 20 20 38 
16793  7DBA 00 
16794  7DBB 25 73 25 64 _s132: .db "%s%d", 0
16794  7DBF 00 
16795  7DC0 20 20 20 53 _s133: .db "   Status Report:\n", 0
16795  7DC4 74 61 74 75 
16795  7DC8 73 20 52 65 
16795  7DCC 70 6F 72 74 
16795  7DD0 3A 0A 00 
16796  7DD3 4B 6C 69 6E _s134: .db "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 0
16796  7DD7 67 6F 6E 25 
16796  7DDB 73 20 4C 65 
16796  7DDF 66 74 3A 20 
16796  7DE3 25 64 0A 20 
16796  7DE7 4D 69 73 73 
16796  7DEB 69 6F 6E 20 
16796  7DEF 6D 75 73 74 
16796  7DF3 20 62 65 20 
16796  7DF7 63 6F 6D 70 
16796  7DFB 6C 65 74 65 
16796  7DFF 64 20 69 6E 
16796  7E03 20 25 64 2E 
16796  7E07 25 64 20 73 
16796  7E0B 74 61 72 64 
16796  7E0F 61 74 65 73 
16796  7E13 0A 00 
16797  7E15 59 6F 75 72 _s135: .db "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n", 0
16797  7E19 20 73 74 75 
16797  7E1D 70 69 64 69 
16797  7E21 74 79 20 68 
16797  7E25 61 73 20 6C 
16797  7E29 65 66 74 20 
16797  7E2D 79 6F 75 20 
16797  7E31 6F 6E 20 79 
16797  7E35 6F 75 72 20 
16797  7E39 6F 77 6E 20 
16797  7E3D 69 6E 20 74 
16797  7E41 68 65 20 67 
16797  7E45 61 6C 61 78 
16797  7E49 79 0A 20 2D 
16797  7E4D 2D 20 79 6F 
16797  7E51 75 20 68 61 
16797  7E55 76 65 20 6E 
16797  7E59 6F 20 73 74 
16797  7E5D 61 72 62 61 
16797  7E61 73 65 73 20 
16797  7E65 6C 65 66 74 
16797  7E69 21 0A 00 
16798  7E6C 54 68 65 20 _s136: .db "The Federation is maintaining %d starbase%s in the galaxy\n\n", 0
16798  7E70 46 65 64 65 
16798  7E74 72 61 74 69 
16798  7E78 6F 6E 20 69 
16798  7E7C 73 20 6D 61 
16798  7E80 69 6E 74 61 
16798  7E84 69 6E 69 6E 
16798  7E88 67 20 25 64 
16798  7E8C 20 73 74 61 
16798  7E90 72 62 61 73 
16798  7E94 65 25 73 20 
16798  7E98 69 6E 20 74 
16798  7E9C 68 65 20 67 
16798  7EA0 61 6C 61 78 
16798  7EA4 79 0A 0A 00 
16799  7EA8 46 72 6F 6D _s137: .db "From Enterprise to Klingon battlecriuser%s:\n\n", 0
16799  7EAC 20 45 6E 74 
16799  7EB0 65 72 70 72 
16799  7EB4 69 73 65 20 
16799  7EB8 74 6F 20 4B 
16799  7EBC 6C 69 6E 67 
16799  7EC0 6F 6E 20 62 
16799  7EC4 61 74 74 6C 
16799  7EC8 65 63 72 69 
16799  7ECC 75 73 65 72 
16799  7ED0 25 73 3A 0A 
16799  7ED4 0A 00 
16800  7ED6 4D 72 2E 20 _s138: .db "Mr. Spock reports,\n  'Sensors show no starbases in this quadrant.'\n", 0
16800  7EDA 53 70 6F 63 
16800  7EDE 6B 20 72 65 
16800  7EE2 70 6F 72 74 
16800  7EE6 73 2C 0A 20 
16800  7EEA 20 27 53 65 
16800  7EEE 6E 73 6F 72 
16800  7EF2 73 20 73 68 
16800  7EF6 6F 77 20 6E 
16800  7EFA 6F 20 73 74 
16800  7EFE 61 72 62 61 
16800  7F02 73 65 73 20 
16800  7F06 69 6E 20 74 
16800  7F0A 68 69 73 20 
16800  7F0E 71 75 61 64 
16800  7F12 72 61 6E 74 
16800  7F16 2E 27 0A 00 
16801  7F1A 44 69 72 65 _s139: .db "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 0
16801  7F1E 63 74 69 6F 
16801  7F22 6E 2F 44 69 
16801  7F26 73 74 61 6E 
16801  7F2A 63 65 20 43 
16801  7F2E 61 6C 63 75 
16801  7F32 6C 61 74 6F 
16801  7F36 72 0A 20 59 
16801  7F3A 6F 75 20 61 
16801  7F3E 72 65 20 61 
16801  7F42 74 20 71 75 
16801  7F46 61 64 72 61 
16801  7F4A 6E 74 20 25 
16801  7F4E 64 2C 25 64 
16801  7F52 20 73 65 63 
16801  7F56 74 6F 72 20 
16801  7F5A 25 64 2C 25 
16801  7F5E 64 0A 0A 20 
16801  7F62 50 6C 65 61 
16801  7F66 73 65 20 65 
16801  7F6A 6E 74 65 72 
16801  7F6E 20 69 6E 69 
16801  7F72 74 69 61 6C 
16801  7F76 20 58 20 63 
16801  7F7A 6F 6F 72 64 
16801  7F7E 69 6E 61 74 
16801  7F82 65 3A 20 00 
16802  7F86 50 6C 65 61 _s140: .db "Please enter initial Y coordinate: ", 0
16802  7F8A 73 65 20 65 
16802  7F8E 6E 74 65 72 
16802  7F92 20 69 6E 69 
16802  7F96 74 69 61 6C 
16802  7F9A 20 59 20 63 
16802  7F9E 6F 6F 72 64 
16802  7FA2 69 6E 61 74 
16802  7FA6 65 3A 20 00 
16803  7FAA 50 6C 65 61 _s141: .db "Please enter final X coordinate: ", 0
16803  7FAE 73 65 20 65 
16803  7FB2 6E 74 65 72 
16803  7FB6 20 66 69 6E 
16803  7FBA 61 6C 20 58 
16803  7FBE 20 63 6F 6F 
16803  7FC2 72 64 69 6E 
16803  7FC6 61 74 65 3A 
16803  7FCA 20 00 
16804  7FCC 50 6C 65 61 _s142: .db "Please enter final Y coordinate: ", 0
16804  7FD0 73 65 20 65 
16804  7FD4 6E 74 65 72 
16804  7FD8 20 66 69 6E 
16804  7FDC 61 6C 20 59 
16804  7FE0 20 63 6F 6F 
16804  7FE4 72 64 69 6E 
16804  7FE8 61 74 65 3A 
16804  7FEC 20 00 
16805  7FEE 0A 20 20 20 _s143: .db "\n                   The Galaxy\n\n", 0
16805  7FF2 20 20 20 20 
16805  7FF6 20 20 20 20 
16805  7FFA 20 20 20 20 
16805  7FFE 20 20 20 20 
16805  8002 54 68 65 20 
16805  8006 47 61 6C 61 
16805  800A 78 79 0A 0A 
16805  800E 00 
16806  800F 20 20 20 20 _s144: .db "    1     2     3     4     5     6     7     8\n", 0
16806  8013 31 20 20 20 
16806  8017 20 20 32 20 
16806  801B 20 20 20 20 
16806  801F 33 20 20 20 
16806  8023 20 20 34 20 
16806  8027 20 20 20 20 
16806  802B 35 20 20 20 
16806  802F 20 20 36 20 
16806  8033 20 20 20 20 
16806  8037 37 20 20 20 
16806  803B 20 20 38 0A 
16806  803F 00 
16807  8040 25 73 25 64 _s145: .db "%s%d ", 0
16807  8044 20 00 
16808  8046 20 20 44 49 _s146: .db "  DIRECTION = ", 0
16808  804A 52 45 43 54 
16808  804E 49 4F 4E 20 
16808  8052 3D 20 00 
16809  8055 25 73 00    _s147: .db "%s", 0
16810  8058 54 68 65 20 _s148: .db "The Enterprise has been destroyed. The Federation will be conquered.\n", 0
16810  805C 45 6E 74 65 
16810  8060 72 70 72 69 
16810  8064 73 65 20 68 
16810  8068 61 73 20 62 
16810  806C 65 65 6E 20 
16810  8070 64 65 73 74 
16810  8074 72 6F 79 65 
16810  8078 64 2E 20 54 
16810  807C 68 65 20 46 
16810  8080 65 64 65 72 
16810  8084 61 74 69 6F 
16810  8088 6E 20 77 69 
16810  808C 6C 6C 20 62 
16810  8090 65 20 63 6F 
16810  8094 6E 71 75 65 
16810  8098 72 65 64 2E 
16810  809C 0A 00 
16811  809E 49 74 20 69 _s149: .db "It is stardate %d.\n\n", 0
16811  80A2 73 20 73 74 
16811  80A6 61 72 64 61 
16811  80AA 74 65 20 25 
16811  80AE 64 2E 0A 0A 
16811  80B2 00 
16812  80B3 54 68 65 72 _s150: .db "There were %d Klingon Battlecruisers left at the end of your mission.\n\n", 0
16812  80B7 65 20 77 65 
16812  80BB 72 65 20 25 
16812  80BF 64 20 4B 6C 
16812  80C3 69 6E 67 6F 
16812  80C7 6E 20 42 61 
16812  80CB 74 74 6C 65 
16812  80CF 63 72 75 69 
16812  80D3 73 65 72 73 
16812  80D7 20 6C 65 66 
16812  80DB 74 20 61 74 
16812  80DF 20 74 68 65 
16812  80E3 20 65 6E 64 
16812  80E7 20 6F 66 20 
16812  80EB 79 6F 75 72 
16812  80EF 20 6D 69 73 
16812  80F3 73 69 6F 6E 
16812  80F7 2E 0A 0A 00 
16813  80FB 43 6F 6E 67 _s151: .db "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n", 0
16813  80FF 72 61 74 75 
16813  8103 6C 61 74 69 
16813  8107 6F 6E 73 2C 
16813  810B 20 43 61 70 
16813  810F 74 61 69 6E 
16813  8113 21 20 20 54 
16813  8117 68 65 20 6C 
16813  811B 61 73 74 20 
16813  811F 4B 6C 69 6E 
16813  8123 67 6F 6E 20 
16813  8127 42 61 74 74 
16813  812B 6C 65 20 43 
16813  812F 72 75 69 73 
16813  8133 65 72 0A 20 
16813  8137 6D 65 6E 61 
16813  813B 63 69 6E 67 
16813  813F 20 74 68 65 
16813  8143 20 46 65 64 
16813  8147 65 72 61 74 
16813  814B 69 6F 6E 20 
16813  814F 68 61 73 20 
16813  8153 62 65 65 6E 
16813  8157 20 64 65 73 
16813  815B 74 6F 79 65 
16813  815F 64 2E 0A 00 
16814  8163 59 6F 75 72 _s152: .db "Your efficiency rating is %s\n", 0
16814  8167 20 65 66 66 
16814  816B 69 63 69 65 
16814  816F 6E 63 79 20 
16814  8173 72 61 74 69 
16814  8177 6E 67 20 69 
16814  817B 73 20 25 73 
16814  817F 0A 00 
16815  8181 54 68 65 20 _s153: .db "The Federation is in need of a new starship commander", 0
16815  8185 46 65 64 65 
16815  8189 72 61 74 69 
16815  818D 6F 6E 20 69 
16815  8191 73 20 69 6E 
16815  8195 20 6E 65 65 
16815  8199 64 20 6F 66 
16815  819D 20 61 20 6E 
16815  81A1 65 77 20 73 
16815  81A5 74 61 72 73 
16815  81A9 68 69 70 20 
16815  81AD 63 6F 6D 6D 
16815  81B1 61 6E 64 65 
16815  81B5 72 00 
16816  81B7 20 66 6F 72 _s154: .db " for a similar mission.\n", 0
16816  81BB 20 61 20 73 
16816  81BF 69 6D 69 6C 
16816  81C3 61 72 20 6D 
16816  81C7 69 73 73 69 
16816  81CB 6F 6E 2E 0A 
16816  81CF 00 
16817  81D0 49 66 20 74 _s155: .db "If there is a volunteer, let him step forward and", 0
16817  81D4 68 65 72 65 
16817  81D8 20 69 73 20 
16817  81DC 61 20 76 6F 
16817  81E0 6C 75 6E 74 
16817  81E4 65 65 72 2C 
16817  81E8 20 6C 65 74 
16817  81EC 20 68 69 6D 
16817  81F0 20 73 74 65 
16817  81F4 70 20 66 6F 
16817  81F8 72 77 61 72 
16817  81FC 64 20 61 6E 
16817  8200 64 00 
16818  8202 20 65 6E 74 _s156: .db " enter 'aye': ", 0
16818  8206 65 72 20 27 
16818  820A 61 79 65 27 
16818  820E 3A 20 00 
16819  8211 53 74 61 72 _s157: .db "Starbase shields protect the Enterprise\n", 0
16819  8215 62 61 73 65 
16819  8219 20 73 68 69 
16819  821D 65 6C 64 73 
16819  8221 20 70 72 6F 
16819  8225 74 65 63 74 
16819  8229 20 74 68 65 
16819  822D 20 45 6E 74 
16819  8231 65 72 70 72 
16819  8235 69 73 65 0A 
16819  8239 00 
16820  823A 25 64 20 75 _s158: .db "%d unit hit on Enterprise from sector %d, %d\n", 0
16820  823E 6E 69 74 20 
16820  8242 68 69 74 20 
16820  8246 6F 6E 20 45 
16820  824A 6E 74 65 72 
16820  824E 70 72 69 73 
16820  8252 65 20 66 72 
16820  8256 6F 6D 20 73 
16820  825A 65 63 74 6F 
16820  825E 72 20 25 64 
16820  8262 2C 20 25 64 
16820  8266 0A 00 
16821  8268 20 20 20 20 _s159: .db "    <Shields down to %d units>\n\n", 0
16821  826C 3C 53 68 69 
16821  8270 65 6C 64 73 
16821  8274 20 64 6F 77 
16821  8278 6E 20 74 6F 
16821  827C 20 25 64 20 
16821  8280 75 6E 69 74 
16821  8284 73 3E 0A 0A 
16821  8288 00 
16822  8289 44 61 6D 61 _s160: .db "Damage Control reports\n'%s' damaged by hit\n\n", 0
16822  828D 67 65 20 43 
16822  8291 6F 6E 74 72 
16822  8295 6F 6C 20 72 
16822  8299 65 70 6F 72 
16822  829D 74 73 0A 27 
16822  82A1 25 73 27 20 
16822  82A5 64 61 6D 61 
16822  82A9 67 65 64 20 
16822  82AD 62 79 20 68 
16822  82B1 69 74 0A 0A 
16822  82B5 00 
16823  82B6 20 20 20 20 _s161: .db "    %s repair completed\n\n", 0
16823  82BA 25 73 20 72 
16823  82BE 65 70 61 69 
16823  82C2 72 20 63 6F 
16823  82C6 6D 70 6C 65 
16823  82CA 74 65 64 0A 
16823  82CE 0A 00 
16824  82D0 20 20 20 20 _s162: .db "    %s damaged\n\n", 0
16824  82D4 25 73 20 64 
16824  82D8 61 6D 61 67 
16824  82DC 65 64 0A 0A 
16824  82E0 00 
16825  82E1 20 20 20 20 _s163: .db "    %s state of repair improved\n\n", 0
16825  82E5 25 73 20 73 
16825  82E9 74 61 74 65 
16825  82ED 20 6F 66 20 
16825  82F1 72 65 70 61 
16825  82F5 69 72 20 69 
16825  82F9 6D 70 72 6F 
16825  82FD 76 65 64 0A 
16825  8301 0A 00 
16826  8303 20 49 00    _s164: .db " I", 0
16827  8306 20 49 49 00 _s165: .db " II", 0
16828  830A 20 49 49 49 _s166: .db " III", 0
16828  830E 00 
16829  830F 20 49 56 00 _s167: .db " IV", 0
16830  8313 55 6E 6B 6E _s168: .db "Unknown", 0
16830  8317 6F 77 6E 00 
16831  831B 55 6E 65 78 _s169: .db "Unexpected format in printf.", 0
16831  831F 70 65 63 74 
16831  8323 65 64 20 66 
16831  8327 6F 72 6D 61 
16831  832B 74 20 69 6E 
16831  832F 20 70 72 69 
16831  8333 6E 74 66 2E 
16831  8337 00 
16832  8338 45 72 72 6F _s170: .db "Error: Unknown argument type.\n", 0
16832  833C 72 3A 20 55 
16832  8340 6E 6B 6E 6F 
16832  8344 77 6E 20 61 
16832  8348 72 67 75 6D 
16832  834C 65 6E 74 20 
16832  8350 74 79 70 65 
16832  8354 2E 0A 00 
16833  8357             
16834  8357 59 83       _heap_top: .dw _heap
16835  8359 00          _heap: .db 0
16836  835A             ; --- END DATA SEGMENT
16837  835A             
16838  835A             .end
tasm: Number of errors = 0
