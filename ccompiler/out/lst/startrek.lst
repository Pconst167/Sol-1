out/startrek.asm line 14932: Maximum number of args exceeded. ("LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n",0)
out/startrek.asm line 14974: Maximum number of args exceeded. ("\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? ",0)
0001   0000             ; --- FILENAME: games/startrek
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; intro(); 
0011   0408 07 BB 20      call intro
0012   040B             ;; new_game(); 
0013   040B 07 1C 21      call new_game
0014   040E             ;; return (0); 
0015   040E 26 00 00      mov b, $0
0016   0411 F9            leave
0017   0412 05 0B         syscall sys_terminate_proc
0018   0414             
0019   0414             strcpy:
0020   0414 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0021   0417             ; $psrc 
0022   0417             ; $pdest 
0023   0417 52 04 00      sub sp, 4
0024   041A             ;; psrc = src; 
0025   041A FA FF FF      lea d, [bp + -1] ; $psrc
0026   041D DA            push d
0027   041E FA 07 00      lea d, [bp + 7] ; $src
0028   0421 2A            mov b, [d]
0029   0422 E7            pop d
0030   0423 FD 43         mov [d], b
0031   0425             ;; pdest = dest; 
0032   0425 FA FD FF      lea d, [bp + -3] ; $pdest
0033   0428 DA            push d
0034   0429 FA 05 00      lea d, [bp + 5] ; $dest
0035   042C 2A            mov b, [d]
0036   042D E7            pop d
0037   042E FD 43         mov [d], b
0038   0430             ;; while(*psrc) *pdest++ = *psrc++; 
0039   0430             _while1_cond:
0040   0430 FA FF FF      lea d, [bp + -1] ; $psrc
0041   0433 2A            mov b, [d]
0042   0434 74            mov d, b
0043   0435 32            mov bl, [d]
0044   0436 A7 00         mov bh, 0
0045   0438 C0 00 00      cmp b, 0
0046   043B C6 63 04      je _while1_exit
0047   043E             _while1_block:
0048   043E             ;; *pdest++ = *psrc++; 
0049   043E FA FD FF      lea d, [bp + -3] ; $pdest
0050   0441 2A            mov b, [d]
0051   0442 D8            push b
0052   0443 FD 77         inc b
0053   0445 FA FD FF      lea d, [bp + -3] ; $pdest
0054   0448 FD 43         mov [d], b
0055   044A E5            pop b
0056   044B D8            push b
0057   044C FA FF FF      lea d, [bp + -1] ; $psrc
0058   044F 2A            mov b, [d]
0059   0450 D8            push b
0060   0451 FD 77         inc b
0061   0453 FA FF FF      lea d, [bp + -1] ; $psrc
0062   0456 FD 43         mov [d], b
0063   0458 E5            pop b
0064   0459 74            mov d, b
0065   045A 32            mov bl, [d]
0066   045B A7 00         mov bh, 0
0067   045D E7            pop d
0068   045E FD 3E         mov [d], bl
0069   0460 0A 30 04      jmp _while1_cond
0070   0463             _while1_exit:
0071   0463             ;; *pdest = '\0'; 
0072   0463 FA FD FF      lea d, [bp + -3] ; $pdest
0073   0466 2A            mov b, [d]
0074   0467 D8            push b
0075   0468 26 00 00      mov b, $0
0076   046B E7            pop d
0077   046C FD 3E         mov [d], bl
0078   046E F9            leave
0079   046F 09            ret
0080   0470             
0081   0470             strcmp:
0082   0470 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0083   0473             ;; while (*s1 && (*s1 == *s2)) { 
0084   0473             _while2_cond:
0085   0473 FA 05 00      lea d, [bp + 5] ; $s1
0086   0476 2A            mov b, [d]
0087   0477 74            mov d, b
0088   0478 32            mov bl, [d]
0089   0479 A7 00         mov bh, 0
0090   047B D7            push a
0091   047C 11            mov a, b
0092   047D FA 05 00      lea d, [bp + 5] ; $s1
0093   0480 2A            mov b, [d]
0094   0481 74            mov d, b
0095   0482 32            mov bl, [d]
0096   0483 A7 00         mov bh, 0
0097   0485             ; START RELATIONAL
0098   0485 D7            push a
0099   0486 11            mov a, b
0100   0487 FA 07 00      lea d, [bp + 7] ; $s2
0101   048A 2A            mov b, [d]
0102   048B 74            mov d, b
0103   048C 32            mov bl, [d]
0104   048D A7 00         mov bh, 0
0105   048F B0            cmp a, b
0106   0490 FD 71         seq ; ==
0107   0492 E4            pop a
0108   0493             ; END RELATIONAL
0109   0493 FD A7         sand a, b
0110   0495 E4            pop a
0111   0496 C0 00 00      cmp b, 0
0112   0499 C6 B9 04      je _while2_exit
0113   049C             _while2_block:
0114   049C             ;; s1++; 
0115   049C FA 05 00      lea d, [bp + 5] ; $s1
0116   049F 2A            mov b, [d]
0117   04A0 D8            push b
0118   04A1 FD 77         inc b
0119   04A3 FA 05 00      lea d, [bp + 5] ; $s1
0120   04A6 FD 43         mov [d], b
0121   04A8 E5            pop b
0122   04A9             ;; s2++; 
0123   04A9 FA 07 00      lea d, [bp + 7] ; $s2
0124   04AC 2A            mov b, [d]
0125   04AD D8            push b
0126   04AE FD 77         inc b
0127   04B0 FA 07 00      lea d, [bp + 7] ; $s2
0128   04B3 FD 43         mov [d], b
0129   04B5 E5            pop b
0130   04B6 0A 73 04      jmp _while2_cond
0131   04B9             _while2_exit:
0132   04B9             ;; return *s1 - *s2; 
0133   04B9 FA 05 00      lea d, [bp + 5] ; $s1
0134   04BC 2A            mov b, [d]
0135   04BD 74            mov d, b
0136   04BE 32            mov bl, [d]
0137   04BF A7 00         mov bh, 0
0138   04C1             ; START TERMS
0139   04C1 D7            push a
0140   04C2 11            mov a, b
0141   04C3 FA 07 00      lea d, [bp + 7] ; $s2
0142   04C6 2A            mov b, [d]
0143   04C7 74            mov d, b
0144   04C8 32            mov bl, [d]
0145   04C9 A7 00         mov bh, 0
0146   04CB 60            sub a, b
0147   04CC 27            mov b, a
0148   04CD E4            pop a
0149   04CE             ; END TERMS
0150   04CE F9            leave
0151   04CF 09            ret
0152   04D0             
0153   04D0             strncmp:
0154   04D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0155   04D3 F9            leave
0156   04D4 09            ret
0157   04D5             
0158   04D5             strcat:
0159   04D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0160   04D8             ; $dest_len 
0161   04D8             ; $i 
0162   04D8 52 04 00      sub sp, 4
0163   04DB             ;; dest_len = strlen(dest); 
0164   04DB FA FF FF      lea d, [bp + -1] ; $dest_len
0165   04DE DA            push d
0166   04DF FA 05 00      lea d, [bp + 5] ; $dest
0167   04E2 2A            mov b, [d]
0168   04E3 FD AB         swp b
0169   04E5 D8            push b
0170   04E6 07 88 05      call strlen
0171   04E9 51 02 00      add sp, 2
0172   04EC E7            pop d
0173   04ED FD 43         mov [d], b
0174   04EF             ;; for (i = 0; src[i] != 0; i=i+1) { 
0175   04EF             _for3_init:
0176   04EF FA FD FF      lea d, [bp + -3] ; $i
0177   04F2 DA            push d
0178   04F3 26 00 00      mov b, $0
0179   04F6 E7            pop d
0180   04F7 FD 43         mov [d], b
0181   04F9             _for3_cond:
0182   04F9 FA 07 00      lea d, [bp + 7] ; $src
0183   04FC FD 2A         mov d, [d]
0184   04FE D7            push a
0185   04FF DA            push d
0186   0500 FA FD FF      lea d, [bp + -3] ; $i
0187   0503 2A            mov b, [d]
0188   0504 E7            pop d
0189   0505 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0190   0509 E4            pop a
0191   050A 32            mov bl, [d]
0192   050B A7 00         mov bh, 0
0193   050D             ; START RELATIONAL
0194   050D D7            push a
0195   050E 11            mov a, b
0196   050F 26 00 00      mov b, $0
0197   0512 B0            cmp a, b
0198   0513 FD 72         sneq ; !=
0199   0515 E4            pop a
0200   0516             ; END RELATIONAL
0201   0516 C0 00 00      cmp b, 0
0202   0519 C6 62 05      je _for3_exit
0203   051C             _for3_block:
0204   051C             ;; dest[dest_len + i] = src[i]; 
0205   051C FA 05 00      lea d, [bp + 5] ; $dest
0206   051F FD 2A         mov d, [d]
0207   0521 D7            push a
0208   0522 DA            push d
0209   0523 FA FF FF      lea d, [bp + -1] ; $dest_len
0210   0526 2A            mov b, [d]
0211   0527             ; START TERMS
0212   0527 D7            push a
0213   0528 11            mov a, b
0214   0529 FA FD FF      lea d, [bp + -3] ; $i
0215   052C 2A            mov b, [d]
0216   052D 56            add b, a
0217   052E E4            pop a
0218   052F             ; END TERMS
0219   052F E7            pop d
0220   0530 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0221   0534 E4            pop a
0222   0535 DA            push d
0223   0536 FA 07 00      lea d, [bp + 7] ; $src
0224   0539 FD 2A         mov d, [d]
0225   053B D7            push a
0226   053C DA            push d
0227   053D FA FD FF      lea d, [bp + -3] ; $i
0228   0540 2A            mov b, [d]
0229   0541 E7            pop d
0230   0542 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0231   0546 E4            pop a
0232   0547 32            mov bl, [d]
0233   0548 A7 00         mov bh, 0
0234   054A E7            pop d
0235   054B FD 3E         mov [d], bl
0236   054D             _for3_update:
0237   054D FA FD FF      lea d, [bp + -3] ; $i
0238   0550 DA            push d
0239   0551 FA FD FF      lea d, [bp + -3] ; $i
0240   0554 2A            mov b, [d]
0241   0555             ; START TERMS
0242   0555 D7            push a
0243   0556 11            mov a, b
0244   0557 26 01 00      mov b, $1
0245   055A 56            add b, a
0246   055B E4            pop a
0247   055C             ; END TERMS
0248   055C E7            pop d
0249   055D FD 43         mov [d], b
0250   055F 0A F9 04      jmp _for3_cond
0251   0562             _for3_exit:
0252   0562             ;; dest[dest_len + i] = 0; 
0253   0562 FA 05 00      lea d, [bp + 5] ; $dest
0254   0565 FD 2A         mov d, [d]
0255   0567 D7            push a
0256   0568 DA            push d
0257   0569 FA FF FF      lea d, [bp + -1] ; $dest_len
0258   056C 2A            mov b, [d]
0259   056D             ; START TERMS
0260   056D D7            push a
0261   056E 11            mov a, b
0262   056F FA FD FF      lea d, [bp + -3] ; $i
0263   0572 2A            mov b, [d]
0264   0573 56            add b, a
0265   0574 E4            pop a
0266   0575             ; END TERMS
0267   0575 E7            pop d
0268   0576 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0269   057A E4            pop a
0270   057B DA            push d
0271   057C 26 00 00      mov b, $0
0272   057F E7            pop d
0273   0580 FD 3E         mov [d], bl
0274   0582             ;; return dest; 
0275   0582 FA 05 00      lea d, [bp + 5] ; $dest
0276   0585 2A            mov b, [d]
0277   0586 F9            leave
0278   0587 09            ret
0279   0588             
0280   0588             strlen:
0281   0588 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0282   058B             ; $length 
0283   058B 52 02 00      sub sp, 2
0284   058E             ;; length = 0; 
0285   058E FA FF FF      lea d, [bp + -1] ; $length
0286   0591 DA            push d
0287   0592 26 00 00      mov b, $0
0288   0595 E7            pop d
0289   0596 FD 43         mov [d], b
0290   0598             ;; while (str[length] != 0) { 
0291   0598             _while4_cond:
0292   0598 FA 05 00      lea d, [bp + 5] ; $str
0293   059B FD 2A         mov d, [d]
0294   059D D7            push a
0295   059E DA            push d
0296   059F FA FF FF      lea d, [bp + -1] ; $length
0297   05A2 2A            mov b, [d]
0298   05A3 E7            pop d
0299   05A4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0300   05A8 E4            pop a
0301   05A9 32            mov bl, [d]
0302   05AA A7 00         mov bh, 0
0303   05AC             ; START RELATIONAL
0304   05AC D7            push a
0305   05AD 11            mov a, b
0306   05AE 26 00 00      mov b, $0
0307   05B1 B0            cmp a, b
0308   05B2 FD 72         sneq ; !=
0309   05B4 E4            pop a
0310   05B5             ; END RELATIONAL
0311   05B5 C0 00 00      cmp b, 0
0312   05B8 C6 CB 05      je _while4_exit
0313   05BB             _while4_block:
0314   05BB             ;; length++; 
0315   05BB FA FF FF      lea d, [bp + -1] ; $length
0316   05BE 2A            mov b, [d]
0317   05BF D8            push b
0318   05C0 FD 77         inc b
0319   05C2 FA FF FF      lea d, [bp + -1] ; $length
0320   05C5 FD 43         mov [d], b
0321   05C7 E5            pop b
0322   05C8 0A 98 05      jmp _while4_cond
0323   05CB             _while4_exit:
0324   05CB             ;; return length; 
0325   05CB FA FF FF      lea d, [bp + -1] ; $length
0326   05CE 2A            mov b, [d]
0327   05CF F9            leave
0328   05D0 09            ret
0329   05D1             
0330   05D1             printf:
0331   05D1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0332   05D4             ; $p 
0333   05D4             ; $format_p 
0334   05D4 52 04 00      sub sp, 4
0335   05D7             ;; format_p = format; 
0336   05D7 FA FD FF      lea d, [bp + -3] ; $format_p
0337   05DA DA            push d
0338   05DB FA 05 00      lea d, [bp + 5] ; $format
0339   05DE 2A            mov b, [d]
0340   05DF E7            pop d
0341   05E0 FD 43         mov [d], b
0342   05E2             ;; p = &format + 2; 
0343   05E2 FA FF FF      lea d, [bp + -1] ; $p
0344   05E5 DA            push d
0345   05E6 FA 05 00      lea d, [bp + 5] ; $format
0346   05E9 2D            mov b, d
0347   05EA             ; START TERMS
0348   05EA D7            push a
0349   05EB 11            mov a, b
0350   05EC 26 02 00      mov b, $2
0351   05EF 56            add b, a
0352   05F0 E4            pop a
0353   05F1             ; END TERMS
0354   05F1 E7            pop d
0355   05F2 FD 43         mov [d], b
0356   05F4             ;; for(;;){ 
0357   05F4             _for5_init:
0358   05F4             _for5_cond:
0359   05F4             _for5_block:
0360   05F4             ;; if(!*format_p) break; 
0361   05F4             _if6_cond:
0362   05F4 FA FD FF      lea d, [bp + -3] ; $format_p
0363   05F7 2A            mov b, [d]
0364   05F8 74            mov d, b
0365   05F9 32            mov bl, [d]
0366   05FA A7 00         mov bh, 0
0367   05FC C0 00 00      cmp b, 0
0368   05FF FD 71         seq ; !
0369   0601 C0 00 00      cmp b, 0
0370   0604 C6 0D 06      je _if6_else
0371   0607             _if6_true:
0372   0607             ;; break; 
0373   0607 0A 34 08      jmp _for5_exit ; for break
0374   060A 0A 31 08      jmp _if6_exit
0375   060D             _if6_else:
0376   060D             ;; if(*format_p == '%'){ 
0377   060D             _if7_cond:
0378   060D FA FD FF      lea d, [bp + -3] ; $format_p
0379   0610 2A            mov b, [d]
0380   0611 74            mov d, b
0381   0612 32            mov bl, [d]
0382   0613 A7 00         mov bh, 0
0383   0615             ; START RELATIONAL
0384   0615 D7            push a
0385   0616 11            mov a, b
0386   0617 26 25 00      mov b, $25
0387   061A B0            cmp a, b
0388   061B FD 71         seq ; ==
0389   061D E4            pop a
0390   061E             ; END RELATIONAL
0391   061E C0 00 00      cmp b, 0
0392   0621 C6 15 08      je _if7_else
0393   0624             _if7_true:
0394   0624             ;; format_p++; 
0395   0624 FA FD FF      lea d, [bp + -3] ; $format_p
0396   0627 2A            mov b, [d]
0397   0628 D8            push b
0398   0629 FD 77         inc b
0399   062B FA FD FF      lea d, [bp + -3] ; $format_p
0400   062E FD 43         mov [d], b
0401   0630 E5            pop b
0402   0631             ;; switch(*format_p){ 
0403   0631             _switch8_expr:
0404   0631 FA FD FF      lea d, [bp + -3] ; $format_p
0405   0634 2A            mov b, [d]
0406   0635 74            mov d, b
0407   0636 32            mov bl, [d]
0408   0637 A7 00         mov bh, 0
0409   0639             _switch8_comparisons:
0410   0639 C1 6C         cmp bl, $6c
0411   063B C6 67 06      je _switch8_case0
0412   063E C1 4C         cmp bl, $4c
0413   0640 C6 67 06      je _switch8_case1
0414   0643 C1 64         cmp bl, $64
0415   0645 C6 55 07      je _switch8_case2
0416   0648 C1 69         cmp bl, $69
0417   064A C6 55 07      je _switch8_case3
0418   064D C1 75         cmp bl, $75
0419   064F C6 79 07      je _switch8_case4
0420   0652 C1 78         cmp bl, $78
0421   0654 C6 9D 07      je _switch8_case5
0422   0657 C1 63         cmp bl, $63
0423   0659 C6 BB 07      je _switch8_case6
0424   065C C1 73         cmp bl, $73
0425   065E C6 DA 07      je _switch8_case7
0426   0661 0A F9 07      jmp _switch8_default
0427   0664 0A 05 08      jmp _switch8_exit
0428   0667             _switch8_case0:
0429   0667             _switch8_case1:
0430   0667             ;; format_p++; 
0431   0667 FA FD FF      lea d, [bp + -3] ; $format_p
0432   066A 2A            mov b, [d]
0433   066B D8            push b
0434   066C FD 77         inc b
0435   066E FA FD FF      lea d, [bp + -3] ; $format_p
0436   0671 FD 43         mov [d], b
0437   0673 E5            pop b
0438   0674             ;; if(*format_p == 'd' || *format_p == 'i') 
0439   0674             _if9_cond:
0440   0674 FA FD FF      lea d, [bp + -3] ; $format_p
0441   0677 2A            mov b, [d]
0442   0678 74            mov d, b
0443   0679 32            mov bl, [d]
0444   067A A7 00         mov bh, 0
0445   067C             ; START RELATIONAL
0446   067C D7            push a
0447   067D 11            mov a, b
0448   067E 26 64 00      mov b, $64
0449   0681 B0            cmp a, b
0450   0682 FD 71         seq ; ==
0451   0684 E4            pop a
0452   0685             ; END RELATIONAL
0453   0685 D7            push a
0454   0686 11            mov a, b
0455   0687 FA FD FF      lea d, [bp + -3] ; $format_p
0456   068A 2A            mov b, [d]
0457   068B 74            mov d, b
0458   068C 32            mov bl, [d]
0459   068D A7 00         mov bh, 0
0460   068F             ; START RELATIONAL
0461   068F D7            push a
0462   0690 11            mov a, b
0463   0691 26 69 00      mov b, $69
0464   0694 B0            cmp a, b
0465   0695 FD 71         seq ; ==
0466   0697 E4            pop a
0467   0698             ; END RELATIONAL
0468   0698 FD A8         sor a, b ; ||
0469   069A E4            pop a
0470   069B C0 00 00      cmp b, 0
0471   069E C6 C3 06      je _if9_else
0472   06A1             _if9_true:
0473   06A1             ;; print_signed_long(*(long *)p); 
0474   06A1 FA FF FF      lea d, [bp + -1] ; $p
0475   06A4 2A            mov b, [d]
0476   06A5 AB            snex b
0477   06A6 FD 39         mov c, b
0478   06A8 74            mov d, b
0479   06A9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0480   06AC FD 39         mov c, b ; And place it into C
0481   06AE 2A            mov b, [d] ; Lower Word in B
0482   06AF FD 79         mov g, b
0483   06B1 28            mov b, c
0484   06B2 FD AB         swp b
0485   06B4 D8            push b
0486   06B5 FD 27         mov b, g
0487   06B7 FD AB         swp b
0488   06B9 D8            push b
0489   06BA 07 FA 0C      call print_signed_long
0490   06BD 51 04 00      add sp, 4
0491   06C0 0A 40 07      jmp _if9_exit
0492   06C3             _if9_else:
0493   06C3             ;; if(*format_p == 'u') 
0494   06C3             _if10_cond:
0495   06C3 FA FD FF      lea d, [bp + -3] ; $format_p
0496   06C6 2A            mov b, [d]
0497   06C7 74            mov d, b
0498   06C8 32            mov bl, [d]
0499   06C9 A7 00         mov bh, 0
0500   06CB             ; START RELATIONAL
0501   06CB D7            push a
0502   06CC 11            mov a, b
0503   06CD 26 75 00      mov b, $75
0504   06D0 B0            cmp a, b
0505   06D1 FD 71         seq ; ==
0506   06D3 E4            pop a
0507   06D4             ; END RELATIONAL
0508   06D4 C0 00 00      cmp b, 0
0509   06D7 C6 FE 06      je _if10_else
0510   06DA             _if10_true:
0511   06DA             ;; print_unsigned_long(*(unsigned long *)p); 
0512   06DA FA FF FF      lea d, [bp + -1] ; $p
0513   06DD 2A            mov b, [d]
0514   06DE A7 00         mov bh, 0
0515   06E0 38 00 00      mov c, 0
0516   06E3 74            mov d, b
0517   06E4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0518   06E7 FD 39         mov c, b ; And place it into C
0519   06E9 2A            mov b, [d] ; Lower Word in B
0520   06EA FD 79         mov g, b
0521   06EC 28            mov b, c
0522   06ED FD AB         swp b
0523   06EF D8            push b
0524   06F0 FD 27         mov b, g
0525   06F2 FD AB         swp b
0526   06F4 D8            push b
0527   06F5 07 33 10      call print_unsigned_long
0528   06F8 51 04 00      add sp, 4
0529   06FB 0A 40 07      jmp _if10_exit
0530   06FE             _if10_else:
0531   06FE             ;; if(*format_p == 'x') 
0532   06FE             _if11_cond:
0533   06FE FA FD FF      lea d, [bp + -3] ; $format_p
0534   0701 2A            mov b, [d]
0535   0702 74            mov d, b
0536   0703 32            mov bl, [d]
0537   0704 A7 00         mov bh, 0
0538   0706             ; START RELATIONAL
0539   0706 D7            push a
0540   0707 11            mov a, b
0541   0708 26 78 00      mov b, $78
0542   070B B0            cmp a, b
0543   070C FD 71         seq ; ==
0544   070E E4            pop a
0545   070F             ; END RELATIONAL
0546   070F C0 00 00      cmp b, 0
0547   0712 C6 34 07      je _if11_else
0548   0715             _if11_true:
0549   0715             ;; printx32(*(long int *)p); 
0550   0715 FA FF FF      lea d, [bp + -1] ; $p
0551   0718 2A            mov b, [d]
0552   0719 74            mov d, b
0553   071A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0554   071D FD 39         mov c, b ; And place it into C
0555   071F 2A            mov b, [d] ; Lower Word in B
0556   0720 FD 79         mov g, b
0557   0722 28            mov b, c
0558   0723 FD AB         swp b
0559   0725 D8            push b
0560   0726 FD 27         mov b, g
0561   0728 FD AB         swp b
0562   072A D8            push b
0563   072B 07 83 0A      call printx32
0564   072E 51 04 00      add sp, 4
0565   0731 0A 40 07      jmp _if11_exit
0566   0734             _if11_else:
0567   0734             ;; err("Unexpected format in printf."); 
0568   0734 26 74 64      mov b, _s30 ; "Unexpected format in printf."
0569   0737 FD AB         swp b
0570   0739 D8            push b
0571   073A 07 71 0A      call err
0572   073D 51 02 00      add sp, 2
0573   0740             _if11_exit:
0574   0740             _if10_exit:
0575   0740             _if9_exit:
0576   0740             ;; p = p + 4; 
0577   0740 FA FF FF      lea d, [bp + -1] ; $p
0578   0743 DA            push d
0579   0744 FA FF FF      lea d, [bp + -1] ; $p
0580   0747 2A            mov b, [d]
0581   0748             ; START TERMS
0582   0748 D7            push a
0583   0749 11            mov a, b
0584   074A 26 04 00      mov b, $4
0585   074D 56            add b, a
0586   074E E4            pop a
0587   074F             ; END TERMS
0588   074F E7            pop d
0589   0750 FD 43         mov [d], b
0590   0752             ;; break; 
0591   0752 0A 05 08      jmp _switch8_exit ; case break
0592   0755             _switch8_case2:
0593   0755             _switch8_case3:
0594   0755             ;; print_signed(*(int*)p); 
0595   0755 FA FF FF      lea d, [bp + -1] ; $p
0596   0758 2A            mov b, [d]
0597   0759 74            mov d, b
0598   075A 2A            mov b, [d]
0599   075B FD AB         swp b
0600   075D D8            push b
0601   075E 07 0A 0C      call print_signed
0602   0761 51 02 00      add sp, 2
0603   0764             ;; p = p + 2; 
0604   0764 FA FF FF      lea d, [bp + -1] ; $p
0605   0767 DA            push d
0606   0768 FA FF FF      lea d, [bp + -1] ; $p
0607   076B 2A            mov b, [d]
0608   076C             ; START TERMS
0609   076C D7            push a
0610   076D 11            mov a, b
0611   076E 26 02 00      mov b, $2
0612   0771 56            add b, a
0613   0772 E4            pop a
0614   0773             ; END TERMS
0615   0773 E7            pop d
0616   0774 FD 43         mov [d], b
0617   0776             ;; break; 
0618   0776 0A 05 08      jmp _switch8_exit ; case break
0619   0779             _switch8_case4:
0620   0779             ;; print_unsigned(*(unsigned int*)p); 
0621   0779 FA FF FF      lea d, [bp + -1] ; $p
0622   077C 2A            mov b, [d]
0623   077D 74            mov d, b
0624   077E 2A            mov b, [d]
0625   077F FD AB         swp b
0626   0781 D8            push b
0627   0782 07 2B 12      call print_unsigned
0628   0785 51 02 00      add sp, 2
0629   0788             ;; p = p + 2; 
0630   0788 FA FF FF      lea d, [bp + -1] ; $p
0631   078B DA            push d
0632   078C FA FF FF      lea d, [bp + -1] ; $p
0633   078F 2A            mov b, [d]
0634   0790             ; START TERMS
0635   0790 D7            push a
0636   0791 11            mov a, b
0637   0792 26 02 00      mov b, $2
0638   0795 56            add b, a
0639   0796 E4            pop a
0640   0797             ; END TERMS
0641   0797 E7            pop d
0642   0798 FD 43         mov [d], b
0643   079A             ;; break; 
0644   079A 0A 05 08      jmp _switch8_exit ; case break
0645   079D             _switch8_case5:
0646   079D             
0647   079D             ; --- BEGIN INLINE ASM BLOCK
0648   079D FA FF FF      lea d, [bp + -1] ; $p
0649   07A0 FD 2A         mov d, [d]
0650   07A2 2A            mov b, [d]
0651   07A3 07 2E 16      call print_u16x
0652   07A6             ; --- END INLINE ASM BLOCK
0653   07A6             
0654   07A6             ;; p = p + 2; 
0655   07A6 FA FF FF      lea d, [bp + -1] ; $p
0656   07A9 DA            push d
0657   07AA FA FF FF      lea d, [bp + -1] ; $p
0658   07AD 2A            mov b, [d]
0659   07AE             ; START TERMS
0660   07AE D7            push a
0661   07AF 11            mov a, b
0662   07B0 26 02 00      mov b, $2
0663   07B3 56            add b, a
0664   07B4 E4            pop a
0665   07B5             ; END TERMS
0666   07B5 E7            pop d
0667   07B6 FD 43         mov [d], b
0668   07B8             ;; break; 
0669   07B8 0A 05 08      jmp _switch8_exit ; case break
0670   07BB             _switch8_case6:
0671   07BB             
0672   07BB             ; --- BEGIN INLINE ASM BLOCK
0673   07BB FA FF FF      lea d, [bp + -1] ; $p
0674   07BE FD 2A         mov d, [d]
0675   07C0 1E            mov al, [d]
0676   07C1 23            mov ah, al
0677   07C2 07 8C 14      call _putchar
0678   07C5             ; --- END INLINE ASM BLOCK
0679   07C5             
0680   07C5             ;; p = p + 2; 
0681   07C5 FA FF FF      lea d, [bp + -1] ; $p
0682   07C8 DA            push d
0683   07C9 FA FF FF      lea d, [bp + -1] ; $p
0684   07CC 2A            mov b, [d]
0685   07CD             ; START TERMS
0686   07CD D7            push a
0687   07CE 11            mov a, b
0688   07CF 26 02 00      mov b, $2
0689   07D2 56            add b, a
0690   07D3 E4            pop a
0691   07D4             ; END TERMS
0692   07D4 E7            pop d
0693   07D5 FD 43         mov [d], b
0694   07D7             ;; break; 
0695   07D7 0A 05 08      jmp _switch8_exit ; case break
0696   07DA             _switch8_case7:
0697   07DA             
0698   07DA             ; --- BEGIN INLINE ASM BLOCK
0699   07DA FA FF FF      lea d, [bp + -1] ; $p
0700   07DD FD 2A         mov d, [d]
0701   07DF FD 2A         mov d, [d]
0702   07E1 07 D6 15      call _puts
0703   07E4             ; --- END INLINE ASM BLOCK
0704   07E4             
0705   07E4             ;; p = p + 2; 
0706   07E4 FA FF FF      lea d, [bp + -1] ; $p
0707   07E7 DA            push d
0708   07E8 FA FF FF      lea d, [bp + -1] ; $p
0709   07EB 2A            mov b, [d]
0710   07EC             ; START TERMS
0711   07EC D7            push a
0712   07ED 11            mov a, b
0713   07EE 26 02 00      mov b, $2
0714   07F1 56            add b, a
0715   07F2 E4            pop a
0716   07F3             ; END TERMS
0717   07F3 E7            pop d
0718   07F4 FD 43         mov [d], b
0719   07F6             ;; break; 
0720   07F6 0A 05 08      jmp _switch8_exit ; case break
0721   07F9             _switch8_default:
0722   07F9             ;; print("Error: Unknown argument type.\n"); 
0723   07F9 26 91 64      mov b, _s31 ; "Error: Unknown argument type.\n"
0724   07FC FD AB         swp b
0725   07FE D8            push b
0726   07FF 07 43 13      call print
0727   0802 51 02 00      add sp, 2
0728   0805             _switch8_exit:
0729   0805             ;; format_p++; 
0730   0805 FA FD FF      lea d, [bp + -3] ; $format_p
0731   0808 2A            mov b, [d]
0732   0809 D8            push b
0733   080A FD 77         inc b
0734   080C FA FD FF      lea d, [bp + -3] ; $format_p
0735   080F FD 43         mov [d], b
0736   0811 E5            pop b
0737   0812 0A 31 08      jmp _if7_exit
0738   0815             _if7_else:
0739   0815             ;; putchar(*format_p); 
0740   0815 FA FD FF      lea d, [bp + -3] ; $format_p
0741   0818 2A            mov b, [d]
0742   0819 74            mov d, b
0743   081A 32            mov bl, [d]
0744   081B A7 00         mov bh, 0
0745   081D DD            push bl
0746   081E 07 FB 12      call putchar
0747   0821 51 01 00      add sp, 1
0748   0824             ;; format_p++; 
0749   0824 FA FD FF      lea d, [bp + -3] ; $format_p
0750   0827 2A            mov b, [d]
0751   0828 D8            push b
0752   0829 FD 77         inc b
0753   082B FA FD FF      lea d, [bp + -3] ; $format_p
0754   082E FD 43         mov [d], b
0755   0830 E5            pop b
0756   0831             _if7_exit:
0757   0831             _if6_exit:
0758   0831             _for5_update:
0759   0831 0A F4 05      jmp _for5_cond
0760   0834             _for5_exit:
0761   0834 F9            leave
0762   0835 09            ret
0763   0836             
0764   0836             scanf:
0765   0836 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0766   0839             ; $p 
0767   0839             ; $format_p 
0768   0839             ; $c 
0769   0839             ; $i 
0770   0839             ; $input_string 
0771   0839 52 07 02      sub sp, 519
0772   083C             ;; format_p = format; 
0773   083C FA FD FF      lea d, [bp + -3] ; $format_p
0774   083F DA            push d
0775   0840 FA 05 00      lea d, [bp + 5] ; $format
0776   0843 2A            mov b, [d]
0777   0844 E7            pop d
0778   0845 FD 43         mov [d], b
0779   0847             ;; p = &format + 2; 
0780   0847 FA FF FF      lea d, [bp + -1] ; $p
0781   084A DA            push d
0782   084B FA 05 00      lea d, [bp + 5] ; $format
0783   084E 2D            mov b, d
0784   084F             ; START TERMS
0785   084F D7            push a
0786   0850 11            mov a, b
0787   0851 26 02 00      mov b, $2
0788   0854 56            add b, a
0789   0855 E4            pop a
0790   0856             ; END TERMS
0791   0856 E7            pop d
0792   0857 FD 43         mov [d], b
0793   0859             ;; for(;;){ 
0794   0859             _for12_init:
0795   0859             _for12_cond:
0796   0859             _for12_block:
0797   0859             ;; if(!*format_p) break; 
0798   0859             _if13_cond:
0799   0859 FA FD FF      lea d, [bp + -3] ; $format_p
0800   085C 2A            mov b, [d]
0801   085D 74            mov d, b
0802   085E 32            mov bl, [d]
0803   085F A7 00         mov bh, 0
0804   0861 C0 00 00      cmp b, 0
0805   0864 FD 71         seq ; !
0806   0866 C0 00 00      cmp b, 0
0807   0869 C6 72 08      je _if13_else
0808   086C             _if13_true:
0809   086C             ;; break; 
0810   086C 0A 6F 0A      jmp _for12_exit ; for break
0811   086F 0A 6C 0A      jmp _if13_exit
0812   0872             _if13_else:
0813   0872             ;; if(*format_p == '%'){ 
0814   0872             _if14_cond:
0815   0872 FA FD FF      lea d, [bp + -3] ; $format_p
0816   0875 2A            mov b, [d]
0817   0876 74            mov d, b
0818   0877 32            mov bl, [d]
0819   0878 A7 00         mov bh, 0
0820   087A             ; START RELATIONAL
0821   087A D7            push a
0822   087B 11            mov a, b
0823   087C 26 25 00      mov b, $25
0824   087F B0            cmp a, b
0825   0880 FD 71         seq ; ==
0826   0882 E4            pop a
0827   0883             ; END RELATIONAL
0828   0883 C0 00 00      cmp b, 0
0829   0886 C6 50 0A      je _if14_else
0830   0889             _if14_true:
0831   0889             ;; format_p++; 
0832   0889 FA FD FF      lea d, [bp + -3] ; $format_p
0833   088C 2A            mov b, [d]
0834   088D D8            push b
0835   088E FD 77         inc b
0836   0890 FA FD FF      lea d, [bp + -3] ; $format_p
0837   0893 FD 43         mov [d], b
0838   0895 E5            pop b
0839   0896             ;; switch(*format_p){ 
0840   0896             _switch15_expr:
0841   0896 FA FD FF      lea d, [bp + -3] ; $format_p
0842   0899 2A            mov b, [d]
0843   089A 74            mov d, b
0844   089B 32            mov bl, [d]
0845   089C A7 00         mov bh, 0
0846   089E             _switch15_comparisons:
0847   089E C1 6C         cmp bl, $6c
0848   08A0 C6 CC 08      je _switch15_case0
0849   08A3 C1 4C         cmp bl, $4c
0850   08A5 C6 CC 08      je _switch15_case1
0851   08A8 C1 64         cmp bl, $64
0852   08AA C6 5E 09      je _switch15_case2
0853   08AD C1 69         cmp bl, $69
0854   08AF C6 5E 09      je _switch15_case3
0855   08B2 C1 75         cmp bl, $75
0856   08B4 C6 8B 09      je _switch15_case4
0857   08B7 C1 78         cmp bl, $78
0858   08B9 C6 B8 09      je _switch15_case5
0859   08BC C1 63         cmp bl, $63
0860   08BE C6 CD 09      je _switch15_case6
0861   08C1 C1 73         cmp bl, $73
0862   08C3 C6 FC 09      je _switch15_case7
0863   08C6 0A 34 0A      jmp _switch15_default
0864   08C9 0A 40 0A      jmp _switch15_exit
0865   08CC             _switch15_case0:
0866   08CC             _switch15_case1:
0867   08CC             ;; format_p++; 
0868   08CC FA FD FF      lea d, [bp + -3] ; $format_p
0869   08CF 2A            mov b, [d]
0870   08D0 D8            push b
0871   08D1 FD 77         inc b
0872   08D3 FA FD FF      lea d, [bp + -3] ; $format_p
0873   08D6 FD 43         mov [d], b
0874   08D8 E5            pop b
0875   08D9             ;; if(*format_p == 'd' || *format_p == 'i'); 
0876   08D9             _if16_cond:
0877   08D9 FA FD FF      lea d, [bp + -3] ; $format_p
0878   08DC 2A            mov b, [d]
0879   08DD 74            mov d, b
0880   08DE 32            mov bl, [d]
0881   08DF A7 00         mov bh, 0
0882   08E1             ; START RELATIONAL
0883   08E1 D7            push a
0884   08E2 11            mov a, b
0885   08E3 26 64 00      mov b, $64
0886   08E6 B0            cmp a, b
0887   08E7 FD 71         seq ; ==
0888   08E9 E4            pop a
0889   08EA             ; END RELATIONAL
0890   08EA D7            push a
0891   08EB 11            mov a, b
0892   08EC FA FD FF      lea d, [bp + -3] ; $format_p
0893   08EF 2A            mov b, [d]
0894   08F0 74            mov d, b
0895   08F1 32            mov bl, [d]
0896   08F2 A7 00         mov bh, 0
0897   08F4             ; START RELATIONAL
0898   08F4 D7            push a
0899   08F5 11            mov a, b
0900   08F6 26 69 00      mov b, $69
0901   08F9 B0            cmp a, b
0902   08FA FD 71         seq ; ==
0903   08FC E4            pop a
0904   08FD             ; END RELATIONAL
0905   08FD FD A8         sor a, b ; ||
0906   08FF E4            pop a
0907   0900 C0 00 00      cmp b, 0
0908   0903 C6 09 09      je _if16_else
0909   0906             _if16_true:
0910   0906             ;; ; 
0911   0906 0A 49 09      jmp _if16_exit
0912   0909             _if16_else:
0913   0909             ;; if(*format_p == 'u'); 
0914   0909             _if17_cond:
0915   0909 FA FD FF      lea d, [bp + -3] ; $format_p
0916   090C 2A            mov b, [d]
0917   090D 74            mov d, b
0918   090E 32            mov bl, [d]
0919   090F A7 00         mov bh, 0
0920   0911             ; START RELATIONAL
0921   0911 D7            push a
0922   0912 11            mov a, b
0923   0913 26 75 00      mov b, $75
0924   0916 B0            cmp a, b
0925   0917 FD 71         seq ; ==
0926   0919 E4            pop a
0927   091A             ; END RELATIONAL
0928   091A C0 00 00      cmp b, 0
0929   091D C6 23 09      je _if17_else
0930   0920             _if17_true:
0931   0920             ;; ; 
0932   0920 0A 49 09      jmp _if17_exit
0933   0923             _if17_else:
0934   0923             ;; if(*format_p == 'x'); 
0935   0923             _if18_cond:
0936   0923 FA FD FF      lea d, [bp + -3] ; $format_p
0937   0926 2A            mov b, [d]
0938   0927 74            mov d, b
0939   0928 32            mov bl, [d]
0940   0929 A7 00         mov bh, 0
0941   092B             ; START RELATIONAL
0942   092B D7            push a
0943   092C 11            mov a, b
0944   092D 26 78 00      mov b, $78
0945   0930 B0            cmp a, b
0946   0931 FD 71         seq ; ==
0947   0933 E4            pop a
0948   0934             ; END RELATIONAL
0949   0934 C0 00 00      cmp b, 0
0950   0937 C6 3D 09      je _if18_else
0951   093A             _if18_true:
0952   093A             ;; ; 
0953   093A 0A 49 09      jmp _if18_exit
0954   093D             _if18_else:
0955   093D             ;; err("Unexpected format in printf."); 
0956   093D 26 74 64      mov b, _s30 ; "Unexpected format in printf."
0957   0940 FD AB         swp b
0958   0942 D8            push b
0959   0943 07 71 0A      call err
0960   0946 51 02 00      add sp, 2
0961   0949             _if18_exit:
0962   0949             _if17_exit:
0963   0949             _if16_exit:
0964   0949             ;; p = p + 4; 
0965   0949 FA FF FF      lea d, [bp + -1] ; $p
0966   094C DA            push d
0967   094D FA FF FF      lea d, [bp + -1] ; $p
0968   0950 2A            mov b, [d]
0969   0951             ; START TERMS
0970   0951 D7            push a
0971   0952 11            mov a, b
0972   0953 26 04 00      mov b, $4
0973   0956 56            add b, a
0974   0957 E4            pop a
0975   0958             ; END TERMS
0976   0958 E7            pop d
0977   0959 FD 43         mov [d], b
0978   095B             ;; break; 
0979   095B 0A 40 0A      jmp _switch15_exit ; case break
0980   095E             _switch15_case2:
0981   095E             _switch15_case3:
0982   095E             ;; i = scann(); 
0983   095E FA FA FF      lea d, [bp + -6] ; $i
0984   0961 DA            push d
0985   0962 07 1E 13      call scann
0986   0965 E7            pop d
0987   0966 FD 43         mov [d], b
0988   0968             ;; **(int **)p = i; 
0989   0968 FA FF FF      lea d, [bp + -1] ; $p
0990   096B 2A            mov b, [d]
0991   096C 74            mov d, b
0992   096D 2A            mov b, [d]
0993   096E D8            push b
0994   096F FA FA FF      lea d, [bp + -6] ; $i
0995   0972 2A            mov b, [d]
0996   0973 E7            pop d
0997   0974 FD 43         mov [d], b
0998   0976             ;; p = p + 2; 
0999   0976 FA FF FF      lea d, [bp + -1] ; $p
1000   0979 DA            push d
1001   097A FA FF FF      lea d, [bp + -1] ; $p
1002   097D 2A            mov b, [d]
1003   097E             ; START TERMS
1004   097E D7            push a
1005   097F 11            mov a, b
1006   0980 26 02 00      mov b, $2
1007   0983 56            add b, a
1008   0984 E4            pop a
1009   0985             ; END TERMS
1010   0985 E7            pop d
1011   0986 FD 43         mov [d], b
1012   0988             ;; break; 
1013   0988 0A 40 0A      jmp _switch15_exit ; case break
1014   098B             _switch15_case4:
1015   098B             ;; i = scann(); 
1016   098B FA FA FF      lea d, [bp + -6] ; $i
1017   098E DA            push d
1018   098F 07 1E 13      call scann
1019   0992 E7            pop d
1020   0993 FD 43         mov [d], b
1021   0995             ;; **(int **)p = i; 
1022   0995 FA FF FF      lea d, [bp + -1] ; $p
1023   0998 2A            mov b, [d]
1024   0999 74            mov d, b
1025   099A 2A            mov b, [d]
1026   099B D8            push b
1027   099C FA FA FF      lea d, [bp + -6] ; $i
1028   099F 2A            mov b, [d]
1029   09A0 E7            pop d
1030   09A1 FD 43         mov [d], b
1031   09A3             ;; p = p + 2; 
1032   09A3 FA FF FF      lea d, [bp + -1] ; $p
1033   09A6 DA            push d
1034   09A7 FA FF FF      lea d, [bp + -1] ; $p
1035   09AA 2A            mov b, [d]
1036   09AB             ; START TERMS
1037   09AB D7            push a
1038   09AC 11            mov a, b
1039   09AD 26 02 00      mov b, $2
1040   09B0 56            add b, a
1041   09B1 E4            pop a
1042   09B2             ; END TERMS
1043   09B2 E7            pop d
1044   09B3 FD 43         mov [d], b
1045   09B5             ;; break; 
1046   09B5 0A 40 0A      jmp _switch15_exit ; case break
1047   09B8             _switch15_case5:
1048   09B8             ;; p = p + 2; 
1049   09B8 FA FF FF      lea d, [bp + -1] ; $p
1050   09BB DA            push d
1051   09BC FA FF FF      lea d, [bp + -1] ; $p
1052   09BF 2A            mov b, [d]
1053   09C0             ; START TERMS
1054   09C0 D7            push a
1055   09C1 11            mov a, b
1056   09C2 26 02 00      mov b, $2
1057   09C5 56            add b, a
1058   09C6 E4            pop a
1059   09C7             ; END TERMS
1060   09C7 E7            pop d
1061   09C8 FD 43         mov [d], b
1062   09CA             ;; break; 
1063   09CA 0A 40 0A      jmp _switch15_exit ; case break
1064   09CD             _switch15_case6:
1065   09CD             ;; c = getchar(); 
1066   09CD FA FC FF      lea d, [bp + -4] ; $c
1067   09D0 DA            push d
1068   09D1 07 08 13      call getchar
1069   09D4 E7            pop d
1070   09D5 FD 3E         mov [d], bl
1071   09D7             ;; **(char **)p = c; 
1072   09D7 FA FF FF      lea d, [bp + -1] ; $p
1073   09DA 2A            mov b, [d]
1074   09DB 74            mov d, b
1075   09DC 2A            mov b, [d]
1076   09DD D8            push b
1077   09DE FA FC FF      lea d, [bp + -4] ; $c
1078   09E1 32            mov bl, [d]
1079   09E2 A7 00         mov bh, 0
1080   09E4 E7            pop d
1081   09E5 FD 43         mov [d], b
1082   09E7             ;; p = p + 2; 
1083   09E7 FA FF FF      lea d, [bp + -1] ; $p
1084   09EA DA            push d
1085   09EB FA FF FF      lea d, [bp + -1] ; $p
1086   09EE 2A            mov b, [d]
1087   09EF             ; START TERMS
1088   09EF D7            push a
1089   09F0 11            mov a, b
1090   09F1 26 02 00      mov b, $2
1091   09F4 56            add b, a
1092   09F5 E4            pop a
1093   09F6             ; END TERMS
1094   09F6 E7            pop d
1095   09F7 FD 43         mov [d], b
1096   09F9             ;; break; 
1097   09F9 0A 40 0A      jmp _switch15_exit ; case break
1098   09FC             _switch15_case7:
1099   09FC             ;; gets(input_string); 
1100   09FC FA FA FD      lea d, [bp + -518] ; $input_string
1101   09FF 2D            mov b, d
1102   0A00 FD AB         swp b
1103   0A02 D8            push b
1104   0A03 07 F0 0B      call gets
1105   0A06 51 02 00      add sp, 2
1106   0A09             ;; strcpy(*(char **)p, input_string); 
1107   0A09 FA FA FD      lea d, [bp + -518] ; $input_string
1108   0A0C 2D            mov b, d
1109   0A0D FD AB         swp b
1110   0A0F D8            push b
1111   0A10 FA FF FF      lea d, [bp + -1] ; $p
1112   0A13 2A            mov b, [d]
1113   0A14 74            mov d, b
1114   0A15 2A            mov b, [d]
1115   0A16 FD AB         swp b
1116   0A18 D8            push b
1117   0A19 07 14 04      call strcpy
1118   0A1C 51 04 00      add sp, 4
1119   0A1F             ;; p = p + 2; 
1120   0A1F FA FF FF      lea d, [bp + -1] ; $p
1121   0A22 DA            push d
1122   0A23 FA FF FF      lea d, [bp + -1] ; $p
1123   0A26 2A            mov b, [d]
1124   0A27             ; START TERMS
1125   0A27 D7            push a
1126   0A28 11            mov a, b
1127   0A29 26 02 00      mov b, $2
1128   0A2C 56            add b, a
1129   0A2D E4            pop a
1130   0A2E             ; END TERMS
1131   0A2E E7            pop d
1132   0A2F FD 43         mov [d], b
1133   0A31             ;; break; 
1134   0A31 0A 40 0A      jmp _switch15_exit ; case break
1135   0A34             _switch15_default:
1136   0A34             ;; print("Error: Unknown argument type.\n"); 
1137   0A34 26 91 64      mov b, _s31 ; "Error: Unknown argument type.\n"
1138   0A37 FD AB         swp b
1139   0A39 D8            push b
1140   0A3A 07 43 13      call print
1141   0A3D 51 02 00      add sp, 2
1142   0A40             _switch15_exit:
1143   0A40             ;; format_p++; 
1144   0A40 FA FD FF      lea d, [bp + -3] ; $format_p
1145   0A43 2A            mov b, [d]
1146   0A44 D8            push b
1147   0A45 FD 77         inc b
1148   0A47 FA FD FF      lea d, [bp + -3] ; $format_p
1149   0A4A FD 43         mov [d], b
1150   0A4C E5            pop b
1151   0A4D 0A 6C 0A      jmp _if14_exit
1152   0A50             _if14_else:
1153   0A50             ;; putchar(*format_p); 
1154   0A50 FA FD FF      lea d, [bp + -3] ; $format_p
1155   0A53 2A            mov b, [d]
1156   0A54 74            mov d, b
1157   0A55 32            mov bl, [d]
1158   0A56 A7 00         mov bh, 0
1159   0A58 DD            push bl
1160   0A59 07 FB 12      call putchar
1161   0A5C 51 01 00      add sp, 1
1162   0A5F             ;; format_p++; 
1163   0A5F FA FD FF      lea d, [bp + -3] ; $format_p
1164   0A62 2A            mov b, [d]
1165   0A63 D8            push b
1166   0A64 FD 77         inc b
1167   0A66 FA FD FF      lea d, [bp + -3] ; $format_p
1168   0A69 FD 43         mov [d], b
1169   0A6B E5            pop b
1170   0A6C             _if14_exit:
1171   0A6C             _if13_exit:
1172   0A6C             _for12_update:
1173   0A6C 0A 59 08      jmp _for12_cond
1174   0A6F             _for12_exit:
1175   0A6F F9            leave
1176   0A70 09            ret
1177   0A71             
1178   0A71             err:
1179   0A71 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1180   0A74             ;; print(e); 
1181   0A74 FA 05 00      lea d, [bp + 5] ; $e
1182   0A77 2A            mov b, [d]
1183   0A78 FD AB         swp b
1184   0A7A D8            push b
1185   0A7B 07 43 13      call print
1186   0A7E 51 02 00      add sp, 2
1187   0A81 F9            leave
1188   0A82 09            ret
1189   0A83             
1190   0A83             printx32:
1191   0A83 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1192   0A86             
1193   0A86             ; --- BEGIN INLINE ASM BLOCK
1194   0A86 FA 05 00      lea d, [bp + 5] ; $hex
1195   0A89 2B 02 00      mov b, [d+2]
1196   0A8C 07 2E 16      call print_u16x
1197   0A8F 2A            mov b, [d]
1198   0A90 07 2E 16      call print_u16x
1199   0A93             ; --- END INLINE ASM BLOCK
1200   0A93             
1201   0A93 F9            leave
1202   0A94 09            ret
1203   0A95             
1204   0A95             printx16:
1205   0A95 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1206   0A98             
1207   0A98             ; --- BEGIN INLINE ASM BLOCK
1208   0A98 FA 05 00      lea d, [bp + 5] ; $hex
1209   0A9B 2A            mov b, [d]
1210   0A9C 07 2E 16      call print_u16x
1211   0A9F             ; --- END INLINE ASM BLOCK
1212   0A9F             
1213   0A9F F9            leave
1214   0AA0 09            ret
1215   0AA1             
1216   0AA1             printx8:
1217   0AA1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1218   0AA4             
1219   0AA4             ; --- BEGIN INLINE ASM BLOCK
1220   0AA4 FA 05 00      lea d, [bp + 5] ; $hex
1221   0AA7 32            mov bl, [d]
1222   0AA8 07 72 16      call print_u8x
1223   0AAB             ; --- END INLINE ASM BLOCK
1224   0AAB             
1225   0AAB F9            leave
1226   0AAC 09            ret
1227   0AAD             
1228   0AAD             hex_str_to_int:
1229   0AAD F8 00 00      enter 0 ; (push bp; mov bp, sp)
1230   0AB0             ; $value 
1231   0AB0 10 00 00      mov a, $0
1232   0AB3 45 FF FF      mov [bp + -1], a
1233   0AB6             ; $i 
1234   0AB6             ; $hex_char 
1235   0AB6             ; $len 
1236   0AB6 52 07 00      sub sp, 7
1237   0AB9             ;; len = strlen(hex_string); 
1238   0AB9 FA FA FF      lea d, [bp + -6] ; $len
1239   0ABC DA            push d
1240   0ABD FA 05 00      lea d, [bp + 5] ; $hex_string
1241   0AC0 2A            mov b, [d]
1242   0AC1 FD AB         swp b
1243   0AC3 D8            push b
1244   0AC4 07 88 05      call strlen
1245   0AC7 51 02 00      add sp, 2
1246   0ACA E7            pop d
1247   0ACB FD 43         mov [d], b
1248   0ACD             ;; for (i = 0; i < len; i++) { 
1249   0ACD             _for19_init:
1250   0ACD FA FD FF      lea d, [bp + -3] ; $i
1251   0AD0 DA            push d
1252   0AD1 26 00 00      mov b, $0
1253   0AD4 E7            pop d
1254   0AD5 FD 43         mov [d], b
1255   0AD7             _for19_cond:
1256   0AD7 FA FD FF      lea d, [bp + -3] ; $i
1257   0ADA 2A            mov b, [d]
1258   0ADB             ; START RELATIONAL
1259   0ADB D7            push a
1260   0ADC 11            mov a, b
1261   0ADD FA FA FF      lea d, [bp + -6] ; $len
1262   0AE0 2A            mov b, [d]
1263   0AE1 B0            cmp a, b
1264   0AE2 FD 73         slt ; < (signed)
1265   0AE4 E4            pop a
1266   0AE5             ; END RELATIONAL
1267   0AE5 C0 00 00      cmp b, 0
1268   0AE8 C6 EA 0B      je _for19_exit
1269   0AEB             _for19_block:
1270   0AEB             ;; hex_char = hex_string[i]; 
1271   0AEB FA FC FF      lea d, [bp + -4] ; $hex_char
1272   0AEE DA            push d
1273   0AEF FA 05 00      lea d, [bp + 5] ; $hex_string
1274   0AF2 FD 2A         mov d, [d]
1275   0AF4 D7            push a
1276   0AF5 DA            push d
1277   0AF6 FA FD FF      lea d, [bp + -3] ; $i
1278   0AF9 2A            mov b, [d]
1279   0AFA E7            pop d
1280   0AFB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1281   0AFF E4            pop a
1282   0B00 32            mov bl, [d]
1283   0B01 A7 00         mov bh, 0
1284   0B03 E7            pop d
1285   0B04 FD 3E         mov [d], bl
1286   0B06             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1287   0B06             _if20_cond:
1288   0B06 FA FC FF      lea d, [bp + -4] ; $hex_char
1289   0B09 32            mov bl, [d]
1290   0B0A A7 00         mov bh, 0
1291   0B0C             ; START RELATIONAL
1292   0B0C D7            push a
1293   0B0D 11            mov a, b
1294   0B0E 26 61 00      mov b, $61
1295   0B11 B0            cmp a, b
1296   0B12 FD 80         sge ; >=
1297   0B14 E4            pop a
1298   0B15             ; END RELATIONAL
1299   0B15 D7            push a
1300   0B16 11            mov a, b
1301   0B17 FA FC FF      lea d, [bp + -4] ; $hex_char
1302   0B1A 32            mov bl, [d]
1303   0B1B A7 00         mov bh, 0
1304   0B1D             ; START RELATIONAL
1305   0B1D D7            push a
1306   0B1E 11            mov a, b
1307   0B1F 26 66 00      mov b, $66
1308   0B22 B0            cmp a, b
1309   0B23 FD 73         slt ; <= (signed)
1310   0B25 E4            pop a
1311   0B26             ; END RELATIONAL
1312   0B26 FD A7         sand a, b
1313   0B28 E4            pop a
1314   0B29 C0 00 00      cmp b, 0
1315   0B2C C6 5D 0B      je _if20_else
1316   0B2F             _if20_true:
1317   0B2F             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1318   0B2F FA FF FF      lea d, [bp + -1] ; $value
1319   0B32 DA            push d
1320   0B33 FA FF FF      lea d, [bp + -1] ; $value
1321   0B36 2A            mov b, [d]
1322   0B37             ; START FACTORS
1323   0B37 D7            push a
1324   0B38 11            mov a, b
1325   0B39 26 10 00      mov b, $10
1326   0B3C AC            mul a, b ; *
1327   0B3D 11            mov a, b
1328   0B3E 27            mov b, a
1329   0B3F E4            pop a
1330   0B40             ; END FACTORS
1331   0B40             ; START TERMS
1332   0B40 D7            push a
1333   0B41 11            mov a, b
1334   0B42 FA FC FF      lea d, [bp + -4] ; $hex_char
1335   0B45 32            mov bl, [d]
1336   0B46 A7 00         mov bh, 0
1337   0B48             ; START TERMS
1338   0B48 D7            push a
1339   0B49 11            mov a, b
1340   0B4A 26 61 00      mov b, $61
1341   0B4D 60            sub a, b
1342   0B4E 27            mov b, a
1343   0B4F 11            mov a, b
1344   0B50 26 0A 00      mov b, $a
1345   0B53 56            add b, a
1346   0B54 E4            pop a
1347   0B55             ; END TERMS
1348   0B55 56            add b, a
1349   0B56 E4            pop a
1350   0B57             ; END TERMS
1351   0B57 E7            pop d
1352   0B58 FD 43         mov [d], b
1353   0B5A 0A DA 0B      jmp _if20_exit
1354   0B5D             _if20_else:
1355   0B5D             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1356   0B5D             _if21_cond:
1357   0B5D FA FC FF      lea d, [bp + -4] ; $hex_char
1358   0B60 32            mov bl, [d]
1359   0B61 A7 00         mov bh, 0
1360   0B63             ; START RELATIONAL
1361   0B63 D7            push a
1362   0B64 11            mov a, b
1363   0B65 26 41 00      mov b, $41
1364   0B68 B0            cmp a, b
1365   0B69 FD 80         sge ; >=
1366   0B6B E4            pop a
1367   0B6C             ; END RELATIONAL
1368   0B6C D7            push a
1369   0B6D 11            mov a, b
1370   0B6E FA FC FF      lea d, [bp + -4] ; $hex_char
1371   0B71 32            mov bl, [d]
1372   0B72 A7 00         mov bh, 0
1373   0B74             ; START RELATIONAL
1374   0B74 D7            push a
1375   0B75 11            mov a, b
1376   0B76 26 46 00      mov b, $46
1377   0B79 B0            cmp a, b
1378   0B7A FD 73         slt ; <= (signed)
1379   0B7C E4            pop a
1380   0B7D             ; END RELATIONAL
1381   0B7D FD A7         sand a, b
1382   0B7F E4            pop a
1383   0B80 C0 00 00      cmp b, 0
1384   0B83 C6 B4 0B      je _if21_else
1385   0B86             _if21_true:
1386   0B86             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1387   0B86 FA FF FF      lea d, [bp + -1] ; $value
1388   0B89 DA            push d
1389   0B8A FA FF FF      lea d, [bp + -1] ; $value
1390   0B8D 2A            mov b, [d]
1391   0B8E             ; START FACTORS
1392   0B8E D7            push a
1393   0B8F 11            mov a, b
1394   0B90 26 10 00      mov b, $10
1395   0B93 AC            mul a, b ; *
1396   0B94 11            mov a, b
1397   0B95 27            mov b, a
1398   0B96 E4            pop a
1399   0B97             ; END FACTORS
1400   0B97             ; START TERMS
1401   0B97 D7            push a
1402   0B98 11            mov a, b
1403   0B99 FA FC FF      lea d, [bp + -4] ; $hex_char
1404   0B9C 32            mov bl, [d]
1405   0B9D A7 00         mov bh, 0
1406   0B9F             ; START TERMS
1407   0B9F D7            push a
1408   0BA0 11            mov a, b
1409   0BA1 26 41 00      mov b, $41
1410   0BA4 60            sub a, b
1411   0BA5 27            mov b, a
1412   0BA6 11            mov a, b
1413   0BA7 26 0A 00      mov b, $a
1414   0BAA 56            add b, a
1415   0BAB E4            pop a
1416   0BAC             ; END TERMS
1417   0BAC 56            add b, a
1418   0BAD E4            pop a
1419   0BAE             ; END TERMS
1420   0BAE E7            pop d
1421   0BAF FD 43         mov [d], b
1422   0BB1 0A DA 0B      jmp _if21_exit
1423   0BB4             _if21_else:
1424   0BB4             ;; value = (value * 16) + (hex_char - '0'); 
1425   0BB4 FA FF FF      lea d, [bp + -1] ; $value
1426   0BB7 DA            push d
1427   0BB8 FA FF FF      lea d, [bp + -1] ; $value
1428   0BBB 2A            mov b, [d]
1429   0BBC             ; START FACTORS
1430   0BBC D7            push a
1431   0BBD 11            mov a, b
1432   0BBE 26 10 00      mov b, $10
1433   0BC1 AC            mul a, b ; *
1434   0BC2 11            mov a, b
1435   0BC3 27            mov b, a
1436   0BC4 E4            pop a
1437   0BC5             ; END FACTORS
1438   0BC5             ; START TERMS
1439   0BC5 D7            push a
1440   0BC6 11            mov a, b
1441   0BC7 FA FC FF      lea d, [bp + -4] ; $hex_char
1442   0BCA 32            mov bl, [d]
1443   0BCB A7 00         mov bh, 0
1444   0BCD             ; START TERMS
1445   0BCD D7            push a
1446   0BCE 11            mov a, b
1447   0BCF 26 30 00      mov b, $30
1448   0BD2 60            sub a, b
1449   0BD3 27            mov b, a
1450   0BD4 E4            pop a
1451   0BD5             ; END TERMS
1452   0BD5 56            add b, a
1453   0BD6 E4            pop a
1454   0BD7             ; END TERMS
1455   0BD7 E7            pop d
1456   0BD8 FD 43         mov [d], b
1457   0BDA             _if21_exit:
1458   0BDA             _if20_exit:
1459   0BDA             _for19_update:
1460   0BDA FA FD FF      lea d, [bp + -3] ; $i
1461   0BDD 2A            mov b, [d]
1462   0BDE D8            push b
1463   0BDF FD 77         inc b
1464   0BE1 FA FD FF      lea d, [bp + -3] ; $i
1465   0BE4 FD 43         mov [d], b
1466   0BE6 E5            pop b
1467   0BE7 0A D7 0A      jmp _for19_cond
1468   0BEA             _for19_exit:
1469   0BEA             ;; return value; 
1470   0BEA FA FF FF      lea d, [bp + -1] ; $value
1471   0BED 2A            mov b, [d]
1472   0BEE F9            leave
1473   0BEF 09            ret
1474   0BF0             
1475   0BF0             gets:
1476   0BF0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1477   0BF3             
1478   0BF3             ; --- BEGIN INLINE ASM BLOCK
1479   0BF3 FA 05 00      lea d, [bp + 5] ; $s
1480   0BF6 15            mov a, [d]
1481   0BF7 3C            mov d, a
1482   0BF8 07 93 14      call _gets
1483   0BFB             ; --- END INLINE ASM BLOCK
1484   0BFB             
1485   0BFB             ;; return strlen(s); 
1486   0BFB FA 05 00      lea d, [bp + 5] ; $s
1487   0BFE 2A            mov b, [d]
1488   0BFF FD AB         swp b
1489   0C01 D8            push b
1490   0C02 07 88 05      call strlen
1491   0C05 51 02 00      add sp, 2
1492   0C08 F9            leave
1493   0C09 09            ret
1494   0C0A             
1495   0C0A             print_signed:
1496   0C0A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1497   0C0D             ; $digits 
1498   0C0D             ; $i 
1499   0C0D 10 00 00      mov a, $0
1500   0C10 45 FA FF      mov [bp + -6], a
1501   0C13 52 07 00      sub sp, 7
1502   0C16             ;; if (num < 0) { 
1503   0C16             _if22_cond:
1504   0C16 FA 05 00      lea d, [bp + 5] ; $num
1505   0C19 2A            mov b, [d]
1506   0C1A             ; START RELATIONAL
1507   0C1A D7            push a
1508   0C1B 11            mov a, b
1509   0C1C 26 00 00      mov b, $0
1510   0C1F B0            cmp a, b
1511   0C20 FD 73         slt ; < (signed)
1512   0C22 E4            pop a
1513   0C23             ; END RELATIONAL
1514   0C23 C0 00 00      cmp b, 0
1515   0C26 C6 43 0C      je _if22_else
1516   0C29             _if22_true:
1517   0C29             ;; putchar('-'); 
1518   0C29 26 2D 00      mov b, $2d
1519   0C2C DD            push bl
1520   0C2D 07 FB 12      call putchar
1521   0C30 51 01 00      add sp, 1
1522   0C33             ;; num = -num; 
1523   0C33 FA 05 00      lea d, [bp + 5] ; $num
1524   0C36 DA            push d
1525   0C37 FA 05 00      lea d, [bp + 5] ; $num
1526   0C3A 2A            mov b, [d]
1527   0C3B FD 97         neg b
1528   0C3D E7            pop d
1529   0C3E FD 43         mov [d], b
1530   0C40 0A 65 0C      jmp _if22_exit
1531   0C43             _if22_else:
1532   0C43             ;; if (num == 0) { 
1533   0C43             _if23_cond:
1534   0C43 FA 05 00      lea d, [bp + 5] ; $num
1535   0C46 2A            mov b, [d]
1536   0C47             ; START RELATIONAL
1537   0C47 D7            push a
1538   0C48 11            mov a, b
1539   0C49 26 00 00      mov b, $0
1540   0C4C B0            cmp a, b
1541   0C4D FD 71         seq ; ==
1542   0C4F E4            pop a
1543   0C50             ; END RELATIONAL
1544   0C50 C0 00 00      cmp b, 0
1545   0C53 C6 65 0C      je _if23_exit
1546   0C56             _if23_true:
1547   0C56             ;; putchar('0'); 
1548   0C56 26 30 00      mov b, $30
1549   0C59 DD            push bl
1550   0C5A 07 FB 12      call putchar
1551   0C5D 51 01 00      add sp, 1
1552   0C60             ;; return; 
1553   0C60 F9            leave
1554   0C61 09            ret
1555   0C62 0A 65 0C      jmp _if23_exit
1556   0C65             _if23_exit:
1557   0C65             _if22_exit:
1558   0C65             ;; while (num > 0) { 
1559   0C65             _while24_cond:
1560   0C65 FA 05 00      lea d, [bp + 5] ; $num
1561   0C68 2A            mov b, [d]
1562   0C69             ; START RELATIONAL
1563   0C69 D7            push a
1564   0C6A 11            mov a, b
1565   0C6B 26 00 00      mov b, $0
1566   0C6E B0            cmp a, b
1567   0C6F FD 7F         sgt ; >
1568   0C71 E4            pop a
1569   0C72             ; END RELATIONAL
1570   0C72 C0 00 00      cmp b, 0
1571   0C75 C6 BF 0C      je _while24_exit
1572   0C78             _while24_block:
1573   0C78             ;; digits[i] = '0' + (num % 10); 
1574   0C78 FA FC FF      lea d, [bp + -4] ; $digits
1575   0C7B D7            push a
1576   0C7C DA            push d
1577   0C7D FA FA FF      lea d, [bp + -6] ; $i
1578   0C80 2A            mov b, [d]
1579   0C81 E7            pop d
1580   0C82 5A            add d, b
1581   0C83 E4            pop a
1582   0C84 DA            push d
1583   0C85 26 30 00      mov b, $30
1584   0C88             ; START TERMS
1585   0C88 D7            push a
1586   0C89 11            mov a, b
1587   0C8A FA 05 00      lea d, [bp + 5] ; $num
1588   0C8D 2A            mov b, [d]
1589   0C8E             ; START FACTORS
1590   0C8E D7            push a
1591   0C8F 11            mov a, b
1592   0C90 26 0A 00      mov b, $a
1593   0C93 AE            div a, b ; 
1594   0C94 11            mov a, b
1595   0C95 27            mov b, a
1596   0C96 E4            pop a
1597   0C97             ; END FACTORS
1598   0C97 56            add b, a
1599   0C98 E4            pop a
1600   0C99             ; END TERMS
1601   0C99 E7            pop d
1602   0C9A FD 3E         mov [d], bl
1603   0C9C             ;; num = num / 10; 
1604   0C9C FA 05 00      lea d, [bp + 5] ; $num
1605   0C9F DA            push d
1606   0CA0 FA 05 00      lea d, [bp + 5] ; $num
1607   0CA3 2A            mov b, [d]
1608   0CA4             ; START FACTORS
1609   0CA4 D7            push a
1610   0CA5 11            mov a, b
1611   0CA6 26 0A 00      mov b, $a
1612   0CA9 AE            div a, b
1613   0CAA 27            mov b, a
1614   0CAB E4            pop a
1615   0CAC             ; END FACTORS
1616   0CAC E7            pop d
1617   0CAD FD 43         mov [d], b
1618   0CAF             ;; i++; 
1619   0CAF FA FA FF      lea d, [bp + -6] ; $i
1620   0CB2 2A            mov b, [d]
1621   0CB3 D8            push b
1622   0CB4 FD 77         inc b
1623   0CB6 FA FA FF      lea d, [bp + -6] ; $i
1624   0CB9 FD 43         mov [d], b
1625   0CBB E5            pop b
1626   0CBC 0A 65 0C      jmp _while24_cond
1627   0CBF             _while24_exit:
1628   0CBF             ;; while (i > 0) { 
1629   0CBF             _while25_cond:
1630   0CBF FA FA FF      lea d, [bp + -6] ; $i
1631   0CC2 2A            mov b, [d]
1632   0CC3             ; START RELATIONAL
1633   0CC3 D7            push a
1634   0CC4 11            mov a, b
1635   0CC5 26 00 00      mov b, $0
1636   0CC8 B0            cmp a, b
1637   0CC9 FD 7F         sgt ; >
1638   0CCB E4            pop a
1639   0CCC             ; END RELATIONAL
1640   0CCC C0 00 00      cmp b, 0
1641   0CCF C6 F8 0C      je _while25_exit
1642   0CD2             _while25_block:
1643   0CD2             ;; i--; 
1644   0CD2 FA FA FF      lea d, [bp + -6] ; $i
1645   0CD5 2A            mov b, [d]
1646   0CD6 D8            push b
1647   0CD7 FD 7D         dec b
1648   0CD9 FA FA FF      lea d, [bp + -6] ; $i
1649   0CDC FD 43         mov [d], b
1650   0CDE E5            pop b
1651   0CDF             ;; putchar(digits[i]); 
1652   0CDF FA FC FF      lea d, [bp + -4] ; $digits
1653   0CE2 D7            push a
1654   0CE3 DA            push d
1655   0CE4 FA FA FF      lea d, [bp + -6] ; $i
1656   0CE7 2A            mov b, [d]
1657   0CE8 E7            pop d
1658   0CE9 5A            add d, b
1659   0CEA E4            pop a
1660   0CEB 32            mov bl, [d]
1661   0CEC A7 00         mov bh, 0
1662   0CEE DD            push bl
1663   0CEF 07 FB 12      call putchar
1664   0CF2 51 01 00      add sp, 1
1665   0CF5 0A BF 0C      jmp _while25_cond
1666   0CF8             _while25_exit:
1667   0CF8 F9            leave
1668   0CF9 09            ret
1669   0CFA             
1670   0CFA             print_signed_long:
1671   0CFA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1672   0CFD             ; $digits 
1673   0CFD             ; $i 
1674   0CFD 10 00 00      mov a, $0
1675   0D00 45 F5 FF      mov [bp + -11], a
1676   0D03 52 0C 00      sub sp, 12
1677   0D06             ;; if (num < 0) { 
1678   0D06             _if26_cond:
1679   0D06 FA 05 00      lea d, [bp + 5] ; $num
1680   0D09 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1681   0D0C FD 39         mov c, b ; And place it into C
1682   0D0E 2A            mov b, [d] ; Lower Word in B
1683   0D0F             ; START RELATIONAL
1684   0D0F D7            push a
1685   0D10 FD D8         push g
1686   0D12 11            mov a, b
1687   0D13 FD 7A         mov g, c
1688   0D15 26 00 00      mov b, $0
1689   0D18 38 00 00      mov c, 0
1690   0D1B FD AF 00 00   cmp32 ga, cb
1690   0D1F 00 00 00 00 
1690   0D23 00 00 00 00 
1690   0D27 00 00 00 00 
1690   0D2B 00 00 00 00 
1690   0D2F 00 00 00 00 
1690   0D33 00 00 00 00 
1690   0D37 00 00 00 00 
1690   0D3B 00 00 00 00 
1690   0D3F 00 00 00 00 
1690   0D43 00 00 00 00 
1690   0D47 00 00 00 00 
1690   0D4B 00 00 00 00 
1690   0D4F 00 00 00 00 
1690   0D53 00 00 00 00 
1690   0D57 00 00 00 00 
1690   0D5B 00 00 00 00 
1690   0D5F 00 00 00 00 
1690   0D63 00 00 00 00 
1690   0D67 00 00 00 00 
1690   0D6B 00 00 00 00 
1690   0D6F 00 00 00 00 
1690   0D73 00 00 00 00 
1690   0D77 00 00 00 00 
1690   0D7B 00 00 00 00 
1690   0D7F 00 00 00 00 
1690   0D83 00 00 00 00 
1690   0D87 00 00 00 00 
1690   0D8B 00 00 00 00 
1690   0D8F 00 00 00 00 
1690   0D93 00 00 00 00 
1690   0D97 00 00 00 00 
1690   0D9B 00 00 00 00 
1690   0D9F 00 00 00 00 
1690   0DA3 00 00 00 00 
1690   0DA7 00 00 00 00 
1690   0DAB 00 00 00 00 
1690   0DAF 00 00 00 00 
1690   0DB3 00 00 00 00 
1690   0DB7 00 00 00 00 
1690   0DBB 00 00 00 00 
1690   0DBF 00 00 00 00 
1690   0DC3 00 00 00 00 
1690   0DC7 00 00 00 00 
1690   0DCB 00 00 00 00 
1690   0DCF 00 00 00 00 
1690   0DD3 00 00 00 00 
1690   0DD7 00 00 00 00 
1690   0DDB 00 00 00 00 
1690   0DDF 00 00 00 00 
1690   0DE3 00 00 00 00 
1690   0DE7 00 00 00 00 
1690   0DEB 00 00 00 00 
1690   0DEF 00 00 00 00 
1690   0DF3 00 00 00 00 
1690   0DF7 00 00 00 00 
1690   0DFB 00 00 00 00 
1690   0DFF 00 00 00 00 
1690   0E03 00 00 00 00 
1690   0E07 00 00 00 00 
1690   0E0B 00 00 00 00 
1690   0E0F 00 00 00 00 
1690   0E13 00 00 00 00 
1690   0E17 00 00 00 00 
1690   0E1B 00 
1691   0E1C FD 73         slt ; <
1692   0E1E FD F1         pop g
1693   0E20 E4            pop a
1694   0E21             ; END RELATIONAL
1695   0E21 C0 00 00      cmp b, 0
1696   0E24 C6 4B 0E      je _if26_else
1697   0E27             _if26_true:
1698   0E27             ;; putchar('-'); 
1699   0E27 26 2D 00      mov b, $2d
1700   0E2A DD            push bl
1701   0E2B 07 FB 12      call putchar
1702   0E2E 51 01 00      add sp, 1
1703   0E31             ;; num = -num; 
1704   0E31 FA 05 00      lea d, [bp + 5] ; $num
1705   0E34 DA            push d
1706   0E35 FA 05 00      lea d, [bp + 5] ; $num
1707   0E38 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1708   0E3B FD 39         mov c, b ; And place it into C
1709   0E3D 2A            mov b, [d] ; Lower Word in B
1710   0E3E FD 97         neg b
1711   0E40 E7            pop d
1712   0E41 FD 43         mov [d], b
1713   0E43 28            mov b, c
1714   0E44 FD 44 02 00   mov [d + 2], b
1715   0E48 0A 7B 0F      jmp _if26_exit
1716   0E4B             _if26_else:
1717   0E4B             ;; if (num == 0) { 
1718   0E4B             _if27_cond:
1719   0E4B FA 05 00      lea d, [bp + 5] ; $num
1720   0E4E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1721   0E51 FD 39         mov c, b ; And place it into C
1722   0E53 2A            mov b, [d] ; Lower Word in B
1723   0E54             ; START RELATIONAL
1724   0E54 D7            push a
1725   0E55 FD D8         push g
1726   0E57 11            mov a, b
1727   0E58 FD 7A         mov g, c
1728   0E5A 26 00 00      mov b, $0
1729   0E5D 38 00 00      mov c, 0
1730   0E60 FD AF 00 00   cmp32 ga, cb
1730   0E64 00 00 00 00 
1730   0E68 00 00 00 00 
1730   0E6C 00 00 00 00 
1730   0E70 00 00 00 00 
1730   0E74 00 00 00 00 
1730   0E78 00 00 00 00 
1730   0E7C 00 00 00 00 
1730   0E80 00 00 00 00 
1730   0E84 00 00 00 00 
1730   0E88 00 00 00 00 
1730   0E8C 00 00 00 00 
1730   0E90 00 00 00 00 
1730   0E94 00 00 00 00 
1730   0E98 00 00 00 00 
1730   0E9C 00 00 00 00 
1730   0EA0 00 00 00 00 
1730   0EA4 00 00 00 00 
1730   0EA8 00 00 00 00 
1730   0EAC 00 00 00 00 
1730   0EB0 00 00 00 00 
1730   0EB4 00 00 00 00 
1730   0EB8 00 00 00 00 
1730   0EBC 00 00 00 00 
1730   0EC0 00 00 00 00 
1730   0EC4 00 00 00 00 
1730   0EC8 00 00 00 00 
1730   0ECC 00 00 00 00 
1730   0ED0 00 00 00 00 
1730   0ED4 00 00 00 00 
1730   0ED8 00 00 00 00 
1730   0EDC 00 00 00 00 
1730   0EE0 00 00 00 00 
1730   0EE4 00 00 00 00 
1730   0EE8 00 00 00 00 
1730   0EEC 00 00 00 00 
1730   0EF0 00 00 00 00 
1730   0EF4 00 00 00 00 
1730   0EF8 00 00 00 00 
1730   0EFC 00 00 00 00 
1730   0F00 00 00 00 00 
1730   0F04 00 00 00 00 
1730   0F08 00 00 00 00 
1730   0F0C 00 00 00 00 
1730   0F10 00 00 00 00 
1730   0F14 00 00 00 00 
1730   0F18 00 00 00 00 
1730   0F1C 00 00 00 00 
1730   0F20 00 00 00 00 
1730   0F24 00 00 00 00 
1730   0F28 00 00 00 00 
1730   0F2C 00 00 00 00 
1730   0F30 00 00 00 00 
1730   0F34 00 00 00 00 
1730   0F38 00 00 00 00 
1730   0F3C 00 00 00 00 
1730   0F40 00 00 00 00 
1730   0F44 00 00 00 00 
1730   0F48 00 00 00 00 
1730   0F4C 00 00 00 00 
1730   0F50 00 00 00 00 
1730   0F54 00 00 00 00 
1730   0F58 00 00 00 00 
1730   0F5C 00 00 00 00 
1730   0F60 00 
1731   0F61 FD 71         seq ; ==
1732   0F63 FD F1         pop g
1733   0F65 E4            pop a
1734   0F66             ; END RELATIONAL
1735   0F66 C0 00 00      cmp b, 0
1736   0F69 C6 7B 0F      je _if27_exit
1737   0F6C             _if27_true:
1738   0F6C             ;; putchar('0'); 
1739   0F6C 26 30 00      mov b, $30
1740   0F6F DD            push bl
1741   0F70 07 FB 12      call putchar
1742   0F73 51 01 00      add sp, 1
1743   0F76             ;; return; 
1744   0F76 F9            leave
1745   0F77 09            ret
1746   0F78 0A 7B 0F      jmp _if27_exit
1747   0F7B             _if27_exit:
1748   0F7B             _if26_exit:
1749   0F7B             ;; while (num > 0) { 
1750   0F7B             _while28_cond:
1751   0F7B FA 05 00      lea d, [bp + 5] ; $num
1752   0F7E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1753   0F81 FD 39         mov c, b ; And place it into C
1754   0F83 2A            mov b, [d] ; Lower Word in B
1755   0F84             ; START RELATIONAL
1756   0F84 D7            push a
1757   0F85 FD D8         push g
1758   0F87 11            mov a, b
1759   0F88 FD 7A         mov g, c
1760   0F8A 26 00 00      mov b, $0
1761   0F8D 38 00 00      mov c, 0
1762   0F90 FD 7F         sgt
1763   0F92 FD F1         pop g
1764   0F94 E4            pop a
1765   0F95             ; END RELATIONAL
1766   0F95 C0 00 00      cmp b, 0
1767   0F98 C6 F8 0F      je _while28_exit
1768   0F9B             _while28_block:
1769   0F9B             ;; digits[i] = '0' + (num % 10); 
1770   0F9B FA F7 FF      lea d, [bp + -9] ; $digits
1771   0F9E D7            push a
1772   0F9F DA            push d
1773   0FA0 FA F5 FF      lea d, [bp + -11] ; $i
1774   0FA3 2A            mov b, [d]
1775   0FA4 E7            pop d
1776   0FA5 5A            add d, b
1777   0FA6 E4            pop a
1778   0FA7 DA            push d
1779   0FA8 26 30 00      mov b, $30
1780   0FAB             ; START TERMS
1781   0FAB D7            push a
1782   0FAC 11            mov a, b
1783   0FAD FA 05 00      lea d, [bp + 5] ; $num
1784   0FB0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1785   0FB3 FD 39         mov c, b ; And place it into C
1786   0FB5 2A            mov b, [d] ; Lower Word in B
1787   0FB6             ; START FACTORS
1788   0FB6 D7            push a
1789   0FB7 11            mov a, b
1790   0FB8 26 0A 00      mov b, $a
1791   0FBB AE            div a, b ; 
1792   0FBC 11            mov a, b
1793   0FBD 27            mov b, a
1794   0FBE E4            pop a
1795   0FBF             ; END FACTORS
1796   0FBF 54            add a, b
1797   0FC0 D7            push a
1798   0FC1 FD 12         mov a, g
1799   0FC3 28            mov b, c
1800   0FC4 5C            adc a, b
1801   0FC5 39            mov c, a
1802   0FC6 E5            pop b
1803   0FC7 E4            pop a
1804   0FC8             ; END TERMS
1805   0FC8 E7            pop d
1806   0FC9 FD 3E         mov [d], bl
1807   0FCB             ;; num = num / 10; 
1808   0FCB FA 05 00      lea d, [bp + 5] ; $num
1809   0FCE DA            push d
1810   0FCF FA 05 00      lea d, [bp + 5] ; $num
1811   0FD2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1812   0FD5 FD 39         mov c, b ; And place it into C
1813   0FD7 2A            mov b, [d] ; Lower Word in B
1814   0FD8             ; START FACTORS
1815   0FD8 D7            push a
1816   0FD9 11            mov a, b
1817   0FDA 26 0A 00      mov b, $a
1818   0FDD AE            div a, b
1819   0FDE 27            mov b, a
1820   0FDF E4            pop a
1821   0FE0             ; END FACTORS
1822   0FE0 E7            pop d
1823   0FE1 FD 43         mov [d], b
1824   0FE3 28            mov b, c
1825   0FE4 FD 44 02 00   mov [d + 2], b
1826   0FE8             ;; i++; 
1827   0FE8 FA F5 FF      lea d, [bp + -11] ; $i
1828   0FEB 2A            mov b, [d]
1829   0FEC D8            push b
1830   0FED FD 77         inc b
1831   0FEF FA F5 FF      lea d, [bp + -11] ; $i
1832   0FF2 FD 43         mov [d], b
1833   0FF4 E5            pop b
1834   0FF5 0A 7B 0F      jmp _while28_cond
1835   0FF8             _while28_exit:
1836   0FF8             ;; while (i > 0) { 
1837   0FF8             _while29_cond:
1838   0FF8 FA F5 FF      lea d, [bp + -11] ; $i
1839   0FFB 2A            mov b, [d]
1840   0FFC             ; START RELATIONAL
1841   0FFC D7            push a
1842   0FFD 11            mov a, b
1843   0FFE 26 00 00      mov b, $0
1844   1001 B0            cmp a, b
1845   1002 FD 7F         sgt ; >
1846   1004 E4            pop a
1847   1005             ; END RELATIONAL
1848   1005 C0 00 00      cmp b, 0
1849   1008 C6 31 10      je _while29_exit
1850   100B             _while29_block:
1851   100B             ;; i--; 
1852   100B FA F5 FF      lea d, [bp + -11] ; $i
1853   100E 2A            mov b, [d]
1854   100F D8            push b
1855   1010 FD 7D         dec b
1856   1012 FA F5 FF      lea d, [bp + -11] ; $i
1857   1015 FD 43         mov [d], b
1858   1017 E5            pop b
1859   1018             ;; putchar(digits[i]); 
1860   1018 FA F7 FF      lea d, [bp + -9] ; $digits
1861   101B D7            push a
1862   101C DA            push d
1863   101D FA F5 FF      lea d, [bp + -11] ; $i
1864   1020 2A            mov b, [d]
1865   1021 E7            pop d
1866   1022 5A            add d, b
1867   1023 E4            pop a
1868   1024 32            mov bl, [d]
1869   1025 A7 00         mov bh, 0
1870   1027 DD            push bl
1871   1028 07 FB 12      call putchar
1872   102B 51 01 00      add sp, 1
1873   102E 0A F8 0F      jmp _while29_cond
1874   1031             _while29_exit:
1875   1031 F9            leave
1876   1032 09            ret
1877   1033             
1878   1033             print_unsigned_long:
1879   1033 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1880   1036             ; $digits 
1881   1036             ; $i 
1882   1036 52 0C 00      sub sp, 12
1883   1039             ;; i = 0; 
1884   1039 FA F5 FF      lea d, [bp + -11] ; $i
1885   103C DA            push d
1886   103D 26 00 00      mov b, $0
1887   1040 E7            pop d
1888   1041 FD 43         mov [d], b
1889   1043             ;; if(num == 0){ 
1890   1043             _if30_cond:
1891   1043 FA 05 00      lea d, [bp + 5] ; $num
1892   1046 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1893   1049 FD 39         mov c, b ; And place it into C
1894   104B 2A            mov b, [d] ; Lower Word in B
1895   104C             ; START RELATIONAL
1896   104C D7            push a
1897   104D FD D8         push g
1898   104F 11            mov a, b
1899   1050 FD 7A         mov g, c
1900   1052 26 00 00      mov b, $0
1901   1055 38 00 00      mov c, 0
1902   1058 FD AF 00 00   cmp32 ga, cb
1902   105C 00 00 00 00 
1902   1060 00 00 00 00 
1902   1064 00 00 00 00 
1902   1068 00 00 00 00 
1902   106C 00 00 00 00 
1902   1070 00 00 00 00 
1902   1074 00 00 00 00 
1902   1078 00 00 00 00 
1902   107C 00 00 00 00 
1902   1080 00 00 00 00 
1902   1084 00 00 00 00 
1902   1088 00 00 00 00 
1902   108C 00 00 00 00 
1902   1090 00 00 00 00 
1902   1094 00 00 00 00 
1902   1098 00 00 00 00 
1902   109C 00 00 00 00 
1902   10A0 00 00 00 00 
1902   10A4 00 00 00 00 
1902   10A8 00 00 00 00 
1902   10AC 00 00 00 00 
1902   10B0 00 00 00 00 
1902   10B4 00 00 00 00 
1902   10B8 00 00 00 00 
1902   10BC 00 00 00 00 
1902   10C0 00 00 00 00 
1902   10C4 00 00 00 00 
1902   10C8 00 00 00 00 
1902   10CC 00 00 00 00 
1902   10D0 00 00 00 00 
1902   10D4 00 00 00 00 
1902   10D8 00 00 00 00 
1902   10DC 00 00 00 00 
1902   10E0 00 00 00 00 
1902   10E4 00 00 00 00 
1902   10E8 00 00 00 00 
1902   10EC 00 00 00 00 
1902   10F0 00 00 00 00 
1902   10F4 00 00 00 00 
1902   10F8 00 00 00 00 
1902   10FC 00 00 00 00 
1902   1100 00 00 00 00 
1902   1104 00 00 00 00 
1902   1108 00 00 00 00 
1902   110C 00 00 00 00 
1902   1110 00 00 00 00 
1902   1114 00 00 00 00 
1902   1118 00 00 00 00 
1902   111C 00 00 00 00 
1902   1120 00 00 00 00 
1902   1124 00 00 00 00 
1902   1128 00 00 00 00 
1902   112C 00 00 00 00 
1902   1130 00 00 00 00 
1902   1134 00 00 00 00 
1902   1138 00 00 00 00 
1902   113C 00 00 00 00 
1902   1140 00 00 00 00 
1902   1144 00 00 00 00 
1902   1148 00 00 00 00 
1902   114C 00 00 00 00 
1902   1150 00 00 00 00 
1902   1154 00 00 00 00 
1902   1158 00 
1903   1159 FD 71         seq ; ==
1904   115B FD F1         pop g
1905   115D E4            pop a
1906   115E             ; END RELATIONAL
1907   115E C0 00 00      cmp b, 0
1908   1161 C6 73 11      je _if30_exit
1909   1164             _if30_true:
1910   1164             ;; putchar('0'); 
1911   1164 26 30 00      mov b, $30
1912   1167 DD            push bl
1913   1168 07 FB 12      call putchar
1914   116B 51 01 00      add sp, 1
1915   116E             ;; return; 
1916   116E F9            leave
1917   116F 09            ret
1918   1170 0A 73 11      jmp _if30_exit
1919   1173             _if30_exit:
1920   1173             ;; while (num > 0) { 
1921   1173             _while31_cond:
1922   1173 FA 05 00      lea d, [bp + 5] ; $num
1923   1176 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1924   1179 FD 39         mov c, b ; And place it into C
1925   117B 2A            mov b, [d] ; Lower Word in B
1926   117C             ; START RELATIONAL
1927   117C D7            push a
1928   117D FD D8         push g
1929   117F 11            mov a, b
1930   1180 FD 7A         mov g, c
1931   1182 26 00 00      mov b, $0
1932   1185 38 00 00      mov c, 0
1933   1188 FD 81         sgu
1934   118A FD F1         pop g
1935   118C E4            pop a
1936   118D             ; END RELATIONAL
1937   118D C0 00 00      cmp b, 0
1938   1190 C6 F0 11      je _while31_exit
1939   1193             _while31_block:
1940   1193             ;; digits[i] = '0' + (num % 10); 
1941   1193 FA F7 FF      lea d, [bp + -9] ; $digits
1942   1196 D7            push a
1943   1197 DA            push d
1944   1198 FA F5 FF      lea d, [bp + -11] ; $i
1945   119B 2A            mov b, [d]
1946   119C E7            pop d
1947   119D 5A            add d, b
1948   119E E4            pop a
1949   119F DA            push d
1950   11A0 26 30 00      mov b, $30
1951   11A3             ; START TERMS
1952   11A3 D7            push a
1953   11A4 11            mov a, b
1954   11A5 FA 05 00      lea d, [bp + 5] ; $num
1955   11A8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1956   11AB FD 39         mov c, b ; And place it into C
1957   11AD 2A            mov b, [d] ; Lower Word in B
1958   11AE             ; START FACTORS
1959   11AE D7            push a
1960   11AF 11            mov a, b
1961   11B0 26 0A 00      mov b, $a
1962   11B3 AE            div a, b ; 
1963   11B4 11            mov a, b
1964   11B5 27            mov b, a
1965   11B6 E4            pop a
1966   11B7             ; END FACTORS
1967   11B7 54            add a, b
1968   11B8 D7            push a
1969   11B9 FD 12         mov a, g
1970   11BB 28            mov b, c
1971   11BC 5C            adc a, b
1972   11BD 39            mov c, a
1973   11BE E5            pop b
1974   11BF E4            pop a
1975   11C0             ; END TERMS
1976   11C0 E7            pop d
1977   11C1 FD 3E         mov [d], bl
1978   11C3             ;; num = num / 10; 
1979   11C3 FA 05 00      lea d, [bp + 5] ; $num
1980   11C6 DA            push d
1981   11C7 FA 05 00      lea d, [bp + 5] ; $num
1982   11CA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1983   11CD FD 39         mov c, b ; And place it into C
1984   11CF 2A            mov b, [d] ; Lower Word in B
1985   11D0             ; START FACTORS
1986   11D0 D7            push a
1987   11D1 11            mov a, b
1988   11D2 26 0A 00      mov b, $a
1989   11D5 AE            div a, b
1990   11D6 27            mov b, a
1991   11D7 E4            pop a
1992   11D8             ; END FACTORS
1993   11D8 E7            pop d
1994   11D9 FD 43         mov [d], b
1995   11DB 28            mov b, c
1996   11DC FD 44 02 00   mov [d + 2], b
1997   11E0             ;; i++; 
1998   11E0 FA F5 FF      lea d, [bp + -11] ; $i
1999   11E3 2A            mov b, [d]
2000   11E4 D8            push b
2001   11E5 FD 77         inc b
2002   11E7 FA F5 FF      lea d, [bp + -11] ; $i
2003   11EA FD 43         mov [d], b
2004   11EC E5            pop b
2005   11ED 0A 73 11      jmp _while31_cond
2006   11F0             _while31_exit:
2007   11F0             ;; while (i > 0) { 
2008   11F0             _while32_cond:
2009   11F0 FA F5 FF      lea d, [bp + -11] ; $i
2010   11F3 2A            mov b, [d]
2011   11F4             ; START RELATIONAL
2012   11F4 D7            push a
2013   11F5 11            mov a, b
2014   11F6 26 00 00      mov b, $0
2015   11F9 B0            cmp a, b
2016   11FA FD 7F         sgt ; >
2017   11FC E4            pop a
2018   11FD             ; END RELATIONAL
2019   11FD C0 00 00      cmp b, 0
2020   1200 C6 29 12      je _while32_exit
2021   1203             _while32_block:
2022   1203             ;; i--; 
2023   1203 FA F5 FF      lea d, [bp + -11] ; $i
2024   1206 2A            mov b, [d]
2025   1207 D8            push b
2026   1208 FD 7D         dec b
2027   120A FA F5 FF      lea d, [bp + -11] ; $i
2028   120D FD 43         mov [d], b
2029   120F E5            pop b
2030   1210             ;; putchar(digits[i]); 
2031   1210 FA F7 FF      lea d, [bp + -9] ; $digits
2032   1213 D7            push a
2033   1214 DA            push d
2034   1215 FA F5 FF      lea d, [bp + -11] ; $i
2035   1218 2A            mov b, [d]
2036   1219 E7            pop d
2037   121A 5A            add d, b
2038   121B E4            pop a
2039   121C 32            mov bl, [d]
2040   121D A7 00         mov bh, 0
2041   121F DD            push bl
2042   1220 07 FB 12      call putchar
2043   1223 51 01 00      add sp, 1
2044   1226 0A F0 11      jmp _while32_cond
2045   1229             _while32_exit:
2046   1229 F9            leave
2047   122A 09            ret
2048   122B             
2049   122B             print_unsigned:
2050   122B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2051   122E             ; $digits 
2052   122E             ; $i 
2053   122E 52 07 00      sub sp, 7
2054   1231             ;; i = 0; 
2055   1231 FA FA FF      lea d, [bp + -6] ; $i
2056   1234 DA            push d
2057   1235 26 00 00      mov b, $0
2058   1238 E7            pop d
2059   1239 FD 43         mov [d], b
2060   123B             ;; if(num == 0){ 
2061   123B             _if33_cond:
2062   123B FA 05 00      lea d, [bp + 5] ; $num
2063   123E 2A            mov b, [d]
2064   123F             ; START RELATIONAL
2065   123F D7            push a
2066   1240 11            mov a, b
2067   1241 26 00 00      mov b, $0
2068   1244 B0            cmp a, b
2069   1245 FD 71         seq ; ==
2070   1247 E4            pop a
2071   1248             ; END RELATIONAL
2072   1248 C0 00 00      cmp b, 0
2073   124B C6 5D 12      je _if33_exit
2074   124E             _if33_true:
2075   124E             ;; putchar('0'); 
2076   124E 26 30 00      mov b, $30
2077   1251 DD            push bl
2078   1252 07 FB 12      call putchar
2079   1255 51 01 00      add sp, 1
2080   1258             ;; return; 
2081   1258 F9            leave
2082   1259 09            ret
2083   125A 0A 5D 12      jmp _if33_exit
2084   125D             _if33_exit:
2085   125D             ;; while (num > 0) { 
2086   125D             _while34_cond:
2087   125D FA 05 00      lea d, [bp + 5] ; $num
2088   1260 2A            mov b, [d]
2089   1261             ; START RELATIONAL
2090   1261 D7            push a
2091   1262 11            mov a, b
2092   1263 26 00 00      mov b, $0
2093   1266 B0            cmp a, b
2094   1267 FD 81         sgu ; > (unsigned)
2095   1269 E4            pop a
2096   126A             ; END RELATIONAL
2097   126A C0 00 00      cmp b, 0
2098   126D C6 B7 12      je _while34_exit
2099   1270             _while34_block:
2100   1270             ;; digits[i] = '0' + (num % 10); 
2101   1270 FA FC FF      lea d, [bp + -4] ; $digits
2102   1273 D7            push a
2103   1274 DA            push d
2104   1275 FA FA FF      lea d, [bp + -6] ; $i
2105   1278 2A            mov b, [d]
2106   1279 E7            pop d
2107   127A 5A            add d, b
2108   127B E4            pop a
2109   127C DA            push d
2110   127D 26 30 00      mov b, $30
2111   1280             ; START TERMS
2112   1280 D7            push a
2113   1281 11            mov a, b
2114   1282 FA 05 00      lea d, [bp + 5] ; $num
2115   1285 2A            mov b, [d]
2116   1286             ; START FACTORS
2117   1286 D7            push a
2118   1287 11            mov a, b
2119   1288 26 0A 00      mov b, $a
2120   128B AE            div a, b ; 
2121   128C 11            mov a, b
2122   128D 27            mov b, a
2123   128E E4            pop a
2124   128F             ; END FACTORS
2125   128F 56            add b, a
2126   1290 E4            pop a
2127   1291             ; END TERMS
2128   1291 E7            pop d
2129   1292 FD 3E         mov [d], bl
2130   1294             ;; num = num / 10; 
2131   1294 FA 05 00      lea d, [bp + 5] ; $num
2132   1297 DA            push d
2133   1298 FA 05 00      lea d, [bp + 5] ; $num
2134   129B 2A            mov b, [d]
2135   129C             ; START FACTORS
2136   129C D7            push a
2137   129D 11            mov a, b
2138   129E 26 0A 00      mov b, $a
2139   12A1 AE            div a, b
2140   12A2 27            mov b, a
2141   12A3 E4            pop a
2142   12A4             ; END FACTORS
2143   12A4 E7            pop d
2144   12A5 FD 43         mov [d], b
2145   12A7             ;; i++; 
2146   12A7 FA FA FF      lea d, [bp + -6] ; $i
2147   12AA 2A            mov b, [d]
2148   12AB D8            push b
2149   12AC FD 77         inc b
2150   12AE FA FA FF      lea d, [bp + -6] ; $i
2151   12B1 FD 43         mov [d], b
2152   12B3 E5            pop b
2153   12B4 0A 5D 12      jmp _while34_cond
2154   12B7             _while34_exit:
2155   12B7             ;; while (i > 0) { 
2156   12B7             _while35_cond:
2157   12B7 FA FA FF      lea d, [bp + -6] ; $i
2158   12BA 2A            mov b, [d]
2159   12BB             ; START RELATIONAL
2160   12BB D7            push a
2161   12BC 11            mov a, b
2162   12BD 26 00 00      mov b, $0
2163   12C0 B0            cmp a, b
2164   12C1 FD 7F         sgt ; >
2165   12C3 E4            pop a
2166   12C4             ; END RELATIONAL
2167   12C4 C0 00 00      cmp b, 0
2168   12C7 C6 F0 12      je _while35_exit
2169   12CA             _while35_block:
2170   12CA             ;; i--; 
2171   12CA FA FA FF      lea d, [bp + -6] ; $i
2172   12CD 2A            mov b, [d]
2173   12CE D8            push b
2174   12CF FD 7D         dec b
2175   12D1 FA FA FF      lea d, [bp + -6] ; $i
2176   12D4 FD 43         mov [d], b
2177   12D6 E5            pop b
2178   12D7             ;; putchar(digits[i]); 
2179   12D7 FA FC FF      lea d, [bp + -4] ; $digits
2180   12DA D7            push a
2181   12DB DA            push d
2182   12DC FA FA FF      lea d, [bp + -6] ; $i
2183   12DF 2A            mov b, [d]
2184   12E0 E7            pop d
2185   12E1 5A            add d, b
2186   12E2 E4            pop a
2187   12E3 32            mov bl, [d]
2188   12E4 A7 00         mov bh, 0
2189   12E6 DD            push bl
2190   12E7 07 FB 12      call putchar
2191   12EA 51 01 00      add sp, 1
2192   12ED 0A B7 12      jmp _while35_cond
2193   12F0             _while35_exit:
2194   12F0 F9            leave
2195   12F1 09            ret
2196   12F2             
2197   12F2             date:
2198   12F2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2199   12F5             
2200   12F5             ; --- BEGIN INLINE ASM BLOCK
2201   12F5 19 00         mov al, 0 
2202   12F7 05 07         syscall sys_datetime
2203   12F9             ; --- END INLINE ASM BLOCK
2204   12F9             
2205   12F9 F9            leave
2206   12FA 09            ret
2207   12FB             
2208   12FB             putchar:
2209   12FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2210   12FE             
2211   12FE             ; --- BEGIN INLINE ASM BLOCK
2212   12FE FA 05 00      lea d, [bp + 5] ; $c
2213   1301 1E            mov al, [d]
2214   1302 23            mov ah, al
2215   1303 07 8C 14      call _putchar
2216   1306             ; --- END INLINE ASM BLOCK
2217   1306             
2218   1306 F9            leave
2219   1307 09            ret
2220   1308             
2221   1308             getchar:
2222   1308 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2223   130B             ; $c 
2224   130B 52 01 00      sub sp, 1
2225   130E             
2226   130E             ; --- BEGIN INLINE ASM BLOCK
2227   130E 07 85 14      call getch
2228   1311 1A            mov al, ah
2229   1312 FA 00 00      lea d, [bp + 0] ; $c
2230   1315 3E            mov [d], al
2231   1316             ; --- END INLINE ASM BLOCK
2232   1316             
2233   1316             ;; return c; 
2234   1316 FA 00 00      lea d, [bp + 0] ; $c
2235   1319 32            mov bl, [d]
2236   131A A7 00         mov bh, 0
2237   131C F9            leave
2238   131D 09            ret
2239   131E             
2240   131E             scann:
2241   131E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2242   1321             ; $m 
2243   1321 52 02 00      sub sp, 2
2244   1324             
2245   1324             ; --- BEGIN INLINE ASM BLOCK
2246   1324 07 D0 16      call scan_u16d
2247   1327 FA FF FF      lea d, [bp + -1] ; $m
2248   132A 43            mov [d], a
2249   132B             ; --- END INLINE ASM BLOCK
2250   132B             
2251   132B             ;; return m; 
2252   132B FA FF FF      lea d, [bp + -1] ; $m
2253   132E 2A            mov b, [d]
2254   132F F9            leave
2255   1330 09            ret
2256   1331             
2257   1331             puts:
2258   1331 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2259   1334             
2260   1334             ; --- BEGIN INLINE ASM BLOCK
2261   1334 FA 05 00      lea d, [bp + 5] ; $s
2262   1337 15            mov a, [d]
2263   1338 3C            mov d, a
2264   1339 07 D6 15      call _puts
2265   133C 10 00 0A      mov a, $0A00
2266   133F 05 03         syscall sys_io
2267   1341             ; --- END INLINE ASM BLOCK
2268   1341             
2269   1341 F9            leave
2270   1342 09            ret
2271   1343             
2272   1343             print:
2273   1343 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2274   1346             
2275   1346             ; --- BEGIN INLINE ASM BLOCK
2276   1346 FA 05 00      lea d, [bp + 5] ; $s
2277   1349 FD 2A         mov d, [d]
2278   134B 07 D6 15      call _puts
2279   134E             ; --- END INLINE ASM BLOCK
2280   134E             
2281   134E F9            leave
2282   134F 09            ret
2283   1350             
2284   1350             getparam:
2285   1350 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2286   1353             ; $data 
2287   1353 52 01 00      sub sp, 1
2288   1356             
2289   1356             ; --- BEGIN INLINE ASM BLOCK
2290   1356 19 04         mov al, 4
2291   1358 FA 05 00      lea d, [bp + 5] ; $address
2292   135B FD 2A         mov d, [d]
2293   135D 05 0C         syscall sys_system
2294   135F FA 00 00      lea d, [bp + 0] ; $data
2295   1362 FD 3E         mov [d], bl
2296   1364             ; --- END INLINE ASM BLOCK
2297   1364             
2298   1364             ;; return data; 
2299   1364 FA 00 00      lea d, [bp + 0] ; $data
2300   1367 32            mov bl, [d]
2301   1368 A7 00         mov bh, 0
2302   136A F9            leave
2303   136B 09            ret
2304   136C             
2305   136C             clear:
2306   136C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2307   136F             ;; print("\033[2J\033[H"); 
2308   136F 26 B0 64      mov b, _s32 ; "\033[2J\033[H"
2309   1372 FD AB         swp b
2310   1374 D8            push b
2311   1375 07 43 13      call print
2312   1378 51 02 00      add sp, 2
2313   137B F9            leave
2314   137C 09            ret
2315   137D             
2316   137D             abs:
2317   137D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2318   1380             ;; return i < 0 ? -i : i; 
2319   1380             _ternary36_cond:
2320   1380 FA 05 00      lea d, [bp + 5] ; $i
2321   1383 2A            mov b, [d]
2322   1384             ; START RELATIONAL
2323   1384 D7            push a
2324   1385 11            mov a, b
2325   1386 26 00 00      mov b, $0
2326   1389 B0            cmp a, b
2327   138A FD 73         slt ; < (signed)
2328   138C E4            pop a
2329   138D             ; END RELATIONAL
2330   138D C0 00 00      cmp b, 0
2331   1390 C6 9C 13      je _ternary36_false
2332   1393             _ternary36_true:
2333   1393 FA 05 00      lea d, [bp + 5] ; $i
2334   1396 2A            mov b, [d]
2335   1397 FD 97         neg b
2336   1399 0A A0 13      jmp _ternary36_exit
2337   139C             _ternary36_false:
2338   139C FA 05 00      lea d, [bp + 5] ; $i
2339   139F 2A            mov b, [d]
2340   13A0             _ternary36_exit:
2341   13A0 F9            leave
2342   13A1 09            ret
2343   13A2             
2344   13A2             include_stdio_asm:
2345   13A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2346   13A5             
2347   13A5             ; --- BEGIN INLINE ASM BLOCK
2348   13A5             .include "lib/asm/stdio.asm"
0001+  13A5             ;-----------------------------------------------------------------------------
0002+  13A5             ; stdio.s
0003+  13A5             ;-----------------------------------------------------------------------------
0004+  13A5             .include "lib/asm/string.asm"
0001++ 13A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 13A5             ; string.s
0003++ 13A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 13A5             
0005++ 13A5             
0006++ 13A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 13A5             ; _strrev
0008++ 13A5             ; reverse a string
0009++ 13A5             ; D = string address
0010++ 13A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 13A5             ; 01234
0012++ 13A5             _strrev:
0013++ 13A5 4B          	pusha
0014++ 13A6 07 EC 13    	call _strlen	; length in C
0015++ 13A9 12          	mov a, c
0016++ 13AA AF 01 00    	cmp a, 1
0017++ 13AD D0 C7 13    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 13B0 7D          	dec a
0019++ 13B1 FD 4E       	mov si, d	; beginning of string
0020++ 13B3 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 13B5 59          	add d, a	; end of string
0022++ 13B6 12          	mov a, c
0023++ 13B7 FD 9B       	shr a		; divide by 2
0024++ 13B9 39          	mov c, a	; C now counts the steps
0025++ 13BA             _strrev_L0:
0026++ 13BA 32          	mov bl, [d]	; save load right-side char into BL
0027++ 13BB F6          	lodsb		; load left-side char into AL; increase SI
0028++ 13BC 3E          	mov [d], al	; store left char into right side
0029++ 13BD 1B          	mov al, bl
0030++ 13BE F7          	stosb		; store right-side char into left-side; increase DI
0031++ 13BF 7E          	dec c
0032++ 13C0 7F          	dec d
0033++ 13C1 C2 00 00    	cmp c, 0
0034++ 13C4 C7 BA 13    	jne _strrev_L0
0035++ 13C7             _strrev_end:
0036++ 13C7 4C          	popa
0037++ 13C8 09          	ret
0038++ 13C9             	
0039++ 13C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 13C9             ; _strchr
0041++ 13C9             ; search string in D for char in AL
0042++ 13C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 13C9             _strchr:
0044++ 13C9             _strchr_L0:
0045++ 13C9 32          	mov bl, [d]
0046++ 13CA C1 00       	cmp bl, 0
0047++ 13CC C6 D7 13    	je _strchr_end
0048++ 13CF BA          	cmp al, bl
0049++ 13D0 C6 D7 13    	je _strchr_end
0050++ 13D3 79          	inc d
0051++ 13D4 0A C9 13    	jmp _strchr_L0
0052++ 13D7             _strchr_end:
0053++ 13D7 1B          	mov al, bl
0054++ 13D8 09          	ret
0055++ 13D9             
0056++ 13D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 13D9             ; _strstr
0058++ 13D9             ; find sub-string
0059++ 13D9             ; str1 in SI
0060++ 13D9             ; str2 in DI
0061++ 13D9             ; SI points to end of source string
0062++ 13D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 13D9             _strstr:
0064++ 13D9 DB          	push al
0065++ 13DA DA          	push d
0066++ 13DB E3          	push di
0067++ 13DC             _strstr_loop:
0068++ 13DC F3          	cmpsb					; compare a byte of the strings
0069++ 13DD C7 E8 13    	jne _strstr_ret
0070++ 13E0 FC 00 00    	lea d, [di + 0]
0071++ 13E3 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 13E5 C7 DC 13    	jne _strstr_loop				; equal chars but not at end
0073++ 13E8             _strstr_ret:
0074++ 13E8 F0          	pop di
0075++ 13E9 E7          	pop d
0076++ 13EA E8          	pop al
0077++ 13EB 09          	ret
0078++ 13EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 13EC             ; length of null terminated string
0080++ 13EC             ; result in C
0081++ 13EC             ; pointer in D
0082++ 13EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 13EC             _strlen:
0084++ 13EC DA          	push d
0085++ 13ED 38 00 00    	mov c, 0
0086++ 13F0             _strlen_L1:
0087++ 13F0 BD 00       	cmp byte [d], 0
0088++ 13F2 C6 FA 13    	je _strlen_ret
0089++ 13F5 79          	inc d
0090++ 13F6 78          	inc c
0091++ 13F7 0A F0 13    	jmp _strlen_L1
0092++ 13FA             _strlen_ret:
0093++ 13FA E7          	pop d
0094++ 13FB 09          	ret
0095++ 13FC             
0096++ 13FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 13FC             ; STRCMP
0098++ 13FC             ; compare two strings
0099++ 13FC             ; str1 in SI
0100++ 13FC             ; str2 in DI
0101++ 13FC             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 13FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 13FC             _strcmp:
0104++ 13FC DB          	push al
0105++ 13FD DA          	push d
0106++ 13FE E3          	push di
0107++ 13FF E2          	push si
0108++ 1400             _strcmp_loop:
0109++ 1400 F3          	cmpsb					; compare a byte of the strings
0110++ 1401 C7 0C 14    	jne _strcmp_ret
0111++ 1404 FB FF FF    	lea d, [si +- 1]
0112++ 1407 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1409 C7 00 14    	jne _strcmp_loop				; equal chars but not at end
0114++ 140C             _strcmp_ret:
0115++ 140C EF          	pop si
0116++ 140D F0          	pop di
0117++ 140E E7          	pop d
0118++ 140F E8          	pop al
0119++ 1410 09          	ret
0120++ 1411             
0121++ 1411             
0122++ 1411             ; STRCPY
0123++ 1411             ; copy null terminated string from SI to DI
0124++ 1411             ; source in SI
0125++ 1411             ; destination in DI
0126++ 1411             _strcpy:
0127++ 1411 E2          	push si
0128++ 1412 E3          	push di
0129++ 1413 DB          	push al
0130++ 1414             _strcpy_L1:
0131++ 1414 F6          	lodsb
0132++ 1415 F7          	stosb
0133++ 1416 B9 00       	cmp al, 0
0134++ 1418 C7 14 14    	jne _strcpy_L1
0135++ 141B             _strcpy_end:
0136++ 141B E8          	pop al
0137++ 141C F0          	pop di
0138++ 141D EF          	pop si
0139++ 141E 09          	ret
0140++ 141F             
0141++ 141F             ; STRCAT
0142++ 141F             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 141F             ; source in SI
0144++ 141F             ; destination in DI
0145++ 141F             _strcat:
0146++ 141F E2          	push si
0147++ 1420 E3          	push di
0148++ 1421 D7          	push a
0149++ 1422 DA          	push d
0150++ 1423 50          	mov a, di
0151++ 1424 3C          	mov d, a
0152++ 1425             _strcat_goto_end_L1:
0153++ 1425 BD 00       	cmp byte[d], 0
0154++ 1427 C6 2E 14    	je _strcat_start
0155++ 142A 79          	inc d
0156++ 142B 0A 25 14    	jmp _strcat_goto_end_L1
0157++ 142E             _strcat_start:
0158++ 142E FD 50       	mov di, d
0159++ 1430             _strcat_L1:
0160++ 1430 F6          	lodsb
0161++ 1431 F7          	stosb
0162++ 1432 B9 00       	cmp al, 0
0163++ 1434 C7 30 14    	jne _strcat_L1
0164++ 1437             _strcat_end:
0165++ 1437 E7          	pop d
0166++ 1438 E4          	pop a
0167++ 1439 F0          	pop di
0168++ 143A EF          	pop si
0169++ 143B 09          	ret
0170++ 143C             
0171++ 143C             
0005+  143C             
0006+  143C             ;-----------------------------------------------------------------------------
0007+  143C             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  143C             ; ASCII in BL
0009+  143C             ; result in AL
0010+  143C             ; ascii for F = 0100 0110
0011+  143C             ; ascii for 9 = 0011 1001
0012+  143C             ;-----------------------------------------------------------------------------
0013+  143C             hex_ascii_encode:
0014+  143C 1B            mov al, bl
0015+  143D 93 40         test al, $40        ; test if letter or number
0016+  143F C7 45 14      jnz hex_letter
0017+  1442 87 0F         and al, $0F        ; get number
0018+  1444 09            ret
0019+  1445             hex_letter:
0020+  1445 87 0F         and al, $0F        ; get letter
0021+  1447 6A 09         add al, 9
0022+  1449 09            ret
0023+  144A             
0024+  144A             ;-----------------------------------------------------------------------------
0025+  144A             ; ATOI
0026+  144A             ; 2 letter hex string in B
0027+  144A             ; 8bit integer returned in AL
0028+  144A             ;-----------------------------------------------------------------------------
0029+  144A             _atoi:
0030+  144A D8            push b
0031+  144B 07 3C 14      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  144E 30            mov bl, bh
0033+  144F DB            push al          ; save a
0034+  1450 07 3C 14      call hex_ascii_encode
0035+  1453 EA            pop bl  
0036+  1454 FD 9E 04      shl al, 4
0037+  1457 8C            or al, bl
0038+  1458 E5            pop b
0039+  1459 09            ret  
0040+  145A             
0041+  145A             
0042+  145A             ;-----------------------------------------------------------------------------
0043+  145A             ; ITOA
0044+  145A             ; 8bit value in BL
0045+  145A             ; 2 byte ASCII result in A
0046+  145A             ;-----------------------------------------------------------------------------
0047+  145A             _itoa:
0048+  145A DA            push d
0049+  145B D8            push b
0050+  145C A7 00         mov bh, 0
0051+  145E FD A4 04      shr bl, 4  
0052+  1461 74            mov d, b
0053+  1462 1F 0A 17      mov al, [d + s_hex_digits]
0054+  1465 23            mov ah, al
0055+  1466               
0056+  1466 E5            pop b
0057+  1467 D8            push b
0058+  1468 A7 00         mov bh, 0
0059+  146A FD 87 0F      and bl, $0F
0060+  146D 74            mov d, b
0061+  146E 1F 0A 17      mov al, [d + s_hex_digits]
0062+  1471 E5            pop b
0063+  1472 E7            pop d
0064+  1473 09            ret
0065+  1474             
0066+  1474             ;-----------------------------------------------------------------------------
0067+  1474             ; HEX STRING TO BINARY
0068+  1474             ; di = destination address
0069+  1474             ; si = source
0070+  1474             ;-----------------------------------------------------------------------------
0071+  1474             _hex_to_int:
0072+  1474             _hex_to_int_L1:
0073+  1474 F6            lodsb          ; load from [SI] to AL
0074+  1475 B9 00         cmp al, 0        ; check if ASCII 0
0075+  1477 C6 84 14      jz _hex_to_int_ret
0076+  147A 36            mov bh, al
0077+  147B F6            lodsb
0078+  147C 2F            mov bl, al
0079+  147D 07 4A 14      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1480 F7            stosb          ; store AL to [DI]
0081+  1481 0A 74 14      jmp _hex_to_int_L1
0082+  1484             _hex_to_int_ret:
0083+  1484 09            ret    
0084+  1485             
0085+  1485             ;-----------------------------------------------------------------------------
0086+  1485             ; GETCHAR
0087+  1485             ; char in ah
0088+  1485             ;-----------------------------------------------------------------------------
0089+  1485             getch:
0090+  1485 DB            push al
0091+  1486             getch_retry:
0092+  1486 19 01         mov al, 1
0093+  1488 05 03         syscall sys_io      ; receive in AH
0094+  148A E8            pop al
0095+  148B 09            ret
0096+  148C             
0097+  148C             ;-----------------------------------------------------------------------------
0098+  148C             ; PUTCHAR
0099+  148C             ; char in ah
0100+  148C             ;-----------------------------------------------------------------------------
0101+  148C             _putchar:
0102+  148C D7            push a
0103+  148D 19 00         mov al, 0
0104+  148F 05 03         syscall sys_io      ; char in AH
0105+  1491 E4            pop a
0106+  1492 09            ret
0107+  1493             
0108+  1493             ;-----------------------------------------------------------------------------
0109+  1493             ;; INPUT A STRING
0110+  1493             ;; terminates with null
0111+  1493             ;; pointer in D
0112+  1493             ;-----------------------------------------------------------------------------
0113+  1493             _gets:
0114+  1493 D7            push a
0115+  1494 DA            push d
0116+  1495             _gets_loop:
0117+  1495 19 01         mov al, 1
0118+  1497 05 03         syscall sys_io      ; receive in AH
0119+  1499 B9 00         cmp al, 0        ; check error code (AL)
0120+  149B C6 95 14      je _gets_loop      ; if no char received, retry
0121+  149E             
0122+  149E 76 1B         cmp ah, 27
0123+  14A0 C6 C1 14      je _gets_ansi_esc
0124+  14A3 76 0A         cmp ah, $0A        ; LF
0125+  14A5 C6 2C 15      je _gets_end
0126+  14A8 76 0D         cmp ah, $0D        ; CR
0127+  14AA C6 2C 15      je _gets_end
0128+  14AD 76 5C         cmp ah, $5C        ; '\\'
0129+  14AF C6 ED 14      je _gets_escape
0130+  14B2               
0131+  14B2 76 08         cmp ah, $08      ; check for backspace
0132+  14B4 C6 BD 14      je _gets_backspace
0133+  14B7             
0134+  14B7 1A            mov al, ah
0135+  14B8 3E            mov [d], al
0136+  14B9 79            inc d
0137+  14BA 0A 95 14      jmp _gets_loop
0138+  14BD             _gets_backspace:
0139+  14BD 7F            dec d
0140+  14BE 0A 95 14      jmp _gets_loop
0141+  14C1             _gets_ansi_esc:
0142+  14C1 19 01         mov al, 1
0143+  14C3 05 03         syscall sys_io        ; receive in AH without echo
0144+  14C5 B9 00         cmp al, 0          ; check error code (AL)
0145+  14C7 C6 C1 14      je _gets_ansi_esc    ; if no char received, retry
0146+  14CA 76 5B         cmp ah, '['
0147+  14CC C7 95 14      jne _gets_loop
0148+  14CF             _gets_ansi_esc_2:
0149+  14CF 19 01         mov al, 1
0150+  14D1 05 03         syscall sys_io          ; receive in AH without echo
0151+  14D3 B9 00         cmp al, 0            ; check error code (AL)
0152+  14D5 C6 CF 14      je _gets_ansi_esc_2  ; if no char received, retry
0153+  14D8 76 44         cmp ah, 'D'
0154+  14DA C6 E5 14      je _gets_left_arrow
0155+  14DD 76 43         cmp ah, 'C'
0156+  14DF C6 E9 14      je _gets_right_arrow
0157+  14E2 0A 95 14      jmp _gets_loop
0158+  14E5             _gets_left_arrow:
0159+  14E5 7F            dec d
0160+  14E6 0A 95 14      jmp _gets_loop
0161+  14E9             _gets_right_arrow:
0162+  14E9 79            inc d
0163+  14EA 0A 95 14      jmp _gets_loop
0164+  14ED             _gets_escape:
0165+  14ED 19 01         mov al, 1
0166+  14EF 05 03         syscall sys_io      ; receive in AH
0167+  14F1 B9 00         cmp al, 0        ; check error code (AL)
0168+  14F3 C6 ED 14      je _gets_escape      ; if no char received, retry
0169+  14F6 76 6E         cmp ah, 'n'
0170+  14F8 C6 17 15      je _gets_LF
0171+  14FB 76 72         cmp ah, 'r'
0172+  14FD C6 1E 15      je _gets_CR
0173+  1500 76 30         cmp ah, '0'
0174+  1502 C6 25 15      je _gets_NULL
0175+  1505 76 5C         cmp ah, $5C  ; '\'
0176+  1507 C6 10 15      je _gets_slash
0177+  150A 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  150B 3E            mov [d], al
0179+  150C 79            inc d
0180+  150D 0A 95 14      jmp _gets_loop
0181+  1510             _gets_slash:
0182+  1510 19 5C         mov al, $5C
0183+  1512 3E            mov [d], al
0184+  1513 79            inc d
0185+  1514 0A 95 14      jmp _gets_loop
0186+  1517             _gets_LF:
0187+  1517 19 0A         mov al, $0A
0188+  1519 3E            mov [d], al
0189+  151A 79            inc d
0190+  151B 0A 95 14      jmp _gets_loop
0191+  151E             _gets_CR:
0192+  151E 19 0D         mov al, $0D
0193+  1520 3E            mov [d], al
0194+  1521 79            inc d
0195+  1522 0A 95 14      jmp _gets_loop
0196+  1525             _gets_NULL:
0197+  1525 19 00         mov al, $00
0198+  1527 3E            mov [d], al
0199+  1528 79            inc d
0200+  1529 0A 95 14      jmp _gets_loop
0201+  152C             _gets_end:
0202+  152C 19 00         mov al, 0
0203+  152E 3E            mov [d], al        ; terminate string
0204+  152F E7            pop d
0205+  1530 E4            pop a
0206+  1531 09            ret
0207+  1532             
0208+  1532             ;-----------------------------------------------------------------------------
0209+  1532             ;; INPUT TEXT
0210+  1532             ;; terminated with CTRL+D
0211+  1532             ;; pointer in D
0212+  1532             ;-----------------------------------------------------------------------------
0213+  1532             _gettxt:
0214+  1532 D7            push a
0215+  1533 DA            push d
0216+  1534             _gettxt_loop:
0217+  1534 19 01         mov al, 1
0218+  1536 05 03         syscall sys_io      ; receive in AH
0219+  1538 B9 00         cmp al, 0        ; check error code (AL)
0220+  153A C6 34 15      je _gettxt_loop    ; if no char received, retry
0221+  153D 76 04         cmp ah, 4      ; EOT
0222+  153F C6 7D 15      je _gettxt_end
0223+  1542 76 08         cmp ah, $08      ; check for backspace
0224+  1544 C6 79 15      je _gettxt_backspace
0225+  1547 76 5C         cmp ah, $5C        ; '\'
0226+  1549 C6 52 15      je _gettxt_escape
0227+  154C 1A            mov al, ah
0228+  154D 3E            mov [d], al
0229+  154E 79            inc d
0230+  154F 0A 34 15      jmp _gettxt_loop
0231+  1552             _gettxt_escape:
0232+  1552 19 01         mov al, 1
0233+  1554 05 03         syscall sys_io      ; receive in AH
0234+  1556 B9 00         cmp al, 0        ; check error code (AL)
0235+  1558 C6 52 15      je _gettxt_escape    ; if no char received, retry
0236+  155B 76 6E         cmp ah, 'n'
0237+  155D C6 6B 15      je _gettxt_LF
0238+  1560 76 72         cmp ah, 'r'
0239+  1562 C6 72 15      je _gettxt_CR
0240+  1565 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1566 3E            mov [d], al
0242+  1567 79            inc d
0243+  1568 0A 34 15      jmp _gettxt_loop
0244+  156B             _gettxt_LF:
0245+  156B 19 0A         mov al, $0A
0246+  156D 3E            mov [d], al
0247+  156E 79            inc d
0248+  156F 0A 34 15      jmp _gettxt_loop
0249+  1572             _gettxt_CR:
0250+  1572 19 0D         mov al, $0D
0251+  1574 3E            mov [d], al
0252+  1575 79            inc d
0253+  1576 0A 34 15      jmp _gettxt_loop
0254+  1579             _gettxt_backspace:
0255+  1579 7F            dec d
0256+  157A 0A 34 15      jmp _gettxt_loop
0257+  157D             _gettxt_end:
0258+  157D 19 00         mov al, 0
0259+  157F 3E            mov [d], al        ; terminate string
0260+  1580 E7            pop d
0261+  1581 E4            pop a
0262+  1582 09            ret
0263+  1583             
0264+  1583             ;-----------------------------------------------------------------------------
0265+  1583             ; PRINT NEW LINE
0266+  1583             ;-----------------------------------------------------------------------------
0267+  1583             printnl:
0268+  1583 D7            push a
0269+  1584 10 00 0A      mov a, $0A00
0270+  1587 05 03         syscall sys_io
0271+  1589 10 00 0D      mov a, $0D00
0272+  158C 05 03         syscall sys_io
0273+  158E E4            pop a
0274+  158F 09            ret
0275+  1590             
0276+  1590             ;-----------------------------------------------------------------------------
0277+  1590             ; _strtoint
0278+  1590             ; 4 digit hex string number in d
0279+  1590             ; integer returned in A
0280+  1590             ;-----------------------------------------------------------------------------
0281+  1590             _strtointx:
0282+  1590 D8            push b
0283+  1591 32            mov bl, [d]
0284+  1592 37            mov bh, bl
0285+  1593 33 01 00      mov bl, [d + 1]
0286+  1596 07 4A 14      call _atoi        ; convert to int in AL
0287+  1599 23            mov ah, al        ; move to AH
0288+  159A 33 02 00      mov bl, [d + 2]
0289+  159D 37            mov bh, bl
0290+  159E 33 03 00      mov bl, [d + 3]
0291+  15A1 07 4A 14      call _atoi        ; convert to int in AL
0292+  15A4 E5            pop b
0293+  15A5 09            ret
0294+  15A6             
0295+  15A6             ;-----------------------------------------------------------------------------
0296+  15A6             ; _strtoint
0297+  15A6             ; 5 digit base10 string number in d
0298+  15A6             ; integer returned in A
0299+  15A6             ;-----------------------------------------------------------------------------
0300+  15A6             _strtoint:
0301+  15A6 E2            push si
0302+  15A7 D8            push b
0303+  15A8 D9            push c
0304+  15A9 DA            push d
0305+  15AA 07 EC 13      call _strlen      ; get string length in C
0306+  15AD 7E            dec c
0307+  15AE FD 4E         mov si, d
0308+  15B0 12            mov a, c
0309+  15B1 FD 99         shl a
0310+  15B3 3B 22 17      mov d, table_power
0311+  15B6 59            add d, a
0312+  15B7 38 00 00      mov c, 0
0313+  15BA             _strtoint_L0:
0314+  15BA F6            lodsb      ; load ASCII to al
0315+  15BB B9 00         cmp al, 0
0316+  15BD C6 D0 15      je _strtoint_end
0317+  15C0 6F 30         sub al, $30    ; make into integer
0318+  15C2 22 00         mov ah, 0
0319+  15C4 2A            mov b, [d]
0320+  15C5 AC            mul a, b      ; result in B since it fits in 16bits
0321+  15C6 11            mov a, b
0322+  15C7 28            mov b, c
0323+  15C8 54            add a, b
0324+  15C9 39            mov c, a
0325+  15CA 63 02 00      sub d, 2
0326+  15CD 0A BA 15      jmp _strtoint_L0
0327+  15D0             _strtoint_end:
0328+  15D0 12            mov a, c
0329+  15D1 E7            pop d
0330+  15D2 E6            pop c
0331+  15D3 E5            pop b
0332+  15D4 EF            pop si
0333+  15D5 09            ret
0334+  15D6             
0335+  15D6             ;-----------------------------------------------------------------------------
0336+  15D6             ; PRINT NULL TERMINATED STRING
0337+  15D6             ; pointer in D
0338+  15D6             ;-----------------------------------------------------------------------------
0339+  15D6             _puts:
0340+  15D6 D7            push a
0341+  15D7 DA            push d
0342+  15D8             _puts_L1:
0343+  15D8 1E            mov al, [d]
0344+  15D9 B9 00         cmp al, 0
0345+  15DB C6 E7 15      jz _puts_END
0346+  15DE 23            mov ah, al
0347+  15DF 19 00         mov al, 0
0348+  15E1 05 03         syscall sys_io
0349+  15E3 79            inc d
0350+  15E4 0A D8 15      jmp _puts_L1
0351+  15E7             _puts_END:
0352+  15E7 E7            pop d
0353+  15E8 E4            pop a
0354+  15E9 09            ret
0355+  15EA             
0356+  15EA             ;-----------------------------------------------------------------------------
0357+  15EA             ; PRINT N SIZE STRING
0358+  15EA             ; pointer in D
0359+  15EA             ; size in C
0360+  15EA             ;-----------------------------------------------------------------------------
0361+  15EA             _putsn:
0362+  15EA DB            push al
0363+  15EB DA            push d
0364+  15EC D9            push c
0365+  15ED             _putsn_L0:
0366+  15ED 1E            mov al, [d]
0367+  15EE 23            mov ah, al
0368+  15EF 19 00         mov al, 0
0369+  15F1 05 03         syscall sys_io
0370+  15F3 79            inc d
0371+  15F4 7E            dec c  
0372+  15F5 C2 00 00      cmp c, 0
0373+  15F8 C7 ED 15      jne _putsn_L0
0374+  15FB             _putsn_end:
0375+  15FB E6            pop c
0376+  15FC E7            pop d
0377+  15FD E8            pop al
0378+  15FE 09            ret
0379+  15FF             
0380+  15FF             ;-----------------------------------------------------------------------------
0381+  15FF             ; print 16bit decimal number
0382+  15FF             ; input number in A
0383+  15FF             ;-----------------------------------------------------------------------------
0384+  15FF             print_u16d:
0385+  15FF D7            push a
0386+  1600 D8            push b
0387+  1601 26 10 27      mov b, 10000
0388+  1604 AE            div a, b      ; get 10000's coeff.
0389+  1605 07 27 16      call print_number
0390+  1608 11            mov a, b
0391+  1609 26 E8 03      mov b, 1000
0392+  160C AE            div a, b      ; get 1000's coeff.
0393+  160D 07 27 16      call print_number
0394+  1610 11            mov a, b
0395+  1611 26 64 00      mov b, 100
0396+  1614 AE            div a, b
0397+  1615 07 27 16      call print_number
0398+  1618 11            mov a, b
0399+  1619 26 0A 00      mov b, 10
0400+  161C AE            div a, b
0401+  161D 07 27 16      call print_number
0402+  1620 1B            mov al, bl      ; 1's coeff in bl
0403+  1621 07 27 16      call print_number
0404+  1624 E5            pop b
0405+  1625 E4            pop a
0406+  1626 09            ret
0407+  1627             
0408+  1627             ;-----------------------------------------------------------------------------
0409+  1627             ; print AL
0410+  1627             ;-----------------------------------------------------------------------------
0411+  1627             print_number:
0412+  1627 6A 30         add al, $30
0413+  1629 23            mov ah, al
0414+  162A 07 8C 14      call _putchar
0415+  162D 09            ret
0416+  162E             
0417+  162E             ;-----------------------------------------------------------------------------
0418+  162E             ; PRINT 16BIT HEX INTEGER
0419+  162E             ; integer value in reg B
0420+  162E             ;-----------------------------------------------------------------------------
0421+  162E             print_u16x:
0422+  162E D7            push a
0423+  162F D8            push b
0424+  1630 DD            push bl
0425+  1631 30            mov bl, bh
0426+  1632 07 5A 14      call _itoa        ; convert bh to char in A
0427+  1635 2F            mov bl, al        ; save al
0428+  1636 19 00         mov al, 0
0429+  1638 05 03         syscall sys_io        ; display AH
0430+  163A 24            mov ah, bl        ; retrieve al
0431+  163B 19 00         mov al, 0
0432+  163D 05 03         syscall sys_io        ; display AL
0433+  163F             
0434+  163F EA            pop bl
0435+  1640 07 5A 14      call _itoa        ; convert bh to char in A
0436+  1643 2F            mov bl, al        ; save al
0437+  1644 19 00         mov al, 0
0438+  1646 05 03         syscall sys_io        ; display AH
0439+  1648 24            mov ah, bl        ; retrieve al
0440+  1649 19 00         mov al, 0
0441+  164B 05 03         syscall sys_io        ; display AL
0442+  164D             
0443+  164D E5            pop b
0444+  164E E4            pop a
0445+  164F 09            ret
0446+  1650             
0447+  1650             ;-----------------------------------------------------------------------------
0448+  1650             ; INPUT 16BIT HEX INTEGER
0449+  1650             ; read 16bit integer into A
0450+  1650             ;-----------------------------------------------------------------------------
0451+  1650             scan_u16x:
0452+  1650 F8 10 00      enter 16
0453+  1653 D8            push b
0454+  1654 DA            push d
0455+  1655             
0456+  1655 FA F1 FF      lea d, [bp + -15]
0457+  1658 07 93 14      call _gets        ; get number
0458+  165B             
0459+  165B 32            mov bl, [d]
0460+  165C 37            mov bh, bl
0461+  165D 33 01 00      mov bl, [d + 1]
0462+  1660 07 4A 14      call _atoi        ; convert to int in AL
0463+  1663 23            mov ah, al        ; move to AH
0464+  1664             
0465+  1664 33 02 00      mov bl, [d + 2]
0466+  1667 37            mov bh, bl
0467+  1668 33 03 00      mov bl, [d + 3]
0468+  166B 07 4A 14      call _atoi        ; convert to int in AL
0469+  166E             
0470+  166E E7            pop d
0471+  166F E5            pop b
0472+  1670 F9            leave
0473+  1671 09            ret
0474+  1672             
0475+  1672             ;-----------------------------------------------------------------------------
0476+  1672             ; PRINT 8bit HEX INTEGER
0477+  1672             ; integer value in reg bl
0478+  1672             ;-----------------------------------------------------------------------------
0479+  1672             print_u8x:
0480+  1672 D7            push a
0481+  1673 DD            push bl
0482+  1674             
0483+  1674 07 5A 14      call _itoa        ; convert bl to char in A
0484+  1677 2F            mov bl, al        ; save al
0485+  1678 19 00         mov al, 0
0486+  167A 05 03         syscall sys_io        ; display AH
0487+  167C 24            mov ah, bl        ; retrieve al
0488+  167D 19 00         mov al, 0
0489+  167F 05 03         syscall sys_io        ; display AL
0490+  1681             
0491+  1681 EA            pop bl
0492+  1682 E4            pop a
0493+  1683 09            ret
0494+  1684             
0495+  1684             ;-----------------------------------------------------------------------------
0496+  1684             ; print 8bit decimal unsigned number
0497+  1684             ; input number in AL
0498+  1684             ;-----------------------------------------------------------------------------
0499+  1684             print_u8d:
0500+  1684 D7            push a
0501+  1685 D8            push b
0502+  1686             
0503+  1686 22 00         mov ah, 0
0504+  1688 26 64 00      mov b, 100
0505+  168B AE            div a, b
0506+  168C D8            push b      ; save remainder
0507+  168D B9 00         cmp al, 0
0508+  168F C6 99 16      je skip100
0509+  1692 6A 30         add al, $30
0510+  1694 23            mov ah, al
0511+  1695 19 00         mov al, 0
0512+  1697 05 03         syscall sys_io  ; print coeff
0513+  1699             skip100:
0514+  1699 E4            pop a
0515+  169A 22 00         mov ah, 0
0516+  169C 26 0A 00      mov b, 10
0517+  169F AE            div a, b
0518+  16A0 D8            push b      ; save remainder
0519+  16A1 B9 00         cmp al, 0
0520+  16A3 C6 AD 16      je skip10
0521+  16A6 6A 30         add al, $30
0522+  16A8 23            mov ah, al
0523+  16A9 19 00         mov al, 0
0524+  16AB 05 03         syscall sys_io  ; print coeff
0525+  16AD             skip10:
0526+  16AD E4            pop a
0527+  16AE 1B            mov al, bl
0528+  16AF 6A 30         add al, $30
0529+  16B1 23            mov ah, al
0530+  16B2 19 00         mov al, 0
0531+  16B4 05 03         syscall sys_io  ; print coeff
0532+  16B6 E5            pop b
0533+  16B7 E4            pop a
0534+  16B8 09            ret
0535+  16B9             
0536+  16B9             ;-----------------------------------------------------------------------------
0537+  16B9             ; INPUT 8BIT HEX INTEGER
0538+  16B9             ; read 8bit integer into AL
0539+  16B9             ;-----------------------------------------------------------------------------
0540+  16B9             scan_u8x:
0541+  16B9 F8 04 00      enter 4
0542+  16BC D8            push b
0543+  16BD DA            push d
0544+  16BE             
0545+  16BE FA FD FF      lea d, [bp + -3]
0546+  16C1 07 93 14      call _gets        ; get number
0547+  16C4             
0548+  16C4 32            mov bl, [d]
0549+  16C5 37            mov bh, bl
0550+  16C6 33 01 00      mov bl, [d + 1]
0551+  16C9 07 4A 14      call _atoi        ; convert to int in AL
0552+  16CC             
0553+  16CC E7            pop d
0554+  16CD E5            pop b
0555+  16CE F9            leave
0556+  16CF 09            ret
0557+  16D0             
0558+  16D0             ;-----------------------------------------------------------------------------
0559+  16D0             ; input decimal number
0560+  16D0             ; result in A
0561+  16D0             ; 655'\0'
0562+  16D0             ; low--------high
0563+  16D0             ;-----------------------------------------------------------------------------
0564+  16D0             scan_u16d:
0565+  16D0 F8 08 00      enter 8
0566+  16D3 E2            push si
0567+  16D4 D8            push b
0568+  16D5 D9            push c
0569+  16D6 DA            push d
0570+  16D7 FA F9 FF      lea d, [bp +- 7]
0571+  16DA 07 93 14      call _gets
0572+  16DD 07 EC 13      call _strlen      ; get string length in C
0573+  16E0 7E            dec c
0574+  16E1 FD 4E         mov si, d
0575+  16E3 12            mov a, c
0576+  16E4 FD 99         shl a
0577+  16E6 3B 22 17      mov d, table_power
0578+  16E9 59            add d, a
0579+  16EA 38 00 00      mov c, 0
0580+  16ED             mul_loop:
0581+  16ED F6            lodsb      ; load ASCII to al
0582+  16EE B9 00         cmp al, 0
0583+  16F0 C6 03 17      je mul_exit
0584+  16F3 6F 30         sub al, $30    ; make into integer
0585+  16F5 22 00         mov ah, 0
0586+  16F7 2A            mov b, [d]
0587+  16F8 AC            mul a, b      ; result in B since it fits in 16bits
0588+  16F9 11            mov a, b
0589+  16FA 28            mov b, c
0590+  16FB 54            add a, b
0591+  16FC 39            mov c, a
0592+  16FD 63 02 00      sub d, 2
0593+  1700 0A ED 16      jmp mul_loop
0594+  1703             mul_exit:
0595+  1703 12            mov a, c
0596+  1704 E7            pop d
0597+  1705 E6            pop c
0598+  1706 E5            pop b
0599+  1707 EF            pop si
0600+  1708 F9            leave
0601+  1709 09            ret
0602+  170A             
0603+  170A 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  170E 34 35 36 37 
0603+  1712 38 39 41 42 
0603+  1716 43 44 45 46 
0604+  171A 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  171E 1B 5B 48 00 
0605+  1722             
0606+  1722             table_power:
0607+  1722 01 00         .dw 1
0608+  1724 0A 00         .dw 10
0609+  1726 64 00         .dw 100
0610+  1728 E8 03         .dw 1000
0611+  172A 10 27         .dw 100002349   172C             ; --- END INLINE ASM BLOCK
2350   172C             
2351   172C F9            leave
2352   172D 09            ret
2353   172E             
2354   172E             exit:
2355   172E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2356   1731             
2357   1731             ; --- BEGIN INLINE ASM BLOCK
2358   1731 05 0B         syscall sys_terminate_proc
2359   1733             ; --- END INLINE ASM BLOCK
2360   1733             
2361   1733 F9            leave
2362   1734 09            ret
2363   1735             
2364   1735             memset:
2365   1735 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2366   1738             ; $i 
2367   1738 52 02 00      sub sp, 2
2368   173B             ;; for(i = 0; i < size; i++){ 
2369   173B             _for37_init:
2370   173B FA FF FF      lea d, [bp + -1] ; $i
2371   173E DA            push d
2372   173F 26 00 00      mov b, $0
2373   1742 E7            pop d
2374   1743 FD 43         mov [d], b
2375   1745             _for37_cond:
2376   1745 FA FF FF      lea d, [bp + -1] ; $i
2377   1748 2A            mov b, [d]
2378   1749             ; START RELATIONAL
2379   1749 D7            push a
2380   174A 11            mov a, b
2381   174B FA 08 00      lea d, [bp + 8] ; $size
2382   174E 2A            mov b, [d]
2383   174F B0            cmp a, b
2384   1750 FD 73         slt ; < (signed)
2385   1752 E4            pop a
2386   1753             ; END RELATIONAL
2387   1753 C0 00 00      cmp b, 0
2388   1756 C6 7F 17      je _for37_exit
2389   1759             _for37_block:
2390   1759             ;; *(s+i) = c; 
2391   1759 FA 05 00      lea d, [bp + 5] ; $s
2392   175C 2A            mov b, [d]
2393   175D             ; START TERMS
2394   175D D7            push a
2395   175E 11            mov a, b
2396   175F FA FF FF      lea d, [bp + -1] ; $i
2397   1762 2A            mov b, [d]
2398   1763 56            add b, a
2399   1764 E4            pop a
2400   1765             ; END TERMS
2401   1765 D8            push b
2402   1766 FA 07 00      lea d, [bp + 7] ; $c
2403   1769 32            mov bl, [d]
2404   176A A7 00         mov bh, 0
2405   176C E7            pop d
2406   176D FD 3E         mov [d], bl
2407   176F             _for37_update:
2408   176F FA FF FF      lea d, [bp + -1] ; $i
2409   1772 2A            mov b, [d]
2410   1773 D8            push b
2411   1774 FD 77         inc b
2412   1776 FA FF FF      lea d, [bp + -1] ; $i
2413   1779 FD 43         mov [d], b
2414   177B E5            pop b
2415   177C 0A 45 17      jmp _for37_cond
2416   177F             _for37_exit:
2417   177F             ;; return s; 
2418   177F FA 05 00      lea d, [bp + 5] ; $s
2419   1782 2A            mov b, [d]
2420   1783 F9            leave
2421   1784 09            ret
2422   1785             
2423   1785             atoi:
2424   1785 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2425   1788             ; $result 
2426   1788 10 00 00      mov a, $0
2427   178B 45 FF FF      mov [bp + -1], a
2428   178E             ; $sign 
2429   178E 10 01 00      mov a, $1
2430   1791 45 FD FF      mov [bp + -3], a
2431   1794 52 04 00      sub sp, 4
2432   1797             ;; while (*str == ' ') str++; 
2433   1797             _while38_cond:
2434   1797 FA 05 00      lea d, [bp + 5] ; $str
2435   179A 2A            mov b, [d]
2436   179B 74            mov d, b
2437   179C 32            mov bl, [d]
2438   179D A7 00         mov bh, 0
2439   179F             ; START RELATIONAL
2440   179F D7            push a
2441   17A0 11            mov a, b
2442   17A1 26 20 00      mov b, $20
2443   17A4 B0            cmp a, b
2444   17A5 FD 71         seq ; ==
2445   17A7 E4            pop a
2446   17A8             ; END RELATIONAL
2447   17A8 C0 00 00      cmp b, 0
2448   17AB C6 BE 17      je _while38_exit
2449   17AE             _while38_block:
2450   17AE             ;; str++; 
2451   17AE FA 05 00      lea d, [bp + 5] ; $str
2452   17B1 2A            mov b, [d]
2453   17B2 D8            push b
2454   17B3 FD 77         inc b
2455   17B5 FA 05 00      lea d, [bp + 5] ; $str
2456   17B8 FD 43         mov [d], b
2457   17BA E5            pop b
2458   17BB 0A 97 17      jmp _while38_cond
2459   17BE             _while38_exit:
2460   17BE             ;; if (*str == '-' || *str == '+') { 
2461   17BE             _if39_cond:
2462   17BE FA 05 00      lea d, [bp + 5] ; $str
2463   17C1 2A            mov b, [d]
2464   17C2 74            mov d, b
2465   17C3 32            mov bl, [d]
2466   17C4 A7 00         mov bh, 0
2467   17C6             ; START RELATIONAL
2468   17C6 D7            push a
2469   17C7 11            mov a, b
2470   17C8 26 2D 00      mov b, $2d
2471   17CB B0            cmp a, b
2472   17CC FD 71         seq ; ==
2473   17CE E4            pop a
2474   17CF             ; END RELATIONAL
2475   17CF D7            push a
2476   17D0 11            mov a, b
2477   17D1 FA 05 00      lea d, [bp + 5] ; $str
2478   17D4 2A            mov b, [d]
2479   17D5 74            mov d, b
2480   17D6 32            mov bl, [d]
2481   17D7 A7 00         mov bh, 0
2482   17D9             ; START RELATIONAL
2483   17D9 D7            push a
2484   17DA 11            mov a, b
2485   17DB 26 2B 00      mov b, $2b
2486   17DE B0            cmp a, b
2487   17DF FD 71         seq ; ==
2488   17E1 E4            pop a
2489   17E2             ; END RELATIONAL
2490   17E2 FD A8         sor a, b ; ||
2491   17E4 E4            pop a
2492   17E5 C0 00 00      cmp b, 0
2493   17E8 C6 1F 18      je _if39_exit
2494   17EB             _if39_true:
2495   17EB             ;; if (*str == '-') sign = -1; 
2496   17EB             _if40_cond:
2497   17EB FA 05 00      lea d, [bp + 5] ; $str
2498   17EE 2A            mov b, [d]
2499   17EF 74            mov d, b
2500   17F0 32            mov bl, [d]
2501   17F1 A7 00         mov bh, 0
2502   17F3             ; START RELATIONAL
2503   17F3 D7            push a
2504   17F4 11            mov a, b
2505   17F5 26 2D 00      mov b, $2d
2506   17F8 B0            cmp a, b
2507   17F9 FD 71         seq ; ==
2508   17FB E4            pop a
2509   17FC             ; END RELATIONAL
2510   17FC C0 00 00      cmp b, 0
2511   17FF C6 0F 18      je _if40_exit
2512   1802             _if40_true:
2513   1802             ;; sign = -1; 
2514   1802 FA FD FF      lea d, [bp + -3] ; $sign
2515   1805 DA            push d
2516   1806 26 FF FF      mov b, $ffff
2517   1809 E7            pop d
2518   180A FD 43         mov [d], b
2519   180C 0A 0F 18      jmp _if40_exit
2520   180F             _if40_exit:
2521   180F             ;; str++; 
2522   180F FA 05 00      lea d, [bp + 5] ; $str
2523   1812 2A            mov b, [d]
2524   1813 D8            push b
2525   1814 FD 77         inc b
2526   1816 FA 05 00      lea d, [bp + 5] ; $str
2527   1819 FD 43         mov [d], b
2528   181B E5            pop b
2529   181C 0A 1F 18      jmp _if39_exit
2530   181F             _if39_exit:
2531   181F             ;; while (*str >= '0' && *str <= '9') { 
2532   181F             _while41_cond:
2533   181F FA 05 00      lea d, [bp + 5] ; $str
2534   1822 2A            mov b, [d]
2535   1823 74            mov d, b
2536   1824 32            mov bl, [d]
2537   1825 A7 00         mov bh, 0
2538   1827             ; START RELATIONAL
2539   1827 D7            push a
2540   1828 11            mov a, b
2541   1829 26 30 00      mov b, $30
2542   182C B0            cmp a, b
2543   182D FD 82         sgeu ; >= (unsigned)
2544   182F E4            pop a
2545   1830             ; END RELATIONAL
2546   1830 D7            push a
2547   1831 11            mov a, b
2548   1832 FA 05 00      lea d, [bp + 5] ; $str
2549   1835 2A            mov b, [d]
2550   1836 74            mov d, b
2551   1837 32            mov bl, [d]
2552   1838 A7 00         mov bh, 0
2553   183A             ; START RELATIONAL
2554   183A D7            push a
2555   183B 11            mov a, b
2556   183C 26 39 00      mov b, $39
2557   183F B0            cmp a, b
2558   1840 FD 75         slu ; <= (unsigned)
2559   1842 E4            pop a
2560   1843             ; END RELATIONAL
2561   1843 FD A7         sand a, b
2562   1845 E4            pop a
2563   1846 C0 00 00      cmp b, 0
2564   1849 C6 84 18      je _while41_exit
2565   184C             _while41_block:
2566   184C             ;; result = result * 10 + (*str - '0'); 
2567   184C FA FF FF      lea d, [bp + -1] ; $result
2568   184F DA            push d
2569   1850 FA FF FF      lea d, [bp + -1] ; $result
2570   1853 2A            mov b, [d]
2571   1854             ; START FACTORS
2572   1854 D7            push a
2573   1855 11            mov a, b
2574   1856 26 0A 00      mov b, $a
2575   1859 AC            mul a, b ; *
2576   185A 11            mov a, b
2577   185B 27            mov b, a
2578   185C E4            pop a
2579   185D             ; END FACTORS
2580   185D             ; START TERMS
2581   185D D7            push a
2582   185E 11            mov a, b
2583   185F FA 05 00      lea d, [bp + 5] ; $str
2584   1862 2A            mov b, [d]
2585   1863 74            mov d, b
2586   1864 32            mov bl, [d]
2587   1865 A7 00         mov bh, 0
2588   1867             ; START TERMS
2589   1867 D7            push a
2590   1868 11            mov a, b
2591   1869 26 30 00      mov b, $30
2592   186C 60            sub a, b
2593   186D 27            mov b, a
2594   186E E4            pop a
2595   186F             ; END TERMS
2596   186F 56            add b, a
2597   1870 E4            pop a
2598   1871             ; END TERMS
2599   1871 E7            pop d
2600   1872 FD 43         mov [d], b
2601   1874             ;; str++; 
2602   1874 FA 05 00      lea d, [bp + 5] ; $str
2603   1877 2A            mov b, [d]
2604   1878 D8            push b
2605   1879 FD 77         inc b
2606   187B FA 05 00      lea d, [bp + 5] ; $str
2607   187E FD 43         mov [d], b
2608   1880 E5            pop b
2609   1881 0A 1F 18      jmp _while41_cond
2610   1884             _while41_exit:
2611   1884             ;; return sign * result; 
2612   1884 FA FD FF      lea d, [bp + -3] ; $sign
2613   1887 2A            mov b, [d]
2614   1888             ; START FACTORS
2615   1888 D7            push a
2616   1889 11            mov a, b
2617   188A FA FF FF      lea d, [bp + -1] ; $result
2618   188D 2A            mov b, [d]
2619   188E AC            mul a, b ; *
2620   188F 11            mov a, b
2621   1890 27            mov b, a
2622   1891 E4            pop a
2623   1892             ; END FACTORS
2624   1892 F9            leave
2625   1893 09            ret
2626   1894             
2627   1894             rand:
2628   1894 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2629   1897             ; $sec 
2630   1897 52 02 00      sub sp, 2
2631   189A             
2632   189A             ; --- BEGIN INLINE ASM BLOCK
2633   189A 19 00         mov al, 0
2634   189C 05 01         syscall sys_rtc					
2635   189E 1A            mov al, ah
2636   189F FA FF FF      lea d, [bp + -1] ; $sec
2637   18A2 1E            mov al, [d]
2638   18A3 22 00         mov ah, 0
2639   18A5             ; --- END INLINE ASM BLOCK
2640   18A5             
2641   18A5             ;; return sec; 
2642   18A5 FA FF FF      lea d, [bp + -1] ; $sec
2643   18A8 2A            mov b, [d]
2644   18A9 F9            leave
2645   18AA 09            ret
2646   18AB             
2647   18AB             alloc:
2648   18AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2649   18AE             ;; heap_top = heap_top + bytes; 
2650   18AE 3B 05 76      mov d, _heap_top ; $heap_top
2651   18B1 DA            push d
2652   18B2 3B 05 76      mov d, _heap_top ; $heap_top
2653   18B5 2A            mov b, [d]
2654   18B6             ; START TERMS
2655   18B6 D7            push a
2656   18B7 11            mov a, b
2657   18B8 FA 05 00      lea d, [bp + 5] ; $bytes
2658   18BB 2A            mov b, [d]
2659   18BC 56            add b, a
2660   18BD E4            pop a
2661   18BE             ; END TERMS
2662   18BE E7            pop d
2663   18BF FD 43         mov [d], b
2664   18C1             ;; return heap_top - bytes; 
2665   18C1 3B 05 76      mov d, _heap_top ; $heap_top
2666   18C4 2A            mov b, [d]
2667   18C5             ; START TERMS
2668   18C5 D7            push a
2669   18C6 11            mov a, b
2670   18C7 FA 05 00      lea d, [bp + 5] ; $bytes
2671   18CA 2A            mov b, [d]
2672   18CB 60            sub a, b
2673   18CC 27            mov b, a
2674   18CD E4            pop a
2675   18CE             ; END TERMS
2676   18CE F9            leave
2677   18CF 09            ret
2678   18D0             
2679   18D0             free:
2680   18D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2681   18D3             ;; return heap_top = heap_top - bytes; 
2682   18D3 3B 05 76      mov d, _heap_top ; $heap_top
2683   18D6 DA            push d
2684   18D7 3B 05 76      mov d, _heap_top ; $heap_top
2685   18DA 2A            mov b, [d]
2686   18DB             ; START TERMS
2687   18DB D7            push a
2688   18DC 11            mov a, b
2689   18DD FA 05 00      lea d, [bp + 5] ; $bytes
2690   18E0 2A            mov b, [d]
2691   18E1 60            sub a, b
2692   18E2 27            mov b, a
2693   18E3 E4            pop a
2694   18E4             ; END TERMS
2695   18E4 E7            pop d
2696   18E5 FD 43         mov [d], b
2697   18E7 F9            leave
2698   18E8 09            ret
2699   18E9             
2700   18E9             include_ctype_lib:
2701   18E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2702   18EC             
2703   18EC             ; --- BEGIN INLINE ASM BLOCK
2704   18EC             .include "lib/asm/ctype.asm"
0001+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  18EC             ; ctype.s
0003+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  18EC             
0005+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  18EC             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  18EC             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  18EC             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  18EC             ;; characters are supported.
0010+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  18EC             ;; _isalnum 
0012+  18EC             ;; _isalpha 
0013+  18EC             ;; islower 
0014+  18EC             ;; isupper 
0015+  18EC             ;; _isdigit 
0016+  18EC             ;; isxdigit
0017+  18EC             ;; iscntrl 
0018+  18EC             ;; isgraph 
0019+  18EC             ;; _isspace 
0020+  18EC             ;; isblank 
0021+  18EC             ;; isprint 
0022+  18EC             ;; ispunct 
0023+  18EC             ;; tolower 
0024+  18EC             ;; toupper
0025+  18EC             
0026+  18EC             
0027+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  18EC             ;; IS ALPHANUMERIC
0029+  18EC             ;; sets ZF according with result
0030+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  18EC             _isalnum:
0032+  18EC 07 09 19    	call _isalpha
0033+  18EF C6 F5 18    	je _isalnum_exit
0034+  18F2 07 F6 18    	call _isdigit
0035+  18F5             _isalnum_exit:
0036+  18F5 09          	ret	
0037+  18F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  18F6             ;; IS DIGIT
0039+  18F6             ;; sets ZF according with result
0040+  18F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  18F6             _isdigit:
0042+  18F6 DB          	push al
0043+  18F7 B9 30       	cmp al, '0'
0044+  18F9 C8 05 19    	jlu _isdigit_false
0045+  18FC B9 39       	cmp al, '9'
0046+  18FE D1 05 19    	jgu _isdigit_false
0047+  1901 87 00       	and al, 0	; set ZF
0048+  1903 E8          	pop al
0049+  1904 09          	ret
0050+  1905             _isdigit_false:
0051+  1905 8B 01       	or al, 1	; clear ZF
0052+  1907 E8          	pop al
0053+  1908 09          	ret	
0054+  1909             	
0055+  1909             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  1909             ;; IS ALPHA
0057+  1909             ;; sets ZF according with result
0058+  1909             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  1909             _isalpha:
0060+  1909 DB          	push al
0061+  190A B9 5F       	cmp al, '_'
0062+  190C C6 2C 19    	je _isalpha_true
0063+  190F B9 2E       	cmp al, '.'
0064+  1911 C6 2C 19    	je _isalpha_true
0065+  1914 B9 41       	cmp al, 'A'
0066+  1916 C8 28 19    	jlu _isalpha_false
0067+  1919 B9 7A       	cmp al, 'z'
0068+  191B D1 28 19    	jgu _isalpha_false
0069+  191E B9 5A       	cmp al, 'Z'
0070+  1920 D0 2C 19    	jleu _isalpha_true
0071+  1923 B9 61       	cmp al, 'a'
0072+  1925 C9 2C 19    	jgeu _isalpha_true
0073+  1928             _isalpha_false:
0074+  1928 8B 01       	or al, 1	; clear ZF
0075+  192A E8          	pop al
0076+  192B 09          	ret
0077+  192C             _isalpha_true:
0078+  192C 87 00       	and al, 0	; set ZF
0079+  192E E8          	pop al
0080+  192F 09          	ret
0081+  1930             
0082+  1930             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  1930             ;; IS PATH-ALPHA
0084+  1930             ;; sets ZF according with result
0085+  1930             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  1930             ispath:
0087+  1930 DB          	push al
0088+  1931 07 F6 18    	call _isdigit
0089+  1934 C6 5E 19    	je ispath_true
0090+  1937 B9 5F       	cmp al, '_'
0091+  1939 C6 5E 19    	je ispath_true
0092+  193C B9 2F       	cmp al, '/'
0093+  193E C6 5E 19    	je ispath_true
0094+  1941 B9 2E       	cmp al, '.'
0095+  1943 C6 5E 19    	je ispath_true
0096+  1946 B9 41       	cmp al, 'A'
0097+  1948 C8 5A 19    	jlu ispath_false
0098+  194B B9 7A       	cmp al, 'z'
0099+  194D D1 5A 19    	jgu ispath_false
0100+  1950 B9 5A       	cmp al, 'Z'
0101+  1952 D0 5E 19    	jleu ispath_true
0102+  1955 B9 61       	cmp al, 'a'
0103+  1957 C9 5E 19    	jgeu ispath_true
0104+  195A             ispath_false:
0105+  195A 8B 01       	or al, 1	; clear ZF
0106+  195C E8          	pop al
0107+  195D 09          	ret
0108+  195E             ispath_true:
0109+  195E 87 00       	and al, 0	; set ZF
0110+  1960 E8          	pop al
0111+  1961 09          	ret
0112+  1962             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  1962             ;; IS SPACE
0114+  1962             ;; sets ZF according with result
0115+  1962             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  1962             _isspace:
0117+  1962 B9 20       	cmp al, $20		; ' '
0118+  1964 C6 78 19    	je _isspace_exit
0119+  1967 B9 09       	cmp al, $09		; '\t'
0120+  1969 C6 78 19    	je _isspace_exit
0121+  196C B9 0A       	cmp al, $0A		; '\n'
0122+  196E C6 78 19    	je _isspace_exit
0123+  1971 B9 0D       	cmp al, $0D		; '\r'
0124+  1973 C6 78 19    	je _isspace_exit
0125+  1976 B9 0B       	cmp al, $0B		; '\v'
0126+  1978             _isspace_exit:
0127+  1978 09          	ret	
0128+  1979             
0129+  1979             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1979             ; TO LOWER
0131+  1979             ; input in AL
0132+  1979             ; output in AL
0133+  1979             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  1979             _to_lower:
0135+  1979 B9 5A       	cmp al, 'Z'
0136+  197B D1 80 19    	jgu _to_lower_ret
0137+  197E 6A 20       	add al, $20				; convert to lower case
0138+  1980             _to_lower_ret:
0139+  1980 09          	ret
0140+  1981             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  1981             ; TO UPPER
0142+  1981             ; input in AL
0143+  1981             ; output in AL
0144+  1981             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  1981             _to_upper:
0146+  1981 B9 61       	cmp al, 'a'
0147+  1983 C8 88 19    	jlu _to_upper_ret
0148+  1986 6F 20       	sub al, $20			; convert to upper case
0149+  1988             _to_upper_ret:
0150+  1988 09          	ret
0151+  1989             
2705   1989             ; --- END INLINE ASM BLOCK
2706   1989             
2707   1989 F9            leave
2708   198A 09            ret
2709   198B             
2710   198B             is_space:
2711   198B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2712   198E             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
2713   198E FA 05 00      lea d, [bp + 5] ; $c
2714   1991 32            mov bl, [d]
2715   1992 A7 00         mov bh, 0
2716   1994             ; START RELATIONAL
2717   1994 D7            push a
2718   1995 11            mov a, b
2719   1996 26 20 00      mov b, $20
2720   1999 B0            cmp a, b
2721   199A FD 71         seq ; ==
2722   199C E4            pop a
2723   199D             ; END RELATIONAL
2724   199D D7            push a
2725   199E 11            mov a, b
2726   199F FA 05 00      lea d, [bp + 5] ; $c
2727   19A2 32            mov bl, [d]
2728   19A3 A7 00         mov bh, 0
2729   19A5             ; START RELATIONAL
2730   19A5 D7            push a
2731   19A6 11            mov a, b
2732   19A7 26 09 00      mov b, $9
2733   19AA B0            cmp a, b
2734   19AB FD 71         seq ; ==
2735   19AD E4            pop a
2736   19AE             ; END RELATIONAL
2737   19AE FD A8         sor a, b ; ||
2738   19B0 11            mov a, b
2739   19B1 FA 05 00      lea d, [bp + 5] ; $c
2740   19B4 32            mov bl, [d]
2741   19B5 A7 00         mov bh, 0
2742   19B7             ; START RELATIONAL
2743   19B7 D7            push a
2744   19B8 11            mov a, b
2745   19B9 26 0A 00      mov b, $a
2746   19BC B0            cmp a, b
2747   19BD FD 71         seq ; ==
2748   19BF E4            pop a
2749   19C0             ; END RELATIONAL
2750   19C0 FD A8         sor a, b ; ||
2751   19C2 11            mov a, b
2752   19C3 FA 05 00      lea d, [bp + 5] ; $c
2753   19C6 32            mov bl, [d]
2754   19C7 A7 00         mov bh, 0
2755   19C9             ; START RELATIONAL
2756   19C9 D7            push a
2757   19CA 11            mov a, b
2758   19CB 26 0D 00      mov b, $d
2759   19CE B0            cmp a, b
2760   19CF FD 71         seq ; ==
2761   19D1 E4            pop a
2762   19D2             ; END RELATIONAL
2763   19D2 FD A8         sor a, b ; ||
2764   19D4 E4            pop a
2765   19D5 F9            leave
2766   19D6 09            ret
2767   19D7             
2768   19D7             is_digit:
2769   19D7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2770   19DA             ;; return c >= '0' && c <= '9'; 
2771   19DA FA 05 00      lea d, [bp + 5] ; $c
2772   19DD 32            mov bl, [d]
2773   19DE A7 00         mov bh, 0
2774   19E0             ; START RELATIONAL
2775   19E0 D7            push a
2776   19E1 11            mov a, b
2777   19E2 26 30 00      mov b, $30
2778   19E5 B0            cmp a, b
2779   19E6 FD 80         sge ; >=
2780   19E8 E4            pop a
2781   19E9             ; END RELATIONAL
2782   19E9 D7            push a
2783   19EA 11            mov a, b
2784   19EB FA 05 00      lea d, [bp + 5] ; $c
2785   19EE 32            mov bl, [d]
2786   19EF A7 00         mov bh, 0
2787   19F1             ; START RELATIONAL
2788   19F1 D7            push a
2789   19F2 11            mov a, b
2790   19F3 26 39 00      mov b, $39
2791   19F6 B0            cmp a, b
2792   19F7 FD 73         slt ; <= (signed)
2793   19F9 E4            pop a
2794   19FA             ; END RELATIONAL
2795   19FA FD A7         sand a, b
2796   19FC E4            pop a
2797   19FD F9            leave
2798   19FE 09            ret
2799   19FF             
2800   19FF             is_alpha:
2801   19FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2802   1A02             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
2803   1A02 FA 05 00      lea d, [bp + 5] ; $c
2804   1A05 32            mov bl, [d]
2805   1A06 A7 00         mov bh, 0
2806   1A08             ; START RELATIONAL
2807   1A08 D7            push a
2808   1A09 11            mov a, b
2809   1A0A 26 61 00      mov b, $61
2810   1A0D B0            cmp a, b
2811   1A0E FD 80         sge ; >=
2812   1A10 E4            pop a
2813   1A11             ; END RELATIONAL
2814   1A11 D7            push a
2815   1A12 11            mov a, b
2816   1A13 FA 05 00      lea d, [bp + 5] ; $c
2817   1A16 32            mov bl, [d]
2818   1A17 A7 00         mov bh, 0
2819   1A19             ; START RELATIONAL
2820   1A19 D7            push a
2821   1A1A 11            mov a, b
2822   1A1B 26 7A 00      mov b, $7a
2823   1A1E B0            cmp a, b
2824   1A1F FD 73         slt ; <= (signed)
2825   1A21 E4            pop a
2826   1A22             ; END RELATIONAL
2827   1A22 FD A7         sand a, b
2828   1A24 E4            pop a
2829   1A25 D7            push a
2830   1A26 11            mov a, b
2831   1A27 FA 05 00      lea d, [bp + 5] ; $c
2832   1A2A 32            mov bl, [d]
2833   1A2B A7 00         mov bh, 0
2834   1A2D             ; START RELATIONAL
2835   1A2D D7            push a
2836   1A2E 11            mov a, b
2837   1A2F 26 41 00      mov b, $41
2838   1A32 B0            cmp a, b
2839   1A33 FD 80         sge ; >=
2840   1A35 E4            pop a
2841   1A36             ; END RELATIONAL
2842   1A36 D7            push a
2843   1A37 11            mov a, b
2844   1A38 FA 05 00      lea d, [bp + 5] ; $c
2845   1A3B 32            mov bl, [d]
2846   1A3C A7 00         mov bh, 0
2847   1A3E             ; START RELATIONAL
2848   1A3E D7            push a
2849   1A3F 11            mov a, b
2850   1A40 26 5A 00      mov b, $5a
2851   1A43 B0            cmp a, b
2852   1A44 FD 73         slt ; <= (signed)
2853   1A46 E4            pop a
2854   1A47             ; END RELATIONAL
2855   1A47 FD A7         sand a, b
2856   1A49 E4            pop a
2857   1A4A FD A8         sor a, b ; ||
2858   1A4C 11            mov a, b
2859   1A4D FA 05 00      lea d, [bp + 5] ; $c
2860   1A50 32            mov bl, [d]
2861   1A51 A7 00         mov bh, 0
2862   1A53             ; START RELATIONAL
2863   1A53 D7            push a
2864   1A54 11            mov a, b
2865   1A55 26 5F 00      mov b, $5f
2866   1A58 B0            cmp a, b
2867   1A59 FD 71         seq ; ==
2868   1A5B E4            pop a
2869   1A5C             ; END RELATIONAL
2870   1A5C FD A8         sor a, b ; ||
2871   1A5E E4            pop a
2872   1A5F F9            leave
2873   1A60 09            ret
2874   1A61             
2875   1A61             tolower:
2876   1A61 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2877   1A64             ;; if (ch >= 'A' && ch <= 'Z')  
2878   1A64             _if42_cond:
2879   1A64 FA 05 00      lea d, [bp + 5] ; $ch
2880   1A67 32            mov bl, [d]
2881   1A68 A7 00         mov bh, 0
2882   1A6A             ; START RELATIONAL
2883   1A6A D7            push a
2884   1A6B 11            mov a, b
2885   1A6C 26 41 00      mov b, $41
2886   1A6F B0            cmp a, b
2887   1A70 FD 80         sge ; >=
2888   1A72 E4            pop a
2889   1A73             ; END RELATIONAL
2890   1A73 D7            push a
2891   1A74 11            mov a, b
2892   1A75 FA 05 00      lea d, [bp + 5] ; $ch
2893   1A78 32            mov bl, [d]
2894   1A79 A7 00         mov bh, 0
2895   1A7B             ; START RELATIONAL
2896   1A7B D7            push a
2897   1A7C 11            mov a, b
2898   1A7D 26 5A 00      mov b, $5a
2899   1A80 B0            cmp a, b
2900   1A81 FD 73         slt ; <= (signed)
2901   1A83 E4            pop a
2902   1A84             ; END RELATIONAL
2903   1A84 FD A7         sand a, b
2904   1A86 E4            pop a
2905   1A87 C0 00 00      cmp b, 0
2906   1A8A C6 A5 1A      je _if42_else
2907   1A8D             _if42_true:
2908   1A8D             ;; return ch - 'A' + 'a'; 
2909   1A8D FA 05 00      lea d, [bp + 5] ; $ch
2910   1A90 32            mov bl, [d]
2911   1A91 A7 00         mov bh, 0
2912   1A93             ; START TERMS
2913   1A93 D7            push a
2914   1A94 11            mov a, b
2915   1A95 26 41 00      mov b, $41
2916   1A98 60            sub a, b
2917   1A99 27            mov b, a
2918   1A9A 11            mov a, b
2919   1A9B 26 61 00      mov b, $61
2920   1A9E 56            add b, a
2921   1A9F E4            pop a
2922   1AA0             ; END TERMS
2923   1AA0 F9            leave
2924   1AA1 09            ret
2925   1AA2 0A AD 1A      jmp _if42_exit
2926   1AA5             _if42_else:
2927   1AA5             ;; return ch; 
2928   1AA5 FA 05 00      lea d, [bp + 5] ; $ch
2929   1AA8 32            mov bl, [d]
2930   1AA9 A7 00         mov bh, 0
2931   1AAB F9            leave
2932   1AAC 09            ret
2933   1AAD             _if42_exit:
2934   1AAD F9            leave
2935   1AAE 09            ret
2936   1AAF             
2937   1AAF             toupper:
2938   1AAF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2939   1AB2             ;; if (ch >= 'a' && ch <= 'z')  
2940   1AB2             _if43_cond:
2941   1AB2 FA 05 00      lea d, [bp + 5] ; $ch
2942   1AB5 32            mov bl, [d]
2943   1AB6 A7 00         mov bh, 0
2944   1AB8             ; START RELATIONAL
2945   1AB8 D7            push a
2946   1AB9 11            mov a, b
2947   1ABA 26 61 00      mov b, $61
2948   1ABD B0            cmp a, b
2949   1ABE FD 80         sge ; >=
2950   1AC0 E4            pop a
2951   1AC1             ; END RELATIONAL
2952   1AC1 D7            push a
2953   1AC2 11            mov a, b
2954   1AC3 FA 05 00      lea d, [bp + 5] ; $ch
2955   1AC6 32            mov bl, [d]
2956   1AC7 A7 00         mov bh, 0
2957   1AC9             ; START RELATIONAL
2958   1AC9 D7            push a
2959   1ACA 11            mov a, b
2960   1ACB 26 7A 00      mov b, $7a
2961   1ACE B0            cmp a, b
2962   1ACF FD 73         slt ; <= (signed)
2963   1AD1 E4            pop a
2964   1AD2             ; END RELATIONAL
2965   1AD2 FD A7         sand a, b
2966   1AD4 E4            pop a
2967   1AD5 C0 00 00      cmp b, 0
2968   1AD8 C6 F3 1A      je _if43_else
2969   1ADB             _if43_true:
2970   1ADB             ;; return ch - 'a' + 'A'; 
2971   1ADB FA 05 00      lea d, [bp + 5] ; $ch
2972   1ADE 32            mov bl, [d]
2973   1ADF A7 00         mov bh, 0
2974   1AE1             ; START TERMS
2975   1AE1 D7            push a
2976   1AE2 11            mov a, b
2977   1AE3 26 61 00      mov b, $61
2978   1AE6 60            sub a, b
2979   1AE7 27            mov b, a
2980   1AE8 11            mov a, b
2981   1AE9 26 41 00      mov b, $41
2982   1AEC 56            add b, a
2983   1AED E4            pop a
2984   1AEE             ; END TERMS
2985   1AEE F9            leave
2986   1AEF 09            ret
2987   1AF0 0A FB 1A      jmp _if43_exit
2988   1AF3             _if43_else:
2989   1AF3             ;; return ch; 
2990   1AF3 FA 05 00      lea d, [bp + 5] ; $ch
2991   1AF6 32            mov bl, [d]
2992   1AF7 A7 00         mov bh, 0
2993   1AF9 F9            leave
2994   1AFA 09            ret
2995   1AFB             _if43_exit:
2996   1AFB F9            leave
2997   1AFC 09            ret
2998   1AFD             
2999   1AFD             is_delimiter:
3000   1AFD F8 00 00      enter 0 ; (push bp; mov bp, sp)
3001   1B00             ;; if( 
3002   1B00             _if44_cond:
3003   1B00 FA 05 00      lea d, [bp + 5] ; $c
3004   1B03 32            mov bl, [d]
3005   1B04 A7 00         mov bh, 0
3006   1B06             ; START RELATIONAL
3007   1B06 D7            push a
3008   1B07 11            mov a, b
3009   1B08 26 40 00      mov b, $40
3010   1B0B B0            cmp a, b
3011   1B0C FD 71         seq ; ==
3012   1B0E E4            pop a
3013   1B0F             ; END RELATIONAL
3014   1B0F D7            push a
3015   1B10 11            mov a, b
3016   1B11 FA 05 00      lea d, [bp + 5] ; $c
3017   1B14 32            mov bl, [d]
3018   1B15 A7 00         mov bh, 0
3019   1B17             ; START RELATIONAL
3020   1B17 D7            push a
3021   1B18 11            mov a, b
3022   1B19 26 23 00      mov b, $23
3023   1B1C B0            cmp a, b
3024   1B1D FD 71         seq ; ==
3025   1B1F E4            pop a
3026   1B20             ; END RELATIONAL
3027   1B20 FD A8         sor a, b ; ||
3028   1B22 11            mov a, b
3029   1B23 FA 05 00      lea d, [bp + 5] ; $c
3030   1B26 32            mov bl, [d]
3031   1B27 A7 00         mov bh, 0
3032   1B29             ; START RELATIONAL
3033   1B29 D7            push a
3034   1B2A 11            mov a, b
3035   1B2B 26 24 00      mov b, $24
3036   1B2E B0            cmp a, b
3037   1B2F FD 71         seq ; ==
3038   1B31 E4            pop a
3039   1B32             ; END RELATIONAL
3040   1B32 FD A8         sor a, b ; ||
3041   1B34 11            mov a, b
3042   1B35 FA 05 00      lea d, [bp + 5] ; $c
3043   1B38 32            mov bl, [d]
3044   1B39 A7 00         mov bh, 0
3045   1B3B             ; START RELATIONAL
3046   1B3B D7            push a
3047   1B3C 11            mov a, b
3048   1B3D 26 2B 00      mov b, $2b
3049   1B40 B0            cmp a, b
3050   1B41 FD 71         seq ; ==
3051   1B43 E4            pop a
3052   1B44             ; END RELATIONAL
3053   1B44 FD A8         sor a, b ; ||
3054   1B46 11            mov a, b
3055   1B47 FA 05 00      lea d, [bp + 5] ; $c
3056   1B4A 32            mov bl, [d]
3057   1B4B A7 00         mov bh, 0
3058   1B4D             ; START RELATIONAL
3059   1B4D D7            push a
3060   1B4E 11            mov a, b
3061   1B4F 26 2D 00      mov b, $2d
3062   1B52 B0            cmp a, b
3063   1B53 FD 71         seq ; ==
3064   1B55 E4            pop a
3065   1B56             ; END RELATIONAL
3066   1B56 FD A8         sor a, b ; ||
3067   1B58 11            mov a, b
3068   1B59 FA 05 00      lea d, [bp + 5] ; $c
3069   1B5C 32            mov bl, [d]
3070   1B5D A7 00         mov bh, 0
3071   1B5F             ; START RELATIONAL
3072   1B5F D7            push a
3073   1B60 11            mov a, b
3074   1B61 26 2A 00      mov b, $2a
3075   1B64 B0            cmp a, b
3076   1B65 FD 71         seq ; ==
3077   1B67 E4            pop a
3078   1B68             ; END RELATIONAL
3079   1B68 FD A8         sor a, b ; ||
3080   1B6A 11            mov a, b
3081   1B6B FA 05 00      lea d, [bp + 5] ; $c
3082   1B6E 32            mov bl, [d]
3083   1B6F A7 00         mov bh, 0
3084   1B71             ; START RELATIONAL
3085   1B71 D7            push a
3086   1B72 11            mov a, b
3087   1B73 26 2F 00      mov b, $2f
3088   1B76 B0            cmp a, b
3089   1B77 FD 71         seq ; ==
3090   1B79 E4            pop a
3091   1B7A             ; END RELATIONAL
3092   1B7A FD A8         sor a, b ; ||
3093   1B7C 11            mov a, b
3094   1B7D FA 05 00      lea d, [bp + 5] ; $c
3095   1B80 32            mov bl, [d]
3096   1B81 A7 00         mov bh, 0
3097   1B83             ; START RELATIONAL
3098   1B83 D7            push a
3099   1B84 11            mov a, b
3100   1B85 26 25 00      mov b, $25
3101   1B88 B0            cmp a, b
3102   1B89 FD 71         seq ; ==
3103   1B8B E4            pop a
3104   1B8C             ; END RELATIONAL
3105   1B8C FD A8         sor a, b ; ||
3106   1B8E 11            mov a, b
3107   1B8F FA 05 00      lea d, [bp + 5] ; $c
3108   1B92 32            mov bl, [d]
3109   1B93 A7 00         mov bh, 0
3110   1B95             ; START RELATIONAL
3111   1B95 D7            push a
3112   1B96 11            mov a, b
3113   1B97 26 5B 00      mov b, $5b
3114   1B9A B0            cmp a, b
3115   1B9B FD 71         seq ; ==
3116   1B9D E4            pop a
3117   1B9E             ; END RELATIONAL
3118   1B9E FD A8         sor a, b ; ||
3119   1BA0 11            mov a, b
3120   1BA1 FA 05 00      lea d, [bp + 5] ; $c
3121   1BA4 32            mov bl, [d]
3122   1BA5 A7 00         mov bh, 0
3123   1BA7             ; START RELATIONAL
3124   1BA7 D7            push a
3125   1BA8 11            mov a, b
3126   1BA9 26 5D 00      mov b, $5d
3127   1BAC B0            cmp a, b
3128   1BAD FD 71         seq ; ==
3129   1BAF E4            pop a
3130   1BB0             ; END RELATIONAL
3131   1BB0 FD A8         sor a, b ; ||
3132   1BB2 11            mov a, b
3133   1BB3 FA 05 00      lea d, [bp + 5] ; $c
3134   1BB6 32            mov bl, [d]
3135   1BB7 A7 00         mov bh, 0
3136   1BB9             ; START RELATIONAL
3137   1BB9 D7            push a
3138   1BBA 11            mov a, b
3139   1BBB 26 28 00      mov b, $28
3140   1BBE B0            cmp a, b
3141   1BBF FD 71         seq ; ==
3142   1BC1 E4            pop a
3143   1BC2             ; END RELATIONAL
3144   1BC2 FD A8         sor a, b ; ||
3145   1BC4 11            mov a, b
3146   1BC5 FA 05 00      lea d, [bp + 5] ; $c
3147   1BC8 32            mov bl, [d]
3148   1BC9 A7 00         mov bh, 0
3149   1BCB             ; START RELATIONAL
3150   1BCB D7            push a
3151   1BCC 11            mov a, b
3152   1BCD 26 29 00      mov b, $29
3153   1BD0 B0            cmp a, b
3154   1BD1 FD 71         seq ; ==
3155   1BD3 E4            pop a
3156   1BD4             ; END RELATIONAL
3157   1BD4 FD A8         sor a, b ; ||
3158   1BD6 11            mov a, b
3159   1BD7 FA 05 00      lea d, [bp + 5] ; $c
3160   1BDA 32            mov bl, [d]
3161   1BDB A7 00         mov bh, 0
3162   1BDD             ; START RELATIONAL
3163   1BDD D7            push a
3164   1BDE 11            mov a, b
3165   1BDF 26 7B 00      mov b, $7b
3166   1BE2 B0            cmp a, b
3167   1BE3 FD 71         seq ; ==
3168   1BE5 E4            pop a
3169   1BE6             ; END RELATIONAL
3170   1BE6 FD A8         sor a, b ; ||
3171   1BE8 11            mov a, b
3172   1BE9 FA 05 00      lea d, [bp + 5] ; $c
3173   1BEC 32            mov bl, [d]
3174   1BED A7 00         mov bh, 0
3175   1BEF             ; START RELATIONAL
3176   1BEF D7            push a
3177   1BF0 11            mov a, b
3178   1BF1 26 7D 00      mov b, $7d
3179   1BF4 B0            cmp a, b
3180   1BF5 FD 71         seq ; ==
3181   1BF7 E4            pop a
3182   1BF8             ; END RELATIONAL
3183   1BF8 FD A8         sor a, b ; ||
3184   1BFA 11            mov a, b
3185   1BFB FA 05 00      lea d, [bp + 5] ; $c
3186   1BFE 32            mov bl, [d]
3187   1BFF A7 00         mov bh, 0
3188   1C01             ; START RELATIONAL
3189   1C01 D7            push a
3190   1C02 11            mov a, b
3191   1C03 26 3A 00      mov b, $3a
3192   1C06 B0            cmp a, b
3193   1C07 FD 71         seq ; ==
3194   1C09 E4            pop a
3195   1C0A             ; END RELATIONAL
3196   1C0A FD A8         sor a, b ; ||
3197   1C0C 11            mov a, b
3198   1C0D FA 05 00      lea d, [bp + 5] ; $c
3199   1C10 32            mov bl, [d]
3200   1C11 A7 00         mov bh, 0
3201   1C13             ; START RELATIONAL
3202   1C13 D7            push a
3203   1C14 11            mov a, b
3204   1C15 26 3B 00      mov b, $3b
3205   1C18 B0            cmp a, b
3206   1C19 FD 71         seq ; ==
3207   1C1B E4            pop a
3208   1C1C             ; END RELATIONAL
3209   1C1C FD A8         sor a, b ; ||
3210   1C1E 11            mov a, b
3211   1C1F FA 05 00      lea d, [bp + 5] ; $c
3212   1C22 32            mov bl, [d]
3213   1C23 A7 00         mov bh, 0
3214   1C25             ; START RELATIONAL
3215   1C25 D7            push a
3216   1C26 11            mov a, b
3217   1C27 26 3C 00      mov b, $3c
3218   1C2A B0            cmp a, b
3219   1C2B FD 71         seq ; ==
3220   1C2D E4            pop a
3221   1C2E             ; END RELATIONAL
3222   1C2E FD A8         sor a, b ; ||
3223   1C30 11            mov a, b
3224   1C31 FA 05 00      lea d, [bp + 5] ; $c
3225   1C34 32            mov bl, [d]
3226   1C35 A7 00         mov bh, 0
3227   1C37             ; START RELATIONAL
3228   1C37 D7            push a
3229   1C38 11            mov a, b
3230   1C39 26 3E 00      mov b, $3e
3231   1C3C B0            cmp a, b
3232   1C3D FD 71         seq ; ==
3233   1C3F E4            pop a
3234   1C40             ; END RELATIONAL
3235   1C40 FD A8         sor a, b ; ||
3236   1C42 11            mov a, b
3237   1C43 FA 05 00      lea d, [bp + 5] ; $c
3238   1C46 32            mov bl, [d]
3239   1C47 A7 00         mov bh, 0
3240   1C49             ; START RELATIONAL
3241   1C49 D7            push a
3242   1C4A 11            mov a, b
3243   1C4B 26 3D 00      mov b, $3d
3244   1C4E B0            cmp a, b
3245   1C4F FD 71         seq ; ==
3246   1C51 E4            pop a
3247   1C52             ; END RELATIONAL
3248   1C52 FD A8         sor a, b ; ||
3249   1C54 11            mov a, b
3250   1C55 FA 05 00      lea d, [bp + 5] ; $c
3251   1C58 32            mov bl, [d]
3252   1C59 A7 00         mov bh, 0
3253   1C5B             ; START RELATIONAL
3254   1C5B D7            push a
3255   1C5C 11            mov a, b
3256   1C5D 26 21 00      mov b, $21
3257   1C60 B0            cmp a, b
3258   1C61 FD 71         seq ; ==
3259   1C63 E4            pop a
3260   1C64             ; END RELATIONAL
3261   1C64 FD A8         sor a, b ; ||
3262   1C66 11            mov a, b
3263   1C67 FA 05 00      lea d, [bp + 5] ; $c
3264   1C6A 32            mov bl, [d]
3265   1C6B A7 00         mov bh, 0
3266   1C6D             ; START RELATIONAL
3267   1C6D D7            push a
3268   1C6E 11            mov a, b
3269   1C6F 26 5E 00      mov b, $5e
3270   1C72 B0            cmp a, b
3271   1C73 FD 71         seq ; ==
3272   1C75 E4            pop a
3273   1C76             ; END RELATIONAL
3274   1C76 FD A8         sor a, b ; ||
3275   1C78 11            mov a, b
3276   1C79 FA 05 00      lea d, [bp + 5] ; $c
3277   1C7C 32            mov bl, [d]
3278   1C7D A7 00         mov bh, 0
3279   1C7F             ; START RELATIONAL
3280   1C7F D7            push a
3281   1C80 11            mov a, b
3282   1C81 26 26 00      mov b, $26
3283   1C84 B0            cmp a, b
3284   1C85 FD 71         seq ; ==
3285   1C87 E4            pop a
3286   1C88             ; END RELATIONAL
3287   1C88 FD A8         sor a, b ; ||
3288   1C8A 11            mov a, b
3289   1C8B FA 05 00      lea d, [bp + 5] ; $c
3290   1C8E 32            mov bl, [d]
3291   1C8F A7 00         mov bh, 0
3292   1C91             ; START RELATIONAL
3293   1C91 D7            push a
3294   1C92 11            mov a, b
3295   1C93 26 7C 00      mov b, $7c
3296   1C96 B0            cmp a, b
3297   1C97 FD 71         seq ; ==
3298   1C99 E4            pop a
3299   1C9A             ; END RELATIONAL
3300   1C9A FD A8         sor a, b ; ||
3301   1C9C 11            mov a, b
3302   1C9D FA 05 00      lea d, [bp + 5] ; $c
3303   1CA0 32            mov bl, [d]
3304   1CA1 A7 00         mov bh, 0
3305   1CA3             ; START RELATIONAL
3306   1CA3 D7            push a
3307   1CA4 11            mov a, b
3308   1CA5 26 7E 00      mov b, $7e
3309   1CA8 B0            cmp a, b
3310   1CA9 FD 71         seq ; ==
3311   1CAB E4            pop a
3312   1CAC             ; END RELATIONAL
3313   1CAC FD A8         sor a, b ; ||
3314   1CAE 11            mov a, b
3315   1CAF FA 05 00      lea d, [bp + 5] ; $c
3316   1CB2 32            mov bl, [d]
3317   1CB3 A7 00         mov bh, 0
3318   1CB5             ; START RELATIONAL
3319   1CB5 D7            push a
3320   1CB6 11            mov a, b
3321   1CB7 26 2E 00      mov b, $2e
3322   1CBA B0            cmp a, b
3323   1CBB FD 71         seq ; ==
3324   1CBD E4            pop a
3325   1CBE             ; END RELATIONAL
3326   1CBE FD A8         sor a, b ; ||
3327   1CC0 E4            pop a
3328   1CC1 C0 00 00      cmp b, 0
3329   1CC4 C6 CF 1C      je _if44_else
3330   1CC7             _if44_true:
3331   1CC7             ;; return 1; 
3332   1CC7 26 01 00      mov b, $1
3333   1CCA F9            leave
3334   1CCB 09            ret
3335   1CCC 0A D4 1C      jmp _if44_exit
3336   1CCF             _if44_else:
3337   1CCF             ;; return 0; 
3338   1CCF 26 00 00      mov b, $0
3339   1CD2 F9            leave
3340   1CD3 09            ret
3341   1CD4             _if44_exit:
3342   1CD4 F9            leave
3343   1CD5 09            ret
3344   1CD6             
3345   1CD6             TO_FIXED:
3346   1CD6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3347   1CD9             ;; return x * 10; 
3348   1CD9 FA 05 00      lea d, [bp + 5] ; $x
3349   1CDC 2A            mov b, [d]
3350   1CDD             ; START FACTORS
3351   1CDD D7            push a
3352   1CDE 11            mov a, b
3353   1CDF 26 0A 00      mov b, $a
3354   1CE2 AC            mul a, b ; *
3355   1CE3 11            mov a, b
3356   1CE4 27            mov b, a
3357   1CE5 E4            pop a
3358   1CE6             ; END FACTORS
3359   1CE6 F9            leave
3360   1CE7 09            ret
3361   1CE8             
3362   1CE8             FROM_FIXED:
3363   1CE8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3364   1CEB             ;; return x / 10; 
3365   1CEB FA 05 00      lea d, [bp + 5] ; $x
3366   1CEE 2A            mov b, [d]
3367   1CEF             ; START FACTORS
3368   1CEF D7            push a
3369   1CF0 11            mov a, b
3370   1CF1 26 0A 00      mov b, $a
3371   1CF4 AE            div a, b
3372   1CF5 27            mov b, a
3373   1CF6 E4            pop a
3374   1CF7             ; END FACTORS
3375   1CF7 F9            leave
3376   1CF8 09            ret
3377   1CF9             
3378   1CF9             TO_FIXED00:
3379   1CF9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3380   1CFC             ;; return x * 100; 
3381   1CFC FA 05 00      lea d, [bp + 5] ; $x
3382   1CFF 2A            mov b, [d]
3383   1D00             ; START FACTORS
3384   1D00 D7            push a
3385   1D01 11            mov a, b
3386   1D02 26 64 00      mov b, $64
3387   1D05 AC            mul a, b ; *
3388   1D06 11            mov a, b
3389   1D07 27            mov b, a
3390   1D08 E4            pop a
3391   1D09             ; END FACTORS
3392   1D09 F9            leave
3393   1D0A 09            ret
3394   1D0B             
3395   1D0B             FROM_FIXED00:
3396   1D0B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3397   1D0E             ;; return x / 100; 
3398   1D0E FA 05 00      lea d, [bp + 5] ; $x
3399   1D11 2A            mov b, [d]
3400   1D12             ; START FACTORS
3401   1D12 D7            push a
3402   1D13 11            mov a, b
3403   1D14 26 64 00      mov b, $64
3404   1D17 AE            div a, b
3405   1D18 27            mov b, a
3406   1D19 E4            pop a
3407   1D1A             ; END FACTORS
3408   1D1A F9            leave
3409   1D1B 09            ret
3410   1D1C             
3411   1D1C             get_rand:
3412   1D1C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3413   1D1F             ; $r 
3414   1D1F 52 02 00      sub sp, 2
3415   1D22             ;; r = rand(); 
3416   1D22 FA FF FF      lea d, [bp + -1] ; $r
3417   1D25 DA            push d
3418   1D26 07 94 18      call rand
3419   1D29 E7            pop d
3420   1D2A FD 43         mov [d], b
3421   1D2C             ;; r = (r >> 8) | (r << 8); 
3422   1D2C FA FF FF      lea d, [bp + -1] ; $r
3423   1D2F DA            push d
3424   1D30 FA FF FF      lea d, [bp + -1] ; $r
3425   1D33 2A            mov b, [d]
3426   1D34             ; START SHIFT
3427   1D34 D7            push a
3428   1D35 11            mov a, b
3429   1D36 26 08 00      mov b, $8
3430   1D39 FD 39         mov c, b
3431   1D3B A1            shr a, cl
3432   1D3C 27            mov b, a
3433   1D3D E4            pop a
3434   1D3E             ; END SHIFT
3435   1D3E D7            push a
3436   1D3F 11            mov a, b
3437   1D40 FA FF FF      lea d, [bp + -1] ; $r
3438   1D43 2A            mov b, [d]
3439   1D44             ; START SHIFT
3440   1D44 D7            push a
3441   1D45 11            mov a, b
3442   1D46 26 08 00      mov b, $8
3443   1D49 FD 39         mov c, b
3444   1D4B 9D            shl a, cl
3445   1D4C 27            mov b, a
3446   1D4D E4            pop a
3447   1D4E             ; END SHIFT
3448   1D4E FD 70         or b, a ; |
3449   1D50 E4            pop a
3450   1D51 E7            pop d
3451   1D52 FD 43         mov [d], b
3452   1D54             ;; return ((r % spread) + 1); 
3453   1D54 FA FF FF      lea d, [bp + -1] ; $r
3454   1D57 2A            mov b, [d]
3455   1D58             ; START FACTORS
3456   1D58 D7            push a
3457   1D59 11            mov a, b
3458   1D5A FA 05 00      lea d, [bp + 5] ; $spread
3459   1D5D 2A            mov b, [d]
3460   1D5E AE            div a, b ; 
3461   1D5F 11            mov a, b
3462   1D60 27            mov b, a
3463   1D61 E4            pop a
3464   1D62             ; END FACTORS
3465   1D62             ; START TERMS
3466   1D62 D7            push a
3467   1D63 11            mov a, b
3468   1D64 26 01 00      mov b, $1
3469   1D67 56            add b, a
3470   1D68 E4            pop a
3471   1D69             ; END TERMS
3472   1D69 F9            leave
3473   1D6A 09            ret
3474   1D6B             
3475   1D6B             rand8:
3476   1D6B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3477   1D6E             ;; return (get_rand(8)); 
3478   1D6E 26 08 00      mov b, $8
3479   1D71 FD AB         swp b
3480   1D73 D8            push b
3481   1D74 07 1C 1D      call get_rand
3482   1D77 51 02 00      add sp, 2
3483   1D7A F9            leave
3484   1D7B 09            ret
3485   1D7C             
3486   1D7C             input:
3487   1D7C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3488   1D7F             ; $c 
3489   1D7F 52 02 00      sub sp, 2
3490   1D82             ;; while((c = getchar()) != '\n') { 
3491   1D82             _while45_cond:
3492   1D82 FA FF FF      lea d, [bp + -1] ; $c
3493   1D85 DA            push d
3494   1D86 07 08 13      call getchar
3495   1D89 E7            pop d
3496   1D8A FD 43         mov [d], b
3497   1D8C             ; START RELATIONAL
3498   1D8C D7            push a
3499   1D8D 11            mov a, b
3500   1D8E 26 0A 00      mov b, $a
3501   1D91 B0            cmp a, b
3502   1D92 FD 72         sneq ; !=
3503   1D94 E4            pop a
3504   1D95             ; END RELATIONAL
3505   1D95 C0 00 00      cmp b, 0
3506   1D98 C6 F3 1D      je _while45_exit
3507   1D9B             _while45_block:
3508   1D9B             ;; if (c == -1) 
3509   1D9B             _if46_cond:
3510   1D9B FA FF FF      lea d, [bp + -1] ; $c
3511   1D9E 2A            mov b, [d]
3512   1D9F             ; START RELATIONAL
3513   1D9F D7            push a
3514   1DA0 11            mov a, b
3515   1DA1 26 FF FF      mov b, $ffff
3516   1DA4 B0            cmp a, b
3517   1DA5 FD 71         seq ; ==
3518   1DA7 E4            pop a
3519   1DA8             ; END RELATIONAL
3520   1DA8 C0 00 00      cmp b, 0
3521   1DAB C6 B4 1D      je _if46_exit
3522   1DAE             _if46_true:
3523   1DAE             ;; exit(); 
3524   1DAE 07 2E 17      call exit
3525   1DB1 0A B4 1D      jmp _if46_exit
3526   1DB4             _if46_exit:
3527   1DB4             ;; if (l > 1) { 
3528   1DB4             _if47_cond:
3529   1DB4 FA 07 00      lea d, [bp + 7] ; $l
3530   1DB7 32            mov bl, [d]
3531   1DB8 A7 00         mov bh, 0
3532   1DBA             ; START RELATIONAL
3533   1DBA D7            push a
3534   1DBB 11            mov a, b
3535   1DBC 26 01 00      mov b, $1
3536   1DBF B0            cmp a, b
3537   1DC0 FD 81         sgu ; > (unsigned)
3538   1DC2 E4            pop a
3539   1DC3             ; END RELATIONAL
3540   1DC3 C0 00 00      cmp b, 0
3541   1DC6 C6 F0 1D      je _if47_exit
3542   1DC9             _if47_true:
3543   1DC9             ;; *b++ = c; 
3544   1DC9 FA 05 00      lea d, [bp + 5] ; $b
3545   1DCC 2A            mov b, [d]
3546   1DCD D8            push b
3547   1DCE FD 77         inc b
3548   1DD0 FA 05 00      lea d, [bp + 5] ; $b
3549   1DD3 FD 43         mov [d], b
3550   1DD5 E5            pop b
3551   1DD6 D8            push b
3552   1DD7 FA FF FF      lea d, [bp + -1] ; $c
3553   1DDA 2A            mov b, [d]
3554   1DDB E7            pop d
3555   1DDC FD 3E         mov [d], bl
3556   1DDE             ;; l--; 
3557   1DDE FA 07 00      lea d, [bp + 7] ; $l
3558   1DE1 32            mov bl, [d]
3559   1DE2 A7 00         mov bh, 0
3560   1DE4 D8            push b
3561   1DE5 FD 7D         dec b
3562   1DE7 FA 07 00      lea d, [bp + 7] ; $l
3563   1DEA FD 43         mov [d], b
3564   1DEC E5            pop b
3565   1DED 0A F0 1D      jmp _if47_exit
3566   1DF0             _if47_exit:
3567   1DF0 0A 82 1D      jmp _while45_cond
3568   1DF3             _while45_exit:
3569   1DF3             ;; *b = 0; 
3570   1DF3 FA 05 00      lea d, [bp + 5] ; $b
3571   1DF6 2A            mov b, [d]
3572   1DF7 D8            push b
3573   1DF8 26 00 00      mov b, $0
3574   1DFB E7            pop d
3575   1DFC FD 3E         mov [d], bl
3576   1DFE F9            leave
3577   1DFF 09            ret
3578   1E00             
3579   1E00             yesno:
3580   1E00 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3581   1E03             ; $b 
3582   1E03 52 02 00      sub sp, 2
3583   1E06             ;; input(b,2); 
3584   1E06 26 02 00      mov b, $2
3585   1E09 DD            push bl
3586   1E0A FA FF FF      lea d, [bp + -1] ; $b
3587   1E0D 2D            mov b, d
3588   1E0E FD AB         swp b
3589   1E10 D8            push b
3590   1E11 07 7C 1D      call input
3591   1E14 51 03 00      add sp, 3
3592   1E17             ;; if (tolower(*b) == 'y') 
3593   1E17             _if48_cond:
3594   1E17 FA FF FF      lea d, [bp + -1] ; $b
3595   1E1A 2D            mov b, d
3596   1E1B 74            mov d, b
3597   1E1C 32            mov bl, [d]
3598   1E1D A7 00         mov bh, 0
3599   1E1F DD            push bl
3600   1E20 07 61 1A      call tolower
3601   1E23 51 01 00      add sp, 1
3602   1E26             ; START RELATIONAL
3603   1E26 D7            push a
3604   1E27 11            mov a, b
3605   1E28 26 79 00      mov b, $79
3606   1E2B B0            cmp a, b
3607   1E2C FD 71         seq ; ==
3608   1E2E E4            pop a
3609   1E2F             ; END RELATIONAL
3610   1E2F C0 00 00      cmp b, 0
3611   1E32 C6 3D 1E      je _if48_exit
3612   1E35             _if48_true:
3613   1E35             ;; return 1; 
3614   1E35 26 01 00      mov b, $1
3615   1E38 F9            leave
3616   1E39 09            ret
3617   1E3A 0A 3D 1E      jmp _if48_exit
3618   1E3D             _if48_exit:
3619   1E3D             ;; return 0; 
3620   1E3D 26 00 00      mov b, $0
3621   1E40 F9            leave
3622   1E41 09            ret
3623   1E42             
3624   1E42             input_f00:
3625   1E42 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3626   1E45             ; $v 
3627   1E45             ; $buf 
3628   1E45             ; $x 
3629   1E45 52 0C 00      sub sp, 12
3630   1E48             ;; input(buf, 8); 
3631   1E48 26 08 00      mov b, $8
3632   1E4B DD            push bl
3633   1E4C FA F7 FF      lea d, [bp + -9] ; $buf
3634   1E4F 2D            mov b, d
3635   1E50 FD AB         swp b
3636   1E52 D8            push b
3637   1E53 07 7C 1D      call input
3638   1E56 51 03 00      add sp, 3
3639   1E59             ;; x = buf; 
3640   1E59 FA F5 FF      lea d, [bp + -11] ; $x
3641   1E5C DA            push d
3642   1E5D FA F7 FF      lea d, [bp + -9] ; $buf
3643   1E60 2D            mov b, d
3644   1E61 E7            pop d
3645   1E62 FD 43         mov [d], b
3646   1E64             ;; if (!is_digit(*x)) 
3647   1E64             _if49_cond:
3648   1E64 FA F5 FF      lea d, [bp + -11] ; $x
3649   1E67 2A            mov b, [d]
3650   1E68 74            mov d, b
3651   1E69 32            mov bl, [d]
3652   1E6A A7 00         mov bh, 0
3653   1E6C DD            push bl
3654   1E6D 07 D7 19      call is_digit
3655   1E70 51 01 00      add sp, 1
3656   1E73 C0 00 00      cmp b, 0
3657   1E76 FD 71         seq ; !
3658   1E78 C0 00 00      cmp b, 0
3659   1E7B C6 86 1E      je _if49_exit
3660   1E7E             _if49_true:
3661   1E7E             ;; return -1; 
3662   1E7E 26 FF FF      mov b, $ffff
3663   1E81 F9            leave
3664   1E82 09            ret
3665   1E83 0A 86 1E      jmp _if49_exit
3666   1E86             _if49_exit:
3667   1E86             ;; v = 100 * (*x++ - '0'); 
3668   1E86 FA FF FF      lea d, [bp + -1] ; $v
3669   1E89 DA            push d
3670   1E8A 26 64 00      mov b, $64
3671   1E8D             ; START FACTORS
3672   1E8D D7            push a
3673   1E8E 11            mov a, b
3674   1E8F FA F5 FF      lea d, [bp + -11] ; $x
3675   1E92 2A            mov b, [d]
3676   1E93 D8            push b
3677   1E94 FD 77         inc b
3678   1E96 FA F5 FF      lea d, [bp + -11] ; $x
3679   1E99 FD 43         mov [d], b
3680   1E9B E5            pop b
3681   1E9C 74            mov d, b
3682   1E9D 32            mov bl, [d]
3683   1E9E A7 00         mov bh, 0
3684   1EA0             ; START TERMS
3685   1EA0 D7            push a
3686   1EA1 11            mov a, b
3687   1EA2 26 30 00      mov b, $30
3688   1EA5 60            sub a, b
3689   1EA6 27            mov b, a
3690   1EA7 E4            pop a
3691   1EA8             ; END TERMS
3692   1EA8 AC            mul a, b ; *
3693   1EA9 11            mov a, b
3694   1EAA 27            mov b, a
3695   1EAB E4            pop a
3696   1EAC             ; END FACTORS
3697   1EAC E7            pop d
3698   1EAD FD 43         mov [d], b
3699   1EAF             ;; if (*x == 0) 
3700   1EAF             _if50_cond:
3701   1EAF FA F5 FF      lea d, [bp + -11] ; $x
3702   1EB2 2A            mov b, [d]
3703   1EB3 74            mov d, b
3704   1EB4 32            mov bl, [d]
3705   1EB5 A7 00         mov bh, 0
3706   1EB7             ; START RELATIONAL
3707   1EB7 D7            push a
3708   1EB8 11            mov a, b
3709   1EB9 26 00 00      mov b, $0
3710   1EBC B0            cmp a, b
3711   1EBD FD 71         seq ; ==
3712   1EBF E4            pop a
3713   1EC0             ; END RELATIONAL
3714   1EC0 C0 00 00      cmp b, 0
3715   1EC3 C6 CF 1E      je _if50_exit
3716   1EC6             _if50_true:
3717   1EC6             ;; return v; 
3718   1EC6 FA FF FF      lea d, [bp + -1] ; $v
3719   1EC9 2A            mov b, [d]
3720   1ECA F9            leave
3721   1ECB 09            ret
3722   1ECC 0A CF 1E      jmp _if50_exit
3723   1ECF             _if50_exit:
3724   1ECF             ;; if (*x++ != '.') 
3725   1ECF             _if51_cond:
3726   1ECF FA F5 FF      lea d, [bp + -11] ; $x
3727   1ED2 2A            mov b, [d]
3728   1ED3 D8            push b
3729   1ED4 FD 77         inc b
3730   1ED6 FA F5 FF      lea d, [bp + -11] ; $x
3731   1ED9 FD 43         mov [d], b
3732   1EDB E5            pop b
3733   1EDC 74            mov d, b
3734   1EDD 32            mov bl, [d]
3735   1EDE A7 00         mov bh, 0
3736   1EE0             ; START RELATIONAL
3737   1EE0 D7            push a
3738   1EE1 11            mov a, b
3739   1EE2 26 2E 00      mov b, $2e
3740   1EE5 B0            cmp a, b
3741   1EE6 FD 72         sneq ; !=
3742   1EE8 E4            pop a
3743   1EE9             ; END RELATIONAL
3744   1EE9 C0 00 00      cmp b, 0
3745   1EEC C6 F7 1E      je _if51_exit
3746   1EEF             _if51_true:
3747   1EEF             ;; return -1; 
3748   1EEF 26 FF FF      mov b, $ffff
3749   1EF2 F9            leave
3750   1EF3 09            ret
3751   1EF4 0A F7 1E      jmp _if51_exit
3752   1EF7             _if51_exit:
3753   1EF7             ;; if (!is_digit(*x)) 
3754   1EF7             _if52_cond:
3755   1EF7 FA F5 FF      lea d, [bp + -11] ; $x
3756   1EFA 2A            mov b, [d]
3757   1EFB 74            mov d, b
3758   1EFC 32            mov bl, [d]
3759   1EFD A7 00         mov bh, 0
3760   1EFF DD            push bl
3761   1F00 07 D7 19      call is_digit
3762   1F03 51 01 00      add sp, 1
3763   1F06 C0 00 00      cmp b, 0
3764   1F09 FD 71         seq ; !
3765   1F0B C0 00 00      cmp b, 0
3766   1F0E C6 19 1F      je _if52_exit
3767   1F11             _if52_true:
3768   1F11             ;; return -1; 
3769   1F11 26 FF FF      mov b, $ffff
3770   1F14 F9            leave
3771   1F15 09            ret
3772   1F16 0A 19 1F      jmp _if52_exit
3773   1F19             _if52_exit:
3774   1F19             ;; v = v + 10 * (*x++ - '0'); 
3775   1F19 FA FF FF      lea d, [bp + -1] ; $v
3776   1F1C DA            push d
3777   1F1D FA FF FF      lea d, [bp + -1] ; $v
3778   1F20 2A            mov b, [d]
3779   1F21             ; START TERMS
3780   1F21 D7            push a
3781   1F22 11            mov a, b
3782   1F23 26 0A 00      mov b, $a
3783   1F26             ; START FACTORS
3784   1F26 D7            push a
3785   1F27 11            mov a, b
3786   1F28 FA F5 FF      lea d, [bp + -11] ; $x
3787   1F2B 2A            mov b, [d]
3788   1F2C D8            push b
3789   1F2D FD 77         inc b
3790   1F2F FA F5 FF      lea d, [bp + -11] ; $x
3791   1F32 FD 43         mov [d], b
3792   1F34 E5            pop b
3793   1F35 74            mov d, b
3794   1F36 32            mov bl, [d]
3795   1F37 A7 00         mov bh, 0
3796   1F39             ; START TERMS
3797   1F39 D7            push a
3798   1F3A 11            mov a, b
3799   1F3B 26 30 00      mov b, $30
3800   1F3E 60            sub a, b
3801   1F3F 27            mov b, a
3802   1F40 E4            pop a
3803   1F41             ; END TERMS
3804   1F41 AC            mul a, b ; *
3805   1F42 11            mov a, b
3806   1F43 27            mov b, a
3807   1F44 E4            pop a
3808   1F45             ; END FACTORS
3809   1F45 56            add b, a
3810   1F46 E4            pop a
3811   1F47             ; END TERMS
3812   1F47 E7            pop d
3813   1F48 FD 43         mov [d], b
3814   1F4A             ;; if (!*x) 
3815   1F4A             _if53_cond:
3816   1F4A FA F5 FF      lea d, [bp + -11] ; $x
3817   1F4D 2A            mov b, [d]
3818   1F4E 74            mov d, b
3819   1F4F 32            mov bl, [d]
3820   1F50 A7 00         mov bh, 0
3821   1F52 C0 00 00      cmp b, 0
3822   1F55 FD 71         seq ; !
3823   1F57 C0 00 00      cmp b, 0
3824   1F5A C6 66 1F      je _if53_exit
3825   1F5D             _if53_true:
3826   1F5D             ;; return v; 
3827   1F5D FA FF FF      lea d, [bp + -1] ; $v
3828   1F60 2A            mov b, [d]
3829   1F61 F9            leave
3830   1F62 09            ret
3831   1F63 0A 66 1F      jmp _if53_exit
3832   1F66             _if53_exit:
3833   1F66             ;; if (!is_digit(*x)) 
3834   1F66             _if54_cond:
3835   1F66 FA F5 FF      lea d, [bp + -11] ; $x
3836   1F69 2A            mov b, [d]
3837   1F6A 74            mov d, b
3838   1F6B 32            mov bl, [d]
3839   1F6C A7 00         mov bh, 0
3840   1F6E DD            push bl
3841   1F6F 07 D7 19      call is_digit
3842   1F72 51 01 00      add sp, 1
3843   1F75 C0 00 00      cmp b, 0
3844   1F78 FD 71         seq ; !
3845   1F7A C0 00 00      cmp b, 0
3846   1F7D C6 88 1F      je _if54_exit
3847   1F80             _if54_true:
3848   1F80             ;; return -1; 
3849   1F80 26 FF FF      mov b, $ffff
3850   1F83 F9            leave
3851   1F84 09            ret
3852   1F85 0A 88 1F      jmp _if54_exit
3853   1F88             _if54_exit:
3854   1F88             ;; v = v + *x++ - '0'; 
3855   1F88 FA FF FF      lea d, [bp + -1] ; $v
3856   1F8B DA            push d
3857   1F8C FA FF FF      lea d, [bp + -1] ; $v
3858   1F8F 2A            mov b, [d]
3859   1F90             ; START TERMS
3860   1F90 D7            push a
3861   1F91 11            mov a, b
3862   1F92 FA F5 FF      lea d, [bp + -11] ; $x
3863   1F95 2A            mov b, [d]
3864   1F96 D8            push b
3865   1F97 FD 77         inc b
3866   1F99 FA F5 FF      lea d, [bp + -11] ; $x
3867   1F9C FD 43         mov [d], b
3868   1F9E E5            pop b
3869   1F9F 74            mov d, b
3870   1FA0 32            mov bl, [d]
3871   1FA1 A7 00         mov bh, 0
3872   1FA3 56            add b, a
3873   1FA4 11            mov a, b
3874   1FA5 26 30 00      mov b, $30
3875   1FA8 60            sub a, b
3876   1FA9 27            mov b, a
3877   1FAA E4            pop a
3878   1FAB             ; END TERMS
3879   1FAB E7            pop d
3880   1FAC FD 43         mov [d], b
3881   1FAE             ;; return v; 
3882   1FAE FA FF FF      lea d, [bp + -1] ; $v
3883   1FB1 2A            mov b, [d]
3884   1FB2 F9            leave
3885   1FB3 09            ret
3886   1FB4             
3887   1FB4             input_int:
3888   1FB4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3889   1FB7             ; $x 
3890   1FB7 52 08 00      sub sp, 8
3891   1FBA             ;; input(x, 8); 
3892   1FBA 26 08 00      mov b, $8
3893   1FBD DD            push bl
3894   1FBE FA F9 FF      lea d, [bp + -7] ; $x
3895   1FC1 2D            mov b, d
3896   1FC2 FD AB         swp b
3897   1FC4 D8            push b
3898   1FC5 07 7C 1D      call input
3899   1FC8 51 03 00      add sp, 3
3900   1FCB             ;; if (!is_digit(*x)) 
3901   1FCB             _if55_cond:
3902   1FCB FA F9 FF      lea d, [bp + -7] ; $x
3903   1FCE 2D            mov b, d
3904   1FCF 74            mov d, b
3905   1FD0 32            mov bl, [d]
3906   1FD1 A7 00         mov bh, 0
3907   1FD3 DD            push bl
3908   1FD4 07 D7 19      call is_digit
3909   1FD7 51 01 00      add sp, 1
3910   1FDA C0 00 00      cmp b, 0
3911   1FDD FD 71         seq ; !
3912   1FDF C0 00 00      cmp b, 0
3913   1FE2 C6 ED 1F      je _if55_exit
3914   1FE5             _if55_true:
3915   1FE5             ;; return -1; 
3916   1FE5 26 FF FF      mov b, $ffff
3917   1FE8 F9            leave
3918   1FE9 09            ret
3919   1FEA 0A ED 1F      jmp _if55_exit
3920   1FED             _if55_exit:
3921   1FED             ;; return atoi(x); 
3922   1FED FA F9 FF      lea d, [bp + -7] ; $x
3923   1FF0 2D            mov b, d
3924   1FF1 FD AB         swp b
3925   1FF3 D8            push b
3926   1FF4 07 85 17      call atoi
3927   1FF7 51 02 00      add sp, 2
3928   1FFA F9            leave
3929   1FFB 09            ret
3930   1FFC             
3931   1FFC             print100:
3932   1FFC F8 00 00      enter 0 ; (push bp; mov bp, sp)
3933   1FFF             ; $p 
3934   1FFF 52 02 00      sub sp, 2
3935   2002             ;; *p = buf; 
3936   2002 FA FF FF      lea d, [bp + -1] ; $p
3937   2005 2A            mov b, [d]
3938   2006 D8            push b
3939   2007 3B 3A 63      mov d, st_print100_buf_dt ; static buf
3940   200A 2D            mov b, d
3941   200B E7            pop d
3942   200C FD 3E         mov [d], bl
3943   200E             ;; if (v < 0) { 
3944   200E             _if56_cond:
3945   200E FA 05 00      lea d, [bp + 5] ; $v
3946   2011 2A            mov b, [d]
3947   2012             ; START RELATIONAL
3948   2012 D7            push a
3949   2013 11            mov a, b
3950   2014 26 00 00      mov b, $0
3951   2017 B0            cmp a, b
3952   2018 FD 73         slt ; < (signed)
3953   201A E4            pop a
3954   201B             ; END RELATIONAL
3955   201B C0 00 00      cmp b, 0
3956   201E C6 45 20      je _if56_exit
3957   2021             _if56_true:
3958   2021             ;; v = -v; 
3959   2021 FA 05 00      lea d, [bp + 5] ; $v
3960   2024 DA            push d
3961   2025 FA 05 00      lea d, [bp + 5] ; $v
3962   2028 2A            mov b, [d]
3963   2029 FD 97         neg b
3964   202B E7            pop d
3965   202C FD 43         mov [d], b
3966   202E             ;; *p++ = '-'; 
3967   202E FA FF FF      lea d, [bp + -1] ; $p
3968   2031 2A            mov b, [d]
3969   2032 D8            push b
3970   2033 FD 77         inc b
3971   2035 FA FF FF      lea d, [bp + -1] ; $p
3972   2038 FD 43         mov [d], b
3973   203A E5            pop b
3974   203B D8            push b
3975   203C 26 2D 00      mov b, $2d
3976   203F E7            pop d
3977   2040 FD 3E         mov [d], bl
3978   2042 0A 45 20      jmp _if56_exit
3979   2045             _if56_exit:
3980   2045             ;; return buf; 
3981   2045 3B 3A 63      mov d, st_print100_buf_dt ; static buf
3982   2048 2D            mov b, d
3983   2049 F9            leave
3984   204A 09            ret
3985   204B             
3986   204B             inoperable:
3987   204B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3988   204E             ;; if (damage[u] < 0) { 
3989   204E             _if57_cond:
3990   204E 3B 58 61      mov d, _damage_data ; $damage
3991   2051 D7            push a
3992   2052 DA            push d
3993   2053 FA 05 00      lea d, [bp + 5] ; $u
3994   2056 32            mov bl, [d]
3995   2057 A7 00         mov bh, 0
3996   2059 E7            pop d
3997   205A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3998   205E E4            pop a
3999   205F 2A            mov b, [d]
4000   2060             ; START RELATIONAL
4001   2060 D7            push a
4002   2061 11            mov a, b
4003   2062 26 00 00      mov b, $0
4004   2065 B0            cmp a, b
4005   2066 FD 73         slt ; < (signed)
4006   2068 E4            pop a
4007   2069             ; END RELATIONAL
4008   2069 C0 00 00      cmp b, 0
4009   206C C6 B6 20      je _if57_exit
4010   206F             _if57_true:
4011   206F             ;; printf("%s %s inoperable.\n", 
4012   206F             _ternary59_cond:
4013   206F FA 05 00      lea d, [bp + 5] ; $u
4014   2072 32            mov bl, [d]
4015   2073 A7 00         mov bh, 0
4016   2075             ; START RELATIONAL
4017   2075 D7            push a
4018   2076 11            mov a, b
4019   2077 26 05 00      mov b, $5
4020   207A B0            cmp a, b
4021   207B FD 71         seq ; ==
4022   207D E4            pop a
4023   207E             ; END RELATIONAL
4024   207E C0 00 00      cmp b, 0
4025   2081 C6 8A 20      je _ternary59_false
4026   2084             _ternary59_true:
4027   2084 26 B8 64      mov b, _s33 ; "are"
4028   2087 0A 8D 20      jmp _ternary59_exit
4029   208A             _ternary59_false:
4030   208A 26 BC 64      mov b, _s34 ; "is"
4031   208D             _ternary59_exit:
4032   208D FD AB         swp b
4033   208F D8            push b
4034   2090 FA 05 00      lea d, [bp + 5] ; $u
4035   2093 32            mov bl, [d]
4036   2094 A7 00         mov bh, 0
4037   2096 FD AB         swp b
4038   2098 D8            push b
4039   2099 07 1B 5D      call get_device_name
4040   209C 51 02 00      add sp, 2
4041   209F FD AB         swp b
4042   20A1 D8            push b
4043   20A2 26 BF 64      mov b, _s35 ; "%s %s inoperable.\n"
4044   20A5 FD AB         swp b
4045   20A7 D8            push b
4046   20A8 07 D1 05      call printf
4047   20AB 51 06 00      add sp, 6
4048   20AE             ;; return 1; 
4049   20AE 26 01 00      mov b, $1
4050   20B1 F9            leave
4051   20B2 09            ret
4052   20B3 0A B6 20      jmp _if57_exit
4053   20B6             _if57_exit:
4054   20B6             ;; return 0; 
4055   20B6 26 00 00      mov b, $0
4056   20B9 F9            leave
4057   20BA 09            ret
4058   20BB             
4059   20BB             intro:
4060   20BB F8 00 00      enter 0 ; (push bp; mov bp, sp)
4061   20BE             ;; showfile("startrek.intro"); 
4062   20BE 26 D2 64      mov b, _s36 ; "startrek.intro"
4063   20C1 FD AB         swp b
4064   20C3 D8            push b
4065   20C4 07 6D 60      call showfile
4066   20C7 51 02 00      add sp, 2
4067   20CA             ;; if (yesno()) 
4068   20CA             _if60_cond:
4069   20CA 07 00 1E      call yesno
4070   20CD C0 00 00      cmp b, 0
4071   20D0 C6 E2 20      je _if60_exit
4072   20D3             _if60_true:
4073   20D3             ;; showfile("startrek.doc"); 
4074   20D3 26 E1 64      mov b, _s37 ; "startrek.doc"
4075   20D6 FD AB         swp b
4076   20D8 D8            push b
4077   20D9 07 6D 60      call showfile
4078   20DC 51 02 00      add sp, 2
4079   20DF 0A E2 20      jmp _if60_exit
4080   20E2             _if60_exit:
4081   20E2             ;; showfile("startrek.logo"); 
4082   20E2 26 EE 64      mov b, _s38 ; "startrek.logo"
4083   20E5 FD AB         swp b
4084   20E7 D8            push b
4085   20E8 07 6D 60      call showfile
4086   20EB 51 02 00      add sp, 2
4087   20EE             ;; stardate = TO_FIXED((get_rand(20) + 20) * 100); 
4088   20EE 3B 70 61      mov d, _stardate ; $stardate
4089   20F1 DA            push d
4090   20F2 26 14 00      mov b, $14
4091   20F5 FD AB         swp b
4092   20F7 D8            push b
4093   20F8 07 1C 1D      call get_rand
4094   20FB 51 02 00      add sp, 2
4095   20FE             ; START TERMS
4096   20FE D7            push a
4097   20FF 11            mov a, b
4098   2100 26 14 00      mov b, $14
4099   2103 56            add b, a
4100   2104 E4            pop a
4101   2105             ; END TERMS
4102   2105             ; START FACTORS
4103   2105 D7            push a
4104   2106 11            mov a, b
4105   2107 26 64 00      mov b, $64
4106   210A AC            mul a, b ; *
4107   210B 11            mov a, b
4108   210C 27            mov b, a
4109   210D E4            pop a
4110   210E             ; END FACTORS
4111   210E FD AB         swp b
4112   2110 D8            push b
4113   2111 07 D6 1C      call TO_FIXED
4114   2114 51 02 00      add sp, 2
4115   2117 E7            pop d
4116   2118 FD 43         mov [d], b
4117   211A F9            leave
4118   211B 09            ret
4119   211C             
4120   211C             new_game:
4121   211C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4122   211F             ; $cmd 
4123   211F 52 04 00      sub sp, 4
4124   2122             ;; initialize(); 
4125   2122 07 AE 23      call initialize
4126   2125             ;; new_quadrant(); 
4127   2125 07 4B 28      call new_quadrant
4128   2128             ;; short_range_scan(); 
4129   2128 07 01 35      call short_range_scan
4130   212B             ;; while (1) { 
4131   212B             _while61_cond:
4132   212B 26 01 00      mov b, $1
4133   212E C0 00 00      cmp b, 0
4134   2131 C6 AC 23      je _while61_exit
4135   2134             _while61_block:
4136   2134             ;; if (shield + energy <= 10 && (energy < 10 || damage[7] < 0)) { 
4137   2134             _if62_cond:
4138   2134 3B 51 61      mov d, _shield ; $shield
4139   2137 2A            mov b, [d]
4140   2138             ; START TERMS
4141   2138 D7            push a
4142   2139 11            mov a, b
4143   213A 3B 96 60      mov d, _energy ; $energy
4144   213D 2A            mov b, [d]
4145   213E 56            add b, a
4146   213F E4            pop a
4147   2140             ; END TERMS
4148   2140             ; START RELATIONAL
4149   2140 D7            push a
4150   2141 11            mov a, b
4151   2142 26 0A 00      mov b, $a
4152   2145 B0            cmp a, b
4153   2146 FD 73         slt ; <= (signed)
4154   2148 E4            pop a
4155   2149             ; END RELATIONAL
4156   2149 D7            push a
4157   214A 11            mov a, b
4158   214B 3B 96 60      mov d, _energy ; $energy
4159   214E 2A            mov b, [d]
4160   214F             ; START RELATIONAL
4161   214F D7            push a
4162   2150 11            mov a, b
4163   2151 26 0A 00      mov b, $a
4164   2154 B0            cmp a, b
4165   2155 FD 73         slt ; < (signed)
4166   2157 E4            pop a
4167   2158             ; END RELATIONAL
4168   2158 D7            push a
4169   2159 11            mov a, b
4170   215A 3B 58 61      mov d, _damage_data ; $damage
4171   215D D7            push a
4172   215E DA            push d
4173   215F 26 07 00      mov b, $7
4174   2162 E7            pop d
4175   2163 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4176   2167 E4            pop a
4177   2168 2A            mov b, [d]
4178   2169             ; START RELATIONAL
4179   2169 D7            push a
4180   216A 11            mov a, b
4181   216B 26 00 00      mov b, $0
4182   216E B0            cmp a, b
4183   216F FD 73         slt ; < (signed)
4184   2171 E4            pop a
4185   2172             ; END RELATIONAL
4186   2172 FD A8         sor a, b ; ||
4187   2174 E4            pop a
4188   2175 FD A7         sand a, b
4189   2177 E4            pop a
4190   2178 C0 00 00      cmp b, 0
4191   217B C6 90 21      je _if62_exit
4192   217E             _if62_true:
4193   217E             ;; showfile("startrek.fatal"); 
4194   217E 26 FC 64      mov b, _s39 ; "startrek.fatal"
4195   2181 FD AB         swp b
4196   2183 D8            push b
4197   2184 07 6D 60      call showfile
4198   2187 51 02 00      add sp, 2
4199   218A             ;; end_of_time(); 
4200   218A 07 E5 54      call end_of_time
4201   218D 0A 90 21      jmp _if62_exit
4202   2190             _if62_exit:
4203   2190             ;; puts("Command? "); 
4204   2190 26 0B 65      mov b, _s40 ; "Command? "
4205   2193 FD AB         swp b
4206   2195 D8            push b
4207   2196 07 31 13      call puts
4208   2199 51 02 00      add sp, 2
4209   219C             ;; input(cmd, 4); 
4210   219C 26 04 00      mov b, $4
4211   219F DD            push bl
4212   21A0 FA FD FF      lea d, [bp + -3] ; $cmd
4213   21A3 2D            mov b, d
4214   21A4 FD AB         swp b
4215   21A6 D8            push b
4216   21A7 07 7C 1D      call input
4217   21AA 51 03 00      add sp, 3
4218   21AD             ;; putchar('\n'); 
4219   21AD 26 0A 00      mov b, $a
4220   21B0 DD            push bl
4221   21B1 07 FB 12      call putchar
4222   21B4 51 01 00      add sp, 1
4223   21B7             ;; if (!strncmp(cmd, "nav", 3)) 
4224   21B7             _if63_cond:
4225   21B7 26 03 00      mov b, $3
4226   21BA FD AB         swp b
4227   21BC D8            push b
4228   21BD 26 15 65      mov b, _s41 ; "nav"
4229   21C0 FD AB         swp b
4230   21C2 D8            push b
4231   21C3 FA FD FF      lea d, [bp + -3] ; $cmd
4232   21C6 2D            mov b, d
4233   21C7 FD AB         swp b
4234   21C9 D8            push b
4235   21CA 07 D0 04      call strncmp
4236   21CD 51 06 00      add sp, 6
4237   21D0 C0 00 00      cmp b, 0
4238   21D3 FD 71         seq ; !
4239   21D5 C0 00 00      cmp b, 0
4240   21D8 C6 E1 21      je _if63_else
4241   21DB             _if63_true:
4242   21DB             ;; course_control(); 
4243   21DB 07 D8 2B      call course_control
4244   21DE 0A A9 23      jmp _if63_exit
4245   21E1             _if63_else:
4246   21E1             ;; if (!strncmp(cmd, "srs", 3)) 
4247   21E1             _if64_cond:
4248   21E1 26 03 00      mov b, $3
4249   21E4 FD AB         swp b
4250   21E6 D8            push b
4251   21E7 26 19 65      mov b, _s42 ; "srs"
4252   21EA FD AB         swp b
4253   21EC D8            push b
4254   21ED FA FD FF      lea d, [bp + -3] ; $cmd
4255   21F0 2D            mov b, d
4256   21F1 FD AB         swp b
4257   21F3 D8            push b
4258   21F4 07 D0 04      call strncmp
4259   21F7 51 06 00      add sp, 6
4260   21FA C0 00 00      cmp b, 0
4261   21FD FD 71         seq ; !
4262   21FF C0 00 00      cmp b, 0
4263   2202 C6 0B 22      je _if64_else
4264   2205             _if64_true:
4265   2205             ;; short_range_scan(); 
4266   2205 07 01 35      call short_range_scan
4267   2208 0A A9 23      jmp _if64_exit
4268   220B             _if64_else:
4269   220B             ;; if (!strncmp(cmd, "lrs", 3)) 
4270   220B             _if65_cond:
4271   220B 26 03 00      mov b, $3
4272   220E FD AB         swp b
4273   2210 D8            push b
4274   2211 26 1D 65      mov b, _s43 ; "lrs"
4275   2214 FD AB         swp b
4276   2216 D8            push b
4277   2217 FA FD FF      lea d, [bp + -3] ; $cmd
4278   221A 2D            mov b, d
4279   221B FD AB         swp b
4280   221D D8            push b
4281   221E 07 D0 04      call strncmp
4282   2221 51 06 00      add sp, 6
4283   2224 C0 00 00      cmp b, 0
4284   2227 FD 71         seq ; !
4285   2229 C0 00 00      cmp b, 0
4286   222C C6 35 22      je _if65_else
4287   222F             _if65_true:
4288   222F             ;; long_range_scan(); 
4289   222F 07 83 39      call long_range_scan
4290   2232 0A A9 23      jmp _if65_exit
4291   2235             _if65_else:
4292   2235             ;; if (!strncmp(cmd, "pha", 3)) 
4293   2235             _if66_cond:
4294   2235 26 03 00      mov b, $3
4295   2238 FD AB         swp b
4296   223A D8            push b
4297   223B 26 21 65      mov b, _s44 ; "pha"
4298   223E FD AB         swp b
4299   2240 D8            push b
4300   2241 FA FD FF      lea d, [bp + -3] ; $cmd
4301   2244 2D            mov b, d
4302   2245 FD AB         swp b
4303   2247 D8            push b
4304   2248 07 D0 04      call strncmp
4305   224B 51 06 00      add sp, 6
4306   224E C0 00 00      cmp b, 0
4307   2251 FD 71         seq ; !
4308   2253 C0 00 00      cmp b, 0
4309   2256 C6 5F 22      je _if66_else
4310   2259             _if66_true:
4311   2259             ;; phaser_control(); 
4312   2259 07 A1 3B      call phaser_control
4313   225C 0A A9 23      jmp _if66_exit
4314   225F             _if66_else:
4315   225F             ;; if (!strncmp(cmd, "tor", 3)) 
4316   225F             _if67_cond:
4317   225F 26 03 00      mov b, $3
4318   2262 FD AB         swp b
4319   2264 D8            push b
4320   2265 26 25 65      mov b, _s45 ; "tor"
4321   2268 FD AB         swp b
4322   226A D8            push b
4323   226B FA FD FF      lea d, [bp + -3] ; $cmd
4324   226E 2D            mov b, d
4325   226F FD AB         swp b
4326   2271 D8            push b
4327   2272 07 D0 04      call strncmp
4328   2275 51 06 00      add sp, 6
4329   2278 C0 00 00      cmp b, 0
4330   227B FD 71         seq ; !
4331   227D C0 00 00      cmp b, 0
4332   2280 C6 89 22      je _if67_else
4333   2283             _if67_true:
4334   2283             ;; photon_torpedoes(); 
4335   2283 07 5F 40      call photon_torpedoes
4336   2286 0A A9 23      jmp _if67_exit
4337   2289             _if67_else:
4338   2289             ;; if (!strncmp(cmd, "shi", 3)) 
4339   2289             _if68_cond:
4340   2289 26 03 00      mov b, $3
4341   228C FD AB         swp b
4342   228E D8            push b
4343   228F 26 29 65      mov b, _s46 ; "shi"
4344   2292 FD AB         swp b
4345   2294 D8            push b
4346   2295 FA FD FF      lea d, [bp + -3] ; $cmd
4347   2298 2D            mov b, d
4348   2299 FD AB         swp b
4349   229B D8            push b
4350   229C 07 D0 04      call strncmp
4351   229F 51 06 00      add sp, 6
4352   22A2 C0 00 00      cmp b, 0
4353   22A5 FD 71         seq ; !
4354   22A7 C0 00 00      cmp b, 0
4355   22AA C6 B3 22      je _if68_else
4356   22AD             _if68_true:
4357   22AD             ;; shield_control(); 
4358   22AD 07 CA 48      call shield_control
4359   22B0 0A A9 23      jmp _if68_exit
4360   22B3             _if68_else:
4361   22B3             ;; if (!strncmp(cmd, "dam", 3)) 
4362   22B3             _if69_cond:
4363   22B3 26 03 00      mov b, $3
4364   22B6 FD AB         swp b
4365   22B8 D8            push b
4366   22B9 26 2D 65      mov b, _s47 ; "dam"
4367   22BC FD AB         swp b
4368   22BE D8            push b
4369   22BF FA FD FF      lea d, [bp + -3] ; $cmd
4370   22C2 2D            mov b, d
4371   22C3 FD AB         swp b
4372   22C5 D8            push b
4373   22C6 07 D0 04      call strncmp
4374   22C9 51 06 00      add sp, 6
4375   22CC C0 00 00      cmp b, 0
4376   22CF FD 71         seq ; !
4377   22D1 C0 00 00      cmp b, 0
4378   22D4 C6 DD 22      je _if69_else
4379   22D7             _if69_true:
4380   22D7             ;; damage_control(); 
4381   22D7 07 7F 46      call damage_control
4382   22DA 0A A9 23      jmp _if69_exit
4383   22DD             _if69_else:
4384   22DD             ;; if (!strncmp(cmd, "com", 3)) 
4385   22DD             _if70_cond:
4386   22DD 26 03 00      mov b, $3
4387   22E0 FD AB         swp b
4388   22E2 D8            push b
4389   22E3 26 31 65      mov b, _s48 ; "com"
4390   22E6 FD AB         swp b
4391   22E8 D8            push b
4392   22E9 FA FD FF      lea d, [bp + -3] ; $cmd
4393   22EC 2D            mov b, d
4394   22ED FD AB         swp b
4395   22EF D8            push b
4396   22F0 07 D0 04      call strncmp
4397   22F3 51 06 00      add sp, 6
4398   22F6 C0 00 00      cmp b, 0
4399   22F9 FD 71         seq ; !
4400   22FB C0 00 00      cmp b, 0
4401   22FE C6 07 23      je _if70_else
4402   2301             _if70_true:
4403   2301             ;; library_computer(); 
4404   2301 07 A6 49      call library_computer
4405   2304 0A A9 23      jmp _if70_exit
4406   2307             _if70_else:
4407   2307             ;; if (!strncmp(cmd, "xxx", 3)) 
4408   2307             _if71_cond:
4409   2307 26 03 00      mov b, $3
4410   230A FD AB         swp b
4411   230C D8            push b
4412   230D 26 35 65      mov b, _s49 ; "xxx"
4413   2310 FD AB         swp b
4414   2312 D8            push b
4415   2313 FA FD FF      lea d, [bp + -3] ; $cmd
4416   2316 2D            mov b, d
4417   2317 FD AB         swp b
4418   2319 D8            push b
4419   231A 07 D0 04      call strncmp
4420   231D 51 06 00      add sp, 6
4421   2320 C0 00 00      cmp b, 0
4422   2323 FD 71         seq ; !
4423   2325 C0 00 00      cmp b, 0
4424   2328 C6 31 23      je _if71_else
4425   232B             _if71_true:
4426   232B             ;; resign_commision(); 
4427   232B 07 09 55      call resign_commision
4428   232E 0A A9 23      jmp _if71_exit
4429   2331             _if71_else:
4430   2331             ;; puts("Enter one of the following:\n"); 
4431   2331 26 39 65      mov b, _s50 ; "Enter one of the following:\n"
4432   2334 FD AB         swp b
4433   2336 D8            push b
4434   2337 07 31 13      call puts
4435   233A 51 02 00      add sp, 2
4436   233D             ;; puts("  nav - To Set Course"); 
4437   233D 26 56 65      mov b, _s51 ; "  nav - To Set Course"
4438   2340 FD AB         swp b
4439   2342 D8            push b
4440   2343 07 31 13      call puts
4441   2346 51 02 00      add sp, 2
4442   2349             ;; puts("  srs - Short Range Sensors"); 
4443   2349 26 6C 65      mov b, _s52 ; "  srs - Short Range Sensors"
4444   234C FD AB         swp b
4445   234E D8            push b
4446   234F 07 31 13      call puts
4447   2352 51 02 00      add sp, 2
4448   2355             ;; puts("  lrs - Long Range Sensors"); 
4449   2355 26 88 65      mov b, _s53 ; "  lrs - Long Range Sensors"
4450   2358 FD AB         swp b
4451   235A D8            push b
4452   235B 07 31 13      call puts
4453   235E 51 02 00      add sp, 2
4454   2361             ;; puts("  pha - Phasers"); 
4455   2361 26 A3 65      mov b, _s54 ; "  pha - Phasers"
4456   2364 FD AB         swp b
4457   2366 D8            push b
4458   2367 07 31 13      call puts
4459   236A 51 02 00      add sp, 2
4460   236D             ;; puts("  tor - Photon Torpedoes"); 
4461   236D 26 B3 65      mov b, _s55 ; "  tor - Photon Torpedoes"
4462   2370 FD AB         swp b
4463   2372 D8            push b
4464   2373 07 31 13      call puts
4465   2376 51 02 00      add sp, 2
4466   2379             ;; puts("  shi - Shield Control"); 
4467   2379 26 CC 65      mov b, _s56 ; "  shi - Shield Control"
4468   237C FD AB         swp b
4469   237E D8            push b
4470   237F 07 31 13      call puts
4471   2382 51 02 00      add sp, 2
4472   2385             ;; puts("  dam - Damage Control"); 
4473   2385 26 E3 65      mov b, _s57 ; "  dam - Damage Control"
4474   2388 FD AB         swp b
4475   238A D8            push b
4476   238B 07 31 13      call puts
4477   238E 51 02 00      add sp, 2
4478   2391             ;; puts("  com - Library Computer"); 
4479   2391 26 FA 65      mov b, _s58 ; "  com - Library Computer"
4480   2394 FD AB         swp b
4481   2396 D8            push b
4482   2397 07 31 13      call puts
4483   239A 51 02 00      add sp, 2
4484   239D             ;; puts("  xxx - Resign Command\n"); 
4485   239D 26 13 66      mov b, _s59 ; "  xxx - Resign Command\n"
4486   23A0 FD AB         swp b
4487   23A2 D8            push b
4488   23A3 07 31 13      call puts
4489   23A6 51 02 00      add sp, 2
4490   23A9             _if71_exit:
4491   23A9             _if70_exit:
4492   23A9             _if69_exit:
4493   23A9             _if68_exit:
4494   23A9             _if67_exit:
4495   23A9             _if66_exit:
4496   23A9             _if65_exit:
4497   23A9             _if64_exit:
4498   23A9             _if63_exit:
4499   23A9 0A 2B 21      jmp _while61_cond
4500   23AC             _while61_exit:
4501   23AC F9            leave
4502   23AD 09            ret
4503   23AE             
4504   23AE             initialize:
4505   23AE F8 00 00      enter 0 ; (push bp; mov bp, sp)
4506   23B1             ; $i 
4507   23B1             ; $j 
4508   23B1             ; $yp 
4509   23B1             ; $xp 
4510   23B1             ; $r 
4511   23B1 52 07 00      sub sp, 7
4512   23B4             ;; time_start = FROM_FIXED(stardate); 
4513   23B4 3B 54 61      mov d, _time_start ; $time_start
4514   23B7 DA            push d
4515   23B8 3B 70 61      mov d, _stardate ; $stardate
4516   23BB 2A            mov b, [d]
4517   23BC FD AB         swp b
4518   23BE D8            push b
4519   23BF 07 E8 1C      call FROM_FIXED
4520   23C2 51 02 00      add sp, 2
4521   23C5 E7            pop d
4522   23C6 FD 43         mov [d], b
4523   23C8             ;; time_up = 25 + get_rand(10); 
4524   23C8 3B 56 61      mov d, _time_up ; $time_up
4525   23CB DA            push d
4526   23CC 26 19 00      mov b, $19
4527   23CF             ; START TERMS
4528   23CF D7            push a
4529   23D0 11            mov a, b
4530   23D1 26 0A 00      mov b, $a
4531   23D4 FD AB         swp b
4532   23D6 D8            push b
4533   23D7 07 1C 1D      call get_rand
4534   23DA 51 02 00      add sp, 2
4535   23DD 56            add b, a
4536   23DE E4            pop a
4537   23DF             ; END TERMS
4538   23DF E7            pop d
4539   23E0 FD 43         mov [d], b
4540   23E2             ;; docked = 0; 
4541   23E2 3B 95 60      mov d, _docked ; $docked
4542   23E5 DA            push d
4543   23E6 26 00 00      mov b, $0
4544   23E9 E7            pop d
4545   23EA FD 3E         mov [d], bl
4546   23EC             ;; energy = energy0; 
4547   23EC 3B 96 60      mov d, _energy ; $energy
4548   23EF DA            push d
4549   23F0 3B 98 60      mov d, _energy0 ; $energy0
4550   23F3 2A            mov b, [d]
4551   23F4 E7            pop d
4552   23F5 FD 43         mov [d], b
4553   23F7             ;; torps = torps0; 
4554   23F7 3B 4B 61      mov d, _torps ; $torps
4555   23FA DA            push d
4556   23FB 3B 4C 61      mov d, _torps0 ; $torps0
4557   23FE 32            mov bl, [d]
4558   23FF A7 00         mov bh, 0
4559   2401 E7            pop d
4560   2402 FD 3E         mov [d], bl
4561   2404             ;; shield = 0; 
4562   2404 3B 51 61      mov d, _shield ; $shield
4563   2407 DA            push d
4564   2408 26 00 00      mov b, $0
4565   240B E7            pop d
4566   240C FD 43         mov [d], b
4567   240E             ;; quad_y = rand8(); 
4568   240E 3B 4D 61      mov d, _quad_y ; $quad_y
4569   2411 DA            push d
4570   2412 07 6B 1D      call rand8
4571   2415 E7            pop d
4572   2416 FD 43         mov [d], b
4573   2418             ;; quad_x = rand8(); 
4574   2418 3B 4F 61      mov d, _quad_x ; $quad_x
4575   241B DA            push d
4576   241C 07 6B 1D      call rand8
4577   241F E7            pop d
4578   2420 FD 43         mov [d], b
4579   2422             ;; ship_y = TO_FIXED00(rand8()); 
4580   2422 3B 6C 61      mov d, _ship_y ; $ship_y
4581   2425 DA            push d
4582   2426 07 6B 1D      call rand8
4583   2429 FD AB         swp b
4584   242B D8            push b
4585   242C 07 F9 1C      call TO_FIXED00
4586   242F 51 02 00      add sp, 2
4587   2432 E7            pop d
4588   2433 FD 43         mov [d], b
4589   2435             ;; ship_x = TO_FIXED00(rand8()); 
4590   2435 3B 6E 61      mov d, _ship_x ; $ship_x
4591   2438 DA            push d
4592   2439 07 6B 1D      call rand8
4593   243C FD AB         swp b
4594   243E D8            push b
4595   243F 07 F9 1C      call TO_FIXED00
4596   2442 51 02 00      add sp, 2
4597   2445 E7            pop d
4598   2446 FD 43         mov [d], b
4599   2448             ;; for (i = 1; i <= 8; i++) 
4600   2448             _for72_init:
4601   2448 FA FF FF      lea d, [bp + -1] ; $i
4602   244B DA            push d
4603   244C 26 01 00      mov b, $1
4604   244F E7            pop d
4605   2450 FD 43         mov [d], b
4606   2452             _for72_cond:
4607   2452 FA FF FF      lea d, [bp + -1] ; $i
4608   2455 2A            mov b, [d]
4609   2456             ; START RELATIONAL
4610   2456 D7            push a
4611   2457 11            mov a, b
4612   2458 26 08 00      mov b, $8
4613   245B B0            cmp a, b
4614   245C FD 73         slt ; <= (signed)
4615   245E E4            pop a
4616   245F             ; END RELATIONAL
4617   245F C0 00 00      cmp b, 0
4618   2462 C6 8B 24      je _for72_exit
4619   2465             _for72_block:
4620   2465             ;; damage[i] = 0; 
4621   2465 3B 58 61      mov d, _damage_data ; $damage
4622   2468 D7            push a
4623   2469 DA            push d
4624   246A FA FF FF      lea d, [bp + -1] ; $i
4625   246D 2A            mov b, [d]
4626   246E E7            pop d
4627   246F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4628   2473 E4            pop a
4629   2474 DA            push d
4630   2475 26 00 00      mov b, $0
4631   2478 E7            pop d
4632   2479 FD 43         mov [d], b
4633   247B             _for72_update:
4634   247B FA FF FF      lea d, [bp + -1] ; $i
4635   247E 2A            mov b, [d]
4636   247F D8            push b
4637   2480 FD 77         inc b
4638   2482 FA FF FF      lea d, [bp + -1] ; $i
4639   2485 FD 43         mov [d], b
4640   2487 E5            pop b
4641   2488 0A 52 24      jmp _for72_cond
4642   248B             _for72_exit:
4643   248B             ;; for (i = 1; i <= 8; i++) { 
4644   248B             _for73_init:
4645   248B FA FF FF      lea d, [bp + -1] ; $i
4646   248E DA            push d
4647   248F 26 01 00      mov b, $1
4648   2492 E7            pop d
4649   2493 FD 43         mov [d], b
4650   2495             _for73_cond:
4651   2495 FA FF FF      lea d, [bp + -1] ; $i
4652   2498 2A            mov b, [d]
4653   2499             ; START RELATIONAL
4654   2499 D7            push a
4655   249A 11            mov a, b
4656   249B 26 08 00      mov b, $8
4657   249E B0            cmp a, b
4658   249F FD 73         slt ; <= (signed)
4659   24A1 E4            pop a
4660   24A2             ; END RELATIONAL
4661   24A2 C0 00 00      cmp b, 0
4662   24A5 C6 0E 26      je _for73_exit
4663   24A8             _for73_block:
4664   24A8             ;; for (j = 1; j <= 8; j++) { 
4665   24A8             _for74_init:
4666   24A8 FA FD FF      lea d, [bp + -3] ; $j
4667   24AB DA            push d
4668   24AC 26 01 00      mov b, $1
4669   24AF E7            pop d
4670   24B0 FD 43         mov [d], b
4671   24B2             _for74_cond:
4672   24B2 FA FD FF      lea d, [bp + -3] ; $j
4673   24B5 2A            mov b, [d]
4674   24B6             ; START RELATIONAL
4675   24B6 D7            push a
4676   24B7 11            mov a, b
4677   24B8 26 08 00      mov b, $8
4678   24BB B0            cmp a, b
4679   24BC FD 73         slt ; <= (signed)
4680   24BE E4            pop a
4681   24BF             ; END RELATIONAL
4682   24BF C0 00 00      cmp b, 0
4683   24C2 C6 FE 25      je _for74_exit
4684   24C5             _for74_block:
4685   24C5             ;; r = get_rand(100); 
4686   24C5 FA FA FF      lea d, [bp + -6] ; $r
4687   24C8 DA            push d
4688   24C9 26 64 00      mov b, $64
4689   24CC FD AB         swp b
4690   24CE D8            push b
4691   24CF 07 1C 1D      call get_rand
4692   24D2 51 02 00      add sp, 2
4693   24D5 E7            pop d
4694   24D6 FD 3E         mov [d], bl
4695   24D8             ;; klingons = 0; 
4696   24D8 3B 48 61      mov d, _klingons ; $klingons
4697   24DB DA            push d
4698   24DC 26 00 00      mov b, $0
4699   24DF E7            pop d
4700   24E0 FD 3E         mov [d], bl
4701   24E2             ;; if (r > 98) 
4702   24E2             _if75_cond:
4703   24E2 FA FA FF      lea d, [bp + -6] ; $r
4704   24E5 32            mov bl, [d]
4705   24E6 A7 00         mov bh, 0
4706   24E8             ; START RELATIONAL
4707   24E8 D7            push a
4708   24E9 11            mov a, b
4709   24EA 26 62 00      mov b, $62
4710   24ED B0            cmp a, b
4711   24EE FD 81         sgu ; > (unsigned)
4712   24F0 E4            pop a
4713   24F1             ; END RELATIONAL
4714   24F1 C0 00 00      cmp b, 0
4715   24F4 C6 04 25      je _if75_else
4716   24F7             _if75_true:
4717   24F7             ;; klingons = 3; 
4718   24F7 3B 48 61      mov d, _klingons ; $klingons
4719   24FA DA            push d
4720   24FB 26 03 00      mov b, $3
4721   24FE E7            pop d
4722   24FF FD 3E         mov [d], bl
4723   2501 0A 48 25      jmp _if75_exit
4724   2504             _if75_else:
4725   2504             ;; if (r > 95) 
4726   2504             _if76_cond:
4727   2504 FA FA FF      lea d, [bp + -6] ; $r
4728   2507 32            mov bl, [d]
4729   2508 A7 00         mov bh, 0
4730   250A             ; START RELATIONAL
4731   250A D7            push a
4732   250B 11            mov a, b
4733   250C 26 5F 00      mov b, $5f
4734   250F B0            cmp a, b
4735   2510 FD 81         sgu ; > (unsigned)
4736   2512 E4            pop a
4737   2513             ; END RELATIONAL
4738   2513 C0 00 00      cmp b, 0
4739   2516 C6 26 25      je _if76_else
4740   2519             _if76_true:
4741   2519             ;; klingons = 2; 
4742   2519 3B 48 61      mov d, _klingons ; $klingons
4743   251C DA            push d
4744   251D 26 02 00      mov b, $2
4745   2520 E7            pop d
4746   2521 FD 3E         mov [d], bl
4747   2523 0A 48 25      jmp _if76_exit
4748   2526             _if76_else:
4749   2526             ;; if (r > 80) 
4750   2526             _if77_cond:
4751   2526 FA FA FF      lea d, [bp + -6] ; $r
4752   2529 32            mov bl, [d]
4753   252A A7 00         mov bh, 0
4754   252C             ; START RELATIONAL
4755   252C D7            push a
4756   252D 11            mov a, b
4757   252E 26 50 00      mov b, $50
4758   2531 B0            cmp a, b
4759   2532 FD 81         sgu ; > (unsigned)
4760   2534 E4            pop a
4761   2535             ; END RELATIONAL
4762   2535 C0 00 00      cmp b, 0
4763   2538 C6 48 25      je _if77_exit
4764   253B             _if77_true:
4765   253B             ;; klingons = 1; 
4766   253B 3B 48 61      mov d, _klingons ; $klingons
4767   253E DA            push d
4768   253F 26 01 00      mov b, $1
4769   2542 E7            pop d
4770   2543 FD 3E         mov [d], bl
4771   2545 0A 48 25      jmp _if77_exit
4772   2548             _if77_exit:
4773   2548             _if76_exit:
4774   2548             _if75_exit:
4775   2548             ;; klingons_left = klingons_left + klingons; 
4776   2548 3B 4A 61      mov d, _klingons_left ; $klingons_left
4777   254B DA            push d
4778   254C 3B 4A 61      mov d, _klingons_left ; $klingons_left
4779   254F 32            mov bl, [d]
4780   2550 A7 00         mov bh, 0
4781   2552             ; START TERMS
4782   2552 D7            push a
4783   2553 11            mov a, b
4784   2554 3B 48 61      mov d, _klingons ; $klingons
4785   2557 32            mov bl, [d]
4786   2558 A7 00         mov bh, 0
4787   255A 56            add b, a
4788   255B E4            pop a
4789   255C             ; END TERMS
4790   255C E7            pop d
4791   255D FD 3E         mov [d], bl
4792   255F             ;; starbases = 0; 
4793   255F 3B 72 60      mov d, _starbases ; $starbases
4794   2562 DA            push d
4795   2563 26 00 00      mov b, $0
4796   2566 E7            pop d
4797   2567 FD 3E         mov [d], bl
4798   2569             ;; if (get_rand(100) > 96) 
4799   2569             _if78_cond:
4800   2569 26 64 00      mov b, $64
4801   256C FD AB         swp b
4802   256E D8            push b
4803   256F 07 1C 1D      call get_rand
4804   2572 51 02 00      add sp, 2
4805   2575             ; START RELATIONAL
4806   2575 D7            push a
4807   2576 11            mov a, b
4808   2577 26 60 00      mov b, $60
4809   257A B0            cmp a, b
4810   257B FD 7F         sgt ; >
4811   257D E4            pop a
4812   257E             ; END RELATIONAL
4813   257E C0 00 00      cmp b, 0
4814   2581 C6 91 25      je _if78_exit
4815   2584             _if78_true:
4816   2584             ;; starbases = 1; 
4817   2584 3B 72 60      mov d, _starbases ; $starbases
4818   2587 DA            push d
4819   2588 26 01 00      mov b, $1
4820   258B E7            pop d
4821   258C FD 3E         mov [d], bl
4822   258E 0A 91 25      jmp _if78_exit
4823   2591             _if78_exit:
4824   2591             ;; starbases_left = starbases_left + starbases; 
4825   2591 3B 75 60      mov d, _starbases_left ; $starbases_left
4826   2594 DA            push d
4827   2595 3B 75 60      mov d, _starbases_left ; $starbases_left
4828   2598 32            mov bl, [d]
4829   2599 A7 00         mov bh, 0
4830   259B             ; START TERMS
4831   259B D7            push a
4832   259C 11            mov a, b
4833   259D 3B 72 60      mov d, _starbases ; $starbases
4834   25A0 32            mov bl, [d]
4835   25A1 A7 00         mov bh, 0
4836   25A3 56            add b, a
4837   25A4 E4            pop a
4838   25A5             ; END TERMS
4839   25A5 E7            pop d
4840   25A6 FD 3E         mov [d], bl
4841   25A8             ;; map[i][j] = (klingons << 8) + (starbases << 4) + rand8(); 
4842   25A8 3B 9A 60      mov d, _map_data ; $map
4843   25AB D7            push a
4844   25AC DA            push d
4845   25AD FA FF FF      lea d, [bp + -1] ; $i
4846   25B0 2A            mov b, [d]
4847   25B1 E7            pop d
4848   25B2 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4849   25B6 DA            push d
4850   25B7 FA FD FF      lea d, [bp + -3] ; $j
4851   25BA 2A            mov b, [d]
4852   25BB E7            pop d
4853   25BC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4854   25C0 E4            pop a
4855   25C1 DA            push d
4856   25C2 3B 48 61      mov d, _klingons ; $klingons
4857   25C5 32            mov bl, [d]
4858   25C6 A7 00         mov bh, 0
4859   25C8             ; START SHIFT
4860   25C8 D7            push a
4861   25C9 11            mov a, b
4862   25CA 26 08 00      mov b, $8
4863   25CD FD 39         mov c, b
4864   25CF 9D            shl a, cl
4865   25D0 27            mov b, a
4866   25D1 E4            pop a
4867   25D2             ; END SHIFT
4868   25D2             ; START TERMS
4869   25D2 D7            push a
4870   25D3 11            mov a, b
4871   25D4 3B 72 60      mov d, _starbases ; $starbases
4872   25D7 32            mov bl, [d]
4873   25D8 A7 00         mov bh, 0
4874   25DA             ; START SHIFT
4875   25DA D7            push a
4876   25DB 11            mov a, b
4877   25DC 26 04 00      mov b, $4
4878   25DF FD 39         mov c, b
4879   25E1 9D            shl a, cl
4880   25E2 27            mov b, a
4881   25E3 E4            pop a
4882   25E4             ; END SHIFT
4883   25E4 56            add b, a
4884   25E5 11            mov a, b
4885   25E6 07 6B 1D      call rand8
4886   25E9 56            add b, a
4887   25EA E4            pop a
4888   25EB             ; END TERMS
4889   25EB E7            pop d
4890   25EC FD 43         mov [d], b
4891   25EE             _for74_update:
4892   25EE FA FD FF      lea d, [bp + -3] ; $j
4893   25F1 2A            mov b, [d]
4894   25F2 D8            push b
4895   25F3 FD 77         inc b
4896   25F5 FA FD FF      lea d, [bp + -3] ; $j
4897   25F8 FD 43         mov [d], b
4898   25FA E5            pop b
4899   25FB 0A B2 24      jmp _for74_cond
4900   25FE             _for74_exit:
4901   25FE             _for73_update:
4902   25FE FA FF FF      lea d, [bp + -1] ; $i
4903   2601 2A            mov b, [d]
4904   2602 D8            push b
4905   2603 FD 77         inc b
4906   2605 FA FF FF      lea d, [bp + -1] ; $i
4907   2608 FD 43         mov [d], b
4908   260A E5            pop b
4909   260B 0A 95 24      jmp _for73_cond
4910   260E             _for73_exit:
4911   260E             ;; if (klingons_left > time_up) 
4912   260E             _if79_cond:
4913   260E 3B 4A 61      mov d, _klingons_left ; $klingons_left
4914   2611 32            mov bl, [d]
4915   2612 A7 00         mov bh, 0
4916   2614             ; START RELATIONAL
4917   2614 D7            push a
4918   2615 11            mov a, b
4919   2616 3B 56 61      mov d, _time_up ; $time_up
4920   2619 2A            mov b, [d]
4921   261A B0            cmp a, b
4922   261B FD 81         sgu ; > (unsigned)
4923   261D E4            pop a
4924   261E             ; END RELATIONAL
4925   261E C0 00 00      cmp b, 0
4926   2621 C6 3B 26      je _if79_exit
4927   2624             _if79_true:
4928   2624             ;; time_up = klingons_left + 1; 
4929   2624 3B 56 61      mov d, _time_up ; $time_up
4930   2627 DA            push d
4931   2628 3B 4A 61      mov d, _klingons_left ; $klingons_left
4932   262B 32            mov bl, [d]
4933   262C A7 00         mov bh, 0
4934   262E             ; START TERMS
4935   262E D7            push a
4936   262F 11            mov a, b
4937   2630 26 01 00      mov b, $1
4938   2633 56            add b, a
4939   2634 E4            pop a
4940   2635             ; END TERMS
4941   2635 E7            pop d
4942   2636 FD 43         mov [d], b
4943   2638 0A 3B 26      jmp _if79_exit
4944   263B             _if79_exit:
4945   263B             ;; if (starbases_left == 0) { 
4946   263B             _if80_cond:
4947   263B 3B 75 60      mov d, _starbases_left ; $starbases_left
4948   263E 32            mov bl, [d]
4949   263F A7 00         mov bh, 0
4950   2641             ; START RELATIONAL
4951   2641 D7            push a
4952   2642 11            mov a, b
4953   2643 26 00 00      mov b, $0
4954   2646 B0            cmp a, b
4955   2647 FD 71         seq ; ==
4956   2649 E4            pop a
4957   264A             ; END RELATIONAL
4958   264A C0 00 00      cmp b, 0
4959   264D C6 55 27      je _if80_exit
4960   2650             _if80_true:
4961   2650             ;; yp = rand8(); 
4962   2650 FA FC FF      lea d, [bp + -4] ; $yp
4963   2653 DA            push d
4964   2654 07 6B 1D      call rand8
4965   2657 E7            pop d
4966   2658 FD 3E         mov [d], bl
4967   265A             ;; xp = rand8(); 
4968   265A FA FB FF      lea d, [bp + -5] ; $xp
4969   265D DA            push d
4970   265E 07 6B 1D      call rand8
4971   2661 E7            pop d
4972   2662 FD 3E         mov [d], bl
4973   2664             ;; if (map[yp][xp] < 0x200) { 
4974   2664             _if81_cond:
4975   2664 3B 9A 60      mov d, _map_data ; $map
4976   2667 D7            push a
4977   2668 DA            push d
4978   2669 FA FC FF      lea d, [bp + -4] ; $yp
4979   266C 32            mov bl, [d]
4980   266D A7 00         mov bh, 0
4981   266F E7            pop d
4982   2670 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4983   2674 DA            push d
4984   2675 FA FB FF      lea d, [bp + -5] ; $xp
4985   2678 32            mov bl, [d]
4986   2679 A7 00         mov bh, 0
4987   267B E7            pop d
4988   267C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4989   2680 E4            pop a
4990   2681 2A            mov b, [d]
4991   2682             ; START RELATIONAL
4992   2682 D7            push a
4993   2683 11            mov a, b
4994   2684 26 00 02      mov b, $200
4995   2687 B0            cmp a, b
4996   2688 FD 75         slu ; < (unsigned)
4997   268A E4            pop a
4998   268B             ; END RELATIONAL
4999   268B C0 00 00      cmp b, 0
5000   268E C6 F3 26      je _if81_exit
5001   2691             _if81_true:
5002   2691             ;; map[yp][xp] = map[yp][xp] + (1 << 8); 
5003   2691 3B 9A 60      mov d, _map_data ; $map
5004   2694 D7            push a
5005   2695 DA            push d
5006   2696 FA FC FF      lea d, [bp + -4] ; $yp
5007   2699 32            mov bl, [d]
5008   269A A7 00         mov bh, 0
5009   269C E7            pop d
5010   269D FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5011   26A1 DA            push d
5012   26A2 FA FB FF      lea d, [bp + -5] ; $xp
5013   26A5 32            mov bl, [d]
5014   26A6 A7 00         mov bh, 0
5015   26A8 E7            pop d
5016   26A9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5017   26AD E4            pop a
5018   26AE DA            push d
5019   26AF 3B 9A 60      mov d, _map_data ; $map
5020   26B2 D7            push a
5021   26B3 DA            push d
5022   26B4 FA FC FF      lea d, [bp + -4] ; $yp
5023   26B7 32            mov bl, [d]
5024   26B8 A7 00         mov bh, 0
5025   26BA E7            pop d
5026   26BB FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5027   26BF DA            push d
5028   26C0 FA FB FF      lea d, [bp + -5] ; $xp
5029   26C3 32            mov bl, [d]
5030   26C4 A7 00         mov bh, 0
5031   26C6 E7            pop d
5032   26C7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5033   26CB E4            pop a
5034   26CC 2A            mov b, [d]
5035   26CD             ; START TERMS
5036   26CD D7            push a
5037   26CE 11            mov a, b
5038   26CF 26 01 00      mov b, $1
5039   26D2             ; START SHIFT
5040   26D2 D7            push a
5041   26D3 11            mov a, b
5042   26D4 26 08 00      mov b, $8
5043   26D7 FD 39         mov c, b
5044   26D9 9D            shl a, cl
5045   26DA 27            mov b, a
5046   26DB E4            pop a
5047   26DC             ; END SHIFT
5048   26DC 56            add b, a
5049   26DD E4            pop a
5050   26DE             ; END TERMS
5051   26DE E7            pop d
5052   26DF FD 43         mov [d], b
5053   26E1             ;; klingons_left++; 
5054   26E1 3B 4A 61      mov d, _klingons_left ; $klingons_left
5055   26E4 32            mov bl, [d]
5056   26E5 A7 00         mov bh, 0
5057   26E7 D8            push b
5058   26E8 FD 77         inc b
5059   26EA 3B 4A 61      mov d, _klingons_left ; $klingons_left
5060   26ED FD 43         mov [d], b
5061   26EF E5            pop b
5062   26F0 0A F3 26      jmp _if81_exit
5063   26F3             _if81_exit:
5064   26F3             ;; map[yp][xp] = map[yp][xp] + (1 << 4); 
5065   26F3 3B 9A 60      mov d, _map_data ; $map
5066   26F6 D7            push a
5067   26F7 DA            push d
5068   26F8 FA FC FF      lea d, [bp + -4] ; $yp
5069   26FB 32            mov bl, [d]
5070   26FC A7 00         mov bh, 0
5071   26FE E7            pop d
5072   26FF FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5073   2703 DA            push d
5074   2704 FA FB FF      lea d, [bp + -5] ; $xp
5075   2707 32            mov bl, [d]
5076   2708 A7 00         mov bh, 0
5077   270A E7            pop d
5078   270B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5079   270F E4            pop a
5080   2710 DA            push d
5081   2711 3B 9A 60      mov d, _map_data ; $map
5082   2714 D7            push a
5083   2715 DA            push d
5084   2716 FA FC FF      lea d, [bp + -4] ; $yp
5085   2719 32            mov bl, [d]
5086   271A A7 00         mov bh, 0
5087   271C E7            pop d
5088   271D FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5089   2721 DA            push d
5090   2722 FA FB FF      lea d, [bp + -5] ; $xp
5091   2725 32            mov bl, [d]
5092   2726 A7 00         mov bh, 0
5093   2728 E7            pop d
5094   2729 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5095   272D E4            pop a
5096   272E 2A            mov b, [d]
5097   272F             ; START TERMS
5098   272F D7            push a
5099   2730 11            mov a, b
5100   2731 26 01 00      mov b, $1
5101   2734             ; START SHIFT
5102   2734 D7            push a
5103   2735 11            mov a, b
5104   2736 26 04 00      mov b, $4
5105   2739 FD 39         mov c, b
5106   273B 9D            shl a, cl
5107   273C 27            mov b, a
5108   273D E4            pop a
5109   273E             ; END SHIFT
5110   273E 56            add b, a
5111   273F E4            pop a
5112   2740             ; END TERMS
5113   2740 E7            pop d
5114   2741 FD 43         mov [d], b
5115   2743             ;; starbases_left++; 
5116   2743 3B 75 60      mov d, _starbases_left ; $starbases_left
5117   2746 32            mov bl, [d]
5118   2747 A7 00         mov bh, 0
5119   2749 D8            push b
5120   274A FD 77         inc b
5121   274C 3B 75 60      mov d, _starbases_left ; $starbases_left
5122   274F FD 43         mov [d], b
5123   2751 E5            pop b
5124   2752 0A 55 27      jmp _if80_exit
5125   2755             _if80_exit:
5126   2755             ;; total_klingons = klingons_left; 
5127   2755 3B 49 61      mov d, _total_klingons ; $total_klingons
5128   2758 DA            push d
5129   2759 3B 4A 61      mov d, _klingons_left ; $klingons_left
5130   275C 32            mov bl, [d]
5131   275D A7 00         mov bh, 0
5132   275F E7            pop d
5133   2760 FD 3E         mov [d], bl
5134   2762             ;; if (starbases_left != 1) { 
5135   2762             _if82_cond:
5136   2762 3B 75 60      mov d, _starbases_left ; $starbases_left
5137   2765 32            mov bl, [d]
5138   2766 A7 00         mov bh, 0
5139   2768             ; START RELATIONAL
5140   2768 D7            push a
5141   2769 11            mov a, b
5142   276A 26 01 00      mov b, $1
5143   276D B0            cmp a, b
5144   276E FD 72         sneq ; !=
5145   2770 E4            pop a
5146   2771             ; END RELATIONAL
5147   2771 C0 00 00      cmp b, 0
5148   2774 C6 A0 27      je _if82_exit
5149   2777             _if82_true:
5150   2777             ;; strcpy(plural_2, "s"); 
5151   2777 26 2B 66      mov b, _s60 ; "s"
5152   277A FD AB         swp b
5153   277C D8            push b
5154   277D 3B 69 62      mov d, _plural_2_data ; $plural_2
5155   2780 2D            mov b, d
5156   2781 FD AB         swp b
5157   2783 D8            push b
5158   2784 07 14 04      call strcpy
5159   2787 51 04 00      add sp, 4
5160   278A             ;; strcpy(plural, "are"); 
5161   278A 26 B8 64      mov b, _s33 ; "are"
5162   278D FD AB         swp b
5163   278F D8            push b
5164   2790 3B 6B 62      mov d, _plural_data ; $plural
5165   2793 2D            mov b, d
5166   2794 FD AB         swp b
5167   2796 D8            push b
5168   2797 07 14 04      call strcpy
5169   279A 51 04 00      add sp, 4
5170   279D 0A A0 27      jmp _if82_exit
5171   27A0             _if82_exit:
5172   27A0             ;; printf("Your orders are as follows:\nDestroy the %d Klingon warships which have",klingons_left); 
5173   27A0 3B 4A 61      mov d, _klingons_left ; $klingons_left
5174   27A3 32            mov bl, [d]
5175   27A4 A7 00         mov bh, 0
5176   27A6 DD            push bl
5177   27A7 26 2D 66      mov b, _s61 ; "Your orders are as follows:\nDestroy the %d Klingon warships which have"
5178   27AA FD AB         swp b
5179   27AC D8            push b
5180   27AD 07 D1 05      call printf
5181   27B0 51 03 00      add sp, 3
5182   27B3             ;; printf("invaded\n the galaxy before they can attack Federation Headquarters\n"); 
5183   27B3 26 74 66      mov b, _s62 ; "invaded\n the galaxy before they can attack Federation Headquarters\n"
5184   27B6 FD AB         swp b
5185   27B8 D8            push b
5186   27B9 07 D1 05      call printf
5187   27BC 51 02 00      add sp, 2
5188   27BF             ;; printf(" on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy",  
5189   27BF 3B 69 62      mov d, _plural_2_data ; $plural_2
5190   27C2 2D            mov b, d
5191   27C3 FD AB         swp b
5192   27C5 D8            push b
5193   27C6 3B 75 60      mov d, _starbases_left ; $starbases_left
5194   27C9 32            mov bl, [d]
5195   27CA A7 00         mov bh, 0
5196   27CC DD            push bl
5197   27CD 3B 6B 62      mov d, _plural_data ; $plural
5198   27D0 2D            mov b, d
5199   27D1 FD AB         swp b
5200   27D3 D8            push b
5201   27D4 3B 56 61      mov d, _time_up ; $time_up
5202   27D7 2A            mov b, [d]
5203   27D8 FD AB         swp b
5204   27DA D8            push b
5205   27DB 3B 54 61      mov d, _time_start ; $time_start
5206   27DE 2A            mov b, [d]
5207   27DF             ; START TERMS
5208   27DF D7            push a
5209   27E0 11            mov a, b
5210   27E1 3B 56 61      mov d, _time_up ; $time_up
5211   27E4 2A            mov b, [d]
5212   27E5 56            add b, a
5213   27E6 E4            pop a
5214   27E7             ; END TERMS
5215   27E7 FD AB         swp b
5216   27E9 D8            push b
5217   27EA 26 B8 66      mov b, _s63 ; " on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy"
5218   27ED FD AB         swp b
5219   27EF D8            push b
5220   27F0 07 D1 05      call printf
5221   27F3 51 0B 00      add sp, 11
5222   27F6             ;; printf(" for resupplying your ship.\n\n Hit any key to accept command. "); 
5223   27F6 26 07 67      mov b, _s64 ; " for resupplying your ship.\n\n Hit any key to accept command. "
5224   27F9 FD AB         swp b
5225   27FB D8            push b
5226   27FC 07 D1 05      call printf
5227   27FF 51 02 00      add sp, 2
5228   2802             ;; getchar(); 
5229   2802 07 08 13      call getchar
5230   2805 F9            leave
5231   2806 09            ret
5232   2807             
5233   2807             place_ship:
5234   2807 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5235   280A             ;; quad[FROM_FIXED00(ship_y) - 1][FROM_FIXED00(ship_x) - 1] =  		4     ; 
5236   280A 3B 72 61      mov d, _quad_data ; $quad
5237   280D D7            push a
5238   280E DA            push d
5239   280F 3B 6C 61      mov d, _ship_y ; $ship_y
5240   2812 2A            mov b, [d]
5241   2813 FD AB         swp b
5242   2815 D8            push b
5243   2816 07 0B 1D      call FROM_FIXED00
5244   2819 51 02 00      add sp, 2
5245   281C             ; START TERMS
5246   281C D7            push a
5247   281D 11            mov a, b
5248   281E 26 01 00      mov b, $1
5249   2821 60            sub a, b
5250   2822 27            mov b, a
5251   2823 E4            pop a
5252   2824             ; END TERMS
5253   2824 E7            pop d
5254   2825 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
5255   2829 DA            push d
5256   282A 3B 6E 61      mov d, _ship_x ; $ship_x
5257   282D 2A            mov b, [d]
5258   282E FD AB         swp b
5259   2830 D8            push b
5260   2831 07 0B 1D      call FROM_FIXED00
5261   2834 51 02 00      add sp, 2
5262   2837             ; START TERMS
5263   2837 D7            push a
5264   2838 11            mov a, b
5265   2839 26 01 00      mov b, $1
5266   283C 60            sub a, b
5267   283D 27            mov b, a
5268   283E E4            pop a
5269   283F             ; END TERMS
5270   283F E7            pop d
5271   2840 5A            add d, b
5272   2841 E4            pop a
5273   2842 DA            push d
5274   2843 26 04 00      mov b, $4
5275   2846 E7            pop d
5276   2847 FD 3E         mov [d], bl
5277   2849 F9            leave
5278   284A 09            ret
5279   284B             
5280   284B             new_quadrant:
5281   284B F8 00 00      enter 0 ; (push bp; mov bp, sp)
5282   284E             ; $i 
5283   284E             ; $tmp 
5284   284E             ; $k 
5285   284E 52 06 00      sub sp, 6
5286   2851             ;; k = &kdata; 
5287   2851 FA FB FF      lea d, [bp + -5] ; $k
5288   2854 DA            push d
5289   2855 3B 3C 61      mov d, _kdata_data ; $kdata
5290   2858 2D            mov b, d
5291   2859 E7            pop d
5292   285A FD 43         mov [d], b
5293   285C             ;; klingons = 0; 
5294   285C 3B 48 61      mov d, _klingons ; $klingons
5295   285F DA            push d
5296   2860 26 00 00      mov b, $0
5297   2863 E7            pop d
5298   2864 FD 3E         mov [d], bl
5299   2866             ;; starbases = 0; 
5300   2866 3B 72 60      mov d, _starbases ; $starbases
5301   2869 DA            push d
5302   286A 26 00 00      mov b, $0
5303   286D E7            pop d
5304   286E FD 3E         mov [d], bl
5305   2870             ;; stars = 0; 
5306   2870 3B 53 61      mov d, _stars ; $stars
5307   2873 DA            push d
5308   2874 26 00 00      mov b, $0
5309   2877 E7            pop d
5310   2878 FD 3E         mov [d], bl
5311   287A             ;; d4 = get_rand(50) - 1; 
5312   287A 3B 6A 61      mov d, _d4 ; $d4
5313   287D DA            push d
5314   287E 26 32 00      mov b, $32
5315   2881 FD AB         swp b
5316   2883 D8            push b
5317   2884 07 1C 1D      call get_rand
5318   2887 51 02 00      add sp, 2
5319   288A             ; START TERMS
5320   288A D7            push a
5321   288B 11            mov a, b
5322   288C 26 01 00      mov b, $1
5323   288F 60            sub a, b
5324   2890 27            mov b, a
5325   2891 E4            pop a
5326   2892             ; END TERMS
5327   2892 E7            pop d
5328   2893 FD 43         mov [d], b
5329   2895             ;; map[quad_y][quad_x] = map[quad_y][quad_x] |   0x1000		/* Set if this sector was mapped */          ; 
5330   2895 3B 9A 60      mov d, _map_data ; $map
5331   2898 D7            push a
5332   2899 DA            push d
5333   289A 3B 4D 61      mov d, _quad_y ; $quad_y
5334   289D 2A            mov b, [d]
5335   289E E7            pop d
5336   289F FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5337   28A3 DA            push d
5338   28A4 3B 4F 61      mov d, _quad_x ; $quad_x
5339   28A7 2A            mov b, [d]
5340   28A8 E7            pop d
5341   28A9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5342   28AD E4            pop a
5343   28AE DA            push d
5344   28AF 3B 9A 60      mov d, _map_data ; $map
5345   28B2 D7            push a
5346   28B3 DA            push d
5347   28B4 3B 4D 61      mov d, _quad_y ; $quad_y
5348   28B7 2A            mov b, [d]
5349   28B8 E7            pop d
5350   28B9 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5351   28BD DA            push d
5352   28BE 3B 4F 61      mov d, _quad_x ; $quad_x
5353   28C1 2A            mov b, [d]
5354   28C2 E7            pop d
5355   28C3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5356   28C7 E4            pop a
5357   28C8 2A            mov b, [d]
5358   28C9 D7            push a
5359   28CA 11            mov a, b
5360   28CB 26 00 10      mov b, $1000
5361   28CE FD 70         or b, a ; |
5362   28D0 E4            pop a
5363   28D1 E7            pop d
5364   28D2 FD 43         mov [d], b
5365   28D4             ;; if (quad_y >= 1 && quad_y <= 8 && quad_x >= 1 && quad_x <= 8) { 
5366   28D4             _if83_cond:
5367   28D4 3B 4D 61      mov d, _quad_y ; $quad_y
5368   28D7 2A            mov b, [d]
5369   28D8             ; START RELATIONAL
5370   28D8 D7            push a
5371   28D9 11            mov a, b
5372   28DA 26 01 00      mov b, $1
5373   28DD B0            cmp a, b
5374   28DE FD 80         sge ; >=
5375   28E0 E4            pop a
5376   28E1             ; END RELATIONAL
5377   28E1 D7            push a
5378   28E2 11            mov a, b
5379   28E3 3B 4D 61      mov d, _quad_y ; $quad_y
5380   28E6 2A            mov b, [d]
5381   28E7             ; START RELATIONAL
5382   28E7 D7            push a
5383   28E8 11            mov a, b
5384   28E9 26 08 00      mov b, $8
5385   28EC B0            cmp a, b
5386   28ED FD 73         slt ; <= (signed)
5387   28EF E4            pop a
5388   28F0             ; END RELATIONAL
5389   28F0 FD A7         sand a, b
5390   28F2 11            mov a, b
5391   28F3 3B 4F 61      mov d, _quad_x ; $quad_x
5392   28F6 2A            mov b, [d]
5393   28F7             ; START RELATIONAL
5394   28F7 D7            push a
5395   28F8 11            mov a, b
5396   28F9 26 01 00      mov b, $1
5397   28FC B0            cmp a, b
5398   28FD FD 80         sge ; >=
5399   28FF E4            pop a
5400   2900             ; END RELATIONAL
5401   2900 FD A7         sand a, b
5402   2902 11            mov a, b
5403   2903 3B 4F 61      mov d, _quad_x ; $quad_x
5404   2906 2A            mov b, [d]
5405   2907             ; START RELATIONAL
5406   2907 D7            push a
5407   2908 11            mov a, b
5408   2909 26 08 00      mov b, $8
5409   290C B0            cmp a, b
5410   290D FD 73         slt ; <= (signed)
5411   290F E4            pop a
5412   2910             ; END RELATIONAL
5413   2910 FD A7         sand a, b
5414   2912 E4            pop a
5415   2913 C0 00 00      cmp b, 0
5416   2916 C6 82 29      je _if83_exit
5417   2919             _if83_true:
5418   2919             ;; quadrant_name(0, quad_y, quad_x); 
5419   2919 3B 4F 61      mov d, _quad_x ; $quad_x
5420   291C 2A            mov b, [d]
5421   291D DD            push bl
5422   291E 3B 4D 61      mov d, _quad_y ; $quad_y
5423   2921 2A            mov b, [d]
5424   2922 DD            push bl
5425   2923 26 00 00      mov b, $0
5426   2926 DD            push bl
5427   2927 07 62 5D      call quadrant_name
5428   292A 51 03 00      add sp, 3
5429   292D             ;; if (TO_FIXED(time_start) != stardate) 
5430   292D             _if84_cond:
5431   292D 3B 54 61      mov d, _time_start ; $time_start
5432   2930 2A            mov b, [d]
5433   2931 FD AB         swp b
5434   2933 D8            push b
5435   2934 07 D6 1C      call TO_FIXED
5436   2937 51 02 00      add sp, 2
5437   293A             ; START RELATIONAL
5438   293A D7            push a
5439   293B 11            mov a, b
5440   293C 3B 70 61      mov d, _stardate ; $stardate
5441   293F 2A            mov b, [d]
5442   2940 B0            cmp a, b
5443   2941 FD 72         sneq ; !=
5444   2943 E4            pop a
5445   2944             ; END RELATIONAL
5446   2944 C0 00 00      cmp b, 0
5447   2947 C6 60 29      je _if84_else
5448   294A             _if84_true:
5449   294A             ;; printf("Now entering %s quadrant...\n\n", quadname); 
5450   294A 3B B2 61      mov d, _quadname_data ; $quadname
5451   294D 2D            mov b, d
5452   294E FD AB         swp b
5453   2950 D8            push b
5454   2951 26 45 67      mov b, _s65 ; "Now entering %s quadrant...\n\n"
5455   2954 FD AB         swp b
5456   2956 D8            push b
5457   2957 07 D1 05      call printf
5458   295A 51 04 00      add sp, 4
5459   295D 0A 7F 29      jmp _if84_exit
5460   2960             _if84_else:
5461   2960             ;; puts("\nYour mission begins with your starship located"); 
5462   2960 26 63 67      mov b, _s66 ; "\nYour mission begins with your starship located"
5463   2963 FD AB         swp b
5464   2965 D8            push b
5465   2966 07 31 13      call puts
5466   2969 51 02 00      add sp, 2
5467   296C             ;; printf("in the galactic quadrant %s.\n\n", quadname); 
5468   296C 3B B2 61      mov d, _quadname_data ; $quadname
5469   296F 2D            mov b, d
5470   2970 FD AB         swp b
5471   2972 D8            push b
5472   2973 26 93 67      mov b, _s67 ; "in the galactic quadrant %s.\n\n"
5473   2976 FD AB         swp b
5474   2978 D8            push b
5475   2979 07 D1 05      call printf
5476   297C 51 04 00      add sp, 4
5477   297F             _if84_exit:
5478   297F 0A 82 29      jmp _if83_exit
5479   2982             _if83_exit:
5480   2982             ;; tmp = map[quad_y][quad_x]; 
5481   2982 FA FD FF      lea d, [bp + -3] ; $tmp
5482   2985 DA            push d
5483   2986 3B 9A 60      mov d, _map_data ; $map
5484   2989 D7            push a
5485   298A DA            push d
5486   298B 3B 4D 61      mov d, _quad_y ; $quad_y
5487   298E 2A            mov b, [d]
5488   298F E7            pop d
5489   2990 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5490   2994 DA            push d
5491   2995 3B 4F 61      mov d, _quad_x ; $quad_x
5492   2998 2A            mov b, [d]
5493   2999 E7            pop d
5494   299A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5495   299E E4            pop a
5496   299F 2A            mov b, [d]
5497   29A0 E7            pop d
5498   29A1 FD 43         mov [d], b
5499   29A3             ;; klingons = (tmp >> 8) & 0x0F; 
5500   29A3 3B 48 61      mov d, _klingons ; $klingons
5501   29A6 DA            push d
5502   29A7 FA FD FF      lea d, [bp + -3] ; $tmp
5503   29AA 2A            mov b, [d]
5504   29AB             ; START SHIFT
5505   29AB D7            push a
5506   29AC 11            mov a, b
5507   29AD 26 08 00      mov b, $8
5508   29B0 FD 39         mov c, b
5509   29B2 A1            shr a, cl
5510   29B3 27            mov b, a
5511   29B4 E4            pop a
5512   29B5             ; END SHIFT
5513   29B5 D7            push a
5514   29B6 11            mov a, b
5515   29B7 26 0F 00      mov b, $f
5516   29BA FD 92         and b, a ; &
5517   29BC E4            pop a
5518   29BD E7            pop d
5519   29BE FD 3E         mov [d], bl
5520   29C0             ;; starbases = (tmp >> 4) & 0x0F; 
5521   29C0 3B 72 60      mov d, _starbases ; $starbases
5522   29C3 DA            push d
5523   29C4 FA FD FF      lea d, [bp + -3] ; $tmp
5524   29C7 2A            mov b, [d]
5525   29C8             ; START SHIFT
5526   29C8 D7            push a
5527   29C9 11            mov a, b
5528   29CA 26 04 00      mov b, $4
5529   29CD FD 39         mov c, b
5530   29CF A1            shr a, cl
5531   29D0 27            mov b, a
5532   29D1 E4            pop a
5533   29D2             ; END SHIFT
5534   29D2 D7            push a
5535   29D3 11            mov a, b
5536   29D4 26 0F 00      mov b, $f
5537   29D7 FD 92         and b, a ; &
5538   29D9 E4            pop a
5539   29DA E7            pop d
5540   29DB FD 3E         mov [d], bl
5541   29DD             ;; stars = tmp & 0x0F; 
5542   29DD 3B 53 61      mov d, _stars ; $stars
5543   29E0 DA            push d
5544   29E1 FA FD FF      lea d, [bp + -3] ; $tmp
5545   29E4 2A            mov b, [d]
5546   29E5 D7            push a
5547   29E6 11            mov a, b
5548   29E7 26 0F 00      mov b, $f
5549   29EA FD 92         and b, a ; &
5550   29EC E4            pop a
5551   29ED E7            pop d
5552   29EE FD 3E         mov [d], bl
5553   29F0             ;; if (klingons > 0) { 
5554   29F0             _if85_cond:
5555   29F0 3B 48 61      mov d, _klingons ; $klingons
5556   29F3 32            mov bl, [d]
5557   29F4 A7 00         mov bh, 0
5558   29F6             ; START RELATIONAL
5559   29F6 D7            push a
5560   29F7 11            mov a, b
5561   29F8 26 00 00      mov b, $0
5562   29FB B0            cmp a, b
5563   29FC FD 81         sgu ; > (unsigned)
5564   29FE E4            pop a
5565   29FF             ; END RELATIONAL
5566   29FF C0 00 00      cmp b, 0
5567   2A02 C6 36 2A      je _if85_exit
5568   2A05             _if85_true:
5569   2A05             ;; printf("Combat Area  Condition Red\n"); 
5570   2A05 26 B2 67      mov b, _s68 ; "Combat Area  Condition Red\n"
5571   2A08 FD AB         swp b
5572   2A0A D8            push b
5573   2A0B 07 D1 05      call printf
5574   2A0E 51 02 00      add sp, 2
5575   2A11             ;; if (shield < 200) 
5576   2A11             _if86_cond:
5577   2A11 3B 51 61      mov d, _shield ; $shield
5578   2A14 2A            mov b, [d]
5579   2A15             ; START RELATIONAL
5580   2A15 D7            push a
5581   2A16 11            mov a, b
5582   2A17 26 C8 00      mov b, $c8
5583   2A1A B0            cmp a, b
5584   2A1B FD 73         slt ; < (signed)
5585   2A1D E4            pop a
5586   2A1E             ; END RELATIONAL
5587   2A1E C0 00 00      cmp b, 0
5588   2A21 C6 33 2A      je _if86_exit
5589   2A24             _if86_true:
5590   2A24             ;; printf("Shields Dangerously Low\n"); 
5591   2A24 26 CE 67      mov b, _s69 ; "Shields Dangerously Low\n"
5592   2A27 FD AB         swp b
5593   2A29 D8            push b
5594   2A2A 07 D1 05      call printf
5595   2A2D 51 02 00      add sp, 2
5596   2A30 0A 33 2A      jmp _if86_exit
5597   2A33             _if86_exit:
5598   2A33 0A 36 2A      jmp _if85_exit
5599   2A36             _if85_exit:
5600   2A36             ;; for (i = 1; i <= 3; i++) { 
5601   2A36             _for87_init:
5602   2A36 FA FF FF      lea d, [bp + -1] ; $i
5603   2A39 DA            push d
5604   2A3A 26 01 00      mov b, $1
5605   2A3D E7            pop d
5606   2A3E FD 43         mov [d], b
5607   2A40             _for87_cond:
5608   2A40 FA FF FF      lea d, [bp + -1] ; $i
5609   2A43 2A            mov b, [d]
5610   2A44             ; START RELATIONAL
5611   2A44 D7            push a
5612   2A45 11            mov a, b
5613   2A46 26 03 00      mov b, $3
5614   2A49 B0            cmp a, b
5615   2A4A FD 73         slt ; <= (signed)
5616   2A4C E4            pop a
5617   2A4D             ; END RELATIONAL
5618   2A4D C0 00 00      cmp b, 0
5619   2A50 C6 9F 2A      je _for87_exit
5620   2A53             _for87_block:
5621   2A53             ;; k->y = 0; 
5622   2A53 FA FB FF      lea d, [bp + -5] ; $k
5623   2A56 FD 2A         mov d, [d]
5624   2A58 58 00 00      add d, 0
5625   2A5B DA            push d
5626   2A5C 26 00 00      mov b, $0
5627   2A5F E7            pop d
5628   2A60 FD 3E         mov [d], bl
5629   2A62             ;; k->x = 0; 
5630   2A62 FA FB FF      lea d, [bp + -5] ; $k
5631   2A65 FD 2A         mov d, [d]
5632   2A67 58 01 00      add d, 1
5633   2A6A DA            push d
5634   2A6B 26 00 00      mov b, $0
5635   2A6E E7            pop d
5636   2A6F FD 3E         mov [d], bl
5637   2A71             ;; k->energy = 0; 
5638   2A71 FA FB FF      lea d, [bp + -5] ; $k
5639   2A74 FD 2A         mov d, [d]
5640   2A76 58 02 00      add d, 2
5641   2A79 DA            push d
5642   2A7A 26 00 00      mov b, $0
5643   2A7D E7            pop d
5644   2A7E FD 43         mov [d], b
5645   2A80             ;; k++; 
5646   2A80 FA FB FF      lea d, [bp + -5] ; $k
5647   2A83 2A            mov b, [d]
5648   2A84 D8            push b
5649   2A85 FD 77         inc b
5650   2A87 FD 77         inc b
5651   2A89 FA FB FF      lea d, [bp + -5] ; $k
5652   2A8C FD 43         mov [d], b
5653   2A8E E5            pop b
5654   2A8F             _for87_update:
5655   2A8F FA FF FF      lea d, [bp + -1] ; $i
5656   2A92 2A            mov b, [d]
5657   2A93 D8            push b
5658   2A94 FD 77         inc b
5659   2A96 FA FF FF      lea d, [bp + -1] ; $i
5660   2A99 FD 43         mov [d], b
5661   2A9B E5            pop b
5662   2A9C 0A 40 2A      jmp _for87_cond
5663   2A9F             _for87_exit:
5664   2A9F             ;; memset(quad,  		0      , 64); 
5665   2A9F 26 40 00      mov b, $40
5666   2AA2 FD AB         swp b
5667   2AA4 D8            push b
5668   2AA5 26 00 00      mov b, $0
5669   2AA8 DD            push bl
5670   2AA9 3B 72 61      mov d, _quad_data ; $quad
5671   2AAC 2D            mov b, d
5672   2AAD FD AB         swp b
5673   2AAF D8            push b
5674   2AB0 07 35 17      call memset
5675   2AB3 51 05 00      add sp, 5
5676   2AB6             ;; place_ship(); 
5677   2AB6 07 07 28      call place_ship
5678   2AB9             ;; if (klingons > 0) { 
5679   2AB9             _if88_cond:
5680   2AB9 3B 48 61      mov d, _klingons ; $klingons
5681   2ABC 32            mov bl, [d]
5682   2ABD A7 00         mov bh, 0
5683   2ABF             ; START RELATIONAL
5684   2ABF D7            push a
5685   2AC0 11            mov a, b
5686   2AC1 26 00 00      mov b, $0
5687   2AC4 B0            cmp a, b
5688   2AC5 FD 81         sgu ; > (unsigned)
5689   2AC7 E4            pop a
5690   2AC8             ; END RELATIONAL
5691   2AC8 C0 00 00      cmp b, 0
5692   2ACB C6 60 2B      je _if88_exit
5693   2ACE             _if88_true:
5694   2ACE             ;; k = kdata; 
5695   2ACE FA FB FF      lea d, [bp + -5] ; $k
5696   2AD1 DA            push d
5697   2AD2 3B 3C 61      mov d, _kdata_data ; $kdata
5698   2AD5 2D            mov b, d
5699   2AD6 E7            pop d
5700   2AD7 FD 43         mov [d], b
5701   2AD9             ;; for (i = 0; i < klingons; i++) { 
5702   2AD9             _for89_init:
5703   2AD9 FA FF FF      lea d, [bp + -1] ; $i
5704   2ADC DA            push d
5705   2ADD 26 00 00      mov b, $0
5706   2AE0 E7            pop d
5707   2AE1 FD 43         mov [d], b
5708   2AE3             _for89_cond:
5709   2AE3 FA FF FF      lea d, [bp + -1] ; $i
5710   2AE6 2A            mov b, [d]
5711   2AE7             ; START RELATIONAL
5712   2AE7 D7            push a
5713   2AE8 11            mov a, b
5714   2AE9 3B 48 61      mov d, _klingons ; $klingons
5715   2AEC 32            mov bl, [d]
5716   2AED A7 00         mov bh, 0
5717   2AEF B0            cmp a, b
5718   2AF0 FD 73         slt ; < (signed)
5719   2AF2 E4            pop a
5720   2AF3             ; END RELATIONAL
5721   2AF3 C0 00 00      cmp b, 0
5722   2AF6 C6 5D 2B      je _for89_exit
5723   2AF9             _for89_block:
5724   2AF9             ;; find_set_empty_place( 	3        , k->y, k->x); 
5725   2AF9 FA FB FF      lea d, [bp + -5] ; $k
5726   2AFC FD 2A         mov d, [d]
5727   2AFE 58 01 00      add d, 1
5728   2B01 32            mov bl, [d]
5729   2B02 A7 00         mov bh, 0
5730   2B04 FD AB         swp b
5731   2B06 D8            push b
5732   2B07 FA FB FF      lea d, [bp + -5] ; $k
5733   2B0A FD 2A         mov d, [d]
5734   2B0C 58 00 00      add d, 0
5735   2B0F 32            mov bl, [d]
5736   2B10 A7 00         mov bh, 0
5737   2B12 FD AB         swp b
5738   2B14 D8            push b
5739   2B15 26 03 00      mov b, $3
5740   2B18 DD            push bl
5741   2B19 07 5D 5C      call find_set_empty_place
5742   2B1C 51 05 00      add sp, 5
5743   2B1F             ;; k->energy = 100 + get_rand(200); 
5744   2B1F FA FB FF      lea d, [bp + -5] ; $k
5745   2B22 FD 2A         mov d, [d]
5746   2B24 58 02 00      add d, 2
5747   2B27 DA            push d
5748   2B28 26 64 00      mov b, $64
5749   2B2B             ; START TERMS
5750   2B2B D7            push a
5751   2B2C 11            mov a, b
5752   2B2D 26 C8 00      mov b, $c8
5753   2B30 FD AB         swp b
5754   2B32 D8            push b
5755   2B33 07 1C 1D      call get_rand
5756   2B36 51 02 00      add sp, 2
5757   2B39 56            add b, a
5758   2B3A E4            pop a
5759   2B3B             ; END TERMS
5760   2B3B E7            pop d
5761   2B3C FD 43         mov [d], b
5762   2B3E             ;; k++; 
5763   2B3E FA FB FF      lea d, [bp + -5] ; $k
5764   2B41 2A            mov b, [d]
5765   2B42 D8            push b
5766   2B43 FD 77         inc b
5767   2B45 FD 77         inc b
5768   2B47 FA FB FF      lea d, [bp + -5] ; $k
5769   2B4A FD 43         mov [d], b
5770   2B4C E5            pop b
5771   2B4D             _for89_update:
5772   2B4D FA FF FF      lea d, [bp + -1] ; $i
5773   2B50 2A            mov b, [d]
5774   2B51 D8            push b
5775   2B52 FD 77         inc b
5776   2B54 FA FF FF      lea d, [bp + -1] ; $i
5777   2B57 FD 43         mov [d], b
5778   2B59 E5            pop b
5779   2B5A 0A E3 2A      jmp _for89_cond
5780   2B5D             _for89_exit:
5781   2B5D 0A 60 2B      jmp _if88_exit
5782   2B60             _if88_exit:
5783   2B60             ;; if (starbases > 0) 
5784   2B60             _if90_cond:
5785   2B60 3B 72 60      mov d, _starbases ; $starbases
5786   2B63 32            mov bl, [d]
5787   2B64 A7 00         mov bh, 0
5788   2B66             ; START RELATIONAL
5789   2B66 D7            push a
5790   2B67 11            mov a, b
5791   2B68 26 00 00      mov b, $0
5792   2B6B B0            cmp a, b
5793   2B6C FD 7F         sgt ; >
5794   2B6E E4            pop a
5795   2B6F             ; END RELATIONAL
5796   2B6F C0 00 00      cmp b, 0
5797   2B72 C6 90 2B      je _if90_exit
5798   2B75             _if90_true:
5799   2B75             ;; find_set_empty_place( 		2     , &base_y, &base_x); 
5800   2B75 3B 74 60      mov d, _base_x ; $base_x
5801   2B78 2D            mov b, d
5802   2B79 FD AB         swp b
5803   2B7B D8            push b
5804   2B7C 3B 73 60      mov d, _base_y ; $base_y
5805   2B7F 2D            mov b, d
5806   2B80 FD AB         swp b
5807   2B82 D8            push b
5808   2B83 26 02 00      mov b, $2
5809   2B86 DD            push bl
5810   2B87 07 5D 5C      call find_set_empty_place
5811   2B8A 51 05 00      add sp, 5
5812   2B8D 0A 90 2B      jmp _if90_exit
5813   2B90             _if90_exit:
5814   2B90             ;; for (i = 1; i <= stars; i++) 
5815   2B90             _for91_init:
5816   2B90 FA FF FF      lea d, [bp + -1] ; $i
5817   2B93 DA            push d
5818   2B94 26 01 00      mov b, $1
5819   2B97 E7            pop d
5820   2B98 FD 43         mov [d], b
5821   2B9A             _for91_cond:
5822   2B9A FA FF FF      lea d, [bp + -1] ; $i
5823   2B9D 2A            mov b, [d]
5824   2B9E             ; START RELATIONAL
5825   2B9E D7            push a
5826   2B9F 11            mov a, b
5827   2BA0 3B 53 61      mov d, _stars ; $stars
5828   2BA3 32            mov bl, [d]
5829   2BA4 A7 00         mov bh, 0
5830   2BA6 B0            cmp a, b
5831   2BA7 FD 73         slt ; <= (signed)
5832   2BA9 E4            pop a
5833   2BAA             ; END RELATIONAL
5834   2BAA C0 00 00      cmp b, 0
5835   2BAD C6 D6 2B      je _for91_exit
5836   2BB0             _for91_block:
5837   2BB0             ;; find_set_empty_place( 		1     ,   0   ,   0   ); 
5838   2BB0 26 00 00      mov b, $0
5839   2BB3 FD AB         swp b
5840   2BB5 D8            push b
5841   2BB6 26 00 00      mov b, $0
5842   2BB9 FD AB         swp b
5843   2BBB D8            push b
5844   2BBC 26 01 00      mov b, $1
5845   2BBF DD            push bl
5846   2BC0 07 5D 5C      call find_set_empty_place
5847   2BC3 51 05 00      add sp, 5
5848   2BC6             _for91_update:
5849   2BC6 FA FF FF      lea d, [bp + -1] ; $i
5850   2BC9 2A            mov b, [d]
5851   2BCA D8            push b
5852   2BCB FD 77         inc b
5853   2BCD FA FF FF      lea d, [bp + -1] ; $i
5854   2BD0 FD 43         mov [d], b
5855   2BD2 E5            pop b
5856   2BD3 0A 9A 2B      jmp _for91_cond
5857   2BD6             _for91_exit:
5858   2BD6 F9            leave
5859   2BD7 09            ret
5860   2BD8             
5861   2BD8             course_control:
5862   2BD8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5863   2BDB             ; $i 
5864   2BDB             ; $c1 
5865   2BDB             ; $warp 
5866   2BDB             ; $n 
5867   2BDB             ; $c2 
5868   2BDB             ; $c3 
5869   2BDB             ; $c4 
5870   2BDB             ; $z1 
5871   2BDB             ; $z2 
5872   2BDB             ; $x1 
5873   2BDB             ; $x2 
5874   2BDB             ; $x 
5875   2BDB             ; $y 
5876   2BDB             ; $outside 
5877   2BDB 19 00         mov al, $0
5878   2BDD 40 E6 FF      mov [bp + -26], al
5879   2BE0             ; $quad_y_old 
5880   2BE0             ; $quad_x_old 
5881   2BE0 52 1D 00      sub sp, 29
5882   2BE3             ;; puts("Course (0-9): " ); 
5883   2BE3 26 E7 67      mov b, _s70 ; "Course (0-9): "
5884   2BE6 FD AB         swp b
5885   2BE8 D8            push b
5886   2BE9 07 31 13      call puts
5887   2BEC 51 02 00      add sp, 2
5888   2BEF             ;; c1 = input_f00(); 
5889   2BEF FA FD FF      lea d, [bp + -3] ; $c1
5890   2BF2 DA            push d
5891   2BF3 07 42 1E      call input_f00
5892   2BF6 E7            pop d
5893   2BF7 FD 43         mov [d], b
5894   2BF9             ;; if (c1 == 900) 
5895   2BF9             _if92_cond:
5896   2BF9 FA FD FF      lea d, [bp + -3] ; $c1
5897   2BFC 2A            mov b, [d]
5898   2BFD             ; START RELATIONAL
5899   2BFD D7            push a
5900   2BFE 11            mov a, b
5901   2BFF 26 84 03      mov b, $384
5902   2C02 B0            cmp a, b
5903   2C03 FD 71         seq ; ==
5904   2C05 E4            pop a
5905   2C06             ; END RELATIONAL
5906   2C06 C0 00 00      cmp b, 0
5907   2C09 C6 19 2C      je _if92_exit
5908   2C0C             _if92_true:
5909   2C0C             ;; c1 = 100; 
5910   2C0C FA FD FF      lea d, [bp + -3] ; $c1
5911   2C0F DA            push d
5912   2C10 26 64 00      mov b, $64
5913   2C13 E7            pop d
5914   2C14 FD 43         mov [d], b
5915   2C16 0A 19 2C      jmp _if92_exit
5916   2C19             _if92_exit:
5917   2C19             ;; if (c1 < 0 || c1 > 900) { 
5918   2C19             _if93_cond:
5919   2C19 FA FD FF      lea d, [bp + -3] ; $c1
5920   2C1C 2A            mov b, [d]
5921   2C1D             ; START RELATIONAL
5922   2C1D D7            push a
5923   2C1E 11            mov a, b
5924   2C1F 26 00 00      mov b, $0
5925   2C22 B0            cmp a, b
5926   2C23 FD 73         slt ; < (signed)
5927   2C25 E4            pop a
5928   2C26             ; END RELATIONAL
5929   2C26 D7            push a
5930   2C27 11            mov a, b
5931   2C28 FA FD FF      lea d, [bp + -3] ; $c1
5932   2C2B 2A            mov b, [d]
5933   2C2C             ; START RELATIONAL
5934   2C2C D7            push a
5935   2C2D 11            mov a, b
5936   2C2E 26 84 03      mov b, $384
5937   2C31 B0            cmp a, b
5938   2C32 FD 7F         sgt ; >
5939   2C34 E4            pop a
5940   2C35             ; END RELATIONAL
5941   2C35 FD A8         sor a, b ; ||
5942   2C37 E4            pop a
5943   2C38 C0 00 00      cmp b, 0
5944   2C3B C6 56 2C      je _if93_exit
5945   2C3E             _if93_true:
5946   2C3E             ;; printf("Lt. Sulu%s", inc_1); 
5947   2C3E 3B E6 61      mov d, _inc_1 ; $inc_1
5948   2C41 2A            mov b, [d]
5949   2C42 FD AB         swp b
5950   2C44 D8            push b
5951   2C45 26 F6 67      mov b, _s71 ; "Lt. Sulu%s"
5952   2C48 FD AB         swp b
5953   2C4A D8            push b
5954   2C4B 07 D1 05      call printf
5955   2C4E 51 04 00      add sp, 4
5956   2C51             ;; return; 
5957   2C51 F9            leave
5958   2C52 09            ret
5959   2C53 0A 56 2C      jmp _if93_exit
5960   2C56             _if93_exit:
5961   2C56             ;; if (damage[1] < 0) 
5962   2C56             _if94_cond:
5963   2C56 3B 58 61      mov d, _damage_data ; $damage
5964   2C59 D7            push a
5965   2C5A DA            push d
5966   2C5B 26 01 00      mov b, $1
5967   2C5E E7            pop d
5968   2C5F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5969   2C63 E4            pop a
5970   2C64 2A            mov b, [d]
5971   2C65             ; START RELATIONAL
5972   2C65 D7            push a
5973   2C66 11            mov a, b
5974   2C67 26 00 00      mov b, $0
5975   2C6A B0            cmp a, b
5976   2C6B FD 73         slt ; < (signed)
5977   2C6D E4            pop a
5978   2C6E             ; END RELATIONAL
5979   2C6E C0 00 00      cmp b, 0
5980   2C71 C6 8A 2C      je _if94_exit
5981   2C74             _if94_true:
5982   2C74             ;; strcpy(warpmax, "0.2"); 
5983   2C74 26 01 68      mov b, _s72 ; "0.2"
5984   2C77 FD AB         swp b
5985   2C79 D8            push b
5986   2C7A 3B 6F 62      mov d, _warpmax_data ; $warpmax
5987   2C7D 2D            mov b, d
5988   2C7E FD AB         swp b
5989   2C80 D8            push b
5990   2C81 07 14 04      call strcpy
5991   2C84 51 04 00      add sp, 4
5992   2C87 0A 8A 2C      jmp _if94_exit
5993   2C8A             _if94_exit:
5994   2C8A             ;; printf("Warp Factor (0-%s): ", warpmax); 
5995   2C8A 3B 6F 62      mov d, _warpmax_data ; $warpmax
5996   2C8D 2D            mov b, d
5997   2C8E FD AB         swp b
5998   2C90 D8            push b
5999   2C91 26 05 68      mov b, _s73 ; "Warp Factor (0-%s): "
6000   2C94 FD AB         swp b
6001   2C96 D8            push b
6002   2C97 07 D1 05      call printf
6003   2C9A 51 04 00      add sp, 4
6004   2C9D             ;; warp = input_f00(); 
6005   2C9D FA FB FF      lea d, [bp + -5] ; $warp
6006   2CA0 DA            push d
6007   2CA1 07 42 1E      call input_f00
6008   2CA4 E7            pop d
6009   2CA5 FD 43         mov [d], b
6010   2CA7             ;; if (damage[1] < 0 && warp > 20) { 
6011   2CA7             _if95_cond:
6012   2CA7 3B 58 61      mov d, _damage_data ; $damage
6013   2CAA D7            push a
6014   2CAB DA            push d
6015   2CAC 26 01 00      mov b, $1
6016   2CAF E7            pop d
6017   2CB0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6018   2CB4 E4            pop a
6019   2CB5 2A            mov b, [d]
6020   2CB6             ; START RELATIONAL
6021   2CB6 D7            push a
6022   2CB7 11            mov a, b
6023   2CB8 26 00 00      mov b, $0
6024   2CBB B0            cmp a, b
6025   2CBC FD 73         slt ; < (signed)
6026   2CBE E4            pop a
6027   2CBF             ; END RELATIONAL
6028   2CBF D7            push a
6029   2CC0 11            mov a, b
6030   2CC1 FA FB FF      lea d, [bp + -5] ; $warp
6031   2CC4 2A            mov b, [d]
6032   2CC5             ; START RELATIONAL
6033   2CC5 D7            push a
6034   2CC6 11            mov a, b
6035   2CC7 26 14 00      mov b, $14
6036   2CCA B0            cmp a, b
6037   2CCB FD 7F         sgt ; >
6038   2CCD E4            pop a
6039   2CCE             ; END RELATIONAL
6040   2CCE FD A7         sand a, b
6041   2CD0 E4            pop a
6042   2CD1 C0 00 00      cmp b, 0
6043   2CD4 C6 E8 2C      je _if95_exit
6044   2CD7             _if95_true:
6045   2CD7             ;; printf("Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"); 
6046   2CD7 26 1A 68      mov b, _s74 ; "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"
6047   2CDA FD AB         swp b
6048   2CDC D8            push b
6049   2CDD 07 D1 05      call printf
6050   2CE0 51 02 00      add sp, 2
6051   2CE3             ;; return; 
6052   2CE3 F9            leave
6053   2CE4 09            ret
6054   2CE5 0A E8 2C      jmp _if95_exit
6055   2CE8             _if95_exit:
6056   2CE8             ;; if (warp <= 0) 
6057   2CE8             _if96_cond:
6058   2CE8 FA FB FF      lea d, [bp + -5] ; $warp
6059   2CEB 2A            mov b, [d]
6060   2CEC             ; START RELATIONAL
6061   2CEC D7            push a
6062   2CED 11            mov a, b
6063   2CEE 26 00 00      mov b, $0
6064   2CF1 B0            cmp a, b
6065   2CF2 FD 73         slt ; <= (signed)
6066   2CF4 E4            pop a
6067   2CF5             ; END RELATIONAL
6068   2CF5 C0 00 00      cmp b, 0
6069   2CF8 C6 00 2D      je _if96_exit
6070   2CFB             _if96_true:
6071   2CFB             ;; return; 
6072   2CFB F9            leave
6073   2CFC 09            ret
6074   2CFD 0A 00 2D      jmp _if96_exit
6075   2D00             _if96_exit:
6076   2D00             ;; if (warp > 800) { 
6077   2D00             _if97_cond:
6078   2D00 FA FB FF      lea d, [bp + -5] ; $warp
6079   2D03 2A            mov b, [d]
6080   2D04             ; START RELATIONAL
6081   2D04 D7            push a
6082   2D05 11            mov a, b
6083   2D06 26 20 03      mov b, $320
6084   2D09 B0            cmp a, b
6085   2D0A FD 7F         sgt ; >
6086   2D0C E4            pop a
6087   2D0D             ; END RELATIONAL
6088   2D0D C0 00 00      cmp b, 0
6089   2D10 C6 34 2D      je _if97_exit
6090   2D13             _if97_true:
6091   2D13             ;; printf("Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n", print100(warp)); 
6092   2D13 FA FB FF      lea d, [bp + -5] ; $warp
6093   2D16 2A            mov b, [d]
6094   2D17 FD AB         swp b
6095   2D19 D8            push b
6096   2D1A 07 FC 1F      call print100
6097   2D1D 51 02 00      add sp, 2
6098   2D20 FD AB         swp b
6099   2D22 D8            push b
6100   2D23 26 50 68      mov b, _s75 ; "Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n"
6101   2D26 FD AB         swp b
6102   2D28 D8            push b
6103   2D29 07 D1 05      call printf
6104   2D2C 51 04 00      add sp, 4
6105   2D2F             ;; return; 
6106   2D2F F9            leave
6107   2D30 09            ret
6108   2D31 0A 34 2D      jmp _if97_exit
6109   2D34             _if97_exit:
6110   2D34             ;; n = warp * 8; 
6111   2D34 FA F9 FF      lea d, [bp + -7] ; $n
6112   2D37 DA            push d
6113   2D38 FA FB FF      lea d, [bp + -5] ; $warp
6114   2D3B 2A            mov b, [d]
6115   2D3C             ; START FACTORS
6116   2D3C D7            push a
6117   2D3D 11            mov a, b
6118   2D3E 26 08 00      mov b, $8
6119   2D41 AC            mul a, b ; *
6120   2D42 11            mov a, b
6121   2D43 27            mov b, a
6122   2D44 E4            pop a
6123   2D45             ; END FACTORS
6124   2D45 E7            pop d
6125   2D46 FD 43         mov [d], b
6126   2D48             ;; n = cint100(n);	 
6127   2D48 FA F9 FF      lea d, [bp + -7] ; $n
6128   2D4B DA            push d
6129   2D4C FA F9 FF      lea d, [bp + -7] ; $n
6130   2D4F 2A            mov b, [d]
6131   2D50 FD AB         swp b
6132   2D52 D8            push b
6133   2D53 07 55 60      call cint100
6134   2D56 51 02 00      add sp, 2
6135   2D59 E7            pop d
6136   2D5A FD 43         mov [d], b
6137   2D5C             ;; if (energy - n < 0) { 
6138   2D5C             _if98_cond:
6139   2D5C 3B 96 60      mov d, _energy ; $energy
6140   2D5F 2A            mov b, [d]
6141   2D60             ; START TERMS
6142   2D60 D7            push a
6143   2D61 11            mov a, b
6144   2D62 FA F9 FF      lea d, [bp + -7] ; $n
6145   2D65 2A            mov b, [d]
6146   2D66 60            sub a, b
6147   2D67 27            mov b, a
6148   2D68 E4            pop a
6149   2D69             ; END TERMS
6150   2D69             ; START RELATIONAL
6151   2D69 D7            push a
6152   2D6A 11            mov a, b
6153   2D6B 26 00 00      mov b, $0
6154   2D6E B0            cmp a, b
6155   2D6F FD 75         slu ; < (unsigned)
6156   2D71 E4            pop a
6157   2D72             ; END RELATIONAL
6158   2D72 C0 00 00      cmp b, 0
6159   2D75 C6 E0 2D      je _if98_exit
6160   2D78             _if98_true:
6161   2D78             ;; printf("Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", print100(warp)); 
6162   2D78 FA FB FF      lea d, [bp + -5] ; $warp
6163   2D7B 2A            mov b, [d]
6164   2D7C FD AB         swp b
6165   2D7E D8            push b
6166   2D7F 07 FC 1F      call print100
6167   2D82 51 02 00      add sp, 2
6168   2D85 FD AB         swp b
6169   2D87 D8            push b
6170   2D88 26 91 68      mov b, _s76 ; "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n"
6171   2D8B FD AB         swp b
6172   2D8D D8            push b
6173   2D8E 07 D1 05      call printf
6174   2D91 51 04 00      add sp, 4
6175   2D94             ;; if (shield >= n && damage[7] >= 0) { 
6176   2D94             _if99_cond:
6177   2D94 3B 51 61      mov d, _shield ; $shield
6178   2D97 2A            mov b, [d]
6179   2D98             ; START RELATIONAL
6180   2D98 D7            push a
6181   2D99 11            mov a, b
6182   2D9A FA F9 FF      lea d, [bp + -7] ; $n
6183   2D9D 2A            mov b, [d]
6184   2D9E B0            cmp a, b
6185   2D9F FD 80         sge ; >=
6186   2DA1 E4            pop a
6187   2DA2             ; END RELATIONAL
6188   2DA2 D7            push a
6189   2DA3 11            mov a, b
6190   2DA4 3B 58 61      mov d, _damage_data ; $damage
6191   2DA7 D7            push a
6192   2DA8 DA            push d
6193   2DA9 26 07 00      mov b, $7
6194   2DAC E7            pop d
6195   2DAD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6196   2DB1 E4            pop a
6197   2DB2 2A            mov b, [d]
6198   2DB3             ; START RELATIONAL
6199   2DB3 D7            push a
6200   2DB4 11            mov a, b
6201   2DB5 26 00 00      mov b, $0
6202   2DB8 B0            cmp a, b
6203   2DB9 FD 80         sge ; >=
6204   2DBB E4            pop a
6205   2DBC             ; END RELATIONAL
6206   2DBC FD A7         sand a, b
6207   2DBE E4            pop a
6208   2DBF C0 00 00      cmp b, 0
6209   2DC2 C6 DB 2D      je _if99_exit
6210   2DC5             _if99_true:
6211   2DC5             ;; printf("Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", shield); 
6212   2DC5 3B 51 61      mov d, _shield ; $shield
6213   2DC8 2A            mov b, [d]
6214   2DC9 FD AB         swp b
6215   2DCB D8            push b
6216   2DCC 26 E4 68      mov b, _s77 ; "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n"
6217   2DCF FD AB         swp b
6218   2DD1 D8            push b
6219   2DD2 07 D1 05      call printf
6220   2DD5 51 04 00      add sp, 4
6221   2DD8 0A DB 2D      jmp _if99_exit
6222   2DDB             _if99_exit:
6223   2DDB             ;; return; 
6224   2DDB F9            leave
6225   2DDC 09            ret
6226   2DDD 0A E0 2D      jmp _if98_exit
6227   2DE0             _if98_exit:
6228   2DE0             ;; klingons_move(); 
6229   2DE0 07 39 56      call klingons_move
6230   2DE3             ;; repair_damage(warp); 
6231   2DE3 FA FB FF      lea d, [bp + -5] ; $warp
6232   2DE6 2A            mov b, [d]
6233   2DE7 FD AB         swp b
6234   2DE9 D8            push b
6235   2DEA 07 B9 59      call repair_damage
6236   2DED 51 02 00      add sp, 2
6237   2DF0             ;; z1 = FROM_FIXED00(ship_y); 
6238   2DF0 FA F1 FF      lea d, [bp + -15] ; $z1
6239   2DF3 DA            push d
6240   2DF4 3B 6C 61      mov d, _ship_y ; $ship_y
6241   2DF7 2A            mov b, [d]
6242   2DF8 FD AB         swp b
6243   2DFA D8            push b
6244   2DFB 07 0B 1D      call FROM_FIXED00
6245   2DFE 51 02 00      add sp, 2
6246   2E01 E7            pop d
6247   2E02 FD 43         mov [d], b
6248   2E04             ;; z2 = FROM_FIXED00(ship_x); 
6249   2E04 FA EF FF      lea d, [bp + -17] ; $z2
6250   2E07 DA            push d
6251   2E08 3B 6E 61      mov d, _ship_x ; $ship_x
6252   2E0B 2A            mov b, [d]
6253   2E0C FD AB         swp b
6254   2E0E D8            push b
6255   2E0F 07 0B 1D      call FROM_FIXED00
6256   2E12 51 02 00      add sp, 2
6257   2E15 E7            pop d
6258   2E16 FD 43         mov [d], b
6259   2E18             ;; quad[z1+-1][z2+-1] =  		0      ; 
6260   2E18 3B 72 61      mov d, _quad_data ; $quad
6261   2E1B D7            push a
6262   2E1C DA            push d
6263   2E1D FA F1 FF      lea d, [bp + -15] ; $z1
6264   2E20 2A            mov b, [d]
6265   2E21             ; START TERMS
6266   2E21 D7            push a
6267   2E22 11            mov a, b
6268   2E23 26 FF FF      mov b, $ffff
6269   2E26 56            add b, a
6270   2E27 E4            pop a
6271   2E28             ; END TERMS
6272   2E28 E7            pop d
6273   2E29 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
6274   2E2D DA            push d
6275   2E2E FA EF FF      lea d, [bp + -17] ; $z2
6276   2E31 2A            mov b, [d]
6277   2E32             ; START TERMS
6278   2E32 D7            push a
6279   2E33 11            mov a, b
6280   2E34 26 FF FF      mov b, $ffff
6281   2E37 56            add b, a
6282   2E38 E4            pop a
6283   2E39             ; END TERMS
6284   2E39 E7            pop d
6285   2E3A 5A            add d, b
6286   2E3B E4            pop a
6287   2E3C DA            push d
6288   2E3D 26 00 00      mov b, $0
6289   2E40 E7            pop d
6290   2E41 FD 3E         mov [d], bl
6291   2E43             ;; c2 = FROM_FIXED00(c1);	/* Integer part */ 
6292   2E43 FA F7 FF      lea d, [bp + -9] ; $c2
6293   2E46 DA            push d
6294   2E47 FA FD FF      lea d, [bp + -3] ; $c1
6295   2E4A 2A            mov b, [d]
6296   2E4B FD AB         swp b
6297   2E4D D8            push b
6298   2E4E 07 0B 1D      call FROM_FIXED00
6299   2E51 51 02 00      add sp, 2
6300   2E54 E7            pop d
6301   2E55 FD 43         mov [d], b
6302   2E57             ;; c3 = c2 + 1;		/* Next integer part */ 
6303   2E57 FA F5 FF      lea d, [bp + -11] ; $c3
6304   2E5A DA            push d
6305   2E5B FA F7 FF      lea d, [bp + -9] ; $c2
6306   2E5E 2A            mov b, [d]
6307   2E5F             ; START TERMS
6308   2E5F D7            push a
6309   2E60 11            mov a, b
6310   2E61 26 01 00      mov b, $1
6311   2E64 56            add b, a
6312   2E65 E4            pop a
6313   2E66             ; END TERMS
6314   2E66 E7            pop d
6315   2E67 FD 43         mov [d], b
6316   2E69             ;; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
6317   2E69 FA F3 FF      lea d, [bp + -13] ; $c4
6318   2E6C DA            push d
6319   2E6D FA FD FF      lea d, [bp + -3] ; $c1
6320   2E70 2A            mov b, [d]
6321   2E71             ; START TERMS
6322   2E71 D7            push a
6323   2E72 11            mov a, b
6324   2E73 FA F7 FF      lea d, [bp + -9] ; $c2
6325   2E76 2A            mov b, [d]
6326   2E77 FD AB         swp b
6327   2E79 D8            push b
6328   2E7A 07 F9 1C      call TO_FIXED00
6329   2E7D 51 02 00      add sp, 2
6330   2E80 60            sub a, b
6331   2E81 27            mov b, a
6332   2E82 E4            pop a
6333   2E83             ; END TERMS
6334   2E83 E7            pop d
6335   2E84 FD 43         mov [d], b
6336   2E86             ;; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
6337   2E86 FA ED FF      lea d, [bp + -19] ; $x1
6338   2E89 DA            push d
6339   2E8A 26 64 00      mov b, $64
6340   2E8D             ; START FACTORS
6341   2E8D D7            push a
6342   2E8E 11            mov a, b
6343   2E8F 3B 76 60      mov d, _c_data ; $c
6344   2E92 D7            push a
6345   2E93 DA            push d
6346   2E94 26 01 00      mov b, $1
6347   2E97 E7            pop d
6348   2E98 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6349   2E9C DA            push d
6350   2E9D FA F7 FF      lea d, [bp + -9] ; $c2
6351   2EA0 2A            mov b, [d]
6352   2EA1 E7            pop d
6353   2EA2 5A            add d, b
6354   2EA3 E4            pop a
6355   2EA4 32            mov bl, [d]
6356   2EA5 A7 00         mov bh, 0
6357   2EA7 AC            mul a, b ; *
6358   2EA8 11            mov a, b
6359   2EA9 27            mov b, a
6360   2EAA E4            pop a
6361   2EAB             ; END FACTORS
6362   2EAB             ; START TERMS
6363   2EAB D7            push a
6364   2EAC 11            mov a, b
6365   2EAD 3B 76 60      mov d, _c_data ; $c
6366   2EB0 D7            push a
6367   2EB1 DA            push d
6368   2EB2 26 01 00      mov b, $1
6369   2EB5 E7            pop d
6370   2EB6 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6371   2EBA DA            push d
6372   2EBB FA F5 FF      lea d, [bp + -11] ; $c3
6373   2EBE 2A            mov b, [d]
6374   2EBF E7            pop d
6375   2EC0 5A            add d, b
6376   2EC1 E4            pop a
6377   2EC2 32            mov bl, [d]
6378   2EC3 A7 00         mov bh, 0
6379   2EC5             ; START TERMS
6380   2EC5 D7            push a
6381   2EC6 11            mov a, b
6382   2EC7 3B 76 60      mov d, _c_data ; $c
6383   2ECA D7            push a
6384   2ECB DA            push d
6385   2ECC 26 01 00      mov b, $1
6386   2ECF E7            pop d
6387   2ED0 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6388   2ED4 DA            push d
6389   2ED5 FA F7 FF      lea d, [bp + -9] ; $c2
6390   2ED8 2A            mov b, [d]
6391   2ED9 E7            pop d
6392   2EDA 5A            add d, b
6393   2EDB E4            pop a
6394   2EDC 32            mov bl, [d]
6395   2EDD A7 00         mov bh, 0
6396   2EDF 60            sub a, b
6397   2EE0 27            mov b, a
6398   2EE1 E4            pop a
6399   2EE2             ; END TERMS
6400   2EE2             ; START FACTORS
6401   2EE2 D7            push a
6402   2EE3 11            mov a, b
6403   2EE4 FA F3 FF      lea d, [bp + -13] ; $c4
6404   2EE7 2A            mov b, [d]
6405   2EE8 AC            mul a, b ; *
6406   2EE9 11            mov a, b
6407   2EEA 27            mov b, a
6408   2EEB E4            pop a
6409   2EEC             ; END FACTORS
6410   2EEC 56            add b, a
6411   2EED E4            pop a
6412   2EEE             ; END TERMS
6413   2EEE E7            pop d
6414   2EEF FD 43         mov [d], b
6415   2EF1             ;; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
6416   2EF1 FA EB FF      lea d, [bp + -21] ; $x2
6417   2EF4 DA            push d
6418   2EF5 26 64 00      mov b, $64
6419   2EF8             ; START FACTORS
6420   2EF8 D7            push a
6421   2EF9 11            mov a, b
6422   2EFA 3B 76 60      mov d, _c_data ; $c
6423   2EFD D7            push a
6424   2EFE DA            push d
6425   2EFF 26 02 00      mov b, $2
6426   2F02 E7            pop d
6427   2F03 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6428   2F07 DA            push d
6429   2F08 FA F7 FF      lea d, [bp + -9] ; $c2
6430   2F0B 2A            mov b, [d]
6431   2F0C E7            pop d
6432   2F0D 5A            add d, b
6433   2F0E E4            pop a
6434   2F0F 32            mov bl, [d]
6435   2F10 A7 00         mov bh, 0
6436   2F12 AC            mul a, b ; *
6437   2F13 11            mov a, b
6438   2F14 27            mov b, a
6439   2F15 E4            pop a
6440   2F16             ; END FACTORS
6441   2F16             ; START TERMS
6442   2F16 D7            push a
6443   2F17 11            mov a, b
6444   2F18 3B 76 60      mov d, _c_data ; $c
6445   2F1B D7            push a
6446   2F1C DA            push d
6447   2F1D 26 02 00      mov b, $2
6448   2F20 E7            pop d
6449   2F21 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6450   2F25 DA            push d
6451   2F26 FA F5 FF      lea d, [bp + -11] ; $c3
6452   2F29 2A            mov b, [d]
6453   2F2A E7            pop d
6454   2F2B 5A            add d, b
6455   2F2C E4            pop a
6456   2F2D 32            mov bl, [d]
6457   2F2E A7 00         mov bh, 0
6458   2F30             ; START TERMS
6459   2F30 D7            push a
6460   2F31 11            mov a, b
6461   2F32 3B 76 60      mov d, _c_data ; $c
6462   2F35 D7            push a
6463   2F36 DA            push d
6464   2F37 26 02 00      mov b, $2
6465   2F3A E7            pop d
6466   2F3B FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6467   2F3F DA            push d
6468   2F40 FA F7 FF      lea d, [bp + -9] ; $c2
6469   2F43 2A            mov b, [d]
6470   2F44 E7            pop d
6471   2F45 5A            add d, b
6472   2F46 E4            pop a
6473   2F47 32            mov bl, [d]
6474   2F48 A7 00         mov bh, 0
6475   2F4A 60            sub a, b
6476   2F4B 27            mov b, a
6477   2F4C E4            pop a
6478   2F4D             ; END TERMS
6479   2F4D             ; START FACTORS
6480   2F4D D7            push a
6481   2F4E 11            mov a, b
6482   2F4F FA F3 FF      lea d, [bp + -13] ; $c4
6483   2F52 2A            mov b, [d]
6484   2F53 AC            mul a, b ; *
6485   2F54 11            mov a, b
6486   2F55 27            mov b, a
6487   2F56 E4            pop a
6488   2F57             ; END FACTORS
6489   2F57 56            add b, a
6490   2F58 E4            pop a
6491   2F59             ; END TERMS
6492   2F59 E7            pop d
6493   2F5A FD 43         mov [d], b
6494   2F5C             ;; x = ship_y; 
6495   2F5C FA E9 FF      lea d, [bp + -23] ; $x
6496   2F5F DA            push d
6497   2F60 3B 6C 61      mov d, _ship_y ; $ship_y
6498   2F63 2A            mov b, [d]
6499   2F64 E7            pop d
6500   2F65 FD 43         mov [d], b
6501   2F67             ;; y = ship_x; 
6502   2F67 FA E7 FF      lea d, [bp + -25] ; $y
6503   2F6A DA            push d
6504   2F6B 3B 6E 61      mov d, _ship_x ; $ship_x
6505   2F6E 2A            mov b, [d]
6506   2F6F E7            pop d
6507   2F70 FD 43         mov [d], b
6508   2F72             ;; for (i = 1; i <= n; i++) { 
6509   2F72             _for100_init:
6510   2F72 FA FF FF      lea d, [bp + -1] ; $i
6511   2F75 DA            push d
6512   2F76 26 01 00      mov b, $1
6513   2F79 E7            pop d
6514   2F7A FD 43         mov [d], b
6515   2F7C             _for100_cond:
6516   2F7C FA FF FF      lea d, [bp + -1] ; $i
6517   2F7F 2A            mov b, [d]
6518   2F80             ; START RELATIONAL
6519   2F80 D7            push a
6520   2F81 11            mov a, b
6521   2F82 FA F9 FF      lea d, [bp + -7] ; $n
6522   2F85 2A            mov b, [d]
6523   2F86 B0            cmp a, b
6524   2F87 FD 73         slt ; <= (signed)
6525   2F89 E4            pop a
6526   2F8A             ; END RELATIONAL
6527   2F8A C0 00 00      cmp b, 0
6528   2F8D C6 CD 33      je _for100_exit
6529   2F90             _for100_block:
6530   2F90             ;; ship_y = ship_y + x1; 
6531   2F90 3B 6C 61      mov d, _ship_y ; $ship_y
6532   2F93 DA            push d
6533   2F94 3B 6C 61      mov d, _ship_y ; $ship_y
6534   2F97 2A            mov b, [d]
6535   2F98             ; START TERMS
6536   2F98 D7            push a
6537   2F99 11            mov a, b
6538   2F9A FA ED FF      lea d, [bp + -19] ; $x1
6539   2F9D 2A            mov b, [d]
6540   2F9E 56            add b, a
6541   2F9F E4            pop a
6542   2FA0             ; END TERMS
6543   2FA0 E7            pop d
6544   2FA1 FD 43         mov [d], b
6545   2FA3             ;; ship_x = ship_x + x2; 
6546   2FA3 3B 6E 61      mov d, _ship_x ; $ship_x
6547   2FA6 DA            push d
6548   2FA7 3B 6E 61      mov d, _ship_x ; $ship_x
6549   2FAA 2A            mov b, [d]
6550   2FAB             ; START TERMS
6551   2FAB D7            push a
6552   2FAC 11            mov a, b
6553   2FAD FA EB FF      lea d, [bp + -21] ; $x2
6554   2FB0 2A            mov b, [d]
6555   2FB1 56            add b, a
6556   2FB2 E4            pop a
6557   2FB3             ; END TERMS
6558   2FB3 E7            pop d
6559   2FB4 FD 43         mov [d], b
6560   2FB6             ;; z1 = FROM_FIXED00(ship_y); 
6561   2FB6 FA F1 FF      lea d, [bp + -15] ; $z1
6562   2FB9 DA            push d
6563   2FBA 3B 6C 61      mov d, _ship_y ; $ship_y
6564   2FBD 2A            mov b, [d]
6565   2FBE FD AB         swp b
6566   2FC0 D8            push b
6567   2FC1 07 0B 1D      call FROM_FIXED00
6568   2FC4 51 02 00      add sp, 2
6569   2FC7 E7            pop d
6570   2FC8 FD 43         mov [d], b
6571   2FCA             ;; z2 = FROM_FIXED00(ship_x);	/* ?? cint100 ?? */ 
6572   2FCA FA EF FF      lea d, [bp + -17] ; $z2
6573   2FCD DA            push d
6574   2FCE 3B 6E 61      mov d, _ship_x ; $ship_x
6575   2FD1 2A            mov b, [d]
6576   2FD2 FD AB         swp b
6577   2FD4 D8            push b
6578   2FD5 07 0B 1D      call FROM_FIXED00
6579   2FD8 51 02 00      add sp, 2
6580   2FDB E7            pop d
6581   2FDC FD 43         mov [d], b
6582   2FDE             ;; if (z1 < 1 || z1 >= 9 || z2 < 1 || z2 >= 9) { 
6583   2FDE             _if101_cond:
6584   2FDE FA F1 FF      lea d, [bp + -15] ; $z1
6585   2FE1 2A            mov b, [d]
6586   2FE2             ; START RELATIONAL
6587   2FE2 D7            push a
6588   2FE3 11            mov a, b
6589   2FE4 26 01 00      mov b, $1
6590   2FE7 B0            cmp a, b
6591   2FE8 FD 73         slt ; < (signed)
6592   2FEA E4            pop a
6593   2FEB             ; END RELATIONAL
6594   2FEB D7            push a
6595   2FEC 11            mov a, b
6596   2FED FA F1 FF      lea d, [bp + -15] ; $z1
6597   2FF0 2A            mov b, [d]
6598   2FF1             ; START RELATIONAL
6599   2FF1 D7            push a
6600   2FF2 11            mov a, b
6601   2FF3 26 09 00      mov b, $9
6602   2FF6 B0            cmp a, b
6603   2FF7 FD 80         sge ; >=
6604   2FF9 E4            pop a
6605   2FFA             ; END RELATIONAL
6606   2FFA FD A8         sor a, b ; ||
6607   2FFC 11            mov a, b
6608   2FFD FA EF FF      lea d, [bp + -17] ; $z2
6609   3000 2A            mov b, [d]
6610   3001             ; START RELATIONAL
6611   3001 D7            push a
6612   3002 11            mov a, b
6613   3003 26 01 00      mov b, $1
6614   3006 B0            cmp a, b
6615   3007 FD 73         slt ; < (signed)
6616   3009 E4            pop a
6617   300A             ; END RELATIONAL
6618   300A FD A8         sor a, b ; ||
6619   300C 11            mov a, b
6620   300D FA EF FF      lea d, [bp + -17] ; $z2
6621   3010 2A            mov b, [d]
6622   3011             ; START RELATIONAL
6623   3011 D7            push a
6624   3012 11            mov a, b
6625   3013 26 09 00      mov b, $9
6626   3016 B0            cmp a, b
6627   3017 FD 80         sge ; >=
6628   3019 E4            pop a
6629   301A             ; END RELATIONAL
6630   301A FD A8         sor a, b ; ||
6631   301C E4            pop a
6632   301D C0 00 00      cmp b, 0
6633   3020 C6 30 33      je _if101_exit
6634   3023             _if101_true:
6635   3023             ;; outside = 0;		/* Outside galaxy flag */ 
6636   3023 FA E6 FF      lea d, [bp + -26] ; $outside
6637   3026 DA            push d
6638   3027 26 00 00      mov b, $0
6639   302A E7            pop d
6640   302B FD 3E         mov [d], bl
6641   302D             ;; quad_y_old = quad_y; 
6642   302D FA E5 FF      lea d, [bp + -27] ; $quad_y_old
6643   3030 DA            push d
6644   3031 3B 4D 61      mov d, _quad_y ; $quad_y
6645   3034 2A            mov b, [d]
6646   3035 E7            pop d
6647   3036 FD 3E         mov [d], bl
6648   3038             ;; quad_x_old = quad_x; 
6649   3038 FA E4 FF      lea d, [bp + -28] ; $quad_x_old
6650   303B DA            push d
6651   303C 3B 4F 61      mov d, _quad_x ; $quad_x
6652   303F 2A            mov b, [d]
6653   3040 E7            pop d
6654   3041 FD 3E         mov [d], bl
6655   3043             ;; x = (800 * quad_y) + x + (n * x1); 
6656   3043 FA E9 FF      lea d, [bp + -23] ; $x
6657   3046 DA            push d
6658   3047 26 20 03      mov b, $320
6659   304A             ; START FACTORS
6660   304A D7            push a
6661   304B 11            mov a, b
6662   304C 3B 4D 61      mov d, _quad_y ; $quad_y
6663   304F 2A            mov b, [d]
6664   3050 AC            mul a, b ; *
6665   3051 11            mov a, b
6666   3052 27            mov b, a
6667   3053 E4            pop a
6668   3054             ; END FACTORS
6669   3054             ; START TERMS
6670   3054 D7            push a
6671   3055 11            mov a, b
6672   3056 FA E9 FF      lea d, [bp + -23] ; $x
6673   3059 2A            mov b, [d]
6674   305A 56            add b, a
6675   305B 11            mov a, b
6676   305C FA F9 FF      lea d, [bp + -7] ; $n
6677   305F 2A            mov b, [d]
6678   3060             ; START FACTORS
6679   3060 D7            push a
6680   3061 11            mov a, b
6681   3062 FA ED FF      lea d, [bp + -19] ; $x1
6682   3065 2A            mov b, [d]
6683   3066 AC            mul a, b ; *
6684   3067 11            mov a, b
6685   3068 27            mov b, a
6686   3069 E4            pop a
6687   306A             ; END FACTORS
6688   306A 56            add b, a
6689   306B E4            pop a
6690   306C             ; END TERMS
6691   306C E7            pop d
6692   306D FD 43         mov [d], b
6693   306F             ;; y = (800 * quad_x) + y + (n * x2); 
6694   306F FA E7 FF      lea d, [bp + -25] ; $y
6695   3072 DA            push d
6696   3073 26 20 03      mov b, $320
6697   3076             ; START FACTORS
6698   3076 D7            push a
6699   3077 11            mov a, b
6700   3078 3B 4F 61      mov d, _quad_x ; $quad_x
6701   307B 2A            mov b, [d]
6702   307C AC            mul a, b ; *
6703   307D 11            mov a, b
6704   307E 27            mov b, a
6705   307F E4            pop a
6706   3080             ; END FACTORS
6707   3080             ; START TERMS
6708   3080 D7            push a
6709   3081 11            mov a, b
6710   3082 FA E7 FF      lea d, [bp + -25] ; $y
6711   3085 2A            mov b, [d]
6712   3086 56            add b, a
6713   3087 11            mov a, b
6714   3088 FA F9 FF      lea d, [bp + -7] ; $n
6715   308B 2A            mov b, [d]
6716   308C             ; START FACTORS
6717   308C D7            push a
6718   308D 11            mov a, b
6719   308E FA EB FF      lea d, [bp + -21] ; $x2
6720   3091 2A            mov b, [d]
6721   3092 AC            mul a, b ; *
6722   3093 11            mov a, b
6723   3094 27            mov b, a
6724   3095 E4            pop a
6725   3096             ; END FACTORS
6726   3096 56            add b, a
6727   3097 E4            pop a
6728   3098             ; END TERMS
6729   3098 E7            pop d
6730   3099 FD 43         mov [d], b
6731   309B             ;; quad_y = x / 800;	/* Fixed point to int and divide by 8 */ 
6732   309B 3B 4D 61      mov d, _quad_y ; $quad_y
6733   309E DA            push d
6734   309F FA E9 FF      lea d, [bp + -23] ; $x
6735   30A2 2A            mov b, [d]
6736   30A3             ; START FACTORS
6737   30A3 D7            push a
6738   30A4 11            mov a, b
6739   30A5 26 20 03      mov b, $320
6740   30A8 AE            div a, b
6741   30A9 27            mov b, a
6742   30AA E4            pop a
6743   30AB             ; END FACTORS
6744   30AB E7            pop d
6745   30AC FD 43         mov [d], b
6746   30AE             ;; quad_x = y / 800;	/* Ditto */ 
6747   30AE 3B 4F 61      mov d, _quad_x ; $quad_x
6748   30B1 DA            push d
6749   30B2 FA E7 FF      lea d, [bp + -25] ; $y
6750   30B5 2A            mov b, [d]
6751   30B6             ; START FACTORS
6752   30B6 D7            push a
6753   30B7 11            mov a, b
6754   30B8 26 20 03      mov b, $320
6755   30BB AE            div a, b
6756   30BC 27            mov b, a
6757   30BD E4            pop a
6758   30BE             ; END FACTORS
6759   30BE E7            pop d
6760   30BF FD 43         mov [d], b
6761   30C1             ;; ship_y = x - (quad_y * 800); 
6762   30C1 3B 6C 61      mov d, _ship_y ; $ship_y
6763   30C4 DA            push d
6764   30C5 FA E9 FF      lea d, [bp + -23] ; $x
6765   30C8 2A            mov b, [d]
6766   30C9             ; START TERMS
6767   30C9 D7            push a
6768   30CA 11            mov a, b
6769   30CB 3B 4D 61      mov d, _quad_y ; $quad_y
6770   30CE 2A            mov b, [d]
6771   30CF             ; START FACTORS
6772   30CF D7            push a
6773   30D0 11            mov a, b
6774   30D1 26 20 03      mov b, $320
6775   30D4 AC            mul a, b ; *
6776   30D5 11            mov a, b
6777   30D6 27            mov b, a
6778   30D7 E4            pop a
6779   30D8             ; END FACTORS
6780   30D8 60            sub a, b
6781   30D9 27            mov b, a
6782   30DA E4            pop a
6783   30DB             ; END TERMS
6784   30DB E7            pop d
6785   30DC FD 43         mov [d], b
6786   30DE             ;; ship_x = y - (quad_x * 800); 
6787   30DE 3B 6E 61      mov d, _ship_x ; $ship_x
6788   30E1 DA            push d
6789   30E2 FA E7 FF      lea d, [bp + -25] ; $y
6790   30E5 2A            mov b, [d]
6791   30E6             ; START TERMS
6792   30E6 D7            push a
6793   30E7 11            mov a, b
6794   30E8 3B 4F 61      mov d, _quad_x ; $quad_x
6795   30EB 2A            mov b, [d]
6796   30EC             ; START FACTORS
6797   30EC D7            push a
6798   30ED 11            mov a, b
6799   30EE 26 20 03      mov b, $320
6800   30F1 AC            mul a, b ; *
6801   30F2 11            mov a, b
6802   30F3 27            mov b, a
6803   30F4 E4            pop a
6804   30F5             ; END FACTORS
6805   30F5 60            sub a, b
6806   30F6 27            mov b, a
6807   30F7 E4            pop a
6808   30F8             ; END TERMS
6809   30F8 E7            pop d
6810   30F9 FD 43         mov [d], b
6811   30FB             ;; if (ship_y < 100) { 
6812   30FB             _if102_cond:
6813   30FB 3B 6C 61      mov d, _ship_y ; $ship_y
6814   30FE 2A            mov b, [d]
6815   30FF             ; START RELATIONAL
6816   30FF D7            push a
6817   3100 11            mov a, b
6818   3101 26 64 00      mov b, $64
6819   3104 B0            cmp a, b
6820   3105 FD 73         slt ; < (signed)
6821   3107 E4            pop a
6822   3108             ; END RELATIONAL
6823   3108 C0 00 00      cmp b, 0
6824   310B C6 36 31      je _if102_exit
6825   310E             _if102_true:
6826   310E             ;; quad_y = quad_y - 1; 
6827   310E 3B 4D 61      mov d, _quad_y ; $quad_y
6828   3111 DA            push d
6829   3112 3B 4D 61      mov d, _quad_y ; $quad_y
6830   3115 2A            mov b, [d]
6831   3116             ; START TERMS
6832   3116 D7            push a
6833   3117 11            mov a, b
6834   3118 26 01 00      mov b, $1
6835   311B 60            sub a, b
6836   311C 27            mov b, a
6837   311D E4            pop a
6838   311E             ; END TERMS
6839   311E E7            pop d
6840   311F FD 43         mov [d], b
6841   3121             ;; ship_y = ship_y + 800; 
6842   3121 3B 6C 61      mov d, _ship_y ; $ship_y
6843   3124 DA            push d
6844   3125 3B 6C 61      mov d, _ship_y ; $ship_y
6845   3128 2A            mov b, [d]
6846   3129             ; START TERMS
6847   3129 D7            push a
6848   312A 11            mov a, b
6849   312B 26 20 03      mov b, $320
6850   312E 56            add b, a
6851   312F E4            pop a
6852   3130             ; END TERMS
6853   3130 E7            pop d
6854   3131 FD 43         mov [d], b
6855   3133 0A 36 31      jmp _if102_exit
6856   3136             _if102_exit:
6857   3136             ;; if (ship_x < 100) { 
6858   3136             _if103_cond:
6859   3136 3B 6E 61      mov d, _ship_x ; $ship_x
6860   3139 2A            mov b, [d]
6861   313A             ; START RELATIONAL
6862   313A D7            push a
6863   313B 11            mov a, b
6864   313C 26 64 00      mov b, $64
6865   313F B0            cmp a, b
6866   3140 FD 73         slt ; < (signed)
6867   3142 E4            pop a
6868   3143             ; END RELATIONAL
6869   3143 C0 00 00      cmp b, 0
6870   3146 C6 71 31      je _if103_exit
6871   3149             _if103_true:
6872   3149             ;; quad_x = quad_x - 1; 
6873   3149 3B 4F 61      mov d, _quad_x ; $quad_x
6874   314C DA            push d
6875   314D 3B 4F 61      mov d, _quad_x ; $quad_x
6876   3150 2A            mov b, [d]
6877   3151             ; START TERMS
6878   3151 D7            push a
6879   3152 11            mov a, b
6880   3153 26 01 00      mov b, $1
6881   3156 60            sub a, b
6882   3157 27            mov b, a
6883   3158 E4            pop a
6884   3159             ; END TERMS
6885   3159 E7            pop d
6886   315A FD 43         mov [d], b
6887   315C             ;; ship_x = ship_x + 800; 
6888   315C 3B 6E 61      mov d, _ship_x ; $ship_x
6889   315F DA            push d
6890   3160 3B 6E 61      mov d, _ship_x ; $ship_x
6891   3163 2A            mov b, [d]
6892   3164             ; START TERMS
6893   3164 D7            push a
6894   3165 11            mov a, b
6895   3166 26 20 03      mov b, $320
6896   3169 56            add b, a
6897   316A E4            pop a
6898   316B             ; END TERMS
6899   316B E7            pop d
6900   316C FD 43         mov [d], b
6901   316E 0A 71 31      jmp _if103_exit
6902   3171             _if103_exit:
6903   3171             ;; if (quad_y < 1) { 
6904   3171             _if104_cond:
6905   3171 3B 4D 61      mov d, _quad_y ; $quad_y
6906   3174 2A            mov b, [d]
6907   3175             ; START RELATIONAL
6908   3175 D7            push a
6909   3176 11            mov a, b
6910   3177 26 01 00      mov b, $1
6911   317A B0            cmp a, b
6912   317B FD 73         slt ; < (signed)
6913   317D E4            pop a
6914   317E             ; END RELATIONAL
6915   317E C0 00 00      cmp b, 0
6916   3181 C6 A5 31      je _if104_exit
6917   3184             _if104_true:
6918   3184             ;; outside = 1; 
6919   3184 FA E6 FF      lea d, [bp + -26] ; $outside
6920   3187 DA            push d
6921   3188 26 01 00      mov b, $1
6922   318B E7            pop d
6923   318C FD 3E         mov [d], bl
6924   318E             ;; quad_y = 1; 
6925   318E 3B 4D 61      mov d, _quad_y ; $quad_y
6926   3191 DA            push d
6927   3192 26 01 00      mov b, $1
6928   3195 E7            pop d
6929   3196 FD 43         mov [d], b
6930   3198             ;; ship_y = 100; 
6931   3198 3B 6C 61      mov d, _ship_y ; $ship_y
6932   319B DA            push d
6933   319C 26 64 00      mov b, $64
6934   319F E7            pop d
6935   31A0 FD 43         mov [d], b
6936   31A2 0A A5 31      jmp _if104_exit
6937   31A5             _if104_exit:
6938   31A5             ;; if (quad_y > 8) { 
6939   31A5             _if105_cond:
6940   31A5 3B 4D 61      mov d, _quad_y ; $quad_y
6941   31A8 2A            mov b, [d]
6942   31A9             ; START RELATIONAL
6943   31A9 D7            push a
6944   31AA 11            mov a, b
6945   31AB 26 08 00      mov b, $8
6946   31AE B0            cmp a, b
6947   31AF FD 7F         sgt ; >
6948   31B1 E4            pop a
6949   31B2             ; END RELATIONAL
6950   31B2 C0 00 00      cmp b, 0
6951   31B5 C6 D9 31      je _if105_exit
6952   31B8             _if105_true:
6953   31B8             ;; outside = 1; 
6954   31B8 FA E6 FF      lea d, [bp + -26] ; $outside
6955   31BB DA            push d
6956   31BC 26 01 00      mov b, $1
6957   31BF E7            pop d
6958   31C0 FD 3E         mov [d], bl
6959   31C2             ;; quad_y = 8; 
6960   31C2 3B 4D 61      mov d, _quad_y ; $quad_y
6961   31C5 DA            push d
6962   31C6 26 08 00      mov b, $8
6963   31C9 E7            pop d
6964   31CA FD 43         mov [d], b
6965   31CC             ;; ship_y = 800; 
6966   31CC 3B 6C 61      mov d, _ship_y ; $ship_y
6967   31CF DA            push d
6968   31D0 26 20 03      mov b, $320
6969   31D3 E7            pop d
6970   31D4 FD 43         mov [d], b
6971   31D6 0A D9 31      jmp _if105_exit
6972   31D9             _if105_exit:
6973   31D9             ;; if (quad_x < 1) { 
6974   31D9             _if106_cond:
6975   31D9 3B 4F 61      mov d, _quad_x ; $quad_x
6976   31DC 2A            mov b, [d]
6977   31DD             ; START RELATIONAL
6978   31DD D7            push a
6979   31DE 11            mov a, b
6980   31DF 26 01 00      mov b, $1
6981   31E2 B0            cmp a, b
6982   31E3 FD 73         slt ; < (signed)
6983   31E5 E4            pop a
6984   31E6             ; END RELATIONAL
6985   31E6 C0 00 00      cmp b, 0
6986   31E9 C6 0D 32      je _if106_exit
6987   31EC             _if106_true:
6988   31EC             ;; outside = 1; 
6989   31EC FA E6 FF      lea d, [bp + -26] ; $outside
6990   31EF DA            push d
6991   31F0 26 01 00      mov b, $1
6992   31F3 E7            pop d
6993   31F4 FD 3E         mov [d], bl
6994   31F6             ;; quad_x = 1; 
6995   31F6 3B 4F 61      mov d, _quad_x ; $quad_x
6996   31F9 DA            push d
6997   31FA 26 01 00      mov b, $1
6998   31FD E7            pop d
6999   31FE FD 43         mov [d], b
7000   3200             ;; ship_x = 100; 
7001   3200 3B 6E 61      mov d, _ship_x ; $ship_x
7002   3203 DA            push d
7003   3204 26 64 00      mov b, $64
7004   3207 E7            pop d
7005   3208 FD 43         mov [d], b
7006   320A 0A 0D 32      jmp _if106_exit
7007   320D             _if106_exit:
7008   320D             ;; if (quad_x > 8) { 
7009   320D             _if107_cond:
7010   320D 3B 4F 61      mov d, _quad_x ; $quad_x
7011   3210 2A            mov b, [d]
7012   3211             ; START RELATIONAL
7013   3211 D7            push a
7014   3212 11            mov a, b
7015   3213 26 08 00      mov b, $8
7016   3216 B0            cmp a, b
7017   3217 FD 7F         sgt ; >
7018   3219 E4            pop a
7019   321A             ; END RELATIONAL
7020   321A C0 00 00      cmp b, 0
7021   321D C6 41 32      je _if107_exit
7022   3220             _if107_true:
7023   3220             ;; outside = 1; 
7024   3220 FA E6 FF      lea d, [bp + -26] ; $outside
7025   3223 DA            push d
7026   3224 26 01 00      mov b, $1
7027   3227 E7            pop d
7028   3228 FD 3E         mov [d], bl
7029   322A             ;; quad_x = 8; 
7030   322A 3B 4F 61      mov d, _quad_x ; $quad_x
7031   322D DA            push d
7032   322E 26 08 00      mov b, $8
7033   3231 E7            pop d
7034   3232 FD 43         mov [d], b
7035   3234             ;; ship_x = 800; 
7036   3234 3B 6E 61      mov d, _ship_x ; $ship_x
7037   3237 DA            push d
7038   3238 26 20 03      mov b, $320
7039   323B E7            pop d
7040   323C FD 43         mov [d], b
7041   323E 0A 41 32      jmp _if107_exit
7042   3241             _if107_exit:
7043   3241             ;; if (outside == 1) { 
7044   3241             _if108_cond:
7045   3241 FA E6 FF      lea d, [bp + -26] ; $outside
7046   3244 32            mov bl, [d]
7047   3245 A7 00         mov bh, 0
7048   3247             ; START RELATIONAL
7049   3247 D7            push a
7050   3248 11            mov a, b
7051   3249 26 01 00      mov b, $1
7052   324C B0            cmp a, b
7053   324D FD 71         seq ; ==
7054   324F E4            pop a
7055   3250             ; END RELATIONAL
7056   3250 C0 00 00      cmp b, 0
7057   3253 C6 93 32      je _if108_exit
7058   3256             _if108_true:
7059   3256             ;; printf("LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", FROM_FIXED00(ship_y), 
7060   3256 3B 4F 61      mov d, _quad_x ; $quad_x
7061   3259 2A            mov b, [d]
7062   325A FD AB         swp b
7063   325C D8            push b
7064   325D 3B 4D 61      mov d, _quad_y ; $quad_y
7065   3260 2A            mov b, [d]
7066   3261 FD AB         swp b
7067   3263 D8            push b
7068   3264 3B 6E 61      mov d, _ship_x ; $ship_x
7069   3267 2A            mov b, [d]
7070   3268 FD AB         swp b
7071   326A D8            push b
7072   326B 07 0B 1D      call FROM_FIXED00
7073   326E 51 02 00      add sp, 2
7074   3271 FD AB         swp b
7075   3273 D8            push b
7076   3274 3B 6C 61      mov d, _ship_y ; $ship_y
7077   3277 2A            mov b, [d]
7078   3278 FD AB         swp b
7079   327A D8            push b
7080   327B 07 0B 1D      call FROM_FIXED00
7081   327E 51 02 00      add sp, 2
7082   3281 FD AB         swp b
7083   3283 D8            push b
7084   3284 26 3E 69      mov b, _s78 ; "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n"
7085   3287 FD AB         swp b
7086   3289 D8            push b
7087   328A 07 D1 05      call printf
7088   328D 51 0A 00      add sp, 10
7089   3290 0A 93 32      jmp _if108_exit
7090   3293             _if108_exit:
7091   3293             ;; maneuver_energy(n); 
7092   3293 FA F9 FF      lea d, [bp + -7] ; $n
7093   3296 2A            mov b, [d]
7094   3297 FD AB         swp b
7095   3299 D8            push b
7096   329A 07 82 34      call maneuver_energy
7097   329D 51 02 00      add sp, 2
7098   32A0             ;; if (FROM_FIXED(stardate) > time_start + time_up) 
7099   32A0             _if109_cond:
7100   32A0 3B 70 61      mov d, _stardate ; $stardate
7101   32A3 2A            mov b, [d]
7102   32A4 FD AB         swp b
7103   32A6 D8            push b
7104   32A7 07 E8 1C      call FROM_FIXED
7105   32AA 51 02 00      add sp, 2
7106   32AD             ; START RELATIONAL
7107   32AD D7            push a
7108   32AE 11            mov a, b
7109   32AF 3B 54 61      mov d, _time_start ; $time_start
7110   32B2 2A            mov b, [d]
7111   32B3             ; START TERMS
7112   32B3 D7            push a
7113   32B4 11            mov a, b
7114   32B5 3B 56 61      mov d, _time_up ; $time_up
7115   32B8 2A            mov b, [d]
7116   32B9 56            add b, a
7117   32BA E4            pop a
7118   32BB             ; END TERMS
7119   32BB B0            cmp a, b
7120   32BC FD 7F         sgt ; >
7121   32BE E4            pop a
7122   32BF             ; END RELATIONAL
7123   32BF C0 00 00      cmp b, 0
7124   32C2 C6 CB 32      je _if109_exit
7125   32C5             _if109_true:
7126   32C5             ;; end_of_time(); 
7127   32C5 07 E5 54      call end_of_time
7128   32C8 0A CB 32      jmp _if109_exit
7129   32CB             _if109_exit:
7130   32CB             ;; if (quad_y != quad_y_old || quad_x != quad_x_old) { 
7131   32CB             _if110_cond:
7132   32CB 3B 4D 61      mov d, _quad_y ; $quad_y
7133   32CE 2A            mov b, [d]
7134   32CF             ; START RELATIONAL
7135   32CF D7            push a
7136   32D0 11            mov a, b
7137   32D1 FA E5 FF      lea d, [bp + -27] ; $quad_y_old
7138   32D4 32            mov bl, [d]
7139   32D5 A7 00         mov bh, 0
7140   32D7 B0            cmp a, b
7141   32D8 FD 72         sneq ; !=
7142   32DA E4            pop a
7143   32DB             ; END RELATIONAL
7144   32DB D7            push a
7145   32DC 11            mov a, b
7146   32DD 3B 4F 61      mov d, _quad_x ; $quad_x
7147   32E0 2A            mov b, [d]
7148   32E1             ; START RELATIONAL
7149   32E1 D7            push a
7150   32E2 11            mov a, b
7151   32E3 FA E4 FF      lea d, [bp + -28] ; $quad_x_old
7152   32E6 32            mov bl, [d]
7153   32E7 A7 00         mov bh, 0
7154   32E9 B0            cmp a, b
7155   32EA FD 72         sneq ; !=
7156   32EC E4            pop a
7157   32ED             ; END RELATIONAL
7158   32ED FD A8         sor a, b ; ||
7159   32EF E4            pop a
7160   32F0 C0 00 00      cmp b, 0
7161   32F3 C6 17 33      je _if110_exit
7162   32F6             _if110_true:
7163   32F6             ;; stardate = stardate + TO_FIXED(1); 
7164   32F6 3B 70 61      mov d, _stardate ; $stardate
7165   32F9 DA            push d
7166   32FA 3B 70 61      mov d, _stardate ; $stardate
7167   32FD 2A            mov b, [d]
7168   32FE             ; START TERMS
7169   32FE D7            push a
7170   32FF 11            mov a, b
7171   3300 26 01 00      mov b, $1
7172   3303 FD AB         swp b
7173   3305 D8            push b
7174   3306 07 D6 1C      call TO_FIXED
7175   3309 51 02 00      add sp, 2
7176   330C 56            add b, a
7177   330D E4            pop a
7178   330E             ; END TERMS
7179   330E E7            pop d
7180   330F FD 43         mov [d], b
7181   3311             ;; new_quadrant(); 
7182   3311 07 4B 28      call new_quadrant
7183   3314 0A 17 33      jmp _if110_exit
7184   3317             _if110_exit:
7185   3317             ;; complete_maneuver(warp, n); 
7186   3317 FA F9 FF      lea d, [bp + -7] ; $n
7187   331A 2A            mov b, [d]
7188   331B FD AB         swp b
7189   331D D8            push b
7190   331E FA FB FF      lea d, [bp + -5] ; $warp
7191   3321 2A            mov b, [d]
7192   3322 FD AB         swp b
7193   3324 D8            push b
7194   3325 07 E3 33      call complete_maneuver
7195   3328 51 04 00      add sp, 4
7196   332B             ;; return; 
7197   332B F9            leave
7198   332C 09            ret
7199   332D 0A 30 33      jmp _if101_exit
7200   3330             _if101_exit:
7201   3330             ;; if (quad[z1+-1][z2+-1] !=  		0      ) {	/* Sector not empty */ 
7202   3330             _if111_cond:
7203   3330 3B 72 61      mov d, _quad_data ; $quad
7204   3333 D7            push a
7205   3334 DA            push d
7206   3335 FA F1 FF      lea d, [bp + -15] ; $z1
7207   3338 2A            mov b, [d]
7208   3339             ; START TERMS
7209   3339 D7            push a
7210   333A 11            mov a, b
7211   333B 26 FF FF      mov b, $ffff
7212   333E 56            add b, a
7213   333F E4            pop a
7214   3340             ; END TERMS
7215   3340 E7            pop d
7216   3341 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7217   3345 DA            push d
7218   3346 FA EF FF      lea d, [bp + -17] ; $z2
7219   3349 2A            mov b, [d]
7220   334A             ; START TERMS
7221   334A D7            push a
7222   334B 11            mov a, b
7223   334C 26 FF FF      mov b, $ffff
7224   334F 56            add b, a
7225   3350 E4            pop a
7226   3351             ; END TERMS
7227   3351 E7            pop d
7228   3352 5A            add d, b
7229   3353 E4            pop a
7230   3354 32            mov bl, [d]
7231   3355 A7 00         mov bh, 0
7232   3357             ; START RELATIONAL
7233   3357 D7            push a
7234   3358 11            mov a, b
7235   3359 26 00 00      mov b, $0
7236   335C B0            cmp a, b
7237   335D FD 72         sneq ; !=
7238   335F E4            pop a
7239   3360             ; END RELATIONAL
7240   3360 C0 00 00      cmp b, 0
7241   3363 C6 BD 33      je _if111_exit
7242   3366             _if111_true:
7243   3366             ;; ship_y = ship_y - x1; 
7244   3366 3B 6C 61      mov d, _ship_y ; $ship_y
7245   3369 DA            push d
7246   336A 3B 6C 61      mov d, _ship_y ; $ship_y
7247   336D 2A            mov b, [d]
7248   336E             ; START TERMS
7249   336E D7            push a
7250   336F 11            mov a, b
7251   3370 FA ED FF      lea d, [bp + -19] ; $x1
7252   3373 2A            mov b, [d]
7253   3374 60            sub a, b
7254   3375 27            mov b, a
7255   3376 E4            pop a
7256   3377             ; END TERMS
7257   3377 E7            pop d
7258   3378 FD 43         mov [d], b
7259   337A             ;; ship_x = ship_x - x2; 
7260   337A 3B 6E 61      mov d, _ship_x ; $ship_x
7261   337D DA            push d
7262   337E 3B 6E 61      mov d, _ship_x ; $ship_x
7263   3381 2A            mov b, [d]
7264   3382             ; START TERMS
7265   3382 D7            push a
7266   3383 11            mov a, b
7267   3384 FA EB FF      lea d, [bp + -21] ; $x2
7268   3387 2A            mov b, [d]
7269   3388 60            sub a, b
7270   3389 27            mov b, a
7271   338A E4            pop a
7272   338B             ; END TERMS
7273   338B E7            pop d
7274   338C FD 43         mov [d], b
7275   338E             ;; printf("Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", z1, z2); 
7276   338E FA EF FF      lea d, [bp + -17] ; $z2
7277   3391 2A            mov b, [d]
7278   3392 FD AB         swp b
7279   3394 D8            push b
7280   3395 FA F1 FF      lea d, [bp + -15] ; $z1
7281   3398 2A            mov b, [d]
7282   3399 FD AB         swp b
7283   339B D8            push b
7284   339C 26 3F 69      mov b, _s79 ; "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n"
7285   339F FD AB         swp b
7286   33A1 D8            push b
7287   33A2 07 D1 05      call printf
7288   33A5 51 06 00      add sp, 6
7289   33A8             ;; i = n + 1; 
7290   33A8 FA FF FF      lea d, [bp + -1] ; $i
7291   33AB DA            push d
7292   33AC FA F9 FF      lea d, [bp + -7] ; $n
7293   33AF 2A            mov b, [d]
7294   33B0             ; START TERMS
7295   33B0 D7            push a
7296   33B1 11            mov a, b
7297   33B2 26 01 00      mov b, $1
7298   33B5 56            add b, a
7299   33B6 E4            pop a
7300   33B7             ; END TERMS
7301   33B7 E7            pop d
7302   33B8 FD 43         mov [d], b
7303   33BA 0A BD 33      jmp _if111_exit
7304   33BD             _if111_exit:
7305   33BD             _for100_update:
7306   33BD FA FF FF      lea d, [bp + -1] ; $i
7307   33C0 2A            mov b, [d]
7308   33C1 D8            push b
7309   33C2 FD 77         inc b
7310   33C4 FA FF FF      lea d, [bp + -1] ; $i
7311   33C7 FD 43         mov [d], b
7312   33C9 E5            pop b
7313   33CA 0A 7C 2F      jmp _for100_cond
7314   33CD             _for100_exit:
7315   33CD             ;; complete_maneuver(warp, n); 
7316   33CD FA F9 FF      lea d, [bp + -7] ; $n
7317   33D0 2A            mov b, [d]
7318   33D1 FD AB         swp b
7319   33D3 D8            push b
7320   33D4 FA FB FF      lea d, [bp + -5] ; $warp
7321   33D7 2A            mov b, [d]
7322   33D8 FD AB         swp b
7323   33DA D8            push b
7324   33DB 07 E3 33      call complete_maneuver
7325   33DE 51 04 00      add sp, 4
7326   33E1 F9            leave
7327   33E2 09            ret
7328   33E3             
7329   33E3             complete_maneuver:
7330   33E3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7331   33E6             ; $time_used 
7332   33E6 52 02 00      sub sp, 2
7333   33E9             ;; place_ship(); 
7334   33E9 07 07 28      call place_ship
7335   33EC             ;; maneuver_energy(n); 
7336   33EC FA 07 00      lea d, [bp + 7] ; $n
7337   33EF 2A            mov b, [d]
7338   33F0 FD AB         swp b
7339   33F2 D8            push b
7340   33F3 07 82 34      call maneuver_energy
7341   33F6 51 02 00      add sp, 2
7342   33F9             ;; time_used = TO_FIXED(1); 
7343   33F9 FA FF FF      lea d, [bp + -1] ; $time_used
7344   33FC DA            push d
7345   33FD 26 01 00      mov b, $1
7346   3400 FD AB         swp b
7347   3402 D8            push b
7348   3403 07 D6 1C      call TO_FIXED
7349   3406 51 02 00      add sp, 2
7350   3409 E7            pop d
7351   340A FD 43         mov [d], b
7352   340C             ;; if (warp < 100) 
7353   340C             _if112_cond:
7354   340C FA 05 00      lea d, [bp + 5] ; $warp
7355   340F 2A            mov b, [d]
7356   3410             ; START RELATIONAL
7357   3410 D7            push a
7358   3411 11            mov a, b
7359   3412 26 64 00      mov b, $64
7360   3415 B0            cmp a, b
7361   3416 FD 75         slu ; < (unsigned)
7362   3418 E4            pop a
7363   3419             ; END RELATIONAL
7364   3419 C0 00 00      cmp b, 0
7365   341C C6 3F 34      je _if112_exit
7366   341F             _if112_true:
7367   341F             ;; time_used = TO_FIXED(FROM_FIXED00(warp)); 
7368   341F FA FF FF      lea d, [bp + -1] ; $time_used
7369   3422 DA            push d
7370   3423 FA 05 00      lea d, [bp + 5] ; $warp
7371   3426 2A            mov b, [d]
7372   3427 FD AB         swp b
7373   3429 D8            push b
7374   342A 07 0B 1D      call FROM_FIXED00
7375   342D 51 02 00      add sp, 2
7376   3430 FD AB         swp b
7377   3432 D8            push b
7378   3433 07 D6 1C      call TO_FIXED
7379   3436 51 02 00      add sp, 2
7380   3439 E7            pop d
7381   343A FD 43         mov [d], b
7382   343C 0A 3F 34      jmp _if112_exit
7383   343F             _if112_exit:
7384   343F             ;; stardate = stardate + time_used; 
7385   343F 3B 70 61      mov d, _stardate ; $stardate
7386   3442 DA            push d
7387   3443 3B 70 61      mov d, _stardate ; $stardate
7388   3446 2A            mov b, [d]
7389   3447             ; START TERMS
7390   3447 D7            push a
7391   3448 11            mov a, b
7392   3449 FA FF FF      lea d, [bp + -1] ; $time_used
7393   344C 2A            mov b, [d]
7394   344D 56            add b, a
7395   344E E4            pop a
7396   344F             ; END TERMS
7397   344F E7            pop d
7398   3450 FD 43         mov [d], b
7399   3452             ;; if (FROM_FIXED(stardate) > time_start + time_up) 
7400   3452             _if113_cond:
7401   3452 3B 70 61      mov d, _stardate ; $stardate
7402   3455 2A            mov b, [d]
7403   3456 FD AB         swp b
7404   3458 D8            push b
7405   3459 07 E8 1C      call FROM_FIXED
7406   345C 51 02 00      add sp, 2
7407   345F             ; START RELATIONAL
7408   345F D7            push a
7409   3460 11            mov a, b
7410   3461 3B 54 61      mov d, _time_start ; $time_start
7411   3464 2A            mov b, [d]
7412   3465             ; START TERMS
7413   3465 D7            push a
7414   3466 11            mov a, b
7415   3467 3B 56 61      mov d, _time_up ; $time_up
7416   346A 2A            mov b, [d]
7417   346B 56            add b, a
7418   346C E4            pop a
7419   346D             ; END TERMS
7420   346D B0            cmp a, b
7421   346E FD 7F         sgt ; >
7422   3470 E4            pop a
7423   3471             ; END RELATIONAL
7424   3471 C0 00 00      cmp b, 0
7425   3474 C6 7D 34      je _if113_exit
7426   3477             _if113_true:
7427   3477             ;; end_of_time(); 
7428   3477 07 E5 54      call end_of_time
7429   347A 0A 7D 34      jmp _if113_exit
7430   347D             _if113_exit:
7431   347D             ;; short_range_scan(); 
7432   347D 07 01 35      call short_range_scan
7433   3480 F9            leave
7434   3481 09            ret
7435   3482             
7436   3482             maneuver_energy:
7437   3482 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7438   3485             ;; energy = energy - n + 10; 
7439   3485 3B 96 60      mov d, _energy ; $energy
7440   3488 DA            push d
7441   3489 3B 96 60      mov d, _energy ; $energy
7442   348C 2A            mov b, [d]
7443   348D             ; START TERMS
7444   348D D7            push a
7445   348E 11            mov a, b
7446   348F FA 05 00      lea d, [bp + 5] ; $n
7447   3492 2A            mov b, [d]
7448   3493 60            sub a, b
7449   3494 27            mov b, a
7450   3495 11            mov a, b
7451   3496 26 0A 00      mov b, $a
7452   3499 56            add b, a
7453   349A E4            pop a
7454   349B             ; END TERMS
7455   349B E7            pop d
7456   349C FD 43         mov [d], b
7457   349E             ;; if (energy >= 0) 
7458   349E             _if114_cond:
7459   349E 3B 96 60      mov d, _energy ; $energy
7460   34A1 2A            mov b, [d]
7461   34A2             ; START RELATIONAL
7462   34A2 D7            push a
7463   34A3 11            mov a, b
7464   34A4 26 00 00      mov b, $0
7465   34A7 B0            cmp a, b
7466   34A8 FD 80         sge ; >=
7467   34AA E4            pop a
7468   34AB             ; END RELATIONAL
7469   34AB C0 00 00      cmp b, 0
7470   34AE C6 B6 34      je _if114_exit
7471   34B1             _if114_true:
7472   34B1             ;; return; 
7473   34B1 F9            leave
7474   34B2 09            ret
7475   34B3 0A B6 34      jmp _if114_exit
7476   34B6             _if114_exit:
7477   34B6             ;; puts("Shield Control supplies energy to complete maneuver.\n"); 
7478   34B6 26 80 69      mov b, _s80 ; "Shield Control supplies energy to complete maneuver.\n"
7479   34B9 FD AB         swp b
7480   34BB D8            push b
7481   34BC 07 31 13      call puts
7482   34BF 51 02 00      add sp, 2
7483   34C2             ;; shield = shield + energy; 
7484   34C2 3B 51 61      mov d, _shield ; $shield
7485   34C5 DA            push d
7486   34C6 3B 51 61      mov d, _shield ; $shield
7487   34C9 2A            mov b, [d]
7488   34CA             ; START TERMS
7489   34CA D7            push a
7490   34CB 11            mov a, b
7491   34CC 3B 96 60      mov d, _energy ; $energy
7492   34CF 2A            mov b, [d]
7493   34D0 56            add b, a
7494   34D1 E4            pop a
7495   34D2             ; END TERMS
7496   34D2 E7            pop d
7497   34D3 FD 43         mov [d], b
7498   34D5             ;; energy = 0; 
7499   34D5 3B 96 60      mov d, _energy ; $energy
7500   34D8 DA            push d
7501   34D9 26 00 00      mov b, $0
7502   34DC E7            pop d
7503   34DD FD 43         mov [d], b
7504   34DF             ;; if (shield <= 0) 
7505   34DF             _if115_cond:
7506   34DF 3B 51 61      mov d, _shield ; $shield
7507   34E2 2A            mov b, [d]
7508   34E3             ; START RELATIONAL
7509   34E3 D7            push a
7510   34E4 11            mov a, b
7511   34E5 26 00 00      mov b, $0
7512   34E8 B0            cmp a, b
7513   34E9 FD 73         slt ; <= (signed)
7514   34EB E4            pop a
7515   34EC             ; END RELATIONAL
7516   34EC C0 00 00      cmp b, 0
7517   34EF C6 FF 34      je _if115_exit
7518   34F2             _if115_true:
7519   34F2             ;; shield = 0; 
7520   34F2 3B 51 61      mov d, _shield ; $shield
7521   34F5 DA            push d
7522   34F6 26 00 00      mov b, $0
7523   34F9 E7            pop d
7524   34FA FD 43         mov [d], b
7525   34FC 0A FF 34      jmp _if115_exit
7526   34FF             _if115_exit:
7527   34FF F9            leave
7528   3500 09            ret
7529   3501             
7530   3501             short_range_scan:
7531   3501 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7532   3504             ; $i 
7533   3504             ; $j 
7534   3504             ; $sC 
7535   3504 10 4A 63      mov a, _sC_data
7536   3507 45 FB FF      mov [bp + -5], a
7537   350A 52 06 00      sub sp, 6
7538   350D             ;; if (energy < energy0 / 10) 
7539   350D             _if116_cond:
7540   350D 3B 96 60      mov d, _energy ; $energy
7541   3510 2A            mov b, [d]
7542   3511             ; START RELATIONAL
7543   3511 D7            push a
7544   3512 11            mov a, b
7545   3513 3B 98 60      mov d, _energy0 ; $energy0
7546   3516 2A            mov b, [d]
7547   3517             ; START FACTORS
7548   3517 D7            push a
7549   3518 11            mov a, b
7550   3519 26 0A 00      mov b, $a
7551   351C AE            div a, b
7552   351D 27            mov b, a
7553   351E E4            pop a
7554   351F             ; END FACTORS
7555   351F B0            cmp a, b
7556   3520 FD 73         slt ; < (signed)
7557   3522 E4            pop a
7558   3523             ; END RELATIONAL
7559   3523 C0 00 00      cmp b, 0
7560   3526 C6 36 35      je _if116_exit
7561   3529             _if116_true:
7562   3529             ;; sC = "YELLOW"; 
7563   3529 FA FB FF      lea d, [bp + -5] ; $sC
7564   352C DA            push d
7565   352D 26 B6 69      mov b, _s81 ; "YELLOW"
7566   3530 E7            pop d
7567   3531 FD 43         mov [d], b
7568   3533 0A 36 35      jmp _if116_exit
7569   3536             _if116_exit:
7570   3536             ;; if (klingons > 0) 
7571   3536             _if117_cond:
7572   3536 3B 48 61      mov d, _klingons ; $klingons
7573   3539 32            mov bl, [d]
7574   353A A7 00         mov bh, 0
7575   353C             ; START RELATIONAL
7576   353C D7            push a
7577   353D 11            mov a, b
7578   353E 26 00 00      mov b, $0
7579   3541 B0            cmp a, b
7580   3542 FD 81         sgu ; > (unsigned)
7581   3544 E4            pop a
7582   3545             ; END RELATIONAL
7583   3545 C0 00 00      cmp b, 0
7584   3548 C6 58 35      je _if117_exit
7585   354B             _if117_true:
7586   354B             ;; sC = "*RED*"; 
7587   354B FA FB FF      lea d, [bp + -5] ; $sC
7588   354E DA            push d
7589   354F 26 BD 69      mov b, _s82 ; "*RED*"
7590   3552 E7            pop d
7591   3553 FD 43         mov [d], b
7592   3555 0A 58 35      jmp _if117_exit
7593   3558             _if117_exit:
7594   3558             ;; docked = 0; 
7595   3558 3B 95 60      mov d, _docked ; $docked
7596   355B DA            push d
7597   355C 26 00 00      mov b, $0
7598   355F E7            pop d
7599   3560 FD 3E         mov [d], bl
7600   3562             ;; for (i = (int) (FROM_FIXED00(ship_y) - 1); i <= (int) (FROM_FIXED00(ship_y) + 1); i++) 
7601   3562             _for118_init:
7602   3562 FA FF FF      lea d, [bp + -1] ; $i
7603   3565 DA            push d
7604   3566 3B 6C 61      mov d, _ship_y ; $ship_y
7605   3569 2A            mov b, [d]
7606   356A FD AB         swp b
7607   356C D8            push b
7608   356D 07 0B 1D      call FROM_FIXED00
7609   3570 51 02 00      add sp, 2
7610   3573             ; START TERMS
7611   3573 D7            push a
7612   3574 11            mov a, b
7613   3575 26 01 00      mov b, $1
7614   3578 60            sub a, b
7615   3579 27            mov b, a
7616   357A E4            pop a
7617   357B             ; END TERMS
7618   357B E7            pop d
7619   357C FD 43         mov [d], b
7620   357E             _for118_cond:
7621   357E FA FF FF      lea d, [bp + -1] ; $i
7622   3581 2A            mov b, [d]
7623   3582             ; START RELATIONAL
7624   3582 D7            push a
7625   3583 11            mov a, b
7626   3584 3B 6C 61      mov d, _ship_y ; $ship_y
7627   3587 2A            mov b, [d]
7628   3588 FD AB         swp b
7629   358A D8            push b
7630   358B 07 0B 1D      call FROM_FIXED00
7631   358E 51 02 00      add sp, 2
7632   3591             ; START TERMS
7633   3591 D7            push a
7634   3592 11            mov a, b
7635   3593 26 01 00      mov b, $1
7636   3596 56            add b, a
7637   3597 E4            pop a
7638   3598             ; END TERMS
7639   3598 B0            cmp a, b
7640   3599 FD 73         slt ; <= (signed)
7641   359B E4            pop a
7642   359C             ; END RELATIONAL
7643   359C C0 00 00      cmp b, 0
7644   359F C6 C5 36      je _for118_exit
7645   35A2             _for118_block:
7646   35A2             ;; for (j = (int) (FROM_FIXED00(ship_x) - 1); j <= (int) (FROM_FIXED00(ship_x) + 1); j++) 
7647   35A2             _for119_init:
7648   35A2 FA FD FF      lea d, [bp + -3] ; $j
7649   35A5 DA            push d
7650   35A6 3B 6E 61      mov d, _ship_x ; $ship_x
7651   35A9 2A            mov b, [d]
7652   35AA FD AB         swp b
7653   35AC D8            push b
7654   35AD 07 0B 1D      call FROM_FIXED00
7655   35B0 51 02 00      add sp, 2
7656   35B3             ; START TERMS
7657   35B3 D7            push a
7658   35B4 11            mov a, b
7659   35B5 26 01 00      mov b, $1
7660   35B8 60            sub a, b
7661   35B9 27            mov b, a
7662   35BA E4            pop a
7663   35BB             ; END TERMS
7664   35BB E7            pop d
7665   35BC FD 43         mov [d], b
7666   35BE             _for119_cond:
7667   35BE FA FD FF      lea d, [bp + -3] ; $j
7668   35C1 2A            mov b, [d]
7669   35C2             ; START RELATIONAL
7670   35C2 D7            push a
7671   35C3 11            mov a, b
7672   35C4 3B 6E 61      mov d, _ship_x ; $ship_x
7673   35C7 2A            mov b, [d]
7674   35C8 FD AB         swp b
7675   35CA D8            push b
7676   35CB 07 0B 1D      call FROM_FIXED00
7677   35CE 51 02 00      add sp, 2
7678   35D1             ; START TERMS
7679   35D1 D7            push a
7680   35D2 11            mov a, b
7681   35D3 26 01 00      mov b, $1
7682   35D6 56            add b, a
7683   35D7 E4            pop a
7684   35D8             ; END TERMS
7685   35D8 B0            cmp a, b
7686   35D9 FD 73         slt ; <= (signed)
7687   35DB E4            pop a
7688   35DC             ; END RELATIONAL
7689   35DC C0 00 00      cmp b, 0
7690   35DF C6 B5 36      je _for119_exit
7691   35E2             _for119_block:
7692   35E2             ;; if (i >= 1 && i <= 8 && j >= 1 && j <= 8) { 
7693   35E2             _if120_cond:
7694   35E2 FA FF FF      lea d, [bp + -1] ; $i
7695   35E5 2A            mov b, [d]
7696   35E6             ; START RELATIONAL
7697   35E6 D7            push a
7698   35E7 11            mov a, b
7699   35E8 26 01 00      mov b, $1
7700   35EB B0            cmp a, b
7701   35EC FD 80         sge ; >=
7702   35EE E4            pop a
7703   35EF             ; END RELATIONAL
7704   35EF D7            push a
7705   35F0 11            mov a, b
7706   35F1 FA FF FF      lea d, [bp + -1] ; $i
7707   35F4 2A            mov b, [d]
7708   35F5             ; START RELATIONAL
7709   35F5 D7            push a
7710   35F6 11            mov a, b
7711   35F7 26 08 00      mov b, $8
7712   35FA B0            cmp a, b
7713   35FB FD 73         slt ; <= (signed)
7714   35FD E4            pop a
7715   35FE             ; END RELATIONAL
7716   35FE FD A7         sand a, b
7717   3600 11            mov a, b
7718   3601 FA FD FF      lea d, [bp + -3] ; $j
7719   3604 2A            mov b, [d]
7720   3605             ; START RELATIONAL
7721   3605 D7            push a
7722   3606 11            mov a, b
7723   3607 26 01 00      mov b, $1
7724   360A B0            cmp a, b
7725   360B FD 80         sge ; >=
7726   360D E4            pop a
7727   360E             ; END RELATIONAL
7728   360E FD A7         sand a, b
7729   3610 11            mov a, b
7730   3611 FA FD FF      lea d, [bp + -3] ; $j
7731   3614 2A            mov b, [d]
7732   3615             ; START RELATIONAL
7733   3615 D7            push a
7734   3616 11            mov a, b
7735   3617 26 08 00      mov b, $8
7736   361A B0            cmp a, b
7737   361B FD 73         slt ; <= (signed)
7738   361D E4            pop a
7739   361E             ; END RELATIONAL
7740   361E FD A7         sand a, b
7741   3620 E4            pop a
7742   3621 C0 00 00      cmp b, 0
7743   3624 C6 A5 36      je _if120_exit
7744   3627             _if120_true:
7745   3627             ;; if (quad[i+-1][j+-1] ==  		2     ) { 
7746   3627             _if121_cond:
7747   3627 3B 72 61      mov d, _quad_data ; $quad
7748   362A D7            push a
7749   362B DA            push d
7750   362C FA FF FF      lea d, [bp + -1] ; $i
7751   362F 2A            mov b, [d]
7752   3630             ; START TERMS
7753   3630 D7            push a
7754   3631 11            mov a, b
7755   3632 26 FF FF      mov b, $ffff
7756   3635 56            add b, a
7757   3636 E4            pop a
7758   3637             ; END TERMS
7759   3637 E7            pop d
7760   3638 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7761   363C DA            push d
7762   363D FA FD FF      lea d, [bp + -3] ; $j
7763   3640 2A            mov b, [d]
7764   3641             ; START TERMS
7765   3641 D7            push a
7766   3642 11            mov a, b
7767   3643 26 FF FF      mov b, $ffff
7768   3646 56            add b, a
7769   3647 E4            pop a
7770   3648             ; END TERMS
7771   3648 E7            pop d
7772   3649 5A            add d, b
7773   364A E4            pop a
7774   364B 32            mov bl, [d]
7775   364C A7 00         mov bh, 0
7776   364E             ; START RELATIONAL
7777   364E D7            push a
7778   364F 11            mov a, b
7779   3650 26 02 00      mov b, $2
7780   3653 B0            cmp a, b
7781   3654 FD 71         seq ; ==
7782   3656 E4            pop a
7783   3657             ; END RELATIONAL
7784   3657 C0 00 00      cmp b, 0
7785   365A C6 A2 36      je _if121_exit
7786   365D             _if121_true:
7787   365D             ;; docked = 1; 
7788   365D 3B 95 60      mov d, _docked ; $docked
7789   3660 DA            push d
7790   3661 26 01 00      mov b, $1
7791   3664 E7            pop d
7792   3665 FD 3E         mov [d], bl
7793   3667             ;; sC = "DOCKED"; 
7794   3667 FA FB FF      lea d, [bp + -5] ; $sC
7795   366A DA            push d
7796   366B 26 C3 69      mov b, _s83 ; "DOCKED"
7797   366E E7            pop d
7798   366F FD 43         mov [d], b
7799   3671             ;; energy = energy0; 
7800   3671 3B 96 60      mov d, _energy ; $energy
7801   3674 DA            push d
7802   3675 3B 98 60      mov d, _energy0 ; $energy0
7803   3678 2A            mov b, [d]
7804   3679 E7            pop d
7805   367A FD 43         mov [d], b
7806   367C             ;; torps = torps0; 
7807   367C 3B 4B 61      mov d, _torps ; $torps
7808   367F DA            push d
7809   3680 3B 4C 61      mov d, _torps0 ; $torps0
7810   3683 32            mov bl, [d]
7811   3684 A7 00         mov bh, 0
7812   3686 E7            pop d
7813   3687 FD 3E         mov [d], bl
7814   3689             ;; puts("Shields dropped for docking purposes."); 
7815   3689 26 CA 69      mov b, _s84 ; "Shields dropped for docking purposes."
7816   368C FD AB         swp b
7817   368E D8            push b
7818   368F 07 31 13      call puts
7819   3692 51 02 00      add sp, 2
7820   3695             ;; shield = 0; 
7821   3695 3B 51 61      mov d, _shield ; $shield
7822   3698 DA            push d
7823   3699 26 00 00      mov b, $0
7824   369C E7            pop d
7825   369D FD 43         mov [d], b
7826   369F 0A A2 36      jmp _if121_exit
7827   36A2             _if121_exit:
7828   36A2 0A A5 36      jmp _if120_exit
7829   36A5             _if120_exit:
7830   36A5             _for119_update:
7831   36A5 FA FD FF      lea d, [bp + -3] ; $j
7832   36A8 2A            mov b, [d]
7833   36A9 D8            push b
7834   36AA FD 77         inc b
7835   36AC FA FD FF      lea d, [bp + -3] ; $j
7836   36AF FD 43         mov [d], b
7837   36B1 E5            pop b
7838   36B2 0A BE 35      jmp _for119_cond
7839   36B5             _for119_exit:
7840   36B5             _for118_update:
7841   36B5 FA FF FF      lea d, [bp + -1] ; $i
7842   36B8 2A            mov b, [d]
7843   36B9 D8            push b
7844   36BA FD 77         inc b
7845   36BC FA FF FF      lea d, [bp + -1] ; $i
7846   36BF FD 43         mov [d], b
7847   36C1 E5            pop b
7848   36C2 0A 7E 35      jmp _for118_cond
7849   36C5             _for118_exit:
7850   36C5             ;; if (damage[2] < 0) { 
7851   36C5             _if122_cond:
7852   36C5 3B 58 61      mov d, _damage_data ; $damage
7853   36C8 D7            push a
7854   36C9 DA            push d
7855   36CA 26 02 00      mov b, $2
7856   36CD E7            pop d
7857   36CE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7858   36D2 E4            pop a
7859   36D3 2A            mov b, [d]
7860   36D4             ; START RELATIONAL
7861   36D4 D7            push a
7862   36D5 11            mov a, b
7863   36D6 26 00 00      mov b, $0
7864   36D9 B0            cmp a, b
7865   36DA FD 73         slt ; < (signed)
7866   36DC E4            pop a
7867   36DD             ; END RELATIONAL
7868   36DD C0 00 00      cmp b, 0
7869   36E0 C6 F4 36      je _if122_exit
7870   36E3             _if122_true:
7871   36E3             ;; puts("\n*** Short Range Sensors are out ***"); 
7872   36E3 26 F0 69      mov b, _s85 ; "\n*** Short Range Sensors are out ***"
7873   36E6 FD AB         swp b
7874   36E8 D8            push b
7875   36E9 07 31 13      call puts
7876   36EC 51 02 00      add sp, 2
7877   36EF             ;; return; 
7878   36EF F9            leave
7879   36F0 09            ret
7880   36F1 0A F4 36      jmp _if122_exit
7881   36F4             _if122_exit:
7882   36F4             ;; puts(srs_1); 
7883   36F4 3B 8C 62      mov d, _srs_1 ; $srs_1
7884   36F7 2A            mov b, [d]
7885   36F8 FD AB         swp b
7886   36FA D8            push b
7887   36FB 07 31 13      call puts
7888   36FE 51 02 00      add sp, 2
7889   3701             ;; for (i = 0; i < 8; i++) { 
7890   3701             _for123_init:
7891   3701 FA FF FF      lea d, [bp + -1] ; $i
7892   3704 DA            push d
7893   3705 26 00 00      mov b, $0
7894   3708 E7            pop d
7895   3709 FD 43         mov [d], b
7896   370B             _for123_cond:
7897   370B FA FF FF      lea d, [bp + -1] ; $i
7898   370E 2A            mov b, [d]
7899   370F             ; START RELATIONAL
7900   370F D7            push a
7901   3710 11            mov a, b
7902   3711 26 08 00      mov b, $8
7903   3714 B0            cmp a, b
7904   3715 FD 73         slt ; < (signed)
7905   3717 E4            pop a
7906   3718             ; END RELATIONAL
7907   3718 C0 00 00      cmp b, 0
7908   371B C6 02 39      je _for123_exit
7909   371E             _for123_block:
7910   371E             ;; for (j = 0; j < 8; j++) 
7911   371E             _for124_init:
7912   371E FA FD FF      lea d, [bp + -3] ; $j
7913   3721 DA            push d
7914   3722 26 00 00      mov b, $0
7915   3725 E7            pop d
7916   3726 FD 43         mov [d], b
7917   3728             _for124_cond:
7918   3728 FA FD FF      lea d, [bp + -3] ; $j
7919   372B 2A            mov b, [d]
7920   372C             ; START RELATIONAL
7921   372C D7            push a
7922   372D 11            mov a, b
7923   372E 26 08 00      mov b, $8
7924   3731 B0            cmp a, b
7925   3732 FD 73         slt ; < (signed)
7926   3734 E4            pop a
7927   3735             ; END RELATIONAL
7928   3735 C0 00 00      cmp b, 0
7929   3738 C6 79 37      je _for124_exit
7930   373B             _for124_block:
7931   373B             ;; puts(tilestr[quad[i][j]]); 
7932   373B 3B 8E 62      mov d, _tilestr_data ; $tilestr
7933   373E D7            push a
7934   373F DA            push d
7935   3740 3B 72 61      mov d, _quad_data ; $quad
7936   3743 D7            push a
7937   3744 DA            push d
7938   3745 FA FF FF      lea d, [bp + -1] ; $i
7939   3748 2A            mov b, [d]
7940   3749 E7            pop d
7941   374A FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7942   374E DA            push d
7943   374F FA FD FF      lea d, [bp + -3] ; $j
7944   3752 2A            mov b, [d]
7945   3753 E7            pop d
7946   3754 5A            add d, b
7947   3755 E4            pop a
7948   3756 32            mov bl, [d]
7949   3757 A7 00         mov bh, 0
7950   3759 E7            pop d
7951   375A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7952   375E E4            pop a
7953   375F 2A            mov b, [d]
7954   3760 FD AB         swp b
7955   3762 D8            push b
7956   3763 07 31 13      call puts
7957   3766 51 02 00      add sp, 2
7958   3769             _for124_update:
7959   3769 FA FD FF      lea d, [bp + -3] ; $j
7960   376C 2A            mov b, [d]
7961   376D D8            push b
7962   376E FD 77         inc b
7963   3770 FA FD FF      lea d, [bp + -3] ; $j
7964   3773 FD 43         mov [d], b
7965   3775 E5            pop b
7966   3776 0A 28 37      jmp _for124_cond
7967   3779             _for124_exit:
7968   3779             ;; if (i == 0) 
7969   3779             _if125_cond:
7970   3779 FA FF FF      lea d, [bp + -1] ; $i
7971   377C 2A            mov b, [d]
7972   377D             ; START RELATIONAL
7973   377D D7            push a
7974   377E 11            mov a, b
7975   377F 26 00 00      mov b, $0
7976   3782 B0            cmp a, b
7977   3783 FD 71         seq ; ==
7978   3785 E4            pop a
7979   3786             ; END RELATIONAL
7980   3786 C0 00 00      cmp b, 0
7981   3789 C6 AB 37      je _if125_exit
7982   378C             _if125_true:
7983   378C             ;; printf("    Stardate            %d\n", FROM_FIXED(stardate)); 
7984   378C 3B 70 61      mov d, _stardate ; $stardate
7985   378F 2A            mov b, [d]
7986   3790 FD AB         swp b
7987   3792 D8            push b
7988   3793 07 E8 1C      call FROM_FIXED
7989   3796 51 02 00      add sp, 2
7990   3799 FD AB         swp b
7991   379B D8            push b
7992   379C 26 15 6A      mov b, _s86 ; "    Stardate            %d\n"
7993   379F FD AB         swp b
7994   37A1 D8            push b
7995   37A2 07 D1 05      call printf
7996   37A5 51 04 00      add sp, 4
7997   37A8 0A AB 37      jmp _if125_exit
7998   37AB             _if125_exit:
7999   37AB             ;; if (i == 1) 
8000   37AB             _if126_cond:
8001   37AB FA FF FF      lea d, [bp + -1] ; $i
8002   37AE 2A            mov b, [d]
8003   37AF             ; START RELATIONAL
8004   37AF D7            push a
8005   37B0 11            mov a, b
8006   37B1 26 01 00      mov b, $1
8007   37B4 B0            cmp a, b
8008   37B5 FD 71         seq ; ==
8009   37B7 E4            pop a
8010   37B8             ; END RELATIONAL
8011   37B8 C0 00 00      cmp b, 0
8012   37BB C6 D4 37      je _if126_exit
8013   37BE             _if126_true:
8014   37BE             ;; printf("    Condition           %s\n", sC); 
8015   37BE FA FB FF      lea d, [bp + -5] ; $sC
8016   37C1 2A            mov b, [d]
8017   37C2 FD AB         swp b
8018   37C4 D8            push b
8019   37C5 26 31 6A      mov b, _s87 ; "    Condition           %s\n"
8020   37C8 FD AB         swp b
8021   37CA D8            push b
8022   37CB 07 D1 05      call printf
8023   37CE 51 04 00      add sp, 4
8024   37D1 0A D4 37      jmp _if126_exit
8025   37D4             _if126_exit:
8026   37D4             ;; if (i == 2) 
8027   37D4             _if127_cond:
8028   37D4 FA FF FF      lea d, [bp + -1] ; $i
8029   37D7 2A            mov b, [d]
8030   37D8             ; START RELATIONAL
8031   37D8 D7            push a
8032   37D9 11            mov a, b
8033   37DA 26 02 00      mov b, $2
8034   37DD B0            cmp a, b
8035   37DE FD 71         seq ; ==
8036   37E0 E4            pop a
8037   37E1             ; END RELATIONAL
8038   37E1 C0 00 00      cmp b, 0
8039   37E4 C6 04 38      je _if127_exit
8040   37E7             _if127_true:
8041   37E7             ;; printf("    Quadrant            %d, %d\n", quad_y, quad_x); 
8042   37E7 3B 4F 61      mov d, _quad_x ; $quad_x
8043   37EA 2A            mov b, [d]
8044   37EB FD AB         swp b
8045   37ED D8            push b
8046   37EE 3B 4D 61      mov d, _quad_y ; $quad_y
8047   37F1 2A            mov b, [d]
8048   37F2 FD AB         swp b
8049   37F4 D8            push b
8050   37F5 26 4D 6A      mov b, _s88 ; "    Quadrant            %d, %d\n"
8051   37F8 FD AB         swp b
8052   37FA D8            push b
8053   37FB 07 D1 05      call printf
8054   37FE 51 06 00      add sp, 6
8055   3801 0A 04 38      jmp _if127_exit
8056   3804             _if127_exit:
8057   3804             ;; if (i == 3) 
8058   3804             _if128_cond:
8059   3804 FA FF FF      lea d, [bp + -1] ; $i
8060   3807 2A            mov b, [d]
8061   3808             ; START RELATIONAL
8062   3808 D7            push a
8063   3809 11            mov a, b
8064   380A 26 03 00      mov b, $3
8065   380D B0            cmp a, b
8066   380E FD 71         seq ; ==
8067   3810 E4            pop a
8068   3811             ; END RELATIONAL
8069   3811 C0 00 00      cmp b, 0
8070   3814 C6 46 38      je _if128_exit
8071   3817             _if128_true:
8072   3817             ;; printf("    Sector              %d, %d\n", FROM_FIXED00(ship_y), FROM_FIXED00(ship_x)); 
8073   3817 3B 6E 61      mov d, _ship_x ; $ship_x
8074   381A 2A            mov b, [d]
8075   381B FD AB         swp b
8076   381D D8            push b
8077   381E 07 0B 1D      call FROM_FIXED00
8078   3821 51 02 00      add sp, 2
8079   3824 FD AB         swp b
8080   3826 D8            push b
8081   3827 3B 6C 61      mov d, _ship_y ; $ship_y
8082   382A 2A            mov b, [d]
8083   382B FD AB         swp b
8084   382D D8            push b
8085   382E 07 0B 1D      call FROM_FIXED00
8086   3831 51 02 00      add sp, 2
8087   3834 FD AB         swp b
8088   3836 D8            push b
8089   3837 26 6D 6A      mov b, _s89 ; "    Sector              %d, %d\n"
8090   383A FD AB         swp b
8091   383C D8            push b
8092   383D 07 D1 05      call printf
8093   3840 51 06 00      add sp, 6
8094   3843 0A 46 38      jmp _if128_exit
8095   3846             _if128_exit:
8096   3846             ;; if (i == 4) 
8097   3846             _if129_cond:
8098   3846 FA FF FF      lea d, [bp + -1] ; $i
8099   3849 2A            mov b, [d]
8100   384A             ; START RELATIONAL
8101   384A D7            push a
8102   384B 11            mov a, b
8103   384C 26 04 00      mov b, $4
8104   384F B0            cmp a, b
8105   3850 FD 71         seq ; ==
8106   3852 E4            pop a
8107   3853             ; END RELATIONAL
8108   3853 C0 00 00      cmp b, 0
8109   3856 C6 6F 38      je _if129_exit
8110   3859             _if129_true:
8111   3859             ;; printf("    Photon Torpedoes    %d\n", torps); 
8112   3859 3B 4B 61      mov d, _torps ; $torps
8113   385C 32            mov bl, [d]
8114   385D A7 00         mov bh, 0
8115   385F DD            push bl
8116   3860 26 8D 6A      mov b, _s90 ; "    Photon Torpedoes    %d\n"
8117   3863 FD AB         swp b
8118   3865 D8            push b
8119   3866 07 D1 05      call printf
8120   3869 51 03 00      add sp, 3
8121   386C 0A 6F 38      jmp _if129_exit
8122   386F             _if129_exit:
8123   386F             ;; if (i == 5) 
8124   386F             _if130_cond:
8125   386F FA FF FF      lea d, [bp + -1] ; $i
8126   3872 2A            mov b, [d]
8127   3873             ; START RELATIONAL
8128   3873 D7            push a
8129   3874 11            mov a, b
8130   3875 26 05 00      mov b, $5
8131   3878 B0            cmp a, b
8132   3879 FD 71         seq ; ==
8133   387B E4            pop a
8134   387C             ; END RELATIONAL
8135   387C C0 00 00      cmp b, 0
8136   387F C6 A0 38      je _if130_exit
8137   3882             _if130_true:
8138   3882             ;; printf("    Total Energy        %d\n", energy + shield); 
8139   3882 3B 96 60      mov d, _energy ; $energy
8140   3885 2A            mov b, [d]
8141   3886             ; START TERMS
8142   3886 D7            push a
8143   3887 11            mov a, b
8144   3888 3B 51 61      mov d, _shield ; $shield
8145   388B 2A            mov b, [d]
8146   388C 56            add b, a
8147   388D E4            pop a
8148   388E             ; END TERMS
8149   388E FD AB         swp b
8150   3890 D8            push b
8151   3891 26 A9 6A      mov b, _s91 ; "    Total Energy        %d\n"
8152   3894 FD AB         swp b
8153   3896 D8            push b
8154   3897 07 D1 05      call printf
8155   389A 51 04 00      add sp, 4
8156   389D 0A A0 38      jmp _if130_exit
8157   38A0             _if130_exit:
8158   38A0             ;; if (i == 6) 
8159   38A0             _if131_cond:
8160   38A0 FA FF FF      lea d, [bp + -1] ; $i
8161   38A3 2A            mov b, [d]
8162   38A4             ; START RELATIONAL
8163   38A4 D7            push a
8164   38A5 11            mov a, b
8165   38A6 26 06 00      mov b, $6
8166   38A9 B0            cmp a, b
8167   38AA FD 71         seq ; ==
8168   38AC E4            pop a
8169   38AD             ; END RELATIONAL
8170   38AD C0 00 00      cmp b, 0
8171   38B0 C6 C9 38      je _if131_exit
8172   38B3             _if131_true:
8173   38B3             ;; printf("    Shields             %d\n", shield); 
8174   38B3 3B 51 61      mov d, _shield ; $shield
8175   38B6 2A            mov b, [d]
8176   38B7 FD AB         swp b
8177   38B9 D8            push b
8178   38BA 26 C5 6A      mov b, _s92 ; "    Shields             %d\n"
8179   38BD FD AB         swp b
8180   38BF D8            push b
8181   38C0 07 D1 05      call printf
8182   38C3 51 04 00      add sp, 4
8183   38C6 0A C9 38      jmp _if131_exit
8184   38C9             _if131_exit:
8185   38C9             ;; if (i == 7) 
8186   38C9             _if132_cond:
8187   38C9 FA FF FF      lea d, [bp + -1] ; $i
8188   38CC 2A            mov b, [d]
8189   38CD             ; START RELATIONAL
8190   38CD D7            push a
8191   38CE 11            mov a, b
8192   38CF 26 07 00      mov b, $7
8193   38D2 B0            cmp a, b
8194   38D3 FD 71         seq ; ==
8195   38D5 E4            pop a
8196   38D6             ; END RELATIONAL
8197   38D6 C0 00 00      cmp b, 0
8198   38D9 C6 F2 38      je _if132_exit
8199   38DC             _if132_true:
8200   38DC             ;; printf("    Klingons Remaining  %d\n", klingons_left); 
8201   38DC 3B 4A 61      mov d, _klingons_left ; $klingons_left
8202   38DF 32            mov bl, [d]
8203   38E0 A7 00         mov bh, 0
8204   38E2 DD            push bl
8205   38E3 26 E1 6A      mov b, _s93 ; "    Klingons Remaining  %d\n"
8206   38E6 FD AB         swp b
8207   38E8 D8            push b
8208   38E9 07 D1 05      call printf
8209   38EC 51 03 00      add sp, 3
8210   38EF 0A F2 38      jmp _if132_exit
8211   38F2             _if132_exit:
8212   38F2             _for123_update:
8213   38F2 FA FF FF      lea d, [bp + -1] ; $i
8214   38F5 2A            mov b, [d]
8215   38F6 D8            push b
8216   38F7 FD 77         inc b
8217   38F9 FA FF FF      lea d, [bp + -1] ; $i
8218   38FC FD 43         mov [d], b
8219   38FE E5            pop b
8220   38FF 0A 0B 37      jmp _for123_cond
8221   3902             _for123_exit:
8222   3902             ;; puts(srs_1); 
8223   3902 3B 8C 62      mov d, _srs_1 ; $srs_1
8224   3905 2A            mov b, [d]
8225   3906 FD AB         swp b
8226   3908 D8            push b
8227   3909 07 31 13      call puts
8228   390C 51 02 00      add sp, 2
8229   390F             ;; putchar('\n'); 
8230   390F 26 0A 00      mov b, $a
8231   3912 DD            push bl
8232   3913 07 FB 12      call putchar
8233   3916 51 01 00      add sp, 1
8234   3919             ;; return; 
8235   3919 F9            leave
8236   391A 09            ret
8237   391B             
8238   391B             put1bcd:
8239   391B F8 00 00      enter 0 ; (push bp; mov bp, sp)
8240   391E             ;; v = v & 0x0F; 
8241   391E FA 05 00      lea d, [bp + 5] ; $v
8242   3921 DA            push d
8243   3922 FA 05 00      lea d, [bp + 5] ; $v
8244   3925 32            mov bl, [d]
8245   3926 A7 00         mov bh, 0
8246   3928 D7            push a
8247   3929 11            mov a, b
8248   392A 26 0F 00      mov b, $f
8249   392D FD 92         and b, a ; &
8250   392F E4            pop a
8251   3930 E7            pop d
8252   3931 FD 3E         mov [d], bl
8253   3933             ;; putchar('0' + v); 
8254   3933 26 30 00      mov b, $30
8255   3936             ; START TERMS
8256   3936 D7            push a
8257   3937 11            mov a, b
8258   3938 FA 05 00      lea d, [bp + 5] ; $v
8259   393B 32            mov bl, [d]
8260   393C A7 00         mov bh, 0
8261   393E 56            add b, a
8262   393F E4            pop a
8263   3940             ; END TERMS
8264   3940 DD            push bl
8265   3941 07 FB 12      call putchar
8266   3944 51 01 00      add sp, 1
8267   3947 F9            leave
8268   3948 09            ret
8269   3949             
8270   3949             putbcd:
8271   3949 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8272   394C             ;; put1bcd(x >> 8); 
8273   394C FA 05 00      lea d, [bp + 5] ; $x
8274   394F 2A            mov b, [d]
8275   3950             ; START SHIFT
8276   3950 D7            push a
8277   3951 11            mov a, b
8278   3952 26 08 00      mov b, $8
8279   3955 FD 39         mov c, b
8280   3957 A1            shr a, cl
8281   3958 27            mov b, a
8282   3959 E4            pop a
8283   395A             ; END SHIFT
8284   395A DD            push bl
8285   395B 07 1B 39      call put1bcd
8286   395E 51 01 00      add sp, 1
8287   3961             ;; put1bcd(x >> 4); 
8288   3961 FA 05 00      lea d, [bp + 5] ; $x
8289   3964 2A            mov b, [d]
8290   3965             ; START SHIFT
8291   3965 D7            push a
8292   3966 11            mov a, b
8293   3967 26 04 00      mov b, $4
8294   396A FD 39         mov c, b
8295   396C A1            shr a, cl
8296   396D 27            mov b, a
8297   396E E4            pop a
8298   396F             ; END SHIFT
8299   396F DD            push bl
8300   3970 07 1B 39      call put1bcd
8301   3973 51 01 00      add sp, 1
8302   3976             ;; put1bcd(x); 
8303   3976 FA 05 00      lea d, [bp + 5] ; $x
8304   3979 2A            mov b, [d]
8305   397A DD            push bl
8306   397B 07 1B 39      call put1bcd
8307   397E 51 01 00      add sp, 1
8308   3981 F9            leave
8309   3982 09            ret
8310   3983             
8311   3983             long_range_scan:
8312   3983 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8313   3986             ; $i 
8314   3986             ; $j 
8315   3986 52 04 00      sub sp, 4
8316   3989             ;; if (inoperable(3)) 
8317   3989             _if133_cond:
8318   3989 26 03 00      mov b, $3
8319   398C DD            push bl
8320   398D 07 4B 20      call inoperable
8321   3990 51 01 00      add sp, 1
8322   3993 C0 00 00      cmp b, 0
8323   3996 C6 9E 39      je _if133_exit
8324   3999             _if133_true:
8325   3999             ;; return; 
8326   3999 F9            leave
8327   399A 09            ret
8328   399B 0A 9E 39      jmp _if133_exit
8329   399E             _if133_exit:
8330   399E             ;; printf("Long Range Scan for Quadrant %d, %d\n\n", quad_y, quad_x); 
8331   399E 3B 4F 61      mov d, _quad_x ; $quad_x
8332   39A1 2A            mov b, [d]
8333   39A2 FD AB         swp b
8334   39A4 D8            push b
8335   39A5 3B 4D 61      mov d, _quad_y ; $quad_y
8336   39A8 2A            mov b, [d]
8337   39A9 FD AB         swp b
8338   39AB D8            push b
8339   39AC 26 FD 6A      mov b, _s94 ; "Long Range Scan for Quadrant %d, %d\n\n"
8340   39AF FD AB         swp b
8341   39B1 D8            push b
8342   39B2 07 D1 05      call printf
8343   39B5 51 06 00      add sp, 6
8344   39B8             ;; for (i = quad_y - 1; i <= quad_y + 1; i++) { 
8345   39B8             _for134_init:
8346   39B8 FA FF FF      lea d, [bp + -1] ; $i
8347   39BB DA            push d
8348   39BC 3B 4D 61      mov d, _quad_y ; $quad_y
8349   39BF 2A            mov b, [d]
8350   39C0             ; START TERMS
8351   39C0 D7            push a
8352   39C1 11            mov a, b
8353   39C2 26 01 00      mov b, $1
8354   39C5 60            sub a, b
8355   39C6 27            mov b, a
8356   39C7 E4            pop a
8357   39C8             ; END TERMS
8358   39C8 E7            pop d
8359   39C9 FD 43         mov [d], b
8360   39CB             _for134_cond:
8361   39CB FA FF FF      lea d, [bp + -1] ; $i
8362   39CE 2A            mov b, [d]
8363   39CF             ; START RELATIONAL
8364   39CF D7            push a
8365   39D0 11            mov a, b
8366   39D1 3B 4D 61      mov d, _quad_y ; $quad_y
8367   39D4 2A            mov b, [d]
8368   39D5             ; START TERMS
8369   39D5 D7            push a
8370   39D6 11            mov a, b
8371   39D7 26 01 00      mov b, $1
8372   39DA 56            add b, a
8373   39DB E4            pop a
8374   39DC             ; END TERMS
8375   39DC B0            cmp a, b
8376   39DD FD 73         slt ; <= (signed)
8377   39DF E4            pop a
8378   39E0             ; END RELATIONAL
8379   39E0 C0 00 00      cmp b, 0
8380   39E3 C6 1D 3B      je _for134_exit
8381   39E6             _for134_block:
8382   39E6             ;; printf("%s:", lrs_1); 
8383   39E6 3B B7 62      mov d, _lrs_1 ; $lrs_1
8384   39E9 2A            mov b, [d]
8385   39EA FD AB         swp b
8386   39EC D8            push b
8387   39ED 26 23 6B      mov b, _s95 ; "%s:"
8388   39F0 FD AB         swp b
8389   39F2 D8            push b
8390   39F3 07 D1 05      call printf
8391   39F6 51 04 00      add sp, 4
8392   39F9             ;; for (j = quad_x - 1; j <= quad_x + 1; j++) { 
8393   39F9             _for135_init:
8394   39F9 FA FD FF      lea d, [bp + -3] ; $j
8395   39FC DA            push d
8396   39FD 3B 4F 61      mov d, _quad_x ; $quad_x
8397   3A00 2A            mov b, [d]
8398   3A01             ; START TERMS
8399   3A01 D7            push a
8400   3A02 11            mov a, b
8401   3A03 26 01 00      mov b, $1
8402   3A06 60            sub a, b
8403   3A07 27            mov b, a
8404   3A08 E4            pop a
8405   3A09             ; END TERMS
8406   3A09 E7            pop d
8407   3A0A FD 43         mov [d], b
8408   3A0C             _for135_cond:
8409   3A0C FA FD FF      lea d, [bp + -3] ; $j
8410   3A0F 2A            mov b, [d]
8411   3A10             ; START RELATIONAL
8412   3A10 D7            push a
8413   3A11 11            mov a, b
8414   3A12 3B 4F 61      mov d, _quad_x ; $quad_x
8415   3A15 2A            mov b, [d]
8416   3A16             ; START TERMS
8417   3A16 D7            push a
8418   3A17 11            mov a, b
8419   3A18 26 01 00      mov b, $1
8420   3A1B 56            add b, a
8421   3A1C E4            pop a
8422   3A1D             ; END TERMS
8423   3A1D B0            cmp a, b
8424   3A1E FD 73         slt ; <= (signed)
8425   3A20 E4            pop a
8426   3A21             ; END RELATIONAL
8427   3A21 C0 00 00      cmp b, 0
8428   3A24 C6 03 3B      je _for135_exit
8429   3A27             _for135_block:
8430   3A27             ;; putchar(' '); 
8431   3A27 26 20 00      mov b, $20
8432   3A2A DD            push bl
8433   3A2B 07 FB 12      call putchar
8434   3A2E 51 01 00      add sp, 1
8435   3A31             ;; if (i > 0 && i <= 8 && j > 0 && j <= 8) { 
8436   3A31             _if136_cond:
8437   3A31 FA FF FF      lea d, [bp + -1] ; $i
8438   3A34 2A            mov b, [d]
8439   3A35             ; START RELATIONAL
8440   3A35 D7            push a
8441   3A36 11            mov a, b
8442   3A37 26 00 00      mov b, $0
8443   3A3A B0            cmp a, b
8444   3A3B FD 7F         sgt ; >
8445   3A3D E4            pop a
8446   3A3E             ; END RELATIONAL
8447   3A3E D7            push a
8448   3A3F 11            mov a, b
8449   3A40 FA FF FF      lea d, [bp + -1] ; $i
8450   3A43 2A            mov b, [d]
8451   3A44             ; START RELATIONAL
8452   3A44 D7            push a
8453   3A45 11            mov a, b
8454   3A46 26 08 00      mov b, $8
8455   3A49 B0            cmp a, b
8456   3A4A FD 73         slt ; <= (signed)
8457   3A4C E4            pop a
8458   3A4D             ; END RELATIONAL
8459   3A4D FD A7         sand a, b
8460   3A4F 11            mov a, b
8461   3A50 FA FD FF      lea d, [bp + -3] ; $j
8462   3A53 2A            mov b, [d]
8463   3A54             ; START RELATIONAL
8464   3A54 D7            push a
8465   3A55 11            mov a, b
8466   3A56 26 00 00      mov b, $0
8467   3A59 B0            cmp a, b
8468   3A5A FD 7F         sgt ; >
8469   3A5C E4            pop a
8470   3A5D             ; END RELATIONAL
8471   3A5D FD A7         sand a, b
8472   3A5F 11            mov a, b
8473   3A60 FA FD FF      lea d, [bp + -3] ; $j
8474   3A63 2A            mov b, [d]
8475   3A64             ; START RELATIONAL
8476   3A64 D7            push a
8477   3A65 11            mov a, b
8478   3A66 26 08 00      mov b, $8
8479   3A69 B0            cmp a, b
8480   3A6A FD 73         slt ; <= (signed)
8481   3A6C E4            pop a
8482   3A6D             ; END RELATIONAL
8483   3A6D FD A7         sand a, b
8484   3A6F E4            pop a
8485   3A70 C0 00 00      cmp b, 0
8486   3A73 C6 DB 3A      je _if136_else
8487   3A76             _if136_true:
8488   3A76             ;; map[i][j] = map[i][j] |   0x1000		/* Set if this sector was mapped */          ; 
8489   3A76 3B 9A 60      mov d, _map_data ; $map
8490   3A79 D7            push a
8491   3A7A DA            push d
8492   3A7B FA FF FF      lea d, [bp + -1] ; $i
8493   3A7E 2A            mov b, [d]
8494   3A7F E7            pop d
8495   3A80 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8496   3A84 DA            push d
8497   3A85 FA FD FF      lea d, [bp + -3] ; $j
8498   3A88 2A            mov b, [d]
8499   3A89 E7            pop d
8500   3A8A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8501   3A8E E4            pop a
8502   3A8F DA            push d
8503   3A90 3B 9A 60      mov d, _map_data ; $map
8504   3A93 D7            push a
8505   3A94 DA            push d
8506   3A95 FA FF FF      lea d, [bp + -1] ; $i
8507   3A98 2A            mov b, [d]
8508   3A99 E7            pop d
8509   3A9A FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8510   3A9E DA            push d
8511   3A9F FA FD FF      lea d, [bp + -3] ; $j
8512   3AA2 2A            mov b, [d]
8513   3AA3 E7            pop d
8514   3AA4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8515   3AA8 E4            pop a
8516   3AA9 2A            mov b, [d]
8517   3AAA D7            push a
8518   3AAB 11            mov a, b
8519   3AAC 26 00 10      mov b, $1000
8520   3AAF FD 70         or b, a ; |
8521   3AB1 E4            pop a
8522   3AB2 E7            pop d
8523   3AB3 FD 43         mov [d], b
8524   3AB5             ;; putbcd(map[i][j]); 
8525   3AB5 3B 9A 60      mov d, _map_data ; $map
8526   3AB8 D7            push a
8527   3AB9 DA            push d
8528   3ABA FA FF FF      lea d, [bp + -1] ; $i
8529   3ABD 2A            mov b, [d]
8530   3ABE E7            pop d
8531   3ABF FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8532   3AC3 DA            push d
8533   3AC4 FA FD FF      lea d, [bp + -3] ; $j
8534   3AC7 2A            mov b, [d]
8535   3AC8 E7            pop d
8536   3AC9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8537   3ACD E4            pop a
8538   3ACE 2A            mov b, [d]
8539   3ACF FD AB         swp b
8540   3AD1 D8            push b
8541   3AD2 07 49 39      call putbcd
8542   3AD5 51 02 00      add sp, 2
8543   3AD8 0A E7 3A      jmp _if136_exit
8544   3ADB             _if136_else:
8545   3ADB             ;; puts("***"); 
8546   3ADB 26 27 6B      mov b, _s96 ; "***"
8547   3ADE FD AB         swp b
8548   3AE0 D8            push b
8549   3AE1 07 31 13      call puts
8550   3AE4 51 02 00      add sp, 2
8551   3AE7             _if136_exit:
8552   3AE7             ;; puts(" :"); 
8553   3AE7 26 2B 6B      mov b, _s97 ; " :"
8554   3AEA FD AB         swp b
8555   3AEC D8            push b
8556   3AED 07 31 13      call puts
8557   3AF0 51 02 00      add sp, 2
8558   3AF3             _for135_update:
8559   3AF3 FA FD FF      lea d, [bp + -3] ; $j
8560   3AF6 2A            mov b, [d]
8561   3AF7 D8            push b
8562   3AF8 FD 77         inc b
8563   3AFA FA FD FF      lea d, [bp + -3] ; $j
8564   3AFD FD 43         mov [d], b
8565   3AFF E5            pop b
8566   3B00 0A 0C 3A      jmp _for135_cond
8567   3B03             _for135_exit:
8568   3B03             ;; putchar('\n'); 
8569   3B03 26 0A 00      mov b, $a
8570   3B06 DD            push bl
8571   3B07 07 FB 12      call putchar
8572   3B0A 51 01 00      add sp, 1
8573   3B0D             _for134_update:
8574   3B0D FA FF FF      lea d, [bp + -1] ; $i
8575   3B10 2A            mov b, [d]
8576   3B11 D8            push b
8577   3B12 FD 77         inc b
8578   3B14 FA FF FF      lea d, [bp + -1] ; $i
8579   3B17 FD 43         mov [d], b
8580   3B19 E5            pop b
8581   3B1A 0A CB 39      jmp _for134_cond
8582   3B1D             _for134_exit:
8583   3B1D             ;; printf("%s\n", lrs_1); 
8584   3B1D 3B B7 62      mov d, _lrs_1 ; $lrs_1
8585   3B20 2A            mov b, [d]
8586   3B21 FD AB         swp b
8587   3B23 D8            push b
8588   3B24 26 2E 6B      mov b, _s98 ; "%s\n"
8589   3B27 FD AB         swp b
8590   3B29 D8            push b
8591   3B2A 07 D1 05      call printf
8592   3B2D 51 04 00      add sp, 4
8593   3B30 F9            leave
8594   3B31 09            ret
8595   3B32             
8596   3B32             no_klingon:
8597   3B32 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8598   3B35             ;; if (klingons <= 0) { 
8599   3B35             _if137_cond:
8600   3B35 3B 48 61      mov d, _klingons ; $klingons
8601   3B38 32            mov bl, [d]
8602   3B39 A7 00         mov bh, 0
8603   3B3B             ; START RELATIONAL
8604   3B3B D7            push a
8605   3B3C 11            mov a, b
8606   3B3D 26 00 00      mov b, $0
8607   3B40 B0            cmp a, b
8608   3B41 FD 75         slu ; <= (unsigned)
8609   3B43 E4            pop a
8610   3B44             ; END RELATIONAL
8611   3B44 C0 00 00      cmp b, 0
8612   3B47 C6 5E 3B      je _if137_exit
8613   3B4A             _if137_true:
8614   3B4A             ;; puts("Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"); 
8615   3B4A 26 32 6B      mov b, _s99 ; "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"
8616   3B4D FD AB         swp b
8617   3B4F D8            push b
8618   3B50 07 31 13      call puts
8619   3B53 51 02 00      add sp, 2
8620   3B56             ;; return 1; 
8621   3B56 26 01 00      mov b, $1
8622   3B59 F9            leave
8623   3B5A 09            ret
8624   3B5B 0A 5E 3B      jmp _if137_exit
8625   3B5E             _if137_exit:
8626   3B5E             ;; return 0; 
8627   3B5E 26 00 00      mov b, $0
8628   3B61 F9            leave
8629   3B62 09            ret
8630   3B63             
8631   3B63             wipe_klingon:
8632   3B63 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8633   3B66             ;; quad[k->y+-1][k->x+-1] =  		0      ; 
8634   3B66 3B 72 61      mov d, _quad_data ; $quad
8635   3B69 D7            push a
8636   3B6A DA            push d
8637   3B6B FA 05 00      lea d, [bp + 5] ; $k
8638   3B6E FD 2A         mov d, [d]
8639   3B70 58 00 00      add d, 0
8640   3B73 32            mov bl, [d]
8641   3B74 A7 00         mov bh, 0
8642   3B76             ; START TERMS
8643   3B76 D7            push a
8644   3B77 11            mov a, b
8645   3B78 26 FF FF      mov b, $ffff
8646   3B7B 56            add b, a
8647   3B7C E4            pop a
8648   3B7D             ; END TERMS
8649   3B7D E7            pop d
8650   3B7E FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8651   3B82 DA            push d
8652   3B83 FA 05 00      lea d, [bp + 5] ; $k
8653   3B86 FD 2A         mov d, [d]
8654   3B88 58 01 00      add d, 1
8655   3B8B 32            mov bl, [d]
8656   3B8C A7 00         mov bh, 0
8657   3B8E             ; START TERMS
8658   3B8E D7            push a
8659   3B8F 11            mov a, b
8660   3B90 26 FF FF      mov b, $ffff
8661   3B93 56            add b, a
8662   3B94 E4            pop a
8663   3B95             ; END TERMS
8664   3B95 E7            pop d
8665   3B96 5A            add d, b
8666   3B97 E4            pop a
8667   3B98 DA            push d
8668   3B99 26 00 00      mov b, $0
8669   3B9C E7            pop d
8670   3B9D FD 3E         mov [d], bl
8671   3B9F F9            leave
8672   3BA0 09            ret
8673   3BA1             
8674   3BA1             phaser_control:
8675   3BA1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8676   3BA4             ; $i 
8677   3BA4             ; $phaser_energy 
8678   3BA4             ; $h1 
8679   3BA4             ; $h 
8680   3BA4             ; $k 
8681   3BA4 52 0E 00      sub sp, 14
8682   3BA7             ;; k = &kdata; 
8683   3BA7 FA F3 FF      lea d, [bp + -13] ; $k
8684   3BAA DA            push d
8685   3BAB 3B 3C 61      mov d, _kdata_data ; $kdata
8686   3BAE 2D            mov b, d
8687   3BAF E7            pop d
8688   3BB0 FD 43         mov [d], b
8689   3BB2             ;; if (inoperable(4)) 
8690   3BB2             _if138_cond:
8691   3BB2 26 04 00      mov b, $4
8692   3BB5 DD            push bl
8693   3BB6 07 4B 20      call inoperable
8694   3BB9 51 01 00      add sp, 1
8695   3BBC C0 00 00      cmp b, 0
8696   3BBF C6 C7 3B      je _if138_exit
8697   3BC2             _if138_true:
8698   3BC2             ;; return; 
8699   3BC2 F9            leave
8700   3BC3 09            ret
8701   3BC4 0A C7 3B      jmp _if138_exit
8702   3BC7             _if138_exit:
8703   3BC7             ;; if (no_klingon()) 
8704   3BC7             _if139_cond:
8705   3BC7 07 32 3B      call no_klingon
8706   3BCA C0 00 00      cmp b, 0
8707   3BCD C6 D5 3B      je _if139_exit
8708   3BD0             _if139_true:
8709   3BD0             ;; return; 
8710   3BD0 F9            leave
8711   3BD1 09            ret
8712   3BD2 0A D5 3B      jmp _if139_exit
8713   3BD5             _if139_exit:
8714   3BD5             ;; if (damage[8] < 0) 
8715   3BD5             _if140_cond:
8716   3BD5 3B 58 61      mov d, _damage_data ; $damage
8717   3BD8 D7            push a
8718   3BD9 DA            push d
8719   3BDA 26 08 00      mov b, $8
8720   3BDD E7            pop d
8721   3BDE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8722   3BE2 E4            pop a
8723   3BE3 2A            mov b, [d]
8724   3BE4             ; START RELATIONAL
8725   3BE4 D7            push a
8726   3BE5 11            mov a, b
8727   3BE6 26 00 00      mov b, $0
8728   3BE9 B0            cmp a, b
8729   3BEA FD 73         slt ; < (signed)
8730   3BEC E4            pop a
8731   3BED             ; END RELATIONAL
8732   3BED C0 00 00      cmp b, 0
8733   3BF0 C6 02 3C      je _if140_exit
8734   3BF3             _if140_true:
8735   3BF3             ;; puts("Computer failure hampers accuracy."); 
8736   3BF3 26 83 6B      mov b, _s100 ; "Computer failure hampers accuracy."
8737   3BF6 FD AB         swp b
8738   3BF8 D8            push b
8739   3BF9 07 31 13      call puts
8740   3BFC 51 02 00      add sp, 2
8741   3BFF 0A 02 3C      jmp _if140_exit
8742   3C02             _if140_exit:
8743   3C02             ;; printf("Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", energy); 
8744   3C02 3B 96 60      mov d, _energy ; $energy
8745   3C05 2A            mov b, [d]
8746   3C06 FD AB         swp b
8747   3C08 D8            push b
8748   3C09 26 A6 6B      mov b, _s101 ; "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: "
8749   3C0C FD AB         swp b
8750   3C0E D8            push b
8751   3C0F 07 D1 05      call printf
8752   3C12 51 04 00      add sp, 4
8753   3C15             ;; phaser_energy = input_int(); 
8754   3C15 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8755   3C18 DA            push d
8756   3C19 07 B4 1F      call input_int
8757   3C1C E7            pop d
8758   3C1D FD 43         mov [d], b
8759   3C1F 28            mov b, c
8760   3C20 FD 44 02 00   mov [d + 2], b
8761   3C24             ;; if (phaser_energy <= 0) 
8762   3C24             _if141_cond:
8763   3C24 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8764   3C27 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8765   3C2A FD 39         mov c, b ; And place it into C
8766   3C2C 2A            mov b, [d] ; Lower Word in B
8767   3C2D             ; START RELATIONAL
8768   3C2D D7            push a
8769   3C2E FD D8         push g
8770   3C30 11            mov a, b
8771   3C31 FD 7A         mov g, c
8772   3C33 26 00 00      mov b, $0
8773   3C36 38 00 00      mov c, 0
8774   3C39 FD 74         sle
8775   3C3B FD F1         pop g
8776   3C3D E4            pop a
8777   3C3E             ; END RELATIONAL
8778   3C3E C0 00 00      cmp b, 0
8779   3C41 C6 49 3C      je _if141_exit
8780   3C44             _if141_true:
8781   3C44             ;; return; 
8782   3C44 F9            leave
8783   3C45 09            ret
8784   3C46 0A 49 3C      jmp _if141_exit
8785   3C49             _if141_exit:
8786   3C49             ;; if (energy - phaser_energy < 0) { 
8787   3C49             _if142_cond:
8788   3C49 3B 96 60      mov d, _energy ; $energy
8789   3C4C 2A            mov b, [d]
8790   3C4D             ; START TERMS
8791   3C4D D7            push a
8792   3C4E 11            mov a, b
8793   3C4F FA FB FF      lea d, [bp + -5] ; $phaser_energy
8794   3C52 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8795   3C55 FD 39         mov c, b ; And place it into C
8796   3C57 2A            mov b, [d] ; Lower Word in B
8797   3C58 60            sub a, b
8798   3C59 27            mov b, a
8799   3C5A E4            pop a
8800   3C5B             ; END TERMS
8801   3C5B             ; START RELATIONAL
8802   3C5B D7            push a
8803   3C5C FD D8         push g
8804   3C5E 11            mov a, b
8805   3C5F FD 7A         mov g, c
8806   3C61 26 00 00      mov b, $0
8807   3C64 38 00 00      mov c, 0
8808   3C67 FD AF 00 00   cmp32 ga, cb
8808   3C6B 00 00 00 00 
8808   3C6F 00 00 00 00 
8808   3C73 00 00 00 00 
8808   3C77 00 00 00 00 
8808   3C7B 00 00 00 00 
8808   3C7F 00 00 00 00 
8808   3C83 00 00 00 00 
8808   3C87 00 00 00 00 
8808   3C8B 00 00 00 00 
8808   3C8F 00 00 00 00 
8808   3C93 00 00 00 00 
8808   3C97 00 00 00 00 
8808   3C9B 00 00 00 00 
8808   3C9F 00 00 00 00 
8808   3CA3 00 00 00 00 
8808   3CA7 00 00 00 00 
8808   3CAB 00 00 00 00 
8808   3CAF 00 00 00 00 
8808   3CB3 00 00 00 00 
8808   3CB7 00 00 00 00 
8808   3CBB 00 00 00 00 
8808   3CBF 00 00 00 00 
8808   3CC3 00 00 00 00 
8808   3CC7 00 00 00 00 
8808   3CCB 00 00 00 00 
8808   3CCF 00 00 00 00 
8808   3CD3 00 00 00 00 
8808   3CD7 00 00 00 00 
8808   3CDB 00 00 00 00 
8808   3CDF 00 00 00 00 
8808   3CE3 00 00 00 00 
8808   3CE7 00 00 00 00 
8808   3CEB 00 00 00 00 
8808   3CEF 00 00 00 00 
8808   3CF3 00 00 00 00 
8808   3CF7 00 00 00 00 
8808   3CFB 00 00 00 00 
8808   3CFF 00 00 00 00 
8808   3D03 00 00 00 00 
8808   3D07 00 00 00 00 
8808   3D0B 00 00 00 00 
8808   3D0F 00 00 00 00 
8808   3D13 00 00 00 00 
8808   3D17 00 00 00 00 
8808   3D1B 00 00 00 00 
8808   3D1F 00 00 00 00 
8808   3D23 00 00 00 00 
8808   3D27 00 00 00 00 
8808   3D2B 00 00 00 00 
8808   3D2F 00 00 00 00 
8808   3D33 00 00 00 00 
8808   3D37 00 00 00 00 
8808   3D3B 00 00 00 00 
8808   3D3F 00 00 00 00 
8808   3D43 00 00 00 00 
8808   3D47 00 00 00 00 
8808   3D4B 00 00 00 00 
8808   3D4F 00 00 00 00 
8808   3D53 00 00 00 00 
8808   3D57 00 00 00 00 
8808   3D5B 00 00 00 00 
8808   3D5F 00 00 00 00 
8808   3D63 00 00 00 00 
8808   3D67 00 
8809   3D68 FD 73         slt ; <
8810   3D6A FD F1         pop g
8811   3D6C E4            pop a
8812   3D6D             ; END RELATIONAL
8813   3D6D C0 00 00      cmp b, 0
8814   3D70 C6 84 3D      je _if142_exit
8815   3D73             _if142_true:
8816   3D73             ;; puts("Not enough energy available.\n"); 
8817   3D73 26 F9 6B      mov b, _s102 ; "Not enough energy available.\n"
8818   3D76 FD AB         swp b
8819   3D78 D8            push b
8820   3D79 07 31 13      call puts
8821   3D7C 51 02 00      add sp, 2
8822   3D7F             ;; return; 
8823   3D7F F9            leave
8824   3D80 09            ret
8825   3D81 0A 84 3D      jmp _if142_exit
8826   3D84             _if142_exit:
8827   3D84             ;; energy = energy -  phaser_energy; 
8828   3D84 3B 96 60      mov d, _energy ; $energy
8829   3D87 DA            push d
8830   3D88 3B 96 60      mov d, _energy ; $energy
8831   3D8B 2A            mov b, [d]
8832   3D8C             ; START TERMS
8833   3D8C D7            push a
8834   3D8D 11            mov a, b
8835   3D8E FA FB FF      lea d, [bp + -5] ; $phaser_energy
8836   3D91 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8837   3D94 FD 39         mov c, b ; And place it into C
8838   3D96 2A            mov b, [d] ; Lower Word in B
8839   3D97 60            sub a, b
8840   3D98 27            mov b, a
8841   3D99 E4            pop a
8842   3D9A             ; END TERMS
8843   3D9A E7            pop d
8844   3D9B FD 43         mov [d], b
8845   3D9D             ;; if (damage[8] < 0) 
8846   3D9D             _if143_cond:
8847   3D9D 3B 58 61      mov d, _damage_data ; $damage
8848   3DA0 D7            push a
8849   3DA1 DA            push d
8850   3DA2 26 08 00      mov b, $8
8851   3DA5 E7            pop d
8852   3DA6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8853   3DAA E4            pop a
8854   3DAB 2A            mov b, [d]
8855   3DAC             ; START RELATIONAL
8856   3DAC D7            push a
8857   3DAD 11            mov a, b
8858   3DAE 26 00 00      mov b, $0
8859   3DB1 B0            cmp a, b
8860   3DB2 FD 73         slt ; < (signed)
8861   3DB4 E4            pop a
8862   3DB5             ; END RELATIONAL
8863   3DB5 C0 00 00      cmp b, 0
8864   3DB8 C6 E5 3D      je _if143_else
8865   3DBB             _if143_true:
8866   3DBB             ;; phaser_energy =phaser_energy * get_rand(100); 
8867   3DBB FA FB FF      lea d, [bp + -5] ; $phaser_energy
8868   3DBE DA            push d
8869   3DBF FA FB FF      lea d, [bp + -5] ; $phaser_energy
8870   3DC2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8871   3DC5 FD 39         mov c, b ; And place it into C
8872   3DC7 2A            mov b, [d] ; Lower Word in B
8873   3DC8             ; START FACTORS
8874   3DC8 D7            push a
8875   3DC9 11            mov a, b
8876   3DCA 26 64 00      mov b, $64
8877   3DCD FD AB         swp b
8878   3DCF D8            push b
8879   3DD0 07 1C 1D      call get_rand
8880   3DD3 51 02 00      add sp, 2
8881   3DD6 AC            mul a, b ; *
8882   3DD7 11            mov a, b
8883   3DD8 27            mov b, a
8884   3DD9 E4            pop a
8885   3DDA             ; END FACTORS
8886   3DDA E7            pop d
8887   3DDB FD 43         mov [d], b
8888   3DDD 28            mov b, c
8889   3DDE FD 44 02 00   mov [d + 2], b
8890   3DE2 0A 03 3E      jmp _if143_exit
8891   3DE5             _if143_else:
8892   3DE5             ;; phaser_energy = phaser_energy* 100; 
8893   3DE5 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8894   3DE8 DA            push d
8895   3DE9 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8896   3DEC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8897   3DEF FD 39         mov c, b ; And place it into C
8898   3DF1 2A            mov b, [d] ; Lower Word in B
8899   3DF2             ; START FACTORS
8900   3DF2 D7            push a
8901   3DF3 11            mov a, b
8902   3DF4 26 64 00      mov b, $64
8903   3DF7 AC            mul a, b ; *
8904   3DF8 11            mov a, b
8905   3DF9 27            mov b, a
8906   3DFA E4            pop a
8907   3DFB             ; END FACTORS
8908   3DFB E7            pop d
8909   3DFC FD 43         mov [d], b
8910   3DFE 28            mov b, c
8911   3DFF FD 44 02 00   mov [d + 2], b
8912   3E03             _if143_exit:
8913   3E03             ;; h1 = phaser_energy / klingons; 
8914   3E03 FA F7 FF      lea d, [bp + -9] ; $h1
8915   3E06 DA            push d
8916   3E07 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8917   3E0A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8918   3E0D FD 39         mov c, b ; And place it into C
8919   3E0F 2A            mov b, [d] ; Lower Word in B
8920   3E10             ; START FACTORS
8921   3E10 D7            push a
8922   3E11 11            mov a, b
8923   3E12 3B 48 61      mov d, _klingons ; $klingons
8924   3E15 32            mov bl, [d]
8925   3E16 A7 00         mov bh, 0
8926   3E18 AE            div a, b
8927   3E19 27            mov b, a
8928   3E1A E4            pop a
8929   3E1B             ; END FACTORS
8930   3E1B E7            pop d
8931   3E1C FD 43         mov [d], b
8932   3E1E 28            mov b, c
8933   3E1F FD 44 02 00   mov [d + 2], b
8934   3E23             ;; for (i = 0; i <= 2; i++) { 
8935   3E23             _for144_init:
8936   3E23 FA FF FF      lea d, [bp + -1] ; $i
8937   3E26 DA            push d
8938   3E27 26 00 00      mov b, $0
8939   3E2A E7            pop d
8940   3E2B FD 43         mov [d], b
8941   3E2D             _for144_cond:
8942   3E2D FA FF FF      lea d, [bp + -1] ; $i
8943   3E30 2A            mov b, [d]
8944   3E31             ; START RELATIONAL
8945   3E31 D7            push a
8946   3E32 11            mov a, b
8947   3E33 26 02 00      mov b, $2
8948   3E36 B0            cmp a, b
8949   3E37 FD 73         slt ; <= (signed)
8950   3E39 E4            pop a
8951   3E3A             ; END RELATIONAL
8952   3E3A C0 00 00      cmp b, 0
8953   3E3D C6 5A 40      je _for144_exit
8954   3E40             _for144_block:
8955   3E40             ;; if (k->energy > 0) { 
8956   3E40             _if145_cond:
8957   3E40 FA F3 FF      lea d, [bp + -13] ; $k
8958   3E43 FD 2A         mov d, [d]
8959   3E45 58 02 00      add d, 2
8960   3E48 2A            mov b, [d]
8961   3E49             ; START RELATIONAL
8962   3E49 D7            push a
8963   3E4A 11            mov a, b
8964   3E4B 26 00 00      mov b, $0
8965   3E4E B0            cmp a, b
8966   3E4F FD 7F         sgt ; >
8967   3E51 E4            pop a
8968   3E52             ; END RELATIONAL
8969   3E52 C0 00 00      cmp b, 0
8970   3E55 C6 3B 40      je _if145_exit
8971   3E58             _if145_true:
8972   3E58             ;; h1 = h1 * (get_rand(100) + 200); 
8973   3E58 FA F7 FF      lea d, [bp + -9] ; $h1
8974   3E5B DA            push d
8975   3E5C FA F7 FF      lea d, [bp + -9] ; $h1
8976   3E5F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8977   3E62 FD 39         mov c, b ; And place it into C
8978   3E64 2A            mov b, [d] ; Lower Word in B
8979   3E65             ; START FACTORS
8980   3E65 D7            push a
8981   3E66 11            mov a, b
8982   3E67 26 64 00      mov b, $64
8983   3E6A FD AB         swp b
8984   3E6C D8            push b
8985   3E6D 07 1C 1D      call get_rand
8986   3E70 51 02 00      add sp, 2
8987   3E73             ; START TERMS
8988   3E73 D7            push a
8989   3E74 11            mov a, b
8990   3E75 26 C8 00      mov b, $c8
8991   3E78 56            add b, a
8992   3E79 E4            pop a
8993   3E7A             ; END TERMS
8994   3E7A AC            mul a, b ; *
8995   3E7B 11            mov a, b
8996   3E7C 27            mov b, a
8997   3E7D E4            pop a
8998   3E7E             ; END FACTORS
8999   3E7E E7            pop d
9000   3E7F FD 43         mov [d], b
9001   3E81 28            mov b, c
9002   3E82 FD 44 02 00   mov [d + 2], b
9003   3E86             ;; h1 =h1/ distance_to(k); 
9004   3E86 FA F7 FF      lea d, [bp + -9] ; $h1
9005   3E89 DA            push d
9006   3E8A FA F7 FF      lea d, [bp + -9] ; $h1
9007   3E8D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9008   3E90 FD 39         mov c, b ; And place it into C
9009   3E92 2A            mov b, [d] ; Lower Word in B
9010   3E93             ; START FACTORS
9011   3E93 D7            push a
9012   3E94 11            mov a, b
9013   3E95 FA F3 FF      lea d, [bp + -13] ; $k
9014   3E98 2A            mov b, [d]
9015   3E99 FD AB         swp b
9016   3E9B D8            push b
9017   3E9C 07 BF 5F      call distance_to
9018   3E9F 51 02 00      add sp, 2
9019   3EA2 AE            div a, b
9020   3EA3 27            mov b, a
9021   3EA4 E4            pop a
9022   3EA5             ; END FACTORS
9023   3EA5 E7            pop d
9024   3EA6 FD 43         mov [d], b
9025   3EA8 28            mov b, c
9026   3EA9 FD 44 02 00   mov [d + 2], b
9027   3EAD             ;; if (h1 <= 15 * k->energy) {	/* was 0.15 */ 
9028   3EAD             _if146_cond:
9029   3EAD FA F7 FF      lea d, [bp + -9] ; $h1
9030   3EB0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9031   3EB3 FD 39         mov c, b ; And place it into C
9032   3EB5 2A            mov b, [d] ; Lower Word in B
9033   3EB6             ; START RELATIONAL
9034   3EB6 D7            push a
9035   3EB7 FD D8         push g
9036   3EB9 11            mov a, b
9037   3EBA FD 7A         mov g, c
9038   3EBC 26 0F 00      mov b, $f
9039   3EBF             ; START FACTORS
9040   3EBF D7            push a
9041   3EC0 11            mov a, b
9042   3EC1 FA F3 FF      lea d, [bp + -13] ; $k
9043   3EC4 FD 2A         mov d, [d]
9044   3EC6 58 02 00      add d, 2
9045   3EC9 2A            mov b, [d]
9046   3ECA AC            mul a, b ; *
9047   3ECB 11            mov a, b
9048   3ECC 27            mov b, a
9049   3ECD E4            pop a
9050   3ECE             ; END FACTORS
9051   3ECE 38 00 00      mov c, 0
9052   3ED1 FD 76         sleu
9053   3ED3 FD F1         pop g
9054   3ED5 E4            pop a
9055   3ED6             ; END RELATIONAL
9056   3ED6 C0 00 00      cmp b, 0
9057   3ED9 C6 03 3F      je _if146_else
9058   3EDC             _if146_true:
9059   3EDC             ;; printf("Sensors show no damage to enemy at %d, %d\n\n", k->y, k->x); 
9060   3EDC FA F3 FF      lea d, [bp + -13] ; $k
9061   3EDF FD 2A         mov d, [d]
9062   3EE1 58 01 00      add d, 1
9063   3EE4 32            mov bl, [d]
9064   3EE5 A7 00         mov bh, 0
9065   3EE7 DD            push bl
9066   3EE8 FA F3 FF      lea d, [bp + -13] ; $k
9067   3EEB FD 2A         mov d, [d]
9068   3EED 58 00 00      add d, 0
9069   3EF0 32            mov bl, [d]
9070   3EF1 A7 00         mov bh, 0
9071   3EF3 DD            push bl
9072   3EF4 26 17 6C      mov b, _s103 ; "Sensors show no damage to enemy at %d, %d\n\n"
9073   3EF7 FD AB         swp b
9074   3EF9 D8            push b
9075   3EFA 07 D1 05      call printf
9076   3EFD 51 04 00      add sp, 4
9077   3F00 0A 38 40      jmp _if146_exit
9078   3F03             _if146_else:
9079   3F03             ;; h = FROM_FIXED00(h1); 
9080   3F03 FA F5 FF      lea d, [bp + -11] ; $h
9081   3F06 DA            push d
9082   3F07 FA F7 FF      lea d, [bp + -9] ; $h1
9083   3F0A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9084   3F0D FD 39         mov c, b ; And place it into C
9085   3F0F 2A            mov b, [d] ; Lower Word in B
9086   3F10 FD AB         swp b
9087   3F12 D8            push b
9088   3F13 07 0B 1D      call FROM_FIXED00
9089   3F16 51 02 00      add sp, 2
9090   3F19 E7            pop d
9091   3F1A FD 43         mov [d], b
9092   3F1C             ;; k->energy = k->energy - h; 
9093   3F1C FA F3 FF      lea d, [bp + -13] ; $k
9094   3F1F FD 2A         mov d, [d]
9095   3F21 58 02 00      add d, 2
9096   3F24 DA            push d
9097   3F25 FA F3 FF      lea d, [bp + -13] ; $k
9098   3F28 FD 2A         mov d, [d]
9099   3F2A 58 02 00      add d, 2
9100   3F2D 2A            mov b, [d]
9101   3F2E             ; START TERMS
9102   3F2E D7            push a
9103   3F2F 11            mov a, b
9104   3F30 FA F5 FF      lea d, [bp + -11] ; $h
9105   3F33 2A            mov b, [d]
9106   3F34 60            sub a, b
9107   3F35 27            mov b, a
9108   3F36 E4            pop a
9109   3F37             ; END TERMS
9110   3F37 E7            pop d
9111   3F38 FD 43         mov [d], b
9112   3F3A             ;; printf("%d unit hit on Klingon at sector %d, %d\n", 
9113   3F3A FA F3 FF      lea d, [bp + -13] ; $k
9114   3F3D FD 2A         mov d, [d]
9115   3F3F 58 01 00      add d, 1
9116   3F42 32            mov bl, [d]
9117   3F43 A7 00         mov bh, 0
9118   3F45 DD            push bl
9119   3F46 FA F3 FF      lea d, [bp + -13] ; $k
9120   3F49 FD 2A         mov d, [d]
9121   3F4B 58 00 00      add d, 0
9122   3F4E 32            mov bl, [d]
9123   3F4F A7 00         mov bh, 0
9124   3F51 DD            push bl
9125   3F52 FA F5 FF      lea d, [bp + -11] ; $h
9126   3F55 2A            mov b, [d]
9127   3F56 FD AB         swp b
9128   3F58 D8            push b
9129   3F59 26 43 6C      mov b, _s104 ; "%d unit hit on Klingon at sector %d, %d\n"
9130   3F5C FD AB         swp b
9131   3F5E D8            push b
9132   3F5F 07 D1 05      call printf
9133   3F62 51 06 00      add sp, 6
9134   3F65             ;; if (k->energy <= 0) { 
9135   3F65             _if147_cond:
9136   3F65 FA F3 FF      lea d, [bp + -13] ; $k
9137   3F68 FD 2A         mov d, [d]
9138   3F6A 58 02 00      add d, 2
9139   3F6D 2A            mov b, [d]
9140   3F6E             ; START RELATIONAL
9141   3F6E D7            push a
9142   3F6F 11            mov a, b
9143   3F70 26 00 00      mov b, $0
9144   3F73 B0            cmp a, b
9145   3F74 FD 73         slt ; <= (signed)
9146   3F76 E4            pop a
9147   3F77             ; END RELATIONAL
9148   3F77 C0 00 00      cmp b, 0
9149   3F7A C6 20 40      je _if147_else
9150   3F7D             _if147_true:
9151   3F7D             ;; puts("*** Klingon Destroyed ***\n"); 
9152   3F7D 26 6C 6C      mov b, _s105 ; "*** Klingon Destroyed ***\n"
9153   3F80 FD AB         swp b
9154   3F82 D8            push b
9155   3F83 07 31 13      call puts
9156   3F86 51 02 00      add sp, 2
9157   3F89             ;; klingons--; 
9158   3F89 3B 48 61      mov d, _klingons ; $klingons
9159   3F8C 32            mov bl, [d]
9160   3F8D A7 00         mov bh, 0
9161   3F8F D8            push b
9162   3F90 FD 7D         dec b
9163   3F92 3B 48 61      mov d, _klingons ; $klingons
9164   3F95 FD 43         mov [d], b
9165   3F97 E5            pop b
9166   3F98             ;; klingons_left--; 
9167   3F98 3B 4A 61      mov d, _klingons_left ; $klingons_left
9168   3F9B 32            mov bl, [d]
9169   3F9C A7 00         mov bh, 0
9170   3F9E D8            push b
9171   3F9F FD 7D         dec b
9172   3FA1 3B 4A 61      mov d, _klingons_left ; $klingons_left
9173   3FA4 FD 43         mov [d], b
9174   3FA6 E5            pop b
9175   3FA7             ;; wipe_klingon(k); 
9176   3FA7 FA F3 FF      lea d, [bp + -13] ; $k
9177   3FAA 2A            mov b, [d]
9178   3FAB FD AB         swp b
9179   3FAD D8            push b
9180   3FAE 07 63 3B      call wipe_klingon
9181   3FB1 51 02 00      add sp, 2
9182   3FB4             ;; k->energy = 0; 
9183   3FB4 FA F3 FF      lea d, [bp + -13] ; $k
9184   3FB7 FD 2A         mov d, [d]
9185   3FB9 58 02 00      add d, 2
9186   3FBC DA            push d
9187   3FBD 26 00 00      mov b, $0
9188   3FC0 E7            pop d
9189   3FC1 FD 43         mov [d], b
9190   3FC3             ;; map[quad_y][quad_x] = map[quad_y][quad_x] - 0x100; 
9191   3FC3 3B 9A 60      mov d, _map_data ; $map
9192   3FC6 D7            push a
9193   3FC7 DA            push d
9194   3FC8 3B 4D 61      mov d, _quad_y ; $quad_y
9195   3FCB 2A            mov b, [d]
9196   3FCC E7            pop d
9197   3FCD FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9198   3FD1 DA            push d
9199   3FD2 3B 4F 61      mov d, _quad_x ; $quad_x
9200   3FD5 2A            mov b, [d]
9201   3FD6 E7            pop d
9202   3FD7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9203   3FDB E4            pop a
9204   3FDC DA            push d
9205   3FDD 3B 9A 60      mov d, _map_data ; $map
9206   3FE0 D7            push a
9207   3FE1 DA            push d
9208   3FE2 3B 4D 61      mov d, _quad_y ; $quad_y
9209   3FE5 2A            mov b, [d]
9210   3FE6 E7            pop d
9211   3FE7 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9212   3FEB DA            push d
9213   3FEC 3B 4F 61      mov d, _quad_x ; $quad_x
9214   3FEF 2A            mov b, [d]
9215   3FF0 E7            pop d
9216   3FF1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9217   3FF5 E4            pop a
9218   3FF6 2A            mov b, [d]
9219   3FF7             ; START TERMS
9220   3FF7 D7            push a
9221   3FF8 11            mov a, b
9222   3FF9 26 00 01      mov b, $100
9223   3FFC 60            sub a, b
9224   3FFD 27            mov b, a
9225   3FFE E4            pop a
9226   3FFF             ; END TERMS
9227   3FFF E7            pop d
9228   4000 FD 43         mov [d], b
9229   4002             ;; if (klingons_left <= 0) 
9230   4002             _if148_cond:
9231   4002 3B 4A 61      mov d, _klingons_left ; $klingons_left
9232   4005 32            mov bl, [d]
9233   4006 A7 00         mov bh, 0
9234   4008             ; START RELATIONAL
9235   4008 D7            push a
9236   4009 11            mov a, b
9237   400A 26 00 00      mov b, $0
9238   400D B0            cmp a, b
9239   400E FD 75         slu ; <= (unsigned)
9240   4010 E4            pop a
9241   4011             ; END RELATIONAL
9242   4011 C0 00 00      cmp b, 0
9243   4014 C6 1D 40      je _if148_exit
9244   4017             _if148_true:
9245   4017             ;; won_game(); 
9246   4017 07 24 55      call won_game
9247   401A 0A 1D 40      jmp _if148_exit
9248   401D             _if148_exit:
9249   401D 0A 38 40      jmp _if147_exit
9250   4020             _if147_else:
9251   4020             ;; printf("   (Sensors show %d units remaining.)\n\n", k->energy); 
9252   4020 FA F3 FF      lea d, [bp + -13] ; $k
9253   4023 FD 2A         mov d, [d]
9254   4025 58 02 00      add d, 2
9255   4028 2A            mov b, [d]
9256   4029 FD AB         swp b
9257   402B D8            push b
9258   402C 26 87 6C      mov b, _s106 ; "   (Sensors show %d units remaining.)\n\n"
9259   402F FD AB         swp b
9260   4031 D8            push b
9261   4032 07 D1 05      call printf
9262   4035 51 04 00      add sp, 4
9263   4038             _if147_exit:
9264   4038             _if146_exit:
9265   4038 0A 3B 40      jmp _if145_exit
9266   403B             _if145_exit:
9267   403B             ;; k++; 
9268   403B FA F3 FF      lea d, [bp + -13] ; $k
9269   403E 2A            mov b, [d]
9270   403F D8            push b
9271   4040 FD 77         inc b
9272   4042 FD 77         inc b
9273   4044 FA F3 FF      lea d, [bp + -13] ; $k
9274   4047 FD 43         mov [d], b
9275   4049 E5            pop b
9276   404A             _for144_update:
9277   404A FA FF FF      lea d, [bp + -1] ; $i
9278   404D 2A            mov b, [d]
9279   404E D8            push b
9280   404F FD 77         inc b
9281   4051 FA FF FF      lea d, [bp + -1] ; $i
9282   4054 FD 43         mov [d], b
9283   4056 E5            pop b
9284   4057 0A 2D 3E      jmp _for144_cond
9285   405A             _for144_exit:
9286   405A             ;; klingons_shoot(); 
9287   405A 07 D9 56      call klingons_shoot
9288   405D F9            leave
9289   405E 09            ret
9290   405F             
9291   405F             photon_torpedoes:
9292   405F F8 00 00      enter 0 ; (push bp; mov bp, sp)
9293   4062             ; $x3 
9294   4062             ; $y3 
9295   4062             ; $c1 
9296   4062             ; $c2 
9297   4062             ; $c3 
9298   4062             ; $c4 
9299   4062             ; $x 
9300   4062             ; $y 
9301   4062             ; $x1 
9302   4062             ; $x2 
9303   4062             ; $p 
9304   4062 52 15 00      sub sp, 21
9305   4065             ;; if (torps <= 0) { 
9306   4065             _if149_cond:
9307   4065 3B 4B 61      mov d, _torps ; $torps
9308   4068 32            mov bl, [d]
9309   4069 A7 00         mov bh, 0
9310   406B             ; START RELATIONAL
9311   406B D7            push a
9312   406C 11            mov a, b
9313   406D 26 00 00      mov b, $0
9314   4070 B0            cmp a, b
9315   4071 FD 75         slu ; <= (unsigned)
9316   4073 E4            pop a
9317   4074             ; END RELATIONAL
9318   4074 C0 00 00      cmp b, 0
9319   4077 C6 8B 40      je _if149_exit
9320   407A             _if149_true:
9321   407A             ;; puts("All photon torpedoes expended"); 
9322   407A 26 AF 6C      mov b, _s107 ; "All photon torpedoes expended"
9323   407D FD AB         swp b
9324   407F D8            push b
9325   4080 07 31 13      call puts
9326   4083 51 02 00      add sp, 2
9327   4086             ;; return; 
9328   4086 F9            leave
9329   4087 09            ret
9330   4088 0A 8B 40      jmp _if149_exit
9331   408B             _if149_exit:
9332   408B             ;; if (inoperable(5)) 
9333   408B             _if150_cond:
9334   408B 26 05 00      mov b, $5
9335   408E DD            push bl
9336   408F 07 4B 20      call inoperable
9337   4092 51 01 00      add sp, 1
9338   4095 C0 00 00      cmp b, 0
9339   4098 C6 A0 40      je _if150_exit
9340   409B             _if150_true:
9341   409B             ;; return; 
9342   409B F9            leave
9343   409C 09            ret
9344   409D 0A A0 40      jmp _if150_exit
9345   40A0             _if150_exit:
9346   40A0             ;; puts("Course (0-9): "); 
9347   40A0 26 E7 67      mov b, _s70 ; "Course (0-9): "
9348   40A3 FD AB         swp b
9349   40A5 D8            push b
9350   40A6 07 31 13      call puts
9351   40A9 51 02 00      add sp, 2
9352   40AC             ;; c1 = input_f00(); 
9353   40AC FA FB FF      lea d, [bp + -5] ; $c1
9354   40AF DA            push d
9355   40B0 07 42 1E      call input_f00
9356   40B3 E7            pop d
9357   40B4 FD 43         mov [d], b
9358   40B6             ;; if (c1 == 900) 
9359   40B6             _if151_cond:
9360   40B6 FA FB FF      lea d, [bp + -5] ; $c1
9361   40B9 2A            mov b, [d]
9362   40BA             ; START RELATIONAL
9363   40BA D7            push a
9364   40BB 11            mov a, b
9365   40BC 26 84 03      mov b, $384
9366   40BF B0            cmp a, b
9367   40C0 FD 71         seq ; ==
9368   40C2 E4            pop a
9369   40C3             ; END RELATIONAL
9370   40C3 C0 00 00      cmp b, 0
9371   40C6 C6 D6 40      je _if151_exit
9372   40C9             _if151_true:
9373   40C9             ;; c1 = 100; 
9374   40C9 FA FB FF      lea d, [bp + -5] ; $c1
9375   40CC DA            push d
9376   40CD 26 64 00      mov b, $64
9377   40D0 E7            pop d
9378   40D1 FD 43         mov [d], b
9379   40D3 0A D6 40      jmp _if151_exit
9380   40D6             _if151_exit:
9381   40D6             ;; if (c1 < 100 || c1 >= 900) { 
9382   40D6             _if152_cond:
9383   40D6 FA FB FF      lea d, [bp + -5] ; $c1
9384   40D9 2A            mov b, [d]
9385   40DA             ; START RELATIONAL
9386   40DA D7            push a
9387   40DB 11            mov a, b
9388   40DC 26 64 00      mov b, $64
9389   40DF B0            cmp a, b
9390   40E0 FD 73         slt ; < (signed)
9391   40E2 E4            pop a
9392   40E3             ; END RELATIONAL
9393   40E3 D7            push a
9394   40E4 11            mov a, b
9395   40E5 FA FB FF      lea d, [bp + -5] ; $c1
9396   40E8 2A            mov b, [d]
9397   40E9             ; START RELATIONAL
9398   40E9 D7            push a
9399   40EA 11            mov a, b
9400   40EB 26 84 03      mov b, $384
9401   40EE B0            cmp a, b
9402   40EF FD 80         sge ; >=
9403   40F1 E4            pop a
9404   40F2             ; END RELATIONAL
9405   40F2 FD A8         sor a, b ; ||
9406   40F4 E4            pop a
9407   40F5 C0 00 00      cmp b, 0
9408   40F8 C6 13 41      je _if152_exit
9409   40FB             _if152_true:
9410   40FB             ;; printf("Ensign Chekov%s", inc_1); 
9411   40FB 3B E6 61      mov d, _inc_1 ; $inc_1
9412   40FE 2A            mov b, [d]
9413   40FF FD AB         swp b
9414   4101 D8            push b
9415   4102 26 CD 6C      mov b, _s108 ; "Ensign Chekov%s"
9416   4105 FD AB         swp b
9417   4107 D8            push b
9418   4108 07 D1 05      call printf
9419   410B 51 04 00      add sp, 4
9420   410E             ;; return; 
9421   410E F9            leave
9422   410F 09            ret
9423   4110 0A 13 41      jmp _if152_exit
9424   4113             _if152_exit:
9425   4113             ;; energy = energy - 2; 
9426   4113 3B 96 60      mov d, _energy ; $energy
9427   4116 DA            push d
9428   4117 3B 96 60      mov d, _energy ; $energy
9429   411A 2A            mov b, [d]
9430   411B             ; START TERMS
9431   411B D7            push a
9432   411C 11            mov a, b
9433   411D 26 02 00      mov b, $2
9434   4120 60            sub a, b
9435   4121 27            mov b, a
9436   4122 E4            pop a
9437   4123             ; END TERMS
9438   4123 E7            pop d
9439   4124 FD 43         mov [d], b
9440   4126             ;; torps--; 
9441   4126 3B 4B 61      mov d, _torps ; $torps
9442   4129 32            mov bl, [d]
9443   412A A7 00         mov bh, 0
9444   412C D8            push b
9445   412D FD 7D         dec b
9446   412F 3B 4B 61      mov d, _torps ; $torps
9447   4132 FD 43         mov [d], b
9448   4134 E5            pop b
9449   4135             ;; c2 = FROM_FIXED00(c1);	/* Integer part */ 
9450   4135 FA F9 FF      lea d, [bp + -7] ; $c2
9451   4138 DA            push d
9452   4139 FA FB FF      lea d, [bp + -5] ; $c1
9453   413C 2A            mov b, [d]
9454   413D FD AB         swp b
9455   413F D8            push b
9456   4140 07 0B 1D      call FROM_FIXED00
9457   4143 51 02 00      add sp, 2
9458   4146 E7            pop d
9459   4147 FD 43         mov [d], b
9460   4149             ;; c3 = c2 + 1;		/* Next integer part */ 
9461   4149 FA F7 FF      lea d, [bp + -9] ; $c3
9462   414C DA            push d
9463   414D FA F9 FF      lea d, [bp + -7] ; $c2
9464   4150 2A            mov b, [d]
9465   4151             ; START TERMS
9466   4151 D7            push a
9467   4152 11            mov a, b
9468   4153 26 01 00      mov b, $1
9469   4156 56            add b, a
9470   4157 E4            pop a
9471   4158             ; END TERMS
9472   4158 E7            pop d
9473   4159 FD 43         mov [d], b
9474   415B             ;; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
9475   415B FA F5 FF      lea d, [bp + -11] ; $c4
9476   415E DA            push d
9477   415F FA FB FF      lea d, [bp + -5] ; $c1
9478   4162 2A            mov b, [d]
9479   4163             ; START TERMS
9480   4163 D7            push a
9481   4164 11            mov a, b
9482   4165 FA F9 FF      lea d, [bp + -7] ; $c2
9483   4168 2A            mov b, [d]
9484   4169 FD AB         swp b
9485   416B D8            push b
9486   416C 07 F9 1C      call TO_FIXED00
9487   416F 51 02 00      add sp, 2
9488   4172 60            sub a, b
9489   4173 27            mov b, a
9490   4174 E4            pop a
9491   4175             ; END TERMS
9492   4175 E7            pop d
9493   4176 FD 43         mov [d], b
9494   4178             ;; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
9495   4178 FA EF FF      lea d, [bp + -17] ; $x1
9496   417B DA            push d
9497   417C 26 64 00      mov b, $64
9498   417F             ; START FACTORS
9499   417F D7            push a
9500   4180 11            mov a, b
9501   4181 3B 76 60      mov d, _c_data ; $c
9502   4184 D7            push a
9503   4185 DA            push d
9504   4186 26 01 00      mov b, $1
9505   4189 E7            pop d
9506   418A FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9507   418E DA            push d
9508   418F FA F9 FF      lea d, [bp + -7] ; $c2
9509   4192 2A            mov b, [d]
9510   4193 E7            pop d
9511   4194 5A            add d, b
9512   4195 E4            pop a
9513   4196 32            mov bl, [d]
9514   4197 A7 00         mov bh, 0
9515   4199 AC            mul a, b ; *
9516   419A 11            mov a, b
9517   419B 27            mov b, a
9518   419C E4            pop a
9519   419D             ; END FACTORS
9520   419D             ; START TERMS
9521   419D D7            push a
9522   419E 11            mov a, b
9523   419F 3B 76 60      mov d, _c_data ; $c
9524   41A2 D7            push a
9525   41A3 DA            push d
9526   41A4 26 01 00      mov b, $1
9527   41A7 E7            pop d
9528   41A8 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9529   41AC DA            push d
9530   41AD FA F7 FF      lea d, [bp + -9] ; $c3
9531   41B0 2A            mov b, [d]
9532   41B1 E7            pop d
9533   41B2 5A            add d, b
9534   41B3 E4            pop a
9535   41B4 32            mov bl, [d]
9536   41B5 A7 00         mov bh, 0
9537   41B7             ; START TERMS
9538   41B7 D7            push a
9539   41B8 11            mov a, b
9540   41B9 3B 76 60      mov d, _c_data ; $c
9541   41BC D7            push a
9542   41BD DA            push d
9543   41BE 26 01 00      mov b, $1
9544   41C1 E7            pop d
9545   41C2 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9546   41C6 DA            push d
9547   41C7 FA F9 FF      lea d, [bp + -7] ; $c2
9548   41CA 2A            mov b, [d]
9549   41CB E7            pop d
9550   41CC 5A            add d, b
9551   41CD E4            pop a
9552   41CE 32            mov bl, [d]
9553   41CF A7 00         mov bh, 0
9554   41D1 60            sub a, b
9555   41D2 27            mov b, a
9556   41D3 E4            pop a
9557   41D4             ; END TERMS
9558   41D4             ; START FACTORS
9559   41D4 D7            push a
9560   41D5 11            mov a, b
9561   41D6 FA F5 FF      lea d, [bp + -11] ; $c4
9562   41D9 2A            mov b, [d]
9563   41DA AC            mul a, b ; *
9564   41DB 11            mov a, b
9565   41DC 27            mov b, a
9566   41DD E4            pop a
9567   41DE             ; END FACTORS
9568   41DE 56            add b, a
9569   41DF E4            pop a
9570   41E0             ; END TERMS
9571   41E0 E7            pop d
9572   41E1 FD 43         mov [d], b
9573   41E3             ;; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
9574   41E3 FA ED FF      lea d, [bp + -19] ; $x2
9575   41E6 DA            push d
9576   41E7 26 64 00      mov b, $64
9577   41EA             ; START FACTORS
9578   41EA D7            push a
9579   41EB 11            mov a, b
9580   41EC 3B 76 60      mov d, _c_data ; $c
9581   41EF D7            push a
9582   41F0 DA            push d
9583   41F1 26 02 00      mov b, $2
9584   41F4 E7            pop d
9585   41F5 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9586   41F9 DA            push d
9587   41FA FA F9 FF      lea d, [bp + -7] ; $c2
9588   41FD 2A            mov b, [d]
9589   41FE E7            pop d
9590   41FF 5A            add d, b
9591   4200 E4            pop a
9592   4201 32            mov bl, [d]
9593   4202 A7 00         mov bh, 0
9594   4204 AC            mul a, b ; *
9595   4205 11            mov a, b
9596   4206 27            mov b, a
9597   4207 E4            pop a
9598   4208             ; END FACTORS
9599   4208             ; START TERMS
9600   4208 D7            push a
9601   4209 11            mov a, b
9602   420A 3B 76 60      mov d, _c_data ; $c
9603   420D D7            push a
9604   420E DA            push d
9605   420F 26 02 00      mov b, $2
9606   4212 E7            pop d
9607   4213 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9608   4217 DA            push d
9609   4218 FA F7 FF      lea d, [bp + -9] ; $c3
9610   421B 2A            mov b, [d]
9611   421C E7            pop d
9612   421D 5A            add d, b
9613   421E E4            pop a
9614   421F 32            mov bl, [d]
9615   4220 A7 00         mov bh, 0
9616   4222             ; START TERMS
9617   4222 D7            push a
9618   4223 11            mov a, b
9619   4224 3B 76 60      mov d, _c_data ; $c
9620   4227 D7            push a
9621   4228 DA            push d
9622   4229 26 02 00      mov b, $2
9623   422C E7            pop d
9624   422D FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9625   4231 DA            push d
9626   4232 FA F9 FF      lea d, [bp + -7] ; $c2
9627   4235 2A            mov b, [d]
9628   4236 E7            pop d
9629   4237 5A            add d, b
9630   4238 E4            pop a
9631   4239 32            mov bl, [d]
9632   423A A7 00         mov bh, 0
9633   423C 60            sub a, b
9634   423D 27            mov b, a
9635   423E E4            pop a
9636   423F             ; END TERMS
9637   423F             ; START FACTORS
9638   423F D7            push a
9639   4240 11            mov a, b
9640   4241 FA F5 FF      lea d, [bp + -11] ; $c4
9641   4244 2A            mov b, [d]
9642   4245 AC            mul a, b ; *
9643   4246 11            mov a, b
9644   4247 27            mov b, a
9645   4248 E4            pop a
9646   4249             ; END FACTORS
9647   4249 56            add b, a
9648   424A E4            pop a
9649   424B             ; END TERMS
9650   424B E7            pop d
9651   424C FD 43         mov [d], b
9652   424E             ;; x = ship_y + x1; 
9653   424E FA F3 FF      lea d, [bp + -13] ; $x
9654   4251 DA            push d
9655   4252 3B 6C 61      mov d, _ship_y ; $ship_y
9656   4255 2A            mov b, [d]
9657   4256             ; START TERMS
9658   4256 D7            push a
9659   4257 11            mov a, b
9660   4258 FA EF FF      lea d, [bp + -17] ; $x1
9661   425B 2A            mov b, [d]
9662   425C 56            add b, a
9663   425D E4            pop a
9664   425E             ; END TERMS
9665   425E E7            pop d
9666   425F FD 43         mov [d], b
9667   4261             ;; y = ship_x + x2; 
9668   4261 FA F1 FF      lea d, [bp + -15] ; $y
9669   4264 DA            push d
9670   4265 3B 6E 61      mov d, _ship_x ; $ship_x
9671   4268 2A            mov b, [d]
9672   4269             ; START TERMS
9673   4269 D7            push a
9674   426A 11            mov a, b
9675   426B FA ED FF      lea d, [bp + -19] ; $x2
9676   426E 2A            mov b, [d]
9677   426F 56            add b, a
9678   4270 E4            pop a
9679   4271             ; END TERMS
9680   4271 E7            pop d
9681   4272 FD 43         mov [d], b
9682   4274             ;; x3 = FROM_FIXED00(x); 
9683   4274 FA FF FF      lea d, [bp + -1] ; $x3
9684   4277 DA            push d
9685   4278 FA F3 FF      lea d, [bp + -13] ; $x
9686   427B 2A            mov b, [d]
9687   427C FD AB         swp b
9688   427E D8            push b
9689   427F 07 0B 1D      call FROM_FIXED00
9690   4282 51 02 00      add sp, 2
9691   4285 E7            pop d
9692   4286 FD 43         mov [d], b
9693   4288             ;; y3 = FROM_FIXED00(y); 
9694   4288 FA FD FF      lea d, [bp + -3] ; $y3
9695   428B DA            push d
9696   428C FA F1 FF      lea d, [bp + -15] ; $y
9697   428F 2A            mov b, [d]
9698   4290 FD AB         swp b
9699   4292 D8            push b
9700   4293 07 0B 1D      call FROM_FIXED00
9701   4296 51 02 00      add sp, 2
9702   4299 E7            pop d
9703   429A FD 43         mov [d], b
9704   429C             ;; puts("Torpedo Track:"); 
9705   429C 26 DD 6C      mov b, _s109 ; "Torpedo Track:"
9706   429F FD AB         swp b
9707   42A1 D8            push b
9708   42A2 07 31 13      call puts
9709   42A5 51 02 00      add sp, 2
9710   42A8             ;; while (x3 >= 1 && x3 <= 8 && y3 >= 1 && y3 <= 8) { 
9711   42A8             _while153_cond:
9712   42A8 FA FF FF      lea d, [bp + -1] ; $x3
9713   42AB 2A            mov b, [d]
9714   42AC             ; START RELATIONAL
9715   42AC D7            push a
9716   42AD 11            mov a, b
9717   42AE 26 01 00      mov b, $1
9718   42B1 B0            cmp a, b
9719   42B2 FD 80         sge ; >=
9720   42B4 E4            pop a
9721   42B5             ; END RELATIONAL
9722   42B5 D7            push a
9723   42B6 11            mov a, b
9724   42B7 FA FF FF      lea d, [bp + -1] ; $x3
9725   42BA 2A            mov b, [d]
9726   42BB             ; START RELATIONAL
9727   42BB D7            push a
9728   42BC 11            mov a, b
9729   42BD 26 08 00      mov b, $8
9730   42C0 B0            cmp a, b
9731   42C1 FD 73         slt ; <= (signed)
9732   42C3 E4            pop a
9733   42C4             ; END RELATIONAL
9734   42C4 FD A7         sand a, b
9735   42C6 11            mov a, b
9736   42C7 FA FD FF      lea d, [bp + -3] ; $y3
9737   42CA 2A            mov b, [d]
9738   42CB             ; START RELATIONAL
9739   42CB D7            push a
9740   42CC 11            mov a, b
9741   42CD 26 01 00      mov b, $1
9742   42D0 B0            cmp a, b
9743   42D1 FD 80         sge ; >=
9744   42D3 E4            pop a
9745   42D4             ; END RELATIONAL
9746   42D4 FD A7         sand a, b
9747   42D6 11            mov a, b
9748   42D7 FA FD FF      lea d, [bp + -3] ; $y3
9749   42DA 2A            mov b, [d]
9750   42DB             ; START RELATIONAL
9751   42DB D7            push a
9752   42DC 11            mov a, b
9753   42DD 26 08 00      mov b, $8
9754   42E0 B0            cmp a, b
9755   42E1 FD 73         slt ; <= (signed)
9756   42E3 E4            pop a
9757   42E4             ; END RELATIONAL
9758   42E4 FD A7         sand a, b
9759   42E6 E4            pop a
9760   42E7 C0 00 00      cmp b, 0
9761   42EA C6 C7 43      je _while153_exit
9762   42ED             _while153_block:
9763   42ED             ;; printf("    %d, %d\n", x3, y3); 
9764   42ED FA FD FF      lea d, [bp + -3] ; $y3
9765   42F0 2A            mov b, [d]
9766   42F1 FD AB         swp b
9767   42F3 D8            push b
9768   42F4 FA FF FF      lea d, [bp + -1] ; $x3
9769   42F7 2A            mov b, [d]
9770   42F8 FD AB         swp b
9771   42FA D8            push b
9772   42FB 26 EC 6C      mov b, _s110 ; "    %d, %d\n"
9773   42FE FD AB         swp b
9774   4300 D8            push b
9775   4301 07 D1 05      call printf
9776   4304 51 06 00      add sp, 6
9777   4307             ;; p = quad[x3+-1][y3+-1]; 
9778   4307 FA EC FF      lea d, [bp + -20] ; $p
9779   430A DA            push d
9780   430B 3B 72 61      mov d, _quad_data ; $quad
9781   430E D7            push a
9782   430F DA            push d
9783   4310 FA FF FF      lea d, [bp + -1] ; $x3
9784   4313 2A            mov b, [d]
9785   4314             ; START TERMS
9786   4314 D7            push a
9787   4315 11            mov a, b
9788   4316 26 FF FF      mov b, $ffff
9789   4319 56            add b, a
9790   431A E4            pop a
9791   431B             ; END TERMS
9792   431B E7            pop d
9793   431C FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
9794   4320 DA            push d
9795   4321 FA FD FF      lea d, [bp + -3] ; $y3
9796   4324 2A            mov b, [d]
9797   4325             ; START TERMS
9798   4325 D7            push a
9799   4326 11            mov a, b
9800   4327 26 FF FF      mov b, $ffff
9801   432A 56            add b, a
9802   432B E4            pop a
9803   432C             ; END TERMS
9804   432C E7            pop d
9805   432D 5A            add d, b
9806   432E E4            pop a
9807   432F 32            mov bl, [d]
9808   4330 A7 00         mov bh, 0
9809   4332 E7            pop d
9810   4333 FD 3E         mov [d], bl
9811   4335             ;; if (p !=  		0       && p !=  		4     ) { 
9812   4335             _if154_cond:
9813   4335 FA EC FF      lea d, [bp + -20] ; $p
9814   4338 32            mov bl, [d]
9815   4339 A7 00         mov bh, 0
9816   433B             ; START RELATIONAL
9817   433B D7            push a
9818   433C 11            mov a, b
9819   433D 26 00 00      mov b, $0
9820   4340 B0            cmp a, b
9821   4341 FD 72         sneq ; !=
9822   4343 E4            pop a
9823   4344             ; END RELATIONAL
9824   4344 D7            push a
9825   4345 11            mov a, b
9826   4346 FA EC FF      lea d, [bp + -20] ; $p
9827   4349 32            mov bl, [d]
9828   434A A7 00         mov bh, 0
9829   434C             ; START RELATIONAL
9830   434C D7            push a
9831   434D 11            mov a, b
9832   434E 26 04 00      mov b, $4
9833   4351 B0            cmp a, b
9834   4352 FD 72         sneq ; !=
9835   4354 E4            pop a
9836   4355             ; END RELATIONAL
9837   4355 FD A7         sand a, b
9838   4357 E4            pop a
9839   4358 C0 00 00      cmp b, 0
9840   435B C6 76 43      je _if154_exit
9841   435E             _if154_true:
9842   435E             ;; torpedo_hit(x3, y3); 
9843   435E FA FD FF      lea d, [bp + -3] ; $y3
9844   4361 2A            mov b, [d]
9845   4362 DD            push bl
9846   4363 FA FF FF      lea d, [bp + -1] ; $x3
9847   4366 2A            mov b, [d]
9848   4367 DD            push bl
9849   4368 07 D8 43      call torpedo_hit
9850   436B 51 02 00      add sp, 2
9851   436E             ;; klingons_shoot(); 
9852   436E 07 D9 56      call klingons_shoot
9853   4371             ;; return; 
9854   4371 F9            leave
9855   4372 09            ret
9856   4373 0A 76 43      jmp _if154_exit
9857   4376             _if154_exit:
9858   4376             ;; x = x + x1; 
9859   4376 FA F3 FF      lea d, [bp + -13] ; $x
9860   4379 DA            push d
9861   437A FA F3 FF      lea d, [bp + -13] ; $x
9862   437D 2A            mov b, [d]
9863   437E             ; START TERMS
9864   437E D7            push a
9865   437F 11            mov a, b
9866   4380 FA EF FF      lea d, [bp + -17] ; $x1
9867   4383 2A            mov b, [d]
9868   4384 56            add b, a
9869   4385 E4            pop a
9870   4386             ; END TERMS
9871   4386 E7            pop d
9872   4387 FD 43         mov [d], b
9873   4389             ;; y = y + x2; 
9874   4389 FA F1 FF      lea d, [bp + -15] ; $y
9875   438C DA            push d
9876   438D FA F1 FF      lea d, [bp + -15] ; $y
9877   4390 2A            mov b, [d]
9878   4391             ; START TERMS
9879   4391 D7            push a
9880   4392 11            mov a, b
9881   4393 FA ED FF      lea d, [bp + -19] ; $x2
9882   4396 2A            mov b, [d]
9883   4397 56            add b, a
9884   4398 E4            pop a
9885   4399             ; END TERMS
9886   4399 E7            pop d
9887   439A FD 43         mov [d], b
9888   439C             ;; x3 = FROM_FIXED00(x); 
9889   439C FA FF FF      lea d, [bp + -1] ; $x3
9890   439F DA            push d
9891   43A0 FA F3 FF      lea d, [bp + -13] ; $x
9892   43A3 2A            mov b, [d]
9893   43A4 FD AB         swp b
9894   43A6 D8            push b
9895   43A7 07 0B 1D      call FROM_FIXED00
9896   43AA 51 02 00      add sp, 2
9897   43AD E7            pop d
9898   43AE FD 43         mov [d], b
9899   43B0             ;; y3 = FROM_FIXED00(y); 
9900   43B0 FA FD FF      lea d, [bp + -3] ; $y3
9901   43B3 DA            push d
9902   43B4 FA F1 FF      lea d, [bp + -15] ; $y
9903   43B7 2A            mov b, [d]
9904   43B8 FD AB         swp b
9905   43BA D8            push b
9906   43BB 07 0B 1D      call FROM_FIXED00
9907   43BE 51 02 00      add sp, 2
9908   43C1 E7            pop d
9909   43C2 FD 43         mov [d], b
9910   43C4 0A A8 42      jmp _while153_cond
9911   43C7             _while153_exit:
9912   43C7             ;; puts("Torpedo Missed\n"); 
9913   43C7 26 F8 6C      mov b, _s111 ; "Torpedo Missed\n"
9914   43CA FD AB         swp b
9915   43CC D8            push b
9916   43CD 07 31 13      call puts
9917   43D0 51 02 00      add sp, 2
9918   43D3             ;; klingons_shoot(); 
9919   43D3 07 D9 56      call klingons_shoot
9920   43D6 F9            leave
9921   43D7 09            ret
9922   43D8             
9923   43D8             torpedo_hit:
9924   43D8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9925   43DB             ; $i 
9926   43DB             ; $k 
9927   43DB 52 04 00      sub sp, 4
9928   43DE             ;; switch(quad[yp+-1][xp+-1]) { 
9929   43DE             _switch155_expr:
9930   43DE 3B 72 61      mov d, _quad_data ; $quad
9931   43E1 D7            push a
9932   43E2 DA            push d
9933   43E3 FA 05 00      lea d, [bp + 5] ; $yp
9934   43E6 32            mov bl, [d]
9935   43E7 A7 00         mov bh, 0
9936   43E9             ; START TERMS
9937   43E9 D7            push a
9938   43EA 11            mov a, b
9939   43EB 26 FF FF      mov b, $ffff
9940   43EE 56            add b, a
9941   43EF E4            pop a
9942   43F0             ; END TERMS
9943   43F0 E7            pop d
9944   43F1 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
9945   43F5 DA            push d
9946   43F6 FA 06 00      lea d, [bp + 6] ; $xp
9947   43F9 32            mov bl, [d]
9948   43FA A7 00         mov bh, 0
9949   43FC             ; START TERMS
9950   43FC D7            push a
9951   43FD 11            mov a, b
9952   43FE 26 FF FF      mov b, $ffff
9953   4401 56            add b, a
9954   4402 E4            pop a
9955   4403             ; END TERMS
9956   4403 E7            pop d
9957   4404 5A            add d, b
9958   4405 E4            pop a
9959   4406 32            mov bl, [d]
9960   4407 A7 00         mov bh, 0
9961   4409             _switch155_comparisons:
9962   4409 C0 01 00      cmp b, 1
9963   440C C6 1E 44      je _switch155_case0
9964   440F C0 03 00      cmp b, 3
9965   4412 C6 3A 44      je _switch155_case1
9966   4415 C0 02 00      cmp b, 2
9967   4418 C6 53 45      je _switch155_case2
9968   441B 0A 4E 46      jmp _switch155_exit
9969   441E             _switch155_case0:
9970   441E             ;; printf("Star at %d, %d absorbed torpedo energy.\n\n", yp, xp); 
9971   441E FA 06 00      lea d, [bp + 6] ; $xp
9972   4421 32            mov bl, [d]
9973   4422 A7 00         mov bh, 0
9974   4424 DD            push bl
9975   4425 FA 05 00      lea d, [bp + 5] ; $yp
9976   4428 32            mov bl, [d]
9977   4429 A7 00         mov bh, 0
9978   442B DD            push bl
9979   442C 26 08 6D      mov b, _s112 ; "Star at %d, %d absorbed torpedo energy.\n\n"
9980   442F FD AB         swp b
9981   4431 D8            push b
9982   4432 07 D1 05      call printf
9983   4435 51 04 00      add sp, 4
9984   4438             ;; return; 
9985   4438 F9            leave
9986   4439 09            ret
9987   443A             _switch155_case1:
9988   443A             ;; puts("*** Klingon Destroyed ***\n"); 
9989   443A 26 6C 6C      mov b, _s105 ; "*** Klingon Destroyed ***\n"
9990   443D FD AB         swp b
9991   443F D8            push b
9992   4440 07 31 13      call puts
9993   4443 51 02 00      add sp, 2
9994   4446             ;; klingons--; 
9995   4446 3B 48 61      mov d, _klingons ; $klingons
9996   4449 32            mov bl, [d]
9997   444A A7 00         mov bh, 0
9998   444C D8            push b
9999   444D FD 7D         dec b
10000  444F 3B 48 61      mov d, _klingons ; $klingons
10001  4452 FD 43         mov [d], b
10002  4454 E5            pop b
10003  4455             ;; klingons_left--; 
10004  4455 3B 4A 61      mov d, _klingons_left ; $klingons_left
10005  4458 32            mov bl, [d]
10006  4459 A7 00         mov bh, 0
10007  445B D8            push b
10008  445C FD 7D         dec b
10009  445E 3B 4A 61      mov d, _klingons_left ; $klingons_left
10010  4461 FD 43         mov [d], b
10011  4463 E5            pop b
10012  4464             ;; if (klingons_left <= 0) 
10013  4464             _if156_cond:
10014  4464 3B 4A 61      mov d, _klingons_left ; $klingons_left
10015  4467 32            mov bl, [d]
10016  4468 A7 00         mov bh, 0
10017  446A             ; START RELATIONAL
10018  446A D7            push a
10019  446B 11            mov a, b
10020  446C 26 00 00      mov b, $0
10021  446F B0            cmp a, b
10022  4470 FD 75         slu ; <= (unsigned)
10023  4472 E4            pop a
10024  4473             ; END RELATIONAL
10025  4473 C0 00 00      cmp b, 0
10026  4476 C6 7F 44      je _if156_exit
10027  4479             _if156_true:
10028  4479             ;; won_game(); 
10029  4479 07 24 55      call won_game
10030  447C 0A 7F 44      jmp _if156_exit
10031  447F             _if156_exit:
10032  447F             ;; k = kdata; 
10033  447F FA FD FF      lea d, [bp + -3] ; $k
10034  4482 DA            push d
10035  4483 3B 3C 61      mov d, _kdata_data ; $kdata
10036  4486 2D            mov b, d
10037  4487 E7            pop d
10038  4488 FD 43         mov [d], b
10039  448A             ;; for (i = 0; i <= 2; i++) { 
10040  448A             _for157_init:
10041  448A FA FF FF      lea d, [bp + -1] ; $i
10042  448D DA            push d
10043  448E 26 00 00      mov b, $0
10044  4491 E7            pop d
10045  4492 FD 43         mov [d], b
10046  4494             _for157_cond:
10047  4494 FA FF FF      lea d, [bp + -1] ; $i
10048  4497 2A            mov b, [d]
10049  4498             ; START RELATIONAL
10050  4498 D7            push a
10051  4499 11            mov a, b
10052  449A 26 02 00      mov b, $2
10053  449D B0            cmp a, b
10054  449E FD 73         slt ; <= (signed)
10055  44A0 E4            pop a
10056  44A1             ; END RELATIONAL
10057  44A1 C0 00 00      cmp b, 0
10058  44A4 C6 11 45      je _for157_exit
10059  44A7             _for157_block:
10060  44A7             ;; if (yp == k->y && xp == k->x) 
10061  44A7             _if158_cond:
10062  44A7 FA 05 00      lea d, [bp + 5] ; $yp
10063  44AA 32            mov bl, [d]
10064  44AB A7 00         mov bh, 0
10065  44AD             ; START RELATIONAL
10066  44AD D7            push a
10067  44AE 11            mov a, b
10068  44AF FA FD FF      lea d, [bp + -3] ; $k
10069  44B2 FD 2A         mov d, [d]
10070  44B4 58 00 00      add d, 0
10071  44B7 32            mov bl, [d]
10072  44B8 A7 00         mov bh, 0
10073  44BA B0            cmp a, b
10074  44BB FD 71         seq ; ==
10075  44BD E4            pop a
10076  44BE             ; END RELATIONAL
10077  44BE D7            push a
10078  44BF 11            mov a, b
10079  44C0 FA 06 00      lea d, [bp + 6] ; $xp
10080  44C3 32            mov bl, [d]
10081  44C4 A7 00         mov bh, 0
10082  44C6             ; START RELATIONAL
10083  44C6 D7            push a
10084  44C7 11            mov a, b
10085  44C8 FA FD FF      lea d, [bp + -3] ; $k
10086  44CB FD 2A         mov d, [d]
10087  44CD 58 01 00      add d, 1
10088  44D0 32            mov bl, [d]
10089  44D1 A7 00         mov bh, 0
10090  44D3 B0            cmp a, b
10091  44D4 FD 71         seq ; ==
10092  44D6 E4            pop a
10093  44D7             ; END RELATIONAL
10094  44D7 FD A7         sand a, b
10095  44D9 E4            pop a
10096  44DA C0 00 00      cmp b, 0
10097  44DD C6 F2 44      je _if158_exit
10098  44E0             _if158_true:
10099  44E0             ;; k->energy = 0; 
10100  44E0 FA FD FF      lea d, [bp + -3] ; $k
10101  44E3 FD 2A         mov d, [d]
10102  44E5 58 02 00      add d, 2
10103  44E8 DA            push d
10104  44E9 26 00 00      mov b, $0
10105  44EC E7            pop d
10106  44ED FD 43         mov [d], b
10107  44EF 0A F2 44      jmp _if158_exit
10108  44F2             _if158_exit:
10109  44F2             ;; k++; 
10110  44F2 FA FD FF      lea d, [bp + -3] ; $k
10111  44F5 2A            mov b, [d]
10112  44F6 D8            push b
10113  44F7 FD 77         inc b
10114  44F9 FD 77         inc b
10115  44FB FA FD FF      lea d, [bp + -3] ; $k
10116  44FE FD 43         mov [d], b
10117  4500 E5            pop b
10118  4501             _for157_update:
10119  4501 FA FF FF      lea d, [bp + -1] ; $i
10120  4504 2A            mov b, [d]
10121  4505 D8            push b
10122  4506 FD 77         inc b
10123  4508 FA FF FF      lea d, [bp + -1] ; $i
10124  450B FD 43         mov [d], b
10125  450D E5            pop b
10126  450E 0A 94 44      jmp _for157_cond
10127  4511             _for157_exit:
10128  4511             ;; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x100; 
10129  4511 3B 9A 60      mov d, _map_data ; $map
10130  4514 D7            push a
10131  4515 DA            push d
10132  4516 3B 4D 61      mov d, _quad_y ; $quad_y
10133  4519 2A            mov b, [d]
10134  451A E7            pop d
10135  451B FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10136  451F DA            push d
10137  4520 3B 4F 61      mov d, _quad_x ; $quad_x
10138  4523 2A            mov b, [d]
10139  4524 E7            pop d
10140  4525 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10141  4529 E4            pop a
10142  452A DA            push d
10143  452B 3B 9A 60      mov d, _map_data ; $map
10144  452E D7            push a
10145  452F DA            push d
10146  4530 3B 4D 61      mov d, _quad_y ; $quad_y
10147  4533 2A            mov b, [d]
10148  4534 E7            pop d
10149  4535 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10150  4539 DA            push d
10151  453A 3B 4F 61      mov d, _quad_x ; $quad_x
10152  453D 2A            mov b, [d]
10153  453E E7            pop d
10154  453F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10155  4543 E4            pop a
10156  4544 2A            mov b, [d]
10157  4545             ; START TERMS
10158  4545 D7            push a
10159  4546 11            mov a, b
10160  4547 26 00 01      mov b, $100
10161  454A 60            sub a, b
10162  454B 27            mov b, a
10163  454C E4            pop a
10164  454D             ; END TERMS
10165  454D E7            pop d
10166  454E FD 43         mov [d], b
10167  4550             ;; break; 
10168  4550 0A 4E 46      jmp _switch155_exit ; case break
10169  4553             _switch155_case2:
10170  4553             ;; puts("*** Starbase Destroyed ***"); 
10171  4553 26 32 6D      mov b, _s113 ; "*** Starbase Destroyed ***"
10172  4556 FD AB         swp b
10173  4558 D8            push b
10174  4559 07 31 13      call puts
10175  455C 51 02 00      add sp, 2
10176  455F             ;; starbases--; 
10177  455F 3B 72 60      mov d, _starbases ; $starbases
10178  4562 32            mov bl, [d]
10179  4563 A7 00         mov bh, 0
10180  4565 D8            push b
10181  4566 FD 7D         dec b
10182  4568 3B 72 60      mov d, _starbases ; $starbases
10183  456B FD 43         mov [d], b
10184  456D E5            pop b
10185  456E             ;; starbases_left--; 
10186  456E 3B 75 60      mov d, _starbases_left ; $starbases_left
10187  4571 32            mov bl, [d]
10188  4572 A7 00         mov bh, 0
10189  4574 D8            push b
10190  4575 FD 7D         dec b
10191  4577 3B 75 60      mov d, _starbases_left ; $starbases_left
10192  457A FD 43         mov [d], b
10193  457C E5            pop b
10194  457D             ;; if (starbases_left <= 0 && klingons_left <= FROM_FIXED(stardate) - time_start - time_up) { 
10195  457D             _if159_cond:
10196  457D 3B 75 60      mov d, _starbases_left ; $starbases_left
10197  4580 32            mov bl, [d]
10198  4581 A7 00         mov bh, 0
10199  4583             ; START RELATIONAL
10200  4583 D7            push a
10201  4584 11            mov a, b
10202  4585 26 00 00      mov b, $0
10203  4588 B0            cmp a, b
10204  4589 FD 73         slt ; <= (signed)
10205  458B E4            pop a
10206  458C             ; END RELATIONAL
10207  458C D7            push a
10208  458D 11            mov a, b
10209  458E 3B 4A 61      mov d, _klingons_left ; $klingons_left
10210  4591 32            mov bl, [d]
10211  4592 A7 00         mov bh, 0
10212  4594             ; START RELATIONAL
10213  4594 D7            push a
10214  4595 11            mov a, b
10215  4596 3B 70 61      mov d, _stardate ; $stardate
10216  4599 2A            mov b, [d]
10217  459A FD AB         swp b
10218  459C D8            push b
10219  459D 07 E8 1C      call FROM_FIXED
10220  45A0 51 02 00      add sp, 2
10221  45A3             ; START TERMS
10222  45A3 D7            push a
10223  45A4 11            mov a, b
10224  45A5 3B 54 61      mov d, _time_start ; $time_start
10225  45A8 2A            mov b, [d]
10226  45A9 60            sub a, b
10227  45AA 27            mov b, a
10228  45AB 11            mov a, b
10229  45AC 3B 56 61      mov d, _time_up ; $time_up
10230  45AF 2A            mov b, [d]
10231  45B0 60            sub a, b
10232  45B1 27            mov b, a
10233  45B2 E4            pop a
10234  45B3             ; END TERMS
10235  45B3 B0            cmp a, b
10236  45B4 FD 75         slu ; <= (unsigned)
10237  45B6 E4            pop a
10238  45B7             ; END RELATIONAL
10239  45B7 FD A7         sand a, b
10240  45B9 E4            pop a
10241  45BA C0 00 00      cmp b, 0
10242  45BD C6 F6 45      je _if159_exit
10243  45C0             _if159_true:
10244  45C0             ;; puts("That does it, Captain!!"); 
10245  45C0 26 4D 6D      mov b, _s114 ; "That does it, Captain!!"
10246  45C3 FD AB         swp b
10247  45C5 D8            push b
10248  45C6 07 31 13      call puts
10249  45C9 51 02 00      add sp, 2
10250  45CC             ;; puts("You are hereby relieved of command\n"); 
10251  45CC 26 65 6D      mov b, _s115 ; "You are hereby relieved of command\n"
10252  45CF FD AB         swp b
10253  45D1 D8            push b
10254  45D2 07 31 13      call puts
10255  45D5 51 02 00      add sp, 2
10256  45D8             ;; puts("and sentenced to 99 stardates of hard"); 
10257  45D8 26 89 6D      mov b, _s116 ; "and sentenced to 99 stardates of hard"
10258  45DB FD AB         swp b
10259  45DD D8            push b
10260  45DE 07 31 13      call puts
10261  45E1 51 02 00      add sp, 2
10262  45E4             ;; puts("labor on Cygnus 12!!\n"); 
10263  45E4 26 AF 6D      mov b, _s117 ; "labor on Cygnus 12!!\n"
10264  45E7 FD AB         swp b
10265  45E9 D8            push b
10266  45EA 07 31 13      call puts
10267  45ED 51 02 00      add sp, 2
10268  45F0             ;; resign_commision(); 
10269  45F0 07 09 55      call resign_commision
10270  45F3 0A F6 45      jmp _if159_exit
10271  45F6             _if159_exit:
10272  45F6             ;; puts("Starfleet Command reviewing your record to consider\n court martial!\n"); 
10273  45F6 26 C5 6D      mov b, _s118 ; "Starfleet Command reviewing your record to consider\n court martial!\n"
10274  45F9 FD AB         swp b
10275  45FB D8            push b
10276  45FC 07 31 13      call puts
10277  45FF 51 02 00      add sp, 2
10278  4602             ;; docked = 0;		/* Undock */ 
10279  4602 3B 95 60      mov d, _docked ; $docked
10280  4605 DA            push d
10281  4606 26 00 00      mov b, $0
10282  4609 E7            pop d
10283  460A FD 3E         mov [d], bl
10284  460C             ;; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x10; 
10285  460C 3B 9A 60      mov d, _map_data ; $map
10286  460F D7            push a
10287  4610 DA            push d
10288  4611 3B 4D 61      mov d, _quad_y ; $quad_y
10289  4614 2A            mov b, [d]
10290  4615 E7            pop d
10291  4616 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10292  461A DA            push d
10293  461B 3B 4F 61      mov d, _quad_x ; $quad_x
10294  461E 2A            mov b, [d]
10295  461F E7            pop d
10296  4620 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10297  4624 E4            pop a
10298  4625 DA            push d
10299  4626 3B 9A 60      mov d, _map_data ; $map
10300  4629 D7            push a
10301  462A DA            push d
10302  462B 3B 4D 61      mov d, _quad_y ; $quad_y
10303  462E 2A            mov b, [d]
10304  462F E7            pop d
10305  4630 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10306  4634 DA            push d
10307  4635 3B 4F 61      mov d, _quad_x ; $quad_x
10308  4638 2A            mov b, [d]
10309  4639 E7            pop d
10310  463A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10311  463E E4            pop a
10312  463F 2A            mov b, [d]
10313  4640             ; START TERMS
10314  4640 D7            push a
10315  4641 11            mov a, b
10316  4642 26 10 00      mov b, $10
10317  4645 60            sub a, b
10318  4646 27            mov b, a
10319  4647 E4            pop a
10320  4648             ; END TERMS
10321  4648 E7            pop d
10322  4649 FD 43         mov [d], b
10323  464B             ;; break; 
10324  464B 0A 4E 46      jmp _switch155_exit ; case break
10325  464E             _switch155_exit:
10326  464E             ;; quad[yp+-1][xp+-1] =  		0      ; 
10327  464E 3B 72 61      mov d, _quad_data ; $quad
10328  4651 D7            push a
10329  4652 DA            push d
10330  4653 FA 05 00      lea d, [bp + 5] ; $yp
10331  4656 32            mov bl, [d]
10332  4657 A7 00         mov bh, 0
10333  4659             ; START TERMS
10334  4659 D7            push a
10335  465A 11            mov a, b
10336  465B 26 FF FF      mov b, $ffff
10337  465E 56            add b, a
10338  465F E4            pop a
10339  4660             ; END TERMS
10340  4660 E7            pop d
10341  4661 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
10342  4665 DA            push d
10343  4666 FA 06 00      lea d, [bp + 6] ; $xp
10344  4669 32            mov bl, [d]
10345  466A A7 00         mov bh, 0
10346  466C             ; START TERMS
10347  466C D7            push a
10348  466D 11            mov a, b
10349  466E 26 FF FF      mov b, $ffff
10350  4671 56            add b, a
10351  4672 E4            pop a
10352  4673             ; END TERMS
10353  4673 E7            pop d
10354  4674 5A            add d, b
10355  4675 E4            pop a
10356  4676 DA            push d
10357  4677 26 00 00      mov b, $0
10358  467A E7            pop d
10359  467B FD 3E         mov [d], bl
10360  467D F9            leave
10361  467E 09            ret
10362  467F             
10363  467F             damage_control:
10364  467F F8 00 00      enter 0 ; (push bp; mov bp, sp)
10365  4682             ; $repair_cost 
10366  4682 10 00 00      mov a, $0
10367  4685 45 FF FF      mov [bp + -1], a
10368  4688             ; $i 
10369  4688 52 04 00      sub sp, 4
10370  468B             ;; if (damage[6] < 0) 
10371  468B             _if160_cond:
10372  468B 3B 58 61      mov d, _damage_data ; $damage
10373  468E D7            push a
10374  468F DA            push d
10375  4690 26 06 00      mov b, $6
10376  4693 E7            pop d
10377  4694 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10378  4698 E4            pop a
10379  4699 2A            mov b, [d]
10380  469A             ; START RELATIONAL
10381  469A D7            push a
10382  469B 11            mov a, b
10383  469C 26 00 00      mov b, $0
10384  469F B0            cmp a, b
10385  46A0 FD 73         slt ; < (signed)
10386  46A2 E4            pop a
10387  46A3             ; END RELATIONAL
10388  46A3 C0 00 00      cmp b, 0
10389  46A6 C6 B8 46      je _if160_exit
10390  46A9             _if160_true:
10391  46A9             ;; puts("Damage Control report not available."); 
10392  46A9 26 0A 6E      mov b, _s119 ; "Damage Control report not available."
10393  46AC FD AB         swp b
10394  46AE D8            push b
10395  46AF 07 31 13      call puts
10396  46B2 51 02 00      add sp, 2
10397  46B5 0A B8 46      jmp _if160_exit
10398  46B8             _if160_exit:
10399  46B8             ;; if (docked) { 
10400  46B8             _if161_cond:
10401  46B8 3B 95 60      mov d, _docked ; $docked
10402  46BB 32            mov bl, [d]
10403  46BC A7 00         mov bh, 0
10404  46BE C0 00 00      cmp b, 0
10405  46C1 C6 28 48      je _if161_exit
10406  46C4             _if161_true:
10407  46C4             ;; repair_cost = 0; 
10408  46C4 FA FF FF      lea d, [bp + -1] ; $repair_cost
10409  46C7 DA            push d
10410  46C8 26 00 00      mov b, $0
10411  46CB E7            pop d
10412  46CC FD 43         mov [d], b
10413  46CE             ;; for (i = 1; i <= 8; i++) 
10414  46CE             _for162_init:
10415  46CE FA FD FF      lea d, [bp + -3] ; $i
10416  46D1 DA            push d
10417  46D2 26 01 00      mov b, $1
10418  46D5 E7            pop d
10419  46D6 FD 43         mov [d], b
10420  46D8             _for162_cond:
10421  46D8 FA FD FF      lea d, [bp + -3] ; $i
10422  46DB 2A            mov b, [d]
10423  46DC             ; START RELATIONAL
10424  46DC D7            push a
10425  46DD 11            mov a, b
10426  46DE 26 08 00      mov b, $8
10427  46E1 B0            cmp a, b
10428  46E2 FD 73         slt ; <= (signed)
10429  46E4 E4            pop a
10430  46E5             ; END RELATIONAL
10431  46E5 C0 00 00      cmp b, 0
10432  46E8 C6 2F 47      je _for162_exit
10433  46EB             _for162_block:
10434  46EB             ;; if (damage[i] < 0) 
10435  46EB             _if163_cond:
10436  46EB 3B 58 61      mov d, _damage_data ; $damage
10437  46EE D7            push a
10438  46EF DA            push d
10439  46F0 FA FD FF      lea d, [bp + -3] ; $i
10440  46F3 2A            mov b, [d]
10441  46F4 E7            pop d
10442  46F5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10443  46F9 E4            pop a
10444  46FA 2A            mov b, [d]
10445  46FB             ; START RELATIONAL
10446  46FB D7            push a
10447  46FC 11            mov a, b
10448  46FD 26 00 00      mov b, $0
10449  4700 B0            cmp a, b
10450  4701 FD 73         slt ; < (signed)
10451  4703 E4            pop a
10452  4704             ; END RELATIONAL
10453  4704 C0 00 00      cmp b, 0
10454  4707 C6 1F 47      je _if163_exit
10455  470A             _if163_true:
10456  470A             ;; repair_cost = repair_cost + 10; 
10457  470A FA FF FF      lea d, [bp + -1] ; $repair_cost
10458  470D DA            push d
10459  470E FA FF FF      lea d, [bp + -1] ; $repair_cost
10460  4711 2A            mov b, [d]
10461  4712             ; START TERMS
10462  4712 D7            push a
10463  4713 11            mov a, b
10464  4714 26 0A 00      mov b, $a
10465  4717 56            add b, a
10466  4718 E4            pop a
10467  4719             ; END TERMS
10468  4719 E7            pop d
10469  471A FD 43         mov [d], b
10470  471C 0A 1F 47      jmp _if163_exit
10471  471F             _if163_exit:
10472  471F             _for162_update:
10473  471F FA FD FF      lea d, [bp + -3] ; $i
10474  4722 2A            mov b, [d]
10475  4723 D8            push b
10476  4724 FD 77         inc b
10477  4726 FA FD FF      lea d, [bp + -3] ; $i
10478  4729 FD 43         mov [d], b
10479  472B E5            pop b
10480  472C 0A D8 46      jmp _for162_cond
10481  472F             _for162_exit:
10482  472F             ;; if (repair_cost) { 
10483  472F             _if164_cond:
10484  472F FA FF FF      lea d, [bp + -1] ; $repair_cost
10485  4732 2A            mov b, [d]
10486  4733 C0 00 00      cmp b, 0
10487  4736 C6 25 48      je _if164_exit
10488  4739             _if164_true:
10489  4739             ;; repair_cost = repair_cost + d4; 
10490  4739 FA FF FF      lea d, [bp + -1] ; $repair_cost
10491  473C DA            push d
10492  473D FA FF FF      lea d, [bp + -1] ; $repair_cost
10493  4740 2A            mov b, [d]
10494  4741             ; START TERMS
10495  4741 D7            push a
10496  4742 11            mov a, b
10497  4743 3B 6A 61      mov d, _d4 ; $d4
10498  4746 2A            mov b, [d]
10499  4747 56            add b, a
10500  4748 E4            pop a
10501  4749             ; END TERMS
10502  4749 E7            pop d
10503  474A FD 43         mov [d], b
10504  474C             ;; if (repair_cost >= 100) 
10505  474C             _if165_cond:
10506  474C FA FF FF      lea d, [bp + -1] ; $repair_cost
10507  474F 2A            mov b, [d]
10508  4750             ; START RELATIONAL
10509  4750 D7            push a
10510  4751 11            mov a, b
10511  4752 26 64 00      mov b, $64
10512  4755 B0            cmp a, b
10513  4756 FD 80         sge ; >=
10514  4758 E4            pop a
10515  4759             ; END RELATIONAL
10516  4759 C0 00 00      cmp b, 0
10517  475C C6 6C 47      je _if165_exit
10518  475F             _if165_true:
10519  475F             ;; repair_cost = 90;	/* 0.9 */ 
10520  475F FA FF FF      lea d, [bp + -1] ; $repair_cost
10521  4762 DA            push d
10522  4763 26 5A 00      mov b, $5a
10523  4766 E7            pop d
10524  4767 FD 43         mov [d], b
10525  4769 0A 6C 47      jmp _if165_exit
10526  476C             _if165_exit:
10527  476C             ;; printf("\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? ", print100(repair_cost)); 
10528  476C FA FF FF      lea d, [bp + -1] ; $repair_cost
10529  476F 2A            mov b, [d]
10530  4770 FD AB         swp b
10531  4772 D8            push b
10532  4773 07 FC 1F      call print100
10533  4776 51 02 00      add sp, 2
10534  4779 FD AB         swp b
10535  477B D8            push b
10536  477C 26 2F 6E      mov b, _s120 ; "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? "
10537  477F FD AB         swp b
10538  4781 D8            push b
10539  4782 07 D1 05      call printf
10540  4785 51 04 00      add sp, 4
10541  4788             ;; if (yesno()) { 
10542  4788             _if166_cond:
10543  4788 07 00 1E      call yesno
10544  478B C0 00 00      cmp b, 0
10545  478E C6 20 48      je _if166_exit
10546  4791             _if166_true:
10547  4791             ;; for (i = 1; i <= 8; i++) 
10548  4791             _for167_init:
10549  4791 FA FD FF      lea d, [bp + -3] ; $i
10550  4794 DA            push d
10551  4795 26 01 00      mov b, $1
10552  4798 E7            pop d
10553  4799 FD 43         mov [d], b
10554  479B             _for167_cond:
10555  479B FA FD FF      lea d, [bp + -3] ; $i
10556  479E 2A            mov b, [d]
10557  479F             ; START RELATIONAL
10558  479F D7            push a
10559  47A0 11            mov a, b
10560  47A1 26 08 00      mov b, $8
10561  47A4 B0            cmp a, b
10562  47A5 FD 73         slt ; <= (signed)
10563  47A7 E4            pop a
10564  47A8             ; END RELATIONAL
10565  47A8 C0 00 00      cmp b, 0
10566  47AB C6 F6 47      je _for167_exit
10567  47AE             _for167_block:
10568  47AE             ;; if (damage[i] < 0) 
10569  47AE             _if168_cond:
10570  47AE 3B 58 61      mov d, _damage_data ; $damage
10571  47B1 D7            push a
10572  47B2 DA            push d
10573  47B3 FA FD FF      lea d, [bp + -3] ; $i
10574  47B6 2A            mov b, [d]
10575  47B7 E7            pop d
10576  47B8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10577  47BC E4            pop a
10578  47BD 2A            mov b, [d]
10579  47BE             ; START RELATIONAL
10580  47BE D7            push a
10581  47BF 11            mov a, b
10582  47C0 26 00 00      mov b, $0
10583  47C3 B0            cmp a, b
10584  47C4 FD 73         slt ; < (signed)
10585  47C6 E4            pop a
10586  47C7             ; END RELATIONAL
10587  47C7 C0 00 00      cmp b, 0
10588  47CA C6 E6 47      je _if168_exit
10589  47CD             _if168_true:
10590  47CD             ;; damage[i] = 0; 
10591  47CD 3B 58 61      mov d, _damage_data ; $damage
10592  47D0 D7            push a
10593  47D1 DA            push d
10594  47D2 FA FD FF      lea d, [bp + -3] ; $i
10595  47D5 2A            mov b, [d]
10596  47D6 E7            pop d
10597  47D7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10598  47DB E4            pop a
10599  47DC DA            push d
10600  47DD 26 00 00      mov b, $0
10601  47E0 E7            pop d
10602  47E1 FD 43         mov [d], b
10603  47E3 0A E6 47      jmp _if168_exit
10604  47E6             _if168_exit:
10605  47E6             _for167_update:
10606  47E6 FA FD FF      lea d, [bp + -3] ; $i
10607  47E9 2A            mov b, [d]
10608  47EA D8            push b
10609  47EB FD 77         inc b
10610  47ED FA FD FF      lea d, [bp + -3] ; $i
10611  47F0 FD 43         mov [d], b
10612  47F2 E5            pop b
10613  47F3 0A 9B 47      jmp _for167_cond
10614  47F6             _for167_exit:
10615  47F6             ;; stardate = stardate + (repair_cost + 5)/10 + 1; 
10616  47F6 3B 70 61      mov d, _stardate ; $stardate
10617  47F9 DA            push d
10618  47FA 3B 70 61      mov d, _stardate ; $stardate
10619  47FD 2A            mov b, [d]
10620  47FE             ; START TERMS
10621  47FE D7            push a
10622  47FF 11            mov a, b
10623  4800 FA FF FF      lea d, [bp + -1] ; $repair_cost
10624  4803 2A            mov b, [d]
10625  4804             ; START TERMS
10626  4804 D7            push a
10627  4805 11            mov a, b
10628  4806 26 05 00      mov b, $5
10629  4809 56            add b, a
10630  480A E4            pop a
10631  480B             ; END TERMS
10632  480B             ; START FACTORS
10633  480B D7            push a
10634  480C 11            mov a, b
10635  480D 26 0A 00      mov b, $a
10636  4810 AE            div a, b
10637  4811 27            mov b, a
10638  4812 E4            pop a
10639  4813             ; END FACTORS
10640  4813 56            add b, a
10641  4814 11            mov a, b
10642  4815 26 01 00      mov b, $1
10643  4818 56            add b, a
10644  4819 E4            pop a
10645  481A             ; END TERMS
10646  481A E7            pop d
10647  481B FD 43         mov [d], b
10648  481D 0A 20 48      jmp _if166_exit
10649  4820             _if166_exit:
10650  4820             ;; return; 
10651  4820 F9            leave
10652  4821 09            ret
10653  4822 0A 25 48      jmp _if164_exit
10654  4825             _if164_exit:
10655  4825 0A 28 48      jmp _if161_exit
10656  4828             _if161_exit:
10657  4828             ;; if (damage[6] < 0) 
10658  4828             _if169_cond:
10659  4828 3B 58 61      mov d, _damage_data ; $damage
10660  482B D7            push a
10661  482C DA            push d
10662  482D 26 06 00      mov b, $6
10663  4830 E7            pop d
10664  4831 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10665  4835 E4            pop a
10666  4836 2A            mov b, [d]
10667  4837             ; START RELATIONAL
10668  4837 D7            push a
10669  4838 11            mov a, b
10670  4839 26 00 00      mov b, $0
10671  483C B0            cmp a, b
10672  483D FD 73         slt ; < (signed)
10673  483F E4            pop a
10674  4840             ; END RELATIONAL
10675  4840 C0 00 00      cmp b, 0
10676  4843 C6 4B 48      je _if169_exit
10677  4846             _if169_true:
10678  4846             ;; return; 
10679  4846 F9            leave
10680  4847 09            ret
10681  4848 0A 4B 48      jmp _if169_exit
10682  484B             _if169_exit:
10683  484B             ;; puts("Device            State of Repair"); 
10684  484B 26 30 6E      mov b, _s121 ; "Device            State of Repair"
10685  484E FD AB         swp b
10686  4850 D8            push b
10687  4851 07 31 13      call puts
10688  4854 51 02 00      add sp, 2
10689  4857             ;; for (i = 1; i <= 8; i++) 
10690  4857             _for170_init:
10691  4857 FA FD FF      lea d, [bp + -3] ; $i
10692  485A DA            push d
10693  485B 26 01 00      mov b, $1
10694  485E E7            pop d
10695  485F FD 43         mov [d], b
10696  4861             _for170_cond:
10697  4861 FA FD FF      lea d, [bp + -3] ; $i
10698  4864 2A            mov b, [d]
10699  4865             ; START RELATIONAL
10700  4865 D7            push a
10701  4866 11            mov a, b
10702  4867 26 08 00      mov b, $8
10703  486A B0            cmp a, b
10704  486B FD 73         slt ; <= (signed)
10705  486D E4            pop a
10706  486E             ; END RELATIONAL
10707  486E C0 00 00      cmp b, 0
10708  4871 C6 BC 48      je _for170_exit
10709  4874             _for170_block:
10710  4874             ;; printf("%-25s%6s\n", get_device_name(i), print100(damage[i])); 
10711  4874 3B 58 61      mov d, _damage_data ; $damage
10712  4877 D7            push a
10713  4878 DA            push d
10714  4879 FA FD FF      lea d, [bp + -3] ; $i
10715  487C 2A            mov b, [d]
10716  487D E7            pop d
10717  487E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10718  4882 E4            pop a
10719  4883 2A            mov b, [d]
10720  4884 FD AB         swp b
10721  4886 D8            push b
10722  4887 07 FC 1F      call print100
10723  488A 51 02 00      add sp, 2
10724  488D FD AB         swp b
10725  488F D8            push b
10726  4890 FA FD FF      lea d, [bp + -3] ; $i
10727  4893 2A            mov b, [d]
10728  4894 FD AB         swp b
10729  4896 D8            push b
10730  4897 07 1B 5D      call get_device_name
10731  489A 51 02 00      add sp, 2
10732  489D FD AB         swp b
10733  489F D8            push b
10734  48A0 26 52 6E      mov b, _s122 ; "%-25s%6s\n"
10735  48A3 FD AB         swp b
10736  48A5 D8            push b
10737  48A6 07 D1 05      call printf
10738  48A9 51 06 00      add sp, 6
10739  48AC             _for170_update:
10740  48AC FA FD FF      lea d, [bp + -3] ; $i
10741  48AF 2A            mov b, [d]
10742  48B0 D8            push b
10743  48B1 FD 77         inc b
10744  48B3 FA FD FF      lea d, [bp + -3] ; $i
10745  48B6 FD 43         mov [d], b
10746  48B8 E5            pop b
10747  48B9 0A 61 48      jmp _for170_cond
10748  48BC             _for170_exit:
10749  48BC             ;; printf("\n"); 
10750  48BC 26 5C 6E      mov b, _s123 ; "\n"
10751  48BF FD AB         swp b
10752  48C1 D8            push b
10753  48C2 07 D1 05      call printf
10754  48C5 51 02 00      add sp, 2
10755  48C8 F9            leave
10756  48C9 09            ret
10757  48CA             
10758  48CA             shield_control:
10759  48CA F8 00 00      enter 0 ; (push bp; mov bp, sp)
10760  48CD             ; $i 
10761  48CD 52 02 00      sub sp, 2
10762  48D0             ;; if (inoperable(7)) 
10763  48D0             _if171_cond:
10764  48D0 26 07 00      mov b, $7
10765  48D3 DD            push bl
10766  48D4 07 4B 20      call inoperable
10767  48D7 51 01 00      add sp, 1
10768  48DA C0 00 00      cmp b, 0
10769  48DD C6 E5 48      je _if171_exit
10770  48E0             _if171_true:
10771  48E0             ;; return; 
10772  48E0 F9            leave
10773  48E1 09            ret
10774  48E2 0A E5 48      jmp _if171_exit
10775  48E5             _if171_exit:
10776  48E5             ;; printf("Energy available = %d\n\n Input number of units to shields: ", energy + shield); 
10777  48E5 3B 96 60      mov d, _energy ; $energy
10778  48E8 2A            mov b, [d]
10779  48E9             ; START TERMS
10780  48E9 D7            push a
10781  48EA 11            mov a, b
10782  48EB 3B 51 61      mov d, _shield ; $shield
10783  48EE 2A            mov b, [d]
10784  48EF 56            add b, a
10785  48F0 E4            pop a
10786  48F1             ; END TERMS
10787  48F1 FD AB         swp b
10788  48F3 D8            push b
10789  48F4 26 5E 6E      mov b, _s124 ; "Energy available = %d\n\n Input number of units to shields: "
10790  48F7 FD AB         swp b
10791  48F9 D8            push b
10792  48FA 07 D1 05      call printf
10793  48FD 51 04 00      add sp, 4
10794  4900             ;; i = input_int(); 
10795  4900 FA FF FF      lea d, [bp + -1] ; $i
10796  4903 DA            push d
10797  4904 07 B4 1F      call input_int
10798  4907 E7            pop d
10799  4908 FD 43         mov [d], b
10800  490A             ;; if (i < 0 || shield == i) { 
10801  490A             _if172_cond:
10802  490A FA FF FF      lea d, [bp + -1] ; $i
10803  490D 2A            mov b, [d]
10804  490E             ; START RELATIONAL
10805  490E D7            push a
10806  490F 11            mov a, b
10807  4910 26 00 00      mov b, $0
10808  4913 B0            cmp a, b
10809  4914 FD 73         slt ; < (signed)
10810  4916 E4            pop a
10811  4917             ; END RELATIONAL
10812  4917 D7            push a
10813  4918 11            mov a, b
10814  4919 3B 51 61      mov d, _shield ; $shield
10815  491C 2A            mov b, [d]
10816  491D             ; START RELATIONAL
10817  491D D7            push a
10818  491E 11            mov a, b
10819  491F FA FF FF      lea d, [bp + -1] ; $i
10820  4922 2A            mov b, [d]
10821  4923 B0            cmp a, b
10822  4924 FD 71         seq ; ==
10823  4926 E4            pop a
10824  4927             ; END RELATIONAL
10825  4927 FD A8         sor a, b ; ||
10826  4929 E4            pop a
10827  492A C0 00 00      cmp b, 0
10828  492D C6 41 49      je _if172_exit
10829  4930             _if172_true:
10830  4930             ;; puts("<Shields Unchanged>\n"); 
10831  4930 26 99 6E      mov b, _s125 ; "<Shields Unchanged>\n"
10832  4933 FD AB         swp b
10833  4935 D8            push b
10834  4936 07 31 13      call puts
10835  4939 51 02 00      add sp, 2
10836  493C             ;; return; 
10837  493C F9            leave
10838  493D 09            ret
10839  493E 0A 41 49      jmp _if172_exit
10840  4941             _if172_exit:
10841  4941             ;; if (i >= energy + shield) { 
10842  4941             _if173_cond:
10843  4941 FA FF FF      lea d, [bp + -1] ; $i
10844  4944 2A            mov b, [d]
10845  4945             ; START RELATIONAL
10846  4945 D7            push a
10847  4946 11            mov a, b
10848  4947 3B 96 60      mov d, _energy ; $energy
10849  494A 2A            mov b, [d]
10850  494B             ; START TERMS
10851  494B D7            push a
10852  494C 11            mov a, b
10853  494D 3B 51 61      mov d, _shield ; $shield
10854  4950 2A            mov b, [d]
10855  4951 56            add b, a
10856  4952 E4            pop a
10857  4953             ; END TERMS
10858  4953 B0            cmp a, b
10859  4954 FD 80         sge ; >=
10860  4956 E4            pop a
10861  4957             ; END RELATIONAL
10862  4957 C0 00 00      cmp b, 0
10863  495A C6 6C 49      je _if173_exit
10864  495D             _if173_true:
10865  495D             ;; puts("Shield Control Reports:\n  This is not the Federation Treasury."); 
10866  495D 26 AE 6E      mov b, _s126 ; "Shield Control Reports:\n  This is not the Federation Treasury."
10867  4960 FD AB         swp b
10868  4962 D8            push b
10869  4963 07 31 13      call puts
10870  4966 51 02 00      add sp, 2
10871  4969 0A 6C 49      jmp _if173_exit
10872  496C             _if173_exit:
10873  496C             ;; energy = energy + shield - i; 
10874  496C 3B 96 60      mov d, _energy ; $energy
10875  496F DA            push d
10876  4970 3B 96 60      mov d, _energy ; $energy
10877  4973 2A            mov b, [d]
10878  4974             ; START TERMS
10879  4974 D7            push a
10880  4975 11            mov a, b
10881  4976 3B 51 61      mov d, _shield ; $shield
10882  4979 2A            mov b, [d]
10883  497A 56            add b, a
10884  497B 11            mov a, b
10885  497C FA FF FF      lea d, [bp + -1] ; $i
10886  497F 2A            mov b, [d]
10887  4980 60            sub a, b
10888  4981 27            mov b, a
10889  4982 E4            pop a
10890  4983             ; END TERMS
10891  4983 E7            pop d
10892  4984 FD 43         mov [d], b
10893  4986             ;; shield = i; 
10894  4986 3B 51 61      mov d, _shield ; $shield
10895  4989 DA            push d
10896  498A FA FF FF      lea d, [bp + -1] ; $i
10897  498D 2A            mov b, [d]
10898  498E E7            pop d
10899  498F FD 43         mov [d], b
10900  4991             ;; printf("Deflector Control Room report:\n  Shields now at %d units per your command.\n\n", shield); 
10901  4991 3B 51 61      mov d, _shield ; $shield
10902  4994 2A            mov b, [d]
10903  4995 FD AB         swp b
10904  4997 D8            push b
10905  4998 26 ED 6E      mov b, _s127 ; "Deflector Control Room report:\n  Shields now at %d units per your command.\n\n"
10906  499B FD AB         swp b
10907  499D D8            push b
10908  499E 07 D1 05      call printf
10909  49A1 51 04 00      add sp, 4
10910  49A4 F9            leave
10911  49A5 09            ret
10912  49A6             
10913  49A6             library_computer:
10914  49A6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10915  49A9             ;; if (inoperable(8)) 
10916  49A9             _if174_cond:
10917  49A9 26 08 00      mov b, $8
10918  49AC DD            push bl
10919  49AD 07 4B 20      call inoperable
10920  49B0 51 01 00      add sp, 1
10921  49B3 C0 00 00      cmp b, 0
10922  49B6 C6 BE 49      je _if174_exit
10923  49B9             _if174_true:
10924  49B9             ;; return; 
10925  49B9 F9            leave
10926  49BA 09            ret
10927  49BB 0A BE 49      jmp _if174_exit
10928  49BE             _if174_exit:
10929  49BE             ;; puts("Computer active and awating command: "); 
10930  49BE 26 3A 6F      mov b, _s128 ; "Computer active and awating command: "
10931  49C1 FD AB         swp b
10932  49C3 D8            push b
10933  49C4 07 31 13      call puts
10934  49C7 51 02 00      add sp, 2
10935  49CA             ;; switch(input_int()) { 
10936  49CA             _switch175_expr:
10937  49CA 07 B4 1F      call input_int
10938  49CD             _switch175_comparisons:
10939  49CD C0 FF FF      cmp b, -1
10940  49D0 C6 FD 49      je _switch175_case0
10941  49D3 C0 00 00      cmp b, 0
10942  49D6 C6 00 4A      je _switch175_case1
10943  49D9 C0 01 00      cmp b, 1
10944  49DC C6 06 4A      je _switch175_case2
10945  49DF C0 02 00      cmp b, 2
10946  49E2 C6 0C 4A      je _switch175_case3
10947  49E5 C0 03 00      cmp b, 3
10948  49E8 C6 12 4A      je _switch175_case4
10949  49EB C0 04 00      cmp b, 4
10950  49EE C6 18 4A      je _switch175_case5
10951  49F1 C0 05 00      cmp b, 5
10952  49F4 C6 1E 4A      je _switch175_case6
10953  49F7 0A 24 4A      jmp _switch175_default
10954  49FA 0A 78 4A      jmp _switch175_exit
10955  49FD             _switch175_case0:
10956  49FD             ;; break; 
10957  49FD 0A 78 4A      jmp _switch175_exit ; case break
10958  4A00             _switch175_case1:
10959  4A00             ;; galactic_record(); 
10960  4A00 07 7A 4A      call galactic_record
10961  4A03             ;; break; 
10962  4A03 0A 78 4A      jmp _switch175_exit ; case break
10963  4A06             _switch175_case2:
10964  4A06             ;; status_report(); 
10965  4A06 07 9F 4B      call status_report
10966  4A09             ;; break; 
10967  4A09 0A 78 4A      jmp _switch175_exit ; case break
10968  4A0C             _switch175_case3:
10969  4A0C             ;; torpedo_data(); 
10970  4A0C 07 B5 4C      call torpedo_data
10971  4A0F             ;; break; 
10972  4A0F 0A 78 4A      jmp _switch175_exit ; case break
10973  4A12             _switch175_case4:
10974  4A12             ;; nav_data(); 
10975  4A12 07 B9 4D      call nav_data
10976  4A15             ;; break; 
10977  4A15 0A 78 4A      jmp _switch175_exit ; case break
10978  4A18             _switch175_case5:
10979  4A18             ;; dirdist_calc(); 
10980  4A18 07 1C 4E      call dirdist_calc
10981  4A1B             ;; break; 
10982  4A1B 0A 78 4A      jmp _switch175_exit ; case break
10983  4A1E             _switch175_case6:
10984  4A1E             ;; galaxy_map(); 
10985  4A1E 07 98 4F      call galaxy_map
10986  4A21             ;; break; 
10987  4A21 0A 78 4A      jmp _switch175_exit ; case break
10988  4A24             _switch175_default:
10989  4A24             ;; puts("Functions available from Library-Computer:\n\n"); 
10990  4A24 26 60 6F      mov b, _s129 ; "Functions available from Library-Computer:\n\n"
10991  4A27 FD AB         swp b
10992  4A29 D8            push b
10993  4A2A 07 31 13      call puts
10994  4A2D 51 02 00      add sp, 2
10995  4A30             ;; puts("   0 = Cumulative Galactic Record\n"); 
10996  4A30 26 8D 6F      mov b, _s130 ; "   0 = Cumulative Galactic Record\n"
10997  4A33 FD AB         swp b
10998  4A35 D8            push b
10999  4A36 07 31 13      call puts
11000  4A39 51 02 00      add sp, 2
11001  4A3C             ;; puts("   1 = Status Report\n"); 
11002  4A3C 26 B0 6F      mov b, _s131 ; "   1 = Status Report\n"
11003  4A3F FD AB         swp b
11004  4A41 D8            push b
11005  4A42 07 31 13      call puts
11006  4A45 51 02 00      add sp, 2
11007  4A48             ;; puts("   2 = Photon Torpedo Data\n"); 
11008  4A48 26 C6 6F      mov b, _s132 ; "   2 = Photon Torpedo Data\n"
11009  4A4B FD AB         swp b
11010  4A4D D8            push b
11011  4A4E 07 31 13      call puts
11012  4A51 51 02 00      add sp, 2
11013  4A54             ;; puts("   3 = Starbase Nav Data\n"); 
11014  4A54 26 E2 6F      mov b, _s133 ; "   3 = Starbase Nav Data\n"
11015  4A57 FD AB         swp b
11016  4A59 D8            push b
11017  4A5A 07 31 13      call puts
11018  4A5D 51 02 00      add sp, 2
11019  4A60             ;; puts("   4 = Direction/Distance Calculator\n"); 
11020  4A60 26 FC 6F      mov b, _s134 ; "   4 = Direction/Distance Calculator\n"
11021  4A63 FD AB         swp b
11022  4A65 D8            push b
11023  4A66 07 31 13      call puts
11024  4A69 51 02 00      add sp, 2
11025  4A6C             ;; puts("   5 = Galaxy Region Name Map\n"); 
11026  4A6C 26 22 70      mov b, _s135 ; "   5 = Galaxy Region Name Map\n"
11027  4A6F FD AB         swp b
11028  4A71 D8            push b
11029  4A72 07 31 13      call puts
11030  4A75 51 02 00      add sp, 2
11031  4A78             _switch175_exit:
11032  4A78 F9            leave
11033  4A79 09            ret
11034  4A7A             
11035  4A7A             galactic_record:
11036  4A7A F8 00 00      enter 0 ; (push bp; mov bp, sp)
11037  4A7D             ; $i 
11038  4A7D             ; $j 
11039  4A7D 52 04 00      sub sp, 4
11040  4A80             ;; printf("\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", quad_y, quad_x); 
11041  4A80 3B 4F 61      mov d, _quad_x ; $quad_x
11042  4A83 2A            mov b, [d]
11043  4A84 FD AB         swp b
11044  4A86 D8            push b
11045  4A87 3B 4D 61      mov d, _quad_y ; $quad_y
11046  4A8A 2A            mov b, [d]
11047  4A8B FD AB         swp b
11048  4A8D D8            push b
11049  4A8E 26 41 70      mov b, _s136 ; "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n"
11050  4A91 FD AB         swp b
11051  4A93 D8            push b
11052  4A94 07 D1 05      call printf
11053  4A97 51 06 00      add sp, 6
11054  4A9A             ;; puts("     1     2     3     4     5     6     7     8"); 
11055  4A9A 26 76 70      mov b, _s137 ; "     1     2     3     4     5     6     7     8"
11056  4A9D FD AB         swp b
11057  4A9F D8            push b
11058  4AA0 07 31 13      call puts
11059  4AA3 51 02 00      add sp, 2
11060  4AA6             ;; for (i = 1; i <= 8; i++) { 
11061  4AA6             _for176_init:
11062  4AA6 FA FF FF      lea d, [bp + -1] ; $i
11063  4AA9 DA            push d
11064  4AAA 26 01 00      mov b, $1
11065  4AAD E7            pop d
11066  4AAE FD 43         mov [d], b
11067  4AB0             _for176_cond:
11068  4AB0 FA FF FF      lea d, [bp + -1] ; $i
11069  4AB3 2A            mov b, [d]
11070  4AB4             ; START RELATIONAL
11071  4AB4 D7            push a
11072  4AB5 11            mov a, b
11073  4AB6 26 08 00      mov b, $8
11074  4AB9 B0            cmp a, b
11075  4ABA FD 73         slt ; <= (signed)
11076  4ABC E4            pop a
11077  4ABD             ; END RELATIONAL
11078  4ABD C0 00 00      cmp b, 0
11079  4AC0 C6 8A 4B      je _for176_exit
11080  4AC3             _for176_block:
11081  4AC3             ;; printf("%s%d", gr_1, i); 
11082  4AC3 FA FF FF      lea d, [bp + -1] ; $i
11083  4AC6 2A            mov b, [d]
11084  4AC7 FD AB         swp b
11085  4AC9 D8            push b
11086  4ACA 3B ED 62      mov d, _gr_1 ; $gr_1
11087  4ACD 2A            mov b, [d]
11088  4ACE FD AB         swp b
11089  4AD0 D8            push b
11090  4AD1 26 A7 70      mov b, _s138 ; "%s%d"
11091  4AD4 FD AB         swp b
11092  4AD6 D8            push b
11093  4AD7 07 D1 05      call printf
11094  4ADA 51 06 00      add sp, 6
11095  4ADD             ;; for (j = 1; j <= 8; j++) { 
11096  4ADD             _for177_init:
11097  4ADD FA FD FF      lea d, [bp + -3] ; $j
11098  4AE0 DA            push d
11099  4AE1 26 01 00      mov b, $1
11100  4AE4 E7            pop d
11101  4AE5 FD 43         mov [d], b
11102  4AE7             _for177_cond:
11103  4AE7 FA FD FF      lea d, [bp + -3] ; $j
11104  4AEA 2A            mov b, [d]
11105  4AEB             ; START RELATIONAL
11106  4AEB D7            push a
11107  4AEC 11            mov a, b
11108  4AED 26 08 00      mov b, $8
11109  4AF0 B0            cmp a, b
11110  4AF1 FD 73         slt ; <= (signed)
11111  4AF3 E4            pop a
11112  4AF4             ; END RELATIONAL
11113  4AF4 C0 00 00      cmp b, 0
11114  4AF7 C6 70 4B      je _for177_exit
11115  4AFA             _for177_block:
11116  4AFA             ;; printf("   "); 
11117  4AFA 26 60 64      mov b, _s25 ; "   "
11118  4AFD FD AB         swp b
11119  4AFF D8            push b
11120  4B00 07 D1 05      call printf
11121  4B03 51 02 00      add sp, 2
11122  4B06             ;; if (map[i][j] &   0x1000		/* Set if this sector was mapped */          ) 
11123  4B06             _if178_cond:
11124  4B06 3B 9A 60      mov d, _map_data ; $map
11125  4B09 D7            push a
11126  4B0A DA            push d
11127  4B0B FA FF FF      lea d, [bp + -1] ; $i
11128  4B0E 2A            mov b, [d]
11129  4B0F E7            pop d
11130  4B10 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11131  4B14 DA            push d
11132  4B15 FA FD FF      lea d, [bp + -3] ; $j
11133  4B18 2A            mov b, [d]
11134  4B19 E7            pop d
11135  4B1A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11136  4B1E E4            pop a
11137  4B1F 2A            mov b, [d]
11138  4B20 D7            push a
11139  4B21 11            mov a, b
11140  4B22 26 00 10      mov b, $1000
11141  4B25 FD 92         and b, a ; &
11142  4B27 E4            pop a
11143  4B28 C0 00 00      cmp b, 0
11144  4B2B C6 54 4B      je _if178_else
11145  4B2E             _if178_true:
11146  4B2E             ;; putbcd(map[i][j]); 
11147  4B2E 3B 9A 60      mov d, _map_data ; $map
11148  4B31 D7            push a
11149  4B32 DA            push d
11150  4B33 FA FF FF      lea d, [bp + -1] ; $i
11151  4B36 2A            mov b, [d]
11152  4B37 E7            pop d
11153  4B38 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11154  4B3C DA            push d
11155  4B3D FA FD FF      lea d, [bp + -3] ; $j
11156  4B40 2A            mov b, [d]
11157  4B41 E7            pop d
11158  4B42 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11159  4B46 E4            pop a
11160  4B47 2A            mov b, [d]
11161  4B48 FD AB         swp b
11162  4B4A D8            push b
11163  4B4B 07 49 39      call putbcd
11164  4B4E 51 02 00      add sp, 2
11165  4B51 0A 60 4B      jmp _if178_exit
11166  4B54             _if178_else:
11167  4B54             ;; printf("***"); 
11168  4B54 26 27 6B      mov b, _s96 ; "***"
11169  4B57 FD AB         swp b
11170  4B59 D8            push b
11171  4B5A 07 D1 05      call printf
11172  4B5D 51 02 00      add sp, 2
11173  4B60             _if178_exit:
11174  4B60             _for177_update:
11175  4B60 FA FD FF      lea d, [bp + -3] ; $j
11176  4B63 2A            mov b, [d]
11177  4B64 D8            push b
11178  4B65 FD 77         inc b
11179  4B67 FA FD FF      lea d, [bp + -3] ; $j
11180  4B6A FD 43         mov [d], b
11181  4B6C E5            pop b
11182  4B6D 0A E7 4A      jmp _for177_cond
11183  4B70             _for177_exit:
11184  4B70             ;; putchar('\n'); 
11185  4B70 26 0A 00      mov b, $a
11186  4B73 DD            push bl
11187  4B74 07 FB 12      call putchar
11188  4B77 51 01 00      add sp, 1
11189  4B7A             _for176_update:
11190  4B7A FA FF FF      lea d, [bp + -1] ; $i
11191  4B7D 2A            mov b, [d]
11192  4B7E D8            push b
11193  4B7F FD 77         inc b
11194  4B81 FA FF FF      lea d, [bp + -1] ; $i
11195  4B84 FD 43         mov [d], b
11196  4B86 E5            pop b
11197  4B87 0A B0 4A      jmp _for176_cond
11198  4B8A             _for176_exit:
11199  4B8A             ;; printf("%s\n", gr_1); 
11200  4B8A 3B ED 62      mov d, _gr_1 ; $gr_1
11201  4B8D 2A            mov b, [d]
11202  4B8E FD AB         swp b
11203  4B90 D8            push b
11204  4B91 26 2E 6B      mov b, _s98 ; "%s\n"
11205  4B94 FD AB         swp b
11206  4B96 D8            push b
11207  4B97 07 D1 05      call printf
11208  4B9A 51 04 00      add sp, 4
11209  4B9D F9            leave
11210  4B9E 09            ret
11211  4B9F             
11212  4B9F             status_report:
11213  4B9F F8 00 00      enter 0 ; (push bp; mov bp, sp)
11214  4BA2             ; $plural 
11215  4BA2             ; $left 
11216  4BA2 52 04 00      sub sp, 4
11217  4BA5             ;; plural = str_s + 1; 
11218  4BA5 FA FF FF      lea d, [bp + -1] ; $plural
11219  4BA8 DA            push d
11220  4BA9 3B F1 62      mov d, _str_s ; $str_s
11221  4BAC 2A            mov b, [d]
11222  4BAD             ; START TERMS
11223  4BAD D7            push a
11224  4BAE 11            mov a, b
11225  4BAF 26 01 00      mov b, $1
11226  4BB2 56            add b, a
11227  4BB3 E4            pop a
11228  4BB4             ; END TERMS
11229  4BB4 E7            pop d
11230  4BB5 FD 43         mov [d], b
11231  4BB7             ;; left = TO_FIXED(time_start + time_up) - stardate; 
11232  4BB7 FA FD FF      lea d, [bp + -3] ; $left
11233  4BBA DA            push d
11234  4BBB 3B 54 61      mov d, _time_start ; $time_start
11235  4BBE 2A            mov b, [d]
11236  4BBF             ; START TERMS
11237  4BBF D7            push a
11238  4BC0 11            mov a, b
11239  4BC1 3B 56 61      mov d, _time_up ; $time_up
11240  4BC4 2A            mov b, [d]
11241  4BC5 56            add b, a
11242  4BC6 E4            pop a
11243  4BC7             ; END TERMS
11244  4BC7 FD AB         swp b
11245  4BC9 D8            push b
11246  4BCA 07 D6 1C      call TO_FIXED
11247  4BCD 51 02 00      add sp, 2
11248  4BD0             ; START TERMS
11249  4BD0 D7            push a
11250  4BD1 11            mov a, b
11251  4BD2 3B 70 61      mov d, _stardate ; $stardate
11252  4BD5 2A            mov b, [d]
11253  4BD6 60            sub a, b
11254  4BD7 27            mov b, a
11255  4BD8 E4            pop a
11256  4BD9             ; END TERMS
11257  4BD9 E7            pop d
11258  4BDA FD 43         mov [d], b
11259  4BDC             ;; puts("   Status Report:\n"); 
11260  4BDC 26 AC 70      mov b, _s139 ; "   Status Report:\n"
11261  4BDF FD AB         swp b
11262  4BE1 D8            push b
11263  4BE2 07 31 13      call puts
11264  4BE5 51 02 00      add sp, 2
11265  4BE8             ;; if (klingons_left > 1) 
11266  4BE8             _if179_cond:
11267  4BE8 3B 4A 61      mov d, _klingons_left ; $klingons_left
11268  4BEB 32            mov bl, [d]
11269  4BEC A7 00         mov bh, 0
11270  4BEE             ; START RELATIONAL
11271  4BEE D7            push a
11272  4BEF 11            mov a, b
11273  4BF0 26 01 00      mov b, $1
11274  4BF3 B0            cmp a, b
11275  4BF4 FD 81         sgu ; > (unsigned)
11276  4BF6 E4            pop a
11277  4BF7             ; END RELATIONAL
11278  4BF7 C0 00 00      cmp b, 0
11279  4BFA C6 0B 4C      je _if179_exit
11280  4BFD             _if179_true:
11281  4BFD             ;; plural = str_s; 
11282  4BFD FA FF FF      lea d, [bp + -1] ; $plural
11283  4C00 DA            push d
11284  4C01 3B F1 62      mov d, _str_s ; $str_s
11285  4C04 2A            mov b, [d]
11286  4C05 E7            pop d
11287  4C06 FD 43         mov [d], b
11288  4C08 0A 0B 4C      jmp _if179_exit
11289  4C0B             _if179_exit:
11290  4C0B             ;; printf("Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 
11291  4C0B FA FD FF      lea d, [bp + -3] ; $left
11292  4C0E 2A            mov b, [d]
11293  4C0F             ; START FACTORS
11294  4C0F D7            push a
11295  4C10 11            mov a, b
11296  4C11 26 0A 00      mov b, $a
11297  4C14 AE            div a, b ; 
11298  4C15 11            mov a, b
11299  4C16 27            mov b, a
11300  4C17 E4            pop a
11301  4C18             ; END FACTORS
11302  4C18 FD AB         swp b
11303  4C1A D8            push b
11304  4C1B FA FD FF      lea d, [bp + -3] ; $left
11305  4C1E 2A            mov b, [d]
11306  4C1F FD AB         swp b
11307  4C21 D8            push b
11308  4C22 07 E8 1C      call FROM_FIXED
11309  4C25 51 02 00      add sp, 2
11310  4C28 FD AB         swp b
11311  4C2A D8            push b
11312  4C2B 3B 4A 61      mov d, _klingons_left ; $klingons_left
11313  4C2E 32            mov bl, [d]
11314  4C2F A7 00         mov bh, 0
11315  4C31 DD            push bl
11316  4C32 FA FF FF      lea d, [bp + -1] ; $plural
11317  4C35 2A            mov b, [d]
11318  4C36 FD AB         swp b
11319  4C38 D8            push b
11320  4C39 26 BF 70      mov b, _s140 ; "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n"
11321  4C3C FD AB         swp b
11322  4C3E D8            push b
11323  4C3F 07 D1 05      call printf
11324  4C42 51 09 00      add sp, 9
11325  4C45             ;; if (starbases_left < 1) { 
11326  4C45             _if180_cond:
11327  4C45 3B 75 60      mov d, _starbases_left ; $starbases_left
11328  4C48 32            mov bl, [d]
11329  4C49 A7 00         mov bh, 0
11330  4C4B             ; START RELATIONAL
11331  4C4B D7            push a
11332  4C4C 11            mov a, b
11333  4C4D 26 01 00      mov b, $1
11334  4C50 B0            cmp a, b
11335  4C51 FD 73         slt ; < (signed)
11336  4C53 E4            pop a
11337  4C54             ; END RELATIONAL
11338  4C54 C0 00 00      cmp b, 0
11339  4C57 C6 69 4C      je _if180_else
11340  4C5A             _if180_true:
11341  4C5A             ;; puts("Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"); 
11342  4C5A 26 01 71      mov b, _s141 ; "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"
11343  4C5D FD AB         swp b
11344  4C5F D8            push b
11345  4C60 07 31 13      call puts
11346  4C63 51 02 00      add sp, 2
11347  4C66 0A B3 4C      jmp _if180_exit
11348  4C69             _if180_else:
11349  4C69             ;; plural = str_s; 
11350  4C69 FA FF FF      lea d, [bp + -1] ; $plural
11351  4C6C DA            push d
11352  4C6D 3B F1 62      mov d, _str_s ; $str_s
11353  4C70 2A            mov b, [d]
11354  4C71 E7            pop d
11355  4C72 FD 43         mov [d], b
11356  4C74             ;; if (starbases_left < 2) 
11357  4C74             _if181_cond:
11358  4C74 3B 75 60      mov d, _starbases_left ; $starbases_left
11359  4C77 32            mov bl, [d]
11360  4C78 A7 00         mov bh, 0
11361  4C7A             ; START RELATIONAL
11362  4C7A D7            push a
11363  4C7B 11            mov a, b
11364  4C7C 26 02 00      mov b, $2
11365  4C7F B0            cmp a, b
11366  4C80 FD 73         slt ; < (signed)
11367  4C82 E4            pop a
11368  4C83             ; END RELATIONAL
11369  4C83 C0 00 00      cmp b, 0
11370  4C86 C6 99 4C      je _if181_exit
11371  4C89             _if181_true:
11372  4C89             ;; plural++; 
11373  4C89 FA FF FF      lea d, [bp + -1] ; $plural
11374  4C8C 2A            mov b, [d]
11375  4C8D D8            push b
11376  4C8E FD 77         inc b
11377  4C90 FA FF FF      lea d, [bp + -1] ; $plural
11378  4C93 FD 43         mov [d], b
11379  4C95 E5            pop b
11380  4C96 0A 99 4C      jmp _if181_exit
11381  4C99             _if181_exit:
11382  4C99             ;; printf("The Federation is maintaining %d starbase%s in the galaxy\n\n", starbases_left, plural); 
11383  4C99 FA FF FF      lea d, [bp + -1] ; $plural
11384  4C9C 2A            mov b, [d]
11385  4C9D FD AB         swp b
11386  4C9F D8            push b
11387  4CA0 3B 75 60      mov d, _starbases_left ; $starbases_left
11388  4CA3 32            mov bl, [d]
11389  4CA4 A7 00         mov bh, 0
11390  4CA6 DD            push bl
11391  4CA7 26 58 71      mov b, _s142 ; "The Federation is maintaining %d starbase%s in the galaxy\n\n"
11392  4CAA FD AB         swp b
11393  4CAC D8            push b
11394  4CAD 07 D1 05      call printf
11395  4CB0 51 05 00      add sp, 5
11396  4CB3             _if180_exit:
11397  4CB3 F9            leave
11398  4CB4 09            ret
11399  4CB5             
11400  4CB5             torpedo_data:
11401  4CB5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11402  4CB8             ; $i 
11403  4CB8             ; $plural 
11404  4CB8             ; $k 
11405  4CB8 52 06 00      sub sp, 6
11406  4CBB             ;; plural = str_s + 1; 
11407  4CBB FA FD FF      lea d, [bp + -3] ; $plural
11408  4CBE DA            push d
11409  4CBF 3B F1 62      mov d, _str_s ; $str_s
11410  4CC2 2A            mov b, [d]
11411  4CC3             ; START TERMS
11412  4CC3 D7            push a
11413  4CC4 11            mov a, b
11414  4CC5 26 01 00      mov b, $1
11415  4CC8 56            add b, a
11416  4CC9 E4            pop a
11417  4CCA             ; END TERMS
11418  4CCA E7            pop d
11419  4CCB FD 43         mov [d], b
11420  4CCD             ;; if (no_klingon()) 
11421  4CCD             _if182_cond:
11422  4CCD 07 32 3B      call no_klingon
11423  4CD0 C0 00 00      cmp b, 0
11424  4CD3 C6 DB 4C      je _if182_exit
11425  4CD6             _if182_true:
11426  4CD6             ;; return; 
11427  4CD6 F9            leave
11428  4CD7 09            ret
11429  4CD8 0A DB 4C      jmp _if182_exit
11430  4CDB             _if182_exit:
11431  4CDB             ;; if (klingons > 1) 
11432  4CDB             _if183_cond:
11433  4CDB 3B 48 61      mov d, _klingons ; $klingons
11434  4CDE 32            mov bl, [d]
11435  4CDF A7 00         mov bh, 0
11436  4CE1             ; START RELATIONAL
11437  4CE1 D7            push a
11438  4CE2 11            mov a, b
11439  4CE3 26 01 00      mov b, $1
11440  4CE6 B0            cmp a, b
11441  4CE7 FD 81         sgu ; > (unsigned)
11442  4CE9 E4            pop a
11443  4CEA             ; END RELATIONAL
11444  4CEA C0 00 00      cmp b, 0
11445  4CED C6 00 4D      je _if183_exit
11446  4CF0             _if183_true:
11447  4CF0             ;; plural--; 
11448  4CF0 FA FD FF      lea d, [bp + -3] ; $plural
11449  4CF3 2A            mov b, [d]
11450  4CF4 D8            push b
11451  4CF5 FD 7D         dec b
11452  4CF7 FA FD FF      lea d, [bp + -3] ; $plural
11453  4CFA FD 43         mov [d], b
11454  4CFC E5            pop b
11455  4CFD 0A 00 4D      jmp _if183_exit
11456  4D00             _if183_exit:
11457  4D00             ;; printf("From Enterprise to Klingon battlecriuser%s:\n\n", plural); 
11458  4D00 FA FD FF      lea d, [bp + -3] ; $plural
11459  4D03 2A            mov b, [d]
11460  4D04 FD AB         swp b
11461  4D06 D8            push b
11462  4D07 26 94 71      mov b, _s143 ; "From Enterprise to Klingon battlecriuser%s:\n\n"
11463  4D0A FD AB         swp b
11464  4D0C D8            push b
11465  4D0D 07 D1 05      call printf
11466  4D10 51 04 00      add sp, 4
11467  4D13             ;; k = kdata; 
11468  4D13 FA FB FF      lea d, [bp + -5] ; $k
11469  4D16 DA            push d
11470  4D17 3B 3C 61      mov d, _kdata_data ; $kdata
11471  4D1A 2D            mov b, d
11472  4D1B E7            pop d
11473  4D1C FD 43         mov [d], b
11474  4D1E             ;; for (i = 0; i <= 2; i++) { 
11475  4D1E             _for184_init:
11476  4D1E FA FF FF      lea d, [bp + -1] ; $i
11477  4D21 DA            push d
11478  4D22 26 00 00      mov b, $0
11479  4D25 E7            pop d
11480  4D26 FD 43         mov [d], b
11481  4D28             _for184_cond:
11482  4D28 FA FF FF      lea d, [bp + -1] ; $i
11483  4D2B 2A            mov b, [d]
11484  4D2C             ; START RELATIONAL
11485  4D2C D7            push a
11486  4D2D 11            mov a, b
11487  4D2E 26 02 00      mov b, $2
11488  4D31 B0            cmp a, b
11489  4D32 FD 73         slt ; <= (signed)
11490  4D34 E4            pop a
11491  4D35             ; END RELATIONAL
11492  4D35 C0 00 00      cmp b, 0
11493  4D38 C6 B7 4D      je _for184_exit
11494  4D3B             _for184_block:
11495  4D3B             ;; if (k->energy > 0) { 
11496  4D3B             _if185_cond:
11497  4D3B FA FB FF      lea d, [bp + -5] ; $k
11498  4D3E FD 2A         mov d, [d]
11499  4D40 58 02 00      add d, 2
11500  4D43 2A            mov b, [d]
11501  4D44             ; START RELATIONAL
11502  4D44 D7            push a
11503  4D45 11            mov a, b
11504  4D46 26 00 00      mov b, $0
11505  4D49 B0            cmp a, b
11506  4D4A FD 7F         sgt ; >
11507  4D4C E4            pop a
11508  4D4D             ; END RELATIONAL
11509  4D4D C0 00 00      cmp b, 0
11510  4D50 C6 98 4D      je _if185_exit
11511  4D53             _if185_true:
11512  4D53             ;; compute_vector(TO_FIXED00(k->y), 
11513  4D53 3B 6E 61      mov d, _ship_x ; $ship_x
11514  4D56 2A            mov b, [d]
11515  4D57 FD AB         swp b
11516  4D59 D8            push b
11517  4D5A 3B 6C 61      mov d, _ship_y ; $ship_y
11518  4D5D 2A            mov b, [d]
11519  4D5E FD AB         swp b
11520  4D60 D8            push b
11521  4D61 FA FB FF      lea d, [bp + -5] ; $k
11522  4D64 FD 2A         mov d, [d]
11523  4D66 58 01 00      add d, 1
11524  4D69 32            mov bl, [d]
11525  4D6A A7 00         mov bh, 0
11526  4D6C FD AB         swp b
11527  4D6E D8            push b
11528  4D6F 07 F9 1C      call TO_FIXED00
11529  4D72 51 02 00      add sp, 2
11530  4D75 FD AB         swp b
11531  4D77 D8            push b
11532  4D78 FA FB FF      lea d, [bp + -5] ; $k
11533  4D7B FD 2A         mov d, [d]
11534  4D7D 58 00 00      add d, 0
11535  4D80 32            mov bl, [d]
11536  4D81 A7 00         mov bh, 0
11537  4D83 FD AB         swp b
11538  4D85 D8            push b
11539  4D86 07 F9 1C      call TO_FIXED00
11540  4D89 51 02 00      add sp, 2
11541  4D8C FD AB         swp b
11542  4D8E D8            push b
11543  4D8F 07 6A 51      call compute_vector
11544  4D92 51 08 00      add sp, 8
11545  4D95 0A 98 4D      jmp _if185_exit
11546  4D98             _if185_exit:
11547  4D98             ;; k++; 
11548  4D98 FA FB FF      lea d, [bp + -5] ; $k
11549  4D9B 2A            mov b, [d]
11550  4D9C D8            push b
11551  4D9D FD 77         inc b
11552  4D9F FD 77         inc b
11553  4DA1 FA FB FF      lea d, [bp + -5] ; $k
11554  4DA4 FD 43         mov [d], b
11555  4DA6 E5            pop b
11556  4DA7             _for184_update:
11557  4DA7 FA FF FF      lea d, [bp + -1] ; $i
11558  4DAA 2A            mov b, [d]
11559  4DAB D8            push b
11560  4DAC FD 77         inc b
11561  4DAE FA FF FF      lea d, [bp + -1] ; $i
11562  4DB1 FD 43         mov [d], b
11563  4DB3 E5            pop b
11564  4DB4 0A 28 4D      jmp _for184_cond
11565  4DB7             _for184_exit:
11566  4DB7 F9            leave
11567  4DB8 09            ret
11568  4DB9             
11569  4DB9             nav_data:
11570  4DB9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11571  4DBC             ;; if (starbases <= 0) { 
11572  4DBC             _if186_cond:
11573  4DBC 3B 72 60      mov d, _starbases ; $starbases
11574  4DBF 32            mov bl, [d]
11575  4DC0 A7 00         mov bh, 0
11576  4DC2             ; START RELATIONAL
11577  4DC2 D7            push a
11578  4DC3 11            mov a, b
11579  4DC4 26 00 00      mov b, $0
11580  4DC7 B0            cmp a, b
11581  4DC8 FD 73         slt ; <= (signed)
11582  4DCA E4            pop a
11583  4DCB             ; END RELATIONAL
11584  4DCB C0 00 00      cmp b, 0
11585  4DCE C6 E2 4D      je _if186_exit
11586  4DD1             _if186_true:
11587  4DD1             ;; puts("Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n"); 
11588  4DD1 26 C2 71      mov b, _s144 ; "Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n"
11589  4DD4 FD AB         swp b
11590  4DD6 D8            push b
11591  4DD7 07 31 13      call puts
11592  4DDA 51 02 00      add sp, 2
11593  4DDD             ;; return; 
11594  4DDD F9            leave
11595  4DDE 09            ret
11596  4DDF 0A E2 4D      jmp _if186_exit
11597  4DE2             _if186_exit:
11598  4DE2             ;; compute_vector(TO_FIXED00(base_y), TO_FIXED00(base_x), ship_y, ship_x); 
11599  4DE2 3B 6E 61      mov d, _ship_x ; $ship_x
11600  4DE5 2A            mov b, [d]
11601  4DE6 FD AB         swp b
11602  4DE8 D8            push b
11603  4DE9 3B 6C 61      mov d, _ship_y ; $ship_y
11604  4DEC 2A            mov b, [d]
11605  4DED FD AB         swp b
11606  4DEF D8            push b
11607  4DF0 3B 74 60      mov d, _base_x ; $base_x
11608  4DF3 32            mov bl, [d]
11609  4DF4 A7 00         mov bh, 0
11610  4DF6 FD AB         swp b
11611  4DF8 D8            push b
11612  4DF9 07 F9 1C      call TO_FIXED00
11613  4DFC 51 02 00      add sp, 2
11614  4DFF FD AB         swp b
11615  4E01 D8            push b
11616  4E02 3B 73 60      mov d, _base_y ; $base_y
11617  4E05 32            mov bl, [d]
11618  4E06 A7 00         mov bh, 0
11619  4E08 FD AB         swp b
11620  4E0A D8            push b
11621  4E0B 07 F9 1C      call TO_FIXED00
11622  4E0E 51 02 00      add sp, 2
11623  4E11 FD AB         swp b
11624  4E13 D8            push b
11625  4E14 07 6A 51      call compute_vector
11626  4E17 51 08 00      add sp, 8
11627  4E1A F9            leave
11628  4E1B 09            ret
11629  4E1C             
11630  4E1C             dirdist_calc:
11631  4E1C F8 00 00      enter 0 ; (push bp; mov bp, sp)
11632  4E1F             ; $c1 
11633  4E1F             ; $a 
11634  4E1F             ; $w1 
11635  4E1F             ; $x 
11636  4E1F 52 08 00      sub sp, 8
11637  4E22             ;; printf("Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 
11638  4E22 3B 6E 61      mov d, _ship_x ; $ship_x
11639  4E25 2A            mov b, [d]
11640  4E26 FD AB         swp b
11641  4E28 D8            push b
11642  4E29 07 0B 1D      call FROM_FIXED00
11643  4E2C 51 02 00      add sp, 2
11644  4E2F FD AB         swp b
11645  4E31 D8            push b
11646  4E32 3B 6C 61      mov d, _ship_y ; $ship_y
11647  4E35 2A            mov b, [d]
11648  4E36 FD AB         swp b
11649  4E38 D8            push b
11650  4E39 07 0B 1D      call FROM_FIXED00
11651  4E3C 51 02 00      add sp, 2
11652  4E3F FD AB         swp b
11653  4E41 D8            push b
11654  4E42 3B 4F 61      mov d, _quad_x ; $quad_x
11655  4E45 2A            mov b, [d]
11656  4E46 FD AB         swp b
11657  4E48 D8            push b
11658  4E49 3B 4D 61      mov d, _quad_y ; $quad_y
11659  4E4C 2A            mov b, [d]
11660  4E4D FD AB         swp b
11661  4E4F D8            push b
11662  4E50 26 04 72      mov b, _s145 ; "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: "
11663  4E53 FD AB         swp b
11664  4E55 D8            push b
11665  4E56 07 D1 05      call printf
11666  4E59 51 0A 00      add sp, 10
11667  4E5C             ;; c1 = TO_FIXED00(input_int()); 
11668  4E5C FA FF FF      lea d, [bp + -1] ; $c1
11669  4E5F DA            push d
11670  4E60 07 B4 1F      call input_int
11671  4E63 FD AB         swp b
11672  4E65 D8            push b
11673  4E66 07 F9 1C      call TO_FIXED00
11674  4E69 51 02 00      add sp, 2
11675  4E6C E7            pop d
11676  4E6D FD 43         mov [d], b
11677  4E6F             ;; if (c1 < 0 || c1 > 900 ) 
11678  4E6F             _if187_cond:
11679  4E6F FA FF FF      lea d, [bp + -1] ; $c1
11680  4E72 2A            mov b, [d]
11681  4E73             ; START RELATIONAL
11682  4E73 D7            push a
11683  4E74 11            mov a, b
11684  4E75 26 00 00      mov b, $0
11685  4E78 B0            cmp a, b
11686  4E79 FD 73         slt ; < (signed)
11687  4E7B E4            pop a
11688  4E7C             ; END RELATIONAL
11689  4E7C D7            push a
11690  4E7D 11            mov a, b
11691  4E7E FA FF FF      lea d, [bp + -1] ; $c1
11692  4E81 2A            mov b, [d]
11693  4E82             ; START RELATIONAL
11694  4E82 D7            push a
11695  4E83 11            mov a, b
11696  4E84 26 84 03      mov b, $384
11697  4E87 B0            cmp a, b
11698  4E88 FD 7F         sgt ; >
11699  4E8A E4            pop a
11700  4E8B             ; END RELATIONAL
11701  4E8B FD A8         sor a, b ; ||
11702  4E8D E4            pop a
11703  4E8E C0 00 00      cmp b, 0
11704  4E91 C6 99 4E      je _if187_exit
11705  4E94             _if187_true:
11706  4E94             ;; return; 
11707  4E94 F9            leave
11708  4E95 09            ret
11709  4E96 0A 99 4E      jmp _if187_exit
11710  4E99             _if187_exit:
11711  4E99             ;; puts("Please enter initial Y coordinate: "); 
11712  4E99 26 70 72      mov b, _s146 ; "Please enter initial Y coordinate: "
11713  4E9C FD AB         swp b
11714  4E9E D8            push b
11715  4E9F 07 31 13      call puts
11716  4EA2 51 02 00      add sp, 2
11717  4EA5             ;; a = TO_FIXED00(input_int()); 
11718  4EA5 FA FD FF      lea d, [bp + -3] ; $a
11719  4EA8 DA            push d
11720  4EA9 07 B4 1F      call input_int
11721  4EAC FD AB         swp b
11722  4EAE D8            push b
11723  4EAF 07 F9 1C      call TO_FIXED00
11724  4EB2 51 02 00      add sp, 2
11725  4EB5 E7            pop d
11726  4EB6 FD 43         mov [d], b
11727  4EB8             ;; if (a < 0 || a > 900) 
11728  4EB8             _if188_cond:
11729  4EB8 FA FD FF      lea d, [bp + -3] ; $a
11730  4EBB 2A            mov b, [d]
11731  4EBC             ; START RELATIONAL
11732  4EBC D7            push a
11733  4EBD 11            mov a, b
11734  4EBE 26 00 00      mov b, $0
11735  4EC1 B0            cmp a, b
11736  4EC2 FD 73         slt ; < (signed)
11737  4EC4 E4            pop a
11738  4EC5             ; END RELATIONAL
11739  4EC5 D7            push a
11740  4EC6 11            mov a, b
11741  4EC7 FA FD FF      lea d, [bp + -3] ; $a
11742  4ECA 2A            mov b, [d]
11743  4ECB             ; START RELATIONAL
11744  4ECB D7            push a
11745  4ECC 11            mov a, b
11746  4ECD 26 84 03      mov b, $384
11747  4ED0 B0            cmp a, b
11748  4ED1 FD 7F         sgt ; >
11749  4ED3 E4            pop a
11750  4ED4             ; END RELATIONAL
11751  4ED4 FD A8         sor a, b ; ||
11752  4ED6 E4            pop a
11753  4ED7 C0 00 00      cmp b, 0
11754  4EDA C6 E2 4E      je _if188_exit
11755  4EDD             _if188_true:
11756  4EDD             ;; return; 
11757  4EDD F9            leave
11758  4EDE 09            ret
11759  4EDF 0A E2 4E      jmp _if188_exit
11760  4EE2             _if188_exit:
11761  4EE2             ;; puts("Please enter final X coordinate: "); 
11762  4EE2 26 94 72      mov b, _s147 ; "Please enter final X coordinate: "
11763  4EE5 FD AB         swp b
11764  4EE7 D8            push b
11765  4EE8 07 31 13      call puts
11766  4EEB 51 02 00      add sp, 2
11767  4EEE             ;; w1 = TO_FIXED00(input_int()); 
11768  4EEE FA FB FF      lea d, [bp + -5] ; $w1
11769  4EF1 DA            push d
11770  4EF2 07 B4 1F      call input_int
11771  4EF5 FD AB         swp b
11772  4EF7 D8            push b
11773  4EF8 07 F9 1C      call TO_FIXED00
11774  4EFB 51 02 00      add sp, 2
11775  4EFE E7            pop d
11776  4EFF FD 43         mov [d], b
11777  4F01             ;; if (w1 < 0 || w1 > 900) 
11778  4F01             _if189_cond:
11779  4F01 FA FB FF      lea d, [bp + -5] ; $w1
11780  4F04 2A            mov b, [d]
11781  4F05             ; START RELATIONAL
11782  4F05 D7            push a
11783  4F06 11            mov a, b
11784  4F07 26 00 00      mov b, $0
11785  4F0A B0            cmp a, b
11786  4F0B FD 73         slt ; < (signed)
11787  4F0D E4            pop a
11788  4F0E             ; END RELATIONAL
11789  4F0E D7            push a
11790  4F0F 11            mov a, b
11791  4F10 FA FB FF      lea d, [bp + -5] ; $w1
11792  4F13 2A            mov b, [d]
11793  4F14             ; START RELATIONAL
11794  4F14 D7            push a
11795  4F15 11            mov a, b
11796  4F16 26 84 03      mov b, $384
11797  4F19 B0            cmp a, b
11798  4F1A FD 7F         sgt ; >
11799  4F1C E4            pop a
11800  4F1D             ; END RELATIONAL
11801  4F1D FD A8         sor a, b ; ||
11802  4F1F E4            pop a
11803  4F20 C0 00 00      cmp b, 0
11804  4F23 C6 2B 4F      je _if189_exit
11805  4F26             _if189_true:
11806  4F26             ;; return; 
11807  4F26 F9            leave
11808  4F27 09            ret
11809  4F28 0A 2B 4F      jmp _if189_exit
11810  4F2B             _if189_exit:
11811  4F2B             ;; puts("Please enter final Y coordinate: "); 
11812  4F2B 26 B6 72      mov b, _s148 ; "Please enter final Y coordinate: "
11813  4F2E FD AB         swp b
11814  4F30 D8            push b
11815  4F31 07 31 13      call puts
11816  4F34 51 02 00      add sp, 2
11817  4F37             ;; x = TO_FIXED00(input_int()); 
11818  4F37 FA F9 FF      lea d, [bp + -7] ; $x
11819  4F3A DA            push d
11820  4F3B 07 B4 1F      call input_int
11821  4F3E FD AB         swp b
11822  4F40 D8            push b
11823  4F41 07 F9 1C      call TO_FIXED00
11824  4F44 51 02 00      add sp, 2
11825  4F47 E7            pop d
11826  4F48 FD 43         mov [d], b
11827  4F4A             ;; if (x < 0 || x > 900) 
11828  4F4A             _if190_cond:
11829  4F4A FA F9 FF      lea d, [bp + -7] ; $x
11830  4F4D 2A            mov b, [d]
11831  4F4E             ; START RELATIONAL
11832  4F4E D7            push a
11833  4F4F 11            mov a, b
11834  4F50 26 00 00      mov b, $0
11835  4F53 B0            cmp a, b
11836  4F54 FD 73         slt ; < (signed)
11837  4F56 E4            pop a
11838  4F57             ; END RELATIONAL
11839  4F57 D7            push a
11840  4F58 11            mov a, b
11841  4F59 FA F9 FF      lea d, [bp + -7] ; $x
11842  4F5C 2A            mov b, [d]
11843  4F5D             ; START RELATIONAL
11844  4F5D D7            push a
11845  4F5E 11            mov a, b
11846  4F5F 26 84 03      mov b, $384
11847  4F62 B0            cmp a, b
11848  4F63 FD 7F         sgt ; >
11849  4F65 E4            pop a
11850  4F66             ; END RELATIONAL
11851  4F66 FD A8         sor a, b ; ||
11852  4F68 E4            pop a
11853  4F69 C0 00 00      cmp b, 0
11854  4F6C C6 74 4F      je _if190_exit
11855  4F6F             _if190_true:
11856  4F6F             ;; return; 
11857  4F6F F9            leave
11858  4F70 09            ret
11859  4F71 0A 74 4F      jmp _if190_exit
11860  4F74             _if190_exit:
11861  4F74             ;; compute_vector(w1, x, c1, a); 
11862  4F74 FA FD FF      lea d, [bp + -3] ; $a
11863  4F77 2A            mov b, [d]
11864  4F78 FD AB         swp b
11865  4F7A D8            push b
11866  4F7B FA FF FF      lea d, [bp + -1] ; $c1
11867  4F7E 2A            mov b, [d]
11868  4F7F FD AB         swp b
11869  4F81 D8            push b
11870  4F82 FA F9 FF      lea d, [bp + -7] ; $x
11871  4F85 2A            mov b, [d]
11872  4F86 FD AB         swp b
11873  4F88 D8            push b
11874  4F89 FA FB FF      lea d, [bp + -5] ; $w1
11875  4F8C 2A            mov b, [d]
11876  4F8D FD AB         swp b
11877  4F8F D8            push b
11878  4F90 07 6A 51      call compute_vector
11879  4F93 51 08 00      add sp, 8
11880  4F96 F9            leave
11881  4F97 09            ret
11882  4F98             
11883  4F98             galaxy_map:
11884  4F98 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11885  4F9B             ; $i 
11886  4F9B             ; $j 
11887  4F9B             ; $j0 
11888  4F9B 52 06 00      sub sp, 6
11889  4F9E             ;; printf("\n                   The Galaxy\n\n"); 
11890  4F9E 26 D8 72      mov b, _s149 ; "\n                   The Galaxy\n\n"
11891  4FA1 FD AB         swp b
11892  4FA3 D8            push b
11893  4FA4 07 D1 05      call printf
11894  4FA7 51 02 00      add sp, 2
11895  4FAA             ;; printf("    1     2     3     4     5     6     7     8\n"); 
11896  4FAA 26 F9 72      mov b, _s150 ; "    1     2     3     4     5     6     7     8\n"
11897  4FAD FD AB         swp b
11898  4FAF D8            push b
11899  4FB0 07 D1 05      call printf
11900  4FB3 51 02 00      add sp, 2
11901  4FB6             ;; for (i = 1; i <= 8; i++) { 
11902  4FB6             _for191_init:
11903  4FB6 FA FF FF      lea d, [bp + -1] ; $i
11904  4FB9 DA            push d
11905  4FBA 26 01 00      mov b, $1
11906  4FBD E7            pop d
11907  4FBE FD 43         mov [d], b
11908  4FC0             _for191_cond:
11909  4FC0 FA FF FF      lea d, [bp + -1] ; $i
11910  4FC3 2A            mov b, [d]
11911  4FC4             ; START RELATIONAL
11912  4FC4 D7            push a
11913  4FC5 11            mov a, b
11914  4FC6 26 08 00      mov b, $8
11915  4FC9 B0            cmp a, b
11916  4FCA FD 73         slt ; <= (signed)
11917  4FCC E4            pop a
11918  4FCD             ; END RELATIONAL
11919  4FCD C0 00 00      cmp b, 0
11920  4FD0 C6 5B 51      je _for191_exit
11921  4FD3             _for191_block:
11922  4FD3             ;; printf("%s%d ", gm_1, i); 
11923  4FD3 FA FF FF      lea d, [bp + -1] ; $i
11924  4FD6 2A            mov b, [d]
11925  4FD7 FD AB         swp b
11926  4FD9 D8            push b
11927  4FDA 3B 26 63      mov d, _gm_1 ; $gm_1
11928  4FDD 2A            mov b, [d]
11929  4FDE FD AB         swp b
11930  4FE0 D8            push b
11931  4FE1 26 2A 73      mov b, _s151 ; "%s%d "
11932  4FE4 FD AB         swp b
11933  4FE6 D8            push b
11934  4FE7 07 D1 05      call printf
11935  4FEA 51 06 00      add sp, 6
11936  4FED             ;; quadrant_name(1, i, 1); 
11937  4FED 26 01 00      mov b, $1
11938  4FF0 DD            push bl
11939  4FF1 FA FF FF      lea d, [bp + -1] ; $i
11940  4FF4 2A            mov b, [d]
11941  4FF5 DD            push bl
11942  4FF6 26 01 00      mov b, $1
11943  4FF9 DD            push bl
11944  4FFA 07 62 5D      call quadrant_name
11945  4FFD 51 03 00      add sp, 3
11946  5000             ;; j0 = (int) (11 - (strlen(quadname) / 2)); 
11947  5000 FA FB FF      lea d, [bp + -5] ; $j0
11948  5003 DA            push d
11949  5004 26 0B 00      mov b, $b
11950  5007             ; START TERMS
11951  5007 D7            push a
11952  5008 11            mov a, b
11953  5009 3B B2 61      mov d, _quadname_data ; $quadname
11954  500C 2D            mov b, d
11955  500D FD AB         swp b
11956  500F D8            push b
11957  5010 07 88 05      call strlen
11958  5013 51 02 00      add sp, 2
11959  5016             ; START FACTORS
11960  5016 D7            push a
11961  5017 11            mov a, b
11962  5018 26 02 00      mov b, $2
11963  501B AE            div a, b
11964  501C 27            mov b, a
11965  501D E4            pop a
11966  501E             ; END FACTORS
11967  501E 60            sub a, b
11968  501F 27            mov b, a
11969  5020 E4            pop a
11970  5021             ; END TERMS
11971  5021 E7            pop d
11972  5022 FD 43         mov [d], b
11973  5024             ;; for (j = 0; j < j0; j++) 
11974  5024             _for192_init:
11975  5024 FA FD FF      lea d, [bp + -3] ; $j
11976  5027 DA            push d
11977  5028 26 00 00      mov b, $0
11978  502B E7            pop d
11979  502C FD 43         mov [d], b
11980  502E             _for192_cond:
11981  502E FA FD FF      lea d, [bp + -3] ; $j
11982  5031 2A            mov b, [d]
11983  5032             ; START RELATIONAL
11984  5032 D7            push a
11985  5033 11            mov a, b
11986  5034 FA FB FF      lea d, [bp + -5] ; $j0
11987  5037 2A            mov b, [d]
11988  5038 B0            cmp a, b
11989  5039 FD 73         slt ; < (signed)
11990  503B E4            pop a
11991  503C             ; END RELATIONAL
11992  503C C0 00 00      cmp b, 0
11993  503F C6 5C 50      je _for192_exit
11994  5042             _for192_block:
11995  5042             ;; putchar(' '); 
11996  5042 26 20 00      mov b, $20
11997  5045 DD            push bl
11998  5046 07 FB 12      call putchar
11999  5049 51 01 00      add sp, 1
12000  504C             _for192_update:
12001  504C FA FD FF      lea d, [bp + -3] ; $j
12002  504F 2A            mov b, [d]
12003  5050 D8            push b
12004  5051 FD 77         inc b
12005  5053 FA FD FF      lea d, [bp + -3] ; $j
12006  5056 FD 43         mov [d], b
12007  5058 E5            pop b
12008  5059 0A 2E 50      jmp _for192_cond
12009  505C             _for192_exit:
12010  505C             ;; puts(quadname); 
12011  505C 3B B2 61      mov d, _quadname_data ; $quadname
12012  505F 2D            mov b, d
12013  5060 FD AB         swp b
12014  5062 D8            push b
12015  5063 07 31 13      call puts
12016  5066 51 02 00      add sp, 2
12017  5069             ;; for (j = 0; j < j0; j++) 
12018  5069             _for193_init:
12019  5069 FA FD FF      lea d, [bp + -3] ; $j
12020  506C DA            push d
12021  506D 26 00 00      mov b, $0
12022  5070 E7            pop d
12023  5071 FD 43         mov [d], b
12024  5073             _for193_cond:
12025  5073 FA FD FF      lea d, [bp + -3] ; $j
12026  5076 2A            mov b, [d]
12027  5077             ; START RELATIONAL
12028  5077 D7            push a
12029  5078 11            mov a, b
12030  5079 FA FB FF      lea d, [bp + -5] ; $j0
12031  507C 2A            mov b, [d]
12032  507D B0            cmp a, b
12033  507E FD 73         slt ; < (signed)
12034  5080 E4            pop a
12035  5081             ; END RELATIONAL
12036  5081 C0 00 00      cmp b, 0
12037  5084 C6 A1 50      je _for193_exit
12038  5087             _for193_block:
12039  5087             ;; putchar(' '); 
12040  5087 26 20 00      mov b, $20
12041  508A DD            push bl
12042  508B 07 FB 12      call putchar
12043  508E 51 01 00      add sp, 1
12044  5091             _for193_update:
12045  5091 FA FD FF      lea d, [bp + -3] ; $j
12046  5094 2A            mov b, [d]
12047  5095 D8            push b
12048  5096 FD 77         inc b
12049  5098 FA FD FF      lea d, [bp + -3] ; $j
12050  509B FD 43         mov [d], b
12051  509D E5            pop b
12052  509E 0A 73 50      jmp _for193_cond
12053  50A1             _for193_exit:
12054  50A1             ;; if (!(strlen(quadname) % 2)) 
12055  50A1             _if194_cond:
12056  50A1 3B B2 61      mov d, _quadname_data ; $quadname
12057  50A4 2D            mov b, d
12058  50A5 FD AB         swp b
12059  50A7 D8            push b
12060  50A8 07 88 05      call strlen
12061  50AB 51 02 00      add sp, 2
12062  50AE             ; START FACTORS
12063  50AE D7            push a
12064  50AF 11            mov a, b
12065  50B0 26 02 00      mov b, $2
12066  50B3 AE            div a, b ; 
12067  50B4 11            mov a, b
12068  50B5 27            mov b, a
12069  50B6 E4            pop a
12070  50B7             ; END FACTORS
12071  50B7 C0 00 00      cmp b, 0
12072  50BA FD 71         seq ; !
12073  50BC C0 00 00      cmp b, 0
12074  50BF C6 CF 50      je _if194_exit
12075  50C2             _if194_true:
12076  50C2             ;; putchar(' '); 
12077  50C2 26 20 00      mov b, $20
12078  50C5 DD            push bl
12079  50C6 07 FB 12      call putchar
12080  50C9 51 01 00      add sp, 1
12081  50CC 0A CF 50      jmp _if194_exit
12082  50CF             _if194_exit:
12083  50CF             ;; quadrant_name(1, i, 5); 
12084  50CF 26 05 00      mov b, $5
12085  50D2 DD            push bl
12086  50D3 FA FF FF      lea d, [bp + -1] ; $i
12087  50D6 2A            mov b, [d]
12088  50D7 DD            push bl
12089  50D8 26 01 00      mov b, $1
12090  50DB DD            push bl
12091  50DC 07 62 5D      call quadrant_name
12092  50DF 51 03 00      add sp, 3
12093  50E2             ;; j0 = (int) (12 - (strlen(quadname) / 2)); 
12094  50E2 FA FB FF      lea d, [bp + -5] ; $j0
12095  50E5 DA            push d
12096  50E6 26 0C 00      mov b, $c
12097  50E9             ; START TERMS
12098  50E9 D7            push a
12099  50EA 11            mov a, b
12100  50EB 3B B2 61      mov d, _quadname_data ; $quadname
12101  50EE 2D            mov b, d
12102  50EF FD AB         swp b
12103  50F1 D8            push b
12104  50F2 07 88 05      call strlen
12105  50F5 51 02 00      add sp, 2
12106  50F8             ; START FACTORS
12107  50F8 D7            push a
12108  50F9 11            mov a, b
12109  50FA 26 02 00      mov b, $2
12110  50FD AE            div a, b
12111  50FE 27            mov b, a
12112  50FF E4            pop a
12113  5100             ; END FACTORS
12114  5100 60            sub a, b
12115  5101 27            mov b, a
12116  5102 E4            pop a
12117  5103             ; END TERMS
12118  5103 E7            pop d
12119  5104 FD 43         mov [d], b
12120  5106             ;; for (j = 0; j < j0; j++) 
12121  5106             _for195_init:
12122  5106 FA FD FF      lea d, [bp + -3] ; $j
12123  5109 DA            push d
12124  510A 26 00 00      mov b, $0
12125  510D E7            pop d
12126  510E FD 43         mov [d], b
12127  5110             _for195_cond:
12128  5110 FA FD FF      lea d, [bp + -3] ; $j
12129  5113 2A            mov b, [d]
12130  5114             ; START RELATIONAL
12131  5114 D7            push a
12132  5115 11            mov a, b
12133  5116 FA FB FF      lea d, [bp + -5] ; $j0
12134  5119 2A            mov b, [d]
12135  511A B0            cmp a, b
12136  511B FD 73         slt ; < (signed)
12137  511D E4            pop a
12138  511E             ; END RELATIONAL
12139  511E C0 00 00      cmp b, 0
12140  5121 C6 3E 51      je _for195_exit
12141  5124             _for195_block:
12142  5124             ;; putchar(' '); 
12143  5124 26 20 00      mov b, $20
12144  5127 DD            push bl
12145  5128 07 FB 12      call putchar
12146  512B 51 01 00      add sp, 1
12147  512E             _for195_update:
12148  512E FA FD FF      lea d, [bp + -3] ; $j
12149  5131 2A            mov b, [d]
12150  5132 D8            push b
12151  5133 FD 77         inc b
12152  5135 FA FD FF      lea d, [bp + -3] ; $j
12153  5138 FD 43         mov [d], b
12154  513A E5            pop b
12155  513B 0A 10 51      jmp _for195_cond
12156  513E             _for195_exit:
12157  513E             ;; puts(quadname); 
12158  513E 3B B2 61      mov d, _quadname_data ; $quadname
12159  5141 2D            mov b, d
12160  5142 FD AB         swp b
12161  5144 D8            push b
12162  5145 07 31 13      call puts
12163  5148 51 02 00      add sp, 2
12164  514B             _for191_update:
12165  514B FA FF FF      lea d, [bp + -1] ; $i
12166  514E 2A            mov b, [d]
12167  514F D8            push b
12168  5150 FD 77         inc b
12169  5152 FA FF FF      lea d, [bp + -1] ; $i
12170  5155 FD 43         mov [d], b
12171  5157 E5            pop b
12172  5158 0A C0 4F      jmp _for191_cond
12173  515B             _for191_exit:
12174  515B             ;; puts(gm_1); 
12175  515B 3B 26 63      mov d, _gm_1 ; $gm_1
12176  515E 2A            mov b, [d]
12177  515F FD AB         swp b
12178  5161 D8            push b
12179  5162 07 31 13      call puts
12180  5165 51 02 00      add sp, 2
12181  5168 F9            leave
12182  5169 09            ret
12183  516A             
12184  516A             compute_vector:
12185  516A F8 00 00      enter 0 ; (push bp; mov bp, sp)
12186  516D             ; $xl 
12187  516D             ; $al 
12188  516D 52 08 00      sub sp, 8
12189  5170             ;; puts("  DIRECTION = "); 
12190  5170 26 30 73      mov b, _s152 ; "  DIRECTION = "
12191  5173 FD AB         swp b
12192  5175 D8            push b
12193  5176 07 31 13      call puts
12194  5179 51 02 00      add sp, 2
12195  517C             ;; x = x - a; 
12196  517C FA 07 00      lea d, [bp + 7] ; $x
12197  517F DA            push d
12198  5180 FA 07 00      lea d, [bp + 7] ; $x
12199  5183 2A            mov b, [d]
12200  5184             ; START TERMS
12201  5184 D7            push a
12202  5185 11            mov a, b
12203  5186 FA 0B 00      lea d, [bp + 11] ; $a
12204  5189 2A            mov b, [d]
12205  518A 60            sub a, b
12206  518B 27            mov b, a
12207  518C E4            pop a
12208  518D             ; END TERMS
12209  518D E7            pop d
12210  518E FD 43         mov [d], b
12211  5190             ;; a = c1 - w1; 
12212  5190 FA 0B 00      lea d, [bp + 11] ; $a
12213  5193 DA            push d
12214  5194 FA 09 00      lea d, [bp + 9] ; $c1
12215  5197 2A            mov b, [d]
12216  5198             ; START TERMS
12217  5198 D7            push a
12218  5199 11            mov a, b
12219  519A FA 05 00      lea d, [bp + 5] ; $w1
12220  519D 2A            mov b, [d]
12221  519E 60            sub a, b
12222  519F 27            mov b, a
12223  51A0 E4            pop a
12224  51A1             ; END TERMS
12225  51A1 E7            pop d
12226  51A2 FD 43         mov [d], b
12227  51A4             ;; xl = abs(x); 
12228  51A4 FA FD FF      lea d, [bp + -3] ; $xl
12229  51A7 DA            push d
12230  51A8 FA 07 00      lea d, [bp + 7] ; $x
12231  51AB 2A            mov b, [d]
12232  51AC FD AB         swp b
12233  51AE D8            push b
12234  51AF 07 7D 13      call abs
12235  51B2 51 02 00      add sp, 2
12236  51B5 E7            pop d
12237  51B6 FD 43         mov [d], b
12238  51B8 28            mov b, c
12239  51B9 FD 44 02 00   mov [d + 2], b
12240  51BD             ;; al = abs(a); 
12241  51BD FA F9 FF      lea d, [bp + -7] ; $al
12242  51C0 DA            push d
12243  51C1 FA 0B 00      lea d, [bp + 11] ; $a
12244  51C4 2A            mov b, [d]
12245  51C5 FD AB         swp b
12246  51C7 D8            push b
12247  51C8 07 7D 13      call abs
12248  51CB 51 02 00      add sp, 2
12249  51CE E7            pop d
12250  51CF FD 43         mov [d], b
12251  51D1 28            mov b, c
12252  51D2 FD 44 02 00   mov [d + 2], b
12253  51D6             ;; if (x < 0) { 
12254  51D6             _if196_cond:
12255  51D6 FA 07 00      lea d, [bp + 7] ; $x
12256  51D9 2A            mov b, [d]
12257  51DA             ; START RELATIONAL
12258  51DA D7            push a
12259  51DB 11            mov a, b
12260  51DC 26 00 00      mov b, $0
12261  51DF B0            cmp a, b
12262  51E0 FD 73         slt ; < (signed)
12263  51E2 E4            pop a
12264  51E3             ; END RELATIONAL
12265  51E3 C0 00 00      cmp b, 0
12266  51E6 C6 43 53      je _if196_else
12267  51E9             _if196_true:
12268  51E9             ;; if (a > 0) { 
12269  51E9             _if197_cond:
12270  51E9 FA 0B 00      lea d, [bp + 11] ; $a
12271  51EC 2A            mov b, [d]
12272  51ED             ; START RELATIONAL
12273  51ED D7            push a
12274  51EE 11            mov a, b
12275  51EF 26 00 00      mov b, $0
12276  51F2 B0            cmp a, b
12277  51F3 FD 7F         sgt ; >
12278  51F5 E4            pop a
12279  51F6             ; END RELATIONAL
12280  51F6 C0 00 00      cmp b, 0
12281  51F9 C6 14 53      je _if197_else
12282  51FC             _if197_true:
12283  51FC             ;; c1 = 300; 
12284  51FC FA 09 00      lea d, [bp + 9] ; $c1
12285  51FF DA            push d
12286  5200 26 2C 01      mov b, $12c
12287  5203 E7            pop d
12288  5204 FD 43         mov [d], b
12289  5206             ;; if (al >= xl) 
12290  5206             _if198_cond:
12291  5206 FA F9 FF      lea d, [bp + -7] ; $al
12292  5209 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12293  520C FD 39         mov c, b ; And place it into C
12294  520E 2A            mov b, [d] ; Lower Word in B
12295  520F             ; START RELATIONAL
12296  520F D7            push a
12297  5210 FD D8         push g
12298  5212 11            mov a, b
12299  5213 FD 7A         mov g, c
12300  5215 FA FD FF      lea d, [bp + -3] ; $xl
12301  5218 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12302  521B FD 39         mov c, b ; And place it into C
12303  521D 2A            mov b, [d] ; Lower Word in B
12304  521E FD 82         sgeu
12305  5220 FD F1         pop g
12306  5222 E4            pop a
12307  5223             ; END RELATIONAL
12308  5223 C0 00 00      cmp b, 0
12309  5226 C6 73 52      je _if198_else
12310  5229             _if198_true:
12311  5229             ;; printf("%s", print100(c1 + ((xl * 100) / al))); 
12312  5229 FA 09 00      lea d, [bp + 9] ; $c1
12313  522C 2A            mov b, [d]
12314  522D             ; START TERMS
12315  522D D7            push a
12316  522E 11            mov a, b
12317  522F FA FD FF      lea d, [bp + -3] ; $xl
12318  5232 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12319  5235 FD 39         mov c, b ; And place it into C
12320  5237 2A            mov b, [d] ; Lower Word in B
12321  5238             ; START FACTORS
12322  5238 D7            push a
12323  5239 11            mov a, b
12324  523A 26 64 00      mov b, $64
12325  523D AC            mul a, b ; *
12326  523E 11            mov a, b
12327  523F 27            mov b, a
12328  5240 E4            pop a
12329  5241             ; END FACTORS
12330  5241             ; START FACTORS
12331  5241 D7            push a
12332  5242 11            mov a, b
12333  5243 FA F9 FF      lea d, [bp + -7] ; $al
12334  5246 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12335  5249 FD 39         mov c, b ; And place it into C
12336  524B 2A            mov b, [d] ; Lower Word in B
12337  524C AE            div a, b
12338  524D 27            mov b, a
12339  524E E4            pop a
12340  524F             ; END FACTORS
12341  524F 54            add a, b
12342  5250 D7            push a
12343  5251 FD 12         mov a, g
12344  5253 28            mov b, c
12345  5254 5C            adc a, b
12346  5255 39            mov c, a
12347  5256 E5            pop b
12348  5257 E4            pop a
12349  5258             ; END TERMS
12350  5258 FD AB         swp b
12351  525A D8            push b
12352  525B 07 FC 1F      call print100
12353  525E 51 02 00      add sp, 2
12354  5261 FD AB         swp b
12355  5263 D8            push b
12356  5264 26 3F 73      mov b, _s153 ; "%s"
12357  5267 FD AB         swp b
12358  5269 D8            push b
12359  526A 07 D1 05      call printf
12360  526D 51 04 00      add sp, 4
12361  5270 0A D7 52      jmp _if198_exit
12362  5273             _if198_else:
12363  5273             ;; printf("%s", print100(c1 + ((((xl * 2) - al) * 100)  / xl))); 
12364  5273 FA 09 00      lea d, [bp + 9] ; $c1
12365  5276 2A            mov b, [d]
12366  5277             ; START TERMS
12367  5277 D7            push a
12368  5278 11            mov a, b
12369  5279 FA FD FF      lea d, [bp + -3] ; $xl
12370  527C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12371  527F FD 39         mov c, b ; And place it into C
12372  5281 2A            mov b, [d] ; Lower Word in B
12373  5282             ; START FACTORS
12374  5282 D7            push a
12375  5283 11            mov a, b
12376  5284 26 02 00      mov b, $2
12377  5287 AC            mul a, b ; *
12378  5288 11            mov a, b
12379  5289 27            mov b, a
12380  528A E4            pop a
12381  528B             ; END FACTORS
12382  528B             ; START TERMS
12383  528B D7            push a
12384  528C FD D8         push g
12385  528E 11            mov a, b
12386  528F FD 7A         mov g, c
12387  5291 FA F9 FF      lea d, [bp + -7] ; $al
12388  5294 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12389  5297 FD 39         mov c, b ; And place it into C
12390  5299 2A            mov b, [d] ; Lower Word in B
12391  529A 60            sub a, b
12392  529B 27            mov b, a
12393  529C FD F1         pop g
12394  529E E4            pop a
12395  529F             ; END TERMS
12396  529F             ; START FACTORS
12397  529F D7            push a
12398  52A0 11            mov a, b
12399  52A1 26 64 00      mov b, $64
12400  52A4 AC            mul a, b ; *
12401  52A5 11            mov a, b
12402  52A6 27            mov b, a
12403  52A7 E4            pop a
12404  52A8             ; END FACTORS
12405  52A8             ; START FACTORS
12406  52A8 D7            push a
12407  52A9 11            mov a, b
12408  52AA FA FD FF      lea d, [bp + -3] ; $xl
12409  52AD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12410  52B0 FD 39         mov c, b ; And place it into C
12411  52B2 2A            mov b, [d] ; Lower Word in B
12412  52B3 AE            div a, b
12413  52B4 27            mov b, a
12414  52B5 E4            pop a
12415  52B6             ; END FACTORS
12416  52B6 54            add a, b
12417  52B7 D7            push a
12418  52B8 FD 12         mov a, g
12419  52BA 28            mov b, c
12420  52BB 5C            adc a, b
12421  52BC 39            mov c, a
12422  52BD E5            pop b
12423  52BE E4            pop a
12424  52BF             ; END TERMS
12425  52BF FD AB         swp b
12426  52C1 D8            push b
12427  52C2 07 FC 1F      call print100
12428  52C5 51 02 00      add sp, 2
12429  52C8 FD AB         swp b
12430  52CA D8            push b
12431  52CB 26 3F 73      mov b, _s153 ; "%s"
12432  52CE FD AB         swp b
12433  52D0 D8            push b
12434  52D1 07 D1 05      call printf
12435  52D4 51 04 00      add sp, 4
12436  52D7             _if198_exit:
12437  52D7             ;; printf(dist_1, print100((x > a) ? x : a)); 
12438  52D7             _ternary202_cond:
12439  52D7 FA 07 00      lea d, [bp + 7] ; $x
12440  52DA 2A            mov b, [d]
12441  52DB             ; START RELATIONAL
12442  52DB D7            push a
12443  52DC 11            mov a, b
12444  52DD FA 0B 00      lea d, [bp + 11] ; $a
12445  52E0 2A            mov b, [d]
12446  52E1 B0            cmp a, b
12447  52E2 FD 7F         sgt ; >
12448  52E4 E4            pop a
12449  52E5             ; END RELATIONAL
12450  52E5 C0 00 00      cmp b, 0
12451  52E8 C6 F2 52      je _ternary202_false
12452  52EB             _ternary202_true:
12453  52EB FA 07 00      lea d, [bp + 7] ; $x
12454  52EE 2A            mov b, [d]
12455  52EF 0A F6 52      jmp _ternary202_exit
12456  52F2             _ternary202_false:
12457  52F2 FA 0B 00      lea d, [bp + 11] ; $a
12458  52F5 2A            mov b, [d]
12459  52F6             _ternary202_exit:
12460  52F6 FD AB         swp b
12461  52F8 D8            push b
12462  52F9 07 FC 1F      call print100
12463  52FC 51 02 00      add sp, 2
12464  52FF FD AB         swp b
12465  5301 D8            push b
12466  5302 3B 38 63      mov d, _dist_1 ; $dist_1
12467  5305 2A            mov b, [d]
12468  5306 FD AB         swp b
12469  5308 D8            push b
12470  5309 07 D1 05      call printf
12471  530C 51 04 00      add sp, 4
12472  530F             ;; return; 
12473  530F F9            leave
12474  5310 09            ret
12475  5311 0A 40 53      jmp _if197_exit
12476  5314             _if197_else:
12477  5314             ;; if (x != 0){ 
12478  5314             _if203_cond:
12479  5314 FA 07 00      lea d, [bp + 7] ; $x
12480  5317 2A            mov b, [d]
12481  5318             ; START RELATIONAL
12482  5318 D7            push a
12483  5319 11            mov a, b
12484  531A 26 00 00      mov b, $0
12485  531D B0            cmp a, b
12486  531E FD 72         sneq ; !=
12487  5320 E4            pop a
12488  5321             ; END RELATIONAL
12489  5321 C0 00 00      cmp b, 0
12490  5324 C6 36 53      je _if203_else
12491  5327             _if203_true:
12492  5327             ;; c1 = 500; 
12493  5327 FA 09 00      lea d, [bp + 9] ; $c1
12494  532A DA            push d
12495  532B 26 F4 01      mov b, $1f4
12496  532E E7            pop d
12497  532F FD 43         mov [d], b
12498  5331             ;; return; 
12499  5331 F9            leave
12500  5332 09            ret
12501  5333 0A 40 53      jmp _if203_exit
12502  5336             _if203_else:
12503  5336             ;; c1 = 700; 
12504  5336 FA 09 00      lea d, [bp + 9] ; $c1
12505  5339 DA            push d
12506  533A 26 BC 02      mov b, $2bc
12507  533D E7            pop d
12508  533E FD 43         mov [d], b
12509  5340             _if203_exit:
12510  5340             _if197_exit:
12511  5340 0A CF 54      jmp _if196_exit
12512  5343             _if196_else:
12513  5343             ;; if (a < 0) { 
12514  5343             _if204_cond:
12515  5343 FA 0B 00      lea d, [bp + 11] ; $a
12516  5346 2A            mov b, [d]
12517  5347             ; START RELATIONAL
12518  5347 D7            push a
12519  5348 11            mov a, b
12520  5349 26 00 00      mov b, $0
12521  534C B0            cmp a, b
12522  534D FD 73         slt ; < (signed)
12523  534F E4            pop a
12524  5350             ; END RELATIONAL
12525  5350 C0 00 00      cmp b, 0
12526  5353 C6 63 53      je _if204_else
12527  5356             _if204_true:
12528  5356             ;; c1 = 700; 
12529  5356 FA 09 00      lea d, [bp + 9] ; $c1
12530  5359 DA            push d
12531  535A 26 BC 02      mov b, $2bc
12532  535D E7            pop d
12533  535E FD 43         mov [d], b
12534  5360 0A CF 54      jmp _if204_exit
12535  5363             _if204_else:
12536  5363             ;; if (x > 0) { 
12537  5363             _if205_cond:
12538  5363 FA 07 00      lea d, [bp + 7] ; $x
12539  5366 2A            mov b, [d]
12540  5367             ; START RELATIONAL
12541  5367 D7            push a
12542  5368 11            mov a, b
12543  5369 26 00 00      mov b, $0
12544  536C B0            cmp a, b
12545  536D FD 7F         sgt ; >
12546  536F E4            pop a
12547  5370             ; END RELATIONAL
12548  5370 C0 00 00      cmp b, 0
12549  5373 C6 83 53      je _if205_else
12550  5376             _if205_true:
12551  5376             ;; c1 = 100; 
12552  5376 FA 09 00      lea d, [bp + 9] ; $c1
12553  5379 DA            push d
12554  537A 26 64 00      mov b, $64
12555  537D E7            pop d
12556  537E FD 43         mov [d], b
12557  5380 0A CF 54      jmp _if205_exit
12558  5383             _if205_else:
12559  5383             ;; if (a == 0) { 
12560  5383             _if206_cond:
12561  5383 FA 0B 00      lea d, [bp + 11] ; $a
12562  5386 2A            mov b, [d]
12563  5387             ; START RELATIONAL
12564  5387 D7            push a
12565  5388 11            mov a, b
12566  5389 26 00 00      mov b, $0
12567  538C B0            cmp a, b
12568  538D FD 71         seq ; ==
12569  538F E4            pop a
12570  5390             ; END RELATIONAL
12571  5390 C0 00 00      cmp b, 0
12572  5393 C6 A3 53      je _if206_else
12573  5396             _if206_true:
12574  5396             ;; c1 = 500; 
12575  5396 FA 09 00      lea d, [bp + 9] ; $c1
12576  5399 DA            push d
12577  539A 26 F4 01      mov b, $1f4
12578  539D E7            pop d
12579  539E FD 43         mov [d], b
12580  53A0 0A CF 54      jmp _if206_exit
12581  53A3             _if206_else:
12582  53A3             ;; c1 = 100; 
12583  53A3 FA 09 00      lea d, [bp + 9] ; $c1
12584  53A6 DA            push d
12585  53A7 26 64 00      mov b, $64
12586  53AA E7            pop d
12587  53AB FD 43         mov [d], b
12588  53AD             ;; if (al <= xl) 
12589  53AD             _if207_cond:
12590  53AD FA F9 FF      lea d, [bp + -7] ; $al
12591  53B0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12592  53B3 FD 39         mov c, b ; And place it into C
12593  53B5 2A            mov b, [d] ; Lower Word in B
12594  53B6             ; START RELATIONAL
12595  53B6 D7            push a
12596  53B7 FD D8         push g
12597  53B9 11            mov a, b
12598  53BA FD 7A         mov g, c
12599  53BC FA FD FF      lea d, [bp + -3] ; $xl
12600  53BF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12601  53C2 FD 39         mov c, b ; And place it into C
12602  53C4 2A            mov b, [d] ; Lower Word in B
12603  53C5 FD 76         sleu
12604  53C7 FD F1         pop g
12605  53C9 E4            pop a
12606  53CA             ; END RELATIONAL
12607  53CA C0 00 00      cmp b, 0
12608  53CD C6 1A 54      je _if207_else
12609  53D0             _if207_true:
12610  53D0             ;; printf("%s", print100(c1 + ((al * 100) / xl))); 
12611  53D0 FA 09 00      lea d, [bp + 9] ; $c1
12612  53D3 2A            mov b, [d]
12613  53D4             ; START TERMS
12614  53D4 D7            push a
12615  53D5 11            mov a, b
12616  53D6 FA F9 FF      lea d, [bp + -7] ; $al
12617  53D9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12618  53DC FD 39         mov c, b ; And place it into C
12619  53DE 2A            mov b, [d] ; Lower Word in B
12620  53DF             ; START FACTORS
12621  53DF D7            push a
12622  53E0 11            mov a, b
12623  53E1 26 64 00      mov b, $64
12624  53E4 AC            mul a, b ; *
12625  53E5 11            mov a, b
12626  53E6 27            mov b, a
12627  53E7 E4            pop a
12628  53E8             ; END FACTORS
12629  53E8             ; START FACTORS
12630  53E8 D7            push a
12631  53E9 11            mov a, b
12632  53EA FA FD FF      lea d, [bp + -3] ; $xl
12633  53ED 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12634  53F0 FD 39         mov c, b ; And place it into C
12635  53F2 2A            mov b, [d] ; Lower Word in B
12636  53F3 AE            div a, b
12637  53F4 27            mov b, a
12638  53F5 E4            pop a
12639  53F6             ; END FACTORS
12640  53F6 54            add a, b
12641  53F7 D7            push a
12642  53F8 FD 12         mov a, g
12643  53FA 28            mov b, c
12644  53FB 5C            adc a, b
12645  53FC 39            mov c, a
12646  53FD E5            pop b
12647  53FE E4            pop a
12648  53FF             ; END TERMS
12649  53FF FD AB         swp b
12650  5401 D8            push b
12651  5402 07 FC 1F      call print100
12652  5405 51 02 00      add sp, 2
12653  5408 FD AB         swp b
12654  540A D8            push b
12655  540B 26 3F 73      mov b, _s153 ; "%s"
12656  540E FD AB         swp b
12657  5410 D8            push b
12658  5411 07 D1 05      call printf
12659  5414 51 04 00      add sp, 4
12660  5417 0A 7E 54      jmp _if207_exit
12661  541A             _if207_else:
12662  541A             ;; printf("%s", print100(c1 + ((((al * 2) - xl) * 100) / al))); 
12663  541A FA 09 00      lea d, [bp + 9] ; $c1
12664  541D 2A            mov b, [d]
12665  541E             ; START TERMS
12666  541E D7            push a
12667  541F 11            mov a, b
12668  5420 FA F9 FF      lea d, [bp + -7] ; $al
12669  5423 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12670  5426 FD 39         mov c, b ; And place it into C
12671  5428 2A            mov b, [d] ; Lower Word in B
12672  5429             ; START FACTORS
12673  5429 D7            push a
12674  542A 11            mov a, b
12675  542B 26 02 00      mov b, $2
12676  542E AC            mul a, b ; *
12677  542F 11            mov a, b
12678  5430 27            mov b, a
12679  5431 E4            pop a
12680  5432             ; END FACTORS
12681  5432             ; START TERMS
12682  5432 D7            push a
12683  5433 FD D8         push g
12684  5435 11            mov a, b
12685  5436 FD 7A         mov g, c
12686  5438 FA FD FF      lea d, [bp + -3] ; $xl
12687  543B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12688  543E FD 39         mov c, b ; And place it into C
12689  5440 2A            mov b, [d] ; Lower Word in B
12690  5441 60            sub a, b
12691  5442 27            mov b, a
12692  5443 FD F1         pop g
12693  5445 E4            pop a
12694  5446             ; END TERMS
12695  5446             ; START FACTORS
12696  5446 D7            push a
12697  5447 11            mov a, b
12698  5448 26 64 00      mov b, $64
12699  544B AC            mul a, b ; *
12700  544C 11            mov a, b
12701  544D 27            mov b, a
12702  544E E4            pop a
12703  544F             ; END FACTORS
12704  544F             ; START FACTORS
12705  544F D7            push a
12706  5450 11            mov a, b
12707  5451 FA F9 FF      lea d, [bp + -7] ; $al
12708  5454 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12709  5457 FD 39         mov c, b ; And place it into C
12710  5459 2A            mov b, [d] ; Lower Word in B
12711  545A AE            div a, b
12712  545B 27            mov b, a
12713  545C E4            pop a
12714  545D             ; END FACTORS
12715  545D 54            add a, b
12716  545E D7            push a
12717  545F FD 12         mov a, g
12718  5461 28            mov b, c
12719  5462 5C            adc a, b
12720  5463 39            mov c, a
12721  5464 E5            pop b
12722  5465 E4            pop a
12723  5466             ; END TERMS
12724  5466 FD AB         swp b
12725  5468 D8            push b
12726  5469 07 FC 1F      call print100
12727  546C 51 02 00      add sp, 2
12728  546F FD AB         swp b
12729  5471 D8            push b
12730  5472 26 3F 73      mov b, _s153 ; "%s"
12731  5475 FD AB         swp b
12732  5477 D8            push b
12733  5478 07 D1 05      call printf
12734  547B 51 04 00      add sp, 4
12735  547E             _if207_exit:
12736  547E             ;; printf(dist_1, print100((xl > al) ? xl : al)); 
12737  547E             _ternary211_cond:
12738  547E FA FD FF      lea d, [bp + -3] ; $xl
12739  5481 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12740  5484 FD 39         mov c, b ; And place it into C
12741  5486 2A            mov b, [d] ; Lower Word in B
12742  5487             ; START RELATIONAL
12743  5487 D7            push a
12744  5488 FD D8         push g
12745  548A 11            mov a, b
12746  548B FD 7A         mov g, c
12747  548D FA F9 FF      lea d, [bp + -7] ; $al
12748  5490 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12749  5493 FD 39         mov c, b ; And place it into C
12750  5495 2A            mov b, [d] ; Lower Word in B
12751  5496 FD 81         sgu
12752  5498 FD F1         pop g
12753  549A E4            pop a
12754  549B             ; END RELATIONAL
12755  549B C0 00 00      cmp b, 0
12756  549E C6 AD 54      je _ternary211_false
12757  54A1             _ternary211_true:
12758  54A1 FA FD FF      lea d, [bp + -3] ; $xl
12759  54A4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12760  54A7 FD 39         mov c, b ; And place it into C
12761  54A9 2A            mov b, [d] ; Lower Word in B
12762  54AA 0A B6 54      jmp _ternary211_exit
12763  54AD             _ternary211_false:
12764  54AD FA F9 FF      lea d, [bp + -7] ; $al
12765  54B0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12766  54B3 FD 39         mov c, b ; And place it into C
12767  54B5 2A            mov b, [d] ; Lower Word in B
12768  54B6             _ternary211_exit:
12769  54B6 FD AB         swp b
12770  54B8 D8            push b
12771  54B9 07 FC 1F      call print100
12772  54BC 51 02 00      add sp, 2
12773  54BF FD AB         swp b
12774  54C1 D8            push b
12775  54C2 3B 38 63      mov d, _dist_1 ; $dist_1
12776  54C5 2A            mov b, [d]
12777  54C6 FD AB         swp b
12778  54C8 D8            push b
12779  54C9 07 D1 05      call printf
12780  54CC 51 04 00      add sp, 4
12781  54CF             _if206_exit:
12782  54CF             _if205_exit:
12783  54CF             _if204_exit:
12784  54CF             _if196_exit:
12785  54CF F9            leave
12786  54D0 09            ret
12787  54D1             
12788  54D1             ship_destroyed:
12789  54D1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12790  54D4             ;; puts("The Enterprise has been destroyed. The Federation will be conquered.\n"); 
12791  54D4 26 42 73      mov b, _s154 ; "The Enterprise has been destroyed. The Federation will be conquered.\n"
12792  54D7 FD AB         swp b
12793  54D9 D8            push b
12794  54DA 07 31 13      call puts
12795  54DD 51 02 00      add sp, 2
12796  54E0             ;; end_of_time(); 
12797  54E0 07 E5 54      call end_of_time
12798  54E3 F9            leave
12799  54E4 09            ret
12800  54E5             
12801  54E5             end_of_time:
12802  54E5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12803  54E8             ;; printf("It is stardate %d.\n\n",  FROM_FIXED(stardate)); 
12804  54E8 3B 70 61      mov d, _stardate ; $stardate
12805  54EB 2A            mov b, [d]
12806  54EC FD AB         swp b
12807  54EE D8            push b
12808  54EF 07 E8 1C      call FROM_FIXED
12809  54F2 51 02 00      add sp, 2
12810  54F5 FD AB         swp b
12811  54F7 D8            push b
12812  54F8 26 88 73      mov b, _s155 ; "It is stardate %d.\n\n"
12813  54FB FD AB         swp b
12814  54FD D8            push b
12815  54FE 07 D1 05      call printf
12816  5501 51 04 00      add sp, 4
12817  5504             ;; resign_commision(); 
12818  5504 07 09 55      call resign_commision
12819  5507 F9            leave
12820  5508 09            ret
12821  5509             
12822  5509             resign_commision:
12823  5509 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12824  550C             ;; printf("There were %d Klingon Battlecruisers left at the end of your mission.\n\n", klingons_left); 
12825  550C 3B 4A 61      mov d, _klingons_left ; $klingons_left
12826  550F 32            mov bl, [d]
12827  5510 A7 00         mov bh, 0
12828  5512 DD            push bl
12829  5513 26 9D 73      mov b, _s156 ; "There were %d Klingon Battlecruisers left at the end of your mission.\n\n"
12830  5516 FD AB         swp b
12831  5518 D8            push b
12832  5519 07 D1 05      call printf
12833  551C 51 03 00      add sp, 3
12834  551F             ;; end_of_game(); 
12835  551F 07 AB 55      call end_of_game
12836  5522 F9            leave
12837  5523 09            ret
12838  5524             
12839  5524             won_game:
12840  5524 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12841  5527             ;; puts("Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"); 
12842  5527 26 E5 73      mov b, _s157 ; "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"
12843  552A FD AB         swp b
12844  552C D8            push b
12845  552D 07 31 13      call puts
12846  5530 51 02 00      add sp, 2
12847  5533             ;; if (FROM_FIXED(stardate) - time_start > 0) 
12848  5533             _if212_cond:
12849  5533 3B 70 61      mov d, _stardate ; $stardate
12850  5536 2A            mov b, [d]
12851  5537 FD AB         swp b
12852  5539 D8            push b
12853  553A 07 E8 1C      call FROM_FIXED
12854  553D 51 02 00      add sp, 2
12855  5540             ; START TERMS
12856  5540 D7            push a
12857  5541 11            mov a, b
12858  5542 3B 54 61      mov d, _time_start ; $time_start
12859  5545 2A            mov b, [d]
12860  5546 60            sub a, b
12861  5547 27            mov b, a
12862  5548 E4            pop a
12863  5549             ; END TERMS
12864  5549             ; START RELATIONAL
12865  5549 D7            push a
12866  554A 11            mov a, b
12867  554B 26 00 00      mov b, $0
12868  554E B0            cmp a, b
12869  554F FD 81         sgu ; > (unsigned)
12870  5551 E4            pop a
12871  5552             ; END RELATIONAL
12872  5552 C0 00 00      cmp b, 0
12873  5555 C6 A6 55      je _if212_exit
12874  5558             _if212_true:
12875  5558             ;; printf("Your efficiency rating is %s\n", 
12876  5558 3B 49 61      mov d, _total_klingons ; $total_klingons
12877  555B 32            mov bl, [d]
12878  555C A7 00         mov bh, 0
12879  555E FD AB         swp b
12880  5560 D8            push b
12881  5561 07 F9 1C      call TO_FIXED00
12882  5564 51 02 00      add sp, 2
12883  5567             ; START FACTORS
12884  5567 D7            push a
12885  5568 11            mov a, b
12886  5569 3B 70 61      mov d, _stardate ; $stardate
12887  556C 2A            mov b, [d]
12888  556D FD AB         swp b
12889  556F D8            push b
12890  5570 07 E8 1C      call FROM_FIXED
12891  5573 51 02 00      add sp, 2
12892  5576             ; START TERMS
12893  5576 D7            push a
12894  5577 11            mov a, b
12895  5578 3B 54 61      mov d, _time_start ; $time_start
12896  557B 2A            mov b, [d]
12897  557C 60            sub a, b
12898  557D 27            mov b, a
12899  557E E4            pop a
12900  557F             ; END TERMS
12901  557F AE            div a, b
12902  5580 27            mov b, a
12903  5581 E4            pop a
12904  5582             ; END FACTORS
12905  5582 FD AB         swp b
12906  5584 D8            push b
12907  5585 07 47 5F      call square00
12908  5588 51 02 00      add sp, 2
12909  558B FD AB         swp b
12910  558D D8            push b
12911  558E 07 FC 1F      call print100
12912  5591 51 02 00      add sp, 2
12913  5594 FD AB         swp b
12914  5596 D8            push b
12915  5597 26 4D 74      mov b, _s158 ; "Your efficiency rating is %s\n"
12916  559A FD AB         swp b
12917  559C D8            push b
12918  559D 07 D1 05      call printf
12919  55A0 51 04 00      add sp, 4
12920  55A3 0A A6 55      jmp _if212_exit
12921  55A6             _if212_exit:
12922  55A6             ;; end_of_game(); 
12923  55A6 07 AB 55      call end_of_game
12924  55A9 F9            leave
12925  55AA 09            ret
12926  55AB             
12927  55AB             end_of_game:
12928  55AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
12929  55AE             ; $x 
12930  55AE 52 04 00      sub sp, 4
12931  55B1             ;; if (starbases_left > 0) { 
12932  55B1             _if213_cond:
12933  55B1 3B 75 60      mov d, _starbases_left ; $starbases_left
12934  55B4 32            mov bl, [d]
12935  55B5 A7 00         mov bh, 0
12936  55B7             ; START RELATIONAL
12937  55B7 D7            push a
12938  55B8 11            mov a, b
12939  55B9 26 00 00      mov b, $0
12940  55BC B0            cmp a, b
12941  55BD FD 7F         sgt ; >
12942  55BF E4            pop a
12943  55C0             ; END RELATIONAL
12944  55C0 C0 00 00      cmp b, 0
12945  55C3 C6 34 56      je _if213_exit
12946  55C6             _if213_true:
12947  55C6             ;; puts("The Federation is in need of a new starship commander"); 
12948  55C6 26 6B 74      mov b, _s159 ; "The Federation is in need of a new starship commander"
12949  55C9 FD AB         swp b
12950  55CB D8            push b
12951  55CC 07 31 13      call puts
12952  55CF 51 02 00      add sp, 2
12953  55D2             ;; puts(" for a similar mission.\n"); 
12954  55D2 26 A1 74      mov b, _s160 ; " for a similar mission.\n"
12955  55D5 FD AB         swp b
12956  55D7 D8            push b
12957  55D8 07 31 13      call puts
12958  55DB 51 02 00      add sp, 2
12959  55DE             ;; puts("If there is a volunteer, let him step forward and"); 
12960  55DE 26 BA 74      mov b, _s161 ; "If there is a volunteer, let him step forward and"
12961  55E1 FD AB         swp b
12962  55E3 D8            push b
12963  55E4 07 31 13      call puts
12964  55E7 51 02 00      add sp, 2
12965  55EA             ;; puts(" enter aye: "); 
12966  55EA 26 EC 74      mov b, _s162 ; " enter aye: "
12967  55ED FD AB         swp b
12968  55EF D8            push b
12969  55F0 07 31 13      call puts
12970  55F3 51 02 00      add sp, 2
12971  55F6             ;; input(x,4); 
12972  55F6 26 04 00      mov b, $4
12973  55F9 DD            push bl
12974  55FA FA FD FF      lea d, [bp + -3] ; $x
12975  55FD 2D            mov b, d
12976  55FE FD AB         swp b
12977  5600 D8            push b
12978  5601 07 7C 1D      call input
12979  5604 51 03 00      add sp, 3
12980  5607             ;; if (!strncmp(x, "aye", 3)) 
12981  5607             _if214_cond:
12982  5607 26 03 00      mov b, $3
12983  560A FD AB         swp b
12984  560C D8            push b
12985  560D 26 F9 74      mov b, _s163 ; "aye"
12986  5610 FD AB         swp b
12987  5612 D8            push b
12988  5613 FA FD FF      lea d, [bp + -3] ; $x
12989  5616 2D            mov b, d
12990  5617 FD AB         swp b
12991  5619 D8            push b
12992  561A 07 D0 04      call strncmp
12993  561D 51 06 00      add sp, 6
12994  5620 C0 00 00      cmp b, 0
12995  5623 FD 71         seq ; !
12996  5625 C0 00 00      cmp b, 0
12997  5628 C6 31 56      je _if214_exit
12998  562B             _if214_true:
12999  562B             ;; new_game(); 
13000  562B 07 1C 21      call new_game
13001  562E 0A 31 56      jmp _if214_exit
13002  5631             _if214_exit:
13003  5631 0A 34 56      jmp _if213_exit
13004  5634             _if213_exit:
13005  5634             ;; exit(); 
13006  5634 07 2E 17      call exit
13007  5637 F9            leave
13008  5638 09            ret
13009  5639             
13010  5639             klingons_move:
13011  5639 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13012  563C             ; $i 
13013  563C             ; $k 
13014  563C 52 04 00      sub sp, 4
13015  563F             ;; k = &kdata; 
13016  563F FA FD FF      lea d, [bp + -3] ; $k
13017  5642 DA            push d
13018  5643 3B 3C 61      mov d, _kdata_data ; $kdata
13019  5646 2D            mov b, d
13020  5647 E7            pop d
13021  5648 FD 43         mov [d], b
13022  564A             ;; for (i = 0; i <= 2; i++) { 
13023  564A             _for215_init:
13024  564A FA FF FF      lea d, [bp + -1] ; $i
13025  564D DA            push d
13026  564E 26 00 00      mov b, $0
13027  5651 E7            pop d
13028  5652 FD 43         mov [d], b
13029  5654             _for215_cond:
13030  5654 FA FF FF      lea d, [bp + -1] ; $i
13031  5657 2A            mov b, [d]
13032  5658             ; START RELATIONAL
13033  5658 D7            push a
13034  5659 11            mov a, b
13035  565A 26 02 00      mov b, $2
13036  565D B0            cmp a, b
13037  565E FD 73         slt ; <= (signed)
13038  5660 E4            pop a
13039  5661             ; END RELATIONAL
13040  5661 C0 00 00      cmp b, 0
13041  5664 C6 D4 56      je _for215_exit
13042  5667             _for215_block:
13043  5667             ;; if (k->energy > 0) { 
13044  5667             _if216_cond:
13045  5667 FA FD FF      lea d, [bp + -3] ; $k
13046  566A FD 2A         mov d, [d]
13047  566C 58 02 00      add d, 2
13048  566F 2A            mov b, [d]
13049  5670             ; START RELATIONAL
13050  5670 D7            push a
13051  5671 11            mov a, b
13052  5672 26 00 00      mov b, $0
13053  5675 B0            cmp a, b
13054  5676 FD 7F         sgt ; >
13055  5678 E4            pop a
13056  5679             ; END RELATIONAL
13057  5679 C0 00 00      cmp b, 0
13058  567C C6 B5 56      je _if216_exit
13059  567F             _if216_true:
13060  567F             ;; wipe_klingon(k); 
13061  567F FA FD FF      lea d, [bp + -3] ; $k
13062  5682 2A            mov b, [d]
13063  5683 FD AB         swp b
13064  5685 D8            push b
13065  5686 07 63 3B      call wipe_klingon
13066  5689 51 02 00      add sp, 2
13067  568C             ;; find_set_empty_place( 	3        , k->y, k->x); 
13068  568C FA FD FF      lea d, [bp + -3] ; $k
13069  568F FD 2A         mov d, [d]
13070  5691 58 01 00      add d, 1
13071  5694 32            mov bl, [d]
13072  5695 A7 00         mov bh, 0
13073  5697 FD AB         swp b
13074  5699 D8            push b
13075  569A FA FD FF      lea d, [bp + -3] ; $k
13076  569D FD 2A         mov d, [d]
13077  569F 58 00 00      add d, 0
13078  56A2 32            mov bl, [d]
13079  56A3 A7 00         mov bh, 0
13080  56A5 FD AB         swp b
13081  56A7 D8            push b
13082  56A8 26 03 00      mov b, $3
13083  56AB DD            push bl
13084  56AC 07 5D 5C      call find_set_empty_place
13085  56AF 51 05 00      add sp, 5
13086  56B2 0A B5 56      jmp _if216_exit
13087  56B5             _if216_exit:
13088  56B5             ;; k++; 
13089  56B5 FA FD FF      lea d, [bp + -3] ; $k
13090  56B8 2A            mov b, [d]
13091  56B9 D8            push b
13092  56BA FD 77         inc b
13093  56BC FD 77         inc b
13094  56BE FA FD FF      lea d, [bp + -3] ; $k
13095  56C1 FD 43         mov [d], b
13096  56C3 E5            pop b
13097  56C4             _for215_update:
13098  56C4 FA FF FF      lea d, [bp + -1] ; $i
13099  56C7 2A            mov b, [d]
13100  56C8 D8            push b
13101  56C9 FD 77         inc b
13102  56CB FA FF FF      lea d, [bp + -1] ; $i
13103  56CE FD 43         mov [d], b
13104  56D0 E5            pop b
13105  56D1 0A 54 56      jmp _for215_cond
13106  56D4             _for215_exit:
13107  56D4             ;; klingons_shoot(); 
13108  56D4 07 D9 56      call klingons_shoot
13109  56D7 F9            leave
13110  56D8 09            ret
13111  56D9             
13112  56D9             klingons_shoot:
13113  56D9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13114  56DC             ; $r 
13115  56DC             ; $h 
13116  56DC             ; $i 
13117  56DC             ; $k 
13118  56DC             ; $ratio 
13119  56DC 52 0C 00      sub sp, 12
13120  56DF             ;; k = &kdata; 
13121  56DF FA F9 FF      lea d, [bp + -7] ; $k
13122  56E2 DA            push d
13123  56E3 3B 3C 61      mov d, _kdata_data ; $kdata
13124  56E6 2D            mov b, d
13125  56E7 E7            pop d
13126  56E8 FD 43         mov [d], b
13127  56EA             ;; if (klingons <= 0) 
13128  56EA             _if217_cond:
13129  56EA 3B 48 61      mov d, _klingons ; $klingons
13130  56ED 32            mov bl, [d]
13131  56EE A7 00         mov bh, 0
13132  56F0             ; START RELATIONAL
13133  56F0 D7            push a
13134  56F1 11            mov a, b
13135  56F2 26 00 00      mov b, $0
13136  56F5 B0            cmp a, b
13137  56F6 FD 75         slu ; <= (unsigned)
13138  56F8 E4            pop a
13139  56F9             ; END RELATIONAL
13140  56F9 C0 00 00      cmp b, 0
13141  56FC C6 04 57      je _if217_exit
13142  56FF             _if217_true:
13143  56FF             ;; return; 
13144  56FF F9            leave
13145  5700 09            ret
13146  5701 0A 04 57      jmp _if217_exit
13147  5704             _if217_exit:
13148  5704             ;; if (docked) { 
13149  5704             _if218_cond:
13150  5704 3B 95 60      mov d, _docked ; $docked
13151  5707 32            mov bl, [d]
13152  5708 A7 00         mov bh, 0
13153  570A C0 00 00      cmp b, 0
13154  570D C6 21 57      je _if218_exit
13155  5710             _if218_true:
13156  5710             ;; puts("Starbase shields protect the Enterprise\n"); 
13157  5710 26 FD 74      mov b, _s164 ; "Starbase shields protect the Enterprise\n"
13158  5713 FD AB         swp b
13159  5715 D8            push b
13160  5716 07 31 13      call puts
13161  5719 51 02 00      add sp, 2
13162  571C             ;; return; 
13163  571C F9            leave
13164  571D 09            ret
13165  571E 0A 21 57      jmp _if218_exit
13166  5721             _if218_exit:
13167  5721             ;; for (i = 0; i <= 2; i++) { 
13168  5721             _for219_init:
13169  5721 FA FB FF      lea d, [bp + -5] ; $i
13170  5724 DA            push d
13171  5725 26 00 00      mov b, $0
13172  5728 E7            pop d
13173  5729 FD 3E         mov [d], bl
13174  572B             _for219_cond:
13175  572B FA FB FF      lea d, [bp + -5] ; $i
13176  572E 32            mov bl, [d]
13177  572F A7 00         mov bh, 0
13178  5731             ; START RELATIONAL
13179  5731 D7            push a
13180  5732 11            mov a, b
13181  5733 26 02 00      mov b, $2
13182  5736 B0            cmp a, b
13183  5737 FD 75         slu ; <= (unsigned)
13184  5739 E4            pop a
13185  573A             ; END RELATIONAL
13186  573A C0 00 00      cmp b, 0
13187  573D C6 B7 59      je _for219_exit
13188  5740             _for219_block:
13189  5740             ;; if (k->energy > 0) { 
13190  5740             _if220_cond:
13191  5740 FA F9 FF      lea d, [bp + -7] ; $k
13192  5743 FD 2A         mov d, [d]
13193  5745 58 02 00      add d, 2
13194  5748 2A            mov b, [d]
13195  5749             ; START RELATIONAL
13196  5749 D7            push a
13197  574A 11            mov a, b
13198  574B 26 00 00      mov b, $0
13199  574E B0            cmp a, b
13200  574F FD 7F         sgt ; >
13201  5751 E4            pop a
13202  5752             ; END RELATIONAL
13203  5752 C0 00 00      cmp b, 0
13204  5755 C6 96 59      je _if220_exit
13205  5758             _if220_true:
13206  5758             ;; h = k->energy * (200UL + get_rand(100)); 
13207  5758 FA FC FF      lea d, [bp + -4] ; $h
13208  575B DA            push d
13209  575C FA F9 FF      lea d, [bp + -7] ; $k
13210  575F FD 2A         mov d, [d]
13211  5761 58 02 00      add d, 2
13212  5764 2A            mov b, [d]
13213  5765             ; START FACTORS
13214  5765 D7            push a
13215  5766 11            mov a, b
13216  5767 26 C8 00      mov b, 200
13217  576A 38 00 00      mov c, 0
13218  576D             ; START TERMS
13219  576D D7            push a
13220  576E FD D8         push g
13221  5770 11            mov a, b
13222  5771 FD 7A         mov g, c
13223  5773 26 64 00      mov b, $64
13224  5776 FD AB         swp b
13225  5778 D8            push b
13226  5779 07 1C 1D      call get_rand
13227  577C 51 02 00      add sp, 2
13228  577F 54            add a, b
13229  5780 D7            push a
13230  5781 FD 12         mov a, g
13231  5783 28            mov b, c
13232  5784 5C            adc a, b
13233  5785 39            mov c, a
13234  5786 E5            pop b
13235  5787 FD F1         pop g
13236  5789 E4            pop a
13237  578A             ; END TERMS
13238  578A AC            mul a, b ; *
13239  578B 11            mov a, b
13240  578C 27            mov b, a
13241  578D E4            pop a
13242  578E             ; END FACTORS
13243  578E E7            pop d
13244  578F FD 43         mov [d], b
13245  5791 28            mov b, c
13246  5792 FD 44 02 00   mov [d + 2], b
13247  5796             ;; h =h* 100;	/* Ready for division in fixed */ 
13248  5796 FA FC FF      lea d, [bp + -4] ; $h
13249  5799 DA            push d
13250  579A FA FC FF      lea d, [bp + -4] ; $h
13251  579D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13252  57A0 FD 39         mov c, b ; And place it into C
13253  57A2 2A            mov b, [d] ; Lower Word in B
13254  57A3             ; START FACTORS
13255  57A3 D7            push a
13256  57A4 11            mov a, b
13257  57A5 26 64 00      mov b, $64
13258  57A8 AC            mul a, b ; *
13259  57A9 11            mov a, b
13260  57AA 27            mov b, a
13261  57AB E4            pop a
13262  57AC             ; END FACTORS
13263  57AC E7            pop d
13264  57AD FD 43         mov [d], b
13265  57AF 28            mov b, c
13266  57B0 FD 44 02 00   mov [d + 2], b
13267  57B4             ;; h =h/ distance_to(k); 
13268  57B4 FA FC FF      lea d, [bp + -4] ; $h
13269  57B7 DA            push d
13270  57B8 FA FC FF      lea d, [bp + -4] ; $h
13271  57BB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13272  57BE FD 39         mov c, b ; And place it into C
13273  57C0 2A            mov b, [d] ; Lower Word in B
13274  57C1             ; START FACTORS
13275  57C1 D7            push a
13276  57C2 11            mov a, b
13277  57C3 FA F9 FF      lea d, [bp + -7] ; $k
13278  57C6 2A            mov b, [d]
13279  57C7 FD AB         swp b
13280  57C9 D8            push b
13281  57CA 07 BF 5F      call distance_to
13282  57CD 51 02 00      add sp, 2
13283  57D0 AE            div a, b
13284  57D1 27            mov b, a
13285  57D2 E4            pop a
13286  57D3             ; END FACTORS
13287  57D3 E7            pop d
13288  57D4 FD 43         mov [d], b
13289  57D6 28            mov b, c
13290  57D7 FD 44 02 00   mov [d + 2], b
13291  57DB             ;; shield = shield - FROM_FIXED00(h); 
13292  57DB 3B 51 61      mov d, _shield ; $shield
13293  57DE DA            push d
13294  57DF 3B 51 61      mov d, _shield ; $shield
13295  57E2 2A            mov b, [d]
13296  57E3             ; START TERMS
13297  57E3 D7            push a
13298  57E4 11            mov a, b
13299  57E5 FA FC FF      lea d, [bp + -4] ; $h
13300  57E8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13301  57EB FD 39         mov c, b ; And place it into C
13302  57ED 2A            mov b, [d] ; Lower Word in B
13303  57EE FD AB         swp b
13304  57F0 D8            push b
13305  57F1 07 0B 1D      call FROM_FIXED00
13306  57F4 51 02 00      add sp, 2
13307  57F7 60            sub a, b
13308  57F8 27            mov b, a
13309  57F9 E4            pop a
13310  57FA             ; END TERMS
13311  57FA E7            pop d
13312  57FB FD 43         mov [d], b
13313  57FD             ;; k->energy = (k->energy * 100) / (300 + get_rand(100)); 
13314  57FD FA F9 FF      lea d, [bp + -7] ; $k
13315  5800 FD 2A         mov d, [d]
13316  5802 58 02 00      add d, 2
13317  5805 DA            push d
13318  5806 FA F9 FF      lea d, [bp + -7] ; $k
13319  5809 FD 2A         mov d, [d]
13320  580B 58 02 00      add d, 2
13321  580E 2A            mov b, [d]
13322  580F             ; START FACTORS
13323  580F D7            push a
13324  5810 11            mov a, b
13325  5811 26 64 00      mov b, $64
13326  5814 AC            mul a, b ; *
13327  5815 11            mov a, b
13328  5816 27            mov b, a
13329  5817 E4            pop a
13330  5818             ; END FACTORS
13331  5818             ; START FACTORS
13332  5818 D7            push a
13333  5819 11            mov a, b
13334  581A 26 2C 01      mov b, $12c
13335  581D             ; START TERMS
13336  581D D7            push a
13337  581E 11            mov a, b
13338  581F 26 64 00      mov b, $64
13339  5822 FD AB         swp b
13340  5824 D8            push b
13341  5825 07 1C 1D      call get_rand
13342  5828 51 02 00      add sp, 2
13343  582B 56            add b, a
13344  582C E4            pop a
13345  582D             ; END TERMS
13346  582D AE            div a, b
13347  582E 27            mov b, a
13348  582F E4            pop a
13349  5830             ; END FACTORS
13350  5830 E7            pop d
13351  5831 FD 43         mov [d], b
13352  5833             ;; printf("%d unit hit on Enterprise from sector %d, %d\n", (unsigned)FROM_FIXED00(h), k->y, k->x); 
13353  5833 FA F9 FF      lea d, [bp + -7] ; $k
13354  5836 FD 2A         mov d, [d]
13355  5838 58 01 00      add d, 1
13356  583B 32            mov bl, [d]
13357  583C A7 00         mov bh, 0
13358  583E DD            push bl
13359  583F FA F9 FF      lea d, [bp + -7] ; $k
13360  5842 FD 2A         mov d, [d]
13361  5844 58 00 00      add d, 0
13362  5847 32            mov bl, [d]
13363  5848 A7 00         mov bh, 0
13364  584A DD            push bl
13365  584B FA FC FF      lea d, [bp + -4] ; $h
13366  584E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13367  5851 FD 39         mov c, b ; And place it into C
13368  5853 2A            mov b, [d] ; Lower Word in B
13369  5854 FD AB         swp b
13370  5856 D8            push b
13371  5857 26 26 75      mov b, _s165 ; "%d unit hit on Enterprise from sector %d, %d\n"
13372  585A FD AB         swp b
13373  585C D8            push b
13374  585D 07 D1 05      call printf
13375  5860 51 06 00      add sp, 6
13376  5863             ;; if (shield <= 0) { 
13377  5863             _if221_cond:
13378  5863 3B 51 61      mov d, _shield ; $shield
13379  5866 2A            mov b, [d]
13380  5867             ; START RELATIONAL
13381  5867 D7            push a
13382  5868 11            mov a, b
13383  5869 26 00 00      mov b, $0
13384  586C B0            cmp a, b
13385  586D FD 73         slt ; <= (signed)
13386  586F E4            pop a
13387  5870             ; END RELATIONAL
13388  5870 C0 00 00      cmp b, 0
13389  5873 C6 86 58      je _if221_exit
13390  5876             _if221_true:
13391  5876             ;; putchar('\n'); 
13392  5876 26 0A 00      mov b, $a
13393  5879 DD            push bl
13394  587A 07 FB 12      call putchar
13395  587D 51 01 00      add sp, 1
13396  5880             ;; ship_destroyed(); 
13397  5880 07 D1 54      call ship_destroyed
13398  5883 0A 86 58      jmp _if221_exit
13399  5886             _if221_exit:
13400  5886             ;; printf("    <Shields down to %d units>\n\n", shield); 
13401  5886 3B 51 61      mov d, _shield ; $shield
13402  5889 2A            mov b, [d]
13403  588A FD AB         swp b
13404  588C D8            push b
13405  588D 26 54 75      mov b, _s166 ; "    <Shields down to %d units>\n\n"
13406  5890 FD AB         swp b
13407  5892 D8            push b
13408  5893 07 D1 05      call printf
13409  5896 51 04 00      add sp, 4
13410  5899             ;; if (h >= 20) { 
13411  5899             _if222_cond:
13412  5899 FA FC FF      lea d, [bp + -4] ; $h
13413  589C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13414  589F FD 39         mov c, b ; And place it into C
13415  58A1 2A            mov b, [d] ; Lower Word in B
13416  58A2             ; START RELATIONAL
13417  58A2 D7            push a
13418  58A3 FD D8         push g
13419  58A5 11            mov a, b
13420  58A6 FD 7A         mov g, c
13421  58A8 26 14 00      mov b, $14
13422  58AB 38 00 00      mov c, 0
13423  58AE FD 82         sgeu
13424  58B0 FD F1         pop g
13425  58B2 E4            pop a
13426  58B3             ; END RELATIONAL
13427  58B3 C0 00 00      cmp b, 0
13428  58B6 C6 93 59      je _if222_exit
13429  58B9             _if222_true:
13430  58B9             ;; ratio = ((int)h)/shield; 
13431  58B9 FA F5 FF      lea d, [bp + -11] ; $ratio
13432  58BC DA            push d
13433  58BD FA FC FF      lea d, [bp + -4] ; $h
13434  58C0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13435  58C3 FD 39         mov c, b ; And place it into C
13436  58C5 2A            mov b, [d] ; Lower Word in B
13437  58C6             ; START FACTORS
13438  58C6 D7            push a
13439  58C7 11            mov a, b
13440  58C8 3B 51 61      mov d, _shield ; $shield
13441  58CB 2A            mov b, [d]
13442  58CC AE            div a, b
13443  58CD 27            mov b, a
13444  58CE E4            pop a
13445  58CF             ; END FACTORS
13446  58CF E7            pop d
13447  58D0 FD 43         mov [d], b
13448  58D2 28            mov b, c
13449  58D3 FD 44 02 00   mov [d + 2], b
13450  58D7             ;; if (get_rand(10) <= 6 && ratio > 2) { 
13451  58D7             _if223_cond:
13452  58D7 26 0A 00      mov b, $a
13453  58DA FD AB         swp b
13454  58DC D8            push b
13455  58DD 07 1C 1D      call get_rand
13456  58E0 51 02 00      add sp, 2
13457  58E3             ; START RELATIONAL
13458  58E3 D7            push a
13459  58E4 11            mov a, b
13460  58E5 26 06 00      mov b, $6
13461  58E8 B0            cmp a, b
13462  58E9 FD 73         slt ; <= (signed)
13463  58EB E4            pop a
13464  58EC             ; END RELATIONAL
13465  58EC D7            push a
13466  58ED 11            mov a, b
13467  58EE FA F5 FF      lea d, [bp + -11] ; $ratio
13468  58F1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13469  58F4 FD 39         mov c, b ; And place it into C
13470  58F6 2A            mov b, [d] ; Lower Word in B
13471  58F7             ; START RELATIONAL
13472  58F7 D7            push a
13473  58F8 FD D8         push g
13474  58FA 11            mov a, b
13475  58FB FD 7A         mov g, c
13476  58FD 26 02 00      mov b, $2
13477  5900 38 00 00      mov c, 0
13478  5903 FD 81         sgu
13479  5905 FD F1         pop g
13480  5907 E4            pop a
13481  5908             ; END RELATIONAL
13482  5908 FD 22 00 00   mov g, 0
13483  590C FD B1 00 00   sand32 ga, cb
13483  5910 00 00 
13484  5912 E4            pop a
13485  5913 C0 00 00      cmp b, 0
13486  5916 C6 90 59      je _if223_exit
13487  5919             _if223_true:
13488  5919             ;; r = rand8(); 
13489  5919 FA 00 00      lea d, [bp + 0] ; $r
13490  591C DA            push d
13491  591D 07 6B 1D      call rand8
13492  5920 E7            pop d
13493  5921 FD 3E         mov [d], bl
13494  5923             ;; damage[r] =damage[r] - ratio + get_rand(50); 
13495  5923 3B 58 61      mov d, _damage_data ; $damage
13496  5926 D7            push a
13497  5927 DA            push d
13498  5928 FA 00 00      lea d, [bp + 0] ; $r
13499  592B 32            mov bl, [d]
13500  592C A7 00         mov bh, 0
13501  592E E7            pop d
13502  592F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13503  5933 E4            pop a
13504  5934 DA            push d
13505  5935 3B 58 61      mov d, _damage_data ; $damage
13506  5938 D7            push a
13507  5939 DA            push d
13508  593A FA 00 00      lea d, [bp + 0] ; $r
13509  593D 32            mov bl, [d]
13510  593E A7 00         mov bh, 0
13511  5940 E7            pop d
13512  5941 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13513  5945 E4            pop a
13514  5946 2A            mov b, [d]
13515  5947             ; START TERMS
13516  5947 D7            push a
13517  5948 11            mov a, b
13518  5949 FA F5 FF      lea d, [bp + -11] ; $ratio
13519  594C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13520  594F FD 39         mov c, b ; And place it into C
13521  5951 2A            mov b, [d] ; Lower Word in B
13522  5952 60            sub a, b
13523  5953 27            mov b, a
13524  5954 11            mov a, b
13525  5955 FD 7A         mov g, c
13526  5957 26 32 00      mov b, $32
13527  595A FD AB         swp b
13528  595C D8            push b
13529  595D 07 1C 1D      call get_rand
13530  5960 51 02 00      add sp, 2
13531  5963 54            add a, b
13532  5964 D7            push a
13533  5965 FD 12         mov a, g
13534  5967 28            mov b, c
13535  5968 5C            adc a, b
13536  5969 39            mov c, a
13537  596A E5            pop b
13538  596B E4            pop a
13539  596C             ; END TERMS
13540  596C E7            pop d
13541  596D FD 43         mov [d], b
13542  596F             ;; printf("Damage Control reports\n%s damaged by hit\n\n", get_device_name(r)); 
13543  596F FA 00 00      lea d, [bp + 0] ; $r
13544  5972 32            mov bl, [d]
13545  5973 A7 00         mov bh, 0
13546  5975 FD AB         swp b
13547  5977 D8            push b
13548  5978 07 1B 5D      call get_device_name
13549  597B 51 02 00      add sp, 2
13550  597E FD AB         swp b
13551  5980 D8            push b
13552  5981 26 75 75      mov b, _s167 ; "Damage Control reports\n%s damaged by hit\n\n"
13553  5984 FD AB         swp b
13554  5986 D8            push b
13555  5987 07 D1 05      call printf
13556  598A 51 04 00      add sp, 4
13557  598D 0A 90 59      jmp _if223_exit
13558  5990             _if223_exit:
13559  5990 0A 93 59      jmp _if222_exit
13560  5993             _if222_exit:
13561  5993 0A 96 59      jmp _if220_exit
13562  5996             _if220_exit:
13563  5996             ;; k++; 
13564  5996 FA F9 FF      lea d, [bp + -7] ; $k
13565  5999 2A            mov b, [d]
13566  599A D8            push b
13567  599B FD 77         inc b
13568  599D FD 77         inc b
13569  599F FA F9 FF      lea d, [bp + -7] ; $k
13570  59A2 FD 43         mov [d], b
13571  59A4 E5            pop b
13572  59A5             _for219_update:
13573  59A5 FA FB FF      lea d, [bp + -5] ; $i
13574  59A8 32            mov bl, [d]
13575  59A9 A7 00         mov bh, 0
13576  59AB D8            push b
13577  59AC FD 77         inc b
13578  59AE FA FB FF      lea d, [bp + -5] ; $i
13579  59B1 FD 43         mov [d], b
13580  59B3 E5            pop b
13581  59B4 0A 2B 57      jmp _for219_cond
13582  59B7             _for219_exit:
13583  59B7 F9            leave
13584  59B8 09            ret
13585  59B9             
13586  59B9             repair_damage:
13587  59B9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13588  59BC             ; $i 
13589  59BC             ; $d1 
13590  59BC             ; $repair_factor 
13591  59BC             ; $r 
13592  59BC 52 07 00      sub sp, 7
13593  59BF             ;; repair_factor = warp; 
13594  59BF FA FB FF      lea d, [bp + -5] ; $repair_factor
13595  59C2 DA            push d
13596  59C3 FA 05 00      lea d, [bp + 5] ; $warp
13597  59C6 2A            mov b, [d]
13598  59C7 E7            pop d
13599  59C8 FD 43         mov [d], b
13600  59CA             ;; if (warp >= 100) 
13601  59CA             _if224_cond:
13602  59CA FA 05 00      lea d, [bp + 5] ; $warp
13603  59CD 2A            mov b, [d]
13604  59CE             ; START RELATIONAL
13605  59CE D7            push a
13606  59CF 11            mov a, b
13607  59D0 26 64 00      mov b, $64
13608  59D3 B0            cmp a, b
13609  59D4 FD 82         sgeu ; >= (unsigned)
13610  59D6 E4            pop a
13611  59D7             ; END RELATIONAL
13612  59D7 C0 00 00      cmp b, 0
13613  59DA C6 F3 59      je _if224_exit
13614  59DD             _if224_true:
13615  59DD             ;; repair_factor = TO_FIXED00(1); 
13616  59DD FA FB FF      lea d, [bp + -5] ; $repair_factor
13617  59E0 DA            push d
13618  59E1 26 01 00      mov b, $1
13619  59E4 FD AB         swp b
13620  59E6 D8            push b
13621  59E7 07 F9 1C      call TO_FIXED00
13622  59EA 51 02 00      add sp, 2
13623  59ED E7            pop d
13624  59EE FD 43         mov [d], b
13625  59F0 0A F3 59      jmp _if224_exit
13626  59F3             _if224_exit:
13627  59F3             ;; for (i = 1; i <= 8; i++) { 
13628  59F3             _for225_init:
13629  59F3 FA FF FF      lea d, [bp + -1] ; $i
13630  59F6 DA            push d
13631  59F7 26 01 00      mov b, $1
13632  59FA E7            pop d
13633  59FB FD 43         mov [d], b
13634  59FD             _for225_cond:
13635  59FD FA FF FF      lea d, [bp + -1] ; $i
13636  5A00 2A            mov b, [d]
13637  5A01             ; START RELATIONAL
13638  5A01 D7            push a
13639  5A02 11            mov a, b
13640  5A03 26 08 00      mov b, $8
13641  5A06 B0            cmp a, b
13642  5A07 FD 73         slt ; <= (signed)
13643  5A09 E4            pop a
13644  5A0A             ; END RELATIONAL
13645  5A0A C0 00 00      cmp b, 0
13646  5A0D C6 44 5B      je _for225_exit
13647  5A10             _for225_block:
13648  5A10             ;; if (damage[i] < 0) { 
13649  5A10             _if226_cond:
13650  5A10 3B 58 61      mov d, _damage_data ; $damage
13651  5A13 D7            push a
13652  5A14 DA            push d
13653  5A15 FA FF FF      lea d, [bp + -1] ; $i
13654  5A18 2A            mov b, [d]
13655  5A19 E7            pop d
13656  5A1A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13657  5A1E E4            pop a
13658  5A1F 2A            mov b, [d]
13659  5A20             ; START RELATIONAL
13660  5A20 D7            push a
13661  5A21 11            mov a, b
13662  5A22 26 00 00      mov b, $0
13663  5A25 B0            cmp a, b
13664  5A26 FD 73         slt ; < (signed)
13665  5A28 E4            pop a
13666  5A29             ; END RELATIONAL
13667  5A29 C0 00 00      cmp b, 0
13668  5A2C C6 34 5B      je _if226_exit
13669  5A2F             _if226_true:
13670  5A2F             ;; damage[i] = damage[i] + repair_factor; 
13671  5A2F 3B 58 61      mov d, _damage_data ; $damage
13672  5A32 D7            push a
13673  5A33 DA            push d
13674  5A34 FA FF FF      lea d, [bp + -1] ; $i
13675  5A37 2A            mov b, [d]
13676  5A38 E7            pop d
13677  5A39 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13678  5A3D E4            pop a
13679  5A3E DA            push d
13680  5A3F 3B 58 61      mov d, _damage_data ; $damage
13681  5A42 D7            push a
13682  5A43 DA            push d
13683  5A44 FA FF FF      lea d, [bp + -1] ; $i
13684  5A47 2A            mov b, [d]
13685  5A48 E7            pop d
13686  5A49 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13687  5A4D E4            pop a
13688  5A4E 2A            mov b, [d]
13689  5A4F             ; START TERMS
13690  5A4F D7            push a
13691  5A50 11            mov a, b
13692  5A51 FA FB FF      lea d, [bp + -5] ; $repair_factor
13693  5A54 2A            mov b, [d]
13694  5A55 56            add b, a
13695  5A56 E4            pop a
13696  5A57             ; END TERMS
13697  5A57 E7            pop d
13698  5A58 FD 43         mov [d], b
13699  5A5A             ;; if (damage[i] > -10 && damage[i] < 0)	/* -0.1 */ 
13700  5A5A             _if227_cond:
13701  5A5A 3B 58 61      mov d, _damage_data ; $damage
13702  5A5D D7            push a
13703  5A5E DA            push d
13704  5A5F FA FF FF      lea d, [bp + -1] ; $i
13705  5A62 2A            mov b, [d]
13706  5A63 E7            pop d
13707  5A64 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13708  5A68 E4            pop a
13709  5A69 2A            mov b, [d]
13710  5A6A             ; START RELATIONAL
13711  5A6A D7            push a
13712  5A6B 11            mov a, b
13713  5A6C 26 F6 FF      mov b, $fff6
13714  5A6F B0            cmp a, b
13715  5A70 FD 7F         sgt ; >
13716  5A72 E4            pop a
13717  5A73             ; END RELATIONAL
13718  5A73 D7            push a
13719  5A74 11            mov a, b
13720  5A75 3B 58 61      mov d, _damage_data ; $damage
13721  5A78 D7            push a
13722  5A79 DA            push d
13723  5A7A FA FF FF      lea d, [bp + -1] ; $i
13724  5A7D 2A            mov b, [d]
13725  5A7E E7            pop d
13726  5A7F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13727  5A83 E4            pop a
13728  5A84 2A            mov b, [d]
13729  5A85             ; START RELATIONAL
13730  5A85 D7            push a
13731  5A86 11            mov a, b
13732  5A87 26 00 00      mov b, $0
13733  5A8A B0            cmp a, b
13734  5A8B FD 73         slt ; < (signed)
13735  5A8D E4            pop a
13736  5A8E             ; END RELATIONAL
13737  5A8E FD A7         sand a, b
13738  5A90 E4            pop a
13739  5A91 C0 00 00      cmp b, 0
13740  5A94 C6 B0 5A      je _if227_else
13741  5A97             _if227_true:
13742  5A97             ;; damage[i] = -10; 
13743  5A97 3B 58 61      mov d, _damage_data ; $damage
13744  5A9A D7            push a
13745  5A9B DA            push d
13746  5A9C FA FF FF      lea d, [bp + -1] ; $i
13747  5A9F 2A            mov b, [d]
13748  5AA0 E7            pop d
13749  5AA1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13750  5AA5 E4            pop a
13751  5AA6 DA            push d
13752  5AA7 26 F6 FF      mov b, $fff6
13753  5AAA E7            pop d
13754  5AAB FD 43         mov [d], b
13755  5AAD 0A 31 5B      jmp _if227_exit
13756  5AB0             _if227_else:
13757  5AB0             ;; if (damage[i] >= 0) { 
13758  5AB0             _if228_cond:
13759  5AB0 3B 58 61      mov d, _damage_data ; $damage
13760  5AB3 D7            push a
13761  5AB4 DA            push d
13762  5AB5 FA FF FF      lea d, [bp + -1] ; $i
13763  5AB8 2A            mov b, [d]
13764  5AB9 E7            pop d
13765  5ABA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13766  5ABE E4            pop a
13767  5ABF 2A            mov b, [d]
13768  5AC0             ; START RELATIONAL
13769  5AC0 D7            push a
13770  5AC1 11            mov a, b
13771  5AC2 26 00 00      mov b, $0
13772  5AC5 B0            cmp a, b
13773  5AC6 FD 80         sge ; >=
13774  5AC8 E4            pop a
13775  5AC9             ; END RELATIONAL
13776  5AC9 C0 00 00      cmp b, 0
13777  5ACC C6 31 5B      je _if228_exit
13778  5ACF             _if228_true:
13779  5ACF             ;; if (d1 != 1) { 
13780  5ACF             _if229_cond:
13781  5ACF FA FD FF      lea d, [bp + -3] ; $d1
13782  5AD2 2A            mov b, [d]
13783  5AD3             ; START RELATIONAL
13784  5AD3 D7            push a
13785  5AD4 11            mov a, b
13786  5AD5 26 01 00      mov b, $1
13787  5AD8 B0            cmp a, b
13788  5AD9 FD 72         sneq ; !=
13789  5ADB E4            pop a
13790  5ADC             ; END RELATIONAL
13791  5ADC C0 00 00      cmp b, 0
13792  5ADF C6 FC 5A      je _if229_exit
13793  5AE2             _if229_true:
13794  5AE2             ;; d1 = 1; 
13795  5AE2 FA FD FF      lea d, [bp + -3] ; $d1
13796  5AE5 DA            push d
13797  5AE6 26 01 00      mov b, $1
13798  5AE9 E7            pop d
13799  5AEA FD 43         mov [d], b
13800  5AEC             ;; puts(dcr_1); 
13801  5AEC 3B 67 62      mov d, _dcr_1 ; $dcr_1
13802  5AEF 2A            mov b, [d]
13803  5AF0 FD AB         swp b
13804  5AF2 D8            push b
13805  5AF3 07 31 13      call puts
13806  5AF6 51 02 00      add sp, 2
13807  5AF9 0A FC 5A      jmp _if229_exit
13808  5AFC             _if229_exit:
13809  5AFC             ;; printf("    %s repair completed\n\n", 
13810  5AFC FA FF FF      lea d, [bp + -1] ; $i
13811  5AFF 2A            mov b, [d]
13812  5B00 FD AB         swp b
13813  5B02 D8            push b
13814  5B03 07 1B 5D      call get_device_name
13815  5B06 51 02 00      add sp, 2
13816  5B09 FD AB         swp b
13817  5B0B D8            push b
13818  5B0C 26 A0 75      mov b, _s168 ; "    %s repair completed\n\n"
13819  5B0F FD AB         swp b
13820  5B11 D8            push b
13821  5B12 07 D1 05      call printf
13822  5B15 51 04 00      add sp, 4
13823  5B18             ;; damage[i] = 0; 
13824  5B18 3B 58 61      mov d, _damage_data ; $damage
13825  5B1B D7            push a
13826  5B1C DA            push d
13827  5B1D FA FF FF      lea d, [bp + -1] ; $i
13828  5B20 2A            mov b, [d]
13829  5B21 E7            pop d
13830  5B22 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13831  5B26 E4            pop a
13832  5B27 DA            push d
13833  5B28 26 00 00      mov b, $0
13834  5B2B E7            pop d
13835  5B2C FD 43         mov [d], b
13836  5B2E 0A 31 5B      jmp _if228_exit
13837  5B31             _if228_exit:
13838  5B31             _if227_exit:
13839  5B31 0A 34 5B      jmp _if226_exit
13840  5B34             _if226_exit:
13841  5B34             _for225_update:
13842  5B34 FA FF FF      lea d, [bp + -1] ; $i
13843  5B37 2A            mov b, [d]
13844  5B38 D8            push b
13845  5B39 FD 77         inc b
13846  5B3B FA FF FF      lea d, [bp + -1] ; $i
13847  5B3E FD 43         mov [d], b
13848  5B40 E5            pop b
13849  5B41 0A FD 59      jmp _for225_cond
13850  5B44             _for225_exit:
13851  5B44             ;; if (get_rand(10) <= 2) { 
13852  5B44             _if230_cond:
13853  5B44 26 0A 00      mov b, $a
13854  5B47 FD AB         swp b
13855  5B49 D8            push b
13856  5B4A 07 1C 1D      call get_rand
13857  5B4D 51 02 00      add sp, 2
13858  5B50             ; START RELATIONAL
13859  5B50 D7            push a
13860  5B51 11            mov a, b
13861  5B52 26 02 00      mov b, $2
13862  5B55 B0            cmp a, b
13863  5B56 FD 73         slt ; <= (signed)
13864  5B58 E4            pop a
13865  5B59             ; END RELATIONAL
13866  5B59 C0 00 00      cmp b, 0
13867  5B5C C6 5B 5C      je _if230_exit
13868  5B5F             _if230_true:
13869  5B5F             ;; r = rand8(); 
13870  5B5F FA FA FF      lea d, [bp + -6] ; $r
13871  5B62 DA            push d
13872  5B63 07 6B 1D      call rand8
13873  5B66 E7            pop d
13874  5B67 FD 3E         mov [d], bl
13875  5B69             ;; if (get_rand(10) < 6) { 
13876  5B69             _if231_cond:
13877  5B69 26 0A 00      mov b, $a
13878  5B6C FD AB         swp b
13879  5B6E D8            push b
13880  5B6F 07 1C 1D      call get_rand
13881  5B72 51 02 00      add sp, 2
13882  5B75             ; START RELATIONAL
13883  5B75 D7            push a
13884  5B76 11            mov a, b
13885  5B77 26 06 00      mov b, $6
13886  5B7A B0            cmp a, b
13887  5B7B FD 73         slt ; < (signed)
13888  5B7D E4            pop a
13889  5B7E             ; END RELATIONAL
13890  5B7E C0 00 00      cmp b, 0
13891  5B81 C6 F1 5B      je _if231_else
13892  5B84             _if231_true:
13893  5B84             ;; damage[r] =damage[r]- (get_rand(500) + 100); 
13894  5B84 3B 58 61      mov d, _damage_data ; $damage
13895  5B87 D7            push a
13896  5B88 DA            push d
13897  5B89 FA FA FF      lea d, [bp + -6] ; $r
13898  5B8C 32            mov bl, [d]
13899  5B8D A7 00         mov bh, 0
13900  5B8F E7            pop d
13901  5B90 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13902  5B94 E4            pop a
13903  5B95 DA            push d
13904  5B96 3B 58 61      mov d, _damage_data ; $damage
13905  5B99 D7            push a
13906  5B9A DA            push d
13907  5B9B FA FA FF      lea d, [bp + -6] ; $r
13908  5B9E 32            mov bl, [d]
13909  5B9F A7 00         mov bh, 0
13910  5BA1 E7            pop d
13911  5BA2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13912  5BA6 E4            pop a
13913  5BA7 2A            mov b, [d]
13914  5BA8             ; START TERMS
13915  5BA8 D7            push a
13916  5BA9 11            mov a, b
13917  5BAA 26 F4 01      mov b, $1f4
13918  5BAD FD AB         swp b
13919  5BAF D8            push b
13920  5BB0 07 1C 1D      call get_rand
13921  5BB3 51 02 00      add sp, 2
13922  5BB6             ; START TERMS
13923  5BB6 D7            push a
13924  5BB7 11            mov a, b
13925  5BB8 26 64 00      mov b, $64
13926  5BBB 56            add b, a
13927  5BBC E4            pop a
13928  5BBD             ; END TERMS
13929  5BBD 60            sub a, b
13930  5BBE 27            mov b, a
13931  5BBF E4            pop a
13932  5BC0             ; END TERMS
13933  5BC0 E7            pop d
13934  5BC1 FD 43         mov [d], b
13935  5BC3             ;; puts(dcr_1); 
13936  5BC3 3B 67 62      mov d, _dcr_1 ; $dcr_1
13937  5BC6 2A            mov b, [d]
13938  5BC7 FD AB         swp b
13939  5BC9 D8            push b
13940  5BCA 07 31 13      call puts
13941  5BCD 51 02 00      add sp, 2
13942  5BD0             ;; printf("    %s damaged\n\n", get_device_name(r)); 
13943  5BD0 FA FA FF      lea d, [bp + -6] ; $r
13944  5BD3 32            mov bl, [d]
13945  5BD4 A7 00         mov bh, 0
13946  5BD6 FD AB         swp b
13947  5BD8 D8            push b
13948  5BD9 07 1B 5D      call get_device_name
13949  5BDC 51 02 00      add sp, 2
13950  5BDF FD AB         swp b
13951  5BE1 D8            push b
13952  5BE2 26 BA 75      mov b, _s169 ; "    %s damaged\n\n"
13953  5BE5 FD AB         swp b
13954  5BE7 D8            push b
13955  5BE8 07 D1 05      call printf
13956  5BEB 51 04 00      add sp, 4
13957  5BEE 0A 58 5C      jmp _if231_exit
13958  5BF1             _if231_else:
13959  5BF1             ;; damage[r] = damage[r] + get_rand(300) + 100; 
13960  5BF1 3B 58 61      mov d, _damage_data ; $damage
13961  5BF4 D7            push a
13962  5BF5 DA            push d
13963  5BF6 FA FA FF      lea d, [bp + -6] ; $r
13964  5BF9 32            mov bl, [d]
13965  5BFA A7 00         mov bh, 0
13966  5BFC E7            pop d
13967  5BFD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13968  5C01 E4            pop a
13969  5C02 DA            push d
13970  5C03 3B 58 61      mov d, _damage_data ; $damage
13971  5C06 D7            push a
13972  5C07 DA            push d
13973  5C08 FA FA FF      lea d, [bp + -6] ; $r
13974  5C0B 32            mov bl, [d]
13975  5C0C A7 00         mov bh, 0
13976  5C0E E7            pop d
13977  5C0F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13978  5C13 E4            pop a
13979  5C14 2A            mov b, [d]
13980  5C15             ; START TERMS
13981  5C15 D7            push a
13982  5C16 11            mov a, b
13983  5C17 26 2C 01      mov b, $12c
13984  5C1A FD AB         swp b
13985  5C1C D8            push b
13986  5C1D 07 1C 1D      call get_rand
13987  5C20 51 02 00      add sp, 2
13988  5C23 56            add b, a
13989  5C24 11            mov a, b
13990  5C25 26 64 00      mov b, $64
13991  5C28 56            add b, a
13992  5C29 E4            pop a
13993  5C2A             ; END TERMS
13994  5C2A E7            pop d
13995  5C2B FD 43         mov [d], b
13996  5C2D             ;; puts(dcr_1); 
13997  5C2D 3B 67 62      mov d, _dcr_1 ; $dcr_1
13998  5C30 2A            mov b, [d]
13999  5C31 FD AB         swp b
14000  5C33 D8            push b
14001  5C34 07 31 13      call puts
14002  5C37 51 02 00      add sp, 2
14003  5C3A             ;; printf("    %s state of repair improved\n\n", 
14004  5C3A FA FA FF      lea d, [bp + -6] ; $r
14005  5C3D 32            mov bl, [d]
14006  5C3E A7 00         mov bh, 0
14007  5C40 FD AB         swp b
14008  5C42 D8            push b
14009  5C43 07 1B 5D      call get_device_name
14010  5C46 51 02 00      add sp, 2
14011  5C49 FD AB         swp b
14012  5C4B D8            push b
14013  5C4C 26 CB 75      mov b, _s170 ; "    %s state of repair improved\n\n"
14014  5C4F FD AB         swp b
14015  5C51 D8            push b
14016  5C52 07 D1 05      call printf
14017  5C55 51 04 00      add sp, 4
14018  5C58             _if231_exit:
14019  5C58 0A 5B 5C      jmp _if230_exit
14020  5C5B             _if230_exit:
14021  5C5B F9            leave
14022  5C5C 09            ret
14023  5C5D             
14024  5C5D             find_set_empty_place:
14025  5C5D F8 00 00      enter 0 ; (push bp; mov bp, sp)
14026  5C60             ; $r1 
14027  5C60             ; $r2 
14028  5C60 52 02 00      sub sp, 2
14029  5C63             ;; do { 
14030  5C63             _do232_block:
14031  5C63             ;; r1 = rand8(); 
14032  5C63 FA 00 00      lea d, [bp + 0] ; $r1
14033  5C66 DA            push d
14034  5C67 07 6B 1D      call rand8
14035  5C6A E7            pop d
14036  5C6B FD 3E         mov [d], bl
14037  5C6D             ;; r2 = rand8(); 
14038  5C6D FA FF FF      lea d, [bp + -1] ; $r2
14039  5C70 DA            push d
14040  5C71 07 6B 1D      call rand8
14041  5C74 E7            pop d
14042  5C75 FD 3E         mov [d], bl
14043  5C77             ;; } while (quad[r1+-1][r2+-1] !=  		0       ); 
14044  5C77             _do232_cond:
14045  5C77 3B 72 61      mov d, _quad_data ; $quad
14046  5C7A D7            push a
14047  5C7B DA            push d
14048  5C7C FA 00 00      lea d, [bp + 0] ; $r1
14049  5C7F 32            mov bl, [d]
14050  5C80 A7 00         mov bh, 0
14051  5C82             ; START TERMS
14052  5C82 D7            push a
14053  5C83 11            mov a, b
14054  5C84 26 FF FF      mov b, $ffff
14055  5C87 56            add b, a
14056  5C88 E4            pop a
14057  5C89             ; END TERMS
14058  5C89 E7            pop d
14059  5C8A FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
14060  5C8E DA            push d
14061  5C8F FA FF FF      lea d, [bp + -1] ; $r2
14062  5C92 32            mov bl, [d]
14063  5C93 A7 00         mov bh, 0
14064  5C95             ; START TERMS
14065  5C95 D7            push a
14066  5C96 11            mov a, b
14067  5C97 26 FF FF      mov b, $ffff
14068  5C9A 56            add b, a
14069  5C9B E4            pop a
14070  5C9C             ; END TERMS
14071  5C9C E7            pop d
14072  5C9D 5A            add d, b
14073  5C9E E4            pop a
14074  5C9F 32            mov bl, [d]
14075  5CA0 A7 00         mov bh, 0
14076  5CA2             ; START RELATIONAL
14077  5CA2 D7            push a
14078  5CA3 11            mov a, b
14079  5CA4 26 00 00      mov b, $0
14080  5CA7 B0            cmp a, b
14081  5CA8 FD 72         sneq ; !=
14082  5CAA E4            pop a
14083  5CAB             ; END RELATIONAL
14084  5CAB C0 01 00      cmp b, 1
14085  5CAE C6 63 5C      je _do232_block
14086  5CB1             _do232_exit:
14087  5CB1             ;; quad[r1+-1][r2+-1] = t; 
14088  5CB1 3B 72 61      mov d, _quad_data ; $quad
14089  5CB4 D7            push a
14090  5CB5 DA            push d
14091  5CB6 FA 00 00      lea d, [bp + 0] ; $r1
14092  5CB9 32            mov bl, [d]
14093  5CBA A7 00         mov bh, 0
14094  5CBC             ; START TERMS
14095  5CBC D7            push a
14096  5CBD 11            mov a, b
14097  5CBE 26 FF FF      mov b, $ffff
14098  5CC1 56            add b, a
14099  5CC2 E4            pop a
14100  5CC3             ; END TERMS
14101  5CC3 E7            pop d
14102  5CC4 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
14103  5CC8 DA            push d
14104  5CC9 FA FF FF      lea d, [bp + -1] ; $r2
14105  5CCC 32            mov bl, [d]
14106  5CCD A7 00         mov bh, 0
14107  5CCF             ; START TERMS
14108  5CCF D7            push a
14109  5CD0 11            mov a, b
14110  5CD1 26 FF FF      mov b, $ffff
14111  5CD4 56            add b, a
14112  5CD5 E4            pop a
14113  5CD6             ; END TERMS
14114  5CD6 E7            pop d
14115  5CD7 5A            add d, b
14116  5CD8 E4            pop a
14117  5CD9 DA            push d
14118  5CDA FA 05 00      lea d, [bp + 5] ; $t
14119  5CDD 32            mov bl, [d]
14120  5CDE A7 00         mov bh, 0
14121  5CE0 E7            pop d
14122  5CE1 FD 3E         mov [d], bl
14123  5CE3             ;; if (z1) 
14124  5CE3             _if233_cond:
14125  5CE3 FA 06 00      lea d, [bp + 6] ; $z1
14126  5CE6 2A            mov b, [d]
14127  5CE7 C0 00 00      cmp b, 0
14128  5CEA C6 FE 5C      je _if233_exit
14129  5CED             _if233_true:
14130  5CED             ;; *z1 = r1; 
14131  5CED FA 06 00      lea d, [bp + 6] ; $z1
14132  5CF0 2A            mov b, [d]
14133  5CF1 D8            push b
14134  5CF2 FA 00 00      lea d, [bp + 0] ; $r1
14135  5CF5 32            mov bl, [d]
14136  5CF6 A7 00         mov bh, 0
14137  5CF8 E7            pop d
14138  5CF9 FD 3E         mov [d], bl
14139  5CFB 0A FE 5C      jmp _if233_exit
14140  5CFE             _if233_exit:
14141  5CFE             ;; if (z2) 
14142  5CFE             _if234_cond:
14143  5CFE FA 08 00      lea d, [bp + 8] ; $z2
14144  5D01 2A            mov b, [d]
14145  5D02 C0 00 00      cmp b, 0
14146  5D05 C6 19 5D      je _if234_exit
14147  5D08             _if234_true:
14148  5D08             ;; *z2 = r2; 
14149  5D08 FA 08 00      lea d, [bp + 8] ; $z2
14150  5D0B 2A            mov b, [d]
14151  5D0C D8            push b
14152  5D0D FA FF FF      lea d, [bp + -1] ; $r2
14153  5D10 32            mov bl, [d]
14154  5D11 A7 00         mov bh, 0
14155  5D13 E7            pop d
14156  5D14 FD 3E         mov [d], bl
14157  5D16 0A 19 5D      jmp _if234_exit
14158  5D19             _if234_exit:
14159  5D19 F9            leave
14160  5D1A 09            ret
14161  5D1B             
14162  5D1B             get_device_name:
14163  5D1B F8 00 00      enter 0 ; (push bp; mov bp, sp)
14164  5D1E             ;; if (n < 0 || n > 8) 
14165  5D1E             _if235_cond:
14166  5D1E FA 05 00      lea d, [bp + 5] ; $n
14167  5D21 2A            mov b, [d]
14168  5D22             ; START RELATIONAL
14169  5D22 D7            push a
14170  5D23 11            mov a, b
14171  5D24 26 00 00      mov b, $0
14172  5D27 B0            cmp a, b
14173  5D28 FD 73         slt ; < (signed)
14174  5D2A E4            pop a
14175  5D2B             ; END RELATIONAL
14176  5D2B D7            push a
14177  5D2C 11            mov a, b
14178  5D2D FA 05 00      lea d, [bp + 5] ; $n
14179  5D30 2A            mov b, [d]
14180  5D31             ; START RELATIONAL
14181  5D31 D7            push a
14182  5D32 11            mov a, b
14183  5D33 26 08 00      mov b, $8
14184  5D36 B0            cmp a, b
14185  5D37 FD 7F         sgt ; >
14186  5D39 E4            pop a
14187  5D3A             ; END RELATIONAL
14188  5D3A FD A8         sor a, b ; ||
14189  5D3C E4            pop a
14190  5D3D C0 00 00      cmp b, 0
14191  5D40 C6 50 5D      je _if235_exit
14192  5D43             _if235_true:
14193  5D43             ;; n = 0; 
14194  5D43 FA 05 00      lea d, [bp + 5] ; $n
14195  5D46 DA            push d
14196  5D47 26 00 00      mov b, $0
14197  5D4A E7            pop d
14198  5D4B FD 43         mov [d], b
14199  5D4D 0A 50 5D      jmp _if235_exit
14200  5D50             _if235_exit:
14201  5D50             ;; return device_name[n]; 
14202  5D50 3B 2C 62      mov d, _device_name_data ; $device_name
14203  5D53 D7            push a
14204  5D54 DA            push d
14205  5D55 FA 05 00      lea d, [bp + 5] ; $n
14206  5D58 2A            mov b, [d]
14207  5D59 E7            pop d
14208  5D5A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14209  5D5E E4            pop a
14210  5D5F 2A            mov b, [d]
14211  5D60 F9            leave
14212  5D61 09            ret
14213  5D62             
14214  5D62             quadrant_name:
14215  5D62 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14216  5D65             ;; if (y < 1 || y > 8 || x < 1 || x > 8) 
14217  5D65             _if236_cond:
14218  5D65 FA 06 00      lea d, [bp + 6] ; $y
14219  5D68 32            mov bl, [d]
14220  5D69 A7 00         mov bh, 0
14221  5D6B             ; START RELATIONAL
14222  5D6B D7            push a
14223  5D6C 11            mov a, b
14224  5D6D 26 01 00      mov b, $1
14225  5D70 B0            cmp a, b
14226  5D71 FD 75         slu ; < (unsigned)
14227  5D73 E4            pop a
14228  5D74             ; END RELATIONAL
14229  5D74 D7            push a
14230  5D75 11            mov a, b
14231  5D76 FA 06 00      lea d, [bp + 6] ; $y
14232  5D79 32            mov bl, [d]
14233  5D7A A7 00         mov bh, 0
14234  5D7C             ; START RELATIONAL
14235  5D7C D7            push a
14236  5D7D 11            mov a, b
14237  5D7E 26 08 00      mov b, $8
14238  5D81 B0            cmp a, b
14239  5D82 FD 81         sgu ; > (unsigned)
14240  5D84 E4            pop a
14241  5D85             ; END RELATIONAL
14242  5D85 FD A8         sor a, b ; ||
14243  5D87 11            mov a, b
14244  5D88 FA 07 00      lea d, [bp + 7] ; $x
14245  5D8B 32            mov bl, [d]
14246  5D8C A7 00         mov bh, 0
14247  5D8E             ; START RELATIONAL
14248  5D8E D7            push a
14249  5D8F 11            mov a, b
14250  5D90 26 01 00      mov b, $1
14251  5D93 B0            cmp a, b
14252  5D94 FD 75         slu ; < (unsigned)
14253  5D96 E4            pop a
14254  5D97             ; END RELATIONAL
14255  5D97 FD A8         sor a, b ; ||
14256  5D99 11            mov a, b
14257  5D9A FA 07 00      lea d, [bp + 7] ; $x
14258  5D9D 32            mov bl, [d]
14259  5D9E A7 00         mov bh, 0
14260  5DA0             ; START RELATIONAL
14261  5DA0 D7            push a
14262  5DA1 11            mov a, b
14263  5DA2 26 08 00      mov b, $8
14264  5DA5 B0            cmp a, b
14265  5DA6 FD 81         sgu ; > (unsigned)
14266  5DA8 E4            pop a
14267  5DA9             ; END RELATIONAL
14268  5DA9 FD A8         sor a, b ; ||
14269  5DAB E4            pop a
14270  5DAC C0 00 00      cmp b, 0
14271  5DAF C6 C8 5D      je _if236_exit
14272  5DB2             _if236_true:
14273  5DB2             ;; strcpy(quadname, "Unknown"); 
14274  5DB2 26 FD 75      mov b, _s175 ; "Unknown"
14275  5DB5 FD AB         swp b
14276  5DB7 D8            push b
14277  5DB8 3B B2 61      mov d, _quadname_data ; $quadname
14278  5DBB 2D            mov b, d
14279  5DBC FD AB         swp b
14280  5DBE D8            push b
14281  5DBF 07 14 04      call strcpy
14282  5DC2 51 04 00      add sp, 4
14283  5DC5 0A C8 5D      jmp _if236_exit
14284  5DC8             _if236_exit:
14285  5DC8             ;; if (x <= 4) 
14286  5DC8             _if237_cond:
14287  5DC8 FA 07 00      lea d, [bp + 7] ; $x
14288  5DCB 32            mov bl, [d]
14289  5DCC A7 00         mov bh, 0
14290  5DCE             ; START RELATIONAL
14291  5DCE D7            push a
14292  5DCF 11            mov a, b
14293  5DD0 26 04 00      mov b, $4
14294  5DD3 B0            cmp a, b
14295  5DD4 FD 75         slu ; <= (unsigned)
14296  5DD6 E4            pop a
14297  5DD7             ; END RELATIONAL
14298  5DD7 C0 00 00      cmp b, 0
14299  5DDA C6 02 5E      je _if237_else
14300  5DDD             _if237_true:
14301  5DDD             ;; strcpy(quadname, quad_name[y]); 
14302  5DDD 3B E8 61      mov d, _quad_name_data ; $quad_name
14303  5DE0 D7            push a
14304  5DE1 DA            push d
14305  5DE2 FA 06 00      lea d, [bp + 6] ; $y
14306  5DE5 32            mov bl, [d]
14307  5DE6 A7 00         mov bh, 0
14308  5DE8 E7            pop d
14309  5DE9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14310  5DED E4            pop a
14311  5DEE 2A            mov b, [d]
14312  5DEF FD AB         swp b
14313  5DF1 D8            push b
14314  5DF2 3B B2 61      mov d, _quadname_data ; $quadname
14315  5DF5 2D            mov b, d
14316  5DF6 FD AB         swp b
14317  5DF8 D8            push b
14318  5DF9 07 14 04      call strcpy
14319  5DFC 51 04 00      add sp, 4
14320  5DFF 0A 2B 5E      jmp _if237_exit
14321  5E02             _if237_else:
14322  5E02             ;; strcpy(quadname, quad_name[y + 8]); 
14323  5E02 3B E8 61      mov d, _quad_name_data ; $quad_name
14324  5E05 D7            push a
14325  5E06 DA            push d
14326  5E07 FA 06 00      lea d, [bp + 6] ; $y
14327  5E0A 32            mov bl, [d]
14328  5E0B A7 00         mov bh, 0
14329  5E0D             ; START TERMS
14330  5E0D D7            push a
14331  5E0E 11            mov a, b
14332  5E0F 26 08 00      mov b, $8
14333  5E12 56            add b, a
14334  5E13 E4            pop a
14335  5E14             ; END TERMS
14336  5E14 E7            pop d
14337  5E15 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14338  5E19 E4            pop a
14339  5E1A 2A            mov b, [d]
14340  5E1B FD AB         swp b
14341  5E1D D8            push b
14342  5E1E 3B B2 61      mov d, _quadname_data ; $quadname
14343  5E21 2D            mov b, d
14344  5E22 FD AB         swp b
14345  5E24 D8            push b
14346  5E25 07 14 04      call strcpy
14347  5E28 51 04 00      add sp, 4
14348  5E2B             _if237_exit:
14349  5E2B             ;; if (small != 1) { 
14350  5E2B             _if238_cond:
14351  5E2B FA 05 00      lea d, [bp + 5] ; $small
14352  5E2E 32            mov bl, [d]
14353  5E2F A7 00         mov bh, 0
14354  5E31             ; START RELATIONAL
14355  5E31 D7            push a
14356  5E32 11            mov a, b
14357  5E33 26 01 00      mov b, $1
14358  5E36 B0            cmp a, b
14359  5E37 FD 72         sneq ; !=
14360  5E39 E4            pop a
14361  5E3A             ; END RELATIONAL
14362  5E3A C0 00 00      cmp b, 0
14363  5E3D C6 92 5E      je _if238_exit
14364  5E40             _if238_true:
14365  5E40             ;; if (x > 4) 
14366  5E40             _if239_cond:
14367  5E40 FA 07 00      lea d, [bp + 7] ; $x
14368  5E43 32            mov bl, [d]
14369  5E44 A7 00         mov bh, 0
14370  5E46             ; START RELATIONAL
14371  5E46 D7            push a
14372  5E47 11            mov a, b
14373  5E48 26 04 00      mov b, $4
14374  5E4B B0            cmp a, b
14375  5E4C FD 81         sgu ; > (unsigned)
14376  5E4E E4            pop a
14377  5E4F             ; END RELATIONAL
14378  5E4F C0 00 00      cmp b, 0
14379  5E52 C6 6D 5E      je _if239_exit
14380  5E55             _if239_true:
14381  5E55             ;; x = x - 4; 
14382  5E55 FA 07 00      lea d, [bp + 7] ; $x
14383  5E58 DA            push d
14384  5E59 FA 07 00      lea d, [bp + 7] ; $x
14385  5E5C 32            mov bl, [d]
14386  5E5D A7 00         mov bh, 0
14387  5E5F             ; START TERMS
14388  5E5F D7            push a
14389  5E60 11            mov a, b
14390  5E61 26 04 00      mov b, $4
14391  5E64 60            sub a, b
14392  5E65 27            mov b, a
14393  5E66 E4            pop a
14394  5E67             ; END TERMS
14395  5E67 E7            pop d
14396  5E68 FD 3E         mov [d], bl
14397  5E6A 0A 6D 5E      jmp _if239_exit
14398  5E6D             _if239_exit:
14399  5E6D             ;; strcat(quadname, sect_name[x]); 
14400  5E6D 3B 52 63      mov d, st_quadrant_name_sect_name_dt ; static sect_name
14401  5E70 D7            push a
14402  5E71 DA            push d
14403  5E72 FA 07 00      lea d, [bp + 7] ; $x
14404  5E75 32            mov bl, [d]
14405  5E76 A7 00         mov bh, 0
14406  5E78 E7            pop d
14407  5E79 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14408  5E7D E4            pop a
14409  5E7E 2A            mov b, [d]
14410  5E7F FD AB         swp b
14411  5E81 D8            push b
14412  5E82 3B B2 61      mov d, _quadname_data ; $quadname
14413  5E85 2D            mov b, d
14414  5E86 FD AB         swp b
14415  5E88 D8            push b
14416  5E89 07 D5 04      call strcat
14417  5E8C 51 04 00      add sp, 4
14418  5E8F 0A 92 5E      jmp _if238_exit
14419  5E92             _if238_exit:
14420  5E92             ;; return; 
14421  5E92 F9            leave
14422  5E93 09            ret
14423  5E94             
14424  5E94             isqrt:
14425  5E94 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14426  5E97             ; $b 
14427  5E97             ; $q 
14428  5E97             ; $r 
14429  5E97             ; $t 
14430  5E97 52 08 00      sub sp, 8
14431  5E9A             ;; b = 0x4000; 
14432  5E9A FA FF FF      lea d, [bp + -1] ; $b
14433  5E9D DA            push d
14434  5E9E 26 00 40      mov b, $4000
14435  5EA1 E7            pop d
14436  5EA2 FD 43         mov [d], b
14437  5EA4             ;; q = 0; 
14438  5EA4 FA FD FF      lea d, [bp + -3] ; $q
14439  5EA7 DA            push d
14440  5EA8 26 00 00      mov b, $0
14441  5EAB E7            pop d
14442  5EAC FD 43         mov [d], b
14443  5EAE             ;; r = i; 
14444  5EAE FA FB FF      lea d, [bp + -5] ; $r
14445  5EB1 DA            push d
14446  5EB2 FA 05 00      lea d, [bp + 5] ; $i
14447  5EB5 2A            mov b, [d]
14448  5EB6 E7            pop d
14449  5EB7 FD 43         mov [d], b
14450  5EB9             ;; while (b) { 
14451  5EB9             _while240_cond:
14452  5EB9 FA FF FF      lea d, [bp + -1] ; $b
14453  5EBC 2A            mov b, [d]
14454  5EBD C0 00 00      cmp b, 0
14455  5EC0 C6 41 5F      je _while240_exit
14456  5EC3             _while240_block:
14457  5EC3             ;; t = q + b; 
14458  5EC3 FA F9 FF      lea d, [bp + -7] ; $t
14459  5EC6 DA            push d
14460  5EC7 FA FD FF      lea d, [bp + -3] ; $q
14461  5ECA 2A            mov b, [d]
14462  5ECB             ; START TERMS
14463  5ECB D7            push a
14464  5ECC 11            mov a, b
14465  5ECD FA FF FF      lea d, [bp + -1] ; $b
14466  5ED0 2A            mov b, [d]
14467  5ED1 56            add b, a
14468  5ED2 E4            pop a
14469  5ED3             ; END TERMS
14470  5ED3 E7            pop d
14471  5ED4 FD 43         mov [d], b
14472  5ED6             ;; q =q>> 1; 
14473  5ED6 FA FD FF      lea d, [bp + -3] ; $q
14474  5ED9 DA            push d
14475  5EDA FA FD FF      lea d, [bp + -3] ; $q
14476  5EDD 2A            mov b, [d]
14477  5EDE             ; START SHIFT
14478  5EDE D7            push a
14479  5EDF 11            mov a, b
14480  5EE0 26 01 00      mov b, $1
14481  5EE3 FD 39         mov c, b
14482  5EE5 A1            shr a, cl
14483  5EE6 27            mov b, a
14484  5EE7 E4            pop a
14485  5EE8             ; END SHIFT
14486  5EE8 E7            pop d
14487  5EE9 FD 43         mov [d], b
14488  5EEB             ;; if (r >= t) { 
14489  5EEB             _if241_cond:
14490  5EEB FA FB FF      lea d, [bp + -5] ; $r
14491  5EEE 2A            mov b, [d]
14492  5EEF             ; START RELATIONAL
14493  5EEF D7            push a
14494  5EF0 11            mov a, b
14495  5EF1 FA F9 FF      lea d, [bp + -7] ; $t
14496  5EF4 2A            mov b, [d]
14497  5EF5 B0            cmp a, b
14498  5EF6 FD 82         sgeu ; >= (unsigned)
14499  5EF8 E4            pop a
14500  5EF9             ; END RELATIONAL
14501  5EF9 C0 00 00      cmp b, 0
14502  5EFC C6 29 5F      je _if241_exit
14503  5EFF             _if241_true:
14504  5EFF             ;; r =r- t; 
14505  5EFF FA FB FF      lea d, [bp + -5] ; $r
14506  5F02 DA            push d
14507  5F03 FA FB FF      lea d, [bp + -5] ; $r
14508  5F06 2A            mov b, [d]
14509  5F07             ; START TERMS
14510  5F07 D7            push a
14511  5F08 11            mov a, b
14512  5F09 FA F9 FF      lea d, [bp + -7] ; $t
14513  5F0C 2A            mov b, [d]
14514  5F0D 60            sub a, b
14515  5F0E 27            mov b, a
14516  5F0F E4            pop a
14517  5F10             ; END TERMS
14518  5F10 E7            pop d
14519  5F11 FD 43         mov [d], b
14520  5F13             ;; q = q + b; 
14521  5F13 FA FD FF      lea d, [bp + -3] ; $q
14522  5F16 DA            push d
14523  5F17 FA FD FF      lea d, [bp + -3] ; $q
14524  5F1A 2A            mov b, [d]
14525  5F1B             ; START TERMS
14526  5F1B D7            push a
14527  5F1C 11            mov a, b
14528  5F1D FA FF FF      lea d, [bp + -1] ; $b
14529  5F20 2A            mov b, [d]
14530  5F21 56            add b, a
14531  5F22 E4            pop a
14532  5F23             ; END TERMS
14533  5F23 E7            pop d
14534  5F24 FD 43         mov [d], b
14535  5F26 0A 29 5F      jmp _if241_exit
14536  5F29             _if241_exit:
14537  5F29             ;; b =b>> 2; 
14538  5F29 FA FF FF      lea d, [bp + -1] ; $b
14539  5F2C DA            push d
14540  5F2D FA FF FF      lea d, [bp + -1] ; $b
14541  5F30 2A            mov b, [d]
14542  5F31             ; START SHIFT
14543  5F31 D7            push a
14544  5F32 11            mov a, b
14545  5F33 26 02 00      mov b, $2
14546  5F36 FD 39         mov c, b
14547  5F38 A1            shr a, cl
14548  5F39 27            mov b, a
14549  5F3A E4            pop a
14550  5F3B             ; END SHIFT
14551  5F3B E7            pop d
14552  5F3C FD 43         mov [d], b
14553  5F3E 0A B9 5E      jmp _while240_cond
14554  5F41             _while240_exit:
14555  5F41             ;; return q; 
14556  5F41 FA FD FF      lea d, [bp + -3] ; $q
14557  5F44 2A            mov b, [d]
14558  5F45 F9            leave
14559  5F46 09            ret
14560  5F47             
14561  5F47             square00:
14562  5F47 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14563  5F4A             ;; if (abs(t) > 181) { 
14564  5F4A             _if242_cond:
14565  5F4A FA 05 00      lea d, [bp + 5] ; $t
14566  5F4D 2A            mov b, [d]
14567  5F4E FD AB         swp b
14568  5F50 D8            push b
14569  5F51 07 7D 13      call abs
14570  5F54 51 02 00      add sp, 2
14571  5F57             ; START RELATIONAL
14572  5F57 D7            push a
14573  5F58 11            mov a, b
14574  5F59 26 B5 00      mov b, $b5
14575  5F5C B0            cmp a, b
14576  5F5D FD 7F         sgt ; >
14577  5F5F E4            pop a
14578  5F60             ; END RELATIONAL
14579  5F60 C0 00 00      cmp b, 0
14580  5F63 C6 91 5F      je _if242_else
14581  5F66             _if242_true:
14582  5F66             ;; t =t/ 10; 
14583  5F66 FA 05 00      lea d, [bp + 5] ; $t
14584  5F69 DA            push d
14585  5F6A FA 05 00      lea d, [bp + 5] ; $t
14586  5F6D 2A            mov b, [d]
14587  5F6E             ; START FACTORS
14588  5F6E D7            push a
14589  5F6F 11            mov a, b
14590  5F70 26 0A 00      mov b, $a
14591  5F73 AE            div a, b
14592  5F74 27            mov b, a
14593  5F75 E4            pop a
14594  5F76             ; END FACTORS
14595  5F76 E7            pop d
14596  5F77 FD 43         mov [d], b
14597  5F79             ;; t =t* t; 
14598  5F79 FA 05 00      lea d, [bp + 5] ; $t
14599  5F7C DA            push d
14600  5F7D FA 05 00      lea d, [bp + 5] ; $t
14601  5F80 2A            mov b, [d]
14602  5F81             ; START FACTORS
14603  5F81 D7            push a
14604  5F82 11            mov a, b
14605  5F83 FA 05 00      lea d, [bp + 5] ; $t
14606  5F86 2A            mov b, [d]
14607  5F87 AC            mul a, b ; *
14608  5F88 11            mov a, b
14609  5F89 27            mov b, a
14610  5F8A E4            pop a
14611  5F8B             ; END FACTORS
14612  5F8B E7            pop d
14613  5F8C FD 43         mov [d], b
14614  5F8E 0A B9 5F      jmp _if242_exit
14615  5F91             _if242_else:
14616  5F91             ;; t =t* t; 
14617  5F91 FA 05 00      lea d, [bp + 5] ; $t
14618  5F94 DA            push d
14619  5F95 FA 05 00      lea d, [bp + 5] ; $t
14620  5F98 2A            mov b, [d]
14621  5F99             ; START FACTORS
14622  5F99 D7            push a
14623  5F9A 11            mov a, b
14624  5F9B FA 05 00      lea d, [bp + 5] ; $t
14625  5F9E 2A            mov b, [d]
14626  5F9F AC            mul a, b ; *
14627  5FA0 11            mov a, b
14628  5FA1 27            mov b, a
14629  5FA2 E4            pop a
14630  5FA3             ; END FACTORS
14631  5FA3 E7            pop d
14632  5FA4 FD 43         mov [d], b
14633  5FA6             ;; t =t/ 100; 
14634  5FA6 FA 05 00      lea d, [bp + 5] ; $t
14635  5FA9 DA            push d
14636  5FAA FA 05 00      lea d, [bp + 5] ; $t
14637  5FAD 2A            mov b, [d]
14638  5FAE             ; START FACTORS
14639  5FAE D7            push a
14640  5FAF 11            mov a, b
14641  5FB0 26 64 00      mov b, $64
14642  5FB3 AE            div a, b
14643  5FB4 27            mov b, a
14644  5FB5 E4            pop a
14645  5FB6             ; END FACTORS
14646  5FB6 E7            pop d
14647  5FB7 FD 43         mov [d], b
14648  5FB9             _if242_exit:
14649  5FB9             ;; return t; 
14650  5FB9 FA 05 00      lea d, [bp + 5] ; $t
14651  5FBC 2A            mov b, [d]
14652  5FBD F9            leave
14653  5FBE 09            ret
14654  5FBF             
14655  5FBF             distance_to:
14656  5FBF F8 00 00      enter 0 ; (push bp; mov bp, sp)
14657  5FC2             ; $j 
14658  5FC2 52 02 00      sub sp, 2
14659  5FC5             ;; j = square00(TO_FIXED00(k->y) - ship_y); 
14660  5FC5 FA FF FF      lea d, [bp + -1] ; $j
14661  5FC8 DA            push d
14662  5FC9 FA 05 00      lea d, [bp + 5] ; $k
14663  5FCC FD 2A         mov d, [d]
14664  5FCE 58 00 00      add d, 0
14665  5FD1 32            mov bl, [d]
14666  5FD2 A7 00         mov bh, 0
14667  5FD4 FD AB         swp b
14668  5FD6 D8            push b
14669  5FD7 07 F9 1C      call TO_FIXED00
14670  5FDA 51 02 00      add sp, 2
14671  5FDD             ; START TERMS
14672  5FDD D7            push a
14673  5FDE 11            mov a, b
14674  5FDF 3B 6C 61      mov d, _ship_y ; $ship_y
14675  5FE2 2A            mov b, [d]
14676  5FE3 60            sub a, b
14677  5FE4 27            mov b, a
14678  5FE5 E4            pop a
14679  5FE6             ; END TERMS
14680  5FE6 FD AB         swp b
14681  5FE8 D8            push b
14682  5FE9 07 47 5F      call square00
14683  5FEC 51 02 00      add sp, 2
14684  5FEF E7            pop d
14685  5FF0 FD 43         mov [d], b
14686  5FF2             ;; j = j + square00(TO_FIXED00(k->x) - ship_x); 
14687  5FF2 FA FF FF      lea d, [bp + -1] ; $j
14688  5FF5 DA            push d
14689  5FF6 FA FF FF      lea d, [bp + -1] ; $j
14690  5FF9 2A            mov b, [d]
14691  5FFA             ; START TERMS
14692  5FFA D7            push a
14693  5FFB 11            mov a, b
14694  5FFC FA 05 00      lea d, [bp + 5] ; $k
14695  5FFF FD 2A         mov d, [d]
14696  6001 58 01 00      add d, 1
14697  6004 32            mov bl, [d]
14698  6005 A7 00         mov bh, 0
14699  6007 FD AB         swp b
14700  6009 D8            push b
14701  600A 07 F9 1C      call TO_FIXED00
14702  600D 51 02 00      add sp, 2
14703  6010             ; START TERMS
14704  6010 D7            push a
14705  6011 11            mov a, b
14706  6012 3B 6E 61      mov d, _ship_x ; $ship_x
14707  6015 2A            mov b, [d]
14708  6016 60            sub a, b
14709  6017 27            mov b, a
14710  6018 E4            pop a
14711  6019             ; END TERMS
14712  6019 FD AB         swp b
14713  601B D8            push b
14714  601C 07 47 5F      call square00
14715  601F 51 02 00      add sp, 2
14716  6022 56            add b, a
14717  6023 E4            pop a
14718  6024             ; END TERMS
14719  6024 E7            pop d
14720  6025 FD 43         mov [d], b
14721  6027             ;; j = isqrt(j); 
14722  6027 FA FF FF      lea d, [bp + -1] ; $j
14723  602A DA            push d
14724  602B FA FF FF      lea d, [bp + -1] ; $j
14725  602E 2A            mov b, [d]
14726  602F FD AB         swp b
14727  6031 D8            push b
14728  6032 07 94 5E      call isqrt
14729  6035 51 02 00      add sp, 2
14730  6038 E7            pop d
14731  6039 FD 43         mov [d], b
14732  603B             ;; j =j* 10; 
14733  603B FA FF FF      lea d, [bp + -1] ; $j
14734  603E DA            push d
14735  603F FA FF FF      lea d, [bp + -1] ; $j
14736  6042 2A            mov b, [d]
14737  6043             ; START FACTORS
14738  6043 D7            push a
14739  6044 11            mov a, b
14740  6045 26 0A 00      mov b, $a
14741  6048 AC            mul a, b ; *
14742  6049 11            mov a, b
14743  604A 27            mov b, a
14744  604B E4            pop a
14745  604C             ; END FACTORS
14746  604C E7            pop d
14747  604D FD 43         mov [d], b
14748  604F             ;; return j; 
14749  604F FA FF FF      lea d, [bp + -1] ; $j
14750  6052 2A            mov b, [d]
14751  6053 F9            leave
14752  6054 09            ret
14753  6055             
14754  6055             cint100:
14755  6055 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14756  6058             ;; return (d + 50) / 100; 
14757  6058 FA 05 00      lea d, [bp + 5] ; $d
14758  605B 2A            mov b, [d]
14759  605C             ; START TERMS
14760  605C D7            push a
14761  605D 11            mov a, b
14762  605E 26 32 00      mov b, $32
14763  6061 56            add b, a
14764  6062 E4            pop a
14765  6063             ; END TERMS
14766  6063             ; START FACTORS
14767  6063 D7            push a
14768  6064 11            mov a, b
14769  6065 26 64 00      mov b, $64
14770  6068 AE            div a, b
14771  6069 27            mov b, a
14772  606A E4            pop a
14773  606B             ; END FACTORS
14774  606B F9            leave
14775  606C 09            ret
14776  606D             
14777  606D             showfile:
14778  606D F8 00 00      enter 0 ; (push bp; mov bp, sp)
14779  6070 F9            leave
14780  6071 09            ret
14781  6072             ; --- END TEXT BLOCK
14782  6072             
14783  6072             ; --- BEGIN DATA BLOCK
14784  6072 00          _starbases: .fill 1, 0
14785  6073 00          _base_y: .fill 1, 0
14786  6074 00          _base_x: .fill 1, 0
14787  6075 00          _starbases_left: .fill 1, 0
14788  6076             _c_data: 
14789  6076 00          .db 
14790  6077 00 00 00 FF .db $0,$0,$0,$ffff,$ffff,$ffff,$0,$1,$1,$1,$0,$1,$1,$1,$0,$ffff,$ffff,$ffff,$0,$1,$1,
14790  607B FF FF 00 01 
14790  607F 01 01 00 01 
14790  6083 01 01 00 FF 
14790  6087 FF FF 00 01 
14790  608B 01 
14791  608C 00 00 00 00 .fill 9, 0
14791  6090 00 00 00 00 
14791  6094 00 
14792  6095 00          _docked: .fill 1, 0
14793  6096 00 00       _energy: .fill 2, 0
14794  6098 B8 0B       _energy0: .dw 3000
14795  609A 00 00 00 00 _map_data: .fill 162, 0
14795  609E 00 00 00 00 
14795  60A2 00 00 00 00 
14795  60A6 00 00 00 00 
14795  60AA 00 00 00 00 
14795  60AE 00 00 00 00 
14795  60B2 00 00 00 00 
14795  60B6 00 00 00 00 
14795  60BA 00 00 00 00 
14795  60BE 00 00 00 00 
14795  60C2 00 00 00 00 
14795  60C6 00 00 00 00 
14795  60CA 00 00 00 00 
14795  60CE 00 00 00 00 
14795  60D2 00 00 00 00 
14795  60D6 00 00 00 00 
14795  60DA 00 00 00 00 
14795  60DE 00 00 00 00 
14795  60E2 00 00 00 00 
14795  60E6 00 00 00 00 
14795  60EA 00 00 00 00 
14795  60EE 00 00 00 00 
14795  60F2 00 00 00 00 
14795  60F6 00 00 00 00 
14795  60FA 00 00 00 00 
14795  60FE 00 00 00 00 
14795  6102 00 00 00 00 
14795  6106 00 00 00 00 
14795  610A 00 00 00 00 
14795  610E 00 00 00 00 
14795  6112 00 00 00 00 
14795  6116 00 00 00 00 
14795  611A 00 00 00 00 
14795  611E 00 00 00 00 
14795  6122 00 00 00 00 
14795  6126 00 00 00 00 
14795  612A 00 00 00 00 
14795  612E 00 00 00 00 
14795  6132 00 00 00 00 
14795  6136 00 00 00 00 
14795  613A 00 00 
14796  613C 00 00 00 00 _kdata_data: .fill 12, 0
14796  6140 00 00 00 00 
14796  6144 00 00 00 00 
14797  6148 00          _klingons: .fill 1, 0
14798  6149 00          _total_klingons: .fill 1, 0
14799  614A 00          _klingons_left: .fill 1, 0
14800  614B 00          _torps: .fill 1, 0
14801  614C 0A          _torps0: .db 10
14802  614D 00 00       _quad_y: .fill 2, 0
14803  614F 00 00       _quad_x: .fill 2, 0
14804  6151 00 00       _shield: .fill 2, 0
14805  6153 00          _stars: .fill 1, 0
14806  6154 00 00       _time_start: .fill 2, 0
14807  6156 00 00       _time_up: .fill 2, 0
14808  6158 00 00 00 00 _damage_data: .fill 18, 0
14808  615C 00 00 00 00 
14808  6160 00 00 00 00 
14808  6164 00 00 00 00 
14808  6168 00 00 
14809  616A 00 00       _d4: .fill 2, 0
14810  616C 00 00       _ship_y: .fill 2, 0
14811  616E 00 00       _ship_x: .fill 2, 0
14812  6170 00 00       _stardate: .fill 2, 0
14813  6172 00 00 00 00 _quad_data: .fill 64, 0
14813  6176 00 00 00 00 
14813  617A 00 00 00 00 
14813  617E 00 00 00 00 
14813  6182 00 00 00 00 
14813  6186 00 00 00 00 
14813  618A 00 00 00 00 
14813  618E 00 00 00 00 
14813  6192 00 00 00 00 
14813  6196 00 00 00 00 
14813  619A 00 00 00 00 
14813  619E 00 00 00 00 
14813  61A2 00 00 00 00 
14813  61A6 00 00 00 00 
14813  61AA 00 00 00 00 
14813  61AE 00 00 00 00 
14814  61B2 00 00 00 00 _quadname_data: .fill 12, 0
14814  61B6 00 00 00 00 
14814  61BA 00 00 00 00 
14815  61BE 72 65 70 6F _inc_1_data: .db "reports:\n  Incorrect course data, sir!\n", 0
14815  61C2 72 74 73 3A 
14815  61C6 0A 20 20 49 
14815  61CA 6E 63 6F 72 
14815  61CE 72 65 63 74 
14815  61D2 20 63 6F 75 
14815  61D6 72 73 65 20 
14815  61DA 64 61 74 61 
14815  61DE 2C 20 73 69 
14815  61E2 72 21 0A 00 
14816  61E6 BE 61       _inc_1: .dw _inc_1_data
14817  61E8             _quad_name_data: 
14818  61E8 62 63 63 63 .dw _s0, _s1, _s2, _s3, _s4, _s5, _s6, _s7, _s8, _s9, _s10, _s11, _s12, _s13, _s14, _s15, _s16, 
14818  61EC 6B 63 71 63 
14818  61F0 79 63 7E 63 
14818  61F4 86 63 8D 63 
14818  61F8 99 63 A0 63 
14818  61FC A7 63 AD 63 
14818  6200 B5 63 C0 63 
14818  6204 CA 63 D2 63 
14818  6208 DB 63 
14819  620A 00 00 00 00 .fill 34, 0
14819  620E 00 00 00 00 
14819  6212 00 00 00 00 
14819  6216 00 00 00 00 
14819  621A 00 00 00 00 
14819  621E 00 00 00 00 
14819  6222 00 00 00 00 
14819  6226 00 00 00 00 
14819  622A 00 00 
14820  622C             _device_name_data: 
14821  622C 62 63 E1 63 .dw _s0, _s17, _s18, _s19, _s20, _s21, _s22, _s23, _s24, 
14821  6230 EE 63 02 64 
14821  6234 15 64 24 64 
14821  6238 31 64 40 64 
14821  623C 4F 64 
14822  623E 00 00 00 00 .fill 18, 0
14822  6242 00 00 00 00 
14822  6246 00 00 00 00 
14822  624A 00 00 00 00 
14822  624E 00 00 
14823  6250 44 61 6D 61 _dcr_1_data: .db "Damage Control report:", 0
14823  6254 67 65 20 43 
14823  6258 6F 6E 74 72 
14823  625C 6F 6C 20 72 
14823  6260 65 70 6F 72 
14823  6264 74 3A 00 
14824  6267 50 62       _dcr_1: .dw _dcr_1_data
14825  6269             _plural_2_data: 
14826  6269 00 00       .db $0,$0,
14827  626B             _plural_data: 
14828  626B 69 73 00    .db $69,$73,$0,
14829  626E 00          .fill 1, 0
14830  626F             _warpmax_data: 
14831  626F 08          .db $8,
14832  6270 00 00 00    .fill 3, 0
14833  6273 2D 2D 2D 2D _srs_1_data: .db "------------------------", 0
14833  6277 2D 2D 2D 2D 
14833  627B 2D 2D 2D 2D 
14833  627F 2D 2D 2D 2D 
14833  6283 2D 2D 2D 2D 
14833  6287 2D 2D 2D 2D 
14833  628B 00 
14834  628C 73 62       _srs_1: .dw _srs_1_data
14835  628E             _tilestr_data: 
14836  628E 60 64 64 64 .dw _s25, _s26, _s27, _s28, _s29, 
14836  6292 68 64 6C 64 
14836  6296 70 64 
14837  6298 00 00 00 00 .fill 10, 0
14837  629C 00 00 00 00 
14837  62A0 00 00 
14838  62A2 2D 2D 2D 2D _lrs_1_data: .db "-------------------\n", 0
14838  62A6 2D 2D 2D 2D 
14838  62AA 2D 2D 2D 2D 
14838  62AE 2D 2D 2D 2D 
14838  62B2 2D 2D 2D 0A 
14838  62B6 00 
14839  62B7 A2 62       _lrs_1: .dw _lrs_1_data
14840  62B9 20 20 20 2D _gr_1_data: .db "   ----- ----- ----- ----- ----- ----- ----- -----\n", 0
14840  62BD 2D 2D 2D 2D 
14840  62C1 20 2D 2D 2D 
14840  62C5 2D 2D 20 2D 
14840  62C9 2D 2D 2D 2D 
14840  62CD 20 2D 2D 2D 
14840  62D1 2D 2D 20 2D 
14840  62D5 2D 2D 2D 2D 
14840  62D9 20 2D 2D 2D 
14840  62DD 2D 2D 20 2D 
14840  62E1 2D 2D 2D 2D 
14840  62E5 20 2D 2D 2D 
14840  62E9 2D 2D 0A 00 
14841  62ED B9 62       _gr_1: .dw _gr_1_data
14842  62EF 73 00       _str_s_data: .db "s", 0
14843  62F1 EF 62       _str_s: .dw _str_s_data
14844  62F3 20 20 2D 2D _gm_1_data: .db "  ----- ----- ----- ----- ----- ----- ----- -----\n", 0
14844  62F7 2D 2D 2D 20 
14844  62FB 2D 2D 2D 2D 
14844  62FF 2D 20 2D 2D 
14844  6303 2D 2D 2D 20 
14844  6307 2D 2D 2D 2D 
14844  630B 2D 20 2D 2D 
14844  630F 2D 2D 2D 20 
14844  6313 2D 2D 2D 2D 
14844  6317 2D 20 2D 2D 
14844  631B 2D 2D 2D 20 
14844  631F 2D 2D 2D 2D 
14844  6323 2D 0A 00 
14845  6326 F3 62       _gm_1: .dw _gm_1_data
14846  6328 20 20 44 49 _dist_1_data: .db "  DISTANCE = \n\n", 0
14846  632C 53 54 41 4E 
14846  6330 43 45 20 3D 
14846  6334 20 0A 0A 00 
14847  6338 28 63       _dist_1: .dw _dist_1_data
14848  633A 00 00 00 00 st_print100_buf_dt: .fill 16, 0
14848  633E 00 00 00 00 
14848  6342 00 00 00 00 
14848  6346 00 00 00 00 
14849  634A 47 52 45 45 _sC_data: .db "GREEN", 0
14849  634E 4E 00 
14850  6350 4A 63       _sC: .dw _sC_data
14851  6352             st_quadrant_name_sect_name_dt: 
out/startrek.asm line 14852: Unknown token: (.)
out/startrek.asm line 14852: Unknown token.    
out/startrek.asm line 14852: Label not found: (fill10)
out/startrek.asm line 14852: Unknown token: (.)
out/startrek.asm line 14852: Unknown token.    
out/startrek.asm line 14852: Label not found: (fill10)
14852  6352 62 63 ED 75 .dw _s0, _s171, _s172, _s173, _s174, .fill 10, 0
14852  6356 F0 75 F4 75 
14852  635A F9 75 00 00 
14852  635E 00 00 
out/startrek.asm line 14853: Label not found: (st_sect_name_sect_name_dt)
out/startrek.asm line 14853: Label not found: (st_sect_name_sect_name_dt)
14853  6360 00 00       st_quadrant_name: .dw st_sect_name_sect_name_dt
14854  6362 00          _s0: .db "", 0
14855  6363 41 6E 74 61 _s1: .db "Antares", 0
14855  6367 72 65 73 00 
14856  636B 52 69 67 65 _s2: .db "Rigel", 0
14856  636F 6C 00 
14857  6371 50 72 6F 63 _s3: .db "Procyon", 0
14857  6375 79 6F 6E 00 
14858  6379 56 65 67 61 _s4: .db "Vega", 0
14858  637D 00 
14859  637E 43 61 6E 6F _s5: .db "Canopus", 0
14859  6382 70 75 73 00 
14860  6386 41 6C 74 61 _s6: .db "Altair", 0
14860  638A 69 72 00 
14861  638D 53 61 67 69 _s7: .db "Sagittarius", 0
14861  6391 74 74 61 72 
14861  6395 69 75 73 00 
14862  6399 50 6F 6C 6C _s8: .db "Pollux", 0
14862  639D 75 78 00 
14863  63A0 53 69 72 69 _s9: .db "Sirius", 0
14863  63A4 75 73 00 
14864  63A7 44 65 6E 65 _s10: .db "Deneb", 0
14864  63AB 62 00 
14865  63AD 43 61 70 65 _s11: .db "Capella", 0
14865  63B1 6C 6C 61 00 
14866  63B5 42 65 74 65 _s12: .db "Betelgeuse", 0
14866  63B9 6C 67 65 75 
14866  63BD 73 65 00 
14867  63C0 41 6C 64 65 _s13: .db "Aldebaran", 0
14867  63C4 62 61 72 61 
14867  63C8 6E 00 
14868  63CA 52 65 67 75 _s14: .db "Regulus", 0
14868  63CE 6C 75 73 00 
14869  63D2 41 72 63 74 _s15: .db "Arcturus", 0
14869  63D6 75 72 75 73 
14869  63DA 00 
14870  63DB 53 70 69 63 _s16: .db "Spica", 0
14870  63DF 61 00 
14871  63E1 57 61 72 70 _s17: .db "Warp engines", 0
14871  63E5 20 65 6E 67 
14871  63E9 69 6E 65 73 
14871  63ED 00 
14872  63EE 53 68 6F 72 _s18: .db "Short range sensors", 0
14872  63F2 74 20 72 61 
14872  63F6 6E 67 65 20 
14872  63FA 73 65 6E 73 
14872  63FE 6F 72 73 00 
14873  6402 4C 6F 6E 67 _s19: .db "Long range sensors", 0
14873  6406 20 72 61 6E 
14873  640A 67 65 20 73 
14873  640E 65 6E 73 6F 
14873  6412 72 73 00 
14874  6415 50 68 61 73 _s20: .db "Phaser control", 0
14874  6419 65 72 20 63 
14874  641D 6F 6E 74 72 
14874  6421 6F 6C 00 
14875  6424 50 68 6F 74 _s21: .db "Photon tubes", 0
14875  6428 6F 6E 20 74 
14875  642C 75 62 65 73 
14875  6430 00 
14876  6431 44 61 6D 61 _s22: .db "Damage control", 0
14876  6435 67 65 20 63 
14876  6439 6F 6E 74 72 
14876  643D 6F 6C 00 
14877  6440 53 68 69 65 _s23: .db "Shield control", 0
14877  6444 6C 64 20 63 
14877  6448 6F 6E 74 72 
14877  644C 6F 6C 00 
14878  644F 4C 69 62 72 _s24: .db "Library computer", 0
14878  6453 61 72 79 20 
14878  6457 63 6F 6D 70 
14878  645B 75 74 65 72 
14878  645F 00 
14879  6460 20 20 20 00 _s25: .db "   ", 0
14880  6464 20 2A 20 00 _s26: .db " * ", 0
14881  6468 3E 21 3C 00 _s27: .db ">!<", 0
14882  646C 2B 4B 2B 00 _s28: .db "+K+", 0
14883  6470 3C 2A 3E 00 _s29: .db "<*>", 0
14884  6474 55 6E 65 78 _s30: .db "Unexpected format in printf.", 0
14884  6478 70 65 63 74 
14884  647C 65 64 20 66 
14884  6480 6F 72 6D 61 
14884  6484 74 20 69 6E 
14884  6488 20 70 72 69 
14884  648C 6E 74 66 2E 
14884  6490 00 
14885  6491 45 72 72 6F _s31: .db "Error: Unknown argument type.\n", 0
14885  6495 72 3A 20 55 
14885  6499 6E 6B 6E 6F 
14885  649D 77 6E 20 61 
14885  64A1 72 67 75 6D 
14885  64A5 65 6E 74 20 
14885  64A9 74 79 70 65 
14885  64AD 2E 0A 00 
14886  64B0 1B 5B 32 4A _s32: .db "\033[2J\033[H", 0
14886  64B4 1B 5B 48 00 
14887  64B8 61 72 65 00 _s33: .db "are", 0
14888  64BC 69 73 00    _s34: .db "is", 0
14889  64BF 25 73 20 25 _s35: .db "%s %s inoperable.\n", 0
14889  64C3 73 20 69 6E 
14889  64C7 6F 70 65 72 
14889  64CB 61 62 6C 65 
14889  64CF 2E 0A 00 
14890  64D2 73 74 61 72 _s36: .db "startrek.intro", 0
14890  64D6 74 72 65 6B 
14890  64DA 2E 69 6E 74 
14890  64DE 72 6F 00 
14891  64E1 73 74 61 72 _s37: .db "startrek.doc", 0
14891  64E5 74 72 65 6B 
14891  64E9 2E 64 6F 63 
14891  64ED 00 
14892  64EE 73 74 61 72 _s38: .db "startrek.logo", 0
14892  64F2 74 72 65 6B 
14892  64F6 2E 6C 6F 67 
14892  64FA 6F 00 
14893  64FC 73 74 61 72 _s39: .db "startrek.fatal", 0
14893  6500 74 72 65 6B 
14893  6504 2E 66 61 74 
14893  6508 61 6C 00 
14894  650B 43 6F 6D 6D _s40: .db "Command? ", 0
14894  650F 61 6E 64 3F 
14894  6513 20 00 
14895  6515 6E 61 76 00 _s41: .db "nav", 0
14896  6519 73 72 73 00 _s42: .db "srs", 0
14897  651D 6C 72 73 00 _s43: .db "lrs", 0
14898  6521 70 68 61 00 _s44: .db "pha", 0
14899  6525 74 6F 72 00 _s45: .db "tor", 0
14900  6529 73 68 69 00 _s46: .db "shi", 0
14901  652D 64 61 6D 00 _s47: .db "dam", 0
14902  6531 63 6F 6D 00 _s48: .db "com", 0
14903  6535 78 78 78 00 _s49: .db "xxx", 0
14904  6539 45 6E 74 65 _s50: .db "Enter one of the following:\n", 0
14904  653D 72 20 6F 6E 
14904  6541 65 20 6F 66 
14904  6545 20 74 68 65 
14904  6549 20 66 6F 6C 
14904  654D 6C 6F 77 69 
14904  6551 6E 67 3A 0A 
14904  6555 00 
14905  6556 20 20 6E 61 _s51: .db "  nav - To Set Course", 0
14905  655A 76 20 2D 20 
14905  655E 54 6F 20 53 
14905  6562 65 74 20 43 
14905  6566 6F 75 72 73 
14905  656A 65 00 
14906  656C 20 20 73 72 _s52: .db "  srs - Short Range Sensors", 0
14906  6570 73 20 2D 20 
14906  6574 53 68 6F 72 
14906  6578 74 20 52 61 
14906  657C 6E 67 65 20 
14906  6580 53 65 6E 73 
14906  6584 6F 72 73 00 
14907  6588 20 20 6C 72 _s53: .db "  lrs - Long Range Sensors", 0
14907  658C 73 20 2D 20 
14907  6590 4C 6F 6E 67 
14907  6594 20 52 61 6E 
14907  6598 67 65 20 53 
14907  659C 65 6E 73 6F 
14907  65A0 72 73 00 
14908  65A3 20 20 70 68 _s54: .db "  pha - Phasers", 0
14908  65A7 61 20 2D 20 
14908  65AB 50 68 61 73 
14908  65AF 65 72 73 00 
14909  65B3 20 20 74 6F _s55: .db "  tor - Photon Torpedoes", 0
14909  65B7 72 20 2D 20 
14909  65BB 50 68 6F 74 
14909  65BF 6F 6E 20 54 
14909  65C3 6F 72 70 65 
14909  65C7 64 6F 65 73 
14909  65CB 00 
14910  65CC 20 20 73 68 _s56: .db "  shi - Shield Control", 0
14910  65D0 69 20 2D 20 
14910  65D4 53 68 69 65 
14910  65D8 6C 64 20 43 
14910  65DC 6F 6E 74 72 
14910  65E0 6F 6C 00 
14911  65E3 20 20 64 61 _s57: .db "  dam - Damage Control", 0
14911  65E7 6D 20 2D 20 
14911  65EB 44 61 6D 61 
14911  65EF 67 65 20 43 
14911  65F3 6F 6E 74 72 
14911  65F7 6F 6C 00 
14912  65FA 20 20 63 6F _s58: .db "  com - Library Computer", 0
14912  65FE 6D 20 2D 20 
14912  6602 4C 69 62 72 
14912  6606 61 72 79 20 
14912  660A 43 6F 6D 70 
14912  660E 75 74 65 72 
14912  6612 00 
14913  6613 20 20 78 78 _s59: .db "  xxx - Resign Command\n", 0
14913  6617 78 20 2D 20 
14913  661B 52 65 73 69 
14913  661F 67 6E 20 43 
14913  6623 6F 6D 6D 61 
14913  6627 6E 64 0A 00 
14914  662B 73 00       _s60: .db "s", 0
14915  662D 59 6F 75 72 _s61: .db "Your orders are as follows:\nDestroy the %d Klingon warships which have", 0
14915  6631 20 6F 72 64 
14915  6635 65 72 73 20 
14915  6639 61 72 65 20 
14915  663D 61 73 20 66 
14915  6641 6F 6C 6C 6F 
14915  6645 77 73 3A 0A 
14915  6649 44 65 73 74 
14915  664D 72 6F 79 20 
14915  6651 74 68 65 20 
14915  6655 25 64 20 4B 
14915  6659 6C 69 6E 67 
14915  665D 6F 6E 20 77 
14915  6661 61 72 73 68 
14915  6665 69 70 73 20 
14915  6669 77 68 69 63 
14915  666D 68 20 68 61 
14915  6671 76 65 00 
14916  6674 69 6E 76 61 _s62: .db "invaded\n the galaxy before they can attack Federation Headquarters\n", 0
14916  6678 64 65 64 0A 
14916  667C 20 74 68 65 
14916  6680 20 67 61 6C 
14916  6684 61 78 79 20 
14916  6688 62 65 66 6F 
14916  668C 72 65 20 74 
14916  6690 68 65 79 20 
14916  6694 63 61 6E 20 
14916  6698 61 74 74 61 
14916  669C 63 6B 20 46 
14916  66A0 65 64 65 72 
14916  66A4 61 74 69 6F 
14916  66A8 6E 20 48 65 
14916  66AC 61 64 71 75 
14916  66B0 61 72 74 65 
14916  66B4 72 73 0A 00 
14917  66B8 20 6F 6E 20 _s63: .db " on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy", 0
14917  66BC 73 74 61 72 
14917  66C0 64 61 74 65 
14917  66C4 20 25 75 2E 
14917  66C8 20 54 68 69 
14917  66CC 73 20 67 69 
14917  66D0 76 65 73 20 
14917  66D4 79 6F 75 20 
14917  66D8 25 64 20 64 
14917  66DC 61 79 73 2E 
14917  66E0 20 54 68 65 
14917  66E4 72 65 20 25 
14917  66E8 73 0A 20 25 
14917  66EC 64 20 73 74 
14917  66F0 61 72 62 61 
14917  66F4 73 65 25 73 
14917  66F8 20 69 6E 20 
14917  66FC 74 68 65 20 
14917  6700 67 61 6C 61 
14917  6704 78 79 00 
14918  6707 20 66 6F 72 _s64: .db " for resupplying your ship.\n\n Hit any key to accept command. ", 0
14918  670B 20 72 65 73 
14918  670F 75 70 70 6C 
14918  6713 79 69 6E 67 
14918  6717 20 79 6F 75 
14918  671B 72 20 73 68 
14918  671F 69 70 2E 0A 
14918  6723 0A 20 48 69 
14918  6727 74 20 61 6E 
14918  672B 79 20 6B 65 
14918  672F 79 20 74 6F 
14918  6733 20 61 63 63 
14918  6737 65 70 74 20 
14918  673B 63 6F 6D 6D 
14918  673F 61 6E 64 2E 
14918  6743 20 00 
14919  6745 4E 6F 77 20 _s65: .db "Now entering %s quadrant...\n\n", 0
14919  6749 65 6E 74 65 
14919  674D 72 69 6E 67 
14919  6751 20 25 73 20 
14919  6755 71 75 61 64 
14919  6759 72 61 6E 74 
14919  675D 2E 2E 2E 0A 
14919  6761 0A 00 
14920  6763 0A 59 6F 75 _s66: .db "\nYour mission begins with your starship located", 0
14920  6767 72 20 6D 69 
14920  676B 73 73 69 6F 
14920  676F 6E 20 62 65 
14920  6773 67 69 6E 73 
14920  6777 20 77 69 74 
14920  677B 68 20 79 6F 
14920  677F 75 72 20 73 
14920  6783 74 61 72 73 
14920  6787 68 69 70 20 
14920  678B 6C 6F 63 61 
14920  678F 74 65 64 00 
14921  6793 69 6E 20 74 _s67: .db "in the galactic quadrant %s.\n\n", 0
14921  6797 68 65 20 67 
14921  679B 61 6C 61 63 
14921  679F 74 69 63 20 
14921  67A3 71 75 61 64 
14921  67A7 72 61 6E 74 
14921  67AB 20 25 73 2E 
14921  67AF 0A 0A 00 
14922  67B2 43 6F 6D 62 _s68: .db "Combat Area  Condition Red\n", 0
14922  67B6 61 74 20 41 
14922  67BA 72 65 61 20 
14922  67BE 20 43 6F 6E 
14922  67C2 64 69 74 69 
14922  67C6 6F 6E 20 52 
14922  67CA 65 64 0A 00 
14923  67CE 53 68 69 65 _s69: .db "Shields Dangerously Low\n", 0
14923  67D2 6C 64 73 20 
14923  67D6 44 61 6E 67 
14923  67DA 65 72 6F 75 
14923  67DE 73 6C 79 20 
14923  67E2 4C 6F 77 0A 
14923  67E6 00 
14924  67E7 43 6F 75 72 _s70: .db "Course (0-9): ", 0
14924  67EB 73 65 20 28 
14924  67EF 30 2D 39 29 
14924  67F3 3A 20 00 
14925  67F6 4C 74 2E 20 _s71: .db "Lt. Sulu%s", 0
14925  67FA 53 75 6C 75 
14925  67FE 25 73 00 
14926  6801 30 2E 32 00 _s72: .db "0.2", 0
14927  6805 57 61 72 70 _s73: .db "Warp Factor (0-%s): ", 0
14927  6809 20 46 61 63 
14927  680D 74 6F 72 20 
14927  6811 28 30 2D 25 
14927  6815 73 29 3A 20 
14927  6819 00 
14928  681A 57 61 72 70 _s74: .db "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n", 0
14928  681E 20 45 6E 67 
14928  6822 69 6E 65 73 
14928  6826 20 61 72 65 
14928  682A 20 64 61 6D 
14928  682E 61 67 65 64 
14928  6832 2E 20 4D 61 
14928  6836 78 69 6D 75 
14928  683A 6D 20 73 70 
14928  683E 65 65 64 20 
14928  6842 3D 20 57 61 
14928  6846 72 70 20 30 
14928  684A 2E 32 2E 0A 
14928  684E 0A 00 
14929  6850 43 68 69 65 _s75: .db "Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n", 0
14929  6854 66 20 45 6E 
14929  6858 67 69 6E 65 
14929  685C 65 72 20 53 
14929  6860 63 6F 74 74 
14929  6864 20 72 65 70 
14929  6868 6F 72 74 73 
14929  686C 3A 0A 20 20 
14929  6870 54 68 65 20 
14929  6874 65 6E 67 69 
14929  6878 6E 65 73 20 
14929  687C 77 6F 6E 74 
14929  6880 20 74 61 6B 
14929  6884 65 20 77 61 
14929  6888 72 70 20 25 
14929  688C 73 21 0A 0A 
14929  6890 00 
14930  6891 45 6E 67 69 _s76: .db "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", 0
14930  6895 6E 65 65 72 
14930  6899 69 6E 67 20 
14930  689D 72 65 70 6F 
14930  68A1 72 74 73 3A 
14930  68A5 0A 20 20 49 
14930  68A9 6E 73 75 66 
14930  68AD 66 69 63 69 
14930  68B1 65 6E 74 20 
14930  68B5 65 6E 65 72 
14930  68B9 67 79 20 61 
14930  68BD 76 61 69 6C 
14930  68C1 61 62 6C 65 
14930  68C5 20 66 6F 72 
14930  68C9 20 6D 61 6E 
14930  68CD 65 75 76 65 
14930  68D1 72 69 6E 67 
14930  68D5 20 61 74 20 
14930  68D9 77 61 72 70 
14930  68DD 20 25 73 21 
14930  68E1 0A 0A 00 
14931  68E4 44 65 66 6C _s77: .db "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", 0
14931  68E8 65 63 74 6F 
14931  68EC 72 20 43 6F 
14931  68F0 6E 74 72 6F 
14931  68F4 6C 20 52 6F 
14931  68F8 6F 6D 20 61 
14931  68FC 63 6B 6E 6F 
14931  6900 77 6C 65 64 
14931  6904 67 65 73 3A 
14931  6908 0A 20 20 25 
14931  690C 64 20 75 6E 
14931  6910 69 74 73 20 
14931  6914 6F 66 20 65 
14931  6918 6E 65 72 67 
14931  691C 79 20 70 72 
14931  6920 65 73 65 6E 
14931  6924 74 6C 79 20 
14931  6928 64 65 70 6C 
14931  692C 6F 79 65 64 
14931  6930 20 74 6F 20 
14931  6934 73 68 69 65 
14931  6938 6C 64 73 2E 
14931  693C 0A 00 
out/startrek.asm line 14932: Maximum number of args exceeded. ("LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n",0)
14932  693E 00          _s78: .db "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", 0
14933  693F 57 61 72 70 _s79: .db "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", 0
14933  6943 20 45 6E 67 
14933  6947 69 6E 65 73 
14933  694B 20 73 68 75 
14933  694F 74 20 64 6F 
14933  6953 77 6E 20 61 
14933  6957 74 20 73 65 
14933  695B 63 74 6F 72 
14933  695F 20 25 64 2C 
14933  6963 20 25 64 20 
14933  6967 64 75 65 20 
14933  696B 74 6F 20 62 
14933  696F 61 64 20 6E 
14933  6973 61 76 69 67 
14933  6977 61 74 69 6F 
14933  697B 6E 2E 0A 0A 
14933  697F 00 
14934  6980 53 68 69 65 _s80: .db "Shield Control supplies energy to complete maneuver.\n", 0
14934  6984 6C 64 20 43 
14934  6988 6F 6E 74 72 
14934  698C 6F 6C 20 73 
14934  6990 75 70 70 6C 
14934  6994 69 65 73 20 
14934  6998 65 6E 65 72 
14934  699C 67 79 20 74 
14934  69A0 6F 20 63 6F 
14934  69A4 6D 70 6C 65 
14934  69A8 74 65 20 6D 
14934  69AC 61 6E 65 75 
14934  69B0 76 65 72 2E 
14934  69B4 0A 00 
14935  69B6 59 45 4C 4C _s81: .db "YELLOW", 0
14935  69BA 4F 57 00 
14936  69BD 2A 52 45 44 _s82: .db "*RED*", 0
14936  69C1 2A 00 
14937  69C3 44 4F 43 4B _s83: .db "DOCKED", 0
14937  69C7 45 44 00 
14938  69CA 53 68 69 65 _s84: .db "Shields dropped for docking purposes.", 0
14938  69CE 6C 64 73 20 
14938  69D2 64 72 6F 70 
14938  69D6 70 65 64 20 
14938  69DA 66 6F 72 20 
14938  69DE 64 6F 63 6B 
14938  69E2 69 6E 67 20 
14938  69E6 70 75 72 70 
14938  69EA 6F 73 65 73 
14938  69EE 2E 00 
14939  69F0 0A 2A 2A 2A _s85: .db "\n*** Short Range Sensors are out ***", 0
14939  69F4 20 53 68 6F 
14939  69F8 72 74 20 52 
14939  69FC 61 6E 67 65 
14939  6A00 20 53 65 6E 
14939  6A04 73 6F 72 73 
14939  6A08 20 61 72 65 
14939  6A0C 20 6F 75 74 
14939  6A10 20 2A 2A 2A 
14939  6A14 00 
14940  6A15 20 20 20 20 _s86: .db "    Stardate            %d\n", 0
14940  6A19 53 74 61 72 
14940  6A1D 64 61 74 65 
14940  6A21 20 20 20 20 
14940  6A25 20 20 20 20 
14940  6A29 20 20 20 20 
14940  6A2D 25 64 0A 00 
14941  6A31 20 20 20 20 _s87: .db "    Condition           %s\n", 0
14941  6A35 43 6F 6E 64 
14941  6A39 69 74 69 6F 
14941  6A3D 6E 20 20 20 
14941  6A41 20 20 20 20 
14941  6A45 20 20 20 20 
14941  6A49 25 73 0A 00 
14942  6A4D 20 20 20 20 _s88: .db "    Quadrant            %d, %d\n", 0
14942  6A51 51 75 61 64 
14942  6A55 72 61 6E 74 
14942  6A59 20 20 20 20 
14942  6A5D 20 20 20 20 
14942  6A61 20 20 20 20 
14942  6A65 25 64 2C 20 
14942  6A69 25 64 0A 00 
14943  6A6D 20 20 20 20 _s89: .db "    Sector              %d, %d\n", 0
14943  6A71 53 65 63 74 
14943  6A75 6F 72 20 20 
14943  6A79 20 20 20 20 
14943  6A7D 20 20 20 20 
14943  6A81 20 20 20 20 
14943  6A85 25 64 2C 20 
14943  6A89 25 64 0A 00 
14944  6A8D 20 20 20 20 _s90: .db "    Photon Torpedoes    %d\n", 0
14944  6A91 50 68 6F 74 
14944  6A95 6F 6E 20 54 
14944  6A99 6F 72 70 65 
14944  6A9D 64 6F 65 73 
14944  6AA1 20 20 20 20 
14944  6AA5 25 64 0A 00 
14945  6AA9 20 20 20 20 _s91: .db "    Total Energy        %d\n", 0
14945  6AAD 54 6F 74 61 
14945  6AB1 6C 20 45 6E 
14945  6AB5 65 72 67 79 
14945  6AB9 20 20 20 20 
14945  6ABD 20 20 20 20 
14945  6AC1 25 64 0A 00 
14946  6AC5 20 20 20 20 _s92: .db "    Shields             %d\n", 0
14946  6AC9 53 68 69 65 
14946  6ACD 6C 64 73 20 
14946  6AD1 20 20 20 20 
14946  6AD5 20 20 20 20 
14946  6AD9 20 20 20 20 
14946  6ADD 25 64 0A 00 
14947  6AE1 20 20 20 20 _s93: .db "    Klingons Remaining  %d\n", 0
14947  6AE5 4B 6C 69 6E 
14947  6AE9 67 6F 6E 73 
14947  6AED 20 52 65 6D 
14947  6AF1 61 69 6E 69 
14947  6AF5 6E 67 20 20 
14947  6AF9 25 64 0A 00 
14948  6AFD 4C 6F 6E 67 _s94: .db "Long Range Scan for Quadrant %d, %d\n\n", 0
14948  6B01 20 52 61 6E 
14948  6B05 67 65 20 53 
14948  6B09 63 61 6E 20 
14948  6B0D 66 6F 72 20 
14948  6B11 51 75 61 64 
14948  6B15 72 61 6E 74 
14948  6B19 20 25 64 2C 
14948  6B1D 20 25 64 0A 
14948  6B21 0A 00 
14949  6B23 25 73 3A 00 _s95: .db "%s:", 0
14950  6B27 2A 2A 2A 00 _s96: .db "***", 0
14951  6B2B 20 3A 00    _s97: .db " :", 0
14952  6B2E 25 73 0A 00 _s98: .db "%s\n", 0
14953  6B32 53 63 69 65 _s99: .db "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n", 0
14953  6B36 6E 63 65 20 
14953  6B3A 4F 66 66 69 
14953  6B3E 63 65 72 20 
14953  6B42 53 70 6F 63 
14953  6B46 6B 20 72 65 
14953  6B4A 70 6F 72 74 
14953  6B4E 73 3A 0A 20 
14953  6B52 20 27 53 65 
14953  6B56 6E 73 6F 72 
14953  6B5A 73 20 73 68 
14953  6B5E 6F 77 20 6E 
14953  6B62 6F 20 65 6E 
14953  6B66 65 6D 79 20 
14953  6B6A 73 68 69 70 
14953  6B6E 73 20 69 6E 
14953  6B72 20 74 68 69 
14953  6B76 73 20 71 75 
14953  6B7A 61 64 72 61 
14953  6B7E 6E 74 27 0A 
14953  6B82 00 
14954  6B83 43 6F 6D 70 _s100: .db "Computer failure hampers accuracy.", 0
14954  6B87 75 74 65 72 
14954  6B8B 20 66 61 69 
14954  6B8F 6C 75 72 65 
14954  6B93 20 68 61 6D 
14954  6B97 70 65 72 73 
14954  6B9B 20 61 63 63 
14954  6B9F 75 72 61 63 
14954  6BA3 79 2E 00 
14955  6BA6 50 68 61 73 _s101: .db "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", 0
14955  6BAA 65 72 73 20 
14955  6BAE 6C 6F 63 6B 
14955  6BB2 65 64 20 6F 
14955  6BB6 6E 20 74 61 
14955  6BBA 72 67 65 74 
14955  6BBE 3B 0A 20 45 
14955  6BC2 6E 65 72 67 
14955  6BC6 79 20 61 76 
14955  6BCA 61 69 6C 61 
14955  6BCE 62 6C 65 20 
14955  6BD2 3D 20 25 64 
14955  6BD6 20 75 6E 69 
14955  6BDA 74 73 0A 0A 
14955  6BDE 20 4E 75 6D 
14955  6BE2 62 65 72 20 
14955  6BE6 6F 66 20 75 
14955  6BEA 6E 69 74 73 
14955  6BEE 20 74 6F 20 
14955  6BF2 66 69 72 65 
14955  6BF6 3A 20 00 
14956  6BF9 4E 6F 74 20 _s102: .db "Not enough energy available.\n", 0
14956  6BFD 65 6E 6F 75 
14956  6C01 67 68 20 65 
14956  6C05 6E 65 72 67 
14956  6C09 79 20 61 76 
14956  6C0D 61 69 6C 61 
14956  6C11 62 6C 65 2E 
14956  6C15 0A 00 
14957  6C17 53 65 6E 73 _s103: .db "Sensors show no damage to enemy at %d, %d\n\n", 0
14957  6C1B 6F 72 73 20 
14957  6C1F 73 68 6F 77 
14957  6C23 20 6E 6F 20 
14957  6C27 64 61 6D 61 
14957  6C2B 67 65 20 74 
14957  6C2F 6F 20 65 6E 
14957  6C33 65 6D 79 20 
14957  6C37 61 74 20 25 
14957  6C3B 64 2C 20 25 
14957  6C3F 64 0A 0A 00 
14958  6C43 25 64 20 75 _s104: .db "%d unit hit on Klingon at sector %d, %d\n", 0
14958  6C47 6E 69 74 20 
14958  6C4B 68 69 74 20 
14958  6C4F 6F 6E 20 4B 
14958  6C53 6C 69 6E 67 
14958  6C57 6F 6E 20 61 
14958  6C5B 74 20 73 65 
14958  6C5F 63 74 6F 72 
14958  6C63 20 25 64 2C 
14958  6C67 20 25 64 0A 
14958  6C6B 00 
14959  6C6C 2A 2A 2A 20 _s105: .db "*** Klingon Destroyed ***\n", 0
14959  6C70 4B 6C 69 6E 
14959  6C74 67 6F 6E 20 
14959  6C78 44 65 73 74 
14959  6C7C 72 6F 79 65 
14959  6C80 64 20 2A 2A 
14959  6C84 2A 0A 00 
14960  6C87 20 20 20 28 _s106: .db "   (Sensors show %d units remaining.)\n\n", 0
14960  6C8B 53 65 6E 73 
14960  6C8F 6F 72 73 20 
14960  6C93 73 68 6F 77 
14960  6C97 20 25 64 20 
14960  6C9B 75 6E 69 74 
14960  6C9F 73 20 72 65 
14960  6CA3 6D 61 69 6E 
14960  6CA7 69 6E 67 2E 
14960  6CAB 29 0A 0A 00 
14961  6CAF 41 6C 6C 20 _s107: .db "All photon torpedoes expended", 0
14961  6CB3 70 68 6F 74 
14961  6CB7 6F 6E 20 74 
14961  6CBB 6F 72 70 65 
14961  6CBF 64 6F 65 73 
14961  6CC3 20 65 78 70 
14961  6CC7 65 6E 64 65 
14961  6CCB 64 00 
14962  6CCD 45 6E 73 69 _s108: .db "Ensign Chekov%s", 0
14962  6CD1 67 6E 20 43 
14962  6CD5 68 65 6B 6F 
14962  6CD9 76 25 73 00 
14963  6CDD 54 6F 72 70 _s109: .db "Torpedo Track:", 0
14963  6CE1 65 64 6F 20 
14963  6CE5 54 72 61 63 
14963  6CE9 6B 3A 00 
14964  6CEC 20 20 20 20 _s110: .db "    %d, %d\n", 0
14964  6CF0 25 64 2C 20 
14964  6CF4 25 64 0A 00 
14965  6CF8 54 6F 72 70 _s111: .db "Torpedo Missed\n", 0
14965  6CFC 65 64 6F 20 
14965  6D00 4D 69 73 73 
14965  6D04 65 64 0A 00 
14966  6D08 53 74 61 72 _s112: .db "Star at %d, %d absorbed torpedo energy.\n\n", 0
14966  6D0C 20 61 74 20 
14966  6D10 25 64 2C 20 
14966  6D14 25 64 20 61 
14966  6D18 62 73 6F 72 
14966  6D1C 62 65 64 20 
14966  6D20 74 6F 72 70 
14966  6D24 65 64 6F 20 
14966  6D28 65 6E 65 72 
14966  6D2C 67 79 2E 0A 
14966  6D30 0A 00 
14967  6D32 2A 2A 2A 20 _s113: .db "*** Starbase Destroyed ***", 0
14967  6D36 53 74 61 72 
14967  6D3A 62 61 73 65 
14967  6D3E 20 44 65 73 
14967  6D42 74 72 6F 79 
14967  6D46 65 64 20 2A 
14967  6D4A 2A 2A 00 
14968  6D4D 54 68 61 74 _s114: .db "That does it, Captain!!", 0
14968  6D51 20 64 6F 65 
14968  6D55 73 20 69 74 
14968  6D59 2C 20 43 61 
14968  6D5D 70 74 61 69 
14968  6D61 6E 21 21 00 
14969  6D65 59 6F 75 20 _s115: .db "You are hereby relieved of command\n", 0
14969  6D69 61 72 65 20 
14969  6D6D 68 65 72 65 
14969  6D71 62 79 20 72 
14969  6D75 65 6C 69 65 
14969  6D79 76 65 64 20 
14969  6D7D 6F 66 20 63 
14969  6D81 6F 6D 6D 61 
14969  6D85 6E 64 0A 00 
14970  6D89 61 6E 64 20 _s116: .db "and sentenced to 99 stardates of hard", 0
14970  6D8D 73 65 6E 74 
14970  6D91 65 6E 63 65 
14970  6D95 64 20 74 6F 
14970  6D99 20 39 39 20 
14970  6D9D 73 74 61 72 
14970  6DA1 64 61 74 65 
14970  6DA5 73 20 6F 66 
14970  6DA9 20 68 61 72 
14970  6DAD 64 00 
14971  6DAF 6C 61 62 6F _s117: .db "labor on Cygnus 12!!\n", 0
14971  6DB3 72 20 6F 6E 
14971  6DB7 20 43 79 67 
14971  6DBB 6E 75 73 20 
14971  6DBF 31 32 21 21 
14971  6DC3 0A 00 
14972  6DC5 53 74 61 72 _s118: .db "Starfleet Command reviewing your record to consider\n court martial!\n", 0
14972  6DC9 66 6C 65 65 
14972  6DCD 74 20 43 6F 
14972  6DD1 6D 6D 61 6E 
14972  6DD5 64 20 72 65 
14972  6DD9 76 69 65 77 
14972  6DDD 69 6E 67 20 
14972  6DE1 79 6F 75 72 
14972  6DE5 20 72 65 63 
14972  6DE9 6F 72 64 20 
14972  6DED 74 6F 20 63 
14972  6DF1 6F 6E 73 69 
14972  6DF5 64 65 72 0A 
14972  6DF9 20 63 6F 75 
14972  6DFD 72 74 20 6D 
14972  6E01 61 72 74 69 
14972  6E05 61 6C 21 0A 
14972  6E09 00 
14973  6E0A 44 61 6D 61 _s119: .db "Damage Control report not available.", 0
14973  6E0E 67 65 20 43 
14973  6E12 6F 6E 74 72 
14973  6E16 6F 6C 20 72 
14973  6E1A 65 70 6F 72 
14973  6E1E 74 20 6E 6F 
14973  6E22 74 20 61 76 
14973  6E26 61 69 6C 61 
14973  6E2A 62 6C 65 2E 
14973  6E2E 00 
out/startrek.asm line 14974: Maximum number of args exceeded. ("\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? ",0)
14974  6E2F 00          _s120: .db "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? ", 0
14975  6E30 44 65 76 69 _s121: .db "Device            State of Repair", 0
14975  6E34 63 65 20 20 
14975  6E38 20 20 20 20 
14975  6E3C 20 20 20 20 
14975  6E40 20 20 53 74 
14975  6E44 61 74 65 20 
14975  6E48 6F 66 20 52 
14975  6E4C 65 70 61 69 
14975  6E50 72 00 
14976  6E52 25 2D 32 35 _s122: .db "%-25s%6s\n", 0
14976  6E56 73 25 36 73 
14976  6E5A 0A 00 
14977  6E5C 0A 00       _s123: .db "\n", 0
14978  6E5E 45 6E 65 72 _s124: .db "Energy available = %d\n\n Input number of units to shields: ", 0
14978  6E62 67 79 20 61 
14978  6E66 76 61 69 6C 
14978  6E6A 61 62 6C 65 
14978  6E6E 20 3D 20 25 
14978  6E72 64 0A 0A 20 
14978  6E76 49 6E 70 75 
14978  6E7A 74 20 6E 75 
14978  6E7E 6D 62 65 72 
14978  6E82 20 6F 66 20 
14978  6E86 75 6E 69 74 
14978  6E8A 73 20 74 6F 
14978  6E8E 20 73 68 69 
14978  6E92 65 6C 64 73 
14978  6E96 3A 20 00 
14979  6E99 3C 53 68 69 _s125: .db "<Shields Unchanged>\n", 0
14979  6E9D 65 6C 64 73 
14979  6EA1 20 55 6E 63 
14979  6EA5 68 61 6E 67 
14979  6EA9 65 64 3E 0A 
14979  6EAD 00 
14980  6EAE 53 68 69 65 _s126: .db "Shield Control Reports:\n  This is not the Federation Treasury.", 0
14980  6EB2 6C 64 20 43 
14980  6EB6 6F 6E 74 72 
14980  6EBA 6F 6C 20 52 
14980  6EBE 65 70 6F 72 
14980  6EC2 74 73 3A 0A 
14980  6EC6 20 20 54 68 
14980  6ECA 69 73 20 69 
14980  6ECE 73 20 6E 6F 
14980  6ED2 74 20 74 68 
14980  6ED6 65 20 46 65 
14980  6EDA 64 65 72 61 
14980  6EDE 74 69 6F 6E 
14980  6EE2 20 54 72 65 
14980  6EE6 61 73 75 72 
14980  6EEA 79 2E 00 
14981  6EED 44 65 66 6C _s127: .db "Deflector Control Room report:\n  Shields now at %d units per your command.\n\n", 0
14981  6EF1 65 63 74 6F 
14981  6EF5 72 20 43 6F 
14981  6EF9 6E 74 72 6F 
14981  6EFD 6C 20 52 6F 
14981  6F01 6F 6D 20 72 
14981  6F05 65 70 6F 72 
14981  6F09 74 3A 0A 20 
14981  6F0D 20 53 68 69 
14981  6F11 65 6C 64 73 
14981  6F15 20 6E 6F 77 
14981  6F19 20 61 74 20 
14981  6F1D 25 64 20 75 
14981  6F21 6E 69 74 73 
14981  6F25 20 70 65 72 
14981  6F29 20 79 6F 75 
14981  6F2D 72 20 63 6F 
14981  6F31 6D 6D 61 6E 
14981  6F35 64 2E 0A 0A 
14981  6F39 00 
14982  6F3A 43 6F 6D 70 _s128: .db "Computer active and awating command: ", 0
14982  6F3E 75 74 65 72 
14982  6F42 20 61 63 74 
14982  6F46 69 76 65 20 
14982  6F4A 61 6E 64 20 
14982  6F4E 61 77 61 74 
14982  6F52 69 6E 67 20 
14982  6F56 63 6F 6D 6D 
14982  6F5A 61 6E 64 3A 
14982  6F5E 20 00 
14983  6F60 46 75 6E 63 _s129: .db "Functions available from Library-Computer:\n\n", 0
14983  6F64 74 69 6F 6E 
14983  6F68 73 20 61 76 
14983  6F6C 61 69 6C 61 
14983  6F70 62 6C 65 20 
14983  6F74 66 72 6F 6D 
14983  6F78 20 4C 69 62 
14983  6F7C 72 61 72 79 
14983  6F80 2D 43 6F 6D 
14983  6F84 70 75 74 65 
14983  6F88 72 3A 0A 0A 
14983  6F8C 00 
14984  6F8D 20 20 20 30 _s130: .db "   0 = Cumulative Galactic Record\n", 0
14984  6F91 20 3D 20 43 
14984  6F95 75 6D 75 6C 
14984  6F99 61 74 69 76 
14984  6F9D 65 20 47 61 
14984  6FA1 6C 61 63 74 
14984  6FA5 69 63 20 52 
14984  6FA9 65 63 6F 72 
14984  6FAD 64 0A 00 
14985  6FB0 20 20 20 31 _s131: .db "   1 = Status Report\n", 0
14985  6FB4 20 3D 20 53 
14985  6FB8 74 61 74 75 
14985  6FBC 73 20 52 65 
14985  6FC0 70 6F 72 74 
14985  6FC4 0A 00 
14986  6FC6 20 20 20 32 _s132: .db "   2 = Photon Torpedo Data\n", 0
14986  6FCA 20 3D 20 50 
14986  6FCE 68 6F 74 6F 
14986  6FD2 6E 20 54 6F 
14986  6FD6 72 70 65 64 
14986  6FDA 6F 20 44 61 
14986  6FDE 74 61 0A 00 
14987  6FE2 20 20 20 33 _s133: .db "   3 = Starbase Nav Data\n", 0
14987  6FE6 20 3D 20 53 
14987  6FEA 74 61 72 62 
14987  6FEE 61 73 65 20 
14987  6FF2 4E 61 76 20 
14987  6FF6 44 61 74 61 
14987  6FFA 0A 00 
14988  6FFC 20 20 20 34 _s134: .db "   4 = Direction/Distance Calculator\n", 0
14988  7000 20 3D 20 44 
14988  7004 69 72 65 63 
14988  7008 74 69 6F 6E 
14988  700C 2F 44 69 73 
14988  7010 74 61 6E 63 
14988  7014 65 20 43 61 
14988  7018 6C 63 75 6C 
14988  701C 61 74 6F 72 
14988  7020 0A 00 
14989  7022 20 20 20 35 _s135: .db "   5 = Galaxy Region Name Map\n", 0
14989  7026 20 3D 20 47 
14989  702A 61 6C 61 78 
14989  702E 79 20 52 65 
14989  7032 67 69 6F 6E 
14989  7036 20 4E 61 6D 
14989  703A 65 20 4D 61 
14989  703E 70 0A 00 
14990  7041 0A 20 20 20 _s136: .db "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", 0
14990  7045 20 20 43 6F 
14990  7049 6D 70 75 74 
14990  704D 65 72 20 52 
14990  7051 65 63 6F 72 
14990  7055 64 20 6F 66 
14990  7059 20 47 61 6C 
14990  705D 61 78 79 20 
14990  7061 66 6F 72 20 
14990  7065 51 75 61 64 
14990  7069 72 61 6E 74 
14990  706D 20 25 64 2C 
14990  7071 25 64 0A 0A 
14990  7075 00 
14991  7076 20 20 20 20 _s137: .db "     1     2     3     4     5     6     7     8", 0
14991  707A 20 31 20 20 
14991  707E 20 20 20 32 
14991  7082 20 20 20 20 
14991  7086 20 33 20 20 
14991  708A 20 20 20 34 
14991  708E 20 20 20 20 
14991  7092 20 35 20 20 
14991  7096 20 20 20 36 
14991  709A 20 20 20 20 
14991  709E 20 37 20 20 
14991  70A2 20 20 20 38 
14991  70A6 00 
14992  70A7 25 73 25 64 _s138: .db "%s%d", 0
14992  70AB 00 
14993  70AC 20 20 20 53 _s139: .db "   Status Report:\n", 0
14993  70B0 74 61 74 75 
14993  70B4 73 20 52 65 
14993  70B8 70 6F 72 74 
14993  70BC 3A 0A 00 
14994  70BF 4B 6C 69 6E _s140: .db "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 0
14994  70C3 67 6F 6E 25 
14994  70C7 73 20 4C 65 
14994  70CB 66 74 3A 20 
14994  70CF 25 64 0A 20 
14994  70D3 4D 69 73 73 
14994  70D7 69 6F 6E 20 
14994  70DB 6D 75 73 74 
14994  70DF 20 62 65 20 
14994  70E3 63 6F 6D 70 
14994  70E7 6C 65 74 65 
14994  70EB 64 20 69 6E 
14994  70EF 20 25 64 2E 
14994  70F3 25 64 20 73 
14994  70F7 74 61 72 64 
14994  70FB 61 74 65 73 
14994  70FF 0A 00 
14995  7101 59 6F 75 72 _s141: .db "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n", 0
14995  7105 20 73 74 75 
14995  7109 70 69 64 69 
14995  710D 74 79 20 68 
14995  7111 61 73 20 6C 
14995  7115 65 66 74 20 
14995  7119 79 6F 75 20 
14995  711D 6F 6E 20 79 
14995  7121 6F 75 72 20 
14995  7125 6F 77 6E 20 
14995  7129 69 6E 20 74 
14995  712D 68 65 20 67 
14995  7131 61 6C 61 78 
14995  7135 79 0A 20 2D 
14995  7139 2D 20 79 6F 
14995  713D 75 20 68 61 
14995  7141 76 65 20 6E 
14995  7145 6F 20 73 74 
14995  7149 61 72 62 61 
14995  714D 73 65 73 20 
14995  7151 6C 65 66 74 
14995  7155 21 0A 00 
14996  7158 54 68 65 20 _s142: .db "The Federation is maintaining %d starbase%s in the galaxy\n\n", 0
14996  715C 46 65 64 65 
14996  7160 72 61 74 69 
14996  7164 6F 6E 20 69 
14996  7168 73 20 6D 61 
14996  716C 69 6E 74 61 
14996  7170 69 6E 69 6E 
14996  7174 67 20 25 64 
14996  7178 20 73 74 61 
14996  717C 72 62 61 73 
14996  7180 65 25 73 20 
14996  7184 69 6E 20 74 
14996  7188 68 65 20 67 
14996  718C 61 6C 61 78 
14996  7190 79 0A 0A 00 
14997  7194 46 72 6F 6D _s143: .db "From Enterprise to Klingon battlecriuser%s:\n\n", 0
14997  7198 20 45 6E 74 
14997  719C 65 72 70 72 
14997  71A0 69 73 65 20 
14997  71A4 74 6F 20 4B 
14997  71A8 6C 69 6E 67 
14997  71AC 6F 6E 20 62 
14997  71B0 61 74 74 6C 
14997  71B4 65 63 72 69 
14997  71B8 75 73 65 72 
14997  71BC 25 73 3A 0A 
14997  71C0 0A 00 
14998  71C2 4D 72 2E 20 _s144: .db "Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n", 0
14998  71C6 53 70 6F 63 
14998  71CA 6B 20 72 65 
14998  71CE 70 6F 72 74 
14998  71D2 73 2C 0A 20 
14998  71D6 20 53 65 6E 
14998  71DA 73 6F 72 73 
14998  71DE 20 73 68 6F 
14998  71E2 77 20 6E 6F 
14998  71E6 20 73 74 61 
14998  71EA 72 62 61 73 
14998  71EE 65 73 20 69 
14998  71F2 6E 20 74 68 
14998  71F6 69 73 20 71 
14998  71FA 75 61 64 72 
14998  71FE 61 6E 74 2E 
14998  7202 0A 00 
14999  7204 44 69 72 65 _s145: .db "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 0
14999  7208 63 74 69 6F 
14999  720C 6E 2F 44 69 
14999  7210 73 74 61 6E 
14999  7214 63 65 20 43 
14999  7218 61 6C 63 75 
14999  721C 6C 61 74 6F 
14999  7220 72 0A 20 59 
14999  7224 6F 75 20 61 
14999  7228 72 65 20 61 
14999  722C 74 20 71 75 
14999  7230 61 64 72 61 
14999  7234 6E 74 20 25 
14999  7238 64 2C 25 64 
14999  723C 20 73 65 63 
14999  7240 74 6F 72 20 
14999  7244 25 64 2C 25 
14999  7248 64 0A 0A 20 
14999  724C 50 6C 65 61 
14999  7250 73 65 20 65 
14999  7254 6E 74 65 72 
14999  7258 20 69 6E 69 
14999  725C 74 69 61 6C 
14999  7260 20 58 20 63 
14999  7264 6F 6F 72 64 
14999  7268 69 6E 61 74 
14999  726C 65 3A 20 00 
15000  7270 50 6C 65 61 _s146: .db "Please enter initial Y coordinate: ", 0
15000  7274 73 65 20 65 
15000  7278 6E 74 65 72 
15000  727C 20 69 6E 69 
15000  7280 74 69 61 6C 
15000  7284 20 59 20 63 
15000  7288 6F 6F 72 64 
15000  728C 69 6E 61 74 
15000  7290 65 3A 20 00 
15001  7294 50 6C 65 61 _s147: .db "Please enter final X coordinate: ", 0
15001  7298 73 65 20 65 
15001  729C 6E 74 65 72 
15001  72A0 20 66 69 6E 
15001  72A4 61 6C 20 58 
15001  72A8 20 63 6F 6F 
15001  72AC 72 64 69 6E 
15001  72B0 61 74 65 3A 
15001  72B4 20 00 
15002  72B6 50 6C 65 61 _s148: .db "Please enter final Y coordinate: ", 0
15002  72BA 73 65 20 65 
15002  72BE 6E 74 65 72 
15002  72C2 20 66 69 6E 
15002  72C6 61 6C 20 59 
15002  72CA 20 63 6F 6F 
15002  72CE 72 64 69 6E 
15002  72D2 61 74 65 3A 
15002  72D6 20 00 
15003  72D8 0A 20 20 20 _s149: .db "\n                   The Galaxy\n\n", 0
15003  72DC 20 20 20 20 
15003  72E0 20 20 20 20 
15003  72E4 20 20 20 20 
15003  72E8 20 20 20 20 
15003  72EC 54 68 65 20 
15003  72F0 47 61 6C 61 
15003  72F4 78 79 0A 0A 
15003  72F8 00 
15004  72F9 20 20 20 20 _s150: .db "    1     2     3     4     5     6     7     8\n", 0
15004  72FD 31 20 20 20 
15004  7301 20 20 32 20 
15004  7305 20 20 20 20 
15004  7309 33 20 20 20 
15004  730D 20 20 34 20 
15004  7311 20 20 20 20 
15004  7315 35 20 20 20 
15004  7319 20 20 36 20 
15004  731D 20 20 20 20 
15004  7321 37 20 20 20 
15004  7325 20 20 38 0A 
15004  7329 00 
15005  732A 25 73 25 64 _s151: .db "%s%d ", 0
15005  732E 20 00 
15006  7330 20 20 44 49 _s152: .db "  DIRECTION = ", 0
15006  7334 52 45 43 54 
15006  7338 49 4F 4E 20 
15006  733C 3D 20 00 
15007  733F 25 73 00    _s153: .db "%s", 0
15008  7342 54 68 65 20 _s154: .db "The Enterprise has been destroyed. The Federation will be conquered.\n", 0
15008  7346 45 6E 74 65 
15008  734A 72 70 72 69 
15008  734E 73 65 20 68 
15008  7352 61 73 20 62 
15008  7356 65 65 6E 20 
15008  735A 64 65 73 74 
15008  735E 72 6F 79 65 
15008  7362 64 2E 20 54 
15008  7366 68 65 20 46 
15008  736A 65 64 65 72 
15008  736E 61 74 69 6F 
15008  7372 6E 20 77 69 
15008  7376 6C 6C 20 62 
15008  737A 65 20 63 6F 
15008  737E 6E 71 75 65 
15008  7382 72 65 64 2E 
15008  7386 0A 00 
15009  7388 49 74 20 69 _s155: .db "It is stardate %d.\n\n", 0
15009  738C 73 20 73 74 
15009  7390 61 72 64 61 
15009  7394 74 65 20 25 
15009  7398 64 2E 0A 0A 
15009  739C 00 
15010  739D 54 68 65 72 _s156: .db "There were %d Klingon Battlecruisers left at the end of your mission.\n\n", 0
15010  73A1 65 20 77 65 
15010  73A5 72 65 20 25 
15010  73A9 64 20 4B 6C 
15010  73AD 69 6E 67 6F 
15010  73B1 6E 20 42 61 
15010  73B5 74 74 6C 65 
15010  73B9 63 72 75 69 
15010  73BD 73 65 72 73 
15010  73C1 20 6C 65 66 
15010  73C5 74 20 61 74 
15010  73C9 20 74 68 65 
15010  73CD 20 65 6E 64 
15010  73D1 20 6F 66 20 
15010  73D5 79 6F 75 72 
15010  73D9 20 6D 69 73 
15010  73DD 73 69 6F 6E 
15010  73E1 2E 0A 0A 00 
15011  73E5 43 6F 6E 67 _s157: .db "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n", 0
15011  73E9 72 61 74 75 
15011  73ED 6C 61 74 69 
15011  73F1 6F 6E 73 2C 
15011  73F5 20 43 61 70 
15011  73F9 74 61 69 6E 
15011  73FD 21 20 20 54 
15011  7401 68 65 20 6C 
15011  7405 61 73 74 20 
15011  7409 4B 6C 69 6E 
15011  740D 67 6F 6E 20 
15011  7411 42 61 74 74 
15011  7415 6C 65 20 43 
15011  7419 72 75 69 73 
15011  741D 65 72 0A 20 
15011  7421 6D 65 6E 61 
15011  7425 63 69 6E 67 
15011  7429 20 74 68 65 
15011  742D 20 46 65 64 
15011  7431 65 72 61 74 
15011  7435 69 6F 6E 20 
15011  7439 68 61 73 20 
15011  743D 62 65 65 6E 
15011  7441 20 64 65 73 
15011  7445 74 6F 79 65 
15011  7449 64 2E 0A 00 
15012  744D 59 6F 75 72 _s158: .db "Your efficiency rating is %s\n", 0
15012  7451 20 65 66 66 
15012  7455 69 63 69 65 
15012  7459 6E 63 79 20 
15012  745D 72 61 74 69 
15012  7461 6E 67 20 69 
15012  7465 73 20 25 73 
15012  7469 0A 00 
15013  746B 54 68 65 20 _s159: .db "The Federation is in need of a new starship commander", 0
15013  746F 46 65 64 65 
15013  7473 72 61 74 69 
15013  7477 6F 6E 20 69 
15013  747B 73 20 69 6E 
15013  747F 20 6E 65 65 
15013  7483 64 20 6F 66 
15013  7487 20 61 20 6E 
15013  748B 65 77 20 73 
15013  748F 74 61 72 73 
15013  7493 68 69 70 20 
15013  7497 63 6F 6D 6D 
15013  749B 61 6E 64 65 
15013  749F 72 00 
15014  74A1 20 66 6F 72 _s160: .db " for a similar mission.\n", 0
15014  74A5 20 61 20 73 
15014  74A9 69 6D 69 6C 
15014  74AD 61 72 20 6D 
15014  74B1 69 73 73 69 
15014  74B5 6F 6E 2E 0A 
15014  74B9 00 
15015  74BA 49 66 20 74 _s161: .db "If there is a volunteer, let him step forward and", 0
15015  74BE 68 65 72 65 
15015  74C2 20 69 73 20 
15015  74C6 61 20 76 6F 
15015  74CA 6C 75 6E 74 
15015  74CE 65 65 72 2C 
15015  74D2 20 6C 65 74 
15015  74D6 20 68 69 6D 
15015  74DA 20 73 74 65 
15015  74DE 70 20 66 6F 
15015  74E2 72 77 61 72 
15015  74E6 64 20 61 6E 
15015  74EA 64 00 
15016  74EC 20 65 6E 74 _s162: .db " enter aye: ", 0
15016  74F0 65 72 20 61 
15016  74F4 79 65 3A 20 
15016  74F8 00 
15017  74F9 61 79 65 00 _s163: .db "aye", 0
15018  74FD 53 74 61 72 _s164: .db "Starbase shields protect the Enterprise\n", 0
15018  7501 62 61 73 65 
15018  7505 20 73 68 69 
15018  7509 65 6C 64 73 
15018  750D 20 70 72 6F 
15018  7511 74 65 63 74 
15018  7515 20 74 68 65 
15018  7519 20 45 6E 74 
15018  751D 65 72 70 72 
15018  7521 69 73 65 0A 
15018  7525 00 
15019  7526 25 64 20 75 _s165: .db "%d unit hit on Enterprise from sector %d, %d\n", 0
15019  752A 6E 69 74 20 
15019  752E 68 69 74 20 
15019  7532 6F 6E 20 45 
15019  7536 6E 74 65 72 
15019  753A 70 72 69 73 
15019  753E 65 20 66 72 
15019  7542 6F 6D 20 73 
15019  7546 65 63 74 6F 
15019  754A 72 20 25 64 
15019  754E 2C 20 25 64 
15019  7552 0A 00 
15020  7554 20 20 20 20 _s166: .db "    <Shields down to %d units>\n\n", 0
15020  7558 3C 53 68 69 
15020  755C 65 6C 64 73 
15020  7560 20 64 6F 77 
15020  7564 6E 20 74 6F 
15020  7568 20 25 64 20 
15020  756C 75 6E 69 74 
15020  7570 73 3E 0A 0A 
15020  7574 00 
15021  7575 44 61 6D 61 _s167: .db "Damage Control reports\n%s damaged by hit\n\n", 0
15021  7579 67 65 20 43 
15021  757D 6F 6E 74 72 
15021  7581 6F 6C 20 72 
15021  7585 65 70 6F 72 
15021  7589 74 73 0A 25 
15021  758D 73 20 64 61 
15021  7591 6D 61 67 65 
15021  7595 64 20 62 79 
15021  7599 20 68 69 74 
15021  759D 0A 0A 00 
15022  75A0 20 20 20 20 _s168: .db "    %s repair completed\n\n", 0
15022  75A4 25 73 20 72 
15022  75A8 65 70 61 69 
15022  75AC 72 20 63 6F 
15022  75B0 6D 70 6C 65 
15022  75B4 74 65 64 0A 
15022  75B8 0A 00 
15023  75BA 20 20 20 20 _s169: .db "    %s damaged\n\n", 0
15023  75BE 25 73 20 64 
15023  75C2 61 6D 61 67 
15023  75C6 65 64 0A 0A 
15023  75CA 00 
15024  75CB 20 20 20 20 _s170: .db "    %s state of repair improved\n\n", 0
15024  75CF 25 73 20 73 
15024  75D3 74 61 74 65 
15024  75D7 20 6F 66 20 
15024  75DB 72 65 70 61 
15024  75DF 69 72 20 69 
15024  75E3 6D 70 72 6F 
15024  75E7 76 65 64 0A 
15024  75EB 0A 00 
15025  75ED 20 49 00    _s171: .db " I", 0
15026  75F0 20 49 49 00 _s172: .db " II", 0
15027  75F4 20 49 49 49 _s173: .db " III", 0
15027  75F8 00 
15028  75F9 20 49 56 00 _s174: .db " IV", 0
15029  75FD 55 6E 6B 6E _s175: .db "Unknown", 0
15029  7601 6F 77 6E 00 
15030  7605             
15031  7605 07 76       _heap_top: .dw _heap
15032  7607 00          _heap: .db 0
15033  7608             ; --- END DATA BLOCK
15034  7608             
15035  7608             .end
tasm: Number of errors = 12
