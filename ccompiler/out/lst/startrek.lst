0001   0000             ; --- FILENAME: games/startrek
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; intro(); 
0011   0408 07 A9 20      call intro
0012   040B             ;; new_game(); 
0013   040B 07 DA 20      call new_game
0014   040E             ;; return (0); 
0015   040E 26 00 00      mov b, $0
0016   0411 F9            leave
0017   0412 05 0B         syscall sys_terminate_proc
0018   0414             
0019   0414             strcpy:
0020   0414 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0021   0417             ; $psrc 
0022   0417             ; $pdest 
0023   0417 52 04 00      sub sp, 4
0024   041A             ;; psrc = src; 
0025   041A FA FF FF      lea d, [bp + -1] ; $psrc
0026   041D DA            push d
0027   041E FA 07 00      lea d, [bp + 7] ; $src
0028   0421 2A            mov b, [d]
0029   0422 E7            pop d
0030   0423 FD 43         mov [d], b
0031   0425             ;; pdest = dest; 
0032   0425 FA FD FF      lea d, [bp + -3] ; $pdest
0033   0428 DA            push d
0034   0429 FA 05 00      lea d, [bp + 5] ; $dest
0035   042C 2A            mov b, [d]
0036   042D E7            pop d
0037   042E FD 43         mov [d], b
0038   0430             ;; while(*psrc) *pdest++ = *psrc++; 
0039   0430             _while1_cond:
0040   0430 FA FF FF      lea d, [bp + -1] ; $psrc
0041   0433 2A            mov b, [d]
0042   0434 74            mov d, b
0043   0435 32            mov bl, [d]
0044   0436 A7 00         mov bh, 0
0045   0438 C0 00 00      cmp b, 0
0046   043B C6 63 04      je _while1_exit
0047   043E             _while1_block:
0048   043E             ;; *pdest++ = *psrc++; 
0049   043E FA FD FF      lea d, [bp + -3] ; $pdest
0050   0441 2A            mov b, [d]
0051   0442 D8            push b
0052   0443 FD 77         inc b
0053   0445 FA FD FF      lea d, [bp + -3] ; $pdest
0054   0448 FD 43         mov [d], b
0055   044A E5            pop b
0056   044B D8            push b
0057   044C FA FF FF      lea d, [bp + -1] ; $psrc
0058   044F 2A            mov b, [d]
0059   0450 D8            push b
0060   0451 FD 77         inc b
0061   0453 FA FF FF      lea d, [bp + -1] ; $psrc
0062   0456 FD 43         mov [d], b
0063   0458 E5            pop b
0064   0459 74            mov d, b
0065   045A 32            mov bl, [d]
0066   045B A7 00         mov bh, 0
0067   045D E7            pop d
0068   045E FD 3E         mov [d], bl
0069   0460 0A 30 04      jmp _while1_cond
0070   0463             _while1_exit:
0071   0463             ;; *pdest = '\0'; 
0072   0463 FA FD FF      lea d, [bp + -3] ; $pdest
0073   0466 2A            mov b, [d]
0074   0467 D8            push b
0075   0468 26 00 00      mov b, $0
0076   046B E7            pop d
0077   046C FD 3E         mov [d], bl
0078   046E F9            leave
0079   046F 09            ret
0080   0470             
0081   0470             strcmp:
0082   0470 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0083   0473             ;; while (*s1 && (*s1 == *s2)) { 
0084   0473             _while2_cond:
0085   0473 FA 05 00      lea d, [bp + 5] ; $s1
0086   0476 2A            mov b, [d]
0087   0477 74            mov d, b
0088   0478 32            mov bl, [d]
0089   0479 A7 00         mov bh, 0
0090   047B D7            push a
0091   047C 11            mov a, b
0092   047D FA 05 00      lea d, [bp + 5] ; $s1
0093   0480 2A            mov b, [d]
0094   0481 74            mov d, b
0095   0482 32            mov bl, [d]
0096   0483 A7 00         mov bh, 0
0097   0485             ; START RELATIONAL
0098   0485 D7            push a
0099   0486 11            mov a, b
0100   0487 FA 07 00      lea d, [bp + 7] ; $s2
0101   048A 2A            mov b, [d]
0102   048B 74            mov d, b
0103   048C 32            mov bl, [d]
0104   048D A7 00         mov bh, 0
0105   048F B0            cmp a, b
0106   0490 FD 71         seq ; ==
0107   0492 E4            pop a
0108   0493             ; END RELATIONAL
0109   0493 FD A7         sand a, b
0110   0495 E4            pop a
0111   0496 C0 00 00      cmp b, 0
0112   0499 C6 B9 04      je _while2_exit
0113   049C             _while2_block:
0114   049C             ;; s1++; 
0115   049C FA 05 00      lea d, [bp + 5] ; $s1
0116   049F 2A            mov b, [d]
0117   04A0 D8            push b
0118   04A1 FD 77         inc b
0119   04A3 FA 05 00      lea d, [bp + 5] ; $s1
0120   04A6 FD 43         mov [d], b
0121   04A8 E5            pop b
0122   04A9             ;; s2++; 
0123   04A9 FA 07 00      lea d, [bp + 7] ; $s2
0124   04AC 2A            mov b, [d]
0125   04AD D8            push b
0126   04AE FD 77         inc b
0127   04B0 FA 07 00      lea d, [bp + 7] ; $s2
0128   04B3 FD 43         mov [d], b
0129   04B5 E5            pop b
0130   04B6 0A 73 04      jmp _while2_cond
0131   04B9             _while2_exit:
0132   04B9             ;; return *s1 - *s2; 
0133   04B9 FA 05 00      lea d, [bp + 5] ; $s1
0134   04BC 2A            mov b, [d]
0135   04BD 74            mov d, b
0136   04BE 32            mov bl, [d]
0137   04BF A7 00         mov bh, 0
0138   04C1             ; START TERMS
0139   04C1 D7            push a
0140   04C2 11            mov a, b
0141   04C3 FA 07 00      lea d, [bp + 7] ; $s2
0142   04C6 2A            mov b, [d]
0143   04C7 74            mov d, b
0144   04C8 32            mov bl, [d]
0145   04C9 A7 00         mov bh, 0
0146   04CB 60            sub a, b
0147   04CC 27            mov b, a
0148   04CD E4            pop a
0149   04CE             ; END TERMS
0150   04CE F9            leave
0151   04CF 09            ret
0152   04D0             
0153   04D0             strncmp:
0154   04D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0155   04D3 F9            leave
0156   04D4 09            ret
0157   04D5             
0158   04D5             strcat:
0159   04D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0160   04D8             ; $dest_len 
0161   04D8             ; $i 
0162   04D8 52 04 00      sub sp, 4
0163   04DB             ;; dest_len = strlen(dest); 
0164   04DB FA FF FF      lea d, [bp + -1] ; $dest_len
0165   04DE DA            push d
0166   04DF FA 05 00      lea d, [bp + 5] ; $dest
0167   04E2 2A            mov b, [d]
0168   04E3 FD AB         swp b
0169   04E5 D8            push b
0170   04E6 07 88 05      call strlen
0171   04E9 51 02 00      add sp, 2
0172   04EC E7            pop d
0173   04ED FD 43         mov [d], b
0174   04EF             ;; for (i = 0; src[i] != 0; i=i+1) { 
0175   04EF             _for3_init:
0176   04EF FA FD FF      lea d, [bp + -3] ; $i
0177   04F2 DA            push d
0178   04F3 26 00 00      mov b, $0
0179   04F6 E7            pop d
0180   04F7 FD 43         mov [d], b
0181   04F9             _for3_cond:
0182   04F9 FA 07 00      lea d, [bp + 7] ; $src
0183   04FC FD 2A         mov d, [d]
0184   04FE D7            push a
0185   04FF DA            push d
0186   0500 FA FD FF      lea d, [bp + -3] ; $i
0187   0503 2A            mov b, [d]
0188   0504 E7            pop d
0189   0505 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0190   0509 E4            pop a
0191   050A 32            mov bl, [d]
0192   050B A7 00         mov bh, 0
0193   050D             ; START RELATIONAL
0194   050D D7            push a
0195   050E 11            mov a, b
0196   050F 26 00 00      mov b, $0
0197   0512 B0            cmp a, b
0198   0513 FD 72         sneq ; !=
0199   0515 E4            pop a
0200   0516             ; END RELATIONAL
0201   0516 C0 00 00      cmp b, 0
0202   0519 C6 62 05      je _for3_exit
0203   051C             _for3_block:
0204   051C             ;; dest[dest_len + i] = src[i]; 
0205   051C FA 05 00      lea d, [bp + 5] ; $dest
0206   051F FD 2A         mov d, [d]
0207   0521 D7            push a
0208   0522 DA            push d
0209   0523 FA FF FF      lea d, [bp + -1] ; $dest_len
0210   0526 2A            mov b, [d]
0211   0527             ; START TERMS
0212   0527 D7            push a
0213   0528 11            mov a, b
0214   0529 FA FD FF      lea d, [bp + -3] ; $i
0215   052C 2A            mov b, [d]
0216   052D 56            add b, a
0217   052E E4            pop a
0218   052F             ; END TERMS
0219   052F E7            pop d
0220   0530 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0221   0534 E4            pop a
0222   0535 DA            push d
0223   0536 FA 07 00      lea d, [bp + 7] ; $src
0224   0539 FD 2A         mov d, [d]
0225   053B D7            push a
0226   053C DA            push d
0227   053D FA FD FF      lea d, [bp + -3] ; $i
0228   0540 2A            mov b, [d]
0229   0541 E7            pop d
0230   0542 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0231   0546 E4            pop a
0232   0547 32            mov bl, [d]
0233   0548 A7 00         mov bh, 0
0234   054A E7            pop d
0235   054B FD 3E         mov [d], bl
0236   054D             _for3_update:
0237   054D FA FD FF      lea d, [bp + -3] ; $i
0238   0550 DA            push d
0239   0551 FA FD FF      lea d, [bp + -3] ; $i
0240   0554 2A            mov b, [d]
0241   0555             ; START TERMS
0242   0555 D7            push a
0243   0556 11            mov a, b
0244   0557 26 01 00      mov b, $1
0245   055A 56            add b, a
0246   055B E4            pop a
0247   055C             ; END TERMS
0248   055C E7            pop d
0249   055D FD 43         mov [d], b
0250   055F 0A F9 04      jmp _for3_cond
0251   0562             _for3_exit:
0252   0562             ;; dest[dest_len + i] = 0; 
0253   0562 FA 05 00      lea d, [bp + 5] ; $dest
0254   0565 FD 2A         mov d, [d]
0255   0567 D7            push a
0256   0568 DA            push d
0257   0569 FA FF FF      lea d, [bp + -1] ; $dest_len
0258   056C 2A            mov b, [d]
0259   056D             ; START TERMS
0260   056D D7            push a
0261   056E 11            mov a, b
0262   056F FA FD FF      lea d, [bp + -3] ; $i
0263   0572 2A            mov b, [d]
0264   0573 56            add b, a
0265   0574 E4            pop a
0266   0575             ; END TERMS
0267   0575 E7            pop d
0268   0576 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0269   057A E4            pop a
0270   057B DA            push d
0271   057C 26 00 00      mov b, $0
0272   057F E7            pop d
0273   0580 FD 3E         mov [d], bl
0274   0582             ;; return dest; 
0275   0582 FA 05 00      lea d, [bp + 5] ; $dest
0276   0585 2A            mov b, [d]
0277   0586 F9            leave
0278   0587 09            ret
0279   0588             
0280   0588             strlen:
0281   0588 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0282   058B             ; $length 
0283   058B 52 02 00      sub sp, 2
0284   058E             ;; length = 0; 
0285   058E FA FF FF      lea d, [bp + -1] ; $length
0286   0591 DA            push d
0287   0592 26 00 00      mov b, $0
0288   0595 E7            pop d
0289   0596 FD 43         mov [d], b
0290   0598             ;; while (str[length] != 0) { 
0291   0598             _while4_cond:
0292   0598 FA 05 00      lea d, [bp + 5] ; $str
0293   059B FD 2A         mov d, [d]
0294   059D D7            push a
0295   059E DA            push d
0296   059F FA FF FF      lea d, [bp + -1] ; $length
0297   05A2 2A            mov b, [d]
0298   05A3 E7            pop d
0299   05A4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0300   05A8 E4            pop a
0301   05A9 32            mov bl, [d]
0302   05AA A7 00         mov bh, 0
0303   05AC             ; START RELATIONAL
0304   05AC D7            push a
0305   05AD 11            mov a, b
0306   05AE 26 00 00      mov b, $0
0307   05B1 B0            cmp a, b
0308   05B2 FD 72         sneq ; !=
0309   05B4 E4            pop a
0310   05B5             ; END RELATIONAL
0311   05B5 C0 00 00      cmp b, 0
0312   05B8 C6 CB 05      je _while4_exit
0313   05BB             _while4_block:
0314   05BB             ;; length++; 
0315   05BB FA FF FF      lea d, [bp + -1] ; $length
0316   05BE 2A            mov b, [d]
0317   05BF D8            push b
0318   05C0 FD 77         inc b
0319   05C2 FA FF FF      lea d, [bp + -1] ; $length
0320   05C5 FD 43         mov [d], b
0321   05C7 E5            pop b
0322   05C8 0A 98 05      jmp _while4_cond
0323   05CB             _while4_exit:
0324   05CB             ;; return length; 
0325   05CB FA FF FF      lea d, [bp + -1] ; $length
0326   05CE 2A            mov b, [d]
0327   05CF F9            leave
0328   05D0 09            ret
0329   05D1             
0330   05D1             printf:
0331   05D1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0332   05D4             ; $p 
0333   05D4             ; $format_p 
0334   05D4 52 04 00      sub sp, 4
0335   05D7             ;; format_p = format; 
0336   05D7 FA FD FF      lea d, [bp + -3] ; $format_p
0337   05DA DA            push d
0338   05DB FA 05 00      lea d, [bp + 5] ; $format
0339   05DE 2A            mov b, [d]
0340   05DF E7            pop d
0341   05E0 FD 43         mov [d], b
0342   05E2             ;; p = &format + 2; 
0343   05E2 FA FF FF      lea d, [bp + -1] ; $p
0344   05E5 DA            push d
0345   05E6 FA 05 00      lea d, [bp + 5] ; $format
0346   05E9 2D            mov b, d
0347   05EA             ; START TERMS
0348   05EA D7            push a
0349   05EB 11            mov a, b
0350   05EC 26 02 00      mov b, $2
0351   05EF 56            add b, a
0352   05F0 E4            pop a
0353   05F1             ; END TERMS
0354   05F1 E7            pop d
0355   05F2 FD 43         mov [d], b
0356   05F4             ;; for(;;){ 
0357   05F4             _for5_init:
0358   05F4             _for5_cond:
0359   05F4             _for5_block:
0360   05F4             ;; if(!*format_p) break; 
0361   05F4             _if6_cond:
0362   05F4 FA FD FF      lea d, [bp + -3] ; $format_p
0363   05F7 2A            mov b, [d]
0364   05F8 74            mov d, b
0365   05F9 32            mov bl, [d]
0366   05FA A7 00         mov bh, 0
0367   05FC C0 00 00      cmp b, 0
0368   05FF FD 71         seq ; !
0369   0601 C0 00 00      cmp b, 0
0370   0604 C6 0D 06      je _if6_else
0371   0607             _if6_true:
0372   0607             ;; break; 
0373   0607 0A 34 08      jmp _for5_exit ; for break
0374   060A 0A 31 08      jmp _if6_exit
0375   060D             _if6_else:
0376   060D             ;; if(*format_p == '%'){ 
0377   060D             _if7_cond:
0378   060D FA FD FF      lea d, [bp + -3] ; $format_p
0379   0610 2A            mov b, [d]
0380   0611 74            mov d, b
0381   0612 32            mov bl, [d]
0382   0613 A7 00         mov bh, 0
0383   0615             ; START RELATIONAL
0384   0615 D7            push a
0385   0616 11            mov a, b
0386   0617 26 25 00      mov b, $25
0387   061A B0            cmp a, b
0388   061B FD 71         seq ; ==
0389   061D E4            pop a
0390   061E             ; END RELATIONAL
0391   061E C0 00 00      cmp b, 0
0392   0621 C6 15 08      je _if7_else
0393   0624             _if7_true:
0394   0624             ;; format_p++; 
0395   0624 FA FD FF      lea d, [bp + -3] ; $format_p
0396   0627 2A            mov b, [d]
0397   0628 D8            push b
0398   0629 FD 77         inc b
0399   062B FA FD FF      lea d, [bp + -3] ; $format_p
0400   062E FD 43         mov [d], b
0401   0630 E5            pop b
0402   0631             ;; switch(*format_p){ 
0403   0631             _switch8_expr:
0404   0631 FA FD FF      lea d, [bp + -3] ; $format_p
0405   0634 2A            mov b, [d]
0406   0635 74            mov d, b
0407   0636 32            mov bl, [d]
0408   0637 A7 00         mov bh, 0
0409   0639             _switch8_comparisons:
0410   0639 C1 6C         cmp bl, $6c
0411   063B C6 67 06      je _switch8_case0
0412   063E C1 4C         cmp bl, $4c
0413   0640 C6 67 06      je _switch8_case1
0414   0643 C1 64         cmp bl, $64
0415   0645 C6 55 07      je _switch8_case2
0416   0648 C1 69         cmp bl, $69
0417   064A C6 55 07      je _switch8_case3
0418   064D C1 75         cmp bl, $75
0419   064F C6 79 07      je _switch8_case4
0420   0652 C1 78         cmp bl, $78
0421   0654 C6 9D 07      je _switch8_case5
0422   0657 C1 63         cmp bl, $63
0423   0659 C6 BB 07      je _switch8_case6
0424   065C C1 73         cmp bl, $73
0425   065E C6 DA 07      je _switch8_case7
0426   0661 0A F9 07      jmp _switch8_default
0427   0664 0A 05 08      jmp _switch8_exit
0428   0667             _switch8_case0:
0429   0667             _switch8_case1:
0430   0667             ;; format_p++; 
0431   0667 FA FD FF      lea d, [bp + -3] ; $format_p
0432   066A 2A            mov b, [d]
0433   066B D8            push b
0434   066C FD 77         inc b
0435   066E FA FD FF      lea d, [bp + -3] ; $format_p
0436   0671 FD 43         mov [d], b
0437   0673 E5            pop b
0438   0674             ;; if(*format_p == 'd' || *format_p == 'i') 
0439   0674             _if9_cond:
0440   0674 FA FD FF      lea d, [bp + -3] ; $format_p
0441   0677 2A            mov b, [d]
0442   0678 74            mov d, b
0443   0679 32            mov bl, [d]
0444   067A A7 00         mov bh, 0
0445   067C             ; START RELATIONAL
0446   067C D7            push a
0447   067D 11            mov a, b
0448   067E 26 64 00      mov b, $64
0449   0681 B0            cmp a, b
0450   0682 FD 71         seq ; ==
0451   0684 E4            pop a
0452   0685             ; END RELATIONAL
0453   0685 D7            push a
0454   0686 11            mov a, b
0455   0687 FA FD FF      lea d, [bp + -3] ; $format_p
0456   068A 2A            mov b, [d]
0457   068B 74            mov d, b
0458   068C 32            mov bl, [d]
0459   068D A7 00         mov bh, 0
0460   068F             ; START RELATIONAL
0461   068F D7            push a
0462   0690 11            mov a, b
0463   0691 26 69 00      mov b, $69
0464   0694 B0            cmp a, b
0465   0695 FD 71         seq ; ==
0466   0697 E4            pop a
0467   0698             ; END RELATIONAL
0468   0698 FD A8         sor a, b ; ||
0469   069A E4            pop a
0470   069B C0 00 00      cmp b, 0
0471   069E C6 C3 06      je _if9_else
0472   06A1             _if9_true:
0473   06A1             ;; print_signed_long(*(long *)p); 
0474   06A1 FA FF FF      lea d, [bp + -1] ; $p
0475   06A4 2A            mov b, [d]
0476   06A5 AB            snex b
0477   06A6 FD 39         mov c, b
0478   06A8 74            mov d, b
0479   06A9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0480   06AC FD 39         mov c, b ; And place it into C
0481   06AE 2A            mov b, [d] ; Lower Word in B
0482   06AF FD 79         mov g, b
0483   06B1 28            mov b, c
0484   06B2 FD AB         swp b
0485   06B4 D8            push b
0486   06B5 FD 27         mov b, g
0487   06B7 FD AB         swp b
0488   06B9 D8            push b
0489   06BA 07 FA 0C      call print_signed_long
0490   06BD 51 04 00      add sp, 4
0491   06C0 0A 40 07      jmp _if9_exit
0492   06C3             _if9_else:
0493   06C3             ;; if(*format_p == 'u') 
0494   06C3             _if10_cond:
0495   06C3 FA FD FF      lea d, [bp + -3] ; $format_p
0496   06C6 2A            mov b, [d]
0497   06C7 74            mov d, b
0498   06C8 32            mov bl, [d]
0499   06C9 A7 00         mov bh, 0
0500   06CB             ; START RELATIONAL
0501   06CB D7            push a
0502   06CC 11            mov a, b
0503   06CD 26 75 00      mov b, $75
0504   06D0 B0            cmp a, b
0505   06D1 FD 71         seq ; ==
0506   06D3 E4            pop a
0507   06D4             ; END RELATIONAL
0508   06D4 C0 00 00      cmp b, 0
0509   06D7 C6 FE 06      je _if10_else
0510   06DA             _if10_true:
0511   06DA             ;; print_unsigned_long(*(unsigned long *)p); 
0512   06DA FA FF FF      lea d, [bp + -1] ; $p
0513   06DD 2A            mov b, [d]
0514   06DE A7 00         mov bh, 0
0515   06E0 38 00 00      mov c, 0
0516   06E3 74            mov d, b
0517   06E4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0518   06E7 FD 39         mov c, b ; And place it into C
0519   06E9 2A            mov b, [d] ; Lower Word in B
0520   06EA FD 79         mov g, b
0521   06EC 28            mov b, c
0522   06ED FD AB         swp b
0523   06EF D8            push b
0524   06F0 FD 27         mov b, g
0525   06F2 FD AB         swp b
0526   06F4 D8            push b
0527   06F5 07 33 10      call print_unsigned_long
0528   06F8 51 04 00      add sp, 4
0529   06FB 0A 40 07      jmp _if10_exit
0530   06FE             _if10_else:
0531   06FE             ;; if(*format_p == 'x') 
0532   06FE             _if11_cond:
0533   06FE FA FD FF      lea d, [bp + -3] ; $format_p
0534   0701 2A            mov b, [d]
0535   0702 74            mov d, b
0536   0703 32            mov bl, [d]
0537   0704 A7 00         mov bh, 0
0538   0706             ; START RELATIONAL
0539   0706 D7            push a
0540   0707 11            mov a, b
0541   0708 26 78 00      mov b, $78
0542   070B B0            cmp a, b
0543   070C FD 71         seq ; ==
0544   070E E4            pop a
0545   070F             ; END RELATIONAL
0546   070F C0 00 00      cmp b, 0
0547   0712 C6 34 07      je _if11_else
0548   0715             _if11_true:
0549   0715             ;; printx32(*(long int *)p); 
0550   0715 FA FF FF      lea d, [bp + -1] ; $p
0551   0718 2A            mov b, [d]
0552   0719 74            mov d, b
0553   071A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0554   071D FD 39         mov c, b ; And place it into C
0555   071F 2A            mov b, [d] ; Lower Word in B
0556   0720 FD 79         mov g, b
0557   0722 28            mov b, c
0558   0723 FD AB         swp b
0559   0725 D8            push b
0560   0726 FD 27         mov b, g
0561   0728 FD AB         swp b
0562   072A D8            push b
0563   072B 07 83 0A      call printx32
0564   072E 51 04 00      add sp, 4
0565   0731 0A 40 07      jmp _if11_exit
0566   0734             _if11_else:
0567   0734             ;; err("Unexpected format in printf."); 
0568   0734 26 F0 28      mov b, __s29 ; "Unexpected format in printf."
0569   0737 FD AB         swp b
0570   0739 D8            push b
0571   073A 07 71 0A      call err
0572   073D 51 02 00      add sp, 2
0573   0740             _if11_exit:
0574   0740             _if10_exit:
0575   0740             _if9_exit:
0576   0740             ;; p = p + 4; 
0577   0740 FA FF FF      lea d, [bp + -1] ; $p
0578   0743 DA            push d
0579   0744 FA FF FF      lea d, [bp + -1] ; $p
0580   0747 2A            mov b, [d]
0581   0748             ; START TERMS
0582   0748 D7            push a
0583   0749 11            mov a, b
0584   074A 26 04 00      mov b, $4
0585   074D 56            add b, a
0586   074E E4            pop a
0587   074F             ; END TERMS
0588   074F E7            pop d
0589   0750 FD 43         mov [d], b
0590   0752             ;; break; 
0591   0752 0A 05 08      jmp _switch8_exit ; case break
0592   0755             _switch8_case2:
0593   0755             _switch8_case3:
0594   0755             ;; print_signed(*(int*)p); 
0595   0755 FA FF FF      lea d, [bp + -1] ; $p
0596   0758 2A            mov b, [d]
0597   0759 74            mov d, b
0598   075A 2A            mov b, [d]
0599   075B FD AB         swp b
0600   075D D8            push b
0601   075E 07 0A 0C      call print_signed
0602   0761 51 02 00      add sp, 2
0603   0764             ;; p = p + 2; 
0604   0764 FA FF FF      lea d, [bp + -1] ; $p
0605   0767 DA            push d
0606   0768 FA FF FF      lea d, [bp + -1] ; $p
0607   076B 2A            mov b, [d]
0608   076C             ; START TERMS
0609   076C D7            push a
0610   076D 11            mov a, b
0611   076E 26 02 00      mov b, $2
0612   0771 56            add b, a
0613   0772 E4            pop a
0614   0773             ; END TERMS
0615   0773 E7            pop d
0616   0774 FD 43         mov [d], b
0617   0776             ;; break; 
0618   0776 0A 05 08      jmp _switch8_exit ; case break
0619   0779             _switch8_case4:
0620   0779             ;; print_unsigned(*(unsigned int*)p); 
0621   0779 FA FF FF      lea d, [bp + -1] ; $p
0622   077C 2A            mov b, [d]
0623   077D 74            mov d, b
0624   077E 2A            mov b, [d]
0625   077F FD AB         swp b
0626   0781 D8            push b
0627   0782 07 2B 12      call print_unsigned
0628   0785 51 02 00      add sp, 2
0629   0788             ;; p = p + 2; 
0630   0788 FA FF FF      lea d, [bp + -1] ; $p
0631   078B DA            push d
0632   078C FA FF FF      lea d, [bp + -1] ; $p
0633   078F 2A            mov b, [d]
0634   0790             ; START TERMS
0635   0790 D7            push a
0636   0791 11            mov a, b
0637   0792 26 02 00      mov b, $2
0638   0795 56            add b, a
0639   0796 E4            pop a
0640   0797             ; END TERMS
0641   0797 E7            pop d
0642   0798 FD 43         mov [d], b
0643   079A             ;; break; 
0644   079A 0A 05 08      jmp _switch8_exit ; case break
0645   079D             _switch8_case5:
0646   079D             
0647   079D             ; --- BEGIN INLINE ASM BLOCK
0648   079D FA FF FF      lea d, [bp + -1] ; $p
0649   07A0 FD 2A         mov d, [d]
0650   07A2 2A            mov b, [d]
0651   07A3 07 2E 16      call print_u16x
0652   07A6             ; --- END INLINE ASM BLOCK
0653   07A6             
0654   07A6             ;; p = p + 2; 
0655   07A6 FA FF FF      lea d, [bp + -1] ; $p
0656   07A9 DA            push d
0657   07AA FA FF FF      lea d, [bp + -1] ; $p
0658   07AD 2A            mov b, [d]
0659   07AE             ; START TERMS
0660   07AE D7            push a
0661   07AF 11            mov a, b
0662   07B0 26 02 00      mov b, $2
0663   07B3 56            add b, a
0664   07B4 E4            pop a
0665   07B5             ; END TERMS
0666   07B5 E7            pop d
0667   07B6 FD 43         mov [d], b
0668   07B8             ;; break; 
0669   07B8 0A 05 08      jmp _switch8_exit ; case break
0670   07BB             _switch8_case6:
0671   07BB             
0672   07BB             ; --- BEGIN INLINE ASM BLOCK
0673   07BB FA FF FF      lea d, [bp + -1] ; $p
0674   07BE FD 2A         mov d, [d]
0675   07C0 1E            mov al, [d]
0676   07C1 23            mov ah, al
0677   07C2 07 8C 14      call _putchar
0678   07C5             ; --- END INLINE ASM BLOCK
0679   07C5             
0680   07C5             ;; p = p + 2; 
0681   07C5 FA FF FF      lea d, [bp + -1] ; $p
0682   07C8 DA            push d
0683   07C9 FA FF FF      lea d, [bp + -1] ; $p
0684   07CC 2A            mov b, [d]
0685   07CD             ; START TERMS
0686   07CD D7            push a
0687   07CE 11            mov a, b
0688   07CF 26 02 00      mov b, $2
0689   07D2 56            add b, a
0690   07D3 E4            pop a
0691   07D4             ; END TERMS
0692   07D4 E7            pop d
0693   07D5 FD 43         mov [d], b
0694   07D7             ;; break; 
0695   07D7 0A 05 08      jmp _switch8_exit ; case break
0696   07DA             _switch8_case7:
0697   07DA             
0698   07DA             ; --- BEGIN INLINE ASM BLOCK
0699   07DA FA FF FF      lea d, [bp + -1] ; $p
0700   07DD FD 2A         mov d, [d]
0701   07DF FD 2A         mov d, [d]
0702   07E1 07 D6 15      call _puts
0703   07E4             ; --- END INLINE ASM BLOCK
0704   07E4             
0705   07E4             ;; p = p + 2; 
0706   07E4 FA FF FF      lea d, [bp + -1] ; $p
0707   07E7 DA            push d
0708   07E8 FA FF FF      lea d, [bp + -1] ; $p
0709   07EB 2A            mov b, [d]
0710   07EC             ; START TERMS
0711   07EC D7            push a
0712   07ED 11            mov a, b
0713   07EE 26 02 00      mov b, $2
0714   07F1 56            add b, a
0715   07F2 E4            pop a
0716   07F3             ; END TERMS
0717   07F3 E7            pop d
0718   07F4 FD 43         mov [d], b
0719   07F6             ;; break; 
0720   07F6 0A 05 08      jmp _switch8_exit ; case break
0721   07F9             _switch8_default:
0722   07F9             ;; print("Error: Unknown argument type.\n"); 
0723   07F9 26 0D 29      mov b, __s30 ; "Error: Unknown argument type.\n"
0724   07FC FD AB         swp b
0725   07FE D8            push b
0726   07FF 07 43 13      call print
0727   0802 51 02 00      add sp, 2
0728   0805             _switch8_exit:
0729   0805             ;; format_p++; 
0730   0805 FA FD FF      lea d, [bp + -3] ; $format_p
0731   0808 2A            mov b, [d]
0732   0809 D8            push b
0733   080A FD 77         inc b
0734   080C FA FD FF      lea d, [bp + -3] ; $format_p
0735   080F FD 43         mov [d], b
0736   0811 E5            pop b
0737   0812 0A 31 08      jmp _if7_exit
0738   0815             _if7_else:
0739   0815             ;; putchar(*format_p); 
0740   0815 FA FD FF      lea d, [bp + -3] ; $format_p
0741   0818 2A            mov b, [d]
0742   0819 74            mov d, b
0743   081A 32            mov bl, [d]
0744   081B A7 00         mov bh, 0
0745   081D DD            push bl
0746   081E 07 FB 12      call putchar
0747   0821 51 01 00      add sp, 1
0748   0824             ;; format_p++; 
0749   0824 FA FD FF      lea d, [bp + -3] ; $format_p
0750   0827 2A            mov b, [d]
0751   0828 D8            push b
0752   0829 FD 77         inc b
0753   082B FA FD FF      lea d, [bp + -3] ; $format_p
0754   082E FD 43         mov [d], b
0755   0830 E5            pop b
0756   0831             _if7_exit:
0757   0831             _if6_exit:
0758   0831             _for5_update:
0759   0831 0A F4 05      jmp _for5_cond
0760   0834             _for5_exit:
0761   0834 F9            leave
0762   0835 09            ret
0763   0836             
0764   0836             scanf:
0765   0836 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0766   0839             ; $p 
0767   0839             ; $format_p 
0768   0839             ; $c 
0769   0839             ; $i 
0770   0839             ; $input_string 
0771   0839 52 07 02      sub sp, 519
0772   083C             ;; format_p = format; 
0773   083C FA FD FF      lea d, [bp + -3] ; $format_p
0774   083F DA            push d
0775   0840 FA 05 00      lea d, [bp + 5] ; $format
0776   0843 2A            mov b, [d]
0777   0844 E7            pop d
0778   0845 FD 43         mov [d], b
0779   0847             ;; p = &format + 2; 
0780   0847 FA FF FF      lea d, [bp + -1] ; $p
0781   084A DA            push d
0782   084B FA 05 00      lea d, [bp + 5] ; $format
0783   084E 2D            mov b, d
0784   084F             ; START TERMS
0785   084F D7            push a
0786   0850 11            mov a, b
0787   0851 26 02 00      mov b, $2
0788   0854 56            add b, a
0789   0855 E4            pop a
0790   0856             ; END TERMS
0791   0856 E7            pop d
0792   0857 FD 43         mov [d], b
0793   0859             ;; for(;;){ 
0794   0859             _for12_init:
0795   0859             _for12_cond:
0796   0859             _for12_block:
0797   0859             ;; if(!*format_p) break; 
0798   0859             _if13_cond:
0799   0859 FA FD FF      lea d, [bp + -3] ; $format_p
0800   085C 2A            mov b, [d]
0801   085D 74            mov d, b
0802   085E 32            mov bl, [d]
0803   085F A7 00         mov bh, 0
0804   0861 C0 00 00      cmp b, 0
0805   0864 FD 71         seq ; !
0806   0866 C0 00 00      cmp b, 0
0807   0869 C6 72 08      je _if13_else
0808   086C             _if13_true:
0809   086C             ;; break; 
0810   086C 0A 6F 0A      jmp _for12_exit ; for break
0811   086F 0A 6C 0A      jmp _if13_exit
0812   0872             _if13_else:
0813   0872             ;; if(*format_p == '%'){ 
0814   0872             _if14_cond:
0815   0872 FA FD FF      lea d, [bp + -3] ; $format_p
0816   0875 2A            mov b, [d]
0817   0876 74            mov d, b
0818   0877 32            mov bl, [d]
0819   0878 A7 00         mov bh, 0
0820   087A             ; START RELATIONAL
0821   087A D7            push a
0822   087B 11            mov a, b
0823   087C 26 25 00      mov b, $25
0824   087F B0            cmp a, b
0825   0880 FD 71         seq ; ==
0826   0882 E4            pop a
0827   0883             ; END RELATIONAL
0828   0883 C0 00 00      cmp b, 0
0829   0886 C6 50 0A      je _if14_else
0830   0889             _if14_true:
0831   0889             ;; format_p++; 
0832   0889 FA FD FF      lea d, [bp + -3] ; $format_p
0833   088C 2A            mov b, [d]
0834   088D D8            push b
0835   088E FD 77         inc b
0836   0890 FA FD FF      lea d, [bp + -3] ; $format_p
0837   0893 FD 43         mov [d], b
0838   0895 E5            pop b
0839   0896             ;; switch(*format_p){ 
0840   0896             _switch15_expr:
0841   0896 FA FD FF      lea d, [bp + -3] ; $format_p
0842   0899 2A            mov b, [d]
0843   089A 74            mov d, b
0844   089B 32            mov bl, [d]
0845   089C A7 00         mov bh, 0
0846   089E             _switch15_comparisons:
0847   089E C1 6C         cmp bl, $6c
0848   08A0 C6 CC 08      je _switch15_case0
0849   08A3 C1 4C         cmp bl, $4c
0850   08A5 C6 CC 08      je _switch15_case1
0851   08A8 C1 64         cmp bl, $64
0852   08AA C6 5E 09      je _switch15_case2
0853   08AD C1 69         cmp bl, $69
0854   08AF C6 5E 09      je _switch15_case3
0855   08B2 C1 75         cmp bl, $75
0856   08B4 C6 8B 09      je _switch15_case4
0857   08B7 C1 78         cmp bl, $78
0858   08B9 C6 B8 09      je _switch15_case5
0859   08BC C1 63         cmp bl, $63
0860   08BE C6 CD 09      je _switch15_case6
0861   08C1 C1 73         cmp bl, $73
0862   08C3 C6 FC 09      je _switch15_case7
0863   08C6 0A 34 0A      jmp _switch15_default
0864   08C9 0A 40 0A      jmp _switch15_exit
0865   08CC             _switch15_case0:
0866   08CC             _switch15_case1:
0867   08CC             ;; format_p++; 
0868   08CC FA FD FF      lea d, [bp + -3] ; $format_p
0869   08CF 2A            mov b, [d]
0870   08D0 D8            push b
0871   08D1 FD 77         inc b
0872   08D3 FA FD FF      lea d, [bp + -3] ; $format_p
0873   08D6 FD 43         mov [d], b
0874   08D8 E5            pop b
0875   08D9             ;; if(*format_p == 'd' || *format_p == 'i'); 
0876   08D9             _if16_cond:
0877   08D9 FA FD FF      lea d, [bp + -3] ; $format_p
0878   08DC 2A            mov b, [d]
0879   08DD 74            mov d, b
0880   08DE 32            mov bl, [d]
0881   08DF A7 00         mov bh, 0
0882   08E1             ; START RELATIONAL
0883   08E1 D7            push a
0884   08E2 11            mov a, b
0885   08E3 26 64 00      mov b, $64
0886   08E6 B0            cmp a, b
0887   08E7 FD 71         seq ; ==
0888   08E9 E4            pop a
0889   08EA             ; END RELATIONAL
0890   08EA D7            push a
0891   08EB 11            mov a, b
0892   08EC FA FD FF      lea d, [bp + -3] ; $format_p
0893   08EF 2A            mov b, [d]
0894   08F0 74            mov d, b
0895   08F1 32            mov bl, [d]
0896   08F2 A7 00         mov bh, 0
0897   08F4             ; START RELATIONAL
0898   08F4 D7            push a
0899   08F5 11            mov a, b
0900   08F6 26 69 00      mov b, $69
0901   08F9 B0            cmp a, b
0902   08FA FD 71         seq ; ==
0903   08FC E4            pop a
0904   08FD             ; END RELATIONAL
0905   08FD FD A8         sor a, b ; ||
0906   08FF E4            pop a
0907   0900 C0 00 00      cmp b, 0
0908   0903 C6 09 09      je _if16_else
0909   0906             _if16_true:
0910   0906             ;; ; 
0911   0906 0A 49 09      jmp _if16_exit
0912   0909             _if16_else:
0913   0909             ;; if(*format_p == 'u'); 
0914   0909             _if17_cond:
0915   0909 FA FD FF      lea d, [bp + -3] ; $format_p
0916   090C 2A            mov b, [d]
0917   090D 74            mov d, b
0918   090E 32            mov bl, [d]
0919   090F A7 00         mov bh, 0
0920   0911             ; START RELATIONAL
0921   0911 D7            push a
0922   0912 11            mov a, b
0923   0913 26 75 00      mov b, $75
0924   0916 B0            cmp a, b
0925   0917 FD 71         seq ; ==
0926   0919 E4            pop a
0927   091A             ; END RELATIONAL
0928   091A C0 00 00      cmp b, 0
0929   091D C6 23 09      je _if17_else
0930   0920             _if17_true:
0931   0920             ;; ; 
0932   0920 0A 49 09      jmp _if17_exit
0933   0923             _if17_else:
0934   0923             ;; if(*format_p == 'x'); 
0935   0923             _if18_cond:
0936   0923 FA FD FF      lea d, [bp + -3] ; $format_p
0937   0926 2A            mov b, [d]
0938   0927 74            mov d, b
0939   0928 32            mov bl, [d]
0940   0929 A7 00         mov bh, 0
0941   092B             ; START RELATIONAL
0942   092B D7            push a
0943   092C 11            mov a, b
0944   092D 26 78 00      mov b, $78
0945   0930 B0            cmp a, b
0946   0931 FD 71         seq ; ==
0947   0933 E4            pop a
0948   0934             ; END RELATIONAL
0949   0934 C0 00 00      cmp b, 0
0950   0937 C6 3D 09      je _if18_else
0951   093A             _if18_true:
0952   093A             ;; ; 
0953   093A 0A 49 09      jmp _if18_exit
0954   093D             _if18_else:
0955   093D             ;; err("Unexpected format in printf."); 
0956   093D 26 F0 28      mov b, __s29 ; "Unexpected format in printf."
0957   0940 FD AB         swp b
0958   0942 D8            push b
0959   0943 07 71 0A      call err
0960   0946 51 02 00      add sp, 2
0961   0949             _if18_exit:
0962   0949             _if17_exit:
0963   0949             _if16_exit:
0964   0949             ;; p = p + 4; 
0965   0949 FA FF FF      lea d, [bp + -1] ; $p
0966   094C DA            push d
0967   094D FA FF FF      lea d, [bp + -1] ; $p
0968   0950 2A            mov b, [d]
0969   0951             ; START TERMS
0970   0951 D7            push a
0971   0952 11            mov a, b
0972   0953 26 04 00      mov b, $4
0973   0956 56            add b, a
0974   0957 E4            pop a
0975   0958             ; END TERMS
0976   0958 E7            pop d
0977   0959 FD 43         mov [d], b
0978   095B             ;; break; 
0979   095B 0A 40 0A      jmp _switch15_exit ; case break
0980   095E             _switch15_case2:
0981   095E             _switch15_case3:
0982   095E             ;; i = scann(); 
0983   095E FA FA FF      lea d, [bp + -6] ; $i
0984   0961 DA            push d
0985   0962 07 1E 13      call scann
0986   0965 E7            pop d
0987   0966 FD 43         mov [d], b
0988   0968             ;; **(int **)p = i; 
0989   0968 FA FF FF      lea d, [bp + -1] ; $p
0990   096B 2A            mov b, [d]
0991   096C 74            mov d, b
0992   096D 2A            mov b, [d]
0993   096E D8            push b
0994   096F FA FA FF      lea d, [bp + -6] ; $i
0995   0972 2A            mov b, [d]
0996   0973 E7            pop d
0997   0974 FD 43         mov [d], b
0998   0976             ;; p = p + 2; 
0999   0976 FA FF FF      lea d, [bp + -1] ; $p
1000   0979 DA            push d
1001   097A FA FF FF      lea d, [bp + -1] ; $p
1002   097D 2A            mov b, [d]
1003   097E             ; START TERMS
1004   097E D7            push a
1005   097F 11            mov a, b
1006   0980 26 02 00      mov b, $2
1007   0983 56            add b, a
1008   0984 E4            pop a
1009   0985             ; END TERMS
1010   0985 E7            pop d
1011   0986 FD 43         mov [d], b
1012   0988             ;; break; 
1013   0988 0A 40 0A      jmp _switch15_exit ; case break
1014   098B             _switch15_case4:
1015   098B             ;; i = scann(); 
1016   098B FA FA FF      lea d, [bp + -6] ; $i
1017   098E DA            push d
1018   098F 07 1E 13      call scann
1019   0992 E7            pop d
1020   0993 FD 43         mov [d], b
1021   0995             ;; **(int **)p = i; 
1022   0995 FA FF FF      lea d, [bp + -1] ; $p
1023   0998 2A            mov b, [d]
1024   0999 74            mov d, b
1025   099A 2A            mov b, [d]
1026   099B D8            push b
1027   099C FA FA FF      lea d, [bp + -6] ; $i
1028   099F 2A            mov b, [d]
1029   09A0 E7            pop d
1030   09A1 FD 43         mov [d], b
1031   09A3             ;; p = p + 2; 
1032   09A3 FA FF FF      lea d, [bp + -1] ; $p
1033   09A6 DA            push d
1034   09A7 FA FF FF      lea d, [bp + -1] ; $p
1035   09AA 2A            mov b, [d]
1036   09AB             ; START TERMS
1037   09AB D7            push a
1038   09AC 11            mov a, b
1039   09AD 26 02 00      mov b, $2
1040   09B0 56            add b, a
1041   09B1 E4            pop a
1042   09B2             ; END TERMS
1043   09B2 E7            pop d
1044   09B3 FD 43         mov [d], b
1045   09B5             ;; break; 
1046   09B5 0A 40 0A      jmp _switch15_exit ; case break
1047   09B8             _switch15_case5:
1048   09B8             ;; p = p + 2; 
1049   09B8 FA FF FF      lea d, [bp + -1] ; $p
1050   09BB DA            push d
1051   09BC FA FF FF      lea d, [bp + -1] ; $p
1052   09BF 2A            mov b, [d]
1053   09C0             ; START TERMS
1054   09C0 D7            push a
1055   09C1 11            mov a, b
1056   09C2 26 02 00      mov b, $2
1057   09C5 56            add b, a
1058   09C6 E4            pop a
1059   09C7             ; END TERMS
1060   09C7 E7            pop d
1061   09C8 FD 43         mov [d], b
1062   09CA             ;; break; 
1063   09CA 0A 40 0A      jmp _switch15_exit ; case break
1064   09CD             _switch15_case6:
1065   09CD             ;; c = getchar(); 
1066   09CD FA FC FF      lea d, [bp + -4] ; $c
1067   09D0 DA            push d
1068   09D1 07 08 13      call getchar
1069   09D4 E7            pop d
1070   09D5 FD 3E         mov [d], bl
1071   09D7             ;; **(char **)p = c; 
1072   09D7 FA FF FF      lea d, [bp + -1] ; $p
1073   09DA 2A            mov b, [d]
1074   09DB 74            mov d, b
1075   09DC 2A            mov b, [d]
1076   09DD D8            push b
1077   09DE FA FC FF      lea d, [bp + -4] ; $c
1078   09E1 32            mov bl, [d]
1079   09E2 A7 00         mov bh, 0
1080   09E4 E7            pop d
1081   09E5 FD 43         mov [d], b
1082   09E7             ;; p = p + 2; 
1083   09E7 FA FF FF      lea d, [bp + -1] ; $p
1084   09EA DA            push d
1085   09EB FA FF FF      lea d, [bp + -1] ; $p
1086   09EE 2A            mov b, [d]
1087   09EF             ; START TERMS
1088   09EF D7            push a
1089   09F0 11            mov a, b
1090   09F1 26 02 00      mov b, $2
1091   09F4 56            add b, a
1092   09F5 E4            pop a
1093   09F6             ; END TERMS
1094   09F6 E7            pop d
1095   09F7 FD 43         mov [d], b
1096   09F9             ;; break; 
1097   09F9 0A 40 0A      jmp _switch15_exit ; case break
1098   09FC             _switch15_case7:
1099   09FC             ;; gets(input_string); 
1100   09FC FA FA FD      lea d, [bp + -518] ; $input_string
1101   09FF 2D            mov b, d
1102   0A00 FD AB         swp b
1103   0A02 D8            push b
1104   0A03 07 F0 0B      call gets
1105   0A06 51 02 00      add sp, 2
1106   0A09             ;; strcpy(*(char **)p, input_string); 
1107   0A09 FA FA FD      lea d, [bp + -518] ; $input_string
1108   0A0C 2D            mov b, d
1109   0A0D FD AB         swp b
1110   0A0F D8            push b
1111   0A10 FA FF FF      lea d, [bp + -1] ; $p
1112   0A13 2A            mov b, [d]
1113   0A14 74            mov d, b
1114   0A15 2A            mov b, [d]
1115   0A16 FD AB         swp b
1116   0A18 D8            push b
1117   0A19 07 14 04      call strcpy
1118   0A1C 51 04 00      add sp, 4
1119   0A1F             ;; p = p + 2; 
1120   0A1F FA FF FF      lea d, [bp + -1] ; $p
1121   0A22 DA            push d
1122   0A23 FA FF FF      lea d, [bp + -1] ; $p
1123   0A26 2A            mov b, [d]
1124   0A27             ; START TERMS
1125   0A27 D7            push a
1126   0A28 11            mov a, b
1127   0A29 26 02 00      mov b, $2
1128   0A2C 56            add b, a
1129   0A2D E4            pop a
1130   0A2E             ; END TERMS
1131   0A2E E7            pop d
1132   0A2F FD 43         mov [d], b
1133   0A31             ;; break; 
1134   0A31 0A 40 0A      jmp _switch15_exit ; case break
1135   0A34             _switch15_default:
1136   0A34             ;; print("Error: Unknown argument type.\n"); 
1137   0A34 26 0D 29      mov b, __s30 ; "Error: Unknown argument type.\n"
1138   0A37 FD AB         swp b
1139   0A39 D8            push b
1140   0A3A 07 43 13      call print
1141   0A3D 51 02 00      add sp, 2
1142   0A40             _switch15_exit:
1143   0A40             ;; format_p++; 
1144   0A40 FA FD FF      lea d, [bp + -3] ; $format_p
1145   0A43 2A            mov b, [d]
1146   0A44 D8            push b
1147   0A45 FD 77         inc b
1148   0A47 FA FD FF      lea d, [bp + -3] ; $format_p
1149   0A4A FD 43         mov [d], b
1150   0A4C E5            pop b
1151   0A4D 0A 6C 0A      jmp _if14_exit
1152   0A50             _if14_else:
1153   0A50             ;; putchar(*format_p); 
1154   0A50 FA FD FF      lea d, [bp + -3] ; $format_p
1155   0A53 2A            mov b, [d]
1156   0A54 74            mov d, b
1157   0A55 32            mov bl, [d]
1158   0A56 A7 00         mov bh, 0
1159   0A58 DD            push bl
1160   0A59 07 FB 12      call putchar
1161   0A5C 51 01 00      add sp, 1
1162   0A5F             ;; format_p++; 
1163   0A5F FA FD FF      lea d, [bp + -3] ; $format_p
1164   0A62 2A            mov b, [d]
1165   0A63 D8            push b
1166   0A64 FD 77         inc b
1167   0A66 FA FD FF      lea d, [bp + -3] ; $format_p
1168   0A69 FD 43         mov [d], b
1169   0A6B E5            pop b
1170   0A6C             _if14_exit:
1171   0A6C             _if13_exit:
1172   0A6C             _for12_update:
1173   0A6C 0A 59 08      jmp _for12_cond
1174   0A6F             _for12_exit:
1175   0A6F F9            leave
1176   0A70 09            ret
1177   0A71             
1178   0A71             err:
1179   0A71 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1180   0A74             ;; print(e); 
1181   0A74 FA 05 00      lea d, [bp + 5] ; $e
1182   0A77 2A            mov b, [d]
1183   0A78 FD AB         swp b
1184   0A7A D8            push b
1185   0A7B 07 43 13      call print
1186   0A7E 51 02 00      add sp, 2
1187   0A81 F9            leave
1188   0A82 09            ret
1189   0A83             
1190   0A83             printx32:
1191   0A83 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1192   0A86             
1193   0A86             ; --- BEGIN INLINE ASM BLOCK
1194   0A86 FA 05 00      lea d, [bp + 5] ; $hex
1195   0A89 2B 02 00      mov b, [d+2]
1196   0A8C 07 2E 16      call print_u16x
1197   0A8F 2A            mov b, [d]
1198   0A90 07 2E 16      call print_u16x
1199   0A93             ; --- END INLINE ASM BLOCK
1200   0A93             
1201   0A93 F9            leave
1202   0A94 09            ret
1203   0A95             
1204   0A95             printx16:
1205   0A95 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1206   0A98             
1207   0A98             ; --- BEGIN INLINE ASM BLOCK
1208   0A98 FA 05 00      lea d, [bp + 5] ; $hex
1209   0A9B 2A            mov b, [d]
1210   0A9C 07 2E 16      call print_u16x
1211   0A9F             ; --- END INLINE ASM BLOCK
1212   0A9F             
1213   0A9F F9            leave
1214   0AA0 09            ret
1215   0AA1             
1216   0AA1             printx8:
1217   0AA1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1218   0AA4             
1219   0AA4             ; --- BEGIN INLINE ASM BLOCK
1220   0AA4 FA 05 00      lea d, [bp + 5] ; $hex
1221   0AA7 32            mov bl, [d]
1222   0AA8 07 72 16      call print_u8x
1223   0AAB             ; --- END INLINE ASM BLOCK
1224   0AAB             
1225   0AAB F9            leave
1226   0AAC 09            ret
1227   0AAD             
1228   0AAD             hex_str_to_int:
1229   0AAD F8 00 00      enter 0 ; (push bp; mov bp, sp)
1230   0AB0             ; $value 
1231   0AB0 10 00 00      mov a, $0
1232   0AB3 45 FF FF      mov [bp + -1], a
1233   0AB6             ; $i 
1234   0AB6             ; $hex_char 
1235   0AB6             ; $len 
1236   0AB6 52 07 00      sub sp, 7
1237   0AB9             ;; len = strlen(hex_string); 
1238   0AB9 FA FA FF      lea d, [bp + -6] ; $len
1239   0ABC DA            push d
1240   0ABD FA 05 00      lea d, [bp + 5] ; $hex_string
1241   0AC0 2A            mov b, [d]
1242   0AC1 FD AB         swp b
1243   0AC3 D8            push b
1244   0AC4 07 88 05      call strlen
1245   0AC7 51 02 00      add sp, 2
1246   0ACA E7            pop d
1247   0ACB FD 43         mov [d], b
1248   0ACD             ;; for (i = 0; i < len; i++) { 
1249   0ACD             _for19_init:
1250   0ACD FA FD FF      lea d, [bp + -3] ; $i
1251   0AD0 DA            push d
1252   0AD1 26 00 00      mov b, $0
1253   0AD4 E7            pop d
1254   0AD5 FD 43         mov [d], b
1255   0AD7             _for19_cond:
1256   0AD7 FA FD FF      lea d, [bp + -3] ; $i
1257   0ADA 2A            mov b, [d]
1258   0ADB             ; START RELATIONAL
1259   0ADB D7            push a
1260   0ADC 11            mov a, b
1261   0ADD FA FA FF      lea d, [bp + -6] ; $len
1262   0AE0 2A            mov b, [d]
1263   0AE1 B0            cmp a, b
1264   0AE2 FD 73         slt ; < (signed)
1265   0AE4 E4            pop a
1266   0AE5             ; END RELATIONAL
1267   0AE5 C0 00 00      cmp b, 0
1268   0AE8 C6 EA 0B      je _for19_exit
1269   0AEB             _for19_block:
1270   0AEB             ;; hex_char = hex_string[i]; 
1271   0AEB FA FC FF      lea d, [bp + -4] ; $hex_char
1272   0AEE DA            push d
1273   0AEF FA 05 00      lea d, [bp + 5] ; $hex_string
1274   0AF2 FD 2A         mov d, [d]
1275   0AF4 D7            push a
1276   0AF5 DA            push d
1277   0AF6 FA FD FF      lea d, [bp + -3] ; $i
1278   0AF9 2A            mov b, [d]
1279   0AFA E7            pop d
1280   0AFB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1281   0AFF E4            pop a
1282   0B00 32            mov bl, [d]
1283   0B01 A7 00         mov bh, 0
1284   0B03 E7            pop d
1285   0B04 FD 3E         mov [d], bl
1286   0B06             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1287   0B06             _if20_cond:
1288   0B06 FA FC FF      lea d, [bp + -4] ; $hex_char
1289   0B09 32            mov bl, [d]
1290   0B0A A7 00         mov bh, 0
1291   0B0C             ; START RELATIONAL
1292   0B0C D7            push a
1293   0B0D 11            mov a, b
1294   0B0E 26 61 00      mov b, $61
1295   0B11 B0            cmp a, b
1296   0B12 FD 80         sge ; >=
1297   0B14 E4            pop a
1298   0B15             ; END RELATIONAL
1299   0B15 D7            push a
1300   0B16 11            mov a, b
1301   0B17 FA FC FF      lea d, [bp + -4] ; $hex_char
1302   0B1A 32            mov bl, [d]
1303   0B1B A7 00         mov bh, 0
1304   0B1D             ; START RELATIONAL
1305   0B1D D7            push a
1306   0B1E 11            mov a, b
1307   0B1F 26 66 00      mov b, $66
1308   0B22 B0            cmp a, b
1309   0B23 FD 73         slt ; <= (signed)
1310   0B25 E4            pop a
1311   0B26             ; END RELATIONAL
1312   0B26 FD A7         sand a, b
1313   0B28 E4            pop a
1314   0B29 C0 00 00      cmp b, 0
1315   0B2C C6 5D 0B      je _if20_else
1316   0B2F             _if20_true:
1317   0B2F             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1318   0B2F FA FF FF      lea d, [bp + -1] ; $value
1319   0B32 DA            push d
1320   0B33 FA FF FF      lea d, [bp + -1] ; $value
1321   0B36 2A            mov b, [d]
1322   0B37             ; START FACTORS
1323   0B37 D7            push a
1324   0B38 11            mov a, b
1325   0B39 26 10 00      mov b, $10
1326   0B3C AC            mul a, b ; *
1327   0B3D 11            mov a, b
1328   0B3E 27            mov b, a
1329   0B3F E4            pop a
1330   0B40             ; END FACTORS
1331   0B40             ; START TERMS
1332   0B40 D7            push a
1333   0B41 11            mov a, b
1334   0B42 FA FC FF      lea d, [bp + -4] ; $hex_char
1335   0B45 32            mov bl, [d]
1336   0B46 A7 00         mov bh, 0
1337   0B48             ; START TERMS
1338   0B48 D7            push a
1339   0B49 11            mov a, b
1340   0B4A 26 61 00      mov b, $61
1341   0B4D 60            sub a, b
1342   0B4E 27            mov b, a
1343   0B4F 11            mov a, b
1344   0B50 26 0A 00      mov b, $a
1345   0B53 56            add b, a
1346   0B54 E4            pop a
1347   0B55             ; END TERMS
1348   0B55 56            add b, a
1349   0B56 E4            pop a
1350   0B57             ; END TERMS
1351   0B57 E7            pop d
1352   0B58 FD 43         mov [d], b
1353   0B5A 0A DA 0B      jmp _if20_exit
1354   0B5D             _if20_else:
1355   0B5D             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1356   0B5D             _if21_cond:
1357   0B5D FA FC FF      lea d, [bp + -4] ; $hex_char
1358   0B60 32            mov bl, [d]
1359   0B61 A7 00         mov bh, 0
1360   0B63             ; START RELATIONAL
1361   0B63 D7            push a
1362   0B64 11            mov a, b
1363   0B65 26 41 00      mov b, $41
1364   0B68 B0            cmp a, b
1365   0B69 FD 80         sge ; >=
1366   0B6B E4            pop a
1367   0B6C             ; END RELATIONAL
1368   0B6C D7            push a
1369   0B6D 11            mov a, b
1370   0B6E FA FC FF      lea d, [bp + -4] ; $hex_char
1371   0B71 32            mov bl, [d]
1372   0B72 A7 00         mov bh, 0
1373   0B74             ; START RELATIONAL
1374   0B74 D7            push a
1375   0B75 11            mov a, b
1376   0B76 26 46 00      mov b, $46
1377   0B79 B0            cmp a, b
1378   0B7A FD 73         slt ; <= (signed)
1379   0B7C E4            pop a
1380   0B7D             ; END RELATIONAL
1381   0B7D FD A7         sand a, b
1382   0B7F E4            pop a
1383   0B80 C0 00 00      cmp b, 0
1384   0B83 C6 B4 0B      je _if21_else
1385   0B86             _if21_true:
1386   0B86             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1387   0B86 FA FF FF      lea d, [bp + -1] ; $value
1388   0B89 DA            push d
1389   0B8A FA FF FF      lea d, [bp + -1] ; $value
1390   0B8D 2A            mov b, [d]
1391   0B8E             ; START FACTORS
1392   0B8E D7            push a
1393   0B8F 11            mov a, b
1394   0B90 26 10 00      mov b, $10
1395   0B93 AC            mul a, b ; *
1396   0B94 11            mov a, b
1397   0B95 27            mov b, a
1398   0B96 E4            pop a
1399   0B97             ; END FACTORS
1400   0B97             ; START TERMS
1401   0B97 D7            push a
1402   0B98 11            mov a, b
1403   0B99 FA FC FF      lea d, [bp + -4] ; $hex_char
1404   0B9C 32            mov bl, [d]
1405   0B9D A7 00         mov bh, 0
1406   0B9F             ; START TERMS
1407   0B9F D7            push a
1408   0BA0 11            mov a, b
1409   0BA1 26 41 00      mov b, $41
1410   0BA4 60            sub a, b
1411   0BA5 27            mov b, a
1412   0BA6 11            mov a, b
1413   0BA7 26 0A 00      mov b, $a
1414   0BAA 56            add b, a
1415   0BAB E4            pop a
1416   0BAC             ; END TERMS
1417   0BAC 56            add b, a
1418   0BAD E4            pop a
1419   0BAE             ; END TERMS
1420   0BAE E7            pop d
1421   0BAF FD 43         mov [d], b
1422   0BB1 0A DA 0B      jmp _if21_exit
1423   0BB4             _if21_else:
1424   0BB4             ;; value = (value * 16) + (hex_char - '0'); 
1425   0BB4 FA FF FF      lea d, [bp + -1] ; $value
1426   0BB7 DA            push d
1427   0BB8 FA FF FF      lea d, [bp + -1] ; $value
1428   0BBB 2A            mov b, [d]
1429   0BBC             ; START FACTORS
1430   0BBC D7            push a
1431   0BBD 11            mov a, b
1432   0BBE 26 10 00      mov b, $10
1433   0BC1 AC            mul a, b ; *
1434   0BC2 11            mov a, b
1435   0BC3 27            mov b, a
1436   0BC4 E4            pop a
1437   0BC5             ; END FACTORS
1438   0BC5             ; START TERMS
1439   0BC5 D7            push a
1440   0BC6 11            mov a, b
1441   0BC7 FA FC FF      lea d, [bp + -4] ; $hex_char
1442   0BCA 32            mov bl, [d]
1443   0BCB A7 00         mov bh, 0
1444   0BCD             ; START TERMS
1445   0BCD D7            push a
1446   0BCE 11            mov a, b
1447   0BCF 26 30 00      mov b, $30
1448   0BD2 60            sub a, b
1449   0BD3 27            mov b, a
1450   0BD4 E4            pop a
1451   0BD5             ; END TERMS
1452   0BD5 56            add b, a
1453   0BD6 E4            pop a
1454   0BD7             ; END TERMS
1455   0BD7 E7            pop d
1456   0BD8 FD 43         mov [d], b
1457   0BDA             _if21_exit:
1458   0BDA             _if20_exit:
1459   0BDA             _for19_update:
1460   0BDA FA FD FF      lea d, [bp + -3] ; $i
1461   0BDD 2A            mov b, [d]
1462   0BDE D8            push b
1463   0BDF FD 77         inc b
1464   0BE1 FA FD FF      lea d, [bp + -3] ; $i
1465   0BE4 FD 43         mov [d], b
1466   0BE6 E5            pop b
1467   0BE7 0A D7 0A      jmp _for19_cond
1468   0BEA             _for19_exit:
1469   0BEA             ;; return value; 
1470   0BEA FA FF FF      lea d, [bp + -1] ; $value
1471   0BED 2A            mov b, [d]
1472   0BEE F9            leave
1473   0BEF 09            ret
1474   0BF0             
1475   0BF0             gets:
1476   0BF0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1477   0BF3             
1478   0BF3             ; --- BEGIN INLINE ASM BLOCK
1479   0BF3 FA 05 00      lea d, [bp + 5] ; $s
1480   0BF6 15            mov a, [d]
1481   0BF7 3C            mov d, a
1482   0BF8 07 93 14      call _gets
1483   0BFB             ; --- END INLINE ASM BLOCK
1484   0BFB             
1485   0BFB             ;; return strlen(s); 
1486   0BFB FA 05 00      lea d, [bp + 5] ; $s
1487   0BFE 2A            mov b, [d]
1488   0BFF FD AB         swp b
1489   0C01 D8            push b
1490   0C02 07 88 05      call strlen
1491   0C05 51 02 00      add sp, 2
1492   0C08 F9            leave
1493   0C09 09            ret
1494   0C0A             
1495   0C0A             print_signed:
1496   0C0A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1497   0C0D             ; $digits 
1498   0C0D             ; $i 
1499   0C0D 10 00 00      mov a, $0
1500   0C10 45 FA FF      mov [bp + -6], a
1501   0C13 52 07 00      sub sp, 7
1502   0C16             ;; if (num < 0) { 
1503   0C16             _if22_cond:
1504   0C16 FA 05 00      lea d, [bp + 5] ; $num
1505   0C19 2A            mov b, [d]
1506   0C1A             ; START RELATIONAL
1507   0C1A D7            push a
1508   0C1B 11            mov a, b
1509   0C1C 26 00 00      mov b, $0
1510   0C1F B0            cmp a, b
1511   0C20 FD 73         slt ; < (signed)
1512   0C22 E4            pop a
1513   0C23             ; END RELATIONAL
1514   0C23 C0 00 00      cmp b, 0
1515   0C26 C6 43 0C      je _if22_else
1516   0C29             _if22_true:
1517   0C29             ;; putchar('-'); 
1518   0C29 26 2D 00      mov b, $2d
1519   0C2C DD            push bl
1520   0C2D 07 FB 12      call putchar
1521   0C30 51 01 00      add sp, 1
1522   0C33             ;; num = -num; 
1523   0C33 FA 05 00      lea d, [bp + 5] ; $num
1524   0C36 DA            push d
1525   0C37 FA 05 00      lea d, [bp + 5] ; $num
1526   0C3A 2A            mov b, [d]
1527   0C3B FD 97         neg b
1528   0C3D E7            pop d
1529   0C3E FD 43         mov [d], b
1530   0C40 0A 65 0C      jmp _if22_exit
1531   0C43             _if22_else:
1532   0C43             ;; if (num == 0) { 
1533   0C43             _if23_cond:
1534   0C43 FA 05 00      lea d, [bp + 5] ; $num
1535   0C46 2A            mov b, [d]
1536   0C47             ; START RELATIONAL
1537   0C47 D7            push a
1538   0C48 11            mov a, b
1539   0C49 26 00 00      mov b, $0
1540   0C4C B0            cmp a, b
1541   0C4D FD 71         seq ; ==
1542   0C4F E4            pop a
1543   0C50             ; END RELATIONAL
1544   0C50 C0 00 00      cmp b, 0
1545   0C53 C6 65 0C      je _if23_exit
1546   0C56             _if23_true:
1547   0C56             ;; putchar('0'); 
1548   0C56 26 30 00      mov b, $30
1549   0C59 DD            push bl
1550   0C5A 07 FB 12      call putchar
1551   0C5D 51 01 00      add sp, 1
1552   0C60             ;; return; 
1553   0C60 F9            leave
1554   0C61 09            ret
1555   0C62 0A 65 0C      jmp _if23_exit
1556   0C65             _if23_exit:
1557   0C65             _if22_exit:
1558   0C65             ;; while (num > 0) { 
1559   0C65             _while24_cond:
1560   0C65 FA 05 00      lea d, [bp + 5] ; $num
1561   0C68 2A            mov b, [d]
1562   0C69             ; START RELATIONAL
1563   0C69 D7            push a
1564   0C6A 11            mov a, b
1565   0C6B 26 00 00      mov b, $0
1566   0C6E B0            cmp a, b
1567   0C6F FD 7F         sgt ; >
1568   0C71 E4            pop a
1569   0C72             ; END RELATIONAL
1570   0C72 C0 00 00      cmp b, 0
1571   0C75 C6 BF 0C      je _while24_exit
1572   0C78             _while24_block:
1573   0C78             ;; digits[i] = '0' + (num % 10); 
1574   0C78 FA FC FF      lea d, [bp + -4] ; $digits
1575   0C7B D7            push a
1576   0C7C DA            push d
1577   0C7D FA FA FF      lea d, [bp + -6] ; $i
1578   0C80 2A            mov b, [d]
1579   0C81 E7            pop d
1580   0C82 5A            add d, b
1581   0C83 E4            pop a
1582   0C84 DA            push d
1583   0C85 26 30 00      mov b, $30
1584   0C88             ; START TERMS
1585   0C88 D7            push a
1586   0C89 11            mov a, b
1587   0C8A FA 05 00      lea d, [bp + 5] ; $num
1588   0C8D 2A            mov b, [d]
1589   0C8E             ; START FACTORS
1590   0C8E D7            push a
1591   0C8F 11            mov a, b
1592   0C90 26 0A 00      mov b, $a
1593   0C93 AE            div a, b ; 
1594   0C94 11            mov a, b
1595   0C95 27            mov b, a
1596   0C96 E4            pop a
1597   0C97             ; END FACTORS
1598   0C97 56            add b, a
1599   0C98 E4            pop a
1600   0C99             ; END TERMS
1601   0C99 E7            pop d
1602   0C9A FD 3E         mov [d], bl
1603   0C9C             ;; num = num / 10; 
1604   0C9C FA 05 00      lea d, [bp + 5] ; $num
1605   0C9F DA            push d
1606   0CA0 FA 05 00      lea d, [bp + 5] ; $num
1607   0CA3 2A            mov b, [d]
1608   0CA4             ; START FACTORS
1609   0CA4 D7            push a
1610   0CA5 11            mov a, b
1611   0CA6 26 0A 00      mov b, $a
1612   0CA9 AE            div a, b
1613   0CAA 27            mov b, a
1614   0CAB E4            pop a
1615   0CAC             ; END FACTORS
1616   0CAC E7            pop d
1617   0CAD FD 43         mov [d], b
1618   0CAF             ;; i++; 
1619   0CAF FA FA FF      lea d, [bp + -6] ; $i
1620   0CB2 2A            mov b, [d]
1621   0CB3 D8            push b
1622   0CB4 FD 77         inc b
1623   0CB6 FA FA FF      lea d, [bp + -6] ; $i
1624   0CB9 FD 43         mov [d], b
1625   0CBB E5            pop b
1626   0CBC 0A 65 0C      jmp _while24_cond
1627   0CBF             _while24_exit:
1628   0CBF             ;; while (i > 0) { 
1629   0CBF             _while25_cond:
1630   0CBF FA FA FF      lea d, [bp + -6] ; $i
1631   0CC2 2A            mov b, [d]
1632   0CC3             ; START RELATIONAL
1633   0CC3 D7            push a
1634   0CC4 11            mov a, b
1635   0CC5 26 00 00      mov b, $0
1636   0CC8 B0            cmp a, b
1637   0CC9 FD 7F         sgt ; >
1638   0CCB E4            pop a
1639   0CCC             ; END RELATIONAL
1640   0CCC C0 00 00      cmp b, 0
1641   0CCF C6 F8 0C      je _while25_exit
1642   0CD2             _while25_block:
1643   0CD2             ;; i--; 
1644   0CD2 FA FA FF      lea d, [bp + -6] ; $i
1645   0CD5 2A            mov b, [d]
1646   0CD6 D8            push b
1647   0CD7 FD 7D         dec b
1648   0CD9 FA FA FF      lea d, [bp + -6] ; $i
1649   0CDC FD 43         mov [d], b
1650   0CDE E5            pop b
1651   0CDF             ;; putchar(digits[i]); 
1652   0CDF FA FC FF      lea d, [bp + -4] ; $digits
1653   0CE2 D7            push a
1654   0CE3 DA            push d
1655   0CE4 FA FA FF      lea d, [bp + -6] ; $i
1656   0CE7 2A            mov b, [d]
1657   0CE8 E7            pop d
1658   0CE9 5A            add d, b
1659   0CEA E4            pop a
1660   0CEB 32            mov bl, [d]
1661   0CEC A7 00         mov bh, 0
1662   0CEE DD            push bl
1663   0CEF 07 FB 12      call putchar
1664   0CF2 51 01 00      add sp, 1
1665   0CF5 0A BF 0C      jmp _while25_cond
1666   0CF8             _while25_exit:
1667   0CF8 F9            leave
1668   0CF9 09            ret
1669   0CFA             
1670   0CFA             print_signed_long:
1671   0CFA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1672   0CFD             ; $digits 
1673   0CFD             ; $i 
1674   0CFD 10 00 00      mov a, $0
1675   0D00 45 F5 FF      mov [bp + -11], a
1676   0D03 52 0C 00      sub sp, 12
1677   0D06             ;; if (num < 0) { 
1678   0D06             _if26_cond:
1679   0D06 FA 05 00      lea d, [bp + 5] ; $num
1680   0D09 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1681   0D0C FD 39         mov c, b ; And place it into C
1682   0D0E 2A            mov b, [d] ; Lower Word in B
1683   0D0F             ; START RELATIONAL
1684   0D0F D7            push a
1685   0D10 FD D8         push g
1686   0D12 11            mov a, b
1687   0D13 FD 7A         mov g, c
1688   0D15 26 00 00      mov b, $0
1689   0D18 38 00 00      mov c, 0
1690   0D1B FD AF 00 00   cmp32 ga, cb
1690   0D1F 00 00 00 00 
1690   0D23 00 00 00 00 
1690   0D27 00 00 00 00 
1690   0D2B 00 00 00 00 
1690   0D2F 00 00 00 00 
1690   0D33 00 00 00 00 
1690   0D37 00 00 00 00 
1690   0D3B 00 00 00 00 
1690   0D3F 00 00 00 00 
1690   0D43 00 00 00 00 
1690   0D47 00 00 00 00 
1690   0D4B 00 00 00 00 
1690   0D4F 00 00 00 00 
1690   0D53 00 00 00 00 
1690   0D57 00 00 00 00 
1690   0D5B 00 00 00 00 
1690   0D5F 00 00 00 00 
1690   0D63 00 00 00 00 
1690   0D67 00 00 00 00 
1690   0D6B 00 00 00 00 
1690   0D6F 00 00 00 00 
1690   0D73 00 00 00 00 
1690   0D77 00 00 00 00 
1690   0D7B 00 00 00 00 
1690   0D7F 00 00 00 00 
1690   0D83 00 00 00 00 
1690   0D87 00 00 00 00 
1690   0D8B 00 00 00 00 
1690   0D8F 00 00 00 00 
1690   0D93 00 00 00 00 
1690   0D97 00 00 00 00 
1690   0D9B 00 00 00 00 
1690   0D9F 00 00 00 00 
1690   0DA3 00 00 00 00 
1690   0DA7 00 00 00 00 
1690   0DAB 00 00 00 00 
1690   0DAF 00 00 00 00 
1690   0DB3 00 00 00 00 
1690   0DB7 00 00 00 00 
1690   0DBB 00 00 00 00 
1690   0DBF 00 00 00 00 
1690   0DC3 00 00 00 00 
1690   0DC7 00 00 00 00 
1690   0DCB 00 00 00 00 
1690   0DCF 00 00 00 00 
1690   0DD3 00 00 00 00 
1690   0DD7 00 00 00 00 
1690   0DDB 00 00 00 00 
1690   0DDF 00 00 00 00 
1690   0DE3 00 00 00 00 
1690   0DE7 00 00 00 00 
1690   0DEB 00 00 00 00 
1690   0DEF 00 00 00 00 
1690   0DF3 00 00 00 00 
1690   0DF7 00 00 00 00 
1690   0DFB 00 00 00 00 
1690   0DFF 00 00 00 00 
1690   0E03 00 00 00 00 
1690   0E07 00 00 00 00 
1690   0E0B 00 00 00 00 
1690   0E0F 00 00 00 00 
1690   0E13 00 00 00 00 
1690   0E17 00 00 00 00 
1690   0E1B 00 
1691   0E1C FD 73         slt ; <
1692   0E1E FD F1         pop g
1693   0E20 E4            pop a
1694   0E21             ; END RELATIONAL
1695   0E21 C0 00 00      cmp b, 0
1696   0E24 C6 4B 0E      je _if26_else
1697   0E27             _if26_true:
1698   0E27             ;; putchar('-'); 
1699   0E27 26 2D 00      mov b, $2d
1700   0E2A DD            push bl
1701   0E2B 07 FB 12      call putchar
1702   0E2E 51 01 00      add sp, 1
1703   0E31             ;; num = -num; 
1704   0E31 FA 05 00      lea d, [bp + 5] ; $num
1705   0E34 DA            push d
1706   0E35 FA 05 00      lea d, [bp + 5] ; $num
1707   0E38 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1708   0E3B FD 39         mov c, b ; And place it into C
1709   0E3D 2A            mov b, [d] ; Lower Word in B
1710   0E3E FD 97         neg b
1711   0E40 E7            pop d
1712   0E41 FD 43         mov [d], b
1713   0E43 28            mov b, c
1714   0E44 FD 44 02 00   mov [d + 2], b
1715   0E48 0A 7B 0F      jmp _if26_exit
1716   0E4B             _if26_else:
1717   0E4B             ;; if (num == 0) { 
1718   0E4B             _if27_cond:
1719   0E4B FA 05 00      lea d, [bp + 5] ; $num
1720   0E4E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1721   0E51 FD 39         mov c, b ; And place it into C
1722   0E53 2A            mov b, [d] ; Lower Word in B
1723   0E54             ; START RELATIONAL
1724   0E54 D7            push a
1725   0E55 FD D8         push g
1726   0E57 11            mov a, b
1727   0E58 FD 7A         mov g, c
1728   0E5A 26 00 00      mov b, $0
1729   0E5D 38 00 00      mov c, 0
1730   0E60 FD AF 00 00   cmp32 ga, cb
1730   0E64 00 00 00 00 
1730   0E68 00 00 00 00 
1730   0E6C 00 00 00 00 
1730   0E70 00 00 00 00 
1730   0E74 00 00 00 00 
1730   0E78 00 00 00 00 
1730   0E7C 00 00 00 00 
1730   0E80 00 00 00 00 
1730   0E84 00 00 00 00 
1730   0E88 00 00 00 00 
1730   0E8C 00 00 00 00 
1730   0E90 00 00 00 00 
1730   0E94 00 00 00 00 
1730   0E98 00 00 00 00 
1730   0E9C 00 00 00 00 
1730   0EA0 00 00 00 00 
1730   0EA4 00 00 00 00 
1730   0EA8 00 00 00 00 
1730   0EAC 00 00 00 00 
1730   0EB0 00 00 00 00 
1730   0EB4 00 00 00 00 
1730   0EB8 00 00 00 00 
1730   0EBC 00 00 00 00 
1730   0EC0 00 00 00 00 
1730   0EC4 00 00 00 00 
1730   0EC8 00 00 00 00 
1730   0ECC 00 00 00 00 
1730   0ED0 00 00 00 00 
1730   0ED4 00 00 00 00 
1730   0ED8 00 00 00 00 
1730   0EDC 00 00 00 00 
1730   0EE0 00 00 00 00 
1730   0EE4 00 00 00 00 
1730   0EE8 00 00 00 00 
1730   0EEC 00 00 00 00 
1730   0EF0 00 00 00 00 
1730   0EF4 00 00 00 00 
1730   0EF8 00 00 00 00 
1730   0EFC 00 00 00 00 
1730   0F00 00 00 00 00 
1730   0F04 00 00 00 00 
1730   0F08 00 00 00 00 
1730   0F0C 00 00 00 00 
1730   0F10 00 00 00 00 
1730   0F14 00 00 00 00 
1730   0F18 00 00 00 00 
1730   0F1C 00 00 00 00 
1730   0F20 00 00 00 00 
1730   0F24 00 00 00 00 
1730   0F28 00 00 00 00 
1730   0F2C 00 00 00 00 
1730   0F30 00 00 00 00 
1730   0F34 00 00 00 00 
1730   0F38 00 00 00 00 
1730   0F3C 00 00 00 00 
1730   0F40 00 00 00 00 
1730   0F44 00 00 00 00 
1730   0F48 00 00 00 00 
1730   0F4C 00 00 00 00 
1730   0F50 00 00 00 00 
1730   0F54 00 00 00 00 
1730   0F58 00 00 00 00 
1730   0F5C 00 00 00 00 
1730   0F60 00 
1731   0F61 FD 71         seq ; ==
1732   0F63 FD F1         pop g
1733   0F65 E4            pop a
1734   0F66             ; END RELATIONAL
1735   0F66 C0 00 00      cmp b, 0
1736   0F69 C6 7B 0F      je _if27_exit
1737   0F6C             _if27_true:
1738   0F6C             ;; putchar('0'); 
1739   0F6C 26 30 00      mov b, $30
1740   0F6F DD            push bl
1741   0F70 07 FB 12      call putchar
1742   0F73 51 01 00      add sp, 1
1743   0F76             ;; return; 
1744   0F76 F9            leave
1745   0F77 09            ret
1746   0F78 0A 7B 0F      jmp _if27_exit
1747   0F7B             _if27_exit:
1748   0F7B             _if26_exit:
1749   0F7B             ;; while (num > 0) { 
1750   0F7B             _while28_cond:
1751   0F7B FA 05 00      lea d, [bp + 5] ; $num
1752   0F7E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1753   0F81 FD 39         mov c, b ; And place it into C
1754   0F83 2A            mov b, [d] ; Lower Word in B
1755   0F84             ; START RELATIONAL
1756   0F84 D7            push a
1757   0F85 FD D8         push g
1758   0F87 11            mov a, b
1759   0F88 FD 7A         mov g, c
1760   0F8A 26 00 00      mov b, $0
1761   0F8D 38 00 00      mov c, 0
1762   0F90 FD 7F         sgt
1763   0F92 FD F1         pop g
1764   0F94 E4            pop a
1765   0F95             ; END RELATIONAL
1766   0F95 C0 00 00      cmp b, 0
1767   0F98 C6 F8 0F      je _while28_exit
1768   0F9B             _while28_block:
1769   0F9B             ;; digits[i] = '0' + (num % 10); 
1770   0F9B FA F7 FF      lea d, [bp + -9] ; $digits
1771   0F9E D7            push a
1772   0F9F DA            push d
1773   0FA0 FA F5 FF      lea d, [bp + -11] ; $i
1774   0FA3 2A            mov b, [d]
1775   0FA4 E7            pop d
1776   0FA5 5A            add d, b
1777   0FA6 E4            pop a
1778   0FA7 DA            push d
1779   0FA8 26 30 00      mov b, $30
1780   0FAB             ; START TERMS
1781   0FAB D7            push a
1782   0FAC 11            mov a, b
1783   0FAD FA 05 00      lea d, [bp + 5] ; $num
1784   0FB0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1785   0FB3 FD 39         mov c, b ; And place it into C
1786   0FB5 2A            mov b, [d] ; Lower Word in B
1787   0FB6             ; START FACTORS
1788   0FB6 D7            push a
1789   0FB7 11            mov a, b
1790   0FB8 26 0A 00      mov b, $a
1791   0FBB AE            div a, b ; 
1792   0FBC 11            mov a, b
1793   0FBD 27            mov b, a
1794   0FBE E4            pop a
1795   0FBF             ; END FACTORS
1796   0FBF 54            add a, b
1797   0FC0 D7            push a
1798   0FC1 FD 12         mov a, g
1799   0FC3 28            mov b, c
1800   0FC4 5C            adc a, b
1801   0FC5 39            mov c, a
1802   0FC6 E5            pop b
1803   0FC7 E4            pop a
1804   0FC8             ; END TERMS
1805   0FC8 E7            pop d
1806   0FC9 FD 3E         mov [d], bl
1807   0FCB             ;; num = num / 10; 
1808   0FCB FA 05 00      lea d, [bp + 5] ; $num
1809   0FCE DA            push d
1810   0FCF FA 05 00      lea d, [bp + 5] ; $num
1811   0FD2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1812   0FD5 FD 39         mov c, b ; And place it into C
1813   0FD7 2A            mov b, [d] ; Lower Word in B
1814   0FD8             ; START FACTORS
1815   0FD8 D7            push a
1816   0FD9 11            mov a, b
1817   0FDA 26 0A 00      mov b, $a
1818   0FDD AE            div a, b
1819   0FDE 27            mov b, a
1820   0FDF E4            pop a
1821   0FE0             ; END FACTORS
1822   0FE0 E7            pop d
1823   0FE1 FD 43         mov [d], b
1824   0FE3 28            mov b, c
1825   0FE4 FD 44 02 00   mov [d + 2], b
1826   0FE8             ;; i++; 
1827   0FE8 FA F5 FF      lea d, [bp + -11] ; $i
1828   0FEB 2A            mov b, [d]
1829   0FEC D8            push b
1830   0FED FD 77         inc b
1831   0FEF FA F5 FF      lea d, [bp + -11] ; $i
1832   0FF2 FD 43         mov [d], b
1833   0FF4 E5            pop b
1834   0FF5 0A 7B 0F      jmp _while28_cond
1835   0FF8             _while28_exit:
1836   0FF8             ;; while (i > 0) { 
1837   0FF8             _while29_cond:
1838   0FF8 FA F5 FF      lea d, [bp + -11] ; $i
1839   0FFB 2A            mov b, [d]
1840   0FFC             ; START RELATIONAL
1841   0FFC D7            push a
1842   0FFD 11            mov a, b
1843   0FFE 26 00 00      mov b, $0
1844   1001 B0            cmp a, b
1845   1002 FD 7F         sgt ; >
1846   1004 E4            pop a
1847   1005             ; END RELATIONAL
1848   1005 C0 00 00      cmp b, 0
1849   1008 C6 31 10      je _while29_exit
1850   100B             _while29_block:
1851   100B             ;; i--; 
1852   100B FA F5 FF      lea d, [bp + -11] ; $i
1853   100E 2A            mov b, [d]
1854   100F D8            push b
1855   1010 FD 7D         dec b
1856   1012 FA F5 FF      lea d, [bp + -11] ; $i
1857   1015 FD 43         mov [d], b
1858   1017 E5            pop b
1859   1018             ;; putchar(digits[i]); 
1860   1018 FA F7 FF      lea d, [bp + -9] ; $digits
1861   101B D7            push a
1862   101C DA            push d
1863   101D FA F5 FF      lea d, [bp + -11] ; $i
1864   1020 2A            mov b, [d]
1865   1021 E7            pop d
1866   1022 5A            add d, b
1867   1023 E4            pop a
1868   1024 32            mov bl, [d]
1869   1025 A7 00         mov bh, 0
1870   1027 DD            push bl
1871   1028 07 FB 12      call putchar
1872   102B 51 01 00      add sp, 1
1873   102E 0A F8 0F      jmp _while29_cond
1874   1031             _while29_exit:
1875   1031 F9            leave
1876   1032 09            ret
1877   1033             
1878   1033             print_unsigned_long:
1879   1033 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1880   1036             ; $digits 
1881   1036             ; $i 
1882   1036 52 0C 00      sub sp, 12
1883   1039             ;; i = 0; 
1884   1039 FA F5 FF      lea d, [bp + -11] ; $i
1885   103C DA            push d
1886   103D 26 00 00      mov b, $0
1887   1040 E7            pop d
1888   1041 FD 43         mov [d], b
1889   1043             ;; if(num == 0){ 
1890   1043             _if30_cond:
1891   1043 FA 05 00      lea d, [bp + 5] ; $num
1892   1046 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1893   1049 FD 39         mov c, b ; And place it into C
1894   104B 2A            mov b, [d] ; Lower Word in B
1895   104C             ; START RELATIONAL
1896   104C D7            push a
1897   104D FD D8         push g
1898   104F 11            mov a, b
1899   1050 FD 7A         mov g, c
1900   1052 26 00 00      mov b, $0
1901   1055 38 00 00      mov c, 0
1902   1058 FD AF 00 00   cmp32 ga, cb
1902   105C 00 00 00 00 
1902   1060 00 00 00 00 
1902   1064 00 00 00 00 
1902   1068 00 00 00 00 
1902   106C 00 00 00 00 
1902   1070 00 00 00 00 
1902   1074 00 00 00 00 
1902   1078 00 00 00 00 
1902   107C 00 00 00 00 
1902   1080 00 00 00 00 
1902   1084 00 00 00 00 
1902   1088 00 00 00 00 
1902   108C 00 00 00 00 
1902   1090 00 00 00 00 
1902   1094 00 00 00 00 
1902   1098 00 00 00 00 
1902   109C 00 00 00 00 
1902   10A0 00 00 00 00 
1902   10A4 00 00 00 00 
1902   10A8 00 00 00 00 
1902   10AC 00 00 00 00 
1902   10B0 00 00 00 00 
1902   10B4 00 00 00 00 
1902   10B8 00 00 00 00 
1902   10BC 00 00 00 00 
1902   10C0 00 00 00 00 
1902   10C4 00 00 00 00 
1902   10C8 00 00 00 00 
1902   10CC 00 00 00 00 
1902   10D0 00 00 00 00 
1902   10D4 00 00 00 00 
1902   10D8 00 00 00 00 
1902   10DC 00 00 00 00 
1902   10E0 00 00 00 00 
1902   10E4 00 00 00 00 
1902   10E8 00 00 00 00 
1902   10EC 00 00 00 00 
1902   10F0 00 00 00 00 
1902   10F4 00 00 00 00 
1902   10F8 00 00 00 00 
1902   10FC 00 00 00 00 
1902   1100 00 00 00 00 
1902   1104 00 00 00 00 
1902   1108 00 00 00 00 
1902   110C 00 00 00 00 
1902   1110 00 00 00 00 
1902   1114 00 00 00 00 
1902   1118 00 00 00 00 
1902   111C 00 00 00 00 
1902   1120 00 00 00 00 
1902   1124 00 00 00 00 
1902   1128 00 00 00 00 
1902   112C 00 00 00 00 
1902   1130 00 00 00 00 
1902   1134 00 00 00 00 
1902   1138 00 00 00 00 
1902   113C 00 00 00 00 
1902   1140 00 00 00 00 
1902   1144 00 00 00 00 
1902   1148 00 00 00 00 
1902   114C 00 00 00 00 
1902   1150 00 00 00 00 
1902   1154 00 00 00 00 
1902   1158 00 
1903   1159 FD 71         seq ; ==
1904   115B FD F1         pop g
1905   115D E4            pop a
1906   115E             ; END RELATIONAL
1907   115E C0 00 00      cmp b, 0
1908   1161 C6 73 11      je _if30_exit
1909   1164             _if30_true:
1910   1164             ;; putchar('0'); 
1911   1164 26 30 00      mov b, $30
1912   1167 DD            push bl
1913   1168 07 FB 12      call putchar
1914   116B 51 01 00      add sp, 1
1915   116E             ;; return; 
1916   116E F9            leave
1917   116F 09            ret
1918   1170 0A 73 11      jmp _if30_exit
1919   1173             _if30_exit:
1920   1173             ;; while (num > 0) { 
1921   1173             _while31_cond:
1922   1173 FA 05 00      lea d, [bp + 5] ; $num
1923   1176 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1924   1179 FD 39         mov c, b ; And place it into C
1925   117B 2A            mov b, [d] ; Lower Word in B
1926   117C             ; START RELATIONAL
1927   117C D7            push a
1928   117D FD D8         push g
1929   117F 11            mov a, b
1930   1180 FD 7A         mov g, c
1931   1182 26 00 00      mov b, $0
1932   1185 38 00 00      mov c, 0
1933   1188 FD 81         sgu
1934   118A FD F1         pop g
1935   118C E4            pop a
1936   118D             ; END RELATIONAL
1937   118D C0 00 00      cmp b, 0
1938   1190 C6 F0 11      je _while31_exit
1939   1193             _while31_block:
1940   1193             ;; digits[i] = '0' + (num % 10); 
1941   1193 FA F7 FF      lea d, [bp + -9] ; $digits
1942   1196 D7            push a
1943   1197 DA            push d
1944   1198 FA F5 FF      lea d, [bp + -11] ; $i
1945   119B 2A            mov b, [d]
1946   119C E7            pop d
1947   119D 5A            add d, b
1948   119E E4            pop a
1949   119F DA            push d
1950   11A0 26 30 00      mov b, $30
1951   11A3             ; START TERMS
1952   11A3 D7            push a
1953   11A4 11            mov a, b
1954   11A5 FA 05 00      lea d, [bp + 5] ; $num
1955   11A8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1956   11AB FD 39         mov c, b ; And place it into C
1957   11AD 2A            mov b, [d] ; Lower Word in B
1958   11AE             ; START FACTORS
1959   11AE D7            push a
1960   11AF 11            mov a, b
1961   11B0 26 0A 00      mov b, $a
1962   11B3 AE            div a, b ; 
1963   11B4 11            mov a, b
1964   11B5 27            mov b, a
1965   11B6 E4            pop a
1966   11B7             ; END FACTORS
1967   11B7 54            add a, b
1968   11B8 D7            push a
1969   11B9 FD 12         mov a, g
1970   11BB 28            mov b, c
1971   11BC 5C            adc a, b
1972   11BD 39            mov c, a
1973   11BE E5            pop b
1974   11BF E4            pop a
1975   11C0             ; END TERMS
1976   11C0 E7            pop d
1977   11C1 FD 3E         mov [d], bl
1978   11C3             ;; num = num / 10; 
1979   11C3 FA 05 00      lea d, [bp + 5] ; $num
1980   11C6 DA            push d
1981   11C7 FA 05 00      lea d, [bp + 5] ; $num
1982   11CA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1983   11CD FD 39         mov c, b ; And place it into C
1984   11CF 2A            mov b, [d] ; Lower Word in B
1985   11D0             ; START FACTORS
1986   11D0 D7            push a
1987   11D1 11            mov a, b
1988   11D2 26 0A 00      mov b, $a
1989   11D5 AE            div a, b
1990   11D6 27            mov b, a
1991   11D7 E4            pop a
1992   11D8             ; END FACTORS
1993   11D8 E7            pop d
1994   11D9 FD 43         mov [d], b
1995   11DB 28            mov b, c
1996   11DC FD 44 02 00   mov [d + 2], b
1997   11E0             ;; i++; 
1998   11E0 FA F5 FF      lea d, [bp + -11] ; $i
1999   11E3 2A            mov b, [d]
2000   11E4 D8            push b
2001   11E5 FD 77         inc b
2002   11E7 FA F5 FF      lea d, [bp + -11] ; $i
2003   11EA FD 43         mov [d], b
2004   11EC E5            pop b
2005   11ED 0A 73 11      jmp _while31_cond
2006   11F0             _while31_exit:
2007   11F0             ;; while (i > 0) { 
2008   11F0             _while32_cond:
2009   11F0 FA F5 FF      lea d, [bp + -11] ; $i
2010   11F3 2A            mov b, [d]
2011   11F4             ; START RELATIONAL
2012   11F4 D7            push a
2013   11F5 11            mov a, b
2014   11F6 26 00 00      mov b, $0
2015   11F9 B0            cmp a, b
2016   11FA FD 7F         sgt ; >
2017   11FC E4            pop a
2018   11FD             ; END RELATIONAL
2019   11FD C0 00 00      cmp b, 0
2020   1200 C6 29 12      je _while32_exit
2021   1203             _while32_block:
2022   1203             ;; i--; 
2023   1203 FA F5 FF      lea d, [bp + -11] ; $i
2024   1206 2A            mov b, [d]
2025   1207 D8            push b
2026   1208 FD 7D         dec b
2027   120A FA F5 FF      lea d, [bp + -11] ; $i
2028   120D FD 43         mov [d], b
2029   120F E5            pop b
2030   1210             ;; putchar(digits[i]); 
2031   1210 FA F7 FF      lea d, [bp + -9] ; $digits
2032   1213 D7            push a
2033   1214 DA            push d
2034   1215 FA F5 FF      lea d, [bp + -11] ; $i
2035   1218 2A            mov b, [d]
2036   1219 E7            pop d
2037   121A 5A            add d, b
2038   121B E4            pop a
2039   121C 32            mov bl, [d]
2040   121D A7 00         mov bh, 0
2041   121F DD            push bl
2042   1220 07 FB 12      call putchar
2043   1223 51 01 00      add sp, 1
2044   1226 0A F0 11      jmp _while32_cond
2045   1229             _while32_exit:
2046   1229 F9            leave
2047   122A 09            ret
2048   122B             
2049   122B             print_unsigned:
2050   122B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2051   122E             ; $digits 
2052   122E             ; $i 
2053   122E 52 07 00      sub sp, 7
2054   1231             ;; i = 0; 
2055   1231 FA FA FF      lea d, [bp + -6] ; $i
2056   1234 DA            push d
2057   1235 26 00 00      mov b, $0
2058   1238 E7            pop d
2059   1239 FD 43         mov [d], b
2060   123B             ;; if(num == 0){ 
2061   123B             _if33_cond:
2062   123B FA 05 00      lea d, [bp + 5] ; $num
2063   123E 2A            mov b, [d]
2064   123F             ; START RELATIONAL
2065   123F D7            push a
2066   1240 11            mov a, b
2067   1241 26 00 00      mov b, $0
2068   1244 B0            cmp a, b
2069   1245 FD 71         seq ; ==
2070   1247 E4            pop a
2071   1248             ; END RELATIONAL
2072   1248 C0 00 00      cmp b, 0
2073   124B C6 5D 12      je _if33_exit
2074   124E             _if33_true:
2075   124E             ;; putchar('0'); 
2076   124E 26 30 00      mov b, $30
2077   1251 DD            push bl
2078   1252 07 FB 12      call putchar
2079   1255 51 01 00      add sp, 1
2080   1258             ;; return; 
2081   1258 F9            leave
2082   1259 09            ret
2083   125A 0A 5D 12      jmp _if33_exit
2084   125D             _if33_exit:
2085   125D             ;; while (num > 0) { 
2086   125D             _while34_cond:
2087   125D FA 05 00      lea d, [bp + 5] ; $num
2088   1260 2A            mov b, [d]
2089   1261             ; START RELATIONAL
2090   1261 D7            push a
2091   1262 11            mov a, b
2092   1263 26 00 00      mov b, $0
2093   1266 B0            cmp a, b
2094   1267 FD 81         sgu ; > (unsigned)
2095   1269 E4            pop a
2096   126A             ; END RELATIONAL
2097   126A C0 00 00      cmp b, 0
2098   126D C6 B7 12      je _while34_exit
2099   1270             _while34_block:
2100   1270             ;; digits[i] = '0' + (num % 10); 
2101   1270 FA FC FF      lea d, [bp + -4] ; $digits
2102   1273 D7            push a
2103   1274 DA            push d
2104   1275 FA FA FF      lea d, [bp + -6] ; $i
2105   1278 2A            mov b, [d]
2106   1279 E7            pop d
2107   127A 5A            add d, b
2108   127B E4            pop a
2109   127C DA            push d
2110   127D 26 30 00      mov b, $30
2111   1280             ; START TERMS
2112   1280 D7            push a
2113   1281 11            mov a, b
2114   1282 FA 05 00      lea d, [bp + 5] ; $num
2115   1285 2A            mov b, [d]
2116   1286             ; START FACTORS
2117   1286 D7            push a
2118   1287 11            mov a, b
2119   1288 26 0A 00      mov b, $a
2120   128B AE            div a, b ; 
2121   128C 11            mov a, b
2122   128D 27            mov b, a
2123   128E E4            pop a
2124   128F             ; END FACTORS
2125   128F 56            add b, a
2126   1290 E4            pop a
2127   1291             ; END TERMS
2128   1291 E7            pop d
2129   1292 FD 3E         mov [d], bl
2130   1294             ;; num = num / 10; 
2131   1294 FA 05 00      lea d, [bp + 5] ; $num
2132   1297 DA            push d
2133   1298 FA 05 00      lea d, [bp + 5] ; $num
2134   129B 2A            mov b, [d]
2135   129C             ; START FACTORS
2136   129C D7            push a
2137   129D 11            mov a, b
2138   129E 26 0A 00      mov b, $a
2139   12A1 AE            div a, b
2140   12A2 27            mov b, a
2141   12A3 E4            pop a
2142   12A4             ; END FACTORS
2143   12A4 E7            pop d
2144   12A5 FD 43         mov [d], b
2145   12A7             ;; i++; 
2146   12A7 FA FA FF      lea d, [bp + -6] ; $i
2147   12AA 2A            mov b, [d]
2148   12AB D8            push b
2149   12AC FD 77         inc b
2150   12AE FA FA FF      lea d, [bp + -6] ; $i
2151   12B1 FD 43         mov [d], b
2152   12B3 E5            pop b
2153   12B4 0A 5D 12      jmp _while34_cond
2154   12B7             _while34_exit:
2155   12B7             ;; while (i > 0) { 
2156   12B7             _while35_cond:
2157   12B7 FA FA FF      lea d, [bp + -6] ; $i
2158   12BA 2A            mov b, [d]
2159   12BB             ; START RELATIONAL
2160   12BB D7            push a
2161   12BC 11            mov a, b
2162   12BD 26 00 00      mov b, $0
2163   12C0 B0            cmp a, b
2164   12C1 FD 7F         sgt ; >
2165   12C3 E4            pop a
2166   12C4             ; END RELATIONAL
2167   12C4 C0 00 00      cmp b, 0
2168   12C7 C6 F0 12      je _while35_exit
2169   12CA             _while35_block:
2170   12CA             ;; i--; 
2171   12CA FA FA FF      lea d, [bp + -6] ; $i
2172   12CD 2A            mov b, [d]
2173   12CE D8            push b
2174   12CF FD 7D         dec b
2175   12D1 FA FA FF      lea d, [bp + -6] ; $i
2176   12D4 FD 43         mov [d], b
2177   12D6 E5            pop b
2178   12D7             ;; putchar(digits[i]); 
2179   12D7 FA FC FF      lea d, [bp + -4] ; $digits
2180   12DA D7            push a
2181   12DB DA            push d
2182   12DC FA FA FF      lea d, [bp + -6] ; $i
2183   12DF 2A            mov b, [d]
2184   12E0 E7            pop d
2185   12E1 5A            add d, b
2186   12E2 E4            pop a
2187   12E3 32            mov bl, [d]
2188   12E4 A7 00         mov bh, 0
2189   12E6 DD            push bl
2190   12E7 07 FB 12      call putchar
2191   12EA 51 01 00      add sp, 1
2192   12ED 0A B7 12      jmp _while35_cond
2193   12F0             _while35_exit:
2194   12F0 F9            leave
2195   12F1 09            ret
2196   12F2             
2197   12F2             date:
2198   12F2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2199   12F5             
2200   12F5             ; --- BEGIN INLINE ASM BLOCK
2201   12F5 19 00         mov al, 0 
2202   12F7 05 07         syscall sys_datetime
2203   12F9             ; --- END INLINE ASM BLOCK
2204   12F9             
2205   12F9 F9            leave
2206   12FA 09            ret
2207   12FB             
2208   12FB             putchar:
2209   12FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2210   12FE             
2211   12FE             ; --- BEGIN INLINE ASM BLOCK
2212   12FE FA 05 00      lea d, [bp + 5] ; $c
2213   1301 1E            mov al, [d]
2214   1302 23            mov ah, al
2215   1303 07 8C 14      call _putchar
2216   1306             ; --- END INLINE ASM BLOCK
2217   1306             
2218   1306 F9            leave
2219   1307 09            ret
2220   1308             
2221   1308             getchar:
2222   1308 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2223   130B             ; $c 
2224   130B 52 01 00      sub sp, 1
2225   130E             
2226   130E             ; --- BEGIN INLINE ASM BLOCK
2227   130E 07 85 14      call getch
2228   1311 1A            mov al, ah
2229   1312 FA 00 00      lea d, [bp + 0] ; $c
2230   1315 3E            mov [d], al
2231   1316             ; --- END INLINE ASM BLOCK
2232   1316             
2233   1316             ;; return c; 
2234   1316 FA 00 00      lea d, [bp + 0] ; $c
2235   1319 32            mov bl, [d]
2236   131A A7 00         mov bh, 0
2237   131C F9            leave
2238   131D 09            ret
2239   131E             
2240   131E             scann:
2241   131E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2242   1321             ; $m 
2243   1321 52 02 00      sub sp, 2
2244   1324             
2245   1324             ; --- BEGIN INLINE ASM BLOCK
2246   1324 07 D0 16      call scan_u16d
2247   1327 FA FF FF      lea d, [bp + -1] ; $m
2248   132A 43            mov [d], a
2249   132B             ; --- END INLINE ASM BLOCK
2250   132B             
2251   132B             ;; return m; 
2252   132B FA FF FF      lea d, [bp + -1] ; $m
2253   132E 2A            mov b, [d]
2254   132F F9            leave
2255   1330 09            ret
2256   1331             
2257   1331             puts:
2258   1331 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2259   1334             
2260   1334             ; --- BEGIN INLINE ASM BLOCK
2261   1334 FA 05 00      lea d, [bp + 5] ; $s
2262   1337 15            mov a, [d]
2263   1338 3C            mov d, a
2264   1339 07 D6 15      call _puts
2265   133C 10 00 0A      mov a, $0A00
2266   133F 05 03         syscall sys_io
2267   1341             ; --- END INLINE ASM BLOCK
2268   1341             
2269   1341 F9            leave
2270   1342 09            ret
2271   1343             
2272   1343             print:
2273   1343 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2274   1346             
2275   1346             ; --- BEGIN INLINE ASM BLOCK
2276   1346 FA 05 00      lea d, [bp + 5] ; $s
2277   1349 FD 2A         mov d, [d]
2278   134B 07 D6 15      call _puts
2279   134E             ; --- END INLINE ASM BLOCK
2280   134E             
2281   134E F9            leave
2282   134F 09            ret
2283   1350             
2284   1350             getparam:
2285   1350 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2286   1353             ; $data 
2287   1353 52 01 00      sub sp, 1
2288   1356             
2289   1356             ; --- BEGIN INLINE ASM BLOCK
2290   1356 19 04         mov al, 4
2291   1358 FA 05 00      lea d, [bp + 5] ; $address
2292   135B FD 2A         mov d, [d]
2293   135D 05 0C         syscall sys_system
2294   135F FA 00 00      lea d, [bp + 0] ; $data
2295   1362 FD 3E         mov [d], bl
2296   1364             ; --- END INLINE ASM BLOCK
2297   1364             
2298   1364             ;; return data; 
2299   1364 FA 00 00      lea d, [bp + 0] ; $data
2300   1367 32            mov bl, [d]
2301   1368 A7 00         mov bh, 0
2302   136A F9            leave
2303   136B 09            ret
2304   136C             
2305   136C             clear:
2306   136C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2307   136F             ;; print("\033[2J\033[H"); 
2308   136F 26 2C 29      mov b, __s31 ; "\033[2J\033[H"
2309   1372 FD AB         swp b
2310   1374 D8            push b
2311   1375 07 43 13      call print
2312   1378 51 02 00      add sp, 2
2313   137B F9            leave
2314   137C 09            ret
2315   137D             
2316   137D             abs:
2317   137D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2318   1380             ;; return i < 0 ? -i : i; 
2319   1380             _ternary36_cond:
2320   1380 FA 05 00      lea d, [bp + 5] ; $i
2321   1383 2A            mov b, [d]
2322   1384             ; START RELATIONAL
2323   1384 D7            push a
2324   1385 11            mov a, b
2325   1386 26 00 00      mov b, $0
2326   1389 B0            cmp a, b
2327   138A FD 73         slt ; < (signed)
2328   138C E4            pop a
2329   138D             ; END RELATIONAL
2330   138D C0 00 00      cmp b, 0
2331   1390 C6 9C 13      je _ternary36_false
2332   1393             _ternary36_true:
2333   1393 FA 05 00      lea d, [bp + 5] ; $i
2334   1396 2A            mov b, [d]
2335   1397 FD 97         neg b
2336   1399 0A A0 13      jmp _ternary36_exit
2337   139C             _ternary36_false:
2338   139C FA 05 00      lea d, [bp + 5] ; $i
2339   139F 2A            mov b, [d]
2340   13A0             _ternary36_exit:
2341   13A0 F9            leave
2342   13A1 09            ret
2343   13A2             
2344   13A2             include_stdio_asm:
2345   13A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2346   13A5             
2347   13A5             ; --- BEGIN INLINE ASM BLOCK
2348   13A5             .include "lib/asm/stdio.asm"
0001+  13A5             ;-----------------------------------------------------------------------------
0002+  13A5             ; stdio.s
0003+  13A5             ;-----------------------------------------------------------------------------
0004+  13A5             .include "lib/asm/string.asm"
0001++ 13A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 13A5             ; string.s
0003++ 13A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 13A5             
0005++ 13A5             
0006++ 13A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 13A5             ; _strrev
0008++ 13A5             ; reverse a string
0009++ 13A5             ; D = string address
0010++ 13A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 13A5             ; 01234
0012++ 13A5             _strrev:
0013++ 13A5 4B          	pusha
0014++ 13A6 07 EC 13    	call _strlen	; length in C
0015++ 13A9 12          	mov a, c
0016++ 13AA AF 01 00    	cmp a, 1
0017++ 13AD D0 C7 13    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 13B0 7D          	dec a
0019++ 13B1 FD 4E       	mov si, d	; beginning of string
0020++ 13B3 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 13B5 59          	add d, a	; end of string
0022++ 13B6 12          	mov a, c
0023++ 13B7 FD 9B       	shr a		; divide by 2
0024++ 13B9 39          	mov c, a	; C now counts the steps
0025++ 13BA             _strrev_L0:
0026++ 13BA 32          	mov bl, [d]	; save load right-side char into BL
0027++ 13BB F6          	lodsb		; load left-side char into AL; increase SI
0028++ 13BC 3E          	mov [d], al	; store left char into right side
0029++ 13BD 1B          	mov al, bl
0030++ 13BE F7          	stosb		; store right-side char into left-side; increase DI
0031++ 13BF 7E          	dec c
0032++ 13C0 7F          	dec d
0033++ 13C1 C2 00 00    	cmp c, 0
0034++ 13C4 C7 BA 13    	jne _strrev_L0
0035++ 13C7             _strrev_end:
0036++ 13C7 4C          	popa
0037++ 13C8 09          	ret
0038++ 13C9             	
0039++ 13C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 13C9             ; _strchr
0041++ 13C9             ; search string in D for char in AL
0042++ 13C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 13C9             _strchr:
0044++ 13C9             _strchr_L0:
0045++ 13C9 32          	mov bl, [d]
0046++ 13CA C1 00       	cmp bl, 0
0047++ 13CC C6 D7 13    	je _strchr_end
0048++ 13CF BA          	cmp al, bl
0049++ 13D0 C6 D7 13    	je _strchr_end
0050++ 13D3 79          	inc d
0051++ 13D4 0A C9 13    	jmp _strchr_L0
0052++ 13D7             _strchr_end:
0053++ 13D7 1B          	mov al, bl
0054++ 13D8 09          	ret
0055++ 13D9             
0056++ 13D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 13D9             ; _strstr
0058++ 13D9             ; find sub-string
0059++ 13D9             ; str1 in SI
0060++ 13D9             ; str2 in DI
0061++ 13D9             ; SI points to end of source string
0062++ 13D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 13D9             _strstr:
0064++ 13D9 DB          	push al
0065++ 13DA DA          	push d
0066++ 13DB E3          	push di
0067++ 13DC             _strstr_loop:
0068++ 13DC F3          	cmpsb					; compare a byte of the strings
0069++ 13DD C7 E8 13    	jne _strstr_ret
0070++ 13E0 FC 00 00    	lea d, [di + 0]
0071++ 13E3 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 13E5 C7 DC 13    	jne _strstr_loop				; equal chars but not at end
0073++ 13E8             _strstr_ret:
0074++ 13E8 F0          	pop di
0075++ 13E9 E7          	pop d
0076++ 13EA E8          	pop al
0077++ 13EB 09          	ret
0078++ 13EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 13EC             ; length of null terminated string
0080++ 13EC             ; result in C
0081++ 13EC             ; pointer in D
0082++ 13EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 13EC             _strlen:
0084++ 13EC DA          	push d
0085++ 13ED 38 00 00    	mov c, 0
0086++ 13F0             _strlen_L1:
0087++ 13F0 BD 00       	cmp byte [d], 0
0088++ 13F2 C6 FA 13    	je _strlen_ret
0089++ 13F5 79          	inc d
0090++ 13F6 78          	inc c
0091++ 13F7 0A F0 13    	jmp _strlen_L1
0092++ 13FA             _strlen_ret:
0093++ 13FA E7          	pop d
0094++ 13FB 09          	ret
0095++ 13FC             
0096++ 13FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 13FC             ; STRCMP
0098++ 13FC             ; compare two strings
0099++ 13FC             ; str1 in SI
0100++ 13FC             ; str2 in DI
0101++ 13FC             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 13FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 13FC             _strcmp:
0104++ 13FC DB          	push al
0105++ 13FD DA          	push d
0106++ 13FE E3          	push di
0107++ 13FF E2          	push si
0108++ 1400             _strcmp_loop:
0109++ 1400 F3          	cmpsb					; compare a byte of the strings
0110++ 1401 C7 0C 14    	jne _strcmp_ret
0111++ 1404 FB FF FF    	lea d, [si +- 1]
0112++ 1407 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1409 C7 00 14    	jne _strcmp_loop				; equal chars but not at end
0114++ 140C             _strcmp_ret:
0115++ 140C EF          	pop si
0116++ 140D F0          	pop di
0117++ 140E E7          	pop d
0118++ 140F E8          	pop al
0119++ 1410 09          	ret
0120++ 1411             
0121++ 1411             
0122++ 1411             ; STRCPY
0123++ 1411             ; copy null terminated string from SI to DI
0124++ 1411             ; source in SI
0125++ 1411             ; destination in DI
0126++ 1411             _strcpy:
0127++ 1411 E2          	push si
0128++ 1412 E3          	push di
0129++ 1413 DB          	push al
0130++ 1414             _strcpy_L1:
0131++ 1414 F6          	lodsb
0132++ 1415 F7          	stosb
0133++ 1416 B9 00       	cmp al, 0
0134++ 1418 C7 14 14    	jne _strcpy_L1
0135++ 141B             _strcpy_end:
0136++ 141B E8          	pop al
0137++ 141C F0          	pop di
0138++ 141D EF          	pop si
0139++ 141E 09          	ret
0140++ 141F             
0141++ 141F             ; STRCAT
0142++ 141F             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 141F             ; source in SI
0144++ 141F             ; destination in DI
0145++ 141F             _strcat:
0146++ 141F E2          	push si
0147++ 1420 E3          	push di
0148++ 1421 D7          	push a
0149++ 1422 DA          	push d
0150++ 1423 50          	mov a, di
0151++ 1424 3C          	mov d, a
0152++ 1425             _strcat_goto_end_L1:
0153++ 1425 BD 00       	cmp byte[d], 0
0154++ 1427 C6 2E 14    	je _strcat_start
0155++ 142A 79          	inc d
0156++ 142B 0A 25 14    	jmp _strcat_goto_end_L1
0157++ 142E             _strcat_start:
0158++ 142E FD 50       	mov di, d
0159++ 1430             _strcat_L1:
0160++ 1430 F6          	lodsb
0161++ 1431 F7          	stosb
0162++ 1432 B9 00       	cmp al, 0
0163++ 1434 C7 30 14    	jne _strcat_L1
0164++ 1437             _strcat_end:
0165++ 1437 E7          	pop d
0166++ 1438 E4          	pop a
0167++ 1439 F0          	pop di
0168++ 143A EF          	pop si
0169++ 143B 09          	ret
0170++ 143C             
0171++ 143C             
0005+  143C             
0006+  143C             ;-----------------------------------------------------------------------------
0007+  143C             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  143C             ; ASCII in BL
0009+  143C             ; result in AL
0010+  143C             ; ascii for F = 0100 0110
0011+  143C             ; ascii for 9 = 0011 1001
0012+  143C             ;-----------------------------------------------------------------------------
0013+  143C             hex_ascii_encode:
0014+  143C 1B            mov al, bl
0015+  143D 93 40         test al, $40        ; test if letter or number
0016+  143F C7 45 14      jnz hex_letter
0017+  1442 87 0F         and al, $0F        ; get number
0018+  1444 09            ret
0019+  1445             hex_letter:
0020+  1445 87 0F         and al, $0F        ; get letter
0021+  1447 6A 09         add al, 9
0022+  1449 09            ret
0023+  144A             
0024+  144A             ;-----------------------------------------------------------------------------
0025+  144A             ; ATOI
0026+  144A             ; 2 letter hex string in B
0027+  144A             ; 8bit integer returned in AL
0028+  144A             ;-----------------------------------------------------------------------------
0029+  144A             _atoi:
0030+  144A D8            push b
0031+  144B 07 3C 14      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  144E 30            mov bl, bh
0033+  144F DB            push al          ; save a
0034+  1450 07 3C 14      call hex_ascii_encode
0035+  1453 EA            pop bl  
0036+  1454 FD 9E 04      shl al, 4
0037+  1457 8C            or al, bl
0038+  1458 E5            pop b
0039+  1459 09            ret  
0040+  145A             
0041+  145A             
0042+  145A             ;-----------------------------------------------------------------------------
0043+  145A             ; ITOA
0044+  145A             ; 8bit value in BL
0045+  145A             ; 2 byte ASCII result in A
0046+  145A             ;-----------------------------------------------------------------------------
0047+  145A             _itoa:
0048+  145A DA            push d
0049+  145B D8            push b
0050+  145C A7 00         mov bh, 0
0051+  145E FD A4 04      shr bl, 4  
0052+  1461 74            mov d, b
0053+  1462 1F 0A 17      mov al, [d + s_hex_digits]
0054+  1465 23            mov ah, al
0055+  1466               
0056+  1466 E5            pop b
0057+  1467 D8            push b
0058+  1468 A7 00         mov bh, 0
0059+  146A FD 87 0F      and bl, $0F
0060+  146D 74            mov d, b
0061+  146E 1F 0A 17      mov al, [d + s_hex_digits]
0062+  1471 E5            pop b
0063+  1472 E7            pop d
0064+  1473 09            ret
0065+  1474             
0066+  1474             ;-----------------------------------------------------------------------------
0067+  1474             ; HEX STRING TO BINARY
0068+  1474             ; di = destination address
0069+  1474             ; si = source
0070+  1474             ;-----------------------------------------------------------------------------
0071+  1474             _hex_to_int:
0072+  1474             _hex_to_int_L1:
0073+  1474 F6            lodsb          ; load from [SI] to AL
0074+  1475 B9 00         cmp al, 0        ; check if ASCII 0
0075+  1477 C6 84 14      jz _hex_to_int_ret
0076+  147A 36            mov bh, al
0077+  147B F6            lodsb
0078+  147C 2F            mov bl, al
0079+  147D 07 4A 14      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1480 F7            stosb          ; store AL to [DI]
0081+  1481 0A 74 14      jmp _hex_to_int_L1
0082+  1484             _hex_to_int_ret:
0083+  1484 09            ret    
0084+  1485             
0085+  1485             ;-----------------------------------------------------------------------------
0086+  1485             ; GETCHAR
0087+  1485             ; char in ah
0088+  1485             ;-----------------------------------------------------------------------------
0089+  1485             getch:
0090+  1485 DB            push al
0091+  1486             getch_retry:
0092+  1486 19 01         mov al, 1
0093+  1488 05 03         syscall sys_io      ; receive in AH
0094+  148A E8            pop al
0095+  148B 09            ret
0096+  148C             
0097+  148C             ;-----------------------------------------------------------------------------
0098+  148C             ; PUTCHAR
0099+  148C             ; char in ah
0100+  148C             ;-----------------------------------------------------------------------------
0101+  148C             _putchar:
0102+  148C D7            push a
0103+  148D 19 00         mov al, 0
0104+  148F 05 03         syscall sys_io      ; char in AH
0105+  1491 E4            pop a
0106+  1492 09            ret
0107+  1493             
0108+  1493             ;-----------------------------------------------------------------------------
0109+  1493             ;; INPUT A STRING
0110+  1493             ;; terminates with null
0111+  1493             ;; pointer in D
0112+  1493             ;-----------------------------------------------------------------------------
0113+  1493             _gets:
0114+  1493 D7            push a
0115+  1494 DA            push d
0116+  1495             _gets_loop:
0117+  1495 19 01         mov al, 1
0118+  1497 05 03         syscall sys_io      ; receive in AH
0119+  1499 B9 00         cmp al, 0        ; check error code (AL)
0120+  149B C6 95 14      je _gets_loop      ; if no char received, retry
0121+  149E             
0122+  149E 76 1B         cmp ah, 27
0123+  14A0 C6 C1 14      je _gets_ansi_esc
0124+  14A3 76 0A         cmp ah, $0A        ; LF
0125+  14A5 C6 2C 15      je _gets_end
0126+  14A8 76 0D         cmp ah, $0D        ; CR
0127+  14AA C6 2C 15      je _gets_end
0128+  14AD 76 5C         cmp ah, $5C        ; '\\'
0129+  14AF C6 ED 14      je _gets_escape
0130+  14B2               
0131+  14B2 76 08         cmp ah, $08      ; check for backspace
0132+  14B4 C6 BD 14      je _gets_backspace
0133+  14B7             
0134+  14B7 1A            mov al, ah
0135+  14B8 3E            mov [d], al
0136+  14B9 79            inc d
0137+  14BA 0A 95 14      jmp _gets_loop
0138+  14BD             _gets_backspace:
0139+  14BD 7F            dec d
0140+  14BE 0A 95 14      jmp _gets_loop
0141+  14C1             _gets_ansi_esc:
0142+  14C1 19 01         mov al, 1
0143+  14C3 05 03         syscall sys_io        ; receive in AH without echo
0144+  14C5 B9 00         cmp al, 0          ; check error code (AL)
0145+  14C7 C6 C1 14      je _gets_ansi_esc    ; if no char received, retry
0146+  14CA 76 5B         cmp ah, '['
0147+  14CC C7 95 14      jne _gets_loop
0148+  14CF             _gets_ansi_esc_2:
0149+  14CF 19 01         mov al, 1
0150+  14D1 05 03         syscall sys_io          ; receive in AH without echo
0151+  14D3 B9 00         cmp al, 0            ; check error code (AL)
0152+  14D5 C6 CF 14      je _gets_ansi_esc_2  ; if no char received, retry
0153+  14D8 76 44         cmp ah, 'D'
0154+  14DA C6 E5 14      je _gets_left_arrow
0155+  14DD 76 43         cmp ah, 'C'
0156+  14DF C6 E9 14      je _gets_right_arrow
0157+  14E2 0A 95 14      jmp _gets_loop
0158+  14E5             _gets_left_arrow:
0159+  14E5 7F            dec d
0160+  14E6 0A 95 14      jmp _gets_loop
0161+  14E9             _gets_right_arrow:
0162+  14E9 79            inc d
0163+  14EA 0A 95 14      jmp _gets_loop
0164+  14ED             _gets_escape:
0165+  14ED 19 01         mov al, 1
0166+  14EF 05 03         syscall sys_io      ; receive in AH
0167+  14F1 B9 00         cmp al, 0        ; check error code (AL)
0168+  14F3 C6 ED 14      je _gets_escape      ; if no char received, retry
0169+  14F6 76 6E         cmp ah, 'n'
0170+  14F8 C6 17 15      je _gets_LF
0171+  14FB 76 72         cmp ah, 'r'
0172+  14FD C6 1E 15      je _gets_CR
0173+  1500 76 30         cmp ah, '0'
0174+  1502 C6 25 15      je _gets_NULL
0175+  1505 76 5C         cmp ah, $5C  ; '\'
0176+  1507 C6 10 15      je _gets_slash
0177+  150A 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  150B 3E            mov [d], al
0179+  150C 79            inc d
0180+  150D 0A 95 14      jmp _gets_loop
0181+  1510             _gets_slash:
0182+  1510 19 5C         mov al, $5C
0183+  1512 3E            mov [d], al
0184+  1513 79            inc d
0185+  1514 0A 95 14      jmp _gets_loop
0186+  1517             _gets_LF:
0187+  1517 19 0A         mov al, $0A
0188+  1519 3E            mov [d], al
0189+  151A 79            inc d
0190+  151B 0A 95 14      jmp _gets_loop
0191+  151E             _gets_CR:
0192+  151E 19 0D         mov al, $0D
0193+  1520 3E            mov [d], al
0194+  1521 79            inc d
0195+  1522 0A 95 14      jmp _gets_loop
0196+  1525             _gets_NULL:
0197+  1525 19 00         mov al, $00
0198+  1527 3E            mov [d], al
0199+  1528 79            inc d
0200+  1529 0A 95 14      jmp _gets_loop
0201+  152C             _gets_end:
0202+  152C 19 00         mov al, 0
0203+  152E 3E            mov [d], al        ; terminate string
0204+  152F E7            pop d
0205+  1530 E4            pop a
0206+  1531 09            ret
0207+  1532             
0208+  1532             ;-----------------------------------------------------------------------------
0209+  1532             ;; INPUT TEXT
0210+  1532             ;; terminated with CTRL+D
0211+  1532             ;; pointer in D
0212+  1532             ;-----------------------------------------------------------------------------
0213+  1532             _gettxt:
0214+  1532 D7            push a
0215+  1533 DA            push d
0216+  1534             _gettxt_loop:
0217+  1534 19 01         mov al, 1
0218+  1536 05 03         syscall sys_io      ; receive in AH
0219+  1538 B9 00         cmp al, 0        ; check error code (AL)
0220+  153A C6 34 15      je _gettxt_loop    ; if no char received, retry
0221+  153D 76 04         cmp ah, 4      ; EOT
0222+  153F C6 7D 15      je _gettxt_end
0223+  1542 76 08         cmp ah, $08      ; check for backspace
0224+  1544 C6 79 15      je _gettxt_backspace
0225+  1547 76 5C         cmp ah, $5C        ; '\'
0226+  1549 C6 52 15      je _gettxt_escape
0227+  154C 1A            mov al, ah
0228+  154D 3E            mov [d], al
0229+  154E 79            inc d
0230+  154F 0A 34 15      jmp _gettxt_loop
0231+  1552             _gettxt_escape:
0232+  1552 19 01         mov al, 1
0233+  1554 05 03         syscall sys_io      ; receive in AH
0234+  1556 B9 00         cmp al, 0        ; check error code (AL)
0235+  1558 C6 52 15      je _gettxt_escape    ; if no char received, retry
0236+  155B 76 6E         cmp ah, 'n'
0237+  155D C6 6B 15      je _gettxt_LF
0238+  1560 76 72         cmp ah, 'r'
0239+  1562 C6 72 15      je _gettxt_CR
0240+  1565 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1566 3E            mov [d], al
0242+  1567 79            inc d
0243+  1568 0A 34 15      jmp _gettxt_loop
0244+  156B             _gettxt_LF:
0245+  156B 19 0A         mov al, $0A
0246+  156D 3E            mov [d], al
0247+  156E 79            inc d
0248+  156F 0A 34 15      jmp _gettxt_loop
0249+  1572             _gettxt_CR:
0250+  1572 19 0D         mov al, $0D
0251+  1574 3E            mov [d], al
0252+  1575 79            inc d
0253+  1576 0A 34 15      jmp _gettxt_loop
0254+  1579             _gettxt_backspace:
0255+  1579 7F            dec d
0256+  157A 0A 34 15      jmp _gettxt_loop
0257+  157D             _gettxt_end:
0258+  157D 19 00         mov al, 0
0259+  157F 3E            mov [d], al        ; terminate string
0260+  1580 E7            pop d
0261+  1581 E4            pop a
0262+  1582 09            ret
0263+  1583             
0264+  1583             ;-----------------------------------------------------------------------------
0265+  1583             ; PRINT NEW LINE
0266+  1583             ;-----------------------------------------------------------------------------
0267+  1583             printnl:
0268+  1583 D7            push a
0269+  1584 10 00 0A      mov a, $0A00
0270+  1587 05 03         syscall sys_io
0271+  1589 10 00 0D      mov a, $0D00
0272+  158C 05 03         syscall sys_io
0273+  158E E4            pop a
0274+  158F 09            ret
0275+  1590             
0276+  1590             ;-----------------------------------------------------------------------------
0277+  1590             ; _strtoint
0278+  1590             ; 4 digit hex string number in d
0279+  1590             ; integer returned in A
0280+  1590             ;-----------------------------------------------------------------------------
0281+  1590             _strtointx:
0282+  1590 D8            push b
0283+  1591 32            mov bl, [d]
0284+  1592 37            mov bh, bl
0285+  1593 33 01 00      mov bl, [d + 1]
0286+  1596 07 4A 14      call _atoi        ; convert to int in AL
0287+  1599 23            mov ah, al        ; move to AH
0288+  159A 33 02 00      mov bl, [d + 2]
0289+  159D 37            mov bh, bl
0290+  159E 33 03 00      mov bl, [d + 3]
0291+  15A1 07 4A 14      call _atoi        ; convert to int in AL
0292+  15A4 E5            pop b
0293+  15A5 09            ret
0294+  15A6             
0295+  15A6             ;-----------------------------------------------------------------------------
0296+  15A6             ; _strtoint
0297+  15A6             ; 5 digit base10 string number in d
0298+  15A6             ; integer returned in A
0299+  15A6             ;-----------------------------------------------------------------------------
0300+  15A6             _strtoint:
0301+  15A6 E2            push si
0302+  15A7 D8            push b
0303+  15A8 D9            push c
0304+  15A9 DA            push d
0305+  15AA 07 EC 13      call _strlen      ; get string length in C
0306+  15AD 7E            dec c
0307+  15AE FD 4E         mov si, d
0308+  15B0 12            mov a, c
0309+  15B1 FD 99         shl a
0310+  15B3 3B 22 17      mov d, table_power
0311+  15B6 59            add d, a
0312+  15B7 38 00 00      mov c, 0
0313+  15BA             _strtoint_L0:
0314+  15BA F6            lodsb      ; load ASCII to al
0315+  15BB B9 00         cmp al, 0
0316+  15BD C6 D0 15      je _strtoint_end
0317+  15C0 6F 30         sub al, $30    ; make into integer
0318+  15C2 22 00         mov ah, 0
0319+  15C4 2A            mov b, [d]
0320+  15C5 AC            mul a, b      ; result in B since it fits in 16bits
0321+  15C6 11            mov a, b
0322+  15C7 28            mov b, c
0323+  15C8 54            add a, b
0324+  15C9 39            mov c, a
0325+  15CA 63 02 00      sub d, 2
0326+  15CD 0A BA 15      jmp _strtoint_L0
0327+  15D0             _strtoint_end:
0328+  15D0 12            mov a, c
0329+  15D1 E7            pop d
0330+  15D2 E6            pop c
0331+  15D3 E5            pop b
0332+  15D4 EF            pop si
0333+  15D5 09            ret
0334+  15D6             
0335+  15D6             ;-----------------------------------------------------------------------------
0336+  15D6             ; PRINT NULL TERMINATED STRING
0337+  15D6             ; pointer in D
0338+  15D6             ;-----------------------------------------------------------------------------
0339+  15D6             _puts:
0340+  15D6 D7            push a
0341+  15D7 DA            push d
0342+  15D8             _puts_L1:
0343+  15D8 1E            mov al, [d]
0344+  15D9 B9 00         cmp al, 0
0345+  15DB C6 E7 15      jz _puts_END
0346+  15DE 23            mov ah, al
0347+  15DF 19 00         mov al, 0
0348+  15E1 05 03         syscall sys_io
0349+  15E3 79            inc d
0350+  15E4 0A D8 15      jmp _puts_L1
0351+  15E7             _puts_END:
0352+  15E7 E7            pop d
0353+  15E8 E4            pop a
0354+  15E9 09            ret
0355+  15EA             
0356+  15EA             ;-----------------------------------------------------------------------------
0357+  15EA             ; PRINT N SIZE STRING
0358+  15EA             ; pointer in D
0359+  15EA             ; size in C
0360+  15EA             ;-----------------------------------------------------------------------------
0361+  15EA             _putsn:
0362+  15EA DB            push al
0363+  15EB DA            push d
0364+  15EC D9            push c
0365+  15ED             _putsn_L0:
0366+  15ED 1E            mov al, [d]
0367+  15EE 23            mov ah, al
0368+  15EF 19 00         mov al, 0
0369+  15F1 05 03         syscall sys_io
0370+  15F3 79            inc d
0371+  15F4 7E            dec c  
0372+  15F5 C2 00 00      cmp c, 0
0373+  15F8 C7 ED 15      jne _putsn_L0
0374+  15FB             _putsn_end:
0375+  15FB E6            pop c
0376+  15FC E7            pop d
0377+  15FD E8            pop al
0378+  15FE 09            ret
0379+  15FF             
0380+  15FF             ;-----------------------------------------------------------------------------
0381+  15FF             ; print 16bit decimal number
0382+  15FF             ; input number in A
0383+  15FF             ;-----------------------------------------------------------------------------
0384+  15FF             print_u16d:
0385+  15FF D7            push a
0386+  1600 D8            push b
0387+  1601 26 10 27      mov b, 10000
0388+  1604 AE            div a, b      ; get 10000's coeff.
0389+  1605 07 27 16      call print_number
0390+  1608 11            mov a, b
0391+  1609 26 E8 03      mov b, 1000
0392+  160C AE            div a, b      ; get 1000's coeff.
0393+  160D 07 27 16      call print_number
0394+  1610 11            mov a, b
0395+  1611 26 64 00      mov b, 100
0396+  1614 AE            div a, b
0397+  1615 07 27 16      call print_number
0398+  1618 11            mov a, b
0399+  1619 26 0A 00      mov b, 10
0400+  161C AE            div a, b
0401+  161D 07 27 16      call print_number
0402+  1620 1B            mov al, bl      ; 1's coeff in bl
0403+  1621 07 27 16      call print_number
0404+  1624 E5            pop b
0405+  1625 E4            pop a
0406+  1626 09            ret
0407+  1627             
0408+  1627             ;-----------------------------------------------------------------------------
0409+  1627             ; print AL
0410+  1627             ;-----------------------------------------------------------------------------
0411+  1627             print_number:
0412+  1627 6A 30         add al, $30
0413+  1629 23            mov ah, al
0414+  162A 07 8C 14      call _putchar
0415+  162D 09            ret
0416+  162E             
0417+  162E             ;-----------------------------------------------------------------------------
0418+  162E             ; PRINT 16BIT HEX INTEGER
0419+  162E             ; integer value in reg B
0420+  162E             ;-----------------------------------------------------------------------------
0421+  162E             print_u16x:
0422+  162E D7            push a
0423+  162F D8            push b
0424+  1630 DD            push bl
0425+  1631 30            mov bl, bh
0426+  1632 07 5A 14      call _itoa        ; convert bh to char in A
0427+  1635 2F            mov bl, al        ; save al
0428+  1636 19 00         mov al, 0
0429+  1638 05 03         syscall sys_io        ; display AH
0430+  163A 24            mov ah, bl        ; retrieve al
0431+  163B 19 00         mov al, 0
0432+  163D 05 03         syscall sys_io        ; display AL
0433+  163F             
0434+  163F EA            pop bl
0435+  1640 07 5A 14      call _itoa        ; convert bh to char in A
0436+  1643 2F            mov bl, al        ; save al
0437+  1644 19 00         mov al, 0
0438+  1646 05 03         syscall sys_io        ; display AH
0439+  1648 24            mov ah, bl        ; retrieve al
0440+  1649 19 00         mov al, 0
0441+  164B 05 03         syscall sys_io        ; display AL
0442+  164D             
0443+  164D E5            pop b
0444+  164E E4            pop a
0445+  164F 09            ret
0446+  1650             
0447+  1650             ;-----------------------------------------------------------------------------
0448+  1650             ; INPUT 16BIT HEX INTEGER
0449+  1650             ; read 16bit integer into A
0450+  1650             ;-----------------------------------------------------------------------------
0451+  1650             scan_u16x:
0452+  1650 F8 10 00      enter 16
0453+  1653 D8            push b
0454+  1654 DA            push d
0455+  1655             
0456+  1655 FA F1 FF      lea d, [bp + -15]
0457+  1658 07 93 14      call _gets        ; get number
0458+  165B             
0459+  165B 32            mov bl, [d]
0460+  165C 37            mov bh, bl
0461+  165D 33 01 00      mov bl, [d + 1]
0462+  1660 07 4A 14      call _atoi        ; convert to int in AL
0463+  1663 23            mov ah, al        ; move to AH
0464+  1664             
0465+  1664 33 02 00      mov bl, [d + 2]
0466+  1667 37            mov bh, bl
0467+  1668 33 03 00      mov bl, [d + 3]
0468+  166B 07 4A 14      call _atoi        ; convert to int in AL
0469+  166E             
0470+  166E E7            pop d
0471+  166F E5            pop b
0472+  1670 F9            leave
0473+  1671 09            ret
0474+  1672             
0475+  1672             ;-----------------------------------------------------------------------------
0476+  1672             ; PRINT 8bit HEX INTEGER
0477+  1672             ; integer value in reg bl
0478+  1672             ;-----------------------------------------------------------------------------
0479+  1672             print_u8x:
0480+  1672 D7            push a
0481+  1673 DD            push bl
0482+  1674             
0483+  1674 07 5A 14      call _itoa        ; convert bl to char in A
0484+  1677 2F            mov bl, al        ; save al
0485+  1678 19 00         mov al, 0
0486+  167A 05 03         syscall sys_io        ; display AH
0487+  167C 24            mov ah, bl        ; retrieve al
0488+  167D 19 00         mov al, 0
0489+  167F 05 03         syscall sys_io        ; display AL
0490+  1681             
0491+  1681 EA            pop bl
0492+  1682 E4            pop a
0493+  1683 09            ret
0494+  1684             
0495+  1684             ;-----------------------------------------------------------------------------
0496+  1684             ; print 8bit decimal unsigned number
0497+  1684             ; input number in AL
0498+  1684             ;-----------------------------------------------------------------------------
0499+  1684             print_u8d:
0500+  1684 D7            push a
0501+  1685 D8            push b
0502+  1686             
0503+  1686 22 00         mov ah, 0
0504+  1688 26 64 00      mov b, 100
0505+  168B AE            div a, b
0506+  168C D8            push b      ; save remainder
0507+  168D B9 00         cmp al, 0
0508+  168F C6 99 16      je skip100
0509+  1692 6A 30         add al, $30
0510+  1694 23            mov ah, al
0511+  1695 19 00         mov al, 0
0512+  1697 05 03         syscall sys_io  ; print coeff
0513+  1699             skip100:
0514+  1699 E4            pop a
0515+  169A 22 00         mov ah, 0
0516+  169C 26 0A 00      mov b, 10
0517+  169F AE            div a, b
0518+  16A0 D8            push b      ; save remainder
0519+  16A1 B9 00         cmp al, 0
0520+  16A3 C6 AD 16      je skip10
0521+  16A6 6A 30         add al, $30
0522+  16A8 23            mov ah, al
0523+  16A9 19 00         mov al, 0
0524+  16AB 05 03         syscall sys_io  ; print coeff
0525+  16AD             skip10:
0526+  16AD E4            pop a
0527+  16AE 1B            mov al, bl
0528+  16AF 6A 30         add al, $30
0529+  16B1 23            mov ah, al
0530+  16B2 19 00         mov al, 0
0531+  16B4 05 03         syscall sys_io  ; print coeff
0532+  16B6 E5            pop b
0533+  16B7 E4            pop a
0534+  16B8 09            ret
0535+  16B9             
0536+  16B9             ;-----------------------------------------------------------------------------
0537+  16B9             ; INPUT 8BIT HEX INTEGER
0538+  16B9             ; read 8bit integer into AL
0539+  16B9             ;-----------------------------------------------------------------------------
0540+  16B9             scan_u8x:
0541+  16B9 F8 04 00      enter 4
0542+  16BC D8            push b
0543+  16BD DA            push d
0544+  16BE             
0545+  16BE FA FD FF      lea d, [bp + -3]
0546+  16C1 07 93 14      call _gets        ; get number
0547+  16C4             
0548+  16C4 32            mov bl, [d]
0549+  16C5 37            mov bh, bl
0550+  16C6 33 01 00      mov bl, [d + 1]
0551+  16C9 07 4A 14      call _atoi        ; convert to int in AL
0552+  16CC             
0553+  16CC E7            pop d
0554+  16CD E5            pop b
0555+  16CE F9            leave
0556+  16CF 09            ret
0557+  16D0             
0558+  16D0             ;-----------------------------------------------------------------------------
0559+  16D0             ; input decimal number
0560+  16D0             ; result in A
0561+  16D0             ; 655'\0'
0562+  16D0             ; low--------high
0563+  16D0             ;-----------------------------------------------------------------------------
0564+  16D0             scan_u16d:
0565+  16D0 F8 08 00      enter 8
0566+  16D3 E2            push si
0567+  16D4 D8            push b
0568+  16D5 D9            push c
0569+  16D6 DA            push d
0570+  16D7 FA F9 FF      lea d, [bp +- 7]
0571+  16DA 07 93 14      call _gets
0572+  16DD 07 EC 13      call _strlen      ; get string length in C
0573+  16E0 7E            dec c
0574+  16E1 FD 4E         mov si, d
0575+  16E3 12            mov a, c
0576+  16E4 FD 99         shl a
0577+  16E6 3B 22 17      mov d, table_power
0578+  16E9 59            add d, a
0579+  16EA 38 00 00      mov c, 0
0580+  16ED             mul_loop:
0581+  16ED F6            lodsb      ; load ASCII to al
0582+  16EE B9 00         cmp al, 0
0583+  16F0 C6 03 17      je mul_exit
0584+  16F3 6F 30         sub al, $30    ; make into integer
0585+  16F5 22 00         mov ah, 0
0586+  16F7 2A            mov b, [d]
0587+  16F8 AC            mul a, b      ; result in B since it fits in 16bits
0588+  16F9 11            mov a, b
0589+  16FA 28            mov b, c
0590+  16FB 54            add a, b
0591+  16FC 39            mov c, a
0592+  16FD 63 02 00      sub d, 2
0593+  1700 0A ED 16      jmp mul_loop
0594+  1703             mul_exit:
0595+  1703 12            mov a, c
0596+  1704 E7            pop d
0597+  1705 E6            pop c
0598+  1706 E5            pop b
0599+  1707 EF            pop si
0600+  1708 F9            leave
0601+  1709 09            ret
0602+  170A             
0603+  170A 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  170E 34 35 36 37 
0603+  1712 38 39 41 42 
0603+  1716 43 44 45 46 
0604+  171A 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  171E 1B 5B 48 00 
0605+  1722             
0606+  1722             table_power:
0607+  1722 01 00         .dw 1
0608+  1724 0A 00         .dw 10
0609+  1726 64 00         .dw 100
0610+  1728 E8 03         .dw 1000
0611+  172A 10 27         .dw 100002349   172C             ; --- END INLINE ASM BLOCK
2350   172C             
2351   172C F9            leave
2352   172D 09            ret
2353   172E             
2354   172E             exit:
2355   172E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2356   1731             
2357   1731             ; --- BEGIN INLINE ASM BLOCK
2358   1731 05 0B         syscall sys_terminate_proc
2359   1733             ; --- END INLINE ASM BLOCK
2360   1733             
2361   1733 F9            leave
2362   1734 09            ret
2363   1735             
2364   1735             memset:
2365   1735 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2366   1738             ; $i 
2367   1738 52 02 00      sub sp, 2
2368   173B             ;; for(i = 0; i < size; i++){ 
2369   173B             _for37_init:
2370   173B FA FF FF      lea d, [bp + -1] ; $i
2371   173E DA            push d
2372   173F 26 00 00      mov b, $0
2373   1742 E7            pop d
2374   1743 FD 43         mov [d], b
2375   1745             _for37_cond:
2376   1745 FA FF FF      lea d, [bp + -1] ; $i
2377   1748 2A            mov b, [d]
2378   1749             ; START RELATIONAL
2379   1749 D7            push a
2380   174A 11            mov a, b
2381   174B FA 08 00      lea d, [bp + 8] ; $size
2382   174E 2A            mov b, [d]
2383   174F B0            cmp a, b
2384   1750 FD 73         slt ; < (signed)
2385   1752 E4            pop a
2386   1753             ; END RELATIONAL
2387   1753 C0 00 00      cmp b, 0
2388   1756 C6 7F 17      je _for37_exit
2389   1759             _for37_block:
2390   1759             ;; *(s+i) = c; 
2391   1759 FA 05 00      lea d, [bp + 5] ; $s
2392   175C 2A            mov b, [d]
2393   175D             ; START TERMS
2394   175D D7            push a
2395   175E 11            mov a, b
2396   175F FA FF FF      lea d, [bp + -1] ; $i
2397   1762 2A            mov b, [d]
2398   1763 56            add b, a
2399   1764 E4            pop a
2400   1765             ; END TERMS
2401   1765 D8            push b
2402   1766 FA 07 00      lea d, [bp + 7] ; $c
2403   1769 32            mov bl, [d]
2404   176A A7 00         mov bh, 0
2405   176C E7            pop d
2406   176D FD 3E         mov [d], bl
2407   176F             _for37_update:
2408   176F FA FF FF      lea d, [bp + -1] ; $i
2409   1772 2A            mov b, [d]
2410   1773 D8            push b
2411   1774 FD 77         inc b
2412   1776 FA FF FF      lea d, [bp + -1] ; $i
2413   1779 FD 43         mov [d], b
2414   177B E5            pop b
2415   177C 0A 45 17      jmp _for37_cond
2416   177F             _for37_exit:
2417   177F             ;; return s; 
2418   177F FA 05 00      lea d, [bp + 5] ; $s
2419   1782 2A            mov b, [d]
2420   1783 F9            leave
2421   1784 09            ret
2422   1785             
2423   1785             atoi:
2424   1785 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2425   1788             ; $result 
2426   1788 10 00 00      mov a, $0
2427   178B 45 FF FF      mov [bp + -1], a
2428   178E             ; $sign 
2429   178E 10 01 00      mov a, $1
2430   1791 45 FD FF      mov [bp + -3], a
2431   1794 52 04 00      sub sp, 4
2432   1797             ;; while (*str == ' ') str++; 
2433   1797             _while38_cond:
2434   1797 FA 05 00      lea d, [bp + 5] ; $str
2435   179A 2A            mov b, [d]
2436   179B 74            mov d, b
2437   179C 32            mov bl, [d]
2438   179D A7 00         mov bh, 0
2439   179F             ; START RELATIONAL
2440   179F D7            push a
2441   17A0 11            mov a, b
2442   17A1 26 20 00      mov b, $20
2443   17A4 B0            cmp a, b
2444   17A5 FD 71         seq ; ==
2445   17A7 E4            pop a
2446   17A8             ; END RELATIONAL
2447   17A8 C0 00 00      cmp b, 0
2448   17AB C6 BE 17      je _while38_exit
2449   17AE             _while38_block:
2450   17AE             ;; str++; 
2451   17AE FA 05 00      lea d, [bp + 5] ; $str
2452   17B1 2A            mov b, [d]
2453   17B2 D8            push b
2454   17B3 FD 77         inc b
2455   17B5 FA 05 00      lea d, [bp + 5] ; $str
2456   17B8 FD 43         mov [d], b
2457   17BA E5            pop b
2458   17BB 0A 97 17      jmp _while38_cond
2459   17BE             _while38_exit:
2460   17BE             ;; if (*str == '-' || *str == '+') { 
2461   17BE             _if39_cond:
2462   17BE FA 05 00      lea d, [bp + 5] ; $str
2463   17C1 2A            mov b, [d]
2464   17C2 74            mov d, b
2465   17C3 32            mov bl, [d]
2466   17C4 A7 00         mov bh, 0
2467   17C6             ; START RELATIONAL
2468   17C6 D7            push a
2469   17C7 11            mov a, b
2470   17C8 26 2D 00      mov b, $2d
2471   17CB B0            cmp a, b
2472   17CC FD 71         seq ; ==
2473   17CE E4            pop a
2474   17CF             ; END RELATIONAL
2475   17CF D7            push a
2476   17D0 11            mov a, b
2477   17D1 FA 05 00      lea d, [bp + 5] ; $str
2478   17D4 2A            mov b, [d]
2479   17D5 74            mov d, b
2480   17D6 32            mov bl, [d]
2481   17D7 A7 00         mov bh, 0
2482   17D9             ; START RELATIONAL
2483   17D9 D7            push a
2484   17DA 11            mov a, b
2485   17DB 26 2B 00      mov b, $2b
2486   17DE B0            cmp a, b
2487   17DF FD 71         seq ; ==
2488   17E1 E4            pop a
2489   17E2             ; END RELATIONAL
2490   17E2 FD A8         sor a, b ; ||
2491   17E4 E4            pop a
2492   17E5 C0 00 00      cmp b, 0
2493   17E8 C6 1F 18      je _if39_exit
2494   17EB             _if39_true:
2495   17EB             ;; if (*str == '-') sign = -1; 
2496   17EB             _if40_cond:
2497   17EB FA 05 00      lea d, [bp + 5] ; $str
2498   17EE 2A            mov b, [d]
2499   17EF 74            mov d, b
2500   17F0 32            mov bl, [d]
2501   17F1 A7 00         mov bh, 0
2502   17F3             ; START RELATIONAL
2503   17F3 D7            push a
2504   17F4 11            mov a, b
2505   17F5 26 2D 00      mov b, $2d
2506   17F8 B0            cmp a, b
2507   17F9 FD 71         seq ; ==
2508   17FB E4            pop a
2509   17FC             ; END RELATIONAL
2510   17FC C0 00 00      cmp b, 0
2511   17FF C6 0F 18      je _if40_exit
2512   1802             _if40_true:
2513   1802             ;; sign = -1; 
2514   1802 FA FD FF      lea d, [bp + -3] ; $sign
2515   1805 DA            push d
2516   1806 26 FF FF      mov b, $ffff
2517   1809 E7            pop d
2518   180A FD 43         mov [d], b
2519   180C 0A 0F 18      jmp _if40_exit
2520   180F             _if40_exit:
2521   180F             ;; str++; 
2522   180F FA 05 00      lea d, [bp + 5] ; $str
2523   1812 2A            mov b, [d]
2524   1813 D8            push b
2525   1814 FD 77         inc b
2526   1816 FA 05 00      lea d, [bp + 5] ; $str
2527   1819 FD 43         mov [d], b
2528   181B E5            pop b
2529   181C 0A 1F 18      jmp _if39_exit
2530   181F             _if39_exit:
2531   181F             ;; while (*str >= '0' && *str <= '9') { 
2532   181F             _while41_cond:
2533   181F FA 05 00      lea d, [bp + 5] ; $str
2534   1822 2A            mov b, [d]
2535   1823 74            mov d, b
2536   1824 32            mov bl, [d]
2537   1825 A7 00         mov bh, 0
2538   1827             ; START RELATIONAL
2539   1827 D7            push a
2540   1828 11            mov a, b
2541   1829 26 30 00      mov b, $30
2542   182C B0            cmp a, b
2543   182D FD 82         sgeu ; >= (unsigned)
2544   182F E4            pop a
2545   1830             ; END RELATIONAL
2546   1830 D7            push a
2547   1831 11            mov a, b
2548   1832 FA 05 00      lea d, [bp + 5] ; $str
2549   1835 2A            mov b, [d]
2550   1836 74            mov d, b
2551   1837 32            mov bl, [d]
2552   1838 A7 00         mov bh, 0
2553   183A             ; START RELATIONAL
2554   183A D7            push a
2555   183B 11            mov a, b
2556   183C 26 39 00      mov b, $39
2557   183F B0            cmp a, b
2558   1840 FD 75         slu ; <= (unsigned)
2559   1842 E4            pop a
2560   1843             ; END RELATIONAL
2561   1843 FD A7         sand a, b
2562   1845 E4            pop a
2563   1846 C0 00 00      cmp b, 0
2564   1849 C6 84 18      je _while41_exit
2565   184C             _while41_block:
2566   184C             ;; result = result * 10 + (*str - '0'); 
2567   184C FA FF FF      lea d, [bp + -1] ; $result
2568   184F DA            push d
2569   1850 FA FF FF      lea d, [bp + -1] ; $result
2570   1853 2A            mov b, [d]
2571   1854             ; START FACTORS
2572   1854 D7            push a
2573   1855 11            mov a, b
2574   1856 26 0A 00      mov b, $a
2575   1859 AC            mul a, b ; *
2576   185A 11            mov a, b
2577   185B 27            mov b, a
2578   185C E4            pop a
2579   185D             ; END FACTORS
2580   185D             ; START TERMS
2581   185D D7            push a
2582   185E 11            mov a, b
2583   185F FA 05 00      lea d, [bp + 5] ; $str
2584   1862 2A            mov b, [d]
2585   1863 74            mov d, b
2586   1864 32            mov bl, [d]
2587   1865 A7 00         mov bh, 0
2588   1867             ; START TERMS
2589   1867 D7            push a
2590   1868 11            mov a, b
2591   1869 26 30 00      mov b, $30
2592   186C 60            sub a, b
2593   186D 27            mov b, a
2594   186E E4            pop a
2595   186F             ; END TERMS
2596   186F 56            add b, a
2597   1870 E4            pop a
2598   1871             ; END TERMS
2599   1871 E7            pop d
2600   1872 FD 43         mov [d], b
2601   1874             ;; str++; 
2602   1874 FA 05 00      lea d, [bp + 5] ; $str
2603   1877 2A            mov b, [d]
2604   1878 D8            push b
2605   1879 FD 77         inc b
2606   187B FA 05 00      lea d, [bp + 5] ; $str
2607   187E FD 43         mov [d], b
2608   1880 E5            pop b
2609   1881 0A 1F 18      jmp _while41_cond
2610   1884             _while41_exit:
2611   1884             ;; return sign * result; 
2612   1884 FA FD FF      lea d, [bp + -3] ; $sign
2613   1887 2A            mov b, [d]
2614   1888             ; START FACTORS
2615   1888 D7            push a
2616   1889 11            mov a, b
2617   188A FA FF FF      lea d, [bp + -1] ; $result
2618   188D 2A            mov b, [d]
2619   188E AC            mul a, b ; *
2620   188F 11            mov a, b
2621   1890 27            mov b, a
2622   1891 E4            pop a
2623   1892             ; END FACTORS
2624   1892 F9            leave
2625   1893 09            ret
2626   1894             
2627   1894             rand:
2628   1894 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2629   1897             ; $sec 
2630   1897 52 02 00      sub sp, 2
2631   189A             
2632   189A             ; --- BEGIN INLINE ASM BLOCK
2633   189A 19 00         mov al, 0
2634   189C 05 01         syscall sys_rtc					
2635   189E 1A            mov al, ah
2636   189F FA FF FF      lea d, [bp + -1] ; $sec
2637   18A2 1E            mov al, [d]
2638   18A3 22 00         mov ah, 0
2639   18A5             ; --- END INLINE ASM BLOCK
2640   18A5             
2641   18A5             ;; return sec; 
2642   18A5 FA FF FF      lea d, [bp + -1] ; $sec
2643   18A8 2A            mov b, [d]
2644   18A9 F9            leave
2645   18AA 09            ret
2646   18AB             
2647   18AB             alloc:
2648   18AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2649   18AE             ;; heap_top = heap_top + bytes; 
2650   18AE 3B 28 2B      mov d, _heap_top ; $heap_top
2651   18B1 DA            push d
2652   18B2 3B 28 2B      mov d, _heap_top ; $heap_top
2653   18B5 2A            mov b, [d]
2654   18B6             ; START TERMS
2655   18B6 D7            push a
2656   18B7 11            mov a, b
2657   18B8 FA 05 00      lea d, [bp + 5] ; $bytes
2658   18BB 2A            mov b, [d]
2659   18BC 56            add b, a
2660   18BD E4            pop a
2661   18BE             ; END TERMS
2662   18BE E7            pop d
2663   18BF FD 43         mov [d], b
2664   18C1             ;; return heap_top - bytes; 
2665   18C1 3B 28 2B      mov d, _heap_top ; $heap_top
2666   18C4 2A            mov b, [d]
2667   18C5             ; START TERMS
2668   18C5 D7            push a
2669   18C6 11            mov a, b
2670   18C7 FA 05 00      lea d, [bp + 5] ; $bytes
2671   18CA 2A            mov b, [d]
2672   18CB 60            sub a, b
2673   18CC 27            mov b, a
2674   18CD E4            pop a
2675   18CE             ; END TERMS
2676   18CE F9            leave
2677   18CF 09            ret
2678   18D0             
2679   18D0             free:
2680   18D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2681   18D3             ;; return heap_top = heap_top - bytes; 
2682   18D3 3B 28 2B      mov d, _heap_top ; $heap_top
2683   18D6 DA            push d
2684   18D7 3B 28 2B      mov d, _heap_top ; $heap_top
2685   18DA 2A            mov b, [d]
2686   18DB             ; START TERMS
2687   18DB D7            push a
2688   18DC 11            mov a, b
2689   18DD FA 05 00      lea d, [bp + 5] ; $bytes
2690   18E0 2A            mov b, [d]
2691   18E1 60            sub a, b
2692   18E2 27            mov b, a
2693   18E3 E4            pop a
2694   18E4             ; END TERMS
2695   18E4 E7            pop d
2696   18E5 FD 43         mov [d], b
2697   18E7 F9            leave
2698   18E8 09            ret
2699   18E9             
2700   18E9             include_ctype_lib:
2701   18E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2702   18EC             
2703   18EC             ; --- BEGIN INLINE ASM BLOCK
2704   18EC             .include "lib/asm/ctype.asm"
0001+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  18EC             ; ctype.s
0003+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  18EC             
0005+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  18EC             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  18EC             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  18EC             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  18EC             ;; characters are supported.
0010+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  18EC             ;; _isalnum 
0012+  18EC             ;; _isalpha 
0013+  18EC             ;; islower 
0014+  18EC             ;; isupper 
0015+  18EC             ;; _isdigit 
0016+  18EC             ;; isxdigit
0017+  18EC             ;; iscntrl 
0018+  18EC             ;; isgraph 
0019+  18EC             ;; _isspace 
0020+  18EC             ;; isblank 
0021+  18EC             ;; isprint 
0022+  18EC             ;; ispunct 
0023+  18EC             ;; tolower 
0024+  18EC             ;; toupper
0025+  18EC             
0026+  18EC             
0027+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  18EC             ;; IS ALPHANUMERIC
0029+  18EC             ;; sets ZF according with result
0030+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  18EC             _isalnum:
0032+  18EC 07 09 19    	call _isalpha
0033+  18EF C6 F5 18    	je _isalnum_exit
0034+  18F2 07 F6 18    	call _isdigit
0035+  18F5             _isalnum_exit:
0036+  18F5 09          	ret	
0037+  18F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  18F6             ;; IS DIGIT
0039+  18F6             ;; sets ZF according with result
0040+  18F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  18F6             _isdigit:
0042+  18F6 DB          	push al
0043+  18F7 B9 30       	cmp al, '0'
0044+  18F9 C8 05 19    	jlu _isdigit_false
0045+  18FC B9 39       	cmp al, '9'
0046+  18FE D1 05 19    	jgu _isdigit_false
0047+  1901 87 00       	and al, 0	; set ZF
0048+  1903 E8          	pop al
0049+  1904 09          	ret
0050+  1905             _isdigit_false:
0051+  1905 8B 01       	or al, 1	; clear ZF
0052+  1907 E8          	pop al
0053+  1908 09          	ret	
0054+  1909             	
0055+  1909             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  1909             ;; IS ALPHA
0057+  1909             ;; sets ZF according with result
0058+  1909             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  1909             _isalpha:
0060+  1909 DB          	push al
0061+  190A B9 5F       	cmp al, '_'
0062+  190C C6 2C 19    	je _isalpha_true
0063+  190F B9 2E       	cmp al, '.'
0064+  1911 C6 2C 19    	je _isalpha_true
0065+  1914 B9 41       	cmp al, 'A'
0066+  1916 C8 28 19    	jlu _isalpha_false
0067+  1919 B9 7A       	cmp al, 'z'
0068+  191B D1 28 19    	jgu _isalpha_false
0069+  191E B9 5A       	cmp al, 'Z'
0070+  1920 D0 2C 19    	jleu _isalpha_true
0071+  1923 B9 61       	cmp al, 'a'
0072+  1925 C9 2C 19    	jgeu _isalpha_true
0073+  1928             _isalpha_false:
0074+  1928 8B 01       	or al, 1	; clear ZF
0075+  192A E8          	pop al
0076+  192B 09          	ret
0077+  192C             _isalpha_true:
0078+  192C 87 00       	and al, 0	; set ZF
0079+  192E E8          	pop al
0080+  192F 09          	ret
0081+  1930             
0082+  1930             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  1930             ;; IS PATH-ALPHA
0084+  1930             ;; sets ZF according with result
0085+  1930             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  1930             ispath:
0087+  1930 DB          	push al
0088+  1931 07 F6 18    	call _isdigit
0089+  1934 C6 5E 19    	je ispath_true
0090+  1937 B9 5F       	cmp al, '_'
0091+  1939 C6 5E 19    	je ispath_true
0092+  193C B9 2F       	cmp al, '/'
0093+  193E C6 5E 19    	je ispath_true
0094+  1941 B9 2E       	cmp al, '.'
0095+  1943 C6 5E 19    	je ispath_true
0096+  1946 B9 41       	cmp al, 'A'
0097+  1948 C8 5A 19    	jlu ispath_false
0098+  194B B9 7A       	cmp al, 'z'
0099+  194D D1 5A 19    	jgu ispath_false
0100+  1950 B9 5A       	cmp al, 'Z'
0101+  1952 D0 5E 19    	jleu ispath_true
0102+  1955 B9 61       	cmp al, 'a'
0103+  1957 C9 5E 19    	jgeu ispath_true
0104+  195A             ispath_false:
0105+  195A 8B 01       	or al, 1	; clear ZF
0106+  195C E8          	pop al
0107+  195D 09          	ret
0108+  195E             ispath_true:
0109+  195E 87 00       	and al, 0	; set ZF
0110+  1960 E8          	pop al
0111+  1961 09          	ret
0112+  1962             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  1962             ;; IS SPACE
0114+  1962             ;; sets ZF according with result
0115+  1962             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  1962             _isspace:
0117+  1962 B9 20       	cmp al, $20		; ' '
0118+  1964 C6 78 19    	je _isspace_exit
0119+  1967 B9 09       	cmp al, $09		; '\t'
0120+  1969 C6 78 19    	je _isspace_exit
0121+  196C B9 0A       	cmp al, $0A		; '\n'
0122+  196E C6 78 19    	je _isspace_exit
0123+  1971 B9 0D       	cmp al, $0D		; '\r'
0124+  1973 C6 78 19    	je _isspace_exit
0125+  1976 B9 0B       	cmp al, $0B		; '\v'
0126+  1978             _isspace_exit:
0127+  1978 09          	ret	
0128+  1979             
0129+  1979             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1979             ; TO LOWER
0131+  1979             ; input in AL
0132+  1979             ; output in AL
0133+  1979             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  1979             _to_lower:
0135+  1979 B9 5A       	cmp al, 'Z'
0136+  197B D1 80 19    	jgu _to_lower_ret
0137+  197E 6A 20       	add al, $20				; convert to lower case
0138+  1980             _to_lower_ret:
0139+  1980 09          	ret
0140+  1981             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  1981             ; TO UPPER
0142+  1981             ; input in AL
0143+  1981             ; output in AL
0144+  1981             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  1981             _to_upper:
0146+  1981 B9 61       	cmp al, 'a'
0147+  1983 C8 88 19    	jlu _to_upper_ret
0148+  1986 6F 20       	sub al, $20			; convert to upper case
0149+  1988             _to_upper_ret:
0150+  1988 09          	ret
0151+  1989             
2705   1989             ; --- END INLINE ASM BLOCK
2706   1989             
2707   1989 F9            leave
2708   198A 09            ret
2709   198B             
2710   198B             is_space:
2711   198B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2712   198E             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
2713   198E FA 05 00      lea d, [bp + 5] ; $c
2714   1991 32            mov bl, [d]
2715   1992 A7 00         mov bh, 0
2716   1994             ; START RELATIONAL
2717   1994 D7            push a
2718   1995 11            mov a, b
2719   1996 26 20 00      mov b, $20
2720   1999 B0            cmp a, b
2721   199A FD 71         seq ; ==
2722   199C E4            pop a
2723   199D             ; END RELATIONAL
2724   199D D7            push a
2725   199E 11            mov a, b
2726   199F FA 05 00      lea d, [bp + 5] ; $c
2727   19A2 32            mov bl, [d]
2728   19A3 A7 00         mov bh, 0
2729   19A5             ; START RELATIONAL
2730   19A5 D7            push a
2731   19A6 11            mov a, b
2732   19A7 26 09 00      mov b, $9
2733   19AA B0            cmp a, b
2734   19AB FD 71         seq ; ==
2735   19AD E4            pop a
2736   19AE             ; END RELATIONAL
2737   19AE FD A8         sor a, b ; ||
2738   19B0 11            mov a, b
2739   19B1 FA 05 00      lea d, [bp + 5] ; $c
2740   19B4 32            mov bl, [d]
2741   19B5 A7 00         mov bh, 0
2742   19B7             ; START RELATIONAL
2743   19B7 D7            push a
2744   19B8 11            mov a, b
2745   19B9 26 0A 00      mov b, $a
2746   19BC B0            cmp a, b
2747   19BD FD 71         seq ; ==
2748   19BF E4            pop a
2749   19C0             ; END RELATIONAL
2750   19C0 FD A8         sor a, b ; ||
2751   19C2 11            mov a, b
2752   19C3 FA 05 00      lea d, [bp + 5] ; $c
2753   19C6 32            mov bl, [d]
2754   19C7 A7 00         mov bh, 0
2755   19C9             ; START RELATIONAL
2756   19C9 D7            push a
2757   19CA 11            mov a, b
2758   19CB 26 0D 00      mov b, $d
2759   19CE B0            cmp a, b
2760   19CF FD 71         seq ; ==
2761   19D1 E4            pop a
2762   19D2             ; END RELATIONAL
2763   19D2 FD A8         sor a, b ; ||
2764   19D4 E4            pop a
2765   19D5 F9            leave
2766   19D6 09            ret
2767   19D7             
2768   19D7             is_digit:
2769   19D7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2770   19DA             ;; return c >= '0' && c <= '9'; 
2771   19DA FA 05 00      lea d, [bp + 5] ; $c
2772   19DD 32            mov bl, [d]
2773   19DE A7 00         mov bh, 0
2774   19E0             ; START RELATIONAL
2775   19E0 D7            push a
2776   19E1 11            mov a, b
2777   19E2 26 30 00      mov b, $30
2778   19E5 B0            cmp a, b
2779   19E6 FD 80         sge ; >=
2780   19E8 E4            pop a
2781   19E9             ; END RELATIONAL
2782   19E9 D7            push a
2783   19EA 11            mov a, b
2784   19EB FA 05 00      lea d, [bp + 5] ; $c
2785   19EE 32            mov bl, [d]
2786   19EF A7 00         mov bh, 0
2787   19F1             ; START RELATIONAL
2788   19F1 D7            push a
2789   19F2 11            mov a, b
2790   19F3 26 39 00      mov b, $39
2791   19F6 B0            cmp a, b
2792   19F7 FD 73         slt ; <= (signed)
2793   19F9 E4            pop a
2794   19FA             ; END RELATIONAL
2795   19FA FD A7         sand a, b
2796   19FC E4            pop a
2797   19FD F9            leave
2798   19FE 09            ret
2799   19FF             
2800   19FF             is_alpha:
2801   19FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2802   1A02             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
2803   1A02 FA 05 00      lea d, [bp + 5] ; $c
2804   1A05 32            mov bl, [d]
2805   1A06 A7 00         mov bh, 0
2806   1A08             ; START RELATIONAL
2807   1A08 D7            push a
2808   1A09 11            mov a, b
2809   1A0A 26 61 00      mov b, $61
2810   1A0D B0            cmp a, b
2811   1A0E FD 80         sge ; >=
2812   1A10 E4            pop a
2813   1A11             ; END RELATIONAL
2814   1A11 D7            push a
2815   1A12 11            mov a, b
2816   1A13 FA 05 00      lea d, [bp + 5] ; $c
2817   1A16 32            mov bl, [d]
2818   1A17 A7 00         mov bh, 0
2819   1A19             ; START RELATIONAL
2820   1A19 D7            push a
2821   1A1A 11            mov a, b
2822   1A1B 26 7A 00      mov b, $7a
2823   1A1E B0            cmp a, b
2824   1A1F FD 73         slt ; <= (signed)
2825   1A21 E4            pop a
2826   1A22             ; END RELATIONAL
2827   1A22 FD A7         sand a, b
2828   1A24 E4            pop a
2829   1A25 D7            push a
2830   1A26 11            mov a, b
2831   1A27 FA 05 00      lea d, [bp + 5] ; $c
2832   1A2A 32            mov bl, [d]
2833   1A2B A7 00         mov bh, 0
2834   1A2D             ; START RELATIONAL
2835   1A2D D7            push a
2836   1A2E 11            mov a, b
2837   1A2F 26 41 00      mov b, $41
2838   1A32 B0            cmp a, b
2839   1A33 FD 80         sge ; >=
2840   1A35 E4            pop a
2841   1A36             ; END RELATIONAL
2842   1A36 D7            push a
2843   1A37 11            mov a, b
2844   1A38 FA 05 00      lea d, [bp + 5] ; $c
2845   1A3B 32            mov bl, [d]
2846   1A3C A7 00         mov bh, 0
2847   1A3E             ; START RELATIONAL
2848   1A3E D7            push a
2849   1A3F 11            mov a, b
2850   1A40 26 5A 00      mov b, $5a
2851   1A43 B0            cmp a, b
2852   1A44 FD 73         slt ; <= (signed)
2853   1A46 E4            pop a
2854   1A47             ; END RELATIONAL
2855   1A47 FD A7         sand a, b
2856   1A49 E4            pop a
2857   1A4A FD A8         sor a, b ; ||
2858   1A4C 11            mov a, b
2859   1A4D FA 05 00      lea d, [bp + 5] ; $c
2860   1A50 32            mov bl, [d]
2861   1A51 A7 00         mov bh, 0
2862   1A53             ; START RELATIONAL
2863   1A53 D7            push a
2864   1A54 11            mov a, b
2865   1A55 26 5F 00      mov b, $5f
2866   1A58 B0            cmp a, b
2867   1A59 FD 71         seq ; ==
2868   1A5B E4            pop a
2869   1A5C             ; END RELATIONAL
2870   1A5C FD A8         sor a, b ; ||
2871   1A5E E4            pop a
2872   1A5F F9            leave
2873   1A60 09            ret
2874   1A61             
2875   1A61             tolower:
2876   1A61 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2877   1A64             ;; if (ch >= 'A' && ch <= 'Z')  
2878   1A64             _if42_cond:
2879   1A64 FA 05 00      lea d, [bp + 5] ; $ch
2880   1A67 32            mov bl, [d]
2881   1A68 A7 00         mov bh, 0
2882   1A6A             ; START RELATIONAL
2883   1A6A D7            push a
2884   1A6B 11            mov a, b
2885   1A6C 26 41 00      mov b, $41
2886   1A6F B0            cmp a, b
2887   1A70 FD 80         sge ; >=
2888   1A72 E4            pop a
2889   1A73             ; END RELATIONAL
2890   1A73 D7            push a
2891   1A74 11            mov a, b
2892   1A75 FA 05 00      lea d, [bp + 5] ; $ch
2893   1A78 32            mov bl, [d]
2894   1A79 A7 00         mov bh, 0
2895   1A7B             ; START RELATIONAL
2896   1A7B D7            push a
2897   1A7C 11            mov a, b
2898   1A7D 26 5A 00      mov b, $5a
2899   1A80 B0            cmp a, b
2900   1A81 FD 73         slt ; <= (signed)
2901   1A83 E4            pop a
2902   1A84             ; END RELATIONAL
2903   1A84 FD A7         sand a, b
2904   1A86 E4            pop a
2905   1A87 C0 00 00      cmp b, 0
2906   1A8A C6 A5 1A      je _if42_else
2907   1A8D             _if42_true:
2908   1A8D             ;; return ch - 'A' + 'a'; 
2909   1A8D FA 05 00      lea d, [bp + 5] ; $ch
2910   1A90 32            mov bl, [d]
2911   1A91 A7 00         mov bh, 0
2912   1A93             ; START TERMS
2913   1A93 D7            push a
2914   1A94 11            mov a, b
2915   1A95 26 41 00      mov b, $41
2916   1A98 60            sub a, b
2917   1A99 27            mov b, a
2918   1A9A 11            mov a, b
2919   1A9B 26 61 00      mov b, $61
2920   1A9E 56            add b, a
2921   1A9F E4            pop a
2922   1AA0             ; END TERMS
2923   1AA0 F9            leave
2924   1AA1 09            ret
2925   1AA2 0A AD 1A      jmp _if42_exit
2926   1AA5             _if42_else:
2927   1AA5             ;; return ch; 
2928   1AA5 FA 05 00      lea d, [bp + 5] ; $ch
2929   1AA8 32            mov bl, [d]
2930   1AA9 A7 00         mov bh, 0
2931   1AAB F9            leave
2932   1AAC 09            ret
2933   1AAD             _if42_exit:
2934   1AAD F9            leave
2935   1AAE 09            ret
2936   1AAF             
2937   1AAF             toupper:
2938   1AAF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2939   1AB2             ;; if (ch >= 'a' && ch <= 'z')  
2940   1AB2             _if43_cond:
2941   1AB2 FA 05 00      lea d, [bp + 5] ; $ch
2942   1AB5 32            mov bl, [d]
2943   1AB6 A7 00         mov bh, 0
2944   1AB8             ; START RELATIONAL
2945   1AB8 D7            push a
2946   1AB9 11            mov a, b
2947   1ABA 26 61 00      mov b, $61
2948   1ABD B0            cmp a, b
2949   1ABE FD 80         sge ; >=
2950   1AC0 E4            pop a
2951   1AC1             ; END RELATIONAL
2952   1AC1 D7            push a
2953   1AC2 11            mov a, b
2954   1AC3 FA 05 00      lea d, [bp + 5] ; $ch
2955   1AC6 32            mov bl, [d]
2956   1AC7 A7 00         mov bh, 0
2957   1AC9             ; START RELATIONAL
2958   1AC9 D7            push a
2959   1ACA 11            mov a, b
2960   1ACB 26 7A 00      mov b, $7a
2961   1ACE B0            cmp a, b
2962   1ACF FD 73         slt ; <= (signed)
2963   1AD1 E4            pop a
2964   1AD2             ; END RELATIONAL
2965   1AD2 FD A7         sand a, b
2966   1AD4 E4            pop a
2967   1AD5 C0 00 00      cmp b, 0
2968   1AD8 C6 F3 1A      je _if43_else
2969   1ADB             _if43_true:
2970   1ADB             ;; return ch - 'a' + 'A'; 
2971   1ADB FA 05 00      lea d, [bp + 5] ; $ch
2972   1ADE 32            mov bl, [d]
2973   1ADF A7 00         mov bh, 0
2974   1AE1             ; START TERMS
2975   1AE1 D7            push a
2976   1AE2 11            mov a, b
2977   1AE3 26 61 00      mov b, $61
2978   1AE6 60            sub a, b
2979   1AE7 27            mov b, a
2980   1AE8 11            mov a, b
2981   1AE9 26 41 00      mov b, $41
2982   1AEC 56            add b, a
2983   1AED E4            pop a
2984   1AEE             ; END TERMS
2985   1AEE F9            leave
2986   1AEF 09            ret
2987   1AF0 0A FB 1A      jmp _if43_exit
2988   1AF3             _if43_else:
2989   1AF3             ;; return ch; 
2990   1AF3 FA 05 00      lea d, [bp + 5] ; $ch
2991   1AF6 32            mov bl, [d]
2992   1AF7 A7 00         mov bh, 0
2993   1AF9 F9            leave
2994   1AFA 09            ret
2995   1AFB             _if43_exit:
2996   1AFB F9            leave
2997   1AFC 09            ret
2998   1AFD             
2999   1AFD             is_delimiter:
3000   1AFD F8 00 00      enter 0 ; (push bp; mov bp, sp)
3001   1B00             ;; if( 
3002   1B00             _if44_cond:
3003   1B00 FA 05 00      lea d, [bp + 5] ; $c
3004   1B03 32            mov bl, [d]
3005   1B04 A7 00         mov bh, 0
3006   1B06             ; START RELATIONAL
3007   1B06 D7            push a
3008   1B07 11            mov a, b
3009   1B08 26 40 00      mov b, $40
3010   1B0B B0            cmp a, b
3011   1B0C FD 71         seq ; ==
3012   1B0E E4            pop a
3013   1B0F             ; END RELATIONAL
3014   1B0F D7            push a
3015   1B10 11            mov a, b
3016   1B11 FA 05 00      lea d, [bp + 5] ; $c
3017   1B14 32            mov bl, [d]
3018   1B15 A7 00         mov bh, 0
3019   1B17             ; START RELATIONAL
3020   1B17 D7            push a
3021   1B18 11            mov a, b
3022   1B19 26 23 00      mov b, $23
3023   1B1C B0            cmp a, b
3024   1B1D FD 71         seq ; ==
3025   1B1F E4            pop a
3026   1B20             ; END RELATIONAL
3027   1B20 FD A8         sor a, b ; ||
3028   1B22 11            mov a, b
3029   1B23 FA 05 00      lea d, [bp + 5] ; $c
3030   1B26 32            mov bl, [d]
3031   1B27 A7 00         mov bh, 0
3032   1B29             ; START RELATIONAL
3033   1B29 D7            push a
3034   1B2A 11            mov a, b
3035   1B2B 26 24 00      mov b, $24
3036   1B2E B0            cmp a, b
3037   1B2F FD 71         seq ; ==
3038   1B31 E4            pop a
3039   1B32             ; END RELATIONAL
3040   1B32 FD A8         sor a, b ; ||
3041   1B34 11            mov a, b
3042   1B35 FA 05 00      lea d, [bp + 5] ; $c
3043   1B38 32            mov bl, [d]
3044   1B39 A7 00         mov bh, 0
3045   1B3B             ; START RELATIONAL
3046   1B3B D7            push a
3047   1B3C 11            mov a, b
3048   1B3D 26 2B 00      mov b, $2b
3049   1B40 B0            cmp a, b
3050   1B41 FD 71         seq ; ==
3051   1B43 E4            pop a
3052   1B44             ; END RELATIONAL
3053   1B44 FD A8         sor a, b ; ||
3054   1B46 11            mov a, b
3055   1B47 FA 05 00      lea d, [bp + 5] ; $c
3056   1B4A 32            mov bl, [d]
3057   1B4B A7 00         mov bh, 0
3058   1B4D             ; START RELATIONAL
3059   1B4D D7            push a
3060   1B4E 11            mov a, b
3061   1B4F 26 2D 00      mov b, $2d
3062   1B52 B0            cmp a, b
3063   1B53 FD 71         seq ; ==
3064   1B55 E4            pop a
3065   1B56             ; END RELATIONAL
3066   1B56 FD A8         sor a, b ; ||
3067   1B58 11            mov a, b
3068   1B59 FA 05 00      lea d, [bp + 5] ; $c
3069   1B5C 32            mov bl, [d]
3070   1B5D A7 00         mov bh, 0
3071   1B5F             ; START RELATIONAL
3072   1B5F D7            push a
3073   1B60 11            mov a, b
3074   1B61 26 2A 00      mov b, $2a
3075   1B64 B0            cmp a, b
3076   1B65 FD 71         seq ; ==
3077   1B67 E4            pop a
3078   1B68             ; END RELATIONAL
3079   1B68 FD A8         sor a, b ; ||
3080   1B6A 11            mov a, b
3081   1B6B FA 05 00      lea d, [bp + 5] ; $c
3082   1B6E 32            mov bl, [d]
3083   1B6F A7 00         mov bh, 0
3084   1B71             ; START RELATIONAL
3085   1B71 D7            push a
3086   1B72 11            mov a, b
3087   1B73 26 2F 00      mov b, $2f
3088   1B76 B0            cmp a, b
3089   1B77 FD 71         seq ; ==
3090   1B79 E4            pop a
3091   1B7A             ; END RELATIONAL
3092   1B7A FD A8         sor a, b ; ||
3093   1B7C 11            mov a, b
3094   1B7D FA 05 00      lea d, [bp + 5] ; $c
3095   1B80 32            mov bl, [d]
3096   1B81 A7 00         mov bh, 0
3097   1B83             ; START RELATIONAL
3098   1B83 D7            push a
3099   1B84 11            mov a, b
3100   1B85 26 25 00      mov b, $25
3101   1B88 B0            cmp a, b
3102   1B89 FD 71         seq ; ==
3103   1B8B E4            pop a
3104   1B8C             ; END RELATIONAL
3105   1B8C FD A8         sor a, b ; ||
3106   1B8E 11            mov a, b
3107   1B8F FA 05 00      lea d, [bp + 5] ; $c
3108   1B92 32            mov bl, [d]
3109   1B93 A7 00         mov bh, 0
3110   1B95             ; START RELATIONAL
3111   1B95 D7            push a
3112   1B96 11            mov a, b
3113   1B97 26 5B 00      mov b, $5b
3114   1B9A B0            cmp a, b
3115   1B9B FD 71         seq ; ==
3116   1B9D E4            pop a
3117   1B9E             ; END RELATIONAL
3118   1B9E FD A8         sor a, b ; ||
3119   1BA0 11            mov a, b
3120   1BA1 FA 05 00      lea d, [bp + 5] ; $c
3121   1BA4 32            mov bl, [d]
3122   1BA5 A7 00         mov bh, 0
3123   1BA7             ; START RELATIONAL
3124   1BA7 D7            push a
3125   1BA8 11            mov a, b
3126   1BA9 26 5D 00      mov b, $5d
3127   1BAC B0            cmp a, b
3128   1BAD FD 71         seq ; ==
3129   1BAF E4            pop a
3130   1BB0             ; END RELATIONAL
3131   1BB0 FD A8         sor a, b ; ||
3132   1BB2 11            mov a, b
3133   1BB3 FA 05 00      lea d, [bp + 5] ; $c
3134   1BB6 32            mov bl, [d]
3135   1BB7 A7 00         mov bh, 0
3136   1BB9             ; START RELATIONAL
3137   1BB9 D7            push a
3138   1BBA 11            mov a, b
3139   1BBB 26 28 00      mov b, $28
3140   1BBE B0            cmp a, b
3141   1BBF FD 71         seq ; ==
3142   1BC1 E4            pop a
3143   1BC2             ; END RELATIONAL
3144   1BC2 FD A8         sor a, b ; ||
3145   1BC4 11            mov a, b
3146   1BC5 FA 05 00      lea d, [bp + 5] ; $c
3147   1BC8 32            mov bl, [d]
3148   1BC9 A7 00         mov bh, 0
3149   1BCB             ; START RELATIONAL
3150   1BCB D7            push a
3151   1BCC 11            mov a, b
3152   1BCD 26 29 00      mov b, $29
3153   1BD0 B0            cmp a, b
3154   1BD1 FD 71         seq ; ==
3155   1BD3 E4            pop a
3156   1BD4             ; END RELATIONAL
3157   1BD4 FD A8         sor a, b ; ||
3158   1BD6 11            mov a, b
3159   1BD7 FA 05 00      lea d, [bp + 5] ; $c
3160   1BDA 32            mov bl, [d]
3161   1BDB A7 00         mov bh, 0
3162   1BDD             ; START RELATIONAL
3163   1BDD D7            push a
3164   1BDE 11            mov a, b
3165   1BDF 26 7B 00      mov b, $7b
3166   1BE2 B0            cmp a, b
3167   1BE3 FD 71         seq ; ==
3168   1BE5 E4            pop a
3169   1BE6             ; END RELATIONAL
3170   1BE6 FD A8         sor a, b ; ||
3171   1BE8 11            mov a, b
3172   1BE9 FA 05 00      lea d, [bp + 5] ; $c
3173   1BEC 32            mov bl, [d]
3174   1BED A7 00         mov bh, 0
3175   1BEF             ; START RELATIONAL
3176   1BEF D7            push a
3177   1BF0 11            mov a, b
3178   1BF1 26 7D 00      mov b, $7d
3179   1BF4 B0            cmp a, b
3180   1BF5 FD 71         seq ; ==
3181   1BF7 E4            pop a
3182   1BF8             ; END RELATIONAL
3183   1BF8 FD A8         sor a, b ; ||
3184   1BFA 11            mov a, b
3185   1BFB FA 05 00      lea d, [bp + 5] ; $c
3186   1BFE 32            mov bl, [d]
3187   1BFF A7 00         mov bh, 0
3188   1C01             ; START RELATIONAL
3189   1C01 D7            push a
3190   1C02 11            mov a, b
3191   1C03 26 3A 00      mov b, $3a
3192   1C06 B0            cmp a, b
3193   1C07 FD 71         seq ; ==
3194   1C09 E4            pop a
3195   1C0A             ; END RELATIONAL
3196   1C0A FD A8         sor a, b ; ||
3197   1C0C 11            mov a, b
3198   1C0D FA 05 00      lea d, [bp + 5] ; $c
3199   1C10 32            mov bl, [d]
3200   1C11 A7 00         mov bh, 0
3201   1C13             ; START RELATIONAL
3202   1C13 D7            push a
3203   1C14 11            mov a, b
3204   1C15 26 3B 00      mov b, $3b
3205   1C18 B0            cmp a, b
3206   1C19 FD 71         seq ; ==
3207   1C1B E4            pop a
3208   1C1C             ; END RELATIONAL
3209   1C1C FD A8         sor a, b ; ||
3210   1C1E 11            mov a, b
3211   1C1F FA 05 00      lea d, [bp + 5] ; $c
3212   1C22 32            mov bl, [d]
3213   1C23 A7 00         mov bh, 0
3214   1C25             ; START RELATIONAL
3215   1C25 D7            push a
3216   1C26 11            mov a, b
3217   1C27 26 3C 00      mov b, $3c
3218   1C2A B0            cmp a, b
3219   1C2B FD 71         seq ; ==
3220   1C2D E4            pop a
3221   1C2E             ; END RELATIONAL
3222   1C2E FD A8         sor a, b ; ||
3223   1C30 11            mov a, b
3224   1C31 FA 05 00      lea d, [bp + 5] ; $c
3225   1C34 32            mov bl, [d]
3226   1C35 A7 00         mov bh, 0
3227   1C37             ; START RELATIONAL
3228   1C37 D7            push a
3229   1C38 11            mov a, b
3230   1C39 26 3E 00      mov b, $3e
3231   1C3C B0            cmp a, b
3232   1C3D FD 71         seq ; ==
3233   1C3F E4            pop a
3234   1C40             ; END RELATIONAL
3235   1C40 FD A8         sor a, b ; ||
3236   1C42 11            mov a, b
3237   1C43 FA 05 00      lea d, [bp + 5] ; $c
3238   1C46 32            mov bl, [d]
3239   1C47 A7 00         mov bh, 0
3240   1C49             ; START RELATIONAL
3241   1C49 D7            push a
3242   1C4A 11            mov a, b
3243   1C4B 26 3D 00      mov b, $3d
3244   1C4E B0            cmp a, b
3245   1C4F FD 71         seq ; ==
3246   1C51 E4            pop a
3247   1C52             ; END RELATIONAL
3248   1C52 FD A8         sor a, b ; ||
3249   1C54 11            mov a, b
3250   1C55 FA 05 00      lea d, [bp + 5] ; $c
3251   1C58 32            mov bl, [d]
3252   1C59 A7 00         mov bh, 0
3253   1C5B             ; START RELATIONAL
3254   1C5B D7            push a
3255   1C5C 11            mov a, b
3256   1C5D 26 21 00      mov b, $21
3257   1C60 B0            cmp a, b
3258   1C61 FD 71         seq ; ==
3259   1C63 E4            pop a
3260   1C64             ; END RELATIONAL
3261   1C64 FD A8         sor a, b ; ||
3262   1C66 11            mov a, b
3263   1C67 FA 05 00      lea d, [bp + 5] ; $c
3264   1C6A 32            mov bl, [d]
3265   1C6B A7 00         mov bh, 0
3266   1C6D             ; START RELATIONAL
3267   1C6D D7            push a
3268   1C6E 11            mov a, b
3269   1C6F 26 5E 00      mov b, $5e
3270   1C72 B0            cmp a, b
3271   1C73 FD 71         seq ; ==
3272   1C75 E4            pop a
3273   1C76             ; END RELATIONAL
3274   1C76 FD A8         sor a, b ; ||
3275   1C78 11            mov a, b
3276   1C79 FA 05 00      lea d, [bp + 5] ; $c
3277   1C7C 32            mov bl, [d]
3278   1C7D A7 00         mov bh, 0
3279   1C7F             ; START RELATIONAL
3280   1C7F D7            push a
3281   1C80 11            mov a, b
3282   1C81 26 26 00      mov b, $26
3283   1C84 B0            cmp a, b
3284   1C85 FD 71         seq ; ==
3285   1C87 E4            pop a
3286   1C88             ; END RELATIONAL
3287   1C88 FD A8         sor a, b ; ||
3288   1C8A 11            mov a, b
3289   1C8B FA 05 00      lea d, [bp + 5] ; $c
3290   1C8E 32            mov bl, [d]
3291   1C8F A7 00         mov bh, 0
3292   1C91             ; START RELATIONAL
3293   1C91 D7            push a
3294   1C92 11            mov a, b
3295   1C93 26 7C 00      mov b, $7c
3296   1C96 B0            cmp a, b
3297   1C97 FD 71         seq ; ==
3298   1C99 E4            pop a
3299   1C9A             ; END RELATIONAL
3300   1C9A FD A8         sor a, b ; ||
3301   1C9C 11            mov a, b
3302   1C9D FA 05 00      lea d, [bp + 5] ; $c
3303   1CA0 32            mov bl, [d]
3304   1CA1 A7 00         mov bh, 0
3305   1CA3             ; START RELATIONAL
3306   1CA3 D7            push a
3307   1CA4 11            mov a, b
3308   1CA5 26 7E 00      mov b, $7e
3309   1CA8 B0            cmp a, b
3310   1CA9 FD 71         seq ; ==
3311   1CAB E4            pop a
3312   1CAC             ; END RELATIONAL
3313   1CAC FD A8         sor a, b ; ||
3314   1CAE 11            mov a, b
3315   1CAF FA 05 00      lea d, [bp + 5] ; $c
3316   1CB2 32            mov bl, [d]
3317   1CB3 A7 00         mov bh, 0
3318   1CB5             ; START RELATIONAL
3319   1CB5 D7            push a
3320   1CB6 11            mov a, b
3321   1CB7 26 2E 00      mov b, $2e
3322   1CBA B0            cmp a, b
3323   1CBB FD 71         seq ; ==
3324   1CBD E4            pop a
3325   1CBE             ; END RELATIONAL
3326   1CBE FD A8         sor a, b ; ||
3327   1CC0 E4            pop a
3328   1CC1 C0 00 00      cmp b, 0
3329   1CC4 C6 CF 1C      je _if44_else
3330   1CC7             _if44_true:
3331   1CC7             ;; return 1; 
3332   1CC7 26 01 00      mov b, $1
3333   1CCA F9            leave
3334   1CCB 09            ret
3335   1CCC 0A D4 1C      jmp _if44_exit
3336   1CCF             _if44_else:
3337   1CCF             ;; return 0; 
3338   1CCF 26 00 00      mov b, $0
3339   1CD2 F9            leave
3340   1CD3 09            ret
3341   1CD4             _if44_exit:
3342   1CD4 F9            leave
3343   1CD5 09            ret
3344   1CD6             
3345   1CD6             TO_FIXED:
3346   1CD6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3347   1CD9             ;; return x * 10; 
3348   1CD9 FA 05 00      lea d, [bp + 5] ; $x
3349   1CDC 2A            mov b, [d]
3350   1CDD             ; START FACTORS
3351   1CDD D7            push a
3352   1CDE 11            mov a, b
3353   1CDF 26 0A 00      mov b, $a
3354   1CE2 AC            mul a, b ; *
3355   1CE3 11            mov a, b
3356   1CE4 27            mov b, a
3357   1CE5 E4            pop a
3358   1CE6             ; END FACTORS
3359   1CE6 F9            leave
3360   1CE7 09            ret
3361   1CE8             
3362   1CE8             FROM_FIXED:
3363   1CE8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3364   1CEB             ;; return x / 10; 
3365   1CEB FA 05 00      lea d, [bp + 5] ; $x
3366   1CEE 2A            mov b, [d]
3367   1CEF             ; START FACTORS
3368   1CEF D7            push a
3369   1CF0 11            mov a, b
3370   1CF1 26 0A 00      mov b, $a
3371   1CF4 AE            div a, b
3372   1CF5 27            mov b, a
3373   1CF6 E4            pop a
3374   1CF7             ; END FACTORS
3375   1CF7 F9            leave
3376   1CF8 09            ret
3377   1CF9             
3378   1CF9             TO_FIXED00:
3379   1CF9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3380   1CFC             ;; return x * 100; 
3381   1CFC FA 05 00      lea d, [bp + 5] ; $x
3382   1CFF 2A            mov b, [d]
3383   1D00             ; START FACTORS
3384   1D00 D7            push a
3385   1D01 11            mov a, b
3386   1D02 26 64 00      mov b, $64
3387   1D05 AC            mul a, b ; *
3388   1D06 11            mov a, b
3389   1D07 27            mov b, a
3390   1D08 E4            pop a
3391   1D09             ; END FACTORS
3392   1D09 F9            leave
3393   1D0A 09            ret
3394   1D0B             
3395   1D0B             FROM_FIXED00:
3396   1D0B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3397   1D0E             ;; return x / 100; 
3398   1D0E FA 05 00      lea d, [bp + 5] ; $x
3399   1D11 2A            mov b, [d]
3400   1D12             ; START FACTORS
3401   1D12 D7            push a
3402   1D13 11            mov a, b
3403   1D14 26 64 00      mov b, $64
3404   1D17 AE            div a, b
3405   1D18 27            mov b, a
3406   1D19 E4            pop a
3407   1D1A             ; END FACTORS
3408   1D1A F9            leave
3409   1D1B 09            ret
3410   1D1C             
3411   1D1C             get_rand:
3412   1D1C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3413   1D1F             ; $r 
3414   1D1F 52 02 00      sub sp, 2
3415   1D22             ;; r = rand(); 
3416   1D22 FA FF FF      lea d, [bp + -1] ; $r
3417   1D25 DA            push d
3418   1D26 07 94 18      call rand
3419   1D29 E7            pop d
3420   1D2A FD 43         mov [d], b
3421   1D2C             ;; r = (r >> 8) | (r << 8); 
3422   1D2C FA FF FF      lea d, [bp + -1] ; $r
3423   1D2F DA            push d
3424   1D30 FA FF FF      lea d, [bp + -1] ; $r
3425   1D33 2A            mov b, [d]
3426   1D34             ; START SHIFT
3427   1D34 D7            push a
3428   1D35 11            mov a, b
3429   1D36 26 08 00      mov b, $8
3430   1D39 FD 39         mov c, b
3431   1D3B A1            shr a, cl
3432   1D3C 27            mov b, a
3433   1D3D E4            pop a
3434   1D3E             ; END SHIFT
3435   1D3E D7            push a
3436   1D3F 11            mov a, b
3437   1D40 FA FF FF      lea d, [bp + -1] ; $r
3438   1D43 2A            mov b, [d]
3439   1D44             ; START SHIFT
3440   1D44 D7            push a
3441   1D45 11            mov a, b
3442   1D46 26 08 00      mov b, $8
3443   1D49 FD 39         mov c, b
3444   1D4B 9D            shl a, cl
3445   1D4C 27            mov b, a
3446   1D4D E4            pop a
3447   1D4E             ; END SHIFT
3448   1D4E FD 70         or b, a ; |
3449   1D50 E4            pop a
3450   1D51 E7            pop d
3451   1D52 FD 43         mov [d], b
3452   1D54             ;; return ((r % spread) + 1); 
3453   1D54 FA FF FF      lea d, [bp + -1] ; $r
3454   1D57 2A            mov b, [d]
3455   1D58             ; START FACTORS
3456   1D58 D7            push a
3457   1D59 11            mov a, b
3458   1D5A FA 05 00      lea d, [bp + 5] ; $spread
3459   1D5D 2A            mov b, [d]
3460   1D5E AE            div a, b ; 
3461   1D5F 11            mov a, b
3462   1D60 27            mov b, a
3463   1D61 E4            pop a
3464   1D62             ; END FACTORS
3465   1D62             ; START TERMS
3466   1D62 D7            push a
3467   1D63 11            mov a, b
3468   1D64 26 01 00      mov b, $1
3469   1D67 56            add b, a
3470   1D68 E4            pop a
3471   1D69             ; END TERMS
3472   1D69 F9            leave
3473   1D6A 09            ret
3474   1D6B             
3475   1D6B             rand8:
3476   1D6B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3477   1D6E             ;; return (get_rand(8)); 
3478   1D6E 26 08 00      mov b, $8
3479   1D71 FD AB         swp b
3480   1D73 D8            push b
3481   1D74 07 1C 1D      call get_rand
3482   1D77 51 02 00      add sp, 2
3483   1D7A F9            leave
3484   1D7B 09            ret
3485   1D7C             
3486   1D7C             input:
3487   1D7C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3488   1D7F             ; $c 
3489   1D7F 52 02 00      sub sp, 2
3490   1D82             ;; while((c = getchar()) != '\n') { 
3491   1D82             _while45_cond:
3492   1D82 FA FF FF      lea d, [bp + -1] ; $c
3493   1D85 DA            push d
3494   1D86 07 08 13      call getchar
3495   1D89 E7            pop d
3496   1D8A FD 43         mov [d], b
3497   1D8C             ; START RELATIONAL
3498   1D8C D7            push a
3499   1D8D 11            mov a, b
3500   1D8E 26 0A 00      mov b, $a
3501   1D91 B0            cmp a, b
3502   1D92 FD 72         sneq ; !=
3503   1D94 E4            pop a
3504   1D95             ; END RELATIONAL
3505   1D95 C0 00 00      cmp b, 0
3506   1D98 C6 F3 1D      je _while45_exit
3507   1D9B             _while45_block:
3508   1D9B             ;; if (c == -1) 
3509   1D9B             _if46_cond:
3510   1D9B FA FF FF      lea d, [bp + -1] ; $c
3511   1D9E 2A            mov b, [d]
3512   1D9F             ; START RELATIONAL
3513   1D9F D7            push a
3514   1DA0 11            mov a, b
3515   1DA1 26 FF FF      mov b, $ffff
3516   1DA4 B0            cmp a, b
3517   1DA5 FD 71         seq ; ==
3518   1DA7 E4            pop a
3519   1DA8             ; END RELATIONAL
3520   1DA8 C0 00 00      cmp b, 0
3521   1DAB C6 B4 1D      je _if46_exit
3522   1DAE             _if46_true:
3523   1DAE             ;; exit(); 
3524   1DAE 07 2E 17      call exit
3525   1DB1 0A B4 1D      jmp _if46_exit
3526   1DB4             _if46_exit:
3527   1DB4             ;; if (l > 1) { 
3528   1DB4             _if47_cond:
3529   1DB4 FA 07 00      lea d, [bp + 7] ; $l
3530   1DB7 32            mov bl, [d]
3531   1DB8 A7 00         mov bh, 0
3532   1DBA             ; START RELATIONAL
3533   1DBA D7            push a
3534   1DBB 11            mov a, b
3535   1DBC 26 01 00      mov b, $1
3536   1DBF B0            cmp a, b
3537   1DC0 FD 81         sgu ; > (unsigned)
3538   1DC2 E4            pop a
3539   1DC3             ; END RELATIONAL
3540   1DC3 C0 00 00      cmp b, 0
3541   1DC6 C6 F0 1D      je _if47_exit
3542   1DC9             _if47_true:
3543   1DC9             ;; *b++ = c; 
3544   1DC9 FA 05 00      lea d, [bp + 5] ; $b
3545   1DCC 2A            mov b, [d]
3546   1DCD D8            push b
3547   1DCE FD 77         inc b
3548   1DD0 FA 05 00      lea d, [bp + 5] ; $b
3549   1DD3 FD 43         mov [d], b
3550   1DD5 E5            pop b
3551   1DD6 D8            push b
3552   1DD7 FA FF FF      lea d, [bp + -1] ; $c
3553   1DDA 2A            mov b, [d]
3554   1DDB E7            pop d
3555   1DDC FD 3E         mov [d], bl
3556   1DDE             ;; l--; 
3557   1DDE FA 07 00      lea d, [bp + 7] ; $l
3558   1DE1 32            mov bl, [d]
3559   1DE2 A7 00         mov bh, 0
3560   1DE4 D8            push b
3561   1DE5 FD 7D         dec b
3562   1DE7 FA 07 00      lea d, [bp + 7] ; $l
3563   1DEA FD 43         mov [d], b
3564   1DEC E5            pop b
3565   1DED 0A F0 1D      jmp _if47_exit
3566   1DF0             _if47_exit:
3567   1DF0 0A 82 1D      jmp _while45_cond
3568   1DF3             _while45_exit:
3569   1DF3             ;; *b = 0; 
3570   1DF3 FA 05 00      lea d, [bp + 5] ; $b
3571   1DF6 2A            mov b, [d]
3572   1DF7 D8            push b
3573   1DF8 26 00 00      mov b, $0
3574   1DFB E7            pop d
3575   1DFC FD 3E         mov [d], bl
3576   1DFE F9            leave
3577   1DFF 09            ret
3578   1E00             
3579   1E00             yesno:
3580   1E00 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3581   1E03             ; $b 
3582   1E03 52 02 00      sub sp, 2
3583   1E06             ;; input(b,2); 
3584   1E06 26 02 00      mov b, $2
3585   1E09 DD            push bl
3586   1E0A FA FF FF      lea d, [bp + -1] ; $b
3587   1E0D 2D            mov b, d
3588   1E0E FD AB         swp b
3589   1E10 D8            push b
3590   1E11 07 7C 1D      call input
3591   1E14 51 03 00      add sp, 3
3592   1E17             ;; if (tolower(*b) == 'y') 
3593   1E17             _if48_cond:
3594   1E17 FA FF FF      lea d, [bp + -1] ; $b
3595   1E1A 2D            mov b, d
3596   1E1B 74            mov d, b
3597   1E1C 32            mov bl, [d]
3598   1E1D A7 00         mov bh, 0
3599   1E1F DD            push bl
3600   1E20 07 61 1A      call tolower
3601   1E23 51 01 00      add sp, 1
3602   1E26             ; START RELATIONAL
3603   1E26 D7            push a
3604   1E27 11            mov a, b
3605   1E28 26 79 00      mov b, $79
3606   1E2B B0            cmp a, b
3607   1E2C FD 71         seq ; ==
3608   1E2E E4            pop a
3609   1E2F             ; END RELATIONAL
3610   1E2F C0 00 00      cmp b, 0
3611   1E32 C6 3D 1E      je _if48_exit
3612   1E35             _if48_true:
3613   1E35             ;; return 1; 
3614   1E35 26 01 00      mov b, $1
3615   1E38 F9            leave
3616   1E39 09            ret
3617   1E3A 0A 3D 1E      jmp _if48_exit
3618   1E3D             _if48_exit:
3619   1E3D             ;; return 0; 
3620   1E3D 26 00 00      mov b, $0
3621   1E40 F9            leave
3622   1E41 09            ret
3623   1E42             
3624   1E42             input_f00:
3625   1E42 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3626   1E45             ; $v 
3627   1E45             ; $buf 
3628   1E45             ; $x 
3629   1E45 52 0C 00      sub sp, 12
3630   1E48             ;; input(buf, 8); 
3631   1E48 26 08 00      mov b, $8
3632   1E4B DD            push bl
3633   1E4C FA F7 FF      lea d, [bp + -9] ; $buf
3634   1E4F 2D            mov b, d
3635   1E50 FD AB         swp b
3636   1E52 D8            push b
3637   1E53 07 7C 1D      call input
3638   1E56 51 03 00      add sp, 3
3639   1E59             ;; x = buf; 
3640   1E59 FA F5 FF      lea d, [bp + -11] ; $x
3641   1E5C DA            push d
3642   1E5D FA F7 FF      lea d, [bp + -9] ; $buf
3643   1E60 2D            mov b, d
3644   1E61 E7            pop d
3645   1E62 FD 43         mov [d], b
3646   1E64             ;; if (!is_digit(*x)) 
3647   1E64             _if49_cond:
3648   1E64 FA F5 FF      lea d, [bp + -11] ; $x
3649   1E67 2A            mov b, [d]
3650   1E68 74            mov d, b
3651   1E69 32            mov bl, [d]
3652   1E6A A7 00         mov bh, 0
3653   1E6C DD            push bl
3654   1E6D 07 D7 19      call is_digit
3655   1E70 51 01 00      add sp, 1
3656   1E73 C0 00 00      cmp b, 0
3657   1E76 FD 71         seq ; !
3658   1E78 C0 00 00      cmp b, 0
3659   1E7B C6 86 1E      je _if49_exit
3660   1E7E             _if49_true:
3661   1E7E             ;; return -1; 
3662   1E7E 26 FF FF      mov b, $ffff
3663   1E81 F9            leave
3664   1E82 09            ret
3665   1E83 0A 86 1E      jmp _if49_exit
3666   1E86             _if49_exit:
3667   1E86             ;; v = 100 * (*x++ - '0'); 
3668   1E86 FA FF FF      lea d, [bp + -1] ; $v
3669   1E89 DA            push d
3670   1E8A 26 64 00      mov b, $64
3671   1E8D             ; START FACTORS
3672   1E8D D7            push a
3673   1E8E 11            mov a, b
3674   1E8F FA F5 FF      lea d, [bp + -11] ; $x
3675   1E92 2A            mov b, [d]
3676   1E93 D8            push b
3677   1E94 FD 77         inc b
3678   1E96 FA F5 FF      lea d, [bp + -11] ; $x
3679   1E99 FD 43         mov [d], b
3680   1E9B E5            pop b
3681   1E9C 74            mov d, b
3682   1E9D 32            mov bl, [d]
3683   1E9E A7 00         mov bh, 0
3684   1EA0             ; START TERMS
3685   1EA0 D7            push a
3686   1EA1 11            mov a, b
3687   1EA2 26 30 00      mov b, $30
3688   1EA5 60            sub a, b
3689   1EA6 27            mov b, a
3690   1EA7 E4            pop a
3691   1EA8             ; END TERMS
3692   1EA8 AC            mul a, b ; *
3693   1EA9 11            mov a, b
3694   1EAA 27            mov b, a
3695   1EAB E4            pop a
3696   1EAC             ; END FACTORS
3697   1EAC E7            pop d
3698   1EAD FD 43         mov [d], b
3699   1EAF             ;; if (*x == 0) 
3700   1EAF             _if50_cond:
3701   1EAF FA F5 FF      lea d, [bp + -11] ; $x
3702   1EB2 2A            mov b, [d]
3703   1EB3 74            mov d, b
3704   1EB4 32            mov bl, [d]
3705   1EB5 A7 00         mov bh, 0
3706   1EB7             ; START RELATIONAL
3707   1EB7 D7            push a
3708   1EB8 11            mov a, b
3709   1EB9 26 00 00      mov b, $0
3710   1EBC B0            cmp a, b
3711   1EBD FD 71         seq ; ==
3712   1EBF E4            pop a
3713   1EC0             ; END RELATIONAL
3714   1EC0 C0 00 00      cmp b, 0
3715   1EC3 C6 CF 1E      je _if50_exit
3716   1EC6             _if50_true:
3717   1EC6             ;; return v; 
3718   1EC6 FA FF FF      lea d, [bp + -1] ; $v
3719   1EC9 2A            mov b, [d]
3720   1ECA F9            leave
3721   1ECB 09            ret
3722   1ECC 0A CF 1E      jmp _if50_exit
3723   1ECF             _if50_exit:
3724   1ECF             ;; if (*x++ != '.') 
3725   1ECF             _if51_cond:
3726   1ECF FA F5 FF      lea d, [bp + -11] ; $x
3727   1ED2 2A            mov b, [d]
3728   1ED3 D8            push b
3729   1ED4 FD 77         inc b
3730   1ED6 FA F5 FF      lea d, [bp + -11] ; $x
3731   1ED9 FD 43         mov [d], b
3732   1EDB E5            pop b
3733   1EDC 74            mov d, b
3734   1EDD 32            mov bl, [d]
3735   1EDE A7 00         mov bh, 0
3736   1EE0             ; START RELATIONAL
3737   1EE0 D7            push a
3738   1EE1 11            mov a, b
3739   1EE2 26 2E 00      mov b, $2e
3740   1EE5 B0            cmp a, b
3741   1EE6 FD 72         sneq ; !=
3742   1EE8 E4            pop a
3743   1EE9             ; END RELATIONAL
3744   1EE9 C0 00 00      cmp b, 0
3745   1EEC C6 F7 1E      je _if51_exit
3746   1EEF             _if51_true:
3747   1EEF             ;; return -1; 
3748   1EEF 26 FF FF      mov b, $ffff
3749   1EF2 F9            leave
3750   1EF3 09            ret
3751   1EF4 0A F7 1E      jmp _if51_exit
3752   1EF7             _if51_exit:
3753   1EF7             ;; if (!is_digit(*x)) 
3754   1EF7             _if52_cond:
3755   1EF7 FA F5 FF      lea d, [bp + -11] ; $x
3756   1EFA 2A            mov b, [d]
3757   1EFB 74            mov d, b
3758   1EFC 32            mov bl, [d]
3759   1EFD A7 00         mov bh, 0
3760   1EFF DD            push bl
3761   1F00 07 D7 19      call is_digit
3762   1F03 51 01 00      add sp, 1
3763   1F06 C0 00 00      cmp b, 0
3764   1F09 FD 71         seq ; !
3765   1F0B C0 00 00      cmp b, 0
3766   1F0E C6 19 1F      je _if52_exit
3767   1F11             _if52_true:
3768   1F11             ;; return -1; 
3769   1F11 26 FF FF      mov b, $ffff
3770   1F14 F9            leave
3771   1F15 09            ret
3772   1F16 0A 19 1F      jmp _if52_exit
3773   1F19             _if52_exit:
3774   1F19             ;; v = v + 10 * (*x++ - '0'); 
3775   1F19 FA FF FF      lea d, [bp + -1] ; $v
3776   1F1C DA            push d
3777   1F1D FA FF FF      lea d, [bp + -1] ; $v
3778   1F20 2A            mov b, [d]
3779   1F21             ; START TERMS
3780   1F21 D7            push a
3781   1F22 11            mov a, b
3782   1F23 26 0A 00      mov b, $a
3783   1F26             ; START FACTORS
3784   1F26 D7            push a
3785   1F27 11            mov a, b
3786   1F28 FA F5 FF      lea d, [bp + -11] ; $x
3787   1F2B 2A            mov b, [d]
3788   1F2C D8            push b
3789   1F2D FD 77         inc b
3790   1F2F FA F5 FF      lea d, [bp + -11] ; $x
3791   1F32 FD 43         mov [d], b
3792   1F34 E5            pop b
3793   1F35 74            mov d, b
3794   1F36 32            mov bl, [d]
3795   1F37 A7 00         mov bh, 0
3796   1F39             ; START TERMS
3797   1F39 D7            push a
3798   1F3A 11            mov a, b
3799   1F3B 26 30 00      mov b, $30
3800   1F3E 60            sub a, b
3801   1F3F 27            mov b, a
3802   1F40 E4            pop a
3803   1F41             ; END TERMS
3804   1F41 AC            mul a, b ; *
3805   1F42 11            mov a, b
3806   1F43 27            mov b, a
3807   1F44 E4            pop a
3808   1F45             ; END FACTORS
3809   1F45 56            add b, a
3810   1F46 E4            pop a
3811   1F47             ; END TERMS
3812   1F47 E7            pop d
3813   1F48 FD 43         mov [d], b
3814   1F4A             ;; if (!*x) 
3815   1F4A             _if53_cond:
3816   1F4A FA F5 FF      lea d, [bp + -11] ; $x
3817   1F4D 2A            mov b, [d]
3818   1F4E 74            mov d, b
3819   1F4F 32            mov bl, [d]
3820   1F50 A7 00         mov bh, 0
3821   1F52 C0 00 00      cmp b, 0
3822   1F55 FD 71         seq ; !
3823   1F57 C0 00 00      cmp b, 0
3824   1F5A C6 66 1F      je _if53_exit
3825   1F5D             _if53_true:
3826   1F5D             ;; return v; 
3827   1F5D FA FF FF      lea d, [bp + -1] ; $v
3828   1F60 2A            mov b, [d]
3829   1F61 F9            leave
3830   1F62 09            ret
3831   1F63 0A 66 1F      jmp _if53_exit
3832   1F66             _if53_exit:
3833   1F66             ;; if (!is_digit(*x)) 
3834   1F66             _if54_cond:
3835   1F66 FA F5 FF      lea d, [bp + -11] ; $x
3836   1F69 2A            mov b, [d]
3837   1F6A 74            mov d, b
3838   1F6B 32            mov bl, [d]
3839   1F6C A7 00         mov bh, 0
3840   1F6E DD            push bl
3841   1F6F 07 D7 19      call is_digit
3842   1F72 51 01 00      add sp, 1
3843   1F75 C0 00 00      cmp b, 0
3844   1F78 FD 71         seq ; !
3845   1F7A C0 00 00      cmp b, 0
3846   1F7D C6 88 1F      je _if54_exit
3847   1F80             _if54_true:
3848   1F80             ;; return -1; 
3849   1F80 26 FF FF      mov b, $ffff
3850   1F83 F9            leave
3851   1F84 09            ret
3852   1F85 0A 88 1F      jmp _if54_exit
3853   1F88             _if54_exit:
3854   1F88             ;; v = v + *x++ - '0'; 
3855   1F88 FA FF FF      lea d, [bp + -1] ; $v
3856   1F8B DA            push d
3857   1F8C FA FF FF      lea d, [bp + -1] ; $v
3858   1F8F 2A            mov b, [d]
3859   1F90             ; START TERMS
3860   1F90 D7            push a
3861   1F91 11            mov a, b
3862   1F92 FA F5 FF      lea d, [bp + -11] ; $x
3863   1F95 2A            mov b, [d]
3864   1F96 D8            push b
3865   1F97 FD 77         inc b
3866   1F99 FA F5 FF      lea d, [bp + -11] ; $x
3867   1F9C FD 43         mov [d], b
3868   1F9E E5            pop b
3869   1F9F 74            mov d, b
3870   1FA0 32            mov bl, [d]
3871   1FA1 A7 00         mov bh, 0
3872   1FA3 56            add b, a
3873   1FA4 11            mov a, b
3874   1FA5 26 30 00      mov b, $30
3875   1FA8 60            sub a, b
3876   1FA9 27            mov b, a
3877   1FAA E4            pop a
3878   1FAB             ; END TERMS
3879   1FAB E7            pop d
3880   1FAC FD 43         mov [d], b
3881   1FAE             ;; return v; 
3882   1FAE FA FF FF      lea d, [bp + -1] ; $v
3883   1FB1 2A            mov b, [d]
3884   1FB2 F9            leave
3885   1FB3 09            ret
3886   1FB4             
3887   1FB4             input_int:
3888   1FB4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3889   1FB7             ; $x 
3890   1FB7 52 08 00      sub sp, 8
3891   1FBA             ;; input(x, 8); 
3892   1FBA 26 08 00      mov b, $8
3893   1FBD DD            push bl
3894   1FBE FA F9 FF      lea d, [bp + -7] ; $x
3895   1FC1 2D            mov b, d
3896   1FC2 FD AB         swp b
3897   1FC4 D8            push b
3898   1FC5 07 7C 1D      call input
3899   1FC8 51 03 00      add sp, 3
3900   1FCB             ;; if (!is_digit(*x)) 
3901   1FCB             _if55_cond:
3902   1FCB FA F9 FF      lea d, [bp + -7] ; $x
3903   1FCE 2D            mov b, d
3904   1FCF 74            mov d, b
3905   1FD0 32            mov bl, [d]
3906   1FD1 A7 00         mov bh, 0
3907   1FD3 DD            push bl
3908   1FD4 07 D7 19      call is_digit
3909   1FD7 51 01 00      add sp, 1
3910   1FDA C0 00 00      cmp b, 0
3911   1FDD FD 71         seq ; !
3912   1FDF C0 00 00      cmp b, 0
3913   1FE2 C6 ED 1F      je _if55_exit
3914   1FE5             _if55_true:
3915   1FE5             ;; return -1; 
3916   1FE5 26 FF FF      mov b, $ffff
3917   1FE8 F9            leave
3918   1FE9 09            ret
3919   1FEA 0A ED 1F      jmp _if55_exit
3920   1FED             _if55_exit:
3921   1FED             ;; return atoi(x); 
3922   1FED FA F9 FF      lea d, [bp + -7] ; $x
3923   1FF0 2D            mov b, d
3924   1FF1 FD AB         swp b
3925   1FF3 D8            push b
3926   1FF4 07 85 17      call atoi
3927   1FF7 51 02 00      add sp, 2
3928   1FFA F9            leave
3929   1FFB 09            ret
3930   1FFC             
3931   1FFC             print100:
3932   1FFC F8 00 00      enter 0 ; (push bp; mov bp, sp)
3933   1FFF             ; $p 
3934   1FFF 52 02 00      sub sp, 2
3935   2002             ;; *p = buf; 
3936   2002 FA FF FF      lea d, [bp + -1] ; $p
3937   2005 2A            mov b, [d]
3938   2006 D8            push b
3939   2007 3B CF 27      mov d, st_print100_buf_dt ; static buf
3940   200A 2D            mov b, d
3941   200B E7            pop d
3942   200C FD 3E         mov [d], bl
3943   200E             ;; if (v < 0) { 
3944   200E             _if56_cond:
3945   200E FA 05 00      lea d, [bp + 5] ; $v
3946   2011 2A            mov b, [d]
3947   2012             ; START RELATIONAL
3948   2012 D7            push a
3949   2013 11            mov a, b
3950   2014 26 00 00      mov b, $0
3951   2017 B0            cmp a, b
3952   2018 FD 73         slt ; < (signed)
3953   201A E4            pop a
3954   201B             ; END RELATIONAL
3955   201B C0 00 00      cmp b, 0
3956   201E C6 45 20      je _if56_exit
3957   2021             _if56_true:
3958   2021             ;; v = -v; 
3959   2021 FA 05 00      lea d, [bp + 5] ; $v
3960   2024 DA            push d
3961   2025 FA 05 00      lea d, [bp + 5] ; $v
3962   2028 2A            mov b, [d]
3963   2029 FD 97         neg b
3964   202B E7            pop d
3965   202C FD 43         mov [d], b
3966   202E             ;; *p++ = '-'; 
3967   202E FA FF FF      lea d, [bp + -1] ; $p
3968   2031 2A            mov b, [d]
3969   2032 D8            push b
3970   2033 FD 77         inc b
3971   2035 FA FF FF      lea d, [bp + -1] ; $p
3972   2038 FD 43         mov [d], b
3973   203A E5            pop b
3974   203B D8            push b
3975   203C 26 2D 00      mov b, $2d
3976   203F E7            pop d
3977   2040 FD 3E         mov [d], bl
3978   2042 0A 45 20      jmp _if56_exit
3979   2045             _if56_exit:
3980   2045             ;; return buf; 
3981   2045 3B CF 27      mov d, st_print100_buf_dt ; static buf
3982   2048 2D            mov b, d
3983   2049 F9            leave
3984   204A 09            ret
3985   204B             
3986   204B             inoperable:
3987   204B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3988   204E             ;; if (damage[u] < 0) { 
3989   204E             _if57_cond:
3990   204E 3B 34 26      mov d, _damage_data ; $damage
3991   2051 D7            push a
3992   2052 DA            push d
3993   2053 FA 05 00      lea d, [bp + 5] ; $u
3994   2056 32            mov bl, [d]
3995   2057 A7 00         mov bh, 0
3996   2059 E7            pop d
3997   205A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3998   205E E4            pop a
3999   205F 2A            mov b, [d]
4000   2060             ; START RELATIONAL
4001   2060 D7            push a
4002   2061 11            mov a, b
4003   2062 26 00 00      mov b, $0
4004   2065 B0            cmp a, b
4005   2066 FD 73         slt ; < (signed)
4006   2068 E4            pop a
4007   2069             ; END RELATIONAL
4008   2069 C0 00 00      cmp b, 0
4009   206C C6 A4 20      je _if57_exit
4010   206F             _if57_true:
4011   206F             ;; printf("%s %s inoperable.\n", 
4012   206F             _ternary59_cond:
4013   206F FA 05 00      lea d, [bp + 5] ; $u
4014   2072 32            mov bl, [d]
4015   2073 A7 00         mov bh, 0
4016   2075             ; START RELATIONAL
4017   2075 D7            push a
4018   2076 11            mov a, b
4019   2077 26 05 00      mov b, $5
4020   207A B0            cmp a, b
4021   207B FD 71         seq ; ==
4022   207D E4            pop a
4023   207E             ; END RELATIONAL
4024   207E C0 00 00      cmp b, 0
4025   2081 C6 8A 20      je _ternary59_false
4026   2084             _ternary59_true:
4027   2084 26 34 29      mov b, __s32 ; "are"
4028   2087 0A 8D 20      jmp _ternary59_exit
4029   208A             _ternary59_false:
4030   208A 26 38 29      mov b, __s33 ; "is"
4031   208D             _ternary59_exit:
4032   208D FD AB         swp b
4033   208F D8            push b
4034   2090 26 3B 29      mov b, __s34 ; "%s %s inoperable.\n"
4035   2093 FD AB         swp b
4036   2095 D8            push b
4037   2096 07 D1 05      call printf
4038   2099 51 04 00      add sp, 4
4039   209C             ;; return 1; 
4040   209C 26 01 00      mov b, $1
4041   209F F9            leave
4042   20A0 09            ret
4043   20A1 0A A4 20      jmp _if57_exit
4044   20A4             _if57_exit:
4045   20A4             ;; return 0; 
4046   20A4 26 00 00      mov b, $0
4047   20A7 F9            leave
4048   20A8 09            ret
4049   20A9             
4050   20A9             intro:
4051   20A9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4052   20AC             ;; stardate = TO_FIXED((get_rand(20) + 20) * 100); 
4053   20AC 3B 4C 26      mov d, _stardate ; $stardate
4054   20AF DA            push d
4055   20B0 26 14 00      mov b, $14
4056   20B3 FD AB         swp b
4057   20B5 D8            push b
4058   20B6 07 1C 1D      call get_rand
4059   20B9 51 02 00      add sp, 2
4060   20BC             ; START TERMS
4061   20BC D7            push a
4062   20BD 11            mov a, b
4063   20BE 26 14 00      mov b, $14
4064   20C1 56            add b, a
4065   20C2 E4            pop a
4066   20C3             ; END TERMS
4067   20C3             ; START FACTORS
4068   20C3 D7            push a
4069   20C4 11            mov a, b
4070   20C5 26 64 00      mov b, $64
4071   20C8 AC            mul a, b ; *
4072   20C9 11            mov a, b
4073   20CA 27            mov b, a
4074   20CB E4            pop a
4075   20CC             ; END FACTORS
4076   20CC FD AB         swp b
4077   20CE D8            push b
4078   20CF 07 D6 1C      call TO_FIXED
4079   20D2 51 02 00      add sp, 2
4080   20D5 E7            pop d
4081   20D6 FD 43         mov [d], b
4082   20D8 F9            leave
4083   20D9 09            ret
4084   20DA             
4085   20DA             new_game:
4086   20DA F8 00 00      enter 0 ; (push bp; mov bp, sp)
4087   20DD F9            leave
4088   20DE 09            ret
4089   20DF             
4090   20DF             initialize:
4091   20DF F8 00 00      enter 0 ; (push bp; mov bp, sp)
4092   20E2             ;; getchar(); 
4093   20E2 07 08 13      call getchar
4094   20E5 F9            leave
4095   20E6 09            ret
4096   20E7             
4097   20E7             place_ship:
4098   20E7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4099   20EA             ;; quad[FROM_FIXED00(ship_y) - 1][FROM_FIXED00(ship_x) - 1] =  		4     ; 
4100   20EA 3B 4E 26      mov d, _quad_data ; $quad
4101   20ED D7            push a
4102   20EE DA            push d
4103   20EF 3B 48 26      mov d, _ship_y ; $ship_y
4104   20F2 2A            mov b, [d]
4105   20F3 FD AB         swp b
4106   20F5 D8            push b
4107   20F6 07 0B 1D      call FROM_FIXED00
4108   20F9 51 02 00      add sp, 2
4109   20FC             ; START TERMS
4110   20FC D7            push a
4111   20FD 11            mov a, b
4112   20FE 26 01 00      mov b, $1
4113   2101 60            sub a, b
4114   2102 27            mov b, a
4115   2103 E4            pop a
4116   2104             ; END TERMS
4117   2104 E7            pop d
4118   2105 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
4119   2109 DA            push d
4120   210A 3B 4A 26      mov d, _ship_x ; $ship_x
4121   210D 2A            mov b, [d]
4122   210E FD AB         swp b
4123   2110 D8            push b
4124   2111 07 0B 1D      call FROM_FIXED00
4125   2114 51 02 00      add sp, 2
4126   2117             ; START TERMS
4127   2117 D7            push a
4128   2118 11            mov a, b
4129   2119 26 01 00      mov b, $1
4130   211C 60            sub a, b
4131   211D 27            mov b, a
4132   211E E4            pop a
4133   211F             ; END TERMS
4134   211F E7            pop d
4135   2120 5A            add d, b
4136   2121 E4            pop a
4137   2122 DA            push d
4138   2123 26 04 00      mov b, $4
4139   2126 E7            pop d
4140   2127 FD 3E         mov [d], bl
4141   2129 F9            leave
4142   212A 09            ret
4143   212B             
4144   212B             new_quadrant:
4145   212B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4146   212E F9            leave
4147   212F 09            ret
4148   2130             
4149   2130             course_control:
4150   2130 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4151   2133 F9            leave
4152   2134 09            ret
4153   2135             
4154   2135             complete_maneuver:
4155   2135 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4156   2138             ; $time_used 
4157   2138 52 02 00      sub sp, 2
4158   213B             ;; place_ship(); 
4159   213B 07 E7 20      call place_ship
4160   213E             ;; maneuver_energy(n); 
4161   213E FA 07 00      lea d, [bp + 7] ; $n
4162   2141 2A            mov b, [d]
4163   2142 FD AB         swp b
4164   2144 D8            push b
4165   2145 07 D1 21      call maneuver_energy
4166   2148 51 02 00      add sp, 2
4167   214B             ;; time_used = TO_FIXED(1); 
4168   214B FA FF FF      lea d, [bp + -1] ; $time_used
4169   214E DA            push d
4170   214F 26 01 00      mov b, $1
4171   2152 FD AB         swp b
4172   2154 D8            push b
4173   2155 07 D6 1C      call TO_FIXED
4174   2158 51 02 00      add sp, 2
4175   215B E7            pop d
4176   215C FD 43         mov [d], b
4177   215E             ;; if (warp < 100) 
4178   215E             _if60_cond:
4179   215E FA 05 00      lea d, [bp + 5] ; $warp
4180   2161 2A            mov b, [d]
4181   2162             ; START RELATIONAL
4182   2162 D7            push a
4183   2163 11            mov a, b
4184   2164 26 64 00      mov b, $64
4185   2167 B0            cmp a, b
4186   2168 FD 75         slu ; < (unsigned)
4187   216A E4            pop a
4188   216B             ; END RELATIONAL
4189   216B C0 00 00      cmp b, 0
4190   216E C6 91 21      je _if60_exit
4191   2171             _if60_true:
4192   2171             ;; time_used = TO_FIXED(FROM_FIXED00(warp)); 
4193   2171 FA FF FF      lea d, [bp + -1] ; $time_used
4194   2174 DA            push d
4195   2175 FA 05 00      lea d, [bp + 5] ; $warp
4196   2178 2A            mov b, [d]
4197   2179 FD AB         swp b
4198   217B D8            push b
4199   217C 07 0B 1D      call FROM_FIXED00
4200   217F 51 02 00      add sp, 2
4201   2182 FD AB         swp b
4202   2184 D8            push b
4203   2185 07 D6 1C      call TO_FIXED
4204   2188 51 02 00      add sp, 2
4205   218B E7            pop d
4206   218C FD 43         mov [d], b
4207   218E 0A 91 21      jmp _if60_exit
4208   2191             _if60_exit:
4209   2191             ;; stardate = stardate + time_used; 
4210   2191 3B 4C 26      mov d, _stardate ; $stardate
4211   2194 DA            push d
4212   2195 3B 4C 26      mov d, _stardate ; $stardate
4213   2198 2A            mov b, [d]
4214   2199             ; START TERMS
4215   2199 D7            push a
4216   219A 11            mov a, b
4217   219B FA FF FF      lea d, [bp + -1] ; $time_used
4218   219E 2A            mov b, [d]
4219   219F 56            add b, a
4220   21A0 E4            pop a
4221   21A1             ; END TERMS
4222   21A1 E7            pop d
4223   21A2 FD 43         mov [d], b
4224   21A4             ;; if (FROM_FIXED(stardate) > time_start + time_up); 
4225   21A4             _if61_cond:
4226   21A4 3B 4C 26      mov d, _stardate ; $stardate
4227   21A7 2A            mov b, [d]
4228   21A8 FD AB         swp b
4229   21AA D8            push b
4230   21AB 07 E8 1C      call FROM_FIXED
4231   21AE 51 02 00      add sp, 2
4232   21B1             ; START RELATIONAL
4233   21B1 D7            push a
4234   21B2 11            mov a, b
4235   21B3 3B 30 26      mov d, _time_start ; $time_start
4236   21B6 2A            mov b, [d]
4237   21B7             ; START TERMS
4238   21B7 D7            push a
4239   21B8 11            mov a, b
4240   21B9 3B 32 26      mov d, _time_up ; $time_up
4241   21BC 2A            mov b, [d]
4242   21BD 56            add b, a
4243   21BE E4            pop a
4244   21BF             ; END TERMS
4245   21BF B0            cmp a, b
4246   21C0 FD 7F         sgt ; >
4247   21C2 E4            pop a
4248   21C3             ; END RELATIONAL
4249   21C3 C0 00 00      cmp b, 0
4250   21C6 C6 CC 21      je _if61_exit
4251   21C9             _if61_true:
4252   21C9             ;; ; 
4253   21C9 0A CC 21      jmp _if61_exit
4254   21CC             _if61_exit:
4255   21CC             ;; short_range_scan(); 
4256   21CC 07 50 22      call short_range_scan
4257   21CF F9            leave
4258   21D0 09            ret
4259   21D1             
4260   21D1             maneuver_energy:
4261   21D1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4262   21D4             ;; energy = energy - n + 10; 
4263   21D4 3B 72 25      mov d, _energy ; $energy
4264   21D7 DA            push d
4265   21D8 3B 72 25      mov d, _energy ; $energy
4266   21DB 2A            mov b, [d]
4267   21DC             ; START TERMS
4268   21DC D7            push a
4269   21DD 11            mov a, b
4270   21DE FA 05 00      lea d, [bp + 5] ; $n
4271   21E1 2A            mov b, [d]
4272   21E2 60            sub a, b
4273   21E3 27            mov b, a
4274   21E4 11            mov a, b
4275   21E5 26 0A 00      mov b, $a
4276   21E8 56            add b, a
4277   21E9 E4            pop a
4278   21EA             ; END TERMS
4279   21EA E7            pop d
4280   21EB FD 43         mov [d], b
4281   21ED             ;; if (energy >= 0) 
4282   21ED             _if62_cond:
4283   21ED 3B 72 25      mov d, _energy ; $energy
4284   21F0 2A            mov b, [d]
4285   21F1             ; START RELATIONAL
4286   21F1 D7            push a
4287   21F2 11            mov a, b
4288   21F3 26 00 00      mov b, $0
4289   21F6 B0            cmp a, b
4290   21F7 FD 80         sge ; >=
4291   21F9 E4            pop a
4292   21FA             ; END RELATIONAL
4293   21FA C0 00 00      cmp b, 0
4294   21FD C6 05 22      je _if62_exit
4295   2200             _if62_true:
4296   2200             ;; return; 
4297   2200 F9            leave
4298   2201 09            ret
4299   2202 0A 05 22      jmp _if62_exit
4300   2205             _if62_exit:
4301   2205             ;; puts("Shield Control supplies energy to complete maneuver.\n"); 
4302   2205 26 4E 29      mov b, __s35 ; "Shield Control supplies energy to complete maneuver.\n"
4303   2208 FD AB         swp b
4304   220A D8            push b
4305   220B 07 31 13      call puts
4306   220E 51 02 00      add sp, 2
4307   2211             ;; shield = shield + energy; 
4308   2211 3B 2D 26      mov d, _shield ; $shield
4309   2214 DA            push d
4310   2215 3B 2D 26      mov d, _shield ; $shield
4311   2218 2A            mov b, [d]
4312   2219             ; START TERMS
4313   2219 D7            push a
4314   221A 11            mov a, b
4315   221B 3B 72 25      mov d, _energy ; $energy
4316   221E 2A            mov b, [d]
4317   221F 56            add b, a
4318   2220 E4            pop a
4319   2221             ; END TERMS
4320   2221 E7            pop d
4321   2222 FD 43         mov [d], b
4322   2224             ;; energy = 0; 
4323   2224 3B 72 25      mov d, _energy ; $energy
4324   2227 DA            push d
4325   2228 26 00 00      mov b, $0
4326   222B E7            pop d
4327   222C FD 43         mov [d], b
4328   222E             ;; if (shield <= 0) 
4329   222E             _if63_cond:
4330   222E 3B 2D 26      mov d, _shield ; $shield
4331   2231 2A            mov b, [d]
4332   2232             ; START RELATIONAL
4333   2232 D7            push a
4334   2233 11            mov a, b
4335   2234 26 00 00      mov b, $0
4336   2237 B0            cmp a, b
4337   2238 FD 73         slt ; <= (signed)
4338   223A E4            pop a
4339   223B             ; END RELATIONAL
4340   223B C0 00 00      cmp b, 0
4341   223E C6 4E 22      je _if63_exit
4342   2241             _if63_true:
4343   2241             ;; shield = 0; 
4344   2241 3B 2D 26      mov d, _shield ; $shield
4345   2244 DA            push d
4346   2245 26 00 00      mov b, $0
4347   2248 E7            pop d
4348   2249 FD 43         mov [d], b
4349   224B 0A 4E 22      jmp _if63_exit
4350   224E             _if63_exit:
4351   224E F9            leave
4352   224F 09            ret
4353   2250             
4354   2250             short_range_scan:
4355   2250 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4356   2253 F9            leave
4357   2254 09            ret
4358   2255             
4359   2255             put1bcd:
4360   2255 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4361   2258             ;; v = v & 0x0F; 
4362   2258 FA 05 00      lea d, [bp + 5] ; $v
4363   225B DA            push d
4364   225C FA 05 00      lea d, [bp + 5] ; $v
4365   225F 32            mov bl, [d]
4366   2260 A7 00         mov bh, 0
4367   2262 D7            push a
4368   2263 11            mov a, b
4369   2264 26 0F 00      mov b, $f
4370   2267 FD 92         and b, a ; &
4371   2269 E4            pop a
4372   226A E7            pop d
4373   226B FD 3E         mov [d], bl
4374   226D             ;; putchar('0' + v); 
4375   226D 26 30 00      mov b, $30
4376   2270             ; START TERMS
4377   2270 D7            push a
4378   2271 11            mov a, b
4379   2272 FA 05 00      lea d, [bp + 5] ; $v
4380   2275 32            mov bl, [d]
4381   2276 A7 00         mov bh, 0
4382   2278 56            add b, a
4383   2279 E4            pop a
4384   227A             ; END TERMS
4385   227A DD            push bl
4386   227B 07 FB 12      call putchar
4387   227E 51 01 00      add sp, 1
4388   2281 F9            leave
4389   2282 09            ret
4390   2283             
4391   2283             putbcd:
4392   2283 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4393   2286             ;; put1bcd(x >> 8); 
4394   2286 FA 05 00      lea d, [bp + 5] ; $x
4395   2289 2A            mov b, [d]
4396   228A             ; START SHIFT
4397   228A D7            push a
4398   228B 11            mov a, b
4399   228C 26 08 00      mov b, $8
4400   228F FD 39         mov c, b
4401   2291 A1            shr a, cl
4402   2292 27            mov b, a
4403   2293 E4            pop a
4404   2294             ; END SHIFT
4405   2294 DD            push bl
4406   2295 07 55 22      call put1bcd
4407   2298 51 01 00      add sp, 1
4408   229B             ;; put1bcd(x >> 4); 
4409   229B FA 05 00      lea d, [bp + 5] ; $x
4410   229E 2A            mov b, [d]
4411   229F             ; START SHIFT
4412   229F D7            push a
4413   22A0 11            mov a, b
4414   22A1 26 04 00      mov b, $4
4415   22A4 FD 39         mov c, b
4416   22A6 A1            shr a, cl
4417   22A7 27            mov b, a
4418   22A8 E4            pop a
4419   22A9             ; END SHIFT
4420   22A9 DD            push bl
4421   22AA 07 55 22      call put1bcd
4422   22AD 51 01 00      add sp, 1
4423   22B0             ;; put1bcd(x); 
4424   22B0 FA 05 00      lea d, [bp + 5] ; $x
4425   22B3 2A            mov b, [d]
4426   22B4 DD            push bl
4427   22B5 07 55 22      call put1bcd
4428   22B8 51 01 00      add sp, 1
4429   22BB F9            leave
4430   22BC 09            ret
4431   22BD             
4432   22BD             long_range_scan:
4433   22BD F8 00 00      enter 0 ; (push bp; mov bp, sp)
4434   22C0 F9            leave
4435   22C1 09            ret
4436   22C2             
4437   22C2             no_klingon:
4438   22C2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4439   22C5             ;; if (klingons <= 0) { 
4440   22C5             _if64_cond:
4441   22C5 3B 24 26      mov d, _klingons ; $klingons
4442   22C8 32            mov bl, [d]
4443   22C9 A7 00         mov bh, 0
4444   22CB             ; START RELATIONAL
4445   22CB D7            push a
4446   22CC 11            mov a, b
4447   22CD 26 00 00      mov b, $0
4448   22D0 B0            cmp a, b
4449   22D1 FD 75         slu ; <= (unsigned)
4450   22D3 E4            pop a
4451   22D4             ; END RELATIONAL
4452   22D4 C0 00 00      cmp b, 0
4453   22D7 C6 EE 22      je _if64_exit
4454   22DA             _if64_true:
4455   22DA             ;; puts("Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"); 
4456   22DA 26 84 29      mov b, __s36 ; "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"
4457   22DD FD AB         swp b
4458   22DF D8            push b
4459   22E0 07 31 13      call puts
4460   22E3 51 02 00      add sp, 2
4461   22E6             ;; return 1; 
4462   22E6 26 01 00      mov b, $1
4463   22E9 F9            leave
4464   22EA 09            ret
4465   22EB 0A EE 22      jmp _if64_exit
4466   22EE             _if64_exit:
4467   22EE             ;; return 0; 
4468   22EE 26 00 00      mov b, $0
4469   22F1 F9            leave
4470   22F2 09            ret
4471   22F3             
4472   22F3             wipe_klingon:
4473   22F3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4474   22F6             ;; quad[k->y+-1][k->x+-1] =  		0      ; 
4475   22F6 3B 4E 26      mov d, _quad_data ; $quad
4476   22F9 D7            push a
4477   22FA DA            push d
4478   22FB FA 05 00      lea d, [bp + 5] ; $k
4479   22FE FD 2A         mov d, [d]
4480   2300 58 00 00      add d, 0
4481   2303 32            mov bl, [d]
4482   2304 A7 00         mov bh, 0
4483   2306             ; START TERMS
4484   2306 D7            push a
4485   2307 11            mov a, b
4486   2308 26 FF FF      mov b, $ffff
4487   230B 56            add b, a
4488   230C E4            pop a
4489   230D             ; END TERMS
4490   230D E7            pop d
4491   230E FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
4492   2312 DA            push d
4493   2313 FA 05 00      lea d, [bp + 5] ; $k
4494   2316 FD 2A         mov d, [d]
4495   2318 58 01 00      add d, 1
4496   231B 32            mov bl, [d]
4497   231C A7 00         mov bh, 0
4498   231E             ; START TERMS
4499   231E D7            push a
4500   231F 11            mov a, b
4501   2320 26 FF FF      mov b, $ffff
4502   2323 56            add b, a
4503   2324 E4            pop a
4504   2325             ; END TERMS
4505   2325 E7            pop d
4506   2326 5A            add d, b
4507   2327 E4            pop a
4508   2328 DA            push d
4509   2329 26 00 00      mov b, $0
4510   232C E7            pop d
4511   232D FD 3E         mov [d], bl
4512   232F F9            leave
4513   2330 09            ret
4514   2331             
4515   2331             phaser_control:
4516   2331 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4517   2334 F9            leave
4518   2335 09            ret
4519   2336             
4520   2336             photon_torpedoes:
4521   2336 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4522   2339 F9            leave
4523   233A 09            ret
4524   233B             
4525   233B             torpedo_hit:
4526   233B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4527   233E F9            leave
4528   233F 09            ret
4529   2340             
4530   2340             damage_control:
4531   2340 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4532   2343 F9            leave
4533   2344 09            ret
4534   2345             
4535   2345             shield_control:
4536   2345 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4537   2348             ; $i 
4538   2348 52 02 00      sub sp, 2
4539   234B             ;; if (inoperable(7)) 
4540   234B             _if65_cond:
4541   234B 26 07 00      mov b, $7
4542   234E DD            push bl
4543   234F 07 4B 20      call inoperable
4544   2352 51 01 00      add sp, 1
4545   2355 C0 00 00      cmp b, 0
4546   2358 C6 60 23      je _if65_exit
4547   235B             _if65_true:
4548   235B             ;; return; 
4549   235B F9            leave
4550   235C 09            ret
4551   235D 0A 60 23      jmp _if65_exit
4552   2360             _if65_exit:
4553   2360             ;; printf("Energy available = %d\n\n Input number of units to shields: ", energy + shield); 
4554   2360 3B 72 25      mov d, _energy ; $energy
4555   2363 2A            mov b, [d]
4556   2364             ; START TERMS
4557   2364 D7            push a
4558   2365 11            mov a, b
4559   2366 3B 2D 26      mov d, _shield ; $shield
4560   2369 2A            mov b, [d]
4561   236A 56            add b, a
4562   236B E4            pop a
4563   236C             ; END TERMS
4564   236C FD AB         swp b
4565   236E D8            push b
4566   236F 26 D5 29      mov b, __s37 ; "Energy available = %d\n\n Input number of units to shields: "
4567   2372 FD AB         swp b
4568   2374 D8            push b
4569   2375 07 D1 05      call printf
4570   2378 51 04 00      add sp, 4
4571   237B             ;; i = input_int(); 
4572   237B FA FF FF      lea d, [bp + -1] ; $i
4573   237E DA            push d
4574   237F 07 B4 1F      call input_int
4575   2382 E7            pop d
4576   2383 FD 43         mov [d], b
4577   2385             ;; if (i < 0 || shield == i) { 
4578   2385             _if66_cond:
4579   2385 FA FF FF      lea d, [bp + -1] ; $i
4580   2388 2A            mov b, [d]
4581   2389             ; START RELATIONAL
4582   2389 D7            push a
4583   238A 11            mov a, b
4584   238B 26 00 00      mov b, $0
4585   238E B0            cmp a, b
4586   238F FD 73         slt ; < (signed)
4587   2391 E4            pop a
4588   2392             ; END RELATIONAL
4589   2392 D7            push a
4590   2393 11            mov a, b
4591   2394 3B 2D 26      mov d, _shield ; $shield
4592   2397 2A            mov b, [d]
4593   2398             ; START RELATIONAL
4594   2398 D7            push a
4595   2399 11            mov a, b
4596   239A FA FF FF      lea d, [bp + -1] ; $i
4597   239D 2A            mov b, [d]
4598   239E B0            cmp a, b
4599   239F FD 71         seq ; ==
4600   23A1 E4            pop a
4601   23A2             ; END RELATIONAL
4602   23A2 FD A8         sor a, b ; ||
4603   23A4 E4            pop a
4604   23A5 C0 00 00      cmp b, 0
4605   23A8 C6 BC 23      je _if66_exit
4606   23AB             _if66_true:
4607   23AB             ;; unchanged: 
4608   23AB             shield_control_unchanged:
4609   23AB             ;; puts("<Shields Unchanged>\n"); 
4610   23AB 26 10 2A      mov b, __s38 ; "<Shields Unchanged>\n"
4611   23AE FD AB         swp b
4612   23B0 D8            push b
4613   23B1 07 31 13      call puts
4614   23B4 51 02 00      add sp, 2
4615   23B7             ;; return; 
4616   23B7 F9            leave
4617   23B8 09            ret
4618   23B9 0A BC 23      jmp _if66_exit
4619   23BC             _if66_exit:
4620   23BC             ;; if (i >= energy + shield) { 
4621   23BC             _if67_cond:
4622   23BC FA FF FF      lea d, [bp + -1] ; $i
4623   23BF 2A            mov b, [d]
4624   23C0             ; START RELATIONAL
4625   23C0 D7            push a
4626   23C1 11            mov a, b
4627   23C2 3B 72 25      mov d, _energy ; $energy
4628   23C5 2A            mov b, [d]
4629   23C6             ; START TERMS
4630   23C6 D7            push a
4631   23C7 11            mov a, b
4632   23C8 3B 2D 26      mov d, _shield ; $shield
4633   23CB 2A            mov b, [d]
4634   23CC 56            add b, a
4635   23CD E4            pop a
4636   23CE             ; END TERMS
4637   23CE B0            cmp a, b
4638   23CF FD 80         sge ; >=
4639   23D1 E4            pop a
4640   23D2             ; END RELATIONAL
4641   23D2 C0 00 00      cmp b, 0
4642   23D5 C6 EA 23      je _if67_exit
4643   23D8             _if67_true:
4644   23D8             ;; puts("Shield Control Reports:\n  'This is not the Federation Treasury.'"); 
4645   23D8 26 25 2A      mov b, __s39 ; "Shield Control Reports:\n  'This is not the Federation Treasury.'"
4646   23DB FD AB         swp b
4647   23DD D8            push b
4648   23DE 07 31 13      call puts
4649   23E1 51 02 00      add sp, 2
4650   23E4             ;; goto unchanged; 
4651   23E4 0A AB 23      jmp shield_control_unchanged
4652   23E7 0A EA 23      jmp _if67_exit
4653   23EA             _if67_exit:
4654   23EA             ;; energy = energy + shield - i; 
4655   23EA 3B 72 25      mov d, _energy ; $energy
4656   23ED DA            push d
4657   23EE 3B 72 25      mov d, _energy ; $energy
4658   23F1 2A            mov b, [d]
4659   23F2             ; START TERMS
4660   23F2 D7            push a
4661   23F3 11            mov a, b
4662   23F4 3B 2D 26      mov d, _shield ; $shield
4663   23F7 2A            mov b, [d]
4664   23F8 56            add b, a
4665   23F9 11            mov a, b
4666   23FA FA FF FF      lea d, [bp + -1] ; $i
4667   23FD 2A            mov b, [d]
4668   23FE 60            sub a, b
4669   23FF 27            mov b, a
4670   2400 E4            pop a
4671   2401             ; END TERMS
4672   2401 E7            pop d
4673   2402 FD 43         mov [d], b
4674   2404             ;; shield = i; 
4675   2404 3B 2D 26      mov d, _shield ; $shield
4676   2407 DA            push d
4677   2408 FA FF FF      lea d, [bp + -1] ; $i
4678   240B 2A            mov b, [d]
4679   240C E7            pop d
4680   240D FD 43         mov [d], b
4681   240F             ;; printf("Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n", shield); 
4682   240F 3B 2D 26      mov d, _shield ; $shield
4683   2412 2A            mov b, [d]
4684   2413 FD AB         swp b
4685   2415 D8            push b
4686   2416 26 66 2A      mov b, __s40 ; "Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n"
4687   2419 FD AB         swp b
4688   241B D8            push b
4689   241C 07 D1 05      call printf
4690   241F 51 04 00      add sp, 4
4691   2422 F9            leave
4692   2423 09            ret
4693   2424             
4694   2424             library_computer:
4695   2424 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4696   2427 F9            leave
4697   2428 09            ret
4698   2429             
4699   2429             galactic_record:
4700   2429 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4701   242C             ; $i 
4702   242C             ; $j 
4703   242C 52 04 00      sub sp, 4
4704   242F             ;; printf("\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", quad_y, quad_x); 
4705   242F 3B 2B 26      mov d, _quad_x ; $quad_x
4706   2432 2A            mov b, [d]
4707   2433 FD AB         swp b
4708   2435 D8            push b
4709   2436 3B 29 26      mov d, _quad_y ; $quad_y
4710   2439 2A            mov b, [d]
4711   243A FD AB         swp b
4712   243C D8            push b
4713   243D 26 B5 2A      mov b, __s41 ; "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n"
4714   2440 FD AB         swp b
4715   2442 D8            push b
4716   2443 07 D1 05      call printf
4717   2446 51 06 00      add sp, 6
4718   2449             ;; puts("     1     2     3     4     5     6     7     8"); 
4719   2449 26 EA 2A      mov b, __s42 ; "     1     2     3     4     5     6     7     8"
4720   244C FD AB         swp b
4721   244E D8            push b
4722   244F 07 31 13      call puts
4723   2452 51 02 00      add sp, 2
4724   2455             ;; for (i = 1; i <= 8; i++) { 
4725   2455             _for68_init:
4726   2455 FA FF FF      lea d, [bp + -1] ; $i
4727   2458 DA            push d
4728   2459 26 01 00      mov b, $1
4729   245C E7            pop d
4730   245D FD 43         mov [d], b
4731   245F             _for68_cond:
4732   245F FA FF FF      lea d, [bp + -1] ; $i
4733   2462 2A            mov b, [d]
4734   2463             ; START RELATIONAL
4735   2463 D7            push a
4736   2464 11            mov a, b
4737   2465 26 08 00      mov b, $8
4738   2468 B0            cmp a, b
4739   2469 FD 73         slt ; <= (signed)
4740   246B E4            pop a
4741   246C             ; END RELATIONAL
4742   246C C0 00 00      cmp b, 0
4743   246F C6 39 25      je _for68_exit
4744   2472             _for68_block:
4745   2472             ;; printf("%s%d", gr_1, i); 
4746   2472 FA FF FF      lea d, [bp + -1] ; $i
4747   2475 2A            mov b, [d]
4748   2476 FD AB         swp b
4749   2478 D8            push b
4750   2479 3B C9 27      mov d, _gr_1 ; $gr_1
4751   247C 2A            mov b, [d]
4752   247D FD AB         swp b
4753   247F D8            push b
4754   2480 26 1B 2B      mov b, __s43 ; "%s%d"
4755   2483 FD AB         swp b
4756   2485 D8            push b
4757   2486 07 D1 05      call printf
4758   2489 51 06 00      add sp, 6
4759   248C             ;; for (j = 1; j <= 8; j++) { 
4760   248C             _for69_init:
4761   248C FA FD FF      lea d, [bp + -3] ; $j
4762   248F DA            push d
4763   2490 26 01 00      mov b, $1
4764   2493 E7            pop d
4765   2494 FD 43         mov [d], b
4766   2496             _for69_cond:
4767   2496 FA FD FF      lea d, [bp + -3] ; $j
4768   2499 2A            mov b, [d]
4769   249A             ; START RELATIONAL
4770   249A D7            push a
4771   249B 11            mov a, b
4772   249C 26 08 00      mov b, $8
4773   249F B0            cmp a, b
4774   24A0 FD 73         slt ; <= (signed)
4775   24A2 E4            pop a
4776   24A3             ; END RELATIONAL
4777   24A3 C0 00 00      cmp b, 0
4778   24A6 C6 1F 25      je _for69_exit
4779   24A9             _for69_block:
4780   24A9             ;; printf("   "); 
4781   24A9 26 DC 28      mov b, __s24 ; "   "
4782   24AC FD AB         swp b
4783   24AE D8            push b
4784   24AF 07 D1 05      call printf
4785   24B2 51 02 00      add sp, 2
4786   24B5             ;; if (map[i][j] &   0x1000		/* Set if this sector was mapped */          ) 
4787   24B5             _if70_cond:
4788   24B5 3B 76 25      mov d, _map_data ; $map
4789   24B8 D7            push a
4790   24B9 DA            push d
4791   24BA FA FF FF      lea d, [bp + -1] ; $i
4792   24BD 2A            mov b, [d]
4793   24BE E7            pop d
4794   24BF FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4795   24C3 DA            push d
4796   24C4 FA FD FF      lea d, [bp + -3] ; $j
4797   24C7 2A            mov b, [d]
4798   24C8 E7            pop d
4799   24C9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4800   24CD E4            pop a
4801   24CE 2A            mov b, [d]
4802   24CF D7            push a
4803   24D0 11            mov a, b
4804   24D1 26 00 10      mov b, $1000
4805   24D4 FD 92         and b, a ; &
4806   24D6 E4            pop a
4807   24D7 C0 00 00      cmp b, 0
4808   24DA C6 03 25      je _if70_else
4809   24DD             _if70_true:
4810   24DD             ;; putbcd(map[i][j]); 
4811   24DD 3B 76 25      mov d, _map_data ; $map
4812   24E0 D7            push a
4813   24E1 DA            push d
4814   24E2 FA FF FF      lea d, [bp + -1] ; $i
4815   24E5 2A            mov b, [d]
4816   24E6 E7            pop d
4817   24E7 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4818   24EB DA            push d
4819   24EC FA FD FF      lea d, [bp + -3] ; $j
4820   24EF 2A            mov b, [d]
4821   24F0 E7            pop d
4822   24F1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4823   24F5 E4            pop a
4824   24F6 2A            mov b, [d]
4825   24F7 FD AB         swp b
4826   24F9 D8            push b
4827   24FA 07 83 22      call putbcd
4828   24FD 51 02 00      add sp, 2
4829   2500 0A 0F 25      jmp _if70_exit
4830   2503             _if70_else:
4831   2503             ;; printf("***"); 
4832   2503 26 20 2B      mov b, __s44 ; "***"
4833   2506 FD AB         swp b
4834   2508 D8            push b
4835   2509 07 D1 05      call printf
4836   250C 51 02 00      add sp, 2
4837   250F             _if70_exit:
4838   250F             _for69_update:
4839   250F FA FD FF      lea d, [bp + -3] ; $j
4840   2512 2A            mov b, [d]
4841   2513 D8            push b
4842   2514 FD 77         inc b
4843   2516 FA FD FF      lea d, [bp + -3] ; $j
4844   2519 FD 43         mov [d], b
4845   251B E5            pop b
4846   251C 0A 96 24      jmp _for69_cond
4847   251F             _for69_exit:
4848   251F             ;; putchar('\n'); 
4849   251F 26 0A 00      mov b, $a
4850   2522 DD            push bl
4851   2523 07 FB 12      call putchar
4852   2526 51 01 00      add sp, 1
4853   2529             _for68_update:
4854   2529 FA FF FF      lea d, [bp + -1] ; $i
4855   252C 2A            mov b, [d]
4856   252D D8            push b
4857   252E FD 77         inc b
4858   2530 FA FF FF      lea d, [bp + -1] ; $i
4859   2533 FD 43         mov [d], b
4860   2535 E5            pop b
4861   2536 0A 5F 24      jmp _for68_cond
4862   2539             _for68_exit:
4863   2539             ;; printf("%s\n", gr_1); 
4864   2539 3B C9 27      mov d, _gr_1 ; $gr_1
4865   253C 2A            mov b, [d]
4866   253D FD AB         swp b
4867   253F D8            push b
4868   2540 26 24 2B      mov b, __s45 ; "%s\n"
4869   2543 FD AB         swp b
4870   2545 D8            push b
4871   2546 07 D1 05      call printf
4872   2549 51 04 00      add sp, 4
4873   254C F9            leave
4874   254D 09            ret
4875   254E             ; --- END TEXT BLOCK
4876   254E             
4877   254E             ; --- BEGIN DATA BLOCK
4878   254E 00          _starbases: .fill 1, 0
4879   254F 00          _base_y: .fill 1, 0
4880   2550 00          _base_x: .fill 1, 0
4881   2551 00          _starbases_left: .fill 1, 0
4882   2552             _c_data: 
4883   2552 00          .db 
4884   2553 00 00 00 FF .db $0,$0,$0,$ffff,$ffff,$ffff,$0,$1,$1,$1,$0,$1,$1,$1,$0,$ffff,$ffff,$ffff,$0,$1,$1,
4884   2557 FF FF 00 01 
4884   255B 01 01 00 01 
4884   255F 01 01 00 FF 
4884   2563 FF FF 00 01 
4884   2567 01 
4885   2568 00 00 00 00 .fill 9, 0
4885   256C 00 00 00 00 
4885   2570 00 
4886   2571 00          _docked: .fill 1, 0
4887   2572 00 00       _energy: .fill 2, 0
4888   2574 B8 0B       _energy0: .dw 3000
4889   2576 00 00 00 00 _map_data: .fill 162, 0
4889   257A 00 00 00 00 
4889   257E 00 00 00 00 
4889   2582 00 00 00 00 
4889   2586 00 00 00 00 
4889   258A 00 00 00 00 
4889   258E 00 00 00 00 
4889   2592 00 00 00 00 
4889   2596 00 00 00 00 
4889   259A 00 00 00 00 
4889   259E 00 00 00 00 
4889   25A2 00 00 00 00 
4889   25A6 00 00 00 00 
4889   25AA 00 00 00 00 
4889   25AE 00 00 00 00 
4889   25B2 00 00 00 00 
4889   25B6 00 00 00 00 
4889   25BA 00 00 00 00 
4889   25BE 00 00 00 00 
4889   25C2 00 00 00 00 
4889   25C6 00 00 00 00 
4889   25CA 00 00 00 00 
4889   25CE 00 00 00 00 
4889   25D2 00 00 00 00 
4889   25D6 00 00 00 00 
4889   25DA 00 00 00 00 
4889   25DE 00 00 00 00 
4889   25E2 00 00 00 00 
4889   25E6 00 00 00 00 
4889   25EA 00 00 00 00 
4889   25EE 00 00 00 00 
4889   25F2 00 00 00 00 
4889   25F6 00 00 00 00 
4889   25FA 00 00 00 00 
4889   25FE 00 00 00 00 
4889   2602 00 00 00 00 
4889   2606 00 00 00 00 
4889   260A 00 00 00 00 
4889   260E 00 00 00 00 
4889   2612 00 00 00 00 
4889   2616 00 00 
4890   2618 00 00 00 00 _kdata_data: .fill 12, 0
4890   261C 00 00 00 00 
4890   2620 00 00 00 00 
4891   2624 00          _klingons: .fill 1, 0
4892   2625 00          _total_klingons: .fill 1, 0
4893   2626 00          _klingons_left: .fill 1, 0
4894   2627 00          _torps: .fill 1, 0
4895   2628 0A          _torps0: .db 10
4896   2629 00 00       _quad_y: .fill 2, 0
4897   262B 00 00       _quad_x: .fill 2, 0
4898   262D 00 00       _shield: .fill 2, 0
4899   262F 00          _stars: .fill 1, 0
4900   2630 00 00       _time_start: .fill 2, 0
4901   2632 00 00       _time_up: .fill 2, 0
4902   2634 00 00 00 00 _damage_data: .fill 18, 0
4902   2638 00 00 00 00 
4902   263C 00 00 00 00 
4902   2640 00 00 00 00 
4902   2644 00 00 
4903   2646 00 00       _d4: .fill 2, 0
4904   2648 00 00       _ship_y: .fill 2, 0
4905   264A 00 00       _ship_x: .fill 2, 0
4906   264C 00 00       _stardate: .fill 2, 0
4907   264E 00 00 00 00 _quad_data: .fill 64, 0
4907   2652 00 00 00 00 
4907   2656 00 00 00 00 
4907   265A 00 00 00 00 
4907   265E 00 00 00 00 
4907   2662 00 00 00 00 
4907   2666 00 00 00 00 
4907   266A 00 00 00 00 
4907   266E 00 00 00 00 
4907   2672 00 00 00 00 
4907   2676 00 00 00 00 
4907   267A 00 00 00 00 
4907   267E 00 00 00 00 
4907   2682 00 00 00 00 
4907   2686 00 00 00 00 
4907   268A 00 00 00 00 
4908   268E 00 00 00 00 _quadname_data: .fill 12, 0
4908   2692 00 00 00 00 
4908   2696 00 00 00 00 
4909   269A 72 65 70 6F _inc_1_data: .db "reports:\n  Incorrect course data, sir!\n", 0
4909   269E 72 74 73 3A 
4909   26A2 0A 20 20 49 
4909   26A6 6E 63 6F 72 
4909   26AA 72 65 63 74 
4909   26AE 20 63 6F 75 
4909   26B2 72 73 65 20 
4909   26B6 64 61 74 61 
4909   26BA 2C 20 73 69 
4909   26BE 72 21 0A 00 
4910   26C2 9A 26       _inc_1: .dw _inc_1_data
4911   26C4             _quad_name_data: 
4912   26C4 DF 27 DF 27 .dw __s0, __s0, __s1, __s2, __s3, __s4, __s5, __s6, __s7, __s8, __s9, __s10, __s11, __s12, __s13, __s14, __s15, 
4912   26C8 E7 27 ED 27 
4912   26CC F5 27 FA 27 
4912   26D0 02 28 09 28 
4912   26D4 15 28 1C 28 
4912   26D8 23 28 29 28 
4912   26DC 31 28 3C 28 
4912   26E0 46 28 4E 28 
4912   26E4 57 28 
4913   26E6 00 00 00 00 .fill 34, 0
4913   26EA 00 00 00 00 
4913   26EE 00 00 00 00 
4913   26F2 00 00 00 00 
4913   26F6 00 00 00 00 
4913   26FA 00 00 00 00 
4913   26FE 00 00 00 00 
4913   2702 00 00 00 00 
4913   2706 00 00 
4914   2708             _device_name_data: 
4915   2708 5D 28 5D 28 .dw __s16, __s16, __s17, __s18, __s19, __s20, __s21, __s22, __s23, 
4915   270C 6A 28 7E 28 
4915   2710 91 28 A0 28 
4915   2714 AD 28 BC 28 
4915   2718 CB 28 
4916   271A 00 00 00 00 .fill 18, 0
4916   271E 00 00 00 00 
4916   2722 00 00 00 00 
4916   2726 00 00 00 00 
4916   272A 00 00 
4917   272C 44 61 6D 61 _dcr_1_data: .db "Damage Control report:", 0
4917   2730 67 65 20 43 
4917   2734 6F 6E 74 72 
4917   2738 6F 6C 20 72 
4917   273C 65 70 6F 72 
4917   2740 74 3A 00 
4918   2743 2C 27       _dcr_1: .dw _dcr_1_data
4919   2745             _plural_2_data: 
4920   2745 00 00       .db $0,$0,
4921   2747             _plural_data: 
4922   2747 69 73 00    .db $69,$73,$0,
4923   274A 00          .fill 1, 0
4924   274B             _warpmax_data: 
4925   274B 08          .db $8,
4926   274C 00 00 00    .fill 3, 0
4927   274F 2D 2D 2D 2D _srs_1_data: .db "------------------------", 0
4927   2753 2D 2D 2D 2D 
4927   2757 2D 2D 2D 2D 
4927   275B 2D 2D 2D 2D 
4927   275F 2D 2D 2D 2D 
4927   2763 2D 2D 2D 2D 
4927   2767 00 
4928   2768 4F 27       _srs_1: .dw _srs_1_data
4929   276A             _tilestr_data: 
4930   276A DC 28 E0 28 .dw __s24, __s25, __s26, __s27, __s28, 
4930   276E E4 28 E8 28 
4930   2772 EC 28 
4931   2774 00 00 00 00 .fill 10, 0
4931   2778 00 00 00 00 
4931   277C 00 00 
4932   277E 2D 2D 2D 2D _lrs_1_data: .db "-------------------\n", 0
4932   2782 2D 2D 2D 2D 
4932   2786 2D 2D 2D 2D 
4932   278A 2D 2D 2D 2D 
4932   278E 2D 2D 2D 0A 
4932   2792 00 
4933   2793 7E 27       _lrs_1: .dw _lrs_1_data
4934   2795 20 20 20 2D _gr_1_data: .db "   ----- ----- ----- ----- ----- ----- ----- -----\n", 0
4934   2799 2D 2D 2D 2D 
4934   279D 20 2D 2D 2D 
4934   27A1 2D 2D 20 2D 
4934   27A5 2D 2D 2D 2D 
4934   27A9 20 2D 2D 2D 
4934   27AD 2D 2D 20 2D 
4934   27B1 2D 2D 2D 2D 
4934   27B5 20 2D 2D 2D 
4934   27B9 2D 2D 20 2D 
4934   27BD 2D 2D 2D 2D 
4934   27C1 20 2D 2D 2D 
4934   27C5 2D 2D 0A 00 
4935   27C9 95 27       _gr_1: .dw _gr_1_data
4936   27CB 73 00       _str_s_data: .db "s", 0
4937   27CD CB 27       _str_s: .dw _str_s_data
4938   27CF 00 00 00 00 st_print100_buf_dt: .fill 16, 0
4938   27D3 00 00 00 00 
4938   27D7 00 00 00 00 
4938   27DB 00 00 00 00 
4939   27DF 41 6E 74 61 __s0: .db "Antares", 0
4939   27E3 72 65 73 00 
4940   27E7 52 69 67 65 __s1: .db "Rigel", 0
4940   27EB 6C 00 
4941   27ED 50 72 6F 63 __s2: .db "Procyon", 0
4941   27F1 79 6F 6E 00 
4942   27F5 56 65 67 61 __s3: .db "Vega", 0
4942   27F9 00 
4943   27FA 43 61 6E 6F __s4: .db "Canopus", 0
4943   27FE 70 75 73 00 
4944   2802 41 6C 74 61 __s5: .db "Altair", 0
4944   2806 69 72 00 
4945   2809 53 61 67 69 __s6: .db "Sagittarius", 0
4945   280D 74 74 61 72 
4945   2811 69 75 73 00 
4946   2815 50 6F 6C 6C __s7: .db "Pollux", 0
4946   2819 75 78 00 
4947   281C 53 69 72 69 __s8: .db "Sirius", 0
4947   2820 75 73 00 
4948   2823 44 65 6E 65 __s9: .db "Deneb", 0
4948   2827 62 00 
4949   2829 43 61 70 65 __s10: .db "Capella", 0
4949   282D 6C 6C 61 00 
4950   2831 42 65 74 65 __s11: .db "Betelgeuse", 0
4950   2835 6C 67 65 75 
4950   2839 73 65 00 
4951   283C 41 6C 64 65 __s12: .db "Aldebaran", 0
4951   2840 62 61 72 61 
4951   2844 6E 00 
4952   2846 52 65 67 75 __s13: .db "Regulus", 0
4952   284A 6C 75 73 00 
4953   284E 41 72 63 74 __s14: .db "Arcturus", 0
4953   2852 75 72 75 73 
4953   2856 00 
4954   2857 53 70 69 63 __s15: .db "Spica", 0
4954   285B 61 00 
4955   285D 57 61 72 70 __s16: .db "Warp engines", 0
4955   2861 20 65 6E 67 
4955   2865 69 6E 65 73 
4955   2869 00 
4956   286A 53 68 6F 72 __s17: .db "Short range sensors", 0
4956   286E 74 20 72 61 
4956   2872 6E 67 65 20 
4956   2876 73 65 6E 73 
4956   287A 6F 72 73 00 
4957   287E 4C 6F 6E 67 __s18: .db "Long range sensors", 0
4957   2882 20 72 61 6E 
4957   2886 67 65 20 73 
4957   288A 65 6E 73 6F 
4957   288E 72 73 00 
4958   2891 50 68 61 73 __s19: .db "Phaser control", 0
4958   2895 65 72 20 63 
4958   2899 6F 6E 74 72 
4958   289D 6F 6C 00 
4959   28A0 50 68 6F 74 __s20: .db "Photon tubes", 0
4959   28A4 6F 6E 20 74 
4959   28A8 75 62 65 73 
4959   28AC 00 
4960   28AD 44 61 6D 61 __s21: .db "Damage control", 0
4960   28B1 67 65 20 63 
4960   28B5 6F 6E 74 72 
4960   28B9 6F 6C 00 
4961   28BC 53 68 69 65 __s22: .db "Shield control", 0
4961   28C0 6C 64 20 63 
4961   28C4 6F 6E 74 72 
4961   28C8 6F 6C 00 
4962   28CB 4C 69 62 72 __s23: .db "Library computer", 0
4962   28CF 61 72 79 20 
4962   28D3 63 6F 6D 70 
4962   28D7 75 74 65 72 
4962   28DB 00 
4963   28DC 20 20 20 00 __s24: .db "   ", 0
4964   28E0 20 2A 20 00 __s25: .db " * ", 0
4965   28E4 3E 21 3C 00 __s26: .db ">!<", 0
4966   28E8 2B 4B 2B 00 __s27: .db "+K+", 0
4967   28EC 3C 2A 3E 00 __s28: .db "<*>", 0
4968   28F0 55 6E 65 78 __s29: .db "Unexpected format in printf.", 0
4968   28F4 70 65 63 74 
4968   28F8 65 64 20 66 
4968   28FC 6F 72 6D 61 
4968   2900 74 20 69 6E 
4968   2904 20 70 72 69 
4968   2908 6E 74 66 2E 
4968   290C 00 
4969   290D 45 72 72 6F __s30: .db "Error: Unknown argument type.\n", 0
4969   2911 72 3A 20 55 
4969   2915 6E 6B 6E 6F 
4969   2919 77 6E 20 61 
4969   291D 72 67 75 6D 
4969   2921 65 6E 74 20 
4969   2925 74 79 70 65 
4969   2929 2E 0A 00 
4970   292C 1B 5B 32 4A __s31: .db "\033[2J\033[H", 0
4970   2930 1B 5B 48 00 
4971   2934 61 72 65 00 __s32: .db "are", 0
4972   2938 69 73 00    __s33: .db "is", 0
4973   293B 25 73 20 25 __s34: .db "%s %s inoperable.\n", 0
4973   293F 73 20 69 6E 
4973   2943 6F 70 65 72 
4973   2947 61 62 6C 65 
4973   294B 2E 0A 00 
4974   294E 53 68 69 65 __s35: .db "Shield Control supplies energy to complete maneuver.\n", 0
4974   2952 6C 64 20 43 
4974   2956 6F 6E 74 72 
4974   295A 6F 6C 20 73 
4974   295E 75 70 70 6C 
4974   2962 69 65 73 20 
4974   2966 65 6E 65 72 
4974   296A 67 79 20 74 
4974   296E 6F 20 63 6F 
4974   2972 6D 70 6C 65 
4974   2976 74 65 20 6D 
4974   297A 61 6E 65 75 
4974   297E 76 65 72 2E 
4974   2982 0A 00 
4975   2984 53 63 69 65 __s36: .db "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n", 0
4975   2988 6E 63 65 20 
4975   298C 4F 66 66 69 
4975   2990 63 65 72 20 
4975   2994 53 70 6F 63 
4975   2998 6B 20 72 65 
4975   299C 70 6F 72 74 
4975   29A0 73 3A 0A 20 
4975   29A4 20 27 53 65 
4975   29A8 6E 73 6F 72 
4975   29AC 73 20 73 68 
4975   29B0 6F 77 20 6E 
4975   29B4 6F 20 65 6E 
4975   29B8 65 6D 79 20 
4975   29BC 73 68 69 70 
4975   29C0 73 20 69 6E 
4975   29C4 20 74 68 69 
4975   29C8 73 20 71 75 
4975   29CC 61 64 72 61 
4975   29D0 6E 74 27 0A 
4975   29D4 00 
4976   29D5 45 6E 65 72 __s37: .db "Energy available = %d\n\n Input number of units to shields: ", 0
4976   29D9 67 79 20 61 
4976   29DD 76 61 69 6C 
4976   29E1 61 62 6C 65 
4976   29E5 20 3D 20 25 
4976   29E9 64 0A 0A 20 
4976   29ED 49 6E 70 75 
4976   29F1 74 20 6E 75 
4976   29F5 6D 62 65 72 
4976   29F9 20 6F 66 20 
4976   29FD 75 6E 69 74 
4976   2A01 73 20 74 6F 
4976   2A05 20 73 68 69 
4976   2A09 65 6C 64 73 
4976   2A0D 3A 20 00 
4977   2A10 3C 53 68 69 __s38: .db "<Shields Unchanged>\n", 0
4977   2A14 65 6C 64 73 
4977   2A18 20 55 6E 63 
4977   2A1C 68 61 6E 67 
4977   2A20 65 64 3E 0A 
4977   2A24 00 
4978   2A25 53 68 69 65 __s39: .db "Shield Control Reports:\n  'This is not the Federation Treasury.'", 0
4978   2A29 6C 64 20 43 
4978   2A2D 6F 6E 74 72 
4978   2A31 6F 6C 20 52 
4978   2A35 65 70 6F 72 
4978   2A39 74 73 3A 0A 
4978   2A3D 20 20 27 54 
4978   2A41 68 69 73 20 
4978   2A45 69 73 20 6E 
4978   2A49 6F 74 20 74 
4978   2A4D 68 65 20 46 
4978   2A51 65 64 65 72 
4978   2A55 61 74 69 6F 
4978   2A59 6E 20 54 72 
4978   2A5D 65 61 73 75 
4978   2A61 72 79 2E 27 
4978   2A65 00 
4979   2A66 44 65 66 6C __s40: .db "Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n", 0
4979   2A6A 65 63 74 6F 
4979   2A6E 72 20 43 6F 
4979   2A72 6E 74 72 6F 
4979   2A76 6C 20 52 6F 
4979   2A7A 6F 6D 20 72 
4979   2A7E 65 70 6F 72 
4979   2A82 74 3A 0A 20 
4979   2A86 20 27 53 68 
4979   2A8A 69 65 6C 64 
4979   2A8E 73 20 6E 6F 
4979   2A92 77 20 61 74 
4979   2A96 20 25 64 20 
4979   2A9A 75 6E 69 74 
4979   2A9E 73 20 70 65 
4979   2AA2 72 20 79 6F 
4979   2AA6 75 72 20 63 
4979   2AAA 6F 6D 6D 61 
4979   2AAE 6E 64 2E 27 
4979   2AB2 0A 0A 00 
4980   2AB5 0A 20 20 20 __s41: .db "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", 0
4980   2AB9 20 20 43 6F 
4980   2ABD 6D 70 75 74 
4980   2AC1 65 72 20 52 
4980   2AC5 65 63 6F 72 
4980   2AC9 64 20 6F 66 
4980   2ACD 20 47 61 6C 
4980   2AD1 61 78 79 20 
4980   2AD5 66 6F 72 20 
4980   2AD9 51 75 61 64 
4980   2ADD 72 61 6E 74 
4980   2AE1 20 25 64 2C 
4980   2AE5 25 64 0A 0A 
4980   2AE9 00 
4981   2AEA 20 20 20 20 __s42: .db "     1     2     3     4     5     6     7     8", 0
4981   2AEE 20 31 20 20 
4981   2AF2 20 20 20 32 
4981   2AF6 20 20 20 20 
4981   2AFA 20 33 20 20 
4981   2AFE 20 20 20 34 
4981   2B02 20 20 20 20 
4981   2B06 20 35 20 20 
4981   2B0A 20 20 20 36 
4981   2B0E 20 20 20 20 
4981   2B12 20 37 20 20 
4981   2B16 20 20 20 38 
4981   2B1A 00 
4982   2B1B 25 73 25 64 __s43: .db "%s%d", 0
4982   2B1F 00 
4983   2B20 2A 2A 2A 00 __s44: .db "***", 0
4984   2B24 25 73 0A 00 __s45: .db "%s\n", 0
4985   2B28             
4986   2B28 2A 2B       _heap_top: .dw _heap
4987   2B2A 00          _heap: .db 0
4988   2B2B             ; --- END DATA BLOCK
4989   2B2B             
4990   2B2B             .end
tasm: Number of errors = 0
