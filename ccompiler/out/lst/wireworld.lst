0001   0000             ; --- FILENAME: programs/wireworld
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; int i; 
0011   0408 52 02 00      sub sp, 2 ; i
0012   040B             ;; grid[5][5] = CONDUCTOR; 
0013   040B 3B 81 1F      mov d, _grid_data ; $grid
0014   040E D7            push a
0015   040F DA            push d
0016   0410 26 05 00      mov b, $5
0017   0413 E7            pop d
0018   0414 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0019   0418 DA            push d
0020   0419 26 05 00      mov b, $5
0021   041C E7            pop d
0022   041D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0023   0421 E4            pop a
0024   0422 DA            push d
0025   0423 26 01 00      mov b, 1; CONDUCTOR
0026   0426 E7            pop d
0027   0427 FD 43         mov [d], b
0028   0429             ;; grid[6][5] = ELECTRON_HEAD; 
0029   0429 3B 81 1F      mov d, _grid_data ; $grid
0030   042C D7            push a
0031   042D DA            push d
0032   042E 26 06 00      mov b, $6
0033   0431 E7            pop d
0034   0432 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0035   0436 DA            push d
0036   0437 26 05 00      mov b, $5
0037   043A E7            pop d
0038   043B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0039   043F E4            pop a
0040   0440 DA            push d
0041   0441 26 02 00      mov b, 2; ELECTRON_HEAD
0042   0444 E7            pop d
0043   0445 FD 43         mov [d], b
0044   0447             ;; grid[7][5] = CONDUCTOR; 
0045   0447 3B 81 1F      mov d, _grid_data ; $grid
0046   044A D7            push a
0047   044B DA            push d
0048   044C 26 07 00      mov b, $7
0049   044F E7            pop d
0050   0450 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0051   0454 DA            push d
0052   0455 26 05 00      mov b, $5
0053   0458 E7            pop d
0054   0459 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0055   045D E4            pop a
0056   045E DA            push d
0057   045F 26 01 00      mov b, 1; CONDUCTOR
0058   0462 E7            pop d
0059   0463 FD 43         mov [d], b
0060   0465             ;; grid[6][6] = ELECTRON_TAIL; 
0061   0465 3B 81 1F      mov d, _grid_data ; $grid
0062   0468 D7            push a
0063   0469 DA            push d
0064   046A 26 06 00      mov b, $6
0065   046D E7            pop d
0066   046E FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0067   0472 DA            push d
0068   0473 26 06 00      mov b, $6
0069   0476 E7            pop d
0070   0477 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0071   047B E4            pop a
0072   047C DA            push d
0073   047D 26 03 00      mov b, 3; ELECTRON_TAIL
0074   0480 E7            pop d
0075   0481 FD 43         mov [d], b
0076   0483             ;; grid[6][7] = CONDUCTOR; 
0077   0483 3B 81 1F      mov d, _grid_data ; $grid
0078   0486 D7            push a
0079   0487 DA            push d
0080   0488 26 06 00      mov b, $6
0081   048B E7            pop d
0082   048C FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0083   0490 DA            push d
0084   0491 26 07 00      mov b, $7
0085   0494 E7            pop d
0086   0495 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0087   0499 E4            pop a
0088   049A DA            push d
0089   049B 26 01 00      mov b, 1; CONDUCTOR
0090   049E E7            pop d
0091   049F FD 43         mov [d], b
0092   04A1             ;; grid[5][10] = CONDUCTOR; 
0093   04A1 3B 81 1F      mov d, _grid_data ; $grid
0094   04A4 D7            push a
0095   04A5 DA            push d
0096   04A6 26 05 00      mov b, $5
0097   04A9 E7            pop d
0098   04AA FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0099   04AE DA            push d
0100   04AF 26 0A 00      mov b, $a
0101   04B2 E7            pop d
0102   04B3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0103   04B7 E4            pop a
0104   04B8 DA            push d
0105   04B9 26 01 00      mov b, 1; CONDUCTOR
0106   04BC E7            pop d
0107   04BD FD 43         mov [d], b
0108   04BF             ;; grid[6][10] = ELECTRON_HEAD; 
0109   04BF 3B 81 1F      mov d, _grid_data ; $grid
0110   04C2 D7            push a
0111   04C3 DA            push d
0112   04C4 26 06 00      mov b, $6
0113   04C7 E7            pop d
0114   04C8 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0115   04CC DA            push d
0116   04CD 26 0A 00      mov b, $a
0117   04D0 E7            pop d
0118   04D1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0119   04D5 E4            pop a
0120   04D6 DA            push d
0121   04D7 26 02 00      mov b, 2; ELECTRON_HEAD
0122   04DA E7            pop d
0123   04DB FD 43         mov [d], b
0124   04DD             ;; grid[7][10] = CONDUCTOR; 
0125   04DD 3B 81 1F      mov d, _grid_data ; $grid
0126   04E0 D7            push a
0127   04E1 DA            push d
0128   04E2 26 07 00      mov b, $7
0129   04E5 E7            pop d
0130   04E6 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0131   04EA DA            push d
0132   04EB 26 0A 00      mov b, $a
0133   04EE E7            pop d
0134   04EF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0135   04F3 E4            pop a
0136   04F4 DA            push d
0137   04F5 26 01 00      mov b, 1; CONDUCTOR
0138   04F8 E7            pop d
0139   04F9 FD 43         mov [d], b
0140   04FB             ;; grid[6][11] = ELECTRON_TAIL; 
0141   04FB 3B 81 1F      mov d, _grid_data ; $grid
0142   04FE D7            push a
0143   04FF DA            push d
0144   0500 26 06 00      mov b, $6
0145   0503 E7            pop d
0146   0504 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0147   0508 DA            push d
0148   0509 26 0B 00      mov b, $b
0149   050C E7            pop d
0150   050D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0151   0511 E4            pop a
0152   0512 DA            push d
0153   0513 26 03 00      mov b, 3; ELECTRON_TAIL
0154   0516 E7            pop d
0155   0517 FD 43         mov [d], b
0156   0519             ;; grid[6][12] = CONDUCTOR; 
0157   0519 3B 81 1F      mov d, _grid_data ; $grid
0158   051C D7            push a
0159   051D DA            push d
0160   051E 26 06 00      mov b, $6
0161   0521 E7            pop d
0162   0522 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0163   0526 DA            push d
0164   0527 26 0C 00      mov b, $c
0165   052A E7            pop d
0166   052B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0167   052F E4            pop a
0168   0530 DA            push d
0169   0531 26 01 00      mov b, 1; CONDUCTOR
0170   0534 E7            pop d
0171   0535 FD 43         mov [d], b
0172   0537             ;; for (i = 8; i <= 14; i++) { 
0173   0537             _for1_init:
0174   0537 FA FF FF      lea d, [bp + -1] ; $i
0175   053A DA            push d
0176   053B 26 08 00      mov b, $8
0177   053E E7            pop d
0178   053F FD 43         mov [d], b
0179   0541             _for1_cond:
0180   0541 FA FF FF      lea d, [bp + -1] ; $i
0181   0544 2A            mov b, [d]
0182   0545             ; START RELATIONAL
0183   0545 D7            push a
0184   0546 11            mov a, b
0185   0547 26 0E 00      mov b, $e
0186   054A B0            cmp a, b
0187   054B FD 74         sle ; <= (signed)
0188   054D E4            pop a
0189   054E             ; END RELATIONAL
0190   054E C0 00 00      cmp b, 0
0191   0551 C6 83 05      je _for1_exit
0192   0554             _for1_block:
0193   0554             ;; grid[7][i] = CONDUCTOR; 
0194   0554 3B 81 1F      mov d, _grid_data ; $grid
0195   0557 D7            push a
0196   0558 DA            push d
0197   0559 26 07 00      mov b, $7
0198   055C E7            pop d
0199   055D FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0200   0561 DA            push d
0201   0562 FA FF FF      lea d, [bp + -1] ; $i
0202   0565 2A            mov b, [d]
0203   0566 E7            pop d
0204   0567 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0205   056B E4            pop a
0206   056C DA            push d
0207   056D 26 01 00      mov b, 1; CONDUCTOR
0208   0570 E7            pop d
0209   0571 FD 43         mov [d], b
0210   0573             _for1_update:
0211   0573 FA FF FF      lea d, [bp + -1] ; $i
0212   0576 2A            mov b, [d]
0213   0577 FD 77         inc b
0214   0579 FA FF FF      lea d, [bp + -1] ; $i
0215   057C FD 43         mov [d], b
0216   057E FD 7D         dec b
0217   0580 0A 41 05      jmp _for1_cond
0218   0583             _for1_exit:
0219   0583             ;; grid[7][15] = CONDUCTOR; 
0220   0583 3B 81 1F      mov d, _grid_data ; $grid
0221   0586 D7            push a
0222   0587 DA            push d
0223   0588 26 07 00      mov b, $7
0224   058B E7            pop d
0225   058C FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0226   0590 DA            push d
0227   0591 26 0F 00      mov b, $f
0228   0594 E7            pop d
0229   0595 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0230   0599 E4            pop a
0231   059A DA            push d
0232   059B 26 01 00      mov b, 1; CONDUCTOR
0233   059E E7            pop d
0234   059F FD 43         mov [d], b
0235   05A1             ;; grid[6][15] = ELECTRON_TAIL; 
0236   05A1 3B 81 1F      mov d, _grid_data ; $grid
0237   05A4 D7            push a
0238   05A5 DA            push d
0239   05A6 26 06 00      mov b, $6
0240   05A9 E7            pop d
0241   05AA FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0242   05AE DA            push d
0243   05AF 26 0F 00      mov b, $f
0244   05B2 E7            pop d
0245   05B3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0246   05B7 E4            pop a
0247   05B8 DA            push d
0248   05B9 26 03 00      mov b, 3; ELECTRON_TAIL
0249   05BC E7            pop d
0250   05BD FD 43         mov [d], b
0251   05BF             ;; grid[8][15] = ELECTRON_TAIL; 
0252   05BF 3B 81 1F      mov d, _grid_data ; $grid
0253   05C2 D7            push a
0254   05C3 DA            push d
0255   05C4 26 08 00      mov b, $8
0256   05C7 E7            pop d
0257   05C8 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0258   05CC DA            push d
0259   05CD 26 0F 00      mov b, $f
0260   05D0 E7            pop d
0261   05D1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0262   05D5 E4            pop a
0263   05D6 DA            push d
0264   05D7 26 03 00      mov b, 3; ELECTRON_TAIL
0265   05DA E7            pop d
0266   05DB FD 43         mov [d], b
0267   05DD             ;; grid[6][16] = CONDUCTOR; 
0268   05DD 3B 81 1F      mov d, _grid_data ; $grid
0269   05E0 D7            push a
0270   05E1 DA            push d
0271   05E2 26 06 00      mov b, $6
0272   05E5 E7            pop d
0273   05E6 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0274   05EA DA            push d
0275   05EB 26 10 00      mov b, $10
0276   05EE E7            pop d
0277   05EF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0278   05F3 E4            pop a
0279   05F4 DA            push d
0280   05F5 26 01 00      mov b, 1; CONDUCTOR
0281   05F8 E7            pop d
0282   05F9 FD 43         mov [d], b
0283   05FB             ;; grid[8][16] = CONDUCTOR; 
0284   05FB 3B 81 1F      mov d, _grid_data ; $grid
0285   05FE D7            push a
0286   05FF DA            push d
0287   0600 26 08 00      mov b, $8
0288   0603 E7            pop d
0289   0604 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0290   0608 DA            push d
0291   0609 26 10 00      mov b, $10
0292   060C E7            pop d
0293   060D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0294   0611 E4            pop a
0295   0612 DA            push d
0296   0613 26 01 00      mov b, 1; CONDUCTOR
0297   0616 E7            pop d
0298   0617 FD 43         mov [d], b
0299   0619             ;; for (i = 17; i <= 25; i++) { 
0300   0619             _for2_init:
0301   0619 FA FF FF      lea d, [bp + -1] ; $i
0302   061C DA            push d
0303   061D 26 11 00      mov b, $11
0304   0620 E7            pop d
0305   0621 FD 43         mov [d], b
0306   0623             _for2_cond:
0307   0623 FA FF FF      lea d, [bp + -1] ; $i
0308   0626 2A            mov b, [d]
0309   0627             ; START RELATIONAL
0310   0627 D7            push a
0311   0628 11            mov a, b
0312   0629 26 19 00      mov b, $19
0313   062C B0            cmp a, b
0314   062D FD 74         sle ; <= (signed)
0315   062F E4            pop a
0316   0630             ; END RELATIONAL
0317   0630 C0 00 00      cmp b, 0
0318   0633 C6 65 06      je _for2_exit
0319   0636             _for2_block:
0320   0636             ;; grid[7][i] = CONDUCTOR; 
0321   0636 3B 81 1F      mov d, _grid_data ; $grid
0322   0639 D7            push a
0323   063A DA            push d
0324   063B 26 07 00      mov b, $7
0325   063E E7            pop d
0326   063F FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0327   0643 DA            push d
0328   0644 FA FF FF      lea d, [bp + -1] ; $i
0329   0647 2A            mov b, [d]
0330   0648 E7            pop d
0331   0649 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0332   064D E4            pop a
0333   064E DA            push d
0334   064F 26 01 00      mov b, 1; CONDUCTOR
0335   0652 E7            pop d
0336   0653 FD 43         mov [d], b
0337   0655             _for2_update:
0338   0655 FA FF FF      lea d, [bp + -1] ; $i
0339   0658 2A            mov b, [d]
0340   0659 FD 77         inc b
0341   065B FA FF FF      lea d, [bp + -1] ; $i
0342   065E FD 43         mov [d], b
0343   0660 FD 7D         dec b
0344   0662 0A 23 06      jmp _for2_cond
0345   0665             _for2_exit:
0346   0665             ;; while (1) { 
0347   0665             _while3_cond:
0348   0665 26 01 00      mov b, $1
0349   0668 C0 00 00      cmp b, 0
0350   066B C6 77 06      je _while3_exit
0351   066E             _while3_block:
0352   066E             ;; print_grid(); 
0353   066E 07 B0 1B      call print_grid
0354   0671             ;; iterate(); 
0355   0671 07 85 1C      call iterate
0356   0674 0A 65 06      jmp _while3_cond
0357   0677             _while3_exit:
0358   0677             ;; return 0; 
0359   0677 26 00 00      mov b, $0
0360   067A F9            leave
0361   067B 05 0B         syscall sys_terminate_proc
0362   067D             
0363   067D             strcpy:
0364   067D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0365   0680             ;; char *psrc; 
0366   0680 52 02 00      sub sp, 2 ; psrc
0367   0683             ;; char *pdest; 
0368   0683 52 02 00      sub sp, 2 ; pdest
0369   0686             ;; psrc = src; 
0370   0686 FA FF FF      lea d, [bp + -1] ; $psrc
0371   0689 DA            push d
0372   068A FA 07 00      lea d, [bp + 7] ; $src
0373   068D 2A            mov b, [d]
0374   068E E7            pop d
0375   068F FD 43         mov [d], b
0376   0691             ;; pdest = dest; 
0377   0691 FA FD FF      lea d, [bp + -3] ; $pdest
0378   0694 DA            push d
0379   0695 FA 05 00      lea d, [bp + 5] ; $dest
0380   0698 2A            mov b, [d]
0381   0699 E7            pop d
0382   069A FD 43         mov [d], b
0383   069C             ;; while(*psrc) *pdest++ = *psrc++; 
0384   069C             _while4_cond:
0385   069C FA FF FF      lea d, [bp + -1] ; $psrc
0386   069F 2A            mov b, [d]
0387   06A0 74            mov d, b
0388   06A1 32            mov bl, [d]
0389   06A2 A7 00         mov bh, 0
0390   06A4 C0 00 00      cmp b, 0
0391   06A7 C6 CF 06      je _while4_exit
0392   06AA             _while4_block:
0393   06AA             ;; *pdest++ = *psrc++; 
0394   06AA FA FD FF      lea d, [bp + -3] ; $pdest
0395   06AD 2A            mov b, [d]
0396   06AE FD 77         inc b
0397   06B0 FA FD FF      lea d, [bp + -3] ; $pdest
0398   06B3 FD 43         mov [d], b
0399   06B5 FD 7D         dec b
0400   06B7 D8            push b
0401   06B8 FA FF FF      lea d, [bp + -1] ; $psrc
0402   06BB 2A            mov b, [d]
0403   06BC FD 77         inc b
0404   06BE FA FF FF      lea d, [bp + -1] ; $psrc
0405   06C1 FD 43         mov [d], b
0406   06C3 FD 7D         dec b
0407   06C5 74            mov d, b
0408   06C6 32            mov bl, [d]
0409   06C7 A7 00         mov bh, 0
0410   06C9 E7            pop d
0411   06CA FD 3E         mov [d], bl
0412   06CC 0A 9C 06      jmp _while4_cond
0413   06CF             _while4_exit:
0414   06CF             ;; *pdest = '\0'; 
0415   06CF FA FD FF      lea d, [bp + -3] ; $pdest
0416   06D2 2A            mov b, [d]
0417   06D3 D8            push b
0418   06D4 26 00 00      mov b, $0
0419   06D7 E7            pop d
0420   06D8 FD 3E         mov [d], bl
0421   06DA F9            leave
0422   06DB 09            ret
0423   06DC             
0424   06DC             strcmp:
0425   06DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0426   06DF             ;; while (*s1 && (*s1 == *s2)) { 
0427   06DF             _while5_cond:
0428   06DF FA 05 00      lea d, [bp + 5] ; $s1
0429   06E2 2A            mov b, [d]
0430   06E3 74            mov d, b
0431   06E4 32            mov bl, [d]
0432   06E5 A7 00         mov bh, 0
0433   06E7             ; START LOGICAL AND
0434   06E7 D7            push a
0435   06E8 11            mov a, b
0436   06E9 FA 05 00      lea d, [bp + 5] ; $s1
0437   06EC 2A            mov b, [d]
0438   06ED 74            mov d, b
0439   06EE 32            mov bl, [d]
0440   06EF A7 00         mov bh, 0
0441   06F1             ; START RELATIONAL
0442   06F1 D7            push a
0443   06F2 11            mov a, b
0444   06F3 FA 07 00      lea d, [bp + 7] ; $s2
0445   06F6 2A            mov b, [d]
0446   06F7 74            mov d, b
0447   06F8 32            mov bl, [d]
0448   06F9 A7 00         mov bh, 0
0449   06FB B0            cmp a, b
0450   06FC FD 71         seq ; ==
0451   06FE E4            pop a
0452   06FF             ; END RELATIONAL
0453   06FF FD A7         sand a, b
0454   0701 E4            pop a
0455   0702             ; END LOGICAL AND
0456   0702 C0 00 00      cmp b, 0
0457   0705 C6 25 07      je _while5_exit
0458   0708             _while5_block:
0459   0708             ;; s1++; 
0460   0708 FA 05 00      lea d, [bp + 5] ; $s1
0461   070B 2A            mov b, [d]
0462   070C FD 77         inc b
0463   070E FA 05 00      lea d, [bp + 5] ; $s1
0464   0711 FD 43         mov [d], b
0465   0713 FD 7D         dec b
0466   0715             ;; s2++; 
0467   0715 FA 07 00      lea d, [bp + 7] ; $s2
0468   0718 2A            mov b, [d]
0469   0719 FD 77         inc b
0470   071B FA 07 00      lea d, [bp + 7] ; $s2
0471   071E FD 43         mov [d], b
0472   0720 FD 7D         dec b
0473   0722 0A DF 06      jmp _while5_cond
0474   0725             _while5_exit:
0475   0725             ;; return *s1 - *s2; 
0476   0725 FA 05 00      lea d, [bp + 5] ; $s1
0477   0728 2A            mov b, [d]
0478   0729 74            mov d, b
0479   072A 32            mov bl, [d]
0480   072B A7 00         mov bh, 0
0481   072D             ; START TERMS
0482   072D D7            push a
0483   072E 11            mov a, b
0484   072F FA 07 00      lea d, [bp + 7] ; $s2
0485   0732 2A            mov b, [d]
0486   0733 74            mov d, b
0487   0734 32            mov bl, [d]
0488   0735 A7 00         mov bh, 0
0489   0737 60            sub a, b
0490   0738 27            mov b, a
0491   0739 E4            pop a
0492   073A             ; END TERMS
0493   073A F9            leave
0494   073B 09            ret
0495   073C             
0496   073C             strncmp:
0497   073C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0498   073F F9            leave
0499   0740 09            ret
0500   0741             
0501   0741             strcat:
0502   0741 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0503   0744             ;; int dest_len; 
0504   0744 52 02 00      sub sp, 2 ; dest_len
0505   0747             ;; int i; 
0506   0747 52 02 00      sub sp, 2 ; i
0507   074A             ;; dest_len = strlen(dest); 
0508   074A FA FF FF      lea d, [bp + -1] ; $dest_len
0509   074D DA            push d
0510   074E FA 05 00      lea d, [bp + 5] ; $dest
0511   0751 2A            mov b, [d]
0512   0752 FD AB         swp b
0513   0754 D8            push b
0514   0755 07 F7 07      call strlen
0515   0758 51 02 00      add sp, 2
0516   075B E7            pop d
0517   075C FD 43         mov [d], b
0518   075E             ;; for (i = 0; src[i] != 0; i=i+1) { 
0519   075E             _for6_init:
0520   075E FA FD FF      lea d, [bp + -3] ; $i
0521   0761 DA            push d
0522   0762 26 00 00      mov b, $0
0523   0765 E7            pop d
0524   0766 FD 43         mov [d], b
0525   0768             _for6_cond:
0526   0768 FA 07 00      lea d, [bp + 7] ; $src
0527   076B FD 2A         mov d, [d]
0528   076D D7            push a
0529   076E DA            push d
0530   076F FA FD FF      lea d, [bp + -3] ; $i
0531   0772 2A            mov b, [d]
0532   0773 E7            pop d
0533   0774 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0534   0778 E4            pop a
0535   0779 32            mov bl, [d]
0536   077A A7 00         mov bh, 0
0537   077C             ; START RELATIONAL
0538   077C D7            push a
0539   077D 11            mov a, b
0540   077E 26 00 00      mov b, $0
0541   0781 B0            cmp a, b
0542   0782 FD 72         sneq ; !=
0543   0784 E4            pop a
0544   0785             ; END RELATIONAL
0545   0785 C0 00 00      cmp b, 0
0546   0788 C6 D1 07      je _for6_exit
0547   078B             _for6_block:
0548   078B             ;; dest[dest_len + i] = src[i]; 
0549   078B FA 05 00      lea d, [bp + 5] ; $dest
0550   078E FD 2A         mov d, [d]
0551   0790 D7            push a
0552   0791 DA            push d
0553   0792 FA FF FF      lea d, [bp + -1] ; $dest_len
0554   0795 2A            mov b, [d]
0555   0796             ; START TERMS
0556   0796 D7            push a
0557   0797 11            mov a, b
0558   0798 FA FD FF      lea d, [bp + -3] ; $i
0559   079B 2A            mov b, [d]
0560   079C 56            add b, a
0561   079D E4            pop a
0562   079E             ; END TERMS
0563   079E E7            pop d
0564   079F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0565   07A3 E4            pop a
0566   07A4 DA            push d
0567   07A5 FA 07 00      lea d, [bp + 7] ; $src
0568   07A8 FD 2A         mov d, [d]
0569   07AA D7            push a
0570   07AB DA            push d
0571   07AC FA FD FF      lea d, [bp + -3] ; $i
0572   07AF 2A            mov b, [d]
0573   07B0 E7            pop d
0574   07B1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0575   07B5 E4            pop a
0576   07B6 32            mov bl, [d]
0577   07B7 A7 00         mov bh, 0
0578   07B9 E7            pop d
0579   07BA FD 3E         mov [d], bl
0580   07BC             _for6_update:
0581   07BC FA FD FF      lea d, [bp + -3] ; $i
0582   07BF DA            push d
0583   07C0 FA FD FF      lea d, [bp + -3] ; $i
0584   07C3 2A            mov b, [d]
0585   07C4             ; START TERMS
0586   07C4 D7            push a
0587   07C5 11            mov a, b
0588   07C6 26 01 00      mov b, $1
0589   07C9 56            add b, a
0590   07CA E4            pop a
0591   07CB             ; END TERMS
0592   07CB E7            pop d
0593   07CC FD 43         mov [d], b
0594   07CE 0A 68 07      jmp _for6_cond
0595   07D1             _for6_exit:
0596   07D1             ;; dest[dest_len + i] = 0; 
0597   07D1 FA 05 00      lea d, [bp + 5] ; $dest
0598   07D4 FD 2A         mov d, [d]
0599   07D6 D7            push a
0600   07D7 DA            push d
0601   07D8 FA FF FF      lea d, [bp + -1] ; $dest_len
0602   07DB 2A            mov b, [d]
0603   07DC             ; START TERMS
0604   07DC D7            push a
0605   07DD 11            mov a, b
0606   07DE FA FD FF      lea d, [bp + -3] ; $i
0607   07E1 2A            mov b, [d]
0608   07E2 56            add b, a
0609   07E3 E4            pop a
0610   07E4             ; END TERMS
0611   07E4 E7            pop d
0612   07E5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0613   07E9 E4            pop a
0614   07EA DA            push d
0615   07EB 26 00 00      mov b, $0
0616   07EE E7            pop d
0617   07EF FD 3E         mov [d], bl
0618   07F1             ;; return dest; 
0619   07F1 FA 05 00      lea d, [bp + 5] ; $dest
0620   07F4 2A            mov b, [d]
0621   07F5 F9            leave
0622   07F6 09            ret
0623   07F7             
0624   07F7             strlen:
0625   07F7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0626   07FA             ;; int length; 
0627   07FA 52 02 00      sub sp, 2 ; length
0628   07FD             ;; length = 0; 
0629   07FD FA FF FF      lea d, [bp + -1] ; $length
0630   0800 DA            push d
0631   0801 26 00 00      mov b, $0
0632   0804 E7            pop d
0633   0805 FD 43         mov [d], b
0634   0807             ;; while (str[length] != 0) { 
0635   0807             _while7_cond:
0636   0807 FA 05 00      lea d, [bp + 5] ; $str
0637   080A FD 2A         mov d, [d]
0638   080C D7            push a
0639   080D DA            push d
0640   080E FA FF FF      lea d, [bp + -1] ; $length
0641   0811 2A            mov b, [d]
0642   0812 E7            pop d
0643   0813 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0644   0817 E4            pop a
0645   0818 32            mov bl, [d]
0646   0819 A7 00         mov bh, 0
0647   081B             ; START RELATIONAL
0648   081B D7            push a
0649   081C 11            mov a, b
0650   081D 26 00 00      mov b, $0
0651   0820 B0            cmp a, b
0652   0821 FD 72         sneq ; !=
0653   0823 E4            pop a
0654   0824             ; END RELATIONAL
0655   0824 C0 00 00      cmp b, 0
0656   0827 C6 3A 08      je _while7_exit
0657   082A             _while7_block:
0658   082A             ;; length++; 
0659   082A FA FF FF      lea d, [bp + -1] ; $length
0660   082D 2A            mov b, [d]
0661   082E FD 77         inc b
0662   0830 FA FF FF      lea d, [bp + -1] ; $length
0663   0833 FD 43         mov [d], b
0664   0835 FD 7D         dec b
0665   0837 0A 07 08      jmp _while7_cond
0666   083A             _while7_exit:
0667   083A             ;; return length; 
0668   083A FA FF FF      lea d, [bp + -1] ; $length
0669   083D 2A            mov b, [d]
0670   083E F9            leave
0671   083F 09            ret
0672   0840             
0673   0840             exit:
0674   0840 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0675   0843             
0676   0843             ; --- BEGIN INLINE ASM BLOCK
0677   0843 05 0B         syscall sys_terminate_proc
0678   0845             ; --- END INLINE ASM BLOCK
0679   0845             
0680   0845 F9            leave
0681   0846 09            ret
0682   0847             
0683   0847             memset:
0684   0847 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0685   084A             ;; int i; 
0686   084A 52 02 00      sub sp, 2 ; i
0687   084D             ;; for(i = 0; i < size; i++){ 
0688   084D             _for8_init:
0689   084D FA FF FF      lea d, [bp + -1] ; $i
0690   0850 DA            push d
0691   0851 26 00 00      mov b, $0
0692   0854 E7            pop d
0693   0855 FD 43         mov [d], b
0694   0857             _for8_cond:
0695   0857 FA FF FF      lea d, [bp + -1] ; $i
0696   085A 2A            mov b, [d]
0697   085B             ; START RELATIONAL
0698   085B D7            push a
0699   085C 11            mov a, b
0700   085D FA 08 00      lea d, [bp + 8] ; $size
0701   0860 2A            mov b, [d]
0702   0861 B0            cmp a, b
0703   0862 FD 73         slt ; < (signed)
0704   0864 E4            pop a
0705   0865             ; END RELATIONAL
0706   0865 C0 00 00      cmp b, 0
0707   0868 C6 91 08      je _for8_exit
0708   086B             _for8_block:
0709   086B             ;; *(s+i) = c; 
0710   086B FA 05 00      lea d, [bp + 5] ; $s
0711   086E 2A            mov b, [d]
0712   086F             ; START TERMS
0713   086F D7            push a
0714   0870 11            mov a, b
0715   0871 FA FF FF      lea d, [bp + -1] ; $i
0716   0874 2A            mov b, [d]
0717   0875 56            add b, a
0718   0876 E4            pop a
0719   0877             ; END TERMS
0720   0877 D8            push b
0721   0878 FA 07 00      lea d, [bp + 7] ; $c
0722   087B 32            mov bl, [d]
0723   087C A7 00         mov bh, 0
0724   087E E7            pop d
0725   087F FD 3E         mov [d], bl
0726   0881             _for8_update:
0727   0881 FA FF FF      lea d, [bp + -1] ; $i
0728   0884 2A            mov b, [d]
0729   0885 FD 77         inc b
0730   0887 FA FF FF      lea d, [bp + -1] ; $i
0731   088A FD 43         mov [d], b
0732   088C FD 7D         dec b
0733   088E 0A 57 08      jmp _for8_cond
0734   0891             _for8_exit:
0735   0891             ;; return s; 
0736   0891 FA 05 00      lea d, [bp + 5] ; $s
0737   0894 2A            mov b, [d]
0738   0895 F9            leave
0739   0896 09            ret
0740   0897             
0741   0897             atoi:
0742   0897 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0743   089A             ;; int result = 0;  // Initialize result 
0744   089A 52 02 00      sub sp, 2 ; result
0745   089D             ; --- START LOCAL VAR INITIALIZATION
0746   089D FA FF FF      lea d, [bp + -1] ; $result
0747   08A0 DA            push d
0748   08A1 26 00 00      mov b, $0
0749   08A4 E7            pop d
0750   08A5 FD 43         mov [d], b
0751   08A7             ; --- END LOCAL VAR INITIALIZATION
0752   08A7             ;; int sign = 1;    // Initialize sign as positive 
0753   08A7 52 02 00      sub sp, 2 ; sign
0754   08AA             ; --- START LOCAL VAR INITIALIZATION
0755   08AA FA FD FF      lea d, [bp + -3] ; $sign
0756   08AD DA            push d
0757   08AE 26 01 00      mov b, $1
0758   08B1 E7            pop d
0759   08B2 FD 43         mov [d], b
0760   08B4             ; --- END LOCAL VAR INITIALIZATION
0761   08B4             ;; while (*str == ' ') str++; 
0762   08B4             _while9_cond:
0763   08B4 FA 05 00      lea d, [bp + 5] ; $str
0764   08B7 2A            mov b, [d]
0765   08B8 74            mov d, b
0766   08B9 32            mov bl, [d]
0767   08BA A7 00         mov bh, 0
0768   08BC             ; START RELATIONAL
0769   08BC D7            push a
0770   08BD 11            mov a, b
0771   08BE 26 20 00      mov b, $20
0772   08C1 B0            cmp a, b
0773   08C2 FD 71         seq ; ==
0774   08C4 E4            pop a
0775   08C5             ; END RELATIONAL
0776   08C5 C0 00 00      cmp b, 0
0777   08C8 C6 DB 08      je _while9_exit
0778   08CB             _while9_block:
0779   08CB             ;; str++; 
0780   08CB FA 05 00      lea d, [bp + 5] ; $str
0781   08CE 2A            mov b, [d]
0782   08CF FD 77         inc b
0783   08D1 FA 05 00      lea d, [bp + 5] ; $str
0784   08D4 FD 43         mov [d], b
0785   08D6 FD 7D         dec b
0786   08D8 0A B4 08      jmp _while9_cond
0787   08DB             _while9_exit:
0788   08DB             ;; if (*str == '-' || *str == '+') { 
0789   08DB             _if10_cond:
0790   08DB FA 05 00      lea d, [bp + 5] ; $str
0791   08DE 2A            mov b, [d]
0792   08DF 74            mov d, b
0793   08E0 32            mov bl, [d]
0794   08E1 A7 00         mov bh, 0
0795   08E3             ; START RELATIONAL
0796   08E3 D7            push a
0797   08E4 11            mov a, b
0798   08E5 26 2D 00      mov b, $2d
0799   08E8 B0            cmp a, b
0800   08E9 FD 71         seq ; ==
0801   08EB E4            pop a
0802   08EC             ; END RELATIONAL
0803   08EC             ; START LOGICAL OR
0804   08EC D7            push a
0805   08ED 11            mov a, b
0806   08EE FA 05 00      lea d, [bp + 5] ; $str
0807   08F1 2A            mov b, [d]
0808   08F2 74            mov d, b
0809   08F3 32            mov bl, [d]
0810   08F4 A7 00         mov bh, 0
0811   08F6             ; START RELATIONAL
0812   08F6 D7            push a
0813   08F7 11            mov a, b
0814   08F8 26 2B 00      mov b, $2b
0815   08FB B0            cmp a, b
0816   08FC FD 71         seq ; ==
0817   08FE E4            pop a
0818   08FF             ; END RELATIONAL
0819   08FF FD A8         sor a, b ; ||
0820   0901 E4            pop a
0821   0902             ; END LOGICAL OR
0822   0902 C0 00 00      cmp b, 0
0823   0905 C6 3E 09      je _if10_exit
0824   0908             _if10_true:
0825   0908             ;; if (*str == '-') sign = -1; 
0826   0908             _if11_cond:
0827   0908 FA 05 00      lea d, [bp + 5] ; $str
0828   090B 2A            mov b, [d]
0829   090C 74            mov d, b
0830   090D 32            mov bl, [d]
0831   090E A7 00         mov bh, 0
0832   0910             ; START RELATIONAL
0833   0910 D7            push a
0834   0911 11            mov a, b
0835   0912 26 2D 00      mov b, $2d
0836   0915 B0            cmp a, b
0837   0916 FD 71         seq ; ==
0838   0918 E4            pop a
0839   0919             ; END RELATIONAL
0840   0919 C0 00 00      cmp b, 0
0841   091C C6 2E 09      je _if11_exit
0842   091F             _if11_true:
0843   091F             ;; sign = -1; 
0844   091F FA FD FF      lea d, [bp + -3] ; $sign
0845   0922 DA            push d
0846   0923 26 01 00      mov b, $1
0847   0926 FD 97         neg b
0848   0928 E7            pop d
0849   0929 FD 43         mov [d], b
0850   092B 0A 2E 09      jmp _if11_exit
0851   092E             _if11_exit:
0852   092E             ;; str++; 
0853   092E FA 05 00      lea d, [bp + 5] ; $str
0854   0931 2A            mov b, [d]
0855   0932 FD 77         inc b
0856   0934 FA 05 00      lea d, [bp + 5] ; $str
0857   0937 FD 43         mov [d], b
0858   0939 FD 7D         dec b
0859   093B 0A 3E 09      jmp _if10_exit
0860   093E             _if10_exit:
0861   093E             ;; while (*str >= '0' && *str <= '9') { 
0862   093E             _while12_cond:
0863   093E FA 05 00      lea d, [bp + 5] ; $str
0864   0941 2A            mov b, [d]
0865   0942 74            mov d, b
0866   0943 32            mov bl, [d]
0867   0944 A7 00         mov bh, 0
0868   0946             ; START RELATIONAL
0869   0946 D7            push a
0870   0947 11            mov a, b
0871   0948 26 30 00      mov b, $30
0872   094B B0            cmp a, b
0873   094C FD 82         sgeu ; >= (unsigned)
0874   094E E4            pop a
0875   094F             ; END RELATIONAL
0876   094F             ; START LOGICAL AND
0877   094F D7            push a
0878   0950 11            mov a, b
0879   0951 FA 05 00      lea d, [bp + 5] ; $str
0880   0954 2A            mov b, [d]
0881   0955 74            mov d, b
0882   0956 32            mov bl, [d]
0883   0957 A7 00         mov bh, 0
0884   0959             ; START RELATIONAL
0885   0959 D7            push a
0886   095A 11            mov a, b
0887   095B 26 39 00      mov b, $39
0888   095E B0            cmp a, b
0889   095F FD 76         sleu ; <= (unsigned)
0890   0961 E4            pop a
0891   0962             ; END RELATIONAL
0892   0962 FD A7         sand a, b
0893   0964 E4            pop a
0894   0965             ; END LOGICAL AND
0895   0965 C0 00 00      cmp b, 0
0896   0968 C6 A3 09      je _while12_exit
0897   096B             _while12_block:
0898   096B             ;; result = result * 10 + (*str - '0'); 
0899   096B FA FF FF      lea d, [bp + -1] ; $result
0900   096E DA            push d
0901   096F FA FF FF      lea d, [bp + -1] ; $result
0902   0972 2A            mov b, [d]
0903   0973             ; START FACTORS
0904   0973 D7            push a
0905   0974 11            mov a, b
0906   0975 26 0A 00      mov b, $a
0907   0978 AC            mul a, b ; *
0908   0979 11            mov a, b
0909   097A 27            mov b, a
0910   097B E4            pop a
0911   097C             ; END FACTORS
0912   097C             ; START TERMS
0913   097C D7            push a
0914   097D 11            mov a, b
0915   097E FA 05 00      lea d, [bp + 5] ; $str
0916   0981 2A            mov b, [d]
0917   0982 74            mov d, b
0918   0983 32            mov bl, [d]
0919   0984 A7 00         mov bh, 0
0920   0986             ; START TERMS
0921   0986 D7            push a
0922   0987 11            mov a, b
0923   0988 26 30 00      mov b, $30
0924   098B 60            sub a, b
0925   098C 27            mov b, a
0926   098D E4            pop a
0927   098E             ; END TERMS
0928   098E 56            add b, a
0929   098F E4            pop a
0930   0990             ; END TERMS
0931   0990 E7            pop d
0932   0991 FD 43         mov [d], b
0933   0993             ;; str++; 
0934   0993 FA 05 00      lea d, [bp + 5] ; $str
0935   0996 2A            mov b, [d]
0936   0997 FD 77         inc b
0937   0999 FA 05 00      lea d, [bp + 5] ; $str
0938   099C FD 43         mov [d], b
0939   099E FD 7D         dec b
0940   09A0 0A 3E 09      jmp _while12_cond
0941   09A3             _while12_exit:
0942   09A3             ;; return sign * result; 
0943   09A3 FA FD FF      lea d, [bp + -3] ; $sign
0944   09A6 2A            mov b, [d]
0945   09A7             ; START FACTORS
0946   09A7 D7            push a
0947   09A8 11            mov a, b
0948   09A9 FA FF FF      lea d, [bp + -1] ; $result
0949   09AC 2A            mov b, [d]
0950   09AD AC            mul a, b ; *
0951   09AE 11            mov a, b
0952   09AF 27            mov b, a
0953   09B0 E4            pop a
0954   09B1             ; END FACTORS
0955   09B1 F9            leave
0956   09B2 09            ret
0957   09B3             
0958   09B3             rand:
0959   09B3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0960   09B6             ;; int  sec; 
0961   09B6 52 02 00      sub sp, 2 ; sec
0962   09B9             
0963   09B9             ; --- BEGIN INLINE ASM BLOCK
0964   09B9 19 00         mov al, 0
0965   09BB 05 01         syscall sys_rtc					
0966   09BD 1A            mov al, ah
0967   09BE FA FF FF      lea d, [bp + -1] ; $sec
0968   09C1 1E            mov al, [d]
0969   09C2 22 00         mov ah, 0
0970   09C4             ; --- END INLINE ASM BLOCK
0971   09C4             
0972   09C4             ;; return sec; 
0973   09C4 FA FF FF      lea d, [bp + -1] ; $sec
0974   09C7 2A            mov b, [d]
0975   09C8 F9            leave
0976   09C9 09            ret
0977   09CA             
0978   09CA             alloc:
0979   09CA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0980   09CD             ;; heap_top = heap_top + bytes; 
0981   09CD 3B 54 2C      mov d, _heap_top ; $heap_top
0982   09D0 DA            push d
0983   09D1 3B 54 2C      mov d, _heap_top ; $heap_top
0984   09D4 2A            mov b, [d]
0985   09D5             ; START TERMS
0986   09D5 D7            push a
0987   09D6 11            mov a, b
0988   09D7 FA 05 00      lea d, [bp + 5] ; $bytes
0989   09DA 2A            mov b, [d]
0990   09DB 56            add b, a
0991   09DC E4            pop a
0992   09DD             ; END TERMS
0993   09DD E7            pop d
0994   09DE FD 43         mov [d], b
0995   09E0             ;; return heap_top - bytes; 
0996   09E0 3B 54 2C      mov d, _heap_top ; $heap_top
0997   09E3 2A            mov b, [d]
0998   09E4             ; START TERMS
0999   09E4 D7            push a
1000   09E5 11            mov a, b
1001   09E6 FA 05 00      lea d, [bp + 5] ; $bytes
1002   09E9 2A            mov b, [d]
1003   09EA 60            sub a, b
1004   09EB 27            mov b, a
1005   09EC E4            pop a
1006   09ED             ; END TERMS
1007   09ED F9            leave
1008   09EE 09            ret
1009   09EF             
1010   09EF             free:
1011   09EF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1012   09F2             ;; return heap_top = heap_top - bytes; 
1013   09F2 3B 54 2C      mov d, _heap_top ; $heap_top
1014   09F5 DA            push d
1015   09F6 3B 54 2C      mov d, _heap_top ; $heap_top
1016   09F9 2A            mov b, [d]
1017   09FA             ; START TERMS
1018   09FA D7            push a
1019   09FB 11            mov a, b
1020   09FC FA 05 00      lea d, [bp + 5] ; $bytes
1021   09FF 2A            mov b, [d]
1022   0A00 60            sub a, b
1023   0A01 27            mov b, a
1024   0A02 E4            pop a
1025   0A03             ; END TERMS
1026   0A03 E7            pop d
1027   0A04 FD 43         mov [d], b
1028   0A06 F9            leave
1029   0A07 09            ret
1030   0A08             
1031   0A08             fopen:
1032   0A08 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1033   0A0B             ;; FILE *fp; 
1034   0A0B 52 02 00      sub sp, 2 ; fp
1035   0A0E             ;; fp = alloc(sizeof(int)); 
1036   0A0E FA FF FF      lea d, [bp + -1] ; $fp
1037   0A11 DA            push d
1038   0A12 26 02 00      mov b, 2
1039   0A15 FD AB         swp b
1040   0A17 D8            push b
1041   0A18 07 CA 09      call alloc
1042   0A1B 51 02 00      add sp, 2
1043   0A1E E7            pop d
1044   0A1F FD 43         mov [d], b
1045   0A21 F9            leave
1046   0A22 09            ret
1047   0A23             
1048   0A23             printf:
1049   0A23 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1050   0A26             ;; char *p, *format_p; 
1051   0A26 52 02 00      sub sp, 2 ; p
1052   0A29 52 02 00      sub sp, 2 ; format_p
1053   0A2C             ;; format_p = format; 
1054   0A2C FA FD FF      lea d, [bp + -3] ; $format_p
1055   0A2F DA            push d
1056   0A30 FA 05 00      lea d, [bp + 5] ; $format
1057   0A33 2A            mov b, [d]
1058   0A34 E7            pop d
1059   0A35 FD 43         mov [d], b
1060   0A37             ;; p = &format + 2; 
1061   0A37 FA FF FF      lea d, [bp + -1] ; $p
1062   0A3A DA            push d
1063   0A3B FA 05 00      lea d, [bp + 5] ; $format
1064   0A3E 2D            mov b, d
1065   0A3F             ; START TERMS
1066   0A3F D7            push a
1067   0A40 11            mov a, b
1068   0A41 26 02 00      mov b, $2
1069   0A44 56            add b, a
1070   0A45 E4            pop a
1071   0A46             ; END TERMS
1072   0A46 E7            pop d
1073   0A47 FD 43         mov [d], b
1074   0A49             ;; for(;;){ 
1075   0A49             _for13_init:
1076   0A49             _for13_cond:
1077   0A49             _for13_block:
1078   0A49             ;; if(!*format_p) break; 
1079   0A49             _if14_cond:
1080   0A49 FA FD FF      lea d, [bp + -3] ; $format_p
1081   0A4C 2A            mov b, [d]
1082   0A4D 74            mov d, b
1083   0A4E 32            mov bl, [d]
1084   0A4F A7 00         mov bh, 0
1085   0A51 C0 00 00      cmp b, 0
1086   0A54 FD 71         seq ; !
1087   0A56 C0 00 00      cmp b, 0
1088   0A59 C6 62 0A      je _if14_else
1089   0A5C             _if14_true:
1090   0A5C             ;; break; 
1091   0A5C 0A 89 0C      jmp _for13_exit ; for break
1092   0A5F 0A 86 0C      jmp _if14_exit
1093   0A62             _if14_else:
1094   0A62             ;; if(*format_p == '%'){ 
1095   0A62             _if15_cond:
1096   0A62 FA FD FF      lea d, [bp + -3] ; $format_p
1097   0A65 2A            mov b, [d]
1098   0A66 74            mov d, b
1099   0A67 32            mov bl, [d]
1100   0A68 A7 00         mov bh, 0
1101   0A6A             ; START RELATIONAL
1102   0A6A D7            push a
1103   0A6B 11            mov a, b
1104   0A6C 26 25 00      mov b, $25
1105   0A6F B0            cmp a, b
1106   0A70 FD 71         seq ; ==
1107   0A72 E4            pop a
1108   0A73             ; END RELATIONAL
1109   0A73 C0 00 00      cmp b, 0
1110   0A76 C6 6A 0C      je _if15_else
1111   0A79             _if15_true:
1112   0A79             ;; format_p++; 
1113   0A79 FA FD FF      lea d, [bp + -3] ; $format_p
1114   0A7C 2A            mov b, [d]
1115   0A7D FD 77         inc b
1116   0A7F FA FD FF      lea d, [bp + -3] ; $format_p
1117   0A82 FD 43         mov [d], b
1118   0A84 FD 7D         dec b
1119   0A86             ;; switch(*format_p){ 
1120   0A86             _switch16_expr:
1121   0A86 FA FD FF      lea d, [bp + -3] ; $format_p
1122   0A89 2A            mov b, [d]
1123   0A8A 74            mov d, b
1124   0A8B 32            mov bl, [d]
1125   0A8C A7 00         mov bh, 0
1126   0A8E             _switch16_comparisons:
1127   0A8E C1 6C         cmp bl, $6c
1128   0A90 C6 BC 0A      je _switch16_case0
1129   0A93 C1 4C         cmp bl, $4c
1130   0A95 C6 BC 0A      je _switch16_case1
1131   0A98 C1 64         cmp bl, $64
1132   0A9A C6 AA 0B      je _switch16_case2
1133   0A9D C1 69         cmp bl, $69
1134   0A9F C6 AA 0B      je _switch16_case3
1135   0AA2 C1 75         cmp bl, $75
1136   0AA4 C6 CE 0B      je _switch16_case4
1137   0AA7 C1 78         cmp bl, $78
1138   0AA9 C6 F2 0B      je _switch16_case5
1139   0AAC C1 63         cmp bl, $63
1140   0AAE C6 10 0C      je _switch16_case6
1141   0AB1 C1 73         cmp bl, $73
1142   0AB3 C6 2F 0C      je _switch16_case7
1143   0AB6 0A 4E 0C      jmp _switch16_default
1144   0AB9 0A 5A 0C      jmp _switch16_exit
1145   0ABC             _switch16_case0:
1146   0ABC             _switch16_case1:
1147   0ABC             ;; format_p++; 
1148   0ABC FA FD FF      lea d, [bp + -3] ; $format_p
1149   0ABF 2A            mov b, [d]
1150   0AC0 FD 77         inc b
1151   0AC2 FA FD FF      lea d, [bp + -3] ; $format_p
1152   0AC5 FD 43         mov [d], b
1153   0AC7 FD 7D         dec b
1154   0AC9             ;; if(*format_p == 'd' || *format_p == 'i') 
1155   0AC9             _if17_cond:
1156   0AC9 FA FD FF      lea d, [bp + -3] ; $format_p
1157   0ACC 2A            mov b, [d]
1158   0ACD 74            mov d, b
1159   0ACE 32            mov bl, [d]
1160   0ACF A7 00         mov bh, 0
1161   0AD1             ; START RELATIONAL
1162   0AD1 D7            push a
1163   0AD2 11            mov a, b
1164   0AD3 26 64 00      mov b, $64
1165   0AD6 B0            cmp a, b
1166   0AD7 FD 71         seq ; ==
1167   0AD9 E4            pop a
1168   0ADA             ; END RELATIONAL
1169   0ADA             ; START LOGICAL OR
1170   0ADA D7            push a
1171   0ADB 11            mov a, b
1172   0ADC FA FD FF      lea d, [bp + -3] ; $format_p
1173   0ADF 2A            mov b, [d]
1174   0AE0 74            mov d, b
1175   0AE1 32            mov bl, [d]
1176   0AE2 A7 00         mov bh, 0
1177   0AE4             ; START RELATIONAL
1178   0AE4 D7            push a
1179   0AE5 11            mov a, b
1180   0AE6 26 69 00      mov b, $69
1181   0AE9 B0            cmp a, b
1182   0AEA FD 71         seq ; ==
1183   0AEC E4            pop a
1184   0AED             ; END RELATIONAL
1185   0AED FD A8         sor a, b ; ||
1186   0AEF E4            pop a
1187   0AF0             ; END LOGICAL OR
1188   0AF0 C0 00 00      cmp b, 0
1189   0AF3 C6 18 0B      je _if17_else
1190   0AF6             _if17_true:
1191   0AF6             ;; print_signed_long(*(long *)p); 
1192   0AF6 FA FF FF      lea d, [bp + -1] ; $p
1193   0AF9 2A            mov b, [d]
1194   0AFA AB            snex b
1195   0AFB FD 39         mov c, b
1196   0AFD 74            mov d, b
1197   0AFE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1198   0B01 FD 39         mov c, b ; And place it into C
1199   0B03 2A            mov b, [d] ; Lower Word in B
1200   0B04 FD 79         mov g, b
1201   0B06 28            mov b, c
1202   0B07 FD AB         swp b
1203   0B09 D8            push b
1204   0B0A FD 27         mov b, g
1205   0B0C FD AB         swp b
1206   0B0E D8            push b
1207   0B0F 07 6F 11      call print_signed_long
1208   0B12 51 04 00      add sp, 4
1209   0B15 0A 95 0B      jmp _if17_exit
1210   0B18             _if17_else:
1211   0B18             ;; if(*format_p == 'u') 
1212   0B18             _if18_cond:
1213   0B18 FA FD FF      lea d, [bp + -3] ; $format_p
1214   0B1B 2A            mov b, [d]
1215   0B1C 74            mov d, b
1216   0B1D 32            mov bl, [d]
1217   0B1E A7 00         mov bh, 0
1218   0B20             ; START RELATIONAL
1219   0B20 D7            push a
1220   0B21 11            mov a, b
1221   0B22 26 75 00      mov b, $75
1222   0B25 B0            cmp a, b
1223   0B26 FD 71         seq ; ==
1224   0B28 E4            pop a
1225   0B29             ; END RELATIONAL
1226   0B29 C0 00 00      cmp b, 0
1227   0B2C C6 53 0B      je _if18_else
1228   0B2F             _if18_true:
1229   0B2F             ;; print_unsigned_long(*(unsigned long *)p); 
1230   0B2F FA FF FF      lea d, [bp + -1] ; $p
1231   0B32 2A            mov b, [d]
1232   0B33 A7 00         mov bh, 0
1233   0B35 38 00 00      mov c, 0
1234   0B38 74            mov d, b
1235   0B39 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1236   0B3C FD 39         mov c, b ; And place it into C
1237   0B3E 2A            mov b, [d] ; Lower Word in B
1238   0B3F FD 79         mov g, b
1239   0B41 28            mov b, c
1240   0B42 FD AB         swp b
1241   0B44 D8            push b
1242   0B45 FD 27         mov b, g
1243   0B47 FD AB         swp b
1244   0B49 D8            push b
1245   0B4A 07 AF 14      call print_unsigned_long
1246   0B4D 51 04 00      add sp, 4
1247   0B50 0A 95 0B      jmp _if18_exit
1248   0B53             _if18_else:
1249   0B53             ;; if(*format_p == 'x') 
1250   0B53             _if19_cond:
1251   0B53 FA FD FF      lea d, [bp + -3] ; $format_p
1252   0B56 2A            mov b, [d]
1253   0B57 74            mov d, b
1254   0B58 32            mov bl, [d]
1255   0B59 A7 00         mov bh, 0
1256   0B5B             ; START RELATIONAL
1257   0B5B D7            push a
1258   0B5C 11            mov a, b
1259   0B5D 26 78 00      mov b, $78
1260   0B60 B0            cmp a, b
1261   0B61 FD 71         seq ; ==
1262   0B63 E4            pop a
1263   0B64             ; END RELATIONAL
1264   0B64 C0 00 00      cmp b, 0
1265   0B67 C6 89 0B      je _if19_else
1266   0B6A             _if19_true:
1267   0B6A             ;; printx32(*(long int *)p); 
1268   0B6A FA FF FF      lea d, [bp + -1] ; $p
1269   0B6D 2A            mov b, [d]
1270   0B6E 74            mov d, b
1271   0B6F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1272   0B72 FD 39         mov c, b ; And place it into C
1273   0B74 2A            mov b, [d] ; Lower Word in B
1274   0B75 FD 79         mov g, b
1275   0B77 28            mov b, c
1276   0B78 FD AB         swp b
1277   0B7A D8            push b
1278   0B7B FD 27         mov b, g
1279   0B7D FD AB         swp b
1280   0B7F D8            push b
1281   0B80 07 E4 0E      call printx32
1282   0B83 51 04 00      add sp, 4
1283   0B86 0A 95 0B      jmp _if19_exit
1284   0B89             _if19_else:
1285   0B89             ;; err("Unexpected format in printf."); 
1286   0B89 26 10 2C      mov b, _s0 ; "Unexpected format in printf."
1287   0B8C FD AB         swp b
1288   0B8E D8            push b
1289   0B8F 07 D2 0E      call err
1290   0B92 51 02 00      add sp, 2
1291   0B95             _if19_exit:
1292   0B95             _if18_exit:
1293   0B95             _if17_exit:
1294   0B95             ;; p = p + 4; 
1295   0B95 FA FF FF      lea d, [bp + -1] ; $p
1296   0B98 DA            push d
1297   0B99 FA FF FF      lea d, [bp + -1] ; $p
1298   0B9C 2A            mov b, [d]
1299   0B9D             ; START TERMS
1300   0B9D D7            push a
1301   0B9E 11            mov a, b
1302   0B9F 26 04 00      mov b, $4
1303   0BA2 56            add b, a
1304   0BA3 E4            pop a
1305   0BA4             ; END TERMS
1306   0BA4 E7            pop d
1307   0BA5 FD 43         mov [d], b
1308   0BA7             ;; break; 
1309   0BA7 0A 5A 0C      jmp _switch16_exit ; case break
1310   0BAA             _switch16_case2:
1311   0BAA             _switch16_case3:
1312   0BAA             ;; print_signed(*(int*)p); 
1313   0BAA FA FF FF      lea d, [bp + -1] ; $p
1314   0BAD 2A            mov b, [d]
1315   0BAE 74            mov d, b
1316   0BAF 2A            mov b, [d]
1317   0BB0 FD AB         swp b
1318   0BB2 D8            push b
1319   0BB3 07 78 10      call print_signed
1320   0BB6 51 02 00      add sp, 2
1321   0BB9             ;; p = p + 2; 
1322   0BB9 FA FF FF      lea d, [bp + -1] ; $p
1323   0BBC DA            push d
1324   0BBD FA FF FF      lea d, [bp + -1] ; $p
1325   0BC0 2A            mov b, [d]
1326   0BC1             ; START TERMS
1327   0BC1 D7            push a
1328   0BC2 11            mov a, b
1329   0BC3 26 02 00      mov b, $2
1330   0BC6 56            add b, a
1331   0BC7 E4            pop a
1332   0BC8             ; END TERMS
1333   0BC8 E7            pop d
1334   0BC9 FD 43         mov [d], b
1335   0BCB             ;; break; 
1336   0BCB 0A 5A 0C      jmp _switch16_exit ; case break
1337   0BCE             _switch16_case4:
1338   0BCE             ;; print_unsigned(*(unsigned int*)p); 
1339   0BCE FA FF FF      lea d, [bp + -1] ; $p
1340   0BD1 2A            mov b, [d]
1341   0BD2 74            mov d, b
1342   0BD3 2A            mov b, [d]
1343   0BD4 FD AB         swp b
1344   0BD6 D8            push b
1345   0BD7 07 AA 16      call print_unsigned
1346   0BDA 51 02 00      add sp, 2
1347   0BDD             ;; p = p + 2; 
1348   0BDD FA FF FF      lea d, [bp + -1] ; $p
1349   0BE0 DA            push d
1350   0BE1 FA FF FF      lea d, [bp + -1] ; $p
1351   0BE4 2A            mov b, [d]
1352   0BE5             ; START TERMS
1353   0BE5 D7            push a
1354   0BE6 11            mov a, b
1355   0BE7 26 02 00      mov b, $2
1356   0BEA 56            add b, a
1357   0BEB E4            pop a
1358   0BEC             ; END TERMS
1359   0BEC E7            pop d
1360   0BED FD 43         mov [d], b
1361   0BEF             ;; break; 
1362   0BEF 0A 5A 0C      jmp _switch16_exit ; case break
1363   0BF2             _switch16_case5:
1364   0BF2             
1365   0BF2             ; --- BEGIN INLINE ASM BLOCK
1366   0BF2 FA FF FF      lea d, [bp + -1] ; $p
1367   0BF5 FD 2A         mov d, [d]
1368   0BF7 2A            mov b, [d]
1369   0BF8 07 B0 1A      call print_u16x
1370   0BFB             ; --- END INLINE ASM BLOCK
1371   0BFB             
1372   0BFB             ;; p = p + 2; 
1373   0BFB FA FF FF      lea d, [bp + -1] ; $p
1374   0BFE DA            push d
1375   0BFF FA FF FF      lea d, [bp + -1] ; $p
1376   0C02 2A            mov b, [d]
1377   0C03             ; START TERMS
1378   0C03 D7            push a
1379   0C04 11            mov a, b
1380   0C05 26 02 00      mov b, $2
1381   0C08 56            add b, a
1382   0C09 E4            pop a
1383   0C0A             ; END TERMS
1384   0C0A E7            pop d
1385   0C0B FD 43         mov [d], b
1386   0C0D             ;; break; 
1387   0C0D 0A 5A 0C      jmp _switch16_exit ; case break
1388   0C10             _switch16_case6:
1389   0C10             
1390   0C10             ; --- BEGIN INLINE ASM BLOCK
1391   0C10 FA FF FF      lea d, [bp + -1] ; $p
1392   0C13 FD 2A         mov d, [d]
1393   0C15 1E            mov al, [d]
1394   0C16 23            mov ah, al
1395   0C17 07 0E 19      call _putchar
1396   0C1A             ; --- END INLINE ASM BLOCK
1397   0C1A             
1398   0C1A             ;; p = p + 2; 
1399   0C1A FA FF FF      lea d, [bp + -1] ; $p
1400   0C1D DA            push d
1401   0C1E FA FF FF      lea d, [bp + -1] ; $p
1402   0C21 2A            mov b, [d]
1403   0C22             ; START TERMS
1404   0C22 D7            push a
1405   0C23 11            mov a, b
1406   0C24 26 02 00      mov b, $2
1407   0C27 56            add b, a
1408   0C28 E4            pop a
1409   0C29             ; END TERMS
1410   0C29 E7            pop d
1411   0C2A FD 43         mov [d], b
1412   0C2C             ;; break; 
1413   0C2C 0A 5A 0C      jmp _switch16_exit ; case break
1414   0C2F             _switch16_case7:
1415   0C2F             
1416   0C2F             ; --- BEGIN INLINE ASM BLOCK
1417   0C2F FA FF FF      lea d, [bp + -1] ; $p
1418   0C32 FD 2A         mov d, [d]
1419   0C34 FD 2A         mov d, [d]
1420   0C36 07 58 1A      call _puts
1421   0C39             ; --- END INLINE ASM BLOCK
1422   0C39             
1423   0C39             ;; p = p + 2; 
1424   0C39 FA FF FF      lea d, [bp + -1] ; $p
1425   0C3C DA            push d
1426   0C3D FA FF FF      lea d, [bp + -1] ; $p
1427   0C40 2A            mov b, [d]
1428   0C41             ; START TERMS
1429   0C41 D7            push a
1430   0C42 11            mov a, b
1431   0C43 26 02 00      mov b, $2
1432   0C46 56            add b, a
1433   0C47 E4            pop a
1434   0C48             ; END TERMS
1435   0C48 E7            pop d
1436   0C49 FD 43         mov [d], b
1437   0C4B             ;; break; 
1438   0C4B 0A 5A 0C      jmp _switch16_exit ; case break
1439   0C4E             _switch16_default:
1440   0C4E             ;; print("Error: Unknown argument type.\n"); 
1441   0C4E 26 2D 2C      mov b, _s1 ; "Error: Unknown argument type.\n"
1442   0C51 FD AB         swp b
1443   0C53 D8            push b
1444   0C54 07 C5 17      call print
1445   0C57 51 02 00      add sp, 2
1446   0C5A             _switch16_exit:
1447   0C5A             ;; format_p++; 
1448   0C5A FA FD FF      lea d, [bp + -3] ; $format_p
1449   0C5D 2A            mov b, [d]
1450   0C5E FD 77         inc b
1451   0C60 FA FD FF      lea d, [bp + -3] ; $format_p
1452   0C63 FD 43         mov [d], b
1453   0C65 FD 7D         dec b
1454   0C67 0A 86 0C      jmp _if15_exit
1455   0C6A             _if15_else:
1456   0C6A             ;; putchar(*format_p); 
1457   0C6A FA FD FF      lea d, [bp + -3] ; $format_p
1458   0C6D 2A            mov b, [d]
1459   0C6E 74            mov d, b
1460   0C6F 32            mov bl, [d]
1461   0C70 A7 00         mov bh, 0
1462   0C72 DD            push bl
1463   0C73 07 7D 17      call putchar
1464   0C76 51 01 00      add sp, 1
1465   0C79             ;; format_p++; 
1466   0C79 FA FD FF      lea d, [bp + -3] ; $format_p
1467   0C7C 2A            mov b, [d]
1468   0C7D FD 77         inc b
1469   0C7F FA FD FF      lea d, [bp + -3] ; $format_p
1470   0C82 FD 43         mov [d], b
1471   0C84 FD 7D         dec b
1472   0C86             _if15_exit:
1473   0C86             _if14_exit:
1474   0C86             _for13_update:
1475   0C86 0A 49 0A      jmp _for13_cond
1476   0C89             _for13_exit:
1477   0C89 F9            leave
1478   0C8A 09            ret
1479   0C8B             
1480   0C8B             scanf:
1481   0C8B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1482   0C8E             ;; char *p, *format_p; 
1483   0C8E 52 02 00      sub sp, 2 ; p
1484   0C91 52 02 00      sub sp, 2 ; format_p
1485   0C94             ;; char c; 
1486   0C94 52 01 00      sub sp, 1 ; c
1487   0C97             ;; int i; 
1488   0C97 52 02 00      sub sp, 2 ; i
1489   0C9A             ;; char input_string[  512                    ]; 
1490   0C9A 52 00 02      sub sp, 512 ; input_string
1491   0C9D             ;; format_p = format; 
1492   0C9D FA FD FF      lea d, [bp + -3] ; $format_p
1493   0CA0 DA            push d
1494   0CA1 FA 05 00      lea d, [bp + 5] ; $format
1495   0CA4 2A            mov b, [d]
1496   0CA5 E7            pop d
1497   0CA6 FD 43         mov [d], b
1498   0CA8             ;; p = &format + 2; 
1499   0CA8 FA FF FF      lea d, [bp + -1] ; $p
1500   0CAB DA            push d
1501   0CAC FA 05 00      lea d, [bp + 5] ; $format
1502   0CAF 2D            mov b, d
1503   0CB0             ; START TERMS
1504   0CB0 D7            push a
1505   0CB1 11            mov a, b
1506   0CB2 26 02 00      mov b, $2
1507   0CB5 56            add b, a
1508   0CB6 E4            pop a
1509   0CB7             ; END TERMS
1510   0CB7 E7            pop d
1511   0CB8 FD 43         mov [d], b
1512   0CBA             ;; for(;;){ 
1513   0CBA             _for20_init:
1514   0CBA             _for20_cond:
1515   0CBA             _for20_block:
1516   0CBA             ;; if(!*format_p) break; 
1517   0CBA             _if21_cond:
1518   0CBA FA FD FF      lea d, [bp + -3] ; $format_p
1519   0CBD 2A            mov b, [d]
1520   0CBE 74            mov d, b
1521   0CBF 32            mov bl, [d]
1522   0CC0 A7 00         mov bh, 0
1523   0CC2 C0 00 00      cmp b, 0
1524   0CC5 FD 71         seq ; !
1525   0CC7 C0 00 00      cmp b, 0
1526   0CCA C6 D3 0C      je _if21_else
1527   0CCD             _if21_true:
1528   0CCD             ;; break; 
1529   0CCD 0A D0 0E      jmp _for20_exit ; for break
1530   0CD0 0A CD 0E      jmp _if21_exit
1531   0CD3             _if21_else:
1532   0CD3             ;; if(*format_p == '%'){ 
1533   0CD3             _if22_cond:
1534   0CD3 FA FD FF      lea d, [bp + -3] ; $format_p
1535   0CD6 2A            mov b, [d]
1536   0CD7 74            mov d, b
1537   0CD8 32            mov bl, [d]
1538   0CD9 A7 00         mov bh, 0
1539   0CDB             ; START RELATIONAL
1540   0CDB D7            push a
1541   0CDC 11            mov a, b
1542   0CDD 26 25 00      mov b, $25
1543   0CE0 B0            cmp a, b
1544   0CE1 FD 71         seq ; ==
1545   0CE3 E4            pop a
1546   0CE4             ; END RELATIONAL
1547   0CE4 C0 00 00      cmp b, 0
1548   0CE7 C6 B1 0E      je _if22_else
1549   0CEA             _if22_true:
1550   0CEA             ;; format_p++; 
1551   0CEA FA FD FF      lea d, [bp + -3] ; $format_p
1552   0CED 2A            mov b, [d]
1553   0CEE FD 77         inc b
1554   0CF0 FA FD FF      lea d, [bp + -3] ; $format_p
1555   0CF3 FD 43         mov [d], b
1556   0CF5 FD 7D         dec b
1557   0CF7             ;; switch(*format_p){ 
1558   0CF7             _switch23_expr:
1559   0CF7 FA FD FF      lea d, [bp + -3] ; $format_p
1560   0CFA 2A            mov b, [d]
1561   0CFB 74            mov d, b
1562   0CFC 32            mov bl, [d]
1563   0CFD A7 00         mov bh, 0
1564   0CFF             _switch23_comparisons:
1565   0CFF C1 6C         cmp bl, $6c
1566   0D01 C6 2D 0D      je _switch23_case0
1567   0D04 C1 4C         cmp bl, $4c
1568   0D06 C6 2D 0D      je _switch23_case1
1569   0D09 C1 64         cmp bl, $64
1570   0D0B C6 BF 0D      je _switch23_case2
1571   0D0E C1 69         cmp bl, $69
1572   0D10 C6 BF 0D      je _switch23_case3
1573   0D13 C1 75         cmp bl, $75
1574   0D15 C6 EC 0D      je _switch23_case4
1575   0D18 C1 78         cmp bl, $78
1576   0D1A C6 19 0E      je _switch23_case5
1577   0D1D C1 63         cmp bl, $63
1578   0D1F C6 2E 0E      je _switch23_case6
1579   0D22 C1 73         cmp bl, $73
1580   0D24 C6 5D 0E      je _switch23_case7
1581   0D27 0A 95 0E      jmp _switch23_default
1582   0D2A 0A A1 0E      jmp _switch23_exit
1583   0D2D             _switch23_case0:
1584   0D2D             _switch23_case1:
1585   0D2D             ;; format_p++; 
1586   0D2D FA FD FF      lea d, [bp + -3] ; $format_p
1587   0D30 2A            mov b, [d]
1588   0D31 FD 77         inc b
1589   0D33 FA FD FF      lea d, [bp + -3] ; $format_p
1590   0D36 FD 43         mov [d], b
1591   0D38 FD 7D         dec b
1592   0D3A             ;; if(*format_p == 'd' || *format_p == 'i'); 
1593   0D3A             _if24_cond:
1594   0D3A FA FD FF      lea d, [bp + -3] ; $format_p
1595   0D3D 2A            mov b, [d]
1596   0D3E 74            mov d, b
1597   0D3F 32            mov bl, [d]
1598   0D40 A7 00         mov bh, 0
1599   0D42             ; START RELATIONAL
1600   0D42 D7            push a
1601   0D43 11            mov a, b
1602   0D44 26 64 00      mov b, $64
1603   0D47 B0            cmp a, b
1604   0D48 FD 71         seq ; ==
1605   0D4A E4            pop a
1606   0D4B             ; END RELATIONAL
1607   0D4B             ; START LOGICAL OR
1608   0D4B D7            push a
1609   0D4C 11            mov a, b
1610   0D4D FA FD FF      lea d, [bp + -3] ; $format_p
1611   0D50 2A            mov b, [d]
1612   0D51 74            mov d, b
1613   0D52 32            mov bl, [d]
1614   0D53 A7 00         mov bh, 0
1615   0D55             ; START RELATIONAL
1616   0D55 D7            push a
1617   0D56 11            mov a, b
1618   0D57 26 69 00      mov b, $69
1619   0D5A B0            cmp a, b
1620   0D5B FD 71         seq ; ==
1621   0D5D E4            pop a
1622   0D5E             ; END RELATIONAL
1623   0D5E FD A8         sor a, b ; ||
1624   0D60 E4            pop a
1625   0D61             ; END LOGICAL OR
1626   0D61 C0 00 00      cmp b, 0
1627   0D64 C6 6A 0D      je _if24_else
1628   0D67             _if24_true:
1629   0D67             ;; ; 
1630   0D67 0A AA 0D      jmp _if24_exit
1631   0D6A             _if24_else:
1632   0D6A             ;; if(*format_p == 'u'); 
1633   0D6A             _if25_cond:
1634   0D6A FA FD FF      lea d, [bp + -3] ; $format_p
1635   0D6D 2A            mov b, [d]
1636   0D6E 74            mov d, b
1637   0D6F 32            mov bl, [d]
1638   0D70 A7 00         mov bh, 0
1639   0D72             ; START RELATIONAL
1640   0D72 D7            push a
1641   0D73 11            mov a, b
1642   0D74 26 75 00      mov b, $75
1643   0D77 B0            cmp a, b
1644   0D78 FD 71         seq ; ==
1645   0D7A E4            pop a
1646   0D7B             ; END RELATIONAL
1647   0D7B C0 00 00      cmp b, 0
1648   0D7E C6 84 0D      je _if25_else
1649   0D81             _if25_true:
1650   0D81             ;; ; 
1651   0D81 0A AA 0D      jmp _if25_exit
1652   0D84             _if25_else:
1653   0D84             ;; if(*format_p == 'x'); 
1654   0D84             _if26_cond:
1655   0D84 FA FD FF      lea d, [bp + -3] ; $format_p
1656   0D87 2A            mov b, [d]
1657   0D88 74            mov d, b
1658   0D89 32            mov bl, [d]
1659   0D8A A7 00         mov bh, 0
1660   0D8C             ; START RELATIONAL
1661   0D8C D7            push a
1662   0D8D 11            mov a, b
1663   0D8E 26 78 00      mov b, $78
1664   0D91 B0            cmp a, b
1665   0D92 FD 71         seq ; ==
1666   0D94 E4            pop a
1667   0D95             ; END RELATIONAL
1668   0D95 C0 00 00      cmp b, 0
1669   0D98 C6 9E 0D      je _if26_else
1670   0D9B             _if26_true:
1671   0D9B             ;; ; 
1672   0D9B 0A AA 0D      jmp _if26_exit
1673   0D9E             _if26_else:
1674   0D9E             ;; err("Unexpected format in printf."); 
1675   0D9E 26 10 2C      mov b, _s0 ; "Unexpected format in printf."
1676   0DA1 FD AB         swp b
1677   0DA3 D8            push b
1678   0DA4 07 D2 0E      call err
1679   0DA7 51 02 00      add sp, 2
1680   0DAA             _if26_exit:
1681   0DAA             _if25_exit:
1682   0DAA             _if24_exit:
1683   0DAA             ;; p = p + 4; 
1684   0DAA FA FF FF      lea d, [bp + -1] ; $p
1685   0DAD DA            push d
1686   0DAE FA FF FF      lea d, [bp + -1] ; $p
1687   0DB1 2A            mov b, [d]
1688   0DB2             ; START TERMS
1689   0DB2 D7            push a
1690   0DB3 11            mov a, b
1691   0DB4 26 04 00      mov b, $4
1692   0DB7 56            add b, a
1693   0DB8 E4            pop a
1694   0DB9             ; END TERMS
1695   0DB9 E7            pop d
1696   0DBA FD 43         mov [d], b
1697   0DBC             ;; break; 
1698   0DBC 0A A1 0E      jmp _switch23_exit ; case break
1699   0DBF             _switch23_case2:
1700   0DBF             _switch23_case3:
1701   0DBF             ;; i = scann(); 
1702   0DBF FA FA FF      lea d, [bp + -6] ; $i
1703   0DC2 DA            push d
1704   0DC3 07 A0 17      call scann
1705   0DC6 E7            pop d
1706   0DC7 FD 43         mov [d], b
1707   0DC9             ;; **(int **)p = i; 
1708   0DC9 FA FF FF      lea d, [bp + -1] ; $p
1709   0DCC 2A            mov b, [d]
1710   0DCD 74            mov d, b
1711   0DCE 2A            mov b, [d]
1712   0DCF D8            push b
1713   0DD0 FA FA FF      lea d, [bp + -6] ; $i
1714   0DD3 2A            mov b, [d]
1715   0DD4 E7            pop d
1716   0DD5 FD 43         mov [d], b
1717   0DD7             ;; p = p + 2; 
1718   0DD7 FA FF FF      lea d, [bp + -1] ; $p
1719   0DDA DA            push d
1720   0DDB FA FF FF      lea d, [bp + -1] ; $p
1721   0DDE 2A            mov b, [d]
1722   0DDF             ; START TERMS
1723   0DDF D7            push a
1724   0DE0 11            mov a, b
1725   0DE1 26 02 00      mov b, $2
1726   0DE4 56            add b, a
1727   0DE5 E4            pop a
1728   0DE6             ; END TERMS
1729   0DE6 E7            pop d
1730   0DE7 FD 43         mov [d], b
1731   0DE9             ;; break; 
1732   0DE9 0A A1 0E      jmp _switch23_exit ; case break
1733   0DEC             _switch23_case4:
1734   0DEC             ;; i = scann(); 
1735   0DEC FA FA FF      lea d, [bp + -6] ; $i
1736   0DEF DA            push d
1737   0DF0 07 A0 17      call scann
1738   0DF3 E7            pop d
1739   0DF4 FD 43         mov [d], b
1740   0DF6             ;; **(int **)p = i; 
1741   0DF6 FA FF FF      lea d, [bp + -1] ; $p
1742   0DF9 2A            mov b, [d]
1743   0DFA 74            mov d, b
1744   0DFB 2A            mov b, [d]
1745   0DFC D8            push b
1746   0DFD FA FA FF      lea d, [bp + -6] ; $i
1747   0E00 2A            mov b, [d]
1748   0E01 E7            pop d
1749   0E02 FD 43         mov [d], b
1750   0E04             ;; p = p + 2; 
1751   0E04 FA FF FF      lea d, [bp + -1] ; $p
1752   0E07 DA            push d
1753   0E08 FA FF FF      lea d, [bp + -1] ; $p
1754   0E0B 2A            mov b, [d]
1755   0E0C             ; START TERMS
1756   0E0C D7            push a
1757   0E0D 11            mov a, b
1758   0E0E 26 02 00      mov b, $2
1759   0E11 56            add b, a
1760   0E12 E4            pop a
1761   0E13             ; END TERMS
1762   0E13 E7            pop d
1763   0E14 FD 43         mov [d], b
1764   0E16             ;; break; 
1765   0E16 0A A1 0E      jmp _switch23_exit ; case break
1766   0E19             _switch23_case5:
1767   0E19             ;; p = p + 2; 
1768   0E19 FA FF FF      lea d, [bp + -1] ; $p
1769   0E1C DA            push d
1770   0E1D FA FF FF      lea d, [bp + -1] ; $p
1771   0E20 2A            mov b, [d]
1772   0E21             ; START TERMS
1773   0E21 D7            push a
1774   0E22 11            mov a, b
1775   0E23 26 02 00      mov b, $2
1776   0E26 56            add b, a
1777   0E27 E4            pop a
1778   0E28             ; END TERMS
1779   0E28 E7            pop d
1780   0E29 FD 43         mov [d], b
1781   0E2B             ;; break; 
1782   0E2B 0A A1 0E      jmp _switch23_exit ; case break
1783   0E2E             _switch23_case6:
1784   0E2E             ;; c = getchar(); 
1785   0E2E FA FC FF      lea d, [bp + -4] ; $c
1786   0E31 DA            push d
1787   0E32 07 8A 17      call getchar
1788   0E35 E7            pop d
1789   0E36 FD 3E         mov [d], bl
1790   0E38             ;; **(char **)p = c; 
1791   0E38 FA FF FF      lea d, [bp + -1] ; $p
1792   0E3B 2A            mov b, [d]
1793   0E3C 74            mov d, b
1794   0E3D 2A            mov b, [d]
1795   0E3E D8            push b
1796   0E3F FA FC FF      lea d, [bp + -4] ; $c
1797   0E42 32            mov bl, [d]
1798   0E43 A7 00         mov bh, 0
1799   0E45 E7            pop d
1800   0E46 FD 43         mov [d], b
1801   0E48             ;; p = p + 2; 
1802   0E48 FA FF FF      lea d, [bp + -1] ; $p
1803   0E4B DA            push d
1804   0E4C FA FF FF      lea d, [bp + -1] ; $p
1805   0E4F 2A            mov b, [d]
1806   0E50             ; START TERMS
1807   0E50 D7            push a
1808   0E51 11            mov a, b
1809   0E52 26 02 00      mov b, $2
1810   0E55 56            add b, a
1811   0E56 E4            pop a
1812   0E57             ; END TERMS
1813   0E57 E7            pop d
1814   0E58 FD 43         mov [d], b
1815   0E5A             ;; break; 
1816   0E5A 0A A1 0E      jmp _switch23_exit ; case break
1817   0E5D             _switch23_case7:
1818   0E5D             ;; gets(input_string); 
1819   0E5D FA FA FD      lea d, [bp + -518] ; $input_string
1820   0E60 2D            mov b, d
1821   0E61 FD AB         swp b
1822   0E63 D8            push b
1823   0E64 07 5E 10      call gets
1824   0E67 51 02 00      add sp, 2
1825   0E6A             ;; strcpy(*(char **)p, input_string); 
1826   0E6A FA FA FD      lea d, [bp + -518] ; $input_string
1827   0E6D 2D            mov b, d
1828   0E6E FD AB         swp b
1829   0E70 D8            push b
1830   0E71 FA FF FF      lea d, [bp + -1] ; $p
1831   0E74 2A            mov b, [d]
1832   0E75 74            mov d, b
1833   0E76 2A            mov b, [d]
1834   0E77 FD AB         swp b
1835   0E79 D8            push b
1836   0E7A 07 7D 06      call strcpy
1837   0E7D 51 04 00      add sp, 4
1838   0E80             ;; p = p + 2; 
1839   0E80 FA FF FF      lea d, [bp + -1] ; $p
1840   0E83 DA            push d
1841   0E84 FA FF FF      lea d, [bp + -1] ; $p
1842   0E87 2A            mov b, [d]
1843   0E88             ; START TERMS
1844   0E88 D7            push a
1845   0E89 11            mov a, b
1846   0E8A 26 02 00      mov b, $2
1847   0E8D 56            add b, a
1848   0E8E E4            pop a
1849   0E8F             ; END TERMS
1850   0E8F E7            pop d
1851   0E90 FD 43         mov [d], b
1852   0E92             ;; break; 
1853   0E92 0A A1 0E      jmp _switch23_exit ; case break
1854   0E95             _switch23_default:
1855   0E95             ;; print("Error: Unknown argument type.\n"); 
1856   0E95 26 2D 2C      mov b, _s1 ; "Error: Unknown argument type.\n"
1857   0E98 FD AB         swp b
1858   0E9A D8            push b
1859   0E9B 07 C5 17      call print
1860   0E9E 51 02 00      add sp, 2
1861   0EA1             _switch23_exit:
1862   0EA1             ;; format_p++; 
1863   0EA1 FA FD FF      lea d, [bp + -3] ; $format_p
1864   0EA4 2A            mov b, [d]
1865   0EA5 FD 77         inc b
1866   0EA7 FA FD FF      lea d, [bp + -3] ; $format_p
1867   0EAA FD 43         mov [d], b
1868   0EAC FD 7D         dec b
1869   0EAE 0A CD 0E      jmp _if22_exit
1870   0EB1             _if22_else:
1871   0EB1             ;; putchar(*format_p); 
1872   0EB1 FA FD FF      lea d, [bp + -3] ; $format_p
1873   0EB4 2A            mov b, [d]
1874   0EB5 74            mov d, b
1875   0EB6 32            mov bl, [d]
1876   0EB7 A7 00         mov bh, 0
1877   0EB9 DD            push bl
1878   0EBA 07 7D 17      call putchar
1879   0EBD 51 01 00      add sp, 1
1880   0EC0             ;; format_p++; 
1881   0EC0 FA FD FF      lea d, [bp + -3] ; $format_p
1882   0EC3 2A            mov b, [d]
1883   0EC4 FD 77         inc b
1884   0EC6 FA FD FF      lea d, [bp + -3] ; $format_p
1885   0EC9 FD 43         mov [d], b
1886   0ECB FD 7D         dec b
1887   0ECD             _if22_exit:
1888   0ECD             _if21_exit:
1889   0ECD             _for20_update:
1890   0ECD 0A BA 0C      jmp _for20_cond
1891   0ED0             _for20_exit:
1892   0ED0 F9            leave
1893   0ED1 09            ret
1894   0ED2             
1895   0ED2             err:
1896   0ED2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1897   0ED5             ;; print(e); 
1898   0ED5 FA 05 00      lea d, [bp + 5] ; $e
1899   0ED8 2A            mov b, [d]
1900   0ED9 FD AB         swp b
1901   0EDB D8            push b
1902   0EDC 07 C5 17      call print
1903   0EDF 51 02 00      add sp, 2
1904   0EE2 F9            leave
1905   0EE3 09            ret
1906   0EE4             
1907   0EE4             printx32:
1908   0EE4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1909   0EE7             
1910   0EE7             ; --- BEGIN INLINE ASM BLOCK
1911   0EE7 FA 05 00      lea d, [bp + 5] ; $hex
1912   0EEA 2B 02 00      mov b, [d+2]
1913   0EED 07 B0 1A      call print_u16x
1914   0EF0 2A            mov b, [d]
1915   0EF1 07 B0 1A      call print_u16x
1916   0EF4             ; --- END INLINE ASM BLOCK
1917   0EF4             
1918   0EF4 F9            leave
1919   0EF5 09            ret
1920   0EF6             
1921   0EF6             printx16:
1922   0EF6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1923   0EF9             
1924   0EF9             ; --- BEGIN INLINE ASM BLOCK
1925   0EF9 FA 05 00      lea d, [bp + 5] ; $hex
1926   0EFC 2A            mov b, [d]
1927   0EFD 07 B0 1A      call print_u16x
1928   0F00             ; --- END INLINE ASM BLOCK
1929   0F00             
1930   0F00 F9            leave
1931   0F01 09            ret
1932   0F02             
1933   0F02             printx8:
1934   0F02 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1935   0F05             
1936   0F05             ; --- BEGIN INLINE ASM BLOCK
1937   0F05 FA 05 00      lea d, [bp + 5] ; $hex
1938   0F08 32            mov bl, [d]
1939   0F09 07 F4 1A      call print_u8x
1940   0F0C             ; --- END INLINE ASM BLOCK
1941   0F0C             
1942   0F0C F9            leave
1943   0F0D 09            ret
1944   0F0E             
1945   0F0E             hex_str_to_int:
1946   0F0E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1947   0F11             ;; int value = 0; 
1948   0F11 52 02 00      sub sp, 2 ; value
1949   0F14             ; --- START LOCAL VAR INITIALIZATION
1950   0F14 FA FF FF      lea d, [bp + -1] ; $value
1951   0F17 DA            push d
1952   0F18 26 00 00      mov b, $0
1953   0F1B E7            pop d
1954   0F1C FD 43         mov [d], b
1955   0F1E             ; --- END LOCAL VAR INITIALIZATION
1956   0F1E             ;; int i; 
1957   0F1E 52 02 00      sub sp, 2 ; i
1958   0F21             ;; char hex_char; 
1959   0F21 52 01 00      sub sp, 1 ; hex_char
1960   0F24             ;; int len; 
1961   0F24 52 02 00      sub sp, 2 ; len
1962   0F27             ;; len = strlen(hex_string); 
1963   0F27 FA FA FF      lea d, [bp + -6] ; $len
1964   0F2A DA            push d
1965   0F2B FA 05 00      lea d, [bp + 5] ; $hex_string
1966   0F2E 2A            mov b, [d]
1967   0F2F FD AB         swp b
1968   0F31 D8            push b
1969   0F32 07 F7 07      call strlen
1970   0F35 51 02 00      add sp, 2
1971   0F38 E7            pop d
1972   0F39 FD 43         mov [d], b
1973   0F3B             ;; for (i = 0; i < len; i++) { 
1974   0F3B             _for27_init:
1975   0F3B FA FD FF      lea d, [bp + -3] ; $i
1976   0F3E DA            push d
1977   0F3F 26 00 00      mov b, $0
1978   0F42 E7            pop d
1979   0F43 FD 43         mov [d], b
1980   0F45             _for27_cond:
1981   0F45 FA FD FF      lea d, [bp + -3] ; $i
1982   0F48 2A            mov b, [d]
1983   0F49             ; START RELATIONAL
1984   0F49 D7            push a
1985   0F4A 11            mov a, b
1986   0F4B FA FA FF      lea d, [bp + -6] ; $len
1987   0F4E 2A            mov b, [d]
1988   0F4F B0            cmp a, b
1989   0F50 FD 73         slt ; < (signed)
1990   0F52 E4            pop a
1991   0F53             ; END RELATIONAL
1992   0F53 C0 00 00      cmp b, 0
1993   0F56 C6 58 10      je _for27_exit
1994   0F59             _for27_block:
1995   0F59             ;; hex_char = hex_string[i]; 
1996   0F59 FA FC FF      lea d, [bp + -4] ; $hex_char
1997   0F5C DA            push d
1998   0F5D FA 05 00      lea d, [bp + 5] ; $hex_string
1999   0F60 FD 2A         mov d, [d]
2000   0F62 D7            push a
2001   0F63 DA            push d
2002   0F64 FA FD FF      lea d, [bp + -3] ; $i
2003   0F67 2A            mov b, [d]
2004   0F68 E7            pop d
2005   0F69 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2006   0F6D E4            pop a
2007   0F6E 32            mov bl, [d]
2008   0F6F A7 00         mov bh, 0
2009   0F71 E7            pop d
2010   0F72 FD 3E         mov [d], bl
2011   0F74             ;; if (hex_char >= 'a' && hex_char <= 'f')  
2012   0F74             _if28_cond:
2013   0F74 FA FC FF      lea d, [bp + -4] ; $hex_char
2014   0F77 32            mov bl, [d]
2015   0F78 A7 00         mov bh, 0
2016   0F7A             ; START RELATIONAL
2017   0F7A D7            push a
2018   0F7B 11            mov a, b
2019   0F7C 26 61 00      mov b, $61
2020   0F7F B0            cmp a, b
2021   0F80 FD 80         sge ; >=
2022   0F82 E4            pop a
2023   0F83             ; END RELATIONAL
2024   0F83             ; START LOGICAL AND
2025   0F83 D7            push a
2026   0F84 11            mov a, b
2027   0F85 FA FC FF      lea d, [bp + -4] ; $hex_char
2028   0F88 32            mov bl, [d]
2029   0F89 A7 00         mov bh, 0
2030   0F8B             ; START RELATIONAL
2031   0F8B D7            push a
2032   0F8C 11            mov a, b
2033   0F8D 26 66 00      mov b, $66
2034   0F90 B0            cmp a, b
2035   0F91 FD 74         sle ; <= (signed)
2036   0F93 E4            pop a
2037   0F94             ; END RELATIONAL
2038   0F94 FD A7         sand a, b
2039   0F96 E4            pop a
2040   0F97             ; END LOGICAL AND
2041   0F97 C0 00 00      cmp b, 0
2042   0F9A C6 CB 0F      je _if28_else
2043   0F9D             _if28_true:
2044   0F9D             ;; value = (value * 16) + (hex_char - 'a' + 10); 
2045   0F9D FA FF FF      lea d, [bp + -1] ; $value
2046   0FA0 DA            push d
2047   0FA1 FA FF FF      lea d, [bp + -1] ; $value
2048   0FA4 2A            mov b, [d]
2049   0FA5             ; START FACTORS
2050   0FA5 D7            push a
2051   0FA6 11            mov a, b
2052   0FA7 26 10 00      mov b, $10
2053   0FAA AC            mul a, b ; *
2054   0FAB 11            mov a, b
2055   0FAC 27            mov b, a
2056   0FAD E4            pop a
2057   0FAE             ; END FACTORS
2058   0FAE             ; START TERMS
2059   0FAE D7            push a
2060   0FAF 11            mov a, b
2061   0FB0 FA FC FF      lea d, [bp + -4] ; $hex_char
2062   0FB3 32            mov bl, [d]
2063   0FB4 A7 00         mov bh, 0
2064   0FB6             ; START TERMS
2065   0FB6 D7            push a
2066   0FB7 11            mov a, b
2067   0FB8 26 61 00      mov b, $61
2068   0FBB 60            sub a, b
2069   0FBC 27            mov b, a
2070   0FBD 11            mov a, b
2071   0FBE 26 0A 00      mov b, $a
2072   0FC1 56            add b, a
2073   0FC2 E4            pop a
2074   0FC3             ; END TERMS
2075   0FC3 56            add b, a
2076   0FC4 E4            pop a
2077   0FC5             ; END TERMS
2078   0FC5 E7            pop d
2079   0FC6 FD 43         mov [d], b
2080   0FC8 0A 48 10      jmp _if28_exit
2081   0FCB             _if28_else:
2082   0FCB             ;; if (hex_char >= 'A' && hex_char <= 'F')  
2083   0FCB             _if29_cond:
2084   0FCB FA FC FF      lea d, [bp + -4] ; $hex_char
2085   0FCE 32            mov bl, [d]
2086   0FCF A7 00         mov bh, 0
2087   0FD1             ; START RELATIONAL
2088   0FD1 D7            push a
2089   0FD2 11            mov a, b
2090   0FD3 26 41 00      mov b, $41
2091   0FD6 B0            cmp a, b
2092   0FD7 FD 80         sge ; >=
2093   0FD9 E4            pop a
2094   0FDA             ; END RELATIONAL
2095   0FDA             ; START LOGICAL AND
2096   0FDA D7            push a
2097   0FDB 11            mov a, b
2098   0FDC FA FC FF      lea d, [bp + -4] ; $hex_char
2099   0FDF 32            mov bl, [d]
2100   0FE0 A7 00         mov bh, 0
2101   0FE2             ; START RELATIONAL
2102   0FE2 D7            push a
2103   0FE3 11            mov a, b
2104   0FE4 26 46 00      mov b, $46
2105   0FE7 B0            cmp a, b
2106   0FE8 FD 74         sle ; <= (signed)
2107   0FEA E4            pop a
2108   0FEB             ; END RELATIONAL
2109   0FEB FD A7         sand a, b
2110   0FED E4            pop a
2111   0FEE             ; END LOGICAL AND
2112   0FEE C0 00 00      cmp b, 0
2113   0FF1 C6 22 10      je _if29_else
2114   0FF4             _if29_true:
2115   0FF4             ;; value = (value * 16) + (hex_char - 'A' + 10); 
2116   0FF4 FA FF FF      lea d, [bp + -1] ; $value
2117   0FF7 DA            push d
2118   0FF8 FA FF FF      lea d, [bp + -1] ; $value
2119   0FFB 2A            mov b, [d]
2120   0FFC             ; START FACTORS
2121   0FFC D7            push a
2122   0FFD 11            mov a, b
2123   0FFE 26 10 00      mov b, $10
2124   1001 AC            mul a, b ; *
2125   1002 11            mov a, b
2126   1003 27            mov b, a
2127   1004 E4            pop a
2128   1005             ; END FACTORS
2129   1005             ; START TERMS
2130   1005 D7            push a
2131   1006 11            mov a, b
2132   1007 FA FC FF      lea d, [bp + -4] ; $hex_char
2133   100A 32            mov bl, [d]
2134   100B A7 00         mov bh, 0
2135   100D             ; START TERMS
2136   100D D7            push a
2137   100E 11            mov a, b
2138   100F 26 41 00      mov b, $41
2139   1012 60            sub a, b
2140   1013 27            mov b, a
2141   1014 11            mov a, b
2142   1015 26 0A 00      mov b, $a
2143   1018 56            add b, a
2144   1019 E4            pop a
2145   101A             ; END TERMS
2146   101A 56            add b, a
2147   101B E4            pop a
2148   101C             ; END TERMS
2149   101C E7            pop d
2150   101D FD 43         mov [d], b
2151   101F 0A 48 10      jmp _if29_exit
2152   1022             _if29_else:
2153   1022             ;; value = (value * 16) + (hex_char - '0'); 
2154   1022 FA FF FF      lea d, [bp + -1] ; $value
2155   1025 DA            push d
2156   1026 FA FF FF      lea d, [bp + -1] ; $value
2157   1029 2A            mov b, [d]
2158   102A             ; START FACTORS
2159   102A D7            push a
2160   102B 11            mov a, b
2161   102C 26 10 00      mov b, $10
2162   102F AC            mul a, b ; *
2163   1030 11            mov a, b
2164   1031 27            mov b, a
2165   1032 E4            pop a
2166   1033             ; END FACTORS
2167   1033             ; START TERMS
2168   1033 D7            push a
2169   1034 11            mov a, b
2170   1035 FA FC FF      lea d, [bp + -4] ; $hex_char
2171   1038 32            mov bl, [d]
2172   1039 A7 00         mov bh, 0
2173   103B             ; START TERMS
2174   103B D7            push a
2175   103C 11            mov a, b
2176   103D 26 30 00      mov b, $30
2177   1040 60            sub a, b
2178   1041 27            mov b, a
2179   1042 E4            pop a
2180   1043             ; END TERMS
2181   1043 56            add b, a
2182   1044 E4            pop a
2183   1045             ; END TERMS
2184   1045 E7            pop d
2185   1046 FD 43         mov [d], b
2186   1048             _if29_exit:
2187   1048             _if28_exit:
2188   1048             _for27_update:
2189   1048 FA FD FF      lea d, [bp + -3] ; $i
2190   104B 2A            mov b, [d]
2191   104C FD 77         inc b
2192   104E FA FD FF      lea d, [bp + -3] ; $i
2193   1051 FD 43         mov [d], b
2194   1053 FD 7D         dec b
2195   1055 0A 45 0F      jmp _for27_cond
2196   1058             _for27_exit:
2197   1058             ;; return value; 
2198   1058 FA FF FF      lea d, [bp + -1] ; $value
2199   105B 2A            mov b, [d]
2200   105C F9            leave
2201   105D 09            ret
2202   105E             
2203   105E             gets:
2204   105E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2205   1061             
2206   1061             ; --- BEGIN INLINE ASM BLOCK
2207   1061 FA 05 00      lea d, [bp + 5] ; $s
2208   1064 15            mov a, [d]
2209   1065 3C            mov d, a
2210   1066 07 15 19      call _gets
2211   1069             ; --- END INLINE ASM BLOCK
2212   1069             
2213   1069             ;; return strlen(s); 
2214   1069 FA 05 00      lea d, [bp + 5] ; $s
2215   106C 2A            mov b, [d]
2216   106D FD AB         swp b
2217   106F D8            push b
2218   1070 07 F7 07      call strlen
2219   1073 51 02 00      add sp, 2
2220   1076 F9            leave
2221   1077 09            ret
2222   1078             
2223   1078             print_signed:
2224   1078 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2225   107B             ;; char digits[5]; 
2226   107B 52 05 00      sub sp, 5 ; digits
2227   107E             ;; int i = 0; 
2228   107E 52 02 00      sub sp, 2 ; i
2229   1081             ; --- START LOCAL VAR INITIALIZATION
2230   1081 FA FA FF      lea d, [bp + -6] ; $i
2231   1084 DA            push d
2232   1085 26 00 00      mov b, $0
2233   1088 E7            pop d
2234   1089 FD 43         mov [d], b
2235   108B             ; --- END LOCAL VAR INITIALIZATION
2236   108B             ;; if (num < 0) { 
2237   108B             _if30_cond:
2238   108B FA 05 00      lea d, [bp + 5] ; $num
2239   108E 2A            mov b, [d]
2240   108F             ; START RELATIONAL
2241   108F D7            push a
2242   1090 11            mov a, b
2243   1091 26 00 00      mov b, $0
2244   1094 B0            cmp a, b
2245   1095 FD 73         slt ; < (signed)
2246   1097 E4            pop a
2247   1098             ; END RELATIONAL
2248   1098 C0 00 00      cmp b, 0
2249   109B C6 B8 10      je _if30_else
2250   109E             _if30_true:
2251   109E             ;; putchar('-'); 
2252   109E 26 2D 00      mov b, $2d
2253   10A1 DD            push bl
2254   10A2 07 7D 17      call putchar
2255   10A5 51 01 00      add sp, 1
2256   10A8             ;; num = -num; 
2257   10A8 FA 05 00      lea d, [bp + 5] ; $num
2258   10AB DA            push d
2259   10AC FA 05 00      lea d, [bp + 5] ; $num
2260   10AF 2A            mov b, [d]
2261   10B0 FD 97         neg b
2262   10B2 E7            pop d
2263   10B3 FD 43         mov [d], b
2264   10B5 0A DA 10      jmp _if30_exit
2265   10B8             _if30_else:
2266   10B8             ;; if (num == 0) { 
2267   10B8             _if31_cond:
2268   10B8 FA 05 00      lea d, [bp + 5] ; $num
2269   10BB 2A            mov b, [d]
2270   10BC             ; START RELATIONAL
2271   10BC D7            push a
2272   10BD 11            mov a, b
2273   10BE 26 00 00      mov b, $0
2274   10C1 B0            cmp a, b
2275   10C2 FD 71         seq ; ==
2276   10C4 E4            pop a
2277   10C5             ; END RELATIONAL
2278   10C5 C0 00 00      cmp b, 0
2279   10C8 C6 DA 10      je _if31_exit
2280   10CB             _if31_true:
2281   10CB             ;; putchar('0'); 
2282   10CB 26 30 00      mov b, $30
2283   10CE DD            push bl
2284   10CF 07 7D 17      call putchar
2285   10D2 51 01 00      add sp, 1
2286   10D5             ;; return; 
2287   10D5 F9            leave
2288   10D6 09            ret
2289   10D7 0A DA 10      jmp _if31_exit
2290   10DA             _if31_exit:
2291   10DA             _if30_exit:
2292   10DA             ;; while (num > 0) { 
2293   10DA             _while32_cond:
2294   10DA FA 05 00      lea d, [bp + 5] ; $num
2295   10DD 2A            mov b, [d]
2296   10DE             ; START RELATIONAL
2297   10DE D7            push a
2298   10DF 11            mov a, b
2299   10E0 26 00 00      mov b, $0
2300   10E3 B0            cmp a, b
2301   10E4 FD 7F         sgt ; >
2302   10E6 E4            pop a
2303   10E7             ; END RELATIONAL
2304   10E7 C0 00 00      cmp b, 0
2305   10EA C6 34 11      je _while32_exit
2306   10ED             _while32_block:
2307   10ED             ;; digits[i] = '0' + (num % 10); 
2308   10ED FA FC FF      lea d, [bp + -4] ; $digits
2309   10F0 D7            push a
2310   10F1 DA            push d
2311   10F2 FA FA FF      lea d, [bp + -6] ; $i
2312   10F5 2A            mov b, [d]
2313   10F6 E7            pop d
2314   10F7 5A            add d, b
2315   10F8 E4            pop a
2316   10F9 DA            push d
2317   10FA 26 30 00      mov b, $30
2318   10FD             ; START TERMS
2319   10FD D7            push a
2320   10FE 11            mov a, b
2321   10FF FA 05 00      lea d, [bp + 5] ; $num
2322   1102 2A            mov b, [d]
2323   1103             ; START FACTORS
2324   1103 D7            push a
2325   1104 11            mov a, b
2326   1105 26 0A 00      mov b, $a
2327   1108 AE            div a, b ; 
2328   1109 11            mov a, b
2329   110A 27            mov b, a
2330   110B E4            pop a
2331   110C             ; END FACTORS
2332   110C 56            add b, a
2333   110D E4            pop a
2334   110E             ; END TERMS
2335   110E E7            pop d
2336   110F FD 3E         mov [d], bl
2337   1111             ;; num = num / 10; 
2338   1111 FA 05 00      lea d, [bp + 5] ; $num
2339   1114 DA            push d
2340   1115 FA 05 00      lea d, [bp + 5] ; $num
2341   1118 2A            mov b, [d]
2342   1119             ; START FACTORS
2343   1119 D7            push a
2344   111A 11            mov a, b
2345   111B 26 0A 00      mov b, $a
2346   111E AE            div a, b
2347   111F 27            mov b, a
2348   1120 E4            pop a
2349   1121             ; END FACTORS
2350   1121 E7            pop d
2351   1122 FD 43         mov [d], b
2352   1124             ;; i++; 
2353   1124 FA FA FF      lea d, [bp + -6] ; $i
2354   1127 2A            mov b, [d]
2355   1128 FD 77         inc b
2356   112A FA FA FF      lea d, [bp + -6] ; $i
2357   112D FD 43         mov [d], b
2358   112F FD 7D         dec b
2359   1131 0A DA 10      jmp _while32_cond
2360   1134             _while32_exit:
2361   1134             ;; while (i > 0) { 
2362   1134             _while33_cond:
2363   1134 FA FA FF      lea d, [bp + -6] ; $i
2364   1137 2A            mov b, [d]
2365   1138             ; START RELATIONAL
2366   1138 D7            push a
2367   1139 11            mov a, b
2368   113A 26 00 00      mov b, $0
2369   113D B0            cmp a, b
2370   113E FD 7F         sgt ; >
2371   1140 E4            pop a
2372   1141             ; END RELATIONAL
2373   1141 C0 00 00      cmp b, 0
2374   1144 C6 6D 11      je _while33_exit
2375   1147             _while33_block:
2376   1147             ;; i--; 
2377   1147 FA FA FF      lea d, [bp + -6] ; $i
2378   114A 2A            mov b, [d]
2379   114B FD 7D         dec b
2380   114D FA FA FF      lea d, [bp + -6] ; $i
2381   1150 FD 43         mov [d], b
2382   1152 FD 77         inc b
2383   1154             ;; putchar(digits[i]); 
2384   1154 FA FC FF      lea d, [bp + -4] ; $digits
2385   1157 D7            push a
2386   1158 DA            push d
2387   1159 FA FA FF      lea d, [bp + -6] ; $i
2388   115C 2A            mov b, [d]
2389   115D E7            pop d
2390   115E 5A            add d, b
2391   115F E4            pop a
2392   1160 32            mov bl, [d]
2393   1161 A7 00         mov bh, 0
2394   1163 DD            push bl
2395   1164 07 7D 17      call putchar
2396   1167 51 01 00      add sp, 1
2397   116A 0A 34 11      jmp _while33_cond
2398   116D             _while33_exit:
2399   116D F9            leave
2400   116E 09            ret
2401   116F             
2402   116F             print_signed_long:
2403   116F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2404   1172             ;; char digits[10]; 
2405   1172 52 0A 00      sub sp, 10 ; digits
2406   1175             ;; int i = 0; 
2407   1175 52 02 00      sub sp, 2 ; i
2408   1178             ; --- START LOCAL VAR INITIALIZATION
2409   1178 FA F5 FF      lea d, [bp + -11] ; $i
2410   117B DA            push d
2411   117C 26 00 00      mov b, $0
2412   117F E7            pop d
2413   1180 FD 43         mov [d], b
2414   1182             ; --- END LOCAL VAR INITIALIZATION
2415   1182             ;; if (num < 0) { 
2416   1182             _if34_cond:
2417   1182 FA 05 00      lea d, [bp + 5] ; $num
2418   1185 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2419   1188 FD 39         mov c, b ; And place it into C
2420   118A 2A            mov b, [d] ; Lower Word in B
2421   118B             ; START RELATIONAL
2422   118B D7            push a
2423   118C FD D8         push g
2424   118E 11            mov a, b
2425   118F FD 7A         mov g, c
2426   1191 26 00 00      mov b, $0
2427   1194 38 00 00      mov c, 0
2428   1197 FD AF 00 00   cmp32 ga, cb
2428   119B 00 00 00 00 
2428   119F 00 00 00 00 
2428   11A3 00 00 00 00 
2428   11A7 00 00 00 00 
2428   11AB 00 00 00 00 
2428   11AF 00 00 00 00 
2428   11B3 00 00 00 00 
2428   11B7 00 00 00 00 
2428   11BB 00 00 00 00 
2428   11BF 00 00 00 00 
2428   11C3 00 00 00 00 
2428   11C7 00 00 00 00 
2428   11CB 00 00 00 00 
2428   11CF 00 00 00 00 
2428   11D3 00 00 00 00 
2428   11D7 00 00 00 00 
2428   11DB 00 00 00 00 
2428   11DF 00 00 00 00 
2428   11E3 00 00 00 00 
2428   11E7 00 00 00 00 
2428   11EB 00 00 00 00 
2428   11EF 00 00 00 00 
2428   11F3 00 00 00 00 
2428   11F7 00 00 00 00 
2428   11FB 00 00 00 00 
2428   11FF 00 00 00 00 
2428   1203 00 00 00 00 
2428   1207 00 00 00 00 
2428   120B 00 00 00 00 
2428   120F 00 00 00 00 
2428   1213 00 00 00 00 
2428   1217 00 00 00 00 
2428   121B 00 00 00 00 
2428   121F 00 00 00 00 
2428   1223 00 00 00 00 
2428   1227 00 00 00 00 
2428   122B 00 00 00 00 
2428   122F 00 00 00 00 
2428   1233 00 00 00 00 
2428   1237 00 00 00 00 
2428   123B 00 00 00 00 
2428   123F 00 00 00 00 
2428   1243 00 00 00 00 
2428   1247 00 00 00 00 
2428   124B 00 00 00 00 
2428   124F 00 00 00 00 
2428   1253 00 00 00 00 
2428   1257 00 00 00 00 
2428   125B 00 00 00 00 
2428   125F 00 00 00 00 
2428   1263 00 00 00 00 
2428   1267 00 00 00 00 
2428   126B 00 00 00 00 
2428   126F 00 00 00 00 
2428   1273 00 00 00 00 
2428   1277 00 00 00 00 
2428   127B 00 00 00 00 
2428   127F 00 00 00 00 
2428   1283 00 00 00 00 
2428   1287 00 00 00 00 
2428   128B 00 00 00 00 
2428   128F 00 00 00 00 
2428   1293 00 00 00 00 
2428   1297 00 
2429   1298 FD 73         slt ; <
2430   129A FD F1         pop g
2431   129C E4            pop a
2432   129D             ; END RELATIONAL
2433   129D C0 00 00      cmp b, 0
2434   12A0 C6 C7 12      je _if34_else
2435   12A3             _if34_true:
2436   12A3             ;; putchar('-'); 
2437   12A3 26 2D 00      mov b, $2d
2438   12A6 DD            push bl
2439   12A7 07 7D 17      call putchar
2440   12AA 51 01 00      add sp, 1
2441   12AD             ;; num = -num; 
2442   12AD FA 05 00      lea d, [bp + 5] ; $num
2443   12B0 DA            push d
2444   12B1 FA 05 00      lea d, [bp + 5] ; $num
2445   12B4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2446   12B7 FD 39         mov c, b ; And place it into C
2447   12B9 2A            mov b, [d] ; Lower Word in B
2448   12BA FD 97         neg b
2449   12BC E7            pop d
2450   12BD FD 43         mov [d], b
2451   12BF 28            mov b, c
2452   12C0 FD 44 02 00   mov [d + 2], b
2453   12C4 0A F7 13      jmp _if34_exit
2454   12C7             _if34_else:
2455   12C7             ;; if (num == 0) { 
2456   12C7             _if35_cond:
2457   12C7 FA 05 00      lea d, [bp + 5] ; $num
2458   12CA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2459   12CD FD 39         mov c, b ; And place it into C
2460   12CF 2A            mov b, [d] ; Lower Word in B
2461   12D0             ; START RELATIONAL
2462   12D0 D7            push a
2463   12D1 FD D8         push g
2464   12D3 11            mov a, b
2465   12D4 FD 7A         mov g, c
2466   12D6 26 00 00      mov b, $0
2467   12D9 38 00 00      mov c, 0
2468   12DC FD AF 00 00   cmp32 ga, cb
2468   12E0 00 00 00 00 
2468   12E4 00 00 00 00 
2468   12E8 00 00 00 00 
2468   12EC 00 00 00 00 
2468   12F0 00 00 00 00 
2468   12F4 00 00 00 00 
2468   12F8 00 00 00 00 
2468   12FC 00 00 00 00 
2468   1300 00 00 00 00 
2468   1304 00 00 00 00 
2468   1308 00 00 00 00 
2468   130C 00 00 00 00 
2468   1310 00 00 00 00 
2468   1314 00 00 00 00 
2468   1318 00 00 00 00 
2468   131C 00 00 00 00 
2468   1320 00 00 00 00 
2468   1324 00 00 00 00 
2468   1328 00 00 00 00 
2468   132C 00 00 00 00 
2468   1330 00 00 00 00 
2468   1334 00 00 00 00 
2468   1338 00 00 00 00 
2468   133C 00 00 00 00 
2468   1340 00 00 00 00 
2468   1344 00 00 00 00 
2468   1348 00 00 00 00 
2468   134C 00 00 00 00 
2468   1350 00 00 00 00 
2468   1354 00 00 00 00 
2468   1358 00 00 00 00 
2468   135C 00 00 00 00 
2468   1360 00 00 00 00 
2468   1364 00 00 00 00 
2468   1368 00 00 00 00 
2468   136C 00 00 00 00 
2468   1370 00 00 00 00 
2468   1374 00 00 00 00 
2468   1378 00 00 00 00 
2468   137C 00 00 00 00 
2468   1380 00 00 00 00 
2468   1384 00 00 00 00 
2468   1388 00 00 00 00 
2468   138C 00 00 00 00 
2468   1390 00 00 00 00 
2468   1394 00 00 00 00 
2468   1398 00 00 00 00 
2468   139C 00 00 00 00 
2468   13A0 00 00 00 00 
2468   13A4 00 00 00 00 
2468   13A8 00 00 00 00 
2468   13AC 00 00 00 00 
2468   13B0 00 00 00 00 
2468   13B4 00 00 00 00 
2468   13B8 00 00 00 00 
2468   13BC 00 00 00 00 
2468   13C0 00 00 00 00 
2468   13C4 00 00 00 00 
2468   13C8 00 00 00 00 
2468   13CC 00 00 00 00 
2468   13D0 00 00 00 00 
2468   13D4 00 00 00 00 
2468   13D8 00 00 00 00 
2468   13DC 00 
2469   13DD FD 71         seq ; ==
2470   13DF FD F1         pop g
2471   13E1 E4            pop a
2472   13E2             ; END RELATIONAL
2473   13E2 C0 00 00      cmp b, 0
2474   13E5 C6 F7 13      je _if35_exit
2475   13E8             _if35_true:
2476   13E8             ;; putchar('0'); 
2477   13E8 26 30 00      mov b, $30
2478   13EB DD            push bl
2479   13EC 07 7D 17      call putchar
2480   13EF 51 01 00      add sp, 1
2481   13F2             ;; return; 
2482   13F2 F9            leave
2483   13F3 09            ret
2484   13F4 0A F7 13      jmp _if35_exit
2485   13F7             _if35_exit:
2486   13F7             _if34_exit:
2487   13F7             ;; while (num > 0) { 
2488   13F7             _while36_cond:
2489   13F7 FA 05 00      lea d, [bp + 5] ; $num
2490   13FA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2491   13FD FD 39         mov c, b ; And place it into C
2492   13FF 2A            mov b, [d] ; Lower Word in B
2493   1400             ; START RELATIONAL
2494   1400 D7            push a
2495   1401 FD D8         push g
2496   1403 11            mov a, b
2497   1404 FD 7A         mov g, c
2498   1406 26 00 00      mov b, $0
2499   1409 38 00 00      mov c, 0
2500   140C FD 7F         sgt
2501   140E FD F1         pop g
2502   1410 E4            pop a
2503   1411             ; END RELATIONAL
2504   1411 C0 00 00      cmp b, 0
2505   1414 C6 74 14      je _while36_exit
2506   1417             _while36_block:
2507   1417             ;; digits[i] = '0' + (num % 10); 
2508   1417 FA F7 FF      lea d, [bp + -9] ; $digits
2509   141A D7            push a
2510   141B DA            push d
2511   141C FA F5 FF      lea d, [bp + -11] ; $i
2512   141F 2A            mov b, [d]
2513   1420 E7            pop d
2514   1421 5A            add d, b
2515   1422 E4            pop a
2516   1423 DA            push d
2517   1424 26 30 00      mov b, $30
2518   1427             ; START TERMS
2519   1427 D7            push a
2520   1428 11            mov a, b
2521   1429 FA 05 00      lea d, [bp + 5] ; $num
2522   142C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2523   142F FD 39         mov c, b ; And place it into C
2524   1431 2A            mov b, [d] ; Lower Word in B
2525   1432             ; START FACTORS
2526   1432 D7            push a
2527   1433 11            mov a, b
2528   1434 26 0A 00      mov b, $a
2529   1437 AE            div a, b ; 
2530   1438 11            mov a, b
2531   1439 27            mov b, a
2532   143A E4            pop a
2533   143B             ; END FACTORS
2534   143B 54            add a, b
2535   143C D7            push a
2536   143D FD 12         mov a, g
2537   143F 28            mov b, c
2538   1440 5C            adc a, b
2539   1441 39            mov c, a
2540   1442 E5            pop b
2541   1443 E4            pop a
2542   1444             ; END TERMS
2543   1444 E7            pop d
2544   1445 FD 3E         mov [d], bl
2545   1447             ;; num = num / 10; 
2546   1447 FA 05 00      lea d, [bp + 5] ; $num
2547   144A DA            push d
2548   144B FA 05 00      lea d, [bp + 5] ; $num
2549   144E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2550   1451 FD 39         mov c, b ; And place it into C
2551   1453 2A            mov b, [d] ; Lower Word in B
2552   1454             ; START FACTORS
2553   1454 D7            push a
2554   1455 11            mov a, b
2555   1456 26 0A 00      mov b, $a
2556   1459 AE            div a, b
2557   145A 27            mov b, a
2558   145B E4            pop a
2559   145C             ; END FACTORS
2560   145C E7            pop d
2561   145D FD 43         mov [d], b
2562   145F 28            mov b, c
2563   1460 FD 44 02 00   mov [d + 2], b
2564   1464             ;; i++; 
2565   1464 FA F5 FF      lea d, [bp + -11] ; $i
2566   1467 2A            mov b, [d]
2567   1468 FD 77         inc b
2568   146A FA F5 FF      lea d, [bp + -11] ; $i
2569   146D FD 43         mov [d], b
2570   146F FD 7D         dec b
2571   1471 0A F7 13      jmp _while36_cond
2572   1474             _while36_exit:
2573   1474             ;; while (i > 0) { 
2574   1474             _while37_cond:
2575   1474 FA F5 FF      lea d, [bp + -11] ; $i
2576   1477 2A            mov b, [d]
2577   1478             ; START RELATIONAL
2578   1478 D7            push a
2579   1479 11            mov a, b
2580   147A 26 00 00      mov b, $0
2581   147D B0            cmp a, b
2582   147E FD 7F         sgt ; >
2583   1480 E4            pop a
2584   1481             ; END RELATIONAL
2585   1481 C0 00 00      cmp b, 0
2586   1484 C6 AD 14      je _while37_exit
2587   1487             _while37_block:
2588   1487             ;; i--; 
2589   1487 FA F5 FF      lea d, [bp + -11] ; $i
2590   148A 2A            mov b, [d]
2591   148B FD 7D         dec b
2592   148D FA F5 FF      lea d, [bp + -11] ; $i
2593   1490 FD 43         mov [d], b
2594   1492 FD 77         inc b
2595   1494             ;; putchar(digits[i]); 
2596   1494 FA F7 FF      lea d, [bp + -9] ; $digits
2597   1497 D7            push a
2598   1498 DA            push d
2599   1499 FA F5 FF      lea d, [bp + -11] ; $i
2600   149C 2A            mov b, [d]
2601   149D E7            pop d
2602   149E 5A            add d, b
2603   149F E4            pop a
2604   14A0 32            mov bl, [d]
2605   14A1 A7 00         mov bh, 0
2606   14A3 DD            push bl
2607   14A4 07 7D 17      call putchar
2608   14A7 51 01 00      add sp, 1
2609   14AA 0A 74 14      jmp _while37_cond
2610   14AD             _while37_exit:
2611   14AD F9            leave
2612   14AE 09            ret
2613   14AF             
2614   14AF             print_unsigned_long:
2615   14AF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2616   14B2             ;; char digits[10]; 
2617   14B2 52 0A 00      sub sp, 10 ; digits
2618   14B5             ;; int i; 
2619   14B5 52 02 00      sub sp, 2 ; i
2620   14B8             ;; i = 0; 
2621   14B8 FA F5 FF      lea d, [bp + -11] ; $i
2622   14BB DA            push d
2623   14BC 26 00 00      mov b, $0
2624   14BF E7            pop d
2625   14C0 FD 43         mov [d], b
2626   14C2             ;; if(num == 0){ 
2627   14C2             _if38_cond:
2628   14C2 FA 05 00      lea d, [bp + 5] ; $num
2629   14C5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2630   14C8 FD 39         mov c, b ; And place it into C
2631   14CA 2A            mov b, [d] ; Lower Word in B
2632   14CB             ; START RELATIONAL
2633   14CB D7            push a
2634   14CC FD D8         push g
2635   14CE 11            mov a, b
2636   14CF FD 7A         mov g, c
2637   14D1 26 00 00      mov b, $0
2638   14D4 38 00 00      mov c, 0
2639   14D7 FD AF 00 00   cmp32 ga, cb
2639   14DB 00 00 00 00 
2639   14DF 00 00 00 00 
2639   14E3 00 00 00 00 
2639   14E7 00 00 00 00 
2639   14EB 00 00 00 00 
2639   14EF 00 00 00 00 
2639   14F3 00 00 00 00 
2639   14F7 00 00 00 00 
2639   14FB 00 00 00 00 
2639   14FF 00 00 00 00 
2639   1503 00 00 00 00 
2639   1507 00 00 00 00 
2639   150B 00 00 00 00 
2639   150F 00 00 00 00 
2639   1513 00 00 00 00 
2639   1517 00 00 00 00 
2639   151B 00 00 00 00 
2639   151F 00 00 00 00 
2639   1523 00 00 00 00 
2639   1527 00 00 00 00 
2639   152B 00 00 00 00 
2639   152F 00 00 00 00 
2639   1533 00 00 00 00 
2639   1537 00 00 00 00 
2639   153B 00 00 00 00 
2639   153F 00 00 00 00 
2639   1543 00 00 00 00 
2639   1547 00 00 00 00 
2639   154B 00 00 00 00 
2639   154F 00 00 00 00 
2639   1553 00 00 00 00 
2639   1557 00 00 00 00 
2639   155B 00 00 00 00 
2639   155F 00 00 00 00 
2639   1563 00 00 00 00 
2639   1567 00 00 00 00 
2639   156B 00 00 00 00 
2639   156F 00 00 00 00 
2639   1573 00 00 00 00 
2639   1577 00 00 00 00 
2639   157B 00 00 00 00 
2639   157F 00 00 00 00 
2639   1583 00 00 00 00 
2639   1587 00 00 00 00 
2639   158B 00 00 00 00 
2639   158F 00 00 00 00 
2639   1593 00 00 00 00 
2639   1597 00 00 00 00 
2639   159B 00 00 00 00 
2639   159F 00 00 00 00 
2639   15A3 00 00 00 00 
2639   15A7 00 00 00 00 
2639   15AB 00 00 00 00 
2639   15AF 00 00 00 00 
2639   15B3 00 00 00 00 
2639   15B7 00 00 00 00 
2639   15BB 00 00 00 00 
2639   15BF 00 00 00 00 
2639   15C3 00 00 00 00 
2639   15C7 00 00 00 00 
2639   15CB 00 00 00 00 
2639   15CF 00 00 00 00 
2639   15D3 00 00 00 00 
2639   15D7 00 
2640   15D8 FD 71         seq ; ==
2641   15DA FD F1         pop g
2642   15DC E4            pop a
2643   15DD             ; END RELATIONAL
2644   15DD C0 00 00      cmp b, 0
2645   15E0 C6 F2 15      je _if38_exit
2646   15E3             _if38_true:
2647   15E3             ;; putchar('0'); 
2648   15E3 26 30 00      mov b, $30
2649   15E6 DD            push bl
2650   15E7 07 7D 17      call putchar
2651   15EA 51 01 00      add sp, 1
2652   15ED             ;; return; 
2653   15ED F9            leave
2654   15EE 09            ret
2655   15EF 0A F2 15      jmp _if38_exit
2656   15F2             _if38_exit:
2657   15F2             ;; while (num > 0) { 
2658   15F2             _while39_cond:
2659   15F2 FA 05 00      lea d, [bp + 5] ; $num
2660   15F5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2661   15F8 FD 39         mov c, b ; And place it into C
2662   15FA 2A            mov b, [d] ; Lower Word in B
2663   15FB             ; START RELATIONAL
2664   15FB D7            push a
2665   15FC FD D8         push g
2666   15FE 11            mov a, b
2667   15FF FD 7A         mov g, c
2668   1601 26 00 00      mov b, $0
2669   1604 38 00 00      mov c, 0
2670   1607 FD 81         sgu
2671   1609 FD F1         pop g
2672   160B E4            pop a
2673   160C             ; END RELATIONAL
2674   160C C0 00 00      cmp b, 0
2675   160F C6 6F 16      je _while39_exit
2676   1612             _while39_block:
2677   1612             ;; digits[i] = '0' + (num % 10); 
2678   1612 FA F7 FF      lea d, [bp + -9] ; $digits
2679   1615 D7            push a
2680   1616 DA            push d
2681   1617 FA F5 FF      lea d, [bp + -11] ; $i
2682   161A 2A            mov b, [d]
2683   161B E7            pop d
2684   161C 5A            add d, b
2685   161D E4            pop a
2686   161E DA            push d
2687   161F 26 30 00      mov b, $30
2688   1622             ; START TERMS
2689   1622 D7            push a
2690   1623 11            mov a, b
2691   1624 FA 05 00      lea d, [bp + 5] ; $num
2692   1627 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2693   162A FD 39         mov c, b ; And place it into C
2694   162C 2A            mov b, [d] ; Lower Word in B
2695   162D             ; START FACTORS
2696   162D D7            push a
2697   162E 11            mov a, b
2698   162F 26 0A 00      mov b, $a
2699   1632 AE            div a, b ; 
2700   1633 11            mov a, b
2701   1634 27            mov b, a
2702   1635 E4            pop a
2703   1636             ; END FACTORS
2704   1636 54            add a, b
2705   1637 D7            push a
2706   1638 FD 12         mov a, g
2707   163A 28            mov b, c
2708   163B 5C            adc a, b
2709   163C 39            mov c, a
2710   163D E5            pop b
2711   163E E4            pop a
2712   163F             ; END TERMS
2713   163F E7            pop d
2714   1640 FD 3E         mov [d], bl
2715   1642             ;; num = num / 10; 
2716   1642 FA 05 00      lea d, [bp + 5] ; $num
2717   1645 DA            push d
2718   1646 FA 05 00      lea d, [bp + 5] ; $num
2719   1649 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2720   164C FD 39         mov c, b ; And place it into C
2721   164E 2A            mov b, [d] ; Lower Word in B
2722   164F             ; START FACTORS
2723   164F D7            push a
2724   1650 11            mov a, b
2725   1651 26 0A 00      mov b, $a
2726   1654 AE            div a, b
2727   1655 27            mov b, a
2728   1656 E4            pop a
2729   1657             ; END FACTORS
2730   1657 E7            pop d
2731   1658 FD 43         mov [d], b
2732   165A 28            mov b, c
2733   165B FD 44 02 00   mov [d + 2], b
2734   165F             ;; i++; 
2735   165F FA F5 FF      lea d, [bp + -11] ; $i
2736   1662 2A            mov b, [d]
2737   1663 FD 77         inc b
2738   1665 FA F5 FF      lea d, [bp + -11] ; $i
2739   1668 FD 43         mov [d], b
2740   166A FD 7D         dec b
2741   166C 0A F2 15      jmp _while39_cond
2742   166F             _while39_exit:
2743   166F             ;; while (i > 0) { 
2744   166F             _while40_cond:
2745   166F FA F5 FF      lea d, [bp + -11] ; $i
2746   1672 2A            mov b, [d]
2747   1673             ; START RELATIONAL
2748   1673 D7            push a
2749   1674 11            mov a, b
2750   1675 26 00 00      mov b, $0
2751   1678 B0            cmp a, b
2752   1679 FD 7F         sgt ; >
2753   167B E4            pop a
2754   167C             ; END RELATIONAL
2755   167C C0 00 00      cmp b, 0
2756   167F C6 A8 16      je _while40_exit
2757   1682             _while40_block:
2758   1682             ;; i--; 
2759   1682 FA F5 FF      lea d, [bp + -11] ; $i
2760   1685 2A            mov b, [d]
2761   1686 FD 7D         dec b
2762   1688 FA F5 FF      lea d, [bp + -11] ; $i
2763   168B FD 43         mov [d], b
2764   168D FD 77         inc b
2765   168F             ;; putchar(digits[i]); 
2766   168F FA F7 FF      lea d, [bp + -9] ; $digits
2767   1692 D7            push a
2768   1693 DA            push d
2769   1694 FA F5 FF      lea d, [bp + -11] ; $i
2770   1697 2A            mov b, [d]
2771   1698 E7            pop d
2772   1699 5A            add d, b
2773   169A E4            pop a
2774   169B 32            mov bl, [d]
2775   169C A7 00         mov bh, 0
2776   169E DD            push bl
2777   169F 07 7D 17      call putchar
2778   16A2 51 01 00      add sp, 1
2779   16A5 0A 6F 16      jmp _while40_cond
2780   16A8             _while40_exit:
2781   16A8 F9            leave
2782   16A9 09            ret
2783   16AA             
2784   16AA             print_unsigned:
2785   16AA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2786   16AD             ;; char digits[5]; 
2787   16AD 52 05 00      sub sp, 5 ; digits
2788   16B0             ;; int i; 
2789   16B0 52 02 00      sub sp, 2 ; i
2790   16B3             ;; i = 0; 
2791   16B3 FA FA FF      lea d, [bp + -6] ; $i
2792   16B6 DA            push d
2793   16B7 26 00 00      mov b, $0
2794   16BA E7            pop d
2795   16BB FD 43         mov [d], b
2796   16BD             ;; if(num == 0){ 
2797   16BD             _if41_cond:
2798   16BD FA 05 00      lea d, [bp + 5] ; $num
2799   16C0 2A            mov b, [d]
2800   16C1             ; START RELATIONAL
2801   16C1 D7            push a
2802   16C2 11            mov a, b
2803   16C3 26 00 00      mov b, $0
2804   16C6 B0            cmp a, b
2805   16C7 FD 71         seq ; ==
2806   16C9 E4            pop a
2807   16CA             ; END RELATIONAL
2808   16CA C0 00 00      cmp b, 0
2809   16CD C6 DF 16      je _if41_exit
2810   16D0             _if41_true:
2811   16D0             ;; putchar('0'); 
2812   16D0 26 30 00      mov b, $30
2813   16D3 DD            push bl
2814   16D4 07 7D 17      call putchar
2815   16D7 51 01 00      add sp, 1
2816   16DA             ;; return; 
2817   16DA F9            leave
2818   16DB 09            ret
2819   16DC 0A DF 16      jmp _if41_exit
2820   16DF             _if41_exit:
2821   16DF             ;; while (num > 0) { 
2822   16DF             _while42_cond:
2823   16DF FA 05 00      lea d, [bp + 5] ; $num
2824   16E2 2A            mov b, [d]
2825   16E3             ; START RELATIONAL
2826   16E3 D7            push a
2827   16E4 11            mov a, b
2828   16E5 26 00 00      mov b, $0
2829   16E8 B0            cmp a, b
2830   16E9 FD 81         sgu ; > (unsigned)
2831   16EB E4            pop a
2832   16EC             ; END RELATIONAL
2833   16EC C0 00 00      cmp b, 0
2834   16EF C6 39 17      je _while42_exit
2835   16F2             _while42_block:
2836   16F2             ;; digits[i] = '0' + (num % 10); 
2837   16F2 FA FC FF      lea d, [bp + -4] ; $digits
2838   16F5 D7            push a
2839   16F6 DA            push d
2840   16F7 FA FA FF      lea d, [bp + -6] ; $i
2841   16FA 2A            mov b, [d]
2842   16FB E7            pop d
2843   16FC 5A            add d, b
2844   16FD E4            pop a
2845   16FE DA            push d
2846   16FF 26 30 00      mov b, $30
2847   1702             ; START TERMS
2848   1702 D7            push a
2849   1703 11            mov a, b
2850   1704 FA 05 00      lea d, [bp + 5] ; $num
2851   1707 2A            mov b, [d]
2852   1708             ; START FACTORS
2853   1708 D7            push a
2854   1709 11            mov a, b
2855   170A 26 0A 00      mov b, $a
2856   170D AE            div a, b ; 
2857   170E 11            mov a, b
2858   170F 27            mov b, a
2859   1710 E4            pop a
2860   1711             ; END FACTORS
2861   1711 56            add b, a
2862   1712 E4            pop a
2863   1713             ; END TERMS
2864   1713 E7            pop d
2865   1714 FD 3E         mov [d], bl
2866   1716             ;; num = num / 10; 
2867   1716 FA 05 00      lea d, [bp + 5] ; $num
2868   1719 DA            push d
2869   171A FA 05 00      lea d, [bp + 5] ; $num
2870   171D 2A            mov b, [d]
2871   171E             ; START FACTORS
2872   171E D7            push a
2873   171F 11            mov a, b
2874   1720 26 0A 00      mov b, $a
2875   1723 AE            div a, b
2876   1724 27            mov b, a
2877   1725 E4            pop a
2878   1726             ; END FACTORS
2879   1726 E7            pop d
2880   1727 FD 43         mov [d], b
2881   1729             ;; i++; 
2882   1729 FA FA FF      lea d, [bp + -6] ; $i
2883   172C 2A            mov b, [d]
2884   172D FD 77         inc b
2885   172F FA FA FF      lea d, [bp + -6] ; $i
2886   1732 FD 43         mov [d], b
2887   1734 FD 7D         dec b
2888   1736 0A DF 16      jmp _while42_cond
2889   1739             _while42_exit:
2890   1739             ;; while (i > 0) { 
2891   1739             _while43_cond:
2892   1739 FA FA FF      lea d, [bp + -6] ; $i
2893   173C 2A            mov b, [d]
2894   173D             ; START RELATIONAL
2895   173D D7            push a
2896   173E 11            mov a, b
2897   173F 26 00 00      mov b, $0
2898   1742 B0            cmp a, b
2899   1743 FD 7F         sgt ; >
2900   1745 E4            pop a
2901   1746             ; END RELATIONAL
2902   1746 C0 00 00      cmp b, 0
2903   1749 C6 72 17      je _while43_exit
2904   174C             _while43_block:
2905   174C             ;; i--; 
2906   174C FA FA FF      lea d, [bp + -6] ; $i
2907   174F 2A            mov b, [d]
2908   1750 FD 7D         dec b
2909   1752 FA FA FF      lea d, [bp + -6] ; $i
2910   1755 FD 43         mov [d], b
2911   1757 FD 77         inc b
2912   1759             ;; putchar(digits[i]); 
2913   1759 FA FC FF      lea d, [bp + -4] ; $digits
2914   175C D7            push a
2915   175D DA            push d
2916   175E FA FA FF      lea d, [bp + -6] ; $i
2917   1761 2A            mov b, [d]
2918   1762 E7            pop d
2919   1763 5A            add d, b
2920   1764 E4            pop a
2921   1765 32            mov bl, [d]
2922   1766 A7 00         mov bh, 0
2923   1768 DD            push bl
2924   1769 07 7D 17      call putchar
2925   176C 51 01 00      add sp, 1
2926   176F 0A 39 17      jmp _while43_cond
2927   1772             _while43_exit:
2928   1772 F9            leave
2929   1773 09            ret
2930   1774             
2931   1774             date:
2932   1774 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2933   1777             
2934   1777             ; --- BEGIN INLINE ASM BLOCK
2935   1777 19 00         mov al, 0 
2936   1779 05 07         syscall sys_datetime
2937   177B             ; --- END INLINE ASM BLOCK
2938   177B             
2939   177B F9            leave
2940   177C 09            ret
2941   177D             
2942   177D             putchar:
2943   177D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2944   1780             
2945   1780             ; --- BEGIN INLINE ASM BLOCK
2946   1780 FA 05 00      lea d, [bp + 5] ; $c
2947   1783 1E            mov al, [d]
2948   1784 23            mov ah, al
2949   1785 07 0E 19      call _putchar
2950   1788             ; --- END INLINE ASM BLOCK
2951   1788             
2952   1788 F9            leave
2953   1789 09            ret
2954   178A             
2955   178A             getchar:
2956   178A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2957   178D             ;; char c; 
2958   178D 52 01 00      sub sp, 1 ; c
2959   1790             
2960   1790             ; --- BEGIN INLINE ASM BLOCK
2961   1790 07 07 19      call getch
2962   1793 1A            mov al, ah
2963   1794 FA 00 00      lea d, [bp + 0] ; $c
2964   1797 3E            mov [d], al
2965   1798             ; --- END INLINE ASM BLOCK
2966   1798             
2967   1798             ;; return c; 
2968   1798 FA 00 00      lea d, [bp + 0] ; $c
2969   179B 32            mov bl, [d]
2970   179C A7 00         mov bh, 0
2971   179E F9            leave
2972   179F 09            ret
2973   17A0             
2974   17A0             scann:
2975   17A0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2976   17A3             ;; int m; 
2977   17A3 52 02 00      sub sp, 2 ; m
2978   17A6             
2979   17A6             ; --- BEGIN INLINE ASM BLOCK
2980   17A6 07 52 1B      call scan_u16d
2981   17A9 FA FF FF      lea d, [bp + -1] ; $m
2982   17AC 43            mov [d], a
2983   17AD             ; --- END INLINE ASM BLOCK
2984   17AD             
2985   17AD             ;; return m; 
2986   17AD FA FF FF      lea d, [bp + -1] ; $m
2987   17B0 2A            mov b, [d]
2988   17B1 F9            leave
2989   17B2 09            ret
2990   17B3             
2991   17B3             puts:
2992   17B3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2993   17B6             
2994   17B6             ; --- BEGIN INLINE ASM BLOCK
2995   17B6 FA 05 00      lea d, [bp + 5] ; $s
2996   17B9 15            mov a, [d]
2997   17BA 3C            mov d, a
2998   17BB 07 58 1A      call _puts
2999   17BE 10 00 0A      mov a, $0A00
3000   17C1 05 03         syscall sys_io
3001   17C3             ; --- END INLINE ASM BLOCK
3002   17C3             
3003   17C3 F9            leave
3004   17C4 09            ret
3005   17C5             
3006   17C5             print:
3007   17C5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3008   17C8             
3009   17C8             ; --- BEGIN INLINE ASM BLOCK
3010   17C8 FA 05 00      lea d, [bp + 5] ; $s
3011   17CB FD 2A         mov d, [d]
3012   17CD 07 58 1A      call _puts
3013   17D0             ; --- END INLINE ASM BLOCK
3014   17D0             
3015   17D0 F9            leave
3016   17D1 09            ret
3017   17D2             
3018   17D2             getparam:
3019   17D2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3020   17D5             ;; char data; 
3021   17D5 52 01 00      sub sp, 1 ; data
3022   17D8             
3023   17D8             ; --- BEGIN INLINE ASM BLOCK
3024   17D8 19 04         mov al, 4
3025   17DA FA 05 00      lea d, [bp + 5] ; $address
3026   17DD FD 2A         mov d, [d]
3027   17DF 05 0C         syscall sys_system
3028   17E1 FA 00 00      lea d, [bp + 0] ; $data
3029   17E4 FD 3E         mov [d], bl
3030   17E6             ; --- END INLINE ASM BLOCK
3031   17E6             
3032   17E6             ;; return data; 
3033   17E6 FA 00 00      lea d, [bp + 0] ; $data
3034   17E9 32            mov bl, [d]
3035   17EA A7 00         mov bh, 0
3036   17EC F9            leave
3037   17ED 09            ret
3038   17EE             
3039   17EE             clear:
3040   17EE F8 00 00      enter 0 ; (push bp; mov bp, sp)
3041   17F1             ;; print("\033[2J\033[H"); 
3042   17F1 26 4C 2C      mov b, _s2 ; "\033[2J\033[H"
3043   17F4 FD AB         swp b
3044   17F6 D8            push b
3045   17F7 07 C5 17      call print
3046   17FA 51 02 00      add sp, 2
3047   17FD F9            leave
3048   17FE 09            ret
3049   17FF             
3050   17FF             abs:
3051   17FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
3052   1802             ;; return i < 0 ? -i : i; 
3053   1802             _ternary44_cond:
3054   1802 FA 05 00      lea d, [bp + 5] ; $i
3055   1805 2A            mov b, [d]
3056   1806             ; START RELATIONAL
3057   1806 D7            push a
3058   1807 11            mov a, b
3059   1808 26 00 00      mov b, $0
3060   180B B0            cmp a, b
3061   180C FD 73         slt ; < (signed)
3062   180E E4            pop a
3063   180F             ; END RELATIONAL
3064   180F C0 00 00      cmp b, 0
3065   1812 C6 1E 18      je _ternary44_false
3066   1815             _ternary44_true:
3067   1815 FA 05 00      lea d, [bp + 5] ; $i
3068   1818 2A            mov b, [d]
3069   1819 FD 97         neg b
3070   181B 0A 22 18      jmp _ternary44_exit
3071   181E             _ternary44_false:
3072   181E FA 05 00      lea d, [bp + 5] ; $i
3073   1821 2A            mov b, [d]
3074   1822             _ternary44_exit:
3075   1822 F9            leave
3076   1823 09            ret
3077   1824             
3078   1824             include_stdio_asm:
3079   1824 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3080   1827             
3081   1827             ; --- BEGIN INLINE ASM BLOCK
3082   1827             .include "lib/asm/stdio.asm"
0001+  1827             ;-----------------------------------------------------------------------------
0002+  1827             ; stdio.s
0003+  1827             ;-----------------------------------------------------------------------------
0004+  1827             .include "lib/asm/string.asm"
0001++ 1827             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1827             ; string.s
0003++ 1827             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1827             
0005++ 1827             
0006++ 1827             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1827             ; _strrev
0008++ 1827             ; reverse a string
0009++ 1827             ; D = string address
0010++ 1827             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1827             ; 01234
0012++ 1827             _strrev:
0013++ 1827 4B          	pusha
0014++ 1828 07 6E 18    	call _strlen	; length in C
0015++ 182B 12          	mov a, c
0016++ 182C AF 01 00    	cmp a, 1
0017++ 182F D0 49 18    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1832 7D          	dec a
0019++ 1833 FD 4E       	mov si, d	; beginning of string
0020++ 1835 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1837 59          	add d, a	; end of string
0022++ 1838 12          	mov a, c
0023++ 1839 FD 9B       	shr a		; divide by 2
0024++ 183B 39          	mov c, a	; C now counts the steps
0025++ 183C             _strrev_L0:
0026++ 183C 32          	mov bl, [d]	; save load right-side char into BL
0027++ 183D F6          	lodsb		; load left-side char into AL; increase SI
0028++ 183E 3E          	mov [d], al	; store left char into right side
0029++ 183F 1B          	mov al, bl
0030++ 1840 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1841 7E          	dec c
0032++ 1842 7F          	dec d
0033++ 1843 C2 00 00    	cmp c, 0
0034++ 1846 C7 3C 18    	jne _strrev_L0
0035++ 1849             _strrev_end:
0036++ 1849 4C          	popa
0037++ 184A 09          	ret
0038++ 184B             	
0039++ 184B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 184B             ; _strchr
0041++ 184B             ; search string in D for char in AL
0042++ 184B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 184B             _strchr:
0044++ 184B             _strchr_L0:
0045++ 184B 32          	mov bl, [d]
0046++ 184C C1 00       	cmp bl, 0
0047++ 184E C6 59 18    	je _strchr_end
0048++ 1851 BA          	cmp al, bl
0049++ 1852 C6 59 18    	je _strchr_end
0050++ 1855 79          	inc d
0051++ 1856 0A 4B 18    	jmp _strchr_L0
0052++ 1859             _strchr_end:
0053++ 1859 1B          	mov al, bl
0054++ 185A 09          	ret
0055++ 185B             
0056++ 185B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 185B             ; _strstr
0058++ 185B             ; find sub-string
0059++ 185B             ; str1 in SI
0060++ 185B             ; str2 in DI
0061++ 185B             ; SI points to end of source string
0062++ 185B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 185B             _strstr:
0064++ 185B DB          	push al
0065++ 185C DA          	push d
0066++ 185D E3          	push di
0067++ 185E             _strstr_loop:
0068++ 185E F3          	cmpsb					; compare a byte of the strings
0069++ 185F C7 6A 18    	jne _strstr_ret
0070++ 1862 FC 00 00    	lea d, [di + 0]
0071++ 1865 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1867 C7 5E 18    	jne _strstr_loop				; equal chars but not at end
0073++ 186A             _strstr_ret:
0074++ 186A F0          	pop di
0075++ 186B E7          	pop d
0076++ 186C E8          	pop al
0077++ 186D 09          	ret
0078++ 186E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 186E             ; length of null terminated string
0080++ 186E             ; result in C
0081++ 186E             ; pointer in D
0082++ 186E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 186E             _strlen:
0084++ 186E DA          	push d
0085++ 186F 38 00 00    	mov c, 0
0086++ 1872             _strlen_L1:
0087++ 1872 BD 00       	cmp byte [d], 0
0088++ 1874 C6 7C 18    	je _strlen_ret
0089++ 1877 79          	inc d
0090++ 1878 78          	inc c
0091++ 1879 0A 72 18    	jmp _strlen_L1
0092++ 187C             _strlen_ret:
0093++ 187C E7          	pop d
0094++ 187D 09          	ret
0095++ 187E             
0096++ 187E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 187E             ; STRCMP
0098++ 187E             ; compare two strings
0099++ 187E             ; str1 in SI
0100++ 187E             ; str2 in DI
0101++ 187E             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 187E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 187E             _strcmp:
0104++ 187E DB          	push al
0105++ 187F DA          	push d
0106++ 1880 E3          	push di
0107++ 1881 E2          	push si
0108++ 1882             _strcmp_loop:
0109++ 1882 F3          	cmpsb					; compare a byte of the strings
0110++ 1883 C7 8E 18    	jne _strcmp_ret
0111++ 1886 FB FF FF    	lea d, [si +- 1]
0112++ 1889 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 188B C7 82 18    	jne _strcmp_loop				; equal chars but not at end
0114++ 188E             _strcmp_ret:
0115++ 188E EF          	pop si
0116++ 188F F0          	pop di
0117++ 1890 E7          	pop d
0118++ 1891 E8          	pop al
0119++ 1892 09          	ret
0120++ 1893             
0121++ 1893             
0122++ 1893             ; STRCPY
0123++ 1893             ; copy null terminated string from SI to DI
0124++ 1893             ; source in SI
0125++ 1893             ; destination in DI
0126++ 1893             _strcpy:
0127++ 1893 E2          	push si
0128++ 1894 E3          	push di
0129++ 1895 DB          	push al
0130++ 1896             _strcpy_L1:
0131++ 1896 F6          	lodsb
0132++ 1897 F7          	stosb
0133++ 1898 B9 00       	cmp al, 0
0134++ 189A C7 96 18    	jne _strcpy_L1
0135++ 189D             _strcpy_end:
0136++ 189D E8          	pop al
0137++ 189E F0          	pop di
0138++ 189F EF          	pop si
0139++ 18A0 09          	ret
0140++ 18A1             
0141++ 18A1             ; STRCAT
0142++ 18A1             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 18A1             ; source in SI
0144++ 18A1             ; destination in DI
0145++ 18A1             _strcat:
0146++ 18A1 E2          	push si
0147++ 18A2 E3          	push di
0148++ 18A3 D7          	push a
0149++ 18A4 DA          	push d
0150++ 18A5 50          	mov a, di
0151++ 18A6 3C          	mov d, a
0152++ 18A7             _strcat_goto_end_L1:
0153++ 18A7 BD 00       	cmp byte[d], 0
0154++ 18A9 C6 B0 18    	je _strcat_start
0155++ 18AC 79          	inc d
0156++ 18AD 0A A7 18    	jmp _strcat_goto_end_L1
0157++ 18B0             _strcat_start:
0158++ 18B0 FD 50       	mov di, d
0159++ 18B2             _strcat_L1:
0160++ 18B2 F6          	lodsb
0161++ 18B3 F7          	stosb
0162++ 18B4 B9 00       	cmp al, 0
0163++ 18B6 C7 B2 18    	jne _strcat_L1
0164++ 18B9             _strcat_end:
0165++ 18B9 E7          	pop d
0166++ 18BA E4          	pop a
0167++ 18BB F0          	pop di
0168++ 18BC EF          	pop si
0169++ 18BD 09          	ret
0170++ 18BE             
0171++ 18BE             
0005+  18BE             
0006+  18BE             ;-----------------------------------------------------------------------------
0007+  18BE             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  18BE             ; ASCII in BL
0009+  18BE             ; result in AL
0010+  18BE             ; ascii for F = 0100 0110
0011+  18BE             ; ascii for 9 = 0011 1001
0012+  18BE             ;-----------------------------------------------------------------------------
0013+  18BE             hex_ascii_encode:
0014+  18BE 1B            mov al, bl
0015+  18BF 93 40         test al, $40        ; test if letter or number
0016+  18C1 C7 C7 18      jnz hex_letter
0017+  18C4 87 0F         and al, $0F        ; get number
0018+  18C6 09            ret
0019+  18C7             hex_letter:
0020+  18C7 87 0F         and al, $0F        ; get letter
0021+  18C9 6A 09         add al, 9
0022+  18CB 09            ret
0023+  18CC             
0024+  18CC             ;-----------------------------------------------------------------------------
0025+  18CC             ; ATOI
0026+  18CC             ; 2 letter hex string in B
0027+  18CC             ; 8bit integer returned in AL
0028+  18CC             ;-----------------------------------------------------------------------------
0029+  18CC             _atoi:
0030+  18CC D8            push b
0031+  18CD 07 BE 18      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  18D0 30            mov bl, bh
0033+  18D1 DB            push al          ; save a
0034+  18D2 07 BE 18      call hex_ascii_encode
0035+  18D5 EA            pop bl  
0036+  18D6 FD 9E 04      shl al, 4
0037+  18D9 8C            or al, bl
0038+  18DA E5            pop b
0039+  18DB 09            ret  
0040+  18DC             
0041+  18DC             
0042+  18DC             ;-----------------------------------------------------------------------------
0043+  18DC             ; ITOA
0044+  18DC             ; 8bit value in BL
0045+  18DC             ; 2 byte ASCII result in A
0046+  18DC             ;-----------------------------------------------------------------------------
0047+  18DC             _itoa:
0048+  18DC DA            push d
0049+  18DD D8            push b
0050+  18DE A7 00         mov bh, 0
0051+  18E0 FD A4 04      shr bl, 4  
0052+  18E3 74            mov d, b
0053+  18E4 1F 8C 1B      mov al, [d + s_hex_digits]
0054+  18E7 23            mov ah, al
0055+  18E8               
0056+  18E8 E5            pop b
0057+  18E9 D8            push b
0058+  18EA A7 00         mov bh, 0
0059+  18EC FD 87 0F      and bl, $0F
0060+  18EF 74            mov d, b
0061+  18F0 1F 8C 1B      mov al, [d + s_hex_digits]
0062+  18F3 E5            pop b
0063+  18F4 E7            pop d
0064+  18F5 09            ret
0065+  18F6             
0066+  18F6             ;-----------------------------------------------------------------------------
0067+  18F6             ; HEX STRING TO BINARY
0068+  18F6             ; di = destination address
0069+  18F6             ; si = source
0070+  18F6             ;-----------------------------------------------------------------------------
0071+  18F6             _hex_to_int:
0072+  18F6             _hex_to_int_L1:
0073+  18F6 F6            lodsb          ; load from [SI] to AL
0074+  18F7 B9 00         cmp al, 0        ; check if ASCII 0
0075+  18F9 C6 06 19      jz _hex_to_int_ret
0076+  18FC 36            mov bh, al
0077+  18FD F6            lodsb
0078+  18FE 2F            mov bl, al
0079+  18FF 07 CC 18      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1902 F7            stosb          ; store AL to [DI]
0081+  1903 0A F6 18      jmp _hex_to_int_L1
0082+  1906             _hex_to_int_ret:
0083+  1906 09            ret    
0084+  1907             
0085+  1907             ;-----------------------------------------------------------------------------
0086+  1907             ; GETCHAR
0087+  1907             ; char in ah
0088+  1907             ;-----------------------------------------------------------------------------
0089+  1907             getch:
0090+  1907 DB            push al
0091+  1908             getch_retry:
0092+  1908 19 01         mov al, 1
0093+  190A 05 03         syscall sys_io      ; receive in AH
0094+  190C E8            pop al
0095+  190D 09            ret
0096+  190E             
0097+  190E             ;-----------------------------------------------------------------------------
0098+  190E             ; PUTCHAR
0099+  190E             ; char in ah
0100+  190E             ;-----------------------------------------------------------------------------
0101+  190E             _putchar:
0102+  190E D7            push a
0103+  190F 19 00         mov al, 0
0104+  1911 05 03         syscall sys_io      ; char in AH
0105+  1913 E4            pop a
0106+  1914 09            ret
0107+  1915             
0108+  1915             ;-----------------------------------------------------------------------------
0109+  1915             ;; INPUT A STRING
0110+  1915             ;; terminates with null
0111+  1915             ;; pointer in D
0112+  1915             ;-----------------------------------------------------------------------------
0113+  1915             _gets:
0114+  1915 D7            push a
0115+  1916 DA            push d
0116+  1917             _gets_loop:
0117+  1917 19 01         mov al, 1
0118+  1919 05 03         syscall sys_io      ; receive in AH
0119+  191B B9 00         cmp al, 0        ; check error code (AL)
0120+  191D C6 17 19      je _gets_loop      ; if no char received, retry
0121+  1920             
0122+  1920 76 1B         cmp ah, 27
0123+  1922 C6 43 19      je _gets_ansi_esc
0124+  1925 76 0A         cmp ah, $0A        ; LF
0125+  1927 C6 AE 19      je _gets_end
0126+  192A 76 0D         cmp ah, $0D        ; CR
0127+  192C C6 AE 19      je _gets_end
0128+  192F 76 5C         cmp ah, $5C        ; '\\'
0129+  1931 C6 6F 19      je _gets_escape
0130+  1934               
0131+  1934 76 08         cmp ah, $08      ; check for backspace
0132+  1936 C6 3F 19      je _gets_backspace
0133+  1939             
0134+  1939 1A            mov al, ah
0135+  193A 3E            mov [d], al
0136+  193B 79            inc d
0137+  193C 0A 17 19      jmp _gets_loop
0138+  193F             _gets_backspace:
0139+  193F 7F            dec d
0140+  1940 0A 17 19      jmp _gets_loop
0141+  1943             _gets_ansi_esc:
0142+  1943 19 01         mov al, 1
0143+  1945 05 03         syscall sys_io        ; receive in AH without echo
0144+  1947 B9 00         cmp al, 0          ; check error code (AL)
0145+  1949 C6 43 19      je _gets_ansi_esc    ; if no char received, retry
0146+  194C 76 5B         cmp ah, '['
0147+  194E C7 17 19      jne _gets_loop
0148+  1951             _gets_ansi_esc_2:
0149+  1951 19 01         mov al, 1
0150+  1953 05 03         syscall sys_io          ; receive in AH without echo
0151+  1955 B9 00         cmp al, 0            ; check error code (AL)
0152+  1957 C6 51 19      je _gets_ansi_esc_2  ; if no char received, retry
0153+  195A 76 44         cmp ah, 'D'
0154+  195C C6 67 19      je _gets_left_arrow
0155+  195F 76 43         cmp ah, 'C'
0156+  1961 C6 6B 19      je _gets_right_arrow
0157+  1964 0A 17 19      jmp _gets_loop
0158+  1967             _gets_left_arrow:
0159+  1967 7F            dec d
0160+  1968 0A 17 19      jmp _gets_loop
0161+  196B             _gets_right_arrow:
0162+  196B 79            inc d
0163+  196C 0A 17 19      jmp _gets_loop
0164+  196F             _gets_escape:
0165+  196F 19 01         mov al, 1
0166+  1971 05 03         syscall sys_io      ; receive in AH
0167+  1973 B9 00         cmp al, 0        ; check error code (AL)
0168+  1975 C6 6F 19      je _gets_escape      ; if no char received, retry
0169+  1978 76 6E         cmp ah, 'n'
0170+  197A C6 99 19      je _gets_LF
0171+  197D 76 72         cmp ah, 'r'
0172+  197F C6 A0 19      je _gets_CR
0173+  1982 76 30         cmp ah, '0'
0174+  1984 C6 A7 19      je _gets_NULL
0175+  1987 76 5C         cmp ah, $5C  ; '\'
0176+  1989 C6 92 19      je _gets_slash
0177+  198C 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  198D 3E            mov [d], al
0179+  198E 79            inc d
0180+  198F 0A 17 19      jmp _gets_loop
0181+  1992             _gets_slash:
0182+  1992 19 5C         mov al, $5C
0183+  1994 3E            mov [d], al
0184+  1995 79            inc d
0185+  1996 0A 17 19      jmp _gets_loop
0186+  1999             _gets_LF:
0187+  1999 19 0A         mov al, $0A
0188+  199B 3E            mov [d], al
0189+  199C 79            inc d
0190+  199D 0A 17 19      jmp _gets_loop
0191+  19A0             _gets_CR:
0192+  19A0 19 0D         mov al, $0D
0193+  19A2 3E            mov [d], al
0194+  19A3 79            inc d
0195+  19A4 0A 17 19      jmp _gets_loop
0196+  19A7             _gets_NULL:
0197+  19A7 19 00         mov al, $00
0198+  19A9 3E            mov [d], al
0199+  19AA 79            inc d
0200+  19AB 0A 17 19      jmp _gets_loop
0201+  19AE             _gets_end:
0202+  19AE 19 00         mov al, 0
0203+  19B0 3E            mov [d], al        ; terminate string
0204+  19B1 E7            pop d
0205+  19B2 E4            pop a
0206+  19B3 09            ret
0207+  19B4             
0208+  19B4             ;-----------------------------------------------------------------------------
0209+  19B4             ;; INPUT TEXT
0210+  19B4             ;; terminated with CTRL+D
0211+  19B4             ;; pointer in D
0212+  19B4             ;-----------------------------------------------------------------------------
0213+  19B4             _gettxt:
0214+  19B4 D7            push a
0215+  19B5 DA            push d
0216+  19B6             _gettxt_loop:
0217+  19B6 19 01         mov al, 1
0218+  19B8 05 03         syscall sys_io      ; receive in AH
0219+  19BA B9 00         cmp al, 0        ; check error code (AL)
0220+  19BC C6 B6 19      je _gettxt_loop    ; if no char received, retry
0221+  19BF 76 04         cmp ah, 4      ; EOT
0222+  19C1 C6 FF 19      je _gettxt_end
0223+  19C4 76 08         cmp ah, $08      ; check for backspace
0224+  19C6 C6 FB 19      je _gettxt_backspace
0225+  19C9 76 5C         cmp ah, $5C        ; '\'
0226+  19CB C6 D4 19      je _gettxt_escape
0227+  19CE 1A            mov al, ah
0228+  19CF 3E            mov [d], al
0229+  19D0 79            inc d
0230+  19D1 0A B6 19      jmp _gettxt_loop
0231+  19D4             _gettxt_escape:
0232+  19D4 19 01         mov al, 1
0233+  19D6 05 03         syscall sys_io      ; receive in AH
0234+  19D8 B9 00         cmp al, 0        ; check error code (AL)
0235+  19DA C6 D4 19      je _gettxt_escape    ; if no char received, retry
0236+  19DD 76 6E         cmp ah, 'n'
0237+  19DF C6 ED 19      je _gettxt_LF
0238+  19E2 76 72         cmp ah, 'r'
0239+  19E4 C6 F4 19      je _gettxt_CR
0240+  19E7 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  19E8 3E            mov [d], al
0242+  19E9 79            inc d
0243+  19EA 0A B6 19      jmp _gettxt_loop
0244+  19ED             _gettxt_LF:
0245+  19ED 19 0A         mov al, $0A
0246+  19EF 3E            mov [d], al
0247+  19F0 79            inc d
0248+  19F1 0A B6 19      jmp _gettxt_loop
0249+  19F4             _gettxt_CR:
0250+  19F4 19 0D         mov al, $0D
0251+  19F6 3E            mov [d], al
0252+  19F7 79            inc d
0253+  19F8 0A B6 19      jmp _gettxt_loop
0254+  19FB             _gettxt_backspace:
0255+  19FB 7F            dec d
0256+  19FC 0A B6 19      jmp _gettxt_loop
0257+  19FF             _gettxt_end:
0258+  19FF 19 00         mov al, 0
0259+  1A01 3E            mov [d], al        ; terminate string
0260+  1A02 E7            pop d
0261+  1A03 E4            pop a
0262+  1A04 09            ret
0263+  1A05             
0264+  1A05             ;-----------------------------------------------------------------------------
0265+  1A05             ; PRINT NEW LINE
0266+  1A05             ;-----------------------------------------------------------------------------
0267+  1A05             printnl:
0268+  1A05 D7            push a
0269+  1A06 10 00 0A      mov a, $0A00
0270+  1A09 05 03         syscall sys_io
0271+  1A0B 10 00 0D      mov a, $0D00
0272+  1A0E 05 03         syscall sys_io
0273+  1A10 E4            pop a
0274+  1A11 09            ret
0275+  1A12             
0276+  1A12             ;-----------------------------------------------------------------------------
0277+  1A12             ; _strtoint
0278+  1A12             ; 4 digit hex string number in d
0279+  1A12             ; integer returned in A
0280+  1A12             ;-----------------------------------------------------------------------------
0281+  1A12             _strtointx:
0282+  1A12 D8            push b
0283+  1A13 32            mov bl, [d]
0284+  1A14 37            mov bh, bl
0285+  1A15 33 01 00      mov bl, [d + 1]
0286+  1A18 07 CC 18      call _atoi        ; convert to int in AL
0287+  1A1B 23            mov ah, al        ; move to AH
0288+  1A1C 33 02 00      mov bl, [d + 2]
0289+  1A1F 37            mov bh, bl
0290+  1A20 33 03 00      mov bl, [d + 3]
0291+  1A23 07 CC 18      call _atoi        ; convert to int in AL
0292+  1A26 E5            pop b
0293+  1A27 09            ret
0294+  1A28             
0295+  1A28             ;-----------------------------------------------------------------------------
0296+  1A28             ; _strtoint
0297+  1A28             ; 5 digit base10 string number in d
0298+  1A28             ; integer returned in A
0299+  1A28             ;-----------------------------------------------------------------------------
0300+  1A28             _strtoint:
0301+  1A28 E2            push si
0302+  1A29 D8            push b
0303+  1A2A D9            push c
0304+  1A2B DA            push d
0305+  1A2C 07 6E 18      call _strlen      ; get string length in C
0306+  1A2F 7E            dec c
0307+  1A30 FD 4E         mov si, d
0308+  1A32 12            mov a, c
0309+  1A33 FD 99         shl a
0310+  1A35 3B A4 1B      mov d, table_power
0311+  1A38 59            add d, a
0312+  1A39 38 00 00      mov c, 0
0313+  1A3C             _strtoint_L0:
0314+  1A3C F6            lodsb      ; load ASCII to al
0315+  1A3D B9 00         cmp al, 0
0316+  1A3F C6 52 1A      je _strtoint_end
0317+  1A42 6F 30         sub al, $30    ; make into integer
0318+  1A44 22 00         mov ah, 0
0319+  1A46 2A            mov b, [d]
0320+  1A47 AC            mul a, b      ; result in B since it fits in 16bits
0321+  1A48 11            mov a, b
0322+  1A49 28            mov b, c
0323+  1A4A 54            add a, b
0324+  1A4B 39            mov c, a
0325+  1A4C 63 02 00      sub d, 2
0326+  1A4F 0A 3C 1A      jmp _strtoint_L0
0327+  1A52             _strtoint_end:
0328+  1A52 12            mov a, c
0329+  1A53 E7            pop d
0330+  1A54 E6            pop c
0331+  1A55 E5            pop b
0332+  1A56 EF            pop si
0333+  1A57 09            ret
0334+  1A58             
0335+  1A58             ;-----------------------------------------------------------------------------
0336+  1A58             ; PRINT NULL TERMINATED STRING
0337+  1A58             ; pointer in D
0338+  1A58             ;-----------------------------------------------------------------------------
0339+  1A58             _puts:
0340+  1A58 D7            push a
0341+  1A59 DA            push d
0342+  1A5A             _puts_L1:
0343+  1A5A 1E            mov al, [d]
0344+  1A5B B9 00         cmp al, 0
0345+  1A5D C6 69 1A      jz _puts_END
0346+  1A60 23            mov ah, al
0347+  1A61 19 00         mov al, 0
0348+  1A63 05 03         syscall sys_io
0349+  1A65 79            inc d
0350+  1A66 0A 5A 1A      jmp _puts_L1
0351+  1A69             _puts_END:
0352+  1A69 E7            pop d
0353+  1A6A E4            pop a
0354+  1A6B 09            ret
0355+  1A6C             
0356+  1A6C             ;-----------------------------------------------------------------------------
0357+  1A6C             ; PRINT N SIZE STRING
0358+  1A6C             ; pointer in D
0359+  1A6C             ; size in C
0360+  1A6C             ;-----------------------------------------------------------------------------
0361+  1A6C             _putsn:
0362+  1A6C DB            push al
0363+  1A6D DA            push d
0364+  1A6E D9            push c
0365+  1A6F             _putsn_L0:
0366+  1A6F 1E            mov al, [d]
0367+  1A70 23            mov ah, al
0368+  1A71 19 00         mov al, 0
0369+  1A73 05 03         syscall sys_io
0370+  1A75 79            inc d
0371+  1A76 7E            dec c  
0372+  1A77 C2 00 00      cmp c, 0
0373+  1A7A C7 6F 1A      jne _putsn_L0
0374+  1A7D             _putsn_end:
0375+  1A7D E6            pop c
0376+  1A7E E7            pop d
0377+  1A7F E8            pop al
0378+  1A80 09            ret
0379+  1A81             
0380+  1A81             ;-----------------------------------------------------------------------------
0381+  1A81             ; print 16bit decimal number
0382+  1A81             ; input number in A
0383+  1A81             ;-----------------------------------------------------------------------------
0384+  1A81             print_u16d:
0385+  1A81 D7            push a
0386+  1A82 D8            push b
0387+  1A83 26 10 27      mov b, 10000
0388+  1A86 AE            div a, b      ; get 10000's coeff.
0389+  1A87 07 A9 1A      call print_number
0390+  1A8A 11            mov a, b
0391+  1A8B 26 E8 03      mov b, 1000
0392+  1A8E AE            div a, b      ; get 1000's coeff.
0393+  1A8F 07 A9 1A      call print_number
0394+  1A92 11            mov a, b
0395+  1A93 26 64 00      mov b, 100
0396+  1A96 AE            div a, b
0397+  1A97 07 A9 1A      call print_number
0398+  1A9A 11            mov a, b
0399+  1A9B 26 0A 00      mov b, 10
0400+  1A9E AE            div a, b
0401+  1A9F 07 A9 1A      call print_number
0402+  1AA2 1B            mov al, bl      ; 1's coeff in bl
0403+  1AA3 07 A9 1A      call print_number
0404+  1AA6 E5            pop b
0405+  1AA7 E4            pop a
0406+  1AA8 09            ret
0407+  1AA9             
0408+  1AA9             ;-----------------------------------------------------------------------------
0409+  1AA9             ; print AL
0410+  1AA9             ;-----------------------------------------------------------------------------
0411+  1AA9             print_number:
0412+  1AA9 6A 30         add al, $30
0413+  1AAB 23            mov ah, al
0414+  1AAC 07 0E 19      call _putchar
0415+  1AAF 09            ret
0416+  1AB0             
0417+  1AB0             ;-----------------------------------------------------------------------------
0418+  1AB0             ; PRINT 16BIT HEX INTEGER
0419+  1AB0             ; integer value in reg B
0420+  1AB0             ;-----------------------------------------------------------------------------
0421+  1AB0             print_u16x:
0422+  1AB0 D7            push a
0423+  1AB1 D8            push b
0424+  1AB2 DD            push bl
0425+  1AB3 30            mov bl, bh
0426+  1AB4 07 DC 18      call _itoa        ; convert bh to char in A
0427+  1AB7 2F            mov bl, al        ; save al
0428+  1AB8 19 00         mov al, 0
0429+  1ABA 05 03         syscall sys_io        ; display AH
0430+  1ABC 24            mov ah, bl        ; retrieve al
0431+  1ABD 19 00         mov al, 0
0432+  1ABF 05 03         syscall sys_io        ; display AL
0433+  1AC1             
0434+  1AC1 EA            pop bl
0435+  1AC2 07 DC 18      call _itoa        ; convert bh to char in A
0436+  1AC5 2F            mov bl, al        ; save al
0437+  1AC6 19 00         mov al, 0
0438+  1AC8 05 03         syscall sys_io        ; display AH
0439+  1ACA 24            mov ah, bl        ; retrieve al
0440+  1ACB 19 00         mov al, 0
0441+  1ACD 05 03         syscall sys_io        ; display AL
0442+  1ACF             
0443+  1ACF E5            pop b
0444+  1AD0 E4            pop a
0445+  1AD1 09            ret
0446+  1AD2             
0447+  1AD2             ;-----------------------------------------------------------------------------
0448+  1AD2             ; INPUT 16BIT HEX INTEGER
0449+  1AD2             ; read 16bit integer into A
0450+  1AD2             ;-----------------------------------------------------------------------------
0451+  1AD2             scan_u16x:
0452+  1AD2 F8 10 00      enter 16
0453+  1AD5 D8            push b
0454+  1AD6 DA            push d
0455+  1AD7             
0456+  1AD7 FA F1 FF      lea d, [bp + -15]
0457+  1ADA 07 15 19      call _gets        ; get number
0458+  1ADD             
0459+  1ADD 32            mov bl, [d]
0460+  1ADE 37            mov bh, bl
0461+  1ADF 33 01 00      mov bl, [d + 1]
0462+  1AE2 07 CC 18      call _atoi        ; convert to int in AL
0463+  1AE5 23            mov ah, al        ; move to AH
0464+  1AE6             
0465+  1AE6 33 02 00      mov bl, [d + 2]
0466+  1AE9 37            mov bh, bl
0467+  1AEA 33 03 00      mov bl, [d + 3]
0468+  1AED 07 CC 18      call _atoi        ; convert to int in AL
0469+  1AF0             
0470+  1AF0 E7            pop d
0471+  1AF1 E5            pop b
0472+  1AF2 F9            leave
0473+  1AF3 09            ret
0474+  1AF4             
0475+  1AF4             ;-----------------------------------------------------------------------------
0476+  1AF4             ; PRINT 8bit HEX INTEGER
0477+  1AF4             ; integer value in reg bl
0478+  1AF4             ;-----------------------------------------------------------------------------
0479+  1AF4             print_u8x:
0480+  1AF4 D7            push a
0481+  1AF5 DD            push bl
0482+  1AF6             
0483+  1AF6 07 DC 18      call _itoa        ; convert bl to char in A
0484+  1AF9 2F            mov bl, al        ; save al
0485+  1AFA 19 00         mov al, 0
0486+  1AFC 05 03         syscall sys_io        ; display AH
0487+  1AFE 24            mov ah, bl        ; retrieve al
0488+  1AFF 19 00         mov al, 0
0489+  1B01 05 03         syscall sys_io        ; display AL
0490+  1B03             
0491+  1B03 EA            pop bl
0492+  1B04 E4            pop a
0493+  1B05 09            ret
0494+  1B06             
0495+  1B06             ;-----------------------------------------------------------------------------
0496+  1B06             ; print 8bit decimal unsigned number
0497+  1B06             ; input number in AL
0498+  1B06             ;-----------------------------------------------------------------------------
0499+  1B06             print_u8d:
0500+  1B06 D7            push a
0501+  1B07 D8            push b
0502+  1B08             
0503+  1B08 22 00         mov ah, 0
0504+  1B0A 26 64 00      mov b, 100
0505+  1B0D AE            div a, b
0506+  1B0E D8            push b      ; save remainder
0507+  1B0F B9 00         cmp al, 0
0508+  1B11 C6 1B 1B      je skip100
0509+  1B14 6A 30         add al, $30
0510+  1B16 23            mov ah, al
0511+  1B17 19 00         mov al, 0
0512+  1B19 05 03         syscall sys_io  ; print coeff
0513+  1B1B             skip100:
0514+  1B1B E4            pop a
0515+  1B1C 22 00         mov ah, 0
0516+  1B1E 26 0A 00      mov b, 10
0517+  1B21 AE            div a, b
0518+  1B22 D8            push b      ; save remainder
0519+  1B23 B9 00         cmp al, 0
0520+  1B25 C6 2F 1B      je skip10
0521+  1B28 6A 30         add al, $30
0522+  1B2A 23            mov ah, al
0523+  1B2B 19 00         mov al, 0
0524+  1B2D 05 03         syscall sys_io  ; print coeff
0525+  1B2F             skip10:
0526+  1B2F E4            pop a
0527+  1B30 1B            mov al, bl
0528+  1B31 6A 30         add al, $30
0529+  1B33 23            mov ah, al
0530+  1B34 19 00         mov al, 0
0531+  1B36 05 03         syscall sys_io  ; print coeff
0532+  1B38 E5            pop b
0533+  1B39 E4            pop a
0534+  1B3A 09            ret
0535+  1B3B             
0536+  1B3B             ;-----------------------------------------------------------------------------
0537+  1B3B             ; INPUT 8BIT HEX INTEGER
0538+  1B3B             ; read 8bit integer into AL
0539+  1B3B             ;-----------------------------------------------------------------------------
0540+  1B3B             scan_u8x:
0541+  1B3B F8 04 00      enter 4
0542+  1B3E D8            push b
0543+  1B3F DA            push d
0544+  1B40             
0545+  1B40 FA FD FF      lea d, [bp + -3]
0546+  1B43 07 15 19      call _gets        ; get number
0547+  1B46             
0548+  1B46 32            mov bl, [d]
0549+  1B47 37            mov bh, bl
0550+  1B48 33 01 00      mov bl, [d + 1]
0551+  1B4B 07 CC 18      call _atoi        ; convert to int in AL
0552+  1B4E             
0553+  1B4E E7            pop d
0554+  1B4F E5            pop b
0555+  1B50 F9            leave
0556+  1B51 09            ret
0557+  1B52             
0558+  1B52             ;-----------------------------------------------------------------------------
0559+  1B52             ; input decimal number
0560+  1B52             ; result in A
0561+  1B52             ; 655'\0'
0562+  1B52             ; low--------high
0563+  1B52             ;-----------------------------------------------------------------------------
0564+  1B52             scan_u16d:
0565+  1B52 F8 08 00      enter 8
0566+  1B55 E2            push si
0567+  1B56 D8            push b
0568+  1B57 D9            push c
0569+  1B58 DA            push d
0570+  1B59 FA F9 FF      lea d, [bp +- 7]
0571+  1B5C 07 15 19      call _gets
0572+  1B5F 07 6E 18      call _strlen      ; get string length in C
0573+  1B62 7E            dec c
0574+  1B63 FD 4E         mov si, d
0575+  1B65 12            mov a, c
0576+  1B66 FD 99         shl a
0577+  1B68 3B A4 1B      mov d, table_power
0578+  1B6B 59            add d, a
0579+  1B6C 38 00 00      mov c, 0
0580+  1B6F             mul_loop:
0581+  1B6F F6            lodsb      ; load ASCII to al
0582+  1B70 B9 00         cmp al, 0
0583+  1B72 C6 85 1B      je mul_exit
0584+  1B75 6F 30         sub al, $30    ; make into integer
0585+  1B77 22 00         mov ah, 0
0586+  1B79 2A            mov b, [d]
0587+  1B7A AC            mul a, b      ; result in B since it fits in 16bits
0588+  1B7B 11            mov a, b
0589+  1B7C 28            mov b, c
0590+  1B7D 54            add a, b
0591+  1B7E 39            mov c, a
0592+  1B7F 63 02 00      sub d, 2
0593+  1B82 0A 6F 1B      jmp mul_loop
0594+  1B85             mul_exit:
0595+  1B85 12            mov a, c
0596+  1B86 E7            pop d
0597+  1B87 E6            pop c
0598+  1B88 E5            pop b
0599+  1B89 EF            pop si
0600+  1B8A F9            leave
0601+  1B8B 09            ret
0602+  1B8C             
0603+  1B8C 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1B90 34 35 36 37 
0603+  1B94 38 39 41 42 
0603+  1B98 43 44 45 46 
0604+  1B9C 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1BA0 1B 5B 48 00 
0605+  1BA4             
0606+  1BA4             table_power:
0607+  1BA4 01 00         .dw 1
0608+  1BA6 0A 00         .dw 10
0609+  1BA8 64 00         .dw 100
0610+  1BAA E8 03         .dw 1000
0611+  1BAC 10 27         .dw 100003083   1BAE             ; --- END INLINE ASM BLOCK
3084   1BAE             
3085   1BAE F9            leave
3086   1BAF 09            ret
3087   1BB0             
3088   1BB0             print_grid:
3089   1BB0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3090   1BB3             ;; for (y = 0; y < 20; ++y) { 
3091   1BB3             _for45_init:
3092   1BB3 3B 03 2C      mov d, _y ; $y
3093   1BB6 DA            push d
3094   1BB7 26 00 00      mov b, $0
3095   1BBA E7            pop d
3096   1BBB FD 43         mov [d], b
3097   1BBD             _for45_cond:
3098   1BBD 3B 03 2C      mov d, _y ; $y
3099   1BC0 2A            mov b, [d]
3100   1BC1             ; START RELATIONAL
3101   1BC1 D7            push a
3102   1BC2 11            mov a, b
3103   1BC3 26 14 00      mov b, $14
3104   1BC6 B0            cmp a, b
3105   1BC7 FD 73         slt ; < (signed)
3106   1BC9 E4            pop a
3107   1BCA             ; END RELATIONAL
3108   1BCA C0 00 00      cmp b, 0
3109   1BCD C6 83 1C      je _for45_exit
3110   1BD0             _for45_block:
3111   1BD0             ;; for (x = 0; x < 40; ++x) { 
3112   1BD0             _for46_init:
3113   1BD0 3B 01 2C      mov d, _x ; $x
3114   1BD3 DA            push d
3115   1BD4 26 00 00      mov b, $0
3116   1BD7 E7            pop d
3117   1BD8 FD 43         mov [d], b
3118   1BDA             _for46_cond:
3119   1BDA 3B 01 2C      mov d, _x ; $x
3120   1BDD 2A            mov b, [d]
3121   1BDE             ; START RELATIONAL
3122   1BDE D7            push a
3123   1BDF 11            mov a, b
3124   1BE0 26 28 00      mov b, $28
3125   1BE3 B0            cmp a, b
3126   1BE4 FD 73         slt ; < (signed)
3127   1BE6 E4            pop a
3128   1BE7             ; END RELATIONAL
3129   1BE7 C0 00 00      cmp b, 0
3130   1BEA C6 6E 1C      je _for46_exit
3131   1BED             _for46_block:
3132   1BED             ;; switch (grid[y][x]) { 
3133   1BED             _switch47_expr:
3134   1BED 3B 81 1F      mov d, _grid_data ; $grid
3135   1BF0 D7            push a
3136   1BF1 DA            push d
3137   1BF2 3B 03 2C      mov d, _y ; $y
3138   1BF5 2A            mov b, [d]
3139   1BF6 E7            pop d
3140   1BF7 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
3141   1BFB DA            push d
3142   1BFC 3B 01 2C      mov d, _x ; $x
3143   1BFF 2A            mov b, [d]
3144   1C00 E7            pop d
3145   1C01 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3146   1C05 E4            pop a
3147   1C06 2A            mov b, [d]
3148   1C07             _switch47_comparisons:
3149   1C07 C0 00 00      cmp b, 0
3150   1C0A C6 22 1C      je _switch47_case0
3151   1C0D C0 01 00      cmp b, 1
3152   1C10 C6 2F 1C      je _switch47_case1
3153   1C13 C0 02 00      cmp b, 2
3154   1C16 C6 3C 1C      je _switch47_case2
3155   1C19 C0 03 00      cmp b, 3
3156   1C1C C6 49 1C      je _switch47_case3
3157   1C1F 0A 56 1C      jmp _switch47_exit
3158   1C22             _switch47_case0:
3159   1C22             ;; c = ' '; break; 
3160   1C22 3B 0F 2C      mov d, _c ; $c
3161   1C25 DA            push d
3162   1C26 26 20 00      mov b, $20
3163   1C29 E7            pop d
3164   1C2A FD 3E         mov [d], bl
3165   1C2C             ;; break; 
3166   1C2C 0A 56 1C      jmp _switch47_exit ; case break
3167   1C2F             _switch47_case1:
3168   1C2F             ;; c = '*'; break; 
3169   1C2F 3B 0F 2C      mov d, _c ; $c
3170   1C32 DA            push d
3171   1C33 26 2A 00      mov b, $2a
3172   1C36 E7            pop d
3173   1C37 FD 3E         mov [d], bl
3174   1C39             ;; break; 
3175   1C39 0A 56 1C      jmp _switch47_exit ; case break
3176   1C3C             _switch47_case2:
3177   1C3C             ;; c = 'H'; break; 
3178   1C3C 3B 0F 2C      mov d, _c ; $c
3179   1C3F DA            push d
3180   1C40 26 48 00      mov b, $48
3181   1C43 E7            pop d
3182   1C44 FD 3E         mov [d], bl
3183   1C46             ;; break; 
3184   1C46 0A 56 1C      jmp _switch47_exit ; case break
3185   1C49             _switch47_case3:
3186   1C49             ;; c = 'T'; break; 
3187   1C49 3B 0F 2C      mov d, _c ; $c
3188   1C4C DA            push d
3189   1C4D 26 54 00      mov b, $54
3190   1C50 E7            pop d
3191   1C51 FD 3E         mov [d], bl
3192   1C53             ;; break; 
3193   1C53 0A 56 1C      jmp _switch47_exit ; case break
3194   1C56             _switch47_exit:
3195   1C56             ;; putchar(c); 
3196   1C56 3B 0F 2C      mov d, _c ; $c
3197   1C59 32            mov bl, [d]
3198   1C5A A7 00         mov bh, 0
3199   1C5C DD            push bl
3200   1C5D 07 7D 17      call putchar
3201   1C60 51 01 00      add sp, 1
3202   1C63             _for46_update:
3203   1C63 3B 01 2C      mov d, _x ; $x
3204   1C66 2A            mov b, [d]
3205   1C67 FD 77         inc b
3206   1C69 FD 43         mov [d], b
3207   1C6B 0A DA 1B      jmp _for46_cond
3208   1C6E             _for46_exit:
3209   1C6E             ;; putchar('\n'); 
3210   1C6E 26 0A 00      mov b, $a
3211   1C71 DD            push bl
3212   1C72 07 7D 17      call putchar
3213   1C75 51 01 00      add sp, 1
3214   1C78             _for45_update:
3215   1C78 3B 03 2C      mov d, _y ; $y
3216   1C7B 2A            mov b, [d]
3217   1C7C FD 77         inc b
3218   1C7E FD 43         mov [d], b
3219   1C80 0A BD 1B      jmp _for45_cond
3220   1C83             _for45_exit:
3221   1C83             ;; return; 
3222   1C83 F9            leave
3223   1C84 09            ret
3224   1C85             
3225   1C85             iterate:
3226   1C85 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3227   1C88             ;; for (y = 0; y < 20; ++y){ 
3228   1C88             _for48_init:
3229   1C88 3B 03 2C      mov d, _y ; $y
3230   1C8B DA            push d
3231   1C8C 26 00 00      mov b, $0
3232   1C8F E7            pop d
3233   1C90 FD 43         mov [d], b
3234   1C92             _for48_cond:
3235   1C92 3B 03 2C      mov d, _y ; $y
3236   1C95 2A            mov b, [d]
3237   1C96             ; START RELATIONAL
3238   1C96 D7            push a
3239   1C97 11            mov a, b
3240   1C98 26 14 00      mov b, $14
3241   1C9B B0            cmp a, b
3242   1C9C FD 73         slt ; < (signed)
3243   1C9E E4            pop a
3244   1C9F             ; END RELATIONAL
3245   1C9F C0 00 00      cmp b, 0
3246   1CA2 C6 F8 1E      je _for48_exit
3247   1CA5             _for48_block:
3248   1CA5             ;; for (x = 0; x < 40; ++x){ 
3249   1CA5             _for49_init:
3250   1CA5 3B 01 2C      mov d, _x ; $x
3251   1CA8 DA            push d
3252   1CA9 26 00 00      mov b, $0
3253   1CAC E7            pop d
3254   1CAD FD 43         mov [d], b
3255   1CAF             _for49_cond:
3256   1CAF 3B 01 2C      mov d, _x ; $x
3257   1CB2 2A            mov b, [d]
3258   1CB3             ; START RELATIONAL
3259   1CB3 D7            push a
3260   1CB4 11            mov a, b
3261   1CB5 26 28 00      mov b, $28
3262   1CB8 B0            cmp a, b
3263   1CB9 FD 73         slt ; < (signed)
3264   1CBB E4            pop a
3265   1CBC             ; END RELATIONAL
3266   1CBC C0 00 00      cmp b, 0
3267   1CBF C6 ED 1E      je _for49_exit
3268   1CC2             _for49_block:
3269   1CC2             ;; head_count = 0; 
3270   1CC2 3B 0D 2C      mov d, _head_count ; $head_count
3271   1CC5 DA            push d
3272   1CC6 26 00 00      mov b, $0
3273   1CC9 E7            pop d
3274   1CCA FD 43         mov [d], b
3275   1CCC             ;; for (dy = -1; dy <= 1; dy++){ 
3276   1CCC             _for50_init:
3277   1CCC 3B 07 2C      mov d, _dy ; $dy
3278   1CCF DA            push d
3279   1CD0 26 01 00      mov b, $1
3280   1CD3 FD 97         neg b
3281   1CD5 E7            pop d
3282   1CD6 FD 43         mov [d], b
3283   1CD8             _for50_cond:
3284   1CD8 3B 07 2C      mov d, _dy ; $dy
3285   1CDB 2A            mov b, [d]
3286   1CDC             ; START RELATIONAL
3287   1CDC D7            push a
3288   1CDD 11            mov a, b
3289   1CDE 26 01 00      mov b, $1
3290   1CE1 B0            cmp a, b
3291   1CE2 FD 74         sle ; <= (signed)
3292   1CE4 E4            pop a
3293   1CE5             ; END RELATIONAL
3294   1CE5 C0 00 00      cmp b, 0
3295   1CE8 C6 F6 1D      je _for50_exit
3296   1CEB             _for50_block:
3297   1CEB             ;; for (dx = -1; dx <= 1; dx++) { 
3298   1CEB             _for51_init:
3299   1CEB 3B 05 2C      mov d, _dx ; $dx
3300   1CEE DA            push d
3301   1CEF 26 01 00      mov b, $1
3302   1CF2 FD 97         neg b
3303   1CF4 E7            pop d
3304   1CF5 FD 43         mov [d], b
3305   1CF7             _for51_cond:
3306   1CF7 3B 05 2C      mov d, _dx ; $dx
3307   1CFA 2A            mov b, [d]
3308   1CFB             ; START RELATIONAL
3309   1CFB D7            push a
3310   1CFC 11            mov a, b
3311   1CFD 26 01 00      mov b, $1
3312   1D00 B0            cmp a, b
3313   1D01 FD 74         sle ; <= (signed)
3314   1D03 E4            pop a
3315   1D04             ; END RELATIONAL
3316   1D04 C0 00 00      cmp b, 0
3317   1D07 C6 E6 1D      je _for51_exit
3318   1D0A             _for51_block:
3319   1D0A             ;; if (dx == 0 && dy == 0) continue; 
3320   1D0A             _if52_cond:
3321   1D0A 3B 05 2C      mov d, _dx ; $dx
3322   1D0D 2A            mov b, [d]
3323   1D0E             ; START RELATIONAL
3324   1D0E D7            push a
3325   1D0F 11            mov a, b
3326   1D10 26 00 00      mov b, $0
3327   1D13 B0            cmp a, b
3328   1D14 FD 71         seq ; ==
3329   1D16 E4            pop a
3330   1D17             ; END RELATIONAL
3331   1D17             ; START LOGICAL AND
3332   1D17 D7            push a
3333   1D18 11            mov a, b
3334   1D19 3B 07 2C      mov d, _dy ; $dy
3335   1D1C 2A            mov b, [d]
3336   1D1D             ; START RELATIONAL
3337   1D1D D7            push a
3338   1D1E 11            mov a, b
3339   1D1F 26 00 00      mov b, $0
3340   1D22 B0            cmp a, b
3341   1D23 FD 71         seq ; ==
3342   1D25 E4            pop a
3343   1D26             ; END RELATIONAL
3344   1D26 FD A7         sand a, b
3345   1D28 E4            pop a
3346   1D29             ; END LOGICAL AND
3347   1D29 C0 00 00      cmp b, 0
3348   1D2C C6 35 1D      je _if52_exit
3349   1D2F             _if52_true:
3350   1D2F             ;; continue; 
3351   1D2F 0A D6 1D      jmp _for51_update ; for continue
3352   1D32 0A 35 1D      jmp _if52_exit
3353   1D35             _if52_exit:
3354   1D35             ;; nx = x + dx; 
3355   1D35 3B 09 2C      mov d, _nx ; $nx
3356   1D38 DA            push d
3357   1D39 3B 01 2C      mov d, _x ; $x
3358   1D3C 2A            mov b, [d]
3359   1D3D             ; START TERMS
3360   1D3D D7            push a
3361   1D3E 11            mov a, b
3362   1D3F 3B 05 2C      mov d, _dx ; $dx
3363   1D42 2A            mov b, [d]
3364   1D43 56            add b, a
3365   1D44 E4            pop a
3366   1D45             ; END TERMS
3367   1D45 E7            pop d
3368   1D46 FD 43         mov [d], b
3369   1D48             ;; ny = y + dy; 
3370   1D48 3B 0B 2C      mov d, _ny ; $ny
3371   1D4B DA            push d
3372   1D4C 3B 03 2C      mov d, _y ; $y
3373   1D4F 2A            mov b, [d]
3374   1D50             ; START TERMS
3375   1D50 D7            push a
3376   1D51 11            mov a, b
3377   1D52 3B 07 2C      mov d, _dy ; $dy
3378   1D55 2A            mov b, [d]
3379   1D56 56            add b, a
3380   1D57 E4            pop a
3381   1D58             ; END TERMS
3382   1D58 E7            pop d
3383   1D59 FD 43         mov [d], b
3384   1D5B             ;; if (nx >= 0 && nx < 40 && ny >= 0 && ny < 20 && grid[ny][nx] == ELECTRON_HEAD){ 
3385   1D5B             _if53_cond:
3386   1D5B 3B 09 2C      mov d, _nx ; $nx
3387   1D5E 2A            mov b, [d]
3388   1D5F             ; START RELATIONAL
3389   1D5F D7            push a
3390   1D60 11            mov a, b
3391   1D61 26 00 00      mov b, $0
3392   1D64 B0            cmp a, b
3393   1D65 FD 80         sge ; >=
3394   1D67 E4            pop a
3395   1D68             ; END RELATIONAL
3396   1D68             ; START LOGICAL AND
3397   1D68 D7            push a
3398   1D69 11            mov a, b
3399   1D6A 3B 09 2C      mov d, _nx ; $nx
3400   1D6D 2A            mov b, [d]
3401   1D6E             ; START RELATIONAL
3402   1D6E D7            push a
3403   1D6F 11            mov a, b
3404   1D70 26 28 00      mov b, $28
3405   1D73 B0            cmp a, b
3406   1D74 FD 73         slt ; < (signed)
3407   1D76 E4            pop a
3408   1D77             ; END RELATIONAL
3409   1D77 FD A7         sand a, b
3410   1D79 11            mov a, b
3411   1D7A 3B 0B 2C      mov d, _ny ; $ny
3412   1D7D 2A            mov b, [d]
3413   1D7E             ; START RELATIONAL
3414   1D7E D7            push a
3415   1D7F 11            mov a, b
3416   1D80 26 00 00      mov b, $0
3417   1D83 B0            cmp a, b
3418   1D84 FD 80         sge ; >=
3419   1D86 E4            pop a
3420   1D87             ; END RELATIONAL
3421   1D87 FD A7         sand a, b
3422   1D89 11            mov a, b
3423   1D8A 3B 0B 2C      mov d, _ny ; $ny
3424   1D8D 2A            mov b, [d]
3425   1D8E             ; START RELATIONAL
3426   1D8E D7            push a
3427   1D8F 11            mov a, b
3428   1D90 26 14 00      mov b, $14
3429   1D93 B0            cmp a, b
3430   1D94 FD 73         slt ; < (signed)
3431   1D96 E4            pop a
3432   1D97             ; END RELATIONAL
3433   1D97 FD A7         sand a, b
3434   1D99 11            mov a, b
3435   1D9A 3B 81 1F      mov d, _grid_data ; $grid
3436   1D9D D7            push a
3437   1D9E DA            push d
3438   1D9F 3B 0B 2C      mov d, _ny ; $ny
3439   1DA2 2A            mov b, [d]
3440   1DA3 E7            pop d
3441   1DA4 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
3442   1DA8 DA            push d
3443   1DA9 3B 09 2C      mov d, _nx ; $nx
3444   1DAC 2A            mov b, [d]
3445   1DAD E7            pop d
3446   1DAE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3447   1DB2 E4            pop a
3448   1DB3 2A            mov b, [d]
3449   1DB4             ; START RELATIONAL
3450   1DB4 D7            push a
3451   1DB5 11            mov a, b
3452   1DB6 26 02 00      mov b, 2; ELECTRON_HEAD
3453   1DB9 B0            cmp a, b
3454   1DBA FD 71         seq ; ==
3455   1DBC E4            pop a
3456   1DBD             ; END RELATIONAL
3457   1DBD FD A7         sand a, b
3458   1DBF E4            pop a
3459   1DC0             ; END LOGICAL AND
3460   1DC0 C0 00 00      cmp b, 0
3461   1DC3 C6 D6 1D      je _if53_exit
3462   1DC6             _if53_true:
3463   1DC6             ;; head_count++; 
3464   1DC6 3B 0D 2C      mov d, _head_count ; $head_count
3465   1DC9 2A            mov b, [d]
3466   1DCA FD 77         inc b
3467   1DCC 3B 0D 2C      mov d, _head_count ; $head_count
3468   1DCF FD 43         mov [d], b
3469   1DD1 FD 7D         dec b
3470   1DD3 0A D6 1D      jmp _if53_exit
3471   1DD6             _if53_exit:
3472   1DD6             _for51_update:
3473   1DD6 3B 05 2C      mov d, _dx ; $dx
3474   1DD9 2A            mov b, [d]
3475   1DDA FD 77         inc b
3476   1DDC 3B 05 2C      mov d, _dx ; $dx
3477   1DDF FD 43         mov [d], b
3478   1DE1 FD 7D         dec b
3479   1DE3 0A F7 1C      jmp _for51_cond
3480   1DE6             _for51_exit:
3481   1DE6             _for50_update:
3482   1DE6 3B 07 2C      mov d, _dy ; $dy
3483   1DE9 2A            mov b, [d]
3484   1DEA FD 77         inc b
3485   1DEC 3B 07 2C      mov d, _dy ; $dy
3486   1DEF FD 43         mov [d], b
3487   1DF1 FD 7D         dec b
3488   1DF3 0A D8 1C      jmp _for50_cond
3489   1DF6             _for50_exit:
3490   1DF6             ;; switch (grid[y][x]) { 
3491   1DF6             _switch54_expr:
3492   1DF6 3B 81 1F      mov d, _grid_data ; $grid
3493   1DF9 D7            push a
3494   1DFA DA            push d
3495   1DFB 3B 03 2C      mov d, _y ; $y
3496   1DFE 2A            mov b, [d]
3497   1DFF E7            pop d
3498   1E00 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
3499   1E04 DA            push d
3500   1E05 3B 01 2C      mov d, _x ; $x
3501   1E08 2A            mov b, [d]
3502   1E09 E7            pop d
3503   1E0A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3504   1E0E E4            pop a
3505   1E0F 2A            mov b, [d]
3506   1E10             _switch54_comparisons:
3507   1E10 C0 00 00      cmp b, 0
3508   1E13 C6 2B 1E      je _switch54_case0
3509   1E16 C0 01 00      cmp b, 1
3510   1E19 C6 4E 1E      je _switch54_case1
3511   1E1C C0 02 00      cmp b, 2
3512   1E1F C6 9C 1E      je _switch54_case2
3513   1E22 C0 03 00      cmp b, 3
3514   1E25 C6 BF 1E      je _switch54_case3
3515   1E28 0A E2 1E      jmp _switch54_exit
3516   1E2B             _switch54_case0:
3517   1E2B             ;; new_grid[y][x] = EMPTY; break; 
3518   1E2B 3B C1 25      mov d, _new_grid_data ; $new_grid
3519   1E2E D7            push a
3520   1E2F DA            push d
3521   1E30 3B 03 2C      mov d, _y ; $y
3522   1E33 2A            mov b, [d]
3523   1E34 E7            pop d
3524   1E35 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
3525   1E39 DA            push d
3526   1E3A 3B 01 2C      mov d, _x ; $x
3527   1E3D 2A            mov b, [d]
3528   1E3E E7            pop d
3529   1E3F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3530   1E43 E4            pop a
3531   1E44 DA            push d
3532   1E45 26 00 00      mov b, 0; EMPTY
3533   1E48 E7            pop d
3534   1E49 FD 43         mov [d], b
3535   1E4B             ;; break; 
3536   1E4B 0A E2 1E      jmp _switch54_exit ; case break
3537   1E4E             _switch54_case1:
3538   1E4E             ;; new_grid[y][x] = (head_count == 1 || head_count == 2) ? ELECTRON_HEAD : CONDUCTOR; break; 
3539   1E4E 3B C1 25      mov d, _new_grid_data ; $new_grid
3540   1E51 D7            push a
3541   1E52 DA            push d
3542   1E53 3B 03 2C      mov d, _y ; $y
3543   1E56 2A            mov b, [d]
3544   1E57 E7            pop d
3545   1E58 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
3546   1E5C DA            push d
3547   1E5D 3B 01 2C      mov d, _x ; $x
3548   1E60 2A            mov b, [d]
3549   1E61 E7            pop d
3550   1E62 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3551   1E66 E4            pop a
3552   1E67 DA            push d
3553   1E68             _ternary55_cond:
3554   1E68 3B 0D 2C      mov d, _head_count ; $head_count
3555   1E6B 2A            mov b, [d]
3556   1E6C             ; START RELATIONAL
3557   1E6C D7            push a
3558   1E6D 11            mov a, b
3559   1E6E 26 01 00      mov b, $1
3560   1E71 B0            cmp a, b
3561   1E72 FD 71         seq ; ==
3562   1E74 E4            pop a
3563   1E75             ; END RELATIONAL
3564   1E75             ; START LOGICAL OR
3565   1E75 D7            push a
3566   1E76 11            mov a, b
3567   1E77 3B 0D 2C      mov d, _head_count ; $head_count
3568   1E7A 2A            mov b, [d]
3569   1E7B             ; START RELATIONAL
3570   1E7B D7            push a
3571   1E7C 11            mov a, b
3572   1E7D 26 02 00      mov b, $2
3573   1E80 B0            cmp a, b
3574   1E81 FD 71         seq ; ==
3575   1E83 E4            pop a
3576   1E84             ; END RELATIONAL
3577   1E84 FD A8         sor a, b ; ||
3578   1E86 E4            pop a
3579   1E87             ; END LOGICAL OR
3580   1E87 C0 00 00      cmp b, 0
3581   1E8A C6 93 1E      je _ternary55_false
3582   1E8D             _ternary55_true:
3583   1E8D 26 02 00      mov b, 2; ELECTRON_HEAD
3584   1E90 0A 96 1E      jmp _ternary55_exit
3585   1E93             _ternary55_false:
3586   1E93 26 01 00      mov b, 1; CONDUCTOR
3587   1E96             _ternary55_exit:
3588   1E96 E7            pop d
3589   1E97 FD 43         mov [d], b
3590   1E99             ;; break; 
3591   1E99 0A E2 1E      jmp _switch54_exit ; case break
3592   1E9C             _switch54_case2:
3593   1E9C             ;; new_grid[y][x] = ELECTRON_TAIL; break; 
3594   1E9C 3B C1 25      mov d, _new_grid_data ; $new_grid
3595   1E9F D7            push a
3596   1EA0 DA            push d
3597   1EA1 3B 03 2C      mov d, _y ; $y
3598   1EA4 2A            mov b, [d]
3599   1EA5 E7            pop d
3600   1EA6 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
3601   1EAA DA            push d
3602   1EAB 3B 01 2C      mov d, _x ; $x
3603   1EAE 2A            mov b, [d]
3604   1EAF E7            pop d
3605   1EB0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3606   1EB4 E4            pop a
3607   1EB5 DA            push d
3608   1EB6 26 03 00      mov b, 3; ELECTRON_TAIL
3609   1EB9 E7            pop d
3610   1EBA FD 43         mov [d], b
3611   1EBC             ;; break; 
3612   1EBC 0A E2 1E      jmp _switch54_exit ; case break
3613   1EBF             _switch54_case3:
3614   1EBF             ;; new_grid[y][x] = CONDUCTOR; break; 
3615   1EBF 3B C1 25      mov d, _new_grid_data ; $new_grid
3616   1EC2 D7            push a
3617   1EC3 DA            push d
3618   1EC4 3B 03 2C      mov d, _y ; $y
3619   1EC7 2A            mov b, [d]
3620   1EC8 E7            pop d
3621   1EC9 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
3622   1ECD DA            push d
3623   1ECE 3B 01 2C      mov d, _x ; $x
3624   1ED1 2A            mov b, [d]
3625   1ED2 E7            pop d
3626   1ED3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3627   1ED7 E4            pop a
3628   1ED8 DA            push d
3629   1ED9 26 01 00      mov b, 1; CONDUCTOR
3630   1EDC E7            pop d
3631   1EDD FD 43         mov [d], b
3632   1EDF             ;; break; 
3633   1EDF 0A E2 1E      jmp _switch54_exit ; case break
3634   1EE2             _switch54_exit:
3635   1EE2             _for49_update:
3636   1EE2 3B 01 2C      mov d, _x ; $x
3637   1EE5 2A            mov b, [d]
3638   1EE6 FD 77         inc b
3639   1EE8 FD 43         mov [d], b
3640   1EEA 0A AF 1C      jmp _for49_cond
3641   1EED             _for49_exit:
3642   1EED             _for48_update:
3643   1EED 3B 03 2C      mov d, _y ; $y
3644   1EF0 2A            mov b, [d]
3645   1EF1 FD 77         inc b
3646   1EF3 FD 43         mov [d], b
3647   1EF5 0A 92 1C      jmp _for48_cond
3648   1EF8             _for48_exit:
3649   1EF8             ;; for (y = 0; y < 20; ++y) { 
3650   1EF8             _for56_init:
3651   1EF8 3B 03 2C      mov d, _y ; $y
3652   1EFB DA            push d
3653   1EFC 26 00 00      mov b, $0
3654   1EFF E7            pop d
3655   1F00 FD 43         mov [d], b
3656   1F02             _for56_cond:
3657   1F02 3B 03 2C      mov d, _y ; $y
3658   1F05 2A            mov b, [d]
3659   1F06             ; START RELATIONAL
3660   1F06 D7            push a
3661   1F07 11            mov a, b
3662   1F08 26 14 00      mov b, $14
3663   1F0B B0            cmp a, b
3664   1F0C FD 73         slt ; < (signed)
3665   1F0E E4            pop a
3666   1F0F             ; END RELATIONAL
3667   1F0F C0 00 00      cmp b, 0
3668   1F12 C6 7F 1F      je _for56_exit
3669   1F15             _for56_block:
3670   1F15             ;; for (x = 0; x < 40; ++x) { 
3671   1F15             _for57_init:
3672   1F15 3B 01 2C      mov d, _x ; $x
3673   1F18 DA            push d
3674   1F19 26 00 00      mov b, $0
3675   1F1C E7            pop d
3676   1F1D FD 43         mov [d], b
3677   1F1F             _for57_cond:
3678   1F1F 3B 01 2C      mov d, _x ; $x
3679   1F22 2A            mov b, [d]
3680   1F23             ; START RELATIONAL
3681   1F23 D7            push a
3682   1F24 11            mov a, b
3683   1F25 26 28 00      mov b, $28
3684   1F28 B0            cmp a, b
3685   1F29 FD 73         slt ; < (signed)
3686   1F2B E4            pop a
3687   1F2C             ; END RELATIONAL
3688   1F2C C0 00 00      cmp b, 0
3689   1F2F C6 74 1F      je _for57_exit
3690   1F32             _for57_block:
3691   1F32             ;; grid[y][x] = new_grid[y][x]; 
3692   1F32 3B 81 1F      mov d, _grid_data ; $grid
3693   1F35 D7            push a
3694   1F36 DA            push d
3695   1F37 3B 03 2C      mov d, _y ; $y
3696   1F3A 2A            mov b, [d]
3697   1F3B E7            pop d
3698   1F3C FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
3699   1F40 DA            push d
3700   1F41 3B 01 2C      mov d, _x ; $x
3701   1F44 2A            mov b, [d]
3702   1F45 E7            pop d
3703   1F46 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3704   1F4A E4            pop a
3705   1F4B DA            push d
3706   1F4C 3B C1 25      mov d, _new_grid_data ; $new_grid
3707   1F4F D7            push a
3708   1F50 DA            push d
3709   1F51 3B 03 2C      mov d, _y ; $y
3710   1F54 2A            mov b, [d]
3711   1F55 E7            pop d
3712   1F56 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
3713   1F5A DA            push d
3714   1F5B 3B 01 2C      mov d, _x ; $x
3715   1F5E 2A            mov b, [d]
3716   1F5F E7            pop d
3717   1F60 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3718   1F64 E4            pop a
3719   1F65 2A            mov b, [d]
3720   1F66 E7            pop d
3721   1F67 FD 43         mov [d], b
3722   1F69             _for57_update:
3723   1F69 3B 01 2C      mov d, _x ; $x
3724   1F6C 2A            mov b, [d]
3725   1F6D FD 77         inc b
3726   1F6F FD 43         mov [d], b
3727   1F71 0A 1F 1F      jmp _for57_cond
3728   1F74             _for57_exit:
3729   1F74             _for56_update:
3730   1F74 3B 03 2C      mov d, _y ; $y
3731   1F77 2A            mov b, [d]
3732   1F78 FD 77         inc b
3733   1F7A FD 43         mov [d], b
3734   1F7C 0A 02 1F      jmp _for56_cond
3735   1F7F             _for56_exit:
3736   1F7F             ;; return; 
3737   1F7F F9            leave
3738   1F80 09            ret
3739   1F81             ; --- END TEXT BLOCK
3740   1F81             
3741   1F81             ; --- BEGIN DATA BLOCK
3742   1F81 00 00 00 00 _grid_data: .fill 1600, 0
3742   1F85 00 00 00 00 
3742   1F89 00 00 00 00 
3742   1F8D 00 00 00 00 
3742   1F91 00 00 00 00 
3742   1F95 00 00 00 00 
3742   1F99 00 00 00 00 
3742   1F9D 00 00 00 00 
3742   1FA1 00 00 00 00 
3742   1FA5 00 00 00 00 
3742   1FA9 00 00 00 00 
3742   1FAD 00 00 00 00 
3742   1FB1 00 00 00 00 
3742   1FB5 00 00 00 00 
3742   1FB9 00 00 00 00 
3742   1FBD 00 00 00 00 
3742   1FC1 00 00 00 00 
3742   1FC5 00 00 00 00 
3742   1FC9 00 00 00 00 
3742   1FCD 00 00 00 00 
3742   1FD1 00 00 00 00 
3742   1FD5 00 00 00 00 
3742   1FD9 00 00 00 00 
3742   1FDD 00 00 00 00 
3742   1FE1 00 00 00 00 
3742   1FE5 00 00 00 00 
3742   1FE9 00 00 00 00 
3742   1FED 00 00 00 00 
3742   1FF1 00 00 00 00 
3742   1FF5 00 00 00 00 
3742   1FF9 00 00 00 00 
3742   1FFD 00 00 00 00 
3742   2001 00 00 00 00 
3742   2005 00 00 00 00 
3742   2009 00 00 00 00 
3742   200D 00 00 00 00 
3742   2011 00 00 00 00 
3742   2015 00 00 00 00 
3742   2019 00 00 00 00 
3742   201D 00 00 00 00 
3742   2021 00 00 00 00 
3742   2025 00 00 00 00 
3742   2029 00 00 00 00 
3742   202D 00 00 00 00 
3742   2031 00 00 00 00 
3742   2035 00 00 00 00 
3742   2039 00 00 00 00 
3742   203D 00 00 00 00 
3742   2041 00 00 00 00 
3742   2045 00 00 00 00 
3742   2049 00 00 00 00 
3742   204D 00 00 00 00 
3742   2051 00 00 00 00 
3742   2055 00 00 00 00 
3742   2059 00 00 00 00 
3742   205D 00 00 00 00 
3742   2061 00 00 00 00 
3742   2065 00 00 00 00 
3742   2069 00 00 00 00 
3742   206D 00 00 00 00 
3742   2071 00 00 00 00 
3742   2075 00 00 00 00 
3742   2079 00 00 00 00 
3742   207D 00 00 00 00 
3742   2081 00 00 00 00 
3742   2085 00 00 00 00 
3742   2089 00 00 00 00 
3742   208D 00 00 00 00 
3742   2091 00 00 00 00 
3742   2095 00 00 00 00 
3742   2099 00 00 00 00 
3742   209D 00 00 00 00 
3742   20A1 00 00 00 00 
3742   20A5 00 00 00 00 
3742   20A9 00 00 00 00 
3742   20AD 00 00 00 00 
3742   20B1 00 00 00 00 
3742   20B5 00 00 00 00 
3742   20B9 00 00 00 00 
3742   20BD 00 00 00 00 
3742   20C1 00 00 00 00 
3742   20C5 00 00 00 00 
3742   20C9 00 00 00 00 
3742   20CD 00 00 00 00 
3742   20D1 00 00 00 00 
3742   20D5 00 00 00 00 
3742   20D9 00 00 00 00 
3742   20DD 00 00 00 00 
3742   20E1 00 00 00 00 
3742   20E5 00 00 00 00 
3742   20E9 00 00 00 00 
3742   20ED 00 00 00 00 
3742   20F1 00 00 00 00 
3742   20F5 00 00 00 00 
3742   20F9 00 00 00 00 
3742   20FD 00 00 00 00 
3742   2101 00 00 00 00 
3742   2105 00 00 00 00 
3742   2109 00 00 00 00 
3742   210D 00 00 00 00 
3742   2111 00 00 00 00 
3742   2115 00 00 00 00 
3742   2119 00 00 00 00 
3742   211D 00 00 00 00 
3742   2121 00 00 00 00 
3742   2125 00 00 00 00 
3742   2129 00 00 00 00 
3742   212D 00 00 00 00 
3742   2131 00 00 00 00 
3742   2135 00 00 00 00 
3742   2139 00 00 00 00 
3742   213D 00 00 00 00 
3742   2141 00 00 00 00 
3742   2145 00 00 00 00 
3742   2149 00 00 00 00 
3742   214D 00 00 00 00 
3742   2151 00 00 00 00 
3742   2155 00 00 00 00 
3742   2159 00 00 00 00 
3742   215D 00 00 00 00 
3742   2161 00 00 00 00 
3742   2165 00 00 00 00 
3742   2169 00 00 00 00 
3742   216D 00 00 00 00 
3742   2171 00 00 00 00 
3742   2175 00 00 00 00 
3742   2179 00 00 00 00 
3742   217D 00 00 00 00 
3742   2181 00 00 00 00 
3742   2185 00 00 00 00 
3742   2189 00 00 00 00 
3742   218D 00 00 00 00 
3742   2191 00 00 00 00 
3742   2195 00 00 00 00 
3742   2199 00 00 00 00 
3742   219D 00 00 00 00 
3742   21A1 00 00 00 00 
3742   21A5 00 00 00 00 
3742   21A9 00 00 00 00 
3742   21AD 00 00 00 00 
3742   21B1 00 00 00 00 
3742   21B5 00 00 00 00 
3742   21B9 00 00 00 00 
3742   21BD 00 00 00 00 
3742   21C1 00 00 00 00 
3742   21C5 00 00 00 00 
3742   21C9 00 00 00 00 
3742   21CD 00 00 00 00 
3742   21D1 00 00 00 00 
3742   21D5 00 00 00 00 
3742   21D9 00 00 00 00 
3742   21DD 00 00 00 00 
3742   21E1 00 00 00 00 
3742   21E5 00 00 00 00 
3742   21E9 00 00 00 00 
3742   21ED 00 00 00 00 
3742   21F1 00 00 00 00 
3742   21F5 00 00 00 00 
3742   21F9 00 00 00 00 
3742   21FD 00 00 00 00 
3742   2201 00 00 00 00 
3742   2205 00 00 00 00 
3742   2209 00 00 00 00 
3742   220D 00 00 00 00 
3742   2211 00 00 00 00 
3742   2215 00 00 00 00 
3742   2219 00 00 00 00 
3742   221D 00 00 00 00 
3742   2221 00 00 00 00 
3742   2225 00 00 00 00 
3742   2229 00 00 00 00 
3742   222D 00 00 00 00 
3742   2231 00 00 00 00 
3742   2235 00 00 00 00 
3742   2239 00 00 00 00 
3742   223D 00 00 00 00 
3742   2241 00 00 00 00 
3742   2245 00 00 00 00 
3742   2249 00 00 00 00 
3742   224D 00 00 00 00 
3742   2251 00 00 00 00 
3742   2255 00 00 00 00 
3742   2259 00 00 00 00 
3742   225D 00 00 00 00 
3742   2261 00 00 00 00 
3742   2265 00 00 00 00 
3742   2269 00 00 00 00 
3742   226D 00 00 00 00 
3742   2271 00 00 00 00 
3742   2275 00 00 00 00 
3742   2279 00 00 00 00 
3742   227D 00 00 00 00 
3742   2281 00 00 00 00 
3742   2285 00 00 00 00 
3742   2289 00 00 00 00 
3742   228D 00 00 00 00 
3742   2291 00 00 00 00 
3742   2295 00 00 00 00 
3742   2299 00 00 00 00 
3742   229D 00 00 00 00 
3742   22A1 00 00 00 00 
3742   22A5 00 00 00 00 
3742   22A9 00 00 00 00 
3742   22AD 00 00 00 00 
3742   22B1 00 00 00 00 
3742   22B5 00 00 00 00 
3742   22B9 00 00 00 00 
3742   22BD 00 00 00 00 
3742   22C1 00 00 00 00 
3742   22C5 00 00 00 00 
3742   22C9 00 00 00 00 
3742   22CD 00 00 00 00 
3742   22D1 00 00 00 00 
3742   22D5 00 00 00 00 
3742   22D9 00 00 00 00 
3742   22DD 00 00 00 00 
3742   22E1 00 00 00 00 
3742   22E5 00 00 00 00 
3742   22E9 00 00 00 00 
3742   22ED 00 00 00 00 
3742   22F1 00 00 00 00 
3742   22F5 00 00 00 00 
3742   22F9 00 00 00 00 
3742   22FD 00 00 00 00 
3742   2301 00 00 00 00 
3742   2305 00 00 00 00 
3742   2309 00 00 00 00 
3742   230D 00 00 00 00 
3742   2311 00 00 00 00 
3742   2315 00 00 00 00 
3742   2319 00 00 00 00 
3742   231D 00 00 00 00 
3742   2321 00 00 00 00 
3742   2325 00 00 00 00 
3742   2329 00 00 00 00 
3742   232D 00 00 00 00 
3742   2331 00 00 00 00 
3742   2335 00 00 00 00 
3742   2339 00 00 00 00 
3742   233D 00 00 00 00 
3742   2341 00 00 00 00 
3742   2345 00 00 00 00 
3742   2349 00 00 00 00 
3742   234D 00 00 00 00 
3742   2351 00 00 00 00 
3742   2355 00 00 00 00 
3742   2359 00 00 00 00 
3742   235D 00 00 00 00 
3742   2361 00 00 00 00 
3742   2365 00 00 00 00 
3742   2369 00 00 00 00 
3742   236D 00 00 00 00 
3742   2371 00 00 00 00 
3742   2375 00 00 00 00 
3742   2379 00 00 00 00 
3742   237D 00 00 00 00 
3742   2381 00 00 00 00 
3742   2385 00 00 00 00 
3742   2389 00 00 00 00 
3742   238D 00 00 00 00 
3742   2391 00 00 00 00 
3742   2395 00 00 00 00 
3742   2399 00 00 00 00 
3742   239D 00 00 00 00 
3742   23A1 00 00 00 00 
3742   23A5 00 00 00 00 
3742   23A9 00 00 00 00 
3742   23AD 00 00 00 00 
3742   23B1 00 00 00 00 
3742   23B5 00 00 00 00 
3742   23B9 00 00 00 00 
3742   23BD 00 00 00 00 
3742   23C1 00 00 00 00 
3742   23C5 00 00 00 00 
3742   23C9 00 00 00 00 
3742   23CD 00 00 00 00 
3742   23D1 00 00 00 00 
3742   23D5 00 00 00 00 
3742   23D9 00 00 00 00 
3742   23DD 00 00 00 00 
3742   23E1 00 00 00 00 
3742   23E5 00 00 00 00 
3742   23E9 00 00 00 00 
3742   23ED 00 00 00 00 
3742   23F1 00 00 00 00 
3742   23F5 00 00 00 00 
3742   23F9 00 00 00 00 
3742   23FD 00 00 00 00 
3742   2401 00 00 00 00 
3742   2405 00 00 00 00 
3742   2409 00 00 00 00 
3742   240D 00 00 00 00 
3742   2411 00 00 00 00 
3742   2415 00 00 00 00 
3742   2419 00 00 00 00 
3742   241D 00 00 00 00 
3742   2421 00 00 00 00 
3742   2425 00 00 00 00 
3742   2429 00 00 00 00 
3742   242D 00 00 00 00 
3742   2431 00 00 00 00 
3742   2435 00 00 00 00 
3742   2439 00 00 00 00 
3742   243D 00 00 00 00 
3742   2441 00 00 00 00 
3742   2445 00 00 00 00 
3742   2449 00 00 00 00 
3742   244D 00 00 00 00 
3742   2451 00 00 00 00 
3742   2455 00 00 00 00 
3742   2459 00 00 00 00 
3742   245D 00 00 00 00 
3742   2461 00 00 00 00 
3742   2465 00 00 00 00 
3742   2469 00 00 00 00 
3742   246D 00 00 00 00 
3742   2471 00 00 00 00 
3742   2475 00 00 00 00 
3742   2479 00 00 00 00 
3742   247D 00 00 00 00 
3742   2481 00 00 00 00 
3742   2485 00 00 00 00 
3742   2489 00 00 00 00 
3742   248D 00 00 00 00 
3742   2491 00 00 00 00 
3742   2495 00 00 00 00 
3742   2499 00 00 00 00 
3742   249D 00 00 00 00 
3742   24A1 00 00 00 00 
3742   24A5 00 00 00 00 
3742   24A9 00 00 00 00 
3742   24AD 00 00 00 00 
3742   24B1 00 00 00 00 
3742   24B5 00 00 00 00 
3742   24B9 00 00 00 00 
3742   24BD 00 00 00 00 
3742   24C1 00 00 00 00 
3742   24C5 00 00 00 00 
3742   24C9 00 00 00 00 
3742   24CD 00 00 00 00 
3742   24D1 00 00 00 00 
3742   24D5 00 00 00 00 
3742   24D9 00 00 00 00 
3742   24DD 00 00 00 00 
3742   24E1 00 00 00 00 
3742   24E5 00 00 00 00 
3742   24E9 00 00 00 00 
3742   24ED 00 00 00 00 
3742   24F1 00 00 00 00 
3742   24F5 00 00 00 00 
3742   24F9 00 00 00 00 
3742   24FD 00 00 00 00 
3742   2501 00 00 00 00 
3742   2505 00 00 00 00 
3742   2509 00 00 00 00 
3742   250D 00 00 00 00 
3742   2511 00 00 00 00 
3742   2515 00 00 00 00 
3742   2519 00 00 00 00 
3742   251D 00 00 00 00 
3742   2521 00 00 00 00 
3742   2525 00 00 00 00 
3742   2529 00 00 00 00 
3742   252D 00 00 00 00 
3742   2531 00 00 00 00 
3742   2535 00 00 00 00 
3742   2539 00 00 00 00 
3742   253D 00 00 00 00 
3742   2541 00 00 00 00 
3742   2545 00 00 00 00 
3742   2549 00 00 00 00 
3742   254D 00 00 00 00 
3742   2551 00 00 00 00 
3742   2555 00 00 00 00 
3742   2559 00 00 00 00 
3742   255D 00 00 00 00 
3742   2561 00 00 00 00 
3742   2565 00 00 00 00 
3742   2569 00 00 00 00 
3742   256D 00 00 00 00 
3742   2571 00 00 00 00 
3742   2575 00 00 00 00 
3742   2579 00 00 00 00 
3742   257D 00 00 00 00 
3742   2581 00 00 00 00 
3742   2585 00 00 00 00 
3742   2589 00 00 00 00 
3742   258D 00 00 00 00 
3742   2591 00 00 00 00 
3742   2595 00 00 00 00 
3742   2599 00 00 00 00 
3742   259D 00 00 00 00 
3742   25A1 00 00 00 00 
3742   25A5 00 00 00 00 
3742   25A9 00 00 00 00 
3742   25AD 00 00 00 00 
3742   25B1 00 00 00 00 
3742   25B5 00 00 00 00 
3742   25B9 00 00 00 00 
3742   25BD 00 00 00 00 
3743   25C1 00 00 00 00 _new_grid_data: .fill 1600, 0
3743   25C5 00 00 00 00 
3743   25C9 00 00 00 00 
3743   25CD 00 00 00 00 
3743   25D1 00 00 00 00 
3743   25D5 00 00 00 00 
3743   25D9 00 00 00 00 
3743   25DD 00 00 00 00 
3743   25E1 00 00 00 00 
3743   25E5 00 00 00 00 
3743   25E9 00 00 00 00 
3743   25ED 00 00 00 00 
3743   25F1 00 00 00 00 
3743   25F5 00 00 00 00 
3743   25F9 00 00 00 00 
3743   25FD 00 00 00 00 
3743   2601 00 00 00 00 
3743   2605 00 00 00 00 
3743   2609 00 00 00 00 
3743   260D 00 00 00 00 
3743   2611 00 00 00 00 
3743   2615 00 00 00 00 
3743   2619 00 00 00 00 
3743   261D 00 00 00 00 
3743   2621 00 00 00 00 
3743   2625 00 00 00 00 
3743   2629 00 00 00 00 
3743   262D 00 00 00 00 
3743   2631 00 00 00 00 
3743   2635 00 00 00 00 
3743   2639 00 00 00 00 
3743   263D 00 00 00 00 
3743   2641 00 00 00 00 
3743   2645 00 00 00 00 
3743   2649 00 00 00 00 
3743   264D 00 00 00 00 
3743   2651 00 00 00 00 
3743   2655 00 00 00 00 
3743   2659 00 00 00 00 
3743   265D 00 00 00 00 
3743   2661 00 00 00 00 
3743   2665 00 00 00 00 
3743   2669 00 00 00 00 
3743   266D 00 00 00 00 
3743   2671 00 00 00 00 
3743   2675 00 00 00 00 
3743   2679 00 00 00 00 
3743   267D 00 00 00 00 
3743   2681 00 00 00 00 
3743   2685 00 00 00 00 
3743   2689 00 00 00 00 
3743   268D 00 00 00 00 
3743   2691 00 00 00 00 
3743   2695 00 00 00 00 
3743   2699 00 00 00 00 
3743   269D 00 00 00 00 
3743   26A1 00 00 00 00 
3743   26A5 00 00 00 00 
3743   26A9 00 00 00 00 
3743   26AD 00 00 00 00 
3743   26B1 00 00 00 00 
3743   26B5 00 00 00 00 
3743   26B9 00 00 00 00 
3743   26BD 00 00 00 00 
3743   26C1 00 00 00 00 
3743   26C5 00 00 00 00 
3743   26C9 00 00 00 00 
3743   26CD 00 00 00 00 
3743   26D1 00 00 00 00 
3743   26D5 00 00 00 00 
3743   26D9 00 00 00 00 
3743   26DD 00 00 00 00 
3743   26E1 00 00 00 00 
3743   26E5 00 00 00 00 
3743   26E9 00 00 00 00 
3743   26ED 00 00 00 00 
3743   26F1 00 00 00 00 
3743   26F5 00 00 00 00 
3743   26F9 00 00 00 00 
3743   26FD 00 00 00 00 
3743   2701 00 00 00 00 
3743   2705 00 00 00 00 
3743   2709 00 00 00 00 
3743   270D 00 00 00 00 
3743   2711 00 00 00 00 
3743   2715 00 00 00 00 
3743   2719 00 00 00 00 
3743   271D 00 00 00 00 
3743   2721 00 00 00 00 
3743   2725 00 00 00 00 
3743   2729 00 00 00 00 
3743   272D 00 00 00 00 
3743   2731 00 00 00 00 
3743   2735 00 00 00 00 
3743   2739 00 00 00 00 
3743   273D 00 00 00 00 
3743   2741 00 00 00 00 
3743   2745 00 00 00 00 
3743   2749 00 00 00 00 
3743   274D 00 00 00 00 
3743   2751 00 00 00 00 
3743   2755 00 00 00 00 
3743   2759 00 00 00 00 
3743   275D 00 00 00 00 
3743   2761 00 00 00 00 
3743   2765 00 00 00 00 
3743   2769 00 00 00 00 
3743   276D 00 00 00 00 
3743   2771 00 00 00 00 
3743   2775 00 00 00 00 
3743   2779 00 00 00 00 
3743   277D 00 00 00 00 
3743   2781 00 00 00 00 
3743   2785 00 00 00 00 
3743   2789 00 00 00 00 
3743   278D 00 00 00 00 
3743   2791 00 00 00 00 
3743   2795 00 00 00 00 
3743   2799 00 00 00 00 
3743   279D 00 00 00 00 
3743   27A1 00 00 00 00 
3743   27A5 00 00 00 00 
3743   27A9 00 00 00 00 
3743   27AD 00 00 00 00 
3743   27B1 00 00 00 00 
3743   27B5 00 00 00 00 
3743   27B9 00 00 00 00 
3743   27BD 00 00 00 00 
3743   27C1 00 00 00 00 
3743   27C5 00 00 00 00 
3743   27C9 00 00 00 00 
3743   27CD 00 00 00 00 
3743   27D1 00 00 00 00 
3743   27D5 00 00 00 00 
3743   27D9 00 00 00 00 
3743   27DD 00 00 00 00 
3743   27E1 00 00 00 00 
3743   27E5 00 00 00 00 
3743   27E9 00 00 00 00 
3743   27ED 00 00 00 00 
3743   27F1 00 00 00 00 
3743   27F5 00 00 00 00 
3743   27F9 00 00 00 00 
3743   27FD 00 00 00 00 
3743   2801 00 00 00 00 
3743   2805 00 00 00 00 
3743   2809 00 00 00 00 
3743   280D 00 00 00 00 
3743   2811 00 00 00 00 
3743   2815 00 00 00 00 
3743   2819 00 00 00 00 
3743   281D 00 00 00 00 
3743   2821 00 00 00 00 
3743   2825 00 00 00 00 
3743   2829 00 00 00 00 
3743   282D 00 00 00 00 
3743   2831 00 00 00 00 
3743   2835 00 00 00 00 
3743   2839 00 00 00 00 
3743   283D 00 00 00 00 
3743   2841 00 00 00 00 
3743   2845 00 00 00 00 
3743   2849 00 00 00 00 
3743   284D 00 00 00 00 
3743   2851 00 00 00 00 
3743   2855 00 00 00 00 
3743   2859 00 00 00 00 
3743   285D 00 00 00 00 
3743   2861 00 00 00 00 
3743   2865 00 00 00 00 
3743   2869 00 00 00 00 
3743   286D 00 00 00 00 
3743   2871 00 00 00 00 
3743   2875 00 00 00 00 
3743   2879 00 00 00 00 
3743   287D 00 00 00 00 
3743   2881 00 00 00 00 
3743   2885 00 00 00 00 
3743   2889 00 00 00 00 
3743   288D 00 00 00 00 
3743   2891 00 00 00 00 
3743   2895 00 00 00 00 
3743   2899 00 00 00 00 
3743   289D 00 00 00 00 
3743   28A1 00 00 00 00 
3743   28A5 00 00 00 00 
3743   28A9 00 00 00 00 
3743   28AD 00 00 00 00 
3743   28B1 00 00 00 00 
3743   28B5 00 00 00 00 
3743   28B9 00 00 00 00 
3743   28BD 00 00 00 00 
3743   28C1 00 00 00 00 
3743   28C5 00 00 00 00 
3743   28C9 00 00 00 00 
3743   28CD 00 00 00 00 
3743   28D1 00 00 00 00 
3743   28D5 00 00 00 00 
3743   28D9 00 00 00 00 
3743   28DD 00 00 00 00 
3743   28E1 00 00 00 00 
3743   28E5 00 00 00 00 
3743   28E9 00 00 00 00 
3743   28ED 00 00 00 00 
3743   28F1 00 00 00 00 
3743   28F5 00 00 00 00 
3743   28F9 00 00 00 00 
3743   28FD 00 00 00 00 
3743   2901 00 00 00 00 
3743   2905 00 00 00 00 
3743   2909 00 00 00 00 
3743   290D 00 00 00 00 
3743   2911 00 00 00 00 
3743   2915 00 00 00 00 
3743   2919 00 00 00 00 
3743   291D 00 00 00 00 
3743   2921 00 00 00 00 
3743   2925 00 00 00 00 
3743   2929 00 00 00 00 
3743   292D 00 00 00 00 
3743   2931 00 00 00 00 
3743   2935 00 00 00 00 
3743   2939 00 00 00 00 
3743   293D 00 00 00 00 
3743   2941 00 00 00 00 
3743   2945 00 00 00 00 
3743   2949 00 00 00 00 
3743   294D 00 00 00 00 
3743   2951 00 00 00 00 
3743   2955 00 00 00 00 
3743   2959 00 00 00 00 
3743   295D 00 00 00 00 
3743   2961 00 00 00 00 
3743   2965 00 00 00 00 
3743   2969 00 00 00 00 
3743   296D 00 00 00 00 
3743   2971 00 00 00 00 
3743   2975 00 00 00 00 
3743   2979 00 00 00 00 
3743   297D 00 00 00 00 
3743   2981 00 00 00 00 
3743   2985 00 00 00 00 
3743   2989 00 00 00 00 
3743   298D 00 00 00 00 
3743   2991 00 00 00 00 
3743   2995 00 00 00 00 
3743   2999 00 00 00 00 
3743   299D 00 00 00 00 
3743   29A1 00 00 00 00 
3743   29A5 00 00 00 00 
3743   29A9 00 00 00 00 
3743   29AD 00 00 00 00 
3743   29B1 00 00 00 00 
3743   29B5 00 00 00 00 
3743   29B9 00 00 00 00 
3743   29BD 00 00 00 00 
3743   29C1 00 00 00 00 
3743   29C5 00 00 00 00 
3743   29C9 00 00 00 00 
3743   29CD 00 00 00 00 
3743   29D1 00 00 00 00 
3743   29D5 00 00 00 00 
3743   29D9 00 00 00 00 
3743   29DD 00 00 00 00 
3743   29E1 00 00 00 00 
3743   29E5 00 00 00 00 
3743   29E9 00 00 00 00 
3743   29ED 00 00 00 00 
3743   29F1 00 00 00 00 
3743   29F5 00 00 00 00 
3743   29F9 00 00 00 00 
3743   29FD 00 00 00 00 
3743   2A01 00 00 00 00 
3743   2A05 00 00 00 00 
3743   2A09 00 00 00 00 
3743   2A0D 00 00 00 00 
3743   2A11 00 00 00 00 
3743   2A15 00 00 00 00 
3743   2A19 00 00 00 00 
3743   2A1D 00 00 00 00 
3743   2A21 00 00 00 00 
3743   2A25 00 00 00 00 
3743   2A29 00 00 00 00 
3743   2A2D 00 00 00 00 
3743   2A31 00 00 00 00 
3743   2A35 00 00 00 00 
3743   2A39 00 00 00 00 
3743   2A3D 00 00 00 00 
3743   2A41 00 00 00 00 
3743   2A45 00 00 00 00 
3743   2A49 00 00 00 00 
3743   2A4D 00 00 00 00 
3743   2A51 00 00 00 00 
3743   2A55 00 00 00 00 
3743   2A59 00 00 00 00 
3743   2A5D 00 00 00 00 
3743   2A61 00 00 00 00 
3743   2A65 00 00 00 00 
3743   2A69 00 00 00 00 
3743   2A6D 00 00 00 00 
3743   2A71 00 00 00 00 
3743   2A75 00 00 00 00 
3743   2A79 00 00 00 00 
3743   2A7D 00 00 00 00 
3743   2A81 00 00 00 00 
3743   2A85 00 00 00 00 
3743   2A89 00 00 00 00 
3743   2A8D 00 00 00 00 
3743   2A91 00 00 00 00 
3743   2A95 00 00 00 00 
3743   2A99 00 00 00 00 
3743   2A9D 00 00 00 00 
3743   2AA1 00 00 00 00 
3743   2AA5 00 00 00 00 
3743   2AA9 00 00 00 00 
3743   2AAD 00 00 00 00 
3743   2AB1 00 00 00 00 
3743   2AB5 00 00 00 00 
3743   2AB9 00 00 00 00 
3743   2ABD 00 00 00 00 
3743   2AC1 00 00 00 00 
3743   2AC5 00 00 00 00 
3743   2AC9 00 00 00 00 
3743   2ACD 00 00 00 00 
3743   2AD1 00 00 00 00 
3743   2AD5 00 00 00 00 
3743   2AD9 00 00 00 00 
3743   2ADD 00 00 00 00 
3743   2AE1 00 00 00 00 
3743   2AE5 00 00 00 00 
3743   2AE9 00 00 00 00 
3743   2AED 00 00 00 00 
3743   2AF1 00 00 00 00 
3743   2AF5 00 00 00 00 
3743   2AF9 00 00 00 00 
3743   2AFD 00 00 00 00 
3743   2B01 00 00 00 00 
3743   2B05 00 00 00 00 
3743   2B09 00 00 00 00 
3743   2B0D 00 00 00 00 
3743   2B11 00 00 00 00 
3743   2B15 00 00 00 00 
3743   2B19 00 00 00 00 
3743   2B1D 00 00 00 00 
3743   2B21 00 00 00 00 
3743   2B25 00 00 00 00 
3743   2B29 00 00 00 00 
3743   2B2D 00 00 00 00 
3743   2B31 00 00 00 00 
3743   2B35 00 00 00 00 
3743   2B39 00 00 00 00 
3743   2B3D 00 00 00 00 
3743   2B41 00 00 00 00 
3743   2B45 00 00 00 00 
3743   2B49 00 00 00 00 
3743   2B4D 00 00 00 00 
3743   2B51 00 00 00 00 
3743   2B55 00 00 00 00 
3743   2B59 00 00 00 00 
3743   2B5D 00 00 00 00 
3743   2B61 00 00 00 00 
3743   2B65 00 00 00 00 
3743   2B69 00 00 00 00 
3743   2B6D 00 00 00 00 
3743   2B71 00 00 00 00 
3743   2B75 00 00 00 00 
3743   2B79 00 00 00 00 
3743   2B7D 00 00 00 00 
3743   2B81 00 00 00 00 
3743   2B85 00 00 00 00 
3743   2B89 00 00 00 00 
3743   2B8D 00 00 00 00 
3743   2B91 00 00 00 00 
3743   2B95 00 00 00 00 
3743   2B99 00 00 00 00 
3743   2B9D 00 00 00 00 
3743   2BA1 00 00 00 00 
3743   2BA5 00 00 00 00 
3743   2BA9 00 00 00 00 
3743   2BAD 00 00 00 00 
3743   2BB1 00 00 00 00 
3743   2BB5 00 00 00 00 
3743   2BB9 00 00 00 00 
3743   2BBD 00 00 00 00 
3743   2BC1 00 00 00 00 
3743   2BC5 00 00 00 00 
3743   2BC9 00 00 00 00 
3743   2BCD 00 00 00 00 
3743   2BD1 00 00 00 00 
3743   2BD5 00 00 00 00 
3743   2BD9 00 00 00 00 
3743   2BDD 00 00 00 00 
3743   2BE1 00 00 00 00 
3743   2BE5 00 00 00 00 
3743   2BE9 00 00 00 00 
3743   2BED 00 00 00 00 
3743   2BF1 00 00 00 00 
3743   2BF5 00 00 00 00 
3743   2BF9 00 00 00 00 
3743   2BFD 00 00 00 00 
3744   2C01 00 00       _x: .fill 2, 0
3745   2C03 00 00       _y: .fill 2, 0
3746   2C05 00 00       _dx: .fill 2, 0
3747   2C07 00 00       _dy: .fill 2, 0
3748   2C09 00 00       _nx: .fill 2, 0
3749   2C0B 00 00       _ny: .fill 2, 0
3750   2C0D 00 00       _head_count: .fill 2, 0
3751   2C0F 00          _c: .fill 1, 0
3752   2C10 55 6E 65 78 _s0: .db "Unexpected format in printf.", 0
3752   2C14 70 65 63 74 
3752   2C18 65 64 20 66 
3752   2C1C 6F 72 6D 61 
3752   2C20 74 20 69 6E 
3752   2C24 20 70 72 69 
3752   2C28 6E 74 66 2E 
3752   2C2C 00 
3753   2C2D 45 72 72 6F _s1: .db "Error: Unknown argument type.\n", 0
3753   2C31 72 3A 20 55 
3753   2C35 6E 6B 6E 6F 
3753   2C39 77 6E 20 61 
3753   2C3D 72 67 75 6D 
3753   2C41 65 6E 74 20 
3753   2C45 74 79 70 65 
3753   2C49 2E 0A 00 
3754   2C4C 1B 5B 32 4A _s2: .db "\033[2J\033[H", 0
3754   2C50 1B 5B 48 00 
3755   2C54             
3756   2C54 56 2C       _heap_top: .dw _heap
3757   2C56 00          _heap: .db 0
3758   2C57             ; --- END DATA BLOCK
3759   2C57             
3760   2C57             .end
tasm: Number of errors = 0
