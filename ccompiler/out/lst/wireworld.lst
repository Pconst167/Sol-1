0001   0000             ; --- FILENAME: programs/wireworld.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int i; 
0011   0408 52 02 00      sub sp, 2
0012   040B             ; grid[5][5] = CONDUCTOR; 
0013   040B 3B EF 24      mov d, _grid_data ; $grid
0014   040E D7            push a
0015   040F DA            push d
0016   0410 26 05 00      mov b, $5
0017   0413 E7            pop d
0018   0414 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0019   0418 DA            push d
0020   0419 26 05 00      mov b, $5
0021   041C E7            pop d
0022   041D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0023   0421 E4            pop a
0024   0422 DA            push d
0025   0423 26 01 00      mov b, 1; CONDUCTOR
0026   0426 E7            pop d
0027   0427 FD 43         mov [d], b
0028   0429             ; grid[6][5] = ELECTRON_HEAD; 
0029   0429 3B EF 24      mov d, _grid_data ; $grid
0030   042C D7            push a
0031   042D DA            push d
0032   042E 26 06 00      mov b, $6
0033   0431 E7            pop d
0034   0432 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0035   0436 DA            push d
0036   0437 26 05 00      mov b, $5
0037   043A E7            pop d
0038   043B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0039   043F E4            pop a
0040   0440 DA            push d
0041   0441 26 02 00      mov b, 2; ELECTRON_HEAD
0042   0444 E7            pop d
0043   0445 FD 43         mov [d], b
0044   0447             ; grid[7][5] = CONDUCTOR; 
0045   0447 3B EF 24      mov d, _grid_data ; $grid
0046   044A D7            push a
0047   044B DA            push d
0048   044C 26 07 00      mov b, $7
0049   044F E7            pop d
0050   0450 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0051   0454 DA            push d
0052   0455 26 05 00      mov b, $5
0053   0458 E7            pop d
0054   0459 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0055   045D E4            pop a
0056   045E DA            push d
0057   045F 26 01 00      mov b, 1; CONDUCTOR
0058   0462 E7            pop d
0059   0463 FD 43         mov [d], b
0060   0465             ; grid[6][6] = ELECTRON_TAIL; 
0061   0465 3B EF 24      mov d, _grid_data ; $grid
0062   0468 D7            push a
0063   0469 DA            push d
0064   046A 26 06 00      mov b, $6
0065   046D E7            pop d
0066   046E FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0067   0472 DA            push d
0068   0473 26 06 00      mov b, $6
0069   0476 E7            pop d
0070   0477 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0071   047B E4            pop a
0072   047C DA            push d
0073   047D 26 03 00      mov b, 3; ELECTRON_TAIL
0074   0480 E7            pop d
0075   0481 FD 43         mov [d], b
0076   0483             ; grid[6][7] = CONDUCTOR; 
0077   0483 3B EF 24      mov d, _grid_data ; $grid
0078   0486 D7            push a
0079   0487 DA            push d
0080   0488 26 06 00      mov b, $6
0081   048B E7            pop d
0082   048C FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0083   0490 DA            push d
0084   0491 26 07 00      mov b, $7
0085   0494 E7            pop d
0086   0495 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0087   0499 E4            pop a
0088   049A DA            push d
0089   049B 26 01 00      mov b, 1; CONDUCTOR
0090   049E E7            pop d
0091   049F FD 43         mov [d], b
0092   04A1             ; grid[5][10] = CONDUCTOR; 
0093   04A1 3B EF 24      mov d, _grid_data ; $grid
0094   04A4 D7            push a
0095   04A5 DA            push d
0096   04A6 26 05 00      mov b, $5
0097   04A9 E7            pop d
0098   04AA FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0099   04AE DA            push d
0100   04AF 26 0A 00      mov b, $a
0101   04B2 E7            pop d
0102   04B3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0103   04B7 E4            pop a
0104   04B8 DA            push d
0105   04B9 26 01 00      mov b, 1; CONDUCTOR
0106   04BC E7            pop d
0107   04BD FD 43         mov [d], b
0108   04BF             ; grid[6][10] = ELECTRON_HEAD; 
0109   04BF 3B EF 24      mov d, _grid_data ; $grid
0110   04C2 D7            push a
0111   04C3 DA            push d
0112   04C4 26 06 00      mov b, $6
0113   04C7 E7            pop d
0114   04C8 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0115   04CC DA            push d
0116   04CD 26 0A 00      mov b, $a
0117   04D0 E7            pop d
0118   04D1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0119   04D5 E4            pop a
0120   04D6 DA            push d
0121   04D7 26 02 00      mov b, 2; ELECTRON_HEAD
0122   04DA E7            pop d
0123   04DB FD 43         mov [d], b
0124   04DD             ; grid[7][10] = CONDUCTOR; 
0125   04DD 3B EF 24      mov d, _grid_data ; $grid
0126   04E0 D7            push a
0127   04E1 DA            push d
0128   04E2 26 07 00      mov b, $7
0129   04E5 E7            pop d
0130   04E6 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0131   04EA DA            push d
0132   04EB 26 0A 00      mov b, $a
0133   04EE E7            pop d
0134   04EF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0135   04F3 E4            pop a
0136   04F4 DA            push d
0137   04F5 26 01 00      mov b, 1; CONDUCTOR
0138   04F8 E7            pop d
0139   04F9 FD 43         mov [d], b
0140   04FB             ; grid[6][11] = ELECTRON_TAIL; 
0141   04FB 3B EF 24      mov d, _grid_data ; $grid
0142   04FE D7            push a
0143   04FF DA            push d
0144   0500 26 06 00      mov b, $6
0145   0503 E7            pop d
0146   0504 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0147   0508 DA            push d
0148   0509 26 0B 00      mov b, $b
0149   050C E7            pop d
0150   050D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0151   0511 E4            pop a
0152   0512 DA            push d
0153   0513 26 03 00      mov b, 3; ELECTRON_TAIL
0154   0516 E7            pop d
0155   0517 FD 43         mov [d], b
0156   0519             ; grid[6][12] = CONDUCTOR; 
0157   0519 3B EF 24      mov d, _grid_data ; $grid
0158   051C D7            push a
0159   051D DA            push d
0160   051E 26 06 00      mov b, $6
0161   0521 E7            pop d
0162   0522 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0163   0526 DA            push d
0164   0527 26 0C 00      mov b, $c
0165   052A E7            pop d
0166   052B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0167   052F E4            pop a
0168   0530 DA            push d
0169   0531 26 01 00      mov b, 1; CONDUCTOR
0170   0534 E7            pop d
0171   0535 FD 43         mov [d], b
0172   0537             ; for (i = 8; i <= 14; i++) { 
0173   0537             _for1_init:
0174   0537 FA FF FF      lea d, [bp + -1] ; $i
0175   053A DA            push d
0176   053B 26 08 00      mov b, $8
0177   053E E7            pop d
0178   053F FD 43         mov [d], b
0179   0541             _for1_cond:
0180   0541 FA FF FF      lea d, [bp + -1] ; $i
0181   0544 2A            mov b, [d]
0182   0545             ; --- START RELATIONAL
0183   0545 D7            push a
0184   0546 11            mov a, b
0185   0547 26 0E 00      mov b, $e
0186   054A B0            cmp a, b
0187   054B FD 74         sle ; <= (signed)
0188   054D E4            pop a
0189   054E             ; --- END RELATIONAL
0190   054E C0 00 00      cmp b, 0
0191   0551 C6 83 05      je _for1_exit
0192   0554             _for1_block:
0193   0554             ; grid[7][i] = CONDUCTOR; 
0194   0554 3B EF 24      mov d, _grid_data ; $grid
0195   0557 D7            push a
0196   0558 DA            push d
0197   0559 26 07 00      mov b, $7
0198   055C E7            pop d
0199   055D FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0200   0561 DA            push d
0201   0562 FA FF FF      lea d, [bp + -1] ; $i
0202   0565 2A            mov b, [d]
0203   0566 E7            pop d
0204   0567 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0205   056B E4            pop a
0206   056C DA            push d
0207   056D 26 01 00      mov b, 1; CONDUCTOR
0208   0570 E7            pop d
0209   0571 FD 43         mov [d], b
0210   0573             _for1_update:
0211   0573 FA FF FF      lea d, [bp + -1] ; $i
0212   0576 2A            mov b, [d]
0213   0577 FD 77         inc b
0214   0579 FA FF FF      lea d, [bp + -1] ; $i
0215   057C FD 43         mov [d], b
0216   057E FD 7D         dec b
0217   0580 0A 41 05      jmp _for1_cond
0218   0583             _for1_exit:
0219   0583             ; grid[7][15] = CONDUCTOR; 
0220   0583 3B EF 24      mov d, _grid_data ; $grid
0221   0586 D7            push a
0222   0587 DA            push d
0223   0588 26 07 00      mov b, $7
0224   058B E7            pop d
0225   058C FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0226   0590 DA            push d
0227   0591 26 0F 00      mov b, $f
0228   0594 E7            pop d
0229   0595 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0230   0599 E4            pop a
0231   059A DA            push d
0232   059B 26 01 00      mov b, 1; CONDUCTOR
0233   059E E7            pop d
0234   059F FD 43         mov [d], b
0235   05A1             ; grid[6][15] = ELECTRON_TAIL; 
0236   05A1 3B EF 24      mov d, _grid_data ; $grid
0237   05A4 D7            push a
0238   05A5 DA            push d
0239   05A6 26 06 00      mov b, $6
0240   05A9 E7            pop d
0241   05AA FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0242   05AE DA            push d
0243   05AF 26 0F 00      mov b, $f
0244   05B2 E7            pop d
0245   05B3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0246   05B7 E4            pop a
0247   05B8 DA            push d
0248   05B9 26 03 00      mov b, 3; ELECTRON_TAIL
0249   05BC E7            pop d
0250   05BD FD 43         mov [d], b
0251   05BF             ; grid[8][15] = ELECTRON_TAIL; 
0252   05BF 3B EF 24      mov d, _grid_data ; $grid
0253   05C2 D7            push a
0254   05C3 DA            push d
0255   05C4 26 08 00      mov b, $8
0256   05C7 E7            pop d
0257   05C8 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0258   05CC DA            push d
0259   05CD 26 0F 00      mov b, $f
0260   05D0 E7            pop d
0261   05D1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0262   05D5 E4            pop a
0263   05D6 DA            push d
0264   05D7 26 03 00      mov b, 3; ELECTRON_TAIL
0265   05DA E7            pop d
0266   05DB FD 43         mov [d], b
0267   05DD             ; grid[6][16] = CONDUCTOR; 
0268   05DD 3B EF 24      mov d, _grid_data ; $grid
0269   05E0 D7            push a
0270   05E1 DA            push d
0271   05E2 26 06 00      mov b, $6
0272   05E5 E7            pop d
0273   05E6 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0274   05EA DA            push d
0275   05EB 26 10 00      mov b, $10
0276   05EE E7            pop d
0277   05EF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0278   05F3 E4            pop a
0279   05F4 DA            push d
0280   05F5 26 01 00      mov b, 1; CONDUCTOR
0281   05F8 E7            pop d
0282   05F9 FD 43         mov [d], b
0283   05FB             ; grid[8][16] = CONDUCTOR; 
0284   05FB 3B EF 24      mov d, _grid_data ; $grid
0285   05FE D7            push a
0286   05FF DA            push d
0287   0600 26 08 00      mov b, $8
0288   0603 E7            pop d
0289   0604 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0290   0608 DA            push d
0291   0609 26 10 00      mov b, $10
0292   060C E7            pop d
0293   060D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0294   0611 E4            pop a
0295   0612 DA            push d
0296   0613 26 01 00      mov b, 1; CONDUCTOR
0297   0616 E7            pop d
0298   0617 FD 43         mov [d], b
0299   0619             ; for (i = 17; i <= 25; i++) { 
0300   0619             _for2_init:
0301   0619 FA FF FF      lea d, [bp + -1] ; $i
0302   061C DA            push d
0303   061D 26 11 00      mov b, $11
0304   0620 E7            pop d
0305   0621 FD 43         mov [d], b
0306   0623             _for2_cond:
0307   0623 FA FF FF      lea d, [bp + -1] ; $i
0308   0626 2A            mov b, [d]
0309   0627             ; --- START RELATIONAL
0310   0627 D7            push a
0311   0628 11            mov a, b
0312   0629 26 19 00      mov b, $19
0313   062C B0            cmp a, b
0314   062D FD 74         sle ; <= (signed)
0315   062F E4            pop a
0316   0630             ; --- END RELATIONAL
0317   0630 C0 00 00      cmp b, 0
0318   0633 C6 65 06      je _for2_exit
0319   0636             _for2_block:
0320   0636             ; grid[7][i] = CONDUCTOR; 
0321   0636 3B EF 24      mov d, _grid_data ; $grid
0322   0639 D7            push a
0323   063A DA            push d
0324   063B 26 07 00      mov b, $7
0325   063E E7            pop d
0326   063F FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
0327   0643 DA            push d
0328   0644 FA FF FF      lea d, [bp + -1] ; $i
0329   0647 2A            mov b, [d]
0330   0648 E7            pop d
0331   0649 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0332   064D E4            pop a
0333   064E DA            push d
0334   064F 26 01 00      mov b, 1; CONDUCTOR
0335   0652 E7            pop d
0336   0653 FD 43         mov [d], b
0337   0655             _for2_update:
0338   0655 FA FF FF      lea d, [bp + -1] ; $i
0339   0658 2A            mov b, [d]
0340   0659 FD 77         inc b
0341   065B FA FF FF      lea d, [bp + -1] ; $i
0342   065E FD 43         mov [d], b
0343   0660 FD 7D         dec b
0344   0662 0A 23 06      jmp _for2_cond
0345   0665             _for2_exit:
0346   0665             ; while (1) { 
0347   0665             _while3_cond:
0348   0665 26 01 00      mov b, $1
0349   0668 C0 00 00      cmp b, 0
0350   066B C6 77 06      je _while3_exit
0351   066E             _while3_block:
0352   066E             ; print_grid(); 
0353   066E 07 1E 21      call print_grid
0354   0671             ; iterate(); 
0355   0671 07 F3 21      call iterate
0356   0674 0A 65 06      jmp _while3_cond
0357   0677             _while3_exit:
0358   0677             ; return 0; 
0359   0677 26 00 00      mov b, $0
0360   067A F9            leave
0361   067B 05 0B         syscall sys_terminate_proc
0362   067D             
0363   067D             strcpy:
0364   067D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0365   0680             ; char *psrc; 
0366   0680 52 02 00      sub sp, 2
0367   0683             ; char *pdest; 
0368   0683 52 02 00      sub sp, 2
0369   0686             ; psrc = src; 
0370   0686 FA FF FF      lea d, [bp + -1] ; $psrc
0371   0689 DA            push d
0372   068A FA 07 00      lea d, [bp + 7] ; $src
0373   068D 2A            mov b, [d]
0374   068E E7            pop d
0375   068F FD 43         mov [d], b
0376   0691             ; pdest = dest; 
0377   0691 FA FD FF      lea d, [bp + -3] ; $pdest
0378   0694 DA            push d
0379   0695 FA 05 00      lea d, [bp + 5] ; $dest
0380   0698 2A            mov b, [d]
0381   0699 E7            pop d
0382   069A FD 43         mov [d], b
0383   069C             ; while(*psrc) *pdest++ = *psrc++; 
0384   069C             _while4_cond:
0385   069C FA FF FF      lea d, [bp + -1] ; $psrc
0386   069F 2A            mov b, [d]
0387   06A0 74            mov d, b
0388   06A1 32            mov bl, [d]
0389   06A2 A7 00         mov bh, 0
0390   06A4 C0 00 00      cmp b, 0
0391   06A7 C6 CF 06      je _while4_exit
0392   06AA             _while4_block:
0393   06AA             ; *pdest++ = *psrc++; 
0394   06AA FA FD FF      lea d, [bp + -3] ; $pdest
0395   06AD 2A            mov b, [d]
0396   06AE FD 77         inc b
0397   06B0 FA FD FF      lea d, [bp + -3] ; $pdest
0398   06B3 FD 43         mov [d], b
0399   06B5 FD 7D         dec b
0400   06B7 D8            push b
0401   06B8 FA FF FF      lea d, [bp + -1] ; $psrc
0402   06BB 2A            mov b, [d]
0403   06BC FD 77         inc b
0404   06BE FA FF FF      lea d, [bp + -1] ; $psrc
0405   06C1 FD 43         mov [d], b
0406   06C3 FD 7D         dec b
0407   06C5 74            mov d, b
0408   06C6 32            mov bl, [d]
0409   06C7 A7 00         mov bh, 0
0410   06C9 E7            pop d
0411   06CA FD 3E         mov [d], bl
0412   06CC 0A 9C 06      jmp _while4_cond
0413   06CF             _while4_exit:
0414   06CF             ; *pdest = '\0'; 
0415   06CF FA FD FF      lea d, [bp + -3] ; $pdest
0416   06D2 2A            mov b, [d]
0417   06D3 D8            push b
0418   06D4 26 00 00      mov b, $0
0419   06D7 E7            pop d
0420   06D8 FD 3E         mov [d], bl
0421   06DA F9            leave
0422   06DB 09            ret
0423   06DC             
0424   06DC             strcmp:
0425   06DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0426   06DF             ; while (*s1 && (*s1 == *s2)) { 
0427   06DF             _while5_cond:
0428   06DF FA 05 00      lea d, [bp + 5] ; $s1
0429   06E2 2A            mov b, [d]
0430   06E3 74            mov d, b
0431   06E4 32            mov bl, [d]
0432   06E5 A7 00         mov bh, 0
0433   06E7             ; --- START LOGICAL AND
0434   06E7 D7            push a
0435   06E8 11            mov a, b
0436   06E9 FA 05 00      lea d, [bp + 5] ; $s1
0437   06EC 2A            mov b, [d]
0438   06ED 74            mov d, b
0439   06EE 32            mov bl, [d]
0440   06EF A7 00         mov bh, 0
0441   06F1             ; --- START RELATIONAL
0442   06F1 D7            push a
0443   06F2 11            mov a, b
0444   06F3 FA 07 00      lea d, [bp + 7] ; $s2
0445   06F6 2A            mov b, [d]
0446   06F7 74            mov d, b
0447   06F8 32            mov bl, [d]
0448   06F9 A7 00         mov bh, 0
0449   06FB B0            cmp a, b
0450   06FC FD 71         seq ; ==
0451   06FE E4            pop a
0452   06FF             ; --- END RELATIONAL
0453   06FF FD A7         sand a, b
0454   0701 E4            pop a
0455   0702             ; --- END LOGICAL AND
0456   0702 C0 00 00      cmp b, 0
0457   0705 C6 25 07      je _while5_exit
0458   0708             _while5_block:
0459   0708             ; s1++; 
0460   0708 FA 05 00      lea d, [bp + 5] ; $s1
0461   070B 2A            mov b, [d]
0462   070C FD 77         inc b
0463   070E FA 05 00      lea d, [bp + 5] ; $s1
0464   0711 FD 43         mov [d], b
0465   0713 FD 7D         dec b
0466   0715             ; s2++; 
0467   0715 FA 07 00      lea d, [bp + 7] ; $s2
0468   0718 2A            mov b, [d]
0469   0719 FD 77         inc b
0470   071B FA 07 00      lea d, [bp + 7] ; $s2
0471   071E FD 43         mov [d], b
0472   0720 FD 7D         dec b
0473   0722 0A DF 06      jmp _while5_cond
0474   0725             _while5_exit:
0475   0725             ; return *s1 - *s2; 
0476   0725 FA 05 00      lea d, [bp + 5] ; $s1
0477   0728 2A            mov b, [d]
0478   0729 74            mov d, b
0479   072A 32            mov bl, [d]
0480   072B A7 00         mov bh, 0
0481   072D             ; --- START TERMS
0482   072D D7            push a
0483   072E 11            mov a, b
0484   072F FA 07 00      lea d, [bp + 7] ; $s2
0485   0732 2A            mov b, [d]
0486   0733 74            mov d, b
0487   0734 32            mov bl, [d]
0488   0735 A7 00         mov bh, 0
0489   0737 60            sub a, b
0490   0738 27            mov b, a
0491   0739 E4            pop a
0492   073A             ; --- END TERMS
0493   073A F9            leave
0494   073B 09            ret
0495   073C             
0496   073C             strncmp:
0497   073C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0498   073F F9            leave
0499   0740 09            ret
0500   0741             
0501   0741             strcat:
0502   0741 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0503   0744             ; int dest_len; 
0504   0744 52 02 00      sub sp, 2
0505   0747             ; int i; 
0506   0747 52 02 00      sub sp, 2
0507   074A             ; dest_len = strlen(dest); 
0508   074A FA FF FF      lea d, [bp + -1] ; $dest_len
0509   074D DA            push d
0510   074E FA 05 00      lea d, [bp + 5] ; $dest
0511   0751 2A            mov b, [d]
0512   0752 FD AB         swp b
0513   0754 D8            push b
0514   0755 07 F7 07      call strlen
0515   0758 51 02 00      add sp, 2
0516   075B E7            pop d
0517   075C FD 43         mov [d], b
0518   075E             ; for (i = 0; src[i] != 0; i=i+1) { 
0519   075E             _for6_init:
0520   075E FA FD FF      lea d, [bp + -3] ; $i
0521   0761 DA            push d
0522   0762 26 00 00      mov b, $0
0523   0765 E7            pop d
0524   0766 FD 43         mov [d], b
0525   0768             _for6_cond:
0526   0768 FA 07 00      lea d, [bp + 7] ; $src
0527   076B FD 2A         mov d, [d]
0528   076D D7            push a
0529   076E DA            push d
0530   076F FA FD FF      lea d, [bp + -3] ; $i
0531   0772 2A            mov b, [d]
0532   0773 E7            pop d
0533   0774 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0534   0778 E4            pop a
0535   0779 32            mov bl, [d]
0536   077A A7 00         mov bh, 0
0537   077C             ; --- START RELATIONAL
0538   077C D7            push a
0539   077D 11            mov a, b
0540   077E 26 00 00      mov b, $0
0541   0781 B0            cmp a, b
0542   0782 FD 72         sneq ; !=
0543   0784 E4            pop a
0544   0785             ; --- END RELATIONAL
0545   0785 C0 00 00      cmp b, 0
0546   0788 C6 D1 07      je _for6_exit
0547   078B             _for6_block:
0548   078B             ; dest[dest_len + i] = src[i]; 
0549   078B FA 05 00      lea d, [bp + 5] ; $dest
0550   078E FD 2A         mov d, [d]
0551   0790 D7            push a
0552   0791 DA            push d
0553   0792 FA FF FF      lea d, [bp + -1] ; $dest_len
0554   0795 2A            mov b, [d]
0555   0796             ; --- START TERMS
0556   0796 D7            push a
0557   0797 11            mov a, b
0558   0798 FA FD FF      lea d, [bp + -3] ; $i
0559   079B 2A            mov b, [d]
0560   079C 56            add b, a
0561   079D E4            pop a
0562   079E             ; --- END TERMS
0563   079E E7            pop d
0564   079F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0565   07A3 E4            pop a
0566   07A4 DA            push d
0567   07A5 FA 07 00      lea d, [bp + 7] ; $src
0568   07A8 FD 2A         mov d, [d]
0569   07AA D7            push a
0570   07AB DA            push d
0571   07AC FA FD FF      lea d, [bp + -3] ; $i
0572   07AF 2A            mov b, [d]
0573   07B0 E7            pop d
0574   07B1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0575   07B5 E4            pop a
0576   07B6 32            mov bl, [d]
0577   07B7 A7 00         mov bh, 0
0578   07B9 E7            pop d
0579   07BA FD 3E         mov [d], bl
0580   07BC             _for6_update:
0581   07BC FA FD FF      lea d, [bp + -3] ; $i
0582   07BF DA            push d
0583   07C0 FA FD FF      lea d, [bp + -3] ; $i
0584   07C3 2A            mov b, [d]
0585   07C4             ; --- START TERMS
0586   07C4 D7            push a
0587   07C5 11            mov a, b
0588   07C6 26 01 00      mov b, $1
0589   07C9 56            add b, a
0590   07CA E4            pop a
0591   07CB             ; --- END TERMS
0592   07CB E7            pop d
0593   07CC FD 43         mov [d], b
0594   07CE 0A 68 07      jmp _for6_cond
0595   07D1             _for6_exit:
0596   07D1             ; dest[dest_len + i] = 0; 
0597   07D1 FA 05 00      lea d, [bp + 5] ; $dest
0598   07D4 FD 2A         mov d, [d]
0599   07D6 D7            push a
0600   07D7 DA            push d
0601   07D8 FA FF FF      lea d, [bp + -1] ; $dest_len
0602   07DB 2A            mov b, [d]
0603   07DC             ; --- START TERMS
0604   07DC D7            push a
0605   07DD 11            mov a, b
0606   07DE FA FD FF      lea d, [bp + -3] ; $i
0607   07E1 2A            mov b, [d]
0608   07E2 56            add b, a
0609   07E3 E4            pop a
0610   07E4             ; --- END TERMS
0611   07E4 E7            pop d
0612   07E5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0613   07E9 E4            pop a
0614   07EA DA            push d
0615   07EB 26 00 00      mov b, $0
0616   07EE E7            pop d
0617   07EF FD 3E         mov [d], bl
0618   07F1             ; return dest; 
0619   07F1 FA 05 00      lea d, [bp + 5] ; $dest
0620   07F4 2A            mov b, [d]
0621   07F5 F9            leave
0622   07F6 09            ret
0623   07F7             
0624   07F7             strlen:
0625   07F7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0626   07FA             ; int length; 
0627   07FA 52 02 00      sub sp, 2
0628   07FD             ; length = 0; 
0629   07FD FA FF FF      lea d, [bp + -1] ; $length
0630   0800 DA            push d
0631   0801 26 00 00      mov b, $0
0632   0804 E7            pop d
0633   0805 FD 43         mov [d], b
0634   0807             ; while (str[length] != 0) { 
0635   0807             _while7_cond:
0636   0807 FA 05 00      lea d, [bp + 5] ; $str
0637   080A FD 2A         mov d, [d]
0638   080C D7            push a
0639   080D DA            push d
0640   080E FA FF FF      lea d, [bp + -1] ; $length
0641   0811 2A            mov b, [d]
0642   0812 E7            pop d
0643   0813 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0644   0817 E4            pop a
0645   0818 32            mov bl, [d]
0646   0819 A7 00         mov bh, 0
0647   081B             ; --- START RELATIONAL
0648   081B D7            push a
0649   081C 11            mov a, b
0650   081D 26 00 00      mov b, $0
0651   0820 B0            cmp a, b
0652   0821 FD 72         sneq ; !=
0653   0823 E4            pop a
0654   0824             ; --- END RELATIONAL
0655   0824 C0 00 00      cmp b, 0
0656   0827 C6 3A 08      je _while7_exit
0657   082A             _while7_block:
0658   082A             ; length++; 
0659   082A FA FF FF      lea d, [bp + -1] ; $length
0660   082D 2A            mov b, [d]
0661   082E FD 77         inc b
0662   0830 FA FF FF      lea d, [bp + -1] ; $length
0663   0833 FD 43         mov [d], b
0664   0835 FD 7D         dec b
0665   0837 0A 07 08      jmp _while7_cond
0666   083A             _while7_exit:
0667   083A             ; return length; 
0668   083A FA FF FF      lea d, [bp + -1] ; $length
0669   083D 2A            mov b, [d]
0670   083E F9            leave
0671   083F 09            ret
0672   0840             
0673   0840             exit:
0674   0840 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0675   0843             
0676   0843             ; --- BEGIN INLINE ASM SEGMENT
0677   0843 05 0B         syscall sys_terminate_proc
0678   0845             ; --- END INLINE ASM SEGMENT
0679   0845             
0680   0845 F9            leave
0681   0846 09            ret
0682   0847             
0683   0847             memset:
0684   0847 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0685   084A             ; int i; 
0686   084A 52 02 00      sub sp, 2
0687   084D             ; for(i = 0; i < size; i++){ 
0688   084D             _for8_init:
0689   084D FA FF FF      lea d, [bp + -1] ; $i
0690   0850 DA            push d
0691   0851 26 00 00      mov b, $0
0692   0854 E7            pop d
0693   0855 FD 43         mov [d], b
0694   0857             _for8_cond:
0695   0857 FA FF FF      lea d, [bp + -1] ; $i
0696   085A 2A            mov b, [d]
0697   085B             ; --- START RELATIONAL
0698   085B D7            push a
0699   085C 11            mov a, b
0700   085D FA 08 00      lea d, [bp + 8] ; $size
0701   0860 2A            mov b, [d]
0702   0861 B0            cmp a, b
0703   0862 FD 73         slt ; < (signed)
0704   0864 E4            pop a
0705   0865             ; --- END RELATIONAL
0706   0865 C0 00 00      cmp b, 0
0707   0868 C6 91 08      je _for8_exit
0708   086B             _for8_block:
0709   086B             ; *(s+i) = c; 
0710   086B FA 05 00      lea d, [bp + 5] ; $s
0711   086E 2A            mov b, [d]
0712   086F             ; --- START TERMS
0713   086F D7            push a
0714   0870 11            mov a, b
0715   0871 FA FF FF      lea d, [bp + -1] ; $i
0716   0874 2A            mov b, [d]
0717   0875 56            add b, a
0718   0876 E4            pop a
0719   0877             ; --- END TERMS
0720   0877 D8            push b
0721   0878 FA 07 00      lea d, [bp + 7] ; $c
0722   087B 32            mov bl, [d]
0723   087C A7 00         mov bh, 0
0724   087E E7            pop d
0725   087F FD 3E         mov [d], bl
0726   0881             _for8_update:
0727   0881 FA FF FF      lea d, [bp + -1] ; $i
0728   0884 2A            mov b, [d]
0729   0885 FD 77         inc b
0730   0887 FA FF FF      lea d, [bp + -1] ; $i
0731   088A FD 43         mov [d], b
0732   088C FD 7D         dec b
0733   088E 0A 57 08      jmp _for8_cond
0734   0891             _for8_exit:
0735   0891             ; return s; 
0736   0891 FA 05 00      lea d, [bp + 5] ; $s
0737   0894 2A            mov b, [d]
0738   0895 F9            leave
0739   0896 09            ret
0740   0897             
0741   0897             atoi:
0742   0897 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0743   089A             ; int result = 0;  // Initialize result 
0744   089A 52 02 00      sub sp, 2
0745   089D             ; --- START LOCAL VAR INITIALIZATION
0746   089D FA FF FF      lea d, [bp + -1] ; $result
0747   08A0 DA            push d
0748   08A1 26 00 00      mov b, $0
0749   08A4 E7            pop d
0750   08A5 FD 43         mov [d], b
0751   08A7             ; --- END LOCAL VAR INITIALIZATION
0752   08A7             ; int sign = 1;    // Initialize sign as positive 
0753   08A7 52 02 00      sub sp, 2
0754   08AA             ; --- START LOCAL VAR INITIALIZATION
0755   08AA FA FD FF      lea d, [bp + -3] ; $sign
0756   08AD DA            push d
0757   08AE 26 01 00      mov b, $1
0758   08B1 E7            pop d
0759   08B2 FD 43         mov [d], b
0760   08B4             ; --- END LOCAL VAR INITIALIZATION
0761   08B4             ; while (*str == ' ') str++; 
0762   08B4             _while9_cond:
0763   08B4 FA 05 00      lea d, [bp + 5] ; $str
0764   08B7 2A            mov b, [d]
0765   08B8 74            mov d, b
0766   08B9 32            mov bl, [d]
0767   08BA A7 00         mov bh, 0
0768   08BC             ; --- START RELATIONAL
0769   08BC D7            push a
0770   08BD 11            mov a, b
0771   08BE 26 20 00      mov b, $20
0772   08C1 B0            cmp a, b
0773   08C2 FD 71         seq ; ==
0774   08C4 E4            pop a
0775   08C5             ; --- END RELATIONAL
0776   08C5 C0 00 00      cmp b, 0
0777   08C8 C6 DB 08      je _while9_exit
0778   08CB             _while9_block:
0779   08CB             ; str++; 
0780   08CB FA 05 00      lea d, [bp + 5] ; $str
0781   08CE 2A            mov b, [d]
0782   08CF FD 77         inc b
0783   08D1 FA 05 00      lea d, [bp + 5] ; $str
0784   08D4 FD 43         mov [d], b
0785   08D6 FD 7D         dec b
0786   08D8 0A B4 08      jmp _while9_cond
0787   08DB             _while9_exit:
0788   08DB             ; if (*str == '-' || *str == '+') { 
0789   08DB             _if10_cond:
0790   08DB FA 05 00      lea d, [bp + 5] ; $str
0791   08DE 2A            mov b, [d]
0792   08DF 74            mov d, b
0793   08E0 32            mov bl, [d]
0794   08E1 A7 00         mov bh, 0
0795   08E3             ; --- START RELATIONAL
0796   08E3 D7            push a
0797   08E4 11            mov a, b
0798   08E5 26 2D 00      mov b, $2d
0799   08E8 B0            cmp a, b
0800   08E9 FD 71         seq ; ==
0801   08EB E4            pop a
0802   08EC             ; --- END RELATIONAL
0803   08EC             ; --- START LOGICAL OR
0804   08EC D7            push a
0805   08ED 11            mov a, b
0806   08EE FA 05 00      lea d, [bp + 5] ; $str
0807   08F1 2A            mov b, [d]
0808   08F2 74            mov d, b
0809   08F3 32            mov bl, [d]
0810   08F4 A7 00         mov bh, 0
0811   08F6             ; --- START RELATIONAL
0812   08F6 D7            push a
0813   08F7 11            mov a, b
0814   08F8 26 2B 00      mov b, $2b
0815   08FB B0            cmp a, b
0816   08FC FD 71         seq ; ==
0817   08FE E4            pop a
0818   08FF             ; --- END RELATIONAL
0819   08FF FD A8         sor a, b ; ||
0820   0901 E4            pop a
0821   0902             ; --- END LOGICAL OR
0822   0902 C0 00 00      cmp b, 0
0823   0905 C6 3E 09      je _if10_exit
0824   0908             _if10_true:
0825   0908             ; if (*str == '-') sign = -1; 
0826   0908             _if11_cond:
0827   0908 FA 05 00      lea d, [bp + 5] ; $str
0828   090B 2A            mov b, [d]
0829   090C 74            mov d, b
0830   090D 32            mov bl, [d]
0831   090E A7 00         mov bh, 0
0832   0910             ; --- START RELATIONAL
0833   0910 D7            push a
0834   0911 11            mov a, b
0835   0912 26 2D 00      mov b, $2d
0836   0915 B0            cmp a, b
0837   0916 FD 71         seq ; ==
0838   0918 E4            pop a
0839   0919             ; --- END RELATIONAL
0840   0919 C0 00 00      cmp b, 0
0841   091C C6 2E 09      je _if11_exit
0842   091F             _if11_true:
0843   091F             ; sign = -1; 
0844   091F FA FD FF      lea d, [bp + -3] ; $sign
0845   0922 DA            push d
0846   0923 26 01 00      mov b, $1
0847   0926 FD 97         neg b
0848   0928 E7            pop d
0849   0929 FD 43         mov [d], b
0850   092B 0A 2E 09      jmp _if11_exit
0851   092E             _if11_exit:
0852   092E             ; str++; 
0853   092E FA 05 00      lea d, [bp + 5] ; $str
0854   0931 2A            mov b, [d]
0855   0932 FD 77         inc b
0856   0934 FA 05 00      lea d, [bp + 5] ; $str
0857   0937 FD 43         mov [d], b
0858   0939 FD 7D         dec b
0859   093B 0A 3E 09      jmp _if10_exit
0860   093E             _if10_exit:
0861   093E             ; while (*str >= '0' && *str <= '9') { 
0862   093E             _while12_cond:
0863   093E FA 05 00      lea d, [bp + 5] ; $str
0864   0941 2A            mov b, [d]
0865   0942 74            mov d, b
0866   0943 32            mov bl, [d]
0867   0944 A7 00         mov bh, 0
0868   0946             ; --- START RELATIONAL
0869   0946 D7            push a
0870   0947 11            mov a, b
0871   0948 26 30 00      mov b, $30
0872   094B B0            cmp a, b
0873   094C FD 82         sgeu ; >= (unsigned)
0874   094E E4            pop a
0875   094F             ; --- END RELATIONAL
0876   094F             ; --- START LOGICAL AND
0877   094F D7            push a
0878   0950 11            mov a, b
0879   0951 FA 05 00      lea d, [bp + 5] ; $str
0880   0954 2A            mov b, [d]
0881   0955 74            mov d, b
0882   0956 32            mov bl, [d]
0883   0957 A7 00         mov bh, 0
0884   0959             ; --- START RELATIONAL
0885   0959 D7            push a
0886   095A 11            mov a, b
0887   095B 26 39 00      mov b, $39
0888   095E B0            cmp a, b
0889   095F FD 76         sleu ; <= (unsigned)
0890   0961 E4            pop a
0891   0962             ; --- END RELATIONAL
0892   0962 FD A7         sand a, b
0893   0964 E4            pop a
0894   0965             ; --- END LOGICAL AND
0895   0965 C0 00 00      cmp b, 0
0896   0968 C6 A3 09      je _while12_exit
0897   096B             _while12_block:
0898   096B             ; result = result * 10 + (*str - '0'); 
0899   096B FA FF FF      lea d, [bp + -1] ; $result
0900   096E DA            push d
0901   096F FA FF FF      lea d, [bp + -1] ; $result
0902   0972 2A            mov b, [d]
0903   0973             ; --- START FACTORS
0904   0973 D7            push a
0905   0974 11            mov a, b
0906   0975 26 0A 00      mov b, $a
0907   0978 AC            mul a, b ; *
0908   0979 11            mov a, b
0909   097A 27            mov b, a
0910   097B E4            pop a
0911   097C             ; --- END FACTORS
0912   097C             ; --- START TERMS
0913   097C D7            push a
0914   097D 11            mov a, b
0915   097E FA 05 00      lea d, [bp + 5] ; $str
0916   0981 2A            mov b, [d]
0917   0982 74            mov d, b
0918   0983 32            mov bl, [d]
0919   0984 A7 00         mov bh, 0
0920   0986             ; --- START TERMS
0921   0986 D7            push a
0922   0987 11            mov a, b
0923   0988 26 30 00      mov b, $30
0924   098B 60            sub a, b
0925   098C 27            mov b, a
0926   098D E4            pop a
0927   098E             ; --- END TERMS
0928   098E 56            add b, a
0929   098F E4            pop a
0930   0990             ; --- END TERMS
0931   0990 E7            pop d
0932   0991 FD 43         mov [d], b
0933   0993             ; str++; 
0934   0993 FA 05 00      lea d, [bp + 5] ; $str
0935   0996 2A            mov b, [d]
0936   0997 FD 77         inc b
0937   0999 FA 05 00      lea d, [bp + 5] ; $str
0938   099C FD 43         mov [d], b
0939   099E FD 7D         dec b
0940   09A0 0A 3E 09      jmp _while12_cond
0941   09A3             _while12_exit:
0942   09A3             ; return sign * result; 
0943   09A3 FA FD FF      lea d, [bp + -3] ; $sign
0944   09A6 2A            mov b, [d]
0945   09A7             ; --- START FACTORS
0946   09A7 D7            push a
0947   09A8 11            mov a, b
0948   09A9 FA FF FF      lea d, [bp + -1] ; $result
0949   09AC 2A            mov b, [d]
0950   09AD AC            mul a, b ; *
0951   09AE 11            mov a, b
0952   09AF 27            mov b, a
0953   09B0 E4            pop a
0954   09B1             ; --- END FACTORS
0955   09B1 F9            leave
0956   09B2 09            ret
0957   09B3             
0958   09B3             rand:
0959   09B3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0960   09B6             ; int  sec; 
0961   09B6 52 02 00      sub sp, 2
0962   09B9             
0963   09B9             ; --- BEGIN INLINE ASM SEGMENT
0964   09B9 19 00         mov al, 0
0965   09BB 05 01         syscall sys_rtc					
0966   09BD 1A            mov al, ah
0967   09BE FA FF FF      lea d, [bp + -1] ; $sec
0968   09C1 1E            mov al, [d]
0969   09C2 22 00         mov ah, 0
0970   09C4             ; --- END INLINE ASM SEGMENT
0971   09C4             
0972   09C4             ; return sec; 
0973   09C4 FA FF FF      lea d, [bp + -1] ; $sec
0974   09C7 2A            mov b, [d]
0975   09C8 F9            leave
0976   09C9 09            ret
0977   09CA             
0978   09CA             alloc:
0979   09CA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0980   09CD             ; heap_top = heap_top + bytes; 
0981   09CD 3B C2 31      mov d, _heap_top ; $heap_top
0982   09D0 DA            push d
0983   09D1 3B C2 31      mov d, _heap_top ; $heap_top
0984   09D4 2A            mov b, [d]
0985   09D5             ; --- START TERMS
0986   09D5 D7            push a
0987   09D6 11            mov a, b
0988   09D7 FA 05 00      lea d, [bp + 5] ; $bytes
0989   09DA 2A            mov b, [d]
0990   09DB 56            add b, a
0991   09DC E4            pop a
0992   09DD             ; --- END TERMS
0993   09DD E7            pop d
0994   09DE FD 43         mov [d], b
0995   09E0             ; return heap_top - bytes; 
0996   09E0 3B C2 31      mov d, _heap_top ; $heap_top
0997   09E3 2A            mov b, [d]
0998   09E4             ; --- START TERMS
0999   09E4 D7            push a
1000   09E5 11            mov a, b
1001   09E6 FA 05 00      lea d, [bp + 5] ; $bytes
1002   09E9 2A            mov b, [d]
1003   09EA 60            sub a, b
1004   09EB 27            mov b, a
1005   09EC E4            pop a
1006   09ED             ; --- END TERMS
1007   09ED F9            leave
1008   09EE 09            ret
1009   09EF             
1010   09EF             free:
1011   09EF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1012   09F2             ; return heap_top = heap_top - bytes; 
1013   09F2 3B C2 31      mov d, _heap_top ; $heap_top
1014   09F5 DA            push d
1015   09F6 3B C2 31      mov d, _heap_top ; $heap_top
1016   09F9 2A            mov b, [d]
1017   09FA             ; --- START TERMS
1018   09FA D7            push a
1019   09FB 11            mov a, b
1020   09FC FA 05 00      lea d, [bp + 5] ; $bytes
1021   09FF 2A            mov b, [d]
1022   0A00 60            sub a, b
1023   0A01 27            mov b, a
1024   0A02 E4            pop a
1025   0A03             ; --- END TERMS
1026   0A03 E7            pop d
1027   0A04 FD 43         mov [d], b
1028   0A06 F9            leave
1029   0A07 09            ret
1030   0A08             
1031   0A08             fopen:
1032   0A08 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1033   0A0B             ; FILE *fp; 
1034   0A0B 52 02 00      sub sp, 2
1035   0A0E             ; fp = alloc(sizeof(int)); 
1036   0A0E FA FF FF      lea d, [bp + -1] ; $fp
1037   0A11 DA            push d
1038   0A12 26 02 00      mov b, 2
1039   0A15 FD AB         swp b
1040   0A17 D8            push b
1041   0A18 07 CA 09      call alloc
1042   0A1B 51 02 00      add sp, 2
1043   0A1E E7            pop d
1044   0A1F FD 43         mov [d], b
1045   0A21 F9            leave
1046   0A22 09            ret
1047   0A23             
1048   0A23             printf:
1049   0A23 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1050   0A26             ; char *p, *format_p; 
1051   0A26 52 02 00      sub sp, 2
1052   0A29 52 02 00      sub sp, 2
1053   0A2C             ; format_p = format; 
1054   0A2C FA FD FF      lea d, [bp + -3] ; $format_p
1055   0A2F DA            push d
1056   0A30 FA 05 00      lea d, [bp + 5] ; $format
1057   0A33 2A            mov b, [d]
1058   0A34 E7            pop d
1059   0A35 FD 43         mov [d], b
1060   0A37             ; p = &format + 2; 
1061   0A37 FA FF FF      lea d, [bp + -1] ; $p
1062   0A3A DA            push d
1063   0A3B FA 05 00      lea d, [bp + 5] ; $format
1064   0A3E 2D            mov b, d
1065   0A3F             ; --- START TERMS
1066   0A3F D7            push a
1067   0A40 11            mov a, b
1068   0A41 26 02 00      mov b, $2
1069   0A44 56            add b, a
1070   0A45 E4            pop a
1071   0A46             ; --- END TERMS
1072   0A46 E7            pop d
1073   0A47 FD 43         mov [d], b
1074   0A49             ; for(;;){ 
1075   0A49             _for13_init:
1076   0A49             _for13_cond:
1077   0A49             _for13_block:
1078   0A49             ; if(!*format_p) break; 
1079   0A49             _if14_cond:
1080   0A49 FA FD FF      lea d, [bp + -3] ; $format_p
1081   0A4C 2A            mov b, [d]
1082   0A4D 74            mov d, b
1083   0A4E 32            mov bl, [d]
1084   0A4F A7 00         mov bh, 0
1085   0A51 C0 00 00      cmp b, 0
1086   0A54 FD 71         seq ; !
1087   0A56 C0 00 00      cmp b, 0
1088   0A59 C6 62 0A      je _if14_else
1089   0A5C             _if14_true:
1090   0A5C             ; break; 
1091   0A5C 0A 89 0C      jmp _for13_exit ; for break
1092   0A5F 0A 86 0C      jmp _if14_exit
1093   0A62             _if14_else:
1094   0A62             ; if(*format_p == '%'){ 
1095   0A62             _if15_cond:
1096   0A62 FA FD FF      lea d, [bp + -3] ; $format_p
1097   0A65 2A            mov b, [d]
1098   0A66 74            mov d, b
1099   0A67 32            mov bl, [d]
1100   0A68 A7 00         mov bh, 0
1101   0A6A             ; --- START RELATIONAL
1102   0A6A D7            push a
1103   0A6B 11            mov a, b
1104   0A6C 26 25 00      mov b, $25
1105   0A6F B0            cmp a, b
1106   0A70 FD 71         seq ; ==
1107   0A72 E4            pop a
1108   0A73             ; --- END RELATIONAL
1109   0A73 C0 00 00      cmp b, 0
1110   0A76 C6 6A 0C      je _if15_else
1111   0A79             _if15_true:
1112   0A79             ; format_p++; 
1113   0A79 FA FD FF      lea d, [bp + -3] ; $format_p
1114   0A7C 2A            mov b, [d]
1115   0A7D FD 77         inc b
1116   0A7F FA FD FF      lea d, [bp + -3] ; $format_p
1117   0A82 FD 43         mov [d], b
1118   0A84 FD 7D         dec b
1119   0A86             ; switch(*format_p){ 
1120   0A86             _switch16_expr:
1121   0A86 FA FD FF      lea d, [bp + -3] ; $format_p
1122   0A89 2A            mov b, [d]
1123   0A8A 74            mov d, b
1124   0A8B 32            mov bl, [d]
1125   0A8C A7 00         mov bh, 0
1126   0A8E             _switch16_comparisons:
1127   0A8E C1 6C         cmp bl, $6c
1128   0A90 C6 BC 0A      je _switch16_case0
1129   0A93 C1 4C         cmp bl, $4c
1130   0A95 C6 BC 0A      je _switch16_case1
1131   0A98 C1 64         cmp bl, $64
1132   0A9A C6 AA 0B      je _switch16_case2
1133   0A9D C1 69         cmp bl, $69
1134   0A9F C6 AA 0B      je _switch16_case3
1135   0AA2 C1 75         cmp bl, $75
1136   0AA4 C6 CE 0B      je _switch16_case4
1137   0AA7 C1 78         cmp bl, $78
1138   0AA9 C6 F2 0B      je _switch16_case5
1139   0AAC C1 63         cmp bl, $63
1140   0AAE C6 10 0C      je _switch16_case6
1141   0AB1 C1 73         cmp bl, $73
1142   0AB3 C6 2F 0C      je _switch16_case7
1143   0AB6 0A 4E 0C      jmp _switch16_default
1144   0AB9 0A 5A 0C      jmp _switch16_exit
1145   0ABC             _switch16_case0:
1146   0ABC             _switch16_case1:
1147   0ABC             ; format_p++; 
1148   0ABC FA FD FF      lea d, [bp + -3] ; $format_p
1149   0ABF 2A            mov b, [d]
1150   0AC0 FD 77         inc b
1151   0AC2 FA FD FF      lea d, [bp + -3] ; $format_p
1152   0AC5 FD 43         mov [d], b
1153   0AC7 FD 7D         dec b
1154   0AC9             ; if(*format_p == 'd' || *format_p == 'i') 
1155   0AC9             _if17_cond:
1156   0AC9 FA FD FF      lea d, [bp + -3] ; $format_p
1157   0ACC 2A            mov b, [d]
1158   0ACD 74            mov d, b
1159   0ACE 32            mov bl, [d]
1160   0ACF A7 00         mov bh, 0
1161   0AD1             ; --- START RELATIONAL
1162   0AD1 D7            push a
1163   0AD2 11            mov a, b
1164   0AD3 26 64 00      mov b, $64
1165   0AD6 B0            cmp a, b
1166   0AD7 FD 71         seq ; ==
1167   0AD9 E4            pop a
1168   0ADA             ; --- END RELATIONAL
1169   0ADA             ; --- START LOGICAL OR
1170   0ADA D7            push a
1171   0ADB 11            mov a, b
1172   0ADC FA FD FF      lea d, [bp + -3] ; $format_p
1173   0ADF 2A            mov b, [d]
1174   0AE0 74            mov d, b
1175   0AE1 32            mov bl, [d]
1176   0AE2 A7 00         mov bh, 0
1177   0AE4             ; --- START RELATIONAL
1178   0AE4 D7            push a
1179   0AE5 11            mov a, b
1180   0AE6 26 69 00      mov b, $69
1181   0AE9 B0            cmp a, b
1182   0AEA FD 71         seq ; ==
1183   0AEC E4            pop a
1184   0AED             ; --- END RELATIONAL
1185   0AED FD A8         sor a, b ; ||
1186   0AEF E4            pop a
1187   0AF0             ; --- END LOGICAL OR
1188   0AF0 C0 00 00      cmp b, 0
1189   0AF3 C6 18 0B      je _if17_else
1190   0AF6             _if17_true:
1191   0AF6             ; print_signed_long(*(long *)p); 
1192   0AF6 FA FF FF      lea d, [bp + -1] ; $p
1193   0AF9 2A            mov b, [d]
1194   0AFA AB            snex b
1195   0AFB FD 39         mov c, b
1196   0AFD 74            mov d, b
1197   0AFE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1198   0B01 FD 39         mov c, b ; And place it into C
1199   0B03 2A            mov b, [d] ; Lower Word in B
1200   0B04 FD 79         mov g, b
1201   0B06 28            mov b, c
1202   0B07 FD AB         swp b
1203   0B09 D8            push b
1204   0B0A FD 27         mov b, g
1205   0B0C FD AB         swp b
1206   0B0E D8            push b
1207   0B0F 07 7A 14      call print_signed_long
1208   0B12 51 04 00      add sp, 4
1209   0B15 0A 95 0B      jmp _if17_exit
1210   0B18             _if17_else:
1211   0B18             ; if(*format_p == 'u') 
1212   0B18             _if18_cond:
1213   0B18 FA FD FF      lea d, [bp + -3] ; $format_p
1214   0B1B 2A            mov b, [d]
1215   0B1C 74            mov d, b
1216   0B1D 32            mov bl, [d]
1217   0B1E A7 00         mov bh, 0
1218   0B20             ; --- START RELATIONAL
1219   0B20 D7            push a
1220   0B21 11            mov a, b
1221   0B22 26 75 00      mov b, $75
1222   0B25 B0            cmp a, b
1223   0B26 FD 71         seq ; ==
1224   0B28 E4            pop a
1225   0B29             ; --- END RELATIONAL
1226   0B29 C0 00 00      cmp b, 0
1227   0B2C C6 53 0B      je _if18_else
1228   0B2F             _if18_true:
1229   0B2F             ; print_unsigned_long(*(unsigned long *)p); 
1230   0B2F FA FF FF      lea d, [bp + -1] ; $p
1231   0B32 2A            mov b, [d]
1232   0B33 A7 00         mov bh, 0
1233   0B35 38 00 00      mov c, 0
1234   0B38 74            mov d, b
1235   0B39 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1236   0B3C FD 39         mov c, b ; And place it into C
1237   0B3E 2A            mov b, [d] ; Lower Word in B
1238   0B3F FD 79         mov g, b
1239   0B41 28            mov b, c
1240   0B42 FD AB         swp b
1241   0B44 D8            push b
1242   0B45 FD 27         mov b, g
1243   0B47 FD AB         swp b
1244   0B49 D8            push b
1245   0B4A 07 BA 17      call print_unsigned_long
1246   0B4D 51 04 00      add sp, 4
1247   0B50 0A 95 0B      jmp _if18_exit
1248   0B53             _if18_else:
1249   0B53             ; if(*format_p == 'x') 
1250   0B53             _if19_cond:
1251   0B53 FA FD FF      lea d, [bp + -3] ; $format_p
1252   0B56 2A            mov b, [d]
1253   0B57 74            mov d, b
1254   0B58 32            mov bl, [d]
1255   0B59 A7 00         mov bh, 0
1256   0B5B             ; --- START RELATIONAL
1257   0B5B D7            push a
1258   0B5C 11            mov a, b
1259   0B5D 26 78 00      mov b, $78
1260   0B60 B0            cmp a, b
1261   0B61 FD 71         seq ; ==
1262   0B63 E4            pop a
1263   0B64             ; --- END RELATIONAL
1264   0B64 C0 00 00      cmp b, 0
1265   0B67 C6 89 0B      je _if19_else
1266   0B6A             _if19_true:
1267   0B6A             ; printx32(*(long int *)p); 
1268   0B6A FA FF FF      lea d, [bp + -1] ; $p
1269   0B6D 2A            mov b, [d]
1270   0B6E 74            mov d, b
1271   0B6F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1272   0B72 FD 39         mov c, b ; And place it into C
1273   0B74 2A            mov b, [d] ; Lower Word in B
1274   0B75 FD 79         mov g, b
1275   0B77 28            mov b, c
1276   0B78 FD AB         swp b
1277   0B7A D8            push b
1278   0B7B FD 27         mov b, g
1279   0B7D FD AB         swp b
1280   0B7F D8            push b
1281   0B80 07 EF 11      call printx32
1282   0B83 51 04 00      add sp, 4
1283   0B86 0A 95 0B      jmp _if19_exit
1284   0B89             _if19_else:
1285   0B89             ; err("Unexpected format in printf."); 
1286   0B89 26 7E 31      mov b, _s0 ; "Unexpected format in printf."
1287   0B8C FD AB         swp b
1288   0B8E D8            push b
1289   0B8F 07 DD 11      call err
1290   0B92 51 02 00      add sp, 2
1291   0B95             _if19_exit:
1292   0B95             _if18_exit:
1293   0B95             _if17_exit:
1294   0B95             ; p = p + 4; 
1295   0B95 FA FF FF      lea d, [bp + -1] ; $p
1296   0B98 DA            push d
1297   0B99 FA FF FF      lea d, [bp + -1] ; $p
1298   0B9C 2A            mov b, [d]
1299   0B9D             ; --- START TERMS
1300   0B9D D7            push a
1301   0B9E 11            mov a, b
1302   0B9F 26 04 00      mov b, $4
1303   0BA2 56            add b, a
1304   0BA3 E4            pop a
1305   0BA4             ; --- END TERMS
1306   0BA4 E7            pop d
1307   0BA5 FD 43         mov [d], b
1308   0BA7             ; break; 
1309   0BA7 0A 5A 0C      jmp _switch16_exit ; case break
1310   0BAA             _switch16_case2:
1311   0BAA             _switch16_case3:
1312   0BAA             ; print_signed(*(int*)p); 
1313   0BAA FA FF FF      lea d, [bp + -1] ; $p
1314   0BAD 2A            mov b, [d]
1315   0BAE 74            mov d, b
1316   0BAF 2A            mov b, [d]
1317   0BB0 FD AB         swp b
1318   0BB2 D8            push b
1319   0BB3 07 83 13      call print_signed
1320   0BB6 51 02 00      add sp, 2
1321   0BB9             ; p = p + 2; 
1322   0BB9 FA FF FF      lea d, [bp + -1] ; $p
1323   0BBC DA            push d
1324   0BBD FA FF FF      lea d, [bp + -1] ; $p
1325   0BC0 2A            mov b, [d]
1326   0BC1             ; --- START TERMS
1327   0BC1 D7            push a
1328   0BC2 11            mov a, b
1329   0BC3 26 02 00      mov b, $2
1330   0BC6 56            add b, a
1331   0BC7 E4            pop a
1332   0BC8             ; --- END TERMS
1333   0BC8 E7            pop d
1334   0BC9 FD 43         mov [d], b
1335   0BCB             ; break; 
1336   0BCB 0A 5A 0C      jmp _switch16_exit ; case break
1337   0BCE             _switch16_case4:
1338   0BCE             ; print_unsigned(*(unsigned int*)p); 
1339   0BCE FA FF FF      lea d, [bp + -1] ; $p
1340   0BD1 2A            mov b, [d]
1341   0BD2 74            mov d, b
1342   0BD3 2A            mov b, [d]
1343   0BD4 FD AB         swp b
1344   0BD6 D8            push b
1345   0BD7 07 BF 1A      call print_unsigned
1346   0BDA 51 02 00      add sp, 2
1347   0BDD             ; p = p + 2; 
1348   0BDD FA FF FF      lea d, [bp + -1] ; $p
1349   0BE0 DA            push d
1350   0BE1 FA FF FF      lea d, [bp + -1] ; $p
1351   0BE4 2A            mov b, [d]
1352   0BE5             ; --- START TERMS
1353   0BE5 D7            push a
1354   0BE6 11            mov a, b
1355   0BE7 26 02 00      mov b, $2
1356   0BEA 56            add b, a
1357   0BEB E4            pop a
1358   0BEC             ; --- END TERMS
1359   0BEC E7            pop d
1360   0BED FD 43         mov [d], b
1361   0BEF             ; break; 
1362   0BEF 0A 5A 0C      jmp _switch16_exit ; case break
1363   0BF2             _switch16_case5:
1364   0BF2             
1365   0BF2             ; --- BEGIN INLINE ASM SEGMENT
1366   0BF2 FA FF FF      lea d, [bp + -1] ; $p
1367   0BF5 FD 2A         mov d, [d]
1368   0BF7 2A            mov b, [d]
1369   0BF8 07 1E 20      call print_u16x
1370   0BFB             ; --- END INLINE ASM SEGMENT
1371   0BFB             
1372   0BFB             ; p = p + 2; 
1373   0BFB FA FF FF      lea d, [bp + -1] ; $p
1374   0BFE DA            push d
1375   0BFF FA FF FF      lea d, [bp + -1] ; $p
1376   0C02 2A            mov b, [d]
1377   0C03             ; --- START TERMS
1378   0C03 D7            push a
1379   0C04 11            mov a, b
1380   0C05 26 02 00      mov b, $2
1381   0C08 56            add b, a
1382   0C09 E4            pop a
1383   0C0A             ; --- END TERMS
1384   0C0A E7            pop d
1385   0C0B FD 43         mov [d], b
1386   0C0D             ; break; 
1387   0C0D 0A 5A 0C      jmp _switch16_exit ; case break
1388   0C10             _switch16_case6:
1389   0C10             
1390   0C10             ; --- BEGIN INLINE ASM SEGMENT
1391   0C10 FA FF FF      lea d, [bp + -1] ; $p
1392   0C13 FD 2A         mov d, [d]
1393   0C15 1E            mov al, [d]
1394   0C16 23            mov ah, al
1395   0C17 07 7C 1E      call _putchar
1396   0C1A             ; --- END INLINE ASM SEGMENT
1397   0C1A             
1398   0C1A             ; p = p + 1; 
1399   0C1A FA FF FF      lea d, [bp + -1] ; $p
1400   0C1D DA            push d
1401   0C1E FA FF FF      lea d, [bp + -1] ; $p
1402   0C21 2A            mov b, [d]
1403   0C22             ; --- START TERMS
1404   0C22 D7            push a
1405   0C23 11            mov a, b
1406   0C24 26 01 00      mov b, $1
1407   0C27 56            add b, a
1408   0C28 E4            pop a
1409   0C29             ; --- END TERMS
1410   0C29 E7            pop d
1411   0C2A FD 43         mov [d], b
1412   0C2C             ; break; 
1413   0C2C 0A 5A 0C      jmp _switch16_exit ; case break
1414   0C2F             _switch16_case7:
1415   0C2F             
1416   0C2F             ; --- BEGIN INLINE ASM SEGMENT
1417   0C2F FA FF FF      lea d, [bp + -1] ; $p
1418   0C32 FD 2A         mov d, [d]
1419   0C34 FD 2A         mov d, [d]
1420   0C36 07 C6 1F      call _puts
1421   0C39             ; --- END INLINE ASM SEGMENT
1422   0C39             
1423   0C39             ; p = p + 2; 
1424   0C39 FA FF FF      lea d, [bp + -1] ; $p
1425   0C3C DA            push d
1426   0C3D FA FF FF      lea d, [bp + -1] ; $p
1427   0C40 2A            mov b, [d]
1428   0C41             ; --- START TERMS
1429   0C41 D7            push a
1430   0C42 11            mov a, b
1431   0C43 26 02 00      mov b, $2
1432   0C46 56            add b, a
1433   0C47 E4            pop a
1434   0C48             ; --- END TERMS
1435   0C48 E7            pop d
1436   0C49 FD 43         mov [d], b
1437   0C4B             ; break; 
1438   0C4B 0A 5A 0C      jmp _switch16_exit ; case break
1439   0C4E             _switch16_default:
1440   0C4E             ; print("Error: Unknown argument type.\n"); 
1441   0C4E 26 9B 31      mov b, _s1 ; "Error: Unknown argument type.\n"
1442   0C51 FD AB         swp b
1443   0C53 D8            push b
1444   0C54 07 33 1D      call print
1445   0C57 51 02 00      add sp, 2
1446   0C5A             _switch16_exit:
1447   0C5A             ; format_p++; 
1448   0C5A FA FD FF      lea d, [bp + -3] ; $format_p
1449   0C5D 2A            mov b, [d]
1450   0C5E FD 77         inc b
1451   0C60 FA FD FF      lea d, [bp + -3] ; $format_p
1452   0C63 FD 43         mov [d], b
1453   0C65 FD 7D         dec b
1454   0C67 0A 86 0C      jmp _if15_exit
1455   0C6A             _if15_else:
1456   0C6A             ; putchar(*format_p); 
1457   0C6A FA FD FF      lea d, [bp + -3] ; $format_p
1458   0C6D 2A            mov b, [d]
1459   0C6E 74            mov d, b
1460   0C6F 32            mov bl, [d]
1461   0C70 A7 00         mov bh, 0
1462   0C72 DD            push bl
1463   0C73 07 EB 1C      call putchar
1464   0C76 51 01 00      add sp, 1
1465   0C79             ; format_p++; 
1466   0C79 FA FD FF      lea d, [bp + -3] ; $format_p
1467   0C7C 2A            mov b, [d]
1468   0C7D FD 77         inc b
1469   0C7F FA FD FF      lea d, [bp + -3] ; $format_p
1470   0C82 FD 43         mov [d], b
1471   0C84 FD 7D         dec b
1472   0C86             _if15_exit:
1473   0C86             _if14_exit:
1474   0C86             _for13_update:
1475   0C86 0A 49 0A      jmp _for13_cond
1476   0C89             _for13_exit:
1477   0C89 F9            leave
1478   0C8A 09            ret
1479   0C8B             
1480   0C8B             scanf:
1481   0C8B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1482   0C8E             ; char *p, *format_p; 
1483   0C8E 52 02 00      sub sp, 2
1484   0C91 52 02 00      sub sp, 2
1485   0C94             ; char c; 
1486   0C94 52 01 00      sub sp, 1
1487   0C97             ; int i; 
1488   0C97 52 02 00      sub sp, 2
1489   0C9A             ; char input_string[  512                    ]; 
1490   0C9A 52 00 02      sub sp, 512
1491   0C9D             ; format_p = format; 
1492   0C9D FA FD FF      lea d, [bp + -3] ; $format_p
1493   0CA0 DA            push d
1494   0CA1 FA 05 00      lea d, [bp + 5] ; $format
1495   0CA4 2A            mov b, [d]
1496   0CA5 E7            pop d
1497   0CA6 FD 43         mov [d], b
1498   0CA8             ; p = &format + 2; 
1499   0CA8 FA FF FF      lea d, [bp + -1] ; $p
1500   0CAB DA            push d
1501   0CAC FA 05 00      lea d, [bp + 5] ; $format
1502   0CAF 2D            mov b, d
1503   0CB0             ; --- START TERMS
1504   0CB0 D7            push a
1505   0CB1 11            mov a, b
1506   0CB2 26 02 00      mov b, $2
1507   0CB5 56            add b, a
1508   0CB6 E4            pop a
1509   0CB7             ; --- END TERMS
1510   0CB7 E7            pop d
1511   0CB8 FD 43         mov [d], b
1512   0CBA             ; for(;;){ 
1513   0CBA             _for20_init:
1514   0CBA             _for20_cond:
1515   0CBA             _for20_block:
1516   0CBA             ; if(!*format_p) break; 
1517   0CBA             _if21_cond:
1518   0CBA FA FD FF      lea d, [bp + -3] ; $format_p
1519   0CBD 2A            mov b, [d]
1520   0CBE 74            mov d, b
1521   0CBF 32            mov bl, [d]
1522   0CC0 A7 00         mov bh, 0
1523   0CC2 C0 00 00      cmp b, 0
1524   0CC5 FD 71         seq ; !
1525   0CC7 C0 00 00      cmp b, 0
1526   0CCA C6 D3 0C      je _if21_else
1527   0CCD             _if21_true:
1528   0CCD             ; break; 
1529   0CCD 0A D4 0E      jmp _for20_exit ; for break
1530   0CD0 0A D1 0E      jmp _if21_exit
1531   0CD3             _if21_else:
1532   0CD3             ; if(*format_p == '%'){ 
1533   0CD3             _if22_cond:
1534   0CD3 FA FD FF      lea d, [bp + -3] ; $format_p
1535   0CD6 2A            mov b, [d]
1536   0CD7 74            mov d, b
1537   0CD8 32            mov bl, [d]
1538   0CD9 A7 00         mov bh, 0
1539   0CDB             ; --- START RELATIONAL
1540   0CDB D7            push a
1541   0CDC 11            mov a, b
1542   0CDD 26 25 00      mov b, $25
1543   0CE0 B0            cmp a, b
1544   0CE1 FD 71         seq ; ==
1545   0CE3 E4            pop a
1546   0CE4             ; --- END RELATIONAL
1547   0CE4 C0 00 00      cmp b, 0
1548   0CE7 C6 B5 0E      je _if22_else
1549   0CEA             _if22_true:
1550   0CEA             ; format_p++; 
1551   0CEA FA FD FF      lea d, [bp + -3] ; $format_p
1552   0CED 2A            mov b, [d]
1553   0CEE FD 77         inc b
1554   0CF0 FA FD FF      lea d, [bp + -3] ; $format_p
1555   0CF3 FD 43         mov [d], b
1556   0CF5 FD 7D         dec b
1557   0CF7             ; switch(*format_p){ 
1558   0CF7             _switch23_expr:
1559   0CF7 FA FD FF      lea d, [bp + -3] ; $format_p
1560   0CFA 2A            mov b, [d]
1561   0CFB 74            mov d, b
1562   0CFC 32            mov bl, [d]
1563   0CFD A7 00         mov bh, 0
1564   0CFF             _switch23_comparisons:
1565   0CFF C1 6C         cmp bl, $6c
1566   0D01 C6 2D 0D      je _switch23_case0
1567   0D04 C1 4C         cmp bl, $4c
1568   0D06 C6 2D 0D      je _switch23_case1
1569   0D09 C1 64         cmp bl, $64
1570   0D0B C6 BF 0D      je _switch23_case2
1571   0D0E C1 69         cmp bl, $69
1572   0D10 C6 BF 0D      je _switch23_case3
1573   0D13 C1 75         cmp bl, $75
1574   0D15 C6 EC 0D      je _switch23_case4
1575   0D18 C1 78         cmp bl, $78
1576   0D1A C6 19 0E      je _switch23_case5
1577   0D1D C1 63         cmp bl, $63
1578   0D1F C6 2E 0E      je _switch23_case6
1579   0D22 C1 73         cmp bl, $73
1580   0D24 C6 61 0E      je _switch23_case7
1581   0D27 0A 99 0E      jmp _switch23_default
1582   0D2A 0A A5 0E      jmp _switch23_exit
1583   0D2D             _switch23_case0:
1584   0D2D             _switch23_case1:
1585   0D2D             ; format_p++; 
1586   0D2D FA FD FF      lea d, [bp + -3] ; $format_p
1587   0D30 2A            mov b, [d]
1588   0D31 FD 77         inc b
1589   0D33 FA FD FF      lea d, [bp + -3] ; $format_p
1590   0D36 FD 43         mov [d], b
1591   0D38 FD 7D         dec b
1592   0D3A             ; if(*format_p == 'd' || *format_p == 'i'); 
1593   0D3A             _if24_cond:
1594   0D3A FA FD FF      lea d, [bp + -3] ; $format_p
1595   0D3D 2A            mov b, [d]
1596   0D3E 74            mov d, b
1597   0D3F 32            mov bl, [d]
1598   0D40 A7 00         mov bh, 0
1599   0D42             ; --- START RELATIONAL
1600   0D42 D7            push a
1601   0D43 11            mov a, b
1602   0D44 26 64 00      mov b, $64
1603   0D47 B0            cmp a, b
1604   0D48 FD 71         seq ; ==
1605   0D4A E4            pop a
1606   0D4B             ; --- END RELATIONAL
1607   0D4B             ; --- START LOGICAL OR
1608   0D4B D7            push a
1609   0D4C 11            mov a, b
1610   0D4D FA FD FF      lea d, [bp + -3] ; $format_p
1611   0D50 2A            mov b, [d]
1612   0D51 74            mov d, b
1613   0D52 32            mov bl, [d]
1614   0D53 A7 00         mov bh, 0
1615   0D55             ; --- START RELATIONAL
1616   0D55 D7            push a
1617   0D56 11            mov a, b
1618   0D57 26 69 00      mov b, $69
1619   0D5A B0            cmp a, b
1620   0D5B FD 71         seq ; ==
1621   0D5D E4            pop a
1622   0D5E             ; --- END RELATIONAL
1623   0D5E FD A8         sor a, b ; ||
1624   0D60 E4            pop a
1625   0D61             ; --- END LOGICAL OR
1626   0D61 C0 00 00      cmp b, 0
1627   0D64 C6 6A 0D      je _if24_else
1628   0D67             _if24_true:
1629   0D67             ; ; 
1630   0D67 0A AA 0D      jmp _if24_exit
1631   0D6A             _if24_else:
1632   0D6A             ; if(*format_p == 'u'); 
1633   0D6A             _if25_cond:
1634   0D6A FA FD FF      lea d, [bp + -3] ; $format_p
1635   0D6D 2A            mov b, [d]
1636   0D6E 74            mov d, b
1637   0D6F 32            mov bl, [d]
1638   0D70 A7 00         mov bh, 0
1639   0D72             ; --- START RELATIONAL
1640   0D72 D7            push a
1641   0D73 11            mov a, b
1642   0D74 26 75 00      mov b, $75
1643   0D77 B0            cmp a, b
1644   0D78 FD 71         seq ; ==
1645   0D7A E4            pop a
1646   0D7B             ; --- END RELATIONAL
1647   0D7B C0 00 00      cmp b, 0
1648   0D7E C6 84 0D      je _if25_else
1649   0D81             _if25_true:
1650   0D81             ; ; 
1651   0D81 0A AA 0D      jmp _if25_exit
1652   0D84             _if25_else:
1653   0D84             ; if(*format_p == 'x'); 
1654   0D84             _if26_cond:
1655   0D84 FA FD FF      lea d, [bp + -3] ; $format_p
1656   0D87 2A            mov b, [d]
1657   0D88 74            mov d, b
1658   0D89 32            mov bl, [d]
1659   0D8A A7 00         mov bh, 0
1660   0D8C             ; --- START RELATIONAL
1661   0D8C D7            push a
1662   0D8D 11            mov a, b
1663   0D8E 26 78 00      mov b, $78
1664   0D91 B0            cmp a, b
1665   0D92 FD 71         seq ; ==
1666   0D94 E4            pop a
1667   0D95             ; --- END RELATIONAL
1668   0D95 C0 00 00      cmp b, 0
1669   0D98 C6 9E 0D      je _if26_else
1670   0D9B             _if26_true:
1671   0D9B             ; ; 
1672   0D9B 0A AA 0D      jmp _if26_exit
1673   0D9E             _if26_else:
1674   0D9E             ; err("Unexpected format in printf."); 
1675   0D9E 26 7E 31      mov b, _s0 ; "Unexpected format in printf."
1676   0DA1 FD AB         swp b
1677   0DA3 D8            push b
1678   0DA4 07 DD 11      call err
1679   0DA7 51 02 00      add sp, 2
1680   0DAA             _if26_exit:
1681   0DAA             _if25_exit:
1682   0DAA             _if24_exit:
1683   0DAA             ; p = p + 4; 
1684   0DAA FA FF FF      lea d, [bp + -1] ; $p
1685   0DAD DA            push d
1686   0DAE FA FF FF      lea d, [bp + -1] ; $p
1687   0DB1 2A            mov b, [d]
1688   0DB2             ; --- START TERMS
1689   0DB2 D7            push a
1690   0DB3 11            mov a, b
1691   0DB4 26 04 00      mov b, $4
1692   0DB7 56            add b, a
1693   0DB8 E4            pop a
1694   0DB9             ; --- END TERMS
1695   0DB9 E7            pop d
1696   0DBA FD 43         mov [d], b
1697   0DBC             ; break; 
1698   0DBC 0A A5 0E      jmp _switch23_exit ; case break
1699   0DBF             _switch23_case2:
1700   0DBF             _switch23_case3:
1701   0DBF             ; i = scann(); 
1702   0DBF FA FA FF      lea d, [bp + -6] ; $i
1703   0DC2 DA            push d
1704   0DC3 07 0E 1D      call scann
1705   0DC6 E7            pop d
1706   0DC7 FD 43         mov [d], b
1707   0DC9             ; **(int **)p = i; 
1708   0DC9 FA FF FF      lea d, [bp + -1] ; $p
1709   0DCC 2A            mov b, [d]
1710   0DCD 74            mov d, b
1711   0DCE 2A            mov b, [d]
1712   0DCF D8            push b
1713   0DD0 FA FA FF      lea d, [bp + -6] ; $i
1714   0DD3 2A            mov b, [d]
1715   0DD4 E7            pop d
1716   0DD5 FD 43         mov [d], b
1717   0DD7             ; p = p + 2; 
1718   0DD7 FA FF FF      lea d, [bp + -1] ; $p
1719   0DDA DA            push d
1720   0DDB FA FF FF      lea d, [bp + -1] ; $p
1721   0DDE 2A            mov b, [d]
1722   0DDF             ; --- START TERMS
1723   0DDF D7            push a
1724   0DE0 11            mov a, b
1725   0DE1 26 02 00      mov b, $2
1726   0DE4 56            add b, a
1727   0DE5 E4            pop a
1728   0DE6             ; --- END TERMS
1729   0DE6 E7            pop d
1730   0DE7 FD 43         mov [d], b
1731   0DE9             ; break; 
1732   0DE9 0A A5 0E      jmp _switch23_exit ; case break
1733   0DEC             _switch23_case4:
1734   0DEC             ; i = scann(); 
1735   0DEC FA FA FF      lea d, [bp + -6] ; $i
1736   0DEF DA            push d
1737   0DF0 07 0E 1D      call scann
1738   0DF3 E7            pop d
1739   0DF4 FD 43         mov [d], b
1740   0DF6             ; **(int **)p = i; 
1741   0DF6 FA FF FF      lea d, [bp + -1] ; $p
1742   0DF9 2A            mov b, [d]
1743   0DFA 74            mov d, b
1744   0DFB 2A            mov b, [d]
1745   0DFC D8            push b
1746   0DFD FA FA FF      lea d, [bp + -6] ; $i
1747   0E00 2A            mov b, [d]
1748   0E01 E7            pop d
1749   0E02 FD 43         mov [d], b
1750   0E04             ; p = p + 2; 
1751   0E04 FA FF FF      lea d, [bp + -1] ; $p
1752   0E07 DA            push d
1753   0E08 FA FF FF      lea d, [bp + -1] ; $p
1754   0E0B 2A            mov b, [d]
1755   0E0C             ; --- START TERMS
1756   0E0C D7            push a
1757   0E0D 11            mov a, b
1758   0E0E 26 02 00      mov b, $2
1759   0E11 56            add b, a
1760   0E12 E4            pop a
1761   0E13             ; --- END TERMS
1762   0E13 E7            pop d
1763   0E14 FD 43         mov [d], b
1764   0E16             ; break; 
1765   0E16 0A A5 0E      jmp _switch23_exit ; case break
1766   0E19             _switch23_case5:
1767   0E19             ; p = p + 2; 
1768   0E19 FA FF FF      lea d, [bp + -1] ; $p
1769   0E1C DA            push d
1770   0E1D FA FF FF      lea d, [bp + -1] ; $p
1771   0E20 2A            mov b, [d]
1772   0E21             ; --- START TERMS
1773   0E21 D7            push a
1774   0E22 11            mov a, b
1775   0E23 26 02 00      mov b, $2
1776   0E26 56            add b, a
1777   0E27 E4            pop a
1778   0E28             ; --- END TERMS
1779   0E28 E7            pop d
1780   0E29 FD 43         mov [d], b
1781   0E2B             ; break; 
1782   0E2B 0A A5 0E      jmp _switch23_exit ; case break
1783   0E2E             _switch23_case6:
1784   0E2E             ; c = getchar(); 
1785   0E2E FA FC FF      lea d, [bp + -4] ; $c
1786   0E31 DA            push d
1787   0E32 07 F8 1C      call getchar
1788   0E35 E7            pop d
1789   0E36 FD 3E         mov [d], bl
1790   0E38             ; **(char **)p = *(char *)c; 
1791   0E38 FA FF FF      lea d, [bp + -1] ; $p
1792   0E3B 2A            mov b, [d]
1793   0E3C 74            mov d, b
1794   0E3D 2A            mov b, [d]
1795   0E3E D8            push b
1796   0E3F FA FC FF      lea d, [bp + -4] ; $c
1797   0E42 32            mov bl, [d]
1798   0E43 A7 00         mov bh, 0
1799   0E45 74            mov d, b
1800   0E46 32            mov bl, [d]
1801   0E47 A7 00         mov bh, 0
1802   0E49 E7            pop d
1803   0E4A FD 43         mov [d], b
1804   0E4C             ; p = p + 1; 
1805   0E4C FA FF FF      lea d, [bp + -1] ; $p
1806   0E4F DA            push d
1807   0E50 FA FF FF      lea d, [bp + -1] ; $p
1808   0E53 2A            mov b, [d]
1809   0E54             ; --- START TERMS
1810   0E54 D7            push a
1811   0E55 11            mov a, b
1812   0E56 26 01 00      mov b, $1
1813   0E59 56            add b, a
1814   0E5A E4            pop a
1815   0E5B             ; --- END TERMS
1816   0E5B E7            pop d
1817   0E5C FD 43         mov [d], b
1818   0E5E             ; break; 
1819   0E5E 0A A5 0E      jmp _switch23_exit ; case break
1820   0E61             _switch23_case7:
1821   0E61             ; gets(input_string); 
1822   0E61 FA FA FD      lea d, [bp + -518] ; $input_string
1823   0E64 2D            mov b, d
1824   0E65 FD AB         swp b
1825   0E67 D8            push b
1826   0E68 07 69 13      call gets
1827   0E6B 51 02 00      add sp, 2
1828   0E6E             ; strcpy(*(char **)p, input_string); 
1829   0E6E FA FA FD      lea d, [bp + -518] ; $input_string
1830   0E71 2D            mov b, d
1831   0E72 FD AB         swp b
1832   0E74 D8            push b
1833   0E75 FA FF FF      lea d, [bp + -1] ; $p
1834   0E78 2A            mov b, [d]
1835   0E79 74            mov d, b
1836   0E7A 2A            mov b, [d]
1837   0E7B FD AB         swp b
1838   0E7D D8            push b
1839   0E7E 07 7D 06      call strcpy
1840   0E81 51 04 00      add sp, 4
1841   0E84             ; p = p + 2; 
1842   0E84 FA FF FF      lea d, [bp + -1] ; $p
1843   0E87 DA            push d
1844   0E88 FA FF FF      lea d, [bp + -1] ; $p
1845   0E8B 2A            mov b, [d]
1846   0E8C             ; --- START TERMS
1847   0E8C D7            push a
1848   0E8D 11            mov a, b
1849   0E8E 26 02 00      mov b, $2
1850   0E91 56            add b, a
1851   0E92 E4            pop a
1852   0E93             ; --- END TERMS
1853   0E93 E7            pop d
1854   0E94 FD 43         mov [d], b
1855   0E96             ; break; 
1856   0E96 0A A5 0E      jmp _switch23_exit ; case break
1857   0E99             _switch23_default:
1858   0E99             ; print("Error: Unknown argument type.\n"); 
1859   0E99 26 9B 31      mov b, _s1 ; "Error: Unknown argument type.\n"
1860   0E9C FD AB         swp b
1861   0E9E D8            push b
1862   0E9F 07 33 1D      call print
1863   0EA2 51 02 00      add sp, 2
1864   0EA5             _switch23_exit:
1865   0EA5             ; format_p++; 
1866   0EA5 FA FD FF      lea d, [bp + -3] ; $format_p
1867   0EA8 2A            mov b, [d]
1868   0EA9 FD 77         inc b
1869   0EAB FA FD FF      lea d, [bp + -3] ; $format_p
1870   0EAE FD 43         mov [d], b
1871   0EB0 FD 7D         dec b
1872   0EB2 0A D1 0E      jmp _if22_exit
1873   0EB5             _if22_else:
1874   0EB5             ; putchar(*format_p); 
1875   0EB5 FA FD FF      lea d, [bp + -3] ; $format_p
1876   0EB8 2A            mov b, [d]
1877   0EB9 74            mov d, b
1878   0EBA 32            mov bl, [d]
1879   0EBB A7 00         mov bh, 0
1880   0EBD DD            push bl
1881   0EBE 07 EB 1C      call putchar
1882   0EC1 51 01 00      add sp, 1
1883   0EC4             ; format_p++; 
1884   0EC4 FA FD FF      lea d, [bp + -3] ; $format_p
1885   0EC7 2A            mov b, [d]
1886   0EC8 FD 77         inc b
1887   0ECA FA FD FF      lea d, [bp + -3] ; $format_p
1888   0ECD FD 43         mov [d], b
1889   0ECF FD 7D         dec b
1890   0ED1             _if22_exit:
1891   0ED1             _if21_exit:
1892   0ED1             _for20_update:
1893   0ED1 0A BA 0C      jmp _for20_cond
1894   0ED4             _for20_exit:
1895   0ED4 F9            leave
1896   0ED5 09            ret
1897   0ED6             
1898   0ED6             sprintf:
1899   0ED6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1900   0ED9             ; char *p, *format_p; 
1901   0ED9 52 02 00      sub sp, 2
1902   0EDC 52 02 00      sub sp, 2
1903   0EDF             ; char *sp; 
1904   0EDF 52 02 00      sub sp, 2
1905   0EE2             ; sp = dest; 
1906   0EE2 FA FB FF      lea d, [bp + -5] ; $sp
1907   0EE5 DA            push d
1908   0EE6 FA 05 00      lea d, [bp + 5] ; $dest
1909   0EE9 2A            mov b, [d]
1910   0EEA E7            pop d
1911   0EEB FD 43         mov [d], b
1912   0EED             ; format_p = format; 
1913   0EED FA FD FF      lea d, [bp + -3] ; $format_p
1914   0EF0 DA            push d
1915   0EF1 FA 07 00      lea d, [bp + 7] ; $format
1916   0EF4 2A            mov b, [d]
1917   0EF5 E7            pop d
1918   0EF6 FD 43         mov [d], b
1919   0EF8             ; p = &format + 2; 
1920   0EF8 FA FF FF      lea d, [bp + -1] ; $p
1921   0EFB DA            push d
1922   0EFC FA 07 00      lea d, [bp + 7] ; $format
1923   0EFF 2D            mov b, d
1924   0F00             ; --- START TERMS
1925   0F00 D7            push a
1926   0F01 11            mov a, b
1927   0F02 26 02 00      mov b, $2
1928   0F05 56            add b, a
1929   0F06 E4            pop a
1930   0F07             ; --- END TERMS
1931   0F07 E7            pop d
1932   0F08 FD 43         mov [d], b
1933   0F0A             ; for(;;){ 
1934   0F0A             _for27_init:
1935   0F0A             _for27_cond:
1936   0F0A             _for27_block:
1937   0F0A             ; if(!*format_p) break; 
1938   0F0A             _if28_cond:
1939   0F0A FA FD FF      lea d, [bp + -3] ; $format_p
1940   0F0D 2A            mov b, [d]
1941   0F0E 74            mov d, b
1942   0F0F 32            mov bl, [d]
1943   0F10 A7 00         mov bh, 0
1944   0F12 C0 00 00      cmp b, 0
1945   0F15 FD 71         seq ; !
1946   0F17 C0 00 00      cmp b, 0
1947   0F1A C6 23 0F      je _if28_else
1948   0F1D             _if28_true:
1949   0F1D             ; break; 
1950   0F1D 0A C3 11      jmp _for27_exit ; for break
1951   0F20 0A C0 11      jmp _if28_exit
1952   0F23             _if28_else:
1953   0F23             ; if(*format_p == '%'){ 
1954   0F23             _if29_cond:
1955   0F23 FA FD FF      lea d, [bp + -3] ; $format_p
1956   0F26 2A            mov b, [d]
1957   0F27 74            mov d, b
1958   0F28 32            mov bl, [d]
1959   0F29 A7 00         mov bh, 0
1960   0F2B             ; --- START RELATIONAL
1961   0F2B D7            push a
1962   0F2C 11            mov a, b
1963   0F2D 26 25 00      mov b, $25
1964   0F30 B0            cmp a, b
1965   0F31 FD 71         seq ; ==
1966   0F33 E4            pop a
1967   0F34             ; --- END RELATIONAL
1968   0F34 C0 00 00      cmp b, 0
1969   0F37 C6 9E 11      je _if29_else
1970   0F3A             _if29_true:
1971   0F3A             ; format_p++; 
1972   0F3A FA FD FF      lea d, [bp + -3] ; $format_p
1973   0F3D 2A            mov b, [d]
1974   0F3E FD 77         inc b
1975   0F40 FA FD FF      lea d, [bp + -3] ; $format_p
1976   0F43 FD 43         mov [d], b
1977   0F45 FD 7D         dec b
1978   0F47             ; switch(*format_p){ 
1979   0F47             _switch30_expr:
1980   0F47 FA FD FF      lea d, [bp + -3] ; $format_p
1981   0F4A 2A            mov b, [d]
1982   0F4B 74            mov d, b
1983   0F4C 32            mov bl, [d]
1984   0F4D A7 00         mov bh, 0
1985   0F4F             _switch30_comparisons:
1986   0F4F C1 6C         cmp bl, $6c
1987   0F51 C6 7D 0F      je _switch30_case0
1988   0F54 C1 4C         cmp bl, $4c
1989   0F56 C6 7D 0F      je _switch30_case1
1990   0F59 C1 64         cmp bl, $64
1991   0F5B C6 6B 10      je _switch30_case2
1992   0F5E C1 69         cmp bl, $69
1993   0F60 C6 6B 10      je _switch30_case3
1994   0F63 C1 75         cmp bl, $75
1995   0F65 C6 A5 10      je _switch30_case4
1996   0F68 C1 78         cmp bl, $78
1997   0F6A C6 DF 10      je _switch30_case5
1998   0F6D C1 63         cmp bl, $63
1999   0F6F C6 FD 10      je _switch30_case6
2000   0F72 C1 73         cmp bl, $73
2001   0F74 C6 2B 11      je _switch30_case7
2002   0F77 0A 82 11      jmp _switch30_default
2003   0F7A 0A 8E 11      jmp _switch30_exit
2004   0F7D             _switch30_case0:
2005   0F7D             _switch30_case1:
2006   0F7D             ; format_p++; 
2007   0F7D FA FD FF      lea d, [bp + -3] ; $format_p
2008   0F80 2A            mov b, [d]
2009   0F81 FD 77         inc b
2010   0F83 FA FD FF      lea d, [bp + -3] ; $format_p
2011   0F86 FD 43         mov [d], b
2012   0F88 FD 7D         dec b
2013   0F8A             ; if(*format_p == 'd' || *format_p == 'i') 
2014   0F8A             _if31_cond:
2015   0F8A FA FD FF      lea d, [bp + -3] ; $format_p
2016   0F8D 2A            mov b, [d]
2017   0F8E 74            mov d, b
2018   0F8F 32            mov bl, [d]
2019   0F90 A7 00         mov bh, 0
2020   0F92             ; --- START RELATIONAL
2021   0F92 D7            push a
2022   0F93 11            mov a, b
2023   0F94 26 64 00      mov b, $64
2024   0F97 B0            cmp a, b
2025   0F98 FD 71         seq ; ==
2026   0F9A E4            pop a
2027   0F9B             ; --- END RELATIONAL
2028   0F9B             ; --- START LOGICAL OR
2029   0F9B D7            push a
2030   0F9C 11            mov a, b
2031   0F9D FA FD FF      lea d, [bp + -3] ; $format_p
2032   0FA0 2A            mov b, [d]
2033   0FA1 74            mov d, b
2034   0FA2 32            mov bl, [d]
2035   0FA3 A7 00         mov bh, 0
2036   0FA5             ; --- START RELATIONAL
2037   0FA5 D7            push a
2038   0FA6 11            mov a, b
2039   0FA7 26 69 00      mov b, $69
2040   0FAA B0            cmp a, b
2041   0FAB FD 71         seq ; ==
2042   0FAD E4            pop a
2043   0FAE             ; --- END RELATIONAL
2044   0FAE FD A8         sor a, b ; ||
2045   0FB0 E4            pop a
2046   0FB1             ; --- END LOGICAL OR
2047   0FB1 C0 00 00      cmp b, 0
2048   0FB4 C6 D9 0F      je _if31_else
2049   0FB7             _if31_true:
2050   0FB7             ; print_signed_long(*(long *)p); 
2051   0FB7 FA FF FF      lea d, [bp + -1] ; $p
2052   0FBA 2A            mov b, [d]
2053   0FBB AB            snex b
2054   0FBC FD 39         mov c, b
2055   0FBE 74            mov d, b
2056   0FBF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2057   0FC2 FD 39         mov c, b ; And place it into C
2058   0FC4 2A            mov b, [d] ; Lower Word in B
2059   0FC5 FD 79         mov g, b
2060   0FC7 28            mov b, c
2061   0FC8 FD AB         swp b
2062   0FCA D8            push b
2063   0FCB FD 27         mov b, g
2064   0FCD FD AB         swp b
2065   0FCF D8            push b
2066   0FD0 07 7A 14      call print_signed_long
2067   0FD3 51 04 00      add sp, 4
2068   0FD6 0A 56 10      jmp _if31_exit
2069   0FD9             _if31_else:
2070   0FD9             ; if(*format_p == 'u') 
2071   0FD9             _if32_cond:
2072   0FD9 FA FD FF      lea d, [bp + -3] ; $format_p
2073   0FDC 2A            mov b, [d]
2074   0FDD 74            mov d, b
2075   0FDE 32            mov bl, [d]
2076   0FDF A7 00         mov bh, 0
2077   0FE1             ; --- START RELATIONAL
2078   0FE1 D7            push a
2079   0FE2 11            mov a, b
2080   0FE3 26 75 00      mov b, $75
2081   0FE6 B0            cmp a, b
2082   0FE7 FD 71         seq ; ==
2083   0FE9 E4            pop a
2084   0FEA             ; --- END RELATIONAL
2085   0FEA C0 00 00      cmp b, 0
2086   0FED C6 14 10      je _if32_else
2087   0FF0             _if32_true:
2088   0FF0             ; print_unsigned_long(*(unsigned long *)p); 
2089   0FF0 FA FF FF      lea d, [bp + -1] ; $p
2090   0FF3 2A            mov b, [d]
2091   0FF4 A7 00         mov bh, 0
2092   0FF6 38 00 00      mov c, 0
2093   0FF9 74            mov d, b
2094   0FFA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2095   0FFD FD 39         mov c, b ; And place it into C
2096   0FFF 2A            mov b, [d] ; Lower Word in B
2097   1000 FD 79         mov g, b
2098   1002 28            mov b, c
2099   1003 FD AB         swp b
2100   1005 D8            push b
2101   1006 FD 27         mov b, g
2102   1008 FD AB         swp b
2103   100A D8            push b
2104   100B 07 BA 17      call print_unsigned_long
2105   100E 51 04 00      add sp, 4
2106   1011 0A 56 10      jmp _if32_exit
2107   1014             _if32_else:
2108   1014             ; if(*format_p == 'x') 
2109   1014             _if33_cond:
2110   1014 FA FD FF      lea d, [bp + -3] ; $format_p
2111   1017 2A            mov b, [d]
2112   1018 74            mov d, b
2113   1019 32            mov bl, [d]
2114   101A A7 00         mov bh, 0
2115   101C             ; --- START RELATIONAL
2116   101C D7            push a
2117   101D 11            mov a, b
2118   101E 26 78 00      mov b, $78
2119   1021 B0            cmp a, b
2120   1022 FD 71         seq ; ==
2121   1024 E4            pop a
2122   1025             ; --- END RELATIONAL
2123   1025 C0 00 00      cmp b, 0
2124   1028 C6 4A 10      je _if33_else
2125   102B             _if33_true:
2126   102B             ; printx32(*(long int *)p); 
2127   102B FA FF FF      lea d, [bp + -1] ; $p
2128   102E 2A            mov b, [d]
2129   102F 74            mov d, b
2130   1030 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2131   1033 FD 39         mov c, b ; And place it into C
2132   1035 2A            mov b, [d] ; Lower Word in B
2133   1036 FD 79         mov g, b
2134   1038 28            mov b, c
2135   1039 FD AB         swp b
2136   103B D8            push b
2137   103C FD 27         mov b, g
2138   103E FD AB         swp b
2139   1040 D8            push b
2140   1041 07 EF 11      call printx32
2141   1044 51 04 00      add sp, 4
2142   1047 0A 56 10      jmp _if33_exit
2143   104A             _if33_else:
2144   104A             ; err("Unexpected format in printf."); 
2145   104A 26 7E 31      mov b, _s0 ; "Unexpected format in printf."
2146   104D FD AB         swp b
2147   104F D8            push b
2148   1050 07 DD 11      call err
2149   1053 51 02 00      add sp, 2
2150   1056             _if33_exit:
2151   1056             _if32_exit:
2152   1056             _if31_exit:
2153   1056             ; p = p + 4; 
2154   1056 FA FF FF      lea d, [bp + -1] ; $p
2155   1059 DA            push d
2156   105A FA FF FF      lea d, [bp + -1] ; $p
2157   105D 2A            mov b, [d]
2158   105E             ; --- START TERMS
2159   105E D7            push a
2160   105F 11            mov a, b
2161   1060 26 04 00      mov b, $4
2162   1063 56            add b, a
2163   1064 E4            pop a
2164   1065             ; --- END TERMS
2165   1065 E7            pop d
2166   1066 FD 43         mov [d], b
2167   1068             ; break; 
2168   1068 0A 8E 11      jmp _switch30_exit ; case break
2169   106B             _switch30_case2:
2170   106B             _switch30_case3:
2171   106B             ; sp = sp + sprint_signed(sp, *(int*)p); 
2172   106B FA FB FF      lea d, [bp + -5] ; $sp
2173   106E DA            push d
2174   106F FA FB FF      lea d, [bp + -5] ; $sp
2175   1072 2A            mov b, [d]
2176   1073             ; --- START TERMS
2177   1073 D7            push a
2178   1074 11            mov a, b
2179   1075 FA FF FF      lea d, [bp + -1] ; $p
2180   1078 2A            mov b, [d]
2181   1079 74            mov d, b
2182   107A 2A            mov b, [d]
2183   107B FD AB         swp b
2184   107D D8            push b
2185   107E FA FB FF      lea d, [bp + -5] ; $sp
2186   1081 2A            mov b, [d]
2187   1082 FD AB         swp b
2188   1084 D8            push b
2189   1085 07 89 1B      call sprint_signed
2190   1088 51 04 00      add sp, 4
2191   108B 56            add b, a
2192   108C E4            pop a
2193   108D             ; --- END TERMS
2194   108D E7            pop d
2195   108E FD 43         mov [d], b
2196   1090             ; p = p + 2; 
2197   1090 FA FF FF      lea d, [bp + -1] ; $p
2198   1093 DA            push d
2199   1094 FA FF FF      lea d, [bp + -1] ; $p
2200   1097 2A            mov b, [d]
2201   1098             ; --- START TERMS
2202   1098 D7            push a
2203   1099 11            mov a, b
2204   109A 26 02 00      mov b, $2
2205   109D 56            add b, a
2206   109E E4            pop a
2207   109F             ; --- END TERMS
2208   109F E7            pop d
2209   10A0 FD 43         mov [d], b
2210   10A2             ; break; 
2211   10A2 0A 8E 11      jmp _switch30_exit ; case break
2212   10A5             _switch30_case4:
2213   10A5             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
2214   10A5 FA FB FF      lea d, [bp + -5] ; $sp
2215   10A8 DA            push d
2216   10A9 FA FB FF      lea d, [bp + -5] ; $sp
2217   10AC 2A            mov b, [d]
2218   10AD             ; --- START TERMS
2219   10AD D7            push a
2220   10AE 11            mov a, b
2221   10AF FA FF FF      lea d, [bp + -1] ; $p
2222   10B2 2A            mov b, [d]
2223   10B3 74            mov d, b
2224   10B4 2A            mov b, [d]
2225   10B5 FD AB         swp b
2226   10B7 D8            push b
2227   10B8 FA FB FF      lea d, [bp + -5] ; $sp
2228   10BB 2A            mov b, [d]
2229   10BC FD AB         swp b
2230   10BE D8            push b
2231   10BF 07 B5 19      call sprint_unsigned
2232   10C2 51 04 00      add sp, 4
2233   10C5 56            add b, a
2234   10C6 E4            pop a
2235   10C7             ; --- END TERMS
2236   10C7 E7            pop d
2237   10C8 FD 43         mov [d], b
2238   10CA             ; p = p + 2; 
2239   10CA FA FF FF      lea d, [bp + -1] ; $p
2240   10CD DA            push d
2241   10CE FA FF FF      lea d, [bp + -1] ; $p
2242   10D1 2A            mov b, [d]
2243   10D2             ; --- START TERMS
2244   10D2 D7            push a
2245   10D3 11            mov a, b
2246   10D4 26 02 00      mov b, $2
2247   10D7 56            add b, a
2248   10D8 E4            pop a
2249   10D9             ; --- END TERMS
2250   10D9 E7            pop d
2251   10DA FD 43         mov [d], b
2252   10DC             ; break; 
2253   10DC 0A 8E 11      jmp _switch30_exit ; case break
2254   10DF             _switch30_case5:
2255   10DF             
2256   10DF             ; --- BEGIN INLINE ASM SEGMENT
2257   10DF FA FF FF      lea d, [bp + -1] ; $p
2258   10E2 FD 2A         mov d, [d]
2259   10E4 2A            mov b, [d]
2260   10E5 07 1E 20      call print_u16x
2261   10E8             ; --- END INLINE ASM SEGMENT
2262   10E8             
2263   10E8             ; p = p + 2; 
2264   10E8 FA FF FF      lea d, [bp + -1] ; $p
2265   10EB DA            push d
2266   10EC FA FF FF      lea d, [bp + -1] ; $p
2267   10EF 2A            mov b, [d]
2268   10F0             ; --- START TERMS
2269   10F0 D7            push a
2270   10F1 11            mov a, b
2271   10F2 26 02 00      mov b, $2
2272   10F5 56            add b, a
2273   10F6 E4            pop a
2274   10F7             ; --- END TERMS
2275   10F7 E7            pop d
2276   10F8 FD 43         mov [d], b
2277   10FA             ; break; 
2278   10FA 0A 8E 11      jmp _switch30_exit ; case break
2279   10FD             _switch30_case6:
2280   10FD             ; *sp++ = *(char *)p; 
2281   10FD FA FB FF      lea d, [bp + -5] ; $sp
2282   1100 2A            mov b, [d]
2283   1101 FD 77         inc b
2284   1103 FA FB FF      lea d, [bp + -5] ; $sp
2285   1106 FD 43         mov [d], b
2286   1108 FD 7D         dec b
2287   110A D8            push b
2288   110B FA FF FF      lea d, [bp + -1] ; $p
2289   110E 2A            mov b, [d]
2290   110F 74            mov d, b
2291   1110 32            mov bl, [d]
2292   1111 A7 00         mov bh, 0
2293   1113 E7            pop d
2294   1114 FD 3E         mov [d], bl
2295   1116             ; p = p + 1; 
2296   1116 FA FF FF      lea d, [bp + -1] ; $p
2297   1119 DA            push d
2298   111A FA FF FF      lea d, [bp + -1] ; $p
2299   111D 2A            mov b, [d]
2300   111E             ; --- START TERMS
2301   111E D7            push a
2302   111F 11            mov a, b
2303   1120 26 01 00      mov b, $1
2304   1123 56            add b, a
2305   1124 E4            pop a
2306   1125             ; --- END TERMS
2307   1125 E7            pop d
2308   1126 FD 43         mov [d], b
2309   1128             ; break; 
2310   1128 0A 8E 11      jmp _switch30_exit ; case break
2311   112B             _switch30_case7:
2312   112B             ; int len = strlen(*(char **)p); 
2313   112B 52 02 00      sub sp, 2
2314   112E             ; --- START LOCAL VAR INITIALIZATION
2315   112E FA F9 FF      lea d, [bp + -7] ; $len
2316   1131 DA            push d
2317   1132 FA FF FF      lea d, [bp + -1] ; $p
2318   1135 2A            mov b, [d]
2319   1136 74            mov d, b
2320   1137 2A            mov b, [d]
2321   1138 FD AB         swp b
2322   113A D8            push b
2323   113B 07 F7 07      call strlen
2324   113E 51 02 00      add sp, 2
2325   1141 E7            pop d
2326   1142 FD 43         mov [d], b
2327   1144             ; --- END LOCAL VAR INITIALIZATION
2328   1144             ; strcpy(sp, *(char **)p); 
2329   1144 FA FF FF      lea d, [bp + -1] ; $p
2330   1147 2A            mov b, [d]
2331   1148 74            mov d, b
2332   1149 2A            mov b, [d]
2333   114A FD AB         swp b
2334   114C D8            push b
2335   114D FA FB FF      lea d, [bp + -5] ; $sp
2336   1150 2A            mov b, [d]
2337   1151 FD AB         swp b
2338   1153 D8            push b
2339   1154 07 7D 06      call strcpy
2340   1157 51 04 00      add sp, 4
2341   115A             ; sp = sp + len; 
2342   115A FA FB FF      lea d, [bp + -5] ; $sp
2343   115D DA            push d
2344   115E FA FB FF      lea d, [bp + -5] ; $sp
2345   1161 2A            mov b, [d]
2346   1162             ; --- START TERMS
2347   1162 D7            push a
2348   1163 11            mov a, b
2349   1164 FA F9 FF      lea d, [bp + -7] ; $len
2350   1167 2A            mov b, [d]
2351   1168 56            add b, a
2352   1169 E4            pop a
2353   116A             ; --- END TERMS
2354   116A E7            pop d
2355   116B FD 43         mov [d], b
2356   116D             ; p = p + 2; 
2357   116D FA FF FF      lea d, [bp + -1] ; $p
2358   1170 DA            push d
2359   1171 FA FF FF      lea d, [bp + -1] ; $p
2360   1174 2A            mov b, [d]
2361   1175             ; --- START TERMS
2362   1175 D7            push a
2363   1176 11            mov a, b
2364   1177 26 02 00      mov b, $2
2365   117A 56            add b, a
2366   117B E4            pop a
2367   117C             ; --- END TERMS
2368   117C E7            pop d
2369   117D FD 43         mov [d], b
2370   117F             ; break; 
2371   117F 0A 8E 11      jmp _switch30_exit ; case break
2372   1182             _switch30_default:
2373   1182             ; print("Error: Unknown argument type.\n"); 
2374   1182 26 9B 31      mov b, _s1 ; "Error: Unknown argument type.\n"
2375   1185 FD AB         swp b
2376   1187 D8            push b
2377   1188 07 33 1D      call print
2378   118B 51 02 00      add sp, 2
2379   118E             _switch30_exit:
2380   118E             ; format_p++; 
2381   118E FA FD FF      lea d, [bp + -3] ; $format_p
2382   1191 2A            mov b, [d]
2383   1192 FD 77         inc b
2384   1194 FA FD FF      lea d, [bp + -3] ; $format_p
2385   1197 FD 43         mov [d], b
2386   1199 FD 7D         dec b
2387   119B 0A C0 11      jmp _if29_exit
2388   119E             _if29_else:
2389   119E             ; *sp++ = *format_p++; 
2390   119E FA FB FF      lea d, [bp + -5] ; $sp
2391   11A1 2A            mov b, [d]
2392   11A2 FD 77         inc b
2393   11A4 FA FB FF      lea d, [bp + -5] ; $sp
2394   11A7 FD 43         mov [d], b
2395   11A9 FD 7D         dec b
2396   11AB D8            push b
2397   11AC FA FD FF      lea d, [bp + -3] ; $format_p
2398   11AF 2A            mov b, [d]
2399   11B0 FD 77         inc b
2400   11B2 FA FD FF      lea d, [bp + -3] ; $format_p
2401   11B5 FD 43         mov [d], b
2402   11B7 FD 7D         dec b
2403   11B9 74            mov d, b
2404   11BA 32            mov bl, [d]
2405   11BB A7 00         mov bh, 0
2406   11BD E7            pop d
2407   11BE FD 3E         mov [d], bl
2408   11C0             _if29_exit:
2409   11C0             _if28_exit:
2410   11C0             _for27_update:
2411   11C0 0A 0A 0F      jmp _for27_cond
2412   11C3             _for27_exit:
2413   11C3             ; *sp = '\0'; 
2414   11C3 FA FB FF      lea d, [bp + -5] ; $sp
2415   11C6 2A            mov b, [d]
2416   11C7 D8            push b
2417   11C8 26 00 00      mov b, $0
2418   11CB E7            pop d
2419   11CC FD 3E         mov [d], bl
2420   11CE             ; return sp - dest; // return total number of chars written 
2421   11CE FA FB FF      lea d, [bp + -5] ; $sp
2422   11D1 2A            mov b, [d]
2423   11D2             ; --- START TERMS
2424   11D2 D7            push a
2425   11D3 11            mov a, b
2426   11D4 FA 05 00      lea d, [bp + 5] ; $dest
2427   11D7 2A            mov b, [d]
2428   11D8 60            sub a, b
2429   11D9 27            mov b, a
2430   11DA E4            pop a
2431   11DB             ; --- END TERMS
2432   11DB F9            leave
2433   11DC 09            ret
2434   11DD             
2435   11DD             err:
2436   11DD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2437   11E0             ; print(e); 
2438   11E0 FA 05 00      lea d, [bp + 5] ; $e
2439   11E3 2A            mov b, [d]
2440   11E4 FD AB         swp b
2441   11E6 D8            push b
2442   11E7 07 33 1D      call print
2443   11EA 51 02 00      add sp, 2
2444   11ED F9            leave
2445   11EE 09            ret
2446   11EF             
2447   11EF             printx32:
2448   11EF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2449   11F2             
2450   11F2             ; --- BEGIN INLINE ASM SEGMENT
2451   11F2 FA 05 00      lea d, [bp + 5] ; $hex
2452   11F5 2B 02 00      mov b, [d+2]
2453   11F8 07 1E 20      call print_u16x
2454   11FB 2A            mov b, [d]
2455   11FC 07 1E 20      call print_u16x
2456   11FF             ; --- END INLINE ASM SEGMENT
2457   11FF             
2458   11FF F9            leave
2459   1200 09            ret
2460   1201             
2461   1201             printx16:
2462   1201 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2463   1204             
2464   1204             ; --- BEGIN INLINE ASM SEGMENT
2465   1204 FA 05 00      lea d, [bp + 5] ; $hex
2466   1207 2A            mov b, [d]
2467   1208 07 1E 20      call print_u16x
2468   120B             ; --- END INLINE ASM SEGMENT
2469   120B             
2470   120B F9            leave
2471   120C 09            ret
2472   120D             
2473   120D             printx8:
2474   120D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2475   1210             
2476   1210             ; --- BEGIN INLINE ASM SEGMENT
2477   1210 FA 05 00      lea d, [bp + 5] ; $hex
2478   1213 32            mov bl, [d]
2479   1214 07 62 20      call print_u8x
2480   1217             ; --- END INLINE ASM SEGMENT
2481   1217             
2482   1217 F9            leave
2483   1218 09            ret
2484   1219             
2485   1219             hex_str_to_int:
2486   1219 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2487   121C             ; int value = 0; 
2488   121C 52 02 00      sub sp, 2
2489   121F             ; --- START LOCAL VAR INITIALIZATION
2490   121F FA FF FF      lea d, [bp + -1] ; $value
2491   1222 DA            push d
2492   1223 26 00 00      mov b, $0
2493   1226 E7            pop d
2494   1227 FD 43         mov [d], b
2495   1229             ; --- END LOCAL VAR INITIALIZATION
2496   1229             ; int i; 
2497   1229 52 02 00      sub sp, 2
2498   122C             ; char hex_char; 
2499   122C 52 01 00      sub sp, 1
2500   122F             ; int len; 
2501   122F 52 02 00      sub sp, 2
2502   1232             ; len = strlen(hex_string); 
2503   1232 FA FA FF      lea d, [bp + -6] ; $len
2504   1235 DA            push d
2505   1236 FA 05 00      lea d, [bp + 5] ; $hex_string
2506   1239 2A            mov b, [d]
2507   123A FD AB         swp b
2508   123C D8            push b
2509   123D 07 F7 07      call strlen
2510   1240 51 02 00      add sp, 2
2511   1243 E7            pop d
2512   1244 FD 43         mov [d], b
2513   1246             ; for (i = 0; i < len; i++) { 
2514   1246             _for34_init:
2515   1246 FA FD FF      lea d, [bp + -3] ; $i
2516   1249 DA            push d
2517   124A 26 00 00      mov b, $0
2518   124D E7            pop d
2519   124E FD 43         mov [d], b
2520   1250             _for34_cond:
2521   1250 FA FD FF      lea d, [bp + -3] ; $i
2522   1253 2A            mov b, [d]
2523   1254             ; --- START RELATIONAL
2524   1254 D7            push a
2525   1255 11            mov a, b
2526   1256 FA FA FF      lea d, [bp + -6] ; $len
2527   1259 2A            mov b, [d]
2528   125A B0            cmp a, b
2529   125B FD 73         slt ; < (signed)
2530   125D E4            pop a
2531   125E             ; --- END RELATIONAL
2532   125E C0 00 00      cmp b, 0
2533   1261 C6 63 13      je _for34_exit
2534   1264             _for34_block:
2535   1264             ; hex_char = hex_string[i]; 
2536   1264 FA FC FF      lea d, [bp + -4] ; $hex_char
2537   1267 DA            push d
2538   1268 FA 05 00      lea d, [bp + 5] ; $hex_string
2539   126B FD 2A         mov d, [d]
2540   126D D7            push a
2541   126E DA            push d
2542   126F FA FD FF      lea d, [bp + -3] ; $i
2543   1272 2A            mov b, [d]
2544   1273 E7            pop d
2545   1274 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2546   1278 E4            pop a
2547   1279 32            mov bl, [d]
2548   127A A7 00         mov bh, 0
2549   127C E7            pop d
2550   127D FD 3E         mov [d], bl
2551   127F             ; if (hex_char >= 'a' && hex_char <= 'f')  
2552   127F             _if35_cond:
2553   127F FA FC FF      lea d, [bp + -4] ; $hex_char
2554   1282 32            mov bl, [d]
2555   1283 A7 00         mov bh, 0
2556   1285             ; --- START RELATIONAL
2557   1285 D7            push a
2558   1286 11            mov a, b
2559   1287 26 61 00      mov b, $61
2560   128A B0            cmp a, b
2561   128B FD 80         sge ; >=
2562   128D E4            pop a
2563   128E             ; --- END RELATIONAL
2564   128E             ; --- START LOGICAL AND
2565   128E D7            push a
2566   128F 11            mov a, b
2567   1290 FA FC FF      lea d, [bp + -4] ; $hex_char
2568   1293 32            mov bl, [d]
2569   1294 A7 00         mov bh, 0
2570   1296             ; --- START RELATIONAL
2571   1296 D7            push a
2572   1297 11            mov a, b
2573   1298 26 66 00      mov b, $66
2574   129B B0            cmp a, b
2575   129C FD 74         sle ; <= (signed)
2576   129E E4            pop a
2577   129F             ; --- END RELATIONAL
2578   129F FD A7         sand a, b
2579   12A1 E4            pop a
2580   12A2             ; --- END LOGICAL AND
2581   12A2 C0 00 00      cmp b, 0
2582   12A5 C6 D6 12      je _if35_else
2583   12A8             _if35_true:
2584   12A8             ; value = (value * 16) + (hex_char - 'a' + 10); 
2585   12A8 FA FF FF      lea d, [bp + -1] ; $value
2586   12AB DA            push d
2587   12AC FA FF FF      lea d, [bp + -1] ; $value
2588   12AF 2A            mov b, [d]
2589   12B0             ; --- START FACTORS
2590   12B0 D7            push a
2591   12B1 11            mov a, b
2592   12B2 26 10 00      mov b, $10
2593   12B5 AC            mul a, b ; *
2594   12B6 11            mov a, b
2595   12B7 27            mov b, a
2596   12B8 E4            pop a
2597   12B9             ; --- END FACTORS
2598   12B9             ; --- START TERMS
2599   12B9 D7            push a
2600   12BA 11            mov a, b
2601   12BB FA FC FF      lea d, [bp + -4] ; $hex_char
2602   12BE 32            mov bl, [d]
2603   12BF A7 00         mov bh, 0
2604   12C1             ; --- START TERMS
2605   12C1 D7            push a
2606   12C2 11            mov a, b
2607   12C3 26 61 00      mov b, $61
2608   12C6 60            sub a, b
2609   12C7 27            mov b, a
2610   12C8 11            mov a, b
2611   12C9 26 0A 00      mov b, $a
2612   12CC 56            add b, a
2613   12CD E4            pop a
2614   12CE             ; --- END TERMS
2615   12CE 56            add b, a
2616   12CF E4            pop a
2617   12D0             ; --- END TERMS
2618   12D0 E7            pop d
2619   12D1 FD 43         mov [d], b
2620   12D3 0A 53 13      jmp _if35_exit
2621   12D6             _if35_else:
2622   12D6             ; if (hex_char >= 'A' && hex_char <= 'F')  
2623   12D6             _if36_cond:
2624   12D6 FA FC FF      lea d, [bp + -4] ; $hex_char
2625   12D9 32            mov bl, [d]
2626   12DA A7 00         mov bh, 0
2627   12DC             ; --- START RELATIONAL
2628   12DC D7            push a
2629   12DD 11            mov a, b
2630   12DE 26 41 00      mov b, $41
2631   12E1 B0            cmp a, b
2632   12E2 FD 80         sge ; >=
2633   12E4 E4            pop a
2634   12E5             ; --- END RELATIONAL
2635   12E5             ; --- START LOGICAL AND
2636   12E5 D7            push a
2637   12E6 11            mov a, b
2638   12E7 FA FC FF      lea d, [bp + -4] ; $hex_char
2639   12EA 32            mov bl, [d]
2640   12EB A7 00         mov bh, 0
2641   12ED             ; --- START RELATIONAL
2642   12ED D7            push a
2643   12EE 11            mov a, b
2644   12EF 26 46 00      mov b, $46
2645   12F2 B0            cmp a, b
2646   12F3 FD 74         sle ; <= (signed)
2647   12F5 E4            pop a
2648   12F6             ; --- END RELATIONAL
2649   12F6 FD A7         sand a, b
2650   12F8 E4            pop a
2651   12F9             ; --- END LOGICAL AND
2652   12F9 C0 00 00      cmp b, 0
2653   12FC C6 2D 13      je _if36_else
2654   12FF             _if36_true:
2655   12FF             ; value = (value * 16) + (hex_char - 'A' + 10); 
2656   12FF FA FF FF      lea d, [bp + -1] ; $value
2657   1302 DA            push d
2658   1303 FA FF FF      lea d, [bp + -1] ; $value
2659   1306 2A            mov b, [d]
2660   1307             ; --- START FACTORS
2661   1307 D7            push a
2662   1308 11            mov a, b
2663   1309 26 10 00      mov b, $10
2664   130C AC            mul a, b ; *
2665   130D 11            mov a, b
2666   130E 27            mov b, a
2667   130F E4            pop a
2668   1310             ; --- END FACTORS
2669   1310             ; --- START TERMS
2670   1310 D7            push a
2671   1311 11            mov a, b
2672   1312 FA FC FF      lea d, [bp + -4] ; $hex_char
2673   1315 32            mov bl, [d]
2674   1316 A7 00         mov bh, 0
2675   1318             ; --- START TERMS
2676   1318 D7            push a
2677   1319 11            mov a, b
2678   131A 26 41 00      mov b, $41
2679   131D 60            sub a, b
2680   131E 27            mov b, a
2681   131F 11            mov a, b
2682   1320 26 0A 00      mov b, $a
2683   1323 56            add b, a
2684   1324 E4            pop a
2685   1325             ; --- END TERMS
2686   1325 56            add b, a
2687   1326 E4            pop a
2688   1327             ; --- END TERMS
2689   1327 E7            pop d
2690   1328 FD 43         mov [d], b
2691   132A 0A 53 13      jmp _if36_exit
2692   132D             _if36_else:
2693   132D             ; value = (value * 16) + (hex_char - '0'); 
2694   132D FA FF FF      lea d, [bp + -1] ; $value
2695   1330 DA            push d
2696   1331 FA FF FF      lea d, [bp + -1] ; $value
2697   1334 2A            mov b, [d]
2698   1335             ; --- START FACTORS
2699   1335 D7            push a
2700   1336 11            mov a, b
2701   1337 26 10 00      mov b, $10
2702   133A AC            mul a, b ; *
2703   133B 11            mov a, b
2704   133C 27            mov b, a
2705   133D E4            pop a
2706   133E             ; --- END FACTORS
2707   133E             ; --- START TERMS
2708   133E D7            push a
2709   133F 11            mov a, b
2710   1340 FA FC FF      lea d, [bp + -4] ; $hex_char
2711   1343 32            mov bl, [d]
2712   1344 A7 00         mov bh, 0
2713   1346             ; --- START TERMS
2714   1346 D7            push a
2715   1347 11            mov a, b
2716   1348 26 30 00      mov b, $30
2717   134B 60            sub a, b
2718   134C 27            mov b, a
2719   134D E4            pop a
2720   134E             ; --- END TERMS
2721   134E 56            add b, a
2722   134F E4            pop a
2723   1350             ; --- END TERMS
2724   1350 E7            pop d
2725   1351 FD 43         mov [d], b
2726   1353             _if36_exit:
2727   1353             _if35_exit:
2728   1353             _for34_update:
2729   1353 FA FD FF      lea d, [bp + -3] ; $i
2730   1356 2A            mov b, [d]
2731   1357 FD 77         inc b
2732   1359 FA FD FF      lea d, [bp + -3] ; $i
2733   135C FD 43         mov [d], b
2734   135E FD 7D         dec b
2735   1360 0A 50 12      jmp _for34_cond
2736   1363             _for34_exit:
2737   1363             ; return value; 
2738   1363 FA FF FF      lea d, [bp + -1] ; $value
2739   1366 2A            mov b, [d]
2740   1367 F9            leave
2741   1368 09            ret
2742   1369             
2743   1369             gets:
2744   1369 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2745   136C             
2746   136C             ; --- BEGIN INLINE ASM SEGMENT
2747   136C FA 05 00      lea d, [bp + 5] ; $s
2748   136F 15            mov a, [d]
2749   1370 3C            mov d, a
2750   1371 07 83 1E      call _gets
2751   1374             ; --- END INLINE ASM SEGMENT
2752   1374             
2753   1374             ; return strlen(s); 
2754   1374 FA 05 00      lea d, [bp + 5] ; $s
2755   1377 2A            mov b, [d]
2756   1378 FD AB         swp b
2757   137A D8            push b
2758   137B 07 F7 07      call strlen
2759   137E 51 02 00      add sp, 2
2760   1381 F9            leave
2761   1382 09            ret
2762   1383             
2763   1383             print_signed:
2764   1383 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2765   1386             ; char digits[5]; 
2766   1386 52 05 00      sub sp, 5
2767   1389             ; int i = 0; 
2768   1389 52 02 00      sub sp, 2
2769   138C             ; --- START LOCAL VAR INITIALIZATION
2770   138C FA FA FF      lea d, [bp + -6] ; $i
2771   138F DA            push d
2772   1390 26 00 00      mov b, $0
2773   1393 E7            pop d
2774   1394 FD 43         mov [d], b
2775   1396             ; --- END LOCAL VAR INITIALIZATION
2776   1396             ; if (num < 0) { 
2777   1396             _if37_cond:
2778   1396 FA 05 00      lea d, [bp + 5] ; $num
2779   1399 2A            mov b, [d]
2780   139A             ; --- START RELATIONAL
2781   139A D7            push a
2782   139B 11            mov a, b
2783   139C 26 00 00      mov b, $0
2784   139F B0            cmp a, b
2785   13A0 FD 73         slt ; < (signed)
2786   13A2 E4            pop a
2787   13A3             ; --- END RELATIONAL
2788   13A3 C0 00 00      cmp b, 0
2789   13A6 C6 C3 13      je _if37_else
2790   13A9             _if37_true:
2791   13A9             ; putchar('-'); 
2792   13A9 26 2D 00      mov b, $2d
2793   13AC DD            push bl
2794   13AD 07 EB 1C      call putchar
2795   13B0 51 01 00      add sp, 1
2796   13B3             ; num = -num; 
2797   13B3 FA 05 00      lea d, [bp + 5] ; $num
2798   13B6 DA            push d
2799   13B7 FA 05 00      lea d, [bp + 5] ; $num
2800   13BA 2A            mov b, [d]
2801   13BB FD 97         neg b
2802   13BD E7            pop d
2803   13BE FD 43         mov [d], b
2804   13C0 0A E5 13      jmp _if37_exit
2805   13C3             _if37_else:
2806   13C3             ; if (num == 0) { 
2807   13C3             _if38_cond:
2808   13C3 FA 05 00      lea d, [bp + 5] ; $num
2809   13C6 2A            mov b, [d]
2810   13C7             ; --- START RELATIONAL
2811   13C7 D7            push a
2812   13C8 11            mov a, b
2813   13C9 26 00 00      mov b, $0
2814   13CC B0            cmp a, b
2815   13CD FD 71         seq ; ==
2816   13CF E4            pop a
2817   13D0             ; --- END RELATIONAL
2818   13D0 C0 00 00      cmp b, 0
2819   13D3 C6 E5 13      je _if38_exit
2820   13D6             _if38_true:
2821   13D6             ; putchar('0'); 
2822   13D6 26 30 00      mov b, $30
2823   13D9 DD            push bl
2824   13DA 07 EB 1C      call putchar
2825   13DD 51 01 00      add sp, 1
2826   13E0             ; return; 
2827   13E0 F9            leave
2828   13E1 09            ret
2829   13E2 0A E5 13      jmp _if38_exit
2830   13E5             _if38_exit:
2831   13E5             _if37_exit:
2832   13E5             ; while (num > 0) { 
2833   13E5             _while39_cond:
2834   13E5 FA 05 00      lea d, [bp + 5] ; $num
2835   13E8 2A            mov b, [d]
2836   13E9             ; --- START RELATIONAL
2837   13E9 D7            push a
2838   13EA 11            mov a, b
2839   13EB 26 00 00      mov b, $0
2840   13EE B0            cmp a, b
2841   13EF FD 7F         sgt ; >
2842   13F1 E4            pop a
2843   13F2             ; --- END RELATIONAL
2844   13F2 C0 00 00      cmp b, 0
2845   13F5 C6 3F 14      je _while39_exit
2846   13F8             _while39_block:
2847   13F8             ; digits[i] = '0' + (num % 10); 
2848   13F8 FA FC FF      lea d, [bp + -4] ; $digits
2849   13FB D7            push a
2850   13FC DA            push d
2851   13FD FA FA FF      lea d, [bp + -6] ; $i
2852   1400 2A            mov b, [d]
2853   1401 E7            pop d
2854   1402 5A            add d, b
2855   1403 E4            pop a
2856   1404 DA            push d
2857   1405 26 30 00      mov b, $30
2858   1408             ; --- START TERMS
2859   1408 D7            push a
2860   1409 11            mov a, b
2861   140A FA 05 00      lea d, [bp + 5] ; $num
2862   140D 2A            mov b, [d]
2863   140E             ; --- START FACTORS
2864   140E D7            push a
2865   140F 11            mov a, b
2866   1410 26 0A 00      mov b, $a
2867   1413 AE            div a, b ; 
2868   1414 11            mov a, b
2869   1415 27            mov b, a
2870   1416 E4            pop a
2871   1417             ; --- END FACTORS
2872   1417 56            add b, a
2873   1418 E4            pop a
2874   1419             ; --- END TERMS
2875   1419 E7            pop d
2876   141A FD 3E         mov [d], bl
2877   141C             ; num = num / 10; 
2878   141C FA 05 00      lea d, [bp + 5] ; $num
2879   141F DA            push d
2880   1420 FA 05 00      lea d, [bp + 5] ; $num
2881   1423 2A            mov b, [d]
2882   1424             ; --- START FACTORS
2883   1424 D7            push a
2884   1425 11            mov a, b
2885   1426 26 0A 00      mov b, $a
2886   1429 AE            div a, b
2887   142A 27            mov b, a
2888   142B E4            pop a
2889   142C             ; --- END FACTORS
2890   142C E7            pop d
2891   142D FD 43         mov [d], b
2892   142F             ; i++; 
2893   142F FA FA FF      lea d, [bp + -6] ; $i
2894   1432 2A            mov b, [d]
2895   1433 FD 77         inc b
2896   1435 FA FA FF      lea d, [bp + -6] ; $i
2897   1438 FD 43         mov [d], b
2898   143A FD 7D         dec b
2899   143C 0A E5 13      jmp _while39_cond
2900   143F             _while39_exit:
2901   143F             ; while (i > 0) { 
2902   143F             _while40_cond:
2903   143F FA FA FF      lea d, [bp + -6] ; $i
2904   1442 2A            mov b, [d]
2905   1443             ; --- START RELATIONAL
2906   1443 D7            push a
2907   1444 11            mov a, b
2908   1445 26 00 00      mov b, $0
2909   1448 B0            cmp a, b
2910   1449 FD 7F         sgt ; >
2911   144B E4            pop a
2912   144C             ; --- END RELATIONAL
2913   144C C0 00 00      cmp b, 0
2914   144F C6 78 14      je _while40_exit
2915   1452             _while40_block:
2916   1452             ; i--; 
2917   1452 FA FA FF      lea d, [bp + -6] ; $i
2918   1455 2A            mov b, [d]
2919   1456 FD 7D         dec b
2920   1458 FA FA FF      lea d, [bp + -6] ; $i
2921   145B FD 43         mov [d], b
2922   145D FD 77         inc b
2923   145F             ; putchar(digits[i]); 
2924   145F FA FC FF      lea d, [bp + -4] ; $digits
2925   1462 D7            push a
2926   1463 DA            push d
2927   1464 FA FA FF      lea d, [bp + -6] ; $i
2928   1467 2A            mov b, [d]
2929   1468 E7            pop d
2930   1469 5A            add d, b
2931   146A E4            pop a
2932   146B 32            mov bl, [d]
2933   146C A7 00         mov bh, 0
2934   146E DD            push bl
2935   146F 07 EB 1C      call putchar
2936   1472 51 01 00      add sp, 1
2937   1475 0A 3F 14      jmp _while40_cond
2938   1478             _while40_exit:
2939   1478 F9            leave
2940   1479 09            ret
2941   147A             
2942   147A             print_signed_long:
2943   147A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2944   147D             ; char digits[10]; 
2945   147D 52 0A 00      sub sp, 10
2946   1480             ; int i = 0; 
2947   1480 52 02 00      sub sp, 2
2948   1483             ; --- START LOCAL VAR INITIALIZATION
2949   1483 FA F5 FF      lea d, [bp + -11] ; $i
2950   1486 DA            push d
2951   1487 26 00 00      mov b, $0
2952   148A E7            pop d
2953   148B FD 43         mov [d], b
2954   148D             ; --- END LOCAL VAR INITIALIZATION
2955   148D             ; if (num < 0) { 
2956   148D             _if41_cond:
2957   148D FA 05 00      lea d, [bp + 5] ; $num
2958   1490 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2959   1493 FD 39         mov c, b ; And place it into C
2960   1495 2A            mov b, [d] ; Lower Word in B
2961   1496             ; --- START RELATIONAL
2962   1496 D7            push a
2963   1497 FD D8         push g
2964   1499 11            mov a, b
2965   149A FD 7A         mov g, c
2966   149C 26 00 00      mov b, $0
2967   149F 38 00 00      mov c, 0
2968   14A2 FD AF 00 00   cmp32 ga, cb
2968   14A6 00 00 00 00 
2968   14AA 00 00 00 00 
2968   14AE 00 00 00 00 
2968   14B2 00 00 00 00 
2968   14B6 00 00 00 00 
2968   14BA 00 00 00 00 
2968   14BE 00 00 00 00 
2968   14C2 00 00 00 00 
2968   14C6 00 00 00 00 
2968   14CA 00 00 00 00 
2968   14CE 00 00 00 00 
2968   14D2 00 00 00 00 
2968   14D6 00 00 00 00 
2968   14DA 00 00 00 00 
2968   14DE 00 00 00 00 
2968   14E2 00 00 00 00 
2968   14E6 00 00 00 00 
2968   14EA 00 00 00 00 
2968   14EE 00 00 00 00 
2968   14F2 00 00 00 00 
2968   14F6 00 00 00 00 
2968   14FA 00 00 00 00 
2968   14FE 00 00 00 00 
2968   1502 00 00 00 00 
2968   1506 00 00 00 00 
2968   150A 00 00 00 00 
2968   150E 00 00 00 00 
2968   1512 00 00 00 00 
2968   1516 00 00 00 00 
2968   151A 00 00 00 00 
2968   151E 00 00 00 00 
2968   1522 00 00 00 00 
2968   1526 00 00 00 00 
2968   152A 00 00 00 00 
2968   152E 00 00 00 00 
2968   1532 00 00 00 00 
2968   1536 00 00 00 00 
2968   153A 00 00 00 00 
2968   153E 00 00 00 00 
2968   1542 00 00 00 00 
2968   1546 00 00 00 00 
2968   154A 00 00 00 00 
2968   154E 00 00 00 00 
2968   1552 00 00 00 00 
2968   1556 00 00 00 00 
2968   155A 00 00 00 00 
2968   155E 00 00 00 00 
2968   1562 00 00 00 00 
2968   1566 00 00 00 00 
2968   156A 00 00 00 00 
2968   156E 00 00 00 00 
2968   1572 00 00 00 00 
2968   1576 00 00 00 00 
2968   157A 00 00 00 00 
2968   157E 00 00 00 00 
2968   1582 00 00 00 00 
2968   1586 00 00 00 00 
2968   158A 00 00 00 00 
2968   158E 00 00 00 00 
2968   1592 00 00 00 00 
2968   1596 00 00 00 00 
2968   159A 00 00 00 00 
2968   159E 00 00 00 00 
2968   15A2 00 
2969   15A3 FD 73         slt ; <
2970   15A5 FD F1         pop g
2971   15A7 E4            pop a
2972   15A8             ; --- END RELATIONAL
2973   15A8 C0 00 00      cmp b, 0
2974   15AB C6 D2 15      je _if41_else
2975   15AE             _if41_true:
2976   15AE             ; putchar('-'); 
2977   15AE 26 2D 00      mov b, $2d
2978   15B1 DD            push bl
2979   15B2 07 EB 1C      call putchar
2980   15B5 51 01 00      add sp, 1
2981   15B8             ; num = -num; 
2982   15B8 FA 05 00      lea d, [bp + 5] ; $num
2983   15BB DA            push d
2984   15BC FA 05 00      lea d, [bp + 5] ; $num
2985   15BF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2986   15C2 FD 39         mov c, b ; And place it into C
2987   15C4 2A            mov b, [d] ; Lower Word in B
2988   15C5 FD 97         neg b
2989   15C7 E7            pop d
2990   15C8 FD 43         mov [d], b
2991   15CA 28            mov b, c
2992   15CB FD 44 02 00   mov [d + 2], b
2993   15CF 0A 02 17      jmp _if41_exit
2994   15D2             _if41_else:
2995   15D2             ; if (num == 0) { 
2996   15D2             _if42_cond:
2997   15D2 FA 05 00      lea d, [bp + 5] ; $num
2998   15D5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2999   15D8 FD 39         mov c, b ; And place it into C
3000   15DA 2A            mov b, [d] ; Lower Word in B
3001   15DB             ; --- START RELATIONAL
3002   15DB D7            push a
3003   15DC FD D8         push g
3004   15DE 11            mov a, b
3005   15DF FD 7A         mov g, c
3006   15E1 26 00 00      mov b, $0
3007   15E4 38 00 00      mov c, 0
3008   15E7 FD AF 00 00   cmp32 ga, cb
3008   15EB 00 00 00 00 
3008   15EF 00 00 00 00 
3008   15F3 00 00 00 00 
3008   15F7 00 00 00 00 
3008   15FB 00 00 00 00 
3008   15FF 00 00 00 00 
3008   1603 00 00 00 00 
3008   1607 00 00 00 00 
3008   160B 00 00 00 00 
3008   160F 00 00 00 00 
3008   1613 00 00 00 00 
3008   1617 00 00 00 00 
3008   161B 00 00 00 00 
3008   161F 00 00 00 00 
3008   1623 00 00 00 00 
3008   1627 00 00 00 00 
3008   162B 00 00 00 00 
3008   162F 00 00 00 00 
3008   1633 00 00 00 00 
3008   1637 00 00 00 00 
3008   163B 00 00 00 00 
3008   163F 00 00 00 00 
3008   1643 00 00 00 00 
3008   1647 00 00 00 00 
3008   164B 00 00 00 00 
3008   164F 00 00 00 00 
3008   1653 00 00 00 00 
3008   1657 00 00 00 00 
3008   165B 00 00 00 00 
3008   165F 00 00 00 00 
3008   1663 00 00 00 00 
3008   1667 00 00 00 00 
3008   166B 00 00 00 00 
3008   166F 00 00 00 00 
3008   1673 00 00 00 00 
3008   1677 00 00 00 00 
3008   167B 00 00 00 00 
3008   167F 00 00 00 00 
3008   1683 00 00 00 00 
3008   1687 00 00 00 00 
3008   168B 00 00 00 00 
3008   168F 00 00 00 00 
3008   1693 00 00 00 00 
3008   1697 00 00 00 00 
3008   169B 00 00 00 00 
3008   169F 00 00 00 00 
3008   16A3 00 00 00 00 
3008   16A7 00 00 00 00 
3008   16AB 00 00 00 00 
3008   16AF 00 00 00 00 
3008   16B3 00 00 00 00 
3008   16B7 00 00 00 00 
3008   16BB 00 00 00 00 
3008   16BF 00 00 00 00 
3008   16C3 00 00 00 00 
3008   16C7 00 00 00 00 
3008   16CB 00 00 00 00 
3008   16CF 00 00 00 00 
3008   16D3 00 00 00 00 
3008   16D7 00 00 00 00 
3008   16DB 00 00 00 00 
3008   16DF 00 00 00 00 
3008   16E3 00 00 00 00 
3008   16E7 00 
3009   16E8 FD 71         seq ; ==
3010   16EA FD F1         pop g
3011   16EC E4            pop a
3012   16ED             ; --- END RELATIONAL
3013   16ED C0 00 00      cmp b, 0
3014   16F0 C6 02 17      je _if42_exit
3015   16F3             _if42_true:
3016   16F3             ; putchar('0'); 
3017   16F3 26 30 00      mov b, $30
3018   16F6 DD            push bl
3019   16F7 07 EB 1C      call putchar
3020   16FA 51 01 00      add sp, 1
3021   16FD             ; return; 
3022   16FD F9            leave
3023   16FE 09            ret
3024   16FF 0A 02 17      jmp _if42_exit
3025   1702             _if42_exit:
3026   1702             _if41_exit:
3027   1702             ; while (num > 0) { 
3028   1702             _while43_cond:
3029   1702 FA 05 00      lea d, [bp + 5] ; $num
3030   1705 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3031   1708 FD 39         mov c, b ; And place it into C
3032   170A 2A            mov b, [d] ; Lower Word in B
3033   170B             ; --- START RELATIONAL
3034   170B D7            push a
3035   170C FD D8         push g
3036   170E 11            mov a, b
3037   170F FD 7A         mov g, c
3038   1711 26 00 00      mov b, $0
3039   1714 38 00 00      mov c, 0
3040   1717 FD 7F         sgt
3041   1719 FD F1         pop g
3042   171B E4            pop a
3043   171C             ; --- END RELATIONAL
3044   171C C0 00 00      cmp b, 0
3045   171F C6 7F 17      je _while43_exit
3046   1722             _while43_block:
3047   1722             ; digits[i] = '0' + (num % 10); 
3048   1722 FA F7 FF      lea d, [bp + -9] ; $digits
3049   1725 D7            push a
3050   1726 DA            push d
3051   1727 FA F5 FF      lea d, [bp + -11] ; $i
3052   172A 2A            mov b, [d]
3053   172B E7            pop d
3054   172C 5A            add d, b
3055   172D E4            pop a
3056   172E DA            push d
3057   172F 26 30 00      mov b, $30
3058   1732             ; --- START TERMS
3059   1732 D7            push a
3060   1733 11            mov a, b
3061   1734 FA 05 00      lea d, [bp + 5] ; $num
3062   1737 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3063   173A FD 39         mov c, b ; And place it into C
3064   173C 2A            mov b, [d] ; Lower Word in B
3065   173D             ; --- START FACTORS
3066   173D D7            push a
3067   173E 11            mov a, b
3068   173F 26 0A 00      mov b, $a
3069   1742 AE            div a, b ; 
3070   1743 11            mov a, b
3071   1744 27            mov b, a
3072   1745 E4            pop a
3073   1746             ; --- END FACTORS
3074   1746 54            add a, b
3075   1747 D7            push a
3076   1748 FD 12         mov a, g
3077   174A 28            mov b, c
3078   174B 5C            adc a, b
3079   174C 39            mov c, a
3080   174D E5            pop b
3081   174E E4            pop a
3082   174F             ; --- END TERMS
3083   174F E7            pop d
3084   1750 FD 3E         mov [d], bl
3085   1752             ; num = num / 10; 
3086   1752 FA 05 00      lea d, [bp + 5] ; $num
3087   1755 DA            push d
3088   1756 FA 05 00      lea d, [bp + 5] ; $num
3089   1759 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3090   175C FD 39         mov c, b ; And place it into C
3091   175E 2A            mov b, [d] ; Lower Word in B
3092   175F             ; --- START FACTORS
3093   175F D7            push a
3094   1760 11            mov a, b
3095   1761 26 0A 00      mov b, $a
3096   1764 AE            div a, b
3097   1765 27            mov b, a
3098   1766 E4            pop a
3099   1767             ; --- END FACTORS
3100   1767 E7            pop d
3101   1768 FD 43         mov [d], b
3102   176A 28            mov b, c
3103   176B FD 44 02 00   mov [d + 2], b
3104   176F             ; i++; 
3105   176F FA F5 FF      lea d, [bp + -11] ; $i
3106   1772 2A            mov b, [d]
3107   1773 FD 77         inc b
3108   1775 FA F5 FF      lea d, [bp + -11] ; $i
3109   1778 FD 43         mov [d], b
3110   177A FD 7D         dec b
3111   177C 0A 02 17      jmp _while43_cond
3112   177F             _while43_exit:
3113   177F             ; while (i > 0) { 
3114   177F             _while44_cond:
3115   177F FA F5 FF      lea d, [bp + -11] ; $i
3116   1782 2A            mov b, [d]
3117   1783             ; --- START RELATIONAL
3118   1783 D7            push a
3119   1784 11            mov a, b
3120   1785 26 00 00      mov b, $0
3121   1788 B0            cmp a, b
3122   1789 FD 7F         sgt ; >
3123   178B E4            pop a
3124   178C             ; --- END RELATIONAL
3125   178C C0 00 00      cmp b, 0
3126   178F C6 B8 17      je _while44_exit
3127   1792             _while44_block:
3128   1792             ; i--; 
3129   1792 FA F5 FF      lea d, [bp + -11] ; $i
3130   1795 2A            mov b, [d]
3131   1796 FD 7D         dec b
3132   1798 FA F5 FF      lea d, [bp + -11] ; $i
3133   179B FD 43         mov [d], b
3134   179D FD 77         inc b
3135   179F             ; putchar(digits[i]); 
3136   179F FA F7 FF      lea d, [bp + -9] ; $digits
3137   17A2 D7            push a
3138   17A3 DA            push d
3139   17A4 FA F5 FF      lea d, [bp + -11] ; $i
3140   17A7 2A            mov b, [d]
3141   17A8 E7            pop d
3142   17A9 5A            add d, b
3143   17AA E4            pop a
3144   17AB 32            mov bl, [d]
3145   17AC A7 00         mov bh, 0
3146   17AE DD            push bl
3147   17AF 07 EB 1C      call putchar
3148   17B2 51 01 00      add sp, 1
3149   17B5 0A 7F 17      jmp _while44_cond
3150   17B8             _while44_exit:
3151   17B8 F9            leave
3152   17B9 09            ret
3153   17BA             
3154   17BA             print_unsigned_long:
3155   17BA F8 00 00      enter 0 ; (push bp; mov bp, sp)
3156   17BD             ; char digits[10]; 
3157   17BD 52 0A 00      sub sp, 10
3158   17C0             ; int i; 
3159   17C0 52 02 00      sub sp, 2
3160   17C3             ; i = 0; 
3161   17C3 FA F5 FF      lea d, [bp + -11] ; $i
3162   17C6 DA            push d
3163   17C7 26 00 00      mov b, $0
3164   17CA E7            pop d
3165   17CB FD 43         mov [d], b
3166   17CD             ; if(num == 0){ 
3167   17CD             _if45_cond:
3168   17CD FA 05 00      lea d, [bp + 5] ; $num
3169   17D0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3170   17D3 FD 39         mov c, b ; And place it into C
3171   17D5 2A            mov b, [d] ; Lower Word in B
3172   17D6             ; --- START RELATIONAL
3173   17D6 D7            push a
3174   17D7 FD D8         push g
3175   17D9 11            mov a, b
3176   17DA FD 7A         mov g, c
3177   17DC 26 00 00      mov b, $0
3178   17DF 38 00 00      mov c, 0
3179   17E2 FD AF 00 00   cmp32 ga, cb
3179   17E6 00 00 00 00 
3179   17EA 00 00 00 00 
3179   17EE 00 00 00 00 
3179   17F2 00 00 00 00 
3179   17F6 00 00 00 00 
3179   17FA 00 00 00 00 
3179   17FE 00 00 00 00 
3179   1802 00 00 00 00 
3179   1806 00 00 00 00 
3179   180A 00 00 00 00 
3179   180E 00 00 00 00 
3179   1812 00 00 00 00 
3179   1816 00 00 00 00 
3179   181A 00 00 00 00 
3179   181E 00 00 00 00 
3179   1822 00 00 00 00 
3179   1826 00 00 00 00 
3179   182A 00 00 00 00 
3179   182E 00 00 00 00 
3179   1832 00 00 00 00 
3179   1836 00 00 00 00 
3179   183A 00 00 00 00 
3179   183E 00 00 00 00 
3179   1842 00 00 00 00 
3179   1846 00 00 00 00 
3179   184A 00 00 00 00 
3179   184E 00 00 00 00 
3179   1852 00 00 00 00 
3179   1856 00 00 00 00 
3179   185A 00 00 00 00 
3179   185E 00 00 00 00 
3179   1862 00 00 00 00 
3179   1866 00 00 00 00 
3179   186A 00 00 00 00 
3179   186E 00 00 00 00 
3179   1872 00 00 00 00 
3179   1876 00 00 00 00 
3179   187A 00 00 00 00 
3179   187E 00 00 00 00 
3179   1882 00 00 00 00 
3179   1886 00 00 00 00 
3179   188A 00 00 00 00 
3179   188E 00 00 00 00 
3179   1892 00 00 00 00 
3179   1896 00 00 00 00 
3179   189A 00 00 00 00 
3179   189E 00 00 00 00 
3179   18A2 00 00 00 00 
3179   18A6 00 00 00 00 
3179   18AA 00 00 00 00 
3179   18AE 00 00 00 00 
3179   18B2 00 00 00 00 
3179   18B6 00 00 00 00 
3179   18BA 00 00 00 00 
3179   18BE 00 00 00 00 
3179   18C2 00 00 00 00 
3179   18C6 00 00 00 00 
3179   18CA 00 00 00 00 
3179   18CE 00 00 00 00 
3179   18D2 00 00 00 00 
3179   18D6 00 00 00 00 
3179   18DA 00 00 00 00 
3179   18DE 00 00 00 00 
3179   18E2 00 
3180   18E3 FD 71         seq ; ==
3181   18E5 FD F1         pop g
3182   18E7 E4            pop a
3183   18E8             ; --- END RELATIONAL
3184   18E8 C0 00 00      cmp b, 0
3185   18EB C6 FD 18      je _if45_exit
3186   18EE             _if45_true:
3187   18EE             ; putchar('0'); 
3188   18EE 26 30 00      mov b, $30
3189   18F1 DD            push bl
3190   18F2 07 EB 1C      call putchar
3191   18F5 51 01 00      add sp, 1
3192   18F8             ; return; 
3193   18F8 F9            leave
3194   18F9 09            ret
3195   18FA 0A FD 18      jmp _if45_exit
3196   18FD             _if45_exit:
3197   18FD             ; while (num > 0) { 
3198   18FD             _while46_cond:
3199   18FD FA 05 00      lea d, [bp + 5] ; $num
3200   1900 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3201   1903 FD 39         mov c, b ; And place it into C
3202   1905 2A            mov b, [d] ; Lower Word in B
3203   1906             ; --- START RELATIONAL
3204   1906 D7            push a
3205   1907 FD D8         push g
3206   1909 11            mov a, b
3207   190A FD 7A         mov g, c
3208   190C 26 00 00      mov b, $0
3209   190F 38 00 00      mov c, 0
3210   1912 FD 81         sgu
3211   1914 FD F1         pop g
3212   1916 E4            pop a
3213   1917             ; --- END RELATIONAL
3214   1917 C0 00 00      cmp b, 0
3215   191A C6 7A 19      je _while46_exit
3216   191D             _while46_block:
3217   191D             ; digits[i] = '0' + (num % 10); 
3218   191D FA F7 FF      lea d, [bp + -9] ; $digits
3219   1920 D7            push a
3220   1921 DA            push d
3221   1922 FA F5 FF      lea d, [bp + -11] ; $i
3222   1925 2A            mov b, [d]
3223   1926 E7            pop d
3224   1927 5A            add d, b
3225   1928 E4            pop a
3226   1929 DA            push d
3227   192A 26 30 00      mov b, $30
3228   192D             ; --- START TERMS
3229   192D D7            push a
3230   192E 11            mov a, b
3231   192F FA 05 00      lea d, [bp + 5] ; $num
3232   1932 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3233   1935 FD 39         mov c, b ; And place it into C
3234   1937 2A            mov b, [d] ; Lower Word in B
3235   1938             ; --- START FACTORS
3236   1938 D7            push a
3237   1939 11            mov a, b
3238   193A 26 0A 00      mov b, $a
3239   193D AE            div a, b ; 
3240   193E 11            mov a, b
3241   193F 27            mov b, a
3242   1940 E4            pop a
3243   1941             ; --- END FACTORS
3244   1941 54            add a, b
3245   1942 D7            push a
3246   1943 FD 12         mov a, g
3247   1945 28            mov b, c
3248   1946 5C            adc a, b
3249   1947 39            mov c, a
3250   1948 E5            pop b
3251   1949 E4            pop a
3252   194A             ; --- END TERMS
3253   194A E7            pop d
3254   194B FD 3E         mov [d], bl
3255   194D             ; num = num / 10; 
3256   194D FA 05 00      lea d, [bp + 5] ; $num
3257   1950 DA            push d
3258   1951 FA 05 00      lea d, [bp + 5] ; $num
3259   1954 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3260   1957 FD 39         mov c, b ; And place it into C
3261   1959 2A            mov b, [d] ; Lower Word in B
3262   195A             ; --- START FACTORS
3263   195A D7            push a
3264   195B 11            mov a, b
3265   195C 26 0A 00      mov b, $a
3266   195F AE            div a, b
3267   1960 27            mov b, a
3268   1961 E4            pop a
3269   1962             ; --- END FACTORS
3270   1962 E7            pop d
3271   1963 FD 43         mov [d], b
3272   1965 28            mov b, c
3273   1966 FD 44 02 00   mov [d + 2], b
3274   196A             ; i++; 
3275   196A FA F5 FF      lea d, [bp + -11] ; $i
3276   196D 2A            mov b, [d]
3277   196E FD 77         inc b
3278   1970 FA F5 FF      lea d, [bp + -11] ; $i
3279   1973 FD 43         mov [d], b
3280   1975 FD 7D         dec b
3281   1977 0A FD 18      jmp _while46_cond
3282   197A             _while46_exit:
3283   197A             ; while (i > 0) { 
3284   197A             _while47_cond:
3285   197A FA F5 FF      lea d, [bp + -11] ; $i
3286   197D 2A            mov b, [d]
3287   197E             ; --- START RELATIONAL
3288   197E D7            push a
3289   197F 11            mov a, b
3290   1980 26 00 00      mov b, $0
3291   1983 B0            cmp a, b
3292   1984 FD 7F         sgt ; >
3293   1986 E4            pop a
3294   1987             ; --- END RELATIONAL
3295   1987 C0 00 00      cmp b, 0
3296   198A C6 B3 19      je _while47_exit
3297   198D             _while47_block:
3298   198D             ; i--; 
3299   198D FA F5 FF      lea d, [bp + -11] ; $i
3300   1990 2A            mov b, [d]
3301   1991 FD 7D         dec b
3302   1993 FA F5 FF      lea d, [bp + -11] ; $i
3303   1996 FD 43         mov [d], b
3304   1998 FD 77         inc b
3305   199A             ; putchar(digits[i]); 
3306   199A FA F7 FF      lea d, [bp + -9] ; $digits
3307   199D D7            push a
3308   199E DA            push d
3309   199F FA F5 FF      lea d, [bp + -11] ; $i
3310   19A2 2A            mov b, [d]
3311   19A3 E7            pop d
3312   19A4 5A            add d, b
3313   19A5 E4            pop a
3314   19A6 32            mov bl, [d]
3315   19A7 A7 00         mov bh, 0
3316   19A9 DD            push bl
3317   19AA 07 EB 1C      call putchar
3318   19AD 51 01 00      add sp, 1
3319   19B0 0A 7A 19      jmp _while47_cond
3320   19B3             _while47_exit:
3321   19B3 F9            leave
3322   19B4 09            ret
3323   19B5             
3324   19B5             sprint_unsigned:
3325   19B5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3326   19B8             ; char digits[5]; 
3327   19B8 52 05 00      sub sp, 5
3328   19BB             ; int i; 
3329   19BB 52 02 00      sub sp, 2
3330   19BE             ; int len = 0; 
3331   19BE 52 02 00      sub sp, 2
3332   19C1             ; --- START LOCAL VAR INITIALIZATION
3333   19C1 FA F8 FF      lea d, [bp + -8] ; $len
3334   19C4 DA            push d
3335   19C5 26 00 00      mov b, $0
3336   19C8 E7            pop d
3337   19C9 FD 43         mov [d], b
3338   19CB             ; --- END LOCAL VAR INITIALIZATION
3339   19CB             ; i = 0; 
3340   19CB FA FA FF      lea d, [bp + -6] ; $i
3341   19CE DA            push d
3342   19CF 26 00 00      mov b, $0
3343   19D2 E7            pop d
3344   19D3 FD 43         mov [d], b
3345   19D5             ; if(num == 0){ 
3346   19D5             _if48_cond:
3347   19D5 FA 07 00      lea d, [bp + 7] ; $num
3348   19D8 2A            mov b, [d]
3349   19D9             ; --- START RELATIONAL
3350   19D9 D7            push a
3351   19DA 11            mov a, b
3352   19DB 26 00 00      mov b, $0
3353   19DE B0            cmp a, b
3354   19DF FD 71         seq ; ==
3355   19E1 E4            pop a
3356   19E2             ; --- END RELATIONAL
3357   19E2 C0 00 00      cmp b, 0
3358   19E5 C6 04 1A      je _if48_exit
3359   19E8             _if48_true:
3360   19E8             ; *dest++ = '0'; 
3361   19E8 FA 05 00      lea d, [bp + 5] ; $dest
3362   19EB 2A            mov b, [d]
3363   19EC FD 77         inc b
3364   19EE FA 05 00      lea d, [bp + 5] ; $dest
3365   19F1 FD 43         mov [d], b
3366   19F3 FD 7D         dec b
3367   19F5 D8            push b
3368   19F6 26 30 00      mov b, $30
3369   19F9 E7            pop d
3370   19FA FD 3E         mov [d], bl
3371   19FC             ; return 1; 
3372   19FC 26 01 00      mov b, $1
3373   19FF F9            leave
3374   1A00 09            ret
3375   1A01 0A 04 1A      jmp _if48_exit
3376   1A04             _if48_exit:
3377   1A04             ; while (num > 0) { 
3378   1A04             _while49_cond:
3379   1A04 FA 07 00      lea d, [bp + 7] ; $num
3380   1A07 2A            mov b, [d]
3381   1A08             ; --- START RELATIONAL
3382   1A08 D7            push a
3383   1A09 11            mov a, b
3384   1A0A 26 00 00      mov b, $0
3385   1A0D B0            cmp a, b
3386   1A0E FD 81         sgu ; > (unsigned)
3387   1A10 E4            pop a
3388   1A11             ; --- END RELATIONAL
3389   1A11 C0 00 00      cmp b, 0
3390   1A14 C6 5E 1A      je _while49_exit
3391   1A17             _while49_block:
3392   1A17             ; digits[i] = '0' + (num % 10); 
3393   1A17 FA FC FF      lea d, [bp + -4] ; $digits
3394   1A1A D7            push a
3395   1A1B DA            push d
3396   1A1C FA FA FF      lea d, [bp + -6] ; $i
3397   1A1F 2A            mov b, [d]
3398   1A20 E7            pop d
3399   1A21 5A            add d, b
3400   1A22 E4            pop a
3401   1A23 DA            push d
3402   1A24 26 30 00      mov b, $30
3403   1A27             ; --- START TERMS
3404   1A27 D7            push a
3405   1A28 11            mov a, b
3406   1A29 FA 07 00      lea d, [bp + 7] ; $num
3407   1A2C 2A            mov b, [d]
3408   1A2D             ; --- START FACTORS
3409   1A2D D7            push a
3410   1A2E 11            mov a, b
3411   1A2F 26 0A 00      mov b, $a
3412   1A32 AE            div a, b ; 
3413   1A33 11            mov a, b
3414   1A34 27            mov b, a
3415   1A35 E4            pop a
3416   1A36             ; --- END FACTORS
3417   1A36 56            add b, a
3418   1A37 E4            pop a
3419   1A38             ; --- END TERMS
3420   1A38 E7            pop d
3421   1A39 FD 3E         mov [d], bl
3422   1A3B             ; num = num / 10; 
3423   1A3B FA 07 00      lea d, [bp + 7] ; $num
3424   1A3E DA            push d
3425   1A3F FA 07 00      lea d, [bp + 7] ; $num
3426   1A42 2A            mov b, [d]
3427   1A43             ; --- START FACTORS
3428   1A43 D7            push a
3429   1A44 11            mov a, b
3430   1A45 26 0A 00      mov b, $a
3431   1A48 AE            div a, b
3432   1A49 27            mov b, a
3433   1A4A E4            pop a
3434   1A4B             ; --- END FACTORS
3435   1A4B E7            pop d
3436   1A4C FD 43         mov [d], b
3437   1A4E             ; i++; 
3438   1A4E FA FA FF      lea d, [bp + -6] ; $i
3439   1A51 2A            mov b, [d]
3440   1A52 FD 77         inc b
3441   1A54 FA FA FF      lea d, [bp + -6] ; $i
3442   1A57 FD 43         mov [d], b
3443   1A59 FD 7D         dec b
3444   1A5B 0A 04 1A      jmp _while49_cond
3445   1A5E             _while49_exit:
3446   1A5E             ; while (i > 0) { 
3447   1A5E             _while50_cond:
3448   1A5E FA FA FF      lea d, [bp + -6] ; $i
3449   1A61 2A            mov b, [d]
3450   1A62             ; --- START RELATIONAL
3451   1A62 D7            push a
3452   1A63 11            mov a, b
3453   1A64 26 00 00      mov b, $0
3454   1A67 B0            cmp a, b
3455   1A68 FD 7F         sgt ; >
3456   1A6A E4            pop a
3457   1A6B             ; --- END RELATIONAL
3458   1A6B C0 00 00      cmp b, 0
3459   1A6E C6 AE 1A      je _while50_exit
3460   1A71             _while50_block:
3461   1A71             ; i--; 
3462   1A71 FA FA FF      lea d, [bp + -6] ; $i
3463   1A74 2A            mov b, [d]
3464   1A75 FD 7D         dec b
3465   1A77 FA FA FF      lea d, [bp + -6] ; $i
3466   1A7A FD 43         mov [d], b
3467   1A7C FD 77         inc b
3468   1A7E             ; *dest++ = digits[i]; 
3469   1A7E FA 05 00      lea d, [bp + 5] ; $dest
3470   1A81 2A            mov b, [d]
3471   1A82 FD 77         inc b
3472   1A84 FA 05 00      lea d, [bp + 5] ; $dest
3473   1A87 FD 43         mov [d], b
3474   1A89 FD 7D         dec b
3475   1A8B D8            push b
3476   1A8C FA FC FF      lea d, [bp + -4] ; $digits
3477   1A8F D7            push a
3478   1A90 DA            push d
3479   1A91 FA FA FF      lea d, [bp + -6] ; $i
3480   1A94 2A            mov b, [d]
3481   1A95 E7            pop d
3482   1A96 5A            add d, b
3483   1A97 E4            pop a
3484   1A98 32            mov bl, [d]
3485   1A99 A7 00         mov bh, 0
3486   1A9B E7            pop d
3487   1A9C FD 3E         mov [d], bl
3488   1A9E             ; len++; 
3489   1A9E FA F8 FF      lea d, [bp + -8] ; $len
3490   1AA1 2A            mov b, [d]
3491   1AA2 FD 77         inc b
3492   1AA4 FA F8 FF      lea d, [bp + -8] ; $len
3493   1AA7 FD 43         mov [d], b
3494   1AA9 FD 7D         dec b
3495   1AAB 0A 5E 1A      jmp _while50_cond
3496   1AAE             _while50_exit:
3497   1AAE             ; *dest = '\0'; 
3498   1AAE FA 05 00      lea d, [bp + 5] ; $dest
3499   1AB1 2A            mov b, [d]
3500   1AB2 D8            push b
3501   1AB3 26 00 00      mov b, $0
3502   1AB6 E7            pop d
3503   1AB7 FD 3E         mov [d], bl
3504   1AB9             ; return len; 
3505   1AB9 FA F8 FF      lea d, [bp + -8] ; $len
3506   1ABC 2A            mov b, [d]
3507   1ABD F9            leave
3508   1ABE 09            ret
3509   1ABF             
3510   1ABF             print_unsigned:
3511   1ABF F8 00 00      enter 0 ; (push bp; mov bp, sp)
3512   1AC2             ; char digits[5]; 
3513   1AC2 52 05 00      sub sp, 5
3514   1AC5             ; int i; 
3515   1AC5 52 02 00      sub sp, 2
3516   1AC8             ; i = 0; 
3517   1AC8 FA FA FF      lea d, [bp + -6] ; $i
3518   1ACB DA            push d
3519   1ACC 26 00 00      mov b, $0
3520   1ACF E7            pop d
3521   1AD0 FD 43         mov [d], b
3522   1AD2             ; if(num == 0){ 
3523   1AD2             _if51_cond:
3524   1AD2 FA 05 00      lea d, [bp + 5] ; $num
3525   1AD5 2A            mov b, [d]
3526   1AD6             ; --- START RELATIONAL
3527   1AD6 D7            push a
3528   1AD7 11            mov a, b
3529   1AD8 26 00 00      mov b, $0
3530   1ADB B0            cmp a, b
3531   1ADC FD 71         seq ; ==
3532   1ADE E4            pop a
3533   1ADF             ; --- END RELATIONAL
3534   1ADF C0 00 00      cmp b, 0
3535   1AE2 C6 F4 1A      je _if51_exit
3536   1AE5             _if51_true:
3537   1AE5             ; putchar('0'); 
3538   1AE5 26 30 00      mov b, $30
3539   1AE8 DD            push bl
3540   1AE9 07 EB 1C      call putchar
3541   1AEC 51 01 00      add sp, 1
3542   1AEF             ; return; 
3543   1AEF F9            leave
3544   1AF0 09            ret
3545   1AF1 0A F4 1A      jmp _if51_exit
3546   1AF4             _if51_exit:
3547   1AF4             ; while (num > 0) { 
3548   1AF4             _while52_cond:
3549   1AF4 FA 05 00      lea d, [bp + 5] ; $num
3550   1AF7 2A            mov b, [d]
3551   1AF8             ; --- START RELATIONAL
3552   1AF8 D7            push a
3553   1AF9 11            mov a, b
3554   1AFA 26 00 00      mov b, $0
3555   1AFD B0            cmp a, b
3556   1AFE FD 81         sgu ; > (unsigned)
3557   1B00 E4            pop a
3558   1B01             ; --- END RELATIONAL
3559   1B01 C0 00 00      cmp b, 0
3560   1B04 C6 4E 1B      je _while52_exit
3561   1B07             _while52_block:
3562   1B07             ; digits[i] = '0' + (num % 10); 
3563   1B07 FA FC FF      lea d, [bp + -4] ; $digits
3564   1B0A D7            push a
3565   1B0B DA            push d
3566   1B0C FA FA FF      lea d, [bp + -6] ; $i
3567   1B0F 2A            mov b, [d]
3568   1B10 E7            pop d
3569   1B11 5A            add d, b
3570   1B12 E4            pop a
3571   1B13 DA            push d
3572   1B14 26 30 00      mov b, $30
3573   1B17             ; --- START TERMS
3574   1B17 D7            push a
3575   1B18 11            mov a, b
3576   1B19 FA 05 00      lea d, [bp + 5] ; $num
3577   1B1C 2A            mov b, [d]
3578   1B1D             ; --- START FACTORS
3579   1B1D D7            push a
3580   1B1E 11            mov a, b
3581   1B1F 26 0A 00      mov b, $a
3582   1B22 AE            div a, b ; 
3583   1B23 11            mov a, b
3584   1B24 27            mov b, a
3585   1B25 E4            pop a
3586   1B26             ; --- END FACTORS
3587   1B26 56            add b, a
3588   1B27 E4            pop a
3589   1B28             ; --- END TERMS
3590   1B28 E7            pop d
3591   1B29 FD 3E         mov [d], bl
3592   1B2B             ; num = num / 10; 
3593   1B2B FA 05 00      lea d, [bp + 5] ; $num
3594   1B2E DA            push d
3595   1B2F FA 05 00      lea d, [bp + 5] ; $num
3596   1B32 2A            mov b, [d]
3597   1B33             ; --- START FACTORS
3598   1B33 D7            push a
3599   1B34 11            mov a, b
3600   1B35 26 0A 00      mov b, $a
3601   1B38 AE            div a, b
3602   1B39 27            mov b, a
3603   1B3A E4            pop a
3604   1B3B             ; --- END FACTORS
3605   1B3B E7            pop d
3606   1B3C FD 43         mov [d], b
3607   1B3E             ; i++; 
3608   1B3E FA FA FF      lea d, [bp + -6] ; $i
3609   1B41 2A            mov b, [d]
3610   1B42 FD 77         inc b
3611   1B44 FA FA FF      lea d, [bp + -6] ; $i
3612   1B47 FD 43         mov [d], b
3613   1B49 FD 7D         dec b
3614   1B4B 0A F4 1A      jmp _while52_cond
3615   1B4E             _while52_exit:
3616   1B4E             ; while (i > 0) { 
3617   1B4E             _while53_cond:
3618   1B4E FA FA FF      lea d, [bp + -6] ; $i
3619   1B51 2A            mov b, [d]
3620   1B52             ; --- START RELATIONAL
3621   1B52 D7            push a
3622   1B53 11            mov a, b
3623   1B54 26 00 00      mov b, $0
3624   1B57 B0            cmp a, b
3625   1B58 FD 7F         sgt ; >
3626   1B5A E4            pop a
3627   1B5B             ; --- END RELATIONAL
3628   1B5B C0 00 00      cmp b, 0
3629   1B5E C6 87 1B      je _while53_exit
3630   1B61             _while53_block:
3631   1B61             ; i--; 
3632   1B61 FA FA FF      lea d, [bp + -6] ; $i
3633   1B64 2A            mov b, [d]
3634   1B65 FD 7D         dec b
3635   1B67 FA FA FF      lea d, [bp + -6] ; $i
3636   1B6A FD 43         mov [d], b
3637   1B6C FD 77         inc b
3638   1B6E             ; putchar(digits[i]); 
3639   1B6E FA FC FF      lea d, [bp + -4] ; $digits
3640   1B71 D7            push a
3641   1B72 DA            push d
3642   1B73 FA FA FF      lea d, [bp + -6] ; $i
3643   1B76 2A            mov b, [d]
3644   1B77 E7            pop d
3645   1B78 5A            add d, b
3646   1B79 E4            pop a
3647   1B7A 32            mov bl, [d]
3648   1B7B A7 00         mov bh, 0
3649   1B7D DD            push bl
3650   1B7E 07 EB 1C      call putchar
3651   1B81 51 01 00      add sp, 1
3652   1B84 0A 4E 1B      jmp _while53_cond
3653   1B87             _while53_exit:
3654   1B87 F9            leave
3655   1B88 09            ret
3656   1B89             
3657   1B89             sprint_signed:
3658   1B89 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3659   1B8C             ; char digits[5]; 
3660   1B8C 52 05 00      sub sp, 5
3661   1B8F             ; int i = 0; 
3662   1B8F 52 02 00      sub sp, 2
3663   1B92             ; --- START LOCAL VAR INITIALIZATION
3664   1B92 FA FA FF      lea d, [bp + -6] ; $i
3665   1B95 DA            push d
3666   1B96 26 00 00      mov b, $0
3667   1B99 E7            pop d
3668   1B9A FD 43         mov [d], b
3669   1B9C             ; --- END LOCAL VAR INITIALIZATION
3670   1B9C             ; int len = 0; 
3671   1B9C 52 02 00      sub sp, 2
3672   1B9F             ; --- START LOCAL VAR INITIALIZATION
3673   1B9F FA F8 FF      lea d, [bp + -8] ; $len
3674   1BA2 DA            push d
3675   1BA3 26 00 00      mov b, $0
3676   1BA6 E7            pop d
3677   1BA7 FD 43         mov [d], b
3678   1BA9             ; --- END LOCAL VAR INITIALIZATION
3679   1BA9             ; if (num < 0) { 
3680   1BA9             _if54_cond:
3681   1BA9 FA 07 00      lea d, [bp + 7] ; $num
3682   1BAC 2A            mov b, [d]
3683   1BAD             ; --- START RELATIONAL
3684   1BAD D7            push a
3685   1BAE 11            mov a, b
3686   1BAF 26 00 00      mov b, $0
3687   1BB2 B0            cmp a, b
3688   1BB3 FD 73         slt ; < (signed)
3689   1BB5 E4            pop a
3690   1BB6             ; --- END RELATIONAL
3691   1BB6 C0 00 00      cmp b, 0
3692   1BB9 C6 ED 1B      je _if54_else
3693   1BBC             _if54_true:
3694   1BBC             ; *dest++ = '-'; 
3695   1BBC FA 05 00      lea d, [bp + 5] ; $dest
3696   1BBF 2A            mov b, [d]
3697   1BC0 FD 77         inc b
3698   1BC2 FA 05 00      lea d, [bp + 5] ; $dest
3699   1BC5 FD 43         mov [d], b
3700   1BC7 FD 7D         dec b
3701   1BC9 D8            push b
3702   1BCA 26 2D 00      mov b, $2d
3703   1BCD E7            pop d
3704   1BCE FD 3E         mov [d], bl
3705   1BD0             ; num = -num; 
3706   1BD0 FA 07 00      lea d, [bp + 7] ; $num
3707   1BD3 DA            push d
3708   1BD4 FA 07 00      lea d, [bp + 7] ; $num
3709   1BD7 2A            mov b, [d]
3710   1BD8 FD 97         neg b
3711   1BDA E7            pop d
3712   1BDB FD 43         mov [d], b
3713   1BDD             ; len++; 
3714   1BDD FA F8 FF      lea d, [bp + -8] ; $len
3715   1BE0 2A            mov b, [d]
3716   1BE1 FD 77         inc b
3717   1BE3 FA F8 FF      lea d, [bp + -8] ; $len
3718   1BE6 FD 43         mov [d], b
3719   1BE8 FD 7D         dec b
3720   1BEA 0A 27 1C      jmp _if54_exit
3721   1BED             _if54_else:
3722   1BED             ; if (num == 0) { 
3723   1BED             _if55_cond:
3724   1BED FA 07 00      lea d, [bp + 7] ; $num
3725   1BF0 2A            mov b, [d]
3726   1BF1             ; --- START RELATIONAL
3727   1BF1 D7            push a
3728   1BF2 11            mov a, b
3729   1BF3 26 00 00      mov b, $0
3730   1BF6 B0            cmp a, b
3731   1BF7 FD 71         seq ; ==
3732   1BF9 E4            pop a
3733   1BFA             ; --- END RELATIONAL
3734   1BFA C0 00 00      cmp b, 0
3735   1BFD C6 27 1C      je _if55_exit
3736   1C00             _if55_true:
3737   1C00             ; *dest++ = '0'; 
3738   1C00 FA 05 00      lea d, [bp + 5] ; $dest
3739   1C03 2A            mov b, [d]
3740   1C04 FD 77         inc b
3741   1C06 FA 05 00      lea d, [bp + 5] ; $dest
3742   1C09 FD 43         mov [d], b
3743   1C0B FD 7D         dec b
3744   1C0D D8            push b
3745   1C0E 26 30 00      mov b, $30
3746   1C11 E7            pop d
3747   1C12 FD 3E         mov [d], bl
3748   1C14             ; *dest = '\0'; 
3749   1C14 FA 05 00      lea d, [bp + 5] ; $dest
3750   1C17 2A            mov b, [d]
3751   1C18 D8            push b
3752   1C19 26 00 00      mov b, $0
3753   1C1C E7            pop d
3754   1C1D FD 3E         mov [d], bl
3755   1C1F             ; return 1; 
3756   1C1F 26 01 00      mov b, $1
3757   1C22 F9            leave
3758   1C23 09            ret
3759   1C24 0A 27 1C      jmp _if55_exit
3760   1C27             _if55_exit:
3761   1C27             _if54_exit:
3762   1C27             ; while (num > 0) { 
3763   1C27             _while56_cond:
3764   1C27 FA 07 00      lea d, [bp + 7] ; $num
3765   1C2A 2A            mov b, [d]
3766   1C2B             ; --- START RELATIONAL
3767   1C2B D7            push a
3768   1C2C 11            mov a, b
3769   1C2D 26 00 00      mov b, $0
3770   1C30 B0            cmp a, b
3771   1C31 FD 7F         sgt ; >
3772   1C33 E4            pop a
3773   1C34             ; --- END RELATIONAL
3774   1C34 C0 00 00      cmp b, 0
3775   1C37 C6 81 1C      je _while56_exit
3776   1C3A             _while56_block:
3777   1C3A             ; digits[i] = '0' + (num % 10); 
3778   1C3A FA FC FF      lea d, [bp + -4] ; $digits
3779   1C3D D7            push a
3780   1C3E DA            push d
3781   1C3F FA FA FF      lea d, [bp + -6] ; $i
3782   1C42 2A            mov b, [d]
3783   1C43 E7            pop d
3784   1C44 5A            add d, b
3785   1C45 E4            pop a
3786   1C46 DA            push d
3787   1C47 26 30 00      mov b, $30
3788   1C4A             ; --- START TERMS
3789   1C4A D7            push a
3790   1C4B 11            mov a, b
3791   1C4C FA 07 00      lea d, [bp + 7] ; $num
3792   1C4F 2A            mov b, [d]
3793   1C50             ; --- START FACTORS
3794   1C50 D7            push a
3795   1C51 11            mov a, b
3796   1C52 26 0A 00      mov b, $a
3797   1C55 AE            div a, b ; 
3798   1C56 11            mov a, b
3799   1C57 27            mov b, a
3800   1C58 E4            pop a
3801   1C59             ; --- END FACTORS
3802   1C59 56            add b, a
3803   1C5A E4            pop a
3804   1C5B             ; --- END TERMS
3805   1C5B E7            pop d
3806   1C5C FD 3E         mov [d], bl
3807   1C5E             ; num = num / 10; 
3808   1C5E FA 07 00      lea d, [bp + 7] ; $num
3809   1C61 DA            push d
3810   1C62 FA 07 00      lea d, [bp + 7] ; $num
3811   1C65 2A            mov b, [d]
3812   1C66             ; --- START FACTORS
3813   1C66 D7            push a
3814   1C67 11            mov a, b
3815   1C68 26 0A 00      mov b, $a
3816   1C6B AE            div a, b
3817   1C6C 27            mov b, a
3818   1C6D E4            pop a
3819   1C6E             ; --- END FACTORS
3820   1C6E E7            pop d
3821   1C6F FD 43         mov [d], b
3822   1C71             ; i++; 
3823   1C71 FA FA FF      lea d, [bp + -6] ; $i
3824   1C74 2A            mov b, [d]
3825   1C75 FD 77         inc b
3826   1C77 FA FA FF      lea d, [bp + -6] ; $i
3827   1C7A FD 43         mov [d], b
3828   1C7C FD 7D         dec b
3829   1C7E 0A 27 1C      jmp _while56_cond
3830   1C81             _while56_exit:
3831   1C81             ; while (i > 0) { 
3832   1C81             _while57_cond:
3833   1C81 FA FA FF      lea d, [bp + -6] ; $i
3834   1C84 2A            mov b, [d]
3835   1C85             ; --- START RELATIONAL
3836   1C85 D7            push a
3837   1C86 11            mov a, b
3838   1C87 26 00 00      mov b, $0
3839   1C8A B0            cmp a, b
3840   1C8B FD 7F         sgt ; >
3841   1C8D E4            pop a
3842   1C8E             ; --- END RELATIONAL
3843   1C8E C0 00 00      cmp b, 0
3844   1C91 C6 D1 1C      je _while57_exit
3845   1C94             _while57_block:
3846   1C94             ; i--; 
3847   1C94 FA FA FF      lea d, [bp + -6] ; $i
3848   1C97 2A            mov b, [d]
3849   1C98 FD 7D         dec b
3850   1C9A FA FA FF      lea d, [bp + -6] ; $i
3851   1C9D FD 43         mov [d], b
3852   1C9F FD 77         inc b
3853   1CA1             ; *dest++ = digits[i]; 
3854   1CA1 FA 05 00      lea d, [bp + 5] ; $dest
3855   1CA4 2A            mov b, [d]
3856   1CA5 FD 77         inc b
3857   1CA7 FA 05 00      lea d, [bp + 5] ; $dest
3858   1CAA FD 43         mov [d], b
3859   1CAC FD 7D         dec b
3860   1CAE D8            push b
3861   1CAF FA FC FF      lea d, [bp + -4] ; $digits
3862   1CB2 D7            push a
3863   1CB3 DA            push d
3864   1CB4 FA FA FF      lea d, [bp + -6] ; $i
3865   1CB7 2A            mov b, [d]
3866   1CB8 E7            pop d
3867   1CB9 5A            add d, b
3868   1CBA E4            pop a
3869   1CBB 32            mov bl, [d]
3870   1CBC A7 00         mov bh, 0
3871   1CBE E7            pop d
3872   1CBF FD 3E         mov [d], bl
3873   1CC1             ; len++; 
3874   1CC1 FA F8 FF      lea d, [bp + -8] ; $len
3875   1CC4 2A            mov b, [d]
3876   1CC5 FD 77         inc b
3877   1CC7 FA F8 FF      lea d, [bp + -8] ; $len
3878   1CCA FD 43         mov [d], b
3879   1CCC FD 7D         dec b
3880   1CCE 0A 81 1C      jmp _while57_cond
3881   1CD1             _while57_exit:
3882   1CD1             ; *dest = '\0'; 
3883   1CD1 FA 05 00      lea d, [bp + 5] ; $dest
3884   1CD4 2A            mov b, [d]
3885   1CD5 D8            push b
3886   1CD6 26 00 00      mov b, $0
3887   1CD9 E7            pop d
3888   1CDA FD 3E         mov [d], bl
3889   1CDC             ; return len; 
3890   1CDC FA F8 FF      lea d, [bp + -8] ; $len
3891   1CDF 2A            mov b, [d]
3892   1CE0 F9            leave
3893   1CE1 09            ret
3894   1CE2             
3895   1CE2             date:
3896   1CE2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3897   1CE5             
3898   1CE5             ; --- BEGIN INLINE ASM SEGMENT
3899   1CE5 19 00         mov al, 0 
3900   1CE7 05 07         syscall sys_datetime
3901   1CE9             ; --- END INLINE ASM SEGMENT
3902   1CE9             
3903   1CE9 F9            leave
3904   1CEA 09            ret
3905   1CEB             
3906   1CEB             putchar:
3907   1CEB F8 00 00      enter 0 ; (push bp; mov bp, sp)
3908   1CEE             
3909   1CEE             ; --- BEGIN INLINE ASM SEGMENT
3910   1CEE FA 05 00      lea d, [bp + 5] ; $c
3911   1CF1 1E            mov al, [d]
3912   1CF2 23            mov ah, al
3913   1CF3 07 7C 1E      call _putchar
3914   1CF6             ; --- END INLINE ASM SEGMENT
3915   1CF6             
3916   1CF6 F9            leave
3917   1CF7 09            ret
3918   1CF8             
3919   1CF8             getchar:
3920   1CF8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3921   1CFB             ; char c; 
3922   1CFB 52 01 00      sub sp, 1
3923   1CFE             
3924   1CFE             ; --- BEGIN INLINE ASM SEGMENT
3925   1CFE 07 75 1E      call getch
3926   1D01 1A            mov al, ah
3927   1D02 FA 00 00      lea d, [bp + 0] ; $c
3928   1D05 3E            mov [d], al
3929   1D06             ; --- END INLINE ASM SEGMENT
3930   1D06             
3931   1D06             ; return c; 
3932   1D06 FA 00 00      lea d, [bp + 0] ; $c
3933   1D09 32            mov bl, [d]
3934   1D0A A7 00         mov bh, 0
3935   1D0C F9            leave
3936   1D0D 09            ret
3937   1D0E             
3938   1D0E             scann:
3939   1D0E F8 00 00      enter 0 ; (push bp; mov bp, sp)
3940   1D11             ; int m; 
3941   1D11 52 02 00      sub sp, 2
3942   1D14             
3943   1D14             ; --- BEGIN INLINE ASM SEGMENT
3944   1D14 07 C0 20      call scan_u16d
3945   1D17 FA FF FF      lea d, [bp + -1] ; $m
3946   1D1A 43            mov [d], a
3947   1D1B             ; --- END INLINE ASM SEGMENT
3948   1D1B             
3949   1D1B             ; return m; 
3950   1D1B FA FF FF      lea d, [bp + -1] ; $m
3951   1D1E 2A            mov b, [d]
3952   1D1F F9            leave
3953   1D20 09            ret
3954   1D21             
3955   1D21             puts:
3956   1D21 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3957   1D24             
3958   1D24             ; --- BEGIN INLINE ASM SEGMENT
3959   1D24 FA 05 00      lea d, [bp + 5] ; $s
3960   1D27 15            mov a, [d]
3961   1D28 3C            mov d, a
3962   1D29 07 C6 1F      call _puts
3963   1D2C 10 00 0A      mov a, $0A00
3964   1D2F 05 03         syscall sys_io
3965   1D31             ; --- END INLINE ASM SEGMENT
3966   1D31             
3967   1D31 F9            leave
3968   1D32 09            ret
3969   1D33             
3970   1D33             print:
3971   1D33 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3972   1D36             
3973   1D36             ; --- BEGIN INLINE ASM SEGMENT
3974   1D36 FA 05 00      lea d, [bp + 5] ; $s
3975   1D39 FD 2A         mov d, [d]
3976   1D3B 07 C6 1F      call _puts
3977   1D3E             ; --- END INLINE ASM SEGMENT
3978   1D3E             
3979   1D3E F9            leave
3980   1D3F 09            ret
3981   1D40             
3982   1D40             getparam:
3983   1D40 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3984   1D43             ; char data; 
3985   1D43 52 01 00      sub sp, 1
3986   1D46             
3987   1D46             ; --- BEGIN INLINE ASM SEGMENT
3988   1D46 19 04         mov al, 4
3989   1D48 FA 05 00      lea d, [bp + 5] ; $address
3990   1D4B FD 2A         mov d, [d]
3991   1D4D 05 0C         syscall sys_system
3992   1D4F FA 00 00      lea d, [bp + 0] ; $data
3993   1D52 FD 3E         mov [d], bl
3994   1D54             ; --- END INLINE ASM SEGMENT
3995   1D54             
3996   1D54             ; return data; 
3997   1D54 FA 00 00      lea d, [bp + 0] ; $data
3998   1D57 32            mov bl, [d]
3999   1D58 A7 00         mov bh, 0
4000   1D5A F9            leave
4001   1D5B 09            ret
4002   1D5C             
4003   1D5C             clear:
4004   1D5C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4005   1D5F             ; print("\033[2J\033[H"); 
4006   1D5F 26 BA 31      mov b, _s2 ; "\033[2J\033[H"
4007   1D62 FD AB         swp b
4008   1D64 D8            push b
4009   1D65 07 33 1D      call print
4010   1D68 51 02 00      add sp, 2
4011   1D6B F9            leave
4012   1D6C 09            ret
4013   1D6D             
4014   1D6D             abs:
4015   1D6D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4016   1D70             ; return i < 0 ? -i : i; 
4017   1D70             _ternary58_cond:
4018   1D70 FA 05 00      lea d, [bp + 5] ; $i
4019   1D73 2A            mov b, [d]
4020   1D74             ; --- START RELATIONAL
4021   1D74 D7            push a
4022   1D75 11            mov a, b
4023   1D76 26 00 00      mov b, $0
4024   1D79 B0            cmp a, b
4025   1D7A FD 73         slt ; < (signed)
4026   1D7C E4            pop a
4027   1D7D             ; --- END RELATIONAL
4028   1D7D C0 00 00      cmp b, 0
4029   1D80 C6 8C 1D      je _ternary58_false
4030   1D83             _ternary58_true:
4031   1D83 FA 05 00      lea d, [bp + 5] ; $i
4032   1D86 2A            mov b, [d]
4033   1D87 FD 97         neg b
4034   1D89 0A 90 1D      jmp _ternary58_exit
4035   1D8C             _ternary58_false:
4036   1D8C FA 05 00      lea d, [bp + 5] ; $i
4037   1D8F 2A            mov b, [d]
4038   1D90             _ternary58_exit:
4039   1D90 F9            leave
4040   1D91 09            ret
4041   1D92             
4042   1D92             include_stdio_asm:
4043   1D92 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4044   1D95             
4045   1D95             ; --- BEGIN INLINE ASM SEGMENT
4046   1D95             .include "lib/asm/stdio.asm"
0001+  1D95             ;-----------------------------------------------------------------------------
0002+  1D95             ; stdio.s
0003+  1D95             ;-----------------------------------------------------------------------------
0004+  1D95             .include "lib/asm/string.asm"
0001++ 1D95             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1D95             ; string.s
0003++ 1D95             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1D95             
0005++ 1D95             
0006++ 1D95             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1D95             ; _strrev
0008++ 1D95             ; reverse a string
0009++ 1D95             ; D = string address
0010++ 1D95             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1D95             ; 01234
0012++ 1D95             _strrev:
0013++ 1D95 4B          	pusha
0014++ 1D96 07 DC 1D    	call _strlen	; length in C
0015++ 1D99 12          	mov a, c
0016++ 1D9A AF 01 00    	cmp a, 1
0017++ 1D9D D0 B7 1D    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1DA0 7D          	dec a
0019++ 1DA1 FD 4E       	mov si, d	; beginning of string
0020++ 1DA3 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1DA5 59          	add d, a	; end of string
0022++ 1DA6 12          	mov a, c
0023++ 1DA7 FD 9B       	shr a		; divide by 2
0024++ 1DA9 39          	mov c, a	; C now counts the steps
0025++ 1DAA             _strrev_L0:
0026++ 1DAA 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1DAB F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1DAC 3E          	mov [d], al	; store left char into right side
0029++ 1DAD 1B          	mov al, bl
0030++ 1DAE F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1DAF 7E          	dec c
0032++ 1DB0 7F          	dec d
0033++ 1DB1 C2 00 00    	cmp c, 0
0034++ 1DB4 C7 AA 1D    	jne _strrev_L0
0035++ 1DB7             _strrev_end:
0036++ 1DB7 4C          	popa
0037++ 1DB8 09          	ret
0038++ 1DB9             	
0039++ 1DB9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1DB9             ; _strchr
0041++ 1DB9             ; search string in D for char in AL
0042++ 1DB9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1DB9             _strchr:
0044++ 1DB9             _strchr_L0:
0045++ 1DB9 32          	mov bl, [d]
0046++ 1DBA C1 00       	cmp bl, 0
0047++ 1DBC C6 C7 1D    	je _strchr_end
0048++ 1DBF BA          	cmp al, bl
0049++ 1DC0 C6 C7 1D    	je _strchr_end
0050++ 1DC3 79          	inc d
0051++ 1DC4 0A B9 1D    	jmp _strchr_L0
0052++ 1DC7             _strchr_end:
0053++ 1DC7 1B          	mov al, bl
0054++ 1DC8 09          	ret
0055++ 1DC9             
0056++ 1DC9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1DC9             ; _strstr
0058++ 1DC9             ; find sub-string
0059++ 1DC9             ; str1 in SI
0060++ 1DC9             ; str2 in DI
0061++ 1DC9             ; SI points to end of source string
0062++ 1DC9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1DC9             _strstr:
0064++ 1DC9 DB          	push al
0065++ 1DCA DA          	push d
0066++ 1DCB E3          	push di
0067++ 1DCC             _strstr_loop:
0068++ 1DCC F3          	cmpsb					; compare a byte of the strings
0069++ 1DCD C7 D8 1D    	jne _strstr_ret
0070++ 1DD0 FC 00 00    	lea d, [di + 0]
0071++ 1DD3 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1DD5 C7 CC 1D    	jne _strstr_loop				; equal chars but not at end
0073++ 1DD8             _strstr_ret:
0074++ 1DD8 F0          	pop di
0075++ 1DD9 E7          	pop d
0076++ 1DDA E8          	pop al
0077++ 1DDB 09          	ret
0078++ 1DDC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1DDC             ; length of null terminated string
0080++ 1DDC             ; result in C
0081++ 1DDC             ; pointer in D
0082++ 1DDC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1DDC             _strlen:
0084++ 1DDC DA          	push d
0085++ 1DDD 38 00 00    	mov c, 0
0086++ 1DE0             _strlen_L1:
0087++ 1DE0 BD 00       	cmp byte [d], 0
0088++ 1DE2 C6 EA 1D    	je _strlen_ret
0089++ 1DE5 79          	inc d
0090++ 1DE6 78          	inc c
0091++ 1DE7 0A E0 1D    	jmp _strlen_L1
0092++ 1DEA             _strlen_ret:
0093++ 1DEA E7          	pop d
0094++ 1DEB 09          	ret
0095++ 1DEC             
0096++ 1DEC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1DEC             ; STRCMP
0098++ 1DEC             ; compare two strings
0099++ 1DEC             ; str1 in SI
0100++ 1DEC             ; str2 in DI
0101++ 1DEC             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1DEC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1DEC             _strcmp:
0104++ 1DEC DB          	push al
0105++ 1DED DA          	push d
0106++ 1DEE E3          	push di
0107++ 1DEF E2          	push si
0108++ 1DF0             _strcmp_loop:
0109++ 1DF0 F3          	cmpsb					; compare a byte of the strings
0110++ 1DF1 C7 FC 1D    	jne _strcmp_ret
0111++ 1DF4 FB FF FF    	lea d, [si +- 1]
0112++ 1DF7 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1DF9 C7 F0 1D    	jne _strcmp_loop				; equal chars but not at end
0114++ 1DFC             _strcmp_ret:
0115++ 1DFC EF          	pop si
0116++ 1DFD F0          	pop di
0117++ 1DFE E7          	pop d
0118++ 1DFF E8          	pop al
0119++ 1E00 09          	ret
0120++ 1E01             
0121++ 1E01             
0122++ 1E01             ; STRCPY
0123++ 1E01             ; copy null terminated string from SI to DI
0124++ 1E01             ; source in SI
0125++ 1E01             ; destination in DI
0126++ 1E01             _strcpy:
0127++ 1E01 E2          	push si
0128++ 1E02 E3          	push di
0129++ 1E03 DB          	push al
0130++ 1E04             _strcpy_L1:
0131++ 1E04 F6          	lodsb
0132++ 1E05 F7          	stosb
0133++ 1E06 B9 00       	cmp al, 0
0134++ 1E08 C7 04 1E    	jne _strcpy_L1
0135++ 1E0B             _strcpy_end:
0136++ 1E0B E8          	pop al
0137++ 1E0C F0          	pop di
0138++ 1E0D EF          	pop si
0139++ 1E0E 09          	ret
0140++ 1E0F             
0141++ 1E0F             ; STRCAT
0142++ 1E0F             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1E0F             ; source in SI
0144++ 1E0F             ; destination in DI
0145++ 1E0F             _strcat:
0146++ 1E0F E2          	push si
0147++ 1E10 E3          	push di
0148++ 1E11 D7          	push a
0149++ 1E12 DA          	push d
0150++ 1E13 50          	mov a, di
0151++ 1E14 3C          	mov d, a
0152++ 1E15             _strcat_goto_end_L1:
0153++ 1E15 BD 00       	cmp byte[d], 0
0154++ 1E17 C6 1E 1E    	je _strcat_start
0155++ 1E1A 79          	inc d
0156++ 1E1B 0A 15 1E    	jmp _strcat_goto_end_L1
0157++ 1E1E             _strcat_start:
0158++ 1E1E FD 50       	mov di, d
0159++ 1E20             _strcat_L1:
0160++ 1E20 F6          	lodsb
0161++ 1E21 F7          	stosb
0162++ 1E22 B9 00       	cmp al, 0
0163++ 1E24 C7 20 1E    	jne _strcat_L1
0164++ 1E27             _strcat_end:
0165++ 1E27 E7          	pop d
0166++ 1E28 E4          	pop a
0167++ 1E29 F0          	pop di
0168++ 1E2A EF          	pop si
0169++ 1E2B 09          	ret
0170++ 1E2C             
0171++ 1E2C             
0005+  1E2C             
0006+  1E2C             ;-----------------------------------------------------------------------------
0007+  1E2C             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1E2C             ; ASCII in BL
0009+  1E2C             ; result in AL
0010+  1E2C             ; ascii for F = 0100 0110
0011+  1E2C             ; ascii for 9 = 0011 1001
0012+  1E2C             ;-----------------------------------------------------------------------------
0013+  1E2C             hex_ascii_encode:
0014+  1E2C 1B            mov al, bl
0015+  1E2D 93 40         test al, $40        ; test if letter or number
0016+  1E2F C7 35 1E      jnz hex_letter
0017+  1E32 87 0F         and al, $0F        ; get number
0018+  1E34 09            ret
0019+  1E35             hex_letter:
0020+  1E35 87 0F         and al, $0F        ; get letter
0021+  1E37 6A 09         add al, 9
0022+  1E39 09            ret
0023+  1E3A             
0024+  1E3A             ;-----------------------------------------------------------------------------
0025+  1E3A             ; ATOI
0026+  1E3A             ; 2 letter hex string in B
0027+  1E3A             ; 8bit integer returned in AL
0028+  1E3A             ;-----------------------------------------------------------------------------
0029+  1E3A             _atoi:
0030+  1E3A D8            push b
0031+  1E3B 07 2C 1E      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1E3E 30            mov bl, bh
0033+  1E3F DB            push al          ; save a
0034+  1E40 07 2C 1E      call hex_ascii_encode
0035+  1E43 EA            pop bl  
0036+  1E44 FD 9E 04      shl al, 4
0037+  1E47 8C            or al, bl
0038+  1E48 E5            pop b
0039+  1E49 09            ret  
0040+  1E4A             
0041+  1E4A             
0042+  1E4A             ;-----------------------------------------------------------------------------
0043+  1E4A             ; ITOA
0044+  1E4A             ; 8bit value in BL
0045+  1E4A             ; 2 byte ASCII result in A
0046+  1E4A             ;-----------------------------------------------------------------------------
0047+  1E4A             _itoa:
0048+  1E4A DA            push d
0049+  1E4B D8            push b
0050+  1E4C A7 00         mov bh, 0
0051+  1E4E FD A4 04      shr bl, 4  
0052+  1E51 74            mov d, b
0053+  1E52 1F FA 20      mov al, [d + s_hex_digits]
0054+  1E55 23            mov ah, al
0055+  1E56               
0056+  1E56 E5            pop b
0057+  1E57 D8            push b
0058+  1E58 A7 00         mov bh, 0
0059+  1E5A FD 87 0F      and bl, $0F
0060+  1E5D 74            mov d, b
0061+  1E5E 1F FA 20      mov al, [d + s_hex_digits]
0062+  1E61 E5            pop b
0063+  1E62 E7            pop d
0064+  1E63 09            ret
0065+  1E64             
0066+  1E64             ;-----------------------------------------------------------------------------
0067+  1E64             ; HEX STRING TO BINARY
0068+  1E64             ; di = destination address
0069+  1E64             ; si = source
0070+  1E64             ;-----------------------------------------------------------------------------
0071+  1E64             _hex_to_int:
0072+  1E64             _hex_to_int_L1:
0073+  1E64 F6            lodsb          ; load from [SI] to AL
0074+  1E65 B9 00         cmp al, 0        ; check if ASCII 0
0075+  1E67 C6 74 1E      jz _hex_to_int_ret
0076+  1E6A 36            mov bh, al
0077+  1E6B F6            lodsb
0078+  1E6C 2F            mov bl, al
0079+  1E6D 07 3A 1E      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1E70 F7            stosb          ; store AL to [DI]
0081+  1E71 0A 64 1E      jmp _hex_to_int_L1
0082+  1E74             _hex_to_int_ret:
0083+  1E74 09            ret    
0084+  1E75             
0085+  1E75             ;-----------------------------------------------------------------------------
0086+  1E75             ; GETCHAR
0087+  1E75             ; char in ah
0088+  1E75             ;-----------------------------------------------------------------------------
0089+  1E75             getch:
0090+  1E75 DB            push al
0091+  1E76             getch_retry:
0092+  1E76 19 01         mov al, 1
0093+  1E78 05 03         syscall sys_io      ; receive in AH
0094+  1E7A E8            pop al
0095+  1E7B 09            ret
0096+  1E7C             
0097+  1E7C             ;-----------------------------------------------------------------------------
0098+  1E7C             ; PUTCHAR
0099+  1E7C             ; char in ah
0100+  1E7C             ;-----------------------------------------------------------------------------
0101+  1E7C             _putchar:
0102+  1E7C D7            push a
0103+  1E7D 19 00         mov al, 0
0104+  1E7F 05 03         syscall sys_io      ; char in AH
0105+  1E81 E4            pop a
0106+  1E82 09            ret
0107+  1E83             
0108+  1E83             ;-----------------------------------------------------------------------------
0109+  1E83             ;; INPUT A STRING
0110+  1E83             ;; terminates with null
0111+  1E83             ;; pointer in D
0112+  1E83             ;-----------------------------------------------------------------------------
0113+  1E83             _gets:
0114+  1E83 D7            push a
0115+  1E84 DA            push d
0116+  1E85             _gets_loop:
0117+  1E85 19 01         mov al, 1
0118+  1E87 05 03         syscall sys_io      ; receive in AH
0119+  1E89 B9 00         cmp al, 0        ; check error code (AL)
0120+  1E8B C6 85 1E      je _gets_loop      ; if no char received, retry
0121+  1E8E             
0122+  1E8E 76 1B         cmp ah, 27
0123+  1E90 C6 B1 1E      je _gets_ansi_esc
0124+  1E93 76 0A         cmp ah, $0A        ; LF
0125+  1E95 C6 1C 1F      je _gets_end
0126+  1E98 76 0D         cmp ah, $0D        ; CR
0127+  1E9A C6 1C 1F      je _gets_end
0128+  1E9D 76 5C         cmp ah, $5C        ; '\\'
0129+  1E9F C6 DD 1E      je _gets_escape
0130+  1EA2               
0131+  1EA2 76 08         cmp ah, $08      ; check for backspace
0132+  1EA4 C6 AD 1E      je _gets_backspace
0133+  1EA7             
0134+  1EA7 1A            mov al, ah
0135+  1EA8 3E            mov [d], al
0136+  1EA9 79            inc d
0137+  1EAA 0A 85 1E      jmp _gets_loop
0138+  1EAD             _gets_backspace:
0139+  1EAD 7F            dec d
0140+  1EAE 0A 85 1E      jmp _gets_loop
0141+  1EB1             _gets_ansi_esc:
0142+  1EB1 19 01         mov al, 1
0143+  1EB3 05 03         syscall sys_io        ; receive in AH without echo
0144+  1EB5 B9 00         cmp al, 0          ; check error code (AL)
0145+  1EB7 C6 B1 1E      je _gets_ansi_esc    ; if no char received, retry
0146+  1EBA 76 5B         cmp ah, '['
0147+  1EBC C7 85 1E      jne _gets_loop
0148+  1EBF             _gets_ansi_esc_2:
0149+  1EBF 19 01         mov al, 1
0150+  1EC1 05 03         syscall sys_io          ; receive in AH without echo
0151+  1EC3 B9 00         cmp al, 0            ; check error code (AL)
0152+  1EC5 C6 BF 1E      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1EC8 76 44         cmp ah, 'D'
0154+  1ECA C6 D5 1E      je _gets_left_arrow
0155+  1ECD 76 43         cmp ah, 'C'
0156+  1ECF C6 D9 1E      je _gets_right_arrow
0157+  1ED2 0A 85 1E      jmp _gets_loop
0158+  1ED5             _gets_left_arrow:
0159+  1ED5 7F            dec d
0160+  1ED6 0A 85 1E      jmp _gets_loop
0161+  1ED9             _gets_right_arrow:
0162+  1ED9 79            inc d
0163+  1EDA 0A 85 1E      jmp _gets_loop
0164+  1EDD             _gets_escape:
0165+  1EDD 19 01         mov al, 1
0166+  1EDF 05 03         syscall sys_io      ; receive in AH
0167+  1EE1 B9 00         cmp al, 0        ; check error code (AL)
0168+  1EE3 C6 DD 1E      je _gets_escape      ; if no char received, retry
0169+  1EE6 76 6E         cmp ah, 'n'
0170+  1EE8 C6 07 1F      je _gets_LF
0171+  1EEB 76 72         cmp ah, 'r'
0172+  1EED C6 0E 1F      je _gets_CR
0173+  1EF0 76 30         cmp ah, '0'
0174+  1EF2 C6 15 1F      je _gets_NULL
0175+  1EF5 76 5C         cmp ah, $5C  ; '\'
0176+  1EF7 C6 00 1F      je _gets_slash
0177+  1EFA 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1EFB 3E            mov [d], al
0179+  1EFC 79            inc d
0180+  1EFD 0A 85 1E      jmp _gets_loop
0181+  1F00             _gets_slash:
0182+  1F00 19 5C         mov al, $5C
0183+  1F02 3E            mov [d], al
0184+  1F03 79            inc d
0185+  1F04 0A 85 1E      jmp _gets_loop
0186+  1F07             _gets_LF:
0187+  1F07 19 0A         mov al, $0A
0188+  1F09 3E            mov [d], al
0189+  1F0A 79            inc d
0190+  1F0B 0A 85 1E      jmp _gets_loop
0191+  1F0E             _gets_CR:
0192+  1F0E 19 0D         mov al, $0D
0193+  1F10 3E            mov [d], al
0194+  1F11 79            inc d
0195+  1F12 0A 85 1E      jmp _gets_loop
0196+  1F15             _gets_NULL:
0197+  1F15 19 00         mov al, $00
0198+  1F17 3E            mov [d], al
0199+  1F18 79            inc d
0200+  1F19 0A 85 1E      jmp _gets_loop
0201+  1F1C             _gets_end:
0202+  1F1C 19 00         mov al, 0
0203+  1F1E 3E            mov [d], al        ; terminate string
0204+  1F1F E7            pop d
0205+  1F20 E4            pop a
0206+  1F21 09            ret
0207+  1F22             
0208+  1F22             ;-----------------------------------------------------------------------------
0209+  1F22             ;; INPUT TEXT
0210+  1F22             ;; terminated with CTRL+D
0211+  1F22             ;; pointer in D
0212+  1F22             ;-----------------------------------------------------------------------------
0213+  1F22             _gettxt:
0214+  1F22 D7            push a
0215+  1F23 DA            push d
0216+  1F24             _gettxt_loop:
0217+  1F24 19 01         mov al, 1
0218+  1F26 05 03         syscall sys_io      ; receive in AH
0219+  1F28 B9 00         cmp al, 0        ; check error code (AL)
0220+  1F2A C6 24 1F      je _gettxt_loop    ; if no char received, retry
0221+  1F2D 76 04         cmp ah, 4      ; EOT
0222+  1F2F C6 6D 1F      je _gettxt_end
0223+  1F32 76 08         cmp ah, $08      ; check for backspace
0224+  1F34 C6 69 1F      je _gettxt_backspace
0225+  1F37 76 5C         cmp ah, $5C        ; '\'
0226+  1F39 C6 42 1F      je _gettxt_escape
0227+  1F3C 1A            mov al, ah
0228+  1F3D 3E            mov [d], al
0229+  1F3E 79            inc d
0230+  1F3F 0A 24 1F      jmp _gettxt_loop
0231+  1F42             _gettxt_escape:
0232+  1F42 19 01         mov al, 1
0233+  1F44 05 03         syscall sys_io      ; receive in AH
0234+  1F46 B9 00         cmp al, 0        ; check error code (AL)
0235+  1F48 C6 42 1F      je _gettxt_escape    ; if no char received, retry
0236+  1F4B 76 6E         cmp ah, 'n'
0237+  1F4D C6 5B 1F      je _gettxt_LF
0238+  1F50 76 72         cmp ah, 'r'
0239+  1F52 C6 62 1F      je _gettxt_CR
0240+  1F55 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1F56 3E            mov [d], al
0242+  1F57 79            inc d
0243+  1F58 0A 24 1F      jmp _gettxt_loop
0244+  1F5B             _gettxt_LF:
0245+  1F5B 19 0A         mov al, $0A
0246+  1F5D 3E            mov [d], al
0247+  1F5E 79            inc d
0248+  1F5F 0A 24 1F      jmp _gettxt_loop
0249+  1F62             _gettxt_CR:
0250+  1F62 19 0D         mov al, $0D
0251+  1F64 3E            mov [d], al
0252+  1F65 79            inc d
0253+  1F66 0A 24 1F      jmp _gettxt_loop
0254+  1F69             _gettxt_backspace:
0255+  1F69 7F            dec d
0256+  1F6A 0A 24 1F      jmp _gettxt_loop
0257+  1F6D             _gettxt_end:
0258+  1F6D 19 00         mov al, 0
0259+  1F6F 3E            mov [d], al        ; terminate string
0260+  1F70 E7            pop d
0261+  1F71 E4            pop a
0262+  1F72 09            ret
0263+  1F73             
0264+  1F73             ;-----------------------------------------------------------------------------
0265+  1F73             ; PRINT NEW LINE
0266+  1F73             ;-----------------------------------------------------------------------------
0267+  1F73             printnl:
0268+  1F73 D7            push a
0269+  1F74 10 00 0A      mov a, $0A00
0270+  1F77 05 03         syscall sys_io
0271+  1F79 10 00 0D      mov a, $0D00
0272+  1F7C 05 03         syscall sys_io
0273+  1F7E E4            pop a
0274+  1F7F 09            ret
0275+  1F80             
0276+  1F80             ;-----------------------------------------------------------------------------
0277+  1F80             ; _strtoint
0278+  1F80             ; 4 digit hex string number in d
0279+  1F80             ; integer returned in A
0280+  1F80             ;-----------------------------------------------------------------------------
0281+  1F80             _strtointx:
0282+  1F80 D8            push b
0283+  1F81 32            mov bl, [d]
0284+  1F82 37            mov bh, bl
0285+  1F83 33 01 00      mov bl, [d + 1]
0286+  1F86 07 3A 1E      call _atoi        ; convert to int in AL
0287+  1F89 23            mov ah, al        ; move to AH
0288+  1F8A 33 02 00      mov bl, [d + 2]
0289+  1F8D 37            mov bh, bl
0290+  1F8E 33 03 00      mov bl, [d + 3]
0291+  1F91 07 3A 1E      call _atoi        ; convert to int in AL
0292+  1F94 E5            pop b
0293+  1F95 09            ret
0294+  1F96             
0295+  1F96             ;-----------------------------------------------------------------------------
0296+  1F96             ; _strtoint
0297+  1F96             ; 5 digit base10 string number in d
0298+  1F96             ; integer returned in A
0299+  1F96             ;-----------------------------------------------------------------------------
0300+  1F96             _strtoint:
0301+  1F96 E2            push si
0302+  1F97 D8            push b
0303+  1F98 D9            push c
0304+  1F99 DA            push d
0305+  1F9A 07 DC 1D      call _strlen      ; get string length in C
0306+  1F9D 7E            dec c
0307+  1F9E FD 4E         mov si, d
0308+  1FA0 12            mov a, c
0309+  1FA1 FD 99         shl a
0310+  1FA3 3B 12 21      mov d, table_power
0311+  1FA6 59            add d, a
0312+  1FA7 38 00 00      mov c, 0
0313+  1FAA             _strtoint_L0:
0314+  1FAA F6            lodsb      ; load ASCII to al
0315+  1FAB B9 00         cmp al, 0
0316+  1FAD C6 C0 1F      je _strtoint_end
0317+  1FB0 6F 30         sub al, $30    ; make into integer
0318+  1FB2 22 00         mov ah, 0
0319+  1FB4 2A            mov b, [d]
0320+  1FB5 AC            mul a, b      ; result in B since it fits in 16bits
0321+  1FB6 11            mov a, b
0322+  1FB7 28            mov b, c
0323+  1FB8 54            add a, b
0324+  1FB9 39            mov c, a
0325+  1FBA 63 02 00      sub d, 2
0326+  1FBD 0A AA 1F      jmp _strtoint_L0
0327+  1FC0             _strtoint_end:
0328+  1FC0 12            mov a, c
0329+  1FC1 E7            pop d
0330+  1FC2 E6            pop c
0331+  1FC3 E5            pop b
0332+  1FC4 EF            pop si
0333+  1FC5 09            ret
0334+  1FC6             
0335+  1FC6             ;-----------------------------------------------------------------------------
0336+  1FC6             ; PRINT NULL TERMINATED STRING
0337+  1FC6             ; pointer in D
0338+  1FC6             ;-----------------------------------------------------------------------------
0339+  1FC6             _puts:
0340+  1FC6 D7            push a
0341+  1FC7 DA            push d
0342+  1FC8             _puts_L1:
0343+  1FC8 1E            mov al, [d]
0344+  1FC9 B9 00         cmp al, 0
0345+  1FCB C6 D7 1F      jz _puts_END
0346+  1FCE 23            mov ah, al
0347+  1FCF 19 00         mov al, 0
0348+  1FD1 05 03         syscall sys_io
0349+  1FD3 79            inc d
0350+  1FD4 0A C8 1F      jmp _puts_L1
0351+  1FD7             _puts_END:
0352+  1FD7 E7            pop d
0353+  1FD8 E4            pop a
0354+  1FD9 09            ret
0355+  1FDA             
0356+  1FDA             ;-----------------------------------------------------------------------------
0357+  1FDA             ; PRINT N SIZE STRING
0358+  1FDA             ; pointer in D
0359+  1FDA             ; size in C
0360+  1FDA             ;-----------------------------------------------------------------------------
0361+  1FDA             _putsn:
0362+  1FDA DB            push al
0363+  1FDB DA            push d
0364+  1FDC D9            push c
0365+  1FDD             _putsn_L0:
0366+  1FDD 1E            mov al, [d]
0367+  1FDE 23            mov ah, al
0368+  1FDF 19 00         mov al, 0
0369+  1FE1 05 03         syscall sys_io
0370+  1FE3 79            inc d
0371+  1FE4 7E            dec c  
0372+  1FE5 C2 00 00      cmp c, 0
0373+  1FE8 C7 DD 1F      jne _putsn_L0
0374+  1FEB             _putsn_end:
0375+  1FEB E6            pop c
0376+  1FEC E7            pop d
0377+  1FED E8            pop al
0378+  1FEE 09            ret
0379+  1FEF             
0380+  1FEF             ;-----------------------------------------------------------------------------
0381+  1FEF             ; print 16bit decimal number
0382+  1FEF             ; input number in A
0383+  1FEF             ;-----------------------------------------------------------------------------
0384+  1FEF             print_u16d:
0385+  1FEF D7            push a
0386+  1FF0 D8            push b
0387+  1FF1 26 10 27      mov b, 10000
0388+  1FF4 AE            div a, b      ; get 10000's coeff.
0389+  1FF5 07 17 20      call print_number
0390+  1FF8 11            mov a, b
0391+  1FF9 26 E8 03      mov b, 1000
0392+  1FFC AE            div a, b      ; get 1000's coeff.
0393+  1FFD 07 17 20      call print_number
0394+  2000 11            mov a, b
0395+  2001 26 64 00      mov b, 100
0396+  2004 AE            div a, b
0397+  2005 07 17 20      call print_number
0398+  2008 11            mov a, b
0399+  2009 26 0A 00      mov b, 10
0400+  200C AE            div a, b
0401+  200D 07 17 20      call print_number
0402+  2010 1B            mov al, bl      ; 1's coeff in bl
0403+  2011 07 17 20      call print_number
0404+  2014 E5            pop b
0405+  2015 E4            pop a
0406+  2016 09            ret
0407+  2017             
0408+  2017             ;-----------------------------------------------------------------------------
0409+  2017             ; print AL
0410+  2017             ;-----------------------------------------------------------------------------
0411+  2017             print_number:
0412+  2017 6A 30         add al, $30
0413+  2019 23            mov ah, al
0414+  201A 07 7C 1E      call _putchar
0415+  201D 09            ret
0416+  201E             
0417+  201E             ;-----------------------------------------------------------------------------
0418+  201E             ; PRINT 16BIT HEX INTEGER
0419+  201E             ; integer value in reg B
0420+  201E             ;-----------------------------------------------------------------------------
0421+  201E             print_u16x:
0422+  201E D7            push a
0423+  201F D8            push b
0424+  2020 DD            push bl
0425+  2021 30            mov bl, bh
0426+  2022 07 4A 1E      call _itoa        ; convert bh to char in A
0427+  2025 2F            mov bl, al        ; save al
0428+  2026 19 00         mov al, 0
0429+  2028 05 03         syscall sys_io        ; display AH
0430+  202A 24            mov ah, bl        ; retrieve al
0431+  202B 19 00         mov al, 0
0432+  202D 05 03         syscall sys_io        ; display AL
0433+  202F             
0434+  202F EA            pop bl
0435+  2030 07 4A 1E      call _itoa        ; convert bh to char in A
0436+  2033 2F            mov bl, al        ; save al
0437+  2034 19 00         mov al, 0
0438+  2036 05 03         syscall sys_io        ; display AH
0439+  2038 24            mov ah, bl        ; retrieve al
0440+  2039 19 00         mov al, 0
0441+  203B 05 03         syscall sys_io        ; display AL
0442+  203D             
0443+  203D E5            pop b
0444+  203E E4            pop a
0445+  203F 09            ret
0446+  2040             
0447+  2040             ;-----------------------------------------------------------------------------
0448+  2040             ; INPUT 16BIT HEX INTEGER
0449+  2040             ; read 16bit integer into A
0450+  2040             ;-----------------------------------------------------------------------------
0451+  2040             scan_u16x:
0452+  2040 F8 10 00      enter 16
0453+  2043 D8            push b
0454+  2044 DA            push d
0455+  2045             
0456+  2045 FA F1 FF      lea d, [bp + -15]
0457+  2048 07 83 1E      call _gets        ; get number
0458+  204B             
0459+  204B 32            mov bl, [d]
0460+  204C 37            mov bh, bl
0461+  204D 33 01 00      mov bl, [d + 1]
0462+  2050 07 3A 1E      call _atoi        ; convert to int in AL
0463+  2053 23            mov ah, al        ; move to AH
0464+  2054             
0465+  2054 33 02 00      mov bl, [d + 2]
0466+  2057 37            mov bh, bl
0467+  2058 33 03 00      mov bl, [d + 3]
0468+  205B 07 3A 1E      call _atoi        ; convert to int in AL
0469+  205E             
0470+  205E E7            pop d
0471+  205F E5            pop b
0472+  2060 F9            leave
0473+  2061 09            ret
0474+  2062             
0475+  2062             ;-----------------------------------------------------------------------------
0476+  2062             ; PRINT 8bit HEX INTEGER
0477+  2062             ; integer value in reg bl
0478+  2062             ;-----------------------------------------------------------------------------
0479+  2062             print_u8x:
0480+  2062 D7            push a
0481+  2063 DD            push bl
0482+  2064             
0483+  2064 07 4A 1E      call _itoa        ; convert bl to char in A
0484+  2067 2F            mov bl, al        ; save al
0485+  2068 19 00         mov al, 0
0486+  206A 05 03         syscall sys_io        ; display AH
0487+  206C 24            mov ah, bl        ; retrieve al
0488+  206D 19 00         mov al, 0
0489+  206F 05 03         syscall sys_io        ; display AL
0490+  2071             
0491+  2071 EA            pop bl
0492+  2072 E4            pop a
0493+  2073 09            ret
0494+  2074             
0495+  2074             ;-----------------------------------------------------------------------------
0496+  2074             ; print 8bit decimal unsigned number
0497+  2074             ; input number in AL
0498+  2074             ;-----------------------------------------------------------------------------
0499+  2074             print_u8d:
0500+  2074 D7            push a
0501+  2075 D8            push b
0502+  2076             
0503+  2076 22 00         mov ah, 0
0504+  2078 26 64 00      mov b, 100
0505+  207B AE            div a, b
0506+  207C D8            push b      ; save remainder
0507+  207D B9 00         cmp al, 0
0508+  207F C6 89 20      je skip100
0509+  2082 6A 30         add al, $30
0510+  2084 23            mov ah, al
0511+  2085 19 00         mov al, 0
0512+  2087 05 03         syscall sys_io  ; print coeff
0513+  2089             skip100:
0514+  2089 E4            pop a
0515+  208A 22 00         mov ah, 0
0516+  208C 26 0A 00      mov b, 10
0517+  208F AE            div a, b
0518+  2090 D8            push b      ; save remainder
0519+  2091 B9 00         cmp al, 0
0520+  2093 C6 9D 20      je skip10
0521+  2096 6A 30         add al, $30
0522+  2098 23            mov ah, al
0523+  2099 19 00         mov al, 0
0524+  209B 05 03         syscall sys_io  ; print coeff
0525+  209D             skip10:
0526+  209D E4            pop a
0527+  209E 1B            mov al, bl
0528+  209F 6A 30         add al, $30
0529+  20A1 23            mov ah, al
0530+  20A2 19 00         mov al, 0
0531+  20A4 05 03         syscall sys_io  ; print coeff
0532+  20A6 E5            pop b
0533+  20A7 E4            pop a
0534+  20A8 09            ret
0535+  20A9             
0536+  20A9             ;-----------------------------------------------------------------------------
0537+  20A9             ; INPUT 8BIT HEX INTEGER
0538+  20A9             ; read 8bit integer into AL
0539+  20A9             ;-----------------------------------------------------------------------------
0540+  20A9             scan_u8x:
0541+  20A9 F8 04 00      enter 4
0542+  20AC D8            push b
0543+  20AD DA            push d
0544+  20AE             
0545+  20AE FA FD FF      lea d, [bp + -3]
0546+  20B1 07 83 1E      call _gets        ; get number
0547+  20B4             
0548+  20B4 32            mov bl, [d]
0549+  20B5 37            mov bh, bl
0550+  20B6 33 01 00      mov bl, [d + 1]
0551+  20B9 07 3A 1E      call _atoi        ; convert to int in AL
0552+  20BC             
0553+  20BC E7            pop d
0554+  20BD E5            pop b
0555+  20BE F9            leave
0556+  20BF 09            ret
0557+  20C0             
0558+  20C0             ;-----------------------------------------------------------------------------
0559+  20C0             ; input decimal number
0560+  20C0             ; result in A
0561+  20C0             ; 655'\0'
0562+  20C0             ; low--------high
0563+  20C0             ;-----------------------------------------------------------------------------
0564+  20C0             scan_u16d:
0565+  20C0 F8 08 00      enter 8
0566+  20C3 E2            push si
0567+  20C4 D8            push b
0568+  20C5 D9            push c
0569+  20C6 DA            push d
0570+  20C7 FA F9 FF      lea d, [bp +- 7]
0571+  20CA 07 83 1E      call _gets
0572+  20CD 07 DC 1D      call _strlen      ; get string length in C
0573+  20D0 7E            dec c
0574+  20D1 FD 4E         mov si, d
0575+  20D3 12            mov a, c
0576+  20D4 FD 99         shl a
0577+  20D6 3B 12 21      mov d, table_power
0578+  20D9 59            add d, a
0579+  20DA 38 00 00      mov c, 0
0580+  20DD             mul_loop:
0581+  20DD F6            lodsb      ; load ASCII to al
0582+  20DE B9 00         cmp al, 0
0583+  20E0 C6 F3 20      je mul_exit
0584+  20E3 6F 30         sub al, $30    ; make into integer
0585+  20E5 22 00         mov ah, 0
0586+  20E7 2A            mov b, [d]
0587+  20E8 AC            mul a, b      ; result in B since it fits in 16bits
0588+  20E9 11            mov a, b
0589+  20EA 28            mov b, c
0590+  20EB 54            add a, b
0591+  20EC 39            mov c, a
0592+  20ED 63 02 00      sub d, 2
0593+  20F0 0A DD 20      jmp mul_loop
0594+  20F3             mul_exit:
0595+  20F3 12            mov a, c
0596+  20F4 E7            pop d
0597+  20F5 E6            pop c
0598+  20F6 E5            pop b
0599+  20F7 EF            pop si
0600+  20F8 F9            leave
0601+  20F9 09            ret
0602+  20FA             
0603+  20FA 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  20FE 34 35 36 37 
0603+  2102 38 39 41 42 
0603+  2106 43 44 45 46 
0604+  210A 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  210E 1B 5B 48 00 
0605+  2112             
0606+  2112             table_power:
0607+  2112 01 00         .dw 1
0608+  2114 0A 00         .dw 10
0609+  2116 64 00         .dw 100
0610+  2118 E8 03         .dw 1000
0611+  211A 10 27         .dw 100004047   211C             ; --- END INLINE ASM SEGMENT
4048   211C             
4049   211C F9            leave
4050   211D 09            ret
4051   211E             
4052   211E             print_grid:
4053   211E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4054   2121             ; for (y = 0; y < 20; ++y) { 
4055   2121             _for59_init:
4056   2121 3B 71 31      mov d, _y ; $y
4057   2124 DA            push d
4058   2125 26 00 00      mov b, $0
4059   2128 E7            pop d
4060   2129 FD 43         mov [d], b
4061   212B             _for59_cond:
4062   212B 3B 71 31      mov d, _y ; $y
4063   212E 2A            mov b, [d]
4064   212F             ; --- START RELATIONAL
4065   212F D7            push a
4066   2130 11            mov a, b
4067   2131 26 14 00      mov b, $14
4068   2134 B0            cmp a, b
4069   2135 FD 73         slt ; < (signed)
4070   2137 E4            pop a
4071   2138             ; --- END RELATIONAL
4072   2138 C0 00 00      cmp b, 0
4073   213B C6 F1 21      je _for59_exit
4074   213E             _for59_block:
4075   213E             ; for (x = 0; x < 40; ++x) { 
4076   213E             _for60_init:
4077   213E 3B 6F 31      mov d, _x ; $x
4078   2141 DA            push d
4079   2142 26 00 00      mov b, $0
4080   2145 E7            pop d
4081   2146 FD 43         mov [d], b
4082   2148             _for60_cond:
4083   2148 3B 6F 31      mov d, _x ; $x
4084   214B 2A            mov b, [d]
4085   214C             ; --- START RELATIONAL
4086   214C D7            push a
4087   214D 11            mov a, b
4088   214E 26 28 00      mov b, $28
4089   2151 B0            cmp a, b
4090   2152 FD 73         slt ; < (signed)
4091   2154 E4            pop a
4092   2155             ; --- END RELATIONAL
4093   2155 C0 00 00      cmp b, 0
4094   2158 C6 DC 21      je _for60_exit
4095   215B             _for60_block:
4096   215B             ; switch (grid[y][x]) { 
4097   215B             _switch61_expr:
4098   215B 3B EF 24      mov d, _grid_data ; $grid
4099   215E D7            push a
4100   215F DA            push d
4101   2160 3B 71 31      mov d, _y ; $y
4102   2163 2A            mov b, [d]
4103   2164 E7            pop d
4104   2165 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
4105   2169 DA            push d
4106   216A 3B 6F 31      mov d, _x ; $x
4107   216D 2A            mov b, [d]
4108   216E E7            pop d
4109   216F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4110   2173 E4            pop a
4111   2174 2A            mov b, [d]
4112   2175             _switch61_comparisons:
4113   2175 C0 00 00      cmp b, 0
4114   2178 C6 90 21      je _switch61_case0
4115   217B C0 01 00      cmp b, 1
4116   217E C6 9D 21      je _switch61_case1
4117   2181 C0 02 00      cmp b, 2
4118   2184 C6 AA 21      je _switch61_case2
4119   2187 C0 03 00      cmp b, 3
4120   218A C6 B7 21      je _switch61_case3
4121   218D 0A C4 21      jmp _switch61_exit
4122   2190             _switch61_case0:
4123   2190             ; c = ' '; break; 
4124   2190 3B 7D 31      mov d, _c ; $c
4125   2193 DA            push d
4126   2194 26 20 00      mov b, $20
4127   2197 E7            pop d
4128   2198 FD 3E         mov [d], bl
4129   219A             ; break; 
4130   219A 0A C4 21      jmp _switch61_exit ; case break
4131   219D             _switch61_case1:
4132   219D             ; c = '*'; break; 
4133   219D 3B 7D 31      mov d, _c ; $c
4134   21A0 DA            push d
4135   21A1 26 2A 00      mov b, $2a
4136   21A4 E7            pop d
4137   21A5 FD 3E         mov [d], bl
4138   21A7             ; break; 
4139   21A7 0A C4 21      jmp _switch61_exit ; case break
4140   21AA             _switch61_case2:
4141   21AA             ; c = 'H'; break; 
4142   21AA 3B 7D 31      mov d, _c ; $c
4143   21AD DA            push d
4144   21AE 26 48 00      mov b, $48
4145   21B1 E7            pop d
4146   21B2 FD 3E         mov [d], bl
4147   21B4             ; break; 
4148   21B4 0A C4 21      jmp _switch61_exit ; case break
4149   21B7             _switch61_case3:
4150   21B7             ; c = 'T'; break; 
4151   21B7 3B 7D 31      mov d, _c ; $c
4152   21BA DA            push d
4153   21BB 26 54 00      mov b, $54
4154   21BE E7            pop d
4155   21BF FD 3E         mov [d], bl
4156   21C1             ; break; 
4157   21C1 0A C4 21      jmp _switch61_exit ; case break
4158   21C4             _switch61_exit:
4159   21C4             ; putchar(c); 
4160   21C4 3B 7D 31      mov d, _c ; $c
4161   21C7 32            mov bl, [d]
4162   21C8 A7 00         mov bh, 0
4163   21CA DD            push bl
4164   21CB 07 EB 1C      call putchar
4165   21CE 51 01 00      add sp, 1
4166   21D1             _for60_update:
4167   21D1 3B 6F 31      mov d, _x ; $x
4168   21D4 2A            mov b, [d]
4169   21D5 FD 77         inc b
4170   21D7 FD 43         mov [d], b
4171   21D9 0A 48 21      jmp _for60_cond
4172   21DC             _for60_exit:
4173   21DC             ; putchar('\n'); 
4174   21DC 26 0A 00      mov b, $a
4175   21DF DD            push bl
4176   21E0 07 EB 1C      call putchar
4177   21E3 51 01 00      add sp, 1
4178   21E6             _for59_update:
4179   21E6 3B 71 31      mov d, _y ; $y
4180   21E9 2A            mov b, [d]
4181   21EA FD 77         inc b
4182   21EC FD 43         mov [d], b
4183   21EE 0A 2B 21      jmp _for59_cond
4184   21F1             _for59_exit:
4185   21F1             ; return; 
4186   21F1 F9            leave
4187   21F2 09            ret
4188   21F3             
4189   21F3             iterate:
4190   21F3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4191   21F6             ; for (y = 0; y < 20; ++y){ 
4192   21F6             _for62_init:
4193   21F6 3B 71 31      mov d, _y ; $y
4194   21F9 DA            push d
4195   21FA 26 00 00      mov b, $0
4196   21FD E7            pop d
4197   21FE FD 43         mov [d], b
4198   2200             _for62_cond:
4199   2200 3B 71 31      mov d, _y ; $y
4200   2203 2A            mov b, [d]
4201   2204             ; --- START RELATIONAL
4202   2204 D7            push a
4203   2205 11            mov a, b
4204   2206 26 14 00      mov b, $14
4205   2209 B0            cmp a, b
4206   220A FD 73         slt ; < (signed)
4207   220C E4            pop a
4208   220D             ; --- END RELATIONAL
4209   220D C0 00 00      cmp b, 0
4210   2210 C6 66 24      je _for62_exit
4211   2213             _for62_block:
4212   2213             ; for (x = 0; x < 40; ++x){ 
4213   2213             _for63_init:
4214   2213 3B 6F 31      mov d, _x ; $x
4215   2216 DA            push d
4216   2217 26 00 00      mov b, $0
4217   221A E7            pop d
4218   221B FD 43         mov [d], b
4219   221D             _for63_cond:
4220   221D 3B 6F 31      mov d, _x ; $x
4221   2220 2A            mov b, [d]
4222   2221             ; --- START RELATIONAL
4223   2221 D7            push a
4224   2222 11            mov a, b
4225   2223 26 28 00      mov b, $28
4226   2226 B0            cmp a, b
4227   2227 FD 73         slt ; < (signed)
4228   2229 E4            pop a
4229   222A             ; --- END RELATIONAL
4230   222A C0 00 00      cmp b, 0
4231   222D C6 5B 24      je _for63_exit
4232   2230             _for63_block:
4233   2230             ; head_count = 0; 
4234   2230 3B 7B 31      mov d, _head_count ; $head_count
4235   2233 DA            push d
4236   2234 26 00 00      mov b, $0
4237   2237 E7            pop d
4238   2238 FD 43         mov [d], b
4239   223A             ; for (dy = -1; dy <= 1; dy++){ 
4240   223A             _for64_init:
4241   223A 3B 75 31      mov d, _dy ; $dy
4242   223D DA            push d
4243   223E 26 01 00      mov b, $1
4244   2241 FD 97         neg b
4245   2243 E7            pop d
4246   2244 FD 43         mov [d], b
4247   2246             _for64_cond:
4248   2246 3B 75 31      mov d, _dy ; $dy
4249   2249 2A            mov b, [d]
4250   224A             ; --- START RELATIONAL
4251   224A D7            push a
4252   224B 11            mov a, b
4253   224C 26 01 00      mov b, $1
4254   224F B0            cmp a, b
4255   2250 FD 74         sle ; <= (signed)
4256   2252 E4            pop a
4257   2253             ; --- END RELATIONAL
4258   2253 C0 00 00      cmp b, 0
4259   2256 C6 64 23      je _for64_exit
4260   2259             _for64_block:
4261   2259             ; for (dx = -1; dx <= 1; dx++) { 
4262   2259             _for65_init:
4263   2259 3B 73 31      mov d, _dx ; $dx
4264   225C DA            push d
4265   225D 26 01 00      mov b, $1
4266   2260 FD 97         neg b
4267   2262 E7            pop d
4268   2263 FD 43         mov [d], b
4269   2265             _for65_cond:
4270   2265 3B 73 31      mov d, _dx ; $dx
4271   2268 2A            mov b, [d]
4272   2269             ; --- START RELATIONAL
4273   2269 D7            push a
4274   226A 11            mov a, b
4275   226B 26 01 00      mov b, $1
4276   226E B0            cmp a, b
4277   226F FD 74         sle ; <= (signed)
4278   2271 E4            pop a
4279   2272             ; --- END RELATIONAL
4280   2272 C0 00 00      cmp b, 0
4281   2275 C6 54 23      je _for65_exit
4282   2278             _for65_block:
4283   2278             ; if (dx == 0 && dy == 0) continue; 
4284   2278             _if66_cond:
4285   2278 3B 73 31      mov d, _dx ; $dx
4286   227B 2A            mov b, [d]
4287   227C             ; --- START RELATIONAL
4288   227C D7            push a
4289   227D 11            mov a, b
4290   227E 26 00 00      mov b, $0
4291   2281 B0            cmp a, b
4292   2282 FD 71         seq ; ==
4293   2284 E4            pop a
4294   2285             ; --- END RELATIONAL
4295   2285             ; --- START LOGICAL AND
4296   2285 D7            push a
4297   2286 11            mov a, b
4298   2287 3B 75 31      mov d, _dy ; $dy
4299   228A 2A            mov b, [d]
4300   228B             ; --- START RELATIONAL
4301   228B D7            push a
4302   228C 11            mov a, b
4303   228D 26 00 00      mov b, $0
4304   2290 B0            cmp a, b
4305   2291 FD 71         seq ; ==
4306   2293 E4            pop a
4307   2294             ; --- END RELATIONAL
4308   2294 FD A7         sand a, b
4309   2296 E4            pop a
4310   2297             ; --- END LOGICAL AND
4311   2297 C0 00 00      cmp b, 0
4312   229A C6 A3 22      je _if66_exit
4313   229D             _if66_true:
4314   229D             ; continue; 
4315   229D 0A 44 23      jmp _for65_update ; for continue
4316   22A0 0A A3 22      jmp _if66_exit
4317   22A3             _if66_exit:
4318   22A3             ; nx = x + dx; 
4319   22A3 3B 77 31      mov d, _nx ; $nx
4320   22A6 DA            push d
4321   22A7 3B 6F 31      mov d, _x ; $x
4322   22AA 2A            mov b, [d]
4323   22AB             ; --- START TERMS
4324   22AB D7            push a
4325   22AC 11            mov a, b
4326   22AD 3B 73 31      mov d, _dx ; $dx
4327   22B0 2A            mov b, [d]
4328   22B1 56            add b, a
4329   22B2 E4            pop a
4330   22B3             ; --- END TERMS
4331   22B3 E7            pop d
4332   22B4 FD 43         mov [d], b
4333   22B6             ; ny = y + dy; 
4334   22B6 3B 79 31      mov d, _ny ; $ny
4335   22B9 DA            push d
4336   22BA 3B 71 31      mov d, _y ; $y
4337   22BD 2A            mov b, [d]
4338   22BE             ; --- START TERMS
4339   22BE D7            push a
4340   22BF 11            mov a, b
4341   22C0 3B 75 31      mov d, _dy ; $dy
4342   22C3 2A            mov b, [d]
4343   22C4 56            add b, a
4344   22C5 E4            pop a
4345   22C6             ; --- END TERMS
4346   22C6 E7            pop d
4347   22C7 FD 43         mov [d], b
4348   22C9             ; if (nx >= 0 && nx < 40 && ny >= 0 && ny < 20 && grid[ny][nx] == ELECTRON_HEAD){ 
4349   22C9             _if67_cond:
4350   22C9 3B 77 31      mov d, _nx ; $nx
4351   22CC 2A            mov b, [d]
4352   22CD             ; --- START RELATIONAL
4353   22CD D7            push a
4354   22CE 11            mov a, b
4355   22CF 26 00 00      mov b, $0
4356   22D2 B0            cmp a, b
4357   22D3 FD 80         sge ; >=
4358   22D5 E4            pop a
4359   22D6             ; --- END RELATIONAL
4360   22D6             ; --- START LOGICAL AND
4361   22D6 D7            push a
4362   22D7 11            mov a, b
4363   22D8 3B 77 31      mov d, _nx ; $nx
4364   22DB 2A            mov b, [d]
4365   22DC             ; --- START RELATIONAL
4366   22DC D7            push a
4367   22DD 11            mov a, b
4368   22DE 26 28 00      mov b, $28
4369   22E1 B0            cmp a, b
4370   22E2 FD 73         slt ; < (signed)
4371   22E4 E4            pop a
4372   22E5             ; --- END RELATIONAL
4373   22E5 FD A7         sand a, b
4374   22E7 11            mov a, b
4375   22E8 3B 79 31      mov d, _ny ; $ny
4376   22EB 2A            mov b, [d]
4377   22EC             ; --- START RELATIONAL
4378   22EC D7            push a
4379   22ED 11            mov a, b
4380   22EE 26 00 00      mov b, $0
4381   22F1 B0            cmp a, b
4382   22F2 FD 80         sge ; >=
4383   22F4 E4            pop a
4384   22F5             ; --- END RELATIONAL
4385   22F5 FD A7         sand a, b
4386   22F7 11            mov a, b
4387   22F8 3B 79 31      mov d, _ny ; $ny
4388   22FB 2A            mov b, [d]
4389   22FC             ; --- START RELATIONAL
4390   22FC D7            push a
4391   22FD 11            mov a, b
4392   22FE 26 14 00      mov b, $14
4393   2301 B0            cmp a, b
4394   2302 FD 73         slt ; < (signed)
4395   2304 E4            pop a
4396   2305             ; --- END RELATIONAL
4397   2305 FD A7         sand a, b
4398   2307 11            mov a, b
4399   2308 3B EF 24      mov d, _grid_data ; $grid
4400   230B D7            push a
4401   230C DA            push d
4402   230D 3B 79 31      mov d, _ny ; $ny
4403   2310 2A            mov b, [d]
4404   2311 E7            pop d
4405   2312 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
4406   2316 DA            push d
4407   2317 3B 77 31      mov d, _nx ; $nx
4408   231A 2A            mov b, [d]
4409   231B E7            pop d
4410   231C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4411   2320 E4            pop a
4412   2321 2A            mov b, [d]
4413   2322             ; --- START RELATIONAL
4414   2322 D7            push a
4415   2323 11            mov a, b
4416   2324 26 02 00      mov b, 2; ELECTRON_HEAD
4417   2327 B0            cmp a, b
4418   2328 FD 71         seq ; ==
4419   232A E4            pop a
4420   232B             ; --- END RELATIONAL
4421   232B FD A7         sand a, b
4422   232D E4            pop a
4423   232E             ; --- END LOGICAL AND
4424   232E C0 00 00      cmp b, 0
4425   2331 C6 44 23      je _if67_exit
4426   2334             _if67_true:
4427   2334             ; head_count++; 
4428   2334 3B 7B 31      mov d, _head_count ; $head_count
4429   2337 2A            mov b, [d]
4430   2338 FD 77         inc b
4431   233A 3B 7B 31      mov d, _head_count ; $head_count
4432   233D FD 43         mov [d], b
4433   233F FD 7D         dec b
4434   2341 0A 44 23      jmp _if67_exit
4435   2344             _if67_exit:
4436   2344             _for65_update:
4437   2344 3B 73 31      mov d, _dx ; $dx
4438   2347 2A            mov b, [d]
4439   2348 FD 77         inc b
4440   234A 3B 73 31      mov d, _dx ; $dx
4441   234D FD 43         mov [d], b
4442   234F FD 7D         dec b
4443   2351 0A 65 22      jmp _for65_cond
4444   2354             _for65_exit:
4445   2354             _for64_update:
4446   2354 3B 75 31      mov d, _dy ; $dy
4447   2357 2A            mov b, [d]
4448   2358 FD 77         inc b
4449   235A 3B 75 31      mov d, _dy ; $dy
4450   235D FD 43         mov [d], b
4451   235F FD 7D         dec b
4452   2361 0A 46 22      jmp _for64_cond
4453   2364             _for64_exit:
4454   2364             ; switch (grid[y][x]) { 
4455   2364             _switch68_expr:
4456   2364 3B EF 24      mov d, _grid_data ; $grid
4457   2367 D7            push a
4458   2368 DA            push d
4459   2369 3B 71 31      mov d, _y ; $y
4460   236C 2A            mov b, [d]
4461   236D E7            pop d
4462   236E FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
4463   2372 DA            push d
4464   2373 3B 6F 31      mov d, _x ; $x
4465   2376 2A            mov b, [d]
4466   2377 E7            pop d
4467   2378 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4468   237C E4            pop a
4469   237D 2A            mov b, [d]
4470   237E             _switch68_comparisons:
4471   237E C0 00 00      cmp b, 0
4472   2381 C6 99 23      je _switch68_case0
4473   2384 C0 01 00      cmp b, 1
4474   2387 C6 BC 23      je _switch68_case1
4475   238A C0 02 00      cmp b, 2
4476   238D C6 0A 24      je _switch68_case2
4477   2390 C0 03 00      cmp b, 3
4478   2393 C6 2D 24      je _switch68_case3
4479   2396 0A 50 24      jmp _switch68_exit
4480   2399             _switch68_case0:
4481   2399             ; new_grid[y][x] = EMPTY; break; 
4482   2399 3B 2F 2B      mov d, _new_grid_data ; $new_grid
4483   239C D7            push a
4484   239D DA            push d
4485   239E 3B 71 31      mov d, _y ; $y
4486   23A1 2A            mov b, [d]
4487   23A2 E7            pop d
4488   23A3 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
4489   23A7 DA            push d
4490   23A8 3B 6F 31      mov d, _x ; $x
4491   23AB 2A            mov b, [d]
4492   23AC E7            pop d
4493   23AD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4494   23B1 E4            pop a
4495   23B2 DA            push d
4496   23B3 26 00 00      mov b, 0; EMPTY
4497   23B6 E7            pop d
4498   23B7 FD 43         mov [d], b
4499   23B9             ; break; 
4500   23B9 0A 50 24      jmp _switch68_exit ; case break
4501   23BC             _switch68_case1:
4502   23BC             ; new_grid[y][x] = (head_count == 1 || head_count == 2) ? ELECTRON_HEAD : CONDUCTOR; break; 
4503   23BC 3B 2F 2B      mov d, _new_grid_data ; $new_grid
4504   23BF D7            push a
4505   23C0 DA            push d
4506   23C1 3B 71 31      mov d, _y ; $y
4507   23C4 2A            mov b, [d]
4508   23C5 E7            pop d
4509   23C6 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
4510   23CA DA            push d
4511   23CB 3B 6F 31      mov d, _x ; $x
4512   23CE 2A            mov b, [d]
4513   23CF E7            pop d
4514   23D0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4515   23D4 E4            pop a
4516   23D5 DA            push d
4517   23D6             _ternary69_cond:
4518   23D6 3B 7B 31      mov d, _head_count ; $head_count
4519   23D9 2A            mov b, [d]
4520   23DA             ; --- START RELATIONAL
4521   23DA D7            push a
4522   23DB 11            mov a, b
4523   23DC 26 01 00      mov b, $1
4524   23DF B0            cmp a, b
4525   23E0 FD 71         seq ; ==
4526   23E2 E4            pop a
4527   23E3             ; --- END RELATIONAL
4528   23E3             ; --- START LOGICAL OR
4529   23E3 D7            push a
4530   23E4 11            mov a, b
4531   23E5 3B 7B 31      mov d, _head_count ; $head_count
4532   23E8 2A            mov b, [d]
4533   23E9             ; --- START RELATIONAL
4534   23E9 D7            push a
4535   23EA 11            mov a, b
4536   23EB 26 02 00      mov b, $2
4537   23EE B0            cmp a, b
4538   23EF FD 71         seq ; ==
4539   23F1 E4            pop a
4540   23F2             ; --- END RELATIONAL
4541   23F2 FD A8         sor a, b ; ||
4542   23F4 E4            pop a
4543   23F5             ; --- END LOGICAL OR
4544   23F5 C0 00 00      cmp b, 0
4545   23F8 C6 01 24      je _ternary69_false
4546   23FB             _ternary69_true:
4547   23FB 26 02 00      mov b, 2; ELECTRON_HEAD
4548   23FE 0A 04 24      jmp _ternary69_exit
4549   2401             _ternary69_false:
4550   2401 26 01 00      mov b, 1; CONDUCTOR
4551   2404             _ternary69_exit:
4552   2404 E7            pop d
4553   2405 FD 43         mov [d], b
4554   2407             ; break; 
4555   2407 0A 50 24      jmp _switch68_exit ; case break
4556   240A             _switch68_case2:
4557   240A             ; new_grid[y][x] = ELECTRON_TAIL; break; 
4558   240A 3B 2F 2B      mov d, _new_grid_data ; $new_grid
4559   240D D7            push a
4560   240E DA            push d
4561   240F 3B 71 31      mov d, _y ; $y
4562   2412 2A            mov b, [d]
4563   2413 E7            pop d
4564   2414 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
4565   2418 DA            push d
4566   2419 3B 6F 31      mov d, _x ; $x
4567   241C 2A            mov b, [d]
4568   241D E7            pop d
4569   241E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4570   2422 E4            pop a
4571   2423 DA            push d
4572   2424 26 03 00      mov b, 3; ELECTRON_TAIL
4573   2427 E7            pop d
4574   2428 FD 43         mov [d], b
4575   242A             ; break; 
4576   242A 0A 50 24      jmp _switch68_exit ; case break
4577   242D             _switch68_case3:
4578   242D             ; new_grid[y][x] = CONDUCTOR; break; 
4579   242D 3B 2F 2B      mov d, _new_grid_data ; $new_grid
4580   2430 D7            push a
4581   2431 DA            push d
4582   2432 3B 71 31      mov d, _y ; $y
4583   2435 2A            mov b, [d]
4584   2436 E7            pop d
4585   2437 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
4586   243B DA            push d
4587   243C 3B 6F 31      mov d, _x ; $x
4588   243F 2A            mov b, [d]
4589   2440 E7            pop d
4590   2441 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4591   2445 E4            pop a
4592   2446 DA            push d
4593   2447 26 01 00      mov b, 1; CONDUCTOR
4594   244A E7            pop d
4595   244B FD 43         mov [d], b
4596   244D             ; break; 
4597   244D 0A 50 24      jmp _switch68_exit ; case break
4598   2450             _switch68_exit:
4599   2450             _for63_update:
4600   2450 3B 6F 31      mov d, _x ; $x
4601   2453 2A            mov b, [d]
4602   2454 FD 77         inc b
4603   2456 FD 43         mov [d], b
4604   2458 0A 1D 22      jmp _for63_cond
4605   245B             _for63_exit:
4606   245B             _for62_update:
4607   245B 3B 71 31      mov d, _y ; $y
4608   245E 2A            mov b, [d]
4609   245F FD 77         inc b
4610   2461 FD 43         mov [d], b
4611   2463 0A 00 22      jmp _for62_cond
4612   2466             _for62_exit:
4613   2466             ; for (y = 0; y < 20; ++y) { 
4614   2466             _for70_init:
4615   2466 3B 71 31      mov d, _y ; $y
4616   2469 DA            push d
4617   246A 26 00 00      mov b, $0
4618   246D E7            pop d
4619   246E FD 43         mov [d], b
4620   2470             _for70_cond:
4621   2470 3B 71 31      mov d, _y ; $y
4622   2473 2A            mov b, [d]
4623   2474             ; --- START RELATIONAL
4624   2474 D7            push a
4625   2475 11            mov a, b
4626   2476 26 14 00      mov b, $14
4627   2479 B0            cmp a, b
4628   247A FD 73         slt ; < (signed)
4629   247C E4            pop a
4630   247D             ; --- END RELATIONAL
4631   247D C0 00 00      cmp b, 0
4632   2480 C6 ED 24      je _for70_exit
4633   2483             _for70_block:
4634   2483             ; for (x = 0; x < 40; ++x) { 
4635   2483             _for71_init:
4636   2483 3B 6F 31      mov d, _x ; $x
4637   2486 DA            push d
4638   2487 26 00 00      mov b, $0
4639   248A E7            pop d
4640   248B FD 43         mov [d], b
4641   248D             _for71_cond:
4642   248D 3B 6F 31      mov d, _x ; $x
4643   2490 2A            mov b, [d]
4644   2491             ; --- START RELATIONAL
4645   2491 D7            push a
4646   2492 11            mov a, b
4647   2493 26 28 00      mov b, $28
4648   2496 B0            cmp a, b
4649   2497 FD 73         slt ; < (signed)
4650   2499 E4            pop a
4651   249A             ; --- END RELATIONAL
4652   249A C0 00 00      cmp b, 0
4653   249D C6 E2 24      je _for71_exit
4654   24A0             _for71_block:
4655   24A0             ; grid[y][x] = new_grid[y][x]; 
4656   24A0 3B EF 24      mov d, _grid_data ; $grid
4657   24A3 D7            push a
4658   24A4 DA            push d
4659   24A5 3B 71 31      mov d, _y ; $y
4660   24A8 2A            mov b, [d]
4661   24A9 E7            pop d
4662   24AA FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
4663   24AE DA            push d
4664   24AF 3B 6F 31      mov d, _x ; $x
4665   24B2 2A            mov b, [d]
4666   24B3 E7            pop d
4667   24B4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4668   24B8 E4            pop a
4669   24B9 DA            push d
4670   24BA 3B 2F 2B      mov d, _new_grid_data ; $new_grid
4671   24BD D7            push a
4672   24BE DA            push d
4673   24BF 3B 71 31      mov d, _y ; $y
4674   24C2 2A            mov b, [d]
4675   24C3 E7            pop d
4676   24C4 FD 13 50 00   mma 80 ; mov a, 80; mul a, b; add d, b
4677   24C8 DA            push d
4678   24C9 3B 6F 31      mov d, _x ; $x
4679   24CC 2A            mov b, [d]
4680   24CD E7            pop d
4681   24CE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4682   24D2 E4            pop a
4683   24D3 2A            mov b, [d]
4684   24D4 E7            pop d
4685   24D5 FD 43         mov [d], b
4686   24D7             _for71_update:
4687   24D7 3B 6F 31      mov d, _x ; $x
4688   24DA 2A            mov b, [d]
4689   24DB FD 77         inc b
4690   24DD FD 43         mov [d], b
4691   24DF 0A 8D 24      jmp _for71_cond
4692   24E2             _for71_exit:
4693   24E2             _for70_update:
4694   24E2 3B 71 31      mov d, _y ; $y
4695   24E5 2A            mov b, [d]
4696   24E6 FD 77         inc b
4697   24E8 FD 43         mov [d], b
4698   24EA 0A 70 24      jmp _for70_cond
4699   24ED             _for70_exit:
4700   24ED             ; return; 
4701   24ED F9            leave
4702   24EE 09            ret
4703   24EF             ; --- END TEXT SEGMENT
4704   24EF             
4705   24EF             ; --- BEGIN DATA SEGMENT
4706   24EF 00 00 00 00 _grid_data: .fill 1600, 0
4706   24F3 00 00 00 00 
4706   24F7 00 00 00 00 
4706   24FB 00 00 00 00 
4706   24FF 00 00 00 00 
4706   2503 00 00 00 00 
4706   2507 00 00 00 00 
4706   250B 00 00 00 00 
4706   250F 00 00 00 00 
4706   2513 00 00 00 00 
4706   2517 00 00 00 00 
4706   251B 00 00 00 00 
4706   251F 00 00 00 00 
4706   2523 00 00 00 00 
4706   2527 00 00 00 00 
4706   252B 00 00 00 00 
4706   252F 00 00 00 00 
4706   2533 00 00 00 00 
4706   2537 00 00 00 00 
4706   253B 00 00 00 00 
4706   253F 00 00 00 00 
4706   2543 00 00 00 00 
4706   2547 00 00 00 00 
4706   254B 00 00 00 00 
4706   254F 00 00 00 00 
4706   2553 00 00 00 00 
4706   2557 00 00 00 00 
4706   255B 00 00 00 00 
4706   255F 00 00 00 00 
4706   2563 00 00 00 00 
4706   2567 00 00 00 00 
4706   256B 00 00 00 00 
4706   256F 00 00 00 00 
4706   2573 00 00 00 00 
4706   2577 00 00 00 00 
4706   257B 00 00 00 00 
4706   257F 00 00 00 00 
4706   2583 00 00 00 00 
4706   2587 00 00 00 00 
4706   258B 00 00 00 00 
4706   258F 00 00 00 00 
4706   2593 00 00 00 00 
4706   2597 00 00 00 00 
4706   259B 00 00 00 00 
4706   259F 00 00 00 00 
4706   25A3 00 00 00 00 
4706   25A7 00 00 00 00 
4706   25AB 00 00 00 00 
4706   25AF 00 00 00 00 
4706   25B3 00 00 00 00 
4706   25B7 00 00 00 00 
4706   25BB 00 00 00 00 
4706   25BF 00 00 00 00 
4706   25C3 00 00 00 00 
4706   25C7 00 00 00 00 
4706   25CB 00 00 00 00 
4706   25CF 00 00 00 00 
4706   25D3 00 00 00 00 
4706   25D7 00 00 00 00 
4706   25DB 00 00 00 00 
4706   25DF 00 00 00 00 
4706   25E3 00 00 00 00 
4706   25E7 00 00 00 00 
4706   25EB 00 00 00 00 
4706   25EF 00 00 00 00 
4706   25F3 00 00 00 00 
4706   25F7 00 00 00 00 
4706   25FB 00 00 00 00 
4706   25FF 00 00 00 00 
4706   2603 00 00 00 00 
4706   2607 00 00 00 00 
4706   260B 00 00 00 00 
4706   260F 00 00 00 00 
4706   2613 00 00 00 00 
4706   2617 00 00 00 00 
4706   261B 00 00 00 00 
4706   261F 00 00 00 00 
4706   2623 00 00 00 00 
4706   2627 00 00 00 00 
4706   262B 00 00 00 00 
4706   262F 00 00 00 00 
4706   2633 00 00 00 00 
4706   2637 00 00 00 00 
4706   263B 00 00 00 00 
4706   263F 00 00 00 00 
4706   2643 00 00 00 00 
4706   2647 00 00 00 00 
4706   264B 00 00 00 00 
4706   264F 00 00 00 00 
4706   2653 00 00 00 00 
4706   2657 00 00 00 00 
4706   265B 00 00 00 00 
4706   265F 00 00 00 00 
4706   2663 00 00 00 00 
4706   2667 00 00 00 00 
4706   266B 00 00 00 00 
4706   266F 00 00 00 00 
4706   2673 00 00 00 00 
4706   2677 00 00 00 00 
4706   267B 00 00 00 00 
4706   267F 00 00 00 00 
4706   2683 00 00 00 00 
4706   2687 00 00 00 00 
4706   268B 00 00 00 00 
4706   268F 00 00 00 00 
4706   2693 00 00 00 00 
4706   2697 00 00 00 00 
4706   269B 00 00 00 00 
4706   269F 00 00 00 00 
4706   26A3 00 00 00 00 
4706   26A7 00 00 00 00 
4706   26AB 00 00 00 00 
4706   26AF 00 00 00 00 
4706   26B3 00 00 00 00 
4706   26B7 00 00 00 00 
4706   26BB 00 00 00 00 
4706   26BF 00 00 00 00 
4706   26C3 00 00 00 00 
4706   26C7 00 00 00 00 
4706   26CB 00 00 00 00 
4706   26CF 00 00 00 00 
4706   26D3 00 00 00 00 
4706   26D7 00 00 00 00 
4706   26DB 00 00 00 00 
4706   26DF 00 00 00 00 
4706   26E3 00 00 00 00 
4706   26E7 00 00 00 00 
4706   26EB 00 00 00 00 
4706   26EF 00 00 00 00 
4706   26F3 00 00 00 00 
4706   26F7 00 00 00 00 
4706   26FB 00 00 00 00 
4706   26FF 00 00 00 00 
4706   2703 00 00 00 00 
4706   2707 00 00 00 00 
4706   270B 00 00 00 00 
4706   270F 00 00 00 00 
4706   2713 00 00 00 00 
4706   2717 00 00 00 00 
4706   271B 00 00 00 00 
4706   271F 00 00 00 00 
4706   2723 00 00 00 00 
4706   2727 00 00 00 00 
4706   272B 00 00 00 00 
4706   272F 00 00 00 00 
4706   2733 00 00 00 00 
4706   2737 00 00 00 00 
4706   273B 00 00 00 00 
4706   273F 00 00 00 00 
4706   2743 00 00 00 00 
4706   2747 00 00 00 00 
4706   274B 00 00 00 00 
4706   274F 00 00 00 00 
4706   2753 00 00 00 00 
4706   2757 00 00 00 00 
4706   275B 00 00 00 00 
4706   275F 00 00 00 00 
4706   2763 00 00 00 00 
4706   2767 00 00 00 00 
4706   276B 00 00 00 00 
4706   276F 00 00 00 00 
4706   2773 00 00 00 00 
4706   2777 00 00 00 00 
4706   277B 00 00 00 00 
4706   277F 00 00 00 00 
4706   2783 00 00 00 00 
4706   2787 00 00 00 00 
4706   278B 00 00 00 00 
4706   278F 00 00 00 00 
4706   2793 00 00 00 00 
4706   2797 00 00 00 00 
4706   279B 00 00 00 00 
4706   279F 00 00 00 00 
4706   27A3 00 00 00 00 
4706   27A7 00 00 00 00 
4706   27AB 00 00 00 00 
4706   27AF 00 00 00 00 
4706   27B3 00 00 00 00 
4706   27B7 00 00 00 00 
4706   27BB 00 00 00 00 
4706   27BF 00 00 00 00 
4706   27C3 00 00 00 00 
4706   27C7 00 00 00 00 
4706   27CB 00 00 00 00 
4706   27CF 00 00 00 00 
4706   27D3 00 00 00 00 
4706   27D7 00 00 00 00 
4706   27DB 00 00 00 00 
4706   27DF 00 00 00 00 
4706   27E3 00 00 00 00 
4706   27E7 00 00 00 00 
4706   27EB 00 00 00 00 
4706   27EF 00 00 00 00 
4706   27F3 00 00 00 00 
4706   27F7 00 00 00 00 
4706   27FB 00 00 00 00 
4706   27FF 00 00 00 00 
4706   2803 00 00 00 00 
4706   2807 00 00 00 00 
4706   280B 00 00 00 00 
4706   280F 00 00 00 00 
4706   2813 00 00 00 00 
4706   2817 00 00 00 00 
4706   281B 00 00 00 00 
4706   281F 00 00 00 00 
4706   2823 00 00 00 00 
4706   2827 00 00 00 00 
4706   282B 00 00 00 00 
4706   282F 00 00 00 00 
4706   2833 00 00 00 00 
4706   2837 00 00 00 00 
4706   283B 00 00 00 00 
4706   283F 00 00 00 00 
4706   2843 00 00 00 00 
4706   2847 00 00 00 00 
4706   284B 00 00 00 00 
4706   284F 00 00 00 00 
4706   2853 00 00 00 00 
4706   2857 00 00 00 00 
4706   285B 00 00 00 00 
4706   285F 00 00 00 00 
4706   2863 00 00 00 00 
4706   2867 00 00 00 00 
4706   286B 00 00 00 00 
4706   286F 00 00 00 00 
4706   2873 00 00 00 00 
4706   2877 00 00 00 00 
4706   287B 00 00 00 00 
4706   287F 00 00 00 00 
4706   2883 00 00 00 00 
4706   2887 00 00 00 00 
4706   288B 00 00 00 00 
4706   288F 00 00 00 00 
4706   2893 00 00 00 00 
4706   2897 00 00 00 00 
4706   289B 00 00 00 00 
4706   289F 00 00 00 00 
4706   28A3 00 00 00 00 
4706   28A7 00 00 00 00 
4706   28AB 00 00 00 00 
4706   28AF 00 00 00 00 
4706   28B3 00 00 00 00 
4706   28B7 00 00 00 00 
4706   28BB 00 00 00 00 
4706   28BF 00 00 00 00 
4706   28C3 00 00 00 00 
4706   28C7 00 00 00 00 
4706   28CB 00 00 00 00 
4706   28CF 00 00 00 00 
4706   28D3 00 00 00 00 
4706   28D7 00 00 00 00 
4706   28DB 00 00 00 00 
4706   28DF 00 00 00 00 
4706   28E3 00 00 00 00 
4706   28E7 00 00 00 00 
4706   28EB 00 00 00 00 
4706   28EF 00 00 00 00 
4706   28F3 00 00 00 00 
4706   28F7 00 00 00 00 
4706   28FB 00 00 00 00 
4706   28FF 00 00 00 00 
4706   2903 00 00 00 00 
4706   2907 00 00 00 00 
4706   290B 00 00 00 00 
4706   290F 00 00 00 00 
4706   2913 00 00 00 00 
4706   2917 00 00 00 00 
4706   291B 00 00 00 00 
4706   291F 00 00 00 00 
4706   2923 00 00 00 00 
4706   2927 00 00 00 00 
4706   292B 00 00 00 00 
4706   292F 00 00 00 00 
4706   2933 00 00 00 00 
4706   2937 00 00 00 00 
4706   293B 00 00 00 00 
4706   293F 00 00 00 00 
4706   2943 00 00 00 00 
4706   2947 00 00 00 00 
4706   294B 00 00 00 00 
4706   294F 00 00 00 00 
4706   2953 00 00 00 00 
4706   2957 00 00 00 00 
4706   295B 00 00 00 00 
4706   295F 00 00 00 00 
4706   2963 00 00 00 00 
4706   2967 00 00 00 00 
4706   296B 00 00 00 00 
4706   296F 00 00 00 00 
4706   2973 00 00 00 00 
4706   2977 00 00 00 00 
4706   297B 00 00 00 00 
4706   297F 00 00 00 00 
4706   2983 00 00 00 00 
4706   2987 00 00 00 00 
4706   298B 00 00 00 00 
4706   298F 00 00 00 00 
4706   2993 00 00 00 00 
4706   2997 00 00 00 00 
4706   299B 00 00 00 00 
4706   299F 00 00 00 00 
4706   29A3 00 00 00 00 
4706   29A7 00 00 00 00 
4706   29AB 00 00 00 00 
4706   29AF 00 00 00 00 
4706   29B3 00 00 00 00 
4706   29B7 00 00 00 00 
4706   29BB 00 00 00 00 
4706   29BF 00 00 00 00 
4706   29C3 00 00 00 00 
4706   29C7 00 00 00 00 
4706   29CB 00 00 00 00 
4706   29CF 00 00 00 00 
4706   29D3 00 00 00 00 
4706   29D7 00 00 00 00 
4706   29DB 00 00 00 00 
4706   29DF 00 00 00 00 
4706   29E3 00 00 00 00 
4706   29E7 00 00 00 00 
4706   29EB 00 00 00 00 
4706   29EF 00 00 00 00 
4706   29F3 00 00 00 00 
4706   29F7 00 00 00 00 
4706   29FB 00 00 00 00 
4706   29FF 00 00 00 00 
4706   2A03 00 00 00 00 
4706   2A07 00 00 00 00 
4706   2A0B 00 00 00 00 
4706   2A0F 00 00 00 00 
4706   2A13 00 00 00 00 
4706   2A17 00 00 00 00 
4706   2A1B 00 00 00 00 
4706   2A1F 00 00 00 00 
4706   2A23 00 00 00 00 
4706   2A27 00 00 00 00 
4706   2A2B 00 00 00 00 
4706   2A2F 00 00 00 00 
4706   2A33 00 00 00 00 
4706   2A37 00 00 00 00 
4706   2A3B 00 00 00 00 
4706   2A3F 00 00 00 00 
4706   2A43 00 00 00 00 
4706   2A47 00 00 00 00 
4706   2A4B 00 00 00 00 
4706   2A4F 00 00 00 00 
4706   2A53 00 00 00 00 
4706   2A57 00 00 00 00 
4706   2A5B 00 00 00 00 
4706   2A5F 00 00 00 00 
4706   2A63 00 00 00 00 
4706   2A67 00 00 00 00 
4706   2A6B 00 00 00 00 
4706   2A6F 00 00 00 00 
4706   2A73 00 00 00 00 
4706   2A77 00 00 00 00 
4706   2A7B 00 00 00 00 
4706   2A7F 00 00 00 00 
4706   2A83 00 00 00 00 
4706   2A87 00 00 00 00 
4706   2A8B 00 00 00 00 
4706   2A8F 00 00 00 00 
4706   2A93 00 00 00 00 
4706   2A97 00 00 00 00 
4706   2A9B 00 00 00 00 
4706   2A9F 00 00 00 00 
4706   2AA3 00 00 00 00 
4706   2AA7 00 00 00 00 
4706   2AAB 00 00 00 00 
4706   2AAF 00 00 00 00 
4706   2AB3 00 00 00 00 
4706   2AB7 00 00 00 00 
4706   2ABB 00 00 00 00 
4706   2ABF 00 00 00 00 
4706   2AC3 00 00 00 00 
4706   2AC7 00 00 00 00 
4706   2ACB 00 00 00 00 
4706   2ACF 00 00 00 00 
4706   2AD3 00 00 00 00 
4706   2AD7 00 00 00 00 
4706   2ADB 00 00 00 00 
4706   2ADF 00 00 00 00 
4706   2AE3 00 00 00 00 
4706   2AE7 00 00 00 00 
4706   2AEB 00 00 00 00 
4706   2AEF 00 00 00 00 
4706   2AF3 00 00 00 00 
4706   2AF7 00 00 00 00 
4706   2AFB 00 00 00 00 
4706   2AFF 00 00 00 00 
4706   2B03 00 00 00 00 
4706   2B07 00 00 00 00 
4706   2B0B 00 00 00 00 
4706   2B0F 00 00 00 00 
4706   2B13 00 00 00 00 
4706   2B17 00 00 00 00 
4706   2B1B 00 00 00 00 
4706   2B1F 00 00 00 00 
4706   2B23 00 00 00 00 
4706   2B27 00 00 00 00 
4706   2B2B 00 00 00 00 
4707   2B2F 00 00 00 00 _new_grid_data: .fill 1600, 0
4707   2B33 00 00 00 00 
4707   2B37 00 00 00 00 
4707   2B3B 00 00 00 00 
4707   2B3F 00 00 00 00 
4707   2B43 00 00 00 00 
4707   2B47 00 00 00 00 
4707   2B4B 00 00 00 00 
4707   2B4F 00 00 00 00 
4707   2B53 00 00 00 00 
4707   2B57 00 00 00 00 
4707   2B5B 00 00 00 00 
4707   2B5F 00 00 00 00 
4707   2B63 00 00 00 00 
4707   2B67 00 00 00 00 
4707   2B6B 00 00 00 00 
4707   2B6F 00 00 00 00 
4707   2B73 00 00 00 00 
4707   2B77 00 00 00 00 
4707   2B7B 00 00 00 00 
4707   2B7F 00 00 00 00 
4707   2B83 00 00 00 00 
4707   2B87 00 00 00 00 
4707   2B8B 00 00 00 00 
4707   2B8F 00 00 00 00 
4707   2B93 00 00 00 00 
4707   2B97 00 00 00 00 
4707   2B9B 00 00 00 00 
4707   2B9F 00 00 00 00 
4707   2BA3 00 00 00 00 
4707   2BA7 00 00 00 00 
4707   2BAB 00 00 00 00 
4707   2BAF 00 00 00 00 
4707   2BB3 00 00 00 00 
4707   2BB7 00 00 00 00 
4707   2BBB 00 00 00 00 
4707   2BBF 00 00 00 00 
4707   2BC3 00 00 00 00 
4707   2BC7 00 00 00 00 
4707   2BCB 00 00 00 00 
4707   2BCF 00 00 00 00 
4707   2BD3 00 00 00 00 
4707   2BD7 00 00 00 00 
4707   2BDB 00 00 00 00 
4707   2BDF 00 00 00 00 
4707   2BE3 00 00 00 00 
4707   2BE7 00 00 00 00 
4707   2BEB 00 00 00 00 
4707   2BEF 00 00 00 00 
4707   2BF3 00 00 00 00 
4707   2BF7 00 00 00 00 
4707   2BFB 00 00 00 00 
4707   2BFF 00 00 00 00 
4707   2C03 00 00 00 00 
4707   2C07 00 00 00 00 
4707   2C0B 00 00 00 00 
4707   2C0F 00 00 00 00 
4707   2C13 00 00 00 00 
4707   2C17 00 00 00 00 
4707   2C1B 00 00 00 00 
4707   2C1F 00 00 00 00 
4707   2C23 00 00 00 00 
4707   2C27 00 00 00 00 
4707   2C2B 00 00 00 00 
4707   2C2F 00 00 00 00 
4707   2C33 00 00 00 00 
4707   2C37 00 00 00 00 
4707   2C3B 00 00 00 00 
4707   2C3F 00 00 00 00 
4707   2C43 00 00 00 00 
4707   2C47 00 00 00 00 
4707   2C4B 00 00 00 00 
4707   2C4F 00 00 00 00 
4707   2C53 00 00 00 00 
4707   2C57 00 00 00 00 
4707   2C5B 00 00 00 00 
4707   2C5F 00 00 00 00 
4707   2C63 00 00 00 00 
4707   2C67 00 00 00 00 
4707   2C6B 00 00 00 00 
4707   2C6F 00 00 00 00 
4707   2C73 00 00 00 00 
4707   2C77 00 00 00 00 
4707   2C7B 00 00 00 00 
4707   2C7F 00 00 00 00 
4707   2C83 00 00 00 00 
4707   2C87 00 00 00 00 
4707   2C8B 00 00 00 00 
4707   2C8F 00 00 00 00 
4707   2C93 00 00 00 00 
4707   2C97 00 00 00 00 
4707   2C9B 00 00 00 00 
4707   2C9F 00 00 00 00 
4707   2CA3 00 00 00 00 
4707   2CA7 00 00 00 00 
4707   2CAB 00 00 00 00 
4707   2CAF 00 00 00 00 
4707   2CB3 00 00 00 00 
4707   2CB7 00 00 00 00 
4707   2CBB 00 00 00 00 
4707   2CBF 00 00 00 00 
4707   2CC3 00 00 00 00 
4707   2CC7 00 00 00 00 
4707   2CCB 00 00 00 00 
4707   2CCF 00 00 00 00 
4707   2CD3 00 00 00 00 
4707   2CD7 00 00 00 00 
4707   2CDB 00 00 00 00 
4707   2CDF 00 00 00 00 
4707   2CE3 00 00 00 00 
4707   2CE7 00 00 00 00 
4707   2CEB 00 00 00 00 
4707   2CEF 00 00 00 00 
4707   2CF3 00 00 00 00 
4707   2CF7 00 00 00 00 
4707   2CFB 00 00 00 00 
4707   2CFF 00 00 00 00 
4707   2D03 00 00 00 00 
4707   2D07 00 00 00 00 
4707   2D0B 00 00 00 00 
4707   2D0F 00 00 00 00 
4707   2D13 00 00 00 00 
4707   2D17 00 00 00 00 
4707   2D1B 00 00 00 00 
4707   2D1F 00 00 00 00 
4707   2D23 00 00 00 00 
4707   2D27 00 00 00 00 
4707   2D2B 00 00 00 00 
4707   2D2F 00 00 00 00 
4707   2D33 00 00 00 00 
4707   2D37 00 00 00 00 
4707   2D3B 00 00 00 00 
4707   2D3F 00 00 00 00 
4707   2D43 00 00 00 00 
4707   2D47 00 00 00 00 
4707   2D4B 00 00 00 00 
4707   2D4F 00 00 00 00 
4707   2D53 00 00 00 00 
4707   2D57 00 00 00 00 
4707   2D5B 00 00 00 00 
4707   2D5F 00 00 00 00 
4707   2D63 00 00 00 00 
4707   2D67 00 00 00 00 
4707   2D6B 00 00 00 00 
4707   2D6F 00 00 00 00 
4707   2D73 00 00 00 00 
4707   2D77 00 00 00 00 
4707   2D7B 00 00 00 00 
4707   2D7F 00 00 00 00 
4707   2D83 00 00 00 00 
4707   2D87 00 00 00 00 
4707   2D8B 00 00 00 00 
4707   2D8F 00 00 00 00 
4707   2D93 00 00 00 00 
4707   2D97 00 00 00 00 
4707   2D9B 00 00 00 00 
4707   2D9F 00 00 00 00 
4707   2DA3 00 00 00 00 
4707   2DA7 00 00 00 00 
4707   2DAB 00 00 00 00 
4707   2DAF 00 00 00 00 
4707   2DB3 00 00 00 00 
4707   2DB7 00 00 00 00 
4707   2DBB 00 00 00 00 
4707   2DBF 00 00 00 00 
4707   2DC3 00 00 00 00 
4707   2DC7 00 00 00 00 
4707   2DCB 00 00 00 00 
4707   2DCF 00 00 00 00 
4707   2DD3 00 00 00 00 
4707   2DD7 00 00 00 00 
4707   2DDB 00 00 00 00 
4707   2DDF 00 00 00 00 
4707   2DE3 00 00 00 00 
4707   2DE7 00 00 00 00 
4707   2DEB 00 00 00 00 
4707   2DEF 00 00 00 00 
4707   2DF3 00 00 00 00 
4707   2DF7 00 00 00 00 
4707   2DFB 00 00 00 00 
4707   2DFF 00 00 00 00 
4707   2E03 00 00 00 00 
4707   2E07 00 00 00 00 
4707   2E0B 00 00 00 00 
4707   2E0F 00 00 00 00 
4707   2E13 00 00 00 00 
4707   2E17 00 00 00 00 
4707   2E1B 00 00 00 00 
4707   2E1F 00 00 00 00 
4707   2E23 00 00 00 00 
4707   2E27 00 00 00 00 
4707   2E2B 00 00 00 00 
4707   2E2F 00 00 00 00 
4707   2E33 00 00 00 00 
4707   2E37 00 00 00 00 
4707   2E3B 00 00 00 00 
4707   2E3F 00 00 00 00 
4707   2E43 00 00 00 00 
4707   2E47 00 00 00 00 
4707   2E4B 00 00 00 00 
4707   2E4F 00 00 00 00 
4707   2E53 00 00 00 00 
4707   2E57 00 00 00 00 
4707   2E5B 00 00 00 00 
4707   2E5F 00 00 00 00 
4707   2E63 00 00 00 00 
4707   2E67 00 00 00 00 
4707   2E6B 00 00 00 00 
4707   2E6F 00 00 00 00 
4707   2E73 00 00 00 00 
4707   2E77 00 00 00 00 
4707   2E7B 00 00 00 00 
4707   2E7F 00 00 00 00 
4707   2E83 00 00 00 00 
4707   2E87 00 00 00 00 
4707   2E8B 00 00 00 00 
4707   2E8F 00 00 00 00 
4707   2E93 00 00 00 00 
4707   2E97 00 00 00 00 
4707   2E9B 00 00 00 00 
4707   2E9F 00 00 00 00 
4707   2EA3 00 00 00 00 
4707   2EA7 00 00 00 00 
4707   2EAB 00 00 00 00 
4707   2EAF 00 00 00 00 
4707   2EB3 00 00 00 00 
4707   2EB7 00 00 00 00 
4707   2EBB 00 00 00 00 
4707   2EBF 00 00 00 00 
4707   2EC3 00 00 00 00 
4707   2EC7 00 00 00 00 
4707   2ECB 00 00 00 00 
4707   2ECF 00 00 00 00 
4707   2ED3 00 00 00 00 
4707   2ED7 00 00 00 00 
4707   2EDB 00 00 00 00 
4707   2EDF 00 00 00 00 
4707   2EE3 00 00 00 00 
4707   2EE7 00 00 00 00 
4707   2EEB 00 00 00 00 
4707   2EEF 00 00 00 00 
4707   2EF3 00 00 00 00 
4707   2EF7 00 00 00 00 
4707   2EFB 00 00 00 00 
4707   2EFF 00 00 00 00 
4707   2F03 00 00 00 00 
4707   2F07 00 00 00 00 
4707   2F0B 00 00 00 00 
4707   2F0F 00 00 00 00 
4707   2F13 00 00 00 00 
4707   2F17 00 00 00 00 
4707   2F1B 00 00 00 00 
4707   2F1F 00 00 00 00 
4707   2F23 00 00 00 00 
4707   2F27 00 00 00 00 
4707   2F2B 00 00 00 00 
4707   2F2F 00 00 00 00 
4707   2F33 00 00 00 00 
4707   2F37 00 00 00 00 
4707   2F3B 00 00 00 00 
4707   2F3F 00 00 00 00 
4707   2F43 00 00 00 00 
4707   2F47 00 00 00 00 
4707   2F4B 00 00 00 00 
4707   2F4F 00 00 00 00 
4707   2F53 00 00 00 00 
4707   2F57 00 00 00 00 
4707   2F5B 00 00 00 00 
4707   2F5F 00 00 00 00 
4707   2F63 00 00 00 00 
4707   2F67 00 00 00 00 
4707   2F6B 00 00 00 00 
4707   2F6F 00 00 00 00 
4707   2F73 00 00 00 00 
4707   2F77 00 00 00 00 
4707   2F7B 00 00 00 00 
4707   2F7F 00 00 00 00 
4707   2F83 00 00 00 00 
4707   2F87 00 00 00 00 
4707   2F8B 00 00 00 00 
4707   2F8F 00 00 00 00 
4707   2F93 00 00 00 00 
4707   2F97 00 00 00 00 
4707   2F9B 00 00 00 00 
4707   2F9F 00 00 00 00 
4707   2FA3 00 00 00 00 
4707   2FA7 00 00 00 00 
4707   2FAB 00 00 00 00 
4707   2FAF 00 00 00 00 
4707   2FB3 00 00 00 00 
4707   2FB7 00 00 00 00 
4707   2FBB 00 00 00 00 
4707   2FBF 00 00 00 00 
4707   2FC3 00 00 00 00 
4707   2FC7 00 00 00 00 
4707   2FCB 00 00 00 00 
4707   2FCF 00 00 00 00 
4707   2FD3 00 00 00 00 
4707   2FD7 00 00 00 00 
4707   2FDB 00 00 00 00 
4707   2FDF 00 00 00 00 
4707   2FE3 00 00 00 00 
4707   2FE7 00 00 00 00 
4707   2FEB 00 00 00 00 
4707   2FEF 00 00 00 00 
4707   2FF3 00 00 00 00 
4707   2FF7 00 00 00 00 
4707   2FFB 00 00 00 00 
4707   2FFF 00 00 00 00 
4707   3003 00 00 00 00 
4707   3007 00 00 00 00 
4707   300B 00 00 00 00 
4707   300F 00 00 00 00 
4707   3013 00 00 00 00 
4707   3017 00 00 00 00 
4707   301B 00 00 00 00 
4707   301F 00 00 00 00 
4707   3023 00 00 00 00 
4707   3027 00 00 00 00 
4707   302B 00 00 00 00 
4707   302F 00 00 00 00 
4707   3033 00 00 00 00 
4707   3037 00 00 00 00 
4707   303B 00 00 00 00 
4707   303F 00 00 00 00 
4707   3043 00 00 00 00 
4707   3047 00 00 00 00 
4707   304B 00 00 00 00 
4707   304F 00 00 00 00 
4707   3053 00 00 00 00 
4707   3057 00 00 00 00 
4707   305B 00 00 00 00 
4707   305F 00 00 00 00 
4707   3063 00 00 00 00 
4707   3067 00 00 00 00 
4707   306B 00 00 00 00 
4707   306F 00 00 00 00 
4707   3073 00 00 00 00 
4707   3077 00 00 00 00 
4707   307B 00 00 00 00 
4707   307F 00 00 00 00 
4707   3083 00 00 00 00 
4707   3087 00 00 00 00 
4707   308B 00 00 00 00 
4707   308F 00 00 00 00 
4707   3093 00 00 00 00 
4707   3097 00 00 00 00 
4707   309B 00 00 00 00 
4707   309F 00 00 00 00 
4707   30A3 00 00 00 00 
4707   30A7 00 00 00 00 
4707   30AB 00 00 00 00 
4707   30AF 00 00 00 00 
4707   30B3 00 00 00 00 
4707   30B7 00 00 00 00 
4707   30BB 00 00 00 00 
4707   30BF 00 00 00 00 
4707   30C3 00 00 00 00 
4707   30C7 00 00 00 00 
4707   30CB 00 00 00 00 
4707   30CF 00 00 00 00 
4707   30D3 00 00 00 00 
4707   30D7 00 00 00 00 
4707   30DB 00 00 00 00 
4707   30DF 00 00 00 00 
4707   30E3 00 00 00 00 
4707   30E7 00 00 00 00 
4707   30EB 00 00 00 00 
4707   30EF 00 00 00 00 
4707   30F3 00 00 00 00 
4707   30F7 00 00 00 00 
4707   30FB 00 00 00 00 
4707   30FF 00 00 00 00 
4707   3103 00 00 00 00 
4707   3107 00 00 00 00 
4707   310B 00 00 00 00 
4707   310F 00 00 00 00 
4707   3113 00 00 00 00 
4707   3117 00 00 00 00 
4707   311B 00 00 00 00 
4707   311F 00 00 00 00 
4707   3123 00 00 00 00 
4707   3127 00 00 00 00 
4707   312B 00 00 00 00 
4707   312F 00 00 00 00 
4707   3133 00 00 00 00 
4707   3137 00 00 00 00 
4707   313B 00 00 00 00 
4707   313F 00 00 00 00 
4707   3143 00 00 00 00 
4707   3147 00 00 00 00 
4707   314B 00 00 00 00 
4707   314F 00 00 00 00 
4707   3153 00 00 00 00 
4707   3157 00 00 00 00 
4707   315B 00 00 00 00 
4707   315F 00 00 00 00 
4707   3163 00 00 00 00 
4707   3167 00 00 00 00 
4707   316B 00 00 00 00 
4708   316F 00 00       _x: .fill 2, 0
4709   3171 00 00       _y: .fill 2, 0
4710   3173 00 00       _dx: .fill 2, 0
4711   3175 00 00       _dy: .fill 2, 0
4712   3177 00 00       _nx: .fill 2, 0
4713   3179 00 00       _ny: .fill 2, 0
4714   317B 00 00       _head_count: .fill 2, 0
4715   317D 00          _c: .fill 1, 0
4716   317E 55 6E 65 78 _s0: .db "Unexpected format in printf.", 0
4716   3182 70 65 63 74 
4716   3186 65 64 20 66 
4716   318A 6F 72 6D 61 
4716   318E 74 20 69 6E 
4716   3192 20 70 72 69 
4716   3196 6E 74 66 2E 
4716   319A 00 
4717   319B 45 72 72 6F _s1: .db "Error: Unknown argument type.\n", 0
4717   319F 72 3A 20 55 
4717   31A3 6E 6B 6E 6F 
4717   31A7 77 6E 20 61 
4717   31AB 72 67 75 6D 
4717   31AF 65 6E 74 20 
4717   31B3 74 79 70 65 
4717   31B7 2E 0A 00 
4718   31BA 1B 5B 32 4A _s2: .db "\033[2J\033[H", 0
4718   31BE 1B 5B 48 00 
4719   31C2             
4720   31C2 C4 31       _heap_top: .dw _heap
4721   31C4 00          _heap: .db 0
4722   31C5             ; --- END DATA SEGMENT
4723   31C5             
4724   31C5             .end
tasm: Number of errors = 0
