0001   0000             ; --- FILENAME: programs/menu
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $selected 
0011   0408 10 01 00      mov a, $1
0012   040B 45 FF FF      mov [bp + -1], a
0013   040E             ; $previously_selected 
0014   040E 10 01 00      mov a, $1
0015   0411 45 FD FF      mov [bp + -3], a
0016   0414             ; $ch 
0017   0414             ; $i 
0018   0414 52 07 00      sub sp, 7
0019   0417             ;; guestbook_data = alloc(5000); 
0020   0417 3B 11 15      mov d, _guestbook_data ; $guestbook_data
0021   041A DA            push d
0022   041B 26 88 13      mov b, $1388
0023   041E FD AB         swp b
0024   0420 D8            push b
0025   0421 07 AD 0F      call alloc
0026   0424 51 02 00      add sp, 2
0027   0427 E7            pop d
0028   0428 FD 43         mov [d], b
0029   042A             ;; print_with_escape("\033[2J"); 
0030   042A 26 36 15      mov b, __s3 ; "\033[2J"
0031   042D FD AB         swp b
0032   042F D8            push b
0033   0430 07 49 14      call print_with_escape
0034   0433 51 02 00      add sp, 2
0035   0436             ;; move_cursor_to_line(1); 
0036   0436 26 01 00      mov b, $1
0037   0439 FD AB         swp b
0038   043B D8            push b
0039   043C 07 79 14      call move_cursor_to_line
0040   043F 51 02 00      add sp, 2
0041   0442             ;; printf("**** Sol-1 Guestbook ****\n"); 
0042   0442 26 3B 15      mov b, __s4 ; "**** Sol-1 Guestbook ****\n"
0043   0445 FD AB         swp b
0044   0447 D8            push b
0045   0448 07 30 09      call printf
0046   044B 51 02 00      add sp, 2
0047   044E             ;; print_with_escape("\033[?25l"); 
0048   044E 26 56 15      mov b, __s5 ; "\033[?25l"
0049   0451 FD AB         swp b
0050   0453 D8            push b
0051   0454 07 49 14      call print_with_escape
0052   0457 51 02 00      add sp, 2
0053   045A             ;; for (i = 0; i < 3; ++i) { 
0054   045A             _for1_init:
0055   045A FA FA FF      lea d, [bp + -6] ; $i
0056   045D DA            push d
0057   045E 26 00 00      mov b, $0
0058   0461 E7            pop d
0059   0462 FD 43         mov [d], b
0060   0464             _for1_cond:
0061   0464 FA FA FF      lea d, [bp + -6] ; $i
0062   0467 2A            mov b, [d]
0063   0468             ; START RELATIONAL
0064   0468 D7            push a
0065   0469 11            mov a, b
0066   046A 26 03 00      mov b, $3
0067   046D B0            cmp a, b
0068   046E FD 73         slt ; < 
0069   0470 E4            pop a
0070   0471             ; END RELATIONAL
0071   0471 C0 00 00      cmp b, 0
0072   0474 C6 BC 04      je _for1_exit
0073   0477             _for1_block:
0074   0477             ;; move_cursor_to_line(i); 
0075   0477 FA FA FF      lea d, [bp + -6] ; $i
0076   047A 2A            mov b, [d]
0077   047B FD AB         swp b
0078   047D D8            push b
0079   047E 07 79 14      call move_cursor_to_line
0080   0481 51 02 00      add sp, 2
0081   0484             ;; display_option(options[i], i == selected); 
0082   0484 FA FA FF      lea d, [bp + -6] ; $i
0083   0487 2A            mov b, [d]
0084   0488             ; START RELATIONAL
0085   0488 D7            push a
0086   0489 11            mov a, b
0087   048A FA FF FF      lea d, [bp + -1] ; $selected
0088   048D 2A            mov b, [d]
0089   048E B0            cmp a, b
0090   048F FD 71         seq ; ==
0091   0491 E4            pop a
0092   0492             ; END RELATIONAL
0093   0492 FD AB         swp b
0094   0494 D8            push b
0095   0495 3B EE 14      mov d, _options_data ; $options
0096   0498 D7            push a
0097   0499 DA            push d
0098   049A FA FA FF      lea d, [bp + -6] ; $i
0099   049D 2A            mov b, [d]
0100   049E E7            pop d
0101   049F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0102   04A3 E4            pop a
0103   04A4 2A            mov b, [d]
0104   04A5 FD AB         swp b
0105   04A7 D8            push b
0106   04A8 07 AB 14      call display_option
0107   04AB 51 04 00      add sp, 4
0108   04AE             _for1_update:
0109   04AE FA FA FF      lea d, [bp + -6] ; $i
0110   04B1 2A            mov b, [d]
0111   04B2 FD 77         inc b
0112   04B4 FA FA FF      lea d, [bp + -6] ; $i
0113   04B7 FD 43         mov [d], b
0114   04B9 0A 64 04      jmp _for1_cond
0115   04BC             _for1_exit:
0116   04BC             ;; while (1) { 
0117   04BC             _while2_cond:
0118   04BC 26 01 00      mov b, $1
0119   04BF C0 00 00      cmp b, 0
0120   04C2 C6 5D 07      je _while2_exit
0121   04C5             _while2_block:
0122   04C5             ;; ch = getchar();  // Implement this function based on your OS 
0123   04C5 FA FC FF      lea d, [bp + -4] ; $ch
0124   04C8 DA            push d
0125   04C9 07 37 0F      call getchar
0126   04CC E7            pop d
0127   04CD FD 3E         mov [d], bl
0128   04CF             ;; previously_selected = selected; 
0129   04CF FA FD FF      lea d, [bp + -3] ; $previously_selected
0130   04D2 DA            push d
0131   04D3 FA FF FF      lea d, [bp + -1] ; $selected
0132   04D6 2A            mov b, [d]
0133   04D7 E7            pop d
0134   04D8 FD 43         mov [d], b
0135   04DA             ;; if (ch == 27) {  // Escape sequence 
0136   04DA             _if3_cond:
0137   04DA FA FC FF      lea d, [bp + -4] ; $ch
0138   04DD 32            mov bl, [d]
0139   04DE A7 00         mov bh, 0
0140   04E0             ; START RELATIONAL
0141   04E0 D7            push a
0142   04E1 11            mov a, b
0143   04E2 26 1B 00      mov b, $1b
0144   04E5 B0            cmp a, b
0145   04E6 FD 71         seq ; ==
0146   04E8 E4            pop a
0147   04E9             ; END RELATIONAL
0148   04E9 C0 00 00      cmp b, 0
0149   04EC C6 90 05      je _if3_else
0150   04EF             _if3_true:
0151   04EF             ;; ch = getchar(); 
0152   04EF FA FC FF      lea d, [bp + -4] ; $ch
0153   04F2 DA            push d
0154   04F3 07 37 0F      call getchar
0155   04F6 E7            pop d
0156   04F7 FD 3E         mov [d], bl
0157   04F9             ;; if (ch == '[') { 
0158   04F9             _if4_cond:
0159   04F9 FA FC FF      lea d, [bp + -4] ; $ch
0160   04FC 32            mov bl, [d]
0161   04FD A7 00         mov bh, 0
0162   04FF             ; START RELATIONAL
0163   04FF D7            push a
0164   0500 11            mov a, b
0165   0501 26 5B 00      mov b, $5b
0166   0504 B0            cmp a, b
0167   0505 FD 71         seq ; ==
0168   0507 E4            pop a
0169   0508             ; END RELATIONAL
0170   0508 C0 00 00      cmp b, 0
0171   050B C6 8D 05      je _if4_exit
0172   050E             _if4_true:
0173   050E             ;; ch = getchar(); 
0174   050E FA FC FF      lea d, [bp + -4] ; $ch
0175   0511 DA            push d
0176   0512 07 37 0F      call getchar
0177   0515 E7            pop d
0178   0516 FD 3E         mov [d], bl
0179   0518             ;; if (ch == 'A' && selected > 0) {  // Up arrow 
0180   0518             _if5_cond:
0181   0518 FA FC FF      lea d, [bp + -4] ; $ch
0182   051B 32            mov bl, [d]
0183   051C A7 00         mov bh, 0
0184   051E             ; START RELATIONAL
0185   051E D7            push a
0186   051F 11            mov a, b
0187   0520 26 41 00      mov b, $41
0188   0523 B0            cmp a, b
0189   0524 FD 71         seq ; ==
0190   0526 E4            pop a
0191   0527             ; END RELATIONAL
0192   0527 D7            push a
0193   0528 11            mov a, b
0194   0529 FA FF FF      lea d, [bp + -1] ; $selected
0195   052C 2A            mov b, [d]
0196   052D             ; START RELATIONAL
0197   052D D7            push a
0198   052E 11            mov a, b
0199   052F 26 00 00      mov b, $0
0200   0532 B0            cmp a, b
0201   0533 FD 7F         sgt ; >
0202   0535 E4            pop a
0203   0536             ; END RELATIONAL
0204   0536 FD A7         sand a, b ; &&
0205   0538 E4            pop a
0206   0539 C0 00 00      cmp b, 0
0207   053C C6 51 05      je _if5_else
0208   053F             _if5_true:
0209   053F             ;; selected--; 
0210   053F FA FF FF      lea d, [bp + -1] ; $selected
0211   0542 2A            mov b, [d]
0212   0543 FD 79         mov g, b
0213   0545 FD 7D         dec b
0214   0547 FA FF FF      lea d, [bp + -1] ; $selected
0215   054A FD 43         mov [d], b
0216   054C FD 27         mov b, g
0217   054E 0A 8A 05      jmp _if5_exit
0218   0551             _if5_else:
0219   0551             ;; if (ch == 'B' && selected < 4) {  // Down arrow 
0220   0551             _if6_cond:
0221   0551 FA FC FF      lea d, [bp + -4] ; $ch
0222   0554 32            mov bl, [d]
0223   0555 A7 00         mov bh, 0
0224   0557             ; START RELATIONAL
0225   0557 D7            push a
0226   0558 11            mov a, b
0227   0559 26 42 00      mov b, $42
0228   055C B0            cmp a, b
0229   055D FD 71         seq ; ==
0230   055F E4            pop a
0231   0560             ; END RELATIONAL
0232   0560 D7            push a
0233   0561 11            mov a, b
0234   0562 FA FF FF      lea d, [bp + -1] ; $selected
0235   0565 2A            mov b, [d]
0236   0566             ; START RELATIONAL
0237   0566 D7            push a
0238   0567 11            mov a, b
0239   0568 26 04 00      mov b, $4
0240   056B B0            cmp a, b
0241   056C FD 73         slt ; < 
0242   056E E4            pop a
0243   056F             ; END RELATIONAL
0244   056F FD A7         sand a, b ; &&
0245   0571 E4            pop a
0246   0572 C0 00 00      cmp b, 0
0247   0575 C6 8A 05      je _if6_exit
0248   0578             _if6_true:
0249   0578             ;; selected++; 
0250   0578 FA FF FF      lea d, [bp + -1] ; $selected
0251   057B 2A            mov b, [d]
0252   057C FD 79         mov g, b
0253   057E FD 77         inc b
0254   0580 FA FF FF      lea d, [bp + -1] ; $selected
0255   0583 FD 43         mov [d], b
0256   0585 FD 27         mov b, g
0257   0587 0A 8A 05      jmp _if6_exit
0258   058A             _if6_exit:
0259   058A             _if5_exit:
0260   058A 0A 8D 05      jmp _if4_exit
0261   058D             _if4_exit:
0262   058D 0A 02 07      jmp _if3_exit
0263   0590             _if3_else:
0264   0590             ;; if (ch == '\n' || ch == '\r') {  // Enter key 
0265   0590             _if7_cond:
0266   0590 FA FC FF      lea d, [bp + -4] ; $ch
0267   0593 32            mov bl, [d]
0268   0594 A7 00         mov bh, 0
0269   0596             ; START RELATIONAL
0270   0596 D7            push a
0271   0597 11            mov a, b
0272   0598 26 0A 00      mov b, $a
0273   059B B0            cmp a, b
0274   059C FD 71         seq ; ==
0275   059E E4            pop a
0276   059F             ; END RELATIONAL
0277   059F D7            push a
0278   05A0 11            mov a, b
0279   05A1 FA FC FF      lea d, [bp + -4] ; $ch
0280   05A4 32            mov bl, [d]
0281   05A5 A7 00         mov bh, 0
0282   05A7             ; START RELATIONAL
0283   05A7 D7            push a
0284   05A8 11            mov a, b
0285   05A9 26 0D 00      mov b, $d
0286   05AC B0            cmp a, b
0287   05AD FD 71         seq ; ==
0288   05AF E4            pop a
0289   05B0             ; END RELATIONAL
0290   05B0 FD A8         sor a, b ; ||
0291   05B2 E4            pop a
0292   05B3 C0 00 00      cmp b, 0
0293   05B6 C6 02 07      je _if7_exit
0294   05B9             _if7_true:
0295   05B9             ;; switch(selected){ 
0296   05B9             _switch8_expr:
0297   05B9 FA FF FF      lea d, [bp + -1] ; $selected
0298   05BC 2A            mov b, [d]
0299   05BD             _switch8_comparisons:
0300   05BD C0 00 00      cmp b, 0
0301   05C0 C6 D2 05      je _switch8_case0
0302   05C3 C0 01 00      cmp b, 1
0303   05C6 C6 D5 06      je _switch8_case1
0304   05C9 C0 02 00      cmp b, 2
0305   05CC C6 F0 06      je _switch8_case2
0306   05CF 0A FF 06      jmp _switch8_exit
0307   05D2             _switch8_case0:
0308   05D2             ;; move_cursor_to_line(6); 
0309   05D2 26 06 00      mov b, $6
0310   05D5 FD AB         swp b
0311   05D7 D8            push b
0312   05D8 07 79 14      call move_cursor_to_line
0313   05DB 51 02 00      add sp, 2
0314   05DE             
0315   05DE             ; --- BEGIN INLINE ASM BLOCK
0316   05DE 3B 11 15      mov d, _guestbook_data ; $guestbook_data
0317   05E1 FD 2A         mov d, [d]
0318   05E3 FD 50         mov di, d
0319   05E5 3B 0F 15      mov d, _filename ; $filename
0320   05E8 FD 2A         mov d, [d]
0321   05EA 19 14         mov al, 20
0322   05EC 05 04         syscall sys_filesystem				
0323   05EE             ; --- END INLINE ASM BLOCK
0324   05EE             
0325   05EE             ;; printf(guestbook_data); 
0326   05EE 3B 11 15      mov d, _guestbook_data ; $guestbook_data
0327   05F1 2A            mov b, [d]
0328   05F2 FD AB         swp b
0329   05F4 D8            push b
0330   05F5 07 30 09      call printf
0331   05F8 51 02 00      add sp, 2
0332   05FB             ;; print_with_escape("\033[7m"); // highlight 
0333   05FB 26 5D 15      mov b, __s6 ; "\033[7m"
0334   05FE FD AB         swp b
0335   0600 D8            push b
0336   0601 07 49 14      call print_with_escape
0337   0604 51 02 00      add sp, 2
0338   0607             ;; printf("Press Return to exit."); 
0339   0607 26 62 15      mov b, __s7 ; "Press Return to exit."
0340   060A FD AB         swp b
0341   060C D8            push b
0342   060D 07 30 09      call printf
0343   0610 51 02 00      add sp, 2
0344   0613             ;; print_with_escape("\033[0m"); 
0345   0613 26 78 15      mov b, __s8 ; "\033[0m"
0346   0616 FD AB         swp b
0347   0618 D8            push b
0348   0619 07 49 14      call print_with_escape
0349   061C 51 02 00      add sp, 2
0350   061F             ;; while(1){ 
0351   061F             _while9_cond:
0352   061F 26 01 00      mov b, $1
0353   0622 C0 00 00      cmp b, 0
0354   0625 C6 D2 06      je _while9_exit
0355   0628             _while9_block:
0356   0628             ;; ch = getchar(); 
0357   0628 FA FC FF      lea d, [bp + -4] ; $ch
0358   062B DA            push d
0359   062C 07 37 0F      call getchar
0360   062F E7            pop d
0361   0630 FD 3E         mov [d], bl
0362   0632             ;; if(ch == 0x0A || ch == 0x0D){ 
0363   0632             _if10_cond:
0364   0632 FA FC FF      lea d, [bp + -4] ; $ch
0365   0635 32            mov bl, [d]
0366   0636 A7 00         mov bh, 0
0367   0638             ; START RELATIONAL
0368   0638 D7            push a
0369   0639 11            mov a, b
0370   063A 26 0A 00      mov b, $a
0371   063D B0            cmp a, b
0372   063E FD 71         seq ; ==
0373   0640 E4            pop a
0374   0641             ; END RELATIONAL
0375   0641 D7            push a
0376   0642 11            mov a, b
0377   0643 FA FC FF      lea d, [bp + -4] ; $ch
0378   0646 32            mov bl, [d]
0379   0647 A7 00         mov bh, 0
0380   0649             ; START RELATIONAL
0381   0649 D7            push a
0382   064A 11            mov a, b
0383   064B 26 0D 00      mov b, $d
0384   064E B0            cmp a, b
0385   064F FD 71         seq ; ==
0386   0651 E4            pop a
0387   0652             ; END RELATIONAL
0388   0652 FD A8         sor a, b ; ||
0389   0654 E4            pop a
0390   0655 C0 00 00      cmp b, 0
0391   0658 C6 CF 06      je _if10_exit
0392   065B             _if10_true:
0393   065B             ;; print_with_escape("\033[2J"); // clear 
0394   065B 26 36 15      mov b, __s3 ; "\033[2J"
0395   065E FD AB         swp b
0396   0660 D8            push b
0397   0661 07 49 14      call print_with_escape
0398   0664 51 02 00      add sp, 2
0399   0667             ;; for (i = 0; i < 3; ++i) { 
0400   0667             _for11_init:
0401   0667 FA FA FF      lea d, [bp + -6] ; $i
0402   066A DA            push d
0403   066B 26 00 00      mov b, $0
0404   066E E7            pop d
0405   066F FD 43         mov [d], b
0406   0671             _for11_cond:
0407   0671 FA FA FF      lea d, [bp + -6] ; $i
0408   0674 2A            mov b, [d]
0409   0675             ; START RELATIONAL
0410   0675 D7            push a
0411   0676 11            mov a, b
0412   0677 26 03 00      mov b, $3
0413   067A B0            cmp a, b
0414   067B FD 73         slt ; < 
0415   067D E4            pop a
0416   067E             ; END RELATIONAL
0417   067E C0 00 00      cmp b, 0
0418   0681 C6 C9 06      je _for11_exit
0419   0684             _for11_block:
0420   0684             ;; move_cursor_to_line(i); 
0421   0684 FA FA FF      lea d, [bp + -6] ; $i
0422   0687 2A            mov b, [d]
0423   0688 FD AB         swp b
0424   068A D8            push b
0425   068B 07 79 14      call move_cursor_to_line
0426   068E 51 02 00      add sp, 2
0427   0691             ;; display_option(options[i], i == selected); 
0428   0691 FA FA FF      lea d, [bp + -6] ; $i
0429   0694 2A            mov b, [d]
0430   0695             ; START RELATIONAL
0431   0695 D7            push a
0432   0696 11            mov a, b
0433   0697 FA FF FF      lea d, [bp + -1] ; $selected
0434   069A 2A            mov b, [d]
0435   069B B0            cmp a, b
0436   069C FD 71         seq ; ==
0437   069E E4            pop a
0438   069F             ; END RELATIONAL
0439   069F FD AB         swp b
0440   06A1 D8            push b
0441   06A2 3B EE 14      mov d, _options_data ; $options
0442   06A5 D7            push a
0443   06A6 DA            push d
0444   06A7 FA FA FF      lea d, [bp + -6] ; $i
0445   06AA 2A            mov b, [d]
0446   06AB E7            pop d
0447   06AC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0448   06B0 E4            pop a
0449   06B1 2A            mov b, [d]
0450   06B2 FD AB         swp b
0451   06B4 D8            push b
0452   06B5 07 AB 14      call display_option
0453   06B8 51 04 00      add sp, 4
0454   06BB             _for11_update:
0455   06BB FA FA FF      lea d, [bp + -6] ; $i
0456   06BE 2A            mov b, [d]
0457   06BF FD 77         inc b
0458   06C1 FA FA FF      lea d, [bp + -6] ; $i
0459   06C4 FD 43         mov [d], b
0460   06C6 0A 71 06      jmp _for11_cond
0461   06C9             _for11_exit:
0462   06C9             ;; continue; 
0463   06C9 0A 1F 06      jmp _while9_cond ; while continue
0464   06CC 0A CF 06      jmp _if10_exit
0465   06CF             _if10_exit:
0466   06CF 0A 1F 06      jmp _while9_cond
0467   06D2             _while9_exit:
0468   06D2             ;; break; 
0469   06D2 0A FF 06      jmp _switch8_exit ; case break
0470   06D5             _switch8_case1:
0471   06D5             ;; move_cursor_to_line(6); 
0472   06D5 26 06 00      mov b, $6
0473   06D8 FD AB         swp b
0474   06DA D8            push b
0475   06DB 07 79 14      call move_cursor_to_line
0476   06DE 51 02 00      add sp, 2
0477   06E1             ;; printf("Soon!!"); 
0478   06E1 26 7D 15      mov b, __s9 ; "Soon!!"
0479   06E4 FD AB         swp b
0480   06E6 D8            push b
0481   06E7 07 30 09      call printf
0482   06EA 51 02 00      add sp, 2
0483   06ED             ;; break; 
0484   06ED 0A FF 06      jmp _switch8_exit ; case break
0485   06F0             _switch8_case2:
0486   06F0             ;; print_with_escape("\033[?25h"); 
0487   06F0 26 84 15      mov b, __s10 ; "\033[?25h"
0488   06F3 FD AB         swp b
0489   06F5 D8            push b
0490   06F6 07 49 14      call print_with_escape
0491   06F9 51 02 00      add sp, 2
0492   06FC             ;; return; 
0493   06FC F9            leave
0494   06FD 05 0B         syscall sys_terminate_proc
0495   06FF             _switch8_exit:
0496   06FF 0A 02 07      jmp _if7_exit
0497   0702             _if7_exit:
0498   0702             _if3_exit:
0499   0702             ;; move_cursor_to_line(previously_selected); 
0500   0702 FA FD FF      lea d, [bp + -3] ; $previously_selected
0501   0705 2A            mov b, [d]
0502   0706 FD AB         swp b
0503   0708 D8            push b
0504   0709 07 79 14      call move_cursor_to_line
0505   070C 51 02 00      add sp, 2
0506   070F             ;; display_option(options[previously_selected], 0); 
0507   070F 26 00 00      mov b, $0
0508   0712 FD AB         swp b
0509   0714 D8            push b
0510   0715 3B EE 14      mov d, _options_data ; $options
0511   0718 D7            push a
0512   0719 DA            push d
0513   071A FA FD FF      lea d, [bp + -3] ; $previously_selected
0514   071D 2A            mov b, [d]
0515   071E E7            pop d
0516   071F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0517   0723 E4            pop a
0518   0724 2A            mov b, [d]
0519   0725 FD AB         swp b
0520   0727 D8            push b
0521   0728 07 AB 14      call display_option
0522   072B 51 04 00      add sp, 4
0523   072E             ;; move_cursor_to_line(selected); 
0524   072E FA FF FF      lea d, [bp + -1] ; $selected
0525   0731 2A            mov b, [d]
0526   0732 FD AB         swp b
0527   0734 D8            push b
0528   0735 07 79 14      call move_cursor_to_line
0529   0738 51 02 00      add sp, 2
0530   073B             ;; display_option(options[selected], 1); 
0531   073B 26 01 00      mov b, $1
0532   073E FD AB         swp b
0533   0740 D8            push b
0534   0741 3B EE 14      mov d, _options_data ; $options
0535   0744 D7            push a
0536   0745 DA            push d
0537   0746 FA FF FF      lea d, [bp + -1] ; $selected
0538   0749 2A            mov b, [d]
0539   074A E7            pop d
0540   074B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0541   074F E4            pop a
0542   0750 2A            mov b, [d]
0543   0751 FD AB         swp b
0544   0753 D8            push b
0545   0754 07 AB 14      call display_option
0546   0757 51 04 00      add sp, 4
0547   075A 0A BC 04      jmp _while2_cond
0548   075D             _while2_exit:
0549   075D             ;; print_with_escape("\033[?25h"); 
0550   075D 26 84 15      mov b, __s10 ; "\033[?25h"
0551   0760 FD AB         swp b
0552   0762 D8            push b
0553   0763 07 49 14      call print_with_escape
0554   0766 51 02 00      add sp, 2
0555   0769 05 0B         syscall sys_terminate_proc
0556   076B             
0557   076B             strcpy:
0558   076B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0559   076E             ; $psrc 
0560   076E             ; $pdest 
0561   076E 52 04 00      sub sp, 4
0562   0771             ;; psrc = src; 
0563   0771 FA FF FF      lea d, [bp + -1] ; $psrc
0564   0774 DA            push d
0565   0775 FA 07 00      lea d, [bp + 7] ; $src
0566   0778 2A            mov b, [d]
0567   0779 E7            pop d
0568   077A FD 43         mov [d], b
0569   077C             ;; pdest = dest; 
0570   077C FA FD FF      lea d, [bp + -3] ; $pdest
0571   077F DA            push d
0572   0780 FA 05 00      lea d, [bp + 5] ; $dest
0573   0783 2A            mov b, [d]
0574   0784 E7            pop d
0575   0785 FD 43         mov [d], b
0576   0787             ;; while(*psrc) *pdest++ = *psrc++; 
0577   0787             _while12_cond:
0578   0787 FA FF FF      lea d, [bp + -1] ; $psrc
0579   078A 2A            mov b, [d]
0580   078B 74            mov d, b
0581   078C 32            mov bl, [d]
0582   078D A7 00         mov bh, 0
0583   078F C0 00 00      cmp b, 0
0584   0792 C6 BE 07      je _while12_exit
0585   0795             _while12_block:
0586   0795             ;; *pdest++ = *psrc++; 
0587   0795 FA FD FF      lea d, [bp + -3] ; $pdest
0588   0798 2A            mov b, [d]
0589   0799 FD 79         mov g, b
0590   079B FD 77         inc b
0591   079D FA FD FF      lea d, [bp + -3] ; $pdest
0592   07A0 FD 43         mov [d], b
0593   07A2 FD 27         mov b, g
0594   07A4 D8            push b
0595   07A5 FA FF FF      lea d, [bp + -1] ; $psrc
0596   07A8 2A            mov b, [d]
0597   07A9 FD 79         mov g, b
0598   07AB FD 77         inc b
0599   07AD FA FF FF      lea d, [bp + -1] ; $psrc
0600   07B0 FD 43         mov [d], b
0601   07B2 FD 27         mov b, g
0602   07B4 74            mov d, b
0603   07B5 32            mov bl, [d]
0604   07B6 A7 00         mov bh, 0
0605   07B8 E7            pop d
0606   07B9 FD 3E         mov [d], bl
0607   07BB 0A 87 07      jmp _while12_cond
0608   07BE             _while12_exit:
0609   07BE             ;; *pdest = '\0'; 
0610   07BE FA FD FF      lea d, [bp + -3] ; $pdest
0611   07C1 2A            mov b, [d]
0612   07C2 D8            push b
0613   07C3 26 00 00      mov b, $0
0614   07C6 E7            pop d
0615   07C7 FD 3E         mov [d], bl
0616   07C9 F9            leave
0617   07CA 09            ret
0618   07CB             
0619   07CB             strcmp:
0620   07CB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0621   07CE             ;; while (*s1 && (*s1 == *s2)) { 
0622   07CE             _while13_cond:
0623   07CE FA 05 00      lea d, [bp + 5] ; $s1
0624   07D1 2A            mov b, [d]
0625   07D2 74            mov d, b
0626   07D3 32            mov bl, [d]
0627   07D4 A7 00         mov bh, 0
0628   07D6 D7            push a
0629   07D7 11            mov a, b
0630   07D8 FA 05 00      lea d, [bp + 5] ; $s1
0631   07DB 2A            mov b, [d]
0632   07DC 74            mov d, b
0633   07DD 32            mov bl, [d]
0634   07DE A7 00         mov bh, 0
0635   07E0             ; START RELATIONAL
0636   07E0 D7            push a
0637   07E1 11            mov a, b
0638   07E2 FA 07 00      lea d, [bp + 7] ; $s2
0639   07E5 2A            mov b, [d]
0640   07E6 74            mov d, b
0641   07E7 32            mov bl, [d]
0642   07E8 A7 00         mov bh, 0
0643   07EA B0            cmp a, b
0644   07EB FD 71         seq ; ==
0645   07ED E4            pop a
0646   07EE             ; END RELATIONAL
0647   07EE FD A7         sand a, b ; &&
0648   07F0 E4            pop a
0649   07F1 C0 00 00      cmp b, 0
0650   07F4 C6 18 08      je _while13_exit
0651   07F7             _while13_block:
0652   07F7             ;; s1++; 
0653   07F7 FA 05 00      lea d, [bp + 5] ; $s1
0654   07FA 2A            mov b, [d]
0655   07FB FD 79         mov g, b
0656   07FD FD 77         inc b
0657   07FF FA 05 00      lea d, [bp + 5] ; $s1
0658   0802 FD 43         mov [d], b
0659   0804 FD 27         mov b, g
0660   0806             ;; s2++; 
0661   0806 FA 07 00      lea d, [bp + 7] ; $s2
0662   0809 2A            mov b, [d]
0663   080A FD 79         mov g, b
0664   080C FD 77         inc b
0665   080E FA 07 00      lea d, [bp + 7] ; $s2
0666   0811 FD 43         mov [d], b
0667   0813 FD 27         mov b, g
0668   0815 0A CE 07      jmp _while13_cond
0669   0818             _while13_exit:
0670   0818             ;; return *s1 - *s2; 
0671   0818 FA 05 00      lea d, [bp + 5] ; $s1
0672   081B 2A            mov b, [d]
0673   081C 74            mov d, b
0674   081D 32            mov bl, [d]
0675   081E A7 00         mov bh, 0
0676   0820             ; START TERMS
0677   0820 D7            push a
0678   0821 11            mov a, b
0679   0822 FA 07 00      lea d, [bp + 7] ; $s2
0680   0825 2A            mov b, [d]
0681   0826 74            mov d, b
0682   0827 32            mov bl, [d]
0683   0828 A7 00         mov bh, 0
0684   082A 60            sub a, b
0685   082B 27            mov b, a
0686   082C E4            pop a
0687   082D             ; END TERMS
0688   082D F9            leave
0689   082E 09            ret
0690   082F             
0691   082F             strcat:
0692   082F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0693   0832             ; $dest_len 
0694   0832             ; $i 
0695   0832 52 04 00      sub sp, 4
0696   0835             ;; dest_len = strlen(dest); 
0697   0835 FA FF FF      lea d, [bp + -1] ; $dest_len
0698   0838 DA            push d
0699   0839 FA 05 00      lea d, [bp + 5] ; $dest
0700   083C 2A            mov b, [d]
0701   083D FD AB         swp b
0702   083F D8            push b
0703   0840 07 E5 08      call strlen
0704   0843 51 02 00      add sp, 2
0705   0846 E7            pop d
0706   0847 FD 43         mov [d], b
0707   0849             ;; for (i = 0; src[i] != 0; i=i+1) { 
0708   0849             _for14_init:
0709   0849 FA FD FF      lea d, [bp + -3] ; $i
0710   084C DA            push d
0711   084D 26 00 00      mov b, $0
0712   0850 E7            pop d
0713   0851 FD 43         mov [d], b
0714   0853             _for14_cond:
0715   0853 FA 07 00      lea d, [bp + 7] ; $src
0716   0856 FD 2A         mov d, [d]
0717   0858 D7            push a
0718   0859 DA            push d
0719   085A FA FD FF      lea d, [bp + -3] ; $i
0720   085D 2A            mov b, [d]
0721   085E E7            pop d
0722   085F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0723   0863 E4            pop a
0724   0864 32            mov bl, [d]
0725   0865 A7 00         mov bh, 0
0726   0867             ; START RELATIONAL
0727   0867 D7            push a
0728   0868 11            mov a, b
0729   0869 26 00 00      mov b, $0
0730   086C B0            cmp a, b
0731   086D FD 72         sneq ; !=
0732   086F E4            pop a
0733   0870             ; END RELATIONAL
0734   0870 C0 00 00      cmp b, 0
0735   0873 C6 BE 08      je _for14_exit
0736   0876             _for14_block:
0737   0876             ;; dest[dest_len + i] = src[i]; 
0738   0876 FA 05 00      lea d, [bp + 5] ; $dest
0739   0879 FD 2A         mov d, [d]
0740   087B D7            push a
0741   087C DA            push d
0742   087D FA FF FF      lea d, [bp + -1] ; $dest_len
0743   0880 2A            mov b, [d]
0744   0881             ; START TERMS
0745   0881 D7            push a
0746   0882 11            mov a, b
0747   0883 FA FD FF      lea d, [bp + -3] ; $i
0748   0886 2A            mov b, [d]
0749   0887 54            add a, b
0750   0888 27            mov b, a
0751   0889 E4            pop a
0752   088A             ; END TERMS
0753   088A E7            pop d
0754   088B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0755   088F E4            pop a
0756   0890 DA            push d
0757   0891 FA 07 00      lea d, [bp + 7] ; $src
0758   0894 FD 2A         mov d, [d]
0759   0896 D7            push a
0760   0897 DA            push d
0761   0898 FA FD FF      lea d, [bp + -3] ; $i
0762   089B 2A            mov b, [d]
0763   089C E7            pop d
0764   089D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0765   08A1 E4            pop a
0766   08A2 32            mov bl, [d]
0767   08A3 A7 00         mov bh, 0
0768   08A5 E7            pop d
0769   08A6 FD 3E         mov [d], bl
0770   08A8             _for14_update:
0771   08A8 FA FD FF      lea d, [bp + -3] ; $i
0772   08AB DA            push d
0773   08AC FA FD FF      lea d, [bp + -3] ; $i
0774   08AF 2A            mov b, [d]
0775   08B0             ; START TERMS
0776   08B0 D7            push a
0777   08B1 11            mov a, b
0778   08B2 26 01 00      mov b, $1
0779   08B5 54            add a, b
0780   08B6 27            mov b, a
0781   08B7 E4            pop a
0782   08B8             ; END TERMS
0783   08B8 E7            pop d
0784   08B9 FD 43         mov [d], b
0785   08BB 0A 53 08      jmp _for14_cond
0786   08BE             _for14_exit:
0787   08BE             ;; dest[dest_len + i] = 0; 
0788   08BE FA 05 00      lea d, [bp + 5] ; $dest
0789   08C1 FD 2A         mov d, [d]
0790   08C3 D7            push a
0791   08C4 DA            push d
0792   08C5 FA FF FF      lea d, [bp + -1] ; $dest_len
0793   08C8 2A            mov b, [d]
0794   08C9             ; START TERMS
0795   08C9 D7            push a
0796   08CA 11            mov a, b
0797   08CB FA FD FF      lea d, [bp + -3] ; $i
0798   08CE 2A            mov b, [d]
0799   08CF 54            add a, b
0800   08D0 27            mov b, a
0801   08D1 E4            pop a
0802   08D2             ; END TERMS
0803   08D2 E7            pop d
0804   08D3 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0805   08D7 E4            pop a
0806   08D8 DA            push d
0807   08D9 26 00 00      mov b, $0
0808   08DC E7            pop d
0809   08DD FD 3E         mov [d], bl
0810   08DF             ;; return dest; 
0811   08DF FA 05 00      lea d, [bp + 5] ; $dest
0812   08E2 2A            mov b, [d]
0813   08E3 F9            leave
0814   08E4 09            ret
0815   08E5             
0816   08E5             strlen:
0817   08E5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0818   08E8             ; $length 
0819   08E8 52 02 00      sub sp, 2
0820   08EB             ;; length = 0; 
0821   08EB FA FF FF      lea d, [bp + -1] ; $length
0822   08EE DA            push d
0823   08EF 26 00 00      mov b, $0
0824   08F2 E7            pop d
0825   08F3 FD 43         mov [d], b
0826   08F5             ;; while (str[length] != 0) { 
0827   08F5             _while15_cond:
0828   08F5 FA 05 00      lea d, [bp + 5] ; $str
0829   08F8 FD 2A         mov d, [d]
0830   08FA D7            push a
0831   08FB DA            push d
0832   08FC FA FF FF      lea d, [bp + -1] ; $length
0833   08FF 2A            mov b, [d]
0834   0900 E7            pop d
0835   0901 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0836   0905 E4            pop a
0837   0906 32            mov bl, [d]
0838   0907 A7 00         mov bh, 0
0839   0909             ; START RELATIONAL
0840   0909 D7            push a
0841   090A 11            mov a, b
0842   090B 26 00 00      mov b, $0
0843   090E B0            cmp a, b
0844   090F FD 72         sneq ; !=
0845   0911 E4            pop a
0846   0912             ; END RELATIONAL
0847   0912 C0 00 00      cmp b, 0
0848   0915 C6 2A 09      je _while15_exit
0849   0918             _while15_block:
0850   0918             ;; length++; 
0851   0918 FA FF FF      lea d, [bp + -1] ; $length
0852   091B 2A            mov b, [d]
0853   091C FD 79         mov g, b
0854   091E FD 77         inc b
0855   0920 FA FF FF      lea d, [bp + -1] ; $length
0856   0923 FD 43         mov [d], b
0857   0925 FD 27         mov b, g
0858   0927 0A F5 08      jmp _while15_cond
0859   092A             _while15_exit:
0860   092A             ;; return length; 
0861   092A FA FF FF      lea d, [bp + -1] ; $length
0862   092D 2A            mov b, [d]
0863   092E F9            leave
0864   092F 09            ret
0865   0930             
0866   0930             printf:
0867   0930 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0868   0933             ; $p 
0869   0933             ; $fp 
0870   0933             ; $i 
0871   0933 52 06 00      sub sp, 6
0872   0936             ;; fp = format; 
0873   0936 FA FD FF      lea d, [bp + -3] ; $fp
0874   0939 DA            push d
0875   093A FA 05 00      lea d, [bp + 5] ; $format
0876   093D 2A            mov b, [d]
0877   093E E7            pop d
0878   093F FD 43         mov [d], b
0879   0941             ;; p = &format + 2; 
0880   0941 FA FF FF      lea d, [bp + -1] ; $p
0881   0944 DA            push d
0882   0945 FA 05 00      lea d, [bp + 5] ; $format
0883   0948 2D            mov b, d
0884   0949             ; START TERMS
0885   0949 D7            push a
0886   094A 11            mov a, b
0887   094B 26 02 00      mov b, $2
0888   094E 54            add a, b
0889   094F 27            mov b, a
0890   0950 E4            pop a
0891   0951             ; END TERMS
0892   0951 E7            pop d
0893   0952 FD 43         mov [d], b
0894   0954             ;; for(;;){ 
0895   0954             _for16_init:
0896   0954             _for16_cond:
0897   0954             _for16_block:
0898   0954             ;; if(!*fp) break; 
0899   0954             _if17_cond:
0900   0954 FA FD FF      lea d, [bp + -3] ; $fp
0901   0957 2A            mov b, [d]
0902   0958 74            mov d, b
0903   0959 32            mov bl, [d]
0904   095A A7 00         mov bh, 0
0905   095C C0 00 00      cmp b, 0
0906   095F FD 71         seq ; !
0907   0961 C0 00 00      cmp b, 0
0908   0964 C6 6D 09      je _if17_else
0909   0967             _if17_true:
0910   0967             ;; break; 
0911   0967 0A B7 0A      jmp _for16_exit ; for break
0912   096A 0A B4 0A      jmp _if17_exit
0913   096D             _if17_else:
0914   096D             ;; if(*fp == '%'){ 
0915   096D             _if18_cond:
0916   096D FA FD FF      lea d, [bp + -3] ; $fp
0917   0970 2A            mov b, [d]
0918   0971 74            mov d, b
0919   0972 32            mov bl, [d]
0920   0973 A7 00         mov bh, 0
0921   0975             ; START RELATIONAL
0922   0975 D7            push a
0923   0976 11            mov a, b
0924   0977 26 25 00      mov b, $25
0925   097A B0            cmp a, b
0926   097B FD 71         seq ; ==
0927   097D E4            pop a
0928   097E             ; END RELATIONAL
0929   097E C0 00 00      cmp b, 0
0930   0981 C6 96 0A      je _if18_else
0931   0984             _if18_true:
0932   0984             ;; fp++; 
0933   0984 FA FD FF      lea d, [bp + -3] ; $fp
0934   0987 2A            mov b, [d]
0935   0988 FD 79         mov g, b
0936   098A FD 77         inc b
0937   098C FA FD FF      lea d, [bp + -3] ; $fp
0938   098F FD 43         mov [d], b
0939   0991 FD 27         mov b, g
0940   0993             ;; switch(*fp){ 
0941   0993             _switch19_expr:
0942   0993 FA FD FF      lea d, [bp + -3] ; $fp
0943   0996 2A            mov b, [d]
0944   0997 74            mov d, b
0945   0998 32            mov bl, [d]
0946   0999 A7 00         mov bh, 0
0947   099B             _switch19_comparisons:
0948   099B C1 64         cmp bl, $64
0949   099D C6 BF 09      je _switch19_case0
0950   09A0 C1 69         cmp bl, $69
0951   09A2 C6 BF 09      je _switch19_case1
0952   09A5 C1 75         cmp bl, $75
0953   09A7 C6 E4 09      je _switch19_case2
0954   09AA C1 78         cmp bl, $78
0955   09AC C6 09 0A      je _switch19_case3
0956   09AF C1 63         cmp bl, $63
0957   09B1 C6 2E 0A      je _switch19_case4
0958   09B4 C1 73         cmp bl, $73
0959   09B6 C6 53 0A      je _switch19_case5
0960   09B9 0A 78 0A      jmp _switch19_default
0961   09BC 0A 84 0A      jmp _switch19_exit
0962   09BF             _switch19_case0:
0963   09BF             _switch19_case1:
0964   09BF             ;; prints(*(int*)p); 
0965   09BF FA FF FF      lea d, [bp + -1] ; $p
0966   09C2 2A            mov b, [d]
0967   09C3 74            mov d, b
0968   09C4 2A            mov b, [d]
0969   09C5 FD AB         swp b
0970   09C7 D8            push b
0971   09C8 07 49 0D      call prints
0972   09CB 51 02 00      add sp, 2
0973   09CE             ;; p = p + 2; 
0974   09CE FA FF FF      lea d, [bp + -1] ; $p
0975   09D1 DA            push d
0976   09D2 FA FF FF      lea d, [bp + -1] ; $p
0977   09D5 2A            mov b, [d]
0978   09D6             ; START TERMS
0979   09D6 D7            push a
0980   09D7 11            mov a, b
0981   09D8 26 02 00      mov b, $2
0982   09DB 54            add a, b
0983   09DC 27            mov b, a
0984   09DD E4            pop a
0985   09DE             ; END TERMS
0986   09DE E7            pop d
0987   09DF FD 43         mov [d], b
0988   09E1             ;; break; 
0989   09E1 0A 84 0A      jmp _switch19_exit ; case break
0990   09E4             _switch19_case2:
0991   09E4             ;; printu(*(unsigned int*)p); 
0992   09E4 FA FF FF      lea d, [bp + -1] ; $p
0993   09E7 2A            mov b, [d]
0994   09E8 74            mov d, b
0995   09E9 2A            mov b, [d]
0996   09EA FD AB         swp b
0997   09EC D8            push b
0998   09ED 07 3E 0E      call printu
0999   09F0 51 02 00      add sp, 2
1000   09F3             ;; p = p + 2; 
1001   09F3 FA FF FF      lea d, [bp + -1] ; $p
1002   09F6 DA            push d
1003   09F7 FA FF FF      lea d, [bp + -1] ; $p
1004   09FA 2A            mov b, [d]
1005   09FB             ; START TERMS
1006   09FB D7            push a
1007   09FC 11            mov a, b
1008   09FD 26 02 00      mov b, $2
1009   0A00 54            add a, b
1010   0A01 27            mov b, a
1011   0A02 E4            pop a
1012   0A03             ; END TERMS
1013   0A03 E7            pop d
1014   0A04 FD 43         mov [d], b
1015   0A06             ;; break; 
1016   0A06 0A 84 0A      jmp _switch19_exit ; case break
1017   0A09             _switch19_case3:
1018   0A09             ;; printx16(*(unsigned int*)p); 
1019   0A09 FA FF FF      lea d, [bp + -1] ; $p
1020   0A0C 2A            mov b, [d]
1021   0A0D 74            mov d, b
1022   0A0E 2A            mov b, [d]
1023   0A0F FD AB         swp b
1024   0A11 D8            push b
1025   0A12 07 B9 0A      call printx16
1026   0A15 51 02 00      add sp, 2
1027   0A18             ;; p = p + 2; 
1028   0A18 FA FF FF      lea d, [bp + -1] ; $p
1029   0A1B DA            push d
1030   0A1C FA FF FF      lea d, [bp + -1] ; $p
1031   0A1F 2A            mov b, [d]
1032   0A20             ; START TERMS
1033   0A20 D7            push a
1034   0A21 11            mov a, b
1035   0A22 26 02 00      mov b, $2
1036   0A25 54            add a, b
1037   0A26 27            mov b, a
1038   0A27 E4            pop a
1039   0A28             ; END TERMS
1040   0A28 E7            pop d
1041   0A29 FD 43         mov [d], b
1042   0A2B             ;; break; 
1043   0A2B 0A 84 0A      jmp _switch19_exit ; case break
1044   0A2E             _switch19_case4:
1045   0A2E             ;; putchar(*(char*)p); 
1046   0A2E FA FF FF      lea d, [bp + -1] ; $p
1047   0A31 2A            mov b, [d]
1048   0A32 74            mov d, b
1049   0A33 32            mov bl, [d]
1050   0A34 A7 00         mov bh, 0
1051   0A36 DD            push bl
1052   0A37 07 2A 0F      call putchar
1053   0A3A 51 01 00      add sp, 1
1054   0A3D             ;; p = p + 2; 
1055   0A3D FA FF FF      lea d, [bp + -1] ; $p
1056   0A40 DA            push d
1057   0A41 FA FF FF      lea d, [bp + -1] ; $p
1058   0A44 2A            mov b, [d]
1059   0A45             ; START TERMS
1060   0A45 D7            push a
1061   0A46 11            mov a, b
1062   0A47 26 02 00      mov b, $2
1063   0A4A 54            add a, b
1064   0A4B 27            mov b, a
1065   0A4C E4            pop a
1066   0A4D             ; END TERMS
1067   0A4D E7            pop d
1068   0A4E FD 43         mov [d], b
1069   0A50             ;; break; 
1070   0A50 0A 84 0A      jmp _switch19_exit ; case break
1071   0A53             _switch19_case5:
1072   0A53             ;; print(*(char**)p); 
1073   0A53 FA FF FF      lea d, [bp + -1] ; $p
1074   0A56 2A            mov b, [d]
1075   0A57 74            mov d, b
1076   0A58 2A            mov b, [d]
1077   0A59 FD AB         swp b
1078   0A5B D8            push b
1079   0A5C 07 72 0F      call print
1080   0A5F 51 02 00      add sp, 2
1081   0A62             ;; p = p + 2; 
1082   0A62 FA FF FF      lea d, [bp + -1] ; $p
1083   0A65 DA            push d
1084   0A66 FA FF FF      lea d, [bp + -1] ; $p
1085   0A69 2A            mov b, [d]
1086   0A6A             ; START TERMS
1087   0A6A D7            push a
1088   0A6B 11            mov a, b
1089   0A6C 26 02 00      mov b, $2
1090   0A6F 54            add a, b
1091   0A70 27            mov b, a
1092   0A71 E4            pop a
1093   0A72             ; END TERMS
1094   0A72 E7            pop d
1095   0A73 FD 43         mov [d], b
1096   0A75             ;; break; 
1097   0A75 0A 84 0A      jmp _switch19_exit ; case break
1098   0A78             _switch19_default:
1099   0A78             ;; print("Error: Unknown argument type.\n"); 
1100   0A78 26 8B 15      mov b, __s11 ; "Error: Unknown argument type.\n"
1101   0A7B FD AB         swp b
1102   0A7D D8            push b
1103   0A7E 07 72 0F      call print
1104   0A81 51 02 00      add sp, 2
1105   0A84             _switch19_exit:
1106   0A84             ;; fp++; 
1107   0A84 FA FD FF      lea d, [bp + -3] ; $fp
1108   0A87 2A            mov b, [d]
1109   0A88 FD 79         mov g, b
1110   0A8A FD 77         inc b
1111   0A8C FA FD FF      lea d, [bp + -3] ; $fp
1112   0A8F FD 43         mov [d], b
1113   0A91 FD 27         mov b, g
1114   0A93 0A B4 0A      jmp _if18_exit
1115   0A96             _if18_else:
1116   0A96             ;; putchar(*fp); 
1117   0A96 FA FD FF      lea d, [bp + -3] ; $fp
1118   0A99 2A            mov b, [d]
1119   0A9A 74            mov d, b
1120   0A9B 32            mov bl, [d]
1121   0A9C A7 00         mov bh, 0
1122   0A9E DD            push bl
1123   0A9F 07 2A 0F      call putchar
1124   0AA2 51 01 00      add sp, 1
1125   0AA5             ;; fp++; 
1126   0AA5 FA FD FF      lea d, [bp + -3] ; $fp
1127   0AA8 2A            mov b, [d]
1128   0AA9 FD 79         mov g, b
1129   0AAB FD 77         inc b
1130   0AAD FA FD FF      lea d, [bp + -3] ; $fp
1131   0AB0 FD 43         mov [d], b
1132   0AB2 FD 27         mov b, g
1133   0AB4             _if18_exit:
1134   0AB4             _if17_exit:
1135   0AB4             _for16_update:
1136   0AB4 0A 54 09      jmp _for16_cond
1137   0AB7             _for16_exit:
1138   0AB7 F9            leave
1139   0AB8 09            ret
1140   0AB9             
1141   0AB9             printx16:
1142   0AB9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1143   0ABC             
1144   0ABC             ; --- BEGIN INLINE ASM BLOCK
1145   0ABC FA 05 00      lea d, [bp + 5] ; $hex
1146   0ABF 2A            mov b, [d]
1147   0AC0 07 49 13      call print_u16x
1148   0AC3             ; --- END INLINE ASM BLOCK
1149   0AC3             
1150   0AC3 F9            leave
1151   0AC4 09            ret
1152   0AC5             
1153   0AC5             printx8:
1154   0AC5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1155   0AC8             
1156   0AC8             ; --- BEGIN INLINE ASM BLOCK
1157   0AC8 FA 05 00      lea d, [bp + 5] ; $hex
1158   0ACB 32            mov bl, [d]
1159   0ACC 07 8D 13      call print_u8x
1160   0ACF             ; --- END INLINE ASM BLOCK
1161   0ACF             
1162   0ACF F9            leave
1163   0AD0 09            ret
1164   0AD1             
1165   0AD1             hex_to_int:
1166   0AD1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1167   0AD4             ; $value 
1168   0AD4 10 00 00      mov a, $0
1169   0AD7 45 FF FF      mov [bp + -1], a
1170   0ADA             ; $i 
1171   0ADA             ; $hex_char 
1172   0ADA             ; $len 
1173   0ADA 52 07 00      sub sp, 7
1174   0ADD             ;; len = strlen(hex_string); 
1175   0ADD FA FA FF      lea d, [bp + -6] ; $len
1176   0AE0 DA            push d
1177   0AE1 FA 05 00      lea d, [bp + 5] ; $hex_string
1178   0AE4 2A            mov b, [d]
1179   0AE5 FD AB         swp b
1180   0AE7 D8            push b
1181   0AE8 07 E5 08      call strlen
1182   0AEB 51 02 00      add sp, 2
1183   0AEE E7            pop d
1184   0AEF FD 43         mov [d], b
1185   0AF1             ;; for (i = 0; i < len; i++) { 
1186   0AF1             _for20_init:
1187   0AF1 FA FD FF      lea d, [bp + -3] ; $i
1188   0AF4 DA            push d
1189   0AF5 26 00 00      mov b, $0
1190   0AF8 E7            pop d
1191   0AF9 FD 43         mov [d], b
1192   0AFB             _for20_cond:
1193   0AFB FA FD FF      lea d, [bp + -3] ; $i
1194   0AFE 2A            mov b, [d]
1195   0AFF             ; START RELATIONAL
1196   0AFF D7            push a
1197   0B00 11            mov a, b
1198   0B01 FA FA FF      lea d, [bp + -6] ; $len
1199   0B04 2A            mov b, [d]
1200   0B05 B0            cmp a, b
1201   0B06 FD 73         slt ; < 
1202   0B08 E4            pop a
1203   0B09             ; END RELATIONAL
1204   0B09 C0 00 00      cmp b, 0
1205   0B0C C6 11 0C      je _for20_exit
1206   0B0F             _for20_block:
1207   0B0F             ;; hex_char = hex_string[i]; 
1208   0B0F FA FC FF      lea d, [bp + -4] ; $hex_char
1209   0B12 DA            push d
1210   0B13 FA 05 00      lea d, [bp + 5] ; $hex_string
1211   0B16 FD 2A         mov d, [d]
1212   0B18 D7            push a
1213   0B19 DA            push d
1214   0B1A FA FD FF      lea d, [bp + -3] ; $i
1215   0B1D 2A            mov b, [d]
1216   0B1E E7            pop d
1217   0B1F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1218   0B23 E4            pop a
1219   0B24 32            mov bl, [d]
1220   0B25 A7 00         mov bh, 0
1221   0B27 E7            pop d
1222   0B28 FD 3E         mov [d], bl
1223   0B2A             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1224   0B2A             _if21_cond:
1225   0B2A FA FC FF      lea d, [bp + -4] ; $hex_char
1226   0B2D 32            mov bl, [d]
1227   0B2E A7 00         mov bh, 0
1228   0B30             ; START RELATIONAL
1229   0B30 D7            push a
1230   0B31 11            mov a, b
1231   0B32 26 61 00      mov b, $61
1232   0B35 B0            cmp a, b
1233   0B36 FD 80         sge ; >=
1234   0B38 E4            pop a
1235   0B39             ; END RELATIONAL
1236   0B39 D7            push a
1237   0B3A 11            mov a, b
1238   0B3B FA FC FF      lea d, [bp + -4] ; $hex_char
1239   0B3E 32            mov bl, [d]
1240   0B3F A7 00         mov bh, 0
1241   0B41             ; START RELATIONAL
1242   0B41 D7            push a
1243   0B42 11            mov a, b
1244   0B43 26 66 00      mov b, $66
1245   0B46 B0            cmp a, b
1246   0B47 FD 74         sle ; <=
1247   0B49 E4            pop a
1248   0B4A             ; END RELATIONAL
1249   0B4A FD A7         sand a, b ; &&
1250   0B4C E4            pop a
1251   0B4D C0 00 00      cmp b, 0
1252   0B50 C6 81 0B      je _if21_else
1253   0B53             _if21_true:
1254   0B53             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1255   0B53 FA FF FF      lea d, [bp + -1] ; $value
1256   0B56 DA            push d
1257   0B57 FA FF FF      lea d, [bp + -1] ; $value
1258   0B5A 2A            mov b, [d]
1259   0B5B             ; START FACTORS
1260   0B5B D7            push a
1261   0B5C 11            mov a, b
1262   0B5D 26 10 00      mov b, $10
1263   0B60 AC            mul a, b ; *
1264   0B61 11            mov a, b
1265   0B62 27            mov b, a
1266   0B63 E4            pop a
1267   0B64             ; END FACTORS
1268   0B64             ; START TERMS
1269   0B64 D7            push a
1270   0B65 11            mov a, b
1271   0B66 FA FC FF      lea d, [bp + -4] ; $hex_char
1272   0B69 32            mov bl, [d]
1273   0B6A A7 00         mov bh, 0
1274   0B6C             ; START TERMS
1275   0B6C D7            push a
1276   0B6D 11            mov a, b
1277   0B6E 26 61 00      mov b, $61
1278   0B71 60            sub a, b
1279   0B72 26 0A 00      mov b, $a
1280   0B75 54            add a, b
1281   0B76 27            mov b, a
1282   0B77 E4            pop a
1283   0B78             ; END TERMS
1284   0B78 54            add a, b
1285   0B79 27            mov b, a
1286   0B7A E4            pop a
1287   0B7B             ; END TERMS
1288   0B7B E7            pop d
1289   0B7C FD 43         mov [d], b
1290   0B7E 0A FF 0B      jmp _if21_exit
1291   0B81             _if21_else:
1292   0B81             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1293   0B81             _if22_cond:
1294   0B81 FA FC FF      lea d, [bp + -4] ; $hex_char
1295   0B84 32            mov bl, [d]
1296   0B85 A7 00         mov bh, 0
1297   0B87             ; START RELATIONAL
1298   0B87 D7            push a
1299   0B88 11            mov a, b
1300   0B89 26 41 00      mov b, $41
1301   0B8C B0            cmp a, b
1302   0B8D FD 80         sge ; >=
1303   0B8F E4            pop a
1304   0B90             ; END RELATIONAL
1305   0B90 D7            push a
1306   0B91 11            mov a, b
1307   0B92 FA FC FF      lea d, [bp + -4] ; $hex_char
1308   0B95 32            mov bl, [d]
1309   0B96 A7 00         mov bh, 0
1310   0B98             ; START RELATIONAL
1311   0B98 D7            push a
1312   0B99 11            mov a, b
1313   0B9A 26 46 00      mov b, $46
1314   0B9D B0            cmp a, b
1315   0B9E FD 74         sle ; <=
1316   0BA0 E4            pop a
1317   0BA1             ; END RELATIONAL
1318   0BA1 FD A7         sand a, b ; &&
1319   0BA3 E4            pop a
1320   0BA4 C0 00 00      cmp b, 0
1321   0BA7 C6 D8 0B      je _if22_else
1322   0BAA             _if22_true:
1323   0BAA             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1324   0BAA FA FF FF      lea d, [bp + -1] ; $value
1325   0BAD DA            push d
1326   0BAE FA FF FF      lea d, [bp + -1] ; $value
1327   0BB1 2A            mov b, [d]
1328   0BB2             ; START FACTORS
1329   0BB2 D7            push a
1330   0BB3 11            mov a, b
1331   0BB4 26 10 00      mov b, $10
1332   0BB7 AC            mul a, b ; *
1333   0BB8 11            mov a, b
1334   0BB9 27            mov b, a
1335   0BBA E4            pop a
1336   0BBB             ; END FACTORS
1337   0BBB             ; START TERMS
1338   0BBB D7            push a
1339   0BBC 11            mov a, b
1340   0BBD FA FC FF      lea d, [bp + -4] ; $hex_char
1341   0BC0 32            mov bl, [d]
1342   0BC1 A7 00         mov bh, 0
1343   0BC3             ; START TERMS
1344   0BC3 D7            push a
1345   0BC4 11            mov a, b
1346   0BC5 26 41 00      mov b, $41
1347   0BC8 60            sub a, b
1348   0BC9 26 0A 00      mov b, $a
1349   0BCC 54            add a, b
1350   0BCD 27            mov b, a
1351   0BCE E4            pop a
1352   0BCF             ; END TERMS
1353   0BCF 54            add a, b
1354   0BD0 27            mov b, a
1355   0BD1 E4            pop a
1356   0BD2             ; END TERMS
1357   0BD2 E7            pop d
1358   0BD3 FD 43         mov [d], b
1359   0BD5 0A FF 0B      jmp _if22_exit
1360   0BD8             _if22_else:
1361   0BD8             ;; value = (value * 16) + (hex_char - '0'); 
1362   0BD8 FA FF FF      lea d, [bp + -1] ; $value
1363   0BDB DA            push d
1364   0BDC FA FF FF      lea d, [bp + -1] ; $value
1365   0BDF 2A            mov b, [d]
1366   0BE0             ; START FACTORS
1367   0BE0 D7            push a
1368   0BE1 11            mov a, b
1369   0BE2 26 10 00      mov b, $10
1370   0BE5 AC            mul a, b ; *
1371   0BE6 11            mov a, b
1372   0BE7 27            mov b, a
1373   0BE8 E4            pop a
1374   0BE9             ; END FACTORS
1375   0BE9             ; START TERMS
1376   0BE9 D7            push a
1377   0BEA 11            mov a, b
1378   0BEB FA FC FF      lea d, [bp + -4] ; $hex_char
1379   0BEE 32            mov bl, [d]
1380   0BEF A7 00         mov bh, 0
1381   0BF1             ; START TERMS
1382   0BF1 D7            push a
1383   0BF2 11            mov a, b
1384   0BF3 26 30 00      mov b, $30
1385   0BF6 60            sub a, b
1386   0BF7 27            mov b, a
1387   0BF8 E4            pop a
1388   0BF9             ; END TERMS
1389   0BF9 54            add a, b
1390   0BFA 27            mov b, a
1391   0BFB E4            pop a
1392   0BFC             ; END TERMS
1393   0BFC E7            pop d
1394   0BFD FD 43         mov [d], b
1395   0BFF             _if22_exit:
1396   0BFF             _if21_exit:
1397   0BFF             _for20_update:
1398   0BFF FA FD FF      lea d, [bp + -3] ; $i
1399   0C02 2A            mov b, [d]
1400   0C03 FD 79         mov g, b
1401   0C05 FD 77         inc b
1402   0C07 FA FD FF      lea d, [bp + -3] ; $i
1403   0C0A FD 43         mov [d], b
1404   0C0C FD 27         mov b, g
1405   0C0E 0A FB 0A      jmp _for20_cond
1406   0C11             _for20_exit:
1407   0C11             ;; return value; 
1408   0C11 FA FF FF      lea d, [bp + -1] ; $value
1409   0C14 2A            mov b, [d]
1410   0C15 F9            leave
1411   0C16 09            ret
1412   0C17             
1413   0C17             atoi:
1414   0C17 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1415   0C1A             ; $result 
1416   0C1A 10 00 00      mov a, $0
1417   0C1D 45 FF FF      mov [bp + -1], a
1418   0C20             ; $sign 
1419   0C20 10 01 00      mov a, $1
1420   0C23 45 FD FF      mov [bp + -3], a
1421   0C26 52 04 00      sub sp, 4
1422   0C29             ;; while (*str == ' ') str++; 
1423   0C29             _while23_cond:
1424   0C29 FA 05 00      lea d, [bp + 5] ; $str
1425   0C2C 2A            mov b, [d]
1426   0C2D 74            mov d, b
1427   0C2E 32            mov bl, [d]
1428   0C2F A7 00         mov bh, 0
1429   0C31             ; START RELATIONAL
1430   0C31 D7            push a
1431   0C32 11            mov a, b
1432   0C33 26 20 00      mov b, $20
1433   0C36 B0            cmp a, b
1434   0C37 FD 71         seq ; ==
1435   0C39 E4            pop a
1436   0C3A             ; END RELATIONAL
1437   0C3A C0 00 00      cmp b, 0
1438   0C3D C6 52 0C      je _while23_exit
1439   0C40             _while23_block:
1440   0C40             ;; str++; 
1441   0C40 FA 05 00      lea d, [bp + 5] ; $str
1442   0C43 2A            mov b, [d]
1443   0C44 FD 79         mov g, b
1444   0C46 FD 77         inc b
1445   0C48 FA 05 00      lea d, [bp + 5] ; $str
1446   0C4B FD 43         mov [d], b
1447   0C4D FD 27         mov b, g
1448   0C4F 0A 29 0C      jmp _while23_cond
1449   0C52             _while23_exit:
1450   0C52             ;; if (*str == '-' || *str == '+') { 
1451   0C52             _if24_cond:
1452   0C52 FA 05 00      lea d, [bp + 5] ; $str
1453   0C55 2A            mov b, [d]
1454   0C56 74            mov d, b
1455   0C57 32            mov bl, [d]
1456   0C58 A7 00         mov bh, 0
1457   0C5A             ; START RELATIONAL
1458   0C5A D7            push a
1459   0C5B 11            mov a, b
1460   0C5C 26 2D 00      mov b, $2d
1461   0C5F B0            cmp a, b
1462   0C60 FD 71         seq ; ==
1463   0C62 E4            pop a
1464   0C63             ; END RELATIONAL
1465   0C63 D7            push a
1466   0C64 11            mov a, b
1467   0C65 FA 05 00      lea d, [bp + 5] ; $str
1468   0C68 2A            mov b, [d]
1469   0C69 74            mov d, b
1470   0C6A 32            mov bl, [d]
1471   0C6B A7 00         mov bh, 0
1472   0C6D             ; START RELATIONAL
1473   0C6D D7            push a
1474   0C6E 11            mov a, b
1475   0C6F 26 2B 00      mov b, $2b
1476   0C72 B0            cmp a, b
1477   0C73 FD 71         seq ; ==
1478   0C75 E4            pop a
1479   0C76             ; END RELATIONAL
1480   0C76 FD A8         sor a, b ; ||
1481   0C78 E4            pop a
1482   0C79 C0 00 00      cmp b, 0
1483   0C7C C6 B7 0C      je _if24_exit
1484   0C7F             _if24_true:
1485   0C7F             ;; if (*str == '-') sign = -1; 
1486   0C7F             _if25_cond:
1487   0C7F FA 05 00      lea d, [bp + 5] ; $str
1488   0C82 2A            mov b, [d]
1489   0C83 74            mov d, b
1490   0C84 32            mov bl, [d]
1491   0C85 A7 00         mov bh, 0
1492   0C87             ; START RELATIONAL
1493   0C87 D7            push a
1494   0C88 11            mov a, b
1495   0C89 26 2D 00      mov b, $2d
1496   0C8C B0            cmp a, b
1497   0C8D FD 71         seq ; ==
1498   0C8F E4            pop a
1499   0C90             ; END RELATIONAL
1500   0C90 C0 00 00      cmp b, 0
1501   0C93 C6 A5 0C      je _if25_exit
1502   0C96             _if25_true:
1503   0C96             ;; sign = -1; 
1504   0C96 FA FD FF      lea d, [bp + -3] ; $sign
1505   0C99 DA            push d
1506   0C9A 26 01 00      mov b, $1
1507   0C9D FD 97         neg b
1508   0C9F E7            pop d
1509   0CA0 FD 43         mov [d], b
1510   0CA2 0A A5 0C      jmp _if25_exit
1511   0CA5             _if25_exit:
1512   0CA5             ;; str++; 
1513   0CA5 FA 05 00      lea d, [bp + 5] ; $str
1514   0CA8 2A            mov b, [d]
1515   0CA9 FD 79         mov g, b
1516   0CAB FD 77         inc b
1517   0CAD FA 05 00      lea d, [bp + 5] ; $str
1518   0CB0 FD 43         mov [d], b
1519   0CB2 FD 27         mov b, g
1520   0CB4 0A B7 0C      jmp _if24_exit
1521   0CB7             _if24_exit:
1522   0CB7             ;; while (*str >= '0' && *str <= '9') { 
1523   0CB7             _while26_cond:
1524   0CB7 FA 05 00      lea d, [bp + 5] ; $str
1525   0CBA 2A            mov b, [d]
1526   0CBB 74            mov d, b
1527   0CBC 32            mov bl, [d]
1528   0CBD A7 00         mov bh, 0
1529   0CBF             ; START RELATIONAL
1530   0CBF D7            push a
1531   0CC0 11            mov a, b
1532   0CC1 26 30 00      mov b, $30
1533   0CC4 B0            cmp a, b
1534   0CC5 FD 80         sge ; >=
1535   0CC7 E4            pop a
1536   0CC8             ; END RELATIONAL
1537   0CC8 D7            push a
1538   0CC9 11            mov a, b
1539   0CCA FA 05 00      lea d, [bp + 5] ; $str
1540   0CCD 2A            mov b, [d]
1541   0CCE 74            mov d, b
1542   0CCF 32            mov bl, [d]
1543   0CD0 A7 00         mov bh, 0
1544   0CD2             ; START RELATIONAL
1545   0CD2 D7            push a
1546   0CD3 11            mov a, b
1547   0CD4 26 39 00      mov b, $39
1548   0CD7 B0            cmp a, b
1549   0CD8 FD 74         sle ; <=
1550   0CDA E4            pop a
1551   0CDB             ; END RELATIONAL
1552   0CDB FD A7         sand a, b ; &&
1553   0CDD E4            pop a
1554   0CDE C0 00 00      cmp b, 0
1555   0CE1 C6 1F 0D      je _while26_exit
1556   0CE4             _while26_block:
1557   0CE4             ;; result = result * 10 + (*str - '0'); 
1558   0CE4 FA FF FF      lea d, [bp + -1] ; $result
1559   0CE7 DA            push d
1560   0CE8 FA FF FF      lea d, [bp + -1] ; $result
1561   0CEB 2A            mov b, [d]
1562   0CEC             ; START FACTORS
1563   0CEC D7            push a
1564   0CED 11            mov a, b
1565   0CEE 26 0A 00      mov b, $a
1566   0CF1 AC            mul a, b ; *
1567   0CF2 11            mov a, b
1568   0CF3 27            mov b, a
1569   0CF4 E4            pop a
1570   0CF5             ; END FACTORS
1571   0CF5             ; START TERMS
1572   0CF5 D7            push a
1573   0CF6 11            mov a, b
1574   0CF7 FA 05 00      lea d, [bp + 5] ; $str
1575   0CFA 2A            mov b, [d]
1576   0CFB 74            mov d, b
1577   0CFC 32            mov bl, [d]
1578   0CFD A7 00         mov bh, 0
1579   0CFF             ; START TERMS
1580   0CFF D7            push a
1581   0D00 11            mov a, b
1582   0D01 26 30 00      mov b, $30
1583   0D04 60            sub a, b
1584   0D05 27            mov b, a
1585   0D06 E4            pop a
1586   0D07             ; END TERMS
1587   0D07 54            add a, b
1588   0D08 27            mov b, a
1589   0D09 E4            pop a
1590   0D0A             ; END TERMS
1591   0D0A E7            pop d
1592   0D0B FD 43         mov [d], b
1593   0D0D             ;; str++; 
1594   0D0D FA 05 00      lea d, [bp + 5] ; $str
1595   0D10 2A            mov b, [d]
1596   0D11 FD 79         mov g, b
1597   0D13 FD 77         inc b
1598   0D15 FA 05 00      lea d, [bp + 5] ; $str
1599   0D18 FD 43         mov [d], b
1600   0D1A FD 27         mov b, g
1601   0D1C 0A B7 0C      jmp _while26_cond
1602   0D1F             _while26_exit:
1603   0D1F             ;; return sign * result; 
1604   0D1F FA FD FF      lea d, [bp + -3] ; $sign
1605   0D22 2A            mov b, [d]
1606   0D23             ; START FACTORS
1607   0D23 D7            push a
1608   0D24 11            mov a, b
1609   0D25 FA FF FF      lea d, [bp + -1] ; $result
1610   0D28 2A            mov b, [d]
1611   0D29 AC            mul a, b ; *
1612   0D2A 11            mov a, b
1613   0D2B 27            mov b, a
1614   0D2C E4            pop a
1615   0D2D             ; END FACTORS
1616   0D2D F9            leave
1617   0D2E 09            ret
1618   0D2F             
1619   0D2F             gets:
1620   0D2F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1621   0D32             
1622   0D32             ; --- BEGIN INLINE ASM BLOCK
1623   0D32 FA 05 00      lea d, [bp + 5] ; $s
1624   0D35 15            mov a, [d]
1625   0D36 3C            mov d, a
1626   0D37 07 AE 11      call _gets
1627   0D3A             ; --- END INLINE ASM BLOCK
1628   0D3A             
1629   0D3A             ;; return strlen(s); 
1630   0D3A FA 05 00      lea d, [bp + 5] ; $s
1631   0D3D 2A            mov b, [d]
1632   0D3E FD AB         swp b
1633   0D40 D8            push b
1634   0D41 07 E5 08      call strlen
1635   0D44 51 02 00      add sp, 2
1636   0D47 F9            leave
1637   0D48 09            ret
1638   0D49             
1639   0D49             prints:
1640   0D49 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1641   0D4C             ; $digits 
1642   0D4C             ; $i 
1643   0D4C 10 00 00      mov a, $0
1644   0D4F 45 FA FF      mov [bp + -6], a
1645   0D52 52 07 00      sub sp, 7
1646   0D55             ;; if (num < 0) { 
1647   0D55             _if27_cond:
1648   0D55 FA 05 00      lea d, [bp + 5] ; $num
1649   0D58 2A            mov b, [d]
1650   0D59             ; START RELATIONAL
1651   0D59 D7            push a
1652   0D5A 11            mov a, b
1653   0D5B 26 00 00      mov b, $0
1654   0D5E B0            cmp a, b
1655   0D5F FD 73         slt ; < 
1656   0D61 E4            pop a
1657   0D62             ; END RELATIONAL
1658   0D62 C0 00 00      cmp b, 0
1659   0D65 C6 82 0D      je _if27_else
1660   0D68             _if27_true:
1661   0D68             ;; putchar('-'); 
1662   0D68 26 2D 00      mov b, $2d
1663   0D6B DD            push bl
1664   0D6C 07 2A 0F      call putchar
1665   0D6F 51 01 00      add sp, 1
1666   0D72             ;; num = -num; 
1667   0D72 FA 05 00      lea d, [bp + 5] ; $num
1668   0D75 DA            push d
1669   0D76 FA 05 00      lea d, [bp + 5] ; $num
1670   0D79 2A            mov b, [d]
1671   0D7A FD 97         neg b
1672   0D7C E7            pop d
1673   0D7D FD 43         mov [d], b
1674   0D7F 0A A4 0D      jmp _if27_exit
1675   0D82             _if27_else:
1676   0D82             ;; if (num == 0) { 
1677   0D82             _if28_cond:
1678   0D82 FA 05 00      lea d, [bp + 5] ; $num
1679   0D85 2A            mov b, [d]
1680   0D86             ; START RELATIONAL
1681   0D86 D7            push a
1682   0D87 11            mov a, b
1683   0D88 26 00 00      mov b, $0
1684   0D8B B0            cmp a, b
1685   0D8C FD 71         seq ; ==
1686   0D8E E4            pop a
1687   0D8F             ; END RELATIONAL
1688   0D8F C0 00 00      cmp b, 0
1689   0D92 C6 A4 0D      je _if28_exit
1690   0D95             _if28_true:
1691   0D95             ;; putchar('0'); 
1692   0D95 26 30 00      mov b, $30
1693   0D98 DD            push bl
1694   0D99 07 2A 0F      call putchar
1695   0D9C 51 01 00      add sp, 1
1696   0D9F             ;; return; 
1697   0D9F F9            leave
1698   0DA0 09            ret
1699   0DA1 0A A4 0D      jmp _if28_exit
1700   0DA4             _if28_exit:
1701   0DA4             _if27_exit:
1702   0DA4             ;; while (num > 0) { 
1703   0DA4             _while29_cond:
1704   0DA4 FA 05 00      lea d, [bp + 5] ; $num
1705   0DA7 2A            mov b, [d]
1706   0DA8             ; START RELATIONAL
1707   0DA8 D7            push a
1708   0DA9 11            mov a, b
1709   0DAA 26 00 00      mov b, $0
1710   0DAD B0            cmp a, b
1711   0DAE FD 7F         sgt ; >
1712   0DB0 E4            pop a
1713   0DB1             ; END RELATIONAL
1714   0DB1 C0 00 00      cmp b, 0
1715   0DB4 C6 01 0E      je _while29_exit
1716   0DB7             _while29_block:
1717   0DB7             ;; digits[i] = '0' + (num % 10); 
1718   0DB7 FA FC FF      lea d, [bp + -4] ; $digits
1719   0DBA D7            push a
1720   0DBB DA            push d
1721   0DBC FA FA FF      lea d, [bp + -6] ; $i
1722   0DBF 2A            mov b, [d]
1723   0DC0 E7            pop d
1724   0DC1 5A            add d, b
1725   0DC2 E4            pop a
1726   0DC3 DA            push d
1727   0DC4 26 30 00      mov b, $30
1728   0DC7             ; START TERMS
1729   0DC7 D7            push a
1730   0DC8 11            mov a, b
1731   0DC9 FA 05 00      lea d, [bp + 5] ; $num
1732   0DCC 2A            mov b, [d]
1733   0DCD             ; START FACTORS
1734   0DCD D7            push a
1735   0DCE 11            mov a, b
1736   0DCF 26 0A 00      mov b, $a
1737   0DD2 AE            div a, b ; 
1738   0DD3 11            mov a, b
1739   0DD4 27            mov b, a
1740   0DD5 E4            pop a
1741   0DD6             ; END FACTORS
1742   0DD6 54            add a, b
1743   0DD7 27            mov b, a
1744   0DD8 E4            pop a
1745   0DD9             ; END TERMS
1746   0DD9 E7            pop d
1747   0DDA FD 3E         mov [d], bl
1748   0DDC             ;; num = num / 10; 
1749   0DDC FA 05 00      lea d, [bp + 5] ; $num
1750   0DDF DA            push d
1751   0DE0 FA 05 00      lea d, [bp + 5] ; $num
1752   0DE3 2A            mov b, [d]
1753   0DE4             ; START FACTORS
1754   0DE4 D7            push a
1755   0DE5 11            mov a, b
1756   0DE6 26 0A 00      mov b, $a
1757   0DE9 AE            div a, b
1758   0DEA 27            mov b, a
1759   0DEB E4            pop a
1760   0DEC             ; END FACTORS
1761   0DEC E7            pop d
1762   0DED FD 43         mov [d], b
1763   0DEF             ;; i++; 
1764   0DEF FA FA FF      lea d, [bp + -6] ; $i
1765   0DF2 2A            mov b, [d]
1766   0DF3 FD 79         mov g, b
1767   0DF5 FD 77         inc b
1768   0DF7 FA FA FF      lea d, [bp + -6] ; $i
1769   0DFA FD 43         mov [d], b
1770   0DFC FD 27         mov b, g
1771   0DFE 0A A4 0D      jmp _while29_cond
1772   0E01             _while29_exit:
1773   0E01             ;; while (i > 0) { 
1774   0E01             _while30_cond:
1775   0E01 FA FA FF      lea d, [bp + -6] ; $i
1776   0E04 2A            mov b, [d]
1777   0E05             ; START RELATIONAL
1778   0E05 D7            push a
1779   0E06 11            mov a, b
1780   0E07 26 00 00      mov b, $0
1781   0E0A B0            cmp a, b
1782   0E0B FD 7F         sgt ; >
1783   0E0D E4            pop a
1784   0E0E             ; END RELATIONAL
1785   0E0E C0 00 00      cmp b, 0
1786   0E11 C6 3C 0E      je _while30_exit
1787   0E14             _while30_block:
1788   0E14             ;; i--; 
1789   0E14 FA FA FF      lea d, [bp + -6] ; $i
1790   0E17 2A            mov b, [d]
1791   0E18 FD 79         mov g, b
1792   0E1A FD 7D         dec b
1793   0E1C FA FA FF      lea d, [bp + -6] ; $i
1794   0E1F FD 43         mov [d], b
1795   0E21 FD 27         mov b, g
1796   0E23             ;; putchar(digits[i]); 
1797   0E23 FA FC FF      lea d, [bp + -4] ; $digits
1798   0E26 D7            push a
1799   0E27 DA            push d
1800   0E28 FA FA FF      lea d, [bp + -6] ; $i
1801   0E2B 2A            mov b, [d]
1802   0E2C E7            pop d
1803   0E2D 5A            add d, b
1804   0E2E E4            pop a
1805   0E2F 32            mov bl, [d]
1806   0E30 A7 00         mov bh, 0
1807   0E32 DD            push bl
1808   0E33 07 2A 0F      call putchar
1809   0E36 51 01 00      add sp, 1
1810   0E39 0A 01 0E      jmp _while30_cond
1811   0E3C             _while30_exit:
1812   0E3C F9            leave
1813   0E3D 09            ret
1814   0E3E             
1815   0E3E             printu:
1816   0E3E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1817   0E41             ; $digits 
1818   0E41             ; $i 
1819   0E41 52 07 00      sub sp, 7
1820   0E44             ;; i = 0; 
1821   0E44 FA FA FF      lea d, [bp + -6] ; $i
1822   0E47 DA            push d
1823   0E48 26 00 00      mov b, $0
1824   0E4B E7            pop d
1825   0E4C FD 43         mov [d], b
1826   0E4E             ;; if(num == 0){ 
1827   0E4E             _if31_cond:
1828   0E4E FA 05 00      lea d, [bp + 5] ; $num
1829   0E51 2A            mov b, [d]
1830   0E52             ; START RELATIONAL
1831   0E52 D7            push a
1832   0E53 11            mov a, b
1833   0E54 26 00 00      mov b, $0
1834   0E57 B0            cmp a, b
1835   0E58 FD 71         seq ; ==
1836   0E5A E4            pop a
1837   0E5B             ; END RELATIONAL
1838   0E5B C0 00 00      cmp b, 0
1839   0E5E C6 70 0E      je _if31_exit
1840   0E61             _if31_true:
1841   0E61             ;; putchar('0'); 
1842   0E61 26 30 00      mov b, $30
1843   0E64 DD            push bl
1844   0E65 07 2A 0F      call putchar
1845   0E68 51 01 00      add sp, 1
1846   0E6B             ;; return; 
1847   0E6B F9            leave
1848   0E6C 09            ret
1849   0E6D 0A 70 0E      jmp _if31_exit
1850   0E70             _if31_exit:
1851   0E70             ;; while (num > 0) { 
1852   0E70             _while32_cond:
1853   0E70 FA 05 00      lea d, [bp + 5] ; $num
1854   0E73 2A            mov b, [d]
1855   0E74             ; START RELATIONAL
1856   0E74 D7            push a
1857   0E75 11            mov a, b
1858   0E76 26 00 00      mov b, $0
1859   0E79 B0            cmp a, b
1860   0E7A FD 81         sgu ; > (unsigned)
1861   0E7C E4            pop a
1862   0E7D             ; END RELATIONAL
1863   0E7D C0 00 00      cmp b, 0
1864   0E80 C6 CD 0E      je _while32_exit
1865   0E83             _while32_block:
1866   0E83             ;; digits[i] = '0' + (num % 10); 
1867   0E83 FA FC FF      lea d, [bp + -4] ; $digits
1868   0E86 D7            push a
1869   0E87 DA            push d
1870   0E88 FA FA FF      lea d, [bp + -6] ; $i
1871   0E8B 2A            mov b, [d]
1872   0E8C E7            pop d
1873   0E8D 5A            add d, b
1874   0E8E E4            pop a
1875   0E8F DA            push d
1876   0E90 26 30 00      mov b, $30
1877   0E93             ; START TERMS
1878   0E93 D7            push a
1879   0E94 11            mov a, b
1880   0E95 FA 05 00      lea d, [bp + 5] ; $num
1881   0E98 2A            mov b, [d]
1882   0E99             ; START FACTORS
1883   0E99 D7            push a
1884   0E9A 11            mov a, b
1885   0E9B 26 0A 00      mov b, $a
1886   0E9E AE            div a, b ; 
1887   0E9F 11            mov a, b
1888   0EA0 27            mov b, a
1889   0EA1 E4            pop a
1890   0EA2             ; END FACTORS
1891   0EA2 54            add a, b
1892   0EA3 27            mov b, a
1893   0EA4 E4            pop a
1894   0EA5             ; END TERMS
1895   0EA5 E7            pop d
1896   0EA6 FD 3E         mov [d], bl
1897   0EA8             ;; num = num / 10; 
1898   0EA8 FA 05 00      lea d, [bp + 5] ; $num
1899   0EAB DA            push d
1900   0EAC FA 05 00      lea d, [bp + 5] ; $num
1901   0EAF 2A            mov b, [d]
1902   0EB0             ; START FACTORS
1903   0EB0 D7            push a
1904   0EB1 11            mov a, b
1905   0EB2 26 0A 00      mov b, $a
1906   0EB5 AE            div a, b
1907   0EB6 27            mov b, a
1908   0EB7 E4            pop a
1909   0EB8             ; END FACTORS
1910   0EB8 E7            pop d
1911   0EB9 FD 43         mov [d], b
1912   0EBB             ;; i++; 
1913   0EBB FA FA FF      lea d, [bp + -6] ; $i
1914   0EBE 2A            mov b, [d]
1915   0EBF FD 79         mov g, b
1916   0EC1 FD 77         inc b
1917   0EC3 FA FA FF      lea d, [bp + -6] ; $i
1918   0EC6 FD 43         mov [d], b
1919   0EC8 FD 27         mov b, g
1920   0ECA 0A 70 0E      jmp _while32_cond
1921   0ECD             _while32_exit:
1922   0ECD             ;; while (i > 0) { 
1923   0ECD             _while33_cond:
1924   0ECD FA FA FF      lea d, [bp + -6] ; $i
1925   0ED0 2A            mov b, [d]
1926   0ED1             ; START RELATIONAL
1927   0ED1 D7            push a
1928   0ED2 11            mov a, b
1929   0ED3 26 00 00      mov b, $0
1930   0ED6 B0            cmp a, b
1931   0ED7 FD 7F         sgt ; >
1932   0ED9 E4            pop a
1933   0EDA             ; END RELATIONAL
1934   0EDA C0 00 00      cmp b, 0
1935   0EDD C6 08 0F      je _while33_exit
1936   0EE0             _while33_block:
1937   0EE0             ;; i--; 
1938   0EE0 FA FA FF      lea d, [bp + -6] ; $i
1939   0EE3 2A            mov b, [d]
1940   0EE4 FD 79         mov g, b
1941   0EE6 FD 7D         dec b
1942   0EE8 FA FA FF      lea d, [bp + -6] ; $i
1943   0EEB FD 43         mov [d], b
1944   0EED FD 27         mov b, g
1945   0EEF             ;; putchar(digits[i]); 
1946   0EEF FA FC FF      lea d, [bp + -4] ; $digits
1947   0EF2 D7            push a
1948   0EF3 DA            push d
1949   0EF4 FA FA FF      lea d, [bp + -6] ; $i
1950   0EF7 2A            mov b, [d]
1951   0EF8 E7            pop d
1952   0EF9 5A            add d, b
1953   0EFA E4            pop a
1954   0EFB 32            mov bl, [d]
1955   0EFC A7 00         mov bh, 0
1956   0EFE DD            push bl
1957   0EFF 07 2A 0F      call putchar
1958   0F02 51 01 00      add sp, 1
1959   0F05 0A CD 0E      jmp _while33_cond
1960   0F08             _while33_exit:
1961   0F08 F9            leave
1962   0F09 09            ret
1963   0F0A             
1964   0F0A             rand:
1965   0F0A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1966   0F0D             ; $sec 
1967   0F0D 52 01 00      sub sp, 1
1968   0F10             
1969   0F10             ; --- BEGIN INLINE ASM BLOCK
1970   0F10 19 00         mov al, 0
1971   0F12 05 01         syscall sys_rtc					
1972   0F14 1A            mov al, ah
1973   0F15 FA 00 00      lea d, [bp + 0] ; $sec
1974   0F18 1E            mov al, [d]
1975   0F19             ; --- END INLINE ASM BLOCK
1976   0F19             
1977   0F19             ;; return sec; 
1978   0F19 FA 00 00      lea d, [bp + 0] ; $sec
1979   0F1C 32            mov bl, [d]
1980   0F1D A7 00         mov bh, 0
1981   0F1F F9            leave
1982   0F20 09            ret
1983   0F21             
1984   0F21             date:
1985   0F21 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1986   0F24             
1987   0F24             ; --- BEGIN INLINE ASM BLOCK
1988   0F24 19 00         mov al, 0 
1989   0F26 05 07         syscall sys_datetime
1990   0F28             ; --- END INLINE ASM BLOCK
1991   0F28             
1992   0F28 F9            leave
1993   0F29 09            ret
1994   0F2A             
1995   0F2A             putchar:
1996   0F2A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1997   0F2D             
1998   0F2D             ; --- BEGIN INLINE ASM BLOCK
1999   0F2D FA 05 00      lea d, [bp + 5] ; $c
2000   0F30 1E            mov al, [d]
2001   0F31 23            mov ah, al
2002   0F32 07 A7 11      call _putchar
2003   0F35             ; --- END INLINE ASM BLOCK
2004   0F35             
2005   0F35 F9            leave
2006   0F36 09            ret
2007   0F37             
2008   0F37             getchar:
2009   0F37 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2010   0F3A             ; $c 
2011   0F3A 52 01 00      sub sp, 1
2012   0F3D             
2013   0F3D             ; --- BEGIN INLINE ASM BLOCK
2014   0F3D 07 A0 11      call getch
2015   0F40 1A            mov al, ah
2016   0F41 FA 00 00      lea d, [bp + 0] ; $c
2017   0F44 3E            mov [d], al
2018   0F45             ; --- END INLINE ASM BLOCK
2019   0F45             
2020   0F45             ;; return c; 
2021   0F45 FA 00 00      lea d, [bp + 0] ; $c
2022   0F48 32            mov bl, [d]
2023   0F49 A7 00         mov bh, 0
2024   0F4B F9            leave
2025   0F4C 09            ret
2026   0F4D             
2027   0F4D             scann:
2028   0F4D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2029   0F50             ; $m 
2030   0F50 52 02 00      sub sp, 2
2031   0F53             
2032   0F53             ; --- BEGIN INLINE ASM BLOCK
2033   0F53 07 EB 13      call scan_u16d
2034   0F56 FA FF FF      lea d, [bp + -1] ; $m
2035   0F59 43            mov [d], a
2036   0F5A             ; --- END INLINE ASM BLOCK
2037   0F5A             
2038   0F5A             ;; return m; 
2039   0F5A FA FF FF      lea d, [bp + -1] ; $m
2040   0F5D 2A            mov b, [d]
2041   0F5E F9            leave
2042   0F5F 09            ret
2043   0F60             
2044   0F60             puts:
2045   0F60 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2046   0F63             
2047   0F63             ; --- BEGIN INLINE ASM BLOCK
2048   0F63 FA 05 00      lea d, [bp + 5] ; $s
2049   0F66 15            mov a, [d]
2050   0F67 3C            mov d, a
2051   0F68 07 F1 12      call _puts
2052   0F6B 10 00 0A      mov a, $0A00
2053   0F6E 05 03         syscall sys_io
2054   0F70             ; --- END INLINE ASM BLOCK
2055   0F70             
2056   0F70 F9            leave
2057   0F71 09            ret
2058   0F72             
2059   0F72             print:
2060   0F72 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2061   0F75             
2062   0F75             ; --- BEGIN INLINE ASM BLOCK
2063   0F75 FA 05 00      lea d, [bp + 5] ; $s
2064   0F78 FD 2A         mov d, [d]
2065   0F7A 07 F1 12      call _puts
2066   0F7D             ; --- END INLINE ASM BLOCK
2067   0F7D             
2068   0F7D F9            leave
2069   0F7E 09            ret
2070   0F7F             
2071   0F7F             loadfile:
2072   0F7F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2073   0F82             
2074   0F82             ; --- BEGIN INLINE ASM BLOCK
2075   0F82 FA 07 00      lea d, [bp + 7] ; $destination
2076   0F85 15            mov a, [d]
2077   0F86 4F            mov di, a
2078   0F87 FA 05 00      lea d, [bp + 5] ; $filename
2079   0F8A FD 2A         mov d, [d]
2080   0F8C 19 14         mov al, 20
2081   0F8E 05 04         syscall sys_filesystem
2082   0F90             ; --- END INLINE ASM BLOCK
2083   0F90             
2084   0F90 F9            leave
2085   0F91 09            ret
2086   0F92             
2087   0F92             create_file:
2088   0F92 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2089   0F95 F9            leave
2090   0F96 09            ret
2091   0F97             
2092   0F97             delete_file:
2093   0F97 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2094   0F9A             
2095   0F9A             ; --- BEGIN INLINE ASM BLOCK
2096   0F9A FA 05 00      lea d, [bp + 5] ; $filename
2097   0F9D 19 0A         mov al, 10
2098   0F9F 05 04         syscall sys_filesystem
2099   0FA1             ; --- END INLINE ASM BLOCK
2100   0FA1             
2101   0FA1 F9            leave
2102   0FA2 09            ret
2103   0FA3             
2104   0FA3             fopen:
2105   0FA3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2106   0FA6 F9            leave
2107   0FA7 09            ret
2108   0FA8             
2109   0FA8             fclose:
2110   0FA8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2111   0FAB F9            leave
2112   0FAC 09            ret
2113   0FAD             
2114   0FAD             alloc:
2115   0FAD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2116   0FB0             ;; heap_top = heap_top + bytes; 
2117   0FB0 3B BF 15      mov d, _heap_top ; $heap_top
2118   0FB3 DA            push d
2119   0FB4 3B BF 15      mov d, _heap_top ; $heap_top
2120   0FB7 2A            mov b, [d]
2121   0FB8             ; START TERMS
2122   0FB8 D7            push a
2123   0FB9 11            mov a, b
2124   0FBA FA 05 00      lea d, [bp + 5] ; $bytes
2125   0FBD 2A            mov b, [d]
2126   0FBE 54            add a, b
2127   0FBF 27            mov b, a
2128   0FC0 E4            pop a
2129   0FC1             ; END TERMS
2130   0FC1 E7            pop d
2131   0FC2 FD 43         mov [d], b
2132   0FC4             ;; return heap_top - bytes; 
2133   0FC4 3B BF 15      mov d, _heap_top ; $heap_top
2134   0FC7 2A            mov b, [d]
2135   0FC8             ; START TERMS
2136   0FC8 D7            push a
2137   0FC9 11            mov a, b
2138   0FCA FA 05 00      lea d, [bp + 5] ; $bytes
2139   0FCD 2A            mov b, [d]
2140   0FCE 60            sub a, b
2141   0FCF 27            mov b, a
2142   0FD0 E4            pop a
2143   0FD1             ; END TERMS
2144   0FD1 F9            leave
2145   0FD2 09            ret
2146   0FD3             
2147   0FD3             free:
2148   0FD3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2149   0FD6             ;; return heap_top = heap_top - bytes; 
2150   0FD6 3B BF 15      mov d, _heap_top ; $heap_top
2151   0FD9 DA            push d
2152   0FDA 3B BF 15      mov d, _heap_top ; $heap_top
2153   0FDD 2A            mov b, [d]
2154   0FDE             ; START TERMS
2155   0FDE D7            push a
2156   0FDF 11            mov a, b
2157   0FE0 FA 05 00      lea d, [bp + 5] ; $bytes
2158   0FE3 2A            mov b, [d]
2159   0FE4 60            sub a, b
2160   0FE5 27            mov b, a
2161   0FE6 E4            pop a
2162   0FE7             ; END TERMS
2163   0FE7 E7            pop d
2164   0FE8 FD 43         mov [d], b
2165   0FEA F9            leave
2166   0FEB 09            ret
2167   0FEC             
2168   0FEC             exit:
2169   0FEC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2170   0FEF             
2171   0FEF             ; --- BEGIN INLINE ASM BLOCK
2172   0FEF 05 0B         syscall sys_terminate_proc
2173   0FF1             ; --- END INLINE ASM BLOCK
2174   0FF1             
2175   0FF1 F9            leave
2176   0FF2 09            ret
2177   0FF3             
2178   0FF3             load_hex:
2179   0FF3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2180   0FF6             ; $temp 
2181   0FF6 52 02 00      sub sp, 2
2182   0FF9             ;; temp = alloc(32768); 
2183   0FF9 FA FF FF      lea d, [bp + -1] ; $temp
2184   0FFC DA            push d
2185   0FFD 26 00 80      mov b, $8000
2186   1000 FD AB         swp b
2187   1002 D8            push b
2188   1003 07 AD 0F      call alloc
2189   1006 51 02 00      add sp, 2
2190   1009 E7            pop d
2191   100A FD 43         mov [d], b
2192   100C             
2193   100C             ; --- BEGIN INLINE ASM BLOCK
2194   100C               
2195   100C               
2196   100C               
2197   100C               
2198   100C               
2199   100C             _load_hex:
2200   100C D7            push a
2201   100D D8            push b
2202   100E DA            push d
2203   100F E2            push si
2204   1010 E3            push di
2205   1011 52 00 80      sub sp, $8000      
2206   1014 38 00 00      mov c, 0
2207   1017 48            mov a, sp
2208   1018 77            inc a
2209   1019 3C            mov d, a          
2210   101A 07 AE 11      call _gets        
2211   101D 4D            mov si, a
2212   101E             __load_hex_loop:
2213   101E F6            lodsb             
2214   101F B9 00         cmp al, 0         
2215   1021 C6 2F 10      jz __load_hex_ret
2216   1024 36            mov bh, al
2217   1025 F6            lodsb
2218   1026 2F            mov bl, al
2219   1027 07 64 11      call _atoi        
2220   102A F7            stosb             
2221   102B 78            inc c
2222   102C 0A 1E 10      jmp __load_hex_loop
2223   102F             __load_hex_ret:
2224   102F 51 00 80      add sp, $8000
2225   1032 F0            pop di
2226   1033 EF            pop si
2227   1034 E7            pop d
2228   1035 E5            pop b
2229   1036 E4            pop a
2230   1037             ; --- END INLINE ASM BLOCK
2231   1037             
2232   1037 F9            leave
2233   1038 09            ret
2234   1039             
2235   1039             getparam:
2236   1039 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2237   103C             ; $data 
2238   103C 52 01 00      sub sp, 1
2239   103F             
2240   103F             ; --- BEGIN INLINE ASM BLOCK
2241   103F 19 04         mov al, 4
2242   1041 FA 05 00      lea d, [bp + 5] ; $address
2243   1044 FD 2A         mov d, [d]
2244   1046 05 0C         syscall sys_system
2245   1048 FA 00 00      lea d, [bp + 0] ; $data
2246   104B FD 3E         mov [d], bl
2247   104D             ; --- END INLINE ASM BLOCK
2248   104D             
2249   104D             ;; return data; 
2250   104D FA 00 00      lea d, [bp + 0] ; $data
2251   1050 32            mov bl, [d]
2252   1051 A7 00         mov bh, 0
2253   1053 F9            leave
2254   1054 09            ret
2255   1055             
2256   1055             clear:
2257   1055 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2258   1058             ;; print("\033[2J\033[H"); 
2259   1058 26 AA 15      mov b, __s12 ; "\033[2J\033[H"
2260   105B FD AB         swp b
2261   105D D8            push b
2262   105E 07 72 0F      call print
2263   1061 51 02 00      add sp, 2
2264   1064 F9            leave
2265   1065 09            ret
2266   1066             
2267   1066             printun:
2268   1066 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2269   1069             ;; print(prompt); 
2270   1069 FA 05 00      lea d, [bp + 5] ; $prompt
2271   106C 2A            mov b, [d]
2272   106D FD AB         swp b
2273   106F D8            push b
2274   1070 07 72 0F      call print
2275   1073 51 02 00      add sp, 2
2276   1076             ;; printu(n); 
2277   1076 FA 07 00      lea d, [bp + 7] ; $n
2278   1079 2A            mov b, [d]
2279   107A FD AB         swp b
2280   107C D8            push b
2281   107D 07 3E 0E      call printu
2282   1080 51 02 00      add sp, 2
2283   1083             ;; print("\n"); 
2284   1083 26 B2 15      mov b, __s13 ; "\n"
2285   1086 FD AB         swp b
2286   1088 D8            push b
2287   1089 07 72 0F      call print
2288   108C 51 02 00      add sp, 2
2289   108F F9            leave
2290   1090 09            ret
2291   1091             
2292   1091             printsn:
2293   1091 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2294   1094             ;; print(prompt); 
2295   1094 FA 05 00      lea d, [bp + 5] ; $prompt
2296   1097 2A            mov b, [d]
2297   1098 FD AB         swp b
2298   109A D8            push b
2299   109B 07 72 0F      call print
2300   109E 51 02 00      add sp, 2
2301   10A1             ;; prints(n); 
2302   10A1 FA 07 00      lea d, [bp + 7] ; $n
2303   10A4 2A            mov b, [d]
2304   10A5 FD AB         swp b
2305   10A7 D8            push b
2306   10A8 07 49 0D      call prints
2307   10AB 51 02 00      add sp, 2
2308   10AE             ;; print("\n"); 
2309   10AE 26 B2 15      mov b, __s13 ; "\n"
2310   10B1 FD AB         swp b
2311   10B3 D8            push b
2312   10B4 07 72 0F      call print
2313   10B7 51 02 00      add sp, 2
2314   10BA F9            leave
2315   10BB 09            ret
2316   10BC             
2317   10BC             include_stdio_asm:
2318   10BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2319   10BF             
2320   10BF             ; --- BEGIN INLINE ASM BLOCK
2321   10BF             .include "lib/stdio.asm"
0001+  10BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  10BF             ; stdio.s
0003+  10BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  10BF             .include "lib/string.asm"
0001++ 10BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 10BF             ; string.s
0003++ 10BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 10BF             
0005++ 10BF             
0006++ 10BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 10BF             ; _strrev
0008++ 10BF             ; reverse a string
0009++ 10BF             ; D = string address
0010++ 10BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 10BF             ; 01234
0012++ 10BF             _strrev:
0013++ 10BF 4B          	pusha
0014++ 10C0 07 06 11    	call _strlen	; length in C
0015++ 10C3 12          	mov a, c
0016++ 10C4 AF 01 00    	cmp a, 1
0017++ 10C7 D0 E1 10    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 10CA 7D          	dec a
0019++ 10CB FD 4E       	mov si, d	; beginning of string
0020++ 10CD FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 10CF 59          	add d, a	; end of string
0022++ 10D0 12          	mov a, c
0023++ 10D1 FD 9B       	shr a		; divide by 2
0024++ 10D3 39          	mov c, a	; C now counts the steps
0025++ 10D4             _strrev_L0:
0026++ 10D4 32          	mov bl, [d]	; save load right-side char into BL
0027++ 10D5 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 10D6 3E          	mov [d], al	; store left char into right side
0029++ 10D7 1B          	mov al, bl
0030++ 10D8 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 10D9 7E          	dec c
0032++ 10DA 7F          	dec d
0033++ 10DB C2 00 00    	cmp c, 0
0034++ 10DE C7 D4 10    	jne _strrev_L0
0035++ 10E1             _strrev_end:
0036++ 10E1 4C          	popa
0037++ 10E2 09          	ret
0038++ 10E3             	
0039++ 10E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 10E3             ; _strchr
0041++ 10E3             ; search string in D for char in AL
0042++ 10E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 10E3             _strchr:
0044++ 10E3             _strchr_L0:
0045++ 10E3 32          	mov bl, [d]
0046++ 10E4 C1 00       	cmp bl, 0
0047++ 10E6 C6 F1 10    	je _strchr_end
0048++ 10E9 BA          	cmp al, bl
0049++ 10EA C6 F1 10    	je _strchr_end
0050++ 10ED 79          	inc d
0051++ 10EE 0A E3 10    	jmp _strchr_L0
0052++ 10F1             _strchr_end:
0053++ 10F1 1B          	mov al, bl
0054++ 10F2 09          	ret
0055++ 10F3             
0056++ 10F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 10F3             ; _strstr
0058++ 10F3             ; find sub-string
0059++ 10F3             ; str1 in SI
0060++ 10F3             ; str2 in DI
0061++ 10F3             ; SI points to end of source string
0062++ 10F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 10F3             _strstr:
0064++ 10F3 DB          	push al
0065++ 10F4 DA          	push d
0066++ 10F5 E3          	push di
0067++ 10F6             _strstr_loop:
0068++ 10F6 F3          	cmpsb					; compare a byte of the strings
0069++ 10F7 C7 02 11    	jne _strstr_ret
0070++ 10FA FC 00 00    	lea d, [di + 0]
0071++ 10FD BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 10FF C7 F6 10    	jne _strstr_loop				; equal chars but not at end
0073++ 1102             _strstr_ret:
0074++ 1102 F0          	pop di
0075++ 1103 E7          	pop d
0076++ 1104 E8          	pop al
0077++ 1105 09          	ret
0078++ 1106             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1106             ; length of null terminated string
0080++ 1106             ; result in C
0081++ 1106             ; pointer in D
0082++ 1106             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1106             _strlen:
0084++ 1106 DA          	push d
0085++ 1107 38 00 00    	mov c, 0
0086++ 110A             _strlen_L1:
0087++ 110A BD 00       	cmp byte [d], 0
0088++ 110C C6 14 11    	je _strlen_ret
0089++ 110F 79          	inc d
0090++ 1110 78          	inc c
0091++ 1111 0A 0A 11    	jmp _strlen_L1
0092++ 1114             _strlen_ret:
0093++ 1114 E7          	pop d
0094++ 1115 09          	ret
0095++ 1116             
0096++ 1116             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1116             ; STRCMP
0098++ 1116             ; compare two strings
0099++ 1116             ; str1 in SI
0100++ 1116             ; str2 in DI
0101++ 1116             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1116             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1116             _strcmp:
0104++ 1116 DB          	push al
0105++ 1117 DA          	push d
0106++ 1118 E3          	push di
0107++ 1119 E2          	push si
0108++ 111A             _strcmp_loop:
0109++ 111A F3          	cmpsb					; compare a byte of the strings
0110++ 111B C7 26 11    	jne _strcmp_ret
0111++ 111E FB FF FF    	lea d, [si +- 1]
0112++ 1121 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1123 C7 1A 11    	jne _strcmp_loop				; equal chars but not at end
0114++ 1126             _strcmp_ret:
0115++ 1126 EF          	pop si
0116++ 1127 F0          	pop di
0117++ 1128 E7          	pop d
0118++ 1129 E8          	pop al
0119++ 112A 09          	ret
0120++ 112B             
0121++ 112B             
0122++ 112B             ; STRCPY
0123++ 112B             ; copy null terminated string from SI to DI
0124++ 112B             ; source in SI
0125++ 112B             ; destination in DI
0126++ 112B             _strcpy:
0127++ 112B E2          	push si
0128++ 112C E3          	push di
0129++ 112D DB          	push al
0130++ 112E             _strcpy_L1:
0131++ 112E F6          	lodsb
0132++ 112F F7          	stosb
0133++ 1130 B9 00       	cmp al, 0
0134++ 1132 C7 2E 11    	jne _strcpy_L1
0135++ 1135             _strcpy_end:
0136++ 1135 E8          	pop al
0137++ 1136 F0          	pop di
0138++ 1137 EF          	pop si
0139++ 1138 09          	ret
0140++ 1139             
0141++ 1139             ; STRCAT
0142++ 1139             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1139             ; source in SI
0144++ 1139             ; destination in DI
0145++ 1139             _strcat:
0146++ 1139 E2          	push si
0147++ 113A E3          	push di
0148++ 113B D7          	push a
0149++ 113C DA          	push d
0150++ 113D 50          	mov a, di
0151++ 113E 3C          	mov d, a
0152++ 113F             _strcat_goto_end_L1:
0153++ 113F BD 00       	cmp byte[d], 0
0154++ 1141 C6 48 11    	je _strcat_start
0155++ 1144 79          	inc d
0156++ 1145 0A 3F 11    	jmp _strcat_goto_end_L1
0157++ 1148             _strcat_start:
0158++ 1148 FD 50       	mov di, d
0159++ 114A             _strcat_L1:
0160++ 114A F6          	lodsb
0161++ 114B F7          	stosb
0162++ 114C B9 00       	cmp al, 0
0163++ 114E C7 4A 11    	jne _strcat_L1
0164++ 1151             _strcat_end:
0165++ 1151 E7          	pop d
0166++ 1152 E4          	pop a
0167++ 1153 F0          	pop di
0168++ 1154 EF          	pop si
0169++ 1155 09          	ret
0170++ 1156             
0171++ 1156             
0005+  1156             
0006+  1156             
0007+  1156             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  1156             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  1156             ; ASCII in BL
0010+  1156             ; result in AL
0011+  1156             ; ascii for F = 0100 0110
0012+  1156             ; ascii for 9 = 0011 1001
0013+  1156             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  1156             hex_ascii_encode:
0015+  1156 1B            mov al, bl
0016+  1157 93 40         test al, $40        ; test if letter or number
0017+  1159 C7 5F 11      jnz hex_letter
0018+  115C 87 0F         and al, $0F        ; get number
0019+  115E 09            ret
0020+  115F             hex_letter:
0021+  115F 87 0F         and al, $0F        ; get letter
0022+  1161 6A 09         add al, 9
0023+  1163 09            ret
0024+  1164             
0025+  1164             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  1164             ; ATOI
0027+  1164             ; 2 letter hex string in B
0028+  1164             ; 8bit integer returned in AL
0029+  1164             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  1164             _atoi:
0031+  1164 D8            push b
0032+  1165 07 56 11      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  1168 30            mov bl, bh
0034+  1169 DB            push al          ; save a
0035+  116A 07 56 11      call hex_ascii_encode
0036+  116D EA            pop bl  
0037+  116E FD 9E 04      shl al, 4
0038+  1171 8C            or al, bl
0039+  1172 E5            pop b
0040+  1173 09            ret  
0041+  1174             
0042+  1174             
0043+  1174             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  1174             ; scanf
0045+  1174             ; no need for explanations!
0046+  1174             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  1174             scanf:
0048+  1174 09            ret
0049+  1175             
0050+  1175             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  1175             ; ITOA
0052+  1175             ; 8bit value in BL
0053+  1175             ; 2 byte ASCII result in A
0054+  1175             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  1175             _itoa:
0056+  1175 DA            push d
0057+  1176 D8            push b
0058+  1177 A7 00         mov bh, 0
0059+  1179 FD A4 04      shr bl, 4  
0060+  117C 74            mov d, b
0061+  117D 1F 25 14      mov al, [d + s_hex_digits]
0062+  1180 23            mov ah, al
0063+  1181               
0064+  1181 E5            pop b
0065+  1182 D8            push b
0066+  1183 A7 00         mov bh, 0
0067+  1185 FD 87 0F      and bl, $0F
0068+  1188 74            mov d, b
0069+  1189 1F 25 14      mov al, [d + s_hex_digits]
0070+  118C E5            pop b
0071+  118D E7            pop d
0072+  118E 09            ret
0073+  118F             
0074+  118F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  118F             ; HEX STRING TO BINARY
0076+  118F             ; di = destination address
0077+  118F             ; si = source
0078+  118F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  118F             _hex_to_int:
0080+  118F             _hex_to_int_L1:
0081+  118F F6            lodsb          ; load from [SI] to AL
0082+  1190 B9 00         cmp al, 0        ; check if ASCII 0
0083+  1192 C6 9F 11      jz _hex_to_int_ret
0084+  1195 36            mov bh, al
0085+  1196 F6            lodsb
0086+  1197 2F            mov bl, al
0087+  1198 07 64 11      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  119B F7            stosb          ; store AL to [DI]
0089+  119C 0A 8F 11      jmp _hex_to_int_L1
0090+  119F             _hex_to_int_ret:
0091+  119F 09            ret    
0092+  11A0             
0093+  11A0             
0094+  11A0             
0095+  11A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  11A0             ; GETCHAR
0097+  11A0             ; char in ah
0098+  11A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  11A0             getch:
0100+  11A0 DB            push al
0101+  11A1             getch_retry:
0102+  11A1 19 01         mov al, 1
0103+  11A3 05 03         syscall sys_io      ; receive in AH
0104+  11A5 E8            pop al
0105+  11A6 09            ret
0106+  11A7             
0107+  11A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  11A7             ; PUTCHAR
0109+  11A7             ; char in ah
0110+  11A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  11A7             _putchar:
0112+  11A7 D7            push a
0113+  11A8 19 00         mov al, 0
0114+  11AA 05 03         syscall sys_io      ; char in AH
0115+  11AC E4            pop a
0116+  11AD 09            ret
0117+  11AE             
0118+  11AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  11AE             ;; INPUT A STRING
0120+  11AE             ;; terminates with null
0121+  11AE             ;; pointer in D
0122+  11AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  11AE             _gets:
0124+  11AE D7            push a
0125+  11AF DA            push d
0126+  11B0             _gets_loop:
0127+  11B0 19 01         mov al, 1
0128+  11B2 05 03         syscall sys_io      ; receive in AH
0129+  11B4 B9 00         cmp al, 0        ; check error code (AL)
0130+  11B6 C6 B0 11      je _gets_loop      ; if no char received, retry
0131+  11B9             
0132+  11B9 76 1B         cmp ah, 27
0133+  11BB C6 DC 11      je _gets_ansi_esc
0134+  11BE 76 0A         cmp ah, $0A        ; LF
0135+  11C0 C6 47 12      je _gets_end
0136+  11C3 76 0D         cmp ah, $0D        ; CR
0137+  11C5 C6 47 12      je _gets_end
0138+  11C8 76 5C         cmp ah, $5C        ; '\\'
0139+  11CA C6 08 12      je _gets_escape
0140+  11CD               
0141+  11CD 76 08         cmp ah, $08      ; check for backspace
0142+  11CF C6 D8 11      je _gets_backspace
0143+  11D2             
0144+  11D2 1A            mov al, ah
0145+  11D3 3E            mov [d], al
0146+  11D4 79            inc d
0147+  11D5 0A B0 11      jmp _gets_loop
0148+  11D8             _gets_backspace:
0149+  11D8 7F            dec d
0150+  11D9 0A B0 11      jmp _gets_loop
0151+  11DC             _gets_ansi_esc:
0152+  11DC 19 01         mov al, 1
0153+  11DE 05 03         syscall sys_io        ; receive in AH without echo
0154+  11E0 B9 00         cmp al, 0          ; check error code (AL)
0155+  11E2 C6 DC 11      je _gets_ansi_esc    ; if no char received, retry
0156+  11E5 76 5B         cmp ah, '['
0157+  11E7 C7 B0 11      jne _gets_loop
0158+  11EA             _gets_ansi_esc_2:
0159+  11EA 19 01         mov al, 1
0160+  11EC 05 03         syscall sys_io          ; receive in AH without echo
0161+  11EE B9 00         cmp al, 0            ; check error code (AL)
0162+  11F0 C6 EA 11      je _gets_ansi_esc_2  ; if no char received, retry
0163+  11F3 76 44         cmp ah, 'D'
0164+  11F5 C6 00 12      je _gets_left_arrow
0165+  11F8 76 43         cmp ah, 'C'
0166+  11FA C6 04 12      je _gets_right_arrow
0167+  11FD 0A B0 11      jmp _gets_loop
0168+  1200             _gets_left_arrow:
0169+  1200 7F            dec d
0170+  1201 0A B0 11      jmp _gets_loop
0171+  1204             _gets_right_arrow:
0172+  1204 79            inc d
0173+  1205 0A B0 11      jmp _gets_loop
0174+  1208             _gets_escape:
0175+  1208 19 01         mov al, 1
0176+  120A 05 03         syscall sys_io      ; receive in AH
0177+  120C B9 00         cmp al, 0        ; check error code (AL)
0178+  120E C6 08 12      je _gets_escape      ; if no char received, retry
0179+  1211 76 6E         cmp ah, 'n'
0180+  1213 C6 32 12      je _gets_LF
0181+  1216 76 72         cmp ah, 'r'
0182+  1218 C6 39 12      je _gets_CR
0183+  121B 76 30         cmp ah, '0'
0184+  121D C6 40 12      je _gets_NULL
0185+  1220 76 5C         cmp ah, $5C  ; '\'
0186+  1222 C6 2B 12      je _gets_slash
0187+  1225 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  1226 3E            mov [d], al
0189+  1227 79            inc d
0190+  1228 0A B0 11      jmp _gets_loop
0191+  122B             _gets_slash:
0192+  122B 19 5C         mov al, $5C
0193+  122D 3E            mov [d], al
0194+  122E 79            inc d
0195+  122F 0A B0 11      jmp _gets_loop
0196+  1232             _gets_LF:
0197+  1232 19 0A         mov al, $0A
0198+  1234 3E            mov [d], al
0199+  1235 79            inc d
0200+  1236 0A B0 11      jmp _gets_loop
0201+  1239             _gets_CR:
0202+  1239 19 0D         mov al, $0D
0203+  123B 3E            mov [d], al
0204+  123C 79            inc d
0205+  123D 0A B0 11      jmp _gets_loop
0206+  1240             _gets_NULL:
0207+  1240 19 00         mov al, $00
0208+  1242 3E            mov [d], al
0209+  1243 79            inc d
0210+  1244 0A B0 11      jmp _gets_loop
0211+  1247             _gets_end:
0212+  1247 19 00         mov al, 0
0213+  1249 3E            mov [d], al        ; terminate string
0214+  124A E7            pop d
0215+  124B E4            pop a
0216+  124C 09            ret
0217+  124D             
0218+  124D             
0219+  124D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  124D             ;; INPUT TEXT
0221+  124D             ;; terminated with CTRL+D
0222+  124D             ;; pointer in D
0223+  124D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  124D             _gettxt:
0225+  124D D7            push a
0226+  124E DA            push d
0227+  124F             _gettxt_loop:
0228+  124F 19 01         mov al, 1
0229+  1251 05 03         syscall sys_io      ; receive in AH
0230+  1253 B9 00         cmp al, 0        ; check error code (AL)
0231+  1255 C6 4F 12      je _gettxt_loop    ; if no char received, retry
0232+  1258 76 04         cmp ah, 4      ; EOT
0233+  125A C6 98 12      je _gettxt_end
0234+  125D 76 08         cmp ah, $08      ; check for backspace
0235+  125F C6 94 12      je _gettxt_backspace
0236+  1262 76 5C         cmp ah, $5C        ; '\'
0237+  1264 C6 6D 12      je _gettxt_escape
0238+  1267 1A            mov al, ah
0239+  1268 3E            mov [d], al
0240+  1269 79            inc d
0241+  126A 0A 4F 12      jmp _gettxt_loop
0242+  126D             _gettxt_escape:
0243+  126D 19 01         mov al, 1
0244+  126F 05 03         syscall sys_io      ; receive in AH
0245+  1271 B9 00         cmp al, 0        ; check error code (AL)
0246+  1273 C6 6D 12      je _gettxt_escape    ; if no char received, retry
0247+  1276 76 6E         cmp ah, 'n'
0248+  1278 C6 86 12      je _gettxt_LF
0249+  127B 76 72         cmp ah, 'r'
0250+  127D C6 8D 12      je _gettxt_CR
0251+  1280 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  1281 3E            mov [d], al
0253+  1282 79            inc d
0254+  1283 0A 4F 12      jmp _gettxt_loop
0255+  1286             _gettxt_LF:
0256+  1286 19 0A         mov al, $0A
0257+  1288 3E            mov [d], al
0258+  1289 79            inc d
0259+  128A 0A 4F 12      jmp _gettxt_loop
0260+  128D             _gettxt_CR:
0261+  128D 19 0D         mov al, $0D
0262+  128F 3E            mov [d], al
0263+  1290 79            inc d
0264+  1291 0A 4F 12      jmp _gettxt_loop
0265+  1294             _gettxt_backspace:
0266+  1294 7F            dec d
0267+  1295 0A 4F 12      jmp _gettxt_loop
0268+  1298             _gettxt_end:
0269+  1298 19 00         mov al, 0
0270+  129A 3E            mov [d], al        ; terminate string
0271+  129B E7            pop d
0272+  129C E4            pop a
0273+  129D 09            ret
0274+  129E             
0275+  129E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  129E             ; PRINT NEW LINE
0277+  129E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  129E             printnl:
0279+  129E D7            push a
0280+  129F 10 00 0A      mov a, $0A00
0281+  12A2 05 03         syscall sys_io
0282+  12A4 10 00 0D      mov a, $0D00
0283+  12A7 05 03         syscall sys_io
0284+  12A9 E4            pop a
0285+  12AA 09            ret
0286+  12AB             
0287+  12AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  12AB             ; _strtoint
0289+  12AB             ; 4 digit hex string number in d
0290+  12AB             ; integer returned in A
0291+  12AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  12AB             _strtointx:
0293+  12AB D8            push b
0294+  12AC 32            mov bl, [d]
0295+  12AD 37            mov bh, bl
0296+  12AE 33 01 00      mov bl, [d + 1]
0297+  12B1 07 64 11      call _atoi        ; convert to int in AL
0298+  12B4 23            mov ah, al        ; move to AH
0299+  12B5 33 02 00      mov bl, [d + 2]
0300+  12B8 37            mov bh, bl
0301+  12B9 33 03 00      mov bl, [d + 3]
0302+  12BC 07 64 11      call _atoi        ; convert to int in AL
0303+  12BF E5            pop b
0304+  12C0 09            ret
0305+  12C1             
0306+  12C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  12C1             ; _strtoint
0308+  12C1             ; 5 digit base10 string number in d
0309+  12C1             ; integer returned in A
0310+  12C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  12C1             _strtoint:
0312+  12C1 E2            push si
0313+  12C2 D8            push b
0314+  12C3 D9            push c
0315+  12C4 DA            push d
0316+  12C5 07 06 11      call _strlen      ; get string length in C
0317+  12C8 7E            dec c
0318+  12C9 FD 4E         mov si, d
0319+  12CB 12            mov a, c
0320+  12CC FD 99         shl a
0321+  12CE 3B 3D 14      mov d, table_power
0322+  12D1 59            add d, a
0323+  12D2 38 00 00      mov c, 0
0324+  12D5             _strtoint_L0:
0325+  12D5 F6            lodsb      ; load ASCII to al
0326+  12D6 B9 00         cmp al, 0
0327+  12D8 C6 EB 12      je _strtoint_end
0328+  12DB 6F 30         sub al, $30    ; make into integer
0329+  12DD 22 00         mov ah, 0
0330+  12DF 2A            mov b, [d]
0331+  12E0 AC            mul a, b      ; result in B since it fits in 16bits
0332+  12E1 11            mov a, b
0333+  12E2 28            mov b, c
0334+  12E3 54            add a, b
0335+  12E4 39            mov c, a
0336+  12E5 63 02 00      sub d, 2
0337+  12E8 0A D5 12      jmp _strtoint_L0
0338+  12EB             _strtoint_end:
0339+  12EB 12            mov a, c
0340+  12EC E7            pop d
0341+  12ED E6            pop c
0342+  12EE E5            pop b
0343+  12EF EF            pop si
0344+  12F0 09            ret
0345+  12F1             
0346+  12F1             
0347+  12F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  12F1             ; PRINT NULL TERMINATED STRING
0349+  12F1             ; pointer in D
0350+  12F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  12F1             _puts:
0352+  12F1 D7            push a
0353+  12F2 DA            push d
0354+  12F3             _puts_L1:
0355+  12F3 1E            mov al, [d]
0356+  12F4 B9 00         cmp al, 0
0357+  12F6 C6 02 13      jz _puts_END
0358+  12F9 23            mov ah, al
0359+  12FA 19 00         mov al, 0
0360+  12FC 05 03         syscall sys_io
0361+  12FE 79            inc d
0362+  12FF 0A F3 12      jmp _puts_L1
0363+  1302             _puts_END:
0364+  1302 E7            pop d
0365+  1303 E4            pop a
0366+  1304 09            ret
0367+  1305             
0368+  1305             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  1305             ; PRINT N SIZE STRING
0370+  1305             ; pointer in D
0371+  1305             ; size in C
0372+  1305             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  1305             _putsn:
0374+  1305 DB            push al
0375+  1306 DA            push d
0376+  1307 D9            push c
0377+  1308             _putsn_L0:
0378+  1308 1E            mov al, [d]
0379+  1309 23            mov ah, al
0380+  130A 19 00         mov al, 0
0381+  130C 05 03         syscall sys_io
0382+  130E 79            inc d
0383+  130F 7E            dec c  
0384+  1310 C2 00 00      cmp c, 0
0385+  1313 C7 08 13      jne _putsn_L0
0386+  1316             _putsn_end:
0387+  1316 E6            pop c
0388+  1317 E7            pop d
0389+  1318 E8            pop al
0390+  1319 09            ret
0391+  131A             
0392+  131A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  131A             ; print 16bit decimal number
0394+  131A             ; input number in A
0395+  131A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  131A             print_u16d:
0397+  131A D7            push a
0398+  131B D8            push b
0399+  131C 26 10 27      mov b, 10000
0400+  131F AE            div a, b      ; get 10000's coeff.
0401+  1320 07 42 13      call print_number
0402+  1323 11            mov a, b
0403+  1324 26 E8 03      mov b, 1000
0404+  1327 AE            div a, b      ; get 1000's coeff.
0405+  1328 07 42 13      call print_number
0406+  132B 11            mov a, b
0407+  132C 26 64 00      mov b, 100
0408+  132F AE            div a, b
0409+  1330 07 42 13      call print_number
0410+  1333 11            mov a, b
0411+  1334 26 0A 00      mov b, 10
0412+  1337 AE            div a, b
0413+  1338 07 42 13      call print_number
0414+  133B 1B            mov al, bl      ; 1's coeff in bl
0415+  133C 07 42 13      call print_number
0416+  133F E5            pop b
0417+  1340 E4            pop a
0418+  1341 09            ret
0419+  1342             
0420+  1342             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  1342             ; print AL
0422+  1342             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  1342             print_number:
0424+  1342 6A 30         add al, $30
0425+  1344 23            mov ah, al
0426+  1345 07 A7 11      call _putchar
0427+  1348 09            ret
0428+  1349             
0429+  1349             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  1349             ; PRINT 16BIT HEX INTEGER
0431+  1349             ; integer value in reg B
0432+  1349             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  1349             print_u16x:
0434+  1349 D7            push a
0435+  134A D8            push b
0436+  134B DD            push bl
0437+  134C 30            mov bl, bh
0438+  134D 07 75 11      call _itoa        ; convert bh to char in A
0439+  1350 2F            mov bl, al        ; save al
0440+  1351 19 00         mov al, 0
0441+  1353 05 03         syscall sys_io        ; display AH
0442+  1355 24            mov ah, bl        ; retrieve al
0443+  1356 19 00         mov al, 0
0444+  1358 05 03         syscall sys_io        ; display AL
0445+  135A             
0446+  135A EA            pop bl
0447+  135B 07 75 11      call _itoa        ; convert bh to char in A
0448+  135E 2F            mov bl, al        ; save al
0449+  135F 19 00         mov al, 0
0450+  1361 05 03         syscall sys_io        ; display AH
0451+  1363 24            mov ah, bl        ; retrieve al
0452+  1364 19 00         mov al, 0
0453+  1366 05 03         syscall sys_io        ; display AL
0454+  1368             
0455+  1368 E5            pop b
0456+  1369 E4            pop a
0457+  136A 09            ret
0458+  136B             
0459+  136B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  136B             ; INPUT 16BIT HEX INTEGER
0461+  136B             ; read 16bit integer into A
0462+  136B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  136B             scan_u16x:
0464+  136B F8 10 00      enter 16
0465+  136E D8            push b
0466+  136F DA            push d
0467+  1370             
0468+  1370 FA F1 FF      lea d, [bp + -15]
0469+  1373 07 AE 11      call _gets        ; get number
0470+  1376             
0471+  1376 32            mov bl, [d]
0472+  1377 37            mov bh, bl
0473+  1378 33 01 00      mov bl, [d + 1]
0474+  137B 07 64 11      call _atoi        ; convert to int in AL
0475+  137E 23            mov ah, al        ; move to AH
0476+  137F             
0477+  137F 33 02 00      mov bl, [d + 2]
0478+  1382 37            mov bh, bl
0479+  1383 33 03 00      mov bl, [d + 3]
0480+  1386 07 64 11      call _atoi        ; convert to int in AL
0481+  1389             
0482+  1389 E7            pop d
0483+  138A E5            pop b
0484+  138B F9            leave
0485+  138C 09            ret
0486+  138D             
0487+  138D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  138D             ; PRINT 8bit HEX INTEGER
0489+  138D             ; integer value in reg bl
0490+  138D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  138D             print_u8x:
0492+  138D D7            push a
0493+  138E DD            push bl
0494+  138F             
0495+  138F 07 75 11      call _itoa        ; convert bl to char in A
0496+  1392 2F            mov bl, al        ; save al
0497+  1393 19 00         mov al, 0
0498+  1395 05 03         syscall sys_io        ; display AH
0499+  1397 24            mov ah, bl        ; retrieve al
0500+  1398 19 00         mov al, 0
0501+  139A 05 03         syscall sys_io        ; display AL
0502+  139C             
0503+  139C EA            pop bl
0504+  139D E4            pop a
0505+  139E 09            ret
0506+  139F             
0507+  139F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  139F             ; print 8bit decimal unsigned number
0509+  139F             ; input number in AL
0510+  139F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  139F             print_u8d:
0512+  139F D7            push a
0513+  13A0 D8            push b
0514+  13A1             
0515+  13A1 22 00         mov ah, 0
0516+  13A3 26 64 00      mov b, 100
0517+  13A6 AE            div a, b
0518+  13A7 D8            push b      ; save remainder
0519+  13A8 B9 00         cmp al, 0
0520+  13AA C6 B4 13      je skip100
0521+  13AD 6A 30         add al, $30
0522+  13AF 23            mov ah, al
0523+  13B0 19 00         mov al, 0
0524+  13B2 05 03         syscall sys_io  ; print coeff
0525+  13B4             skip100:
0526+  13B4 E4            pop a
0527+  13B5 22 00         mov ah, 0
0528+  13B7 26 0A 00      mov b, 10
0529+  13BA AE            div a, b
0530+  13BB D8            push b      ; save remainder
0531+  13BC B9 00         cmp al, 0
0532+  13BE C6 C8 13      je skip10
0533+  13C1 6A 30         add al, $30
0534+  13C3 23            mov ah, al
0535+  13C4 19 00         mov al, 0
0536+  13C6 05 03         syscall sys_io  ; print coeff
0537+  13C8             skip10:
0538+  13C8 E4            pop a
0539+  13C9 1B            mov al, bl
0540+  13CA 6A 30         add al, $30
0541+  13CC 23            mov ah, al
0542+  13CD 19 00         mov al, 0
0543+  13CF 05 03         syscall sys_io  ; print coeff
0544+  13D1 E5            pop b
0545+  13D2 E4            pop a
0546+  13D3 09            ret
0547+  13D4             
0548+  13D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  13D4             ; INPUT 8BIT HEX INTEGER
0550+  13D4             ; read 8bit integer into AL
0551+  13D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  13D4             scan_u8x:
0553+  13D4 F8 04 00      enter 4
0554+  13D7 D8            push b
0555+  13D8 DA            push d
0556+  13D9             
0557+  13D9 FA FD FF      lea d, [bp + -3]
0558+  13DC 07 AE 11      call _gets        ; get number
0559+  13DF             
0560+  13DF 32            mov bl, [d]
0561+  13E0 37            mov bh, bl
0562+  13E1 33 01 00      mov bl, [d + 1]
0563+  13E4 07 64 11      call _atoi        ; convert to int in AL
0564+  13E7             
0565+  13E7 E7            pop d
0566+  13E8 E5            pop b
0567+  13E9 F9            leave
0568+  13EA 09            ret
0569+  13EB             
0570+  13EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  13EB             ; input decimal number
0572+  13EB             ; result in A
0573+  13EB             ; 655'\0'
0574+  13EB             ; low--------high
0575+  13EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  13EB             scan_u16d:
0577+  13EB F8 08 00      enter 8
0578+  13EE E2            push si
0579+  13EF D8            push b
0580+  13F0 D9            push c
0581+  13F1 DA            push d
0582+  13F2 FA F9 FF      lea d, [bp +- 7]
0583+  13F5 07 AE 11      call _gets
0584+  13F8 07 06 11      call _strlen      ; get string length in C
0585+  13FB 7E            dec c
0586+  13FC FD 4E         mov si, d
0587+  13FE 12            mov a, c
0588+  13FF FD 99         shl a
0589+  1401 3B 3D 14      mov d, table_power
0590+  1404 59            add d, a
0591+  1405 38 00 00      mov c, 0
0592+  1408             mul_loop:
0593+  1408 F6            lodsb      ; load ASCII to al
0594+  1409 B9 00         cmp al, 0
0595+  140B C6 1E 14      je mul_exit
0596+  140E 6F 30         sub al, $30    ; make into integer
0597+  1410 22 00         mov ah, 0
0598+  1412 2A            mov b, [d]
0599+  1413 AC            mul a, b      ; result in B since it fits in 16bits
0600+  1414 11            mov a, b
0601+  1415 28            mov b, c
0602+  1416 54            add a, b
0603+  1417 39            mov c, a
0604+  1418 63 02 00      sub d, 2
0605+  141B 0A 08 14      jmp mul_loop
0606+  141E             mul_exit:
0607+  141E 12            mov a, c
0608+  141F E7            pop d
0609+  1420 E6            pop c
0610+  1421 E5            pop b
0611+  1422 EF            pop si
0612+  1423 F9            leave
0613+  1424 09            ret
0614+  1425             
0615+  1425             
0616+  1425 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  1429 34 35 36 37 
0616+  142D 38 39 41 42 
0616+  1431 43 44 45 46 
0617+  1435 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  1439 1B 5B 48 00 
0618+  143D             
0619+  143D             table_power:
0620+  143D 01 00         .dw 1
0621+  143F 0A 00         .dw 10
0622+  1441 64 00         .dw 100
0623+  1443 E8 03         .dw 1000
0624+  1445 10 27         .dw 100002322   1447             ; --- END INLINE ASM BLOCK
2323   1447             
2324   1447 F9            leave
2325   1448 09            ret
2326   1449             
2327   1449             print_with_escape:
2328   1449 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2329   144C             ;; while (*str) { 
2330   144C             _while34_cond:
2331   144C FA 05 00      lea d, [bp + 5] ; $str
2332   144F 2A            mov b, [d]
2333   1450 74            mov d, b
2334   1451 32            mov bl, [d]
2335   1452 A7 00         mov bh, 0
2336   1454 C0 00 00      cmp b, 0
2337   1457 C6 77 14      je _while34_exit
2338   145A             _while34_block:
2339   145A             ;; putchar(*str++); 
2340   145A FA 05 00      lea d, [bp + 5] ; $str
2341   145D 2A            mov b, [d]
2342   145E FD 79         mov g, b
2343   1460 FD 77         inc b
2344   1462 FA 05 00      lea d, [bp + 5] ; $str
2345   1465 FD 43         mov [d], b
2346   1467 FD 27         mov b, g
2347   1469 74            mov d, b
2348   146A 32            mov bl, [d]
2349   146B A7 00         mov bh, 0
2350   146D DD            push bl
2351   146E 07 2A 0F      call putchar
2352   1471 51 01 00      add sp, 1
2353   1474 0A 4C 14      jmp _while34_cond
2354   1477             _while34_exit:
2355   1477 F9            leave
2356   1478 09            ret
2357   1479             
2358   1479             move_cursor_to_line:
2359   1479 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2360   147C             ;; printf("\033["); 
2361   147C 26 B4 15      mov b, __s14 ; "\033["
2362   147F FD AB         swp b
2363   1481 D8            push b
2364   1482 07 30 09      call printf
2365   1485 51 02 00      add sp, 2
2366   1488             ;; printu(line + 3); 
2367   1488 FA 05 00      lea d, [bp + 5] ; $line
2368   148B 2A            mov b, [d]
2369   148C             ; START TERMS
2370   148C D7            push a
2371   148D 11            mov a, b
2372   148E 26 03 00      mov b, $3
2373   1491 54            add a, b
2374   1492 27            mov b, a
2375   1493 E4            pop a
2376   1494             ; END TERMS
2377   1494 FD AB         swp b
2378   1496 D8            push b
2379   1497 07 3E 0E      call printu
2380   149A 51 02 00      add sp, 2
2381   149D             ;; printf(";0H"); 
2382   149D 26 B7 15      mov b, __s15 ; ";0H"
2383   14A0 FD AB         swp b
2384   14A2 D8            push b
2385   14A3 07 30 09      call printf
2386   14A6 51 02 00      add sp, 2
2387   14A9 F9            leave
2388   14AA 09            ret
2389   14AB             
2390   14AB             display_option:
2391   14AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2392   14AE             ;; if (highlighted) { 
2393   14AE             _if35_cond:
2394   14AE FA 07 00      lea d, [bp + 7] ; $highlighted
2395   14B1 2A            mov b, [d]
2396   14B2 C0 00 00      cmp b, 0
2397   14B5 C6 C7 14      je _if35_exit
2398   14B8             _if35_true:
2399   14B8             ;; print_with_escape("\033[7m"); 
2400   14B8 26 5D 15      mov b, __s6 ; "\033[7m"
2401   14BB FD AB         swp b
2402   14BD D8            push b
2403   14BE 07 49 14      call print_with_escape
2404   14C1 51 02 00      add sp, 2
2405   14C4 0A C7 14      jmp _if35_exit
2406   14C7             _if35_exit:
2407   14C7             ;; print_with_escape(option); 
2408   14C7 FA 05 00      lea d, [bp + 5] ; $option
2409   14CA 2A            mov b, [d]
2410   14CB FD AB         swp b
2411   14CD D8            push b
2412   14CE 07 49 14      call print_with_escape
2413   14D1 51 02 00      add sp, 2
2414   14D4             ;; print_with_escape("\033[0m"); 
2415   14D4 26 78 15      mov b, __s8 ; "\033[0m"
2416   14D7 FD AB         swp b
2417   14D9 D8            push b
2418   14DA 07 49 14      call print_with_escape
2419   14DD 51 02 00      add sp, 2
2420   14E0             ;; print_with_escape("\033[K"); 
2421   14E0 26 BB 15      mov b, __s16 ; "\033[K"
2422   14E3 FD AB         swp b
2423   14E5 D8            push b
2424   14E6 07 49 14      call print_with_escape
2425   14E9 51 02 00      add sp, 2
2426   14EC F9            leave
2427   14ED 09            ret
2428   14EE             ; --- END TEXT BLOCK
2429   14EE             
2430   14EE             ; --- BEGIN DATA BLOCK
2431   14EE             _options_data: 
2432   14EE 13 15 22 15 .dw __s0, __s1, __s2, 
2432   14F2 31 15 
2433   14F4 00 00 00 00 .fill 6, 0
2433   14F8 00 00 
2434   14FA 2F 68 6F 6D _filename_data: .db "/home/guest/data.txt", 0
2434   14FE 65 2F 67 75 
2434   1502 65 73 74 2F 
2434   1506 64 61 74 61 
2434   150A 2E 74 78 74 
2434   150E 00 
2435   150F FA 14       _filename: .dw _filename_data
2436   1511 00 00       _guestbook_data: .fill 2, 0
2437   1513 4C 69 73 74 __s0: .db "List Guestbook", 0
2437   1517 20 47 75 65 
2437   151B 73 74 62 6F 
2437   151F 6F 6B 00 
2438   1522 53 69 67 6E __s1: .db "Sign Guestbook", 0
2438   1526 20 47 75 65 
2438   152A 73 74 62 6F 
2438   152E 6F 6B 00 
2439   1531 45 78 69 74 __s2: .db "Exit", 0
2439   1535 00 
2440   1536 1B 5B 32 4A __s3: .db "\033[2J", 0
2440   153A 00 
2441   153B 2A 2A 2A 2A __s4: .db "**** Sol-1 Guestbook ****\n", 0
2441   153F 20 53 6F 6C 
2441   1543 2D 31 20 47 
2441   1547 75 65 73 74 
2441   154B 62 6F 6F 6B 
2441   154F 20 2A 2A 2A 
2441   1553 2A 0A 00 
2442   1556 1B 5B 3F 32 __s5: .db "\033[?25l", 0
2442   155A 35 6C 00 
2443   155D 1B 5B 37 6D __s6: .db "\033[7m", 0
2443   1561 00 
2444   1562 50 72 65 73 __s7: .db "Press Return to exit.", 0
2444   1566 73 20 52 65 
2444   156A 74 75 72 6E 
2444   156E 20 74 6F 20 
2444   1572 65 78 69 74 
2444   1576 2E 00 
2445   1578 1B 5B 30 6D __s8: .db "\033[0m", 0
2445   157C 00 
2446   157D 53 6F 6F 6E __s9: .db "Soon!!", 0
2446   1581 21 21 00 
2447   1584 1B 5B 3F 32 __s10: .db "\033[?25h", 0
2447   1588 35 68 00 
2448   158B 45 72 72 6F __s11: .db "Error: Unknown argument type.\n", 0
2448   158F 72 3A 20 55 
2448   1593 6E 6B 6E 6F 
2448   1597 77 6E 20 61 
2448   159B 72 67 75 6D 
2448   159F 65 6E 74 20 
2448   15A3 74 79 70 65 
2448   15A7 2E 0A 00 
2449   15AA 1B 5B 32 4A __s12: .db "\033[2J\033[H", 0
2449   15AE 1B 5B 48 00 
2450   15B2 0A 00       __s13: .db "\n", 0
2451   15B4 1B 5B 00    __s14: .db "\033[", 0
2452   15B7 3B 30 48 00 __s15: .db ";0H", 0
2453   15BB 1B 5B 4B 00 __s16: .db "\033[K", 0
2454   15BF             
2455   15BF C1 15       _heap_top: .dw _heap
2456   15C1 00          _heap: .db 0
2457   15C2             ; --- END DATA BLOCK
2458   15C2             
2459   15C2             .end
tasm: Number of errors = 0
