0001   0000             ; --- FILENAME: programs/sha256
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $hash 
0011   0408             ; $i 
0012   0408 52 12 00      sub sp, 18
0013   040B             ;; simple_hash(text, hash); 
0014   040B FA F1 FF      lea d, [bp + -15] ; $hash
0015   040E 2D            mov b, d
0016   040F FD AB         swp b
0017   0411 D8            push b
0018   0412 3B EB 16      mov d, _text ; $text
0019   0415 2A            mov b, [d]
0020   0416 FD AB         swp b
0021   0418 D8            push b
0022   0419 07 38 14      call simple_hash
0023   041C 51 04 00      add sp, 4
0024   041F             ;; printf("Hash: "); 
0025   041F 26 ED 16      mov b, __s0 ; "Hash: "
0026   0422 FD AB         swp b
0027   0424 D8            push b
0028   0425 07 3B 06      call printf
0029   0428 51 02 00      add sp, 2
0030   042B             ;; for (i = 0; i <  16        ; i++) { 
0031   042B             _for1_init:
0032   042B FA EF FF      lea d, [bp + -17] ; $i
0033   042E DA            push d
0034   042F 26 00 00      mov b, $0
0035   0432 E7            pop d
0036   0433 FD 43         mov [d], b
0037   0435             _for1_cond:
0038   0435 FA EF FF      lea d, [bp + -17] ; $i
0039   0438 2A            mov b, [d]
0040   0439             ; START RELATIONAL
0041   0439 D7            push a
0042   043A 11            mov a, b
0043   043B 26 10 00      mov b, $10
0044   043E B0            cmp a, b
0045   043F FD 73         slt ; < 
0046   0441 E4            pop a
0047   0442             ; END RELATIONAL
0048   0442 C0 00 00      cmp b, 0
0049   0445 C6 6E 04      je _for1_exit
0050   0448             _for1_block:
0051   0448             ;; printx8(hash[i]); 
0052   0448 FA F1 FF      lea d, [bp + -15] ; $hash
0053   044B D7            push a
0054   044C DA            push d
0055   044D FA EF FF      lea d, [bp + -17] ; $i
0056   0450 2A            mov b, [d]
0057   0451 E7            pop d
0058   0452 5A            add d, b
0059   0453 E4            pop a
0060   0454 32            mov bl, [d]
0061   0455 A7 00         mov bh, 0
0062   0457 DD            push bl
0063   0458 07 BC 08      call printx8
0064   045B 51 01 00      add sp, 1
0065   045E             _for1_update:
0066   045E FA EF FF      lea d, [bp + -17] ; $i
0067   0461 2A            mov b, [d]
0068   0462 D8            push b
0069   0463 FD 77         inc b
0070   0465 FA EF FF      lea d, [bp + -17] ; $i
0071   0468 FD 43         mov [d], b
0072   046A E5            pop b
0073   046B 0A 35 04      jmp _for1_cond
0074   046E             _for1_exit:
0075   046E             ;; printf("\n"); 
0076   046E 26 F4 16      mov b, __s1 ; "\n"
0077   0471 FD AB         swp b
0078   0473 D8            push b
0079   0474 07 3B 06      call printf
0080   0477 51 02 00      add sp, 2
0081   047A             ;; return 0; 
0082   047A 26 00 00      mov b, $0
0083   047D F9            leave
0084   047E 05 0B         syscall sys_terminate_proc
0085   0480             
0086   0480             strcpy:
0087   0480 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0088   0483             ; $psrc 
0089   0483             ; $pdest 
0090   0483 52 04 00      sub sp, 4
0091   0486             ;; psrc = src; 
0092   0486 FA FF FF      lea d, [bp + -1] ; $psrc
0093   0489 DA            push d
0094   048A FA 07 00      lea d, [bp + 7] ; $src
0095   048D 2A            mov b, [d]
0096   048E E7            pop d
0097   048F FD 43         mov [d], b
0098   0491             ;; pdest = dest; 
0099   0491 FA FD FF      lea d, [bp + -3] ; $pdest
0100   0494 DA            push d
0101   0495 FA 05 00      lea d, [bp + 5] ; $dest
0102   0498 2A            mov b, [d]
0103   0499 E7            pop d
0104   049A FD 43         mov [d], b
0105   049C             ;; while(*psrc) *pdest++ = *psrc++; 
0106   049C             _while2_cond:
0107   049C FA FF FF      lea d, [bp + -1] ; $psrc
0108   049F 2A            mov b, [d]
0109   04A0 74            mov d, b
0110   04A1 32            mov bl, [d]
0111   04A2 A7 00         mov bh, 0
0112   04A4 C0 00 00      cmp b, 0
0113   04A7 C6 CF 04      je _while2_exit
0114   04AA             _while2_block:
0115   04AA             ;; *pdest++ = *psrc++; 
0116   04AA FA FD FF      lea d, [bp + -3] ; $pdest
0117   04AD 2A            mov b, [d]
0118   04AE D8            push b
0119   04AF FD 77         inc b
0120   04B1 FA FD FF      lea d, [bp + -3] ; $pdest
0121   04B4 FD 43         mov [d], b
0122   04B6 E5            pop b
0123   04B7 D8            push b
0124   04B8 FA FF FF      lea d, [bp + -1] ; $psrc
0125   04BB 2A            mov b, [d]
0126   04BC D8            push b
0127   04BD FD 77         inc b
0128   04BF FA FF FF      lea d, [bp + -1] ; $psrc
0129   04C2 FD 43         mov [d], b
0130   04C4 E5            pop b
0131   04C5 74            mov d, b
0132   04C6 32            mov bl, [d]
0133   04C7 A7 00         mov bh, 0
0134   04C9 E7            pop d
0135   04CA FD 3E         mov [d], bl
0136   04CC 0A 9C 04      jmp _while2_cond
0137   04CF             _while2_exit:
0138   04CF             ;; *pdest = '\0'; 
0139   04CF FA FD FF      lea d, [bp + -3] ; $pdest
0140   04D2 2A            mov b, [d]
0141   04D3 D8            push b
0142   04D4 26 00 00      mov b, $0
0143   04D7 E7            pop d
0144   04D8 FD 3E         mov [d], bl
0145   04DA F9            leave
0146   04DB 09            ret
0147   04DC             
0148   04DC             strcmp:
0149   04DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0150   04DF             ;; while (*s1 && (*s1 == *s2)) { 
0151   04DF             _while3_cond:
0152   04DF FA 05 00      lea d, [bp + 5] ; $s1
0153   04E2 2A            mov b, [d]
0154   04E3 74            mov d, b
0155   04E4 32            mov bl, [d]
0156   04E5 A7 00         mov bh, 0
0157   04E7 D7            push a
0158   04E8 11            mov a, b
0159   04E9 FA 05 00      lea d, [bp + 5] ; $s1
0160   04EC 2A            mov b, [d]
0161   04ED 74            mov d, b
0162   04EE 32            mov bl, [d]
0163   04EF A7 00         mov bh, 0
0164   04F1             ; START RELATIONAL
0165   04F1 D7            push a
0166   04F2 11            mov a, b
0167   04F3 FA 07 00      lea d, [bp + 7] ; $s2
0168   04F6 2A            mov b, [d]
0169   04F7 74            mov d, b
0170   04F8 32            mov bl, [d]
0171   04F9 A7 00         mov bh, 0
0172   04FB B0            cmp a, b
0173   04FC FD 71         seq ; ==
0174   04FE E4            pop a
0175   04FF             ; END RELATIONAL
0176   04FF FD A7         sand a, b ; &&
0177   0501 E4            pop a
0178   0502 C0 00 00      cmp b, 0
0179   0505 C6 25 05      je _while3_exit
0180   0508             _while3_block:
0181   0508             ;; s1++; 
0182   0508 FA 05 00      lea d, [bp + 5] ; $s1
0183   050B 2A            mov b, [d]
0184   050C D8            push b
0185   050D FD 77         inc b
0186   050F FA 05 00      lea d, [bp + 5] ; $s1
0187   0512 FD 43         mov [d], b
0188   0514 E5            pop b
0189   0515             ;; s2++; 
0190   0515 FA 07 00      lea d, [bp + 7] ; $s2
0191   0518 2A            mov b, [d]
0192   0519 D8            push b
0193   051A FD 77         inc b
0194   051C FA 07 00      lea d, [bp + 7] ; $s2
0195   051F FD 43         mov [d], b
0196   0521 E5            pop b
0197   0522 0A DF 04      jmp _while3_cond
0198   0525             _while3_exit:
0199   0525             ;; return *s1 - *s2; 
0200   0525 FA 05 00      lea d, [bp + 5] ; $s1
0201   0528 2A            mov b, [d]
0202   0529 74            mov d, b
0203   052A 32            mov bl, [d]
0204   052B A7 00         mov bh, 0
0205   052D             ; START TERMS
0206   052D D7            push a
0207   052E 11            mov a, b
0208   052F FA 07 00      lea d, [bp + 7] ; $s2
0209   0532 2A            mov b, [d]
0210   0533 74            mov d, b
0211   0534 32            mov bl, [d]
0212   0535 A7 00         mov bh, 0
0213   0537 60            sub a, b
0214   0538 27            mov b, a
0215   0539 E4            pop a
0216   053A             ; END TERMS
0217   053A F9            leave
0218   053B 09            ret
0219   053C             
0220   053C             strcat:
0221   053C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0222   053F             ; $dest_len 
0223   053F             ; $i 
0224   053F 52 04 00      sub sp, 4
0225   0542             ;; dest_len = strlen(dest); 
0226   0542 FA FF FF      lea d, [bp + -1] ; $dest_len
0227   0545 DA            push d
0228   0546 FA 05 00      lea d, [bp + 5] ; $dest
0229   0549 2A            mov b, [d]
0230   054A FD AB         swp b
0231   054C D8            push b
0232   054D 07 F2 05      call strlen
0233   0550 51 02 00      add sp, 2
0234   0553 E7            pop d
0235   0554 FD 43         mov [d], b
0236   0556             ;; for (i = 0; src[i] != 0; i=i+1) { 
0237   0556             _for4_init:
0238   0556 FA FD FF      lea d, [bp + -3] ; $i
0239   0559 DA            push d
0240   055A 26 00 00      mov b, $0
0241   055D E7            pop d
0242   055E FD 43         mov [d], b
0243   0560             _for4_cond:
0244   0560 FA 07 00      lea d, [bp + 7] ; $src
0245   0563 FD 2A         mov d, [d]
0246   0565 D7            push a
0247   0566 DA            push d
0248   0567 FA FD FF      lea d, [bp + -3] ; $i
0249   056A 2A            mov b, [d]
0250   056B E7            pop d
0251   056C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0252   0570 E4            pop a
0253   0571 32            mov bl, [d]
0254   0572 A7 00         mov bh, 0
0255   0574             ; START RELATIONAL
0256   0574 D7            push a
0257   0575 11            mov a, b
0258   0576 26 00 00      mov b, $0
0259   0579 B0            cmp a, b
0260   057A FD 72         sneq ; !=
0261   057C E4            pop a
0262   057D             ; END RELATIONAL
0263   057D C0 00 00      cmp b, 0
0264   0580 C6 CB 05      je _for4_exit
0265   0583             _for4_block:
0266   0583             ;; dest[dest_len + i] = src[i]; 
0267   0583 FA 05 00      lea d, [bp + 5] ; $dest
0268   0586 FD 2A         mov d, [d]
0269   0588 D7            push a
0270   0589 DA            push d
0271   058A FA FF FF      lea d, [bp + -1] ; $dest_len
0272   058D 2A            mov b, [d]
0273   058E             ; START TERMS
0274   058E D7            push a
0275   058F 11            mov a, b
0276   0590 FA FD FF      lea d, [bp + -3] ; $i
0277   0593 2A            mov b, [d]
0278   0594 54            add a, b
0279   0595 27            mov b, a
0280   0596 E4            pop a
0281   0597             ; END TERMS
0282   0597 E7            pop d
0283   0598 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0284   059C E4            pop a
0285   059D DA            push d
0286   059E FA 07 00      lea d, [bp + 7] ; $src
0287   05A1 FD 2A         mov d, [d]
0288   05A3 D7            push a
0289   05A4 DA            push d
0290   05A5 FA FD FF      lea d, [bp + -3] ; $i
0291   05A8 2A            mov b, [d]
0292   05A9 E7            pop d
0293   05AA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0294   05AE E4            pop a
0295   05AF 32            mov bl, [d]
0296   05B0 A7 00         mov bh, 0
0297   05B2 E7            pop d
0298   05B3 FD 3E         mov [d], bl
0299   05B5             _for4_update:
0300   05B5 FA FD FF      lea d, [bp + -3] ; $i
0301   05B8 DA            push d
0302   05B9 FA FD FF      lea d, [bp + -3] ; $i
0303   05BC 2A            mov b, [d]
0304   05BD             ; START TERMS
0305   05BD D7            push a
0306   05BE 11            mov a, b
0307   05BF 26 01 00      mov b, $1
0308   05C2 54            add a, b
0309   05C3 27            mov b, a
0310   05C4 E4            pop a
0311   05C5             ; END TERMS
0312   05C5 E7            pop d
0313   05C6 FD 43         mov [d], b
0314   05C8 0A 60 05      jmp _for4_cond
0315   05CB             _for4_exit:
0316   05CB             ;; dest[dest_len + i] = 0; 
0317   05CB FA 05 00      lea d, [bp + 5] ; $dest
0318   05CE FD 2A         mov d, [d]
0319   05D0 D7            push a
0320   05D1 DA            push d
0321   05D2 FA FF FF      lea d, [bp + -1] ; $dest_len
0322   05D5 2A            mov b, [d]
0323   05D6             ; START TERMS
0324   05D6 D7            push a
0325   05D7 11            mov a, b
0326   05D8 FA FD FF      lea d, [bp + -3] ; $i
0327   05DB 2A            mov b, [d]
0328   05DC 54            add a, b
0329   05DD 27            mov b, a
0330   05DE E4            pop a
0331   05DF             ; END TERMS
0332   05DF E7            pop d
0333   05E0 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0334   05E4 E4            pop a
0335   05E5 DA            push d
0336   05E6 26 00 00      mov b, $0
0337   05E9 E7            pop d
0338   05EA FD 3E         mov [d], bl
0339   05EC             ;; return dest; 
0340   05EC FA 05 00      lea d, [bp + 5] ; $dest
0341   05EF 2A            mov b, [d]
0342   05F0 F9            leave
0343   05F1 09            ret
0344   05F2             
0345   05F2             strlen:
0346   05F2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0347   05F5             ; $length 
0348   05F5 52 02 00      sub sp, 2
0349   05F8             ;; length = 0; 
0350   05F8 FA FF FF      lea d, [bp + -1] ; $length
0351   05FB DA            push d
0352   05FC 26 00 00      mov b, $0
0353   05FF E7            pop d
0354   0600 FD 43         mov [d], b
0355   0602             ;; while (str[length] != 0) { 
0356   0602             _while5_cond:
0357   0602 FA 05 00      lea d, [bp + 5] ; $str
0358   0605 FD 2A         mov d, [d]
0359   0607 D7            push a
0360   0608 DA            push d
0361   0609 FA FF FF      lea d, [bp + -1] ; $length
0362   060C 2A            mov b, [d]
0363   060D E7            pop d
0364   060E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0365   0612 E4            pop a
0366   0613 32            mov bl, [d]
0367   0614 A7 00         mov bh, 0
0368   0616             ; START RELATIONAL
0369   0616 D7            push a
0370   0617 11            mov a, b
0371   0618 26 00 00      mov b, $0
0372   061B B0            cmp a, b
0373   061C FD 72         sneq ; !=
0374   061E E4            pop a
0375   061F             ; END RELATIONAL
0376   061F C0 00 00      cmp b, 0
0377   0622 C6 35 06      je _while5_exit
0378   0625             _while5_block:
0379   0625             ;; length++; 
0380   0625 FA FF FF      lea d, [bp + -1] ; $length
0381   0628 2A            mov b, [d]
0382   0629 D8            push b
0383   062A FD 77         inc b
0384   062C FA FF FF      lea d, [bp + -1] ; $length
0385   062F FD 43         mov [d], b
0386   0631 E5            pop b
0387   0632 0A 02 06      jmp _while5_cond
0388   0635             _while5_exit:
0389   0635             ;; return length; 
0390   0635 FA FF FF      lea d, [bp + -1] ; $length
0391   0638 2A            mov b, [d]
0392   0639 F9            leave
0393   063A 09            ret
0394   063B             
0395   063B             printf:
0396   063B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0397   063E             ; $p 
0398   063E             ; $fp 
0399   063E             ; $i 
0400   063E 52 06 00      sub sp, 6
0401   0641             ;; fp = format; 
0402   0641 FA FD FF      lea d, [bp + -3] ; $fp
0403   0644 DA            push d
0404   0645 FA 05 00      lea d, [bp + 5] ; $format
0405   0648 2A            mov b, [d]
0406   0649 E7            pop d
0407   064A FD 43         mov [d], b
0408   064C             ;; p = &format + 2; 
0409   064C FA FF FF      lea d, [bp + -1] ; $p
0410   064F DA            push d
0411   0650 FA 05 00      lea d, [bp + 5] ; $format
0412   0653 2D            mov b, d
0413   0654             ; START TERMS
0414   0654 D7            push a
0415   0655 11            mov a, b
0416   0656 26 02 00      mov b, $2
0417   0659 54            add a, b
0418   065A 27            mov b, a
0419   065B E4            pop a
0420   065C             ; END TERMS
0421   065C E7            pop d
0422   065D FD 43         mov [d], b
0423   065F             ;; for(;;){ 
0424   065F             _for6_init:
0425   065F             _for6_cond:
0426   065F             _for6_block:
0427   065F             ;; if(!*fp) break; 
0428   065F             _if7_cond:
0429   065F FA FD FF      lea d, [bp + -3] ; $fp
0430   0662 2A            mov b, [d]
0431   0663 74            mov d, b
0432   0664 32            mov bl, [d]
0433   0665 A7 00         mov bh, 0
0434   0667 C0 00 00      cmp b, 0
0435   066A FD 71         seq ; !
0436   066C C0 00 00      cmp b, 0
0437   066F C6 78 06      je _if7_else
0438   0672             _if7_true:
0439   0672             ;; break; 
0440   0672 0A 87 08      jmp _for6_exit ; for break
0441   0675 0A 84 08      jmp _if7_exit
0442   0678             _if7_else:
0443   0678             ;; if(*fp == '%'){ 
0444   0678             _if8_cond:
0445   0678 FA FD FF      lea d, [bp + -3] ; $fp
0446   067B 2A            mov b, [d]
0447   067C 74            mov d, b
0448   067D 32            mov bl, [d]
0449   067E A7 00         mov bh, 0
0450   0680             ; START RELATIONAL
0451   0680 D7            push a
0452   0681 11            mov a, b
0453   0682 26 25 00      mov b, $25
0454   0685 B0            cmp a, b
0455   0686 FD 71         seq ; ==
0456   0688 E4            pop a
0457   0689             ; END RELATIONAL
0458   0689 C0 00 00      cmp b, 0
0459   068C C6 68 08      je _if8_else
0460   068F             _if8_true:
0461   068F             ;; fp++; 
0462   068F FA FD FF      lea d, [bp + -3] ; $fp
0463   0692 2A            mov b, [d]
0464   0693 D8            push b
0465   0694 FD 77         inc b
0466   0696 FA FD FF      lea d, [bp + -3] ; $fp
0467   0699 FD 43         mov [d], b
0468   069B E5            pop b
0469   069C             ;; switch(*fp){ 
0470   069C             _switch9_expr:
0471   069C FA FD FF      lea d, [bp + -3] ; $fp
0472   069F 2A            mov b, [d]
0473   06A0 74            mov d, b
0474   06A1 32            mov bl, [d]
0475   06A2 A7 00         mov bh, 0
0476   06A4             _switch9_comparisons:
0477   06A4 C1 6C         cmp bl, $6c
0478   06A6 C6 D2 06      je _switch9_case0
0479   06A9 C1 4C         cmp bl, $4c
0480   06AB C6 D2 06      je _switch9_case1
0481   06AE C1 64         cmp bl, $64
0482   06B0 C6 A3 07      je _switch9_case2
0483   06B3 C1 69         cmp bl, $69
0484   06B5 C6 A3 07      je _switch9_case3
0485   06B8 C1 75         cmp bl, $75
0486   06BA C6 C8 07      je _switch9_case4
0487   06BD C1 78         cmp bl, $78
0488   06BF C6 ED 07      je _switch9_case5
0489   06C2 C1 63         cmp bl, $63
0490   06C4 C6 0C 08      je _switch9_case6
0491   06C7 C1 73         cmp bl, $73
0492   06C9 C6 2C 08      je _switch9_case7
0493   06CC 0A 4C 08      jmp _switch9_default
0494   06CF 0A 58 08      jmp _switch9_exit
0495   06D2             _switch9_case0:
0496   06D2             _switch9_case1:
0497   06D2             ;; fp++; 
0498   06D2 FA FD FF      lea d, [bp + -3] ; $fp
0499   06D5 2A            mov b, [d]
0500   06D6 D8            push b
0501   06D7 FD 77         inc b
0502   06D9 FA FD FF      lea d, [bp + -3] ; $fp
0503   06DC FD 43         mov [d], b
0504   06DE E5            pop b
0505   06DF             ;; if(*fp == 'd' || *fp == 'i') 
0506   06DF             _if10_cond:
0507   06DF FA FD FF      lea d, [bp + -3] ; $fp
0508   06E2 2A            mov b, [d]
0509   06E3 74            mov d, b
0510   06E4 32            mov bl, [d]
0511   06E5 A7 00         mov bh, 0
0512   06E7             ; START RELATIONAL
0513   06E7 D7            push a
0514   06E8 11            mov a, b
0515   06E9 26 64 00      mov b, $64
0516   06EC B0            cmp a, b
0517   06ED FD 71         seq ; ==
0518   06EF E4            pop a
0519   06F0             ; END RELATIONAL
0520   06F0 D7            push a
0521   06F1 11            mov a, b
0522   06F2 FA FD FF      lea d, [bp + -3] ; $fp
0523   06F5 2A            mov b, [d]
0524   06F6 74            mov d, b
0525   06F7 32            mov bl, [d]
0526   06F8 A7 00         mov bh, 0
0527   06FA             ; START RELATIONAL
0528   06FA D7            push a
0529   06FB 11            mov a, b
0530   06FC 26 69 00      mov b, $69
0531   06FF B0            cmp a, b
0532   0700 FD 71         seq ; ==
0533   0702 E4            pop a
0534   0703             ; END RELATIONAL
0535   0703 FD A8         sor a, b ; ||
0536   0705 E4            pop a
0537   0706 C0 00 00      cmp b, 0
0538   0709 C6 20 07      je _if10_else
0539   070C             _if10_true:
0540   070C             ;; print_signed_long(*(long *)p); 
0541   070C FD 79         mov g, b
0542   070E 28            mov b, c
0543   070F FD AB         swp b
0544   0711 D8            push b
0545   0712 FD 27         mov b, g
0546   0714 FD AB         swp b
0547   0716 D8            push b
0548   0717 07 2B 0C      call print_signed_long
0549   071A 51 04 00      add sp, 4
0550   071D 0A 8D 07      jmp _if10_exit
0551   0720             _if10_else:
0552   0720             ;; if(*fp == 'u') 
0553   0720             _if11_cond:
0554   0720 FA FD FF      lea d, [bp + -3] ; $fp
0555   0723 2A            mov b, [d]
0556   0724 74            mov d, b
0557   0725 32            mov bl, [d]
0558   0726 A7 00         mov bh, 0
0559   0728             ; START RELATIONAL
0560   0728 D7            push a
0561   0729 11            mov a, b
0562   072A 26 75 00      mov b, $75
0563   072D B0            cmp a, b
0564   072E FD 71         seq ; ==
0565   0730 E4            pop a
0566   0731             ; END RELATIONAL
0567   0731 C0 00 00      cmp b, 0
0568   0734 C6 4B 07      je _if11_else
0569   0737             _if11_true:
0570   0737             ;; print_unsigned_long(*(unsigned long *)p); 
0571   0737 FD 79         mov g, b
0572   0739 28            mov b, c
0573   073A FD AB         swp b
0574   073C D8            push b
0575   073D FD 27         mov b, g
0576   073F FD AB         swp b
0577   0741 D8            push b
0578   0742 07 60 0D      call print_unsigned_long
0579   0745 51 04 00      add sp, 4
0580   0748 0A 8D 07      jmp _if11_exit
0581   074B             _if11_else:
0582   074B             ;; if(*fp == 'x') 
0583   074B             _if12_cond:
0584   074B FA FD FF      lea d, [bp + -3] ; $fp
0585   074E 2A            mov b, [d]
0586   074F 74            mov d, b
0587   0750 32            mov bl, [d]
0588   0751 A7 00         mov bh, 0
0589   0753             ; START RELATIONAL
0590   0753 D7            push a
0591   0754 11            mov a, b
0592   0755 26 78 00      mov b, $78
0593   0758 B0            cmp a, b
0594   0759 FD 71         seq ; ==
0595   075B E4            pop a
0596   075C             ; END RELATIONAL
0597   075C C0 00 00      cmp b, 0
0598   075F C6 81 07      je _if12_else
0599   0762             _if12_true:
0600   0762             ;; printx32(*(long int *)p); 
0601   0762 FA FF FF      lea d, [bp + -1] ; $p
0602   0765 2A            mov b, [d]
0603   0766 74            mov d, b
0604   0767 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0605   076A FD 39         mov c, b ; And place it into C
0606   076C 2A            mov b, [d] ; Lower Word in B
0607   076D FD 79         mov g, b
0608   076F 28            mov b, c
0609   0770 FD AB         swp b
0610   0772 D8            push b
0611   0773 FD 27         mov b, g
0612   0775 FD AB         swp b
0613   0777 D8            push b
0614   0778 07 9E 08      call printx32
0615   077B 51 04 00      add sp, 4
0616   077E 0A 8D 07      jmp _if12_exit
0617   0781             _if12_else:
0618   0781             ;; err("Unexpected format in printf."); 
0619   0781 26 F6 16      mov b, __s2 ; "Unexpected format in printf."
0620   0784 FD AB         swp b
0621   0786 D8            push b
0622   0787 07 89 08      call err
0623   078A 51 02 00      add sp, 2
0624   078D             _if12_exit:
0625   078D             _if11_exit:
0626   078D             _if10_exit:
0627   078D             ;; p = p + 4; 
0628   078D FA FF FF      lea d, [bp + -1] ; $p
0629   0790 DA            push d
0630   0791 FA FF FF      lea d, [bp + -1] ; $p
0631   0794 2A            mov b, [d]
0632   0795             ; START TERMS
0633   0795 D7            push a
0634   0796 11            mov a, b
0635   0797 26 04 00      mov b, $4
0636   079A 54            add a, b
0637   079B 27            mov b, a
0638   079C E4            pop a
0639   079D             ; END TERMS
0640   079D E7            pop d
0641   079E FD 43         mov [d], b
0642   07A0             ;; break; 
0643   07A0 0A 58 08      jmp _switch9_exit ; case break
0644   07A3             _switch9_case2:
0645   07A3             _switch9_case3:
0646   07A3             ;; print_signed(*(int*)p); 
0647   07A3 FA FF FF      lea d, [bp + -1] ; $p
0648   07A6 2A            mov b, [d]
0649   07A7 74            mov d, b
0650   07A8 2A            mov b, [d]
0651   07A9 FD AB         swp b
0652   07AB D8            push b
0653   07AC 07 3A 0B      call print_signed
0654   07AF 51 02 00      add sp, 2
0655   07B2             ;; p = p + 2; 
0656   07B2 FA FF FF      lea d, [bp + -1] ; $p
0657   07B5 DA            push d
0658   07B6 FA FF FF      lea d, [bp + -1] ; $p
0659   07B9 2A            mov b, [d]
0660   07BA             ; START TERMS
0661   07BA D7            push a
0662   07BB 11            mov a, b
0663   07BC 26 02 00      mov b, $2
0664   07BF 54            add a, b
0665   07C0 27            mov b, a
0666   07C1 E4            pop a
0667   07C2             ; END TERMS
0668   07C2 E7            pop d
0669   07C3 FD 43         mov [d], b
0670   07C5             ;; break; 
0671   07C5 0A 58 08      jmp _switch9_exit ; case break
0672   07C8             _switch9_case4:
0673   07C8             ;; print_unsigned(*(unsigned int*)p); 
0674   07C8 FA FF FF      lea d, [bp + -1] ; $p
0675   07CB 2A            mov b, [d]
0676   07CC 74            mov d, b
0677   07CD 2A            mov b, [d]
0678   07CE FD AB         swp b
0679   07D0 D8            push b
0680   07D1 07 57 0E      call print_unsigned
0681   07D4 51 02 00      add sp, 2
0682   07D7             ;; p = p + 2; 
0683   07D7 FA FF FF      lea d, [bp + -1] ; $p
0684   07DA DA            push d
0685   07DB FA FF FF      lea d, [bp + -1] ; $p
0686   07DE 2A            mov b, [d]
0687   07DF             ; START TERMS
0688   07DF D7            push a
0689   07E0 11            mov a, b
0690   07E1 26 02 00      mov b, $2
0691   07E4 54            add a, b
0692   07E5 27            mov b, a
0693   07E6 E4            pop a
0694   07E7             ; END TERMS
0695   07E7 E7            pop d
0696   07E8 FD 43         mov [d], b
0697   07EA             ;; break; 
0698   07EA 0A 58 08      jmp _switch9_exit ; case break
0699   07ED             _switch9_case5:
0700   07ED             
0701   07ED             ; --- BEGIN INLINE ASM BLOCK
0702   07ED FA FF FF      lea d, [bp + -1] ; $p
0703   07F0 FD 2A         mov d, [d]
0704   07F2 2A            mov b, [d]
0705   07F3 07 08 13      call print_u16x
0706   07F6             ; --- END INLINE ASM BLOCK
0707   07F6             
0708   07F6             ;; p = p + 2; 
0709   07F6 FA FF FF      lea d, [bp + -1] ; $p
0710   07F9 DA            push d
0711   07FA FA FF FF      lea d, [bp + -1] ; $p
0712   07FD 2A            mov b, [d]
0713   07FE             ; START TERMS
0714   07FE D7            push a
0715   07FF 11            mov a, b
0716   0800 26 02 00      mov b, $2
0717   0803 54            add a, b
0718   0804 27            mov b, a
0719   0805 E4            pop a
0720   0806             ; END TERMS
0721   0806 E7            pop d
0722   0807 FD 43         mov [d], b
0723   0809             ;; break; 
0724   0809 0A 58 08      jmp _switch9_exit ; case break
0725   080C             _switch9_case6:
0726   080C             
0727   080C             ; --- BEGIN INLINE ASM BLOCK
0728   080C FA FF FF      lea d, [bp + -1] ; $p
0729   080F FD 2A         mov d, [d]
0730   0811 1E            mov al, [d]
0731   0812 23            mov ah, al
0732   0813 07 66 11      call _putchar
0733   0816             ; --- END INLINE ASM BLOCK
0734   0816             
0735   0816             ;; p = p + 2; 
0736   0816 FA FF FF      lea d, [bp + -1] ; $p
0737   0819 DA            push d
0738   081A FA FF FF      lea d, [bp + -1] ; $p
0739   081D 2A            mov b, [d]
0740   081E             ; START TERMS
0741   081E D7            push a
0742   081F 11            mov a, b
0743   0820 26 02 00      mov b, $2
0744   0823 54            add a, b
0745   0824 27            mov b, a
0746   0825 E4            pop a
0747   0826             ; END TERMS
0748   0826 E7            pop d
0749   0827 FD 43         mov [d], b
0750   0829             ;; break; 
0751   0829 0A 58 08      jmp _switch9_exit ; case break
0752   082C             _switch9_case7:
0753   082C             
0754   082C             ; --- BEGIN INLINE ASM BLOCK
0755   082C FA FF FF      lea d, [bp + -1] ; $p
0756   082F FD 2A         mov d, [d]
0757   0831 FD 2A         mov d, [d]
0758   0833 07 B0 12      call _puts
0759   0836             ; --- END INLINE ASM BLOCK
0760   0836             
0761   0836             ;; p = p + 2; 
0762   0836 FA FF FF      lea d, [bp + -1] ; $p
0763   0839 DA            push d
0764   083A FA FF FF      lea d, [bp + -1] ; $p
0765   083D 2A            mov b, [d]
0766   083E             ; START TERMS
0767   083E D7            push a
0768   083F 11            mov a, b
0769   0840 26 02 00      mov b, $2
0770   0843 54            add a, b
0771   0844 27            mov b, a
0772   0845 E4            pop a
0773   0846             ; END TERMS
0774   0846 E7            pop d
0775   0847 FD 43         mov [d], b
0776   0849             ;; break; 
0777   0849 0A 58 08      jmp _switch9_exit ; case break
0778   084C             _switch9_default:
0779   084C             ;; print("Error: Unknown argument type.\n"); 
0780   084C 26 13 17      mov b, __s3 ; "Error: Unknown argument type.\n"
0781   084F FD AB         swp b
0782   0851 D8            push b
0783   0852 07 87 0F      call print
0784   0855 51 02 00      add sp, 2
0785   0858             _switch9_exit:
0786   0858             ;; fp++; 
0787   0858 FA FD FF      lea d, [bp + -3] ; $fp
0788   085B 2A            mov b, [d]
0789   085C D8            push b
0790   085D FD 77         inc b
0791   085F FA FD FF      lea d, [bp + -3] ; $fp
0792   0862 FD 43         mov [d], b
0793   0864 E5            pop b
0794   0865 0A 84 08      jmp _if8_exit
0795   0868             _if8_else:
0796   0868             ;; putchar(*fp); 
0797   0868 FA FD FF      lea d, [bp + -3] ; $fp
0798   086B 2A            mov b, [d]
0799   086C 74            mov d, b
0800   086D 32            mov bl, [d]
0801   086E A7 00         mov bh, 0
0802   0870 DD            push bl
0803   0871 07 3F 0F      call putchar
0804   0874 51 01 00      add sp, 1
0805   0877             ;; fp++; 
0806   0877 FA FD FF      lea d, [bp + -3] ; $fp
0807   087A 2A            mov b, [d]
0808   087B D8            push b
0809   087C FD 77         inc b
0810   087E FA FD FF      lea d, [bp + -3] ; $fp
0811   0881 FD 43         mov [d], b
0812   0883 E5            pop b
0813   0884             _if8_exit:
0814   0884             _if7_exit:
0815   0884             _for6_update:
0816   0884 0A 5F 06      jmp _for6_cond
0817   0887             _for6_exit:
0818   0887 F9            leave
0819   0888 09            ret
0820   0889             
0821   0889             err:
0822   0889 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0823   088C             ;; print(e); 
0824   088C FA 05 00      lea d, [bp + 5] ; $e
0825   088F 2A            mov b, [d]
0826   0890 FD AB         swp b
0827   0892 D8            push b
0828   0893 07 87 0F      call print
0829   0896 51 02 00      add sp, 2
0830   0899             ;; exit(); 
0831   0899 07 01 10      call exit
0832   089C F9            leave
0833   089D 09            ret
0834   089E             
0835   089E             printx32:
0836   089E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0837   08A1             
0838   08A1             ; --- BEGIN INLINE ASM BLOCK
0839   08A1 FA 05 00      lea d, [bp + 5] ; $hex
0840   08A4 2B 02 00      mov b, [d+2]
0841   08A7 07 08 13      call print_u16x
0842   08AA 2A            mov b, [d]
0843   08AB 07 08 13      call print_u16x
0844   08AE             ; --- END INLINE ASM BLOCK
0845   08AE             
0846   08AE F9            leave
0847   08AF 09            ret
0848   08B0             
0849   08B0             printx16:
0850   08B0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0851   08B3             
0852   08B3             ; --- BEGIN INLINE ASM BLOCK
0853   08B3 FA 05 00      lea d, [bp + 5] ; $hex
0854   08B6 2A            mov b, [d]
0855   08B7 07 08 13      call print_u16x
0856   08BA             ; --- END INLINE ASM BLOCK
0857   08BA             
0858   08BA F9            leave
0859   08BB 09            ret
0860   08BC             
0861   08BC             printx8:
0862   08BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0863   08BF             
0864   08BF             ; --- BEGIN INLINE ASM BLOCK
0865   08BF FA 05 00      lea d, [bp + 5] ; $hex
0866   08C2 32            mov bl, [d]
0867   08C3 07 4C 13      call print_u8x
0868   08C6             ; --- END INLINE ASM BLOCK
0869   08C6             
0870   08C6 F9            leave
0871   08C7 09            ret
0872   08C8             
0873   08C8             hex_to_int:
0874   08C8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0875   08CB             ; $value 
0876   08CB 10 00 00      mov a, $0
0877   08CE 45 FF FF      mov [bp + -1], a
0878   08D1             ; $i 
0879   08D1             ; $hex_char 
0880   08D1             ; $len 
0881   08D1 52 07 00      sub sp, 7
0882   08D4             ;; len = strlen(hex_string); 
0883   08D4 FA FA FF      lea d, [bp + -6] ; $len
0884   08D7 DA            push d
0885   08D8 FA 05 00      lea d, [bp + 5] ; $hex_string
0886   08DB 2A            mov b, [d]
0887   08DC FD AB         swp b
0888   08DE D8            push b
0889   08DF 07 F2 05      call strlen
0890   08E2 51 02 00      add sp, 2
0891   08E5 E7            pop d
0892   08E6 FD 43         mov [d], b
0893   08E8             ;; for (i = 0; i < len; i++) { 
0894   08E8             _for13_init:
0895   08E8 FA FD FF      lea d, [bp + -3] ; $i
0896   08EB DA            push d
0897   08EC 26 00 00      mov b, $0
0898   08EF E7            pop d
0899   08F0 FD 43         mov [d], b
0900   08F2             _for13_cond:
0901   08F2 FA FD FF      lea d, [bp + -3] ; $i
0902   08F5 2A            mov b, [d]
0903   08F6             ; START RELATIONAL
0904   08F6 D7            push a
0905   08F7 11            mov a, b
0906   08F8 FA FA FF      lea d, [bp + -6] ; $len
0907   08FB 2A            mov b, [d]
0908   08FC B0            cmp a, b
0909   08FD FD 73         slt ; < 
0910   08FF E4            pop a
0911   0900             ; END RELATIONAL
0912   0900 C0 00 00      cmp b, 0
0913   0903 C6 08 0A      je _for13_exit
0914   0906             _for13_block:
0915   0906             ;; hex_char = hex_string[i]; 
0916   0906 FA FC FF      lea d, [bp + -4] ; $hex_char
0917   0909 DA            push d
0918   090A FA 05 00      lea d, [bp + 5] ; $hex_string
0919   090D FD 2A         mov d, [d]
0920   090F D7            push a
0921   0910 DA            push d
0922   0911 FA FD FF      lea d, [bp + -3] ; $i
0923   0914 2A            mov b, [d]
0924   0915 E7            pop d
0925   0916 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0926   091A E4            pop a
0927   091B 32            mov bl, [d]
0928   091C A7 00         mov bh, 0
0929   091E E7            pop d
0930   091F FD 3E         mov [d], bl
0931   0921             ;; if (hex_char >= 'a' && hex_char <= 'f')  
0932   0921             _if14_cond:
0933   0921 FA FC FF      lea d, [bp + -4] ; $hex_char
0934   0924 32            mov bl, [d]
0935   0925 A7 00         mov bh, 0
0936   0927             ; START RELATIONAL
0937   0927 D7            push a
0938   0928 11            mov a, b
0939   0929 26 61 00      mov b, $61
0940   092C B0            cmp a, b
0941   092D FD 80         sge ; >=
0942   092F E4            pop a
0943   0930             ; END RELATIONAL
0944   0930 D7            push a
0945   0931 11            mov a, b
0946   0932 FA FC FF      lea d, [bp + -4] ; $hex_char
0947   0935 32            mov bl, [d]
0948   0936 A7 00         mov bh, 0
0949   0938             ; START RELATIONAL
0950   0938 D7            push a
0951   0939 11            mov a, b
0952   093A 26 66 00      mov b, $66
0953   093D B0            cmp a, b
0954   093E FD 74         sle ; <=
0955   0940 E4            pop a
0956   0941             ; END RELATIONAL
0957   0941 FD A7         sand a, b ; &&
0958   0943 E4            pop a
0959   0944 C0 00 00      cmp b, 0
0960   0947 C6 79 09      je _if14_else
0961   094A             _if14_true:
0962   094A             ;; value = (value * 16) + (hex_char - 'a' + 10); 
0963   094A FA FF FF      lea d, [bp + -1] ; $value
0964   094D DA            push d
0965   094E FA FF FF      lea d, [bp + -1] ; $value
0966   0951 2A            mov b, [d]
0967   0952             ; START FACTORS
0968   0952 D7            push a
0969   0953 11            mov a, b
0970   0954 26 10 00      mov b, $10
0971   0957 AC            mul a, b ; *
0972   0958 11            mov a, b
0973   0959 27            mov b, a
0974   095A E4            pop a
0975   095B             ; END FACTORS
0976   095B             ; START TERMS
0977   095B D7            push a
0978   095C 11            mov a, b
0979   095D FA FC FF      lea d, [bp + -4] ; $hex_char
0980   0960 32            mov bl, [d]
0981   0961 A7 00         mov bh, 0
0982   0963             ; START TERMS
0983   0963 D7            push a
0984   0964 11            mov a, b
0985   0965 26 61 00      mov b, $61
0986   0968 60            sub a, b
0987   0969 11            mov a, b
0988   096A 26 0A 00      mov b, $a
0989   096D 54            add a, b
0990   096E 27            mov b, a
0991   096F E4            pop a
0992   0970             ; END TERMS
0993   0970 54            add a, b
0994   0971 27            mov b, a
0995   0972 E4            pop a
0996   0973             ; END TERMS
0997   0973 E7            pop d
0998   0974 FD 43         mov [d], b
0999   0976 0A F8 09      jmp _if14_exit
1000   0979             _if14_else:
1001   0979             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1002   0979             _if15_cond:
1003   0979 FA FC FF      lea d, [bp + -4] ; $hex_char
1004   097C 32            mov bl, [d]
1005   097D A7 00         mov bh, 0
1006   097F             ; START RELATIONAL
1007   097F D7            push a
1008   0980 11            mov a, b
1009   0981 26 41 00      mov b, $41
1010   0984 B0            cmp a, b
1011   0985 FD 80         sge ; >=
1012   0987 E4            pop a
1013   0988             ; END RELATIONAL
1014   0988 D7            push a
1015   0989 11            mov a, b
1016   098A FA FC FF      lea d, [bp + -4] ; $hex_char
1017   098D 32            mov bl, [d]
1018   098E A7 00         mov bh, 0
1019   0990             ; START RELATIONAL
1020   0990 D7            push a
1021   0991 11            mov a, b
1022   0992 26 46 00      mov b, $46
1023   0995 B0            cmp a, b
1024   0996 FD 74         sle ; <=
1025   0998 E4            pop a
1026   0999             ; END RELATIONAL
1027   0999 FD A7         sand a, b ; &&
1028   099B E4            pop a
1029   099C C0 00 00      cmp b, 0
1030   099F C6 D1 09      je _if15_else
1031   09A2             _if15_true:
1032   09A2             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1033   09A2 FA FF FF      lea d, [bp + -1] ; $value
1034   09A5 DA            push d
1035   09A6 FA FF FF      lea d, [bp + -1] ; $value
1036   09A9 2A            mov b, [d]
1037   09AA             ; START FACTORS
1038   09AA D7            push a
1039   09AB 11            mov a, b
1040   09AC 26 10 00      mov b, $10
1041   09AF AC            mul a, b ; *
1042   09B0 11            mov a, b
1043   09B1 27            mov b, a
1044   09B2 E4            pop a
1045   09B3             ; END FACTORS
1046   09B3             ; START TERMS
1047   09B3 D7            push a
1048   09B4 11            mov a, b
1049   09B5 FA FC FF      lea d, [bp + -4] ; $hex_char
1050   09B8 32            mov bl, [d]
1051   09B9 A7 00         mov bh, 0
1052   09BB             ; START TERMS
1053   09BB D7            push a
1054   09BC 11            mov a, b
1055   09BD 26 41 00      mov b, $41
1056   09C0 60            sub a, b
1057   09C1 11            mov a, b
1058   09C2 26 0A 00      mov b, $a
1059   09C5 54            add a, b
1060   09C6 27            mov b, a
1061   09C7 E4            pop a
1062   09C8             ; END TERMS
1063   09C8 54            add a, b
1064   09C9 27            mov b, a
1065   09CA E4            pop a
1066   09CB             ; END TERMS
1067   09CB E7            pop d
1068   09CC FD 43         mov [d], b
1069   09CE 0A F8 09      jmp _if15_exit
1070   09D1             _if15_else:
1071   09D1             ;; value = (value * 16) + (hex_char - '0'); 
1072   09D1 FA FF FF      lea d, [bp + -1] ; $value
1073   09D4 DA            push d
1074   09D5 FA FF FF      lea d, [bp + -1] ; $value
1075   09D8 2A            mov b, [d]
1076   09D9             ; START FACTORS
1077   09D9 D7            push a
1078   09DA 11            mov a, b
1079   09DB 26 10 00      mov b, $10
1080   09DE AC            mul a, b ; *
1081   09DF 11            mov a, b
1082   09E0 27            mov b, a
1083   09E1 E4            pop a
1084   09E2             ; END FACTORS
1085   09E2             ; START TERMS
1086   09E2 D7            push a
1087   09E3 11            mov a, b
1088   09E4 FA FC FF      lea d, [bp + -4] ; $hex_char
1089   09E7 32            mov bl, [d]
1090   09E8 A7 00         mov bh, 0
1091   09EA             ; START TERMS
1092   09EA D7            push a
1093   09EB 11            mov a, b
1094   09EC 26 30 00      mov b, $30
1095   09EF 60            sub a, b
1096   09F0 27            mov b, a
1097   09F1 E4            pop a
1098   09F2             ; END TERMS
1099   09F2 54            add a, b
1100   09F3 27            mov b, a
1101   09F4 E4            pop a
1102   09F5             ; END TERMS
1103   09F5 E7            pop d
1104   09F6 FD 43         mov [d], b
1105   09F8             _if15_exit:
1106   09F8             _if14_exit:
1107   09F8             _for13_update:
1108   09F8 FA FD FF      lea d, [bp + -3] ; $i
1109   09FB 2A            mov b, [d]
1110   09FC D8            push b
1111   09FD FD 77         inc b
1112   09FF FA FD FF      lea d, [bp + -3] ; $i
1113   0A02 FD 43         mov [d], b
1114   0A04 E5            pop b
1115   0A05 0A F2 08      jmp _for13_cond
1116   0A08             _for13_exit:
1117   0A08             ;; return value; 
1118   0A08 FA FF FF      lea d, [bp + -1] ; $value
1119   0A0B 2A            mov b, [d]
1120   0A0C F9            leave
1121   0A0D 09            ret
1122   0A0E             
1123   0A0E             atoi:
1124   0A0E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1125   0A11             ; $result 
1126   0A11 10 00 00      mov a, $0
1127   0A14 45 FF FF      mov [bp + -1], a
1128   0A17             ; $sign 
1129   0A17 10 01 00      mov a, $1
1130   0A1A 45 FD FF      mov [bp + -3], a
1131   0A1D 52 04 00      sub sp, 4
1132   0A20             ;; while (*str == ' ') str++; 
1133   0A20             _while16_cond:
1134   0A20 FA 05 00      lea d, [bp + 5] ; $str
1135   0A23 2A            mov b, [d]
1136   0A24 74            mov d, b
1137   0A25 32            mov bl, [d]
1138   0A26 A7 00         mov bh, 0
1139   0A28             ; START RELATIONAL
1140   0A28 D7            push a
1141   0A29 11            mov a, b
1142   0A2A 26 20 00      mov b, $20
1143   0A2D B0            cmp a, b
1144   0A2E FD 71         seq ; ==
1145   0A30 E4            pop a
1146   0A31             ; END RELATIONAL
1147   0A31 C0 00 00      cmp b, 0
1148   0A34 C6 47 0A      je _while16_exit
1149   0A37             _while16_block:
1150   0A37             ;; str++; 
1151   0A37 FA 05 00      lea d, [bp + 5] ; $str
1152   0A3A 2A            mov b, [d]
1153   0A3B D8            push b
1154   0A3C FD 77         inc b
1155   0A3E FA 05 00      lea d, [bp + 5] ; $str
1156   0A41 FD 43         mov [d], b
1157   0A43 E5            pop b
1158   0A44 0A 20 0A      jmp _while16_cond
1159   0A47             _while16_exit:
1160   0A47             ;; if (*str == '-' || *str == '+') { 
1161   0A47             _if17_cond:
1162   0A47 FA 05 00      lea d, [bp + 5] ; $str
1163   0A4A 2A            mov b, [d]
1164   0A4B 74            mov d, b
1165   0A4C 32            mov bl, [d]
1166   0A4D A7 00         mov bh, 0
1167   0A4F             ; START RELATIONAL
1168   0A4F D7            push a
1169   0A50 11            mov a, b
1170   0A51 26 2D 00      mov b, $2d
1171   0A54 B0            cmp a, b
1172   0A55 FD 71         seq ; ==
1173   0A57 E4            pop a
1174   0A58             ; END RELATIONAL
1175   0A58 D7            push a
1176   0A59 11            mov a, b
1177   0A5A FA 05 00      lea d, [bp + 5] ; $str
1178   0A5D 2A            mov b, [d]
1179   0A5E 74            mov d, b
1180   0A5F 32            mov bl, [d]
1181   0A60 A7 00         mov bh, 0
1182   0A62             ; START RELATIONAL
1183   0A62 D7            push a
1184   0A63 11            mov a, b
1185   0A64 26 2B 00      mov b, $2b
1186   0A67 B0            cmp a, b
1187   0A68 FD 71         seq ; ==
1188   0A6A E4            pop a
1189   0A6B             ; END RELATIONAL
1190   0A6B FD A8         sor a, b ; ||
1191   0A6D E4            pop a
1192   0A6E C0 00 00      cmp b, 0
1193   0A71 C6 AA 0A      je _if17_exit
1194   0A74             _if17_true:
1195   0A74             ;; if (*str == '-') sign = -1; 
1196   0A74             _if18_cond:
1197   0A74 FA 05 00      lea d, [bp + 5] ; $str
1198   0A77 2A            mov b, [d]
1199   0A78 74            mov d, b
1200   0A79 32            mov bl, [d]
1201   0A7A A7 00         mov bh, 0
1202   0A7C             ; START RELATIONAL
1203   0A7C D7            push a
1204   0A7D 11            mov a, b
1205   0A7E 26 2D 00      mov b, $2d
1206   0A81 B0            cmp a, b
1207   0A82 FD 71         seq ; ==
1208   0A84 E4            pop a
1209   0A85             ; END RELATIONAL
1210   0A85 C0 00 00      cmp b, 0
1211   0A88 C6 9A 0A      je _if18_exit
1212   0A8B             _if18_true:
1213   0A8B             ;; sign = -1; 
1214   0A8B FA FD FF      lea d, [bp + -3] ; $sign
1215   0A8E DA            push d
1216   0A8F 26 01 00      mov b, $1
1217   0A92 FD 97         neg b
1218   0A94 E7            pop d
1219   0A95 FD 43         mov [d], b
1220   0A97 0A 9A 0A      jmp _if18_exit
1221   0A9A             _if18_exit:
1222   0A9A             ;; str++; 
1223   0A9A FA 05 00      lea d, [bp + 5] ; $str
1224   0A9D 2A            mov b, [d]
1225   0A9E D8            push b
1226   0A9F FD 77         inc b
1227   0AA1 FA 05 00      lea d, [bp + 5] ; $str
1228   0AA4 FD 43         mov [d], b
1229   0AA6 E5            pop b
1230   0AA7 0A AA 0A      jmp _if17_exit
1231   0AAA             _if17_exit:
1232   0AAA             ;; while (*str >= '0' && *str <= '9') { 
1233   0AAA             _while19_cond:
1234   0AAA FA 05 00      lea d, [bp + 5] ; $str
1235   0AAD 2A            mov b, [d]
1236   0AAE 74            mov d, b
1237   0AAF 32            mov bl, [d]
1238   0AB0 A7 00         mov bh, 0
1239   0AB2             ; START RELATIONAL
1240   0AB2 D7            push a
1241   0AB3 11            mov a, b
1242   0AB4 26 30 00      mov b, $30
1243   0AB7 B0            cmp a, b
1244   0AB8 FD 82         sgeu ; >= (unsigned)
1245   0ABA E4            pop a
1246   0ABB             ; END RELATIONAL
1247   0ABB D7            push a
1248   0ABC 11            mov a, b
1249   0ABD FA 05 00      lea d, [bp + 5] ; $str
1250   0AC0 2A            mov b, [d]
1251   0AC1 74            mov d, b
1252   0AC2 32            mov bl, [d]
1253   0AC3 A7 00         mov bh, 0
1254   0AC5             ; START RELATIONAL
1255   0AC5 D7            push a
1256   0AC6 11            mov a, b
1257   0AC7 26 39 00      mov b, $39
1258   0ACA B0            cmp a, b
1259   0ACB FD 76         sleu ; <= (unsigned)
1260   0ACD E4            pop a
1261   0ACE             ; END RELATIONAL
1262   0ACE FD A7         sand a, b ; &&
1263   0AD0 E4            pop a
1264   0AD1 C0 00 00      cmp b, 0
1265   0AD4 C6 10 0B      je _while19_exit
1266   0AD7             _while19_block:
1267   0AD7             ;; result = result * 10 + (*str - '0'); 
1268   0AD7 FA FF FF      lea d, [bp + -1] ; $result
1269   0ADA DA            push d
1270   0ADB FA FF FF      lea d, [bp + -1] ; $result
1271   0ADE 2A            mov b, [d]
1272   0ADF             ; START FACTORS
1273   0ADF D7            push a
1274   0AE0 11            mov a, b
1275   0AE1 26 0A 00      mov b, $a
1276   0AE4 AC            mul a, b ; *
1277   0AE5 11            mov a, b
1278   0AE6 27            mov b, a
1279   0AE7 E4            pop a
1280   0AE8             ; END FACTORS
1281   0AE8             ; START TERMS
1282   0AE8 D7            push a
1283   0AE9 11            mov a, b
1284   0AEA FA 05 00      lea d, [bp + 5] ; $str
1285   0AED 2A            mov b, [d]
1286   0AEE 74            mov d, b
1287   0AEF 32            mov bl, [d]
1288   0AF0 A7 00         mov bh, 0
1289   0AF2             ; START TERMS
1290   0AF2 D7            push a
1291   0AF3 11            mov a, b
1292   0AF4 26 30 00      mov b, $30
1293   0AF7 60            sub a, b
1294   0AF8 27            mov b, a
1295   0AF9 E4            pop a
1296   0AFA             ; END TERMS
1297   0AFA 54            add a, b
1298   0AFB 27            mov b, a
1299   0AFC E4            pop a
1300   0AFD             ; END TERMS
1301   0AFD E7            pop d
1302   0AFE FD 43         mov [d], b
1303   0B00             ;; str++; 
1304   0B00 FA 05 00      lea d, [bp + 5] ; $str
1305   0B03 2A            mov b, [d]
1306   0B04 D8            push b
1307   0B05 FD 77         inc b
1308   0B07 FA 05 00      lea d, [bp + 5] ; $str
1309   0B0A FD 43         mov [d], b
1310   0B0C E5            pop b
1311   0B0D 0A AA 0A      jmp _while19_cond
1312   0B10             _while19_exit:
1313   0B10             ;; return sign * result; 
1314   0B10 FA FD FF      lea d, [bp + -3] ; $sign
1315   0B13 2A            mov b, [d]
1316   0B14             ; START FACTORS
1317   0B14 D7            push a
1318   0B15 11            mov a, b
1319   0B16 FA FF FF      lea d, [bp + -1] ; $result
1320   0B19 2A            mov b, [d]
1321   0B1A AC            mul a, b ; *
1322   0B1B 11            mov a, b
1323   0B1C 27            mov b, a
1324   0B1D E4            pop a
1325   0B1E             ; END FACTORS
1326   0B1E F9            leave
1327   0B1F 09            ret
1328   0B20             
1329   0B20             gets:
1330   0B20 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1331   0B23             
1332   0B23             ; --- BEGIN INLINE ASM BLOCK
1333   0B23 FA 05 00      lea d, [bp + 5] ; $s
1334   0B26 15            mov a, [d]
1335   0B27 3C            mov d, a
1336   0B28 07 6D 11      call _gets
1337   0B2B             ; --- END INLINE ASM BLOCK
1338   0B2B             
1339   0B2B             ;; return strlen(s); 
1340   0B2B FA 05 00      lea d, [bp + 5] ; $s
1341   0B2E 2A            mov b, [d]
1342   0B2F FD AB         swp b
1343   0B31 D8            push b
1344   0B32 07 F2 05      call strlen
1345   0B35 51 02 00      add sp, 2
1346   0B38 F9            leave
1347   0B39 09            ret
1348   0B3A             
1349   0B3A             print_signed:
1350   0B3A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1351   0B3D             ; $digits 
1352   0B3D             ; $i 
1353   0B3D 10 00 00      mov a, $0
1354   0B40 45 FA FF      mov [bp + -6], a
1355   0B43 52 07 00      sub sp, 7
1356   0B46             ;; if (num < 0) { 
1357   0B46             _if20_cond:
1358   0B46 FA 05 00      lea d, [bp + 5] ; $num
1359   0B49 2A            mov b, [d]
1360   0B4A             ; START RELATIONAL
1361   0B4A D7            push a
1362   0B4B 11            mov a, b
1363   0B4C 26 00 00      mov b, $0
1364   0B4F B0            cmp a, b
1365   0B50 FD 73         slt ; < 
1366   0B52 E4            pop a
1367   0B53             ; END RELATIONAL
1368   0B53 C0 00 00      cmp b, 0
1369   0B56 C6 73 0B      je _if20_else
1370   0B59             _if20_true:
1371   0B59             ;; putchar('-'); 
1372   0B59 26 2D 00      mov b, $2d
1373   0B5C DD            push bl
1374   0B5D 07 3F 0F      call putchar
1375   0B60 51 01 00      add sp, 1
1376   0B63             ;; num = -num; 
1377   0B63 FA 05 00      lea d, [bp + 5] ; $num
1378   0B66 DA            push d
1379   0B67 FA 05 00      lea d, [bp + 5] ; $num
1380   0B6A 2A            mov b, [d]
1381   0B6B FD 97         neg b
1382   0B6D E7            pop d
1383   0B6E FD 43         mov [d], b
1384   0B70 0A 95 0B      jmp _if20_exit
1385   0B73             _if20_else:
1386   0B73             ;; if (num == 0) { 
1387   0B73             _if21_cond:
1388   0B73 FA 05 00      lea d, [bp + 5] ; $num
1389   0B76 2A            mov b, [d]
1390   0B77             ; START RELATIONAL
1391   0B77 D7            push a
1392   0B78 11            mov a, b
1393   0B79 26 00 00      mov b, $0
1394   0B7C B0            cmp a, b
1395   0B7D FD 71         seq ; ==
1396   0B7F E4            pop a
1397   0B80             ; END RELATIONAL
1398   0B80 C0 00 00      cmp b, 0
1399   0B83 C6 95 0B      je _if21_exit
1400   0B86             _if21_true:
1401   0B86             ;; putchar('0'); 
1402   0B86 26 30 00      mov b, $30
1403   0B89 DD            push bl
1404   0B8A 07 3F 0F      call putchar
1405   0B8D 51 01 00      add sp, 1
1406   0B90             ;; return; 
1407   0B90 F9            leave
1408   0B91 09            ret
1409   0B92 0A 95 0B      jmp _if21_exit
1410   0B95             _if21_exit:
1411   0B95             _if20_exit:
1412   0B95             ;; while (num > 0) { 
1413   0B95             _while22_cond:
1414   0B95 FA 05 00      lea d, [bp + 5] ; $num
1415   0B98 2A            mov b, [d]
1416   0B99             ; START RELATIONAL
1417   0B99 D7            push a
1418   0B9A 11            mov a, b
1419   0B9B 26 00 00      mov b, $0
1420   0B9E B0            cmp a, b
1421   0B9F FD 7F         sgt ; >
1422   0BA1 E4            pop a
1423   0BA2             ; END RELATIONAL
1424   0BA2 C0 00 00      cmp b, 0
1425   0BA5 C6 F0 0B      je _while22_exit
1426   0BA8             _while22_block:
1427   0BA8             ;; digits[i] = '0' + (num % 10); 
1428   0BA8 FA FC FF      lea d, [bp + -4] ; $digits
1429   0BAB D7            push a
1430   0BAC DA            push d
1431   0BAD FA FA FF      lea d, [bp + -6] ; $i
1432   0BB0 2A            mov b, [d]
1433   0BB1 E7            pop d
1434   0BB2 5A            add d, b
1435   0BB3 E4            pop a
1436   0BB4 DA            push d
1437   0BB5 26 30 00      mov b, $30
1438   0BB8             ; START TERMS
1439   0BB8 D7            push a
1440   0BB9 11            mov a, b
1441   0BBA FA 05 00      lea d, [bp + 5] ; $num
1442   0BBD 2A            mov b, [d]
1443   0BBE             ; START FACTORS
1444   0BBE D7            push a
1445   0BBF 11            mov a, b
1446   0BC0 26 0A 00      mov b, $a
1447   0BC3 AE            div a, b ; 
1448   0BC4 11            mov a, b
1449   0BC5 27            mov b, a
1450   0BC6 E4            pop a
1451   0BC7             ; END FACTORS
1452   0BC7 54            add a, b
1453   0BC8 27            mov b, a
1454   0BC9 E4            pop a
1455   0BCA             ; END TERMS
1456   0BCA E7            pop d
1457   0BCB FD 3E         mov [d], bl
1458   0BCD             ;; num = num / 10; 
1459   0BCD FA 05 00      lea d, [bp + 5] ; $num
1460   0BD0 DA            push d
1461   0BD1 FA 05 00      lea d, [bp + 5] ; $num
1462   0BD4 2A            mov b, [d]
1463   0BD5             ; START FACTORS
1464   0BD5 D7            push a
1465   0BD6 11            mov a, b
1466   0BD7 26 0A 00      mov b, $a
1467   0BDA AE            div a, b
1468   0BDB 27            mov b, a
1469   0BDC E4            pop a
1470   0BDD             ; END FACTORS
1471   0BDD E7            pop d
1472   0BDE FD 43         mov [d], b
1473   0BE0             ;; i++; 
1474   0BE0 FA FA FF      lea d, [bp + -6] ; $i
1475   0BE3 2A            mov b, [d]
1476   0BE4 D8            push b
1477   0BE5 FD 77         inc b
1478   0BE7 FA FA FF      lea d, [bp + -6] ; $i
1479   0BEA FD 43         mov [d], b
1480   0BEC E5            pop b
1481   0BED 0A 95 0B      jmp _while22_cond
1482   0BF0             _while22_exit:
1483   0BF0             ;; while (i > 0) { 
1484   0BF0             _while23_cond:
1485   0BF0 FA FA FF      lea d, [bp + -6] ; $i
1486   0BF3 2A            mov b, [d]
1487   0BF4             ; START RELATIONAL
1488   0BF4 D7            push a
1489   0BF5 11            mov a, b
1490   0BF6 26 00 00      mov b, $0
1491   0BF9 B0            cmp a, b
1492   0BFA FD 7F         sgt ; >
1493   0BFC E4            pop a
1494   0BFD             ; END RELATIONAL
1495   0BFD C0 00 00      cmp b, 0
1496   0C00 C6 29 0C      je _while23_exit
1497   0C03             _while23_block:
1498   0C03             ;; i--; 
1499   0C03 FA FA FF      lea d, [bp + -6] ; $i
1500   0C06 2A            mov b, [d]
1501   0C07 D8            push b
1502   0C08 FD 7D         dec b
1503   0C0A FA FA FF      lea d, [bp + -6] ; $i
1504   0C0D FD 43         mov [d], b
1505   0C0F E5            pop b
1506   0C10             ;; putchar(digits[i]); 
1507   0C10 FA FC FF      lea d, [bp + -4] ; $digits
1508   0C13 D7            push a
1509   0C14 DA            push d
1510   0C15 FA FA FF      lea d, [bp + -6] ; $i
1511   0C18 2A            mov b, [d]
1512   0C19 E7            pop d
1513   0C1A 5A            add d, b
1514   0C1B E4            pop a
1515   0C1C 32            mov bl, [d]
1516   0C1D A7 00         mov bh, 0
1517   0C1F DD            push bl
1518   0C20 07 3F 0F      call putchar
1519   0C23 51 01 00      add sp, 1
1520   0C26 0A F0 0B      jmp _while23_cond
1521   0C29             _while23_exit:
1522   0C29 F9            leave
1523   0C2A 09            ret
1524   0C2B             
1525   0C2B             print_signed_long:
1526   0C2B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1527   0C2E             ; $digits 
1528   0C2E             ; $i 
1529   0C2E 10 00 00      mov a, $0
1530   0C31 45 F5 FF      mov [bp + -11], a
1531   0C34 52 0C 00      sub sp, 12
1532   0C37             ;; if (num < 0) { 
1533   0C37             _if24_cond:
1534   0C37 FA 05 00      lea d, [bp + 5] ; $num
1535   0C3A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1536   0C3D FD 39         mov c, b ; And place it into C
1537   0C3F 2A            mov b, [d] ; Lower Word in B
1538   0C40             ; START RELATIONAL
1539   0C40 D7            push a
1540   0C41 FD D8         push g
1541   0C43 11            mov a, b
1542   0C44 FD 7A         mov g, c
1543   0C46 26 00 00      mov b, $0
1544   0C49 B0            cmp a, b
1545   0C4A FD 73         slt ; < 
1546   0C4C FD F1         pop g
1547   0C4E E4            pop a
1548   0C4F             ; END RELATIONAL
1549   0C4F C0 00 00      cmp b, 0
1550   0C52 C6 79 0C      je _if24_else
1551   0C55             _if24_true:
1552   0C55             ;; putchar('-'); 
1553   0C55 26 2D 00      mov b, $2d
1554   0C58 DD            push bl
1555   0C59 07 3F 0F      call putchar
1556   0C5C 51 01 00      add sp, 1
1557   0C5F             ;; num = -num; 
1558   0C5F FA 05 00      lea d, [bp + 5] ; $num
1559   0C62 DA            push d
1560   0C63 FA 05 00      lea d, [bp + 5] ; $num
1561   0C66 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1562   0C69 FD 39         mov c, b ; And place it into C
1563   0C6B 2A            mov b, [d] ; Lower Word in B
1564   0C6C FD 97         neg b
1565   0C6E E7            pop d
1566   0C6F FD 43         mov [d], b
1567   0C71 28            mov b, c
1568   0C72 FD 44 02 00   mov [d + 2], b
1569   0C76 0A B0 0C      jmp _if24_exit
1570   0C79             _if24_else:
1571   0C79             ;; if (num == 0) { 
1572   0C79             _if25_cond:
1573   0C79 FA 05 00      lea d, [bp + 5] ; $num
1574   0C7C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1575   0C7F FD 39         mov c, b ; And place it into C
1576   0C81 2A            mov b, [d] ; Lower Word in B
1577   0C82             ; START RELATIONAL
1578   0C82 D7            push a
1579   0C83 FD D8         push g
1580   0C85 11            mov a, b
1581   0C86 FD 7A         mov g, c
1582   0C88 26 00 00      mov b, $0
1583   0C8B B0            cmp a, b
1584   0C8C FD 71         seq ; ==
1585   0C8E D8            push b
1586   0C8F 12            mov a, c
1587   0C90 FD 27         mov b, g
1588   0C92 B0            cmp a, b
1589   0C93 FD 71         seq ; ==
1590   0C95 E4            pop a
1591   0C96 FD A7         sand a, b
1592   0C98 FD F1         pop g
1593   0C9A E4            pop a
1594   0C9B             ; END RELATIONAL
1595   0C9B C0 00 00      cmp b, 0
1596   0C9E C6 B0 0C      je _if25_exit
1597   0CA1             _if25_true:
1598   0CA1             ;; putchar('0'); 
1599   0CA1 26 30 00      mov b, $30
1600   0CA4 DD            push bl
1601   0CA5 07 3F 0F      call putchar
1602   0CA8 51 01 00      add sp, 1
1603   0CAB             ;; return; 
1604   0CAB F9            leave
1605   0CAC 09            ret
1606   0CAD 0A B0 0C      jmp _if25_exit
1607   0CB0             _if25_exit:
1608   0CB0             _if24_exit:
1609   0CB0             ;; while (num > 0) { 
1610   0CB0             _while26_cond:
1611   0CB0 FA 05 00      lea d, [bp + 5] ; $num
1612   0CB3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1613   0CB6 FD 39         mov c, b ; And place it into C
1614   0CB8 2A            mov b, [d] ; Lower Word in B
1615   0CB9             ; START RELATIONAL
1616   0CB9 D7            push a
1617   0CBA FD D8         push g
1618   0CBC 11            mov a, b
1619   0CBD FD 7A         mov g, c
1620   0CBF 26 00 00      mov b, $0
1621   0CC2 B0            cmp a, b
1622   0CC3 FD 7F         sgt ; >
1623   0CC5 FD F1         pop g
1624   0CC7 E4            pop a
1625   0CC8             ; END RELATIONAL
1626   0CC8 C0 00 00      cmp b, 0
1627   0CCB C6 25 0D      je _while26_exit
1628   0CCE             _while26_block:
1629   0CCE             ;; digits[i] = '0' + (num % 10); 
1630   0CCE FA F7 FF      lea d, [bp + -9] ; $digits
1631   0CD1 D7            push a
1632   0CD2 DA            push d
1633   0CD3 FA F5 FF      lea d, [bp + -11] ; $i
1634   0CD6 2A            mov b, [d]
1635   0CD7 E7            pop d
1636   0CD8 5A            add d, b
1637   0CD9 E4            pop a
1638   0CDA DA            push d
1639   0CDB 26 30 00      mov b, $30
1640   0CDE             ; START TERMS
1641   0CDE D7            push a
1642   0CDF 11            mov a, b
1643   0CE0 FA 05 00      lea d, [bp + 5] ; $num
1644   0CE3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1645   0CE6 FD 39         mov c, b ; And place it into C
1646   0CE8 2A            mov b, [d] ; Lower Word in B
1647   0CE9             ; START FACTORS
1648   0CE9 D7            push a
1649   0CEA 11            mov a, b
1650   0CEB 26 0A 00      mov b, $a
1651   0CEE AE            div a, b ; 
1652   0CEF 11            mov a, b
1653   0CF0 27            mov b, a
1654   0CF1 E4            pop a
1655   0CF2             ; END FACTORS
1656   0CF2 54            add a, b
1657   0CF3 27            mov b, a
1658   0CF4 E4            pop a
1659   0CF5             ; END TERMS
1660   0CF5 E7            pop d
1661   0CF6 FD 3E         mov [d], bl
1662   0CF8             ;; num = num / 10; 
1663   0CF8 FA 05 00      lea d, [bp + 5] ; $num
1664   0CFB DA            push d
1665   0CFC FA 05 00      lea d, [bp + 5] ; $num
1666   0CFF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1667   0D02 FD 39         mov c, b ; And place it into C
1668   0D04 2A            mov b, [d] ; Lower Word in B
1669   0D05             ; START FACTORS
1670   0D05 D7            push a
1671   0D06 11            mov a, b
1672   0D07 26 0A 00      mov b, $a
1673   0D0A AE            div a, b
1674   0D0B 27            mov b, a
1675   0D0C E4            pop a
1676   0D0D             ; END FACTORS
1677   0D0D E7            pop d
1678   0D0E FD 43         mov [d], b
1679   0D10 28            mov b, c
1680   0D11 FD 44 02 00   mov [d + 2], b
1681   0D15             ;; i++; 
1682   0D15 FA F5 FF      lea d, [bp + -11] ; $i
1683   0D18 2A            mov b, [d]
1684   0D19 D8            push b
1685   0D1A FD 77         inc b
1686   0D1C FA F5 FF      lea d, [bp + -11] ; $i
1687   0D1F FD 43         mov [d], b
1688   0D21 E5            pop b
1689   0D22 0A B0 0C      jmp _while26_cond
1690   0D25             _while26_exit:
1691   0D25             ;; while (i > 0) { 
1692   0D25             _while27_cond:
1693   0D25 FA F5 FF      lea d, [bp + -11] ; $i
1694   0D28 2A            mov b, [d]
1695   0D29             ; START RELATIONAL
1696   0D29 D7            push a
1697   0D2A 11            mov a, b
1698   0D2B 26 00 00      mov b, $0
1699   0D2E B0            cmp a, b
1700   0D2F FD 7F         sgt ; >
1701   0D31 E4            pop a
1702   0D32             ; END RELATIONAL
1703   0D32 C0 00 00      cmp b, 0
1704   0D35 C6 5E 0D      je _while27_exit
1705   0D38             _while27_block:
1706   0D38             ;; i--; 
1707   0D38 FA F5 FF      lea d, [bp + -11] ; $i
1708   0D3B 2A            mov b, [d]
1709   0D3C D8            push b
1710   0D3D FD 7D         dec b
1711   0D3F FA F5 FF      lea d, [bp + -11] ; $i
1712   0D42 FD 43         mov [d], b
1713   0D44 E5            pop b
1714   0D45             ;; putchar(digits[i]); 
1715   0D45 FA F7 FF      lea d, [bp + -9] ; $digits
1716   0D48 D7            push a
1717   0D49 DA            push d
1718   0D4A FA F5 FF      lea d, [bp + -11] ; $i
1719   0D4D 2A            mov b, [d]
1720   0D4E E7            pop d
1721   0D4F 5A            add d, b
1722   0D50 E4            pop a
1723   0D51 32            mov bl, [d]
1724   0D52 A7 00         mov bh, 0
1725   0D54 DD            push bl
1726   0D55 07 3F 0F      call putchar
1727   0D58 51 01 00      add sp, 1
1728   0D5B 0A 25 0D      jmp _while27_cond
1729   0D5E             _while27_exit:
1730   0D5E F9            leave
1731   0D5F 09            ret
1732   0D60             
1733   0D60             print_unsigned_long:
1734   0D60 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1735   0D63             ; $digits 
1736   0D63             ; $i 
1737   0D63 52 0C 00      sub sp, 12
1738   0D66             ;; i = 0; 
1739   0D66 FA F5 FF      lea d, [bp + -11] ; $i
1740   0D69 DA            push d
1741   0D6A 26 00 00      mov b, $0
1742   0D6D E7            pop d
1743   0D6E FD 43         mov [d], b
1744   0D70             ;; if(num == 0){ 
1745   0D70             _if28_cond:
1746   0D70 FA 05 00      lea d, [bp + 5] ; $num
1747   0D73 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1748   0D76 FD 39         mov c, b ; And place it into C
1749   0D78 2A            mov b, [d] ; Lower Word in B
1750   0D79             ; START RELATIONAL
1751   0D79 D7            push a
1752   0D7A FD D8         push g
1753   0D7C 11            mov a, b
1754   0D7D FD 7A         mov g, c
1755   0D7F 26 00 00      mov b, $0
1756   0D82 B0            cmp a, b
1757   0D83 FD 71         seq ; ==
1758   0D85 D8            push b
1759   0D86 12            mov a, c
1760   0D87 FD 27         mov b, g
1761   0D89 B0            cmp a, b
1762   0D8A FD 71         seq ; ==
1763   0D8C E4            pop a
1764   0D8D FD A7         sand a, b
1765   0D8F FD F1         pop g
1766   0D91 E4            pop a
1767   0D92             ; END RELATIONAL
1768   0D92 C0 00 00      cmp b, 0
1769   0D95 C6 A7 0D      je _if28_exit
1770   0D98             _if28_true:
1771   0D98             ;; putchar('0'); 
1772   0D98 26 30 00      mov b, $30
1773   0D9B DD            push bl
1774   0D9C 07 3F 0F      call putchar
1775   0D9F 51 01 00      add sp, 1
1776   0DA2             ;; return; 
1777   0DA2 F9            leave
1778   0DA3 09            ret
1779   0DA4 0A A7 0D      jmp _if28_exit
1780   0DA7             _if28_exit:
1781   0DA7             ;; while (num > 0) { 
1782   0DA7             _while29_cond:
1783   0DA7 FA 05 00      lea d, [bp + 5] ; $num
1784   0DAA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1785   0DAD FD 39         mov c, b ; And place it into C
1786   0DAF 2A            mov b, [d] ; Lower Word in B
1787   0DB0             ; START RELATIONAL
1788   0DB0 D7            push a
1789   0DB1 FD D8         push g
1790   0DB3 11            mov a, b
1791   0DB4 FD 7A         mov g, c
1792   0DB6 26 00 00      mov b, $0
1793   0DB9 B0            cmp a, b
1794   0DBA FD 81         sgu ; > (unsigned)
1795   0DBC FD F1         pop g
1796   0DBE E4            pop a
1797   0DBF             ; END RELATIONAL
1798   0DBF C0 00 00      cmp b, 0
1799   0DC2 C6 1C 0E      je _while29_exit
1800   0DC5             _while29_block:
1801   0DC5             ;; digits[i] = '0' + (num % 10); 
1802   0DC5 FA F7 FF      lea d, [bp + -9] ; $digits
1803   0DC8 D7            push a
1804   0DC9 DA            push d
1805   0DCA FA F5 FF      lea d, [bp + -11] ; $i
1806   0DCD 2A            mov b, [d]
1807   0DCE E7            pop d
1808   0DCF 5A            add d, b
1809   0DD0 E4            pop a
1810   0DD1 DA            push d
1811   0DD2 26 30 00      mov b, $30
1812   0DD5             ; START TERMS
1813   0DD5 D7            push a
1814   0DD6 11            mov a, b
1815   0DD7 FA 05 00      lea d, [bp + 5] ; $num
1816   0DDA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1817   0DDD FD 39         mov c, b ; And place it into C
1818   0DDF 2A            mov b, [d] ; Lower Word in B
1819   0DE0             ; START FACTORS
1820   0DE0 D7            push a
1821   0DE1 11            mov a, b
1822   0DE2 26 0A 00      mov b, $a
1823   0DE5 AE            div a, b ; 
1824   0DE6 11            mov a, b
1825   0DE7 27            mov b, a
1826   0DE8 E4            pop a
1827   0DE9             ; END FACTORS
1828   0DE9 54            add a, b
1829   0DEA 27            mov b, a
1830   0DEB E4            pop a
1831   0DEC             ; END TERMS
1832   0DEC E7            pop d
1833   0DED FD 3E         mov [d], bl
1834   0DEF             ;; num = num / 10; 
1835   0DEF FA 05 00      lea d, [bp + 5] ; $num
1836   0DF2 DA            push d
1837   0DF3 FA 05 00      lea d, [bp + 5] ; $num
1838   0DF6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1839   0DF9 FD 39         mov c, b ; And place it into C
1840   0DFB 2A            mov b, [d] ; Lower Word in B
1841   0DFC             ; START FACTORS
1842   0DFC D7            push a
1843   0DFD 11            mov a, b
1844   0DFE 26 0A 00      mov b, $a
1845   0E01 AE            div a, b
1846   0E02 27            mov b, a
1847   0E03 E4            pop a
1848   0E04             ; END FACTORS
1849   0E04 E7            pop d
1850   0E05 FD 43         mov [d], b
1851   0E07 28            mov b, c
1852   0E08 FD 44 02 00   mov [d + 2], b
1853   0E0C             ;; i++; 
1854   0E0C FA F5 FF      lea d, [bp + -11] ; $i
1855   0E0F 2A            mov b, [d]
1856   0E10 D8            push b
1857   0E11 FD 77         inc b
1858   0E13 FA F5 FF      lea d, [bp + -11] ; $i
1859   0E16 FD 43         mov [d], b
1860   0E18 E5            pop b
1861   0E19 0A A7 0D      jmp _while29_cond
1862   0E1C             _while29_exit:
1863   0E1C             ;; while (i > 0) { 
1864   0E1C             _while30_cond:
1865   0E1C FA F5 FF      lea d, [bp + -11] ; $i
1866   0E1F 2A            mov b, [d]
1867   0E20             ; START RELATIONAL
1868   0E20 D7            push a
1869   0E21 11            mov a, b
1870   0E22 26 00 00      mov b, $0
1871   0E25 B0            cmp a, b
1872   0E26 FD 7F         sgt ; >
1873   0E28 E4            pop a
1874   0E29             ; END RELATIONAL
1875   0E29 C0 00 00      cmp b, 0
1876   0E2C C6 55 0E      je _while30_exit
1877   0E2F             _while30_block:
1878   0E2F             ;; i--; 
1879   0E2F FA F5 FF      lea d, [bp + -11] ; $i
1880   0E32 2A            mov b, [d]
1881   0E33 D8            push b
1882   0E34 FD 7D         dec b
1883   0E36 FA F5 FF      lea d, [bp + -11] ; $i
1884   0E39 FD 43         mov [d], b
1885   0E3B E5            pop b
1886   0E3C             ;; putchar(digits[i]); 
1887   0E3C FA F7 FF      lea d, [bp + -9] ; $digits
1888   0E3F D7            push a
1889   0E40 DA            push d
1890   0E41 FA F5 FF      lea d, [bp + -11] ; $i
1891   0E44 2A            mov b, [d]
1892   0E45 E7            pop d
1893   0E46 5A            add d, b
1894   0E47 E4            pop a
1895   0E48 32            mov bl, [d]
1896   0E49 A7 00         mov bh, 0
1897   0E4B DD            push bl
1898   0E4C 07 3F 0F      call putchar
1899   0E4F 51 01 00      add sp, 1
1900   0E52 0A 1C 0E      jmp _while30_cond
1901   0E55             _while30_exit:
1902   0E55 F9            leave
1903   0E56 09            ret
1904   0E57             
1905   0E57             print_unsigned:
1906   0E57 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1907   0E5A             ; $digits 
1908   0E5A             ; $i 
1909   0E5A 52 07 00      sub sp, 7
1910   0E5D             ;; i = 0; 
1911   0E5D FA FA FF      lea d, [bp + -6] ; $i
1912   0E60 DA            push d
1913   0E61 26 00 00      mov b, $0
1914   0E64 E7            pop d
1915   0E65 FD 43         mov [d], b
1916   0E67             ;; if(num == 0){ 
1917   0E67             _if31_cond:
1918   0E67 FA 05 00      lea d, [bp + 5] ; $num
1919   0E6A 2A            mov b, [d]
1920   0E6B             ; START RELATIONAL
1921   0E6B D7            push a
1922   0E6C 11            mov a, b
1923   0E6D 26 00 00      mov b, $0
1924   0E70 B0            cmp a, b
1925   0E71 FD 71         seq ; ==
1926   0E73 E4            pop a
1927   0E74             ; END RELATIONAL
1928   0E74 C0 00 00      cmp b, 0
1929   0E77 C6 89 0E      je _if31_exit
1930   0E7A             _if31_true:
1931   0E7A             ;; putchar('0'); 
1932   0E7A 26 30 00      mov b, $30
1933   0E7D DD            push bl
1934   0E7E 07 3F 0F      call putchar
1935   0E81 51 01 00      add sp, 1
1936   0E84             ;; return; 
1937   0E84 F9            leave
1938   0E85 09            ret
1939   0E86 0A 89 0E      jmp _if31_exit
1940   0E89             _if31_exit:
1941   0E89             ;; while (num > 0) { 
1942   0E89             _while32_cond:
1943   0E89 FA 05 00      lea d, [bp + 5] ; $num
1944   0E8C 2A            mov b, [d]
1945   0E8D             ; START RELATIONAL
1946   0E8D D7            push a
1947   0E8E 11            mov a, b
1948   0E8F 26 00 00      mov b, $0
1949   0E92 B0            cmp a, b
1950   0E93 FD 81         sgu ; > (unsigned)
1951   0E95 E4            pop a
1952   0E96             ; END RELATIONAL
1953   0E96 C0 00 00      cmp b, 0
1954   0E99 C6 E4 0E      je _while32_exit
1955   0E9C             _while32_block:
1956   0E9C             ;; digits[i] = '0' + (num % 10); 
1957   0E9C FA FC FF      lea d, [bp + -4] ; $digits
1958   0E9F D7            push a
1959   0EA0 DA            push d
1960   0EA1 FA FA FF      lea d, [bp + -6] ; $i
1961   0EA4 2A            mov b, [d]
1962   0EA5 E7            pop d
1963   0EA6 5A            add d, b
1964   0EA7 E4            pop a
1965   0EA8 DA            push d
1966   0EA9 26 30 00      mov b, $30
1967   0EAC             ; START TERMS
1968   0EAC D7            push a
1969   0EAD 11            mov a, b
1970   0EAE FA 05 00      lea d, [bp + 5] ; $num
1971   0EB1 2A            mov b, [d]
1972   0EB2             ; START FACTORS
1973   0EB2 D7            push a
1974   0EB3 11            mov a, b
1975   0EB4 26 0A 00      mov b, $a
1976   0EB7 AE            div a, b ; 
1977   0EB8 11            mov a, b
1978   0EB9 27            mov b, a
1979   0EBA E4            pop a
1980   0EBB             ; END FACTORS
1981   0EBB 54            add a, b
1982   0EBC 27            mov b, a
1983   0EBD E4            pop a
1984   0EBE             ; END TERMS
1985   0EBE E7            pop d
1986   0EBF FD 3E         mov [d], bl
1987   0EC1             ;; num = num / 10; 
1988   0EC1 FA 05 00      lea d, [bp + 5] ; $num
1989   0EC4 DA            push d
1990   0EC5 FA 05 00      lea d, [bp + 5] ; $num
1991   0EC8 2A            mov b, [d]
1992   0EC9             ; START FACTORS
1993   0EC9 D7            push a
1994   0ECA 11            mov a, b
1995   0ECB 26 0A 00      mov b, $a
1996   0ECE AE            div a, b
1997   0ECF 27            mov b, a
1998   0ED0 E4            pop a
1999   0ED1             ; END FACTORS
2000   0ED1 E7            pop d
2001   0ED2 FD 43         mov [d], b
2002   0ED4             ;; i++; 
2003   0ED4 FA FA FF      lea d, [bp + -6] ; $i
2004   0ED7 2A            mov b, [d]
2005   0ED8 D8            push b
2006   0ED9 FD 77         inc b
2007   0EDB FA FA FF      lea d, [bp + -6] ; $i
2008   0EDE FD 43         mov [d], b
2009   0EE0 E5            pop b
2010   0EE1 0A 89 0E      jmp _while32_cond
2011   0EE4             _while32_exit:
2012   0EE4             ;; while (i > 0) { 
2013   0EE4             _while33_cond:
2014   0EE4 FA FA FF      lea d, [bp + -6] ; $i
2015   0EE7 2A            mov b, [d]
2016   0EE8             ; START RELATIONAL
2017   0EE8 D7            push a
2018   0EE9 11            mov a, b
2019   0EEA 26 00 00      mov b, $0
2020   0EED B0            cmp a, b
2021   0EEE FD 7F         sgt ; >
2022   0EF0 E4            pop a
2023   0EF1             ; END RELATIONAL
2024   0EF1 C0 00 00      cmp b, 0
2025   0EF4 C6 1D 0F      je _while33_exit
2026   0EF7             _while33_block:
2027   0EF7             ;; i--; 
2028   0EF7 FA FA FF      lea d, [bp + -6] ; $i
2029   0EFA 2A            mov b, [d]
2030   0EFB D8            push b
2031   0EFC FD 7D         dec b
2032   0EFE FA FA FF      lea d, [bp + -6] ; $i
2033   0F01 FD 43         mov [d], b
2034   0F03 E5            pop b
2035   0F04             ;; putchar(digits[i]); 
2036   0F04 FA FC FF      lea d, [bp + -4] ; $digits
2037   0F07 D7            push a
2038   0F08 DA            push d
2039   0F09 FA FA FF      lea d, [bp + -6] ; $i
2040   0F0C 2A            mov b, [d]
2041   0F0D E7            pop d
2042   0F0E 5A            add d, b
2043   0F0F E4            pop a
2044   0F10 32            mov bl, [d]
2045   0F11 A7 00         mov bh, 0
2046   0F13 DD            push bl
2047   0F14 07 3F 0F      call putchar
2048   0F17 51 01 00      add sp, 1
2049   0F1A 0A E4 0E      jmp _while33_cond
2050   0F1D             _while33_exit:
2051   0F1D F9            leave
2052   0F1E 09            ret
2053   0F1F             
2054   0F1F             rand:
2055   0F1F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2056   0F22             ; $sec 
2057   0F22 52 01 00      sub sp, 1
2058   0F25             
2059   0F25             ; --- BEGIN INLINE ASM BLOCK
2060   0F25 19 00         mov al, 0
2061   0F27 05 01         syscall sys_rtc					
2062   0F29 1A            mov al, ah
2063   0F2A FA 00 00      lea d, [bp + 0] ; $sec
2064   0F2D 1E            mov al, [d]
2065   0F2E             ; --- END INLINE ASM BLOCK
2066   0F2E             
2067   0F2E             ;; return sec; 
2068   0F2E FA 00 00      lea d, [bp + 0] ; $sec
2069   0F31 32            mov bl, [d]
2070   0F32 A7 00         mov bh, 0
2071   0F34 F9            leave
2072   0F35 09            ret
2073   0F36             
2074   0F36             date:
2075   0F36 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2076   0F39             
2077   0F39             ; --- BEGIN INLINE ASM BLOCK
2078   0F39 19 00         mov al, 0 
2079   0F3B 05 07         syscall sys_datetime
2080   0F3D             ; --- END INLINE ASM BLOCK
2081   0F3D             
2082   0F3D F9            leave
2083   0F3E 09            ret
2084   0F3F             
2085   0F3F             putchar:
2086   0F3F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2087   0F42             
2088   0F42             ; --- BEGIN INLINE ASM BLOCK
2089   0F42 FA 05 00      lea d, [bp + 5] ; $c
2090   0F45 1E            mov al, [d]
2091   0F46 23            mov ah, al
2092   0F47 07 66 11      call _putchar
2093   0F4A             ; --- END INLINE ASM BLOCK
2094   0F4A             
2095   0F4A F9            leave
2096   0F4B 09            ret
2097   0F4C             
2098   0F4C             getchar:
2099   0F4C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2100   0F4F             ; $c 
2101   0F4F 52 01 00      sub sp, 1
2102   0F52             
2103   0F52             ; --- BEGIN INLINE ASM BLOCK
2104   0F52 07 5F 11      call getch
2105   0F55 1A            mov al, ah
2106   0F56 FA 00 00      lea d, [bp + 0] ; $c
2107   0F59 3E            mov [d], al
2108   0F5A             ; --- END INLINE ASM BLOCK
2109   0F5A             
2110   0F5A             ;; return c; 
2111   0F5A FA 00 00      lea d, [bp + 0] ; $c
2112   0F5D 32            mov bl, [d]
2113   0F5E A7 00         mov bh, 0
2114   0F60 F9            leave
2115   0F61 09            ret
2116   0F62             
2117   0F62             scann:
2118   0F62 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2119   0F65             ; $m 
2120   0F65 52 02 00      sub sp, 2
2121   0F68             
2122   0F68             ; --- BEGIN INLINE ASM BLOCK
2123   0F68 07 AA 13      call scan_u16d
2124   0F6B FA FF FF      lea d, [bp + -1] ; $m
2125   0F6E 43            mov [d], a
2126   0F6F             ; --- END INLINE ASM BLOCK
2127   0F6F             
2128   0F6F             ;; return m; 
2129   0F6F FA FF FF      lea d, [bp + -1] ; $m
2130   0F72 2A            mov b, [d]
2131   0F73 F9            leave
2132   0F74 09            ret
2133   0F75             
2134   0F75             puts:
2135   0F75 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2136   0F78             
2137   0F78             ; --- BEGIN INLINE ASM BLOCK
2138   0F78 FA 05 00      lea d, [bp + 5] ; $s
2139   0F7B 15            mov a, [d]
2140   0F7C 3C            mov d, a
2141   0F7D 07 B0 12      call _puts
2142   0F80 10 00 0A      mov a, $0A00
2143   0F83 05 03         syscall sys_io
2144   0F85             ; --- END INLINE ASM BLOCK
2145   0F85             
2146   0F85 F9            leave
2147   0F86 09            ret
2148   0F87             
2149   0F87             print:
2150   0F87 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2151   0F8A             
2152   0F8A             ; --- BEGIN INLINE ASM BLOCK
2153   0F8A FA 05 00      lea d, [bp + 5] ; $s
2154   0F8D FD 2A         mov d, [d]
2155   0F8F 07 B0 12      call _puts
2156   0F92             ; --- END INLINE ASM BLOCK
2157   0F92             
2158   0F92 F9            leave
2159   0F93 09            ret
2160   0F94             
2161   0F94             loadfile:
2162   0F94 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2163   0F97             
2164   0F97             ; --- BEGIN INLINE ASM BLOCK
2165   0F97 FA 07 00      lea d, [bp + 7] ; $destination
2166   0F9A 15            mov a, [d]
2167   0F9B 4F            mov di, a
2168   0F9C FA 05 00      lea d, [bp + 5] ; $filename
2169   0F9F FD 2A         mov d, [d]
2170   0FA1 19 14         mov al, 20
2171   0FA3 05 04         syscall sys_filesystem
2172   0FA5             ; --- END INLINE ASM BLOCK
2173   0FA5             
2174   0FA5 F9            leave
2175   0FA6 09            ret
2176   0FA7             
2177   0FA7             create_file:
2178   0FA7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2179   0FAA F9            leave
2180   0FAB 09            ret
2181   0FAC             
2182   0FAC             delete_file:
2183   0FAC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2184   0FAF             
2185   0FAF             ; --- BEGIN INLINE ASM BLOCK
2186   0FAF FA 05 00      lea d, [bp + 5] ; $filename
2187   0FB2 19 0A         mov al, 10
2188   0FB4 05 04         syscall sys_filesystem
2189   0FB6             ; --- END INLINE ASM BLOCK
2190   0FB6             
2191   0FB6 F9            leave
2192   0FB7 09            ret
2193   0FB8             
2194   0FB8             fopen:
2195   0FB8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2196   0FBB F9            leave
2197   0FBC 09            ret
2198   0FBD             
2199   0FBD             fclose:
2200   0FBD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2201   0FC0 F9            leave
2202   0FC1 09            ret
2203   0FC2             
2204   0FC2             alloc:
2205   0FC2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2206   0FC5             ;; heap_top = heap_top + bytes; 
2207   0FC5 3B 3A 17      mov d, _heap_top ; $heap_top
2208   0FC8 DA            push d
2209   0FC9 3B 3A 17      mov d, _heap_top ; $heap_top
2210   0FCC 2A            mov b, [d]
2211   0FCD             ; START TERMS
2212   0FCD D7            push a
2213   0FCE 11            mov a, b
2214   0FCF FA 05 00      lea d, [bp + 5] ; $bytes
2215   0FD2 2A            mov b, [d]
2216   0FD3 54            add a, b
2217   0FD4 27            mov b, a
2218   0FD5 E4            pop a
2219   0FD6             ; END TERMS
2220   0FD6 E7            pop d
2221   0FD7 FD 43         mov [d], b
2222   0FD9             ;; return heap_top - bytes; 
2223   0FD9 3B 3A 17      mov d, _heap_top ; $heap_top
2224   0FDC 2A            mov b, [d]
2225   0FDD             ; START TERMS
2226   0FDD D7            push a
2227   0FDE 11            mov a, b
2228   0FDF FA 05 00      lea d, [bp + 5] ; $bytes
2229   0FE2 2A            mov b, [d]
2230   0FE3 60            sub a, b
2231   0FE4 27            mov b, a
2232   0FE5 E4            pop a
2233   0FE6             ; END TERMS
2234   0FE6 F9            leave
2235   0FE7 09            ret
2236   0FE8             
2237   0FE8             free:
2238   0FE8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2239   0FEB             ;; return heap_top = heap_top - bytes; 
2240   0FEB 3B 3A 17      mov d, _heap_top ; $heap_top
2241   0FEE DA            push d
2242   0FEF 3B 3A 17      mov d, _heap_top ; $heap_top
2243   0FF2 2A            mov b, [d]
2244   0FF3             ; START TERMS
2245   0FF3 D7            push a
2246   0FF4 11            mov a, b
2247   0FF5 FA 05 00      lea d, [bp + 5] ; $bytes
2248   0FF8 2A            mov b, [d]
2249   0FF9 60            sub a, b
2250   0FFA 27            mov b, a
2251   0FFB E4            pop a
2252   0FFC             ; END TERMS
2253   0FFC E7            pop d
2254   0FFD FD 43         mov [d], b
2255   0FFF F9            leave
2256   1000 09            ret
2257   1001             
2258   1001             exit:
2259   1001 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2260   1004             
2261   1004             ; --- BEGIN INLINE ASM BLOCK
2262   1004 05 0B         syscall sys_terminate_proc
2263   1006             ; --- END INLINE ASM BLOCK
2264   1006             
2265   1006 F9            leave
2266   1007 09            ret
2267   1008             
2268   1008             load_hex:
2269   1008 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2270   100B             ; $temp 
2271   100B 52 02 00      sub sp, 2
2272   100E             ;; temp = alloc(32768); 
2273   100E FA FF FF      lea d, [bp + -1] ; $temp
2274   1011 DA            push d
2275   1012 26 00 80      mov b, $8000
2276   1015 FD AB         swp b
2277   1017 D8            push b
2278   1018 07 C2 0F      call alloc
2279   101B 51 02 00      add sp, 2
2280   101E E7            pop d
2281   101F FD 43         mov [d], b
2282   1021             
2283   1021             ; --- BEGIN INLINE ASM BLOCK
2284   1021               
2285   1021               
2286   1021               
2287   1021               
2288   1021               
2289   1021             _load_hex:
2290   1021 D7            push a
2291   1022 D8            push b
2292   1023 DA            push d
2293   1024 E2            push si
2294   1025 E3            push di
2295   1026 52 00 80      sub sp, $8000      
2296   1029 38 00 00      mov c, 0
2297   102C 48            mov a, sp
2298   102D 77            inc a
2299   102E 3C            mov d, a          
2300   102F 07 6D 11      call _gets        
2301   1032 4D            mov si, a
2302   1033             __load_hex_loop:
2303   1033 F6            lodsb             
2304   1034 B9 00         cmp al, 0         
2305   1036 C6 44 10      jz __load_hex_ret
2306   1039 36            mov bh, al
2307   103A F6            lodsb
2308   103B 2F            mov bl, al
2309   103C 07 23 11      call _atoi        
2310   103F F7            stosb             
2311   1040 78            inc c
2312   1041 0A 33 10      jmp __load_hex_loop
2313   1044             __load_hex_ret:
2314   1044 51 00 80      add sp, $8000
2315   1047 F0            pop di
2316   1048 EF            pop si
2317   1049 E7            pop d
2318   104A E5            pop b
2319   104B E4            pop a
2320   104C             ; --- END INLINE ASM BLOCK
2321   104C             
2322   104C F9            leave
2323   104D 09            ret
2324   104E             
2325   104E             getparam:
2326   104E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2327   1051             ; $data 
2328   1051 52 01 00      sub sp, 1
2329   1054             
2330   1054             ; --- BEGIN INLINE ASM BLOCK
2331   1054 19 04         mov al, 4
2332   1056 FA 05 00      lea d, [bp + 5] ; $address
2333   1059 FD 2A         mov d, [d]
2334   105B 05 0C         syscall sys_system
2335   105D FA 00 00      lea d, [bp + 0] ; $data
2336   1060 FD 3E         mov [d], bl
2337   1062             ; --- END INLINE ASM BLOCK
2338   1062             
2339   1062             ;; return data; 
2340   1062 FA 00 00      lea d, [bp + 0] ; $data
2341   1065 32            mov bl, [d]
2342   1066 A7 00         mov bh, 0
2343   1068 F9            leave
2344   1069 09            ret
2345   106A             
2346   106A             clear:
2347   106A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2348   106D             ;; print("\033[2J\033[H"); 
2349   106D 26 32 17      mov b, __s4 ; "\033[2J\033[H"
2350   1070 FD AB         swp b
2351   1072 D8            push b
2352   1073 07 87 0F      call print
2353   1076 51 02 00      add sp, 2
2354   1079 F9            leave
2355   107A 09            ret
2356   107B             
2357   107B             include_stdio_asm:
2358   107B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2359   107E             
2360   107E             ; --- BEGIN INLINE ASM BLOCK
2361   107E             .include "lib/asm/stdio.asm"
0001+  107E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  107E             ; stdio.s
0003+  107E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  107E             .include "lib/asm/string.asm"
0001++ 107E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 107E             ; string.s
0003++ 107E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 107E             
0005++ 107E             
0006++ 107E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 107E             ; _strrev
0008++ 107E             ; reverse a string
0009++ 107E             ; D = string address
0010++ 107E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 107E             ; 01234
0012++ 107E             _strrev:
0013++ 107E 4B          	pusha
0014++ 107F 07 C5 10    	call _strlen	; length in C
0015++ 1082 12          	mov a, c
0016++ 1083 AF 01 00    	cmp a, 1
0017++ 1086 D0 A0 10    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1089 7D          	dec a
0019++ 108A FD 4E       	mov si, d	; beginning of string
0020++ 108C FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 108E 59          	add d, a	; end of string
0022++ 108F 12          	mov a, c
0023++ 1090 FD 9B       	shr a		; divide by 2
0024++ 1092 39          	mov c, a	; C now counts the steps
0025++ 1093             _strrev_L0:
0026++ 1093 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1094 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1095 3E          	mov [d], al	; store left char into right side
0029++ 1096 1B          	mov al, bl
0030++ 1097 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1098 7E          	dec c
0032++ 1099 7F          	dec d
0033++ 109A C2 00 00    	cmp c, 0
0034++ 109D C7 93 10    	jne _strrev_L0
0035++ 10A0             _strrev_end:
0036++ 10A0 4C          	popa
0037++ 10A1 09          	ret
0038++ 10A2             	
0039++ 10A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 10A2             ; _strchr
0041++ 10A2             ; search string in D for char in AL
0042++ 10A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 10A2             _strchr:
0044++ 10A2             _strchr_L0:
0045++ 10A2 32          	mov bl, [d]
0046++ 10A3 C1 00       	cmp bl, 0
0047++ 10A5 C6 B0 10    	je _strchr_end
0048++ 10A8 BA          	cmp al, bl
0049++ 10A9 C6 B0 10    	je _strchr_end
0050++ 10AC 79          	inc d
0051++ 10AD 0A A2 10    	jmp _strchr_L0
0052++ 10B0             _strchr_end:
0053++ 10B0 1B          	mov al, bl
0054++ 10B1 09          	ret
0055++ 10B2             
0056++ 10B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 10B2             ; _strstr
0058++ 10B2             ; find sub-string
0059++ 10B2             ; str1 in SI
0060++ 10B2             ; str2 in DI
0061++ 10B2             ; SI points to end of source string
0062++ 10B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 10B2             _strstr:
0064++ 10B2 DB          	push al
0065++ 10B3 DA          	push d
0066++ 10B4 E3          	push di
0067++ 10B5             _strstr_loop:
0068++ 10B5 F3          	cmpsb					; compare a byte of the strings
0069++ 10B6 C7 C1 10    	jne _strstr_ret
0070++ 10B9 FC 00 00    	lea d, [di + 0]
0071++ 10BC BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 10BE C7 B5 10    	jne _strstr_loop				; equal chars but not at end
0073++ 10C1             _strstr_ret:
0074++ 10C1 F0          	pop di
0075++ 10C2 E7          	pop d
0076++ 10C3 E8          	pop al
0077++ 10C4 09          	ret
0078++ 10C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 10C5             ; length of null terminated string
0080++ 10C5             ; result in C
0081++ 10C5             ; pointer in D
0082++ 10C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 10C5             _strlen:
0084++ 10C5 DA          	push d
0085++ 10C6 38 00 00    	mov c, 0
0086++ 10C9             _strlen_L1:
0087++ 10C9 BD 00       	cmp byte [d], 0
0088++ 10CB C6 D3 10    	je _strlen_ret
0089++ 10CE 79          	inc d
0090++ 10CF 78          	inc c
0091++ 10D0 0A C9 10    	jmp _strlen_L1
0092++ 10D3             _strlen_ret:
0093++ 10D3 E7          	pop d
0094++ 10D4 09          	ret
0095++ 10D5             
0096++ 10D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 10D5             ; STRCMP
0098++ 10D5             ; compare two strings
0099++ 10D5             ; str1 in SI
0100++ 10D5             ; str2 in DI
0101++ 10D5             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 10D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 10D5             _strcmp:
0104++ 10D5 DB          	push al
0105++ 10D6 DA          	push d
0106++ 10D7 E3          	push di
0107++ 10D8 E2          	push si
0108++ 10D9             _strcmp_loop:
0109++ 10D9 F3          	cmpsb					; compare a byte of the strings
0110++ 10DA C7 E5 10    	jne _strcmp_ret
0111++ 10DD FB FF FF    	lea d, [si +- 1]
0112++ 10E0 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 10E2 C7 D9 10    	jne _strcmp_loop				; equal chars but not at end
0114++ 10E5             _strcmp_ret:
0115++ 10E5 EF          	pop si
0116++ 10E6 F0          	pop di
0117++ 10E7 E7          	pop d
0118++ 10E8 E8          	pop al
0119++ 10E9 09          	ret
0120++ 10EA             
0121++ 10EA             
0122++ 10EA             ; STRCPY
0123++ 10EA             ; copy null terminated string from SI to DI
0124++ 10EA             ; source in SI
0125++ 10EA             ; destination in DI
0126++ 10EA             _strcpy:
0127++ 10EA E2          	push si
0128++ 10EB E3          	push di
0129++ 10EC DB          	push al
0130++ 10ED             _strcpy_L1:
0131++ 10ED F6          	lodsb
0132++ 10EE F7          	stosb
0133++ 10EF B9 00       	cmp al, 0
0134++ 10F1 C7 ED 10    	jne _strcpy_L1
0135++ 10F4             _strcpy_end:
0136++ 10F4 E8          	pop al
0137++ 10F5 F0          	pop di
0138++ 10F6 EF          	pop si
0139++ 10F7 09          	ret
0140++ 10F8             
0141++ 10F8             ; STRCAT
0142++ 10F8             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 10F8             ; source in SI
0144++ 10F8             ; destination in DI
0145++ 10F8             _strcat:
0146++ 10F8 E2          	push si
0147++ 10F9 E3          	push di
0148++ 10FA D7          	push a
0149++ 10FB DA          	push d
0150++ 10FC 50          	mov a, di
0151++ 10FD 3C          	mov d, a
0152++ 10FE             _strcat_goto_end_L1:
0153++ 10FE BD 00       	cmp byte[d], 0
0154++ 1100 C6 07 11    	je _strcat_start
0155++ 1103 79          	inc d
0156++ 1104 0A FE 10    	jmp _strcat_goto_end_L1
0157++ 1107             _strcat_start:
0158++ 1107 FD 50       	mov di, d
0159++ 1109             _strcat_L1:
0160++ 1109 F6          	lodsb
0161++ 110A F7          	stosb
0162++ 110B B9 00       	cmp al, 0
0163++ 110D C7 09 11    	jne _strcat_L1
0164++ 1110             _strcat_end:
0165++ 1110 E7          	pop d
0166++ 1111 E4          	pop a
0167++ 1112 F0          	pop di
0168++ 1113 EF          	pop si
0169++ 1114 09          	ret
0170++ 1115             
0171++ 1115             
0005+  1115             
0006+  1115             
0007+  1115             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  1115             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  1115             ; ASCII in BL
0010+  1115             ; result in AL
0011+  1115             ; ascii for F = 0100 0110
0012+  1115             ; ascii for 9 = 0011 1001
0013+  1115             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  1115             hex_ascii_encode:
0015+  1115 1B            mov al, bl
0016+  1116 93 40         test al, $40        ; test if letter or number
0017+  1118 C7 1E 11      jnz hex_letter
0018+  111B 87 0F         and al, $0F        ; get number
0019+  111D 09            ret
0020+  111E             hex_letter:
0021+  111E 87 0F         and al, $0F        ; get letter
0022+  1120 6A 09         add al, 9
0023+  1122 09            ret
0024+  1123             
0025+  1123             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  1123             ; ATOI
0027+  1123             ; 2 letter hex string in B
0028+  1123             ; 8bit integer returned in AL
0029+  1123             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  1123             _atoi:
0031+  1123 D8            push b
0032+  1124 07 15 11      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  1127 30            mov bl, bh
0034+  1128 DB            push al          ; save a
0035+  1129 07 15 11      call hex_ascii_encode
0036+  112C EA            pop bl  
0037+  112D FD 9E 04      shl al, 4
0038+  1130 8C            or al, bl
0039+  1131 E5            pop b
0040+  1132 09            ret  
0041+  1133             
0042+  1133             
0043+  1133             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  1133             ; scanf
0045+  1133             ; no need for explanations!
0046+  1133             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  1133             scanf:
0048+  1133 09            ret
0049+  1134             
0050+  1134             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  1134             ; ITOA
0052+  1134             ; 8bit value in BL
0053+  1134             ; 2 byte ASCII result in A
0054+  1134             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  1134             _itoa:
0056+  1134 DA            push d
0057+  1135 D8            push b
0058+  1136 A7 00         mov bh, 0
0059+  1138 FD A4 04      shr bl, 4  
0060+  113B 74            mov d, b
0061+  113C 1F E4 13      mov al, [d + s_hex_digits]
0062+  113F 23            mov ah, al
0063+  1140               
0064+  1140 E5            pop b
0065+  1141 D8            push b
0066+  1142 A7 00         mov bh, 0
0067+  1144 FD 87 0F      and bl, $0F
0068+  1147 74            mov d, b
0069+  1148 1F E4 13      mov al, [d + s_hex_digits]
0070+  114B E5            pop b
0071+  114C E7            pop d
0072+  114D 09            ret
0073+  114E             
0074+  114E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  114E             ; HEX STRING TO BINARY
0076+  114E             ; di = destination address
0077+  114E             ; si = source
0078+  114E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  114E             _hex_to_int:
0080+  114E             _hex_to_int_L1:
0081+  114E F6            lodsb          ; load from [SI] to AL
0082+  114F B9 00         cmp al, 0        ; check if ASCII 0
0083+  1151 C6 5E 11      jz _hex_to_int_ret
0084+  1154 36            mov bh, al
0085+  1155 F6            lodsb
0086+  1156 2F            mov bl, al
0087+  1157 07 23 11      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  115A F7            stosb          ; store AL to [DI]
0089+  115B 0A 4E 11      jmp _hex_to_int_L1
0090+  115E             _hex_to_int_ret:
0091+  115E 09            ret    
0092+  115F             
0093+  115F             
0094+  115F             
0095+  115F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  115F             ; GETCHAR
0097+  115F             ; char in ah
0098+  115F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  115F             getch:
0100+  115F DB            push al
0101+  1160             getch_retry:
0102+  1160 19 01         mov al, 1
0103+  1162 05 03         syscall sys_io      ; receive in AH
0104+  1164 E8            pop al
0105+  1165 09            ret
0106+  1166             
0107+  1166             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  1166             ; PUTCHAR
0109+  1166             ; char in ah
0110+  1166             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  1166             _putchar:
0112+  1166 D7            push a
0113+  1167 19 00         mov al, 0
0114+  1169 05 03         syscall sys_io      ; char in AH
0115+  116B E4            pop a
0116+  116C 09            ret
0117+  116D             
0118+  116D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  116D             ;; INPUT A STRING
0120+  116D             ;; terminates with null
0121+  116D             ;; pointer in D
0122+  116D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  116D             _gets:
0124+  116D D7            push a
0125+  116E DA            push d
0126+  116F             _gets_loop:
0127+  116F 19 01         mov al, 1
0128+  1171 05 03         syscall sys_io      ; receive in AH
0129+  1173 B9 00         cmp al, 0        ; check error code (AL)
0130+  1175 C6 6F 11      je _gets_loop      ; if no char received, retry
0131+  1178             
0132+  1178 76 1B         cmp ah, 27
0133+  117A C6 9B 11      je _gets_ansi_esc
0134+  117D 76 0A         cmp ah, $0A        ; LF
0135+  117F C6 06 12      je _gets_end
0136+  1182 76 0D         cmp ah, $0D        ; CR
0137+  1184 C6 06 12      je _gets_end
0138+  1187 76 5C         cmp ah, $5C        ; '\\'
0139+  1189 C6 C7 11      je _gets_escape
0140+  118C               
0141+  118C 76 08         cmp ah, $08      ; check for backspace
0142+  118E C6 97 11      je _gets_backspace
0143+  1191             
0144+  1191 1A            mov al, ah
0145+  1192 3E            mov [d], al
0146+  1193 79            inc d
0147+  1194 0A 6F 11      jmp _gets_loop
0148+  1197             _gets_backspace:
0149+  1197 7F            dec d
0150+  1198 0A 6F 11      jmp _gets_loop
0151+  119B             _gets_ansi_esc:
0152+  119B 19 01         mov al, 1
0153+  119D 05 03         syscall sys_io        ; receive in AH without echo
0154+  119F B9 00         cmp al, 0          ; check error code (AL)
0155+  11A1 C6 9B 11      je _gets_ansi_esc    ; if no char received, retry
0156+  11A4 76 5B         cmp ah, '['
0157+  11A6 C7 6F 11      jne _gets_loop
0158+  11A9             _gets_ansi_esc_2:
0159+  11A9 19 01         mov al, 1
0160+  11AB 05 03         syscall sys_io          ; receive in AH without echo
0161+  11AD B9 00         cmp al, 0            ; check error code (AL)
0162+  11AF C6 A9 11      je _gets_ansi_esc_2  ; if no char received, retry
0163+  11B2 76 44         cmp ah, 'D'
0164+  11B4 C6 BF 11      je _gets_left_arrow
0165+  11B7 76 43         cmp ah, 'C'
0166+  11B9 C6 C3 11      je _gets_right_arrow
0167+  11BC 0A 6F 11      jmp _gets_loop
0168+  11BF             _gets_left_arrow:
0169+  11BF 7F            dec d
0170+  11C0 0A 6F 11      jmp _gets_loop
0171+  11C3             _gets_right_arrow:
0172+  11C3 79            inc d
0173+  11C4 0A 6F 11      jmp _gets_loop
0174+  11C7             _gets_escape:
0175+  11C7 19 01         mov al, 1
0176+  11C9 05 03         syscall sys_io      ; receive in AH
0177+  11CB B9 00         cmp al, 0        ; check error code (AL)
0178+  11CD C6 C7 11      je _gets_escape      ; if no char received, retry
0179+  11D0 76 6E         cmp ah, 'n'
0180+  11D2 C6 F1 11      je _gets_LF
0181+  11D5 76 72         cmp ah, 'r'
0182+  11D7 C6 F8 11      je _gets_CR
0183+  11DA 76 30         cmp ah, '0'
0184+  11DC C6 FF 11      je _gets_NULL
0185+  11DF 76 5C         cmp ah, $5C  ; '\'
0186+  11E1 C6 EA 11      je _gets_slash
0187+  11E4 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  11E5 3E            mov [d], al
0189+  11E6 79            inc d
0190+  11E7 0A 6F 11      jmp _gets_loop
0191+  11EA             _gets_slash:
0192+  11EA 19 5C         mov al, $5C
0193+  11EC 3E            mov [d], al
0194+  11ED 79            inc d
0195+  11EE 0A 6F 11      jmp _gets_loop
0196+  11F1             _gets_LF:
0197+  11F1 19 0A         mov al, $0A
0198+  11F3 3E            mov [d], al
0199+  11F4 79            inc d
0200+  11F5 0A 6F 11      jmp _gets_loop
0201+  11F8             _gets_CR:
0202+  11F8 19 0D         mov al, $0D
0203+  11FA 3E            mov [d], al
0204+  11FB 79            inc d
0205+  11FC 0A 6F 11      jmp _gets_loop
0206+  11FF             _gets_NULL:
0207+  11FF 19 00         mov al, $00
0208+  1201 3E            mov [d], al
0209+  1202 79            inc d
0210+  1203 0A 6F 11      jmp _gets_loop
0211+  1206             _gets_end:
0212+  1206 19 00         mov al, 0
0213+  1208 3E            mov [d], al        ; terminate string
0214+  1209 E7            pop d
0215+  120A E4            pop a
0216+  120B 09            ret
0217+  120C             
0218+  120C             
0219+  120C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  120C             ;; INPUT TEXT
0221+  120C             ;; terminated with CTRL+D
0222+  120C             ;; pointer in D
0223+  120C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  120C             _gettxt:
0225+  120C D7            push a
0226+  120D DA            push d
0227+  120E             _gettxt_loop:
0228+  120E 19 01         mov al, 1
0229+  1210 05 03         syscall sys_io      ; receive in AH
0230+  1212 B9 00         cmp al, 0        ; check error code (AL)
0231+  1214 C6 0E 12      je _gettxt_loop    ; if no char received, retry
0232+  1217 76 04         cmp ah, 4      ; EOT
0233+  1219 C6 57 12      je _gettxt_end
0234+  121C 76 08         cmp ah, $08      ; check for backspace
0235+  121E C6 53 12      je _gettxt_backspace
0236+  1221 76 5C         cmp ah, $5C        ; '\'
0237+  1223 C6 2C 12      je _gettxt_escape
0238+  1226 1A            mov al, ah
0239+  1227 3E            mov [d], al
0240+  1228 79            inc d
0241+  1229 0A 0E 12      jmp _gettxt_loop
0242+  122C             _gettxt_escape:
0243+  122C 19 01         mov al, 1
0244+  122E 05 03         syscall sys_io      ; receive in AH
0245+  1230 B9 00         cmp al, 0        ; check error code (AL)
0246+  1232 C6 2C 12      je _gettxt_escape    ; if no char received, retry
0247+  1235 76 6E         cmp ah, 'n'
0248+  1237 C6 45 12      je _gettxt_LF
0249+  123A 76 72         cmp ah, 'r'
0250+  123C C6 4C 12      je _gettxt_CR
0251+  123F 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  1240 3E            mov [d], al
0253+  1241 79            inc d
0254+  1242 0A 0E 12      jmp _gettxt_loop
0255+  1245             _gettxt_LF:
0256+  1245 19 0A         mov al, $0A
0257+  1247 3E            mov [d], al
0258+  1248 79            inc d
0259+  1249 0A 0E 12      jmp _gettxt_loop
0260+  124C             _gettxt_CR:
0261+  124C 19 0D         mov al, $0D
0262+  124E 3E            mov [d], al
0263+  124F 79            inc d
0264+  1250 0A 0E 12      jmp _gettxt_loop
0265+  1253             _gettxt_backspace:
0266+  1253 7F            dec d
0267+  1254 0A 0E 12      jmp _gettxt_loop
0268+  1257             _gettxt_end:
0269+  1257 19 00         mov al, 0
0270+  1259 3E            mov [d], al        ; terminate string
0271+  125A E7            pop d
0272+  125B E4            pop a
0273+  125C 09            ret
0274+  125D             
0275+  125D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  125D             ; PRINT NEW LINE
0277+  125D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  125D             printnl:
0279+  125D D7            push a
0280+  125E 10 00 0A      mov a, $0A00
0281+  1261 05 03         syscall sys_io
0282+  1263 10 00 0D      mov a, $0D00
0283+  1266 05 03         syscall sys_io
0284+  1268 E4            pop a
0285+  1269 09            ret
0286+  126A             
0287+  126A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  126A             ; _strtoint
0289+  126A             ; 4 digit hex string number in d
0290+  126A             ; integer returned in A
0291+  126A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  126A             _strtointx:
0293+  126A D8            push b
0294+  126B 32            mov bl, [d]
0295+  126C 37            mov bh, bl
0296+  126D 33 01 00      mov bl, [d + 1]
0297+  1270 07 23 11      call _atoi        ; convert to int in AL
0298+  1273 23            mov ah, al        ; move to AH
0299+  1274 33 02 00      mov bl, [d + 2]
0300+  1277 37            mov bh, bl
0301+  1278 33 03 00      mov bl, [d + 3]
0302+  127B 07 23 11      call _atoi        ; convert to int in AL
0303+  127E E5            pop b
0304+  127F 09            ret
0305+  1280             
0306+  1280             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  1280             ; _strtoint
0308+  1280             ; 5 digit base10 string number in d
0309+  1280             ; integer returned in A
0310+  1280             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  1280             _strtoint:
0312+  1280 E2            push si
0313+  1281 D8            push b
0314+  1282 D9            push c
0315+  1283 DA            push d
0316+  1284 07 C5 10      call _strlen      ; get string length in C
0317+  1287 7E            dec c
0318+  1288 FD 4E         mov si, d
0319+  128A 12            mov a, c
0320+  128B FD 99         shl a
0321+  128D 3B FC 13      mov d, table_power
0322+  1290 59            add d, a
0323+  1291 38 00 00      mov c, 0
0324+  1294             _strtoint_L0:
0325+  1294 F6            lodsb      ; load ASCII to al
0326+  1295 B9 00         cmp al, 0
0327+  1297 C6 AA 12      je _strtoint_end
0328+  129A 6F 30         sub al, $30    ; make into integer
0329+  129C 22 00         mov ah, 0
0330+  129E 2A            mov b, [d]
0331+  129F AC            mul a, b      ; result in B since it fits in 16bits
0332+  12A0 11            mov a, b
0333+  12A1 28            mov b, c
0334+  12A2 54            add a, b
0335+  12A3 39            mov c, a
0336+  12A4 63 02 00      sub d, 2
0337+  12A7 0A 94 12      jmp _strtoint_L0
0338+  12AA             _strtoint_end:
0339+  12AA 12            mov a, c
0340+  12AB E7            pop d
0341+  12AC E6            pop c
0342+  12AD E5            pop b
0343+  12AE EF            pop si
0344+  12AF 09            ret
0345+  12B0             
0346+  12B0             
0347+  12B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  12B0             ; PRINT NULL TERMINATED STRING
0349+  12B0             ; pointer in D
0350+  12B0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  12B0             _puts:
0352+  12B0 D7            push a
0353+  12B1 DA            push d
0354+  12B2             _puts_L1:
0355+  12B2 1E            mov al, [d]
0356+  12B3 B9 00         cmp al, 0
0357+  12B5 C6 C1 12      jz _puts_END
0358+  12B8 23            mov ah, al
0359+  12B9 19 00         mov al, 0
0360+  12BB 05 03         syscall sys_io
0361+  12BD 79            inc d
0362+  12BE 0A B2 12      jmp _puts_L1
0363+  12C1             _puts_END:
0364+  12C1 E7            pop d
0365+  12C2 E4            pop a
0366+  12C3 09            ret
0367+  12C4             
0368+  12C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  12C4             ; PRINT N SIZE STRING
0370+  12C4             ; pointer in D
0371+  12C4             ; size in C
0372+  12C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  12C4             _putsn:
0374+  12C4 DB            push al
0375+  12C5 DA            push d
0376+  12C6 D9            push c
0377+  12C7             _putsn_L0:
0378+  12C7 1E            mov al, [d]
0379+  12C8 23            mov ah, al
0380+  12C9 19 00         mov al, 0
0381+  12CB 05 03         syscall sys_io
0382+  12CD 79            inc d
0383+  12CE 7E            dec c  
0384+  12CF C2 00 00      cmp c, 0
0385+  12D2 C7 C7 12      jne _putsn_L0
0386+  12D5             _putsn_end:
0387+  12D5 E6            pop c
0388+  12D6 E7            pop d
0389+  12D7 E8            pop al
0390+  12D8 09            ret
0391+  12D9             
0392+  12D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  12D9             ; print 16bit decimal number
0394+  12D9             ; input number in A
0395+  12D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  12D9             print_u16d:
0397+  12D9 D7            push a
0398+  12DA D8            push b
0399+  12DB 26 10 27      mov b, 10000
0400+  12DE AE            div a, b      ; get 10000's coeff.
0401+  12DF 07 01 13      call print_number
0402+  12E2 11            mov a, b
0403+  12E3 26 E8 03      mov b, 1000
0404+  12E6 AE            div a, b      ; get 1000's coeff.
0405+  12E7 07 01 13      call print_number
0406+  12EA 11            mov a, b
0407+  12EB 26 64 00      mov b, 100
0408+  12EE AE            div a, b
0409+  12EF 07 01 13      call print_number
0410+  12F2 11            mov a, b
0411+  12F3 26 0A 00      mov b, 10
0412+  12F6 AE            div a, b
0413+  12F7 07 01 13      call print_number
0414+  12FA 1B            mov al, bl      ; 1's coeff in bl
0415+  12FB 07 01 13      call print_number
0416+  12FE E5            pop b
0417+  12FF E4            pop a
0418+  1300 09            ret
0419+  1301             
0420+  1301             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  1301             ; print AL
0422+  1301             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  1301             print_number:
0424+  1301 6A 30         add al, $30
0425+  1303 23            mov ah, al
0426+  1304 07 66 11      call _putchar
0427+  1307 09            ret
0428+  1308             
0429+  1308             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  1308             ; PRINT 16BIT HEX INTEGER
0431+  1308             ; integer value in reg B
0432+  1308             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  1308             print_u16x:
0434+  1308 D7            push a
0435+  1309 D8            push b
0436+  130A DD            push bl
0437+  130B 30            mov bl, bh
0438+  130C 07 34 11      call _itoa        ; convert bh to char in A
0439+  130F 2F            mov bl, al        ; save al
0440+  1310 19 00         mov al, 0
0441+  1312 05 03         syscall sys_io        ; display AH
0442+  1314 24            mov ah, bl        ; retrieve al
0443+  1315 19 00         mov al, 0
0444+  1317 05 03         syscall sys_io        ; display AL
0445+  1319             
0446+  1319 EA            pop bl
0447+  131A 07 34 11      call _itoa        ; convert bh to char in A
0448+  131D 2F            mov bl, al        ; save al
0449+  131E 19 00         mov al, 0
0450+  1320 05 03         syscall sys_io        ; display AH
0451+  1322 24            mov ah, bl        ; retrieve al
0452+  1323 19 00         mov al, 0
0453+  1325 05 03         syscall sys_io        ; display AL
0454+  1327             
0455+  1327 E5            pop b
0456+  1328 E4            pop a
0457+  1329 09            ret
0458+  132A             
0459+  132A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  132A             ; INPUT 16BIT HEX INTEGER
0461+  132A             ; read 16bit integer into A
0462+  132A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  132A             scan_u16x:
0464+  132A F8 10 00      enter 16
0465+  132D D8            push b
0466+  132E DA            push d
0467+  132F             
0468+  132F FA F1 FF      lea d, [bp + -15]
0469+  1332 07 6D 11      call _gets        ; get number
0470+  1335             
0471+  1335 32            mov bl, [d]
0472+  1336 37            mov bh, bl
0473+  1337 33 01 00      mov bl, [d + 1]
0474+  133A 07 23 11      call _atoi        ; convert to int in AL
0475+  133D 23            mov ah, al        ; move to AH
0476+  133E             
0477+  133E 33 02 00      mov bl, [d + 2]
0478+  1341 37            mov bh, bl
0479+  1342 33 03 00      mov bl, [d + 3]
0480+  1345 07 23 11      call _atoi        ; convert to int in AL
0481+  1348             
0482+  1348 E7            pop d
0483+  1349 E5            pop b
0484+  134A F9            leave
0485+  134B 09            ret
0486+  134C             
0487+  134C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  134C             ; PRINT 8bit HEX INTEGER
0489+  134C             ; integer value in reg bl
0490+  134C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  134C             print_u8x:
0492+  134C D7            push a
0493+  134D DD            push bl
0494+  134E             
0495+  134E 07 34 11      call _itoa        ; convert bl to char in A
0496+  1351 2F            mov bl, al        ; save al
0497+  1352 19 00         mov al, 0
0498+  1354 05 03         syscall sys_io        ; display AH
0499+  1356 24            mov ah, bl        ; retrieve al
0500+  1357 19 00         mov al, 0
0501+  1359 05 03         syscall sys_io        ; display AL
0502+  135B             
0503+  135B EA            pop bl
0504+  135C E4            pop a
0505+  135D 09            ret
0506+  135E             
0507+  135E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  135E             ; print 8bit decimal unsigned number
0509+  135E             ; input number in AL
0510+  135E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  135E             print_u8d:
0512+  135E D7            push a
0513+  135F D8            push b
0514+  1360             
0515+  1360 22 00         mov ah, 0
0516+  1362 26 64 00      mov b, 100
0517+  1365 AE            div a, b
0518+  1366 D8            push b      ; save remainder
0519+  1367 B9 00         cmp al, 0
0520+  1369 C6 73 13      je skip100
0521+  136C 6A 30         add al, $30
0522+  136E 23            mov ah, al
0523+  136F 19 00         mov al, 0
0524+  1371 05 03         syscall sys_io  ; print coeff
0525+  1373             skip100:
0526+  1373 E4            pop a
0527+  1374 22 00         mov ah, 0
0528+  1376 26 0A 00      mov b, 10
0529+  1379 AE            div a, b
0530+  137A D8            push b      ; save remainder
0531+  137B B9 00         cmp al, 0
0532+  137D C6 87 13      je skip10
0533+  1380 6A 30         add al, $30
0534+  1382 23            mov ah, al
0535+  1383 19 00         mov al, 0
0536+  1385 05 03         syscall sys_io  ; print coeff
0537+  1387             skip10:
0538+  1387 E4            pop a
0539+  1388 1B            mov al, bl
0540+  1389 6A 30         add al, $30
0541+  138B 23            mov ah, al
0542+  138C 19 00         mov al, 0
0543+  138E 05 03         syscall sys_io  ; print coeff
0544+  1390 E5            pop b
0545+  1391 E4            pop a
0546+  1392 09            ret
0547+  1393             
0548+  1393             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  1393             ; INPUT 8BIT HEX INTEGER
0550+  1393             ; read 8bit integer into AL
0551+  1393             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  1393             scan_u8x:
0553+  1393 F8 04 00      enter 4
0554+  1396 D8            push b
0555+  1397 DA            push d
0556+  1398             
0557+  1398 FA FD FF      lea d, [bp + -3]
0558+  139B 07 6D 11      call _gets        ; get number
0559+  139E             
0560+  139E 32            mov bl, [d]
0561+  139F 37            mov bh, bl
0562+  13A0 33 01 00      mov bl, [d + 1]
0563+  13A3 07 23 11      call _atoi        ; convert to int in AL
0564+  13A6             
0565+  13A6 E7            pop d
0566+  13A7 E5            pop b
0567+  13A8 F9            leave
0568+  13A9 09            ret
0569+  13AA             
0570+  13AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  13AA             ; input decimal number
0572+  13AA             ; result in A
0573+  13AA             ; 655'\0'
0574+  13AA             ; low--------high
0575+  13AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  13AA             scan_u16d:
0577+  13AA F8 08 00      enter 8
0578+  13AD E2            push si
0579+  13AE D8            push b
0580+  13AF D9            push c
0581+  13B0 DA            push d
0582+  13B1 FA F9 FF      lea d, [bp +- 7]
0583+  13B4 07 6D 11      call _gets
0584+  13B7 07 C5 10      call _strlen      ; get string length in C
0585+  13BA 7E            dec c
0586+  13BB FD 4E         mov si, d
0587+  13BD 12            mov a, c
0588+  13BE FD 99         shl a
0589+  13C0 3B FC 13      mov d, table_power
0590+  13C3 59            add d, a
0591+  13C4 38 00 00      mov c, 0
0592+  13C7             mul_loop:
0593+  13C7 F6            lodsb      ; load ASCII to al
0594+  13C8 B9 00         cmp al, 0
0595+  13CA C6 DD 13      je mul_exit
0596+  13CD 6F 30         sub al, $30    ; make into integer
0597+  13CF 22 00         mov ah, 0
0598+  13D1 2A            mov b, [d]
0599+  13D2 AC            mul a, b      ; result in B since it fits in 16bits
0600+  13D3 11            mov a, b
0601+  13D4 28            mov b, c
0602+  13D5 54            add a, b
0603+  13D6 39            mov c, a
0604+  13D7 63 02 00      sub d, 2
0605+  13DA 0A C7 13      jmp mul_loop
0606+  13DD             mul_exit:
0607+  13DD 12            mov a, c
0608+  13DE E7            pop d
0609+  13DF E6            pop c
0610+  13E0 E5            pop b
0611+  13E1 EF            pop si
0612+  13E2 F9            leave
0613+  13E3 09            ret
0614+  13E4             
0615+  13E4             
0616+  13E4 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  13E8 34 35 36 37 
0616+  13EC 38 39 41 42 
0616+  13F0 43 44 45 46 
0617+  13F4 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  13F8 1B 5B 48 00 
0618+  13FC             
0619+  13FC             table_power:
0620+  13FC 01 00         .dw 1
0621+  13FE 0A 00         .dw 10
0622+  1400 64 00         .dw 100
0623+  1402 E8 03         .dw 1000
0624+  1404 10 27         .dw 100002362   1406             ; --- END INLINE ASM BLOCK
2363   1406             
2364   1406 F9            leave
2365   1407 09            ret
2366   1408             
2367   1408             rotr:
2368   1408 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2369   140B             ;; return (x >> n) | (x << (16 - n)); 
2370   140B FA 05 00      lea d, [bp + 5] ; $x
2371   140E 2A            mov b, [d]
2372   140F             ; START SHIFT
2373   140F D7            push a
2374   1410 11            mov a, b
2375   1411 FA 07 00      lea d, [bp + 7] ; $n
2376   1414 2A            mov b, [d]
2377   1415 FD 39         mov c, b
2378   1417 A1            shr a, cl
2379   1418 27            mov b, a
2380   1419 E4            pop a
2381   141A             ; END SHIFT
2382   141A D7            push a
2383   141B 11            mov a, b
2384   141C FA 05 00      lea d, [bp + 5] ; $x
2385   141F 2A            mov b, [d]
2386   1420             ; START SHIFT
2387   1420 D7            push a
2388   1421 11            mov a, b
2389   1422 26 10 00      mov b, $10
2390   1425             ; START TERMS
2391   1425 D7            push a
2392   1426 11            mov a, b
2393   1427 FA 07 00      lea d, [bp + 7] ; $n
2394   142A 2A            mov b, [d]
2395   142B 60            sub a, b
2396   142C 27            mov b, a
2397   142D E4            pop a
2398   142E             ; END TERMS
2399   142E FD 39         mov c, b
2400   1430 9D            shl a, cl
2401   1431 27            mov b, a
2402   1432 E4            pop a
2403   1433             ; END SHIFT
2404   1433 8A            or a, b ; &
2405   1434 27            mov b, a
2406   1435 E4            pop a
2407   1436 F9            leave
2408   1437 09            ret
2409   1438             
2410   1438             simple_hash:
2411   1438 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2412   143B             ; $h 
2413   143B             ; $k 
2414   143B             ; $i 
2415   143B             ; $j 
2416   143B             ; $val 
2417   143B             ; $len 
2418   143B 52 20 00      sub sp, 32
2419   143E             ;; h[0]=0x6745; 
2420   143E FA F1 FF      lea d, [bp + -15] ; $h
2421   1441 D7            push a
2422   1442 DA            push d
2423   1443 26 00 00      mov b, $0
2424   1446 E7            pop d
2425   1447 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2426   144B E4            pop a
2427   144C DA            push d
2428   144D 26 45 67      mov b, $6745
2429   1450 E7            pop d
2430   1451 FD 43         mov [d], b
2431   1453             ;; h[1]=0xEFCD; 
2432   1453 FA F1 FF      lea d, [bp + -15] ; $h
2433   1456 D7            push a
2434   1457 DA            push d
2435   1458 26 01 00      mov b, $1
2436   145B E7            pop d
2437   145C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2438   1460 E4            pop a
2439   1461 DA            push d
2440   1462 26 CD EF      mov b, $efcd
2441   1465 E7            pop d
2442   1466 FD 43         mov [d], b
2443   1468             ;; h[2]=0x98AB; 
2444   1468 FA F1 FF      lea d, [bp + -15] ; $h
2445   146B D7            push a
2446   146C DA            push d
2447   146D 26 02 00      mov b, $2
2448   1470 E7            pop d
2449   1471 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2450   1475 E4            pop a
2451   1476 DA            push d
2452   1477 26 AB 98      mov b, $98ab
2453   147A E7            pop d
2454   147B FD 43         mov [d], b
2455   147D             ;; h[3]=0xCDEF; 
2456   147D FA F1 FF      lea d, [bp + -15] ; $h
2457   1480 D7            push a
2458   1481 DA            push d
2459   1482 26 03 00      mov b, $3
2460   1485 E7            pop d
2461   1486 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2462   148A E4            pop a
2463   148B DA            push d
2464   148C 26 EF CD      mov b, $cdef
2465   148F E7            pop d
2466   1490 FD 43         mov [d], b
2467   1492             ;; k[0]=0x1234; 
2468   1492 FA E9 FF      lea d, [bp + -23] ; $k
2469   1495 D7            push a
2470   1496 DA            push d
2471   1497 26 00 00      mov b, $0
2472   149A E7            pop d
2473   149B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2474   149F E4            pop a
2475   14A0 DA            push d
2476   14A1 26 34 12      mov b, $1234
2477   14A4 E7            pop d
2478   14A5 FD 43         mov [d], b
2479   14A7             ;; k[1]=0x5678; 
2480   14A7 FA E9 FF      lea d, [bp + -23] ; $k
2481   14AA D7            push a
2482   14AB DA            push d
2483   14AC 26 01 00      mov b, $1
2484   14AF E7            pop d
2485   14B0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2486   14B4 E4            pop a
2487   14B5 DA            push d
2488   14B6 26 78 56      mov b, $5678
2489   14B9 E7            pop d
2490   14BA FD 43         mov [d], b
2491   14BC             ;; k[2]=0x9ABC; 
2492   14BC FA E9 FF      lea d, [bp + -23] ; $k
2493   14BF D7            push a
2494   14C0 DA            push d
2495   14C1 26 02 00      mov b, $2
2496   14C4 E7            pop d
2497   14C5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2498   14C9 E4            pop a
2499   14CA DA            push d
2500   14CB 26 BC 9A      mov b, $9abc
2501   14CE E7            pop d
2502   14CF FD 43         mov [d], b
2503   14D1             ;; k[3]=0xDEF0; 
2504   14D1 FA E9 FF      lea d, [bp + -23] ; $k
2505   14D4 D7            push a
2506   14D5 DA            push d
2507   14D6 26 03 00      mov b, $3
2508   14D9 E7            pop d
2509   14DA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2510   14DE E4            pop a
2511   14DF DA            push d
2512   14E0 26 F0 DE      mov b, $def0
2513   14E3 E7            pop d
2514   14E4 FD 43         mov [d], b
2515   14E6             ;; ; 
2516   14E6             ;; len = strlen(input); 
2517   14E6 FA E1 FF      lea d, [bp + -31] ; $len
2518   14E9 DA            push d
2519   14EA FA 05 00      lea d, [bp + 5] ; $input
2520   14ED 2A            mov b, [d]
2521   14EE FD AB         swp b
2522   14F0 D8            push b
2523   14F1 07 F2 05      call strlen
2524   14F4 51 02 00      add sp, 2
2525   14F7 E7            pop d
2526   14F8 FD 43         mov [d], b
2527   14FA             ;; for (i = 0; i < len; i++) { 
2528   14FA             _for34_init:
2529   14FA FA E7 FF      lea d, [bp + -25] ; $i
2530   14FD DA            push d
2531   14FE 26 00 00      mov b, $0
2532   1501 E7            pop d
2533   1502 FD 43         mov [d], b
2534   1504             _for34_cond:
2535   1504 FA E7 FF      lea d, [bp + -25] ; $i
2536   1507 2A            mov b, [d]
2537   1508             ; START RELATIONAL
2538   1508 D7            push a
2539   1509 11            mov a, b
2540   150A FA E1 FF      lea d, [bp + -31] ; $len
2541   150D 2A            mov b, [d]
2542   150E B0            cmp a, b
2543   150F FD 75         slu ; < (unsigned)
2544   1511 E4            pop a
2545   1512             ; END RELATIONAL
2546   1512 C0 00 00      cmp b, 0
2547   1515 C6 32 16      je _for34_exit
2548   1518             _for34_block:
2549   1518             ;; val = (unsigned char)input[i]; 
2550   1518 FA E3 FF      lea d, [bp + -29] ; $val
2551   151B DA            push d
2552   151C FA 05 00      lea d, [bp + 5] ; $input
2553   151F FD 2A         mov d, [d]
2554   1521 D7            push a
2555   1522 DA            push d
2556   1523 FA E7 FF      lea d, [bp + -25] ; $i
2557   1526 2A            mov b, [d]
2558   1527 E7            pop d
2559   1528 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2560   152C E4            pop a
2561   152D 32            mov bl, [d]
2562   152E A7 00         mov bh, 0
2563   1530 A7 00         mov bh, 0
2564   1532 E7            pop d
2565   1533 FD 43         mov [d], b
2566   1535             ;; for (j = 0; j < 4; j++) { 
2567   1535             _for35_init:
2568   1535 FA E5 FF      lea d, [bp + -27] ; $j
2569   1538 DA            push d
2570   1539 26 00 00      mov b, $0
2571   153C E7            pop d
2572   153D FD 43         mov [d], b
2573   153F             _for35_cond:
2574   153F FA E5 FF      lea d, [bp + -27] ; $j
2575   1542 2A            mov b, [d]
2576   1543             ; START RELATIONAL
2577   1543 D7            push a
2578   1544 11            mov a, b
2579   1545 26 04 00      mov b, $4
2580   1548 B0            cmp a, b
2581   1549 FD 75         slu ; < (unsigned)
2582   154B E4            pop a
2583   154C             ; END RELATIONAL
2584   154C C0 00 00      cmp b, 0
2585   154F C6 22 16      je _for35_exit
2586   1552             _for35_block:
2587   1552             ;; h[j] = h[j] ^ rotr(val + k[j], j + 1); 
2588   1552 FA F1 FF      lea d, [bp + -15] ; $h
2589   1555 D7            push a
2590   1556 DA            push d
2591   1557 FA E5 FF      lea d, [bp + -27] ; $j
2592   155A 2A            mov b, [d]
2593   155B E7            pop d
2594   155C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2595   1560 E4            pop a
2596   1561 DA            push d
2597   1562 FA F1 FF      lea d, [bp + -15] ; $h
2598   1565 D7            push a
2599   1566 DA            push d
2600   1567 FA E5 FF      lea d, [bp + -27] ; $j
2601   156A 2A            mov b, [d]
2602   156B E7            pop d
2603   156C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2604   1570 E4            pop a
2605   1571 2A            mov b, [d]
2606   1572 D7            push a
2607   1573 11            mov a, b
2608   1574 FA E5 FF      lea d, [bp + -27] ; $j
2609   1577 2A            mov b, [d]
2610   1578             ; START TERMS
2611   1578 D7            push a
2612   1579 11            mov a, b
2613   157A 26 01 00      mov b, $1
2614   157D 54            add a, b
2615   157E 27            mov b, a
2616   157F E4            pop a
2617   1580             ; END TERMS
2618   1580 FD AB         swp b
2619   1582 D8            push b
2620   1583 FA E3 FF      lea d, [bp + -29] ; $val
2621   1586 2A            mov b, [d]
2622   1587             ; START TERMS
2623   1587 D7            push a
2624   1588 11            mov a, b
2625   1589 FA E9 FF      lea d, [bp + -23] ; $k
2626   158C D7            push a
2627   158D DA            push d
2628   158E FA E5 FF      lea d, [bp + -27] ; $j
2629   1591 2A            mov b, [d]
2630   1592 E7            pop d
2631   1593 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2632   1597 E4            pop a
2633   1598 2A            mov b, [d]
2634   1599 54            add a, b
2635   159A 27            mov b, a
2636   159B E4            pop a
2637   159C             ; END TERMS
2638   159C FD AB         swp b
2639   159E D8            push b
2640   159F 07 08 14      call rotr
2641   15A2 51 04 00      add sp, 4
2642   15A5 8E            xor a, b ; ^
2643   15A6 27            mov b, a
2644   15A7 E4            pop a
2645   15A8 E7            pop d
2646   15A9 FD 43         mov [d], b
2647   15AB             ;; h[j] = h[j] + val; 
2648   15AB FA F1 FF      lea d, [bp + -15] ; $h
2649   15AE D7            push a
2650   15AF DA            push d
2651   15B0 FA E5 FF      lea d, [bp + -27] ; $j
2652   15B3 2A            mov b, [d]
2653   15B4 E7            pop d
2654   15B5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2655   15B9 E4            pop a
2656   15BA DA            push d
2657   15BB FA F1 FF      lea d, [bp + -15] ; $h
2658   15BE D7            push a
2659   15BF DA            push d
2660   15C0 FA E5 FF      lea d, [bp + -27] ; $j
2661   15C3 2A            mov b, [d]
2662   15C4 E7            pop d
2663   15C5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2664   15C9 E4            pop a
2665   15CA 2A            mov b, [d]
2666   15CB             ; START TERMS
2667   15CB D7            push a
2668   15CC 11            mov a, b
2669   15CD FA E3 FF      lea d, [bp + -29] ; $val
2670   15D0 2A            mov b, [d]
2671   15D1 54            add a, b
2672   15D2 27            mov b, a
2673   15D3 E4            pop a
2674   15D4             ; END TERMS
2675   15D4 E7            pop d
2676   15D5 FD 43         mov [d], b
2677   15D7             ;; h[j] = rotr(h[j], j + 1); 
2678   15D7 FA F1 FF      lea d, [bp + -15] ; $h
2679   15DA D7            push a
2680   15DB DA            push d
2681   15DC FA E5 FF      lea d, [bp + -27] ; $j
2682   15DF 2A            mov b, [d]
2683   15E0 E7            pop d
2684   15E1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2685   15E5 E4            pop a
2686   15E6 DA            push d
2687   15E7 FA E5 FF      lea d, [bp + -27] ; $j
2688   15EA 2A            mov b, [d]
2689   15EB             ; START TERMS
2690   15EB D7            push a
2691   15EC 11            mov a, b
2692   15ED 26 01 00      mov b, $1
2693   15F0 54            add a, b
2694   15F1 27            mov b, a
2695   15F2 E4            pop a
2696   15F3             ; END TERMS
2697   15F3 FD AB         swp b
2698   15F5 D8            push b
2699   15F6 FA F1 FF      lea d, [bp + -15] ; $h
2700   15F9 D7            push a
2701   15FA DA            push d
2702   15FB FA E5 FF      lea d, [bp + -27] ; $j
2703   15FE 2A            mov b, [d]
2704   15FF E7            pop d
2705   1600 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2706   1604 E4            pop a
2707   1605 2A            mov b, [d]
2708   1606 FD AB         swp b
2709   1608 D8            push b
2710   1609 07 08 14      call rotr
2711   160C 51 04 00      add sp, 4
2712   160F E7            pop d
2713   1610 FD 43         mov [d], b
2714   1612             _for35_update:
2715   1612 FA E5 FF      lea d, [bp + -27] ; $j
2716   1615 2A            mov b, [d]
2717   1616 D8            push b
2718   1617 FD 77         inc b
2719   1619 FA E5 FF      lea d, [bp + -27] ; $j
2720   161C FD 43         mov [d], b
2721   161E E5            pop b
2722   161F 0A 3F 15      jmp _for35_cond
2723   1622             _for35_exit:
2724   1622             _for34_update:
2725   1622 FA E7 FF      lea d, [bp + -25] ; $i
2726   1625 2A            mov b, [d]
2727   1626 D8            push b
2728   1627 FD 77         inc b
2729   1629 FA E7 FF      lea d, [bp + -25] ; $i
2730   162C FD 43         mov [d], b
2731   162E E5            pop b
2732   162F 0A 04 15      jmp _for34_cond
2733   1632             _for34_exit:
2734   1632             ;; for (i = 0; i <  16         / 2; i++) { 
2735   1632             _for36_init:
2736   1632 FA E7 FF      lea d, [bp + -25] ; $i
2737   1635 DA            push d
2738   1636 26 00 00      mov b, $0
2739   1639 E7            pop d
2740   163A FD 43         mov [d], b
2741   163C             _for36_cond:
2742   163C FA E7 FF      lea d, [bp + -25] ; $i
2743   163F 2A            mov b, [d]
2744   1640             ; START RELATIONAL
2745   1640 D7            push a
2746   1641 11            mov a, b
2747   1642 26 10 00      mov b, $10
2748   1645             ; START FACTORS
2749   1645 D7            push a
2750   1646 11            mov a, b
2751   1647 26 02 00      mov b, $2
2752   164A AE            div a, b
2753   164B 27            mov b, a
2754   164C E4            pop a
2755   164D             ; END FACTORS
2756   164D B0            cmp a, b
2757   164E FD 75         slu ; < (unsigned)
2758   1650 E4            pop a
2759   1651             ; END RELATIONAL
2760   1651 C0 00 00      cmp b, 0
2761   1654 C6 DD 16      je _for36_exit
2762   1657             _for36_block:
2763   1657             ;; output[i * 2] = h[i] & 0xFF; 
2764   1657 2C 07 00      mov b, [bp + 7] ; $output
2765   165A 74            mov d, b
2766   165B D7            push a
2767   165C DA            push d
2768   165D FA E7 FF      lea d, [bp + -25] ; $i
2769   1660 2A            mov b, [d]
2770   1661             ; START FACTORS
2771   1661 D7            push a
2772   1662 11            mov a, b
2773   1663 26 02 00      mov b, $2
2774   1666 AC            mul a, b ; *
2775   1667 11            mov a, b
2776   1668 27            mov b, a
2777   1669 E4            pop a
2778   166A             ; END FACTORS
2779   166A E7            pop d
2780   166B 5A            add d, b
2781   166C E4            pop a
2782   166D DA            push d
2783   166E FA F1 FF      lea d, [bp + -15] ; $h
2784   1671 D7            push a
2785   1672 DA            push d
2786   1673 FA E7 FF      lea d, [bp + -25] ; $i
2787   1676 2A            mov b, [d]
2788   1677 E7            pop d
2789   1678 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2790   167C E4            pop a
2791   167D 2A            mov b, [d]
2792   167E D7            push a
2793   167F 11            mov a, b
2794   1680 26 FF 00      mov b, $ff
2795   1683 86            and a, b ; &
2796   1684 27            mov b, a
2797   1685 E4            pop a
2798   1686 E7            pop d
2799   1687 FD 3E         mov [d], bl
2800   1689             ;; output[i * 2 + 1] = (h[i] >> 8) & 0xFF; 
2801   1689 2C 07 00      mov b, [bp + 7] ; $output
2802   168C 74            mov d, b
2803   168D D7            push a
2804   168E DA            push d
2805   168F FA E7 FF      lea d, [bp + -25] ; $i
2806   1692 2A            mov b, [d]
2807   1693             ; START FACTORS
2808   1693 D7            push a
2809   1694 11            mov a, b
2810   1695 26 02 00      mov b, $2
2811   1698 AC            mul a, b ; *
2812   1699 11            mov a, b
2813   169A 27            mov b, a
2814   169B E4            pop a
2815   169C             ; END FACTORS
2816   169C             ; START TERMS
2817   169C D7            push a
2818   169D 11            mov a, b
2819   169E 26 01 00      mov b, $1
2820   16A1 54            add a, b
2821   16A2 27            mov b, a
2822   16A3 E4            pop a
2823   16A4             ; END TERMS
2824   16A4 E7            pop d
2825   16A5 5A            add d, b
2826   16A6 E4            pop a
2827   16A7 DA            push d
2828   16A8 FA F1 FF      lea d, [bp + -15] ; $h
2829   16AB D7            push a
2830   16AC DA            push d
2831   16AD FA E7 FF      lea d, [bp + -25] ; $i
2832   16B0 2A            mov b, [d]
2833   16B1 E7            pop d
2834   16B2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2835   16B6 E4            pop a
2836   16B7 2A            mov b, [d]
2837   16B8             ; START SHIFT
2838   16B8 D7            push a
2839   16B9 11            mov a, b
2840   16BA 26 08 00      mov b, $8
2841   16BD FD 39         mov c, b
2842   16BF A1            shr a, cl
2843   16C0 27            mov b, a
2844   16C1 E4            pop a
2845   16C2             ; END SHIFT
2846   16C2 D7            push a
2847   16C3 11            mov a, b
2848   16C4 26 FF 00      mov b, $ff
2849   16C7 86            and a, b ; &
2850   16C8 27            mov b, a
2851   16C9 E4            pop a
2852   16CA E7            pop d
2853   16CB FD 3E         mov [d], bl
2854   16CD             _for36_update:
2855   16CD FA E7 FF      lea d, [bp + -25] ; $i
2856   16D0 2A            mov b, [d]
2857   16D1 D8            push b
2858   16D2 FD 77         inc b
2859   16D4 FA E7 FF      lea d, [bp + -25] ; $i
2860   16D7 FD 43         mov [d], b
2861   16D9 E5            pop b
2862   16DA 0A 3C 16      jmp _for36_cond
2863   16DD             _for36_exit:
2864   16DD F9            leave
2865   16DE 09            ret
2866   16DF             ; --- END TEXT BLOCK
2867   16DF             
2868   16DF             ; --- BEGIN DATA BLOCK
2869   16DF 48 65 6C 6C _text_data: .db "Hello World", 0
2869   16E3 6F 20 57 6F 
2869   16E7 72 6C 64 00 
2870   16EB DF 16       _text: .dw _text_data
2871   16ED 48 61 73 68 __s0: .db "Hash: ", 0
2871   16F1 3A 20 00 
2872   16F4 0A 00       __s1: .db "\n", 0
2873   16F6 55 6E 65 78 __s2: .db "Unexpected format in printf.", 0
2873   16FA 70 65 63 74 
2873   16FE 65 64 20 66 
2873   1702 6F 72 6D 61 
2873   1706 74 20 69 6E 
2873   170A 20 70 72 69 
2873   170E 6E 74 66 2E 
2873   1712 00 
2874   1713 45 72 72 6F __s3: .db "Error: Unknown argument type.\n", 0
2874   1717 72 3A 20 55 
2874   171B 6E 6B 6E 6F 
2874   171F 77 6E 20 61 
2874   1723 72 67 75 6D 
2874   1727 65 6E 74 20 
2874   172B 74 79 70 65 
2874   172F 2E 0A 00 
2875   1732 1B 5B 32 4A __s4: .db "\033[2J\033[H", 0
2875   1736 1B 5B 48 00 
2876   173A             
2877   173A 3C 17       _heap_top: .dw _heap
2878   173C 00          _heap: .db 0
2879   173D             ; --- END DATA BLOCK
2880   173D             
2881   173D             .end
tasm: Number of errors = 0
