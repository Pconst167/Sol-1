0001   0000             ; --- FILENAME: programs/sha256.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; unsigned char hash[  16          ]; 
0011   0408 52 10 00      sub sp, 16
0012   040B             ; int i; 
0013   040B 52 02 00      sub sp, 2
0014   040E             ; do{ 
0015   040E             _do1_block:
0016   040E             ; scanf("Enter a string to hash: %s", text); 
0017   040E 3B 32 23      mov d, _text_data ; $text
0018   0411 2D            mov b, d
0019   0412 FD AB         swp b
0020   0414 D8            push b
0021   0415 26 34 25      mov b, _s0 ; "Enter a string to hash: %s"
0022   0418 FD AB         swp b
0023   041A D8            push b
0024   041B 07 58 0B      call scanf
0025   041E 51 04 00      add sp, 4
0026   0421             ; if(text[0] == '\0') printf("\nEmpty string.\n"); 
0027   0421             _if2_cond:
0028   0421 3B 32 23      mov d, _text_data ; $text
0029   0424 D7            push a
0030   0425 DA            push d
0031   0426 26 00 00      mov b, $0
0032   0429 E7            pop d
0033   042A 5A            add d, b
0034   042B E4            pop a
0035   042C 32            mov bl, [d]
0036   042D A7 00         mov bh, 0
0037   042F             ; --- START RELATIONAL
0038   042F D7            push a
0039   0430 11            mov a, b
0040   0431 26 00 00      mov b, $0
0041   0434 B0            cmp a, b
0042   0435 FD 71         seq ; ==
0043   0437 E4            pop a
0044   0438             ; --- END RELATIONAL
0045   0438 C0 00 00      cmp b, 0
0046   043B C6 4D 04      je _if2_exit
0047   043E             _if2_true:
0048   043E             ; printf("\nEmpty string.\n"); 
0049   043E 26 4F 25      mov b, _s1 ; "\nEmpty string.\n"
0050   0441 FD AB         swp b
0051   0443 D8            push b
0052   0444 07 F0 08      call printf
0053   0447 51 02 00      add sp, 2
0054   044A 0A 4D 04      jmp _if2_exit
0055   044D             _if2_exit:
0056   044D             ; } while(text[0] == '\0'); 
0057   044D             _do1_cond:
0058   044D 3B 32 23      mov d, _text_data ; $text
0059   0450 D7            push a
0060   0451 DA            push d
0061   0452 26 00 00      mov b, $0
0062   0455 E7            pop d
0063   0456 5A            add d, b
0064   0457 E4            pop a
0065   0458 32            mov bl, [d]
0066   0459 A7 00         mov bh, 0
0067   045B             ; --- START RELATIONAL
0068   045B D7            push a
0069   045C 11            mov a, b
0070   045D 26 00 00      mov b, $0
0071   0460 B0            cmp a, b
0072   0461 FD 71         seq ; ==
0073   0463 E4            pop a
0074   0464             ; --- END RELATIONAL
0075   0464 C0 01 00      cmp b, 1
0076   0467 C6 0E 04      je _do1_block
0077   046A             _do1_exit:
0078   046A             ; simple_hash(text, hash); 
0079   046A FA F1 FF      lea d, [bp + -15] ; $hash
0080   046D 2D            mov b, d
0081   046E FD AB         swp b
0082   0470 D8            push b
0083   0471 3B 32 23      mov d, _text_data ; $text
0084   0474 2D            mov b, d
0085   0475 FD AB         swp b
0086   0477 D8            push b
0087   0478 07 81 20      call simple_hash
0088   047B 51 04 00      add sp, 4
0089   047E             ; printf("Hash: "); 
0090   047E 26 5F 25      mov b, _s2 ; "Hash: "
0091   0481 FD AB         swp b
0092   0483 D8            push b
0093   0484 07 F0 08      call printf
0094   0487 51 02 00      add sp, 2
0095   048A             ; for (i = 0; i <   16          ; i++) { 
0096   048A             _for3_init:
0097   048A FA EF FF      lea d, [bp + -17] ; $i
0098   048D DA            push d
0099   048E 26 00 00      mov b, $0
0100   0491 E7            pop d
0101   0492 FD 43         mov [d], b
0102   0494             _for3_cond:
0103   0494 FA EF FF      lea d, [bp + -17] ; $i
0104   0497 2A            mov b, [d]
0105   0498             ; --- START RELATIONAL
0106   0498 D7            push a
0107   0499 11            mov a, b
0108   049A 26 10 00      mov b, $10
0109   049D B0            cmp a, b
0110   049E FD 73         slt ; < (signed)
0111   04A0 E4            pop a
0112   04A1             ; --- END RELATIONAL
0113   04A1 C0 00 00      cmp b, 0
0114   04A4 C6 CD 04      je _for3_exit
0115   04A7             _for3_block:
0116   04A7             ; printx8(hash[i]); 
0117   04A7 FA F1 FF      lea d, [bp + -15] ; $hash
0118   04AA D7            push a
0119   04AB DA            push d
0120   04AC FA EF FF      lea d, [bp + -17] ; $i
0121   04AF 2A            mov b, [d]
0122   04B0 E7            pop d
0123   04B1 5A            add d, b
0124   04B2 E4            pop a
0125   04B3 32            mov bl, [d]
0126   04B4 A7 00         mov bh, 0
0127   04B6 DD            push bl
0128   04B7 07 DA 10      call printx8
0129   04BA 51 01 00      add sp, 1
0130   04BD             _for3_update:
0131   04BD FA EF FF      lea d, [bp + -17] ; $i
0132   04C0 2A            mov b, [d]
0133   04C1 FD 77         inc b
0134   04C3 FA EF FF      lea d, [bp + -17] ; $i
0135   04C6 FD 43         mov [d], b
0136   04C8 FD 7D         dec b
0137   04CA 0A 94 04      jmp _for3_cond
0138   04CD             _for3_exit:
0139   04CD             ; printf("\n"); 
0140   04CD 26 66 25      mov b, _s3 ; "\n"
0141   04D0 FD AB         swp b
0142   04D2 D8            push b
0143   04D3 07 F0 08      call printf
0144   04D6 51 02 00      add sp, 2
0145   04D9             ; return 0; 
0146   04D9 26 00 00      mov b, $0
0147   04DC F9            leave
0148   04DD 05 0B         syscall sys_terminate_proc
0149   04DF             
0150   04DF             strcpy:
0151   04DF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0152   04E2             ; char *psrc; 
0153   04E2 52 02 00      sub sp, 2
0154   04E5             ; char *pdest; 
0155   04E5 52 02 00      sub sp, 2
0156   04E8             ; psrc = src; 
0157   04E8 FA FF FF      lea d, [bp + -1] ; $psrc
0158   04EB DA            push d
0159   04EC FA 07 00      lea d, [bp + 7] ; $src
0160   04EF 2A            mov b, [d]
0161   04F0 E7            pop d
0162   04F1 FD 43         mov [d], b
0163   04F3             ; pdest = dest; 
0164   04F3 FA FD FF      lea d, [bp + -3] ; $pdest
0165   04F6 DA            push d
0166   04F7 FA 05 00      lea d, [bp + 5] ; $dest
0167   04FA 2A            mov b, [d]
0168   04FB E7            pop d
0169   04FC FD 43         mov [d], b
0170   04FE             ; while(*psrc) *pdest++ = *psrc++; 
0171   04FE             _while4_cond:
0172   04FE FA FF FF      lea d, [bp + -1] ; $psrc
0173   0501 2A            mov b, [d]
0174   0502 74            mov d, b
0175   0503 32            mov bl, [d]
0176   0504 A7 00         mov bh, 0
0177   0506 C0 00 00      cmp b, 0
0178   0509 C6 31 05      je _while4_exit
0179   050C             _while4_block:
0180   050C             ; *pdest++ = *psrc++; 
0181   050C FA FD FF      lea d, [bp + -3] ; $pdest
0182   050F 2A            mov b, [d]
0183   0510 FD 77         inc b
0184   0512 FA FD FF      lea d, [bp + -3] ; $pdest
0185   0515 FD 43         mov [d], b
0186   0517 FD 7D         dec b
0187   0519 D8            push b
0188   051A FA FF FF      lea d, [bp + -1] ; $psrc
0189   051D 2A            mov b, [d]
0190   051E FD 77         inc b
0191   0520 FA FF FF      lea d, [bp + -1] ; $psrc
0192   0523 FD 43         mov [d], b
0193   0525 FD 7D         dec b
0194   0527 74            mov d, b
0195   0528 32            mov bl, [d]
0196   0529 A7 00         mov bh, 0
0197   052B E7            pop d
0198   052C FD 3E         mov [d], bl
0199   052E 0A FE 04      jmp _while4_cond
0200   0531             _while4_exit:
0201   0531             ; *pdest = '\0'; 
0202   0531 FA FD FF      lea d, [bp + -3] ; $pdest
0203   0534 2A            mov b, [d]
0204   0535 D8            push b
0205   0536 26 00 00      mov b, $0
0206   0539 E7            pop d
0207   053A FD 3E         mov [d], bl
0208   053C F9            leave
0209   053D 09            ret
0210   053E             
0211   053E             strcmp:
0212   053E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0213   0541             ; while (*s1 && (*s1 == *s2)) { 
0214   0541             _while5_cond:
0215   0541 FA 05 00      lea d, [bp + 5] ; $s1
0216   0544 2A            mov b, [d]
0217   0545 74            mov d, b
0218   0546 32            mov bl, [d]
0219   0547 A7 00         mov bh, 0
0220   0549             ; --- START LOGICAL AND
0221   0549 D7            push a
0222   054A 11            mov a, b
0223   054B FA 05 00      lea d, [bp + 5] ; $s1
0224   054E 2A            mov b, [d]
0225   054F 74            mov d, b
0226   0550 32            mov bl, [d]
0227   0551 A7 00         mov bh, 0
0228   0553             ; --- START RELATIONAL
0229   0553 D7            push a
0230   0554 11            mov a, b
0231   0555 FA 07 00      lea d, [bp + 7] ; $s2
0232   0558 2A            mov b, [d]
0233   0559 74            mov d, b
0234   055A 32            mov bl, [d]
0235   055B A7 00         mov bh, 0
0236   055D B0            cmp a, b
0237   055E FD 71         seq ; ==
0238   0560 E4            pop a
0239   0561             ; --- END RELATIONAL
0240   0561 FD A7         sand a, b
0241   0563 E4            pop a
0242   0564             ; --- END LOGICAL AND
0243   0564 C0 00 00      cmp b, 0
0244   0567 C6 87 05      je _while5_exit
0245   056A             _while5_block:
0246   056A             ; s1++; 
0247   056A FA 05 00      lea d, [bp + 5] ; $s1
0248   056D 2A            mov b, [d]
0249   056E FD 77         inc b
0250   0570 FA 05 00      lea d, [bp + 5] ; $s1
0251   0573 FD 43         mov [d], b
0252   0575 FD 7D         dec b
0253   0577             ; s2++; 
0254   0577 FA 07 00      lea d, [bp + 7] ; $s2
0255   057A 2A            mov b, [d]
0256   057B FD 77         inc b
0257   057D FA 07 00      lea d, [bp + 7] ; $s2
0258   0580 FD 43         mov [d], b
0259   0582 FD 7D         dec b
0260   0584 0A 41 05      jmp _while5_cond
0261   0587             _while5_exit:
0262   0587             ; return *s1 - *s2; 
0263   0587 FA 05 00      lea d, [bp + 5] ; $s1
0264   058A 2A            mov b, [d]
0265   058B 74            mov d, b
0266   058C 32            mov bl, [d]
0267   058D A7 00         mov bh, 0
0268   058F             ; --- START TERMS
0269   058F D7            push a
0270   0590 11            mov a, b
0271   0591 FA 07 00      lea d, [bp + 7] ; $s2
0272   0594 2A            mov b, [d]
0273   0595 74            mov d, b
0274   0596 32            mov bl, [d]
0275   0597 A7 00         mov bh, 0
0276   0599 60            sub a, b
0277   059A 27            mov b, a
0278   059B E4            pop a
0279   059C             ; --- END TERMS
0280   059C F9            leave
0281   059D 09            ret
0282   059E             
0283   059E             strncmp:
0284   059E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0285   05A1 F9            leave
0286   05A2 09            ret
0287   05A3             
0288   05A3             strcat:
0289   05A3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0290   05A6             ; int dest_len; 
0291   05A6 52 02 00      sub sp, 2
0292   05A9             ; int i; 
0293   05A9 52 02 00      sub sp, 2
0294   05AC             ; dest_len = strlen(dest); 
0295   05AC FA FF FF      lea d, [bp + -1] ; $dest_len
0296   05AF DA            push d
0297   05B0 FA 05 00      lea d, [bp + 5] ; $dest
0298   05B3 2A            mov b, [d]
0299   05B4 FD AB         swp b
0300   05B6 D8            push b
0301   05B7 07 59 06      call strlen
0302   05BA 51 02 00      add sp, 2
0303   05BD E7            pop d
0304   05BE FD 43         mov [d], b
0305   05C0             ; for (i = 0; src[i] != 0; i=i+1) { 
0306   05C0             _for6_init:
0307   05C0 FA FD FF      lea d, [bp + -3] ; $i
0308   05C3 DA            push d
0309   05C4 26 00 00      mov b, $0
0310   05C7 E7            pop d
0311   05C8 FD 43         mov [d], b
0312   05CA             _for6_cond:
0313   05CA FA 07 00      lea d, [bp + 7] ; $src
0314   05CD FD 2A         mov d, [d]
0315   05CF D7            push a
0316   05D0 DA            push d
0317   05D1 FA FD FF      lea d, [bp + -3] ; $i
0318   05D4 2A            mov b, [d]
0319   05D5 E7            pop d
0320   05D6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0321   05DA E4            pop a
0322   05DB 32            mov bl, [d]
0323   05DC A7 00         mov bh, 0
0324   05DE             ; --- START RELATIONAL
0325   05DE D7            push a
0326   05DF 11            mov a, b
0327   05E0 26 00 00      mov b, $0
0328   05E3 B0            cmp a, b
0329   05E4 FD 72         sneq ; !=
0330   05E6 E4            pop a
0331   05E7             ; --- END RELATIONAL
0332   05E7 C0 00 00      cmp b, 0
0333   05EA C6 33 06      je _for6_exit
0334   05ED             _for6_block:
0335   05ED             ; dest[dest_len + i] = src[i]; 
0336   05ED FA 05 00      lea d, [bp + 5] ; $dest
0337   05F0 FD 2A         mov d, [d]
0338   05F2 D7            push a
0339   05F3 DA            push d
0340   05F4 FA FF FF      lea d, [bp + -1] ; $dest_len
0341   05F7 2A            mov b, [d]
0342   05F8             ; --- START TERMS
0343   05F8 D7            push a
0344   05F9 11            mov a, b
0345   05FA FA FD FF      lea d, [bp + -3] ; $i
0346   05FD 2A            mov b, [d]
0347   05FE 56            add b, a
0348   05FF E4            pop a
0349   0600             ; --- END TERMS
0350   0600 E7            pop d
0351   0601 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0352   0605 E4            pop a
0353   0606 DA            push d
0354   0607 FA 07 00      lea d, [bp + 7] ; $src
0355   060A FD 2A         mov d, [d]
0356   060C D7            push a
0357   060D DA            push d
0358   060E FA FD FF      lea d, [bp + -3] ; $i
0359   0611 2A            mov b, [d]
0360   0612 E7            pop d
0361   0613 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0362   0617 E4            pop a
0363   0618 32            mov bl, [d]
0364   0619 A7 00         mov bh, 0
0365   061B E7            pop d
0366   061C FD 3E         mov [d], bl
0367   061E             _for6_update:
0368   061E FA FD FF      lea d, [bp + -3] ; $i
0369   0621 DA            push d
0370   0622 FA FD FF      lea d, [bp + -3] ; $i
0371   0625 2A            mov b, [d]
0372   0626             ; --- START TERMS
0373   0626 D7            push a
0374   0627 11            mov a, b
0375   0628 26 01 00      mov b, $1
0376   062B 56            add b, a
0377   062C E4            pop a
0378   062D             ; --- END TERMS
0379   062D E7            pop d
0380   062E FD 43         mov [d], b
0381   0630 0A CA 05      jmp _for6_cond
0382   0633             _for6_exit:
0383   0633             ; dest[dest_len + i] = 0; 
0384   0633 FA 05 00      lea d, [bp + 5] ; $dest
0385   0636 FD 2A         mov d, [d]
0386   0638 D7            push a
0387   0639 DA            push d
0388   063A FA FF FF      lea d, [bp + -1] ; $dest_len
0389   063D 2A            mov b, [d]
0390   063E             ; --- START TERMS
0391   063E D7            push a
0392   063F 11            mov a, b
0393   0640 FA FD FF      lea d, [bp + -3] ; $i
0394   0643 2A            mov b, [d]
0395   0644 56            add b, a
0396   0645 E4            pop a
0397   0646             ; --- END TERMS
0398   0646 E7            pop d
0399   0647 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0400   064B E4            pop a
0401   064C DA            push d
0402   064D 26 00 00      mov b, $0
0403   0650 E7            pop d
0404   0651 FD 3E         mov [d], bl
0405   0653             ; return dest; 
0406   0653 FA 05 00      lea d, [bp + 5] ; $dest
0407   0656 2A            mov b, [d]
0408   0657 F9            leave
0409   0658 09            ret
0410   0659             
0411   0659             strlen:
0412   0659 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0413   065C             ; int length; 
0414   065C 52 02 00      sub sp, 2
0415   065F             ; length = 0; 
0416   065F FA FF FF      lea d, [bp + -1] ; $length
0417   0662 DA            push d
0418   0663 26 00 00      mov b, $0
0419   0666 E7            pop d
0420   0667 FD 43         mov [d], b
0421   0669             ; while (str[length] != 0) { 
0422   0669             _while7_cond:
0423   0669 FA 05 00      lea d, [bp + 5] ; $str
0424   066C FD 2A         mov d, [d]
0425   066E D7            push a
0426   066F DA            push d
0427   0670 FA FF FF      lea d, [bp + -1] ; $length
0428   0673 2A            mov b, [d]
0429   0674 E7            pop d
0430   0675 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0431   0679 E4            pop a
0432   067A 32            mov bl, [d]
0433   067B A7 00         mov bh, 0
0434   067D             ; --- START RELATIONAL
0435   067D D7            push a
0436   067E 11            mov a, b
0437   067F 26 00 00      mov b, $0
0438   0682 B0            cmp a, b
0439   0683 FD 72         sneq ; !=
0440   0685 E4            pop a
0441   0686             ; --- END RELATIONAL
0442   0686 C0 00 00      cmp b, 0
0443   0689 C6 9C 06      je _while7_exit
0444   068C             _while7_block:
0445   068C             ; length++; 
0446   068C FA FF FF      lea d, [bp + -1] ; $length
0447   068F 2A            mov b, [d]
0448   0690 FD 77         inc b
0449   0692 FA FF FF      lea d, [bp + -1] ; $length
0450   0695 FD 43         mov [d], b
0451   0697 FD 7D         dec b
0452   0699 0A 69 06      jmp _while7_cond
0453   069C             _while7_exit:
0454   069C             ; return length; 
0455   069C FA FF FF      lea d, [bp + -1] ; $length
0456   069F 2A            mov b, [d]
0457   06A0 F9            leave
0458   06A1 09            ret
0459   06A2             
0460   06A2             exit:
0461   06A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0462   06A5             
0463   06A5             ; --- BEGIN INLINE ASM SEGMENT
0464   06A5 05 0B         syscall sys_terminate_proc
0465   06A7             ; --- END INLINE ASM SEGMENT
0466   06A7             
0467   06A7 F9            leave
0468   06A8 09            ret
0469   06A9             
0470   06A9             memset:
0471   06A9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0472   06AC             ; int i; 
0473   06AC 52 02 00      sub sp, 2
0474   06AF             ; for(i = 0; i < size; i++){ 
0475   06AF             _for8_init:
0476   06AF FA FF FF      lea d, [bp + -1] ; $i
0477   06B2 DA            push d
0478   06B3 26 00 00      mov b, $0
0479   06B6 E7            pop d
0480   06B7 FD 43         mov [d], b
0481   06B9             _for8_cond:
0482   06B9 FA FF FF      lea d, [bp + -1] ; $i
0483   06BC 2A            mov b, [d]
0484   06BD             ; --- START RELATIONAL
0485   06BD D7            push a
0486   06BE 11            mov a, b
0487   06BF FA 08 00      lea d, [bp + 8] ; $size
0488   06C2 2A            mov b, [d]
0489   06C3 B0            cmp a, b
0490   06C4 FD 73         slt ; < (signed)
0491   06C6 E4            pop a
0492   06C7             ; --- END RELATIONAL
0493   06C7 C0 00 00      cmp b, 0
0494   06CA C6 F3 06      je _for8_exit
0495   06CD             _for8_block:
0496   06CD             ; *(s+i) = c; 
0497   06CD FA 05 00      lea d, [bp + 5] ; $s
0498   06D0 2A            mov b, [d]
0499   06D1             ; --- START TERMS
0500   06D1 D7            push a
0501   06D2 11            mov a, b
0502   06D3 FA FF FF      lea d, [bp + -1] ; $i
0503   06D6 2A            mov b, [d]
0504   06D7 56            add b, a
0505   06D8 E4            pop a
0506   06D9             ; --- END TERMS
0507   06D9 D8            push b
0508   06DA FA 07 00      lea d, [bp + 7] ; $c
0509   06DD 32            mov bl, [d]
0510   06DE A7 00         mov bh, 0
0511   06E0 E7            pop d
0512   06E1 FD 3E         mov [d], bl
0513   06E3             _for8_update:
0514   06E3 FA FF FF      lea d, [bp + -1] ; $i
0515   06E6 2A            mov b, [d]
0516   06E7 FD 77         inc b
0517   06E9 FA FF FF      lea d, [bp + -1] ; $i
0518   06EC FD 43         mov [d], b
0519   06EE FD 7D         dec b
0520   06F0 0A B9 06      jmp _for8_cond
0521   06F3             _for8_exit:
0522   06F3             ; return s; 
0523   06F3 FA 05 00      lea d, [bp + 5] ; $s
0524   06F6 2A            mov b, [d]
0525   06F7 F9            leave
0526   06F8 09            ret
0527   06F9             
0528   06F9             atoi:
0529   06F9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0530   06FC             ; int result = 0;  // Initialize result 
0531   06FC 52 02 00      sub sp, 2
0532   06FF             ; --- START LOCAL VAR INITIALIZATION
0533   06FF FA FF FF      lea d, [bp + -1] ; $result
0534   0702 DA            push d
0535   0703 26 00 00      mov b, $0
0536   0706 E7            pop d
0537   0707 FD 43         mov [d], b
0538   0709             ; --- END LOCAL VAR INITIALIZATION
0539   0709             ; int sign = 1;    // Initialize sign as positive 
0540   0709 52 02 00      sub sp, 2
0541   070C             ; --- START LOCAL VAR INITIALIZATION
0542   070C FA FD FF      lea d, [bp + -3] ; $sign
0543   070F DA            push d
0544   0710 26 01 00      mov b, $1
0545   0713 E7            pop d
0546   0714 FD 43         mov [d], b
0547   0716             ; --- END LOCAL VAR INITIALIZATION
0548   0716             ; while (*str == ' ') str++; 
0549   0716             _while9_cond:
0550   0716 FA 05 00      lea d, [bp + 5] ; $str
0551   0719 2A            mov b, [d]
0552   071A 74            mov d, b
0553   071B 32            mov bl, [d]
0554   071C A7 00         mov bh, 0
0555   071E             ; --- START RELATIONAL
0556   071E D7            push a
0557   071F 11            mov a, b
0558   0720 26 20 00      mov b, $20
0559   0723 B0            cmp a, b
0560   0724 FD 71         seq ; ==
0561   0726 E4            pop a
0562   0727             ; --- END RELATIONAL
0563   0727 C0 00 00      cmp b, 0
0564   072A C6 3D 07      je _while9_exit
0565   072D             _while9_block:
0566   072D             ; str++; 
0567   072D FA 05 00      lea d, [bp + 5] ; $str
0568   0730 2A            mov b, [d]
0569   0731 FD 77         inc b
0570   0733 FA 05 00      lea d, [bp + 5] ; $str
0571   0736 FD 43         mov [d], b
0572   0738 FD 7D         dec b
0573   073A 0A 16 07      jmp _while9_cond
0574   073D             _while9_exit:
0575   073D             ; if (*str == '-' || *str == '+') { 
0576   073D             _if10_cond:
0577   073D FA 05 00      lea d, [bp + 5] ; $str
0578   0740 2A            mov b, [d]
0579   0741 74            mov d, b
0580   0742 32            mov bl, [d]
0581   0743 A7 00         mov bh, 0
0582   0745             ; --- START RELATIONAL
0583   0745 D7            push a
0584   0746 11            mov a, b
0585   0747 26 2D 00      mov b, $2d
0586   074A B0            cmp a, b
0587   074B FD 71         seq ; ==
0588   074D E4            pop a
0589   074E             ; --- END RELATIONAL
0590   074E             ; --- START LOGICAL OR
0591   074E D7            push a
0592   074F 11            mov a, b
0593   0750 FA 05 00      lea d, [bp + 5] ; $str
0594   0753 2A            mov b, [d]
0595   0754 74            mov d, b
0596   0755 32            mov bl, [d]
0597   0756 A7 00         mov bh, 0
0598   0758             ; --- START RELATIONAL
0599   0758 D7            push a
0600   0759 11            mov a, b
0601   075A 26 2B 00      mov b, $2b
0602   075D B0            cmp a, b
0603   075E FD 71         seq ; ==
0604   0760 E4            pop a
0605   0761             ; --- END RELATIONAL
0606   0761 FD A8         sor a, b ; ||
0607   0763 E4            pop a
0608   0764             ; --- END LOGICAL OR
0609   0764 C0 00 00      cmp b, 0
0610   0767 C6 A0 07      je _if10_exit
0611   076A             _if10_true:
0612   076A             ; if (*str == '-') sign = -1; 
0613   076A             _if11_cond:
0614   076A FA 05 00      lea d, [bp + 5] ; $str
0615   076D 2A            mov b, [d]
0616   076E 74            mov d, b
0617   076F 32            mov bl, [d]
0618   0770 A7 00         mov bh, 0
0619   0772             ; --- START RELATIONAL
0620   0772 D7            push a
0621   0773 11            mov a, b
0622   0774 26 2D 00      mov b, $2d
0623   0777 B0            cmp a, b
0624   0778 FD 71         seq ; ==
0625   077A E4            pop a
0626   077B             ; --- END RELATIONAL
0627   077B C0 00 00      cmp b, 0
0628   077E C6 90 07      je _if11_exit
0629   0781             _if11_true:
0630   0781             ; sign = -1; 
0631   0781 FA FD FF      lea d, [bp + -3] ; $sign
0632   0784 DA            push d
0633   0785 26 01 00      mov b, $1
0634   0788 FD 97         neg b
0635   078A E7            pop d
0636   078B FD 43         mov [d], b
0637   078D 0A 90 07      jmp _if11_exit
0638   0790             _if11_exit:
0639   0790             ; str++; 
0640   0790 FA 05 00      lea d, [bp + 5] ; $str
0641   0793 2A            mov b, [d]
0642   0794 FD 77         inc b
0643   0796 FA 05 00      lea d, [bp + 5] ; $str
0644   0799 FD 43         mov [d], b
0645   079B FD 7D         dec b
0646   079D 0A A0 07      jmp _if10_exit
0647   07A0             _if10_exit:
0648   07A0             ; while (*str >= '0' && *str <= '9') { 
0649   07A0             _while12_cond:
0650   07A0 FA 05 00      lea d, [bp + 5] ; $str
0651   07A3 2A            mov b, [d]
0652   07A4 74            mov d, b
0653   07A5 32            mov bl, [d]
0654   07A6 A7 00         mov bh, 0
0655   07A8             ; --- START RELATIONAL
0656   07A8 D7            push a
0657   07A9 11            mov a, b
0658   07AA 26 30 00      mov b, $30
0659   07AD B0            cmp a, b
0660   07AE FD 82         sgeu ; >= (unsigned)
0661   07B0 E4            pop a
0662   07B1             ; --- END RELATIONAL
0663   07B1             ; --- START LOGICAL AND
0664   07B1 D7            push a
0665   07B2 11            mov a, b
0666   07B3 FA 05 00      lea d, [bp + 5] ; $str
0667   07B6 2A            mov b, [d]
0668   07B7 74            mov d, b
0669   07B8 32            mov bl, [d]
0670   07B9 A7 00         mov bh, 0
0671   07BB             ; --- START RELATIONAL
0672   07BB D7            push a
0673   07BC 11            mov a, b
0674   07BD 26 39 00      mov b, $39
0675   07C0 B0            cmp a, b
0676   07C1 FD 76         sleu ; <= (unsigned)
0677   07C3 E4            pop a
0678   07C4             ; --- END RELATIONAL
0679   07C4 FD A7         sand a, b
0680   07C6 E4            pop a
0681   07C7             ; --- END LOGICAL AND
0682   07C7 C0 00 00      cmp b, 0
0683   07CA C6 05 08      je _while12_exit
0684   07CD             _while12_block:
0685   07CD             ; result = result * 10 + (*str - '0'); 
0686   07CD FA FF FF      lea d, [bp + -1] ; $result
0687   07D0 DA            push d
0688   07D1 FA FF FF      lea d, [bp + -1] ; $result
0689   07D4 2A            mov b, [d]
0690   07D5             ; --- START FACTORS
0691   07D5 D7            push a
0692   07D6 11            mov a, b
0693   07D7 26 0A 00      mov b, $a
0694   07DA AC            mul a, b ; *
0695   07DB 11            mov a, b
0696   07DC 27            mov b, a
0697   07DD E4            pop a
0698   07DE             ; --- END FACTORS
0699   07DE             ; --- START TERMS
0700   07DE D7            push a
0701   07DF 11            mov a, b
0702   07E0 FA 05 00      lea d, [bp + 5] ; $str
0703   07E3 2A            mov b, [d]
0704   07E4 74            mov d, b
0705   07E5 32            mov bl, [d]
0706   07E6 A7 00         mov bh, 0
0707   07E8             ; --- START TERMS
0708   07E8 D7            push a
0709   07E9 11            mov a, b
0710   07EA 26 30 00      mov b, $30
0711   07ED 60            sub a, b
0712   07EE 27            mov b, a
0713   07EF E4            pop a
0714   07F0             ; --- END TERMS
0715   07F0 56            add b, a
0716   07F1 E4            pop a
0717   07F2             ; --- END TERMS
0718   07F2 E7            pop d
0719   07F3 FD 43         mov [d], b
0720   07F5             ; str++; 
0721   07F5 FA 05 00      lea d, [bp + 5] ; $str
0722   07F8 2A            mov b, [d]
0723   07F9 FD 77         inc b
0724   07FB FA 05 00      lea d, [bp + 5] ; $str
0725   07FE FD 43         mov [d], b
0726   0800 FD 7D         dec b
0727   0802 0A A0 07      jmp _while12_cond
0728   0805             _while12_exit:
0729   0805             ; return sign * result; 
0730   0805 FA FD FF      lea d, [bp + -3] ; $sign
0731   0808 2A            mov b, [d]
0732   0809             ; --- START FACTORS
0733   0809 D7            push a
0734   080A 11            mov a, b
0735   080B FA FF FF      lea d, [bp + -1] ; $result
0736   080E 2A            mov b, [d]
0737   080F AC            mul a, b ; *
0738   0810 11            mov a, b
0739   0811 27            mov b, a
0740   0812 E4            pop a
0741   0813             ; --- END FACTORS
0742   0813 F9            leave
0743   0814 09            ret
0744   0815             
0745   0815             rand:
0746   0815 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0747   0818             ; int  sec; 
0748   0818 52 02 00      sub sp, 2
0749   081B             
0750   081B             ; --- BEGIN INLINE ASM SEGMENT
0751   081B 19 00         mov al, 0
0752   081D 05 01         syscall sys_rtc					
0753   081F 1A            mov al, ah
0754   0820 FA FF FF      lea d, [bp + -1] ; $sec
0755   0823 1E            mov al, [d]
0756   0824 22 00         mov ah, 0
0757   0826             ; --- END INLINE ASM SEGMENT
0758   0826             
0759   0826             ; return sec; 
0760   0826 FA FF FF      lea d, [bp + -1] ; $sec
0761   0829 2A            mov b, [d]
0762   082A F9            leave
0763   082B 09            ret
0764   082C             
0765   082C             alloc:
0766   082C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0767   082F             ; heap_top = heap_top + bytes; 
0768   082F 3B AC 25      mov d, _heap_top ; $heap_top
0769   0832 DA            push d
0770   0833 3B AC 25      mov d, _heap_top ; $heap_top
0771   0836 2A            mov b, [d]
0772   0837             ; --- START TERMS
0773   0837 D7            push a
0774   0838 11            mov a, b
0775   0839 FA 05 00      lea d, [bp + 5] ; $bytes
0776   083C 2A            mov b, [d]
0777   083D 56            add b, a
0778   083E E4            pop a
0779   083F             ; --- END TERMS
0780   083F E7            pop d
0781   0840 FD 43         mov [d], b
0782   0842             ; return heap_top - bytes; 
0783   0842 3B AC 25      mov d, _heap_top ; $heap_top
0784   0845 2A            mov b, [d]
0785   0846             ; --- START TERMS
0786   0846 D7            push a
0787   0847 11            mov a, b
0788   0848 FA 05 00      lea d, [bp + 5] ; $bytes
0789   084B 2A            mov b, [d]
0790   084C 60            sub a, b
0791   084D 27            mov b, a
0792   084E E4            pop a
0793   084F             ; --- END TERMS
0794   084F F9            leave
0795   0850 09            ret
0796   0851             
0797   0851             free:
0798   0851 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0799   0854             ; return heap_top = heap_top - bytes; 
0800   0854 3B AC 25      mov d, _heap_top ; $heap_top
0801   0857 DA            push d
0802   0858 3B AC 25      mov d, _heap_top ; $heap_top
0803   085B 2A            mov b, [d]
0804   085C             ; --- START TERMS
0805   085C D7            push a
0806   085D 11            mov a, b
0807   085E FA 05 00      lea d, [bp + 5] ; $bytes
0808   0861 2A            mov b, [d]
0809   0862 60            sub a, b
0810   0863 27            mov b, a
0811   0864 E4            pop a
0812   0865             ; --- END TERMS
0813   0865 E7            pop d
0814   0866 FD 43         mov [d], b
0815   0868 F9            leave
0816   0869 09            ret
0817   086A             
0818   086A             fopen:
0819   086A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0820   086D             ; FILE *fp; 
0821   086D 52 02 00      sub sp, 2
0822   0870             ; static int max_handle = 0; 
0823   0870 52 02 00      sub sp, 2
0824   0873             ; fp = alloc(sizeof(FILE)); 
0825   0873 FA FF FF      lea d, [bp + -1] ; $fp
0826   0876 DA            push d
0827   0877 26 04 01      mov b, 260
0828   087A FD AB         swp b
0829   087C D8            push b
0830   087D 07 2C 08      call alloc
0831   0880 51 02 00      add sp, 2
0832   0883 E7            pop d
0833   0884 FD 43         mov [d], b
0834   0886             ; strcpy(fp->filename, filename); 
0835   0886 FA 05 00      lea d, [bp + 5] ; $filename
0836   0889 2A            mov b, [d]
0837   088A FD AB         swp b
0838   088C D8            push b
0839   088D FA FF FF      lea d, [bp + -1] ; $fp
0840   0890 FD 2A         mov d, [d]
0841   0892 58 02 00      add d, 2
0842   0895 2D            mov b, d
0843   0896 FD AB         swp b
0844   0898 D8            push b
0845   0899 07 DF 04      call strcpy
0846   089C 51 04 00      add sp, 4
0847   089F             ; fp->handle = max_handle; 
0848   089F FA FF FF      lea d, [bp + -1] ; $fp
0849   08A2 FD 2A         mov d, [d]
0850   08A4 58 00 00      add d, 0
0851   08A7 DA            push d
0852   08A8 3B 32 25      mov d, st_fopen_max_handle ; static max_handle
0853   08AB 2A            mov b, [d]
0854   08AC E7            pop d
0855   08AD FD 43         mov [d], b
0856   08AF             ; fp->mode = mode; 
0857   08AF FA FF FF      lea d, [bp + -1] ; $fp
0858   08B2 FD 2A         mov d, [d]
0859   08B4 58 02 01      add d, 258
0860   08B7 DA            push d
0861   08B8 FA 07 00      lea d, [bp + 7] ; $mode
0862   08BB 32            mov bl, [d]
0863   08BC A7 00         mov bh, 0
0864   08BE E7            pop d
0865   08BF FD 3E         mov [d], bl
0866   08C1             ; fp->loc = 0; 
0867   08C1 FA FF FF      lea d, [bp + -1] ; $fp
0868   08C4 FD 2A         mov d, [d]
0869   08C6 58 03 01      add d, 259
0870   08C9 DA            push d
0871   08CA 26 00 00      mov b, $0
0872   08CD E7            pop d
0873   08CE FD 3E         mov [d], bl
0874   08D0             ; max_handle++; 
0875   08D0 3B 32 25      mov d, st_fopen_max_handle ; static max_handle
0876   08D3 2A            mov b, [d]
0877   08D4 FD 77         inc b
0878   08D6 3B 32 25      mov d, st_fopen_max_handle ; static max_handle
0879   08D9 FD 43         mov [d], b
0880   08DB FD 7D         dec b
0881   08DD F9            leave
0882   08DE 09            ret
0883   08DF             
0884   08DF             fclose:
0885   08DF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0886   08E2             ; free(sizeof(FILE)); 
0887   08E2 26 04 01      mov b, 260
0888   08E5 FD AB         swp b
0889   08E7 D8            push b
0890   08E8 07 51 08      call free
0891   08EB 51 02 00      add sp, 2
0892   08EE F9            leave
0893   08EF 09            ret
0894   08F0             
0895   08F0             printf:
0896   08F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0897   08F3             ; char *p, *format_p; 
0898   08F3 52 02 00      sub sp, 2
0899   08F6 52 02 00      sub sp, 2
0900   08F9             ; format_p = format; 
0901   08F9 FA FD FF      lea d, [bp + -3] ; $format_p
0902   08FC DA            push d
0903   08FD FA 05 00      lea d, [bp + 5] ; $format
0904   0900 2A            mov b, [d]
0905   0901 E7            pop d
0906   0902 FD 43         mov [d], b
0907   0904             ; p = &format + 2; 
0908   0904 FA FF FF      lea d, [bp + -1] ; $p
0909   0907 DA            push d
0910   0908 FA 05 00      lea d, [bp + 5] ; $format
0911   090B 2D            mov b, d
0912   090C             ; --- START TERMS
0913   090C D7            push a
0914   090D 11            mov a, b
0915   090E 26 02 00      mov b, $2
0916   0911 56            add b, a
0917   0912 E4            pop a
0918   0913             ; --- END TERMS
0919   0913 E7            pop d
0920   0914 FD 43         mov [d], b
0921   0916             ; for(;;){ 
0922   0916             _for13_init:
0923   0916             _for13_cond:
0924   0916             _for13_block:
0925   0916             ; if(!*format_p) break; 
0926   0916             _if14_cond:
0927   0916 FA FD FF      lea d, [bp + -3] ; $format_p
0928   0919 2A            mov b, [d]
0929   091A 74            mov d, b
0930   091B 32            mov bl, [d]
0931   091C A7 00         mov bh, 0
0932   091E C0 00 00      cmp b, 0
0933   0921 FD 71         seq ; !
0934   0923 C0 00 00      cmp b, 0
0935   0926 C6 2F 09      je _if14_else
0936   0929             _if14_true:
0937   0929             ; break; 
0938   0929 0A 56 0B      jmp _for13_exit ; for break
0939   092C 0A 53 0B      jmp _if14_exit
0940   092F             _if14_else:
0941   092F             ; if(*format_p == '%'){ 
0942   092F             _if15_cond:
0943   092F FA FD FF      lea d, [bp + -3] ; $format_p
0944   0932 2A            mov b, [d]
0945   0933 74            mov d, b
0946   0934 32            mov bl, [d]
0947   0935 A7 00         mov bh, 0
0948   0937             ; --- START RELATIONAL
0949   0937 D7            push a
0950   0938 11            mov a, b
0951   0939 26 25 00      mov b, $25
0952   093C B0            cmp a, b
0953   093D FD 71         seq ; ==
0954   093F E4            pop a
0955   0940             ; --- END RELATIONAL
0956   0940 C0 00 00      cmp b, 0
0957   0943 C6 37 0B      je _if15_else
0958   0946             _if15_true:
0959   0946             ; format_p++; 
0960   0946 FA FD FF      lea d, [bp + -3] ; $format_p
0961   0949 2A            mov b, [d]
0962   094A FD 77         inc b
0963   094C FA FD FF      lea d, [bp + -3] ; $format_p
0964   094F FD 43         mov [d], b
0965   0951 FD 7D         dec b
0966   0953             ; switch(*format_p){ 
0967   0953             _switch16_expr:
0968   0953 FA FD FF      lea d, [bp + -3] ; $format_p
0969   0956 2A            mov b, [d]
0970   0957 74            mov d, b
0971   0958 32            mov bl, [d]
0972   0959 A7 00         mov bh, 0
0973   095B             _switch16_comparisons:
0974   095B C1 6C         cmp bl, $6c
0975   095D C6 89 09      je _switch16_case0
0976   0960 C1 4C         cmp bl, $4c
0977   0962 C6 89 09      je _switch16_case1
0978   0965 C1 64         cmp bl, $64
0979   0967 C6 77 0A      je _switch16_case2
0980   096A C1 69         cmp bl, $69
0981   096C C6 77 0A      je _switch16_case3
0982   096F C1 75         cmp bl, $75
0983   0971 C6 9B 0A      je _switch16_case4
0984   0974 C1 78         cmp bl, $78
0985   0976 C6 BF 0A      je _switch16_case5
0986   0979 C1 63         cmp bl, $63
0987   097B C6 DD 0A      je _switch16_case6
0988   097E C1 73         cmp bl, $73
0989   0980 C6 FC 0A      je _switch16_case7
0990   0983 0A 1B 0B      jmp _switch16_default
0991   0986 0A 27 0B      jmp _switch16_exit
0992   0989             _switch16_case0:
0993   0989             _switch16_case1:
0994   0989             ; format_p++; 
0995   0989 FA FD FF      lea d, [bp + -3] ; $format_p
0996   098C 2A            mov b, [d]
0997   098D FD 77         inc b
0998   098F FA FD FF      lea d, [bp + -3] ; $format_p
0999   0992 FD 43         mov [d], b
1000   0994 FD 7D         dec b
1001   0996             ; if(*format_p == 'd' || *format_p == 'i') 
1002   0996             _if17_cond:
1003   0996 FA FD FF      lea d, [bp + -3] ; $format_p
1004   0999 2A            mov b, [d]
1005   099A 74            mov d, b
1006   099B 32            mov bl, [d]
1007   099C A7 00         mov bh, 0
1008   099E             ; --- START RELATIONAL
1009   099E D7            push a
1010   099F 11            mov a, b
1011   09A0 26 64 00      mov b, $64
1012   09A3 B0            cmp a, b
1013   09A4 FD 71         seq ; ==
1014   09A6 E4            pop a
1015   09A7             ; --- END RELATIONAL
1016   09A7             ; --- START LOGICAL OR
1017   09A7 D7            push a
1018   09A8 11            mov a, b
1019   09A9 FA FD FF      lea d, [bp + -3] ; $format_p
1020   09AC 2A            mov b, [d]
1021   09AD 74            mov d, b
1022   09AE 32            mov bl, [d]
1023   09AF A7 00         mov bh, 0
1024   09B1             ; --- START RELATIONAL
1025   09B1 D7            push a
1026   09B2 11            mov a, b
1027   09B3 26 69 00      mov b, $69
1028   09B6 B0            cmp a, b
1029   09B7 FD 71         seq ; ==
1030   09B9 E4            pop a
1031   09BA             ; --- END RELATIONAL
1032   09BA FD A8         sor a, b ; ||
1033   09BC E4            pop a
1034   09BD             ; --- END LOGICAL OR
1035   09BD C0 00 00      cmp b, 0
1036   09C0 C6 E5 09      je _if17_else
1037   09C3             _if17_true:
1038   09C3             ; print_signed_long(*(long *)p); 
1039   09C3 FA FF FF      lea d, [bp + -1] ; $p
1040   09C6 2A            mov b, [d]
1041   09C7 AB            snex b
1042   09C8 FD 39         mov c, b
1043   09CA 74            mov d, b
1044   09CB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1045   09CE FD 39         mov c, b ; And place it into C
1046   09D0 2A            mov b, [d] ; Lower Word in B
1047   09D1 FD 79         mov g, b
1048   09D3 28            mov b, c
1049   09D4 FD AB         swp b
1050   09D6 D8            push b
1051   09D7 FD 27         mov b, g
1052   09D9 FD AB         swp b
1053   09DB D8            push b
1054   09DC 07 47 13      call print_signed_long
1055   09DF 51 04 00      add sp, 4
1056   09E2 0A 62 0A      jmp _if17_exit
1057   09E5             _if17_else:
1058   09E5             ; if(*format_p == 'u') 
1059   09E5             _if18_cond:
1060   09E5 FA FD FF      lea d, [bp + -3] ; $format_p
1061   09E8 2A            mov b, [d]
1062   09E9 74            mov d, b
1063   09EA 32            mov bl, [d]
1064   09EB A7 00         mov bh, 0
1065   09ED             ; --- START RELATIONAL
1066   09ED D7            push a
1067   09EE 11            mov a, b
1068   09EF 26 75 00      mov b, $75
1069   09F2 B0            cmp a, b
1070   09F3 FD 71         seq ; ==
1071   09F5 E4            pop a
1072   09F6             ; --- END RELATIONAL
1073   09F6 C0 00 00      cmp b, 0
1074   09F9 C6 20 0A      je _if18_else
1075   09FC             _if18_true:
1076   09FC             ; print_unsigned_long(*(unsigned long *)p); 
1077   09FC FA FF FF      lea d, [bp + -1] ; $p
1078   09FF 2A            mov b, [d]
1079   0A00 A7 00         mov bh, 0
1080   0A02 38 00 00      mov c, 0
1081   0A05 74            mov d, b
1082   0A06 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1083   0A09 FD 39         mov c, b ; And place it into C
1084   0A0B 2A            mov b, [d] ; Lower Word in B
1085   0A0C FD 79         mov g, b
1086   0A0E 28            mov b, c
1087   0A0F FD AB         swp b
1088   0A11 D8            push b
1089   0A12 FD 27         mov b, g
1090   0A14 FD AB         swp b
1091   0A16 D8            push b
1092   0A17 07 87 16      call print_unsigned_long
1093   0A1A 51 04 00      add sp, 4
1094   0A1D 0A 62 0A      jmp _if18_exit
1095   0A20             _if18_else:
1096   0A20             ; if(*format_p == 'x') 
1097   0A20             _if19_cond:
1098   0A20 FA FD FF      lea d, [bp + -3] ; $format_p
1099   0A23 2A            mov b, [d]
1100   0A24 74            mov d, b
1101   0A25 32            mov bl, [d]
1102   0A26 A7 00         mov bh, 0
1103   0A28             ; --- START RELATIONAL
1104   0A28 D7            push a
1105   0A29 11            mov a, b
1106   0A2A 26 78 00      mov b, $78
1107   0A2D B0            cmp a, b
1108   0A2E FD 71         seq ; ==
1109   0A30 E4            pop a
1110   0A31             ; --- END RELATIONAL
1111   0A31 C0 00 00      cmp b, 0
1112   0A34 C6 56 0A      je _if19_else
1113   0A37             _if19_true:
1114   0A37             ; printx32(*(long int *)p); 
1115   0A37 FA FF FF      lea d, [bp + -1] ; $p
1116   0A3A 2A            mov b, [d]
1117   0A3B 74            mov d, b
1118   0A3C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1119   0A3F FD 39         mov c, b ; And place it into C
1120   0A41 2A            mov b, [d] ; Lower Word in B
1121   0A42 FD 79         mov g, b
1122   0A44 28            mov b, c
1123   0A45 FD AB         swp b
1124   0A47 D8            push b
1125   0A48 FD 27         mov b, g
1126   0A4A FD AB         swp b
1127   0A4C D8            push b
1128   0A4D 07 BC 10      call printx32
1129   0A50 51 04 00      add sp, 4
1130   0A53 0A 62 0A      jmp _if19_exit
1131   0A56             _if19_else:
1132   0A56             ; err("Unexpected format in printf."); 
1133   0A56 26 68 25      mov b, _s4 ; "Unexpected format in printf."
1134   0A59 FD AB         swp b
1135   0A5B D8            push b
1136   0A5C 07 AA 10      call err
1137   0A5F 51 02 00      add sp, 2
1138   0A62             _if19_exit:
1139   0A62             _if18_exit:
1140   0A62             _if17_exit:
1141   0A62             ; p = p + 4; 
1142   0A62 FA FF FF      lea d, [bp + -1] ; $p
1143   0A65 DA            push d
1144   0A66 FA FF FF      lea d, [bp + -1] ; $p
1145   0A69 2A            mov b, [d]
1146   0A6A             ; --- START TERMS
1147   0A6A D7            push a
1148   0A6B 11            mov a, b
1149   0A6C 26 04 00      mov b, $4
1150   0A6F 56            add b, a
1151   0A70 E4            pop a
1152   0A71             ; --- END TERMS
1153   0A71 E7            pop d
1154   0A72 FD 43         mov [d], b
1155   0A74             ; break; 
1156   0A74 0A 27 0B      jmp _switch16_exit ; case break
1157   0A77             _switch16_case2:
1158   0A77             _switch16_case3:
1159   0A77             ; print_signed(*(int*)p); 
1160   0A77 FA FF FF      lea d, [bp + -1] ; $p
1161   0A7A 2A            mov b, [d]
1162   0A7B 74            mov d, b
1163   0A7C 2A            mov b, [d]
1164   0A7D FD AB         swp b
1165   0A7F D8            push b
1166   0A80 07 50 12      call print_signed
1167   0A83 51 02 00      add sp, 2
1168   0A86             ; p = p + 2; 
1169   0A86 FA FF FF      lea d, [bp + -1] ; $p
1170   0A89 DA            push d
1171   0A8A FA FF FF      lea d, [bp + -1] ; $p
1172   0A8D 2A            mov b, [d]
1173   0A8E             ; --- START TERMS
1174   0A8E D7            push a
1175   0A8F 11            mov a, b
1176   0A90 26 02 00      mov b, $2
1177   0A93 56            add b, a
1178   0A94 E4            pop a
1179   0A95             ; --- END TERMS
1180   0A95 E7            pop d
1181   0A96 FD 43         mov [d], b
1182   0A98             ; break; 
1183   0A98 0A 27 0B      jmp _switch16_exit ; case break
1184   0A9B             _switch16_case4:
1185   0A9B             ; print_unsigned(*(unsigned int*)p); 
1186   0A9B FA FF FF      lea d, [bp + -1] ; $p
1187   0A9E 2A            mov b, [d]
1188   0A9F 74            mov d, b
1189   0AA0 2A            mov b, [d]
1190   0AA1 FD AB         swp b
1191   0AA3 D8            push b
1192   0AA4 07 8C 19      call print_unsigned
1193   0AA7 51 02 00      add sp, 2
1194   0AAA             ; p = p + 2; 
1195   0AAA FA FF FF      lea d, [bp + -1] ; $p
1196   0AAD DA            push d
1197   0AAE FA FF FF      lea d, [bp + -1] ; $p
1198   0AB1 2A            mov b, [d]
1199   0AB2             ; --- START TERMS
1200   0AB2 D7            push a
1201   0AB3 11            mov a, b
1202   0AB4 26 02 00      mov b, $2
1203   0AB7 56            add b, a
1204   0AB8 E4            pop a
1205   0AB9             ; --- END TERMS
1206   0AB9 E7            pop d
1207   0ABA FD 43         mov [d], b
1208   0ABC             ; break; 
1209   0ABC 0A 27 0B      jmp _switch16_exit ; case break
1210   0ABF             _switch16_case5:
1211   0ABF             
1212   0ABF             ; --- BEGIN INLINE ASM SEGMENT
1213   0ABF FA FF FF      lea d, [bp + -1] ; $p
1214   0AC2 FD 2A         mov d, [d]
1215   0AC4 2A            mov b, [d]
1216   0AC5 07 51 1F      call print_u16x
1217   0AC8             ; --- END INLINE ASM SEGMENT
1218   0AC8             
1219   0AC8             ; p = p + 2; 
1220   0AC8 FA FF FF      lea d, [bp + -1] ; $p
1221   0ACB DA            push d
1222   0ACC FA FF FF      lea d, [bp + -1] ; $p
1223   0ACF 2A            mov b, [d]
1224   0AD0             ; --- START TERMS
1225   0AD0 D7            push a
1226   0AD1 11            mov a, b
1227   0AD2 26 02 00      mov b, $2
1228   0AD5 56            add b, a
1229   0AD6 E4            pop a
1230   0AD7             ; --- END TERMS
1231   0AD7 E7            pop d
1232   0AD8 FD 43         mov [d], b
1233   0ADA             ; break; 
1234   0ADA 0A 27 0B      jmp _switch16_exit ; case break
1235   0ADD             _switch16_case6:
1236   0ADD             
1237   0ADD             ; --- BEGIN INLINE ASM SEGMENT
1238   0ADD FA FF FF      lea d, [bp + -1] ; $p
1239   0AE0 FD 2A         mov d, [d]
1240   0AE2 1E            mov al, [d]
1241   0AE3 23            mov ah, al
1242   0AE4 07 AF 1D      call _putchar
1243   0AE7             ; --- END INLINE ASM SEGMENT
1244   0AE7             
1245   0AE7             ; p = p + 1; 
1246   0AE7 FA FF FF      lea d, [bp + -1] ; $p
1247   0AEA DA            push d
1248   0AEB FA FF FF      lea d, [bp + -1] ; $p
1249   0AEE 2A            mov b, [d]
1250   0AEF             ; --- START TERMS
1251   0AEF D7            push a
1252   0AF0 11            mov a, b
1253   0AF1 26 01 00      mov b, $1
1254   0AF4 56            add b, a
1255   0AF5 E4            pop a
1256   0AF6             ; --- END TERMS
1257   0AF6 E7            pop d
1258   0AF7 FD 43         mov [d], b
1259   0AF9             ; break; 
1260   0AF9 0A 27 0B      jmp _switch16_exit ; case break
1261   0AFC             _switch16_case7:
1262   0AFC             
1263   0AFC             ; --- BEGIN INLINE ASM SEGMENT
1264   0AFC FA FF FF      lea d, [bp + -1] ; $p
1265   0AFF FD 2A         mov d, [d]
1266   0B01 FD 2A         mov d, [d]
1267   0B03 07 F9 1E      call _puts
1268   0B06             ; --- END INLINE ASM SEGMENT
1269   0B06             
1270   0B06             ; p = p + 2; 
1271   0B06 FA FF FF      lea d, [bp + -1] ; $p
1272   0B09 DA            push d
1273   0B0A FA FF FF      lea d, [bp + -1] ; $p
1274   0B0D 2A            mov b, [d]
1275   0B0E             ; --- START TERMS
1276   0B0E D7            push a
1277   0B0F 11            mov a, b
1278   0B10 26 02 00      mov b, $2
1279   0B13 56            add b, a
1280   0B14 E4            pop a
1281   0B15             ; --- END TERMS
1282   0B15 E7            pop d
1283   0B16 FD 43         mov [d], b
1284   0B18             ; break; 
1285   0B18 0A 27 0B      jmp _switch16_exit ; case break
1286   0B1B             _switch16_default:
1287   0B1B             ; print("Error: Unknown argument type.\n"); 
1288   0B1B 26 85 25      mov b, _s5 ; "Error: Unknown argument type.\n"
1289   0B1E FD AB         swp b
1290   0B20 D8            push b
1291   0B21 07 00 1C      call print
1292   0B24 51 02 00      add sp, 2
1293   0B27             _switch16_exit:
1294   0B27             ; format_p++; 
1295   0B27 FA FD FF      lea d, [bp + -3] ; $format_p
1296   0B2A 2A            mov b, [d]
1297   0B2B FD 77         inc b
1298   0B2D FA FD FF      lea d, [bp + -3] ; $format_p
1299   0B30 FD 43         mov [d], b
1300   0B32 FD 7D         dec b
1301   0B34 0A 53 0B      jmp _if15_exit
1302   0B37             _if15_else:
1303   0B37             ; putchar(*format_p); 
1304   0B37 FA FD FF      lea d, [bp + -3] ; $format_p
1305   0B3A 2A            mov b, [d]
1306   0B3B 74            mov d, b
1307   0B3C 32            mov bl, [d]
1308   0B3D A7 00         mov bh, 0
1309   0B3F DD            push bl
1310   0B40 07 B8 1B      call putchar
1311   0B43 51 01 00      add sp, 1
1312   0B46             ; format_p++; 
1313   0B46 FA FD FF      lea d, [bp + -3] ; $format_p
1314   0B49 2A            mov b, [d]
1315   0B4A FD 77         inc b
1316   0B4C FA FD FF      lea d, [bp + -3] ; $format_p
1317   0B4F FD 43         mov [d], b
1318   0B51 FD 7D         dec b
1319   0B53             _if15_exit:
1320   0B53             _if14_exit:
1321   0B53             _for13_update:
1322   0B53 0A 16 09      jmp _for13_cond
1323   0B56             _for13_exit:
1324   0B56 F9            leave
1325   0B57 09            ret
1326   0B58             
1327   0B58             scanf:
1328   0B58 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1329   0B5B             ; char *p, *format_p; 
1330   0B5B 52 02 00      sub sp, 2
1331   0B5E 52 02 00      sub sp, 2
1332   0B61             ; char c; 
1333   0B61 52 01 00      sub sp, 1
1334   0B64             ; int i; 
1335   0B64 52 02 00      sub sp, 2
1336   0B67             ; char input_string[  512                    ]; 
1337   0B67 52 00 02      sub sp, 512
1338   0B6A             ; format_p = format; 
1339   0B6A FA FD FF      lea d, [bp + -3] ; $format_p
1340   0B6D DA            push d
1341   0B6E FA 05 00      lea d, [bp + 5] ; $format
1342   0B71 2A            mov b, [d]
1343   0B72 E7            pop d
1344   0B73 FD 43         mov [d], b
1345   0B75             ; p = &format + 2; 
1346   0B75 FA FF FF      lea d, [bp + -1] ; $p
1347   0B78 DA            push d
1348   0B79 FA 05 00      lea d, [bp + 5] ; $format
1349   0B7C 2D            mov b, d
1350   0B7D             ; --- START TERMS
1351   0B7D D7            push a
1352   0B7E 11            mov a, b
1353   0B7F 26 02 00      mov b, $2
1354   0B82 56            add b, a
1355   0B83 E4            pop a
1356   0B84             ; --- END TERMS
1357   0B84 E7            pop d
1358   0B85 FD 43         mov [d], b
1359   0B87             ; for(;;){ 
1360   0B87             _for20_init:
1361   0B87             _for20_cond:
1362   0B87             _for20_block:
1363   0B87             ; if(!*format_p) break; 
1364   0B87             _if21_cond:
1365   0B87 FA FD FF      lea d, [bp + -3] ; $format_p
1366   0B8A 2A            mov b, [d]
1367   0B8B 74            mov d, b
1368   0B8C 32            mov bl, [d]
1369   0B8D A7 00         mov bh, 0
1370   0B8F C0 00 00      cmp b, 0
1371   0B92 FD 71         seq ; !
1372   0B94 C0 00 00      cmp b, 0
1373   0B97 C6 A0 0B      je _if21_else
1374   0B9A             _if21_true:
1375   0B9A             ; break; 
1376   0B9A 0A A1 0D      jmp _for20_exit ; for break
1377   0B9D 0A 9E 0D      jmp _if21_exit
1378   0BA0             _if21_else:
1379   0BA0             ; if(*format_p == '%'){ 
1380   0BA0             _if22_cond:
1381   0BA0 FA FD FF      lea d, [bp + -3] ; $format_p
1382   0BA3 2A            mov b, [d]
1383   0BA4 74            mov d, b
1384   0BA5 32            mov bl, [d]
1385   0BA6 A7 00         mov bh, 0
1386   0BA8             ; --- START RELATIONAL
1387   0BA8 D7            push a
1388   0BA9 11            mov a, b
1389   0BAA 26 25 00      mov b, $25
1390   0BAD B0            cmp a, b
1391   0BAE FD 71         seq ; ==
1392   0BB0 E4            pop a
1393   0BB1             ; --- END RELATIONAL
1394   0BB1 C0 00 00      cmp b, 0
1395   0BB4 C6 82 0D      je _if22_else
1396   0BB7             _if22_true:
1397   0BB7             ; format_p++; 
1398   0BB7 FA FD FF      lea d, [bp + -3] ; $format_p
1399   0BBA 2A            mov b, [d]
1400   0BBB FD 77         inc b
1401   0BBD FA FD FF      lea d, [bp + -3] ; $format_p
1402   0BC0 FD 43         mov [d], b
1403   0BC2 FD 7D         dec b
1404   0BC4             ; switch(*format_p){ 
1405   0BC4             _switch23_expr:
1406   0BC4 FA FD FF      lea d, [bp + -3] ; $format_p
1407   0BC7 2A            mov b, [d]
1408   0BC8 74            mov d, b
1409   0BC9 32            mov bl, [d]
1410   0BCA A7 00         mov bh, 0
1411   0BCC             _switch23_comparisons:
1412   0BCC C1 6C         cmp bl, $6c
1413   0BCE C6 FA 0B      je _switch23_case0
1414   0BD1 C1 4C         cmp bl, $4c
1415   0BD3 C6 FA 0B      je _switch23_case1
1416   0BD6 C1 64         cmp bl, $64
1417   0BD8 C6 8C 0C      je _switch23_case2
1418   0BDB C1 69         cmp bl, $69
1419   0BDD C6 8C 0C      je _switch23_case3
1420   0BE0 C1 75         cmp bl, $75
1421   0BE2 C6 B9 0C      je _switch23_case4
1422   0BE5 C1 78         cmp bl, $78
1423   0BE7 C6 E6 0C      je _switch23_case5
1424   0BEA C1 63         cmp bl, $63
1425   0BEC C6 FB 0C      je _switch23_case6
1426   0BEF C1 73         cmp bl, $73
1427   0BF1 C6 2E 0D      je _switch23_case7
1428   0BF4 0A 66 0D      jmp _switch23_default
1429   0BF7 0A 72 0D      jmp _switch23_exit
1430   0BFA             _switch23_case0:
1431   0BFA             _switch23_case1:
1432   0BFA             ; format_p++; 
1433   0BFA FA FD FF      lea d, [bp + -3] ; $format_p
1434   0BFD 2A            mov b, [d]
1435   0BFE FD 77         inc b
1436   0C00 FA FD FF      lea d, [bp + -3] ; $format_p
1437   0C03 FD 43         mov [d], b
1438   0C05 FD 7D         dec b
1439   0C07             ; if(*format_p == 'd' || *format_p == 'i'); 
1440   0C07             _if24_cond:
1441   0C07 FA FD FF      lea d, [bp + -3] ; $format_p
1442   0C0A 2A            mov b, [d]
1443   0C0B 74            mov d, b
1444   0C0C 32            mov bl, [d]
1445   0C0D A7 00         mov bh, 0
1446   0C0F             ; --- START RELATIONAL
1447   0C0F D7            push a
1448   0C10 11            mov a, b
1449   0C11 26 64 00      mov b, $64
1450   0C14 B0            cmp a, b
1451   0C15 FD 71         seq ; ==
1452   0C17 E4            pop a
1453   0C18             ; --- END RELATIONAL
1454   0C18             ; --- START LOGICAL OR
1455   0C18 D7            push a
1456   0C19 11            mov a, b
1457   0C1A FA FD FF      lea d, [bp + -3] ; $format_p
1458   0C1D 2A            mov b, [d]
1459   0C1E 74            mov d, b
1460   0C1F 32            mov bl, [d]
1461   0C20 A7 00         mov bh, 0
1462   0C22             ; --- START RELATIONAL
1463   0C22 D7            push a
1464   0C23 11            mov a, b
1465   0C24 26 69 00      mov b, $69
1466   0C27 B0            cmp a, b
1467   0C28 FD 71         seq ; ==
1468   0C2A E4            pop a
1469   0C2B             ; --- END RELATIONAL
1470   0C2B FD A8         sor a, b ; ||
1471   0C2D E4            pop a
1472   0C2E             ; --- END LOGICAL OR
1473   0C2E C0 00 00      cmp b, 0
1474   0C31 C6 37 0C      je _if24_else
1475   0C34             _if24_true:
1476   0C34             ; ; 
1477   0C34 0A 77 0C      jmp _if24_exit
1478   0C37             _if24_else:
1479   0C37             ; if(*format_p == 'u'); 
1480   0C37             _if25_cond:
1481   0C37 FA FD FF      lea d, [bp + -3] ; $format_p
1482   0C3A 2A            mov b, [d]
1483   0C3B 74            mov d, b
1484   0C3C 32            mov bl, [d]
1485   0C3D A7 00         mov bh, 0
1486   0C3F             ; --- START RELATIONAL
1487   0C3F D7            push a
1488   0C40 11            mov a, b
1489   0C41 26 75 00      mov b, $75
1490   0C44 B0            cmp a, b
1491   0C45 FD 71         seq ; ==
1492   0C47 E4            pop a
1493   0C48             ; --- END RELATIONAL
1494   0C48 C0 00 00      cmp b, 0
1495   0C4B C6 51 0C      je _if25_else
1496   0C4E             _if25_true:
1497   0C4E             ; ; 
1498   0C4E 0A 77 0C      jmp _if25_exit
1499   0C51             _if25_else:
1500   0C51             ; if(*format_p == 'x'); 
1501   0C51             _if26_cond:
1502   0C51 FA FD FF      lea d, [bp + -3] ; $format_p
1503   0C54 2A            mov b, [d]
1504   0C55 74            mov d, b
1505   0C56 32            mov bl, [d]
1506   0C57 A7 00         mov bh, 0
1507   0C59             ; --- START RELATIONAL
1508   0C59 D7            push a
1509   0C5A 11            mov a, b
1510   0C5B 26 78 00      mov b, $78
1511   0C5E B0            cmp a, b
1512   0C5F FD 71         seq ; ==
1513   0C61 E4            pop a
1514   0C62             ; --- END RELATIONAL
1515   0C62 C0 00 00      cmp b, 0
1516   0C65 C6 6B 0C      je _if26_else
1517   0C68             _if26_true:
1518   0C68             ; ; 
1519   0C68 0A 77 0C      jmp _if26_exit
1520   0C6B             _if26_else:
1521   0C6B             ; err("Unexpected format in printf."); 
1522   0C6B 26 68 25      mov b, _s4 ; "Unexpected format in printf."
1523   0C6E FD AB         swp b
1524   0C70 D8            push b
1525   0C71 07 AA 10      call err
1526   0C74 51 02 00      add sp, 2
1527   0C77             _if26_exit:
1528   0C77             _if25_exit:
1529   0C77             _if24_exit:
1530   0C77             ; p = p + 4; 
1531   0C77 FA FF FF      lea d, [bp + -1] ; $p
1532   0C7A DA            push d
1533   0C7B FA FF FF      lea d, [bp + -1] ; $p
1534   0C7E 2A            mov b, [d]
1535   0C7F             ; --- START TERMS
1536   0C7F D7            push a
1537   0C80 11            mov a, b
1538   0C81 26 04 00      mov b, $4
1539   0C84 56            add b, a
1540   0C85 E4            pop a
1541   0C86             ; --- END TERMS
1542   0C86 E7            pop d
1543   0C87 FD 43         mov [d], b
1544   0C89             ; break; 
1545   0C89 0A 72 0D      jmp _switch23_exit ; case break
1546   0C8C             _switch23_case2:
1547   0C8C             _switch23_case3:
1548   0C8C             ; i = scann(); 
1549   0C8C FA FA FF      lea d, [bp + -6] ; $i
1550   0C8F DA            push d
1551   0C90 07 DB 1B      call scann
1552   0C93 E7            pop d
1553   0C94 FD 43         mov [d], b
1554   0C96             ; **(int **)p = i; 
1555   0C96 FA FF FF      lea d, [bp + -1] ; $p
1556   0C99 2A            mov b, [d]
1557   0C9A 74            mov d, b
1558   0C9B 2A            mov b, [d]
1559   0C9C D8            push b
1560   0C9D FA FA FF      lea d, [bp + -6] ; $i
1561   0CA0 2A            mov b, [d]
1562   0CA1 E7            pop d
1563   0CA2 FD 43         mov [d], b
1564   0CA4             ; p = p + 2; 
1565   0CA4 FA FF FF      lea d, [bp + -1] ; $p
1566   0CA7 DA            push d
1567   0CA8 FA FF FF      lea d, [bp + -1] ; $p
1568   0CAB 2A            mov b, [d]
1569   0CAC             ; --- START TERMS
1570   0CAC D7            push a
1571   0CAD 11            mov a, b
1572   0CAE 26 02 00      mov b, $2
1573   0CB1 56            add b, a
1574   0CB2 E4            pop a
1575   0CB3             ; --- END TERMS
1576   0CB3 E7            pop d
1577   0CB4 FD 43         mov [d], b
1578   0CB6             ; break; 
1579   0CB6 0A 72 0D      jmp _switch23_exit ; case break
1580   0CB9             _switch23_case4:
1581   0CB9             ; i = scann(); 
1582   0CB9 FA FA FF      lea d, [bp + -6] ; $i
1583   0CBC DA            push d
1584   0CBD 07 DB 1B      call scann
1585   0CC0 E7            pop d
1586   0CC1 FD 43         mov [d], b
1587   0CC3             ; **(int **)p = i; 
1588   0CC3 FA FF FF      lea d, [bp + -1] ; $p
1589   0CC6 2A            mov b, [d]
1590   0CC7 74            mov d, b
1591   0CC8 2A            mov b, [d]
1592   0CC9 D8            push b
1593   0CCA FA FA FF      lea d, [bp + -6] ; $i
1594   0CCD 2A            mov b, [d]
1595   0CCE E7            pop d
1596   0CCF FD 43         mov [d], b
1597   0CD1             ; p = p + 2; 
1598   0CD1 FA FF FF      lea d, [bp + -1] ; $p
1599   0CD4 DA            push d
1600   0CD5 FA FF FF      lea d, [bp + -1] ; $p
1601   0CD8 2A            mov b, [d]
1602   0CD9             ; --- START TERMS
1603   0CD9 D7            push a
1604   0CDA 11            mov a, b
1605   0CDB 26 02 00      mov b, $2
1606   0CDE 56            add b, a
1607   0CDF E4            pop a
1608   0CE0             ; --- END TERMS
1609   0CE0 E7            pop d
1610   0CE1 FD 43         mov [d], b
1611   0CE3             ; break; 
1612   0CE3 0A 72 0D      jmp _switch23_exit ; case break
1613   0CE6             _switch23_case5:
1614   0CE6             ; p = p + 2; 
1615   0CE6 FA FF FF      lea d, [bp + -1] ; $p
1616   0CE9 DA            push d
1617   0CEA FA FF FF      lea d, [bp + -1] ; $p
1618   0CED 2A            mov b, [d]
1619   0CEE             ; --- START TERMS
1620   0CEE D7            push a
1621   0CEF 11            mov a, b
1622   0CF0 26 02 00      mov b, $2
1623   0CF3 56            add b, a
1624   0CF4 E4            pop a
1625   0CF5             ; --- END TERMS
1626   0CF5 E7            pop d
1627   0CF6 FD 43         mov [d], b
1628   0CF8             ; break; 
1629   0CF8 0A 72 0D      jmp _switch23_exit ; case break
1630   0CFB             _switch23_case6:
1631   0CFB             ; c = getchar(); 
1632   0CFB FA FC FF      lea d, [bp + -4] ; $c
1633   0CFE DA            push d
1634   0CFF 07 C5 1B      call getchar
1635   0D02 E7            pop d
1636   0D03 FD 3E         mov [d], bl
1637   0D05             ; **(char **)p = *(char *)c; 
1638   0D05 FA FF FF      lea d, [bp + -1] ; $p
1639   0D08 2A            mov b, [d]
1640   0D09 74            mov d, b
1641   0D0A 2A            mov b, [d]
1642   0D0B D8            push b
1643   0D0C FA FC FF      lea d, [bp + -4] ; $c
1644   0D0F 32            mov bl, [d]
1645   0D10 A7 00         mov bh, 0
1646   0D12 74            mov d, b
1647   0D13 32            mov bl, [d]
1648   0D14 A7 00         mov bh, 0
1649   0D16 E7            pop d
1650   0D17 FD 43         mov [d], b
1651   0D19             ; p = p + 1; 
1652   0D19 FA FF FF      lea d, [bp + -1] ; $p
1653   0D1C DA            push d
1654   0D1D FA FF FF      lea d, [bp + -1] ; $p
1655   0D20 2A            mov b, [d]
1656   0D21             ; --- START TERMS
1657   0D21 D7            push a
1658   0D22 11            mov a, b
1659   0D23 26 01 00      mov b, $1
1660   0D26 56            add b, a
1661   0D27 E4            pop a
1662   0D28             ; --- END TERMS
1663   0D28 E7            pop d
1664   0D29 FD 43         mov [d], b
1665   0D2B             ; break; 
1666   0D2B 0A 72 0D      jmp _switch23_exit ; case break
1667   0D2E             _switch23_case7:
1668   0D2E             ; gets(input_string); 
1669   0D2E FA FA FD      lea d, [bp + -518] ; $input_string
1670   0D31 2D            mov b, d
1671   0D32 FD AB         swp b
1672   0D34 D8            push b
1673   0D35 07 36 12      call gets
1674   0D38 51 02 00      add sp, 2
1675   0D3B             ; strcpy(*(char **)p, input_string); 
1676   0D3B FA FA FD      lea d, [bp + -518] ; $input_string
1677   0D3E 2D            mov b, d
1678   0D3F FD AB         swp b
1679   0D41 D8            push b
1680   0D42 FA FF FF      lea d, [bp + -1] ; $p
1681   0D45 2A            mov b, [d]
1682   0D46 74            mov d, b
1683   0D47 2A            mov b, [d]
1684   0D48 FD AB         swp b
1685   0D4A D8            push b
1686   0D4B 07 DF 04      call strcpy
1687   0D4E 51 04 00      add sp, 4
1688   0D51             ; p = p + 2; 
1689   0D51 FA FF FF      lea d, [bp + -1] ; $p
1690   0D54 DA            push d
1691   0D55 FA FF FF      lea d, [bp + -1] ; $p
1692   0D58 2A            mov b, [d]
1693   0D59             ; --- START TERMS
1694   0D59 D7            push a
1695   0D5A 11            mov a, b
1696   0D5B 26 02 00      mov b, $2
1697   0D5E 56            add b, a
1698   0D5F E4            pop a
1699   0D60             ; --- END TERMS
1700   0D60 E7            pop d
1701   0D61 FD 43         mov [d], b
1702   0D63             ; break; 
1703   0D63 0A 72 0D      jmp _switch23_exit ; case break
1704   0D66             _switch23_default:
1705   0D66             ; print("Error: Unknown argument type.\n"); 
1706   0D66 26 85 25      mov b, _s5 ; "Error: Unknown argument type.\n"
1707   0D69 FD AB         swp b
1708   0D6B D8            push b
1709   0D6C 07 00 1C      call print
1710   0D6F 51 02 00      add sp, 2
1711   0D72             _switch23_exit:
1712   0D72             ; format_p++; 
1713   0D72 FA FD FF      lea d, [bp + -3] ; $format_p
1714   0D75 2A            mov b, [d]
1715   0D76 FD 77         inc b
1716   0D78 FA FD FF      lea d, [bp + -3] ; $format_p
1717   0D7B FD 43         mov [d], b
1718   0D7D FD 7D         dec b
1719   0D7F 0A 9E 0D      jmp _if22_exit
1720   0D82             _if22_else:
1721   0D82             ; putchar(*format_p); 
1722   0D82 FA FD FF      lea d, [bp + -3] ; $format_p
1723   0D85 2A            mov b, [d]
1724   0D86 74            mov d, b
1725   0D87 32            mov bl, [d]
1726   0D88 A7 00         mov bh, 0
1727   0D8A DD            push bl
1728   0D8B 07 B8 1B      call putchar
1729   0D8E 51 01 00      add sp, 1
1730   0D91             ; format_p++; 
1731   0D91 FA FD FF      lea d, [bp + -3] ; $format_p
1732   0D94 2A            mov b, [d]
1733   0D95 FD 77         inc b
1734   0D97 FA FD FF      lea d, [bp + -3] ; $format_p
1735   0D9A FD 43         mov [d], b
1736   0D9C FD 7D         dec b
1737   0D9E             _if22_exit:
1738   0D9E             _if21_exit:
1739   0D9E             _for20_update:
1740   0D9E 0A 87 0B      jmp _for20_cond
1741   0DA1             _for20_exit:
1742   0DA1 F9            leave
1743   0DA2 09            ret
1744   0DA3             
1745   0DA3             sprintf:
1746   0DA3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1747   0DA6             ; char *p, *format_p; 
1748   0DA6 52 02 00      sub sp, 2
1749   0DA9 52 02 00      sub sp, 2
1750   0DAC             ; char *sp; 
1751   0DAC 52 02 00      sub sp, 2
1752   0DAF             ; sp = dest; 
1753   0DAF FA FB FF      lea d, [bp + -5] ; $sp
1754   0DB2 DA            push d
1755   0DB3 FA 05 00      lea d, [bp + 5] ; $dest
1756   0DB6 2A            mov b, [d]
1757   0DB7 E7            pop d
1758   0DB8 FD 43         mov [d], b
1759   0DBA             ; format_p = format; 
1760   0DBA FA FD FF      lea d, [bp + -3] ; $format_p
1761   0DBD DA            push d
1762   0DBE FA 07 00      lea d, [bp + 7] ; $format
1763   0DC1 2A            mov b, [d]
1764   0DC2 E7            pop d
1765   0DC3 FD 43         mov [d], b
1766   0DC5             ; p = &format + 2; 
1767   0DC5 FA FF FF      lea d, [bp + -1] ; $p
1768   0DC8 DA            push d
1769   0DC9 FA 07 00      lea d, [bp + 7] ; $format
1770   0DCC 2D            mov b, d
1771   0DCD             ; --- START TERMS
1772   0DCD D7            push a
1773   0DCE 11            mov a, b
1774   0DCF 26 02 00      mov b, $2
1775   0DD2 56            add b, a
1776   0DD3 E4            pop a
1777   0DD4             ; --- END TERMS
1778   0DD4 E7            pop d
1779   0DD5 FD 43         mov [d], b
1780   0DD7             ; for(;;){ 
1781   0DD7             _for27_init:
1782   0DD7             _for27_cond:
1783   0DD7             _for27_block:
1784   0DD7             ; if(!*format_p) break; 
1785   0DD7             _if28_cond:
1786   0DD7 FA FD FF      lea d, [bp + -3] ; $format_p
1787   0DDA 2A            mov b, [d]
1788   0DDB 74            mov d, b
1789   0DDC 32            mov bl, [d]
1790   0DDD A7 00         mov bh, 0
1791   0DDF C0 00 00      cmp b, 0
1792   0DE2 FD 71         seq ; !
1793   0DE4 C0 00 00      cmp b, 0
1794   0DE7 C6 F0 0D      je _if28_else
1795   0DEA             _if28_true:
1796   0DEA             ; break; 
1797   0DEA 0A 90 10      jmp _for27_exit ; for break
1798   0DED 0A 8D 10      jmp _if28_exit
1799   0DF0             _if28_else:
1800   0DF0             ; if(*format_p == '%'){ 
1801   0DF0             _if29_cond:
1802   0DF0 FA FD FF      lea d, [bp + -3] ; $format_p
1803   0DF3 2A            mov b, [d]
1804   0DF4 74            mov d, b
1805   0DF5 32            mov bl, [d]
1806   0DF6 A7 00         mov bh, 0
1807   0DF8             ; --- START RELATIONAL
1808   0DF8 D7            push a
1809   0DF9 11            mov a, b
1810   0DFA 26 25 00      mov b, $25
1811   0DFD B0            cmp a, b
1812   0DFE FD 71         seq ; ==
1813   0E00 E4            pop a
1814   0E01             ; --- END RELATIONAL
1815   0E01 C0 00 00      cmp b, 0
1816   0E04 C6 6B 10      je _if29_else
1817   0E07             _if29_true:
1818   0E07             ; format_p++; 
1819   0E07 FA FD FF      lea d, [bp + -3] ; $format_p
1820   0E0A 2A            mov b, [d]
1821   0E0B FD 77         inc b
1822   0E0D FA FD FF      lea d, [bp + -3] ; $format_p
1823   0E10 FD 43         mov [d], b
1824   0E12 FD 7D         dec b
1825   0E14             ; switch(*format_p){ 
1826   0E14             _switch30_expr:
1827   0E14 FA FD FF      lea d, [bp + -3] ; $format_p
1828   0E17 2A            mov b, [d]
1829   0E18 74            mov d, b
1830   0E19 32            mov bl, [d]
1831   0E1A A7 00         mov bh, 0
1832   0E1C             _switch30_comparisons:
1833   0E1C C1 6C         cmp bl, $6c
1834   0E1E C6 4A 0E      je _switch30_case0
1835   0E21 C1 4C         cmp bl, $4c
1836   0E23 C6 4A 0E      je _switch30_case1
1837   0E26 C1 64         cmp bl, $64
1838   0E28 C6 38 0F      je _switch30_case2
1839   0E2B C1 69         cmp bl, $69
1840   0E2D C6 38 0F      je _switch30_case3
1841   0E30 C1 75         cmp bl, $75
1842   0E32 C6 72 0F      je _switch30_case4
1843   0E35 C1 78         cmp bl, $78
1844   0E37 C6 AC 0F      je _switch30_case5
1845   0E3A C1 63         cmp bl, $63
1846   0E3C C6 CA 0F      je _switch30_case6
1847   0E3F C1 73         cmp bl, $73
1848   0E41 C6 F8 0F      je _switch30_case7
1849   0E44 0A 4F 10      jmp _switch30_default
1850   0E47 0A 5B 10      jmp _switch30_exit
1851   0E4A             _switch30_case0:
1852   0E4A             _switch30_case1:
1853   0E4A             ; format_p++; 
1854   0E4A FA FD FF      lea d, [bp + -3] ; $format_p
1855   0E4D 2A            mov b, [d]
1856   0E4E FD 77         inc b
1857   0E50 FA FD FF      lea d, [bp + -3] ; $format_p
1858   0E53 FD 43         mov [d], b
1859   0E55 FD 7D         dec b
1860   0E57             ; if(*format_p == 'd' || *format_p == 'i') 
1861   0E57             _if31_cond:
1862   0E57 FA FD FF      lea d, [bp + -3] ; $format_p
1863   0E5A 2A            mov b, [d]
1864   0E5B 74            mov d, b
1865   0E5C 32            mov bl, [d]
1866   0E5D A7 00         mov bh, 0
1867   0E5F             ; --- START RELATIONAL
1868   0E5F D7            push a
1869   0E60 11            mov a, b
1870   0E61 26 64 00      mov b, $64
1871   0E64 B0            cmp a, b
1872   0E65 FD 71         seq ; ==
1873   0E67 E4            pop a
1874   0E68             ; --- END RELATIONAL
1875   0E68             ; --- START LOGICAL OR
1876   0E68 D7            push a
1877   0E69 11            mov a, b
1878   0E6A FA FD FF      lea d, [bp + -3] ; $format_p
1879   0E6D 2A            mov b, [d]
1880   0E6E 74            mov d, b
1881   0E6F 32            mov bl, [d]
1882   0E70 A7 00         mov bh, 0
1883   0E72             ; --- START RELATIONAL
1884   0E72 D7            push a
1885   0E73 11            mov a, b
1886   0E74 26 69 00      mov b, $69
1887   0E77 B0            cmp a, b
1888   0E78 FD 71         seq ; ==
1889   0E7A E4            pop a
1890   0E7B             ; --- END RELATIONAL
1891   0E7B FD A8         sor a, b ; ||
1892   0E7D E4            pop a
1893   0E7E             ; --- END LOGICAL OR
1894   0E7E C0 00 00      cmp b, 0
1895   0E81 C6 A6 0E      je _if31_else
1896   0E84             _if31_true:
1897   0E84             ; print_signed_long(*(long *)p); 
1898   0E84 FA FF FF      lea d, [bp + -1] ; $p
1899   0E87 2A            mov b, [d]
1900   0E88 AB            snex b
1901   0E89 FD 39         mov c, b
1902   0E8B 74            mov d, b
1903   0E8C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1904   0E8F FD 39         mov c, b ; And place it into C
1905   0E91 2A            mov b, [d] ; Lower Word in B
1906   0E92 FD 79         mov g, b
1907   0E94 28            mov b, c
1908   0E95 FD AB         swp b
1909   0E97 D8            push b
1910   0E98 FD 27         mov b, g
1911   0E9A FD AB         swp b
1912   0E9C D8            push b
1913   0E9D 07 47 13      call print_signed_long
1914   0EA0 51 04 00      add sp, 4
1915   0EA3 0A 23 0F      jmp _if31_exit
1916   0EA6             _if31_else:
1917   0EA6             ; if(*format_p == 'u') 
1918   0EA6             _if32_cond:
1919   0EA6 FA FD FF      lea d, [bp + -3] ; $format_p
1920   0EA9 2A            mov b, [d]
1921   0EAA 74            mov d, b
1922   0EAB 32            mov bl, [d]
1923   0EAC A7 00         mov bh, 0
1924   0EAE             ; --- START RELATIONAL
1925   0EAE D7            push a
1926   0EAF 11            mov a, b
1927   0EB0 26 75 00      mov b, $75
1928   0EB3 B0            cmp a, b
1929   0EB4 FD 71         seq ; ==
1930   0EB6 E4            pop a
1931   0EB7             ; --- END RELATIONAL
1932   0EB7 C0 00 00      cmp b, 0
1933   0EBA C6 E1 0E      je _if32_else
1934   0EBD             _if32_true:
1935   0EBD             ; print_unsigned_long(*(unsigned long *)p); 
1936   0EBD FA FF FF      lea d, [bp + -1] ; $p
1937   0EC0 2A            mov b, [d]
1938   0EC1 A7 00         mov bh, 0
1939   0EC3 38 00 00      mov c, 0
1940   0EC6 74            mov d, b
1941   0EC7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1942   0ECA FD 39         mov c, b ; And place it into C
1943   0ECC 2A            mov b, [d] ; Lower Word in B
1944   0ECD FD 79         mov g, b
1945   0ECF 28            mov b, c
1946   0ED0 FD AB         swp b
1947   0ED2 D8            push b
1948   0ED3 FD 27         mov b, g
1949   0ED5 FD AB         swp b
1950   0ED7 D8            push b
1951   0ED8 07 87 16      call print_unsigned_long
1952   0EDB 51 04 00      add sp, 4
1953   0EDE 0A 23 0F      jmp _if32_exit
1954   0EE1             _if32_else:
1955   0EE1             ; if(*format_p == 'x') 
1956   0EE1             _if33_cond:
1957   0EE1 FA FD FF      lea d, [bp + -3] ; $format_p
1958   0EE4 2A            mov b, [d]
1959   0EE5 74            mov d, b
1960   0EE6 32            mov bl, [d]
1961   0EE7 A7 00         mov bh, 0
1962   0EE9             ; --- START RELATIONAL
1963   0EE9 D7            push a
1964   0EEA 11            mov a, b
1965   0EEB 26 78 00      mov b, $78
1966   0EEE B0            cmp a, b
1967   0EEF FD 71         seq ; ==
1968   0EF1 E4            pop a
1969   0EF2             ; --- END RELATIONAL
1970   0EF2 C0 00 00      cmp b, 0
1971   0EF5 C6 17 0F      je _if33_else
1972   0EF8             _if33_true:
1973   0EF8             ; printx32(*(long int *)p); 
1974   0EF8 FA FF FF      lea d, [bp + -1] ; $p
1975   0EFB 2A            mov b, [d]
1976   0EFC 74            mov d, b
1977   0EFD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1978   0F00 FD 39         mov c, b ; And place it into C
1979   0F02 2A            mov b, [d] ; Lower Word in B
1980   0F03 FD 79         mov g, b
1981   0F05 28            mov b, c
1982   0F06 FD AB         swp b
1983   0F08 D8            push b
1984   0F09 FD 27         mov b, g
1985   0F0B FD AB         swp b
1986   0F0D D8            push b
1987   0F0E 07 BC 10      call printx32
1988   0F11 51 04 00      add sp, 4
1989   0F14 0A 23 0F      jmp _if33_exit
1990   0F17             _if33_else:
1991   0F17             ; err("Unexpected format in printf."); 
1992   0F17 26 68 25      mov b, _s4 ; "Unexpected format in printf."
1993   0F1A FD AB         swp b
1994   0F1C D8            push b
1995   0F1D 07 AA 10      call err
1996   0F20 51 02 00      add sp, 2
1997   0F23             _if33_exit:
1998   0F23             _if32_exit:
1999   0F23             _if31_exit:
2000   0F23             ; p = p + 4; 
2001   0F23 FA FF FF      lea d, [bp + -1] ; $p
2002   0F26 DA            push d
2003   0F27 FA FF FF      lea d, [bp + -1] ; $p
2004   0F2A 2A            mov b, [d]
2005   0F2B             ; --- START TERMS
2006   0F2B D7            push a
2007   0F2C 11            mov a, b
2008   0F2D 26 04 00      mov b, $4
2009   0F30 56            add b, a
2010   0F31 E4            pop a
2011   0F32             ; --- END TERMS
2012   0F32 E7            pop d
2013   0F33 FD 43         mov [d], b
2014   0F35             ; break; 
2015   0F35 0A 5B 10      jmp _switch30_exit ; case break
2016   0F38             _switch30_case2:
2017   0F38             _switch30_case3:
2018   0F38             ; sp = sp + sprint_signed(sp, *(int*)p); 
2019   0F38 FA FB FF      lea d, [bp + -5] ; $sp
2020   0F3B DA            push d
2021   0F3C FA FB FF      lea d, [bp + -5] ; $sp
2022   0F3F 2A            mov b, [d]
2023   0F40             ; --- START TERMS
2024   0F40 D7            push a
2025   0F41 11            mov a, b
2026   0F42 FA FF FF      lea d, [bp + -1] ; $p
2027   0F45 2A            mov b, [d]
2028   0F46 74            mov d, b
2029   0F47 2A            mov b, [d]
2030   0F48 FD AB         swp b
2031   0F4A D8            push b
2032   0F4B FA FB FF      lea d, [bp + -5] ; $sp
2033   0F4E 2A            mov b, [d]
2034   0F4F FD AB         swp b
2035   0F51 D8            push b
2036   0F52 07 56 1A      call sprint_signed
2037   0F55 51 04 00      add sp, 4
2038   0F58 56            add b, a
2039   0F59 E4            pop a
2040   0F5A             ; --- END TERMS
2041   0F5A E7            pop d
2042   0F5B FD 43         mov [d], b
2043   0F5D             ; p = p + 2; 
2044   0F5D FA FF FF      lea d, [bp + -1] ; $p
2045   0F60 DA            push d
2046   0F61 FA FF FF      lea d, [bp + -1] ; $p
2047   0F64 2A            mov b, [d]
2048   0F65             ; --- START TERMS
2049   0F65 D7            push a
2050   0F66 11            mov a, b
2051   0F67 26 02 00      mov b, $2
2052   0F6A 56            add b, a
2053   0F6B E4            pop a
2054   0F6C             ; --- END TERMS
2055   0F6C E7            pop d
2056   0F6D FD 43         mov [d], b
2057   0F6F             ; break; 
2058   0F6F 0A 5B 10      jmp _switch30_exit ; case break
2059   0F72             _switch30_case4:
2060   0F72             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
2061   0F72 FA FB FF      lea d, [bp + -5] ; $sp
2062   0F75 DA            push d
2063   0F76 FA FB FF      lea d, [bp + -5] ; $sp
2064   0F79 2A            mov b, [d]
2065   0F7A             ; --- START TERMS
2066   0F7A D7            push a
2067   0F7B 11            mov a, b
2068   0F7C FA FF FF      lea d, [bp + -1] ; $p
2069   0F7F 2A            mov b, [d]
2070   0F80 74            mov d, b
2071   0F81 2A            mov b, [d]
2072   0F82 FD AB         swp b
2073   0F84 D8            push b
2074   0F85 FA FB FF      lea d, [bp + -5] ; $sp
2075   0F88 2A            mov b, [d]
2076   0F89 FD AB         swp b
2077   0F8B D8            push b
2078   0F8C 07 82 18      call sprint_unsigned
2079   0F8F 51 04 00      add sp, 4
2080   0F92 56            add b, a
2081   0F93 E4            pop a
2082   0F94             ; --- END TERMS
2083   0F94 E7            pop d
2084   0F95 FD 43         mov [d], b
2085   0F97             ; p = p + 2; 
2086   0F97 FA FF FF      lea d, [bp + -1] ; $p
2087   0F9A DA            push d
2088   0F9B FA FF FF      lea d, [bp + -1] ; $p
2089   0F9E 2A            mov b, [d]
2090   0F9F             ; --- START TERMS
2091   0F9F D7            push a
2092   0FA0 11            mov a, b
2093   0FA1 26 02 00      mov b, $2
2094   0FA4 56            add b, a
2095   0FA5 E4            pop a
2096   0FA6             ; --- END TERMS
2097   0FA6 E7            pop d
2098   0FA7 FD 43         mov [d], b
2099   0FA9             ; break; 
2100   0FA9 0A 5B 10      jmp _switch30_exit ; case break
2101   0FAC             _switch30_case5:
2102   0FAC             
2103   0FAC             ; --- BEGIN INLINE ASM SEGMENT
2104   0FAC FA FF FF      lea d, [bp + -1] ; $p
2105   0FAF FD 2A         mov d, [d]
2106   0FB1 2A            mov b, [d]
2107   0FB2 07 51 1F      call print_u16x
2108   0FB5             ; --- END INLINE ASM SEGMENT
2109   0FB5             
2110   0FB5             ; p = p + 2; 
2111   0FB5 FA FF FF      lea d, [bp + -1] ; $p
2112   0FB8 DA            push d
2113   0FB9 FA FF FF      lea d, [bp + -1] ; $p
2114   0FBC 2A            mov b, [d]
2115   0FBD             ; --- START TERMS
2116   0FBD D7            push a
2117   0FBE 11            mov a, b
2118   0FBF 26 02 00      mov b, $2
2119   0FC2 56            add b, a
2120   0FC3 E4            pop a
2121   0FC4             ; --- END TERMS
2122   0FC4 E7            pop d
2123   0FC5 FD 43         mov [d], b
2124   0FC7             ; break; 
2125   0FC7 0A 5B 10      jmp _switch30_exit ; case break
2126   0FCA             _switch30_case6:
2127   0FCA             ; *sp++ = *(char *)p; 
2128   0FCA FA FB FF      lea d, [bp + -5] ; $sp
2129   0FCD 2A            mov b, [d]
2130   0FCE FD 77         inc b
2131   0FD0 FA FB FF      lea d, [bp + -5] ; $sp
2132   0FD3 FD 43         mov [d], b
2133   0FD5 FD 7D         dec b
2134   0FD7 D8            push b
2135   0FD8 FA FF FF      lea d, [bp + -1] ; $p
2136   0FDB 2A            mov b, [d]
2137   0FDC 74            mov d, b
2138   0FDD 32            mov bl, [d]
2139   0FDE A7 00         mov bh, 0
2140   0FE0 E7            pop d
2141   0FE1 FD 3E         mov [d], bl
2142   0FE3             ; p = p + 1; 
2143   0FE3 FA FF FF      lea d, [bp + -1] ; $p
2144   0FE6 DA            push d
2145   0FE7 FA FF FF      lea d, [bp + -1] ; $p
2146   0FEA 2A            mov b, [d]
2147   0FEB             ; --- START TERMS
2148   0FEB D7            push a
2149   0FEC 11            mov a, b
2150   0FED 26 01 00      mov b, $1
2151   0FF0 56            add b, a
2152   0FF1 E4            pop a
2153   0FF2             ; --- END TERMS
2154   0FF2 E7            pop d
2155   0FF3 FD 43         mov [d], b
2156   0FF5             ; break; 
2157   0FF5 0A 5B 10      jmp _switch30_exit ; case break
2158   0FF8             _switch30_case7:
2159   0FF8             ; int len = strlen(*(char **)p); 
2160   0FF8 52 02 00      sub sp, 2
2161   0FFB             ; --- START LOCAL VAR INITIALIZATION
2162   0FFB FA F9 FF      lea d, [bp + -7] ; $len
2163   0FFE DA            push d
2164   0FFF FA FF FF      lea d, [bp + -1] ; $p
2165   1002 2A            mov b, [d]
2166   1003 74            mov d, b
2167   1004 2A            mov b, [d]
2168   1005 FD AB         swp b
2169   1007 D8            push b
2170   1008 07 59 06      call strlen
2171   100B 51 02 00      add sp, 2
2172   100E E7            pop d
2173   100F FD 43         mov [d], b
2174   1011             ; --- END LOCAL VAR INITIALIZATION
2175   1011             ; strcpy(sp, *(char **)p); 
2176   1011 FA FF FF      lea d, [bp + -1] ; $p
2177   1014 2A            mov b, [d]
2178   1015 74            mov d, b
2179   1016 2A            mov b, [d]
2180   1017 FD AB         swp b
2181   1019 D8            push b
2182   101A FA FB FF      lea d, [bp + -5] ; $sp
2183   101D 2A            mov b, [d]
2184   101E FD AB         swp b
2185   1020 D8            push b
2186   1021 07 DF 04      call strcpy
2187   1024 51 04 00      add sp, 4
2188   1027             ; sp = sp + len; 
2189   1027 FA FB FF      lea d, [bp + -5] ; $sp
2190   102A DA            push d
2191   102B FA FB FF      lea d, [bp + -5] ; $sp
2192   102E 2A            mov b, [d]
2193   102F             ; --- START TERMS
2194   102F D7            push a
2195   1030 11            mov a, b
2196   1031 FA F9 FF      lea d, [bp + -7] ; $len
2197   1034 2A            mov b, [d]
2198   1035 56            add b, a
2199   1036 E4            pop a
2200   1037             ; --- END TERMS
2201   1037 E7            pop d
2202   1038 FD 43         mov [d], b
2203   103A             ; p = p + 2; 
2204   103A FA FF FF      lea d, [bp + -1] ; $p
2205   103D DA            push d
2206   103E FA FF FF      lea d, [bp + -1] ; $p
2207   1041 2A            mov b, [d]
2208   1042             ; --- START TERMS
2209   1042 D7            push a
2210   1043 11            mov a, b
2211   1044 26 02 00      mov b, $2
2212   1047 56            add b, a
2213   1048 E4            pop a
2214   1049             ; --- END TERMS
2215   1049 E7            pop d
2216   104A FD 43         mov [d], b
2217   104C             ; break; 
2218   104C 0A 5B 10      jmp _switch30_exit ; case break
2219   104F             _switch30_default:
2220   104F             ; print("Error: Unknown argument type.\n"); 
2221   104F 26 85 25      mov b, _s5 ; "Error: Unknown argument type.\n"
2222   1052 FD AB         swp b
2223   1054 D8            push b
2224   1055 07 00 1C      call print
2225   1058 51 02 00      add sp, 2
2226   105B             _switch30_exit:
2227   105B             ; format_p++; 
2228   105B FA FD FF      lea d, [bp + -3] ; $format_p
2229   105E 2A            mov b, [d]
2230   105F FD 77         inc b
2231   1061 FA FD FF      lea d, [bp + -3] ; $format_p
2232   1064 FD 43         mov [d], b
2233   1066 FD 7D         dec b
2234   1068 0A 8D 10      jmp _if29_exit
2235   106B             _if29_else:
2236   106B             ; *sp++ = *format_p++; 
2237   106B FA FB FF      lea d, [bp + -5] ; $sp
2238   106E 2A            mov b, [d]
2239   106F FD 77         inc b
2240   1071 FA FB FF      lea d, [bp + -5] ; $sp
2241   1074 FD 43         mov [d], b
2242   1076 FD 7D         dec b
2243   1078 D8            push b
2244   1079 FA FD FF      lea d, [bp + -3] ; $format_p
2245   107C 2A            mov b, [d]
2246   107D FD 77         inc b
2247   107F FA FD FF      lea d, [bp + -3] ; $format_p
2248   1082 FD 43         mov [d], b
2249   1084 FD 7D         dec b
2250   1086 74            mov d, b
2251   1087 32            mov bl, [d]
2252   1088 A7 00         mov bh, 0
2253   108A E7            pop d
2254   108B FD 3E         mov [d], bl
2255   108D             _if29_exit:
2256   108D             _if28_exit:
2257   108D             _for27_update:
2258   108D 0A D7 0D      jmp _for27_cond
2259   1090             _for27_exit:
2260   1090             ; *sp = '\0'; 
2261   1090 FA FB FF      lea d, [bp + -5] ; $sp
2262   1093 2A            mov b, [d]
2263   1094 D8            push b
2264   1095 26 00 00      mov b, $0
2265   1098 E7            pop d
2266   1099 FD 3E         mov [d], bl
2267   109B             ; return sp - dest; // return total number of chars written 
2268   109B FA FB FF      lea d, [bp + -5] ; $sp
2269   109E 2A            mov b, [d]
2270   109F             ; --- START TERMS
2271   109F D7            push a
2272   10A0 11            mov a, b
2273   10A1 FA 05 00      lea d, [bp + 5] ; $dest
2274   10A4 2A            mov b, [d]
2275   10A5 60            sub a, b
2276   10A6 27            mov b, a
2277   10A7 E4            pop a
2278   10A8             ; --- END TERMS
2279   10A8 F9            leave
2280   10A9 09            ret
2281   10AA             
2282   10AA             err:
2283   10AA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2284   10AD             ; print(e); 
2285   10AD FA 05 00      lea d, [bp + 5] ; $e
2286   10B0 2A            mov b, [d]
2287   10B1 FD AB         swp b
2288   10B3 D8            push b
2289   10B4 07 00 1C      call print
2290   10B7 51 02 00      add sp, 2
2291   10BA F9            leave
2292   10BB 09            ret
2293   10BC             
2294   10BC             printx32:
2295   10BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2296   10BF             
2297   10BF             ; --- BEGIN INLINE ASM SEGMENT
2298   10BF FA 05 00      lea d, [bp + 5] ; $hex
2299   10C2 2B 02 00      mov b, [d+2]
2300   10C5 07 51 1F      call print_u16x
2301   10C8 2A            mov b, [d]
2302   10C9 07 51 1F      call print_u16x
2303   10CC             ; --- END INLINE ASM SEGMENT
2304   10CC             
2305   10CC F9            leave
2306   10CD 09            ret
2307   10CE             
2308   10CE             printx16:
2309   10CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2310   10D1             
2311   10D1             ; --- BEGIN INLINE ASM SEGMENT
2312   10D1 FA 05 00      lea d, [bp + 5] ; $hex
2313   10D4 2A            mov b, [d]
2314   10D5 07 51 1F      call print_u16x
2315   10D8             ; --- END INLINE ASM SEGMENT
2316   10D8             
2317   10D8 F9            leave
2318   10D9 09            ret
2319   10DA             
2320   10DA             printx8:
2321   10DA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2322   10DD             
2323   10DD             ; --- BEGIN INLINE ASM SEGMENT
2324   10DD FA 05 00      lea d, [bp + 5] ; $hex
2325   10E0 32            mov bl, [d]
2326   10E1 07 95 1F      call print_u8x
2327   10E4             ; --- END INLINE ASM SEGMENT
2328   10E4             
2329   10E4 F9            leave
2330   10E5 09            ret
2331   10E6             
2332   10E6             hex_str_to_int:
2333   10E6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2334   10E9             ; int value = 0; 
2335   10E9 52 02 00      sub sp, 2
2336   10EC             ; --- START LOCAL VAR INITIALIZATION
2337   10EC FA FF FF      lea d, [bp + -1] ; $value
2338   10EF DA            push d
2339   10F0 26 00 00      mov b, $0
2340   10F3 E7            pop d
2341   10F4 FD 43         mov [d], b
2342   10F6             ; --- END LOCAL VAR INITIALIZATION
2343   10F6             ; int i; 
2344   10F6 52 02 00      sub sp, 2
2345   10F9             ; char hex_char; 
2346   10F9 52 01 00      sub sp, 1
2347   10FC             ; int len; 
2348   10FC 52 02 00      sub sp, 2
2349   10FF             ; len = strlen(hex_string); 
2350   10FF FA FA FF      lea d, [bp + -6] ; $len
2351   1102 DA            push d
2352   1103 FA 05 00      lea d, [bp + 5] ; $hex_string
2353   1106 2A            mov b, [d]
2354   1107 FD AB         swp b
2355   1109 D8            push b
2356   110A 07 59 06      call strlen
2357   110D 51 02 00      add sp, 2
2358   1110 E7            pop d
2359   1111 FD 43         mov [d], b
2360   1113             ; for (i = 0; i < len; i++) { 
2361   1113             _for34_init:
2362   1113 FA FD FF      lea d, [bp + -3] ; $i
2363   1116 DA            push d
2364   1117 26 00 00      mov b, $0
2365   111A E7            pop d
2366   111B FD 43         mov [d], b
2367   111D             _for34_cond:
2368   111D FA FD FF      lea d, [bp + -3] ; $i
2369   1120 2A            mov b, [d]
2370   1121             ; --- START RELATIONAL
2371   1121 D7            push a
2372   1122 11            mov a, b
2373   1123 FA FA FF      lea d, [bp + -6] ; $len
2374   1126 2A            mov b, [d]
2375   1127 B0            cmp a, b
2376   1128 FD 73         slt ; < (signed)
2377   112A E4            pop a
2378   112B             ; --- END RELATIONAL
2379   112B C0 00 00      cmp b, 0
2380   112E C6 30 12      je _for34_exit
2381   1131             _for34_block:
2382   1131             ; hex_char = hex_string[i]; 
2383   1131 FA FC FF      lea d, [bp + -4] ; $hex_char
2384   1134 DA            push d
2385   1135 FA 05 00      lea d, [bp + 5] ; $hex_string
2386   1138 FD 2A         mov d, [d]
2387   113A D7            push a
2388   113B DA            push d
2389   113C FA FD FF      lea d, [bp + -3] ; $i
2390   113F 2A            mov b, [d]
2391   1140 E7            pop d
2392   1141 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2393   1145 E4            pop a
2394   1146 32            mov bl, [d]
2395   1147 A7 00         mov bh, 0
2396   1149 E7            pop d
2397   114A FD 3E         mov [d], bl
2398   114C             ; if (hex_char >= 'a' && hex_char <= 'f')  
2399   114C             _if35_cond:
2400   114C FA FC FF      lea d, [bp + -4] ; $hex_char
2401   114F 32            mov bl, [d]
2402   1150 A7 00         mov bh, 0
2403   1152             ; --- START RELATIONAL
2404   1152 D7            push a
2405   1153 11            mov a, b
2406   1154 26 61 00      mov b, $61
2407   1157 B0            cmp a, b
2408   1158 FD 80         sge ; >=
2409   115A E4            pop a
2410   115B             ; --- END RELATIONAL
2411   115B             ; --- START LOGICAL AND
2412   115B D7            push a
2413   115C 11            mov a, b
2414   115D FA FC FF      lea d, [bp + -4] ; $hex_char
2415   1160 32            mov bl, [d]
2416   1161 A7 00         mov bh, 0
2417   1163             ; --- START RELATIONAL
2418   1163 D7            push a
2419   1164 11            mov a, b
2420   1165 26 66 00      mov b, $66
2421   1168 B0            cmp a, b
2422   1169 FD 74         sle ; <= (signed)
2423   116B E4            pop a
2424   116C             ; --- END RELATIONAL
2425   116C FD A7         sand a, b
2426   116E E4            pop a
2427   116F             ; --- END LOGICAL AND
2428   116F C0 00 00      cmp b, 0
2429   1172 C6 A3 11      je _if35_else
2430   1175             _if35_true:
2431   1175             ; value = (value * 16) + (hex_char - 'a' + 10); 
2432   1175 FA FF FF      lea d, [bp + -1] ; $value
2433   1178 DA            push d
2434   1179 FA FF FF      lea d, [bp + -1] ; $value
2435   117C 2A            mov b, [d]
2436   117D             ; --- START FACTORS
2437   117D D7            push a
2438   117E 11            mov a, b
2439   117F 26 10 00      mov b, $10
2440   1182 AC            mul a, b ; *
2441   1183 11            mov a, b
2442   1184 27            mov b, a
2443   1185 E4            pop a
2444   1186             ; --- END FACTORS
2445   1186             ; --- START TERMS
2446   1186 D7            push a
2447   1187 11            mov a, b
2448   1188 FA FC FF      lea d, [bp + -4] ; $hex_char
2449   118B 32            mov bl, [d]
2450   118C A7 00         mov bh, 0
2451   118E             ; --- START TERMS
2452   118E D7            push a
2453   118F 11            mov a, b
2454   1190 26 61 00      mov b, $61
2455   1193 60            sub a, b
2456   1194 27            mov b, a
2457   1195 11            mov a, b
2458   1196 26 0A 00      mov b, $a
2459   1199 56            add b, a
2460   119A E4            pop a
2461   119B             ; --- END TERMS
2462   119B 56            add b, a
2463   119C E4            pop a
2464   119D             ; --- END TERMS
2465   119D E7            pop d
2466   119E FD 43         mov [d], b
2467   11A0 0A 20 12      jmp _if35_exit
2468   11A3             _if35_else:
2469   11A3             ; if (hex_char >= 'A' && hex_char <= 'F')  
2470   11A3             _if36_cond:
2471   11A3 FA FC FF      lea d, [bp + -4] ; $hex_char
2472   11A6 32            mov bl, [d]
2473   11A7 A7 00         mov bh, 0
2474   11A9             ; --- START RELATIONAL
2475   11A9 D7            push a
2476   11AA 11            mov a, b
2477   11AB 26 41 00      mov b, $41
2478   11AE B0            cmp a, b
2479   11AF FD 80         sge ; >=
2480   11B1 E4            pop a
2481   11B2             ; --- END RELATIONAL
2482   11B2             ; --- START LOGICAL AND
2483   11B2 D7            push a
2484   11B3 11            mov a, b
2485   11B4 FA FC FF      lea d, [bp + -4] ; $hex_char
2486   11B7 32            mov bl, [d]
2487   11B8 A7 00         mov bh, 0
2488   11BA             ; --- START RELATIONAL
2489   11BA D7            push a
2490   11BB 11            mov a, b
2491   11BC 26 46 00      mov b, $46
2492   11BF B0            cmp a, b
2493   11C0 FD 74         sle ; <= (signed)
2494   11C2 E4            pop a
2495   11C3             ; --- END RELATIONAL
2496   11C3 FD A7         sand a, b
2497   11C5 E4            pop a
2498   11C6             ; --- END LOGICAL AND
2499   11C6 C0 00 00      cmp b, 0
2500   11C9 C6 FA 11      je _if36_else
2501   11CC             _if36_true:
2502   11CC             ; value = (value * 16) + (hex_char - 'A' + 10); 
2503   11CC FA FF FF      lea d, [bp + -1] ; $value
2504   11CF DA            push d
2505   11D0 FA FF FF      lea d, [bp + -1] ; $value
2506   11D3 2A            mov b, [d]
2507   11D4             ; --- START FACTORS
2508   11D4 D7            push a
2509   11D5 11            mov a, b
2510   11D6 26 10 00      mov b, $10
2511   11D9 AC            mul a, b ; *
2512   11DA 11            mov a, b
2513   11DB 27            mov b, a
2514   11DC E4            pop a
2515   11DD             ; --- END FACTORS
2516   11DD             ; --- START TERMS
2517   11DD D7            push a
2518   11DE 11            mov a, b
2519   11DF FA FC FF      lea d, [bp + -4] ; $hex_char
2520   11E2 32            mov bl, [d]
2521   11E3 A7 00         mov bh, 0
2522   11E5             ; --- START TERMS
2523   11E5 D7            push a
2524   11E6 11            mov a, b
2525   11E7 26 41 00      mov b, $41
2526   11EA 60            sub a, b
2527   11EB 27            mov b, a
2528   11EC 11            mov a, b
2529   11ED 26 0A 00      mov b, $a
2530   11F0 56            add b, a
2531   11F1 E4            pop a
2532   11F2             ; --- END TERMS
2533   11F2 56            add b, a
2534   11F3 E4            pop a
2535   11F4             ; --- END TERMS
2536   11F4 E7            pop d
2537   11F5 FD 43         mov [d], b
2538   11F7 0A 20 12      jmp _if36_exit
2539   11FA             _if36_else:
2540   11FA             ; value = (value * 16) + (hex_char - '0'); 
2541   11FA FA FF FF      lea d, [bp + -1] ; $value
2542   11FD DA            push d
2543   11FE FA FF FF      lea d, [bp + -1] ; $value
2544   1201 2A            mov b, [d]
2545   1202             ; --- START FACTORS
2546   1202 D7            push a
2547   1203 11            mov a, b
2548   1204 26 10 00      mov b, $10
2549   1207 AC            mul a, b ; *
2550   1208 11            mov a, b
2551   1209 27            mov b, a
2552   120A E4            pop a
2553   120B             ; --- END FACTORS
2554   120B             ; --- START TERMS
2555   120B D7            push a
2556   120C 11            mov a, b
2557   120D FA FC FF      lea d, [bp + -4] ; $hex_char
2558   1210 32            mov bl, [d]
2559   1211 A7 00         mov bh, 0
2560   1213             ; --- START TERMS
2561   1213 D7            push a
2562   1214 11            mov a, b
2563   1215 26 30 00      mov b, $30
2564   1218 60            sub a, b
2565   1219 27            mov b, a
2566   121A E4            pop a
2567   121B             ; --- END TERMS
2568   121B 56            add b, a
2569   121C E4            pop a
2570   121D             ; --- END TERMS
2571   121D E7            pop d
2572   121E FD 43         mov [d], b
2573   1220             _if36_exit:
2574   1220             _if35_exit:
2575   1220             _for34_update:
2576   1220 FA FD FF      lea d, [bp + -3] ; $i
2577   1223 2A            mov b, [d]
2578   1224 FD 77         inc b
2579   1226 FA FD FF      lea d, [bp + -3] ; $i
2580   1229 FD 43         mov [d], b
2581   122B FD 7D         dec b
2582   122D 0A 1D 11      jmp _for34_cond
2583   1230             _for34_exit:
2584   1230             ; return value; 
2585   1230 FA FF FF      lea d, [bp + -1] ; $value
2586   1233 2A            mov b, [d]
2587   1234 F9            leave
2588   1235 09            ret
2589   1236             
2590   1236             gets:
2591   1236 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2592   1239             
2593   1239             ; --- BEGIN INLINE ASM SEGMENT
2594   1239 FA 05 00      lea d, [bp + 5] ; $s
2595   123C 15            mov a, [d]
2596   123D 3C            mov d, a
2597   123E 07 B6 1D      call _gets
2598   1241             ; --- END INLINE ASM SEGMENT
2599   1241             
2600   1241             ; return strlen(s); 
2601   1241 FA 05 00      lea d, [bp + 5] ; $s
2602   1244 2A            mov b, [d]
2603   1245 FD AB         swp b
2604   1247 D8            push b
2605   1248 07 59 06      call strlen
2606   124B 51 02 00      add sp, 2
2607   124E F9            leave
2608   124F 09            ret
2609   1250             
2610   1250             print_signed:
2611   1250 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2612   1253             ; char digits[5]; 
2613   1253 52 05 00      sub sp, 5
2614   1256             ; int i = 0; 
2615   1256 52 02 00      sub sp, 2
2616   1259             ; --- START LOCAL VAR INITIALIZATION
2617   1259 FA FA FF      lea d, [bp + -6] ; $i
2618   125C DA            push d
2619   125D 26 00 00      mov b, $0
2620   1260 E7            pop d
2621   1261 FD 43         mov [d], b
2622   1263             ; --- END LOCAL VAR INITIALIZATION
2623   1263             ; if (num < 0) { 
2624   1263             _if37_cond:
2625   1263 FA 05 00      lea d, [bp + 5] ; $num
2626   1266 2A            mov b, [d]
2627   1267             ; --- START RELATIONAL
2628   1267 D7            push a
2629   1268 11            mov a, b
2630   1269 26 00 00      mov b, $0
2631   126C B0            cmp a, b
2632   126D FD 73         slt ; < (signed)
2633   126F E4            pop a
2634   1270             ; --- END RELATIONAL
2635   1270 C0 00 00      cmp b, 0
2636   1273 C6 90 12      je _if37_else
2637   1276             _if37_true:
2638   1276             ; putchar('-'); 
2639   1276 26 2D 00      mov b, $2d
2640   1279 DD            push bl
2641   127A 07 B8 1B      call putchar
2642   127D 51 01 00      add sp, 1
2643   1280             ; num = -num; 
2644   1280 FA 05 00      lea d, [bp + 5] ; $num
2645   1283 DA            push d
2646   1284 FA 05 00      lea d, [bp + 5] ; $num
2647   1287 2A            mov b, [d]
2648   1288 FD 97         neg b
2649   128A E7            pop d
2650   128B FD 43         mov [d], b
2651   128D 0A B2 12      jmp _if37_exit
2652   1290             _if37_else:
2653   1290             ; if (num == 0) { 
2654   1290             _if38_cond:
2655   1290 FA 05 00      lea d, [bp + 5] ; $num
2656   1293 2A            mov b, [d]
2657   1294             ; --- START RELATIONAL
2658   1294 D7            push a
2659   1295 11            mov a, b
2660   1296 26 00 00      mov b, $0
2661   1299 B0            cmp a, b
2662   129A FD 71         seq ; ==
2663   129C E4            pop a
2664   129D             ; --- END RELATIONAL
2665   129D C0 00 00      cmp b, 0
2666   12A0 C6 B2 12      je _if38_exit
2667   12A3             _if38_true:
2668   12A3             ; putchar('0'); 
2669   12A3 26 30 00      mov b, $30
2670   12A6 DD            push bl
2671   12A7 07 B8 1B      call putchar
2672   12AA 51 01 00      add sp, 1
2673   12AD             ; return; 
2674   12AD F9            leave
2675   12AE 09            ret
2676   12AF 0A B2 12      jmp _if38_exit
2677   12B2             _if38_exit:
2678   12B2             _if37_exit:
2679   12B2             ; while (num > 0) { 
2680   12B2             _while39_cond:
2681   12B2 FA 05 00      lea d, [bp + 5] ; $num
2682   12B5 2A            mov b, [d]
2683   12B6             ; --- START RELATIONAL
2684   12B6 D7            push a
2685   12B7 11            mov a, b
2686   12B8 26 00 00      mov b, $0
2687   12BB B0            cmp a, b
2688   12BC FD 7F         sgt ; >
2689   12BE E4            pop a
2690   12BF             ; --- END RELATIONAL
2691   12BF C0 00 00      cmp b, 0
2692   12C2 C6 0C 13      je _while39_exit
2693   12C5             _while39_block:
2694   12C5             ; digits[i] = '0' + (num % 10); 
2695   12C5 FA FC FF      lea d, [bp + -4] ; $digits
2696   12C8 D7            push a
2697   12C9 DA            push d
2698   12CA FA FA FF      lea d, [bp + -6] ; $i
2699   12CD 2A            mov b, [d]
2700   12CE E7            pop d
2701   12CF 5A            add d, b
2702   12D0 E4            pop a
2703   12D1 DA            push d
2704   12D2 26 30 00      mov b, $30
2705   12D5             ; --- START TERMS
2706   12D5 D7            push a
2707   12D6 11            mov a, b
2708   12D7 FA 05 00      lea d, [bp + 5] ; $num
2709   12DA 2A            mov b, [d]
2710   12DB             ; --- START FACTORS
2711   12DB D7            push a
2712   12DC 11            mov a, b
2713   12DD 26 0A 00      mov b, $a
2714   12E0 AE            div a, b ; 
2715   12E1 11            mov a, b
2716   12E2 27            mov b, a
2717   12E3 E4            pop a
2718   12E4             ; --- END FACTORS
2719   12E4 56            add b, a
2720   12E5 E4            pop a
2721   12E6             ; --- END TERMS
2722   12E6 E7            pop d
2723   12E7 FD 3E         mov [d], bl
2724   12E9             ; num = num / 10; 
2725   12E9 FA 05 00      lea d, [bp + 5] ; $num
2726   12EC DA            push d
2727   12ED FA 05 00      lea d, [bp + 5] ; $num
2728   12F0 2A            mov b, [d]
2729   12F1             ; --- START FACTORS
2730   12F1 D7            push a
2731   12F2 11            mov a, b
2732   12F3 26 0A 00      mov b, $a
2733   12F6 AE            div a, b
2734   12F7 27            mov b, a
2735   12F8 E4            pop a
2736   12F9             ; --- END FACTORS
2737   12F9 E7            pop d
2738   12FA FD 43         mov [d], b
2739   12FC             ; i++; 
2740   12FC FA FA FF      lea d, [bp + -6] ; $i
2741   12FF 2A            mov b, [d]
2742   1300 FD 77         inc b
2743   1302 FA FA FF      lea d, [bp + -6] ; $i
2744   1305 FD 43         mov [d], b
2745   1307 FD 7D         dec b
2746   1309 0A B2 12      jmp _while39_cond
2747   130C             _while39_exit:
2748   130C             ; while (i > 0) { 
2749   130C             _while40_cond:
2750   130C FA FA FF      lea d, [bp + -6] ; $i
2751   130F 2A            mov b, [d]
2752   1310             ; --- START RELATIONAL
2753   1310 D7            push a
2754   1311 11            mov a, b
2755   1312 26 00 00      mov b, $0
2756   1315 B0            cmp a, b
2757   1316 FD 7F         sgt ; >
2758   1318 E4            pop a
2759   1319             ; --- END RELATIONAL
2760   1319 C0 00 00      cmp b, 0
2761   131C C6 45 13      je _while40_exit
2762   131F             _while40_block:
2763   131F             ; i--; 
2764   131F FA FA FF      lea d, [bp + -6] ; $i
2765   1322 2A            mov b, [d]
2766   1323 FD 7D         dec b
2767   1325 FA FA FF      lea d, [bp + -6] ; $i
2768   1328 FD 43         mov [d], b
2769   132A FD 77         inc b
2770   132C             ; putchar(digits[i]); 
2771   132C FA FC FF      lea d, [bp + -4] ; $digits
2772   132F D7            push a
2773   1330 DA            push d
2774   1331 FA FA FF      lea d, [bp + -6] ; $i
2775   1334 2A            mov b, [d]
2776   1335 E7            pop d
2777   1336 5A            add d, b
2778   1337 E4            pop a
2779   1338 32            mov bl, [d]
2780   1339 A7 00         mov bh, 0
2781   133B DD            push bl
2782   133C 07 B8 1B      call putchar
2783   133F 51 01 00      add sp, 1
2784   1342 0A 0C 13      jmp _while40_cond
2785   1345             _while40_exit:
2786   1345 F9            leave
2787   1346 09            ret
2788   1347             
2789   1347             print_signed_long:
2790   1347 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2791   134A             ; char digits[10]; 
2792   134A 52 0A 00      sub sp, 10
2793   134D             ; int i = 0; 
2794   134D 52 02 00      sub sp, 2
2795   1350             ; --- START LOCAL VAR INITIALIZATION
2796   1350 FA F5 FF      lea d, [bp + -11] ; $i
2797   1353 DA            push d
2798   1354 26 00 00      mov b, $0
2799   1357 E7            pop d
2800   1358 FD 43         mov [d], b
2801   135A             ; --- END LOCAL VAR INITIALIZATION
2802   135A             ; if (num < 0) { 
2803   135A             _if41_cond:
2804   135A FA 05 00      lea d, [bp + 5] ; $num
2805   135D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2806   1360 FD 39         mov c, b ; And place it into C
2807   1362 2A            mov b, [d] ; Lower Word in B
2808   1363             ; --- START RELATIONAL
2809   1363 D7            push a
2810   1364 FD D8         push g
2811   1366 11            mov a, b
2812   1367 FD 7A         mov g, c
2813   1369 26 00 00      mov b, $0
2814   136C 38 00 00      mov c, 0
2815   136F FD AF 00 00   cmp32 ga, cb
2815   1373 00 00 00 00 
2815   1377 00 00 00 00 
2815   137B 00 00 00 00 
2815   137F 00 00 00 00 
2815   1383 00 00 00 00 
2815   1387 00 00 00 00 
2815   138B 00 00 00 00 
2815   138F 00 00 00 00 
2815   1393 00 00 00 00 
2815   1397 00 00 00 00 
2815   139B 00 00 00 00 
2815   139F 00 00 00 00 
2815   13A3 00 00 00 00 
2815   13A7 00 00 00 00 
2815   13AB 00 00 00 00 
2815   13AF 00 00 00 00 
2815   13B3 00 00 00 00 
2815   13B7 00 00 00 00 
2815   13BB 00 00 00 00 
2815   13BF 00 00 00 00 
2815   13C3 00 00 00 00 
2815   13C7 00 00 00 00 
2815   13CB 00 00 00 00 
2815   13CF 00 00 00 00 
2815   13D3 00 00 00 00 
2815   13D7 00 00 00 00 
2815   13DB 00 00 00 00 
2815   13DF 00 00 00 00 
2815   13E3 00 00 00 00 
2815   13E7 00 00 00 00 
2815   13EB 00 00 00 00 
2815   13EF 00 00 00 00 
2815   13F3 00 00 00 00 
2815   13F7 00 00 00 00 
2815   13FB 00 00 00 00 
2815   13FF 00 00 00 00 
2815   1403 00 00 00 00 
2815   1407 00 00 00 00 
2815   140B 00 00 00 00 
2815   140F 00 00 00 00 
2815   1413 00 00 00 00 
2815   1417 00 00 00 00 
2815   141B 00 00 00 00 
2815   141F 00 00 00 00 
2815   1423 00 00 00 00 
2815   1427 00 00 00 00 
2815   142B 00 00 00 00 
2815   142F 00 00 00 00 
2815   1433 00 00 00 00 
2815   1437 00 00 00 00 
2815   143B 00 00 00 00 
2815   143F 00 00 00 00 
2815   1443 00 00 00 00 
2815   1447 00 00 00 00 
2815   144B 00 00 00 00 
2815   144F 00 00 00 00 
2815   1453 00 00 00 00 
2815   1457 00 00 00 00 
2815   145B 00 00 00 00 
2815   145F 00 00 00 00 
2815   1463 00 00 00 00 
2815   1467 00 00 00 00 
2815   146B 00 00 00 00 
2815   146F 00 
2816   1470 FD 73         slt ; <
2817   1472 FD F1         pop g
2818   1474 E4            pop a
2819   1475             ; --- END RELATIONAL
2820   1475 C0 00 00      cmp b, 0
2821   1478 C6 9F 14      je _if41_else
2822   147B             _if41_true:
2823   147B             ; putchar('-'); 
2824   147B 26 2D 00      mov b, $2d
2825   147E DD            push bl
2826   147F 07 B8 1B      call putchar
2827   1482 51 01 00      add sp, 1
2828   1485             ; num = -num; 
2829   1485 FA 05 00      lea d, [bp + 5] ; $num
2830   1488 DA            push d
2831   1489 FA 05 00      lea d, [bp + 5] ; $num
2832   148C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2833   148F FD 39         mov c, b ; And place it into C
2834   1491 2A            mov b, [d] ; Lower Word in B
2835   1492 FD 97         neg b
2836   1494 E7            pop d
2837   1495 FD 43         mov [d], b
2838   1497 28            mov b, c
2839   1498 FD 44 02 00   mov [d + 2], b
2840   149C 0A CF 15      jmp _if41_exit
2841   149F             _if41_else:
2842   149F             ; if (num == 0) { 
2843   149F             _if42_cond:
2844   149F FA 05 00      lea d, [bp + 5] ; $num
2845   14A2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2846   14A5 FD 39         mov c, b ; And place it into C
2847   14A7 2A            mov b, [d] ; Lower Word in B
2848   14A8             ; --- START RELATIONAL
2849   14A8 D7            push a
2850   14A9 FD D8         push g
2851   14AB 11            mov a, b
2852   14AC FD 7A         mov g, c
2853   14AE 26 00 00      mov b, $0
2854   14B1 38 00 00      mov c, 0
2855   14B4 FD AF 00 00   cmp32 ga, cb
2855   14B8 00 00 00 00 
2855   14BC 00 00 00 00 
2855   14C0 00 00 00 00 
2855   14C4 00 00 00 00 
2855   14C8 00 00 00 00 
2855   14CC 00 00 00 00 
2855   14D0 00 00 00 00 
2855   14D4 00 00 00 00 
2855   14D8 00 00 00 00 
2855   14DC 00 00 00 00 
2855   14E0 00 00 00 00 
2855   14E4 00 00 00 00 
2855   14E8 00 00 00 00 
2855   14EC 00 00 00 00 
2855   14F0 00 00 00 00 
2855   14F4 00 00 00 00 
2855   14F8 00 00 00 00 
2855   14FC 00 00 00 00 
2855   1500 00 00 00 00 
2855   1504 00 00 00 00 
2855   1508 00 00 00 00 
2855   150C 00 00 00 00 
2855   1510 00 00 00 00 
2855   1514 00 00 00 00 
2855   1518 00 00 00 00 
2855   151C 00 00 00 00 
2855   1520 00 00 00 00 
2855   1524 00 00 00 00 
2855   1528 00 00 00 00 
2855   152C 00 00 00 00 
2855   1530 00 00 00 00 
2855   1534 00 00 00 00 
2855   1538 00 00 00 00 
2855   153C 00 00 00 00 
2855   1540 00 00 00 00 
2855   1544 00 00 00 00 
2855   1548 00 00 00 00 
2855   154C 00 00 00 00 
2855   1550 00 00 00 00 
2855   1554 00 00 00 00 
2855   1558 00 00 00 00 
2855   155C 00 00 00 00 
2855   1560 00 00 00 00 
2855   1564 00 00 00 00 
2855   1568 00 00 00 00 
2855   156C 00 00 00 00 
2855   1570 00 00 00 00 
2855   1574 00 00 00 00 
2855   1578 00 00 00 00 
2855   157C 00 00 00 00 
2855   1580 00 00 00 00 
2855   1584 00 00 00 00 
2855   1588 00 00 00 00 
2855   158C 00 00 00 00 
2855   1590 00 00 00 00 
2855   1594 00 00 00 00 
2855   1598 00 00 00 00 
2855   159C 00 00 00 00 
2855   15A0 00 00 00 00 
2855   15A4 00 00 00 00 
2855   15A8 00 00 00 00 
2855   15AC 00 00 00 00 
2855   15B0 00 00 00 00 
2855   15B4 00 
2856   15B5 FD 71         seq ; ==
2857   15B7 FD F1         pop g
2858   15B9 E4            pop a
2859   15BA             ; --- END RELATIONAL
2860   15BA C0 00 00      cmp b, 0
2861   15BD C6 CF 15      je _if42_exit
2862   15C0             _if42_true:
2863   15C0             ; putchar('0'); 
2864   15C0 26 30 00      mov b, $30
2865   15C3 DD            push bl
2866   15C4 07 B8 1B      call putchar
2867   15C7 51 01 00      add sp, 1
2868   15CA             ; return; 
2869   15CA F9            leave
2870   15CB 09            ret
2871   15CC 0A CF 15      jmp _if42_exit
2872   15CF             _if42_exit:
2873   15CF             _if41_exit:
2874   15CF             ; while (num > 0) { 
2875   15CF             _while43_cond:
2876   15CF FA 05 00      lea d, [bp + 5] ; $num
2877   15D2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2878   15D5 FD 39         mov c, b ; And place it into C
2879   15D7 2A            mov b, [d] ; Lower Word in B
2880   15D8             ; --- START RELATIONAL
2881   15D8 D7            push a
2882   15D9 FD D8         push g
2883   15DB 11            mov a, b
2884   15DC FD 7A         mov g, c
2885   15DE 26 00 00      mov b, $0
2886   15E1 38 00 00      mov c, 0
2887   15E4 FD 7F         sgt
2888   15E6 FD F1         pop g
2889   15E8 E4            pop a
2890   15E9             ; --- END RELATIONAL
2891   15E9 C0 00 00      cmp b, 0
2892   15EC C6 4C 16      je _while43_exit
2893   15EF             _while43_block:
2894   15EF             ; digits[i] = '0' + (num % 10); 
2895   15EF FA F7 FF      lea d, [bp + -9] ; $digits
2896   15F2 D7            push a
2897   15F3 DA            push d
2898   15F4 FA F5 FF      lea d, [bp + -11] ; $i
2899   15F7 2A            mov b, [d]
2900   15F8 E7            pop d
2901   15F9 5A            add d, b
2902   15FA E4            pop a
2903   15FB DA            push d
2904   15FC 26 30 00      mov b, $30
2905   15FF             ; --- START TERMS
2906   15FF D7            push a
2907   1600 11            mov a, b
2908   1601 FA 05 00      lea d, [bp + 5] ; $num
2909   1604 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2910   1607 FD 39         mov c, b ; And place it into C
2911   1609 2A            mov b, [d] ; Lower Word in B
2912   160A             ; --- START FACTORS
2913   160A D7            push a
2914   160B 11            mov a, b
2915   160C 26 0A 00      mov b, $a
2916   160F AE            div a, b ; 
2917   1610 11            mov a, b
2918   1611 27            mov b, a
2919   1612 E4            pop a
2920   1613             ; --- END FACTORS
2921   1613 54            add a, b
2922   1614 D7            push a
2923   1615 FD 12         mov a, g
2924   1617 28            mov b, c
2925   1618 5C            adc a, b
2926   1619 39            mov c, a
2927   161A E5            pop b
2928   161B E4            pop a
2929   161C             ; --- END TERMS
2930   161C E7            pop d
2931   161D FD 3E         mov [d], bl
2932   161F             ; num = num / 10; 
2933   161F FA 05 00      lea d, [bp + 5] ; $num
2934   1622 DA            push d
2935   1623 FA 05 00      lea d, [bp + 5] ; $num
2936   1626 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2937   1629 FD 39         mov c, b ; And place it into C
2938   162B 2A            mov b, [d] ; Lower Word in B
2939   162C             ; --- START FACTORS
2940   162C D7            push a
2941   162D 11            mov a, b
2942   162E 26 0A 00      mov b, $a
2943   1631 AE            div a, b
2944   1632 27            mov b, a
2945   1633 E4            pop a
2946   1634             ; --- END FACTORS
2947   1634 E7            pop d
2948   1635 FD 43         mov [d], b
2949   1637 28            mov b, c
2950   1638 FD 44 02 00   mov [d + 2], b
2951   163C             ; i++; 
2952   163C FA F5 FF      lea d, [bp + -11] ; $i
2953   163F 2A            mov b, [d]
2954   1640 FD 77         inc b
2955   1642 FA F5 FF      lea d, [bp + -11] ; $i
2956   1645 FD 43         mov [d], b
2957   1647 FD 7D         dec b
2958   1649 0A CF 15      jmp _while43_cond
2959   164C             _while43_exit:
2960   164C             ; while (i > 0) { 
2961   164C             _while44_cond:
2962   164C FA F5 FF      lea d, [bp + -11] ; $i
2963   164F 2A            mov b, [d]
2964   1650             ; --- START RELATIONAL
2965   1650 D7            push a
2966   1651 11            mov a, b
2967   1652 26 00 00      mov b, $0
2968   1655 B0            cmp a, b
2969   1656 FD 7F         sgt ; >
2970   1658 E4            pop a
2971   1659             ; --- END RELATIONAL
2972   1659 C0 00 00      cmp b, 0
2973   165C C6 85 16      je _while44_exit
2974   165F             _while44_block:
2975   165F             ; i--; 
2976   165F FA F5 FF      lea d, [bp + -11] ; $i
2977   1662 2A            mov b, [d]
2978   1663 FD 7D         dec b
2979   1665 FA F5 FF      lea d, [bp + -11] ; $i
2980   1668 FD 43         mov [d], b
2981   166A FD 77         inc b
2982   166C             ; putchar(digits[i]); 
2983   166C FA F7 FF      lea d, [bp + -9] ; $digits
2984   166F D7            push a
2985   1670 DA            push d
2986   1671 FA F5 FF      lea d, [bp + -11] ; $i
2987   1674 2A            mov b, [d]
2988   1675 E7            pop d
2989   1676 5A            add d, b
2990   1677 E4            pop a
2991   1678 32            mov bl, [d]
2992   1679 A7 00         mov bh, 0
2993   167B DD            push bl
2994   167C 07 B8 1B      call putchar
2995   167F 51 01 00      add sp, 1
2996   1682 0A 4C 16      jmp _while44_cond
2997   1685             _while44_exit:
2998   1685 F9            leave
2999   1686 09            ret
3000   1687             
3001   1687             print_unsigned_long:
3002   1687 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3003   168A             ; char digits[10]; 
3004   168A 52 0A 00      sub sp, 10
3005   168D             ; int i; 
3006   168D 52 02 00      sub sp, 2
3007   1690             ; i = 0; 
3008   1690 FA F5 FF      lea d, [bp + -11] ; $i
3009   1693 DA            push d
3010   1694 26 00 00      mov b, $0
3011   1697 E7            pop d
3012   1698 FD 43         mov [d], b
3013   169A             ; if(num == 0){ 
3014   169A             _if45_cond:
3015   169A FA 05 00      lea d, [bp + 5] ; $num
3016   169D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3017   16A0 FD 39         mov c, b ; And place it into C
3018   16A2 2A            mov b, [d] ; Lower Word in B
3019   16A3             ; --- START RELATIONAL
3020   16A3 D7            push a
3021   16A4 FD D8         push g
3022   16A6 11            mov a, b
3023   16A7 FD 7A         mov g, c
3024   16A9 26 00 00      mov b, $0
3025   16AC 38 00 00      mov c, 0
3026   16AF FD AF 00 00   cmp32 ga, cb
3026   16B3 00 00 00 00 
3026   16B7 00 00 00 00 
3026   16BB 00 00 00 00 
3026   16BF 00 00 00 00 
3026   16C3 00 00 00 00 
3026   16C7 00 00 00 00 
3026   16CB 00 00 00 00 
3026   16CF 00 00 00 00 
3026   16D3 00 00 00 00 
3026   16D7 00 00 00 00 
3026   16DB 00 00 00 00 
3026   16DF 00 00 00 00 
3026   16E3 00 00 00 00 
3026   16E7 00 00 00 00 
3026   16EB 00 00 00 00 
3026   16EF 00 00 00 00 
3026   16F3 00 00 00 00 
3026   16F7 00 00 00 00 
3026   16FB 00 00 00 00 
3026   16FF 00 00 00 00 
3026   1703 00 00 00 00 
3026   1707 00 00 00 00 
3026   170B 00 00 00 00 
3026   170F 00 00 00 00 
3026   1713 00 00 00 00 
3026   1717 00 00 00 00 
3026   171B 00 00 00 00 
3026   171F 00 00 00 00 
3026   1723 00 00 00 00 
3026   1727 00 00 00 00 
3026   172B 00 00 00 00 
3026   172F 00 00 00 00 
3026   1733 00 00 00 00 
3026   1737 00 00 00 00 
3026   173B 00 00 00 00 
3026   173F 00 00 00 00 
3026   1743 00 00 00 00 
3026   1747 00 00 00 00 
3026   174B 00 00 00 00 
3026   174F 00 00 00 00 
3026   1753 00 00 00 00 
3026   1757 00 00 00 00 
3026   175B 00 00 00 00 
3026   175F 00 00 00 00 
3026   1763 00 00 00 00 
3026   1767 00 00 00 00 
3026   176B 00 00 00 00 
3026   176F 00 00 00 00 
3026   1773 00 00 00 00 
3026   1777 00 00 00 00 
3026   177B 00 00 00 00 
3026   177F 00 00 00 00 
3026   1783 00 00 00 00 
3026   1787 00 00 00 00 
3026   178B 00 00 00 00 
3026   178F 00 00 00 00 
3026   1793 00 00 00 00 
3026   1797 00 00 00 00 
3026   179B 00 00 00 00 
3026   179F 00 00 00 00 
3026   17A3 00 00 00 00 
3026   17A7 00 00 00 00 
3026   17AB 00 00 00 00 
3026   17AF 00 
3027   17B0 FD 71         seq ; ==
3028   17B2 FD F1         pop g
3029   17B4 E4            pop a
3030   17B5             ; --- END RELATIONAL
3031   17B5 C0 00 00      cmp b, 0
3032   17B8 C6 CA 17      je _if45_exit
3033   17BB             _if45_true:
3034   17BB             ; putchar('0'); 
3035   17BB 26 30 00      mov b, $30
3036   17BE DD            push bl
3037   17BF 07 B8 1B      call putchar
3038   17C2 51 01 00      add sp, 1
3039   17C5             ; return; 
3040   17C5 F9            leave
3041   17C6 09            ret
3042   17C7 0A CA 17      jmp _if45_exit
3043   17CA             _if45_exit:
3044   17CA             ; while (num > 0) { 
3045   17CA             _while46_cond:
3046   17CA FA 05 00      lea d, [bp + 5] ; $num
3047   17CD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3048   17D0 FD 39         mov c, b ; And place it into C
3049   17D2 2A            mov b, [d] ; Lower Word in B
3050   17D3             ; --- START RELATIONAL
3051   17D3 D7            push a
3052   17D4 FD D8         push g
3053   17D6 11            mov a, b
3054   17D7 FD 7A         mov g, c
3055   17D9 26 00 00      mov b, $0
3056   17DC 38 00 00      mov c, 0
3057   17DF FD 81         sgu
3058   17E1 FD F1         pop g
3059   17E3 E4            pop a
3060   17E4             ; --- END RELATIONAL
3061   17E4 C0 00 00      cmp b, 0
3062   17E7 C6 47 18      je _while46_exit
3063   17EA             _while46_block:
3064   17EA             ; digits[i] = '0' + (num % 10); 
3065   17EA FA F7 FF      lea d, [bp + -9] ; $digits
3066   17ED D7            push a
3067   17EE DA            push d
3068   17EF FA F5 FF      lea d, [bp + -11] ; $i
3069   17F2 2A            mov b, [d]
3070   17F3 E7            pop d
3071   17F4 5A            add d, b
3072   17F5 E4            pop a
3073   17F6 DA            push d
3074   17F7 26 30 00      mov b, $30
3075   17FA             ; --- START TERMS
3076   17FA D7            push a
3077   17FB 11            mov a, b
3078   17FC FA 05 00      lea d, [bp + 5] ; $num
3079   17FF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3080   1802 FD 39         mov c, b ; And place it into C
3081   1804 2A            mov b, [d] ; Lower Word in B
3082   1805             ; --- START FACTORS
3083   1805 D7            push a
3084   1806 11            mov a, b
3085   1807 26 0A 00      mov b, $a
3086   180A AE            div a, b ; 
3087   180B 11            mov a, b
3088   180C 27            mov b, a
3089   180D E4            pop a
3090   180E             ; --- END FACTORS
3091   180E 54            add a, b
3092   180F D7            push a
3093   1810 FD 12         mov a, g
3094   1812 28            mov b, c
3095   1813 5C            adc a, b
3096   1814 39            mov c, a
3097   1815 E5            pop b
3098   1816 E4            pop a
3099   1817             ; --- END TERMS
3100   1817 E7            pop d
3101   1818 FD 3E         mov [d], bl
3102   181A             ; num = num / 10; 
3103   181A FA 05 00      lea d, [bp + 5] ; $num
3104   181D DA            push d
3105   181E FA 05 00      lea d, [bp + 5] ; $num
3106   1821 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3107   1824 FD 39         mov c, b ; And place it into C
3108   1826 2A            mov b, [d] ; Lower Word in B
3109   1827             ; --- START FACTORS
3110   1827 D7            push a
3111   1828 11            mov a, b
3112   1829 26 0A 00      mov b, $a
3113   182C AE            div a, b
3114   182D 27            mov b, a
3115   182E E4            pop a
3116   182F             ; --- END FACTORS
3117   182F E7            pop d
3118   1830 FD 43         mov [d], b
3119   1832 28            mov b, c
3120   1833 FD 44 02 00   mov [d + 2], b
3121   1837             ; i++; 
3122   1837 FA F5 FF      lea d, [bp + -11] ; $i
3123   183A 2A            mov b, [d]
3124   183B FD 77         inc b
3125   183D FA F5 FF      lea d, [bp + -11] ; $i
3126   1840 FD 43         mov [d], b
3127   1842 FD 7D         dec b
3128   1844 0A CA 17      jmp _while46_cond
3129   1847             _while46_exit:
3130   1847             ; while (i > 0) { 
3131   1847             _while47_cond:
3132   1847 FA F5 FF      lea d, [bp + -11] ; $i
3133   184A 2A            mov b, [d]
3134   184B             ; --- START RELATIONAL
3135   184B D7            push a
3136   184C 11            mov a, b
3137   184D 26 00 00      mov b, $0
3138   1850 B0            cmp a, b
3139   1851 FD 7F         sgt ; >
3140   1853 E4            pop a
3141   1854             ; --- END RELATIONAL
3142   1854 C0 00 00      cmp b, 0
3143   1857 C6 80 18      je _while47_exit
3144   185A             _while47_block:
3145   185A             ; i--; 
3146   185A FA F5 FF      lea d, [bp + -11] ; $i
3147   185D 2A            mov b, [d]
3148   185E FD 7D         dec b
3149   1860 FA F5 FF      lea d, [bp + -11] ; $i
3150   1863 FD 43         mov [d], b
3151   1865 FD 77         inc b
3152   1867             ; putchar(digits[i]); 
3153   1867 FA F7 FF      lea d, [bp + -9] ; $digits
3154   186A D7            push a
3155   186B DA            push d
3156   186C FA F5 FF      lea d, [bp + -11] ; $i
3157   186F 2A            mov b, [d]
3158   1870 E7            pop d
3159   1871 5A            add d, b
3160   1872 E4            pop a
3161   1873 32            mov bl, [d]
3162   1874 A7 00         mov bh, 0
3163   1876 DD            push bl
3164   1877 07 B8 1B      call putchar
3165   187A 51 01 00      add sp, 1
3166   187D 0A 47 18      jmp _while47_cond
3167   1880             _while47_exit:
3168   1880 F9            leave
3169   1881 09            ret
3170   1882             
3171   1882             sprint_unsigned:
3172   1882 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3173   1885             ; char digits[5]; 
3174   1885 52 05 00      sub sp, 5
3175   1888             ; int i; 
3176   1888 52 02 00      sub sp, 2
3177   188B             ; int len = 0; 
3178   188B 52 02 00      sub sp, 2
3179   188E             ; --- START LOCAL VAR INITIALIZATION
3180   188E FA F8 FF      lea d, [bp + -8] ; $len
3181   1891 DA            push d
3182   1892 26 00 00      mov b, $0
3183   1895 E7            pop d
3184   1896 FD 43         mov [d], b
3185   1898             ; --- END LOCAL VAR INITIALIZATION
3186   1898             ; i = 0; 
3187   1898 FA FA FF      lea d, [bp + -6] ; $i
3188   189B DA            push d
3189   189C 26 00 00      mov b, $0
3190   189F E7            pop d
3191   18A0 FD 43         mov [d], b
3192   18A2             ; if(num == 0){ 
3193   18A2             _if48_cond:
3194   18A2 FA 07 00      lea d, [bp + 7] ; $num
3195   18A5 2A            mov b, [d]
3196   18A6             ; --- START RELATIONAL
3197   18A6 D7            push a
3198   18A7 11            mov a, b
3199   18A8 26 00 00      mov b, $0
3200   18AB B0            cmp a, b
3201   18AC FD 71         seq ; ==
3202   18AE E4            pop a
3203   18AF             ; --- END RELATIONAL
3204   18AF C0 00 00      cmp b, 0
3205   18B2 C6 D1 18      je _if48_exit
3206   18B5             _if48_true:
3207   18B5             ; *dest++ = '0'; 
3208   18B5 FA 05 00      lea d, [bp + 5] ; $dest
3209   18B8 2A            mov b, [d]
3210   18B9 FD 77         inc b
3211   18BB FA 05 00      lea d, [bp + 5] ; $dest
3212   18BE FD 43         mov [d], b
3213   18C0 FD 7D         dec b
3214   18C2 D8            push b
3215   18C3 26 30 00      mov b, $30
3216   18C6 E7            pop d
3217   18C7 FD 3E         mov [d], bl
3218   18C9             ; return 1; 
3219   18C9 26 01 00      mov b, $1
3220   18CC F9            leave
3221   18CD 09            ret
3222   18CE 0A D1 18      jmp _if48_exit
3223   18D1             _if48_exit:
3224   18D1             ; while (num > 0) { 
3225   18D1             _while49_cond:
3226   18D1 FA 07 00      lea d, [bp + 7] ; $num
3227   18D4 2A            mov b, [d]
3228   18D5             ; --- START RELATIONAL
3229   18D5 D7            push a
3230   18D6 11            mov a, b
3231   18D7 26 00 00      mov b, $0
3232   18DA B0            cmp a, b
3233   18DB FD 81         sgu ; > (unsigned)
3234   18DD E4            pop a
3235   18DE             ; --- END RELATIONAL
3236   18DE C0 00 00      cmp b, 0
3237   18E1 C6 2B 19      je _while49_exit
3238   18E4             _while49_block:
3239   18E4             ; digits[i] = '0' + (num % 10); 
3240   18E4 FA FC FF      lea d, [bp + -4] ; $digits
3241   18E7 D7            push a
3242   18E8 DA            push d
3243   18E9 FA FA FF      lea d, [bp + -6] ; $i
3244   18EC 2A            mov b, [d]
3245   18ED E7            pop d
3246   18EE 5A            add d, b
3247   18EF E4            pop a
3248   18F0 DA            push d
3249   18F1 26 30 00      mov b, $30
3250   18F4             ; --- START TERMS
3251   18F4 D7            push a
3252   18F5 11            mov a, b
3253   18F6 FA 07 00      lea d, [bp + 7] ; $num
3254   18F9 2A            mov b, [d]
3255   18FA             ; --- START FACTORS
3256   18FA D7            push a
3257   18FB 11            mov a, b
3258   18FC 26 0A 00      mov b, $a
3259   18FF AE            div a, b ; 
3260   1900 11            mov a, b
3261   1901 27            mov b, a
3262   1902 E4            pop a
3263   1903             ; --- END FACTORS
3264   1903 56            add b, a
3265   1904 E4            pop a
3266   1905             ; --- END TERMS
3267   1905 E7            pop d
3268   1906 FD 3E         mov [d], bl
3269   1908             ; num = num / 10; 
3270   1908 FA 07 00      lea d, [bp + 7] ; $num
3271   190B DA            push d
3272   190C FA 07 00      lea d, [bp + 7] ; $num
3273   190F 2A            mov b, [d]
3274   1910             ; --- START FACTORS
3275   1910 D7            push a
3276   1911 11            mov a, b
3277   1912 26 0A 00      mov b, $a
3278   1915 AE            div a, b
3279   1916 27            mov b, a
3280   1917 E4            pop a
3281   1918             ; --- END FACTORS
3282   1918 E7            pop d
3283   1919 FD 43         mov [d], b
3284   191B             ; i++; 
3285   191B FA FA FF      lea d, [bp + -6] ; $i
3286   191E 2A            mov b, [d]
3287   191F FD 77         inc b
3288   1921 FA FA FF      lea d, [bp + -6] ; $i
3289   1924 FD 43         mov [d], b
3290   1926 FD 7D         dec b
3291   1928 0A D1 18      jmp _while49_cond
3292   192B             _while49_exit:
3293   192B             ; while (i > 0) { 
3294   192B             _while50_cond:
3295   192B FA FA FF      lea d, [bp + -6] ; $i
3296   192E 2A            mov b, [d]
3297   192F             ; --- START RELATIONAL
3298   192F D7            push a
3299   1930 11            mov a, b
3300   1931 26 00 00      mov b, $0
3301   1934 B0            cmp a, b
3302   1935 FD 7F         sgt ; >
3303   1937 E4            pop a
3304   1938             ; --- END RELATIONAL
3305   1938 C0 00 00      cmp b, 0
3306   193B C6 7B 19      je _while50_exit
3307   193E             _while50_block:
3308   193E             ; i--; 
3309   193E FA FA FF      lea d, [bp + -6] ; $i
3310   1941 2A            mov b, [d]
3311   1942 FD 7D         dec b
3312   1944 FA FA FF      lea d, [bp + -6] ; $i
3313   1947 FD 43         mov [d], b
3314   1949 FD 77         inc b
3315   194B             ; *dest++ = digits[i]; 
3316   194B FA 05 00      lea d, [bp + 5] ; $dest
3317   194E 2A            mov b, [d]
3318   194F FD 77         inc b
3319   1951 FA 05 00      lea d, [bp + 5] ; $dest
3320   1954 FD 43         mov [d], b
3321   1956 FD 7D         dec b
3322   1958 D8            push b
3323   1959 FA FC FF      lea d, [bp + -4] ; $digits
3324   195C D7            push a
3325   195D DA            push d
3326   195E FA FA FF      lea d, [bp + -6] ; $i
3327   1961 2A            mov b, [d]
3328   1962 E7            pop d
3329   1963 5A            add d, b
3330   1964 E4            pop a
3331   1965 32            mov bl, [d]
3332   1966 A7 00         mov bh, 0
3333   1968 E7            pop d
3334   1969 FD 3E         mov [d], bl
3335   196B             ; len++; 
3336   196B FA F8 FF      lea d, [bp + -8] ; $len
3337   196E 2A            mov b, [d]
3338   196F FD 77         inc b
3339   1971 FA F8 FF      lea d, [bp + -8] ; $len
3340   1974 FD 43         mov [d], b
3341   1976 FD 7D         dec b
3342   1978 0A 2B 19      jmp _while50_cond
3343   197B             _while50_exit:
3344   197B             ; *dest = '\0'; 
3345   197B FA 05 00      lea d, [bp + 5] ; $dest
3346   197E 2A            mov b, [d]
3347   197F D8            push b
3348   1980 26 00 00      mov b, $0
3349   1983 E7            pop d
3350   1984 FD 3E         mov [d], bl
3351   1986             ; return len; 
3352   1986 FA F8 FF      lea d, [bp + -8] ; $len
3353   1989 2A            mov b, [d]
3354   198A F9            leave
3355   198B 09            ret
3356   198C             
3357   198C             print_unsigned:
3358   198C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3359   198F             ; char digits[5]; 
3360   198F 52 05 00      sub sp, 5
3361   1992             ; int i; 
3362   1992 52 02 00      sub sp, 2
3363   1995             ; i = 0; 
3364   1995 FA FA FF      lea d, [bp + -6] ; $i
3365   1998 DA            push d
3366   1999 26 00 00      mov b, $0
3367   199C E7            pop d
3368   199D FD 43         mov [d], b
3369   199F             ; if(num == 0){ 
3370   199F             _if51_cond:
3371   199F FA 05 00      lea d, [bp + 5] ; $num
3372   19A2 2A            mov b, [d]
3373   19A3             ; --- START RELATIONAL
3374   19A3 D7            push a
3375   19A4 11            mov a, b
3376   19A5 26 00 00      mov b, $0
3377   19A8 B0            cmp a, b
3378   19A9 FD 71         seq ; ==
3379   19AB E4            pop a
3380   19AC             ; --- END RELATIONAL
3381   19AC C0 00 00      cmp b, 0
3382   19AF C6 C1 19      je _if51_exit
3383   19B2             _if51_true:
3384   19B2             ; putchar('0'); 
3385   19B2 26 30 00      mov b, $30
3386   19B5 DD            push bl
3387   19B6 07 B8 1B      call putchar
3388   19B9 51 01 00      add sp, 1
3389   19BC             ; return; 
3390   19BC F9            leave
3391   19BD 09            ret
3392   19BE 0A C1 19      jmp _if51_exit
3393   19C1             _if51_exit:
3394   19C1             ; while (num > 0) { 
3395   19C1             _while52_cond:
3396   19C1 FA 05 00      lea d, [bp + 5] ; $num
3397   19C4 2A            mov b, [d]
3398   19C5             ; --- START RELATIONAL
3399   19C5 D7            push a
3400   19C6 11            mov a, b
3401   19C7 26 00 00      mov b, $0
3402   19CA B0            cmp a, b
3403   19CB FD 81         sgu ; > (unsigned)
3404   19CD E4            pop a
3405   19CE             ; --- END RELATIONAL
3406   19CE C0 00 00      cmp b, 0
3407   19D1 C6 1B 1A      je _while52_exit
3408   19D4             _while52_block:
3409   19D4             ; digits[i] = '0' + (num % 10); 
3410   19D4 FA FC FF      lea d, [bp + -4] ; $digits
3411   19D7 D7            push a
3412   19D8 DA            push d
3413   19D9 FA FA FF      lea d, [bp + -6] ; $i
3414   19DC 2A            mov b, [d]
3415   19DD E7            pop d
3416   19DE 5A            add d, b
3417   19DF E4            pop a
3418   19E0 DA            push d
3419   19E1 26 30 00      mov b, $30
3420   19E4             ; --- START TERMS
3421   19E4 D7            push a
3422   19E5 11            mov a, b
3423   19E6 FA 05 00      lea d, [bp + 5] ; $num
3424   19E9 2A            mov b, [d]
3425   19EA             ; --- START FACTORS
3426   19EA D7            push a
3427   19EB 11            mov a, b
3428   19EC 26 0A 00      mov b, $a
3429   19EF AE            div a, b ; 
3430   19F0 11            mov a, b
3431   19F1 27            mov b, a
3432   19F2 E4            pop a
3433   19F3             ; --- END FACTORS
3434   19F3 56            add b, a
3435   19F4 E4            pop a
3436   19F5             ; --- END TERMS
3437   19F5 E7            pop d
3438   19F6 FD 3E         mov [d], bl
3439   19F8             ; num = num / 10; 
3440   19F8 FA 05 00      lea d, [bp + 5] ; $num
3441   19FB DA            push d
3442   19FC FA 05 00      lea d, [bp + 5] ; $num
3443   19FF 2A            mov b, [d]
3444   1A00             ; --- START FACTORS
3445   1A00 D7            push a
3446   1A01 11            mov a, b
3447   1A02 26 0A 00      mov b, $a
3448   1A05 AE            div a, b
3449   1A06 27            mov b, a
3450   1A07 E4            pop a
3451   1A08             ; --- END FACTORS
3452   1A08 E7            pop d
3453   1A09 FD 43         mov [d], b
3454   1A0B             ; i++; 
3455   1A0B FA FA FF      lea d, [bp + -6] ; $i
3456   1A0E 2A            mov b, [d]
3457   1A0F FD 77         inc b
3458   1A11 FA FA FF      lea d, [bp + -6] ; $i
3459   1A14 FD 43         mov [d], b
3460   1A16 FD 7D         dec b
3461   1A18 0A C1 19      jmp _while52_cond
3462   1A1B             _while52_exit:
3463   1A1B             ; while (i > 0) { 
3464   1A1B             _while53_cond:
3465   1A1B FA FA FF      lea d, [bp + -6] ; $i
3466   1A1E 2A            mov b, [d]
3467   1A1F             ; --- START RELATIONAL
3468   1A1F D7            push a
3469   1A20 11            mov a, b
3470   1A21 26 00 00      mov b, $0
3471   1A24 B0            cmp a, b
3472   1A25 FD 7F         sgt ; >
3473   1A27 E4            pop a
3474   1A28             ; --- END RELATIONAL
3475   1A28 C0 00 00      cmp b, 0
3476   1A2B C6 54 1A      je _while53_exit
3477   1A2E             _while53_block:
3478   1A2E             ; i--; 
3479   1A2E FA FA FF      lea d, [bp + -6] ; $i
3480   1A31 2A            mov b, [d]
3481   1A32 FD 7D         dec b
3482   1A34 FA FA FF      lea d, [bp + -6] ; $i
3483   1A37 FD 43         mov [d], b
3484   1A39 FD 77         inc b
3485   1A3B             ; putchar(digits[i]); 
3486   1A3B FA FC FF      lea d, [bp + -4] ; $digits
3487   1A3E D7            push a
3488   1A3F DA            push d
3489   1A40 FA FA FF      lea d, [bp + -6] ; $i
3490   1A43 2A            mov b, [d]
3491   1A44 E7            pop d
3492   1A45 5A            add d, b
3493   1A46 E4            pop a
3494   1A47 32            mov bl, [d]
3495   1A48 A7 00         mov bh, 0
3496   1A4A DD            push bl
3497   1A4B 07 B8 1B      call putchar
3498   1A4E 51 01 00      add sp, 1
3499   1A51 0A 1B 1A      jmp _while53_cond
3500   1A54             _while53_exit:
3501   1A54 F9            leave
3502   1A55 09            ret
3503   1A56             
3504   1A56             sprint_signed:
3505   1A56 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3506   1A59             ; char digits[5]; 
3507   1A59 52 05 00      sub sp, 5
3508   1A5C             ; int i = 0; 
3509   1A5C 52 02 00      sub sp, 2
3510   1A5F             ; --- START LOCAL VAR INITIALIZATION
3511   1A5F FA FA FF      lea d, [bp + -6] ; $i
3512   1A62 DA            push d
3513   1A63 26 00 00      mov b, $0
3514   1A66 E7            pop d
3515   1A67 FD 43         mov [d], b
3516   1A69             ; --- END LOCAL VAR INITIALIZATION
3517   1A69             ; int len = 0; 
3518   1A69 52 02 00      sub sp, 2
3519   1A6C             ; --- START LOCAL VAR INITIALIZATION
3520   1A6C FA F8 FF      lea d, [bp + -8] ; $len
3521   1A6F DA            push d
3522   1A70 26 00 00      mov b, $0
3523   1A73 E7            pop d
3524   1A74 FD 43         mov [d], b
3525   1A76             ; --- END LOCAL VAR INITIALIZATION
3526   1A76             ; if (num < 0) { 
3527   1A76             _if54_cond:
3528   1A76 FA 07 00      lea d, [bp + 7] ; $num
3529   1A79 2A            mov b, [d]
3530   1A7A             ; --- START RELATIONAL
3531   1A7A D7            push a
3532   1A7B 11            mov a, b
3533   1A7C 26 00 00      mov b, $0
3534   1A7F B0            cmp a, b
3535   1A80 FD 73         slt ; < (signed)
3536   1A82 E4            pop a
3537   1A83             ; --- END RELATIONAL
3538   1A83 C0 00 00      cmp b, 0
3539   1A86 C6 BA 1A      je _if54_else
3540   1A89             _if54_true:
3541   1A89             ; *dest++ = '-'; 
3542   1A89 FA 05 00      lea d, [bp + 5] ; $dest
3543   1A8C 2A            mov b, [d]
3544   1A8D FD 77         inc b
3545   1A8F FA 05 00      lea d, [bp + 5] ; $dest
3546   1A92 FD 43         mov [d], b
3547   1A94 FD 7D         dec b
3548   1A96 D8            push b
3549   1A97 26 2D 00      mov b, $2d
3550   1A9A E7            pop d
3551   1A9B FD 3E         mov [d], bl
3552   1A9D             ; num = -num; 
3553   1A9D FA 07 00      lea d, [bp + 7] ; $num
3554   1AA0 DA            push d
3555   1AA1 FA 07 00      lea d, [bp + 7] ; $num
3556   1AA4 2A            mov b, [d]
3557   1AA5 FD 97         neg b
3558   1AA7 E7            pop d
3559   1AA8 FD 43         mov [d], b
3560   1AAA             ; len++; 
3561   1AAA FA F8 FF      lea d, [bp + -8] ; $len
3562   1AAD 2A            mov b, [d]
3563   1AAE FD 77         inc b
3564   1AB0 FA F8 FF      lea d, [bp + -8] ; $len
3565   1AB3 FD 43         mov [d], b
3566   1AB5 FD 7D         dec b
3567   1AB7 0A F4 1A      jmp _if54_exit
3568   1ABA             _if54_else:
3569   1ABA             ; if (num == 0) { 
3570   1ABA             _if55_cond:
3571   1ABA FA 07 00      lea d, [bp + 7] ; $num
3572   1ABD 2A            mov b, [d]
3573   1ABE             ; --- START RELATIONAL
3574   1ABE D7            push a
3575   1ABF 11            mov a, b
3576   1AC0 26 00 00      mov b, $0
3577   1AC3 B0            cmp a, b
3578   1AC4 FD 71         seq ; ==
3579   1AC6 E4            pop a
3580   1AC7             ; --- END RELATIONAL
3581   1AC7 C0 00 00      cmp b, 0
3582   1ACA C6 F4 1A      je _if55_exit
3583   1ACD             _if55_true:
3584   1ACD             ; *dest++ = '0'; 
3585   1ACD FA 05 00      lea d, [bp + 5] ; $dest
3586   1AD0 2A            mov b, [d]
3587   1AD1 FD 77         inc b
3588   1AD3 FA 05 00      lea d, [bp + 5] ; $dest
3589   1AD6 FD 43         mov [d], b
3590   1AD8 FD 7D         dec b
3591   1ADA D8            push b
3592   1ADB 26 30 00      mov b, $30
3593   1ADE E7            pop d
3594   1ADF FD 3E         mov [d], bl
3595   1AE1             ; *dest = '\0'; 
3596   1AE1 FA 05 00      lea d, [bp + 5] ; $dest
3597   1AE4 2A            mov b, [d]
3598   1AE5 D8            push b
3599   1AE6 26 00 00      mov b, $0
3600   1AE9 E7            pop d
3601   1AEA FD 3E         mov [d], bl
3602   1AEC             ; return 1; 
3603   1AEC 26 01 00      mov b, $1
3604   1AEF F9            leave
3605   1AF0 09            ret
3606   1AF1 0A F4 1A      jmp _if55_exit
3607   1AF4             _if55_exit:
3608   1AF4             _if54_exit:
3609   1AF4             ; while (num > 0) { 
3610   1AF4             _while56_cond:
3611   1AF4 FA 07 00      lea d, [bp + 7] ; $num
3612   1AF7 2A            mov b, [d]
3613   1AF8             ; --- START RELATIONAL
3614   1AF8 D7            push a
3615   1AF9 11            mov a, b
3616   1AFA 26 00 00      mov b, $0
3617   1AFD B0            cmp a, b
3618   1AFE FD 7F         sgt ; >
3619   1B00 E4            pop a
3620   1B01             ; --- END RELATIONAL
3621   1B01 C0 00 00      cmp b, 0
3622   1B04 C6 4E 1B      je _while56_exit
3623   1B07             _while56_block:
3624   1B07             ; digits[i] = '0' + (num % 10); 
3625   1B07 FA FC FF      lea d, [bp + -4] ; $digits
3626   1B0A D7            push a
3627   1B0B DA            push d
3628   1B0C FA FA FF      lea d, [bp + -6] ; $i
3629   1B0F 2A            mov b, [d]
3630   1B10 E7            pop d
3631   1B11 5A            add d, b
3632   1B12 E4            pop a
3633   1B13 DA            push d
3634   1B14 26 30 00      mov b, $30
3635   1B17             ; --- START TERMS
3636   1B17 D7            push a
3637   1B18 11            mov a, b
3638   1B19 FA 07 00      lea d, [bp + 7] ; $num
3639   1B1C 2A            mov b, [d]
3640   1B1D             ; --- START FACTORS
3641   1B1D D7            push a
3642   1B1E 11            mov a, b
3643   1B1F 26 0A 00      mov b, $a
3644   1B22 AE            div a, b ; 
3645   1B23 11            mov a, b
3646   1B24 27            mov b, a
3647   1B25 E4            pop a
3648   1B26             ; --- END FACTORS
3649   1B26 56            add b, a
3650   1B27 E4            pop a
3651   1B28             ; --- END TERMS
3652   1B28 E7            pop d
3653   1B29 FD 3E         mov [d], bl
3654   1B2B             ; num = num / 10; 
3655   1B2B FA 07 00      lea d, [bp + 7] ; $num
3656   1B2E DA            push d
3657   1B2F FA 07 00      lea d, [bp + 7] ; $num
3658   1B32 2A            mov b, [d]
3659   1B33             ; --- START FACTORS
3660   1B33 D7            push a
3661   1B34 11            mov a, b
3662   1B35 26 0A 00      mov b, $a
3663   1B38 AE            div a, b
3664   1B39 27            mov b, a
3665   1B3A E4            pop a
3666   1B3B             ; --- END FACTORS
3667   1B3B E7            pop d
3668   1B3C FD 43         mov [d], b
3669   1B3E             ; i++; 
3670   1B3E FA FA FF      lea d, [bp + -6] ; $i
3671   1B41 2A            mov b, [d]
3672   1B42 FD 77         inc b
3673   1B44 FA FA FF      lea d, [bp + -6] ; $i
3674   1B47 FD 43         mov [d], b
3675   1B49 FD 7D         dec b
3676   1B4B 0A F4 1A      jmp _while56_cond
3677   1B4E             _while56_exit:
3678   1B4E             ; while (i > 0) { 
3679   1B4E             _while57_cond:
3680   1B4E FA FA FF      lea d, [bp + -6] ; $i
3681   1B51 2A            mov b, [d]
3682   1B52             ; --- START RELATIONAL
3683   1B52 D7            push a
3684   1B53 11            mov a, b
3685   1B54 26 00 00      mov b, $0
3686   1B57 B0            cmp a, b
3687   1B58 FD 7F         sgt ; >
3688   1B5A E4            pop a
3689   1B5B             ; --- END RELATIONAL
3690   1B5B C0 00 00      cmp b, 0
3691   1B5E C6 9E 1B      je _while57_exit
3692   1B61             _while57_block:
3693   1B61             ; i--; 
3694   1B61 FA FA FF      lea d, [bp + -6] ; $i
3695   1B64 2A            mov b, [d]
3696   1B65 FD 7D         dec b
3697   1B67 FA FA FF      lea d, [bp + -6] ; $i
3698   1B6A FD 43         mov [d], b
3699   1B6C FD 77         inc b
3700   1B6E             ; *dest++ = digits[i]; 
3701   1B6E FA 05 00      lea d, [bp + 5] ; $dest
3702   1B71 2A            mov b, [d]
3703   1B72 FD 77         inc b
3704   1B74 FA 05 00      lea d, [bp + 5] ; $dest
3705   1B77 FD 43         mov [d], b
3706   1B79 FD 7D         dec b
3707   1B7B D8            push b
3708   1B7C FA FC FF      lea d, [bp + -4] ; $digits
3709   1B7F D7            push a
3710   1B80 DA            push d
3711   1B81 FA FA FF      lea d, [bp + -6] ; $i
3712   1B84 2A            mov b, [d]
3713   1B85 E7            pop d
3714   1B86 5A            add d, b
3715   1B87 E4            pop a
3716   1B88 32            mov bl, [d]
3717   1B89 A7 00         mov bh, 0
3718   1B8B E7            pop d
3719   1B8C FD 3E         mov [d], bl
3720   1B8E             ; len++; 
3721   1B8E FA F8 FF      lea d, [bp + -8] ; $len
3722   1B91 2A            mov b, [d]
3723   1B92 FD 77         inc b
3724   1B94 FA F8 FF      lea d, [bp + -8] ; $len
3725   1B97 FD 43         mov [d], b
3726   1B99 FD 7D         dec b
3727   1B9B 0A 4E 1B      jmp _while57_cond
3728   1B9E             _while57_exit:
3729   1B9E             ; *dest = '\0'; 
3730   1B9E FA 05 00      lea d, [bp + 5] ; $dest
3731   1BA1 2A            mov b, [d]
3732   1BA2 D8            push b
3733   1BA3 26 00 00      mov b, $0
3734   1BA6 E7            pop d
3735   1BA7 FD 3E         mov [d], bl
3736   1BA9             ; return len; 
3737   1BA9 FA F8 FF      lea d, [bp + -8] ; $len
3738   1BAC 2A            mov b, [d]
3739   1BAD F9            leave
3740   1BAE 09            ret
3741   1BAF             
3742   1BAF             date:
3743   1BAF F8 00 00      enter 0 ; (push bp; mov bp, sp)
3744   1BB2             
3745   1BB2             ; --- BEGIN INLINE ASM SEGMENT
3746   1BB2 19 00         mov al, 0 
3747   1BB4 05 07         syscall sys_datetime
3748   1BB6             ; --- END INLINE ASM SEGMENT
3749   1BB6             
3750   1BB6 F9            leave
3751   1BB7 09            ret
3752   1BB8             
3753   1BB8             putchar:
3754   1BB8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3755   1BBB             
3756   1BBB             ; --- BEGIN INLINE ASM SEGMENT
3757   1BBB FA 05 00      lea d, [bp + 5] ; $c
3758   1BBE 1E            mov al, [d]
3759   1BBF 23            mov ah, al
3760   1BC0 07 AF 1D      call _putchar
3761   1BC3             ; --- END INLINE ASM SEGMENT
3762   1BC3             
3763   1BC3 F9            leave
3764   1BC4 09            ret
3765   1BC5             
3766   1BC5             getchar:
3767   1BC5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3768   1BC8             ; char c; 
3769   1BC8 52 01 00      sub sp, 1
3770   1BCB             
3771   1BCB             ; --- BEGIN INLINE ASM SEGMENT
3772   1BCB 07 A8 1D      call getch
3773   1BCE 1A            mov al, ah
3774   1BCF FA 00 00      lea d, [bp + 0] ; $c
3775   1BD2 3E            mov [d], al
3776   1BD3             ; --- END INLINE ASM SEGMENT
3777   1BD3             
3778   1BD3             ; return c; 
3779   1BD3 FA 00 00      lea d, [bp + 0] ; $c
3780   1BD6 32            mov bl, [d]
3781   1BD7 A7 00         mov bh, 0
3782   1BD9 F9            leave
3783   1BDA 09            ret
3784   1BDB             
3785   1BDB             scann:
3786   1BDB F8 00 00      enter 0 ; (push bp; mov bp, sp)
3787   1BDE             ; int m; 
3788   1BDE 52 02 00      sub sp, 2
3789   1BE1             
3790   1BE1             ; --- BEGIN INLINE ASM SEGMENT
3791   1BE1 07 F3 1F      call scan_u16d
3792   1BE4 FA FF FF      lea d, [bp + -1] ; $m
3793   1BE7 43            mov [d], a
3794   1BE8             ; --- END INLINE ASM SEGMENT
3795   1BE8             
3796   1BE8             ; return m; 
3797   1BE8 FA FF FF      lea d, [bp + -1] ; $m
3798   1BEB 2A            mov b, [d]
3799   1BEC F9            leave
3800   1BED 09            ret
3801   1BEE             
3802   1BEE             puts:
3803   1BEE F8 00 00      enter 0 ; (push bp; mov bp, sp)
3804   1BF1             
3805   1BF1             ; --- BEGIN INLINE ASM SEGMENT
3806   1BF1 FA 05 00      lea d, [bp + 5] ; $s
3807   1BF4 15            mov a, [d]
3808   1BF5 3C            mov d, a
3809   1BF6 07 F9 1E      call _puts
3810   1BF9 10 00 0A      mov a, $0A00
3811   1BFC 05 03         syscall sys_io
3812   1BFE             ; --- END INLINE ASM SEGMENT
3813   1BFE             
3814   1BFE F9            leave
3815   1BFF 09            ret
3816   1C00             
3817   1C00             print:
3818   1C00 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3819   1C03             
3820   1C03             ; --- BEGIN INLINE ASM SEGMENT
3821   1C03 FA 05 00      lea d, [bp + 5] ; $s
3822   1C06 FD 2A         mov d, [d]
3823   1C08 07 F9 1E      call _puts
3824   1C0B             ; --- END INLINE ASM SEGMENT
3825   1C0B             
3826   1C0B F9            leave
3827   1C0C 09            ret
3828   1C0D             
3829   1C0D             getparam:
3830   1C0D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3831   1C10             ; char data; 
3832   1C10 52 01 00      sub sp, 1
3833   1C13             
3834   1C13             ; --- BEGIN INLINE ASM SEGMENT
3835   1C13 19 04         mov al, 4
3836   1C15 FA 05 00      lea d, [bp + 5] ; $address
3837   1C18 FD 2A         mov d, [d]
3838   1C1A 05 0C         syscall sys_system
3839   1C1C FA 00 00      lea d, [bp + 0] ; $data
3840   1C1F FD 3E         mov [d], bl
3841   1C21             ; --- END INLINE ASM SEGMENT
3842   1C21             
3843   1C21             ; return data; 
3844   1C21 FA 00 00      lea d, [bp + 0] ; $data
3845   1C24 32            mov bl, [d]
3846   1C25 A7 00         mov bh, 0
3847   1C27 F9            leave
3848   1C28 09            ret
3849   1C29             
3850   1C29             clear:
3851   1C29 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3852   1C2C             ; print("\033[2J\033[H"); 
3853   1C2C 26 A4 25      mov b, _s6 ; "\033[2J\033[H"
3854   1C2F FD AB         swp b
3855   1C31 D8            push b
3856   1C32 07 00 1C      call print
3857   1C35 51 02 00      add sp, 2
3858   1C38 F9            leave
3859   1C39 09            ret
3860   1C3A             
3861   1C3A             abs:
3862   1C3A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3863   1C3D             ; return i < 0 ? -i : i; 
3864   1C3D             _ternary58_cond:
3865   1C3D FA 05 00      lea d, [bp + 5] ; $i
3866   1C40 2A            mov b, [d]
3867   1C41             ; --- START RELATIONAL
3868   1C41 D7            push a
3869   1C42 11            mov a, b
3870   1C43 26 00 00      mov b, $0
3871   1C46 B0            cmp a, b
3872   1C47 FD 73         slt ; < (signed)
3873   1C49 E4            pop a
3874   1C4A             ; --- END RELATIONAL
3875   1C4A C0 00 00      cmp b, 0
3876   1C4D C6 59 1C      je _ternary58_false
3877   1C50             _ternary58_true:
3878   1C50 FA 05 00      lea d, [bp + 5] ; $i
3879   1C53 2A            mov b, [d]
3880   1C54 FD 97         neg b
3881   1C56 0A 5D 1C      jmp _ternary58_exit
3882   1C59             _ternary58_false:
3883   1C59 FA 05 00      lea d, [bp + 5] ; $i
3884   1C5C 2A            mov b, [d]
3885   1C5D             _ternary58_exit:
3886   1C5D F9            leave
3887   1C5E 09            ret
3888   1C5F             
3889   1C5F             loadfile:
3890   1C5F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3891   1C62             
3892   1C62             ; --- BEGIN INLINE ASM SEGMENT
3893   1C62 FA 07 00      lea d, [bp + 7] ; $destination
3894   1C65 15            mov a, [d]
3895   1C66 4F            mov di, a
3896   1C67 FA 05 00      lea d, [bp + 5] ; $filename
3897   1C6A FD 2A         mov d, [d]
3898   1C6C 19 14         mov al, 20
3899   1C6E 05 04         syscall sys_filesystem
3900   1C70             ; --- END INLINE ASM SEGMENT
3901   1C70             
3902   1C70 F9            leave
3903   1C71 09            ret
3904   1C72             
3905   1C72             create_file:
3906   1C72 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3907   1C75 F9            leave
3908   1C76 09            ret
3909   1C77             
3910   1C77             delete_file:
3911   1C77 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3912   1C7A             
3913   1C7A             ; --- BEGIN INLINE ASM SEGMENT
3914   1C7A FA 05 00      lea d, [bp + 5] ; $filename
3915   1C7D 19 0A         mov al, 10
3916   1C7F 05 04         syscall sys_filesystem
3917   1C81             ; --- END INLINE ASM SEGMENT
3918   1C81             
3919   1C81 F9            leave
3920   1C82 09            ret
3921   1C83             
3922   1C83             load_hex:
3923   1C83 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3924   1C86             ; char *temp; 
3925   1C86 52 02 00      sub sp, 2
3926   1C89             ; temp = alloc(32768); 
3927   1C89 FA FF FF      lea d, [bp + -1] ; $temp
3928   1C8C DA            push d
3929   1C8D 26 00 80      mov b, $8000
3930   1C90 FD AB         swp b
3931   1C92 D8            push b
3932   1C93 07 2C 08      call alloc
3933   1C96 51 02 00      add sp, 2
3934   1C99 E7            pop d
3935   1C9A FD 43         mov [d], b
3936   1C9C             
3937   1C9C             ; --- BEGIN INLINE ASM SEGMENT
3938   1C9C               
3939   1C9C               
3940   1C9C               
3941   1C9C             _load_hex:
3942   1C9C FA 05 00      lea d, [bp + 5] ; $destination
3943   1C9F FD 2A         mov d, [d]
3944   1CA1 FD 50         mov di, d
3945   1CA3 FA FF FF      lea d, [bp + -1] ; $temp
3946   1CA6 FD 2A         mov d, [d]
3947   1CA8 38 00 00      mov c, 0
3948   1CAB 48            mov a, sp
3949   1CAC 77            inc a
3950   1CAD 3C            mov d, a          
3951   1CAE 07 B6 1D      call _gets        
3952   1CB1 4D            mov si, a
3953   1CB2             __load_hex_loop:
3954   1CB2 F6            lodsb             
3955   1CB3 B9 00         cmp al, 0         
3956   1CB5 C6 C3 1C      jz __load_hex_ret
3957   1CB8 36            mov bh, al
3958   1CB9 F6            lodsb
3959   1CBA 2F            mov bl, al
3960   1CBB 07 6D 1D      call _atoi        
3961   1CBE F7            stosb             
3962   1CBF 78            inc c
3963   1CC0 0A B2 1C      jmp __load_hex_loop
3964   1CC3             __load_hex_ret:
3965   1CC3             ; --- END INLINE ASM SEGMENT
3966   1CC3             
3967   1CC3 F9            leave
3968   1CC4 09            ret
3969   1CC5             
3970   1CC5             include_stdio_asm:
3971   1CC5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3972   1CC8             
3973   1CC8             ; --- BEGIN INLINE ASM SEGMENT
3974   1CC8             .include "lib/asm/stdio.asm"
0001+  1CC8             ;-----------------------------------------------------------------------------
0002+  1CC8             ; stdio.s
0003+  1CC8             ;-----------------------------------------------------------------------------
0004+  1CC8             .include "lib/asm/string.asm"
0001++ 1CC8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1CC8             ; string.s
0003++ 1CC8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1CC8             
0005++ 1CC8             
0006++ 1CC8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1CC8             ; _strrev
0008++ 1CC8             ; reverse a string
0009++ 1CC8             ; D = string address
0010++ 1CC8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1CC8             ; 01234
0012++ 1CC8             _strrev:
0013++ 1CC8 4B          	pusha
0014++ 1CC9 07 0F 1D    	call _strlen	; length in C
0015++ 1CCC 12          	mov a, c
0016++ 1CCD AF 01 00    	cmp a, 1
0017++ 1CD0 D0 EA 1C    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1CD3 7D          	dec a
0019++ 1CD4 FD 4E       	mov si, d	; beginning of string
0020++ 1CD6 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1CD8 59          	add d, a	; end of string
0022++ 1CD9 12          	mov a, c
0023++ 1CDA FD 9B       	shr a		; divide by 2
0024++ 1CDC 39          	mov c, a	; C now counts the steps
0025++ 1CDD             _strrev_L0:
0026++ 1CDD 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1CDE F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1CDF 3E          	mov [d], al	; store left char into right side
0029++ 1CE0 1B          	mov al, bl
0030++ 1CE1 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1CE2 7E          	dec c
0032++ 1CE3 7F          	dec d
0033++ 1CE4 C2 00 00    	cmp c, 0
0034++ 1CE7 C7 DD 1C    	jne _strrev_L0
0035++ 1CEA             _strrev_end:
0036++ 1CEA 4C          	popa
0037++ 1CEB 09          	ret
0038++ 1CEC             	
0039++ 1CEC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1CEC             ; _strchr
0041++ 1CEC             ; search string in D for char in AL
0042++ 1CEC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1CEC             _strchr:
0044++ 1CEC             _strchr_L0:
0045++ 1CEC 32          	mov bl, [d]
0046++ 1CED C1 00       	cmp bl, 0
0047++ 1CEF C6 FA 1C    	je _strchr_end
0048++ 1CF2 BA          	cmp al, bl
0049++ 1CF3 C6 FA 1C    	je _strchr_end
0050++ 1CF6 79          	inc d
0051++ 1CF7 0A EC 1C    	jmp _strchr_L0
0052++ 1CFA             _strchr_end:
0053++ 1CFA 1B          	mov al, bl
0054++ 1CFB 09          	ret
0055++ 1CFC             
0056++ 1CFC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1CFC             ; _strstr
0058++ 1CFC             ; find sub-string
0059++ 1CFC             ; str1 in SI
0060++ 1CFC             ; str2 in DI
0061++ 1CFC             ; SI points to end of source string
0062++ 1CFC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1CFC             _strstr:
0064++ 1CFC DB          	push al
0065++ 1CFD DA          	push d
0066++ 1CFE E3          	push di
0067++ 1CFF             _strstr_loop:
0068++ 1CFF F3          	cmpsb					; compare a byte of the strings
0069++ 1D00 C7 0B 1D    	jne _strstr_ret
0070++ 1D03 FC 00 00    	lea d, [di + 0]
0071++ 1D06 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1D08 C7 FF 1C    	jne _strstr_loop				; equal chars but not at end
0073++ 1D0B             _strstr_ret:
0074++ 1D0B F0          	pop di
0075++ 1D0C E7          	pop d
0076++ 1D0D E8          	pop al
0077++ 1D0E 09          	ret
0078++ 1D0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1D0F             ; length of null terminated string
0080++ 1D0F             ; result in C
0081++ 1D0F             ; pointer in D
0082++ 1D0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1D0F             _strlen:
0084++ 1D0F DA          	push d
0085++ 1D10 38 00 00    	mov c, 0
0086++ 1D13             _strlen_L1:
0087++ 1D13 BD 00       	cmp byte [d], 0
0088++ 1D15 C6 1D 1D    	je _strlen_ret
0089++ 1D18 79          	inc d
0090++ 1D19 78          	inc c
0091++ 1D1A 0A 13 1D    	jmp _strlen_L1
0092++ 1D1D             _strlen_ret:
0093++ 1D1D E7          	pop d
0094++ 1D1E 09          	ret
0095++ 1D1F             
0096++ 1D1F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1D1F             ; STRCMP
0098++ 1D1F             ; compare two strings
0099++ 1D1F             ; str1 in SI
0100++ 1D1F             ; str2 in DI
0101++ 1D1F             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1D1F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1D1F             _strcmp:
0104++ 1D1F DB          	push al
0105++ 1D20 DA          	push d
0106++ 1D21 E3          	push di
0107++ 1D22 E2          	push si
0108++ 1D23             _strcmp_loop:
0109++ 1D23 F3          	cmpsb					; compare a byte of the strings
0110++ 1D24 C7 2F 1D    	jne _strcmp_ret
0111++ 1D27 FB FF FF    	lea d, [si +- 1]
0112++ 1D2A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1D2C C7 23 1D    	jne _strcmp_loop				; equal chars but not at end
0114++ 1D2F             _strcmp_ret:
0115++ 1D2F EF          	pop si
0116++ 1D30 F0          	pop di
0117++ 1D31 E7          	pop d
0118++ 1D32 E8          	pop al
0119++ 1D33 09          	ret
0120++ 1D34             
0121++ 1D34             
0122++ 1D34             ; STRCPY
0123++ 1D34             ; copy null terminated string from SI to DI
0124++ 1D34             ; source in SI
0125++ 1D34             ; destination in DI
0126++ 1D34             _strcpy:
0127++ 1D34 E2          	push si
0128++ 1D35 E3          	push di
0129++ 1D36 DB          	push al
0130++ 1D37             _strcpy_L1:
0131++ 1D37 F6          	lodsb
0132++ 1D38 F7          	stosb
0133++ 1D39 B9 00       	cmp al, 0
0134++ 1D3B C7 37 1D    	jne _strcpy_L1
0135++ 1D3E             _strcpy_end:
0136++ 1D3E E8          	pop al
0137++ 1D3F F0          	pop di
0138++ 1D40 EF          	pop si
0139++ 1D41 09          	ret
0140++ 1D42             
0141++ 1D42             ; STRCAT
0142++ 1D42             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1D42             ; source in SI
0144++ 1D42             ; destination in DI
0145++ 1D42             _strcat:
0146++ 1D42 E2          	push si
0147++ 1D43 E3          	push di
0148++ 1D44 D7          	push a
0149++ 1D45 DA          	push d
0150++ 1D46 50          	mov a, di
0151++ 1D47 3C          	mov d, a
0152++ 1D48             _strcat_goto_end_L1:
0153++ 1D48 BD 00       	cmp byte[d], 0
0154++ 1D4A C6 51 1D    	je _strcat_start
0155++ 1D4D 79          	inc d
0156++ 1D4E 0A 48 1D    	jmp _strcat_goto_end_L1
0157++ 1D51             _strcat_start:
0158++ 1D51 FD 50       	mov di, d
0159++ 1D53             _strcat_L1:
0160++ 1D53 F6          	lodsb
0161++ 1D54 F7          	stosb
0162++ 1D55 B9 00       	cmp al, 0
0163++ 1D57 C7 53 1D    	jne _strcat_L1
0164++ 1D5A             _strcat_end:
0165++ 1D5A E7          	pop d
0166++ 1D5B E4          	pop a
0167++ 1D5C F0          	pop di
0168++ 1D5D EF          	pop si
0169++ 1D5E 09          	ret
0170++ 1D5F             
0171++ 1D5F             
0005+  1D5F             
0006+  1D5F             ;-----------------------------------------------------------------------------
0007+  1D5F             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1D5F             ; ASCII in BL
0009+  1D5F             ; result in AL
0010+  1D5F             ; ascii for F = 0100 0110
0011+  1D5F             ; ascii for 9 = 0011 1001
0012+  1D5F             ;-----------------------------------------------------------------------------
0013+  1D5F             hex_ascii_encode:
0014+  1D5F 1B            mov al, bl
0015+  1D60 93 40         test al, $40        ; test if letter or number
0016+  1D62 C7 68 1D      jnz hex_letter
0017+  1D65 87 0F         and al, $0F        ; get number
0018+  1D67 09            ret
0019+  1D68             hex_letter:
0020+  1D68 87 0F         and al, $0F        ; get letter
0021+  1D6A 6A 09         add al, 9
0022+  1D6C 09            ret
0023+  1D6D             
0024+  1D6D             ;-----------------------------------------------------------------------------
0025+  1D6D             ; ATOI
0026+  1D6D             ; 2 letter hex string in B
0027+  1D6D             ; 8bit integer returned in AL
0028+  1D6D             ;-----------------------------------------------------------------------------
0029+  1D6D             _atoi:
0030+  1D6D D8            push b
0031+  1D6E 07 5F 1D      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1D71 30            mov bl, bh
0033+  1D72 DB            push al          ; save a
0034+  1D73 07 5F 1D      call hex_ascii_encode
0035+  1D76 EA            pop bl  
0036+  1D77 FD 9E 04      shl al, 4
0037+  1D7A 8C            or al, bl
0038+  1D7B E5            pop b
0039+  1D7C 09            ret  
0040+  1D7D             
0041+  1D7D             
0042+  1D7D             ;-----------------------------------------------------------------------------
0043+  1D7D             ; ITOA
0044+  1D7D             ; 8bit value in BL
0045+  1D7D             ; 2 byte ASCII result in A
0046+  1D7D             ;-----------------------------------------------------------------------------
0047+  1D7D             _itoa:
0048+  1D7D DA            push d
0049+  1D7E D8            push b
0050+  1D7F A7 00         mov bh, 0
0051+  1D81 FD A4 04      shr bl, 4  
0052+  1D84 74            mov d, b
0053+  1D85 1F 2D 20      mov al, [d + s_hex_digits]
0054+  1D88 23            mov ah, al
0055+  1D89               
0056+  1D89 E5            pop b
0057+  1D8A D8            push b
0058+  1D8B A7 00         mov bh, 0
0059+  1D8D FD 87 0F      and bl, $0F
0060+  1D90 74            mov d, b
0061+  1D91 1F 2D 20      mov al, [d + s_hex_digits]
0062+  1D94 E5            pop b
0063+  1D95 E7            pop d
0064+  1D96 09            ret
0065+  1D97             
0066+  1D97             ;-----------------------------------------------------------------------------
0067+  1D97             ; HEX STRING TO BINARY
0068+  1D97             ; di = destination address
0069+  1D97             ; si = source
0070+  1D97             ;-----------------------------------------------------------------------------
0071+  1D97             _hex_to_int:
0072+  1D97             _hex_to_int_L1:
0073+  1D97 F6            lodsb          ; load from [SI] to AL
0074+  1D98 B9 00         cmp al, 0        ; check if ASCII 0
0075+  1D9A C6 A7 1D      jz _hex_to_int_ret
0076+  1D9D 36            mov bh, al
0077+  1D9E F6            lodsb
0078+  1D9F 2F            mov bl, al
0079+  1DA0 07 6D 1D      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1DA3 F7            stosb          ; store AL to [DI]
0081+  1DA4 0A 97 1D      jmp _hex_to_int_L1
0082+  1DA7             _hex_to_int_ret:
0083+  1DA7 09            ret    
0084+  1DA8             
0085+  1DA8             ;-----------------------------------------------------------------------------
0086+  1DA8             ; GETCHAR
0087+  1DA8             ; char in ah
0088+  1DA8             ;-----------------------------------------------------------------------------
0089+  1DA8             getch:
0090+  1DA8 DB            push al
0091+  1DA9             getch_retry:
0092+  1DA9 19 01         mov al, 1
0093+  1DAB 05 03         syscall sys_io      ; receive in AH
0094+  1DAD E8            pop al
0095+  1DAE 09            ret
0096+  1DAF             
0097+  1DAF             ;-----------------------------------------------------------------------------
0098+  1DAF             ; PUTCHAR
0099+  1DAF             ; char in ah
0100+  1DAF             ;-----------------------------------------------------------------------------
0101+  1DAF             _putchar:
0102+  1DAF D7            push a
0103+  1DB0 19 00         mov al, 0
0104+  1DB2 05 03         syscall sys_io      ; char in AH
0105+  1DB4 E4            pop a
0106+  1DB5 09            ret
0107+  1DB6             
0108+  1DB6             ;-----------------------------------------------------------------------------
0109+  1DB6             ;; INPUT A STRING
0110+  1DB6             ;; terminates with null
0111+  1DB6             ;; pointer in D
0112+  1DB6             ;-----------------------------------------------------------------------------
0113+  1DB6             _gets:
0114+  1DB6 D7            push a
0115+  1DB7 DA            push d
0116+  1DB8             _gets_loop:
0117+  1DB8 19 01         mov al, 1
0118+  1DBA 05 03         syscall sys_io      ; receive in AH
0119+  1DBC B9 00         cmp al, 0        ; check error code (AL)
0120+  1DBE C6 B8 1D      je _gets_loop      ; if no char received, retry
0121+  1DC1             
0122+  1DC1 76 1B         cmp ah, 27
0123+  1DC3 C6 E4 1D      je _gets_ansi_esc
0124+  1DC6 76 0A         cmp ah, $0A        ; LF
0125+  1DC8 C6 4F 1E      je _gets_end
0126+  1DCB 76 0D         cmp ah, $0D        ; CR
0127+  1DCD C6 4F 1E      je _gets_end
0128+  1DD0 76 5C         cmp ah, $5C        ; '\\'
0129+  1DD2 C6 10 1E      je _gets_escape
0130+  1DD5               
0131+  1DD5 76 08         cmp ah, $08      ; check for backspace
0132+  1DD7 C6 E0 1D      je _gets_backspace
0133+  1DDA             
0134+  1DDA 1A            mov al, ah
0135+  1DDB 3E            mov [d], al
0136+  1DDC 79            inc d
0137+  1DDD 0A B8 1D      jmp _gets_loop
0138+  1DE0             _gets_backspace:
0139+  1DE0 7F            dec d
0140+  1DE1 0A B8 1D      jmp _gets_loop
0141+  1DE4             _gets_ansi_esc:
0142+  1DE4 19 01         mov al, 1
0143+  1DE6 05 03         syscall sys_io        ; receive in AH without echo
0144+  1DE8 B9 00         cmp al, 0          ; check error code (AL)
0145+  1DEA C6 E4 1D      je _gets_ansi_esc    ; if no char received, retry
0146+  1DED 76 5B         cmp ah, '['
0147+  1DEF C7 B8 1D      jne _gets_loop
0148+  1DF2             _gets_ansi_esc_2:
0149+  1DF2 19 01         mov al, 1
0150+  1DF4 05 03         syscall sys_io          ; receive in AH without echo
0151+  1DF6 B9 00         cmp al, 0            ; check error code (AL)
0152+  1DF8 C6 F2 1D      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1DFB 76 44         cmp ah, 'D'
0154+  1DFD C6 08 1E      je _gets_left_arrow
0155+  1E00 76 43         cmp ah, 'C'
0156+  1E02 C6 0C 1E      je _gets_right_arrow
0157+  1E05 0A B8 1D      jmp _gets_loop
0158+  1E08             _gets_left_arrow:
0159+  1E08 7F            dec d
0160+  1E09 0A B8 1D      jmp _gets_loop
0161+  1E0C             _gets_right_arrow:
0162+  1E0C 79            inc d
0163+  1E0D 0A B8 1D      jmp _gets_loop
0164+  1E10             _gets_escape:
0165+  1E10 19 01         mov al, 1
0166+  1E12 05 03         syscall sys_io      ; receive in AH
0167+  1E14 B9 00         cmp al, 0        ; check error code (AL)
0168+  1E16 C6 10 1E      je _gets_escape      ; if no char received, retry
0169+  1E19 76 6E         cmp ah, 'n'
0170+  1E1B C6 3A 1E      je _gets_LF
0171+  1E1E 76 72         cmp ah, 'r'
0172+  1E20 C6 41 1E      je _gets_CR
0173+  1E23 76 30         cmp ah, '0'
0174+  1E25 C6 48 1E      je _gets_NULL
0175+  1E28 76 5C         cmp ah, $5C  ; '\'
0176+  1E2A C6 33 1E      je _gets_slash
0177+  1E2D 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1E2E 3E            mov [d], al
0179+  1E2F 79            inc d
0180+  1E30 0A B8 1D      jmp _gets_loop
0181+  1E33             _gets_slash:
0182+  1E33 19 5C         mov al, $5C
0183+  1E35 3E            mov [d], al
0184+  1E36 79            inc d
0185+  1E37 0A B8 1D      jmp _gets_loop
0186+  1E3A             _gets_LF:
0187+  1E3A 19 0A         mov al, $0A
0188+  1E3C 3E            mov [d], al
0189+  1E3D 79            inc d
0190+  1E3E 0A B8 1D      jmp _gets_loop
0191+  1E41             _gets_CR:
0192+  1E41 19 0D         mov al, $0D
0193+  1E43 3E            mov [d], al
0194+  1E44 79            inc d
0195+  1E45 0A B8 1D      jmp _gets_loop
0196+  1E48             _gets_NULL:
0197+  1E48 19 00         mov al, $00
0198+  1E4A 3E            mov [d], al
0199+  1E4B 79            inc d
0200+  1E4C 0A B8 1D      jmp _gets_loop
0201+  1E4F             _gets_end:
0202+  1E4F 19 00         mov al, 0
0203+  1E51 3E            mov [d], al        ; terminate string
0204+  1E52 E7            pop d
0205+  1E53 E4            pop a
0206+  1E54 09            ret
0207+  1E55             
0208+  1E55             ;-----------------------------------------------------------------------------
0209+  1E55             ;; INPUT TEXT
0210+  1E55             ;; terminated with CTRL+D
0211+  1E55             ;; pointer in D
0212+  1E55             ;-----------------------------------------------------------------------------
0213+  1E55             _gettxt:
0214+  1E55 D7            push a
0215+  1E56 DA            push d
0216+  1E57             _gettxt_loop:
0217+  1E57 19 01         mov al, 1
0218+  1E59 05 03         syscall sys_io      ; receive in AH
0219+  1E5B B9 00         cmp al, 0        ; check error code (AL)
0220+  1E5D C6 57 1E      je _gettxt_loop    ; if no char received, retry
0221+  1E60 76 04         cmp ah, 4      ; EOT
0222+  1E62 C6 A0 1E      je _gettxt_end
0223+  1E65 76 08         cmp ah, $08      ; check for backspace
0224+  1E67 C6 9C 1E      je _gettxt_backspace
0225+  1E6A 76 5C         cmp ah, $5C        ; '\'
0226+  1E6C C6 75 1E      je _gettxt_escape
0227+  1E6F 1A            mov al, ah
0228+  1E70 3E            mov [d], al
0229+  1E71 79            inc d
0230+  1E72 0A 57 1E      jmp _gettxt_loop
0231+  1E75             _gettxt_escape:
0232+  1E75 19 01         mov al, 1
0233+  1E77 05 03         syscall sys_io      ; receive in AH
0234+  1E79 B9 00         cmp al, 0        ; check error code (AL)
0235+  1E7B C6 75 1E      je _gettxt_escape    ; if no char received, retry
0236+  1E7E 76 6E         cmp ah, 'n'
0237+  1E80 C6 8E 1E      je _gettxt_LF
0238+  1E83 76 72         cmp ah, 'r'
0239+  1E85 C6 95 1E      je _gettxt_CR
0240+  1E88 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1E89 3E            mov [d], al
0242+  1E8A 79            inc d
0243+  1E8B 0A 57 1E      jmp _gettxt_loop
0244+  1E8E             _gettxt_LF:
0245+  1E8E 19 0A         mov al, $0A
0246+  1E90 3E            mov [d], al
0247+  1E91 79            inc d
0248+  1E92 0A 57 1E      jmp _gettxt_loop
0249+  1E95             _gettxt_CR:
0250+  1E95 19 0D         mov al, $0D
0251+  1E97 3E            mov [d], al
0252+  1E98 79            inc d
0253+  1E99 0A 57 1E      jmp _gettxt_loop
0254+  1E9C             _gettxt_backspace:
0255+  1E9C 7F            dec d
0256+  1E9D 0A 57 1E      jmp _gettxt_loop
0257+  1EA0             _gettxt_end:
0258+  1EA0 19 00         mov al, 0
0259+  1EA2 3E            mov [d], al        ; terminate string
0260+  1EA3 E7            pop d
0261+  1EA4 E4            pop a
0262+  1EA5 09            ret
0263+  1EA6             
0264+  1EA6             ;-----------------------------------------------------------------------------
0265+  1EA6             ; PRINT NEW LINE
0266+  1EA6             ;-----------------------------------------------------------------------------
0267+  1EA6             printnl:
0268+  1EA6 D7            push a
0269+  1EA7 10 00 0A      mov a, $0A00
0270+  1EAA 05 03         syscall sys_io
0271+  1EAC 10 00 0D      mov a, $0D00
0272+  1EAF 05 03         syscall sys_io
0273+  1EB1 E4            pop a
0274+  1EB2 09            ret
0275+  1EB3             
0276+  1EB3             ;-----------------------------------------------------------------------------
0277+  1EB3             ; _strtoint
0278+  1EB3             ; 4 digit hex string number in d
0279+  1EB3             ; integer returned in A
0280+  1EB3             ;-----------------------------------------------------------------------------
0281+  1EB3             _strtointx:
0282+  1EB3 D8            push b
0283+  1EB4 32            mov bl, [d]
0284+  1EB5 37            mov bh, bl
0285+  1EB6 33 01 00      mov bl, [d + 1]
0286+  1EB9 07 6D 1D      call _atoi        ; convert to int in AL
0287+  1EBC 23            mov ah, al        ; move to AH
0288+  1EBD 33 02 00      mov bl, [d + 2]
0289+  1EC0 37            mov bh, bl
0290+  1EC1 33 03 00      mov bl, [d + 3]
0291+  1EC4 07 6D 1D      call _atoi        ; convert to int in AL
0292+  1EC7 E5            pop b
0293+  1EC8 09            ret
0294+  1EC9             
0295+  1EC9             ;-----------------------------------------------------------------------------
0296+  1EC9             ; _strtoint
0297+  1EC9             ; 5 digit base10 string number in d
0298+  1EC9             ; integer returned in A
0299+  1EC9             ;-----------------------------------------------------------------------------
0300+  1EC9             _strtoint:
0301+  1EC9 E2            push si
0302+  1ECA D8            push b
0303+  1ECB D9            push c
0304+  1ECC DA            push d
0305+  1ECD 07 0F 1D      call _strlen      ; get string length in C
0306+  1ED0 7E            dec c
0307+  1ED1 FD 4E         mov si, d
0308+  1ED3 12            mov a, c
0309+  1ED4 FD 99         shl a
0310+  1ED6 3B 45 20      mov d, table_power
0311+  1ED9 59            add d, a
0312+  1EDA 38 00 00      mov c, 0
0313+  1EDD             _strtoint_L0:
0314+  1EDD F6            lodsb      ; load ASCII to al
0315+  1EDE B9 00         cmp al, 0
0316+  1EE0 C6 F3 1E      je _strtoint_end
0317+  1EE3 6F 30         sub al, $30    ; make into integer
0318+  1EE5 22 00         mov ah, 0
0319+  1EE7 2A            mov b, [d]
0320+  1EE8 AC            mul a, b      ; result in B since it fits in 16bits
0321+  1EE9 11            mov a, b
0322+  1EEA 28            mov b, c
0323+  1EEB 54            add a, b
0324+  1EEC 39            mov c, a
0325+  1EED 63 02 00      sub d, 2
0326+  1EF0 0A DD 1E      jmp _strtoint_L0
0327+  1EF3             _strtoint_end:
0328+  1EF3 12            mov a, c
0329+  1EF4 E7            pop d
0330+  1EF5 E6            pop c
0331+  1EF6 E5            pop b
0332+  1EF7 EF            pop si
0333+  1EF8 09            ret
0334+  1EF9             
0335+  1EF9             ;-----------------------------------------------------------------------------
0336+  1EF9             ; PRINT NULL TERMINATED STRING
0337+  1EF9             ; pointer in D
0338+  1EF9             ;-----------------------------------------------------------------------------
0339+  1EF9             _puts:
0340+  1EF9 D7            push a
0341+  1EFA DA            push d
0342+  1EFB             _puts_L1:
0343+  1EFB 1E            mov al, [d]
0344+  1EFC B9 00         cmp al, 0
0345+  1EFE C6 0A 1F      jz _puts_END
0346+  1F01 23            mov ah, al
0347+  1F02 19 00         mov al, 0
0348+  1F04 05 03         syscall sys_io
0349+  1F06 79            inc d
0350+  1F07 0A FB 1E      jmp _puts_L1
0351+  1F0A             _puts_END:
0352+  1F0A E7            pop d
0353+  1F0B E4            pop a
0354+  1F0C 09            ret
0355+  1F0D             
0356+  1F0D             ;-----------------------------------------------------------------------------
0357+  1F0D             ; PRINT N SIZE STRING
0358+  1F0D             ; pointer in D
0359+  1F0D             ; size in C
0360+  1F0D             ;-----------------------------------------------------------------------------
0361+  1F0D             _putsn:
0362+  1F0D DB            push al
0363+  1F0E DA            push d
0364+  1F0F D9            push c
0365+  1F10             _putsn_L0:
0366+  1F10 1E            mov al, [d]
0367+  1F11 23            mov ah, al
0368+  1F12 19 00         mov al, 0
0369+  1F14 05 03         syscall sys_io
0370+  1F16 79            inc d
0371+  1F17 7E            dec c  
0372+  1F18 C2 00 00      cmp c, 0
0373+  1F1B C7 10 1F      jne _putsn_L0
0374+  1F1E             _putsn_end:
0375+  1F1E E6            pop c
0376+  1F1F E7            pop d
0377+  1F20 E8            pop al
0378+  1F21 09            ret
0379+  1F22             
0380+  1F22             ;-----------------------------------------------------------------------------
0381+  1F22             ; print 16bit decimal number
0382+  1F22             ; input number in A
0383+  1F22             ;-----------------------------------------------------------------------------
0384+  1F22             print_u16d:
0385+  1F22 D7            push a
0386+  1F23 D8            push b
0387+  1F24 26 10 27      mov b, 10000
0388+  1F27 AE            div a, b      ; get 10000's coeff.
0389+  1F28 07 4A 1F      call print_number
0390+  1F2B 11            mov a, b
0391+  1F2C 26 E8 03      mov b, 1000
0392+  1F2F AE            div a, b      ; get 1000's coeff.
0393+  1F30 07 4A 1F      call print_number
0394+  1F33 11            mov a, b
0395+  1F34 26 64 00      mov b, 100
0396+  1F37 AE            div a, b
0397+  1F38 07 4A 1F      call print_number
0398+  1F3B 11            mov a, b
0399+  1F3C 26 0A 00      mov b, 10
0400+  1F3F AE            div a, b
0401+  1F40 07 4A 1F      call print_number
0402+  1F43 1B            mov al, bl      ; 1's coeff in bl
0403+  1F44 07 4A 1F      call print_number
0404+  1F47 E5            pop b
0405+  1F48 E4            pop a
0406+  1F49 09            ret
0407+  1F4A             
0408+  1F4A             ;-----------------------------------------------------------------------------
0409+  1F4A             ; print AL
0410+  1F4A             ;-----------------------------------------------------------------------------
0411+  1F4A             print_number:
0412+  1F4A 6A 30         add al, $30
0413+  1F4C 23            mov ah, al
0414+  1F4D 07 AF 1D      call _putchar
0415+  1F50 09            ret
0416+  1F51             
0417+  1F51             ;-----------------------------------------------------------------------------
0418+  1F51             ; PRINT 16BIT HEX INTEGER
0419+  1F51             ; integer value in reg B
0420+  1F51             ;-----------------------------------------------------------------------------
0421+  1F51             print_u16x:
0422+  1F51 D7            push a
0423+  1F52 D8            push b
0424+  1F53 DD            push bl
0425+  1F54 30            mov bl, bh
0426+  1F55 07 7D 1D      call _itoa        ; convert bh to char in A
0427+  1F58 2F            mov bl, al        ; save al
0428+  1F59 19 00         mov al, 0
0429+  1F5B 05 03         syscall sys_io        ; display AH
0430+  1F5D 24            mov ah, bl        ; retrieve al
0431+  1F5E 19 00         mov al, 0
0432+  1F60 05 03         syscall sys_io        ; display AL
0433+  1F62             
0434+  1F62 EA            pop bl
0435+  1F63 07 7D 1D      call _itoa        ; convert bh to char in A
0436+  1F66 2F            mov bl, al        ; save al
0437+  1F67 19 00         mov al, 0
0438+  1F69 05 03         syscall sys_io        ; display AH
0439+  1F6B 24            mov ah, bl        ; retrieve al
0440+  1F6C 19 00         mov al, 0
0441+  1F6E 05 03         syscall sys_io        ; display AL
0442+  1F70             
0443+  1F70 E5            pop b
0444+  1F71 E4            pop a
0445+  1F72 09            ret
0446+  1F73             
0447+  1F73             ;-----------------------------------------------------------------------------
0448+  1F73             ; INPUT 16BIT HEX INTEGER
0449+  1F73             ; read 16bit integer into A
0450+  1F73             ;-----------------------------------------------------------------------------
0451+  1F73             scan_u16x:
0452+  1F73 F8 10 00      enter 16
0453+  1F76 D8            push b
0454+  1F77 DA            push d
0455+  1F78             
0456+  1F78 FA F1 FF      lea d, [bp + -15]
0457+  1F7B 07 B6 1D      call _gets        ; get number
0458+  1F7E             
0459+  1F7E 32            mov bl, [d]
0460+  1F7F 37            mov bh, bl
0461+  1F80 33 01 00      mov bl, [d + 1]
0462+  1F83 07 6D 1D      call _atoi        ; convert to int in AL
0463+  1F86 23            mov ah, al        ; move to AH
0464+  1F87             
0465+  1F87 33 02 00      mov bl, [d + 2]
0466+  1F8A 37            mov bh, bl
0467+  1F8B 33 03 00      mov bl, [d + 3]
0468+  1F8E 07 6D 1D      call _atoi        ; convert to int in AL
0469+  1F91             
0470+  1F91 E7            pop d
0471+  1F92 E5            pop b
0472+  1F93 F9            leave
0473+  1F94 09            ret
0474+  1F95             
0475+  1F95             ;-----------------------------------------------------------------------------
0476+  1F95             ; PRINT 8bit HEX INTEGER
0477+  1F95             ; integer value in reg bl
0478+  1F95             ;-----------------------------------------------------------------------------
0479+  1F95             print_u8x:
0480+  1F95 D7            push a
0481+  1F96 DD            push bl
0482+  1F97             
0483+  1F97 07 7D 1D      call _itoa        ; convert bl to char in A
0484+  1F9A 2F            mov bl, al        ; save al
0485+  1F9B 19 00         mov al, 0
0486+  1F9D 05 03         syscall sys_io        ; display AH
0487+  1F9F 24            mov ah, bl        ; retrieve al
0488+  1FA0 19 00         mov al, 0
0489+  1FA2 05 03         syscall sys_io        ; display AL
0490+  1FA4             
0491+  1FA4 EA            pop bl
0492+  1FA5 E4            pop a
0493+  1FA6 09            ret
0494+  1FA7             
0495+  1FA7             ;-----------------------------------------------------------------------------
0496+  1FA7             ; print 8bit decimal unsigned number
0497+  1FA7             ; input number in AL
0498+  1FA7             ;-----------------------------------------------------------------------------
0499+  1FA7             print_u8d:
0500+  1FA7 D7            push a
0501+  1FA8 D8            push b
0502+  1FA9             
0503+  1FA9 22 00         mov ah, 0
0504+  1FAB 26 64 00      mov b, 100
0505+  1FAE AE            div a, b
0506+  1FAF D8            push b      ; save remainder
0507+  1FB0 B9 00         cmp al, 0
0508+  1FB2 C6 BC 1F      je skip100
0509+  1FB5 6A 30         add al, $30
0510+  1FB7 23            mov ah, al
0511+  1FB8 19 00         mov al, 0
0512+  1FBA 05 03         syscall sys_io  ; print coeff
0513+  1FBC             skip100:
0514+  1FBC E4            pop a
0515+  1FBD 22 00         mov ah, 0
0516+  1FBF 26 0A 00      mov b, 10
0517+  1FC2 AE            div a, b
0518+  1FC3 D8            push b      ; save remainder
0519+  1FC4 B9 00         cmp al, 0
0520+  1FC6 C6 D0 1F      je skip10
0521+  1FC9 6A 30         add al, $30
0522+  1FCB 23            mov ah, al
0523+  1FCC 19 00         mov al, 0
0524+  1FCE 05 03         syscall sys_io  ; print coeff
0525+  1FD0             skip10:
0526+  1FD0 E4            pop a
0527+  1FD1 1B            mov al, bl
0528+  1FD2 6A 30         add al, $30
0529+  1FD4 23            mov ah, al
0530+  1FD5 19 00         mov al, 0
0531+  1FD7 05 03         syscall sys_io  ; print coeff
0532+  1FD9 E5            pop b
0533+  1FDA E4            pop a
0534+  1FDB 09            ret
0535+  1FDC             
0536+  1FDC             ;-----------------------------------------------------------------------------
0537+  1FDC             ; INPUT 8BIT HEX INTEGER
0538+  1FDC             ; read 8bit integer into AL
0539+  1FDC             ;-----------------------------------------------------------------------------
0540+  1FDC             scan_u8x:
0541+  1FDC F8 04 00      enter 4
0542+  1FDF D8            push b
0543+  1FE0 DA            push d
0544+  1FE1             
0545+  1FE1 FA FD FF      lea d, [bp + -3]
0546+  1FE4 07 B6 1D      call _gets        ; get number
0547+  1FE7             
0548+  1FE7 32            mov bl, [d]
0549+  1FE8 37            mov bh, bl
0550+  1FE9 33 01 00      mov bl, [d + 1]
0551+  1FEC 07 6D 1D      call _atoi        ; convert to int in AL
0552+  1FEF             
0553+  1FEF E7            pop d
0554+  1FF0 E5            pop b
0555+  1FF1 F9            leave
0556+  1FF2 09            ret
0557+  1FF3             
0558+  1FF3             ;-----------------------------------------------------------------------------
0559+  1FF3             ; input decimal number
0560+  1FF3             ; result in A
0561+  1FF3             ; 655'\0'
0562+  1FF3             ; low--------high
0563+  1FF3             ;-----------------------------------------------------------------------------
0564+  1FF3             scan_u16d:
0565+  1FF3 F8 08 00      enter 8
0566+  1FF6 E2            push si
0567+  1FF7 D8            push b
0568+  1FF8 D9            push c
0569+  1FF9 DA            push d
0570+  1FFA FA F9 FF      lea d, [bp +- 7]
0571+  1FFD 07 B6 1D      call _gets
0572+  2000 07 0F 1D      call _strlen      ; get string length in C
0573+  2003 7E            dec c
0574+  2004 FD 4E         mov si, d
0575+  2006 12            mov a, c
0576+  2007 FD 99         shl a
0577+  2009 3B 45 20      mov d, table_power
0578+  200C 59            add d, a
0579+  200D 38 00 00      mov c, 0
0580+  2010             mul_loop:
0581+  2010 F6            lodsb      ; load ASCII to al
0582+  2011 B9 00         cmp al, 0
0583+  2013 C6 26 20      je mul_exit
0584+  2016 6F 30         sub al, $30    ; make into integer
0585+  2018 22 00         mov ah, 0
0586+  201A 2A            mov b, [d]
0587+  201B AC            mul a, b      ; result in B since it fits in 16bits
0588+  201C 11            mov a, b
0589+  201D 28            mov b, c
0590+  201E 54            add a, b
0591+  201F 39            mov c, a
0592+  2020 63 02 00      sub d, 2
0593+  2023 0A 10 20      jmp mul_loop
0594+  2026             mul_exit:
0595+  2026 12            mov a, c
0596+  2027 E7            pop d
0597+  2028 E6            pop c
0598+  2029 E5            pop b
0599+  202A EF            pop si
0600+  202B F9            leave
0601+  202C 09            ret
0602+  202D             
0603+  202D 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  2031 34 35 36 37 
0603+  2035 38 39 41 42 
0603+  2039 43 44 45 46 
0604+  203D 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  2041 1B 5B 48 00 
0605+  2045             
0606+  2045             table_power:
0607+  2045 01 00         .dw 1
0608+  2047 0A 00         .dw 10
0609+  2049 64 00         .dw 100
0610+  204B E8 03         .dw 1000
0611+  204D 10 27         .dw 100003975   204F             ; --- END INLINE ASM SEGMENT
3976   204F             
3977   204F F9            leave
3978   2050 09            ret
3979   2051             
3980   2051             rotr:
3981   2051 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3982   2054             ; return (x >> n) | (x << (16 - n)); 
3983   2054 FA 05 00      lea d, [bp + 5] ; $x
3984   2057 2A            mov b, [d]
3985   2058             ; --- START SHIFT
3986   2058 D7            push a
3987   2059 11            mov a, b
3988   205A FA 07 00      lea d, [bp + 7] ; $n
3989   205D 2A            mov b, [d]
3990   205E FD 39         mov c, b
3991   2060 A1            shr a, cl
3992   2061 27            mov b, a
3993   2062 E4            pop a
3994   2063             ; --- END SHIFT
3995   2063 D7            push a
3996   2064 11            mov a, b
3997   2065 FA 05 00      lea d, [bp + 5] ; $x
3998   2068 2A            mov b, [d]
3999   2069             ; --- START SHIFT
4000   2069 D7            push a
4001   206A 11            mov a, b
4002   206B 26 10 00      mov b, $10
4003   206E             ; --- START TERMS
4004   206E D7            push a
4005   206F 11            mov a, b
4006   2070 FA 07 00      lea d, [bp + 7] ; $n
4007   2073 2A            mov b, [d]
4008   2074 60            sub a, b
4009   2075 27            mov b, a
4010   2076 E4            pop a
4011   2077             ; --- END TERMS
4012   2077 FD 39         mov c, b
4013   2079 9D            shl a, cl
4014   207A 27            mov b, a
4015   207B E4            pop a
4016   207C             ; --- END SHIFT
4017   207C FD 70         or b, a ; |
4018   207E E4            pop a
4019   207F F9            leave
4020   2080 09            ret
4021   2081             
4022   2081             simple_hash:
4023   2081 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4024   2084             ; unsigned int h[8]; 
4025   2084 52 10 00      sub sp, 16
4026   2087             ; unsigned int k[4]; 
4027   2087 52 08 00      sub sp, 8
4028   208A             ; h[0]=0x6745; 
4029   208A FA F1 FF      lea d, [bp + -15] ; $h
4030   208D D7            push a
4031   208E DA            push d
4032   208F 26 00 00      mov b, $0
4033   2092 E7            pop d
4034   2093 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4035   2097 E4            pop a
4036   2098 DA            push d
4037   2099 26 45 67      mov b, $6745
4038   209C E7            pop d
4039   209D FD 43         mov [d], b
4040   209F             ; h[1]=0xEFCD; 
4041   209F FA F1 FF      lea d, [bp + -15] ; $h
4042   20A2 D7            push a
4043   20A3 DA            push d
4044   20A4 26 01 00      mov b, $1
4045   20A7 E7            pop d
4046   20A8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4047   20AC E4            pop a
4048   20AD DA            push d
4049   20AE 26 CD EF      mov b, $efcd
4050   20B1 E7            pop d
4051   20B2 FD 43         mov [d], b
4052   20B4             ; h[2]=0x98AB; 
4053   20B4 FA F1 FF      lea d, [bp + -15] ; $h
4054   20B7 D7            push a
4055   20B8 DA            push d
4056   20B9 26 02 00      mov b, $2
4057   20BC E7            pop d
4058   20BD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4059   20C1 E4            pop a
4060   20C2 DA            push d
4061   20C3 26 AB 98      mov b, $98ab
4062   20C6 E7            pop d
4063   20C7 FD 43         mov [d], b
4064   20C9             ; h[3]=0xCDEF; 
4065   20C9 FA F1 FF      lea d, [bp + -15] ; $h
4066   20CC D7            push a
4067   20CD DA            push d
4068   20CE 26 03 00      mov b, $3
4069   20D1 E7            pop d
4070   20D2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4071   20D6 E4            pop a
4072   20D7 DA            push d
4073   20D8 26 EF CD      mov b, $cdef
4074   20DB E7            pop d
4075   20DC FD 43         mov [d], b
4076   20DE             ; k[0]=0x1234; 
4077   20DE FA E9 FF      lea d, [bp + -23] ; $k
4078   20E1 D7            push a
4079   20E2 DA            push d
4080   20E3 26 00 00      mov b, $0
4081   20E6 E7            pop d
4082   20E7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4083   20EB E4            pop a
4084   20EC DA            push d
4085   20ED 26 34 12      mov b, $1234
4086   20F0 E7            pop d
4087   20F1 FD 43         mov [d], b
4088   20F3             ; k[1]=0x5678; 
4089   20F3 FA E9 FF      lea d, [bp + -23] ; $k
4090   20F6 D7            push a
4091   20F7 DA            push d
4092   20F8 26 01 00      mov b, $1
4093   20FB E7            pop d
4094   20FC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4095   2100 E4            pop a
4096   2101 DA            push d
4097   2102 26 78 56      mov b, $5678
4098   2105 E7            pop d
4099   2106 FD 43         mov [d], b
4100   2108             ; k[2]=0x9ABC; 
4101   2108 FA E9 FF      lea d, [bp + -23] ; $k
4102   210B D7            push a
4103   210C DA            push d
4104   210D 26 02 00      mov b, $2
4105   2110 E7            pop d
4106   2111 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4107   2115 E4            pop a
4108   2116 DA            push d
4109   2117 26 BC 9A      mov b, $9abc
4110   211A E7            pop d
4111   211B FD 43         mov [d], b
4112   211D             ; k[3]=0xDEF0; 
4113   211D FA E9 FF      lea d, [bp + -23] ; $k
4114   2120 D7            push a
4115   2121 DA            push d
4116   2122 26 03 00      mov b, $3
4117   2125 E7            pop d
4118   2126 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4119   212A E4            pop a
4120   212B DA            push d
4121   212C 26 F0 DE      mov b, $def0
4122   212F E7            pop d
4123   2130 FD 43         mov [d], b
4124   2132             ; unsigned int i,j; 
4125   2132 52 02 00      sub sp, 2
4126   2135 52 02 00      sub sp, 2
4127   2138             ; unsigned int val;; 
4128   2138 52 02 00      sub sp, 2
4129   213B             ; ; 
4130   213B             ; unsigned int len; 
4131   213B 52 02 00      sub sp, 2
4132   213E             ; len = strlen(input); 
4133   213E FA E1 FF      lea d, [bp + -31] ; $len
4134   2141 DA            push d
4135   2142 FA 05 00      lea d, [bp + 5] ; $input
4136   2145 2A            mov b, [d]
4137   2146 FD AB         swp b
4138   2148 D8            push b
4139   2149 07 59 06      call strlen
4140   214C 51 02 00      add sp, 2
4141   214F E7            pop d
4142   2150 FD 43         mov [d], b
4143   2152             ; for (i = 0; i < len; i++) { 
4144   2152             _for59_init:
4145   2152 FA E7 FF      lea d, [bp + -25] ; $i
4146   2155 DA            push d
4147   2156 26 00 00      mov b, $0
4148   2159 E7            pop d
4149   215A FD 43         mov [d], b
4150   215C             _for59_cond:
4151   215C FA E7 FF      lea d, [bp + -25] ; $i
4152   215F 2A            mov b, [d]
4153   2160             ; --- START RELATIONAL
4154   2160 D7            push a
4155   2161 11            mov a, b
4156   2162 FA E1 FF      lea d, [bp + -31] ; $len
4157   2165 2A            mov b, [d]
4158   2166 B0            cmp a, b
4159   2167 FD 75         slu ; < (unsigned)
4160   2169 E4            pop a
4161   216A             ; --- END RELATIONAL
4162   216A C0 00 00      cmp b, 0
4163   216D C6 86 22      je _for59_exit
4164   2170             _for59_block:
4165   2170             ; val = (unsigned char)input[i]; 
4166   2170 FA E3 FF      lea d, [bp + -29] ; $val
4167   2173 DA            push d
4168   2174 FA 05 00      lea d, [bp + 5] ; $input
4169   2177 FD 2A         mov d, [d]
4170   2179 D7            push a
4171   217A DA            push d
4172   217B FA E7 FF      lea d, [bp + -25] ; $i
4173   217E 2A            mov b, [d]
4174   217F E7            pop d
4175   2180 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4176   2184 E4            pop a
4177   2185 32            mov bl, [d]
4178   2186 A7 00         mov bh, 0
4179   2188 A7 00         mov bh, 0
4180   218A E7            pop d
4181   218B FD 43         mov [d], b
4182   218D             ; for (j = 0; j < 4; j++) { 
4183   218D             _for60_init:
4184   218D FA E5 FF      lea d, [bp + -27] ; $j
4185   2190 DA            push d
4186   2191 26 00 00      mov b, $0
4187   2194 E7            pop d
4188   2195 FD 43         mov [d], b
4189   2197             _for60_cond:
4190   2197 FA E5 FF      lea d, [bp + -27] ; $j
4191   219A 2A            mov b, [d]
4192   219B             ; --- START RELATIONAL
4193   219B D7            push a
4194   219C 11            mov a, b
4195   219D 26 04 00      mov b, $4
4196   21A0 B0            cmp a, b
4197   21A1 FD 75         slu ; < (unsigned)
4198   21A3 E4            pop a
4199   21A4             ; --- END RELATIONAL
4200   21A4 C0 00 00      cmp b, 0
4201   21A7 C6 76 22      je _for60_exit
4202   21AA             _for60_block:
4203   21AA             ; h[j] = h[j] ^ rotr(val + k[j], j + 1); 
4204   21AA FA F1 FF      lea d, [bp + -15] ; $h
4205   21AD D7            push a
4206   21AE DA            push d
4207   21AF FA E5 FF      lea d, [bp + -27] ; $j
4208   21B2 2A            mov b, [d]
4209   21B3 E7            pop d
4210   21B4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4211   21B8 E4            pop a
4212   21B9 DA            push d
4213   21BA FA F1 FF      lea d, [bp + -15] ; $h
4214   21BD D7            push a
4215   21BE DA            push d
4216   21BF FA E5 FF      lea d, [bp + -27] ; $j
4217   21C2 2A            mov b, [d]
4218   21C3 E7            pop d
4219   21C4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4220   21C8 E4            pop a
4221   21C9 2A            mov b, [d]
4222   21CA D7            push a
4223   21CB 11            mov a, b
4224   21CC FA E5 FF      lea d, [bp + -27] ; $j
4225   21CF 2A            mov b, [d]
4226   21D0             ; --- START TERMS
4227   21D0 D7            push a
4228   21D1 11            mov a, b
4229   21D2 26 01 00      mov b, $1
4230   21D5 56            add b, a
4231   21D6 E4            pop a
4232   21D7             ; --- END TERMS
4233   21D7 FD AB         swp b
4234   21D9 D8            push b
4235   21DA FA E3 FF      lea d, [bp + -29] ; $val
4236   21DD 2A            mov b, [d]
4237   21DE             ; --- START TERMS
4238   21DE D7            push a
4239   21DF 11            mov a, b
4240   21E0 FA E9 FF      lea d, [bp + -23] ; $k
4241   21E3 D7            push a
4242   21E4 DA            push d
4243   21E5 FA E5 FF      lea d, [bp + -27] ; $j
4244   21E8 2A            mov b, [d]
4245   21E9 E7            pop d
4246   21EA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4247   21EE E4            pop a
4248   21EF 2A            mov b, [d]
4249   21F0 56            add b, a
4250   21F1 E4            pop a
4251   21F2             ; --- END TERMS
4252   21F2 FD AB         swp b
4253   21F4 D8            push b
4254   21F5 07 51 20      call rotr
4255   21F8 51 04 00      add sp, 4
4256   21FB 8E            xor a, b ; ^
4257   21FC 27            mov b, a
4258   21FD E4            pop a
4259   21FE E7            pop d
4260   21FF FD 43         mov [d], b
4261   2201             ; h[j] = h[j] + val; 
4262   2201 FA F1 FF      lea d, [bp + -15] ; $h
4263   2204 D7            push a
4264   2205 DA            push d
4265   2206 FA E5 FF      lea d, [bp + -27] ; $j
4266   2209 2A            mov b, [d]
4267   220A E7            pop d
4268   220B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4269   220F E4            pop a
4270   2210 DA            push d
4271   2211 FA F1 FF      lea d, [bp + -15] ; $h
4272   2214 D7            push a
4273   2215 DA            push d
4274   2216 FA E5 FF      lea d, [bp + -27] ; $j
4275   2219 2A            mov b, [d]
4276   221A E7            pop d
4277   221B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4278   221F E4            pop a
4279   2220 2A            mov b, [d]
4280   2221             ; --- START TERMS
4281   2221 D7            push a
4282   2222 11            mov a, b
4283   2223 FA E3 FF      lea d, [bp + -29] ; $val
4284   2226 2A            mov b, [d]
4285   2227 56            add b, a
4286   2228 E4            pop a
4287   2229             ; --- END TERMS
4288   2229 E7            pop d
4289   222A FD 43         mov [d], b
4290   222C             ; h[j] = rotr(h[j], j + 1); 
4291   222C FA F1 FF      lea d, [bp + -15] ; $h
4292   222F D7            push a
4293   2230 DA            push d
4294   2231 FA E5 FF      lea d, [bp + -27] ; $j
4295   2234 2A            mov b, [d]
4296   2235 E7            pop d
4297   2236 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4298   223A E4            pop a
4299   223B DA            push d
4300   223C FA E5 FF      lea d, [bp + -27] ; $j
4301   223F 2A            mov b, [d]
4302   2240             ; --- START TERMS
4303   2240 D7            push a
4304   2241 11            mov a, b
4305   2242 26 01 00      mov b, $1
4306   2245 56            add b, a
4307   2246 E4            pop a
4308   2247             ; --- END TERMS
4309   2247 FD AB         swp b
4310   2249 D8            push b
4311   224A FA F1 FF      lea d, [bp + -15] ; $h
4312   224D D7            push a
4313   224E DA            push d
4314   224F FA E5 FF      lea d, [bp + -27] ; $j
4315   2252 2A            mov b, [d]
4316   2253 E7            pop d
4317   2254 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4318   2258 E4            pop a
4319   2259 2A            mov b, [d]
4320   225A FD AB         swp b
4321   225C D8            push b
4322   225D 07 51 20      call rotr
4323   2260 51 04 00      add sp, 4
4324   2263 E7            pop d
4325   2264 FD 43         mov [d], b
4326   2266             _for60_update:
4327   2266 FA E5 FF      lea d, [bp + -27] ; $j
4328   2269 2A            mov b, [d]
4329   226A FD 77         inc b
4330   226C FA E5 FF      lea d, [bp + -27] ; $j
4331   226F FD 43         mov [d], b
4332   2271 FD 7D         dec b
4333   2273 0A 97 21      jmp _for60_cond
4334   2276             _for60_exit:
4335   2276             _for59_update:
4336   2276 FA E7 FF      lea d, [bp + -25] ; $i
4337   2279 2A            mov b, [d]
4338   227A FD 77         inc b
4339   227C FA E7 FF      lea d, [bp + -25] ; $i
4340   227F FD 43         mov [d], b
4341   2281 FD 7D         dec b
4342   2283 0A 5C 21      jmp _for59_cond
4343   2286             _for59_exit:
4344   2286             ; for (i = 0; i <   16           / 2; i++) { 
4345   2286             _for61_init:
4346   2286 FA E7 FF      lea d, [bp + -25] ; $i
4347   2289 DA            push d
4348   228A 26 00 00      mov b, $0
4349   228D E7            pop d
4350   228E FD 43         mov [d], b
4351   2290             _for61_cond:
4352   2290 FA E7 FF      lea d, [bp + -25] ; $i
4353   2293 2A            mov b, [d]
4354   2294             ; --- START RELATIONAL
4355   2294 D7            push a
4356   2295 11            mov a, b
4357   2296 26 10 00      mov b, $10
4358   2299             ; --- START FACTORS
4359   2299 D7            push a
4360   229A 11            mov a, b
4361   229B 26 02 00      mov b, $2
4362   229E AE            div a, b
4363   229F 27            mov b, a
4364   22A0 E4            pop a
4365   22A1             ; --- END FACTORS
4366   22A1 B0            cmp a, b
4367   22A2 FD 75         slu ; < (unsigned)
4368   22A4 E4            pop a
4369   22A5             ; --- END RELATIONAL
4370   22A5 C0 00 00      cmp b, 0
4371   22A8 C6 30 23      je _for61_exit
4372   22AB             _for61_block:
4373   22AB             ; output[i * 2] = h[i] & 0xFF; 
4374   22AB 2C 07 00      mov b, [bp + 7] ; $output
4375   22AE 74            mov d, b
4376   22AF D7            push a
4377   22B0 DA            push d
4378   22B1 FA E7 FF      lea d, [bp + -25] ; $i
4379   22B4 2A            mov b, [d]
4380   22B5             ; --- START FACTORS
4381   22B5 D7            push a
4382   22B6 11            mov a, b
4383   22B7 26 02 00      mov b, $2
4384   22BA AC            mul a, b ; *
4385   22BB 11            mov a, b
4386   22BC 27            mov b, a
4387   22BD E4            pop a
4388   22BE             ; --- END FACTORS
4389   22BE E7            pop d
4390   22BF 5A            add d, b
4391   22C0 E4            pop a
4392   22C1 DA            push d
4393   22C2 FA F1 FF      lea d, [bp + -15] ; $h
4394   22C5 D7            push a
4395   22C6 DA            push d
4396   22C7 FA E7 FF      lea d, [bp + -25] ; $i
4397   22CA 2A            mov b, [d]
4398   22CB E7            pop d
4399   22CC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4400   22D0 E4            pop a
4401   22D1 2A            mov b, [d]
4402   22D2 D7            push a
4403   22D3 11            mov a, b
4404   22D4 26 FF 00      mov b, $ff
4405   22D7 FD 92         and b, a ; &
4406   22D9 E4            pop a
4407   22DA E7            pop d
4408   22DB FD 3E         mov [d], bl
4409   22DD             ; output[i * 2 + 1] = (h[i] >> 8) & 0xFF; 
4410   22DD 2C 07 00      mov b, [bp + 7] ; $output
4411   22E0 74            mov d, b
4412   22E1 D7            push a
4413   22E2 DA            push d
4414   22E3 FA E7 FF      lea d, [bp + -25] ; $i
4415   22E6 2A            mov b, [d]
4416   22E7             ; --- START FACTORS
4417   22E7 D7            push a
4418   22E8 11            mov a, b
4419   22E9 26 02 00      mov b, $2
4420   22EC AC            mul a, b ; *
4421   22ED 11            mov a, b
4422   22EE 27            mov b, a
4423   22EF E4            pop a
4424   22F0             ; --- END FACTORS
4425   22F0             ; --- START TERMS
4426   22F0 D7            push a
4427   22F1 11            mov a, b
4428   22F2 26 01 00      mov b, $1
4429   22F5 56            add b, a
4430   22F6 E4            pop a
4431   22F7             ; --- END TERMS
4432   22F7 E7            pop d
4433   22F8 5A            add d, b
4434   22F9 E4            pop a
4435   22FA DA            push d
4436   22FB FA F1 FF      lea d, [bp + -15] ; $h
4437   22FE D7            push a
4438   22FF DA            push d
4439   2300 FA E7 FF      lea d, [bp + -25] ; $i
4440   2303 2A            mov b, [d]
4441   2304 E7            pop d
4442   2305 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4443   2309 E4            pop a
4444   230A 2A            mov b, [d]
4445   230B             ; --- START SHIFT
4446   230B D7            push a
4447   230C 11            mov a, b
4448   230D 26 08 00      mov b, $8
4449   2310 FD 39         mov c, b
4450   2312 A1            shr a, cl
4451   2313 27            mov b, a
4452   2314 E4            pop a
4453   2315             ; --- END SHIFT
4454   2315 D7            push a
4455   2316 11            mov a, b
4456   2317 26 FF 00      mov b, $ff
4457   231A FD 92         and b, a ; &
4458   231C E4            pop a
4459   231D E7            pop d
4460   231E FD 3E         mov [d], bl
4461   2320             _for61_update:
4462   2320 FA E7 FF      lea d, [bp + -25] ; $i
4463   2323 2A            mov b, [d]
4464   2324 FD 77         inc b
4465   2326 FA E7 FF      lea d, [bp + -25] ; $i
4466   2329 FD 43         mov [d], b
4467   232B FD 7D         dec b
4468   232D 0A 90 22      jmp _for61_cond
4469   2330             _for61_exit:
4470   2330 F9            leave
4471   2331 09            ret
4472   2332             ; --- END TEXT SEGMENT
4473   2332             
4474   2332             ; --- BEGIN DATA SEGMENT
4475   2332 00 00 00 00 _text_data: .fill 512, 0
4475   2336 00 00 00 00 
4475   233A 00 00 00 00 
4475   233E 00 00 00 00 
4475   2342 00 00 00 00 
4475   2346 00 00 00 00 
4475   234A 00 00 00 00 
4475   234E 00 00 00 00 
4475   2352 00 00 00 00 
4475   2356 00 00 00 00 
4475   235A 00 00 00 00 
4475   235E 00 00 00 00 
4475   2362 00 00 00 00 
4475   2366 00 00 00 00 
4475   236A 00 00 00 00 
4475   236E 00 00 00 00 
4475   2372 00 00 00 00 
4475   2376 00 00 00 00 
4475   237A 00 00 00 00 
4475   237E 00 00 00 00 
4475   2382 00 00 00 00 
4475   2386 00 00 00 00 
4475   238A 00 00 00 00 
4475   238E 00 00 00 00 
4475   2392 00 00 00 00 
4475   2396 00 00 00 00 
4475   239A 00 00 00 00 
4475   239E 00 00 00 00 
4475   23A2 00 00 00 00 
4475   23A6 00 00 00 00 
4475   23AA 00 00 00 00 
4475   23AE 00 00 00 00 
4475   23B2 00 00 00 00 
4475   23B6 00 00 00 00 
4475   23BA 00 00 00 00 
4475   23BE 00 00 00 00 
4475   23C2 00 00 00 00 
4475   23C6 00 00 00 00 
4475   23CA 00 00 00 00 
4475   23CE 00 00 00 00 
4475   23D2 00 00 00 00 
4475   23D6 00 00 00 00 
4475   23DA 00 00 00 00 
4475   23DE 00 00 00 00 
4475   23E2 00 00 00 00 
4475   23E6 00 00 00 00 
4475   23EA 00 00 00 00 
4475   23EE 00 00 00 00 
4475   23F2 00 00 00 00 
4475   23F6 00 00 00 00 
4475   23FA 00 00 00 00 
4475   23FE 00 00 00 00 
4475   2402 00 00 00 00 
4475   2406 00 00 00 00 
4475   240A 00 00 00 00 
4475   240E 00 00 00 00 
4475   2412 00 00 00 00 
4475   2416 00 00 00 00 
4475   241A 00 00 00 00 
4475   241E 00 00 00 00 
4475   2422 00 00 00 00 
4475   2426 00 00 00 00 
4475   242A 00 00 00 00 
4475   242E 00 00 00 00 
4475   2432 00 00 00 00 
4475   2436 00 00 00 00 
4475   243A 00 00 00 00 
4475   243E 00 00 00 00 
4475   2442 00 00 00 00 
4475   2446 00 00 00 00 
4475   244A 00 00 00 00 
4475   244E 00 00 00 00 
4475   2452 00 00 00 00 
4475   2456 00 00 00 00 
4475   245A 00 00 00 00 
4475   245E 00 00 00 00 
4475   2462 00 00 00 00 
4475   2466 00 00 00 00 
4475   246A 00 00 00 00 
4475   246E 00 00 00 00 
4475   2472 00 00 00 00 
4475   2476 00 00 00 00 
4475   247A 00 00 00 00 
4475   247E 00 00 00 00 
4475   2482 00 00 00 00 
4475   2486 00 00 00 00 
4475   248A 00 00 00 00 
4475   248E 00 00 00 00 
4475   2492 00 00 00 00 
4475   2496 00 00 00 00 
4475   249A 00 00 00 00 
4475   249E 00 00 00 00 
4475   24A2 00 00 00 00 
4475   24A6 00 00 00 00 
4475   24AA 00 00 00 00 
4475   24AE 00 00 00 00 
4475   24B2 00 00 00 00 
4475   24B6 00 00 00 00 
4475   24BA 00 00 00 00 
4475   24BE 00 00 00 00 
4475   24C2 00 00 00 00 
4475   24C6 00 00 00 00 
4475   24CA 00 00 00 00 
4475   24CE 00 00 00 00 
4475   24D2 00 00 00 00 
4475   24D6 00 00 00 00 
4475   24DA 00 00 00 00 
4475   24DE 00 00 00 00 
4475   24E2 00 00 00 00 
4475   24E6 00 00 00 00 
4475   24EA 00 00 00 00 
4475   24EE 00 00 00 00 
4475   24F2 00 00 00 00 
4475   24F6 00 00 00 00 
4475   24FA 00 00 00 00 
4475   24FE 00 00 00 00 
4475   2502 00 00 00 00 
4475   2506 00 00 00 00 
4475   250A 00 00 00 00 
4475   250E 00 00 00 00 
4475   2512 00 00 00 00 
4475   2516 00 00 00 00 
4475   251A 00 00 00 00 
4475   251E 00 00 00 00 
4475   2522 00 00 00 00 
4475   2526 00 00 00 00 
4475   252A 00 00 00 00 
4475   252E 00 00 00 00 
4476   2532 00 00       st_fopen_max_handle: .dw 0
4477   2534 45 6E 74 65 _s0: .db "Enter a string to hash: %s", 0
4477   2538 72 20 61 20 
4477   253C 73 74 72 69 
4477   2540 6E 67 20 74 
4477   2544 6F 20 68 61 
4477   2548 73 68 3A 20 
4477   254C 25 73 00 
4478   254F 0A 45 6D 70 _s1: .db "\nEmpty string.\n", 0
4478   2553 74 79 20 73 
4478   2557 74 72 69 6E 
4478   255B 67 2E 0A 00 
4479   255F 48 61 73 68 _s2: .db "Hash: ", 0
4479   2563 3A 20 00 
4480   2566 0A 00       _s3: .db "\n", 0
4481   2568 55 6E 65 78 _s4: .db "Unexpected format in printf.", 0
4481   256C 70 65 63 74 
4481   2570 65 64 20 66 
4481   2574 6F 72 6D 61 
4481   2578 74 20 69 6E 
4481   257C 20 70 72 69 
4481   2580 6E 74 66 2E 
4481   2584 00 
4482   2585 45 72 72 6F _s5: .db "Error: Unknown argument type.\n", 0
4482   2589 72 3A 20 55 
4482   258D 6E 6B 6E 6F 
4482   2591 77 6E 20 61 
4482   2595 72 67 75 6D 
4482   2599 65 6E 74 20 
4482   259D 74 79 70 65 
4482   25A1 2E 0A 00 
4483   25A4 1B 5B 32 4A _s6: .db "\033[2J\033[H", 0
4483   25A8 1B 5B 48 00 
4484   25AC             
4485   25AC AE 25       _heap_top: .dw _heap
4486   25AE 00          _heap: .db 0
4487   25AF             ; --- END DATA SEGMENT
4488   25AF             
4489   25AF             .end
tasm: Number of errors = 0
