0001   0000             ; --- FILENAME: programs/base64
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $input 
0011   0408             ; $output 
0012   0408 52 00 03      sub sp, 768
0013   040B             ;; printf("Enter a base64 encoded string to decode: "); 
0014   040B 26 AD 1D      mov b, __s0 ; "Enter a base64 encoded string to decode: "
0015   040E FD AB         swp b
0016   0410 D8            push b
0017   0411 07 6B 08      call printf
0018   0414 51 02 00      add sp, 2
0019   0417             ;; gets(input); 
0020   0417 FA 01 FE      lea d, [bp + -511] ; $input
0021   041A 2D            mov b, d
0022   041B FD AB         swp b
0023   041D D8            push b
0024   041E 07 31 0C      call gets
0025   0421 51 02 00      add sp, 2
0026   0424             ;; base64_encode(input, output); 
0027   0424 FA 01 FD      lea d, [bp + -767] ; $output
0028   0427 2D            mov b, d
0029   0428 FD AB         swp b
0030   042A D8            push b
0031   042B FA 01 FE      lea d, [bp + -511] ; $input
0032   042E 2D            mov b, d
0033   042F FD AB         swp b
0034   0431 D8            push b
0035   0432 07 68 14      call base64_encode
0036   0435 51 04 00      add sp, 4
0037   0438             ;; printf("Encoded string: %s\n", output); 
0038   0438 FA 01 FD      lea d, [bp + -767] ; $output
0039   043B 2D            mov b, d
0040   043C FD AB         swp b
0041   043E D8            push b
0042   043F 26 D7 1D      mov b, __s1 ; "Encoded string: %s\n"
0043   0442 FD AB         swp b
0044   0444 D8            push b
0045   0445 07 6B 08      call printf
0046   0448 51 04 00      add sp, 4
0047   044B             ;; base64_decode(output, input); 
0048   044B FA 01 FE      lea d, [bp + -511] ; $input
0049   044E 2D            mov b, d
0050   044F FD AB         swp b
0051   0451 D8            push b
0052   0452 FA 01 FD      lea d, [bp + -767] ; $output
0053   0455 2D            mov b, d
0054   0456 FD AB         swp b
0055   0458 D8            push b
0056   0459 07 41 19      call base64_decode
0057   045C 51 04 00      add sp, 4
0058   045F             ;; printf("Decoded string: %s\n", input); 
0059   045F FA 01 FE      lea d, [bp + -511] ; $input
0060   0462 2D            mov b, d
0061   0463 FD AB         swp b
0062   0465 D8            push b
0063   0466 26 EB 1D      mov b, __s2 ; "Decoded string: %s\n"
0064   0469 FD AB         swp b
0065   046B D8            push b
0066   046C 07 6B 08      call printf
0067   046F 51 04 00      add sp, 4
0068   0472             ;; return 0; 
0069   0472 26 00 00      mov b, $0
0070   0475 F9            leave
0071   0476 05 0B         syscall sys_terminate_proc
0072   0478             
0073   0478             strcpy:
0074   0478 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0075   047B             ; $psrc 
0076   047B             ; $pdest 
0077   047B 52 04 00      sub sp, 4
0078   047E             ;; psrc = src; 
0079   047E FA FF FF      lea d, [bp + -1] ; $psrc
0080   0481 DA            push d
0081   0482 FA 07 00      lea d, [bp + 7] ; $src
0082   0485 2A            mov b, [d]
0083   0486 E7            pop d
0084   0487 FD 43         mov [d], b
0085   0489             ;; pdest = dest; 
0086   0489 FA FD FF      lea d, [bp + -3] ; $pdest
0087   048C DA            push d
0088   048D FA 05 00      lea d, [bp + 5] ; $dest
0089   0490 2A            mov b, [d]
0090   0491 E7            pop d
0091   0492 FD 43         mov [d], b
0092   0494             ;; while(*psrc) *pdest++ = *psrc++; 
0093   0494             _while1_cond:
0094   0494 FA FF FF      lea d, [bp + -1] ; $psrc
0095   0497 2A            mov b, [d]
0096   0498 74            mov d, b
0097   0499 32            mov bl, [d]
0098   049A A7 00         mov bh, 0
0099   049C C0 00 00      cmp b, 0
0100   049F C6 C7 04      je _while1_exit
0101   04A2             _while1_block:
0102   04A2             ;; *pdest++ = *psrc++; 
0103   04A2 FA FD FF      lea d, [bp + -3] ; $pdest
0104   04A5 2A            mov b, [d]
0105   04A6 D8            push b
0106   04A7 FD 77         inc b
0107   04A9 FA FD FF      lea d, [bp + -3] ; $pdest
0108   04AC FD 43         mov [d], b
0109   04AE E5            pop b
0110   04AF D8            push b
0111   04B0 FA FF FF      lea d, [bp + -1] ; $psrc
0112   04B3 2A            mov b, [d]
0113   04B4 D8            push b
0114   04B5 FD 77         inc b
0115   04B7 FA FF FF      lea d, [bp + -1] ; $psrc
0116   04BA FD 43         mov [d], b
0117   04BC E5            pop b
0118   04BD 74            mov d, b
0119   04BE 32            mov bl, [d]
0120   04BF A7 00         mov bh, 0
0121   04C1 E7            pop d
0122   04C2 FD 3E         mov [d], bl
0123   04C4 0A 94 04      jmp _while1_cond
0124   04C7             _while1_exit:
0125   04C7             ;; *pdest = '\0'; 
0126   04C7 FA FD FF      lea d, [bp + -3] ; $pdest
0127   04CA 2A            mov b, [d]
0128   04CB D8            push b
0129   04CC 26 00 00      mov b, $0
0130   04CF E7            pop d
0131   04D0 FD 3E         mov [d], bl
0132   04D2 F9            leave
0133   04D3 09            ret
0134   04D4             
0135   04D4             strcmp:
0136   04D4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0137   04D7             ;; while (*s1 && (*s1 == *s2)) { 
0138   04D7             _while2_cond:
0139   04D7 FA 05 00      lea d, [bp + 5] ; $s1
0140   04DA 2A            mov b, [d]
0141   04DB 74            mov d, b
0142   04DC 32            mov bl, [d]
0143   04DD A7 00         mov bh, 0
0144   04DF D7            push a
0145   04E0 11            mov a, b
0146   04E1 FA 05 00      lea d, [bp + 5] ; $s1
0147   04E4 2A            mov b, [d]
0148   04E5 74            mov d, b
0149   04E6 32            mov bl, [d]
0150   04E7 A7 00         mov bh, 0
0151   04E9             ; START RELATIONAL
0152   04E9 D7            push a
0153   04EA 11            mov a, b
0154   04EB FA 07 00      lea d, [bp + 7] ; $s2
0155   04EE 2A            mov b, [d]
0156   04EF 74            mov d, b
0157   04F0 32            mov bl, [d]
0158   04F1 A7 00         mov bh, 0
0159   04F3 B0            cmp a, b
0160   04F4 FD 71         seq ; ==
0161   04F6 E4            pop a
0162   04F7             ; END RELATIONAL
0163   04F7 FD A7         sand a, b ; &&
0164   04F9 E4            pop a
0165   04FA C0 00 00      cmp b, 0
0166   04FD C6 1D 05      je _while2_exit
0167   0500             _while2_block:
0168   0500             ;; s1++; 
0169   0500 FA 05 00      lea d, [bp + 5] ; $s1
0170   0503 2A            mov b, [d]
0171   0504 D8            push b
0172   0505 FD 77         inc b
0173   0507 FA 05 00      lea d, [bp + 5] ; $s1
0174   050A FD 43         mov [d], b
0175   050C E5            pop b
0176   050D             ;; s2++; 
0177   050D FA 07 00      lea d, [bp + 7] ; $s2
0178   0510 2A            mov b, [d]
0179   0511 D8            push b
0180   0512 FD 77         inc b
0181   0514 FA 07 00      lea d, [bp + 7] ; $s2
0182   0517 FD 43         mov [d], b
0183   0519 E5            pop b
0184   051A 0A D7 04      jmp _while2_cond
0185   051D             _while2_exit:
0186   051D             ;; return *s1 - *s2; 
0187   051D FA 05 00      lea d, [bp + 5] ; $s1
0188   0520 2A            mov b, [d]
0189   0521 74            mov d, b
0190   0522 32            mov bl, [d]
0191   0523 A7 00         mov bh, 0
0192   0525             ; START TERMS
0193   0525 D7            push a
0194   0526 11            mov a, b
0195   0527 FA 07 00      lea d, [bp + 7] ; $s2
0196   052A 2A            mov b, [d]
0197   052B 74            mov d, b
0198   052C 32            mov bl, [d]
0199   052D A7 00         mov bh, 0
0200   052F 60            sub a, b
0201   0530 27            mov b, a
0202   0531 E4            pop a
0203   0532             ; END TERMS
0204   0532 F9            leave
0205   0533 09            ret
0206   0534             
0207   0534             strcat:
0208   0534 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0209   0537             ; $dest_len 
0210   0537             ; $i 
0211   0537 52 04 00      sub sp, 4
0212   053A             ;; dest_len = strlen(dest); 
0213   053A FA FF FF      lea d, [bp + -1] ; $dest_len
0214   053D DA            push d
0215   053E FA 05 00      lea d, [bp + 5] ; $dest
0216   0541 2A            mov b, [d]
0217   0542 FD AB         swp b
0218   0544 D8            push b
0219   0545 07 E7 05      call strlen
0220   0548 51 02 00      add sp, 2
0221   054B E7            pop d
0222   054C FD 43         mov [d], b
0223   054E             ;; for (i = 0; src[i] != 0; i=i+1) { 
0224   054E             _for3_init:
0225   054E FA FD FF      lea d, [bp + -3] ; $i
0226   0551 DA            push d
0227   0552 26 00 00      mov b, $0
0228   0555 E7            pop d
0229   0556 FD 43         mov [d], b
0230   0558             _for3_cond:
0231   0558 FA 07 00      lea d, [bp + 7] ; $src
0232   055B FD 2A         mov d, [d]
0233   055D D7            push a
0234   055E DA            push d
0235   055F FA FD FF      lea d, [bp + -3] ; $i
0236   0562 2A            mov b, [d]
0237   0563 E7            pop d
0238   0564 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0239   0568 E4            pop a
0240   0569 32            mov bl, [d]
0241   056A A7 00         mov bh, 0
0242   056C             ; START RELATIONAL
0243   056C D7            push a
0244   056D 11            mov a, b
0245   056E 26 00 00      mov b, $0
0246   0571 B0            cmp a, b
0247   0572 FD 72         sneq ; !=
0248   0574 E4            pop a
0249   0575             ; END RELATIONAL
0250   0575 C0 00 00      cmp b, 0
0251   0578 C6 C1 05      je _for3_exit
0252   057B             _for3_block:
0253   057B             ;; dest[dest_len + i] = src[i]; 
0254   057B FA 05 00      lea d, [bp + 5] ; $dest
0255   057E FD 2A         mov d, [d]
0256   0580 D7            push a
0257   0581 DA            push d
0258   0582 FA FF FF      lea d, [bp + -1] ; $dest_len
0259   0585 2A            mov b, [d]
0260   0586             ; START TERMS
0261   0586 D7            push a
0262   0587 11            mov a, b
0263   0588 FA FD FF      lea d, [bp + -3] ; $i
0264   058B 2A            mov b, [d]
0265   058C 56            add b, a
0266   058D E4            pop a
0267   058E             ; END TERMS
0268   058E E7            pop d
0269   058F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0270   0593 E4            pop a
0271   0594 DA            push d
0272   0595 FA 07 00      lea d, [bp + 7] ; $src
0273   0598 FD 2A         mov d, [d]
0274   059A D7            push a
0275   059B DA            push d
0276   059C FA FD FF      lea d, [bp + -3] ; $i
0277   059F 2A            mov b, [d]
0278   05A0 E7            pop d
0279   05A1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0280   05A5 E4            pop a
0281   05A6 32            mov bl, [d]
0282   05A7 A7 00         mov bh, 0
0283   05A9 E7            pop d
0284   05AA FD 3E         mov [d], bl
0285   05AC             _for3_update:
0286   05AC FA FD FF      lea d, [bp + -3] ; $i
0287   05AF DA            push d
0288   05B0 FA FD FF      lea d, [bp + -3] ; $i
0289   05B3 2A            mov b, [d]
0290   05B4             ; START TERMS
0291   05B4 D7            push a
0292   05B5 11            mov a, b
0293   05B6 26 01 00      mov b, $1
0294   05B9 56            add b, a
0295   05BA E4            pop a
0296   05BB             ; END TERMS
0297   05BB E7            pop d
0298   05BC FD 43         mov [d], b
0299   05BE 0A 58 05      jmp _for3_cond
0300   05C1             _for3_exit:
0301   05C1             ;; dest[dest_len + i] = 0; 
0302   05C1 FA 05 00      lea d, [bp + 5] ; $dest
0303   05C4 FD 2A         mov d, [d]
0304   05C6 D7            push a
0305   05C7 DA            push d
0306   05C8 FA FF FF      lea d, [bp + -1] ; $dest_len
0307   05CB 2A            mov b, [d]
0308   05CC             ; START TERMS
0309   05CC D7            push a
0310   05CD 11            mov a, b
0311   05CE FA FD FF      lea d, [bp + -3] ; $i
0312   05D1 2A            mov b, [d]
0313   05D2 56            add b, a
0314   05D3 E4            pop a
0315   05D4             ; END TERMS
0316   05D4 E7            pop d
0317   05D5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0318   05D9 E4            pop a
0319   05DA DA            push d
0320   05DB 26 00 00      mov b, $0
0321   05DE E7            pop d
0322   05DF FD 3E         mov [d], bl
0323   05E1             ;; return dest; 
0324   05E1 FA 05 00      lea d, [bp + 5] ; $dest
0325   05E4 2A            mov b, [d]
0326   05E5 F9            leave
0327   05E6 09            ret
0328   05E7             
0329   05E7             strlen:
0330   05E7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0331   05EA             ; $length 
0332   05EA 52 02 00      sub sp, 2
0333   05ED             ;; length = 0; 
0334   05ED FA FF FF      lea d, [bp + -1] ; $length
0335   05F0 DA            push d
0336   05F1 26 00 00      mov b, $0
0337   05F4 E7            pop d
0338   05F5 FD 43         mov [d], b
0339   05F7             ;; while (str[length] != 0) { 
0340   05F7             _while4_cond:
0341   05F7 FA 05 00      lea d, [bp + 5] ; $str
0342   05FA FD 2A         mov d, [d]
0343   05FC D7            push a
0344   05FD DA            push d
0345   05FE FA FF FF      lea d, [bp + -1] ; $length
0346   0601 2A            mov b, [d]
0347   0602 E7            pop d
0348   0603 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0349   0607 E4            pop a
0350   0608 32            mov bl, [d]
0351   0609 A7 00         mov bh, 0
0352   060B             ; START RELATIONAL
0353   060B D7            push a
0354   060C 11            mov a, b
0355   060D 26 00 00      mov b, $0
0356   0610 B0            cmp a, b
0357   0611 FD 72         sneq ; !=
0358   0613 E4            pop a
0359   0614             ; END RELATIONAL
0360   0614 C0 00 00      cmp b, 0
0361   0617 C6 2A 06      je _while4_exit
0362   061A             _while4_block:
0363   061A             ;; length++; 
0364   061A FA FF FF      lea d, [bp + -1] ; $length
0365   061D 2A            mov b, [d]
0366   061E D8            push b
0367   061F FD 77         inc b
0368   0621 FA FF FF      lea d, [bp + -1] ; $length
0369   0624 FD 43         mov [d], b
0370   0626 E5            pop b
0371   0627 0A F7 05      jmp _while4_cond
0372   062A             _while4_exit:
0373   062A             ;; return length; 
0374   062A FA FF FF      lea d, [bp + -1] ; $length
0375   062D 2A            mov b, [d]
0376   062E F9            leave
0377   062F 09            ret
0378   0630             
0379   0630             scanf:
0380   0630 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0381   0633             ; $p 
0382   0633             ; $format_p 
0383   0633             ; $c 
0384   0633             ; $i 
0385   0633             ; $input_string 
0386   0633 52 07 02      sub sp, 519
0387   0636             ;; format_p = format; 
0388   0636 FA FD FF      lea d, [bp + -3] ; $format_p
0389   0639 DA            push d
0390   063A FA 05 00      lea d, [bp + 5] ; $format
0391   063D 2A            mov b, [d]
0392   063E E7            pop d
0393   063F FD 43         mov [d], b
0394   0641             ;; p = &format + 2; 
0395   0641 FA FF FF      lea d, [bp + -1] ; $p
0396   0644 DA            push d
0397   0645 FA 05 00      lea d, [bp + 5] ; $format
0398   0648 2D            mov b, d
0399   0649             ; START TERMS
0400   0649 D7            push a
0401   064A 11            mov a, b
0402   064B 26 02 00      mov b, $2
0403   064E 56            add b, a
0404   064F E4            pop a
0405   0650             ; END TERMS
0406   0650 E7            pop d
0407   0651 FD 43         mov [d], b
0408   0653             ;; for(;;){ 
0409   0653             _for5_init:
0410   0653             _for5_cond:
0411   0653             _for5_block:
0412   0653             ;; if(!*format_p) break; 
0413   0653             _if6_cond:
0414   0653 FA FD FF      lea d, [bp + -3] ; $format_p
0415   0656 2A            mov b, [d]
0416   0657 74            mov d, b
0417   0658 32            mov bl, [d]
0418   0659 A7 00         mov bh, 0
0419   065B C0 00 00      cmp b, 0
0420   065E FD 71         seq ; !
0421   0660 C0 00 00      cmp b, 0
0422   0663 C6 6C 06      je _if6_else
0423   0666             _if6_true:
0424   0666             ;; break; 
0425   0666 0A 69 08      jmp _for5_exit ; for break
0426   0669 0A 66 08      jmp _if6_exit
0427   066C             _if6_else:
0428   066C             ;; if(*format_p == '%'){ 
0429   066C             _if7_cond:
0430   066C FA FD FF      lea d, [bp + -3] ; $format_p
0431   066F 2A            mov b, [d]
0432   0670 74            mov d, b
0433   0671 32            mov bl, [d]
0434   0672 A7 00         mov bh, 0
0435   0674             ; START RELATIONAL
0436   0674 D7            push a
0437   0675 11            mov a, b
0438   0676 26 25 00      mov b, $25
0439   0679 B0            cmp a, b
0440   067A FD 71         seq ; ==
0441   067C E4            pop a
0442   067D             ; END RELATIONAL
0443   067D C0 00 00      cmp b, 0
0444   0680 C6 4A 08      je _if7_else
0445   0683             _if7_true:
0446   0683             ;; format_p++; 
0447   0683 FA FD FF      lea d, [bp + -3] ; $format_p
0448   0686 2A            mov b, [d]
0449   0687 D8            push b
0450   0688 FD 77         inc b
0451   068A FA FD FF      lea d, [bp + -3] ; $format_p
0452   068D FD 43         mov [d], b
0453   068F E5            pop b
0454   0690             ;; switch(*format_p){ 
0455   0690             _switch8_expr:
0456   0690 FA FD FF      lea d, [bp + -3] ; $format_p
0457   0693 2A            mov b, [d]
0458   0694 74            mov d, b
0459   0695 32            mov bl, [d]
0460   0696 A7 00         mov bh, 0
0461   0698             _switch8_comparisons:
0462   0698 C1 6C         cmp bl, $6c
0463   069A C6 C6 06      je _switch8_case0
0464   069D C1 4C         cmp bl, $4c
0465   069F C6 C6 06      je _switch8_case1
0466   06A2 C1 64         cmp bl, $64
0467   06A4 C6 58 07      je _switch8_case2
0468   06A7 C1 69         cmp bl, $69
0469   06A9 C6 58 07      je _switch8_case3
0470   06AC C1 75         cmp bl, $75
0471   06AE C6 85 07      je _switch8_case4
0472   06B1 C1 78         cmp bl, $78
0473   06B3 C6 B2 07      je _switch8_case5
0474   06B6 C1 63         cmp bl, $63
0475   06B8 C6 C7 07      je _switch8_case6
0476   06BB C1 73         cmp bl, $73
0477   06BD C6 F6 07      je _switch8_case7
0478   06C0 0A 2E 08      jmp _switch8_default
0479   06C3 0A 3A 08      jmp _switch8_exit
0480   06C6             _switch8_case0:
0481   06C6             _switch8_case1:
0482   06C6             ;; format_p++; 
0483   06C6 FA FD FF      lea d, [bp + -3] ; $format_p
0484   06C9 2A            mov b, [d]
0485   06CA D8            push b
0486   06CB FD 77         inc b
0487   06CD FA FD FF      lea d, [bp + -3] ; $format_p
0488   06D0 FD 43         mov [d], b
0489   06D2 E5            pop b
0490   06D3             ;; if(*format_p == 'd' || *format_p == 'i'); 
0491   06D3             _if9_cond:
0492   06D3 FA FD FF      lea d, [bp + -3] ; $format_p
0493   06D6 2A            mov b, [d]
0494   06D7 74            mov d, b
0495   06D8 32            mov bl, [d]
0496   06D9 A7 00         mov bh, 0
0497   06DB             ; START RELATIONAL
0498   06DB D7            push a
0499   06DC 11            mov a, b
0500   06DD 26 64 00      mov b, $64
0501   06E0 B0            cmp a, b
0502   06E1 FD 71         seq ; ==
0503   06E3 E4            pop a
0504   06E4             ; END RELATIONAL
0505   06E4 D7            push a
0506   06E5 11            mov a, b
0507   06E6 FA FD FF      lea d, [bp + -3] ; $format_p
0508   06E9 2A            mov b, [d]
0509   06EA 74            mov d, b
0510   06EB 32            mov bl, [d]
0511   06EC A7 00         mov bh, 0
0512   06EE             ; START RELATIONAL
0513   06EE D7            push a
0514   06EF 11            mov a, b
0515   06F0 26 69 00      mov b, $69
0516   06F3 B0            cmp a, b
0517   06F4 FD 71         seq ; ==
0518   06F6 E4            pop a
0519   06F7             ; END RELATIONAL
0520   06F7 FD A8         sor a, b ; ||
0521   06F9 E4            pop a
0522   06FA C0 00 00      cmp b, 0
0523   06FD C6 03 07      je _if9_else
0524   0700             _if9_true:
0525   0700             ;; ; 
0526   0700 0A 43 07      jmp _if9_exit
0527   0703             _if9_else:
0528   0703             ;; if(*format_p == 'u'); 
0529   0703             _if10_cond:
0530   0703 FA FD FF      lea d, [bp + -3] ; $format_p
0531   0706 2A            mov b, [d]
0532   0707 74            mov d, b
0533   0708 32            mov bl, [d]
0534   0709 A7 00         mov bh, 0
0535   070B             ; START RELATIONAL
0536   070B D7            push a
0537   070C 11            mov a, b
0538   070D 26 75 00      mov b, $75
0539   0710 B0            cmp a, b
0540   0711 FD 71         seq ; ==
0541   0713 E4            pop a
0542   0714             ; END RELATIONAL
0543   0714 C0 00 00      cmp b, 0
0544   0717 C6 1D 07      je _if10_else
0545   071A             _if10_true:
0546   071A             ;; ; 
0547   071A 0A 43 07      jmp _if10_exit
0548   071D             _if10_else:
0549   071D             ;; if(*format_p == 'x'); 
0550   071D             _if11_cond:
0551   071D FA FD FF      lea d, [bp + -3] ; $format_p
0552   0720 2A            mov b, [d]
0553   0721 74            mov d, b
0554   0722 32            mov bl, [d]
0555   0723 A7 00         mov bh, 0
0556   0725             ; START RELATIONAL
0557   0725 D7            push a
0558   0726 11            mov a, b
0559   0727 26 78 00      mov b, $78
0560   072A B0            cmp a, b
0561   072B FD 71         seq ; ==
0562   072D E4            pop a
0563   072E             ; END RELATIONAL
0564   072E C0 00 00      cmp b, 0
0565   0731 C6 37 07      je _if11_else
0566   0734             _if11_true:
0567   0734             ;; ; 
0568   0734 0A 43 07      jmp _if11_exit
0569   0737             _if11_else:
0570   0737             ;; err("Unexpected format in printf."); 
0571   0737 26 FF 1D      mov b, __s3 ; "Unexpected format in printf."
0572   073A FD AB         swp b
0573   073C D8            push b
0574   073D 07 B2 0A      call err
0575   0740 51 02 00      add sp, 2
0576   0743             _if11_exit:
0577   0743             _if10_exit:
0578   0743             _if9_exit:
0579   0743             ;; p = p + 4; 
0580   0743 FA FF FF      lea d, [bp + -1] ; $p
0581   0746 DA            push d
0582   0747 FA FF FF      lea d, [bp + -1] ; $p
0583   074A 2A            mov b, [d]
0584   074B             ; START TERMS
0585   074B D7            push a
0586   074C 11            mov a, b
0587   074D 26 04 00      mov b, $4
0588   0750 56            add b, a
0589   0751 E4            pop a
0590   0752             ; END TERMS
0591   0752 E7            pop d
0592   0753 FD 43         mov [d], b
0593   0755             ;; break; 
0594   0755 0A 3A 08      jmp _switch8_exit ; case break
0595   0758             _switch8_case2:
0596   0758             _switch8_case3:
0597   0758             ;; i = scann(); 
0598   0758 FA FA FF      lea d, [bp + -6] ; $i
0599   075B DA            push d
0600   075C 07 7D 10      call scann
0601   075F E7            pop d
0602   0760 FD 43         mov [d], b
0603   0762             ;; **(int **)p = i; 
0604   0762 FA FF FF      lea d, [bp + -1] ; $p
0605   0765 2A            mov b, [d]
0606   0766 74            mov d, b
0607   0767 2A            mov b, [d]
0608   0768 D8            push b
0609   0769 FA FA FF      lea d, [bp + -6] ; $i
0610   076C 2A            mov b, [d]
0611   076D E7            pop d
0612   076E FD 43         mov [d], b
0613   0770             ;; p = p + 2; 
0614   0770 FA FF FF      lea d, [bp + -1] ; $p
0615   0773 DA            push d
0616   0774 FA FF FF      lea d, [bp + -1] ; $p
0617   0777 2A            mov b, [d]
0618   0778             ; START TERMS
0619   0778 D7            push a
0620   0779 11            mov a, b
0621   077A 26 02 00      mov b, $2
0622   077D 56            add b, a
0623   077E E4            pop a
0624   077F             ; END TERMS
0625   077F E7            pop d
0626   0780 FD 43         mov [d], b
0627   0782             ;; break; 
0628   0782 0A 3A 08      jmp _switch8_exit ; case break
0629   0785             _switch8_case4:
0630   0785             ;; i = scann(); 
0631   0785 FA FA FF      lea d, [bp + -6] ; $i
0632   0788 DA            push d
0633   0789 07 7D 10      call scann
0634   078C E7            pop d
0635   078D FD 43         mov [d], b
0636   078F             ;; **(int **)p = i; 
0637   078F FA FF FF      lea d, [bp + -1] ; $p
0638   0792 2A            mov b, [d]
0639   0793 74            mov d, b
0640   0794 2A            mov b, [d]
0641   0795 D8            push b
0642   0796 FA FA FF      lea d, [bp + -6] ; $i
0643   0799 2A            mov b, [d]
0644   079A E7            pop d
0645   079B FD 43         mov [d], b
0646   079D             ;; p = p + 2; 
0647   079D FA FF FF      lea d, [bp + -1] ; $p
0648   07A0 DA            push d
0649   07A1 FA FF FF      lea d, [bp + -1] ; $p
0650   07A4 2A            mov b, [d]
0651   07A5             ; START TERMS
0652   07A5 D7            push a
0653   07A6 11            mov a, b
0654   07A7 26 02 00      mov b, $2
0655   07AA 56            add b, a
0656   07AB E4            pop a
0657   07AC             ; END TERMS
0658   07AC E7            pop d
0659   07AD FD 43         mov [d], b
0660   07AF             ;; break; 
0661   07AF 0A 3A 08      jmp _switch8_exit ; case break
0662   07B2             _switch8_case5:
0663   07B2             ;; p = p + 2; 
0664   07B2 FA FF FF      lea d, [bp + -1] ; $p
0665   07B5 DA            push d
0666   07B6 FA FF FF      lea d, [bp + -1] ; $p
0667   07B9 2A            mov b, [d]
0668   07BA             ; START TERMS
0669   07BA D7            push a
0670   07BB 11            mov a, b
0671   07BC 26 02 00      mov b, $2
0672   07BF 56            add b, a
0673   07C0 E4            pop a
0674   07C1             ; END TERMS
0675   07C1 E7            pop d
0676   07C2 FD 43         mov [d], b
0677   07C4             ;; break; 
0678   07C4 0A 3A 08      jmp _switch8_exit ; case break
0679   07C7             _switch8_case6:
0680   07C7             ;; c = getchar(); 
0681   07C7 FA FC FF      lea d, [bp + -4] ; $c
0682   07CA DA            push d
0683   07CB 07 67 10      call getchar
0684   07CE E7            pop d
0685   07CF FD 3E         mov [d], bl
0686   07D1             ;; **(char **)p = c; 
0687   07D1 FA FF FF      lea d, [bp + -1] ; $p
0688   07D4 2A            mov b, [d]
0689   07D5 74            mov d, b
0690   07D6 2A            mov b, [d]
0691   07D7 D8            push b
0692   07D8 FA FC FF      lea d, [bp + -4] ; $c
0693   07DB 32            mov bl, [d]
0694   07DC A7 00         mov bh, 0
0695   07DE E7            pop d
0696   07DF FD 43         mov [d], b
0697   07E1             ;; p = p + 2; 
0698   07E1 FA FF FF      lea d, [bp + -1] ; $p
0699   07E4 DA            push d
0700   07E5 FA FF FF      lea d, [bp + -1] ; $p
0701   07E8 2A            mov b, [d]
0702   07E9             ; START TERMS
0703   07E9 D7            push a
0704   07EA 11            mov a, b
0705   07EB 26 02 00      mov b, $2
0706   07EE 56            add b, a
0707   07EF E4            pop a
0708   07F0             ; END TERMS
0709   07F0 E7            pop d
0710   07F1 FD 43         mov [d], b
0711   07F3             ;; break; 
0712   07F3 0A 3A 08      jmp _switch8_exit ; case break
0713   07F6             _switch8_case7:
0714   07F6             ;; gets(input_string); 
0715   07F6 FA FA FD      lea d, [bp + -518] ; $input_string
0716   07F9 2D            mov b, d
0717   07FA FD AB         swp b
0718   07FC D8            push b
0719   07FD 07 31 0C      call gets
0720   0800 51 02 00      add sp, 2
0721   0803             ;; strcpy(*(char **)p, input_string); 
0722   0803 FA FA FD      lea d, [bp + -518] ; $input_string
0723   0806 2D            mov b, d
0724   0807 FD AB         swp b
0725   0809 D8            push b
0726   080A FA FF FF      lea d, [bp + -1] ; $p
0727   080D 2A            mov b, [d]
0728   080E 74            mov d, b
0729   080F 2A            mov b, [d]
0730   0810 FD AB         swp b
0731   0812 D8            push b
0732   0813 07 78 04      call strcpy
0733   0816 51 04 00      add sp, 4
0734   0819             ;; p = p + 2; 
0735   0819 FA FF FF      lea d, [bp + -1] ; $p
0736   081C DA            push d
0737   081D FA FF FF      lea d, [bp + -1] ; $p
0738   0820 2A            mov b, [d]
0739   0821             ; START TERMS
0740   0821 D7            push a
0741   0822 11            mov a, b
0742   0823 26 02 00      mov b, $2
0743   0826 56            add b, a
0744   0827 E4            pop a
0745   0828             ; END TERMS
0746   0828 E7            pop d
0747   0829 FD 43         mov [d], b
0748   082B             ;; break; 
0749   082B 0A 3A 08      jmp _switch8_exit ; case break
0750   082E             _switch8_default:
0751   082E             ;; print("Error: Unknown argument type.\n"); 
0752   082E 26 1C 1E      mov b, __s4 ; "Error: Unknown argument type.\n"
0753   0831 FD AB         swp b
0754   0833 D8            push b
0755   0834 07 A2 10      call print
0756   0837 51 02 00      add sp, 2
0757   083A             _switch8_exit:
0758   083A             ;; format_p++; 
0759   083A FA FD FF      lea d, [bp + -3] ; $format_p
0760   083D 2A            mov b, [d]
0761   083E D8            push b
0762   083F FD 77         inc b
0763   0841 FA FD FF      lea d, [bp + -3] ; $format_p
0764   0844 FD 43         mov [d], b
0765   0846 E5            pop b
0766   0847 0A 66 08      jmp _if7_exit
0767   084A             _if7_else:
0768   084A             ;; putchar(*format_p); 
0769   084A FA FD FF      lea d, [bp + -3] ; $format_p
0770   084D 2A            mov b, [d]
0771   084E 74            mov d, b
0772   084F 32            mov bl, [d]
0773   0850 A7 00         mov bh, 0
0774   0852 DD            push bl
0775   0853 07 5A 10      call putchar
0776   0856 51 01 00      add sp, 1
0777   0859             ;; format_p++; 
0778   0859 FA FD FF      lea d, [bp + -3] ; $format_p
0779   085C 2A            mov b, [d]
0780   085D D8            push b
0781   085E FD 77         inc b
0782   0860 FA FD FF      lea d, [bp + -3] ; $format_p
0783   0863 FD 43         mov [d], b
0784   0865 E5            pop b
0785   0866             _if7_exit:
0786   0866             _if6_exit:
0787   0866             _for5_update:
0788   0866 0A 53 06      jmp _for5_cond
0789   0869             _for5_exit:
0790   0869 F9            leave
0791   086A 09            ret
0792   086B             
0793   086B             printf:
0794   086B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0795   086E             ; $p 
0796   086E             ; $format_p 
0797   086E 52 04 00      sub sp, 4
0798   0871             ;; format_p = format; 
0799   0871 FA FD FF      lea d, [bp + -3] ; $format_p
0800   0874 DA            push d
0801   0875 FA 05 00      lea d, [bp + 5] ; $format
0802   0878 2A            mov b, [d]
0803   0879 E7            pop d
0804   087A FD 43         mov [d], b
0805   087C             ;; p = &format + 2; 
0806   087C FA FF FF      lea d, [bp + -1] ; $p
0807   087F DA            push d
0808   0880 FA 05 00      lea d, [bp + 5] ; $format
0809   0883 2D            mov b, d
0810   0884             ; START TERMS
0811   0884 D7            push a
0812   0885 11            mov a, b
0813   0886 26 02 00      mov b, $2
0814   0889 56            add b, a
0815   088A E4            pop a
0816   088B             ; END TERMS
0817   088B E7            pop d
0818   088C FD 43         mov [d], b
0819   088E             ;; for(;;){ 
0820   088E             _for12_init:
0821   088E             _for12_cond:
0822   088E             _for12_block:
0823   088E             ;; if(!*format_p) break; 
0824   088E             _if13_cond:
0825   088E FA FD FF      lea d, [bp + -3] ; $format_p
0826   0891 2A            mov b, [d]
0827   0892 74            mov d, b
0828   0893 32            mov bl, [d]
0829   0894 A7 00         mov bh, 0
0830   0896 C0 00 00      cmp b, 0
0831   0899 FD 71         seq ; !
0832   089B C0 00 00      cmp b, 0
0833   089E C6 A7 08      je _if13_else
0834   08A1             _if13_true:
0835   08A1             ;; break; 
0836   08A1 0A B0 0A      jmp _for12_exit ; for break
0837   08A4 0A AD 0A      jmp _if13_exit
0838   08A7             _if13_else:
0839   08A7             ;; if(*format_p == '%'){ 
0840   08A7             _if14_cond:
0841   08A7 FA FD FF      lea d, [bp + -3] ; $format_p
0842   08AA 2A            mov b, [d]
0843   08AB 74            mov d, b
0844   08AC 32            mov bl, [d]
0845   08AD A7 00         mov bh, 0
0846   08AF             ; START RELATIONAL
0847   08AF D7            push a
0848   08B0 11            mov a, b
0849   08B1 26 25 00      mov b, $25
0850   08B4 B0            cmp a, b
0851   08B5 FD 71         seq ; ==
0852   08B7 E4            pop a
0853   08B8             ; END RELATIONAL
0854   08B8 C0 00 00      cmp b, 0
0855   08BB C6 91 0A      je _if14_else
0856   08BE             _if14_true:
0857   08BE             ;; format_p++; 
0858   08BE FA FD FF      lea d, [bp + -3] ; $format_p
0859   08C1 2A            mov b, [d]
0860   08C2 D8            push b
0861   08C3 FD 77         inc b
0862   08C5 FA FD FF      lea d, [bp + -3] ; $format_p
0863   08C8 FD 43         mov [d], b
0864   08CA E5            pop b
0865   08CB             ;; switch(*format_p){ 
0866   08CB             _switch15_expr:
0867   08CB FA FD FF      lea d, [bp + -3] ; $format_p
0868   08CE 2A            mov b, [d]
0869   08CF 74            mov d, b
0870   08D0 32            mov bl, [d]
0871   08D1 A7 00         mov bh, 0
0872   08D3             _switch15_comparisons:
0873   08D3 C1 6C         cmp bl, $6c
0874   08D5 C6 01 09      je _switch15_case0
0875   08D8 C1 4C         cmp bl, $4c
0876   08DA C6 01 09      je _switch15_case1
0877   08DD C1 64         cmp bl, $64
0878   08DF C6 D1 09      je _switch15_case2
0879   08E2 C1 69         cmp bl, $69
0880   08E4 C6 D1 09      je _switch15_case3
0881   08E7 C1 75         cmp bl, $75
0882   08E9 C6 F5 09      je _switch15_case4
0883   08EC C1 78         cmp bl, $78
0884   08EE C6 19 0A      je _switch15_case5
0885   08F1 C1 63         cmp bl, $63
0886   08F3 C6 37 0A      je _switch15_case6
0887   08F6 C1 73         cmp bl, $73
0888   08F8 C6 56 0A      je _switch15_case7
0889   08FB 0A 75 0A      jmp _switch15_default
0890   08FE 0A 81 0A      jmp _switch15_exit
0891   0901             _switch15_case0:
0892   0901             _switch15_case1:
0893   0901             ;; format_p++; 
0894   0901 FA FD FF      lea d, [bp + -3] ; $format_p
0895   0904 2A            mov b, [d]
0896   0905 D8            push b
0897   0906 FD 77         inc b
0898   0908 FA FD FF      lea d, [bp + -3] ; $format_p
0899   090B FD 43         mov [d], b
0900   090D E5            pop b
0901   090E             ;; if(*format_p == 'd' || *format_p == 'i') 
0902   090E             _if16_cond:
0903   090E FA FD FF      lea d, [bp + -3] ; $format_p
0904   0911 2A            mov b, [d]
0905   0912 74            mov d, b
0906   0913 32            mov bl, [d]
0907   0914 A7 00         mov bh, 0
0908   0916             ; START RELATIONAL
0909   0916 D7            push a
0910   0917 11            mov a, b
0911   0918 26 64 00      mov b, $64
0912   091B B0            cmp a, b
0913   091C FD 71         seq ; ==
0914   091E E4            pop a
0915   091F             ; END RELATIONAL
0916   091F D7            push a
0917   0920 11            mov a, b
0918   0921 FA FD FF      lea d, [bp + -3] ; $format_p
0919   0924 2A            mov b, [d]
0920   0925 74            mov d, b
0921   0926 32            mov bl, [d]
0922   0927 A7 00         mov bh, 0
0923   0929             ; START RELATIONAL
0924   0929 D7            push a
0925   092A 11            mov a, b
0926   092B 26 69 00      mov b, $69
0927   092E B0            cmp a, b
0928   092F FD 71         seq ; ==
0929   0931 E4            pop a
0930   0932             ; END RELATIONAL
0931   0932 FD A8         sor a, b ; ||
0932   0934 E4            pop a
0933   0935 C0 00 00      cmp b, 0
0934   0938 C6 4F 09      je _if16_else
0935   093B             _if16_true:
0936   093B             ;; print_signed_long(*(long *)p); 
0937   093B FD 79         mov g, b
0938   093D 28            mov b, c
0939   093E FD AB         swp b
0940   0940 D8            push b
0941   0941 FD 27         mov b, g
0942   0943 FD AB         swp b
0943   0945 D8            push b
0944   0946 07 3B 0D      call print_signed_long
0945   0949 51 04 00      add sp, 4
0946   094C 0A BC 09      jmp _if16_exit
0947   094F             _if16_else:
0948   094F             ;; if(*format_p == 'u') 
0949   094F             _if17_cond:
0950   094F FA FD FF      lea d, [bp + -3] ; $format_p
0951   0952 2A            mov b, [d]
0952   0953 74            mov d, b
0953   0954 32            mov bl, [d]
0954   0955 A7 00         mov bh, 0
0955   0957             ; START RELATIONAL
0956   0957 D7            push a
0957   0958 11            mov a, b
0958   0959 26 75 00      mov b, $75
0959   095C B0            cmp a, b
0960   095D FD 71         seq ; ==
0961   095F E4            pop a
0962   0960             ; END RELATIONAL
0963   0960 C0 00 00      cmp b, 0
0964   0963 C6 7A 09      je _if17_else
0965   0966             _if17_true:
0966   0966             ;; print_unsigned_long(*(unsigned long *)p); 
0967   0966 FD 79         mov g, b
0968   0968 28            mov b, c
0969   0969 FD AB         swp b
0970   096B D8            push b
0971   096C FD 27         mov b, g
0972   096E FD AB         swp b
0973   0970 D8            push b
0974   0971 07 8D 0E      call print_unsigned_long
0975   0974 51 04 00      add sp, 4
0976   0977 0A BC 09      jmp _if17_exit
0977   097A             _if17_else:
0978   097A             ;; if(*format_p == 'x') 
0979   097A             _if18_cond:
0980   097A FA FD FF      lea d, [bp + -3] ; $format_p
0981   097D 2A            mov b, [d]
0982   097E 74            mov d, b
0983   097F 32            mov bl, [d]
0984   0980 A7 00         mov bh, 0
0985   0982             ; START RELATIONAL
0986   0982 D7            push a
0987   0983 11            mov a, b
0988   0984 26 78 00      mov b, $78
0989   0987 B0            cmp a, b
0990   0988 FD 71         seq ; ==
0991   098A E4            pop a
0992   098B             ; END RELATIONAL
0993   098B C0 00 00      cmp b, 0
0994   098E C6 B0 09      je _if18_else
0995   0991             _if18_true:
0996   0991             ;; printx32(*(long int *)p); 
0997   0991 FA FF FF      lea d, [bp + -1] ; $p
0998   0994 2A            mov b, [d]
0999   0995 74            mov d, b
1000   0996 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1001   0999 FD 39         mov c, b ; And place it into C
1002   099B 2A            mov b, [d] ; Lower Word in B
1003   099C FD 79         mov g, b
1004   099E 28            mov b, c
1005   099F FD AB         swp b
1006   09A1 D8            push b
1007   09A2 FD 27         mov b, g
1008   09A4 FD AB         swp b
1009   09A6 D8            push b
1010   09A7 07 C4 0A      call printx32
1011   09AA 51 04 00      add sp, 4
1012   09AD 0A BC 09      jmp _if18_exit
1013   09B0             _if18_else:
1014   09B0             ;; err("Unexpected format in printf."); 
1015   09B0 26 FF 1D      mov b, __s3 ; "Unexpected format in printf."
1016   09B3 FD AB         swp b
1017   09B5 D8            push b
1018   09B6 07 B2 0A      call err
1019   09B9 51 02 00      add sp, 2
1020   09BC             _if18_exit:
1021   09BC             _if17_exit:
1022   09BC             _if16_exit:
1023   09BC             ;; p = p + 4; 
1024   09BC FA FF FF      lea d, [bp + -1] ; $p
1025   09BF DA            push d
1026   09C0 FA FF FF      lea d, [bp + -1] ; $p
1027   09C3 2A            mov b, [d]
1028   09C4             ; START TERMS
1029   09C4 D7            push a
1030   09C5 11            mov a, b
1031   09C6 26 04 00      mov b, $4
1032   09C9 56            add b, a
1033   09CA E4            pop a
1034   09CB             ; END TERMS
1035   09CB E7            pop d
1036   09CC FD 43         mov [d], b
1037   09CE             ;; break; 
1038   09CE 0A 81 0A      jmp _switch15_exit ; case break
1039   09D1             _switch15_case2:
1040   09D1             _switch15_case3:
1041   09D1             ;; print_signed(*(int*)p); 
1042   09D1 FA FF FF      lea d, [bp + -1] ; $p
1043   09D4 2A            mov b, [d]
1044   09D5 74            mov d, b
1045   09D6 2A            mov b, [d]
1046   09D7 FD AB         swp b
1047   09D9 D8            push b
1048   09DA 07 4B 0C      call print_signed
1049   09DD 51 02 00      add sp, 2
1050   09E0             ;; p = p + 2; 
1051   09E0 FA FF FF      lea d, [bp + -1] ; $p
1052   09E3 DA            push d
1053   09E4 FA FF FF      lea d, [bp + -1] ; $p
1054   09E7 2A            mov b, [d]
1055   09E8             ; START TERMS
1056   09E8 D7            push a
1057   09E9 11            mov a, b
1058   09EA 26 02 00      mov b, $2
1059   09ED 56            add b, a
1060   09EE E4            pop a
1061   09EF             ; END TERMS
1062   09EF E7            pop d
1063   09F0 FD 43         mov [d], b
1064   09F2             ;; break; 
1065   09F2 0A 81 0A      jmp _switch15_exit ; case break
1066   09F5             _switch15_case4:
1067   09F5             ;; print_unsigned(*(unsigned int*)p); 
1068   09F5 FA FF FF      lea d, [bp + -1] ; $p
1069   09F8 2A            mov b, [d]
1070   09F9 74            mov d, b
1071   09FA 2A            mov b, [d]
1072   09FB FD AB         swp b
1073   09FD D8            push b
1074   09FE 07 8A 0F      call print_unsigned
1075   0A01 51 02 00      add sp, 2
1076   0A04             ;; p = p + 2; 
1077   0A04 FA FF FF      lea d, [bp + -1] ; $p
1078   0A07 DA            push d
1079   0A08 FA FF FF      lea d, [bp + -1] ; $p
1080   0A0B 2A            mov b, [d]
1081   0A0C             ; START TERMS
1082   0A0C D7            push a
1083   0A0D 11            mov a, b
1084   0A0E 26 02 00      mov b, $2
1085   0A11 56            add b, a
1086   0A12 E4            pop a
1087   0A13             ; END TERMS
1088   0A13 E7            pop d
1089   0A14 FD 43         mov [d], b
1090   0A16             ;; break; 
1091   0A16 0A 81 0A      jmp _switch15_exit ; case break
1092   0A19             _switch15_case5:
1093   0A19             
1094   0A19             ; --- BEGIN INLINE ASM BLOCK
1095   0A19 FA FF FF      lea d, [bp + -1] ; $p
1096   0A1C FD 2A         mov d, [d]
1097   0A1E 2A            mov b, [d]
1098   0A1F 07 68 13      call print_u16x
1099   0A22             ; --- END INLINE ASM BLOCK
1100   0A22             
1101   0A22             ;; p = p + 2; 
1102   0A22 FA FF FF      lea d, [bp + -1] ; $p
1103   0A25 DA            push d
1104   0A26 FA FF FF      lea d, [bp + -1] ; $p
1105   0A29 2A            mov b, [d]
1106   0A2A             ; START TERMS
1107   0A2A D7            push a
1108   0A2B 11            mov a, b
1109   0A2C 26 02 00      mov b, $2
1110   0A2F 56            add b, a
1111   0A30 E4            pop a
1112   0A31             ; END TERMS
1113   0A31 E7            pop d
1114   0A32 FD 43         mov [d], b
1115   0A34             ;; break; 
1116   0A34 0A 81 0A      jmp _switch15_exit ; case break
1117   0A37             _switch15_case6:
1118   0A37             
1119   0A37             ; --- BEGIN INLINE ASM BLOCK
1120   0A37 FA FF FF      lea d, [bp + -1] ; $p
1121   0A3A FD 2A         mov d, [d]
1122   0A3C 1E            mov al, [d]
1123   0A3D 23            mov ah, al
1124   0A3E 07 C6 11      call _putchar
1125   0A41             ; --- END INLINE ASM BLOCK
1126   0A41             
1127   0A41             ;; p = p + 2; 
1128   0A41 FA FF FF      lea d, [bp + -1] ; $p
1129   0A44 DA            push d
1130   0A45 FA FF FF      lea d, [bp + -1] ; $p
1131   0A48 2A            mov b, [d]
1132   0A49             ; START TERMS
1133   0A49 D7            push a
1134   0A4A 11            mov a, b
1135   0A4B 26 02 00      mov b, $2
1136   0A4E 56            add b, a
1137   0A4F E4            pop a
1138   0A50             ; END TERMS
1139   0A50 E7            pop d
1140   0A51 FD 43         mov [d], b
1141   0A53             ;; break; 
1142   0A53 0A 81 0A      jmp _switch15_exit ; case break
1143   0A56             _switch15_case7:
1144   0A56             
1145   0A56             ; --- BEGIN INLINE ASM BLOCK
1146   0A56 FA FF FF      lea d, [bp + -1] ; $p
1147   0A59 FD 2A         mov d, [d]
1148   0A5B FD 2A         mov d, [d]
1149   0A5D 07 10 13      call _puts
1150   0A60             ; --- END INLINE ASM BLOCK
1151   0A60             
1152   0A60             ;; p = p + 2; 
1153   0A60 FA FF FF      lea d, [bp + -1] ; $p
1154   0A63 DA            push d
1155   0A64 FA FF FF      lea d, [bp + -1] ; $p
1156   0A67 2A            mov b, [d]
1157   0A68             ; START TERMS
1158   0A68 D7            push a
1159   0A69 11            mov a, b
1160   0A6A 26 02 00      mov b, $2
1161   0A6D 56            add b, a
1162   0A6E E4            pop a
1163   0A6F             ; END TERMS
1164   0A6F E7            pop d
1165   0A70 FD 43         mov [d], b
1166   0A72             ;; break; 
1167   0A72 0A 81 0A      jmp _switch15_exit ; case break
1168   0A75             _switch15_default:
1169   0A75             ;; print("Error: Unknown argument type.\n"); 
1170   0A75 26 1C 1E      mov b, __s4 ; "Error: Unknown argument type.\n"
1171   0A78 FD AB         swp b
1172   0A7A D8            push b
1173   0A7B 07 A2 10      call print
1174   0A7E 51 02 00      add sp, 2
1175   0A81             _switch15_exit:
1176   0A81             ;; format_p++; 
1177   0A81 FA FD FF      lea d, [bp + -3] ; $format_p
1178   0A84 2A            mov b, [d]
1179   0A85 D8            push b
1180   0A86 FD 77         inc b
1181   0A88 FA FD FF      lea d, [bp + -3] ; $format_p
1182   0A8B FD 43         mov [d], b
1183   0A8D E5            pop b
1184   0A8E 0A AD 0A      jmp _if14_exit
1185   0A91             _if14_else:
1186   0A91             ;; putchar(*format_p); 
1187   0A91 FA FD FF      lea d, [bp + -3] ; $format_p
1188   0A94 2A            mov b, [d]
1189   0A95 74            mov d, b
1190   0A96 32            mov bl, [d]
1191   0A97 A7 00         mov bh, 0
1192   0A99 DD            push bl
1193   0A9A 07 5A 10      call putchar
1194   0A9D 51 01 00      add sp, 1
1195   0AA0             ;; format_p++; 
1196   0AA0 FA FD FF      lea d, [bp + -3] ; $format_p
1197   0AA3 2A            mov b, [d]
1198   0AA4 D8            push b
1199   0AA5 FD 77         inc b
1200   0AA7 FA FD FF      lea d, [bp + -3] ; $format_p
1201   0AAA FD 43         mov [d], b
1202   0AAC E5            pop b
1203   0AAD             _if14_exit:
1204   0AAD             _if13_exit:
1205   0AAD             _for12_update:
1206   0AAD 0A 8E 08      jmp _for12_cond
1207   0AB0             _for12_exit:
1208   0AB0 F9            leave
1209   0AB1 09            ret
1210   0AB2             
1211   0AB2             err:
1212   0AB2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1213   0AB5             ;; print(e); 
1214   0AB5 FA 05 00      lea d, [bp + 5] ; $e
1215   0AB8 2A            mov b, [d]
1216   0AB9 FD AB         swp b
1217   0ABB D8            push b
1218   0ABC 07 A2 10      call print
1219   0ABF 51 02 00      add sp, 2
1220   0AC2 F9            leave
1221   0AC3 09            ret
1222   0AC4             
1223   0AC4             printx32:
1224   0AC4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1225   0AC7             
1226   0AC7             ; --- BEGIN INLINE ASM BLOCK
1227   0AC7 FA 05 00      lea d, [bp + 5] ; $hex
1228   0ACA 2B 02 00      mov b, [d+2]
1229   0ACD 07 68 13      call print_u16x
1230   0AD0 2A            mov b, [d]
1231   0AD1 07 68 13      call print_u16x
1232   0AD4             ; --- END INLINE ASM BLOCK
1233   0AD4             
1234   0AD4 F9            leave
1235   0AD5 09            ret
1236   0AD6             
1237   0AD6             printx16:
1238   0AD6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1239   0AD9             
1240   0AD9             ; --- BEGIN INLINE ASM BLOCK
1241   0AD9 FA 05 00      lea d, [bp + 5] ; $hex
1242   0ADC 2A            mov b, [d]
1243   0ADD 07 68 13      call print_u16x
1244   0AE0             ; --- END INLINE ASM BLOCK
1245   0AE0             
1246   0AE0 F9            leave
1247   0AE1 09            ret
1248   0AE2             
1249   0AE2             printx8:
1250   0AE2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1251   0AE5             
1252   0AE5             ; --- BEGIN INLINE ASM BLOCK
1253   0AE5 FA 05 00      lea d, [bp + 5] ; $hex
1254   0AE8 32            mov bl, [d]
1255   0AE9 07 AC 13      call print_u8x
1256   0AEC             ; --- END INLINE ASM BLOCK
1257   0AEC             
1258   0AEC F9            leave
1259   0AED 09            ret
1260   0AEE             
1261   0AEE             hex_str_to_int:
1262   0AEE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1263   0AF1             ; $value 
1264   0AF1 10 00 00      mov a, $0
1265   0AF4 45 FF FF      mov [bp + -1], a
1266   0AF7             ; $i 
1267   0AF7             ; $hex_char 
1268   0AF7             ; $len 
1269   0AF7 52 07 00      sub sp, 7
1270   0AFA             ;; len = strlen(hex_string); 
1271   0AFA FA FA FF      lea d, [bp + -6] ; $len
1272   0AFD DA            push d
1273   0AFE FA 05 00      lea d, [bp + 5] ; $hex_string
1274   0B01 2A            mov b, [d]
1275   0B02 FD AB         swp b
1276   0B04 D8            push b
1277   0B05 07 E7 05      call strlen
1278   0B08 51 02 00      add sp, 2
1279   0B0B E7            pop d
1280   0B0C FD 43         mov [d], b
1281   0B0E             ;; for (i = 0; i < len; i++) { 
1282   0B0E             _for19_init:
1283   0B0E FA FD FF      lea d, [bp + -3] ; $i
1284   0B11 DA            push d
1285   0B12 26 00 00      mov b, $0
1286   0B15 E7            pop d
1287   0B16 FD 43         mov [d], b
1288   0B18             _for19_cond:
1289   0B18 FA FD FF      lea d, [bp + -3] ; $i
1290   0B1B 2A            mov b, [d]
1291   0B1C             ; START RELATIONAL
1292   0B1C D7            push a
1293   0B1D 11            mov a, b
1294   0B1E FA FA FF      lea d, [bp + -6] ; $len
1295   0B21 2A            mov b, [d]
1296   0B22 B0            cmp a, b
1297   0B23 FD 73         slt ; <= (signed)
1298   0B25 E4            pop a
1299   0B26             ; END RELATIONAL
1300   0B26 C0 00 00      cmp b, 0
1301   0B29 C6 2B 0C      je _for19_exit
1302   0B2C             _for19_block:
1303   0B2C             ;; hex_char = hex_string[i]; 
1304   0B2C FA FC FF      lea d, [bp + -4] ; $hex_char
1305   0B2F DA            push d
1306   0B30 FA 05 00      lea d, [bp + 5] ; $hex_string
1307   0B33 FD 2A         mov d, [d]
1308   0B35 D7            push a
1309   0B36 DA            push d
1310   0B37 FA FD FF      lea d, [bp + -3] ; $i
1311   0B3A 2A            mov b, [d]
1312   0B3B E7            pop d
1313   0B3C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1314   0B40 E4            pop a
1315   0B41 32            mov bl, [d]
1316   0B42 A7 00         mov bh, 0
1317   0B44 E7            pop d
1318   0B45 FD 3E         mov [d], bl
1319   0B47             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1320   0B47             _if20_cond:
1321   0B47 FA FC FF      lea d, [bp + -4] ; $hex_char
1322   0B4A 32            mov bl, [d]
1323   0B4B A7 00         mov bh, 0
1324   0B4D             ; START RELATIONAL
1325   0B4D D7            push a
1326   0B4E 11            mov a, b
1327   0B4F 26 61 00      mov b, $61
1328   0B52 B0            cmp a, b
1329   0B53 FD 80         sge ; >=
1330   0B55 E4            pop a
1331   0B56             ; END RELATIONAL
1332   0B56 D7            push a
1333   0B57 11            mov a, b
1334   0B58 FA FC FF      lea d, [bp + -4] ; $hex_char
1335   0B5B 32            mov bl, [d]
1336   0B5C A7 00         mov bh, 0
1337   0B5E             ; START RELATIONAL
1338   0B5E D7            push a
1339   0B5F 11            mov a, b
1340   0B60 26 66 00      mov b, $66
1341   0B63 B0            cmp a, b
1342   0B64 FD 74         sle ; <=
1343   0B66 E4            pop a
1344   0B67             ; END RELATIONAL
1345   0B67 FD A7         sand a, b ; &&
1346   0B69 E4            pop a
1347   0B6A C0 00 00      cmp b, 0
1348   0B6D C6 9E 0B      je _if20_else
1349   0B70             _if20_true:
1350   0B70             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1351   0B70 FA FF FF      lea d, [bp + -1] ; $value
1352   0B73 DA            push d
1353   0B74 FA FF FF      lea d, [bp + -1] ; $value
1354   0B77 2A            mov b, [d]
1355   0B78             ; START FACTORS
1356   0B78 D7            push a
1357   0B79 11            mov a, b
1358   0B7A 26 10 00      mov b, $10
1359   0B7D AC            mul a, b ; *
1360   0B7E 11            mov a, b
1361   0B7F 27            mov b, a
1362   0B80 E4            pop a
1363   0B81             ; END FACTORS
1364   0B81             ; START TERMS
1365   0B81 D7            push a
1366   0B82 11            mov a, b
1367   0B83 FA FC FF      lea d, [bp + -4] ; $hex_char
1368   0B86 32            mov bl, [d]
1369   0B87 A7 00         mov bh, 0
1370   0B89             ; START TERMS
1371   0B89 D7            push a
1372   0B8A 11            mov a, b
1373   0B8B 26 61 00      mov b, $61
1374   0B8E 60            sub a, b
1375   0B8F 27            mov b, a
1376   0B90 11            mov a, b
1377   0B91 26 0A 00      mov b, $a
1378   0B94 56            add b, a
1379   0B95 E4            pop a
1380   0B96             ; END TERMS
1381   0B96 56            add b, a
1382   0B97 E4            pop a
1383   0B98             ; END TERMS
1384   0B98 E7            pop d
1385   0B99 FD 43         mov [d], b
1386   0B9B 0A 1B 0C      jmp _if20_exit
1387   0B9E             _if20_else:
1388   0B9E             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1389   0B9E             _if21_cond:
1390   0B9E FA FC FF      lea d, [bp + -4] ; $hex_char
1391   0BA1 32            mov bl, [d]
1392   0BA2 A7 00         mov bh, 0
1393   0BA4             ; START RELATIONAL
1394   0BA4 D7            push a
1395   0BA5 11            mov a, b
1396   0BA6 26 41 00      mov b, $41
1397   0BA9 B0            cmp a, b
1398   0BAA FD 80         sge ; >=
1399   0BAC E4            pop a
1400   0BAD             ; END RELATIONAL
1401   0BAD D7            push a
1402   0BAE 11            mov a, b
1403   0BAF FA FC FF      lea d, [bp + -4] ; $hex_char
1404   0BB2 32            mov bl, [d]
1405   0BB3 A7 00         mov bh, 0
1406   0BB5             ; START RELATIONAL
1407   0BB5 D7            push a
1408   0BB6 11            mov a, b
1409   0BB7 26 46 00      mov b, $46
1410   0BBA B0            cmp a, b
1411   0BBB FD 74         sle ; <=
1412   0BBD E4            pop a
1413   0BBE             ; END RELATIONAL
1414   0BBE FD A7         sand a, b ; &&
1415   0BC0 E4            pop a
1416   0BC1 C0 00 00      cmp b, 0
1417   0BC4 C6 F5 0B      je _if21_else
1418   0BC7             _if21_true:
1419   0BC7             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1420   0BC7 FA FF FF      lea d, [bp + -1] ; $value
1421   0BCA DA            push d
1422   0BCB FA FF FF      lea d, [bp + -1] ; $value
1423   0BCE 2A            mov b, [d]
1424   0BCF             ; START FACTORS
1425   0BCF D7            push a
1426   0BD0 11            mov a, b
1427   0BD1 26 10 00      mov b, $10
1428   0BD4 AC            mul a, b ; *
1429   0BD5 11            mov a, b
1430   0BD6 27            mov b, a
1431   0BD7 E4            pop a
1432   0BD8             ; END FACTORS
1433   0BD8             ; START TERMS
1434   0BD8 D7            push a
1435   0BD9 11            mov a, b
1436   0BDA FA FC FF      lea d, [bp + -4] ; $hex_char
1437   0BDD 32            mov bl, [d]
1438   0BDE A7 00         mov bh, 0
1439   0BE0             ; START TERMS
1440   0BE0 D7            push a
1441   0BE1 11            mov a, b
1442   0BE2 26 41 00      mov b, $41
1443   0BE5 60            sub a, b
1444   0BE6 27            mov b, a
1445   0BE7 11            mov a, b
1446   0BE8 26 0A 00      mov b, $a
1447   0BEB 56            add b, a
1448   0BEC E4            pop a
1449   0BED             ; END TERMS
1450   0BED 56            add b, a
1451   0BEE E4            pop a
1452   0BEF             ; END TERMS
1453   0BEF E7            pop d
1454   0BF0 FD 43         mov [d], b
1455   0BF2 0A 1B 0C      jmp _if21_exit
1456   0BF5             _if21_else:
1457   0BF5             ;; value = (value * 16) + (hex_char - '0'); 
1458   0BF5 FA FF FF      lea d, [bp + -1] ; $value
1459   0BF8 DA            push d
1460   0BF9 FA FF FF      lea d, [bp + -1] ; $value
1461   0BFC 2A            mov b, [d]
1462   0BFD             ; START FACTORS
1463   0BFD D7            push a
1464   0BFE 11            mov a, b
1465   0BFF 26 10 00      mov b, $10
1466   0C02 AC            mul a, b ; *
1467   0C03 11            mov a, b
1468   0C04 27            mov b, a
1469   0C05 E4            pop a
1470   0C06             ; END FACTORS
1471   0C06             ; START TERMS
1472   0C06 D7            push a
1473   0C07 11            mov a, b
1474   0C08 FA FC FF      lea d, [bp + -4] ; $hex_char
1475   0C0B 32            mov bl, [d]
1476   0C0C A7 00         mov bh, 0
1477   0C0E             ; START TERMS
1478   0C0E D7            push a
1479   0C0F 11            mov a, b
1480   0C10 26 30 00      mov b, $30
1481   0C13 60            sub a, b
1482   0C14 27            mov b, a
1483   0C15 E4            pop a
1484   0C16             ; END TERMS
1485   0C16 56            add b, a
1486   0C17 E4            pop a
1487   0C18             ; END TERMS
1488   0C18 E7            pop d
1489   0C19 FD 43         mov [d], b
1490   0C1B             _if21_exit:
1491   0C1B             _if20_exit:
1492   0C1B             _for19_update:
1493   0C1B FA FD FF      lea d, [bp + -3] ; $i
1494   0C1E 2A            mov b, [d]
1495   0C1F D8            push b
1496   0C20 FD 77         inc b
1497   0C22 FA FD FF      lea d, [bp + -3] ; $i
1498   0C25 FD 43         mov [d], b
1499   0C27 E5            pop b
1500   0C28 0A 18 0B      jmp _for19_cond
1501   0C2B             _for19_exit:
1502   0C2B             ;; return value; 
1503   0C2B FA FF FF      lea d, [bp + -1] ; $value
1504   0C2E 2A            mov b, [d]
1505   0C2F F9            leave
1506   0C30 09            ret
1507   0C31             
1508   0C31             gets:
1509   0C31 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1510   0C34             
1511   0C34             ; --- BEGIN INLINE ASM BLOCK
1512   0C34 FA 05 00      lea d, [bp + 5] ; $s
1513   0C37 15            mov a, [d]
1514   0C38 3C            mov d, a
1515   0C39 07 CD 11      call _gets
1516   0C3C             ; --- END INLINE ASM BLOCK
1517   0C3C             
1518   0C3C             ;; return strlen(s); 
1519   0C3C FA 05 00      lea d, [bp + 5] ; $s
1520   0C3F 2A            mov b, [d]
1521   0C40 FD AB         swp b
1522   0C42 D8            push b
1523   0C43 07 E7 05      call strlen
1524   0C46 51 02 00      add sp, 2
1525   0C49 F9            leave
1526   0C4A 09            ret
1527   0C4B             
1528   0C4B             print_signed:
1529   0C4B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1530   0C4E             ; $digits 
1531   0C4E             ; $i 
1532   0C4E 10 00 00      mov a, $0
1533   0C51 45 FA FF      mov [bp + -6], a
1534   0C54 52 07 00      sub sp, 7
1535   0C57             ;; if (num < 0) { 
1536   0C57             _if22_cond:
1537   0C57 FA 05 00      lea d, [bp + 5] ; $num
1538   0C5A 2A            mov b, [d]
1539   0C5B             ; START RELATIONAL
1540   0C5B D7            push a
1541   0C5C 11            mov a, b
1542   0C5D 26 00 00      mov b, $0
1543   0C60 B0            cmp a, b
1544   0C61 FD 73         slt ; <= (signed)
1545   0C63 E4            pop a
1546   0C64             ; END RELATIONAL
1547   0C64 C0 00 00      cmp b, 0
1548   0C67 C6 84 0C      je _if22_else
1549   0C6A             _if22_true:
1550   0C6A             ;; putchar('-'); 
1551   0C6A 26 2D 00      mov b, $2d
1552   0C6D DD            push bl
1553   0C6E 07 5A 10      call putchar
1554   0C71 51 01 00      add sp, 1
1555   0C74             ;; num = -num; 
1556   0C74 FA 05 00      lea d, [bp + 5] ; $num
1557   0C77 DA            push d
1558   0C78 FA 05 00      lea d, [bp + 5] ; $num
1559   0C7B 2A            mov b, [d]
1560   0C7C FD 97         neg b
1561   0C7E E7            pop d
1562   0C7F FD 43         mov [d], b
1563   0C81 0A A6 0C      jmp _if22_exit
1564   0C84             _if22_else:
1565   0C84             ;; if (num == 0) { 
1566   0C84             _if23_cond:
1567   0C84 FA 05 00      lea d, [bp + 5] ; $num
1568   0C87 2A            mov b, [d]
1569   0C88             ; START RELATIONAL
1570   0C88 D7            push a
1571   0C89 11            mov a, b
1572   0C8A 26 00 00      mov b, $0
1573   0C8D B0            cmp a, b
1574   0C8E FD 71         seq ; ==
1575   0C90 E4            pop a
1576   0C91             ; END RELATIONAL
1577   0C91 C0 00 00      cmp b, 0
1578   0C94 C6 A6 0C      je _if23_exit
1579   0C97             _if23_true:
1580   0C97             ;; putchar('0'); 
1581   0C97 26 30 00      mov b, $30
1582   0C9A DD            push bl
1583   0C9B 07 5A 10      call putchar
1584   0C9E 51 01 00      add sp, 1
1585   0CA1             ;; return; 
1586   0CA1 F9            leave
1587   0CA2 09            ret
1588   0CA3 0A A6 0C      jmp _if23_exit
1589   0CA6             _if23_exit:
1590   0CA6             _if22_exit:
1591   0CA6             ;; while (num > 0) { 
1592   0CA6             _while24_cond:
1593   0CA6 FA 05 00      lea d, [bp + 5] ; $num
1594   0CA9 2A            mov b, [d]
1595   0CAA             ; START RELATIONAL
1596   0CAA D7            push a
1597   0CAB 11            mov a, b
1598   0CAC 26 00 00      mov b, $0
1599   0CAF B0            cmp a, b
1600   0CB0 FD 7F         sgt ; >
1601   0CB2 E4            pop a
1602   0CB3             ; END RELATIONAL
1603   0CB3 C0 00 00      cmp b, 0
1604   0CB6 C6 00 0D      je _while24_exit
1605   0CB9             _while24_block:
1606   0CB9             ;; digits[i] = '0' + (num % 10); 
1607   0CB9 FA FC FF      lea d, [bp + -4] ; $digits
1608   0CBC D7            push a
1609   0CBD DA            push d
1610   0CBE FA FA FF      lea d, [bp + -6] ; $i
1611   0CC1 2A            mov b, [d]
1612   0CC2 E7            pop d
1613   0CC3 5A            add d, b
1614   0CC4 E4            pop a
1615   0CC5 DA            push d
1616   0CC6 26 30 00      mov b, $30
1617   0CC9             ; START TERMS
1618   0CC9 D7            push a
1619   0CCA 11            mov a, b
1620   0CCB FA 05 00      lea d, [bp + 5] ; $num
1621   0CCE 2A            mov b, [d]
1622   0CCF             ; START FACTORS
1623   0CCF D7            push a
1624   0CD0 11            mov a, b
1625   0CD1 26 0A 00      mov b, $a
1626   0CD4 AE            div a, b ; 
1627   0CD5 11            mov a, b
1628   0CD6 27            mov b, a
1629   0CD7 E4            pop a
1630   0CD8             ; END FACTORS
1631   0CD8 56            add b, a
1632   0CD9 E4            pop a
1633   0CDA             ; END TERMS
1634   0CDA E7            pop d
1635   0CDB FD 3E         mov [d], bl
1636   0CDD             ;; num = num / 10; 
1637   0CDD FA 05 00      lea d, [bp + 5] ; $num
1638   0CE0 DA            push d
1639   0CE1 FA 05 00      lea d, [bp + 5] ; $num
1640   0CE4 2A            mov b, [d]
1641   0CE5             ; START FACTORS
1642   0CE5 D7            push a
1643   0CE6 11            mov a, b
1644   0CE7 26 0A 00      mov b, $a
1645   0CEA AE            div a, b
1646   0CEB 27            mov b, a
1647   0CEC E4            pop a
1648   0CED             ; END FACTORS
1649   0CED E7            pop d
1650   0CEE FD 43         mov [d], b
1651   0CF0             ;; i++; 
1652   0CF0 FA FA FF      lea d, [bp + -6] ; $i
1653   0CF3 2A            mov b, [d]
1654   0CF4 D8            push b
1655   0CF5 FD 77         inc b
1656   0CF7 FA FA FF      lea d, [bp + -6] ; $i
1657   0CFA FD 43         mov [d], b
1658   0CFC E5            pop b
1659   0CFD 0A A6 0C      jmp _while24_cond
1660   0D00             _while24_exit:
1661   0D00             ;; while (i > 0) { 
1662   0D00             _while25_cond:
1663   0D00 FA FA FF      lea d, [bp + -6] ; $i
1664   0D03 2A            mov b, [d]
1665   0D04             ; START RELATIONAL
1666   0D04 D7            push a
1667   0D05 11            mov a, b
1668   0D06 26 00 00      mov b, $0
1669   0D09 B0            cmp a, b
1670   0D0A FD 7F         sgt ; >
1671   0D0C E4            pop a
1672   0D0D             ; END RELATIONAL
1673   0D0D C0 00 00      cmp b, 0
1674   0D10 C6 39 0D      je _while25_exit
1675   0D13             _while25_block:
1676   0D13             ;; i--; 
1677   0D13 FA FA FF      lea d, [bp + -6] ; $i
1678   0D16 2A            mov b, [d]
1679   0D17 D8            push b
1680   0D18 FD 7D         dec b
1681   0D1A FA FA FF      lea d, [bp + -6] ; $i
1682   0D1D FD 43         mov [d], b
1683   0D1F E5            pop b
1684   0D20             ;; putchar(digits[i]); 
1685   0D20 FA FC FF      lea d, [bp + -4] ; $digits
1686   0D23 D7            push a
1687   0D24 DA            push d
1688   0D25 FA FA FF      lea d, [bp + -6] ; $i
1689   0D28 2A            mov b, [d]
1690   0D29 E7            pop d
1691   0D2A 5A            add d, b
1692   0D2B E4            pop a
1693   0D2C 32            mov bl, [d]
1694   0D2D A7 00         mov bh, 0
1695   0D2F DD            push bl
1696   0D30 07 5A 10      call putchar
1697   0D33 51 01 00      add sp, 1
1698   0D36 0A 00 0D      jmp _while25_cond
1699   0D39             _while25_exit:
1700   0D39 F9            leave
1701   0D3A 09            ret
1702   0D3B             
1703   0D3B             print_signed_long:
1704   0D3B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1705   0D3E             ; $digits 
1706   0D3E             ; $i 
1707   0D3E 10 00 00      mov a, $0
1708   0D41 45 F5 FF      mov [bp + -11], a
1709   0D44 52 0C 00      sub sp, 12
1710   0D47             ;; if (num < 0) { 
1711   0D47             _if26_cond:
1712   0D47 FA 05 00      lea d, [bp + 5] ; $num
1713   0D4A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1714   0D4D FD 39         mov c, b ; And place it into C
1715   0D4F 2A            mov b, [d] ; Lower Word in B
1716   0D50             ; START RELATIONAL
1717   0D50 D7            push a
1718   0D51 FD D8         push g
1719   0D53 11            mov a, b
1720   0D54 FD 7A         mov g, c
1721   0D56 26 00 00      mov b, $0
1722   0D59 4D            mov si, a
1723   0D5A 11            mov a, b
1724   0D5B 4F            mov di, a
1725   0D5C FD 12         mov a, g
1726   0D5E 28            mov b, c
1727   0D5F B0            cmp a, b
1728   0D60 FD 75         slu ; <
1729   0D62 D8            push b
1730   0D63 28            mov b, c
1731   0D64 FD 71         seq ; ==
1732   0D66 D8            push b
1733   0D67 50            mov a, di
1734   0D68 27            mov b, a
1735   0D69 4E            mov a, si
1736   0D6A B0            cmp a, b
1737   0D6B FD 75         slu ; <
1738   0D6D E4            pop a
1739   0D6E FD 92         and b, a
1740   0D70 E4            pop a
1741   0D71 FD 70         or b, a
1742   0D73               
1743   0D73 FD F1         pop g
1744   0D75 E4            pop a
1745   0D76             ; END RELATIONAL
1746   0D76 C0 00 00      cmp b, 0
1747   0D79 C6 A0 0D      je _if26_else
1748   0D7C             _if26_true:
1749   0D7C             ;; putchar('-'); 
1750   0D7C 26 2D 00      mov b, $2d
1751   0D7F DD            push bl
1752   0D80 07 5A 10      call putchar
1753   0D83 51 01 00      add sp, 1
1754   0D86             ;; num = -num; 
1755   0D86 FA 05 00      lea d, [bp + 5] ; $num
1756   0D89 DA            push d
1757   0D8A FA 05 00      lea d, [bp + 5] ; $num
1758   0D8D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1759   0D90 FD 39         mov c, b ; And place it into C
1760   0D92 2A            mov b, [d] ; Lower Word in B
1761   0D93 FD 97         neg b
1762   0D95 E7            pop d
1763   0D96 FD 43         mov [d], b
1764   0D98 28            mov b, c
1765   0D99 FD 44 02 00   mov [d + 2], b
1766   0D9D 0A D7 0D      jmp _if26_exit
1767   0DA0             _if26_else:
1768   0DA0             ;; if (num == 0) { 
1769   0DA0             _if27_cond:
1770   0DA0 FA 05 00      lea d, [bp + 5] ; $num
1771   0DA3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1772   0DA6 FD 39         mov c, b ; And place it into C
1773   0DA8 2A            mov b, [d] ; Lower Word in B
1774   0DA9             ; START RELATIONAL
1775   0DA9 D7            push a
1776   0DAA FD D8         push g
1777   0DAC 11            mov a, b
1778   0DAD FD 7A         mov g, c
1779   0DAF 26 00 00      mov b, $0
1780   0DB2 B0            cmp a, b
1781   0DB3 FD 71         seq ; ==
1782   0DB5 D8            push b
1783   0DB6 12            mov a, c
1784   0DB7 FD 27         mov b, g
1785   0DB9 B0            cmp a, b
1786   0DBA FD 71         seq ; ==
1787   0DBC E4            pop a
1788   0DBD FD A7         sand a, b
1789   0DBF FD F1         pop g
1790   0DC1 E4            pop a
1791   0DC2             ; END RELATIONAL
1792   0DC2 C0 00 00      cmp b, 0
1793   0DC5 C6 D7 0D      je _if27_exit
1794   0DC8             _if27_true:
1795   0DC8             ;; putchar('0'); 
1796   0DC8 26 30 00      mov b, $30
1797   0DCB DD            push bl
1798   0DCC 07 5A 10      call putchar
1799   0DCF 51 01 00      add sp, 1
1800   0DD2             ;; return; 
1801   0DD2 F9            leave
1802   0DD3 09            ret
1803   0DD4 0A D7 0D      jmp _if27_exit
1804   0DD7             _if27_exit:
1805   0DD7             _if26_exit:
1806   0DD7             ;; while (num > 0) { 
1807   0DD7             _while28_cond:
1808   0DD7 FA 05 00      lea d, [bp + 5] ; $num
1809   0DDA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1810   0DDD FD 39         mov c, b ; And place it into C
1811   0DDF 2A            mov b, [d] ; Lower Word in B
1812   0DE0             ; START RELATIONAL
1813   0DE0 D7            push a
1814   0DE1 FD D8         push g
1815   0DE3 11            mov a, b
1816   0DE4 FD 7A         mov g, c
1817   0DE6 26 00 00      mov b, $0
1818   0DE9 B0            cmp a, b
1819   0DEA FD 7F         sgt ; >
1820   0DEC FD F1         pop g
1821   0DEE E4            pop a
1822   0DEF             ; END RELATIONAL
1823   0DEF C0 00 00      cmp b, 0
1824   0DF2 C6 52 0E      je _while28_exit
1825   0DF5             _while28_block:
1826   0DF5             ;; digits[i] = '0' + (num % 10); 
1827   0DF5 FA F7 FF      lea d, [bp + -9] ; $digits
1828   0DF8 D7            push a
1829   0DF9 DA            push d
1830   0DFA FA F5 FF      lea d, [bp + -11] ; $i
1831   0DFD 2A            mov b, [d]
1832   0DFE E7            pop d
1833   0DFF 5A            add d, b
1834   0E00 E4            pop a
1835   0E01 DA            push d
1836   0E02 26 30 00      mov b, $30
1837   0E05             ; START TERMS
1838   0E05 D7            push a
1839   0E06 11            mov a, b
1840   0E07 FA 05 00      lea d, [bp + 5] ; $num
1841   0E0A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1842   0E0D FD 39         mov c, b ; And place it into C
1843   0E0F 2A            mov b, [d] ; Lower Word in B
1844   0E10             ; START FACTORS
1845   0E10 D7            push a
1846   0E11 11            mov a, b
1847   0E12 26 0A 00      mov b, $a
1848   0E15 AE            div a, b ; 
1849   0E16 11            mov a, b
1850   0E17 27            mov b, a
1851   0E18 E4            pop a
1852   0E19             ; END FACTORS
1853   0E19 54            add a, b
1854   0E1A D7            push a
1855   0E1B FD 12         mov a, g
1856   0E1D 28            mov b, c
1857   0E1E 5C            adc a, b
1858   0E1F 39            mov c, a
1859   0E20 E5            pop b
1860   0E21 E4            pop a
1861   0E22             ; END TERMS
1862   0E22 E7            pop d
1863   0E23 FD 3E         mov [d], bl
1864   0E25             ;; num = num / 10; 
1865   0E25 FA 05 00      lea d, [bp + 5] ; $num
1866   0E28 DA            push d
1867   0E29 FA 05 00      lea d, [bp + 5] ; $num
1868   0E2C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1869   0E2F FD 39         mov c, b ; And place it into C
1870   0E31 2A            mov b, [d] ; Lower Word in B
1871   0E32             ; START FACTORS
1872   0E32 D7            push a
1873   0E33 11            mov a, b
1874   0E34 26 0A 00      mov b, $a
1875   0E37 AE            div a, b
1876   0E38 27            mov b, a
1877   0E39 E4            pop a
1878   0E3A             ; END FACTORS
1879   0E3A E7            pop d
1880   0E3B FD 43         mov [d], b
1881   0E3D 28            mov b, c
1882   0E3E FD 44 02 00   mov [d + 2], b
1883   0E42             ;; i++; 
1884   0E42 FA F5 FF      lea d, [bp + -11] ; $i
1885   0E45 2A            mov b, [d]
1886   0E46 D8            push b
1887   0E47 FD 77         inc b
1888   0E49 FA F5 FF      lea d, [bp + -11] ; $i
1889   0E4C FD 43         mov [d], b
1890   0E4E E5            pop b
1891   0E4F 0A D7 0D      jmp _while28_cond
1892   0E52             _while28_exit:
1893   0E52             ;; while (i > 0) { 
1894   0E52             _while29_cond:
1895   0E52 FA F5 FF      lea d, [bp + -11] ; $i
1896   0E55 2A            mov b, [d]
1897   0E56             ; START RELATIONAL
1898   0E56 D7            push a
1899   0E57 11            mov a, b
1900   0E58 26 00 00      mov b, $0
1901   0E5B B0            cmp a, b
1902   0E5C FD 7F         sgt ; >
1903   0E5E E4            pop a
1904   0E5F             ; END RELATIONAL
1905   0E5F C0 00 00      cmp b, 0
1906   0E62 C6 8B 0E      je _while29_exit
1907   0E65             _while29_block:
1908   0E65             ;; i--; 
1909   0E65 FA F5 FF      lea d, [bp + -11] ; $i
1910   0E68 2A            mov b, [d]
1911   0E69 D8            push b
1912   0E6A FD 7D         dec b
1913   0E6C FA F5 FF      lea d, [bp + -11] ; $i
1914   0E6F FD 43         mov [d], b
1915   0E71 E5            pop b
1916   0E72             ;; putchar(digits[i]); 
1917   0E72 FA F7 FF      lea d, [bp + -9] ; $digits
1918   0E75 D7            push a
1919   0E76 DA            push d
1920   0E77 FA F5 FF      lea d, [bp + -11] ; $i
1921   0E7A 2A            mov b, [d]
1922   0E7B E7            pop d
1923   0E7C 5A            add d, b
1924   0E7D E4            pop a
1925   0E7E 32            mov bl, [d]
1926   0E7F A7 00         mov bh, 0
1927   0E81 DD            push bl
1928   0E82 07 5A 10      call putchar
1929   0E85 51 01 00      add sp, 1
1930   0E88 0A 52 0E      jmp _while29_cond
1931   0E8B             _while29_exit:
1932   0E8B F9            leave
1933   0E8C 09            ret
1934   0E8D             
1935   0E8D             print_unsigned_long:
1936   0E8D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1937   0E90             ; $digits 
1938   0E90             ; $i 
1939   0E90 52 0C 00      sub sp, 12
1940   0E93             ;; i = 0; 
1941   0E93 FA F5 FF      lea d, [bp + -11] ; $i
1942   0E96 DA            push d
1943   0E97 26 00 00      mov b, $0
1944   0E9A E7            pop d
1945   0E9B FD 43         mov [d], b
1946   0E9D             ;; if(num == 0){ 
1947   0E9D             _if30_cond:
1948   0E9D FA 05 00      lea d, [bp + 5] ; $num
1949   0EA0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1950   0EA3 FD 39         mov c, b ; And place it into C
1951   0EA5 2A            mov b, [d] ; Lower Word in B
1952   0EA6             ; START RELATIONAL
1953   0EA6 D7            push a
1954   0EA7 FD D8         push g
1955   0EA9 11            mov a, b
1956   0EAA FD 7A         mov g, c
1957   0EAC 26 00 00      mov b, $0
1958   0EAF B0            cmp a, b
1959   0EB0 FD 71         seq ; ==
1960   0EB2 D8            push b
1961   0EB3 12            mov a, c
1962   0EB4 FD 27         mov b, g
1963   0EB6 B0            cmp a, b
1964   0EB7 FD 71         seq ; ==
1965   0EB9 E4            pop a
1966   0EBA FD A7         sand a, b
1967   0EBC FD F1         pop g
1968   0EBE E4            pop a
1969   0EBF             ; END RELATIONAL
1970   0EBF C0 00 00      cmp b, 0
1971   0EC2 C6 D4 0E      je _if30_exit
1972   0EC5             _if30_true:
1973   0EC5             ;; putchar('0'); 
1974   0EC5 26 30 00      mov b, $30
1975   0EC8 DD            push bl
1976   0EC9 07 5A 10      call putchar
1977   0ECC 51 01 00      add sp, 1
1978   0ECF             ;; return; 
1979   0ECF F9            leave
1980   0ED0 09            ret
1981   0ED1 0A D4 0E      jmp _if30_exit
1982   0ED4             _if30_exit:
1983   0ED4             ;; while (num > 0) { 
1984   0ED4             _while31_cond:
1985   0ED4 FA 05 00      lea d, [bp + 5] ; $num
1986   0ED7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1987   0EDA FD 39         mov c, b ; And place it into C
1988   0EDC 2A            mov b, [d] ; Lower Word in B
1989   0EDD             ; START RELATIONAL
1990   0EDD D7            push a
1991   0EDE FD D8         push g
1992   0EE0 11            mov a, b
1993   0EE1 FD 7A         mov g, c
1994   0EE3 26 00 00      mov b, $0
1995   0EE6 B0            cmp a, b
1996   0EE7 FD 81         sgu ; > (unsigned)
1997   0EE9 FD F1         pop g
1998   0EEB E4            pop a
1999   0EEC             ; END RELATIONAL
2000   0EEC C0 00 00      cmp b, 0
2001   0EEF C6 4F 0F      je _while31_exit
2002   0EF2             _while31_block:
2003   0EF2             ;; digits[i] = '0' + (num % 10); 
2004   0EF2 FA F7 FF      lea d, [bp + -9] ; $digits
2005   0EF5 D7            push a
2006   0EF6 DA            push d
2007   0EF7 FA F5 FF      lea d, [bp + -11] ; $i
2008   0EFA 2A            mov b, [d]
2009   0EFB E7            pop d
2010   0EFC 5A            add d, b
2011   0EFD E4            pop a
2012   0EFE DA            push d
2013   0EFF 26 30 00      mov b, $30
2014   0F02             ; START TERMS
2015   0F02 D7            push a
2016   0F03 11            mov a, b
2017   0F04 FA 05 00      lea d, [bp + 5] ; $num
2018   0F07 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2019   0F0A FD 39         mov c, b ; And place it into C
2020   0F0C 2A            mov b, [d] ; Lower Word in B
2021   0F0D             ; START FACTORS
2022   0F0D D7            push a
2023   0F0E 11            mov a, b
2024   0F0F 26 0A 00      mov b, $a
2025   0F12 AE            div a, b ; 
2026   0F13 11            mov a, b
2027   0F14 27            mov b, a
2028   0F15 E4            pop a
2029   0F16             ; END FACTORS
2030   0F16 54            add a, b
2031   0F17 D7            push a
2032   0F18 FD 12         mov a, g
2033   0F1A 28            mov b, c
2034   0F1B 5C            adc a, b
2035   0F1C 39            mov c, a
2036   0F1D E5            pop b
2037   0F1E E4            pop a
2038   0F1F             ; END TERMS
2039   0F1F E7            pop d
2040   0F20 FD 3E         mov [d], bl
2041   0F22             ;; num = num / 10; 
2042   0F22 FA 05 00      lea d, [bp + 5] ; $num
2043   0F25 DA            push d
2044   0F26 FA 05 00      lea d, [bp + 5] ; $num
2045   0F29 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2046   0F2C FD 39         mov c, b ; And place it into C
2047   0F2E 2A            mov b, [d] ; Lower Word in B
2048   0F2F             ; START FACTORS
2049   0F2F D7            push a
2050   0F30 11            mov a, b
2051   0F31 26 0A 00      mov b, $a
2052   0F34 AE            div a, b
2053   0F35 27            mov b, a
2054   0F36 E4            pop a
2055   0F37             ; END FACTORS
2056   0F37 E7            pop d
2057   0F38 FD 43         mov [d], b
2058   0F3A 28            mov b, c
2059   0F3B FD 44 02 00   mov [d + 2], b
2060   0F3F             ;; i++; 
2061   0F3F FA F5 FF      lea d, [bp + -11] ; $i
2062   0F42 2A            mov b, [d]
2063   0F43 D8            push b
2064   0F44 FD 77         inc b
2065   0F46 FA F5 FF      lea d, [bp + -11] ; $i
2066   0F49 FD 43         mov [d], b
2067   0F4B E5            pop b
2068   0F4C 0A D4 0E      jmp _while31_cond
2069   0F4F             _while31_exit:
2070   0F4F             ;; while (i > 0) { 
2071   0F4F             _while32_cond:
2072   0F4F FA F5 FF      lea d, [bp + -11] ; $i
2073   0F52 2A            mov b, [d]
2074   0F53             ; START RELATIONAL
2075   0F53 D7            push a
2076   0F54 11            mov a, b
2077   0F55 26 00 00      mov b, $0
2078   0F58 B0            cmp a, b
2079   0F59 FD 7F         sgt ; >
2080   0F5B E4            pop a
2081   0F5C             ; END RELATIONAL
2082   0F5C C0 00 00      cmp b, 0
2083   0F5F C6 88 0F      je _while32_exit
2084   0F62             _while32_block:
2085   0F62             ;; i--; 
2086   0F62 FA F5 FF      lea d, [bp + -11] ; $i
2087   0F65 2A            mov b, [d]
2088   0F66 D8            push b
2089   0F67 FD 7D         dec b
2090   0F69 FA F5 FF      lea d, [bp + -11] ; $i
2091   0F6C FD 43         mov [d], b
2092   0F6E E5            pop b
2093   0F6F             ;; putchar(digits[i]); 
2094   0F6F FA F7 FF      lea d, [bp + -9] ; $digits
2095   0F72 D7            push a
2096   0F73 DA            push d
2097   0F74 FA F5 FF      lea d, [bp + -11] ; $i
2098   0F77 2A            mov b, [d]
2099   0F78 E7            pop d
2100   0F79 5A            add d, b
2101   0F7A E4            pop a
2102   0F7B 32            mov bl, [d]
2103   0F7C A7 00         mov bh, 0
2104   0F7E DD            push bl
2105   0F7F 07 5A 10      call putchar
2106   0F82 51 01 00      add sp, 1
2107   0F85 0A 4F 0F      jmp _while32_cond
2108   0F88             _while32_exit:
2109   0F88 F9            leave
2110   0F89 09            ret
2111   0F8A             
2112   0F8A             print_unsigned:
2113   0F8A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2114   0F8D             ; $digits 
2115   0F8D             ; $i 
2116   0F8D 52 07 00      sub sp, 7
2117   0F90             ;; i = 0; 
2118   0F90 FA FA FF      lea d, [bp + -6] ; $i
2119   0F93 DA            push d
2120   0F94 26 00 00      mov b, $0
2121   0F97 E7            pop d
2122   0F98 FD 43         mov [d], b
2123   0F9A             ;; if(num == 0){ 
2124   0F9A             _if33_cond:
2125   0F9A FA 05 00      lea d, [bp + 5] ; $num
2126   0F9D 2A            mov b, [d]
2127   0F9E             ; START RELATIONAL
2128   0F9E D7            push a
2129   0F9F 11            mov a, b
2130   0FA0 26 00 00      mov b, $0
2131   0FA3 B0            cmp a, b
2132   0FA4 FD 71         seq ; ==
2133   0FA6 E4            pop a
2134   0FA7             ; END RELATIONAL
2135   0FA7 C0 00 00      cmp b, 0
2136   0FAA C6 BC 0F      je _if33_exit
2137   0FAD             _if33_true:
2138   0FAD             ;; putchar('0'); 
2139   0FAD 26 30 00      mov b, $30
2140   0FB0 DD            push bl
2141   0FB1 07 5A 10      call putchar
2142   0FB4 51 01 00      add sp, 1
2143   0FB7             ;; return; 
2144   0FB7 F9            leave
2145   0FB8 09            ret
2146   0FB9 0A BC 0F      jmp _if33_exit
2147   0FBC             _if33_exit:
2148   0FBC             ;; while (num > 0) { 
2149   0FBC             _while34_cond:
2150   0FBC FA 05 00      lea d, [bp + 5] ; $num
2151   0FBF 2A            mov b, [d]
2152   0FC0             ; START RELATIONAL
2153   0FC0 D7            push a
2154   0FC1 11            mov a, b
2155   0FC2 26 00 00      mov b, $0
2156   0FC5 B0            cmp a, b
2157   0FC6 FD 81         sgu ; > (unsigned)
2158   0FC8 E4            pop a
2159   0FC9             ; END RELATIONAL
2160   0FC9 C0 00 00      cmp b, 0
2161   0FCC C6 16 10      je _while34_exit
2162   0FCF             _while34_block:
2163   0FCF             ;; digits[i] = '0' + (num % 10); 
2164   0FCF FA FC FF      lea d, [bp + -4] ; $digits
2165   0FD2 D7            push a
2166   0FD3 DA            push d
2167   0FD4 FA FA FF      lea d, [bp + -6] ; $i
2168   0FD7 2A            mov b, [d]
2169   0FD8 E7            pop d
2170   0FD9 5A            add d, b
2171   0FDA E4            pop a
2172   0FDB DA            push d
2173   0FDC 26 30 00      mov b, $30
2174   0FDF             ; START TERMS
2175   0FDF D7            push a
2176   0FE0 11            mov a, b
2177   0FE1 FA 05 00      lea d, [bp + 5] ; $num
2178   0FE4 2A            mov b, [d]
2179   0FE5             ; START FACTORS
2180   0FE5 D7            push a
2181   0FE6 11            mov a, b
2182   0FE7 26 0A 00      mov b, $a
2183   0FEA AE            div a, b ; 
2184   0FEB 11            mov a, b
2185   0FEC 27            mov b, a
2186   0FED E4            pop a
2187   0FEE             ; END FACTORS
2188   0FEE 56            add b, a
2189   0FEF E4            pop a
2190   0FF0             ; END TERMS
2191   0FF0 E7            pop d
2192   0FF1 FD 3E         mov [d], bl
2193   0FF3             ;; num = num / 10; 
2194   0FF3 FA 05 00      lea d, [bp + 5] ; $num
2195   0FF6 DA            push d
2196   0FF7 FA 05 00      lea d, [bp + 5] ; $num
2197   0FFA 2A            mov b, [d]
2198   0FFB             ; START FACTORS
2199   0FFB D7            push a
2200   0FFC 11            mov a, b
2201   0FFD 26 0A 00      mov b, $a
2202   1000 AE            div a, b
2203   1001 27            mov b, a
2204   1002 E4            pop a
2205   1003             ; END FACTORS
2206   1003 E7            pop d
2207   1004 FD 43         mov [d], b
2208   1006             ;; i++; 
2209   1006 FA FA FF      lea d, [bp + -6] ; $i
2210   1009 2A            mov b, [d]
2211   100A D8            push b
2212   100B FD 77         inc b
2213   100D FA FA FF      lea d, [bp + -6] ; $i
2214   1010 FD 43         mov [d], b
2215   1012 E5            pop b
2216   1013 0A BC 0F      jmp _while34_cond
2217   1016             _while34_exit:
2218   1016             ;; while (i > 0) { 
2219   1016             _while35_cond:
2220   1016 FA FA FF      lea d, [bp + -6] ; $i
2221   1019 2A            mov b, [d]
2222   101A             ; START RELATIONAL
2223   101A D7            push a
2224   101B 11            mov a, b
2225   101C 26 00 00      mov b, $0
2226   101F B0            cmp a, b
2227   1020 FD 7F         sgt ; >
2228   1022 E4            pop a
2229   1023             ; END RELATIONAL
2230   1023 C0 00 00      cmp b, 0
2231   1026 C6 4F 10      je _while35_exit
2232   1029             _while35_block:
2233   1029             ;; i--; 
2234   1029 FA FA FF      lea d, [bp + -6] ; $i
2235   102C 2A            mov b, [d]
2236   102D D8            push b
2237   102E FD 7D         dec b
2238   1030 FA FA FF      lea d, [bp + -6] ; $i
2239   1033 FD 43         mov [d], b
2240   1035 E5            pop b
2241   1036             ;; putchar(digits[i]); 
2242   1036 FA FC FF      lea d, [bp + -4] ; $digits
2243   1039 D7            push a
2244   103A DA            push d
2245   103B FA FA FF      lea d, [bp + -6] ; $i
2246   103E 2A            mov b, [d]
2247   103F E7            pop d
2248   1040 5A            add d, b
2249   1041 E4            pop a
2250   1042 32            mov bl, [d]
2251   1043 A7 00         mov bh, 0
2252   1045 DD            push bl
2253   1046 07 5A 10      call putchar
2254   1049 51 01 00      add sp, 1
2255   104C 0A 16 10      jmp _while35_cond
2256   104F             _while35_exit:
2257   104F F9            leave
2258   1050 09            ret
2259   1051             
2260   1051             date:
2261   1051 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2262   1054             
2263   1054             ; --- BEGIN INLINE ASM BLOCK
2264   1054 19 00         mov al, 0 
2265   1056 05 07         syscall sys_datetime
2266   1058             ; --- END INLINE ASM BLOCK
2267   1058             
2268   1058 F9            leave
2269   1059 09            ret
2270   105A             
2271   105A             putchar:
2272   105A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2273   105D             
2274   105D             ; --- BEGIN INLINE ASM BLOCK
2275   105D FA 05 00      lea d, [bp + 5] ; $c
2276   1060 1E            mov al, [d]
2277   1061 23            mov ah, al
2278   1062 07 C6 11      call _putchar
2279   1065             ; --- END INLINE ASM BLOCK
2280   1065             
2281   1065 F9            leave
2282   1066 09            ret
2283   1067             
2284   1067             getchar:
2285   1067 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2286   106A             ; $c 
2287   106A 52 01 00      sub sp, 1
2288   106D             
2289   106D             ; --- BEGIN INLINE ASM BLOCK
2290   106D 07 BF 11      call getch
2291   1070 1A            mov al, ah
2292   1071 FA 00 00      lea d, [bp + 0] ; $c
2293   1074 3E            mov [d], al
2294   1075             ; --- END INLINE ASM BLOCK
2295   1075             
2296   1075             ;; return c; 
2297   1075 FA 00 00      lea d, [bp + 0] ; $c
2298   1078 32            mov bl, [d]
2299   1079 A7 00         mov bh, 0
2300   107B F9            leave
2301   107C 09            ret
2302   107D             
2303   107D             scann:
2304   107D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2305   1080             ; $m 
2306   1080 52 02 00      sub sp, 2
2307   1083             
2308   1083             ; --- BEGIN INLINE ASM BLOCK
2309   1083 07 0A 14      call scan_u16d
2310   1086 FA FF FF      lea d, [bp + -1] ; $m
2311   1089 43            mov [d], a
2312   108A             ; --- END INLINE ASM BLOCK
2313   108A             
2314   108A             ;; return m; 
2315   108A FA FF FF      lea d, [bp + -1] ; $m
2316   108D 2A            mov b, [d]
2317   108E F9            leave
2318   108F 09            ret
2319   1090             
2320   1090             puts:
2321   1090 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2322   1093             
2323   1093             ; --- BEGIN INLINE ASM BLOCK
2324   1093 FA 05 00      lea d, [bp + 5] ; $s
2325   1096 15            mov a, [d]
2326   1097 3C            mov d, a
2327   1098 07 10 13      call _puts
2328   109B 10 00 0A      mov a, $0A00
2329   109E 05 03         syscall sys_io
2330   10A0             ; --- END INLINE ASM BLOCK
2331   10A0             
2332   10A0 F9            leave
2333   10A1 09            ret
2334   10A2             
2335   10A2             print:
2336   10A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2337   10A5             
2338   10A5             ; --- BEGIN INLINE ASM BLOCK
2339   10A5 FA 05 00      lea d, [bp + 5] ; $s
2340   10A8 FD 2A         mov d, [d]
2341   10AA 07 10 13      call _puts
2342   10AD             ; --- END INLINE ASM BLOCK
2343   10AD             
2344   10AD F9            leave
2345   10AE 09            ret
2346   10AF             
2347   10AF             getparam:
2348   10AF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2349   10B2             ; $data 
2350   10B2 52 01 00      sub sp, 1
2351   10B5             
2352   10B5             ; --- BEGIN INLINE ASM BLOCK
2353   10B5 19 04         mov al, 4
2354   10B7 FA 05 00      lea d, [bp + 5] ; $address
2355   10BA FD 2A         mov d, [d]
2356   10BC 05 0C         syscall sys_system
2357   10BE FA 00 00      lea d, [bp + 0] ; $data
2358   10C1 FD 3E         mov [d], bl
2359   10C3             ; --- END INLINE ASM BLOCK
2360   10C3             
2361   10C3             ;; return data; 
2362   10C3 FA 00 00      lea d, [bp + 0] ; $data
2363   10C6 32            mov bl, [d]
2364   10C7 A7 00         mov bh, 0
2365   10C9 F9            leave
2366   10CA 09            ret
2367   10CB             
2368   10CB             clear:
2369   10CB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2370   10CE             ;; print("\033[2J\033[H"); 
2371   10CE 26 3B 1E      mov b, __s5 ; "\033[2J\033[H"
2372   10D1 FD AB         swp b
2373   10D3 D8            push b
2374   10D4 07 A2 10      call print
2375   10D7 51 02 00      add sp, 2
2376   10DA F9            leave
2377   10DB 09            ret
2378   10DC             
2379   10DC             include_stdio_asm:
2380   10DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2381   10DF             
2382   10DF             ; --- BEGIN INLINE ASM BLOCK
2383   10DF             .include "lib/asm/stdio.asm"
0001+  10DF             ;-----------------------------------------------------------------------------
0002+  10DF             ; stdio.s
0003+  10DF             ;-----------------------------------------------------------------------------
0004+  10DF             .include "lib/asm/string.asm"
0001++ 10DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 10DF             ; string.s
0003++ 10DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 10DF             
0005++ 10DF             
0006++ 10DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 10DF             ; _strrev
0008++ 10DF             ; reverse a string
0009++ 10DF             ; D = string address
0010++ 10DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 10DF             ; 01234
0012++ 10DF             _strrev:
0013++ 10DF 4B          	pusha
0014++ 10E0 07 26 11    	call _strlen	; length in C
0015++ 10E3 12          	mov a, c
0016++ 10E4 AF 01 00    	cmp a, 1
0017++ 10E7 D0 01 11    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 10EA 7D          	dec a
0019++ 10EB FD 4E       	mov si, d	; beginning of string
0020++ 10ED FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 10EF 59          	add d, a	; end of string
0022++ 10F0 12          	mov a, c
0023++ 10F1 FD 9B       	shr a		; divide by 2
0024++ 10F3 39          	mov c, a	; C now counts the steps
0025++ 10F4             _strrev_L0:
0026++ 10F4 32          	mov bl, [d]	; save load right-side char into BL
0027++ 10F5 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 10F6 3E          	mov [d], al	; store left char into right side
0029++ 10F7 1B          	mov al, bl
0030++ 10F8 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 10F9 7E          	dec c
0032++ 10FA 7F          	dec d
0033++ 10FB C2 00 00    	cmp c, 0
0034++ 10FE C7 F4 10    	jne _strrev_L0
0035++ 1101             _strrev_end:
0036++ 1101 4C          	popa
0037++ 1102 09          	ret
0038++ 1103             	
0039++ 1103             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1103             ; _strchr
0041++ 1103             ; search string in D for char in AL
0042++ 1103             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1103             _strchr:
0044++ 1103             _strchr_L0:
0045++ 1103 32          	mov bl, [d]
0046++ 1104 C1 00       	cmp bl, 0
0047++ 1106 C6 11 11    	je _strchr_end
0048++ 1109 BA          	cmp al, bl
0049++ 110A C6 11 11    	je _strchr_end
0050++ 110D 79          	inc d
0051++ 110E 0A 03 11    	jmp _strchr_L0
0052++ 1111             _strchr_end:
0053++ 1111 1B          	mov al, bl
0054++ 1112 09          	ret
0055++ 1113             
0056++ 1113             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1113             ; _strstr
0058++ 1113             ; find sub-string
0059++ 1113             ; str1 in SI
0060++ 1113             ; str2 in DI
0061++ 1113             ; SI points to end of source string
0062++ 1113             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1113             _strstr:
0064++ 1113 DB          	push al
0065++ 1114 DA          	push d
0066++ 1115 E3          	push di
0067++ 1116             _strstr_loop:
0068++ 1116 F3          	cmpsb					; compare a byte of the strings
0069++ 1117 C7 22 11    	jne _strstr_ret
0070++ 111A FC 00 00    	lea d, [di + 0]
0071++ 111D BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 111F C7 16 11    	jne _strstr_loop				; equal chars but not at end
0073++ 1122             _strstr_ret:
0074++ 1122 F0          	pop di
0075++ 1123 E7          	pop d
0076++ 1124 E8          	pop al
0077++ 1125 09          	ret
0078++ 1126             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1126             ; length of null terminated string
0080++ 1126             ; result in C
0081++ 1126             ; pointer in D
0082++ 1126             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1126             _strlen:
0084++ 1126 DA          	push d
0085++ 1127 38 00 00    	mov c, 0
0086++ 112A             _strlen_L1:
0087++ 112A BD 00       	cmp byte [d], 0
0088++ 112C C6 34 11    	je _strlen_ret
0089++ 112F 79          	inc d
0090++ 1130 78          	inc c
0091++ 1131 0A 2A 11    	jmp _strlen_L1
0092++ 1134             _strlen_ret:
0093++ 1134 E7          	pop d
0094++ 1135 09          	ret
0095++ 1136             
0096++ 1136             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1136             ; STRCMP
0098++ 1136             ; compare two strings
0099++ 1136             ; str1 in SI
0100++ 1136             ; str2 in DI
0101++ 1136             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1136             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1136             _strcmp:
0104++ 1136 DB          	push al
0105++ 1137 DA          	push d
0106++ 1138 E3          	push di
0107++ 1139 E2          	push si
0108++ 113A             _strcmp_loop:
0109++ 113A F3          	cmpsb					; compare a byte of the strings
0110++ 113B C7 46 11    	jne _strcmp_ret
0111++ 113E FB FF FF    	lea d, [si +- 1]
0112++ 1141 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1143 C7 3A 11    	jne _strcmp_loop				; equal chars but not at end
0114++ 1146             _strcmp_ret:
0115++ 1146 EF          	pop si
0116++ 1147 F0          	pop di
0117++ 1148 E7          	pop d
0118++ 1149 E8          	pop al
0119++ 114A 09          	ret
0120++ 114B             
0121++ 114B             
0122++ 114B             ; STRCPY
0123++ 114B             ; copy null terminated string from SI to DI
0124++ 114B             ; source in SI
0125++ 114B             ; destination in DI
0126++ 114B             _strcpy:
0127++ 114B E2          	push si
0128++ 114C E3          	push di
0129++ 114D DB          	push al
0130++ 114E             _strcpy_L1:
0131++ 114E F6          	lodsb
0132++ 114F F7          	stosb
0133++ 1150 B9 00       	cmp al, 0
0134++ 1152 C7 4E 11    	jne _strcpy_L1
0135++ 1155             _strcpy_end:
0136++ 1155 E8          	pop al
0137++ 1156 F0          	pop di
0138++ 1157 EF          	pop si
0139++ 1158 09          	ret
0140++ 1159             
0141++ 1159             ; STRCAT
0142++ 1159             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1159             ; source in SI
0144++ 1159             ; destination in DI
0145++ 1159             _strcat:
0146++ 1159 E2          	push si
0147++ 115A E3          	push di
0148++ 115B D7          	push a
0149++ 115C DA          	push d
0150++ 115D 50          	mov a, di
0151++ 115E 3C          	mov d, a
0152++ 115F             _strcat_goto_end_L1:
0153++ 115F BD 00       	cmp byte[d], 0
0154++ 1161 C6 68 11    	je _strcat_start
0155++ 1164 79          	inc d
0156++ 1165 0A 5F 11    	jmp _strcat_goto_end_L1
0157++ 1168             _strcat_start:
0158++ 1168 FD 50       	mov di, d
0159++ 116A             _strcat_L1:
0160++ 116A F6          	lodsb
0161++ 116B F7          	stosb
0162++ 116C B9 00       	cmp al, 0
0163++ 116E C7 6A 11    	jne _strcat_L1
0164++ 1171             _strcat_end:
0165++ 1171 E7          	pop d
0166++ 1172 E4          	pop a
0167++ 1173 F0          	pop di
0168++ 1174 EF          	pop si
0169++ 1175 09          	ret
0170++ 1176             
0171++ 1176             
0005+  1176             
0006+  1176             ;-----------------------------------------------------------------------------
0007+  1176             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1176             ; ASCII in BL
0009+  1176             ; result in AL
0010+  1176             ; ascii for F = 0100 0110
0011+  1176             ; ascii for 9 = 0011 1001
0012+  1176             ;-----------------------------------------------------------------------------
0013+  1176             hex_ascii_encode:
0014+  1176 1B            mov al, bl
0015+  1177 93 40         test al, $40        ; test if letter or number
0016+  1179 C7 7F 11      jnz hex_letter
0017+  117C 87 0F         and al, $0F        ; get number
0018+  117E 09            ret
0019+  117F             hex_letter:
0020+  117F 87 0F         and al, $0F        ; get letter
0021+  1181 6A 09         add al, 9
0022+  1183 09            ret
0023+  1184             
0024+  1184             ;-----------------------------------------------------------------------------
0025+  1184             ; ATOI
0026+  1184             ; 2 letter hex string in B
0027+  1184             ; 8bit integer returned in AL
0028+  1184             ;-----------------------------------------------------------------------------
0029+  1184             _atoi:
0030+  1184 D8            push b
0031+  1185 07 76 11      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1188 30            mov bl, bh
0033+  1189 DB            push al          ; save a
0034+  118A 07 76 11      call hex_ascii_encode
0035+  118D EA            pop bl  
0036+  118E FD 9E 04      shl al, 4
0037+  1191 8C            or al, bl
0038+  1192 E5            pop b
0039+  1193 09            ret  
0040+  1194             
0041+  1194             
0042+  1194             ;-----------------------------------------------------------------------------
0043+  1194             ; ITOA
0044+  1194             ; 8bit value in BL
0045+  1194             ; 2 byte ASCII result in A
0046+  1194             ;-----------------------------------------------------------------------------
0047+  1194             _itoa:
0048+  1194 DA            push d
0049+  1195 D8            push b
0050+  1196 A7 00         mov bh, 0
0051+  1198 FD A4 04      shr bl, 4  
0052+  119B 74            mov d, b
0053+  119C 1F 44 14      mov al, [d + s_hex_digits]
0054+  119F 23            mov ah, al
0055+  11A0               
0056+  11A0 E5            pop b
0057+  11A1 D8            push b
0058+  11A2 A7 00         mov bh, 0
0059+  11A4 FD 87 0F      and bl, $0F
0060+  11A7 74            mov d, b
0061+  11A8 1F 44 14      mov al, [d + s_hex_digits]
0062+  11AB E5            pop b
0063+  11AC E7            pop d
0064+  11AD 09            ret
0065+  11AE             
0066+  11AE             ;-----------------------------------------------------------------------------
0067+  11AE             ; HEX STRING TO BINARY
0068+  11AE             ; di = destination address
0069+  11AE             ; si = source
0070+  11AE             ;-----------------------------------------------------------------------------
0071+  11AE             _hex_to_int:
0072+  11AE             _hex_to_int_L1:
0073+  11AE F6            lodsb          ; load from [SI] to AL
0074+  11AF B9 00         cmp al, 0        ; check if ASCII 0
0075+  11B1 C6 BE 11      jz _hex_to_int_ret
0076+  11B4 36            mov bh, al
0077+  11B5 F6            lodsb
0078+  11B6 2F            mov bl, al
0079+  11B7 07 84 11      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  11BA F7            stosb          ; store AL to [DI]
0081+  11BB 0A AE 11      jmp _hex_to_int_L1
0082+  11BE             _hex_to_int_ret:
0083+  11BE 09            ret    
0084+  11BF             
0085+  11BF             ;-----------------------------------------------------------------------------
0086+  11BF             ; GETCHAR
0087+  11BF             ; char in ah
0088+  11BF             ;-----------------------------------------------------------------------------
0089+  11BF             getch:
0090+  11BF DB            push al
0091+  11C0             getch_retry:
0092+  11C0 19 01         mov al, 1
0093+  11C2 05 03         syscall sys_io      ; receive in AH
0094+  11C4 E8            pop al
0095+  11C5 09            ret
0096+  11C6             
0097+  11C6             ;-----------------------------------------------------------------------------
0098+  11C6             ; PUTCHAR
0099+  11C6             ; char in ah
0100+  11C6             ;-----------------------------------------------------------------------------
0101+  11C6             _putchar:
0102+  11C6 D7            push a
0103+  11C7 19 00         mov al, 0
0104+  11C9 05 03         syscall sys_io      ; char in AH
0105+  11CB E4            pop a
0106+  11CC 09            ret
0107+  11CD             
0108+  11CD             ;-----------------------------------------------------------------------------
0109+  11CD             ;; INPUT A STRING
0110+  11CD             ;; terminates with null
0111+  11CD             ;; pointer in D
0112+  11CD             ;-----------------------------------------------------------------------------
0113+  11CD             _gets:
0114+  11CD D7            push a
0115+  11CE DA            push d
0116+  11CF             _gets_loop:
0117+  11CF 19 01         mov al, 1
0118+  11D1 05 03         syscall sys_io      ; receive in AH
0119+  11D3 B9 00         cmp al, 0        ; check error code (AL)
0120+  11D5 C6 CF 11      je _gets_loop      ; if no char received, retry
0121+  11D8             
0122+  11D8 76 1B         cmp ah, 27
0123+  11DA C6 FB 11      je _gets_ansi_esc
0124+  11DD 76 0A         cmp ah, $0A        ; LF
0125+  11DF C6 66 12      je _gets_end
0126+  11E2 76 0D         cmp ah, $0D        ; CR
0127+  11E4 C6 66 12      je _gets_end
0128+  11E7 76 5C         cmp ah, $5C        ; '\\'
0129+  11E9 C6 27 12      je _gets_escape
0130+  11EC               
0131+  11EC 76 08         cmp ah, $08      ; check for backspace
0132+  11EE C6 F7 11      je _gets_backspace
0133+  11F1             
0134+  11F1 1A            mov al, ah
0135+  11F2 3E            mov [d], al
0136+  11F3 79            inc d
0137+  11F4 0A CF 11      jmp _gets_loop
0138+  11F7             _gets_backspace:
0139+  11F7 7F            dec d
0140+  11F8 0A CF 11      jmp _gets_loop
0141+  11FB             _gets_ansi_esc:
0142+  11FB 19 01         mov al, 1
0143+  11FD 05 03         syscall sys_io        ; receive in AH without echo
0144+  11FF B9 00         cmp al, 0          ; check error code (AL)
0145+  1201 C6 FB 11      je _gets_ansi_esc    ; if no char received, retry
0146+  1204 76 5B         cmp ah, '['
0147+  1206 C7 CF 11      jne _gets_loop
0148+  1209             _gets_ansi_esc_2:
0149+  1209 19 01         mov al, 1
0150+  120B 05 03         syscall sys_io          ; receive in AH without echo
0151+  120D B9 00         cmp al, 0            ; check error code (AL)
0152+  120F C6 09 12      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1212 76 44         cmp ah, 'D'
0154+  1214 C6 1F 12      je _gets_left_arrow
0155+  1217 76 43         cmp ah, 'C'
0156+  1219 C6 23 12      je _gets_right_arrow
0157+  121C 0A CF 11      jmp _gets_loop
0158+  121F             _gets_left_arrow:
0159+  121F 7F            dec d
0160+  1220 0A CF 11      jmp _gets_loop
0161+  1223             _gets_right_arrow:
0162+  1223 79            inc d
0163+  1224 0A CF 11      jmp _gets_loop
0164+  1227             _gets_escape:
0165+  1227 19 01         mov al, 1
0166+  1229 05 03         syscall sys_io      ; receive in AH
0167+  122B B9 00         cmp al, 0        ; check error code (AL)
0168+  122D C6 27 12      je _gets_escape      ; if no char received, retry
0169+  1230 76 6E         cmp ah, 'n'
0170+  1232 C6 51 12      je _gets_LF
0171+  1235 76 72         cmp ah, 'r'
0172+  1237 C6 58 12      je _gets_CR
0173+  123A 76 30         cmp ah, '0'
0174+  123C C6 5F 12      je _gets_NULL
0175+  123F 76 5C         cmp ah, $5C  ; '\'
0176+  1241 C6 4A 12      je _gets_slash
0177+  1244 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1245 3E            mov [d], al
0179+  1246 79            inc d
0180+  1247 0A CF 11      jmp _gets_loop
0181+  124A             _gets_slash:
0182+  124A 19 5C         mov al, $5C
0183+  124C 3E            mov [d], al
0184+  124D 79            inc d
0185+  124E 0A CF 11      jmp _gets_loop
0186+  1251             _gets_LF:
0187+  1251 19 0A         mov al, $0A
0188+  1253 3E            mov [d], al
0189+  1254 79            inc d
0190+  1255 0A CF 11      jmp _gets_loop
0191+  1258             _gets_CR:
0192+  1258 19 0D         mov al, $0D
0193+  125A 3E            mov [d], al
0194+  125B 79            inc d
0195+  125C 0A CF 11      jmp _gets_loop
0196+  125F             _gets_NULL:
0197+  125F 19 00         mov al, $00
0198+  1261 3E            mov [d], al
0199+  1262 79            inc d
0200+  1263 0A CF 11      jmp _gets_loop
0201+  1266             _gets_end:
0202+  1266 19 00         mov al, 0
0203+  1268 3E            mov [d], al        ; terminate string
0204+  1269 E7            pop d
0205+  126A E4            pop a
0206+  126B 09            ret
0207+  126C             
0208+  126C             ;-----------------------------------------------------------------------------
0209+  126C             ;; INPUT TEXT
0210+  126C             ;; terminated with CTRL+D
0211+  126C             ;; pointer in D
0212+  126C             ;-----------------------------------------------------------------------------
0213+  126C             _gettxt:
0214+  126C D7            push a
0215+  126D DA            push d
0216+  126E             _gettxt_loop:
0217+  126E 19 01         mov al, 1
0218+  1270 05 03         syscall sys_io      ; receive in AH
0219+  1272 B9 00         cmp al, 0        ; check error code (AL)
0220+  1274 C6 6E 12      je _gettxt_loop    ; if no char received, retry
0221+  1277 76 04         cmp ah, 4      ; EOT
0222+  1279 C6 B7 12      je _gettxt_end
0223+  127C 76 08         cmp ah, $08      ; check for backspace
0224+  127E C6 B3 12      je _gettxt_backspace
0225+  1281 76 5C         cmp ah, $5C        ; '\'
0226+  1283 C6 8C 12      je _gettxt_escape
0227+  1286 1A            mov al, ah
0228+  1287 3E            mov [d], al
0229+  1288 79            inc d
0230+  1289 0A 6E 12      jmp _gettxt_loop
0231+  128C             _gettxt_escape:
0232+  128C 19 01         mov al, 1
0233+  128E 05 03         syscall sys_io      ; receive in AH
0234+  1290 B9 00         cmp al, 0        ; check error code (AL)
0235+  1292 C6 8C 12      je _gettxt_escape    ; if no char received, retry
0236+  1295 76 6E         cmp ah, 'n'
0237+  1297 C6 A5 12      je _gettxt_LF
0238+  129A 76 72         cmp ah, 'r'
0239+  129C C6 AC 12      je _gettxt_CR
0240+  129F 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  12A0 3E            mov [d], al
0242+  12A1 79            inc d
0243+  12A2 0A 6E 12      jmp _gettxt_loop
0244+  12A5             _gettxt_LF:
0245+  12A5 19 0A         mov al, $0A
0246+  12A7 3E            mov [d], al
0247+  12A8 79            inc d
0248+  12A9 0A 6E 12      jmp _gettxt_loop
0249+  12AC             _gettxt_CR:
0250+  12AC 19 0D         mov al, $0D
0251+  12AE 3E            mov [d], al
0252+  12AF 79            inc d
0253+  12B0 0A 6E 12      jmp _gettxt_loop
0254+  12B3             _gettxt_backspace:
0255+  12B3 7F            dec d
0256+  12B4 0A 6E 12      jmp _gettxt_loop
0257+  12B7             _gettxt_end:
0258+  12B7 19 00         mov al, 0
0259+  12B9 3E            mov [d], al        ; terminate string
0260+  12BA E7            pop d
0261+  12BB E4            pop a
0262+  12BC 09            ret
0263+  12BD             
0264+  12BD             ;-----------------------------------------------------------------------------
0265+  12BD             ; PRINT NEW LINE
0266+  12BD             ;-----------------------------------------------------------------------------
0267+  12BD             printnl:
0268+  12BD D7            push a
0269+  12BE 10 00 0A      mov a, $0A00
0270+  12C1 05 03         syscall sys_io
0271+  12C3 10 00 0D      mov a, $0D00
0272+  12C6 05 03         syscall sys_io
0273+  12C8 E4            pop a
0274+  12C9 09            ret
0275+  12CA             
0276+  12CA             ;-----------------------------------------------------------------------------
0277+  12CA             ; _strtoint
0278+  12CA             ; 4 digit hex string number in d
0279+  12CA             ; integer returned in A
0280+  12CA             ;-----------------------------------------------------------------------------
0281+  12CA             _strtointx:
0282+  12CA D8            push b
0283+  12CB 32            mov bl, [d]
0284+  12CC 37            mov bh, bl
0285+  12CD 33 01 00      mov bl, [d + 1]
0286+  12D0 07 84 11      call _atoi        ; convert to int in AL
0287+  12D3 23            mov ah, al        ; move to AH
0288+  12D4 33 02 00      mov bl, [d + 2]
0289+  12D7 37            mov bh, bl
0290+  12D8 33 03 00      mov bl, [d + 3]
0291+  12DB 07 84 11      call _atoi        ; convert to int in AL
0292+  12DE E5            pop b
0293+  12DF 09            ret
0294+  12E0             
0295+  12E0             ;-----------------------------------------------------------------------------
0296+  12E0             ; _strtoint
0297+  12E0             ; 5 digit base10 string number in d
0298+  12E0             ; integer returned in A
0299+  12E0             ;-----------------------------------------------------------------------------
0300+  12E0             _strtoint:
0301+  12E0 E2            push si
0302+  12E1 D8            push b
0303+  12E2 D9            push c
0304+  12E3 DA            push d
0305+  12E4 07 26 11      call _strlen      ; get string length in C
0306+  12E7 7E            dec c
0307+  12E8 FD 4E         mov si, d
0308+  12EA 12            mov a, c
0309+  12EB FD 99         shl a
0310+  12ED 3B 5C 14      mov d, table_power
0311+  12F0 59            add d, a
0312+  12F1 38 00 00      mov c, 0
0313+  12F4             _strtoint_L0:
0314+  12F4 F6            lodsb      ; load ASCII to al
0315+  12F5 B9 00         cmp al, 0
0316+  12F7 C6 0A 13      je _strtoint_end
0317+  12FA 6F 30         sub al, $30    ; make into integer
0318+  12FC 22 00         mov ah, 0
0319+  12FE 2A            mov b, [d]
0320+  12FF AC            mul a, b      ; result in B since it fits in 16bits
0321+  1300 11            mov a, b
0322+  1301 28            mov b, c
0323+  1302 54            add a, b
0324+  1303 39            mov c, a
0325+  1304 63 02 00      sub d, 2
0326+  1307 0A F4 12      jmp _strtoint_L0
0327+  130A             _strtoint_end:
0328+  130A 12            mov a, c
0329+  130B E7            pop d
0330+  130C E6            pop c
0331+  130D E5            pop b
0332+  130E EF            pop si
0333+  130F 09            ret
0334+  1310             
0335+  1310             ;-----------------------------------------------------------------------------
0336+  1310             ; PRINT NULL TERMINATED STRING
0337+  1310             ; pointer in D
0338+  1310             ;-----------------------------------------------------------------------------
0339+  1310             _puts:
0340+  1310 D7            push a
0341+  1311 DA            push d
0342+  1312             _puts_L1:
0343+  1312 1E            mov al, [d]
0344+  1313 B9 00         cmp al, 0
0345+  1315 C6 21 13      jz _puts_END
0346+  1318 23            mov ah, al
0347+  1319 19 00         mov al, 0
0348+  131B 05 03         syscall sys_io
0349+  131D 79            inc d
0350+  131E 0A 12 13      jmp _puts_L1
0351+  1321             _puts_END:
0352+  1321 E7            pop d
0353+  1322 E4            pop a
0354+  1323 09            ret
0355+  1324             
0356+  1324             ;-----------------------------------------------------------------------------
0357+  1324             ; PRINT N SIZE STRING
0358+  1324             ; pointer in D
0359+  1324             ; size in C
0360+  1324             ;-----------------------------------------------------------------------------
0361+  1324             _putsn:
0362+  1324 DB            push al
0363+  1325 DA            push d
0364+  1326 D9            push c
0365+  1327             _putsn_L0:
0366+  1327 1E            mov al, [d]
0367+  1328 23            mov ah, al
0368+  1329 19 00         mov al, 0
0369+  132B 05 03         syscall sys_io
0370+  132D 79            inc d
0371+  132E 7E            dec c  
0372+  132F C2 00 00      cmp c, 0
0373+  1332 C7 27 13      jne _putsn_L0
0374+  1335             _putsn_end:
0375+  1335 E6            pop c
0376+  1336 E7            pop d
0377+  1337 E8            pop al
0378+  1338 09            ret
0379+  1339             
0380+  1339             ;-----------------------------------------------------------------------------
0381+  1339             ; print 16bit decimal number
0382+  1339             ; input number in A
0383+  1339             ;-----------------------------------------------------------------------------
0384+  1339             print_u16d:
0385+  1339 D7            push a
0386+  133A D8            push b
0387+  133B 26 10 27      mov b, 10000
0388+  133E AE            div a, b      ; get 10000's coeff.
0389+  133F 07 61 13      call print_number
0390+  1342 11            mov a, b
0391+  1343 26 E8 03      mov b, 1000
0392+  1346 AE            div a, b      ; get 1000's coeff.
0393+  1347 07 61 13      call print_number
0394+  134A 11            mov a, b
0395+  134B 26 64 00      mov b, 100
0396+  134E AE            div a, b
0397+  134F 07 61 13      call print_number
0398+  1352 11            mov a, b
0399+  1353 26 0A 00      mov b, 10
0400+  1356 AE            div a, b
0401+  1357 07 61 13      call print_number
0402+  135A 1B            mov al, bl      ; 1's coeff in bl
0403+  135B 07 61 13      call print_number
0404+  135E E5            pop b
0405+  135F E4            pop a
0406+  1360 09            ret
0407+  1361             
0408+  1361             ;-----------------------------------------------------------------------------
0409+  1361             ; print AL
0410+  1361             ;-----------------------------------------------------------------------------
0411+  1361             print_number:
0412+  1361 6A 30         add al, $30
0413+  1363 23            mov ah, al
0414+  1364 07 C6 11      call _putchar
0415+  1367 09            ret
0416+  1368             
0417+  1368             ;-----------------------------------------------------------------------------
0418+  1368             ; PRINT 16BIT HEX INTEGER
0419+  1368             ; integer value in reg B
0420+  1368             ;-----------------------------------------------------------------------------
0421+  1368             print_u16x:
0422+  1368 D7            push a
0423+  1369 D8            push b
0424+  136A DD            push bl
0425+  136B 30            mov bl, bh
0426+  136C 07 94 11      call _itoa        ; convert bh to char in A
0427+  136F 2F            mov bl, al        ; save al
0428+  1370 19 00         mov al, 0
0429+  1372 05 03         syscall sys_io        ; display AH
0430+  1374 24            mov ah, bl        ; retrieve al
0431+  1375 19 00         mov al, 0
0432+  1377 05 03         syscall sys_io        ; display AL
0433+  1379             
0434+  1379 EA            pop bl
0435+  137A 07 94 11      call _itoa        ; convert bh to char in A
0436+  137D 2F            mov bl, al        ; save al
0437+  137E 19 00         mov al, 0
0438+  1380 05 03         syscall sys_io        ; display AH
0439+  1382 24            mov ah, bl        ; retrieve al
0440+  1383 19 00         mov al, 0
0441+  1385 05 03         syscall sys_io        ; display AL
0442+  1387             
0443+  1387 E5            pop b
0444+  1388 E4            pop a
0445+  1389 09            ret
0446+  138A             
0447+  138A             ;-----------------------------------------------------------------------------
0448+  138A             ; INPUT 16BIT HEX INTEGER
0449+  138A             ; read 16bit integer into A
0450+  138A             ;-----------------------------------------------------------------------------
0451+  138A             scan_u16x:
0452+  138A F8 10 00      enter 16
0453+  138D D8            push b
0454+  138E DA            push d
0455+  138F             
0456+  138F FA F1 FF      lea d, [bp + -15]
0457+  1392 07 CD 11      call _gets        ; get number
0458+  1395             
0459+  1395 32            mov bl, [d]
0460+  1396 37            mov bh, bl
0461+  1397 33 01 00      mov bl, [d + 1]
0462+  139A 07 84 11      call _atoi        ; convert to int in AL
0463+  139D 23            mov ah, al        ; move to AH
0464+  139E             
0465+  139E 33 02 00      mov bl, [d + 2]
0466+  13A1 37            mov bh, bl
0467+  13A2 33 03 00      mov bl, [d + 3]
0468+  13A5 07 84 11      call _atoi        ; convert to int in AL
0469+  13A8             
0470+  13A8 E7            pop d
0471+  13A9 E5            pop b
0472+  13AA F9            leave
0473+  13AB 09            ret
0474+  13AC             
0475+  13AC             ;-----------------------------------------------------------------------------
0476+  13AC             ; PRINT 8bit HEX INTEGER
0477+  13AC             ; integer value in reg bl
0478+  13AC             ;-----------------------------------------------------------------------------
0479+  13AC             print_u8x:
0480+  13AC D7            push a
0481+  13AD DD            push bl
0482+  13AE             
0483+  13AE 07 94 11      call _itoa        ; convert bl to char in A
0484+  13B1 2F            mov bl, al        ; save al
0485+  13B2 19 00         mov al, 0
0486+  13B4 05 03         syscall sys_io        ; display AH
0487+  13B6 24            mov ah, bl        ; retrieve al
0488+  13B7 19 00         mov al, 0
0489+  13B9 05 03         syscall sys_io        ; display AL
0490+  13BB             
0491+  13BB EA            pop bl
0492+  13BC E4            pop a
0493+  13BD 09            ret
0494+  13BE             
0495+  13BE             ;-----------------------------------------------------------------------------
0496+  13BE             ; print 8bit decimal unsigned number
0497+  13BE             ; input number in AL
0498+  13BE             ;-----------------------------------------------------------------------------
0499+  13BE             print_u8d:
0500+  13BE D7            push a
0501+  13BF D8            push b
0502+  13C0             
0503+  13C0 22 00         mov ah, 0
0504+  13C2 26 64 00      mov b, 100
0505+  13C5 AE            div a, b
0506+  13C6 D8            push b      ; save remainder
0507+  13C7 B9 00         cmp al, 0
0508+  13C9 C6 D3 13      je skip100
0509+  13CC 6A 30         add al, $30
0510+  13CE 23            mov ah, al
0511+  13CF 19 00         mov al, 0
0512+  13D1 05 03         syscall sys_io  ; print coeff
0513+  13D3             skip100:
0514+  13D3 E4            pop a
0515+  13D4 22 00         mov ah, 0
0516+  13D6 26 0A 00      mov b, 10
0517+  13D9 AE            div a, b
0518+  13DA D8            push b      ; save remainder
0519+  13DB B9 00         cmp al, 0
0520+  13DD C6 E7 13      je skip10
0521+  13E0 6A 30         add al, $30
0522+  13E2 23            mov ah, al
0523+  13E3 19 00         mov al, 0
0524+  13E5 05 03         syscall sys_io  ; print coeff
0525+  13E7             skip10:
0526+  13E7 E4            pop a
0527+  13E8 1B            mov al, bl
0528+  13E9 6A 30         add al, $30
0529+  13EB 23            mov ah, al
0530+  13EC 19 00         mov al, 0
0531+  13EE 05 03         syscall sys_io  ; print coeff
0532+  13F0 E5            pop b
0533+  13F1 E4            pop a
0534+  13F2 09            ret
0535+  13F3             
0536+  13F3             ;-----------------------------------------------------------------------------
0537+  13F3             ; INPUT 8BIT HEX INTEGER
0538+  13F3             ; read 8bit integer into AL
0539+  13F3             ;-----------------------------------------------------------------------------
0540+  13F3             scan_u8x:
0541+  13F3 F8 04 00      enter 4
0542+  13F6 D8            push b
0543+  13F7 DA            push d
0544+  13F8             
0545+  13F8 FA FD FF      lea d, [bp + -3]
0546+  13FB 07 CD 11      call _gets        ; get number
0547+  13FE             
0548+  13FE 32            mov bl, [d]
0549+  13FF 37            mov bh, bl
0550+  1400 33 01 00      mov bl, [d + 1]
0551+  1403 07 84 11      call _atoi        ; convert to int in AL
0552+  1406             
0553+  1406 E7            pop d
0554+  1407 E5            pop b
0555+  1408 F9            leave
0556+  1409 09            ret
0557+  140A             
0558+  140A             ;-----------------------------------------------------------------------------
0559+  140A             ; input decimal number
0560+  140A             ; result in A
0561+  140A             ; 655'\0'
0562+  140A             ; low--------high
0563+  140A             ;-----------------------------------------------------------------------------
0564+  140A             scan_u16d:
0565+  140A F8 08 00      enter 8
0566+  140D E2            push si
0567+  140E D8            push b
0568+  140F D9            push c
0569+  1410 DA            push d
0570+  1411 FA F9 FF      lea d, [bp +- 7]
0571+  1414 07 CD 11      call _gets
0572+  1417 07 26 11      call _strlen      ; get string length in C
0573+  141A 7E            dec c
0574+  141B FD 4E         mov si, d
0575+  141D 12            mov a, c
0576+  141E FD 99         shl a
0577+  1420 3B 5C 14      mov d, table_power
0578+  1423 59            add d, a
0579+  1424 38 00 00      mov c, 0
0580+  1427             mul_loop:
0581+  1427 F6            lodsb      ; load ASCII to al
0582+  1428 B9 00         cmp al, 0
0583+  142A C6 3D 14      je mul_exit
0584+  142D 6F 30         sub al, $30    ; make into integer
0585+  142F 22 00         mov ah, 0
0586+  1431 2A            mov b, [d]
0587+  1432 AC            mul a, b      ; result in B since it fits in 16bits
0588+  1433 11            mov a, b
0589+  1434 28            mov b, c
0590+  1435 54            add a, b
0591+  1436 39            mov c, a
0592+  1437 63 02 00      sub d, 2
0593+  143A 0A 27 14      jmp mul_loop
0594+  143D             mul_exit:
0595+  143D 12            mov a, c
0596+  143E E7            pop d
0597+  143F E6            pop c
0598+  1440 E5            pop b
0599+  1441 EF            pop si
0600+  1442 F9            leave
0601+  1443 09            ret
0602+  1444             
0603+  1444 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1448 34 35 36 37 
0603+  144C 38 39 41 42 
0603+  1450 43 44 45 46 
0604+  1454 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1458 1B 5B 48 00 
0605+  145C             
0606+  145C             table_power:
0607+  145C 01 00         .dw 1
0608+  145E 0A 00         .dw 10
0609+  1460 64 00         .dw 100
0610+  1462 E8 03         .dw 1000
0611+  1464 10 27         .dw 100002384   1466             ; --- END INLINE ASM BLOCK
2385   1466             
2386   1466 F9            leave
2387   1467 09            ret
2388   1468             
2389   1468             base64_encode:
2390   1468 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2391   146B             ; $i 
2392   146B 10 00 00      mov a, $0
2393   146E 45 FF FF      mov [bp + -1], a
2394   1471             ; $j 
2395   1471 10 00 00      mov a, $0
2396   1474 45 FD FF      mov [bp + -3], a
2397   1477             ; $k 
2398   1477             ; $input_len 
2399   1477             ; $input_buffer 
2400   1477             ; $output_buffer 
2401   1477 52 0F 00      sub sp, 15
2402   147A             ;; input_len = strlen(input); 
2403   147A FA F9 FF      lea d, [bp + -7] ; $input_len
2404   147D DA            push d
2405   147E FA 05 00      lea d, [bp + 5] ; $input
2406   1481 2A            mov b, [d]
2407   1482 FD AB         swp b
2408   1484 D8            push b
2409   1485 07 E7 05      call strlen
2410   1488 51 02 00      add sp, 2
2411   148B E7            pop d
2412   148C FD 43         mov [d], b
2413   148E             ;; while (input_len--) { 
2414   148E             _while36_cond:
2415   148E FA F9 FF      lea d, [bp + -7] ; $input_len
2416   1491 2A            mov b, [d]
2417   1492 D8            push b
2418   1493 FD 7D         dec b
2419   1495 FA F9 FF      lea d, [bp + -7] ; $input_len
2420   1498 FD 43         mov [d], b
2421   149A E5            pop b
2422   149B C0 00 00      cmp b, 0
2423   149E C6 52 16      je _while36_exit
2424   14A1             _while36_block:
2425   14A1             ;; input_buffer[i++] = *(input++); 
2426   14A1 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2427   14A4 D7            push a
2428   14A5 DA            push d
2429   14A6 FA FF FF      lea d, [bp + -1] ; $i
2430   14A9 2A            mov b, [d]
2431   14AA D8            push b
2432   14AB FD 77         inc b
2433   14AD FA FF FF      lea d, [bp + -1] ; $i
2434   14B0 FD 43         mov [d], b
2435   14B2 E5            pop b
2436   14B3 E7            pop d
2437   14B4 5A            add d, b
2438   14B5 E4            pop a
2439   14B6 DA            push d
2440   14B7 FA 05 00      lea d, [bp + 5] ; $input
2441   14BA 2A            mov b, [d]
2442   14BB D8            push b
2443   14BC FD 77         inc b
2444   14BE FA 05 00      lea d, [bp + 5] ; $input
2445   14C1 FD 43         mov [d], b
2446   14C3 E5            pop b
2447   14C4 74            mov d, b
2448   14C5 32            mov bl, [d]
2449   14C6 A7 00         mov bh, 0
2450   14C8 E7            pop d
2451   14C9 FD 3E         mov [d], bl
2452   14CB             ;; if (i == 3) { 
2453   14CB             _if37_cond:
2454   14CB FA FF FF      lea d, [bp + -1] ; $i
2455   14CE 2A            mov b, [d]
2456   14CF             ; START RELATIONAL
2457   14CF D7            push a
2458   14D0 11            mov a, b
2459   14D1 26 03 00      mov b, $3
2460   14D4 B0            cmp a, b
2461   14D5 FD 71         seq ; ==
2462   14D7 E4            pop a
2463   14D8             ; END RELATIONAL
2464   14D8 C0 00 00      cmp b, 0
2465   14DB C6 4F 16      je _if37_exit
2466   14DE             _if37_true:
2467   14DE             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
2468   14DE FA F2 FF      lea d, [bp + -14] ; $output_buffer
2469   14E1 D7            push a
2470   14E2 DA            push d
2471   14E3 26 00 00      mov b, $0
2472   14E6 E7            pop d
2473   14E7 5A            add d, b
2474   14E8 E4            pop a
2475   14E9 DA            push d
2476   14EA FA F6 FF      lea d, [bp + -10] ; $input_buffer
2477   14ED D7            push a
2478   14EE DA            push d
2479   14EF 26 00 00      mov b, $0
2480   14F2 E7            pop d
2481   14F3 5A            add d, b
2482   14F4 E4            pop a
2483   14F5 32            mov bl, [d]
2484   14F6 A7 00         mov bh, 0
2485   14F8 D7            push a
2486   14F9 11            mov a, b
2487   14FA 26 FC 00      mov b, $fc
2488   14FD 86            and a, b ; &
2489   14FE 27            mov b, a
2490   14FF E4            pop a
2491   1500             ; START SHIFT
2492   1500 D7            push a
2493   1501 11            mov a, b
2494   1502 26 02 00      mov b, $2
2495   1505 FD 39         mov c, b
2496   1507 A5            ashr a, cl
2497   1508 27            mov b, a
2498   1509 E4            pop a
2499   150A             ; END SHIFT
2500   150A E7            pop d
2501   150B FD 3E         mov [d], bl
2502   150D             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
2503   150D FA F2 FF      lea d, [bp + -14] ; $output_buffer
2504   1510 D7            push a
2505   1511 DA            push d
2506   1512 26 01 00      mov b, $1
2507   1515 E7            pop d
2508   1516 5A            add d, b
2509   1517 E4            pop a
2510   1518 DA            push d
2511   1519 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2512   151C D7            push a
2513   151D DA            push d
2514   151E 26 00 00      mov b, $0
2515   1521 E7            pop d
2516   1522 5A            add d, b
2517   1523 E4            pop a
2518   1524 32            mov bl, [d]
2519   1525 A7 00         mov bh, 0
2520   1527 D7            push a
2521   1528 11            mov a, b
2522   1529 26 03 00      mov b, $3
2523   152C 86            and a, b ; &
2524   152D 27            mov b, a
2525   152E E4            pop a
2526   152F             ; START SHIFT
2527   152F D7            push a
2528   1530 11            mov a, b
2529   1531 26 04 00      mov b, $4
2530   1534 FD 39         mov c, b
2531   1536 9D            shl a, cl
2532   1537 27            mov b, a
2533   1538 E4            pop a
2534   1539             ; END SHIFT
2535   1539             ; START TERMS
2536   1539 D7            push a
2537   153A 11            mov a, b
2538   153B FA F6 FF      lea d, [bp + -10] ; $input_buffer
2539   153E D7            push a
2540   153F DA            push d
2541   1540 26 01 00      mov b, $1
2542   1543 E7            pop d
2543   1544 5A            add d, b
2544   1545 E4            pop a
2545   1546 32            mov bl, [d]
2546   1547 A7 00         mov bh, 0
2547   1549 D7            push a
2548   154A 11            mov a, b
2549   154B 26 F0 00      mov b, $f0
2550   154E 86            and a, b ; &
2551   154F 27            mov b, a
2552   1550 E4            pop a
2553   1551             ; START SHIFT
2554   1551 D7            push a
2555   1552 11            mov a, b
2556   1553 26 04 00      mov b, $4
2557   1556 FD 39         mov c, b
2558   1558 A5            ashr a, cl
2559   1559 27            mov b, a
2560   155A E4            pop a
2561   155B             ; END SHIFT
2562   155B 56            add b, a
2563   155C E4            pop a
2564   155D             ; END TERMS
2565   155D E7            pop d
2566   155E FD 3E         mov [d], bl
2567   1560             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
2568   1560 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2569   1563 D7            push a
2570   1564 DA            push d
2571   1565 26 02 00      mov b, $2
2572   1568 E7            pop d
2573   1569 5A            add d, b
2574   156A E4            pop a
2575   156B DA            push d
2576   156C FA F6 FF      lea d, [bp + -10] ; $input_buffer
2577   156F D7            push a
2578   1570 DA            push d
2579   1571 26 01 00      mov b, $1
2580   1574 E7            pop d
2581   1575 5A            add d, b
2582   1576 E4            pop a
2583   1577 32            mov bl, [d]
2584   1578 A7 00         mov bh, 0
2585   157A D7            push a
2586   157B 11            mov a, b
2587   157C 26 0F 00      mov b, $f
2588   157F 86            and a, b ; &
2589   1580 27            mov b, a
2590   1581 E4            pop a
2591   1582             ; START SHIFT
2592   1582 D7            push a
2593   1583 11            mov a, b
2594   1584 26 02 00      mov b, $2
2595   1587 FD 39         mov c, b
2596   1589 9D            shl a, cl
2597   158A 27            mov b, a
2598   158B E4            pop a
2599   158C             ; END SHIFT
2600   158C             ; START TERMS
2601   158C D7            push a
2602   158D 11            mov a, b
2603   158E FA F6 FF      lea d, [bp + -10] ; $input_buffer
2604   1591 D7            push a
2605   1592 DA            push d
2606   1593 26 02 00      mov b, $2
2607   1596 E7            pop d
2608   1597 5A            add d, b
2609   1598 E4            pop a
2610   1599 32            mov bl, [d]
2611   159A A7 00         mov bh, 0
2612   159C D7            push a
2613   159D 11            mov a, b
2614   159E 26 C0 00      mov b, $c0
2615   15A1 86            and a, b ; &
2616   15A2 27            mov b, a
2617   15A3 E4            pop a
2618   15A4             ; START SHIFT
2619   15A4 D7            push a
2620   15A5 11            mov a, b
2621   15A6 26 06 00      mov b, $6
2622   15A9 FD 39         mov c, b
2623   15AB A5            ashr a, cl
2624   15AC 27            mov b, a
2625   15AD E4            pop a
2626   15AE             ; END SHIFT
2627   15AE 56            add b, a
2628   15AF E4            pop a
2629   15B0             ; END TERMS
2630   15B0 E7            pop d
2631   15B1 FD 3E         mov [d], bl
2632   15B3             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
2633   15B3 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2634   15B6 D7            push a
2635   15B7 DA            push d
2636   15B8 26 03 00      mov b, $3
2637   15BB E7            pop d
2638   15BC 5A            add d, b
2639   15BD E4            pop a
2640   15BE DA            push d
2641   15BF FA F6 FF      lea d, [bp + -10] ; $input_buffer
2642   15C2 D7            push a
2643   15C3 DA            push d
2644   15C4 26 02 00      mov b, $2
2645   15C7 E7            pop d
2646   15C8 5A            add d, b
2647   15C9 E4            pop a
2648   15CA 32            mov bl, [d]
2649   15CB A7 00         mov bh, 0
2650   15CD D7            push a
2651   15CE 11            mov a, b
2652   15CF 26 3F 00      mov b, $3f
2653   15D2 86            and a, b ; &
2654   15D3 27            mov b, a
2655   15D4 E4            pop a
2656   15D5 E7            pop d
2657   15D6 FD 3E         mov [d], bl
2658   15D8             ;; for (i = 0; i < 4; i++) { 
2659   15D8             _for38_init:
2660   15D8 FA FF FF      lea d, [bp + -1] ; $i
2661   15DB DA            push d
2662   15DC 26 00 00      mov b, $0
2663   15DF E7            pop d
2664   15E0 FD 43         mov [d], b
2665   15E2             _for38_cond:
2666   15E2 FA FF FF      lea d, [bp + -1] ; $i
2667   15E5 2A            mov b, [d]
2668   15E6             ; START RELATIONAL
2669   15E6 D7            push a
2670   15E7 11            mov a, b
2671   15E8 26 04 00      mov b, $4
2672   15EB B0            cmp a, b
2673   15EC FD 73         slt ; <= (signed)
2674   15EE E4            pop a
2675   15EF             ; END RELATIONAL
2676   15EF C0 00 00      cmp b, 0
2677   15F2 C6 42 16      je _for38_exit
2678   15F5             _for38_block:
2679   15F5             ;; output[j++] = base64_table[output_buffer[i]]; 
2680   15F5 FA 07 00      lea d, [bp + 7] ; $output
2681   15F8 FD 2A         mov d, [d]
2682   15FA D7            push a
2683   15FB DA            push d
2684   15FC FA FD FF      lea d, [bp + -3] ; $j
2685   15FF 2A            mov b, [d]
2686   1600 D8            push b
2687   1601 FD 77         inc b
2688   1603 FA FD FF      lea d, [bp + -3] ; $j
2689   1606 FD 43         mov [d], b
2690   1608 E5            pop b
2691   1609 E7            pop d
2692   160A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2693   160E E4            pop a
2694   160F DA            push d
2695   1610 3B AB 1D      mov d, _base64_table ; $base64_table
2696   1613 FD 2A         mov d, [d]
2697   1615 D7            push a
2698   1616 DA            push d
2699   1617 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2700   161A D7            push a
2701   161B DA            push d
2702   161C FA FF FF      lea d, [bp + -1] ; $i
2703   161F 2A            mov b, [d]
2704   1620 E7            pop d
2705   1621 5A            add d, b
2706   1622 E4            pop a
2707   1623 32            mov bl, [d]
2708   1624 A7 00         mov bh, 0
2709   1626 E7            pop d
2710   1627 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2711   162B E4            pop a
2712   162C 32            mov bl, [d]
2713   162D A7 00         mov bh, 0
2714   162F E7            pop d
2715   1630 FD 3E         mov [d], bl
2716   1632             _for38_update:
2717   1632 FA FF FF      lea d, [bp + -1] ; $i
2718   1635 2A            mov b, [d]
2719   1636 D8            push b
2720   1637 FD 77         inc b
2721   1639 FA FF FF      lea d, [bp + -1] ; $i
2722   163C FD 43         mov [d], b
2723   163E E5            pop b
2724   163F 0A E2 15      jmp _for38_cond
2725   1642             _for38_exit:
2726   1642             ;; i = 0; 
2727   1642 FA FF FF      lea d, [bp + -1] ; $i
2728   1645 DA            push d
2729   1646 26 00 00      mov b, $0
2730   1649 E7            pop d
2731   164A FD 43         mov [d], b
2732   164C 0A 4F 16      jmp _if37_exit
2733   164F             _if37_exit:
2734   164F 0A 8E 14      jmp _while36_cond
2735   1652             _while36_exit:
2736   1652             ;; if (i) { 
2737   1652             _if39_cond:
2738   1652 FA FF FF      lea d, [bp + -1] ; $i
2739   1655 2A            mov b, [d]
2740   1656 C0 00 00      cmp b, 0
2741   1659 C6 27 18      je _if39_exit
2742   165C             _if39_true:
2743   165C             ;; for (k = i; k < 3; k++) { 
2744   165C             _for40_init:
2745   165C FA FB FF      lea d, [bp + -5] ; $k
2746   165F DA            push d
2747   1660 FA FF FF      lea d, [bp + -1] ; $i
2748   1663 2A            mov b, [d]
2749   1664 E7            pop d
2750   1665 FD 43         mov [d], b
2751   1667             _for40_cond:
2752   1667 FA FB FF      lea d, [bp + -5] ; $k
2753   166A 2A            mov b, [d]
2754   166B             ; START RELATIONAL
2755   166B D7            push a
2756   166C 11            mov a, b
2757   166D 26 03 00      mov b, $3
2758   1670 B0            cmp a, b
2759   1671 FD 73         slt ; <= (signed)
2760   1673 E4            pop a
2761   1674             ; END RELATIONAL
2762   1674 C0 00 00      cmp b, 0
2763   1677 C6 9D 16      je _for40_exit
2764   167A             _for40_block:
2765   167A             ;; input_buffer[k] = '\0'; 
2766   167A FA F6 FF      lea d, [bp + -10] ; $input_buffer
2767   167D D7            push a
2768   167E DA            push d
2769   167F FA FB FF      lea d, [bp + -5] ; $k
2770   1682 2A            mov b, [d]
2771   1683 E7            pop d
2772   1684 5A            add d, b
2773   1685 E4            pop a
2774   1686 DA            push d
2775   1687 26 00 00      mov b, $0
2776   168A E7            pop d
2777   168B FD 3E         mov [d], bl
2778   168D             _for40_update:
2779   168D FA FB FF      lea d, [bp + -5] ; $k
2780   1690 2A            mov b, [d]
2781   1691 D8            push b
2782   1692 FD 77         inc b
2783   1694 FA FB FF      lea d, [bp + -5] ; $k
2784   1697 FD 43         mov [d], b
2785   1699 E5            pop b
2786   169A 0A 67 16      jmp _for40_cond
2787   169D             _for40_exit:
2788   169D             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
2789   169D FA F2 FF      lea d, [bp + -14] ; $output_buffer
2790   16A0 D7            push a
2791   16A1 DA            push d
2792   16A2 26 00 00      mov b, $0
2793   16A5 E7            pop d
2794   16A6 5A            add d, b
2795   16A7 E4            pop a
2796   16A8 DA            push d
2797   16A9 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2798   16AC D7            push a
2799   16AD DA            push d
2800   16AE 26 00 00      mov b, $0
2801   16B1 E7            pop d
2802   16B2 5A            add d, b
2803   16B3 E4            pop a
2804   16B4 32            mov bl, [d]
2805   16B5 A7 00         mov bh, 0
2806   16B7 D7            push a
2807   16B8 11            mov a, b
2808   16B9 26 FC 00      mov b, $fc
2809   16BC 86            and a, b ; &
2810   16BD 27            mov b, a
2811   16BE E4            pop a
2812   16BF             ; START SHIFT
2813   16BF D7            push a
2814   16C0 11            mov a, b
2815   16C1 26 02 00      mov b, $2
2816   16C4 FD 39         mov c, b
2817   16C6 A5            ashr a, cl
2818   16C7 27            mov b, a
2819   16C8 E4            pop a
2820   16C9             ; END SHIFT
2821   16C9 E7            pop d
2822   16CA FD 3E         mov [d], bl
2823   16CC             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
2824   16CC FA F2 FF      lea d, [bp + -14] ; $output_buffer
2825   16CF D7            push a
2826   16D0 DA            push d
2827   16D1 26 01 00      mov b, $1
2828   16D4 E7            pop d
2829   16D5 5A            add d, b
2830   16D6 E4            pop a
2831   16D7 DA            push d
2832   16D8 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2833   16DB D7            push a
2834   16DC DA            push d
2835   16DD 26 00 00      mov b, $0
2836   16E0 E7            pop d
2837   16E1 5A            add d, b
2838   16E2 E4            pop a
2839   16E3 32            mov bl, [d]
2840   16E4 A7 00         mov bh, 0
2841   16E6 D7            push a
2842   16E7 11            mov a, b
2843   16E8 26 03 00      mov b, $3
2844   16EB 86            and a, b ; &
2845   16EC 27            mov b, a
2846   16ED E4            pop a
2847   16EE             ; START SHIFT
2848   16EE D7            push a
2849   16EF 11            mov a, b
2850   16F0 26 04 00      mov b, $4
2851   16F3 FD 39         mov c, b
2852   16F5 9D            shl a, cl
2853   16F6 27            mov b, a
2854   16F7 E4            pop a
2855   16F8             ; END SHIFT
2856   16F8             ; START TERMS
2857   16F8 D7            push a
2858   16F9 11            mov a, b
2859   16FA FA F6 FF      lea d, [bp + -10] ; $input_buffer
2860   16FD D7            push a
2861   16FE DA            push d
2862   16FF 26 01 00      mov b, $1
2863   1702 E7            pop d
2864   1703 5A            add d, b
2865   1704 E4            pop a
2866   1705 32            mov bl, [d]
2867   1706 A7 00         mov bh, 0
2868   1708 D7            push a
2869   1709 11            mov a, b
2870   170A 26 F0 00      mov b, $f0
2871   170D 86            and a, b ; &
2872   170E 27            mov b, a
2873   170F E4            pop a
2874   1710             ; START SHIFT
2875   1710 D7            push a
2876   1711 11            mov a, b
2877   1712 26 04 00      mov b, $4
2878   1715 FD 39         mov c, b
2879   1717 A5            ashr a, cl
2880   1718 27            mov b, a
2881   1719 E4            pop a
2882   171A             ; END SHIFT
2883   171A 56            add b, a
2884   171B E4            pop a
2885   171C             ; END TERMS
2886   171C E7            pop d
2887   171D FD 3E         mov [d], bl
2888   171F             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
2889   171F FA F2 FF      lea d, [bp + -14] ; $output_buffer
2890   1722 D7            push a
2891   1723 DA            push d
2892   1724 26 02 00      mov b, $2
2893   1727 E7            pop d
2894   1728 5A            add d, b
2895   1729 E4            pop a
2896   172A DA            push d
2897   172B FA F6 FF      lea d, [bp + -10] ; $input_buffer
2898   172E D7            push a
2899   172F DA            push d
2900   1730 26 01 00      mov b, $1
2901   1733 E7            pop d
2902   1734 5A            add d, b
2903   1735 E4            pop a
2904   1736 32            mov bl, [d]
2905   1737 A7 00         mov bh, 0
2906   1739 D7            push a
2907   173A 11            mov a, b
2908   173B 26 0F 00      mov b, $f
2909   173E 86            and a, b ; &
2910   173F 27            mov b, a
2911   1740 E4            pop a
2912   1741             ; START SHIFT
2913   1741 D7            push a
2914   1742 11            mov a, b
2915   1743 26 02 00      mov b, $2
2916   1746 FD 39         mov c, b
2917   1748 9D            shl a, cl
2918   1749 27            mov b, a
2919   174A E4            pop a
2920   174B             ; END SHIFT
2921   174B             ; START TERMS
2922   174B D7            push a
2923   174C 11            mov a, b
2924   174D FA F6 FF      lea d, [bp + -10] ; $input_buffer
2925   1750 D7            push a
2926   1751 DA            push d
2927   1752 26 02 00      mov b, $2
2928   1755 E7            pop d
2929   1756 5A            add d, b
2930   1757 E4            pop a
2931   1758 32            mov bl, [d]
2932   1759 A7 00         mov bh, 0
2933   175B D7            push a
2934   175C 11            mov a, b
2935   175D 26 C0 00      mov b, $c0
2936   1760 86            and a, b ; &
2937   1761 27            mov b, a
2938   1762 E4            pop a
2939   1763             ; START SHIFT
2940   1763 D7            push a
2941   1764 11            mov a, b
2942   1765 26 06 00      mov b, $6
2943   1768 FD 39         mov c, b
2944   176A A5            ashr a, cl
2945   176B 27            mov b, a
2946   176C E4            pop a
2947   176D             ; END SHIFT
2948   176D 56            add b, a
2949   176E E4            pop a
2950   176F             ; END TERMS
2951   176F E7            pop d
2952   1770 FD 3E         mov [d], bl
2953   1772             ;; for (k = 0; k < i + 1; k++) { 
2954   1772             _for41_init:
2955   1772 FA FB FF      lea d, [bp + -5] ; $k
2956   1775 DA            push d
2957   1776 26 00 00      mov b, $0
2958   1779 E7            pop d
2959   177A FD 43         mov [d], b
2960   177C             _for41_cond:
2961   177C FA FB FF      lea d, [bp + -5] ; $k
2962   177F 2A            mov b, [d]
2963   1780             ; START RELATIONAL
2964   1780 D7            push a
2965   1781 11            mov a, b
2966   1782 FA FF FF      lea d, [bp + -1] ; $i
2967   1785 2A            mov b, [d]
2968   1786             ; START TERMS
2969   1786 D7            push a
2970   1787 11            mov a, b
2971   1788 26 01 00      mov b, $1
2972   178B 56            add b, a
2973   178C E4            pop a
2974   178D             ; END TERMS
2975   178D B0            cmp a, b
2976   178E FD 73         slt ; <= (signed)
2977   1790 E4            pop a
2978   1791             ; END RELATIONAL
2979   1791 C0 00 00      cmp b, 0
2980   1794 C6 E4 17      je _for41_exit
2981   1797             _for41_block:
2982   1797             ;; output[j++] = base64_table[output_buffer[k]]; 
2983   1797 FA 07 00      lea d, [bp + 7] ; $output
2984   179A FD 2A         mov d, [d]
2985   179C D7            push a
2986   179D DA            push d
2987   179E FA FD FF      lea d, [bp + -3] ; $j
2988   17A1 2A            mov b, [d]
2989   17A2 D8            push b
2990   17A3 FD 77         inc b
2991   17A5 FA FD FF      lea d, [bp + -3] ; $j
2992   17A8 FD 43         mov [d], b
2993   17AA E5            pop b
2994   17AB E7            pop d
2995   17AC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2996   17B0 E4            pop a
2997   17B1 DA            push d
2998   17B2 3B AB 1D      mov d, _base64_table ; $base64_table
2999   17B5 FD 2A         mov d, [d]
3000   17B7 D7            push a
3001   17B8 DA            push d
3002   17B9 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3003   17BC D7            push a
3004   17BD DA            push d
3005   17BE FA FB FF      lea d, [bp + -5] ; $k
3006   17C1 2A            mov b, [d]
3007   17C2 E7            pop d
3008   17C3 5A            add d, b
3009   17C4 E4            pop a
3010   17C5 32            mov bl, [d]
3011   17C6 A7 00         mov bh, 0
3012   17C8 E7            pop d
3013   17C9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3014   17CD E4            pop a
3015   17CE 32            mov bl, [d]
3016   17CF A7 00         mov bh, 0
3017   17D1 E7            pop d
3018   17D2 FD 3E         mov [d], bl
3019   17D4             _for41_update:
3020   17D4 FA FB FF      lea d, [bp + -5] ; $k
3021   17D7 2A            mov b, [d]
3022   17D8 D8            push b
3023   17D9 FD 77         inc b
3024   17DB FA FB FF      lea d, [bp + -5] ; $k
3025   17DE FD 43         mov [d], b
3026   17E0 E5            pop b
3027   17E1 0A 7C 17      jmp _for41_cond
3028   17E4             _for41_exit:
3029   17E4             ;; while (i++ < 3) { 
3030   17E4             _while42_cond:
3031   17E4 FA FF FF      lea d, [bp + -1] ; $i
3032   17E7 2A            mov b, [d]
3033   17E8 D8            push b
3034   17E9 FD 77         inc b
3035   17EB FA FF FF      lea d, [bp + -1] ; $i
3036   17EE FD 43         mov [d], b
3037   17F0 E5            pop b
3038   17F1             ; START RELATIONAL
3039   17F1 D7            push a
3040   17F2 11            mov a, b
3041   17F3 26 03 00      mov b, $3
3042   17F6 B0            cmp a, b
3043   17F7 FD 73         slt ; <= (signed)
3044   17F9 E4            pop a
3045   17FA             ; END RELATIONAL
3046   17FA C0 00 00      cmp b, 0
3047   17FD C6 24 18      je _while42_exit
3048   1800             _while42_block:
3049   1800             ;; output[j++] = '='; 
3050   1800 FA 07 00      lea d, [bp + 7] ; $output
3051   1803 FD 2A         mov d, [d]
3052   1805 D7            push a
3053   1806 DA            push d
3054   1807 FA FD FF      lea d, [bp + -3] ; $j
3055   180A 2A            mov b, [d]
3056   180B D8            push b
3057   180C FD 77         inc b
3058   180E FA FD FF      lea d, [bp + -3] ; $j
3059   1811 FD 43         mov [d], b
3060   1813 E5            pop b
3061   1814 E7            pop d
3062   1815 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3063   1819 E4            pop a
3064   181A DA            push d
3065   181B 26 3D 00      mov b, $3d
3066   181E E7            pop d
3067   181F FD 3E         mov [d], bl
3068   1821 0A E4 17      jmp _while42_cond
3069   1824             _while42_exit:
3070   1824 0A 27 18      jmp _if39_exit
3071   1827             _if39_exit:
3072   1827             ;; output[j] = '\0'; 
3073   1827 FA 07 00      lea d, [bp + 7] ; $output
3074   182A FD 2A         mov d, [d]
3075   182C D7            push a
3076   182D DA            push d
3077   182E FA FD FF      lea d, [bp + -3] ; $j
3078   1831 2A            mov b, [d]
3079   1832 E7            pop d
3080   1833 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3081   1837 E4            pop a
3082   1838 DA            push d
3083   1839 26 00 00      mov b, $0
3084   183C E7            pop d
3085   183D FD 3E         mov [d], bl
3086   183F F9            leave
3087   1840 09            ret
3088   1841             
3089   1841             base64_char_value:
3090   1841 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3091   1844             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
3092   1844             _if43_cond:
3093   1844 FA 05 00      lea d, [bp + 5] ; $c
3094   1847 32            mov bl, [d]
3095   1848 A7 00         mov bh, 0
3096   184A             ; START RELATIONAL
3097   184A D7            push a
3098   184B 11            mov a, b
3099   184C 26 41 00      mov b, $41
3100   184F B0            cmp a, b
3101   1850 FD 80         sge ; >=
3102   1852 E4            pop a
3103   1853             ; END RELATIONAL
3104   1853 D7            push a
3105   1854 11            mov a, b
3106   1855 FA 05 00      lea d, [bp + 5] ; $c
3107   1858 32            mov bl, [d]
3108   1859 A7 00         mov bh, 0
3109   185B             ; START RELATIONAL
3110   185B D7            push a
3111   185C 11            mov a, b
3112   185D 26 5A 00      mov b, $5a
3113   1860 B0            cmp a, b
3114   1861 FD 74         sle ; <=
3115   1863 E4            pop a
3116   1864             ; END RELATIONAL
3117   1864 FD A7         sand a, b ; &&
3118   1866 E4            pop a
3119   1867 C0 00 00      cmp b, 0
3120   186A C6 80 18      je _if43_exit
3121   186D             _if43_true:
3122   186D             ;; return c - 'A'; 
3123   186D FA 05 00      lea d, [bp + 5] ; $c
3124   1870 32            mov bl, [d]
3125   1871 A7 00         mov bh, 0
3126   1873             ; START TERMS
3127   1873 D7            push a
3128   1874 11            mov a, b
3129   1875 26 41 00      mov b, $41
3130   1878 60            sub a, b
3131   1879 27            mov b, a
3132   187A E4            pop a
3133   187B             ; END TERMS
3134   187B F9            leave
3135   187C 09            ret
3136   187D 0A 80 18      jmp _if43_exit
3137   1880             _if43_exit:
3138   1880             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
3139   1880             _if44_cond:
3140   1880 FA 05 00      lea d, [bp + 5] ; $c
3141   1883 32            mov bl, [d]
3142   1884 A7 00         mov bh, 0
3143   1886             ; START RELATIONAL
3144   1886 D7            push a
3145   1887 11            mov a, b
3146   1888 26 61 00      mov b, $61
3147   188B B0            cmp a, b
3148   188C FD 80         sge ; >=
3149   188E E4            pop a
3150   188F             ; END RELATIONAL
3151   188F D7            push a
3152   1890 11            mov a, b
3153   1891 FA 05 00      lea d, [bp + 5] ; $c
3154   1894 32            mov bl, [d]
3155   1895 A7 00         mov bh, 0
3156   1897             ; START RELATIONAL
3157   1897 D7            push a
3158   1898 11            mov a, b
3159   1899 26 7A 00      mov b, $7a
3160   189C B0            cmp a, b
3161   189D FD 74         sle ; <=
3162   189F E4            pop a
3163   18A0             ; END RELATIONAL
3164   18A0 FD A7         sand a, b ; &&
3165   18A2 E4            pop a
3166   18A3 C0 00 00      cmp b, 0
3167   18A6 C6 C1 18      je _if44_exit
3168   18A9             _if44_true:
3169   18A9             ;; return c - 'a' + 26; 
3170   18A9 FA 05 00      lea d, [bp + 5] ; $c
3171   18AC 32            mov bl, [d]
3172   18AD A7 00         mov bh, 0
3173   18AF             ; START TERMS
3174   18AF D7            push a
3175   18B0 11            mov a, b
3176   18B1 26 61 00      mov b, $61
3177   18B4 60            sub a, b
3178   18B5 27            mov b, a
3179   18B6 11            mov a, b
3180   18B7 26 1A 00      mov b, $1a
3181   18BA 56            add b, a
3182   18BB E4            pop a
3183   18BC             ; END TERMS
3184   18BC F9            leave
3185   18BD 09            ret
3186   18BE 0A C1 18      jmp _if44_exit
3187   18C1             _if44_exit:
3188   18C1             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
3189   18C1             _if45_cond:
3190   18C1 FA 05 00      lea d, [bp + 5] ; $c
3191   18C4 32            mov bl, [d]
3192   18C5 A7 00         mov bh, 0
3193   18C7             ; START RELATIONAL
3194   18C7 D7            push a
3195   18C8 11            mov a, b
3196   18C9 26 30 00      mov b, $30
3197   18CC B0            cmp a, b
3198   18CD FD 80         sge ; >=
3199   18CF E4            pop a
3200   18D0             ; END RELATIONAL
3201   18D0 D7            push a
3202   18D1 11            mov a, b
3203   18D2 FA 05 00      lea d, [bp + 5] ; $c
3204   18D5 32            mov bl, [d]
3205   18D6 A7 00         mov bh, 0
3206   18D8             ; START RELATIONAL
3207   18D8 D7            push a
3208   18D9 11            mov a, b
3209   18DA 26 39 00      mov b, $39
3210   18DD B0            cmp a, b
3211   18DE FD 74         sle ; <=
3212   18E0 E4            pop a
3213   18E1             ; END RELATIONAL
3214   18E1 FD A7         sand a, b ; &&
3215   18E3 E4            pop a
3216   18E4 C0 00 00      cmp b, 0
3217   18E7 C6 02 19      je _if45_exit
3218   18EA             _if45_true:
3219   18EA             ;; return c - '0' + 52; 
3220   18EA FA 05 00      lea d, [bp + 5] ; $c
3221   18ED 32            mov bl, [d]
3222   18EE A7 00         mov bh, 0
3223   18F0             ; START TERMS
3224   18F0 D7            push a
3225   18F1 11            mov a, b
3226   18F2 26 30 00      mov b, $30
3227   18F5 60            sub a, b
3228   18F6 27            mov b, a
3229   18F7 11            mov a, b
3230   18F8 26 34 00      mov b, $34
3231   18FB 56            add b, a
3232   18FC E4            pop a
3233   18FD             ; END TERMS
3234   18FD F9            leave
3235   18FE 09            ret
3236   18FF 0A 02 19      jmp _if45_exit
3237   1902             _if45_exit:
3238   1902             ;; if (c == '+') return 62; 
3239   1902             _if46_cond:
3240   1902 FA 05 00      lea d, [bp + 5] ; $c
3241   1905 32            mov bl, [d]
3242   1906 A7 00         mov bh, 0
3243   1908             ; START RELATIONAL
3244   1908 D7            push a
3245   1909 11            mov a, b
3246   190A 26 2B 00      mov b, $2b
3247   190D B0            cmp a, b
3248   190E FD 71         seq ; ==
3249   1910 E4            pop a
3250   1911             ; END RELATIONAL
3251   1911 C0 00 00      cmp b, 0
3252   1914 C6 1F 19      je _if46_exit
3253   1917             _if46_true:
3254   1917             ;; return 62; 
3255   1917 26 3E 00      mov b, $3e
3256   191A F9            leave
3257   191B 09            ret
3258   191C 0A 1F 19      jmp _if46_exit
3259   191F             _if46_exit:
3260   191F             ;; if (c == '/') return 63; 
3261   191F             _if47_cond:
3262   191F FA 05 00      lea d, [bp + 5] ; $c
3263   1922 32            mov bl, [d]
3264   1923 A7 00         mov bh, 0
3265   1925             ; START RELATIONAL
3266   1925 D7            push a
3267   1926 11            mov a, b
3268   1927 26 2F 00      mov b, $2f
3269   192A B0            cmp a, b
3270   192B FD 71         seq ; ==
3271   192D E4            pop a
3272   192E             ; END RELATIONAL
3273   192E C0 00 00      cmp b, 0
3274   1931 C6 3C 19      je _if47_exit
3275   1934             _if47_true:
3276   1934             ;; return 63; 
3277   1934 26 3F 00      mov b, $3f
3278   1937 F9            leave
3279   1938 09            ret
3280   1939 0A 3C 19      jmp _if47_exit
3281   193C             _if47_exit:
3282   193C             ;; return -1; 
3283   193C 26 FF FF      mov b, $ffff
3284   193F F9            leave
3285   1940 09            ret
3286   1941             
3287   1941             base64_decode:
3288   1941 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3289   1944             ; $i 
3290   1944 10 00 00      mov a, $0
3291   1947 45 FF FF      mov [bp + -1], a
3292   194A             ; $j 
3293   194A 10 00 00      mov a, $0
3294   194D 45 FD FF      mov [bp + -3], a
3295   1950             ; $k 
3296   1950 10 00 00      mov a, $0
3297   1953 45 FB FF      mov [bp + -5], a
3298   1956             ; $input_len 
3299   1956             ; $input_buffer 
3300   1956             ; $output_buffer 
3301   1956 52 0F 00      sub sp, 15
3302   1959             ;; input_len = strlen(input); 
3303   1959 FA F9 FF      lea d, [bp + -7] ; $input_len
3304   195C DA            push d
3305   195D FA 05 00      lea d, [bp + 5] ; $input
3306   1960 2A            mov b, [d]
3307   1961 FD AB         swp b
3308   1963 D8            push b
3309   1964 07 E7 05      call strlen
3310   1967 51 02 00      add sp, 2
3311   196A E7            pop d
3312   196B FD 43         mov [d], b
3313   196D             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
3314   196D             _while48_cond:
3315   196D FA F9 FF      lea d, [bp + -7] ; $input_len
3316   1970 2A            mov b, [d]
3317   1971 D8            push b
3318   1972 FD 7D         dec b
3319   1974 FA F9 FF      lea d, [bp + -7] ; $input_len
3320   1977 FD 43         mov [d], b
3321   1979 E5            pop b
3322   197A D7            push a
3323   197B 11            mov a, b
3324   197C FA 05 00      lea d, [bp + 5] ; $input
3325   197F FD 2A         mov d, [d]
3326   1981 D7            push a
3327   1982 DA            push d
3328   1983 FA FB FF      lea d, [bp + -5] ; $k
3329   1986 2A            mov b, [d]
3330   1987 E7            pop d
3331   1988 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3332   198C E4            pop a
3333   198D 32            mov bl, [d]
3334   198E A7 00         mov bh, 0
3335   1990             ; START RELATIONAL
3336   1990 D7            push a
3337   1991 11            mov a, b
3338   1992 26 3D 00      mov b, $3d
3339   1995 B0            cmp a, b
3340   1996 FD 72         sneq ; !=
3341   1998 E4            pop a
3342   1999             ; END RELATIONAL
3343   1999 FD A7         sand a, b ; &&
3344   199B 11            mov a, b
3345   199C FA 05 00      lea d, [bp + 5] ; $input
3346   199F FD 2A         mov d, [d]
3347   19A1 D7            push a
3348   19A2 DA            push d
3349   19A3 FA FB FF      lea d, [bp + -5] ; $k
3350   19A6 2A            mov b, [d]
3351   19A7 E7            pop d
3352   19A8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3353   19AC E4            pop a
3354   19AD 32            mov bl, [d]
3355   19AE A7 00         mov bh, 0
3356   19B0 DD            push bl
3357   19B1 07 41 18      call base64_char_value
3358   19B4 51 01 00      add sp, 1
3359   19B7             ; START RELATIONAL
3360   19B7 D7            push a
3361   19B8 11            mov a, b
3362   19B9 26 FF FF      mov b, $ffff
3363   19BC B0            cmp a, b
3364   19BD FD 72         sneq ; !=
3365   19BF E4            pop a
3366   19C0             ; END RELATIONAL
3367   19C0 FD A7         sand a, b ; &&
3368   19C2 E4            pop a
3369   19C3 C0 00 00      cmp b, 0
3370   19C6 C6 AE 1B      je _while48_exit
3371   19C9             _while48_block:
3372   19C9             ;; input_buffer[i++] = input[k++]; 
3373   19C9 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3374   19CC D7            push a
3375   19CD DA            push d
3376   19CE FA FF FF      lea d, [bp + -1] ; $i
3377   19D1 2A            mov b, [d]
3378   19D2 D8            push b
3379   19D3 FD 77         inc b
3380   19D5 FA FF FF      lea d, [bp + -1] ; $i
3381   19D8 FD 43         mov [d], b
3382   19DA E5            pop b
3383   19DB E7            pop d
3384   19DC 5A            add d, b
3385   19DD E4            pop a
3386   19DE DA            push d
3387   19DF FA 05 00      lea d, [bp + 5] ; $input
3388   19E2 FD 2A         mov d, [d]
3389   19E4 D7            push a
3390   19E5 DA            push d
3391   19E6 FA FB FF      lea d, [bp + -5] ; $k
3392   19E9 2A            mov b, [d]
3393   19EA D8            push b
3394   19EB FD 77         inc b
3395   19ED FA FB FF      lea d, [bp + -5] ; $k
3396   19F0 FD 43         mov [d], b
3397   19F2 E5            pop b
3398   19F3 E7            pop d
3399   19F4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3400   19F8 E4            pop a
3401   19F9 32            mov bl, [d]
3402   19FA A7 00         mov bh, 0
3403   19FC E7            pop d
3404   19FD FD 3E         mov [d], bl
3405   19FF             ;; if (i == 4) { 
3406   19FF             _if49_cond:
3407   19FF FA FF FF      lea d, [bp + -1] ; $i
3408   1A02 2A            mov b, [d]
3409   1A03             ; START RELATIONAL
3410   1A03 D7            push a
3411   1A04 11            mov a, b
3412   1A05 26 04 00      mov b, $4
3413   1A08 B0            cmp a, b
3414   1A09 FD 71         seq ; ==
3415   1A0B E4            pop a
3416   1A0C             ; END RELATIONAL
3417   1A0C C0 00 00      cmp b, 0
3418   1A0F C6 AB 1B      je _if49_exit
3419   1A12             _if49_true:
3420   1A12             ;; for (i = 0; i < 4; i++) { 
3421   1A12             _for50_init:
3422   1A12 FA FF FF      lea d, [bp + -1] ; $i
3423   1A15 DA            push d
3424   1A16 26 00 00      mov b, $0
3425   1A19 E7            pop d
3426   1A1A FD 43         mov [d], b
3427   1A1C             _for50_cond:
3428   1A1C FA FF FF      lea d, [bp + -1] ; $i
3429   1A1F 2A            mov b, [d]
3430   1A20             ; START RELATIONAL
3431   1A20 D7            push a
3432   1A21 11            mov a, b
3433   1A22 26 04 00      mov b, $4
3434   1A25 B0            cmp a, b
3435   1A26 FD 73         slt ; <= (signed)
3436   1A28 E4            pop a
3437   1A29             ; END RELATIONAL
3438   1A29 C0 00 00      cmp b, 0
3439   1A2C C6 65 1A      je _for50_exit
3440   1A2F             _for50_block:
3441   1A2F             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
3442   1A2F FA F5 FF      lea d, [bp + -11] ; $input_buffer
3443   1A32 D7            push a
3444   1A33 DA            push d
3445   1A34 FA FF FF      lea d, [bp + -1] ; $i
3446   1A37 2A            mov b, [d]
3447   1A38 E7            pop d
3448   1A39 5A            add d, b
3449   1A3A E4            pop a
3450   1A3B DA            push d
3451   1A3C FA F5 FF      lea d, [bp + -11] ; $input_buffer
3452   1A3F D7            push a
3453   1A40 DA            push d
3454   1A41 FA FF FF      lea d, [bp + -1] ; $i
3455   1A44 2A            mov b, [d]
3456   1A45 E7            pop d
3457   1A46 5A            add d, b
3458   1A47 E4            pop a
3459   1A48 32            mov bl, [d]
3460   1A49 A7 00         mov bh, 0
3461   1A4B DD            push bl
3462   1A4C 07 41 18      call base64_char_value
3463   1A4F 51 01 00      add sp, 1
3464   1A52 E7            pop d
3465   1A53 FD 3E         mov [d], bl
3466   1A55             _for50_update:
3467   1A55 FA FF FF      lea d, [bp + -1] ; $i
3468   1A58 2A            mov b, [d]
3469   1A59 D8            push b
3470   1A5A FD 77         inc b
3471   1A5C FA FF FF      lea d, [bp + -1] ; $i
3472   1A5F FD 43         mov [d], b
3473   1A61 E5            pop b
3474   1A62 0A 1C 1A      jmp _for50_cond
3475   1A65             _for50_exit:
3476   1A65             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
3477   1A65 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3478   1A68 D7            push a
3479   1A69 DA            push d
3480   1A6A 26 00 00      mov b, $0
3481   1A6D E7            pop d
3482   1A6E 5A            add d, b
3483   1A6F E4            pop a
3484   1A70 DA            push d
3485   1A71 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3486   1A74 D7            push a
3487   1A75 DA            push d
3488   1A76 26 00 00      mov b, $0
3489   1A79 E7            pop d
3490   1A7A 5A            add d, b
3491   1A7B E4            pop a
3492   1A7C 32            mov bl, [d]
3493   1A7D A7 00         mov bh, 0
3494   1A7F             ; START SHIFT
3495   1A7F D7            push a
3496   1A80 11            mov a, b
3497   1A81 26 02 00      mov b, $2
3498   1A84 FD 39         mov c, b
3499   1A86 9D            shl a, cl
3500   1A87 27            mov b, a
3501   1A88 E4            pop a
3502   1A89             ; END SHIFT
3503   1A89             ; START TERMS
3504   1A89 D7            push a
3505   1A8A 11            mov a, b
3506   1A8B FA F5 FF      lea d, [bp + -11] ; $input_buffer
3507   1A8E D7            push a
3508   1A8F DA            push d
3509   1A90 26 01 00      mov b, $1
3510   1A93 E7            pop d
3511   1A94 5A            add d, b
3512   1A95 E4            pop a
3513   1A96 32            mov bl, [d]
3514   1A97 A7 00         mov bh, 0
3515   1A99 D7            push a
3516   1A9A 11            mov a, b
3517   1A9B 26 30 00      mov b, $30
3518   1A9E 86            and a, b ; &
3519   1A9F 27            mov b, a
3520   1AA0 E4            pop a
3521   1AA1             ; START SHIFT
3522   1AA1 D7            push a
3523   1AA2 11            mov a, b
3524   1AA3 26 04 00      mov b, $4
3525   1AA6 FD 39         mov c, b
3526   1AA8 A5            ashr a, cl
3527   1AA9 27            mov b, a
3528   1AAA E4            pop a
3529   1AAB             ; END SHIFT
3530   1AAB 56            add b, a
3531   1AAC E4            pop a
3532   1AAD             ; END TERMS
3533   1AAD E7            pop d
3534   1AAE FD 3E         mov [d], bl
3535   1AB0             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
3536   1AB0 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3537   1AB3 D7            push a
3538   1AB4 DA            push d
3539   1AB5 26 01 00      mov b, $1
3540   1AB8 E7            pop d
3541   1AB9 5A            add d, b
3542   1ABA E4            pop a
3543   1ABB DA            push d
3544   1ABC FA F5 FF      lea d, [bp + -11] ; $input_buffer
3545   1ABF D7            push a
3546   1AC0 DA            push d
3547   1AC1 26 01 00      mov b, $1
3548   1AC4 E7            pop d
3549   1AC5 5A            add d, b
3550   1AC6 E4            pop a
3551   1AC7 32            mov bl, [d]
3552   1AC8 A7 00         mov bh, 0
3553   1ACA D7            push a
3554   1ACB 11            mov a, b
3555   1ACC 26 0F 00      mov b, $f
3556   1ACF 86            and a, b ; &
3557   1AD0 27            mov b, a
3558   1AD1 E4            pop a
3559   1AD2             ; START SHIFT
3560   1AD2 D7            push a
3561   1AD3 11            mov a, b
3562   1AD4 26 04 00      mov b, $4
3563   1AD7 FD 39         mov c, b
3564   1AD9 9D            shl a, cl
3565   1ADA 27            mov b, a
3566   1ADB E4            pop a
3567   1ADC             ; END SHIFT
3568   1ADC             ; START TERMS
3569   1ADC D7            push a
3570   1ADD 11            mov a, b
3571   1ADE FA F5 FF      lea d, [bp + -11] ; $input_buffer
3572   1AE1 D7            push a
3573   1AE2 DA            push d
3574   1AE3 26 02 00      mov b, $2
3575   1AE6 E7            pop d
3576   1AE7 5A            add d, b
3577   1AE8 E4            pop a
3578   1AE9 32            mov bl, [d]
3579   1AEA A7 00         mov bh, 0
3580   1AEC D7            push a
3581   1AED 11            mov a, b
3582   1AEE 26 3C 00      mov b, $3c
3583   1AF1 86            and a, b ; &
3584   1AF2 27            mov b, a
3585   1AF3 E4            pop a
3586   1AF4             ; START SHIFT
3587   1AF4 D7            push a
3588   1AF5 11            mov a, b
3589   1AF6 26 02 00      mov b, $2
3590   1AF9 FD 39         mov c, b
3591   1AFB A5            ashr a, cl
3592   1AFC 27            mov b, a
3593   1AFD E4            pop a
3594   1AFE             ; END SHIFT
3595   1AFE 56            add b, a
3596   1AFF E4            pop a
3597   1B00             ; END TERMS
3598   1B00 E7            pop d
3599   1B01 FD 3E         mov [d], bl
3600   1B03             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
3601   1B03 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3602   1B06 D7            push a
3603   1B07 DA            push d
3604   1B08 26 02 00      mov b, $2
3605   1B0B E7            pop d
3606   1B0C 5A            add d, b
3607   1B0D E4            pop a
3608   1B0E DA            push d
3609   1B0F FA F5 FF      lea d, [bp + -11] ; $input_buffer
3610   1B12 D7            push a
3611   1B13 DA            push d
3612   1B14 26 02 00      mov b, $2
3613   1B17 E7            pop d
3614   1B18 5A            add d, b
3615   1B19 E4            pop a
3616   1B1A 32            mov bl, [d]
3617   1B1B A7 00         mov bh, 0
3618   1B1D D7            push a
3619   1B1E 11            mov a, b
3620   1B1F 26 03 00      mov b, $3
3621   1B22 86            and a, b ; &
3622   1B23 27            mov b, a
3623   1B24 E4            pop a
3624   1B25             ; START SHIFT
3625   1B25 D7            push a
3626   1B26 11            mov a, b
3627   1B27 26 06 00      mov b, $6
3628   1B2A FD 39         mov c, b
3629   1B2C 9D            shl a, cl
3630   1B2D 27            mov b, a
3631   1B2E E4            pop a
3632   1B2F             ; END SHIFT
3633   1B2F             ; START TERMS
3634   1B2F D7            push a
3635   1B30 11            mov a, b
3636   1B31 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3637   1B34 D7            push a
3638   1B35 DA            push d
3639   1B36 26 03 00      mov b, $3
3640   1B39 E7            pop d
3641   1B3A 5A            add d, b
3642   1B3B E4            pop a
3643   1B3C 32            mov bl, [d]
3644   1B3D A7 00         mov bh, 0
3645   1B3F 56            add b, a
3646   1B40 E4            pop a
3647   1B41             ; END TERMS
3648   1B41 E7            pop d
3649   1B42 FD 3E         mov [d], bl
3650   1B44             ;; for (i = 0; i < 3; i++) { 
3651   1B44             _for51_init:
3652   1B44 FA FF FF      lea d, [bp + -1] ; $i
3653   1B47 DA            push d
3654   1B48 26 00 00      mov b, $0
3655   1B4B E7            pop d
3656   1B4C FD 43         mov [d], b
3657   1B4E             _for51_cond:
3658   1B4E FA FF FF      lea d, [bp + -1] ; $i
3659   1B51 2A            mov b, [d]
3660   1B52             ; START RELATIONAL
3661   1B52 D7            push a
3662   1B53 11            mov a, b
3663   1B54 26 03 00      mov b, $3
3664   1B57 B0            cmp a, b
3665   1B58 FD 73         slt ; <= (signed)
3666   1B5A E4            pop a
3667   1B5B             ; END RELATIONAL
3668   1B5B C0 00 00      cmp b, 0
3669   1B5E C6 9E 1B      je _for51_exit
3670   1B61             _for51_block:
3671   1B61             ;; output[j++] = output_buffer[i]; 
3672   1B61 FA 07 00      lea d, [bp + 7] ; $output
3673   1B64 FD 2A         mov d, [d]
3674   1B66 D7            push a
3675   1B67 DA            push d
3676   1B68 FA FD FF      lea d, [bp + -3] ; $j
3677   1B6B 2A            mov b, [d]
3678   1B6C D8            push b
3679   1B6D FD 77         inc b
3680   1B6F FA FD FF      lea d, [bp + -3] ; $j
3681   1B72 FD 43         mov [d], b
3682   1B74 E5            pop b
3683   1B75 E7            pop d
3684   1B76 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3685   1B7A E4            pop a
3686   1B7B DA            push d
3687   1B7C FA F2 FF      lea d, [bp + -14] ; $output_buffer
3688   1B7F D7            push a
3689   1B80 DA            push d
3690   1B81 FA FF FF      lea d, [bp + -1] ; $i
3691   1B84 2A            mov b, [d]
3692   1B85 E7            pop d
3693   1B86 5A            add d, b
3694   1B87 E4            pop a
3695   1B88 32            mov bl, [d]
3696   1B89 A7 00         mov bh, 0
3697   1B8B E7            pop d
3698   1B8C FD 3E         mov [d], bl
3699   1B8E             _for51_update:
3700   1B8E FA FF FF      lea d, [bp + -1] ; $i
3701   1B91 2A            mov b, [d]
3702   1B92 D8            push b
3703   1B93 FD 77         inc b
3704   1B95 FA FF FF      lea d, [bp + -1] ; $i
3705   1B98 FD 43         mov [d], b
3706   1B9A E5            pop b
3707   1B9B 0A 4E 1B      jmp _for51_cond
3708   1B9E             _for51_exit:
3709   1B9E             ;; i = 0; 
3710   1B9E FA FF FF      lea d, [bp + -1] ; $i
3711   1BA1 DA            push d
3712   1BA2 26 00 00      mov b, $0
3713   1BA5 E7            pop d
3714   1BA6 FD 43         mov [d], b
3715   1BA8 0A AB 1B      jmp _if49_exit
3716   1BAB             _if49_exit:
3717   1BAB 0A 6D 19      jmp _while48_cond
3718   1BAE             _while48_exit:
3719   1BAE             ;; if (i) { 
3720   1BAE             _if52_cond:
3721   1BAE FA FF FF      lea d, [bp + -1] ; $i
3722   1BB1 2A            mov b, [d]
3723   1BB2 C0 00 00      cmp b, 0
3724   1BB5 C6 50 1D      je _if52_exit
3725   1BB8             _if52_true:
3726   1BB8             ;; for (k = i; k < 4; k++) { 
3727   1BB8             _for53_init:
3728   1BB8 FA FB FF      lea d, [bp + -5] ; $k
3729   1BBB DA            push d
3730   1BBC FA FF FF      lea d, [bp + -1] ; $i
3731   1BBF 2A            mov b, [d]
3732   1BC0 E7            pop d
3733   1BC1 FD 43         mov [d], b
3734   1BC3             _for53_cond:
3735   1BC3 FA FB FF      lea d, [bp + -5] ; $k
3736   1BC6 2A            mov b, [d]
3737   1BC7             ; START RELATIONAL
3738   1BC7 D7            push a
3739   1BC8 11            mov a, b
3740   1BC9 26 04 00      mov b, $4
3741   1BCC B0            cmp a, b
3742   1BCD FD 73         slt ; <= (signed)
3743   1BCF E4            pop a
3744   1BD0             ; END RELATIONAL
3745   1BD0 C0 00 00      cmp b, 0
3746   1BD3 C6 F9 1B      je _for53_exit
3747   1BD6             _for53_block:
3748   1BD6             ;; input_buffer[k] = 0; 
3749   1BD6 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3750   1BD9 D7            push a
3751   1BDA DA            push d
3752   1BDB FA FB FF      lea d, [bp + -5] ; $k
3753   1BDE 2A            mov b, [d]
3754   1BDF E7            pop d
3755   1BE0 5A            add d, b
3756   1BE1 E4            pop a
3757   1BE2 DA            push d
3758   1BE3 26 00 00      mov b, $0
3759   1BE6 E7            pop d
3760   1BE7 FD 3E         mov [d], bl
3761   1BE9             _for53_update:
3762   1BE9 FA FB FF      lea d, [bp + -5] ; $k
3763   1BEC 2A            mov b, [d]
3764   1BED D8            push b
3765   1BEE FD 77         inc b
3766   1BF0 FA FB FF      lea d, [bp + -5] ; $k
3767   1BF3 FD 43         mov [d], b
3768   1BF5 E5            pop b
3769   1BF6 0A C3 1B      jmp _for53_cond
3770   1BF9             _for53_exit:
3771   1BF9             ;; for (k = 0; k < 4; k++) { 
3772   1BF9             _for54_init:
3773   1BF9 FA FB FF      lea d, [bp + -5] ; $k
3774   1BFC DA            push d
3775   1BFD 26 00 00      mov b, $0
3776   1C00 E7            pop d
3777   1C01 FD 43         mov [d], b
3778   1C03             _for54_cond:
3779   1C03 FA FB FF      lea d, [bp + -5] ; $k
3780   1C06 2A            mov b, [d]
3781   1C07             ; START RELATIONAL
3782   1C07 D7            push a
3783   1C08 11            mov a, b
3784   1C09 26 04 00      mov b, $4
3785   1C0C B0            cmp a, b
3786   1C0D FD 73         slt ; <= (signed)
3787   1C0F E4            pop a
3788   1C10             ; END RELATIONAL
3789   1C10 C0 00 00      cmp b, 0
3790   1C13 C6 4C 1C      je _for54_exit
3791   1C16             _for54_block:
3792   1C16             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
3793   1C16 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3794   1C19 D7            push a
3795   1C1A DA            push d
3796   1C1B FA FB FF      lea d, [bp + -5] ; $k
3797   1C1E 2A            mov b, [d]
3798   1C1F E7            pop d
3799   1C20 5A            add d, b
3800   1C21 E4            pop a
3801   1C22 DA            push d
3802   1C23 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3803   1C26 D7            push a
3804   1C27 DA            push d
3805   1C28 FA FB FF      lea d, [bp + -5] ; $k
3806   1C2B 2A            mov b, [d]
3807   1C2C E7            pop d
3808   1C2D 5A            add d, b
3809   1C2E E4            pop a
3810   1C2F 32            mov bl, [d]
3811   1C30 A7 00         mov bh, 0
3812   1C32 DD            push bl
3813   1C33 07 41 18      call base64_char_value
3814   1C36 51 01 00      add sp, 1
3815   1C39 E7            pop d
3816   1C3A FD 3E         mov [d], bl
3817   1C3C             _for54_update:
3818   1C3C FA FB FF      lea d, [bp + -5] ; $k
3819   1C3F 2A            mov b, [d]
3820   1C40 D8            push b
3821   1C41 FD 77         inc b
3822   1C43 FA FB FF      lea d, [bp + -5] ; $k
3823   1C46 FD 43         mov [d], b
3824   1C48 E5            pop b
3825   1C49 0A 03 1C      jmp _for54_cond
3826   1C4C             _for54_exit:
3827   1C4C             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
3828   1C4C FA F2 FF      lea d, [bp + -14] ; $output_buffer
3829   1C4F D7            push a
3830   1C50 DA            push d
3831   1C51 26 00 00      mov b, $0
3832   1C54 E7            pop d
3833   1C55 5A            add d, b
3834   1C56 E4            pop a
3835   1C57 DA            push d
3836   1C58 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3837   1C5B D7            push a
3838   1C5C DA            push d
3839   1C5D 26 00 00      mov b, $0
3840   1C60 E7            pop d
3841   1C61 5A            add d, b
3842   1C62 E4            pop a
3843   1C63 32            mov bl, [d]
3844   1C64 A7 00         mov bh, 0
3845   1C66             ; START SHIFT
3846   1C66 D7            push a
3847   1C67 11            mov a, b
3848   1C68 26 02 00      mov b, $2
3849   1C6B FD 39         mov c, b
3850   1C6D 9D            shl a, cl
3851   1C6E 27            mov b, a
3852   1C6F E4            pop a
3853   1C70             ; END SHIFT
3854   1C70             ; START TERMS
3855   1C70 D7            push a
3856   1C71 11            mov a, b
3857   1C72 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3858   1C75 D7            push a
3859   1C76 DA            push d
3860   1C77 26 01 00      mov b, $1
3861   1C7A E7            pop d
3862   1C7B 5A            add d, b
3863   1C7C E4            pop a
3864   1C7D 32            mov bl, [d]
3865   1C7E A7 00         mov bh, 0
3866   1C80 D7            push a
3867   1C81 11            mov a, b
3868   1C82 26 30 00      mov b, $30
3869   1C85 86            and a, b ; &
3870   1C86 27            mov b, a
3871   1C87 E4            pop a
3872   1C88             ; START SHIFT
3873   1C88 D7            push a
3874   1C89 11            mov a, b
3875   1C8A 26 04 00      mov b, $4
3876   1C8D FD 39         mov c, b
3877   1C8F A5            ashr a, cl
3878   1C90 27            mov b, a
3879   1C91 E4            pop a
3880   1C92             ; END SHIFT
3881   1C92 56            add b, a
3882   1C93 E4            pop a
3883   1C94             ; END TERMS
3884   1C94 E7            pop d
3885   1C95 FD 3E         mov [d], bl
3886   1C97             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
3887   1C97 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3888   1C9A D7            push a
3889   1C9B DA            push d
3890   1C9C 26 01 00      mov b, $1
3891   1C9F E7            pop d
3892   1CA0 5A            add d, b
3893   1CA1 E4            pop a
3894   1CA2 DA            push d
3895   1CA3 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3896   1CA6 D7            push a
3897   1CA7 DA            push d
3898   1CA8 26 01 00      mov b, $1
3899   1CAB E7            pop d
3900   1CAC 5A            add d, b
3901   1CAD E4            pop a
3902   1CAE 32            mov bl, [d]
3903   1CAF A7 00         mov bh, 0
3904   1CB1 D7            push a
3905   1CB2 11            mov a, b
3906   1CB3 26 0F 00      mov b, $f
3907   1CB6 86            and a, b ; &
3908   1CB7 27            mov b, a
3909   1CB8 E4            pop a
3910   1CB9             ; START SHIFT
3911   1CB9 D7            push a
3912   1CBA 11            mov a, b
3913   1CBB 26 04 00      mov b, $4
3914   1CBE FD 39         mov c, b
3915   1CC0 9D            shl a, cl
3916   1CC1 27            mov b, a
3917   1CC2 E4            pop a
3918   1CC3             ; END SHIFT
3919   1CC3             ; START TERMS
3920   1CC3 D7            push a
3921   1CC4 11            mov a, b
3922   1CC5 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3923   1CC8 D7            push a
3924   1CC9 DA            push d
3925   1CCA 26 02 00      mov b, $2
3926   1CCD E7            pop d
3927   1CCE 5A            add d, b
3928   1CCF E4            pop a
3929   1CD0 32            mov bl, [d]
3930   1CD1 A7 00         mov bh, 0
3931   1CD3 D7            push a
3932   1CD4 11            mov a, b
3933   1CD5 26 3C 00      mov b, $3c
3934   1CD8 86            and a, b ; &
3935   1CD9 27            mov b, a
3936   1CDA E4            pop a
3937   1CDB             ; START SHIFT
3938   1CDB D7            push a
3939   1CDC 11            mov a, b
3940   1CDD 26 02 00      mov b, $2
3941   1CE0 FD 39         mov c, b
3942   1CE2 A5            ashr a, cl
3943   1CE3 27            mov b, a
3944   1CE4 E4            pop a
3945   1CE5             ; END SHIFT
3946   1CE5 56            add b, a
3947   1CE6 E4            pop a
3948   1CE7             ; END TERMS
3949   1CE7 E7            pop d
3950   1CE8 FD 3E         mov [d], bl
3951   1CEA             ;; for (k = 0; k < i - 1; k++) { 
3952   1CEA             _for55_init:
3953   1CEA FA FB FF      lea d, [bp + -5] ; $k
3954   1CED DA            push d
3955   1CEE 26 00 00      mov b, $0
3956   1CF1 E7            pop d
3957   1CF2 FD 43         mov [d], b
3958   1CF4             _for55_cond:
3959   1CF4 FA FB FF      lea d, [bp + -5] ; $k
3960   1CF7 2A            mov b, [d]
3961   1CF8             ; START RELATIONAL
3962   1CF8 D7            push a
3963   1CF9 11            mov a, b
3964   1CFA FA FF FF      lea d, [bp + -1] ; $i
3965   1CFD 2A            mov b, [d]
3966   1CFE             ; START TERMS
3967   1CFE D7            push a
3968   1CFF 11            mov a, b
3969   1D00 26 01 00      mov b, $1
3970   1D03 60            sub a, b
3971   1D04 27            mov b, a
3972   1D05 E4            pop a
3973   1D06             ; END TERMS
3974   1D06 B0            cmp a, b
3975   1D07 FD 73         slt ; <= (signed)
3976   1D09 E4            pop a
3977   1D0A             ; END RELATIONAL
3978   1D0A C0 00 00      cmp b, 0
3979   1D0D C6 4D 1D      je _for55_exit
3980   1D10             _for55_block:
3981   1D10             ;; output[j++] = output_buffer[k]; 
3982   1D10 FA 07 00      lea d, [bp + 7] ; $output
3983   1D13 FD 2A         mov d, [d]
3984   1D15 D7            push a
3985   1D16 DA            push d
3986   1D17 FA FD FF      lea d, [bp + -3] ; $j
3987   1D1A 2A            mov b, [d]
3988   1D1B D8            push b
3989   1D1C FD 77         inc b
3990   1D1E FA FD FF      lea d, [bp + -3] ; $j
3991   1D21 FD 43         mov [d], b
3992   1D23 E5            pop b
3993   1D24 E7            pop d
3994   1D25 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3995   1D29 E4            pop a
3996   1D2A DA            push d
3997   1D2B FA F2 FF      lea d, [bp + -14] ; $output_buffer
3998   1D2E D7            push a
3999   1D2F DA            push d
4000   1D30 FA FB FF      lea d, [bp + -5] ; $k
4001   1D33 2A            mov b, [d]
4002   1D34 E7            pop d
4003   1D35 5A            add d, b
4004   1D36 E4            pop a
4005   1D37 32            mov bl, [d]
4006   1D38 A7 00         mov bh, 0
4007   1D3A E7            pop d
4008   1D3B FD 3E         mov [d], bl
4009   1D3D             _for55_update:
4010   1D3D FA FB FF      lea d, [bp + -5] ; $k
4011   1D40 2A            mov b, [d]
4012   1D41 D8            push b
4013   1D42 FD 77         inc b
4014   1D44 FA FB FF      lea d, [bp + -5] ; $k
4015   1D47 FD 43         mov [d], b
4016   1D49 E5            pop b
4017   1D4A 0A F4 1C      jmp _for55_cond
4018   1D4D             _for55_exit:
4019   1D4D 0A 50 1D      jmp _if52_exit
4020   1D50             _if52_exit:
4021   1D50             ;; output[j] = '\0'; 
4022   1D50 FA 07 00      lea d, [bp + 7] ; $output
4023   1D53 FD 2A         mov d, [d]
4024   1D55 D7            push a
4025   1D56 DA            push d
4026   1D57 FA FD FF      lea d, [bp + -3] ; $j
4027   1D5A 2A            mov b, [d]
4028   1D5B E7            pop d
4029   1D5C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4030   1D60 E4            pop a
4031   1D61 DA            push d
4032   1D62 26 00 00      mov b, $0
4033   1D65 E7            pop d
4034   1D66 FD 3E         mov [d], bl
4035   1D68 F9            leave
4036   1D69 09            ret
4037   1D6A             ; --- END TEXT BLOCK
4038   1D6A             
4039   1D6A             ; --- BEGIN DATA BLOCK
4040   1D6A 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
4040   1D6E 45 46 47 48 
4040   1D72 49 4A 4B 4C 
4040   1D76 4D 4E 4F 50 
4040   1D7A 51 52 53 54 
4040   1D7E 55 56 57 58 
4040   1D82 59 5A 61 62 
4040   1D86 63 64 65 66 
4040   1D8A 67 68 69 6A 
4040   1D8E 6B 6C 6D 6E 
4040   1D92 6F 70 71 72 
4040   1D96 73 74 75 76 
4040   1D9A 77 78 79 7A 
4040   1D9E 30 31 32 33 
4040   1DA2 34 35 36 37 
4040   1DA6 38 39 2B 2F 
4040   1DAA 00 
4041   1DAB 6A 1D       _base64_table: .dw _base64_table_data
4042   1DAD 45 6E 74 65 __s0: .db "Enter a base64 encoded string to decode: ", 0
4042   1DB1 72 20 61 20 
4042   1DB5 62 61 73 65 
4042   1DB9 36 34 20 65 
4042   1DBD 6E 63 6F 64 
4042   1DC1 65 64 20 73 
4042   1DC5 74 72 69 6E 
4042   1DC9 67 20 74 6F 
4042   1DCD 20 64 65 63 
4042   1DD1 6F 64 65 3A 
4042   1DD5 20 00 
4043   1DD7 45 6E 63 6F __s1: .db "Encoded string: %s\n", 0
4043   1DDB 64 65 64 20 
4043   1DDF 73 74 72 69 
4043   1DE3 6E 67 3A 20 
4043   1DE7 25 73 0A 00 
4044   1DEB 44 65 63 6F __s2: .db "Decoded string: %s\n", 0
4044   1DEF 64 65 64 20 
4044   1DF3 73 74 72 69 
4044   1DF7 6E 67 3A 20 
4044   1DFB 25 73 0A 00 
4045   1DFF 55 6E 65 78 __s3: .db "Unexpected format in printf.", 0
4045   1E03 70 65 63 74 
4045   1E07 65 64 20 66 
4045   1E0B 6F 72 6D 61 
4045   1E0F 74 20 69 6E 
4045   1E13 20 70 72 69 
4045   1E17 6E 74 66 2E 
4045   1E1B 00 
4046   1E1C 45 72 72 6F __s4: .db "Error: Unknown argument type.\n", 0
4046   1E20 72 3A 20 55 
4046   1E24 6E 6B 6E 6F 
4046   1E28 77 6E 20 61 
4046   1E2C 72 67 75 6D 
4046   1E30 65 6E 74 20 
4046   1E34 74 79 70 65 
4046   1E38 2E 0A 00 
4047   1E3B 1B 5B 32 4A __s5: .db "\033[2J\033[H", 0
4047   1E3F 1B 5B 48 00 
4048   1E43             
4049   1E43 45 1E       _heap_top: .dw _heap
4050   1E45 00          _heap: .db 0
4051   1E46             ; --- END DATA BLOCK
4052   1E46             
4053   1E46             .end
tasm: Number of errors = 0
