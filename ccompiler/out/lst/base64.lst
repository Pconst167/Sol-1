0001   0000             ; --- FILENAME: programs/base64.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; char input[512]; 
0011   0408 52 00 02      sub sp, 512
0012   040B             ; char output[256]; 
0013   040B 52 00 01      sub sp, 256
0014   040E             ; printf("\nEnter a base64 encoded string to decode: "); 
0015   040E                            
0016   040E             ; --- START FUNCTION CALL
0017   040E                            
0018   040E 26 AF 1A      mov b, _s0 ; "\nEnter a base64 encoded string to decode: "
0019   0411 FD AB         swp b
0020   0413 D8            push b
0021   0414 07 46 10      call printf
0022   0417 51 02 00      add sp, 2
0023   041A             ; --- END FUNCTION CALL
0024   041A             ; gets(input); 
0025   041A                            
0026   041A             ; --- START FUNCTION CALL
0027   041A                            
0028   041A FA 01 FE      lea d, [bp + -511] ; $input
0029   041D 2D            mov b, d
0030   041E 38 00 00      mov c, 0
0031   0421 FD AB         swp b
0032   0423 D8            push b
0033   0424 07 53 19      call gets
0034   0427 51 02 00      add sp, 2
0035   042A             ; --- END FUNCTION CALL
0036   042A             ; base64_encode(input, output); 
0037   042A                            
0038   042A             ; --- START FUNCTION CALL
0039   042A                            
0040   042A FA 01 FD      lea d, [bp + -767] ; $output
0041   042D 2D            mov b, d
0042   042E 38 00 00      mov c, 0
0043   0431 FD AB         swp b
0044   0433 D8            push b
0045   0434                            
0046   0434 FA 01 FE      lea d, [bp + -511] ; $input
0047   0437 2D            mov b, d
0048   0438 38 00 00      mov c, 0
0049   043B FD AB         swp b
0050   043D D8            push b
0051   043E 07 93 04      call base64_encode
0052   0441 51 04 00      add sp, 4
0053   0444             ; --- END FUNCTION CALL
0054   0444             ; printf("\nEncoded string: %s\n", output); 
0055   0444                            
0056   0444             ; --- START FUNCTION CALL
0057   0444                            
0058   0444 FA 01 FD      lea d, [bp + -767] ; $output
0059   0447 2D            mov b, d
0060   0448 38 00 00      mov c, 0
0061   044B FD AB         swp b
0062   044D D8            push b
0063   044E                            
0064   044E 26 DA 1A      mov b, _s1 ; "\nEncoded string: %s\n"
0065   0451 FD AB         swp b
0066   0453 D8            push b
0067   0454 07 46 10      call printf
0068   0457 51 04 00      add sp, 4
0069   045A             ; --- END FUNCTION CALL
0070   045A             ; base64_decode(output, input); 
0071   045A                            
0072   045A             ; --- START FUNCTION CALL
0073   045A                            
0074   045A FA 01 FE      lea d, [bp + -511] ; $input
0075   045D 2D            mov b, d
0076   045E 38 00 00      mov c, 0
0077   0461 FD AB         swp b
0078   0463 D8            push b
0079   0464                            
0080   0464 FA 01 FD      lea d, [bp + -767] ; $output
0081   0467 2D            mov b, d
0082   0468 38 00 00      mov c, 0
0083   046B FD AB         swp b
0084   046D D8            push b
0085   046E 07 E2 0A      call base64_decode
0086   0471 51 04 00      add sp, 4
0087   0474             ; --- END FUNCTION CALL
0088   0474             ; printf("\nDecoded string: %s\n", input); 
0089   0474                            
0090   0474             ; --- START FUNCTION CALL
0091   0474                            
0092   0474 FA 01 FE      lea d, [bp + -511] ; $input
0093   0477 2D            mov b, d
0094   0478 38 00 00      mov c, 0
0095   047B FD AB         swp b
0096   047D D8            push b
0097   047E                            
0098   047E 26 EF 1A      mov b, _s2 ; "\nDecoded string: %s\n"
0099   0481 FD AB         swp b
0100   0483 D8            push b
0101   0484 07 46 10      call printf
0102   0487 51 04 00      add sp, 4
0103   048A             ; --- END FUNCTION CALL
0104   048A             ; return 0; 
0105   048A                            
0106   048A FD 2E 00 00   mov32 cb, $00000000
0106   048E 00 00 
0107   0490 F9            leave
0108   0491 05 0B         syscall sys_terminate_proc
0109   0493             
0110   0493             base64_encode:
0111   0493 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0112   0496             ; int i = 0; 
0113   0496 52 02 00      sub sp, 2
0114   0499             ; --- START LOCAL VAR INITIALIZATION
0115   0499 FA FF FF      lea d, [bp + -1] ; $i
0116   049C DA            push d
0117   049D                            
0118   049D FD 2E 00 00   mov32 cb, $00000000
0118   04A1 00 00 
0119   04A3 E7            pop d
0120   04A4 FD 43         mov [d], b
0121   04A6             ; --- END LOCAL VAR INITIALIZATION
0122   04A6             ; int j = 0; 
0123   04A6 52 02 00      sub sp, 2
0124   04A9             ; --- START LOCAL VAR INITIALIZATION
0125   04A9 FA FD FF      lea d, [bp + -3] ; $j
0126   04AC DA            push d
0127   04AD                            
0128   04AD FD 2E 00 00   mov32 cb, $00000000
0128   04B1 00 00 
0129   04B3 E7            pop d
0130   04B4 FD 43         mov [d], b
0131   04B6             ; --- END LOCAL VAR INITIALIZATION
0132   04B6             ; int k; 
0133   04B6 52 02 00      sub sp, 2
0134   04B9             ; int input_len; 
0135   04B9 52 02 00      sub sp, 2
0136   04BC             ; unsigned char input_buffer[3]; 
0137   04BC 52 03 00      sub sp, 3
0138   04BF             ; unsigned char output_buffer[4]; 
0139   04BF 52 04 00      sub sp, 4
0140   04C2             ; input_len = strlen(input); 
0141   04C2 FA F9 FF      lea d, [bp + -7] ; $input_len
0142   04C5 DA            push d
0143   04C6                            
0144   04C6             ; --- START FUNCTION CALL
0145   04C6                            
0146   04C6 FA 05 00      lea d, [bp + 5] ; $input
0147   04C9 2A            mov b, [d]
0148   04CA 38 00 00      mov c, 0
0149   04CD FD AB         swp b
0150   04CF D8            push b
0151   04D0 07 11 1A      call strlen
0152   04D3 51 02 00      add sp, 2
0153   04D6             ; --- END FUNCTION CALL
0154   04D6 E7            pop d
0155   04D7 FD 43         mov [d], b
0156   04D9             ; while (input_len--) { 
0157   04D9             _while1_cond:
0158   04D9                            
0159   04D9 FA F9 FF      lea d, [bp + -7] ; $input_len
0160   04DC 2A            mov b, [d]
0161   04DD 38 00 00      mov c, 0
0162   04E0 11            mov a, b
0163   04E1 FD 7D         dec b
0164   04E3 FA F9 FF      lea d, [bp + -7] ; $input_len
0165   04E6 FD 43         mov [d], b
0166   04E8 27            mov b, a
0167   04E9 C0 00 00      cmp b, 0
0168   04EC C6 1B 07      je _while1_exit
0169   04EF             _while1_block:
0170   04EF             ; input_buffer[i++] = *(input++); 
0171   04EF FA F6 FF      lea d, [bp + -10] ; $input_buffer
0172   04F2 D7            push a
0173   04F3 DA            push d
0174   04F4                            
0175   04F4 FA FF FF      lea d, [bp + -1] ; $i
0176   04F7 2A            mov b, [d]
0177   04F8 38 00 00      mov c, 0
0178   04FB 11            mov a, b
0179   04FC FD 77         inc b
0180   04FE FA FF FF      lea d, [bp + -1] ; $i
0181   0501 FD 43         mov [d], b
0182   0503 27            mov b, a
0183   0504 E7            pop d
0184   0505 5A            add d, b
0185   0506 E4            pop a
0186   0507 DA            push d
0187   0508                            
0188   0508                            
0189   0508 FA 05 00      lea d, [bp + 5] ; $input
0190   050B 2A            mov b, [d]
0191   050C 38 00 00      mov c, 0
0192   050F FD 77         inc b
0193   0511 FA 05 00      lea d, [bp + 5] ; $input
0194   0514 FD 43         mov [d], b
0195   0516 FD 7D         dec b
0196   0518 74            mov d, b
0197   0519 32            mov bl, [d]
0198   051A A7 00         mov bh, 0
0199   051C 38 00 00      mov c, 0
0200   051F E7            pop d
0201   0520 FD 3E         mov [d], bl
0202   0522             ; if (i == 3) { 
0203   0522             _if2_cond:
0204   0522                            
0205   0522 FA FF FF      lea d, [bp + -1] ; $i
0206   0525 2A            mov b, [d]
0207   0526 38 00 00      mov c, 0
0208   0529             ; --- START RELATIONAL
0209   0529 D7            push a
0210   052A 11            mov a, b
0211   052B FD 2E 03 00   mov32 cb, $00000003
0211   052F 00 00 
0212   0531 B0            cmp a, b
0213   0532 FD 71         seq ; ==
0214   0534 E4            pop a
0215   0535             ; --- END RELATIONAL
0216   0535 C0 00 00      cmp b, 0
0217   0538 C6 18 07      je _if2_exit
0218   053B             _if2_TRUE:
0219   053B             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0220   053B FA F2 FF      lea d, [bp + -14] ; $output_buffer
0221   053E D7            push a
0222   053F DA            push d
0223   0540                            
0224   0540 FD 2E 00 00   mov32 cb, $00000000
0224   0544 00 00 
0225   0546 E7            pop d
0226   0547 5A            add d, b
0227   0548 E4            pop a
0228   0549 DA            push d
0229   054A                            
0230   054A                            
0231   054A FA F6 FF      lea d, [bp + -10] ; $input_buffer
0232   054D D7            push a
0233   054E DA            push d
0234   054F                            
0235   054F FD 2E 00 00   mov32 cb, $00000000
0235   0553 00 00 
0236   0555 E7            pop d
0237   0556 5A            add d, b
0238   0557 E4            pop a
0239   0558 32            mov bl, [d]
0240   0559 A7 00         mov bh, 0
0241   055B 38 00 00      mov c, 0
0242   055E D7            push a
0243   055F 11            mov a, b
0244   0560 FD 2E FC 00   mov32 cb, $000000fc
0244   0564 00 00 
0245   0566 FD 92         and b, a ; &
0246   0568 E4            pop a
0247   0569             ; --- START SHIFT
0248   0569 D7            push a
0249   056A 11            mov a, b
0250   056B FD 2E 02 00   mov32 cb, $00000002
0250   056F 00 00 
0251   0571 FD 39         mov c, b
0252   0573 A5            ashr a, cl
0253   0574 27            mov b, a
0254   0575 E4            pop a
0255   0576             ; --- END SHIFT
0256   0576 E7            pop d
0257   0577 FD 3E         mov [d], bl
0258   0579             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0259   0579 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0260   057C D7            push a
0261   057D DA            push d
0262   057E                            
0263   057E FD 2E 01 00   mov32 cb, $00000001
0263   0582 00 00 
0264   0584 E7            pop d
0265   0585 5A            add d, b
0266   0586 E4            pop a
0267   0587 DA            push d
0268   0588                            
0269   0588                            
0270   0588                            
0271   0588 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0272   058B D7            push a
0273   058C DA            push d
0274   058D                            
0275   058D FD 2E 00 00   mov32 cb, $00000000
0275   0591 00 00 
0276   0593 E7            pop d
0277   0594 5A            add d, b
0278   0595 E4            pop a
0279   0596 32            mov bl, [d]
0280   0597 A7 00         mov bh, 0
0281   0599 38 00 00      mov c, 0
0282   059C D7            push a
0283   059D 11            mov a, b
0284   059E FD 2E 03 00   mov32 cb, $00000003
0284   05A2 00 00 
0285   05A4 FD 92         and b, a ; &
0286   05A6 E4            pop a
0287   05A7             ; --- START SHIFT
0288   05A7 D7            push a
0289   05A8 11            mov a, b
0290   05A9 FD 2E 04 00   mov32 cb, $00000004
0290   05AD 00 00 
0291   05AF FD 39         mov c, b
0292   05B1 9D            shl a, cl
0293   05B2 27            mov b, a
0294   05B3 E4            pop a
0295   05B4             ; --- END SHIFT
0296   05B4             ; --- START TERMS
0297   05B4 D7            push a
0298   05B5 11            mov a, b
0299   05B6                            
0300   05B6                            
0301   05B6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0302   05B9 D7            push a
0303   05BA DA            push d
0304   05BB                            
0305   05BB FD 2E 01 00   mov32 cb, $00000001
0305   05BF 00 00 
0306   05C1 E7            pop d
0307   05C2 5A            add d, b
0308   05C3 E4            pop a
0309   05C4 32            mov bl, [d]
0310   05C5 A7 00         mov bh, 0
0311   05C7 38 00 00      mov c, 0
0312   05CA D7            push a
0313   05CB 11            mov a, b
0314   05CC FD 2E F0 00   mov32 cb, $000000f0
0314   05D0 00 00 
0315   05D2 FD 92         and b, a ; &
0316   05D4 E4            pop a
0317   05D5             ; --- START SHIFT
0318   05D5 D7            push a
0319   05D6 11            mov a, b
0320   05D7 FD 2E 04 00   mov32 cb, $00000004
0320   05DB 00 00 
0321   05DD FD 39         mov c, b
0322   05DF A5            ashr a, cl
0323   05E0 27            mov b, a
0324   05E1 E4            pop a
0325   05E2             ; --- END SHIFT
0326   05E2 56            add b, a
0327   05E3 E4            pop a
0328   05E4             ; --- END TERMS
0329   05E4 E7            pop d
0330   05E5 FD 3E         mov [d], bl
0331   05E7             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0332   05E7 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0333   05EA D7            push a
0334   05EB DA            push d
0335   05EC                            
0336   05EC FD 2E 02 00   mov32 cb, $00000002
0336   05F0 00 00 
0337   05F2 E7            pop d
0338   05F3 5A            add d, b
0339   05F4 E4            pop a
0340   05F5 DA            push d
0341   05F6                            
0342   05F6                            
0343   05F6                            
0344   05F6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0345   05F9 D7            push a
0346   05FA DA            push d
0347   05FB                            
0348   05FB FD 2E 01 00   mov32 cb, $00000001
0348   05FF 00 00 
0349   0601 E7            pop d
0350   0602 5A            add d, b
0351   0603 E4            pop a
0352   0604 32            mov bl, [d]
0353   0605 A7 00         mov bh, 0
0354   0607 38 00 00      mov c, 0
0355   060A D7            push a
0356   060B 11            mov a, b
0357   060C FD 2E 0F 00   mov32 cb, $0000000f
0357   0610 00 00 
0358   0612 FD 92         and b, a ; &
0359   0614 E4            pop a
0360   0615             ; --- START SHIFT
0361   0615 D7            push a
0362   0616 11            mov a, b
0363   0617 FD 2E 02 00   mov32 cb, $00000002
0363   061B 00 00 
0364   061D FD 39         mov c, b
0365   061F 9D            shl a, cl
0366   0620 27            mov b, a
0367   0621 E4            pop a
0368   0622             ; --- END SHIFT
0369   0622             ; --- START TERMS
0370   0622 D7            push a
0371   0623 11            mov a, b
0372   0624                            
0373   0624                            
0374   0624 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0375   0627 D7            push a
0376   0628 DA            push d
0377   0629                            
0378   0629 FD 2E 02 00   mov32 cb, $00000002
0378   062D 00 00 
0379   062F E7            pop d
0380   0630 5A            add d, b
0381   0631 E4            pop a
0382   0632 32            mov bl, [d]
0383   0633 A7 00         mov bh, 0
0384   0635 38 00 00      mov c, 0
0385   0638 D7            push a
0386   0639 11            mov a, b
0387   063A FD 2E C0 00   mov32 cb, $000000c0
0387   063E 00 00 
0388   0640 FD 92         and b, a ; &
0389   0642 E4            pop a
0390   0643             ; --- START SHIFT
0391   0643 D7            push a
0392   0644 11            mov a, b
0393   0645 FD 2E 06 00   mov32 cb, $00000006
0393   0649 00 00 
0394   064B FD 39         mov c, b
0395   064D A5            ashr a, cl
0396   064E 27            mov b, a
0397   064F E4            pop a
0398   0650             ; --- END SHIFT
0399   0650 56            add b, a
0400   0651 E4            pop a
0401   0652             ; --- END TERMS
0402   0652 E7            pop d
0403   0653 FD 3E         mov [d], bl
0404   0655             ; output_buffer[3] = input_buffer[2] & 0x3F; 
0405   0655 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0406   0658 D7            push a
0407   0659 DA            push d
0408   065A                            
0409   065A FD 2E 03 00   mov32 cb, $00000003
0409   065E 00 00 
0410   0660 E7            pop d
0411   0661 5A            add d, b
0412   0662 E4            pop a
0413   0663 DA            push d
0414   0664                            
0415   0664 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0416   0667 D7            push a
0417   0668 DA            push d
0418   0669                            
0419   0669 FD 2E 02 00   mov32 cb, $00000002
0419   066D 00 00 
0420   066F E7            pop d
0421   0670 5A            add d, b
0422   0671 E4            pop a
0423   0672 32            mov bl, [d]
0424   0673 A7 00         mov bh, 0
0425   0675 38 00 00      mov c, 0
0426   0678 D7            push a
0427   0679 11            mov a, b
0428   067A FD 2E 3F 00   mov32 cb, $0000003f
0428   067E 00 00 
0429   0680 FD 92         and b, a ; &
0430   0682 E4            pop a
0431   0683 E7            pop d
0432   0684 FD 3E         mov [d], bl
0433   0686             ; for (i = 0; i < 4; i++) { 
0434   0686             _for3_init:
0435   0686 FA FF FF      lea d, [bp + -1] ; $i
0436   0689 DA            push d
0437   068A                            
0438   068A FD 2E 00 00   mov32 cb, $00000000
0438   068E 00 00 
0439   0690 E7            pop d
0440   0691 FD 43         mov [d], b
0441   0693             _for3_cond:
0442   0693                            
0443   0693 FA FF FF      lea d, [bp + -1] ; $i
0444   0696 2A            mov b, [d]
0445   0697 38 00 00      mov c, 0
0446   069A             ; --- START RELATIONAL
0447   069A D7            push a
0448   069B 11            mov a, b
0449   069C FD 2E 04 00   mov32 cb, $00000004
0449   06A0 00 00 
0450   06A2 B0            cmp a, b
0451   06A3 FD 73         slt ; < (signed)
0452   06A5 E4            pop a
0453   06A6             ; --- END RELATIONAL
0454   06A6 C0 00 00      cmp b, 0
0455   06A9 C6 08 07      je _for3_exit
0456   06AC             _for3_block:
0457   06AC             ; output[j++] = base64_table[output_buffer[i]]; 
0458   06AC FA 07 00      lea d, [bp + 7] ; $output
0459   06AF FD 2A         mov d, [d]
0460   06B1 D7            push a
0461   06B2 DA            push d
0462   06B3                            
0463   06B3 FA FD FF      lea d, [bp + -3] ; $j
0464   06B6 2A            mov b, [d]
0465   06B7 38 00 00      mov c, 0
0466   06BA 11            mov a, b
0467   06BB FD 77         inc b
0468   06BD FA FD FF      lea d, [bp + -3] ; $j
0469   06C0 FD 43         mov [d], b
0470   06C2 27            mov b, a
0471   06C3 E7            pop d
0472   06C4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0473   06C8 E4            pop a
0474   06C9 DA            push d
0475   06CA                            
0476   06CA 3B AD 1A      mov d, _base64_table ; $base64_table
0477   06CD FD 2A         mov d, [d]
0478   06CF D7            push a
0479   06D0 DA            push d
0480   06D1                            
0481   06D1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0482   06D4 D7            push a
0483   06D5 DA            push d
0484   06D6                            
0485   06D6 FA FF FF      lea d, [bp + -1] ; $i
0486   06D9 2A            mov b, [d]
0487   06DA 38 00 00      mov c, 0
0488   06DD E7            pop d
0489   06DE 5A            add d, b
0490   06DF E4            pop a
0491   06E0 32            mov bl, [d]
0492   06E1 A7 00         mov bh, 0
0493   06E3 38 00 00      mov c, 0
0494   06E6 E7            pop d
0495   06E7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0496   06EB E4            pop a
0497   06EC 32            mov bl, [d]
0498   06ED A7 00         mov bh, 0
0499   06EF 38 00 00      mov c, 0
0500   06F2 E7            pop d
0501   06F3 FD 3E         mov [d], bl
0502   06F5             _for3_update:
0503   06F5                            
0504   06F5 FA FF FF      lea d, [bp + -1] ; $i
0505   06F8 2A            mov b, [d]
0506   06F9 38 00 00      mov c, 0
0507   06FC 11            mov a, b
0508   06FD FD 77         inc b
0509   06FF FA FF FF      lea d, [bp + -1] ; $i
0510   0702 FD 43         mov [d], b
0511   0704 27            mov b, a
0512   0705 0A 93 06      jmp _for3_cond
0513   0708             _for3_exit:
0514   0708             ; i = 0; 
0515   0708 FA FF FF      lea d, [bp + -1] ; $i
0516   070B DA            push d
0517   070C                            
0518   070C FD 2E 00 00   mov32 cb, $00000000
0518   0710 00 00 
0519   0712 E7            pop d
0520   0713 FD 43         mov [d], b
0521   0715 0A 18 07      jmp _if2_exit
0522   0718             _if2_exit:
0523   0718 0A D9 04      jmp _while1_cond
0524   071B             _while1_exit:
0525   071B             ; if (i) { 
0526   071B             _if4_cond:
0527   071B                            
0528   071B FA FF FF      lea d, [bp + -1] ; $i
0529   071E 2A            mov b, [d]
0530   071F 38 00 00      mov c, 0
0531   0722 C0 00 00      cmp b, 0
0532   0725 C6 71 09      je _if4_exit
0533   0728             _if4_TRUE:
0534   0728             ; for (k = i; k < 3; k++) { 
0535   0728             _for5_init:
0536   0728 FA FB FF      lea d, [bp + -5] ; $k
0537   072B DA            push d
0538   072C                            
0539   072C FA FF FF      lea d, [bp + -1] ; $i
0540   072F 2A            mov b, [d]
0541   0730 38 00 00      mov c, 0
0542   0733 E7            pop d
0543   0734 FD 43         mov [d], b
0544   0736             _for5_cond:
0545   0736                            
0546   0736 FA FB FF      lea d, [bp + -5] ; $k
0547   0739 2A            mov b, [d]
0548   073A 38 00 00      mov c, 0
0549   073D             ; --- START RELATIONAL
0550   073D D7            push a
0551   073E 11            mov a, b
0552   073F FD 2E 03 00   mov32 cb, $00000003
0552   0743 00 00 
0553   0745 B0            cmp a, b
0554   0746 FD 73         slt ; < (signed)
0555   0748 E4            pop a
0556   0749             ; --- END RELATIONAL
0557   0749 C0 00 00      cmp b, 0
0558   074C C6 7B 07      je _for5_exit
0559   074F             _for5_block:
0560   074F             ; input_buffer[k] = '\0'; 
0561   074F FA F6 FF      lea d, [bp + -10] ; $input_buffer
0562   0752 D7            push a
0563   0753 DA            push d
0564   0754                            
0565   0754 FA FB FF      lea d, [bp + -5] ; $k
0566   0757 2A            mov b, [d]
0567   0758 38 00 00      mov c, 0
0568   075B E7            pop d
0569   075C 5A            add d, b
0570   075D E4            pop a
0571   075E DA            push d
0572   075F                            
0573   075F FD 2E 00 00   mov32 cb, $00000000
0573   0763 00 00 
0574   0765 E7            pop d
0575   0766 FD 3E         mov [d], bl
0576   0768             _for5_update:
0577   0768                            
0578   0768 FA FB FF      lea d, [bp + -5] ; $k
0579   076B 2A            mov b, [d]
0580   076C 38 00 00      mov c, 0
0581   076F 11            mov a, b
0582   0770 FD 77         inc b
0583   0772 FA FB FF      lea d, [bp + -5] ; $k
0584   0775 FD 43         mov [d], b
0585   0777 27            mov b, a
0586   0778 0A 36 07      jmp _for5_cond
0587   077B             _for5_exit:
0588   077B             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0589   077B FA F2 FF      lea d, [bp + -14] ; $output_buffer
0590   077E D7            push a
0591   077F DA            push d
0592   0780                            
0593   0780 FD 2E 00 00   mov32 cb, $00000000
0593   0784 00 00 
0594   0786 E7            pop d
0595   0787 5A            add d, b
0596   0788 E4            pop a
0597   0789 DA            push d
0598   078A                            
0599   078A                            
0600   078A FA F6 FF      lea d, [bp + -10] ; $input_buffer
0601   078D D7            push a
0602   078E DA            push d
0603   078F                            
0604   078F FD 2E 00 00   mov32 cb, $00000000
0604   0793 00 00 
0605   0795 E7            pop d
0606   0796 5A            add d, b
0607   0797 E4            pop a
0608   0798 32            mov bl, [d]
0609   0799 A7 00         mov bh, 0
0610   079B 38 00 00      mov c, 0
0611   079E D7            push a
0612   079F 11            mov a, b
0613   07A0 FD 2E FC 00   mov32 cb, $000000fc
0613   07A4 00 00 
0614   07A6 FD 92         and b, a ; &
0615   07A8 E4            pop a
0616   07A9             ; --- START SHIFT
0617   07A9 D7            push a
0618   07AA 11            mov a, b
0619   07AB FD 2E 02 00   mov32 cb, $00000002
0619   07AF 00 00 
0620   07B1 FD 39         mov c, b
0621   07B3 A5            ashr a, cl
0622   07B4 27            mov b, a
0623   07B5 E4            pop a
0624   07B6             ; --- END SHIFT
0625   07B6 E7            pop d
0626   07B7 FD 3E         mov [d], bl
0627   07B9             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0628   07B9 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0629   07BC D7            push a
0630   07BD DA            push d
0631   07BE                            
0632   07BE FD 2E 01 00   mov32 cb, $00000001
0632   07C2 00 00 
0633   07C4 E7            pop d
0634   07C5 5A            add d, b
0635   07C6 E4            pop a
0636   07C7 DA            push d
0637   07C8                            
0638   07C8                            
0639   07C8                            
0640   07C8 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0641   07CB D7            push a
0642   07CC DA            push d
0643   07CD                            
0644   07CD FD 2E 00 00   mov32 cb, $00000000
0644   07D1 00 00 
0645   07D3 E7            pop d
0646   07D4 5A            add d, b
0647   07D5 E4            pop a
0648   07D6 32            mov bl, [d]
0649   07D7 A7 00         mov bh, 0
0650   07D9 38 00 00      mov c, 0
0651   07DC D7            push a
0652   07DD 11            mov a, b
0653   07DE FD 2E 03 00   mov32 cb, $00000003
0653   07E2 00 00 
0654   07E4 FD 92         and b, a ; &
0655   07E6 E4            pop a
0656   07E7             ; --- START SHIFT
0657   07E7 D7            push a
0658   07E8 11            mov a, b
0659   07E9 FD 2E 04 00   mov32 cb, $00000004
0659   07ED 00 00 
0660   07EF FD 39         mov c, b
0661   07F1 9D            shl a, cl
0662   07F2 27            mov b, a
0663   07F3 E4            pop a
0664   07F4             ; --- END SHIFT
0665   07F4             ; --- START TERMS
0666   07F4 D7            push a
0667   07F5 11            mov a, b
0668   07F6                            
0669   07F6                            
0670   07F6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0671   07F9 D7            push a
0672   07FA DA            push d
0673   07FB                            
0674   07FB FD 2E 01 00   mov32 cb, $00000001
0674   07FF 00 00 
0675   0801 E7            pop d
0676   0802 5A            add d, b
0677   0803 E4            pop a
0678   0804 32            mov bl, [d]
0679   0805 A7 00         mov bh, 0
0680   0807 38 00 00      mov c, 0
0681   080A D7            push a
0682   080B 11            mov a, b
0683   080C FD 2E F0 00   mov32 cb, $000000f0
0683   0810 00 00 
0684   0812 FD 92         and b, a ; &
0685   0814 E4            pop a
0686   0815             ; --- START SHIFT
0687   0815 D7            push a
0688   0816 11            mov a, b
0689   0817 FD 2E 04 00   mov32 cb, $00000004
0689   081B 00 00 
0690   081D FD 39         mov c, b
0691   081F A5            ashr a, cl
0692   0820 27            mov b, a
0693   0821 E4            pop a
0694   0822             ; --- END SHIFT
0695   0822 56            add b, a
0696   0823 E4            pop a
0697   0824             ; --- END TERMS
0698   0824 E7            pop d
0699   0825 FD 3E         mov [d], bl
0700   0827             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0701   0827 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0702   082A D7            push a
0703   082B DA            push d
0704   082C                            
0705   082C FD 2E 02 00   mov32 cb, $00000002
0705   0830 00 00 
0706   0832 E7            pop d
0707   0833 5A            add d, b
0708   0834 E4            pop a
0709   0835 DA            push d
0710   0836                            
0711   0836                            
0712   0836                            
0713   0836 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0714   0839 D7            push a
0715   083A DA            push d
0716   083B                            
0717   083B FD 2E 01 00   mov32 cb, $00000001
0717   083F 00 00 
0718   0841 E7            pop d
0719   0842 5A            add d, b
0720   0843 E4            pop a
0721   0844 32            mov bl, [d]
0722   0845 A7 00         mov bh, 0
0723   0847 38 00 00      mov c, 0
0724   084A D7            push a
0725   084B 11            mov a, b
0726   084C FD 2E 0F 00   mov32 cb, $0000000f
0726   0850 00 00 
0727   0852 FD 92         and b, a ; &
0728   0854 E4            pop a
0729   0855             ; --- START SHIFT
0730   0855 D7            push a
0731   0856 11            mov a, b
0732   0857 FD 2E 02 00   mov32 cb, $00000002
0732   085B 00 00 
0733   085D FD 39         mov c, b
0734   085F 9D            shl a, cl
0735   0860 27            mov b, a
0736   0861 E4            pop a
0737   0862             ; --- END SHIFT
0738   0862             ; --- START TERMS
0739   0862 D7            push a
0740   0863 11            mov a, b
0741   0864                            
0742   0864                            
0743   0864 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0744   0867 D7            push a
0745   0868 DA            push d
0746   0869                            
0747   0869 FD 2E 02 00   mov32 cb, $00000002
0747   086D 00 00 
0748   086F E7            pop d
0749   0870 5A            add d, b
0750   0871 E4            pop a
0751   0872 32            mov bl, [d]
0752   0873 A7 00         mov bh, 0
0753   0875 38 00 00      mov c, 0
0754   0878 D7            push a
0755   0879 11            mov a, b
0756   087A FD 2E C0 00   mov32 cb, $000000c0
0756   087E 00 00 
0757   0880 FD 92         and b, a ; &
0758   0882 E4            pop a
0759   0883             ; --- START SHIFT
0760   0883 D7            push a
0761   0884 11            mov a, b
0762   0885 FD 2E 06 00   mov32 cb, $00000006
0762   0889 00 00 
0763   088B FD 39         mov c, b
0764   088D A5            ashr a, cl
0765   088E 27            mov b, a
0766   088F E4            pop a
0767   0890             ; --- END SHIFT
0768   0890 56            add b, a
0769   0891 E4            pop a
0770   0892             ; --- END TERMS
0771   0892 E7            pop d
0772   0893 FD 3E         mov [d], bl
0773   0895             ; for (k = 0; k < i + 1; k++) { 
0774   0895             _for6_init:
0775   0895 FA FB FF      lea d, [bp + -5] ; $k
0776   0898 DA            push d
0777   0899                            
0778   0899 FD 2E 00 00   mov32 cb, $00000000
0778   089D 00 00 
0779   089F E7            pop d
0780   08A0 FD 43         mov [d], b
0781   08A2             _for6_cond:
0782   08A2                            
0783   08A2 FA FB FF      lea d, [bp + -5] ; $k
0784   08A5 2A            mov b, [d]
0785   08A6 38 00 00      mov c, 0
0786   08A9             ; --- START RELATIONAL
0787   08A9 D7            push a
0788   08AA 11            mov a, b
0789   08AB FA FF FF      lea d, [bp + -1] ; $i
0790   08AE 2A            mov b, [d]
0791   08AF 38 00 00      mov c, 0
0792   08B2             ; --- START TERMS
0793   08B2 D7            push a
0794   08B3 11            mov a, b
0795   08B4 FD 2E 01 00   mov32 cb, $00000001
0795   08B8 00 00 
0796   08BA 56            add b, a
0797   08BB E4            pop a
0798   08BC             ; --- END TERMS
0799   08BC B0            cmp a, b
0800   08BD FD 73         slt ; < (signed)
0801   08BF E4            pop a
0802   08C0             ; --- END RELATIONAL
0803   08C0 C0 00 00      cmp b, 0
0804   08C3 C6 22 09      je _for6_exit
0805   08C6             _for6_block:
0806   08C6             ; output[j++] = base64_table[output_buffer[k]]; 
0807   08C6 FA 07 00      lea d, [bp + 7] ; $output
0808   08C9 FD 2A         mov d, [d]
0809   08CB D7            push a
0810   08CC DA            push d
0811   08CD                            
0812   08CD FA FD FF      lea d, [bp + -3] ; $j
0813   08D0 2A            mov b, [d]
0814   08D1 38 00 00      mov c, 0
0815   08D4 11            mov a, b
0816   08D5 FD 77         inc b
0817   08D7 FA FD FF      lea d, [bp + -3] ; $j
0818   08DA FD 43         mov [d], b
0819   08DC 27            mov b, a
0820   08DD E7            pop d
0821   08DE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0822   08E2 E4            pop a
0823   08E3 DA            push d
0824   08E4                            
0825   08E4 3B AD 1A      mov d, _base64_table ; $base64_table
0826   08E7 FD 2A         mov d, [d]
0827   08E9 D7            push a
0828   08EA DA            push d
0829   08EB                            
0830   08EB FA F2 FF      lea d, [bp + -14] ; $output_buffer
0831   08EE D7            push a
0832   08EF DA            push d
0833   08F0                            
0834   08F0 FA FB FF      lea d, [bp + -5] ; $k
0835   08F3 2A            mov b, [d]
0836   08F4 38 00 00      mov c, 0
0837   08F7 E7            pop d
0838   08F8 5A            add d, b
0839   08F9 E4            pop a
0840   08FA 32            mov bl, [d]
0841   08FB A7 00         mov bh, 0
0842   08FD 38 00 00      mov c, 0
0843   0900 E7            pop d
0844   0901 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0845   0905 E4            pop a
0846   0906 32            mov bl, [d]
0847   0907 A7 00         mov bh, 0
0848   0909 38 00 00      mov c, 0
0849   090C E7            pop d
0850   090D FD 3E         mov [d], bl
0851   090F             _for6_update:
0852   090F                            
0853   090F FA FB FF      lea d, [bp + -5] ; $k
0854   0912 2A            mov b, [d]
0855   0913 38 00 00      mov c, 0
0856   0916 11            mov a, b
0857   0917 FD 77         inc b
0858   0919 FA FB FF      lea d, [bp + -5] ; $k
0859   091C FD 43         mov [d], b
0860   091E 27            mov b, a
0861   091F 0A A2 08      jmp _for6_cond
0862   0922             _for6_exit:
0863   0922             ; while (i++ < 3) { 
0864   0922             _while7_cond:
0865   0922                            
0866   0922 FA FF FF      lea d, [bp + -1] ; $i
0867   0925 2A            mov b, [d]
0868   0926 38 00 00      mov c, 0
0869   0929 11            mov a, b
0870   092A FD 77         inc b
0871   092C FA FF FF      lea d, [bp + -1] ; $i
0872   092F FD 43         mov [d], b
0873   0931 27            mov b, a
0874   0932             ; --- START RELATIONAL
0875   0932 D7            push a
0876   0933 11            mov a, b
0877   0934 FD 2E 03 00   mov32 cb, $00000003
0877   0938 00 00 
0878   093A B0            cmp a, b
0879   093B FD 73         slt ; < (signed)
0880   093D E4            pop a
0881   093E             ; --- END RELATIONAL
0882   093E C0 00 00      cmp b, 0
0883   0941 C6 6E 09      je _while7_exit
0884   0944             _while7_block:
0885   0944             ; output[j++] = '='; 
0886   0944 FA 07 00      lea d, [bp + 7] ; $output
0887   0947 FD 2A         mov d, [d]
0888   0949 D7            push a
0889   094A DA            push d
0890   094B                            
0891   094B FA FD FF      lea d, [bp + -3] ; $j
0892   094E 2A            mov b, [d]
0893   094F 38 00 00      mov c, 0
0894   0952 11            mov a, b
0895   0953 FD 77         inc b
0896   0955 FA FD FF      lea d, [bp + -3] ; $j
0897   0958 FD 43         mov [d], b
0898   095A 27            mov b, a
0899   095B E7            pop d
0900   095C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0901   0960 E4            pop a
0902   0961 DA            push d
0903   0962                            
0904   0962 FD 2E 3D 00   mov32 cb, $0000003d
0904   0966 00 00 
0905   0968 E7            pop d
0906   0969 FD 3E         mov [d], bl
0907   096B 0A 22 09      jmp _while7_cond
0908   096E             _while7_exit:
0909   096E 0A 71 09      jmp _if4_exit
0910   0971             _if4_exit:
0911   0971             ; output[j] = '\0'; 
0912   0971 FA 07 00      lea d, [bp + 7] ; $output
0913   0974 FD 2A         mov d, [d]
0914   0976 D7            push a
0915   0977 DA            push d
0916   0978                            
0917   0978 FA FD FF      lea d, [bp + -3] ; $j
0918   097B 2A            mov b, [d]
0919   097C 38 00 00      mov c, 0
0920   097F E7            pop d
0921   0980 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0922   0984 E4            pop a
0923   0985 DA            push d
0924   0986                            
0925   0986 FD 2E 00 00   mov32 cb, $00000000
0925   098A 00 00 
0926   098C E7            pop d
0927   098D FD 3E         mov [d], bl
0928   098F F9            leave
0929   0990 09            ret
0930   0991             
0931   0991             base64_char_value:
0932   0991 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0933   0994             ; if (c >= 'A' && c <= 'Z') return c - 'A'; 
0934   0994             _if8_cond:
0935   0994                            
0936   0994 FA 05 00      lea d, [bp + 5] ; $c
0937   0997 32            mov bl, [d]
0938   0998 A7 00         mov bh, 0
0939   099A 38 00 00      mov c, 0
0940   099D             ; --- START RELATIONAL
0941   099D D7            push a
0942   099E 11            mov a, b
0943   099F FD 2E 41 00   mov32 cb, $00000041
0943   09A3 00 00 
0944   09A5 B0            cmp a, b
0945   09A6 FD 80         sge ; >=
0946   09A8 E4            pop a
0947   09A9             ; --- END RELATIONAL
0948   09A9             ; --- START LOGICAL AND
0949   09A9 D7            push a
0950   09AA 11            mov a, b
0951   09AB FA 05 00      lea d, [bp + 5] ; $c
0952   09AE 32            mov bl, [d]
0953   09AF A7 00         mov bh, 0
0954   09B1 38 00 00      mov c, 0
0955   09B4             ; --- START RELATIONAL
0956   09B4 D7            push a
0957   09B5 11            mov a, b
0958   09B6 FD 2E 5A 00   mov32 cb, $0000005a
0958   09BA 00 00 
0959   09BC B0            cmp a, b
0960   09BD FD 74         sle ; <= (signed)
0961   09BF E4            pop a
0962   09C0             ; --- END RELATIONAL
0963   09C0 FD A7         sand a, b
0964   09C2 E4            pop a
0965   09C3             ; --- END LOGICAL AND
0966   09C3 C0 00 00      cmp b, 0
0967   09C6 C6 E2 09      je _if8_exit
0968   09C9             _if8_TRUE:
0969   09C9             ; return c - 'A'; 
0970   09C9                            
0971   09C9 FA 05 00      lea d, [bp + 5] ; $c
0972   09CC 32            mov bl, [d]
0973   09CD A7 00         mov bh, 0
0974   09CF 38 00 00      mov c, 0
0975   09D2             ; --- START TERMS
0976   09D2 D7            push a
0977   09D3 11            mov a, b
0978   09D4 FD 2E 41 00   mov32 cb, $00000041
0978   09D8 00 00 
0979   09DA 60            sub a, b
0980   09DB 27            mov b, a
0981   09DC E4            pop a
0982   09DD             ; --- END TERMS
0983   09DD F9            leave
0984   09DE 09            ret
0985   09DF 0A E2 09      jmp _if8_exit
0986   09E2             _if8_exit:
0987   09E2             ; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
0988   09E2             _if9_cond:
0989   09E2                             
0990   09E2 FA 05 00      lea d, [bp + 5] ; $c
0991   09E5 32            mov bl, [d]
0992   09E6 A7 00         mov bh, 0
0993   09E8 38 00 00      mov c, 0
0994   09EB             ; --- START RELATIONAL
0995   09EB D7            push a
0996   09EC 11            mov a, b
0997   09ED FD 2E 61 00   mov32 cb, $00000061
0997   09F1 00 00 
0998   09F3 B0            cmp a, b
0999   09F4 FD 80         sge ; >=
1000   09F6 E4            pop a
1001   09F7             ; --- END RELATIONAL
1002   09F7             ; --- START LOGICAL AND
1003   09F7 D7            push a
1004   09F8 11            mov a, b
1005   09F9 FA 05 00      lea d, [bp + 5] ; $c
1006   09FC 32            mov bl, [d]
1007   09FD A7 00         mov bh, 0
1008   09FF 38 00 00      mov c, 0
1009   0A02             ; --- START RELATIONAL
1010   0A02 D7            push a
1011   0A03 11            mov a, b
1012   0A04 FD 2E 7A 00   mov32 cb, $0000007a
1012   0A08 00 00 
1013   0A0A B0            cmp a, b
1014   0A0B FD 74         sle ; <= (signed)
1015   0A0D E4            pop a
1016   0A0E             ; --- END RELATIONAL
1017   0A0E FD A7         sand a, b
1018   0A10 E4            pop a
1019   0A11             ; --- END LOGICAL AND
1020   0A11 C0 00 00      cmp b, 0
1021   0A14 C6 38 0A      je _if9_exit
1022   0A17             _if9_TRUE:
1023   0A17             ; return c - 'a' + 26; 
1024   0A17                             
1025   0A17 FA 05 00      lea d, [bp + 5] ; $c
1026   0A1A 32            mov bl, [d]
1027   0A1B A7 00         mov bh, 0
1028   0A1D 38 00 00      mov c, 0
1029   0A20             ; --- START TERMS
1030   0A20 D7            push a
1031   0A21 11            mov a, b
1032   0A22 FD 2E 61 00   mov32 cb, $00000061
1032   0A26 00 00 
1033   0A28 60            sub a, b
1034   0A29 27            mov b, a
1035   0A2A 11            mov a, b
1036   0A2B FD 2E 1A 00   mov32 cb, $0000001a
1036   0A2F 00 00 
1037   0A31 56            add b, a
1038   0A32 E4            pop a
1039   0A33             ; --- END TERMS
1040   0A33 F9            leave
1041   0A34 09            ret
1042   0A35 0A 38 0A      jmp _if9_exit
1043   0A38             _if9_exit:
1044   0A38             ; if (c >= '0' && c <= '9') return c - '0' + 52; 
1045   0A38             _if10_cond:
1046   0A38                             
1047   0A38 FA 05 00      lea d, [bp + 5] ; $c
1048   0A3B 32            mov bl, [d]
1049   0A3C A7 00         mov bh, 0
1050   0A3E 38 00 00      mov c, 0
1051   0A41             ; --- START RELATIONAL
1052   0A41 D7            push a
1053   0A42 11            mov a, b
1054   0A43 FD 2E 30 00   mov32 cb, $00000030
1054   0A47 00 00 
1055   0A49 B0            cmp a, b
1056   0A4A FD 80         sge ; >=
1057   0A4C E4            pop a
1058   0A4D             ; --- END RELATIONAL
1059   0A4D             ; --- START LOGICAL AND
1060   0A4D D7            push a
1061   0A4E 11            mov a, b
1062   0A4F FA 05 00      lea d, [bp + 5] ; $c
1063   0A52 32            mov bl, [d]
1064   0A53 A7 00         mov bh, 0
1065   0A55 38 00 00      mov c, 0
1066   0A58             ; --- START RELATIONAL
1067   0A58 D7            push a
1068   0A59 11            mov a, b
1069   0A5A FD 2E 39 00   mov32 cb, $00000039
1069   0A5E 00 00 
1070   0A60 B0            cmp a, b
1071   0A61 FD 74         sle ; <= (signed)
1072   0A63 E4            pop a
1073   0A64             ; --- END RELATIONAL
1074   0A64 FD A7         sand a, b
1075   0A66 E4            pop a
1076   0A67             ; --- END LOGICAL AND
1077   0A67 C0 00 00      cmp b, 0
1078   0A6A C6 8E 0A      je _if10_exit
1079   0A6D             _if10_TRUE:
1080   0A6D             ; return c - '0' + 52; 
1081   0A6D                             
1082   0A6D FA 05 00      lea d, [bp + 5] ; $c
1083   0A70 32            mov bl, [d]
1084   0A71 A7 00         mov bh, 0
1085   0A73 38 00 00      mov c, 0
1086   0A76             ; --- START TERMS
1087   0A76 D7            push a
1088   0A77 11            mov a, b
1089   0A78 FD 2E 30 00   mov32 cb, $00000030
1089   0A7C 00 00 
1090   0A7E 60            sub a, b
1091   0A7F 27            mov b, a
1092   0A80 11            mov a, b
1093   0A81 FD 2E 34 00   mov32 cb, $00000034
1093   0A85 00 00 
1094   0A87 56            add b, a
1095   0A88 E4            pop a
1096   0A89             ; --- END TERMS
1097   0A89 F9            leave
1098   0A8A 09            ret
1099   0A8B 0A 8E 0A      jmp _if10_exit
1100   0A8E             _if10_exit:
1101   0A8E             ; if (c == '+') return 62; 
1102   0A8E             _if11_cond:
1103   0A8E                             
1104   0A8E FA 05 00      lea d, [bp + 5] ; $c
1105   0A91 32            mov bl, [d]
1106   0A92 A7 00         mov bh, 0
1107   0A94 38 00 00      mov c, 0
1108   0A97             ; --- START RELATIONAL
1109   0A97 D7            push a
1110   0A98 11            mov a, b
1111   0A99 FD 2E 2B 00   mov32 cb, $0000002b
1111   0A9D 00 00 
1112   0A9F B0            cmp a, b
1113   0AA0 FD 71         seq ; ==
1114   0AA2 E4            pop a
1115   0AA3             ; --- END RELATIONAL
1116   0AA3 C0 00 00      cmp b, 0
1117   0AA6 C6 B4 0A      je _if11_exit
1118   0AA9             _if11_TRUE:
1119   0AA9             ; return 62; 
1120   0AA9                             
1121   0AA9 FD 2E 3E 00   mov32 cb, $0000003e
1121   0AAD 00 00 
1122   0AAF F9            leave
1123   0AB0 09            ret
1124   0AB1 0A B4 0A      jmp _if11_exit
1125   0AB4             _if11_exit:
1126   0AB4             ; if (c == '/') return 63; 
1127   0AB4             _if12_cond:
1128   0AB4                             
1129   0AB4 FA 05 00      lea d, [bp + 5] ; $c
1130   0AB7 32            mov bl, [d]
1131   0AB8 A7 00         mov bh, 0
1132   0ABA 38 00 00      mov c, 0
1133   0ABD             ; --- START RELATIONAL
1134   0ABD D7            push a
1135   0ABE 11            mov a, b
1136   0ABF FD 2E 2F 00   mov32 cb, $0000002f
1136   0AC3 00 00 
1137   0AC5 B0            cmp a, b
1138   0AC6 FD 71         seq ; ==
1139   0AC8 E4            pop a
1140   0AC9             ; --- END RELATIONAL
1141   0AC9 C0 00 00      cmp b, 0
1142   0ACC C6 DA 0A      je _if12_exit
1143   0ACF             _if12_TRUE:
1144   0ACF             ; return 63; 
1145   0ACF                             
1146   0ACF FD 2E 3F 00   mov32 cb, $0000003f
1146   0AD3 00 00 
1147   0AD5 F9            leave
1148   0AD6 09            ret
1149   0AD7 0A DA 0A      jmp _if12_exit
1150   0ADA             _if12_exit:
1151   0ADA             ; return -1; 
1152   0ADA                             
1153   0ADA FD 2E FF FF   mov32 cb, $ffffffff
1153   0ADE FF FF 
1154   0AE0 F9            leave
1155   0AE1 09            ret
1156   0AE2             
1157   0AE2             base64_decode:
1158   0AE2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1159   0AE5             ; int i = 0, j = 0, k = 0; 
1160   0AE5 52 02 00      sub sp, 2
1161   0AE8             ; --- START LOCAL VAR INITIALIZATION
1162   0AE8 FA FF FF      lea d, [bp + -1] ; $i
1163   0AEB DA            push d
1164   0AEC                             
1165   0AEC FD 2E 00 00   mov32 cb, $00000000
1165   0AF0 00 00 
1166   0AF2 E7            pop d
1167   0AF3 FD 43         mov [d], b
1168   0AF5             ; --- END LOCAL VAR INITIALIZATION
1169   0AF5 52 02 00      sub sp, 2
1170   0AF8             ; --- START LOCAL VAR INITIALIZATION
1171   0AF8 FA FD FF      lea d, [bp + -3] ; $j
1172   0AFB DA            push d
1173   0AFC                             
1174   0AFC FD 2E 00 00   mov32 cb, $00000000
1174   0B00 00 00 
1175   0B02 E7            pop d
1176   0B03 FD 43         mov [d], b
1177   0B05             ; --- END LOCAL VAR INITIALIZATION
1178   0B05 52 02 00      sub sp, 2
1179   0B08             ; --- START LOCAL VAR INITIALIZATION
1180   0B08 FA FB FF      lea d, [bp + -5] ; $k
1181   0B0B DA            push d
1182   0B0C                             
1183   0B0C FD 2E 00 00   mov32 cb, $00000000
1183   0B10 00 00 
1184   0B12 E7            pop d
1185   0B13 FD 43         mov [d], b
1186   0B15             ; --- END LOCAL VAR INITIALIZATION
1187   0B15             ; int input_len; 
1188   0B15 52 02 00      sub sp, 2
1189   0B18             ; unsigned char input_buffer[4]; 
1190   0B18 52 04 00      sub sp, 4
1191   0B1B             ; unsigned char output_buffer[3]; 
1192   0B1B 52 03 00      sub sp, 3
1193   0B1E             ; input_len = strlen(input); 
1194   0B1E FA F9 FF      lea d, [bp + -7] ; $input_len
1195   0B21 DA            push d
1196   0B22                             
1197   0B22             ; --- START FUNCTION CALL
1198   0B22                             
1199   0B22 FA 05 00      lea d, [bp + 5] ; $input
1200   0B25 2A            mov b, [d]
1201   0B26 38 00 00      mov c, 0
1202   0B29 FD AB         swp b
1203   0B2B D8            push b
1204   0B2C 07 11 1A      call strlen
1205   0B2F 51 02 00      add sp, 2
1206   0B32             ; --- END FUNCTION CALL
1207   0B32 E7            pop d
1208   0B33 FD 43         mov [d], b
1209   0B35             ; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1210   0B35             _while13_cond:
1211   0B35                             
1212   0B35 FA F9 FF      lea d, [bp + -7] ; $input_len
1213   0B38 2A            mov b, [d]
1214   0B39 38 00 00      mov c, 0
1215   0B3C 11            mov a, b
1216   0B3D FD 7D         dec b
1217   0B3F FA F9 FF      lea d, [bp + -7] ; $input_len
1218   0B42 FD 43         mov [d], b
1219   0B44 27            mov b, a
1220   0B45             ; --- START LOGICAL AND
1221   0B45 D7            push a
1222   0B46 11            mov a, b
1223   0B47                             
1224   0B47 FA 05 00      lea d, [bp + 5] ; $input
1225   0B4A FD 2A         mov d, [d]
1226   0B4C D7            push a
1227   0B4D DA            push d
1228   0B4E                             
1229   0B4E FA FB FF      lea d, [bp + -5] ; $k
1230   0B51 2A            mov b, [d]
1231   0B52 38 00 00      mov c, 0
1232   0B55 E7            pop d
1233   0B56 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1234   0B5A E4            pop a
1235   0B5B 32            mov bl, [d]
1236   0B5C A7 00         mov bh, 0
1237   0B5E 38 00 00      mov c, 0
1238   0B61             ; --- START RELATIONAL
1239   0B61 D7            push a
1240   0B62 11            mov a, b
1241   0B63 FD 2E 3D 00   mov32 cb, $0000003d
1241   0B67 00 00 
1242   0B69 B0            cmp a, b
1243   0B6A FD 72         sneq ; !=
1244   0B6C E4            pop a
1245   0B6D             ; --- END RELATIONAL
1246   0B6D FD A7         sand a, b
1247   0B6F 11            mov a, b
1248   0B70             ; --- START FUNCTION CALL
1249   0B70                             
1250   0B70 FA 05 00      lea d, [bp + 5] ; $input
1251   0B73 FD 2A         mov d, [d]
1252   0B75 D7            push a
1253   0B76 DA            push d
1254   0B77                             
1255   0B77 FA FB FF      lea d, [bp + -5] ; $k
1256   0B7A 2A            mov b, [d]
1257   0B7B 38 00 00      mov c, 0
1258   0B7E E7            pop d
1259   0B7F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1260   0B83 E4            pop a
1261   0B84 32            mov bl, [d]
1262   0B85 A7 00         mov bh, 0
1263   0B87 38 00 00      mov c, 0
1264   0B8A DD            push bl
1265   0B8B 07 91 09      call base64_char_value
1266   0B8E 51 01 00      add sp, 1
1267   0B91             ; --- END FUNCTION CALL
1268   0B91             ; --- START RELATIONAL
1269   0B91 D7            push a
1270   0B92 11            mov a, b
1271   0B93 FD 2E FF FF   mov32 cb, $ffffffff
1271   0B97 FF FF 
1272   0B99 B0            cmp a, b
1273   0B9A FD 72         sneq ; !=
1274   0B9C E4            pop a
1275   0B9D             ; --- END RELATIONAL
1276   0B9D FD A7         sand a, b
1277   0B9F E4            pop a
1278   0BA0             ; --- END LOGICAL AND
1279   0BA0 C0 00 00      cmp b, 0
1280   0BA3 C6 0F 0E      je _while13_exit
1281   0BA6             _while13_block:
1282   0BA6             ; input_buffer[i++] = input[k++]; 
1283   0BA6 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1284   0BA9 D7            push a
1285   0BAA DA            push d
1286   0BAB                             
1287   0BAB FA FF FF      lea d, [bp + -1] ; $i
1288   0BAE 2A            mov b, [d]
1289   0BAF 38 00 00      mov c, 0
1290   0BB2 11            mov a, b
1291   0BB3 FD 77         inc b
1292   0BB5 FA FF FF      lea d, [bp + -1] ; $i
1293   0BB8 FD 43         mov [d], b
1294   0BBA 27            mov b, a
1295   0BBB E7            pop d
1296   0BBC 5A            add d, b
1297   0BBD E4            pop a
1298   0BBE DA            push d
1299   0BBF                             
1300   0BBF FA 05 00      lea d, [bp + 5] ; $input
1301   0BC2 FD 2A         mov d, [d]
1302   0BC4 D7            push a
1303   0BC5 DA            push d
1304   0BC6                             
1305   0BC6 FA FB FF      lea d, [bp + -5] ; $k
1306   0BC9 2A            mov b, [d]
1307   0BCA 38 00 00      mov c, 0
1308   0BCD 11            mov a, b
1309   0BCE FD 77         inc b
1310   0BD0 FA FB FF      lea d, [bp + -5] ; $k
1311   0BD3 FD 43         mov [d], b
1312   0BD5 27            mov b, a
1313   0BD6 E7            pop d
1314   0BD7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1315   0BDB E4            pop a
1316   0BDC 32            mov bl, [d]
1317   0BDD A7 00         mov bh, 0
1318   0BDF 38 00 00      mov c, 0
1319   0BE2 E7            pop d
1320   0BE3 FD 3E         mov [d], bl
1321   0BE5             ; if (i == 4) { 
1322   0BE5             _if14_cond:
1323   0BE5                             
1324   0BE5 FA FF FF      lea d, [bp + -1] ; $i
1325   0BE8 2A            mov b, [d]
1326   0BE9 38 00 00      mov c, 0
1327   0BEC             ; --- START RELATIONAL
1328   0BEC D7            push a
1329   0BED 11            mov a, b
1330   0BEE FD 2E 04 00   mov32 cb, $00000004
1330   0BF2 00 00 
1331   0BF4 B0            cmp a, b
1332   0BF5 FD 71         seq ; ==
1333   0BF7 E4            pop a
1334   0BF8             ; --- END RELATIONAL
1335   0BF8 C0 00 00      cmp b, 0
1336   0BFB C6 0C 0E      je _if14_exit
1337   0BFE             _if14_TRUE:
1338   0BFE             ; for (i = 0; i < 4; i++) { 
1339   0BFE             _for15_init:
1340   0BFE FA FF FF      lea d, [bp + -1] ; $i
1341   0C01 DA            push d
1342   0C02                             
1343   0C02 FD 2E 00 00   mov32 cb, $00000000
1343   0C06 00 00 
1344   0C08 E7            pop d
1345   0C09 FD 43         mov [d], b
1346   0C0B             _for15_cond:
1347   0C0B                             
1348   0C0B FA FF FF      lea d, [bp + -1] ; $i
1349   0C0E 2A            mov b, [d]
1350   0C0F 38 00 00      mov c, 0
1351   0C12             ; --- START RELATIONAL
1352   0C12 D7            push a
1353   0C13 11            mov a, b
1354   0C14 FD 2E 04 00   mov32 cb, $00000004
1354   0C18 00 00 
1355   0C1A B0            cmp a, b
1356   0C1B FD 73         slt ; < (signed)
1357   0C1D E4            pop a
1358   0C1E             ; --- END RELATIONAL
1359   0C1E C0 00 00      cmp b, 0
1360   0C21 C6 66 0C      je _for15_exit
1361   0C24             _for15_block:
1362   0C24             ; input_buffer[i] = base64_char_value(input_buffer[i]); 
1363   0C24 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1364   0C27 D7            push a
1365   0C28 DA            push d
1366   0C29                             
1367   0C29 FA FF FF      lea d, [bp + -1] ; $i
1368   0C2C 2A            mov b, [d]
1369   0C2D 38 00 00      mov c, 0
1370   0C30 E7            pop d
1371   0C31 5A            add d, b
1372   0C32 E4            pop a
1373   0C33 DA            push d
1374   0C34                             
1375   0C34             ; --- START FUNCTION CALL
1376   0C34                             
1377   0C34 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1378   0C37 D7            push a
1379   0C38 DA            push d
1380   0C39                             
1381   0C39 FA FF FF      lea d, [bp + -1] ; $i
1382   0C3C 2A            mov b, [d]
1383   0C3D 38 00 00      mov c, 0
1384   0C40 E7            pop d
1385   0C41 5A            add d, b
1386   0C42 E4            pop a
1387   0C43 32            mov bl, [d]
1388   0C44 A7 00         mov bh, 0
1389   0C46 38 00 00      mov c, 0
1390   0C49 DD            push bl
1391   0C4A 07 91 09      call base64_char_value
1392   0C4D 51 01 00      add sp, 1
1393   0C50             ; --- END FUNCTION CALL
1394   0C50 E7            pop d
1395   0C51 FD 3E         mov [d], bl
1396   0C53             _for15_update:
1397   0C53                             
1398   0C53 FA FF FF      lea d, [bp + -1] ; $i
1399   0C56 2A            mov b, [d]
1400   0C57 38 00 00      mov c, 0
1401   0C5A 11            mov a, b
1402   0C5B FD 77         inc b
1403   0C5D FA FF FF      lea d, [bp + -1] ; $i
1404   0C60 FD 43         mov [d], b
1405   0C62 27            mov b, a
1406   0C63 0A 0B 0C      jmp _for15_cond
1407   0C66             _for15_exit:
1408   0C66             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1409   0C66 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1410   0C69 D7            push a
1411   0C6A DA            push d
1412   0C6B                             
1413   0C6B FD 2E 00 00   mov32 cb, $00000000
1413   0C6F 00 00 
1414   0C71 E7            pop d
1415   0C72 5A            add d, b
1416   0C73 E4            pop a
1417   0C74 DA            push d
1418   0C75                             
1419   0C75                             
1420   0C75 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1421   0C78 D7            push a
1422   0C79 DA            push d
1423   0C7A                             
1424   0C7A FD 2E 00 00   mov32 cb, $00000000
1424   0C7E 00 00 
1425   0C80 E7            pop d
1426   0C81 5A            add d, b
1427   0C82 E4            pop a
1428   0C83 32            mov bl, [d]
1429   0C84 A7 00         mov bh, 0
1430   0C86 38 00 00      mov c, 0
1431   0C89             ; --- START SHIFT
1432   0C89 D7            push a
1433   0C8A 11            mov a, b
1434   0C8B FD 2E 02 00   mov32 cb, $00000002
1434   0C8F 00 00 
1435   0C91 FD 39         mov c, b
1436   0C93 9D            shl a, cl
1437   0C94 27            mov b, a
1438   0C95 E4            pop a
1439   0C96             ; --- END SHIFT
1440   0C96             ; --- START TERMS
1441   0C96 D7            push a
1442   0C97 11            mov a, b
1443   0C98                             
1444   0C98                             
1445   0C98 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1446   0C9B D7            push a
1447   0C9C DA            push d
1448   0C9D                             
1449   0C9D FD 2E 01 00   mov32 cb, $00000001
1449   0CA1 00 00 
1450   0CA3 E7            pop d
1451   0CA4 5A            add d, b
1452   0CA5 E4            pop a
1453   0CA6 32            mov bl, [d]
1454   0CA7 A7 00         mov bh, 0
1455   0CA9 38 00 00      mov c, 0
1456   0CAC D7            push a
1457   0CAD 11            mov a, b
1458   0CAE FD 2E 30 00   mov32 cb, $00000030
1458   0CB2 00 00 
1459   0CB4 FD 92         and b, a ; &
1460   0CB6 E4            pop a
1461   0CB7             ; --- START SHIFT
1462   0CB7 D7            push a
1463   0CB8 11            mov a, b
1464   0CB9 FD 2E 04 00   mov32 cb, $00000004
1464   0CBD 00 00 
1465   0CBF FD 39         mov c, b
1466   0CC1 A5            ashr a, cl
1467   0CC2 27            mov b, a
1468   0CC3 E4            pop a
1469   0CC4             ; --- END SHIFT
1470   0CC4 56            add b, a
1471   0CC5 E4            pop a
1472   0CC6             ; --- END TERMS
1473   0CC6 E7            pop d
1474   0CC7 FD 3E         mov [d], bl
1475   0CC9             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1476   0CC9 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1477   0CCC D7            push a
1478   0CCD DA            push d
1479   0CCE                             
1480   0CCE FD 2E 01 00   mov32 cb, $00000001
1480   0CD2 00 00 
1481   0CD4 E7            pop d
1482   0CD5 5A            add d, b
1483   0CD6 E4            pop a
1484   0CD7 DA            push d
1485   0CD8                             
1486   0CD8                             
1487   0CD8                             
1488   0CD8 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1489   0CDB D7            push a
1490   0CDC DA            push d
1491   0CDD                             
1492   0CDD FD 2E 01 00   mov32 cb, $00000001
1492   0CE1 00 00 
1493   0CE3 E7            pop d
1494   0CE4 5A            add d, b
1495   0CE5 E4            pop a
1496   0CE6 32            mov bl, [d]
1497   0CE7 A7 00         mov bh, 0
1498   0CE9 38 00 00      mov c, 0
1499   0CEC D7            push a
1500   0CED 11            mov a, b
1501   0CEE FD 2E 0F 00   mov32 cb, $0000000f
1501   0CF2 00 00 
1502   0CF4 FD 92         and b, a ; &
1503   0CF6 E4            pop a
1504   0CF7             ; --- START SHIFT
1505   0CF7 D7            push a
1506   0CF8 11            mov a, b
1507   0CF9 FD 2E 04 00   mov32 cb, $00000004
1507   0CFD 00 00 
1508   0CFF FD 39         mov c, b
1509   0D01 9D            shl a, cl
1510   0D02 27            mov b, a
1511   0D03 E4            pop a
1512   0D04             ; --- END SHIFT
1513   0D04             ; --- START TERMS
1514   0D04 D7            push a
1515   0D05 11            mov a, b
1516   0D06                             
1517   0D06                             
1518   0D06 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1519   0D09 D7            push a
1520   0D0A DA            push d
1521   0D0B                             
1522   0D0B FD 2E 02 00   mov32 cb, $00000002
1522   0D0F 00 00 
1523   0D11 E7            pop d
1524   0D12 5A            add d, b
1525   0D13 E4            pop a
1526   0D14 32            mov bl, [d]
1527   0D15 A7 00         mov bh, 0
1528   0D17 38 00 00      mov c, 0
1529   0D1A D7            push a
1530   0D1B 11            mov a, b
1531   0D1C FD 2E 3C 00   mov32 cb, $0000003c
1531   0D20 00 00 
1532   0D22 FD 92         and b, a ; &
1533   0D24 E4            pop a
1534   0D25             ; --- START SHIFT
1535   0D25 D7            push a
1536   0D26 11            mov a, b
1537   0D27 FD 2E 02 00   mov32 cb, $00000002
1537   0D2B 00 00 
1538   0D2D FD 39         mov c, b
1539   0D2F A5            ashr a, cl
1540   0D30 27            mov b, a
1541   0D31 E4            pop a
1542   0D32             ; --- END SHIFT
1543   0D32 56            add b, a
1544   0D33 E4            pop a
1545   0D34             ; --- END TERMS
1546   0D34 E7            pop d
1547   0D35 FD 3E         mov [d], bl
1548   0D37             ; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
1549   0D37 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1550   0D3A D7            push a
1551   0D3B DA            push d
1552   0D3C                             
1553   0D3C FD 2E 02 00   mov32 cb, $00000002
1553   0D40 00 00 
1554   0D42 E7            pop d
1555   0D43 5A            add d, b
1556   0D44 E4            pop a
1557   0D45 DA            push d
1558   0D46                             
1559   0D46                             
1560   0D46                             
1561   0D46 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1562   0D49 D7            push a
1563   0D4A DA            push d
1564   0D4B                             
1565   0D4B FD 2E 02 00   mov32 cb, $00000002
1565   0D4F 00 00 
1566   0D51 E7            pop d
1567   0D52 5A            add d, b
1568   0D53 E4            pop a
1569   0D54 32            mov bl, [d]
1570   0D55 A7 00         mov bh, 0
1571   0D57 38 00 00      mov c, 0
1572   0D5A D7            push a
1573   0D5B 11            mov a, b
1574   0D5C FD 2E 03 00   mov32 cb, $00000003
1574   0D60 00 00 
1575   0D62 FD 92         and b, a ; &
1576   0D64 E4            pop a
1577   0D65             ; --- START SHIFT
1578   0D65 D7            push a
1579   0D66 11            mov a, b
1580   0D67 FD 2E 06 00   mov32 cb, $00000006
1580   0D6B 00 00 
1581   0D6D FD 39         mov c, b
1582   0D6F 9D            shl a, cl
1583   0D70 27            mov b, a
1584   0D71 E4            pop a
1585   0D72             ; --- END SHIFT
1586   0D72             ; --- START TERMS
1587   0D72 D7            push a
1588   0D73 11            mov a, b
1589   0D74 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1590   0D77 D7            push a
1591   0D78 DA            push d
1592   0D79                             
1593   0D79 FD 2E 03 00   mov32 cb, $00000003
1593   0D7D 00 00 
1594   0D7F E7            pop d
1595   0D80 5A            add d, b
1596   0D81 E4            pop a
1597   0D82 32            mov bl, [d]
1598   0D83 A7 00         mov bh, 0
1599   0D85 38 00 00      mov c, 0
1600   0D88 56            add b, a
1601   0D89 E4            pop a
1602   0D8A             ; --- END TERMS
1603   0D8A E7            pop d
1604   0D8B FD 3E         mov [d], bl
1605   0D8D             ; for (i = 0; i < 3; i++) { 
1606   0D8D             _for16_init:
1607   0D8D FA FF FF      lea d, [bp + -1] ; $i
1608   0D90 DA            push d
1609   0D91                             
1610   0D91 FD 2E 00 00   mov32 cb, $00000000
1610   0D95 00 00 
1611   0D97 E7            pop d
1612   0D98 FD 43         mov [d], b
1613   0D9A             _for16_cond:
1614   0D9A                             
1615   0D9A FA FF FF      lea d, [bp + -1] ; $i
1616   0D9D 2A            mov b, [d]
1617   0D9E 38 00 00      mov c, 0
1618   0DA1             ; --- START RELATIONAL
1619   0DA1 D7            push a
1620   0DA2 11            mov a, b
1621   0DA3 FD 2E 03 00   mov32 cb, $00000003
1621   0DA7 00 00 
1622   0DA9 B0            cmp a, b
1623   0DAA FD 73         slt ; < (signed)
1624   0DAC E4            pop a
1625   0DAD             ; --- END RELATIONAL
1626   0DAD C0 00 00      cmp b, 0
1627   0DB0 C6 FC 0D      je _for16_exit
1628   0DB3             _for16_block:
1629   0DB3             ; output[j++] = output_buffer[i]; 
1630   0DB3 FA 07 00      lea d, [bp + 7] ; $output
1631   0DB6 FD 2A         mov d, [d]
1632   0DB8 D7            push a
1633   0DB9 DA            push d
1634   0DBA                             
1635   0DBA FA FD FF      lea d, [bp + -3] ; $j
1636   0DBD 2A            mov b, [d]
1637   0DBE 38 00 00      mov c, 0
1638   0DC1 11            mov a, b
1639   0DC2 FD 77         inc b
1640   0DC4 FA FD FF      lea d, [bp + -3] ; $j
1641   0DC7 FD 43         mov [d], b
1642   0DC9 27            mov b, a
1643   0DCA E7            pop d
1644   0DCB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1645   0DCF E4            pop a
1646   0DD0 DA            push d
1647   0DD1                             
1648   0DD1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1649   0DD4 D7            push a
1650   0DD5 DA            push d
1651   0DD6                             
1652   0DD6 FA FF FF      lea d, [bp + -1] ; $i
1653   0DD9 2A            mov b, [d]
1654   0DDA 38 00 00      mov c, 0
1655   0DDD E7            pop d
1656   0DDE 5A            add d, b
1657   0DDF E4            pop a
1658   0DE0 32            mov bl, [d]
1659   0DE1 A7 00         mov bh, 0
1660   0DE3 38 00 00      mov c, 0
1661   0DE6 E7            pop d
1662   0DE7 FD 3E         mov [d], bl
1663   0DE9             _for16_update:
1664   0DE9                             
1665   0DE9 FA FF FF      lea d, [bp + -1] ; $i
1666   0DEC 2A            mov b, [d]
1667   0DED 38 00 00      mov c, 0
1668   0DF0 11            mov a, b
1669   0DF1 FD 77         inc b
1670   0DF3 FA FF FF      lea d, [bp + -1] ; $i
1671   0DF6 FD 43         mov [d], b
1672   0DF8 27            mov b, a
1673   0DF9 0A 9A 0D      jmp _for16_cond
1674   0DFC             _for16_exit:
1675   0DFC             ; i = 0; 
1676   0DFC FA FF FF      lea d, [bp + -1] ; $i
1677   0DFF DA            push d
1678   0E00                             
1679   0E00 FD 2E 00 00   mov32 cb, $00000000
1679   0E04 00 00 
1680   0E06 E7            pop d
1681   0E07 FD 43         mov [d], b
1682   0E09 0A 0C 0E      jmp _if14_exit
1683   0E0C             _if14_exit:
1684   0E0C 0A 35 0B      jmp _while13_cond
1685   0E0F             _while13_exit:
1686   0E0F             ; if (i) { 
1687   0E0F             _if17_cond:
1688   0E0F                             
1689   0E0F FA FF FF      lea d, [bp + -1] ; $i
1690   0E12 2A            mov b, [d]
1691   0E13 38 00 00      mov c, 0
1692   0E16 C0 00 00      cmp b, 0
1693   0E19 C6 26 10      je _if17_exit
1694   0E1C             _if17_TRUE:
1695   0E1C             ; for (k = i; k < 4; k++) { 
1696   0E1C             _for18_init:
1697   0E1C FA FB FF      lea d, [bp + -5] ; $k
1698   0E1F DA            push d
1699   0E20                             
1700   0E20 FA FF FF      lea d, [bp + -1] ; $i
1701   0E23 2A            mov b, [d]
1702   0E24 38 00 00      mov c, 0
1703   0E27 E7            pop d
1704   0E28 FD 43         mov [d], b
1705   0E2A             _for18_cond:
1706   0E2A                             
1707   0E2A FA FB FF      lea d, [bp + -5] ; $k
1708   0E2D 2A            mov b, [d]
1709   0E2E 38 00 00      mov c, 0
1710   0E31             ; --- START RELATIONAL
1711   0E31 D7            push a
1712   0E32 11            mov a, b
1713   0E33 FD 2E 04 00   mov32 cb, $00000004
1713   0E37 00 00 
1714   0E39 B0            cmp a, b
1715   0E3A FD 73         slt ; < (signed)
1716   0E3C E4            pop a
1717   0E3D             ; --- END RELATIONAL
1718   0E3D C0 00 00      cmp b, 0
1719   0E40 C6 6F 0E      je _for18_exit
1720   0E43             _for18_block:
1721   0E43             ; input_buffer[k] = 0; 
1722   0E43 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1723   0E46 D7            push a
1724   0E47 DA            push d
1725   0E48                             
1726   0E48 FA FB FF      lea d, [bp + -5] ; $k
1727   0E4B 2A            mov b, [d]
1728   0E4C 38 00 00      mov c, 0
1729   0E4F E7            pop d
1730   0E50 5A            add d, b
1731   0E51 E4            pop a
1732   0E52 DA            push d
1733   0E53                             
1734   0E53 FD 2E 00 00   mov32 cb, $00000000
1734   0E57 00 00 
1735   0E59 E7            pop d
1736   0E5A FD 3E         mov [d], bl
1737   0E5C             _for18_update:
1738   0E5C                             
1739   0E5C FA FB FF      lea d, [bp + -5] ; $k
1740   0E5F 2A            mov b, [d]
1741   0E60 38 00 00      mov c, 0
1742   0E63 11            mov a, b
1743   0E64 FD 77         inc b
1744   0E66 FA FB FF      lea d, [bp + -5] ; $k
1745   0E69 FD 43         mov [d], b
1746   0E6B 27            mov b, a
1747   0E6C 0A 2A 0E      jmp _for18_cond
1748   0E6F             _for18_exit:
1749   0E6F             ; for (k = 0; k < 4; k++) { 
1750   0E6F             _for19_init:
1751   0E6F FA FB FF      lea d, [bp + -5] ; $k
1752   0E72 DA            push d
1753   0E73                             
1754   0E73 FD 2E 00 00   mov32 cb, $00000000
1754   0E77 00 00 
1755   0E79 E7            pop d
1756   0E7A FD 43         mov [d], b
1757   0E7C             _for19_cond:
1758   0E7C                             
1759   0E7C FA FB FF      lea d, [bp + -5] ; $k
1760   0E7F 2A            mov b, [d]
1761   0E80 38 00 00      mov c, 0
1762   0E83             ; --- START RELATIONAL
1763   0E83 D7            push a
1764   0E84 11            mov a, b
1765   0E85 FD 2E 04 00   mov32 cb, $00000004
1765   0E89 00 00 
1766   0E8B B0            cmp a, b
1767   0E8C FD 73         slt ; < (signed)
1768   0E8E E4            pop a
1769   0E8F             ; --- END RELATIONAL
1770   0E8F C0 00 00      cmp b, 0
1771   0E92 C6 D7 0E      je _for19_exit
1772   0E95             _for19_block:
1773   0E95             ; input_buffer[k] = base64_char_value(input_buffer[k]); 
1774   0E95 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1775   0E98 D7            push a
1776   0E99 DA            push d
1777   0E9A                             
1778   0E9A FA FB FF      lea d, [bp + -5] ; $k
1779   0E9D 2A            mov b, [d]
1780   0E9E 38 00 00      mov c, 0
1781   0EA1 E7            pop d
1782   0EA2 5A            add d, b
1783   0EA3 E4            pop a
1784   0EA4 DA            push d
1785   0EA5                             
1786   0EA5             ; --- START FUNCTION CALL
1787   0EA5                             
1788   0EA5 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1789   0EA8 D7            push a
1790   0EA9 DA            push d
1791   0EAA                             
1792   0EAA FA FB FF      lea d, [bp + -5] ; $k
1793   0EAD 2A            mov b, [d]
1794   0EAE 38 00 00      mov c, 0
1795   0EB1 E7            pop d
1796   0EB2 5A            add d, b
1797   0EB3 E4            pop a
1798   0EB4 32            mov bl, [d]
1799   0EB5 A7 00         mov bh, 0
1800   0EB7 38 00 00      mov c, 0
1801   0EBA DD            push bl
1802   0EBB 07 91 09      call base64_char_value
1803   0EBE 51 01 00      add sp, 1
1804   0EC1             ; --- END FUNCTION CALL
1805   0EC1 E7            pop d
1806   0EC2 FD 3E         mov [d], bl
1807   0EC4             _for19_update:
1808   0EC4                             
1809   0EC4 FA FB FF      lea d, [bp + -5] ; $k
1810   0EC7 2A            mov b, [d]
1811   0EC8 38 00 00      mov c, 0
1812   0ECB 11            mov a, b
1813   0ECC FD 77         inc b
1814   0ECE FA FB FF      lea d, [bp + -5] ; $k
1815   0ED1 FD 43         mov [d], b
1816   0ED3 27            mov b, a
1817   0ED4 0A 7C 0E      jmp _for19_cond
1818   0ED7             _for19_exit:
1819   0ED7             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1820   0ED7 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1821   0EDA D7            push a
1822   0EDB DA            push d
1823   0EDC                             
1824   0EDC FD 2E 00 00   mov32 cb, $00000000
1824   0EE0 00 00 
1825   0EE2 E7            pop d
1826   0EE3 5A            add d, b
1827   0EE4 E4            pop a
1828   0EE5 DA            push d
1829   0EE6                             
1830   0EE6                             
1831   0EE6 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1832   0EE9 D7            push a
1833   0EEA DA            push d
1834   0EEB                             
1835   0EEB FD 2E 00 00   mov32 cb, $00000000
1835   0EEF 00 00 
1836   0EF1 E7            pop d
1837   0EF2 5A            add d, b
1838   0EF3 E4            pop a
1839   0EF4 32            mov bl, [d]
1840   0EF5 A7 00         mov bh, 0
1841   0EF7 38 00 00      mov c, 0
1842   0EFA             ; --- START SHIFT
1843   0EFA D7            push a
1844   0EFB 11            mov a, b
1845   0EFC FD 2E 02 00   mov32 cb, $00000002
1845   0F00 00 00 
1846   0F02 FD 39         mov c, b
1847   0F04 9D            shl a, cl
1848   0F05 27            mov b, a
1849   0F06 E4            pop a
1850   0F07             ; --- END SHIFT
1851   0F07             ; --- START TERMS
1852   0F07 D7            push a
1853   0F08 11            mov a, b
1854   0F09                             
1855   0F09                             
1856   0F09 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1857   0F0C D7            push a
1858   0F0D DA            push d
1859   0F0E                             
1860   0F0E FD 2E 01 00   mov32 cb, $00000001
1860   0F12 00 00 
1861   0F14 E7            pop d
1862   0F15 5A            add d, b
1863   0F16 E4            pop a
1864   0F17 32            mov bl, [d]
1865   0F18 A7 00         mov bh, 0
1866   0F1A 38 00 00      mov c, 0
1867   0F1D D7            push a
1868   0F1E 11            mov a, b
1869   0F1F FD 2E 30 00   mov32 cb, $00000030
1869   0F23 00 00 
1870   0F25 FD 92         and b, a ; &
1871   0F27 E4            pop a
1872   0F28             ; --- START SHIFT
1873   0F28 D7            push a
1874   0F29 11            mov a, b
1875   0F2A FD 2E 04 00   mov32 cb, $00000004
1875   0F2E 00 00 
1876   0F30 FD 39         mov c, b
1877   0F32 A5            ashr a, cl
1878   0F33 27            mov b, a
1879   0F34 E4            pop a
1880   0F35             ; --- END SHIFT
1881   0F35 56            add b, a
1882   0F36 E4            pop a
1883   0F37             ; --- END TERMS
1884   0F37 E7            pop d
1885   0F38 FD 3E         mov [d], bl
1886   0F3A             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1887   0F3A FA F2 FF      lea d, [bp + -14] ; $output_buffer
1888   0F3D D7            push a
1889   0F3E DA            push d
1890   0F3F                             
1891   0F3F FD 2E 01 00   mov32 cb, $00000001
1891   0F43 00 00 
1892   0F45 E7            pop d
1893   0F46 5A            add d, b
1894   0F47 E4            pop a
1895   0F48 DA            push d
1896   0F49                             
1897   0F49                             
1898   0F49                             
1899   0F49 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1900   0F4C D7            push a
1901   0F4D DA            push d
1902   0F4E                             
1903   0F4E FD 2E 01 00   mov32 cb, $00000001
1903   0F52 00 00 
1904   0F54 E7            pop d
1905   0F55 5A            add d, b
1906   0F56 E4            pop a
1907   0F57 32            mov bl, [d]
1908   0F58 A7 00         mov bh, 0
1909   0F5A 38 00 00      mov c, 0
1910   0F5D D7            push a
1911   0F5E 11            mov a, b
1912   0F5F FD 2E 0F 00   mov32 cb, $0000000f
1912   0F63 00 00 
1913   0F65 FD 92         and b, a ; &
1914   0F67 E4            pop a
1915   0F68             ; --- START SHIFT
1916   0F68 D7            push a
1917   0F69 11            mov a, b
1918   0F6A FD 2E 04 00   mov32 cb, $00000004
1918   0F6E 00 00 
1919   0F70 FD 39         mov c, b
1920   0F72 9D            shl a, cl
1921   0F73 27            mov b, a
1922   0F74 E4            pop a
1923   0F75             ; --- END SHIFT
1924   0F75             ; --- START TERMS
1925   0F75 D7            push a
1926   0F76 11            mov a, b
1927   0F77                             
1928   0F77                             
1929   0F77 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1930   0F7A D7            push a
1931   0F7B DA            push d
1932   0F7C                             
1933   0F7C FD 2E 02 00   mov32 cb, $00000002
1933   0F80 00 00 
1934   0F82 E7            pop d
1935   0F83 5A            add d, b
1936   0F84 E4            pop a
1937   0F85 32            mov bl, [d]
1938   0F86 A7 00         mov bh, 0
1939   0F88 38 00 00      mov c, 0
1940   0F8B D7            push a
1941   0F8C 11            mov a, b
1942   0F8D FD 2E 3C 00   mov32 cb, $0000003c
1942   0F91 00 00 
1943   0F93 FD 92         and b, a ; &
1944   0F95 E4            pop a
1945   0F96             ; --- START SHIFT
1946   0F96 D7            push a
1947   0F97 11            mov a, b
1948   0F98 FD 2E 02 00   mov32 cb, $00000002
1948   0F9C 00 00 
1949   0F9E FD 39         mov c, b
1950   0FA0 A5            ashr a, cl
1951   0FA1 27            mov b, a
1952   0FA2 E4            pop a
1953   0FA3             ; --- END SHIFT
1954   0FA3 56            add b, a
1955   0FA4 E4            pop a
1956   0FA5             ; --- END TERMS
1957   0FA5 E7            pop d
1958   0FA6 FD 3E         mov [d], bl
1959   0FA8             ; for (k = 0; k < i - 1; k++) { 
1960   0FA8             _for20_init:
1961   0FA8 FA FB FF      lea d, [bp + -5] ; $k
1962   0FAB DA            push d
1963   0FAC                             
1964   0FAC FD 2E 00 00   mov32 cb, $00000000
1964   0FB0 00 00 
1965   0FB2 E7            pop d
1966   0FB3 FD 43         mov [d], b
1967   0FB5             _for20_cond:
1968   0FB5                             
1969   0FB5 FA FB FF      lea d, [bp + -5] ; $k
1970   0FB8 2A            mov b, [d]
1971   0FB9 38 00 00      mov c, 0
1972   0FBC             ; --- START RELATIONAL
1973   0FBC D7            push a
1974   0FBD 11            mov a, b
1975   0FBE FA FF FF      lea d, [bp + -1] ; $i
1976   0FC1 2A            mov b, [d]
1977   0FC2 38 00 00      mov c, 0
1978   0FC5             ; --- START TERMS
1979   0FC5 D7            push a
1980   0FC6 11            mov a, b
1981   0FC7 FD 2E 01 00   mov32 cb, $00000001
1981   0FCB 00 00 
1982   0FCD 60            sub a, b
1983   0FCE 27            mov b, a
1984   0FCF E4            pop a
1985   0FD0             ; --- END TERMS
1986   0FD0 B0            cmp a, b
1987   0FD1 FD 73         slt ; < (signed)
1988   0FD3 E4            pop a
1989   0FD4             ; --- END RELATIONAL
1990   0FD4 C0 00 00      cmp b, 0
1991   0FD7 C6 23 10      je _for20_exit
1992   0FDA             _for20_block:
1993   0FDA             ; output[j++] = output_buffer[k]; 
1994   0FDA FA 07 00      lea d, [bp + 7] ; $output
1995   0FDD FD 2A         mov d, [d]
1996   0FDF D7            push a
1997   0FE0 DA            push d
1998   0FE1                             
1999   0FE1 FA FD FF      lea d, [bp + -3] ; $j
2000   0FE4 2A            mov b, [d]
2001   0FE5 38 00 00      mov c, 0
2002   0FE8 11            mov a, b
2003   0FE9 FD 77         inc b
2004   0FEB FA FD FF      lea d, [bp + -3] ; $j
2005   0FEE FD 43         mov [d], b
2006   0FF0 27            mov b, a
2007   0FF1 E7            pop d
2008   0FF2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2009   0FF6 E4            pop a
2010   0FF7 DA            push d
2011   0FF8                             
2012   0FF8 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2013   0FFB D7            push a
2014   0FFC DA            push d
2015   0FFD                             
2016   0FFD FA FB FF      lea d, [bp + -5] ; $k
2017   1000 2A            mov b, [d]
2018   1001 38 00 00      mov c, 0
2019   1004 E7            pop d
2020   1005 5A            add d, b
2021   1006 E4            pop a
2022   1007 32            mov bl, [d]
2023   1008 A7 00         mov bh, 0
2024   100A 38 00 00      mov c, 0
2025   100D E7            pop d
2026   100E FD 3E         mov [d], bl
2027   1010             _for20_update:
2028   1010                             
2029   1010 FA FB FF      lea d, [bp + -5] ; $k
2030   1013 2A            mov b, [d]
2031   1014 38 00 00      mov c, 0
2032   1017 11            mov a, b
2033   1018 FD 77         inc b
2034   101A FA FB FF      lea d, [bp + -5] ; $k
2035   101D FD 43         mov [d], b
2036   101F 27            mov b, a
2037   1020 0A B5 0F      jmp _for20_cond
2038   1023             _for20_exit:
2039   1023 0A 26 10      jmp _if17_exit
2040   1026             _if17_exit:
2041   1026             ; output[j] = '\0'; 
2042   1026 FA 07 00      lea d, [bp + 7] ; $output
2043   1029 FD 2A         mov d, [d]
2044   102B D7            push a
2045   102C DA            push d
2046   102D                             
2047   102D FA FD FF      lea d, [bp + -3] ; $j
2048   1030 2A            mov b, [d]
2049   1031 38 00 00      mov c, 0
2050   1034 E7            pop d
2051   1035 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2052   1039 E4            pop a
2053   103A DA            push d
2054   103B                             
2055   103B FD 2E 00 00   mov32 cb, $00000000
2055   103F 00 00 
2056   1041 E7            pop d
2057   1042 FD 3E         mov [d], bl
2058   1044 F9            leave
2059   1045 09            ret
2060   1046             
2061   1046             printf:
2062   1046 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2063   1049             ; char *p, *format_p; 
2064   1049 52 02 00      sub sp, 2
2065   104C 52 02 00      sub sp, 2
2066   104F             ; format_p = format; 
2067   104F FA FD FF      lea d, [bp + -3] ; $format_p
2068   1052 DA            push d
2069   1053                             
2070   1053 FA 05 00      lea d, [bp + 5] ; $format
2071   1056 2A            mov b, [d]
2072   1057 38 00 00      mov c, 0
2073   105A E7            pop d
2074   105B FD 43         mov [d], b
2075   105D             ; p = &format + 2; 
2076   105D FA FF FF      lea d, [bp + -1] ; $p
2077   1060 DA            push d
2078   1061                             
2079   1061 FA 05 00      lea d, [bp + 5] ; $format
2080   1064 2D            mov b, d
2081   1065             ; --- START TERMS
2082   1065 D7            push a
2083   1066 11            mov a, b
2084   1067 FD 2E 02 00   mov32 cb, $00000002
2084   106B 00 00 
2085   106D 56            add b, a
2086   106E E4            pop a
2087   106F             ; --- END TERMS
2088   106F E7            pop d
2089   1070 FD 43         mov [d], b
2090   1072             ; for(;;){ 
2091   1072             _for21_init:
2092   1072             _for21_cond:
2093   1072             _for21_block:
2094   1072             ; if(!*format_p) break; 
2095   1072             _if22_cond:
2096   1072                             
2097   1072 FA FD FF      lea d, [bp + -3] ; $format_p
2098   1075 2A            mov b, [d]
2099   1076 38 00 00      mov c, 0
2100   1079 74            mov d, b
2101   107A 32            mov bl, [d]
2102   107B A7 00         mov bh, 0
2103   107D 38 00 00      mov c, 0
2104   1080 C0 00 00      cmp b, 0
2105   1083 FD 71         seq ; !
2106   1085 C0 00 00      cmp b, 0
2107   1088 C6 91 10      je _if22_else
2108   108B             _if22_TRUE:
2109   108B             ; break; 
2110   108B 0A 41 13      jmp _for21_exit ; for break
2111   108E 0A 3E 13      jmp _if22_exit
2112   1091             _if22_else:
2113   1091             ; if(*format_p == '%'){ 
2114   1091             _if23_cond:
2115   1091                             
2116   1091 FA FD FF      lea d, [bp + -3] ; $format_p
2117   1094 2A            mov b, [d]
2118   1095 38 00 00      mov c, 0
2119   1098 74            mov d, b
2120   1099 32            mov bl, [d]
2121   109A A7 00         mov bh, 0
2122   109C 38 00 00      mov c, 0
2123   109F             ; --- START RELATIONAL
2124   109F D7            push a
2125   10A0 11            mov a, b
2126   10A1 FD 2E 25 00   mov32 cb, $00000025
2126   10A5 00 00 
2127   10A7 B0            cmp a, b
2128   10A8 FD 71         seq ; ==
2129   10AA E4            pop a
2130   10AB             ; --- END RELATIONAL
2131   10AB C0 00 00      cmp b, 0
2132   10AE C6 19 13      je _if23_else
2133   10B1             _if23_TRUE:
2134   10B1             ; format_p++; 
2135   10B1                             
2136   10B1 FA FD FF      lea d, [bp + -3] ; $format_p
2137   10B4 2A            mov b, [d]
2138   10B5 38 00 00      mov c, 0
2139   10B8 FD 77         inc b
2140   10BA FA FD FF      lea d, [bp + -3] ; $format_p
2141   10BD FD 43         mov [d], b
2142   10BF FD 7D         dec b
2143   10C1             ; switch(*format_p){ 
2144   10C1             _switch24_expr:
2145   10C1                             
2146   10C1 FA FD FF      lea d, [bp + -3] ; $format_p
2147   10C4 2A            mov b, [d]
2148   10C5 38 00 00      mov c, 0
2149   10C8 74            mov d, b
2150   10C9 32            mov bl, [d]
2151   10CA A7 00         mov bh, 0
2152   10CC 38 00 00      mov c, 0
2153   10CF             _switch24_comparisons:
2154   10CF C1 6C         cmp bl, $6c
2155   10D1 C6 FD 10      je _switch24_case0
2156   10D4 C1 4C         cmp bl, $4c
2157   10D6 C6 FD 10      je _switch24_case1
2158   10D9 C1 64         cmp bl, $64
2159   10DB C6 0D 12      je _switch24_case2
2160   10DE C1 69         cmp bl, $69
2161   10E0 C6 0D 12      je _switch24_case3
2162   10E3 C1 75         cmp bl, $75
2163   10E5 C6 3D 12      je _switch24_case4
2164   10E8 C1 78         cmp bl, $78
2165   10EA C6 6D 12      je _switch24_case5
2166   10ED C1 63         cmp bl, $63
2167   10EF C6 9D 12      je _switch24_case6
2168   10F2 C1 73         cmp bl, $73
2169   10F4 C6 CD 12      je _switch24_case7
2170   10F7 0A FA 12      jmp _switch24_default
2171   10FA 0A 06 13      jmp _switch24_exit
2172   10FD             _switch24_case0:
2173   10FD             _switch24_case1:
2174   10FD             ; format_p++; 
2175   10FD                             
2176   10FD FA FD FF      lea d, [bp + -3] ; $format_p
2177   1100 2A            mov b, [d]
2178   1101 38 00 00      mov c, 0
2179   1104 FD 77         inc b
2180   1106 FA FD FF      lea d, [bp + -3] ; $format_p
2181   1109 FD 43         mov [d], b
2182   110B FD 7D         dec b
2183   110D             ; if(*format_p == 'd' || *format_p == 'i') 
2184   110D             _if25_cond:
2185   110D                             
2186   110D FA FD FF      lea d, [bp + -3] ; $format_p
2187   1110 2A            mov b, [d]
2188   1111 38 00 00      mov c, 0
2189   1114 74            mov d, b
2190   1115 32            mov bl, [d]
2191   1116 A7 00         mov bh, 0
2192   1118 38 00 00      mov c, 0
2193   111B             ; --- START RELATIONAL
2194   111B D7            push a
2195   111C 11            mov a, b
2196   111D FD 2E 64 00   mov32 cb, $00000064
2196   1121 00 00 
2197   1123 B0            cmp a, b
2198   1124 FD 71         seq ; ==
2199   1126 E4            pop a
2200   1127             ; --- END RELATIONAL
2201   1127             ; --- START LOGICAL OR
2202   1127 D7            push a
2203   1128 11            mov a, b
2204   1129 FA FD FF      lea d, [bp + -3] ; $format_p
2205   112C 2A            mov b, [d]
2206   112D 38 00 00      mov c, 0
2207   1130 74            mov d, b
2208   1131 32            mov bl, [d]
2209   1132 A7 00         mov bh, 0
2210   1134 38 00 00      mov c, 0
2211   1137             ; --- START RELATIONAL
2212   1137 D7            push a
2213   1138 11            mov a, b
2214   1139 FD 2E 69 00   mov32 cb, $00000069
2214   113D 00 00 
2215   113F B0            cmp a, b
2216   1140 FD 71         seq ; ==
2217   1142 E4            pop a
2218   1143             ; --- END RELATIONAL
2219   1143 FD A8         sor a, b ; ||
2220   1145 E4            pop a
2221   1146             ; --- END LOGICAL OR
2222   1146 C0 00 00      cmp b, 0
2223   1149 C6 6A 11      je _if25_else
2224   114C             _if25_TRUE:
2225   114C             ; print_signed_long(*(long *)p); 
2226   114C                             
2227   114C             ; --- START FUNCTION CALL
2228   114C                             
2229   114C FA FF FF      lea d, [bp + -1] ; $p
2230   114F 2A            mov b, [d]
2231   1150 38 00 00      mov c, 0
2232   1153 74            mov d, b
2233   1154 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2234   1157 FD 39         mov c, b ; And place it into C
2235   1159 2A            mov b, [d] ; Lower Word in B
2236   115A 12            mov a, c
2237   115B FD AA         swp a
2238   115D D7            push a
2239   115E FD AB         swp b
2240   1160 D8            push b
2241   1161 07 43 13      call print_signed_long
2242   1164 51 04 00      add sp, 4
2243   1167             ; --- END FUNCTION CALL
2244   1167 0A F2 11      jmp _if25_exit
2245   116A             _if25_else:
2246   116A             ; if(*format_p == 'u') 
2247   116A             _if26_cond:
2248   116A                             
2249   116A FA FD FF      lea d, [bp + -3] ; $format_p
2250   116D 2A            mov b, [d]
2251   116E 38 00 00      mov c, 0
2252   1171 74            mov d, b
2253   1172 32            mov bl, [d]
2254   1173 A7 00         mov bh, 0
2255   1175 38 00 00      mov c, 0
2256   1178             ; --- START RELATIONAL
2257   1178 D7            push a
2258   1179 11            mov a, b
2259   117A FD 2E 75 00   mov32 cb, $00000075
2259   117E 00 00 
2260   1180 B0            cmp a, b
2261   1181 FD 71         seq ; ==
2262   1183 E4            pop a
2263   1184             ; --- END RELATIONAL
2264   1184 C0 00 00      cmp b, 0
2265   1187 C6 A8 11      je _if26_else
2266   118A             _if26_TRUE:
2267   118A             ; print_unsigned_long(*(unsigned long *)p); 
2268   118A                             
2269   118A             ; --- START FUNCTION CALL
2270   118A                             
2271   118A FA FF FF      lea d, [bp + -1] ; $p
2272   118D 2A            mov b, [d]
2273   118E 38 00 00      mov c, 0
2274   1191 74            mov d, b
2275   1192 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2276   1195 FD 39         mov c, b ; And place it into C
2277   1197 2A            mov b, [d] ; Lower Word in B
2278   1198 12            mov a, c
2279   1199 FD AA         swp a
2280   119B D7            push a
2281   119C FD AB         swp b
2282   119E D8            push b
2283   119F 07 D6 14      call print_unsigned_long
2284   11A2 51 04 00      add sp, 4
2285   11A5             ; --- END FUNCTION CALL
2286   11A5 0A F2 11      jmp _if26_exit
2287   11A8             _if26_else:
2288   11A8             ; if(*format_p == 'x') 
2289   11A8             _if27_cond:
2290   11A8                             
2291   11A8 FA FD FF      lea d, [bp + -3] ; $format_p
2292   11AB 2A            mov b, [d]
2293   11AC 38 00 00      mov c, 0
2294   11AF 74            mov d, b
2295   11B0 32            mov bl, [d]
2296   11B1 A7 00         mov bh, 0
2297   11B3 38 00 00      mov c, 0
2298   11B6             ; --- START RELATIONAL
2299   11B6 D7            push a
2300   11B7 11            mov a, b
2301   11B8 FD 2E 78 00   mov32 cb, $00000078
2301   11BC 00 00 
2302   11BE B0            cmp a, b
2303   11BF FD 71         seq ; ==
2304   11C1 E4            pop a
2305   11C2             ; --- END RELATIONAL
2306   11C2 C0 00 00      cmp b, 0
2307   11C5 C6 E6 11      je _if27_else
2308   11C8             _if27_TRUE:
2309   11C8             ; printx32(*(long int *)p); 
2310   11C8                             
2311   11C8             ; --- START FUNCTION CALL
2312   11C8                             
2313   11C8 FA FF FF      lea d, [bp + -1] ; $p
2314   11CB 2A            mov b, [d]
2315   11CC 38 00 00      mov c, 0
2316   11CF 74            mov d, b
2317   11D0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2318   11D3 FD 39         mov c, b ; And place it into C
2319   11D5 2A            mov b, [d] ; Lower Word in B
2320   11D6 12            mov a, c
2321   11D7 FD AA         swp a
2322   11D9 D7            push a
2323   11DA FD AB         swp b
2324   11DC D8            push b
2325   11DD 07 0A 16      call printx32
2326   11E0 51 04 00      add sp, 4
2327   11E3             ; --- END FUNCTION CALL
2328   11E3 0A F2 11      jmp _if27_exit
2329   11E6             _if27_else:
2330   11E6             ; err("Unexpected format in printf."); 
2331   11E6                             
2332   11E6             ; --- START FUNCTION CALL
2333   11E6                             
2334   11E6 26 04 1B      mov b, _s3 ; "Unexpected format in printf."
2335   11E9 FD AB         swp b
2336   11EB D8            push b
2337   11EC 07 6A 16      call err
2338   11EF 51 02 00      add sp, 2
2339   11F2             ; --- END FUNCTION CALL
2340   11F2             _if27_exit:
2341   11F2             _if26_exit:
2342   11F2             _if25_exit:
2343   11F2             ; p = p + 4; 
2344   11F2 FA FF FF      lea d, [bp + -1] ; $p
2345   11F5 DA            push d
2346   11F6                             
2347   11F6 FA FF FF      lea d, [bp + -1] ; $p
2348   11F9 2A            mov b, [d]
2349   11FA 38 00 00      mov c, 0
2350   11FD             ; --- START TERMS
2351   11FD D7            push a
2352   11FE 11            mov a, b
2353   11FF FD 2E 04 00   mov32 cb, $00000004
2353   1203 00 00 
2354   1205 56            add b, a
2355   1206 E4            pop a
2356   1207             ; --- END TERMS
2357   1207 E7            pop d
2358   1208 FD 43         mov [d], b
2359   120A             ; break; 
2360   120A 0A 06 13      jmp _switch24_exit ; case break
2361   120D             _switch24_case2:
2362   120D             _switch24_case3:
2363   120D             ; print_signed(*(int*)p); 
2364   120D                             
2365   120D             ; --- START FUNCTION CALL
2366   120D                             
2367   120D FA FF FF      lea d, [bp + -1] ; $p
2368   1210 2A            mov b, [d]
2369   1211 38 00 00      mov c, 0
2370   1214 74            mov d, b
2371   1215 2A            mov b, [d]
2372   1216 38 00 00      mov c, 0
2373   1219 FD AB         swp b
2374   121B D8            push b
2375   121C 07 98 16      call print_signed
2376   121F 51 02 00      add sp, 2
2377   1222             ; --- END FUNCTION CALL
2378   1222             ; p = p + 2; 
2379   1222 FA FF FF      lea d, [bp + -1] ; $p
2380   1225 DA            push d
2381   1226                             
2382   1226 FA FF FF      lea d, [bp + -1] ; $p
2383   1229 2A            mov b, [d]
2384   122A 38 00 00      mov c, 0
2385   122D             ; --- START TERMS
2386   122D D7            push a
2387   122E 11            mov a, b
2388   122F FD 2E 02 00   mov32 cb, $00000002
2388   1233 00 00 
2389   1235 56            add b, a
2390   1236 E4            pop a
2391   1237             ; --- END TERMS
2392   1237 E7            pop d
2393   1238 FD 43         mov [d], b
2394   123A             ; break; 
2395   123A 0A 06 13      jmp _switch24_exit ; case break
2396   123D             _switch24_case4:
2397   123D             ; print_unsigned(*(unsigned int*)p); 
2398   123D                             
2399   123D             ; --- START FUNCTION CALL
2400   123D                             
2401   123D FA FF FF      lea d, [bp + -1] ; $p
2402   1240 2A            mov b, [d]
2403   1241 38 00 00      mov c, 0
2404   1244 74            mov d, b
2405   1245 2A            mov b, [d]
2406   1246 38 00 00      mov c, 0
2407   1249 FD AB         swp b
2408   124B D8            push b
2409   124C 07 E9 17      call print_unsigned
2410   124F 51 02 00      add sp, 2
2411   1252             ; --- END FUNCTION CALL
2412   1252             ; p = p + 2; 
2413   1252 FA FF FF      lea d, [bp + -1] ; $p
2414   1255 DA            push d
2415   1256                             
2416   1256 FA FF FF      lea d, [bp + -1] ; $p
2417   1259 2A            mov b, [d]
2418   125A 38 00 00      mov c, 0
2419   125D             ; --- START TERMS
2420   125D D7            push a
2421   125E 11            mov a, b
2422   125F FD 2E 02 00   mov32 cb, $00000002
2422   1263 00 00 
2423   1265 56            add b, a
2424   1266 E4            pop a
2425   1267             ; --- END TERMS
2426   1267 E7            pop d
2427   1268 FD 43         mov [d], b
2428   126A             ; break; 
2429   126A 0A 06 13      jmp _switch24_exit ; case break
2430   126D             _switch24_case5:
2431   126D             ; printx16(*(int*)p); 
2432   126D                             
2433   126D             ; --- START FUNCTION CALL
2434   126D                             
2435   126D FA FF FF      lea d, [bp + -1] ; $p
2436   1270 2A            mov b, [d]
2437   1271 38 00 00      mov c, 0
2438   1274 74            mov d, b
2439   1275 2A            mov b, [d]
2440   1276 38 00 00      mov c, 0
2441   1279 FD AB         swp b
2442   127B D8            push b
2443   127C 07 01 19      call printx16
2444   127F 51 02 00      add sp, 2
2445   1282             ; --- END FUNCTION CALL
2446   1282             ; p = p + 2; 
2447   1282 FA FF FF      lea d, [bp + -1] ; $p
2448   1285 DA            push d
2449   1286                             
2450   1286 FA FF FF      lea d, [bp + -1] ; $p
2451   1289 2A            mov b, [d]
2452   128A 38 00 00      mov c, 0
2453   128D             ; --- START TERMS
2454   128D D7            push a
2455   128E 11            mov a, b
2456   128F FD 2E 02 00   mov32 cb, $00000002
2456   1293 00 00 
2457   1295 56            add b, a
2458   1296 E4            pop a
2459   1297             ; --- END TERMS
2460   1297 E7            pop d
2461   1298 FD 43         mov [d], b
2462   129A             ; break; 
2463   129A 0A 06 13      jmp _switch24_exit ; case break
2464   129D             _switch24_case6:
2465   129D             ; putchar(*(char*)p); 
2466   129D                             
2467   129D             ; --- START FUNCTION CALL
2468   129D                             
2469   129D FA FF FF      lea d, [bp + -1] ; $p
2470   12A0 2A            mov b, [d]
2471   12A1 38 00 00      mov c, 0
2472   12A4 74            mov d, b
2473   12A5 32            mov bl, [d]
2474   12A6 A7 00         mov bh, 0
2475   12A8 38 00 00      mov c, 0
2476   12AB DD            push bl
2477   12AC 07 C8 14      call putchar
2478   12AF 51 01 00      add sp, 1
2479   12B2             ; --- END FUNCTION CALL
2480   12B2             ; p = p + 1; 
2481   12B2 FA FF FF      lea d, [bp + -1] ; $p
2482   12B5 DA            push d
2483   12B6                             
2484   12B6 FA FF FF      lea d, [bp + -1] ; $p
2485   12B9 2A            mov b, [d]
2486   12BA 38 00 00      mov c, 0
2487   12BD             ; --- START TERMS
2488   12BD D7            push a
2489   12BE 11            mov a, b
2490   12BF FD 2E 01 00   mov32 cb, $00000001
2490   12C3 00 00 
2491   12C5 56            add b, a
2492   12C6 E4            pop a
2493   12C7             ; --- END TERMS
2494   12C7 E7            pop d
2495   12C8 FD 43         mov [d], b
2496   12CA             ; break; 
2497   12CA 0A 06 13      jmp _switch24_exit ; case break
2498   12CD             _switch24_case7:
2499   12CD             ; print(*(char**)p); 
2500   12CD                             
2501   12CD             ; --- START FUNCTION CALL
2502   12CD                             
2503   12CD FA FF FF      lea d, [bp + -1] ; $p
2504   12D0 2A            mov b, [d]
2505   12D1 38 00 00      mov c, 0
2506   12D4 74            mov d, b
2507   12D5 2A            mov b, [d]
2508   12D6 FD AB         swp b
2509   12D8 D8            push b
2510   12D9 07 7F 16      call print
2511   12DC 51 02 00      add sp, 2
2512   12DF             ; --- END FUNCTION CALL
2513   12DF             ; p = p + 2; 
2514   12DF FA FF FF      lea d, [bp + -1] ; $p
2515   12E2 DA            push d
2516   12E3                             
2517   12E3 FA FF FF      lea d, [bp + -1] ; $p
2518   12E6 2A            mov b, [d]
2519   12E7 38 00 00      mov c, 0
2520   12EA             ; --- START TERMS
2521   12EA D7            push a
2522   12EB 11            mov a, b
2523   12EC FD 2E 02 00   mov32 cb, $00000002
2523   12F0 00 00 
2524   12F2 56            add b, a
2525   12F3 E4            pop a
2526   12F4             ; --- END TERMS
2527   12F4 E7            pop d
2528   12F5 FD 43         mov [d], b
2529   12F7             ; break; 
2530   12F7 0A 06 13      jmp _switch24_exit ; case break
2531   12FA             _switch24_default:
2532   12FA             ; print("Error: Unknown argument type.\n"); 
2533   12FA                             
2534   12FA             ; --- START FUNCTION CALL
2535   12FA                             
2536   12FA 26 21 1B      mov b, _s4 ; "Error: Unknown argument type.\n"
2537   12FD FD AB         swp b
2538   12FF D8            push b
2539   1300 07 7F 16      call print
2540   1303 51 02 00      add sp, 2
2541   1306             ; --- END FUNCTION CALL
2542   1306             _switch24_exit:
2543   1306             ; format_p++; 
2544   1306                             
2545   1306 FA FD FF      lea d, [bp + -3] ; $format_p
2546   1309 2A            mov b, [d]
2547   130A 38 00 00      mov c, 0
2548   130D FD 77         inc b
2549   130F FA FD FF      lea d, [bp + -3] ; $format_p
2550   1312 FD 43         mov [d], b
2551   1314 FD 7D         dec b
2552   1316 0A 3E 13      jmp _if23_exit
2553   1319             _if23_else:
2554   1319             ; putchar(*format_p); 
2555   1319                             
2556   1319             ; --- START FUNCTION CALL
2557   1319                             
2558   1319 FA FD FF      lea d, [bp + -3] ; $format_p
2559   131C 2A            mov b, [d]
2560   131D 38 00 00      mov c, 0
2561   1320 74            mov d, b
2562   1321 32            mov bl, [d]
2563   1322 A7 00         mov bh, 0
2564   1324 38 00 00      mov c, 0
2565   1327 DD            push bl
2566   1328 07 C8 14      call putchar
2567   132B 51 01 00      add sp, 1
2568   132E             ; --- END FUNCTION CALL
2569   132E             ; format_p++; 
2570   132E                             
2571   132E FA FD FF      lea d, [bp + -3] ; $format_p
2572   1331 2A            mov b, [d]
2573   1332 38 00 00      mov c, 0
2574   1335 FD 77         inc b
2575   1337 FA FD FF      lea d, [bp + -3] ; $format_p
2576   133A FD 43         mov [d], b
2577   133C FD 7D         dec b
2578   133E             _if23_exit:
2579   133E             _if22_exit:
2580   133E             _for21_update:
2581   133E 0A 72 10      jmp _for21_cond
2582   1341             _for21_exit:
2583   1341 F9            leave
2584   1342 09            ret
2585   1343             
2586   1343             print_signed_long:
2587   1343 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2588   1346             ; char digits[10]; 
2589   1346 52 0A 00      sub sp, 10
2590   1349             ; int i = 0; 
2591   1349 52 02 00      sub sp, 2
2592   134C             ; --- START LOCAL VAR INITIALIZATION
2593   134C FA F5 FF      lea d, [bp + -11] ; $i
2594   134F DA            push d
2595   1350                             
2596   1350 FD 2E 00 00   mov32 cb, $00000000
2596   1354 00 00 
2597   1356 E7            pop d
2598   1357 FD 43         mov [d], b
2599   1359             ; --- END LOCAL VAR INITIALIZATION
2600   1359             ; if (num < 0) { 
2601   1359             _if28_cond:
2602   1359                             
2603   1359 FA 05 00      lea d, [bp + 5] ; $num
2604   135C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2605   135F FD 39         mov c, b ; And place it into C
2606   1361 2A            mov b, [d] ; Lower Word in B
2607   1362             ; --- START RELATIONAL
2608   1362 D7            push a
2609   1363 FD D8         push g
2610   1365 11            mov a, b
2611   1366 FD 7A         mov g, c
2612   1368 FD 2E 00 00   mov32 cb, $00000000
2612   136C 00 00 
2613   136E FD AF         cmp32 ga, cb
2614   1370 FD 73         slt ; <
2615   1372 FD F1         pop g
2616   1374 E4            pop a
2617   1375             ; --- END RELATIONAL
2618   1375 C0 00 00      cmp b, 0
2619   1378 C6 AA 13      je _if28_else
2620   137B             _if28_TRUE:
2621   137B             ; putchar('-'); 
2622   137B                             
2623   137B             ; --- START FUNCTION CALL
2624   137B                             
2625   137B FD 2E 2D 00   mov32 cb, $0000002d
2625   137F 00 00 
2626   1381 DD            push bl
2627   1382 07 C8 14      call putchar
2628   1385 51 01 00      add sp, 1
2629   1388             ; --- END FUNCTION CALL
2630   1388             ; num = -num; 
2631   1388 FA 05 00      lea d, [bp + 5] ; $num
2632   138B DA            push d
2633   138C                             
2634   138C FA 05 00      lea d, [bp + 5] ; $num
2635   138F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2636   1392 FD 39         mov c, b ; And place it into C
2637   1394 2A            mov b, [d] ; Lower Word in B
2638   1395 12            mov a, c
2639   1396 95            not a
2640   1397 97            not b
2641   1398 55 01 00      add b, 1
2642   139B 5B 00 00      adc a, 0
2643   139E 39            mov c, a
2644   139F E7            pop d
2645   13A0 FD 43         mov [d], b
2646   13A2 28            mov b, c
2647   13A3 FD 44 02 00   mov [d + 2], b
2648   13A7 0A DE 13      jmp _if28_exit
2649   13AA             _if28_else:
2650   13AA             ; if (num == 0) { 
2651   13AA             _if29_cond:
2652   13AA                             
2653   13AA FA 05 00      lea d, [bp + 5] ; $num
2654   13AD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2655   13B0 FD 39         mov c, b ; And place it into C
2656   13B2 2A            mov b, [d] ; Lower Word in B
2657   13B3             ; --- START RELATIONAL
2658   13B3 D7            push a
2659   13B4 FD D8         push g
2660   13B6 11            mov a, b
2661   13B7 FD 7A         mov g, c
2662   13B9 FD 2E 00 00   mov32 cb, $00000000
2662   13BD 00 00 
2663   13BF FD AF         cmp32 ga, cb
2664   13C1 FD 71         seq ; ==
2665   13C3 FD F1         pop g
2666   13C5 E4            pop a
2667   13C6             ; --- END RELATIONAL
2668   13C6 C0 00 00      cmp b, 0
2669   13C9 C6 DE 13      je _if29_exit
2670   13CC             _if29_TRUE:
2671   13CC             ; putchar('0'); 
2672   13CC                             
2673   13CC             ; --- START FUNCTION CALL
2674   13CC                             
2675   13CC FD 2E 30 00   mov32 cb, $00000030
2675   13D0 00 00 
2676   13D2 DD            push bl
2677   13D3 07 C8 14      call putchar
2678   13D6 51 01 00      add sp, 1
2679   13D9             ; --- END FUNCTION CALL
2680   13D9             ; return; 
2681   13D9 F9            leave
2682   13DA 09            ret
2683   13DB 0A DE 13      jmp _if29_exit
2684   13DE             _if29_exit:
2685   13DE             _if28_exit:
2686   13DE             ; while (num > 0) { 
2687   13DE             _while30_cond:
2688   13DE                             
2689   13DE FA 05 00      lea d, [bp + 5] ; $num
2690   13E1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2691   13E4 FD 39         mov c, b ; And place it into C
2692   13E6 2A            mov b, [d] ; Lower Word in B
2693   13E7             ; --- START RELATIONAL
2694   13E7 D7            push a
2695   13E8 FD D8         push g
2696   13EA 11            mov a, b
2697   13EB FD 7A         mov g, c
2698   13ED FD 2E 00 00   mov32 cb, $00000000
2698   13F1 00 00 
2699   13F3 FD AF         cmp32 ga, cb
2700   13F5 FD 7F         sgt
2701   13F7 FD F1         pop g
2702   13F9 E4            pop a
2703   13FA             ; --- END RELATIONAL
2704   13FA C0 00 00      cmp b, 0
2705   13FD C6 7E 14      je _while30_exit
2706   1400             _while30_block:
2707   1400             ; digits[i] = '0' + (num % 10); 
2708   1400 FA F7 FF      lea d, [bp + -9] ; $digits
2709   1403 D7            push a
2710   1404 DA            push d
2711   1405                             
2712   1405 FA F5 FF      lea d, [bp + -11] ; $i
2713   1408 2A            mov b, [d]
2714   1409 38 00 00      mov c, 0
2715   140C E7            pop d
2716   140D 5A            add d, b
2717   140E E4            pop a
2718   140F DA            push d
2719   1410                             
2720   1410 FD 2E 30 00   mov32 cb, $00000030
2720   1414 00 00 
2721   1416             ; --- START TERMS
2722   1416 D7            push a
2723   1417 11            mov a, b
2724   1418                             
2725   1418 FA 05 00      lea d, [bp + 5] ; $num
2726   141B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2727   141E FD 39         mov c, b ; And place it into C
2728   1420 2A            mov b, [d] ; Lower Word in B
2729   1421             ; --- START FACTORS
2730   1421 D7            push a
2731   1422 FD D8         push g
2732   1424 11            mov a, b
2733   1425 FD 7A         mov g, c
2734   1427 FD 2E 0A 00   mov32 cb, $0000000a
2734   142B 00 00 
2735   142D FD D8         push g ; save 'g' as the div instruction uses it
2736   142F AE            div a, b ; %, a: quotient, b: remainder
2737   1430 11            mov a, b
2738   1431 FD F1         pop g
2739   1433 FD 38         mov c, g
2740   1435 27            mov b, a
2741   1436 FD F1         pop g
2742   1438 E4            pop a
2743   1439             ; --- END FACTORS
2744   1439 FD 15         add32 cb, ga
2745   143B E4            pop a
2746   143C             ; --- END TERMS
2747   143C E7            pop d
2748   143D FD 3E         mov [d], bl
2749   143F             ; num = num / 10; 
2750   143F FA 05 00      lea d, [bp + 5] ; $num
2751   1442 DA            push d
2752   1443                             
2753   1443 FA 05 00      lea d, [bp + 5] ; $num
2754   1446 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2755   1449 FD 39         mov c, b ; And place it into C
2756   144B 2A            mov b, [d] ; Lower Word in B
2757   144C             ; --- START FACTORS
2758   144C D7            push a
2759   144D FD D8         push g
2760   144F 11            mov a, b
2761   1450 FD 7A         mov g, c
2762   1452 FD 2E 0A 00   mov32 cb, $0000000a
2762   1456 00 00 
2763   1458 FD D8         push g ; save 'g' as the div instruction uses it
2764   145A AE            div a, b ; /, a: quotient, b: remainder
2765   145B FD F1         pop g
2766   145D FD 38         mov c, g
2767   145F 27            mov b, a
2768   1460 FD F1         pop g
2769   1462 E4            pop a
2770   1463             ; --- END FACTORS
2771   1463 E7            pop d
2772   1464 FD 43         mov [d], b
2773   1466 28            mov b, c
2774   1467 FD 44 02 00   mov [d + 2], b
2775   146B             ; i++; 
2776   146B                             
2777   146B FA F5 FF      lea d, [bp + -11] ; $i
2778   146E 2A            mov b, [d]
2779   146F 38 00 00      mov c, 0
2780   1472 11            mov a, b
2781   1473 FD 77         inc b
2782   1475 FA F5 FF      lea d, [bp + -11] ; $i
2783   1478 FD 43         mov [d], b
2784   147A 27            mov b, a
2785   147B 0A DE 13      jmp _while30_cond
2786   147E             _while30_exit:
2787   147E             ; while (i > 0) { 
2788   147E             _while33_cond:
2789   147E                             
2790   147E FA F5 FF      lea d, [bp + -11] ; $i
2791   1481 2A            mov b, [d]
2792   1482 38 00 00      mov c, 0
2793   1485             ; --- START RELATIONAL
2794   1485 D7            push a
2795   1486 11            mov a, b
2796   1487 FD 2E 00 00   mov32 cb, $00000000
2796   148B 00 00 
2797   148D B0            cmp a, b
2798   148E FD 7F         sgt ; >
2799   1490 E4            pop a
2800   1491             ; --- END RELATIONAL
2801   1491 C0 00 00      cmp b, 0
2802   1494 C6 C6 14      je _while33_exit
2803   1497             _while33_block:
2804   1497             ; i--; 
2805   1497                             
2806   1497 FA F5 FF      lea d, [bp + -11] ; $i
2807   149A 2A            mov b, [d]
2808   149B 38 00 00      mov c, 0
2809   149E 11            mov a, b
2810   149F FD 7D         dec b
2811   14A1 FA F5 FF      lea d, [bp + -11] ; $i
2812   14A4 FD 43         mov [d], b
2813   14A6 27            mov b, a
2814   14A7             ; putchar(digits[i]); 
2815   14A7                             
2816   14A7             ; --- START FUNCTION CALL
2817   14A7                             
2818   14A7 FA F7 FF      lea d, [bp + -9] ; $digits
2819   14AA D7            push a
2820   14AB DA            push d
2821   14AC                             
2822   14AC FA F5 FF      lea d, [bp + -11] ; $i
2823   14AF 2A            mov b, [d]
2824   14B0 38 00 00      mov c, 0
2825   14B3 E7            pop d
2826   14B4 5A            add d, b
2827   14B5 E4            pop a
2828   14B6 32            mov bl, [d]
2829   14B7 A7 00         mov bh, 0
2830   14B9 38 00 00      mov c, 0
2831   14BC DD            push bl
2832   14BD 07 C8 14      call putchar
2833   14C0 51 01 00      add sp, 1
2834   14C3             ; --- END FUNCTION CALL
2835   14C3 0A 7E 14      jmp _while33_cond
2836   14C6             _while33_exit:
2837   14C6 F9            leave
2838   14C7 09            ret
2839   14C8             
2840   14C8             putchar:
2841   14C8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2842   14CB             ; --- BEGIN INLINE ASM SEGMENT
2843   14CB FA 05 00      lea d, [bp + 5] ; $c
2844   14CE 1E            mov al, [d]
2845   14CF 23            mov ah, al
2846   14D0 19 00         mov al, 0
2847   14D2 05 03         syscall sys_io      ; char in AH
2848   14D4             ; --- END INLINE ASM SEGMENT
2849   14D4 F9            leave
2850   14D5 09            ret
2851   14D6             
2852   14D6             print_unsigned_long:
2853   14D6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2854   14D9             ; char digits[10]; 
2855   14D9 52 0A 00      sub sp, 10
2856   14DC             ; int i; 
2857   14DC 52 02 00      sub sp, 2
2858   14DF             ; i = 0; 
2859   14DF FA F5 FF      lea d, [bp + -11] ; $i
2860   14E2 DA            push d
2861   14E3                             
2862   14E3 FD 2E 00 00   mov32 cb, $00000000
2862   14E7 00 00 
2863   14E9 E7            pop d
2864   14EA FD 43         mov [d], b
2865   14EC             ; if(num == 0){ 
2866   14EC             _if34_cond:
2867   14EC                             
2868   14EC FA 05 00      lea d, [bp + 5] ; $num
2869   14EF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2870   14F2 FD 39         mov c, b ; And place it into C
2871   14F4 2A            mov b, [d] ; Lower Word in B
2872   14F5             ; --- START RELATIONAL
2873   14F5 D7            push a
2874   14F6 FD D8         push g
2875   14F8 11            mov a, b
2876   14F9 FD 7A         mov g, c
2877   14FB FD 2E 00 00   mov32 cb, $00000000
2877   14FF 00 00 
2878   1501 FD AF         cmp32 ga, cb
2879   1503 FD 71         seq ; ==
2880   1505 FD F1         pop g
2881   1507 E4            pop a
2882   1508             ; --- END RELATIONAL
2883   1508 C0 00 00      cmp b, 0
2884   150B C6 20 15      je _if34_exit
2885   150E             _if34_TRUE:
2886   150E             ; putchar('0'); 
2887   150E                             
2888   150E             ; --- START FUNCTION CALL
2889   150E                             
2890   150E FD 2E 30 00   mov32 cb, $00000030
2890   1512 00 00 
2891   1514 DD            push bl
2892   1515 07 C8 14      call putchar
2893   1518 51 01 00      add sp, 1
2894   151B             ; --- END FUNCTION CALL
2895   151B             ; return; 
2896   151B F9            leave
2897   151C 09            ret
2898   151D 0A 20 15      jmp _if34_exit
2899   1520             _if34_exit:
2900   1520             ; while (num > 0) { 
2901   1520             _while35_cond:
2902   1520                             
2903   1520 FA 05 00      lea d, [bp + 5] ; $num
2904   1523 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2905   1526 FD 39         mov c, b ; And place it into C
2906   1528 2A            mov b, [d] ; Lower Word in B
2907   1529             ; --- START RELATIONAL
2908   1529 D7            push a
2909   152A FD D8         push g
2910   152C 11            mov a, b
2911   152D FD 7A         mov g, c
2912   152F FD 2E 00 00   mov32 cb, $00000000
2912   1533 00 00 
2913   1535 FD AF         cmp32 ga, cb
2914   1537 FD 81         sgu
2915   1539 FD F1         pop g
2916   153B E4            pop a
2917   153C             ; --- END RELATIONAL
2918   153C C0 00 00      cmp b, 0
2919   153F C6 C0 15      je _while35_exit
2920   1542             _while35_block:
2921   1542             ; digits[i] = '0' + (num % 10); 
2922   1542 FA F7 FF      lea d, [bp + -9] ; $digits
2923   1545 D7            push a
2924   1546 DA            push d
2925   1547                             
2926   1547 FA F5 FF      lea d, [bp + -11] ; $i
2927   154A 2A            mov b, [d]
2928   154B 38 00 00      mov c, 0
2929   154E E7            pop d
2930   154F 5A            add d, b
2931   1550 E4            pop a
2932   1551 DA            push d
2933   1552                             
2934   1552 FD 2E 30 00   mov32 cb, $00000030
2934   1556 00 00 
2935   1558             ; --- START TERMS
2936   1558 D7            push a
2937   1559 11            mov a, b
2938   155A                             
2939   155A FA 05 00      lea d, [bp + 5] ; $num
2940   155D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2941   1560 FD 39         mov c, b ; And place it into C
2942   1562 2A            mov b, [d] ; Lower Word in B
2943   1563             ; --- START FACTORS
2944   1563 D7            push a
2945   1564 FD D8         push g
2946   1566 11            mov a, b
2947   1567 FD 7A         mov g, c
2948   1569 FD 2E 0A 00   mov32 cb, $0000000a
2948   156D 00 00 
2949   156F FD D8         push g ; save 'g' as the div instruction uses it
2950   1571 AE            div a, b ; %, a: quotient, b: remainder
2951   1572 11            mov a, b
2952   1573 FD F1         pop g
2953   1575 FD 38         mov c, g
2954   1577 27            mov b, a
2955   1578 FD F1         pop g
2956   157A E4            pop a
2957   157B             ; --- END FACTORS
2958   157B FD 15         add32 cb, ga
2959   157D E4            pop a
2960   157E             ; --- END TERMS
2961   157E E7            pop d
2962   157F FD 3E         mov [d], bl
2963   1581             ; num = num / 10; 
2964   1581 FA 05 00      lea d, [bp + 5] ; $num
2965   1584 DA            push d
2966   1585                             
2967   1585 FA 05 00      lea d, [bp + 5] ; $num
2968   1588 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2969   158B FD 39         mov c, b ; And place it into C
2970   158D 2A            mov b, [d] ; Lower Word in B
2971   158E             ; --- START FACTORS
2972   158E D7            push a
2973   158F FD D8         push g
2974   1591 11            mov a, b
2975   1592 FD 7A         mov g, c
2976   1594 FD 2E 0A 00   mov32 cb, $0000000a
2976   1598 00 00 
2977   159A FD D8         push g ; save 'g' as the div instruction uses it
2978   159C AE            div a, b ; /, a: quotient, b: remainder
2979   159D FD F1         pop g
2980   159F FD 38         mov c, g
2981   15A1 27            mov b, a
2982   15A2 FD F1         pop g
2983   15A4 E4            pop a
2984   15A5             ; --- END FACTORS
2985   15A5 E7            pop d
2986   15A6 FD 43         mov [d], b
2987   15A8 28            mov b, c
2988   15A9 FD 44 02 00   mov [d + 2], b
2989   15AD             ; i++; 
2990   15AD                             
2991   15AD FA F5 FF      lea d, [bp + -11] ; $i
2992   15B0 2A            mov b, [d]
2993   15B1 38 00 00      mov c, 0
2994   15B4 11            mov a, b
2995   15B5 FD 77         inc b
2996   15B7 FA F5 FF      lea d, [bp + -11] ; $i
2997   15BA FD 43         mov [d], b
2998   15BC 27            mov b, a
2999   15BD 0A 20 15      jmp _while35_cond
3000   15C0             _while35_exit:
3001   15C0             ; while (i > 0) { 
3002   15C0             _while38_cond:
3003   15C0                             
3004   15C0 FA F5 FF      lea d, [bp + -11] ; $i
3005   15C3 2A            mov b, [d]
3006   15C4 38 00 00      mov c, 0
3007   15C7             ; --- START RELATIONAL
3008   15C7 D7            push a
3009   15C8 11            mov a, b
3010   15C9 FD 2E 00 00   mov32 cb, $00000000
3010   15CD 00 00 
3011   15CF B0            cmp a, b
3012   15D0 FD 7F         sgt ; >
3013   15D2 E4            pop a
3014   15D3             ; --- END RELATIONAL
3015   15D3 C0 00 00      cmp b, 0
3016   15D6 C6 08 16      je _while38_exit
3017   15D9             _while38_block:
3018   15D9             ; i--; 
3019   15D9                             
3020   15D9 FA F5 FF      lea d, [bp + -11] ; $i
3021   15DC 2A            mov b, [d]
3022   15DD 38 00 00      mov c, 0
3023   15E0 11            mov a, b
3024   15E1 FD 7D         dec b
3025   15E3 FA F5 FF      lea d, [bp + -11] ; $i
3026   15E6 FD 43         mov [d], b
3027   15E8 27            mov b, a
3028   15E9             ; putchar(digits[i]); 
3029   15E9                             
3030   15E9             ; --- START FUNCTION CALL
3031   15E9                             
3032   15E9 FA F7 FF      lea d, [bp + -9] ; $digits
3033   15EC D7            push a
3034   15ED DA            push d
3035   15EE                             
3036   15EE FA F5 FF      lea d, [bp + -11] ; $i
3037   15F1 2A            mov b, [d]
3038   15F2 38 00 00      mov c, 0
3039   15F5 E7            pop d
3040   15F6 5A            add d, b
3041   15F7 E4            pop a
3042   15F8 32            mov bl, [d]
3043   15F9 A7 00         mov bh, 0
3044   15FB 38 00 00      mov c, 0
3045   15FE DD            push bl
3046   15FF 07 C8 14      call putchar
3047   1602 51 01 00      add sp, 1
3048   1605             ; --- END FUNCTION CALL
3049   1605 0A C0 15      jmp _while38_cond
3050   1608             _while38_exit:
3051   1608 F9            leave
3052   1609 09            ret
3053   160A             
3054   160A             printx32:
3055   160A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3056   160D             ; --- BEGIN INLINE ASM SEGMENT
3057   160D FA 05 00      lea d, [bp + 5] ; $hex
3058   1610 2B 02 00      mov b, [d+2]
3059   1613 07 1C 16      call print_u16x_printx32
3060   1616 2A            mov b, [d]
3061   1617 07 1C 16      call print_u16x_printx32
3062   161A             ; --- END INLINE ASM SEGMENT
3063   161A             ; return; 
3064   161A F9            leave
3065   161B 09            ret
3066   161C             ; --- BEGIN INLINE ASM SEGMENT
3067   161C             print_u16x_printx32:
3068   161C D7            push a
3069   161D D8            push b
3070   161E DD            push bl
3071   161F 30            mov bl, bh
3072   1620 07 3E 16      call _itoa_printx32        ; convert bh to char in A
3073   1623 2F            mov bl, al        ; save al
3074   1624 19 00         mov al, 0
3075   1626 05 03         syscall sys_io        ; display AH
3076   1628 24            mov ah, bl        ; retrieve al
3077   1629 19 00         mov al, 0
3078   162B 05 03         syscall sys_io        ; display AL
3079   162D EA            pop bl
3080   162E 07 3E 16      call _itoa_printx32        ; convert bh to char in A
3081   1631 2F            mov bl, al        ; save al
3082   1632 19 00         mov al, 0
3083   1634 05 03         syscall sys_io        ; display AH
3084   1636 24            mov ah, bl        ; retrieve al
3085   1637 19 00         mov al, 0
3086   1639 05 03         syscall sys_io        ; display AL
3087   163B E5            pop b
3088   163C E4            pop a
3089   163D 09            ret
3090   163E             _itoa_printx32:
3091   163E DA            push d
3092   163F D8            push b
3093   1640 A7 00         mov bh, 0
3094   1642 FD A4 04      shr bl, 4  
3095   1645 74            mov d, b
3096   1646 1F 58 16      mov al, [d + s_hex_digits_printx32]
3097   1649 23            mov ah, al
3098   164A E5            pop b
3099   164B D8            push b
3100   164C A7 00         mov bh, 0
3101   164E FD 87 0F      and bl, $0F
3102   1651 74            mov d, b
3103   1652 1F 58 16      mov al, [d + s_hex_digits_printx32]
3104   1655 E5            pop b
3105   1656 E7            pop d
3106   1657 09            ret
3107   1658 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
3107   165C 34 35 36 37 
3107   1660 38 39 41 42 
3107   1664 43 44 45 46 
3108   1668             ; --- END INLINE ASM SEGMENT
3109   1668 F9            leave
3110   1669 09            ret
3111   166A             
3112   166A             err:
3113   166A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3114   166D             ; print(e); 
3115   166D                             
3116   166D             ; --- START FUNCTION CALL
3117   166D                             
3118   166D FA 05 00      lea d, [bp + 5] ; $e
3119   1670 2A            mov b, [d]
3120   1671 38 00 00      mov c, 0
3121   1674 FD AB         swp b
3122   1676 D8            push b
3123   1677 07 7F 16      call print
3124   167A 51 02 00      add sp, 2
3125   167D             ; --- END FUNCTION CALL
3126   167D F9            leave
3127   167E 09            ret
3128   167F             
3129   167F             print:
3130   167F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3131   1682             ; --- BEGIN INLINE ASM SEGMENT
3132   1682 FA 05 00      lea d, [bp + 5] ; $s
3133   1685 FD 2A         mov d, [d]
3134   1687             _puts_L1_print:
3135   1687 1E            mov al, [d]
3136   1688 B9 00         cmp al, 0
3137   168A C6 96 16      jz _puts_END_print
3138   168D 23            mov ah, al
3139   168E 19 00         mov al, 0
3140   1690 05 03         syscall sys_io
3141   1692 79            inc d
3142   1693 0A 87 16      jmp _puts_L1_print
3143   1696             _puts_END_print:
3144   1696             ; --- END INLINE ASM SEGMENT
3145   1696 F9            leave
3146   1697 09            ret
3147   1698             
3148   1698             print_signed:
3149   1698 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3150   169B             ; char digits[5]; 
3151   169B 52 05 00      sub sp, 5
3152   169E             ; int i = 0; 
3153   169E 52 02 00      sub sp, 2
3154   16A1             ; --- START LOCAL VAR INITIALIZATION
3155   16A1 FA FA FF      lea d, [bp + -6] ; $i
3156   16A4 DA            push d
3157   16A5                             
3158   16A5 FD 2E 00 00   mov32 cb, $00000000
3158   16A9 00 00 
3159   16AB E7            pop d
3160   16AC FD 43         mov [d], b
3161   16AE             ; --- END LOCAL VAR INITIALIZATION
3162   16AE             ; if (num < 0) { 
3163   16AE             _if39_cond:
3164   16AE                             
3165   16AE FA 05 00      lea d, [bp + 5] ; $num
3166   16B1 2A            mov b, [d]
3167   16B2 38 00 00      mov c, 0
3168   16B5             ; --- START RELATIONAL
3169   16B5 D7            push a
3170   16B6 11            mov a, b
3171   16B7 FD 2E 00 00   mov32 cb, $00000000
3171   16BB 00 00 
3172   16BD B0            cmp a, b
3173   16BE FD 73         slt ; < (signed)
3174   16C0 E4            pop a
3175   16C1             ; --- END RELATIONAL
3176   16C1 C0 00 00      cmp b, 0
3177   16C4 C6 E7 16      je _if39_else
3178   16C7             _if39_TRUE:
3179   16C7             ; putchar('-'); 
3180   16C7                             
3181   16C7             ; --- START FUNCTION CALL
3182   16C7                             
3183   16C7 FD 2E 2D 00   mov32 cb, $0000002d
3183   16CB 00 00 
3184   16CD DD            push bl
3185   16CE 07 C8 14      call putchar
3186   16D1 51 01 00      add sp, 1
3187   16D4             ; --- END FUNCTION CALL
3188   16D4             ; num = -num; 
3189   16D4 FA 05 00      lea d, [bp + 5] ; $num
3190   16D7 DA            push d
3191   16D8                             
3192   16D8 FA 05 00      lea d, [bp + 5] ; $num
3193   16DB 2A            mov b, [d]
3194   16DC 38 00 00      mov c, 0
3195   16DF FD 97         neg b
3196   16E1 E7            pop d
3197   16E2 FD 43         mov [d], b
3198   16E4 0A 12 17      jmp _if39_exit
3199   16E7             _if39_else:
3200   16E7             ; if (num == 0) { 
3201   16E7             _if40_cond:
3202   16E7                             
3203   16E7 FA 05 00      lea d, [bp + 5] ; $num
3204   16EA 2A            mov b, [d]
3205   16EB 38 00 00      mov c, 0
3206   16EE             ; --- START RELATIONAL
3207   16EE D7            push a
3208   16EF 11            mov a, b
3209   16F0 FD 2E 00 00   mov32 cb, $00000000
3209   16F4 00 00 
3210   16F6 B0            cmp a, b
3211   16F7 FD 71         seq ; ==
3212   16F9 E4            pop a
3213   16FA             ; --- END RELATIONAL
3214   16FA C0 00 00      cmp b, 0
3215   16FD C6 12 17      je _if40_exit
3216   1700             _if40_TRUE:
3217   1700             ; putchar('0'); 
3218   1700                             
3219   1700             ; --- START FUNCTION CALL
3220   1700                             
3221   1700 FD 2E 30 00   mov32 cb, $00000030
3221   1704 00 00 
3222   1706 DD            push bl
3223   1707 07 C8 14      call putchar
3224   170A 51 01 00      add sp, 1
3225   170D             ; --- END FUNCTION CALL
3226   170D             ; return; 
3227   170D F9            leave
3228   170E 09            ret
3229   170F 0A 12 17      jmp _if40_exit
3230   1712             _if40_exit:
3231   1712             _if39_exit:
3232   1712             ; while (num > 0) { 
3233   1712             _while41_cond:
3234   1712                             
3235   1712 FA 05 00      lea d, [bp + 5] ; $num
3236   1715 2A            mov b, [d]
3237   1716 38 00 00      mov c, 0
3238   1719             ; --- START RELATIONAL
3239   1719 D7            push a
3240   171A 11            mov a, b
3241   171B FD 2E 00 00   mov32 cb, $00000000
3241   171F 00 00 
3242   1721 B0            cmp a, b
3243   1722 FD 7F         sgt ; >
3244   1724 E4            pop a
3245   1725             ; --- END RELATIONAL
3246   1725 C0 00 00      cmp b, 0
3247   1728 C6 9F 17      je _while41_exit
3248   172B             _while41_block:
3249   172B             ; digits[i] = '0' + (num % 10); 
3250   172B FA FC FF      lea d, [bp + -4] ; $digits
3251   172E D7            push a
3252   172F DA            push d
3253   1730                             
3254   1730 FA FA FF      lea d, [bp + -6] ; $i
3255   1733 2A            mov b, [d]
3256   1734 38 00 00      mov c, 0
3257   1737 E7            pop d
3258   1738 5A            add d, b
3259   1739 E4            pop a
3260   173A DA            push d
3261   173B                             
3262   173B FD 2E 30 00   mov32 cb, $00000030
3262   173F 00 00 
3263   1741             ; --- START TERMS
3264   1741 D7            push a
3265   1742 11            mov a, b
3266   1743                             
3267   1743 FA 05 00      lea d, [bp + 5] ; $num
3268   1746 2A            mov b, [d]
3269   1747 38 00 00      mov c, 0
3270   174A             ; --- START FACTORS
3271   174A D7            push a
3272   174B FD D8         push g
3273   174D 11            mov a, b
3274   174E FD 7A         mov g, c
3275   1750 FD 2E 0A 00   mov32 cb, $0000000a
3275   1754 00 00 
3276   1756 FD D8         push g ; save 'g' as the div instruction uses it
3277   1758 AE            div a, b ; %, a: quotient, b: remainder
3278   1759 11            mov a, b
3279   175A FD F1         pop g
3280   175C FD 38         mov c, g
3281   175E 27            mov b, a
3282   175F FD F1         pop g
3283   1761 E4            pop a
3284   1762             ; --- END FACTORS
3285   1762 56            add b, a
3286   1763 E4            pop a
3287   1764             ; --- END TERMS
3288   1764 E7            pop d
3289   1765 FD 3E         mov [d], bl
3290   1767             ; num = num / 10; 
3291   1767 FA 05 00      lea d, [bp + 5] ; $num
3292   176A DA            push d
3293   176B                             
3294   176B FA 05 00      lea d, [bp + 5] ; $num
3295   176E 2A            mov b, [d]
3296   176F 38 00 00      mov c, 0
3297   1772             ; --- START FACTORS
3298   1772 D7            push a
3299   1773 FD D8         push g
3300   1775 11            mov a, b
3301   1776 FD 7A         mov g, c
3302   1778 FD 2E 0A 00   mov32 cb, $0000000a
3302   177C 00 00 
3303   177E FD D8         push g ; save 'g' as the div instruction uses it
3304   1780 AE            div a, b ; /, a: quotient, b: remainder
3305   1781 FD F1         pop g
3306   1783 FD 38         mov c, g
3307   1785 27            mov b, a
3308   1786 FD F1         pop g
3309   1788 E4            pop a
3310   1789             ; --- END FACTORS
3311   1789 E7            pop d
3312   178A FD 43         mov [d], b
3313   178C             ; i++; 
3314   178C                             
3315   178C FA FA FF      lea d, [bp + -6] ; $i
3316   178F 2A            mov b, [d]
3317   1790 38 00 00      mov c, 0
3318   1793 11            mov a, b
3319   1794 FD 77         inc b
3320   1796 FA FA FF      lea d, [bp + -6] ; $i
3321   1799 FD 43         mov [d], b
3322   179B 27            mov b, a
3323   179C 0A 12 17      jmp _while41_cond
3324   179F             _while41_exit:
3325   179F             ; while (i > 0) { 
3326   179F             _while44_cond:
3327   179F                             
3328   179F FA FA FF      lea d, [bp + -6] ; $i
3329   17A2 2A            mov b, [d]
3330   17A3 38 00 00      mov c, 0
3331   17A6             ; --- START RELATIONAL
3332   17A6 D7            push a
3333   17A7 11            mov a, b
3334   17A8 FD 2E 00 00   mov32 cb, $00000000
3334   17AC 00 00 
3335   17AE B0            cmp a, b
3336   17AF FD 7F         sgt ; >
3337   17B1 E4            pop a
3338   17B2             ; --- END RELATIONAL
3339   17B2 C0 00 00      cmp b, 0
3340   17B5 C6 E7 17      je _while44_exit
3341   17B8             _while44_block:
3342   17B8             ; i--; 
3343   17B8                             
3344   17B8 FA FA FF      lea d, [bp + -6] ; $i
3345   17BB 2A            mov b, [d]
3346   17BC 38 00 00      mov c, 0
3347   17BF 11            mov a, b
3348   17C0 FD 7D         dec b
3349   17C2 FA FA FF      lea d, [bp + -6] ; $i
3350   17C5 FD 43         mov [d], b
3351   17C7 27            mov b, a
3352   17C8             ; putchar(digits[i]); 
3353   17C8                             
3354   17C8             ; --- START FUNCTION CALL
3355   17C8                             
3356   17C8 FA FC FF      lea d, [bp + -4] ; $digits
3357   17CB D7            push a
3358   17CC DA            push d
3359   17CD                             
3360   17CD FA FA FF      lea d, [bp + -6] ; $i
3361   17D0 2A            mov b, [d]
3362   17D1 38 00 00      mov c, 0
3363   17D4 E7            pop d
3364   17D5 5A            add d, b
3365   17D6 E4            pop a
3366   17D7 32            mov bl, [d]
3367   17D8 A7 00         mov bh, 0
3368   17DA 38 00 00      mov c, 0
3369   17DD DD            push bl
3370   17DE 07 C8 14      call putchar
3371   17E1 51 01 00      add sp, 1
3372   17E4             ; --- END FUNCTION CALL
3373   17E4 0A 9F 17      jmp _while44_cond
3374   17E7             _while44_exit:
3375   17E7 F9            leave
3376   17E8 09            ret
3377   17E9             
3378   17E9             print_unsigned:
3379   17E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3380   17EC             ; char digits[5]; 
3381   17EC 52 05 00      sub sp, 5
3382   17EF             ; int i; 
3383   17EF 52 02 00      sub sp, 2
3384   17F2             ; i = 0; 
3385   17F2 FA FA FF      lea d, [bp + -6] ; $i
3386   17F5 DA            push d
3387   17F6                             
3388   17F6 FD 2E 00 00   mov32 cb, $00000000
3388   17FA 00 00 
3389   17FC E7            pop d
3390   17FD FD 43         mov [d], b
3391   17FF             ; if(num == 0){ 
3392   17FF             _if45_cond:
3393   17FF                             
3394   17FF FA 05 00      lea d, [bp + 5] ; $num
3395   1802 2A            mov b, [d]
3396   1803 38 00 00      mov c, 0
3397   1806             ; --- START RELATIONAL
3398   1806 D7            push a
3399   1807 11            mov a, b
3400   1808 FD 2E 00 00   mov32 cb, $00000000
3400   180C 00 00 
3401   180E B0            cmp a, b
3402   180F FD 71         seq ; ==
3403   1811 E4            pop a
3404   1812             ; --- END RELATIONAL
3405   1812 C0 00 00      cmp b, 0
3406   1815 C6 2A 18      je _if45_exit
3407   1818             _if45_TRUE:
3408   1818             ; putchar('0'); 
3409   1818                             
3410   1818             ; --- START FUNCTION CALL
3411   1818                             
3412   1818 FD 2E 30 00   mov32 cb, $00000030
3412   181C 00 00 
3413   181E DD            push bl
3414   181F 07 C8 14      call putchar
3415   1822 51 01 00      add sp, 1
3416   1825             ; --- END FUNCTION CALL
3417   1825             ; return; 
3418   1825 F9            leave
3419   1826 09            ret
3420   1827 0A 2A 18      jmp _if45_exit
3421   182A             _if45_exit:
3422   182A             ; while (num > 0) { 
3423   182A             _while46_cond:
3424   182A                             
3425   182A FA 05 00      lea d, [bp + 5] ; $num
3426   182D 2A            mov b, [d]
3427   182E 38 00 00      mov c, 0
3428   1831             ; --- START RELATIONAL
3429   1831 D7            push a
3430   1832 11            mov a, b
3431   1833 FD 2E 00 00   mov32 cb, $00000000
3431   1837 00 00 
3432   1839 B0            cmp a, b
3433   183A FD 81         sgu ; > (unsigned)
3434   183C E4            pop a
3435   183D             ; --- END RELATIONAL
3436   183D C0 00 00      cmp b, 0
3437   1840 C6 B7 18      je _while46_exit
3438   1843             _while46_block:
3439   1843             ; digits[i] = '0' + (num % 10); 
3440   1843 FA FC FF      lea d, [bp + -4] ; $digits
3441   1846 D7            push a
3442   1847 DA            push d
3443   1848                             
3444   1848 FA FA FF      lea d, [bp + -6] ; $i
3445   184B 2A            mov b, [d]
3446   184C 38 00 00      mov c, 0
3447   184F E7            pop d
3448   1850 5A            add d, b
3449   1851 E4            pop a
3450   1852 DA            push d
3451   1853                             
3452   1853 FD 2E 30 00   mov32 cb, $00000030
3452   1857 00 00 
3453   1859             ; --- START TERMS
3454   1859 D7            push a
3455   185A 11            mov a, b
3456   185B                             
3457   185B FA 05 00      lea d, [bp + 5] ; $num
3458   185E 2A            mov b, [d]
3459   185F 38 00 00      mov c, 0
3460   1862             ; --- START FACTORS
3461   1862 D7            push a
3462   1863 FD D8         push g
3463   1865 11            mov a, b
3464   1866 FD 7A         mov g, c
3465   1868 FD 2E 0A 00   mov32 cb, $0000000a
3465   186C 00 00 
3466   186E FD D8         push g ; save 'g' as the div instruction uses it
3467   1870 AE            div a, b ; %, a: quotient, b: remainder
3468   1871 11            mov a, b
3469   1872 FD F1         pop g
3470   1874 FD 38         mov c, g
3471   1876 27            mov b, a
3472   1877 FD F1         pop g
3473   1879 E4            pop a
3474   187A             ; --- END FACTORS
3475   187A 56            add b, a
3476   187B E4            pop a
3477   187C             ; --- END TERMS
3478   187C E7            pop d
3479   187D FD 3E         mov [d], bl
3480   187F             ; num = num / 10; 
3481   187F FA 05 00      lea d, [bp + 5] ; $num
3482   1882 DA            push d
3483   1883                             
3484   1883 FA 05 00      lea d, [bp + 5] ; $num
3485   1886 2A            mov b, [d]
3486   1887 38 00 00      mov c, 0
3487   188A             ; --- START FACTORS
3488   188A D7            push a
3489   188B FD D8         push g
3490   188D 11            mov a, b
3491   188E FD 7A         mov g, c
3492   1890 FD 2E 0A 00   mov32 cb, $0000000a
3492   1894 00 00 
3493   1896 FD D8         push g ; save 'g' as the div instruction uses it
3494   1898 AE            div a, b ; /, a: quotient, b: remainder
3495   1899 FD F1         pop g
3496   189B FD 38         mov c, g
3497   189D 27            mov b, a
3498   189E FD F1         pop g
3499   18A0 E4            pop a
3500   18A1             ; --- END FACTORS
3501   18A1 E7            pop d
3502   18A2 FD 43         mov [d], b
3503   18A4             ; i++; 
3504   18A4                             
3505   18A4 FA FA FF      lea d, [bp + -6] ; $i
3506   18A7 2A            mov b, [d]
3507   18A8 38 00 00      mov c, 0
3508   18AB 11            mov a, b
3509   18AC FD 77         inc b
3510   18AE FA FA FF      lea d, [bp + -6] ; $i
3511   18B1 FD 43         mov [d], b
3512   18B3 27            mov b, a
3513   18B4 0A 2A 18      jmp _while46_cond
3514   18B7             _while46_exit:
3515   18B7             ; while (i > 0) { 
3516   18B7             _while49_cond:
3517   18B7                             
3518   18B7 FA FA FF      lea d, [bp + -6] ; $i
3519   18BA 2A            mov b, [d]
3520   18BB 38 00 00      mov c, 0
3521   18BE             ; --- START RELATIONAL
3522   18BE D7            push a
3523   18BF 11            mov a, b
3524   18C0 FD 2E 00 00   mov32 cb, $00000000
3524   18C4 00 00 
3525   18C6 B0            cmp a, b
3526   18C7 FD 7F         sgt ; >
3527   18C9 E4            pop a
3528   18CA             ; --- END RELATIONAL
3529   18CA C0 00 00      cmp b, 0
3530   18CD C6 FF 18      je _while49_exit
3531   18D0             _while49_block:
3532   18D0             ; i--; 
3533   18D0                             
3534   18D0 FA FA FF      lea d, [bp + -6] ; $i
3535   18D3 2A            mov b, [d]
3536   18D4 38 00 00      mov c, 0
3537   18D7 11            mov a, b
3538   18D8 FD 7D         dec b
3539   18DA FA FA FF      lea d, [bp + -6] ; $i
3540   18DD FD 43         mov [d], b
3541   18DF 27            mov b, a
3542   18E0             ; putchar(digits[i]); 
3543   18E0                             
3544   18E0             ; --- START FUNCTION CALL
3545   18E0                             
3546   18E0 FA FC FF      lea d, [bp + -4] ; $digits
3547   18E3 D7            push a
3548   18E4 DA            push d
3549   18E5                             
3550   18E5 FA FA FF      lea d, [bp + -6] ; $i
3551   18E8 2A            mov b, [d]
3552   18E9 38 00 00      mov c, 0
3553   18EC E7            pop d
3554   18ED 5A            add d, b
3555   18EE E4            pop a
3556   18EF 32            mov bl, [d]
3557   18F0 A7 00         mov bh, 0
3558   18F2 38 00 00      mov c, 0
3559   18F5 DD            push bl
3560   18F6 07 C8 14      call putchar
3561   18F9 51 01 00      add sp, 1
3562   18FC             ; --- END FUNCTION CALL
3563   18FC 0A B7 18      jmp _while49_cond
3564   18FF             _while49_exit:
3565   18FF F9            leave
3566   1900 09            ret
3567   1901             
3568   1901             printx16:
3569   1901 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3570   1904             ; --- BEGIN INLINE ASM SEGMENT
3571   1904 FA 05 00      lea d, [bp + 5] ; $hex
3572   1907 2A            mov b, [d]
3573   1908             print_u16x_printx16:
3574   1908 DD            push bl
3575   1909 30            mov bl, bh
3576   190A 07 27 19      call _itoa_printx16        ; convert bh to char in A
3577   190D 2F            mov bl, al        ; save al
3578   190E 19 00         mov al, 0
3579   1910 05 03         syscall sys_io        ; display AH
3580   1912 24            mov ah, bl        ; retrieve al
3581   1913 19 00         mov al, 0
3582   1915 05 03         syscall sys_io        ; display AL
3583   1917 EA            pop bl
3584   1918 07 27 19      call _itoa_printx16        ; convert bh to char in A
3585   191B 2F            mov bl, al        ; save al
3586   191C 19 00         mov al, 0
3587   191E 05 03         syscall sys_io        ; display AH
3588   1920 24            mov ah, bl        ; retrieve al
3589   1921 19 00         mov al, 0
3590   1923 05 03         syscall sys_io        ; display AL
3591   1925             ; --- END INLINE ASM SEGMENT
3592   1925             ; return; 
3593   1925 F9            leave
3594   1926 09            ret
3595   1927             ; --- BEGIN INLINE ASM SEGMENT
3596   1927             _itoa_printx16:
3597   1927 DA            push d
3598   1928 D8            push b
3599   1929 A7 00         mov bh, 0
3600   192B FD A4 04      shr bl, 4  
3601   192E 74            mov d, b
3602   192F 1F 41 19      mov al, [d + s_hex_digits_printx16]
3603   1932 23            mov ah, al
3604   1933 E5            pop b
3605   1934 D8            push b
3606   1935 A7 00         mov bh, 0
3607   1937 FD 87 0F      and bl, $0F
3608   193A 74            mov d, b
3609   193B 1F 41 19      mov al, [d + s_hex_digits_printx16]
3610   193E E5            pop b
3611   193F E7            pop d
3612   1940 09            ret
3613   1941 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
3613   1945 34 35 36 37 
3613   1949 38 39 41 42 
3613   194D 43 44 45 46 
3614   1951             ; --- END INLINE ASM SEGMENT
3615   1951 F9            leave
3616   1952 09            ret
3617   1953             
3618   1953             gets:
3619   1953 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3620   1956             ; --- BEGIN INLINE ASM SEGMENT
3621   1956 FA 05 00      lea d, [bp + 5] ; $s
3622   1959 15            mov a, [d]
3623   195A 3C            mov d, a
3624   195B 07 70 19      call _gets_gets
3625   195E             ; --- END INLINE ASM SEGMENT
3626   195E             ; return strlen(s); 
3627   195E                             
3628   195E             ; --- START FUNCTION CALL
3629   195E                             
3630   195E FA 05 00      lea d, [bp + 5] ; $s
3631   1961 2A            mov b, [d]
3632   1962 38 00 00      mov c, 0
3633   1965 FD AB         swp b
3634   1967 D8            push b
3635   1968 07 11 1A      call strlen
3636   196B 51 02 00      add sp, 2
3637   196E             ; --- END FUNCTION CALL
3638   196E F9            leave
3639   196F 09            ret
3640   1970             ; --- BEGIN INLINE ASM SEGMENT
3641   1970             _gets_gets:
3642   1970 D7            push a
3643   1971 DA            push d
3644   1972             _gets_loop_gets:
3645   1972 19 01         mov al, 1
3646   1974 05 03         syscall sys_io      ; receive in AH
3647   1976 B9 00         cmp al, 0        ; check error code (AL)
3648   1978 C6 72 19      je _gets_loop_gets      ; if no char received, retry
3649   197B 76 1B         cmp ah, 27
3650   197D C6 9E 19      je _gets_ansi_esc_gets
3651   1980 76 0A         cmp ah, $0A        ; LF
3652   1982 C6 09 1A      je _gets_end_gets
3653   1985 76 0D         cmp ah, $0D        ; CR
3654   1987 C6 09 1A      je _gets_end_gets
3655   198A 76 5C         cmp ah, $5C        ; '\\'
3656   198C C6 CA 19      je _gets_escape_gets
3657   198F 76 08         cmp ah, $08      ; check for backspace
3658   1991 C6 9A 19      je _gets_backspace_gets
3659   1994 1A            mov al, ah
3660   1995 3E            mov [d], al
3661   1996 79            inc d
3662   1997 0A 72 19      jmp _gets_loop_gets
3663   199A             _gets_backspace_gets:
3664   199A 7F            dec d
3665   199B 0A 72 19      jmp _gets_loop_gets
3666   199E             _gets_ansi_esc_gets:
3667   199E 19 01         mov al, 1
3668   19A0 05 03         syscall sys_io        ; receive in AH without echo
3669   19A2 B9 00         cmp al, 0          ; check error code (AL)
3670   19A4 C6 9E 19      je _gets_ansi_esc_gets    ; if no char received, retry
3671   19A7 76 5B         cmp ah, '['
3672   19A9 C7 72 19      jne _gets_loop_gets
3673   19AC             _gets_ansi_esc_2_gets:
3674   19AC 19 01         mov al, 1
3675   19AE 05 03         syscall sys_io          ; receive in AH without echo
3676   19B0 B9 00         cmp al, 0            ; check error code (AL)
3677   19B2 C6 AC 19      je _gets_ansi_esc_2_gets  ; if no char received, retry
3678   19B5 76 44         cmp ah, 'D'
3679   19B7 C6 C2 19      je _gets_left_arrow_gets
3680   19BA 76 43         cmp ah, 'C'
3681   19BC C6 C6 19      je _gets_right_arrow_gets
3682   19BF 0A 72 19      jmp _gets_loop_gets
3683   19C2             _gets_left_arrow_gets:
3684   19C2 7F            dec d
3685   19C3 0A 72 19      jmp _gets_loop_gets
3686   19C6             _gets_right_arrow_gets:
3687   19C6 79            inc d
3688   19C7 0A 72 19      jmp _gets_loop_gets
3689   19CA             _gets_escape_gets:
3690   19CA 19 01         mov al, 1
3691   19CC 05 03         syscall sys_io      ; receive in AH
3692   19CE B9 00         cmp al, 0        ; check error code (AL)
3693   19D0 C6 CA 19      je _gets_escape_gets      ; if no char received, retry
3694   19D3 76 6E         cmp ah, 'n'
3695   19D5 C6 F4 19      je _gets_LF_gets
3696   19D8 76 72         cmp ah, 'r'
3697   19DA C6 FB 19      je _gets_CR_gets
3698   19DD 76 30         cmp ah, '0'
3699   19DF C6 02 1A      je _gets_NULL_gets
3700   19E2 76 5C         cmp ah, $5C  
3701   19E4 C6 ED 19      je _gets_slash_gets
3702   19E7 1A            mov al, ah        ; if not a known escape, it is just a normal letter
3703   19E8 3E            mov [d], al
3704   19E9 79            inc d
3705   19EA 0A 72 19      jmp _gets_loop_gets
3706   19ED             _gets_slash_gets:
3707   19ED 19 5C         mov al, $5C
3708   19EF 3E            mov [d], al
3709   19F0 79            inc d
3710   19F1 0A 72 19      jmp _gets_loop_gets
3711   19F4             _gets_LF_gets:
3712   19F4 19 0A         mov al, $0A
3713   19F6 3E            mov [d], al
3714   19F7 79            inc d
3715   19F8 0A 72 19      jmp _gets_loop_gets
3716   19FB             _gets_CR_gets:
3717   19FB 19 0D         mov al, $0D
3718   19FD 3E            mov [d], al
3719   19FE 79            inc d
3720   19FF 0A 72 19      jmp _gets_loop_gets
3721   1A02             _gets_NULL_gets:
3722   1A02 19 00         mov al, $00
3723   1A04 3E            mov [d], al
3724   1A05 79            inc d
3725   1A06 0A 72 19      jmp _gets_loop_gets
3726   1A09             _gets_end_gets:
3727   1A09 19 00         mov al, 0
3728   1A0B 3E            mov [d], al        ; terminate string
3729   1A0C E7            pop d
3730   1A0D E4            pop a
3731   1A0E 09            ret
3732   1A0F             ; --- END INLINE ASM SEGMENT
3733   1A0F F9            leave
3734   1A10 09            ret
3735   1A11             
3736   1A11             strlen:
3737   1A11 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3738   1A14             ; int length; 
3739   1A14 52 02 00      sub sp, 2
3740   1A17             ; length = 0; 
3741   1A17 FA FF FF      lea d, [bp + -1] ; $length
3742   1A1A DA            push d
3743   1A1B                             
3744   1A1B FD 2E 00 00   mov32 cb, $00000000
3744   1A1F 00 00 
3745   1A21 E7            pop d
3746   1A22 FD 43         mov [d], b
3747   1A24             ; while (str[length] != 0) { 
3748   1A24             _while50_cond:
3749   1A24                             
3750   1A24 FA 05 00      lea d, [bp + 5] ; $str
3751   1A27 FD 2A         mov d, [d]
3752   1A29 D7            push a
3753   1A2A DA            push d
3754   1A2B                             
3755   1A2B FA FF FF      lea d, [bp + -1] ; $length
3756   1A2E 2A            mov b, [d]
3757   1A2F 38 00 00      mov c, 0
3758   1A32 E7            pop d
3759   1A33 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3760   1A37 E4            pop a
3761   1A38 32            mov bl, [d]
3762   1A39 A7 00         mov bh, 0
3763   1A3B 38 00 00      mov c, 0
3764   1A3E             ; --- START RELATIONAL
3765   1A3E D7            push a
3766   1A3F 11            mov a, b
3767   1A40 FD 2E 00 00   mov32 cb, $00000000
3767   1A44 00 00 
3768   1A46 B0            cmp a, b
3769   1A47 FD 72         sneq ; !=
3770   1A49 E4            pop a
3771   1A4A             ; --- END RELATIONAL
3772   1A4A C0 00 00      cmp b, 0
3773   1A4D C6 63 1A      je _while50_exit
3774   1A50             _while50_block:
3775   1A50             ; length++; 
3776   1A50                             
3777   1A50 FA FF FF      lea d, [bp + -1] ; $length
3778   1A53 2A            mov b, [d]
3779   1A54 38 00 00      mov c, 0
3780   1A57 11            mov a, b
3781   1A58 FD 77         inc b
3782   1A5A FA FF FF      lea d, [bp + -1] ; $length
3783   1A5D FD 43         mov [d], b
3784   1A5F 27            mov b, a
3785   1A60 0A 24 1A      jmp _while50_cond
3786   1A63             _while50_exit:
3787   1A63             ; return length; 
3788   1A63                             
3789   1A63 FA FF FF      lea d, [bp + -1] ; $length
3790   1A66 2A            mov b, [d]
3791   1A67 38 00 00      mov c, 0
3792   1A6A F9            leave
3793   1A6B 09            ret
3794   1A6C             ; --- END TEXT SEGMENT
3795   1A6C             
3796   1A6C             ; --- BEGIN DATA SEGMENT
3797   1A6C 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
3797   1A70 45 46 47 48 
3797   1A74 49 4A 4B 4C 
3797   1A78 4D 4E 4F 50 
3797   1A7C 51 52 53 54 
3797   1A80 55 56 57 58 
3797   1A84 59 5A 61 62 
3797   1A88 63 64 65 66 
3797   1A8C 67 68 69 6A 
3797   1A90 6B 6C 6D 6E 
3797   1A94 6F 70 71 72 
3797   1A98 73 74 75 76 
3797   1A9C 77 78 79 7A 
3797   1AA0 30 31 32 33 
3797   1AA4 34 35 36 37 
3797   1AA8 38 39 2B 2F 
3797   1AAC 00 
3798   1AAD 6C 1A       _base64_table: .dw _base64_table_data
3799   1AAF 0A 45 6E 74 _s0: .db "\nEnter a base64 encoded string to decode: ", 0
3799   1AB3 65 72 20 61 
3799   1AB7 20 62 61 73 
3799   1ABB 65 36 34 20 
3799   1ABF 65 6E 63 6F 
3799   1AC3 64 65 64 20 
3799   1AC7 73 74 72 69 
3799   1ACB 6E 67 20 74 
3799   1ACF 6F 20 64 65 
3799   1AD3 63 6F 64 65 
3799   1AD7 3A 20 00 
3800   1ADA 0A 45 6E 63 _s1: .db "\nEncoded string: %s\n", 0
3800   1ADE 6F 64 65 64 
3800   1AE2 20 73 74 72 
3800   1AE6 69 6E 67 3A 
3800   1AEA 20 25 73 0A 
3800   1AEE 00 
3801   1AEF 0A 44 65 63 _s2: .db "\nDecoded string: %s\n", 0
3801   1AF3 6F 64 65 64 
3801   1AF7 20 73 74 72 
3801   1AFB 69 6E 67 3A 
3801   1AFF 20 25 73 0A 
3801   1B03 00 
3802   1B04 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
3802   1B08 70 65 63 74 
3802   1B0C 65 64 20 66 
3802   1B10 6F 72 6D 61 
3802   1B14 74 20 69 6E 
3802   1B18 20 70 72 69 
3802   1B1C 6E 74 66 2E 
3802   1B20 00 
3803   1B21 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
3803   1B25 72 3A 20 55 
3803   1B29 6E 6B 6E 6F 
3803   1B2D 77 6E 20 61 
3803   1B31 72 67 75 6D 
3803   1B35 65 6E 74 20 
3803   1B39 74 79 70 65 
3803   1B3D 2E 0A 00 
3804   1B40             
3805   1B40 42 1B       _heap_top: .dw _heap
3806   1B42 00          _heap: .db 0
3807   1B43             ; --- END DATA SEGMENT
3808   1B43             
3809   1B43             .end
tasm: Number of errors = 0
