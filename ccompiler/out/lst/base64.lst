0001   0000             ; --- FILENAME: programs/base64
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $input 
0011   0408             ; $output 
0012   0408 52 00 03      sub sp, 768
0013   040B             ;; printf("Enter a base64 encoded string to decode: "); 
0014   040B 26 DC 20      mov b, _s0 ; "Enter a base64 encoded string to decode: "
0015   040E FD AB         swp b
0016   0410 D8            push b
0017   0411 07 3A 06      call printf
0018   0414 51 02 00      add sp, 2
0019   0417             ;; gets(input); 
0020   0417 FA 01 FE      lea d, [bp + -511] ; $input
0021   041A 2D            mov b, d
0022   041B FD AB         swp b
0023   041D D8            push b
0024   041E 07 59 0C      call gets
0025   0421 51 02 00      add sp, 2
0026   0424             ;; base64_encode(input, output); 
0027   0424 FA 01 FD      lea d, [bp + -767] ; $output
0028   0427 2D            mov b, d
0029   0428 FD AB         swp b
0030   042A D8            push b
0031   042B FA 01 FE      lea d, [bp + -511] ; $input
0032   042E 2D            mov b, d
0033   042F FD AB         swp b
0034   0431 D8            push b
0035   0432 07 97 17      call base64_encode
0036   0435 51 04 00      add sp, 4
0037   0438             ;; printf("Encoded string: %s\n", output); 
0038   0438 FA 01 FD      lea d, [bp + -767] ; $output
0039   043B 2D            mov b, d
0040   043C FD AB         swp b
0041   043E D8            push b
0042   043F 26 06 21      mov b, _s1 ; "Encoded string: %s\n"
0043   0442 FD AB         swp b
0044   0444 D8            push b
0045   0445 07 3A 06      call printf
0046   0448 51 04 00      add sp, 4
0047   044B             ;; base64_decode(output, input); 
0048   044B FA 01 FE      lea d, [bp + -511] ; $input
0049   044E 2D            mov b, d
0050   044F FD AB         swp b
0051   0451 D8            push b
0052   0452 FA 01 FD      lea d, [bp + -767] ; $output
0053   0455 2D            mov b, d
0054   0456 FD AB         swp b
0055   0458 D8            push b
0056   0459 07 70 1C      call base64_decode
0057   045C 51 04 00      add sp, 4
0058   045F             ;; printf("Decoded string: %s\n", input); 
0059   045F FA 01 FE      lea d, [bp + -511] ; $input
0060   0462 2D            mov b, d
0061   0463 FD AB         swp b
0062   0465 D8            push b
0063   0466 26 1A 21      mov b, _s2 ; "Decoded string: %s\n"
0064   0469 FD AB         swp b
0065   046B D8            push b
0066   046C 07 3A 06      call printf
0067   046F 51 04 00      add sp, 4
0068   0472             ;; return 0; 
0069   0472 26 00 00      mov b, $0
0070   0475 F9            leave
0071   0476 05 0B         syscall sys_terminate_proc
0072   0478             
0073   0478             strcpy:
0074   0478 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0075   047B             ; $psrc 
0076   047B             ; $pdest 
0077   047B 52 04 00      sub sp, 4
0078   047E             ;; psrc = src; 
0079   047E FA FF FF      lea d, [bp + -1] ; $psrc
0080   0481 DA            push d
0081   0482 FA 07 00      lea d, [bp + 7] ; $src
0082   0485 2A            mov b, [d]
0083   0486 E7            pop d
0084   0487 FD 43         mov [d], b
0085   0489             ;; pdest = dest; 
0086   0489 FA FD FF      lea d, [bp + -3] ; $pdest
0087   048C DA            push d
0088   048D FA 05 00      lea d, [bp + 5] ; $dest
0089   0490 2A            mov b, [d]
0090   0491 E7            pop d
0091   0492 FD 43         mov [d], b
0092   0494             ;; while(*psrc) *pdest++ = *psrc++; 
0093   0494             _while1_cond:
0094   0494 FA FF FF      lea d, [bp + -1] ; $psrc
0095   0497 2A            mov b, [d]
0096   0498 74            mov d, b
0097   0499 32            mov bl, [d]
0098   049A A7 00         mov bh, 0
0099   049C C0 00 00      cmp b, 0
0100   049F C6 C7 04      je _while1_exit
0101   04A2             _while1_block:
0102   04A2             ;; *pdest++ = *psrc++; 
0103   04A2 FA FD FF      lea d, [bp + -3] ; $pdest
0104   04A5 2A            mov b, [d]
0105   04A6 D8            push b
0106   04A7 FD 77         inc b
0107   04A9 FA FD FF      lea d, [bp + -3] ; $pdest
0108   04AC FD 43         mov [d], b
0109   04AE E5            pop b
0110   04AF D8            push b
0111   04B0 FA FF FF      lea d, [bp + -1] ; $psrc
0112   04B3 2A            mov b, [d]
0113   04B4 D8            push b
0114   04B5 FD 77         inc b
0115   04B7 FA FF FF      lea d, [bp + -1] ; $psrc
0116   04BA FD 43         mov [d], b
0117   04BC E5            pop b
0118   04BD 74            mov d, b
0119   04BE 32            mov bl, [d]
0120   04BF A7 00         mov bh, 0
0121   04C1 E7            pop d
0122   04C2 FD 3E         mov [d], bl
0123   04C4 0A 94 04      jmp _while1_cond
0124   04C7             _while1_exit:
0125   04C7             ;; *pdest = '\0'; 
0126   04C7 FA FD FF      lea d, [bp + -3] ; $pdest
0127   04CA 2A            mov b, [d]
0128   04CB D8            push b
0129   04CC 26 00 00      mov b, $0
0130   04CF E7            pop d
0131   04D0 FD 3E         mov [d], bl
0132   04D2 F9            leave
0133   04D3 09            ret
0134   04D4             
0135   04D4             strcmp:
0136   04D4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0137   04D7             ;; while (*s1 && (*s1 == *s2)) { 
0138   04D7             _while2_cond:
0139   04D7 FA 05 00      lea d, [bp + 5] ; $s1
0140   04DA 2A            mov b, [d]
0141   04DB 74            mov d, b
0142   04DC 32            mov bl, [d]
0143   04DD A7 00         mov bh, 0
0144   04DF D7            push a
0145   04E0 11            mov a, b
0146   04E1 FA 05 00      lea d, [bp + 5] ; $s1
0147   04E4 2A            mov b, [d]
0148   04E5 74            mov d, b
0149   04E6 32            mov bl, [d]
0150   04E7 A7 00         mov bh, 0
0151   04E9             ; START RELATIONAL
0152   04E9 D7            push a
0153   04EA 11            mov a, b
0154   04EB FA 07 00      lea d, [bp + 7] ; $s2
0155   04EE 2A            mov b, [d]
0156   04EF 74            mov d, b
0157   04F0 32            mov bl, [d]
0158   04F1 A7 00         mov bh, 0
0159   04F3 B0            cmp a, b
0160   04F4 FD 71         seq ; ==
0161   04F6 E4            pop a
0162   04F7             ; END RELATIONAL
0163   04F7 FD A7         sand a, b
0164   04F9 E4            pop a
0165   04FA C0 00 00      cmp b, 0
0166   04FD C6 1D 05      je _while2_exit
0167   0500             _while2_block:
0168   0500             ;; s1++; 
0169   0500 FA 05 00      lea d, [bp + 5] ; $s1
0170   0503 2A            mov b, [d]
0171   0504 D8            push b
0172   0505 FD 77         inc b
0173   0507 FA 05 00      lea d, [bp + 5] ; $s1
0174   050A FD 43         mov [d], b
0175   050C E5            pop b
0176   050D             ;; s2++; 
0177   050D FA 07 00      lea d, [bp + 7] ; $s2
0178   0510 2A            mov b, [d]
0179   0511 D8            push b
0180   0512 FD 77         inc b
0181   0514 FA 07 00      lea d, [bp + 7] ; $s2
0182   0517 FD 43         mov [d], b
0183   0519 E5            pop b
0184   051A 0A D7 04      jmp _while2_cond
0185   051D             _while2_exit:
0186   051D             ;; return *s1 - *s2; 
0187   051D FA 05 00      lea d, [bp + 5] ; $s1
0188   0520 2A            mov b, [d]
0189   0521 74            mov d, b
0190   0522 32            mov bl, [d]
0191   0523 A7 00         mov bh, 0
0192   0525             ; START TERMS
0193   0525 D7            push a
0194   0526 11            mov a, b
0195   0527 FA 07 00      lea d, [bp + 7] ; $s2
0196   052A 2A            mov b, [d]
0197   052B 74            mov d, b
0198   052C 32            mov bl, [d]
0199   052D A7 00         mov bh, 0
0200   052F 60            sub a, b
0201   0530 27            mov b, a
0202   0531 E4            pop a
0203   0532             ; END TERMS
0204   0532 F9            leave
0205   0533 09            ret
0206   0534             
0207   0534             strncmp:
0208   0534 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0209   0537 F9            leave
0210   0538 09            ret
0211   0539             
0212   0539             strcat:
0213   0539 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0214   053C             ; $dest_len 
0215   053C             ; $i 
0216   053C 52 04 00      sub sp, 4
0217   053F             ;; dest_len = strlen(dest); 
0218   053F FA FF FF      lea d, [bp + -1] ; $dest_len
0219   0542 DA            push d
0220   0543 FA 05 00      lea d, [bp + 5] ; $dest
0221   0546 2A            mov b, [d]
0222   0547 FD AB         swp b
0223   0549 D8            push b
0224   054A 07 EC 05      call strlen
0225   054D 51 02 00      add sp, 2
0226   0550 E7            pop d
0227   0551 FD 43         mov [d], b
0228   0553             ;; for (i = 0; src[i] != 0; i=i+1) { 
0229   0553             _for3_init:
0230   0553 FA FD FF      lea d, [bp + -3] ; $i
0231   0556 DA            push d
0232   0557 26 00 00      mov b, $0
0233   055A E7            pop d
0234   055B FD 43         mov [d], b
0235   055D             _for3_cond:
0236   055D FA 07 00      lea d, [bp + 7] ; $src
0237   0560 FD 2A         mov d, [d]
0238   0562 D7            push a
0239   0563 DA            push d
0240   0564 FA FD FF      lea d, [bp + -3] ; $i
0241   0567 2A            mov b, [d]
0242   0568 E7            pop d
0243   0569 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0244   056D E4            pop a
0245   056E 32            mov bl, [d]
0246   056F A7 00         mov bh, 0
0247   0571             ; START RELATIONAL
0248   0571 D7            push a
0249   0572 11            mov a, b
0250   0573 26 00 00      mov b, $0
0251   0576 B0            cmp a, b
0252   0577 FD 72         sneq ; !=
0253   0579 E4            pop a
0254   057A             ; END RELATIONAL
0255   057A C0 00 00      cmp b, 0
0256   057D C6 C6 05      je _for3_exit
0257   0580             _for3_block:
0258   0580             ;; dest[dest_len + i] = src[i]; 
0259   0580 FA 05 00      lea d, [bp + 5] ; $dest
0260   0583 FD 2A         mov d, [d]
0261   0585 D7            push a
0262   0586 DA            push d
0263   0587 FA FF FF      lea d, [bp + -1] ; $dest_len
0264   058A 2A            mov b, [d]
0265   058B             ; START TERMS
0266   058B D7            push a
0267   058C 11            mov a, b
0268   058D FA FD FF      lea d, [bp + -3] ; $i
0269   0590 2A            mov b, [d]
0270   0591 56            add b, a
0271   0592 E4            pop a
0272   0593             ; END TERMS
0273   0593 E7            pop d
0274   0594 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0275   0598 E4            pop a
0276   0599 DA            push d
0277   059A FA 07 00      lea d, [bp + 7] ; $src
0278   059D FD 2A         mov d, [d]
0279   059F D7            push a
0280   05A0 DA            push d
0281   05A1 FA FD FF      lea d, [bp + -3] ; $i
0282   05A4 2A            mov b, [d]
0283   05A5 E7            pop d
0284   05A6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0285   05AA E4            pop a
0286   05AB 32            mov bl, [d]
0287   05AC A7 00         mov bh, 0
0288   05AE E7            pop d
0289   05AF FD 3E         mov [d], bl
0290   05B1             _for3_update:
0291   05B1 FA FD FF      lea d, [bp + -3] ; $i
0292   05B4 DA            push d
0293   05B5 FA FD FF      lea d, [bp + -3] ; $i
0294   05B8 2A            mov b, [d]
0295   05B9             ; START TERMS
0296   05B9 D7            push a
0297   05BA 11            mov a, b
0298   05BB 26 01 00      mov b, $1
0299   05BE 56            add b, a
0300   05BF E4            pop a
0301   05C0             ; END TERMS
0302   05C0 E7            pop d
0303   05C1 FD 43         mov [d], b
0304   05C3 0A 5D 05      jmp _for3_cond
0305   05C6             _for3_exit:
0306   05C6             ;; dest[dest_len + i] = 0; 
0307   05C6 FA 05 00      lea d, [bp + 5] ; $dest
0308   05C9 FD 2A         mov d, [d]
0309   05CB D7            push a
0310   05CC DA            push d
0311   05CD FA FF FF      lea d, [bp + -1] ; $dest_len
0312   05D0 2A            mov b, [d]
0313   05D1             ; START TERMS
0314   05D1 D7            push a
0315   05D2 11            mov a, b
0316   05D3 FA FD FF      lea d, [bp + -3] ; $i
0317   05D6 2A            mov b, [d]
0318   05D7 56            add b, a
0319   05D8 E4            pop a
0320   05D9             ; END TERMS
0321   05D9 E7            pop d
0322   05DA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0323   05DE E4            pop a
0324   05DF DA            push d
0325   05E0 26 00 00      mov b, $0
0326   05E3 E7            pop d
0327   05E4 FD 3E         mov [d], bl
0328   05E6             ;; return dest; 
0329   05E6 FA 05 00      lea d, [bp + 5] ; $dest
0330   05E9 2A            mov b, [d]
0331   05EA F9            leave
0332   05EB 09            ret
0333   05EC             
0334   05EC             strlen:
0335   05EC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0336   05EF             ; $length 
0337   05EF 52 02 00      sub sp, 2
0338   05F2             ;; length = 0; 
0339   05F2 FA FF FF      lea d, [bp + -1] ; $length
0340   05F5 DA            push d
0341   05F6 26 00 00      mov b, $0
0342   05F9 E7            pop d
0343   05FA FD 43         mov [d], b
0344   05FC             ;; while (str[length] != 0) { 
0345   05FC             _while4_cond:
0346   05FC FA 05 00      lea d, [bp + 5] ; $str
0347   05FF FD 2A         mov d, [d]
0348   0601 D7            push a
0349   0602 DA            push d
0350   0603 FA FF FF      lea d, [bp + -1] ; $length
0351   0606 2A            mov b, [d]
0352   0607 E7            pop d
0353   0608 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0354   060C E4            pop a
0355   060D 32            mov bl, [d]
0356   060E A7 00         mov bh, 0
0357   0610             ; START RELATIONAL
0358   0610 D7            push a
0359   0611 11            mov a, b
0360   0612 26 00 00      mov b, $0
0361   0615 B0            cmp a, b
0362   0616 FD 72         sneq ; !=
0363   0618 E4            pop a
0364   0619             ; END RELATIONAL
0365   0619 C0 00 00      cmp b, 0
0366   061C C6 2F 06      je _while4_exit
0367   061F             _while4_block:
0368   061F             ;; length++; 
0369   061F FA FF FF      lea d, [bp + -1] ; $length
0370   0622 2A            mov b, [d]
0371   0623 D8            push b
0372   0624 FD 77         inc b
0373   0626 FA FF FF      lea d, [bp + -1] ; $length
0374   0629 FD 43         mov [d], b
0375   062B E5            pop b
0376   062C 0A FC 05      jmp _while4_cond
0377   062F             _while4_exit:
0378   062F             ;; return length; 
0379   062F FA FF FF      lea d, [bp + -1] ; $length
0380   0632 2A            mov b, [d]
0381   0633 F9            leave
0382   0634 09            ret
0383   0635             
0384   0635             fopen:
0385   0635 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0386   0638 F9            leave
0387   0639 09            ret
0388   063A             
0389   063A             printf:
0390   063A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0391   063D             ; $p 
0392   063D             ; $format_p 
0393   063D 52 04 00      sub sp, 4
0394   0640             ;; format_p = format; 
0395   0640 FA FD FF      lea d, [bp + -3] ; $format_p
0396   0643 DA            push d
0397   0644 FA 05 00      lea d, [bp + 5] ; $format
0398   0647 2A            mov b, [d]
0399   0648 E7            pop d
0400   0649 FD 43         mov [d], b
0401   064B             ;; p = &format + 2; 
0402   064B FA FF FF      lea d, [bp + -1] ; $p
0403   064E DA            push d
0404   064F FA 05 00      lea d, [bp + 5] ; $format
0405   0652 2D            mov b, d
0406   0653             ; START TERMS
0407   0653 D7            push a
0408   0654 11            mov a, b
0409   0655 26 02 00      mov b, $2
0410   0658 56            add b, a
0411   0659 E4            pop a
0412   065A             ; END TERMS
0413   065A E7            pop d
0414   065B FD 43         mov [d], b
0415   065D             ;; for(;;){ 
0416   065D             _for5_init:
0417   065D             _for5_cond:
0418   065D             _for5_block:
0419   065D             ;; if(!*format_p) break; 
0420   065D             _if6_cond:
0421   065D FA FD FF      lea d, [bp + -3] ; $format_p
0422   0660 2A            mov b, [d]
0423   0661 74            mov d, b
0424   0662 32            mov bl, [d]
0425   0663 A7 00         mov bh, 0
0426   0665 C0 00 00      cmp b, 0
0427   0668 FD 71         seq ; !
0428   066A C0 00 00      cmp b, 0
0429   066D C6 76 06      je _if6_else
0430   0670             _if6_true:
0431   0670             ;; break; 
0432   0670 0A 9D 08      jmp _for5_exit ; for break
0433   0673 0A 9A 08      jmp _if6_exit
0434   0676             _if6_else:
0435   0676             ;; if(*format_p == '%'){ 
0436   0676             _if7_cond:
0437   0676 FA FD FF      lea d, [bp + -3] ; $format_p
0438   0679 2A            mov b, [d]
0439   067A 74            mov d, b
0440   067B 32            mov bl, [d]
0441   067C A7 00         mov bh, 0
0442   067E             ; START RELATIONAL
0443   067E D7            push a
0444   067F 11            mov a, b
0445   0680 26 25 00      mov b, $25
0446   0683 B0            cmp a, b
0447   0684 FD 71         seq ; ==
0448   0686 E4            pop a
0449   0687             ; END RELATIONAL
0450   0687 C0 00 00      cmp b, 0
0451   068A C6 7E 08      je _if7_else
0452   068D             _if7_true:
0453   068D             ;; format_p++; 
0454   068D FA FD FF      lea d, [bp + -3] ; $format_p
0455   0690 2A            mov b, [d]
0456   0691 D8            push b
0457   0692 FD 77         inc b
0458   0694 FA FD FF      lea d, [bp + -3] ; $format_p
0459   0697 FD 43         mov [d], b
0460   0699 E5            pop b
0461   069A             ;; switch(*format_p){ 
0462   069A             _switch8_expr:
0463   069A FA FD FF      lea d, [bp + -3] ; $format_p
0464   069D 2A            mov b, [d]
0465   069E 74            mov d, b
0466   069F 32            mov bl, [d]
0467   06A0 A7 00         mov bh, 0
0468   06A2             _switch8_comparisons:
0469   06A2 C1 6C         cmp bl, $6c
0470   06A4 C6 D0 06      je _switch8_case0
0471   06A7 C1 4C         cmp bl, $4c
0472   06A9 C6 D0 06      je _switch8_case1
0473   06AC C1 64         cmp bl, $64
0474   06AE C6 BE 07      je _switch8_case2
0475   06B1 C1 69         cmp bl, $69
0476   06B3 C6 BE 07      je _switch8_case3
0477   06B6 C1 75         cmp bl, $75
0478   06B8 C6 E2 07      je _switch8_case4
0479   06BB C1 78         cmp bl, $78
0480   06BD C6 06 08      je _switch8_case5
0481   06C0 C1 63         cmp bl, $63
0482   06C2 C6 24 08      je _switch8_case6
0483   06C5 C1 73         cmp bl, $73
0484   06C7 C6 43 08      je _switch8_case7
0485   06CA 0A 62 08      jmp _switch8_default
0486   06CD 0A 6E 08      jmp _switch8_exit
0487   06D0             _switch8_case0:
0488   06D0             _switch8_case1:
0489   06D0             ;; format_p++; 
0490   06D0 FA FD FF      lea d, [bp + -3] ; $format_p
0491   06D3 2A            mov b, [d]
0492   06D4 D8            push b
0493   06D5 FD 77         inc b
0494   06D7 FA FD FF      lea d, [bp + -3] ; $format_p
0495   06DA FD 43         mov [d], b
0496   06DC E5            pop b
0497   06DD             ;; if(*format_p == 'd' || *format_p == 'i') 
0498   06DD             _if9_cond:
0499   06DD FA FD FF      lea d, [bp + -3] ; $format_p
0500   06E0 2A            mov b, [d]
0501   06E1 74            mov d, b
0502   06E2 32            mov bl, [d]
0503   06E3 A7 00         mov bh, 0
0504   06E5             ; START RELATIONAL
0505   06E5 D7            push a
0506   06E6 11            mov a, b
0507   06E7 26 64 00      mov b, $64
0508   06EA B0            cmp a, b
0509   06EB FD 71         seq ; ==
0510   06ED E4            pop a
0511   06EE             ; END RELATIONAL
0512   06EE D7            push a
0513   06EF 11            mov a, b
0514   06F0 FA FD FF      lea d, [bp + -3] ; $format_p
0515   06F3 2A            mov b, [d]
0516   06F4 74            mov d, b
0517   06F5 32            mov bl, [d]
0518   06F6 A7 00         mov bh, 0
0519   06F8             ; START RELATIONAL
0520   06F8 D7            push a
0521   06F9 11            mov a, b
0522   06FA 26 69 00      mov b, $69
0523   06FD B0            cmp a, b
0524   06FE FD 71         seq ; ==
0525   0700 E4            pop a
0526   0701             ; END RELATIONAL
0527   0701 FD A8         sor a, b ; ||
0528   0703 E4            pop a
0529   0704 C0 00 00      cmp b, 0
0530   0707 C6 2C 07      je _if9_else
0531   070A             _if9_true:
0532   070A             ;; print_signed_long(*(long *)p); 
0533   070A FA FF FF      lea d, [bp + -1] ; $p
0534   070D 2A            mov b, [d]
0535   070E AB            snex b
0536   070F FD 39         mov c, b
0537   0711 74            mov d, b
0538   0712 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0539   0715 FD 39         mov c, b ; And place it into C
0540   0717 2A            mov b, [d] ; Lower Word in B
0541   0718 FD 79         mov g, b
0542   071A 28            mov b, c
0543   071B FD AB         swp b
0544   071D D8            push b
0545   071E FD 27         mov b, g
0546   0720 FD AB         swp b
0547   0722 D8            push b
0548   0723 07 63 0D      call print_signed_long
0549   0726 51 04 00      add sp, 4
0550   0729 0A A9 07      jmp _if9_exit
0551   072C             _if9_else:
0552   072C             ;; if(*format_p == 'u') 
0553   072C             _if10_cond:
0554   072C FA FD FF      lea d, [bp + -3] ; $format_p
0555   072F 2A            mov b, [d]
0556   0730 74            mov d, b
0557   0731 32            mov bl, [d]
0558   0732 A7 00         mov bh, 0
0559   0734             ; START RELATIONAL
0560   0734 D7            push a
0561   0735 11            mov a, b
0562   0736 26 75 00      mov b, $75
0563   0739 B0            cmp a, b
0564   073A FD 71         seq ; ==
0565   073C E4            pop a
0566   073D             ; END RELATIONAL
0567   073D C0 00 00      cmp b, 0
0568   0740 C6 67 07      je _if10_else
0569   0743             _if10_true:
0570   0743             ;; print_unsigned_long(*(unsigned long *)p); 
0571   0743 FA FF FF      lea d, [bp + -1] ; $p
0572   0746 2A            mov b, [d]
0573   0747 A7 00         mov bh, 0
0574   0749 38 00 00      mov c, 0
0575   074C 74            mov d, b
0576   074D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0577   0750 FD 39         mov c, b ; And place it into C
0578   0752 2A            mov b, [d] ; Lower Word in B
0579   0753 FD 79         mov g, b
0580   0755 28            mov b, c
0581   0756 FD AB         swp b
0582   0758 D8            push b
0583   0759 FD 27         mov b, g
0584   075B FD AB         swp b
0585   075D D8            push b
0586   075E 07 9C 10      call print_unsigned_long
0587   0761 51 04 00      add sp, 4
0588   0764 0A A9 07      jmp _if10_exit
0589   0767             _if10_else:
0590   0767             ;; if(*format_p == 'x') 
0591   0767             _if11_cond:
0592   0767 FA FD FF      lea d, [bp + -3] ; $format_p
0593   076A 2A            mov b, [d]
0594   076B 74            mov d, b
0595   076C 32            mov bl, [d]
0596   076D A7 00         mov bh, 0
0597   076F             ; START RELATIONAL
0598   076F D7            push a
0599   0770 11            mov a, b
0600   0771 26 78 00      mov b, $78
0601   0774 B0            cmp a, b
0602   0775 FD 71         seq ; ==
0603   0777 E4            pop a
0604   0778             ; END RELATIONAL
0605   0778 C0 00 00      cmp b, 0
0606   077B C6 9D 07      je _if11_else
0607   077E             _if11_true:
0608   077E             ;; printx32(*(long int *)p); 
0609   077E FA FF FF      lea d, [bp + -1] ; $p
0610   0781 2A            mov b, [d]
0611   0782 74            mov d, b
0612   0783 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0613   0786 FD 39         mov c, b ; And place it into C
0614   0788 2A            mov b, [d] ; Lower Word in B
0615   0789 FD 79         mov g, b
0616   078B 28            mov b, c
0617   078C FD AB         swp b
0618   078E D8            push b
0619   078F FD 27         mov b, g
0620   0791 FD AB         swp b
0621   0793 D8            push b
0622   0794 07 EC 0A      call printx32
0623   0797 51 04 00      add sp, 4
0624   079A 0A A9 07      jmp _if11_exit
0625   079D             _if11_else:
0626   079D             ;; err("Unexpected format in printf."); 
0627   079D 26 2E 21      mov b, _s3 ; "Unexpected format in printf."
0628   07A0 FD AB         swp b
0629   07A2 D8            push b
0630   07A3 07 DA 0A      call err
0631   07A6 51 02 00      add sp, 2
0632   07A9             _if11_exit:
0633   07A9             _if10_exit:
0634   07A9             _if9_exit:
0635   07A9             ;; p = p + 4; 
0636   07A9 FA FF FF      lea d, [bp + -1] ; $p
0637   07AC DA            push d
0638   07AD FA FF FF      lea d, [bp + -1] ; $p
0639   07B0 2A            mov b, [d]
0640   07B1             ; START TERMS
0641   07B1 D7            push a
0642   07B2 11            mov a, b
0643   07B3 26 04 00      mov b, $4
0644   07B6 56            add b, a
0645   07B7 E4            pop a
0646   07B8             ; END TERMS
0647   07B8 E7            pop d
0648   07B9 FD 43         mov [d], b
0649   07BB             ;; break; 
0650   07BB 0A 6E 08      jmp _switch8_exit ; case break
0651   07BE             _switch8_case2:
0652   07BE             _switch8_case3:
0653   07BE             ;; print_signed(*(int*)p); 
0654   07BE FA FF FF      lea d, [bp + -1] ; $p
0655   07C1 2A            mov b, [d]
0656   07C2 74            mov d, b
0657   07C3 2A            mov b, [d]
0658   07C4 FD AB         swp b
0659   07C6 D8            push b
0660   07C7 07 73 0C      call print_signed
0661   07CA 51 02 00      add sp, 2
0662   07CD             ;; p = p + 2; 
0663   07CD FA FF FF      lea d, [bp + -1] ; $p
0664   07D0 DA            push d
0665   07D1 FA FF FF      lea d, [bp + -1] ; $p
0666   07D4 2A            mov b, [d]
0667   07D5             ; START TERMS
0668   07D5 D7            push a
0669   07D6 11            mov a, b
0670   07D7 26 02 00      mov b, $2
0671   07DA 56            add b, a
0672   07DB E4            pop a
0673   07DC             ; END TERMS
0674   07DC E7            pop d
0675   07DD FD 43         mov [d], b
0676   07DF             ;; break; 
0677   07DF 0A 6E 08      jmp _switch8_exit ; case break
0678   07E2             _switch8_case4:
0679   07E2             ;; print_unsigned(*(unsigned int*)p); 
0680   07E2 FA FF FF      lea d, [bp + -1] ; $p
0681   07E5 2A            mov b, [d]
0682   07E6 74            mov d, b
0683   07E7 2A            mov b, [d]
0684   07E8 FD AB         swp b
0685   07EA D8            push b
0686   07EB 07 94 12      call print_unsigned
0687   07EE 51 02 00      add sp, 2
0688   07F1             ;; p = p + 2; 
0689   07F1 FA FF FF      lea d, [bp + -1] ; $p
0690   07F4 DA            push d
0691   07F5 FA FF FF      lea d, [bp + -1] ; $p
0692   07F8 2A            mov b, [d]
0693   07F9             ; START TERMS
0694   07F9 D7            push a
0695   07FA 11            mov a, b
0696   07FB 26 02 00      mov b, $2
0697   07FE 56            add b, a
0698   07FF E4            pop a
0699   0800             ; END TERMS
0700   0800 E7            pop d
0701   0801 FD 43         mov [d], b
0702   0803             ;; break; 
0703   0803 0A 6E 08      jmp _switch8_exit ; case break
0704   0806             _switch8_case5:
0705   0806             
0706   0806             ; --- BEGIN INLINE ASM BLOCK
0707   0806 FA FF FF      lea d, [bp + -1] ; $p
0708   0809 FD 2A         mov d, [d]
0709   080B 2A            mov b, [d]
0710   080C 07 97 16      call print_u16x
0711   080F             ; --- END INLINE ASM BLOCK
0712   080F             
0713   080F             ;; p = p + 2; 
0714   080F FA FF FF      lea d, [bp + -1] ; $p
0715   0812 DA            push d
0716   0813 FA FF FF      lea d, [bp + -1] ; $p
0717   0816 2A            mov b, [d]
0718   0817             ; START TERMS
0719   0817 D7            push a
0720   0818 11            mov a, b
0721   0819 26 02 00      mov b, $2
0722   081C 56            add b, a
0723   081D E4            pop a
0724   081E             ; END TERMS
0725   081E E7            pop d
0726   081F FD 43         mov [d], b
0727   0821             ;; break; 
0728   0821 0A 6E 08      jmp _switch8_exit ; case break
0729   0824             _switch8_case6:
0730   0824             
0731   0824             ; --- BEGIN INLINE ASM BLOCK
0732   0824 FA FF FF      lea d, [bp + -1] ; $p
0733   0827 FD 2A         mov d, [d]
0734   0829 1E            mov al, [d]
0735   082A 23            mov ah, al
0736   082B 07 F5 14      call _putchar
0737   082E             ; --- END INLINE ASM BLOCK
0738   082E             
0739   082E             ;; p = p + 2; 
0740   082E FA FF FF      lea d, [bp + -1] ; $p
0741   0831 DA            push d
0742   0832 FA FF FF      lea d, [bp + -1] ; $p
0743   0835 2A            mov b, [d]
0744   0836             ; START TERMS
0745   0836 D7            push a
0746   0837 11            mov a, b
0747   0838 26 02 00      mov b, $2
0748   083B 56            add b, a
0749   083C E4            pop a
0750   083D             ; END TERMS
0751   083D E7            pop d
0752   083E FD 43         mov [d], b
0753   0840             ;; break; 
0754   0840 0A 6E 08      jmp _switch8_exit ; case break
0755   0843             _switch8_case7:
0756   0843             
0757   0843             ; --- BEGIN INLINE ASM BLOCK
0758   0843 FA FF FF      lea d, [bp + -1] ; $p
0759   0846 FD 2A         mov d, [d]
0760   0848 FD 2A         mov d, [d]
0761   084A 07 3F 16      call _puts
0762   084D             ; --- END INLINE ASM BLOCK
0763   084D             
0764   084D             ;; p = p + 2; 
0765   084D FA FF FF      lea d, [bp + -1] ; $p
0766   0850 DA            push d
0767   0851 FA FF FF      lea d, [bp + -1] ; $p
0768   0854 2A            mov b, [d]
0769   0855             ; START TERMS
0770   0855 D7            push a
0771   0856 11            mov a, b
0772   0857 26 02 00      mov b, $2
0773   085A 56            add b, a
0774   085B E4            pop a
0775   085C             ; END TERMS
0776   085C E7            pop d
0777   085D FD 43         mov [d], b
0778   085F             ;; break; 
0779   085F 0A 6E 08      jmp _switch8_exit ; case break
0780   0862             _switch8_default:
0781   0862             ;; print("Error: Unknown argument type.\n"); 
0782   0862 26 4B 21      mov b, _s4 ; "Error: Unknown argument type.\n"
0783   0865 FD AB         swp b
0784   0867 D8            push b
0785   0868 07 AC 13      call print
0786   086B 51 02 00      add sp, 2
0787   086E             _switch8_exit:
0788   086E             ;; format_p++; 
0789   086E FA FD FF      lea d, [bp + -3] ; $format_p
0790   0871 2A            mov b, [d]
0791   0872 D8            push b
0792   0873 FD 77         inc b
0793   0875 FA FD FF      lea d, [bp + -3] ; $format_p
0794   0878 FD 43         mov [d], b
0795   087A E5            pop b
0796   087B 0A 9A 08      jmp _if7_exit
0797   087E             _if7_else:
0798   087E             ;; putchar(*format_p); 
0799   087E FA FD FF      lea d, [bp + -3] ; $format_p
0800   0881 2A            mov b, [d]
0801   0882 74            mov d, b
0802   0883 32            mov bl, [d]
0803   0884 A7 00         mov bh, 0
0804   0886 DD            push bl
0805   0887 07 64 13      call putchar
0806   088A 51 01 00      add sp, 1
0807   088D             ;; format_p++; 
0808   088D FA FD FF      lea d, [bp + -3] ; $format_p
0809   0890 2A            mov b, [d]
0810   0891 D8            push b
0811   0892 FD 77         inc b
0812   0894 FA FD FF      lea d, [bp + -3] ; $format_p
0813   0897 FD 43         mov [d], b
0814   0899 E5            pop b
0815   089A             _if7_exit:
0816   089A             _if6_exit:
0817   089A             _for5_update:
0818   089A 0A 5D 06      jmp _for5_cond
0819   089D             _for5_exit:
0820   089D F9            leave
0821   089E 09            ret
0822   089F             
0823   089F             scanf:
0824   089F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0825   08A2             ; $p 
0826   08A2             ; $format_p 
0827   08A2             ; $c 
0828   08A2             ; $i 
0829   08A2             ; $input_string 
0830   08A2 52 07 02      sub sp, 519
0831   08A5             ;; format_p = format; 
0832   08A5 FA FD FF      lea d, [bp + -3] ; $format_p
0833   08A8 DA            push d
0834   08A9 FA 05 00      lea d, [bp + 5] ; $format
0835   08AC 2A            mov b, [d]
0836   08AD E7            pop d
0837   08AE FD 43         mov [d], b
0838   08B0             ;; p = &format + 2; 
0839   08B0 FA FF FF      lea d, [bp + -1] ; $p
0840   08B3 DA            push d
0841   08B4 FA 05 00      lea d, [bp + 5] ; $format
0842   08B7 2D            mov b, d
0843   08B8             ; START TERMS
0844   08B8 D7            push a
0845   08B9 11            mov a, b
0846   08BA 26 02 00      mov b, $2
0847   08BD 56            add b, a
0848   08BE E4            pop a
0849   08BF             ; END TERMS
0850   08BF E7            pop d
0851   08C0 FD 43         mov [d], b
0852   08C2             ;; for(;;){ 
0853   08C2             _for12_init:
0854   08C2             _for12_cond:
0855   08C2             _for12_block:
0856   08C2             ;; if(!*format_p) break; 
0857   08C2             _if13_cond:
0858   08C2 FA FD FF      lea d, [bp + -3] ; $format_p
0859   08C5 2A            mov b, [d]
0860   08C6 74            mov d, b
0861   08C7 32            mov bl, [d]
0862   08C8 A7 00         mov bh, 0
0863   08CA C0 00 00      cmp b, 0
0864   08CD FD 71         seq ; !
0865   08CF C0 00 00      cmp b, 0
0866   08D2 C6 DB 08      je _if13_else
0867   08D5             _if13_true:
0868   08D5             ;; break; 
0869   08D5 0A D8 0A      jmp _for12_exit ; for break
0870   08D8 0A D5 0A      jmp _if13_exit
0871   08DB             _if13_else:
0872   08DB             ;; if(*format_p == '%'){ 
0873   08DB             _if14_cond:
0874   08DB FA FD FF      lea d, [bp + -3] ; $format_p
0875   08DE 2A            mov b, [d]
0876   08DF 74            mov d, b
0877   08E0 32            mov bl, [d]
0878   08E1 A7 00         mov bh, 0
0879   08E3             ; START RELATIONAL
0880   08E3 D7            push a
0881   08E4 11            mov a, b
0882   08E5 26 25 00      mov b, $25
0883   08E8 B0            cmp a, b
0884   08E9 FD 71         seq ; ==
0885   08EB E4            pop a
0886   08EC             ; END RELATIONAL
0887   08EC C0 00 00      cmp b, 0
0888   08EF C6 B9 0A      je _if14_else
0889   08F2             _if14_true:
0890   08F2             ;; format_p++; 
0891   08F2 FA FD FF      lea d, [bp + -3] ; $format_p
0892   08F5 2A            mov b, [d]
0893   08F6 D8            push b
0894   08F7 FD 77         inc b
0895   08F9 FA FD FF      lea d, [bp + -3] ; $format_p
0896   08FC FD 43         mov [d], b
0897   08FE E5            pop b
0898   08FF             ;; switch(*format_p){ 
0899   08FF             _switch15_expr:
0900   08FF FA FD FF      lea d, [bp + -3] ; $format_p
0901   0902 2A            mov b, [d]
0902   0903 74            mov d, b
0903   0904 32            mov bl, [d]
0904   0905 A7 00         mov bh, 0
0905   0907             _switch15_comparisons:
0906   0907 C1 6C         cmp bl, $6c
0907   0909 C6 35 09      je _switch15_case0
0908   090C C1 4C         cmp bl, $4c
0909   090E C6 35 09      je _switch15_case1
0910   0911 C1 64         cmp bl, $64
0911   0913 C6 C7 09      je _switch15_case2
0912   0916 C1 69         cmp bl, $69
0913   0918 C6 C7 09      je _switch15_case3
0914   091B C1 75         cmp bl, $75
0915   091D C6 F4 09      je _switch15_case4
0916   0920 C1 78         cmp bl, $78
0917   0922 C6 21 0A      je _switch15_case5
0918   0925 C1 63         cmp bl, $63
0919   0927 C6 36 0A      je _switch15_case6
0920   092A C1 73         cmp bl, $73
0921   092C C6 65 0A      je _switch15_case7
0922   092F 0A 9D 0A      jmp _switch15_default
0923   0932 0A A9 0A      jmp _switch15_exit
0924   0935             _switch15_case0:
0925   0935             _switch15_case1:
0926   0935             ;; format_p++; 
0927   0935 FA FD FF      lea d, [bp + -3] ; $format_p
0928   0938 2A            mov b, [d]
0929   0939 D8            push b
0930   093A FD 77         inc b
0931   093C FA FD FF      lea d, [bp + -3] ; $format_p
0932   093F FD 43         mov [d], b
0933   0941 E5            pop b
0934   0942             ;; if(*format_p == 'd' || *format_p == 'i'); 
0935   0942             _if16_cond:
0936   0942 FA FD FF      lea d, [bp + -3] ; $format_p
0937   0945 2A            mov b, [d]
0938   0946 74            mov d, b
0939   0947 32            mov bl, [d]
0940   0948 A7 00         mov bh, 0
0941   094A             ; START RELATIONAL
0942   094A D7            push a
0943   094B 11            mov a, b
0944   094C 26 64 00      mov b, $64
0945   094F B0            cmp a, b
0946   0950 FD 71         seq ; ==
0947   0952 E4            pop a
0948   0953             ; END RELATIONAL
0949   0953 D7            push a
0950   0954 11            mov a, b
0951   0955 FA FD FF      lea d, [bp + -3] ; $format_p
0952   0958 2A            mov b, [d]
0953   0959 74            mov d, b
0954   095A 32            mov bl, [d]
0955   095B A7 00         mov bh, 0
0956   095D             ; START RELATIONAL
0957   095D D7            push a
0958   095E 11            mov a, b
0959   095F 26 69 00      mov b, $69
0960   0962 B0            cmp a, b
0961   0963 FD 71         seq ; ==
0962   0965 E4            pop a
0963   0966             ; END RELATIONAL
0964   0966 FD A8         sor a, b ; ||
0965   0968 E4            pop a
0966   0969 C0 00 00      cmp b, 0
0967   096C C6 72 09      je _if16_else
0968   096F             _if16_true:
0969   096F             ;; ; 
0970   096F 0A B2 09      jmp _if16_exit
0971   0972             _if16_else:
0972   0972             ;; if(*format_p == 'u'); 
0973   0972             _if17_cond:
0974   0972 FA FD FF      lea d, [bp + -3] ; $format_p
0975   0975 2A            mov b, [d]
0976   0976 74            mov d, b
0977   0977 32            mov bl, [d]
0978   0978 A7 00         mov bh, 0
0979   097A             ; START RELATIONAL
0980   097A D7            push a
0981   097B 11            mov a, b
0982   097C 26 75 00      mov b, $75
0983   097F B0            cmp a, b
0984   0980 FD 71         seq ; ==
0985   0982 E4            pop a
0986   0983             ; END RELATIONAL
0987   0983 C0 00 00      cmp b, 0
0988   0986 C6 8C 09      je _if17_else
0989   0989             _if17_true:
0990   0989             ;; ; 
0991   0989 0A B2 09      jmp _if17_exit
0992   098C             _if17_else:
0993   098C             ;; if(*format_p == 'x'); 
0994   098C             _if18_cond:
0995   098C FA FD FF      lea d, [bp + -3] ; $format_p
0996   098F 2A            mov b, [d]
0997   0990 74            mov d, b
0998   0991 32            mov bl, [d]
0999   0992 A7 00         mov bh, 0
1000   0994             ; START RELATIONAL
1001   0994 D7            push a
1002   0995 11            mov a, b
1003   0996 26 78 00      mov b, $78
1004   0999 B0            cmp a, b
1005   099A FD 71         seq ; ==
1006   099C E4            pop a
1007   099D             ; END RELATIONAL
1008   099D C0 00 00      cmp b, 0
1009   09A0 C6 A6 09      je _if18_else
1010   09A3             _if18_true:
1011   09A3             ;; ; 
1012   09A3 0A B2 09      jmp _if18_exit
1013   09A6             _if18_else:
1014   09A6             ;; err("Unexpected format in printf."); 
1015   09A6 26 2E 21      mov b, _s3 ; "Unexpected format in printf."
1016   09A9 FD AB         swp b
1017   09AB D8            push b
1018   09AC 07 DA 0A      call err
1019   09AF 51 02 00      add sp, 2
1020   09B2             _if18_exit:
1021   09B2             _if17_exit:
1022   09B2             _if16_exit:
1023   09B2             ;; p = p + 4; 
1024   09B2 FA FF FF      lea d, [bp + -1] ; $p
1025   09B5 DA            push d
1026   09B6 FA FF FF      lea d, [bp + -1] ; $p
1027   09B9 2A            mov b, [d]
1028   09BA             ; START TERMS
1029   09BA D7            push a
1030   09BB 11            mov a, b
1031   09BC 26 04 00      mov b, $4
1032   09BF 56            add b, a
1033   09C0 E4            pop a
1034   09C1             ; END TERMS
1035   09C1 E7            pop d
1036   09C2 FD 43         mov [d], b
1037   09C4             ;; break; 
1038   09C4 0A A9 0A      jmp _switch15_exit ; case break
1039   09C7             _switch15_case2:
1040   09C7             _switch15_case3:
1041   09C7             ;; i = scann(); 
1042   09C7 FA FA FF      lea d, [bp + -6] ; $i
1043   09CA DA            push d
1044   09CB 07 87 13      call scann
1045   09CE E7            pop d
1046   09CF FD 43         mov [d], b
1047   09D1             ;; **(int **)p = i; 
1048   09D1 FA FF FF      lea d, [bp + -1] ; $p
1049   09D4 2A            mov b, [d]
1050   09D5 74            mov d, b
1051   09D6 2A            mov b, [d]
1052   09D7 D8            push b
1053   09D8 FA FA FF      lea d, [bp + -6] ; $i
1054   09DB 2A            mov b, [d]
1055   09DC E7            pop d
1056   09DD FD 43         mov [d], b
1057   09DF             ;; p = p + 2; 
1058   09DF FA FF FF      lea d, [bp + -1] ; $p
1059   09E2 DA            push d
1060   09E3 FA FF FF      lea d, [bp + -1] ; $p
1061   09E6 2A            mov b, [d]
1062   09E7             ; START TERMS
1063   09E7 D7            push a
1064   09E8 11            mov a, b
1065   09E9 26 02 00      mov b, $2
1066   09EC 56            add b, a
1067   09ED E4            pop a
1068   09EE             ; END TERMS
1069   09EE E7            pop d
1070   09EF FD 43         mov [d], b
1071   09F1             ;; break; 
1072   09F1 0A A9 0A      jmp _switch15_exit ; case break
1073   09F4             _switch15_case4:
1074   09F4             ;; i = scann(); 
1075   09F4 FA FA FF      lea d, [bp + -6] ; $i
1076   09F7 DA            push d
1077   09F8 07 87 13      call scann
1078   09FB E7            pop d
1079   09FC FD 43         mov [d], b
1080   09FE             ;; **(int **)p = i; 
1081   09FE FA FF FF      lea d, [bp + -1] ; $p
1082   0A01 2A            mov b, [d]
1083   0A02 74            mov d, b
1084   0A03 2A            mov b, [d]
1085   0A04 D8            push b
1086   0A05 FA FA FF      lea d, [bp + -6] ; $i
1087   0A08 2A            mov b, [d]
1088   0A09 E7            pop d
1089   0A0A FD 43         mov [d], b
1090   0A0C             ;; p = p + 2; 
1091   0A0C FA FF FF      lea d, [bp + -1] ; $p
1092   0A0F DA            push d
1093   0A10 FA FF FF      lea d, [bp + -1] ; $p
1094   0A13 2A            mov b, [d]
1095   0A14             ; START TERMS
1096   0A14 D7            push a
1097   0A15 11            mov a, b
1098   0A16 26 02 00      mov b, $2
1099   0A19 56            add b, a
1100   0A1A E4            pop a
1101   0A1B             ; END TERMS
1102   0A1B E7            pop d
1103   0A1C FD 43         mov [d], b
1104   0A1E             ;; break; 
1105   0A1E 0A A9 0A      jmp _switch15_exit ; case break
1106   0A21             _switch15_case5:
1107   0A21             ;; p = p + 2; 
1108   0A21 FA FF FF      lea d, [bp + -1] ; $p
1109   0A24 DA            push d
1110   0A25 FA FF FF      lea d, [bp + -1] ; $p
1111   0A28 2A            mov b, [d]
1112   0A29             ; START TERMS
1113   0A29 D7            push a
1114   0A2A 11            mov a, b
1115   0A2B 26 02 00      mov b, $2
1116   0A2E 56            add b, a
1117   0A2F E4            pop a
1118   0A30             ; END TERMS
1119   0A30 E7            pop d
1120   0A31 FD 43         mov [d], b
1121   0A33             ;; break; 
1122   0A33 0A A9 0A      jmp _switch15_exit ; case break
1123   0A36             _switch15_case6:
1124   0A36             ;; c = getchar(); 
1125   0A36 FA FC FF      lea d, [bp + -4] ; $c
1126   0A39 DA            push d
1127   0A3A 07 71 13      call getchar
1128   0A3D E7            pop d
1129   0A3E FD 3E         mov [d], bl
1130   0A40             ;; **(char **)p = c; 
1131   0A40 FA FF FF      lea d, [bp + -1] ; $p
1132   0A43 2A            mov b, [d]
1133   0A44 74            mov d, b
1134   0A45 2A            mov b, [d]
1135   0A46 D8            push b
1136   0A47 FA FC FF      lea d, [bp + -4] ; $c
1137   0A4A 32            mov bl, [d]
1138   0A4B A7 00         mov bh, 0
1139   0A4D E7            pop d
1140   0A4E FD 43         mov [d], b
1141   0A50             ;; p = p + 2; 
1142   0A50 FA FF FF      lea d, [bp + -1] ; $p
1143   0A53 DA            push d
1144   0A54 FA FF FF      lea d, [bp + -1] ; $p
1145   0A57 2A            mov b, [d]
1146   0A58             ; START TERMS
1147   0A58 D7            push a
1148   0A59 11            mov a, b
1149   0A5A 26 02 00      mov b, $2
1150   0A5D 56            add b, a
1151   0A5E E4            pop a
1152   0A5F             ; END TERMS
1153   0A5F E7            pop d
1154   0A60 FD 43         mov [d], b
1155   0A62             ;; break; 
1156   0A62 0A A9 0A      jmp _switch15_exit ; case break
1157   0A65             _switch15_case7:
1158   0A65             ;; gets(input_string); 
1159   0A65 FA FA FD      lea d, [bp + -518] ; $input_string
1160   0A68 2D            mov b, d
1161   0A69 FD AB         swp b
1162   0A6B D8            push b
1163   0A6C 07 59 0C      call gets
1164   0A6F 51 02 00      add sp, 2
1165   0A72             ;; strcpy(*(char **)p, input_string); 
1166   0A72 FA FA FD      lea d, [bp + -518] ; $input_string
1167   0A75 2D            mov b, d
1168   0A76 FD AB         swp b
1169   0A78 D8            push b
1170   0A79 FA FF FF      lea d, [bp + -1] ; $p
1171   0A7C 2A            mov b, [d]
1172   0A7D 74            mov d, b
1173   0A7E 2A            mov b, [d]
1174   0A7F FD AB         swp b
1175   0A81 D8            push b
1176   0A82 07 78 04      call strcpy
1177   0A85 51 04 00      add sp, 4
1178   0A88             ;; p = p + 2; 
1179   0A88 FA FF FF      lea d, [bp + -1] ; $p
1180   0A8B DA            push d
1181   0A8C FA FF FF      lea d, [bp + -1] ; $p
1182   0A8F 2A            mov b, [d]
1183   0A90             ; START TERMS
1184   0A90 D7            push a
1185   0A91 11            mov a, b
1186   0A92 26 02 00      mov b, $2
1187   0A95 56            add b, a
1188   0A96 E4            pop a
1189   0A97             ; END TERMS
1190   0A97 E7            pop d
1191   0A98 FD 43         mov [d], b
1192   0A9A             ;; break; 
1193   0A9A 0A A9 0A      jmp _switch15_exit ; case break
1194   0A9D             _switch15_default:
1195   0A9D             ;; print("Error: Unknown argument type.\n"); 
1196   0A9D 26 4B 21      mov b, _s4 ; "Error: Unknown argument type.\n"
1197   0AA0 FD AB         swp b
1198   0AA2 D8            push b
1199   0AA3 07 AC 13      call print
1200   0AA6 51 02 00      add sp, 2
1201   0AA9             _switch15_exit:
1202   0AA9             ;; format_p++; 
1203   0AA9 FA FD FF      lea d, [bp + -3] ; $format_p
1204   0AAC 2A            mov b, [d]
1205   0AAD D8            push b
1206   0AAE FD 77         inc b
1207   0AB0 FA FD FF      lea d, [bp + -3] ; $format_p
1208   0AB3 FD 43         mov [d], b
1209   0AB5 E5            pop b
1210   0AB6 0A D5 0A      jmp _if14_exit
1211   0AB9             _if14_else:
1212   0AB9             ;; putchar(*format_p); 
1213   0AB9 FA FD FF      lea d, [bp + -3] ; $format_p
1214   0ABC 2A            mov b, [d]
1215   0ABD 74            mov d, b
1216   0ABE 32            mov bl, [d]
1217   0ABF A7 00         mov bh, 0
1218   0AC1 DD            push bl
1219   0AC2 07 64 13      call putchar
1220   0AC5 51 01 00      add sp, 1
1221   0AC8             ;; format_p++; 
1222   0AC8 FA FD FF      lea d, [bp + -3] ; $format_p
1223   0ACB 2A            mov b, [d]
1224   0ACC D8            push b
1225   0ACD FD 77         inc b
1226   0ACF FA FD FF      lea d, [bp + -3] ; $format_p
1227   0AD2 FD 43         mov [d], b
1228   0AD4 E5            pop b
1229   0AD5             _if14_exit:
1230   0AD5             _if13_exit:
1231   0AD5             _for12_update:
1232   0AD5 0A C2 08      jmp _for12_cond
1233   0AD8             _for12_exit:
1234   0AD8 F9            leave
1235   0AD9 09            ret
1236   0ADA             
1237   0ADA             err:
1238   0ADA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1239   0ADD             ;; print(e); 
1240   0ADD FA 05 00      lea d, [bp + 5] ; $e
1241   0AE0 2A            mov b, [d]
1242   0AE1 FD AB         swp b
1243   0AE3 D8            push b
1244   0AE4 07 AC 13      call print
1245   0AE7 51 02 00      add sp, 2
1246   0AEA F9            leave
1247   0AEB 09            ret
1248   0AEC             
1249   0AEC             printx32:
1250   0AEC F8 00 00      enter 0 ; (push bp; mov bp, sp)
1251   0AEF             
1252   0AEF             ; --- BEGIN INLINE ASM BLOCK
1253   0AEF FA 05 00      lea d, [bp + 5] ; $hex
1254   0AF2 2B 02 00      mov b, [d+2]
1255   0AF5 07 97 16      call print_u16x
1256   0AF8 2A            mov b, [d]
1257   0AF9 07 97 16      call print_u16x
1258   0AFC             ; --- END INLINE ASM BLOCK
1259   0AFC             
1260   0AFC F9            leave
1261   0AFD 09            ret
1262   0AFE             
1263   0AFE             printx16:
1264   0AFE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1265   0B01             
1266   0B01             ; --- BEGIN INLINE ASM BLOCK
1267   0B01 FA 05 00      lea d, [bp + 5] ; $hex
1268   0B04 2A            mov b, [d]
1269   0B05 07 97 16      call print_u16x
1270   0B08             ; --- END INLINE ASM BLOCK
1271   0B08             
1272   0B08 F9            leave
1273   0B09 09            ret
1274   0B0A             
1275   0B0A             printx8:
1276   0B0A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1277   0B0D             
1278   0B0D             ; --- BEGIN INLINE ASM BLOCK
1279   0B0D FA 05 00      lea d, [bp + 5] ; $hex
1280   0B10 32            mov bl, [d]
1281   0B11 07 DB 16      call print_u8x
1282   0B14             ; --- END INLINE ASM BLOCK
1283   0B14             
1284   0B14 F9            leave
1285   0B15 09            ret
1286   0B16             
1287   0B16             hex_str_to_int:
1288   0B16 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1289   0B19             ; $value 
1290   0B19 10 00 00      mov a, $0
1291   0B1C 45 FF FF      mov [bp + -1], a
1292   0B1F             ; $i 
1293   0B1F             ; $hex_char 
1294   0B1F             ; $len 
1295   0B1F 52 07 00      sub sp, 7
1296   0B22             ;; len = strlen(hex_string); 
1297   0B22 FA FA FF      lea d, [bp + -6] ; $len
1298   0B25 DA            push d
1299   0B26 FA 05 00      lea d, [bp + 5] ; $hex_string
1300   0B29 2A            mov b, [d]
1301   0B2A FD AB         swp b
1302   0B2C D8            push b
1303   0B2D 07 EC 05      call strlen
1304   0B30 51 02 00      add sp, 2
1305   0B33 E7            pop d
1306   0B34 FD 43         mov [d], b
1307   0B36             ;; for (i = 0; i < len; i++) { 
1308   0B36             _for19_init:
1309   0B36 FA FD FF      lea d, [bp + -3] ; $i
1310   0B39 DA            push d
1311   0B3A 26 00 00      mov b, $0
1312   0B3D E7            pop d
1313   0B3E FD 43         mov [d], b
1314   0B40             _for19_cond:
1315   0B40 FA FD FF      lea d, [bp + -3] ; $i
1316   0B43 2A            mov b, [d]
1317   0B44             ; START RELATIONAL
1318   0B44 D7            push a
1319   0B45 11            mov a, b
1320   0B46 FA FA FF      lea d, [bp + -6] ; $len
1321   0B49 2A            mov b, [d]
1322   0B4A B0            cmp a, b
1323   0B4B FD 73         slt ; < (signed)
1324   0B4D E4            pop a
1325   0B4E             ; END RELATIONAL
1326   0B4E C0 00 00      cmp b, 0
1327   0B51 C6 53 0C      je _for19_exit
1328   0B54             _for19_block:
1329   0B54             ;; hex_char = hex_string[i]; 
1330   0B54 FA FC FF      lea d, [bp + -4] ; $hex_char
1331   0B57 DA            push d
1332   0B58 FA 05 00      lea d, [bp + 5] ; $hex_string
1333   0B5B FD 2A         mov d, [d]
1334   0B5D D7            push a
1335   0B5E DA            push d
1336   0B5F FA FD FF      lea d, [bp + -3] ; $i
1337   0B62 2A            mov b, [d]
1338   0B63 E7            pop d
1339   0B64 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1340   0B68 E4            pop a
1341   0B69 32            mov bl, [d]
1342   0B6A A7 00         mov bh, 0
1343   0B6C E7            pop d
1344   0B6D FD 3E         mov [d], bl
1345   0B6F             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1346   0B6F             _if20_cond:
1347   0B6F FA FC FF      lea d, [bp + -4] ; $hex_char
1348   0B72 32            mov bl, [d]
1349   0B73 A7 00         mov bh, 0
1350   0B75             ; START RELATIONAL
1351   0B75 D7            push a
1352   0B76 11            mov a, b
1353   0B77 26 61 00      mov b, $61
1354   0B7A B0            cmp a, b
1355   0B7B FD 80         sge ; >=
1356   0B7D E4            pop a
1357   0B7E             ; END RELATIONAL
1358   0B7E D7            push a
1359   0B7F 11            mov a, b
1360   0B80 FA FC FF      lea d, [bp + -4] ; $hex_char
1361   0B83 32            mov bl, [d]
1362   0B84 A7 00         mov bh, 0
1363   0B86             ; START RELATIONAL
1364   0B86 D7            push a
1365   0B87 11            mov a, b
1366   0B88 26 66 00      mov b, $66
1367   0B8B B0            cmp a, b
1368   0B8C FD 73         slt ; <= (signed)
1369   0B8E E4            pop a
1370   0B8F             ; END RELATIONAL
1371   0B8F FD A7         sand a, b
1372   0B91 E4            pop a
1373   0B92 C0 00 00      cmp b, 0
1374   0B95 C6 C6 0B      je _if20_else
1375   0B98             _if20_true:
1376   0B98             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1377   0B98 FA FF FF      lea d, [bp + -1] ; $value
1378   0B9B DA            push d
1379   0B9C FA FF FF      lea d, [bp + -1] ; $value
1380   0B9F 2A            mov b, [d]
1381   0BA0             ; START FACTORS
1382   0BA0 D7            push a
1383   0BA1 11            mov a, b
1384   0BA2 26 10 00      mov b, $10
1385   0BA5 AC            mul a, b ; *
1386   0BA6 11            mov a, b
1387   0BA7 27            mov b, a
1388   0BA8 E4            pop a
1389   0BA9             ; END FACTORS
1390   0BA9             ; START TERMS
1391   0BA9 D7            push a
1392   0BAA 11            mov a, b
1393   0BAB FA FC FF      lea d, [bp + -4] ; $hex_char
1394   0BAE 32            mov bl, [d]
1395   0BAF A7 00         mov bh, 0
1396   0BB1             ; START TERMS
1397   0BB1 D7            push a
1398   0BB2 11            mov a, b
1399   0BB3 26 61 00      mov b, $61
1400   0BB6 60            sub a, b
1401   0BB7 27            mov b, a
1402   0BB8 11            mov a, b
1403   0BB9 26 0A 00      mov b, $a
1404   0BBC 56            add b, a
1405   0BBD E4            pop a
1406   0BBE             ; END TERMS
1407   0BBE 56            add b, a
1408   0BBF E4            pop a
1409   0BC0             ; END TERMS
1410   0BC0 E7            pop d
1411   0BC1 FD 43         mov [d], b
1412   0BC3 0A 43 0C      jmp _if20_exit
1413   0BC6             _if20_else:
1414   0BC6             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1415   0BC6             _if21_cond:
1416   0BC6 FA FC FF      lea d, [bp + -4] ; $hex_char
1417   0BC9 32            mov bl, [d]
1418   0BCA A7 00         mov bh, 0
1419   0BCC             ; START RELATIONAL
1420   0BCC D7            push a
1421   0BCD 11            mov a, b
1422   0BCE 26 41 00      mov b, $41
1423   0BD1 B0            cmp a, b
1424   0BD2 FD 80         sge ; >=
1425   0BD4 E4            pop a
1426   0BD5             ; END RELATIONAL
1427   0BD5 D7            push a
1428   0BD6 11            mov a, b
1429   0BD7 FA FC FF      lea d, [bp + -4] ; $hex_char
1430   0BDA 32            mov bl, [d]
1431   0BDB A7 00         mov bh, 0
1432   0BDD             ; START RELATIONAL
1433   0BDD D7            push a
1434   0BDE 11            mov a, b
1435   0BDF 26 46 00      mov b, $46
1436   0BE2 B0            cmp a, b
1437   0BE3 FD 73         slt ; <= (signed)
1438   0BE5 E4            pop a
1439   0BE6             ; END RELATIONAL
1440   0BE6 FD A7         sand a, b
1441   0BE8 E4            pop a
1442   0BE9 C0 00 00      cmp b, 0
1443   0BEC C6 1D 0C      je _if21_else
1444   0BEF             _if21_true:
1445   0BEF             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1446   0BEF FA FF FF      lea d, [bp + -1] ; $value
1447   0BF2 DA            push d
1448   0BF3 FA FF FF      lea d, [bp + -1] ; $value
1449   0BF6 2A            mov b, [d]
1450   0BF7             ; START FACTORS
1451   0BF7 D7            push a
1452   0BF8 11            mov a, b
1453   0BF9 26 10 00      mov b, $10
1454   0BFC AC            mul a, b ; *
1455   0BFD 11            mov a, b
1456   0BFE 27            mov b, a
1457   0BFF E4            pop a
1458   0C00             ; END FACTORS
1459   0C00             ; START TERMS
1460   0C00 D7            push a
1461   0C01 11            mov a, b
1462   0C02 FA FC FF      lea d, [bp + -4] ; $hex_char
1463   0C05 32            mov bl, [d]
1464   0C06 A7 00         mov bh, 0
1465   0C08             ; START TERMS
1466   0C08 D7            push a
1467   0C09 11            mov a, b
1468   0C0A 26 41 00      mov b, $41
1469   0C0D 60            sub a, b
1470   0C0E 27            mov b, a
1471   0C0F 11            mov a, b
1472   0C10 26 0A 00      mov b, $a
1473   0C13 56            add b, a
1474   0C14 E4            pop a
1475   0C15             ; END TERMS
1476   0C15 56            add b, a
1477   0C16 E4            pop a
1478   0C17             ; END TERMS
1479   0C17 E7            pop d
1480   0C18 FD 43         mov [d], b
1481   0C1A 0A 43 0C      jmp _if21_exit
1482   0C1D             _if21_else:
1483   0C1D             ;; value = (value * 16) + (hex_char - '0'); 
1484   0C1D FA FF FF      lea d, [bp + -1] ; $value
1485   0C20 DA            push d
1486   0C21 FA FF FF      lea d, [bp + -1] ; $value
1487   0C24 2A            mov b, [d]
1488   0C25             ; START FACTORS
1489   0C25 D7            push a
1490   0C26 11            mov a, b
1491   0C27 26 10 00      mov b, $10
1492   0C2A AC            mul a, b ; *
1493   0C2B 11            mov a, b
1494   0C2C 27            mov b, a
1495   0C2D E4            pop a
1496   0C2E             ; END FACTORS
1497   0C2E             ; START TERMS
1498   0C2E D7            push a
1499   0C2F 11            mov a, b
1500   0C30 FA FC FF      lea d, [bp + -4] ; $hex_char
1501   0C33 32            mov bl, [d]
1502   0C34 A7 00         mov bh, 0
1503   0C36             ; START TERMS
1504   0C36 D7            push a
1505   0C37 11            mov a, b
1506   0C38 26 30 00      mov b, $30
1507   0C3B 60            sub a, b
1508   0C3C 27            mov b, a
1509   0C3D E4            pop a
1510   0C3E             ; END TERMS
1511   0C3E 56            add b, a
1512   0C3F E4            pop a
1513   0C40             ; END TERMS
1514   0C40 E7            pop d
1515   0C41 FD 43         mov [d], b
1516   0C43             _if21_exit:
1517   0C43             _if20_exit:
1518   0C43             _for19_update:
1519   0C43 FA FD FF      lea d, [bp + -3] ; $i
1520   0C46 2A            mov b, [d]
1521   0C47 D8            push b
1522   0C48 FD 77         inc b
1523   0C4A FA FD FF      lea d, [bp + -3] ; $i
1524   0C4D FD 43         mov [d], b
1525   0C4F E5            pop b
1526   0C50 0A 40 0B      jmp _for19_cond
1527   0C53             _for19_exit:
1528   0C53             ;; return value; 
1529   0C53 FA FF FF      lea d, [bp + -1] ; $value
1530   0C56 2A            mov b, [d]
1531   0C57 F9            leave
1532   0C58 09            ret
1533   0C59             
1534   0C59             gets:
1535   0C59 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1536   0C5C             
1537   0C5C             ; --- BEGIN INLINE ASM BLOCK
1538   0C5C FA 05 00      lea d, [bp + 5] ; $s
1539   0C5F 15            mov a, [d]
1540   0C60 3C            mov d, a
1541   0C61 07 FC 14      call _gets
1542   0C64             ; --- END INLINE ASM BLOCK
1543   0C64             
1544   0C64             ;; return strlen(s); 
1545   0C64 FA 05 00      lea d, [bp + 5] ; $s
1546   0C67 2A            mov b, [d]
1547   0C68 FD AB         swp b
1548   0C6A D8            push b
1549   0C6B 07 EC 05      call strlen
1550   0C6E 51 02 00      add sp, 2
1551   0C71 F9            leave
1552   0C72 09            ret
1553   0C73             
1554   0C73             print_signed:
1555   0C73 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1556   0C76             ; $digits 
1557   0C76             ; $i 
1558   0C76 10 00 00      mov a, $0
1559   0C79 45 FA FF      mov [bp + -6], a
1560   0C7C 52 07 00      sub sp, 7
1561   0C7F             ;; if (num < 0) { 
1562   0C7F             _if22_cond:
1563   0C7F FA 05 00      lea d, [bp + 5] ; $num
1564   0C82 2A            mov b, [d]
1565   0C83             ; START RELATIONAL
1566   0C83 D7            push a
1567   0C84 11            mov a, b
1568   0C85 26 00 00      mov b, $0
1569   0C88 B0            cmp a, b
1570   0C89 FD 73         slt ; < (signed)
1571   0C8B E4            pop a
1572   0C8C             ; END RELATIONAL
1573   0C8C C0 00 00      cmp b, 0
1574   0C8F C6 AC 0C      je _if22_else
1575   0C92             _if22_true:
1576   0C92             ;; putchar('-'); 
1577   0C92 26 2D 00      mov b, $2d
1578   0C95 DD            push bl
1579   0C96 07 64 13      call putchar
1580   0C99 51 01 00      add sp, 1
1581   0C9C             ;; num = -num; 
1582   0C9C FA 05 00      lea d, [bp + 5] ; $num
1583   0C9F DA            push d
1584   0CA0 FA 05 00      lea d, [bp + 5] ; $num
1585   0CA3 2A            mov b, [d]
1586   0CA4 FD 97         neg b
1587   0CA6 E7            pop d
1588   0CA7 FD 43         mov [d], b
1589   0CA9 0A CE 0C      jmp _if22_exit
1590   0CAC             _if22_else:
1591   0CAC             ;; if (num == 0) { 
1592   0CAC             _if23_cond:
1593   0CAC FA 05 00      lea d, [bp + 5] ; $num
1594   0CAF 2A            mov b, [d]
1595   0CB0             ; START RELATIONAL
1596   0CB0 D7            push a
1597   0CB1 11            mov a, b
1598   0CB2 26 00 00      mov b, $0
1599   0CB5 B0            cmp a, b
1600   0CB6 FD 71         seq ; ==
1601   0CB8 E4            pop a
1602   0CB9             ; END RELATIONAL
1603   0CB9 C0 00 00      cmp b, 0
1604   0CBC C6 CE 0C      je _if23_exit
1605   0CBF             _if23_true:
1606   0CBF             ;; putchar('0'); 
1607   0CBF 26 30 00      mov b, $30
1608   0CC2 DD            push bl
1609   0CC3 07 64 13      call putchar
1610   0CC6 51 01 00      add sp, 1
1611   0CC9             ;; return; 
1612   0CC9 F9            leave
1613   0CCA 09            ret
1614   0CCB 0A CE 0C      jmp _if23_exit
1615   0CCE             _if23_exit:
1616   0CCE             _if22_exit:
1617   0CCE             ;; while (num > 0) { 
1618   0CCE             _while24_cond:
1619   0CCE FA 05 00      lea d, [bp + 5] ; $num
1620   0CD1 2A            mov b, [d]
1621   0CD2             ; START RELATIONAL
1622   0CD2 D7            push a
1623   0CD3 11            mov a, b
1624   0CD4 26 00 00      mov b, $0
1625   0CD7 B0            cmp a, b
1626   0CD8 FD 7F         sgt ; >
1627   0CDA E4            pop a
1628   0CDB             ; END RELATIONAL
1629   0CDB C0 00 00      cmp b, 0
1630   0CDE C6 28 0D      je _while24_exit
1631   0CE1             _while24_block:
1632   0CE1             ;; digits[i] = '0' + (num % 10); 
1633   0CE1 FA FC FF      lea d, [bp + -4] ; $digits
1634   0CE4 D7            push a
1635   0CE5 DA            push d
1636   0CE6 FA FA FF      lea d, [bp + -6] ; $i
1637   0CE9 2A            mov b, [d]
1638   0CEA E7            pop d
1639   0CEB 5A            add d, b
1640   0CEC E4            pop a
1641   0CED DA            push d
1642   0CEE 26 30 00      mov b, $30
1643   0CF1             ; START TERMS
1644   0CF1 D7            push a
1645   0CF2 11            mov a, b
1646   0CF3 FA 05 00      lea d, [bp + 5] ; $num
1647   0CF6 2A            mov b, [d]
1648   0CF7             ; START FACTORS
1649   0CF7 D7            push a
1650   0CF8 11            mov a, b
1651   0CF9 26 0A 00      mov b, $a
1652   0CFC AE            div a, b ; 
1653   0CFD 11            mov a, b
1654   0CFE 27            mov b, a
1655   0CFF E4            pop a
1656   0D00             ; END FACTORS
1657   0D00 56            add b, a
1658   0D01 E4            pop a
1659   0D02             ; END TERMS
1660   0D02 E7            pop d
1661   0D03 FD 3E         mov [d], bl
1662   0D05             ;; num = num / 10; 
1663   0D05 FA 05 00      lea d, [bp + 5] ; $num
1664   0D08 DA            push d
1665   0D09 FA 05 00      lea d, [bp + 5] ; $num
1666   0D0C 2A            mov b, [d]
1667   0D0D             ; START FACTORS
1668   0D0D D7            push a
1669   0D0E 11            mov a, b
1670   0D0F 26 0A 00      mov b, $a
1671   0D12 AE            div a, b
1672   0D13 27            mov b, a
1673   0D14 E4            pop a
1674   0D15             ; END FACTORS
1675   0D15 E7            pop d
1676   0D16 FD 43         mov [d], b
1677   0D18             ;; i++; 
1678   0D18 FA FA FF      lea d, [bp + -6] ; $i
1679   0D1B 2A            mov b, [d]
1680   0D1C D8            push b
1681   0D1D FD 77         inc b
1682   0D1F FA FA FF      lea d, [bp + -6] ; $i
1683   0D22 FD 43         mov [d], b
1684   0D24 E5            pop b
1685   0D25 0A CE 0C      jmp _while24_cond
1686   0D28             _while24_exit:
1687   0D28             ;; while (i > 0) { 
1688   0D28             _while25_cond:
1689   0D28 FA FA FF      lea d, [bp + -6] ; $i
1690   0D2B 2A            mov b, [d]
1691   0D2C             ; START RELATIONAL
1692   0D2C D7            push a
1693   0D2D 11            mov a, b
1694   0D2E 26 00 00      mov b, $0
1695   0D31 B0            cmp a, b
1696   0D32 FD 7F         sgt ; >
1697   0D34 E4            pop a
1698   0D35             ; END RELATIONAL
1699   0D35 C0 00 00      cmp b, 0
1700   0D38 C6 61 0D      je _while25_exit
1701   0D3B             _while25_block:
1702   0D3B             ;; i--; 
1703   0D3B FA FA FF      lea d, [bp + -6] ; $i
1704   0D3E 2A            mov b, [d]
1705   0D3F D8            push b
1706   0D40 FD 7D         dec b
1707   0D42 FA FA FF      lea d, [bp + -6] ; $i
1708   0D45 FD 43         mov [d], b
1709   0D47 E5            pop b
1710   0D48             ;; putchar(digits[i]); 
1711   0D48 FA FC FF      lea d, [bp + -4] ; $digits
1712   0D4B D7            push a
1713   0D4C DA            push d
1714   0D4D FA FA FF      lea d, [bp + -6] ; $i
1715   0D50 2A            mov b, [d]
1716   0D51 E7            pop d
1717   0D52 5A            add d, b
1718   0D53 E4            pop a
1719   0D54 32            mov bl, [d]
1720   0D55 A7 00         mov bh, 0
1721   0D57 DD            push bl
1722   0D58 07 64 13      call putchar
1723   0D5B 51 01 00      add sp, 1
1724   0D5E 0A 28 0D      jmp _while25_cond
1725   0D61             _while25_exit:
1726   0D61 F9            leave
1727   0D62 09            ret
1728   0D63             
1729   0D63             print_signed_long:
1730   0D63 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1731   0D66             ; $digits 
1732   0D66             ; $i 
1733   0D66 10 00 00      mov a, $0
1734   0D69 45 F5 FF      mov [bp + -11], a
1735   0D6C 52 0C 00      sub sp, 12
1736   0D6F             ;; if (num < 0) { 
1737   0D6F             _if26_cond:
1738   0D6F FA 05 00      lea d, [bp + 5] ; $num
1739   0D72 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1740   0D75 FD 39         mov c, b ; And place it into C
1741   0D77 2A            mov b, [d] ; Lower Word in B
1742   0D78             ; START RELATIONAL
1743   0D78 D7            push a
1744   0D79 FD D8         push g
1745   0D7B 11            mov a, b
1746   0D7C FD 7A         mov g, c
1747   0D7E 26 00 00      mov b, $0
1748   0D81 38 00 00      mov c, 0
1749   0D84 FD AF 00 00   cmp32 ga, cb
1749   0D88 00 00 00 00 
1749   0D8C 00 00 00 00 
1749   0D90 00 00 00 00 
1749   0D94 00 00 00 00 
1749   0D98 00 00 00 00 
1749   0D9C 00 00 00 00 
1749   0DA0 00 00 00 00 
1749   0DA4 00 00 00 00 
1749   0DA8 00 00 00 00 
1749   0DAC 00 00 00 00 
1749   0DB0 00 00 00 00 
1749   0DB4 00 00 00 00 
1749   0DB8 00 00 00 00 
1749   0DBC 00 00 00 00 
1749   0DC0 00 00 00 00 
1749   0DC4 00 00 00 00 
1749   0DC8 00 00 00 00 
1749   0DCC 00 00 00 00 
1749   0DD0 00 00 00 00 
1749   0DD4 00 00 00 00 
1749   0DD8 00 00 00 00 
1749   0DDC 00 00 00 00 
1749   0DE0 00 00 00 00 
1749   0DE4 00 00 00 00 
1749   0DE8 00 00 00 00 
1749   0DEC 00 00 00 00 
1749   0DF0 00 00 00 00 
1749   0DF4 00 00 00 00 
1749   0DF8 00 00 00 00 
1749   0DFC 00 00 00 00 
1749   0E00 00 00 00 00 
1749   0E04 00 00 00 00 
1749   0E08 00 00 00 00 
1749   0E0C 00 00 00 00 
1749   0E10 00 00 00 00 
1749   0E14 00 00 00 00 
1749   0E18 00 00 00 00 
1749   0E1C 00 00 00 00 
1749   0E20 00 00 00 00 
1749   0E24 00 00 00 00 
1749   0E28 00 00 00 00 
1749   0E2C 00 00 00 00 
1749   0E30 00 00 00 00 
1749   0E34 00 00 00 00 
1749   0E38 00 00 00 00 
1749   0E3C 00 00 00 00 
1749   0E40 00 00 00 00 
1749   0E44 00 00 00 00 
1749   0E48 00 00 00 00 
1749   0E4C 00 00 00 00 
1749   0E50 00 00 00 00 
1749   0E54 00 00 00 00 
1749   0E58 00 00 00 00 
1749   0E5C 00 00 00 00 
1749   0E60 00 00 00 00 
1749   0E64 00 00 00 00 
1749   0E68 00 00 00 00 
1749   0E6C 00 00 00 00 
1749   0E70 00 00 00 00 
1749   0E74 00 00 00 00 
1749   0E78 00 00 00 00 
1749   0E7C 00 00 00 00 
1749   0E80 00 00 00 00 
1749   0E84 00 
1750   0E85 FD 73         slt ; <
1751   0E87 FD F1         pop g
1752   0E89 E4            pop a
1753   0E8A             ; END RELATIONAL
1754   0E8A C0 00 00      cmp b, 0
1755   0E8D C6 B4 0E      je _if26_else
1756   0E90             _if26_true:
1757   0E90             ;; putchar('-'); 
1758   0E90 26 2D 00      mov b, $2d
1759   0E93 DD            push bl
1760   0E94 07 64 13      call putchar
1761   0E97 51 01 00      add sp, 1
1762   0E9A             ;; num = -num; 
1763   0E9A FA 05 00      lea d, [bp + 5] ; $num
1764   0E9D DA            push d
1765   0E9E FA 05 00      lea d, [bp + 5] ; $num
1766   0EA1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1767   0EA4 FD 39         mov c, b ; And place it into C
1768   0EA6 2A            mov b, [d] ; Lower Word in B
1769   0EA7 FD 97         neg b
1770   0EA9 E7            pop d
1771   0EAA FD 43         mov [d], b
1772   0EAC 28            mov b, c
1773   0EAD FD 44 02 00   mov [d + 2], b
1774   0EB1 0A E4 0F      jmp _if26_exit
1775   0EB4             _if26_else:
1776   0EB4             ;; if (num == 0) { 
1777   0EB4             _if27_cond:
1778   0EB4 FA 05 00      lea d, [bp + 5] ; $num
1779   0EB7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1780   0EBA FD 39         mov c, b ; And place it into C
1781   0EBC 2A            mov b, [d] ; Lower Word in B
1782   0EBD             ; START RELATIONAL
1783   0EBD D7            push a
1784   0EBE FD D8         push g
1785   0EC0 11            mov a, b
1786   0EC1 FD 7A         mov g, c
1787   0EC3 26 00 00      mov b, $0
1788   0EC6 38 00 00      mov c, 0
1789   0EC9 FD AF 00 00   cmp32 ga, cb
1789   0ECD 00 00 00 00 
1789   0ED1 00 00 00 00 
1789   0ED5 00 00 00 00 
1789   0ED9 00 00 00 00 
1789   0EDD 00 00 00 00 
1789   0EE1 00 00 00 00 
1789   0EE5 00 00 00 00 
1789   0EE9 00 00 00 00 
1789   0EED 00 00 00 00 
1789   0EF1 00 00 00 00 
1789   0EF5 00 00 00 00 
1789   0EF9 00 00 00 00 
1789   0EFD 00 00 00 00 
1789   0F01 00 00 00 00 
1789   0F05 00 00 00 00 
1789   0F09 00 00 00 00 
1789   0F0D 00 00 00 00 
1789   0F11 00 00 00 00 
1789   0F15 00 00 00 00 
1789   0F19 00 00 00 00 
1789   0F1D 00 00 00 00 
1789   0F21 00 00 00 00 
1789   0F25 00 00 00 00 
1789   0F29 00 00 00 00 
1789   0F2D 00 00 00 00 
1789   0F31 00 00 00 00 
1789   0F35 00 00 00 00 
1789   0F39 00 00 00 00 
1789   0F3D 00 00 00 00 
1789   0F41 00 00 00 00 
1789   0F45 00 00 00 00 
1789   0F49 00 00 00 00 
1789   0F4D 00 00 00 00 
1789   0F51 00 00 00 00 
1789   0F55 00 00 00 00 
1789   0F59 00 00 00 00 
1789   0F5D 00 00 00 00 
1789   0F61 00 00 00 00 
1789   0F65 00 00 00 00 
1789   0F69 00 00 00 00 
1789   0F6D 00 00 00 00 
1789   0F71 00 00 00 00 
1789   0F75 00 00 00 00 
1789   0F79 00 00 00 00 
1789   0F7D 00 00 00 00 
1789   0F81 00 00 00 00 
1789   0F85 00 00 00 00 
1789   0F89 00 00 00 00 
1789   0F8D 00 00 00 00 
1789   0F91 00 00 00 00 
1789   0F95 00 00 00 00 
1789   0F99 00 00 00 00 
1789   0F9D 00 00 00 00 
1789   0FA1 00 00 00 00 
1789   0FA5 00 00 00 00 
1789   0FA9 00 00 00 00 
1789   0FAD 00 00 00 00 
1789   0FB1 00 00 00 00 
1789   0FB5 00 00 00 00 
1789   0FB9 00 00 00 00 
1789   0FBD 00 00 00 00 
1789   0FC1 00 00 00 00 
1789   0FC5 00 00 00 00 
1789   0FC9 00 
1790   0FCA FD 71         seq ; ==
1791   0FCC FD F1         pop g
1792   0FCE E4            pop a
1793   0FCF             ; END RELATIONAL
1794   0FCF C0 00 00      cmp b, 0
1795   0FD2 C6 E4 0F      je _if27_exit
1796   0FD5             _if27_true:
1797   0FD5             ;; putchar('0'); 
1798   0FD5 26 30 00      mov b, $30
1799   0FD8 DD            push bl
1800   0FD9 07 64 13      call putchar
1801   0FDC 51 01 00      add sp, 1
1802   0FDF             ;; return; 
1803   0FDF F9            leave
1804   0FE0 09            ret
1805   0FE1 0A E4 0F      jmp _if27_exit
1806   0FE4             _if27_exit:
1807   0FE4             _if26_exit:
1808   0FE4             ;; while (num > 0) { 
1809   0FE4             _while28_cond:
1810   0FE4 FA 05 00      lea d, [bp + 5] ; $num
1811   0FE7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1812   0FEA FD 39         mov c, b ; And place it into C
1813   0FEC 2A            mov b, [d] ; Lower Word in B
1814   0FED             ; START RELATIONAL
1815   0FED D7            push a
1816   0FEE FD D8         push g
1817   0FF0 11            mov a, b
1818   0FF1 FD 7A         mov g, c
1819   0FF3 26 00 00      mov b, $0
1820   0FF6 38 00 00      mov c, 0
1821   0FF9 FD 7F         sgt
1822   0FFB FD F1         pop g
1823   0FFD E4            pop a
1824   0FFE             ; END RELATIONAL
1825   0FFE C0 00 00      cmp b, 0
1826   1001 C6 61 10      je _while28_exit
1827   1004             _while28_block:
1828   1004             ;; digits[i] = '0' + (num % 10); 
1829   1004 FA F7 FF      lea d, [bp + -9] ; $digits
1830   1007 D7            push a
1831   1008 DA            push d
1832   1009 FA F5 FF      lea d, [bp + -11] ; $i
1833   100C 2A            mov b, [d]
1834   100D E7            pop d
1835   100E 5A            add d, b
1836   100F E4            pop a
1837   1010 DA            push d
1838   1011 26 30 00      mov b, $30
1839   1014             ; START TERMS
1840   1014 D7            push a
1841   1015 11            mov a, b
1842   1016 FA 05 00      lea d, [bp + 5] ; $num
1843   1019 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1844   101C FD 39         mov c, b ; And place it into C
1845   101E 2A            mov b, [d] ; Lower Word in B
1846   101F             ; START FACTORS
1847   101F D7            push a
1848   1020 11            mov a, b
1849   1021 26 0A 00      mov b, $a
1850   1024 AE            div a, b ; 
1851   1025 11            mov a, b
1852   1026 27            mov b, a
1853   1027 E4            pop a
1854   1028             ; END FACTORS
1855   1028 54            add a, b
1856   1029 D7            push a
1857   102A FD 12         mov a, g
1858   102C 28            mov b, c
1859   102D 5C            adc a, b
1860   102E 39            mov c, a
1861   102F E5            pop b
1862   1030 E4            pop a
1863   1031             ; END TERMS
1864   1031 E7            pop d
1865   1032 FD 3E         mov [d], bl
1866   1034             ;; num = num / 10; 
1867   1034 FA 05 00      lea d, [bp + 5] ; $num
1868   1037 DA            push d
1869   1038 FA 05 00      lea d, [bp + 5] ; $num
1870   103B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1871   103E FD 39         mov c, b ; And place it into C
1872   1040 2A            mov b, [d] ; Lower Word in B
1873   1041             ; START FACTORS
1874   1041 D7            push a
1875   1042 11            mov a, b
1876   1043 26 0A 00      mov b, $a
1877   1046 AE            div a, b
1878   1047 27            mov b, a
1879   1048 E4            pop a
1880   1049             ; END FACTORS
1881   1049 E7            pop d
1882   104A FD 43         mov [d], b
1883   104C 28            mov b, c
1884   104D FD 44 02 00   mov [d + 2], b
1885   1051             ;; i++; 
1886   1051 FA F5 FF      lea d, [bp + -11] ; $i
1887   1054 2A            mov b, [d]
1888   1055 D8            push b
1889   1056 FD 77         inc b
1890   1058 FA F5 FF      lea d, [bp + -11] ; $i
1891   105B FD 43         mov [d], b
1892   105D E5            pop b
1893   105E 0A E4 0F      jmp _while28_cond
1894   1061             _while28_exit:
1895   1061             ;; while (i > 0) { 
1896   1061             _while29_cond:
1897   1061 FA F5 FF      lea d, [bp + -11] ; $i
1898   1064 2A            mov b, [d]
1899   1065             ; START RELATIONAL
1900   1065 D7            push a
1901   1066 11            mov a, b
1902   1067 26 00 00      mov b, $0
1903   106A B0            cmp a, b
1904   106B FD 7F         sgt ; >
1905   106D E4            pop a
1906   106E             ; END RELATIONAL
1907   106E C0 00 00      cmp b, 0
1908   1071 C6 9A 10      je _while29_exit
1909   1074             _while29_block:
1910   1074             ;; i--; 
1911   1074 FA F5 FF      lea d, [bp + -11] ; $i
1912   1077 2A            mov b, [d]
1913   1078 D8            push b
1914   1079 FD 7D         dec b
1915   107B FA F5 FF      lea d, [bp + -11] ; $i
1916   107E FD 43         mov [d], b
1917   1080 E5            pop b
1918   1081             ;; putchar(digits[i]); 
1919   1081 FA F7 FF      lea d, [bp + -9] ; $digits
1920   1084 D7            push a
1921   1085 DA            push d
1922   1086 FA F5 FF      lea d, [bp + -11] ; $i
1923   1089 2A            mov b, [d]
1924   108A E7            pop d
1925   108B 5A            add d, b
1926   108C E4            pop a
1927   108D 32            mov bl, [d]
1928   108E A7 00         mov bh, 0
1929   1090 DD            push bl
1930   1091 07 64 13      call putchar
1931   1094 51 01 00      add sp, 1
1932   1097 0A 61 10      jmp _while29_cond
1933   109A             _while29_exit:
1934   109A F9            leave
1935   109B 09            ret
1936   109C             
1937   109C             print_unsigned_long:
1938   109C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1939   109F             ; $digits 
1940   109F             ; $i 
1941   109F 52 0C 00      sub sp, 12
1942   10A2             ;; i = 0; 
1943   10A2 FA F5 FF      lea d, [bp + -11] ; $i
1944   10A5 DA            push d
1945   10A6 26 00 00      mov b, $0
1946   10A9 E7            pop d
1947   10AA FD 43         mov [d], b
1948   10AC             ;; if(num == 0){ 
1949   10AC             _if30_cond:
1950   10AC FA 05 00      lea d, [bp + 5] ; $num
1951   10AF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1952   10B2 FD 39         mov c, b ; And place it into C
1953   10B4 2A            mov b, [d] ; Lower Word in B
1954   10B5             ; START RELATIONAL
1955   10B5 D7            push a
1956   10B6 FD D8         push g
1957   10B8 11            mov a, b
1958   10B9 FD 7A         mov g, c
1959   10BB 26 00 00      mov b, $0
1960   10BE 38 00 00      mov c, 0
1961   10C1 FD AF 00 00   cmp32 ga, cb
1961   10C5 00 00 00 00 
1961   10C9 00 00 00 00 
1961   10CD 00 00 00 00 
1961   10D1 00 00 00 00 
1961   10D5 00 00 00 00 
1961   10D9 00 00 00 00 
1961   10DD 00 00 00 00 
1961   10E1 00 00 00 00 
1961   10E5 00 00 00 00 
1961   10E9 00 00 00 00 
1961   10ED 00 00 00 00 
1961   10F1 00 00 00 00 
1961   10F5 00 00 00 00 
1961   10F9 00 00 00 00 
1961   10FD 00 00 00 00 
1961   1101 00 00 00 00 
1961   1105 00 00 00 00 
1961   1109 00 00 00 00 
1961   110D 00 00 00 00 
1961   1111 00 00 00 00 
1961   1115 00 00 00 00 
1961   1119 00 00 00 00 
1961   111D 00 00 00 00 
1961   1121 00 00 00 00 
1961   1125 00 00 00 00 
1961   1129 00 00 00 00 
1961   112D 00 00 00 00 
1961   1131 00 00 00 00 
1961   1135 00 00 00 00 
1961   1139 00 00 00 00 
1961   113D 00 00 00 00 
1961   1141 00 00 00 00 
1961   1145 00 00 00 00 
1961   1149 00 00 00 00 
1961   114D 00 00 00 00 
1961   1151 00 00 00 00 
1961   1155 00 00 00 00 
1961   1159 00 00 00 00 
1961   115D 00 00 00 00 
1961   1161 00 00 00 00 
1961   1165 00 00 00 00 
1961   1169 00 00 00 00 
1961   116D 00 00 00 00 
1961   1171 00 00 00 00 
1961   1175 00 00 00 00 
1961   1179 00 00 00 00 
1961   117D 00 00 00 00 
1961   1181 00 00 00 00 
1961   1185 00 00 00 00 
1961   1189 00 00 00 00 
1961   118D 00 00 00 00 
1961   1191 00 00 00 00 
1961   1195 00 00 00 00 
1961   1199 00 00 00 00 
1961   119D 00 00 00 00 
1961   11A1 00 00 00 00 
1961   11A5 00 00 00 00 
1961   11A9 00 00 00 00 
1961   11AD 00 00 00 00 
1961   11B1 00 00 00 00 
1961   11B5 00 00 00 00 
1961   11B9 00 00 00 00 
1961   11BD 00 00 00 00 
1961   11C1 00 
1962   11C2 FD 71         seq ; ==
1963   11C4 FD F1         pop g
1964   11C6 E4            pop a
1965   11C7             ; END RELATIONAL
1966   11C7 C0 00 00      cmp b, 0
1967   11CA C6 DC 11      je _if30_exit
1968   11CD             _if30_true:
1969   11CD             ;; putchar('0'); 
1970   11CD 26 30 00      mov b, $30
1971   11D0 DD            push bl
1972   11D1 07 64 13      call putchar
1973   11D4 51 01 00      add sp, 1
1974   11D7             ;; return; 
1975   11D7 F9            leave
1976   11D8 09            ret
1977   11D9 0A DC 11      jmp _if30_exit
1978   11DC             _if30_exit:
1979   11DC             ;; while (num > 0) { 
1980   11DC             _while31_cond:
1981   11DC FA 05 00      lea d, [bp + 5] ; $num
1982   11DF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1983   11E2 FD 39         mov c, b ; And place it into C
1984   11E4 2A            mov b, [d] ; Lower Word in B
1985   11E5             ; START RELATIONAL
1986   11E5 D7            push a
1987   11E6 FD D8         push g
1988   11E8 11            mov a, b
1989   11E9 FD 7A         mov g, c
1990   11EB 26 00 00      mov b, $0
1991   11EE 38 00 00      mov c, 0
1992   11F1 FD 81         sgu
1993   11F3 FD F1         pop g
1994   11F5 E4            pop a
1995   11F6             ; END RELATIONAL
1996   11F6 C0 00 00      cmp b, 0
1997   11F9 C6 59 12      je _while31_exit
1998   11FC             _while31_block:
1999   11FC             ;; digits[i] = '0' + (num % 10); 
2000   11FC FA F7 FF      lea d, [bp + -9] ; $digits
2001   11FF D7            push a
2002   1200 DA            push d
2003   1201 FA F5 FF      lea d, [bp + -11] ; $i
2004   1204 2A            mov b, [d]
2005   1205 E7            pop d
2006   1206 5A            add d, b
2007   1207 E4            pop a
2008   1208 DA            push d
2009   1209 26 30 00      mov b, $30
2010   120C             ; START TERMS
2011   120C D7            push a
2012   120D 11            mov a, b
2013   120E FA 05 00      lea d, [bp + 5] ; $num
2014   1211 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2015   1214 FD 39         mov c, b ; And place it into C
2016   1216 2A            mov b, [d] ; Lower Word in B
2017   1217             ; START FACTORS
2018   1217 D7            push a
2019   1218 11            mov a, b
2020   1219 26 0A 00      mov b, $a
2021   121C AE            div a, b ; 
2022   121D 11            mov a, b
2023   121E 27            mov b, a
2024   121F E4            pop a
2025   1220             ; END FACTORS
2026   1220 54            add a, b
2027   1221 D7            push a
2028   1222 FD 12         mov a, g
2029   1224 28            mov b, c
2030   1225 5C            adc a, b
2031   1226 39            mov c, a
2032   1227 E5            pop b
2033   1228 E4            pop a
2034   1229             ; END TERMS
2035   1229 E7            pop d
2036   122A FD 3E         mov [d], bl
2037   122C             ;; num = num / 10; 
2038   122C FA 05 00      lea d, [bp + 5] ; $num
2039   122F DA            push d
2040   1230 FA 05 00      lea d, [bp + 5] ; $num
2041   1233 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2042   1236 FD 39         mov c, b ; And place it into C
2043   1238 2A            mov b, [d] ; Lower Word in B
2044   1239             ; START FACTORS
2045   1239 D7            push a
2046   123A 11            mov a, b
2047   123B 26 0A 00      mov b, $a
2048   123E AE            div a, b
2049   123F 27            mov b, a
2050   1240 E4            pop a
2051   1241             ; END FACTORS
2052   1241 E7            pop d
2053   1242 FD 43         mov [d], b
2054   1244 28            mov b, c
2055   1245 FD 44 02 00   mov [d + 2], b
2056   1249             ;; i++; 
2057   1249 FA F5 FF      lea d, [bp + -11] ; $i
2058   124C 2A            mov b, [d]
2059   124D D8            push b
2060   124E FD 77         inc b
2061   1250 FA F5 FF      lea d, [bp + -11] ; $i
2062   1253 FD 43         mov [d], b
2063   1255 E5            pop b
2064   1256 0A DC 11      jmp _while31_cond
2065   1259             _while31_exit:
2066   1259             ;; while (i > 0) { 
2067   1259             _while32_cond:
2068   1259 FA F5 FF      lea d, [bp + -11] ; $i
2069   125C 2A            mov b, [d]
2070   125D             ; START RELATIONAL
2071   125D D7            push a
2072   125E 11            mov a, b
2073   125F 26 00 00      mov b, $0
2074   1262 B0            cmp a, b
2075   1263 FD 7F         sgt ; >
2076   1265 E4            pop a
2077   1266             ; END RELATIONAL
2078   1266 C0 00 00      cmp b, 0
2079   1269 C6 92 12      je _while32_exit
2080   126C             _while32_block:
2081   126C             ;; i--; 
2082   126C FA F5 FF      lea d, [bp + -11] ; $i
2083   126F 2A            mov b, [d]
2084   1270 D8            push b
2085   1271 FD 7D         dec b
2086   1273 FA F5 FF      lea d, [bp + -11] ; $i
2087   1276 FD 43         mov [d], b
2088   1278 E5            pop b
2089   1279             ;; putchar(digits[i]); 
2090   1279 FA F7 FF      lea d, [bp + -9] ; $digits
2091   127C D7            push a
2092   127D DA            push d
2093   127E FA F5 FF      lea d, [bp + -11] ; $i
2094   1281 2A            mov b, [d]
2095   1282 E7            pop d
2096   1283 5A            add d, b
2097   1284 E4            pop a
2098   1285 32            mov bl, [d]
2099   1286 A7 00         mov bh, 0
2100   1288 DD            push bl
2101   1289 07 64 13      call putchar
2102   128C 51 01 00      add sp, 1
2103   128F 0A 59 12      jmp _while32_cond
2104   1292             _while32_exit:
2105   1292 F9            leave
2106   1293 09            ret
2107   1294             
2108   1294             print_unsigned:
2109   1294 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2110   1297             ; $digits 
2111   1297             ; $i 
2112   1297 52 07 00      sub sp, 7
2113   129A             ;; i = 0; 
2114   129A FA FA FF      lea d, [bp + -6] ; $i
2115   129D DA            push d
2116   129E 26 00 00      mov b, $0
2117   12A1 E7            pop d
2118   12A2 FD 43         mov [d], b
2119   12A4             ;; if(num == 0){ 
2120   12A4             _if33_cond:
2121   12A4 FA 05 00      lea d, [bp + 5] ; $num
2122   12A7 2A            mov b, [d]
2123   12A8             ; START RELATIONAL
2124   12A8 D7            push a
2125   12A9 11            mov a, b
2126   12AA 26 00 00      mov b, $0
2127   12AD B0            cmp a, b
2128   12AE FD 71         seq ; ==
2129   12B0 E4            pop a
2130   12B1             ; END RELATIONAL
2131   12B1 C0 00 00      cmp b, 0
2132   12B4 C6 C6 12      je _if33_exit
2133   12B7             _if33_true:
2134   12B7             ;; putchar('0'); 
2135   12B7 26 30 00      mov b, $30
2136   12BA DD            push bl
2137   12BB 07 64 13      call putchar
2138   12BE 51 01 00      add sp, 1
2139   12C1             ;; return; 
2140   12C1 F9            leave
2141   12C2 09            ret
2142   12C3 0A C6 12      jmp _if33_exit
2143   12C6             _if33_exit:
2144   12C6             ;; while (num > 0) { 
2145   12C6             _while34_cond:
2146   12C6 FA 05 00      lea d, [bp + 5] ; $num
2147   12C9 2A            mov b, [d]
2148   12CA             ; START RELATIONAL
2149   12CA D7            push a
2150   12CB 11            mov a, b
2151   12CC 26 00 00      mov b, $0
2152   12CF B0            cmp a, b
2153   12D0 FD 81         sgu ; > (unsigned)
2154   12D2 E4            pop a
2155   12D3             ; END RELATIONAL
2156   12D3 C0 00 00      cmp b, 0
2157   12D6 C6 20 13      je _while34_exit
2158   12D9             _while34_block:
2159   12D9             ;; digits[i] = '0' + (num % 10); 
2160   12D9 FA FC FF      lea d, [bp + -4] ; $digits
2161   12DC D7            push a
2162   12DD DA            push d
2163   12DE FA FA FF      lea d, [bp + -6] ; $i
2164   12E1 2A            mov b, [d]
2165   12E2 E7            pop d
2166   12E3 5A            add d, b
2167   12E4 E4            pop a
2168   12E5 DA            push d
2169   12E6 26 30 00      mov b, $30
2170   12E9             ; START TERMS
2171   12E9 D7            push a
2172   12EA 11            mov a, b
2173   12EB FA 05 00      lea d, [bp + 5] ; $num
2174   12EE 2A            mov b, [d]
2175   12EF             ; START FACTORS
2176   12EF D7            push a
2177   12F0 11            mov a, b
2178   12F1 26 0A 00      mov b, $a
2179   12F4 AE            div a, b ; 
2180   12F5 11            mov a, b
2181   12F6 27            mov b, a
2182   12F7 E4            pop a
2183   12F8             ; END FACTORS
2184   12F8 56            add b, a
2185   12F9 E4            pop a
2186   12FA             ; END TERMS
2187   12FA E7            pop d
2188   12FB FD 3E         mov [d], bl
2189   12FD             ;; num = num / 10; 
2190   12FD FA 05 00      lea d, [bp + 5] ; $num
2191   1300 DA            push d
2192   1301 FA 05 00      lea d, [bp + 5] ; $num
2193   1304 2A            mov b, [d]
2194   1305             ; START FACTORS
2195   1305 D7            push a
2196   1306 11            mov a, b
2197   1307 26 0A 00      mov b, $a
2198   130A AE            div a, b
2199   130B 27            mov b, a
2200   130C E4            pop a
2201   130D             ; END FACTORS
2202   130D E7            pop d
2203   130E FD 43         mov [d], b
2204   1310             ;; i++; 
2205   1310 FA FA FF      lea d, [bp + -6] ; $i
2206   1313 2A            mov b, [d]
2207   1314 D8            push b
2208   1315 FD 77         inc b
2209   1317 FA FA FF      lea d, [bp + -6] ; $i
2210   131A FD 43         mov [d], b
2211   131C E5            pop b
2212   131D 0A C6 12      jmp _while34_cond
2213   1320             _while34_exit:
2214   1320             ;; while (i > 0) { 
2215   1320             _while35_cond:
2216   1320 FA FA FF      lea d, [bp + -6] ; $i
2217   1323 2A            mov b, [d]
2218   1324             ; START RELATIONAL
2219   1324 D7            push a
2220   1325 11            mov a, b
2221   1326 26 00 00      mov b, $0
2222   1329 B0            cmp a, b
2223   132A FD 7F         sgt ; >
2224   132C E4            pop a
2225   132D             ; END RELATIONAL
2226   132D C0 00 00      cmp b, 0
2227   1330 C6 59 13      je _while35_exit
2228   1333             _while35_block:
2229   1333             ;; i--; 
2230   1333 FA FA FF      lea d, [bp + -6] ; $i
2231   1336 2A            mov b, [d]
2232   1337 D8            push b
2233   1338 FD 7D         dec b
2234   133A FA FA FF      lea d, [bp + -6] ; $i
2235   133D FD 43         mov [d], b
2236   133F E5            pop b
2237   1340             ;; putchar(digits[i]); 
2238   1340 FA FC FF      lea d, [bp + -4] ; $digits
2239   1343 D7            push a
2240   1344 DA            push d
2241   1345 FA FA FF      lea d, [bp + -6] ; $i
2242   1348 2A            mov b, [d]
2243   1349 E7            pop d
2244   134A 5A            add d, b
2245   134B E4            pop a
2246   134C 32            mov bl, [d]
2247   134D A7 00         mov bh, 0
2248   134F DD            push bl
2249   1350 07 64 13      call putchar
2250   1353 51 01 00      add sp, 1
2251   1356 0A 20 13      jmp _while35_cond
2252   1359             _while35_exit:
2253   1359 F9            leave
2254   135A 09            ret
2255   135B             
2256   135B             date:
2257   135B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2258   135E             
2259   135E             ; --- BEGIN INLINE ASM BLOCK
2260   135E 19 00         mov al, 0 
2261   1360 05 07         syscall sys_datetime
2262   1362             ; --- END INLINE ASM BLOCK
2263   1362             
2264   1362 F9            leave
2265   1363 09            ret
2266   1364             
2267   1364             putchar:
2268   1364 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2269   1367             
2270   1367             ; --- BEGIN INLINE ASM BLOCK
2271   1367 FA 05 00      lea d, [bp + 5] ; $c
2272   136A 1E            mov al, [d]
2273   136B 23            mov ah, al
2274   136C 07 F5 14      call _putchar
2275   136F             ; --- END INLINE ASM BLOCK
2276   136F             
2277   136F F9            leave
2278   1370 09            ret
2279   1371             
2280   1371             getchar:
2281   1371 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2282   1374             ; $c 
2283   1374 52 01 00      sub sp, 1
2284   1377             
2285   1377             ; --- BEGIN INLINE ASM BLOCK
2286   1377 07 EE 14      call getch
2287   137A 1A            mov al, ah
2288   137B FA 00 00      lea d, [bp + 0] ; $c
2289   137E 3E            mov [d], al
2290   137F             ; --- END INLINE ASM BLOCK
2291   137F             
2292   137F             ;; return c; 
2293   137F FA 00 00      lea d, [bp + 0] ; $c
2294   1382 32            mov bl, [d]
2295   1383 A7 00         mov bh, 0
2296   1385 F9            leave
2297   1386 09            ret
2298   1387             
2299   1387             scann:
2300   1387 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2301   138A             ; $m 
2302   138A 52 02 00      sub sp, 2
2303   138D             
2304   138D             ; --- BEGIN INLINE ASM BLOCK
2305   138D 07 39 17      call scan_u16d
2306   1390 FA FF FF      lea d, [bp + -1] ; $m
2307   1393 43            mov [d], a
2308   1394             ; --- END INLINE ASM BLOCK
2309   1394             
2310   1394             ;; return m; 
2311   1394 FA FF FF      lea d, [bp + -1] ; $m
2312   1397 2A            mov b, [d]
2313   1398 F9            leave
2314   1399 09            ret
2315   139A             
2316   139A             puts:
2317   139A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2318   139D             
2319   139D             ; --- BEGIN INLINE ASM BLOCK
2320   139D FA 05 00      lea d, [bp + 5] ; $s
2321   13A0 15            mov a, [d]
2322   13A1 3C            mov d, a
2323   13A2 07 3F 16      call _puts
2324   13A5 10 00 0A      mov a, $0A00
2325   13A8 05 03         syscall sys_io
2326   13AA             ; --- END INLINE ASM BLOCK
2327   13AA             
2328   13AA F9            leave
2329   13AB 09            ret
2330   13AC             
2331   13AC             print:
2332   13AC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2333   13AF             
2334   13AF             ; --- BEGIN INLINE ASM BLOCK
2335   13AF FA 05 00      lea d, [bp + 5] ; $s
2336   13B2 FD 2A         mov d, [d]
2337   13B4 07 3F 16      call _puts
2338   13B7             ; --- END INLINE ASM BLOCK
2339   13B7             
2340   13B7 F9            leave
2341   13B8 09            ret
2342   13B9             
2343   13B9             getparam:
2344   13B9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2345   13BC             ; $data 
2346   13BC 52 01 00      sub sp, 1
2347   13BF             
2348   13BF             ; --- BEGIN INLINE ASM BLOCK
2349   13BF 19 04         mov al, 4
2350   13C1 FA 05 00      lea d, [bp + 5] ; $address
2351   13C4 FD 2A         mov d, [d]
2352   13C6 05 0C         syscall sys_system
2353   13C8 FA 00 00      lea d, [bp + 0] ; $data
2354   13CB FD 3E         mov [d], bl
2355   13CD             ; --- END INLINE ASM BLOCK
2356   13CD             
2357   13CD             ;; return data; 
2358   13CD FA 00 00      lea d, [bp + 0] ; $data
2359   13D0 32            mov bl, [d]
2360   13D1 A7 00         mov bh, 0
2361   13D3 F9            leave
2362   13D4 09            ret
2363   13D5             
2364   13D5             clear:
2365   13D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2366   13D8             ;; print("\033[2J\033[H"); 
2367   13D8 26 6A 21      mov b, _s5 ; "\033[2J\033[H"
2368   13DB FD AB         swp b
2369   13DD D8            push b
2370   13DE 07 AC 13      call print
2371   13E1 51 02 00      add sp, 2
2372   13E4 F9            leave
2373   13E5 09            ret
2374   13E6             
2375   13E6             abs:
2376   13E6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2377   13E9             ;; return i < 0 ? -i : i; 
2378   13E9             _ternary36_cond:
2379   13E9 FA 05 00      lea d, [bp + 5] ; $i
2380   13EC 2A            mov b, [d]
2381   13ED             ; START RELATIONAL
2382   13ED D7            push a
2383   13EE 11            mov a, b
2384   13EF 26 00 00      mov b, $0
2385   13F2 B0            cmp a, b
2386   13F3 FD 73         slt ; < (signed)
2387   13F5 E4            pop a
2388   13F6             ; END RELATIONAL
2389   13F6 C0 00 00      cmp b, 0
2390   13F9 C6 05 14      je _ternary36_false
2391   13FC             _ternary36_true:
2392   13FC FA 05 00      lea d, [bp + 5] ; $i
2393   13FF 2A            mov b, [d]
2394   1400 FD 97         neg b
2395   1402 0A 09 14      jmp _ternary36_exit
2396   1405             _ternary36_false:
2397   1405 FA 05 00      lea d, [bp + 5] ; $i
2398   1408 2A            mov b, [d]
2399   1409             _ternary36_exit:
2400   1409 F9            leave
2401   140A 09            ret
2402   140B             
2403   140B             include_stdio_asm:
2404   140B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2405   140E             
2406   140E             ; --- BEGIN INLINE ASM BLOCK
2407   140E             .include "lib/asm/stdio.asm"
0001+  140E             ;-----------------------------------------------------------------------------
0002+  140E             ; stdio.s
0003+  140E             ;-----------------------------------------------------------------------------
0004+  140E             .include "lib/asm/string.asm"
0001++ 140E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 140E             ; string.s
0003++ 140E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 140E             
0005++ 140E             
0006++ 140E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 140E             ; _strrev
0008++ 140E             ; reverse a string
0009++ 140E             ; D = string address
0010++ 140E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 140E             ; 01234
0012++ 140E             _strrev:
0013++ 140E 4B          	pusha
0014++ 140F 07 55 14    	call _strlen	; length in C
0015++ 1412 12          	mov a, c
0016++ 1413 AF 01 00    	cmp a, 1
0017++ 1416 D0 30 14    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1419 7D          	dec a
0019++ 141A FD 4E       	mov si, d	; beginning of string
0020++ 141C FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 141E 59          	add d, a	; end of string
0022++ 141F 12          	mov a, c
0023++ 1420 FD 9B       	shr a		; divide by 2
0024++ 1422 39          	mov c, a	; C now counts the steps
0025++ 1423             _strrev_L0:
0026++ 1423 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1424 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1425 3E          	mov [d], al	; store left char into right side
0029++ 1426 1B          	mov al, bl
0030++ 1427 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1428 7E          	dec c
0032++ 1429 7F          	dec d
0033++ 142A C2 00 00    	cmp c, 0
0034++ 142D C7 23 14    	jne _strrev_L0
0035++ 1430             _strrev_end:
0036++ 1430 4C          	popa
0037++ 1431 09          	ret
0038++ 1432             	
0039++ 1432             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1432             ; _strchr
0041++ 1432             ; search string in D for char in AL
0042++ 1432             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1432             _strchr:
0044++ 1432             _strchr_L0:
0045++ 1432 32          	mov bl, [d]
0046++ 1433 C1 00       	cmp bl, 0
0047++ 1435 C6 40 14    	je _strchr_end
0048++ 1438 BA          	cmp al, bl
0049++ 1439 C6 40 14    	je _strchr_end
0050++ 143C 79          	inc d
0051++ 143D 0A 32 14    	jmp _strchr_L0
0052++ 1440             _strchr_end:
0053++ 1440 1B          	mov al, bl
0054++ 1441 09          	ret
0055++ 1442             
0056++ 1442             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1442             ; _strstr
0058++ 1442             ; find sub-string
0059++ 1442             ; str1 in SI
0060++ 1442             ; str2 in DI
0061++ 1442             ; SI points to end of source string
0062++ 1442             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1442             _strstr:
0064++ 1442 DB          	push al
0065++ 1443 DA          	push d
0066++ 1444 E3          	push di
0067++ 1445             _strstr_loop:
0068++ 1445 F3          	cmpsb					; compare a byte of the strings
0069++ 1446 C7 51 14    	jne _strstr_ret
0070++ 1449 FC 00 00    	lea d, [di + 0]
0071++ 144C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 144E C7 45 14    	jne _strstr_loop				; equal chars but not at end
0073++ 1451             _strstr_ret:
0074++ 1451 F0          	pop di
0075++ 1452 E7          	pop d
0076++ 1453 E8          	pop al
0077++ 1454 09          	ret
0078++ 1455             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1455             ; length of null terminated string
0080++ 1455             ; result in C
0081++ 1455             ; pointer in D
0082++ 1455             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1455             _strlen:
0084++ 1455 DA          	push d
0085++ 1456 38 00 00    	mov c, 0
0086++ 1459             _strlen_L1:
0087++ 1459 BD 00       	cmp byte [d], 0
0088++ 145B C6 63 14    	je _strlen_ret
0089++ 145E 79          	inc d
0090++ 145F 78          	inc c
0091++ 1460 0A 59 14    	jmp _strlen_L1
0092++ 1463             _strlen_ret:
0093++ 1463 E7          	pop d
0094++ 1464 09          	ret
0095++ 1465             
0096++ 1465             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1465             ; STRCMP
0098++ 1465             ; compare two strings
0099++ 1465             ; str1 in SI
0100++ 1465             ; str2 in DI
0101++ 1465             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1465             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1465             _strcmp:
0104++ 1465 DB          	push al
0105++ 1466 DA          	push d
0106++ 1467 E3          	push di
0107++ 1468 E2          	push si
0108++ 1469             _strcmp_loop:
0109++ 1469 F3          	cmpsb					; compare a byte of the strings
0110++ 146A C7 75 14    	jne _strcmp_ret
0111++ 146D FB FF FF    	lea d, [si +- 1]
0112++ 1470 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1472 C7 69 14    	jne _strcmp_loop				; equal chars but not at end
0114++ 1475             _strcmp_ret:
0115++ 1475 EF          	pop si
0116++ 1476 F0          	pop di
0117++ 1477 E7          	pop d
0118++ 1478 E8          	pop al
0119++ 1479 09          	ret
0120++ 147A             
0121++ 147A             
0122++ 147A             ; STRCPY
0123++ 147A             ; copy null terminated string from SI to DI
0124++ 147A             ; source in SI
0125++ 147A             ; destination in DI
0126++ 147A             _strcpy:
0127++ 147A E2          	push si
0128++ 147B E3          	push di
0129++ 147C DB          	push al
0130++ 147D             _strcpy_L1:
0131++ 147D F6          	lodsb
0132++ 147E F7          	stosb
0133++ 147F B9 00       	cmp al, 0
0134++ 1481 C7 7D 14    	jne _strcpy_L1
0135++ 1484             _strcpy_end:
0136++ 1484 E8          	pop al
0137++ 1485 F0          	pop di
0138++ 1486 EF          	pop si
0139++ 1487 09          	ret
0140++ 1488             
0141++ 1488             ; STRCAT
0142++ 1488             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1488             ; source in SI
0144++ 1488             ; destination in DI
0145++ 1488             _strcat:
0146++ 1488 E2          	push si
0147++ 1489 E3          	push di
0148++ 148A D7          	push a
0149++ 148B DA          	push d
0150++ 148C 50          	mov a, di
0151++ 148D 3C          	mov d, a
0152++ 148E             _strcat_goto_end_L1:
0153++ 148E BD 00       	cmp byte[d], 0
0154++ 1490 C6 97 14    	je _strcat_start
0155++ 1493 79          	inc d
0156++ 1494 0A 8E 14    	jmp _strcat_goto_end_L1
0157++ 1497             _strcat_start:
0158++ 1497 FD 50       	mov di, d
0159++ 1499             _strcat_L1:
0160++ 1499 F6          	lodsb
0161++ 149A F7          	stosb
0162++ 149B B9 00       	cmp al, 0
0163++ 149D C7 99 14    	jne _strcat_L1
0164++ 14A0             _strcat_end:
0165++ 14A0 E7          	pop d
0166++ 14A1 E4          	pop a
0167++ 14A2 F0          	pop di
0168++ 14A3 EF          	pop si
0169++ 14A4 09          	ret
0170++ 14A5             
0171++ 14A5             
0005+  14A5             
0006+  14A5             ;-----------------------------------------------------------------------------
0007+  14A5             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  14A5             ; ASCII in BL
0009+  14A5             ; result in AL
0010+  14A5             ; ascii for F = 0100 0110
0011+  14A5             ; ascii for 9 = 0011 1001
0012+  14A5             ;-----------------------------------------------------------------------------
0013+  14A5             hex_ascii_encode:
0014+  14A5 1B            mov al, bl
0015+  14A6 93 40         test al, $40        ; test if letter or number
0016+  14A8 C7 AE 14      jnz hex_letter
0017+  14AB 87 0F         and al, $0F        ; get number
0018+  14AD 09            ret
0019+  14AE             hex_letter:
0020+  14AE 87 0F         and al, $0F        ; get letter
0021+  14B0 6A 09         add al, 9
0022+  14B2 09            ret
0023+  14B3             
0024+  14B3             ;-----------------------------------------------------------------------------
0025+  14B3             ; ATOI
0026+  14B3             ; 2 letter hex string in B
0027+  14B3             ; 8bit integer returned in AL
0028+  14B3             ;-----------------------------------------------------------------------------
0029+  14B3             _atoi:
0030+  14B3 D8            push b
0031+  14B4 07 A5 14      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  14B7 30            mov bl, bh
0033+  14B8 DB            push al          ; save a
0034+  14B9 07 A5 14      call hex_ascii_encode
0035+  14BC EA            pop bl  
0036+  14BD FD 9E 04      shl al, 4
0037+  14C0 8C            or al, bl
0038+  14C1 E5            pop b
0039+  14C2 09            ret  
0040+  14C3             
0041+  14C3             
0042+  14C3             ;-----------------------------------------------------------------------------
0043+  14C3             ; ITOA
0044+  14C3             ; 8bit value in BL
0045+  14C3             ; 2 byte ASCII result in A
0046+  14C3             ;-----------------------------------------------------------------------------
0047+  14C3             _itoa:
0048+  14C3 DA            push d
0049+  14C4 D8            push b
0050+  14C5 A7 00         mov bh, 0
0051+  14C7 FD A4 04      shr bl, 4  
0052+  14CA 74            mov d, b
0053+  14CB 1F 73 17      mov al, [d + s_hex_digits]
0054+  14CE 23            mov ah, al
0055+  14CF               
0056+  14CF E5            pop b
0057+  14D0 D8            push b
0058+  14D1 A7 00         mov bh, 0
0059+  14D3 FD 87 0F      and bl, $0F
0060+  14D6 74            mov d, b
0061+  14D7 1F 73 17      mov al, [d + s_hex_digits]
0062+  14DA E5            pop b
0063+  14DB E7            pop d
0064+  14DC 09            ret
0065+  14DD             
0066+  14DD             ;-----------------------------------------------------------------------------
0067+  14DD             ; HEX STRING TO BINARY
0068+  14DD             ; di = destination address
0069+  14DD             ; si = source
0070+  14DD             ;-----------------------------------------------------------------------------
0071+  14DD             _hex_to_int:
0072+  14DD             _hex_to_int_L1:
0073+  14DD F6            lodsb          ; load from [SI] to AL
0074+  14DE B9 00         cmp al, 0        ; check if ASCII 0
0075+  14E0 C6 ED 14      jz _hex_to_int_ret
0076+  14E3 36            mov bh, al
0077+  14E4 F6            lodsb
0078+  14E5 2F            mov bl, al
0079+  14E6 07 B3 14      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  14E9 F7            stosb          ; store AL to [DI]
0081+  14EA 0A DD 14      jmp _hex_to_int_L1
0082+  14ED             _hex_to_int_ret:
0083+  14ED 09            ret    
0084+  14EE             
0085+  14EE             ;-----------------------------------------------------------------------------
0086+  14EE             ; GETCHAR
0087+  14EE             ; char in ah
0088+  14EE             ;-----------------------------------------------------------------------------
0089+  14EE             getch:
0090+  14EE DB            push al
0091+  14EF             getch_retry:
0092+  14EF 19 01         mov al, 1
0093+  14F1 05 03         syscall sys_io      ; receive in AH
0094+  14F3 E8            pop al
0095+  14F4 09            ret
0096+  14F5             
0097+  14F5             ;-----------------------------------------------------------------------------
0098+  14F5             ; PUTCHAR
0099+  14F5             ; char in ah
0100+  14F5             ;-----------------------------------------------------------------------------
0101+  14F5             _putchar:
0102+  14F5 D7            push a
0103+  14F6 19 00         mov al, 0
0104+  14F8 05 03         syscall sys_io      ; char in AH
0105+  14FA E4            pop a
0106+  14FB 09            ret
0107+  14FC             
0108+  14FC             ;-----------------------------------------------------------------------------
0109+  14FC             ;; INPUT A STRING
0110+  14FC             ;; terminates with null
0111+  14FC             ;; pointer in D
0112+  14FC             ;-----------------------------------------------------------------------------
0113+  14FC             _gets:
0114+  14FC D7            push a
0115+  14FD DA            push d
0116+  14FE             _gets_loop:
0117+  14FE 19 01         mov al, 1
0118+  1500 05 03         syscall sys_io      ; receive in AH
0119+  1502 B9 00         cmp al, 0        ; check error code (AL)
0120+  1504 C6 FE 14      je _gets_loop      ; if no char received, retry
0121+  1507             
0122+  1507 76 1B         cmp ah, 27
0123+  1509 C6 2A 15      je _gets_ansi_esc
0124+  150C 76 0A         cmp ah, $0A        ; LF
0125+  150E C6 95 15      je _gets_end
0126+  1511 76 0D         cmp ah, $0D        ; CR
0127+  1513 C6 95 15      je _gets_end
0128+  1516 76 5C         cmp ah, $5C        ; '\\'
0129+  1518 C6 56 15      je _gets_escape
0130+  151B               
0131+  151B 76 08         cmp ah, $08      ; check for backspace
0132+  151D C6 26 15      je _gets_backspace
0133+  1520             
0134+  1520 1A            mov al, ah
0135+  1521 3E            mov [d], al
0136+  1522 79            inc d
0137+  1523 0A FE 14      jmp _gets_loop
0138+  1526             _gets_backspace:
0139+  1526 7F            dec d
0140+  1527 0A FE 14      jmp _gets_loop
0141+  152A             _gets_ansi_esc:
0142+  152A 19 01         mov al, 1
0143+  152C 05 03         syscall sys_io        ; receive in AH without echo
0144+  152E B9 00         cmp al, 0          ; check error code (AL)
0145+  1530 C6 2A 15      je _gets_ansi_esc    ; if no char received, retry
0146+  1533 76 5B         cmp ah, '['
0147+  1535 C7 FE 14      jne _gets_loop
0148+  1538             _gets_ansi_esc_2:
0149+  1538 19 01         mov al, 1
0150+  153A 05 03         syscall sys_io          ; receive in AH without echo
0151+  153C B9 00         cmp al, 0            ; check error code (AL)
0152+  153E C6 38 15      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1541 76 44         cmp ah, 'D'
0154+  1543 C6 4E 15      je _gets_left_arrow
0155+  1546 76 43         cmp ah, 'C'
0156+  1548 C6 52 15      je _gets_right_arrow
0157+  154B 0A FE 14      jmp _gets_loop
0158+  154E             _gets_left_arrow:
0159+  154E 7F            dec d
0160+  154F 0A FE 14      jmp _gets_loop
0161+  1552             _gets_right_arrow:
0162+  1552 79            inc d
0163+  1553 0A FE 14      jmp _gets_loop
0164+  1556             _gets_escape:
0165+  1556 19 01         mov al, 1
0166+  1558 05 03         syscall sys_io      ; receive in AH
0167+  155A B9 00         cmp al, 0        ; check error code (AL)
0168+  155C C6 56 15      je _gets_escape      ; if no char received, retry
0169+  155F 76 6E         cmp ah, 'n'
0170+  1561 C6 80 15      je _gets_LF
0171+  1564 76 72         cmp ah, 'r'
0172+  1566 C6 87 15      je _gets_CR
0173+  1569 76 30         cmp ah, '0'
0174+  156B C6 8E 15      je _gets_NULL
0175+  156E 76 5C         cmp ah, $5C  ; '\'
0176+  1570 C6 79 15      je _gets_slash
0177+  1573 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1574 3E            mov [d], al
0179+  1575 79            inc d
0180+  1576 0A FE 14      jmp _gets_loop
0181+  1579             _gets_slash:
0182+  1579 19 5C         mov al, $5C
0183+  157B 3E            mov [d], al
0184+  157C 79            inc d
0185+  157D 0A FE 14      jmp _gets_loop
0186+  1580             _gets_LF:
0187+  1580 19 0A         mov al, $0A
0188+  1582 3E            mov [d], al
0189+  1583 79            inc d
0190+  1584 0A FE 14      jmp _gets_loop
0191+  1587             _gets_CR:
0192+  1587 19 0D         mov al, $0D
0193+  1589 3E            mov [d], al
0194+  158A 79            inc d
0195+  158B 0A FE 14      jmp _gets_loop
0196+  158E             _gets_NULL:
0197+  158E 19 00         mov al, $00
0198+  1590 3E            mov [d], al
0199+  1591 79            inc d
0200+  1592 0A FE 14      jmp _gets_loop
0201+  1595             _gets_end:
0202+  1595 19 00         mov al, 0
0203+  1597 3E            mov [d], al        ; terminate string
0204+  1598 E7            pop d
0205+  1599 E4            pop a
0206+  159A 09            ret
0207+  159B             
0208+  159B             ;-----------------------------------------------------------------------------
0209+  159B             ;; INPUT TEXT
0210+  159B             ;; terminated with CTRL+D
0211+  159B             ;; pointer in D
0212+  159B             ;-----------------------------------------------------------------------------
0213+  159B             _gettxt:
0214+  159B D7            push a
0215+  159C DA            push d
0216+  159D             _gettxt_loop:
0217+  159D 19 01         mov al, 1
0218+  159F 05 03         syscall sys_io      ; receive in AH
0219+  15A1 B9 00         cmp al, 0        ; check error code (AL)
0220+  15A3 C6 9D 15      je _gettxt_loop    ; if no char received, retry
0221+  15A6 76 04         cmp ah, 4      ; EOT
0222+  15A8 C6 E6 15      je _gettxt_end
0223+  15AB 76 08         cmp ah, $08      ; check for backspace
0224+  15AD C6 E2 15      je _gettxt_backspace
0225+  15B0 76 5C         cmp ah, $5C        ; '\'
0226+  15B2 C6 BB 15      je _gettxt_escape
0227+  15B5 1A            mov al, ah
0228+  15B6 3E            mov [d], al
0229+  15B7 79            inc d
0230+  15B8 0A 9D 15      jmp _gettxt_loop
0231+  15BB             _gettxt_escape:
0232+  15BB 19 01         mov al, 1
0233+  15BD 05 03         syscall sys_io      ; receive in AH
0234+  15BF B9 00         cmp al, 0        ; check error code (AL)
0235+  15C1 C6 BB 15      je _gettxt_escape    ; if no char received, retry
0236+  15C4 76 6E         cmp ah, 'n'
0237+  15C6 C6 D4 15      je _gettxt_LF
0238+  15C9 76 72         cmp ah, 'r'
0239+  15CB C6 DB 15      je _gettxt_CR
0240+  15CE 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  15CF 3E            mov [d], al
0242+  15D0 79            inc d
0243+  15D1 0A 9D 15      jmp _gettxt_loop
0244+  15D4             _gettxt_LF:
0245+  15D4 19 0A         mov al, $0A
0246+  15D6 3E            mov [d], al
0247+  15D7 79            inc d
0248+  15D8 0A 9D 15      jmp _gettxt_loop
0249+  15DB             _gettxt_CR:
0250+  15DB 19 0D         mov al, $0D
0251+  15DD 3E            mov [d], al
0252+  15DE 79            inc d
0253+  15DF 0A 9D 15      jmp _gettxt_loop
0254+  15E2             _gettxt_backspace:
0255+  15E2 7F            dec d
0256+  15E3 0A 9D 15      jmp _gettxt_loop
0257+  15E6             _gettxt_end:
0258+  15E6 19 00         mov al, 0
0259+  15E8 3E            mov [d], al        ; terminate string
0260+  15E9 E7            pop d
0261+  15EA E4            pop a
0262+  15EB 09            ret
0263+  15EC             
0264+  15EC             ;-----------------------------------------------------------------------------
0265+  15EC             ; PRINT NEW LINE
0266+  15EC             ;-----------------------------------------------------------------------------
0267+  15EC             printnl:
0268+  15EC D7            push a
0269+  15ED 10 00 0A      mov a, $0A00
0270+  15F0 05 03         syscall sys_io
0271+  15F2 10 00 0D      mov a, $0D00
0272+  15F5 05 03         syscall sys_io
0273+  15F7 E4            pop a
0274+  15F8 09            ret
0275+  15F9             
0276+  15F9             ;-----------------------------------------------------------------------------
0277+  15F9             ; _strtoint
0278+  15F9             ; 4 digit hex string number in d
0279+  15F9             ; integer returned in A
0280+  15F9             ;-----------------------------------------------------------------------------
0281+  15F9             _strtointx:
0282+  15F9 D8            push b
0283+  15FA 32            mov bl, [d]
0284+  15FB 37            mov bh, bl
0285+  15FC 33 01 00      mov bl, [d + 1]
0286+  15FF 07 B3 14      call _atoi        ; convert to int in AL
0287+  1602 23            mov ah, al        ; move to AH
0288+  1603 33 02 00      mov bl, [d + 2]
0289+  1606 37            mov bh, bl
0290+  1607 33 03 00      mov bl, [d + 3]
0291+  160A 07 B3 14      call _atoi        ; convert to int in AL
0292+  160D E5            pop b
0293+  160E 09            ret
0294+  160F             
0295+  160F             ;-----------------------------------------------------------------------------
0296+  160F             ; _strtoint
0297+  160F             ; 5 digit base10 string number in d
0298+  160F             ; integer returned in A
0299+  160F             ;-----------------------------------------------------------------------------
0300+  160F             _strtoint:
0301+  160F E2            push si
0302+  1610 D8            push b
0303+  1611 D9            push c
0304+  1612 DA            push d
0305+  1613 07 55 14      call _strlen      ; get string length in C
0306+  1616 7E            dec c
0307+  1617 FD 4E         mov si, d
0308+  1619 12            mov a, c
0309+  161A FD 99         shl a
0310+  161C 3B 8B 17      mov d, table_power
0311+  161F 59            add d, a
0312+  1620 38 00 00      mov c, 0
0313+  1623             _strtoint_L0:
0314+  1623 F6            lodsb      ; load ASCII to al
0315+  1624 B9 00         cmp al, 0
0316+  1626 C6 39 16      je _strtoint_end
0317+  1629 6F 30         sub al, $30    ; make into integer
0318+  162B 22 00         mov ah, 0
0319+  162D 2A            mov b, [d]
0320+  162E AC            mul a, b      ; result in B since it fits in 16bits
0321+  162F 11            mov a, b
0322+  1630 28            mov b, c
0323+  1631 54            add a, b
0324+  1632 39            mov c, a
0325+  1633 63 02 00      sub d, 2
0326+  1636 0A 23 16      jmp _strtoint_L0
0327+  1639             _strtoint_end:
0328+  1639 12            mov a, c
0329+  163A E7            pop d
0330+  163B E6            pop c
0331+  163C E5            pop b
0332+  163D EF            pop si
0333+  163E 09            ret
0334+  163F             
0335+  163F             ;-----------------------------------------------------------------------------
0336+  163F             ; PRINT NULL TERMINATED STRING
0337+  163F             ; pointer in D
0338+  163F             ;-----------------------------------------------------------------------------
0339+  163F             _puts:
0340+  163F D7            push a
0341+  1640 DA            push d
0342+  1641             _puts_L1:
0343+  1641 1E            mov al, [d]
0344+  1642 B9 00         cmp al, 0
0345+  1644 C6 50 16      jz _puts_END
0346+  1647 23            mov ah, al
0347+  1648 19 00         mov al, 0
0348+  164A 05 03         syscall sys_io
0349+  164C 79            inc d
0350+  164D 0A 41 16      jmp _puts_L1
0351+  1650             _puts_END:
0352+  1650 E7            pop d
0353+  1651 E4            pop a
0354+  1652 09            ret
0355+  1653             
0356+  1653             ;-----------------------------------------------------------------------------
0357+  1653             ; PRINT N SIZE STRING
0358+  1653             ; pointer in D
0359+  1653             ; size in C
0360+  1653             ;-----------------------------------------------------------------------------
0361+  1653             _putsn:
0362+  1653 DB            push al
0363+  1654 DA            push d
0364+  1655 D9            push c
0365+  1656             _putsn_L0:
0366+  1656 1E            mov al, [d]
0367+  1657 23            mov ah, al
0368+  1658 19 00         mov al, 0
0369+  165A 05 03         syscall sys_io
0370+  165C 79            inc d
0371+  165D 7E            dec c  
0372+  165E C2 00 00      cmp c, 0
0373+  1661 C7 56 16      jne _putsn_L0
0374+  1664             _putsn_end:
0375+  1664 E6            pop c
0376+  1665 E7            pop d
0377+  1666 E8            pop al
0378+  1667 09            ret
0379+  1668             
0380+  1668             ;-----------------------------------------------------------------------------
0381+  1668             ; print 16bit decimal number
0382+  1668             ; input number in A
0383+  1668             ;-----------------------------------------------------------------------------
0384+  1668             print_u16d:
0385+  1668 D7            push a
0386+  1669 D8            push b
0387+  166A 26 10 27      mov b, 10000
0388+  166D AE            div a, b      ; get 10000's coeff.
0389+  166E 07 90 16      call print_number
0390+  1671 11            mov a, b
0391+  1672 26 E8 03      mov b, 1000
0392+  1675 AE            div a, b      ; get 1000's coeff.
0393+  1676 07 90 16      call print_number
0394+  1679 11            mov a, b
0395+  167A 26 64 00      mov b, 100
0396+  167D AE            div a, b
0397+  167E 07 90 16      call print_number
0398+  1681 11            mov a, b
0399+  1682 26 0A 00      mov b, 10
0400+  1685 AE            div a, b
0401+  1686 07 90 16      call print_number
0402+  1689 1B            mov al, bl      ; 1's coeff in bl
0403+  168A 07 90 16      call print_number
0404+  168D E5            pop b
0405+  168E E4            pop a
0406+  168F 09            ret
0407+  1690             
0408+  1690             ;-----------------------------------------------------------------------------
0409+  1690             ; print AL
0410+  1690             ;-----------------------------------------------------------------------------
0411+  1690             print_number:
0412+  1690 6A 30         add al, $30
0413+  1692 23            mov ah, al
0414+  1693 07 F5 14      call _putchar
0415+  1696 09            ret
0416+  1697             
0417+  1697             ;-----------------------------------------------------------------------------
0418+  1697             ; PRINT 16BIT HEX INTEGER
0419+  1697             ; integer value in reg B
0420+  1697             ;-----------------------------------------------------------------------------
0421+  1697             print_u16x:
0422+  1697 D7            push a
0423+  1698 D8            push b
0424+  1699 DD            push bl
0425+  169A 30            mov bl, bh
0426+  169B 07 C3 14      call _itoa        ; convert bh to char in A
0427+  169E 2F            mov bl, al        ; save al
0428+  169F 19 00         mov al, 0
0429+  16A1 05 03         syscall sys_io        ; display AH
0430+  16A3 24            mov ah, bl        ; retrieve al
0431+  16A4 19 00         mov al, 0
0432+  16A6 05 03         syscall sys_io        ; display AL
0433+  16A8             
0434+  16A8 EA            pop bl
0435+  16A9 07 C3 14      call _itoa        ; convert bh to char in A
0436+  16AC 2F            mov bl, al        ; save al
0437+  16AD 19 00         mov al, 0
0438+  16AF 05 03         syscall sys_io        ; display AH
0439+  16B1 24            mov ah, bl        ; retrieve al
0440+  16B2 19 00         mov al, 0
0441+  16B4 05 03         syscall sys_io        ; display AL
0442+  16B6             
0443+  16B6 E5            pop b
0444+  16B7 E4            pop a
0445+  16B8 09            ret
0446+  16B9             
0447+  16B9             ;-----------------------------------------------------------------------------
0448+  16B9             ; INPUT 16BIT HEX INTEGER
0449+  16B9             ; read 16bit integer into A
0450+  16B9             ;-----------------------------------------------------------------------------
0451+  16B9             scan_u16x:
0452+  16B9 F8 10 00      enter 16
0453+  16BC D8            push b
0454+  16BD DA            push d
0455+  16BE             
0456+  16BE FA F1 FF      lea d, [bp + -15]
0457+  16C1 07 FC 14      call _gets        ; get number
0458+  16C4             
0459+  16C4 32            mov bl, [d]
0460+  16C5 37            mov bh, bl
0461+  16C6 33 01 00      mov bl, [d + 1]
0462+  16C9 07 B3 14      call _atoi        ; convert to int in AL
0463+  16CC 23            mov ah, al        ; move to AH
0464+  16CD             
0465+  16CD 33 02 00      mov bl, [d + 2]
0466+  16D0 37            mov bh, bl
0467+  16D1 33 03 00      mov bl, [d + 3]
0468+  16D4 07 B3 14      call _atoi        ; convert to int in AL
0469+  16D7             
0470+  16D7 E7            pop d
0471+  16D8 E5            pop b
0472+  16D9 F9            leave
0473+  16DA 09            ret
0474+  16DB             
0475+  16DB             ;-----------------------------------------------------------------------------
0476+  16DB             ; PRINT 8bit HEX INTEGER
0477+  16DB             ; integer value in reg bl
0478+  16DB             ;-----------------------------------------------------------------------------
0479+  16DB             print_u8x:
0480+  16DB D7            push a
0481+  16DC DD            push bl
0482+  16DD             
0483+  16DD 07 C3 14      call _itoa        ; convert bl to char in A
0484+  16E0 2F            mov bl, al        ; save al
0485+  16E1 19 00         mov al, 0
0486+  16E3 05 03         syscall sys_io        ; display AH
0487+  16E5 24            mov ah, bl        ; retrieve al
0488+  16E6 19 00         mov al, 0
0489+  16E8 05 03         syscall sys_io        ; display AL
0490+  16EA             
0491+  16EA EA            pop bl
0492+  16EB E4            pop a
0493+  16EC 09            ret
0494+  16ED             
0495+  16ED             ;-----------------------------------------------------------------------------
0496+  16ED             ; print 8bit decimal unsigned number
0497+  16ED             ; input number in AL
0498+  16ED             ;-----------------------------------------------------------------------------
0499+  16ED             print_u8d:
0500+  16ED D7            push a
0501+  16EE D8            push b
0502+  16EF             
0503+  16EF 22 00         mov ah, 0
0504+  16F1 26 64 00      mov b, 100
0505+  16F4 AE            div a, b
0506+  16F5 D8            push b      ; save remainder
0507+  16F6 B9 00         cmp al, 0
0508+  16F8 C6 02 17      je skip100
0509+  16FB 6A 30         add al, $30
0510+  16FD 23            mov ah, al
0511+  16FE 19 00         mov al, 0
0512+  1700 05 03         syscall sys_io  ; print coeff
0513+  1702             skip100:
0514+  1702 E4            pop a
0515+  1703 22 00         mov ah, 0
0516+  1705 26 0A 00      mov b, 10
0517+  1708 AE            div a, b
0518+  1709 D8            push b      ; save remainder
0519+  170A B9 00         cmp al, 0
0520+  170C C6 16 17      je skip10
0521+  170F 6A 30         add al, $30
0522+  1711 23            mov ah, al
0523+  1712 19 00         mov al, 0
0524+  1714 05 03         syscall sys_io  ; print coeff
0525+  1716             skip10:
0526+  1716 E4            pop a
0527+  1717 1B            mov al, bl
0528+  1718 6A 30         add al, $30
0529+  171A 23            mov ah, al
0530+  171B 19 00         mov al, 0
0531+  171D 05 03         syscall sys_io  ; print coeff
0532+  171F E5            pop b
0533+  1720 E4            pop a
0534+  1721 09            ret
0535+  1722             
0536+  1722             ;-----------------------------------------------------------------------------
0537+  1722             ; INPUT 8BIT HEX INTEGER
0538+  1722             ; read 8bit integer into AL
0539+  1722             ;-----------------------------------------------------------------------------
0540+  1722             scan_u8x:
0541+  1722 F8 04 00      enter 4
0542+  1725 D8            push b
0543+  1726 DA            push d
0544+  1727             
0545+  1727 FA FD FF      lea d, [bp + -3]
0546+  172A 07 FC 14      call _gets        ; get number
0547+  172D             
0548+  172D 32            mov bl, [d]
0549+  172E 37            mov bh, bl
0550+  172F 33 01 00      mov bl, [d + 1]
0551+  1732 07 B3 14      call _atoi        ; convert to int in AL
0552+  1735             
0553+  1735 E7            pop d
0554+  1736 E5            pop b
0555+  1737 F9            leave
0556+  1738 09            ret
0557+  1739             
0558+  1739             ;-----------------------------------------------------------------------------
0559+  1739             ; input decimal number
0560+  1739             ; result in A
0561+  1739             ; 655'\0'
0562+  1739             ; low--------high
0563+  1739             ;-----------------------------------------------------------------------------
0564+  1739             scan_u16d:
0565+  1739 F8 08 00      enter 8
0566+  173C E2            push si
0567+  173D D8            push b
0568+  173E D9            push c
0569+  173F DA            push d
0570+  1740 FA F9 FF      lea d, [bp +- 7]
0571+  1743 07 FC 14      call _gets
0572+  1746 07 55 14      call _strlen      ; get string length in C
0573+  1749 7E            dec c
0574+  174A FD 4E         mov si, d
0575+  174C 12            mov a, c
0576+  174D FD 99         shl a
0577+  174F 3B 8B 17      mov d, table_power
0578+  1752 59            add d, a
0579+  1753 38 00 00      mov c, 0
0580+  1756             mul_loop:
0581+  1756 F6            lodsb      ; load ASCII to al
0582+  1757 B9 00         cmp al, 0
0583+  1759 C6 6C 17      je mul_exit
0584+  175C 6F 30         sub al, $30    ; make into integer
0585+  175E 22 00         mov ah, 0
0586+  1760 2A            mov b, [d]
0587+  1761 AC            mul a, b      ; result in B since it fits in 16bits
0588+  1762 11            mov a, b
0589+  1763 28            mov b, c
0590+  1764 54            add a, b
0591+  1765 39            mov c, a
0592+  1766 63 02 00      sub d, 2
0593+  1769 0A 56 17      jmp mul_loop
0594+  176C             mul_exit:
0595+  176C 12            mov a, c
0596+  176D E7            pop d
0597+  176E E6            pop c
0598+  176F E5            pop b
0599+  1770 EF            pop si
0600+  1771 F9            leave
0601+  1772 09            ret
0602+  1773             
0603+  1773 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1777 34 35 36 37 
0603+  177B 38 39 41 42 
0603+  177F 43 44 45 46 
0604+  1783 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1787 1B 5B 48 00 
0605+  178B             
0606+  178B             table_power:
0607+  178B 01 00         .dw 1
0608+  178D 0A 00         .dw 10
0609+  178F 64 00         .dw 100
0610+  1791 E8 03         .dw 1000
0611+  1793 10 27         .dw 100002408   1795             ; --- END INLINE ASM BLOCK
2409   1795             
2410   1795 F9            leave
2411   1796 09            ret
2412   1797             
2413   1797             base64_encode:
2414   1797 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2415   179A             ; $i 
2416   179A 10 00 00      mov a, $0
2417   179D 45 FF FF      mov [bp + -1], a
2418   17A0             ; $j 
2419   17A0 10 00 00      mov a, $0
2420   17A3 45 FD FF      mov [bp + -3], a
2421   17A6             ; $k 
2422   17A6             ; $input_len 
2423   17A6             ; $input_buffer 
2424   17A6             ; $output_buffer 
2425   17A6 52 0F 00      sub sp, 15
2426   17A9             ;; input_len = strlen(input); 
2427   17A9 FA F9 FF      lea d, [bp + -7] ; $input_len
2428   17AC DA            push d
2429   17AD FA 05 00      lea d, [bp + 5] ; $input
2430   17B0 2A            mov b, [d]
2431   17B1 FD AB         swp b
2432   17B3 D8            push b
2433   17B4 07 EC 05      call strlen
2434   17B7 51 02 00      add sp, 2
2435   17BA E7            pop d
2436   17BB FD 43         mov [d], b
2437   17BD             ;; while (input_len--) { 
2438   17BD             _while37_cond:
2439   17BD FA F9 FF      lea d, [bp + -7] ; $input_len
2440   17C0 2A            mov b, [d]
2441   17C1 D8            push b
2442   17C2 FD 7D         dec b
2443   17C4 FA F9 FF      lea d, [bp + -7] ; $input_len
2444   17C7 FD 43         mov [d], b
2445   17C9 E5            pop b
2446   17CA C0 00 00      cmp b, 0
2447   17CD C6 81 19      je _while37_exit
2448   17D0             _while37_block:
2449   17D0             ;; input_buffer[i++] = *(input++); 
2450   17D0 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2451   17D3 D7            push a
2452   17D4 DA            push d
2453   17D5 FA FF FF      lea d, [bp + -1] ; $i
2454   17D8 2A            mov b, [d]
2455   17D9 D8            push b
2456   17DA FD 77         inc b
2457   17DC FA FF FF      lea d, [bp + -1] ; $i
2458   17DF FD 43         mov [d], b
2459   17E1 E5            pop b
2460   17E2 E7            pop d
2461   17E3 5A            add d, b
2462   17E4 E4            pop a
2463   17E5 DA            push d
2464   17E6 FA 05 00      lea d, [bp + 5] ; $input
2465   17E9 2A            mov b, [d]
2466   17EA D8            push b
2467   17EB FD 77         inc b
2468   17ED FA 05 00      lea d, [bp + 5] ; $input
2469   17F0 FD 43         mov [d], b
2470   17F2 E5            pop b
2471   17F3 74            mov d, b
2472   17F4 32            mov bl, [d]
2473   17F5 A7 00         mov bh, 0
2474   17F7 E7            pop d
2475   17F8 FD 3E         mov [d], bl
2476   17FA             ;; if (i == 3) { 
2477   17FA             _if38_cond:
2478   17FA FA FF FF      lea d, [bp + -1] ; $i
2479   17FD 2A            mov b, [d]
2480   17FE             ; START RELATIONAL
2481   17FE D7            push a
2482   17FF 11            mov a, b
2483   1800 26 03 00      mov b, $3
2484   1803 B0            cmp a, b
2485   1804 FD 71         seq ; ==
2486   1806 E4            pop a
2487   1807             ; END RELATIONAL
2488   1807 C0 00 00      cmp b, 0
2489   180A C6 7E 19      je _if38_exit
2490   180D             _if38_true:
2491   180D             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
2492   180D FA F2 FF      lea d, [bp + -14] ; $output_buffer
2493   1810 D7            push a
2494   1811 DA            push d
2495   1812 26 00 00      mov b, $0
2496   1815 E7            pop d
2497   1816 5A            add d, b
2498   1817 E4            pop a
2499   1818 DA            push d
2500   1819 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2501   181C D7            push a
2502   181D DA            push d
2503   181E 26 00 00      mov b, $0
2504   1821 E7            pop d
2505   1822 5A            add d, b
2506   1823 E4            pop a
2507   1824 32            mov bl, [d]
2508   1825 A7 00         mov bh, 0
2509   1827 D7            push a
2510   1828 11            mov a, b
2511   1829 26 FC 00      mov b, $fc
2512   182C FD 92         and b, a ; &
2513   182E E4            pop a
2514   182F             ; START SHIFT
2515   182F D7            push a
2516   1830 11            mov a, b
2517   1831 26 02 00      mov b, $2
2518   1834 FD 39         mov c, b
2519   1836 A5            ashr a, cl
2520   1837 27            mov b, a
2521   1838 E4            pop a
2522   1839             ; END SHIFT
2523   1839 E7            pop d
2524   183A FD 3E         mov [d], bl
2525   183C             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
2526   183C FA F2 FF      lea d, [bp + -14] ; $output_buffer
2527   183F D7            push a
2528   1840 DA            push d
2529   1841 26 01 00      mov b, $1
2530   1844 E7            pop d
2531   1845 5A            add d, b
2532   1846 E4            pop a
2533   1847 DA            push d
2534   1848 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2535   184B D7            push a
2536   184C DA            push d
2537   184D 26 00 00      mov b, $0
2538   1850 E7            pop d
2539   1851 5A            add d, b
2540   1852 E4            pop a
2541   1853 32            mov bl, [d]
2542   1854 A7 00         mov bh, 0
2543   1856 D7            push a
2544   1857 11            mov a, b
2545   1858 26 03 00      mov b, $3
2546   185B FD 92         and b, a ; &
2547   185D E4            pop a
2548   185E             ; START SHIFT
2549   185E D7            push a
2550   185F 11            mov a, b
2551   1860 26 04 00      mov b, $4
2552   1863 FD 39         mov c, b
2553   1865 9D            shl a, cl
2554   1866 27            mov b, a
2555   1867 E4            pop a
2556   1868             ; END SHIFT
2557   1868             ; START TERMS
2558   1868 D7            push a
2559   1869 11            mov a, b
2560   186A FA F6 FF      lea d, [bp + -10] ; $input_buffer
2561   186D D7            push a
2562   186E DA            push d
2563   186F 26 01 00      mov b, $1
2564   1872 E7            pop d
2565   1873 5A            add d, b
2566   1874 E4            pop a
2567   1875 32            mov bl, [d]
2568   1876 A7 00         mov bh, 0
2569   1878 D7            push a
2570   1879 11            mov a, b
2571   187A 26 F0 00      mov b, $f0
2572   187D FD 92         and b, a ; &
2573   187F E4            pop a
2574   1880             ; START SHIFT
2575   1880 D7            push a
2576   1881 11            mov a, b
2577   1882 26 04 00      mov b, $4
2578   1885 FD 39         mov c, b
2579   1887 A5            ashr a, cl
2580   1888 27            mov b, a
2581   1889 E4            pop a
2582   188A             ; END SHIFT
2583   188A 56            add b, a
2584   188B E4            pop a
2585   188C             ; END TERMS
2586   188C E7            pop d
2587   188D FD 3E         mov [d], bl
2588   188F             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
2589   188F FA F2 FF      lea d, [bp + -14] ; $output_buffer
2590   1892 D7            push a
2591   1893 DA            push d
2592   1894 26 02 00      mov b, $2
2593   1897 E7            pop d
2594   1898 5A            add d, b
2595   1899 E4            pop a
2596   189A DA            push d
2597   189B FA F6 FF      lea d, [bp + -10] ; $input_buffer
2598   189E D7            push a
2599   189F DA            push d
2600   18A0 26 01 00      mov b, $1
2601   18A3 E7            pop d
2602   18A4 5A            add d, b
2603   18A5 E4            pop a
2604   18A6 32            mov bl, [d]
2605   18A7 A7 00         mov bh, 0
2606   18A9 D7            push a
2607   18AA 11            mov a, b
2608   18AB 26 0F 00      mov b, $f
2609   18AE FD 92         and b, a ; &
2610   18B0 E4            pop a
2611   18B1             ; START SHIFT
2612   18B1 D7            push a
2613   18B2 11            mov a, b
2614   18B3 26 02 00      mov b, $2
2615   18B6 FD 39         mov c, b
2616   18B8 9D            shl a, cl
2617   18B9 27            mov b, a
2618   18BA E4            pop a
2619   18BB             ; END SHIFT
2620   18BB             ; START TERMS
2621   18BB D7            push a
2622   18BC 11            mov a, b
2623   18BD FA F6 FF      lea d, [bp + -10] ; $input_buffer
2624   18C0 D7            push a
2625   18C1 DA            push d
2626   18C2 26 02 00      mov b, $2
2627   18C5 E7            pop d
2628   18C6 5A            add d, b
2629   18C7 E4            pop a
2630   18C8 32            mov bl, [d]
2631   18C9 A7 00         mov bh, 0
2632   18CB D7            push a
2633   18CC 11            mov a, b
2634   18CD 26 C0 00      mov b, $c0
2635   18D0 FD 92         and b, a ; &
2636   18D2 E4            pop a
2637   18D3             ; START SHIFT
2638   18D3 D7            push a
2639   18D4 11            mov a, b
2640   18D5 26 06 00      mov b, $6
2641   18D8 FD 39         mov c, b
2642   18DA A5            ashr a, cl
2643   18DB 27            mov b, a
2644   18DC E4            pop a
2645   18DD             ; END SHIFT
2646   18DD 56            add b, a
2647   18DE E4            pop a
2648   18DF             ; END TERMS
2649   18DF E7            pop d
2650   18E0 FD 3E         mov [d], bl
2651   18E2             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
2652   18E2 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2653   18E5 D7            push a
2654   18E6 DA            push d
2655   18E7 26 03 00      mov b, $3
2656   18EA E7            pop d
2657   18EB 5A            add d, b
2658   18EC E4            pop a
2659   18ED DA            push d
2660   18EE FA F6 FF      lea d, [bp + -10] ; $input_buffer
2661   18F1 D7            push a
2662   18F2 DA            push d
2663   18F3 26 02 00      mov b, $2
2664   18F6 E7            pop d
2665   18F7 5A            add d, b
2666   18F8 E4            pop a
2667   18F9 32            mov bl, [d]
2668   18FA A7 00         mov bh, 0
2669   18FC D7            push a
2670   18FD 11            mov a, b
2671   18FE 26 3F 00      mov b, $3f
2672   1901 FD 92         and b, a ; &
2673   1903 E4            pop a
2674   1904 E7            pop d
2675   1905 FD 3E         mov [d], bl
2676   1907             ;; for (i = 0; i < 4; i++) { 
2677   1907             _for39_init:
2678   1907 FA FF FF      lea d, [bp + -1] ; $i
2679   190A DA            push d
2680   190B 26 00 00      mov b, $0
2681   190E E7            pop d
2682   190F FD 43         mov [d], b
2683   1911             _for39_cond:
2684   1911 FA FF FF      lea d, [bp + -1] ; $i
2685   1914 2A            mov b, [d]
2686   1915             ; START RELATIONAL
2687   1915 D7            push a
2688   1916 11            mov a, b
2689   1917 26 04 00      mov b, $4
2690   191A B0            cmp a, b
2691   191B FD 73         slt ; < (signed)
2692   191D E4            pop a
2693   191E             ; END RELATIONAL
2694   191E C0 00 00      cmp b, 0
2695   1921 C6 71 19      je _for39_exit
2696   1924             _for39_block:
2697   1924             ;; output[j++] = base64_table[output_buffer[i]]; 
2698   1924 FA 07 00      lea d, [bp + 7] ; $output
2699   1927 FD 2A         mov d, [d]
2700   1929 D7            push a
2701   192A DA            push d
2702   192B FA FD FF      lea d, [bp + -3] ; $j
2703   192E 2A            mov b, [d]
2704   192F D8            push b
2705   1930 FD 77         inc b
2706   1932 FA FD FF      lea d, [bp + -3] ; $j
2707   1935 FD 43         mov [d], b
2708   1937 E5            pop b
2709   1938 E7            pop d
2710   1939 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2711   193D E4            pop a
2712   193E DA            push d
2713   193F 3B DA 20      mov d, _base64_table ; $base64_table
2714   1942 FD 2A         mov d, [d]
2715   1944 D7            push a
2716   1945 DA            push d
2717   1946 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2718   1949 D7            push a
2719   194A DA            push d
2720   194B FA FF FF      lea d, [bp + -1] ; $i
2721   194E 2A            mov b, [d]
2722   194F E7            pop d
2723   1950 5A            add d, b
2724   1951 E4            pop a
2725   1952 32            mov bl, [d]
2726   1953 A7 00         mov bh, 0
2727   1955 E7            pop d
2728   1956 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2729   195A E4            pop a
2730   195B 32            mov bl, [d]
2731   195C A7 00         mov bh, 0
2732   195E E7            pop d
2733   195F FD 3E         mov [d], bl
2734   1961             _for39_update:
2735   1961 FA FF FF      lea d, [bp + -1] ; $i
2736   1964 2A            mov b, [d]
2737   1965 D8            push b
2738   1966 FD 77         inc b
2739   1968 FA FF FF      lea d, [bp + -1] ; $i
2740   196B FD 43         mov [d], b
2741   196D E5            pop b
2742   196E 0A 11 19      jmp _for39_cond
2743   1971             _for39_exit:
2744   1971             ;; i = 0; 
2745   1971 FA FF FF      lea d, [bp + -1] ; $i
2746   1974 DA            push d
2747   1975 26 00 00      mov b, $0
2748   1978 E7            pop d
2749   1979 FD 43         mov [d], b
2750   197B 0A 7E 19      jmp _if38_exit
2751   197E             _if38_exit:
2752   197E 0A BD 17      jmp _while37_cond
2753   1981             _while37_exit:
2754   1981             ;; if (i) { 
2755   1981             _if40_cond:
2756   1981 FA FF FF      lea d, [bp + -1] ; $i
2757   1984 2A            mov b, [d]
2758   1985 C0 00 00      cmp b, 0
2759   1988 C6 56 1B      je _if40_exit
2760   198B             _if40_true:
2761   198B             ;; for (k = i; k < 3; k++) { 
2762   198B             _for41_init:
2763   198B FA FB FF      lea d, [bp + -5] ; $k
2764   198E DA            push d
2765   198F FA FF FF      lea d, [bp + -1] ; $i
2766   1992 2A            mov b, [d]
2767   1993 E7            pop d
2768   1994 FD 43         mov [d], b
2769   1996             _for41_cond:
2770   1996 FA FB FF      lea d, [bp + -5] ; $k
2771   1999 2A            mov b, [d]
2772   199A             ; START RELATIONAL
2773   199A D7            push a
2774   199B 11            mov a, b
2775   199C 26 03 00      mov b, $3
2776   199F B0            cmp a, b
2777   19A0 FD 73         slt ; < (signed)
2778   19A2 E4            pop a
2779   19A3             ; END RELATIONAL
2780   19A3 C0 00 00      cmp b, 0
2781   19A6 C6 CC 19      je _for41_exit
2782   19A9             _for41_block:
2783   19A9             ;; input_buffer[k] = '\0'; 
2784   19A9 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2785   19AC D7            push a
2786   19AD DA            push d
2787   19AE FA FB FF      lea d, [bp + -5] ; $k
2788   19B1 2A            mov b, [d]
2789   19B2 E7            pop d
2790   19B3 5A            add d, b
2791   19B4 E4            pop a
2792   19B5 DA            push d
2793   19B6 26 00 00      mov b, $0
2794   19B9 E7            pop d
2795   19BA FD 3E         mov [d], bl
2796   19BC             _for41_update:
2797   19BC FA FB FF      lea d, [bp + -5] ; $k
2798   19BF 2A            mov b, [d]
2799   19C0 D8            push b
2800   19C1 FD 77         inc b
2801   19C3 FA FB FF      lea d, [bp + -5] ; $k
2802   19C6 FD 43         mov [d], b
2803   19C8 E5            pop b
2804   19C9 0A 96 19      jmp _for41_cond
2805   19CC             _for41_exit:
2806   19CC             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
2807   19CC FA F2 FF      lea d, [bp + -14] ; $output_buffer
2808   19CF D7            push a
2809   19D0 DA            push d
2810   19D1 26 00 00      mov b, $0
2811   19D4 E7            pop d
2812   19D5 5A            add d, b
2813   19D6 E4            pop a
2814   19D7 DA            push d
2815   19D8 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2816   19DB D7            push a
2817   19DC DA            push d
2818   19DD 26 00 00      mov b, $0
2819   19E0 E7            pop d
2820   19E1 5A            add d, b
2821   19E2 E4            pop a
2822   19E3 32            mov bl, [d]
2823   19E4 A7 00         mov bh, 0
2824   19E6 D7            push a
2825   19E7 11            mov a, b
2826   19E8 26 FC 00      mov b, $fc
2827   19EB FD 92         and b, a ; &
2828   19ED E4            pop a
2829   19EE             ; START SHIFT
2830   19EE D7            push a
2831   19EF 11            mov a, b
2832   19F0 26 02 00      mov b, $2
2833   19F3 FD 39         mov c, b
2834   19F5 A5            ashr a, cl
2835   19F6 27            mov b, a
2836   19F7 E4            pop a
2837   19F8             ; END SHIFT
2838   19F8 E7            pop d
2839   19F9 FD 3E         mov [d], bl
2840   19FB             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
2841   19FB FA F2 FF      lea d, [bp + -14] ; $output_buffer
2842   19FE D7            push a
2843   19FF DA            push d
2844   1A00 26 01 00      mov b, $1
2845   1A03 E7            pop d
2846   1A04 5A            add d, b
2847   1A05 E4            pop a
2848   1A06 DA            push d
2849   1A07 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2850   1A0A D7            push a
2851   1A0B DA            push d
2852   1A0C 26 00 00      mov b, $0
2853   1A0F E7            pop d
2854   1A10 5A            add d, b
2855   1A11 E4            pop a
2856   1A12 32            mov bl, [d]
2857   1A13 A7 00         mov bh, 0
2858   1A15 D7            push a
2859   1A16 11            mov a, b
2860   1A17 26 03 00      mov b, $3
2861   1A1A FD 92         and b, a ; &
2862   1A1C E4            pop a
2863   1A1D             ; START SHIFT
2864   1A1D D7            push a
2865   1A1E 11            mov a, b
2866   1A1F 26 04 00      mov b, $4
2867   1A22 FD 39         mov c, b
2868   1A24 9D            shl a, cl
2869   1A25 27            mov b, a
2870   1A26 E4            pop a
2871   1A27             ; END SHIFT
2872   1A27             ; START TERMS
2873   1A27 D7            push a
2874   1A28 11            mov a, b
2875   1A29 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2876   1A2C D7            push a
2877   1A2D DA            push d
2878   1A2E 26 01 00      mov b, $1
2879   1A31 E7            pop d
2880   1A32 5A            add d, b
2881   1A33 E4            pop a
2882   1A34 32            mov bl, [d]
2883   1A35 A7 00         mov bh, 0
2884   1A37 D7            push a
2885   1A38 11            mov a, b
2886   1A39 26 F0 00      mov b, $f0
2887   1A3C FD 92         and b, a ; &
2888   1A3E E4            pop a
2889   1A3F             ; START SHIFT
2890   1A3F D7            push a
2891   1A40 11            mov a, b
2892   1A41 26 04 00      mov b, $4
2893   1A44 FD 39         mov c, b
2894   1A46 A5            ashr a, cl
2895   1A47 27            mov b, a
2896   1A48 E4            pop a
2897   1A49             ; END SHIFT
2898   1A49 56            add b, a
2899   1A4A E4            pop a
2900   1A4B             ; END TERMS
2901   1A4B E7            pop d
2902   1A4C FD 3E         mov [d], bl
2903   1A4E             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
2904   1A4E FA F2 FF      lea d, [bp + -14] ; $output_buffer
2905   1A51 D7            push a
2906   1A52 DA            push d
2907   1A53 26 02 00      mov b, $2
2908   1A56 E7            pop d
2909   1A57 5A            add d, b
2910   1A58 E4            pop a
2911   1A59 DA            push d
2912   1A5A FA F6 FF      lea d, [bp + -10] ; $input_buffer
2913   1A5D D7            push a
2914   1A5E DA            push d
2915   1A5F 26 01 00      mov b, $1
2916   1A62 E7            pop d
2917   1A63 5A            add d, b
2918   1A64 E4            pop a
2919   1A65 32            mov bl, [d]
2920   1A66 A7 00         mov bh, 0
2921   1A68 D7            push a
2922   1A69 11            mov a, b
2923   1A6A 26 0F 00      mov b, $f
2924   1A6D FD 92         and b, a ; &
2925   1A6F E4            pop a
2926   1A70             ; START SHIFT
2927   1A70 D7            push a
2928   1A71 11            mov a, b
2929   1A72 26 02 00      mov b, $2
2930   1A75 FD 39         mov c, b
2931   1A77 9D            shl a, cl
2932   1A78 27            mov b, a
2933   1A79 E4            pop a
2934   1A7A             ; END SHIFT
2935   1A7A             ; START TERMS
2936   1A7A D7            push a
2937   1A7B 11            mov a, b
2938   1A7C FA F6 FF      lea d, [bp + -10] ; $input_buffer
2939   1A7F D7            push a
2940   1A80 DA            push d
2941   1A81 26 02 00      mov b, $2
2942   1A84 E7            pop d
2943   1A85 5A            add d, b
2944   1A86 E4            pop a
2945   1A87 32            mov bl, [d]
2946   1A88 A7 00         mov bh, 0
2947   1A8A D7            push a
2948   1A8B 11            mov a, b
2949   1A8C 26 C0 00      mov b, $c0
2950   1A8F FD 92         and b, a ; &
2951   1A91 E4            pop a
2952   1A92             ; START SHIFT
2953   1A92 D7            push a
2954   1A93 11            mov a, b
2955   1A94 26 06 00      mov b, $6
2956   1A97 FD 39         mov c, b
2957   1A99 A5            ashr a, cl
2958   1A9A 27            mov b, a
2959   1A9B E4            pop a
2960   1A9C             ; END SHIFT
2961   1A9C 56            add b, a
2962   1A9D E4            pop a
2963   1A9E             ; END TERMS
2964   1A9E E7            pop d
2965   1A9F FD 3E         mov [d], bl
2966   1AA1             ;; for (k = 0; k < i + 1; k++) { 
2967   1AA1             _for42_init:
2968   1AA1 FA FB FF      lea d, [bp + -5] ; $k
2969   1AA4 DA            push d
2970   1AA5 26 00 00      mov b, $0
2971   1AA8 E7            pop d
2972   1AA9 FD 43         mov [d], b
2973   1AAB             _for42_cond:
2974   1AAB FA FB FF      lea d, [bp + -5] ; $k
2975   1AAE 2A            mov b, [d]
2976   1AAF             ; START RELATIONAL
2977   1AAF D7            push a
2978   1AB0 11            mov a, b
2979   1AB1 FA FF FF      lea d, [bp + -1] ; $i
2980   1AB4 2A            mov b, [d]
2981   1AB5             ; START TERMS
2982   1AB5 D7            push a
2983   1AB6 11            mov a, b
2984   1AB7 26 01 00      mov b, $1
2985   1ABA 56            add b, a
2986   1ABB E4            pop a
2987   1ABC             ; END TERMS
2988   1ABC B0            cmp a, b
2989   1ABD FD 73         slt ; < (signed)
2990   1ABF E4            pop a
2991   1AC0             ; END RELATIONAL
2992   1AC0 C0 00 00      cmp b, 0
2993   1AC3 C6 13 1B      je _for42_exit
2994   1AC6             _for42_block:
2995   1AC6             ;; output[j++] = base64_table[output_buffer[k]]; 
2996   1AC6 FA 07 00      lea d, [bp + 7] ; $output
2997   1AC9 FD 2A         mov d, [d]
2998   1ACB D7            push a
2999   1ACC DA            push d
3000   1ACD FA FD FF      lea d, [bp + -3] ; $j
3001   1AD0 2A            mov b, [d]
3002   1AD1 D8            push b
3003   1AD2 FD 77         inc b
3004   1AD4 FA FD FF      lea d, [bp + -3] ; $j
3005   1AD7 FD 43         mov [d], b
3006   1AD9 E5            pop b
3007   1ADA E7            pop d
3008   1ADB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3009   1ADF E4            pop a
3010   1AE0 DA            push d
3011   1AE1 3B DA 20      mov d, _base64_table ; $base64_table
3012   1AE4 FD 2A         mov d, [d]
3013   1AE6 D7            push a
3014   1AE7 DA            push d
3015   1AE8 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3016   1AEB D7            push a
3017   1AEC DA            push d
3018   1AED FA FB FF      lea d, [bp + -5] ; $k
3019   1AF0 2A            mov b, [d]
3020   1AF1 E7            pop d
3021   1AF2 5A            add d, b
3022   1AF3 E4            pop a
3023   1AF4 32            mov bl, [d]
3024   1AF5 A7 00         mov bh, 0
3025   1AF7 E7            pop d
3026   1AF8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3027   1AFC E4            pop a
3028   1AFD 32            mov bl, [d]
3029   1AFE A7 00         mov bh, 0
3030   1B00 E7            pop d
3031   1B01 FD 3E         mov [d], bl
3032   1B03             _for42_update:
3033   1B03 FA FB FF      lea d, [bp + -5] ; $k
3034   1B06 2A            mov b, [d]
3035   1B07 D8            push b
3036   1B08 FD 77         inc b
3037   1B0A FA FB FF      lea d, [bp + -5] ; $k
3038   1B0D FD 43         mov [d], b
3039   1B0F E5            pop b
3040   1B10 0A AB 1A      jmp _for42_cond
3041   1B13             _for42_exit:
3042   1B13             ;; while (i++ < 3) { 
3043   1B13             _while43_cond:
3044   1B13 FA FF FF      lea d, [bp + -1] ; $i
3045   1B16 2A            mov b, [d]
3046   1B17 D8            push b
3047   1B18 FD 77         inc b
3048   1B1A FA FF FF      lea d, [bp + -1] ; $i
3049   1B1D FD 43         mov [d], b
3050   1B1F E5            pop b
3051   1B20             ; START RELATIONAL
3052   1B20 D7            push a
3053   1B21 11            mov a, b
3054   1B22 26 03 00      mov b, $3
3055   1B25 B0            cmp a, b
3056   1B26 FD 73         slt ; < (signed)
3057   1B28 E4            pop a
3058   1B29             ; END RELATIONAL
3059   1B29 C0 00 00      cmp b, 0
3060   1B2C C6 53 1B      je _while43_exit
3061   1B2F             _while43_block:
3062   1B2F             ;; output[j++] = '='; 
3063   1B2F FA 07 00      lea d, [bp + 7] ; $output
3064   1B32 FD 2A         mov d, [d]
3065   1B34 D7            push a
3066   1B35 DA            push d
3067   1B36 FA FD FF      lea d, [bp + -3] ; $j
3068   1B39 2A            mov b, [d]
3069   1B3A D8            push b
3070   1B3B FD 77         inc b
3071   1B3D FA FD FF      lea d, [bp + -3] ; $j
3072   1B40 FD 43         mov [d], b
3073   1B42 E5            pop b
3074   1B43 E7            pop d
3075   1B44 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3076   1B48 E4            pop a
3077   1B49 DA            push d
3078   1B4A 26 3D 00      mov b, $3d
3079   1B4D E7            pop d
3080   1B4E FD 3E         mov [d], bl
3081   1B50 0A 13 1B      jmp _while43_cond
3082   1B53             _while43_exit:
3083   1B53 0A 56 1B      jmp _if40_exit
3084   1B56             _if40_exit:
3085   1B56             ;; output[j] = '\0'; 
3086   1B56 FA 07 00      lea d, [bp + 7] ; $output
3087   1B59 FD 2A         mov d, [d]
3088   1B5B D7            push a
3089   1B5C DA            push d
3090   1B5D FA FD FF      lea d, [bp + -3] ; $j
3091   1B60 2A            mov b, [d]
3092   1B61 E7            pop d
3093   1B62 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3094   1B66 E4            pop a
3095   1B67 DA            push d
3096   1B68 26 00 00      mov b, $0
3097   1B6B E7            pop d
3098   1B6C FD 3E         mov [d], bl
3099   1B6E F9            leave
3100   1B6F 09            ret
3101   1B70             
3102   1B70             base64_char_value:
3103   1B70 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3104   1B73             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
3105   1B73             _if44_cond:
3106   1B73 FA 05 00      lea d, [bp + 5] ; $c
3107   1B76 32            mov bl, [d]
3108   1B77 A7 00         mov bh, 0
3109   1B79             ; START RELATIONAL
3110   1B79 D7            push a
3111   1B7A 11            mov a, b
3112   1B7B 26 41 00      mov b, $41
3113   1B7E B0            cmp a, b
3114   1B7F FD 80         sge ; >=
3115   1B81 E4            pop a
3116   1B82             ; END RELATIONAL
3117   1B82 D7            push a
3118   1B83 11            mov a, b
3119   1B84 FA 05 00      lea d, [bp + 5] ; $c
3120   1B87 32            mov bl, [d]
3121   1B88 A7 00         mov bh, 0
3122   1B8A             ; START RELATIONAL
3123   1B8A D7            push a
3124   1B8B 11            mov a, b
3125   1B8C 26 5A 00      mov b, $5a
3126   1B8F B0            cmp a, b
3127   1B90 FD 73         slt ; <= (signed)
3128   1B92 E4            pop a
3129   1B93             ; END RELATIONAL
3130   1B93 FD A7         sand a, b
3131   1B95 E4            pop a
3132   1B96 C0 00 00      cmp b, 0
3133   1B99 C6 AF 1B      je _if44_exit
3134   1B9C             _if44_true:
3135   1B9C             ;; return c - 'A'; 
3136   1B9C FA 05 00      lea d, [bp + 5] ; $c
3137   1B9F 32            mov bl, [d]
3138   1BA0 A7 00         mov bh, 0
3139   1BA2             ; START TERMS
3140   1BA2 D7            push a
3141   1BA3 11            mov a, b
3142   1BA4 26 41 00      mov b, $41
3143   1BA7 60            sub a, b
3144   1BA8 27            mov b, a
3145   1BA9 E4            pop a
3146   1BAA             ; END TERMS
3147   1BAA F9            leave
3148   1BAB 09            ret
3149   1BAC 0A AF 1B      jmp _if44_exit
3150   1BAF             _if44_exit:
3151   1BAF             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
3152   1BAF             _if45_cond:
3153   1BAF FA 05 00      lea d, [bp + 5] ; $c
3154   1BB2 32            mov bl, [d]
3155   1BB3 A7 00         mov bh, 0
3156   1BB5             ; START RELATIONAL
3157   1BB5 D7            push a
3158   1BB6 11            mov a, b
3159   1BB7 26 61 00      mov b, $61
3160   1BBA B0            cmp a, b
3161   1BBB FD 80         sge ; >=
3162   1BBD E4            pop a
3163   1BBE             ; END RELATIONAL
3164   1BBE D7            push a
3165   1BBF 11            mov a, b
3166   1BC0 FA 05 00      lea d, [bp + 5] ; $c
3167   1BC3 32            mov bl, [d]
3168   1BC4 A7 00         mov bh, 0
3169   1BC6             ; START RELATIONAL
3170   1BC6 D7            push a
3171   1BC7 11            mov a, b
3172   1BC8 26 7A 00      mov b, $7a
3173   1BCB B0            cmp a, b
3174   1BCC FD 73         slt ; <= (signed)
3175   1BCE E4            pop a
3176   1BCF             ; END RELATIONAL
3177   1BCF FD A7         sand a, b
3178   1BD1 E4            pop a
3179   1BD2 C0 00 00      cmp b, 0
3180   1BD5 C6 F0 1B      je _if45_exit
3181   1BD8             _if45_true:
3182   1BD8             ;; return c - 'a' + 26; 
3183   1BD8 FA 05 00      lea d, [bp + 5] ; $c
3184   1BDB 32            mov bl, [d]
3185   1BDC A7 00         mov bh, 0
3186   1BDE             ; START TERMS
3187   1BDE D7            push a
3188   1BDF 11            mov a, b
3189   1BE0 26 61 00      mov b, $61
3190   1BE3 60            sub a, b
3191   1BE4 27            mov b, a
3192   1BE5 11            mov a, b
3193   1BE6 26 1A 00      mov b, $1a
3194   1BE9 56            add b, a
3195   1BEA E4            pop a
3196   1BEB             ; END TERMS
3197   1BEB F9            leave
3198   1BEC 09            ret
3199   1BED 0A F0 1B      jmp _if45_exit
3200   1BF0             _if45_exit:
3201   1BF0             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
3202   1BF0             _if46_cond:
3203   1BF0 FA 05 00      lea d, [bp + 5] ; $c
3204   1BF3 32            mov bl, [d]
3205   1BF4 A7 00         mov bh, 0
3206   1BF6             ; START RELATIONAL
3207   1BF6 D7            push a
3208   1BF7 11            mov a, b
3209   1BF8 26 30 00      mov b, $30
3210   1BFB B0            cmp a, b
3211   1BFC FD 80         sge ; >=
3212   1BFE E4            pop a
3213   1BFF             ; END RELATIONAL
3214   1BFF D7            push a
3215   1C00 11            mov a, b
3216   1C01 FA 05 00      lea d, [bp + 5] ; $c
3217   1C04 32            mov bl, [d]
3218   1C05 A7 00         mov bh, 0
3219   1C07             ; START RELATIONAL
3220   1C07 D7            push a
3221   1C08 11            mov a, b
3222   1C09 26 39 00      mov b, $39
3223   1C0C B0            cmp a, b
3224   1C0D FD 73         slt ; <= (signed)
3225   1C0F E4            pop a
3226   1C10             ; END RELATIONAL
3227   1C10 FD A7         sand a, b
3228   1C12 E4            pop a
3229   1C13 C0 00 00      cmp b, 0
3230   1C16 C6 31 1C      je _if46_exit
3231   1C19             _if46_true:
3232   1C19             ;; return c - '0' + 52; 
3233   1C19 FA 05 00      lea d, [bp + 5] ; $c
3234   1C1C 32            mov bl, [d]
3235   1C1D A7 00         mov bh, 0
3236   1C1F             ; START TERMS
3237   1C1F D7            push a
3238   1C20 11            mov a, b
3239   1C21 26 30 00      mov b, $30
3240   1C24 60            sub a, b
3241   1C25 27            mov b, a
3242   1C26 11            mov a, b
3243   1C27 26 34 00      mov b, $34
3244   1C2A 56            add b, a
3245   1C2B E4            pop a
3246   1C2C             ; END TERMS
3247   1C2C F9            leave
3248   1C2D 09            ret
3249   1C2E 0A 31 1C      jmp _if46_exit
3250   1C31             _if46_exit:
3251   1C31             ;; if (c == '+') return 62; 
3252   1C31             _if47_cond:
3253   1C31 FA 05 00      lea d, [bp + 5] ; $c
3254   1C34 32            mov bl, [d]
3255   1C35 A7 00         mov bh, 0
3256   1C37             ; START RELATIONAL
3257   1C37 D7            push a
3258   1C38 11            mov a, b
3259   1C39 26 2B 00      mov b, $2b
3260   1C3C B0            cmp a, b
3261   1C3D FD 71         seq ; ==
3262   1C3F E4            pop a
3263   1C40             ; END RELATIONAL
3264   1C40 C0 00 00      cmp b, 0
3265   1C43 C6 4E 1C      je _if47_exit
3266   1C46             _if47_true:
3267   1C46             ;; return 62; 
3268   1C46 26 3E 00      mov b, $3e
3269   1C49 F9            leave
3270   1C4A 09            ret
3271   1C4B 0A 4E 1C      jmp _if47_exit
3272   1C4E             _if47_exit:
3273   1C4E             ;; if (c == '/') return 63; 
3274   1C4E             _if48_cond:
3275   1C4E FA 05 00      lea d, [bp + 5] ; $c
3276   1C51 32            mov bl, [d]
3277   1C52 A7 00         mov bh, 0
3278   1C54             ; START RELATIONAL
3279   1C54 D7            push a
3280   1C55 11            mov a, b
3281   1C56 26 2F 00      mov b, $2f
3282   1C59 B0            cmp a, b
3283   1C5A FD 71         seq ; ==
3284   1C5C E4            pop a
3285   1C5D             ; END RELATIONAL
3286   1C5D C0 00 00      cmp b, 0
3287   1C60 C6 6B 1C      je _if48_exit
3288   1C63             _if48_true:
3289   1C63             ;; return 63; 
3290   1C63 26 3F 00      mov b, $3f
3291   1C66 F9            leave
3292   1C67 09            ret
3293   1C68 0A 6B 1C      jmp _if48_exit
3294   1C6B             _if48_exit:
3295   1C6B             ;; return -1; 
3296   1C6B 26 FF FF      mov b, $ffff
3297   1C6E F9            leave
3298   1C6F 09            ret
3299   1C70             
3300   1C70             base64_decode:
3301   1C70 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3302   1C73             ; $i 
3303   1C73 10 00 00      mov a, $0
3304   1C76 45 FF FF      mov [bp + -1], a
3305   1C79             ; $j 
3306   1C79 10 00 00      mov a, $0
3307   1C7C 45 FD FF      mov [bp + -3], a
3308   1C7F             ; $k 
3309   1C7F 10 00 00      mov a, $0
3310   1C82 45 FB FF      mov [bp + -5], a
3311   1C85             ; $input_len 
3312   1C85             ; $input_buffer 
3313   1C85             ; $output_buffer 
3314   1C85 52 0F 00      sub sp, 15
3315   1C88             ;; input_len = strlen(input); 
3316   1C88 FA F9 FF      lea d, [bp + -7] ; $input_len
3317   1C8B DA            push d
3318   1C8C FA 05 00      lea d, [bp + 5] ; $input
3319   1C8F 2A            mov b, [d]
3320   1C90 FD AB         swp b
3321   1C92 D8            push b
3322   1C93 07 EC 05      call strlen
3323   1C96 51 02 00      add sp, 2
3324   1C99 E7            pop d
3325   1C9A FD 43         mov [d], b
3326   1C9C             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
3327   1C9C             _while49_cond:
3328   1C9C FA F9 FF      lea d, [bp + -7] ; $input_len
3329   1C9F 2A            mov b, [d]
3330   1CA0 D8            push b
3331   1CA1 FD 7D         dec b
3332   1CA3 FA F9 FF      lea d, [bp + -7] ; $input_len
3333   1CA6 FD 43         mov [d], b
3334   1CA8 E5            pop b
3335   1CA9 D7            push a
3336   1CAA 11            mov a, b
3337   1CAB FA 05 00      lea d, [bp + 5] ; $input
3338   1CAE FD 2A         mov d, [d]
3339   1CB0 D7            push a
3340   1CB1 DA            push d
3341   1CB2 FA FB FF      lea d, [bp + -5] ; $k
3342   1CB5 2A            mov b, [d]
3343   1CB6 E7            pop d
3344   1CB7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3345   1CBB E4            pop a
3346   1CBC 32            mov bl, [d]
3347   1CBD A7 00         mov bh, 0
3348   1CBF             ; START RELATIONAL
3349   1CBF D7            push a
3350   1CC0 11            mov a, b
3351   1CC1 26 3D 00      mov b, $3d
3352   1CC4 B0            cmp a, b
3353   1CC5 FD 72         sneq ; !=
3354   1CC7 E4            pop a
3355   1CC8             ; END RELATIONAL
3356   1CC8 FD A7         sand a, b
3357   1CCA 11            mov a, b
3358   1CCB FA 05 00      lea d, [bp + 5] ; $input
3359   1CCE FD 2A         mov d, [d]
3360   1CD0 D7            push a
3361   1CD1 DA            push d
3362   1CD2 FA FB FF      lea d, [bp + -5] ; $k
3363   1CD5 2A            mov b, [d]
3364   1CD6 E7            pop d
3365   1CD7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3366   1CDB E4            pop a
3367   1CDC 32            mov bl, [d]
3368   1CDD A7 00         mov bh, 0
3369   1CDF DD            push bl
3370   1CE0 07 70 1B      call base64_char_value
3371   1CE3 51 01 00      add sp, 1
3372   1CE6             ; START RELATIONAL
3373   1CE6 D7            push a
3374   1CE7 11            mov a, b
3375   1CE8 26 FF FF      mov b, $ffff
3376   1CEB B0            cmp a, b
3377   1CEC FD 72         sneq ; !=
3378   1CEE E4            pop a
3379   1CEF             ; END RELATIONAL
3380   1CEF FD A7         sand a, b
3381   1CF1 E4            pop a
3382   1CF2 C0 00 00      cmp b, 0
3383   1CF5 C6 DD 1E      je _while49_exit
3384   1CF8             _while49_block:
3385   1CF8             ;; input_buffer[i++] = input[k++]; 
3386   1CF8 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3387   1CFB D7            push a
3388   1CFC DA            push d
3389   1CFD FA FF FF      lea d, [bp + -1] ; $i
3390   1D00 2A            mov b, [d]
3391   1D01 D8            push b
3392   1D02 FD 77         inc b
3393   1D04 FA FF FF      lea d, [bp + -1] ; $i
3394   1D07 FD 43         mov [d], b
3395   1D09 E5            pop b
3396   1D0A E7            pop d
3397   1D0B 5A            add d, b
3398   1D0C E4            pop a
3399   1D0D DA            push d
3400   1D0E FA 05 00      lea d, [bp + 5] ; $input
3401   1D11 FD 2A         mov d, [d]
3402   1D13 D7            push a
3403   1D14 DA            push d
3404   1D15 FA FB FF      lea d, [bp + -5] ; $k
3405   1D18 2A            mov b, [d]
3406   1D19 D8            push b
3407   1D1A FD 77         inc b
3408   1D1C FA FB FF      lea d, [bp + -5] ; $k
3409   1D1F FD 43         mov [d], b
3410   1D21 E5            pop b
3411   1D22 E7            pop d
3412   1D23 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3413   1D27 E4            pop a
3414   1D28 32            mov bl, [d]
3415   1D29 A7 00         mov bh, 0
3416   1D2B E7            pop d
3417   1D2C FD 3E         mov [d], bl
3418   1D2E             ;; if (i == 4) { 
3419   1D2E             _if50_cond:
3420   1D2E FA FF FF      lea d, [bp + -1] ; $i
3421   1D31 2A            mov b, [d]
3422   1D32             ; START RELATIONAL
3423   1D32 D7            push a
3424   1D33 11            mov a, b
3425   1D34 26 04 00      mov b, $4
3426   1D37 B0            cmp a, b
3427   1D38 FD 71         seq ; ==
3428   1D3A E4            pop a
3429   1D3B             ; END RELATIONAL
3430   1D3B C0 00 00      cmp b, 0
3431   1D3E C6 DA 1E      je _if50_exit
3432   1D41             _if50_true:
3433   1D41             ;; for (i = 0; i < 4; i++) { 
3434   1D41             _for51_init:
3435   1D41 FA FF FF      lea d, [bp + -1] ; $i
3436   1D44 DA            push d
3437   1D45 26 00 00      mov b, $0
3438   1D48 E7            pop d
3439   1D49 FD 43         mov [d], b
3440   1D4B             _for51_cond:
3441   1D4B FA FF FF      lea d, [bp + -1] ; $i
3442   1D4E 2A            mov b, [d]
3443   1D4F             ; START RELATIONAL
3444   1D4F D7            push a
3445   1D50 11            mov a, b
3446   1D51 26 04 00      mov b, $4
3447   1D54 B0            cmp a, b
3448   1D55 FD 73         slt ; < (signed)
3449   1D57 E4            pop a
3450   1D58             ; END RELATIONAL
3451   1D58 C0 00 00      cmp b, 0
3452   1D5B C6 94 1D      je _for51_exit
3453   1D5E             _for51_block:
3454   1D5E             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
3455   1D5E FA F5 FF      lea d, [bp + -11] ; $input_buffer
3456   1D61 D7            push a
3457   1D62 DA            push d
3458   1D63 FA FF FF      lea d, [bp + -1] ; $i
3459   1D66 2A            mov b, [d]
3460   1D67 E7            pop d
3461   1D68 5A            add d, b
3462   1D69 E4            pop a
3463   1D6A DA            push d
3464   1D6B FA F5 FF      lea d, [bp + -11] ; $input_buffer
3465   1D6E D7            push a
3466   1D6F DA            push d
3467   1D70 FA FF FF      lea d, [bp + -1] ; $i
3468   1D73 2A            mov b, [d]
3469   1D74 E7            pop d
3470   1D75 5A            add d, b
3471   1D76 E4            pop a
3472   1D77 32            mov bl, [d]
3473   1D78 A7 00         mov bh, 0
3474   1D7A DD            push bl
3475   1D7B 07 70 1B      call base64_char_value
3476   1D7E 51 01 00      add sp, 1
3477   1D81 E7            pop d
3478   1D82 FD 3E         mov [d], bl
3479   1D84             _for51_update:
3480   1D84 FA FF FF      lea d, [bp + -1] ; $i
3481   1D87 2A            mov b, [d]
3482   1D88 D8            push b
3483   1D89 FD 77         inc b
3484   1D8B FA FF FF      lea d, [bp + -1] ; $i
3485   1D8E FD 43         mov [d], b
3486   1D90 E5            pop b
3487   1D91 0A 4B 1D      jmp _for51_cond
3488   1D94             _for51_exit:
3489   1D94             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
3490   1D94 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3491   1D97 D7            push a
3492   1D98 DA            push d
3493   1D99 26 00 00      mov b, $0
3494   1D9C E7            pop d
3495   1D9D 5A            add d, b
3496   1D9E E4            pop a
3497   1D9F DA            push d
3498   1DA0 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3499   1DA3 D7            push a
3500   1DA4 DA            push d
3501   1DA5 26 00 00      mov b, $0
3502   1DA8 E7            pop d
3503   1DA9 5A            add d, b
3504   1DAA E4            pop a
3505   1DAB 32            mov bl, [d]
3506   1DAC A7 00         mov bh, 0
3507   1DAE             ; START SHIFT
3508   1DAE D7            push a
3509   1DAF 11            mov a, b
3510   1DB0 26 02 00      mov b, $2
3511   1DB3 FD 39         mov c, b
3512   1DB5 9D            shl a, cl
3513   1DB6 27            mov b, a
3514   1DB7 E4            pop a
3515   1DB8             ; END SHIFT
3516   1DB8             ; START TERMS
3517   1DB8 D7            push a
3518   1DB9 11            mov a, b
3519   1DBA FA F5 FF      lea d, [bp + -11] ; $input_buffer
3520   1DBD D7            push a
3521   1DBE DA            push d
3522   1DBF 26 01 00      mov b, $1
3523   1DC2 E7            pop d
3524   1DC3 5A            add d, b
3525   1DC4 E4            pop a
3526   1DC5 32            mov bl, [d]
3527   1DC6 A7 00         mov bh, 0
3528   1DC8 D7            push a
3529   1DC9 11            mov a, b
3530   1DCA 26 30 00      mov b, $30
3531   1DCD FD 92         and b, a ; &
3532   1DCF E4            pop a
3533   1DD0             ; START SHIFT
3534   1DD0 D7            push a
3535   1DD1 11            mov a, b
3536   1DD2 26 04 00      mov b, $4
3537   1DD5 FD 39         mov c, b
3538   1DD7 A5            ashr a, cl
3539   1DD8 27            mov b, a
3540   1DD9 E4            pop a
3541   1DDA             ; END SHIFT
3542   1DDA 56            add b, a
3543   1DDB E4            pop a
3544   1DDC             ; END TERMS
3545   1DDC E7            pop d
3546   1DDD FD 3E         mov [d], bl
3547   1DDF             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
3548   1DDF FA F2 FF      lea d, [bp + -14] ; $output_buffer
3549   1DE2 D7            push a
3550   1DE3 DA            push d
3551   1DE4 26 01 00      mov b, $1
3552   1DE7 E7            pop d
3553   1DE8 5A            add d, b
3554   1DE9 E4            pop a
3555   1DEA DA            push d
3556   1DEB FA F5 FF      lea d, [bp + -11] ; $input_buffer
3557   1DEE D7            push a
3558   1DEF DA            push d
3559   1DF0 26 01 00      mov b, $1
3560   1DF3 E7            pop d
3561   1DF4 5A            add d, b
3562   1DF5 E4            pop a
3563   1DF6 32            mov bl, [d]
3564   1DF7 A7 00         mov bh, 0
3565   1DF9 D7            push a
3566   1DFA 11            mov a, b
3567   1DFB 26 0F 00      mov b, $f
3568   1DFE FD 92         and b, a ; &
3569   1E00 E4            pop a
3570   1E01             ; START SHIFT
3571   1E01 D7            push a
3572   1E02 11            mov a, b
3573   1E03 26 04 00      mov b, $4
3574   1E06 FD 39         mov c, b
3575   1E08 9D            shl a, cl
3576   1E09 27            mov b, a
3577   1E0A E4            pop a
3578   1E0B             ; END SHIFT
3579   1E0B             ; START TERMS
3580   1E0B D7            push a
3581   1E0C 11            mov a, b
3582   1E0D FA F5 FF      lea d, [bp + -11] ; $input_buffer
3583   1E10 D7            push a
3584   1E11 DA            push d
3585   1E12 26 02 00      mov b, $2
3586   1E15 E7            pop d
3587   1E16 5A            add d, b
3588   1E17 E4            pop a
3589   1E18 32            mov bl, [d]
3590   1E19 A7 00         mov bh, 0
3591   1E1B D7            push a
3592   1E1C 11            mov a, b
3593   1E1D 26 3C 00      mov b, $3c
3594   1E20 FD 92         and b, a ; &
3595   1E22 E4            pop a
3596   1E23             ; START SHIFT
3597   1E23 D7            push a
3598   1E24 11            mov a, b
3599   1E25 26 02 00      mov b, $2
3600   1E28 FD 39         mov c, b
3601   1E2A A5            ashr a, cl
3602   1E2B 27            mov b, a
3603   1E2C E4            pop a
3604   1E2D             ; END SHIFT
3605   1E2D 56            add b, a
3606   1E2E E4            pop a
3607   1E2F             ; END TERMS
3608   1E2F E7            pop d
3609   1E30 FD 3E         mov [d], bl
3610   1E32             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
3611   1E32 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3612   1E35 D7            push a
3613   1E36 DA            push d
3614   1E37 26 02 00      mov b, $2
3615   1E3A E7            pop d
3616   1E3B 5A            add d, b
3617   1E3C E4            pop a
3618   1E3D DA            push d
3619   1E3E FA F5 FF      lea d, [bp + -11] ; $input_buffer
3620   1E41 D7            push a
3621   1E42 DA            push d
3622   1E43 26 02 00      mov b, $2
3623   1E46 E7            pop d
3624   1E47 5A            add d, b
3625   1E48 E4            pop a
3626   1E49 32            mov bl, [d]
3627   1E4A A7 00         mov bh, 0
3628   1E4C D7            push a
3629   1E4D 11            mov a, b
3630   1E4E 26 03 00      mov b, $3
3631   1E51 FD 92         and b, a ; &
3632   1E53 E4            pop a
3633   1E54             ; START SHIFT
3634   1E54 D7            push a
3635   1E55 11            mov a, b
3636   1E56 26 06 00      mov b, $6
3637   1E59 FD 39         mov c, b
3638   1E5B 9D            shl a, cl
3639   1E5C 27            mov b, a
3640   1E5D E4            pop a
3641   1E5E             ; END SHIFT
3642   1E5E             ; START TERMS
3643   1E5E D7            push a
3644   1E5F 11            mov a, b
3645   1E60 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3646   1E63 D7            push a
3647   1E64 DA            push d
3648   1E65 26 03 00      mov b, $3
3649   1E68 E7            pop d
3650   1E69 5A            add d, b
3651   1E6A E4            pop a
3652   1E6B 32            mov bl, [d]
3653   1E6C A7 00         mov bh, 0
3654   1E6E 56            add b, a
3655   1E6F E4            pop a
3656   1E70             ; END TERMS
3657   1E70 E7            pop d
3658   1E71 FD 3E         mov [d], bl
3659   1E73             ;; for (i = 0; i < 3; i++) { 
3660   1E73             _for52_init:
3661   1E73 FA FF FF      lea d, [bp + -1] ; $i
3662   1E76 DA            push d
3663   1E77 26 00 00      mov b, $0
3664   1E7A E7            pop d
3665   1E7B FD 43         mov [d], b
3666   1E7D             _for52_cond:
3667   1E7D FA FF FF      lea d, [bp + -1] ; $i
3668   1E80 2A            mov b, [d]
3669   1E81             ; START RELATIONAL
3670   1E81 D7            push a
3671   1E82 11            mov a, b
3672   1E83 26 03 00      mov b, $3
3673   1E86 B0            cmp a, b
3674   1E87 FD 73         slt ; < (signed)
3675   1E89 E4            pop a
3676   1E8A             ; END RELATIONAL
3677   1E8A C0 00 00      cmp b, 0
3678   1E8D C6 CD 1E      je _for52_exit
3679   1E90             _for52_block:
3680   1E90             ;; output[j++] = output_buffer[i]; 
3681   1E90 FA 07 00      lea d, [bp + 7] ; $output
3682   1E93 FD 2A         mov d, [d]
3683   1E95 D7            push a
3684   1E96 DA            push d
3685   1E97 FA FD FF      lea d, [bp + -3] ; $j
3686   1E9A 2A            mov b, [d]
3687   1E9B D8            push b
3688   1E9C FD 77         inc b
3689   1E9E FA FD FF      lea d, [bp + -3] ; $j
3690   1EA1 FD 43         mov [d], b
3691   1EA3 E5            pop b
3692   1EA4 E7            pop d
3693   1EA5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3694   1EA9 E4            pop a
3695   1EAA DA            push d
3696   1EAB FA F2 FF      lea d, [bp + -14] ; $output_buffer
3697   1EAE D7            push a
3698   1EAF DA            push d
3699   1EB0 FA FF FF      lea d, [bp + -1] ; $i
3700   1EB3 2A            mov b, [d]
3701   1EB4 E7            pop d
3702   1EB5 5A            add d, b
3703   1EB6 E4            pop a
3704   1EB7 32            mov bl, [d]
3705   1EB8 A7 00         mov bh, 0
3706   1EBA E7            pop d
3707   1EBB FD 3E         mov [d], bl
3708   1EBD             _for52_update:
3709   1EBD FA FF FF      lea d, [bp + -1] ; $i
3710   1EC0 2A            mov b, [d]
3711   1EC1 D8            push b
3712   1EC2 FD 77         inc b
3713   1EC4 FA FF FF      lea d, [bp + -1] ; $i
3714   1EC7 FD 43         mov [d], b
3715   1EC9 E5            pop b
3716   1ECA 0A 7D 1E      jmp _for52_cond
3717   1ECD             _for52_exit:
3718   1ECD             ;; i = 0; 
3719   1ECD FA FF FF      lea d, [bp + -1] ; $i
3720   1ED0 DA            push d
3721   1ED1 26 00 00      mov b, $0
3722   1ED4 E7            pop d
3723   1ED5 FD 43         mov [d], b
3724   1ED7 0A DA 1E      jmp _if50_exit
3725   1EDA             _if50_exit:
3726   1EDA 0A 9C 1C      jmp _while49_cond
3727   1EDD             _while49_exit:
3728   1EDD             ;; if (i) { 
3729   1EDD             _if53_cond:
3730   1EDD FA FF FF      lea d, [bp + -1] ; $i
3731   1EE0 2A            mov b, [d]
3732   1EE1 C0 00 00      cmp b, 0
3733   1EE4 C6 7F 20      je _if53_exit
3734   1EE7             _if53_true:
3735   1EE7             ;; for (k = i; k < 4; k++) { 
3736   1EE7             _for54_init:
3737   1EE7 FA FB FF      lea d, [bp + -5] ; $k
3738   1EEA DA            push d
3739   1EEB FA FF FF      lea d, [bp + -1] ; $i
3740   1EEE 2A            mov b, [d]
3741   1EEF E7            pop d
3742   1EF0 FD 43         mov [d], b
3743   1EF2             _for54_cond:
3744   1EF2 FA FB FF      lea d, [bp + -5] ; $k
3745   1EF5 2A            mov b, [d]
3746   1EF6             ; START RELATIONAL
3747   1EF6 D7            push a
3748   1EF7 11            mov a, b
3749   1EF8 26 04 00      mov b, $4
3750   1EFB B0            cmp a, b
3751   1EFC FD 73         slt ; < (signed)
3752   1EFE E4            pop a
3753   1EFF             ; END RELATIONAL
3754   1EFF C0 00 00      cmp b, 0
3755   1F02 C6 28 1F      je _for54_exit
3756   1F05             _for54_block:
3757   1F05             ;; input_buffer[k] = 0; 
3758   1F05 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3759   1F08 D7            push a
3760   1F09 DA            push d
3761   1F0A FA FB FF      lea d, [bp + -5] ; $k
3762   1F0D 2A            mov b, [d]
3763   1F0E E7            pop d
3764   1F0F 5A            add d, b
3765   1F10 E4            pop a
3766   1F11 DA            push d
3767   1F12 26 00 00      mov b, $0
3768   1F15 E7            pop d
3769   1F16 FD 3E         mov [d], bl
3770   1F18             _for54_update:
3771   1F18 FA FB FF      lea d, [bp + -5] ; $k
3772   1F1B 2A            mov b, [d]
3773   1F1C D8            push b
3774   1F1D FD 77         inc b
3775   1F1F FA FB FF      lea d, [bp + -5] ; $k
3776   1F22 FD 43         mov [d], b
3777   1F24 E5            pop b
3778   1F25 0A F2 1E      jmp _for54_cond
3779   1F28             _for54_exit:
3780   1F28             ;; for (k = 0; k < 4; k++) { 
3781   1F28             _for55_init:
3782   1F28 FA FB FF      lea d, [bp + -5] ; $k
3783   1F2B DA            push d
3784   1F2C 26 00 00      mov b, $0
3785   1F2F E7            pop d
3786   1F30 FD 43         mov [d], b
3787   1F32             _for55_cond:
3788   1F32 FA FB FF      lea d, [bp + -5] ; $k
3789   1F35 2A            mov b, [d]
3790   1F36             ; START RELATIONAL
3791   1F36 D7            push a
3792   1F37 11            mov a, b
3793   1F38 26 04 00      mov b, $4
3794   1F3B B0            cmp a, b
3795   1F3C FD 73         slt ; < (signed)
3796   1F3E E4            pop a
3797   1F3F             ; END RELATIONAL
3798   1F3F C0 00 00      cmp b, 0
3799   1F42 C6 7B 1F      je _for55_exit
3800   1F45             _for55_block:
3801   1F45             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
3802   1F45 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3803   1F48 D7            push a
3804   1F49 DA            push d
3805   1F4A FA FB FF      lea d, [bp + -5] ; $k
3806   1F4D 2A            mov b, [d]
3807   1F4E E7            pop d
3808   1F4F 5A            add d, b
3809   1F50 E4            pop a
3810   1F51 DA            push d
3811   1F52 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3812   1F55 D7            push a
3813   1F56 DA            push d
3814   1F57 FA FB FF      lea d, [bp + -5] ; $k
3815   1F5A 2A            mov b, [d]
3816   1F5B E7            pop d
3817   1F5C 5A            add d, b
3818   1F5D E4            pop a
3819   1F5E 32            mov bl, [d]
3820   1F5F A7 00         mov bh, 0
3821   1F61 DD            push bl
3822   1F62 07 70 1B      call base64_char_value
3823   1F65 51 01 00      add sp, 1
3824   1F68 E7            pop d
3825   1F69 FD 3E         mov [d], bl
3826   1F6B             _for55_update:
3827   1F6B FA FB FF      lea d, [bp + -5] ; $k
3828   1F6E 2A            mov b, [d]
3829   1F6F D8            push b
3830   1F70 FD 77         inc b
3831   1F72 FA FB FF      lea d, [bp + -5] ; $k
3832   1F75 FD 43         mov [d], b
3833   1F77 E5            pop b
3834   1F78 0A 32 1F      jmp _for55_cond
3835   1F7B             _for55_exit:
3836   1F7B             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
3837   1F7B FA F2 FF      lea d, [bp + -14] ; $output_buffer
3838   1F7E D7            push a
3839   1F7F DA            push d
3840   1F80 26 00 00      mov b, $0
3841   1F83 E7            pop d
3842   1F84 5A            add d, b
3843   1F85 E4            pop a
3844   1F86 DA            push d
3845   1F87 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3846   1F8A D7            push a
3847   1F8B DA            push d
3848   1F8C 26 00 00      mov b, $0
3849   1F8F E7            pop d
3850   1F90 5A            add d, b
3851   1F91 E4            pop a
3852   1F92 32            mov bl, [d]
3853   1F93 A7 00         mov bh, 0
3854   1F95             ; START SHIFT
3855   1F95 D7            push a
3856   1F96 11            mov a, b
3857   1F97 26 02 00      mov b, $2
3858   1F9A FD 39         mov c, b
3859   1F9C 9D            shl a, cl
3860   1F9D 27            mov b, a
3861   1F9E E4            pop a
3862   1F9F             ; END SHIFT
3863   1F9F             ; START TERMS
3864   1F9F D7            push a
3865   1FA0 11            mov a, b
3866   1FA1 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3867   1FA4 D7            push a
3868   1FA5 DA            push d
3869   1FA6 26 01 00      mov b, $1
3870   1FA9 E7            pop d
3871   1FAA 5A            add d, b
3872   1FAB E4            pop a
3873   1FAC 32            mov bl, [d]
3874   1FAD A7 00         mov bh, 0
3875   1FAF D7            push a
3876   1FB0 11            mov a, b
3877   1FB1 26 30 00      mov b, $30
3878   1FB4 FD 92         and b, a ; &
3879   1FB6 E4            pop a
3880   1FB7             ; START SHIFT
3881   1FB7 D7            push a
3882   1FB8 11            mov a, b
3883   1FB9 26 04 00      mov b, $4
3884   1FBC FD 39         mov c, b
3885   1FBE A5            ashr a, cl
3886   1FBF 27            mov b, a
3887   1FC0 E4            pop a
3888   1FC1             ; END SHIFT
3889   1FC1 56            add b, a
3890   1FC2 E4            pop a
3891   1FC3             ; END TERMS
3892   1FC3 E7            pop d
3893   1FC4 FD 3E         mov [d], bl
3894   1FC6             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
3895   1FC6 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3896   1FC9 D7            push a
3897   1FCA DA            push d
3898   1FCB 26 01 00      mov b, $1
3899   1FCE E7            pop d
3900   1FCF 5A            add d, b
3901   1FD0 E4            pop a
3902   1FD1 DA            push d
3903   1FD2 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3904   1FD5 D7            push a
3905   1FD6 DA            push d
3906   1FD7 26 01 00      mov b, $1
3907   1FDA E7            pop d
3908   1FDB 5A            add d, b
3909   1FDC E4            pop a
3910   1FDD 32            mov bl, [d]
3911   1FDE A7 00         mov bh, 0
3912   1FE0 D7            push a
3913   1FE1 11            mov a, b
3914   1FE2 26 0F 00      mov b, $f
3915   1FE5 FD 92         and b, a ; &
3916   1FE7 E4            pop a
3917   1FE8             ; START SHIFT
3918   1FE8 D7            push a
3919   1FE9 11            mov a, b
3920   1FEA 26 04 00      mov b, $4
3921   1FED FD 39         mov c, b
3922   1FEF 9D            shl a, cl
3923   1FF0 27            mov b, a
3924   1FF1 E4            pop a
3925   1FF2             ; END SHIFT
3926   1FF2             ; START TERMS
3927   1FF2 D7            push a
3928   1FF3 11            mov a, b
3929   1FF4 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3930   1FF7 D7            push a
3931   1FF8 DA            push d
3932   1FF9 26 02 00      mov b, $2
3933   1FFC E7            pop d
3934   1FFD 5A            add d, b
3935   1FFE E4            pop a
3936   1FFF 32            mov bl, [d]
3937   2000 A7 00         mov bh, 0
3938   2002 D7            push a
3939   2003 11            mov a, b
3940   2004 26 3C 00      mov b, $3c
3941   2007 FD 92         and b, a ; &
3942   2009 E4            pop a
3943   200A             ; START SHIFT
3944   200A D7            push a
3945   200B 11            mov a, b
3946   200C 26 02 00      mov b, $2
3947   200F FD 39         mov c, b
3948   2011 A5            ashr a, cl
3949   2012 27            mov b, a
3950   2013 E4            pop a
3951   2014             ; END SHIFT
3952   2014 56            add b, a
3953   2015 E4            pop a
3954   2016             ; END TERMS
3955   2016 E7            pop d
3956   2017 FD 3E         mov [d], bl
3957   2019             ;; for (k = 0; k < i - 1; k++) { 
3958   2019             _for56_init:
3959   2019 FA FB FF      lea d, [bp + -5] ; $k
3960   201C DA            push d
3961   201D 26 00 00      mov b, $0
3962   2020 E7            pop d
3963   2021 FD 43         mov [d], b
3964   2023             _for56_cond:
3965   2023 FA FB FF      lea d, [bp + -5] ; $k
3966   2026 2A            mov b, [d]
3967   2027             ; START RELATIONAL
3968   2027 D7            push a
3969   2028 11            mov a, b
3970   2029 FA FF FF      lea d, [bp + -1] ; $i
3971   202C 2A            mov b, [d]
3972   202D             ; START TERMS
3973   202D D7            push a
3974   202E 11            mov a, b
3975   202F 26 01 00      mov b, $1
3976   2032 60            sub a, b
3977   2033 27            mov b, a
3978   2034 E4            pop a
3979   2035             ; END TERMS
3980   2035 B0            cmp a, b
3981   2036 FD 73         slt ; < (signed)
3982   2038 E4            pop a
3983   2039             ; END RELATIONAL
3984   2039 C0 00 00      cmp b, 0
3985   203C C6 7C 20      je _for56_exit
3986   203F             _for56_block:
3987   203F             ;; output[j++] = output_buffer[k]; 
3988   203F FA 07 00      lea d, [bp + 7] ; $output
3989   2042 FD 2A         mov d, [d]
3990   2044 D7            push a
3991   2045 DA            push d
3992   2046 FA FD FF      lea d, [bp + -3] ; $j
3993   2049 2A            mov b, [d]
3994   204A D8            push b
3995   204B FD 77         inc b
3996   204D FA FD FF      lea d, [bp + -3] ; $j
3997   2050 FD 43         mov [d], b
3998   2052 E5            pop b
3999   2053 E7            pop d
4000   2054 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4001   2058 E4            pop a
4002   2059 DA            push d
4003   205A FA F2 FF      lea d, [bp + -14] ; $output_buffer
4004   205D D7            push a
4005   205E DA            push d
4006   205F FA FB FF      lea d, [bp + -5] ; $k
4007   2062 2A            mov b, [d]
4008   2063 E7            pop d
4009   2064 5A            add d, b
4010   2065 E4            pop a
4011   2066 32            mov bl, [d]
4012   2067 A7 00         mov bh, 0
4013   2069 E7            pop d
4014   206A FD 3E         mov [d], bl
4015   206C             _for56_update:
4016   206C FA FB FF      lea d, [bp + -5] ; $k
4017   206F 2A            mov b, [d]
4018   2070 D8            push b
4019   2071 FD 77         inc b
4020   2073 FA FB FF      lea d, [bp + -5] ; $k
4021   2076 FD 43         mov [d], b
4022   2078 E5            pop b
4023   2079 0A 23 20      jmp _for56_cond
4024   207C             _for56_exit:
4025   207C 0A 7F 20      jmp _if53_exit
4026   207F             _if53_exit:
4027   207F             ;; output[j] = '\0'; 
4028   207F FA 07 00      lea d, [bp + 7] ; $output
4029   2082 FD 2A         mov d, [d]
4030   2084 D7            push a
4031   2085 DA            push d
4032   2086 FA FD FF      lea d, [bp + -3] ; $j
4033   2089 2A            mov b, [d]
4034   208A E7            pop d
4035   208B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4036   208F E4            pop a
4037   2090 DA            push d
4038   2091 26 00 00      mov b, $0
4039   2094 E7            pop d
4040   2095 FD 3E         mov [d], bl
4041   2097 F9            leave
4042   2098 09            ret
4043   2099             ; --- END TEXT BLOCK
4044   2099             
4045   2099             ; --- BEGIN DATA BLOCK
4046   2099 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
4046   209D 45 46 47 48 
4046   20A1 49 4A 4B 4C 
4046   20A5 4D 4E 4F 50 
4046   20A9 51 52 53 54 
4046   20AD 55 56 57 58 
4046   20B1 59 5A 61 62 
4046   20B5 63 64 65 66 
4046   20B9 67 68 69 6A 
4046   20BD 6B 6C 6D 6E 
4046   20C1 6F 70 71 72 
4046   20C5 73 74 75 76 
4046   20C9 77 78 79 7A 
4046   20CD 30 31 32 33 
4046   20D1 34 35 36 37 
4046   20D5 38 39 2B 2F 
4046   20D9 00 
4047   20DA 99 20       _base64_table: .dw _base64_table_data
4048   20DC 45 6E 74 65 _s0: .db "Enter a base64 encoded string to decode: ", 0
4048   20E0 72 20 61 20 
4048   20E4 62 61 73 65 
4048   20E8 36 34 20 65 
4048   20EC 6E 63 6F 64 
4048   20F0 65 64 20 73 
4048   20F4 74 72 69 6E 
4048   20F8 67 20 74 6F 
4048   20FC 20 64 65 63 
4048   2100 6F 64 65 3A 
4048   2104 20 00 
4049   2106 45 6E 63 6F _s1: .db "Encoded string: %s\n", 0
4049   210A 64 65 64 20 
4049   210E 73 74 72 69 
4049   2112 6E 67 3A 20 
4049   2116 25 73 0A 00 
4050   211A 44 65 63 6F _s2: .db "Decoded string: %s\n", 0
4050   211E 64 65 64 20 
4050   2122 73 74 72 69 
4050   2126 6E 67 3A 20 
4050   212A 25 73 0A 00 
4051   212E 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
4051   2132 70 65 63 74 
4051   2136 65 64 20 66 
4051   213A 6F 72 6D 61 
4051   213E 74 20 69 6E 
4051   2142 20 70 72 69 
4051   2146 6E 74 66 2E 
4051   214A 00 
4052   214B 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
4052   214F 72 3A 20 55 
4052   2153 6E 6B 6E 6F 
4052   2157 77 6E 20 61 
4052   215B 72 67 75 6D 
4052   215F 65 6E 74 20 
4052   2163 74 79 70 65 
4052   2167 2E 0A 00 
4053   216A 1B 5B 32 4A _s5: .db "\033[2J\033[H", 0
4053   216E 1B 5B 48 00 
4054   2172             
4055   2172 74 21       _heap_top: .dw _heap
4056   2174 00          _heap: .db 0
4057   2175             ; --- END DATA BLOCK
4058   2175             
4059   2175             .end
tasm: Number of errors = 0
