0001   0000             ; --- FILENAME: programs/base64
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; char input[512]; 
0011   0408 52 00 02      sub sp, 512 ; input
0012   040B             ;; char output[256]; 
0013   040B 52 00 01      sub sp, 256 ; output
0014   040E             ;; printf("Enter a base64 encoded string to decode: "); 
0015   040E 26 29 23      mov b, _s0 ; "Enter a base64 encoded string to decode: "
0016   0411 FD AB         swp b
0017   0413 D8            push b
0018   0414 07 21 08      call printf
0019   0417 51 02 00      add sp, 2
0020   041A             ;; gets(input); 
0021   041A FA 01 FE      lea d, [bp + -511] ; $input
0022   041D 2D            mov b, d
0023   041E FD AB         swp b
0024   0420 D8            push b
0025   0421 07 5C 0E      call gets
0026   0424 51 02 00      add sp, 2
0027   0427             ;; base64_encode(input, output); 
0028   0427 FA 01 FD      lea d, [bp + -767] ; $output
0029   042A 2D            mov b, d
0030   042B FD AB         swp b
0031   042D D8            push b
0032   042E FA 01 FE      lea d, [bp + -511] ; $input
0033   0431 2D            mov b, d
0034   0432 FD AB         swp b
0035   0434 D8            push b
0036   0435 07 AE 19      call base64_encode
0037   0438 51 04 00      add sp, 4
0038   043B             ;; printf("Encoded string: %s\n", output); 
0039   043B FA 01 FD      lea d, [bp + -767] ; $output
0040   043E 2D            mov b, d
0041   043F FD AB         swp b
0042   0441 D8            push b
0043   0442 26 53 23      mov b, _s1 ; "Encoded string: %s\n"
0044   0445 FD AB         swp b
0045   0447 D8            push b
0046   0448 07 21 08      call printf
0047   044B 51 04 00      add sp, 4
0048   044E             ;; base64_decode(output, input); 
0049   044E FA 01 FE      lea d, [bp + -511] ; $input
0050   0451 2D            mov b, d
0051   0452 FD AB         swp b
0052   0454 D8            push b
0053   0455 FA 01 FD      lea d, [bp + -767] ; $output
0054   0458 2D            mov b, d
0055   0459 FD AB         swp b
0056   045B D8            push b
0057   045C 07 A0 1E      call base64_decode
0058   045F 51 04 00      add sp, 4
0059   0462             ;; printf("Decoded string: %s\n", input); 
0060   0462 FA 01 FE      lea d, [bp + -511] ; $input
0061   0465 2D            mov b, d
0062   0466 FD AB         swp b
0063   0468 D8            push b
0064   0469 26 67 23      mov b, _s2 ; "Decoded string: %s\n"
0065   046C FD AB         swp b
0066   046E D8            push b
0067   046F 07 21 08      call printf
0068   0472 51 04 00      add sp, 4
0069   0475             ;; return 0; 
0070   0475 26 00 00      mov b, $0
0071   0478 F9            leave
0072   0479 05 0B         syscall sys_terminate_proc
0073   047B             
0074   047B             strcpy:
0075   047B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0076   047E             ;; char *psrc; 
0077   047E 52 02 00      sub sp, 2 ; psrc
0078   0481             ;; char *pdest; 
0079   0481 52 02 00      sub sp, 2 ; pdest
0080   0484             ;; psrc = src; 
0081   0484 FA FF FF      lea d, [bp + -1] ; $psrc
0082   0487 DA            push d
0083   0488 FA 07 00      lea d, [bp + 7] ; $src
0084   048B 2A            mov b, [d]
0085   048C E7            pop d
0086   048D FD 43         mov [d], b
0087   048F             ;; pdest = dest; 
0088   048F FA FD FF      lea d, [bp + -3] ; $pdest
0089   0492 DA            push d
0090   0493 FA 05 00      lea d, [bp + 5] ; $dest
0091   0496 2A            mov b, [d]
0092   0497 E7            pop d
0093   0498 FD 43         mov [d], b
0094   049A             ;; while(*psrc) *pdest++ = *psrc++; 
0095   049A             _while1_cond:
0096   049A FA FF FF      lea d, [bp + -1] ; $psrc
0097   049D 2A            mov b, [d]
0098   049E 74            mov d, b
0099   049F 32            mov bl, [d]
0100   04A0 A7 00         mov bh, 0
0101   04A2 C0 00 00      cmp b, 0
0102   04A5 C6 CD 04      je _while1_exit
0103   04A8             _while1_block:
0104   04A8             ;; *pdest++ = *psrc++; 
0105   04A8 FA FD FF      lea d, [bp + -3] ; $pdest
0106   04AB 2A            mov b, [d]
0107   04AC FD 77         inc b
0108   04AE FA FD FF      lea d, [bp + -3] ; $pdest
0109   04B1 FD 43         mov [d], b
0110   04B3 FD 7D         dec b
0111   04B5 D8            push b
0112   04B6 FA FF FF      lea d, [bp + -1] ; $psrc
0113   04B9 2A            mov b, [d]
0114   04BA FD 77         inc b
0115   04BC FA FF FF      lea d, [bp + -1] ; $psrc
0116   04BF FD 43         mov [d], b
0117   04C1 FD 7D         dec b
0118   04C3 74            mov d, b
0119   04C4 32            mov bl, [d]
0120   04C5 A7 00         mov bh, 0
0121   04C7 E7            pop d
0122   04C8 FD 3E         mov [d], bl
0123   04CA 0A 9A 04      jmp _while1_cond
0124   04CD             _while1_exit:
0125   04CD             ;; *pdest = '\0'; 
0126   04CD FA FD FF      lea d, [bp + -3] ; $pdest
0127   04D0 2A            mov b, [d]
0128   04D1 D8            push b
0129   04D2 26 00 00      mov b, $0
0130   04D5 E7            pop d
0131   04D6 FD 3E         mov [d], bl
0132   04D8 F9            leave
0133   04D9 09            ret
0134   04DA             
0135   04DA             strcmp:
0136   04DA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0137   04DD             ;; while (*s1 && (*s1 == *s2)) { 
0138   04DD             _while2_cond:
0139   04DD FA 05 00      lea d, [bp + 5] ; $s1
0140   04E0 2A            mov b, [d]
0141   04E1 74            mov d, b
0142   04E2 32            mov bl, [d]
0143   04E3 A7 00         mov bh, 0
0144   04E5             ; START LOGICAL AND
0145   04E5 D7            push a
0146   04E6 11            mov a, b
0147   04E7 FA 05 00      lea d, [bp + 5] ; $s1
0148   04EA 2A            mov b, [d]
0149   04EB 74            mov d, b
0150   04EC 32            mov bl, [d]
0151   04ED A7 00         mov bh, 0
0152   04EF             ; START RELATIONAL
0153   04EF D7            push a
0154   04F0 11            mov a, b
0155   04F1 FA 07 00      lea d, [bp + 7] ; $s2
0156   04F4 2A            mov b, [d]
0157   04F5 74            mov d, b
0158   04F6 32            mov bl, [d]
0159   04F7 A7 00         mov bh, 0
0160   04F9 B0            cmp a, b
0161   04FA FD 71         seq ; ==
0162   04FC E4            pop a
0163   04FD             ; END RELATIONAL
0164   04FD FD A7         sand a, b
0165   04FF E4            pop a
0166   0500             ; END LOGICAL AND
0167   0500 C0 00 00      cmp b, 0
0168   0503 C6 23 05      je _while2_exit
0169   0506             _while2_block:
0170   0506             ;; s1++; 
0171   0506 FA 05 00      lea d, [bp + 5] ; $s1
0172   0509 2A            mov b, [d]
0173   050A FD 77         inc b
0174   050C FA 05 00      lea d, [bp + 5] ; $s1
0175   050F FD 43         mov [d], b
0176   0511 FD 7D         dec b
0177   0513             ;; s2++; 
0178   0513 FA 07 00      lea d, [bp + 7] ; $s2
0179   0516 2A            mov b, [d]
0180   0517 FD 77         inc b
0181   0519 FA 07 00      lea d, [bp + 7] ; $s2
0182   051C FD 43         mov [d], b
0183   051E FD 7D         dec b
0184   0520 0A DD 04      jmp _while2_cond
0185   0523             _while2_exit:
0186   0523             ;; return *s1 - *s2; 
0187   0523 FA 05 00      lea d, [bp + 5] ; $s1
0188   0526 2A            mov b, [d]
0189   0527 74            mov d, b
0190   0528 32            mov bl, [d]
0191   0529 A7 00         mov bh, 0
0192   052B             ; START TERMS
0193   052B D7            push a
0194   052C 11            mov a, b
0195   052D FA 07 00      lea d, [bp + 7] ; $s2
0196   0530 2A            mov b, [d]
0197   0531 74            mov d, b
0198   0532 32            mov bl, [d]
0199   0533 A7 00         mov bh, 0
0200   0535 60            sub a, b
0201   0536 27            mov b, a
0202   0537 E4            pop a
0203   0538             ; END TERMS
0204   0538 F9            leave
0205   0539 09            ret
0206   053A             
0207   053A             strncmp:
0208   053A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0209   053D F9            leave
0210   053E 09            ret
0211   053F             
0212   053F             strcat:
0213   053F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0214   0542             ;; int dest_len; 
0215   0542 52 02 00      sub sp, 2 ; dest_len
0216   0545             ;; int i; 
0217   0545 52 02 00      sub sp, 2 ; i
0218   0548             ;; dest_len = strlen(dest); 
0219   0548 FA FF FF      lea d, [bp + -1] ; $dest_len
0220   054B DA            push d
0221   054C FA 05 00      lea d, [bp + 5] ; $dest
0222   054F 2A            mov b, [d]
0223   0550 FD AB         swp b
0224   0552 D8            push b
0225   0553 07 F5 05      call strlen
0226   0556 51 02 00      add sp, 2
0227   0559 E7            pop d
0228   055A FD 43         mov [d], b
0229   055C             ;; for (i = 0; src[i] != 0; i=i+1) { 
0230   055C             _for3_init:
0231   055C FA FD FF      lea d, [bp + -3] ; $i
0232   055F DA            push d
0233   0560 26 00 00      mov b, $0
0234   0563 E7            pop d
0235   0564 FD 43         mov [d], b
0236   0566             _for3_cond:
0237   0566 FA 07 00      lea d, [bp + 7] ; $src
0238   0569 FD 2A         mov d, [d]
0239   056B D7            push a
0240   056C DA            push d
0241   056D FA FD FF      lea d, [bp + -3] ; $i
0242   0570 2A            mov b, [d]
0243   0571 E7            pop d
0244   0572 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0245   0576 E4            pop a
0246   0577 32            mov bl, [d]
0247   0578 A7 00         mov bh, 0
0248   057A             ; START RELATIONAL
0249   057A D7            push a
0250   057B 11            mov a, b
0251   057C 26 00 00      mov b, $0
0252   057F B0            cmp a, b
0253   0580 FD 72         sneq ; !=
0254   0582 E4            pop a
0255   0583             ; END RELATIONAL
0256   0583 C0 00 00      cmp b, 0
0257   0586 C6 CF 05      je _for3_exit
0258   0589             _for3_block:
0259   0589             ;; dest[dest_len + i] = src[i]; 
0260   0589 FA 05 00      lea d, [bp + 5] ; $dest
0261   058C FD 2A         mov d, [d]
0262   058E D7            push a
0263   058F DA            push d
0264   0590 FA FF FF      lea d, [bp + -1] ; $dest_len
0265   0593 2A            mov b, [d]
0266   0594             ; START TERMS
0267   0594 D7            push a
0268   0595 11            mov a, b
0269   0596 FA FD FF      lea d, [bp + -3] ; $i
0270   0599 2A            mov b, [d]
0271   059A 56            add b, a
0272   059B E4            pop a
0273   059C             ; END TERMS
0274   059C E7            pop d
0275   059D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0276   05A1 E4            pop a
0277   05A2 DA            push d
0278   05A3 FA 07 00      lea d, [bp + 7] ; $src
0279   05A6 FD 2A         mov d, [d]
0280   05A8 D7            push a
0281   05A9 DA            push d
0282   05AA FA FD FF      lea d, [bp + -3] ; $i
0283   05AD 2A            mov b, [d]
0284   05AE E7            pop d
0285   05AF FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0286   05B3 E4            pop a
0287   05B4 32            mov bl, [d]
0288   05B5 A7 00         mov bh, 0
0289   05B7 E7            pop d
0290   05B8 FD 3E         mov [d], bl
0291   05BA             _for3_update:
0292   05BA FA FD FF      lea d, [bp + -3] ; $i
0293   05BD DA            push d
0294   05BE FA FD FF      lea d, [bp + -3] ; $i
0295   05C1 2A            mov b, [d]
0296   05C2             ; START TERMS
0297   05C2 D7            push a
0298   05C3 11            mov a, b
0299   05C4 26 01 00      mov b, $1
0300   05C7 56            add b, a
0301   05C8 E4            pop a
0302   05C9             ; END TERMS
0303   05C9 E7            pop d
0304   05CA FD 43         mov [d], b
0305   05CC 0A 66 05      jmp _for3_cond
0306   05CF             _for3_exit:
0307   05CF             ;; dest[dest_len + i] = 0; 
0308   05CF FA 05 00      lea d, [bp + 5] ; $dest
0309   05D2 FD 2A         mov d, [d]
0310   05D4 D7            push a
0311   05D5 DA            push d
0312   05D6 FA FF FF      lea d, [bp + -1] ; $dest_len
0313   05D9 2A            mov b, [d]
0314   05DA             ; START TERMS
0315   05DA D7            push a
0316   05DB 11            mov a, b
0317   05DC FA FD FF      lea d, [bp + -3] ; $i
0318   05DF 2A            mov b, [d]
0319   05E0 56            add b, a
0320   05E1 E4            pop a
0321   05E2             ; END TERMS
0322   05E2 E7            pop d
0323   05E3 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0324   05E7 E4            pop a
0325   05E8 DA            push d
0326   05E9 26 00 00      mov b, $0
0327   05EC E7            pop d
0328   05ED FD 3E         mov [d], bl
0329   05EF             ;; return dest; 
0330   05EF FA 05 00      lea d, [bp + 5] ; $dest
0331   05F2 2A            mov b, [d]
0332   05F3 F9            leave
0333   05F4 09            ret
0334   05F5             
0335   05F5             strlen:
0336   05F5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0337   05F8             ;; int length; 
0338   05F8 52 02 00      sub sp, 2 ; length
0339   05FB             ;; length = 0; 
0340   05FB FA FF FF      lea d, [bp + -1] ; $length
0341   05FE DA            push d
0342   05FF 26 00 00      mov b, $0
0343   0602 E7            pop d
0344   0603 FD 43         mov [d], b
0345   0605             ;; while (str[length] != 0) { 
0346   0605             _while4_cond:
0347   0605 FA 05 00      lea d, [bp + 5] ; $str
0348   0608 FD 2A         mov d, [d]
0349   060A D7            push a
0350   060B DA            push d
0351   060C FA FF FF      lea d, [bp + -1] ; $length
0352   060F 2A            mov b, [d]
0353   0610 E7            pop d
0354   0611 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0355   0615 E4            pop a
0356   0616 32            mov bl, [d]
0357   0617 A7 00         mov bh, 0
0358   0619             ; START RELATIONAL
0359   0619 D7            push a
0360   061A 11            mov a, b
0361   061B 26 00 00      mov b, $0
0362   061E B0            cmp a, b
0363   061F FD 72         sneq ; !=
0364   0621 E4            pop a
0365   0622             ; END RELATIONAL
0366   0622 C0 00 00      cmp b, 0
0367   0625 C6 38 06      je _while4_exit
0368   0628             _while4_block:
0369   0628             ;; length++; 
0370   0628 FA FF FF      lea d, [bp + -1] ; $length
0371   062B 2A            mov b, [d]
0372   062C FD 77         inc b
0373   062E FA FF FF      lea d, [bp + -1] ; $length
0374   0631 FD 43         mov [d], b
0375   0633 FD 7D         dec b
0376   0635 0A 05 06      jmp _while4_cond
0377   0638             _while4_exit:
0378   0638             ;; return length; 
0379   0638 FA FF FF      lea d, [bp + -1] ; $length
0380   063B 2A            mov b, [d]
0381   063C F9            leave
0382   063D 09            ret
0383   063E             
0384   063E             exit:
0385   063E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0386   0641             
0387   0641             ; --- BEGIN INLINE ASM BLOCK
0388   0641 05 0B         syscall sys_terminate_proc
0389   0643             ; --- END INLINE ASM BLOCK
0390   0643             
0391   0643 F9            leave
0392   0644 09            ret
0393   0645             
0394   0645             memset:
0395   0645 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0396   0648             ;; int i; 
0397   0648 52 02 00      sub sp, 2 ; i
0398   064B             ;; for(i = 0; i < size; i++){ 
0399   064B             _for5_init:
0400   064B FA FF FF      lea d, [bp + -1] ; $i
0401   064E DA            push d
0402   064F 26 00 00      mov b, $0
0403   0652 E7            pop d
0404   0653 FD 43         mov [d], b
0405   0655             _for5_cond:
0406   0655 FA FF FF      lea d, [bp + -1] ; $i
0407   0658 2A            mov b, [d]
0408   0659             ; START RELATIONAL
0409   0659 D7            push a
0410   065A 11            mov a, b
0411   065B FA 08 00      lea d, [bp + 8] ; $size
0412   065E 2A            mov b, [d]
0413   065F B0            cmp a, b
0414   0660 FD 73         slt ; < (signed)
0415   0662 E4            pop a
0416   0663             ; END RELATIONAL
0417   0663 C0 00 00      cmp b, 0
0418   0666 C6 8F 06      je _for5_exit
0419   0669             _for5_block:
0420   0669             ;; *(s+i) = c; 
0421   0669 FA 05 00      lea d, [bp + 5] ; $s
0422   066C 2A            mov b, [d]
0423   066D             ; START TERMS
0424   066D D7            push a
0425   066E 11            mov a, b
0426   066F FA FF FF      lea d, [bp + -1] ; $i
0427   0672 2A            mov b, [d]
0428   0673 56            add b, a
0429   0674 E4            pop a
0430   0675             ; END TERMS
0431   0675 D8            push b
0432   0676 FA 07 00      lea d, [bp + 7] ; $c
0433   0679 32            mov bl, [d]
0434   067A A7 00         mov bh, 0
0435   067C E7            pop d
0436   067D FD 3E         mov [d], bl
0437   067F             _for5_update:
0438   067F FA FF FF      lea d, [bp + -1] ; $i
0439   0682 2A            mov b, [d]
0440   0683 FD 77         inc b
0441   0685 FA FF FF      lea d, [bp + -1] ; $i
0442   0688 FD 43         mov [d], b
0443   068A FD 7D         dec b
0444   068C 0A 55 06      jmp _for5_cond
0445   068F             _for5_exit:
0446   068F             ;; return s; 
0447   068F FA 05 00      lea d, [bp + 5] ; $s
0448   0692 2A            mov b, [d]
0449   0693 F9            leave
0450   0694 09            ret
0451   0695             
0452   0695             atoi:
0453   0695 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0454   0698             ;; int result = 0;  // Initialize result 
0455   0698 52 02 00      sub sp, 2 ; result
0456   069B             ; --- START LOCAL VAR INITIALIZATION
0457   069B FA FF FF      lea d, [bp + -1] ; $result
0458   069E DA            push d
0459   069F 26 00 00      mov b, $0
0460   06A2 E7            pop d
0461   06A3 FD 43         mov [d], b
0462   06A5             ; --- END LOCAL VAR INITIALIZATION
0463   06A5             ;; int sign = 1;    // Initialize sign as positive 
0464   06A5 52 02 00      sub sp, 2 ; sign
0465   06A8             ; --- START LOCAL VAR INITIALIZATION
0466   06A8 FA FD FF      lea d, [bp + -3] ; $sign
0467   06AB DA            push d
0468   06AC 26 01 00      mov b, $1
0469   06AF E7            pop d
0470   06B0 FD 43         mov [d], b
0471   06B2             ; --- END LOCAL VAR INITIALIZATION
0472   06B2             ;; while (*str == ' ') str++; 
0473   06B2             _while6_cond:
0474   06B2 FA 05 00      lea d, [bp + 5] ; $str
0475   06B5 2A            mov b, [d]
0476   06B6 74            mov d, b
0477   06B7 32            mov bl, [d]
0478   06B8 A7 00         mov bh, 0
0479   06BA             ; START RELATIONAL
0480   06BA D7            push a
0481   06BB 11            mov a, b
0482   06BC 26 20 00      mov b, $20
0483   06BF B0            cmp a, b
0484   06C0 FD 71         seq ; ==
0485   06C2 E4            pop a
0486   06C3             ; END RELATIONAL
0487   06C3 C0 00 00      cmp b, 0
0488   06C6 C6 D9 06      je _while6_exit
0489   06C9             _while6_block:
0490   06C9             ;; str++; 
0491   06C9 FA 05 00      lea d, [bp + 5] ; $str
0492   06CC 2A            mov b, [d]
0493   06CD FD 77         inc b
0494   06CF FA 05 00      lea d, [bp + 5] ; $str
0495   06D2 FD 43         mov [d], b
0496   06D4 FD 7D         dec b
0497   06D6 0A B2 06      jmp _while6_cond
0498   06D9             _while6_exit:
0499   06D9             ;; if (*str == '-' || *str == '+') { 
0500   06D9             _if7_cond:
0501   06D9 FA 05 00      lea d, [bp + 5] ; $str
0502   06DC 2A            mov b, [d]
0503   06DD 74            mov d, b
0504   06DE 32            mov bl, [d]
0505   06DF A7 00         mov bh, 0
0506   06E1             ; START RELATIONAL
0507   06E1 D7            push a
0508   06E2 11            mov a, b
0509   06E3 26 2D 00      mov b, $2d
0510   06E6 B0            cmp a, b
0511   06E7 FD 71         seq ; ==
0512   06E9 E4            pop a
0513   06EA             ; END RELATIONAL
0514   06EA             ; START LOGICAL OR
0515   06EA D7            push a
0516   06EB 11            mov a, b
0517   06EC FA 05 00      lea d, [bp + 5] ; $str
0518   06EF 2A            mov b, [d]
0519   06F0 74            mov d, b
0520   06F1 32            mov bl, [d]
0521   06F2 A7 00         mov bh, 0
0522   06F4             ; START RELATIONAL
0523   06F4 D7            push a
0524   06F5 11            mov a, b
0525   06F6 26 2B 00      mov b, $2b
0526   06F9 B0            cmp a, b
0527   06FA FD 71         seq ; ==
0528   06FC E4            pop a
0529   06FD             ; END RELATIONAL
0530   06FD FD A8         sor a, b ; ||
0531   06FF E4            pop a
0532   0700             ; END LOGICAL OR
0533   0700 C0 00 00      cmp b, 0
0534   0703 C6 3C 07      je _if7_exit
0535   0706             _if7_true:
0536   0706             ;; if (*str == '-') sign = -1; 
0537   0706             _if8_cond:
0538   0706 FA 05 00      lea d, [bp + 5] ; $str
0539   0709 2A            mov b, [d]
0540   070A 74            mov d, b
0541   070B 32            mov bl, [d]
0542   070C A7 00         mov bh, 0
0543   070E             ; START RELATIONAL
0544   070E D7            push a
0545   070F 11            mov a, b
0546   0710 26 2D 00      mov b, $2d
0547   0713 B0            cmp a, b
0548   0714 FD 71         seq ; ==
0549   0716 E4            pop a
0550   0717             ; END RELATIONAL
0551   0717 C0 00 00      cmp b, 0
0552   071A C6 2C 07      je _if8_exit
0553   071D             _if8_true:
0554   071D             ;; sign = -1; 
0555   071D FA FD FF      lea d, [bp + -3] ; $sign
0556   0720 DA            push d
0557   0721 26 01 00      mov b, $1
0558   0724 FD 97         neg b
0559   0726 E7            pop d
0560   0727 FD 43         mov [d], b
0561   0729 0A 2C 07      jmp _if8_exit
0562   072C             _if8_exit:
0563   072C             ;; str++; 
0564   072C FA 05 00      lea d, [bp + 5] ; $str
0565   072F 2A            mov b, [d]
0566   0730 FD 77         inc b
0567   0732 FA 05 00      lea d, [bp + 5] ; $str
0568   0735 FD 43         mov [d], b
0569   0737 FD 7D         dec b
0570   0739 0A 3C 07      jmp _if7_exit
0571   073C             _if7_exit:
0572   073C             ;; while (*str >= '0' && *str <= '9') { 
0573   073C             _while9_cond:
0574   073C FA 05 00      lea d, [bp + 5] ; $str
0575   073F 2A            mov b, [d]
0576   0740 74            mov d, b
0577   0741 32            mov bl, [d]
0578   0742 A7 00         mov bh, 0
0579   0744             ; START RELATIONAL
0580   0744 D7            push a
0581   0745 11            mov a, b
0582   0746 26 30 00      mov b, $30
0583   0749 B0            cmp a, b
0584   074A FD 82         sgeu ; >= (unsigned)
0585   074C E4            pop a
0586   074D             ; END RELATIONAL
0587   074D             ; START LOGICAL AND
0588   074D D7            push a
0589   074E 11            mov a, b
0590   074F FA 05 00      lea d, [bp + 5] ; $str
0591   0752 2A            mov b, [d]
0592   0753 74            mov d, b
0593   0754 32            mov bl, [d]
0594   0755 A7 00         mov bh, 0
0595   0757             ; START RELATIONAL
0596   0757 D7            push a
0597   0758 11            mov a, b
0598   0759 26 39 00      mov b, $39
0599   075C B0            cmp a, b
0600   075D FD 76         sleu ; <= (unsigned)
0601   075F E4            pop a
0602   0760             ; END RELATIONAL
0603   0760 FD A7         sand a, b
0604   0762 E4            pop a
0605   0763             ; END LOGICAL AND
0606   0763 C0 00 00      cmp b, 0
0607   0766 C6 A1 07      je _while9_exit
0608   0769             _while9_block:
0609   0769             ;; result = result * 10 + (*str - '0'); 
0610   0769 FA FF FF      lea d, [bp + -1] ; $result
0611   076C DA            push d
0612   076D FA FF FF      lea d, [bp + -1] ; $result
0613   0770 2A            mov b, [d]
0614   0771             ; START FACTORS
0615   0771 D7            push a
0616   0772 11            mov a, b
0617   0773 26 0A 00      mov b, $a
0618   0776 AC            mul a, b ; *
0619   0777 11            mov a, b
0620   0778 27            mov b, a
0621   0779 E4            pop a
0622   077A             ; END FACTORS
0623   077A             ; START TERMS
0624   077A D7            push a
0625   077B 11            mov a, b
0626   077C FA 05 00      lea d, [bp + 5] ; $str
0627   077F 2A            mov b, [d]
0628   0780 74            mov d, b
0629   0781 32            mov bl, [d]
0630   0782 A7 00         mov bh, 0
0631   0784             ; START TERMS
0632   0784 D7            push a
0633   0785 11            mov a, b
0634   0786 26 30 00      mov b, $30
0635   0789 60            sub a, b
0636   078A 27            mov b, a
0637   078B E4            pop a
0638   078C             ; END TERMS
0639   078C 56            add b, a
0640   078D E4            pop a
0641   078E             ; END TERMS
0642   078E E7            pop d
0643   078F FD 43         mov [d], b
0644   0791             ;; str++; 
0645   0791 FA 05 00      lea d, [bp + 5] ; $str
0646   0794 2A            mov b, [d]
0647   0795 FD 77         inc b
0648   0797 FA 05 00      lea d, [bp + 5] ; $str
0649   079A FD 43         mov [d], b
0650   079C FD 7D         dec b
0651   079E 0A 3C 07      jmp _while9_cond
0652   07A1             _while9_exit:
0653   07A1             ;; return sign * result; 
0654   07A1 FA FD FF      lea d, [bp + -3] ; $sign
0655   07A4 2A            mov b, [d]
0656   07A5             ; START FACTORS
0657   07A5 D7            push a
0658   07A6 11            mov a, b
0659   07A7 FA FF FF      lea d, [bp + -1] ; $result
0660   07AA 2A            mov b, [d]
0661   07AB AC            mul a, b ; *
0662   07AC 11            mov a, b
0663   07AD 27            mov b, a
0664   07AE E4            pop a
0665   07AF             ; END FACTORS
0666   07AF F9            leave
0667   07B0 09            ret
0668   07B1             
0669   07B1             rand:
0670   07B1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0671   07B4             ;; int  sec; 
0672   07B4 52 02 00      sub sp, 2 ; sec
0673   07B7             
0674   07B7             ; --- BEGIN INLINE ASM BLOCK
0675   07B7 19 00         mov al, 0
0676   07B9 05 01         syscall sys_rtc					
0677   07BB 1A            mov al, ah
0678   07BC FA FF FF      lea d, [bp + -1] ; $sec
0679   07BF 1E            mov al, [d]
0680   07C0 22 00         mov ah, 0
0681   07C2             ; --- END INLINE ASM BLOCK
0682   07C2             
0683   07C2             ;; return sec; 
0684   07C2 FA FF FF      lea d, [bp + -1] ; $sec
0685   07C5 2A            mov b, [d]
0686   07C6 F9            leave
0687   07C7 09            ret
0688   07C8             
0689   07C8             alloc:
0690   07C8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0691   07CB             ;; heap_top = heap_top + bytes; 
0692   07CB 3B BF 23      mov d, _heap_top ; $heap_top
0693   07CE DA            push d
0694   07CF 3B BF 23      mov d, _heap_top ; $heap_top
0695   07D2 2A            mov b, [d]
0696   07D3             ; START TERMS
0697   07D3 D7            push a
0698   07D4 11            mov a, b
0699   07D5 FA 05 00      lea d, [bp + 5] ; $bytes
0700   07D8 2A            mov b, [d]
0701   07D9 56            add b, a
0702   07DA E4            pop a
0703   07DB             ; END TERMS
0704   07DB E7            pop d
0705   07DC FD 43         mov [d], b
0706   07DE             ;; return heap_top - bytes; 
0707   07DE 3B BF 23      mov d, _heap_top ; $heap_top
0708   07E1 2A            mov b, [d]
0709   07E2             ; START TERMS
0710   07E2 D7            push a
0711   07E3 11            mov a, b
0712   07E4 FA 05 00      lea d, [bp + 5] ; $bytes
0713   07E7 2A            mov b, [d]
0714   07E8 60            sub a, b
0715   07E9 27            mov b, a
0716   07EA E4            pop a
0717   07EB             ; END TERMS
0718   07EB F9            leave
0719   07EC 09            ret
0720   07ED             
0721   07ED             free:
0722   07ED F8 00 00      enter 0 ; (push bp; mov bp, sp)
0723   07F0             ;; return heap_top = heap_top - bytes; 
0724   07F0 3B BF 23      mov d, _heap_top ; $heap_top
0725   07F3 DA            push d
0726   07F4 3B BF 23      mov d, _heap_top ; $heap_top
0727   07F7 2A            mov b, [d]
0728   07F8             ; START TERMS
0729   07F8 D7            push a
0730   07F9 11            mov a, b
0731   07FA FA 05 00      lea d, [bp + 5] ; $bytes
0732   07FD 2A            mov b, [d]
0733   07FE 60            sub a, b
0734   07FF 27            mov b, a
0735   0800 E4            pop a
0736   0801             ; END TERMS
0737   0801 E7            pop d
0738   0802 FD 43         mov [d], b
0739   0804 F9            leave
0740   0805 09            ret
0741   0806             
0742   0806             fopen:
0743   0806 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0744   0809             ;; FILE *fp; 
0745   0809 52 02 00      sub sp, 2 ; fp
0746   080C             ;; fp = alloc(sizeof(int)); 
0747   080C FA FF FF      lea d, [bp + -1] ; $fp
0748   080F DA            push d
0749   0810 26 02 00      mov b, 2
0750   0813 FD AB         swp b
0751   0815 D8            push b
0752   0816 07 C8 07      call alloc
0753   0819 51 02 00      add sp, 2
0754   081C E7            pop d
0755   081D FD 43         mov [d], b
0756   081F F9            leave
0757   0820 09            ret
0758   0821             
0759   0821             printf:
0760   0821 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0761   0824             ;; char *p, *format_p; 
0762   0824 52 02 00      sub sp, 2 ; p
0763   0827 52 02 00      sub sp, 2 ; format_p
0764   082A             ;; format_p = format; 
0765   082A FA FD FF      lea d, [bp + -3] ; $format_p
0766   082D DA            push d
0767   082E FA 05 00      lea d, [bp + 5] ; $format
0768   0831 2A            mov b, [d]
0769   0832 E7            pop d
0770   0833 FD 43         mov [d], b
0771   0835             ;; p = &format + 2; 
0772   0835 FA FF FF      lea d, [bp + -1] ; $p
0773   0838 DA            push d
0774   0839 FA 05 00      lea d, [bp + 5] ; $format
0775   083C 2D            mov b, d
0776   083D             ; START TERMS
0777   083D D7            push a
0778   083E 11            mov a, b
0779   083F 26 02 00      mov b, $2
0780   0842 56            add b, a
0781   0843 E4            pop a
0782   0844             ; END TERMS
0783   0844 E7            pop d
0784   0845 FD 43         mov [d], b
0785   0847             ;; for(;;){ 
0786   0847             _for10_init:
0787   0847             _for10_cond:
0788   0847             _for10_block:
0789   0847             ;; if(!*format_p) break; 
0790   0847             _if11_cond:
0791   0847 FA FD FF      lea d, [bp + -3] ; $format_p
0792   084A 2A            mov b, [d]
0793   084B 74            mov d, b
0794   084C 32            mov bl, [d]
0795   084D A7 00         mov bh, 0
0796   084F C0 00 00      cmp b, 0
0797   0852 FD 71         seq ; !
0798   0854 C0 00 00      cmp b, 0
0799   0857 C6 60 08      je _if11_else
0800   085A             _if11_true:
0801   085A             ;; break; 
0802   085A 0A 87 0A      jmp _for10_exit ; for break
0803   085D 0A 84 0A      jmp _if11_exit
0804   0860             _if11_else:
0805   0860             ;; if(*format_p == '%'){ 
0806   0860             _if12_cond:
0807   0860 FA FD FF      lea d, [bp + -3] ; $format_p
0808   0863 2A            mov b, [d]
0809   0864 74            mov d, b
0810   0865 32            mov bl, [d]
0811   0866 A7 00         mov bh, 0
0812   0868             ; START RELATIONAL
0813   0868 D7            push a
0814   0869 11            mov a, b
0815   086A 26 25 00      mov b, $25
0816   086D B0            cmp a, b
0817   086E FD 71         seq ; ==
0818   0870 E4            pop a
0819   0871             ; END RELATIONAL
0820   0871 C0 00 00      cmp b, 0
0821   0874 C6 68 0A      je _if12_else
0822   0877             _if12_true:
0823   0877             ;; format_p++; 
0824   0877 FA FD FF      lea d, [bp + -3] ; $format_p
0825   087A 2A            mov b, [d]
0826   087B FD 77         inc b
0827   087D FA FD FF      lea d, [bp + -3] ; $format_p
0828   0880 FD 43         mov [d], b
0829   0882 FD 7D         dec b
0830   0884             ;; switch(*format_p){ 
0831   0884             _switch13_expr:
0832   0884 FA FD FF      lea d, [bp + -3] ; $format_p
0833   0887 2A            mov b, [d]
0834   0888 74            mov d, b
0835   0889 32            mov bl, [d]
0836   088A A7 00         mov bh, 0
0837   088C             _switch13_comparisons:
0838   088C C1 6C         cmp bl, $6c
0839   088E C6 BA 08      je _switch13_case0
0840   0891 C1 4C         cmp bl, $4c
0841   0893 C6 BA 08      je _switch13_case1
0842   0896 C1 64         cmp bl, $64
0843   0898 C6 A8 09      je _switch13_case2
0844   089B C1 69         cmp bl, $69
0845   089D C6 A8 09      je _switch13_case3
0846   08A0 C1 75         cmp bl, $75
0847   08A2 C6 CC 09      je _switch13_case4
0848   08A5 C1 78         cmp bl, $78
0849   08A7 C6 F0 09      je _switch13_case5
0850   08AA C1 63         cmp bl, $63
0851   08AC C6 0E 0A      je _switch13_case6
0852   08AF C1 73         cmp bl, $73
0853   08B1 C6 2D 0A      je _switch13_case7
0854   08B4 0A 4C 0A      jmp _switch13_default
0855   08B7 0A 58 0A      jmp _switch13_exit
0856   08BA             _switch13_case0:
0857   08BA             _switch13_case1:
0858   08BA             ;; format_p++; 
0859   08BA FA FD FF      lea d, [bp + -3] ; $format_p
0860   08BD 2A            mov b, [d]
0861   08BE FD 77         inc b
0862   08C0 FA FD FF      lea d, [bp + -3] ; $format_p
0863   08C3 FD 43         mov [d], b
0864   08C5 FD 7D         dec b
0865   08C7             ;; if(*format_p == 'd' || *format_p == 'i') 
0866   08C7             _if14_cond:
0867   08C7 FA FD FF      lea d, [bp + -3] ; $format_p
0868   08CA 2A            mov b, [d]
0869   08CB 74            mov d, b
0870   08CC 32            mov bl, [d]
0871   08CD A7 00         mov bh, 0
0872   08CF             ; START RELATIONAL
0873   08CF D7            push a
0874   08D0 11            mov a, b
0875   08D1 26 64 00      mov b, $64
0876   08D4 B0            cmp a, b
0877   08D5 FD 71         seq ; ==
0878   08D7 E4            pop a
0879   08D8             ; END RELATIONAL
0880   08D8             ; START LOGICAL OR
0881   08D8 D7            push a
0882   08D9 11            mov a, b
0883   08DA FA FD FF      lea d, [bp + -3] ; $format_p
0884   08DD 2A            mov b, [d]
0885   08DE 74            mov d, b
0886   08DF 32            mov bl, [d]
0887   08E0 A7 00         mov bh, 0
0888   08E2             ; START RELATIONAL
0889   08E2 D7            push a
0890   08E3 11            mov a, b
0891   08E4 26 69 00      mov b, $69
0892   08E7 B0            cmp a, b
0893   08E8 FD 71         seq ; ==
0894   08EA E4            pop a
0895   08EB             ; END RELATIONAL
0896   08EB FD A8         sor a, b ; ||
0897   08ED E4            pop a
0898   08EE             ; END LOGICAL OR
0899   08EE C0 00 00      cmp b, 0
0900   08F1 C6 16 09      je _if14_else
0901   08F4             _if14_true:
0902   08F4             ;; print_signed_long(*(long *)p); 
0903   08F4 FA FF FF      lea d, [bp + -1] ; $p
0904   08F7 2A            mov b, [d]
0905   08F8 AB            snex b
0906   08F9 FD 39         mov c, b
0907   08FB 74            mov d, b
0908   08FC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0909   08FF FD 39         mov c, b ; And place it into C
0910   0901 2A            mov b, [d] ; Lower Word in B
0911   0902 FD 79         mov g, b
0912   0904 28            mov b, c
0913   0905 FD AB         swp b
0914   0907 D8            push b
0915   0908 FD 27         mov b, g
0916   090A FD AB         swp b
0917   090C D8            push b
0918   090D 07 6D 0F      call print_signed_long
0919   0910 51 04 00      add sp, 4
0920   0913 0A 93 09      jmp _if14_exit
0921   0916             _if14_else:
0922   0916             ;; if(*format_p == 'u') 
0923   0916             _if15_cond:
0924   0916 FA FD FF      lea d, [bp + -3] ; $format_p
0925   0919 2A            mov b, [d]
0926   091A 74            mov d, b
0927   091B 32            mov bl, [d]
0928   091C A7 00         mov bh, 0
0929   091E             ; START RELATIONAL
0930   091E D7            push a
0931   091F 11            mov a, b
0932   0920 26 75 00      mov b, $75
0933   0923 B0            cmp a, b
0934   0924 FD 71         seq ; ==
0935   0926 E4            pop a
0936   0927             ; END RELATIONAL
0937   0927 C0 00 00      cmp b, 0
0938   092A C6 51 09      je _if15_else
0939   092D             _if15_true:
0940   092D             ;; print_unsigned_long(*(unsigned long *)p); 
0941   092D FA FF FF      lea d, [bp + -1] ; $p
0942   0930 2A            mov b, [d]
0943   0931 A7 00         mov bh, 0
0944   0933 38 00 00      mov c, 0
0945   0936 74            mov d, b
0946   0937 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0947   093A FD 39         mov c, b ; And place it into C
0948   093C 2A            mov b, [d] ; Lower Word in B
0949   093D FD 79         mov g, b
0950   093F 28            mov b, c
0951   0940 FD AB         swp b
0952   0942 D8            push b
0953   0943 FD 27         mov b, g
0954   0945 FD AB         swp b
0955   0947 D8            push b
0956   0948 07 AD 12      call print_unsigned_long
0957   094B 51 04 00      add sp, 4
0958   094E 0A 93 09      jmp _if15_exit
0959   0951             _if15_else:
0960   0951             ;; if(*format_p == 'x') 
0961   0951             _if16_cond:
0962   0951 FA FD FF      lea d, [bp + -3] ; $format_p
0963   0954 2A            mov b, [d]
0964   0955 74            mov d, b
0965   0956 32            mov bl, [d]
0966   0957 A7 00         mov bh, 0
0967   0959             ; START RELATIONAL
0968   0959 D7            push a
0969   095A 11            mov a, b
0970   095B 26 78 00      mov b, $78
0971   095E B0            cmp a, b
0972   095F FD 71         seq ; ==
0973   0961 E4            pop a
0974   0962             ; END RELATIONAL
0975   0962 C0 00 00      cmp b, 0
0976   0965 C6 87 09      je _if16_else
0977   0968             _if16_true:
0978   0968             ;; printx32(*(long int *)p); 
0979   0968 FA FF FF      lea d, [bp + -1] ; $p
0980   096B 2A            mov b, [d]
0981   096C 74            mov d, b
0982   096D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0983   0970 FD 39         mov c, b ; And place it into C
0984   0972 2A            mov b, [d] ; Lower Word in B
0985   0973 FD 79         mov g, b
0986   0975 28            mov b, c
0987   0976 FD AB         swp b
0988   0978 D8            push b
0989   0979 FD 27         mov b, g
0990   097B FD AB         swp b
0991   097D D8            push b
0992   097E 07 E2 0C      call printx32
0993   0981 51 04 00      add sp, 4
0994   0984 0A 93 09      jmp _if16_exit
0995   0987             _if16_else:
0996   0987             ;; err("Unexpected format in printf."); 
0997   0987 26 7B 23      mov b, _s3 ; "Unexpected format in printf."
0998   098A FD AB         swp b
0999   098C D8            push b
1000   098D 07 D0 0C      call err
1001   0990 51 02 00      add sp, 2
1002   0993             _if16_exit:
1003   0993             _if15_exit:
1004   0993             _if14_exit:
1005   0993             ;; p = p + 4; 
1006   0993 FA FF FF      lea d, [bp + -1] ; $p
1007   0996 DA            push d
1008   0997 FA FF FF      lea d, [bp + -1] ; $p
1009   099A 2A            mov b, [d]
1010   099B             ; START TERMS
1011   099B D7            push a
1012   099C 11            mov a, b
1013   099D 26 04 00      mov b, $4
1014   09A0 56            add b, a
1015   09A1 E4            pop a
1016   09A2             ; END TERMS
1017   09A2 E7            pop d
1018   09A3 FD 43         mov [d], b
1019   09A5             ;; break; 
1020   09A5 0A 58 0A      jmp _switch13_exit ; case break
1021   09A8             _switch13_case2:
1022   09A8             _switch13_case3:
1023   09A8             ;; print_signed(*(int*)p); 
1024   09A8 FA FF FF      lea d, [bp + -1] ; $p
1025   09AB 2A            mov b, [d]
1026   09AC 74            mov d, b
1027   09AD 2A            mov b, [d]
1028   09AE FD AB         swp b
1029   09B0 D8            push b
1030   09B1 07 76 0E      call print_signed
1031   09B4 51 02 00      add sp, 2
1032   09B7             ;; p = p + 2; 
1033   09B7 FA FF FF      lea d, [bp + -1] ; $p
1034   09BA DA            push d
1035   09BB FA FF FF      lea d, [bp + -1] ; $p
1036   09BE 2A            mov b, [d]
1037   09BF             ; START TERMS
1038   09BF D7            push a
1039   09C0 11            mov a, b
1040   09C1 26 02 00      mov b, $2
1041   09C4 56            add b, a
1042   09C5 E4            pop a
1043   09C6             ; END TERMS
1044   09C6 E7            pop d
1045   09C7 FD 43         mov [d], b
1046   09C9             ;; break; 
1047   09C9 0A 58 0A      jmp _switch13_exit ; case break
1048   09CC             _switch13_case4:
1049   09CC             ;; print_unsigned(*(unsigned int*)p); 
1050   09CC FA FF FF      lea d, [bp + -1] ; $p
1051   09CF 2A            mov b, [d]
1052   09D0 74            mov d, b
1053   09D1 2A            mov b, [d]
1054   09D2 FD AB         swp b
1055   09D4 D8            push b
1056   09D5 07 A8 14      call print_unsigned
1057   09D8 51 02 00      add sp, 2
1058   09DB             ;; p = p + 2; 
1059   09DB FA FF FF      lea d, [bp + -1] ; $p
1060   09DE DA            push d
1061   09DF FA FF FF      lea d, [bp + -1] ; $p
1062   09E2 2A            mov b, [d]
1063   09E3             ; START TERMS
1064   09E3 D7            push a
1065   09E4 11            mov a, b
1066   09E5 26 02 00      mov b, $2
1067   09E8 56            add b, a
1068   09E9 E4            pop a
1069   09EA             ; END TERMS
1070   09EA E7            pop d
1071   09EB FD 43         mov [d], b
1072   09ED             ;; break; 
1073   09ED 0A 58 0A      jmp _switch13_exit ; case break
1074   09F0             _switch13_case5:
1075   09F0             
1076   09F0             ; --- BEGIN INLINE ASM BLOCK
1077   09F0 FA FF FF      lea d, [bp + -1] ; $p
1078   09F3 FD 2A         mov d, [d]
1079   09F5 2A            mov b, [d]
1080   09F6 07 AE 18      call print_u16x
1081   09F9             ; --- END INLINE ASM BLOCK
1082   09F9             
1083   09F9             ;; p = p + 2; 
1084   09F9 FA FF FF      lea d, [bp + -1] ; $p
1085   09FC DA            push d
1086   09FD FA FF FF      lea d, [bp + -1] ; $p
1087   0A00 2A            mov b, [d]
1088   0A01             ; START TERMS
1089   0A01 D7            push a
1090   0A02 11            mov a, b
1091   0A03 26 02 00      mov b, $2
1092   0A06 56            add b, a
1093   0A07 E4            pop a
1094   0A08             ; END TERMS
1095   0A08 E7            pop d
1096   0A09 FD 43         mov [d], b
1097   0A0B             ;; break; 
1098   0A0B 0A 58 0A      jmp _switch13_exit ; case break
1099   0A0E             _switch13_case6:
1100   0A0E             
1101   0A0E             ; --- BEGIN INLINE ASM BLOCK
1102   0A0E FA FF FF      lea d, [bp + -1] ; $p
1103   0A11 FD 2A         mov d, [d]
1104   0A13 1E            mov al, [d]
1105   0A14 23            mov ah, al
1106   0A15 07 0C 17      call _putchar
1107   0A18             ; --- END INLINE ASM BLOCK
1108   0A18             
1109   0A18             ;; p = p + 2; 
1110   0A18 FA FF FF      lea d, [bp + -1] ; $p
1111   0A1B DA            push d
1112   0A1C FA FF FF      lea d, [bp + -1] ; $p
1113   0A1F 2A            mov b, [d]
1114   0A20             ; START TERMS
1115   0A20 D7            push a
1116   0A21 11            mov a, b
1117   0A22 26 02 00      mov b, $2
1118   0A25 56            add b, a
1119   0A26 E4            pop a
1120   0A27             ; END TERMS
1121   0A27 E7            pop d
1122   0A28 FD 43         mov [d], b
1123   0A2A             ;; break; 
1124   0A2A 0A 58 0A      jmp _switch13_exit ; case break
1125   0A2D             _switch13_case7:
1126   0A2D             
1127   0A2D             ; --- BEGIN INLINE ASM BLOCK
1128   0A2D FA FF FF      lea d, [bp + -1] ; $p
1129   0A30 FD 2A         mov d, [d]
1130   0A32 FD 2A         mov d, [d]
1131   0A34 07 56 18      call _puts
1132   0A37             ; --- END INLINE ASM BLOCK
1133   0A37             
1134   0A37             ;; p = p + 2; 
1135   0A37 FA FF FF      lea d, [bp + -1] ; $p
1136   0A3A DA            push d
1137   0A3B FA FF FF      lea d, [bp + -1] ; $p
1138   0A3E 2A            mov b, [d]
1139   0A3F             ; START TERMS
1140   0A3F D7            push a
1141   0A40 11            mov a, b
1142   0A41 26 02 00      mov b, $2
1143   0A44 56            add b, a
1144   0A45 E4            pop a
1145   0A46             ; END TERMS
1146   0A46 E7            pop d
1147   0A47 FD 43         mov [d], b
1148   0A49             ;; break; 
1149   0A49 0A 58 0A      jmp _switch13_exit ; case break
1150   0A4C             _switch13_default:
1151   0A4C             ;; print("Error: Unknown argument type.\n"); 
1152   0A4C 26 98 23      mov b, _s4 ; "Error: Unknown argument type.\n"
1153   0A4F FD AB         swp b
1154   0A51 D8            push b
1155   0A52 07 C3 15      call print
1156   0A55 51 02 00      add sp, 2
1157   0A58             _switch13_exit:
1158   0A58             ;; format_p++; 
1159   0A58 FA FD FF      lea d, [bp + -3] ; $format_p
1160   0A5B 2A            mov b, [d]
1161   0A5C FD 77         inc b
1162   0A5E FA FD FF      lea d, [bp + -3] ; $format_p
1163   0A61 FD 43         mov [d], b
1164   0A63 FD 7D         dec b
1165   0A65 0A 84 0A      jmp _if12_exit
1166   0A68             _if12_else:
1167   0A68             ;; putchar(*format_p); 
1168   0A68 FA FD FF      lea d, [bp + -3] ; $format_p
1169   0A6B 2A            mov b, [d]
1170   0A6C 74            mov d, b
1171   0A6D 32            mov bl, [d]
1172   0A6E A7 00         mov bh, 0
1173   0A70 DD            push bl
1174   0A71 07 7B 15      call putchar
1175   0A74 51 01 00      add sp, 1
1176   0A77             ;; format_p++; 
1177   0A77 FA FD FF      lea d, [bp + -3] ; $format_p
1178   0A7A 2A            mov b, [d]
1179   0A7B FD 77         inc b
1180   0A7D FA FD FF      lea d, [bp + -3] ; $format_p
1181   0A80 FD 43         mov [d], b
1182   0A82 FD 7D         dec b
1183   0A84             _if12_exit:
1184   0A84             _if11_exit:
1185   0A84             _for10_update:
1186   0A84 0A 47 08      jmp _for10_cond
1187   0A87             _for10_exit:
1188   0A87 F9            leave
1189   0A88 09            ret
1190   0A89             
1191   0A89             scanf:
1192   0A89 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1193   0A8C             ;; char *p, *format_p; 
1194   0A8C 52 02 00      sub sp, 2 ; p
1195   0A8F 52 02 00      sub sp, 2 ; format_p
1196   0A92             ;; char c; 
1197   0A92 52 01 00      sub sp, 1 ; c
1198   0A95             ;; int i; 
1199   0A95 52 02 00      sub sp, 2 ; i
1200   0A98             ;; char input_string[  512                    ]; 
1201   0A98 52 00 02      sub sp, 512 ; input_string
1202   0A9B             ;; format_p = format; 
1203   0A9B FA FD FF      lea d, [bp + -3] ; $format_p
1204   0A9E DA            push d
1205   0A9F FA 05 00      lea d, [bp + 5] ; $format
1206   0AA2 2A            mov b, [d]
1207   0AA3 E7            pop d
1208   0AA4 FD 43         mov [d], b
1209   0AA6             ;; p = &format + 2; 
1210   0AA6 FA FF FF      lea d, [bp + -1] ; $p
1211   0AA9 DA            push d
1212   0AAA FA 05 00      lea d, [bp + 5] ; $format
1213   0AAD 2D            mov b, d
1214   0AAE             ; START TERMS
1215   0AAE D7            push a
1216   0AAF 11            mov a, b
1217   0AB0 26 02 00      mov b, $2
1218   0AB3 56            add b, a
1219   0AB4 E4            pop a
1220   0AB5             ; END TERMS
1221   0AB5 E7            pop d
1222   0AB6 FD 43         mov [d], b
1223   0AB8             ;; for(;;){ 
1224   0AB8             _for17_init:
1225   0AB8             _for17_cond:
1226   0AB8             _for17_block:
1227   0AB8             ;; if(!*format_p) break; 
1228   0AB8             _if18_cond:
1229   0AB8 FA FD FF      lea d, [bp + -3] ; $format_p
1230   0ABB 2A            mov b, [d]
1231   0ABC 74            mov d, b
1232   0ABD 32            mov bl, [d]
1233   0ABE A7 00         mov bh, 0
1234   0AC0 C0 00 00      cmp b, 0
1235   0AC3 FD 71         seq ; !
1236   0AC5 C0 00 00      cmp b, 0
1237   0AC8 C6 D1 0A      je _if18_else
1238   0ACB             _if18_true:
1239   0ACB             ;; break; 
1240   0ACB 0A CE 0C      jmp _for17_exit ; for break
1241   0ACE 0A CB 0C      jmp _if18_exit
1242   0AD1             _if18_else:
1243   0AD1             ;; if(*format_p == '%'){ 
1244   0AD1             _if19_cond:
1245   0AD1 FA FD FF      lea d, [bp + -3] ; $format_p
1246   0AD4 2A            mov b, [d]
1247   0AD5 74            mov d, b
1248   0AD6 32            mov bl, [d]
1249   0AD7 A7 00         mov bh, 0
1250   0AD9             ; START RELATIONAL
1251   0AD9 D7            push a
1252   0ADA 11            mov a, b
1253   0ADB 26 25 00      mov b, $25
1254   0ADE B0            cmp a, b
1255   0ADF FD 71         seq ; ==
1256   0AE1 E4            pop a
1257   0AE2             ; END RELATIONAL
1258   0AE2 C0 00 00      cmp b, 0
1259   0AE5 C6 AF 0C      je _if19_else
1260   0AE8             _if19_true:
1261   0AE8             ;; format_p++; 
1262   0AE8 FA FD FF      lea d, [bp + -3] ; $format_p
1263   0AEB 2A            mov b, [d]
1264   0AEC FD 77         inc b
1265   0AEE FA FD FF      lea d, [bp + -3] ; $format_p
1266   0AF1 FD 43         mov [d], b
1267   0AF3 FD 7D         dec b
1268   0AF5             ;; switch(*format_p){ 
1269   0AF5             _switch20_expr:
1270   0AF5 FA FD FF      lea d, [bp + -3] ; $format_p
1271   0AF8 2A            mov b, [d]
1272   0AF9 74            mov d, b
1273   0AFA 32            mov bl, [d]
1274   0AFB A7 00         mov bh, 0
1275   0AFD             _switch20_comparisons:
1276   0AFD C1 6C         cmp bl, $6c
1277   0AFF C6 2B 0B      je _switch20_case0
1278   0B02 C1 4C         cmp bl, $4c
1279   0B04 C6 2B 0B      je _switch20_case1
1280   0B07 C1 64         cmp bl, $64
1281   0B09 C6 BD 0B      je _switch20_case2
1282   0B0C C1 69         cmp bl, $69
1283   0B0E C6 BD 0B      je _switch20_case3
1284   0B11 C1 75         cmp bl, $75
1285   0B13 C6 EA 0B      je _switch20_case4
1286   0B16 C1 78         cmp bl, $78
1287   0B18 C6 17 0C      je _switch20_case5
1288   0B1B C1 63         cmp bl, $63
1289   0B1D C6 2C 0C      je _switch20_case6
1290   0B20 C1 73         cmp bl, $73
1291   0B22 C6 5B 0C      je _switch20_case7
1292   0B25 0A 93 0C      jmp _switch20_default
1293   0B28 0A 9F 0C      jmp _switch20_exit
1294   0B2B             _switch20_case0:
1295   0B2B             _switch20_case1:
1296   0B2B             ;; format_p++; 
1297   0B2B FA FD FF      lea d, [bp + -3] ; $format_p
1298   0B2E 2A            mov b, [d]
1299   0B2F FD 77         inc b
1300   0B31 FA FD FF      lea d, [bp + -3] ; $format_p
1301   0B34 FD 43         mov [d], b
1302   0B36 FD 7D         dec b
1303   0B38             ;; if(*format_p == 'd' || *format_p == 'i'); 
1304   0B38             _if21_cond:
1305   0B38 FA FD FF      lea d, [bp + -3] ; $format_p
1306   0B3B 2A            mov b, [d]
1307   0B3C 74            mov d, b
1308   0B3D 32            mov bl, [d]
1309   0B3E A7 00         mov bh, 0
1310   0B40             ; START RELATIONAL
1311   0B40 D7            push a
1312   0B41 11            mov a, b
1313   0B42 26 64 00      mov b, $64
1314   0B45 B0            cmp a, b
1315   0B46 FD 71         seq ; ==
1316   0B48 E4            pop a
1317   0B49             ; END RELATIONAL
1318   0B49             ; START LOGICAL OR
1319   0B49 D7            push a
1320   0B4A 11            mov a, b
1321   0B4B FA FD FF      lea d, [bp + -3] ; $format_p
1322   0B4E 2A            mov b, [d]
1323   0B4F 74            mov d, b
1324   0B50 32            mov bl, [d]
1325   0B51 A7 00         mov bh, 0
1326   0B53             ; START RELATIONAL
1327   0B53 D7            push a
1328   0B54 11            mov a, b
1329   0B55 26 69 00      mov b, $69
1330   0B58 B0            cmp a, b
1331   0B59 FD 71         seq ; ==
1332   0B5B E4            pop a
1333   0B5C             ; END RELATIONAL
1334   0B5C FD A8         sor a, b ; ||
1335   0B5E E4            pop a
1336   0B5F             ; END LOGICAL OR
1337   0B5F C0 00 00      cmp b, 0
1338   0B62 C6 68 0B      je _if21_else
1339   0B65             _if21_true:
1340   0B65             ;; ; 
1341   0B65 0A A8 0B      jmp _if21_exit
1342   0B68             _if21_else:
1343   0B68             ;; if(*format_p == 'u'); 
1344   0B68             _if22_cond:
1345   0B68 FA FD FF      lea d, [bp + -3] ; $format_p
1346   0B6B 2A            mov b, [d]
1347   0B6C 74            mov d, b
1348   0B6D 32            mov bl, [d]
1349   0B6E A7 00         mov bh, 0
1350   0B70             ; START RELATIONAL
1351   0B70 D7            push a
1352   0B71 11            mov a, b
1353   0B72 26 75 00      mov b, $75
1354   0B75 B0            cmp a, b
1355   0B76 FD 71         seq ; ==
1356   0B78 E4            pop a
1357   0B79             ; END RELATIONAL
1358   0B79 C0 00 00      cmp b, 0
1359   0B7C C6 82 0B      je _if22_else
1360   0B7F             _if22_true:
1361   0B7F             ;; ; 
1362   0B7F 0A A8 0B      jmp _if22_exit
1363   0B82             _if22_else:
1364   0B82             ;; if(*format_p == 'x'); 
1365   0B82             _if23_cond:
1366   0B82 FA FD FF      lea d, [bp + -3] ; $format_p
1367   0B85 2A            mov b, [d]
1368   0B86 74            mov d, b
1369   0B87 32            mov bl, [d]
1370   0B88 A7 00         mov bh, 0
1371   0B8A             ; START RELATIONAL
1372   0B8A D7            push a
1373   0B8B 11            mov a, b
1374   0B8C 26 78 00      mov b, $78
1375   0B8F B0            cmp a, b
1376   0B90 FD 71         seq ; ==
1377   0B92 E4            pop a
1378   0B93             ; END RELATIONAL
1379   0B93 C0 00 00      cmp b, 0
1380   0B96 C6 9C 0B      je _if23_else
1381   0B99             _if23_true:
1382   0B99             ;; ; 
1383   0B99 0A A8 0B      jmp _if23_exit
1384   0B9C             _if23_else:
1385   0B9C             ;; err("Unexpected format in printf."); 
1386   0B9C 26 7B 23      mov b, _s3 ; "Unexpected format in printf."
1387   0B9F FD AB         swp b
1388   0BA1 D8            push b
1389   0BA2 07 D0 0C      call err
1390   0BA5 51 02 00      add sp, 2
1391   0BA8             _if23_exit:
1392   0BA8             _if22_exit:
1393   0BA8             _if21_exit:
1394   0BA8             ;; p = p + 4; 
1395   0BA8 FA FF FF      lea d, [bp + -1] ; $p
1396   0BAB DA            push d
1397   0BAC FA FF FF      lea d, [bp + -1] ; $p
1398   0BAF 2A            mov b, [d]
1399   0BB0             ; START TERMS
1400   0BB0 D7            push a
1401   0BB1 11            mov a, b
1402   0BB2 26 04 00      mov b, $4
1403   0BB5 56            add b, a
1404   0BB6 E4            pop a
1405   0BB7             ; END TERMS
1406   0BB7 E7            pop d
1407   0BB8 FD 43         mov [d], b
1408   0BBA             ;; break; 
1409   0BBA 0A 9F 0C      jmp _switch20_exit ; case break
1410   0BBD             _switch20_case2:
1411   0BBD             _switch20_case3:
1412   0BBD             ;; i = scann(); 
1413   0BBD FA FA FF      lea d, [bp + -6] ; $i
1414   0BC0 DA            push d
1415   0BC1 07 9E 15      call scann
1416   0BC4 E7            pop d
1417   0BC5 FD 43         mov [d], b
1418   0BC7             ;; **(int **)p = i; 
1419   0BC7 FA FF FF      lea d, [bp + -1] ; $p
1420   0BCA 2A            mov b, [d]
1421   0BCB 74            mov d, b
1422   0BCC 2A            mov b, [d]
1423   0BCD D8            push b
1424   0BCE FA FA FF      lea d, [bp + -6] ; $i
1425   0BD1 2A            mov b, [d]
1426   0BD2 E7            pop d
1427   0BD3 FD 43         mov [d], b
1428   0BD5             ;; p = p + 2; 
1429   0BD5 FA FF FF      lea d, [bp + -1] ; $p
1430   0BD8 DA            push d
1431   0BD9 FA FF FF      lea d, [bp + -1] ; $p
1432   0BDC 2A            mov b, [d]
1433   0BDD             ; START TERMS
1434   0BDD D7            push a
1435   0BDE 11            mov a, b
1436   0BDF 26 02 00      mov b, $2
1437   0BE2 56            add b, a
1438   0BE3 E4            pop a
1439   0BE4             ; END TERMS
1440   0BE4 E7            pop d
1441   0BE5 FD 43         mov [d], b
1442   0BE7             ;; break; 
1443   0BE7 0A 9F 0C      jmp _switch20_exit ; case break
1444   0BEA             _switch20_case4:
1445   0BEA             ;; i = scann(); 
1446   0BEA FA FA FF      lea d, [bp + -6] ; $i
1447   0BED DA            push d
1448   0BEE 07 9E 15      call scann
1449   0BF1 E7            pop d
1450   0BF2 FD 43         mov [d], b
1451   0BF4             ;; **(int **)p = i; 
1452   0BF4 FA FF FF      lea d, [bp + -1] ; $p
1453   0BF7 2A            mov b, [d]
1454   0BF8 74            mov d, b
1455   0BF9 2A            mov b, [d]
1456   0BFA D8            push b
1457   0BFB FA FA FF      lea d, [bp + -6] ; $i
1458   0BFE 2A            mov b, [d]
1459   0BFF E7            pop d
1460   0C00 FD 43         mov [d], b
1461   0C02             ;; p = p + 2; 
1462   0C02 FA FF FF      lea d, [bp + -1] ; $p
1463   0C05 DA            push d
1464   0C06 FA FF FF      lea d, [bp + -1] ; $p
1465   0C09 2A            mov b, [d]
1466   0C0A             ; START TERMS
1467   0C0A D7            push a
1468   0C0B 11            mov a, b
1469   0C0C 26 02 00      mov b, $2
1470   0C0F 56            add b, a
1471   0C10 E4            pop a
1472   0C11             ; END TERMS
1473   0C11 E7            pop d
1474   0C12 FD 43         mov [d], b
1475   0C14             ;; break; 
1476   0C14 0A 9F 0C      jmp _switch20_exit ; case break
1477   0C17             _switch20_case5:
1478   0C17             ;; p = p + 2; 
1479   0C17 FA FF FF      lea d, [bp + -1] ; $p
1480   0C1A DA            push d
1481   0C1B FA FF FF      lea d, [bp + -1] ; $p
1482   0C1E 2A            mov b, [d]
1483   0C1F             ; START TERMS
1484   0C1F D7            push a
1485   0C20 11            mov a, b
1486   0C21 26 02 00      mov b, $2
1487   0C24 56            add b, a
1488   0C25 E4            pop a
1489   0C26             ; END TERMS
1490   0C26 E7            pop d
1491   0C27 FD 43         mov [d], b
1492   0C29             ;; break; 
1493   0C29 0A 9F 0C      jmp _switch20_exit ; case break
1494   0C2C             _switch20_case6:
1495   0C2C             ;; c = getchar(); 
1496   0C2C FA FC FF      lea d, [bp + -4] ; $c
1497   0C2F DA            push d
1498   0C30 07 88 15      call getchar
1499   0C33 E7            pop d
1500   0C34 FD 3E         mov [d], bl
1501   0C36             ;; **(char **)p = c; 
1502   0C36 FA FF FF      lea d, [bp + -1] ; $p
1503   0C39 2A            mov b, [d]
1504   0C3A 74            mov d, b
1505   0C3B 2A            mov b, [d]
1506   0C3C D8            push b
1507   0C3D FA FC FF      lea d, [bp + -4] ; $c
1508   0C40 32            mov bl, [d]
1509   0C41 A7 00         mov bh, 0
1510   0C43 E7            pop d
1511   0C44 FD 43         mov [d], b
1512   0C46             ;; p = p + 2; 
1513   0C46 FA FF FF      lea d, [bp + -1] ; $p
1514   0C49 DA            push d
1515   0C4A FA FF FF      lea d, [bp + -1] ; $p
1516   0C4D 2A            mov b, [d]
1517   0C4E             ; START TERMS
1518   0C4E D7            push a
1519   0C4F 11            mov a, b
1520   0C50 26 02 00      mov b, $2
1521   0C53 56            add b, a
1522   0C54 E4            pop a
1523   0C55             ; END TERMS
1524   0C55 E7            pop d
1525   0C56 FD 43         mov [d], b
1526   0C58             ;; break; 
1527   0C58 0A 9F 0C      jmp _switch20_exit ; case break
1528   0C5B             _switch20_case7:
1529   0C5B             ;; gets(input_string); 
1530   0C5B FA FA FD      lea d, [bp + -518] ; $input_string
1531   0C5E 2D            mov b, d
1532   0C5F FD AB         swp b
1533   0C61 D8            push b
1534   0C62 07 5C 0E      call gets
1535   0C65 51 02 00      add sp, 2
1536   0C68             ;; strcpy(*(char **)p, input_string); 
1537   0C68 FA FA FD      lea d, [bp + -518] ; $input_string
1538   0C6B 2D            mov b, d
1539   0C6C FD AB         swp b
1540   0C6E D8            push b
1541   0C6F FA FF FF      lea d, [bp + -1] ; $p
1542   0C72 2A            mov b, [d]
1543   0C73 74            mov d, b
1544   0C74 2A            mov b, [d]
1545   0C75 FD AB         swp b
1546   0C77 D8            push b
1547   0C78 07 7B 04      call strcpy
1548   0C7B 51 04 00      add sp, 4
1549   0C7E             ;; p = p + 2; 
1550   0C7E FA FF FF      lea d, [bp + -1] ; $p
1551   0C81 DA            push d
1552   0C82 FA FF FF      lea d, [bp + -1] ; $p
1553   0C85 2A            mov b, [d]
1554   0C86             ; START TERMS
1555   0C86 D7            push a
1556   0C87 11            mov a, b
1557   0C88 26 02 00      mov b, $2
1558   0C8B 56            add b, a
1559   0C8C E4            pop a
1560   0C8D             ; END TERMS
1561   0C8D E7            pop d
1562   0C8E FD 43         mov [d], b
1563   0C90             ;; break; 
1564   0C90 0A 9F 0C      jmp _switch20_exit ; case break
1565   0C93             _switch20_default:
1566   0C93             ;; print("Error: Unknown argument type.\n"); 
1567   0C93 26 98 23      mov b, _s4 ; "Error: Unknown argument type.\n"
1568   0C96 FD AB         swp b
1569   0C98 D8            push b
1570   0C99 07 C3 15      call print
1571   0C9C 51 02 00      add sp, 2
1572   0C9F             _switch20_exit:
1573   0C9F             ;; format_p++; 
1574   0C9F FA FD FF      lea d, [bp + -3] ; $format_p
1575   0CA2 2A            mov b, [d]
1576   0CA3 FD 77         inc b
1577   0CA5 FA FD FF      lea d, [bp + -3] ; $format_p
1578   0CA8 FD 43         mov [d], b
1579   0CAA FD 7D         dec b
1580   0CAC 0A CB 0C      jmp _if19_exit
1581   0CAF             _if19_else:
1582   0CAF             ;; putchar(*format_p); 
1583   0CAF FA FD FF      lea d, [bp + -3] ; $format_p
1584   0CB2 2A            mov b, [d]
1585   0CB3 74            mov d, b
1586   0CB4 32            mov bl, [d]
1587   0CB5 A7 00         mov bh, 0
1588   0CB7 DD            push bl
1589   0CB8 07 7B 15      call putchar
1590   0CBB 51 01 00      add sp, 1
1591   0CBE             ;; format_p++; 
1592   0CBE FA FD FF      lea d, [bp + -3] ; $format_p
1593   0CC1 2A            mov b, [d]
1594   0CC2 FD 77         inc b
1595   0CC4 FA FD FF      lea d, [bp + -3] ; $format_p
1596   0CC7 FD 43         mov [d], b
1597   0CC9 FD 7D         dec b
1598   0CCB             _if19_exit:
1599   0CCB             _if18_exit:
1600   0CCB             _for17_update:
1601   0CCB 0A B8 0A      jmp _for17_cond
1602   0CCE             _for17_exit:
1603   0CCE F9            leave
1604   0CCF 09            ret
1605   0CD0             
1606   0CD0             err:
1607   0CD0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1608   0CD3             ;; print(e); 
1609   0CD3 FA 05 00      lea d, [bp + 5] ; $e
1610   0CD6 2A            mov b, [d]
1611   0CD7 FD AB         swp b
1612   0CD9 D8            push b
1613   0CDA 07 C3 15      call print
1614   0CDD 51 02 00      add sp, 2
1615   0CE0 F9            leave
1616   0CE1 09            ret
1617   0CE2             
1618   0CE2             printx32:
1619   0CE2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1620   0CE5             
1621   0CE5             ; --- BEGIN INLINE ASM BLOCK
1622   0CE5 FA 05 00      lea d, [bp + 5] ; $hex
1623   0CE8 2B 02 00      mov b, [d+2]
1624   0CEB 07 AE 18      call print_u16x
1625   0CEE 2A            mov b, [d]
1626   0CEF 07 AE 18      call print_u16x
1627   0CF2             ; --- END INLINE ASM BLOCK
1628   0CF2             
1629   0CF2 F9            leave
1630   0CF3 09            ret
1631   0CF4             
1632   0CF4             printx16:
1633   0CF4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1634   0CF7             
1635   0CF7             ; --- BEGIN INLINE ASM BLOCK
1636   0CF7 FA 05 00      lea d, [bp + 5] ; $hex
1637   0CFA 2A            mov b, [d]
1638   0CFB 07 AE 18      call print_u16x
1639   0CFE             ; --- END INLINE ASM BLOCK
1640   0CFE             
1641   0CFE F9            leave
1642   0CFF 09            ret
1643   0D00             
1644   0D00             printx8:
1645   0D00 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1646   0D03             
1647   0D03             ; --- BEGIN INLINE ASM BLOCK
1648   0D03 FA 05 00      lea d, [bp + 5] ; $hex
1649   0D06 32            mov bl, [d]
1650   0D07 07 F2 18      call print_u8x
1651   0D0A             ; --- END INLINE ASM BLOCK
1652   0D0A             
1653   0D0A F9            leave
1654   0D0B 09            ret
1655   0D0C             
1656   0D0C             hex_str_to_int:
1657   0D0C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1658   0D0F             ;; int value = 0; 
1659   0D0F 52 02 00      sub sp, 2 ; value
1660   0D12             ; --- START LOCAL VAR INITIALIZATION
1661   0D12 FA FF FF      lea d, [bp + -1] ; $value
1662   0D15 DA            push d
1663   0D16 26 00 00      mov b, $0
1664   0D19 E7            pop d
1665   0D1A FD 43         mov [d], b
1666   0D1C             ; --- END LOCAL VAR INITIALIZATION
1667   0D1C             ;; int i; 
1668   0D1C 52 02 00      sub sp, 2 ; i
1669   0D1F             ;; char hex_char; 
1670   0D1F 52 01 00      sub sp, 1 ; hex_char
1671   0D22             ;; int len; 
1672   0D22 52 02 00      sub sp, 2 ; len
1673   0D25             ;; len = strlen(hex_string); 
1674   0D25 FA FA FF      lea d, [bp + -6] ; $len
1675   0D28 DA            push d
1676   0D29 FA 05 00      lea d, [bp + 5] ; $hex_string
1677   0D2C 2A            mov b, [d]
1678   0D2D FD AB         swp b
1679   0D2F D8            push b
1680   0D30 07 F5 05      call strlen
1681   0D33 51 02 00      add sp, 2
1682   0D36 E7            pop d
1683   0D37 FD 43         mov [d], b
1684   0D39             ;; for (i = 0; i < len; i++) { 
1685   0D39             _for24_init:
1686   0D39 FA FD FF      lea d, [bp + -3] ; $i
1687   0D3C DA            push d
1688   0D3D 26 00 00      mov b, $0
1689   0D40 E7            pop d
1690   0D41 FD 43         mov [d], b
1691   0D43             _for24_cond:
1692   0D43 FA FD FF      lea d, [bp + -3] ; $i
1693   0D46 2A            mov b, [d]
1694   0D47             ; START RELATIONAL
1695   0D47 D7            push a
1696   0D48 11            mov a, b
1697   0D49 FA FA FF      lea d, [bp + -6] ; $len
1698   0D4C 2A            mov b, [d]
1699   0D4D B0            cmp a, b
1700   0D4E FD 73         slt ; < (signed)
1701   0D50 E4            pop a
1702   0D51             ; END RELATIONAL
1703   0D51 C0 00 00      cmp b, 0
1704   0D54 C6 56 0E      je _for24_exit
1705   0D57             _for24_block:
1706   0D57             ;; hex_char = hex_string[i]; 
1707   0D57 FA FC FF      lea d, [bp + -4] ; $hex_char
1708   0D5A DA            push d
1709   0D5B FA 05 00      lea d, [bp + 5] ; $hex_string
1710   0D5E FD 2A         mov d, [d]
1711   0D60 D7            push a
1712   0D61 DA            push d
1713   0D62 FA FD FF      lea d, [bp + -3] ; $i
1714   0D65 2A            mov b, [d]
1715   0D66 E7            pop d
1716   0D67 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1717   0D6B E4            pop a
1718   0D6C 32            mov bl, [d]
1719   0D6D A7 00         mov bh, 0
1720   0D6F E7            pop d
1721   0D70 FD 3E         mov [d], bl
1722   0D72             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1723   0D72             _if25_cond:
1724   0D72 FA FC FF      lea d, [bp + -4] ; $hex_char
1725   0D75 32            mov bl, [d]
1726   0D76 A7 00         mov bh, 0
1727   0D78             ; START RELATIONAL
1728   0D78 D7            push a
1729   0D79 11            mov a, b
1730   0D7A 26 61 00      mov b, $61
1731   0D7D B0            cmp a, b
1732   0D7E FD 80         sge ; >=
1733   0D80 E4            pop a
1734   0D81             ; END RELATIONAL
1735   0D81             ; START LOGICAL AND
1736   0D81 D7            push a
1737   0D82 11            mov a, b
1738   0D83 FA FC FF      lea d, [bp + -4] ; $hex_char
1739   0D86 32            mov bl, [d]
1740   0D87 A7 00         mov bh, 0
1741   0D89             ; START RELATIONAL
1742   0D89 D7            push a
1743   0D8A 11            mov a, b
1744   0D8B 26 66 00      mov b, $66
1745   0D8E B0            cmp a, b
1746   0D8F FD 74         sle ; <= (signed)
1747   0D91 E4            pop a
1748   0D92             ; END RELATIONAL
1749   0D92 FD A7         sand a, b
1750   0D94 E4            pop a
1751   0D95             ; END LOGICAL AND
1752   0D95 C0 00 00      cmp b, 0
1753   0D98 C6 C9 0D      je _if25_else
1754   0D9B             _if25_true:
1755   0D9B             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1756   0D9B FA FF FF      lea d, [bp + -1] ; $value
1757   0D9E DA            push d
1758   0D9F FA FF FF      lea d, [bp + -1] ; $value
1759   0DA2 2A            mov b, [d]
1760   0DA3             ; START FACTORS
1761   0DA3 D7            push a
1762   0DA4 11            mov a, b
1763   0DA5 26 10 00      mov b, $10
1764   0DA8 AC            mul a, b ; *
1765   0DA9 11            mov a, b
1766   0DAA 27            mov b, a
1767   0DAB E4            pop a
1768   0DAC             ; END FACTORS
1769   0DAC             ; START TERMS
1770   0DAC D7            push a
1771   0DAD 11            mov a, b
1772   0DAE FA FC FF      lea d, [bp + -4] ; $hex_char
1773   0DB1 32            mov bl, [d]
1774   0DB2 A7 00         mov bh, 0
1775   0DB4             ; START TERMS
1776   0DB4 D7            push a
1777   0DB5 11            mov a, b
1778   0DB6 26 61 00      mov b, $61
1779   0DB9 60            sub a, b
1780   0DBA 27            mov b, a
1781   0DBB 11            mov a, b
1782   0DBC 26 0A 00      mov b, $a
1783   0DBF 56            add b, a
1784   0DC0 E4            pop a
1785   0DC1             ; END TERMS
1786   0DC1 56            add b, a
1787   0DC2 E4            pop a
1788   0DC3             ; END TERMS
1789   0DC3 E7            pop d
1790   0DC4 FD 43         mov [d], b
1791   0DC6 0A 46 0E      jmp _if25_exit
1792   0DC9             _if25_else:
1793   0DC9             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1794   0DC9             _if26_cond:
1795   0DC9 FA FC FF      lea d, [bp + -4] ; $hex_char
1796   0DCC 32            mov bl, [d]
1797   0DCD A7 00         mov bh, 0
1798   0DCF             ; START RELATIONAL
1799   0DCF D7            push a
1800   0DD0 11            mov a, b
1801   0DD1 26 41 00      mov b, $41
1802   0DD4 B0            cmp a, b
1803   0DD5 FD 80         sge ; >=
1804   0DD7 E4            pop a
1805   0DD8             ; END RELATIONAL
1806   0DD8             ; START LOGICAL AND
1807   0DD8 D7            push a
1808   0DD9 11            mov a, b
1809   0DDA FA FC FF      lea d, [bp + -4] ; $hex_char
1810   0DDD 32            mov bl, [d]
1811   0DDE A7 00         mov bh, 0
1812   0DE0             ; START RELATIONAL
1813   0DE0 D7            push a
1814   0DE1 11            mov a, b
1815   0DE2 26 46 00      mov b, $46
1816   0DE5 B0            cmp a, b
1817   0DE6 FD 74         sle ; <= (signed)
1818   0DE8 E4            pop a
1819   0DE9             ; END RELATIONAL
1820   0DE9 FD A7         sand a, b
1821   0DEB E4            pop a
1822   0DEC             ; END LOGICAL AND
1823   0DEC C0 00 00      cmp b, 0
1824   0DEF C6 20 0E      je _if26_else
1825   0DF2             _if26_true:
1826   0DF2             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1827   0DF2 FA FF FF      lea d, [bp + -1] ; $value
1828   0DF5 DA            push d
1829   0DF6 FA FF FF      lea d, [bp + -1] ; $value
1830   0DF9 2A            mov b, [d]
1831   0DFA             ; START FACTORS
1832   0DFA D7            push a
1833   0DFB 11            mov a, b
1834   0DFC 26 10 00      mov b, $10
1835   0DFF AC            mul a, b ; *
1836   0E00 11            mov a, b
1837   0E01 27            mov b, a
1838   0E02 E4            pop a
1839   0E03             ; END FACTORS
1840   0E03             ; START TERMS
1841   0E03 D7            push a
1842   0E04 11            mov a, b
1843   0E05 FA FC FF      lea d, [bp + -4] ; $hex_char
1844   0E08 32            mov bl, [d]
1845   0E09 A7 00         mov bh, 0
1846   0E0B             ; START TERMS
1847   0E0B D7            push a
1848   0E0C 11            mov a, b
1849   0E0D 26 41 00      mov b, $41
1850   0E10 60            sub a, b
1851   0E11 27            mov b, a
1852   0E12 11            mov a, b
1853   0E13 26 0A 00      mov b, $a
1854   0E16 56            add b, a
1855   0E17 E4            pop a
1856   0E18             ; END TERMS
1857   0E18 56            add b, a
1858   0E19 E4            pop a
1859   0E1A             ; END TERMS
1860   0E1A E7            pop d
1861   0E1B FD 43         mov [d], b
1862   0E1D 0A 46 0E      jmp _if26_exit
1863   0E20             _if26_else:
1864   0E20             ;; value = (value * 16) + (hex_char - '0'); 
1865   0E20 FA FF FF      lea d, [bp + -1] ; $value
1866   0E23 DA            push d
1867   0E24 FA FF FF      lea d, [bp + -1] ; $value
1868   0E27 2A            mov b, [d]
1869   0E28             ; START FACTORS
1870   0E28 D7            push a
1871   0E29 11            mov a, b
1872   0E2A 26 10 00      mov b, $10
1873   0E2D AC            mul a, b ; *
1874   0E2E 11            mov a, b
1875   0E2F 27            mov b, a
1876   0E30 E4            pop a
1877   0E31             ; END FACTORS
1878   0E31             ; START TERMS
1879   0E31 D7            push a
1880   0E32 11            mov a, b
1881   0E33 FA FC FF      lea d, [bp + -4] ; $hex_char
1882   0E36 32            mov bl, [d]
1883   0E37 A7 00         mov bh, 0
1884   0E39             ; START TERMS
1885   0E39 D7            push a
1886   0E3A 11            mov a, b
1887   0E3B 26 30 00      mov b, $30
1888   0E3E 60            sub a, b
1889   0E3F 27            mov b, a
1890   0E40 E4            pop a
1891   0E41             ; END TERMS
1892   0E41 56            add b, a
1893   0E42 E4            pop a
1894   0E43             ; END TERMS
1895   0E43 E7            pop d
1896   0E44 FD 43         mov [d], b
1897   0E46             _if26_exit:
1898   0E46             _if25_exit:
1899   0E46             _for24_update:
1900   0E46 FA FD FF      lea d, [bp + -3] ; $i
1901   0E49 2A            mov b, [d]
1902   0E4A FD 77         inc b
1903   0E4C FA FD FF      lea d, [bp + -3] ; $i
1904   0E4F FD 43         mov [d], b
1905   0E51 FD 7D         dec b
1906   0E53 0A 43 0D      jmp _for24_cond
1907   0E56             _for24_exit:
1908   0E56             ;; return value; 
1909   0E56 FA FF FF      lea d, [bp + -1] ; $value
1910   0E59 2A            mov b, [d]
1911   0E5A F9            leave
1912   0E5B 09            ret
1913   0E5C             
1914   0E5C             gets:
1915   0E5C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1916   0E5F             
1917   0E5F             ; --- BEGIN INLINE ASM BLOCK
1918   0E5F FA 05 00      lea d, [bp + 5] ; $s
1919   0E62 15            mov a, [d]
1920   0E63 3C            mov d, a
1921   0E64 07 13 17      call _gets
1922   0E67             ; --- END INLINE ASM BLOCK
1923   0E67             
1924   0E67             ;; return strlen(s); 
1925   0E67 FA 05 00      lea d, [bp + 5] ; $s
1926   0E6A 2A            mov b, [d]
1927   0E6B FD AB         swp b
1928   0E6D D8            push b
1929   0E6E 07 F5 05      call strlen
1930   0E71 51 02 00      add sp, 2
1931   0E74 F9            leave
1932   0E75 09            ret
1933   0E76             
1934   0E76             print_signed:
1935   0E76 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1936   0E79             ;; char digits[5]; 
1937   0E79 52 05 00      sub sp, 5 ; digits
1938   0E7C             ;; int i = 0; 
1939   0E7C 52 02 00      sub sp, 2 ; i
1940   0E7F             ; --- START LOCAL VAR INITIALIZATION
1941   0E7F FA FA FF      lea d, [bp + -6] ; $i
1942   0E82 DA            push d
1943   0E83 26 00 00      mov b, $0
1944   0E86 E7            pop d
1945   0E87 FD 43         mov [d], b
1946   0E89             ; --- END LOCAL VAR INITIALIZATION
1947   0E89             ;; if (num < 0) { 
1948   0E89             _if27_cond:
1949   0E89 FA 05 00      lea d, [bp + 5] ; $num
1950   0E8C 2A            mov b, [d]
1951   0E8D             ; START RELATIONAL
1952   0E8D D7            push a
1953   0E8E 11            mov a, b
1954   0E8F 26 00 00      mov b, $0
1955   0E92 B0            cmp a, b
1956   0E93 FD 73         slt ; < (signed)
1957   0E95 E4            pop a
1958   0E96             ; END RELATIONAL
1959   0E96 C0 00 00      cmp b, 0
1960   0E99 C6 B6 0E      je _if27_else
1961   0E9C             _if27_true:
1962   0E9C             ;; putchar('-'); 
1963   0E9C 26 2D 00      mov b, $2d
1964   0E9F DD            push bl
1965   0EA0 07 7B 15      call putchar
1966   0EA3 51 01 00      add sp, 1
1967   0EA6             ;; num = -num; 
1968   0EA6 FA 05 00      lea d, [bp + 5] ; $num
1969   0EA9 DA            push d
1970   0EAA FA 05 00      lea d, [bp + 5] ; $num
1971   0EAD 2A            mov b, [d]
1972   0EAE FD 97         neg b
1973   0EB0 E7            pop d
1974   0EB1 FD 43         mov [d], b
1975   0EB3 0A D8 0E      jmp _if27_exit
1976   0EB6             _if27_else:
1977   0EB6             ;; if (num == 0) { 
1978   0EB6             _if28_cond:
1979   0EB6 FA 05 00      lea d, [bp + 5] ; $num
1980   0EB9 2A            mov b, [d]
1981   0EBA             ; START RELATIONAL
1982   0EBA D7            push a
1983   0EBB 11            mov a, b
1984   0EBC 26 00 00      mov b, $0
1985   0EBF B0            cmp a, b
1986   0EC0 FD 71         seq ; ==
1987   0EC2 E4            pop a
1988   0EC3             ; END RELATIONAL
1989   0EC3 C0 00 00      cmp b, 0
1990   0EC6 C6 D8 0E      je _if28_exit
1991   0EC9             _if28_true:
1992   0EC9             ;; putchar('0'); 
1993   0EC9 26 30 00      mov b, $30
1994   0ECC DD            push bl
1995   0ECD 07 7B 15      call putchar
1996   0ED0 51 01 00      add sp, 1
1997   0ED3             ;; return; 
1998   0ED3 F9            leave
1999   0ED4 09            ret
2000   0ED5 0A D8 0E      jmp _if28_exit
2001   0ED8             _if28_exit:
2002   0ED8             _if27_exit:
2003   0ED8             ;; while (num > 0) { 
2004   0ED8             _while29_cond:
2005   0ED8 FA 05 00      lea d, [bp + 5] ; $num
2006   0EDB 2A            mov b, [d]
2007   0EDC             ; START RELATIONAL
2008   0EDC D7            push a
2009   0EDD 11            mov a, b
2010   0EDE 26 00 00      mov b, $0
2011   0EE1 B0            cmp a, b
2012   0EE2 FD 7F         sgt ; >
2013   0EE4 E4            pop a
2014   0EE5             ; END RELATIONAL
2015   0EE5 C0 00 00      cmp b, 0
2016   0EE8 C6 32 0F      je _while29_exit
2017   0EEB             _while29_block:
2018   0EEB             ;; digits[i] = '0' + (num % 10); 
2019   0EEB FA FC FF      lea d, [bp + -4] ; $digits
2020   0EEE D7            push a
2021   0EEF DA            push d
2022   0EF0 FA FA FF      lea d, [bp + -6] ; $i
2023   0EF3 2A            mov b, [d]
2024   0EF4 E7            pop d
2025   0EF5 5A            add d, b
2026   0EF6 E4            pop a
2027   0EF7 DA            push d
2028   0EF8 26 30 00      mov b, $30
2029   0EFB             ; START TERMS
2030   0EFB D7            push a
2031   0EFC 11            mov a, b
2032   0EFD FA 05 00      lea d, [bp + 5] ; $num
2033   0F00 2A            mov b, [d]
2034   0F01             ; START FACTORS
2035   0F01 D7            push a
2036   0F02 11            mov a, b
2037   0F03 26 0A 00      mov b, $a
2038   0F06 AE            div a, b ; 
2039   0F07 11            mov a, b
2040   0F08 27            mov b, a
2041   0F09 E4            pop a
2042   0F0A             ; END FACTORS
2043   0F0A 56            add b, a
2044   0F0B E4            pop a
2045   0F0C             ; END TERMS
2046   0F0C E7            pop d
2047   0F0D FD 3E         mov [d], bl
2048   0F0F             ;; num = num / 10; 
2049   0F0F FA 05 00      lea d, [bp + 5] ; $num
2050   0F12 DA            push d
2051   0F13 FA 05 00      lea d, [bp + 5] ; $num
2052   0F16 2A            mov b, [d]
2053   0F17             ; START FACTORS
2054   0F17 D7            push a
2055   0F18 11            mov a, b
2056   0F19 26 0A 00      mov b, $a
2057   0F1C AE            div a, b
2058   0F1D 27            mov b, a
2059   0F1E E4            pop a
2060   0F1F             ; END FACTORS
2061   0F1F E7            pop d
2062   0F20 FD 43         mov [d], b
2063   0F22             ;; i++; 
2064   0F22 FA FA FF      lea d, [bp + -6] ; $i
2065   0F25 2A            mov b, [d]
2066   0F26 FD 77         inc b
2067   0F28 FA FA FF      lea d, [bp + -6] ; $i
2068   0F2B FD 43         mov [d], b
2069   0F2D FD 7D         dec b
2070   0F2F 0A D8 0E      jmp _while29_cond
2071   0F32             _while29_exit:
2072   0F32             ;; while (i > 0) { 
2073   0F32             _while30_cond:
2074   0F32 FA FA FF      lea d, [bp + -6] ; $i
2075   0F35 2A            mov b, [d]
2076   0F36             ; START RELATIONAL
2077   0F36 D7            push a
2078   0F37 11            mov a, b
2079   0F38 26 00 00      mov b, $0
2080   0F3B B0            cmp a, b
2081   0F3C FD 7F         sgt ; >
2082   0F3E E4            pop a
2083   0F3F             ; END RELATIONAL
2084   0F3F C0 00 00      cmp b, 0
2085   0F42 C6 6B 0F      je _while30_exit
2086   0F45             _while30_block:
2087   0F45             ;; i--; 
2088   0F45 FA FA FF      lea d, [bp + -6] ; $i
2089   0F48 2A            mov b, [d]
2090   0F49 FD 7D         dec b
2091   0F4B FA FA FF      lea d, [bp + -6] ; $i
2092   0F4E FD 43         mov [d], b
2093   0F50 FD 77         inc b
2094   0F52             ;; putchar(digits[i]); 
2095   0F52 FA FC FF      lea d, [bp + -4] ; $digits
2096   0F55 D7            push a
2097   0F56 DA            push d
2098   0F57 FA FA FF      lea d, [bp + -6] ; $i
2099   0F5A 2A            mov b, [d]
2100   0F5B E7            pop d
2101   0F5C 5A            add d, b
2102   0F5D E4            pop a
2103   0F5E 32            mov bl, [d]
2104   0F5F A7 00         mov bh, 0
2105   0F61 DD            push bl
2106   0F62 07 7B 15      call putchar
2107   0F65 51 01 00      add sp, 1
2108   0F68 0A 32 0F      jmp _while30_cond
2109   0F6B             _while30_exit:
2110   0F6B F9            leave
2111   0F6C 09            ret
2112   0F6D             
2113   0F6D             print_signed_long:
2114   0F6D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2115   0F70             ;; char digits[10]; 
2116   0F70 52 0A 00      sub sp, 10 ; digits
2117   0F73             ;; int i = 0; 
2118   0F73 52 02 00      sub sp, 2 ; i
2119   0F76             ; --- START LOCAL VAR INITIALIZATION
2120   0F76 FA F5 FF      lea d, [bp + -11] ; $i
2121   0F79 DA            push d
2122   0F7A 26 00 00      mov b, $0
2123   0F7D E7            pop d
2124   0F7E FD 43         mov [d], b
2125   0F80             ; --- END LOCAL VAR INITIALIZATION
2126   0F80             ;; if (num < 0) { 
2127   0F80             _if31_cond:
2128   0F80 FA 05 00      lea d, [bp + 5] ; $num
2129   0F83 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2130   0F86 FD 39         mov c, b ; And place it into C
2131   0F88 2A            mov b, [d] ; Lower Word in B
2132   0F89             ; START RELATIONAL
2133   0F89 D7            push a
2134   0F8A FD D8         push g
2135   0F8C 11            mov a, b
2136   0F8D FD 7A         mov g, c
2137   0F8F 26 00 00      mov b, $0
2138   0F92 38 00 00      mov c, 0
2139   0F95 FD AF 00 00   cmp32 ga, cb
2139   0F99 00 00 00 00 
2139   0F9D 00 00 00 00 
2139   0FA1 00 00 00 00 
2139   0FA5 00 00 00 00 
2139   0FA9 00 00 00 00 
2139   0FAD 00 00 00 00 
2139   0FB1 00 00 00 00 
2139   0FB5 00 00 00 00 
2139   0FB9 00 00 00 00 
2139   0FBD 00 00 00 00 
2139   0FC1 00 00 00 00 
2139   0FC5 00 00 00 00 
2139   0FC9 00 00 00 00 
2139   0FCD 00 00 00 00 
2139   0FD1 00 00 00 00 
2139   0FD5 00 00 00 00 
2139   0FD9 00 00 00 00 
2139   0FDD 00 00 00 00 
2139   0FE1 00 00 00 00 
2139   0FE5 00 00 00 00 
2139   0FE9 00 00 00 00 
2139   0FED 00 00 00 00 
2139   0FF1 00 00 00 00 
2139   0FF5 00 00 00 00 
2139   0FF9 00 00 00 00 
2139   0FFD 00 00 00 00 
2139   1001 00 00 00 00 
2139   1005 00 00 00 00 
2139   1009 00 00 00 00 
2139   100D 00 00 00 00 
2139   1011 00 00 00 00 
2139   1015 00 00 00 00 
2139   1019 00 00 00 00 
2139   101D 00 00 00 00 
2139   1021 00 00 00 00 
2139   1025 00 00 00 00 
2139   1029 00 00 00 00 
2139   102D 00 00 00 00 
2139   1031 00 00 00 00 
2139   1035 00 00 00 00 
2139   1039 00 00 00 00 
2139   103D 00 00 00 00 
2139   1041 00 00 00 00 
2139   1045 00 00 00 00 
2139   1049 00 00 00 00 
2139   104D 00 00 00 00 
2139   1051 00 00 00 00 
2139   1055 00 00 00 00 
2139   1059 00 00 00 00 
2139   105D 00 00 00 00 
2139   1061 00 00 00 00 
2139   1065 00 00 00 00 
2139   1069 00 00 00 00 
2139   106D 00 00 00 00 
2139   1071 00 00 00 00 
2139   1075 00 00 00 00 
2139   1079 00 00 00 00 
2139   107D 00 00 00 00 
2139   1081 00 00 00 00 
2139   1085 00 00 00 00 
2139   1089 00 00 00 00 
2139   108D 00 00 00 00 
2139   1091 00 00 00 00 
2139   1095 00 
2140   1096 FD 73         slt ; <
2141   1098 FD F1         pop g
2142   109A E4            pop a
2143   109B             ; END RELATIONAL
2144   109B C0 00 00      cmp b, 0
2145   109E C6 C5 10      je _if31_else
2146   10A1             _if31_true:
2147   10A1             ;; putchar('-'); 
2148   10A1 26 2D 00      mov b, $2d
2149   10A4 DD            push bl
2150   10A5 07 7B 15      call putchar
2151   10A8 51 01 00      add sp, 1
2152   10AB             ;; num = -num; 
2153   10AB FA 05 00      lea d, [bp + 5] ; $num
2154   10AE DA            push d
2155   10AF FA 05 00      lea d, [bp + 5] ; $num
2156   10B2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2157   10B5 FD 39         mov c, b ; And place it into C
2158   10B7 2A            mov b, [d] ; Lower Word in B
2159   10B8 FD 97         neg b
2160   10BA E7            pop d
2161   10BB FD 43         mov [d], b
2162   10BD 28            mov b, c
2163   10BE FD 44 02 00   mov [d + 2], b
2164   10C2 0A F5 11      jmp _if31_exit
2165   10C5             _if31_else:
2166   10C5             ;; if (num == 0) { 
2167   10C5             _if32_cond:
2168   10C5 FA 05 00      lea d, [bp + 5] ; $num
2169   10C8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2170   10CB FD 39         mov c, b ; And place it into C
2171   10CD 2A            mov b, [d] ; Lower Word in B
2172   10CE             ; START RELATIONAL
2173   10CE D7            push a
2174   10CF FD D8         push g
2175   10D1 11            mov a, b
2176   10D2 FD 7A         mov g, c
2177   10D4 26 00 00      mov b, $0
2178   10D7 38 00 00      mov c, 0
2179   10DA FD AF 00 00   cmp32 ga, cb
2179   10DE 00 00 00 00 
2179   10E2 00 00 00 00 
2179   10E6 00 00 00 00 
2179   10EA 00 00 00 00 
2179   10EE 00 00 00 00 
2179   10F2 00 00 00 00 
2179   10F6 00 00 00 00 
2179   10FA 00 00 00 00 
2179   10FE 00 00 00 00 
2179   1102 00 00 00 00 
2179   1106 00 00 00 00 
2179   110A 00 00 00 00 
2179   110E 00 00 00 00 
2179   1112 00 00 00 00 
2179   1116 00 00 00 00 
2179   111A 00 00 00 00 
2179   111E 00 00 00 00 
2179   1122 00 00 00 00 
2179   1126 00 00 00 00 
2179   112A 00 00 00 00 
2179   112E 00 00 00 00 
2179   1132 00 00 00 00 
2179   1136 00 00 00 00 
2179   113A 00 00 00 00 
2179   113E 00 00 00 00 
2179   1142 00 00 00 00 
2179   1146 00 00 00 00 
2179   114A 00 00 00 00 
2179   114E 00 00 00 00 
2179   1152 00 00 00 00 
2179   1156 00 00 00 00 
2179   115A 00 00 00 00 
2179   115E 00 00 00 00 
2179   1162 00 00 00 00 
2179   1166 00 00 00 00 
2179   116A 00 00 00 00 
2179   116E 00 00 00 00 
2179   1172 00 00 00 00 
2179   1176 00 00 00 00 
2179   117A 00 00 00 00 
2179   117E 00 00 00 00 
2179   1182 00 00 00 00 
2179   1186 00 00 00 00 
2179   118A 00 00 00 00 
2179   118E 00 00 00 00 
2179   1192 00 00 00 00 
2179   1196 00 00 00 00 
2179   119A 00 00 00 00 
2179   119E 00 00 00 00 
2179   11A2 00 00 00 00 
2179   11A6 00 00 00 00 
2179   11AA 00 00 00 00 
2179   11AE 00 00 00 00 
2179   11B2 00 00 00 00 
2179   11B6 00 00 00 00 
2179   11BA 00 00 00 00 
2179   11BE 00 00 00 00 
2179   11C2 00 00 00 00 
2179   11C6 00 00 00 00 
2179   11CA 00 00 00 00 
2179   11CE 00 00 00 00 
2179   11D2 00 00 00 00 
2179   11D6 00 00 00 00 
2179   11DA 00 
2180   11DB FD 71         seq ; ==
2181   11DD FD F1         pop g
2182   11DF E4            pop a
2183   11E0             ; END RELATIONAL
2184   11E0 C0 00 00      cmp b, 0
2185   11E3 C6 F5 11      je _if32_exit
2186   11E6             _if32_true:
2187   11E6             ;; putchar('0'); 
2188   11E6 26 30 00      mov b, $30
2189   11E9 DD            push bl
2190   11EA 07 7B 15      call putchar
2191   11ED 51 01 00      add sp, 1
2192   11F0             ;; return; 
2193   11F0 F9            leave
2194   11F1 09            ret
2195   11F2 0A F5 11      jmp _if32_exit
2196   11F5             _if32_exit:
2197   11F5             _if31_exit:
2198   11F5             ;; while (num > 0) { 
2199   11F5             _while33_cond:
2200   11F5 FA 05 00      lea d, [bp + 5] ; $num
2201   11F8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2202   11FB FD 39         mov c, b ; And place it into C
2203   11FD 2A            mov b, [d] ; Lower Word in B
2204   11FE             ; START RELATIONAL
2205   11FE D7            push a
2206   11FF FD D8         push g
2207   1201 11            mov a, b
2208   1202 FD 7A         mov g, c
2209   1204 26 00 00      mov b, $0
2210   1207 38 00 00      mov c, 0
2211   120A FD 7F         sgt
2212   120C FD F1         pop g
2213   120E E4            pop a
2214   120F             ; END RELATIONAL
2215   120F C0 00 00      cmp b, 0
2216   1212 C6 72 12      je _while33_exit
2217   1215             _while33_block:
2218   1215             ;; digits[i] = '0' + (num % 10); 
2219   1215 FA F7 FF      lea d, [bp + -9] ; $digits
2220   1218 D7            push a
2221   1219 DA            push d
2222   121A FA F5 FF      lea d, [bp + -11] ; $i
2223   121D 2A            mov b, [d]
2224   121E E7            pop d
2225   121F 5A            add d, b
2226   1220 E4            pop a
2227   1221 DA            push d
2228   1222 26 30 00      mov b, $30
2229   1225             ; START TERMS
2230   1225 D7            push a
2231   1226 11            mov a, b
2232   1227 FA 05 00      lea d, [bp + 5] ; $num
2233   122A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2234   122D FD 39         mov c, b ; And place it into C
2235   122F 2A            mov b, [d] ; Lower Word in B
2236   1230             ; START FACTORS
2237   1230 D7            push a
2238   1231 11            mov a, b
2239   1232 26 0A 00      mov b, $a
2240   1235 AE            div a, b ; 
2241   1236 11            mov a, b
2242   1237 27            mov b, a
2243   1238 E4            pop a
2244   1239             ; END FACTORS
2245   1239 54            add a, b
2246   123A D7            push a
2247   123B FD 12         mov a, g
2248   123D 28            mov b, c
2249   123E 5C            adc a, b
2250   123F 39            mov c, a
2251   1240 E5            pop b
2252   1241 E4            pop a
2253   1242             ; END TERMS
2254   1242 E7            pop d
2255   1243 FD 3E         mov [d], bl
2256   1245             ;; num = num / 10; 
2257   1245 FA 05 00      lea d, [bp + 5] ; $num
2258   1248 DA            push d
2259   1249 FA 05 00      lea d, [bp + 5] ; $num
2260   124C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2261   124F FD 39         mov c, b ; And place it into C
2262   1251 2A            mov b, [d] ; Lower Word in B
2263   1252             ; START FACTORS
2264   1252 D7            push a
2265   1253 11            mov a, b
2266   1254 26 0A 00      mov b, $a
2267   1257 AE            div a, b
2268   1258 27            mov b, a
2269   1259 E4            pop a
2270   125A             ; END FACTORS
2271   125A E7            pop d
2272   125B FD 43         mov [d], b
2273   125D 28            mov b, c
2274   125E FD 44 02 00   mov [d + 2], b
2275   1262             ;; i++; 
2276   1262 FA F5 FF      lea d, [bp + -11] ; $i
2277   1265 2A            mov b, [d]
2278   1266 FD 77         inc b
2279   1268 FA F5 FF      lea d, [bp + -11] ; $i
2280   126B FD 43         mov [d], b
2281   126D FD 7D         dec b
2282   126F 0A F5 11      jmp _while33_cond
2283   1272             _while33_exit:
2284   1272             ;; while (i > 0) { 
2285   1272             _while34_cond:
2286   1272 FA F5 FF      lea d, [bp + -11] ; $i
2287   1275 2A            mov b, [d]
2288   1276             ; START RELATIONAL
2289   1276 D7            push a
2290   1277 11            mov a, b
2291   1278 26 00 00      mov b, $0
2292   127B B0            cmp a, b
2293   127C FD 7F         sgt ; >
2294   127E E4            pop a
2295   127F             ; END RELATIONAL
2296   127F C0 00 00      cmp b, 0
2297   1282 C6 AB 12      je _while34_exit
2298   1285             _while34_block:
2299   1285             ;; i--; 
2300   1285 FA F5 FF      lea d, [bp + -11] ; $i
2301   1288 2A            mov b, [d]
2302   1289 FD 7D         dec b
2303   128B FA F5 FF      lea d, [bp + -11] ; $i
2304   128E FD 43         mov [d], b
2305   1290 FD 77         inc b
2306   1292             ;; putchar(digits[i]); 
2307   1292 FA F7 FF      lea d, [bp + -9] ; $digits
2308   1295 D7            push a
2309   1296 DA            push d
2310   1297 FA F5 FF      lea d, [bp + -11] ; $i
2311   129A 2A            mov b, [d]
2312   129B E7            pop d
2313   129C 5A            add d, b
2314   129D E4            pop a
2315   129E 32            mov bl, [d]
2316   129F A7 00         mov bh, 0
2317   12A1 DD            push bl
2318   12A2 07 7B 15      call putchar
2319   12A5 51 01 00      add sp, 1
2320   12A8 0A 72 12      jmp _while34_cond
2321   12AB             _while34_exit:
2322   12AB F9            leave
2323   12AC 09            ret
2324   12AD             
2325   12AD             print_unsigned_long:
2326   12AD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2327   12B0             ;; char digits[10]; 
2328   12B0 52 0A 00      sub sp, 10 ; digits
2329   12B3             ;; int i; 
2330   12B3 52 02 00      sub sp, 2 ; i
2331   12B6             ;; i = 0; 
2332   12B6 FA F5 FF      lea d, [bp + -11] ; $i
2333   12B9 DA            push d
2334   12BA 26 00 00      mov b, $0
2335   12BD E7            pop d
2336   12BE FD 43         mov [d], b
2337   12C0             ;; if(num == 0){ 
2338   12C0             _if35_cond:
2339   12C0 FA 05 00      lea d, [bp + 5] ; $num
2340   12C3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2341   12C6 FD 39         mov c, b ; And place it into C
2342   12C8 2A            mov b, [d] ; Lower Word in B
2343   12C9             ; START RELATIONAL
2344   12C9 D7            push a
2345   12CA FD D8         push g
2346   12CC 11            mov a, b
2347   12CD FD 7A         mov g, c
2348   12CF 26 00 00      mov b, $0
2349   12D2 38 00 00      mov c, 0
2350   12D5 FD AF 00 00   cmp32 ga, cb
2350   12D9 00 00 00 00 
2350   12DD 00 00 00 00 
2350   12E1 00 00 00 00 
2350   12E5 00 00 00 00 
2350   12E9 00 00 00 00 
2350   12ED 00 00 00 00 
2350   12F1 00 00 00 00 
2350   12F5 00 00 00 00 
2350   12F9 00 00 00 00 
2350   12FD 00 00 00 00 
2350   1301 00 00 00 00 
2350   1305 00 00 00 00 
2350   1309 00 00 00 00 
2350   130D 00 00 00 00 
2350   1311 00 00 00 00 
2350   1315 00 00 00 00 
2350   1319 00 00 00 00 
2350   131D 00 00 00 00 
2350   1321 00 00 00 00 
2350   1325 00 00 00 00 
2350   1329 00 00 00 00 
2350   132D 00 00 00 00 
2350   1331 00 00 00 00 
2350   1335 00 00 00 00 
2350   1339 00 00 00 00 
2350   133D 00 00 00 00 
2350   1341 00 00 00 00 
2350   1345 00 00 00 00 
2350   1349 00 00 00 00 
2350   134D 00 00 00 00 
2350   1351 00 00 00 00 
2350   1355 00 00 00 00 
2350   1359 00 00 00 00 
2350   135D 00 00 00 00 
2350   1361 00 00 00 00 
2350   1365 00 00 00 00 
2350   1369 00 00 00 00 
2350   136D 00 00 00 00 
2350   1371 00 00 00 00 
2350   1375 00 00 00 00 
2350   1379 00 00 00 00 
2350   137D 00 00 00 00 
2350   1381 00 00 00 00 
2350   1385 00 00 00 00 
2350   1389 00 00 00 00 
2350   138D 00 00 00 00 
2350   1391 00 00 00 00 
2350   1395 00 00 00 00 
2350   1399 00 00 00 00 
2350   139D 00 00 00 00 
2350   13A1 00 00 00 00 
2350   13A5 00 00 00 00 
2350   13A9 00 00 00 00 
2350   13AD 00 00 00 00 
2350   13B1 00 00 00 00 
2350   13B5 00 00 00 00 
2350   13B9 00 00 00 00 
2350   13BD 00 00 00 00 
2350   13C1 00 00 00 00 
2350   13C5 00 00 00 00 
2350   13C9 00 00 00 00 
2350   13CD 00 00 00 00 
2350   13D1 00 00 00 00 
2350   13D5 00 
2351   13D6 FD 71         seq ; ==
2352   13D8 FD F1         pop g
2353   13DA E4            pop a
2354   13DB             ; END RELATIONAL
2355   13DB C0 00 00      cmp b, 0
2356   13DE C6 F0 13      je _if35_exit
2357   13E1             _if35_true:
2358   13E1             ;; putchar('0'); 
2359   13E1 26 30 00      mov b, $30
2360   13E4 DD            push bl
2361   13E5 07 7B 15      call putchar
2362   13E8 51 01 00      add sp, 1
2363   13EB             ;; return; 
2364   13EB F9            leave
2365   13EC 09            ret
2366   13ED 0A F0 13      jmp _if35_exit
2367   13F0             _if35_exit:
2368   13F0             ;; while (num > 0) { 
2369   13F0             _while36_cond:
2370   13F0 FA 05 00      lea d, [bp + 5] ; $num
2371   13F3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2372   13F6 FD 39         mov c, b ; And place it into C
2373   13F8 2A            mov b, [d] ; Lower Word in B
2374   13F9             ; START RELATIONAL
2375   13F9 D7            push a
2376   13FA FD D8         push g
2377   13FC 11            mov a, b
2378   13FD FD 7A         mov g, c
2379   13FF 26 00 00      mov b, $0
2380   1402 38 00 00      mov c, 0
2381   1405 FD 81         sgu
2382   1407 FD F1         pop g
2383   1409 E4            pop a
2384   140A             ; END RELATIONAL
2385   140A C0 00 00      cmp b, 0
2386   140D C6 6D 14      je _while36_exit
2387   1410             _while36_block:
2388   1410             ;; digits[i] = '0' + (num % 10); 
2389   1410 FA F7 FF      lea d, [bp + -9] ; $digits
2390   1413 D7            push a
2391   1414 DA            push d
2392   1415 FA F5 FF      lea d, [bp + -11] ; $i
2393   1418 2A            mov b, [d]
2394   1419 E7            pop d
2395   141A 5A            add d, b
2396   141B E4            pop a
2397   141C DA            push d
2398   141D 26 30 00      mov b, $30
2399   1420             ; START TERMS
2400   1420 D7            push a
2401   1421 11            mov a, b
2402   1422 FA 05 00      lea d, [bp + 5] ; $num
2403   1425 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2404   1428 FD 39         mov c, b ; And place it into C
2405   142A 2A            mov b, [d] ; Lower Word in B
2406   142B             ; START FACTORS
2407   142B D7            push a
2408   142C 11            mov a, b
2409   142D 26 0A 00      mov b, $a
2410   1430 AE            div a, b ; 
2411   1431 11            mov a, b
2412   1432 27            mov b, a
2413   1433 E4            pop a
2414   1434             ; END FACTORS
2415   1434 54            add a, b
2416   1435 D7            push a
2417   1436 FD 12         mov a, g
2418   1438 28            mov b, c
2419   1439 5C            adc a, b
2420   143A 39            mov c, a
2421   143B E5            pop b
2422   143C E4            pop a
2423   143D             ; END TERMS
2424   143D E7            pop d
2425   143E FD 3E         mov [d], bl
2426   1440             ;; num = num / 10; 
2427   1440 FA 05 00      lea d, [bp + 5] ; $num
2428   1443 DA            push d
2429   1444 FA 05 00      lea d, [bp + 5] ; $num
2430   1447 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2431   144A FD 39         mov c, b ; And place it into C
2432   144C 2A            mov b, [d] ; Lower Word in B
2433   144D             ; START FACTORS
2434   144D D7            push a
2435   144E 11            mov a, b
2436   144F 26 0A 00      mov b, $a
2437   1452 AE            div a, b
2438   1453 27            mov b, a
2439   1454 E4            pop a
2440   1455             ; END FACTORS
2441   1455 E7            pop d
2442   1456 FD 43         mov [d], b
2443   1458 28            mov b, c
2444   1459 FD 44 02 00   mov [d + 2], b
2445   145D             ;; i++; 
2446   145D FA F5 FF      lea d, [bp + -11] ; $i
2447   1460 2A            mov b, [d]
2448   1461 FD 77         inc b
2449   1463 FA F5 FF      lea d, [bp + -11] ; $i
2450   1466 FD 43         mov [d], b
2451   1468 FD 7D         dec b
2452   146A 0A F0 13      jmp _while36_cond
2453   146D             _while36_exit:
2454   146D             ;; while (i > 0) { 
2455   146D             _while37_cond:
2456   146D FA F5 FF      lea d, [bp + -11] ; $i
2457   1470 2A            mov b, [d]
2458   1471             ; START RELATIONAL
2459   1471 D7            push a
2460   1472 11            mov a, b
2461   1473 26 00 00      mov b, $0
2462   1476 B0            cmp a, b
2463   1477 FD 7F         sgt ; >
2464   1479 E4            pop a
2465   147A             ; END RELATIONAL
2466   147A C0 00 00      cmp b, 0
2467   147D C6 A6 14      je _while37_exit
2468   1480             _while37_block:
2469   1480             ;; i--; 
2470   1480 FA F5 FF      lea d, [bp + -11] ; $i
2471   1483 2A            mov b, [d]
2472   1484 FD 7D         dec b
2473   1486 FA F5 FF      lea d, [bp + -11] ; $i
2474   1489 FD 43         mov [d], b
2475   148B FD 77         inc b
2476   148D             ;; putchar(digits[i]); 
2477   148D FA F7 FF      lea d, [bp + -9] ; $digits
2478   1490 D7            push a
2479   1491 DA            push d
2480   1492 FA F5 FF      lea d, [bp + -11] ; $i
2481   1495 2A            mov b, [d]
2482   1496 E7            pop d
2483   1497 5A            add d, b
2484   1498 E4            pop a
2485   1499 32            mov bl, [d]
2486   149A A7 00         mov bh, 0
2487   149C DD            push bl
2488   149D 07 7B 15      call putchar
2489   14A0 51 01 00      add sp, 1
2490   14A3 0A 6D 14      jmp _while37_cond
2491   14A6             _while37_exit:
2492   14A6 F9            leave
2493   14A7 09            ret
2494   14A8             
2495   14A8             print_unsigned:
2496   14A8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2497   14AB             ;; char digits[5]; 
2498   14AB 52 05 00      sub sp, 5 ; digits
2499   14AE             ;; int i; 
2500   14AE 52 02 00      sub sp, 2 ; i
2501   14B1             ;; i = 0; 
2502   14B1 FA FA FF      lea d, [bp + -6] ; $i
2503   14B4 DA            push d
2504   14B5 26 00 00      mov b, $0
2505   14B8 E7            pop d
2506   14B9 FD 43         mov [d], b
2507   14BB             ;; if(num == 0){ 
2508   14BB             _if38_cond:
2509   14BB FA 05 00      lea d, [bp + 5] ; $num
2510   14BE 2A            mov b, [d]
2511   14BF             ; START RELATIONAL
2512   14BF D7            push a
2513   14C0 11            mov a, b
2514   14C1 26 00 00      mov b, $0
2515   14C4 B0            cmp a, b
2516   14C5 FD 71         seq ; ==
2517   14C7 E4            pop a
2518   14C8             ; END RELATIONAL
2519   14C8 C0 00 00      cmp b, 0
2520   14CB C6 DD 14      je _if38_exit
2521   14CE             _if38_true:
2522   14CE             ;; putchar('0'); 
2523   14CE 26 30 00      mov b, $30
2524   14D1 DD            push bl
2525   14D2 07 7B 15      call putchar
2526   14D5 51 01 00      add sp, 1
2527   14D8             ;; return; 
2528   14D8 F9            leave
2529   14D9 09            ret
2530   14DA 0A DD 14      jmp _if38_exit
2531   14DD             _if38_exit:
2532   14DD             ;; while (num > 0) { 
2533   14DD             _while39_cond:
2534   14DD FA 05 00      lea d, [bp + 5] ; $num
2535   14E0 2A            mov b, [d]
2536   14E1             ; START RELATIONAL
2537   14E1 D7            push a
2538   14E2 11            mov a, b
2539   14E3 26 00 00      mov b, $0
2540   14E6 B0            cmp a, b
2541   14E7 FD 81         sgu ; > (unsigned)
2542   14E9 E4            pop a
2543   14EA             ; END RELATIONAL
2544   14EA C0 00 00      cmp b, 0
2545   14ED C6 37 15      je _while39_exit
2546   14F0             _while39_block:
2547   14F0             ;; digits[i] = '0' + (num % 10); 
2548   14F0 FA FC FF      lea d, [bp + -4] ; $digits
2549   14F3 D7            push a
2550   14F4 DA            push d
2551   14F5 FA FA FF      lea d, [bp + -6] ; $i
2552   14F8 2A            mov b, [d]
2553   14F9 E7            pop d
2554   14FA 5A            add d, b
2555   14FB E4            pop a
2556   14FC DA            push d
2557   14FD 26 30 00      mov b, $30
2558   1500             ; START TERMS
2559   1500 D7            push a
2560   1501 11            mov a, b
2561   1502 FA 05 00      lea d, [bp + 5] ; $num
2562   1505 2A            mov b, [d]
2563   1506             ; START FACTORS
2564   1506 D7            push a
2565   1507 11            mov a, b
2566   1508 26 0A 00      mov b, $a
2567   150B AE            div a, b ; 
2568   150C 11            mov a, b
2569   150D 27            mov b, a
2570   150E E4            pop a
2571   150F             ; END FACTORS
2572   150F 56            add b, a
2573   1510 E4            pop a
2574   1511             ; END TERMS
2575   1511 E7            pop d
2576   1512 FD 3E         mov [d], bl
2577   1514             ;; num = num / 10; 
2578   1514 FA 05 00      lea d, [bp + 5] ; $num
2579   1517 DA            push d
2580   1518 FA 05 00      lea d, [bp + 5] ; $num
2581   151B 2A            mov b, [d]
2582   151C             ; START FACTORS
2583   151C D7            push a
2584   151D 11            mov a, b
2585   151E 26 0A 00      mov b, $a
2586   1521 AE            div a, b
2587   1522 27            mov b, a
2588   1523 E4            pop a
2589   1524             ; END FACTORS
2590   1524 E7            pop d
2591   1525 FD 43         mov [d], b
2592   1527             ;; i++; 
2593   1527 FA FA FF      lea d, [bp + -6] ; $i
2594   152A 2A            mov b, [d]
2595   152B FD 77         inc b
2596   152D FA FA FF      lea d, [bp + -6] ; $i
2597   1530 FD 43         mov [d], b
2598   1532 FD 7D         dec b
2599   1534 0A DD 14      jmp _while39_cond
2600   1537             _while39_exit:
2601   1537             ;; while (i > 0) { 
2602   1537             _while40_cond:
2603   1537 FA FA FF      lea d, [bp + -6] ; $i
2604   153A 2A            mov b, [d]
2605   153B             ; START RELATIONAL
2606   153B D7            push a
2607   153C 11            mov a, b
2608   153D 26 00 00      mov b, $0
2609   1540 B0            cmp a, b
2610   1541 FD 7F         sgt ; >
2611   1543 E4            pop a
2612   1544             ; END RELATIONAL
2613   1544 C0 00 00      cmp b, 0
2614   1547 C6 70 15      je _while40_exit
2615   154A             _while40_block:
2616   154A             ;; i--; 
2617   154A FA FA FF      lea d, [bp + -6] ; $i
2618   154D 2A            mov b, [d]
2619   154E FD 7D         dec b
2620   1550 FA FA FF      lea d, [bp + -6] ; $i
2621   1553 FD 43         mov [d], b
2622   1555 FD 77         inc b
2623   1557             ;; putchar(digits[i]); 
2624   1557 FA FC FF      lea d, [bp + -4] ; $digits
2625   155A D7            push a
2626   155B DA            push d
2627   155C FA FA FF      lea d, [bp + -6] ; $i
2628   155F 2A            mov b, [d]
2629   1560 E7            pop d
2630   1561 5A            add d, b
2631   1562 E4            pop a
2632   1563 32            mov bl, [d]
2633   1564 A7 00         mov bh, 0
2634   1566 DD            push bl
2635   1567 07 7B 15      call putchar
2636   156A 51 01 00      add sp, 1
2637   156D 0A 37 15      jmp _while40_cond
2638   1570             _while40_exit:
2639   1570 F9            leave
2640   1571 09            ret
2641   1572             
2642   1572             date:
2643   1572 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2644   1575             
2645   1575             ; --- BEGIN INLINE ASM BLOCK
2646   1575 19 00         mov al, 0 
2647   1577 05 07         syscall sys_datetime
2648   1579             ; --- END INLINE ASM BLOCK
2649   1579             
2650   1579 F9            leave
2651   157A 09            ret
2652   157B             
2653   157B             putchar:
2654   157B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2655   157E             
2656   157E             ; --- BEGIN INLINE ASM BLOCK
2657   157E FA 05 00      lea d, [bp + 5] ; $c
2658   1581 1E            mov al, [d]
2659   1582 23            mov ah, al
2660   1583 07 0C 17      call _putchar
2661   1586             ; --- END INLINE ASM BLOCK
2662   1586             
2663   1586 F9            leave
2664   1587 09            ret
2665   1588             
2666   1588             getchar:
2667   1588 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2668   158B             ;; char c; 
2669   158B 52 01 00      sub sp, 1 ; c
2670   158E             
2671   158E             ; --- BEGIN INLINE ASM BLOCK
2672   158E 07 05 17      call getch
2673   1591 1A            mov al, ah
2674   1592 FA 00 00      lea d, [bp + 0] ; $c
2675   1595 3E            mov [d], al
2676   1596             ; --- END INLINE ASM BLOCK
2677   1596             
2678   1596             ;; return c; 
2679   1596 FA 00 00      lea d, [bp + 0] ; $c
2680   1599 32            mov bl, [d]
2681   159A A7 00         mov bh, 0
2682   159C F9            leave
2683   159D 09            ret
2684   159E             
2685   159E             scann:
2686   159E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2687   15A1             ;; int m; 
2688   15A1 52 02 00      sub sp, 2 ; m
2689   15A4             
2690   15A4             ; --- BEGIN INLINE ASM BLOCK
2691   15A4 07 50 19      call scan_u16d
2692   15A7 FA FF FF      lea d, [bp + -1] ; $m
2693   15AA 43            mov [d], a
2694   15AB             ; --- END INLINE ASM BLOCK
2695   15AB             
2696   15AB             ;; return m; 
2697   15AB FA FF FF      lea d, [bp + -1] ; $m
2698   15AE 2A            mov b, [d]
2699   15AF F9            leave
2700   15B0 09            ret
2701   15B1             
2702   15B1             puts:
2703   15B1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2704   15B4             
2705   15B4             ; --- BEGIN INLINE ASM BLOCK
2706   15B4 FA 05 00      lea d, [bp + 5] ; $s
2707   15B7 15            mov a, [d]
2708   15B8 3C            mov d, a
2709   15B9 07 56 18      call _puts
2710   15BC 10 00 0A      mov a, $0A00
2711   15BF 05 03         syscall sys_io
2712   15C1             ; --- END INLINE ASM BLOCK
2713   15C1             
2714   15C1 F9            leave
2715   15C2 09            ret
2716   15C3             
2717   15C3             print:
2718   15C3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2719   15C6             
2720   15C6             ; --- BEGIN INLINE ASM BLOCK
2721   15C6 FA 05 00      lea d, [bp + 5] ; $s
2722   15C9 FD 2A         mov d, [d]
2723   15CB 07 56 18      call _puts
2724   15CE             ; --- END INLINE ASM BLOCK
2725   15CE             
2726   15CE F9            leave
2727   15CF 09            ret
2728   15D0             
2729   15D0             getparam:
2730   15D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2731   15D3             ;; char data; 
2732   15D3 52 01 00      sub sp, 1 ; data
2733   15D6             
2734   15D6             ; --- BEGIN INLINE ASM BLOCK
2735   15D6 19 04         mov al, 4
2736   15D8 FA 05 00      lea d, [bp + 5] ; $address
2737   15DB FD 2A         mov d, [d]
2738   15DD 05 0C         syscall sys_system
2739   15DF FA 00 00      lea d, [bp + 0] ; $data
2740   15E2 FD 3E         mov [d], bl
2741   15E4             ; --- END INLINE ASM BLOCK
2742   15E4             
2743   15E4             ;; return data; 
2744   15E4 FA 00 00      lea d, [bp + 0] ; $data
2745   15E7 32            mov bl, [d]
2746   15E8 A7 00         mov bh, 0
2747   15EA F9            leave
2748   15EB 09            ret
2749   15EC             
2750   15EC             clear:
2751   15EC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2752   15EF             ;; print("\033[2J\033[H"); 
2753   15EF 26 B7 23      mov b, _s5 ; "\033[2J\033[H"
2754   15F2 FD AB         swp b
2755   15F4 D8            push b
2756   15F5 07 C3 15      call print
2757   15F8 51 02 00      add sp, 2
2758   15FB F9            leave
2759   15FC 09            ret
2760   15FD             
2761   15FD             abs:
2762   15FD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2763   1600             ;; return i < 0 ? -i : i; 
2764   1600             _ternary41_cond:
2765   1600 FA 05 00      lea d, [bp + 5] ; $i
2766   1603 2A            mov b, [d]
2767   1604             ; START RELATIONAL
2768   1604 D7            push a
2769   1605 11            mov a, b
2770   1606 26 00 00      mov b, $0
2771   1609 B0            cmp a, b
2772   160A FD 73         slt ; < (signed)
2773   160C E4            pop a
2774   160D             ; END RELATIONAL
2775   160D C0 00 00      cmp b, 0
2776   1610 C6 1C 16      je _ternary41_false
2777   1613             _ternary41_true:
2778   1613 FA 05 00      lea d, [bp + 5] ; $i
2779   1616 2A            mov b, [d]
2780   1617 FD 97         neg b
2781   1619 0A 20 16      jmp _ternary41_exit
2782   161C             _ternary41_false:
2783   161C FA 05 00      lea d, [bp + 5] ; $i
2784   161F 2A            mov b, [d]
2785   1620             _ternary41_exit:
2786   1620 F9            leave
2787   1621 09            ret
2788   1622             
2789   1622             include_stdio_asm:
2790   1622 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2791   1625             
2792   1625             ; --- BEGIN INLINE ASM BLOCK
2793   1625             .include "lib/asm/stdio.asm"
0001+  1625             ;-----------------------------------------------------------------------------
0002+  1625             ; stdio.s
0003+  1625             ;-----------------------------------------------------------------------------
0004+  1625             .include "lib/asm/string.asm"
0001++ 1625             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1625             ; string.s
0003++ 1625             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1625             
0005++ 1625             
0006++ 1625             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1625             ; _strrev
0008++ 1625             ; reverse a string
0009++ 1625             ; D = string address
0010++ 1625             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1625             ; 01234
0012++ 1625             _strrev:
0013++ 1625 4B          	pusha
0014++ 1626 07 6C 16    	call _strlen	; length in C
0015++ 1629 12          	mov a, c
0016++ 162A AF 01 00    	cmp a, 1
0017++ 162D D0 47 16    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1630 7D          	dec a
0019++ 1631 FD 4E       	mov si, d	; beginning of string
0020++ 1633 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1635 59          	add d, a	; end of string
0022++ 1636 12          	mov a, c
0023++ 1637 FD 9B       	shr a		; divide by 2
0024++ 1639 39          	mov c, a	; C now counts the steps
0025++ 163A             _strrev_L0:
0026++ 163A 32          	mov bl, [d]	; save load right-side char into BL
0027++ 163B F6          	lodsb		; load left-side char into AL; increase SI
0028++ 163C 3E          	mov [d], al	; store left char into right side
0029++ 163D 1B          	mov al, bl
0030++ 163E F7          	stosb		; store right-side char into left-side; increase DI
0031++ 163F 7E          	dec c
0032++ 1640 7F          	dec d
0033++ 1641 C2 00 00    	cmp c, 0
0034++ 1644 C7 3A 16    	jne _strrev_L0
0035++ 1647             _strrev_end:
0036++ 1647 4C          	popa
0037++ 1648 09          	ret
0038++ 1649             	
0039++ 1649             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1649             ; _strchr
0041++ 1649             ; search string in D for char in AL
0042++ 1649             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1649             _strchr:
0044++ 1649             _strchr_L0:
0045++ 1649 32          	mov bl, [d]
0046++ 164A C1 00       	cmp bl, 0
0047++ 164C C6 57 16    	je _strchr_end
0048++ 164F BA          	cmp al, bl
0049++ 1650 C6 57 16    	je _strchr_end
0050++ 1653 79          	inc d
0051++ 1654 0A 49 16    	jmp _strchr_L0
0052++ 1657             _strchr_end:
0053++ 1657 1B          	mov al, bl
0054++ 1658 09          	ret
0055++ 1659             
0056++ 1659             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1659             ; _strstr
0058++ 1659             ; find sub-string
0059++ 1659             ; str1 in SI
0060++ 1659             ; str2 in DI
0061++ 1659             ; SI points to end of source string
0062++ 1659             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1659             _strstr:
0064++ 1659 DB          	push al
0065++ 165A DA          	push d
0066++ 165B E3          	push di
0067++ 165C             _strstr_loop:
0068++ 165C F3          	cmpsb					; compare a byte of the strings
0069++ 165D C7 68 16    	jne _strstr_ret
0070++ 1660 FC 00 00    	lea d, [di + 0]
0071++ 1663 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1665 C7 5C 16    	jne _strstr_loop				; equal chars but not at end
0073++ 1668             _strstr_ret:
0074++ 1668 F0          	pop di
0075++ 1669 E7          	pop d
0076++ 166A E8          	pop al
0077++ 166B 09          	ret
0078++ 166C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 166C             ; length of null terminated string
0080++ 166C             ; result in C
0081++ 166C             ; pointer in D
0082++ 166C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 166C             _strlen:
0084++ 166C DA          	push d
0085++ 166D 38 00 00    	mov c, 0
0086++ 1670             _strlen_L1:
0087++ 1670 BD 00       	cmp byte [d], 0
0088++ 1672 C6 7A 16    	je _strlen_ret
0089++ 1675 79          	inc d
0090++ 1676 78          	inc c
0091++ 1677 0A 70 16    	jmp _strlen_L1
0092++ 167A             _strlen_ret:
0093++ 167A E7          	pop d
0094++ 167B 09          	ret
0095++ 167C             
0096++ 167C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 167C             ; STRCMP
0098++ 167C             ; compare two strings
0099++ 167C             ; str1 in SI
0100++ 167C             ; str2 in DI
0101++ 167C             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 167C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 167C             _strcmp:
0104++ 167C DB          	push al
0105++ 167D DA          	push d
0106++ 167E E3          	push di
0107++ 167F E2          	push si
0108++ 1680             _strcmp_loop:
0109++ 1680 F3          	cmpsb					; compare a byte of the strings
0110++ 1681 C7 8C 16    	jne _strcmp_ret
0111++ 1684 FB FF FF    	lea d, [si +- 1]
0112++ 1687 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1689 C7 80 16    	jne _strcmp_loop				; equal chars but not at end
0114++ 168C             _strcmp_ret:
0115++ 168C EF          	pop si
0116++ 168D F0          	pop di
0117++ 168E E7          	pop d
0118++ 168F E8          	pop al
0119++ 1690 09          	ret
0120++ 1691             
0121++ 1691             
0122++ 1691             ; STRCPY
0123++ 1691             ; copy null terminated string from SI to DI
0124++ 1691             ; source in SI
0125++ 1691             ; destination in DI
0126++ 1691             _strcpy:
0127++ 1691 E2          	push si
0128++ 1692 E3          	push di
0129++ 1693 DB          	push al
0130++ 1694             _strcpy_L1:
0131++ 1694 F6          	lodsb
0132++ 1695 F7          	stosb
0133++ 1696 B9 00       	cmp al, 0
0134++ 1698 C7 94 16    	jne _strcpy_L1
0135++ 169B             _strcpy_end:
0136++ 169B E8          	pop al
0137++ 169C F0          	pop di
0138++ 169D EF          	pop si
0139++ 169E 09          	ret
0140++ 169F             
0141++ 169F             ; STRCAT
0142++ 169F             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 169F             ; source in SI
0144++ 169F             ; destination in DI
0145++ 169F             _strcat:
0146++ 169F E2          	push si
0147++ 16A0 E3          	push di
0148++ 16A1 D7          	push a
0149++ 16A2 DA          	push d
0150++ 16A3 50          	mov a, di
0151++ 16A4 3C          	mov d, a
0152++ 16A5             _strcat_goto_end_L1:
0153++ 16A5 BD 00       	cmp byte[d], 0
0154++ 16A7 C6 AE 16    	je _strcat_start
0155++ 16AA 79          	inc d
0156++ 16AB 0A A5 16    	jmp _strcat_goto_end_L1
0157++ 16AE             _strcat_start:
0158++ 16AE FD 50       	mov di, d
0159++ 16B0             _strcat_L1:
0160++ 16B0 F6          	lodsb
0161++ 16B1 F7          	stosb
0162++ 16B2 B9 00       	cmp al, 0
0163++ 16B4 C7 B0 16    	jne _strcat_L1
0164++ 16B7             _strcat_end:
0165++ 16B7 E7          	pop d
0166++ 16B8 E4          	pop a
0167++ 16B9 F0          	pop di
0168++ 16BA EF          	pop si
0169++ 16BB 09          	ret
0170++ 16BC             
0171++ 16BC             
0005+  16BC             
0006+  16BC             ;-----------------------------------------------------------------------------
0007+  16BC             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  16BC             ; ASCII in BL
0009+  16BC             ; result in AL
0010+  16BC             ; ascii for F = 0100 0110
0011+  16BC             ; ascii for 9 = 0011 1001
0012+  16BC             ;-----------------------------------------------------------------------------
0013+  16BC             hex_ascii_encode:
0014+  16BC 1B            mov al, bl
0015+  16BD 93 40         test al, $40        ; test if letter or number
0016+  16BF C7 C5 16      jnz hex_letter
0017+  16C2 87 0F         and al, $0F        ; get number
0018+  16C4 09            ret
0019+  16C5             hex_letter:
0020+  16C5 87 0F         and al, $0F        ; get letter
0021+  16C7 6A 09         add al, 9
0022+  16C9 09            ret
0023+  16CA             
0024+  16CA             ;-----------------------------------------------------------------------------
0025+  16CA             ; ATOI
0026+  16CA             ; 2 letter hex string in B
0027+  16CA             ; 8bit integer returned in AL
0028+  16CA             ;-----------------------------------------------------------------------------
0029+  16CA             _atoi:
0030+  16CA D8            push b
0031+  16CB 07 BC 16      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  16CE 30            mov bl, bh
0033+  16CF DB            push al          ; save a
0034+  16D0 07 BC 16      call hex_ascii_encode
0035+  16D3 EA            pop bl  
0036+  16D4 FD 9E 04      shl al, 4
0037+  16D7 8C            or al, bl
0038+  16D8 E5            pop b
0039+  16D9 09            ret  
0040+  16DA             
0041+  16DA             
0042+  16DA             ;-----------------------------------------------------------------------------
0043+  16DA             ; ITOA
0044+  16DA             ; 8bit value in BL
0045+  16DA             ; 2 byte ASCII result in A
0046+  16DA             ;-----------------------------------------------------------------------------
0047+  16DA             _itoa:
0048+  16DA DA            push d
0049+  16DB D8            push b
0050+  16DC A7 00         mov bh, 0
0051+  16DE FD A4 04      shr bl, 4  
0052+  16E1 74            mov d, b
0053+  16E2 1F 8A 19      mov al, [d + s_hex_digits]
0054+  16E5 23            mov ah, al
0055+  16E6               
0056+  16E6 E5            pop b
0057+  16E7 D8            push b
0058+  16E8 A7 00         mov bh, 0
0059+  16EA FD 87 0F      and bl, $0F
0060+  16ED 74            mov d, b
0061+  16EE 1F 8A 19      mov al, [d + s_hex_digits]
0062+  16F1 E5            pop b
0063+  16F2 E7            pop d
0064+  16F3 09            ret
0065+  16F4             
0066+  16F4             ;-----------------------------------------------------------------------------
0067+  16F4             ; HEX STRING TO BINARY
0068+  16F4             ; di = destination address
0069+  16F4             ; si = source
0070+  16F4             ;-----------------------------------------------------------------------------
0071+  16F4             _hex_to_int:
0072+  16F4             _hex_to_int_L1:
0073+  16F4 F6            lodsb          ; load from [SI] to AL
0074+  16F5 B9 00         cmp al, 0        ; check if ASCII 0
0075+  16F7 C6 04 17      jz _hex_to_int_ret
0076+  16FA 36            mov bh, al
0077+  16FB F6            lodsb
0078+  16FC 2F            mov bl, al
0079+  16FD 07 CA 16      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1700 F7            stosb          ; store AL to [DI]
0081+  1701 0A F4 16      jmp _hex_to_int_L1
0082+  1704             _hex_to_int_ret:
0083+  1704 09            ret    
0084+  1705             
0085+  1705             ;-----------------------------------------------------------------------------
0086+  1705             ; GETCHAR
0087+  1705             ; char in ah
0088+  1705             ;-----------------------------------------------------------------------------
0089+  1705             getch:
0090+  1705 DB            push al
0091+  1706             getch_retry:
0092+  1706 19 01         mov al, 1
0093+  1708 05 03         syscall sys_io      ; receive in AH
0094+  170A E8            pop al
0095+  170B 09            ret
0096+  170C             
0097+  170C             ;-----------------------------------------------------------------------------
0098+  170C             ; PUTCHAR
0099+  170C             ; char in ah
0100+  170C             ;-----------------------------------------------------------------------------
0101+  170C             _putchar:
0102+  170C D7            push a
0103+  170D 19 00         mov al, 0
0104+  170F 05 03         syscall sys_io      ; char in AH
0105+  1711 E4            pop a
0106+  1712 09            ret
0107+  1713             
0108+  1713             ;-----------------------------------------------------------------------------
0109+  1713             ;; INPUT A STRING
0110+  1713             ;; terminates with null
0111+  1713             ;; pointer in D
0112+  1713             ;-----------------------------------------------------------------------------
0113+  1713             _gets:
0114+  1713 D7            push a
0115+  1714 DA            push d
0116+  1715             _gets_loop:
0117+  1715 19 01         mov al, 1
0118+  1717 05 03         syscall sys_io      ; receive in AH
0119+  1719 B9 00         cmp al, 0        ; check error code (AL)
0120+  171B C6 15 17      je _gets_loop      ; if no char received, retry
0121+  171E             
0122+  171E 76 1B         cmp ah, 27
0123+  1720 C6 41 17      je _gets_ansi_esc
0124+  1723 76 0A         cmp ah, $0A        ; LF
0125+  1725 C6 AC 17      je _gets_end
0126+  1728 76 0D         cmp ah, $0D        ; CR
0127+  172A C6 AC 17      je _gets_end
0128+  172D 76 5C         cmp ah, $5C        ; '\\'
0129+  172F C6 6D 17      je _gets_escape
0130+  1732               
0131+  1732 76 08         cmp ah, $08      ; check for backspace
0132+  1734 C6 3D 17      je _gets_backspace
0133+  1737             
0134+  1737 1A            mov al, ah
0135+  1738 3E            mov [d], al
0136+  1739 79            inc d
0137+  173A 0A 15 17      jmp _gets_loop
0138+  173D             _gets_backspace:
0139+  173D 7F            dec d
0140+  173E 0A 15 17      jmp _gets_loop
0141+  1741             _gets_ansi_esc:
0142+  1741 19 01         mov al, 1
0143+  1743 05 03         syscall sys_io        ; receive in AH without echo
0144+  1745 B9 00         cmp al, 0          ; check error code (AL)
0145+  1747 C6 41 17      je _gets_ansi_esc    ; if no char received, retry
0146+  174A 76 5B         cmp ah, '['
0147+  174C C7 15 17      jne _gets_loop
0148+  174F             _gets_ansi_esc_2:
0149+  174F 19 01         mov al, 1
0150+  1751 05 03         syscall sys_io          ; receive in AH without echo
0151+  1753 B9 00         cmp al, 0            ; check error code (AL)
0152+  1755 C6 4F 17      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1758 76 44         cmp ah, 'D'
0154+  175A C6 65 17      je _gets_left_arrow
0155+  175D 76 43         cmp ah, 'C'
0156+  175F C6 69 17      je _gets_right_arrow
0157+  1762 0A 15 17      jmp _gets_loop
0158+  1765             _gets_left_arrow:
0159+  1765 7F            dec d
0160+  1766 0A 15 17      jmp _gets_loop
0161+  1769             _gets_right_arrow:
0162+  1769 79            inc d
0163+  176A 0A 15 17      jmp _gets_loop
0164+  176D             _gets_escape:
0165+  176D 19 01         mov al, 1
0166+  176F 05 03         syscall sys_io      ; receive in AH
0167+  1771 B9 00         cmp al, 0        ; check error code (AL)
0168+  1773 C6 6D 17      je _gets_escape      ; if no char received, retry
0169+  1776 76 6E         cmp ah, 'n'
0170+  1778 C6 97 17      je _gets_LF
0171+  177B 76 72         cmp ah, 'r'
0172+  177D C6 9E 17      je _gets_CR
0173+  1780 76 30         cmp ah, '0'
0174+  1782 C6 A5 17      je _gets_NULL
0175+  1785 76 5C         cmp ah, $5C  ; '\'
0176+  1787 C6 90 17      je _gets_slash
0177+  178A 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  178B 3E            mov [d], al
0179+  178C 79            inc d
0180+  178D 0A 15 17      jmp _gets_loop
0181+  1790             _gets_slash:
0182+  1790 19 5C         mov al, $5C
0183+  1792 3E            mov [d], al
0184+  1793 79            inc d
0185+  1794 0A 15 17      jmp _gets_loop
0186+  1797             _gets_LF:
0187+  1797 19 0A         mov al, $0A
0188+  1799 3E            mov [d], al
0189+  179A 79            inc d
0190+  179B 0A 15 17      jmp _gets_loop
0191+  179E             _gets_CR:
0192+  179E 19 0D         mov al, $0D
0193+  17A0 3E            mov [d], al
0194+  17A1 79            inc d
0195+  17A2 0A 15 17      jmp _gets_loop
0196+  17A5             _gets_NULL:
0197+  17A5 19 00         mov al, $00
0198+  17A7 3E            mov [d], al
0199+  17A8 79            inc d
0200+  17A9 0A 15 17      jmp _gets_loop
0201+  17AC             _gets_end:
0202+  17AC 19 00         mov al, 0
0203+  17AE 3E            mov [d], al        ; terminate string
0204+  17AF E7            pop d
0205+  17B0 E4            pop a
0206+  17B1 09            ret
0207+  17B2             
0208+  17B2             ;-----------------------------------------------------------------------------
0209+  17B2             ;; INPUT TEXT
0210+  17B2             ;; terminated with CTRL+D
0211+  17B2             ;; pointer in D
0212+  17B2             ;-----------------------------------------------------------------------------
0213+  17B2             _gettxt:
0214+  17B2 D7            push a
0215+  17B3 DA            push d
0216+  17B4             _gettxt_loop:
0217+  17B4 19 01         mov al, 1
0218+  17B6 05 03         syscall sys_io      ; receive in AH
0219+  17B8 B9 00         cmp al, 0        ; check error code (AL)
0220+  17BA C6 B4 17      je _gettxt_loop    ; if no char received, retry
0221+  17BD 76 04         cmp ah, 4      ; EOT
0222+  17BF C6 FD 17      je _gettxt_end
0223+  17C2 76 08         cmp ah, $08      ; check for backspace
0224+  17C4 C6 F9 17      je _gettxt_backspace
0225+  17C7 76 5C         cmp ah, $5C        ; '\'
0226+  17C9 C6 D2 17      je _gettxt_escape
0227+  17CC 1A            mov al, ah
0228+  17CD 3E            mov [d], al
0229+  17CE 79            inc d
0230+  17CF 0A B4 17      jmp _gettxt_loop
0231+  17D2             _gettxt_escape:
0232+  17D2 19 01         mov al, 1
0233+  17D4 05 03         syscall sys_io      ; receive in AH
0234+  17D6 B9 00         cmp al, 0        ; check error code (AL)
0235+  17D8 C6 D2 17      je _gettxt_escape    ; if no char received, retry
0236+  17DB 76 6E         cmp ah, 'n'
0237+  17DD C6 EB 17      je _gettxt_LF
0238+  17E0 76 72         cmp ah, 'r'
0239+  17E2 C6 F2 17      je _gettxt_CR
0240+  17E5 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  17E6 3E            mov [d], al
0242+  17E7 79            inc d
0243+  17E8 0A B4 17      jmp _gettxt_loop
0244+  17EB             _gettxt_LF:
0245+  17EB 19 0A         mov al, $0A
0246+  17ED 3E            mov [d], al
0247+  17EE 79            inc d
0248+  17EF 0A B4 17      jmp _gettxt_loop
0249+  17F2             _gettxt_CR:
0250+  17F2 19 0D         mov al, $0D
0251+  17F4 3E            mov [d], al
0252+  17F5 79            inc d
0253+  17F6 0A B4 17      jmp _gettxt_loop
0254+  17F9             _gettxt_backspace:
0255+  17F9 7F            dec d
0256+  17FA 0A B4 17      jmp _gettxt_loop
0257+  17FD             _gettxt_end:
0258+  17FD 19 00         mov al, 0
0259+  17FF 3E            mov [d], al        ; terminate string
0260+  1800 E7            pop d
0261+  1801 E4            pop a
0262+  1802 09            ret
0263+  1803             
0264+  1803             ;-----------------------------------------------------------------------------
0265+  1803             ; PRINT NEW LINE
0266+  1803             ;-----------------------------------------------------------------------------
0267+  1803             printnl:
0268+  1803 D7            push a
0269+  1804 10 00 0A      mov a, $0A00
0270+  1807 05 03         syscall sys_io
0271+  1809 10 00 0D      mov a, $0D00
0272+  180C 05 03         syscall sys_io
0273+  180E E4            pop a
0274+  180F 09            ret
0275+  1810             
0276+  1810             ;-----------------------------------------------------------------------------
0277+  1810             ; _strtoint
0278+  1810             ; 4 digit hex string number in d
0279+  1810             ; integer returned in A
0280+  1810             ;-----------------------------------------------------------------------------
0281+  1810             _strtointx:
0282+  1810 D8            push b
0283+  1811 32            mov bl, [d]
0284+  1812 37            mov bh, bl
0285+  1813 33 01 00      mov bl, [d + 1]
0286+  1816 07 CA 16      call _atoi        ; convert to int in AL
0287+  1819 23            mov ah, al        ; move to AH
0288+  181A 33 02 00      mov bl, [d + 2]
0289+  181D 37            mov bh, bl
0290+  181E 33 03 00      mov bl, [d + 3]
0291+  1821 07 CA 16      call _atoi        ; convert to int in AL
0292+  1824 E5            pop b
0293+  1825 09            ret
0294+  1826             
0295+  1826             ;-----------------------------------------------------------------------------
0296+  1826             ; _strtoint
0297+  1826             ; 5 digit base10 string number in d
0298+  1826             ; integer returned in A
0299+  1826             ;-----------------------------------------------------------------------------
0300+  1826             _strtoint:
0301+  1826 E2            push si
0302+  1827 D8            push b
0303+  1828 D9            push c
0304+  1829 DA            push d
0305+  182A 07 6C 16      call _strlen      ; get string length in C
0306+  182D 7E            dec c
0307+  182E FD 4E         mov si, d
0308+  1830 12            mov a, c
0309+  1831 FD 99         shl a
0310+  1833 3B A2 19      mov d, table_power
0311+  1836 59            add d, a
0312+  1837 38 00 00      mov c, 0
0313+  183A             _strtoint_L0:
0314+  183A F6            lodsb      ; load ASCII to al
0315+  183B B9 00         cmp al, 0
0316+  183D C6 50 18      je _strtoint_end
0317+  1840 6F 30         sub al, $30    ; make into integer
0318+  1842 22 00         mov ah, 0
0319+  1844 2A            mov b, [d]
0320+  1845 AC            mul a, b      ; result in B since it fits in 16bits
0321+  1846 11            mov a, b
0322+  1847 28            mov b, c
0323+  1848 54            add a, b
0324+  1849 39            mov c, a
0325+  184A 63 02 00      sub d, 2
0326+  184D 0A 3A 18      jmp _strtoint_L0
0327+  1850             _strtoint_end:
0328+  1850 12            mov a, c
0329+  1851 E7            pop d
0330+  1852 E6            pop c
0331+  1853 E5            pop b
0332+  1854 EF            pop si
0333+  1855 09            ret
0334+  1856             
0335+  1856             ;-----------------------------------------------------------------------------
0336+  1856             ; PRINT NULL TERMINATED STRING
0337+  1856             ; pointer in D
0338+  1856             ;-----------------------------------------------------------------------------
0339+  1856             _puts:
0340+  1856 D7            push a
0341+  1857 DA            push d
0342+  1858             _puts_L1:
0343+  1858 1E            mov al, [d]
0344+  1859 B9 00         cmp al, 0
0345+  185B C6 67 18      jz _puts_END
0346+  185E 23            mov ah, al
0347+  185F 19 00         mov al, 0
0348+  1861 05 03         syscall sys_io
0349+  1863 79            inc d
0350+  1864 0A 58 18      jmp _puts_L1
0351+  1867             _puts_END:
0352+  1867 E7            pop d
0353+  1868 E4            pop a
0354+  1869 09            ret
0355+  186A             
0356+  186A             ;-----------------------------------------------------------------------------
0357+  186A             ; PRINT N SIZE STRING
0358+  186A             ; pointer in D
0359+  186A             ; size in C
0360+  186A             ;-----------------------------------------------------------------------------
0361+  186A             _putsn:
0362+  186A DB            push al
0363+  186B DA            push d
0364+  186C D9            push c
0365+  186D             _putsn_L0:
0366+  186D 1E            mov al, [d]
0367+  186E 23            mov ah, al
0368+  186F 19 00         mov al, 0
0369+  1871 05 03         syscall sys_io
0370+  1873 79            inc d
0371+  1874 7E            dec c  
0372+  1875 C2 00 00      cmp c, 0
0373+  1878 C7 6D 18      jne _putsn_L0
0374+  187B             _putsn_end:
0375+  187B E6            pop c
0376+  187C E7            pop d
0377+  187D E8            pop al
0378+  187E 09            ret
0379+  187F             
0380+  187F             ;-----------------------------------------------------------------------------
0381+  187F             ; print 16bit decimal number
0382+  187F             ; input number in A
0383+  187F             ;-----------------------------------------------------------------------------
0384+  187F             print_u16d:
0385+  187F D7            push a
0386+  1880 D8            push b
0387+  1881 26 10 27      mov b, 10000
0388+  1884 AE            div a, b      ; get 10000's coeff.
0389+  1885 07 A7 18      call print_number
0390+  1888 11            mov a, b
0391+  1889 26 E8 03      mov b, 1000
0392+  188C AE            div a, b      ; get 1000's coeff.
0393+  188D 07 A7 18      call print_number
0394+  1890 11            mov a, b
0395+  1891 26 64 00      mov b, 100
0396+  1894 AE            div a, b
0397+  1895 07 A7 18      call print_number
0398+  1898 11            mov a, b
0399+  1899 26 0A 00      mov b, 10
0400+  189C AE            div a, b
0401+  189D 07 A7 18      call print_number
0402+  18A0 1B            mov al, bl      ; 1's coeff in bl
0403+  18A1 07 A7 18      call print_number
0404+  18A4 E5            pop b
0405+  18A5 E4            pop a
0406+  18A6 09            ret
0407+  18A7             
0408+  18A7             ;-----------------------------------------------------------------------------
0409+  18A7             ; print AL
0410+  18A7             ;-----------------------------------------------------------------------------
0411+  18A7             print_number:
0412+  18A7 6A 30         add al, $30
0413+  18A9 23            mov ah, al
0414+  18AA 07 0C 17      call _putchar
0415+  18AD 09            ret
0416+  18AE             
0417+  18AE             ;-----------------------------------------------------------------------------
0418+  18AE             ; PRINT 16BIT HEX INTEGER
0419+  18AE             ; integer value in reg B
0420+  18AE             ;-----------------------------------------------------------------------------
0421+  18AE             print_u16x:
0422+  18AE D7            push a
0423+  18AF D8            push b
0424+  18B0 DD            push bl
0425+  18B1 30            mov bl, bh
0426+  18B2 07 DA 16      call _itoa        ; convert bh to char in A
0427+  18B5 2F            mov bl, al        ; save al
0428+  18B6 19 00         mov al, 0
0429+  18B8 05 03         syscall sys_io        ; display AH
0430+  18BA 24            mov ah, bl        ; retrieve al
0431+  18BB 19 00         mov al, 0
0432+  18BD 05 03         syscall sys_io        ; display AL
0433+  18BF             
0434+  18BF EA            pop bl
0435+  18C0 07 DA 16      call _itoa        ; convert bh to char in A
0436+  18C3 2F            mov bl, al        ; save al
0437+  18C4 19 00         mov al, 0
0438+  18C6 05 03         syscall sys_io        ; display AH
0439+  18C8 24            mov ah, bl        ; retrieve al
0440+  18C9 19 00         mov al, 0
0441+  18CB 05 03         syscall sys_io        ; display AL
0442+  18CD             
0443+  18CD E5            pop b
0444+  18CE E4            pop a
0445+  18CF 09            ret
0446+  18D0             
0447+  18D0             ;-----------------------------------------------------------------------------
0448+  18D0             ; INPUT 16BIT HEX INTEGER
0449+  18D0             ; read 16bit integer into A
0450+  18D0             ;-----------------------------------------------------------------------------
0451+  18D0             scan_u16x:
0452+  18D0 F8 10 00      enter 16
0453+  18D3 D8            push b
0454+  18D4 DA            push d
0455+  18D5             
0456+  18D5 FA F1 FF      lea d, [bp + -15]
0457+  18D8 07 13 17      call _gets        ; get number
0458+  18DB             
0459+  18DB 32            mov bl, [d]
0460+  18DC 37            mov bh, bl
0461+  18DD 33 01 00      mov bl, [d + 1]
0462+  18E0 07 CA 16      call _atoi        ; convert to int in AL
0463+  18E3 23            mov ah, al        ; move to AH
0464+  18E4             
0465+  18E4 33 02 00      mov bl, [d + 2]
0466+  18E7 37            mov bh, bl
0467+  18E8 33 03 00      mov bl, [d + 3]
0468+  18EB 07 CA 16      call _atoi        ; convert to int in AL
0469+  18EE             
0470+  18EE E7            pop d
0471+  18EF E5            pop b
0472+  18F0 F9            leave
0473+  18F1 09            ret
0474+  18F2             
0475+  18F2             ;-----------------------------------------------------------------------------
0476+  18F2             ; PRINT 8bit HEX INTEGER
0477+  18F2             ; integer value in reg bl
0478+  18F2             ;-----------------------------------------------------------------------------
0479+  18F2             print_u8x:
0480+  18F2 D7            push a
0481+  18F3 DD            push bl
0482+  18F4             
0483+  18F4 07 DA 16      call _itoa        ; convert bl to char in A
0484+  18F7 2F            mov bl, al        ; save al
0485+  18F8 19 00         mov al, 0
0486+  18FA 05 03         syscall sys_io        ; display AH
0487+  18FC 24            mov ah, bl        ; retrieve al
0488+  18FD 19 00         mov al, 0
0489+  18FF 05 03         syscall sys_io        ; display AL
0490+  1901             
0491+  1901 EA            pop bl
0492+  1902 E4            pop a
0493+  1903 09            ret
0494+  1904             
0495+  1904             ;-----------------------------------------------------------------------------
0496+  1904             ; print 8bit decimal unsigned number
0497+  1904             ; input number in AL
0498+  1904             ;-----------------------------------------------------------------------------
0499+  1904             print_u8d:
0500+  1904 D7            push a
0501+  1905 D8            push b
0502+  1906             
0503+  1906 22 00         mov ah, 0
0504+  1908 26 64 00      mov b, 100
0505+  190B AE            div a, b
0506+  190C D8            push b      ; save remainder
0507+  190D B9 00         cmp al, 0
0508+  190F C6 19 19      je skip100
0509+  1912 6A 30         add al, $30
0510+  1914 23            mov ah, al
0511+  1915 19 00         mov al, 0
0512+  1917 05 03         syscall sys_io  ; print coeff
0513+  1919             skip100:
0514+  1919 E4            pop a
0515+  191A 22 00         mov ah, 0
0516+  191C 26 0A 00      mov b, 10
0517+  191F AE            div a, b
0518+  1920 D8            push b      ; save remainder
0519+  1921 B9 00         cmp al, 0
0520+  1923 C6 2D 19      je skip10
0521+  1926 6A 30         add al, $30
0522+  1928 23            mov ah, al
0523+  1929 19 00         mov al, 0
0524+  192B 05 03         syscall sys_io  ; print coeff
0525+  192D             skip10:
0526+  192D E4            pop a
0527+  192E 1B            mov al, bl
0528+  192F 6A 30         add al, $30
0529+  1931 23            mov ah, al
0530+  1932 19 00         mov al, 0
0531+  1934 05 03         syscall sys_io  ; print coeff
0532+  1936 E5            pop b
0533+  1937 E4            pop a
0534+  1938 09            ret
0535+  1939             
0536+  1939             ;-----------------------------------------------------------------------------
0537+  1939             ; INPUT 8BIT HEX INTEGER
0538+  1939             ; read 8bit integer into AL
0539+  1939             ;-----------------------------------------------------------------------------
0540+  1939             scan_u8x:
0541+  1939 F8 04 00      enter 4
0542+  193C D8            push b
0543+  193D DA            push d
0544+  193E             
0545+  193E FA FD FF      lea d, [bp + -3]
0546+  1941 07 13 17      call _gets        ; get number
0547+  1944             
0548+  1944 32            mov bl, [d]
0549+  1945 37            mov bh, bl
0550+  1946 33 01 00      mov bl, [d + 1]
0551+  1949 07 CA 16      call _atoi        ; convert to int in AL
0552+  194C             
0553+  194C E7            pop d
0554+  194D E5            pop b
0555+  194E F9            leave
0556+  194F 09            ret
0557+  1950             
0558+  1950             ;-----------------------------------------------------------------------------
0559+  1950             ; input decimal number
0560+  1950             ; result in A
0561+  1950             ; 655'\0'
0562+  1950             ; low--------high
0563+  1950             ;-----------------------------------------------------------------------------
0564+  1950             scan_u16d:
0565+  1950 F8 08 00      enter 8
0566+  1953 E2            push si
0567+  1954 D8            push b
0568+  1955 D9            push c
0569+  1956 DA            push d
0570+  1957 FA F9 FF      lea d, [bp +- 7]
0571+  195A 07 13 17      call _gets
0572+  195D 07 6C 16      call _strlen      ; get string length in C
0573+  1960 7E            dec c
0574+  1961 FD 4E         mov si, d
0575+  1963 12            mov a, c
0576+  1964 FD 99         shl a
0577+  1966 3B A2 19      mov d, table_power
0578+  1969 59            add d, a
0579+  196A 38 00 00      mov c, 0
0580+  196D             mul_loop:
0581+  196D F6            lodsb      ; load ASCII to al
0582+  196E B9 00         cmp al, 0
0583+  1970 C6 83 19      je mul_exit
0584+  1973 6F 30         sub al, $30    ; make into integer
0585+  1975 22 00         mov ah, 0
0586+  1977 2A            mov b, [d]
0587+  1978 AC            mul a, b      ; result in B since it fits in 16bits
0588+  1979 11            mov a, b
0589+  197A 28            mov b, c
0590+  197B 54            add a, b
0591+  197C 39            mov c, a
0592+  197D 63 02 00      sub d, 2
0593+  1980 0A 6D 19      jmp mul_loop
0594+  1983             mul_exit:
0595+  1983 12            mov a, c
0596+  1984 E7            pop d
0597+  1985 E6            pop c
0598+  1986 E5            pop b
0599+  1987 EF            pop si
0600+  1988 F9            leave
0601+  1989 09            ret
0602+  198A             
0603+  198A 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  198E 34 35 36 37 
0603+  1992 38 39 41 42 
0603+  1996 43 44 45 46 
0604+  199A 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  199E 1B 5B 48 00 
0605+  19A2             
0606+  19A2             table_power:
0607+  19A2 01 00         .dw 1
0608+  19A4 0A 00         .dw 10
0609+  19A6 64 00         .dw 100
0610+  19A8 E8 03         .dw 1000
0611+  19AA 10 27         .dw 100002794   19AC             ; --- END INLINE ASM BLOCK
2795   19AC             
2796   19AC F9            leave
2797   19AD 09            ret
2798   19AE             
2799   19AE             base64_encode:
2800   19AE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2801   19B1             ;; int i = 0; 
2802   19B1 52 02 00      sub sp, 2 ; i
2803   19B4             ; --- START LOCAL VAR INITIALIZATION
2804   19B4 FA FF FF      lea d, [bp + -1] ; $i
2805   19B7 DA            push d
2806   19B8 26 00 00      mov b, $0
2807   19BB E7            pop d
2808   19BC FD 43         mov [d], b
2809   19BE             ; --- END LOCAL VAR INITIALIZATION
2810   19BE             ;; int j = 0; 
2811   19BE 52 02 00      sub sp, 2 ; j
2812   19C1             ; --- START LOCAL VAR INITIALIZATION
2813   19C1 FA FD FF      lea d, [bp + -3] ; $j
2814   19C4 DA            push d
2815   19C5 26 00 00      mov b, $0
2816   19C8 E7            pop d
2817   19C9 FD 43         mov [d], b
2818   19CB             ; --- END LOCAL VAR INITIALIZATION
2819   19CB             ;; int k; 
2820   19CB 52 02 00      sub sp, 2 ; k
2821   19CE             ;; int input_len; 
2822   19CE 52 02 00      sub sp, 2 ; input_len
2823   19D1             ;; unsigned char input_buffer[3]; 
2824   19D1 52 03 00      sub sp, 3 ; input_buffer
2825   19D4             ;; unsigned char output_buffer[4]; 
2826   19D4 52 04 00      sub sp, 4 ; output_buffer
2827   19D7             ;; input_len = strlen(input); 
2828   19D7 FA F9 FF      lea d, [bp + -7] ; $input_len
2829   19DA DA            push d
2830   19DB FA 05 00      lea d, [bp + 5] ; $input
2831   19DE 2A            mov b, [d]
2832   19DF FD AB         swp b
2833   19E1 D8            push b
2834   19E2 07 F5 05      call strlen
2835   19E5 51 02 00      add sp, 2
2836   19E8 E7            pop d
2837   19E9 FD 43         mov [d], b
2838   19EB             ;; while (input_len--) { 
2839   19EB             _while42_cond:
2840   19EB FA F9 FF      lea d, [bp + -7] ; $input_len
2841   19EE 2A            mov b, [d]
2842   19EF FD 7D         dec b
2843   19F1 FA F9 FF      lea d, [bp + -7] ; $input_len
2844   19F4 FD 43         mov [d], b
2845   19F6 FD 77         inc b
2846   19F8 C0 00 00      cmp b, 0
2847   19FB C6 AF 1B      je _while42_exit
2848   19FE             _while42_block:
2849   19FE             ;; input_buffer[i++] = *(input++); 
2850   19FE FA F6 FF      lea d, [bp + -10] ; $input_buffer
2851   1A01 D7            push a
2852   1A02 DA            push d
2853   1A03 FA FF FF      lea d, [bp + -1] ; $i
2854   1A06 2A            mov b, [d]
2855   1A07 FD 77         inc b
2856   1A09 FA FF FF      lea d, [bp + -1] ; $i
2857   1A0C FD 43         mov [d], b
2858   1A0E FD 7D         dec b
2859   1A10 E7            pop d
2860   1A11 5A            add d, b
2861   1A12 E4            pop a
2862   1A13 DA            push d
2863   1A14 FA 05 00      lea d, [bp + 5] ; $input
2864   1A17 2A            mov b, [d]
2865   1A18 FD 77         inc b
2866   1A1A FA 05 00      lea d, [bp + 5] ; $input
2867   1A1D FD 43         mov [d], b
2868   1A1F FD 7D         dec b
2869   1A21 74            mov d, b
2870   1A22 32            mov bl, [d]
2871   1A23 A7 00         mov bh, 0
2872   1A25 E7            pop d
2873   1A26 FD 3E         mov [d], bl
2874   1A28             ;; if (i == 3) { 
2875   1A28             _if43_cond:
2876   1A28 FA FF FF      lea d, [bp + -1] ; $i
2877   1A2B 2A            mov b, [d]
2878   1A2C             ; START RELATIONAL
2879   1A2C D7            push a
2880   1A2D 11            mov a, b
2881   1A2E 26 03 00      mov b, $3
2882   1A31 B0            cmp a, b
2883   1A32 FD 71         seq ; ==
2884   1A34 E4            pop a
2885   1A35             ; END RELATIONAL
2886   1A35 C0 00 00      cmp b, 0
2887   1A38 C6 AC 1B      je _if43_exit
2888   1A3B             _if43_true:
2889   1A3B             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
2890   1A3B FA F2 FF      lea d, [bp + -14] ; $output_buffer
2891   1A3E D7            push a
2892   1A3F DA            push d
2893   1A40 26 00 00      mov b, $0
2894   1A43 E7            pop d
2895   1A44 5A            add d, b
2896   1A45 E4            pop a
2897   1A46 DA            push d
2898   1A47 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2899   1A4A D7            push a
2900   1A4B DA            push d
2901   1A4C 26 00 00      mov b, $0
2902   1A4F E7            pop d
2903   1A50 5A            add d, b
2904   1A51 E4            pop a
2905   1A52 32            mov bl, [d]
2906   1A53 A7 00         mov bh, 0
2907   1A55 D7            push a
2908   1A56 11            mov a, b
2909   1A57 26 FC 00      mov b, $fc
2910   1A5A FD 92         and b, a ; &
2911   1A5C E4            pop a
2912   1A5D             ; START SHIFT
2913   1A5D D7            push a
2914   1A5E 11            mov a, b
2915   1A5F 26 02 00      mov b, $2
2916   1A62 FD 39         mov c, b
2917   1A64 A5            ashr a, cl
2918   1A65 27            mov b, a
2919   1A66 E4            pop a
2920   1A67             ; END SHIFT
2921   1A67 E7            pop d
2922   1A68 FD 3E         mov [d], bl
2923   1A6A             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
2924   1A6A FA F2 FF      lea d, [bp + -14] ; $output_buffer
2925   1A6D D7            push a
2926   1A6E DA            push d
2927   1A6F 26 01 00      mov b, $1
2928   1A72 E7            pop d
2929   1A73 5A            add d, b
2930   1A74 E4            pop a
2931   1A75 DA            push d
2932   1A76 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2933   1A79 D7            push a
2934   1A7A DA            push d
2935   1A7B 26 00 00      mov b, $0
2936   1A7E E7            pop d
2937   1A7F 5A            add d, b
2938   1A80 E4            pop a
2939   1A81 32            mov bl, [d]
2940   1A82 A7 00         mov bh, 0
2941   1A84 D7            push a
2942   1A85 11            mov a, b
2943   1A86 26 03 00      mov b, $3
2944   1A89 FD 92         and b, a ; &
2945   1A8B E4            pop a
2946   1A8C             ; START SHIFT
2947   1A8C D7            push a
2948   1A8D 11            mov a, b
2949   1A8E 26 04 00      mov b, $4
2950   1A91 FD 39         mov c, b
2951   1A93 9D            shl a, cl
2952   1A94 27            mov b, a
2953   1A95 E4            pop a
2954   1A96             ; END SHIFT
2955   1A96             ; START TERMS
2956   1A96 D7            push a
2957   1A97 11            mov a, b
2958   1A98 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2959   1A9B D7            push a
2960   1A9C DA            push d
2961   1A9D 26 01 00      mov b, $1
2962   1AA0 E7            pop d
2963   1AA1 5A            add d, b
2964   1AA2 E4            pop a
2965   1AA3 32            mov bl, [d]
2966   1AA4 A7 00         mov bh, 0
2967   1AA6 D7            push a
2968   1AA7 11            mov a, b
2969   1AA8 26 F0 00      mov b, $f0
2970   1AAB FD 92         and b, a ; &
2971   1AAD E4            pop a
2972   1AAE             ; START SHIFT
2973   1AAE D7            push a
2974   1AAF 11            mov a, b
2975   1AB0 26 04 00      mov b, $4
2976   1AB3 FD 39         mov c, b
2977   1AB5 A5            ashr a, cl
2978   1AB6 27            mov b, a
2979   1AB7 E4            pop a
2980   1AB8             ; END SHIFT
2981   1AB8 56            add b, a
2982   1AB9 E4            pop a
2983   1ABA             ; END TERMS
2984   1ABA E7            pop d
2985   1ABB FD 3E         mov [d], bl
2986   1ABD             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
2987   1ABD FA F2 FF      lea d, [bp + -14] ; $output_buffer
2988   1AC0 D7            push a
2989   1AC1 DA            push d
2990   1AC2 26 02 00      mov b, $2
2991   1AC5 E7            pop d
2992   1AC6 5A            add d, b
2993   1AC7 E4            pop a
2994   1AC8 DA            push d
2995   1AC9 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2996   1ACC D7            push a
2997   1ACD DA            push d
2998   1ACE 26 01 00      mov b, $1
2999   1AD1 E7            pop d
3000   1AD2 5A            add d, b
3001   1AD3 E4            pop a
3002   1AD4 32            mov bl, [d]
3003   1AD5 A7 00         mov bh, 0
3004   1AD7 D7            push a
3005   1AD8 11            mov a, b
3006   1AD9 26 0F 00      mov b, $f
3007   1ADC FD 92         and b, a ; &
3008   1ADE E4            pop a
3009   1ADF             ; START SHIFT
3010   1ADF D7            push a
3011   1AE0 11            mov a, b
3012   1AE1 26 02 00      mov b, $2
3013   1AE4 FD 39         mov c, b
3014   1AE6 9D            shl a, cl
3015   1AE7 27            mov b, a
3016   1AE8 E4            pop a
3017   1AE9             ; END SHIFT
3018   1AE9             ; START TERMS
3019   1AE9 D7            push a
3020   1AEA 11            mov a, b
3021   1AEB FA F6 FF      lea d, [bp + -10] ; $input_buffer
3022   1AEE D7            push a
3023   1AEF DA            push d
3024   1AF0 26 02 00      mov b, $2
3025   1AF3 E7            pop d
3026   1AF4 5A            add d, b
3027   1AF5 E4            pop a
3028   1AF6 32            mov bl, [d]
3029   1AF7 A7 00         mov bh, 0
3030   1AF9 D7            push a
3031   1AFA 11            mov a, b
3032   1AFB 26 C0 00      mov b, $c0
3033   1AFE FD 92         and b, a ; &
3034   1B00 E4            pop a
3035   1B01             ; START SHIFT
3036   1B01 D7            push a
3037   1B02 11            mov a, b
3038   1B03 26 06 00      mov b, $6
3039   1B06 FD 39         mov c, b
3040   1B08 A5            ashr a, cl
3041   1B09 27            mov b, a
3042   1B0A E4            pop a
3043   1B0B             ; END SHIFT
3044   1B0B 56            add b, a
3045   1B0C E4            pop a
3046   1B0D             ; END TERMS
3047   1B0D E7            pop d
3048   1B0E FD 3E         mov [d], bl
3049   1B10             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
3050   1B10 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3051   1B13 D7            push a
3052   1B14 DA            push d
3053   1B15 26 03 00      mov b, $3
3054   1B18 E7            pop d
3055   1B19 5A            add d, b
3056   1B1A E4            pop a
3057   1B1B DA            push d
3058   1B1C FA F6 FF      lea d, [bp + -10] ; $input_buffer
3059   1B1F D7            push a
3060   1B20 DA            push d
3061   1B21 26 02 00      mov b, $2
3062   1B24 E7            pop d
3063   1B25 5A            add d, b
3064   1B26 E4            pop a
3065   1B27 32            mov bl, [d]
3066   1B28 A7 00         mov bh, 0
3067   1B2A D7            push a
3068   1B2B 11            mov a, b
3069   1B2C 26 3F 00      mov b, $3f
3070   1B2F FD 92         and b, a ; &
3071   1B31 E4            pop a
3072   1B32 E7            pop d
3073   1B33 FD 3E         mov [d], bl
3074   1B35             ;; for (i = 0; i < 4; i++) { 
3075   1B35             _for44_init:
3076   1B35 FA FF FF      lea d, [bp + -1] ; $i
3077   1B38 DA            push d
3078   1B39 26 00 00      mov b, $0
3079   1B3C E7            pop d
3080   1B3D FD 43         mov [d], b
3081   1B3F             _for44_cond:
3082   1B3F FA FF FF      lea d, [bp + -1] ; $i
3083   1B42 2A            mov b, [d]
3084   1B43             ; START RELATIONAL
3085   1B43 D7            push a
3086   1B44 11            mov a, b
3087   1B45 26 04 00      mov b, $4
3088   1B48 B0            cmp a, b
3089   1B49 FD 73         slt ; < (signed)
3090   1B4B E4            pop a
3091   1B4C             ; END RELATIONAL
3092   1B4C C0 00 00      cmp b, 0
3093   1B4F C6 9F 1B      je _for44_exit
3094   1B52             _for44_block:
3095   1B52             ;; output[j++] = base64_table[output_buffer[i]]; 
3096   1B52 FA 07 00      lea d, [bp + 7] ; $output
3097   1B55 FD 2A         mov d, [d]
3098   1B57 D7            push a
3099   1B58 DA            push d
3100   1B59 FA FD FF      lea d, [bp + -3] ; $j
3101   1B5C 2A            mov b, [d]
3102   1B5D FD 77         inc b
3103   1B5F FA FD FF      lea d, [bp + -3] ; $j
3104   1B62 FD 43         mov [d], b
3105   1B64 FD 7D         dec b
3106   1B66 E7            pop d
3107   1B67 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3108   1B6B E4            pop a
3109   1B6C DA            push d
3110   1B6D 3B 27 23      mov d, _base64_table ; $base64_table
3111   1B70 FD 2A         mov d, [d]
3112   1B72 D7            push a
3113   1B73 DA            push d
3114   1B74 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3115   1B77 D7            push a
3116   1B78 DA            push d
3117   1B79 FA FF FF      lea d, [bp + -1] ; $i
3118   1B7C 2A            mov b, [d]
3119   1B7D E7            pop d
3120   1B7E 5A            add d, b
3121   1B7F E4            pop a
3122   1B80 32            mov bl, [d]
3123   1B81 A7 00         mov bh, 0
3124   1B83 E7            pop d
3125   1B84 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3126   1B88 E4            pop a
3127   1B89 32            mov bl, [d]
3128   1B8A A7 00         mov bh, 0
3129   1B8C E7            pop d
3130   1B8D FD 3E         mov [d], bl
3131   1B8F             _for44_update:
3132   1B8F FA FF FF      lea d, [bp + -1] ; $i
3133   1B92 2A            mov b, [d]
3134   1B93 FD 77         inc b
3135   1B95 FA FF FF      lea d, [bp + -1] ; $i
3136   1B98 FD 43         mov [d], b
3137   1B9A FD 7D         dec b
3138   1B9C 0A 3F 1B      jmp _for44_cond
3139   1B9F             _for44_exit:
3140   1B9F             ;; i = 0; 
3141   1B9F FA FF FF      lea d, [bp + -1] ; $i
3142   1BA2 DA            push d
3143   1BA3 26 00 00      mov b, $0
3144   1BA6 E7            pop d
3145   1BA7 FD 43         mov [d], b
3146   1BA9 0A AC 1B      jmp _if43_exit
3147   1BAC             _if43_exit:
3148   1BAC 0A EB 19      jmp _while42_cond
3149   1BAF             _while42_exit:
3150   1BAF             ;; if (i) { 
3151   1BAF             _if45_cond:
3152   1BAF FA FF FF      lea d, [bp + -1] ; $i
3153   1BB2 2A            mov b, [d]
3154   1BB3 C0 00 00      cmp b, 0
3155   1BB6 C6 84 1D      je _if45_exit
3156   1BB9             _if45_true:
3157   1BB9             ;; for (k = i; k < 3; k++) { 
3158   1BB9             _for46_init:
3159   1BB9 FA FB FF      lea d, [bp + -5] ; $k
3160   1BBC DA            push d
3161   1BBD FA FF FF      lea d, [bp + -1] ; $i
3162   1BC0 2A            mov b, [d]
3163   1BC1 E7            pop d
3164   1BC2 FD 43         mov [d], b
3165   1BC4             _for46_cond:
3166   1BC4 FA FB FF      lea d, [bp + -5] ; $k
3167   1BC7 2A            mov b, [d]
3168   1BC8             ; START RELATIONAL
3169   1BC8 D7            push a
3170   1BC9 11            mov a, b
3171   1BCA 26 03 00      mov b, $3
3172   1BCD B0            cmp a, b
3173   1BCE FD 73         slt ; < (signed)
3174   1BD0 E4            pop a
3175   1BD1             ; END RELATIONAL
3176   1BD1 C0 00 00      cmp b, 0
3177   1BD4 C6 FA 1B      je _for46_exit
3178   1BD7             _for46_block:
3179   1BD7             ;; input_buffer[k] = '\0'; 
3180   1BD7 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3181   1BDA D7            push a
3182   1BDB DA            push d
3183   1BDC FA FB FF      lea d, [bp + -5] ; $k
3184   1BDF 2A            mov b, [d]
3185   1BE0 E7            pop d
3186   1BE1 5A            add d, b
3187   1BE2 E4            pop a
3188   1BE3 DA            push d
3189   1BE4 26 00 00      mov b, $0
3190   1BE7 E7            pop d
3191   1BE8 FD 3E         mov [d], bl
3192   1BEA             _for46_update:
3193   1BEA FA FB FF      lea d, [bp + -5] ; $k
3194   1BED 2A            mov b, [d]
3195   1BEE FD 77         inc b
3196   1BF0 FA FB FF      lea d, [bp + -5] ; $k
3197   1BF3 FD 43         mov [d], b
3198   1BF5 FD 7D         dec b
3199   1BF7 0A C4 1B      jmp _for46_cond
3200   1BFA             _for46_exit:
3201   1BFA             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
3202   1BFA FA F2 FF      lea d, [bp + -14] ; $output_buffer
3203   1BFD D7            push a
3204   1BFE DA            push d
3205   1BFF 26 00 00      mov b, $0
3206   1C02 E7            pop d
3207   1C03 5A            add d, b
3208   1C04 E4            pop a
3209   1C05 DA            push d
3210   1C06 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3211   1C09 D7            push a
3212   1C0A DA            push d
3213   1C0B 26 00 00      mov b, $0
3214   1C0E E7            pop d
3215   1C0F 5A            add d, b
3216   1C10 E4            pop a
3217   1C11 32            mov bl, [d]
3218   1C12 A7 00         mov bh, 0
3219   1C14 D7            push a
3220   1C15 11            mov a, b
3221   1C16 26 FC 00      mov b, $fc
3222   1C19 FD 92         and b, a ; &
3223   1C1B E4            pop a
3224   1C1C             ; START SHIFT
3225   1C1C D7            push a
3226   1C1D 11            mov a, b
3227   1C1E 26 02 00      mov b, $2
3228   1C21 FD 39         mov c, b
3229   1C23 A5            ashr a, cl
3230   1C24 27            mov b, a
3231   1C25 E4            pop a
3232   1C26             ; END SHIFT
3233   1C26 E7            pop d
3234   1C27 FD 3E         mov [d], bl
3235   1C29             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
3236   1C29 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3237   1C2C D7            push a
3238   1C2D DA            push d
3239   1C2E 26 01 00      mov b, $1
3240   1C31 E7            pop d
3241   1C32 5A            add d, b
3242   1C33 E4            pop a
3243   1C34 DA            push d
3244   1C35 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3245   1C38 D7            push a
3246   1C39 DA            push d
3247   1C3A 26 00 00      mov b, $0
3248   1C3D E7            pop d
3249   1C3E 5A            add d, b
3250   1C3F E4            pop a
3251   1C40 32            mov bl, [d]
3252   1C41 A7 00         mov bh, 0
3253   1C43 D7            push a
3254   1C44 11            mov a, b
3255   1C45 26 03 00      mov b, $3
3256   1C48 FD 92         and b, a ; &
3257   1C4A E4            pop a
3258   1C4B             ; START SHIFT
3259   1C4B D7            push a
3260   1C4C 11            mov a, b
3261   1C4D 26 04 00      mov b, $4
3262   1C50 FD 39         mov c, b
3263   1C52 9D            shl a, cl
3264   1C53 27            mov b, a
3265   1C54 E4            pop a
3266   1C55             ; END SHIFT
3267   1C55             ; START TERMS
3268   1C55 D7            push a
3269   1C56 11            mov a, b
3270   1C57 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3271   1C5A D7            push a
3272   1C5B DA            push d
3273   1C5C 26 01 00      mov b, $1
3274   1C5F E7            pop d
3275   1C60 5A            add d, b
3276   1C61 E4            pop a
3277   1C62 32            mov bl, [d]
3278   1C63 A7 00         mov bh, 0
3279   1C65 D7            push a
3280   1C66 11            mov a, b
3281   1C67 26 F0 00      mov b, $f0
3282   1C6A FD 92         and b, a ; &
3283   1C6C E4            pop a
3284   1C6D             ; START SHIFT
3285   1C6D D7            push a
3286   1C6E 11            mov a, b
3287   1C6F 26 04 00      mov b, $4
3288   1C72 FD 39         mov c, b
3289   1C74 A5            ashr a, cl
3290   1C75 27            mov b, a
3291   1C76 E4            pop a
3292   1C77             ; END SHIFT
3293   1C77 56            add b, a
3294   1C78 E4            pop a
3295   1C79             ; END TERMS
3296   1C79 E7            pop d
3297   1C7A FD 3E         mov [d], bl
3298   1C7C             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
3299   1C7C FA F2 FF      lea d, [bp + -14] ; $output_buffer
3300   1C7F D7            push a
3301   1C80 DA            push d
3302   1C81 26 02 00      mov b, $2
3303   1C84 E7            pop d
3304   1C85 5A            add d, b
3305   1C86 E4            pop a
3306   1C87 DA            push d
3307   1C88 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3308   1C8B D7            push a
3309   1C8C DA            push d
3310   1C8D 26 01 00      mov b, $1
3311   1C90 E7            pop d
3312   1C91 5A            add d, b
3313   1C92 E4            pop a
3314   1C93 32            mov bl, [d]
3315   1C94 A7 00         mov bh, 0
3316   1C96 D7            push a
3317   1C97 11            mov a, b
3318   1C98 26 0F 00      mov b, $f
3319   1C9B FD 92         and b, a ; &
3320   1C9D E4            pop a
3321   1C9E             ; START SHIFT
3322   1C9E D7            push a
3323   1C9F 11            mov a, b
3324   1CA0 26 02 00      mov b, $2
3325   1CA3 FD 39         mov c, b
3326   1CA5 9D            shl a, cl
3327   1CA6 27            mov b, a
3328   1CA7 E4            pop a
3329   1CA8             ; END SHIFT
3330   1CA8             ; START TERMS
3331   1CA8 D7            push a
3332   1CA9 11            mov a, b
3333   1CAA FA F6 FF      lea d, [bp + -10] ; $input_buffer
3334   1CAD D7            push a
3335   1CAE DA            push d
3336   1CAF 26 02 00      mov b, $2
3337   1CB2 E7            pop d
3338   1CB3 5A            add d, b
3339   1CB4 E4            pop a
3340   1CB5 32            mov bl, [d]
3341   1CB6 A7 00         mov bh, 0
3342   1CB8 D7            push a
3343   1CB9 11            mov a, b
3344   1CBA 26 C0 00      mov b, $c0
3345   1CBD FD 92         and b, a ; &
3346   1CBF E4            pop a
3347   1CC0             ; START SHIFT
3348   1CC0 D7            push a
3349   1CC1 11            mov a, b
3350   1CC2 26 06 00      mov b, $6
3351   1CC5 FD 39         mov c, b
3352   1CC7 A5            ashr a, cl
3353   1CC8 27            mov b, a
3354   1CC9 E4            pop a
3355   1CCA             ; END SHIFT
3356   1CCA 56            add b, a
3357   1CCB E4            pop a
3358   1CCC             ; END TERMS
3359   1CCC E7            pop d
3360   1CCD FD 3E         mov [d], bl
3361   1CCF             ;; for (k = 0; k < i + 1; k++) { 
3362   1CCF             _for47_init:
3363   1CCF FA FB FF      lea d, [bp + -5] ; $k
3364   1CD2 DA            push d
3365   1CD3 26 00 00      mov b, $0
3366   1CD6 E7            pop d
3367   1CD7 FD 43         mov [d], b
3368   1CD9             _for47_cond:
3369   1CD9 FA FB FF      lea d, [bp + -5] ; $k
3370   1CDC 2A            mov b, [d]
3371   1CDD             ; START RELATIONAL
3372   1CDD D7            push a
3373   1CDE 11            mov a, b
3374   1CDF FA FF FF      lea d, [bp + -1] ; $i
3375   1CE2 2A            mov b, [d]
3376   1CE3             ; START TERMS
3377   1CE3 D7            push a
3378   1CE4 11            mov a, b
3379   1CE5 26 01 00      mov b, $1
3380   1CE8 56            add b, a
3381   1CE9 E4            pop a
3382   1CEA             ; END TERMS
3383   1CEA B0            cmp a, b
3384   1CEB FD 73         slt ; < (signed)
3385   1CED E4            pop a
3386   1CEE             ; END RELATIONAL
3387   1CEE C0 00 00      cmp b, 0
3388   1CF1 C6 41 1D      je _for47_exit
3389   1CF4             _for47_block:
3390   1CF4             ;; output[j++] = base64_table[output_buffer[k]]; 
3391   1CF4 FA 07 00      lea d, [bp + 7] ; $output
3392   1CF7 FD 2A         mov d, [d]
3393   1CF9 D7            push a
3394   1CFA DA            push d
3395   1CFB FA FD FF      lea d, [bp + -3] ; $j
3396   1CFE 2A            mov b, [d]
3397   1CFF FD 77         inc b
3398   1D01 FA FD FF      lea d, [bp + -3] ; $j
3399   1D04 FD 43         mov [d], b
3400   1D06 FD 7D         dec b
3401   1D08 E7            pop d
3402   1D09 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3403   1D0D E4            pop a
3404   1D0E DA            push d
3405   1D0F 3B 27 23      mov d, _base64_table ; $base64_table
3406   1D12 FD 2A         mov d, [d]
3407   1D14 D7            push a
3408   1D15 DA            push d
3409   1D16 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3410   1D19 D7            push a
3411   1D1A DA            push d
3412   1D1B FA FB FF      lea d, [bp + -5] ; $k
3413   1D1E 2A            mov b, [d]
3414   1D1F E7            pop d
3415   1D20 5A            add d, b
3416   1D21 E4            pop a
3417   1D22 32            mov bl, [d]
3418   1D23 A7 00         mov bh, 0
3419   1D25 E7            pop d
3420   1D26 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3421   1D2A E4            pop a
3422   1D2B 32            mov bl, [d]
3423   1D2C A7 00         mov bh, 0
3424   1D2E E7            pop d
3425   1D2F FD 3E         mov [d], bl
3426   1D31             _for47_update:
3427   1D31 FA FB FF      lea d, [bp + -5] ; $k
3428   1D34 2A            mov b, [d]
3429   1D35 FD 77         inc b
3430   1D37 FA FB FF      lea d, [bp + -5] ; $k
3431   1D3A FD 43         mov [d], b
3432   1D3C FD 7D         dec b
3433   1D3E 0A D9 1C      jmp _for47_cond
3434   1D41             _for47_exit:
3435   1D41             ;; while (i++ < 3) { 
3436   1D41             _while48_cond:
3437   1D41 FA FF FF      lea d, [bp + -1] ; $i
3438   1D44 2A            mov b, [d]
3439   1D45 FD 77         inc b
3440   1D47 FA FF FF      lea d, [bp + -1] ; $i
3441   1D4A FD 43         mov [d], b
3442   1D4C FD 7D         dec b
3443   1D4E             ; START RELATIONAL
3444   1D4E D7            push a
3445   1D4F 11            mov a, b
3446   1D50 26 03 00      mov b, $3
3447   1D53 B0            cmp a, b
3448   1D54 FD 73         slt ; < (signed)
3449   1D56 E4            pop a
3450   1D57             ; END RELATIONAL
3451   1D57 C0 00 00      cmp b, 0
3452   1D5A C6 81 1D      je _while48_exit
3453   1D5D             _while48_block:
3454   1D5D             ;; output[j++] = '='; 
3455   1D5D FA 07 00      lea d, [bp + 7] ; $output
3456   1D60 FD 2A         mov d, [d]
3457   1D62 D7            push a
3458   1D63 DA            push d
3459   1D64 FA FD FF      lea d, [bp + -3] ; $j
3460   1D67 2A            mov b, [d]
3461   1D68 FD 77         inc b
3462   1D6A FA FD FF      lea d, [bp + -3] ; $j
3463   1D6D FD 43         mov [d], b
3464   1D6F FD 7D         dec b
3465   1D71 E7            pop d
3466   1D72 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3467   1D76 E4            pop a
3468   1D77 DA            push d
3469   1D78 26 3D 00      mov b, $3d
3470   1D7B E7            pop d
3471   1D7C FD 3E         mov [d], bl
3472   1D7E 0A 41 1D      jmp _while48_cond
3473   1D81             _while48_exit:
3474   1D81 0A 84 1D      jmp _if45_exit
3475   1D84             _if45_exit:
3476   1D84             ;; output[j] = '\0'; 
3477   1D84 FA 07 00      lea d, [bp + 7] ; $output
3478   1D87 FD 2A         mov d, [d]
3479   1D89 D7            push a
3480   1D8A DA            push d
3481   1D8B FA FD FF      lea d, [bp + -3] ; $j
3482   1D8E 2A            mov b, [d]
3483   1D8F E7            pop d
3484   1D90 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3485   1D94 E4            pop a
3486   1D95 DA            push d
3487   1D96 26 00 00      mov b, $0
3488   1D99 E7            pop d
3489   1D9A FD 3E         mov [d], bl
3490   1D9C F9            leave
3491   1D9D 09            ret
3492   1D9E             
3493   1D9E             base64_char_value:
3494   1D9E F8 00 00      enter 0 ; (push bp; mov bp, sp)
3495   1DA1             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
3496   1DA1             _if49_cond:
3497   1DA1 FA 05 00      lea d, [bp + 5] ; $c
3498   1DA4 32            mov bl, [d]
3499   1DA5 A7 00         mov bh, 0
3500   1DA7             ; START RELATIONAL
3501   1DA7 D7            push a
3502   1DA8 11            mov a, b
3503   1DA9 26 41 00      mov b, $41
3504   1DAC B0            cmp a, b
3505   1DAD FD 80         sge ; >=
3506   1DAF E4            pop a
3507   1DB0             ; END RELATIONAL
3508   1DB0             ; START LOGICAL AND
3509   1DB0 D7            push a
3510   1DB1 11            mov a, b
3511   1DB2 FA 05 00      lea d, [bp + 5] ; $c
3512   1DB5 32            mov bl, [d]
3513   1DB6 A7 00         mov bh, 0
3514   1DB8             ; START RELATIONAL
3515   1DB8 D7            push a
3516   1DB9 11            mov a, b
3517   1DBA 26 5A 00      mov b, $5a
3518   1DBD B0            cmp a, b
3519   1DBE FD 74         sle ; <= (signed)
3520   1DC0 E4            pop a
3521   1DC1             ; END RELATIONAL
3522   1DC1 FD A7         sand a, b
3523   1DC3 E4            pop a
3524   1DC4             ; END LOGICAL AND
3525   1DC4 C0 00 00      cmp b, 0
3526   1DC7 C6 DD 1D      je _if49_exit
3527   1DCA             _if49_true:
3528   1DCA             ;; return c - 'A'; 
3529   1DCA FA 05 00      lea d, [bp + 5] ; $c
3530   1DCD 32            mov bl, [d]
3531   1DCE A7 00         mov bh, 0
3532   1DD0             ; START TERMS
3533   1DD0 D7            push a
3534   1DD1 11            mov a, b
3535   1DD2 26 41 00      mov b, $41
3536   1DD5 60            sub a, b
3537   1DD6 27            mov b, a
3538   1DD7 E4            pop a
3539   1DD8             ; END TERMS
3540   1DD8 F9            leave
3541   1DD9 09            ret
3542   1DDA 0A DD 1D      jmp _if49_exit
3543   1DDD             _if49_exit:
3544   1DDD             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
3545   1DDD             _if50_cond:
3546   1DDD FA 05 00      lea d, [bp + 5] ; $c
3547   1DE0 32            mov bl, [d]
3548   1DE1 A7 00         mov bh, 0
3549   1DE3             ; START RELATIONAL
3550   1DE3 D7            push a
3551   1DE4 11            mov a, b
3552   1DE5 26 61 00      mov b, $61
3553   1DE8 B0            cmp a, b
3554   1DE9 FD 80         sge ; >=
3555   1DEB E4            pop a
3556   1DEC             ; END RELATIONAL
3557   1DEC             ; START LOGICAL AND
3558   1DEC D7            push a
3559   1DED 11            mov a, b
3560   1DEE FA 05 00      lea d, [bp + 5] ; $c
3561   1DF1 32            mov bl, [d]
3562   1DF2 A7 00         mov bh, 0
3563   1DF4             ; START RELATIONAL
3564   1DF4 D7            push a
3565   1DF5 11            mov a, b
3566   1DF6 26 7A 00      mov b, $7a
3567   1DF9 B0            cmp a, b
3568   1DFA FD 74         sle ; <= (signed)
3569   1DFC E4            pop a
3570   1DFD             ; END RELATIONAL
3571   1DFD FD A7         sand a, b
3572   1DFF E4            pop a
3573   1E00             ; END LOGICAL AND
3574   1E00 C0 00 00      cmp b, 0
3575   1E03 C6 1E 1E      je _if50_exit
3576   1E06             _if50_true:
3577   1E06             ;; return c - 'a' + 26; 
3578   1E06 FA 05 00      lea d, [bp + 5] ; $c
3579   1E09 32            mov bl, [d]
3580   1E0A A7 00         mov bh, 0
3581   1E0C             ; START TERMS
3582   1E0C D7            push a
3583   1E0D 11            mov a, b
3584   1E0E 26 61 00      mov b, $61
3585   1E11 60            sub a, b
3586   1E12 27            mov b, a
3587   1E13 11            mov a, b
3588   1E14 26 1A 00      mov b, $1a
3589   1E17 56            add b, a
3590   1E18 E4            pop a
3591   1E19             ; END TERMS
3592   1E19 F9            leave
3593   1E1A 09            ret
3594   1E1B 0A 1E 1E      jmp _if50_exit
3595   1E1E             _if50_exit:
3596   1E1E             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
3597   1E1E             _if51_cond:
3598   1E1E FA 05 00      lea d, [bp + 5] ; $c
3599   1E21 32            mov bl, [d]
3600   1E22 A7 00         mov bh, 0
3601   1E24             ; START RELATIONAL
3602   1E24 D7            push a
3603   1E25 11            mov a, b
3604   1E26 26 30 00      mov b, $30
3605   1E29 B0            cmp a, b
3606   1E2A FD 80         sge ; >=
3607   1E2C E4            pop a
3608   1E2D             ; END RELATIONAL
3609   1E2D             ; START LOGICAL AND
3610   1E2D D7            push a
3611   1E2E 11            mov a, b
3612   1E2F FA 05 00      lea d, [bp + 5] ; $c
3613   1E32 32            mov bl, [d]
3614   1E33 A7 00         mov bh, 0
3615   1E35             ; START RELATIONAL
3616   1E35 D7            push a
3617   1E36 11            mov a, b
3618   1E37 26 39 00      mov b, $39
3619   1E3A B0            cmp a, b
3620   1E3B FD 74         sle ; <= (signed)
3621   1E3D E4            pop a
3622   1E3E             ; END RELATIONAL
3623   1E3E FD A7         sand a, b
3624   1E40 E4            pop a
3625   1E41             ; END LOGICAL AND
3626   1E41 C0 00 00      cmp b, 0
3627   1E44 C6 5F 1E      je _if51_exit
3628   1E47             _if51_true:
3629   1E47             ;; return c - '0' + 52; 
3630   1E47 FA 05 00      lea d, [bp + 5] ; $c
3631   1E4A 32            mov bl, [d]
3632   1E4B A7 00         mov bh, 0
3633   1E4D             ; START TERMS
3634   1E4D D7            push a
3635   1E4E 11            mov a, b
3636   1E4F 26 30 00      mov b, $30
3637   1E52 60            sub a, b
3638   1E53 27            mov b, a
3639   1E54 11            mov a, b
3640   1E55 26 34 00      mov b, $34
3641   1E58 56            add b, a
3642   1E59 E4            pop a
3643   1E5A             ; END TERMS
3644   1E5A F9            leave
3645   1E5B 09            ret
3646   1E5C 0A 5F 1E      jmp _if51_exit
3647   1E5F             _if51_exit:
3648   1E5F             ;; if (c == '+') return 62; 
3649   1E5F             _if52_cond:
3650   1E5F FA 05 00      lea d, [bp + 5] ; $c
3651   1E62 32            mov bl, [d]
3652   1E63 A7 00         mov bh, 0
3653   1E65             ; START RELATIONAL
3654   1E65 D7            push a
3655   1E66 11            mov a, b
3656   1E67 26 2B 00      mov b, $2b
3657   1E6A B0            cmp a, b
3658   1E6B FD 71         seq ; ==
3659   1E6D E4            pop a
3660   1E6E             ; END RELATIONAL
3661   1E6E C0 00 00      cmp b, 0
3662   1E71 C6 7C 1E      je _if52_exit
3663   1E74             _if52_true:
3664   1E74             ;; return 62; 
3665   1E74 26 3E 00      mov b, $3e
3666   1E77 F9            leave
3667   1E78 09            ret
3668   1E79 0A 7C 1E      jmp _if52_exit
3669   1E7C             _if52_exit:
3670   1E7C             ;; if (c == '/') return 63; 
3671   1E7C             _if53_cond:
3672   1E7C FA 05 00      lea d, [bp + 5] ; $c
3673   1E7F 32            mov bl, [d]
3674   1E80 A7 00         mov bh, 0
3675   1E82             ; START RELATIONAL
3676   1E82 D7            push a
3677   1E83 11            mov a, b
3678   1E84 26 2F 00      mov b, $2f
3679   1E87 B0            cmp a, b
3680   1E88 FD 71         seq ; ==
3681   1E8A E4            pop a
3682   1E8B             ; END RELATIONAL
3683   1E8B C0 00 00      cmp b, 0
3684   1E8E C6 99 1E      je _if53_exit
3685   1E91             _if53_true:
3686   1E91             ;; return 63; 
3687   1E91 26 3F 00      mov b, $3f
3688   1E94 F9            leave
3689   1E95 09            ret
3690   1E96 0A 99 1E      jmp _if53_exit
3691   1E99             _if53_exit:
3692   1E99             ;; return -1; 
3693   1E99 26 01 00      mov b, $1
3694   1E9C FD 97         neg b
3695   1E9E F9            leave
3696   1E9F 09            ret
3697   1EA0             
3698   1EA0             base64_decode:
3699   1EA0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3700   1EA3             ;; int i = 0, j = 0, k = 0; 
3701   1EA3 52 02 00      sub sp, 2 ; i
3702   1EA6             ; --- START LOCAL VAR INITIALIZATION
3703   1EA6 FA FF FF      lea d, [bp + -1] ; $i
3704   1EA9 DA            push d
3705   1EAA 26 00 00      mov b, $0
3706   1EAD E7            pop d
3707   1EAE FD 43         mov [d], b
3708   1EB0             ; --- END LOCAL VAR INITIALIZATION
3709   1EB0 52 02 00      sub sp, 2 ; j
3710   1EB3             ; --- START LOCAL VAR INITIALIZATION
3711   1EB3 FA FD FF      lea d, [bp + -3] ; $j
3712   1EB6 DA            push d
3713   1EB7 26 00 00      mov b, $0
3714   1EBA E7            pop d
3715   1EBB FD 43         mov [d], b
3716   1EBD             ; --- END LOCAL VAR INITIALIZATION
3717   1EBD 52 02 00      sub sp, 2 ; k
3718   1EC0             ; --- START LOCAL VAR INITIALIZATION
3719   1EC0 FA FB FF      lea d, [bp + -5] ; $k
3720   1EC3 DA            push d
3721   1EC4 26 00 00      mov b, $0
3722   1EC7 E7            pop d
3723   1EC8 FD 43         mov [d], b
3724   1ECA             ; --- END LOCAL VAR INITIALIZATION
3725   1ECA             ;; int input_len; 
3726   1ECA 52 02 00      sub sp, 2 ; input_len
3727   1ECD             ;; unsigned char input_buffer[4]; 
3728   1ECD 52 04 00      sub sp, 4 ; input_buffer
3729   1ED0             ;; unsigned char output_buffer[3]; 
3730   1ED0 52 03 00      sub sp, 3 ; output_buffer
3731   1ED3             ;; input_len = strlen(input); 
3732   1ED3 FA F9 FF      lea d, [bp + -7] ; $input_len
3733   1ED6 DA            push d
3734   1ED7 FA 05 00      lea d, [bp + 5] ; $input
3735   1EDA 2A            mov b, [d]
3736   1EDB FD AB         swp b
3737   1EDD D8            push b
3738   1EDE 07 F5 05      call strlen
3739   1EE1 51 02 00      add sp, 2
3740   1EE4 E7            pop d
3741   1EE5 FD 43         mov [d], b
3742   1EE7             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
3743   1EE7             _while54_cond:
3744   1EE7 FA F9 FF      lea d, [bp + -7] ; $input_len
3745   1EEA 2A            mov b, [d]
3746   1EEB FD 7D         dec b
3747   1EED FA F9 FF      lea d, [bp + -7] ; $input_len
3748   1EF0 FD 43         mov [d], b
3749   1EF2 FD 77         inc b
3750   1EF4             ; START LOGICAL AND
3751   1EF4 D7            push a
3752   1EF5 11            mov a, b
3753   1EF6 FA 05 00      lea d, [bp + 5] ; $input
3754   1EF9 FD 2A         mov d, [d]
3755   1EFB D7            push a
3756   1EFC DA            push d
3757   1EFD FA FB FF      lea d, [bp + -5] ; $k
3758   1F00 2A            mov b, [d]
3759   1F01 E7            pop d
3760   1F02 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3761   1F06 E4            pop a
3762   1F07 32            mov bl, [d]
3763   1F08 A7 00         mov bh, 0
3764   1F0A             ; START RELATIONAL
3765   1F0A D7            push a
3766   1F0B 11            mov a, b
3767   1F0C 26 3D 00      mov b, $3d
3768   1F0F B0            cmp a, b
3769   1F10 FD 72         sneq ; !=
3770   1F12 E4            pop a
3771   1F13             ; END RELATIONAL
3772   1F13 FD A7         sand a, b
3773   1F15 11            mov a, b
3774   1F16 FA 05 00      lea d, [bp + 5] ; $input
3775   1F19 FD 2A         mov d, [d]
3776   1F1B D7            push a
3777   1F1C DA            push d
3778   1F1D FA FB FF      lea d, [bp + -5] ; $k
3779   1F20 2A            mov b, [d]
3780   1F21 E7            pop d
3781   1F22 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3782   1F26 E4            pop a
3783   1F27 32            mov bl, [d]
3784   1F28 A7 00         mov bh, 0
3785   1F2A DD            push bl
3786   1F2B 07 9E 1D      call base64_char_value
3787   1F2E 51 01 00      add sp, 1
3788   1F31             ; START RELATIONAL
3789   1F31 D7            push a
3790   1F32 11            mov a, b
3791   1F33 26 01 00      mov b, $1
3792   1F36 FD 97         neg b
3793   1F38 B0            cmp a, b
3794   1F39 FD 72         sneq ; !=
3795   1F3B E4            pop a
3796   1F3C             ; END RELATIONAL
3797   1F3C FD A7         sand a, b
3798   1F3E E4            pop a
3799   1F3F             ; END LOGICAL AND
3800   1F3F C0 00 00      cmp b, 0
3801   1F42 C6 2A 21      je _while54_exit
3802   1F45             _while54_block:
3803   1F45             ;; input_buffer[i++] = input[k++]; 
3804   1F45 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3805   1F48 D7            push a
3806   1F49 DA            push d
3807   1F4A FA FF FF      lea d, [bp + -1] ; $i
3808   1F4D 2A            mov b, [d]
3809   1F4E FD 77         inc b
3810   1F50 FA FF FF      lea d, [bp + -1] ; $i
3811   1F53 FD 43         mov [d], b
3812   1F55 FD 7D         dec b
3813   1F57 E7            pop d
3814   1F58 5A            add d, b
3815   1F59 E4            pop a
3816   1F5A DA            push d
3817   1F5B FA 05 00      lea d, [bp + 5] ; $input
3818   1F5E FD 2A         mov d, [d]
3819   1F60 D7            push a
3820   1F61 DA            push d
3821   1F62 FA FB FF      lea d, [bp + -5] ; $k
3822   1F65 2A            mov b, [d]
3823   1F66 FD 77         inc b
3824   1F68 FA FB FF      lea d, [bp + -5] ; $k
3825   1F6B FD 43         mov [d], b
3826   1F6D FD 7D         dec b
3827   1F6F E7            pop d
3828   1F70 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3829   1F74 E4            pop a
3830   1F75 32            mov bl, [d]
3831   1F76 A7 00         mov bh, 0
3832   1F78 E7            pop d
3833   1F79 FD 3E         mov [d], bl
3834   1F7B             ;; if (i == 4) { 
3835   1F7B             _if55_cond:
3836   1F7B FA FF FF      lea d, [bp + -1] ; $i
3837   1F7E 2A            mov b, [d]
3838   1F7F             ; START RELATIONAL
3839   1F7F D7            push a
3840   1F80 11            mov a, b
3841   1F81 26 04 00      mov b, $4
3842   1F84 B0            cmp a, b
3843   1F85 FD 71         seq ; ==
3844   1F87 E4            pop a
3845   1F88             ; END RELATIONAL
3846   1F88 C0 00 00      cmp b, 0
3847   1F8B C6 27 21      je _if55_exit
3848   1F8E             _if55_true:
3849   1F8E             ;; for (i = 0; i < 4; i++) { 
3850   1F8E             _for56_init:
3851   1F8E FA FF FF      lea d, [bp + -1] ; $i
3852   1F91 DA            push d
3853   1F92 26 00 00      mov b, $0
3854   1F95 E7            pop d
3855   1F96 FD 43         mov [d], b
3856   1F98             _for56_cond:
3857   1F98 FA FF FF      lea d, [bp + -1] ; $i
3858   1F9B 2A            mov b, [d]
3859   1F9C             ; START RELATIONAL
3860   1F9C D7            push a
3861   1F9D 11            mov a, b
3862   1F9E 26 04 00      mov b, $4
3863   1FA1 B0            cmp a, b
3864   1FA2 FD 73         slt ; < (signed)
3865   1FA4 E4            pop a
3866   1FA5             ; END RELATIONAL
3867   1FA5 C0 00 00      cmp b, 0
3868   1FA8 C6 E1 1F      je _for56_exit
3869   1FAB             _for56_block:
3870   1FAB             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
3871   1FAB FA F5 FF      lea d, [bp + -11] ; $input_buffer
3872   1FAE D7            push a
3873   1FAF DA            push d
3874   1FB0 FA FF FF      lea d, [bp + -1] ; $i
3875   1FB3 2A            mov b, [d]
3876   1FB4 E7            pop d
3877   1FB5 5A            add d, b
3878   1FB6 E4            pop a
3879   1FB7 DA            push d
3880   1FB8 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3881   1FBB D7            push a
3882   1FBC DA            push d
3883   1FBD FA FF FF      lea d, [bp + -1] ; $i
3884   1FC0 2A            mov b, [d]
3885   1FC1 E7            pop d
3886   1FC2 5A            add d, b
3887   1FC3 E4            pop a
3888   1FC4 32            mov bl, [d]
3889   1FC5 A7 00         mov bh, 0
3890   1FC7 DD            push bl
3891   1FC8 07 9E 1D      call base64_char_value
3892   1FCB 51 01 00      add sp, 1
3893   1FCE E7            pop d
3894   1FCF FD 3E         mov [d], bl
3895   1FD1             _for56_update:
3896   1FD1 FA FF FF      lea d, [bp + -1] ; $i
3897   1FD4 2A            mov b, [d]
3898   1FD5 FD 77         inc b
3899   1FD7 FA FF FF      lea d, [bp + -1] ; $i
3900   1FDA FD 43         mov [d], b
3901   1FDC FD 7D         dec b
3902   1FDE 0A 98 1F      jmp _for56_cond
3903   1FE1             _for56_exit:
3904   1FE1             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
3905   1FE1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3906   1FE4 D7            push a
3907   1FE5 DA            push d
3908   1FE6 26 00 00      mov b, $0
3909   1FE9 E7            pop d
3910   1FEA 5A            add d, b
3911   1FEB E4            pop a
3912   1FEC DA            push d
3913   1FED FA F5 FF      lea d, [bp + -11] ; $input_buffer
3914   1FF0 D7            push a
3915   1FF1 DA            push d
3916   1FF2 26 00 00      mov b, $0
3917   1FF5 E7            pop d
3918   1FF6 5A            add d, b
3919   1FF7 E4            pop a
3920   1FF8 32            mov bl, [d]
3921   1FF9 A7 00         mov bh, 0
3922   1FFB             ; START SHIFT
3923   1FFB D7            push a
3924   1FFC 11            mov a, b
3925   1FFD 26 02 00      mov b, $2
3926   2000 FD 39         mov c, b
3927   2002 9D            shl a, cl
3928   2003 27            mov b, a
3929   2004 E4            pop a
3930   2005             ; END SHIFT
3931   2005             ; START TERMS
3932   2005 D7            push a
3933   2006 11            mov a, b
3934   2007 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3935   200A D7            push a
3936   200B DA            push d
3937   200C 26 01 00      mov b, $1
3938   200F E7            pop d
3939   2010 5A            add d, b
3940   2011 E4            pop a
3941   2012 32            mov bl, [d]
3942   2013 A7 00         mov bh, 0
3943   2015 D7            push a
3944   2016 11            mov a, b
3945   2017 26 30 00      mov b, $30
3946   201A FD 92         and b, a ; &
3947   201C E4            pop a
3948   201D             ; START SHIFT
3949   201D D7            push a
3950   201E 11            mov a, b
3951   201F 26 04 00      mov b, $4
3952   2022 FD 39         mov c, b
3953   2024 A5            ashr a, cl
3954   2025 27            mov b, a
3955   2026 E4            pop a
3956   2027             ; END SHIFT
3957   2027 56            add b, a
3958   2028 E4            pop a
3959   2029             ; END TERMS
3960   2029 E7            pop d
3961   202A FD 3E         mov [d], bl
3962   202C             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
3963   202C FA F2 FF      lea d, [bp + -14] ; $output_buffer
3964   202F D7            push a
3965   2030 DA            push d
3966   2031 26 01 00      mov b, $1
3967   2034 E7            pop d
3968   2035 5A            add d, b
3969   2036 E4            pop a
3970   2037 DA            push d
3971   2038 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3972   203B D7            push a
3973   203C DA            push d
3974   203D 26 01 00      mov b, $1
3975   2040 E7            pop d
3976   2041 5A            add d, b
3977   2042 E4            pop a
3978   2043 32            mov bl, [d]
3979   2044 A7 00         mov bh, 0
3980   2046 D7            push a
3981   2047 11            mov a, b
3982   2048 26 0F 00      mov b, $f
3983   204B FD 92         and b, a ; &
3984   204D E4            pop a
3985   204E             ; START SHIFT
3986   204E D7            push a
3987   204F 11            mov a, b
3988   2050 26 04 00      mov b, $4
3989   2053 FD 39         mov c, b
3990   2055 9D            shl a, cl
3991   2056 27            mov b, a
3992   2057 E4            pop a
3993   2058             ; END SHIFT
3994   2058             ; START TERMS
3995   2058 D7            push a
3996   2059 11            mov a, b
3997   205A FA F5 FF      lea d, [bp + -11] ; $input_buffer
3998   205D D7            push a
3999   205E DA            push d
4000   205F 26 02 00      mov b, $2
4001   2062 E7            pop d
4002   2063 5A            add d, b
4003   2064 E4            pop a
4004   2065 32            mov bl, [d]
4005   2066 A7 00         mov bh, 0
4006   2068 D7            push a
4007   2069 11            mov a, b
4008   206A 26 3C 00      mov b, $3c
4009   206D FD 92         and b, a ; &
4010   206F E4            pop a
4011   2070             ; START SHIFT
4012   2070 D7            push a
4013   2071 11            mov a, b
4014   2072 26 02 00      mov b, $2
4015   2075 FD 39         mov c, b
4016   2077 A5            ashr a, cl
4017   2078 27            mov b, a
4018   2079 E4            pop a
4019   207A             ; END SHIFT
4020   207A 56            add b, a
4021   207B E4            pop a
4022   207C             ; END TERMS
4023   207C E7            pop d
4024   207D FD 3E         mov [d], bl
4025   207F             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
4026   207F FA F2 FF      lea d, [bp + -14] ; $output_buffer
4027   2082 D7            push a
4028   2083 DA            push d
4029   2084 26 02 00      mov b, $2
4030   2087 E7            pop d
4031   2088 5A            add d, b
4032   2089 E4            pop a
4033   208A DA            push d
4034   208B FA F5 FF      lea d, [bp + -11] ; $input_buffer
4035   208E D7            push a
4036   208F DA            push d
4037   2090 26 02 00      mov b, $2
4038   2093 E7            pop d
4039   2094 5A            add d, b
4040   2095 E4            pop a
4041   2096 32            mov bl, [d]
4042   2097 A7 00         mov bh, 0
4043   2099 D7            push a
4044   209A 11            mov a, b
4045   209B 26 03 00      mov b, $3
4046   209E FD 92         and b, a ; &
4047   20A0 E4            pop a
4048   20A1             ; START SHIFT
4049   20A1 D7            push a
4050   20A2 11            mov a, b
4051   20A3 26 06 00      mov b, $6
4052   20A6 FD 39         mov c, b
4053   20A8 9D            shl a, cl
4054   20A9 27            mov b, a
4055   20AA E4            pop a
4056   20AB             ; END SHIFT
4057   20AB             ; START TERMS
4058   20AB D7            push a
4059   20AC 11            mov a, b
4060   20AD FA F5 FF      lea d, [bp + -11] ; $input_buffer
4061   20B0 D7            push a
4062   20B1 DA            push d
4063   20B2 26 03 00      mov b, $3
4064   20B5 E7            pop d
4065   20B6 5A            add d, b
4066   20B7 E4            pop a
4067   20B8 32            mov bl, [d]
4068   20B9 A7 00         mov bh, 0
4069   20BB 56            add b, a
4070   20BC E4            pop a
4071   20BD             ; END TERMS
4072   20BD E7            pop d
4073   20BE FD 3E         mov [d], bl
4074   20C0             ;; for (i = 0; i < 3; i++) { 
4075   20C0             _for57_init:
4076   20C0 FA FF FF      lea d, [bp + -1] ; $i
4077   20C3 DA            push d
4078   20C4 26 00 00      mov b, $0
4079   20C7 E7            pop d
4080   20C8 FD 43         mov [d], b
4081   20CA             _for57_cond:
4082   20CA FA FF FF      lea d, [bp + -1] ; $i
4083   20CD 2A            mov b, [d]
4084   20CE             ; START RELATIONAL
4085   20CE D7            push a
4086   20CF 11            mov a, b
4087   20D0 26 03 00      mov b, $3
4088   20D3 B0            cmp a, b
4089   20D4 FD 73         slt ; < (signed)
4090   20D6 E4            pop a
4091   20D7             ; END RELATIONAL
4092   20D7 C0 00 00      cmp b, 0
4093   20DA C6 1A 21      je _for57_exit
4094   20DD             _for57_block:
4095   20DD             ;; output[j++] = output_buffer[i]; 
4096   20DD FA 07 00      lea d, [bp + 7] ; $output
4097   20E0 FD 2A         mov d, [d]
4098   20E2 D7            push a
4099   20E3 DA            push d
4100   20E4 FA FD FF      lea d, [bp + -3] ; $j
4101   20E7 2A            mov b, [d]
4102   20E8 FD 77         inc b
4103   20EA FA FD FF      lea d, [bp + -3] ; $j
4104   20ED FD 43         mov [d], b
4105   20EF FD 7D         dec b
4106   20F1 E7            pop d
4107   20F2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4108   20F6 E4            pop a
4109   20F7 DA            push d
4110   20F8 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4111   20FB D7            push a
4112   20FC DA            push d
4113   20FD FA FF FF      lea d, [bp + -1] ; $i
4114   2100 2A            mov b, [d]
4115   2101 E7            pop d
4116   2102 5A            add d, b
4117   2103 E4            pop a
4118   2104 32            mov bl, [d]
4119   2105 A7 00         mov bh, 0
4120   2107 E7            pop d
4121   2108 FD 3E         mov [d], bl
4122   210A             _for57_update:
4123   210A FA FF FF      lea d, [bp + -1] ; $i
4124   210D 2A            mov b, [d]
4125   210E FD 77         inc b
4126   2110 FA FF FF      lea d, [bp + -1] ; $i
4127   2113 FD 43         mov [d], b
4128   2115 FD 7D         dec b
4129   2117 0A CA 20      jmp _for57_cond
4130   211A             _for57_exit:
4131   211A             ;; i = 0; 
4132   211A FA FF FF      lea d, [bp + -1] ; $i
4133   211D DA            push d
4134   211E 26 00 00      mov b, $0
4135   2121 E7            pop d
4136   2122 FD 43         mov [d], b
4137   2124 0A 27 21      jmp _if55_exit
4138   2127             _if55_exit:
4139   2127 0A E7 1E      jmp _while54_cond
4140   212A             _while54_exit:
4141   212A             ;; if (i) { 
4142   212A             _if58_cond:
4143   212A FA FF FF      lea d, [bp + -1] ; $i
4144   212D 2A            mov b, [d]
4145   212E C0 00 00      cmp b, 0
4146   2131 C6 CC 22      je _if58_exit
4147   2134             _if58_true:
4148   2134             ;; for (k = i; k < 4; k++) { 
4149   2134             _for59_init:
4150   2134 FA FB FF      lea d, [bp + -5] ; $k
4151   2137 DA            push d
4152   2138 FA FF FF      lea d, [bp + -1] ; $i
4153   213B 2A            mov b, [d]
4154   213C E7            pop d
4155   213D FD 43         mov [d], b
4156   213F             _for59_cond:
4157   213F FA FB FF      lea d, [bp + -5] ; $k
4158   2142 2A            mov b, [d]
4159   2143             ; START RELATIONAL
4160   2143 D7            push a
4161   2144 11            mov a, b
4162   2145 26 04 00      mov b, $4
4163   2148 B0            cmp a, b
4164   2149 FD 73         slt ; < (signed)
4165   214B E4            pop a
4166   214C             ; END RELATIONAL
4167   214C C0 00 00      cmp b, 0
4168   214F C6 75 21      je _for59_exit
4169   2152             _for59_block:
4170   2152             ;; input_buffer[k] = 0; 
4171   2152 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4172   2155 D7            push a
4173   2156 DA            push d
4174   2157 FA FB FF      lea d, [bp + -5] ; $k
4175   215A 2A            mov b, [d]
4176   215B E7            pop d
4177   215C 5A            add d, b
4178   215D E4            pop a
4179   215E DA            push d
4180   215F 26 00 00      mov b, $0
4181   2162 E7            pop d
4182   2163 FD 3E         mov [d], bl
4183   2165             _for59_update:
4184   2165 FA FB FF      lea d, [bp + -5] ; $k
4185   2168 2A            mov b, [d]
4186   2169 FD 77         inc b
4187   216B FA FB FF      lea d, [bp + -5] ; $k
4188   216E FD 43         mov [d], b
4189   2170 FD 7D         dec b
4190   2172 0A 3F 21      jmp _for59_cond
4191   2175             _for59_exit:
4192   2175             ;; for (k = 0; k < 4; k++) { 
4193   2175             _for60_init:
4194   2175 FA FB FF      lea d, [bp + -5] ; $k
4195   2178 DA            push d
4196   2179 26 00 00      mov b, $0
4197   217C E7            pop d
4198   217D FD 43         mov [d], b
4199   217F             _for60_cond:
4200   217F FA FB FF      lea d, [bp + -5] ; $k
4201   2182 2A            mov b, [d]
4202   2183             ; START RELATIONAL
4203   2183 D7            push a
4204   2184 11            mov a, b
4205   2185 26 04 00      mov b, $4
4206   2188 B0            cmp a, b
4207   2189 FD 73         slt ; < (signed)
4208   218B E4            pop a
4209   218C             ; END RELATIONAL
4210   218C C0 00 00      cmp b, 0
4211   218F C6 C8 21      je _for60_exit
4212   2192             _for60_block:
4213   2192             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
4214   2192 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4215   2195 D7            push a
4216   2196 DA            push d
4217   2197 FA FB FF      lea d, [bp + -5] ; $k
4218   219A 2A            mov b, [d]
4219   219B E7            pop d
4220   219C 5A            add d, b
4221   219D E4            pop a
4222   219E DA            push d
4223   219F FA F5 FF      lea d, [bp + -11] ; $input_buffer
4224   21A2 D7            push a
4225   21A3 DA            push d
4226   21A4 FA FB FF      lea d, [bp + -5] ; $k
4227   21A7 2A            mov b, [d]
4228   21A8 E7            pop d
4229   21A9 5A            add d, b
4230   21AA E4            pop a
4231   21AB 32            mov bl, [d]
4232   21AC A7 00         mov bh, 0
4233   21AE DD            push bl
4234   21AF 07 9E 1D      call base64_char_value
4235   21B2 51 01 00      add sp, 1
4236   21B5 E7            pop d
4237   21B6 FD 3E         mov [d], bl
4238   21B8             _for60_update:
4239   21B8 FA FB FF      lea d, [bp + -5] ; $k
4240   21BB 2A            mov b, [d]
4241   21BC FD 77         inc b
4242   21BE FA FB FF      lea d, [bp + -5] ; $k
4243   21C1 FD 43         mov [d], b
4244   21C3 FD 7D         dec b
4245   21C5 0A 7F 21      jmp _for60_cond
4246   21C8             _for60_exit:
4247   21C8             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
4248   21C8 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4249   21CB D7            push a
4250   21CC DA            push d
4251   21CD 26 00 00      mov b, $0
4252   21D0 E7            pop d
4253   21D1 5A            add d, b
4254   21D2 E4            pop a
4255   21D3 DA            push d
4256   21D4 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4257   21D7 D7            push a
4258   21D8 DA            push d
4259   21D9 26 00 00      mov b, $0
4260   21DC E7            pop d
4261   21DD 5A            add d, b
4262   21DE E4            pop a
4263   21DF 32            mov bl, [d]
4264   21E0 A7 00         mov bh, 0
4265   21E2             ; START SHIFT
4266   21E2 D7            push a
4267   21E3 11            mov a, b
4268   21E4 26 02 00      mov b, $2
4269   21E7 FD 39         mov c, b
4270   21E9 9D            shl a, cl
4271   21EA 27            mov b, a
4272   21EB E4            pop a
4273   21EC             ; END SHIFT
4274   21EC             ; START TERMS
4275   21EC D7            push a
4276   21ED 11            mov a, b
4277   21EE FA F5 FF      lea d, [bp + -11] ; $input_buffer
4278   21F1 D7            push a
4279   21F2 DA            push d
4280   21F3 26 01 00      mov b, $1
4281   21F6 E7            pop d
4282   21F7 5A            add d, b
4283   21F8 E4            pop a
4284   21F9 32            mov bl, [d]
4285   21FA A7 00         mov bh, 0
4286   21FC D7            push a
4287   21FD 11            mov a, b
4288   21FE 26 30 00      mov b, $30
4289   2201 FD 92         and b, a ; &
4290   2203 E4            pop a
4291   2204             ; START SHIFT
4292   2204 D7            push a
4293   2205 11            mov a, b
4294   2206 26 04 00      mov b, $4
4295   2209 FD 39         mov c, b
4296   220B A5            ashr a, cl
4297   220C 27            mov b, a
4298   220D E4            pop a
4299   220E             ; END SHIFT
4300   220E 56            add b, a
4301   220F E4            pop a
4302   2210             ; END TERMS
4303   2210 E7            pop d
4304   2211 FD 3E         mov [d], bl
4305   2213             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
4306   2213 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4307   2216 D7            push a
4308   2217 DA            push d
4309   2218 26 01 00      mov b, $1
4310   221B E7            pop d
4311   221C 5A            add d, b
4312   221D E4            pop a
4313   221E DA            push d
4314   221F FA F5 FF      lea d, [bp + -11] ; $input_buffer
4315   2222 D7            push a
4316   2223 DA            push d
4317   2224 26 01 00      mov b, $1
4318   2227 E7            pop d
4319   2228 5A            add d, b
4320   2229 E4            pop a
4321   222A 32            mov bl, [d]
4322   222B A7 00         mov bh, 0
4323   222D D7            push a
4324   222E 11            mov a, b
4325   222F 26 0F 00      mov b, $f
4326   2232 FD 92         and b, a ; &
4327   2234 E4            pop a
4328   2235             ; START SHIFT
4329   2235 D7            push a
4330   2236 11            mov a, b
4331   2237 26 04 00      mov b, $4
4332   223A FD 39         mov c, b
4333   223C 9D            shl a, cl
4334   223D 27            mov b, a
4335   223E E4            pop a
4336   223F             ; END SHIFT
4337   223F             ; START TERMS
4338   223F D7            push a
4339   2240 11            mov a, b
4340   2241 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4341   2244 D7            push a
4342   2245 DA            push d
4343   2246 26 02 00      mov b, $2
4344   2249 E7            pop d
4345   224A 5A            add d, b
4346   224B E4            pop a
4347   224C 32            mov bl, [d]
4348   224D A7 00         mov bh, 0
4349   224F D7            push a
4350   2250 11            mov a, b
4351   2251 26 3C 00      mov b, $3c
4352   2254 FD 92         and b, a ; &
4353   2256 E4            pop a
4354   2257             ; START SHIFT
4355   2257 D7            push a
4356   2258 11            mov a, b
4357   2259 26 02 00      mov b, $2
4358   225C FD 39         mov c, b
4359   225E A5            ashr a, cl
4360   225F 27            mov b, a
4361   2260 E4            pop a
4362   2261             ; END SHIFT
4363   2261 56            add b, a
4364   2262 E4            pop a
4365   2263             ; END TERMS
4366   2263 E7            pop d
4367   2264 FD 3E         mov [d], bl
4368   2266             ;; for (k = 0; k < i - 1; k++) { 
4369   2266             _for61_init:
4370   2266 FA FB FF      lea d, [bp + -5] ; $k
4371   2269 DA            push d
4372   226A 26 00 00      mov b, $0
4373   226D E7            pop d
4374   226E FD 43         mov [d], b
4375   2270             _for61_cond:
4376   2270 FA FB FF      lea d, [bp + -5] ; $k
4377   2273 2A            mov b, [d]
4378   2274             ; START RELATIONAL
4379   2274 D7            push a
4380   2275 11            mov a, b
4381   2276 FA FF FF      lea d, [bp + -1] ; $i
4382   2279 2A            mov b, [d]
4383   227A             ; START TERMS
4384   227A D7            push a
4385   227B 11            mov a, b
4386   227C 26 01 00      mov b, $1
4387   227F 60            sub a, b
4388   2280 27            mov b, a
4389   2281 E4            pop a
4390   2282             ; END TERMS
4391   2282 B0            cmp a, b
4392   2283 FD 73         slt ; < (signed)
4393   2285 E4            pop a
4394   2286             ; END RELATIONAL
4395   2286 C0 00 00      cmp b, 0
4396   2289 C6 C9 22      je _for61_exit
4397   228C             _for61_block:
4398   228C             ;; output[j++] = output_buffer[k]; 
4399   228C FA 07 00      lea d, [bp + 7] ; $output
4400   228F FD 2A         mov d, [d]
4401   2291 D7            push a
4402   2292 DA            push d
4403   2293 FA FD FF      lea d, [bp + -3] ; $j
4404   2296 2A            mov b, [d]
4405   2297 FD 77         inc b
4406   2299 FA FD FF      lea d, [bp + -3] ; $j
4407   229C FD 43         mov [d], b
4408   229E FD 7D         dec b
4409   22A0 E7            pop d
4410   22A1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4411   22A5 E4            pop a
4412   22A6 DA            push d
4413   22A7 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4414   22AA D7            push a
4415   22AB DA            push d
4416   22AC FA FB FF      lea d, [bp + -5] ; $k
4417   22AF 2A            mov b, [d]
4418   22B0 E7            pop d
4419   22B1 5A            add d, b
4420   22B2 E4            pop a
4421   22B3 32            mov bl, [d]
4422   22B4 A7 00         mov bh, 0
4423   22B6 E7            pop d
4424   22B7 FD 3E         mov [d], bl
4425   22B9             _for61_update:
4426   22B9 FA FB FF      lea d, [bp + -5] ; $k
4427   22BC 2A            mov b, [d]
4428   22BD FD 77         inc b
4429   22BF FA FB FF      lea d, [bp + -5] ; $k
4430   22C2 FD 43         mov [d], b
4431   22C4 FD 7D         dec b
4432   22C6 0A 70 22      jmp _for61_cond
4433   22C9             _for61_exit:
4434   22C9 0A CC 22      jmp _if58_exit
4435   22CC             _if58_exit:
4436   22CC             ;; output[j] = '\0'; 
4437   22CC FA 07 00      lea d, [bp + 7] ; $output
4438   22CF FD 2A         mov d, [d]
4439   22D1 D7            push a
4440   22D2 DA            push d
4441   22D3 FA FD FF      lea d, [bp + -3] ; $j
4442   22D6 2A            mov b, [d]
4443   22D7 E7            pop d
4444   22D8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4445   22DC E4            pop a
4446   22DD DA            push d
4447   22DE 26 00 00      mov b, $0
4448   22E1 E7            pop d
4449   22E2 FD 3E         mov [d], bl
4450   22E4 F9            leave
4451   22E5 09            ret
4452   22E6             ; --- END TEXT BLOCK
4453   22E6             
4454   22E6             ; --- BEGIN DATA BLOCK
4455   22E6 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
4455   22EA 45 46 47 48 
4455   22EE 49 4A 4B 4C 
4455   22F2 4D 4E 4F 50 
4455   22F6 51 52 53 54 
4455   22FA 55 56 57 58 
4455   22FE 59 5A 61 62 
4455   2302 63 64 65 66 
4455   2306 67 68 69 6A 
4455   230A 6B 6C 6D 6E 
4455   230E 6F 70 71 72 
4455   2312 73 74 75 76 
4455   2316 77 78 79 7A 
4455   231A 30 31 32 33 
4455   231E 34 35 36 37 
4455   2322 38 39 2B 2F 
4455   2326 00 
4456   2327 E6 22       _base64_table: .dw _base64_table_data
4457   2329 45 6E 74 65 _s0: .db "Enter a base64 encoded string to decode: ", 0
4457   232D 72 20 61 20 
4457   2331 62 61 73 65 
4457   2335 36 34 20 65 
4457   2339 6E 63 6F 64 
4457   233D 65 64 20 73 
4457   2341 74 72 69 6E 
4457   2345 67 20 74 6F 
4457   2349 20 64 65 63 
4457   234D 6F 64 65 3A 
4457   2351 20 00 
4458   2353 45 6E 63 6F _s1: .db "Encoded string: %s\n", 0
4458   2357 64 65 64 20 
4458   235B 73 74 72 69 
4458   235F 6E 67 3A 20 
4458   2363 25 73 0A 00 
4459   2367 44 65 63 6F _s2: .db "Decoded string: %s\n", 0
4459   236B 64 65 64 20 
4459   236F 73 74 72 69 
4459   2373 6E 67 3A 20 
4459   2377 25 73 0A 00 
4460   237B 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
4460   237F 70 65 63 74 
4460   2383 65 64 20 66 
4460   2387 6F 72 6D 61 
4460   238B 74 20 69 6E 
4460   238F 20 70 72 69 
4460   2393 6E 74 66 2E 
4460   2397 00 
4461   2398 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
4461   239C 72 3A 20 55 
4461   23A0 6E 6B 6E 6F 
4461   23A4 77 6E 20 61 
4461   23A8 72 67 75 6D 
4461   23AC 65 6E 74 20 
4461   23B0 74 79 70 65 
4461   23B4 2E 0A 00 
4462   23B7 1B 5B 32 4A _s5: .db "\033[2J\033[H", 0
4462   23BB 1B 5B 48 00 
4463   23BF             
4464   23BF C1 23       _heap_top: .dw _heap
4465   23C1 00          _heap: .db 0
4466   23C2             ; --- END DATA BLOCK
4467   23C2             
4468   23C2             .end
tasm: Number of errors = 0
