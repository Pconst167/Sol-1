0001   0000             ; --- FILENAME: programs/base64.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; char input[512]; 
0011   0408 52 00 02      sub sp, 512
0012   040B             ; char output[256]; 
0013   040B 52 00 01      sub sp, 256
0014   040E             ; printf("\nEnter a base64 encoded string to decode: "); 
0015   040E             ; --- START FUNCTION CALL
0016   040E 26 CA 2D      mov b, _s0 ; "\nEnter a base64 encoded string to decode: "
0017   0411 FD AB         swp b
0018   0413 D8            push b
0019   0414 07 C4 09      call printf
0020   0417 51 02 00      add sp, 2
0021   041A             ; --- END FUNCTION CALL
0022   041A             ; gets(input); 
0023   041A             ; --- START FUNCTION CALL
0024   041A FA 01 FE      lea d, [bp + -511] ; $input
0025   041D 2D            mov b, d
0026   041E 38 00 00      mov c, 0
0027   0421 FD AB         swp b
0028   0423 D8            push b
0029   0424 07 1C 15      call gets
0030   0427 51 02 00      add sp, 2
0031   042A             ; --- END FUNCTION CALL
0032   042A             ; base64_encode(input, output); 
0033   042A             ; --- START FUNCTION CALL
0034   042A FA 01 FD      lea d, [bp + -767] ; $output
0035   042D 2D            mov b, d
0036   042E 38 00 00      mov c, 0
0037   0431 FD AB         swp b
0038   0433 D8            push b
0039   0434 FA 01 FE      lea d, [bp + -511] ; $input
0040   0437 2D            mov b, d
0041   0438 38 00 00      mov c, 0
0042   043B FD AB         swp b
0043   043D D8            push b
0044   043E 07 CE 21      call base64_encode
0045   0441 51 04 00      add sp, 4
0046   0444             ; --- END FUNCTION CALL
0047   0444             ; printf("\nEncoded string: %s\n", output); 
0048   0444             ; --- START FUNCTION CALL
0049   0444 FA 01 FD      lea d, [bp + -767] ; $output
0050   0447 2D            mov b, d
0051   0448 38 00 00      mov c, 0
0052   044B FD AB         swp b
0053   044D D8            push b
0054   044E 26 F5 2D      mov b, _s1 ; "\nEncoded string: %s\n"
0055   0451 FD AB         swp b
0056   0453 D8            push b
0057   0454 07 C4 09      call printf
0058   0457 51 04 00      add sp, 4
0059   045A             ; --- END FUNCTION CALL
0060   045A             ; base64_decode(output, input); 
0061   045A             ; --- START FUNCTION CALL
0062   045A FA 01 FE      lea d, [bp + -511] ; $input
0063   045D 2D            mov b, d
0064   045E 38 00 00      mov c, 0
0065   0461 FD AB         swp b
0066   0463 D8            push b
0067   0464 FA 01 FD      lea d, [bp + -767] ; $output
0068   0467 2D            mov b, d
0069   0468 38 00 00      mov c, 0
0070   046B FD AB         swp b
0071   046D D8            push b
0072   046E 07 1F 28      call base64_decode
0073   0471 51 04 00      add sp, 4
0074   0474             ; --- END FUNCTION CALL
0075   0474             ; printf("\nDecoded string: %s\n", input); 
0076   0474             ; --- START FUNCTION CALL
0077   0474 FA 01 FE      lea d, [bp + -511] ; $input
0078   0477 2D            mov b, d
0079   0478 38 00 00      mov c, 0
0080   047B FD AB         swp b
0081   047D D8            push b
0082   047E 26 0A 2E      mov b, _s2 ; "\nDecoded string: %s\n"
0083   0481 FD AB         swp b
0084   0483 D8            push b
0085   0484 07 C4 09      call printf
0086   0487 51 04 00      add sp, 4
0087   048A             ; --- END FUNCTION CALL
0088   048A             ; return 0; 
0089   048A FD 2E 00 00   mov32 cb, $00000000
0089   048E 00 00 
0090   0490 F9            leave
0091   0491 05 0B         syscall sys_terminate_proc
0092   0493             
0093   0493             strcpy:
0094   0493 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0095   0496             ; char *psrc; 
0096   0496 52 02 00      sub sp, 2
0097   0499             ; char *pdest; 
0098   0499 52 02 00      sub sp, 2
0099   049C             ; psrc = src; 
0100   049C FA FF FF      lea d, [bp + -1] ; $psrc
0101   049F DA            push d
0102   04A0 FA 07 00      lea d, [bp + 7] ; $src
0103   04A3 2A            mov b, [d]
0104   04A4 38 00 00      mov c, 0
0105   04A7 E7            pop d
0106   04A8 FD 43         mov [d], b
0107   04AA             ; pdest = dest; 
0108   04AA FA FD FF      lea d, [bp + -3] ; $pdest
0109   04AD DA            push d
0110   04AE FA 05 00      lea d, [bp + 5] ; $dest
0111   04B1 2A            mov b, [d]
0112   04B2 38 00 00      mov c, 0
0113   04B5 E7            pop d
0114   04B6 FD 43         mov [d], b
0115   04B8             ; while(*psrc) *pdest++ = *psrc++; 
0116   04B8             _while1_cond:
0117   04B8 FA FF FF      lea d, [bp + -1] ; $psrc
0118   04BB 2A            mov b, [d]
0119   04BC 38 00 00      mov c, 0
0120   04BF 74            mov d, b
0121   04C0 32            mov bl, [d]
0122   04C1 A7 00         mov bh, 0
0123   04C3 38 00 00      mov c, 0
0124   04C6 C0 00 00      cmp b, 0
0125   04C9 C6 FA 04      je _while1_exit
0126   04CC             _while1_block:
0127   04CC             ; *pdest++ = *psrc++; 
0128   04CC FA FD FF      lea d, [bp + -3] ; $pdest
0129   04CF 2A            mov b, [d]
0130   04D0 38 00 00      mov c, 0
0131   04D3 FD 77         inc b
0132   04D5 FA FD FF      lea d, [bp + -3] ; $pdest
0133   04D8 FD 43         mov [d], b
0134   04DA FD 7D         dec b
0135   04DC D8            push b
0136   04DD FA FF FF      lea d, [bp + -1] ; $psrc
0137   04E0 2A            mov b, [d]
0138   04E1 38 00 00      mov c, 0
0139   04E4 FD 77         inc b
0140   04E6 FA FF FF      lea d, [bp + -1] ; $psrc
0141   04E9 FD 43         mov [d], b
0142   04EB FD 7D         dec b
0143   04ED 74            mov d, b
0144   04EE 32            mov bl, [d]
0145   04EF A7 00         mov bh, 0
0146   04F1 38 00 00      mov c, 0
0147   04F4 E7            pop d
0148   04F5 FD 3E         mov [d], bl
0149   04F7 0A B8 04      jmp _while1_cond
0150   04FA             _while1_exit:
0151   04FA             ; *pdest = '\0'; 
0152   04FA FA FD FF      lea d, [bp + -3] ; $pdest
0153   04FD 2A            mov b, [d]
0154   04FE 38 00 00      mov c, 0
0155   0501 D8            push b
0156   0502 FD 2E 00 00   mov32 cb, $00000000
0156   0506 00 00 
0157   0508 E7            pop d
0158   0509 FD 3E         mov [d], bl
0159   050B F9            leave
0160   050C 09            ret
0161   050D             
0162   050D             strcmp:
0163   050D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0164   0510             ; while (*s1 && (*s1 == *s2)) { 
0165   0510             _while2_cond:
0166   0510 FA 05 00      lea d, [bp + 5] ; $s1
0167   0513 2A            mov b, [d]
0168   0514 38 00 00      mov c, 0
0169   0517 74            mov d, b
0170   0518 32            mov bl, [d]
0171   0519 A7 00         mov bh, 0
0172   051B 38 00 00      mov c, 0
0173   051E             ; --- START LOGICAL AND
0174   051E D7            push a
0175   051F 11            mov a, b
0176   0520 FA 05 00      lea d, [bp + 5] ; $s1
0177   0523 2A            mov b, [d]
0178   0524 38 00 00      mov c, 0
0179   0527 74            mov d, b
0180   0528 32            mov bl, [d]
0181   0529 A7 00         mov bh, 0
0182   052B 38 00 00      mov c, 0
0183   052E             ; --- START RELATIONAL
0184   052E D7            push a
0185   052F 11            mov a, b
0186   0530 FA 07 00      lea d, [bp + 7] ; $s2
0187   0533 2A            mov b, [d]
0188   0534 38 00 00      mov c, 0
0189   0537 74            mov d, b
0190   0538 32            mov bl, [d]
0191   0539 A7 00         mov bh, 0
0192   053B 38 00 00      mov c, 0
0193   053E B0            cmp a, b
0194   053F FD 71         seq ; ==
0195   0541 E4            pop a
0196   0542             ; --- END RELATIONAL
0197   0542 FD A7         sand a, b
0198   0544 E4            pop a
0199   0545             ; --- END LOGICAL AND
0200   0545 C0 00 00      cmp b, 0
0201   0548 C6 6E 05      je _while2_exit
0202   054B             _while2_block:
0203   054B             ; s1++; 
0204   054B FA 05 00      lea d, [bp + 5] ; $s1
0205   054E 2A            mov b, [d]
0206   054F 38 00 00      mov c, 0
0207   0552 FD 77         inc b
0208   0554 FA 05 00      lea d, [bp + 5] ; $s1
0209   0557 FD 43         mov [d], b
0210   0559 FD 7D         dec b
0211   055B             ; s2++; 
0212   055B FA 07 00      lea d, [bp + 7] ; $s2
0213   055E 2A            mov b, [d]
0214   055F 38 00 00      mov c, 0
0215   0562 FD 77         inc b
0216   0564 FA 07 00      lea d, [bp + 7] ; $s2
0217   0567 FD 43         mov [d], b
0218   0569 FD 7D         dec b
0219   056B 0A 10 05      jmp _while2_cond
0220   056E             _while2_exit:
0221   056E             ; return *s1 - *s2; 
0222   056E FA 05 00      lea d, [bp + 5] ; $s1
0223   0571 2A            mov b, [d]
0224   0572 38 00 00      mov c, 0
0225   0575 74            mov d, b
0226   0576 32            mov bl, [d]
0227   0577 A7 00         mov bh, 0
0228   0579 38 00 00      mov c, 0
0229   057C             ; --- START TERMS
0230   057C D7            push a
0231   057D 11            mov a, b
0232   057E FA 07 00      lea d, [bp + 7] ; $s2
0233   0581 2A            mov b, [d]
0234   0582 38 00 00      mov c, 0
0235   0585 74            mov d, b
0236   0586 32            mov bl, [d]
0237   0587 A7 00         mov bh, 0
0238   0589 38 00 00      mov c, 0
0239   058C 60            sub a, b
0240   058D 27            mov b, a
0241   058E E4            pop a
0242   058F             ; --- END TERMS
0243   058F F9            leave
0244   0590 09            ret
0245   0591             
0246   0591             strncmp:
0247   0591 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0248   0594 F9            leave
0249   0595 09            ret
0250   0596             
0251   0596             strcat:
0252   0596 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0253   0599             ; int dest_len; 
0254   0599 52 02 00      sub sp, 2
0255   059C             ; int i; 
0256   059C 52 02 00      sub sp, 2
0257   059F             ; dest_len = strlen(dest); 
0258   059F FA FF FF      lea d, [bp + -1] ; $dest_len
0259   05A2 DA            push d
0260   05A3             ; --- START FUNCTION CALL
0261   05A3 FA 05 00      lea d, [bp + 5] ; $dest
0262   05A6 2A            mov b, [d]
0263   05A7 38 00 00      mov c, 0
0264   05AA FD AB         swp b
0265   05AC D8            push b
0266   05AD 07 79 06      call strlen
0267   05B0 51 02 00      add sp, 2
0268   05B3             ; --- END FUNCTION CALL
0269   05B3 E7            pop d
0270   05B4 FD 43         mov [d], b
0271   05B6             ; for (i = 0; src[i] != 0; i=i+1) { 
0272   05B6             _for3_init:
0273   05B6 FA FD FF      lea d, [bp + -3] ; $i
0274   05B9 DA            push d
0275   05BA FD 2E 00 00   mov32 cb, $00000000
0275   05BE 00 00 
0276   05C0 E7            pop d
0277   05C1 FD 43         mov [d], b
0278   05C3             _for3_cond:
0279   05C3 FA 07 00      lea d, [bp + 7] ; $src
0280   05C6 FD 2A         mov d, [d]
0281   05C8 D7            push a
0282   05C9 DA            push d
0283   05CA FA FD FF      lea d, [bp + -3] ; $i
0284   05CD 2A            mov b, [d]
0285   05CE 38 00 00      mov c, 0
0286   05D1 E7            pop d
0287   05D2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0288   05D6 E4            pop a
0289   05D7 32            mov bl, [d]
0290   05D8 A7 00         mov bh, 0
0291   05DA 38 00 00      mov c, 0
0292   05DD             ; --- START RELATIONAL
0293   05DD D7            push a
0294   05DE 11            mov a, b
0295   05DF FD 2E 00 00   mov32 cb, $00000000
0295   05E3 00 00 
0296   05E5 B0            cmp a, b
0297   05E6 FD 72         sneq ; !=
0298   05E8 E4            pop a
0299   05E9             ; --- END RELATIONAL
0300   05E9 C0 00 00      cmp b, 0
0301   05EC C6 47 06      je _for3_exit
0302   05EF             _for3_block:
0303   05EF             ; dest[dest_len + i] = src[i]; 
0304   05EF FA 05 00      lea d, [bp + 5] ; $dest
0305   05F2 FD 2A         mov d, [d]
0306   05F4 D7            push a
0307   05F5 DA            push d
0308   05F6 FA FF FF      lea d, [bp + -1] ; $dest_len
0309   05F9 2A            mov b, [d]
0310   05FA 38 00 00      mov c, 0
0311   05FD             ; --- START TERMS
0312   05FD D7            push a
0313   05FE 11            mov a, b
0314   05FF FA FD FF      lea d, [bp + -3] ; $i
0315   0602 2A            mov b, [d]
0316   0603 38 00 00      mov c, 0
0317   0606 56            add b, a
0318   0607 E4            pop a
0319   0608             ; --- END TERMS
0320   0608 E7            pop d
0321   0609 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0322   060D E4            pop a
0323   060E DA            push d
0324   060F FA 07 00      lea d, [bp + 7] ; $src
0325   0612 FD 2A         mov d, [d]
0326   0614 D7            push a
0327   0615 DA            push d
0328   0616 FA FD FF      lea d, [bp + -3] ; $i
0329   0619 2A            mov b, [d]
0330   061A 38 00 00      mov c, 0
0331   061D E7            pop d
0332   061E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0333   0622 E4            pop a
0334   0623 32            mov bl, [d]
0335   0624 A7 00         mov bh, 0
0336   0626 38 00 00      mov c, 0
0337   0629 E7            pop d
0338   062A FD 3E         mov [d], bl
0339   062C             _for3_update:
0340   062C FA FD FF      lea d, [bp + -3] ; $i
0341   062F DA            push d
0342   0630 FA FD FF      lea d, [bp + -3] ; $i
0343   0633 2A            mov b, [d]
0344   0634 38 00 00      mov c, 0
0345   0637             ; --- START TERMS
0346   0637 D7            push a
0347   0638 11            mov a, b
0348   0639 FD 2E 01 00   mov32 cb, $00000001
0348   063D 00 00 
0349   063F 56            add b, a
0350   0640 E4            pop a
0351   0641             ; --- END TERMS
0352   0641 E7            pop d
0353   0642 FD 43         mov [d], b
0354   0644 0A C3 05      jmp _for3_cond
0355   0647             _for3_exit:
0356   0647             ; dest[dest_len + i] = 0; 
0357   0647 FA 05 00      lea d, [bp + 5] ; $dest
0358   064A FD 2A         mov d, [d]
0359   064C D7            push a
0360   064D DA            push d
0361   064E FA FF FF      lea d, [bp + -1] ; $dest_len
0362   0651 2A            mov b, [d]
0363   0652 38 00 00      mov c, 0
0364   0655             ; --- START TERMS
0365   0655 D7            push a
0366   0656 11            mov a, b
0367   0657 FA FD FF      lea d, [bp + -3] ; $i
0368   065A 2A            mov b, [d]
0369   065B 38 00 00      mov c, 0
0370   065E 56            add b, a
0371   065F E4            pop a
0372   0660             ; --- END TERMS
0373   0660 E7            pop d
0374   0661 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0375   0665 E4            pop a
0376   0666 DA            push d
0377   0667 FD 2E 00 00   mov32 cb, $00000000
0377   066B 00 00 
0378   066D E7            pop d
0379   066E FD 3E         mov [d], bl
0380   0670             ; return dest; 
0381   0670 FA 05 00      lea d, [bp + 5] ; $dest
0382   0673 2A            mov b, [d]
0383   0674 38 00 00      mov c, 0
0384   0677 F9            leave
0385   0678 09            ret
0386   0679             
0387   0679             strlen:
0388   0679 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0389   067C             ; int length; 
0390   067C 52 02 00      sub sp, 2
0391   067F             ; length = 0; 
0392   067F FA FF FF      lea d, [bp + -1] ; $length
0393   0682 DA            push d
0394   0683 FD 2E 00 00   mov32 cb, $00000000
0394   0687 00 00 
0395   0689 E7            pop d
0396   068A FD 43         mov [d], b
0397   068C             ; while (str[length] != 0) { 
0398   068C             _while4_cond:
0399   068C FA 05 00      lea d, [bp + 5] ; $str
0400   068F FD 2A         mov d, [d]
0401   0691 D7            push a
0402   0692 DA            push d
0403   0693 FA FF FF      lea d, [bp + -1] ; $length
0404   0696 2A            mov b, [d]
0405   0697 38 00 00      mov c, 0
0406   069A E7            pop d
0407   069B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0408   069F E4            pop a
0409   06A0 32            mov bl, [d]
0410   06A1 A7 00         mov bh, 0
0411   06A3 38 00 00      mov c, 0
0412   06A6             ; --- START RELATIONAL
0413   06A6 D7            push a
0414   06A7 11            mov a, b
0415   06A8 FD 2E 00 00   mov32 cb, $00000000
0415   06AC 00 00 
0416   06AE B0            cmp a, b
0417   06AF FD 72         sneq ; !=
0418   06B1 E4            pop a
0419   06B2             ; --- END RELATIONAL
0420   06B2 C0 00 00      cmp b, 0
0421   06B5 C6 CB 06      je _while4_exit
0422   06B8             _while4_block:
0423   06B8             ; length++; 
0424   06B8 FA FF FF      lea d, [bp + -1] ; $length
0425   06BB 2A            mov b, [d]
0426   06BC 38 00 00      mov c, 0
0427   06BF 11            mov a, b
0428   06C0 FD 77         inc b
0429   06C2 FA FF FF      lea d, [bp + -1] ; $length
0430   06C5 FD 43         mov [d], b
0431   06C7 27            mov b, a
0432   06C8 0A 8C 06      jmp _while4_cond
0433   06CB             _while4_exit:
0434   06CB             ; return length; 
0435   06CB FA FF FF      lea d, [bp + -1] ; $length
0436   06CE 2A            mov b, [d]
0437   06CF 38 00 00      mov c, 0
0438   06D2 F9            leave
0439   06D3 09            ret
0440   06D4             
0441   06D4             exit:
0442   06D4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0443   06D7             
0444   06D7             ; --- BEGIN INLINE ASM SEGMENT
0445   06D7 05 0B         syscall sys_terminate_proc
0446   06D9             ; --- END INLINE ASM SEGMENT
0447   06D9             
0448   06D9 F9            leave
0449   06DA 09            ret
0450   06DB             
0451   06DB             memset:
0452   06DB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0453   06DE             ; int i; 
0454   06DE 52 02 00      sub sp, 2
0455   06E1             ; for(i = 0; i < size; i++){ 
0456   06E1             _for5_init:
0457   06E1 FA FF FF      lea d, [bp + -1] ; $i
0458   06E4 DA            push d
0459   06E5 FD 2E 00 00   mov32 cb, $00000000
0459   06E9 00 00 
0460   06EB E7            pop d
0461   06EC FD 43         mov [d], b
0462   06EE             _for5_cond:
0463   06EE FA FF FF      lea d, [bp + -1] ; $i
0464   06F1 2A            mov b, [d]
0465   06F2 38 00 00      mov c, 0
0466   06F5             ; --- START RELATIONAL
0467   06F5 D7            push a
0468   06F6 11            mov a, b
0469   06F7 FA 08 00      lea d, [bp + 8] ; $size
0470   06FA 2A            mov b, [d]
0471   06FB 38 00 00      mov c, 0
0472   06FE B0            cmp a, b
0473   06FF FD 73         slt ; < (signed)
0474   0701 E4            pop a
0475   0702             ; --- END RELATIONAL
0476   0702 C0 00 00      cmp b, 0
0477   0705 C6 3A 07      je _for5_exit
0478   0708             _for5_block:
0479   0708             ; *(s+i) = c; 
0480   0708 FA 05 00      lea d, [bp + 5] ; $s
0481   070B 2A            mov b, [d]
0482   070C 38 00 00      mov c, 0
0483   070F             ; --- START TERMS
0484   070F D7            push a
0485   0710 11            mov a, b
0486   0711 FA FF FF      lea d, [bp + -1] ; $i
0487   0714 2A            mov b, [d]
0488   0715 38 00 00      mov c, 0
0489   0718 56            add b, a
0490   0719 E4            pop a
0491   071A             ; --- END TERMS
0492   071A D8            push b
0493   071B FA 07 00      lea d, [bp + 7] ; $c
0494   071E 32            mov bl, [d]
0495   071F A7 00         mov bh, 0
0496   0721 38 00 00      mov c, 0
0497   0724 E7            pop d
0498   0725 FD 3E         mov [d], bl
0499   0727             _for5_update:
0500   0727 FA FF FF      lea d, [bp + -1] ; $i
0501   072A 2A            mov b, [d]
0502   072B 38 00 00      mov c, 0
0503   072E 11            mov a, b
0504   072F FD 77         inc b
0505   0731 FA FF FF      lea d, [bp + -1] ; $i
0506   0734 FD 43         mov [d], b
0507   0736 27            mov b, a
0508   0737 0A EE 06      jmp _for5_cond
0509   073A             _for5_exit:
0510   073A             ; return s; 
0511   073A FA 05 00      lea d, [bp + 5] ; $s
0512   073D 2A            mov b, [d]
0513   073E 38 00 00      mov c, 0
0514   0741 F9            leave
0515   0742 09            ret
0516   0743             
0517   0743             atoi:
0518   0743 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0519   0746             ; int result = 0;  // Initialize result 
0520   0746 52 02 00      sub sp, 2
0521   0749             ; --- START LOCAL VAR INITIALIZATION
0522   0749 FA FF FF      lea d, [bp + -1] ; $result
0523   074C DA            push d
0524   074D FD 2E 00 00   mov32 cb, $00000000
0524   0751 00 00 
0525   0753 E7            pop d
0526   0754 FD 43         mov [d], b
0527   0756             ; --- END LOCAL VAR INITIALIZATION
0528   0756             ; int sign = 1;    // Initialize sign as positive 
0529   0756 52 02 00      sub sp, 2
0530   0759             ; --- START LOCAL VAR INITIALIZATION
0531   0759 FA FD FF      lea d, [bp + -3] ; $sign
0532   075C DA            push d
0533   075D FD 2E 01 00   mov32 cb, $00000001
0533   0761 00 00 
0534   0763 E7            pop d
0535   0764 FD 43         mov [d], b
0536   0766             ; --- END LOCAL VAR INITIALIZATION
0537   0766             ; while (*str == ' ') str++; 
0538   0766             _while6_cond:
0539   0766 FA 05 00      lea d, [bp + 5] ; $str
0540   0769 2A            mov b, [d]
0541   076A 38 00 00      mov c, 0
0542   076D 74            mov d, b
0543   076E 32            mov bl, [d]
0544   076F A7 00         mov bh, 0
0545   0771 38 00 00      mov c, 0
0546   0774             ; --- START RELATIONAL
0547   0774 D7            push a
0548   0775 11            mov a, b
0549   0776 FD 2E 20 00   mov32 cb, $00000020
0549   077A 00 00 
0550   077C B0            cmp a, b
0551   077D FD 71         seq ; ==
0552   077F E4            pop a
0553   0780             ; --- END RELATIONAL
0554   0780 C0 00 00      cmp b, 0
0555   0783 C6 99 07      je _while6_exit
0556   0786             _while6_block:
0557   0786             ; str++; 
0558   0786 FA 05 00      lea d, [bp + 5] ; $str
0559   0789 2A            mov b, [d]
0560   078A 38 00 00      mov c, 0
0561   078D FD 77         inc b
0562   078F FA 05 00      lea d, [bp + 5] ; $str
0563   0792 FD 43         mov [d], b
0564   0794 FD 7D         dec b
0565   0796 0A 66 07      jmp _while6_cond
0566   0799             _while6_exit:
0567   0799             ; if (*str == '-' || *str == '+') { 
0568   0799             _if7_cond:
0569   0799 FA 05 00      lea d, [bp + 5] ; $str
0570   079C 2A            mov b, [d]
0571   079D 38 00 00      mov c, 0
0572   07A0 74            mov d, b
0573   07A1 32            mov bl, [d]
0574   07A2 A7 00         mov bh, 0
0575   07A4 38 00 00      mov c, 0
0576   07A7             ; --- START RELATIONAL
0577   07A7 D7            push a
0578   07A8 11            mov a, b
0579   07A9 FD 2E 2D 00   mov32 cb, $0000002d
0579   07AD 00 00 
0580   07AF B0            cmp a, b
0581   07B0 FD 71         seq ; ==
0582   07B2 E4            pop a
0583   07B3             ; --- END RELATIONAL
0584   07B3             ; --- START LOGICAL OR
0585   07B3 D7            push a
0586   07B4 11            mov a, b
0587   07B5 FA 05 00      lea d, [bp + 5] ; $str
0588   07B8 2A            mov b, [d]
0589   07B9 38 00 00      mov c, 0
0590   07BC 74            mov d, b
0591   07BD 32            mov bl, [d]
0592   07BE A7 00         mov bh, 0
0593   07C0 38 00 00      mov c, 0
0594   07C3             ; --- START RELATIONAL
0595   07C3 D7            push a
0596   07C4 11            mov a, b
0597   07C5 FD 2E 2B 00   mov32 cb, $0000002b
0597   07C9 00 00 
0598   07CB B0            cmp a, b
0599   07CC FD 71         seq ; ==
0600   07CE E4            pop a
0601   07CF             ; --- END RELATIONAL
0602   07CF FD A8         sor a, b ; ||
0603   07D1 E4            pop a
0604   07D2             ; --- END LOGICAL OR
0605   07D2 C0 00 00      cmp b, 0
0606   07D5 C6 1D 08      je _if7_exit
0607   07D8             _if7_TRUE:
0608   07D8             ; if (*str == '-') sign = -1; 
0609   07D8             _if8_cond:
0610   07D8 FA 05 00      lea d, [bp + 5] ; $str
0611   07DB 2A            mov b, [d]
0612   07DC 38 00 00      mov c, 0
0613   07DF 74            mov d, b
0614   07E0 32            mov bl, [d]
0615   07E1 A7 00         mov bh, 0
0616   07E3 38 00 00      mov c, 0
0617   07E6             ; --- START RELATIONAL
0618   07E6 D7            push a
0619   07E7 11            mov a, b
0620   07E8 FD 2E 2D 00   mov32 cb, $0000002d
0620   07EC 00 00 
0621   07EE B0            cmp a, b
0622   07EF FD 71         seq ; ==
0623   07F1 E4            pop a
0624   07F2             ; --- END RELATIONAL
0625   07F2 C0 00 00      cmp b, 0
0626   07F5 C6 0A 08      je _if8_exit
0627   07F8             _if8_TRUE:
0628   07F8             ; sign = -1; 
0629   07F8 FA FD FF      lea d, [bp + -3] ; $sign
0630   07FB DA            push d
0631   07FC FD 2E 01 00   mov32 cb, $00000001
0631   0800 00 00 
0632   0802 FD 97         neg b
0633   0804 E7            pop d
0634   0805 FD 43         mov [d], b
0635   0807 0A 0A 08      jmp _if8_exit
0636   080A             _if8_exit:
0637   080A             ; str++; 
0638   080A FA 05 00      lea d, [bp + 5] ; $str
0639   080D 2A            mov b, [d]
0640   080E 38 00 00      mov c, 0
0641   0811 FD 77         inc b
0642   0813 FA 05 00      lea d, [bp + 5] ; $str
0643   0816 FD 43         mov [d], b
0644   0818 FD 7D         dec b
0645   081A 0A 1D 08      jmp _if7_exit
0646   081D             _if7_exit:
0647   081D             ; while (*str >= '0' && *str <= '9') { 
0648   081D             _while9_cond:
0649   081D FA 05 00      lea d, [bp + 5] ; $str
0650   0820 2A            mov b, [d]
0651   0821 38 00 00      mov c, 0
0652   0824 74            mov d, b
0653   0825 32            mov bl, [d]
0654   0826 A7 00         mov bh, 0
0655   0828 38 00 00      mov c, 0
0656   082B             ; --- START RELATIONAL
0657   082B D7            push a
0658   082C 11            mov a, b
0659   082D FD 2E 30 00   mov32 cb, $00000030
0659   0831 00 00 
0660   0833 B0            cmp a, b
0661   0834 FD 82         sgeu ; >= (unsigned)
0662   0836 E4            pop a
0663   0837             ; --- END RELATIONAL
0664   0837             ; --- START LOGICAL AND
0665   0837 D7            push a
0666   0838 11            mov a, b
0667   0839 FA 05 00      lea d, [bp + 5] ; $str
0668   083C 2A            mov b, [d]
0669   083D 38 00 00      mov c, 0
0670   0840 74            mov d, b
0671   0841 32            mov bl, [d]
0672   0842 A7 00         mov bh, 0
0673   0844 38 00 00      mov c, 0
0674   0847             ; --- START RELATIONAL
0675   0847 D7            push a
0676   0848 11            mov a, b
0677   0849 FD 2E 39 00   mov32 cb, $00000039
0677   084D 00 00 
0678   084F B0            cmp a, b
0679   0850 FD 76         sleu ; <= (unsigned)
0680   0852 E4            pop a
0681   0853             ; --- END RELATIONAL
0682   0853 FD A7         sand a, b
0683   0855 E4            pop a
0684   0856             ; --- END LOGICAL AND
0685   0856 C0 00 00      cmp b, 0
0686   0859 C6 A6 08      je _while9_exit
0687   085C             _while9_block:
0688   085C             ; result = result * 10 + (*str - '0'); 
0689   085C FA FF FF      lea d, [bp + -1] ; $result
0690   085F DA            push d
0691   0860 FA FF FF      lea d, [bp + -1] ; $result
0692   0863 2A            mov b, [d]
0693   0864 38 00 00      mov c, 0
0694   0867             ; --- START FACTORS
0695   0867 D7            push a
0696   0868 11            mov a, b
0697   0869 FD 2E 0A 00   mov32 cb, $0000000a
0697   086D 00 00 
0698   086F AC            mul a, b ; *
0699   0870 11            mov a, b
0700   0871 27            mov b, a
0701   0872 E4            pop a
0702   0873             ; --- END FACTORS
0703   0873             ; --- START TERMS
0704   0873 D7            push a
0705   0874 11            mov a, b
0706   0875 FA 05 00      lea d, [bp + 5] ; $str
0707   0878 2A            mov b, [d]
0708   0879 38 00 00      mov c, 0
0709   087C 74            mov d, b
0710   087D 32            mov bl, [d]
0711   087E A7 00         mov bh, 0
0712   0880 38 00 00      mov c, 0
0713   0883             ; --- START TERMS
0714   0883 D7            push a
0715   0884 11            mov a, b
0716   0885 FD 2E 30 00   mov32 cb, $00000030
0716   0889 00 00 
0717   088B 60            sub a, b
0718   088C 27            mov b, a
0719   088D E4            pop a
0720   088E             ; --- END TERMS
0721   088E 56            add b, a
0722   088F E4            pop a
0723   0890             ; --- END TERMS
0724   0890 E7            pop d
0725   0891 FD 43         mov [d], b
0726   0893             ; str++; 
0727   0893 FA 05 00      lea d, [bp + 5] ; $str
0728   0896 2A            mov b, [d]
0729   0897 38 00 00      mov c, 0
0730   089A FD 77         inc b
0731   089C FA 05 00      lea d, [bp + 5] ; $str
0732   089F FD 43         mov [d], b
0733   08A1 FD 7D         dec b
0734   08A3 0A 1D 08      jmp _while9_cond
0735   08A6             _while9_exit:
0736   08A6             ; return sign * result; 
0737   08A6 FA FD FF      lea d, [bp + -3] ; $sign
0738   08A9 2A            mov b, [d]
0739   08AA 38 00 00      mov c, 0
0740   08AD             ; --- START FACTORS
0741   08AD D7            push a
0742   08AE 11            mov a, b
0743   08AF FA FF FF      lea d, [bp + -1] ; $result
0744   08B2 2A            mov b, [d]
0745   08B3 38 00 00      mov c, 0
0746   08B6 AC            mul a, b ; *
0747   08B7 11            mov a, b
0748   08B8 27            mov b, a
0749   08B9 E4            pop a
0750   08BA             ; --- END FACTORS
0751   08BA F9            leave
0752   08BB 09            ret
0753   08BC             
0754   08BC             rand:
0755   08BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0756   08BF             ; int  sec; 
0757   08BF 52 02 00      sub sp, 2
0758   08C2             
0759   08C2             ; --- BEGIN INLINE ASM SEGMENT
0760   08C2 19 00         mov al, 0
0761   08C4 05 01         syscall sys_rtc					
0762   08C6 1A            mov al, ah
0763   08C7 FA FF FF      lea d, [bp + -1] ; $sec
0764   08CA 1E            mov al, [d]
0765   08CB 22 00         mov ah, 0
0766   08CD             ; --- END INLINE ASM SEGMENT
0767   08CD             
0768   08CD             ; return sec; 
0769   08CD FA FF FF      lea d, [bp + -1] ; $sec
0770   08D0 2A            mov b, [d]
0771   08D1 38 00 00      mov c, 0
0772   08D4 F9            leave
0773   08D5 09            ret
0774   08D6             
0775   08D6             alloc:
0776   08D6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0777   08D9             ; heap_top = heap_top + bytes; 
0778   08D9 3B 63 2E      mov d, _heap_top ; $heap_top
0779   08DC DA            push d
0780   08DD 3B 63 2E      mov d, _heap_top ; $heap_top
0781   08E0 2A            mov b, [d]
0782   08E1 38 00 00      mov c, 0
0783   08E4             ; --- START TERMS
0784   08E4 D7            push a
0785   08E5 11            mov a, b
0786   08E6 FA 05 00      lea d, [bp + 5] ; $bytes
0787   08E9 2A            mov b, [d]
0788   08EA 38 00 00      mov c, 0
0789   08ED 56            add b, a
0790   08EE E4            pop a
0791   08EF             ; --- END TERMS
0792   08EF E7            pop d
0793   08F0 FD 43         mov [d], b
0794   08F2             ; return heap_top - bytes; 
0795   08F2 3B 63 2E      mov d, _heap_top ; $heap_top
0796   08F5 2A            mov b, [d]
0797   08F6 38 00 00      mov c, 0
0798   08F9             ; --- START TERMS
0799   08F9 D7            push a
0800   08FA 11            mov a, b
0801   08FB FA 05 00      lea d, [bp + 5] ; $bytes
0802   08FE 2A            mov b, [d]
0803   08FF 38 00 00      mov c, 0
0804   0902 60            sub a, b
0805   0903 27            mov b, a
0806   0904 E4            pop a
0807   0905             ; --- END TERMS
0808   0905 F9            leave
0809   0906 09            ret
0810   0907             
0811   0907             free:
0812   0907 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0813   090A             ; return heap_top = heap_top - bytes; 
0814   090A 3B 63 2E      mov d, _heap_top ; $heap_top
0815   090D DA            push d
0816   090E 3B 63 2E      mov d, _heap_top ; $heap_top
0817   0911 2A            mov b, [d]
0818   0912 38 00 00      mov c, 0
0819   0915             ; --- START TERMS
0820   0915 D7            push a
0821   0916 11            mov a, b
0822   0917 FA 05 00      lea d, [bp + 5] ; $bytes
0823   091A 2A            mov b, [d]
0824   091B 38 00 00      mov c, 0
0825   091E 60            sub a, b
0826   091F 27            mov b, a
0827   0920 E4            pop a
0828   0921             ; --- END TERMS
0829   0921 E7            pop d
0830   0922 FD 43         mov [d], b
0831   0924 F9            leave
0832   0925 09            ret
0833   0926             
0834   0926             fopen:
0835   0926 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0836   0929             ; FILE *fp; 
0837   0929 52 02 00      sub sp, 2
0838   092C             ; static int max_handle = 0; 
0839   092C 52 02 00      sub sp, 2
0840   092F             ; fp = alloc(sizeof(FILE)); 
0841   092F FA FF FF      lea d, [bp + -1] ; $fp
0842   0932 DA            push d
0843   0933             ; --- START FUNCTION CALL
0844   0933 FD 2E 04 01   mov32 cb, 260
0844   0937 00 00 
0845   0939 FD AB         swp b
0846   093B D8            push b
0847   093C 07 D6 08      call alloc
0848   093F 51 02 00      add sp, 2
0849   0942             ; --- END FUNCTION CALL
0850   0942 E7            pop d
0851   0943 FD 43         mov [d], b
0852   0945             ; strcpy(fp->filename, filename); 
0853   0945             ; --- START FUNCTION CALL
0854   0945 FA 05 00      lea d, [bp + 5] ; $filename
0855   0948 2A            mov b, [d]
0856   0949 38 00 00      mov c, 0
0857   094C FD AB         swp b
0858   094E D8            push b
0859   094F FA FF FF      lea d, [bp + -1] ; $fp
0860   0952 FD 2A         mov d, [d]
0861   0954 58 02 00      add d, 2
0862   0957 2D            mov b, d
0863   0958 38 00 00      mov c, 0
0864   095B FD AB         swp b
0865   095D D8            push b
0866   095E 07 93 04      call strcpy
0867   0961 51 04 00      add sp, 4
0868   0964             ; --- END FUNCTION CALL
0869   0964             ; fp->handle = max_handle; 
0870   0964 FA FF FF      lea d, [bp + -1] ; $fp
0871   0967 FD 2A         mov d, [d]
0872   0969 58 00 00      add d, 0
0873   096C DA            push d
0874   096D 3B C8 2D      mov d, st_fopen_max_handle ; static max_handle
0875   0970 2A            mov b, [d]
0876   0971 38 00 00      mov c, 0
0877   0974 E7            pop d
0878   0975 FD 43         mov [d], b
0879   0977             ; fp->mode = mode; 
0880   0977 FA FF FF      lea d, [bp + -1] ; $fp
0881   097A FD 2A         mov d, [d]
0882   097C 58 02 01      add d, 258
0883   097F DA            push d
0884   0980 FA 07 00      lea d, [bp + 7] ; $mode
0885   0983 32            mov bl, [d]
0886   0984 A7 00         mov bh, 0
0887   0986 38 00 00      mov c, 0
0888   0989 E7            pop d
0889   098A FD 3E         mov [d], bl
0890   098C             ; fp->loc = 0; 
0891   098C FA FF FF      lea d, [bp + -1] ; $fp
0892   098F FD 2A         mov d, [d]
0893   0991 58 03 01      add d, 259
0894   0994 DA            push d
0895   0995 FD 2E 00 00   mov32 cb, $00000000
0895   0999 00 00 
0896   099B E7            pop d
0897   099C FD 3E         mov [d], bl
0898   099E             ; max_handle++; 
0899   099E 3B C8 2D      mov d, st_fopen_max_handle ; static max_handle
0900   09A1 2A            mov b, [d]
0901   09A2 38 00 00      mov c, 0
0902   09A5 11            mov a, b
0903   09A6 FD 77         inc b
0904   09A8 3B C8 2D      mov d, st_fopen_max_handle ; static max_handle
0905   09AB FD 43         mov [d], b
0906   09AD 27            mov b, a
0907   09AE F9            leave
0908   09AF 09            ret
0909   09B0             
0910   09B0             fclose:
0911   09B0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0912   09B3             ; free(sizeof(FILE)); 
0913   09B3             ; --- START FUNCTION CALL
0914   09B3 FD 2E 04 01   mov32 cb, 260
0914   09B7 00 00 
0915   09B9 FD AB         swp b
0916   09BB D8            push b
0917   09BC 07 07 09      call free
0918   09BF 51 02 00      add sp, 2
0919   09C2             ; --- END FUNCTION CALL
0920   09C2 F9            leave
0921   09C3 09            ret
0922   09C4             
0923   09C4             printf:
0924   09C4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0925   09C7             ; char *p, *format_p; 
0926   09C7 52 02 00      sub sp, 2
0927   09CA 52 02 00      sub sp, 2
0928   09CD             ; format_p = format; 
0929   09CD FA FD FF      lea d, [bp + -3] ; $format_p
0930   09D0 DA            push d
0931   09D1 FA 05 00      lea d, [bp + 5] ; $format
0932   09D4 2A            mov b, [d]
0933   09D5 38 00 00      mov c, 0
0934   09D8 E7            pop d
0935   09D9 FD 43         mov [d], b
0936   09DB             ; p = &format + 2; 
0937   09DB FA FF FF      lea d, [bp + -1] ; $p
0938   09DE DA            push d
0939   09DF FA 05 00      lea d, [bp + 5] ; $format
0940   09E2 2D            mov b, d
0941   09E3             ; --- START TERMS
0942   09E3 D7            push a
0943   09E4 11            mov a, b
0944   09E5 FD 2E 02 00   mov32 cb, $00000002
0944   09E9 00 00 
0945   09EB 56            add b, a
0946   09EC E4            pop a
0947   09ED             ; --- END TERMS
0948   09ED E7            pop d
0949   09EE FD 43         mov [d], b
0950   09F0             ; for(;;){ 
0951   09F0             _for10_init:
0952   09F0             _for10_cond:
0953   09F0             _for10_block:
0954   09F0             ; if(!*format_p) break; 
0955   09F0             _if11_cond:
0956   09F0 FA FD FF      lea d, [bp + -3] ; $format_p
0957   09F3 2A            mov b, [d]
0958   09F4 38 00 00      mov c, 0
0959   09F7 74            mov d, b
0960   09F8 32            mov bl, [d]
0961   09F9 A7 00         mov bh, 0
0962   09FB 38 00 00      mov c, 0
0963   09FE C0 00 00      cmp b, 0
0964   0A01 FD 71         seq ; !
0965   0A03 C0 00 00      cmp b, 0
0966   0A06 C6 0F 0A      je _if11_else
0967   0A09             _if11_TRUE:
0968   0A09             ; break; 
0969   0A09 0A A0 0C      jmp _for10_exit ; for break
0970   0A0C 0A 9D 0C      jmp _if11_exit
0971   0A0F             _if11_else:
0972   0A0F             ; if(*format_p == '%'){ 
0973   0A0F             _if12_cond:
0974   0A0F FA FD FF      lea d, [bp + -3] ; $format_p
0975   0A12 2A            mov b, [d]
0976   0A13 38 00 00      mov c, 0
0977   0A16 74            mov d, b
0978   0A17 32            mov bl, [d]
0979   0A18 A7 00         mov bh, 0
0980   0A1A 38 00 00      mov c, 0
0981   0A1D             ; --- START RELATIONAL
0982   0A1D D7            push a
0983   0A1E 11            mov a, b
0984   0A1F FD 2E 25 00   mov32 cb, $00000025
0984   0A23 00 00 
0985   0A25 B0            cmp a, b
0986   0A26 FD 71         seq ; ==
0987   0A28 E4            pop a
0988   0A29             ; --- END RELATIONAL
0989   0A29 C0 00 00      cmp b, 0
0990   0A2C C6 78 0C      je _if12_else
0991   0A2F             _if12_TRUE:
0992   0A2F             ; format_p++; 
0993   0A2F FA FD FF      lea d, [bp + -3] ; $format_p
0994   0A32 2A            mov b, [d]
0995   0A33 38 00 00      mov c, 0
0996   0A36 FD 77         inc b
0997   0A38 FA FD FF      lea d, [bp + -3] ; $format_p
0998   0A3B FD 43         mov [d], b
0999   0A3D FD 7D         dec b
1000   0A3F             ; switch(*format_p){ 
1001   0A3F             _switch13_expr:
1002   0A3F FA FD FF      lea d, [bp + -3] ; $format_p
1003   0A42 2A            mov b, [d]
1004   0A43 38 00 00      mov c, 0
1005   0A46 74            mov d, b
1006   0A47 32            mov bl, [d]
1007   0A48 A7 00         mov bh, 0
1008   0A4A 38 00 00      mov c, 0
1009   0A4D             _switch13_comparisons:
1010   0A4D C1 6C         cmp bl, $6c
1011   0A4F C6 7B 0A      je _switch13_case0
1012   0A52 C1 4C         cmp bl, $4c
1013   0A54 C6 7B 0A      je _switch13_case1
1014   0A57 C1 64         cmp bl, $64
1015   0A59 C6 8B 0B      je _switch13_case2
1016   0A5C C1 69         cmp bl, $69
1017   0A5E C6 8B 0B      je _switch13_case3
1018   0A61 C1 75         cmp bl, $75
1019   0A63 C6 BB 0B      je _switch13_case4
1020   0A66 C1 78         cmp bl, $78
1021   0A68 C6 EB 0B      je _switch13_case5
1022   0A6B C1 63         cmp bl, $63
1023   0A6D C6 0F 0C      je _switch13_case6
1024   0A70 C1 73         cmp bl, $73
1025   0A72 C6 34 0C      je _switch13_case7
1026   0A75 0A 59 0C      jmp _switch13_default
1027   0A78 0A 65 0C      jmp _switch13_exit
1028   0A7B             _switch13_case0:
1029   0A7B             _switch13_case1:
1030   0A7B             ; format_p++; 
1031   0A7B FA FD FF      lea d, [bp + -3] ; $format_p
1032   0A7E 2A            mov b, [d]
1033   0A7F 38 00 00      mov c, 0
1034   0A82 FD 77         inc b
1035   0A84 FA FD FF      lea d, [bp + -3] ; $format_p
1036   0A87 FD 43         mov [d], b
1037   0A89 FD 7D         dec b
1038   0A8B             ; if(*format_p == 'd' || *format_p == 'i') 
1039   0A8B             _if14_cond:
1040   0A8B FA FD FF      lea d, [bp + -3] ; $format_p
1041   0A8E 2A            mov b, [d]
1042   0A8F 38 00 00      mov c, 0
1043   0A92 74            mov d, b
1044   0A93 32            mov bl, [d]
1045   0A94 A7 00         mov bh, 0
1046   0A96 38 00 00      mov c, 0
1047   0A99             ; --- START RELATIONAL
1048   0A99 D7            push a
1049   0A9A 11            mov a, b
1050   0A9B FD 2E 64 00   mov32 cb, $00000064
1050   0A9F 00 00 
1051   0AA1 B0            cmp a, b
1052   0AA2 FD 71         seq ; ==
1053   0AA4 E4            pop a
1054   0AA5             ; --- END RELATIONAL
1055   0AA5             ; --- START LOGICAL OR
1056   0AA5 D7            push a
1057   0AA6 11            mov a, b
1058   0AA7 FA FD FF      lea d, [bp + -3] ; $format_p
1059   0AAA 2A            mov b, [d]
1060   0AAB 38 00 00      mov c, 0
1061   0AAE 74            mov d, b
1062   0AAF 32            mov bl, [d]
1063   0AB0 A7 00         mov bh, 0
1064   0AB2 38 00 00      mov c, 0
1065   0AB5             ; --- START RELATIONAL
1066   0AB5 D7            push a
1067   0AB6 11            mov a, b
1068   0AB7 FD 2E 69 00   mov32 cb, $00000069
1068   0ABB 00 00 
1069   0ABD B0            cmp a, b
1070   0ABE FD 71         seq ; ==
1071   0AC0 E4            pop a
1072   0AC1             ; --- END RELATIONAL
1073   0AC1 FD A8         sor a, b ; ||
1074   0AC3 E4            pop a
1075   0AC4             ; --- END LOGICAL OR
1076   0AC4 C0 00 00      cmp b, 0
1077   0AC7 C6 E8 0A      je _if14_else
1078   0ACA             _if14_TRUE:
1079   0ACA             ; print_signed_long(*(long *)p); 
1080   0ACA             ; --- START FUNCTION CALL
1081   0ACA FA FF FF      lea d, [bp + -1] ; $p
1082   0ACD 2A            mov b, [d]
1083   0ACE 38 00 00      mov c, 0
1084   0AD1 74            mov d, b
1085   0AD2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1086   0AD5 FD 39         mov c, b ; And place it into C
1087   0AD7 2A            mov b, [d] ; Lower Word in B
1088   0AD8 12            mov a, c
1089   0AD9 FD AA         swp a
1090   0ADB D7            push a
1091   0ADC FD AB         swp b
1092   0ADE D8            push b
1093   0ADF 07 72 16      call print_signed_long
1094   0AE2 51 04 00      add sp, 4
1095   0AE5             ; --- END FUNCTION CALL
1096   0AE5 0A 70 0B      jmp _if14_exit
1097   0AE8             _if14_else:
1098   0AE8             ; if(*format_p == 'u') 
1099   0AE8             _if15_cond:
1100   0AE8 FA FD FF      lea d, [bp + -3] ; $format_p
1101   0AEB 2A            mov b, [d]
1102   0AEC 38 00 00      mov c, 0
1103   0AEF 74            mov d, b
1104   0AF0 32            mov bl, [d]
1105   0AF1 A7 00         mov bh, 0
1106   0AF3 38 00 00      mov c, 0
1107   0AF6             ; --- START RELATIONAL
1108   0AF6 D7            push a
1109   0AF7 11            mov a, b
1110   0AF8 FD 2E 75 00   mov32 cb, $00000075
1110   0AFC 00 00 
1111   0AFE B0            cmp a, b
1112   0AFF FD 71         seq ; ==
1113   0B01 E4            pop a
1114   0B02             ; --- END RELATIONAL
1115   0B02 C0 00 00      cmp b, 0
1116   0B05 C6 26 0B      je _if15_else
1117   0B08             _if15_TRUE:
1118   0B08             ; print_unsigned_long(*(unsigned long *)p); 
1119   0B08             ; --- START FUNCTION CALL
1120   0B08 FA FF FF      lea d, [bp + -1] ; $p
1121   0B0B 2A            mov b, [d]
1122   0B0C 38 00 00      mov c, 0
1123   0B0F 74            mov d, b
1124   0B10 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1125   0B13 FD 39         mov c, b ; And place it into C
1126   0B15 2A            mov b, [d] ; Lower Word in B
1127   0B16 12            mov a, c
1128   0B17 FD AA         swp a
1129   0B19 D7            push a
1130   0B1A FD AB         swp b
1131   0B1C D8            push b
1132   0B1D 07 E1 17      call print_unsigned_long
1133   0B20 51 04 00      add sp, 4
1134   0B23             ; --- END FUNCTION CALL
1135   0B23 0A 70 0B      jmp _if15_exit
1136   0B26             _if15_else:
1137   0B26             ; if(*format_p == 'x') 
1138   0B26             _if16_cond:
1139   0B26 FA FD FF      lea d, [bp + -3] ; $format_p
1140   0B29 2A            mov b, [d]
1141   0B2A 38 00 00      mov c, 0
1142   0B2D 74            mov d, b
1143   0B2E 32            mov bl, [d]
1144   0B2F A7 00         mov bh, 0
1145   0B31 38 00 00      mov c, 0
1146   0B34             ; --- START RELATIONAL
1147   0B34 D7            push a
1148   0B35 11            mov a, b
1149   0B36 FD 2E 78 00   mov32 cb, $00000078
1149   0B3A 00 00 
1150   0B3C B0            cmp a, b
1151   0B3D FD 71         seq ; ==
1152   0B3F E4            pop a
1153   0B40             ; --- END RELATIONAL
1154   0B40 C0 00 00      cmp b, 0
1155   0B43 C6 64 0B      je _if16_else
1156   0B46             _if16_TRUE:
1157   0B46             ; printx32(*(long int *)p); 
1158   0B46             ; --- START FUNCTION CALL
1159   0B46 FA FF FF      lea d, [bp + -1] ; $p
1160   0B49 2A            mov b, [d]
1161   0B4A 38 00 00      mov c, 0
1162   0B4D 74            mov d, b
1163   0B4E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1164   0B51 FD 39         mov c, b ; And place it into C
1165   0B53 2A            mov b, [d] ; Lower Word in B
1166   0B54 12            mov a, c
1167   0B55 FD AA         swp a
1168   0B57 D7            push a
1169   0B58 FD AB         swp b
1170   0B5A D8            push b
1171   0B5B 07 45 13      call printx32
1172   0B5E 51 04 00      add sp, 4
1173   0B61             ; --- END FUNCTION CALL
1174   0B61 0A 70 0B      jmp _if16_exit
1175   0B64             _if16_else:
1176   0B64             ; err("Unexpected format in printf."); 
1177   0B64             ; --- START FUNCTION CALL
1178   0B64 26 1F 2E      mov b, _s3 ; "Unexpected format in printf."
1179   0B67 FD AB         swp b
1180   0B69 D8            push b
1181   0B6A 07 30 13      call err
1182   0B6D 51 02 00      add sp, 2
1183   0B70             ; --- END FUNCTION CALL
1184   0B70             _if16_exit:
1185   0B70             _if15_exit:
1186   0B70             _if14_exit:
1187   0B70             ; p = p + 4; 
1188   0B70 FA FF FF      lea d, [bp + -1] ; $p
1189   0B73 DA            push d
1190   0B74 FA FF FF      lea d, [bp + -1] ; $p
1191   0B77 2A            mov b, [d]
1192   0B78 38 00 00      mov c, 0
1193   0B7B             ; --- START TERMS
1194   0B7B D7            push a
1195   0B7C 11            mov a, b
1196   0B7D FD 2E 04 00   mov32 cb, $00000004
1196   0B81 00 00 
1197   0B83 56            add b, a
1198   0B84 E4            pop a
1199   0B85             ; --- END TERMS
1200   0B85 E7            pop d
1201   0B86 FD 43         mov [d], b
1202   0B88             ; break; 
1203   0B88 0A 65 0C      jmp _switch13_exit ; case break
1204   0B8B             _switch13_case2:
1205   0B8B             _switch13_case3:
1206   0B8B             ; print_signed(*(int*)p); 
1207   0B8B             ; --- START FUNCTION CALL
1208   0B8B FA FF FF      lea d, [bp + -1] ; $p
1209   0B8E 2A            mov b, [d]
1210   0B8F 38 00 00      mov c, 0
1211   0B92 74            mov d, b
1212   0B93 2A            mov b, [d]
1213   0B94 38 00 00      mov c, 0
1214   0B97 FD AB         swp b
1215   0B99 D8            push b
1216   0B9A 07 39 15      call print_signed
1217   0B9D 51 02 00      add sp, 2
1218   0BA0             ; --- END FUNCTION CALL
1219   0BA0             ; p = p + 2; 
1220   0BA0 FA FF FF      lea d, [bp + -1] ; $p
1221   0BA3 DA            push d
1222   0BA4 FA FF FF      lea d, [bp + -1] ; $p
1223   0BA7 2A            mov b, [d]
1224   0BA8 38 00 00      mov c, 0
1225   0BAB             ; --- START TERMS
1226   0BAB D7            push a
1227   0BAC 11            mov a, b
1228   0BAD FD 2E 02 00   mov32 cb, $00000002
1228   0BB1 00 00 
1229   0BB3 56            add b, a
1230   0BB4 E4            pop a
1231   0BB5             ; --- END TERMS
1232   0BB5 E7            pop d
1233   0BB6 FD 43         mov [d], b
1234   0BB8             ; break; 
1235   0BB8 0A 65 0C      jmp _switch13_exit ; case break
1236   0BBB             _switch13_case4:
1237   0BBB             ; print_unsigned(*(unsigned int*)p); 
1238   0BBB             ; --- START FUNCTION CALL
1239   0BBB FA FF FF      lea d, [bp + -1] ; $p
1240   0BBE 2A            mov b, [d]
1241   0BBF 38 00 00      mov c, 0
1242   0BC2 74            mov d, b
1243   0BC3 2A            mov b, [d]
1244   0BC4 38 00 00      mov c, 0
1245   0BC7 FD AB         swp b
1246   0BC9 D8            push b
1247   0BCA 07 55 1A      call print_unsigned
1248   0BCD 51 02 00      add sp, 2
1249   0BD0             ; --- END FUNCTION CALL
1250   0BD0             ; p = p + 2; 
1251   0BD0 FA FF FF      lea d, [bp + -1] ; $p
1252   0BD3 DA            push d
1253   0BD4 FA FF FF      lea d, [bp + -1] ; $p
1254   0BD7 2A            mov b, [d]
1255   0BD8 38 00 00      mov c, 0
1256   0BDB             ; --- START TERMS
1257   0BDB D7            push a
1258   0BDC 11            mov a, b
1259   0BDD FD 2E 02 00   mov32 cb, $00000002
1259   0BE1 00 00 
1260   0BE3 56            add b, a
1261   0BE4 E4            pop a
1262   0BE5             ; --- END TERMS
1263   0BE5 E7            pop d
1264   0BE6 FD 43         mov [d], b
1265   0BE8             ; break; 
1266   0BE8 0A 65 0C      jmp _switch13_exit ; case break
1267   0BEB             _switch13_case5:
1268   0BEB             
1269   0BEB             ; --- BEGIN INLINE ASM SEGMENT
1270   0BEB FA FF FF      lea d, [bp + -1] ; $p
1271   0BEE FD 2A         mov d, [d]
1272   0BF0 2A            mov b, [d]
1273   0BF1 07 CE 20      call print_u16x
1274   0BF4             ; --- END INLINE ASM SEGMENT
1275   0BF4             
1276   0BF4             ; p = p + 2; 
1277   0BF4 FA FF FF      lea d, [bp + -1] ; $p
1278   0BF7 DA            push d
1279   0BF8 FA FF FF      lea d, [bp + -1] ; $p
1280   0BFB 2A            mov b, [d]
1281   0BFC 38 00 00      mov c, 0
1282   0BFF             ; --- START TERMS
1283   0BFF D7            push a
1284   0C00 11            mov a, b
1285   0C01 FD 2E 02 00   mov32 cb, $00000002
1285   0C05 00 00 
1286   0C07 56            add b, a
1287   0C08 E4            pop a
1288   0C09             ; --- END TERMS
1289   0C09 E7            pop d
1290   0C0A FD 43         mov [d], b
1291   0C0C             ; break; 
1292   0C0C 0A 65 0C      jmp _switch13_exit ; case break
1293   0C0F             _switch13_case6:
1294   0C0F             
1295   0C0F             ; --- BEGIN INLINE ASM SEGMENT
1296   0C0F FA FF FF      lea d, [bp + -1] ; $p
1297   0C12 FD 2A         mov d, [d]
1298   0C14 1E            mov al, [d]
1299   0C15 23            mov ah, al
1300   0C16 07 2C 1F      call _putchar
1301   0C19             ; --- END INLINE ASM SEGMENT
1302   0C19             
1303   0C19             ; p = p + 1; 
1304   0C19 FA FF FF      lea d, [bp + -1] ; $p
1305   0C1C DA            push d
1306   0C1D FA FF FF      lea d, [bp + -1] ; $p
1307   0C20 2A            mov b, [d]
1308   0C21 38 00 00      mov c, 0
1309   0C24             ; --- START TERMS
1310   0C24 D7            push a
1311   0C25 11            mov a, b
1312   0C26 FD 2E 01 00   mov32 cb, $00000001
1312   0C2A 00 00 
1313   0C2C 56            add b, a
1314   0C2D E4            pop a
1315   0C2E             ; --- END TERMS
1316   0C2E E7            pop d
1317   0C2F FD 43         mov [d], b
1318   0C31             ; break; 
1319   0C31 0A 65 0C      jmp _switch13_exit ; case break
1320   0C34             _switch13_case7:
1321   0C34             
1322   0C34             ; --- BEGIN INLINE ASM SEGMENT
1323   0C34 FA FF FF      lea d, [bp + -1] ; $p
1324   0C37 FD 2A         mov d, [d]
1325   0C39 FD 2A         mov d, [d]
1326   0C3B 07 76 20      call _puts
1327   0C3E             ; --- END INLINE ASM SEGMENT
1328   0C3E             
1329   0C3E             ; p = p + 2; 
1330   0C3E FA FF FF      lea d, [bp + -1] ; $p
1331   0C41 DA            push d
1332   0C42 FA FF FF      lea d, [bp + -1] ; $p
1333   0C45 2A            mov b, [d]
1334   0C46 38 00 00      mov c, 0
1335   0C49             ; --- START TERMS
1336   0C49 D7            push a
1337   0C4A 11            mov a, b
1338   0C4B FD 2E 02 00   mov32 cb, $00000002
1338   0C4F 00 00 
1339   0C51 56            add b, a
1340   0C52 E4            pop a
1341   0C53             ; --- END TERMS
1342   0C53 E7            pop d
1343   0C54 FD 43         mov [d], b
1344   0C56             ; break; 
1345   0C56 0A 65 0C      jmp _switch13_exit ; case break
1346   0C59             _switch13_default:
1347   0C59             ; print("Error: Unknown argument type.\n"); 
1348   0C59             ; --- START FUNCTION CALL
1349   0C59 26 3C 2E      mov b, _s4 ; "Error: Unknown argument type.\n"
1350   0C5C FD AB         swp b
1351   0C5E D8            push b
1352   0C5F 07 6B 1D      call print
1353   0C62 51 02 00      add sp, 2
1354   0C65             ; --- END FUNCTION CALL
1355   0C65             _switch13_exit:
1356   0C65             ; format_p++; 
1357   0C65 FA FD FF      lea d, [bp + -3] ; $format_p
1358   0C68 2A            mov b, [d]
1359   0C69 38 00 00      mov c, 0
1360   0C6C FD 77         inc b
1361   0C6E FA FD FF      lea d, [bp + -3] ; $format_p
1362   0C71 FD 43         mov [d], b
1363   0C73 FD 7D         dec b
1364   0C75 0A 9D 0C      jmp _if12_exit
1365   0C78             _if12_else:
1366   0C78             ; putchar(*format_p); 
1367   0C78             ; --- START FUNCTION CALL
1368   0C78 FA FD FF      lea d, [bp + -3] ; $format_p
1369   0C7B 2A            mov b, [d]
1370   0C7C 38 00 00      mov c, 0
1371   0C7F 74            mov d, b
1372   0C80 32            mov bl, [d]
1373   0C81 A7 00         mov bh, 0
1374   0C83 38 00 00      mov c, 0
1375   0C86 DD            push bl
1376   0C87 07 1D 1D      call putchar
1377   0C8A 51 01 00      add sp, 1
1378   0C8D             ; --- END FUNCTION CALL
1379   0C8D             ; format_p++; 
1380   0C8D FA FD FF      lea d, [bp + -3] ; $format_p
1381   0C90 2A            mov b, [d]
1382   0C91 38 00 00      mov c, 0
1383   0C94 FD 77         inc b
1384   0C96 FA FD FF      lea d, [bp + -3] ; $format_p
1385   0C99 FD 43         mov [d], b
1386   0C9B FD 7D         dec b
1387   0C9D             _if12_exit:
1388   0C9D             _if11_exit:
1389   0C9D             _for10_update:
1390   0C9D 0A F0 09      jmp _for10_cond
1391   0CA0             _for10_exit:
1392   0CA0 F9            leave
1393   0CA1 09            ret
1394   0CA2             
1395   0CA2             scanf:
1396   0CA2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1397   0CA5             ; char *p, *format_p; 
1398   0CA5 52 02 00      sub sp, 2
1399   0CA8 52 02 00      sub sp, 2
1400   0CAB             ; char c; 
1401   0CAB 52 01 00      sub sp, 1
1402   0CAE             ; int i; 
1403   0CAE 52 02 00      sub sp, 2
1404   0CB1             ; char input_string[  512                    ]; 
1405   0CB1 52 00 02      sub sp, 512
1406   0CB4             ; format_p = format; 
1407   0CB4 FA FD FF      lea d, [bp + -3] ; $format_p
1408   0CB7 DA            push d
1409   0CB8 FA 05 00      lea d, [bp + 5] ; $format
1410   0CBB 2A            mov b, [d]
1411   0CBC 38 00 00      mov c, 0
1412   0CBF E7            pop d
1413   0CC0 FD 43         mov [d], b
1414   0CC2             ; p = &format + 2; 
1415   0CC2 FA FF FF      lea d, [bp + -1] ; $p
1416   0CC5 DA            push d
1417   0CC6 FA 05 00      lea d, [bp + 5] ; $format
1418   0CC9 2D            mov b, d
1419   0CCA             ; --- START TERMS
1420   0CCA D7            push a
1421   0CCB 11            mov a, b
1422   0CCC FD 2E 02 00   mov32 cb, $00000002
1422   0CD0 00 00 
1423   0CD2 56            add b, a
1424   0CD3 E4            pop a
1425   0CD4             ; --- END TERMS
1426   0CD4 E7            pop d
1427   0CD5 FD 43         mov [d], b
1428   0CD7             ; for(;;){ 
1429   0CD7             _for17_init:
1430   0CD7             _for17_cond:
1431   0CD7             _for17_block:
1432   0CD7             ; if(!*format_p) break; 
1433   0CD7             _if18_cond:
1434   0CD7 FA FD FF      lea d, [bp + -3] ; $format_p
1435   0CDA 2A            mov b, [d]
1436   0CDB 38 00 00      mov c, 0
1437   0CDE 74            mov d, b
1438   0CDF 32            mov bl, [d]
1439   0CE0 A7 00         mov bh, 0
1440   0CE2 38 00 00      mov c, 0
1441   0CE5 C0 00 00      cmp b, 0
1442   0CE8 FD 71         seq ; !
1443   0CEA C0 00 00      cmp b, 0
1444   0CED C6 F6 0C      je _if18_else
1445   0CF0             _if18_TRUE:
1446   0CF0             ; break; 
1447   0CF0 0A 7E 0F      jmp _for17_exit ; for break
1448   0CF3 0A 7B 0F      jmp _if18_exit
1449   0CF6             _if18_else:
1450   0CF6             ; if(*format_p == '%'){ 
1451   0CF6             _if19_cond:
1452   0CF6 FA FD FF      lea d, [bp + -3] ; $format_p
1453   0CF9 2A            mov b, [d]
1454   0CFA 38 00 00      mov c, 0
1455   0CFD 74            mov d, b
1456   0CFE 32            mov bl, [d]
1457   0CFF A7 00         mov bh, 0
1458   0D01 38 00 00      mov c, 0
1459   0D04             ; --- START RELATIONAL
1460   0D04 D7            push a
1461   0D05 11            mov a, b
1462   0D06 FD 2E 25 00   mov32 cb, $00000025
1462   0D0A 00 00 
1463   0D0C B0            cmp a, b
1464   0D0D FD 71         seq ; ==
1465   0D0F E4            pop a
1466   0D10             ; --- END RELATIONAL
1467   0D10 C0 00 00      cmp b, 0
1468   0D13 C6 56 0F      je _if19_else
1469   0D16             _if19_TRUE:
1470   0D16             ; format_p++; 
1471   0D16 FA FD FF      lea d, [bp + -3] ; $format_p
1472   0D19 2A            mov b, [d]
1473   0D1A 38 00 00      mov c, 0
1474   0D1D FD 77         inc b
1475   0D1F FA FD FF      lea d, [bp + -3] ; $format_p
1476   0D22 FD 43         mov [d], b
1477   0D24 FD 7D         dec b
1478   0D26             ; switch(*format_p){ 
1479   0D26             _switch20_expr:
1480   0D26 FA FD FF      lea d, [bp + -3] ; $format_p
1481   0D29 2A            mov b, [d]
1482   0D2A 38 00 00      mov c, 0
1483   0D2D 74            mov d, b
1484   0D2E 32            mov bl, [d]
1485   0D2F A7 00         mov bh, 0
1486   0D31 38 00 00      mov c, 0
1487   0D34             _switch20_comparisons:
1488   0D34 C1 6C         cmp bl, $6c
1489   0D36 C6 62 0D      je _switch20_case0
1490   0D39 C1 4C         cmp bl, $4c
1491   0D3B C6 62 0D      je _switch20_case1
1492   0D3E C1 64         cmp bl, $64
1493   0D40 C6 21 0E      je _switch20_case2
1494   0D43 C1 69         cmp bl, $69
1495   0D45 C6 21 0E      je _switch20_case3
1496   0D48 C1 75         cmp bl, $75
1497   0D4A C6 5A 0E      je _switch20_case4
1498   0D4D C1 78         cmp bl, $78
1499   0D4F C6 93 0E      je _switch20_case5
1500   0D52 C1 63         cmp bl, $63
1501   0D54 C6 AE 0E      je _switch20_case6
1502   0D57 C1 73         cmp bl, $73
1503   0D59 C6 F0 0E      je _switch20_case7
1504   0D5C 0A 37 0F      jmp _switch20_default
1505   0D5F 0A 43 0F      jmp _switch20_exit
1506   0D62             _switch20_case0:
1507   0D62             _switch20_case1:
1508   0D62             ; format_p++; 
1509   0D62 FA FD FF      lea d, [bp + -3] ; $format_p
1510   0D65 2A            mov b, [d]
1511   0D66 38 00 00      mov c, 0
1512   0D69 FD 77         inc b
1513   0D6B FA FD FF      lea d, [bp + -3] ; $format_p
1514   0D6E FD 43         mov [d], b
1515   0D70 FD 7D         dec b
1516   0D72             ; if(*format_p == 'd' || *format_p == 'i'); 
1517   0D72             _if21_cond:
1518   0D72 FA FD FF      lea d, [bp + -3] ; $format_p
1519   0D75 2A            mov b, [d]
1520   0D76 38 00 00      mov c, 0
1521   0D79 74            mov d, b
1522   0D7A 32            mov bl, [d]
1523   0D7B A7 00         mov bh, 0
1524   0D7D 38 00 00      mov c, 0
1525   0D80             ; --- START RELATIONAL
1526   0D80 D7            push a
1527   0D81 11            mov a, b
1528   0D82 FD 2E 64 00   mov32 cb, $00000064
1528   0D86 00 00 
1529   0D88 B0            cmp a, b
1530   0D89 FD 71         seq ; ==
1531   0D8B E4            pop a
1532   0D8C             ; --- END RELATIONAL
1533   0D8C             ; --- START LOGICAL OR
1534   0D8C D7            push a
1535   0D8D 11            mov a, b
1536   0D8E FA FD FF      lea d, [bp + -3] ; $format_p
1537   0D91 2A            mov b, [d]
1538   0D92 38 00 00      mov c, 0
1539   0D95 74            mov d, b
1540   0D96 32            mov bl, [d]
1541   0D97 A7 00         mov bh, 0
1542   0D99 38 00 00      mov c, 0
1543   0D9C             ; --- START RELATIONAL
1544   0D9C D7            push a
1545   0D9D 11            mov a, b
1546   0D9E FD 2E 69 00   mov32 cb, $00000069
1546   0DA2 00 00 
1547   0DA4 B0            cmp a, b
1548   0DA5 FD 71         seq ; ==
1549   0DA7 E4            pop a
1550   0DA8             ; --- END RELATIONAL
1551   0DA8 FD A8         sor a, b ; ||
1552   0DAA E4            pop a
1553   0DAB             ; --- END LOGICAL OR
1554   0DAB C0 00 00      cmp b, 0
1555   0DAE C6 B4 0D      je _if21_else
1556   0DB1             _if21_TRUE:
1557   0DB1             ; ; 
1558   0DB1 0A 06 0E      jmp _if21_exit
1559   0DB4             _if21_else:
1560   0DB4             ; if(*format_p == 'u'); 
1561   0DB4             _if22_cond:
1562   0DB4 FA FD FF      lea d, [bp + -3] ; $format_p
1563   0DB7 2A            mov b, [d]
1564   0DB8 38 00 00      mov c, 0
1565   0DBB 74            mov d, b
1566   0DBC 32            mov bl, [d]
1567   0DBD A7 00         mov bh, 0
1568   0DBF 38 00 00      mov c, 0
1569   0DC2             ; --- START RELATIONAL
1570   0DC2 D7            push a
1571   0DC3 11            mov a, b
1572   0DC4 FD 2E 75 00   mov32 cb, $00000075
1572   0DC8 00 00 
1573   0DCA B0            cmp a, b
1574   0DCB FD 71         seq ; ==
1575   0DCD E4            pop a
1576   0DCE             ; --- END RELATIONAL
1577   0DCE C0 00 00      cmp b, 0
1578   0DD1 C6 D7 0D      je _if22_else
1579   0DD4             _if22_TRUE:
1580   0DD4             ; ; 
1581   0DD4 0A 06 0E      jmp _if22_exit
1582   0DD7             _if22_else:
1583   0DD7             ; if(*format_p == 'x'); 
1584   0DD7             _if23_cond:
1585   0DD7 FA FD FF      lea d, [bp + -3] ; $format_p
1586   0DDA 2A            mov b, [d]
1587   0DDB 38 00 00      mov c, 0
1588   0DDE 74            mov d, b
1589   0DDF 32            mov bl, [d]
1590   0DE0 A7 00         mov bh, 0
1591   0DE2 38 00 00      mov c, 0
1592   0DE5             ; --- START RELATIONAL
1593   0DE5 D7            push a
1594   0DE6 11            mov a, b
1595   0DE7 FD 2E 78 00   mov32 cb, $00000078
1595   0DEB 00 00 
1596   0DED B0            cmp a, b
1597   0DEE FD 71         seq ; ==
1598   0DF0 E4            pop a
1599   0DF1             ; --- END RELATIONAL
1600   0DF1 C0 00 00      cmp b, 0
1601   0DF4 C6 FA 0D      je _if23_else
1602   0DF7             _if23_TRUE:
1603   0DF7             ; ; 
1604   0DF7 0A 06 0E      jmp _if23_exit
1605   0DFA             _if23_else:
1606   0DFA             ; err("Unexpected format in printf."); 
1607   0DFA             ; --- START FUNCTION CALL
1608   0DFA 26 1F 2E      mov b, _s3 ; "Unexpected format in printf."
1609   0DFD FD AB         swp b
1610   0DFF D8            push b
1611   0E00 07 30 13      call err
1612   0E03 51 02 00      add sp, 2
1613   0E06             ; --- END FUNCTION CALL
1614   0E06             _if23_exit:
1615   0E06             _if22_exit:
1616   0E06             _if21_exit:
1617   0E06             ; p = p + 4; 
1618   0E06 FA FF FF      lea d, [bp + -1] ; $p
1619   0E09 DA            push d
1620   0E0A FA FF FF      lea d, [bp + -1] ; $p
1621   0E0D 2A            mov b, [d]
1622   0E0E 38 00 00      mov c, 0
1623   0E11             ; --- START TERMS
1624   0E11 D7            push a
1625   0E12 11            mov a, b
1626   0E13 FD 2E 04 00   mov32 cb, $00000004
1626   0E17 00 00 
1627   0E19 56            add b, a
1628   0E1A E4            pop a
1629   0E1B             ; --- END TERMS
1630   0E1B E7            pop d
1631   0E1C FD 43         mov [d], b
1632   0E1E             ; break; 
1633   0E1E 0A 43 0F      jmp _switch20_exit ; case break
1634   0E21             _switch20_case2:
1635   0E21             _switch20_case3:
1636   0E21             ; i = scann(); 
1637   0E21 FA FA FF      lea d, [bp + -6] ; $i
1638   0E24 DA            push d
1639   0E25             ; --- START FUNCTION CALL
1640   0E25 07 43 1D      call scann
1641   0E28 E7            pop d
1642   0E29 FD 43         mov [d], b
1643   0E2B             ; **(int **)p = i; 
1644   0E2B FA FF FF      lea d, [bp + -1] ; $p
1645   0E2E 2A            mov b, [d]
1646   0E2F 38 00 00      mov c, 0
1647   0E32 74            mov d, b
1648   0E33 2A            mov b, [d]
1649   0E34 D8            push b
1650   0E35 FA FA FF      lea d, [bp + -6] ; $i
1651   0E38 2A            mov b, [d]
1652   0E39 38 00 00      mov c, 0
1653   0E3C E7            pop d
1654   0E3D FD 43         mov [d], b
1655   0E3F             ; p = p + 2; 
1656   0E3F FA FF FF      lea d, [bp + -1] ; $p
1657   0E42 DA            push d
1658   0E43 FA FF FF      lea d, [bp + -1] ; $p
1659   0E46 2A            mov b, [d]
1660   0E47 38 00 00      mov c, 0
1661   0E4A             ; --- START TERMS
1662   0E4A D7            push a
1663   0E4B 11            mov a, b
1664   0E4C FD 2E 02 00   mov32 cb, $00000002
1664   0E50 00 00 
1665   0E52 56            add b, a
1666   0E53 E4            pop a
1667   0E54             ; --- END TERMS
1668   0E54 E7            pop d
1669   0E55 FD 43         mov [d], b
1670   0E57             ; break; 
1671   0E57 0A 43 0F      jmp _switch20_exit ; case break
1672   0E5A             _switch20_case4:
1673   0E5A             ; i = scann(); 
1674   0E5A FA FA FF      lea d, [bp + -6] ; $i
1675   0E5D DA            push d
1676   0E5E             ; --- START FUNCTION CALL
1677   0E5E 07 43 1D      call scann
1678   0E61 E7            pop d
1679   0E62 FD 43         mov [d], b
1680   0E64             ; **(int **)p = i; 
1681   0E64 FA FF FF      lea d, [bp + -1] ; $p
1682   0E67 2A            mov b, [d]
1683   0E68 38 00 00      mov c, 0
1684   0E6B 74            mov d, b
1685   0E6C 2A            mov b, [d]
1686   0E6D D8            push b
1687   0E6E FA FA FF      lea d, [bp + -6] ; $i
1688   0E71 2A            mov b, [d]
1689   0E72 38 00 00      mov c, 0
1690   0E75 E7            pop d
1691   0E76 FD 43         mov [d], b
1692   0E78             ; p = p + 2; 
1693   0E78 FA FF FF      lea d, [bp + -1] ; $p
1694   0E7B DA            push d
1695   0E7C FA FF FF      lea d, [bp + -1] ; $p
1696   0E7F 2A            mov b, [d]
1697   0E80 38 00 00      mov c, 0
1698   0E83             ; --- START TERMS
1699   0E83 D7            push a
1700   0E84 11            mov a, b
1701   0E85 FD 2E 02 00   mov32 cb, $00000002
1701   0E89 00 00 
1702   0E8B 56            add b, a
1703   0E8C E4            pop a
1704   0E8D             ; --- END TERMS
1705   0E8D E7            pop d
1706   0E8E FD 43         mov [d], b
1707   0E90             ; break; 
1708   0E90 0A 43 0F      jmp _switch20_exit ; case break
1709   0E93             _switch20_case5:
1710   0E93             ; p = p + 2; 
1711   0E93 FA FF FF      lea d, [bp + -1] ; $p
1712   0E96 DA            push d
1713   0E97 FA FF FF      lea d, [bp + -1] ; $p
1714   0E9A 2A            mov b, [d]
1715   0E9B 38 00 00      mov c, 0
1716   0E9E             ; --- START TERMS
1717   0E9E D7            push a
1718   0E9F 11            mov a, b
1719   0EA0 FD 2E 02 00   mov32 cb, $00000002
1719   0EA4 00 00 
1720   0EA6 56            add b, a
1721   0EA7 E4            pop a
1722   0EA8             ; --- END TERMS
1723   0EA8 E7            pop d
1724   0EA9 FD 43         mov [d], b
1725   0EAB             ; break; 
1726   0EAB 0A 43 0F      jmp _switch20_exit ; case break
1727   0EAE             _switch20_case6:
1728   0EAE             ; c = getchar(); 
1729   0EAE FA FC FF      lea d, [bp + -4] ; $c
1730   0EB1 DA            push d
1731   0EB2             ; --- START FUNCTION CALL
1732   0EB2 07 2A 1D      call getchar
1733   0EB5 E7            pop d
1734   0EB6 FD 3E         mov [d], bl
1735   0EB8             ; **(char **)p = *(char *)c; 
1736   0EB8 FA FF FF      lea d, [bp + -1] ; $p
1737   0EBB 2A            mov b, [d]
1738   0EBC 38 00 00      mov c, 0
1739   0EBF 74            mov d, b
1740   0EC0 2A            mov b, [d]
1741   0EC1 D8            push b
1742   0EC2 FA FC FF      lea d, [bp + -4] ; $c
1743   0EC5 32            mov bl, [d]
1744   0EC6 A7 00         mov bh, 0
1745   0EC8 38 00 00      mov c, 0
1746   0ECB 74            mov d, b
1747   0ECC 32            mov bl, [d]
1748   0ECD A7 00         mov bh, 0
1749   0ECF 38 00 00      mov c, 0
1750   0ED2 E7            pop d
1751   0ED3 FD 43         mov [d], b
1752   0ED5             ; p = p + 1; 
1753   0ED5 FA FF FF      lea d, [bp + -1] ; $p
1754   0ED8 DA            push d
1755   0ED9 FA FF FF      lea d, [bp + -1] ; $p
1756   0EDC 2A            mov b, [d]
1757   0EDD 38 00 00      mov c, 0
1758   0EE0             ; --- START TERMS
1759   0EE0 D7            push a
1760   0EE1 11            mov a, b
1761   0EE2 FD 2E 01 00   mov32 cb, $00000001
1761   0EE6 00 00 
1762   0EE8 56            add b, a
1763   0EE9 E4            pop a
1764   0EEA             ; --- END TERMS
1765   0EEA E7            pop d
1766   0EEB FD 43         mov [d], b
1767   0EED             ; break; 
1768   0EED 0A 43 0F      jmp _switch20_exit ; case break
1769   0EF0             _switch20_case7:
1770   0EF0             ; gets(input_string); 
1771   0EF0             ; --- START FUNCTION CALL
1772   0EF0 FA FA FD      lea d, [bp + -518] ; $input_string
1773   0EF3 2D            mov b, d
1774   0EF4 38 00 00      mov c, 0
1775   0EF7 FD AB         swp b
1776   0EF9 D8            push b
1777   0EFA 07 1C 15      call gets
1778   0EFD 51 02 00      add sp, 2
1779   0F00             ; --- END FUNCTION CALL
1780   0F00             ; strcpy(*(char **)p, input_string); 
1781   0F00             ; --- START FUNCTION CALL
1782   0F00 FA FA FD      lea d, [bp + -518] ; $input_string
1783   0F03 2D            mov b, d
1784   0F04 38 00 00      mov c, 0
1785   0F07 FD AB         swp b
1786   0F09 D8            push b
1787   0F0A FA FF FF      lea d, [bp + -1] ; $p
1788   0F0D 2A            mov b, [d]
1789   0F0E 38 00 00      mov c, 0
1790   0F11 74            mov d, b
1791   0F12 2A            mov b, [d]
1792   0F13 FD AB         swp b
1793   0F15 D8            push b
1794   0F16 07 93 04      call strcpy
1795   0F19 51 04 00      add sp, 4
1796   0F1C             ; --- END FUNCTION CALL
1797   0F1C             ; p = p + 2; 
1798   0F1C FA FF FF      lea d, [bp + -1] ; $p
1799   0F1F DA            push d
1800   0F20 FA FF FF      lea d, [bp + -1] ; $p
1801   0F23 2A            mov b, [d]
1802   0F24 38 00 00      mov c, 0
1803   0F27             ; --- START TERMS
1804   0F27 D7            push a
1805   0F28 11            mov a, b
1806   0F29 FD 2E 02 00   mov32 cb, $00000002
1806   0F2D 00 00 
1807   0F2F 56            add b, a
1808   0F30 E4            pop a
1809   0F31             ; --- END TERMS
1810   0F31 E7            pop d
1811   0F32 FD 43         mov [d], b
1812   0F34             ; break; 
1813   0F34 0A 43 0F      jmp _switch20_exit ; case break
1814   0F37             _switch20_default:
1815   0F37             ; print("Error: Unknown argument type.\n"); 
1816   0F37             ; --- START FUNCTION CALL
1817   0F37 26 3C 2E      mov b, _s4 ; "Error: Unknown argument type.\n"
1818   0F3A FD AB         swp b
1819   0F3C D8            push b
1820   0F3D 07 6B 1D      call print
1821   0F40 51 02 00      add sp, 2
1822   0F43             ; --- END FUNCTION CALL
1823   0F43             _switch20_exit:
1824   0F43             ; format_p++; 
1825   0F43 FA FD FF      lea d, [bp + -3] ; $format_p
1826   0F46 2A            mov b, [d]
1827   0F47 38 00 00      mov c, 0
1828   0F4A FD 77         inc b
1829   0F4C FA FD FF      lea d, [bp + -3] ; $format_p
1830   0F4F FD 43         mov [d], b
1831   0F51 FD 7D         dec b
1832   0F53 0A 7B 0F      jmp _if19_exit
1833   0F56             _if19_else:
1834   0F56             ; putchar(*format_p); 
1835   0F56             ; --- START FUNCTION CALL
1836   0F56 FA FD FF      lea d, [bp + -3] ; $format_p
1837   0F59 2A            mov b, [d]
1838   0F5A 38 00 00      mov c, 0
1839   0F5D 74            mov d, b
1840   0F5E 32            mov bl, [d]
1841   0F5F A7 00         mov bh, 0
1842   0F61 38 00 00      mov c, 0
1843   0F64 DD            push bl
1844   0F65 07 1D 1D      call putchar
1845   0F68 51 01 00      add sp, 1
1846   0F6B             ; --- END FUNCTION CALL
1847   0F6B             ; format_p++; 
1848   0F6B FA FD FF      lea d, [bp + -3] ; $format_p
1849   0F6E 2A            mov b, [d]
1850   0F6F 38 00 00      mov c, 0
1851   0F72 FD 77         inc b
1852   0F74 FA FD FF      lea d, [bp + -3] ; $format_p
1853   0F77 FD 43         mov [d], b
1854   0F79 FD 7D         dec b
1855   0F7B             _if19_exit:
1856   0F7B             _if18_exit:
1857   0F7B             _for17_update:
1858   0F7B 0A D7 0C      jmp _for17_cond
1859   0F7E             _for17_exit:
1860   0F7E F9            leave
1861   0F7F 09            ret
1862   0F80             
1863   0F80             sprintf:
1864   0F80 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1865   0F83             ; char *p, *format_p; 
1866   0F83 52 02 00      sub sp, 2
1867   0F86 52 02 00      sub sp, 2
1868   0F89             ; char *sp; 
1869   0F89 52 02 00      sub sp, 2
1870   0F8C             ; sp = dest; 
1871   0F8C FA FB FF      lea d, [bp + -5] ; $sp
1872   0F8F DA            push d
1873   0F90 FA 05 00      lea d, [bp + 5] ; $dest
1874   0F93 2A            mov b, [d]
1875   0F94 38 00 00      mov c, 0
1876   0F97 E7            pop d
1877   0F98 FD 43         mov [d], b
1878   0F9A             ; format_p = format; 
1879   0F9A FA FD FF      lea d, [bp + -3] ; $format_p
1880   0F9D DA            push d
1881   0F9E FA 07 00      lea d, [bp + 7] ; $format
1882   0FA1 2A            mov b, [d]
1883   0FA2 38 00 00      mov c, 0
1884   0FA5 E7            pop d
1885   0FA6 FD 43         mov [d], b
1886   0FA8             ; p = &format + 2; 
1887   0FA8 FA FF FF      lea d, [bp + -1] ; $p
1888   0FAB DA            push d
1889   0FAC FA 07 00      lea d, [bp + 7] ; $format
1890   0FAF 2D            mov b, d
1891   0FB0             ; --- START TERMS
1892   0FB0 D7            push a
1893   0FB1 11            mov a, b
1894   0FB2 FD 2E 02 00   mov32 cb, $00000002
1894   0FB6 00 00 
1895   0FB8 56            add b, a
1896   0FB9 E4            pop a
1897   0FBA             ; --- END TERMS
1898   0FBA E7            pop d
1899   0FBB FD 43         mov [d], b
1900   0FBD             ; for(;;){ 
1901   0FBD             _for24_init:
1902   0FBD             _for24_cond:
1903   0FBD             _for24_block:
1904   0FBD             ; if(!*format_p) break; 
1905   0FBD             _if25_cond:
1906   0FBD FA FD FF      lea d, [bp + -3] ; $format_p
1907   0FC0 2A            mov b, [d]
1908   0FC1 38 00 00      mov c, 0
1909   0FC4 74            mov d, b
1910   0FC5 32            mov bl, [d]
1911   0FC6 A7 00         mov bh, 0
1912   0FC8 38 00 00      mov c, 0
1913   0FCB C0 00 00      cmp b, 0
1914   0FCE FD 71         seq ; !
1915   0FD0 C0 00 00      cmp b, 0
1916   0FD3 C6 DC 0F      je _if25_else
1917   0FD6             _if25_TRUE:
1918   0FD6             ; break; 
1919   0FD6 0A 0A 13      jmp _for24_exit ; for break
1920   0FD9 0A 07 13      jmp _if25_exit
1921   0FDC             _if25_else:
1922   0FDC             ; if(*format_p == '%'){ 
1923   0FDC             _if26_cond:
1924   0FDC FA FD FF      lea d, [bp + -3] ; $format_p
1925   0FDF 2A            mov b, [d]
1926   0FE0 38 00 00      mov c, 0
1927   0FE3 74            mov d, b
1928   0FE4 32            mov bl, [d]
1929   0FE5 A7 00         mov bh, 0
1930   0FE7 38 00 00      mov c, 0
1931   0FEA             ; --- START RELATIONAL
1932   0FEA D7            push a
1933   0FEB 11            mov a, b
1934   0FEC FD 2E 25 00   mov32 cb, $00000025
1934   0FF0 00 00 
1935   0FF2 B0            cmp a, b
1936   0FF3 FD 71         seq ; ==
1937   0FF5 E4            pop a
1938   0FF6             ; --- END RELATIONAL
1939   0FF6 C0 00 00      cmp b, 0
1940   0FF9 C6 DC 12      je _if26_else
1941   0FFC             _if26_TRUE:
1942   0FFC             ; format_p++; 
1943   0FFC FA FD FF      lea d, [bp + -3] ; $format_p
1944   0FFF 2A            mov b, [d]
1945   1000 38 00 00      mov c, 0
1946   1003 FD 77         inc b
1947   1005 FA FD FF      lea d, [bp + -3] ; $format_p
1948   1008 FD 43         mov [d], b
1949   100A FD 7D         dec b
1950   100C             ; switch(*format_p){ 
1951   100C             _switch27_expr:
1952   100C FA FD FF      lea d, [bp + -3] ; $format_p
1953   100F 2A            mov b, [d]
1954   1010 38 00 00      mov c, 0
1955   1013 74            mov d, b
1956   1014 32            mov bl, [d]
1957   1015 A7 00         mov bh, 0
1958   1017 38 00 00      mov c, 0
1959   101A             _switch27_comparisons:
1960   101A C1 6C         cmp bl, $6c
1961   101C C6 48 10      je _switch27_case0
1962   101F C1 4C         cmp bl, $4c
1963   1021 C6 48 10      je _switch27_case1
1964   1024 C1 64         cmp bl, $64
1965   1026 C6 58 11      je _switch27_case2
1966   1029 C1 69         cmp bl, $69
1967   102B C6 58 11      je _switch27_case3
1968   102E C1 75         cmp bl, $75
1969   1030 C6 A4 11      je _switch27_case4
1970   1033 C1 78         cmp bl, $78
1971   1035 C6 F0 11      je _switch27_case5
1972   1038 C1 63         cmp bl, $63
1973   103A C6 14 12      je _switch27_case6
1974   103D C1 73         cmp bl, $73
1975   103F C6 51 12      je _switch27_case7
1976   1042 0A BD 12      jmp _switch27_default
1977   1045 0A C9 12      jmp _switch27_exit
1978   1048             _switch27_case0:
1979   1048             _switch27_case1:
1980   1048             ; format_p++; 
1981   1048 FA FD FF      lea d, [bp + -3] ; $format_p
1982   104B 2A            mov b, [d]
1983   104C 38 00 00      mov c, 0
1984   104F FD 77         inc b
1985   1051 FA FD FF      lea d, [bp + -3] ; $format_p
1986   1054 FD 43         mov [d], b
1987   1056 FD 7D         dec b
1988   1058             ; if(*format_p == 'd' || *format_p == 'i') 
1989   1058             _if28_cond:
1990   1058 FA FD FF      lea d, [bp + -3] ; $format_p
1991   105B 2A            mov b, [d]
1992   105C 38 00 00      mov c, 0
1993   105F 74            mov d, b
1994   1060 32            mov bl, [d]
1995   1061 A7 00         mov bh, 0
1996   1063 38 00 00      mov c, 0
1997   1066             ; --- START RELATIONAL
1998   1066 D7            push a
1999   1067 11            mov a, b
2000   1068 FD 2E 64 00   mov32 cb, $00000064
2000   106C 00 00 
2001   106E B0            cmp a, b
2002   106F FD 71         seq ; ==
2003   1071 E4            pop a
2004   1072             ; --- END RELATIONAL
2005   1072             ; --- START LOGICAL OR
2006   1072 D7            push a
2007   1073 11            mov a, b
2008   1074 FA FD FF      lea d, [bp + -3] ; $format_p
2009   1077 2A            mov b, [d]
2010   1078 38 00 00      mov c, 0
2011   107B 74            mov d, b
2012   107C 32            mov bl, [d]
2013   107D A7 00         mov bh, 0
2014   107F 38 00 00      mov c, 0
2015   1082             ; --- START RELATIONAL
2016   1082 D7            push a
2017   1083 11            mov a, b
2018   1084 FD 2E 69 00   mov32 cb, $00000069
2018   1088 00 00 
2019   108A B0            cmp a, b
2020   108B FD 71         seq ; ==
2021   108D E4            pop a
2022   108E             ; --- END RELATIONAL
2023   108E FD A8         sor a, b ; ||
2024   1090 E4            pop a
2025   1091             ; --- END LOGICAL OR
2026   1091 C0 00 00      cmp b, 0
2027   1094 C6 B5 10      je _if28_else
2028   1097             _if28_TRUE:
2029   1097             ; print_signed_long(*(long *)p); 
2030   1097             ; --- START FUNCTION CALL
2031   1097 FA FF FF      lea d, [bp + -1] ; $p
2032   109A 2A            mov b, [d]
2033   109B 38 00 00      mov c, 0
2034   109E 74            mov d, b
2035   109F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2036   10A2 FD 39         mov c, b ; And place it into C
2037   10A4 2A            mov b, [d] ; Lower Word in B
2038   10A5 12            mov a, c
2039   10A6 FD AA         swp a
2040   10A8 D7            push a
2041   10A9 FD AB         swp b
2042   10AB D8            push b
2043   10AC 07 72 16      call print_signed_long
2044   10AF 51 04 00      add sp, 4
2045   10B2             ; --- END FUNCTION CALL
2046   10B2 0A 3D 11      jmp _if28_exit
2047   10B5             _if28_else:
2048   10B5             ; if(*format_p == 'u') 
2049   10B5             _if29_cond:
2050   10B5 FA FD FF      lea d, [bp + -3] ; $format_p
2051   10B8 2A            mov b, [d]
2052   10B9 38 00 00      mov c, 0
2053   10BC 74            mov d, b
2054   10BD 32            mov bl, [d]
2055   10BE A7 00         mov bh, 0
2056   10C0 38 00 00      mov c, 0
2057   10C3             ; --- START RELATIONAL
2058   10C3 D7            push a
2059   10C4 11            mov a, b
2060   10C5 FD 2E 75 00   mov32 cb, $00000075
2060   10C9 00 00 
2061   10CB B0            cmp a, b
2062   10CC FD 71         seq ; ==
2063   10CE E4            pop a
2064   10CF             ; --- END RELATIONAL
2065   10CF C0 00 00      cmp b, 0
2066   10D2 C6 F3 10      je _if29_else
2067   10D5             _if29_TRUE:
2068   10D5             ; print_unsigned_long(*(unsigned long *)p); 
2069   10D5             ; --- START FUNCTION CALL
2070   10D5 FA FF FF      lea d, [bp + -1] ; $p
2071   10D8 2A            mov b, [d]
2072   10D9 38 00 00      mov c, 0
2073   10DC 74            mov d, b
2074   10DD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2075   10E0 FD 39         mov c, b ; And place it into C
2076   10E2 2A            mov b, [d] ; Lower Word in B
2077   10E3 12            mov a, c
2078   10E4 FD AA         swp a
2079   10E6 D7            push a
2080   10E7 FD AB         swp b
2081   10E9 D8            push b
2082   10EA 07 E1 17      call print_unsigned_long
2083   10ED 51 04 00      add sp, 4
2084   10F0             ; --- END FUNCTION CALL
2085   10F0 0A 3D 11      jmp _if29_exit
2086   10F3             _if29_else:
2087   10F3             ; if(*format_p == 'x') 
2088   10F3             _if30_cond:
2089   10F3 FA FD FF      lea d, [bp + -3] ; $format_p
2090   10F6 2A            mov b, [d]
2091   10F7 38 00 00      mov c, 0
2092   10FA 74            mov d, b
2093   10FB 32            mov bl, [d]
2094   10FC A7 00         mov bh, 0
2095   10FE 38 00 00      mov c, 0
2096   1101             ; --- START RELATIONAL
2097   1101 D7            push a
2098   1102 11            mov a, b
2099   1103 FD 2E 78 00   mov32 cb, $00000078
2099   1107 00 00 
2100   1109 B0            cmp a, b
2101   110A FD 71         seq ; ==
2102   110C E4            pop a
2103   110D             ; --- END RELATIONAL
2104   110D C0 00 00      cmp b, 0
2105   1110 C6 31 11      je _if30_else
2106   1113             _if30_TRUE:
2107   1113             ; printx32(*(long int *)p); 
2108   1113             ; --- START FUNCTION CALL
2109   1113 FA FF FF      lea d, [bp + -1] ; $p
2110   1116 2A            mov b, [d]
2111   1117 38 00 00      mov c, 0
2112   111A 74            mov d, b
2113   111B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2114   111E FD 39         mov c, b ; And place it into C
2115   1120 2A            mov b, [d] ; Lower Word in B
2116   1121 12            mov a, c
2117   1122 FD AA         swp a
2118   1124 D7            push a
2119   1125 FD AB         swp b
2120   1127 D8            push b
2121   1128 07 45 13      call printx32
2122   112B 51 04 00      add sp, 4
2123   112E             ; --- END FUNCTION CALL
2124   112E 0A 3D 11      jmp _if30_exit
2125   1131             _if30_else:
2126   1131             ; err("Unexpected format in printf."); 
2127   1131             ; --- START FUNCTION CALL
2128   1131 26 1F 2E      mov b, _s3 ; "Unexpected format in printf."
2129   1134 FD AB         swp b
2130   1136 D8            push b
2131   1137 07 30 13      call err
2132   113A 51 02 00      add sp, 2
2133   113D             ; --- END FUNCTION CALL
2134   113D             _if30_exit:
2135   113D             _if29_exit:
2136   113D             _if28_exit:
2137   113D             ; p = p + 4; 
2138   113D FA FF FF      lea d, [bp + -1] ; $p
2139   1140 DA            push d
2140   1141 FA FF FF      lea d, [bp + -1] ; $p
2141   1144 2A            mov b, [d]
2142   1145 38 00 00      mov c, 0
2143   1148             ; --- START TERMS
2144   1148 D7            push a
2145   1149 11            mov a, b
2146   114A FD 2E 04 00   mov32 cb, $00000004
2146   114E 00 00 
2147   1150 56            add b, a
2148   1151 E4            pop a
2149   1152             ; --- END TERMS
2150   1152 E7            pop d
2151   1153 FD 43         mov [d], b
2152   1155             ; break; 
2153   1155 0A C9 12      jmp _switch27_exit ; case break
2154   1158             _switch27_case2:
2155   1158             _switch27_case3:
2156   1158             ; sp = sp + sprint_signed(sp, *(int*)p); 
2157   1158 FA FB FF      lea d, [bp + -5] ; $sp
2158   115B DA            push d
2159   115C FA FB FF      lea d, [bp + -5] ; $sp
2160   115F 2A            mov b, [d]
2161   1160 38 00 00      mov c, 0
2162   1163             ; --- START TERMS
2163   1163 D7            push a
2164   1164 11            mov a, b
2165   1165             ; --- START FUNCTION CALL
2166   1165 FA FF FF      lea d, [bp + -1] ; $p
2167   1168 2A            mov b, [d]
2168   1169 38 00 00      mov c, 0
2169   116C 74            mov d, b
2170   116D 2A            mov b, [d]
2171   116E 38 00 00      mov c, 0
2172   1171 FD AB         swp b
2173   1173 D8            push b
2174   1174 FA FB FF      lea d, [bp + -5] ; $sp
2175   1177 2A            mov b, [d]
2176   1178 38 00 00      mov c, 0
2177   117B FD AB         swp b
2178   117D D8            push b
2179   117E 07 55 1B      call sprint_signed
2180   1181 51 04 00      add sp, 4
2181   1184             ; --- END FUNCTION CALL
2182   1184 56            add b, a
2183   1185 E4            pop a
2184   1186             ; --- END TERMS
2185   1186 E7            pop d
2186   1187 FD 43         mov [d], b
2187   1189             ; p = p + 2; 
2188   1189 FA FF FF      lea d, [bp + -1] ; $p
2189   118C DA            push d
2190   118D FA FF FF      lea d, [bp + -1] ; $p
2191   1190 2A            mov b, [d]
2192   1191 38 00 00      mov c, 0
2193   1194             ; --- START TERMS
2194   1194 D7            push a
2195   1195 11            mov a, b
2196   1196 FD 2E 02 00   mov32 cb, $00000002
2196   119A 00 00 
2197   119C 56            add b, a
2198   119D E4            pop a
2199   119E             ; --- END TERMS
2200   119E E7            pop d
2201   119F FD 43         mov [d], b
2202   11A1             ; break; 
2203   11A1 0A C9 12      jmp _switch27_exit ; case break
2204   11A4             _switch27_case4:
2205   11A4             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
2206   11A4 FA FB FF      lea d, [bp + -5] ; $sp
2207   11A7 DA            push d
2208   11A8 FA FB FF      lea d, [bp + -5] ; $sp
2209   11AB 2A            mov b, [d]
2210   11AC 38 00 00      mov c, 0
2211   11AF             ; --- START TERMS
2212   11AF D7            push a
2213   11B0 11            mov a, b
2214   11B1             ; --- START FUNCTION CALL
2215   11B1 FA FF FF      lea d, [bp + -1] ; $p
2216   11B4 2A            mov b, [d]
2217   11B5 38 00 00      mov c, 0
2218   11B8 74            mov d, b
2219   11B9 2A            mov b, [d]
2220   11BA 38 00 00      mov c, 0
2221   11BD FD AB         swp b
2222   11BF D8            push b
2223   11C0 FA FB FF      lea d, [bp + -5] ; $sp
2224   11C3 2A            mov b, [d]
2225   11C4 38 00 00      mov c, 0
2226   11C7 FD AB         swp b
2227   11C9 D8            push b
2228   11CA 07 FD 18      call sprint_unsigned
2229   11CD 51 04 00      add sp, 4
2230   11D0             ; --- END FUNCTION CALL
2231   11D0 56            add b, a
2232   11D1 E4            pop a
2233   11D2             ; --- END TERMS
2234   11D2 E7            pop d
2235   11D3 FD 43         mov [d], b
2236   11D5             ; p = p + 2; 
2237   11D5 FA FF FF      lea d, [bp + -1] ; $p
2238   11D8 DA            push d
2239   11D9 FA FF FF      lea d, [bp + -1] ; $p
2240   11DC 2A            mov b, [d]
2241   11DD 38 00 00      mov c, 0
2242   11E0             ; --- START TERMS
2243   11E0 D7            push a
2244   11E1 11            mov a, b
2245   11E2 FD 2E 02 00   mov32 cb, $00000002
2245   11E6 00 00 
2246   11E8 56            add b, a
2247   11E9 E4            pop a
2248   11EA             ; --- END TERMS
2249   11EA E7            pop d
2250   11EB FD 43         mov [d], b
2251   11ED             ; break; 
2252   11ED 0A C9 12      jmp _switch27_exit ; case break
2253   11F0             _switch27_case5:
2254   11F0             
2255   11F0             ; --- BEGIN INLINE ASM SEGMENT
2256   11F0 FA FF FF      lea d, [bp + -1] ; $p
2257   11F3 FD 2A         mov d, [d]
2258   11F5 2A            mov b, [d]
2259   11F6 07 CE 20      call print_u16x
2260   11F9             ; --- END INLINE ASM SEGMENT
2261   11F9             
2262   11F9             ; p = p + 2; 
2263   11F9 FA FF FF      lea d, [bp + -1] ; $p
2264   11FC DA            push d
2265   11FD FA FF FF      lea d, [bp + -1] ; $p
2266   1200 2A            mov b, [d]
2267   1201 38 00 00      mov c, 0
2268   1204             ; --- START TERMS
2269   1204 D7            push a
2270   1205 11            mov a, b
2271   1206 FD 2E 02 00   mov32 cb, $00000002
2271   120A 00 00 
2272   120C 56            add b, a
2273   120D E4            pop a
2274   120E             ; --- END TERMS
2275   120E E7            pop d
2276   120F FD 43         mov [d], b
2277   1211             ; break; 
2278   1211 0A C9 12      jmp _switch27_exit ; case break
2279   1214             _switch27_case6:
2280   1214             ; *sp++ = *(char *)p; 
2281   1214 FA FB FF      lea d, [bp + -5] ; $sp
2282   1217 2A            mov b, [d]
2283   1218 38 00 00      mov c, 0
2284   121B FD 77         inc b
2285   121D FA FB FF      lea d, [bp + -5] ; $sp
2286   1220 FD 43         mov [d], b
2287   1222 FD 7D         dec b
2288   1224 D8            push b
2289   1225 FA FF FF      lea d, [bp + -1] ; $p
2290   1228 2A            mov b, [d]
2291   1229 38 00 00      mov c, 0
2292   122C 74            mov d, b
2293   122D 32            mov bl, [d]
2294   122E A7 00         mov bh, 0
2295   1230 38 00 00      mov c, 0
2296   1233 E7            pop d
2297   1234 FD 3E         mov [d], bl
2298   1236             ; p = p + 1; 
2299   1236 FA FF FF      lea d, [bp + -1] ; $p
2300   1239 DA            push d
2301   123A FA FF FF      lea d, [bp + -1] ; $p
2302   123D 2A            mov b, [d]
2303   123E 38 00 00      mov c, 0
2304   1241             ; --- START TERMS
2305   1241 D7            push a
2306   1242 11            mov a, b
2307   1243 FD 2E 01 00   mov32 cb, $00000001
2307   1247 00 00 
2308   1249 56            add b, a
2309   124A E4            pop a
2310   124B             ; --- END TERMS
2311   124B E7            pop d
2312   124C FD 43         mov [d], b
2313   124E             ; break; 
2314   124E 0A C9 12      jmp _switch27_exit ; case break
2315   1251             _switch27_case7:
2316   1251             ; int len = strlen(*(char **)p); 
2317   1251 52 02 00      sub sp, 2
2318   1254             ; --- START LOCAL VAR INITIALIZATION
2319   1254 FA F9 FF      lea d, [bp + -7] ; $len
2320   1257 DA            push d
2321   1258             ; --- START FUNCTION CALL
2322   1258 FA FF FF      lea d, [bp + -1] ; $p
2323   125B 2A            mov b, [d]
2324   125C 38 00 00      mov c, 0
2325   125F 74            mov d, b
2326   1260 2A            mov b, [d]
2327   1261 FD AB         swp b
2328   1263 D8            push b
2329   1264 07 79 06      call strlen
2330   1267 51 02 00      add sp, 2
2331   126A             ; --- END FUNCTION CALL
2332   126A E7            pop d
2333   126B FD 43         mov [d], b
2334   126D             ; --- END LOCAL VAR INITIALIZATION
2335   126D             ; strcpy(sp, *(char **)p); 
2336   126D             ; --- START FUNCTION CALL
2337   126D FA FF FF      lea d, [bp + -1] ; $p
2338   1270 2A            mov b, [d]
2339   1271 38 00 00      mov c, 0
2340   1274 74            mov d, b
2341   1275 2A            mov b, [d]
2342   1276 FD AB         swp b
2343   1278 D8            push b
2344   1279 FA FB FF      lea d, [bp + -5] ; $sp
2345   127C 2A            mov b, [d]
2346   127D 38 00 00      mov c, 0
2347   1280 FD AB         swp b
2348   1282 D8            push b
2349   1283 07 93 04      call strcpy
2350   1286 51 04 00      add sp, 4
2351   1289             ; --- END FUNCTION CALL
2352   1289             ; sp = sp + len; 
2353   1289 FA FB FF      lea d, [bp + -5] ; $sp
2354   128C DA            push d
2355   128D FA FB FF      lea d, [bp + -5] ; $sp
2356   1290 2A            mov b, [d]
2357   1291 38 00 00      mov c, 0
2358   1294             ; --- START TERMS
2359   1294 D7            push a
2360   1295 11            mov a, b
2361   1296 FA F9 FF      lea d, [bp + -7] ; $len
2362   1299 2A            mov b, [d]
2363   129A 38 00 00      mov c, 0
2364   129D 56            add b, a
2365   129E E4            pop a
2366   129F             ; --- END TERMS
2367   129F E7            pop d
2368   12A0 FD 43         mov [d], b
2369   12A2             ; p = p + 2; 
2370   12A2 FA FF FF      lea d, [bp + -1] ; $p
2371   12A5 DA            push d
2372   12A6 FA FF FF      lea d, [bp + -1] ; $p
2373   12A9 2A            mov b, [d]
2374   12AA 38 00 00      mov c, 0
2375   12AD             ; --- START TERMS
2376   12AD D7            push a
2377   12AE 11            mov a, b
2378   12AF FD 2E 02 00   mov32 cb, $00000002
2378   12B3 00 00 
2379   12B5 56            add b, a
2380   12B6 E4            pop a
2381   12B7             ; --- END TERMS
2382   12B7 E7            pop d
2383   12B8 FD 43         mov [d], b
2384   12BA             ; break; 
2385   12BA 0A C9 12      jmp _switch27_exit ; case break
2386   12BD             _switch27_default:
2387   12BD             ; print("Error: Unknown argument type.\n"); 
2388   12BD             ; --- START FUNCTION CALL
2389   12BD 26 3C 2E      mov b, _s4 ; "Error: Unknown argument type.\n"
2390   12C0 FD AB         swp b
2391   12C2 D8            push b
2392   12C3 07 6B 1D      call print
2393   12C6 51 02 00      add sp, 2
2394   12C9             ; --- END FUNCTION CALL
2395   12C9             _switch27_exit:
2396   12C9             ; format_p++; 
2397   12C9 FA FD FF      lea d, [bp + -3] ; $format_p
2398   12CC 2A            mov b, [d]
2399   12CD 38 00 00      mov c, 0
2400   12D0 FD 77         inc b
2401   12D2 FA FD FF      lea d, [bp + -3] ; $format_p
2402   12D5 FD 43         mov [d], b
2403   12D7 FD 7D         dec b
2404   12D9 0A 07 13      jmp _if26_exit
2405   12DC             _if26_else:
2406   12DC             ; *sp++ = *format_p++; 
2407   12DC FA FB FF      lea d, [bp + -5] ; $sp
2408   12DF 2A            mov b, [d]
2409   12E0 38 00 00      mov c, 0
2410   12E3 FD 77         inc b
2411   12E5 FA FB FF      lea d, [bp + -5] ; $sp
2412   12E8 FD 43         mov [d], b
2413   12EA FD 7D         dec b
2414   12EC D8            push b
2415   12ED FA FD FF      lea d, [bp + -3] ; $format_p
2416   12F0 2A            mov b, [d]
2417   12F1 38 00 00      mov c, 0
2418   12F4 FD 77         inc b
2419   12F6 FA FD FF      lea d, [bp + -3] ; $format_p
2420   12F9 FD 43         mov [d], b
2421   12FB FD 7D         dec b
2422   12FD 74            mov d, b
2423   12FE 32            mov bl, [d]
2424   12FF A7 00         mov bh, 0
2425   1301 38 00 00      mov c, 0
2426   1304 E7            pop d
2427   1305 FD 3E         mov [d], bl
2428   1307             _if26_exit:
2429   1307             _if25_exit:
2430   1307             _for24_update:
2431   1307 0A BD 0F      jmp _for24_cond
2432   130A             _for24_exit:
2433   130A             ; *sp = '\0'; 
2434   130A FA FB FF      lea d, [bp + -5] ; $sp
2435   130D 2A            mov b, [d]
2436   130E 38 00 00      mov c, 0
2437   1311 D8            push b
2438   1312 FD 2E 00 00   mov32 cb, $00000000
2438   1316 00 00 
2439   1318 E7            pop d
2440   1319 FD 3E         mov [d], bl
2441   131B             ; return sp - dest; // return total number of chars written 
2442   131B FA FB FF      lea d, [bp + -5] ; $sp
2443   131E 2A            mov b, [d]
2444   131F 38 00 00      mov c, 0
2445   1322             ; --- START TERMS
2446   1322 D7            push a
2447   1323 11            mov a, b
2448   1324 FA 05 00      lea d, [bp + 5] ; $dest
2449   1327 2A            mov b, [d]
2450   1328 38 00 00      mov c, 0
2451   132B 60            sub a, b
2452   132C 27            mov b, a
2453   132D E4            pop a
2454   132E             ; --- END TERMS
2455   132E F9            leave
2456   132F 09            ret
2457   1330             
2458   1330             err:
2459   1330 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2460   1333             ; print(e); 
2461   1333             ; --- START FUNCTION CALL
2462   1333 FA 05 00      lea d, [bp + 5] ; $e
2463   1336 2A            mov b, [d]
2464   1337 38 00 00      mov c, 0
2465   133A FD AB         swp b
2466   133C D8            push b
2467   133D 07 6B 1D      call print
2468   1340 51 02 00      add sp, 2
2469   1343             ; --- END FUNCTION CALL
2470   1343 F9            leave
2471   1344 09            ret
2472   1345             
2473   1345             printx32:
2474   1345 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2475   1348             
2476   1348             ; --- BEGIN INLINE ASM SEGMENT
2477   1348 FA 05 00      lea d, [bp + 5] ; $hex
2478   134B 2B 02 00      mov b, [d+2]
2479   134E 07 CE 20      call print_u16x
2480   1351 2A            mov b, [d]
2481   1352 07 CE 20      call print_u16x
2482   1355             ; --- END INLINE ASM SEGMENT
2483   1355             
2484   1355 F9            leave
2485   1356 09            ret
2486   1357             
2487   1357             printx16:
2488   1357 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2489   135A             
2490   135A             ; --- BEGIN INLINE ASM SEGMENT
2491   135A FA 05 00      lea d, [bp + 5] ; $hex
2492   135D 2A            mov b, [d]
2493   135E 07 CE 20      call print_u16x
2494   1361             ; --- END INLINE ASM SEGMENT
2495   1361             
2496   1361 F9            leave
2497   1362 09            ret
2498   1363             
2499   1363             printx8:
2500   1363 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2501   1366             
2502   1366             ; --- BEGIN INLINE ASM SEGMENT
2503   1366 FA 05 00      lea d, [bp + 5] ; $hex
2504   1369 32            mov bl, [d]
2505   136A 07 12 21      call print_u8x
2506   136D             ; --- END INLINE ASM SEGMENT
2507   136D             
2508   136D F9            leave
2509   136E 09            ret
2510   136F             
2511   136F             hex_str_to_int:
2512   136F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2513   1372             ; int value = 0; 
2514   1372 52 02 00      sub sp, 2
2515   1375             ; --- START LOCAL VAR INITIALIZATION
2516   1375 FA FF FF      lea d, [bp + -1] ; $value
2517   1378 DA            push d
2518   1379 FD 2E 00 00   mov32 cb, $00000000
2518   137D 00 00 
2519   137F E7            pop d
2520   1380 FD 43         mov [d], b
2521   1382             ; --- END LOCAL VAR INITIALIZATION
2522   1382             ; int i; 
2523   1382 52 02 00      sub sp, 2
2524   1385             ; char hex_char; 
2525   1385 52 01 00      sub sp, 1
2526   1388             ; int len; 
2527   1388 52 02 00      sub sp, 2
2528   138B             ; len = strlen(hex_string); 
2529   138B FA FA FF      lea d, [bp + -6] ; $len
2530   138E DA            push d
2531   138F             ; --- START FUNCTION CALL
2532   138F FA 05 00      lea d, [bp + 5] ; $hex_string
2533   1392 2A            mov b, [d]
2534   1393 38 00 00      mov c, 0
2535   1396 FD AB         swp b
2536   1398 D8            push b
2537   1399 07 79 06      call strlen
2538   139C 51 02 00      add sp, 2
2539   139F             ; --- END FUNCTION CALL
2540   139F E7            pop d
2541   13A0 FD 43         mov [d], b
2542   13A2             ; for (i = 0; i < len; i++) { 
2543   13A2             _for31_init:
2544   13A2 FA FD FF      lea d, [bp + -3] ; $i
2545   13A5 DA            push d
2546   13A6 FD 2E 00 00   mov32 cb, $00000000
2546   13AA 00 00 
2547   13AC E7            pop d
2548   13AD FD 43         mov [d], b
2549   13AF             _for31_cond:
2550   13AF FA FD FF      lea d, [bp + -3] ; $i
2551   13B2 2A            mov b, [d]
2552   13B3 38 00 00      mov c, 0
2553   13B6             ; --- START RELATIONAL
2554   13B6 D7            push a
2555   13B7 11            mov a, b
2556   13B8 FA FA FF      lea d, [bp + -6] ; $len
2557   13BB 2A            mov b, [d]
2558   13BC 38 00 00      mov c, 0
2559   13BF B0            cmp a, b
2560   13C0 FD 73         slt ; < (signed)
2561   13C2 E4            pop a
2562   13C3             ; --- END RELATIONAL
2563   13C3 C0 00 00      cmp b, 0
2564   13C6 C6 13 15      je _for31_exit
2565   13C9             _for31_block:
2566   13C9             ; hex_char = hex_string[i]; 
2567   13C9 FA FC FF      lea d, [bp + -4] ; $hex_char
2568   13CC DA            push d
2569   13CD FA 05 00      lea d, [bp + 5] ; $hex_string
2570   13D0 FD 2A         mov d, [d]
2571   13D2 D7            push a
2572   13D3 DA            push d
2573   13D4 FA FD FF      lea d, [bp + -3] ; $i
2574   13D7 2A            mov b, [d]
2575   13D8 38 00 00      mov c, 0
2576   13DB E7            pop d
2577   13DC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2578   13E0 E4            pop a
2579   13E1 32            mov bl, [d]
2580   13E2 A7 00         mov bh, 0
2581   13E4 38 00 00      mov c, 0
2582   13E7 E7            pop d
2583   13E8 FD 3E         mov [d], bl
2584   13EA             ; if (hex_char >= 'a' && hex_char <= 'f')  
2585   13EA             _if32_cond:
2586   13EA FA FC FF      lea d, [bp + -4] ; $hex_char
2587   13ED 32            mov bl, [d]
2588   13EE A7 00         mov bh, 0
2589   13F0 38 00 00      mov c, 0
2590   13F3             ; --- START RELATIONAL
2591   13F3 D7            push a
2592   13F4 11            mov a, b
2593   13F5 FD 2E 61 00   mov32 cb, $00000061
2593   13F9 00 00 
2594   13FB B0            cmp a, b
2595   13FC FD 80         sge ; >=
2596   13FE E4            pop a
2597   13FF             ; --- END RELATIONAL
2598   13FF             ; --- START LOGICAL AND
2599   13FF D7            push a
2600   1400 11            mov a, b
2601   1401 FA FC FF      lea d, [bp + -4] ; $hex_char
2602   1404 32            mov bl, [d]
2603   1405 A7 00         mov bh, 0
2604   1407 38 00 00      mov c, 0
2605   140A             ; --- START RELATIONAL
2606   140A D7            push a
2607   140B 11            mov a, b
2608   140C FD 2E 66 00   mov32 cb, $00000066
2608   1410 00 00 
2609   1412 B0            cmp a, b
2610   1413 FD 74         sle ; <= (signed)
2611   1415 E4            pop a
2612   1416             ; --- END RELATIONAL
2613   1416 FD A7         sand a, b
2614   1418 E4            pop a
2615   1419             ; --- END LOGICAL AND
2616   1419 C0 00 00      cmp b, 0
2617   141C C6 5C 14      je _if32_else
2618   141F             _if32_TRUE:
2619   141F             ; value = (value * 16) + (hex_char - 'a' + 10); 
2620   141F FA FF FF      lea d, [bp + -1] ; $value
2621   1422 DA            push d
2622   1423 FA FF FF      lea d, [bp + -1] ; $value
2623   1426 2A            mov b, [d]
2624   1427 38 00 00      mov c, 0
2625   142A             ; --- START FACTORS
2626   142A D7            push a
2627   142B 11            mov a, b
2628   142C FD 2E 10 00   mov32 cb, $00000010
2628   1430 00 00 
2629   1432 AC            mul a, b ; *
2630   1433 11            mov a, b
2631   1434 27            mov b, a
2632   1435 E4            pop a
2633   1436             ; --- END FACTORS
2634   1436             ; --- START TERMS
2635   1436 D7            push a
2636   1437 11            mov a, b
2637   1438 FA FC FF      lea d, [bp + -4] ; $hex_char
2638   143B 32            mov bl, [d]
2639   143C A7 00         mov bh, 0
2640   143E 38 00 00      mov c, 0
2641   1441             ; --- START TERMS
2642   1441 D7            push a
2643   1442 11            mov a, b
2644   1443 FD 2E 61 00   mov32 cb, $00000061
2644   1447 00 00 
2645   1449 60            sub a, b
2646   144A 27            mov b, a
2647   144B 11            mov a, b
2648   144C FD 2E 0A 00   mov32 cb, $0000000a
2648   1450 00 00 
2649   1452 56            add b, a
2650   1453 E4            pop a
2651   1454             ; --- END TERMS
2652   1454 56            add b, a
2653   1455 E4            pop a
2654   1456             ; --- END TERMS
2655   1456 E7            pop d
2656   1457 FD 43         mov [d], b
2657   1459 0A 00 15      jmp _if32_exit
2658   145C             _if32_else:
2659   145C             ; if (hex_char >= 'A' && hex_char <= 'F')  
2660   145C             _if33_cond:
2661   145C FA FC FF      lea d, [bp + -4] ; $hex_char
2662   145F 32            mov bl, [d]
2663   1460 A7 00         mov bh, 0
2664   1462 38 00 00      mov c, 0
2665   1465             ; --- START RELATIONAL
2666   1465 D7            push a
2667   1466 11            mov a, b
2668   1467 FD 2E 41 00   mov32 cb, $00000041
2668   146B 00 00 
2669   146D B0            cmp a, b
2670   146E FD 80         sge ; >=
2671   1470 E4            pop a
2672   1471             ; --- END RELATIONAL
2673   1471             ; --- START LOGICAL AND
2674   1471 D7            push a
2675   1472 11            mov a, b
2676   1473 FA FC FF      lea d, [bp + -4] ; $hex_char
2677   1476 32            mov bl, [d]
2678   1477 A7 00         mov bh, 0
2679   1479 38 00 00      mov c, 0
2680   147C             ; --- START RELATIONAL
2681   147C D7            push a
2682   147D 11            mov a, b
2683   147E FD 2E 46 00   mov32 cb, $00000046
2683   1482 00 00 
2684   1484 B0            cmp a, b
2685   1485 FD 74         sle ; <= (signed)
2686   1487 E4            pop a
2687   1488             ; --- END RELATIONAL
2688   1488 FD A7         sand a, b
2689   148A E4            pop a
2690   148B             ; --- END LOGICAL AND
2691   148B C0 00 00      cmp b, 0
2692   148E C6 CE 14      je _if33_else
2693   1491             _if33_TRUE:
2694   1491             ; value = (value * 16) + (hex_char - 'A' + 10); 
2695   1491 FA FF FF      lea d, [bp + -1] ; $value
2696   1494 DA            push d
2697   1495 FA FF FF      lea d, [bp + -1] ; $value
2698   1498 2A            mov b, [d]
2699   1499 38 00 00      mov c, 0
2700   149C             ; --- START FACTORS
2701   149C D7            push a
2702   149D 11            mov a, b
2703   149E FD 2E 10 00   mov32 cb, $00000010
2703   14A2 00 00 
2704   14A4 AC            mul a, b ; *
2705   14A5 11            mov a, b
2706   14A6 27            mov b, a
2707   14A7 E4            pop a
2708   14A8             ; --- END FACTORS
2709   14A8             ; --- START TERMS
2710   14A8 D7            push a
2711   14A9 11            mov a, b
2712   14AA FA FC FF      lea d, [bp + -4] ; $hex_char
2713   14AD 32            mov bl, [d]
2714   14AE A7 00         mov bh, 0
2715   14B0 38 00 00      mov c, 0
2716   14B3             ; --- START TERMS
2717   14B3 D7            push a
2718   14B4 11            mov a, b
2719   14B5 FD 2E 41 00   mov32 cb, $00000041
2719   14B9 00 00 
2720   14BB 60            sub a, b
2721   14BC 27            mov b, a
2722   14BD 11            mov a, b
2723   14BE FD 2E 0A 00   mov32 cb, $0000000a
2723   14C2 00 00 
2724   14C4 56            add b, a
2725   14C5 E4            pop a
2726   14C6             ; --- END TERMS
2727   14C6 56            add b, a
2728   14C7 E4            pop a
2729   14C8             ; --- END TERMS
2730   14C8 E7            pop d
2731   14C9 FD 43         mov [d], b
2732   14CB 0A 00 15      jmp _if33_exit
2733   14CE             _if33_else:
2734   14CE             ; value = (value * 16) + (hex_char - '0'); 
2735   14CE FA FF FF      lea d, [bp + -1] ; $value
2736   14D1 DA            push d
2737   14D2 FA FF FF      lea d, [bp + -1] ; $value
2738   14D5 2A            mov b, [d]
2739   14D6 38 00 00      mov c, 0
2740   14D9             ; --- START FACTORS
2741   14D9 D7            push a
2742   14DA 11            mov a, b
2743   14DB FD 2E 10 00   mov32 cb, $00000010
2743   14DF 00 00 
2744   14E1 AC            mul a, b ; *
2745   14E2 11            mov a, b
2746   14E3 27            mov b, a
2747   14E4 E4            pop a
2748   14E5             ; --- END FACTORS
2749   14E5             ; --- START TERMS
2750   14E5 D7            push a
2751   14E6 11            mov a, b
2752   14E7 FA FC FF      lea d, [bp + -4] ; $hex_char
2753   14EA 32            mov bl, [d]
2754   14EB A7 00         mov bh, 0
2755   14ED 38 00 00      mov c, 0
2756   14F0             ; --- START TERMS
2757   14F0 D7            push a
2758   14F1 11            mov a, b
2759   14F2 FD 2E 30 00   mov32 cb, $00000030
2759   14F6 00 00 
2760   14F8 60            sub a, b
2761   14F9 27            mov b, a
2762   14FA E4            pop a
2763   14FB             ; --- END TERMS
2764   14FB 56            add b, a
2765   14FC E4            pop a
2766   14FD             ; --- END TERMS
2767   14FD E7            pop d
2768   14FE FD 43         mov [d], b
2769   1500             _if33_exit:
2770   1500             _if32_exit:
2771   1500             _for31_update:
2772   1500 FA FD FF      lea d, [bp + -3] ; $i
2773   1503 2A            mov b, [d]
2774   1504 38 00 00      mov c, 0
2775   1507 11            mov a, b
2776   1508 FD 77         inc b
2777   150A FA FD FF      lea d, [bp + -3] ; $i
2778   150D FD 43         mov [d], b
2779   150F 27            mov b, a
2780   1510 0A AF 13      jmp _for31_cond
2781   1513             _for31_exit:
2782   1513             ; return value; 
2783   1513 FA FF FF      lea d, [bp + -1] ; $value
2784   1516 2A            mov b, [d]
2785   1517 38 00 00      mov c, 0
2786   151A F9            leave
2787   151B 09            ret
2788   151C             
2789   151C             gets:
2790   151C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2791   151F             
2792   151F             ; --- BEGIN INLINE ASM SEGMENT
2793   151F FA 05 00      lea d, [bp + 5] ; $s
2794   1522 15            mov a, [d]
2795   1523 3C            mov d, a
2796   1524 07 33 1F      call _gets
2797   1527             ; --- END INLINE ASM SEGMENT
2798   1527             
2799   1527             ; return strlen(s); 
2800   1527             ; --- START FUNCTION CALL
2801   1527 FA 05 00      lea d, [bp + 5] ; $s
2802   152A 2A            mov b, [d]
2803   152B 38 00 00      mov c, 0
2804   152E FD AB         swp b
2805   1530 D8            push b
2806   1531 07 79 06      call strlen
2807   1534 51 02 00      add sp, 2
2808   1537             ; --- END FUNCTION CALL
2809   1537 F9            leave
2810   1538 09            ret
2811   1539             
2812   1539             print_signed:
2813   1539 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2814   153C             ; char digits[5]; 
2815   153C 52 05 00      sub sp, 5
2816   153F             ; int i = 0; 
2817   153F 52 02 00      sub sp, 2
2818   1542             ; --- START LOCAL VAR INITIALIZATION
2819   1542 FA FA FF      lea d, [bp + -6] ; $i
2820   1545 DA            push d
2821   1546 FD 2E 00 00   mov32 cb, $00000000
2821   154A 00 00 
2822   154C E7            pop d
2823   154D FD 43         mov [d], b
2824   154F             ; --- END LOCAL VAR INITIALIZATION
2825   154F             ; if (num < 0) { 
2826   154F             _if34_cond:
2827   154F FA 05 00      lea d, [bp + 5] ; $num
2828   1552 2A            mov b, [d]
2829   1553 38 00 00      mov c, 0
2830   1556             ; --- START RELATIONAL
2831   1556 D7            push a
2832   1557 11            mov a, b
2833   1558 FD 2E 00 00   mov32 cb, $00000000
2833   155C 00 00 
2834   155E B0            cmp a, b
2835   155F FD 73         slt ; < (signed)
2836   1561 E4            pop a
2837   1562             ; --- END RELATIONAL
2838   1562 C0 00 00      cmp b, 0
2839   1565 C6 88 15      je _if34_else
2840   1568             _if34_TRUE:
2841   1568             ; putchar('-'); 
2842   1568             ; --- START FUNCTION CALL
2843   1568 FD 2E 2D 00   mov32 cb, $0000002d
2843   156C 00 00 
2844   156E DD            push bl
2845   156F 07 1D 1D      call putchar
2846   1572 51 01 00      add sp, 1
2847   1575             ; --- END FUNCTION CALL
2848   1575             ; num = -num; 
2849   1575 FA 05 00      lea d, [bp + 5] ; $num
2850   1578 DA            push d
2851   1579 FA 05 00      lea d, [bp + 5] ; $num
2852   157C 2A            mov b, [d]
2853   157D 38 00 00      mov c, 0
2854   1580 FD 97         neg b
2855   1582 E7            pop d
2856   1583 FD 43         mov [d], b
2857   1585 0A B3 15      jmp _if34_exit
2858   1588             _if34_else:
2859   1588             ; if (num == 0) { 
2860   1588             _if35_cond:
2861   1588 FA 05 00      lea d, [bp + 5] ; $num
2862   158B 2A            mov b, [d]
2863   158C 38 00 00      mov c, 0
2864   158F             ; --- START RELATIONAL
2865   158F D7            push a
2866   1590 11            mov a, b
2867   1591 FD 2E 00 00   mov32 cb, $00000000
2867   1595 00 00 
2868   1597 B0            cmp a, b
2869   1598 FD 71         seq ; ==
2870   159A E4            pop a
2871   159B             ; --- END RELATIONAL
2872   159B C0 00 00      cmp b, 0
2873   159E C6 B3 15      je _if35_exit
2874   15A1             _if35_TRUE:
2875   15A1             ; putchar('0'); 
2876   15A1             ; --- START FUNCTION CALL
2877   15A1 FD 2E 30 00   mov32 cb, $00000030
2877   15A5 00 00 
2878   15A7 DD            push bl
2879   15A8 07 1D 1D      call putchar
2880   15AB 51 01 00      add sp, 1
2881   15AE             ; --- END FUNCTION CALL
2882   15AE             ; return; 
2883   15AE F9            leave
2884   15AF 09            ret
2885   15B0 0A B3 15      jmp _if35_exit
2886   15B3             _if35_exit:
2887   15B3             _if34_exit:
2888   15B3             ; while (num > 0) { 
2889   15B3             _while36_cond:
2890   15B3 FA 05 00      lea d, [bp + 5] ; $num
2891   15B6 2A            mov b, [d]
2892   15B7 38 00 00      mov c, 0
2893   15BA             ; --- START RELATIONAL
2894   15BA D7            push a
2895   15BB 11            mov a, b
2896   15BC FD 2E 00 00   mov32 cb, $00000000
2896   15C0 00 00 
2897   15C2 B0            cmp a, b
2898   15C3 FD 7F         sgt ; >
2899   15C5 E4            pop a
2900   15C6             ; --- END RELATIONAL
2901   15C6 C0 00 00      cmp b, 0
2902   15C9 C6 28 16      je _while36_exit
2903   15CC             _while36_block:
2904   15CC             ; digits[i] = '0' + (num % 10); 
2905   15CC FA FC FF      lea d, [bp + -4] ; $digits
2906   15CF D7            push a
2907   15D0 DA            push d
2908   15D1 FA FA FF      lea d, [bp + -6] ; $i
2909   15D4 2A            mov b, [d]
2910   15D5 38 00 00      mov c, 0
2911   15D8 E7            pop d
2912   15D9 5A            add d, b
2913   15DA E4            pop a
2914   15DB DA            push d
2915   15DC FD 2E 30 00   mov32 cb, $00000030
2915   15E0 00 00 
2916   15E2             ; --- START TERMS
2917   15E2 D7            push a
2918   15E3 11            mov a, b
2919   15E4 FA 05 00      lea d, [bp + 5] ; $num
2920   15E7 2A            mov b, [d]
2921   15E8 38 00 00      mov c, 0
2922   15EB             ; --- START FACTORS
2923   15EB D7            push a
2924   15EC 11            mov a, b
2925   15ED FD 2E 0A 00   mov32 cb, $0000000a
2925   15F1 00 00 
2926   15F3 AE            div a, b ; 
2927   15F4 11            mov a, b
2928   15F5 27            mov b, a
2929   15F6 E4            pop a
2930   15F7             ; --- END FACTORS
2931   15F7 56            add b, a
2932   15F8 E4            pop a
2933   15F9             ; --- END TERMS
2934   15F9 E7            pop d
2935   15FA FD 3E         mov [d], bl
2936   15FC             ; num = num / 10; 
2937   15FC FA 05 00      lea d, [bp + 5] ; $num
2938   15FF DA            push d
2939   1600 FA 05 00      lea d, [bp + 5] ; $num
2940   1603 2A            mov b, [d]
2941   1604 38 00 00      mov c, 0
2942   1607             ; --- START FACTORS
2943   1607 D7            push a
2944   1608 11            mov a, b
2945   1609 FD 2E 0A 00   mov32 cb, $0000000a
2945   160D 00 00 
2946   160F AE            div a, b
2947   1610 27            mov b, a
2948   1611 E4            pop a
2949   1612             ; --- END FACTORS
2950   1612 E7            pop d
2951   1613 FD 43         mov [d], b
2952   1615             ; i++; 
2953   1615 FA FA FF      lea d, [bp + -6] ; $i
2954   1618 2A            mov b, [d]
2955   1619 38 00 00      mov c, 0
2956   161C 11            mov a, b
2957   161D FD 77         inc b
2958   161F FA FA FF      lea d, [bp + -6] ; $i
2959   1622 FD 43         mov [d], b
2960   1624 27            mov b, a
2961   1625 0A B3 15      jmp _while36_cond
2962   1628             _while36_exit:
2963   1628             ; while (i > 0) { 
2964   1628             _while37_cond:
2965   1628 FA FA FF      lea d, [bp + -6] ; $i
2966   162B 2A            mov b, [d]
2967   162C 38 00 00      mov c, 0
2968   162F             ; --- START RELATIONAL
2969   162F D7            push a
2970   1630 11            mov a, b
2971   1631 FD 2E 00 00   mov32 cb, $00000000
2971   1635 00 00 
2972   1637 B0            cmp a, b
2973   1638 FD 7F         sgt ; >
2974   163A E4            pop a
2975   163B             ; --- END RELATIONAL
2976   163B C0 00 00      cmp b, 0
2977   163E C6 70 16      je _while37_exit
2978   1641             _while37_block:
2979   1641             ; i--; 
2980   1641 FA FA FF      lea d, [bp + -6] ; $i
2981   1644 2A            mov b, [d]
2982   1645 38 00 00      mov c, 0
2983   1648 11            mov a, b
2984   1649 FD 7D         dec b
2985   164B FA FA FF      lea d, [bp + -6] ; $i
2986   164E FD 43         mov [d], b
2987   1650 27            mov b, a
2988   1651             ; putchar(digits[i]); 
2989   1651             ; --- START FUNCTION CALL
2990   1651 FA FC FF      lea d, [bp + -4] ; $digits
2991   1654 D7            push a
2992   1655 DA            push d
2993   1656 FA FA FF      lea d, [bp + -6] ; $i
2994   1659 2A            mov b, [d]
2995   165A 38 00 00      mov c, 0
2996   165D E7            pop d
2997   165E 5A            add d, b
2998   165F E4            pop a
2999   1660 32            mov bl, [d]
3000   1661 A7 00         mov bh, 0
3001   1663 38 00 00      mov c, 0
3002   1666 DD            push bl
3003   1667 07 1D 1D      call putchar
3004   166A 51 01 00      add sp, 1
3005   166D             ; --- END FUNCTION CALL
3006   166D 0A 28 16      jmp _while37_cond
3007   1670             _while37_exit:
3008   1670 F9            leave
3009   1671 09            ret
3010   1672             
3011   1672             print_signed_long:
3012   1672 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3013   1675             ; char digits[10]; 
3014   1675 52 0A 00      sub sp, 10
3015   1678             ; int i = 0; 
3016   1678 52 02 00      sub sp, 2
3017   167B             ; --- START LOCAL VAR INITIALIZATION
3018   167B FA F5 FF      lea d, [bp + -11] ; $i
3019   167E DA            push d
3020   167F FD 2E 00 00   mov32 cb, $00000000
3020   1683 00 00 
3021   1685 E7            pop d
3022   1686 FD 43         mov [d], b
3023   1688             ; --- END LOCAL VAR INITIALIZATION
3024   1688             ; if (num < 0) { 
3025   1688             _if38_cond:
3026   1688 FA 05 00      lea d, [bp + 5] ; $num
3027   168B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3028   168E FD 39         mov c, b ; And place it into C
3029   1690 2A            mov b, [d] ; Lower Word in B
3030   1691             ; --- START RELATIONAL
3031   1691 D7            push a
3032   1692 FD D8         push g
3033   1694 11            mov a, b
3034   1695 FD 7A         mov g, c
3035   1697 FD 2E 00 00   mov32 cb, $00000000
3035   169B 00 00 
3036   169D FD AF         cmp32 ga, cb
3037   169F FD 73         slt ; <
3038   16A1 FD F1         pop g
3039   16A3 E4            pop a
3040   16A4             ; --- END RELATIONAL
3041   16A4 C0 00 00      cmp b, 0
3042   16A7 C6 DB 16      je _if38_else
3043   16AA             _if38_TRUE:
3044   16AA             ; putchar('-'); 
3045   16AA             ; --- START FUNCTION CALL
3046   16AA FD 2E 2D 00   mov32 cb, $0000002d
3046   16AE 00 00 
3047   16B0 DD            push bl
3048   16B1 07 1D 1D      call putchar
3049   16B4 51 01 00      add sp, 1
3050   16B7             ; --- END FUNCTION CALL
3051   16B7             ; num = -num; 
3052   16B7 FA 05 00      lea d, [bp + 5] ; $num
3053   16BA DA            push d
3054   16BB FA 05 00      lea d, [bp + 5] ; $num
3055   16BE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3056   16C1 FD 39         mov c, b ; And place it into C
3057   16C3 2A            mov b, [d] ; Lower Word in B
3058   16C4 12            mov a, c
3059   16C5 95            not a
3060   16C6 97            not b
3061   16C7 55 01 00      add b, 1
3062   16CA 5B 00 00      adc a, 0
3063   16CD 39            mov c, a
3064   16CE E7            pop d
3065   16CF FD 43         mov [d], b
3066   16D1 26 00 00      mov b, 0
3067   16D4 FD 44 02 00   mov [d + 2], b
3068   16D8 0A 0F 17      jmp _if38_exit
3069   16DB             _if38_else:
3070   16DB             ; if (num == 0) { 
3071   16DB             _if39_cond:
3072   16DB FA 05 00      lea d, [bp + 5] ; $num
3073   16DE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3074   16E1 FD 39         mov c, b ; And place it into C
3075   16E3 2A            mov b, [d] ; Lower Word in B
3076   16E4             ; --- START RELATIONAL
3077   16E4 D7            push a
3078   16E5 FD D8         push g
3079   16E7 11            mov a, b
3080   16E8 FD 7A         mov g, c
3081   16EA FD 2E 00 00   mov32 cb, $00000000
3081   16EE 00 00 
3082   16F0 FD AF         cmp32 ga, cb
3083   16F2 FD 71         seq ; ==
3084   16F4 FD F1         pop g
3085   16F6 E4            pop a
3086   16F7             ; --- END RELATIONAL
3087   16F7 C0 00 00      cmp b, 0
3088   16FA C6 0F 17      je _if39_exit
3089   16FD             _if39_TRUE:
3090   16FD             ; putchar('0'); 
3091   16FD             ; --- START FUNCTION CALL
3092   16FD FD 2E 30 00   mov32 cb, $00000030
3092   1701 00 00 
3093   1703 DD            push bl
3094   1704 07 1D 1D      call putchar
3095   1707 51 01 00      add sp, 1
3096   170A             ; --- END FUNCTION CALL
3097   170A             ; return; 
3098   170A F9            leave
3099   170B 09            ret
3100   170C 0A 0F 17      jmp _if39_exit
3101   170F             _if39_exit:
3102   170F             _if38_exit:
3103   170F             ; while (num > 0) { 
3104   170F             _while40_cond:
3105   170F FA 05 00      lea d, [bp + 5] ; $num
3106   1712 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3107   1715 FD 39         mov c, b ; And place it into C
3108   1717 2A            mov b, [d] ; Lower Word in B
3109   1718             ; --- START RELATIONAL
3110   1718 D7            push a
3111   1719 FD D8         push g
3112   171B 11            mov a, b
3113   171C FD 7A         mov g, c
3114   171E FD 2E 00 00   mov32 cb, $00000000
3114   1722 00 00 
3115   1724 FD AF         cmp32 ga, cb
3116   1726 FD 7F         sgt
3117   1728 FD F1         pop g
3118   172A E4            pop a
3119   172B             ; --- END RELATIONAL
3120   172B C0 00 00      cmp b, 0
3121   172E C6 97 17      je _while40_exit
3122   1731             _while40_block:
3123   1731             ; digits[i] = '0' + (num % 10); 
3124   1731 FA F7 FF      lea d, [bp + -9] ; $digits
3125   1734 D7            push a
3126   1735 DA            push d
3127   1736 FA F5 FF      lea d, [bp + -11] ; $i
3128   1739 2A            mov b, [d]
3129   173A 38 00 00      mov c, 0
3130   173D E7            pop d
3131   173E 5A            add d, b
3132   173F E4            pop a
3133   1740 DA            push d
3134   1741 FD 2E 30 00   mov32 cb, $00000030
3134   1745 00 00 
3135   1747             ; --- START TERMS
3136   1747 D7            push a
3137   1748 11            mov a, b
3138   1749 FA 05 00      lea d, [bp + 5] ; $num
3139   174C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3140   174F FD 39         mov c, b ; And place it into C
3141   1751 2A            mov b, [d] ; Lower Word in B
3142   1752             ; --- START FACTORS
3143   1752 D7            push a
3144   1753 11            mov a, b
3145   1754 FD 2E 0A 00   mov32 cb, $0000000a
3145   1758 00 00 
3146   175A AE            div a, b ; 
3147   175B 11            mov a, b
3148   175C 27            mov b, a
3149   175D E4            pop a
3150   175E             ; --- END FACTORS
3151   175E FD 15         add32 cb, ga
3152   1760 E4            pop a
3153   1761             ; --- END TERMS
3154   1761 E7            pop d
3155   1762 FD 3E         mov [d], bl
3156   1764             ; num = num / 10; 
3157   1764 FA 05 00      lea d, [bp + 5] ; $num
3158   1767 DA            push d
3159   1768 FA 05 00      lea d, [bp + 5] ; $num
3160   176B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3161   176E FD 39         mov c, b ; And place it into C
3162   1770 2A            mov b, [d] ; Lower Word in B
3163   1771             ; --- START FACTORS
3164   1771 D7            push a
3165   1772 11            mov a, b
3166   1773 FD 2E 0A 00   mov32 cb, $0000000a
3166   1777 00 00 
3167   1779 AE            div a, b
3168   177A 27            mov b, a
3169   177B E4            pop a
3170   177C             ; --- END FACTORS
3171   177C E7            pop d
3172   177D FD 43         mov [d], b
3173   177F 28            mov b, c
3174   1780 FD 44 02 00   mov [d + 2], b
3175   1784             ; i++; 
3176   1784 FA F5 FF      lea d, [bp + -11] ; $i
3177   1787 2A            mov b, [d]
3178   1788 38 00 00      mov c, 0
3179   178B 11            mov a, b
3180   178C FD 77         inc b
3181   178E FA F5 FF      lea d, [bp + -11] ; $i
3182   1791 FD 43         mov [d], b
3183   1793 27            mov b, a
3184   1794 0A 0F 17      jmp _while40_cond
3185   1797             _while40_exit:
3186   1797             ; while (i > 0) { 
3187   1797             _while41_cond:
3188   1797 FA F5 FF      lea d, [bp + -11] ; $i
3189   179A 2A            mov b, [d]
3190   179B 38 00 00      mov c, 0
3191   179E             ; --- START RELATIONAL
3192   179E D7            push a
3193   179F 11            mov a, b
3194   17A0 FD 2E 00 00   mov32 cb, $00000000
3194   17A4 00 00 
3195   17A6 B0            cmp a, b
3196   17A7 FD 7F         sgt ; >
3197   17A9 E4            pop a
3198   17AA             ; --- END RELATIONAL
3199   17AA C0 00 00      cmp b, 0
3200   17AD C6 DF 17      je _while41_exit
3201   17B0             _while41_block:
3202   17B0             ; i--; 
3203   17B0 FA F5 FF      lea d, [bp + -11] ; $i
3204   17B3 2A            mov b, [d]
3205   17B4 38 00 00      mov c, 0
3206   17B7 11            mov a, b
3207   17B8 FD 7D         dec b
3208   17BA FA F5 FF      lea d, [bp + -11] ; $i
3209   17BD FD 43         mov [d], b
3210   17BF 27            mov b, a
3211   17C0             ; putchar(digits[i]); 
3212   17C0             ; --- START FUNCTION CALL
3213   17C0 FA F7 FF      lea d, [bp + -9] ; $digits
3214   17C3 D7            push a
3215   17C4 DA            push d
3216   17C5 FA F5 FF      lea d, [bp + -11] ; $i
3217   17C8 2A            mov b, [d]
3218   17C9 38 00 00      mov c, 0
3219   17CC E7            pop d
3220   17CD 5A            add d, b
3221   17CE E4            pop a
3222   17CF 32            mov bl, [d]
3223   17D0 A7 00         mov bh, 0
3224   17D2 38 00 00      mov c, 0
3225   17D5 DD            push bl
3226   17D6 07 1D 1D      call putchar
3227   17D9 51 01 00      add sp, 1
3228   17DC             ; --- END FUNCTION CALL
3229   17DC 0A 97 17      jmp _while41_cond
3230   17DF             _while41_exit:
3231   17DF F9            leave
3232   17E0 09            ret
3233   17E1             
3234   17E1             print_unsigned_long:
3235   17E1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3236   17E4             ; char digits[10]; 
3237   17E4 52 0A 00      sub sp, 10
3238   17E7             ; int i; 
3239   17E7 52 02 00      sub sp, 2
3240   17EA             ; i = 0; 
3241   17EA FA F5 FF      lea d, [bp + -11] ; $i
3242   17ED DA            push d
3243   17EE FD 2E 00 00   mov32 cb, $00000000
3243   17F2 00 00 
3244   17F4 E7            pop d
3245   17F5 FD 43         mov [d], b
3246   17F7             ; if(num == 0){ 
3247   17F7             _if42_cond:
3248   17F7 FA 05 00      lea d, [bp + 5] ; $num
3249   17FA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3250   17FD FD 39         mov c, b ; And place it into C
3251   17FF 2A            mov b, [d] ; Lower Word in B
3252   1800             ; --- START RELATIONAL
3253   1800 D7            push a
3254   1801 FD D8         push g
3255   1803 11            mov a, b
3256   1804 FD 7A         mov g, c
3257   1806 FD 2E 00 00   mov32 cb, $00000000
3257   180A 00 00 
3258   180C FD AF         cmp32 ga, cb
3259   180E FD 71         seq ; ==
3260   1810 FD F1         pop g
3261   1812 E4            pop a
3262   1813             ; --- END RELATIONAL
3263   1813 C0 00 00      cmp b, 0
3264   1816 C6 2B 18      je _if42_exit
3265   1819             _if42_TRUE:
3266   1819             ; putchar('0'); 
3267   1819             ; --- START FUNCTION CALL
3268   1819 FD 2E 30 00   mov32 cb, $00000030
3268   181D 00 00 
3269   181F DD            push bl
3270   1820 07 1D 1D      call putchar
3271   1823 51 01 00      add sp, 1
3272   1826             ; --- END FUNCTION CALL
3273   1826             ; return; 
3274   1826 F9            leave
3275   1827 09            ret
3276   1828 0A 2B 18      jmp _if42_exit
3277   182B             _if42_exit:
3278   182B             ; while (num > 0) { 
3279   182B             _while43_cond:
3280   182B FA 05 00      lea d, [bp + 5] ; $num
3281   182E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3282   1831 FD 39         mov c, b ; And place it into C
3283   1833 2A            mov b, [d] ; Lower Word in B
3284   1834             ; --- START RELATIONAL
3285   1834 D7            push a
3286   1835 FD D8         push g
3287   1837 11            mov a, b
3288   1838 FD 7A         mov g, c
3289   183A FD 2E 00 00   mov32 cb, $00000000
3289   183E 00 00 
3290   1840 FD AF         cmp32 ga, cb
3291   1842 FD 81         sgu
3292   1844 FD F1         pop g
3293   1846 E4            pop a
3294   1847             ; --- END RELATIONAL
3295   1847 C0 00 00      cmp b, 0
3296   184A C6 B3 18      je _while43_exit
3297   184D             _while43_block:
3298   184D             ; digits[i] = '0' + (num % 10); 
3299   184D FA F7 FF      lea d, [bp + -9] ; $digits
3300   1850 D7            push a
3301   1851 DA            push d
3302   1852 FA F5 FF      lea d, [bp + -11] ; $i
3303   1855 2A            mov b, [d]
3304   1856 38 00 00      mov c, 0
3305   1859 E7            pop d
3306   185A 5A            add d, b
3307   185B E4            pop a
3308   185C DA            push d
3309   185D FD 2E 30 00   mov32 cb, $00000030
3309   1861 00 00 
3310   1863             ; --- START TERMS
3311   1863 D7            push a
3312   1864 11            mov a, b
3313   1865 FA 05 00      lea d, [bp + 5] ; $num
3314   1868 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3315   186B FD 39         mov c, b ; And place it into C
3316   186D 2A            mov b, [d] ; Lower Word in B
3317   186E             ; --- START FACTORS
3318   186E D7            push a
3319   186F 11            mov a, b
3320   1870 FD 2E 0A 00   mov32 cb, $0000000a
3320   1874 00 00 
3321   1876 AE            div a, b ; 
3322   1877 11            mov a, b
3323   1878 27            mov b, a
3324   1879 E4            pop a
3325   187A             ; --- END FACTORS
3326   187A FD 15         add32 cb, ga
3327   187C E4            pop a
3328   187D             ; --- END TERMS
3329   187D E7            pop d
3330   187E FD 3E         mov [d], bl
3331   1880             ; num = num / 10; 
3332   1880 FA 05 00      lea d, [bp + 5] ; $num
3333   1883 DA            push d
3334   1884 FA 05 00      lea d, [bp + 5] ; $num
3335   1887 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3336   188A FD 39         mov c, b ; And place it into C
3337   188C 2A            mov b, [d] ; Lower Word in B
3338   188D             ; --- START FACTORS
3339   188D D7            push a
3340   188E 11            mov a, b
3341   188F FD 2E 0A 00   mov32 cb, $0000000a
3341   1893 00 00 
3342   1895 AE            div a, b
3343   1896 27            mov b, a
3344   1897 E4            pop a
3345   1898             ; --- END FACTORS
3346   1898 E7            pop d
3347   1899 FD 43         mov [d], b
3348   189B 28            mov b, c
3349   189C FD 44 02 00   mov [d + 2], b
3350   18A0             ; i++; 
3351   18A0 FA F5 FF      lea d, [bp + -11] ; $i
3352   18A3 2A            mov b, [d]
3353   18A4 38 00 00      mov c, 0
3354   18A7 11            mov a, b
3355   18A8 FD 77         inc b
3356   18AA FA F5 FF      lea d, [bp + -11] ; $i
3357   18AD FD 43         mov [d], b
3358   18AF 27            mov b, a
3359   18B0 0A 2B 18      jmp _while43_cond
3360   18B3             _while43_exit:
3361   18B3             ; while (i > 0) { 
3362   18B3             _while44_cond:
3363   18B3 FA F5 FF      lea d, [bp + -11] ; $i
3364   18B6 2A            mov b, [d]
3365   18B7 38 00 00      mov c, 0
3366   18BA             ; --- START RELATIONAL
3367   18BA D7            push a
3368   18BB 11            mov a, b
3369   18BC FD 2E 00 00   mov32 cb, $00000000
3369   18C0 00 00 
3370   18C2 B0            cmp a, b
3371   18C3 FD 7F         sgt ; >
3372   18C5 E4            pop a
3373   18C6             ; --- END RELATIONAL
3374   18C6 C0 00 00      cmp b, 0
3375   18C9 C6 FB 18      je _while44_exit
3376   18CC             _while44_block:
3377   18CC             ; i--; 
3378   18CC FA F5 FF      lea d, [bp + -11] ; $i
3379   18CF 2A            mov b, [d]
3380   18D0 38 00 00      mov c, 0
3381   18D3 11            mov a, b
3382   18D4 FD 7D         dec b
3383   18D6 FA F5 FF      lea d, [bp + -11] ; $i
3384   18D9 FD 43         mov [d], b
3385   18DB 27            mov b, a
3386   18DC             ; putchar(digits[i]); 
3387   18DC             ; --- START FUNCTION CALL
3388   18DC FA F7 FF      lea d, [bp + -9] ; $digits
3389   18DF D7            push a
3390   18E0 DA            push d
3391   18E1 FA F5 FF      lea d, [bp + -11] ; $i
3392   18E4 2A            mov b, [d]
3393   18E5 38 00 00      mov c, 0
3394   18E8 E7            pop d
3395   18E9 5A            add d, b
3396   18EA E4            pop a
3397   18EB 32            mov bl, [d]
3398   18EC A7 00         mov bh, 0
3399   18EE 38 00 00      mov c, 0
3400   18F1 DD            push bl
3401   18F2 07 1D 1D      call putchar
3402   18F5 51 01 00      add sp, 1
3403   18F8             ; --- END FUNCTION CALL
3404   18F8 0A B3 18      jmp _while44_cond
3405   18FB             _while44_exit:
3406   18FB F9            leave
3407   18FC 09            ret
3408   18FD             
3409   18FD             sprint_unsigned:
3410   18FD F8 00 00      enter 0 ; (push bp; mov bp, sp)
3411   1900             ; char digits[5]; 
3412   1900 52 05 00      sub sp, 5
3413   1903             ; int i; 
3414   1903 52 02 00      sub sp, 2
3415   1906             ; int len = 0; 
3416   1906 52 02 00      sub sp, 2
3417   1909             ; --- START LOCAL VAR INITIALIZATION
3418   1909 FA F8 FF      lea d, [bp + -8] ; $len
3419   190C DA            push d
3420   190D FD 2E 00 00   mov32 cb, $00000000
3420   1911 00 00 
3421   1913 E7            pop d
3422   1914 FD 43         mov [d], b
3423   1916             ; --- END LOCAL VAR INITIALIZATION
3424   1916             ; i = 0; 
3425   1916 FA FA FF      lea d, [bp + -6] ; $i
3426   1919 DA            push d
3427   191A FD 2E 00 00   mov32 cb, $00000000
3427   191E 00 00 
3428   1920 E7            pop d
3429   1921 FD 43         mov [d], b
3430   1923             ; if(num == 0){ 
3431   1923             _if45_cond:
3432   1923 FA 07 00      lea d, [bp + 7] ; $num
3433   1926 2A            mov b, [d]
3434   1927 38 00 00      mov c, 0
3435   192A             ; --- START RELATIONAL
3436   192A D7            push a
3437   192B 11            mov a, b
3438   192C FD 2E 00 00   mov32 cb, $00000000
3438   1930 00 00 
3439   1932 B0            cmp a, b
3440   1933 FD 71         seq ; ==
3441   1935 E4            pop a
3442   1936             ; --- END RELATIONAL
3443   1936 C0 00 00      cmp b, 0
3444   1939 C6 61 19      je _if45_exit
3445   193C             _if45_TRUE:
3446   193C             ; *dest++ = '0'; 
3447   193C FA 05 00      lea d, [bp + 5] ; $dest
3448   193F 2A            mov b, [d]
3449   1940 38 00 00      mov c, 0
3450   1943 FD 77         inc b
3451   1945 FA 05 00      lea d, [bp + 5] ; $dest
3452   1948 FD 43         mov [d], b
3453   194A FD 7D         dec b
3454   194C D8            push b
3455   194D FD 2E 30 00   mov32 cb, $00000030
3455   1951 00 00 
3456   1953 E7            pop d
3457   1954 FD 3E         mov [d], bl
3458   1956             ; return 1; 
3459   1956 FD 2E 01 00   mov32 cb, $00000001
3459   195A 00 00 
3460   195C F9            leave
3461   195D 09            ret
3462   195E 0A 61 19      jmp _if45_exit
3463   1961             _if45_exit:
3464   1961             ; while (num > 0) { 
3465   1961             _while46_cond:
3466   1961 FA 07 00      lea d, [bp + 7] ; $num
3467   1964 2A            mov b, [d]
3468   1965 38 00 00      mov c, 0
3469   1968             ; --- START RELATIONAL
3470   1968 D7            push a
3471   1969 11            mov a, b
3472   196A FD 2E 00 00   mov32 cb, $00000000
3472   196E 00 00 
3473   1970 B0            cmp a, b
3474   1971 FD 81         sgu ; > (unsigned)
3475   1973 E4            pop a
3476   1974             ; --- END RELATIONAL
3477   1974 C0 00 00      cmp b, 0
3478   1977 C6 D6 19      je _while46_exit
3479   197A             _while46_block:
3480   197A             ; digits[i] = '0' + (num % 10); 
3481   197A FA FC FF      lea d, [bp + -4] ; $digits
3482   197D D7            push a
3483   197E DA            push d
3484   197F FA FA FF      lea d, [bp + -6] ; $i
3485   1982 2A            mov b, [d]
3486   1983 38 00 00      mov c, 0
3487   1986 E7            pop d
3488   1987 5A            add d, b
3489   1988 E4            pop a
3490   1989 DA            push d
3491   198A FD 2E 30 00   mov32 cb, $00000030
3491   198E 00 00 
3492   1990             ; --- START TERMS
3493   1990 D7            push a
3494   1991 11            mov a, b
3495   1992 FA 07 00      lea d, [bp + 7] ; $num
3496   1995 2A            mov b, [d]
3497   1996 38 00 00      mov c, 0
3498   1999             ; --- START FACTORS
3499   1999 D7            push a
3500   199A 11            mov a, b
3501   199B FD 2E 0A 00   mov32 cb, $0000000a
3501   199F 00 00 
3502   19A1 AE            div a, b ; 
3503   19A2 11            mov a, b
3504   19A3 27            mov b, a
3505   19A4 E4            pop a
3506   19A5             ; --- END FACTORS
3507   19A5 56            add b, a
3508   19A6 E4            pop a
3509   19A7             ; --- END TERMS
3510   19A7 E7            pop d
3511   19A8 FD 3E         mov [d], bl
3512   19AA             ; num = num / 10; 
3513   19AA FA 07 00      lea d, [bp + 7] ; $num
3514   19AD DA            push d
3515   19AE FA 07 00      lea d, [bp + 7] ; $num
3516   19B1 2A            mov b, [d]
3517   19B2 38 00 00      mov c, 0
3518   19B5             ; --- START FACTORS
3519   19B5 D7            push a
3520   19B6 11            mov a, b
3521   19B7 FD 2E 0A 00   mov32 cb, $0000000a
3521   19BB 00 00 
3522   19BD AE            div a, b
3523   19BE 27            mov b, a
3524   19BF E4            pop a
3525   19C0             ; --- END FACTORS
3526   19C0 E7            pop d
3527   19C1 FD 43         mov [d], b
3528   19C3             ; i++; 
3529   19C3 FA FA FF      lea d, [bp + -6] ; $i
3530   19C6 2A            mov b, [d]
3531   19C7 38 00 00      mov c, 0
3532   19CA 11            mov a, b
3533   19CB FD 77         inc b
3534   19CD FA FA FF      lea d, [bp + -6] ; $i
3535   19D0 FD 43         mov [d], b
3536   19D2 27            mov b, a
3537   19D3 0A 61 19      jmp _while46_cond
3538   19D6             _while46_exit:
3539   19D6             ; while (i > 0) { 
3540   19D6             _while47_cond:
3541   19D6 FA FA FF      lea d, [bp + -6] ; $i
3542   19D9 2A            mov b, [d]
3543   19DA 38 00 00      mov c, 0
3544   19DD             ; --- START RELATIONAL
3545   19DD D7            push a
3546   19DE 11            mov a, b
3547   19DF FD 2E 00 00   mov32 cb, $00000000
3547   19E3 00 00 
3548   19E5 B0            cmp a, b
3549   19E6 FD 7F         sgt ; >
3550   19E8 E4            pop a
3551   19E9             ; --- END RELATIONAL
3552   19E9 C0 00 00      cmp b, 0
3553   19EC C6 3B 1A      je _while47_exit
3554   19EF             _while47_block:
3555   19EF             ; i--; 
3556   19EF FA FA FF      lea d, [bp + -6] ; $i
3557   19F2 2A            mov b, [d]
3558   19F3 38 00 00      mov c, 0
3559   19F6 11            mov a, b
3560   19F7 FD 7D         dec b
3561   19F9 FA FA FF      lea d, [bp + -6] ; $i
3562   19FC FD 43         mov [d], b
3563   19FE 27            mov b, a
3564   19FF             ; *dest++ = digits[i]; 
3565   19FF FA 05 00      lea d, [bp + 5] ; $dest
3566   1A02 2A            mov b, [d]
3567   1A03 38 00 00      mov c, 0
3568   1A06 FD 77         inc b
3569   1A08 FA 05 00      lea d, [bp + 5] ; $dest
3570   1A0B FD 43         mov [d], b
3571   1A0D FD 7D         dec b
3572   1A0F D8            push b
3573   1A10 FA FC FF      lea d, [bp + -4] ; $digits
3574   1A13 D7            push a
3575   1A14 DA            push d
3576   1A15 FA FA FF      lea d, [bp + -6] ; $i
3577   1A18 2A            mov b, [d]
3578   1A19 38 00 00      mov c, 0
3579   1A1C E7            pop d
3580   1A1D 5A            add d, b
3581   1A1E E4            pop a
3582   1A1F 32            mov bl, [d]
3583   1A20 A7 00         mov bh, 0
3584   1A22 38 00 00      mov c, 0
3585   1A25 E7            pop d
3586   1A26 FD 3E         mov [d], bl
3587   1A28             ; len++; 
3588   1A28 FA F8 FF      lea d, [bp + -8] ; $len
3589   1A2B 2A            mov b, [d]
3590   1A2C 38 00 00      mov c, 0
3591   1A2F 11            mov a, b
3592   1A30 FD 77         inc b
3593   1A32 FA F8 FF      lea d, [bp + -8] ; $len
3594   1A35 FD 43         mov [d], b
3595   1A37 27            mov b, a
3596   1A38 0A D6 19      jmp _while47_cond
3597   1A3B             _while47_exit:
3598   1A3B             ; *dest = '\0'; 
3599   1A3B FA 05 00      lea d, [bp + 5] ; $dest
3600   1A3E 2A            mov b, [d]
3601   1A3F 38 00 00      mov c, 0
3602   1A42 D8            push b
3603   1A43 FD 2E 00 00   mov32 cb, $00000000
3603   1A47 00 00 
3604   1A49 E7            pop d
3605   1A4A FD 3E         mov [d], bl
3606   1A4C             ; return len; 
3607   1A4C FA F8 FF      lea d, [bp + -8] ; $len
3608   1A4F 2A            mov b, [d]
3609   1A50 38 00 00      mov c, 0
3610   1A53 F9            leave
3611   1A54 09            ret
3612   1A55             
3613   1A55             print_unsigned:
3614   1A55 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3615   1A58             ; char digits[5]; 
3616   1A58 52 05 00      sub sp, 5
3617   1A5B             ; int i; 
3618   1A5B 52 02 00      sub sp, 2
3619   1A5E             ; i = 0; 
3620   1A5E FA FA FF      lea d, [bp + -6] ; $i
3621   1A61 DA            push d
3622   1A62 FD 2E 00 00   mov32 cb, $00000000
3622   1A66 00 00 
3623   1A68 E7            pop d
3624   1A69 FD 43         mov [d], b
3625   1A6B             ; if(num == 0){ 
3626   1A6B             _if48_cond:
3627   1A6B FA 05 00      lea d, [bp + 5] ; $num
3628   1A6E 2A            mov b, [d]
3629   1A6F 38 00 00      mov c, 0
3630   1A72             ; --- START RELATIONAL
3631   1A72 D7            push a
3632   1A73 11            mov a, b
3633   1A74 FD 2E 00 00   mov32 cb, $00000000
3633   1A78 00 00 
3634   1A7A B0            cmp a, b
3635   1A7B FD 71         seq ; ==
3636   1A7D E4            pop a
3637   1A7E             ; --- END RELATIONAL
3638   1A7E C0 00 00      cmp b, 0
3639   1A81 C6 96 1A      je _if48_exit
3640   1A84             _if48_TRUE:
3641   1A84             ; putchar('0'); 
3642   1A84             ; --- START FUNCTION CALL
3643   1A84 FD 2E 30 00   mov32 cb, $00000030
3643   1A88 00 00 
3644   1A8A DD            push bl
3645   1A8B 07 1D 1D      call putchar
3646   1A8E 51 01 00      add sp, 1
3647   1A91             ; --- END FUNCTION CALL
3648   1A91             ; return; 
3649   1A91 F9            leave
3650   1A92 09            ret
3651   1A93 0A 96 1A      jmp _if48_exit
3652   1A96             _if48_exit:
3653   1A96             ; while (num > 0) { 
3654   1A96             _while49_cond:
3655   1A96 FA 05 00      lea d, [bp + 5] ; $num
3656   1A99 2A            mov b, [d]
3657   1A9A 38 00 00      mov c, 0
3658   1A9D             ; --- START RELATIONAL
3659   1A9D D7            push a
3660   1A9E 11            mov a, b
3661   1A9F FD 2E 00 00   mov32 cb, $00000000
3661   1AA3 00 00 
3662   1AA5 B0            cmp a, b
3663   1AA6 FD 81         sgu ; > (unsigned)
3664   1AA8 E4            pop a
3665   1AA9             ; --- END RELATIONAL
3666   1AA9 C0 00 00      cmp b, 0
3667   1AAC C6 0B 1B      je _while49_exit
3668   1AAF             _while49_block:
3669   1AAF             ; digits[i] = '0' + (num % 10); 
3670   1AAF FA FC FF      lea d, [bp + -4] ; $digits
3671   1AB2 D7            push a
3672   1AB3 DA            push d
3673   1AB4 FA FA FF      lea d, [bp + -6] ; $i
3674   1AB7 2A            mov b, [d]
3675   1AB8 38 00 00      mov c, 0
3676   1ABB E7            pop d
3677   1ABC 5A            add d, b
3678   1ABD E4            pop a
3679   1ABE DA            push d
3680   1ABF FD 2E 30 00   mov32 cb, $00000030
3680   1AC3 00 00 
3681   1AC5             ; --- START TERMS
3682   1AC5 D7            push a
3683   1AC6 11            mov a, b
3684   1AC7 FA 05 00      lea d, [bp + 5] ; $num
3685   1ACA 2A            mov b, [d]
3686   1ACB 38 00 00      mov c, 0
3687   1ACE             ; --- START FACTORS
3688   1ACE D7            push a
3689   1ACF 11            mov a, b
3690   1AD0 FD 2E 0A 00   mov32 cb, $0000000a
3690   1AD4 00 00 
3691   1AD6 AE            div a, b ; 
3692   1AD7 11            mov a, b
3693   1AD8 27            mov b, a
3694   1AD9 E4            pop a
3695   1ADA             ; --- END FACTORS
3696   1ADA 56            add b, a
3697   1ADB E4            pop a
3698   1ADC             ; --- END TERMS
3699   1ADC E7            pop d
3700   1ADD FD 3E         mov [d], bl
3701   1ADF             ; num = num / 10; 
3702   1ADF FA 05 00      lea d, [bp + 5] ; $num
3703   1AE2 DA            push d
3704   1AE3 FA 05 00      lea d, [bp + 5] ; $num
3705   1AE6 2A            mov b, [d]
3706   1AE7 38 00 00      mov c, 0
3707   1AEA             ; --- START FACTORS
3708   1AEA D7            push a
3709   1AEB 11            mov a, b
3710   1AEC FD 2E 0A 00   mov32 cb, $0000000a
3710   1AF0 00 00 
3711   1AF2 AE            div a, b
3712   1AF3 27            mov b, a
3713   1AF4 E4            pop a
3714   1AF5             ; --- END FACTORS
3715   1AF5 E7            pop d
3716   1AF6 FD 43         mov [d], b
3717   1AF8             ; i++; 
3718   1AF8 FA FA FF      lea d, [bp + -6] ; $i
3719   1AFB 2A            mov b, [d]
3720   1AFC 38 00 00      mov c, 0
3721   1AFF 11            mov a, b
3722   1B00 FD 77         inc b
3723   1B02 FA FA FF      lea d, [bp + -6] ; $i
3724   1B05 FD 43         mov [d], b
3725   1B07 27            mov b, a
3726   1B08 0A 96 1A      jmp _while49_cond
3727   1B0B             _while49_exit:
3728   1B0B             ; while (i > 0) { 
3729   1B0B             _while50_cond:
3730   1B0B FA FA FF      lea d, [bp + -6] ; $i
3731   1B0E 2A            mov b, [d]
3732   1B0F 38 00 00      mov c, 0
3733   1B12             ; --- START RELATIONAL
3734   1B12 D7            push a
3735   1B13 11            mov a, b
3736   1B14 FD 2E 00 00   mov32 cb, $00000000
3736   1B18 00 00 
3737   1B1A B0            cmp a, b
3738   1B1B FD 7F         sgt ; >
3739   1B1D E4            pop a
3740   1B1E             ; --- END RELATIONAL
3741   1B1E C0 00 00      cmp b, 0
3742   1B21 C6 53 1B      je _while50_exit
3743   1B24             _while50_block:
3744   1B24             ; i--; 
3745   1B24 FA FA FF      lea d, [bp + -6] ; $i
3746   1B27 2A            mov b, [d]
3747   1B28 38 00 00      mov c, 0
3748   1B2B 11            mov a, b
3749   1B2C FD 7D         dec b
3750   1B2E FA FA FF      lea d, [bp + -6] ; $i
3751   1B31 FD 43         mov [d], b
3752   1B33 27            mov b, a
3753   1B34             ; putchar(digits[i]); 
3754   1B34             ; --- START FUNCTION CALL
3755   1B34 FA FC FF      lea d, [bp + -4] ; $digits
3756   1B37 D7            push a
3757   1B38 DA            push d
3758   1B39 FA FA FF      lea d, [bp + -6] ; $i
3759   1B3C 2A            mov b, [d]
3760   1B3D 38 00 00      mov c, 0
3761   1B40 E7            pop d
3762   1B41 5A            add d, b
3763   1B42 E4            pop a
3764   1B43 32            mov bl, [d]
3765   1B44 A7 00         mov bh, 0
3766   1B46 38 00 00      mov c, 0
3767   1B49 DD            push bl
3768   1B4A 07 1D 1D      call putchar
3769   1B4D 51 01 00      add sp, 1
3770   1B50             ; --- END FUNCTION CALL
3771   1B50 0A 0B 1B      jmp _while50_cond
3772   1B53             _while50_exit:
3773   1B53 F9            leave
3774   1B54 09            ret
3775   1B55             
3776   1B55             sprint_signed:
3777   1B55 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3778   1B58             ; char digits[5]; 
3779   1B58 52 05 00      sub sp, 5
3780   1B5B             ; int i = 0; 
3781   1B5B 52 02 00      sub sp, 2
3782   1B5E             ; --- START LOCAL VAR INITIALIZATION
3783   1B5E FA FA FF      lea d, [bp + -6] ; $i
3784   1B61 DA            push d
3785   1B62 FD 2E 00 00   mov32 cb, $00000000
3785   1B66 00 00 
3786   1B68 E7            pop d
3787   1B69 FD 43         mov [d], b
3788   1B6B             ; --- END LOCAL VAR INITIALIZATION
3789   1B6B             ; int len = 0; 
3790   1B6B 52 02 00      sub sp, 2
3791   1B6E             ; --- START LOCAL VAR INITIALIZATION
3792   1B6E FA F8 FF      lea d, [bp + -8] ; $len
3793   1B71 DA            push d
3794   1B72 FD 2E 00 00   mov32 cb, $00000000
3794   1B76 00 00 
3795   1B78 E7            pop d
3796   1B79 FD 43         mov [d], b
3797   1B7B             ; --- END LOCAL VAR INITIALIZATION
3798   1B7B             ; if (num < 0) { 
3799   1B7B             _if51_cond:
3800   1B7B FA 07 00      lea d, [bp + 7] ; $num
3801   1B7E 2A            mov b, [d]
3802   1B7F 38 00 00      mov c, 0
3803   1B82             ; --- START RELATIONAL
3804   1B82 D7            push a
3805   1B83 11            mov a, b
3806   1B84 FD 2E 00 00   mov32 cb, $00000000
3806   1B88 00 00 
3807   1B8A B0            cmp a, b
3808   1B8B FD 73         slt ; < (signed)
3809   1B8D E4            pop a
3810   1B8E             ; --- END RELATIONAL
3811   1B8E C0 00 00      cmp b, 0
3812   1B91 C6 D1 1B      je _if51_else
3813   1B94             _if51_TRUE:
3814   1B94             ; *dest++ = '-'; 
3815   1B94 FA 05 00      lea d, [bp + 5] ; $dest
3816   1B97 2A            mov b, [d]
3817   1B98 38 00 00      mov c, 0
3818   1B9B FD 77         inc b
3819   1B9D FA 05 00      lea d, [bp + 5] ; $dest
3820   1BA0 FD 43         mov [d], b
3821   1BA2 FD 7D         dec b
3822   1BA4 D8            push b
3823   1BA5 FD 2E 2D 00   mov32 cb, $0000002d
3823   1BA9 00 00 
3824   1BAB E7            pop d
3825   1BAC FD 3E         mov [d], bl
3826   1BAE             ; num = -num; 
3827   1BAE FA 07 00      lea d, [bp + 7] ; $num
3828   1BB1 DA            push d
3829   1BB2 FA 07 00      lea d, [bp + 7] ; $num
3830   1BB5 2A            mov b, [d]
3831   1BB6 38 00 00      mov c, 0
3832   1BB9 FD 97         neg b
3833   1BBB E7            pop d
3834   1BBC FD 43         mov [d], b
3835   1BBE             ; len++; 
3836   1BBE FA F8 FF      lea d, [bp + -8] ; $len
3837   1BC1 2A            mov b, [d]
3838   1BC2 38 00 00      mov c, 0
3839   1BC5 11            mov a, b
3840   1BC6 FD 77         inc b
3841   1BC8 FA F8 FF      lea d, [bp + -8] ; $len
3842   1BCB FD 43         mov [d], b
3843   1BCD 27            mov b, a
3844   1BCE 0A 20 1C      jmp _if51_exit
3845   1BD1             _if51_else:
3846   1BD1             ; if (num == 0) { 
3847   1BD1             _if52_cond:
3848   1BD1 FA 07 00      lea d, [bp + 7] ; $num
3849   1BD4 2A            mov b, [d]
3850   1BD5 38 00 00      mov c, 0
3851   1BD8             ; --- START RELATIONAL
3852   1BD8 D7            push a
3853   1BD9 11            mov a, b
3854   1BDA FD 2E 00 00   mov32 cb, $00000000
3854   1BDE 00 00 
3855   1BE0 B0            cmp a, b
3856   1BE1 FD 71         seq ; ==
3857   1BE3 E4            pop a
3858   1BE4             ; --- END RELATIONAL
3859   1BE4 C0 00 00      cmp b, 0
3860   1BE7 C6 20 1C      je _if52_exit
3861   1BEA             _if52_TRUE:
3862   1BEA             ; *dest++ = '0'; 
3863   1BEA FA 05 00      lea d, [bp + 5] ; $dest
3864   1BED 2A            mov b, [d]
3865   1BEE 38 00 00      mov c, 0
3866   1BF1 FD 77         inc b
3867   1BF3 FA 05 00      lea d, [bp + 5] ; $dest
3868   1BF6 FD 43         mov [d], b
3869   1BF8 FD 7D         dec b
3870   1BFA D8            push b
3871   1BFB FD 2E 30 00   mov32 cb, $00000030
3871   1BFF 00 00 
3872   1C01 E7            pop d
3873   1C02 FD 3E         mov [d], bl
3874   1C04             ; *dest = '\0'; 
3875   1C04 FA 05 00      lea d, [bp + 5] ; $dest
3876   1C07 2A            mov b, [d]
3877   1C08 38 00 00      mov c, 0
3878   1C0B D8            push b
3879   1C0C FD 2E 00 00   mov32 cb, $00000000
3879   1C10 00 00 
3880   1C12 E7            pop d
3881   1C13 FD 3E         mov [d], bl
3882   1C15             ; return 1; 
3883   1C15 FD 2E 01 00   mov32 cb, $00000001
3883   1C19 00 00 
3884   1C1B F9            leave
3885   1C1C 09            ret
3886   1C1D 0A 20 1C      jmp _if52_exit
3887   1C20             _if52_exit:
3888   1C20             _if51_exit:
3889   1C20             ; while (num > 0) { 
3890   1C20             _while53_cond:
3891   1C20 FA 07 00      lea d, [bp + 7] ; $num
3892   1C23 2A            mov b, [d]
3893   1C24 38 00 00      mov c, 0
3894   1C27             ; --- START RELATIONAL
3895   1C27 D7            push a
3896   1C28 11            mov a, b
3897   1C29 FD 2E 00 00   mov32 cb, $00000000
3897   1C2D 00 00 
3898   1C2F B0            cmp a, b
3899   1C30 FD 7F         sgt ; >
3900   1C32 E4            pop a
3901   1C33             ; --- END RELATIONAL
3902   1C33 C0 00 00      cmp b, 0
3903   1C36 C6 95 1C      je _while53_exit
3904   1C39             _while53_block:
3905   1C39             ; digits[i] = '0' + (num % 10); 
3906   1C39 FA FC FF      lea d, [bp + -4] ; $digits
3907   1C3C D7            push a
3908   1C3D DA            push d
3909   1C3E FA FA FF      lea d, [bp + -6] ; $i
3910   1C41 2A            mov b, [d]
3911   1C42 38 00 00      mov c, 0
3912   1C45 E7            pop d
3913   1C46 5A            add d, b
3914   1C47 E4            pop a
3915   1C48 DA            push d
3916   1C49 FD 2E 30 00   mov32 cb, $00000030
3916   1C4D 00 00 
3917   1C4F             ; --- START TERMS
3918   1C4F D7            push a
3919   1C50 11            mov a, b
3920   1C51 FA 07 00      lea d, [bp + 7] ; $num
3921   1C54 2A            mov b, [d]
3922   1C55 38 00 00      mov c, 0
3923   1C58             ; --- START FACTORS
3924   1C58 D7            push a
3925   1C59 11            mov a, b
3926   1C5A FD 2E 0A 00   mov32 cb, $0000000a
3926   1C5E 00 00 
3927   1C60 AE            div a, b ; 
3928   1C61 11            mov a, b
3929   1C62 27            mov b, a
3930   1C63 E4            pop a
3931   1C64             ; --- END FACTORS
3932   1C64 56            add b, a
3933   1C65 E4            pop a
3934   1C66             ; --- END TERMS
3935   1C66 E7            pop d
3936   1C67 FD 3E         mov [d], bl
3937   1C69             ; num = num / 10; 
3938   1C69 FA 07 00      lea d, [bp + 7] ; $num
3939   1C6C DA            push d
3940   1C6D FA 07 00      lea d, [bp + 7] ; $num
3941   1C70 2A            mov b, [d]
3942   1C71 38 00 00      mov c, 0
3943   1C74             ; --- START FACTORS
3944   1C74 D7            push a
3945   1C75 11            mov a, b
3946   1C76 FD 2E 0A 00   mov32 cb, $0000000a
3946   1C7A 00 00 
3947   1C7C AE            div a, b
3948   1C7D 27            mov b, a
3949   1C7E E4            pop a
3950   1C7F             ; --- END FACTORS
3951   1C7F E7            pop d
3952   1C80 FD 43         mov [d], b
3953   1C82             ; i++; 
3954   1C82 FA FA FF      lea d, [bp + -6] ; $i
3955   1C85 2A            mov b, [d]
3956   1C86 38 00 00      mov c, 0
3957   1C89 11            mov a, b
3958   1C8A FD 77         inc b
3959   1C8C FA FA FF      lea d, [bp + -6] ; $i
3960   1C8F FD 43         mov [d], b
3961   1C91 27            mov b, a
3962   1C92 0A 20 1C      jmp _while53_cond
3963   1C95             _while53_exit:
3964   1C95             ; while (i > 0) { 
3965   1C95             _while54_cond:
3966   1C95 FA FA FF      lea d, [bp + -6] ; $i
3967   1C98 2A            mov b, [d]
3968   1C99 38 00 00      mov c, 0
3969   1C9C             ; --- START RELATIONAL
3970   1C9C D7            push a
3971   1C9D 11            mov a, b
3972   1C9E FD 2E 00 00   mov32 cb, $00000000
3972   1CA2 00 00 
3973   1CA4 B0            cmp a, b
3974   1CA5 FD 7F         sgt ; >
3975   1CA7 E4            pop a
3976   1CA8             ; --- END RELATIONAL
3977   1CA8 C0 00 00      cmp b, 0
3978   1CAB C6 FA 1C      je _while54_exit
3979   1CAE             _while54_block:
3980   1CAE             ; i--; 
3981   1CAE FA FA FF      lea d, [bp + -6] ; $i
3982   1CB1 2A            mov b, [d]
3983   1CB2 38 00 00      mov c, 0
3984   1CB5 11            mov a, b
3985   1CB6 FD 7D         dec b
3986   1CB8 FA FA FF      lea d, [bp + -6] ; $i
3987   1CBB FD 43         mov [d], b
3988   1CBD 27            mov b, a
3989   1CBE             ; *dest++ = digits[i]; 
3990   1CBE FA 05 00      lea d, [bp + 5] ; $dest
3991   1CC1 2A            mov b, [d]
3992   1CC2 38 00 00      mov c, 0
3993   1CC5 FD 77         inc b
3994   1CC7 FA 05 00      lea d, [bp + 5] ; $dest
3995   1CCA FD 43         mov [d], b
3996   1CCC FD 7D         dec b
3997   1CCE D8            push b
3998   1CCF FA FC FF      lea d, [bp + -4] ; $digits
3999   1CD2 D7            push a
4000   1CD3 DA            push d
4001   1CD4 FA FA FF      lea d, [bp + -6] ; $i
4002   1CD7 2A            mov b, [d]
4003   1CD8 38 00 00      mov c, 0
4004   1CDB E7            pop d
4005   1CDC 5A            add d, b
4006   1CDD E4            pop a
4007   1CDE 32            mov bl, [d]
4008   1CDF A7 00         mov bh, 0
4009   1CE1 38 00 00      mov c, 0
4010   1CE4 E7            pop d
4011   1CE5 FD 3E         mov [d], bl
4012   1CE7             ; len++; 
4013   1CE7 FA F8 FF      lea d, [bp + -8] ; $len
4014   1CEA 2A            mov b, [d]
4015   1CEB 38 00 00      mov c, 0
4016   1CEE 11            mov a, b
4017   1CEF FD 77         inc b
4018   1CF1 FA F8 FF      lea d, [bp + -8] ; $len
4019   1CF4 FD 43         mov [d], b
4020   1CF6 27            mov b, a
4021   1CF7 0A 95 1C      jmp _while54_cond
4022   1CFA             _while54_exit:
4023   1CFA             ; *dest = '\0'; 
4024   1CFA FA 05 00      lea d, [bp + 5] ; $dest
4025   1CFD 2A            mov b, [d]
4026   1CFE 38 00 00      mov c, 0
4027   1D01 D8            push b
4028   1D02 FD 2E 00 00   mov32 cb, $00000000
4028   1D06 00 00 
4029   1D08 E7            pop d
4030   1D09 FD 3E         mov [d], bl
4031   1D0B             ; return len; 
4032   1D0B FA F8 FF      lea d, [bp + -8] ; $len
4033   1D0E 2A            mov b, [d]
4034   1D0F 38 00 00      mov c, 0
4035   1D12 F9            leave
4036   1D13 09            ret
4037   1D14             
4038   1D14             date:
4039   1D14 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4040   1D17             
4041   1D17             ; --- BEGIN INLINE ASM SEGMENT
4042   1D17 19 00         mov al, 0 
4043   1D19 05 07         syscall sys_datetime
4044   1D1B             ; --- END INLINE ASM SEGMENT
4045   1D1B             
4046   1D1B F9            leave
4047   1D1C 09            ret
4048   1D1D             
4049   1D1D             putchar:
4050   1D1D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4051   1D20             
4052   1D20             ; --- BEGIN INLINE ASM SEGMENT
4053   1D20 FA 05 00      lea d, [bp + 5] ; $c
4054   1D23 1E            mov al, [d]
4055   1D24 23            mov ah, al
4056   1D25 07 2C 1F      call _putchar
4057   1D28             ; --- END INLINE ASM SEGMENT
4058   1D28             
4059   1D28 F9            leave
4060   1D29 09            ret
4061   1D2A             
4062   1D2A             getchar:
4063   1D2A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4064   1D2D             ; char c; 
4065   1D2D 52 01 00      sub sp, 1
4066   1D30             
4067   1D30             ; --- BEGIN INLINE ASM SEGMENT
4068   1D30 07 25 1F      call getch
4069   1D33 1A            mov al, ah
4070   1D34 FA 00 00      lea d, [bp + 0] ; $c
4071   1D37 3E            mov [d], al
4072   1D38             ; --- END INLINE ASM SEGMENT
4073   1D38             
4074   1D38             ; return c; 
4075   1D38 FA 00 00      lea d, [bp + 0] ; $c
4076   1D3B 32            mov bl, [d]
4077   1D3C A7 00         mov bh, 0
4078   1D3E 38 00 00      mov c, 0
4079   1D41 F9            leave
4080   1D42 09            ret
4081   1D43             
4082   1D43             scann:
4083   1D43 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4084   1D46             ; int m; 
4085   1D46 52 02 00      sub sp, 2
4086   1D49             
4087   1D49             ; --- BEGIN INLINE ASM SEGMENT
4088   1D49 07 70 21      call scan_u16d
4089   1D4C FA FF FF      lea d, [bp + -1] ; $m
4090   1D4F 43            mov [d], a
4091   1D50             ; --- END INLINE ASM SEGMENT
4092   1D50             
4093   1D50             ; return m; 
4094   1D50 FA FF FF      lea d, [bp + -1] ; $m
4095   1D53 2A            mov b, [d]
4096   1D54 38 00 00      mov c, 0
4097   1D57 F9            leave
4098   1D58 09            ret
4099   1D59             
4100   1D59             puts:
4101   1D59 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4102   1D5C             
4103   1D5C             ; --- BEGIN INLINE ASM SEGMENT
4104   1D5C FA 05 00      lea d, [bp + 5] ; $s
4105   1D5F 15            mov a, [d]
4106   1D60 3C            mov d, a
4107   1D61 07 76 20      call _puts
4108   1D64 10 00 0A      mov a, $0A00
4109   1D67 05 03         syscall sys_io
4110   1D69             ; --- END INLINE ASM SEGMENT
4111   1D69             
4112   1D69 F9            leave
4113   1D6A 09            ret
4114   1D6B             
4115   1D6B             print:
4116   1D6B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4117   1D6E             
4118   1D6E             ; --- BEGIN INLINE ASM SEGMENT
4119   1D6E FA 05 00      lea d, [bp + 5] ; $s
4120   1D71 FD 2A         mov d, [d]
4121   1D73 07 76 20      call _puts
4122   1D76             ; --- END INLINE ASM SEGMENT
4123   1D76             
4124   1D76 F9            leave
4125   1D77 09            ret
4126   1D78             
4127   1D78             getparam:
4128   1D78 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4129   1D7B             ; char data; 
4130   1D7B 52 01 00      sub sp, 1
4131   1D7E             
4132   1D7E             ; --- BEGIN INLINE ASM SEGMENT
4133   1D7E 19 04         mov al, 4
4134   1D80 FA 05 00      lea d, [bp + 5] ; $address
4135   1D83 FD 2A         mov d, [d]
4136   1D85 05 0C         syscall sys_system
4137   1D87 FA 00 00      lea d, [bp + 0] ; $data
4138   1D8A FD 3E         mov [d], bl
4139   1D8C             ; --- END INLINE ASM SEGMENT
4140   1D8C             
4141   1D8C             ; return data; 
4142   1D8C FA 00 00      lea d, [bp + 0] ; $data
4143   1D8F 32            mov bl, [d]
4144   1D90 A7 00         mov bh, 0
4145   1D92 38 00 00      mov c, 0
4146   1D95 F9            leave
4147   1D96 09            ret
4148   1D97             
4149   1D97             clear:
4150   1D97 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4151   1D9A             ; print("\033[2J\033[H"); 
4152   1D9A             ; --- START FUNCTION CALL
4153   1D9A 26 5B 2E      mov b, _s5 ; "\033[2J\033[H"
4154   1D9D FD AB         swp b
4155   1D9F D8            push b
4156   1DA0 07 6B 1D      call print
4157   1DA3 51 02 00      add sp, 2
4158   1DA6             ; --- END FUNCTION CALL
4159   1DA6 F9            leave
4160   1DA7 09            ret
4161   1DA8             
4162   1DA8             abs:
4163   1DA8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4164   1DAB             ; return i < 0 ? -i : i; 
4165   1DAB             _ternary55_cond:
4166   1DAB FA 05 00      lea d, [bp + 5] ; $i
4167   1DAE 2A            mov b, [d]
4168   1DAF 38 00 00      mov c, 0
4169   1DB2             ; --- START RELATIONAL
4170   1DB2 D7            push a
4171   1DB3 11            mov a, b
4172   1DB4 FD 2E 00 00   mov32 cb, $00000000
4172   1DB8 00 00 
4173   1DBA B0            cmp a, b
4174   1DBB FD 73         slt ; < (signed)
4175   1DBD E4            pop a
4176   1DBE             ; --- END RELATIONAL
4177   1DBE C0 00 00      cmp b, 0
4178   1DC1 C6 D0 1D      je _ternary55_FALSE
4179   1DC4             _ternary55_TRUE:
4180   1DC4 FA 05 00      lea d, [bp + 5] ; $i
4181   1DC7 2A            mov b, [d]
4182   1DC8 38 00 00      mov c, 0
4183   1DCB FD 97         neg b
4184   1DCD 0A D7 1D      jmp _ternary55_exit
4185   1DD0             _ternary55_FALSE:
4186   1DD0 FA 05 00      lea d, [bp + 5] ; $i
4187   1DD3 2A            mov b, [d]
4188   1DD4 38 00 00      mov c, 0
4189   1DD7             _ternary55_exit:
4190   1DD7 F9            leave
4191   1DD8 09            ret
4192   1DD9             
4193   1DD9             loadfile:
4194   1DD9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4195   1DDC             
4196   1DDC             ; --- BEGIN INLINE ASM SEGMENT
4197   1DDC FA 07 00      lea d, [bp + 7] ; $destination
4198   1DDF 15            mov a, [d]
4199   1DE0 4F            mov di, a
4200   1DE1 FA 05 00      lea d, [bp + 5] ; $filename
4201   1DE4 FD 2A         mov d, [d]
4202   1DE6 19 14         mov al, 20
4203   1DE8 05 04         syscall sys_filesystem
4204   1DEA             ; --- END INLINE ASM SEGMENT
4205   1DEA             
4206   1DEA F9            leave
4207   1DEB 09            ret
4208   1DEC             
4209   1DEC             create_file:
4210   1DEC F8 00 00      enter 0 ; (push bp; mov bp, sp)
4211   1DEF F9            leave
4212   1DF0 09            ret
4213   1DF1             
4214   1DF1             delete_file:
4215   1DF1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4216   1DF4             
4217   1DF4             ; --- BEGIN INLINE ASM SEGMENT
4218   1DF4 FA 05 00      lea d, [bp + 5] ; $filename
4219   1DF7 19 0A         mov al, 10
4220   1DF9 05 04         syscall sys_filesystem
4221   1DFB             ; --- END INLINE ASM SEGMENT
4222   1DFB             
4223   1DFB F9            leave
4224   1DFC 09            ret
4225   1DFD             
4226   1DFD             load_hex:
4227   1DFD F8 00 00      enter 0 ; (push bp; mov bp, sp)
4228   1E00             ; char *temp; 
4229   1E00 52 02 00      sub sp, 2
4230   1E03             ; temp = alloc(32768); 
4231   1E03 FA FF FF      lea d, [bp + -1] ; $temp
4232   1E06 DA            push d
4233   1E07             ; --- START FUNCTION CALL
4234   1E07 FD 2E 00 80   mov32 cb, $00008000
4234   1E0B 00 00 
4235   1E0D FD AB         swp b
4236   1E0F D8            push b
4237   1E10 07 D6 08      call alloc
4238   1E13 51 02 00      add sp, 2
4239   1E16             ; --- END FUNCTION CALL
4240   1E16 E7            pop d
4241   1E17 FD 43         mov [d], b
4242   1E19             
4243   1E19             ; --- BEGIN INLINE ASM SEGMENT
4244   1E19               
4245   1E19               
4246   1E19               
4247   1E19             _load_hex:
4248   1E19 FA 05 00      lea d, [bp + 5] ; $destination
4249   1E1C FD 2A         mov d, [d]
4250   1E1E FD 50         mov di, d
4251   1E20 FA FF FF      lea d, [bp + -1] ; $temp
4252   1E23 FD 2A         mov d, [d]
4253   1E25 38 00 00      mov c, 0
4254   1E28 48            mov a, sp
4255   1E29 77            inc a
4256   1E2A 3C            mov d, a          
4257   1E2B 07 33 1F      call _gets        
4258   1E2E 4D            mov si, a
4259   1E2F             __load_hex_loop:
4260   1E2F F6            lodsb             
4261   1E30 B9 00         cmp al, 0         
4262   1E32 C6 40 1E      jz __load_hex_ret
4263   1E35 36            mov bh, al
4264   1E36 F6            lodsb
4265   1E37 2F            mov bl, al
4266   1E38 07 EA 1E      call _atoi        
4267   1E3B F7            stosb             
4268   1E3C 78            inc c
4269   1E3D 0A 2F 1E      jmp __load_hex_loop
4270   1E40             __load_hex_ret:
4271   1E40             ; --- END INLINE ASM SEGMENT
4272   1E40             
4273   1E40 F9            leave
4274   1E41 09            ret
4275   1E42             
4276   1E42             include_stdio_asm:
4277   1E42 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4278   1E45             
4279   1E45             ; --- BEGIN INLINE ASM SEGMENT
4280   1E45             .include "lib/asm/stdio.asm"
0001+  1E45             ;-----------------------------------------------------------------------------
0002+  1E45             ; stdio.s
0003+  1E45             ;-----------------------------------------------------------------------------
0004+  1E45             .include "lib/asm/string.asm"
0001++ 1E45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1E45             ; string.s
0003++ 1E45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1E45             
0005++ 1E45             
0006++ 1E45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1E45             ; _strrev
0008++ 1E45             ; reverse a string
0009++ 1E45             ; D = string address
0010++ 1E45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1E45             ; 01234
0012++ 1E45             _strrev:
0013++ 1E45 4B          	pusha
0014++ 1E46 07 8C 1E    	call _strlen	; length in C
0015++ 1E49 12          	mov a, c
0016++ 1E4A AF 01 00    	cmp a, 1
0017++ 1E4D D0 67 1E    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1E50 7D          	dec a
0019++ 1E51 FD 4E       	mov si, d	; beginning of string
0020++ 1E53 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1E55 59          	add d, a	; end of string
0022++ 1E56 12          	mov a, c
0023++ 1E57 FD 9B       	shr a		; divide by 2
0024++ 1E59 39          	mov c, a	; C now counts the steps
0025++ 1E5A             _strrev_L0:
0026++ 1E5A 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1E5B F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1E5C 3E          	mov [d], al	; store left char into right side
0029++ 1E5D 1B          	mov al, bl
0030++ 1E5E F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1E5F 7E          	dec c
0032++ 1E60 7F          	dec d
0033++ 1E61 C2 00 00    	cmp c, 0
0034++ 1E64 C7 5A 1E    	jne _strrev_L0
0035++ 1E67             _strrev_end:
0036++ 1E67 4C          	popa
0037++ 1E68 09          	ret
0038++ 1E69             	
0039++ 1E69             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1E69             ; _strchr
0041++ 1E69             ; search string in D for char in AL
0042++ 1E69             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1E69             _strchr:
0044++ 1E69             _strchr_L0:
0045++ 1E69 32          	mov bl, [d]
0046++ 1E6A C1 00       	cmp bl, 0
0047++ 1E6C C6 77 1E    	je _strchr_end
0048++ 1E6F BA          	cmp al, bl
0049++ 1E70 C6 77 1E    	je _strchr_end
0050++ 1E73 79          	inc d
0051++ 1E74 0A 69 1E    	jmp _strchr_L0
0052++ 1E77             _strchr_end:
0053++ 1E77 1B          	mov al, bl
0054++ 1E78 09          	ret
0055++ 1E79             
0056++ 1E79             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1E79             ; _strstr
0058++ 1E79             ; find sub-string
0059++ 1E79             ; str1 in SI
0060++ 1E79             ; str2 in DI
0061++ 1E79             ; SI points to end of source string
0062++ 1E79             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1E79             _strstr:
0064++ 1E79 DB          	push al
0065++ 1E7A DA          	push d
0066++ 1E7B E3          	push di
0067++ 1E7C             _strstr_loop:
0068++ 1E7C F3          	cmpsb					; compare a byte of the strings
0069++ 1E7D C7 88 1E    	jne _strstr_ret
0070++ 1E80 FC 00 00    	lea d, [di + 0]
0071++ 1E83 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1E85 C7 7C 1E    	jne _strstr_loop				; equal chars but not at end
0073++ 1E88             _strstr_ret:
0074++ 1E88 F0          	pop di
0075++ 1E89 E7          	pop d
0076++ 1E8A E8          	pop al
0077++ 1E8B 09          	ret
0078++ 1E8C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1E8C             ; length of null terminated string
0080++ 1E8C             ; result in C
0081++ 1E8C             ; pointer in D
0082++ 1E8C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1E8C             _strlen:
0084++ 1E8C DA          	push d
0085++ 1E8D 38 00 00    	mov c, 0
0086++ 1E90             _strlen_L1:
0087++ 1E90 BD 00       	cmp byte [d], 0
0088++ 1E92 C6 9A 1E    	je _strlen_ret
0089++ 1E95 79          	inc d
0090++ 1E96 78          	inc c
0091++ 1E97 0A 90 1E    	jmp _strlen_L1
0092++ 1E9A             _strlen_ret:
0093++ 1E9A E7          	pop d
0094++ 1E9B 09          	ret
0095++ 1E9C             
0096++ 1E9C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1E9C             ; STRCMP
0098++ 1E9C             ; compare two strings
0099++ 1E9C             ; str1 in SI
0100++ 1E9C             ; str2 in DI
0101++ 1E9C             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1E9C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1E9C             _strcmp:
0104++ 1E9C DB          	push al
0105++ 1E9D DA          	push d
0106++ 1E9E E3          	push di
0107++ 1E9F E2          	push si
0108++ 1EA0             _strcmp_loop:
0109++ 1EA0 F3          	cmpsb					; compare a byte of the strings
0110++ 1EA1 C7 AC 1E    	jne _strcmp_ret
0111++ 1EA4 FB FF FF    	lea d, [si +- 1]
0112++ 1EA7 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1EA9 C7 A0 1E    	jne _strcmp_loop				; equal chars but not at end
0114++ 1EAC             _strcmp_ret:
0115++ 1EAC EF          	pop si
0116++ 1EAD F0          	pop di
0117++ 1EAE E7          	pop d
0118++ 1EAF E8          	pop al
0119++ 1EB0 09          	ret
0120++ 1EB1             
0121++ 1EB1             
0122++ 1EB1             ; STRCPY
0123++ 1EB1             ; copy null terminated string from SI to DI
0124++ 1EB1             ; source in SI
0125++ 1EB1             ; destination in DI
0126++ 1EB1             _strcpy:
0127++ 1EB1 E2          	push si
0128++ 1EB2 E3          	push di
0129++ 1EB3 DB          	push al
0130++ 1EB4             _strcpy_L1:
0131++ 1EB4 F6          	lodsb
0132++ 1EB5 F7          	stosb
0133++ 1EB6 B9 00       	cmp al, 0
0134++ 1EB8 C7 B4 1E    	jne _strcpy_L1
0135++ 1EBB             _strcpy_end:
0136++ 1EBB E8          	pop al
0137++ 1EBC F0          	pop di
0138++ 1EBD EF          	pop si
0139++ 1EBE 09          	ret
0140++ 1EBF             
0141++ 1EBF             ; STRCAT
0142++ 1EBF             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1EBF             ; source in SI
0144++ 1EBF             ; destination in DI
0145++ 1EBF             _strcat:
0146++ 1EBF E2          	push si
0147++ 1EC0 E3          	push di
0148++ 1EC1 D7          	push a
0149++ 1EC2 DA          	push d
0150++ 1EC3 50          	mov a, di
0151++ 1EC4 3C          	mov d, a
0152++ 1EC5             _strcat_goto_end_L1:
0153++ 1EC5 BD 00       	cmp byte[d], 0
0154++ 1EC7 C6 CE 1E    	je _strcat_start
0155++ 1ECA 79          	inc d
0156++ 1ECB 0A C5 1E    	jmp _strcat_goto_end_L1
0157++ 1ECE             _strcat_start:
0158++ 1ECE FD 50       	mov di, d
0159++ 1ED0             _strcat_L1:
0160++ 1ED0 F6          	lodsb
0161++ 1ED1 F7          	stosb
0162++ 1ED2 B9 00       	cmp al, 0
0163++ 1ED4 C7 D0 1E    	jne _strcat_L1
0164++ 1ED7             _strcat_end:
0165++ 1ED7 E7          	pop d
0166++ 1ED8 E4          	pop a
0167++ 1ED9 F0          	pop di
0168++ 1EDA EF          	pop si
0169++ 1EDB 09          	ret
0170++ 1EDC             
0171++ 1EDC             
0005+  1EDC             
0006+  1EDC             ;-----------------------------------------------------------------------------
0007+  1EDC             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1EDC             ; ASCII in BL
0009+  1EDC             ; result in AL
0010+  1EDC             ; ascii for F = 0100 0110
0011+  1EDC             ; ascii for 9 = 0011 1001
0012+  1EDC             ;-----------------------------------------------------------------------------
0013+  1EDC             hex_ascii_encode:
0014+  1EDC 1B            mov al, bl
0015+  1EDD 93 40         test al, $40        ; test if letter or number
0016+  1EDF C7 E5 1E      jnz hex_letter
0017+  1EE2 87 0F         and al, $0F        ; get number
0018+  1EE4 09            ret
0019+  1EE5             hex_letter:
0020+  1EE5 87 0F         and al, $0F        ; get letter
0021+  1EE7 6A 09         add al, 9
0022+  1EE9 09            ret
0023+  1EEA             
0024+  1EEA             ;-----------------------------------------------------------------------------
0025+  1EEA             ; ATOI
0026+  1EEA             ; 2 letter hex string in B
0027+  1EEA             ; 8bit integer returned in AL
0028+  1EEA             ;-----------------------------------------------------------------------------
0029+  1EEA             _atoi:
0030+  1EEA D8            push b
0031+  1EEB 07 DC 1E      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1EEE 30            mov bl, bh
0033+  1EEF DB            push al          ; save a
0034+  1EF0 07 DC 1E      call hex_ascii_encode
0035+  1EF3 EA            pop bl  
0036+  1EF4 FD 9E 04      shl al, 4
0037+  1EF7 8C            or al, bl
0038+  1EF8 E5            pop b
0039+  1EF9 09            ret  
0040+  1EFA             
0041+  1EFA             
0042+  1EFA             ;-----------------------------------------------------------------------------
0043+  1EFA             ; ITOA
0044+  1EFA             ; 8bit value in BL
0045+  1EFA             ; 2 byte ASCII result in A
0046+  1EFA             ;-----------------------------------------------------------------------------
0047+  1EFA             _itoa:
0048+  1EFA DA            push d
0049+  1EFB D8            push b
0050+  1EFC A7 00         mov bh, 0
0051+  1EFE FD A4 04      shr bl, 4  
0052+  1F01 74            mov d, b
0053+  1F02 1F AA 21      mov al, [d + s_hex_digits]
0054+  1F05 23            mov ah, al
0055+  1F06               
0056+  1F06 E5            pop b
0057+  1F07 D8            push b
0058+  1F08 A7 00         mov bh, 0
0059+  1F0A FD 87 0F      and bl, $0F
0060+  1F0D 74            mov d, b
0061+  1F0E 1F AA 21      mov al, [d + s_hex_digits]
0062+  1F11 E5            pop b
0063+  1F12 E7            pop d
0064+  1F13 09            ret
0065+  1F14             
0066+  1F14             ;-----------------------------------------------------------------------------
0067+  1F14             ; HEX STRING TO BINARY
0068+  1F14             ; di = destination address
0069+  1F14             ; si = source
0070+  1F14             ;-----------------------------------------------------------------------------
0071+  1F14             _hex_to_int:
0072+  1F14             _hex_to_int_L1:
0073+  1F14 F6            lodsb          ; load from [SI] to AL
0074+  1F15 B9 00         cmp al, 0        ; check if ASCII 0
0075+  1F17 C6 24 1F      jz _hex_to_int_ret
0076+  1F1A 36            mov bh, al
0077+  1F1B F6            lodsb
0078+  1F1C 2F            mov bl, al
0079+  1F1D 07 EA 1E      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1F20 F7            stosb          ; store AL to [DI]
0081+  1F21 0A 14 1F      jmp _hex_to_int_L1
0082+  1F24             _hex_to_int_ret:
0083+  1F24 09            ret    
0084+  1F25             
0085+  1F25             ;-----------------------------------------------------------------------------
0086+  1F25             ; GETCHAR
0087+  1F25             ; char in ah
0088+  1F25             ;-----------------------------------------------------------------------------
0089+  1F25             getch:
0090+  1F25 DB            push al
0091+  1F26             getch_retry:
0092+  1F26 19 01         mov al, 1
0093+  1F28 05 03         syscall sys_io      ; receive in AH
0094+  1F2A E8            pop al
0095+  1F2B 09            ret
0096+  1F2C             
0097+  1F2C             ;-----------------------------------------------------------------------------
0098+  1F2C             ; PUTCHAR
0099+  1F2C             ; char in ah
0100+  1F2C             ;-----------------------------------------------------------------------------
0101+  1F2C             _putchar:
0102+  1F2C D7            push a
0103+  1F2D 19 00         mov al, 0
0104+  1F2F 05 03         syscall sys_io      ; char in AH
0105+  1F31 E4            pop a
0106+  1F32 09            ret
0107+  1F33             
0108+  1F33             ;-----------------------------------------------------------------------------
0109+  1F33             ;; INPUT A STRING
0110+  1F33             ;; terminates with null
0111+  1F33             ;; pointer in D
0112+  1F33             ;-----------------------------------------------------------------------------
0113+  1F33             _gets:
0114+  1F33 D7            push a
0115+  1F34 DA            push d
0116+  1F35             _gets_loop:
0117+  1F35 19 01         mov al, 1
0118+  1F37 05 03         syscall sys_io      ; receive in AH
0119+  1F39 B9 00         cmp al, 0        ; check error code (AL)
0120+  1F3B C6 35 1F      je _gets_loop      ; if no char received, retry
0121+  1F3E             
0122+  1F3E 76 1B         cmp ah, 27
0123+  1F40 C6 61 1F      je _gets_ansi_esc
0124+  1F43 76 0A         cmp ah, $0A        ; LF
0125+  1F45 C6 CC 1F      je _gets_end
0126+  1F48 76 0D         cmp ah, $0D        ; CR
0127+  1F4A C6 CC 1F      je _gets_end
0128+  1F4D 76 5C         cmp ah, $5C        ; '\\'
0129+  1F4F C6 8D 1F      je _gets_escape
0130+  1F52               
0131+  1F52 76 08         cmp ah, $08      ; check for backspace
0132+  1F54 C6 5D 1F      je _gets_backspace
0133+  1F57             
0134+  1F57 1A            mov al, ah
0135+  1F58 3E            mov [d], al
0136+  1F59 79            inc d
0137+  1F5A 0A 35 1F      jmp _gets_loop
0138+  1F5D             _gets_backspace:
0139+  1F5D 7F            dec d
0140+  1F5E 0A 35 1F      jmp _gets_loop
0141+  1F61             _gets_ansi_esc:
0142+  1F61 19 01         mov al, 1
0143+  1F63 05 03         syscall sys_io        ; receive in AH without echo
0144+  1F65 B9 00         cmp al, 0          ; check error code (AL)
0145+  1F67 C6 61 1F      je _gets_ansi_esc    ; if no char received, retry
0146+  1F6A 76 5B         cmp ah, '['
0147+  1F6C C7 35 1F      jne _gets_loop
0148+  1F6F             _gets_ansi_esc_2:
0149+  1F6F 19 01         mov al, 1
0150+  1F71 05 03         syscall sys_io          ; receive in AH without echo
0151+  1F73 B9 00         cmp al, 0            ; check error code (AL)
0152+  1F75 C6 6F 1F      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1F78 76 44         cmp ah, 'D'
0154+  1F7A C6 85 1F      je _gets_left_arrow
0155+  1F7D 76 43         cmp ah, 'C'
0156+  1F7F C6 89 1F      je _gets_right_arrow
0157+  1F82 0A 35 1F      jmp _gets_loop
0158+  1F85             _gets_left_arrow:
0159+  1F85 7F            dec d
0160+  1F86 0A 35 1F      jmp _gets_loop
0161+  1F89             _gets_right_arrow:
0162+  1F89 79            inc d
0163+  1F8A 0A 35 1F      jmp _gets_loop
0164+  1F8D             _gets_escape:
0165+  1F8D 19 01         mov al, 1
0166+  1F8F 05 03         syscall sys_io      ; receive in AH
0167+  1F91 B9 00         cmp al, 0        ; check error code (AL)
0168+  1F93 C6 8D 1F      je _gets_escape      ; if no char received, retry
0169+  1F96 76 6E         cmp ah, 'n'
0170+  1F98 C6 B7 1F      je _gets_LF
0171+  1F9B 76 72         cmp ah, 'r'
0172+  1F9D C6 BE 1F      je _gets_CR
0173+  1FA0 76 30         cmp ah, '0'
0174+  1FA2 C6 C5 1F      je _gets_NULL
0175+  1FA5 76 5C         cmp ah, $5C  ; '\'
0176+  1FA7 C6 B0 1F      je _gets_slash
0177+  1FAA 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1FAB 3E            mov [d], al
0179+  1FAC 79            inc d
0180+  1FAD 0A 35 1F      jmp _gets_loop
0181+  1FB0             _gets_slash:
0182+  1FB0 19 5C         mov al, $5C
0183+  1FB2 3E            mov [d], al
0184+  1FB3 79            inc d
0185+  1FB4 0A 35 1F      jmp _gets_loop
0186+  1FB7             _gets_LF:
0187+  1FB7 19 0A         mov al, $0A
0188+  1FB9 3E            mov [d], al
0189+  1FBA 79            inc d
0190+  1FBB 0A 35 1F      jmp _gets_loop
0191+  1FBE             _gets_CR:
0192+  1FBE 19 0D         mov al, $0D
0193+  1FC0 3E            mov [d], al
0194+  1FC1 79            inc d
0195+  1FC2 0A 35 1F      jmp _gets_loop
0196+  1FC5             _gets_NULL:
0197+  1FC5 19 00         mov al, $00
0198+  1FC7 3E            mov [d], al
0199+  1FC8 79            inc d
0200+  1FC9 0A 35 1F      jmp _gets_loop
0201+  1FCC             _gets_end:
0202+  1FCC 19 00         mov al, 0
0203+  1FCE 3E            mov [d], al        ; terminate string
0204+  1FCF E7            pop d
0205+  1FD0 E4            pop a
0206+  1FD1 09            ret
0207+  1FD2             
0208+  1FD2             ;-----------------------------------------------------------------------------
0209+  1FD2             ;; INPUT TEXT
0210+  1FD2             ;; terminated with CTRL+D
0211+  1FD2             ;; pointer in D
0212+  1FD2             ;-----------------------------------------------------------------------------
0213+  1FD2             _gettxt:
0214+  1FD2 D7            push a
0215+  1FD3 DA            push d
0216+  1FD4             _gettxt_loop:
0217+  1FD4 19 01         mov al, 1
0218+  1FD6 05 03         syscall sys_io      ; receive in AH
0219+  1FD8 B9 00         cmp al, 0        ; check error code (AL)
0220+  1FDA C6 D4 1F      je _gettxt_loop    ; if no char received, retry
0221+  1FDD 76 04         cmp ah, 4      ; EOT
0222+  1FDF C6 1D 20      je _gettxt_end
0223+  1FE2 76 08         cmp ah, $08      ; check for backspace
0224+  1FE4 C6 19 20      je _gettxt_backspace
0225+  1FE7 76 5C         cmp ah, $5C        ; '\'
0226+  1FE9 C6 F2 1F      je _gettxt_escape
0227+  1FEC 1A            mov al, ah
0228+  1FED 3E            mov [d], al
0229+  1FEE 79            inc d
0230+  1FEF 0A D4 1F      jmp _gettxt_loop
0231+  1FF2             _gettxt_escape:
0232+  1FF2 19 01         mov al, 1
0233+  1FF4 05 03         syscall sys_io      ; receive in AH
0234+  1FF6 B9 00         cmp al, 0        ; check error code (AL)
0235+  1FF8 C6 F2 1F      je _gettxt_escape    ; if no char received, retry
0236+  1FFB 76 6E         cmp ah, 'n'
0237+  1FFD C6 0B 20      je _gettxt_LF
0238+  2000 76 72         cmp ah, 'r'
0239+  2002 C6 12 20      je _gettxt_CR
0240+  2005 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  2006 3E            mov [d], al
0242+  2007 79            inc d
0243+  2008 0A D4 1F      jmp _gettxt_loop
0244+  200B             _gettxt_LF:
0245+  200B 19 0A         mov al, $0A
0246+  200D 3E            mov [d], al
0247+  200E 79            inc d
0248+  200F 0A D4 1F      jmp _gettxt_loop
0249+  2012             _gettxt_CR:
0250+  2012 19 0D         mov al, $0D
0251+  2014 3E            mov [d], al
0252+  2015 79            inc d
0253+  2016 0A D4 1F      jmp _gettxt_loop
0254+  2019             _gettxt_backspace:
0255+  2019 7F            dec d
0256+  201A 0A D4 1F      jmp _gettxt_loop
0257+  201D             _gettxt_end:
0258+  201D 19 00         mov al, 0
0259+  201F 3E            mov [d], al        ; terminate string
0260+  2020 E7            pop d
0261+  2021 E4            pop a
0262+  2022 09            ret
0263+  2023             
0264+  2023             ;-----------------------------------------------------------------------------
0265+  2023             ; PRINT NEW LINE
0266+  2023             ;-----------------------------------------------------------------------------
0267+  2023             printnl:
0268+  2023 D7            push a
0269+  2024 10 00 0A      mov a, $0A00
0270+  2027 05 03         syscall sys_io
0271+  2029 10 00 0D      mov a, $0D00
0272+  202C 05 03         syscall sys_io
0273+  202E E4            pop a
0274+  202F 09            ret
0275+  2030             
0276+  2030             ;-----------------------------------------------------------------------------
0277+  2030             ; _strtoint
0278+  2030             ; 4 digit hex string number in d
0279+  2030             ; integer returned in A
0280+  2030             ;-----------------------------------------------------------------------------
0281+  2030             _strtointx:
0282+  2030 D8            push b
0283+  2031 32            mov bl, [d]
0284+  2032 37            mov bh, bl
0285+  2033 33 01 00      mov bl, [d + 1]
0286+  2036 07 EA 1E      call _atoi        ; convert to int in AL
0287+  2039 23            mov ah, al        ; move to AH
0288+  203A 33 02 00      mov bl, [d + 2]
0289+  203D 37            mov bh, bl
0290+  203E 33 03 00      mov bl, [d + 3]
0291+  2041 07 EA 1E      call _atoi        ; convert to int in AL
0292+  2044 E5            pop b
0293+  2045 09            ret
0294+  2046             
0295+  2046             ;-----------------------------------------------------------------------------
0296+  2046             ; _strtoint
0297+  2046             ; 5 digit base10 string number in d
0298+  2046             ; integer returned in A
0299+  2046             ;-----------------------------------------------------------------------------
0300+  2046             _strtoint:
0301+  2046 E2            push si
0302+  2047 D8            push b
0303+  2048 D9            push c
0304+  2049 DA            push d
0305+  204A 07 8C 1E      call _strlen      ; get string length in C
0306+  204D 7E            dec c
0307+  204E FD 4E         mov si, d
0308+  2050 12            mov a, c
0309+  2051 FD 99         shl a
0310+  2053 3B C2 21      mov d, table_power
0311+  2056 59            add d, a
0312+  2057 38 00 00      mov c, 0
0313+  205A             _strtoint_L0:
0314+  205A F6            lodsb      ; load ASCII to al
0315+  205B B9 00         cmp al, 0
0316+  205D C6 70 20      je _strtoint_end
0317+  2060 6F 30         sub al, $30    ; make into integer
0318+  2062 22 00         mov ah, 0
0319+  2064 2A            mov b, [d]
0320+  2065 AC            mul a, b      ; result in B since it fits in 16bits
0321+  2066 11            mov a, b
0322+  2067 28            mov b, c
0323+  2068 54            add a, b
0324+  2069 39            mov c, a
0325+  206A 63 02 00      sub d, 2
0326+  206D 0A 5A 20      jmp _strtoint_L0
0327+  2070             _strtoint_end:
0328+  2070 12            mov a, c
0329+  2071 E7            pop d
0330+  2072 E6            pop c
0331+  2073 E5            pop b
0332+  2074 EF            pop si
0333+  2075 09            ret
0334+  2076             
0335+  2076             ;-----------------------------------------------------------------------------
0336+  2076             ; PRINT NULL TERMINATED STRING
0337+  2076             ; pointer in D
0338+  2076             ;-----------------------------------------------------------------------------
0339+  2076             _puts:
0340+  2076 D7            push a
0341+  2077 DA            push d
0342+  2078             _puts_L1:
0343+  2078 1E            mov al, [d]
0344+  2079 B9 00         cmp al, 0
0345+  207B C6 87 20      jz _puts_END
0346+  207E 23            mov ah, al
0347+  207F 19 00         mov al, 0
0348+  2081 05 03         syscall sys_io
0349+  2083 79            inc d
0350+  2084 0A 78 20      jmp _puts_L1
0351+  2087             _puts_END:
0352+  2087 E7            pop d
0353+  2088 E4            pop a
0354+  2089 09            ret
0355+  208A             
0356+  208A             ;-----------------------------------------------------------------------------
0357+  208A             ; PRINT N SIZE STRING
0358+  208A             ; pointer in D
0359+  208A             ; size in C
0360+  208A             ;-----------------------------------------------------------------------------
0361+  208A             _putsn:
0362+  208A DB            push al
0363+  208B DA            push d
0364+  208C D9            push c
0365+  208D             _putsn_L0:
0366+  208D 1E            mov al, [d]
0367+  208E 23            mov ah, al
0368+  208F 19 00         mov al, 0
0369+  2091 05 03         syscall sys_io
0370+  2093 79            inc d
0371+  2094 7E            dec c  
0372+  2095 C2 00 00      cmp c, 0
0373+  2098 C7 8D 20      jne _putsn_L0
0374+  209B             _putsn_end:
0375+  209B E6            pop c
0376+  209C E7            pop d
0377+  209D E8            pop al
0378+  209E 09            ret
0379+  209F             
0380+  209F             ;-----------------------------------------------------------------------------
0381+  209F             ; print 16bit decimal number
0382+  209F             ; input number in A
0383+  209F             ;-----------------------------------------------------------------------------
0384+  209F             print_u16d:
0385+  209F D7            push a
0386+  20A0 D8            push b
0387+  20A1 26 10 27      mov b, 10000
0388+  20A4 AE            div a, b      ; get 10000's coeff.
0389+  20A5 07 C7 20      call print_number
0390+  20A8 11            mov a, b
0391+  20A9 26 E8 03      mov b, 1000
0392+  20AC AE            div a, b      ; get 1000's coeff.
0393+  20AD 07 C7 20      call print_number
0394+  20B0 11            mov a, b
0395+  20B1 26 64 00      mov b, 100
0396+  20B4 AE            div a, b
0397+  20B5 07 C7 20      call print_number
0398+  20B8 11            mov a, b
0399+  20B9 26 0A 00      mov b, 10
0400+  20BC AE            div a, b
0401+  20BD 07 C7 20      call print_number
0402+  20C0 1B            mov al, bl      ; 1's coeff in bl
0403+  20C1 07 C7 20      call print_number
0404+  20C4 E5            pop b
0405+  20C5 E4            pop a
0406+  20C6 09            ret
0407+  20C7             
0408+  20C7             ;-----------------------------------------------------------------------------
0409+  20C7             ; print AL
0410+  20C7             ;-----------------------------------------------------------------------------
0411+  20C7             print_number:
0412+  20C7 6A 30         add al, $30
0413+  20C9 23            mov ah, al
0414+  20CA 07 2C 1F      call _putchar
0415+  20CD 09            ret
0416+  20CE             
0417+  20CE             ;-----------------------------------------------------------------------------
0418+  20CE             ; PRINT 16BIT HEX INTEGER
0419+  20CE             ; integer value in reg B
0420+  20CE             ;-----------------------------------------------------------------------------
0421+  20CE             print_u16x:
0422+  20CE D7            push a
0423+  20CF D8            push b
0424+  20D0 DD            push bl
0425+  20D1 30            mov bl, bh
0426+  20D2 07 FA 1E      call _itoa        ; convert bh to char in A
0427+  20D5 2F            mov bl, al        ; save al
0428+  20D6 19 00         mov al, 0
0429+  20D8 05 03         syscall sys_io        ; display AH
0430+  20DA 24            mov ah, bl        ; retrieve al
0431+  20DB 19 00         mov al, 0
0432+  20DD 05 03         syscall sys_io        ; display AL
0433+  20DF             
0434+  20DF EA            pop bl
0435+  20E0 07 FA 1E      call _itoa        ; convert bh to char in A
0436+  20E3 2F            mov bl, al        ; save al
0437+  20E4 19 00         mov al, 0
0438+  20E6 05 03         syscall sys_io        ; display AH
0439+  20E8 24            mov ah, bl        ; retrieve al
0440+  20E9 19 00         mov al, 0
0441+  20EB 05 03         syscall sys_io        ; display AL
0442+  20ED             
0443+  20ED E5            pop b
0444+  20EE E4            pop a
0445+  20EF 09            ret
0446+  20F0             
0447+  20F0             ;-----------------------------------------------------------------------------
0448+  20F0             ; INPUT 16BIT HEX INTEGER
0449+  20F0             ; read 16bit integer into A
0450+  20F0             ;-----------------------------------------------------------------------------
0451+  20F0             scan_u16x:
0452+  20F0 F8 10 00      enter 16
0453+  20F3 D8            push b
0454+  20F4 DA            push d
0455+  20F5             
0456+  20F5 FA F1 FF      lea d, [bp + -15]
0457+  20F8 07 33 1F      call _gets        ; get number
0458+  20FB             
0459+  20FB 32            mov bl, [d]
0460+  20FC 37            mov bh, bl
0461+  20FD 33 01 00      mov bl, [d + 1]
0462+  2100 07 EA 1E      call _atoi        ; convert to int in AL
0463+  2103 23            mov ah, al        ; move to AH
0464+  2104             
0465+  2104 33 02 00      mov bl, [d + 2]
0466+  2107 37            mov bh, bl
0467+  2108 33 03 00      mov bl, [d + 3]
0468+  210B 07 EA 1E      call _atoi        ; convert to int in AL
0469+  210E             
0470+  210E E7            pop d
0471+  210F E5            pop b
0472+  2110 F9            leave
0473+  2111 09            ret
0474+  2112             
0475+  2112             ;-----------------------------------------------------------------------------
0476+  2112             ; PRINT 8bit HEX INTEGER
0477+  2112             ; integer value in reg bl
0478+  2112             ;-----------------------------------------------------------------------------
0479+  2112             print_u8x:
0480+  2112 D7            push a
0481+  2113 DD            push bl
0482+  2114             
0483+  2114 07 FA 1E      call _itoa        ; convert bl to char in A
0484+  2117 2F            mov bl, al        ; save al
0485+  2118 19 00         mov al, 0
0486+  211A 05 03         syscall sys_io        ; display AH
0487+  211C 24            mov ah, bl        ; retrieve al
0488+  211D 19 00         mov al, 0
0489+  211F 05 03         syscall sys_io        ; display AL
0490+  2121             
0491+  2121 EA            pop bl
0492+  2122 E4            pop a
0493+  2123 09            ret
0494+  2124             
0495+  2124             ;-----------------------------------------------------------------------------
0496+  2124             ; print 8bit decimal unsigned number
0497+  2124             ; input number in AL
0498+  2124             ;-----------------------------------------------------------------------------
0499+  2124             print_u8d:
0500+  2124 D7            push a
0501+  2125 D8            push b
0502+  2126             
0503+  2126 22 00         mov ah, 0
0504+  2128 26 64 00      mov b, 100
0505+  212B AE            div a, b
0506+  212C D8            push b      ; save remainder
0507+  212D B9 00         cmp al, 0
0508+  212F C6 39 21      je skip100
0509+  2132 6A 30         add al, $30
0510+  2134 23            mov ah, al
0511+  2135 19 00         mov al, 0
0512+  2137 05 03         syscall sys_io  ; print coeff
0513+  2139             skip100:
0514+  2139 E4            pop a
0515+  213A 22 00         mov ah, 0
0516+  213C 26 0A 00      mov b, 10
0517+  213F AE            div a, b
0518+  2140 D8            push b      ; save remainder
0519+  2141 B9 00         cmp al, 0
0520+  2143 C6 4D 21      je skip10
0521+  2146 6A 30         add al, $30
0522+  2148 23            mov ah, al
0523+  2149 19 00         mov al, 0
0524+  214B 05 03         syscall sys_io  ; print coeff
0525+  214D             skip10:
0526+  214D E4            pop a
0527+  214E 1B            mov al, bl
0528+  214F 6A 30         add al, $30
0529+  2151 23            mov ah, al
0530+  2152 19 00         mov al, 0
0531+  2154 05 03         syscall sys_io  ; print coeff
0532+  2156 E5            pop b
0533+  2157 E4            pop a
0534+  2158 09            ret
0535+  2159             
0536+  2159             ;-----------------------------------------------------------------------------
0537+  2159             ; INPUT 8BIT HEX INTEGER
0538+  2159             ; read 8bit integer into AL
0539+  2159             ;-----------------------------------------------------------------------------
0540+  2159             scan_u8x:
0541+  2159 F8 04 00      enter 4
0542+  215C D8            push b
0543+  215D DA            push d
0544+  215E             
0545+  215E FA FD FF      lea d, [bp + -3]
0546+  2161 07 33 1F      call _gets        ; get number
0547+  2164             
0548+  2164 32            mov bl, [d]
0549+  2165 37            mov bh, bl
0550+  2166 33 01 00      mov bl, [d + 1]
0551+  2169 07 EA 1E      call _atoi        ; convert to int in AL
0552+  216C             
0553+  216C E7            pop d
0554+  216D E5            pop b
0555+  216E F9            leave
0556+  216F 09            ret
0557+  2170             
0558+  2170             ;-----------------------------------------------------------------------------
0559+  2170             ; input decimal number
0560+  2170             ; result in A
0561+  2170             ; 655'\0'
0562+  2170             ; low--------high
0563+  2170             ;-----------------------------------------------------------------------------
0564+  2170             scan_u16d:
0565+  2170 F8 08 00      enter 8
0566+  2173 E2            push si
0567+  2174 D8            push b
0568+  2175 D9            push c
0569+  2176 DA            push d
0570+  2177 FA F9 FF      lea d, [bp +- 7]
0571+  217A 07 33 1F      call _gets
0572+  217D 07 8C 1E      call _strlen      ; get string length in C
0573+  2180 7E            dec c
0574+  2181 FD 4E         mov si, d
0575+  2183 12            mov a, c
0576+  2184 FD 99         shl a
0577+  2186 3B C2 21      mov d, table_power
0578+  2189 59            add d, a
0579+  218A 38 00 00      mov c, 0
0580+  218D             mul_loop:
0581+  218D F6            lodsb      ; load ASCII to al
0582+  218E B9 00         cmp al, 0
0583+  2190 C6 A3 21      je mul_exit
0584+  2193 6F 30         sub al, $30    ; make into integer
0585+  2195 22 00         mov ah, 0
0586+  2197 2A            mov b, [d]
0587+  2198 AC            mul a, b      ; result in B since it fits in 16bits
0588+  2199 11            mov a, b
0589+  219A 28            mov b, c
0590+  219B 54            add a, b
0591+  219C 39            mov c, a
0592+  219D 63 02 00      sub d, 2
0593+  21A0 0A 8D 21      jmp mul_loop
0594+  21A3             mul_exit:
0595+  21A3 12            mov a, c
0596+  21A4 E7            pop d
0597+  21A5 E6            pop c
0598+  21A6 E5            pop b
0599+  21A7 EF            pop si
0600+  21A8 F9            leave
0601+  21A9 09            ret
0602+  21AA             
0603+  21AA 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  21AE 34 35 36 37 
0603+  21B2 38 39 41 42 
0603+  21B6 43 44 45 46 
0604+  21BA 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  21BE 1B 5B 48 00 
0605+  21C2             
0606+  21C2             table_power:
0607+  21C2 01 00         .dw 1
0608+  21C4 0A 00         .dw 10
0609+  21C6 64 00         .dw 100
0610+  21C8 E8 03         .dw 1000
0611+  21CA 10 27         .dw 100004281   21CC             ; --- END INLINE ASM SEGMENT
4282   21CC             
4283   21CC F9            leave
4284   21CD 09            ret
4285   21CE             
4286   21CE             base64_encode:
4287   21CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
4288   21D1             ; int i = 0; 
4289   21D1 52 02 00      sub sp, 2
4290   21D4             ; --- START LOCAL VAR INITIALIZATION
4291   21D4 FA FF FF      lea d, [bp + -1] ; $i
4292   21D7 DA            push d
4293   21D8 FD 2E 00 00   mov32 cb, $00000000
4293   21DC 00 00 
4294   21DE E7            pop d
4295   21DF FD 43         mov [d], b
4296   21E1             ; --- END LOCAL VAR INITIALIZATION
4297   21E1             ; int j = 0; 
4298   21E1 52 02 00      sub sp, 2
4299   21E4             ; --- START LOCAL VAR INITIALIZATION
4300   21E4 FA FD FF      lea d, [bp + -3] ; $j
4301   21E7 DA            push d
4302   21E8 FD 2E 00 00   mov32 cb, $00000000
4302   21EC 00 00 
4303   21EE E7            pop d
4304   21EF FD 43         mov [d], b
4305   21F1             ; --- END LOCAL VAR INITIALIZATION
4306   21F1             ; int k; 
4307   21F1 52 02 00      sub sp, 2
4308   21F4             ; int input_len; 
4309   21F4 52 02 00      sub sp, 2
4310   21F7             ; unsigned char input_buffer[3]; 
4311   21F7 52 03 00      sub sp, 3
4312   21FA             ; unsigned char output_buffer[4]; 
4313   21FA 52 04 00      sub sp, 4
4314   21FD             ; input_len = strlen(input); 
4315   21FD FA F9 FF      lea d, [bp + -7] ; $input_len
4316   2200 DA            push d
4317   2201             ; --- START FUNCTION CALL
4318   2201 FA 05 00      lea d, [bp + 5] ; $input
4319   2204 2A            mov b, [d]
4320   2205 38 00 00      mov c, 0
4321   2208 FD AB         swp b
4322   220A D8            push b
4323   220B 07 79 06      call strlen
4324   220E 51 02 00      add sp, 2
4325   2211             ; --- END FUNCTION CALL
4326   2211 E7            pop d
4327   2212 FD 43         mov [d], b
4328   2214             ; while (input_len--) { 
4329   2214             _while56_cond:
4330   2214 FA F9 FF      lea d, [bp + -7] ; $input_len
4331   2217 2A            mov b, [d]
4332   2218 38 00 00      mov c, 0
4333   221B 11            mov a, b
4334   221C FD 7D         dec b
4335   221E FA F9 FF      lea d, [bp + -7] ; $input_len
4336   2221 FD 43         mov [d], b
4337   2223 27            mov b, a
4338   2224 C0 00 00      cmp b, 0
4339   2227 C6 56 24      je _while56_exit
4340   222A             _while56_block:
4341   222A             ; input_buffer[i++] = *(input++); 
4342   222A FA F6 FF      lea d, [bp + -10] ; $input_buffer
4343   222D D7            push a
4344   222E DA            push d
4345   222F FA FF FF      lea d, [bp + -1] ; $i
4346   2232 2A            mov b, [d]
4347   2233 38 00 00      mov c, 0
4348   2236 11            mov a, b
4349   2237 FD 77         inc b
4350   2239 FA FF FF      lea d, [bp + -1] ; $i
4351   223C FD 43         mov [d], b
4352   223E 27            mov b, a
4353   223F E7            pop d
4354   2240 5A            add d, b
4355   2241 E4            pop a
4356   2242 DA            push d
4357   2243 FA 05 00      lea d, [bp + 5] ; $input
4358   2246 2A            mov b, [d]
4359   2247 38 00 00      mov c, 0
4360   224A FD 77         inc b
4361   224C FA 05 00      lea d, [bp + 5] ; $input
4362   224F FD 43         mov [d], b
4363   2251 FD 7D         dec b
4364   2253 74            mov d, b
4365   2254 32            mov bl, [d]
4366   2255 A7 00         mov bh, 0
4367   2257 38 00 00      mov c, 0
4368   225A E7            pop d
4369   225B FD 3E         mov [d], bl
4370   225D             ; if (i == 3) { 
4371   225D             _if57_cond:
4372   225D FA FF FF      lea d, [bp + -1] ; $i
4373   2260 2A            mov b, [d]
4374   2261 38 00 00      mov c, 0
4375   2264             ; --- START RELATIONAL
4376   2264 D7            push a
4377   2265 11            mov a, b
4378   2266 FD 2E 03 00   mov32 cb, $00000003
4378   226A 00 00 
4379   226C B0            cmp a, b
4380   226D FD 71         seq ; ==
4381   226F E4            pop a
4382   2270             ; --- END RELATIONAL
4383   2270 C0 00 00      cmp b, 0
4384   2273 C6 53 24      je _if57_exit
4385   2276             _if57_TRUE:
4386   2276             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
4387   2276 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4388   2279 D7            push a
4389   227A DA            push d
4390   227B FD 2E 00 00   mov32 cb, $00000000
4390   227F 00 00 
4391   2281 E7            pop d
4392   2282 5A            add d, b
4393   2283 E4            pop a
4394   2284 DA            push d
4395   2285 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4396   2288 D7            push a
4397   2289 DA            push d
4398   228A FD 2E 00 00   mov32 cb, $00000000
4398   228E 00 00 
4399   2290 E7            pop d
4400   2291 5A            add d, b
4401   2292 E4            pop a
4402   2293 32            mov bl, [d]
4403   2294 A7 00         mov bh, 0
4404   2296 38 00 00      mov c, 0
4405   2299 D7            push a
4406   229A 11            mov a, b
4407   229B FD 2E FC 00   mov32 cb, $000000fc
4407   229F 00 00 
4408   22A1 FD 92         and b, a ; &
4409   22A3 E4            pop a
4410   22A4             ; --- START SHIFT
4411   22A4 D7            push a
4412   22A5 11            mov a, b
4413   22A6 FD 2E 02 00   mov32 cb, $00000002
4413   22AA 00 00 
4414   22AC FD 39         mov c, b
4415   22AE A5            ashr a, cl
4416   22AF 27            mov b, a
4417   22B0 E4            pop a
4418   22B1             ; --- END SHIFT
4419   22B1 E7            pop d
4420   22B2 FD 3E         mov [d], bl
4421   22B4             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
4422   22B4 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4423   22B7 D7            push a
4424   22B8 DA            push d
4425   22B9 FD 2E 01 00   mov32 cb, $00000001
4425   22BD 00 00 
4426   22BF E7            pop d
4427   22C0 5A            add d, b
4428   22C1 E4            pop a
4429   22C2 DA            push d
4430   22C3 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4431   22C6 D7            push a
4432   22C7 DA            push d
4433   22C8 FD 2E 00 00   mov32 cb, $00000000
4433   22CC 00 00 
4434   22CE E7            pop d
4435   22CF 5A            add d, b
4436   22D0 E4            pop a
4437   22D1 32            mov bl, [d]
4438   22D2 A7 00         mov bh, 0
4439   22D4 38 00 00      mov c, 0
4440   22D7 D7            push a
4441   22D8 11            mov a, b
4442   22D9 FD 2E 03 00   mov32 cb, $00000003
4442   22DD 00 00 
4443   22DF FD 92         and b, a ; &
4444   22E1 E4            pop a
4445   22E2             ; --- START SHIFT
4446   22E2 D7            push a
4447   22E3 11            mov a, b
4448   22E4 FD 2E 04 00   mov32 cb, $00000004
4448   22E8 00 00 
4449   22EA FD 39         mov c, b
4450   22EC 9D            shl a, cl
4451   22ED 27            mov b, a
4452   22EE E4            pop a
4453   22EF             ; --- END SHIFT
4454   22EF             ; --- START TERMS
4455   22EF D7            push a
4456   22F0 11            mov a, b
4457   22F1 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4458   22F4 D7            push a
4459   22F5 DA            push d
4460   22F6 FD 2E 01 00   mov32 cb, $00000001
4460   22FA 00 00 
4461   22FC E7            pop d
4462   22FD 5A            add d, b
4463   22FE E4            pop a
4464   22FF 32            mov bl, [d]
4465   2300 A7 00         mov bh, 0
4466   2302 38 00 00      mov c, 0
4467   2305 D7            push a
4468   2306 11            mov a, b
4469   2307 FD 2E F0 00   mov32 cb, $000000f0
4469   230B 00 00 
4470   230D FD 92         and b, a ; &
4471   230F E4            pop a
4472   2310             ; --- START SHIFT
4473   2310 D7            push a
4474   2311 11            mov a, b
4475   2312 FD 2E 04 00   mov32 cb, $00000004
4475   2316 00 00 
4476   2318 FD 39         mov c, b
4477   231A A5            ashr a, cl
4478   231B 27            mov b, a
4479   231C E4            pop a
4480   231D             ; --- END SHIFT
4481   231D 56            add b, a
4482   231E E4            pop a
4483   231F             ; --- END TERMS
4484   231F E7            pop d
4485   2320 FD 3E         mov [d], bl
4486   2322             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
4487   2322 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4488   2325 D7            push a
4489   2326 DA            push d
4490   2327 FD 2E 02 00   mov32 cb, $00000002
4490   232B 00 00 
4491   232D E7            pop d
4492   232E 5A            add d, b
4493   232F E4            pop a
4494   2330 DA            push d
4495   2331 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4496   2334 D7            push a
4497   2335 DA            push d
4498   2336 FD 2E 01 00   mov32 cb, $00000001
4498   233A 00 00 
4499   233C E7            pop d
4500   233D 5A            add d, b
4501   233E E4            pop a
4502   233F 32            mov bl, [d]
4503   2340 A7 00         mov bh, 0
4504   2342 38 00 00      mov c, 0
4505   2345 D7            push a
4506   2346 11            mov a, b
4507   2347 FD 2E 0F 00   mov32 cb, $0000000f
4507   234B 00 00 
4508   234D FD 92         and b, a ; &
4509   234F E4            pop a
4510   2350             ; --- START SHIFT
4511   2350 D7            push a
4512   2351 11            mov a, b
4513   2352 FD 2E 02 00   mov32 cb, $00000002
4513   2356 00 00 
4514   2358 FD 39         mov c, b
4515   235A 9D            shl a, cl
4516   235B 27            mov b, a
4517   235C E4            pop a
4518   235D             ; --- END SHIFT
4519   235D             ; --- START TERMS
4520   235D D7            push a
4521   235E 11            mov a, b
4522   235F FA F6 FF      lea d, [bp + -10] ; $input_buffer
4523   2362 D7            push a
4524   2363 DA            push d
4525   2364 FD 2E 02 00   mov32 cb, $00000002
4525   2368 00 00 
4526   236A E7            pop d
4527   236B 5A            add d, b
4528   236C E4            pop a
4529   236D 32            mov bl, [d]
4530   236E A7 00         mov bh, 0
4531   2370 38 00 00      mov c, 0
4532   2373 D7            push a
4533   2374 11            mov a, b
4534   2375 FD 2E C0 00   mov32 cb, $000000c0
4534   2379 00 00 
4535   237B FD 92         and b, a ; &
4536   237D E4            pop a
4537   237E             ; --- START SHIFT
4538   237E D7            push a
4539   237F 11            mov a, b
4540   2380 FD 2E 06 00   mov32 cb, $00000006
4540   2384 00 00 
4541   2386 FD 39         mov c, b
4542   2388 A5            ashr a, cl
4543   2389 27            mov b, a
4544   238A E4            pop a
4545   238B             ; --- END SHIFT
4546   238B 56            add b, a
4547   238C E4            pop a
4548   238D             ; --- END TERMS
4549   238D E7            pop d
4550   238E FD 3E         mov [d], bl
4551   2390             ; output_buffer[3] = input_buffer[2] & 0x3F; 
4552   2390 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4553   2393 D7            push a
4554   2394 DA            push d
4555   2395 FD 2E 03 00   mov32 cb, $00000003
4555   2399 00 00 
4556   239B E7            pop d
4557   239C 5A            add d, b
4558   239D E4            pop a
4559   239E DA            push d
4560   239F FA F6 FF      lea d, [bp + -10] ; $input_buffer
4561   23A2 D7            push a
4562   23A3 DA            push d
4563   23A4 FD 2E 02 00   mov32 cb, $00000002
4563   23A8 00 00 
4564   23AA E7            pop d
4565   23AB 5A            add d, b
4566   23AC E4            pop a
4567   23AD 32            mov bl, [d]
4568   23AE A7 00         mov bh, 0
4569   23B0 38 00 00      mov c, 0
4570   23B3 D7            push a
4571   23B4 11            mov a, b
4572   23B5 FD 2E 3F 00   mov32 cb, $0000003f
4572   23B9 00 00 
4573   23BB FD 92         and b, a ; &
4574   23BD E4            pop a
4575   23BE E7            pop d
4576   23BF FD 3E         mov [d], bl
4577   23C1             ; for (i = 0; i < 4; i++) { 
4578   23C1             _for58_init:
4579   23C1 FA FF FF      lea d, [bp + -1] ; $i
4580   23C4 DA            push d
4581   23C5 FD 2E 00 00   mov32 cb, $00000000
4581   23C9 00 00 
4582   23CB E7            pop d
4583   23CC FD 43         mov [d], b
4584   23CE             _for58_cond:
4585   23CE FA FF FF      lea d, [bp + -1] ; $i
4586   23D1 2A            mov b, [d]
4587   23D2 38 00 00      mov c, 0
4588   23D5             ; --- START RELATIONAL
4589   23D5 D7            push a
4590   23D6 11            mov a, b
4591   23D7 FD 2E 04 00   mov32 cb, $00000004
4591   23DB 00 00 
4592   23DD B0            cmp a, b
4593   23DE FD 73         slt ; < (signed)
4594   23E0 E4            pop a
4595   23E1             ; --- END RELATIONAL
4596   23E1 C0 00 00      cmp b, 0
4597   23E4 C6 43 24      je _for58_exit
4598   23E7             _for58_block:
4599   23E7             ; output[j++] = base64_table[output_buffer[i]]; 
4600   23E7 FA 07 00      lea d, [bp + 7] ; $output
4601   23EA FD 2A         mov d, [d]
4602   23EC D7            push a
4603   23ED DA            push d
4604   23EE FA FD FF      lea d, [bp + -3] ; $j
4605   23F1 2A            mov b, [d]
4606   23F2 38 00 00      mov c, 0
4607   23F5 11            mov a, b
4608   23F6 FD 77         inc b
4609   23F8 FA FD FF      lea d, [bp + -3] ; $j
4610   23FB FD 43         mov [d], b
4611   23FD 27            mov b, a
4612   23FE E7            pop d
4613   23FF FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4614   2403 E4            pop a
4615   2404 DA            push d
4616   2405 3B C6 2D      mov d, _base64_table ; $base64_table
4617   2408 FD 2A         mov d, [d]
4618   240A D7            push a
4619   240B DA            push d
4620   240C FA F2 FF      lea d, [bp + -14] ; $output_buffer
4621   240F D7            push a
4622   2410 DA            push d
4623   2411 FA FF FF      lea d, [bp + -1] ; $i
4624   2414 2A            mov b, [d]
4625   2415 38 00 00      mov c, 0
4626   2418 E7            pop d
4627   2419 5A            add d, b
4628   241A E4            pop a
4629   241B 32            mov bl, [d]
4630   241C A7 00         mov bh, 0
4631   241E 38 00 00      mov c, 0
4632   2421 E7            pop d
4633   2422 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4634   2426 E4            pop a
4635   2427 32            mov bl, [d]
4636   2428 A7 00         mov bh, 0
4637   242A 38 00 00      mov c, 0
4638   242D E7            pop d
4639   242E FD 3E         mov [d], bl
4640   2430             _for58_update:
4641   2430 FA FF FF      lea d, [bp + -1] ; $i
4642   2433 2A            mov b, [d]
4643   2434 38 00 00      mov c, 0
4644   2437 11            mov a, b
4645   2438 FD 77         inc b
4646   243A FA FF FF      lea d, [bp + -1] ; $i
4647   243D FD 43         mov [d], b
4648   243F 27            mov b, a
4649   2440 0A CE 23      jmp _for58_cond
4650   2443             _for58_exit:
4651   2443             ; i = 0; 
4652   2443 FA FF FF      lea d, [bp + -1] ; $i
4653   2446 DA            push d
4654   2447 FD 2E 00 00   mov32 cb, $00000000
4654   244B 00 00 
4655   244D E7            pop d
4656   244E FD 43         mov [d], b
4657   2450 0A 53 24      jmp _if57_exit
4658   2453             _if57_exit:
4659   2453 0A 14 22      jmp _while56_cond
4660   2456             _while56_exit:
4661   2456             ; if (i) { 
4662   2456             _if59_cond:
4663   2456 FA FF FF      lea d, [bp + -1] ; $i
4664   2459 2A            mov b, [d]
4665   245A 38 00 00      mov c, 0
4666   245D C0 00 00      cmp b, 0
4667   2460 C6 AC 26      je _if59_exit
4668   2463             _if59_TRUE:
4669   2463             ; for (k = i; k < 3; k++) { 
4670   2463             _for60_init:
4671   2463 FA FB FF      lea d, [bp + -5] ; $k
4672   2466 DA            push d
4673   2467 FA FF FF      lea d, [bp + -1] ; $i
4674   246A 2A            mov b, [d]
4675   246B 38 00 00      mov c, 0
4676   246E E7            pop d
4677   246F FD 43         mov [d], b
4678   2471             _for60_cond:
4679   2471 FA FB FF      lea d, [bp + -5] ; $k
4680   2474 2A            mov b, [d]
4681   2475 38 00 00      mov c, 0
4682   2478             ; --- START RELATIONAL
4683   2478 D7            push a
4684   2479 11            mov a, b
4685   247A FD 2E 03 00   mov32 cb, $00000003
4685   247E 00 00 
4686   2480 B0            cmp a, b
4687   2481 FD 73         slt ; < (signed)
4688   2483 E4            pop a
4689   2484             ; --- END RELATIONAL
4690   2484 C0 00 00      cmp b, 0
4691   2487 C6 B6 24      je _for60_exit
4692   248A             _for60_block:
4693   248A             ; input_buffer[k] = '\0'; 
4694   248A FA F6 FF      lea d, [bp + -10] ; $input_buffer
4695   248D D7            push a
4696   248E DA            push d
4697   248F FA FB FF      lea d, [bp + -5] ; $k
4698   2492 2A            mov b, [d]
4699   2493 38 00 00      mov c, 0
4700   2496 E7            pop d
4701   2497 5A            add d, b
4702   2498 E4            pop a
4703   2499 DA            push d
4704   249A FD 2E 00 00   mov32 cb, $00000000
4704   249E 00 00 
4705   24A0 E7            pop d
4706   24A1 FD 3E         mov [d], bl
4707   24A3             _for60_update:
4708   24A3 FA FB FF      lea d, [bp + -5] ; $k
4709   24A6 2A            mov b, [d]
4710   24A7 38 00 00      mov c, 0
4711   24AA 11            mov a, b
4712   24AB FD 77         inc b
4713   24AD FA FB FF      lea d, [bp + -5] ; $k
4714   24B0 FD 43         mov [d], b
4715   24B2 27            mov b, a
4716   24B3 0A 71 24      jmp _for60_cond
4717   24B6             _for60_exit:
4718   24B6             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
4719   24B6 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4720   24B9 D7            push a
4721   24BA DA            push d
4722   24BB FD 2E 00 00   mov32 cb, $00000000
4722   24BF 00 00 
4723   24C1 E7            pop d
4724   24C2 5A            add d, b
4725   24C3 E4            pop a
4726   24C4 DA            push d
4727   24C5 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4728   24C8 D7            push a
4729   24C9 DA            push d
4730   24CA FD 2E 00 00   mov32 cb, $00000000
4730   24CE 00 00 
4731   24D0 E7            pop d
4732   24D1 5A            add d, b
4733   24D2 E4            pop a
4734   24D3 32            mov bl, [d]
4735   24D4 A7 00         mov bh, 0
4736   24D6 38 00 00      mov c, 0
4737   24D9 D7            push a
4738   24DA 11            mov a, b
4739   24DB FD 2E FC 00   mov32 cb, $000000fc
4739   24DF 00 00 
4740   24E1 FD 92         and b, a ; &
4741   24E3 E4            pop a
4742   24E4             ; --- START SHIFT
4743   24E4 D7            push a
4744   24E5 11            mov a, b
4745   24E6 FD 2E 02 00   mov32 cb, $00000002
4745   24EA 00 00 
4746   24EC FD 39         mov c, b
4747   24EE A5            ashr a, cl
4748   24EF 27            mov b, a
4749   24F0 E4            pop a
4750   24F1             ; --- END SHIFT
4751   24F1 E7            pop d
4752   24F2 FD 3E         mov [d], bl
4753   24F4             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
4754   24F4 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4755   24F7 D7            push a
4756   24F8 DA            push d
4757   24F9 FD 2E 01 00   mov32 cb, $00000001
4757   24FD 00 00 
4758   24FF E7            pop d
4759   2500 5A            add d, b
4760   2501 E4            pop a
4761   2502 DA            push d
4762   2503 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4763   2506 D7            push a
4764   2507 DA            push d
4765   2508 FD 2E 00 00   mov32 cb, $00000000
4765   250C 00 00 
4766   250E E7            pop d
4767   250F 5A            add d, b
4768   2510 E4            pop a
4769   2511 32            mov bl, [d]
4770   2512 A7 00         mov bh, 0
4771   2514 38 00 00      mov c, 0
4772   2517 D7            push a
4773   2518 11            mov a, b
4774   2519 FD 2E 03 00   mov32 cb, $00000003
4774   251D 00 00 
4775   251F FD 92         and b, a ; &
4776   2521 E4            pop a
4777   2522             ; --- START SHIFT
4778   2522 D7            push a
4779   2523 11            mov a, b
4780   2524 FD 2E 04 00   mov32 cb, $00000004
4780   2528 00 00 
4781   252A FD 39         mov c, b
4782   252C 9D            shl a, cl
4783   252D 27            mov b, a
4784   252E E4            pop a
4785   252F             ; --- END SHIFT
4786   252F             ; --- START TERMS
4787   252F D7            push a
4788   2530 11            mov a, b
4789   2531 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4790   2534 D7            push a
4791   2535 DA            push d
4792   2536 FD 2E 01 00   mov32 cb, $00000001
4792   253A 00 00 
4793   253C E7            pop d
4794   253D 5A            add d, b
4795   253E E4            pop a
4796   253F 32            mov bl, [d]
4797   2540 A7 00         mov bh, 0
4798   2542 38 00 00      mov c, 0
4799   2545 D7            push a
4800   2546 11            mov a, b
4801   2547 FD 2E F0 00   mov32 cb, $000000f0
4801   254B 00 00 
4802   254D FD 92         and b, a ; &
4803   254F E4            pop a
4804   2550             ; --- START SHIFT
4805   2550 D7            push a
4806   2551 11            mov a, b
4807   2552 FD 2E 04 00   mov32 cb, $00000004
4807   2556 00 00 
4808   2558 FD 39         mov c, b
4809   255A A5            ashr a, cl
4810   255B 27            mov b, a
4811   255C E4            pop a
4812   255D             ; --- END SHIFT
4813   255D 56            add b, a
4814   255E E4            pop a
4815   255F             ; --- END TERMS
4816   255F E7            pop d
4817   2560 FD 3E         mov [d], bl
4818   2562             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
4819   2562 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4820   2565 D7            push a
4821   2566 DA            push d
4822   2567 FD 2E 02 00   mov32 cb, $00000002
4822   256B 00 00 
4823   256D E7            pop d
4824   256E 5A            add d, b
4825   256F E4            pop a
4826   2570 DA            push d
4827   2571 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4828   2574 D7            push a
4829   2575 DA            push d
4830   2576 FD 2E 01 00   mov32 cb, $00000001
4830   257A 00 00 
4831   257C E7            pop d
4832   257D 5A            add d, b
4833   257E E4            pop a
4834   257F 32            mov bl, [d]
4835   2580 A7 00         mov bh, 0
4836   2582 38 00 00      mov c, 0
4837   2585 D7            push a
4838   2586 11            mov a, b
4839   2587 FD 2E 0F 00   mov32 cb, $0000000f
4839   258B 00 00 
4840   258D FD 92         and b, a ; &
4841   258F E4            pop a
4842   2590             ; --- START SHIFT
4843   2590 D7            push a
4844   2591 11            mov a, b
4845   2592 FD 2E 02 00   mov32 cb, $00000002
4845   2596 00 00 
4846   2598 FD 39         mov c, b
4847   259A 9D            shl a, cl
4848   259B 27            mov b, a
4849   259C E4            pop a
4850   259D             ; --- END SHIFT
4851   259D             ; --- START TERMS
4852   259D D7            push a
4853   259E 11            mov a, b
4854   259F FA F6 FF      lea d, [bp + -10] ; $input_buffer
4855   25A2 D7            push a
4856   25A3 DA            push d
4857   25A4 FD 2E 02 00   mov32 cb, $00000002
4857   25A8 00 00 
4858   25AA E7            pop d
4859   25AB 5A            add d, b
4860   25AC E4            pop a
4861   25AD 32            mov bl, [d]
4862   25AE A7 00         mov bh, 0
4863   25B0 38 00 00      mov c, 0
4864   25B3 D7            push a
4865   25B4 11            mov a, b
4866   25B5 FD 2E C0 00   mov32 cb, $000000c0
4866   25B9 00 00 
4867   25BB FD 92         and b, a ; &
4868   25BD E4            pop a
4869   25BE             ; --- START SHIFT
4870   25BE D7            push a
4871   25BF 11            mov a, b
4872   25C0 FD 2E 06 00   mov32 cb, $00000006
4872   25C4 00 00 
4873   25C6 FD 39         mov c, b
4874   25C8 A5            ashr a, cl
4875   25C9 27            mov b, a
4876   25CA E4            pop a
4877   25CB             ; --- END SHIFT
4878   25CB 56            add b, a
4879   25CC E4            pop a
4880   25CD             ; --- END TERMS
4881   25CD E7            pop d
4882   25CE FD 3E         mov [d], bl
4883   25D0             ; for (k = 0; k < i + 1; k++) { 
4884   25D0             _for61_init:
4885   25D0 FA FB FF      lea d, [bp + -5] ; $k
4886   25D3 DA            push d
4887   25D4 FD 2E 00 00   mov32 cb, $00000000
4887   25D8 00 00 
4888   25DA E7            pop d
4889   25DB FD 43         mov [d], b
4890   25DD             _for61_cond:
4891   25DD FA FB FF      lea d, [bp + -5] ; $k
4892   25E0 2A            mov b, [d]
4893   25E1 38 00 00      mov c, 0
4894   25E4             ; --- START RELATIONAL
4895   25E4 D7            push a
4896   25E5 11            mov a, b
4897   25E6 FA FF FF      lea d, [bp + -1] ; $i
4898   25E9 2A            mov b, [d]
4899   25EA 38 00 00      mov c, 0
4900   25ED             ; --- START TERMS
4901   25ED D7            push a
4902   25EE 11            mov a, b
4903   25EF FD 2E 01 00   mov32 cb, $00000001
4903   25F3 00 00 
4904   25F5 56            add b, a
4905   25F6 E4            pop a
4906   25F7             ; --- END TERMS
4907   25F7 B0            cmp a, b
4908   25F8 FD 73         slt ; < (signed)
4909   25FA E4            pop a
4910   25FB             ; --- END RELATIONAL
4911   25FB C0 00 00      cmp b, 0
4912   25FE C6 5D 26      je _for61_exit
4913   2601             _for61_block:
4914   2601             ; output[j++] = base64_table[output_buffer[k]]; 
4915   2601 FA 07 00      lea d, [bp + 7] ; $output
4916   2604 FD 2A         mov d, [d]
4917   2606 D7            push a
4918   2607 DA            push d
4919   2608 FA FD FF      lea d, [bp + -3] ; $j
4920   260B 2A            mov b, [d]
4921   260C 38 00 00      mov c, 0
4922   260F 11            mov a, b
4923   2610 FD 77         inc b
4924   2612 FA FD FF      lea d, [bp + -3] ; $j
4925   2615 FD 43         mov [d], b
4926   2617 27            mov b, a
4927   2618 E7            pop d
4928   2619 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4929   261D E4            pop a
4930   261E DA            push d
4931   261F 3B C6 2D      mov d, _base64_table ; $base64_table
4932   2622 FD 2A         mov d, [d]
4933   2624 D7            push a
4934   2625 DA            push d
4935   2626 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4936   2629 D7            push a
4937   262A DA            push d
4938   262B FA FB FF      lea d, [bp + -5] ; $k
4939   262E 2A            mov b, [d]
4940   262F 38 00 00      mov c, 0
4941   2632 E7            pop d
4942   2633 5A            add d, b
4943   2634 E4            pop a
4944   2635 32            mov bl, [d]
4945   2636 A7 00         mov bh, 0
4946   2638 38 00 00      mov c, 0
4947   263B E7            pop d
4948   263C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4949   2640 E4            pop a
4950   2641 32            mov bl, [d]
4951   2642 A7 00         mov bh, 0
4952   2644 38 00 00      mov c, 0
4953   2647 E7            pop d
4954   2648 FD 3E         mov [d], bl
4955   264A             _for61_update:
4956   264A FA FB FF      lea d, [bp + -5] ; $k
4957   264D 2A            mov b, [d]
4958   264E 38 00 00      mov c, 0
4959   2651 11            mov a, b
4960   2652 FD 77         inc b
4961   2654 FA FB FF      lea d, [bp + -5] ; $k
4962   2657 FD 43         mov [d], b
4963   2659 27            mov b, a
4964   265A 0A DD 25      jmp _for61_cond
4965   265D             _for61_exit:
4966   265D             ; while (i++ < 3) { 
4967   265D             _while62_cond:
4968   265D FA FF FF      lea d, [bp + -1] ; $i
4969   2660 2A            mov b, [d]
4970   2661 38 00 00      mov c, 0
4971   2664 11            mov a, b
4972   2665 FD 77         inc b
4973   2667 FA FF FF      lea d, [bp + -1] ; $i
4974   266A FD 43         mov [d], b
4975   266C 27            mov b, a
4976   266D             ; --- START RELATIONAL
4977   266D D7            push a
4978   266E 11            mov a, b
4979   266F FD 2E 03 00   mov32 cb, $00000003
4979   2673 00 00 
4980   2675 B0            cmp a, b
4981   2676 FD 73         slt ; < (signed)
4982   2678 E4            pop a
4983   2679             ; --- END RELATIONAL
4984   2679 C0 00 00      cmp b, 0
4985   267C C6 A9 26      je _while62_exit
4986   267F             _while62_block:
4987   267F             ; output[j++] = '='; 
4988   267F FA 07 00      lea d, [bp + 7] ; $output
4989   2682 FD 2A         mov d, [d]
4990   2684 D7            push a
4991   2685 DA            push d
4992   2686 FA FD FF      lea d, [bp + -3] ; $j
4993   2689 2A            mov b, [d]
4994   268A 38 00 00      mov c, 0
4995   268D 11            mov a, b
4996   268E FD 77         inc b
4997   2690 FA FD FF      lea d, [bp + -3] ; $j
4998   2693 FD 43         mov [d], b
4999   2695 27            mov b, a
5000   2696 E7            pop d
5001   2697 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5002   269B E4            pop a
5003   269C DA            push d
5004   269D FD 2E 3D 00   mov32 cb, $0000003d
5004   26A1 00 00 
5005   26A3 E7            pop d
5006   26A4 FD 3E         mov [d], bl
5007   26A6 0A 5D 26      jmp _while62_cond
5008   26A9             _while62_exit:
5009   26A9 0A AC 26      jmp _if59_exit
5010   26AC             _if59_exit:
5011   26AC             ; output[j] = '\0'; 
5012   26AC FA 07 00      lea d, [bp + 7] ; $output
5013   26AF FD 2A         mov d, [d]
5014   26B1 D7            push a
5015   26B2 DA            push d
5016   26B3 FA FD FF      lea d, [bp + -3] ; $j
5017   26B6 2A            mov b, [d]
5018   26B7 38 00 00      mov c, 0
5019   26BA E7            pop d
5020   26BB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5021   26BF E4            pop a
5022   26C0 DA            push d
5023   26C1 FD 2E 00 00   mov32 cb, $00000000
5023   26C5 00 00 
5024   26C7 E7            pop d
5025   26C8 FD 3E         mov [d], bl
5026   26CA F9            leave
5027   26CB 09            ret
5028   26CC             
5029   26CC             base64_char_value:
5030   26CC F8 00 00      enter 0 ; (push bp; mov bp, sp)
5031   26CF             ; if (c >= 'A' && c <= 'Z') return c - 'A'; 
5032   26CF             _if63_cond:
5033   26CF FA 05 00      lea d, [bp + 5] ; $c
5034   26D2 32            mov bl, [d]
5035   26D3 A7 00         mov bh, 0
5036   26D5 38 00 00      mov c, 0
5037   26D8             ; --- START RELATIONAL
5038   26D8 D7            push a
5039   26D9 11            mov a, b
5040   26DA FD 2E 41 00   mov32 cb, $00000041
5040   26DE 00 00 
5041   26E0 B0            cmp a, b
5042   26E1 FD 80         sge ; >=
5043   26E3 E4            pop a
5044   26E4             ; --- END RELATIONAL
5045   26E4             ; --- START LOGICAL AND
5046   26E4 D7            push a
5047   26E5 11            mov a, b
5048   26E6 FA 05 00      lea d, [bp + 5] ; $c
5049   26E9 32            mov bl, [d]
5050   26EA A7 00         mov bh, 0
5051   26EC 38 00 00      mov c, 0
5052   26EF             ; --- START RELATIONAL
5053   26EF D7            push a
5054   26F0 11            mov a, b
5055   26F1 FD 2E 5A 00   mov32 cb, $0000005a
5055   26F5 00 00 
5056   26F7 B0            cmp a, b
5057   26F8 FD 74         sle ; <= (signed)
5058   26FA E4            pop a
5059   26FB             ; --- END RELATIONAL
5060   26FB FD A7         sand a, b
5061   26FD E4            pop a
5062   26FE             ; --- END LOGICAL AND
5063   26FE C0 00 00      cmp b, 0
5064   2701 C6 1D 27      je _if63_exit
5065   2704             _if63_TRUE:
5066   2704             ; return c - 'A'; 
5067   2704 FA 05 00      lea d, [bp + 5] ; $c
5068   2707 32            mov bl, [d]
5069   2708 A7 00         mov bh, 0
5070   270A 38 00 00      mov c, 0
5071   270D             ; --- START TERMS
5072   270D D7            push a
5073   270E 11            mov a, b
5074   270F FD 2E 41 00   mov32 cb, $00000041
5074   2713 00 00 
5075   2715 60            sub a, b
5076   2716 27            mov b, a
5077   2717 E4            pop a
5078   2718             ; --- END TERMS
5079   2718 F9            leave
5080   2719 09            ret
5081   271A 0A 1D 27      jmp _if63_exit
5082   271D             _if63_exit:
5083   271D             ; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
5084   271D             _if64_cond:
5085   271D FA 05 00      lea d, [bp + 5] ; $c
5086   2720 32            mov bl, [d]
5087   2721 A7 00         mov bh, 0
5088   2723 38 00 00      mov c, 0
5089   2726             ; --- START RELATIONAL
5090   2726 D7            push a
5091   2727 11            mov a, b
5092   2728 FD 2E 61 00   mov32 cb, $00000061
5092   272C 00 00 
5093   272E B0            cmp a, b
5094   272F FD 80         sge ; >=
5095   2731 E4            pop a
5096   2732             ; --- END RELATIONAL
5097   2732             ; --- START LOGICAL AND
5098   2732 D7            push a
5099   2733 11            mov a, b
5100   2734 FA 05 00      lea d, [bp + 5] ; $c
5101   2737 32            mov bl, [d]
5102   2738 A7 00         mov bh, 0
5103   273A 38 00 00      mov c, 0
5104   273D             ; --- START RELATIONAL
5105   273D D7            push a
5106   273E 11            mov a, b
5107   273F FD 2E 7A 00   mov32 cb, $0000007a
5107   2743 00 00 
5108   2745 B0            cmp a, b
5109   2746 FD 74         sle ; <= (signed)
5110   2748 E4            pop a
5111   2749             ; --- END RELATIONAL
5112   2749 FD A7         sand a, b
5113   274B E4            pop a
5114   274C             ; --- END LOGICAL AND
5115   274C C0 00 00      cmp b, 0
5116   274F C6 73 27      je _if64_exit
5117   2752             _if64_TRUE:
5118   2752             ; return c - 'a' + 26; 
5119   2752 FA 05 00      lea d, [bp + 5] ; $c
5120   2755 32            mov bl, [d]
5121   2756 A7 00         mov bh, 0
5122   2758 38 00 00      mov c, 0
5123   275B             ; --- START TERMS
5124   275B D7            push a
5125   275C 11            mov a, b
5126   275D FD 2E 61 00   mov32 cb, $00000061
5126   2761 00 00 
5127   2763 60            sub a, b
5128   2764 27            mov b, a
5129   2765 11            mov a, b
5130   2766 FD 2E 1A 00   mov32 cb, $0000001a
5130   276A 00 00 
5131   276C 56            add b, a
5132   276D E4            pop a
5133   276E             ; --- END TERMS
5134   276E F9            leave
5135   276F 09            ret
5136   2770 0A 73 27      jmp _if64_exit
5137   2773             _if64_exit:
5138   2773             ; if (c >= '0' && c <= '9') return c - '0' + 52; 
5139   2773             _if65_cond:
5140   2773 FA 05 00      lea d, [bp + 5] ; $c
5141   2776 32            mov bl, [d]
5142   2777 A7 00         mov bh, 0
5143   2779 38 00 00      mov c, 0
5144   277C             ; --- START RELATIONAL
5145   277C D7            push a
5146   277D 11            mov a, b
5147   277E FD 2E 30 00   mov32 cb, $00000030
5147   2782 00 00 
5148   2784 B0            cmp a, b
5149   2785 FD 80         sge ; >=
5150   2787 E4            pop a
5151   2788             ; --- END RELATIONAL
5152   2788             ; --- START LOGICAL AND
5153   2788 D7            push a
5154   2789 11            mov a, b
5155   278A FA 05 00      lea d, [bp + 5] ; $c
5156   278D 32            mov bl, [d]
5157   278E A7 00         mov bh, 0
5158   2790 38 00 00      mov c, 0
5159   2793             ; --- START RELATIONAL
5160   2793 D7            push a
5161   2794 11            mov a, b
5162   2795 FD 2E 39 00   mov32 cb, $00000039
5162   2799 00 00 
5163   279B B0            cmp a, b
5164   279C FD 74         sle ; <= (signed)
5165   279E E4            pop a
5166   279F             ; --- END RELATIONAL
5167   279F FD A7         sand a, b
5168   27A1 E4            pop a
5169   27A2             ; --- END LOGICAL AND
5170   27A2 C0 00 00      cmp b, 0
5171   27A5 C6 C9 27      je _if65_exit
5172   27A8             _if65_TRUE:
5173   27A8             ; return c - '0' + 52; 
5174   27A8 FA 05 00      lea d, [bp + 5] ; $c
5175   27AB 32            mov bl, [d]
5176   27AC A7 00         mov bh, 0
5177   27AE 38 00 00      mov c, 0
5178   27B1             ; --- START TERMS
5179   27B1 D7            push a
5180   27B2 11            mov a, b
5181   27B3 FD 2E 30 00   mov32 cb, $00000030
5181   27B7 00 00 
5182   27B9 60            sub a, b
5183   27BA 27            mov b, a
5184   27BB 11            mov a, b
5185   27BC FD 2E 34 00   mov32 cb, $00000034
5185   27C0 00 00 
5186   27C2 56            add b, a
5187   27C3 E4            pop a
5188   27C4             ; --- END TERMS
5189   27C4 F9            leave
5190   27C5 09            ret
5191   27C6 0A C9 27      jmp _if65_exit
5192   27C9             _if65_exit:
5193   27C9             ; if (c == '+') return 62; 
5194   27C9             _if66_cond:
5195   27C9 FA 05 00      lea d, [bp + 5] ; $c
5196   27CC 32            mov bl, [d]
5197   27CD A7 00         mov bh, 0
5198   27CF 38 00 00      mov c, 0
5199   27D2             ; --- START RELATIONAL
5200   27D2 D7            push a
5201   27D3 11            mov a, b
5202   27D4 FD 2E 2B 00   mov32 cb, $0000002b
5202   27D8 00 00 
5203   27DA B0            cmp a, b
5204   27DB FD 71         seq ; ==
5205   27DD E4            pop a
5206   27DE             ; --- END RELATIONAL
5207   27DE C0 00 00      cmp b, 0
5208   27E1 C6 EF 27      je _if66_exit
5209   27E4             _if66_TRUE:
5210   27E4             ; return 62; 
5211   27E4 FD 2E 3E 00   mov32 cb, $0000003e
5211   27E8 00 00 
5212   27EA F9            leave
5213   27EB 09            ret
5214   27EC 0A EF 27      jmp _if66_exit
5215   27EF             _if66_exit:
5216   27EF             ; if (c == '/') return 63; 
5217   27EF             _if67_cond:
5218   27EF FA 05 00      lea d, [bp + 5] ; $c
5219   27F2 32            mov bl, [d]
5220   27F3 A7 00         mov bh, 0
5221   27F5 38 00 00      mov c, 0
5222   27F8             ; --- START RELATIONAL
5223   27F8 D7            push a
5224   27F9 11            mov a, b
5225   27FA FD 2E 2F 00   mov32 cb, $0000002f
5225   27FE 00 00 
5226   2800 B0            cmp a, b
5227   2801 FD 71         seq ; ==
5228   2803 E4            pop a
5229   2804             ; --- END RELATIONAL
5230   2804 C0 00 00      cmp b, 0
5231   2807 C6 15 28      je _if67_exit
5232   280A             _if67_TRUE:
5233   280A             ; return 63; 
5234   280A FD 2E 3F 00   mov32 cb, $0000003f
5234   280E 00 00 
5235   2810 F9            leave
5236   2811 09            ret
5237   2812 0A 15 28      jmp _if67_exit
5238   2815             _if67_exit:
5239   2815             ; return -1; 
5240   2815 FD 2E 01 00   mov32 cb, $00000001
5240   2819 00 00 
5241   281B FD 97         neg b
5242   281D F9            leave
5243   281E 09            ret
5244   281F             
5245   281F             base64_decode:
5246   281F F8 00 00      enter 0 ; (push bp; mov bp, sp)
5247   2822             ; int i = 0, j = 0, k = 0; 
5248   2822 52 02 00      sub sp, 2
5249   2825             ; --- START LOCAL VAR INITIALIZATION
5250   2825 FA FF FF      lea d, [bp + -1] ; $i
5251   2828 DA            push d
5252   2829 FD 2E 00 00   mov32 cb, $00000000
5252   282D 00 00 
5253   282F E7            pop d
5254   2830 FD 43         mov [d], b
5255   2832             ; --- END LOCAL VAR INITIALIZATION
5256   2832 52 02 00      sub sp, 2
5257   2835             ; --- START LOCAL VAR INITIALIZATION
5258   2835 FA FD FF      lea d, [bp + -3] ; $j
5259   2838 DA            push d
5260   2839 FD 2E 00 00   mov32 cb, $00000000
5260   283D 00 00 
5261   283F E7            pop d
5262   2840 FD 43         mov [d], b
5263   2842             ; --- END LOCAL VAR INITIALIZATION
5264   2842 52 02 00      sub sp, 2
5265   2845             ; --- START LOCAL VAR INITIALIZATION
5266   2845 FA FB FF      lea d, [bp + -5] ; $k
5267   2848 DA            push d
5268   2849 FD 2E 00 00   mov32 cb, $00000000
5268   284D 00 00 
5269   284F E7            pop d
5270   2850 FD 43         mov [d], b
5271   2852             ; --- END LOCAL VAR INITIALIZATION
5272   2852             ; int input_len; 
5273   2852 52 02 00      sub sp, 2
5274   2855             ; unsigned char input_buffer[4]; 
5275   2855 52 04 00      sub sp, 4
5276   2858             ; unsigned char output_buffer[3]; 
5277   2858 52 03 00      sub sp, 3
5278   285B             ; input_len = strlen(input); 
5279   285B FA F9 FF      lea d, [bp + -7] ; $input_len
5280   285E DA            push d
5281   285F             ; --- START FUNCTION CALL
5282   285F FA 05 00      lea d, [bp + 5] ; $input
5283   2862 2A            mov b, [d]
5284   2863 38 00 00      mov c, 0
5285   2866 FD AB         swp b
5286   2868 D8            push b
5287   2869 07 79 06      call strlen
5288   286C 51 02 00      add sp, 2
5289   286F             ; --- END FUNCTION CALL
5290   286F E7            pop d
5291   2870 FD 43         mov [d], b
5292   2872             ; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
5293   2872             _while68_cond:
5294   2872 FA F9 FF      lea d, [bp + -7] ; $input_len
5295   2875 2A            mov b, [d]
5296   2876 38 00 00      mov c, 0
5297   2879 11            mov a, b
5298   287A FD 7D         dec b
5299   287C FA F9 FF      lea d, [bp + -7] ; $input_len
5300   287F FD 43         mov [d], b
5301   2881 27            mov b, a
5302   2882             ; --- START LOGICAL AND
5303   2882 D7            push a
5304   2883 11            mov a, b
5305   2884 FA 05 00      lea d, [bp + 5] ; $input
5306   2887 FD 2A         mov d, [d]
5307   2889 D7            push a
5308   288A DA            push d
5309   288B FA FB FF      lea d, [bp + -5] ; $k
5310   288E 2A            mov b, [d]
5311   288F 38 00 00      mov c, 0
5312   2892 E7            pop d
5313   2893 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5314   2897 E4            pop a
5315   2898 32            mov bl, [d]
5316   2899 A7 00         mov bh, 0
5317   289B 38 00 00      mov c, 0
5318   289E             ; --- START RELATIONAL
5319   289E D7            push a
5320   289F 11            mov a, b
5321   28A0 FD 2E 3D 00   mov32 cb, $0000003d
5321   28A4 00 00 
5322   28A6 B0            cmp a, b
5323   28A7 FD 72         sneq ; !=
5324   28A9 E4            pop a
5325   28AA             ; --- END RELATIONAL
5326   28AA FD A7         sand a, b
5327   28AC 11            mov a, b
5328   28AD             ; --- START FUNCTION CALL
5329   28AD FA 05 00      lea d, [bp + 5] ; $input
5330   28B0 FD 2A         mov d, [d]
5331   28B2 D7            push a
5332   28B3 DA            push d
5333   28B4 FA FB FF      lea d, [bp + -5] ; $k
5334   28B7 2A            mov b, [d]
5335   28B8 38 00 00      mov c, 0
5336   28BB E7            pop d
5337   28BC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5338   28C0 E4            pop a
5339   28C1 32            mov bl, [d]
5340   28C2 A7 00         mov bh, 0
5341   28C4 38 00 00      mov c, 0
5342   28C7 DD            push bl
5343   28C8 07 CC 26      call base64_char_value
5344   28CB 51 01 00      add sp, 1
5345   28CE             ; --- END FUNCTION CALL
5346   28CE             ; --- START RELATIONAL
5347   28CE D7            push a
5348   28CF 11            mov a, b
5349   28D0 FD 2E 01 00   mov32 cb, $00000001
5349   28D4 00 00 
5350   28D6 FD 97         neg b
5351   28D8 B0            cmp a, b
5352   28D9 FD 72         sneq ; !=
5353   28DB E4            pop a
5354   28DC             ; --- END RELATIONAL
5355   28DC FD A7         sand a, b
5356   28DE E4            pop a
5357   28DF             ; --- END LOGICAL AND
5358   28DF C0 00 00      cmp b, 0
5359   28E2 C6 4E 2B      je _while68_exit
5360   28E5             _while68_block:
5361   28E5             ; input_buffer[i++] = input[k++]; 
5362   28E5 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5363   28E8 D7            push a
5364   28E9 DA            push d
5365   28EA FA FF FF      lea d, [bp + -1] ; $i
5366   28ED 2A            mov b, [d]
5367   28EE 38 00 00      mov c, 0
5368   28F1 11            mov a, b
5369   28F2 FD 77         inc b
5370   28F4 FA FF FF      lea d, [bp + -1] ; $i
5371   28F7 FD 43         mov [d], b
5372   28F9 27            mov b, a
5373   28FA E7            pop d
5374   28FB 5A            add d, b
5375   28FC E4            pop a
5376   28FD DA            push d
5377   28FE FA 05 00      lea d, [bp + 5] ; $input
5378   2901 FD 2A         mov d, [d]
5379   2903 D7            push a
5380   2904 DA            push d
5381   2905 FA FB FF      lea d, [bp + -5] ; $k
5382   2908 2A            mov b, [d]
5383   2909 38 00 00      mov c, 0
5384   290C 11            mov a, b
5385   290D FD 77         inc b
5386   290F FA FB FF      lea d, [bp + -5] ; $k
5387   2912 FD 43         mov [d], b
5388   2914 27            mov b, a
5389   2915 E7            pop d
5390   2916 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5391   291A E4            pop a
5392   291B 32            mov bl, [d]
5393   291C A7 00         mov bh, 0
5394   291E 38 00 00      mov c, 0
5395   2921 E7            pop d
5396   2922 FD 3E         mov [d], bl
5397   2924             ; if (i == 4) { 
5398   2924             _if69_cond:
5399   2924 FA FF FF      lea d, [bp + -1] ; $i
5400   2927 2A            mov b, [d]
5401   2928 38 00 00      mov c, 0
5402   292B             ; --- START RELATIONAL
5403   292B D7            push a
5404   292C 11            mov a, b
5405   292D FD 2E 04 00   mov32 cb, $00000004
5405   2931 00 00 
5406   2933 B0            cmp a, b
5407   2934 FD 71         seq ; ==
5408   2936 E4            pop a
5409   2937             ; --- END RELATIONAL
5410   2937 C0 00 00      cmp b, 0
5411   293A C6 4B 2B      je _if69_exit
5412   293D             _if69_TRUE:
5413   293D             ; for (i = 0; i < 4; i++) { 
5414   293D             _for70_init:
5415   293D FA FF FF      lea d, [bp + -1] ; $i
5416   2940 DA            push d
5417   2941 FD 2E 00 00   mov32 cb, $00000000
5417   2945 00 00 
5418   2947 E7            pop d
5419   2948 FD 43         mov [d], b
5420   294A             _for70_cond:
5421   294A FA FF FF      lea d, [bp + -1] ; $i
5422   294D 2A            mov b, [d]
5423   294E 38 00 00      mov c, 0
5424   2951             ; --- START RELATIONAL
5425   2951 D7            push a
5426   2952 11            mov a, b
5427   2953 FD 2E 04 00   mov32 cb, $00000004
5427   2957 00 00 
5428   2959 B0            cmp a, b
5429   295A FD 73         slt ; < (signed)
5430   295C E4            pop a
5431   295D             ; --- END RELATIONAL
5432   295D C0 00 00      cmp b, 0
5433   2960 C6 A5 29      je _for70_exit
5434   2963             _for70_block:
5435   2963             ; input_buffer[i] = base64_char_value(input_buffer[i]); 
5436   2963 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5437   2966 D7            push a
5438   2967 DA            push d
5439   2968 FA FF FF      lea d, [bp + -1] ; $i
5440   296B 2A            mov b, [d]
5441   296C 38 00 00      mov c, 0
5442   296F E7            pop d
5443   2970 5A            add d, b
5444   2971 E4            pop a
5445   2972 DA            push d
5446   2973             ; --- START FUNCTION CALL
5447   2973 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5448   2976 D7            push a
5449   2977 DA            push d
5450   2978 FA FF FF      lea d, [bp + -1] ; $i
5451   297B 2A            mov b, [d]
5452   297C 38 00 00      mov c, 0
5453   297F E7            pop d
5454   2980 5A            add d, b
5455   2981 E4            pop a
5456   2982 32            mov bl, [d]
5457   2983 A7 00         mov bh, 0
5458   2985 38 00 00      mov c, 0
5459   2988 DD            push bl
5460   2989 07 CC 26      call base64_char_value
5461   298C 51 01 00      add sp, 1
5462   298F             ; --- END FUNCTION CALL
5463   298F E7            pop d
5464   2990 FD 3E         mov [d], bl
5465   2992             _for70_update:
5466   2992 FA FF FF      lea d, [bp + -1] ; $i
5467   2995 2A            mov b, [d]
5468   2996 38 00 00      mov c, 0
5469   2999 11            mov a, b
5470   299A FD 77         inc b
5471   299C FA FF FF      lea d, [bp + -1] ; $i
5472   299F FD 43         mov [d], b
5473   29A1 27            mov b, a
5474   29A2 0A 4A 29      jmp _for70_cond
5475   29A5             _for70_exit:
5476   29A5             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
5477   29A5 FA F2 FF      lea d, [bp + -14] ; $output_buffer
5478   29A8 D7            push a
5479   29A9 DA            push d
5480   29AA FD 2E 00 00   mov32 cb, $00000000
5480   29AE 00 00 
5481   29B0 E7            pop d
5482   29B1 5A            add d, b
5483   29B2 E4            pop a
5484   29B3 DA            push d
5485   29B4 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5486   29B7 D7            push a
5487   29B8 DA            push d
5488   29B9 FD 2E 00 00   mov32 cb, $00000000
5488   29BD 00 00 
5489   29BF E7            pop d
5490   29C0 5A            add d, b
5491   29C1 E4            pop a
5492   29C2 32            mov bl, [d]
5493   29C3 A7 00         mov bh, 0
5494   29C5 38 00 00      mov c, 0
5495   29C8             ; --- START SHIFT
5496   29C8 D7            push a
5497   29C9 11            mov a, b
5498   29CA FD 2E 02 00   mov32 cb, $00000002
5498   29CE 00 00 
5499   29D0 FD 39         mov c, b
5500   29D2 9D            shl a, cl
5501   29D3 27            mov b, a
5502   29D4 E4            pop a
5503   29D5             ; --- END SHIFT
5504   29D5             ; --- START TERMS
5505   29D5 D7            push a
5506   29D6 11            mov a, b
5507   29D7 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5508   29DA D7            push a
5509   29DB DA            push d
5510   29DC FD 2E 01 00   mov32 cb, $00000001
5510   29E0 00 00 
5511   29E2 E7            pop d
5512   29E3 5A            add d, b
5513   29E4 E4            pop a
5514   29E5 32            mov bl, [d]
5515   29E6 A7 00         mov bh, 0
5516   29E8 38 00 00      mov c, 0
5517   29EB D7            push a
5518   29EC 11            mov a, b
5519   29ED FD 2E 30 00   mov32 cb, $00000030
5519   29F1 00 00 
5520   29F3 FD 92         and b, a ; &
5521   29F5 E4            pop a
5522   29F6             ; --- START SHIFT
5523   29F6 D7            push a
5524   29F7 11            mov a, b
5525   29F8 FD 2E 04 00   mov32 cb, $00000004
5525   29FC 00 00 
5526   29FE FD 39         mov c, b
5527   2A00 A5            ashr a, cl
5528   2A01 27            mov b, a
5529   2A02 E4            pop a
5530   2A03             ; --- END SHIFT
5531   2A03 56            add b, a
5532   2A04 E4            pop a
5533   2A05             ; --- END TERMS
5534   2A05 E7            pop d
5535   2A06 FD 3E         mov [d], bl
5536   2A08             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
5537   2A08 FA F2 FF      lea d, [bp + -14] ; $output_buffer
5538   2A0B D7            push a
5539   2A0C DA            push d
5540   2A0D FD 2E 01 00   mov32 cb, $00000001
5540   2A11 00 00 
5541   2A13 E7            pop d
5542   2A14 5A            add d, b
5543   2A15 E4            pop a
5544   2A16 DA            push d
5545   2A17 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5546   2A1A D7            push a
5547   2A1B DA            push d
5548   2A1C FD 2E 01 00   mov32 cb, $00000001
5548   2A20 00 00 
5549   2A22 E7            pop d
5550   2A23 5A            add d, b
5551   2A24 E4            pop a
5552   2A25 32            mov bl, [d]
5553   2A26 A7 00         mov bh, 0
5554   2A28 38 00 00      mov c, 0
5555   2A2B D7            push a
5556   2A2C 11            mov a, b
5557   2A2D FD 2E 0F 00   mov32 cb, $0000000f
5557   2A31 00 00 
5558   2A33 FD 92         and b, a ; &
5559   2A35 E4            pop a
5560   2A36             ; --- START SHIFT
5561   2A36 D7            push a
5562   2A37 11            mov a, b
5563   2A38 FD 2E 04 00   mov32 cb, $00000004
5563   2A3C 00 00 
5564   2A3E FD 39         mov c, b
5565   2A40 9D            shl a, cl
5566   2A41 27            mov b, a
5567   2A42 E4            pop a
5568   2A43             ; --- END SHIFT
5569   2A43             ; --- START TERMS
5570   2A43 D7            push a
5571   2A44 11            mov a, b
5572   2A45 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5573   2A48 D7            push a
5574   2A49 DA            push d
5575   2A4A FD 2E 02 00   mov32 cb, $00000002
5575   2A4E 00 00 
5576   2A50 E7            pop d
5577   2A51 5A            add d, b
5578   2A52 E4            pop a
5579   2A53 32            mov bl, [d]
5580   2A54 A7 00         mov bh, 0
5581   2A56 38 00 00      mov c, 0
5582   2A59 D7            push a
5583   2A5A 11            mov a, b
5584   2A5B FD 2E 3C 00   mov32 cb, $0000003c
5584   2A5F 00 00 
5585   2A61 FD 92         and b, a ; &
5586   2A63 E4            pop a
5587   2A64             ; --- START SHIFT
5588   2A64 D7            push a
5589   2A65 11            mov a, b
5590   2A66 FD 2E 02 00   mov32 cb, $00000002
5590   2A6A 00 00 
5591   2A6C FD 39         mov c, b
5592   2A6E A5            ashr a, cl
5593   2A6F 27            mov b, a
5594   2A70 E4            pop a
5595   2A71             ; --- END SHIFT
5596   2A71 56            add b, a
5597   2A72 E4            pop a
5598   2A73             ; --- END TERMS
5599   2A73 E7            pop d
5600   2A74 FD 3E         mov [d], bl
5601   2A76             ; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
5602   2A76 FA F2 FF      lea d, [bp + -14] ; $output_buffer
5603   2A79 D7            push a
5604   2A7A DA            push d
5605   2A7B FD 2E 02 00   mov32 cb, $00000002
5605   2A7F 00 00 
5606   2A81 E7            pop d
5607   2A82 5A            add d, b
5608   2A83 E4            pop a
5609   2A84 DA            push d
5610   2A85 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5611   2A88 D7            push a
5612   2A89 DA            push d
5613   2A8A FD 2E 02 00   mov32 cb, $00000002
5613   2A8E 00 00 
5614   2A90 E7            pop d
5615   2A91 5A            add d, b
5616   2A92 E4            pop a
5617   2A93 32            mov bl, [d]
5618   2A94 A7 00         mov bh, 0
5619   2A96 38 00 00      mov c, 0
5620   2A99 D7            push a
5621   2A9A 11            mov a, b
5622   2A9B FD 2E 03 00   mov32 cb, $00000003
5622   2A9F 00 00 
5623   2AA1 FD 92         and b, a ; &
5624   2AA3 E4            pop a
5625   2AA4             ; --- START SHIFT
5626   2AA4 D7            push a
5627   2AA5 11            mov a, b
5628   2AA6 FD 2E 06 00   mov32 cb, $00000006
5628   2AAA 00 00 
5629   2AAC FD 39         mov c, b
5630   2AAE 9D            shl a, cl
5631   2AAF 27            mov b, a
5632   2AB0 E4            pop a
5633   2AB1             ; --- END SHIFT
5634   2AB1             ; --- START TERMS
5635   2AB1 D7            push a
5636   2AB2 11            mov a, b
5637   2AB3 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5638   2AB6 D7            push a
5639   2AB7 DA            push d
5640   2AB8 FD 2E 03 00   mov32 cb, $00000003
5640   2ABC 00 00 
5641   2ABE E7            pop d
5642   2ABF 5A            add d, b
5643   2AC0 E4            pop a
5644   2AC1 32            mov bl, [d]
5645   2AC2 A7 00         mov bh, 0
5646   2AC4 38 00 00      mov c, 0
5647   2AC7 56            add b, a
5648   2AC8 E4            pop a
5649   2AC9             ; --- END TERMS
5650   2AC9 E7            pop d
5651   2ACA FD 3E         mov [d], bl
5652   2ACC             ; for (i = 0; i < 3; i++) { 
5653   2ACC             _for71_init:
5654   2ACC FA FF FF      lea d, [bp + -1] ; $i
5655   2ACF DA            push d
5656   2AD0 FD 2E 00 00   mov32 cb, $00000000
5656   2AD4 00 00 
5657   2AD6 E7            pop d
5658   2AD7 FD 43         mov [d], b
5659   2AD9             _for71_cond:
5660   2AD9 FA FF FF      lea d, [bp + -1] ; $i
5661   2ADC 2A            mov b, [d]
5662   2ADD 38 00 00      mov c, 0
5663   2AE0             ; --- START RELATIONAL
5664   2AE0 D7            push a
5665   2AE1 11            mov a, b
5666   2AE2 FD 2E 03 00   mov32 cb, $00000003
5666   2AE6 00 00 
5667   2AE8 B0            cmp a, b
5668   2AE9 FD 73         slt ; < (signed)
5669   2AEB E4            pop a
5670   2AEC             ; --- END RELATIONAL
5671   2AEC C0 00 00      cmp b, 0
5672   2AEF C6 3B 2B      je _for71_exit
5673   2AF2             _for71_block:
5674   2AF2             ; output[j++] = output_buffer[i]; 
5675   2AF2 FA 07 00      lea d, [bp + 7] ; $output
5676   2AF5 FD 2A         mov d, [d]
5677   2AF7 D7            push a
5678   2AF8 DA            push d
5679   2AF9 FA FD FF      lea d, [bp + -3] ; $j
5680   2AFC 2A            mov b, [d]
5681   2AFD 38 00 00      mov c, 0
5682   2B00 11            mov a, b
5683   2B01 FD 77         inc b
5684   2B03 FA FD FF      lea d, [bp + -3] ; $j
5685   2B06 FD 43         mov [d], b
5686   2B08 27            mov b, a
5687   2B09 E7            pop d
5688   2B0A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5689   2B0E E4            pop a
5690   2B0F DA            push d
5691   2B10 FA F2 FF      lea d, [bp + -14] ; $output_buffer
5692   2B13 D7            push a
5693   2B14 DA            push d
5694   2B15 FA FF FF      lea d, [bp + -1] ; $i
5695   2B18 2A            mov b, [d]
5696   2B19 38 00 00      mov c, 0
5697   2B1C E7            pop d
5698   2B1D 5A            add d, b
5699   2B1E E4            pop a
5700   2B1F 32            mov bl, [d]
5701   2B20 A7 00         mov bh, 0
5702   2B22 38 00 00      mov c, 0
5703   2B25 E7            pop d
5704   2B26 FD 3E         mov [d], bl
5705   2B28             _for71_update:
5706   2B28 FA FF FF      lea d, [bp + -1] ; $i
5707   2B2B 2A            mov b, [d]
5708   2B2C 38 00 00      mov c, 0
5709   2B2F 11            mov a, b
5710   2B30 FD 77         inc b
5711   2B32 FA FF FF      lea d, [bp + -1] ; $i
5712   2B35 FD 43         mov [d], b
5713   2B37 27            mov b, a
5714   2B38 0A D9 2A      jmp _for71_cond
5715   2B3B             _for71_exit:
5716   2B3B             ; i = 0; 
5717   2B3B FA FF FF      lea d, [bp + -1] ; $i
5718   2B3E DA            push d
5719   2B3F FD 2E 00 00   mov32 cb, $00000000
5719   2B43 00 00 
5720   2B45 E7            pop d
5721   2B46 FD 43         mov [d], b
5722   2B48 0A 4B 2B      jmp _if69_exit
5723   2B4B             _if69_exit:
5724   2B4B 0A 72 28      jmp _while68_cond
5725   2B4E             _while68_exit:
5726   2B4E             ; if (i) { 
5727   2B4E             _if72_cond:
5728   2B4E FA FF FF      lea d, [bp + -1] ; $i
5729   2B51 2A            mov b, [d]
5730   2B52 38 00 00      mov c, 0
5731   2B55 C0 00 00      cmp b, 0
5732   2B58 C6 65 2D      je _if72_exit
5733   2B5B             _if72_TRUE:
5734   2B5B             ; for (k = i; k < 4; k++) { 
5735   2B5B             _for73_init:
5736   2B5B FA FB FF      lea d, [bp + -5] ; $k
5737   2B5E DA            push d
5738   2B5F FA FF FF      lea d, [bp + -1] ; $i
5739   2B62 2A            mov b, [d]
5740   2B63 38 00 00      mov c, 0
5741   2B66 E7            pop d
5742   2B67 FD 43         mov [d], b
5743   2B69             _for73_cond:
5744   2B69 FA FB FF      lea d, [bp + -5] ; $k
5745   2B6C 2A            mov b, [d]
5746   2B6D 38 00 00      mov c, 0
5747   2B70             ; --- START RELATIONAL
5748   2B70 D7            push a
5749   2B71 11            mov a, b
5750   2B72 FD 2E 04 00   mov32 cb, $00000004
5750   2B76 00 00 
5751   2B78 B0            cmp a, b
5752   2B79 FD 73         slt ; < (signed)
5753   2B7B E4            pop a
5754   2B7C             ; --- END RELATIONAL
5755   2B7C C0 00 00      cmp b, 0
5756   2B7F C6 AE 2B      je _for73_exit
5757   2B82             _for73_block:
5758   2B82             ; input_buffer[k] = 0; 
5759   2B82 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5760   2B85 D7            push a
5761   2B86 DA            push d
5762   2B87 FA FB FF      lea d, [bp + -5] ; $k
5763   2B8A 2A            mov b, [d]
5764   2B8B 38 00 00      mov c, 0
5765   2B8E E7            pop d
5766   2B8F 5A            add d, b
5767   2B90 E4            pop a
5768   2B91 DA            push d
5769   2B92 FD 2E 00 00   mov32 cb, $00000000
5769   2B96 00 00 
5770   2B98 E7            pop d
5771   2B99 FD 3E         mov [d], bl
5772   2B9B             _for73_update:
5773   2B9B FA FB FF      lea d, [bp + -5] ; $k
5774   2B9E 2A            mov b, [d]
5775   2B9F 38 00 00      mov c, 0
5776   2BA2 11            mov a, b
5777   2BA3 FD 77         inc b
5778   2BA5 FA FB FF      lea d, [bp + -5] ; $k
5779   2BA8 FD 43         mov [d], b
5780   2BAA 27            mov b, a
5781   2BAB 0A 69 2B      jmp _for73_cond
5782   2BAE             _for73_exit:
5783   2BAE             ; for (k = 0; k < 4; k++) { 
5784   2BAE             _for74_init:
5785   2BAE FA FB FF      lea d, [bp + -5] ; $k
5786   2BB1 DA            push d
5787   2BB2 FD 2E 00 00   mov32 cb, $00000000
5787   2BB6 00 00 
5788   2BB8 E7            pop d
5789   2BB9 FD 43         mov [d], b
5790   2BBB             _for74_cond:
5791   2BBB FA FB FF      lea d, [bp + -5] ; $k
5792   2BBE 2A            mov b, [d]
5793   2BBF 38 00 00      mov c, 0
5794   2BC2             ; --- START RELATIONAL
5795   2BC2 D7            push a
5796   2BC3 11            mov a, b
5797   2BC4 FD 2E 04 00   mov32 cb, $00000004
5797   2BC8 00 00 
5798   2BCA B0            cmp a, b
5799   2BCB FD 73         slt ; < (signed)
5800   2BCD E4            pop a
5801   2BCE             ; --- END RELATIONAL
5802   2BCE C0 00 00      cmp b, 0
5803   2BD1 C6 16 2C      je _for74_exit
5804   2BD4             _for74_block:
5805   2BD4             ; input_buffer[k] = base64_char_value(input_buffer[k]); 
5806   2BD4 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5807   2BD7 D7            push a
5808   2BD8 DA            push d
5809   2BD9 FA FB FF      lea d, [bp + -5] ; $k
5810   2BDC 2A            mov b, [d]
5811   2BDD 38 00 00      mov c, 0
5812   2BE0 E7            pop d
5813   2BE1 5A            add d, b
5814   2BE2 E4            pop a
5815   2BE3 DA            push d
5816   2BE4             ; --- START FUNCTION CALL
5817   2BE4 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5818   2BE7 D7            push a
5819   2BE8 DA            push d
5820   2BE9 FA FB FF      lea d, [bp + -5] ; $k
5821   2BEC 2A            mov b, [d]
5822   2BED 38 00 00      mov c, 0
5823   2BF0 E7            pop d
5824   2BF1 5A            add d, b
5825   2BF2 E4            pop a
5826   2BF3 32            mov bl, [d]
5827   2BF4 A7 00         mov bh, 0
5828   2BF6 38 00 00      mov c, 0
5829   2BF9 DD            push bl
5830   2BFA 07 CC 26      call base64_char_value
5831   2BFD 51 01 00      add sp, 1
5832   2C00             ; --- END FUNCTION CALL
5833   2C00 E7            pop d
5834   2C01 FD 3E         mov [d], bl
5835   2C03             _for74_update:
5836   2C03 FA FB FF      lea d, [bp + -5] ; $k
5837   2C06 2A            mov b, [d]
5838   2C07 38 00 00      mov c, 0
5839   2C0A 11            mov a, b
5840   2C0B FD 77         inc b
5841   2C0D FA FB FF      lea d, [bp + -5] ; $k
5842   2C10 FD 43         mov [d], b
5843   2C12 27            mov b, a
5844   2C13 0A BB 2B      jmp _for74_cond
5845   2C16             _for74_exit:
5846   2C16             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
5847   2C16 FA F2 FF      lea d, [bp + -14] ; $output_buffer
5848   2C19 D7            push a
5849   2C1A DA            push d
5850   2C1B FD 2E 00 00   mov32 cb, $00000000
5850   2C1F 00 00 
5851   2C21 E7            pop d
5852   2C22 5A            add d, b
5853   2C23 E4            pop a
5854   2C24 DA            push d
5855   2C25 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5856   2C28 D7            push a
5857   2C29 DA            push d
5858   2C2A FD 2E 00 00   mov32 cb, $00000000
5858   2C2E 00 00 
5859   2C30 E7            pop d
5860   2C31 5A            add d, b
5861   2C32 E4            pop a
5862   2C33 32            mov bl, [d]
5863   2C34 A7 00         mov bh, 0
5864   2C36 38 00 00      mov c, 0
5865   2C39             ; --- START SHIFT
5866   2C39 D7            push a
5867   2C3A 11            mov a, b
5868   2C3B FD 2E 02 00   mov32 cb, $00000002
5868   2C3F 00 00 
5869   2C41 FD 39         mov c, b
5870   2C43 9D            shl a, cl
5871   2C44 27            mov b, a
5872   2C45 E4            pop a
5873   2C46             ; --- END SHIFT
5874   2C46             ; --- START TERMS
5875   2C46 D7            push a
5876   2C47 11            mov a, b
5877   2C48 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5878   2C4B D7            push a
5879   2C4C DA            push d
5880   2C4D FD 2E 01 00   mov32 cb, $00000001
5880   2C51 00 00 
5881   2C53 E7            pop d
5882   2C54 5A            add d, b
5883   2C55 E4            pop a
5884   2C56 32            mov bl, [d]
5885   2C57 A7 00         mov bh, 0
5886   2C59 38 00 00      mov c, 0
5887   2C5C D7            push a
5888   2C5D 11            mov a, b
5889   2C5E FD 2E 30 00   mov32 cb, $00000030
5889   2C62 00 00 
5890   2C64 FD 92         and b, a ; &
5891   2C66 E4            pop a
5892   2C67             ; --- START SHIFT
5893   2C67 D7            push a
5894   2C68 11            mov a, b
5895   2C69 FD 2E 04 00   mov32 cb, $00000004
5895   2C6D 00 00 
5896   2C6F FD 39         mov c, b
5897   2C71 A5            ashr a, cl
5898   2C72 27            mov b, a
5899   2C73 E4            pop a
5900   2C74             ; --- END SHIFT
5901   2C74 56            add b, a
5902   2C75 E4            pop a
5903   2C76             ; --- END TERMS
5904   2C76 E7            pop d
5905   2C77 FD 3E         mov [d], bl
5906   2C79             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
5907   2C79 FA F2 FF      lea d, [bp + -14] ; $output_buffer
5908   2C7C D7            push a
5909   2C7D DA            push d
5910   2C7E FD 2E 01 00   mov32 cb, $00000001
5910   2C82 00 00 
5911   2C84 E7            pop d
5912   2C85 5A            add d, b
5913   2C86 E4            pop a
5914   2C87 DA            push d
5915   2C88 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5916   2C8B D7            push a
5917   2C8C DA            push d
5918   2C8D FD 2E 01 00   mov32 cb, $00000001
5918   2C91 00 00 
5919   2C93 E7            pop d
5920   2C94 5A            add d, b
5921   2C95 E4            pop a
5922   2C96 32            mov bl, [d]
5923   2C97 A7 00         mov bh, 0
5924   2C99 38 00 00      mov c, 0
5925   2C9C D7            push a
5926   2C9D 11            mov a, b
5927   2C9E FD 2E 0F 00   mov32 cb, $0000000f
5927   2CA2 00 00 
5928   2CA4 FD 92         and b, a ; &
5929   2CA6 E4            pop a
5930   2CA7             ; --- START SHIFT
5931   2CA7 D7            push a
5932   2CA8 11            mov a, b
5933   2CA9 FD 2E 04 00   mov32 cb, $00000004
5933   2CAD 00 00 
5934   2CAF FD 39         mov c, b
5935   2CB1 9D            shl a, cl
5936   2CB2 27            mov b, a
5937   2CB3 E4            pop a
5938   2CB4             ; --- END SHIFT
5939   2CB4             ; --- START TERMS
5940   2CB4 D7            push a
5941   2CB5 11            mov a, b
5942   2CB6 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5943   2CB9 D7            push a
5944   2CBA DA            push d
5945   2CBB FD 2E 02 00   mov32 cb, $00000002
5945   2CBF 00 00 
5946   2CC1 E7            pop d
5947   2CC2 5A            add d, b
5948   2CC3 E4            pop a
5949   2CC4 32            mov bl, [d]
5950   2CC5 A7 00         mov bh, 0
5951   2CC7 38 00 00      mov c, 0
5952   2CCA D7            push a
5953   2CCB 11            mov a, b
5954   2CCC FD 2E 3C 00   mov32 cb, $0000003c
5954   2CD0 00 00 
5955   2CD2 FD 92         and b, a ; &
5956   2CD4 E4            pop a
5957   2CD5             ; --- START SHIFT
5958   2CD5 D7            push a
5959   2CD6 11            mov a, b
5960   2CD7 FD 2E 02 00   mov32 cb, $00000002
5960   2CDB 00 00 
5961   2CDD FD 39         mov c, b
5962   2CDF A5            ashr a, cl
5963   2CE0 27            mov b, a
5964   2CE1 E4            pop a
5965   2CE2             ; --- END SHIFT
5966   2CE2 56            add b, a
5967   2CE3 E4            pop a
5968   2CE4             ; --- END TERMS
5969   2CE4 E7            pop d
5970   2CE5 FD 3E         mov [d], bl
5971   2CE7             ; for (k = 0; k < i - 1; k++) { 
5972   2CE7             _for75_init:
5973   2CE7 FA FB FF      lea d, [bp + -5] ; $k
5974   2CEA DA            push d
5975   2CEB FD 2E 00 00   mov32 cb, $00000000
5975   2CEF 00 00 
5976   2CF1 E7            pop d
5977   2CF2 FD 43         mov [d], b
5978   2CF4             _for75_cond:
5979   2CF4 FA FB FF      lea d, [bp + -5] ; $k
5980   2CF7 2A            mov b, [d]
5981   2CF8 38 00 00      mov c, 0
5982   2CFB             ; --- START RELATIONAL
5983   2CFB D7            push a
5984   2CFC 11            mov a, b
5985   2CFD FA FF FF      lea d, [bp + -1] ; $i
5986   2D00 2A            mov b, [d]
5987   2D01 38 00 00      mov c, 0
5988   2D04             ; --- START TERMS
5989   2D04 D7            push a
5990   2D05 11            mov a, b
5991   2D06 FD 2E 01 00   mov32 cb, $00000001
5991   2D0A 00 00 
5992   2D0C 60            sub a, b
5993   2D0D 27            mov b, a
5994   2D0E E4            pop a
5995   2D0F             ; --- END TERMS
5996   2D0F B0            cmp a, b
5997   2D10 FD 73         slt ; < (signed)
5998   2D12 E4            pop a
5999   2D13             ; --- END RELATIONAL
6000   2D13 C0 00 00      cmp b, 0
6001   2D16 C6 62 2D      je _for75_exit
6002   2D19             _for75_block:
6003   2D19             ; output[j++] = output_buffer[k]; 
6004   2D19 FA 07 00      lea d, [bp + 7] ; $output
6005   2D1C FD 2A         mov d, [d]
6006   2D1E D7            push a
6007   2D1F DA            push d
6008   2D20 FA FD FF      lea d, [bp + -3] ; $j
6009   2D23 2A            mov b, [d]
6010   2D24 38 00 00      mov c, 0
6011   2D27 11            mov a, b
6012   2D28 FD 77         inc b
6013   2D2A FA FD FF      lea d, [bp + -3] ; $j
6014   2D2D FD 43         mov [d], b
6015   2D2F 27            mov b, a
6016   2D30 E7            pop d
6017   2D31 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
6018   2D35 E4            pop a
6019   2D36 DA            push d
6020   2D37 FA F2 FF      lea d, [bp + -14] ; $output_buffer
6021   2D3A D7            push a
6022   2D3B DA            push d
6023   2D3C FA FB FF      lea d, [bp + -5] ; $k
6024   2D3F 2A            mov b, [d]
6025   2D40 38 00 00      mov c, 0
6026   2D43 E7            pop d
6027   2D44 5A            add d, b
6028   2D45 E4            pop a
6029   2D46 32            mov bl, [d]
6030   2D47 A7 00         mov bh, 0
6031   2D49 38 00 00      mov c, 0
6032   2D4C E7            pop d
6033   2D4D FD 3E         mov [d], bl
6034   2D4F             _for75_update:
6035   2D4F FA FB FF      lea d, [bp + -5] ; $k
6036   2D52 2A            mov b, [d]
6037   2D53 38 00 00      mov c, 0
6038   2D56 11            mov a, b
6039   2D57 FD 77         inc b
6040   2D59 FA FB FF      lea d, [bp + -5] ; $k
6041   2D5C FD 43         mov [d], b
6042   2D5E 27            mov b, a
6043   2D5F 0A F4 2C      jmp _for75_cond
6044   2D62             _for75_exit:
6045   2D62 0A 65 2D      jmp _if72_exit
6046   2D65             _if72_exit:
6047   2D65             ; output[j] = '\0'; 
6048   2D65 FA 07 00      lea d, [bp + 7] ; $output
6049   2D68 FD 2A         mov d, [d]
6050   2D6A D7            push a
6051   2D6B DA            push d
6052   2D6C FA FD FF      lea d, [bp + -3] ; $j
6053   2D6F 2A            mov b, [d]
6054   2D70 38 00 00      mov c, 0
6055   2D73 E7            pop d
6056   2D74 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
6057   2D78 E4            pop a
6058   2D79 DA            push d
6059   2D7A FD 2E 00 00   mov32 cb, $00000000
6059   2D7E 00 00 
6060   2D80 E7            pop d
6061   2D81 FD 3E         mov [d], bl
6062   2D83 F9            leave
6063   2D84 09            ret
6064   2D85             ; --- END TEXT SEGMENT
6065   2D85             
6066   2D85             ; --- BEGIN DATA SEGMENT
6067   2D85 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
6067   2D89 45 46 47 48 
6067   2D8D 49 4A 4B 4C 
6067   2D91 4D 4E 4F 50 
6067   2D95 51 52 53 54 
6067   2D99 55 56 57 58 
6067   2D9D 59 5A 61 62 
6067   2DA1 63 64 65 66 
6067   2DA5 67 68 69 6A 
6067   2DA9 6B 6C 6D 6E 
6067   2DAD 6F 70 71 72 
6067   2DB1 73 74 75 76 
6067   2DB5 77 78 79 7A 
6067   2DB9 30 31 32 33 
6067   2DBD 34 35 36 37 
6067   2DC1 38 39 2B 2F 
6067   2DC5 00 
6068   2DC6 85 2D       _base64_table: .dw _base64_table_data
6069   2DC8 00 00       st_fopen_max_handle: .dw 0
6070   2DCA 0A 45 6E 74 _s0: .db "\nEnter a base64 encoded string to decode: ", 0
6070   2DCE 65 72 20 61 
6070   2DD2 20 62 61 73 
6070   2DD6 65 36 34 20 
6070   2DDA 65 6E 63 6F 
6070   2DDE 64 65 64 20 
6070   2DE2 73 74 72 69 
6070   2DE6 6E 67 20 74 
6070   2DEA 6F 20 64 65 
6070   2DEE 63 6F 64 65 
6070   2DF2 3A 20 00 
6071   2DF5 0A 45 6E 63 _s1: .db "\nEncoded string: %s\n", 0
6071   2DF9 6F 64 65 64 
6071   2DFD 20 73 74 72 
6071   2E01 69 6E 67 3A 
6071   2E05 20 25 73 0A 
6071   2E09 00 
6072   2E0A 0A 44 65 63 _s2: .db "\nDecoded string: %s\n", 0
6072   2E0E 6F 64 65 64 
6072   2E12 20 73 74 72 
6072   2E16 69 6E 67 3A 
6072   2E1A 20 25 73 0A 
6072   2E1E 00 
6073   2E1F 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
6073   2E23 70 65 63 74 
6073   2E27 65 64 20 66 
6073   2E2B 6F 72 6D 61 
6073   2E2F 74 20 69 6E 
6073   2E33 20 70 72 69 
6073   2E37 6E 74 66 2E 
6073   2E3B 00 
6074   2E3C 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
6074   2E40 72 3A 20 55 
6074   2E44 6E 6B 6E 6F 
6074   2E48 77 6E 20 61 
6074   2E4C 72 67 75 6D 
6074   2E50 65 6E 74 20 
6074   2E54 74 79 70 65 
6074   2E58 2E 0A 00 
6075   2E5B 1B 5B 32 4A _s5: .db "\033[2J\033[H", 0
6075   2E5F 1B 5B 48 00 
6076   2E63             
6077   2E63 65 2E       _heap_top: .dw _heap
6078   2E65 00          _heap: .db 0
6079   2E66             ; --- END DATA SEGMENT
6080   2E66             
6081   2E66             .end
tasm: Number of errors = 0
