0001   0000             ; --- FILENAME: programs/base64
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; char input[512]; 
0011   0408             ; $input 
0012   0408             ;; char output[256]; 
0013   0408             ; $output 
0014   0408             ;; printf("Enter a base64 encoded string to decode: "); 
0015   0408 26 71 22      mov b, _s0 ; "Enter a base64 encoded string to decode: "
0016   040B FD AB         swp b
0017   040D D8            push b
0018   040E 07 F3 07      call printf
0019   0411 51 02 00      add sp, 2
0020   0414             ;; gets(input); 
0021   0414 FA 01 FE      lea d, [bp + -511] ; $input
0022   0417 2D            mov b, d
0023   0418 FD AB         swp b
0024   041A D8            push b
0025   041B 07 09 0E      call gets
0026   041E 51 02 00      add sp, 2
0027   0421             ;; base64_encode(input, output); 
0028   0421 FA 01 FD      lea d, [bp + -767] ; $output
0029   0424 2D            mov b, d
0030   0425 FD AB         swp b
0031   0427 D8            push b
0032   0428 FA 01 FE      lea d, [bp + -511] ; $input
0033   042B 2D            mov b, d
0034   042C FD AB         swp b
0035   042E D8            push b
0036   042F 07 32 19      call base64_encode
0037   0432 51 04 00      add sp, 4
0038   0435             ;; printf("Encoded string: %s\n", output); 
0039   0435 FA 01 FD      lea d, [bp + -767] ; $output
0040   0438 2D            mov b, d
0041   0439 FD AB         swp b
0042   043B D8            push b
0043   043C 26 9B 22      mov b, _s1 ; "Encoded string: %s\n"
0044   043F FD AB         swp b
0045   0441 D8            push b
0046   0442 07 F3 07      call printf
0047   0445 51 04 00      add sp, 4
0048   0448             ;; base64_decode(output, input); 
0049   0448 FA 01 FE      lea d, [bp + -511] ; $input
0050   044B 2D            mov b, d
0051   044C FD AB         swp b
0052   044E D8            push b
0053   044F FA 01 FD      lea d, [bp + -767] ; $output
0054   0452 2D            mov b, d
0055   0453 FD AB         swp b
0056   0455 D8            push b
0057   0456 07 08 1E      call base64_decode
0058   0459 51 04 00      add sp, 4
0059   045C             ;; printf("Decoded string: %s\n", input); 
0060   045C FA 01 FE      lea d, [bp + -511] ; $input
0061   045F 2D            mov b, d
0062   0460 FD AB         swp b
0063   0462 D8            push b
0064   0463 26 AF 22      mov b, _s2 ; "Decoded string: %s\n"
0065   0466 FD AB         swp b
0066   0468 D8            push b
0067   0469 07 F3 07      call printf
0068   046C 51 04 00      add sp, 4
0069   046F             ;; return 0; 
0070   046F 26 00 00      mov b, $0
0071   0472 F9            leave
0072   0473 05 0B         syscall sys_terminate_proc
0073   0475             
0074   0475             strcpy:
0075   0475 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0076   0478             ;; char *psrc; 
0077   0478             ; $psrc 
0078   0478             ;; char *pdest; 
0079   0478             ; $pdest 
0080   0478             ;; psrc = src; 
0081   0478 FA FF FF      lea d, [bp + -1] ; $psrc
0082   047B DA            push d
0083   047C FA 07 00      lea d, [bp + 7] ; $src
0084   047F 2A            mov b, [d]
0085   0480 E7            pop d
0086   0481 FD 43         mov [d], b
0087   0483             ;; pdest = dest; 
0088   0483 FA FD FF      lea d, [bp + -3] ; $pdest
0089   0486 DA            push d
0090   0487 FA 05 00      lea d, [bp + 5] ; $dest
0091   048A 2A            mov b, [d]
0092   048B E7            pop d
0093   048C FD 43         mov [d], b
0094   048E             ;; while(*psrc) *pdest++ = *psrc++; 
0095   048E             _while1_cond:
0096   048E FA FF FF      lea d, [bp + -1] ; $psrc
0097   0491 2A            mov b, [d]
0098   0492 74            mov d, b
0099   0493 32            mov bl, [d]
0100   0494 A7 00         mov bh, 0
0101   0496 C0 00 00      cmp b, 0
0102   0499 C6 C1 04      je _while1_exit
0103   049C             _while1_block:
0104   049C             ;; *pdest++ = *psrc++; 
0105   049C FA FD FF      lea d, [bp + -3] ; $pdest
0106   049F 2A            mov b, [d]
0107   04A0 D8            push b
0108   04A1 FD 77         inc b
0109   04A3 FA FD FF      lea d, [bp + -3] ; $pdest
0110   04A6 FD 43         mov [d], b
0111   04A8 E5            pop b
0112   04A9 D8            push b
0113   04AA FA FF FF      lea d, [bp + -1] ; $psrc
0114   04AD 2A            mov b, [d]
0115   04AE D8            push b
0116   04AF FD 77         inc b
0117   04B1 FA FF FF      lea d, [bp + -1] ; $psrc
0118   04B4 FD 43         mov [d], b
0119   04B6 E5            pop b
0120   04B7 74            mov d, b
0121   04B8 32            mov bl, [d]
0122   04B9 A7 00         mov bh, 0
0123   04BB E7            pop d
0124   04BC FD 3E         mov [d], bl
0125   04BE 0A 8E 04      jmp _while1_cond
0126   04C1             _while1_exit:
0127   04C1             ;; *pdest = '\0'; 
0128   04C1 FA FD FF      lea d, [bp + -3] ; $pdest
0129   04C4 2A            mov b, [d]
0130   04C5 D8            push b
0131   04C6 26 00 00      mov b, $0
0132   04C9 E7            pop d
0133   04CA FD 3E         mov [d], bl
0134   04CC F9            leave
0135   04CD 09            ret
0136   04CE             
0137   04CE             strcmp:
0138   04CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0139   04D1             ;; while (*s1 && (*s1 == *s2)) { 
0140   04D1             _while2_cond:
0141   04D1 FA 05 00      lea d, [bp + 5] ; $s1
0142   04D4 2A            mov b, [d]
0143   04D5 74            mov d, b
0144   04D6 32            mov bl, [d]
0145   04D7 A7 00         mov bh, 0
0146   04D9 D7            push a
0147   04DA 11            mov a, b
0148   04DB FA 05 00      lea d, [bp + 5] ; $s1
0149   04DE 2A            mov b, [d]
0150   04DF 74            mov d, b
0151   04E0 32            mov bl, [d]
0152   04E1 A7 00         mov bh, 0
0153   04E3             ; START RELATIONAL
0154   04E3 D7            push a
0155   04E4 11            mov a, b
0156   04E5 FA 07 00      lea d, [bp + 7] ; $s2
0157   04E8 2A            mov b, [d]
0158   04E9 74            mov d, b
0159   04EA 32            mov bl, [d]
0160   04EB A7 00         mov bh, 0
0161   04ED B0            cmp a, b
0162   04EE FD 71         seq ; ==
0163   04F0 E4            pop a
0164   04F1             ; END RELATIONAL
0165   04F1 FD A7         sand a, b
0166   04F3 E4            pop a
0167   04F4 C0 00 00      cmp b, 0
0168   04F7 C6 17 05      je _while2_exit
0169   04FA             _while2_block:
0170   04FA             ;; s1++; 
0171   04FA FA 05 00      lea d, [bp + 5] ; $s1
0172   04FD 2A            mov b, [d]
0173   04FE D8            push b
0174   04FF FD 77         inc b
0175   0501 FA 05 00      lea d, [bp + 5] ; $s1
0176   0504 FD 43         mov [d], b
0177   0506 E5            pop b
0178   0507             ;; s2++; 
0179   0507 FA 07 00      lea d, [bp + 7] ; $s2
0180   050A 2A            mov b, [d]
0181   050B D8            push b
0182   050C FD 77         inc b
0183   050E FA 07 00      lea d, [bp + 7] ; $s2
0184   0511 FD 43         mov [d], b
0185   0513 E5            pop b
0186   0514 0A D1 04      jmp _while2_cond
0187   0517             _while2_exit:
0188   0517             ;; return *s1 - *s2; 
0189   0517 FA 05 00      lea d, [bp + 5] ; $s1
0190   051A 2A            mov b, [d]
0191   051B 74            mov d, b
0192   051C 32            mov bl, [d]
0193   051D A7 00         mov bh, 0
0194   051F             ; START TERMS
0195   051F D7            push a
0196   0520 11            mov a, b
0197   0521 FA 07 00      lea d, [bp + 7] ; $s2
0198   0524 2A            mov b, [d]
0199   0525 74            mov d, b
0200   0526 32            mov bl, [d]
0201   0527 A7 00         mov bh, 0
0202   0529 60            sub a, b
0203   052A 27            mov b, a
0204   052B E4            pop a
0205   052C             ; END TERMS
0206   052C F9            leave
0207   052D 09            ret
0208   052E             
0209   052E             strncmp:
0210   052E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0211   0531 F9            leave
0212   0532 09            ret
0213   0533             
0214   0533             strcat:
0215   0533 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0216   0536             ;; int dest_len; 
0217   0536             ; $dest_len 
0218   0536             ;; int i; 
0219   0536             ; $i 
0220   0536             ;; dest_len = strlen(dest); 
0221   0536 FA FF FF      lea d, [bp + -1] ; $dest_len
0222   0539 DA            push d
0223   053A FA 05 00      lea d, [bp + 5] ; $dest
0224   053D 2A            mov b, [d]
0225   053E FD AB         swp b
0226   0540 D8            push b
0227   0541 07 E3 05      call strlen
0228   0544 51 02 00      add sp, 2
0229   0547 E7            pop d
0230   0548 FD 43         mov [d], b
0231   054A             ;; for (i = 0; src[i] != 0; i=i+1) { 
0232   054A             _for3_init:
0233   054A FA FD FF      lea d, [bp + -3] ; $i
0234   054D DA            push d
0235   054E 26 00 00      mov b, $0
0236   0551 E7            pop d
0237   0552 FD 43         mov [d], b
0238   0554             _for3_cond:
0239   0554 FA 07 00      lea d, [bp + 7] ; $src
0240   0557 FD 2A         mov d, [d]
0241   0559 D7            push a
0242   055A DA            push d
0243   055B FA FD FF      lea d, [bp + -3] ; $i
0244   055E 2A            mov b, [d]
0245   055F E7            pop d
0246   0560 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0247   0564 E4            pop a
0248   0565 32            mov bl, [d]
0249   0566 A7 00         mov bh, 0
0250   0568             ; START RELATIONAL
0251   0568 D7            push a
0252   0569 11            mov a, b
0253   056A 26 00 00      mov b, $0
0254   056D B0            cmp a, b
0255   056E FD 72         sneq ; !=
0256   0570 E4            pop a
0257   0571             ; END RELATIONAL
0258   0571 C0 00 00      cmp b, 0
0259   0574 C6 BD 05      je _for3_exit
0260   0577             _for3_block:
0261   0577             ;; dest[dest_len + i] = src[i]; 
0262   0577 FA 05 00      lea d, [bp + 5] ; $dest
0263   057A FD 2A         mov d, [d]
0264   057C D7            push a
0265   057D DA            push d
0266   057E FA FF FF      lea d, [bp + -1] ; $dest_len
0267   0581 2A            mov b, [d]
0268   0582             ; START TERMS
0269   0582 D7            push a
0270   0583 11            mov a, b
0271   0584 FA FD FF      lea d, [bp + -3] ; $i
0272   0587 2A            mov b, [d]
0273   0588 56            add b, a
0274   0589 E4            pop a
0275   058A             ; END TERMS
0276   058A E7            pop d
0277   058B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0278   058F E4            pop a
0279   0590 DA            push d
0280   0591 FA 07 00      lea d, [bp + 7] ; $src
0281   0594 FD 2A         mov d, [d]
0282   0596 D7            push a
0283   0597 DA            push d
0284   0598 FA FD FF      lea d, [bp + -3] ; $i
0285   059B 2A            mov b, [d]
0286   059C E7            pop d
0287   059D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0288   05A1 E4            pop a
0289   05A2 32            mov bl, [d]
0290   05A3 A7 00         mov bh, 0
0291   05A5 E7            pop d
0292   05A6 FD 3E         mov [d], bl
0293   05A8             _for3_update:
0294   05A8 FA FD FF      lea d, [bp + -3] ; $i
0295   05AB DA            push d
0296   05AC FA FD FF      lea d, [bp + -3] ; $i
0297   05AF 2A            mov b, [d]
0298   05B0             ; START TERMS
0299   05B0 D7            push a
0300   05B1 11            mov a, b
0301   05B2 26 01 00      mov b, $1
0302   05B5 56            add b, a
0303   05B6 E4            pop a
0304   05B7             ; END TERMS
0305   05B7 E7            pop d
0306   05B8 FD 43         mov [d], b
0307   05BA 0A 54 05      jmp _for3_cond
0308   05BD             _for3_exit:
0309   05BD             ;; dest[dest_len + i] = 0; 
0310   05BD FA 05 00      lea d, [bp + 5] ; $dest
0311   05C0 FD 2A         mov d, [d]
0312   05C2 D7            push a
0313   05C3 DA            push d
0314   05C4 FA FF FF      lea d, [bp + -1] ; $dest_len
0315   05C7 2A            mov b, [d]
0316   05C8             ; START TERMS
0317   05C8 D7            push a
0318   05C9 11            mov a, b
0319   05CA FA FD FF      lea d, [bp + -3] ; $i
0320   05CD 2A            mov b, [d]
0321   05CE 56            add b, a
0322   05CF E4            pop a
0323   05D0             ; END TERMS
0324   05D0 E7            pop d
0325   05D1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0326   05D5 E4            pop a
0327   05D6 DA            push d
0328   05D7 26 00 00      mov b, $0
0329   05DA E7            pop d
0330   05DB FD 3E         mov [d], bl
0331   05DD             ;; return dest; 
0332   05DD FA 05 00      lea d, [bp + 5] ; $dest
0333   05E0 2A            mov b, [d]
0334   05E1 F9            leave
0335   05E2 09            ret
0336   05E3             
0337   05E3             strlen:
0338   05E3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0339   05E6             ;; int length; 
0340   05E6             ; $length 
0341   05E6             ;; length = 0; 
0342   05E6 FA FF FF      lea d, [bp + -1] ; $length
0343   05E9 DA            push d
0344   05EA 26 00 00      mov b, $0
0345   05ED E7            pop d
0346   05EE FD 43         mov [d], b
0347   05F0             ;; while (str[length] != 0) { 
0348   05F0             _while4_cond:
0349   05F0 FA 05 00      lea d, [bp + 5] ; $str
0350   05F3 FD 2A         mov d, [d]
0351   05F5 D7            push a
0352   05F6 DA            push d
0353   05F7 FA FF FF      lea d, [bp + -1] ; $length
0354   05FA 2A            mov b, [d]
0355   05FB E7            pop d
0356   05FC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0357   0600 E4            pop a
0358   0601 32            mov bl, [d]
0359   0602 A7 00         mov bh, 0
0360   0604             ; START RELATIONAL
0361   0604 D7            push a
0362   0605 11            mov a, b
0363   0606 26 00 00      mov b, $0
0364   0609 B0            cmp a, b
0365   060A FD 72         sneq ; !=
0366   060C E4            pop a
0367   060D             ; END RELATIONAL
0368   060D C0 00 00      cmp b, 0
0369   0610 C6 23 06      je _while4_exit
0370   0613             _while4_block:
0371   0613             ;; length++; 
0372   0613 FA FF FF      lea d, [bp + -1] ; $length
0373   0616 2A            mov b, [d]
0374   0617 D8            push b
0375   0618 FD 77         inc b
0376   061A FA FF FF      lea d, [bp + -1] ; $length
0377   061D FD 43         mov [d], b
0378   061F E5            pop b
0379   0620 0A F0 05      jmp _while4_cond
0380   0623             _while4_exit:
0381   0623             ;; return length; 
0382   0623 FA FF FF      lea d, [bp + -1] ; $length
0383   0626 2A            mov b, [d]
0384   0627 F9            leave
0385   0628 09            ret
0386   0629             
0387   0629             exit:
0388   0629 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0389   062C             
0390   062C             ; --- BEGIN INLINE ASM BLOCK
0391   062C 05 0B         syscall sys_terminate_proc
0392   062E             ; --- END INLINE ASM BLOCK
0393   062E             
0394   062E F9            leave
0395   062F 09            ret
0396   0630             
0397   0630             memset:
0398   0630 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0399   0633             ;; int i; 
0400   0633             ; $i 
0401   0633             ;; for(i = 0; i < size; i++){ 
0402   0633             _for5_init:
0403   0633 FA FF FF      lea d, [bp + -1] ; $i
0404   0636 DA            push d
0405   0637 26 00 00      mov b, $0
0406   063A E7            pop d
0407   063B FD 43         mov [d], b
0408   063D             _for5_cond:
0409   063D FA FF FF      lea d, [bp + -1] ; $i
0410   0640 2A            mov b, [d]
0411   0641             ; START RELATIONAL
0412   0641 D7            push a
0413   0642 11            mov a, b
0414   0643 FA 08 00      lea d, [bp + 8] ; $size
0415   0646 2A            mov b, [d]
0416   0647 B0            cmp a, b
0417   0648 FD 73         slt ; < (signed)
0418   064A E4            pop a
0419   064B             ; END RELATIONAL
0420   064B C0 00 00      cmp b, 0
0421   064E C6 77 06      je _for5_exit
0422   0651             _for5_block:
0423   0651             ;; *(s+i) = c; 
0424   0651 FA 05 00      lea d, [bp + 5] ; $s
0425   0654 2A            mov b, [d]
0426   0655             ; START TERMS
0427   0655 D7            push a
0428   0656 11            mov a, b
0429   0657 FA FF FF      lea d, [bp + -1] ; $i
0430   065A 2A            mov b, [d]
0431   065B 56            add b, a
0432   065C E4            pop a
0433   065D             ; END TERMS
0434   065D D8            push b
0435   065E FA 07 00      lea d, [bp + 7] ; $c
0436   0661 32            mov bl, [d]
0437   0662 A7 00         mov bh, 0
0438   0664 E7            pop d
0439   0665 FD 3E         mov [d], bl
0440   0667             _for5_update:
0441   0667 FA FF FF      lea d, [bp + -1] ; $i
0442   066A 2A            mov b, [d]
0443   066B D8            push b
0444   066C FD 77         inc b
0445   066E FA FF FF      lea d, [bp + -1] ; $i
0446   0671 FD 43         mov [d], b
0447   0673 E5            pop b
0448   0674 0A 3D 06      jmp _for5_cond
0449   0677             _for5_exit:
0450   0677             ;; return s; 
0451   0677 FA 05 00      lea d, [bp + 5] ; $s
0452   067A 2A            mov b, [d]
0453   067B F9            leave
0454   067C 09            ret
0455   067D             
0456   067D             atoi:
0457   067D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0458   0680             ;; int result = 0;  // Initialize result 
0459   0680             ; $result 
0460   0680 10 00 00      mov a, $0
0461   0683 45 FF FF      mov [bp + -1], a
0462   0686             ;; int sign = 1;    // Initialize sign as positive 
0463   0686             ; $sign 
0464   0686 10 01 00      mov a, $1
0465   0689 45 FD FF      mov [bp + -3], a
0466   068C             ;; while (*str == ' ') str++; 
0467   068C             _while6_cond:
0468   068C FA 05 00      lea d, [bp + 5] ; $str
0469   068F 2A            mov b, [d]
0470   0690 74            mov d, b
0471   0691 32            mov bl, [d]
0472   0692 A7 00         mov bh, 0
0473   0694             ; START RELATIONAL
0474   0694 D7            push a
0475   0695 11            mov a, b
0476   0696 26 20 00      mov b, $20
0477   0699 B0            cmp a, b
0478   069A FD 71         seq ; ==
0479   069C E4            pop a
0480   069D             ; END RELATIONAL
0481   069D C0 00 00      cmp b, 0
0482   06A0 C6 B3 06      je _while6_exit
0483   06A3             _while6_block:
0484   06A3             ;; str++; 
0485   06A3 FA 05 00      lea d, [bp + 5] ; $str
0486   06A6 2A            mov b, [d]
0487   06A7 D8            push b
0488   06A8 FD 77         inc b
0489   06AA FA 05 00      lea d, [bp + 5] ; $str
0490   06AD FD 43         mov [d], b
0491   06AF E5            pop b
0492   06B0 0A 8C 06      jmp _while6_cond
0493   06B3             _while6_exit:
0494   06B3             ;; if (*str == '-' || *str == '+') { 
0495   06B3             _if7_cond:
0496   06B3 FA 05 00      lea d, [bp + 5] ; $str
0497   06B6 2A            mov b, [d]
0498   06B7 74            mov d, b
0499   06B8 32            mov bl, [d]
0500   06B9 A7 00         mov bh, 0
0501   06BB             ; START RELATIONAL
0502   06BB D7            push a
0503   06BC 11            mov a, b
0504   06BD 26 2D 00      mov b, $2d
0505   06C0 B0            cmp a, b
0506   06C1 FD 71         seq ; ==
0507   06C3 E4            pop a
0508   06C4             ; END RELATIONAL
0509   06C4 D7            push a
0510   06C5 11            mov a, b
0511   06C6 FA 05 00      lea d, [bp + 5] ; $str
0512   06C9 2A            mov b, [d]
0513   06CA 74            mov d, b
0514   06CB 32            mov bl, [d]
0515   06CC A7 00         mov bh, 0
0516   06CE             ; START RELATIONAL
0517   06CE D7            push a
0518   06CF 11            mov a, b
0519   06D0 26 2B 00      mov b, $2b
0520   06D3 B0            cmp a, b
0521   06D4 FD 71         seq ; ==
0522   06D6 E4            pop a
0523   06D7             ; END RELATIONAL
0524   06D7 FD A8         sor a, b ; ||
0525   06D9 E4            pop a
0526   06DA C0 00 00      cmp b, 0
0527   06DD C6 14 07      je _if7_exit
0528   06E0             _if7_true:
0529   06E0             ;; if (*str == '-') sign = -1; 
0530   06E0             _if8_cond:
0531   06E0 FA 05 00      lea d, [bp + 5] ; $str
0532   06E3 2A            mov b, [d]
0533   06E4 74            mov d, b
0534   06E5 32            mov bl, [d]
0535   06E6 A7 00         mov bh, 0
0536   06E8             ; START RELATIONAL
0537   06E8 D7            push a
0538   06E9 11            mov a, b
0539   06EA 26 2D 00      mov b, $2d
0540   06ED B0            cmp a, b
0541   06EE FD 71         seq ; ==
0542   06F0 E4            pop a
0543   06F1             ; END RELATIONAL
0544   06F1 C0 00 00      cmp b, 0
0545   06F4 C6 04 07      je _if8_exit
0546   06F7             _if8_true:
0547   06F7             ;; sign = -1; 
0548   06F7 FA FD FF      lea d, [bp + -3] ; $sign
0549   06FA DA            push d
0550   06FB 26 FF FF      mov b, $ffff
0551   06FE E7            pop d
0552   06FF FD 43         mov [d], b
0553   0701 0A 04 07      jmp _if8_exit
0554   0704             _if8_exit:
0555   0704             ;; str++; 
0556   0704 FA 05 00      lea d, [bp + 5] ; $str
0557   0707 2A            mov b, [d]
0558   0708 D8            push b
0559   0709 FD 77         inc b
0560   070B FA 05 00      lea d, [bp + 5] ; $str
0561   070E FD 43         mov [d], b
0562   0710 E5            pop b
0563   0711 0A 14 07      jmp _if7_exit
0564   0714             _if7_exit:
0565   0714             ;; while (*str >= '0' && *str <= '9') { 
0566   0714             _while9_cond:
0567   0714 FA 05 00      lea d, [bp + 5] ; $str
0568   0717 2A            mov b, [d]
0569   0718 74            mov d, b
0570   0719 32            mov bl, [d]
0571   071A A7 00         mov bh, 0
0572   071C             ; START RELATIONAL
0573   071C D7            push a
0574   071D 11            mov a, b
0575   071E 26 30 00      mov b, $30
0576   0721 B0            cmp a, b
0577   0722 FD 82         sgeu ; >= (unsigned)
0578   0724 E4            pop a
0579   0725             ; END RELATIONAL
0580   0725 D7            push a
0581   0726 11            mov a, b
0582   0727 FA 05 00      lea d, [bp + 5] ; $str
0583   072A 2A            mov b, [d]
0584   072B 74            mov d, b
0585   072C 32            mov bl, [d]
0586   072D A7 00         mov bh, 0
0587   072F             ; START RELATIONAL
0588   072F D7            push a
0589   0730 11            mov a, b
0590   0731 26 39 00      mov b, $39
0591   0734 B0            cmp a, b
0592   0735 FD 75         slu ; <= (unsigned)
0593   0737 E4            pop a
0594   0738             ; END RELATIONAL
0595   0738 FD A7         sand a, b
0596   073A E4            pop a
0597   073B C0 00 00      cmp b, 0
0598   073E C6 79 07      je _while9_exit
0599   0741             _while9_block:
0600   0741             ;; result = result * 10 + (*str - '0'); 
0601   0741 FA FF FF      lea d, [bp + -1] ; $result
0602   0744 DA            push d
0603   0745 FA FF FF      lea d, [bp + -1] ; $result
0604   0748 2A            mov b, [d]
0605   0749             ; START FACTORS
0606   0749 D7            push a
0607   074A 11            mov a, b
0608   074B 26 0A 00      mov b, $a
0609   074E AC            mul a, b ; *
0610   074F 11            mov a, b
0611   0750 27            mov b, a
0612   0751 E4            pop a
0613   0752             ; END FACTORS
0614   0752             ; START TERMS
0615   0752 D7            push a
0616   0753 11            mov a, b
0617   0754 FA 05 00      lea d, [bp + 5] ; $str
0618   0757 2A            mov b, [d]
0619   0758 74            mov d, b
0620   0759 32            mov bl, [d]
0621   075A A7 00         mov bh, 0
0622   075C             ; START TERMS
0623   075C D7            push a
0624   075D 11            mov a, b
0625   075E 26 30 00      mov b, $30
0626   0761 60            sub a, b
0627   0762 27            mov b, a
0628   0763 E4            pop a
0629   0764             ; END TERMS
0630   0764 56            add b, a
0631   0765 E4            pop a
0632   0766             ; END TERMS
0633   0766 E7            pop d
0634   0767 FD 43         mov [d], b
0635   0769             ;; str++; 
0636   0769 FA 05 00      lea d, [bp + 5] ; $str
0637   076C 2A            mov b, [d]
0638   076D D8            push b
0639   076E FD 77         inc b
0640   0770 FA 05 00      lea d, [bp + 5] ; $str
0641   0773 FD 43         mov [d], b
0642   0775 E5            pop b
0643   0776 0A 14 07      jmp _while9_cond
0644   0779             _while9_exit:
0645   0779             ;; return sign * result; 
0646   0779 FA FD FF      lea d, [bp + -3] ; $sign
0647   077C 2A            mov b, [d]
0648   077D             ; START FACTORS
0649   077D D7            push a
0650   077E 11            mov a, b
0651   077F FA FF FF      lea d, [bp + -1] ; $result
0652   0782 2A            mov b, [d]
0653   0783 AC            mul a, b ; *
0654   0784 11            mov a, b
0655   0785 27            mov b, a
0656   0786 E4            pop a
0657   0787             ; END FACTORS
0658   0787 F9            leave
0659   0788 09            ret
0660   0789             
0661   0789             rand:
0662   0789 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0663   078C             ;; int  sec; 
0664   078C             ; $sec 
0665   078C             
0666   078C             ; --- BEGIN INLINE ASM BLOCK
0667   078C 19 00         mov al, 0
0668   078E 05 01         syscall sys_rtc					
0669   0790 1A            mov al, ah
0670   0791 FA FF FF      lea d, [bp + -1] ; $sec
0671   0794 1E            mov al, [d]
0672   0795 22 00         mov ah, 0
0673   0797             ; --- END INLINE ASM BLOCK
0674   0797             
0675   0797             ;; return sec; 
0676   0797 FA FF FF      lea d, [bp + -1] ; $sec
0677   079A 2A            mov b, [d]
0678   079B F9            leave
0679   079C 09            ret
0680   079D             
0681   079D             alloc:
0682   079D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0683   07A0             ;; heap_top = heap_top + bytes; 
0684   07A0 3B 07 23      mov d, _heap_top ; $heap_top
0685   07A3 DA            push d
0686   07A4 3B 07 23      mov d, _heap_top ; $heap_top
0687   07A7 2A            mov b, [d]
0688   07A8             ; START TERMS
0689   07A8 D7            push a
0690   07A9 11            mov a, b
0691   07AA FA 05 00      lea d, [bp + 5] ; $bytes
0692   07AD 2A            mov b, [d]
0693   07AE 56            add b, a
0694   07AF E4            pop a
0695   07B0             ; END TERMS
0696   07B0 E7            pop d
0697   07B1 FD 43         mov [d], b
0698   07B3             ;; return heap_top - bytes; 
0699   07B3 3B 07 23      mov d, _heap_top ; $heap_top
0700   07B6 2A            mov b, [d]
0701   07B7             ; START TERMS
0702   07B7 D7            push a
0703   07B8 11            mov a, b
0704   07B9 FA 05 00      lea d, [bp + 5] ; $bytes
0705   07BC 2A            mov b, [d]
0706   07BD 60            sub a, b
0707   07BE 27            mov b, a
0708   07BF E4            pop a
0709   07C0             ; END TERMS
0710   07C0 F9            leave
0711   07C1 09            ret
0712   07C2             
0713   07C2             free:
0714   07C2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0715   07C5             ;; return heap_top = heap_top - bytes; 
0716   07C5 3B 07 23      mov d, _heap_top ; $heap_top
0717   07C8 DA            push d
0718   07C9 3B 07 23      mov d, _heap_top ; $heap_top
0719   07CC 2A            mov b, [d]
0720   07CD             ; START TERMS
0721   07CD D7            push a
0722   07CE 11            mov a, b
0723   07CF FA 05 00      lea d, [bp + 5] ; $bytes
0724   07D2 2A            mov b, [d]
0725   07D3 60            sub a, b
0726   07D4 27            mov b, a
0727   07D5 E4            pop a
0728   07D6             ; END TERMS
0729   07D6 E7            pop d
0730   07D7 FD 43         mov [d], b
0731   07D9 F9            leave
0732   07DA 09            ret
0733   07DB             
0734   07DB             fopen:
0735   07DB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0736   07DE             ;; FILE *fp; 
0737   07DE             ; $fp 
0738   07DE             ;; fp = alloc(sizeof(int)); 
0739   07DE FA FF FF      lea d, [bp + -1] ; $fp
0740   07E1 DA            push d
0741   07E2 26 02 00      mov b, 2
0742   07E5 FD AB         swp b
0743   07E7 D8            push b
0744   07E8 07 9D 07      call alloc
0745   07EB 51 02 00      add sp, 2
0746   07EE E7            pop d
0747   07EF FD 43         mov [d], b
0748   07F1 F9            leave
0749   07F2 09            ret
0750   07F3             
0751   07F3             printf:
0752   07F3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0753   07F6             ;; char *p, *format_p; 
0754   07F6             ; $p 
0755   07F6             ; $format_p 
0756   07F6             ;; format_p = format; 
0757   07F6 FA FD FF      lea d, [bp + -3] ; $format_p
0758   07F9 DA            push d
0759   07FA FA 05 00      lea d, [bp + 5] ; $format
0760   07FD 2A            mov b, [d]
0761   07FE E7            pop d
0762   07FF FD 43         mov [d], b
0763   0801             ;; p = &format + 2; 
0764   0801 FA FF FF      lea d, [bp + -1] ; $p
0765   0804 DA            push d
0766   0805 FA 05 00      lea d, [bp + 5] ; $format
0767   0808 2D            mov b, d
0768   0809             ; START TERMS
0769   0809 D7            push a
0770   080A 11            mov a, b
0771   080B 26 02 00      mov b, $2
0772   080E 56            add b, a
0773   080F E4            pop a
0774   0810             ; END TERMS
0775   0810 E7            pop d
0776   0811 FD 43         mov [d], b
0777   0813             ;; for(;;){ 
0778   0813             _for10_init:
0779   0813             _for10_cond:
0780   0813             _for10_block:
0781   0813             ;; if(!*format_p) break; 
0782   0813             _if11_cond:
0783   0813 FA FD FF      lea d, [bp + -3] ; $format_p
0784   0816 2A            mov b, [d]
0785   0817 74            mov d, b
0786   0818 32            mov bl, [d]
0787   0819 A7 00         mov bh, 0
0788   081B C0 00 00      cmp b, 0
0789   081E FD 71         seq ; !
0790   0820 C0 00 00      cmp b, 0
0791   0823 C6 2C 08      je _if11_else
0792   0826             _if11_true:
0793   0826             ;; break; 
0794   0826 0A 53 0A      jmp _for10_exit ; for break
0795   0829 0A 50 0A      jmp _if11_exit
0796   082C             _if11_else:
0797   082C             ;; if(*format_p == '%'){ 
0798   082C             _if12_cond:
0799   082C FA FD FF      lea d, [bp + -3] ; $format_p
0800   082F 2A            mov b, [d]
0801   0830 74            mov d, b
0802   0831 32            mov bl, [d]
0803   0832 A7 00         mov bh, 0
0804   0834             ; START RELATIONAL
0805   0834 D7            push a
0806   0835 11            mov a, b
0807   0836 26 25 00      mov b, $25
0808   0839 B0            cmp a, b
0809   083A FD 71         seq ; ==
0810   083C E4            pop a
0811   083D             ; END RELATIONAL
0812   083D C0 00 00      cmp b, 0
0813   0840 C6 34 0A      je _if12_else
0814   0843             _if12_true:
0815   0843             ;; format_p++; 
0816   0843 FA FD FF      lea d, [bp + -3] ; $format_p
0817   0846 2A            mov b, [d]
0818   0847 D8            push b
0819   0848 FD 77         inc b
0820   084A FA FD FF      lea d, [bp + -3] ; $format_p
0821   084D FD 43         mov [d], b
0822   084F E5            pop b
0823   0850             ;; switch(*format_p){ 
0824   0850             _switch13_expr:
0825   0850 FA FD FF      lea d, [bp + -3] ; $format_p
0826   0853 2A            mov b, [d]
0827   0854 74            mov d, b
0828   0855 32            mov bl, [d]
0829   0856 A7 00         mov bh, 0
0830   0858             _switch13_comparisons:
0831   0858 C1 6C         cmp bl, $6c
0832   085A C6 86 08      je _switch13_case0
0833   085D C1 4C         cmp bl, $4c
0834   085F C6 86 08      je _switch13_case1
0835   0862 C1 64         cmp bl, $64
0836   0864 C6 74 09      je _switch13_case2
0837   0867 C1 69         cmp bl, $69
0838   0869 C6 74 09      je _switch13_case3
0839   086C C1 75         cmp bl, $75
0840   086E C6 98 09      je _switch13_case4
0841   0871 C1 78         cmp bl, $78
0842   0873 C6 BC 09      je _switch13_case5
0843   0876 C1 63         cmp bl, $63
0844   0878 C6 DA 09      je _switch13_case6
0845   087B C1 73         cmp bl, $73
0846   087D C6 F9 09      je _switch13_case7
0847   0880 0A 18 0A      jmp _switch13_default
0848   0883 0A 24 0A      jmp _switch13_exit
0849   0886             _switch13_case0:
0850   0886             _switch13_case1:
0851   0886             ;; format_p++; 
0852   0886 FA FD FF      lea d, [bp + -3] ; $format_p
0853   0889 2A            mov b, [d]
0854   088A D8            push b
0855   088B FD 77         inc b
0856   088D FA FD FF      lea d, [bp + -3] ; $format_p
0857   0890 FD 43         mov [d], b
0858   0892 E5            pop b
0859   0893             ;; if(*format_p == 'd' || *format_p == 'i') 
0860   0893             _if14_cond:
0861   0893 FA FD FF      lea d, [bp + -3] ; $format_p
0862   0896 2A            mov b, [d]
0863   0897 74            mov d, b
0864   0898 32            mov bl, [d]
0865   0899 A7 00         mov bh, 0
0866   089B             ; START RELATIONAL
0867   089B D7            push a
0868   089C 11            mov a, b
0869   089D 26 64 00      mov b, $64
0870   08A0 B0            cmp a, b
0871   08A1 FD 71         seq ; ==
0872   08A3 E4            pop a
0873   08A4             ; END RELATIONAL
0874   08A4 D7            push a
0875   08A5 11            mov a, b
0876   08A6 FA FD FF      lea d, [bp + -3] ; $format_p
0877   08A9 2A            mov b, [d]
0878   08AA 74            mov d, b
0879   08AB 32            mov bl, [d]
0880   08AC A7 00         mov bh, 0
0881   08AE             ; START RELATIONAL
0882   08AE D7            push a
0883   08AF 11            mov a, b
0884   08B0 26 69 00      mov b, $69
0885   08B3 B0            cmp a, b
0886   08B4 FD 71         seq ; ==
0887   08B6 E4            pop a
0888   08B7             ; END RELATIONAL
0889   08B7 FD A8         sor a, b ; ||
0890   08B9 E4            pop a
0891   08BA C0 00 00      cmp b, 0
0892   08BD C6 E2 08      je _if14_else
0893   08C0             _if14_true:
0894   08C0             ;; print_signed_long(*(long *)p); 
0895   08C0 FA FF FF      lea d, [bp + -1] ; $p
0896   08C3 2A            mov b, [d]
0897   08C4 AB            snex b
0898   08C5 FD 39         mov c, b
0899   08C7 74            mov d, b
0900   08C8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0901   08CB FD 39         mov c, b ; And place it into C
0902   08CD 2A            mov b, [d] ; Lower Word in B
0903   08CE FD 79         mov g, b
0904   08D0 28            mov b, c
0905   08D1 FD AB         swp b
0906   08D3 D8            push b
0907   08D4 FD 27         mov b, g
0908   08D6 FD AB         swp b
0909   08D8 D8            push b
0910   08D9 07 10 0F      call print_signed_long
0911   08DC 51 04 00      add sp, 4
0912   08DF 0A 5F 09      jmp _if14_exit
0913   08E2             _if14_else:
0914   08E2             ;; if(*format_p == 'u') 
0915   08E2             _if15_cond:
0916   08E2 FA FD FF      lea d, [bp + -3] ; $format_p
0917   08E5 2A            mov b, [d]
0918   08E6 74            mov d, b
0919   08E7 32            mov bl, [d]
0920   08E8 A7 00         mov bh, 0
0921   08EA             ; START RELATIONAL
0922   08EA D7            push a
0923   08EB 11            mov a, b
0924   08EC 26 75 00      mov b, $75
0925   08EF B0            cmp a, b
0926   08F0 FD 71         seq ; ==
0927   08F2 E4            pop a
0928   08F3             ; END RELATIONAL
0929   08F3 C0 00 00      cmp b, 0
0930   08F6 C6 1D 09      je _if15_else
0931   08F9             _if15_true:
0932   08F9             ;; print_unsigned_long(*(unsigned long *)p); 
0933   08F9 FA FF FF      lea d, [bp + -1] ; $p
0934   08FC 2A            mov b, [d]
0935   08FD A7 00         mov bh, 0
0936   08FF 38 00 00      mov c, 0
0937   0902 74            mov d, b
0938   0903 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0939   0906 FD 39         mov c, b ; And place it into C
0940   0908 2A            mov b, [d] ; Lower Word in B
0941   0909 FD 79         mov g, b
0942   090B 28            mov b, c
0943   090C FD AB         swp b
0944   090E D8            push b
0945   090F FD 27         mov b, g
0946   0911 FD AB         swp b
0947   0913 D8            push b
0948   0914 07 46 12      call print_unsigned_long
0949   0917 51 04 00      add sp, 4
0950   091A 0A 5F 09      jmp _if15_exit
0951   091D             _if15_else:
0952   091D             ;; if(*format_p == 'x') 
0953   091D             _if16_cond:
0954   091D FA FD FF      lea d, [bp + -3] ; $format_p
0955   0920 2A            mov b, [d]
0956   0921 74            mov d, b
0957   0922 32            mov bl, [d]
0958   0923 A7 00         mov bh, 0
0959   0925             ; START RELATIONAL
0960   0925 D7            push a
0961   0926 11            mov a, b
0962   0927 26 78 00      mov b, $78
0963   092A B0            cmp a, b
0964   092B FD 71         seq ; ==
0965   092D E4            pop a
0966   092E             ; END RELATIONAL
0967   092E C0 00 00      cmp b, 0
0968   0931 C6 53 09      je _if16_else
0969   0934             _if16_true:
0970   0934             ;; printx32(*(long int *)p); 
0971   0934 FA FF FF      lea d, [bp + -1] ; $p
0972   0937 2A            mov b, [d]
0973   0938 74            mov d, b
0974   0939 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0975   093C FD 39         mov c, b ; And place it into C
0976   093E 2A            mov b, [d] ; Lower Word in B
0977   093F FD 79         mov g, b
0978   0941 28            mov b, c
0979   0942 FD AB         swp b
0980   0944 D8            push b
0981   0945 FD 27         mov b, g
0982   0947 FD AB         swp b
0983   0949 D8            push b
0984   094A 07 9F 0C      call printx32
0985   094D 51 04 00      add sp, 4
0986   0950 0A 5F 09      jmp _if16_exit
0987   0953             _if16_else:
0988   0953             ;; err("Unexpected format in printf."); 
0989   0953 26 C3 22      mov b, _s3 ; "Unexpected format in printf."
0990   0956 FD AB         swp b
0991   0958 D8            push b
0992   0959 07 8D 0C      call err
0993   095C 51 02 00      add sp, 2
0994   095F             _if16_exit:
0995   095F             _if15_exit:
0996   095F             _if14_exit:
0997   095F             ;; p = p + 4; 
0998   095F FA FF FF      lea d, [bp + -1] ; $p
0999   0962 DA            push d
1000   0963 FA FF FF      lea d, [bp + -1] ; $p
1001   0966 2A            mov b, [d]
1002   0967             ; START TERMS
1003   0967 D7            push a
1004   0968 11            mov a, b
1005   0969 26 04 00      mov b, $4
1006   096C 56            add b, a
1007   096D E4            pop a
1008   096E             ; END TERMS
1009   096E E7            pop d
1010   096F FD 43         mov [d], b
1011   0971             ;; break; 
1012   0971 0A 24 0A      jmp _switch13_exit ; case break
1013   0974             _switch13_case2:
1014   0974             _switch13_case3:
1015   0974             ;; print_signed(*(int*)p); 
1016   0974 FA FF FF      lea d, [bp + -1] ; $p
1017   0977 2A            mov b, [d]
1018   0978 74            mov d, b
1019   0979 2A            mov b, [d]
1020   097A FD AB         swp b
1021   097C D8            push b
1022   097D 07 23 0E      call print_signed
1023   0980 51 02 00      add sp, 2
1024   0983             ;; p = p + 2; 
1025   0983 FA FF FF      lea d, [bp + -1] ; $p
1026   0986 DA            push d
1027   0987 FA FF FF      lea d, [bp + -1] ; $p
1028   098A 2A            mov b, [d]
1029   098B             ; START TERMS
1030   098B D7            push a
1031   098C 11            mov a, b
1032   098D 26 02 00      mov b, $2
1033   0990 56            add b, a
1034   0991 E4            pop a
1035   0992             ; END TERMS
1036   0992 E7            pop d
1037   0993 FD 43         mov [d], b
1038   0995             ;; break; 
1039   0995 0A 24 0A      jmp _switch13_exit ; case break
1040   0998             _switch13_case4:
1041   0998             ;; print_unsigned(*(unsigned int*)p); 
1042   0998 FA FF FF      lea d, [bp + -1] ; $p
1043   099B 2A            mov b, [d]
1044   099C 74            mov d, b
1045   099D 2A            mov b, [d]
1046   099E FD AB         swp b
1047   09A0 D8            push b
1048   09A1 07 3B 14      call print_unsigned
1049   09A4 51 02 00      add sp, 2
1050   09A7             ;; p = p + 2; 
1051   09A7 FA FF FF      lea d, [bp + -1] ; $p
1052   09AA DA            push d
1053   09AB FA FF FF      lea d, [bp + -1] ; $p
1054   09AE 2A            mov b, [d]
1055   09AF             ; START TERMS
1056   09AF D7            push a
1057   09B0 11            mov a, b
1058   09B1 26 02 00      mov b, $2
1059   09B4 56            add b, a
1060   09B5 E4            pop a
1061   09B6             ; END TERMS
1062   09B6 E7            pop d
1063   09B7 FD 43         mov [d], b
1064   09B9             ;; break; 
1065   09B9 0A 24 0A      jmp _switch13_exit ; case break
1066   09BC             _switch13_case5:
1067   09BC             
1068   09BC             ; --- BEGIN INLINE ASM BLOCK
1069   09BC FA FF FF      lea d, [bp + -1] ; $p
1070   09BF FD 2A         mov d, [d]
1071   09C1 2A            mov b, [d]
1072   09C2 07 32 18      call print_u16x
1073   09C5             ; --- END INLINE ASM BLOCK
1074   09C5             
1075   09C5             ;; p = p + 2; 
1076   09C5 FA FF FF      lea d, [bp + -1] ; $p
1077   09C8 DA            push d
1078   09C9 FA FF FF      lea d, [bp + -1] ; $p
1079   09CC 2A            mov b, [d]
1080   09CD             ; START TERMS
1081   09CD D7            push a
1082   09CE 11            mov a, b
1083   09CF 26 02 00      mov b, $2
1084   09D2 56            add b, a
1085   09D3 E4            pop a
1086   09D4             ; END TERMS
1087   09D4 E7            pop d
1088   09D5 FD 43         mov [d], b
1089   09D7             ;; break; 
1090   09D7 0A 24 0A      jmp _switch13_exit ; case break
1091   09DA             _switch13_case6:
1092   09DA             
1093   09DA             ; --- BEGIN INLINE ASM BLOCK
1094   09DA FA FF FF      lea d, [bp + -1] ; $p
1095   09DD FD 2A         mov d, [d]
1096   09DF 1E            mov al, [d]
1097   09E0 23            mov ah, al
1098   09E1 07 90 16      call _putchar
1099   09E4             ; --- END INLINE ASM BLOCK
1100   09E4             
1101   09E4             ;; p = p + 2; 
1102   09E4 FA FF FF      lea d, [bp + -1] ; $p
1103   09E7 DA            push d
1104   09E8 FA FF FF      lea d, [bp + -1] ; $p
1105   09EB 2A            mov b, [d]
1106   09EC             ; START TERMS
1107   09EC D7            push a
1108   09ED 11            mov a, b
1109   09EE 26 02 00      mov b, $2
1110   09F1 56            add b, a
1111   09F2 E4            pop a
1112   09F3             ; END TERMS
1113   09F3 E7            pop d
1114   09F4 FD 43         mov [d], b
1115   09F6             ;; break; 
1116   09F6 0A 24 0A      jmp _switch13_exit ; case break
1117   09F9             _switch13_case7:
1118   09F9             
1119   09F9             ; --- BEGIN INLINE ASM BLOCK
1120   09F9 FA FF FF      lea d, [bp + -1] ; $p
1121   09FC FD 2A         mov d, [d]
1122   09FE FD 2A         mov d, [d]
1123   0A00 07 DA 17      call _puts
1124   0A03             ; --- END INLINE ASM BLOCK
1125   0A03             
1126   0A03             ;; p = p + 2; 
1127   0A03 FA FF FF      lea d, [bp + -1] ; $p
1128   0A06 DA            push d
1129   0A07 FA FF FF      lea d, [bp + -1] ; $p
1130   0A0A 2A            mov b, [d]
1131   0A0B             ; START TERMS
1132   0A0B D7            push a
1133   0A0C 11            mov a, b
1134   0A0D 26 02 00      mov b, $2
1135   0A10 56            add b, a
1136   0A11 E4            pop a
1137   0A12             ; END TERMS
1138   0A12 E7            pop d
1139   0A13 FD 43         mov [d], b
1140   0A15             ;; break; 
1141   0A15 0A 24 0A      jmp _switch13_exit ; case break
1142   0A18             _switch13_default:
1143   0A18             ;; print("Error: Unknown argument type.\n"); 
1144   0A18 26 E0 22      mov b, _s4 ; "Error: Unknown argument type.\n"
1145   0A1B FD AB         swp b
1146   0A1D D8            push b
1147   0A1E 07 4A 15      call print
1148   0A21 51 02 00      add sp, 2
1149   0A24             _switch13_exit:
1150   0A24             ;; format_p++; 
1151   0A24 FA FD FF      lea d, [bp + -3] ; $format_p
1152   0A27 2A            mov b, [d]
1153   0A28 D8            push b
1154   0A29 FD 77         inc b
1155   0A2B FA FD FF      lea d, [bp + -3] ; $format_p
1156   0A2E FD 43         mov [d], b
1157   0A30 E5            pop b
1158   0A31 0A 50 0A      jmp _if12_exit
1159   0A34             _if12_else:
1160   0A34             ;; putchar(*format_p); 
1161   0A34 FA FD FF      lea d, [bp + -3] ; $format_p
1162   0A37 2A            mov b, [d]
1163   0A38 74            mov d, b
1164   0A39 32            mov bl, [d]
1165   0A3A A7 00         mov bh, 0
1166   0A3C DD            push bl
1167   0A3D 07 08 15      call putchar
1168   0A40 51 01 00      add sp, 1
1169   0A43             ;; format_p++; 
1170   0A43 FA FD FF      lea d, [bp + -3] ; $format_p
1171   0A46 2A            mov b, [d]
1172   0A47 D8            push b
1173   0A48 FD 77         inc b
1174   0A4A FA FD FF      lea d, [bp + -3] ; $format_p
1175   0A4D FD 43         mov [d], b
1176   0A4F E5            pop b
1177   0A50             _if12_exit:
1178   0A50             _if11_exit:
1179   0A50             _for10_update:
1180   0A50 0A 13 08      jmp _for10_cond
1181   0A53             _for10_exit:
1182   0A53 F9            leave
1183   0A54 09            ret
1184   0A55             
1185   0A55             scanf:
1186   0A55 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1187   0A58             ;; char *p, *format_p; 
1188   0A58             ; $p 
1189   0A58             ; $format_p 
1190   0A58             ;; char c; 
1191   0A58             ; $c 
1192   0A58             ;; int i; 
1193   0A58             ; $i 
1194   0A58             ;; char input_string[  512                    ]; 
1195   0A58             ; $input_string 
1196   0A58             ;; format_p = format; 
1197   0A58 FA FD FF      lea d, [bp + -3] ; $format_p
1198   0A5B DA            push d
1199   0A5C FA 05 00      lea d, [bp + 5] ; $format
1200   0A5F 2A            mov b, [d]
1201   0A60 E7            pop d
1202   0A61 FD 43         mov [d], b
1203   0A63             ;; p = &format + 2; 
1204   0A63 FA FF FF      lea d, [bp + -1] ; $p
1205   0A66 DA            push d
1206   0A67 FA 05 00      lea d, [bp + 5] ; $format
1207   0A6A 2D            mov b, d
1208   0A6B             ; START TERMS
1209   0A6B D7            push a
1210   0A6C 11            mov a, b
1211   0A6D 26 02 00      mov b, $2
1212   0A70 56            add b, a
1213   0A71 E4            pop a
1214   0A72             ; END TERMS
1215   0A72 E7            pop d
1216   0A73 FD 43         mov [d], b
1217   0A75             ;; for(;;){ 
1218   0A75             _for17_init:
1219   0A75             _for17_cond:
1220   0A75             _for17_block:
1221   0A75             ;; if(!*format_p) break; 
1222   0A75             _if18_cond:
1223   0A75 FA FD FF      lea d, [bp + -3] ; $format_p
1224   0A78 2A            mov b, [d]
1225   0A79 74            mov d, b
1226   0A7A 32            mov bl, [d]
1227   0A7B A7 00         mov bh, 0
1228   0A7D C0 00 00      cmp b, 0
1229   0A80 FD 71         seq ; !
1230   0A82 C0 00 00      cmp b, 0
1231   0A85 C6 8E 0A      je _if18_else
1232   0A88             _if18_true:
1233   0A88             ;; break; 
1234   0A88 0A 8B 0C      jmp _for17_exit ; for break
1235   0A8B 0A 88 0C      jmp _if18_exit
1236   0A8E             _if18_else:
1237   0A8E             ;; if(*format_p == '%'){ 
1238   0A8E             _if19_cond:
1239   0A8E FA FD FF      lea d, [bp + -3] ; $format_p
1240   0A91 2A            mov b, [d]
1241   0A92 74            mov d, b
1242   0A93 32            mov bl, [d]
1243   0A94 A7 00         mov bh, 0
1244   0A96             ; START RELATIONAL
1245   0A96 D7            push a
1246   0A97 11            mov a, b
1247   0A98 26 25 00      mov b, $25
1248   0A9B B0            cmp a, b
1249   0A9C FD 71         seq ; ==
1250   0A9E E4            pop a
1251   0A9F             ; END RELATIONAL
1252   0A9F C0 00 00      cmp b, 0
1253   0AA2 C6 6C 0C      je _if19_else
1254   0AA5             _if19_true:
1255   0AA5             ;; format_p++; 
1256   0AA5 FA FD FF      lea d, [bp + -3] ; $format_p
1257   0AA8 2A            mov b, [d]
1258   0AA9 D8            push b
1259   0AAA FD 77         inc b
1260   0AAC FA FD FF      lea d, [bp + -3] ; $format_p
1261   0AAF FD 43         mov [d], b
1262   0AB1 E5            pop b
1263   0AB2             ;; switch(*format_p){ 
1264   0AB2             _switch20_expr:
1265   0AB2 FA FD FF      lea d, [bp + -3] ; $format_p
1266   0AB5 2A            mov b, [d]
1267   0AB6 74            mov d, b
1268   0AB7 32            mov bl, [d]
1269   0AB8 A7 00         mov bh, 0
1270   0ABA             _switch20_comparisons:
1271   0ABA C1 6C         cmp bl, $6c
1272   0ABC C6 E8 0A      je _switch20_case0
1273   0ABF C1 4C         cmp bl, $4c
1274   0AC1 C6 E8 0A      je _switch20_case1
1275   0AC4 C1 64         cmp bl, $64
1276   0AC6 C6 7A 0B      je _switch20_case2
1277   0AC9 C1 69         cmp bl, $69
1278   0ACB C6 7A 0B      je _switch20_case3
1279   0ACE C1 75         cmp bl, $75
1280   0AD0 C6 A7 0B      je _switch20_case4
1281   0AD3 C1 78         cmp bl, $78
1282   0AD5 C6 D4 0B      je _switch20_case5
1283   0AD8 C1 63         cmp bl, $63
1284   0ADA C6 E9 0B      je _switch20_case6
1285   0ADD C1 73         cmp bl, $73
1286   0ADF C6 18 0C      je _switch20_case7
1287   0AE2 0A 50 0C      jmp _switch20_default
1288   0AE5 0A 5C 0C      jmp _switch20_exit
1289   0AE8             _switch20_case0:
1290   0AE8             _switch20_case1:
1291   0AE8             ;; format_p++; 
1292   0AE8 FA FD FF      lea d, [bp + -3] ; $format_p
1293   0AEB 2A            mov b, [d]
1294   0AEC D8            push b
1295   0AED FD 77         inc b
1296   0AEF FA FD FF      lea d, [bp + -3] ; $format_p
1297   0AF2 FD 43         mov [d], b
1298   0AF4 E5            pop b
1299   0AF5             ;; if(*format_p == 'd' || *format_p == 'i'); 
1300   0AF5             _if21_cond:
1301   0AF5 FA FD FF      lea d, [bp + -3] ; $format_p
1302   0AF8 2A            mov b, [d]
1303   0AF9 74            mov d, b
1304   0AFA 32            mov bl, [d]
1305   0AFB A7 00         mov bh, 0
1306   0AFD             ; START RELATIONAL
1307   0AFD D7            push a
1308   0AFE 11            mov a, b
1309   0AFF 26 64 00      mov b, $64
1310   0B02 B0            cmp a, b
1311   0B03 FD 71         seq ; ==
1312   0B05 E4            pop a
1313   0B06             ; END RELATIONAL
1314   0B06 D7            push a
1315   0B07 11            mov a, b
1316   0B08 FA FD FF      lea d, [bp + -3] ; $format_p
1317   0B0B 2A            mov b, [d]
1318   0B0C 74            mov d, b
1319   0B0D 32            mov bl, [d]
1320   0B0E A7 00         mov bh, 0
1321   0B10             ; START RELATIONAL
1322   0B10 D7            push a
1323   0B11 11            mov a, b
1324   0B12 26 69 00      mov b, $69
1325   0B15 B0            cmp a, b
1326   0B16 FD 71         seq ; ==
1327   0B18 E4            pop a
1328   0B19             ; END RELATIONAL
1329   0B19 FD A8         sor a, b ; ||
1330   0B1B E4            pop a
1331   0B1C C0 00 00      cmp b, 0
1332   0B1F C6 25 0B      je _if21_else
1333   0B22             _if21_true:
1334   0B22             ;; ; 
1335   0B22 0A 65 0B      jmp _if21_exit
1336   0B25             _if21_else:
1337   0B25             ;; if(*format_p == 'u'); 
1338   0B25             _if22_cond:
1339   0B25 FA FD FF      lea d, [bp + -3] ; $format_p
1340   0B28 2A            mov b, [d]
1341   0B29 74            mov d, b
1342   0B2A 32            mov bl, [d]
1343   0B2B A7 00         mov bh, 0
1344   0B2D             ; START RELATIONAL
1345   0B2D D7            push a
1346   0B2E 11            mov a, b
1347   0B2F 26 75 00      mov b, $75
1348   0B32 B0            cmp a, b
1349   0B33 FD 71         seq ; ==
1350   0B35 E4            pop a
1351   0B36             ; END RELATIONAL
1352   0B36 C0 00 00      cmp b, 0
1353   0B39 C6 3F 0B      je _if22_else
1354   0B3C             _if22_true:
1355   0B3C             ;; ; 
1356   0B3C 0A 65 0B      jmp _if22_exit
1357   0B3F             _if22_else:
1358   0B3F             ;; if(*format_p == 'x'); 
1359   0B3F             _if23_cond:
1360   0B3F FA FD FF      lea d, [bp + -3] ; $format_p
1361   0B42 2A            mov b, [d]
1362   0B43 74            mov d, b
1363   0B44 32            mov bl, [d]
1364   0B45 A7 00         mov bh, 0
1365   0B47             ; START RELATIONAL
1366   0B47 D7            push a
1367   0B48 11            mov a, b
1368   0B49 26 78 00      mov b, $78
1369   0B4C B0            cmp a, b
1370   0B4D FD 71         seq ; ==
1371   0B4F E4            pop a
1372   0B50             ; END RELATIONAL
1373   0B50 C0 00 00      cmp b, 0
1374   0B53 C6 59 0B      je _if23_else
1375   0B56             _if23_true:
1376   0B56             ;; ; 
1377   0B56 0A 65 0B      jmp _if23_exit
1378   0B59             _if23_else:
1379   0B59             ;; err("Unexpected format in printf."); 
1380   0B59 26 C3 22      mov b, _s3 ; "Unexpected format in printf."
1381   0B5C FD AB         swp b
1382   0B5E D8            push b
1383   0B5F 07 8D 0C      call err
1384   0B62 51 02 00      add sp, 2
1385   0B65             _if23_exit:
1386   0B65             _if22_exit:
1387   0B65             _if21_exit:
1388   0B65             ;; p = p + 4; 
1389   0B65 FA FF FF      lea d, [bp + -1] ; $p
1390   0B68 DA            push d
1391   0B69 FA FF FF      lea d, [bp + -1] ; $p
1392   0B6C 2A            mov b, [d]
1393   0B6D             ; START TERMS
1394   0B6D D7            push a
1395   0B6E 11            mov a, b
1396   0B6F 26 04 00      mov b, $4
1397   0B72 56            add b, a
1398   0B73 E4            pop a
1399   0B74             ; END TERMS
1400   0B74 E7            pop d
1401   0B75 FD 43         mov [d], b
1402   0B77             ;; break; 
1403   0B77 0A 5C 0C      jmp _switch20_exit ; case break
1404   0B7A             _switch20_case2:
1405   0B7A             _switch20_case3:
1406   0B7A             ;; i = scann(); 
1407   0B7A FA FA FF      lea d, [bp + -6] ; $i
1408   0B7D DA            push d
1409   0B7E 07 28 15      call scann
1410   0B81 E7            pop d
1411   0B82 FD 43         mov [d], b
1412   0B84             ;; **(int **)p = i; 
1413   0B84 FA FF FF      lea d, [bp + -1] ; $p
1414   0B87 2A            mov b, [d]
1415   0B88 74            mov d, b
1416   0B89 2A            mov b, [d]
1417   0B8A D8            push b
1418   0B8B FA FA FF      lea d, [bp + -6] ; $i
1419   0B8E 2A            mov b, [d]
1420   0B8F E7            pop d
1421   0B90 FD 43         mov [d], b
1422   0B92             ;; p = p + 2; 
1423   0B92 FA FF FF      lea d, [bp + -1] ; $p
1424   0B95 DA            push d
1425   0B96 FA FF FF      lea d, [bp + -1] ; $p
1426   0B99 2A            mov b, [d]
1427   0B9A             ; START TERMS
1428   0B9A D7            push a
1429   0B9B 11            mov a, b
1430   0B9C 26 02 00      mov b, $2
1431   0B9F 56            add b, a
1432   0BA0 E4            pop a
1433   0BA1             ; END TERMS
1434   0BA1 E7            pop d
1435   0BA2 FD 43         mov [d], b
1436   0BA4             ;; break; 
1437   0BA4 0A 5C 0C      jmp _switch20_exit ; case break
1438   0BA7             _switch20_case4:
1439   0BA7             ;; i = scann(); 
1440   0BA7 FA FA FF      lea d, [bp + -6] ; $i
1441   0BAA DA            push d
1442   0BAB 07 28 15      call scann
1443   0BAE E7            pop d
1444   0BAF FD 43         mov [d], b
1445   0BB1             ;; **(int **)p = i; 
1446   0BB1 FA FF FF      lea d, [bp + -1] ; $p
1447   0BB4 2A            mov b, [d]
1448   0BB5 74            mov d, b
1449   0BB6 2A            mov b, [d]
1450   0BB7 D8            push b
1451   0BB8 FA FA FF      lea d, [bp + -6] ; $i
1452   0BBB 2A            mov b, [d]
1453   0BBC E7            pop d
1454   0BBD FD 43         mov [d], b
1455   0BBF             ;; p = p + 2; 
1456   0BBF FA FF FF      lea d, [bp + -1] ; $p
1457   0BC2 DA            push d
1458   0BC3 FA FF FF      lea d, [bp + -1] ; $p
1459   0BC6 2A            mov b, [d]
1460   0BC7             ; START TERMS
1461   0BC7 D7            push a
1462   0BC8 11            mov a, b
1463   0BC9 26 02 00      mov b, $2
1464   0BCC 56            add b, a
1465   0BCD E4            pop a
1466   0BCE             ; END TERMS
1467   0BCE E7            pop d
1468   0BCF FD 43         mov [d], b
1469   0BD1             ;; break; 
1470   0BD1 0A 5C 0C      jmp _switch20_exit ; case break
1471   0BD4             _switch20_case5:
1472   0BD4             ;; p = p + 2; 
1473   0BD4 FA FF FF      lea d, [bp + -1] ; $p
1474   0BD7 DA            push d
1475   0BD8 FA FF FF      lea d, [bp + -1] ; $p
1476   0BDB 2A            mov b, [d]
1477   0BDC             ; START TERMS
1478   0BDC D7            push a
1479   0BDD 11            mov a, b
1480   0BDE 26 02 00      mov b, $2
1481   0BE1 56            add b, a
1482   0BE2 E4            pop a
1483   0BE3             ; END TERMS
1484   0BE3 E7            pop d
1485   0BE4 FD 43         mov [d], b
1486   0BE6             ;; break; 
1487   0BE6 0A 5C 0C      jmp _switch20_exit ; case break
1488   0BE9             _switch20_case6:
1489   0BE9             ;; c = getchar(); 
1490   0BE9 FA FC FF      lea d, [bp + -4] ; $c
1491   0BEC DA            push d
1492   0BED 07 15 15      call getchar
1493   0BF0 E7            pop d
1494   0BF1 FD 3E         mov [d], bl
1495   0BF3             ;; **(char **)p = c; 
1496   0BF3 FA FF FF      lea d, [bp + -1] ; $p
1497   0BF6 2A            mov b, [d]
1498   0BF7 74            mov d, b
1499   0BF8 2A            mov b, [d]
1500   0BF9 D8            push b
1501   0BFA FA FC FF      lea d, [bp + -4] ; $c
1502   0BFD 32            mov bl, [d]
1503   0BFE A7 00         mov bh, 0
1504   0C00 E7            pop d
1505   0C01 FD 43         mov [d], b
1506   0C03             ;; p = p + 2; 
1507   0C03 FA FF FF      lea d, [bp + -1] ; $p
1508   0C06 DA            push d
1509   0C07 FA FF FF      lea d, [bp + -1] ; $p
1510   0C0A 2A            mov b, [d]
1511   0C0B             ; START TERMS
1512   0C0B D7            push a
1513   0C0C 11            mov a, b
1514   0C0D 26 02 00      mov b, $2
1515   0C10 56            add b, a
1516   0C11 E4            pop a
1517   0C12             ; END TERMS
1518   0C12 E7            pop d
1519   0C13 FD 43         mov [d], b
1520   0C15             ;; break; 
1521   0C15 0A 5C 0C      jmp _switch20_exit ; case break
1522   0C18             _switch20_case7:
1523   0C18             ;; gets(input_string); 
1524   0C18 FA FA FD      lea d, [bp + -518] ; $input_string
1525   0C1B 2D            mov b, d
1526   0C1C FD AB         swp b
1527   0C1E D8            push b
1528   0C1F 07 09 0E      call gets
1529   0C22 51 02 00      add sp, 2
1530   0C25             ;; strcpy(*(char **)p, input_string); 
1531   0C25 FA FA FD      lea d, [bp + -518] ; $input_string
1532   0C28 2D            mov b, d
1533   0C29 FD AB         swp b
1534   0C2B D8            push b
1535   0C2C FA FF FF      lea d, [bp + -1] ; $p
1536   0C2F 2A            mov b, [d]
1537   0C30 74            mov d, b
1538   0C31 2A            mov b, [d]
1539   0C32 FD AB         swp b
1540   0C34 D8            push b
1541   0C35 07 75 04      call strcpy
1542   0C38 51 04 00      add sp, 4
1543   0C3B             ;; p = p + 2; 
1544   0C3B FA FF FF      lea d, [bp + -1] ; $p
1545   0C3E DA            push d
1546   0C3F FA FF FF      lea d, [bp + -1] ; $p
1547   0C42 2A            mov b, [d]
1548   0C43             ; START TERMS
1549   0C43 D7            push a
1550   0C44 11            mov a, b
1551   0C45 26 02 00      mov b, $2
1552   0C48 56            add b, a
1553   0C49 E4            pop a
1554   0C4A             ; END TERMS
1555   0C4A E7            pop d
1556   0C4B FD 43         mov [d], b
1557   0C4D             ;; break; 
1558   0C4D 0A 5C 0C      jmp _switch20_exit ; case break
1559   0C50             _switch20_default:
1560   0C50             ;; print("Error: Unknown argument type.\n"); 
1561   0C50 26 E0 22      mov b, _s4 ; "Error: Unknown argument type.\n"
1562   0C53 FD AB         swp b
1563   0C55 D8            push b
1564   0C56 07 4A 15      call print
1565   0C59 51 02 00      add sp, 2
1566   0C5C             _switch20_exit:
1567   0C5C             ;; format_p++; 
1568   0C5C FA FD FF      lea d, [bp + -3] ; $format_p
1569   0C5F 2A            mov b, [d]
1570   0C60 D8            push b
1571   0C61 FD 77         inc b
1572   0C63 FA FD FF      lea d, [bp + -3] ; $format_p
1573   0C66 FD 43         mov [d], b
1574   0C68 E5            pop b
1575   0C69 0A 88 0C      jmp _if19_exit
1576   0C6C             _if19_else:
1577   0C6C             ;; putchar(*format_p); 
1578   0C6C FA FD FF      lea d, [bp + -3] ; $format_p
1579   0C6F 2A            mov b, [d]
1580   0C70 74            mov d, b
1581   0C71 32            mov bl, [d]
1582   0C72 A7 00         mov bh, 0
1583   0C74 DD            push bl
1584   0C75 07 08 15      call putchar
1585   0C78 51 01 00      add sp, 1
1586   0C7B             ;; format_p++; 
1587   0C7B FA FD FF      lea d, [bp + -3] ; $format_p
1588   0C7E 2A            mov b, [d]
1589   0C7F D8            push b
1590   0C80 FD 77         inc b
1591   0C82 FA FD FF      lea d, [bp + -3] ; $format_p
1592   0C85 FD 43         mov [d], b
1593   0C87 E5            pop b
1594   0C88             _if19_exit:
1595   0C88             _if18_exit:
1596   0C88             _for17_update:
1597   0C88 0A 75 0A      jmp _for17_cond
1598   0C8B             _for17_exit:
1599   0C8B F9            leave
1600   0C8C 09            ret
1601   0C8D             
1602   0C8D             err:
1603   0C8D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1604   0C90             ;; print(e); 
1605   0C90 FA 05 00      lea d, [bp + 5] ; $e
1606   0C93 2A            mov b, [d]
1607   0C94 FD AB         swp b
1608   0C96 D8            push b
1609   0C97 07 4A 15      call print
1610   0C9A 51 02 00      add sp, 2
1611   0C9D F9            leave
1612   0C9E 09            ret
1613   0C9F             
1614   0C9F             printx32:
1615   0C9F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1616   0CA2             
1617   0CA2             ; --- BEGIN INLINE ASM BLOCK
1618   0CA2 FA 05 00      lea d, [bp + 5] ; $hex
1619   0CA5 2B 02 00      mov b, [d+2]
1620   0CA8 07 32 18      call print_u16x
1621   0CAB 2A            mov b, [d]
1622   0CAC 07 32 18      call print_u16x
1623   0CAF             ; --- END INLINE ASM BLOCK
1624   0CAF             
1625   0CAF F9            leave
1626   0CB0 09            ret
1627   0CB1             
1628   0CB1             printx16:
1629   0CB1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1630   0CB4             
1631   0CB4             ; --- BEGIN INLINE ASM BLOCK
1632   0CB4 FA 05 00      lea d, [bp + 5] ; $hex
1633   0CB7 2A            mov b, [d]
1634   0CB8 07 32 18      call print_u16x
1635   0CBB             ; --- END INLINE ASM BLOCK
1636   0CBB             
1637   0CBB F9            leave
1638   0CBC 09            ret
1639   0CBD             
1640   0CBD             printx8:
1641   0CBD F8 00 00      enter 0 ; (push bp; mov bp, sp)
1642   0CC0             
1643   0CC0             ; --- BEGIN INLINE ASM BLOCK
1644   0CC0 FA 05 00      lea d, [bp + 5] ; $hex
1645   0CC3 32            mov bl, [d]
1646   0CC4 07 76 18      call print_u8x
1647   0CC7             ; --- END INLINE ASM BLOCK
1648   0CC7             
1649   0CC7 F9            leave
1650   0CC8 09            ret
1651   0CC9             
1652   0CC9             hex_str_to_int:
1653   0CC9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1654   0CCC             ;; int value = 0; 
1655   0CCC             ; $value 
1656   0CCC 10 00 00      mov a, $0
1657   0CCF 45 FF FF      mov [bp + -1], a
1658   0CD2             ;; int i; 
1659   0CD2             ; $i 
1660   0CD2             ;; char hex_char; 
1661   0CD2             ; $hex_char 
1662   0CD2             ;; int len; 
1663   0CD2             ; $len 
1664   0CD2             ;; len = strlen(hex_string); 
1665   0CD2 FA FA FF      lea d, [bp + -6] ; $len
1666   0CD5 DA            push d
1667   0CD6 FA 05 00      lea d, [bp + 5] ; $hex_string
1668   0CD9 2A            mov b, [d]
1669   0CDA FD AB         swp b
1670   0CDC D8            push b
1671   0CDD 07 E3 05      call strlen
1672   0CE0 51 02 00      add sp, 2
1673   0CE3 E7            pop d
1674   0CE4 FD 43         mov [d], b
1675   0CE6             ;; for (i = 0; i < len; i++) { 
1676   0CE6             _for24_init:
1677   0CE6 FA FD FF      lea d, [bp + -3] ; $i
1678   0CE9 DA            push d
1679   0CEA 26 00 00      mov b, $0
1680   0CED E7            pop d
1681   0CEE FD 43         mov [d], b
1682   0CF0             _for24_cond:
1683   0CF0 FA FD FF      lea d, [bp + -3] ; $i
1684   0CF3 2A            mov b, [d]
1685   0CF4             ; START RELATIONAL
1686   0CF4 D7            push a
1687   0CF5 11            mov a, b
1688   0CF6 FA FA FF      lea d, [bp + -6] ; $len
1689   0CF9 2A            mov b, [d]
1690   0CFA B0            cmp a, b
1691   0CFB FD 73         slt ; < (signed)
1692   0CFD E4            pop a
1693   0CFE             ; END RELATIONAL
1694   0CFE C0 00 00      cmp b, 0
1695   0D01 C6 03 0E      je _for24_exit
1696   0D04             _for24_block:
1697   0D04             ;; hex_char = hex_string[i]; 
1698   0D04 FA FC FF      lea d, [bp + -4] ; $hex_char
1699   0D07 DA            push d
1700   0D08 FA 05 00      lea d, [bp + 5] ; $hex_string
1701   0D0B FD 2A         mov d, [d]
1702   0D0D D7            push a
1703   0D0E DA            push d
1704   0D0F FA FD FF      lea d, [bp + -3] ; $i
1705   0D12 2A            mov b, [d]
1706   0D13 E7            pop d
1707   0D14 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1708   0D18 E4            pop a
1709   0D19 32            mov bl, [d]
1710   0D1A A7 00         mov bh, 0
1711   0D1C E7            pop d
1712   0D1D FD 3E         mov [d], bl
1713   0D1F             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1714   0D1F             _if25_cond:
1715   0D1F FA FC FF      lea d, [bp + -4] ; $hex_char
1716   0D22 32            mov bl, [d]
1717   0D23 A7 00         mov bh, 0
1718   0D25             ; START RELATIONAL
1719   0D25 D7            push a
1720   0D26 11            mov a, b
1721   0D27 26 61 00      mov b, $61
1722   0D2A B0            cmp a, b
1723   0D2B FD 80         sge ; >=
1724   0D2D E4            pop a
1725   0D2E             ; END RELATIONAL
1726   0D2E D7            push a
1727   0D2F 11            mov a, b
1728   0D30 FA FC FF      lea d, [bp + -4] ; $hex_char
1729   0D33 32            mov bl, [d]
1730   0D34 A7 00         mov bh, 0
1731   0D36             ; START RELATIONAL
1732   0D36 D7            push a
1733   0D37 11            mov a, b
1734   0D38 26 66 00      mov b, $66
1735   0D3B B0            cmp a, b
1736   0D3C FD 73         slt ; <= (signed)
1737   0D3E E4            pop a
1738   0D3F             ; END RELATIONAL
1739   0D3F FD A7         sand a, b
1740   0D41 E4            pop a
1741   0D42 C0 00 00      cmp b, 0
1742   0D45 C6 76 0D      je _if25_else
1743   0D48             _if25_true:
1744   0D48             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1745   0D48 FA FF FF      lea d, [bp + -1] ; $value
1746   0D4B DA            push d
1747   0D4C FA FF FF      lea d, [bp + -1] ; $value
1748   0D4F 2A            mov b, [d]
1749   0D50             ; START FACTORS
1750   0D50 D7            push a
1751   0D51 11            mov a, b
1752   0D52 26 10 00      mov b, $10
1753   0D55 AC            mul a, b ; *
1754   0D56 11            mov a, b
1755   0D57 27            mov b, a
1756   0D58 E4            pop a
1757   0D59             ; END FACTORS
1758   0D59             ; START TERMS
1759   0D59 D7            push a
1760   0D5A 11            mov a, b
1761   0D5B FA FC FF      lea d, [bp + -4] ; $hex_char
1762   0D5E 32            mov bl, [d]
1763   0D5F A7 00         mov bh, 0
1764   0D61             ; START TERMS
1765   0D61 D7            push a
1766   0D62 11            mov a, b
1767   0D63 26 61 00      mov b, $61
1768   0D66 60            sub a, b
1769   0D67 27            mov b, a
1770   0D68 11            mov a, b
1771   0D69 26 0A 00      mov b, $a
1772   0D6C 56            add b, a
1773   0D6D E4            pop a
1774   0D6E             ; END TERMS
1775   0D6E 56            add b, a
1776   0D6F E4            pop a
1777   0D70             ; END TERMS
1778   0D70 E7            pop d
1779   0D71 FD 43         mov [d], b
1780   0D73 0A F3 0D      jmp _if25_exit
1781   0D76             _if25_else:
1782   0D76             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1783   0D76             _if26_cond:
1784   0D76 FA FC FF      lea d, [bp + -4] ; $hex_char
1785   0D79 32            mov bl, [d]
1786   0D7A A7 00         mov bh, 0
1787   0D7C             ; START RELATIONAL
1788   0D7C D7            push a
1789   0D7D 11            mov a, b
1790   0D7E 26 41 00      mov b, $41
1791   0D81 B0            cmp a, b
1792   0D82 FD 80         sge ; >=
1793   0D84 E4            pop a
1794   0D85             ; END RELATIONAL
1795   0D85 D7            push a
1796   0D86 11            mov a, b
1797   0D87 FA FC FF      lea d, [bp + -4] ; $hex_char
1798   0D8A 32            mov bl, [d]
1799   0D8B A7 00         mov bh, 0
1800   0D8D             ; START RELATIONAL
1801   0D8D D7            push a
1802   0D8E 11            mov a, b
1803   0D8F 26 46 00      mov b, $46
1804   0D92 B0            cmp a, b
1805   0D93 FD 73         slt ; <= (signed)
1806   0D95 E4            pop a
1807   0D96             ; END RELATIONAL
1808   0D96 FD A7         sand a, b
1809   0D98 E4            pop a
1810   0D99 C0 00 00      cmp b, 0
1811   0D9C C6 CD 0D      je _if26_else
1812   0D9F             _if26_true:
1813   0D9F             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1814   0D9F FA FF FF      lea d, [bp + -1] ; $value
1815   0DA2 DA            push d
1816   0DA3 FA FF FF      lea d, [bp + -1] ; $value
1817   0DA6 2A            mov b, [d]
1818   0DA7             ; START FACTORS
1819   0DA7 D7            push a
1820   0DA8 11            mov a, b
1821   0DA9 26 10 00      mov b, $10
1822   0DAC AC            mul a, b ; *
1823   0DAD 11            mov a, b
1824   0DAE 27            mov b, a
1825   0DAF E4            pop a
1826   0DB0             ; END FACTORS
1827   0DB0             ; START TERMS
1828   0DB0 D7            push a
1829   0DB1 11            mov a, b
1830   0DB2 FA FC FF      lea d, [bp + -4] ; $hex_char
1831   0DB5 32            mov bl, [d]
1832   0DB6 A7 00         mov bh, 0
1833   0DB8             ; START TERMS
1834   0DB8 D7            push a
1835   0DB9 11            mov a, b
1836   0DBA 26 41 00      mov b, $41
1837   0DBD 60            sub a, b
1838   0DBE 27            mov b, a
1839   0DBF 11            mov a, b
1840   0DC0 26 0A 00      mov b, $a
1841   0DC3 56            add b, a
1842   0DC4 E4            pop a
1843   0DC5             ; END TERMS
1844   0DC5 56            add b, a
1845   0DC6 E4            pop a
1846   0DC7             ; END TERMS
1847   0DC7 E7            pop d
1848   0DC8 FD 43         mov [d], b
1849   0DCA 0A F3 0D      jmp _if26_exit
1850   0DCD             _if26_else:
1851   0DCD             ;; value = (value * 16) + (hex_char - '0'); 
1852   0DCD FA FF FF      lea d, [bp + -1] ; $value
1853   0DD0 DA            push d
1854   0DD1 FA FF FF      lea d, [bp + -1] ; $value
1855   0DD4 2A            mov b, [d]
1856   0DD5             ; START FACTORS
1857   0DD5 D7            push a
1858   0DD6 11            mov a, b
1859   0DD7 26 10 00      mov b, $10
1860   0DDA AC            mul a, b ; *
1861   0DDB 11            mov a, b
1862   0DDC 27            mov b, a
1863   0DDD E4            pop a
1864   0DDE             ; END FACTORS
1865   0DDE             ; START TERMS
1866   0DDE D7            push a
1867   0DDF 11            mov a, b
1868   0DE0 FA FC FF      lea d, [bp + -4] ; $hex_char
1869   0DE3 32            mov bl, [d]
1870   0DE4 A7 00         mov bh, 0
1871   0DE6             ; START TERMS
1872   0DE6 D7            push a
1873   0DE7 11            mov a, b
1874   0DE8 26 30 00      mov b, $30
1875   0DEB 60            sub a, b
1876   0DEC 27            mov b, a
1877   0DED E4            pop a
1878   0DEE             ; END TERMS
1879   0DEE 56            add b, a
1880   0DEF E4            pop a
1881   0DF0             ; END TERMS
1882   0DF0 E7            pop d
1883   0DF1 FD 43         mov [d], b
1884   0DF3             _if26_exit:
1885   0DF3             _if25_exit:
1886   0DF3             _for24_update:
1887   0DF3 FA FD FF      lea d, [bp + -3] ; $i
1888   0DF6 2A            mov b, [d]
1889   0DF7 D8            push b
1890   0DF8 FD 77         inc b
1891   0DFA FA FD FF      lea d, [bp + -3] ; $i
1892   0DFD FD 43         mov [d], b
1893   0DFF E5            pop b
1894   0E00 0A F0 0C      jmp _for24_cond
1895   0E03             _for24_exit:
1896   0E03             ;; return value; 
1897   0E03 FA FF FF      lea d, [bp + -1] ; $value
1898   0E06 2A            mov b, [d]
1899   0E07 F9            leave
1900   0E08 09            ret
1901   0E09             
1902   0E09             gets:
1903   0E09 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1904   0E0C             
1905   0E0C             ; --- BEGIN INLINE ASM BLOCK
1906   0E0C FA 05 00      lea d, [bp + 5] ; $s
1907   0E0F 15            mov a, [d]
1908   0E10 3C            mov d, a
1909   0E11 07 97 16      call _gets
1910   0E14             ; --- END INLINE ASM BLOCK
1911   0E14             
1912   0E14             ;; return strlen(s); 
1913   0E14 FA 05 00      lea d, [bp + 5] ; $s
1914   0E17 2A            mov b, [d]
1915   0E18 FD AB         swp b
1916   0E1A D8            push b
1917   0E1B 07 E3 05      call strlen
1918   0E1E 51 02 00      add sp, 2
1919   0E21 F9            leave
1920   0E22 09            ret
1921   0E23             
1922   0E23             print_signed:
1923   0E23 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1924   0E26             ;; char digits[5]; 
1925   0E26             ; $digits 
1926   0E26             ;; int i = 0; 
1927   0E26             ; $i 
1928   0E26 10 00 00      mov a, $0
1929   0E29 45 FA FF      mov [bp + -6], a
1930   0E2C             ;; if (num < 0) { 
1931   0E2C             _if27_cond:
1932   0E2C FA 05 00      lea d, [bp + 5] ; $num
1933   0E2F 2A            mov b, [d]
1934   0E30             ; START RELATIONAL
1935   0E30 D7            push a
1936   0E31 11            mov a, b
1937   0E32 26 00 00      mov b, $0
1938   0E35 B0            cmp a, b
1939   0E36 FD 73         slt ; < (signed)
1940   0E38 E4            pop a
1941   0E39             ; END RELATIONAL
1942   0E39 C0 00 00      cmp b, 0
1943   0E3C C6 59 0E      je _if27_else
1944   0E3F             _if27_true:
1945   0E3F             ;; putchar('-'); 
1946   0E3F 26 2D 00      mov b, $2d
1947   0E42 DD            push bl
1948   0E43 07 08 15      call putchar
1949   0E46 51 01 00      add sp, 1
1950   0E49             ;; num = -num; 
1951   0E49 FA 05 00      lea d, [bp + 5] ; $num
1952   0E4C DA            push d
1953   0E4D FA 05 00      lea d, [bp + 5] ; $num
1954   0E50 2A            mov b, [d]
1955   0E51 FD 97         neg b
1956   0E53 E7            pop d
1957   0E54 FD 43         mov [d], b
1958   0E56 0A 7B 0E      jmp _if27_exit
1959   0E59             _if27_else:
1960   0E59             ;; if (num == 0) { 
1961   0E59             _if28_cond:
1962   0E59 FA 05 00      lea d, [bp + 5] ; $num
1963   0E5C 2A            mov b, [d]
1964   0E5D             ; START RELATIONAL
1965   0E5D D7            push a
1966   0E5E 11            mov a, b
1967   0E5F 26 00 00      mov b, $0
1968   0E62 B0            cmp a, b
1969   0E63 FD 71         seq ; ==
1970   0E65 E4            pop a
1971   0E66             ; END RELATIONAL
1972   0E66 C0 00 00      cmp b, 0
1973   0E69 C6 7B 0E      je _if28_exit
1974   0E6C             _if28_true:
1975   0E6C             ;; putchar('0'); 
1976   0E6C 26 30 00      mov b, $30
1977   0E6F DD            push bl
1978   0E70 07 08 15      call putchar
1979   0E73 51 01 00      add sp, 1
1980   0E76             ;; return; 
1981   0E76 F9            leave
1982   0E77 09            ret
1983   0E78 0A 7B 0E      jmp _if28_exit
1984   0E7B             _if28_exit:
1985   0E7B             _if27_exit:
1986   0E7B             ;; while (num > 0) { 
1987   0E7B             _while29_cond:
1988   0E7B FA 05 00      lea d, [bp + 5] ; $num
1989   0E7E 2A            mov b, [d]
1990   0E7F             ; START RELATIONAL
1991   0E7F D7            push a
1992   0E80 11            mov a, b
1993   0E81 26 00 00      mov b, $0
1994   0E84 B0            cmp a, b
1995   0E85 FD 7F         sgt ; >
1996   0E87 E4            pop a
1997   0E88             ; END RELATIONAL
1998   0E88 C0 00 00      cmp b, 0
1999   0E8B C6 D5 0E      je _while29_exit
2000   0E8E             _while29_block:
2001   0E8E             ;; digits[i] = '0' + (num % 10); 
2002   0E8E FA FC FF      lea d, [bp + -4] ; $digits
2003   0E91 D7            push a
2004   0E92 DA            push d
2005   0E93 FA FA FF      lea d, [bp + -6] ; $i
2006   0E96 2A            mov b, [d]
2007   0E97 E7            pop d
2008   0E98 5A            add d, b
2009   0E99 E4            pop a
2010   0E9A DA            push d
2011   0E9B 26 30 00      mov b, $30
2012   0E9E             ; START TERMS
2013   0E9E D7            push a
2014   0E9F 11            mov a, b
2015   0EA0 FA 05 00      lea d, [bp + 5] ; $num
2016   0EA3 2A            mov b, [d]
2017   0EA4             ; START FACTORS
2018   0EA4 D7            push a
2019   0EA5 11            mov a, b
2020   0EA6 26 0A 00      mov b, $a
2021   0EA9 AE            div a, b ; 
2022   0EAA 11            mov a, b
2023   0EAB 27            mov b, a
2024   0EAC E4            pop a
2025   0EAD             ; END FACTORS
2026   0EAD 56            add b, a
2027   0EAE E4            pop a
2028   0EAF             ; END TERMS
2029   0EAF E7            pop d
2030   0EB0 FD 3E         mov [d], bl
2031   0EB2             ;; num = num / 10; 
2032   0EB2 FA 05 00      lea d, [bp + 5] ; $num
2033   0EB5 DA            push d
2034   0EB6 FA 05 00      lea d, [bp + 5] ; $num
2035   0EB9 2A            mov b, [d]
2036   0EBA             ; START FACTORS
2037   0EBA D7            push a
2038   0EBB 11            mov a, b
2039   0EBC 26 0A 00      mov b, $a
2040   0EBF AE            div a, b
2041   0EC0 27            mov b, a
2042   0EC1 E4            pop a
2043   0EC2             ; END FACTORS
2044   0EC2 E7            pop d
2045   0EC3 FD 43         mov [d], b
2046   0EC5             ;; i++; 
2047   0EC5 FA FA FF      lea d, [bp + -6] ; $i
2048   0EC8 2A            mov b, [d]
2049   0EC9 D8            push b
2050   0ECA FD 77         inc b
2051   0ECC FA FA FF      lea d, [bp + -6] ; $i
2052   0ECF FD 43         mov [d], b
2053   0ED1 E5            pop b
2054   0ED2 0A 7B 0E      jmp _while29_cond
2055   0ED5             _while29_exit:
2056   0ED5             ;; while (i > 0) { 
2057   0ED5             _while30_cond:
2058   0ED5 FA FA FF      lea d, [bp + -6] ; $i
2059   0ED8 2A            mov b, [d]
2060   0ED9             ; START RELATIONAL
2061   0ED9 D7            push a
2062   0EDA 11            mov a, b
2063   0EDB 26 00 00      mov b, $0
2064   0EDE B0            cmp a, b
2065   0EDF FD 7F         sgt ; >
2066   0EE1 E4            pop a
2067   0EE2             ; END RELATIONAL
2068   0EE2 C0 00 00      cmp b, 0
2069   0EE5 C6 0E 0F      je _while30_exit
2070   0EE8             _while30_block:
2071   0EE8             ;; i--; 
2072   0EE8 FA FA FF      lea d, [bp + -6] ; $i
2073   0EEB 2A            mov b, [d]
2074   0EEC D8            push b
2075   0EED FD 7D         dec b
2076   0EEF FA FA FF      lea d, [bp + -6] ; $i
2077   0EF2 FD 43         mov [d], b
2078   0EF4 E5            pop b
2079   0EF5             ;; putchar(digits[i]); 
2080   0EF5 FA FC FF      lea d, [bp + -4] ; $digits
2081   0EF8 D7            push a
2082   0EF9 DA            push d
2083   0EFA FA FA FF      lea d, [bp + -6] ; $i
2084   0EFD 2A            mov b, [d]
2085   0EFE E7            pop d
2086   0EFF 5A            add d, b
2087   0F00 E4            pop a
2088   0F01 32            mov bl, [d]
2089   0F02 A7 00         mov bh, 0
2090   0F04 DD            push bl
2091   0F05 07 08 15      call putchar
2092   0F08 51 01 00      add sp, 1
2093   0F0B 0A D5 0E      jmp _while30_cond
2094   0F0E             _while30_exit:
2095   0F0E F9            leave
2096   0F0F 09            ret
2097   0F10             
2098   0F10             print_signed_long:
2099   0F10 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2100   0F13             ;; char digits[10]; 
2101   0F13             ; $digits 
2102   0F13             ;; int i = 0; 
2103   0F13             ; $i 
2104   0F13 10 00 00      mov a, $0
2105   0F16 45 F5 FF      mov [bp + -11], a
2106   0F19             ;; if (num < 0) { 
2107   0F19             _if31_cond:
2108   0F19 FA 05 00      lea d, [bp + 5] ; $num
2109   0F1C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2110   0F1F FD 39         mov c, b ; And place it into C
2111   0F21 2A            mov b, [d] ; Lower Word in B
2112   0F22             ; START RELATIONAL
2113   0F22 D7            push a
2114   0F23 FD D8         push g
2115   0F25 11            mov a, b
2116   0F26 FD 7A         mov g, c
2117   0F28 26 00 00      mov b, $0
2118   0F2B 38 00 00      mov c, 0
2119   0F2E FD AF 00 00   cmp32 ga, cb
2119   0F32 00 00 00 00 
2119   0F36 00 00 00 00 
2119   0F3A 00 00 00 00 
2119   0F3E 00 00 00 00 
2119   0F42 00 00 00 00 
2119   0F46 00 00 00 00 
2119   0F4A 00 00 00 00 
2119   0F4E 00 00 00 00 
2119   0F52 00 00 00 00 
2119   0F56 00 00 00 00 
2119   0F5A 00 00 00 00 
2119   0F5E 00 00 00 00 
2119   0F62 00 00 00 00 
2119   0F66 00 00 00 00 
2119   0F6A 00 00 00 00 
2119   0F6E 00 00 00 00 
2119   0F72 00 00 00 00 
2119   0F76 00 00 00 00 
2119   0F7A 00 00 00 00 
2119   0F7E 00 00 00 00 
2119   0F82 00 00 00 00 
2119   0F86 00 00 00 00 
2119   0F8A 00 00 00 00 
2119   0F8E 00 00 00 00 
2119   0F92 00 00 00 00 
2119   0F96 00 00 00 00 
2119   0F9A 00 00 00 00 
2119   0F9E 00 00 00 00 
2119   0FA2 00 00 00 00 
2119   0FA6 00 00 00 00 
2119   0FAA 00 00 00 00 
2119   0FAE 00 00 00 00 
2119   0FB2 00 00 00 00 
2119   0FB6 00 00 00 00 
2119   0FBA 00 00 00 00 
2119   0FBE 00 00 00 00 
2119   0FC2 00 00 00 00 
2119   0FC6 00 00 00 00 
2119   0FCA 00 00 00 00 
2119   0FCE 00 00 00 00 
2119   0FD2 00 00 00 00 
2119   0FD6 00 00 00 00 
2119   0FDA 00 00 00 00 
2119   0FDE 00 00 00 00 
2119   0FE2 00 00 00 00 
2119   0FE6 00 00 00 00 
2119   0FEA 00 00 00 00 
2119   0FEE 00 00 00 00 
2119   0FF2 00 00 00 00 
2119   0FF6 00 00 00 00 
2119   0FFA 00 00 00 00 
2119   0FFE 00 00 00 00 
2119   1002 00 00 00 00 
2119   1006 00 00 00 00 
2119   100A 00 00 00 00 
2119   100E 00 00 00 00 
2119   1012 00 00 00 00 
2119   1016 00 00 00 00 
2119   101A 00 00 00 00 
2119   101E 00 00 00 00 
2119   1022 00 00 00 00 
2119   1026 00 00 00 00 
2119   102A 00 00 00 00 
2119   102E 00 
2120   102F FD 73         slt ; <
2121   1031 FD F1         pop g
2122   1033 E4            pop a
2123   1034             ; END RELATIONAL
2124   1034 C0 00 00      cmp b, 0
2125   1037 C6 5E 10      je _if31_else
2126   103A             _if31_true:
2127   103A             ;; putchar('-'); 
2128   103A 26 2D 00      mov b, $2d
2129   103D DD            push bl
2130   103E 07 08 15      call putchar
2131   1041 51 01 00      add sp, 1
2132   1044             ;; num = -num; 
2133   1044 FA 05 00      lea d, [bp + 5] ; $num
2134   1047 DA            push d
2135   1048 FA 05 00      lea d, [bp + 5] ; $num
2136   104B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2137   104E FD 39         mov c, b ; And place it into C
2138   1050 2A            mov b, [d] ; Lower Word in B
2139   1051 FD 97         neg b
2140   1053 E7            pop d
2141   1054 FD 43         mov [d], b
2142   1056 28            mov b, c
2143   1057 FD 44 02 00   mov [d + 2], b
2144   105B 0A 8E 11      jmp _if31_exit
2145   105E             _if31_else:
2146   105E             ;; if (num == 0) { 
2147   105E             _if32_cond:
2148   105E FA 05 00      lea d, [bp + 5] ; $num
2149   1061 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2150   1064 FD 39         mov c, b ; And place it into C
2151   1066 2A            mov b, [d] ; Lower Word in B
2152   1067             ; START RELATIONAL
2153   1067 D7            push a
2154   1068 FD D8         push g
2155   106A 11            mov a, b
2156   106B FD 7A         mov g, c
2157   106D 26 00 00      mov b, $0
2158   1070 38 00 00      mov c, 0
2159   1073 FD AF 00 00   cmp32 ga, cb
2159   1077 00 00 00 00 
2159   107B 00 00 00 00 
2159   107F 00 00 00 00 
2159   1083 00 00 00 00 
2159   1087 00 00 00 00 
2159   108B 00 00 00 00 
2159   108F 00 00 00 00 
2159   1093 00 00 00 00 
2159   1097 00 00 00 00 
2159   109B 00 00 00 00 
2159   109F 00 00 00 00 
2159   10A3 00 00 00 00 
2159   10A7 00 00 00 00 
2159   10AB 00 00 00 00 
2159   10AF 00 00 00 00 
2159   10B3 00 00 00 00 
2159   10B7 00 00 00 00 
2159   10BB 00 00 00 00 
2159   10BF 00 00 00 00 
2159   10C3 00 00 00 00 
2159   10C7 00 00 00 00 
2159   10CB 00 00 00 00 
2159   10CF 00 00 00 00 
2159   10D3 00 00 00 00 
2159   10D7 00 00 00 00 
2159   10DB 00 00 00 00 
2159   10DF 00 00 00 00 
2159   10E3 00 00 00 00 
2159   10E7 00 00 00 00 
2159   10EB 00 00 00 00 
2159   10EF 00 00 00 00 
2159   10F3 00 00 00 00 
2159   10F7 00 00 00 00 
2159   10FB 00 00 00 00 
2159   10FF 00 00 00 00 
2159   1103 00 00 00 00 
2159   1107 00 00 00 00 
2159   110B 00 00 00 00 
2159   110F 00 00 00 00 
2159   1113 00 00 00 00 
2159   1117 00 00 00 00 
2159   111B 00 00 00 00 
2159   111F 00 00 00 00 
2159   1123 00 00 00 00 
2159   1127 00 00 00 00 
2159   112B 00 00 00 00 
2159   112F 00 00 00 00 
2159   1133 00 00 00 00 
2159   1137 00 00 00 00 
2159   113B 00 00 00 00 
2159   113F 00 00 00 00 
2159   1143 00 00 00 00 
2159   1147 00 00 00 00 
2159   114B 00 00 00 00 
2159   114F 00 00 00 00 
2159   1153 00 00 00 00 
2159   1157 00 00 00 00 
2159   115B 00 00 00 00 
2159   115F 00 00 00 00 
2159   1163 00 00 00 00 
2159   1167 00 00 00 00 
2159   116B 00 00 00 00 
2159   116F 00 00 00 00 
2159   1173 00 
2160   1174 FD 71         seq ; ==
2161   1176 FD F1         pop g
2162   1178 E4            pop a
2163   1179             ; END RELATIONAL
2164   1179 C0 00 00      cmp b, 0
2165   117C C6 8E 11      je _if32_exit
2166   117F             _if32_true:
2167   117F             ;; putchar('0'); 
2168   117F 26 30 00      mov b, $30
2169   1182 DD            push bl
2170   1183 07 08 15      call putchar
2171   1186 51 01 00      add sp, 1
2172   1189             ;; return; 
2173   1189 F9            leave
2174   118A 09            ret
2175   118B 0A 8E 11      jmp _if32_exit
2176   118E             _if32_exit:
2177   118E             _if31_exit:
2178   118E             ;; while (num > 0) { 
2179   118E             _while33_cond:
2180   118E FA 05 00      lea d, [bp + 5] ; $num
2181   1191 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2182   1194 FD 39         mov c, b ; And place it into C
2183   1196 2A            mov b, [d] ; Lower Word in B
2184   1197             ; START RELATIONAL
2185   1197 D7            push a
2186   1198 FD D8         push g
2187   119A 11            mov a, b
2188   119B FD 7A         mov g, c
2189   119D 26 00 00      mov b, $0
2190   11A0 38 00 00      mov c, 0
2191   11A3 FD 7F         sgt
2192   11A5 FD F1         pop g
2193   11A7 E4            pop a
2194   11A8             ; END RELATIONAL
2195   11A8 C0 00 00      cmp b, 0
2196   11AB C6 0B 12      je _while33_exit
2197   11AE             _while33_block:
2198   11AE             ;; digits[i] = '0' + (num % 10); 
2199   11AE FA F7 FF      lea d, [bp + -9] ; $digits
2200   11B1 D7            push a
2201   11B2 DA            push d
2202   11B3 FA F5 FF      lea d, [bp + -11] ; $i
2203   11B6 2A            mov b, [d]
2204   11B7 E7            pop d
2205   11B8 5A            add d, b
2206   11B9 E4            pop a
2207   11BA DA            push d
2208   11BB 26 30 00      mov b, $30
2209   11BE             ; START TERMS
2210   11BE D7            push a
2211   11BF 11            mov a, b
2212   11C0 FA 05 00      lea d, [bp + 5] ; $num
2213   11C3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2214   11C6 FD 39         mov c, b ; And place it into C
2215   11C8 2A            mov b, [d] ; Lower Word in B
2216   11C9             ; START FACTORS
2217   11C9 D7            push a
2218   11CA 11            mov a, b
2219   11CB 26 0A 00      mov b, $a
2220   11CE AE            div a, b ; 
2221   11CF 11            mov a, b
2222   11D0 27            mov b, a
2223   11D1 E4            pop a
2224   11D2             ; END FACTORS
2225   11D2 54            add a, b
2226   11D3 D7            push a
2227   11D4 FD 12         mov a, g
2228   11D6 28            mov b, c
2229   11D7 5C            adc a, b
2230   11D8 39            mov c, a
2231   11D9 E5            pop b
2232   11DA E4            pop a
2233   11DB             ; END TERMS
2234   11DB E7            pop d
2235   11DC FD 3E         mov [d], bl
2236   11DE             ;; num = num / 10; 
2237   11DE FA 05 00      lea d, [bp + 5] ; $num
2238   11E1 DA            push d
2239   11E2 FA 05 00      lea d, [bp + 5] ; $num
2240   11E5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2241   11E8 FD 39         mov c, b ; And place it into C
2242   11EA 2A            mov b, [d] ; Lower Word in B
2243   11EB             ; START FACTORS
2244   11EB D7            push a
2245   11EC 11            mov a, b
2246   11ED 26 0A 00      mov b, $a
2247   11F0 AE            div a, b
2248   11F1 27            mov b, a
2249   11F2 E4            pop a
2250   11F3             ; END FACTORS
2251   11F3 E7            pop d
2252   11F4 FD 43         mov [d], b
2253   11F6 28            mov b, c
2254   11F7 FD 44 02 00   mov [d + 2], b
2255   11FB             ;; i++; 
2256   11FB FA F5 FF      lea d, [bp + -11] ; $i
2257   11FE 2A            mov b, [d]
2258   11FF D8            push b
2259   1200 FD 77         inc b
2260   1202 FA F5 FF      lea d, [bp + -11] ; $i
2261   1205 FD 43         mov [d], b
2262   1207 E5            pop b
2263   1208 0A 8E 11      jmp _while33_cond
2264   120B             _while33_exit:
2265   120B             ;; while (i > 0) { 
2266   120B             _while34_cond:
2267   120B FA F5 FF      lea d, [bp + -11] ; $i
2268   120E 2A            mov b, [d]
2269   120F             ; START RELATIONAL
2270   120F D7            push a
2271   1210 11            mov a, b
2272   1211 26 00 00      mov b, $0
2273   1214 B0            cmp a, b
2274   1215 FD 7F         sgt ; >
2275   1217 E4            pop a
2276   1218             ; END RELATIONAL
2277   1218 C0 00 00      cmp b, 0
2278   121B C6 44 12      je _while34_exit
2279   121E             _while34_block:
2280   121E             ;; i--; 
2281   121E FA F5 FF      lea d, [bp + -11] ; $i
2282   1221 2A            mov b, [d]
2283   1222 D8            push b
2284   1223 FD 7D         dec b
2285   1225 FA F5 FF      lea d, [bp + -11] ; $i
2286   1228 FD 43         mov [d], b
2287   122A E5            pop b
2288   122B             ;; putchar(digits[i]); 
2289   122B FA F7 FF      lea d, [bp + -9] ; $digits
2290   122E D7            push a
2291   122F DA            push d
2292   1230 FA F5 FF      lea d, [bp + -11] ; $i
2293   1233 2A            mov b, [d]
2294   1234 E7            pop d
2295   1235 5A            add d, b
2296   1236 E4            pop a
2297   1237 32            mov bl, [d]
2298   1238 A7 00         mov bh, 0
2299   123A DD            push bl
2300   123B 07 08 15      call putchar
2301   123E 51 01 00      add sp, 1
2302   1241 0A 0B 12      jmp _while34_cond
2303   1244             _while34_exit:
2304   1244 F9            leave
2305   1245 09            ret
2306   1246             
2307   1246             print_unsigned_long:
2308   1246 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2309   1249             ;; char digits[10]; 
2310   1249             ; $digits 
2311   1249             ;; int i; 
2312   1249             ; $i 
2313   1249             ;; i = 0; 
2314   1249 FA F5 FF      lea d, [bp + -11] ; $i
2315   124C DA            push d
2316   124D 26 00 00      mov b, $0
2317   1250 E7            pop d
2318   1251 FD 43         mov [d], b
2319   1253             ;; if(num == 0){ 
2320   1253             _if35_cond:
2321   1253 FA 05 00      lea d, [bp + 5] ; $num
2322   1256 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2323   1259 FD 39         mov c, b ; And place it into C
2324   125B 2A            mov b, [d] ; Lower Word in B
2325   125C             ; START RELATIONAL
2326   125C D7            push a
2327   125D FD D8         push g
2328   125F 11            mov a, b
2329   1260 FD 7A         mov g, c
2330   1262 26 00 00      mov b, $0
2331   1265 38 00 00      mov c, 0
2332   1268 FD AF 00 00   cmp32 ga, cb
2332   126C 00 00 00 00 
2332   1270 00 00 00 00 
2332   1274 00 00 00 00 
2332   1278 00 00 00 00 
2332   127C 00 00 00 00 
2332   1280 00 00 00 00 
2332   1284 00 00 00 00 
2332   1288 00 00 00 00 
2332   128C 00 00 00 00 
2332   1290 00 00 00 00 
2332   1294 00 00 00 00 
2332   1298 00 00 00 00 
2332   129C 00 00 00 00 
2332   12A0 00 00 00 00 
2332   12A4 00 00 00 00 
2332   12A8 00 00 00 00 
2332   12AC 00 00 00 00 
2332   12B0 00 00 00 00 
2332   12B4 00 00 00 00 
2332   12B8 00 00 00 00 
2332   12BC 00 00 00 00 
2332   12C0 00 00 00 00 
2332   12C4 00 00 00 00 
2332   12C8 00 00 00 00 
2332   12CC 00 00 00 00 
2332   12D0 00 00 00 00 
2332   12D4 00 00 00 00 
2332   12D8 00 00 00 00 
2332   12DC 00 00 00 00 
2332   12E0 00 00 00 00 
2332   12E4 00 00 00 00 
2332   12E8 00 00 00 00 
2332   12EC 00 00 00 00 
2332   12F0 00 00 00 00 
2332   12F4 00 00 00 00 
2332   12F8 00 00 00 00 
2332   12FC 00 00 00 00 
2332   1300 00 00 00 00 
2332   1304 00 00 00 00 
2332   1308 00 00 00 00 
2332   130C 00 00 00 00 
2332   1310 00 00 00 00 
2332   1314 00 00 00 00 
2332   1318 00 00 00 00 
2332   131C 00 00 00 00 
2332   1320 00 00 00 00 
2332   1324 00 00 00 00 
2332   1328 00 00 00 00 
2332   132C 00 00 00 00 
2332   1330 00 00 00 00 
2332   1334 00 00 00 00 
2332   1338 00 00 00 00 
2332   133C 00 00 00 00 
2332   1340 00 00 00 00 
2332   1344 00 00 00 00 
2332   1348 00 00 00 00 
2332   134C 00 00 00 00 
2332   1350 00 00 00 00 
2332   1354 00 00 00 00 
2332   1358 00 00 00 00 
2332   135C 00 00 00 00 
2332   1360 00 00 00 00 
2332   1364 00 00 00 00 
2332   1368 00 
2333   1369 FD 71         seq ; ==
2334   136B FD F1         pop g
2335   136D E4            pop a
2336   136E             ; END RELATIONAL
2337   136E C0 00 00      cmp b, 0
2338   1371 C6 83 13      je _if35_exit
2339   1374             _if35_true:
2340   1374             ;; putchar('0'); 
2341   1374 26 30 00      mov b, $30
2342   1377 DD            push bl
2343   1378 07 08 15      call putchar
2344   137B 51 01 00      add sp, 1
2345   137E             ;; return; 
2346   137E F9            leave
2347   137F 09            ret
2348   1380 0A 83 13      jmp _if35_exit
2349   1383             _if35_exit:
2350   1383             ;; while (num > 0) { 
2351   1383             _while36_cond:
2352   1383 FA 05 00      lea d, [bp + 5] ; $num
2353   1386 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2354   1389 FD 39         mov c, b ; And place it into C
2355   138B 2A            mov b, [d] ; Lower Word in B
2356   138C             ; START RELATIONAL
2357   138C D7            push a
2358   138D FD D8         push g
2359   138F 11            mov a, b
2360   1390 FD 7A         mov g, c
2361   1392 26 00 00      mov b, $0
2362   1395 38 00 00      mov c, 0
2363   1398 FD 81         sgu
2364   139A FD F1         pop g
2365   139C E4            pop a
2366   139D             ; END RELATIONAL
2367   139D C0 00 00      cmp b, 0
2368   13A0 C6 00 14      je _while36_exit
2369   13A3             _while36_block:
2370   13A3             ;; digits[i] = '0' + (num % 10); 
2371   13A3 FA F7 FF      lea d, [bp + -9] ; $digits
2372   13A6 D7            push a
2373   13A7 DA            push d
2374   13A8 FA F5 FF      lea d, [bp + -11] ; $i
2375   13AB 2A            mov b, [d]
2376   13AC E7            pop d
2377   13AD 5A            add d, b
2378   13AE E4            pop a
2379   13AF DA            push d
2380   13B0 26 30 00      mov b, $30
2381   13B3             ; START TERMS
2382   13B3 D7            push a
2383   13B4 11            mov a, b
2384   13B5 FA 05 00      lea d, [bp + 5] ; $num
2385   13B8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2386   13BB FD 39         mov c, b ; And place it into C
2387   13BD 2A            mov b, [d] ; Lower Word in B
2388   13BE             ; START FACTORS
2389   13BE D7            push a
2390   13BF 11            mov a, b
2391   13C0 26 0A 00      mov b, $a
2392   13C3 AE            div a, b ; 
2393   13C4 11            mov a, b
2394   13C5 27            mov b, a
2395   13C6 E4            pop a
2396   13C7             ; END FACTORS
2397   13C7 54            add a, b
2398   13C8 D7            push a
2399   13C9 FD 12         mov a, g
2400   13CB 28            mov b, c
2401   13CC 5C            adc a, b
2402   13CD 39            mov c, a
2403   13CE E5            pop b
2404   13CF E4            pop a
2405   13D0             ; END TERMS
2406   13D0 E7            pop d
2407   13D1 FD 3E         mov [d], bl
2408   13D3             ;; num = num / 10; 
2409   13D3 FA 05 00      lea d, [bp + 5] ; $num
2410   13D6 DA            push d
2411   13D7 FA 05 00      lea d, [bp + 5] ; $num
2412   13DA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2413   13DD FD 39         mov c, b ; And place it into C
2414   13DF 2A            mov b, [d] ; Lower Word in B
2415   13E0             ; START FACTORS
2416   13E0 D7            push a
2417   13E1 11            mov a, b
2418   13E2 26 0A 00      mov b, $a
2419   13E5 AE            div a, b
2420   13E6 27            mov b, a
2421   13E7 E4            pop a
2422   13E8             ; END FACTORS
2423   13E8 E7            pop d
2424   13E9 FD 43         mov [d], b
2425   13EB 28            mov b, c
2426   13EC FD 44 02 00   mov [d + 2], b
2427   13F0             ;; i++; 
2428   13F0 FA F5 FF      lea d, [bp + -11] ; $i
2429   13F3 2A            mov b, [d]
2430   13F4 D8            push b
2431   13F5 FD 77         inc b
2432   13F7 FA F5 FF      lea d, [bp + -11] ; $i
2433   13FA FD 43         mov [d], b
2434   13FC E5            pop b
2435   13FD 0A 83 13      jmp _while36_cond
2436   1400             _while36_exit:
2437   1400             ;; while (i > 0) { 
2438   1400             _while37_cond:
2439   1400 FA F5 FF      lea d, [bp + -11] ; $i
2440   1403 2A            mov b, [d]
2441   1404             ; START RELATIONAL
2442   1404 D7            push a
2443   1405 11            mov a, b
2444   1406 26 00 00      mov b, $0
2445   1409 B0            cmp a, b
2446   140A FD 7F         sgt ; >
2447   140C E4            pop a
2448   140D             ; END RELATIONAL
2449   140D C0 00 00      cmp b, 0
2450   1410 C6 39 14      je _while37_exit
2451   1413             _while37_block:
2452   1413             ;; i--; 
2453   1413 FA F5 FF      lea d, [bp + -11] ; $i
2454   1416 2A            mov b, [d]
2455   1417 D8            push b
2456   1418 FD 7D         dec b
2457   141A FA F5 FF      lea d, [bp + -11] ; $i
2458   141D FD 43         mov [d], b
2459   141F E5            pop b
2460   1420             ;; putchar(digits[i]); 
2461   1420 FA F7 FF      lea d, [bp + -9] ; $digits
2462   1423 D7            push a
2463   1424 DA            push d
2464   1425 FA F5 FF      lea d, [bp + -11] ; $i
2465   1428 2A            mov b, [d]
2466   1429 E7            pop d
2467   142A 5A            add d, b
2468   142B E4            pop a
2469   142C 32            mov bl, [d]
2470   142D A7 00         mov bh, 0
2471   142F DD            push bl
2472   1430 07 08 15      call putchar
2473   1433 51 01 00      add sp, 1
2474   1436 0A 00 14      jmp _while37_cond
2475   1439             _while37_exit:
2476   1439 F9            leave
2477   143A 09            ret
2478   143B             
2479   143B             print_unsigned:
2480   143B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2481   143E             ;; char digits[5]; 
2482   143E             ; $digits 
2483   143E             ;; int i; 
2484   143E             ; $i 
2485   143E             ;; i = 0; 
2486   143E FA FA FF      lea d, [bp + -6] ; $i
2487   1441 DA            push d
2488   1442 26 00 00      mov b, $0
2489   1445 E7            pop d
2490   1446 FD 43         mov [d], b
2491   1448             ;; if(num == 0){ 
2492   1448             _if38_cond:
2493   1448 FA 05 00      lea d, [bp + 5] ; $num
2494   144B 2A            mov b, [d]
2495   144C             ; START RELATIONAL
2496   144C D7            push a
2497   144D 11            mov a, b
2498   144E 26 00 00      mov b, $0
2499   1451 B0            cmp a, b
2500   1452 FD 71         seq ; ==
2501   1454 E4            pop a
2502   1455             ; END RELATIONAL
2503   1455 C0 00 00      cmp b, 0
2504   1458 C6 6A 14      je _if38_exit
2505   145B             _if38_true:
2506   145B             ;; putchar('0'); 
2507   145B 26 30 00      mov b, $30
2508   145E DD            push bl
2509   145F 07 08 15      call putchar
2510   1462 51 01 00      add sp, 1
2511   1465             ;; return; 
2512   1465 F9            leave
2513   1466 09            ret
2514   1467 0A 6A 14      jmp _if38_exit
2515   146A             _if38_exit:
2516   146A             ;; while (num > 0) { 
2517   146A             _while39_cond:
2518   146A FA 05 00      lea d, [bp + 5] ; $num
2519   146D 2A            mov b, [d]
2520   146E             ; START RELATIONAL
2521   146E D7            push a
2522   146F 11            mov a, b
2523   1470 26 00 00      mov b, $0
2524   1473 B0            cmp a, b
2525   1474 FD 81         sgu ; > (unsigned)
2526   1476 E4            pop a
2527   1477             ; END RELATIONAL
2528   1477 C0 00 00      cmp b, 0
2529   147A C6 C4 14      je _while39_exit
2530   147D             _while39_block:
2531   147D             ;; digits[i] = '0' + (num % 10); 
2532   147D FA FC FF      lea d, [bp + -4] ; $digits
2533   1480 D7            push a
2534   1481 DA            push d
2535   1482 FA FA FF      lea d, [bp + -6] ; $i
2536   1485 2A            mov b, [d]
2537   1486 E7            pop d
2538   1487 5A            add d, b
2539   1488 E4            pop a
2540   1489 DA            push d
2541   148A 26 30 00      mov b, $30
2542   148D             ; START TERMS
2543   148D D7            push a
2544   148E 11            mov a, b
2545   148F FA 05 00      lea d, [bp + 5] ; $num
2546   1492 2A            mov b, [d]
2547   1493             ; START FACTORS
2548   1493 D7            push a
2549   1494 11            mov a, b
2550   1495 26 0A 00      mov b, $a
2551   1498 AE            div a, b ; 
2552   1499 11            mov a, b
2553   149A 27            mov b, a
2554   149B E4            pop a
2555   149C             ; END FACTORS
2556   149C 56            add b, a
2557   149D E4            pop a
2558   149E             ; END TERMS
2559   149E E7            pop d
2560   149F FD 3E         mov [d], bl
2561   14A1             ;; num = num / 10; 
2562   14A1 FA 05 00      lea d, [bp + 5] ; $num
2563   14A4 DA            push d
2564   14A5 FA 05 00      lea d, [bp + 5] ; $num
2565   14A8 2A            mov b, [d]
2566   14A9             ; START FACTORS
2567   14A9 D7            push a
2568   14AA 11            mov a, b
2569   14AB 26 0A 00      mov b, $a
2570   14AE AE            div a, b
2571   14AF 27            mov b, a
2572   14B0 E4            pop a
2573   14B1             ; END FACTORS
2574   14B1 E7            pop d
2575   14B2 FD 43         mov [d], b
2576   14B4             ;; i++; 
2577   14B4 FA FA FF      lea d, [bp + -6] ; $i
2578   14B7 2A            mov b, [d]
2579   14B8 D8            push b
2580   14B9 FD 77         inc b
2581   14BB FA FA FF      lea d, [bp + -6] ; $i
2582   14BE FD 43         mov [d], b
2583   14C0 E5            pop b
2584   14C1 0A 6A 14      jmp _while39_cond
2585   14C4             _while39_exit:
2586   14C4             ;; while (i > 0) { 
2587   14C4             _while40_cond:
2588   14C4 FA FA FF      lea d, [bp + -6] ; $i
2589   14C7 2A            mov b, [d]
2590   14C8             ; START RELATIONAL
2591   14C8 D7            push a
2592   14C9 11            mov a, b
2593   14CA 26 00 00      mov b, $0
2594   14CD B0            cmp a, b
2595   14CE FD 7F         sgt ; >
2596   14D0 E4            pop a
2597   14D1             ; END RELATIONAL
2598   14D1 C0 00 00      cmp b, 0
2599   14D4 C6 FD 14      je _while40_exit
2600   14D7             _while40_block:
2601   14D7             ;; i--; 
2602   14D7 FA FA FF      lea d, [bp + -6] ; $i
2603   14DA 2A            mov b, [d]
2604   14DB D8            push b
2605   14DC FD 7D         dec b
2606   14DE FA FA FF      lea d, [bp + -6] ; $i
2607   14E1 FD 43         mov [d], b
2608   14E3 E5            pop b
2609   14E4             ;; putchar(digits[i]); 
2610   14E4 FA FC FF      lea d, [bp + -4] ; $digits
2611   14E7 D7            push a
2612   14E8 DA            push d
2613   14E9 FA FA FF      lea d, [bp + -6] ; $i
2614   14EC 2A            mov b, [d]
2615   14ED E7            pop d
2616   14EE 5A            add d, b
2617   14EF E4            pop a
2618   14F0 32            mov bl, [d]
2619   14F1 A7 00         mov bh, 0
2620   14F3 DD            push bl
2621   14F4 07 08 15      call putchar
2622   14F7 51 01 00      add sp, 1
2623   14FA 0A C4 14      jmp _while40_cond
2624   14FD             _while40_exit:
2625   14FD F9            leave
2626   14FE 09            ret
2627   14FF             
2628   14FF             date:
2629   14FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2630   1502             
2631   1502             ; --- BEGIN INLINE ASM BLOCK
2632   1502 19 00         mov al, 0 
2633   1504 05 07         syscall sys_datetime
2634   1506             ; --- END INLINE ASM BLOCK
2635   1506             
2636   1506 F9            leave
2637   1507 09            ret
2638   1508             
2639   1508             putchar:
2640   1508 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2641   150B             
2642   150B             ; --- BEGIN INLINE ASM BLOCK
2643   150B FA 05 00      lea d, [bp + 5] ; $c
2644   150E 1E            mov al, [d]
2645   150F 23            mov ah, al
2646   1510 07 90 16      call _putchar
2647   1513             ; --- END INLINE ASM BLOCK
2648   1513             
2649   1513 F9            leave
2650   1514 09            ret
2651   1515             
2652   1515             getchar:
2653   1515 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2654   1518             ;; char c; 
2655   1518             ; $c 
2656   1518             
2657   1518             ; --- BEGIN INLINE ASM BLOCK
2658   1518 07 89 16      call getch
2659   151B 1A            mov al, ah
2660   151C FA 00 00      lea d, [bp + 0] ; $c
2661   151F 3E            mov [d], al
2662   1520             ; --- END INLINE ASM BLOCK
2663   1520             
2664   1520             ;; return c; 
2665   1520 FA 00 00      lea d, [bp + 0] ; $c
2666   1523 32            mov bl, [d]
2667   1524 A7 00         mov bh, 0
2668   1526 F9            leave
2669   1527 09            ret
2670   1528             
2671   1528             scann:
2672   1528 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2673   152B             ;; int m; 
2674   152B             ; $m 
2675   152B             
2676   152B             ; --- BEGIN INLINE ASM BLOCK
2677   152B 07 D4 18      call scan_u16d
2678   152E FA FF FF      lea d, [bp + -1] ; $m
2679   1531 43            mov [d], a
2680   1532             ; --- END INLINE ASM BLOCK
2681   1532             
2682   1532             ;; return m; 
2683   1532 FA FF FF      lea d, [bp + -1] ; $m
2684   1535 2A            mov b, [d]
2685   1536 F9            leave
2686   1537 09            ret
2687   1538             
2688   1538             puts:
2689   1538 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2690   153B             
2691   153B             ; --- BEGIN INLINE ASM BLOCK
2692   153B FA 05 00      lea d, [bp + 5] ; $s
2693   153E 15            mov a, [d]
2694   153F 3C            mov d, a
2695   1540 07 DA 17      call _puts
2696   1543 10 00 0A      mov a, $0A00
2697   1546 05 03         syscall sys_io
2698   1548             ; --- END INLINE ASM BLOCK
2699   1548             
2700   1548 F9            leave
2701   1549 09            ret
2702   154A             
2703   154A             print:
2704   154A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2705   154D             
2706   154D             ; --- BEGIN INLINE ASM BLOCK
2707   154D FA 05 00      lea d, [bp + 5] ; $s
2708   1550 FD 2A         mov d, [d]
2709   1552 07 DA 17      call _puts
2710   1555             ; --- END INLINE ASM BLOCK
2711   1555             
2712   1555 F9            leave
2713   1556 09            ret
2714   1557             
2715   1557             getparam:
2716   1557 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2717   155A             ;; char data; 
2718   155A             ; $data 
2719   155A             
2720   155A             ; --- BEGIN INLINE ASM BLOCK
2721   155A 19 04         mov al, 4
2722   155C FA 05 00      lea d, [bp + 5] ; $address
2723   155F FD 2A         mov d, [d]
2724   1561 05 0C         syscall sys_system
2725   1563 FA 00 00      lea d, [bp + 0] ; $data
2726   1566 FD 3E         mov [d], bl
2727   1568             ; --- END INLINE ASM BLOCK
2728   1568             
2729   1568             ;; return data; 
2730   1568 FA 00 00      lea d, [bp + 0] ; $data
2731   156B 32            mov bl, [d]
2732   156C A7 00         mov bh, 0
2733   156E F9            leave
2734   156F 09            ret
2735   1570             
2736   1570             clear:
2737   1570 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2738   1573             ;; print("\033[2J\033[H"); 
2739   1573 26 FF 22      mov b, _s5 ; "\033[2J\033[H"
2740   1576 FD AB         swp b
2741   1578 D8            push b
2742   1579 07 4A 15      call print
2743   157C 51 02 00      add sp, 2
2744   157F F9            leave
2745   1580 09            ret
2746   1581             
2747   1581             abs:
2748   1581 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2749   1584             ;; return i < 0 ? -i : i; 
2750   1584             _ternary41_cond:
2751   1584 FA 05 00      lea d, [bp + 5] ; $i
2752   1587 2A            mov b, [d]
2753   1588             ; START RELATIONAL
2754   1588 D7            push a
2755   1589 11            mov a, b
2756   158A 26 00 00      mov b, $0
2757   158D B0            cmp a, b
2758   158E FD 73         slt ; < (signed)
2759   1590 E4            pop a
2760   1591             ; END RELATIONAL
2761   1591 C0 00 00      cmp b, 0
2762   1594 C6 A0 15      je _ternary41_false
2763   1597             _ternary41_true:
2764   1597 FA 05 00      lea d, [bp + 5] ; $i
2765   159A 2A            mov b, [d]
2766   159B FD 97         neg b
2767   159D 0A A4 15      jmp _ternary41_exit
2768   15A0             _ternary41_false:
2769   15A0 FA 05 00      lea d, [bp + 5] ; $i
2770   15A3 2A            mov b, [d]
2771   15A4             _ternary41_exit:
2772   15A4 F9            leave
2773   15A5 09            ret
2774   15A6             
2775   15A6             include_stdio_asm:
2776   15A6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2777   15A9             
2778   15A9             ; --- BEGIN INLINE ASM BLOCK
2779   15A9             .include "lib/asm/stdio.asm"
0001+  15A9             ;-----------------------------------------------------------------------------
0002+  15A9             ; stdio.s
0003+  15A9             ;-----------------------------------------------------------------------------
0004+  15A9             .include "lib/asm/string.asm"
0001++ 15A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 15A9             ; string.s
0003++ 15A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 15A9             
0005++ 15A9             
0006++ 15A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 15A9             ; _strrev
0008++ 15A9             ; reverse a string
0009++ 15A9             ; D = string address
0010++ 15A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 15A9             ; 01234
0012++ 15A9             _strrev:
0013++ 15A9 4B          	pusha
0014++ 15AA 07 F0 15    	call _strlen	; length in C
0015++ 15AD 12          	mov a, c
0016++ 15AE AF 01 00    	cmp a, 1
0017++ 15B1 D0 CB 15    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 15B4 7D          	dec a
0019++ 15B5 FD 4E       	mov si, d	; beginning of string
0020++ 15B7 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 15B9 59          	add d, a	; end of string
0022++ 15BA 12          	mov a, c
0023++ 15BB FD 9B       	shr a		; divide by 2
0024++ 15BD 39          	mov c, a	; C now counts the steps
0025++ 15BE             _strrev_L0:
0026++ 15BE 32          	mov bl, [d]	; save load right-side char into BL
0027++ 15BF F6          	lodsb		; load left-side char into AL; increase SI
0028++ 15C0 3E          	mov [d], al	; store left char into right side
0029++ 15C1 1B          	mov al, bl
0030++ 15C2 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 15C3 7E          	dec c
0032++ 15C4 7F          	dec d
0033++ 15C5 C2 00 00    	cmp c, 0
0034++ 15C8 C7 BE 15    	jne _strrev_L0
0035++ 15CB             _strrev_end:
0036++ 15CB 4C          	popa
0037++ 15CC 09          	ret
0038++ 15CD             	
0039++ 15CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 15CD             ; _strchr
0041++ 15CD             ; search string in D for char in AL
0042++ 15CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 15CD             _strchr:
0044++ 15CD             _strchr_L0:
0045++ 15CD 32          	mov bl, [d]
0046++ 15CE C1 00       	cmp bl, 0
0047++ 15D0 C6 DB 15    	je _strchr_end
0048++ 15D3 BA          	cmp al, bl
0049++ 15D4 C6 DB 15    	je _strchr_end
0050++ 15D7 79          	inc d
0051++ 15D8 0A CD 15    	jmp _strchr_L0
0052++ 15DB             _strchr_end:
0053++ 15DB 1B          	mov al, bl
0054++ 15DC 09          	ret
0055++ 15DD             
0056++ 15DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 15DD             ; _strstr
0058++ 15DD             ; find sub-string
0059++ 15DD             ; str1 in SI
0060++ 15DD             ; str2 in DI
0061++ 15DD             ; SI points to end of source string
0062++ 15DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 15DD             _strstr:
0064++ 15DD DB          	push al
0065++ 15DE DA          	push d
0066++ 15DF E3          	push di
0067++ 15E0             _strstr_loop:
0068++ 15E0 F3          	cmpsb					; compare a byte of the strings
0069++ 15E1 C7 EC 15    	jne _strstr_ret
0070++ 15E4 FC 00 00    	lea d, [di + 0]
0071++ 15E7 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 15E9 C7 E0 15    	jne _strstr_loop				; equal chars but not at end
0073++ 15EC             _strstr_ret:
0074++ 15EC F0          	pop di
0075++ 15ED E7          	pop d
0076++ 15EE E8          	pop al
0077++ 15EF 09          	ret
0078++ 15F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 15F0             ; length of null terminated string
0080++ 15F0             ; result in C
0081++ 15F0             ; pointer in D
0082++ 15F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 15F0             _strlen:
0084++ 15F0 DA          	push d
0085++ 15F1 38 00 00    	mov c, 0
0086++ 15F4             _strlen_L1:
0087++ 15F4 BD 00       	cmp byte [d], 0
0088++ 15F6 C6 FE 15    	je _strlen_ret
0089++ 15F9 79          	inc d
0090++ 15FA 78          	inc c
0091++ 15FB 0A F4 15    	jmp _strlen_L1
0092++ 15FE             _strlen_ret:
0093++ 15FE E7          	pop d
0094++ 15FF 09          	ret
0095++ 1600             
0096++ 1600             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1600             ; STRCMP
0098++ 1600             ; compare two strings
0099++ 1600             ; str1 in SI
0100++ 1600             ; str2 in DI
0101++ 1600             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1600             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1600             _strcmp:
0104++ 1600 DB          	push al
0105++ 1601 DA          	push d
0106++ 1602 E3          	push di
0107++ 1603 E2          	push si
0108++ 1604             _strcmp_loop:
0109++ 1604 F3          	cmpsb					; compare a byte of the strings
0110++ 1605 C7 10 16    	jne _strcmp_ret
0111++ 1608 FB FF FF    	lea d, [si +- 1]
0112++ 160B BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 160D C7 04 16    	jne _strcmp_loop				; equal chars but not at end
0114++ 1610             _strcmp_ret:
0115++ 1610 EF          	pop si
0116++ 1611 F0          	pop di
0117++ 1612 E7          	pop d
0118++ 1613 E8          	pop al
0119++ 1614 09          	ret
0120++ 1615             
0121++ 1615             
0122++ 1615             ; STRCPY
0123++ 1615             ; copy null terminated string from SI to DI
0124++ 1615             ; source in SI
0125++ 1615             ; destination in DI
0126++ 1615             _strcpy:
0127++ 1615 E2          	push si
0128++ 1616 E3          	push di
0129++ 1617 DB          	push al
0130++ 1618             _strcpy_L1:
0131++ 1618 F6          	lodsb
0132++ 1619 F7          	stosb
0133++ 161A B9 00       	cmp al, 0
0134++ 161C C7 18 16    	jne _strcpy_L1
0135++ 161F             _strcpy_end:
0136++ 161F E8          	pop al
0137++ 1620 F0          	pop di
0138++ 1621 EF          	pop si
0139++ 1622 09          	ret
0140++ 1623             
0141++ 1623             ; STRCAT
0142++ 1623             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1623             ; source in SI
0144++ 1623             ; destination in DI
0145++ 1623             _strcat:
0146++ 1623 E2          	push si
0147++ 1624 E3          	push di
0148++ 1625 D7          	push a
0149++ 1626 DA          	push d
0150++ 1627 50          	mov a, di
0151++ 1628 3C          	mov d, a
0152++ 1629             _strcat_goto_end_L1:
0153++ 1629 BD 00       	cmp byte[d], 0
0154++ 162B C6 32 16    	je _strcat_start
0155++ 162E 79          	inc d
0156++ 162F 0A 29 16    	jmp _strcat_goto_end_L1
0157++ 1632             _strcat_start:
0158++ 1632 FD 50       	mov di, d
0159++ 1634             _strcat_L1:
0160++ 1634 F6          	lodsb
0161++ 1635 F7          	stosb
0162++ 1636 B9 00       	cmp al, 0
0163++ 1638 C7 34 16    	jne _strcat_L1
0164++ 163B             _strcat_end:
0165++ 163B E7          	pop d
0166++ 163C E4          	pop a
0167++ 163D F0          	pop di
0168++ 163E EF          	pop si
0169++ 163F 09          	ret
0170++ 1640             
0171++ 1640             
0005+  1640             
0006+  1640             ;-----------------------------------------------------------------------------
0007+  1640             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1640             ; ASCII in BL
0009+  1640             ; result in AL
0010+  1640             ; ascii for F = 0100 0110
0011+  1640             ; ascii for 9 = 0011 1001
0012+  1640             ;-----------------------------------------------------------------------------
0013+  1640             hex_ascii_encode:
0014+  1640 1B            mov al, bl
0015+  1641 93 40         test al, $40        ; test if letter or number
0016+  1643 C7 49 16      jnz hex_letter
0017+  1646 87 0F         and al, $0F        ; get number
0018+  1648 09            ret
0019+  1649             hex_letter:
0020+  1649 87 0F         and al, $0F        ; get letter
0021+  164B 6A 09         add al, 9
0022+  164D 09            ret
0023+  164E             
0024+  164E             ;-----------------------------------------------------------------------------
0025+  164E             ; ATOI
0026+  164E             ; 2 letter hex string in B
0027+  164E             ; 8bit integer returned in AL
0028+  164E             ;-----------------------------------------------------------------------------
0029+  164E             _atoi:
0030+  164E D8            push b
0031+  164F 07 40 16      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1652 30            mov bl, bh
0033+  1653 DB            push al          ; save a
0034+  1654 07 40 16      call hex_ascii_encode
0035+  1657 EA            pop bl  
0036+  1658 FD 9E 04      shl al, 4
0037+  165B 8C            or al, bl
0038+  165C E5            pop b
0039+  165D 09            ret  
0040+  165E             
0041+  165E             
0042+  165E             ;-----------------------------------------------------------------------------
0043+  165E             ; ITOA
0044+  165E             ; 8bit value in BL
0045+  165E             ; 2 byte ASCII result in A
0046+  165E             ;-----------------------------------------------------------------------------
0047+  165E             _itoa:
0048+  165E DA            push d
0049+  165F D8            push b
0050+  1660 A7 00         mov bh, 0
0051+  1662 FD A4 04      shr bl, 4  
0052+  1665 74            mov d, b
0053+  1666 1F 0E 19      mov al, [d + s_hex_digits]
0054+  1669 23            mov ah, al
0055+  166A               
0056+  166A E5            pop b
0057+  166B D8            push b
0058+  166C A7 00         mov bh, 0
0059+  166E FD 87 0F      and bl, $0F
0060+  1671 74            mov d, b
0061+  1672 1F 0E 19      mov al, [d + s_hex_digits]
0062+  1675 E5            pop b
0063+  1676 E7            pop d
0064+  1677 09            ret
0065+  1678             
0066+  1678             ;-----------------------------------------------------------------------------
0067+  1678             ; HEX STRING TO BINARY
0068+  1678             ; di = destination address
0069+  1678             ; si = source
0070+  1678             ;-----------------------------------------------------------------------------
0071+  1678             _hex_to_int:
0072+  1678             _hex_to_int_L1:
0073+  1678 F6            lodsb          ; load from [SI] to AL
0074+  1679 B9 00         cmp al, 0        ; check if ASCII 0
0075+  167B C6 88 16      jz _hex_to_int_ret
0076+  167E 36            mov bh, al
0077+  167F F6            lodsb
0078+  1680 2F            mov bl, al
0079+  1681 07 4E 16      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1684 F7            stosb          ; store AL to [DI]
0081+  1685 0A 78 16      jmp _hex_to_int_L1
0082+  1688             _hex_to_int_ret:
0083+  1688 09            ret    
0084+  1689             
0085+  1689             ;-----------------------------------------------------------------------------
0086+  1689             ; GETCHAR
0087+  1689             ; char in ah
0088+  1689             ;-----------------------------------------------------------------------------
0089+  1689             getch:
0090+  1689 DB            push al
0091+  168A             getch_retry:
0092+  168A 19 01         mov al, 1
0093+  168C 05 03         syscall sys_io      ; receive in AH
0094+  168E E8            pop al
0095+  168F 09            ret
0096+  1690             
0097+  1690             ;-----------------------------------------------------------------------------
0098+  1690             ; PUTCHAR
0099+  1690             ; char in ah
0100+  1690             ;-----------------------------------------------------------------------------
0101+  1690             _putchar:
0102+  1690 D7            push a
0103+  1691 19 00         mov al, 0
0104+  1693 05 03         syscall sys_io      ; char in AH
0105+  1695 E4            pop a
0106+  1696 09            ret
0107+  1697             
0108+  1697             ;-----------------------------------------------------------------------------
0109+  1697             ;; INPUT A STRING
0110+  1697             ;; terminates with null
0111+  1697             ;; pointer in D
0112+  1697             ;-----------------------------------------------------------------------------
0113+  1697             _gets:
0114+  1697 D7            push a
0115+  1698 DA            push d
0116+  1699             _gets_loop:
0117+  1699 19 01         mov al, 1
0118+  169B 05 03         syscall sys_io      ; receive in AH
0119+  169D B9 00         cmp al, 0        ; check error code (AL)
0120+  169F C6 99 16      je _gets_loop      ; if no char received, retry
0121+  16A2             
0122+  16A2 76 1B         cmp ah, 27
0123+  16A4 C6 C5 16      je _gets_ansi_esc
0124+  16A7 76 0A         cmp ah, $0A        ; LF
0125+  16A9 C6 30 17      je _gets_end
0126+  16AC 76 0D         cmp ah, $0D        ; CR
0127+  16AE C6 30 17      je _gets_end
0128+  16B1 76 5C         cmp ah, $5C        ; '\\'
0129+  16B3 C6 F1 16      je _gets_escape
0130+  16B6               
0131+  16B6 76 08         cmp ah, $08      ; check for backspace
0132+  16B8 C6 C1 16      je _gets_backspace
0133+  16BB             
0134+  16BB 1A            mov al, ah
0135+  16BC 3E            mov [d], al
0136+  16BD 79            inc d
0137+  16BE 0A 99 16      jmp _gets_loop
0138+  16C1             _gets_backspace:
0139+  16C1 7F            dec d
0140+  16C2 0A 99 16      jmp _gets_loop
0141+  16C5             _gets_ansi_esc:
0142+  16C5 19 01         mov al, 1
0143+  16C7 05 03         syscall sys_io        ; receive in AH without echo
0144+  16C9 B9 00         cmp al, 0          ; check error code (AL)
0145+  16CB C6 C5 16      je _gets_ansi_esc    ; if no char received, retry
0146+  16CE 76 5B         cmp ah, '['
0147+  16D0 C7 99 16      jne _gets_loop
0148+  16D3             _gets_ansi_esc_2:
0149+  16D3 19 01         mov al, 1
0150+  16D5 05 03         syscall sys_io          ; receive in AH without echo
0151+  16D7 B9 00         cmp al, 0            ; check error code (AL)
0152+  16D9 C6 D3 16      je _gets_ansi_esc_2  ; if no char received, retry
0153+  16DC 76 44         cmp ah, 'D'
0154+  16DE C6 E9 16      je _gets_left_arrow
0155+  16E1 76 43         cmp ah, 'C'
0156+  16E3 C6 ED 16      je _gets_right_arrow
0157+  16E6 0A 99 16      jmp _gets_loop
0158+  16E9             _gets_left_arrow:
0159+  16E9 7F            dec d
0160+  16EA 0A 99 16      jmp _gets_loop
0161+  16ED             _gets_right_arrow:
0162+  16ED 79            inc d
0163+  16EE 0A 99 16      jmp _gets_loop
0164+  16F1             _gets_escape:
0165+  16F1 19 01         mov al, 1
0166+  16F3 05 03         syscall sys_io      ; receive in AH
0167+  16F5 B9 00         cmp al, 0        ; check error code (AL)
0168+  16F7 C6 F1 16      je _gets_escape      ; if no char received, retry
0169+  16FA 76 6E         cmp ah, 'n'
0170+  16FC C6 1B 17      je _gets_LF
0171+  16FF 76 72         cmp ah, 'r'
0172+  1701 C6 22 17      je _gets_CR
0173+  1704 76 30         cmp ah, '0'
0174+  1706 C6 29 17      je _gets_NULL
0175+  1709 76 5C         cmp ah, $5C  ; '\'
0176+  170B C6 14 17      je _gets_slash
0177+  170E 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  170F 3E            mov [d], al
0179+  1710 79            inc d
0180+  1711 0A 99 16      jmp _gets_loop
0181+  1714             _gets_slash:
0182+  1714 19 5C         mov al, $5C
0183+  1716 3E            mov [d], al
0184+  1717 79            inc d
0185+  1718 0A 99 16      jmp _gets_loop
0186+  171B             _gets_LF:
0187+  171B 19 0A         mov al, $0A
0188+  171D 3E            mov [d], al
0189+  171E 79            inc d
0190+  171F 0A 99 16      jmp _gets_loop
0191+  1722             _gets_CR:
0192+  1722 19 0D         mov al, $0D
0193+  1724 3E            mov [d], al
0194+  1725 79            inc d
0195+  1726 0A 99 16      jmp _gets_loop
0196+  1729             _gets_NULL:
0197+  1729 19 00         mov al, $00
0198+  172B 3E            mov [d], al
0199+  172C 79            inc d
0200+  172D 0A 99 16      jmp _gets_loop
0201+  1730             _gets_end:
0202+  1730 19 00         mov al, 0
0203+  1732 3E            mov [d], al        ; terminate string
0204+  1733 E7            pop d
0205+  1734 E4            pop a
0206+  1735 09            ret
0207+  1736             
0208+  1736             ;-----------------------------------------------------------------------------
0209+  1736             ;; INPUT TEXT
0210+  1736             ;; terminated with CTRL+D
0211+  1736             ;; pointer in D
0212+  1736             ;-----------------------------------------------------------------------------
0213+  1736             _gettxt:
0214+  1736 D7            push a
0215+  1737 DA            push d
0216+  1738             _gettxt_loop:
0217+  1738 19 01         mov al, 1
0218+  173A 05 03         syscall sys_io      ; receive in AH
0219+  173C B9 00         cmp al, 0        ; check error code (AL)
0220+  173E C6 38 17      je _gettxt_loop    ; if no char received, retry
0221+  1741 76 04         cmp ah, 4      ; EOT
0222+  1743 C6 81 17      je _gettxt_end
0223+  1746 76 08         cmp ah, $08      ; check for backspace
0224+  1748 C6 7D 17      je _gettxt_backspace
0225+  174B 76 5C         cmp ah, $5C        ; '\'
0226+  174D C6 56 17      je _gettxt_escape
0227+  1750 1A            mov al, ah
0228+  1751 3E            mov [d], al
0229+  1752 79            inc d
0230+  1753 0A 38 17      jmp _gettxt_loop
0231+  1756             _gettxt_escape:
0232+  1756 19 01         mov al, 1
0233+  1758 05 03         syscall sys_io      ; receive in AH
0234+  175A B9 00         cmp al, 0        ; check error code (AL)
0235+  175C C6 56 17      je _gettxt_escape    ; if no char received, retry
0236+  175F 76 6E         cmp ah, 'n'
0237+  1761 C6 6F 17      je _gettxt_LF
0238+  1764 76 72         cmp ah, 'r'
0239+  1766 C6 76 17      je _gettxt_CR
0240+  1769 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  176A 3E            mov [d], al
0242+  176B 79            inc d
0243+  176C 0A 38 17      jmp _gettxt_loop
0244+  176F             _gettxt_LF:
0245+  176F 19 0A         mov al, $0A
0246+  1771 3E            mov [d], al
0247+  1772 79            inc d
0248+  1773 0A 38 17      jmp _gettxt_loop
0249+  1776             _gettxt_CR:
0250+  1776 19 0D         mov al, $0D
0251+  1778 3E            mov [d], al
0252+  1779 79            inc d
0253+  177A 0A 38 17      jmp _gettxt_loop
0254+  177D             _gettxt_backspace:
0255+  177D 7F            dec d
0256+  177E 0A 38 17      jmp _gettxt_loop
0257+  1781             _gettxt_end:
0258+  1781 19 00         mov al, 0
0259+  1783 3E            mov [d], al        ; terminate string
0260+  1784 E7            pop d
0261+  1785 E4            pop a
0262+  1786 09            ret
0263+  1787             
0264+  1787             ;-----------------------------------------------------------------------------
0265+  1787             ; PRINT NEW LINE
0266+  1787             ;-----------------------------------------------------------------------------
0267+  1787             printnl:
0268+  1787 D7            push a
0269+  1788 10 00 0A      mov a, $0A00
0270+  178B 05 03         syscall sys_io
0271+  178D 10 00 0D      mov a, $0D00
0272+  1790 05 03         syscall sys_io
0273+  1792 E4            pop a
0274+  1793 09            ret
0275+  1794             
0276+  1794             ;-----------------------------------------------------------------------------
0277+  1794             ; _strtoint
0278+  1794             ; 4 digit hex string number in d
0279+  1794             ; integer returned in A
0280+  1794             ;-----------------------------------------------------------------------------
0281+  1794             _strtointx:
0282+  1794 D8            push b
0283+  1795 32            mov bl, [d]
0284+  1796 37            mov bh, bl
0285+  1797 33 01 00      mov bl, [d + 1]
0286+  179A 07 4E 16      call _atoi        ; convert to int in AL
0287+  179D 23            mov ah, al        ; move to AH
0288+  179E 33 02 00      mov bl, [d + 2]
0289+  17A1 37            mov bh, bl
0290+  17A2 33 03 00      mov bl, [d + 3]
0291+  17A5 07 4E 16      call _atoi        ; convert to int in AL
0292+  17A8 E5            pop b
0293+  17A9 09            ret
0294+  17AA             
0295+  17AA             ;-----------------------------------------------------------------------------
0296+  17AA             ; _strtoint
0297+  17AA             ; 5 digit base10 string number in d
0298+  17AA             ; integer returned in A
0299+  17AA             ;-----------------------------------------------------------------------------
0300+  17AA             _strtoint:
0301+  17AA E2            push si
0302+  17AB D8            push b
0303+  17AC D9            push c
0304+  17AD DA            push d
0305+  17AE 07 F0 15      call _strlen      ; get string length in C
0306+  17B1 7E            dec c
0307+  17B2 FD 4E         mov si, d
0308+  17B4 12            mov a, c
0309+  17B5 FD 99         shl a
0310+  17B7 3B 26 19      mov d, table_power
0311+  17BA 59            add d, a
0312+  17BB 38 00 00      mov c, 0
0313+  17BE             _strtoint_L0:
0314+  17BE F6            lodsb      ; load ASCII to al
0315+  17BF B9 00         cmp al, 0
0316+  17C1 C6 D4 17      je _strtoint_end
0317+  17C4 6F 30         sub al, $30    ; make into integer
0318+  17C6 22 00         mov ah, 0
0319+  17C8 2A            mov b, [d]
0320+  17C9 AC            mul a, b      ; result in B since it fits in 16bits
0321+  17CA 11            mov a, b
0322+  17CB 28            mov b, c
0323+  17CC 54            add a, b
0324+  17CD 39            mov c, a
0325+  17CE 63 02 00      sub d, 2
0326+  17D1 0A BE 17      jmp _strtoint_L0
0327+  17D4             _strtoint_end:
0328+  17D4 12            mov a, c
0329+  17D5 E7            pop d
0330+  17D6 E6            pop c
0331+  17D7 E5            pop b
0332+  17D8 EF            pop si
0333+  17D9 09            ret
0334+  17DA             
0335+  17DA             ;-----------------------------------------------------------------------------
0336+  17DA             ; PRINT NULL TERMINATED STRING
0337+  17DA             ; pointer in D
0338+  17DA             ;-----------------------------------------------------------------------------
0339+  17DA             _puts:
0340+  17DA D7            push a
0341+  17DB DA            push d
0342+  17DC             _puts_L1:
0343+  17DC 1E            mov al, [d]
0344+  17DD B9 00         cmp al, 0
0345+  17DF C6 EB 17      jz _puts_END
0346+  17E2 23            mov ah, al
0347+  17E3 19 00         mov al, 0
0348+  17E5 05 03         syscall sys_io
0349+  17E7 79            inc d
0350+  17E8 0A DC 17      jmp _puts_L1
0351+  17EB             _puts_END:
0352+  17EB E7            pop d
0353+  17EC E4            pop a
0354+  17ED 09            ret
0355+  17EE             
0356+  17EE             ;-----------------------------------------------------------------------------
0357+  17EE             ; PRINT N SIZE STRING
0358+  17EE             ; pointer in D
0359+  17EE             ; size in C
0360+  17EE             ;-----------------------------------------------------------------------------
0361+  17EE             _putsn:
0362+  17EE DB            push al
0363+  17EF DA            push d
0364+  17F0 D9            push c
0365+  17F1             _putsn_L0:
0366+  17F1 1E            mov al, [d]
0367+  17F2 23            mov ah, al
0368+  17F3 19 00         mov al, 0
0369+  17F5 05 03         syscall sys_io
0370+  17F7 79            inc d
0371+  17F8 7E            dec c  
0372+  17F9 C2 00 00      cmp c, 0
0373+  17FC C7 F1 17      jne _putsn_L0
0374+  17FF             _putsn_end:
0375+  17FF E6            pop c
0376+  1800 E7            pop d
0377+  1801 E8            pop al
0378+  1802 09            ret
0379+  1803             
0380+  1803             ;-----------------------------------------------------------------------------
0381+  1803             ; print 16bit decimal number
0382+  1803             ; input number in A
0383+  1803             ;-----------------------------------------------------------------------------
0384+  1803             print_u16d:
0385+  1803 D7            push a
0386+  1804 D8            push b
0387+  1805 26 10 27      mov b, 10000
0388+  1808 AE            div a, b      ; get 10000's coeff.
0389+  1809 07 2B 18      call print_number
0390+  180C 11            mov a, b
0391+  180D 26 E8 03      mov b, 1000
0392+  1810 AE            div a, b      ; get 1000's coeff.
0393+  1811 07 2B 18      call print_number
0394+  1814 11            mov a, b
0395+  1815 26 64 00      mov b, 100
0396+  1818 AE            div a, b
0397+  1819 07 2B 18      call print_number
0398+  181C 11            mov a, b
0399+  181D 26 0A 00      mov b, 10
0400+  1820 AE            div a, b
0401+  1821 07 2B 18      call print_number
0402+  1824 1B            mov al, bl      ; 1's coeff in bl
0403+  1825 07 2B 18      call print_number
0404+  1828 E5            pop b
0405+  1829 E4            pop a
0406+  182A 09            ret
0407+  182B             
0408+  182B             ;-----------------------------------------------------------------------------
0409+  182B             ; print AL
0410+  182B             ;-----------------------------------------------------------------------------
0411+  182B             print_number:
0412+  182B 6A 30         add al, $30
0413+  182D 23            mov ah, al
0414+  182E 07 90 16      call _putchar
0415+  1831 09            ret
0416+  1832             
0417+  1832             ;-----------------------------------------------------------------------------
0418+  1832             ; PRINT 16BIT HEX INTEGER
0419+  1832             ; integer value in reg B
0420+  1832             ;-----------------------------------------------------------------------------
0421+  1832             print_u16x:
0422+  1832 D7            push a
0423+  1833 D8            push b
0424+  1834 DD            push bl
0425+  1835 30            mov bl, bh
0426+  1836 07 5E 16      call _itoa        ; convert bh to char in A
0427+  1839 2F            mov bl, al        ; save al
0428+  183A 19 00         mov al, 0
0429+  183C 05 03         syscall sys_io        ; display AH
0430+  183E 24            mov ah, bl        ; retrieve al
0431+  183F 19 00         mov al, 0
0432+  1841 05 03         syscall sys_io        ; display AL
0433+  1843             
0434+  1843 EA            pop bl
0435+  1844 07 5E 16      call _itoa        ; convert bh to char in A
0436+  1847 2F            mov bl, al        ; save al
0437+  1848 19 00         mov al, 0
0438+  184A 05 03         syscall sys_io        ; display AH
0439+  184C 24            mov ah, bl        ; retrieve al
0440+  184D 19 00         mov al, 0
0441+  184F 05 03         syscall sys_io        ; display AL
0442+  1851             
0443+  1851 E5            pop b
0444+  1852 E4            pop a
0445+  1853 09            ret
0446+  1854             
0447+  1854             ;-----------------------------------------------------------------------------
0448+  1854             ; INPUT 16BIT HEX INTEGER
0449+  1854             ; read 16bit integer into A
0450+  1854             ;-----------------------------------------------------------------------------
0451+  1854             scan_u16x:
0452+  1854 F8 10 00      enter 16
0453+  1857 D8            push b
0454+  1858 DA            push d
0455+  1859             
0456+  1859 FA F1 FF      lea d, [bp + -15]
0457+  185C 07 97 16      call _gets        ; get number
0458+  185F             
0459+  185F 32            mov bl, [d]
0460+  1860 37            mov bh, bl
0461+  1861 33 01 00      mov bl, [d + 1]
0462+  1864 07 4E 16      call _atoi        ; convert to int in AL
0463+  1867 23            mov ah, al        ; move to AH
0464+  1868             
0465+  1868 33 02 00      mov bl, [d + 2]
0466+  186B 37            mov bh, bl
0467+  186C 33 03 00      mov bl, [d + 3]
0468+  186F 07 4E 16      call _atoi        ; convert to int in AL
0469+  1872             
0470+  1872 E7            pop d
0471+  1873 E5            pop b
0472+  1874 F9            leave
0473+  1875 09            ret
0474+  1876             
0475+  1876             ;-----------------------------------------------------------------------------
0476+  1876             ; PRINT 8bit HEX INTEGER
0477+  1876             ; integer value in reg bl
0478+  1876             ;-----------------------------------------------------------------------------
0479+  1876             print_u8x:
0480+  1876 D7            push a
0481+  1877 DD            push bl
0482+  1878             
0483+  1878 07 5E 16      call _itoa        ; convert bl to char in A
0484+  187B 2F            mov bl, al        ; save al
0485+  187C 19 00         mov al, 0
0486+  187E 05 03         syscall sys_io        ; display AH
0487+  1880 24            mov ah, bl        ; retrieve al
0488+  1881 19 00         mov al, 0
0489+  1883 05 03         syscall sys_io        ; display AL
0490+  1885             
0491+  1885 EA            pop bl
0492+  1886 E4            pop a
0493+  1887 09            ret
0494+  1888             
0495+  1888             ;-----------------------------------------------------------------------------
0496+  1888             ; print 8bit decimal unsigned number
0497+  1888             ; input number in AL
0498+  1888             ;-----------------------------------------------------------------------------
0499+  1888             print_u8d:
0500+  1888 D7            push a
0501+  1889 D8            push b
0502+  188A             
0503+  188A 22 00         mov ah, 0
0504+  188C 26 64 00      mov b, 100
0505+  188F AE            div a, b
0506+  1890 D8            push b      ; save remainder
0507+  1891 B9 00         cmp al, 0
0508+  1893 C6 9D 18      je skip100
0509+  1896 6A 30         add al, $30
0510+  1898 23            mov ah, al
0511+  1899 19 00         mov al, 0
0512+  189B 05 03         syscall sys_io  ; print coeff
0513+  189D             skip100:
0514+  189D E4            pop a
0515+  189E 22 00         mov ah, 0
0516+  18A0 26 0A 00      mov b, 10
0517+  18A3 AE            div a, b
0518+  18A4 D8            push b      ; save remainder
0519+  18A5 B9 00         cmp al, 0
0520+  18A7 C6 B1 18      je skip10
0521+  18AA 6A 30         add al, $30
0522+  18AC 23            mov ah, al
0523+  18AD 19 00         mov al, 0
0524+  18AF 05 03         syscall sys_io  ; print coeff
0525+  18B1             skip10:
0526+  18B1 E4            pop a
0527+  18B2 1B            mov al, bl
0528+  18B3 6A 30         add al, $30
0529+  18B5 23            mov ah, al
0530+  18B6 19 00         mov al, 0
0531+  18B8 05 03         syscall sys_io  ; print coeff
0532+  18BA E5            pop b
0533+  18BB E4            pop a
0534+  18BC 09            ret
0535+  18BD             
0536+  18BD             ;-----------------------------------------------------------------------------
0537+  18BD             ; INPUT 8BIT HEX INTEGER
0538+  18BD             ; read 8bit integer into AL
0539+  18BD             ;-----------------------------------------------------------------------------
0540+  18BD             scan_u8x:
0541+  18BD F8 04 00      enter 4
0542+  18C0 D8            push b
0543+  18C1 DA            push d
0544+  18C2             
0545+  18C2 FA FD FF      lea d, [bp + -3]
0546+  18C5 07 97 16      call _gets        ; get number
0547+  18C8             
0548+  18C8 32            mov bl, [d]
0549+  18C9 37            mov bh, bl
0550+  18CA 33 01 00      mov bl, [d + 1]
0551+  18CD 07 4E 16      call _atoi        ; convert to int in AL
0552+  18D0             
0553+  18D0 E7            pop d
0554+  18D1 E5            pop b
0555+  18D2 F9            leave
0556+  18D3 09            ret
0557+  18D4             
0558+  18D4             ;-----------------------------------------------------------------------------
0559+  18D4             ; input decimal number
0560+  18D4             ; result in A
0561+  18D4             ; 655'\0'
0562+  18D4             ; low--------high
0563+  18D4             ;-----------------------------------------------------------------------------
0564+  18D4             scan_u16d:
0565+  18D4 F8 08 00      enter 8
0566+  18D7 E2            push si
0567+  18D8 D8            push b
0568+  18D9 D9            push c
0569+  18DA DA            push d
0570+  18DB FA F9 FF      lea d, [bp +- 7]
0571+  18DE 07 97 16      call _gets
0572+  18E1 07 F0 15      call _strlen      ; get string length in C
0573+  18E4 7E            dec c
0574+  18E5 FD 4E         mov si, d
0575+  18E7 12            mov a, c
0576+  18E8 FD 99         shl a
0577+  18EA 3B 26 19      mov d, table_power
0578+  18ED 59            add d, a
0579+  18EE 38 00 00      mov c, 0
0580+  18F1             mul_loop:
0581+  18F1 F6            lodsb      ; load ASCII to al
0582+  18F2 B9 00         cmp al, 0
0583+  18F4 C6 07 19      je mul_exit
0584+  18F7 6F 30         sub al, $30    ; make into integer
0585+  18F9 22 00         mov ah, 0
0586+  18FB 2A            mov b, [d]
0587+  18FC AC            mul a, b      ; result in B since it fits in 16bits
0588+  18FD 11            mov a, b
0589+  18FE 28            mov b, c
0590+  18FF 54            add a, b
0591+  1900 39            mov c, a
0592+  1901 63 02 00      sub d, 2
0593+  1904 0A F1 18      jmp mul_loop
0594+  1907             mul_exit:
0595+  1907 12            mov a, c
0596+  1908 E7            pop d
0597+  1909 E6            pop c
0598+  190A E5            pop b
0599+  190B EF            pop si
0600+  190C F9            leave
0601+  190D 09            ret
0602+  190E             
0603+  190E 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1912 34 35 36 37 
0603+  1916 38 39 41 42 
0603+  191A 43 44 45 46 
0604+  191E 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1922 1B 5B 48 00 
0605+  1926             
0606+  1926             table_power:
0607+  1926 01 00         .dw 1
0608+  1928 0A 00         .dw 10
0609+  192A 64 00         .dw 100
0610+  192C E8 03         .dw 1000
0611+  192E 10 27         .dw 100002780   1930             ; --- END INLINE ASM BLOCK
2781   1930             
2782   1930 F9            leave
2783   1931 09            ret
2784   1932             
2785   1932             base64_encode:
2786   1932 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2787   1935             ;; int i = 0; 
2788   1935             ; $i 
2789   1935 10 00 00      mov a, $0
2790   1938 45 FF FF      mov [bp + -1], a
2791   193B             ;; int j = 0; 
2792   193B             ; $j 
2793   193B 10 00 00      mov a, $0
2794   193E 45 FD FF      mov [bp + -3], a
2795   1941             ;; int k; 
2796   1941             ; $k 
2797   1941             ;; int input_len; 
2798   1941             ; $input_len 
2799   1941             ;; unsigned char input_buffer[3]; 
2800   1941             ; $input_buffer 
2801   1941             ;; unsigned char output_buffer[4]; 
2802   1941             ; $output_buffer 
2803   1941             ;; input_len = strlen(input); 
2804   1941 FA F9 FF      lea d, [bp + -7] ; $input_len
2805   1944 DA            push d
2806   1945 FA 05 00      lea d, [bp + 5] ; $input
2807   1948 2A            mov b, [d]
2808   1949 FD AB         swp b
2809   194B D8            push b
2810   194C 07 E3 05      call strlen
2811   194F 51 02 00      add sp, 2
2812   1952 E7            pop d
2813   1953 FD 43         mov [d], b
2814   1955             ;; while (input_len--) { 
2815   1955             _while42_cond:
2816   1955 FA F9 FF      lea d, [bp + -7] ; $input_len
2817   1958 2A            mov b, [d]
2818   1959 D8            push b
2819   195A FD 7D         dec b
2820   195C FA F9 FF      lea d, [bp + -7] ; $input_len
2821   195F FD 43         mov [d], b
2822   1961 E5            pop b
2823   1962 C0 00 00      cmp b, 0
2824   1965 C6 19 1B      je _while42_exit
2825   1968             _while42_block:
2826   1968             ;; input_buffer[i++] = *(input++); 
2827   1968 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2828   196B D7            push a
2829   196C DA            push d
2830   196D FA FF FF      lea d, [bp + -1] ; $i
2831   1970 2A            mov b, [d]
2832   1971 D8            push b
2833   1972 FD 77         inc b
2834   1974 FA FF FF      lea d, [bp + -1] ; $i
2835   1977 FD 43         mov [d], b
2836   1979 E5            pop b
2837   197A E7            pop d
2838   197B 5A            add d, b
2839   197C E4            pop a
2840   197D DA            push d
2841   197E FA 05 00      lea d, [bp + 5] ; $input
2842   1981 2A            mov b, [d]
2843   1982 D8            push b
2844   1983 FD 77         inc b
2845   1985 FA 05 00      lea d, [bp + 5] ; $input
2846   1988 FD 43         mov [d], b
2847   198A E5            pop b
2848   198B 74            mov d, b
2849   198C 32            mov bl, [d]
2850   198D A7 00         mov bh, 0
2851   198F E7            pop d
2852   1990 FD 3E         mov [d], bl
2853   1992             ;; if (i == 3) { 
2854   1992             _if43_cond:
2855   1992 FA FF FF      lea d, [bp + -1] ; $i
2856   1995 2A            mov b, [d]
2857   1996             ; START RELATIONAL
2858   1996 D7            push a
2859   1997 11            mov a, b
2860   1998 26 03 00      mov b, $3
2861   199B B0            cmp a, b
2862   199C FD 71         seq ; ==
2863   199E E4            pop a
2864   199F             ; END RELATIONAL
2865   199F C0 00 00      cmp b, 0
2866   19A2 C6 16 1B      je _if43_exit
2867   19A5             _if43_true:
2868   19A5             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
2869   19A5 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2870   19A8 D7            push a
2871   19A9 DA            push d
2872   19AA 26 00 00      mov b, $0
2873   19AD E7            pop d
2874   19AE 5A            add d, b
2875   19AF E4            pop a
2876   19B0 DA            push d
2877   19B1 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2878   19B4 D7            push a
2879   19B5 DA            push d
2880   19B6 26 00 00      mov b, $0
2881   19B9 E7            pop d
2882   19BA 5A            add d, b
2883   19BB E4            pop a
2884   19BC 32            mov bl, [d]
2885   19BD A7 00         mov bh, 0
2886   19BF D7            push a
2887   19C0 11            mov a, b
2888   19C1 26 FC 00      mov b, $fc
2889   19C4 FD 92         and b, a ; &
2890   19C6 E4            pop a
2891   19C7             ; START SHIFT
2892   19C7 D7            push a
2893   19C8 11            mov a, b
2894   19C9 26 02 00      mov b, $2
2895   19CC FD 39         mov c, b
2896   19CE A5            ashr a, cl
2897   19CF 27            mov b, a
2898   19D0 E4            pop a
2899   19D1             ; END SHIFT
2900   19D1 E7            pop d
2901   19D2 FD 3E         mov [d], bl
2902   19D4             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
2903   19D4 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2904   19D7 D7            push a
2905   19D8 DA            push d
2906   19D9 26 01 00      mov b, $1
2907   19DC E7            pop d
2908   19DD 5A            add d, b
2909   19DE E4            pop a
2910   19DF DA            push d
2911   19E0 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2912   19E3 D7            push a
2913   19E4 DA            push d
2914   19E5 26 00 00      mov b, $0
2915   19E8 E7            pop d
2916   19E9 5A            add d, b
2917   19EA E4            pop a
2918   19EB 32            mov bl, [d]
2919   19EC A7 00         mov bh, 0
2920   19EE D7            push a
2921   19EF 11            mov a, b
2922   19F0 26 03 00      mov b, $3
2923   19F3 FD 92         and b, a ; &
2924   19F5 E4            pop a
2925   19F6             ; START SHIFT
2926   19F6 D7            push a
2927   19F7 11            mov a, b
2928   19F8 26 04 00      mov b, $4
2929   19FB FD 39         mov c, b
2930   19FD 9D            shl a, cl
2931   19FE 27            mov b, a
2932   19FF E4            pop a
2933   1A00             ; END SHIFT
2934   1A00             ; START TERMS
2935   1A00 D7            push a
2936   1A01 11            mov a, b
2937   1A02 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2938   1A05 D7            push a
2939   1A06 DA            push d
2940   1A07 26 01 00      mov b, $1
2941   1A0A E7            pop d
2942   1A0B 5A            add d, b
2943   1A0C E4            pop a
2944   1A0D 32            mov bl, [d]
2945   1A0E A7 00         mov bh, 0
2946   1A10 D7            push a
2947   1A11 11            mov a, b
2948   1A12 26 F0 00      mov b, $f0
2949   1A15 FD 92         and b, a ; &
2950   1A17 E4            pop a
2951   1A18             ; START SHIFT
2952   1A18 D7            push a
2953   1A19 11            mov a, b
2954   1A1A 26 04 00      mov b, $4
2955   1A1D FD 39         mov c, b
2956   1A1F A5            ashr a, cl
2957   1A20 27            mov b, a
2958   1A21 E4            pop a
2959   1A22             ; END SHIFT
2960   1A22 56            add b, a
2961   1A23 E4            pop a
2962   1A24             ; END TERMS
2963   1A24 E7            pop d
2964   1A25 FD 3E         mov [d], bl
2965   1A27             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
2966   1A27 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2967   1A2A D7            push a
2968   1A2B DA            push d
2969   1A2C 26 02 00      mov b, $2
2970   1A2F E7            pop d
2971   1A30 5A            add d, b
2972   1A31 E4            pop a
2973   1A32 DA            push d
2974   1A33 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2975   1A36 D7            push a
2976   1A37 DA            push d
2977   1A38 26 01 00      mov b, $1
2978   1A3B E7            pop d
2979   1A3C 5A            add d, b
2980   1A3D E4            pop a
2981   1A3E 32            mov bl, [d]
2982   1A3F A7 00         mov bh, 0
2983   1A41 D7            push a
2984   1A42 11            mov a, b
2985   1A43 26 0F 00      mov b, $f
2986   1A46 FD 92         and b, a ; &
2987   1A48 E4            pop a
2988   1A49             ; START SHIFT
2989   1A49 D7            push a
2990   1A4A 11            mov a, b
2991   1A4B 26 02 00      mov b, $2
2992   1A4E FD 39         mov c, b
2993   1A50 9D            shl a, cl
2994   1A51 27            mov b, a
2995   1A52 E4            pop a
2996   1A53             ; END SHIFT
2997   1A53             ; START TERMS
2998   1A53 D7            push a
2999   1A54 11            mov a, b
3000   1A55 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3001   1A58 D7            push a
3002   1A59 DA            push d
3003   1A5A 26 02 00      mov b, $2
3004   1A5D E7            pop d
3005   1A5E 5A            add d, b
3006   1A5F E4            pop a
3007   1A60 32            mov bl, [d]
3008   1A61 A7 00         mov bh, 0
3009   1A63 D7            push a
3010   1A64 11            mov a, b
3011   1A65 26 C0 00      mov b, $c0
3012   1A68 FD 92         and b, a ; &
3013   1A6A E4            pop a
3014   1A6B             ; START SHIFT
3015   1A6B D7            push a
3016   1A6C 11            mov a, b
3017   1A6D 26 06 00      mov b, $6
3018   1A70 FD 39         mov c, b
3019   1A72 A5            ashr a, cl
3020   1A73 27            mov b, a
3021   1A74 E4            pop a
3022   1A75             ; END SHIFT
3023   1A75 56            add b, a
3024   1A76 E4            pop a
3025   1A77             ; END TERMS
3026   1A77 E7            pop d
3027   1A78 FD 3E         mov [d], bl
3028   1A7A             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
3029   1A7A FA F2 FF      lea d, [bp + -14] ; $output_buffer
3030   1A7D D7            push a
3031   1A7E DA            push d
3032   1A7F 26 03 00      mov b, $3
3033   1A82 E7            pop d
3034   1A83 5A            add d, b
3035   1A84 E4            pop a
3036   1A85 DA            push d
3037   1A86 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3038   1A89 D7            push a
3039   1A8A DA            push d
3040   1A8B 26 02 00      mov b, $2
3041   1A8E E7            pop d
3042   1A8F 5A            add d, b
3043   1A90 E4            pop a
3044   1A91 32            mov bl, [d]
3045   1A92 A7 00         mov bh, 0
3046   1A94 D7            push a
3047   1A95 11            mov a, b
3048   1A96 26 3F 00      mov b, $3f
3049   1A99 FD 92         and b, a ; &
3050   1A9B E4            pop a
3051   1A9C E7            pop d
3052   1A9D FD 3E         mov [d], bl
3053   1A9F             ;; for (i = 0; i < 4; i++) { 
3054   1A9F             _for44_init:
3055   1A9F FA FF FF      lea d, [bp + -1] ; $i
3056   1AA2 DA            push d
3057   1AA3 26 00 00      mov b, $0
3058   1AA6 E7            pop d
3059   1AA7 FD 43         mov [d], b
3060   1AA9             _for44_cond:
3061   1AA9 FA FF FF      lea d, [bp + -1] ; $i
3062   1AAC 2A            mov b, [d]
3063   1AAD             ; START RELATIONAL
3064   1AAD D7            push a
3065   1AAE 11            mov a, b
3066   1AAF 26 04 00      mov b, $4
3067   1AB2 B0            cmp a, b
3068   1AB3 FD 73         slt ; < (signed)
3069   1AB5 E4            pop a
3070   1AB6             ; END RELATIONAL
3071   1AB6 C0 00 00      cmp b, 0
3072   1AB9 C6 09 1B      je _for44_exit
3073   1ABC             _for44_block:
3074   1ABC             ;; output[j++] = base64_table[output_buffer[i]]; 
3075   1ABC FA 07 00      lea d, [bp + 7] ; $output
3076   1ABF FD 2A         mov d, [d]
3077   1AC1 D7            push a
3078   1AC2 DA            push d
3079   1AC3 FA FD FF      lea d, [bp + -3] ; $j
3080   1AC6 2A            mov b, [d]
3081   1AC7 D8            push b
3082   1AC8 FD 77         inc b
3083   1ACA FA FD FF      lea d, [bp + -3] ; $j
3084   1ACD FD 43         mov [d], b
3085   1ACF E5            pop b
3086   1AD0 E7            pop d
3087   1AD1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3088   1AD5 E4            pop a
3089   1AD6 DA            push d
3090   1AD7 3B 6F 22      mov d, _base64_table ; $base64_table
3091   1ADA FD 2A         mov d, [d]
3092   1ADC D7            push a
3093   1ADD DA            push d
3094   1ADE FA F2 FF      lea d, [bp + -14] ; $output_buffer
3095   1AE1 D7            push a
3096   1AE2 DA            push d
3097   1AE3 FA FF FF      lea d, [bp + -1] ; $i
3098   1AE6 2A            mov b, [d]
3099   1AE7 E7            pop d
3100   1AE8 5A            add d, b
3101   1AE9 E4            pop a
3102   1AEA 32            mov bl, [d]
3103   1AEB A7 00         mov bh, 0
3104   1AED E7            pop d
3105   1AEE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3106   1AF2 E4            pop a
3107   1AF3 32            mov bl, [d]
3108   1AF4 A7 00         mov bh, 0
3109   1AF6 E7            pop d
3110   1AF7 FD 3E         mov [d], bl
3111   1AF9             _for44_update:
3112   1AF9 FA FF FF      lea d, [bp + -1] ; $i
3113   1AFC 2A            mov b, [d]
3114   1AFD D8            push b
3115   1AFE FD 77         inc b
3116   1B00 FA FF FF      lea d, [bp + -1] ; $i
3117   1B03 FD 43         mov [d], b
3118   1B05 E5            pop b
3119   1B06 0A A9 1A      jmp _for44_cond
3120   1B09             _for44_exit:
3121   1B09             ;; i = 0; 
3122   1B09 FA FF FF      lea d, [bp + -1] ; $i
3123   1B0C DA            push d
3124   1B0D 26 00 00      mov b, $0
3125   1B10 E7            pop d
3126   1B11 FD 43         mov [d], b
3127   1B13 0A 16 1B      jmp _if43_exit
3128   1B16             _if43_exit:
3129   1B16 0A 55 19      jmp _while42_cond
3130   1B19             _while42_exit:
3131   1B19             ;; if (i) { 
3132   1B19             _if45_cond:
3133   1B19 FA FF FF      lea d, [bp + -1] ; $i
3134   1B1C 2A            mov b, [d]
3135   1B1D C0 00 00      cmp b, 0
3136   1B20 C6 EE 1C      je _if45_exit
3137   1B23             _if45_true:
3138   1B23             ;; for (k = i; k < 3; k++) { 
3139   1B23             _for46_init:
3140   1B23 FA FB FF      lea d, [bp + -5] ; $k
3141   1B26 DA            push d
3142   1B27 FA FF FF      lea d, [bp + -1] ; $i
3143   1B2A 2A            mov b, [d]
3144   1B2B E7            pop d
3145   1B2C FD 43         mov [d], b
3146   1B2E             _for46_cond:
3147   1B2E FA FB FF      lea d, [bp + -5] ; $k
3148   1B31 2A            mov b, [d]
3149   1B32             ; START RELATIONAL
3150   1B32 D7            push a
3151   1B33 11            mov a, b
3152   1B34 26 03 00      mov b, $3
3153   1B37 B0            cmp a, b
3154   1B38 FD 73         slt ; < (signed)
3155   1B3A E4            pop a
3156   1B3B             ; END RELATIONAL
3157   1B3B C0 00 00      cmp b, 0
3158   1B3E C6 64 1B      je _for46_exit
3159   1B41             _for46_block:
3160   1B41             ;; input_buffer[k] = '\0'; 
3161   1B41 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3162   1B44 D7            push a
3163   1B45 DA            push d
3164   1B46 FA FB FF      lea d, [bp + -5] ; $k
3165   1B49 2A            mov b, [d]
3166   1B4A E7            pop d
3167   1B4B 5A            add d, b
3168   1B4C E4            pop a
3169   1B4D DA            push d
3170   1B4E 26 00 00      mov b, $0
3171   1B51 E7            pop d
3172   1B52 FD 3E         mov [d], bl
3173   1B54             _for46_update:
3174   1B54 FA FB FF      lea d, [bp + -5] ; $k
3175   1B57 2A            mov b, [d]
3176   1B58 D8            push b
3177   1B59 FD 77         inc b
3178   1B5B FA FB FF      lea d, [bp + -5] ; $k
3179   1B5E FD 43         mov [d], b
3180   1B60 E5            pop b
3181   1B61 0A 2E 1B      jmp _for46_cond
3182   1B64             _for46_exit:
3183   1B64             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
3184   1B64 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3185   1B67 D7            push a
3186   1B68 DA            push d
3187   1B69 26 00 00      mov b, $0
3188   1B6C E7            pop d
3189   1B6D 5A            add d, b
3190   1B6E E4            pop a
3191   1B6F DA            push d
3192   1B70 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3193   1B73 D7            push a
3194   1B74 DA            push d
3195   1B75 26 00 00      mov b, $0
3196   1B78 E7            pop d
3197   1B79 5A            add d, b
3198   1B7A E4            pop a
3199   1B7B 32            mov bl, [d]
3200   1B7C A7 00         mov bh, 0
3201   1B7E D7            push a
3202   1B7F 11            mov a, b
3203   1B80 26 FC 00      mov b, $fc
3204   1B83 FD 92         and b, a ; &
3205   1B85 E4            pop a
3206   1B86             ; START SHIFT
3207   1B86 D7            push a
3208   1B87 11            mov a, b
3209   1B88 26 02 00      mov b, $2
3210   1B8B FD 39         mov c, b
3211   1B8D A5            ashr a, cl
3212   1B8E 27            mov b, a
3213   1B8F E4            pop a
3214   1B90             ; END SHIFT
3215   1B90 E7            pop d
3216   1B91 FD 3E         mov [d], bl
3217   1B93             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
3218   1B93 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3219   1B96 D7            push a
3220   1B97 DA            push d
3221   1B98 26 01 00      mov b, $1
3222   1B9B E7            pop d
3223   1B9C 5A            add d, b
3224   1B9D E4            pop a
3225   1B9E DA            push d
3226   1B9F FA F6 FF      lea d, [bp + -10] ; $input_buffer
3227   1BA2 D7            push a
3228   1BA3 DA            push d
3229   1BA4 26 00 00      mov b, $0
3230   1BA7 E7            pop d
3231   1BA8 5A            add d, b
3232   1BA9 E4            pop a
3233   1BAA 32            mov bl, [d]
3234   1BAB A7 00         mov bh, 0
3235   1BAD D7            push a
3236   1BAE 11            mov a, b
3237   1BAF 26 03 00      mov b, $3
3238   1BB2 FD 92         and b, a ; &
3239   1BB4 E4            pop a
3240   1BB5             ; START SHIFT
3241   1BB5 D7            push a
3242   1BB6 11            mov a, b
3243   1BB7 26 04 00      mov b, $4
3244   1BBA FD 39         mov c, b
3245   1BBC 9D            shl a, cl
3246   1BBD 27            mov b, a
3247   1BBE E4            pop a
3248   1BBF             ; END SHIFT
3249   1BBF             ; START TERMS
3250   1BBF D7            push a
3251   1BC0 11            mov a, b
3252   1BC1 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3253   1BC4 D7            push a
3254   1BC5 DA            push d
3255   1BC6 26 01 00      mov b, $1
3256   1BC9 E7            pop d
3257   1BCA 5A            add d, b
3258   1BCB E4            pop a
3259   1BCC 32            mov bl, [d]
3260   1BCD A7 00         mov bh, 0
3261   1BCF D7            push a
3262   1BD0 11            mov a, b
3263   1BD1 26 F0 00      mov b, $f0
3264   1BD4 FD 92         and b, a ; &
3265   1BD6 E4            pop a
3266   1BD7             ; START SHIFT
3267   1BD7 D7            push a
3268   1BD8 11            mov a, b
3269   1BD9 26 04 00      mov b, $4
3270   1BDC FD 39         mov c, b
3271   1BDE A5            ashr a, cl
3272   1BDF 27            mov b, a
3273   1BE0 E4            pop a
3274   1BE1             ; END SHIFT
3275   1BE1 56            add b, a
3276   1BE2 E4            pop a
3277   1BE3             ; END TERMS
3278   1BE3 E7            pop d
3279   1BE4 FD 3E         mov [d], bl
3280   1BE6             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
3281   1BE6 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3282   1BE9 D7            push a
3283   1BEA DA            push d
3284   1BEB 26 02 00      mov b, $2
3285   1BEE E7            pop d
3286   1BEF 5A            add d, b
3287   1BF0 E4            pop a
3288   1BF1 DA            push d
3289   1BF2 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3290   1BF5 D7            push a
3291   1BF6 DA            push d
3292   1BF7 26 01 00      mov b, $1
3293   1BFA E7            pop d
3294   1BFB 5A            add d, b
3295   1BFC E4            pop a
3296   1BFD 32            mov bl, [d]
3297   1BFE A7 00         mov bh, 0
3298   1C00 D7            push a
3299   1C01 11            mov a, b
3300   1C02 26 0F 00      mov b, $f
3301   1C05 FD 92         and b, a ; &
3302   1C07 E4            pop a
3303   1C08             ; START SHIFT
3304   1C08 D7            push a
3305   1C09 11            mov a, b
3306   1C0A 26 02 00      mov b, $2
3307   1C0D FD 39         mov c, b
3308   1C0F 9D            shl a, cl
3309   1C10 27            mov b, a
3310   1C11 E4            pop a
3311   1C12             ; END SHIFT
3312   1C12             ; START TERMS
3313   1C12 D7            push a
3314   1C13 11            mov a, b
3315   1C14 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3316   1C17 D7            push a
3317   1C18 DA            push d
3318   1C19 26 02 00      mov b, $2
3319   1C1C E7            pop d
3320   1C1D 5A            add d, b
3321   1C1E E4            pop a
3322   1C1F 32            mov bl, [d]
3323   1C20 A7 00         mov bh, 0
3324   1C22 D7            push a
3325   1C23 11            mov a, b
3326   1C24 26 C0 00      mov b, $c0
3327   1C27 FD 92         and b, a ; &
3328   1C29 E4            pop a
3329   1C2A             ; START SHIFT
3330   1C2A D7            push a
3331   1C2B 11            mov a, b
3332   1C2C 26 06 00      mov b, $6
3333   1C2F FD 39         mov c, b
3334   1C31 A5            ashr a, cl
3335   1C32 27            mov b, a
3336   1C33 E4            pop a
3337   1C34             ; END SHIFT
3338   1C34 56            add b, a
3339   1C35 E4            pop a
3340   1C36             ; END TERMS
3341   1C36 E7            pop d
3342   1C37 FD 3E         mov [d], bl
3343   1C39             ;; for (k = 0; k < i + 1; k++) { 
3344   1C39             _for47_init:
3345   1C39 FA FB FF      lea d, [bp + -5] ; $k
3346   1C3C DA            push d
3347   1C3D 26 00 00      mov b, $0
3348   1C40 E7            pop d
3349   1C41 FD 43         mov [d], b
3350   1C43             _for47_cond:
3351   1C43 FA FB FF      lea d, [bp + -5] ; $k
3352   1C46 2A            mov b, [d]
3353   1C47             ; START RELATIONAL
3354   1C47 D7            push a
3355   1C48 11            mov a, b
3356   1C49 FA FF FF      lea d, [bp + -1] ; $i
3357   1C4C 2A            mov b, [d]
3358   1C4D             ; START TERMS
3359   1C4D D7            push a
3360   1C4E 11            mov a, b
3361   1C4F 26 01 00      mov b, $1
3362   1C52 56            add b, a
3363   1C53 E4            pop a
3364   1C54             ; END TERMS
3365   1C54 B0            cmp a, b
3366   1C55 FD 73         slt ; < (signed)
3367   1C57 E4            pop a
3368   1C58             ; END RELATIONAL
3369   1C58 C0 00 00      cmp b, 0
3370   1C5B C6 AB 1C      je _for47_exit
3371   1C5E             _for47_block:
3372   1C5E             ;; output[j++] = base64_table[output_buffer[k]]; 
3373   1C5E FA 07 00      lea d, [bp + 7] ; $output
3374   1C61 FD 2A         mov d, [d]
3375   1C63 D7            push a
3376   1C64 DA            push d
3377   1C65 FA FD FF      lea d, [bp + -3] ; $j
3378   1C68 2A            mov b, [d]
3379   1C69 D8            push b
3380   1C6A FD 77         inc b
3381   1C6C FA FD FF      lea d, [bp + -3] ; $j
3382   1C6F FD 43         mov [d], b
3383   1C71 E5            pop b
3384   1C72 E7            pop d
3385   1C73 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3386   1C77 E4            pop a
3387   1C78 DA            push d
3388   1C79 3B 6F 22      mov d, _base64_table ; $base64_table
3389   1C7C FD 2A         mov d, [d]
3390   1C7E D7            push a
3391   1C7F DA            push d
3392   1C80 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3393   1C83 D7            push a
3394   1C84 DA            push d
3395   1C85 FA FB FF      lea d, [bp + -5] ; $k
3396   1C88 2A            mov b, [d]
3397   1C89 E7            pop d
3398   1C8A 5A            add d, b
3399   1C8B E4            pop a
3400   1C8C 32            mov bl, [d]
3401   1C8D A7 00         mov bh, 0
3402   1C8F E7            pop d
3403   1C90 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3404   1C94 E4            pop a
3405   1C95 32            mov bl, [d]
3406   1C96 A7 00         mov bh, 0
3407   1C98 E7            pop d
3408   1C99 FD 3E         mov [d], bl
3409   1C9B             _for47_update:
3410   1C9B FA FB FF      lea d, [bp + -5] ; $k
3411   1C9E 2A            mov b, [d]
3412   1C9F D8            push b
3413   1CA0 FD 77         inc b
3414   1CA2 FA FB FF      lea d, [bp + -5] ; $k
3415   1CA5 FD 43         mov [d], b
3416   1CA7 E5            pop b
3417   1CA8 0A 43 1C      jmp _for47_cond
3418   1CAB             _for47_exit:
3419   1CAB             ;; while (i++ < 3) { 
3420   1CAB             _while48_cond:
3421   1CAB FA FF FF      lea d, [bp + -1] ; $i
3422   1CAE 2A            mov b, [d]
3423   1CAF D8            push b
3424   1CB0 FD 77         inc b
3425   1CB2 FA FF FF      lea d, [bp + -1] ; $i
3426   1CB5 FD 43         mov [d], b
3427   1CB7 E5            pop b
3428   1CB8             ; START RELATIONAL
3429   1CB8 D7            push a
3430   1CB9 11            mov a, b
3431   1CBA 26 03 00      mov b, $3
3432   1CBD B0            cmp a, b
3433   1CBE FD 73         slt ; < (signed)
3434   1CC0 E4            pop a
3435   1CC1             ; END RELATIONAL
3436   1CC1 C0 00 00      cmp b, 0
3437   1CC4 C6 EB 1C      je _while48_exit
3438   1CC7             _while48_block:
3439   1CC7             ;; output[j++] = '='; 
3440   1CC7 FA 07 00      lea d, [bp + 7] ; $output
3441   1CCA FD 2A         mov d, [d]
3442   1CCC D7            push a
3443   1CCD DA            push d
3444   1CCE FA FD FF      lea d, [bp + -3] ; $j
3445   1CD1 2A            mov b, [d]
3446   1CD2 D8            push b
3447   1CD3 FD 77         inc b
3448   1CD5 FA FD FF      lea d, [bp + -3] ; $j
3449   1CD8 FD 43         mov [d], b
3450   1CDA E5            pop b
3451   1CDB E7            pop d
3452   1CDC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3453   1CE0 E4            pop a
3454   1CE1 DA            push d
3455   1CE2 26 3D 00      mov b, $3d
3456   1CE5 E7            pop d
3457   1CE6 FD 3E         mov [d], bl
3458   1CE8 0A AB 1C      jmp _while48_cond
3459   1CEB             _while48_exit:
3460   1CEB 0A EE 1C      jmp _if45_exit
3461   1CEE             _if45_exit:
3462   1CEE             ;; output[j] = '\0'; 
3463   1CEE FA 07 00      lea d, [bp + 7] ; $output
3464   1CF1 FD 2A         mov d, [d]
3465   1CF3 D7            push a
3466   1CF4 DA            push d
3467   1CF5 FA FD FF      lea d, [bp + -3] ; $j
3468   1CF8 2A            mov b, [d]
3469   1CF9 E7            pop d
3470   1CFA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3471   1CFE E4            pop a
3472   1CFF DA            push d
3473   1D00 26 00 00      mov b, $0
3474   1D03 E7            pop d
3475   1D04 FD 3E         mov [d], bl
3476   1D06 F9            leave
3477   1D07 09            ret
3478   1D08             
3479   1D08             base64_char_value:
3480   1D08 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3481   1D0B             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
3482   1D0B             _if49_cond:
3483   1D0B FA 05 00      lea d, [bp + 5] ; $c
3484   1D0E 32            mov bl, [d]
3485   1D0F A7 00         mov bh, 0
3486   1D11             ; START RELATIONAL
3487   1D11 D7            push a
3488   1D12 11            mov a, b
3489   1D13 26 41 00      mov b, $41
3490   1D16 B0            cmp a, b
3491   1D17 FD 80         sge ; >=
3492   1D19 E4            pop a
3493   1D1A             ; END RELATIONAL
3494   1D1A D7            push a
3495   1D1B 11            mov a, b
3496   1D1C FA 05 00      lea d, [bp + 5] ; $c
3497   1D1F 32            mov bl, [d]
3498   1D20 A7 00         mov bh, 0
3499   1D22             ; START RELATIONAL
3500   1D22 D7            push a
3501   1D23 11            mov a, b
3502   1D24 26 5A 00      mov b, $5a
3503   1D27 B0            cmp a, b
3504   1D28 FD 73         slt ; <= (signed)
3505   1D2A E4            pop a
3506   1D2B             ; END RELATIONAL
3507   1D2B FD A7         sand a, b
3508   1D2D E4            pop a
3509   1D2E C0 00 00      cmp b, 0
3510   1D31 C6 47 1D      je _if49_exit
3511   1D34             _if49_true:
3512   1D34             ;; return c - 'A'; 
3513   1D34 FA 05 00      lea d, [bp + 5] ; $c
3514   1D37 32            mov bl, [d]
3515   1D38 A7 00         mov bh, 0
3516   1D3A             ; START TERMS
3517   1D3A D7            push a
3518   1D3B 11            mov a, b
3519   1D3C 26 41 00      mov b, $41
3520   1D3F 60            sub a, b
3521   1D40 27            mov b, a
3522   1D41 E4            pop a
3523   1D42             ; END TERMS
3524   1D42 F9            leave
3525   1D43 09            ret
3526   1D44 0A 47 1D      jmp _if49_exit
3527   1D47             _if49_exit:
3528   1D47             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
3529   1D47             _if50_cond:
3530   1D47 FA 05 00      lea d, [bp + 5] ; $c
3531   1D4A 32            mov bl, [d]
3532   1D4B A7 00         mov bh, 0
3533   1D4D             ; START RELATIONAL
3534   1D4D D7            push a
3535   1D4E 11            mov a, b
3536   1D4F 26 61 00      mov b, $61
3537   1D52 B0            cmp a, b
3538   1D53 FD 80         sge ; >=
3539   1D55 E4            pop a
3540   1D56             ; END RELATIONAL
3541   1D56 D7            push a
3542   1D57 11            mov a, b
3543   1D58 FA 05 00      lea d, [bp + 5] ; $c
3544   1D5B 32            mov bl, [d]
3545   1D5C A7 00         mov bh, 0
3546   1D5E             ; START RELATIONAL
3547   1D5E D7            push a
3548   1D5F 11            mov a, b
3549   1D60 26 7A 00      mov b, $7a
3550   1D63 B0            cmp a, b
3551   1D64 FD 73         slt ; <= (signed)
3552   1D66 E4            pop a
3553   1D67             ; END RELATIONAL
3554   1D67 FD A7         sand a, b
3555   1D69 E4            pop a
3556   1D6A C0 00 00      cmp b, 0
3557   1D6D C6 88 1D      je _if50_exit
3558   1D70             _if50_true:
3559   1D70             ;; return c - 'a' + 26; 
3560   1D70 FA 05 00      lea d, [bp + 5] ; $c
3561   1D73 32            mov bl, [d]
3562   1D74 A7 00         mov bh, 0
3563   1D76             ; START TERMS
3564   1D76 D7            push a
3565   1D77 11            mov a, b
3566   1D78 26 61 00      mov b, $61
3567   1D7B 60            sub a, b
3568   1D7C 27            mov b, a
3569   1D7D 11            mov a, b
3570   1D7E 26 1A 00      mov b, $1a
3571   1D81 56            add b, a
3572   1D82 E4            pop a
3573   1D83             ; END TERMS
3574   1D83 F9            leave
3575   1D84 09            ret
3576   1D85 0A 88 1D      jmp _if50_exit
3577   1D88             _if50_exit:
3578   1D88             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
3579   1D88             _if51_cond:
3580   1D88 FA 05 00      lea d, [bp + 5] ; $c
3581   1D8B 32            mov bl, [d]
3582   1D8C A7 00         mov bh, 0
3583   1D8E             ; START RELATIONAL
3584   1D8E D7            push a
3585   1D8F 11            mov a, b
3586   1D90 26 30 00      mov b, $30
3587   1D93 B0            cmp a, b
3588   1D94 FD 80         sge ; >=
3589   1D96 E4            pop a
3590   1D97             ; END RELATIONAL
3591   1D97 D7            push a
3592   1D98 11            mov a, b
3593   1D99 FA 05 00      lea d, [bp + 5] ; $c
3594   1D9C 32            mov bl, [d]
3595   1D9D A7 00         mov bh, 0
3596   1D9F             ; START RELATIONAL
3597   1D9F D7            push a
3598   1DA0 11            mov a, b
3599   1DA1 26 39 00      mov b, $39
3600   1DA4 B0            cmp a, b
3601   1DA5 FD 73         slt ; <= (signed)
3602   1DA7 E4            pop a
3603   1DA8             ; END RELATIONAL
3604   1DA8 FD A7         sand a, b
3605   1DAA E4            pop a
3606   1DAB C0 00 00      cmp b, 0
3607   1DAE C6 C9 1D      je _if51_exit
3608   1DB1             _if51_true:
3609   1DB1             ;; return c - '0' + 52; 
3610   1DB1 FA 05 00      lea d, [bp + 5] ; $c
3611   1DB4 32            mov bl, [d]
3612   1DB5 A7 00         mov bh, 0
3613   1DB7             ; START TERMS
3614   1DB7 D7            push a
3615   1DB8 11            mov a, b
3616   1DB9 26 30 00      mov b, $30
3617   1DBC 60            sub a, b
3618   1DBD 27            mov b, a
3619   1DBE 11            mov a, b
3620   1DBF 26 34 00      mov b, $34
3621   1DC2 56            add b, a
3622   1DC3 E4            pop a
3623   1DC4             ; END TERMS
3624   1DC4 F9            leave
3625   1DC5 09            ret
3626   1DC6 0A C9 1D      jmp _if51_exit
3627   1DC9             _if51_exit:
3628   1DC9             ;; if (c == '+') return 62; 
3629   1DC9             _if52_cond:
3630   1DC9 FA 05 00      lea d, [bp + 5] ; $c
3631   1DCC 32            mov bl, [d]
3632   1DCD A7 00         mov bh, 0
3633   1DCF             ; START RELATIONAL
3634   1DCF D7            push a
3635   1DD0 11            mov a, b
3636   1DD1 26 2B 00      mov b, $2b
3637   1DD4 B0            cmp a, b
3638   1DD5 FD 71         seq ; ==
3639   1DD7 E4            pop a
3640   1DD8             ; END RELATIONAL
3641   1DD8 C0 00 00      cmp b, 0
3642   1DDB C6 E6 1D      je _if52_exit
3643   1DDE             _if52_true:
3644   1DDE             ;; return 62; 
3645   1DDE 26 3E 00      mov b, $3e
3646   1DE1 F9            leave
3647   1DE2 09            ret
3648   1DE3 0A E6 1D      jmp _if52_exit
3649   1DE6             _if52_exit:
3650   1DE6             ;; if (c == '/') return 63; 
3651   1DE6             _if53_cond:
3652   1DE6 FA 05 00      lea d, [bp + 5] ; $c
3653   1DE9 32            mov bl, [d]
3654   1DEA A7 00         mov bh, 0
3655   1DEC             ; START RELATIONAL
3656   1DEC D7            push a
3657   1DED 11            mov a, b
3658   1DEE 26 2F 00      mov b, $2f
3659   1DF1 B0            cmp a, b
3660   1DF2 FD 71         seq ; ==
3661   1DF4 E4            pop a
3662   1DF5             ; END RELATIONAL
3663   1DF5 C0 00 00      cmp b, 0
3664   1DF8 C6 03 1E      je _if53_exit
3665   1DFB             _if53_true:
3666   1DFB             ;; return 63; 
3667   1DFB 26 3F 00      mov b, $3f
3668   1DFE F9            leave
3669   1DFF 09            ret
3670   1E00 0A 03 1E      jmp _if53_exit
3671   1E03             _if53_exit:
3672   1E03             ;; return -1; 
3673   1E03 26 FF FF      mov b, $ffff
3674   1E06 F9            leave
3675   1E07 09            ret
3676   1E08             
3677   1E08             base64_decode:
3678   1E08 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3679   1E0B             ;; int i = 0, j = 0, k = 0; 
3680   1E0B             ; $i 
3681   1E0B 10 00 00      mov a, $0
3682   1E0E 45 FF FF      mov [bp + -1], a
3683   1E11             ; $j 
3684   1E11 10 00 00      mov a, $0
3685   1E14 45 FD FF      mov [bp + -3], a
3686   1E17             ; $k 
3687   1E17 10 00 00      mov a, $0
3688   1E1A 45 FB FF      mov [bp + -5], a
3689   1E1D             ;; int input_len; 
3690   1E1D             ; $input_len 
3691   1E1D             ;; unsigned char input_buffer[4]; 
3692   1E1D             ; $input_buffer 
3693   1E1D             ;; unsigned char output_buffer[3]; 
3694   1E1D             ; $output_buffer 
3695   1E1D             ;; input_len = strlen(input); 
3696   1E1D FA F9 FF      lea d, [bp + -7] ; $input_len
3697   1E20 DA            push d
3698   1E21 FA 05 00      lea d, [bp + 5] ; $input
3699   1E24 2A            mov b, [d]
3700   1E25 FD AB         swp b
3701   1E27 D8            push b
3702   1E28 07 E3 05      call strlen
3703   1E2B 51 02 00      add sp, 2
3704   1E2E E7            pop d
3705   1E2F FD 43         mov [d], b
3706   1E31             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
3707   1E31             _while54_cond:
3708   1E31 FA F9 FF      lea d, [bp + -7] ; $input_len
3709   1E34 2A            mov b, [d]
3710   1E35 D8            push b
3711   1E36 FD 7D         dec b
3712   1E38 FA F9 FF      lea d, [bp + -7] ; $input_len
3713   1E3B FD 43         mov [d], b
3714   1E3D E5            pop b
3715   1E3E D7            push a
3716   1E3F 11            mov a, b
3717   1E40 FA 05 00      lea d, [bp + 5] ; $input
3718   1E43 FD 2A         mov d, [d]
3719   1E45 D7            push a
3720   1E46 DA            push d
3721   1E47 FA FB FF      lea d, [bp + -5] ; $k
3722   1E4A 2A            mov b, [d]
3723   1E4B E7            pop d
3724   1E4C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3725   1E50 E4            pop a
3726   1E51 32            mov bl, [d]
3727   1E52 A7 00         mov bh, 0
3728   1E54             ; START RELATIONAL
3729   1E54 D7            push a
3730   1E55 11            mov a, b
3731   1E56 26 3D 00      mov b, $3d
3732   1E59 B0            cmp a, b
3733   1E5A FD 72         sneq ; !=
3734   1E5C E4            pop a
3735   1E5D             ; END RELATIONAL
3736   1E5D FD A7         sand a, b
3737   1E5F 11            mov a, b
3738   1E60 FA 05 00      lea d, [bp + 5] ; $input
3739   1E63 FD 2A         mov d, [d]
3740   1E65 D7            push a
3741   1E66 DA            push d
3742   1E67 FA FB FF      lea d, [bp + -5] ; $k
3743   1E6A 2A            mov b, [d]
3744   1E6B E7            pop d
3745   1E6C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3746   1E70 E4            pop a
3747   1E71 32            mov bl, [d]
3748   1E72 A7 00         mov bh, 0
3749   1E74 DD            push bl
3750   1E75 07 08 1D      call base64_char_value
3751   1E78 51 01 00      add sp, 1
3752   1E7B             ; START RELATIONAL
3753   1E7B D7            push a
3754   1E7C 11            mov a, b
3755   1E7D 26 FF FF      mov b, $ffff
3756   1E80 B0            cmp a, b
3757   1E81 FD 72         sneq ; !=
3758   1E83 E4            pop a
3759   1E84             ; END RELATIONAL
3760   1E84 FD A7         sand a, b
3761   1E86 E4            pop a
3762   1E87 C0 00 00      cmp b, 0
3763   1E8A C6 72 20      je _while54_exit
3764   1E8D             _while54_block:
3765   1E8D             ;; input_buffer[i++] = input[k++]; 
3766   1E8D FA F5 FF      lea d, [bp + -11] ; $input_buffer
3767   1E90 D7            push a
3768   1E91 DA            push d
3769   1E92 FA FF FF      lea d, [bp + -1] ; $i
3770   1E95 2A            mov b, [d]
3771   1E96 D8            push b
3772   1E97 FD 77         inc b
3773   1E99 FA FF FF      lea d, [bp + -1] ; $i
3774   1E9C FD 43         mov [d], b
3775   1E9E E5            pop b
3776   1E9F E7            pop d
3777   1EA0 5A            add d, b
3778   1EA1 E4            pop a
3779   1EA2 DA            push d
3780   1EA3 FA 05 00      lea d, [bp + 5] ; $input
3781   1EA6 FD 2A         mov d, [d]
3782   1EA8 D7            push a
3783   1EA9 DA            push d
3784   1EAA FA FB FF      lea d, [bp + -5] ; $k
3785   1EAD 2A            mov b, [d]
3786   1EAE D8            push b
3787   1EAF FD 77         inc b
3788   1EB1 FA FB FF      lea d, [bp + -5] ; $k
3789   1EB4 FD 43         mov [d], b
3790   1EB6 E5            pop b
3791   1EB7 E7            pop d
3792   1EB8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3793   1EBC E4            pop a
3794   1EBD 32            mov bl, [d]
3795   1EBE A7 00         mov bh, 0
3796   1EC0 E7            pop d
3797   1EC1 FD 3E         mov [d], bl
3798   1EC3             ;; if (i == 4) { 
3799   1EC3             _if55_cond:
3800   1EC3 FA FF FF      lea d, [bp + -1] ; $i
3801   1EC6 2A            mov b, [d]
3802   1EC7             ; START RELATIONAL
3803   1EC7 D7            push a
3804   1EC8 11            mov a, b
3805   1EC9 26 04 00      mov b, $4
3806   1ECC B0            cmp a, b
3807   1ECD FD 71         seq ; ==
3808   1ECF E4            pop a
3809   1ED0             ; END RELATIONAL
3810   1ED0 C0 00 00      cmp b, 0
3811   1ED3 C6 6F 20      je _if55_exit
3812   1ED6             _if55_true:
3813   1ED6             ;; for (i = 0; i < 4; i++) { 
3814   1ED6             _for56_init:
3815   1ED6 FA FF FF      lea d, [bp + -1] ; $i
3816   1ED9 DA            push d
3817   1EDA 26 00 00      mov b, $0
3818   1EDD E7            pop d
3819   1EDE FD 43         mov [d], b
3820   1EE0             _for56_cond:
3821   1EE0 FA FF FF      lea d, [bp + -1] ; $i
3822   1EE3 2A            mov b, [d]
3823   1EE4             ; START RELATIONAL
3824   1EE4 D7            push a
3825   1EE5 11            mov a, b
3826   1EE6 26 04 00      mov b, $4
3827   1EE9 B0            cmp a, b
3828   1EEA FD 73         slt ; < (signed)
3829   1EEC E4            pop a
3830   1EED             ; END RELATIONAL
3831   1EED C0 00 00      cmp b, 0
3832   1EF0 C6 29 1F      je _for56_exit
3833   1EF3             _for56_block:
3834   1EF3             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
3835   1EF3 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3836   1EF6 D7            push a
3837   1EF7 DA            push d
3838   1EF8 FA FF FF      lea d, [bp + -1] ; $i
3839   1EFB 2A            mov b, [d]
3840   1EFC E7            pop d
3841   1EFD 5A            add d, b
3842   1EFE E4            pop a
3843   1EFF DA            push d
3844   1F00 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3845   1F03 D7            push a
3846   1F04 DA            push d
3847   1F05 FA FF FF      lea d, [bp + -1] ; $i
3848   1F08 2A            mov b, [d]
3849   1F09 E7            pop d
3850   1F0A 5A            add d, b
3851   1F0B E4            pop a
3852   1F0C 32            mov bl, [d]
3853   1F0D A7 00         mov bh, 0
3854   1F0F DD            push bl
3855   1F10 07 08 1D      call base64_char_value
3856   1F13 51 01 00      add sp, 1
3857   1F16 E7            pop d
3858   1F17 FD 3E         mov [d], bl
3859   1F19             _for56_update:
3860   1F19 FA FF FF      lea d, [bp + -1] ; $i
3861   1F1C 2A            mov b, [d]
3862   1F1D D8            push b
3863   1F1E FD 77         inc b
3864   1F20 FA FF FF      lea d, [bp + -1] ; $i
3865   1F23 FD 43         mov [d], b
3866   1F25 E5            pop b
3867   1F26 0A E0 1E      jmp _for56_cond
3868   1F29             _for56_exit:
3869   1F29             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
3870   1F29 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3871   1F2C D7            push a
3872   1F2D DA            push d
3873   1F2E 26 00 00      mov b, $0
3874   1F31 E7            pop d
3875   1F32 5A            add d, b
3876   1F33 E4            pop a
3877   1F34 DA            push d
3878   1F35 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3879   1F38 D7            push a
3880   1F39 DA            push d
3881   1F3A 26 00 00      mov b, $0
3882   1F3D E7            pop d
3883   1F3E 5A            add d, b
3884   1F3F E4            pop a
3885   1F40 32            mov bl, [d]
3886   1F41 A7 00         mov bh, 0
3887   1F43             ; START SHIFT
3888   1F43 D7            push a
3889   1F44 11            mov a, b
3890   1F45 26 02 00      mov b, $2
3891   1F48 FD 39         mov c, b
3892   1F4A 9D            shl a, cl
3893   1F4B 27            mov b, a
3894   1F4C E4            pop a
3895   1F4D             ; END SHIFT
3896   1F4D             ; START TERMS
3897   1F4D D7            push a
3898   1F4E 11            mov a, b
3899   1F4F FA F5 FF      lea d, [bp + -11] ; $input_buffer
3900   1F52 D7            push a
3901   1F53 DA            push d
3902   1F54 26 01 00      mov b, $1
3903   1F57 E7            pop d
3904   1F58 5A            add d, b
3905   1F59 E4            pop a
3906   1F5A 32            mov bl, [d]
3907   1F5B A7 00         mov bh, 0
3908   1F5D D7            push a
3909   1F5E 11            mov a, b
3910   1F5F 26 30 00      mov b, $30
3911   1F62 FD 92         and b, a ; &
3912   1F64 E4            pop a
3913   1F65             ; START SHIFT
3914   1F65 D7            push a
3915   1F66 11            mov a, b
3916   1F67 26 04 00      mov b, $4
3917   1F6A FD 39         mov c, b
3918   1F6C A5            ashr a, cl
3919   1F6D 27            mov b, a
3920   1F6E E4            pop a
3921   1F6F             ; END SHIFT
3922   1F6F 56            add b, a
3923   1F70 E4            pop a
3924   1F71             ; END TERMS
3925   1F71 E7            pop d
3926   1F72 FD 3E         mov [d], bl
3927   1F74             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
3928   1F74 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3929   1F77 D7            push a
3930   1F78 DA            push d
3931   1F79 26 01 00      mov b, $1
3932   1F7C E7            pop d
3933   1F7D 5A            add d, b
3934   1F7E E4            pop a
3935   1F7F DA            push d
3936   1F80 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3937   1F83 D7            push a
3938   1F84 DA            push d
3939   1F85 26 01 00      mov b, $1
3940   1F88 E7            pop d
3941   1F89 5A            add d, b
3942   1F8A E4            pop a
3943   1F8B 32            mov bl, [d]
3944   1F8C A7 00         mov bh, 0
3945   1F8E D7            push a
3946   1F8F 11            mov a, b
3947   1F90 26 0F 00      mov b, $f
3948   1F93 FD 92         and b, a ; &
3949   1F95 E4            pop a
3950   1F96             ; START SHIFT
3951   1F96 D7            push a
3952   1F97 11            mov a, b
3953   1F98 26 04 00      mov b, $4
3954   1F9B FD 39         mov c, b
3955   1F9D 9D            shl a, cl
3956   1F9E 27            mov b, a
3957   1F9F E4            pop a
3958   1FA0             ; END SHIFT
3959   1FA0             ; START TERMS
3960   1FA0 D7            push a
3961   1FA1 11            mov a, b
3962   1FA2 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3963   1FA5 D7            push a
3964   1FA6 DA            push d
3965   1FA7 26 02 00      mov b, $2
3966   1FAA E7            pop d
3967   1FAB 5A            add d, b
3968   1FAC E4            pop a
3969   1FAD 32            mov bl, [d]
3970   1FAE A7 00         mov bh, 0
3971   1FB0 D7            push a
3972   1FB1 11            mov a, b
3973   1FB2 26 3C 00      mov b, $3c
3974   1FB5 FD 92         and b, a ; &
3975   1FB7 E4            pop a
3976   1FB8             ; START SHIFT
3977   1FB8 D7            push a
3978   1FB9 11            mov a, b
3979   1FBA 26 02 00      mov b, $2
3980   1FBD FD 39         mov c, b
3981   1FBF A5            ashr a, cl
3982   1FC0 27            mov b, a
3983   1FC1 E4            pop a
3984   1FC2             ; END SHIFT
3985   1FC2 56            add b, a
3986   1FC3 E4            pop a
3987   1FC4             ; END TERMS
3988   1FC4 E7            pop d
3989   1FC5 FD 3E         mov [d], bl
3990   1FC7             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
3991   1FC7 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3992   1FCA D7            push a
3993   1FCB DA            push d
3994   1FCC 26 02 00      mov b, $2
3995   1FCF E7            pop d
3996   1FD0 5A            add d, b
3997   1FD1 E4            pop a
3998   1FD2 DA            push d
3999   1FD3 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4000   1FD6 D7            push a
4001   1FD7 DA            push d
4002   1FD8 26 02 00      mov b, $2
4003   1FDB E7            pop d
4004   1FDC 5A            add d, b
4005   1FDD E4            pop a
4006   1FDE 32            mov bl, [d]
4007   1FDF A7 00         mov bh, 0
4008   1FE1 D7            push a
4009   1FE2 11            mov a, b
4010   1FE3 26 03 00      mov b, $3
4011   1FE6 FD 92         and b, a ; &
4012   1FE8 E4            pop a
4013   1FE9             ; START SHIFT
4014   1FE9 D7            push a
4015   1FEA 11            mov a, b
4016   1FEB 26 06 00      mov b, $6
4017   1FEE FD 39         mov c, b
4018   1FF0 9D            shl a, cl
4019   1FF1 27            mov b, a
4020   1FF2 E4            pop a
4021   1FF3             ; END SHIFT
4022   1FF3             ; START TERMS
4023   1FF3 D7            push a
4024   1FF4 11            mov a, b
4025   1FF5 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4026   1FF8 D7            push a
4027   1FF9 DA            push d
4028   1FFA 26 03 00      mov b, $3
4029   1FFD E7            pop d
4030   1FFE 5A            add d, b
4031   1FFF E4            pop a
4032   2000 32            mov bl, [d]
4033   2001 A7 00         mov bh, 0
4034   2003 56            add b, a
4035   2004 E4            pop a
4036   2005             ; END TERMS
4037   2005 E7            pop d
4038   2006 FD 3E         mov [d], bl
4039   2008             ;; for (i = 0; i < 3; i++) { 
4040   2008             _for57_init:
4041   2008 FA FF FF      lea d, [bp + -1] ; $i
4042   200B DA            push d
4043   200C 26 00 00      mov b, $0
4044   200F E7            pop d
4045   2010 FD 43         mov [d], b
4046   2012             _for57_cond:
4047   2012 FA FF FF      lea d, [bp + -1] ; $i
4048   2015 2A            mov b, [d]
4049   2016             ; START RELATIONAL
4050   2016 D7            push a
4051   2017 11            mov a, b
4052   2018 26 03 00      mov b, $3
4053   201B B0            cmp a, b
4054   201C FD 73         slt ; < (signed)
4055   201E E4            pop a
4056   201F             ; END RELATIONAL
4057   201F C0 00 00      cmp b, 0
4058   2022 C6 62 20      je _for57_exit
4059   2025             _for57_block:
4060   2025             ;; output[j++] = output_buffer[i]; 
4061   2025 FA 07 00      lea d, [bp + 7] ; $output
4062   2028 FD 2A         mov d, [d]
4063   202A D7            push a
4064   202B DA            push d
4065   202C FA FD FF      lea d, [bp + -3] ; $j
4066   202F 2A            mov b, [d]
4067   2030 D8            push b
4068   2031 FD 77         inc b
4069   2033 FA FD FF      lea d, [bp + -3] ; $j
4070   2036 FD 43         mov [d], b
4071   2038 E5            pop b
4072   2039 E7            pop d
4073   203A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4074   203E E4            pop a
4075   203F DA            push d
4076   2040 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4077   2043 D7            push a
4078   2044 DA            push d
4079   2045 FA FF FF      lea d, [bp + -1] ; $i
4080   2048 2A            mov b, [d]
4081   2049 E7            pop d
4082   204A 5A            add d, b
4083   204B E4            pop a
4084   204C 32            mov bl, [d]
4085   204D A7 00         mov bh, 0
4086   204F E7            pop d
4087   2050 FD 3E         mov [d], bl
4088   2052             _for57_update:
4089   2052 FA FF FF      lea d, [bp + -1] ; $i
4090   2055 2A            mov b, [d]
4091   2056 D8            push b
4092   2057 FD 77         inc b
4093   2059 FA FF FF      lea d, [bp + -1] ; $i
4094   205C FD 43         mov [d], b
4095   205E E5            pop b
4096   205F 0A 12 20      jmp _for57_cond
4097   2062             _for57_exit:
4098   2062             ;; i = 0; 
4099   2062 FA FF FF      lea d, [bp + -1] ; $i
4100   2065 DA            push d
4101   2066 26 00 00      mov b, $0
4102   2069 E7            pop d
4103   206A FD 43         mov [d], b
4104   206C 0A 6F 20      jmp _if55_exit
4105   206F             _if55_exit:
4106   206F 0A 31 1E      jmp _while54_cond
4107   2072             _while54_exit:
4108   2072             ;; if (i) { 
4109   2072             _if58_cond:
4110   2072 FA FF FF      lea d, [bp + -1] ; $i
4111   2075 2A            mov b, [d]
4112   2076 C0 00 00      cmp b, 0
4113   2079 C6 14 22      je _if58_exit
4114   207C             _if58_true:
4115   207C             ;; for (k = i; k < 4; k++) { 
4116   207C             _for59_init:
4117   207C FA FB FF      lea d, [bp + -5] ; $k
4118   207F DA            push d
4119   2080 FA FF FF      lea d, [bp + -1] ; $i
4120   2083 2A            mov b, [d]
4121   2084 E7            pop d
4122   2085 FD 43         mov [d], b
4123   2087             _for59_cond:
4124   2087 FA FB FF      lea d, [bp + -5] ; $k
4125   208A 2A            mov b, [d]
4126   208B             ; START RELATIONAL
4127   208B D7            push a
4128   208C 11            mov a, b
4129   208D 26 04 00      mov b, $4
4130   2090 B0            cmp a, b
4131   2091 FD 73         slt ; < (signed)
4132   2093 E4            pop a
4133   2094             ; END RELATIONAL
4134   2094 C0 00 00      cmp b, 0
4135   2097 C6 BD 20      je _for59_exit
4136   209A             _for59_block:
4137   209A             ;; input_buffer[k] = 0; 
4138   209A FA F5 FF      lea d, [bp + -11] ; $input_buffer
4139   209D D7            push a
4140   209E DA            push d
4141   209F FA FB FF      lea d, [bp + -5] ; $k
4142   20A2 2A            mov b, [d]
4143   20A3 E7            pop d
4144   20A4 5A            add d, b
4145   20A5 E4            pop a
4146   20A6 DA            push d
4147   20A7 26 00 00      mov b, $0
4148   20AA E7            pop d
4149   20AB FD 3E         mov [d], bl
4150   20AD             _for59_update:
4151   20AD FA FB FF      lea d, [bp + -5] ; $k
4152   20B0 2A            mov b, [d]
4153   20B1 D8            push b
4154   20B2 FD 77         inc b
4155   20B4 FA FB FF      lea d, [bp + -5] ; $k
4156   20B7 FD 43         mov [d], b
4157   20B9 E5            pop b
4158   20BA 0A 87 20      jmp _for59_cond
4159   20BD             _for59_exit:
4160   20BD             ;; for (k = 0; k < 4; k++) { 
4161   20BD             _for60_init:
4162   20BD FA FB FF      lea d, [bp + -5] ; $k
4163   20C0 DA            push d
4164   20C1 26 00 00      mov b, $0
4165   20C4 E7            pop d
4166   20C5 FD 43         mov [d], b
4167   20C7             _for60_cond:
4168   20C7 FA FB FF      lea d, [bp + -5] ; $k
4169   20CA 2A            mov b, [d]
4170   20CB             ; START RELATIONAL
4171   20CB D7            push a
4172   20CC 11            mov a, b
4173   20CD 26 04 00      mov b, $4
4174   20D0 B0            cmp a, b
4175   20D1 FD 73         slt ; < (signed)
4176   20D3 E4            pop a
4177   20D4             ; END RELATIONAL
4178   20D4 C0 00 00      cmp b, 0
4179   20D7 C6 10 21      je _for60_exit
4180   20DA             _for60_block:
4181   20DA             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
4182   20DA FA F5 FF      lea d, [bp + -11] ; $input_buffer
4183   20DD D7            push a
4184   20DE DA            push d
4185   20DF FA FB FF      lea d, [bp + -5] ; $k
4186   20E2 2A            mov b, [d]
4187   20E3 E7            pop d
4188   20E4 5A            add d, b
4189   20E5 E4            pop a
4190   20E6 DA            push d
4191   20E7 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4192   20EA D7            push a
4193   20EB DA            push d
4194   20EC FA FB FF      lea d, [bp + -5] ; $k
4195   20EF 2A            mov b, [d]
4196   20F0 E7            pop d
4197   20F1 5A            add d, b
4198   20F2 E4            pop a
4199   20F3 32            mov bl, [d]
4200   20F4 A7 00         mov bh, 0
4201   20F6 DD            push bl
4202   20F7 07 08 1D      call base64_char_value
4203   20FA 51 01 00      add sp, 1
4204   20FD E7            pop d
4205   20FE FD 3E         mov [d], bl
4206   2100             _for60_update:
4207   2100 FA FB FF      lea d, [bp + -5] ; $k
4208   2103 2A            mov b, [d]
4209   2104 D8            push b
4210   2105 FD 77         inc b
4211   2107 FA FB FF      lea d, [bp + -5] ; $k
4212   210A FD 43         mov [d], b
4213   210C E5            pop b
4214   210D 0A C7 20      jmp _for60_cond
4215   2110             _for60_exit:
4216   2110             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
4217   2110 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4218   2113 D7            push a
4219   2114 DA            push d
4220   2115 26 00 00      mov b, $0
4221   2118 E7            pop d
4222   2119 5A            add d, b
4223   211A E4            pop a
4224   211B DA            push d
4225   211C FA F5 FF      lea d, [bp + -11] ; $input_buffer
4226   211F D7            push a
4227   2120 DA            push d
4228   2121 26 00 00      mov b, $0
4229   2124 E7            pop d
4230   2125 5A            add d, b
4231   2126 E4            pop a
4232   2127 32            mov bl, [d]
4233   2128 A7 00         mov bh, 0
4234   212A             ; START SHIFT
4235   212A D7            push a
4236   212B 11            mov a, b
4237   212C 26 02 00      mov b, $2
4238   212F FD 39         mov c, b
4239   2131 9D            shl a, cl
4240   2132 27            mov b, a
4241   2133 E4            pop a
4242   2134             ; END SHIFT
4243   2134             ; START TERMS
4244   2134 D7            push a
4245   2135 11            mov a, b
4246   2136 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4247   2139 D7            push a
4248   213A DA            push d
4249   213B 26 01 00      mov b, $1
4250   213E E7            pop d
4251   213F 5A            add d, b
4252   2140 E4            pop a
4253   2141 32            mov bl, [d]
4254   2142 A7 00         mov bh, 0
4255   2144 D7            push a
4256   2145 11            mov a, b
4257   2146 26 30 00      mov b, $30
4258   2149 FD 92         and b, a ; &
4259   214B E4            pop a
4260   214C             ; START SHIFT
4261   214C D7            push a
4262   214D 11            mov a, b
4263   214E 26 04 00      mov b, $4
4264   2151 FD 39         mov c, b
4265   2153 A5            ashr a, cl
4266   2154 27            mov b, a
4267   2155 E4            pop a
4268   2156             ; END SHIFT
4269   2156 56            add b, a
4270   2157 E4            pop a
4271   2158             ; END TERMS
4272   2158 E7            pop d
4273   2159 FD 3E         mov [d], bl
4274   215B             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
4275   215B FA F2 FF      lea d, [bp + -14] ; $output_buffer
4276   215E D7            push a
4277   215F DA            push d
4278   2160 26 01 00      mov b, $1
4279   2163 E7            pop d
4280   2164 5A            add d, b
4281   2165 E4            pop a
4282   2166 DA            push d
4283   2167 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4284   216A D7            push a
4285   216B DA            push d
4286   216C 26 01 00      mov b, $1
4287   216F E7            pop d
4288   2170 5A            add d, b
4289   2171 E4            pop a
4290   2172 32            mov bl, [d]
4291   2173 A7 00         mov bh, 0
4292   2175 D7            push a
4293   2176 11            mov a, b
4294   2177 26 0F 00      mov b, $f
4295   217A FD 92         and b, a ; &
4296   217C E4            pop a
4297   217D             ; START SHIFT
4298   217D D7            push a
4299   217E 11            mov a, b
4300   217F 26 04 00      mov b, $4
4301   2182 FD 39         mov c, b
4302   2184 9D            shl a, cl
4303   2185 27            mov b, a
4304   2186 E4            pop a
4305   2187             ; END SHIFT
4306   2187             ; START TERMS
4307   2187 D7            push a
4308   2188 11            mov a, b
4309   2189 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4310   218C D7            push a
4311   218D DA            push d
4312   218E 26 02 00      mov b, $2
4313   2191 E7            pop d
4314   2192 5A            add d, b
4315   2193 E4            pop a
4316   2194 32            mov bl, [d]
4317   2195 A7 00         mov bh, 0
4318   2197 D7            push a
4319   2198 11            mov a, b
4320   2199 26 3C 00      mov b, $3c
4321   219C FD 92         and b, a ; &
4322   219E E4            pop a
4323   219F             ; START SHIFT
4324   219F D7            push a
4325   21A0 11            mov a, b
4326   21A1 26 02 00      mov b, $2
4327   21A4 FD 39         mov c, b
4328   21A6 A5            ashr a, cl
4329   21A7 27            mov b, a
4330   21A8 E4            pop a
4331   21A9             ; END SHIFT
4332   21A9 56            add b, a
4333   21AA E4            pop a
4334   21AB             ; END TERMS
4335   21AB E7            pop d
4336   21AC FD 3E         mov [d], bl
4337   21AE             ;; for (k = 0; k < i - 1; k++) { 
4338   21AE             _for61_init:
4339   21AE FA FB FF      lea d, [bp + -5] ; $k
4340   21B1 DA            push d
4341   21B2 26 00 00      mov b, $0
4342   21B5 E7            pop d
4343   21B6 FD 43         mov [d], b
4344   21B8             _for61_cond:
4345   21B8 FA FB FF      lea d, [bp + -5] ; $k
4346   21BB 2A            mov b, [d]
4347   21BC             ; START RELATIONAL
4348   21BC D7            push a
4349   21BD 11            mov a, b
4350   21BE FA FF FF      lea d, [bp + -1] ; $i
4351   21C1 2A            mov b, [d]
4352   21C2             ; START TERMS
4353   21C2 D7            push a
4354   21C3 11            mov a, b
4355   21C4 26 01 00      mov b, $1
4356   21C7 60            sub a, b
4357   21C8 27            mov b, a
4358   21C9 E4            pop a
4359   21CA             ; END TERMS
4360   21CA B0            cmp a, b
4361   21CB FD 73         slt ; < (signed)
4362   21CD E4            pop a
4363   21CE             ; END RELATIONAL
4364   21CE C0 00 00      cmp b, 0
4365   21D1 C6 11 22      je _for61_exit
4366   21D4             _for61_block:
4367   21D4             ;; output[j++] = output_buffer[k]; 
4368   21D4 FA 07 00      lea d, [bp + 7] ; $output
4369   21D7 FD 2A         mov d, [d]
4370   21D9 D7            push a
4371   21DA DA            push d
4372   21DB FA FD FF      lea d, [bp + -3] ; $j
4373   21DE 2A            mov b, [d]
4374   21DF D8            push b
4375   21E0 FD 77         inc b
4376   21E2 FA FD FF      lea d, [bp + -3] ; $j
4377   21E5 FD 43         mov [d], b
4378   21E7 E5            pop b
4379   21E8 E7            pop d
4380   21E9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4381   21ED E4            pop a
4382   21EE DA            push d
4383   21EF FA F2 FF      lea d, [bp + -14] ; $output_buffer
4384   21F2 D7            push a
4385   21F3 DA            push d
4386   21F4 FA FB FF      lea d, [bp + -5] ; $k
4387   21F7 2A            mov b, [d]
4388   21F8 E7            pop d
4389   21F9 5A            add d, b
4390   21FA E4            pop a
4391   21FB 32            mov bl, [d]
4392   21FC A7 00         mov bh, 0
4393   21FE E7            pop d
4394   21FF FD 3E         mov [d], bl
4395   2201             _for61_update:
4396   2201 FA FB FF      lea d, [bp + -5] ; $k
4397   2204 2A            mov b, [d]
4398   2205 D8            push b
4399   2206 FD 77         inc b
4400   2208 FA FB FF      lea d, [bp + -5] ; $k
4401   220B FD 43         mov [d], b
4402   220D E5            pop b
4403   220E 0A B8 21      jmp _for61_cond
4404   2211             _for61_exit:
4405   2211 0A 14 22      jmp _if58_exit
4406   2214             _if58_exit:
4407   2214             ;; output[j] = '\0'; 
4408   2214 FA 07 00      lea d, [bp + 7] ; $output
4409   2217 FD 2A         mov d, [d]
4410   2219 D7            push a
4411   221A DA            push d
4412   221B FA FD FF      lea d, [bp + -3] ; $j
4413   221E 2A            mov b, [d]
4414   221F E7            pop d
4415   2220 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4416   2224 E4            pop a
4417   2225 DA            push d
4418   2226 26 00 00      mov b, $0
4419   2229 E7            pop d
4420   222A FD 3E         mov [d], bl
4421   222C F9            leave
4422   222D 09            ret
4423   222E             ; --- END TEXT BLOCK
4424   222E             
4425   222E             ; --- BEGIN DATA BLOCK
4426   222E 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
4426   2232 45 46 47 48 
4426   2236 49 4A 4B 4C 
4426   223A 4D 4E 4F 50 
4426   223E 51 52 53 54 
4426   2242 55 56 57 58 
4426   2246 59 5A 61 62 
4426   224A 63 64 65 66 
4426   224E 67 68 69 6A 
4426   2252 6B 6C 6D 6E 
4426   2256 6F 70 71 72 
4426   225A 73 74 75 76 
4426   225E 77 78 79 7A 
4426   2262 30 31 32 33 
4426   2266 34 35 36 37 
4426   226A 38 39 2B 2F 
4426   226E 00 
4427   226F 2E 22       _base64_table: .dw _base64_table_data
4428   2271 45 6E 74 65 _s0: .db "Enter a base64 encoded string to decode: ", 0
4428   2275 72 20 61 20 
4428   2279 62 61 73 65 
4428   227D 36 34 20 65 
4428   2281 6E 63 6F 64 
4428   2285 65 64 20 73 
4428   2289 74 72 69 6E 
4428   228D 67 20 74 6F 
4428   2291 20 64 65 63 
4428   2295 6F 64 65 3A 
4428   2299 20 00 
4429   229B 45 6E 63 6F _s1: .db "Encoded string: %s\n", 0
4429   229F 64 65 64 20 
4429   22A3 73 74 72 69 
4429   22A7 6E 67 3A 20 
4429   22AB 25 73 0A 00 
4430   22AF 44 65 63 6F _s2: .db "Decoded string: %s\n", 0
4430   22B3 64 65 64 20 
4430   22B7 73 74 72 69 
4430   22BB 6E 67 3A 20 
4430   22BF 25 73 0A 00 
4431   22C3 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
4431   22C7 70 65 63 74 
4431   22CB 65 64 20 66 
4431   22CF 6F 72 6D 61 
4431   22D3 74 20 69 6E 
4431   22D7 20 70 72 69 
4431   22DB 6E 74 66 2E 
4431   22DF 00 
4432   22E0 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
4432   22E4 72 3A 20 55 
4432   22E8 6E 6B 6E 6F 
4432   22EC 77 6E 20 61 
4432   22F0 72 67 75 6D 
4432   22F4 65 6E 74 20 
4432   22F8 74 79 70 65 
4432   22FC 2E 0A 00 
4433   22FF 1B 5B 32 4A _s5: .db "\033[2J\033[H", 0
4433   2303 1B 5B 48 00 
4434   2307             
4435   2307 09 23       _heap_top: .dw _heap
4436   2309 00          _heap: .db 0
4437   230A             ; --- END DATA BLOCK
4438   230A             
4439   230A             .end
tasm: Number of errors = 0
