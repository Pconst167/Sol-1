0001   0000             ; --- FILENAME: programs/base64.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; char input[512]; 
0011   0408 52 00 02      sub sp, 512
0012   040B             ; char output[256]; 
0013   040B 52 00 01      sub sp, 256
0014   040E             ; printf("\nEnter a base64 encoded string to decode: "); 
0015   040E             ; --- START FUNCTION CALL
0016   040E 26 B1 1A      mov b, _s0 ; "\nEnter a base64 encoded string to decode: "
0017   0411 FD AB         swp b
0018   0413 D8            push b
0019   0414 07 44 10      call printf
0020   0417 51 02 00      add sp, 2
0021   041A             ; --- END FUNCTION CALL
0022   041A             ; gets(input); 
0023   041A             ; --- START FUNCTION CALL
0024   041A FA 01 FE      lea d, [bp + -511] ; $input
0025   041D 2D            mov b, d
0026   041E 38 00 00      mov c, 0
0027   0421 FD AB         swp b
0028   0423 D8            push b
0029   0424 07 55 19      call gets
0030   0427 51 02 00      add sp, 2
0031   042A             ; --- END FUNCTION CALL
0032   042A             ; base64_encode(input, output); 
0033   042A             ; --- START FUNCTION CALL
0034   042A FA 01 FD      lea d, [bp + -767] ; $output
0035   042D 2D            mov b, d
0036   042E 38 00 00      mov c, 0
0037   0431 FD AB         swp b
0038   0433 D8            push b
0039   0434 FA 01 FE      lea d, [bp + -511] ; $input
0040   0437 2D            mov b, d
0041   0438 38 00 00      mov c, 0
0042   043B FD AB         swp b
0043   043D D8            push b
0044   043E 07 93 04      call base64_encode
0045   0441 51 04 00      add sp, 4
0046   0444             ; --- END FUNCTION CALL
0047   0444             ; printf("\nEncoded string: %s\n", output); 
0048   0444             ; --- START FUNCTION CALL
0049   0444 FA 01 FD      lea d, [bp + -767] ; $output
0050   0447 2D            mov b, d
0051   0448 38 00 00      mov c, 0
0052   044B FD AB         swp b
0053   044D D8            push b
0054   044E 26 DC 1A      mov b, _s1 ; "\nEncoded string: %s\n"
0055   0451 FD AB         swp b
0056   0453 D8            push b
0057   0454 07 44 10      call printf
0058   0457 51 04 00      add sp, 4
0059   045A             ; --- END FUNCTION CALL
0060   045A             ; base64_decode(output, input); 
0061   045A             ; --- START FUNCTION CALL
0062   045A FA 01 FE      lea d, [bp + -511] ; $input
0063   045D 2D            mov b, d
0064   045E 38 00 00      mov c, 0
0065   0461 FD AB         swp b
0066   0463 D8            push b
0067   0464 FA 01 FD      lea d, [bp + -767] ; $output
0068   0467 2D            mov b, d
0069   0468 38 00 00      mov c, 0
0070   046B FD AB         swp b
0071   046D D8            push b
0072   046E 07 E0 0A      call base64_decode
0073   0471 51 04 00      add sp, 4
0074   0474             ; --- END FUNCTION CALL
0075   0474             ; printf("\nDecoded string: %s\n", input); 
0076   0474             ; --- START FUNCTION CALL
0077   0474 FA 01 FE      lea d, [bp + -511] ; $input
0078   0477 2D            mov b, d
0079   0478 38 00 00      mov c, 0
0080   047B FD AB         swp b
0081   047D D8            push b
0082   047E 26 F1 1A      mov b, _s2 ; "\nDecoded string: %s\n"
0083   0481 FD AB         swp b
0084   0483 D8            push b
0085   0484 07 44 10      call printf
0086   0487 51 04 00      add sp, 4
0087   048A             ; --- END FUNCTION CALL
0088   048A             ; return 0; 
0089   048A FD 2E 00 00   mov32 cb, $00000000
0089   048E 00 00 
0090   0490 F9            leave
0091   0491 05 0B         syscall sys_terminate_proc
0092   0493             
0093   0493             base64_encode:
0094   0493 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0095   0496             ; int i = 0; 
0096   0496 52 02 00      sub sp, 2
0097   0499             ; --- START LOCAL VAR INITIALIZATION
0098   0499 FA FF FF      lea d, [bp + -1] ; $i
0099   049C DA            push d
0100   049D FD 2E 00 00   mov32 cb, $00000000
0100   04A1 00 00 
0101   04A3 E7            pop d
0102   04A4 FD 43         mov [d], b
0103   04A6             ; --- END LOCAL VAR INITIALIZATION
0104   04A6             ; int j = 0; 
0105   04A6 52 02 00      sub sp, 2
0106   04A9             ; --- START LOCAL VAR INITIALIZATION
0107   04A9 FA FD FF      lea d, [bp + -3] ; $j
0108   04AC DA            push d
0109   04AD FD 2E 00 00   mov32 cb, $00000000
0109   04B1 00 00 
0110   04B3 E7            pop d
0111   04B4 FD 43         mov [d], b
0112   04B6             ; --- END LOCAL VAR INITIALIZATION
0113   04B6             ; int k; 
0114   04B6 52 02 00      sub sp, 2
0115   04B9             ; int input_len; 
0116   04B9 52 02 00      sub sp, 2
0117   04BC             ; unsigned char input_buffer[3]; 
0118   04BC 52 03 00      sub sp, 3
0119   04BF             ; unsigned char output_buffer[4]; 
0120   04BF 52 04 00      sub sp, 4
0121   04C2             ; input_len = strlen(input); 
0122   04C2 FA F9 FF      lea d, [bp + -7] ; $input_len
0123   04C5 DA            push d
0124   04C6             ; --- START FUNCTION CALL
0125   04C6 FA 05 00      lea d, [bp + 5] ; $input
0126   04C9 2A            mov b, [d]
0127   04CA 38 00 00      mov c, 0
0128   04CD FD AB         swp b
0129   04CF D8            push b
0130   04D0 07 13 1A      call strlen
0131   04D3 51 02 00      add sp, 2
0132   04D6             ; --- END FUNCTION CALL
0133   04D6 E7            pop d
0134   04D7 FD 43         mov [d], b
0135   04D9             ; while (input_len--) { 
0136   04D9             _while1_cond:
0137   04D9 FA F9 FF      lea d, [bp + -7] ; $input_len
0138   04DC 2A            mov b, [d]
0139   04DD 38 00 00      mov c, 0
0140   04E0 11            mov a, b
0141   04E1 FD 7D         dec b
0142   04E3 FA F9 FF      lea d, [bp + -7] ; $input_len
0143   04E6 FD 43         mov [d], b
0144   04E8 27            mov b, a
0145   04E9 C0 00 00      cmp b, 0
0146   04EC C6 19 07      je _while1_exit
0147   04EF             _while1_block:
0148   04EF             ; input_buffer[i++] = *(input++); 
0149   04EF FA F6 FF      lea d, [bp + -10] ; $input_buffer
0150   04F2 D7            push a
0151   04F3 DA            push d
0152   04F4 FA FF FF      lea d, [bp + -1] ; $i
0153   04F7 2A            mov b, [d]
0154   04F8 38 00 00      mov c, 0
0155   04FB 11            mov a, b
0156   04FC FD 77         inc b
0157   04FE FA FF FF      lea d, [bp + -1] ; $i
0158   0501 FD 43         mov [d], b
0159   0503 27            mov b, a
0160   0504 E7            pop d
0161   0505 5A            add d, b
0162   0506 E4            pop a
0163   0507 DA            push d
0164   0508 FA 05 00      lea d, [bp + 5] ; $input
0165   050B 2A            mov b, [d]
0166   050C 38 00 00      mov c, 0
0167   050F FD 77         inc b
0168   0511 FA 05 00      lea d, [bp + 5] ; $input
0169   0514 FD 43         mov [d], b
0170   0516 FD 7D         dec b
0171   0518 74            mov d, b
0172   0519 2A            mov b, [d]
0173   051A 38 00 00      mov c, 0
0174   051D E7            pop d
0175   051E FD 3E         mov [d], bl
0176   0520             ; if (i == 3) { 
0177   0520             _if2_cond:
0178   0520 FA FF FF      lea d, [bp + -1] ; $i
0179   0523 2A            mov b, [d]
0180   0524 38 00 00      mov c, 0
0181   0527             ; --- START RELATIONAL
0182   0527 D7            push a
0183   0528 11            mov a, b
0184   0529 FD 2E 03 00   mov32 cb, $00000003
0184   052D 00 00 
0185   052F B0            cmp a, b
0186   0530 FD 71         seq ; ==
0187   0532 E4            pop a
0188   0533             ; --- END RELATIONAL
0189   0533 C0 00 00      cmp b, 0
0190   0536 C6 16 07      je _if2_exit
0191   0539             _if2_TRUE:
0192   0539             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0193   0539 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0194   053C D7            push a
0195   053D DA            push d
0196   053E FD 2E 00 00   mov32 cb, $00000000
0196   0542 00 00 
0197   0544 E7            pop d
0198   0545 5A            add d, b
0199   0546 E4            pop a
0200   0547 DA            push d
0201   0548 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0202   054B D7            push a
0203   054C DA            push d
0204   054D FD 2E 00 00   mov32 cb, $00000000
0204   0551 00 00 
0205   0553 E7            pop d
0206   0554 5A            add d, b
0207   0555 E4            pop a
0208   0556 32            mov bl, [d]
0209   0557 A7 00         mov bh, 0
0210   0559 38 00 00      mov c, 0
0211   055C D7            push a
0212   055D 11            mov a, b
0213   055E FD 2E FC 00   mov32 cb, $000000fc
0213   0562 00 00 
0214   0564 FD 92         and b, a ; &
0215   0566 E4            pop a
0216   0567             ; --- START SHIFT
0217   0567 D7            push a
0218   0568 11            mov a, b
0219   0569 FD 2E 02 00   mov32 cb, $00000002
0219   056D 00 00 
0220   056F FD 39         mov c, b
0221   0571 A1            shr a, cl
0222   0572 27            mov b, a
0223   0573 E4            pop a
0224   0574             ; --- END SHIFT
0225   0574 E7            pop d
0226   0575 FD 3E         mov [d], bl
0227   0577             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0228   0577 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0229   057A D7            push a
0230   057B DA            push d
0231   057C FD 2E 01 00   mov32 cb, $00000001
0231   0580 00 00 
0232   0582 E7            pop d
0233   0583 5A            add d, b
0234   0584 E4            pop a
0235   0585 DA            push d
0236   0586 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0237   0589 D7            push a
0238   058A DA            push d
0239   058B FD 2E 00 00   mov32 cb, $00000000
0239   058F 00 00 
0240   0591 E7            pop d
0241   0592 5A            add d, b
0242   0593 E4            pop a
0243   0594 32            mov bl, [d]
0244   0595 A7 00         mov bh, 0
0245   0597 38 00 00      mov c, 0
0246   059A D7            push a
0247   059B 11            mov a, b
0248   059C FD 2E 03 00   mov32 cb, $00000003
0248   05A0 00 00 
0249   05A2 FD 92         and b, a ; &
0250   05A4 E4            pop a
0251   05A5             ; --- START SHIFT
0252   05A5 D7            push a
0253   05A6 11            mov a, b
0254   05A7 FD 2E 04 00   mov32 cb, $00000004
0254   05AB 00 00 
0255   05AD FD 39         mov c, b
0256   05AF 9D            shl a, cl
0257   05B0 27            mov b, a
0258   05B1 E4            pop a
0259   05B2             ; --- END SHIFT
0260   05B2             ; --- START TERMS
0261   05B2 D7            push a
0262   05B3 11            mov a, b
0263   05B4 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0264   05B7 D7            push a
0265   05B8 DA            push d
0266   05B9 FD 2E 01 00   mov32 cb, $00000001
0266   05BD 00 00 
0267   05BF E7            pop d
0268   05C0 5A            add d, b
0269   05C1 E4            pop a
0270   05C2 32            mov bl, [d]
0271   05C3 A7 00         mov bh, 0
0272   05C5 38 00 00      mov c, 0
0273   05C8 D7            push a
0274   05C9 11            mov a, b
0275   05CA FD 2E F0 00   mov32 cb, $000000f0
0275   05CE 00 00 
0276   05D0 FD 92         and b, a ; &
0277   05D2 E4            pop a
0278   05D3             ; --- START SHIFT
0279   05D3 D7            push a
0280   05D4 11            mov a, b
0281   05D5 FD 2E 04 00   mov32 cb, $00000004
0281   05D9 00 00 
0282   05DB FD 39         mov c, b
0283   05DD A1            shr a, cl
0284   05DE 27            mov b, a
0285   05DF E4            pop a
0286   05E0             ; --- END SHIFT
0287   05E0 56            add b, a
0288   05E1 E4            pop a
0289   05E2             ; --- END TERMS
0290   05E2 E7            pop d
0291   05E3 FD 3E         mov [d], bl
0292   05E5             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0293   05E5 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0294   05E8 D7            push a
0295   05E9 DA            push d
0296   05EA FD 2E 02 00   mov32 cb, $00000002
0296   05EE 00 00 
0297   05F0 E7            pop d
0298   05F1 5A            add d, b
0299   05F2 E4            pop a
0300   05F3 DA            push d
0301   05F4 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0302   05F7 D7            push a
0303   05F8 DA            push d
0304   05F9 FD 2E 01 00   mov32 cb, $00000001
0304   05FD 00 00 
0305   05FF E7            pop d
0306   0600 5A            add d, b
0307   0601 E4            pop a
0308   0602 32            mov bl, [d]
0309   0603 A7 00         mov bh, 0
0310   0605 38 00 00      mov c, 0
0311   0608 D7            push a
0312   0609 11            mov a, b
0313   060A FD 2E 0F 00   mov32 cb, $0000000f
0313   060E 00 00 
0314   0610 FD 92         and b, a ; &
0315   0612 E4            pop a
0316   0613             ; --- START SHIFT
0317   0613 D7            push a
0318   0614 11            mov a, b
0319   0615 FD 2E 02 00   mov32 cb, $00000002
0319   0619 00 00 
0320   061B FD 39         mov c, b
0321   061D 9D            shl a, cl
0322   061E 27            mov b, a
0323   061F E4            pop a
0324   0620             ; --- END SHIFT
0325   0620             ; --- START TERMS
0326   0620 D7            push a
0327   0621 11            mov a, b
0328   0622 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0329   0625 D7            push a
0330   0626 DA            push d
0331   0627 FD 2E 02 00   mov32 cb, $00000002
0331   062B 00 00 
0332   062D E7            pop d
0333   062E 5A            add d, b
0334   062F E4            pop a
0335   0630 32            mov bl, [d]
0336   0631 A7 00         mov bh, 0
0337   0633 38 00 00      mov c, 0
0338   0636 D7            push a
0339   0637 11            mov a, b
0340   0638 FD 2E C0 00   mov32 cb, $000000c0
0340   063C 00 00 
0341   063E FD 92         and b, a ; &
0342   0640 E4            pop a
0343   0641             ; --- START SHIFT
0344   0641 D7            push a
0345   0642 11            mov a, b
0346   0643 FD 2E 06 00   mov32 cb, $00000006
0346   0647 00 00 
0347   0649 FD 39         mov c, b
0348   064B A1            shr a, cl
0349   064C 27            mov b, a
0350   064D E4            pop a
0351   064E             ; --- END SHIFT
0352   064E 56            add b, a
0353   064F E4            pop a
0354   0650             ; --- END TERMS
0355   0650 E7            pop d
0356   0651 FD 3E         mov [d], bl
0357   0653             ; output_buffer[3] = input_buffer[2] & 0x3F; 
0358   0653 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0359   0656 D7            push a
0360   0657 DA            push d
0361   0658 FD 2E 03 00   mov32 cb, $00000003
0361   065C 00 00 
0362   065E E7            pop d
0363   065F 5A            add d, b
0364   0660 E4            pop a
0365   0661 DA            push d
0366   0662 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0367   0665 D7            push a
0368   0666 DA            push d
0369   0667 FD 2E 02 00   mov32 cb, $00000002
0369   066B 00 00 
0370   066D E7            pop d
0371   066E 5A            add d, b
0372   066F E4            pop a
0373   0670 32            mov bl, [d]
0374   0671 A7 00         mov bh, 0
0375   0673 38 00 00      mov c, 0
0376   0676 D7            push a
0377   0677 11            mov a, b
0378   0678 FD 2E 3F 00   mov32 cb, $0000003f
0378   067C 00 00 
0379   067E FD 92         and b, a ; &
0380   0680 E4            pop a
0381   0681 E7            pop d
0382   0682 FD 3E         mov [d], bl
0383   0684             ; for (i = 0; i < 4; i++) { 
0384   0684             _for3_init:
0385   0684 FA FF FF      lea d, [bp + -1] ; $i
0386   0687 DA            push d
0387   0688 FD 2E 00 00   mov32 cb, $00000000
0387   068C 00 00 
0388   068E E7            pop d
0389   068F FD 43         mov [d], b
0390   0691             _for3_cond:
0391   0691 FA FF FF      lea d, [bp + -1] ; $i
0392   0694 2A            mov b, [d]
0393   0695 38 00 00      mov c, 0
0394   0698             ; --- START RELATIONAL
0395   0698 D7            push a
0396   0699 11            mov a, b
0397   069A FD 2E 04 00   mov32 cb, $00000004
0397   069E 00 00 
0398   06A0 B0            cmp a, b
0399   06A1 FD 73         slt ; < (signed)
0400   06A3 E4            pop a
0401   06A4             ; --- END RELATIONAL
0402   06A4 C0 00 00      cmp b, 0
0403   06A7 C6 06 07      je _for3_exit
0404   06AA             _for3_block:
0405   06AA             ; output[j++] = base64_table[output_buffer[i]]; 
0406   06AA FA 07 00      lea d, [bp + 7] ; $output
0407   06AD FD 2A         mov d, [d]
0408   06AF D7            push a
0409   06B0 DA            push d
0410   06B1 FA FD FF      lea d, [bp + -3] ; $j
0411   06B4 2A            mov b, [d]
0412   06B5 38 00 00      mov c, 0
0413   06B8 11            mov a, b
0414   06B9 FD 77         inc b
0415   06BB FA FD FF      lea d, [bp + -3] ; $j
0416   06BE FD 43         mov [d], b
0417   06C0 27            mov b, a
0418   06C1 E7            pop d
0419   06C2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0420   06C6 E4            pop a
0421   06C7 DA            push d
0422   06C8 3B AF 1A      mov d, _base64_table ; $base64_table
0423   06CB FD 2A         mov d, [d]
0424   06CD D7            push a
0425   06CE DA            push d
0426   06CF FA F2 FF      lea d, [bp + -14] ; $output_buffer
0427   06D2 D7            push a
0428   06D3 DA            push d
0429   06D4 FA FF FF      lea d, [bp + -1] ; $i
0430   06D7 2A            mov b, [d]
0431   06D8 38 00 00      mov c, 0
0432   06DB E7            pop d
0433   06DC 5A            add d, b
0434   06DD E4            pop a
0435   06DE 32            mov bl, [d]
0436   06DF A7 00         mov bh, 0
0437   06E1 38 00 00      mov c, 0
0438   06E4 E7            pop d
0439   06E5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0440   06E9 E4            pop a
0441   06EA 32            mov bl, [d]
0442   06EB A7 00         mov bh, 0
0443   06ED 38 00 00      mov c, 0
0444   06F0 E7            pop d
0445   06F1 FD 3E         mov [d], bl
0446   06F3             _for3_update:
0447   06F3 FA FF FF      lea d, [bp + -1] ; $i
0448   06F6 2A            mov b, [d]
0449   06F7 38 00 00      mov c, 0
0450   06FA 11            mov a, b
0451   06FB FD 77         inc b
0452   06FD FA FF FF      lea d, [bp + -1] ; $i
0453   0700 FD 43         mov [d], b
0454   0702 27            mov b, a
0455   0703 0A 91 06      jmp _for3_cond
0456   0706             _for3_exit:
0457   0706             ; i = 0; 
0458   0706 FA FF FF      lea d, [bp + -1] ; $i
0459   0709 DA            push d
0460   070A FD 2E 00 00   mov32 cb, $00000000
0460   070E 00 00 
0461   0710 E7            pop d
0462   0711 FD 43         mov [d], b
0463   0713 0A 16 07      jmp _if2_exit
0464   0716             _if2_exit:
0465   0716 0A D9 04      jmp _while1_cond
0466   0719             _while1_exit:
0467   0719             ; if (i) { 
0468   0719             _if4_cond:
0469   0719 FA FF FF      lea d, [bp + -1] ; $i
0470   071C 2A            mov b, [d]
0471   071D 38 00 00      mov c, 0
0472   0720 C0 00 00      cmp b, 0
0473   0723 C6 6F 09      je _if4_exit
0474   0726             _if4_TRUE:
0475   0726             ; for (k = i; k < 3; k++) { 
0476   0726             _for5_init:
0477   0726 FA FB FF      lea d, [bp + -5] ; $k
0478   0729 DA            push d
0479   072A FA FF FF      lea d, [bp + -1] ; $i
0480   072D 2A            mov b, [d]
0481   072E 38 00 00      mov c, 0
0482   0731 E7            pop d
0483   0732 FD 43         mov [d], b
0484   0734             _for5_cond:
0485   0734 FA FB FF      lea d, [bp + -5] ; $k
0486   0737 2A            mov b, [d]
0487   0738 38 00 00      mov c, 0
0488   073B             ; --- START RELATIONAL
0489   073B D7            push a
0490   073C 11            mov a, b
0491   073D FD 2E 03 00   mov32 cb, $00000003
0491   0741 00 00 
0492   0743 B0            cmp a, b
0493   0744 FD 73         slt ; < (signed)
0494   0746 E4            pop a
0495   0747             ; --- END RELATIONAL
0496   0747 C0 00 00      cmp b, 0
0497   074A C6 79 07      je _for5_exit
0498   074D             _for5_block:
0499   074D             ; input_buffer[k] = '\0'; 
0500   074D FA F6 FF      lea d, [bp + -10] ; $input_buffer
0501   0750 D7            push a
0502   0751 DA            push d
0503   0752 FA FB FF      lea d, [bp + -5] ; $k
0504   0755 2A            mov b, [d]
0505   0756 38 00 00      mov c, 0
0506   0759 E7            pop d
0507   075A 5A            add d, b
0508   075B E4            pop a
0509   075C DA            push d
0510   075D FD 2E 00 00   mov32 cb, $00000000
0510   0761 00 00 
0511   0763 E7            pop d
0512   0764 FD 3E         mov [d], bl
0513   0766             _for5_update:
0514   0766 FA FB FF      lea d, [bp + -5] ; $k
0515   0769 2A            mov b, [d]
0516   076A 38 00 00      mov c, 0
0517   076D 11            mov a, b
0518   076E FD 77         inc b
0519   0770 FA FB FF      lea d, [bp + -5] ; $k
0520   0773 FD 43         mov [d], b
0521   0775 27            mov b, a
0522   0776 0A 34 07      jmp _for5_cond
0523   0779             _for5_exit:
0524   0779             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0525   0779 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0526   077C D7            push a
0527   077D DA            push d
0528   077E FD 2E 00 00   mov32 cb, $00000000
0528   0782 00 00 
0529   0784 E7            pop d
0530   0785 5A            add d, b
0531   0786 E4            pop a
0532   0787 DA            push d
0533   0788 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0534   078B D7            push a
0535   078C DA            push d
0536   078D FD 2E 00 00   mov32 cb, $00000000
0536   0791 00 00 
0537   0793 E7            pop d
0538   0794 5A            add d, b
0539   0795 E4            pop a
0540   0796 32            mov bl, [d]
0541   0797 A7 00         mov bh, 0
0542   0799 38 00 00      mov c, 0
0543   079C D7            push a
0544   079D 11            mov a, b
0545   079E FD 2E FC 00   mov32 cb, $000000fc
0545   07A2 00 00 
0546   07A4 FD 92         and b, a ; &
0547   07A6 E4            pop a
0548   07A7             ; --- START SHIFT
0549   07A7 D7            push a
0550   07A8 11            mov a, b
0551   07A9 FD 2E 02 00   mov32 cb, $00000002
0551   07AD 00 00 
0552   07AF FD 39         mov c, b
0553   07B1 A1            shr a, cl
0554   07B2 27            mov b, a
0555   07B3 E4            pop a
0556   07B4             ; --- END SHIFT
0557   07B4 E7            pop d
0558   07B5 FD 3E         mov [d], bl
0559   07B7             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0560   07B7 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0561   07BA D7            push a
0562   07BB DA            push d
0563   07BC FD 2E 01 00   mov32 cb, $00000001
0563   07C0 00 00 
0564   07C2 E7            pop d
0565   07C3 5A            add d, b
0566   07C4 E4            pop a
0567   07C5 DA            push d
0568   07C6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0569   07C9 D7            push a
0570   07CA DA            push d
0571   07CB FD 2E 00 00   mov32 cb, $00000000
0571   07CF 00 00 
0572   07D1 E7            pop d
0573   07D2 5A            add d, b
0574   07D3 E4            pop a
0575   07D4 32            mov bl, [d]
0576   07D5 A7 00         mov bh, 0
0577   07D7 38 00 00      mov c, 0
0578   07DA D7            push a
0579   07DB 11            mov a, b
0580   07DC FD 2E 03 00   mov32 cb, $00000003
0580   07E0 00 00 
0581   07E2 FD 92         and b, a ; &
0582   07E4 E4            pop a
0583   07E5             ; --- START SHIFT
0584   07E5 D7            push a
0585   07E6 11            mov a, b
0586   07E7 FD 2E 04 00   mov32 cb, $00000004
0586   07EB 00 00 
0587   07ED FD 39         mov c, b
0588   07EF 9D            shl a, cl
0589   07F0 27            mov b, a
0590   07F1 E4            pop a
0591   07F2             ; --- END SHIFT
0592   07F2             ; --- START TERMS
0593   07F2 D7            push a
0594   07F3 11            mov a, b
0595   07F4 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0596   07F7 D7            push a
0597   07F8 DA            push d
0598   07F9 FD 2E 01 00   mov32 cb, $00000001
0598   07FD 00 00 
0599   07FF E7            pop d
0600   0800 5A            add d, b
0601   0801 E4            pop a
0602   0802 32            mov bl, [d]
0603   0803 A7 00         mov bh, 0
0604   0805 38 00 00      mov c, 0
0605   0808 D7            push a
0606   0809 11            mov a, b
0607   080A FD 2E F0 00   mov32 cb, $000000f0
0607   080E 00 00 
0608   0810 FD 92         and b, a ; &
0609   0812 E4            pop a
0610   0813             ; --- START SHIFT
0611   0813 D7            push a
0612   0814 11            mov a, b
0613   0815 FD 2E 04 00   mov32 cb, $00000004
0613   0819 00 00 
0614   081B FD 39         mov c, b
0615   081D A1            shr a, cl
0616   081E 27            mov b, a
0617   081F E4            pop a
0618   0820             ; --- END SHIFT
0619   0820 56            add b, a
0620   0821 E4            pop a
0621   0822             ; --- END TERMS
0622   0822 E7            pop d
0623   0823 FD 3E         mov [d], bl
0624   0825             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0625   0825 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0626   0828 D7            push a
0627   0829 DA            push d
0628   082A FD 2E 02 00   mov32 cb, $00000002
0628   082E 00 00 
0629   0830 E7            pop d
0630   0831 5A            add d, b
0631   0832 E4            pop a
0632   0833 DA            push d
0633   0834 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0634   0837 D7            push a
0635   0838 DA            push d
0636   0839 FD 2E 01 00   mov32 cb, $00000001
0636   083D 00 00 
0637   083F E7            pop d
0638   0840 5A            add d, b
0639   0841 E4            pop a
0640   0842 32            mov bl, [d]
0641   0843 A7 00         mov bh, 0
0642   0845 38 00 00      mov c, 0
0643   0848 D7            push a
0644   0849 11            mov a, b
0645   084A FD 2E 0F 00   mov32 cb, $0000000f
0645   084E 00 00 
0646   0850 FD 92         and b, a ; &
0647   0852 E4            pop a
0648   0853             ; --- START SHIFT
0649   0853 D7            push a
0650   0854 11            mov a, b
0651   0855 FD 2E 02 00   mov32 cb, $00000002
0651   0859 00 00 
0652   085B FD 39         mov c, b
0653   085D 9D            shl a, cl
0654   085E 27            mov b, a
0655   085F E4            pop a
0656   0860             ; --- END SHIFT
0657   0860             ; --- START TERMS
0658   0860 D7            push a
0659   0861 11            mov a, b
0660   0862 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0661   0865 D7            push a
0662   0866 DA            push d
0663   0867 FD 2E 02 00   mov32 cb, $00000002
0663   086B 00 00 
0664   086D E7            pop d
0665   086E 5A            add d, b
0666   086F E4            pop a
0667   0870 32            mov bl, [d]
0668   0871 A7 00         mov bh, 0
0669   0873 38 00 00      mov c, 0
0670   0876 D7            push a
0671   0877 11            mov a, b
0672   0878 FD 2E C0 00   mov32 cb, $000000c0
0672   087C 00 00 
0673   087E FD 92         and b, a ; &
0674   0880 E4            pop a
0675   0881             ; --- START SHIFT
0676   0881 D7            push a
0677   0882 11            mov a, b
0678   0883 FD 2E 06 00   mov32 cb, $00000006
0678   0887 00 00 
0679   0889 FD 39         mov c, b
0680   088B A1            shr a, cl
0681   088C 27            mov b, a
0682   088D E4            pop a
0683   088E             ; --- END SHIFT
0684   088E 56            add b, a
0685   088F E4            pop a
0686   0890             ; --- END TERMS
0687   0890 E7            pop d
0688   0891 FD 3E         mov [d], bl
0689   0893             ; for (k = 0; k < i + 1; k++) { 
0690   0893             _for6_init:
0691   0893 FA FB FF      lea d, [bp + -5] ; $k
0692   0896 DA            push d
0693   0897 FD 2E 00 00   mov32 cb, $00000000
0693   089B 00 00 
0694   089D E7            pop d
0695   089E FD 43         mov [d], b
0696   08A0             _for6_cond:
0697   08A0 FA FB FF      lea d, [bp + -5] ; $k
0698   08A3 2A            mov b, [d]
0699   08A4 38 00 00      mov c, 0
0700   08A7             ; --- START RELATIONAL
0701   08A7 D7            push a
0702   08A8 11            mov a, b
0703   08A9 FA FF FF      lea d, [bp + -1] ; $i
0704   08AC 2A            mov b, [d]
0705   08AD 38 00 00      mov c, 0
0706   08B0             ; --- START TERMS
0707   08B0 D7            push a
0708   08B1 11            mov a, b
0709   08B2 FD 2E 01 00   mov32 cb, $00000001
0709   08B6 00 00 
0710   08B8 56            add b, a
0711   08B9 E4            pop a
0712   08BA             ; --- END TERMS
0713   08BA B0            cmp a, b
0714   08BB FD 73         slt ; < (signed)
0715   08BD E4            pop a
0716   08BE             ; --- END RELATIONAL
0717   08BE C0 00 00      cmp b, 0
0718   08C1 C6 20 09      je _for6_exit
0719   08C4             _for6_block:
0720   08C4             ; output[j++] = base64_table[output_buffer[k]]; 
0721   08C4 FA 07 00      lea d, [bp + 7] ; $output
0722   08C7 FD 2A         mov d, [d]
0723   08C9 D7            push a
0724   08CA DA            push d
0725   08CB FA FD FF      lea d, [bp + -3] ; $j
0726   08CE 2A            mov b, [d]
0727   08CF 38 00 00      mov c, 0
0728   08D2 11            mov a, b
0729   08D3 FD 77         inc b
0730   08D5 FA FD FF      lea d, [bp + -3] ; $j
0731   08D8 FD 43         mov [d], b
0732   08DA 27            mov b, a
0733   08DB E7            pop d
0734   08DC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0735   08E0 E4            pop a
0736   08E1 DA            push d
0737   08E2 3B AF 1A      mov d, _base64_table ; $base64_table
0738   08E5 FD 2A         mov d, [d]
0739   08E7 D7            push a
0740   08E8 DA            push d
0741   08E9 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0742   08EC D7            push a
0743   08ED DA            push d
0744   08EE FA FB FF      lea d, [bp + -5] ; $k
0745   08F1 2A            mov b, [d]
0746   08F2 38 00 00      mov c, 0
0747   08F5 E7            pop d
0748   08F6 5A            add d, b
0749   08F7 E4            pop a
0750   08F8 32            mov bl, [d]
0751   08F9 A7 00         mov bh, 0
0752   08FB 38 00 00      mov c, 0
0753   08FE E7            pop d
0754   08FF FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0755   0903 E4            pop a
0756   0904 32            mov bl, [d]
0757   0905 A7 00         mov bh, 0
0758   0907 38 00 00      mov c, 0
0759   090A E7            pop d
0760   090B FD 3E         mov [d], bl
0761   090D             _for6_update:
0762   090D FA FB FF      lea d, [bp + -5] ; $k
0763   0910 2A            mov b, [d]
0764   0911 38 00 00      mov c, 0
0765   0914 11            mov a, b
0766   0915 FD 77         inc b
0767   0917 FA FB FF      lea d, [bp + -5] ; $k
0768   091A FD 43         mov [d], b
0769   091C 27            mov b, a
0770   091D 0A A0 08      jmp _for6_cond
0771   0920             _for6_exit:
0772   0920             ; while (i++ < 3) { 
0773   0920             _while7_cond:
0774   0920 FA FF FF      lea d, [bp + -1] ; $i
0775   0923 2A            mov b, [d]
0776   0924 38 00 00      mov c, 0
0777   0927 11            mov a, b
0778   0928 FD 77         inc b
0779   092A FA FF FF      lea d, [bp + -1] ; $i
0780   092D FD 43         mov [d], b
0781   092F 27            mov b, a
0782   0930             ; --- START RELATIONAL
0783   0930 D7            push a
0784   0931 11            mov a, b
0785   0932 FD 2E 03 00   mov32 cb, $00000003
0785   0936 00 00 
0786   0938 B0            cmp a, b
0787   0939 FD 73         slt ; < (signed)
0788   093B E4            pop a
0789   093C             ; --- END RELATIONAL
0790   093C C0 00 00      cmp b, 0
0791   093F C6 6C 09      je _while7_exit
0792   0942             _while7_block:
0793   0942             ; output[j++] = '='; 
0794   0942 FA 07 00      lea d, [bp + 7] ; $output
0795   0945 FD 2A         mov d, [d]
0796   0947 D7            push a
0797   0948 DA            push d
0798   0949 FA FD FF      lea d, [bp + -3] ; $j
0799   094C 2A            mov b, [d]
0800   094D 38 00 00      mov c, 0
0801   0950 11            mov a, b
0802   0951 FD 77         inc b
0803   0953 FA FD FF      lea d, [bp + -3] ; $j
0804   0956 FD 43         mov [d], b
0805   0958 27            mov b, a
0806   0959 E7            pop d
0807   095A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0808   095E E4            pop a
0809   095F DA            push d
0810   0960 FD 2E 3D 00   mov32 cb, $0000003d
0810   0964 00 00 
0811   0966 E7            pop d
0812   0967 FD 3E         mov [d], bl
0813   0969 0A 20 09      jmp _while7_cond
0814   096C             _while7_exit:
0815   096C 0A 6F 09      jmp _if4_exit
0816   096F             _if4_exit:
0817   096F             ; output[j] = '\0'; 
0818   096F FA 07 00      lea d, [bp + 7] ; $output
0819   0972 FD 2A         mov d, [d]
0820   0974 D7            push a
0821   0975 DA            push d
0822   0976 FA FD FF      lea d, [bp + -3] ; $j
0823   0979 2A            mov b, [d]
0824   097A 38 00 00      mov c, 0
0825   097D E7            pop d
0826   097E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0827   0982 E4            pop a
0828   0983 DA            push d
0829   0984 FD 2E 00 00   mov32 cb, $00000000
0829   0988 00 00 
0830   098A E7            pop d
0831   098B FD 3E         mov [d], bl
0832   098D F9            leave
0833   098E 09            ret
0834   098F             
0835   098F             base64_char_value:
0836   098F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0837   0992             ; if (c >= 'A' && c <= 'Z') return c - 'A'; 
0838   0992             _if8_cond:
0839   0992 FA 05 00      lea d, [bp + 5] ; $c
0840   0995 32            mov bl, [d]
0841   0996 A7 00         mov bh, 0
0842   0998 38 00 00      mov c, 0
0843   099B             ; --- START RELATIONAL
0844   099B D7            push a
0845   099C 11            mov a, b
0846   099D FD 2E 41 00   mov32 cb, $00000041
0846   09A1 00 00 
0847   09A3 B0            cmp a, b
0848   09A4 FD 80         sge ; >=
0849   09A6 E4            pop a
0850   09A7             ; --- END RELATIONAL
0851   09A7             ; --- START LOGICAL AND
0852   09A7 D7            push a
0853   09A8 11            mov a, b
0854   09A9 FA 05 00      lea d, [bp + 5] ; $c
0855   09AC 32            mov bl, [d]
0856   09AD A7 00         mov bh, 0
0857   09AF 38 00 00      mov c, 0
0858   09B2             ; --- START RELATIONAL
0859   09B2 D7            push a
0860   09B3 11            mov a, b
0861   09B4 FD 2E 5A 00   mov32 cb, $0000005a
0861   09B8 00 00 
0862   09BA B0            cmp a, b
0863   09BB FD 74         sle ; <= (signed)
0864   09BD E4            pop a
0865   09BE             ; --- END RELATIONAL
0866   09BE FD A7         sand a, b
0867   09C0 E4            pop a
0868   09C1             ; --- END LOGICAL AND
0869   09C1 C0 00 00      cmp b, 0
0870   09C4 C6 E0 09      je _if8_exit
0871   09C7             _if8_TRUE:
0872   09C7             ; return c - 'A'; 
0873   09C7 FA 05 00      lea d, [bp + 5] ; $c
0874   09CA 32            mov bl, [d]
0875   09CB A7 00         mov bh, 0
0876   09CD 38 00 00      mov c, 0
0877   09D0             ; --- START TERMS
0878   09D0 D7            push a
0879   09D1 11            mov a, b
0880   09D2 FD 2E 41 00   mov32 cb, $00000041
0880   09D6 00 00 
0881   09D8 60            sub a, b
0882   09D9 27            mov b, a
0883   09DA E4            pop a
0884   09DB             ; --- END TERMS
0885   09DB F9            leave
0886   09DC 09            ret
0887   09DD 0A E0 09      jmp _if8_exit
0888   09E0             _if8_exit:
0889   09E0             ; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
0890   09E0             _if9_cond:
0891   09E0 FA 05 00      lea d, [bp + 5] ; $c
0892   09E3 32            mov bl, [d]
0893   09E4 A7 00         mov bh, 0
0894   09E6 38 00 00      mov c, 0
0895   09E9             ; --- START RELATIONAL
0896   09E9 D7            push a
0897   09EA 11            mov a, b
0898   09EB FD 2E 61 00   mov32 cb, $00000061
0898   09EF 00 00 
0899   09F1 B0            cmp a, b
0900   09F2 FD 80         sge ; >=
0901   09F4 E4            pop a
0902   09F5             ; --- END RELATIONAL
0903   09F5             ; --- START LOGICAL AND
0904   09F5 D7            push a
0905   09F6 11            mov a, b
0906   09F7 FA 05 00      lea d, [bp + 5] ; $c
0907   09FA 32            mov bl, [d]
0908   09FB A7 00         mov bh, 0
0909   09FD 38 00 00      mov c, 0
0910   0A00             ; --- START RELATIONAL
0911   0A00 D7            push a
0912   0A01 11            mov a, b
0913   0A02 FD 2E 7A 00   mov32 cb, $0000007a
0913   0A06 00 00 
0914   0A08 B0            cmp a, b
0915   0A09 FD 74         sle ; <= (signed)
0916   0A0B E4            pop a
0917   0A0C             ; --- END RELATIONAL
0918   0A0C FD A7         sand a, b
0919   0A0E E4            pop a
0920   0A0F             ; --- END LOGICAL AND
0921   0A0F C0 00 00      cmp b, 0
0922   0A12 C6 36 0A      je _if9_exit
0923   0A15             _if9_TRUE:
0924   0A15             ; return c - 'a' + 26; 
0925   0A15 FA 05 00      lea d, [bp + 5] ; $c
0926   0A18 32            mov bl, [d]
0927   0A19 A7 00         mov bh, 0
0928   0A1B 38 00 00      mov c, 0
0929   0A1E             ; --- START TERMS
0930   0A1E D7            push a
0931   0A1F 11            mov a, b
0932   0A20 FD 2E 61 00   mov32 cb, $00000061
0932   0A24 00 00 
0933   0A26 60            sub a, b
0934   0A27 27            mov b, a
0935   0A28 11            mov a, b
0936   0A29 FD 2E 1A 00   mov32 cb, $0000001a
0936   0A2D 00 00 
0937   0A2F 56            add b, a
0938   0A30 E4            pop a
0939   0A31             ; --- END TERMS
0940   0A31 F9            leave
0941   0A32 09            ret
0942   0A33 0A 36 0A      jmp _if9_exit
0943   0A36             _if9_exit:
0944   0A36             ; if (c >= '0' && c <= '9') return c - '0' + 52; 
0945   0A36             _if10_cond:
0946   0A36 FA 05 00      lea d, [bp + 5] ; $c
0947   0A39 32            mov bl, [d]
0948   0A3A A7 00         mov bh, 0
0949   0A3C 38 00 00      mov c, 0
0950   0A3F             ; --- START RELATIONAL
0951   0A3F D7            push a
0952   0A40 11            mov a, b
0953   0A41 FD 2E 30 00   mov32 cb, $00000030
0953   0A45 00 00 
0954   0A47 B0            cmp a, b
0955   0A48 FD 80         sge ; >=
0956   0A4A E4            pop a
0957   0A4B             ; --- END RELATIONAL
0958   0A4B             ; --- START LOGICAL AND
0959   0A4B D7            push a
0960   0A4C 11            mov a, b
0961   0A4D FA 05 00      lea d, [bp + 5] ; $c
0962   0A50 32            mov bl, [d]
0963   0A51 A7 00         mov bh, 0
0964   0A53 38 00 00      mov c, 0
0965   0A56             ; --- START RELATIONAL
0966   0A56 D7            push a
0967   0A57 11            mov a, b
0968   0A58 FD 2E 39 00   mov32 cb, $00000039
0968   0A5C 00 00 
0969   0A5E B0            cmp a, b
0970   0A5F FD 74         sle ; <= (signed)
0971   0A61 E4            pop a
0972   0A62             ; --- END RELATIONAL
0973   0A62 FD A7         sand a, b
0974   0A64 E4            pop a
0975   0A65             ; --- END LOGICAL AND
0976   0A65 C0 00 00      cmp b, 0
0977   0A68 C6 8C 0A      je _if10_exit
0978   0A6B             _if10_TRUE:
0979   0A6B             ; return c - '0' + 52; 
0980   0A6B FA 05 00      lea d, [bp + 5] ; $c
0981   0A6E 32            mov bl, [d]
0982   0A6F A7 00         mov bh, 0
0983   0A71 38 00 00      mov c, 0
0984   0A74             ; --- START TERMS
0985   0A74 D7            push a
0986   0A75 11            mov a, b
0987   0A76 FD 2E 30 00   mov32 cb, $00000030
0987   0A7A 00 00 
0988   0A7C 60            sub a, b
0989   0A7D 27            mov b, a
0990   0A7E 11            mov a, b
0991   0A7F FD 2E 34 00   mov32 cb, $00000034
0991   0A83 00 00 
0992   0A85 56            add b, a
0993   0A86 E4            pop a
0994   0A87             ; --- END TERMS
0995   0A87 F9            leave
0996   0A88 09            ret
0997   0A89 0A 8C 0A      jmp _if10_exit
0998   0A8C             _if10_exit:
0999   0A8C             ; if (c == '+') return 62; 
1000   0A8C             _if11_cond:
1001   0A8C FA 05 00      lea d, [bp + 5] ; $c
1002   0A8F 32            mov bl, [d]
1003   0A90 A7 00         mov bh, 0
1004   0A92 38 00 00      mov c, 0
1005   0A95             ; --- START RELATIONAL
1006   0A95 D7            push a
1007   0A96 11            mov a, b
1008   0A97 FD 2E 2B 00   mov32 cb, $0000002b
1008   0A9B 00 00 
1009   0A9D B0            cmp a, b
1010   0A9E FD 71         seq ; ==
1011   0AA0 E4            pop a
1012   0AA1             ; --- END RELATIONAL
1013   0AA1 C0 00 00      cmp b, 0
1014   0AA4 C6 B2 0A      je _if11_exit
1015   0AA7             _if11_TRUE:
1016   0AA7             ; return 62; 
1017   0AA7 FD 2E 3E 00   mov32 cb, $0000003e
1017   0AAB 00 00 
1018   0AAD F9            leave
1019   0AAE 09            ret
1020   0AAF 0A B2 0A      jmp _if11_exit
1021   0AB2             _if11_exit:
1022   0AB2             ; if (c == '/') return 63; 
1023   0AB2             _if12_cond:
1024   0AB2 FA 05 00      lea d, [bp + 5] ; $c
1025   0AB5 32            mov bl, [d]
1026   0AB6 A7 00         mov bh, 0
1027   0AB8 38 00 00      mov c, 0
1028   0ABB             ; --- START RELATIONAL
1029   0ABB D7            push a
1030   0ABC 11            mov a, b
1031   0ABD FD 2E 2F 00   mov32 cb, $0000002f
1031   0AC1 00 00 
1032   0AC3 B0            cmp a, b
1033   0AC4 FD 71         seq ; ==
1034   0AC6 E4            pop a
1035   0AC7             ; --- END RELATIONAL
1036   0AC7 C0 00 00      cmp b, 0
1037   0ACA C6 D8 0A      je _if12_exit
1038   0ACD             _if12_TRUE:
1039   0ACD             ; return 63; 
1040   0ACD FD 2E 3F 00   mov32 cb, $0000003f
1040   0AD1 00 00 
1041   0AD3 F9            leave
1042   0AD4 09            ret
1043   0AD5 0A D8 0A      jmp _if12_exit
1044   0AD8             _if12_exit:
1045   0AD8             ; return -1; 
1046   0AD8 FD 2E FF FF   mov32 cb, $ffffffff
1046   0ADC FF FF 
1047   0ADE F9            leave
1048   0ADF 09            ret
1049   0AE0             
1050   0AE0             base64_decode:
1051   0AE0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1052   0AE3             ; int i = 0, j = 0, k = 0; 
1053   0AE3 52 02 00      sub sp, 2
1054   0AE6             ; --- START LOCAL VAR INITIALIZATION
1055   0AE6 FA FF FF      lea d, [bp + -1] ; $i
1056   0AE9 DA            push d
1057   0AEA FD 2E 00 00   mov32 cb, $00000000
1057   0AEE 00 00 
1058   0AF0 E7            pop d
1059   0AF1 FD 43         mov [d], b
1060   0AF3             ; --- END LOCAL VAR INITIALIZATION
1061   0AF3 52 02 00      sub sp, 2
1062   0AF6             ; --- START LOCAL VAR INITIALIZATION
1063   0AF6 FA FD FF      lea d, [bp + -3] ; $j
1064   0AF9 DA            push d
1065   0AFA FD 2E 00 00   mov32 cb, $00000000
1065   0AFE 00 00 
1066   0B00 E7            pop d
1067   0B01 FD 43         mov [d], b
1068   0B03             ; --- END LOCAL VAR INITIALIZATION
1069   0B03 52 02 00      sub sp, 2
1070   0B06             ; --- START LOCAL VAR INITIALIZATION
1071   0B06 FA FB FF      lea d, [bp + -5] ; $k
1072   0B09 DA            push d
1073   0B0A FD 2E 00 00   mov32 cb, $00000000
1073   0B0E 00 00 
1074   0B10 E7            pop d
1075   0B11 FD 43         mov [d], b
1076   0B13             ; --- END LOCAL VAR INITIALIZATION
1077   0B13             ; int input_len; 
1078   0B13 52 02 00      sub sp, 2
1079   0B16             ; unsigned char input_buffer[4]; 
1080   0B16 52 04 00      sub sp, 4
1081   0B19             ; unsigned char output_buffer[3]; 
1082   0B19 52 03 00      sub sp, 3
1083   0B1C             ; input_len = strlen(input); 
1084   0B1C FA F9 FF      lea d, [bp + -7] ; $input_len
1085   0B1F DA            push d
1086   0B20             ; --- START FUNCTION CALL
1087   0B20 FA 05 00      lea d, [bp + 5] ; $input
1088   0B23 2A            mov b, [d]
1089   0B24 38 00 00      mov c, 0
1090   0B27 FD AB         swp b
1091   0B29 D8            push b
1092   0B2A 07 13 1A      call strlen
1093   0B2D 51 02 00      add sp, 2
1094   0B30             ; --- END FUNCTION CALL
1095   0B30 E7            pop d
1096   0B31 FD 43         mov [d], b
1097   0B33             ; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1098   0B33             _while13_cond:
1099   0B33 FA F9 FF      lea d, [bp + -7] ; $input_len
1100   0B36 2A            mov b, [d]
1101   0B37 38 00 00      mov c, 0
1102   0B3A 11            mov a, b
1103   0B3B FD 7D         dec b
1104   0B3D FA F9 FF      lea d, [bp + -7] ; $input_len
1105   0B40 FD 43         mov [d], b
1106   0B42 27            mov b, a
1107   0B43             ; --- START LOGICAL AND
1108   0B43 D7            push a
1109   0B44 11            mov a, b
1110   0B45 FA 05 00      lea d, [bp + 5] ; $input
1111   0B48 FD 2A         mov d, [d]
1112   0B4A D7            push a
1113   0B4B DA            push d
1114   0B4C FA FB FF      lea d, [bp + -5] ; $k
1115   0B4F 2A            mov b, [d]
1116   0B50 38 00 00      mov c, 0
1117   0B53 E7            pop d
1118   0B54 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1119   0B58 E4            pop a
1120   0B59 32            mov bl, [d]
1121   0B5A A7 00         mov bh, 0
1122   0B5C 38 00 00      mov c, 0
1123   0B5F             ; --- START RELATIONAL
1124   0B5F D7            push a
1125   0B60 11            mov a, b
1126   0B61 FD 2E 3D 00   mov32 cb, $0000003d
1126   0B65 00 00 
1127   0B67 B0            cmp a, b
1128   0B68 FD 72         sneq ; !=
1129   0B6A E4            pop a
1130   0B6B             ; --- END RELATIONAL
1131   0B6B FD A7         sand a, b
1132   0B6D 11            mov a, b
1133   0B6E             ; --- START FUNCTION CALL
1134   0B6E FA 05 00      lea d, [bp + 5] ; $input
1135   0B71 FD 2A         mov d, [d]
1136   0B73 D7            push a
1137   0B74 DA            push d
1138   0B75 FA FB FF      lea d, [bp + -5] ; $k
1139   0B78 2A            mov b, [d]
1140   0B79 38 00 00      mov c, 0
1141   0B7C E7            pop d
1142   0B7D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1143   0B81 E4            pop a
1144   0B82 32            mov bl, [d]
1145   0B83 A7 00         mov bh, 0
1146   0B85 38 00 00      mov c, 0
1147   0B88 DD            push bl
1148   0B89 07 8F 09      call base64_char_value
1149   0B8C 51 01 00      add sp, 1
1150   0B8F             ; --- END FUNCTION CALL
1151   0B8F             ; --- START RELATIONAL
1152   0B8F D7            push a
1153   0B90 11            mov a, b
1154   0B91 FD 2E FF FF   mov32 cb, $ffffffff
1154   0B95 FF FF 
1155   0B97 B0            cmp a, b
1156   0B98 FD 72         sneq ; !=
1157   0B9A E4            pop a
1158   0B9B             ; --- END RELATIONAL
1159   0B9B FD A7         sand a, b
1160   0B9D E4            pop a
1161   0B9E             ; --- END LOGICAL AND
1162   0B9E C0 00 00      cmp b, 0
1163   0BA1 C6 0D 0E      je _while13_exit
1164   0BA4             _while13_block:
1165   0BA4             ; input_buffer[i++] = input[k++]; 
1166   0BA4 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1167   0BA7 D7            push a
1168   0BA8 DA            push d
1169   0BA9 FA FF FF      lea d, [bp + -1] ; $i
1170   0BAC 2A            mov b, [d]
1171   0BAD 38 00 00      mov c, 0
1172   0BB0 11            mov a, b
1173   0BB1 FD 77         inc b
1174   0BB3 FA FF FF      lea d, [bp + -1] ; $i
1175   0BB6 FD 43         mov [d], b
1176   0BB8 27            mov b, a
1177   0BB9 E7            pop d
1178   0BBA 5A            add d, b
1179   0BBB E4            pop a
1180   0BBC DA            push d
1181   0BBD FA 05 00      lea d, [bp + 5] ; $input
1182   0BC0 FD 2A         mov d, [d]
1183   0BC2 D7            push a
1184   0BC3 DA            push d
1185   0BC4 FA FB FF      lea d, [bp + -5] ; $k
1186   0BC7 2A            mov b, [d]
1187   0BC8 38 00 00      mov c, 0
1188   0BCB 11            mov a, b
1189   0BCC FD 77         inc b
1190   0BCE FA FB FF      lea d, [bp + -5] ; $k
1191   0BD1 FD 43         mov [d], b
1192   0BD3 27            mov b, a
1193   0BD4 E7            pop d
1194   0BD5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1195   0BD9 E4            pop a
1196   0BDA 32            mov bl, [d]
1197   0BDB A7 00         mov bh, 0
1198   0BDD 38 00 00      mov c, 0
1199   0BE0 E7            pop d
1200   0BE1 FD 3E         mov [d], bl
1201   0BE3             ; if (i == 4) { 
1202   0BE3             _if14_cond:
1203   0BE3 FA FF FF      lea d, [bp + -1] ; $i
1204   0BE6 2A            mov b, [d]
1205   0BE7 38 00 00      mov c, 0
1206   0BEA             ; --- START RELATIONAL
1207   0BEA D7            push a
1208   0BEB 11            mov a, b
1209   0BEC FD 2E 04 00   mov32 cb, $00000004
1209   0BF0 00 00 
1210   0BF2 B0            cmp a, b
1211   0BF3 FD 71         seq ; ==
1212   0BF5 E4            pop a
1213   0BF6             ; --- END RELATIONAL
1214   0BF6 C0 00 00      cmp b, 0
1215   0BF9 C6 0A 0E      je _if14_exit
1216   0BFC             _if14_TRUE:
1217   0BFC             ; for (i = 0; i < 4; i++) { 
1218   0BFC             _for15_init:
1219   0BFC FA FF FF      lea d, [bp + -1] ; $i
1220   0BFF DA            push d
1221   0C00 FD 2E 00 00   mov32 cb, $00000000
1221   0C04 00 00 
1222   0C06 E7            pop d
1223   0C07 FD 43         mov [d], b
1224   0C09             _for15_cond:
1225   0C09 FA FF FF      lea d, [bp + -1] ; $i
1226   0C0C 2A            mov b, [d]
1227   0C0D 38 00 00      mov c, 0
1228   0C10             ; --- START RELATIONAL
1229   0C10 D7            push a
1230   0C11 11            mov a, b
1231   0C12 FD 2E 04 00   mov32 cb, $00000004
1231   0C16 00 00 
1232   0C18 B0            cmp a, b
1233   0C19 FD 73         slt ; < (signed)
1234   0C1B E4            pop a
1235   0C1C             ; --- END RELATIONAL
1236   0C1C C0 00 00      cmp b, 0
1237   0C1F C6 64 0C      je _for15_exit
1238   0C22             _for15_block:
1239   0C22             ; input_buffer[i] = base64_char_value(input_buffer[i]); 
1240   0C22 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1241   0C25 D7            push a
1242   0C26 DA            push d
1243   0C27 FA FF FF      lea d, [bp + -1] ; $i
1244   0C2A 2A            mov b, [d]
1245   0C2B 38 00 00      mov c, 0
1246   0C2E E7            pop d
1247   0C2F 5A            add d, b
1248   0C30 E4            pop a
1249   0C31 DA            push d
1250   0C32             ; --- START FUNCTION CALL
1251   0C32 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1252   0C35 D7            push a
1253   0C36 DA            push d
1254   0C37 FA FF FF      lea d, [bp + -1] ; $i
1255   0C3A 2A            mov b, [d]
1256   0C3B 38 00 00      mov c, 0
1257   0C3E E7            pop d
1258   0C3F 5A            add d, b
1259   0C40 E4            pop a
1260   0C41 32            mov bl, [d]
1261   0C42 A7 00         mov bh, 0
1262   0C44 38 00 00      mov c, 0
1263   0C47 DD            push bl
1264   0C48 07 8F 09      call base64_char_value
1265   0C4B 51 01 00      add sp, 1
1266   0C4E             ; --- END FUNCTION CALL
1267   0C4E E7            pop d
1268   0C4F FD 3E         mov [d], bl
1269   0C51             _for15_update:
1270   0C51 FA FF FF      lea d, [bp + -1] ; $i
1271   0C54 2A            mov b, [d]
1272   0C55 38 00 00      mov c, 0
1273   0C58 11            mov a, b
1274   0C59 FD 77         inc b
1275   0C5B FA FF FF      lea d, [bp + -1] ; $i
1276   0C5E FD 43         mov [d], b
1277   0C60 27            mov b, a
1278   0C61 0A 09 0C      jmp _for15_cond
1279   0C64             _for15_exit:
1280   0C64             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1281   0C64 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1282   0C67 D7            push a
1283   0C68 DA            push d
1284   0C69 FD 2E 00 00   mov32 cb, $00000000
1284   0C6D 00 00 
1285   0C6F E7            pop d
1286   0C70 5A            add d, b
1287   0C71 E4            pop a
1288   0C72 DA            push d
1289   0C73 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1290   0C76 D7            push a
1291   0C77 DA            push d
1292   0C78 FD 2E 00 00   mov32 cb, $00000000
1292   0C7C 00 00 
1293   0C7E E7            pop d
1294   0C7F 5A            add d, b
1295   0C80 E4            pop a
1296   0C81 32            mov bl, [d]
1297   0C82 A7 00         mov bh, 0
1298   0C84 38 00 00      mov c, 0
1299   0C87             ; --- START SHIFT
1300   0C87 D7            push a
1301   0C88 11            mov a, b
1302   0C89 FD 2E 02 00   mov32 cb, $00000002
1302   0C8D 00 00 
1303   0C8F FD 39         mov c, b
1304   0C91 9D            shl a, cl
1305   0C92 27            mov b, a
1306   0C93 E4            pop a
1307   0C94             ; --- END SHIFT
1308   0C94             ; --- START TERMS
1309   0C94 D7            push a
1310   0C95 11            mov a, b
1311   0C96 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1312   0C99 D7            push a
1313   0C9A DA            push d
1314   0C9B FD 2E 01 00   mov32 cb, $00000001
1314   0C9F 00 00 
1315   0CA1 E7            pop d
1316   0CA2 5A            add d, b
1317   0CA3 E4            pop a
1318   0CA4 32            mov bl, [d]
1319   0CA5 A7 00         mov bh, 0
1320   0CA7 38 00 00      mov c, 0
1321   0CAA D7            push a
1322   0CAB 11            mov a, b
1323   0CAC FD 2E 30 00   mov32 cb, $00000030
1323   0CB0 00 00 
1324   0CB2 FD 92         and b, a ; &
1325   0CB4 E4            pop a
1326   0CB5             ; --- START SHIFT
1327   0CB5 D7            push a
1328   0CB6 11            mov a, b
1329   0CB7 FD 2E 04 00   mov32 cb, $00000004
1329   0CBB 00 00 
1330   0CBD FD 39         mov c, b
1331   0CBF A1            shr a, cl
1332   0CC0 27            mov b, a
1333   0CC1 E4            pop a
1334   0CC2             ; --- END SHIFT
1335   0CC2 56            add b, a
1336   0CC3 E4            pop a
1337   0CC4             ; --- END TERMS
1338   0CC4 E7            pop d
1339   0CC5 FD 3E         mov [d], bl
1340   0CC7             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1341   0CC7 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1342   0CCA D7            push a
1343   0CCB DA            push d
1344   0CCC FD 2E 01 00   mov32 cb, $00000001
1344   0CD0 00 00 
1345   0CD2 E7            pop d
1346   0CD3 5A            add d, b
1347   0CD4 E4            pop a
1348   0CD5 DA            push d
1349   0CD6 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1350   0CD9 D7            push a
1351   0CDA DA            push d
1352   0CDB FD 2E 01 00   mov32 cb, $00000001
1352   0CDF 00 00 
1353   0CE1 E7            pop d
1354   0CE2 5A            add d, b
1355   0CE3 E4            pop a
1356   0CE4 32            mov bl, [d]
1357   0CE5 A7 00         mov bh, 0
1358   0CE7 38 00 00      mov c, 0
1359   0CEA D7            push a
1360   0CEB 11            mov a, b
1361   0CEC FD 2E 0F 00   mov32 cb, $0000000f
1361   0CF0 00 00 
1362   0CF2 FD 92         and b, a ; &
1363   0CF4 E4            pop a
1364   0CF5             ; --- START SHIFT
1365   0CF5 D7            push a
1366   0CF6 11            mov a, b
1367   0CF7 FD 2E 04 00   mov32 cb, $00000004
1367   0CFB 00 00 
1368   0CFD FD 39         mov c, b
1369   0CFF 9D            shl a, cl
1370   0D00 27            mov b, a
1371   0D01 E4            pop a
1372   0D02             ; --- END SHIFT
1373   0D02             ; --- START TERMS
1374   0D02 D7            push a
1375   0D03 11            mov a, b
1376   0D04 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1377   0D07 D7            push a
1378   0D08 DA            push d
1379   0D09 FD 2E 02 00   mov32 cb, $00000002
1379   0D0D 00 00 
1380   0D0F E7            pop d
1381   0D10 5A            add d, b
1382   0D11 E4            pop a
1383   0D12 32            mov bl, [d]
1384   0D13 A7 00         mov bh, 0
1385   0D15 38 00 00      mov c, 0
1386   0D18 D7            push a
1387   0D19 11            mov a, b
1388   0D1A FD 2E 3C 00   mov32 cb, $0000003c
1388   0D1E 00 00 
1389   0D20 FD 92         and b, a ; &
1390   0D22 E4            pop a
1391   0D23             ; --- START SHIFT
1392   0D23 D7            push a
1393   0D24 11            mov a, b
1394   0D25 FD 2E 02 00   mov32 cb, $00000002
1394   0D29 00 00 
1395   0D2B FD 39         mov c, b
1396   0D2D A1            shr a, cl
1397   0D2E 27            mov b, a
1398   0D2F E4            pop a
1399   0D30             ; --- END SHIFT
1400   0D30 56            add b, a
1401   0D31 E4            pop a
1402   0D32             ; --- END TERMS
1403   0D32 E7            pop d
1404   0D33 FD 3E         mov [d], bl
1405   0D35             ; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
1406   0D35 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1407   0D38 D7            push a
1408   0D39 DA            push d
1409   0D3A FD 2E 02 00   mov32 cb, $00000002
1409   0D3E 00 00 
1410   0D40 E7            pop d
1411   0D41 5A            add d, b
1412   0D42 E4            pop a
1413   0D43 DA            push d
1414   0D44 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1415   0D47 D7            push a
1416   0D48 DA            push d
1417   0D49 FD 2E 02 00   mov32 cb, $00000002
1417   0D4D 00 00 
1418   0D4F E7            pop d
1419   0D50 5A            add d, b
1420   0D51 E4            pop a
1421   0D52 32            mov bl, [d]
1422   0D53 A7 00         mov bh, 0
1423   0D55 38 00 00      mov c, 0
1424   0D58 D7            push a
1425   0D59 11            mov a, b
1426   0D5A FD 2E 03 00   mov32 cb, $00000003
1426   0D5E 00 00 
1427   0D60 FD 92         and b, a ; &
1428   0D62 E4            pop a
1429   0D63             ; --- START SHIFT
1430   0D63 D7            push a
1431   0D64 11            mov a, b
1432   0D65 FD 2E 06 00   mov32 cb, $00000006
1432   0D69 00 00 
1433   0D6B FD 39         mov c, b
1434   0D6D 9D            shl a, cl
1435   0D6E 27            mov b, a
1436   0D6F E4            pop a
1437   0D70             ; --- END SHIFT
1438   0D70             ; --- START TERMS
1439   0D70 D7            push a
1440   0D71 11            mov a, b
1441   0D72 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1442   0D75 D7            push a
1443   0D76 DA            push d
1444   0D77 FD 2E 03 00   mov32 cb, $00000003
1444   0D7B 00 00 
1445   0D7D E7            pop d
1446   0D7E 5A            add d, b
1447   0D7F E4            pop a
1448   0D80 32            mov bl, [d]
1449   0D81 A7 00         mov bh, 0
1450   0D83 38 00 00      mov c, 0
1451   0D86 56            add b, a
1452   0D87 E4            pop a
1453   0D88             ; --- END TERMS
1454   0D88 E7            pop d
1455   0D89 FD 3E         mov [d], bl
1456   0D8B             ; for (i = 0; i < 3; i++) { 
1457   0D8B             _for16_init:
1458   0D8B FA FF FF      lea d, [bp + -1] ; $i
1459   0D8E DA            push d
1460   0D8F FD 2E 00 00   mov32 cb, $00000000
1460   0D93 00 00 
1461   0D95 E7            pop d
1462   0D96 FD 43         mov [d], b
1463   0D98             _for16_cond:
1464   0D98 FA FF FF      lea d, [bp + -1] ; $i
1465   0D9B 2A            mov b, [d]
1466   0D9C 38 00 00      mov c, 0
1467   0D9F             ; --- START RELATIONAL
1468   0D9F D7            push a
1469   0DA0 11            mov a, b
1470   0DA1 FD 2E 03 00   mov32 cb, $00000003
1470   0DA5 00 00 
1471   0DA7 B0            cmp a, b
1472   0DA8 FD 73         slt ; < (signed)
1473   0DAA E4            pop a
1474   0DAB             ; --- END RELATIONAL
1475   0DAB C0 00 00      cmp b, 0
1476   0DAE C6 FA 0D      je _for16_exit
1477   0DB1             _for16_block:
1478   0DB1             ; output[j++] = output_buffer[i]; 
1479   0DB1 FA 07 00      lea d, [bp + 7] ; $output
1480   0DB4 FD 2A         mov d, [d]
1481   0DB6 D7            push a
1482   0DB7 DA            push d
1483   0DB8 FA FD FF      lea d, [bp + -3] ; $j
1484   0DBB 2A            mov b, [d]
1485   0DBC 38 00 00      mov c, 0
1486   0DBF 11            mov a, b
1487   0DC0 FD 77         inc b
1488   0DC2 FA FD FF      lea d, [bp + -3] ; $j
1489   0DC5 FD 43         mov [d], b
1490   0DC7 27            mov b, a
1491   0DC8 E7            pop d
1492   0DC9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1493   0DCD E4            pop a
1494   0DCE DA            push d
1495   0DCF FA F2 FF      lea d, [bp + -14] ; $output_buffer
1496   0DD2 D7            push a
1497   0DD3 DA            push d
1498   0DD4 FA FF FF      lea d, [bp + -1] ; $i
1499   0DD7 2A            mov b, [d]
1500   0DD8 38 00 00      mov c, 0
1501   0DDB E7            pop d
1502   0DDC 5A            add d, b
1503   0DDD E4            pop a
1504   0DDE 32            mov bl, [d]
1505   0DDF A7 00         mov bh, 0
1506   0DE1 38 00 00      mov c, 0
1507   0DE4 E7            pop d
1508   0DE5 FD 3E         mov [d], bl
1509   0DE7             _for16_update:
1510   0DE7 FA FF FF      lea d, [bp + -1] ; $i
1511   0DEA 2A            mov b, [d]
1512   0DEB 38 00 00      mov c, 0
1513   0DEE 11            mov a, b
1514   0DEF FD 77         inc b
1515   0DF1 FA FF FF      lea d, [bp + -1] ; $i
1516   0DF4 FD 43         mov [d], b
1517   0DF6 27            mov b, a
1518   0DF7 0A 98 0D      jmp _for16_cond
1519   0DFA             _for16_exit:
1520   0DFA             ; i = 0; 
1521   0DFA FA FF FF      lea d, [bp + -1] ; $i
1522   0DFD DA            push d
1523   0DFE FD 2E 00 00   mov32 cb, $00000000
1523   0E02 00 00 
1524   0E04 E7            pop d
1525   0E05 FD 43         mov [d], b
1526   0E07 0A 0A 0E      jmp _if14_exit
1527   0E0A             _if14_exit:
1528   0E0A 0A 33 0B      jmp _while13_cond
1529   0E0D             _while13_exit:
1530   0E0D             ; if (i) { 
1531   0E0D             _if17_cond:
1532   0E0D FA FF FF      lea d, [bp + -1] ; $i
1533   0E10 2A            mov b, [d]
1534   0E11 38 00 00      mov c, 0
1535   0E14 C0 00 00      cmp b, 0
1536   0E17 C6 24 10      je _if17_exit
1537   0E1A             _if17_TRUE:
1538   0E1A             ; for (k = i; k < 4; k++) { 
1539   0E1A             _for18_init:
1540   0E1A FA FB FF      lea d, [bp + -5] ; $k
1541   0E1D DA            push d
1542   0E1E FA FF FF      lea d, [bp + -1] ; $i
1543   0E21 2A            mov b, [d]
1544   0E22 38 00 00      mov c, 0
1545   0E25 E7            pop d
1546   0E26 FD 43         mov [d], b
1547   0E28             _for18_cond:
1548   0E28 FA FB FF      lea d, [bp + -5] ; $k
1549   0E2B 2A            mov b, [d]
1550   0E2C 38 00 00      mov c, 0
1551   0E2F             ; --- START RELATIONAL
1552   0E2F D7            push a
1553   0E30 11            mov a, b
1554   0E31 FD 2E 04 00   mov32 cb, $00000004
1554   0E35 00 00 
1555   0E37 B0            cmp a, b
1556   0E38 FD 73         slt ; < (signed)
1557   0E3A E4            pop a
1558   0E3B             ; --- END RELATIONAL
1559   0E3B C0 00 00      cmp b, 0
1560   0E3E C6 6D 0E      je _for18_exit
1561   0E41             _for18_block:
1562   0E41             ; input_buffer[k] = 0; 
1563   0E41 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1564   0E44 D7            push a
1565   0E45 DA            push d
1566   0E46 FA FB FF      lea d, [bp + -5] ; $k
1567   0E49 2A            mov b, [d]
1568   0E4A 38 00 00      mov c, 0
1569   0E4D E7            pop d
1570   0E4E 5A            add d, b
1571   0E4F E4            pop a
1572   0E50 DA            push d
1573   0E51 FD 2E 00 00   mov32 cb, $00000000
1573   0E55 00 00 
1574   0E57 E7            pop d
1575   0E58 FD 3E         mov [d], bl
1576   0E5A             _for18_update:
1577   0E5A FA FB FF      lea d, [bp + -5] ; $k
1578   0E5D 2A            mov b, [d]
1579   0E5E 38 00 00      mov c, 0
1580   0E61 11            mov a, b
1581   0E62 FD 77         inc b
1582   0E64 FA FB FF      lea d, [bp + -5] ; $k
1583   0E67 FD 43         mov [d], b
1584   0E69 27            mov b, a
1585   0E6A 0A 28 0E      jmp _for18_cond
1586   0E6D             _for18_exit:
1587   0E6D             ; for (k = 0; k < 4; k++) { 
1588   0E6D             _for19_init:
1589   0E6D FA FB FF      lea d, [bp + -5] ; $k
1590   0E70 DA            push d
1591   0E71 FD 2E 00 00   mov32 cb, $00000000
1591   0E75 00 00 
1592   0E77 E7            pop d
1593   0E78 FD 43         mov [d], b
1594   0E7A             _for19_cond:
1595   0E7A FA FB FF      lea d, [bp + -5] ; $k
1596   0E7D 2A            mov b, [d]
1597   0E7E 38 00 00      mov c, 0
1598   0E81             ; --- START RELATIONAL
1599   0E81 D7            push a
1600   0E82 11            mov a, b
1601   0E83 FD 2E 04 00   mov32 cb, $00000004
1601   0E87 00 00 
1602   0E89 B0            cmp a, b
1603   0E8A FD 73         slt ; < (signed)
1604   0E8C E4            pop a
1605   0E8D             ; --- END RELATIONAL
1606   0E8D C0 00 00      cmp b, 0
1607   0E90 C6 D5 0E      je _for19_exit
1608   0E93             _for19_block:
1609   0E93             ; input_buffer[k] = base64_char_value(input_buffer[k]); 
1610   0E93 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1611   0E96 D7            push a
1612   0E97 DA            push d
1613   0E98 FA FB FF      lea d, [bp + -5] ; $k
1614   0E9B 2A            mov b, [d]
1615   0E9C 38 00 00      mov c, 0
1616   0E9F E7            pop d
1617   0EA0 5A            add d, b
1618   0EA1 E4            pop a
1619   0EA2 DA            push d
1620   0EA3             ; --- START FUNCTION CALL
1621   0EA3 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1622   0EA6 D7            push a
1623   0EA7 DA            push d
1624   0EA8 FA FB FF      lea d, [bp + -5] ; $k
1625   0EAB 2A            mov b, [d]
1626   0EAC 38 00 00      mov c, 0
1627   0EAF E7            pop d
1628   0EB0 5A            add d, b
1629   0EB1 E4            pop a
1630   0EB2 32            mov bl, [d]
1631   0EB3 A7 00         mov bh, 0
1632   0EB5 38 00 00      mov c, 0
1633   0EB8 DD            push bl
1634   0EB9 07 8F 09      call base64_char_value
1635   0EBC 51 01 00      add sp, 1
1636   0EBF             ; --- END FUNCTION CALL
1637   0EBF E7            pop d
1638   0EC0 FD 3E         mov [d], bl
1639   0EC2             _for19_update:
1640   0EC2 FA FB FF      lea d, [bp + -5] ; $k
1641   0EC5 2A            mov b, [d]
1642   0EC6 38 00 00      mov c, 0
1643   0EC9 11            mov a, b
1644   0ECA FD 77         inc b
1645   0ECC FA FB FF      lea d, [bp + -5] ; $k
1646   0ECF FD 43         mov [d], b
1647   0ED1 27            mov b, a
1648   0ED2 0A 7A 0E      jmp _for19_cond
1649   0ED5             _for19_exit:
1650   0ED5             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1651   0ED5 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1652   0ED8 D7            push a
1653   0ED9 DA            push d
1654   0EDA FD 2E 00 00   mov32 cb, $00000000
1654   0EDE 00 00 
1655   0EE0 E7            pop d
1656   0EE1 5A            add d, b
1657   0EE2 E4            pop a
1658   0EE3 DA            push d
1659   0EE4 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1660   0EE7 D7            push a
1661   0EE8 DA            push d
1662   0EE9 FD 2E 00 00   mov32 cb, $00000000
1662   0EED 00 00 
1663   0EEF E7            pop d
1664   0EF0 5A            add d, b
1665   0EF1 E4            pop a
1666   0EF2 32            mov bl, [d]
1667   0EF3 A7 00         mov bh, 0
1668   0EF5 38 00 00      mov c, 0
1669   0EF8             ; --- START SHIFT
1670   0EF8 D7            push a
1671   0EF9 11            mov a, b
1672   0EFA FD 2E 02 00   mov32 cb, $00000002
1672   0EFE 00 00 
1673   0F00 FD 39         mov c, b
1674   0F02 9D            shl a, cl
1675   0F03 27            mov b, a
1676   0F04 E4            pop a
1677   0F05             ; --- END SHIFT
1678   0F05             ; --- START TERMS
1679   0F05 D7            push a
1680   0F06 11            mov a, b
1681   0F07 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1682   0F0A D7            push a
1683   0F0B DA            push d
1684   0F0C FD 2E 01 00   mov32 cb, $00000001
1684   0F10 00 00 
1685   0F12 E7            pop d
1686   0F13 5A            add d, b
1687   0F14 E4            pop a
1688   0F15 32            mov bl, [d]
1689   0F16 A7 00         mov bh, 0
1690   0F18 38 00 00      mov c, 0
1691   0F1B D7            push a
1692   0F1C 11            mov a, b
1693   0F1D FD 2E 30 00   mov32 cb, $00000030
1693   0F21 00 00 
1694   0F23 FD 92         and b, a ; &
1695   0F25 E4            pop a
1696   0F26             ; --- START SHIFT
1697   0F26 D7            push a
1698   0F27 11            mov a, b
1699   0F28 FD 2E 04 00   mov32 cb, $00000004
1699   0F2C 00 00 
1700   0F2E FD 39         mov c, b
1701   0F30 A1            shr a, cl
1702   0F31 27            mov b, a
1703   0F32 E4            pop a
1704   0F33             ; --- END SHIFT
1705   0F33 56            add b, a
1706   0F34 E4            pop a
1707   0F35             ; --- END TERMS
1708   0F35 E7            pop d
1709   0F36 FD 3E         mov [d], bl
1710   0F38             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1711   0F38 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1712   0F3B D7            push a
1713   0F3C DA            push d
1714   0F3D FD 2E 01 00   mov32 cb, $00000001
1714   0F41 00 00 
1715   0F43 E7            pop d
1716   0F44 5A            add d, b
1717   0F45 E4            pop a
1718   0F46 DA            push d
1719   0F47 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1720   0F4A D7            push a
1721   0F4B DA            push d
1722   0F4C FD 2E 01 00   mov32 cb, $00000001
1722   0F50 00 00 
1723   0F52 E7            pop d
1724   0F53 5A            add d, b
1725   0F54 E4            pop a
1726   0F55 32            mov bl, [d]
1727   0F56 A7 00         mov bh, 0
1728   0F58 38 00 00      mov c, 0
1729   0F5B D7            push a
1730   0F5C 11            mov a, b
1731   0F5D FD 2E 0F 00   mov32 cb, $0000000f
1731   0F61 00 00 
1732   0F63 FD 92         and b, a ; &
1733   0F65 E4            pop a
1734   0F66             ; --- START SHIFT
1735   0F66 D7            push a
1736   0F67 11            mov a, b
1737   0F68 FD 2E 04 00   mov32 cb, $00000004
1737   0F6C 00 00 
1738   0F6E FD 39         mov c, b
1739   0F70 9D            shl a, cl
1740   0F71 27            mov b, a
1741   0F72 E4            pop a
1742   0F73             ; --- END SHIFT
1743   0F73             ; --- START TERMS
1744   0F73 D7            push a
1745   0F74 11            mov a, b
1746   0F75 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1747   0F78 D7            push a
1748   0F79 DA            push d
1749   0F7A FD 2E 02 00   mov32 cb, $00000002
1749   0F7E 00 00 
1750   0F80 E7            pop d
1751   0F81 5A            add d, b
1752   0F82 E4            pop a
1753   0F83 32            mov bl, [d]
1754   0F84 A7 00         mov bh, 0
1755   0F86 38 00 00      mov c, 0
1756   0F89 D7            push a
1757   0F8A 11            mov a, b
1758   0F8B FD 2E 3C 00   mov32 cb, $0000003c
1758   0F8F 00 00 
1759   0F91 FD 92         and b, a ; &
1760   0F93 E4            pop a
1761   0F94             ; --- START SHIFT
1762   0F94 D7            push a
1763   0F95 11            mov a, b
1764   0F96 FD 2E 02 00   mov32 cb, $00000002
1764   0F9A 00 00 
1765   0F9C FD 39         mov c, b
1766   0F9E A1            shr a, cl
1767   0F9F 27            mov b, a
1768   0FA0 E4            pop a
1769   0FA1             ; --- END SHIFT
1770   0FA1 56            add b, a
1771   0FA2 E4            pop a
1772   0FA3             ; --- END TERMS
1773   0FA3 E7            pop d
1774   0FA4 FD 3E         mov [d], bl
1775   0FA6             ; for (k = 0; k < i - 1; k++) { 
1776   0FA6             _for20_init:
1777   0FA6 FA FB FF      lea d, [bp + -5] ; $k
1778   0FA9 DA            push d
1779   0FAA FD 2E 00 00   mov32 cb, $00000000
1779   0FAE 00 00 
1780   0FB0 E7            pop d
1781   0FB1 FD 43         mov [d], b
1782   0FB3             _for20_cond:
1783   0FB3 FA FB FF      lea d, [bp + -5] ; $k
1784   0FB6 2A            mov b, [d]
1785   0FB7 38 00 00      mov c, 0
1786   0FBA             ; --- START RELATIONAL
1787   0FBA D7            push a
1788   0FBB 11            mov a, b
1789   0FBC FA FF FF      lea d, [bp + -1] ; $i
1790   0FBF 2A            mov b, [d]
1791   0FC0 38 00 00      mov c, 0
1792   0FC3             ; --- START TERMS
1793   0FC3 D7            push a
1794   0FC4 11            mov a, b
1795   0FC5 FD 2E 01 00   mov32 cb, $00000001
1795   0FC9 00 00 
1796   0FCB 60            sub a, b
1797   0FCC 27            mov b, a
1798   0FCD E4            pop a
1799   0FCE             ; --- END TERMS
1800   0FCE B0            cmp a, b
1801   0FCF FD 73         slt ; < (signed)
1802   0FD1 E4            pop a
1803   0FD2             ; --- END RELATIONAL
1804   0FD2 C0 00 00      cmp b, 0
1805   0FD5 C6 21 10      je _for20_exit
1806   0FD8             _for20_block:
1807   0FD8             ; output[j++] = output_buffer[k]; 
1808   0FD8 FA 07 00      lea d, [bp + 7] ; $output
1809   0FDB FD 2A         mov d, [d]
1810   0FDD D7            push a
1811   0FDE DA            push d
1812   0FDF FA FD FF      lea d, [bp + -3] ; $j
1813   0FE2 2A            mov b, [d]
1814   0FE3 38 00 00      mov c, 0
1815   0FE6 11            mov a, b
1816   0FE7 FD 77         inc b
1817   0FE9 FA FD FF      lea d, [bp + -3] ; $j
1818   0FEC FD 43         mov [d], b
1819   0FEE 27            mov b, a
1820   0FEF E7            pop d
1821   0FF0 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1822   0FF4 E4            pop a
1823   0FF5 DA            push d
1824   0FF6 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1825   0FF9 D7            push a
1826   0FFA DA            push d
1827   0FFB FA FB FF      lea d, [bp + -5] ; $k
1828   0FFE 2A            mov b, [d]
1829   0FFF 38 00 00      mov c, 0
1830   1002 E7            pop d
1831   1003 5A            add d, b
1832   1004 E4            pop a
1833   1005 32            mov bl, [d]
1834   1006 A7 00         mov bh, 0
1835   1008 38 00 00      mov c, 0
1836   100B E7            pop d
1837   100C FD 3E         mov [d], bl
1838   100E             _for20_update:
1839   100E FA FB FF      lea d, [bp + -5] ; $k
1840   1011 2A            mov b, [d]
1841   1012 38 00 00      mov c, 0
1842   1015 11            mov a, b
1843   1016 FD 77         inc b
1844   1018 FA FB FF      lea d, [bp + -5] ; $k
1845   101B FD 43         mov [d], b
1846   101D 27            mov b, a
1847   101E 0A B3 0F      jmp _for20_cond
1848   1021             _for20_exit:
1849   1021 0A 24 10      jmp _if17_exit
1850   1024             _if17_exit:
1851   1024             ; output[j] = '\0'; 
1852   1024 FA 07 00      lea d, [bp + 7] ; $output
1853   1027 FD 2A         mov d, [d]
1854   1029 D7            push a
1855   102A DA            push d
1856   102B FA FD FF      lea d, [bp + -3] ; $j
1857   102E 2A            mov b, [d]
1858   102F 38 00 00      mov c, 0
1859   1032 E7            pop d
1860   1033 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1861   1037 E4            pop a
1862   1038 DA            push d
1863   1039 FD 2E 00 00   mov32 cb, $00000000
1863   103D 00 00 
1864   103F E7            pop d
1865   1040 FD 3E         mov [d], bl
1866   1042 F9            leave
1867   1043 09            ret
1868   1044             
1869   1044             printf:
1870   1044 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1871   1047             ; char *p, *format_p; 
1872   1047 52 02 00      sub sp, 2
1873   104A 52 02 00      sub sp, 2
1874   104D             ; format_p = format; 
1875   104D FA FD FF      lea d, [bp + -3] ; $format_p
1876   1050 DA            push d
1877   1051 FA 05 00      lea d, [bp + 5] ; $format
1878   1054 2A            mov b, [d]
1879   1055 38 00 00      mov c, 0
1880   1058 E7            pop d
1881   1059 FD 43         mov [d], b
1882   105B             ; p = &format + 2; 
1883   105B FA FF FF      lea d, [bp + -1] ; $p
1884   105E DA            push d
1885   105F FA 05 00      lea d, [bp + 5] ; $format
1886   1062 2D            mov b, d
1887   1063             ; --- START TERMS
1888   1063 D7            push a
1889   1064 11            mov a, b
1890   1065 FD 2E 02 00   mov32 cb, $00000002
1890   1069 00 00 
1891   106B 56            add b, a
1892   106C E4            pop a
1893   106D             ; --- END TERMS
1894   106D E7            pop d
1895   106E FD 43         mov [d], b
1896   1070             ; for(;;){ 
1897   1070             _for21_init:
1898   1070             _for21_cond:
1899   1070             _for21_block:
1900   1070             ; if(!*format_p) break; 
1901   1070             _if22_cond:
1902   1070 FA FD FF      lea d, [bp + -3] ; $format_p
1903   1073 2A            mov b, [d]
1904   1074 38 00 00      mov c, 0
1905   1077 74            mov d, b
1906   1078 32            mov bl, [d]
1907   1079 A7 00         mov bh, 0
1908   107B 38 00 00      mov c, 0
1909   107E C0 00 00      cmp b, 0
1910   1081 FD 71         seq ; !
1911   1083 C0 00 00      cmp b, 0
1912   1086 C6 8F 10      je _if22_else
1913   1089             _if22_TRUE:
1914   1089             ; break; 
1915   1089 0A 3F 13      jmp _for21_exit ; for break
1916   108C 0A 3C 13      jmp _if22_exit
1917   108F             _if22_else:
1918   108F             ; if(*format_p == '%'){ 
1919   108F             _if23_cond:
1920   108F FA FD FF      lea d, [bp + -3] ; $format_p
1921   1092 2A            mov b, [d]
1922   1093 38 00 00      mov c, 0
1923   1096 74            mov d, b
1924   1097 32            mov bl, [d]
1925   1098 A7 00         mov bh, 0
1926   109A 38 00 00      mov c, 0
1927   109D             ; --- START RELATIONAL
1928   109D D7            push a
1929   109E 11            mov a, b
1930   109F FD 2E 25 00   mov32 cb, $00000025
1930   10A3 00 00 
1931   10A5 B0            cmp a, b
1932   10A6 FD 71         seq ; ==
1933   10A8 E4            pop a
1934   10A9             ; --- END RELATIONAL
1935   10A9 C0 00 00      cmp b, 0
1936   10AC C6 17 13      je _if23_else
1937   10AF             _if23_TRUE:
1938   10AF             ; format_p++; 
1939   10AF FA FD FF      lea d, [bp + -3] ; $format_p
1940   10B2 2A            mov b, [d]
1941   10B3 38 00 00      mov c, 0
1942   10B6 FD 77         inc b
1943   10B8 FA FD FF      lea d, [bp + -3] ; $format_p
1944   10BB FD 43         mov [d], b
1945   10BD FD 7D         dec b
1946   10BF             ; switch(*format_p){ 
1947   10BF             _switch24_expr:
1948   10BF FA FD FF      lea d, [bp + -3] ; $format_p
1949   10C2 2A            mov b, [d]
1950   10C3 38 00 00      mov c, 0
1951   10C6 74            mov d, b
1952   10C7 32            mov bl, [d]
1953   10C8 A7 00         mov bh, 0
1954   10CA 38 00 00      mov c, 0
1955   10CD             _switch24_comparisons:
1956   10CD C1 6C         cmp bl, $6c
1957   10CF C6 FB 10      je _switch24_case0
1958   10D2 C1 4C         cmp bl, $4c
1959   10D4 C6 FB 10      je _switch24_case1
1960   10D7 C1 64         cmp bl, $64
1961   10D9 C6 0B 12      je _switch24_case2
1962   10DC C1 69         cmp bl, $69
1963   10DE C6 0B 12      je _switch24_case3
1964   10E1 C1 75         cmp bl, $75
1965   10E3 C6 3B 12      je _switch24_case4
1966   10E6 C1 78         cmp bl, $78
1967   10E8 C6 6B 12      je _switch24_case5
1968   10EB C1 63         cmp bl, $63
1969   10ED C6 9B 12      je _switch24_case6
1970   10F0 C1 73         cmp bl, $73
1971   10F2 C6 CB 12      je _switch24_case7
1972   10F5 0A F8 12      jmp _switch24_default
1973   10F8 0A 04 13      jmp _switch24_exit
1974   10FB             _switch24_case0:
1975   10FB             _switch24_case1:
1976   10FB             ; format_p++; 
1977   10FB FA FD FF      lea d, [bp + -3] ; $format_p
1978   10FE 2A            mov b, [d]
1979   10FF 38 00 00      mov c, 0
1980   1102 FD 77         inc b
1981   1104 FA FD FF      lea d, [bp + -3] ; $format_p
1982   1107 FD 43         mov [d], b
1983   1109 FD 7D         dec b
1984   110B             ; if(*format_p == 'd' || *format_p == 'i') 
1985   110B             _if25_cond:
1986   110B FA FD FF      lea d, [bp + -3] ; $format_p
1987   110E 2A            mov b, [d]
1988   110F 38 00 00      mov c, 0
1989   1112 74            mov d, b
1990   1113 32            mov bl, [d]
1991   1114 A7 00         mov bh, 0
1992   1116 38 00 00      mov c, 0
1993   1119             ; --- START RELATIONAL
1994   1119 D7            push a
1995   111A 11            mov a, b
1996   111B FD 2E 64 00   mov32 cb, $00000064
1996   111F 00 00 
1997   1121 B0            cmp a, b
1998   1122 FD 71         seq ; ==
1999   1124 E4            pop a
2000   1125             ; --- END RELATIONAL
2001   1125             ; --- START LOGICAL OR
2002   1125 D7            push a
2003   1126 11            mov a, b
2004   1127 FA FD FF      lea d, [bp + -3] ; $format_p
2005   112A 2A            mov b, [d]
2006   112B 38 00 00      mov c, 0
2007   112E 74            mov d, b
2008   112F 32            mov bl, [d]
2009   1130 A7 00         mov bh, 0
2010   1132 38 00 00      mov c, 0
2011   1135             ; --- START RELATIONAL
2012   1135 D7            push a
2013   1136 11            mov a, b
2014   1137 FD 2E 69 00   mov32 cb, $00000069
2014   113B 00 00 
2015   113D B0            cmp a, b
2016   113E FD 71         seq ; ==
2017   1140 E4            pop a
2018   1141             ; --- END RELATIONAL
2019   1141 FD A8         sor a, b ; ||
2020   1143 E4            pop a
2021   1144             ; --- END LOGICAL OR
2022   1144 C0 00 00      cmp b, 0
2023   1147 C6 68 11      je _if25_else
2024   114A             _if25_TRUE:
2025   114A             ; print_signed_long(*(long *)p); 
2026   114A             ; --- START FUNCTION CALL
2027   114A FA FF FF      lea d, [bp + -1] ; $p
2028   114D 2A            mov b, [d]
2029   114E 38 00 00      mov c, 0
2030   1151 74            mov d, b
2031   1152 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2032   1155 FD 39         mov c, b ; And place it into C
2033   1157 2A            mov b, [d] ; Lower Word in B
2034   1158 12            mov a, c
2035   1159 FD AA         swp a
2036   115B D7            push a
2037   115C FD AB         swp b
2038   115E D8            push b
2039   115F 07 41 13      call print_signed_long
2040   1162 51 04 00      add sp, 4
2041   1165             ; --- END FUNCTION CALL
2042   1165 0A F0 11      jmp _if25_exit
2043   1168             _if25_else:
2044   1168             ; if(*format_p == 'u') 
2045   1168             _if26_cond:
2046   1168 FA FD FF      lea d, [bp + -3] ; $format_p
2047   116B 2A            mov b, [d]
2048   116C 38 00 00      mov c, 0
2049   116F 74            mov d, b
2050   1170 32            mov bl, [d]
2051   1171 A7 00         mov bh, 0
2052   1173 38 00 00      mov c, 0
2053   1176             ; --- START RELATIONAL
2054   1176 D7            push a
2055   1177 11            mov a, b
2056   1178 FD 2E 75 00   mov32 cb, $00000075
2056   117C 00 00 
2057   117E B0            cmp a, b
2058   117F FD 71         seq ; ==
2059   1181 E4            pop a
2060   1182             ; --- END RELATIONAL
2061   1182 C0 00 00      cmp b, 0
2062   1185 C6 A6 11      je _if26_else
2063   1188             _if26_TRUE:
2064   1188             ; print_unsigned_long(*(unsigned long *)p); 
2065   1188             ; --- START FUNCTION CALL
2066   1188 FA FF FF      lea d, [bp + -1] ; $p
2067   118B 2A            mov b, [d]
2068   118C 38 00 00      mov c, 0
2069   118F 74            mov d, b
2070   1190 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2071   1193 FD 39         mov c, b ; And place it into C
2072   1195 2A            mov b, [d] ; Lower Word in B
2073   1196 12            mov a, c
2074   1197 FD AA         swp a
2075   1199 D7            push a
2076   119A FD AB         swp b
2077   119C D8            push b
2078   119D 07 D7 14      call print_unsigned_long
2079   11A0 51 04 00      add sp, 4
2080   11A3             ; --- END FUNCTION CALL
2081   11A3 0A F0 11      jmp _if26_exit
2082   11A6             _if26_else:
2083   11A6             ; if(*format_p == 'x') 
2084   11A6             _if27_cond:
2085   11A6 FA FD FF      lea d, [bp + -3] ; $format_p
2086   11A9 2A            mov b, [d]
2087   11AA 38 00 00      mov c, 0
2088   11AD 74            mov d, b
2089   11AE 32            mov bl, [d]
2090   11AF A7 00         mov bh, 0
2091   11B1 38 00 00      mov c, 0
2092   11B4             ; --- START RELATIONAL
2093   11B4 D7            push a
2094   11B5 11            mov a, b
2095   11B6 FD 2E 78 00   mov32 cb, $00000078
2095   11BA 00 00 
2096   11BC B0            cmp a, b
2097   11BD FD 71         seq ; ==
2098   11BF E4            pop a
2099   11C0             ; --- END RELATIONAL
2100   11C0 C0 00 00      cmp b, 0
2101   11C3 C6 E4 11      je _if27_else
2102   11C6             _if27_TRUE:
2103   11C6             ; printx32(*(long int *)p); 
2104   11C6             ; --- START FUNCTION CALL
2105   11C6 FA FF FF      lea d, [bp + -1] ; $p
2106   11C9 2A            mov b, [d]
2107   11CA 38 00 00      mov c, 0
2108   11CD 74            mov d, b
2109   11CE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2110   11D1 FD 39         mov c, b ; And place it into C
2111   11D3 2A            mov b, [d] ; Lower Word in B
2112   11D4 12            mov a, c
2113   11D5 FD AA         swp a
2114   11D7 D7            push a
2115   11D8 FD AB         swp b
2116   11DA D8            push b
2117   11DB 07 0C 16      call printx32
2118   11DE 51 04 00      add sp, 4
2119   11E1             ; --- END FUNCTION CALL
2120   11E1 0A F0 11      jmp _if27_exit
2121   11E4             _if27_else:
2122   11E4             ; err("Unexpected format in printf."); 
2123   11E4             ; --- START FUNCTION CALL
2124   11E4 26 06 1B      mov b, _s3 ; "Unexpected format in printf."
2125   11E7 FD AB         swp b
2126   11E9 D8            push b
2127   11EA 07 6C 16      call err
2128   11ED 51 02 00      add sp, 2
2129   11F0             ; --- END FUNCTION CALL
2130   11F0             _if27_exit:
2131   11F0             _if26_exit:
2132   11F0             _if25_exit:
2133   11F0             ; p = p + 4; 
2134   11F0 FA FF FF      lea d, [bp + -1] ; $p
2135   11F3 DA            push d
2136   11F4 FA FF FF      lea d, [bp + -1] ; $p
2137   11F7 2A            mov b, [d]
2138   11F8 38 00 00      mov c, 0
2139   11FB             ; --- START TERMS
2140   11FB D7            push a
2141   11FC 11            mov a, b
2142   11FD FD 2E 04 00   mov32 cb, $00000004
2142   1201 00 00 
2143   1203 56            add b, a
2144   1204 E4            pop a
2145   1205             ; --- END TERMS
2146   1205 E7            pop d
2147   1206 FD 43         mov [d], b
2148   1208             ; break; 
2149   1208 0A 04 13      jmp _switch24_exit ; case break
2150   120B             _switch24_case2:
2151   120B             _switch24_case3:
2152   120B             ; print_signed(*(int*)p); 
2153   120B             ; --- START FUNCTION CALL
2154   120B FA FF FF      lea d, [bp + -1] ; $p
2155   120E 2A            mov b, [d]
2156   120F 38 00 00      mov c, 0
2157   1212 74            mov d, b
2158   1213 2A            mov b, [d]
2159   1214 38 00 00      mov c, 0
2160   1217 FD AB         swp b
2161   1219 D8            push b
2162   121A 07 9A 16      call print_signed
2163   121D 51 02 00      add sp, 2
2164   1220             ; --- END FUNCTION CALL
2165   1220             ; p = p + 2; 
2166   1220 FA FF FF      lea d, [bp + -1] ; $p
2167   1223 DA            push d
2168   1224 FA FF FF      lea d, [bp + -1] ; $p
2169   1227 2A            mov b, [d]
2170   1228 38 00 00      mov c, 0
2171   122B             ; --- START TERMS
2172   122B D7            push a
2173   122C 11            mov a, b
2174   122D FD 2E 02 00   mov32 cb, $00000002
2174   1231 00 00 
2175   1233 56            add b, a
2176   1234 E4            pop a
2177   1235             ; --- END TERMS
2178   1235 E7            pop d
2179   1236 FD 43         mov [d], b
2180   1238             ; break; 
2181   1238 0A 04 13      jmp _switch24_exit ; case break
2182   123B             _switch24_case4:
2183   123B             ; print_unsigned(*(unsigned int*)p); 
2184   123B             ; --- START FUNCTION CALL
2185   123B FA FF FF      lea d, [bp + -1] ; $p
2186   123E 2A            mov b, [d]
2187   123F 38 00 00      mov c, 0
2188   1242 74            mov d, b
2189   1243 2A            mov b, [d]
2190   1244 38 00 00      mov c, 0
2191   1247 FD AB         swp b
2192   1249 D8            push b
2193   124A 07 EB 17      call print_unsigned
2194   124D 51 02 00      add sp, 2
2195   1250             ; --- END FUNCTION CALL
2196   1250             ; p = p + 2; 
2197   1250 FA FF FF      lea d, [bp + -1] ; $p
2198   1253 DA            push d
2199   1254 FA FF FF      lea d, [bp + -1] ; $p
2200   1257 2A            mov b, [d]
2201   1258 38 00 00      mov c, 0
2202   125B             ; --- START TERMS
2203   125B D7            push a
2204   125C 11            mov a, b
2205   125D FD 2E 02 00   mov32 cb, $00000002
2205   1261 00 00 
2206   1263 56            add b, a
2207   1264 E4            pop a
2208   1265             ; --- END TERMS
2209   1265 E7            pop d
2210   1266 FD 43         mov [d], b
2211   1268             ; break; 
2212   1268 0A 04 13      jmp _switch24_exit ; case break
2213   126B             _switch24_case5:
2214   126B             ; printx16(*(int*)p); 
2215   126B             ; --- START FUNCTION CALL
2216   126B FA FF FF      lea d, [bp + -1] ; $p
2217   126E 2A            mov b, [d]
2218   126F 38 00 00      mov c, 0
2219   1272 74            mov d, b
2220   1273 2A            mov b, [d]
2221   1274 38 00 00      mov c, 0
2222   1277 FD AB         swp b
2223   1279 D8            push b
2224   127A 07 03 19      call printx16
2225   127D 51 02 00      add sp, 2
2226   1280             ; --- END FUNCTION CALL
2227   1280             ; p = p + 2; 
2228   1280 FA FF FF      lea d, [bp + -1] ; $p
2229   1283 DA            push d
2230   1284 FA FF FF      lea d, [bp + -1] ; $p
2231   1287 2A            mov b, [d]
2232   1288 38 00 00      mov c, 0
2233   128B             ; --- START TERMS
2234   128B D7            push a
2235   128C 11            mov a, b
2236   128D FD 2E 02 00   mov32 cb, $00000002
2236   1291 00 00 
2237   1293 56            add b, a
2238   1294 E4            pop a
2239   1295             ; --- END TERMS
2240   1295 E7            pop d
2241   1296 FD 43         mov [d], b
2242   1298             ; break; 
2243   1298 0A 04 13      jmp _switch24_exit ; case break
2244   129B             _switch24_case6:
2245   129B             ; putchar(*(char*)p); 
2246   129B             ; --- START FUNCTION CALL
2247   129B FA FF FF      lea d, [bp + -1] ; $p
2248   129E 2A            mov b, [d]
2249   129F 38 00 00      mov c, 0
2250   12A2 74            mov d, b
2251   12A3 32            mov bl, [d]
2252   12A4 A7 00         mov bh, 0
2253   12A6 38 00 00      mov c, 0
2254   12A9 DD            push bl
2255   12AA 07 C9 14      call putchar
2256   12AD 51 01 00      add sp, 1
2257   12B0             ; --- END FUNCTION CALL
2258   12B0             ; p = p + 1; 
2259   12B0 FA FF FF      lea d, [bp + -1] ; $p
2260   12B3 DA            push d
2261   12B4 FA FF FF      lea d, [bp + -1] ; $p
2262   12B7 2A            mov b, [d]
2263   12B8 38 00 00      mov c, 0
2264   12BB             ; --- START TERMS
2265   12BB D7            push a
2266   12BC 11            mov a, b
2267   12BD FD 2E 01 00   mov32 cb, $00000001
2267   12C1 00 00 
2268   12C3 56            add b, a
2269   12C4 E4            pop a
2270   12C5             ; --- END TERMS
2271   12C5 E7            pop d
2272   12C6 FD 43         mov [d], b
2273   12C8             ; break; 
2274   12C8 0A 04 13      jmp _switch24_exit ; case break
2275   12CB             _switch24_case7:
2276   12CB             ; print(*(char**)p); 
2277   12CB             ; --- START FUNCTION CALL
2278   12CB FA FF FF      lea d, [bp + -1] ; $p
2279   12CE 2A            mov b, [d]
2280   12CF 38 00 00      mov c, 0
2281   12D2 74            mov d, b
2282   12D3 2A            mov b, [d]
2283   12D4 FD AB         swp b
2284   12D6 D8            push b
2285   12D7 07 81 16      call print
2286   12DA 51 02 00      add sp, 2
2287   12DD             ; --- END FUNCTION CALL
2288   12DD             ; p = p + 2; 
2289   12DD FA FF FF      lea d, [bp + -1] ; $p
2290   12E0 DA            push d
2291   12E1 FA FF FF      lea d, [bp + -1] ; $p
2292   12E4 2A            mov b, [d]
2293   12E5 38 00 00      mov c, 0
2294   12E8             ; --- START TERMS
2295   12E8 D7            push a
2296   12E9 11            mov a, b
2297   12EA FD 2E 02 00   mov32 cb, $00000002
2297   12EE 00 00 
2298   12F0 56            add b, a
2299   12F1 E4            pop a
2300   12F2             ; --- END TERMS
2301   12F2 E7            pop d
2302   12F3 FD 43         mov [d], b
2303   12F5             ; break; 
2304   12F5 0A 04 13      jmp _switch24_exit ; case break
2305   12F8             _switch24_default:
2306   12F8             ; print("Error: Unknown argument type.\n"); 
2307   12F8             ; --- START FUNCTION CALL
2308   12F8 26 23 1B      mov b, _s4 ; "Error: Unknown argument type.\n"
2309   12FB FD AB         swp b
2310   12FD D8            push b
2311   12FE 07 81 16      call print
2312   1301 51 02 00      add sp, 2
2313   1304             ; --- END FUNCTION CALL
2314   1304             _switch24_exit:
2315   1304             ; format_p++; 
2316   1304 FA FD FF      lea d, [bp + -3] ; $format_p
2317   1307 2A            mov b, [d]
2318   1308 38 00 00      mov c, 0
2319   130B FD 77         inc b
2320   130D FA FD FF      lea d, [bp + -3] ; $format_p
2321   1310 FD 43         mov [d], b
2322   1312 FD 7D         dec b
2323   1314 0A 3C 13      jmp _if23_exit
2324   1317             _if23_else:
2325   1317             ; putchar(*format_p); 
2326   1317             ; --- START FUNCTION CALL
2327   1317 FA FD FF      lea d, [bp + -3] ; $format_p
2328   131A 2A            mov b, [d]
2329   131B 38 00 00      mov c, 0
2330   131E 74            mov d, b
2331   131F 32            mov bl, [d]
2332   1320 A7 00         mov bh, 0
2333   1322 38 00 00      mov c, 0
2334   1325 DD            push bl
2335   1326 07 C9 14      call putchar
2336   1329 51 01 00      add sp, 1
2337   132C             ; --- END FUNCTION CALL
2338   132C             ; format_p++; 
2339   132C FA FD FF      lea d, [bp + -3] ; $format_p
2340   132F 2A            mov b, [d]
2341   1330 38 00 00      mov c, 0
2342   1333 FD 77         inc b
2343   1335 FA FD FF      lea d, [bp + -3] ; $format_p
2344   1338 FD 43         mov [d], b
2345   133A FD 7D         dec b
2346   133C             _if23_exit:
2347   133C             _if22_exit:
2348   133C             _for21_update:
2349   133C 0A 70 10      jmp _for21_cond
2350   133F             _for21_exit:
2351   133F F9            leave
2352   1340 09            ret
2353   1341             
2354   1341             print_signed_long:
2355   1341 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2356   1344             ; char digits[10]; 
2357   1344 52 0A 00      sub sp, 10
2358   1347             ; int i = 0; 
2359   1347 52 02 00      sub sp, 2
2360   134A             ; --- START LOCAL VAR INITIALIZATION
2361   134A FA F5 FF      lea d, [bp + -11] ; $i
2362   134D DA            push d
2363   134E FD 2E 00 00   mov32 cb, $00000000
2363   1352 00 00 
2364   1354 E7            pop d
2365   1355 FD 43         mov [d], b
2366   1357             ; --- END LOCAL VAR INITIALIZATION
2367   1357             ; if (num < 0) { 
2368   1357             _if28_cond:
2369   1357 FA 05 00      lea d, [bp + 5] ; $num
2370   135A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2371   135D FD 39         mov c, b ; And place it into C
2372   135F 2A            mov b, [d] ; Lower Word in B
2373   1360             ; --- START RELATIONAL
2374   1360 D7            push a
2375   1361 FD D8         push g
2376   1363 11            mov a, b
2377   1364 FD 7A         mov g, c
2378   1366 FD 2E 00 00   mov32 cb, $00000000
2378   136A 00 00 
2379   136C FD AF         cmp32 ga, cb
2380   136E FD 73         slt ; <
2381   1370 FD F1         pop g
2382   1372 E4            pop a
2383   1373             ; --- END RELATIONAL
2384   1373 C0 00 00      cmp b, 0
2385   1376 C6 AA 13      je _if28_else
2386   1379             _if28_TRUE:
2387   1379             ; putchar('-'); 
2388   1379             ; --- START FUNCTION CALL
2389   1379 FD 2E 2D 00   mov32 cb, $0000002d
2389   137D 00 00 
2390   137F DD            push bl
2391   1380 07 C9 14      call putchar
2392   1383 51 01 00      add sp, 1
2393   1386             ; --- END FUNCTION CALL
2394   1386             ; num = -num; 
2395   1386 FA 05 00      lea d, [bp + 5] ; $num
2396   1389 DA            push d
2397   138A FA 05 00      lea d, [bp + 5] ; $num
2398   138D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2399   1390 FD 39         mov c, b ; And place it into C
2400   1392 2A            mov b, [d] ; Lower Word in B
2401   1393 12            mov a, c
2402   1394 95            not a
2403   1395 97            not b
2404   1396 55 01 00      add b, 1
2405   1399 5B 00 00      adc a, 0
2406   139C 39            mov c, a
2407   139D E7            pop d
2408   139E FD 43         mov [d], b
2409   13A0 26 00 00      mov b, 0
2410   13A3 FD 44 02 00   mov [d + 2], b
2411   13A7 0A DE 13      jmp _if28_exit
2412   13AA             _if28_else:
2413   13AA             ; if (num == 0) { 
2414   13AA             _if29_cond:
2415   13AA FA 05 00      lea d, [bp + 5] ; $num
2416   13AD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2417   13B0 FD 39         mov c, b ; And place it into C
2418   13B2 2A            mov b, [d] ; Lower Word in B
2419   13B3             ; --- START RELATIONAL
2420   13B3 D7            push a
2421   13B4 FD D8         push g
2422   13B6 11            mov a, b
2423   13B7 FD 7A         mov g, c
2424   13B9 FD 2E 00 00   mov32 cb, $00000000
2424   13BD 00 00 
2425   13BF FD AF         cmp32 ga, cb
2426   13C1 FD 71         seq ; ==
2427   13C3 FD F1         pop g
2428   13C5 E4            pop a
2429   13C6             ; --- END RELATIONAL
2430   13C6 C0 00 00      cmp b, 0
2431   13C9 C6 DE 13      je _if29_exit
2432   13CC             _if29_TRUE:
2433   13CC             ; putchar('0'); 
2434   13CC             ; --- START FUNCTION CALL
2435   13CC FD 2E 30 00   mov32 cb, $00000030
2435   13D0 00 00 
2436   13D2 DD            push bl
2437   13D3 07 C9 14      call putchar
2438   13D6 51 01 00      add sp, 1
2439   13D9             ; --- END FUNCTION CALL
2440   13D9             ; return; 
2441   13D9 F9            leave
2442   13DA 09            ret
2443   13DB 0A DE 13      jmp _if29_exit
2444   13DE             _if29_exit:
2445   13DE             _if28_exit:
2446   13DE             ; while (num > 0) { 
2447   13DE             _while30_cond:
2448   13DE FA 05 00      lea d, [bp + 5] ; $num
2449   13E1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2450   13E4 FD 39         mov c, b ; And place it into C
2451   13E6 2A            mov b, [d] ; Lower Word in B
2452   13E7             ; --- START RELATIONAL
2453   13E7 D7            push a
2454   13E8 FD D8         push g
2455   13EA 11            mov a, b
2456   13EB FD 7A         mov g, c
2457   13ED FD 2E 00 00   mov32 cb, $00000000
2457   13F1 00 00 
2458   13F3 FD AF         cmp32 ga, cb
2459   13F5 FD 7F         sgt
2460   13F7 FD F1         pop g
2461   13F9 E4            pop a
2462   13FA             ; --- END RELATIONAL
2463   13FA C0 00 00      cmp b, 0
2464   13FD C6 7F 14      je _while30_exit
2465   1400             _while30_block:
2466   1400             ; digits[i] = '0' + (num % 10); 
2467   1400 FA F7 FF      lea d, [bp + -9] ; $digits
2468   1403 D7            push a
2469   1404 DA            push d
2470   1405 FA F5 FF      lea d, [bp + -11] ; $i
2471   1408 2A            mov b, [d]
2472   1409 38 00 00      mov c, 0
2473   140C E7            pop d
2474   140D 5A            add d, b
2475   140E E4            pop a
2476   140F DA            push d
2477   1410 FD 2E 30 00   mov32 cb, $00000030
2477   1414 00 00 
2478   1416             ; --- START TERMS
2479   1416 D7            push a
2480   1417 11            mov a, b
2481   1418 FA 05 00      lea d, [bp + 5] ; $num
2482   141B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2483   141E FD 39         mov c, b ; And place it into C
2484   1420 2A            mov b, [d] ; Lower Word in B
2485   1421             ; --- START FACTORS
2486   1421 D7            push a
2487   1422 FD D8         push g
2488   1424 11            mov a, b
2489   1425 FD 7A         mov g, c
2490   1427 FD 2E 0A 00   mov32 cb, $0000000a
2490   142B 00 00 
2491   142D FD D8         push g ; save 'g' as the div instruction uses it
2492   142F AE            div a, b ; %, a: quotient, b: remainder
2493   1430 11            mov a, b
2494   1431 FD F1         pop g
2495   1433 FD 38         mov c, g
2496   1435 27            mov b, a
2497   1436 FD F1         pop g
2498   1438 E4            pop a
2499   1439             ; --- END FACTORS
2500   1439 56            add b, a
2501   143A E4            pop a
2502   143B             ; --- END TERMS
2503   143B E7            pop d
2504   143C FD 3E         mov [d], bl
2505   143E             ; num = num / 10; 
2506   143E FA 05 00      lea d, [bp + 5] ; $num
2507   1441 DA            push d
2508   1442 FA 05 00      lea d, [bp + 5] ; $num
2509   1445 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2510   1448 FD 39         mov c, b ; And place it into C
2511   144A 2A            mov b, [d] ; Lower Word in B
2512   144B             ; --- START FACTORS
2513   144B D7            push a
2514   144C FD D8         push g
2515   144E 11            mov a, b
2516   144F FD 7A         mov g, c
2517   1451 FD 2E 0A 00   mov32 cb, $0000000a
2517   1455 00 00 
2518   1457 FD D8         push g ; save 'g' as the div instruction uses it
2519   1459 AE            div a, b ; /, a: quotient, b: remainder
2520   145A FD F1         pop g
2521   145C FD 38         mov c, g
2522   145E 27            mov b, a
2523   145F FD F1         pop g
2524   1461 E4            pop a
2525   1462             ; --- END FACTORS
2526   1462 E7            pop d
2527   1463 FD 43         mov [d], b
2528   1465 26 00 00      mov b, 0
2529   1468 FD 44 02 00   mov [d + 2], b
2530   146C             ; i++; 
2531   146C FA F5 FF      lea d, [bp + -11] ; $i
2532   146F 2A            mov b, [d]
2533   1470 38 00 00      mov c, 0
2534   1473 11            mov a, b
2535   1474 FD 77         inc b
2536   1476 FA F5 FF      lea d, [bp + -11] ; $i
2537   1479 FD 43         mov [d], b
2538   147B 27            mov b, a
2539   147C 0A DE 13      jmp _while30_cond
2540   147F             _while30_exit:
2541   147F             ; while (i > 0) { 
2542   147F             _while37_cond:
2543   147F FA F5 FF      lea d, [bp + -11] ; $i
2544   1482 2A            mov b, [d]
2545   1483 38 00 00      mov c, 0
2546   1486             ; --- START RELATIONAL
2547   1486 D7            push a
2548   1487 11            mov a, b
2549   1488 FD 2E 00 00   mov32 cb, $00000000
2549   148C 00 00 
2550   148E B0            cmp a, b
2551   148F FD 7F         sgt ; >
2552   1491 E4            pop a
2553   1492             ; --- END RELATIONAL
2554   1492 C0 00 00      cmp b, 0
2555   1495 C6 C7 14      je _while37_exit
2556   1498             _while37_block:
2557   1498             ; i--; 
2558   1498 FA F5 FF      lea d, [bp + -11] ; $i
2559   149B 2A            mov b, [d]
2560   149C 38 00 00      mov c, 0
2561   149F 11            mov a, b
2562   14A0 FD 7D         dec b
2563   14A2 FA F5 FF      lea d, [bp + -11] ; $i
2564   14A5 FD 43         mov [d], b
2565   14A7 27            mov b, a
2566   14A8             ; putchar(digits[i]); 
2567   14A8             ; --- START FUNCTION CALL
2568   14A8 FA F7 FF      lea d, [bp + -9] ; $digits
2569   14AB D7            push a
2570   14AC DA            push d
2571   14AD FA F5 FF      lea d, [bp + -11] ; $i
2572   14B0 2A            mov b, [d]
2573   14B1 38 00 00      mov c, 0
2574   14B4 E7            pop d
2575   14B5 5A            add d, b
2576   14B6 E4            pop a
2577   14B7 32            mov bl, [d]
2578   14B8 A7 00         mov bh, 0
2579   14BA 38 00 00      mov c, 0
2580   14BD DD            push bl
2581   14BE 07 C9 14      call putchar
2582   14C1 51 01 00      add sp, 1
2583   14C4             ; --- END FUNCTION CALL
2584   14C4 0A 7F 14      jmp _while37_cond
2585   14C7             _while37_exit:
2586   14C7 F9            leave
2587   14C8 09            ret
2588   14C9             
2589   14C9             putchar:
2590   14C9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2591   14CC             ; --- BEGIN INLINE ASM SEGMENT
2592   14CC FA 05 00      lea d, [bp + 5] ; $c
2593   14CF 1E            mov al, [d]
2594   14D0 23            mov ah, al
2595   14D1 19 00         mov al, 0
2596   14D3 05 03         syscall sys_io      ; char in AH
2597   14D5             ; --- END INLINE ASM SEGMENT
2598   14D5 F9            leave
2599   14D6 09            ret
2600   14D7             
2601   14D7             print_unsigned_long:
2602   14D7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2603   14DA             ; char digits[10]; 
2604   14DA 52 0A 00      sub sp, 10
2605   14DD             ; int i; 
2606   14DD 52 02 00      sub sp, 2
2607   14E0             ; i = 0; 
2608   14E0 FA F5 FF      lea d, [bp + -11] ; $i
2609   14E3 DA            push d
2610   14E4 FD 2E 00 00   mov32 cb, $00000000
2610   14E8 00 00 
2611   14EA E7            pop d
2612   14EB FD 43         mov [d], b
2613   14ED             ; if(num == 0){ 
2614   14ED             _if38_cond:
2615   14ED FA 05 00      lea d, [bp + 5] ; $num
2616   14F0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2617   14F3 FD 39         mov c, b ; And place it into C
2618   14F5 2A            mov b, [d] ; Lower Word in B
2619   14F6             ; --- START RELATIONAL
2620   14F6 D7            push a
2621   14F7 FD D8         push g
2622   14F9 11            mov a, b
2623   14FA FD 7A         mov g, c
2624   14FC FD 2E 00 00   mov32 cb, $00000000
2624   1500 00 00 
2625   1502 FD AF         cmp32 ga, cb
2626   1504 FD 71         seq ; ==
2627   1506 FD F1         pop g
2628   1508 E4            pop a
2629   1509             ; --- END RELATIONAL
2630   1509 C0 00 00      cmp b, 0
2631   150C C6 21 15      je _if38_exit
2632   150F             _if38_TRUE:
2633   150F             ; putchar('0'); 
2634   150F             ; --- START FUNCTION CALL
2635   150F FD 2E 30 00   mov32 cb, $00000030
2635   1513 00 00 
2636   1515 DD            push bl
2637   1516 07 C9 14      call putchar
2638   1519 51 01 00      add sp, 1
2639   151C             ; --- END FUNCTION CALL
2640   151C             ; return; 
2641   151C F9            leave
2642   151D 09            ret
2643   151E 0A 21 15      jmp _if38_exit
2644   1521             _if38_exit:
2645   1521             ; while (num > 0) { 
2646   1521             _while39_cond:
2647   1521 FA 05 00      lea d, [bp + 5] ; $num
2648   1524 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2649   1527 FD 39         mov c, b ; And place it into C
2650   1529 2A            mov b, [d] ; Lower Word in B
2651   152A             ; --- START RELATIONAL
2652   152A D7            push a
2653   152B FD D8         push g
2654   152D 11            mov a, b
2655   152E FD 7A         mov g, c
2656   1530 FD 2E 00 00   mov32 cb, $00000000
2656   1534 00 00 
2657   1536 FD AF         cmp32 ga, cb
2658   1538 FD 81         sgu
2659   153A FD F1         pop g
2660   153C E4            pop a
2661   153D             ; --- END RELATIONAL
2662   153D C0 00 00      cmp b, 0
2663   1540 C6 C2 15      je _while39_exit
2664   1543             _while39_block:
2665   1543             ; digits[i] = '0' + (num % 10); 
2666   1543 FA F7 FF      lea d, [bp + -9] ; $digits
2667   1546 D7            push a
2668   1547 DA            push d
2669   1548 FA F5 FF      lea d, [bp + -11] ; $i
2670   154B 2A            mov b, [d]
2671   154C 38 00 00      mov c, 0
2672   154F E7            pop d
2673   1550 5A            add d, b
2674   1551 E4            pop a
2675   1552 DA            push d
2676   1553 FD 2E 30 00   mov32 cb, $00000030
2676   1557 00 00 
2677   1559             ; --- START TERMS
2678   1559 D7            push a
2679   155A 11            mov a, b
2680   155B FA 05 00      lea d, [bp + 5] ; $num
2681   155E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2682   1561 FD 39         mov c, b ; And place it into C
2683   1563 2A            mov b, [d] ; Lower Word in B
2684   1564             ; --- START FACTORS
2685   1564 D7            push a
2686   1565 FD D8         push g
2687   1567 11            mov a, b
2688   1568 FD 7A         mov g, c
2689   156A FD 2E 0A 00   mov32 cb, $0000000a
2689   156E 00 00 
2690   1570 FD D8         push g ; save 'g' as the div instruction uses it
2691   1572 AE            div a, b ; %, a: quotient, b: remainder
2692   1573 11            mov a, b
2693   1574 FD F1         pop g
2694   1576 FD 38         mov c, g
2695   1578 27            mov b, a
2696   1579 FD F1         pop g
2697   157B E4            pop a
2698   157C             ; --- END FACTORS
2699   157C 56            add b, a
2700   157D E4            pop a
2701   157E             ; --- END TERMS
2702   157E E7            pop d
2703   157F FD 3E         mov [d], bl
2704   1581             ; num = num / 10; 
2705   1581 FA 05 00      lea d, [bp + 5] ; $num
2706   1584 DA            push d
2707   1585 FA 05 00      lea d, [bp + 5] ; $num
2708   1588 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2709   158B FD 39         mov c, b ; And place it into C
2710   158D 2A            mov b, [d] ; Lower Word in B
2711   158E             ; --- START FACTORS
2712   158E D7            push a
2713   158F FD D8         push g
2714   1591 11            mov a, b
2715   1592 FD 7A         mov g, c
2716   1594 FD 2E 0A 00   mov32 cb, $0000000a
2716   1598 00 00 
2717   159A FD D8         push g ; save 'g' as the div instruction uses it
2718   159C AE            div a, b ; /, a: quotient, b: remainder
2719   159D FD F1         pop g
2720   159F FD 38         mov c, g
2721   15A1 27            mov b, a
2722   15A2 FD F1         pop g
2723   15A4 E4            pop a
2724   15A5             ; --- END FACTORS
2725   15A5 E7            pop d
2726   15A6 FD 43         mov [d], b
2727   15A8 26 00 00      mov b, 0
2728   15AB FD 44 02 00   mov [d + 2], b
2729   15AF             ; i++; 
2730   15AF FA F5 FF      lea d, [bp + -11] ; $i
2731   15B2 2A            mov b, [d]
2732   15B3 38 00 00      mov c, 0
2733   15B6 11            mov a, b
2734   15B7 FD 77         inc b
2735   15B9 FA F5 FF      lea d, [bp + -11] ; $i
2736   15BC FD 43         mov [d], b
2737   15BE 27            mov b, a
2738   15BF 0A 21 15      jmp _while39_cond
2739   15C2             _while39_exit:
2740   15C2             ; while (i > 0) { 
2741   15C2             _while46_cond:
2742   15C2 FA F5 FF      lea d, [bp + -11] ; $i
2743   15C5 2A            mov b, [d]
2744   15C6 38 00 00      mov c, 0
2745   15C9             ; --- START RELATIONAL
2746   15C9 D7            push a
2747   15CA 11            mov a, b
2748   15CB FD 2E 00 00   mov32 cb, $00000000
2748   15CF 00 00 
2749   15D1 B0            cmp a, b
2750   15D2 FD 7F         sgt ; >
2751   15D4 E4            pop a
2752   15D5             ; --- END RELATIONAL
2753   15D5 C0 00 00      cmp b, 0
2754   15D8 C6 0A 16      je _while46_exit
2755   15DB             _while46_block:
2756   15DB             ; i--; 
2757   15DB FA F5 FF      lea d, [bp + -11] ; $i
2758   15DE 2A            mov b, [d]
2759   15DF 38 00 00      mov c, 0
2760   15E2 11            mov a, b
2761   15E3 FD 7D         dec b
2762   15E5 FA F5 FF      lea d, [bp + -11] ; $i
2763   15E8 FD 43         mov [d], b
2764   15EA 27            mov b, a
2765   15EB             ; putchar(digits[i]); 
2766   15EB             ; --- START FUNCTION CALL
2767   15EB FA F7 FF      lea d, [bp + -9] ; $digits
2768   15EE D7            push a
2769   15EF DA            push d
2770   15F0 FA F5 FF      lea d, [bp + -11] ; $i
2771   15F3 2A            mov b, [d]
2772   15F4 38 00 00      mov c, 0
2773   15F7 E7            pop d
2774   15F8 5A            add d, b
2775   15F9 E4            pop a
2776   15FA 32            mov bl, [d]
2777   15FB A7 00         mov bh, 0
2778   15FD 38 00 00      mov c, 0
2779   1600 DD            push bl
2780   1601 07 C9 14      call putchar
2781   1604 51 01 00      add sp, 1
2782   1607             ; --- END FUNCTION CALL
2783   1607 0A C2 15      jmp _while46_cond
2784   160A             _while46_exit:
2785   160A F9            leave
2786   160B 09            ret
2787   160C             
2788   160C             printx32:
2789   160C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2790   160F             ; --- BEGIN INLINE ASM SEGMENT
2791   160F FA 05 00      lea d, [bp + 5] ; $hex
2792   1612 2B 02 00      mov b, [d+2]
2793   1615 07 1E 16      call print_u16x_printx32
2794   1618 2A            mov b, [d]
2795   1619 07 1E 16      call print_u16x_printx32
2796   161C             ; --- END INLINE ASM SEGMENT
2797   161C             ; return; 
2798   161C F9            leave
2799   161D 09            ret
2800   161E             ; --- BEGIN INLINE ASM SEGMENT
2801   161E             print_u16x_printx32:
2802   161E D7            push a
2803   161F D8            push b
2804   1620 DD            push bl
2805   1621 30            mov bl, bh
2806   1622 07 40 16      call _itoa_printx32        ; convert bh to char in A
2807   1625 2F            mov bl, al        ; save al
2808   1626 19 00         mov al, 0
2809   1628 05 03         syscall sys_io        ; display AH
2810   162A 24            mov ah, bl        ; retrieve al
2811   162B 19 00         mov al, 0
2812   162D 05 03         syscall sys_io        ; display AL
2813   162F EA            pop bl
2814   1630 07 40 16      call _itoa_printx32        ; convert bh to char in A
2815   1633 2F            mov bl, al        ; save al
2816   1634 19 00         mov al, 0
2817   1636 05 03         syscall sys_io        ; display AH
2818   1638 24            mov ah, bl        ; retrieve al
2819   1639 19 00         mov al, 0
2820   163B 05 03         syscall sys_io        ; display AL
2821   163D E5            pop b
2822   163E E4            pop a
2823   163F 09            ret
2824   1640             _itoa_printx32:
2825   1640 DA            push d
2826   1641 D8            push b
2827   1642 A7 00         mov bh, 0
2828   1644 FD A4 04      shr bl, 4  
2829   1647 74            mov d, b
2830   1648 1F 5A 16      mov al, [d + s_hex_digits_printx32]
2831   164B 23            mov ah, al
2832   164C E5            pop b
2833   164D D8            push b
2834   164E A7 00         mov bh, 0
2835   1650 FD 87 0F      and bl, $0F
2836   1653 74            mov d, b
2837   1654 1F 5A 16      mov al, [d + s_hex_digits_printx32]
2838   1657 E5            pop b
2839   1658 E7            pop d
2840   1659 09            ret
2841   165A 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2841   165E 34 35 36 37 
2841   1662 38 39 41 42 
2841   1666 43 44 45 46 
2842   166A             ; --- END INLINE ASM SEGMENT
2843   166A F9            leave
2844   166B 09            ret
2845   166C             
2846   166C             err:
2847   166C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2848   166F             ; print(e); 
2849   166F             ; --- START FUNCTION CALL
2850   166F FA 05 00      lea d, [bp + 5] ; $e
2851   1672 2A            mov b, [d]
2852   1673 38 00 00      mov c, 0
2853   1676 FD AB         swp b
2854   1678 D8            push b
2855   1679 07 81 16      call print
2856   167C 51 02 00      add sp, 2
2857   167F             ; --- END FUNCTION CALL
2858   167F F9            leave
2859   1680 09            ret
2860   1681             
2861   1681             print:
2862   1681 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2863   1684             ; --- BEGIN INLINE ASM SEGMENT
2864   1684 FA 05 00      lea d, [bp + 5] ; $s
2865   1687 FD 2A         mov d, [d]
2866   1689             _puts_L1_print:
2867   1689 1E            mov al, [d]
2868   168A B9 00         cmp al, 0
2869   168C C6 98 16      jz _puts_END_print
2870   168F 23            mov ah, al
2871   1690 19 00         mov al, 0
2872   1692 05 03         syscall sys_io
2873   1694 79            inc d
2874   1695 0A 89 16      jmp _puts_L1_print
2875   1698             _puts_END_print:
2876   1698             ; --- END INLINE ASM SEGMENT
2877   1698 F9            leave
2878   1699 09            ret
2879   169A             
2880   169A             print_signed:
2881   169A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2882   169D             ; char digits[5]; 
2883   169D 52 05 00      sub sp, 5
2884   16A0             ; int i = 0; 
2885   16A0 52 02 00      sub sp, 2
2886   16A3             ; --- START LOCAL VAR INITIALIZATION
2887   16A3 FA FA FF      lea d, [bp + -6] ; $i
2888   16A6 DA            push d
2889   16A7 FD 2E 00 00   mov32 cb, $00000000
2889   16AB 00 00 
2890   16AD E7            pop d
2891   16AE FD 43         mov [d], b
2892   16B0             ; --- END LOCAL VAR INITIALIZATION
2893   16B0             ; if (num < 0) { 
2894   16B0             _if47_cond:
2895   16B0 FA 05 00      lea d, [bp + 5] ; $num
2896   16B3 2A            mov b, [d]
2897   16B4 38 00 00      mov c, 0
2898   16B7             ; --- START RELATIONAL
2899   16B7 D7            push a
2900   16B8 11            mov a, b
2901   16B9 FD 2E 00 00   mov32 cb, $00000000
2901   16BD 00 00 
2902   16BF B0            cmp a, b
2903   16C0 FD 73         slt ; < (signed)
2904   16C2 E4            pop a
2905   16C3             ; --- END RELATIONAL
2906   16C3 C0 00 00      cmp b, 0
2907   16C6 C6 E9 16      je _if47_else
2908   16C9             _if47_TRUE:
2909   16C9             ; putchar('-'); 
2910   16C9             ; --- START FUNCTION CALL
2911   16C9 FD 2E 2D 00   mov32 cb, $0000002d
2911   16CD 00 00 
2912   16CF DD            push bl
2913   16D0 07 C9 14      call putchar
2914   16D3 51 01 00      add sp, 1
2915   16D6             ; --- END FUNCTION CALL
2916   16D6             ; num = -num; 
2917   16D6 FA 05 00      lea d, [bp + 5] ; $num
2918   16D9 DA            push d
2919   16DA FA 05 00      lea d, [bp + 5] ; $num
2920   16DD 2A            mov b, [d]
2921   16DE 38 00 00      mov c, 0
2922   16E1 FD 97         neg b
2923   16E3 E7            pop d
2924   16E4 FD 43         mov [d], b
2925   16E6 0A 14 17      jmp _if47_exit
2926   16E9             _if47_else:
2927   16E9             ; if (num == 0) { 
2928   16E9             _if48_cond:
2929   16E9 FA 05 00      lea d, [bp + 5] ; $num
2930   16EC 2A            mov b, [d]
2931   16ED 38 00 00      mov c, 0
2932   16F0             ; --- START RELATIONAL
2933   16F0 D7            push a
2934   16F1 11            mov a, b
2935   16F2 FD 2E 00 00   mov32 cb, $00000000
2935   16F6 00 00 
2936   16F8 B0            cmp a, b
2937   16F9 FD 71         seq ; ==
2938   16FB E4            pop a
2939   16FC             ; --- END RELATIONAL
2940   16FC C0 00 00      cmp b, 0
2941   16FF C6 14 17      je _if48_exit
2942   1702             _if48_TRUE:
2943   1702             ; putchar('0'); 
2944   1702             ; --- START FUNCTION CALL
2945   1702 FD 2E 30 00   mov32 cb, $00000030
2945   1706 00 00 
2946   1708 DD            push bl
2947   1709 07 C9 14      call putchar
2948   170C 51 01 00      add sp, 1
2949   170F             ; --- END FUNCTION CALL
2950   170F             ; return; 
2951   170F F9            leave
2952   1710 09            ret
2953   1711 0A 14 17      jmp _if48_exit
2954   1714             _if48_exit:
2955   1714             _if47_exit:
2956   1714             ; while (num > 0) { 
2957   1714             _while49_cond:
2958   1714 FA 05 00      lea d, [bp + 5] ; $num
2959   1717 2A            mov b, [d]
2960   1718 38 00 00      mov c, 0
2961   171B             ; --- START RELATIONAL
2962   171B D7            push a
2963   171C 11            mov a, b
2964   171D FD 2E 00 00   mov32 cb, $00000000
2964   1721 00 00 
2965   1723 B0            cmp a, b
2966   1724 FD 7F         sgt ; >
2967   1726 E4            pop a
2968   1727             ; --- END RELATIONAL
2969   1727 C0 00 00      cmp b, 0
2970   172A C6 A1 17      je _while49_exit
2971   172D             _while49_block:
2972   172D             ; digits[i] = '0' + (num % 10); 
2973   172D FA FC FF      lea d, [bp + -4] ; $digits
2974   1730 D7            push a
2975   1731 DA            push d
2976   1732 FA FA FF      lea d, [bp + -6] ; $i
2977   1735 2A            mov b, [d]
2978   1736 38 00 00      mov c, 0
2979   1739 E7            pop d
2980   173A 5A            add d, b
2981   173B E4            pop a
2982   173C DA            push d
2983   173D FD 2E 30 00   mov32 cb, $00000030
2983   1741 00 00 
2984   1743             ; --- START TERMS
2985   1743 D7            push a
2986   1744 11            mov a, b
2987   1745 FA 05 00      lea d, [bp + 5] ; $num
2988   1748 2A            mov b, [d]
2989   1749 38 00 00      mov c, 0
2990   174C             ; --- START FACTORS
2991   174C D7            push a
2992   174D FD D8         push g
2993   174F 11            mov a, b
2994   1750 FD 7A         mov g, c
2995   1752 FD 2E 0A 00   mov32 cb, $0000000a
2995   1756 00 00 
2996   1758 FD D8         push g ; save 'g' as the div instruction uses it
2997   175A AE            div a, b ; %, a: quotient, b: remainder
2998   175B 11            mov a, b
2999   175C FD F1         pop g
3000   175E FD 38         mov c, g
3001   1760 27            mov b, a
3002   1761 FD F1         pop g
3003   1763 E4            pop a
3004   1764             ; --- END FACTORS
3005   1764 56            add b, a
3006   1765 E4            pop a
3007   1766             ; --- END TERMS
3008   1766 E7            pop d
3009   1767 FD 3E         mov [d], bl
3010   1769             ; num = num / 10; 
3011   1769 FA 05 00      lea d, [bp + 5] ; $num
3012   176C DA            push d
3013   176D FA 05 00      lea d, [bp + 5] ; $num
3014   1770 2A            mov b, [d]
3015   1771 38 00 00      mov c, 0
3016   1774             ; --- START FACTORS
3017   1774 D7            push a
3018   1775 FD D8         push g
3019   1777 11            mov a, b
3020   1778 FD 7A         mov g, c
3021   177A FD 2E 0A 00   mov32 cb, $0000000a
3021   177E 00 00 
3022   1780 FD D8         push g ; save 'g' as the div instruction uses it
3023   1782 AE            div a, b ; /, a: quotient, b: remainder
3024   1783 FD F1         pop g
3025   1785 FD 38         mov c, g
3026   1787 27            mov b, a
3027   1788 FD F1         pop g
3028   178A E4            pop a
3029   178B             ; --- END FACTORS
3030   178B E7            pop d
3031   178C FD 43         mov [d], b
3032   178E             ; i++; 
3033   178E FA FA FF      lea d, [bp + -6] ; $i
3034   1791 2A            mov b, [d]
3035   1792 38 00 00      mov c, 0
3036   1795 11            mov a, b
3037   1796 FD 77         inc b
3038   1798 FA FA FF      lea d, [bp + -6] ; $i
3039   179B FD 43         mov [d], b
3040   179D 27            mov b, a
3041   179E 0A 14 17      jmp _while49_cond
3042   17A1             _while49_exit:
3043   17A1             ; while (i > 0) { 
3044   17A1             _while56_cond:
3045   17A1 FA FA FF      lea d, [bp + -6] ; $i
3046   17A4 2A            mov b, [d]
3047   17A5 38 00 00      mov c, 0
3048   17A8             ; --- START RELATIONAL
3049   17A8 D7            push a
3050   17A9 11            mov a, b
3051   17AA FD 2E 00 00   mov32 cb, $00000000
3051   17AE 00 00 
3052   17B0 B0            cmp a, b
3053   17B1 FD 7F         sgt ; >
3054   17B3 E4            pop a
3055   17B4             ; --- END RELATIONAL
3056   17B4 C0 00 00      cmp b, 0
3057   17B7 C6 E9 17      je _while56_exit
3058   17BA             _while56_block:
3059   17BA             ; i--; 
3060   17BA FA FA FF      lea d, [bp + -6] ; $i
3061   17BD 2A            mov b, [d]
3062   17BE 38 00 00      mov c, 0
3063   17C1 11            mov a, b
3064   17C2 FD 7D         dec b
3065   17C4 FA FA FF      lea d, [bp + -6] ; $i
3066   17C7 FD 43         mov [d], b
3067   17C9 27            mov b, a
3068   17CA             ; putchar(digits[i]); 
3069   17CA             ; --- START FUNCTION CALL
3070   17CA FA FC FF      lea d, [bp + -4] ; $digits
3071   17CD D7            push a
3072   17CE DA            push d
3073   17CF FA FA FF      lea d, [bp + -6] ; $i
3074   17D2 2A            mov b, [d]
3075   17D3 38 00 00      mov c, 0
3076   17D6 E7            pop d
3077   17D7 5A            add d, b
3078   17D8 E4            pop a
3079   17D9 32            mov bl, [d]
3080   17DA A7 00         mov bh, 0
3081   17DC 38 00 00      mov c, 0
3082   17DF DD            push bl
3083   17E0 07 C9 14      call putchar
3084   17E3 51 01 00      add sp, 1
3085   17E6             ; --- END FUNCTION CALL
3086   17E6 0A A1 17      jmp _while56_cond
3087   17E9             _while56_exit:
3088   17E9 F9            leave
3089   17EA 09            ret
3090   17EB             
3091   17EB             print_unsigned:
3092   17EB F8 00 00      enter 0 ; (push bp; mov bp, sp)
3093   17EE             ; char digits[5]; 
3094   17EE 52 05 00      sub sp, 5
3095   17F1             ; int i; 
3096   17F1 52 02 00      sub sp, 2
3097   17F4             ; i = 0; 
3098   17F4 FA FA FF      lea d, [bp + -6] ; $i
3099   17F7 DA            push d
3100   17F8 FD 2E 00 00   mov32 cb, $00000000
3100   17FC 00 00 
3101   17FE E7            pop d
3102   17FF FD 43         mov [d], b
3103   1801             ; if(num == 0){ 
3104   1801             _if57_cond:
3105   1801 FA 05 00      lea d, [bp + 5] ; $num
3106   1804 2A            mov b, [d]
3107   1805 38 00 00      mov c, 0
3108   1808             ; --- START RELATIONAL
3109   1808 D7            push a
3110   1809 11            mov a, b
3111   180A FD 2E 00 00   mov32 cb, $00000000
3111   180E 00 00 
3112   1810 B0            cmp a, b
3113   1811 FD 71         seq ; ==
3114   1813 E4            pop a
3115   1814             ; --- END RELATIONAL
3116   1814 C0 00 00      cmp b, 0
3117   1817 C6 2C 18      je _if57_exit
3118   181A             _if57_TRUE:
3119   181A             ; putchar('0'); 
3120   181A             ; --- START FUNCTION CALL
3121   181A FD 2E 30 00   mov32 cb, $00000030
3121   181E 00 00 
3122   1820 DD            push bl
3123   1821 07 C9 14      call putchar
3124   1824 51 01 00      add sp, 1
3125   1827             ; --- END FUNCTION CALL
3126   1827             ; return; 
3127   1827 F9            leave
3128   1828 09            ret
3129   1829 0A 2C 18      jmp _if57_exit
3130   182C             _if57_exit:
3131   182C             ; while (num > 0) { 
3132   182C             _while58_cond:
3133   182C FA 05 00      lea d, [bp + 5] ; $num
3134   182F 2A            mov b, [d]
3135   1830 38 00 00      mov c, 0
3136   1833             ; --- START RELATIONAL
3137   1833 D7            push a
3138   1834 11            mov a, b
3139   1835 FD 2E 00 00   mov32 cb, $00000000
3139   1839 00 00 
3140   183B B0            cmp a, b
3141   183C FD 81         sgu ; > (unsigned)
3142   183E E4            pop a
3143   183F             ; --- END RELATIONAL
3144   183F C0 00 00      cmp b, 0
3145   1842 C6 B9 18      je _while58_exit
3146   1845             _while58_block:
3147   1845             ; digits[i] = '0' + (num % 10); 
3148   1845 FA FC FF      lea d, [bp + -4] ; $digits
3149   1848 D7            push a
3150   1849 DA            push d
3151   184A FA FA FF      lea d, [bp + -6] ; $i
3152   184D 2A            mov b, [d]
3153   184E 38 00 00      mov c, 0
3154   1851 E7            pop d
3155   1852 5A            add d, b
3156   1853 E4            pop a
3157   1854 DA            push d
3158   1855 FD 2E 30 00   mov32 cb, $00000030
3158   1859 00 00 
3159   185B             ; --- START TERMS
3160   185B D7            push a
3161   185C 11            mov a, b
3162   185D FA 05 00      lea d, [bp + 5] ; $num
3163   1860 2A            mov b, [d]
3164   1861 38 00 00      mov c, 0
3165   1864             ; --- START FACTORS
3166   1864 D7            push a
3167   1865 FD D8         push g
3168   1867 11            mov a, b
3169   1868 FD 7A         mov g, c
3170   186A FD 2E 0A 00   mov32 cb, $0000000a
3170   186E 00 00 
3171   1870 FD D8         push g ; save 'g' as the div instruction uses it
3172   1872 AE            div a, b ; %, a: quotient, b: remainder
3173   1873 11            mov a, b
3174   1874 FD F1         pop g
3175   1876 FD 38         mov c, g
3176   1878 27            mov b, a
3177   1879 FD F1         pop g
3178   187B E4            pop a
3179   187C             ; --- END FACTORS
3180   187C 56            add b, a
3181   187D E4            pop a
3182   187E             ; --- END TERMS
3183   187E E7            pop d
3184   187F FD 3E         mov [d], bl
3185   1881             ; num = num / 10; 
3186   1881 FA 05 00      lea d, [bp + 5] ; $num
3187   1884 DA            push d
3188   1885 FA 05 00      lea d, [bp + 5] ; $num
3189   1888 2A            mov b, [d]
3190   1889 38 00 00      mov c, 0
3191   188C             ; --- START FACTORS
3192   188C D7            push a
3193   188D FD D8         push g
3194   188F 11            mov a, b
3195   1890 FD 7A         mov g, c
3196   1892 FD 2E 0A 00   mov32 cb, $0000000a
3196   1896 00 00 
3197   1898 FD D8         push g ; save 'g' as the div instruction uses it
3198   189A AE            div a, b ; /, a: quotient, b: remainder
3199   189B FD F1         pop g
3200   189D FD 38         mov c, g
3201   189F 27            mov b, a
3202   18A0 FD F1         pop g
3203   18A2 E4            pop a
3204   18A3             ; --- END FACTORS
3205   18A3 E7            pop d
3206   18A4 FD 43         mov [d], b
3207   18A6             ; i++; 
3208   18A6 FA FA FF      lea d, [bp + -6] ; $i
3209   18A9 2A            mov b, [d]
3210   18AA 38 00 00      mov c, 0
3211   18AD 11            mov a, b
3212   18AE FD 77         inc b
3213   18B0 FA FA FF      lea d, [bp + -6] ; $i
3214   18B3 FD 43         mov [d], b
3215   18B5 27            mov b, a
3216   18B6 0A 2C 18      jmp _while58_cond
3217   18B9             _while58_exit:
3218   18B9             ; while (i > 0) { 
3219   18B9             _while65_cond:
3220   18B9 FA FA FF      lea d, [bp + -6] ; $i
3221   18BC 2A            mov b, [d]
3222   18BD 38 00 00      mov c, 0
3223   18C0             ; --- START RELATIONAL
3224   18C0 D7            push a
3225   18C1 11            mov a, b
3226   18C2 FD 2E 00 00   mov32 cb, $00000000
3226   18C6 00 00 
3227   18C8 B0            cmp a, b
3228   18C9 FD 7F         sgt ; >
3229   18CB E4            pop a
3230   18CC             ; --- END RELATIONAL
3231   18CC C0 00 00      cmp b, 0
3232   18CF C6 01 19      je _while65_exit
3233   18D2             _while65_block:
3234   18D2             ; i--; 
3235   18D2 FA FA FF      lea d, [bp + -6] ; $i
3236   18D5 2A            mov b, [d]
3237   18D6 38 00 00      mov c, 0
3238   18D9 11            mov a, b
3239   18DA FD 7D         dec b
3240   18DC FA FA FF      lea d, [bp + -6] ; $i
3241   18DF FD 43         mov [d], b
3242   18E1 27            mov b, a
3243   18E2             ; putchar(digits[i]); 
3244   18E2             ; --- START FUNCTION CALL
3245   18E2 FA FC FF      lea d, [bp + -4] ; $digits
3246   18E5 D7            push a
3247   18E6 DA            push d
3248   18E7 FA FA FF      lea d, [bp + -6] ; $i
3249   18EA 2A            mov b, [d]
3250   18EB 38 00 00      mov c, 0
3251   18EE E7            pop d
3252   18EF 5A            add d, b
3253   18F0 E4            pop a
3254   18F1 32            mov bl, [d]
3255   18F2 A7 00         mov bh, 0
3256   18F4 38 00 00      mov c, 0
3257   18F7 DD            push bl
3258   18F8 07 C9 14      call putchar
3259   18FB 51 01 00      add sp, 1
3260   18FE             ; --- END FUNCTION CALL
3261   18FE 0A B9 18      jmp _while65_cond
3262   1901             _while65_exit:
3263   1901 F9            leave
3264   1902 09            ret
3265   1903             
3266   1903             printx16:
3267   1903 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3268   1906             ; --- BEGIN INLINE ASM SEGMENT
3269   1906 FA 05 00      lea d, [bp + 5] ; $hex
3270   1909 2A            mov b, [d]
3271   190A             print_u16x_printx16:
3272   190A DD            push bl
3273   190B 30            mov bl, bh
3274   190C 07 29 19      call _itoa_printx16        ; convert bh to char in A
3275   190F 2F            mov bl, al        ; save al
3276   1910 19 00         mov al, 0
3277   1912 05 03         syscall sys_io        ; display AH
3278   1914 24            mov ah, bl        ; retrieve al
3279   1915 19 00         mov al, 0
3280   1917 05 03         syscall sys_io        ; display AL
3281   1919 EA            pop bl
3282   191A 07 29 19      call _itoa_printx16        ; convert bh to char in A
3283   191D 2F            mov bl, al        ; save al
3284   191E 19 00         mov al, 0
3285   1920 05 03         syscall sys_io        ; display AH
3286   1922 24            mov ah, bl        ; retrieve al
3287   1923 19 00         mov al, 0
3288   1925 05 03         syscall sys_io        ; display AL
3289   1927             ; --- END INLINE ASM SEGMENT
3290   1927             ; return; 
3291   1927 F9            leave
3292   1928 09            ret
3293   1929             ; --- BEGIN INLINE ASM SEGMENT
3294   1929             _itoa_printx16:
3295   1929 DA            push d
3296   192A D8            push b
3297   192B A7 00         mov bh, 0
3298   192D FD A4 04      shr bl, 4  
3299   1930 74            mov d, b
3300   1931 1F 43 19      mov al, [d + s_hex_digits_printx16]
3301   1934 23            mov ah, al
3302   1935 E5            pop b
3303   1936 D8            push b
3304   1937 A7 00         mov bh, 0
3305   1939 FD 87 0F      and bl, $0F
3306   193C 74            mov d, b
3307   193D 1F 43 19      mov al, [d + s_hex_digits_printx16]
3308   1940 E5            pop b
3309   1941 E7            pop d
3310   1942 09            ret
3311   1943 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
3311   1947 34 35 36 37 
3311   194B 38 39 41 42 
3311   194F 43 44 45 46 
3312   1953             ; --- END INLINE ASM SEGMENT
3313   1953 F9            leave
3314   1954 09            ret
3315   1955             
3316   1955             gets:
3317   1955 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3318   1958             ; --- BEGIN INLINE ASM SEGMENT
3319   1958 FA 05 00      lea d, [bp + 5] ; $s
3320   195B 15            mov a, [d]
3321   195C 3C            mov d, a
3322   195D 07 72 19      call _gets_gets
3323   1960             ; --- END INLINE ASM SEGMENT
3324   1960             ; return strlen(s); 
3325   1960             ; --- START FUNCTION CALL
3326   1960 FA 05 00      lea d, [bp + 5] ; $s
3327   1963 2A            mov b, [d]
3328   1964 38 00 00      mov c, 0
3329   1967 FD AB         swp b
3330   1969 D8            push b
3331   196A 07 13 1A      call strlen
3332   196D 51 02 00      add sp, 2
3333   1970             ; --- END FUNCTION CALL
3334   1970 F9            leave
3335   1971 09            ret
3336   1972             ; --- BEGIN INLINE ASM SEGMENT
3337   1972             _gets_gets:
3338   1972 D7            push a
3339   1973 DA            push d
3340   1974             _gets_loop_gets:
3341   1974 19 01         mov al, 1
3342   1976 05 03         syscall sys_io      ; receive in AH
3343   1978 B9 00         cmp al, 0        ; check error code (AL)
3344   197A C6 74 19      je _gets_loop_gets      ; if no char received, retry
3345   197D 76 1B         cmp ah, 27
3346   197F C6 A0 19      je _gets_ansi_esc_gets
3347   1982 76 0A         cmp ah, $0A        ; LF
3348   1984 C6 0B 1A      je _gets_end_gets
3349   1987 76 0D         cmp ah, $0D        ; CR
3350   1989 C6 0B 1A      je _gets_end_gets
3351   198C 76 5C         cmp ah, $5C        ; '\\'
3352   198E C6 CC 19      je _gets_escape_gets
3353   1991 76 08         cmp ah, $08      ; check for backspace
3354   1993 C6 9C 19      je _gets_backspace_gets
3355   1996 1A            mov al, ah
3356   1997 3E            mov [d], al
3357   1998 79            inc d
3358   1999 0A 74 19      jmp _gets_loop_gets
3359   199C             _gets_backspace_gets:
3360   199C 7F            dec d
3361   199D 0A 74 19      jmp _gets_loop_gets
3362   19A0             _gets_ansi_esc_gets:
3363   19A0 19 01         mov al, 1
3364   19A2 05 03         syscall sys_io        ; receive in AH without echo
3365   19A4 B9 00         cmp al, 0          ; check error code (AL)
3366   19A6 C6 A0 19      je _gets_ansi_esc_gets    ; if no char received, retry
3367   19A9 76 5B         cmp ah, '['
3368   19AB C7 74 19      jne _gets_loop_gets
3369   19AE             _gets_ansi_esc_2_gets:
3370   19AE 19 01         mov al, 1
3371   19B0 05 03         syscall sys_io          ; receive in AH without echo
3372   19B2 B9 00         cmp al, 0            ; check error code (AL)
3373   19B4 C6 AE 19      je _gets_ansi_esc_2_gets  ; if no char received, retry
3374   19B7 76 44         cmp ah, 'D'
3375   19B9 C6 C4 19      je _gets_left_arrow_gets
3376   19BC 76 43         cmp ah, 'C'
3377   19BE C6 C8 19      je _gets_right_arrow_gets
3378   19C1 0A 74 19      jmp _gets_loop_gets
3379   19C4             _gets_left_arrow_gets:
3380   19C4 7F            dec d
3381   19C5 0A 74 19      jmp _gets_loop_gets
3382   19C8             _gets_right_arrow_gets:
3383   19C8 79            inc d
3384   19C9 0A 74 19      jmp _gets_loop_gets
3385   19CC             _gets_escape_gets:
3386   19CC 19 01         mov al, 1
3387   19CE 05 03         syscall sys_io      ; receive in AH
3388   19D0 B9 00         cmp al, 0        ; check error code (AL)
3389   19D2 C6 CC 19      je _gets_escape_gets      ; if no char received, retry
3390   19D5 76 6E         cmp ah, 'n'
3391   19D7 C6 F6 19      je _gets_LF_gets
3392   19DA 76 72         cmp ah, 'r'
3393   19DC C6 FD 19      je _gets_CR_gets
3394   19DF 76 30         cmp ah, '0'
3395   19E1 C6 04 1A      je _gets_NULL_gets
3396   19E4 76 5C         cmp ah, $5C  
3397   19E6 C6 EF 19      je _gets_slash_gets
3398   19E9 1A            mov al, ah        ; if not a known escape, it is just a normal letter
3399   19EA 3E            mov [d], al
3400   19EB 79            inc d
3401   19EC 0A 74 19      jmp _gets_loop_gets
3402   19EF             _gets_slash_gets:
3403   19EF 19 5C         mov al, $5C
3404   19F1 3E            mov [d], al
3405   19F2 79            inc d
3406   19F3 0A 74 19      jmp _gets_loop_gets
3407   19F6             _gets_LF_gets:
3408   19F6 19 0A         mov al, $0A
3409   19F8 3E            mov [d], al
3410   19F9 79            inc d
3411   19FA 0A 74 19      jmp _gets_loop_gets
3412   19FD             _gets_CR_gets:
3413   19FD 19 0D         mov al, $0D
3414   19FF 3E            mov [d], al
3415   1A00 79            inc d
3416   1A01 0A 74 19      jmp _gets_loop_gets
3417   1A04             _gets_NULL_gets:
3418   1A04 19 00         mov al, $00
3419   1A06 3E            mov [d], al
3420   1A07 79            inc d
3421   1A08 0A 74 19      jmp _gets_loop_gets
3422   1A0B             _gets_end_gets:
3423   1A0B 19 00         mov al, 0
3424   1A0D 3E            mov [d], al        ; terminate string
3425   1A0E E7            pop d
3426   1A0F E4            pop a
3427   1A10 09            ret
3428   1A11             ; --- END INLINE ASM SEGMENT
3429   1A11 F9            leave
3430   1A12 09            ret
3431   1A13             
3432   1A13             strlen:
3433   1A13 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3434   1A16             ; int length; 
3435   1A16 52 02 00      sub sp, 2
3436   1A19             ; length = 0; 
3437   1A19 FA FF FF      lea d, [bp + -1] ; $length
3438   1A1C DA            push d
3439   1A1D FD 2E 00 00   mov32 cb, $00000000
3439   1A21 00 00 
3440   1A23 E7            pop d
3441   1A24 FD 43         mov [d], b
3442   1A26             ; while (str[length] != 0) { 
3443   1A26             _while66_cond:
3444   1A26 FA 05 00      lea d, [bp + 5] ; $str
3445   1A29 FD 2A         mov d, [d]
3446   1A2B D7            push a
3447   1A2C DA            push d
3448   1A2D FA FF FF      lea d, [bp + -1] ; $length
3449   1A30 2A            mov b, [d]
3450   1A31 38 00 00      mov c, 0
3451   1A34 E7            pop d
3452   1A35 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3453   1A39 E4            pop a
3454   1A3A 32            mov bl, [d]
3455   1A3B A7 00         mov bh, 0
3456   1A3D 38 00 00      mov c, 0
3457   1A40             ; --- START RELATIONAL
3458   1A40 D7            push a
3459   1A41 11            mov a, b
3460   1A42 FD 2E 00 00   mov32 cb, $00000000
3460   1A46 00 00 
3461   1A48 B0            cmp a, b
3462   1A49 FD 72         sneq ; !=
3463   1A4B E4            pop a
3464   1A4C             ; --- END RELATIONAL
3465   1A4C C0 00 00      cmp b, 0
3466   1A4F C6 65 1A      je _while66_exit
3467   1A52             _while66_block:
3468   1A52             ; length++; 
3469   1A52 FA FF FF      lea d, [bp + -1] ; $length
3470   1A55 2A            mov b, [d]
3471   1A56 38 00 00      mov c, 0
3472   1A59 11            mov a, b
3473   1A5A FD 77         inc b
3474   1A5C FA FF FF      lea d, [bp + -1] ; $length
3475   1A5F FD 43         mov [d], b
3476   1A61 27            mov b, a
3477   1A62 0A 26 1A      jmp _while66_cond
3478   1A65             _while66_exit:
3479   1A65             ; return length; 
3480   1A65 FA FF FF      lea d, [bp + -1] ; $length
3481   1A68 2A            mov b, [d]
3482   1A69 38 00 00      mov c, 0
3483   1A6C F9            leave
3484   1A6D 09            ret
3485   1A6E             ; --- END TEXT SEGMENT
3486   1A6E             
3487   1A6E             ; --- BEGIN DATA SEGMENT
3488   1A6E 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
3488   1A72 45 46 47 48 
3488   1A76 49 4A 4B 4C 
3488   1A7A 4D 4E 4F 50 
3488   1A7E 51 52 53 54 
3488   1A82 55 56 57 58 
3488   1A86 59 5A 61 62 
3488   1A8A 63 64 65 66 
3488   1A8E 67 68 69 6A 
3488   1A92 6B 6C 6D 6E 
3488   1A96 6F 70 71 72 
3488   1A9A 73 74 75 76 
3488   1A9E 77 78 79 7A 
3488   1AA2 30 31 32 33 
3488   1AA6 34 35 36 37 
3488   1AAA 38 39 2B 2F 
3488   1AAE 00 
3489   1AAF 6E 1A       _base64_table: .dw _base64_table_data
3490   1AB1 0A 45 6E 74 _s0: .db "\nEnter a base64 encoded string to decode: ", 0
3490   1AB5 65 72 20 61 
3490   1AB9 20 62 61 73 
3490   1ABD 65 36 34 20 
3490   1AC1 65 6E 63 6F 
3490   1AC5 64 65 64 20 
3490   1AC9 73 74 72 69 
3490   1ACD 6E 67 20 74 
3490   1AD1 6F 20 64 65 
3490   1AD5 63 6F 64 65 
3490   1AD9 3A 20 00 
3491   1ADC 0A 45 6E 63 _s1: .db "\nEncoded string: %s\n", 0
3491   1AE0 6F 64 65 64 
3491   1AE4 20 73 74 72 
3491   1AE8 69 6E 67 3A 
3491   1AEC 20 25 73 0A 
3491   1AF0 00 
3492   1AF1 0A 44 65 63 _s2: .db "\nDecoded string: %s\n", 0
3492   1AF5 6F 64 65 64 
3492   1AF9 20 73 74 72 
3492   1AFD 69 6E 67 3A 
3492   1B01 20 25 73 0A 
3492   1B05 00 
3493   1B06 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
3493   1B0A 70 65 63 74 
3493   1B0E 65 64 20 66 
3493   1B12 6F 72 6D 61 
3493   1B16 74 20 69 6E 
3493   1B1A 20 70 72 69 
3493   1B1E 6E 74 66 2E 
3493   1B22 00 
3494   1B23 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
3494   1B27 72 3A 20 55 
3494   1B2B 6E 6B 6E 6F 
3494   1B2F 77 6E 20 61 
3494   1B33 72 67 75 6D 
3494   1B37 65 6E 74 20 
3494   1B3B 74 79 70 65 
3494   1B3F 2E 0A 00 
3495   1B42             
3496   1B42 44 1B       _heap_top: .dw _heap
3497   1B44 00          _heap: .db 0
3498   1B45             ; --- END DATA SEGMENT
3499   1B45             
3500   1B45             .end
tasm: Number of errors = 0
