0001   0000             ; --- FILENAME: programs/base64
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; char input[512]; 
0011   0408 52 00 02      sub sp, 512 ; input
0012   040B             ;; char output[256]; 
0013   040B 52 00 01      sub sp, 256 ; output
0014   040E             ;; printf("Enter a base64 encoded string to decode: "); 
0015   040E 26 23 23      mov b, _s0 ; "Enter a base64 encoded string to decode: "
0016   0411 FD AB         swp b
0017   0413 D8            push b
0018   0414 07 1F 08      call printf
0019   0417 51 02 00      add sp, 2
0020   041A             ;; gets(input); 
0021   041A FA 01 FE      lea d, [bp + -511] ; $input
0022   041D 2D            mov b, d
0023   041E FD AB         swp b
0024   0420 D8            push b
0025   0421 07 5A 0E      call gets
0026   0424 51 02 00      add sp, 2
0027   0427             ;; base64_encode(input, output); 
0028   0427 FA 01 FD      lea d, [bp + -767] ; $output
0029   042A 2D            mov b, d
0030   042B FD AB         swp b
0031   042D D8            push b
0032   042E FA 01 FE      lea d, [bp + -511] ; $input
0033   0431 2D            mov b, d
0034   0432 FD AB         swp b
0035   0434 D8            push b
0036   0435 07 AC 19      call base64_encode
0037   0438 51 04 00      add sp, 4
0038   043B             ;; printf("Encoded string: %s\n", output); 
0039   043B FA 01 FD      lea d, [bp + -767] ; $output
0040   043E 2D            mov b, d
0041   043F FD AB         swp b
0042   0441 D8            push b
0043   0442 26 4D 23      mov b, _s1 ; "Encoded string: %s\n"
0044   0445 FD AB         swp b
0045   0447 D8            push b
0046   0448 07 1F 08      call printf
0047   044B 51 04 00      add sp, 4
0048   044E             ;; base64_decode(output, input); 
0049   044E FA 01 FE      lea d, [bp + -511] ; $input
0050   0451 2D            mov b, d
0051   0452 FD AB         swp b
0052   0454 D8            push b
0053   0455 FA 01 FD      lea d, [bp + -767] ; $output
0054   0458 2D            mov b, d
0055   0459 FD AB         swp b
0056   045B D8            push b
0057   045C 07 9C 1E      call base64_decode
0058   045F 51 04 00      add sp, 4
0059   0462             ;; printf("Decoded string: %s\n", input); 
0060   0462 FA 01 FE      lea d, [bp + -511] ; $input
0061   0465 2D            mov b, d
0062   0466 FD AB         swp b
0063   0468 D8            push b
0064   0469 26 61 23      mov b, _s2 ; "Decoded string: %s\n"
0065   046C FD AB         swp b
0066   046E D8            push b
0067   046F 07 1F 08      call printf
0068   0472 51 04 00      add sp, 4
0069   0475             ;; return 0; 
0070   0475 26 00 00      mov b, $0
0071   0478 F9            leave
0072   0479 05 0B         syscall sys_terminate_proc
0073   047B             
0074   047B             strcpy:
0075   047B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0076   047E             ;; char *psrc; 
0077   047E 52 02 00      sub sp, 2 ; psrc
0078   0481             ;; char *pdest; 
0079   0481 52 02 00      sub sp, 2 ; pdest
0080   0484             ;; psrc = src; 
0081   0484 FA FF FF      lea d, [bp + -1] ; $psrc
0082   0487 DA            push d
0083   0488 FA 07 00      lea d, [bp + 7] ; $src
0084   048B 2A            mov b, [d]
0085   048C E7            pop d
0086   048D FD 43         mov [d], b
0087   048F             ;; pdest = dest; 
0088   048F FA FD FF      lea d, [bp + -3] ; $pdest
0089   0492 DA            push d
0090   0493 FA 05 00      lea d, [bp + 5] ; $dest
0091   0496 2A            mov b, [d]
0092   0497 E7            pop d
0093   0498 FD 43         mov [d], b
0094   049A             ;; while(*psrc) *pdest++ = *psrc++; 
0095   049A             _while1_cond:
0096   049A FA FF FF      lea d, [bp + -1] ; $psrc
0097   049D 2A            mov b, [d]
0098   049E 74            mov d, b
0099   049F 32            mov bl, [d]
0100   04A0 A7 00         mov bh, 0
0101   04A2 C0 00 00      cmp b, 0
0102   04A5 C6 CD 04      je _while1_exit
0103   04A8             _while1_block:
0104   04A8             ;; *pdest++ = *psrc++; 
0105   04A8 FA FD FF      lea d, [bp + -3] ; $pdest
0106   04AB 2A            mov b, [d]
0107   04AC FD 77         inc b
0108   04AE FA FD FF      lea d, [bp + -3] ; $pdest
0109   04B1 FD 43         mov [d], b
0110   04B3 FD 7D         dec b
0111   04B5 D8            push b
0112   04B6 FA FF FF      lea d, [bp + -1] ; $psrc
0113   04B9 2A            mov b, [d]
0114   04BA FD 77         inc b
0115   04BC FA FF FF      lea d, [bp + -1] ; $psrc
0116   04BF FD 43         mov [d], b
0117   04C1 FD 7D         dec b
0118   04C3 74            mov d, b
0119   04C4 32            mov bl, [d]
0120   04C5 A7 00         mov bh, 0
0121   04C7 E7            pop d
0122   04C8 FD 3E         mov [d], bl
0123   04CA 0A 9A 04      jmp _while1_cond
0124   04CD             _while1_exit:
0125   04CD             ;; *pdest = '\0'; 
0126   04CD FA FD FF      lea d, [bp + -3] ; $pdest
0127   04D0 2A            mov b, [d]
0128   04D1 D8            push b
0129   04D2 26 00 00      mov b, $0
0130   04D5 E7            pop d
0131   04D6 FD 3E         mov [d], bl
0132   04D8 F9            leave
0133   04D9 09            ret
0134   04DA             
0135   04DA             strcmp:
0136   04DA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0137   04DD             ;; while (*s1 && (*s1 == *s2)) { 
0138   04DD             _while2_cond:
0139   04DD FA 05 00      lea d, [bp + 5] ; $s1
0140   04E0 2A            mov b, [d]
0141   04E1 74            mov d, b
0142   04E2 32            mov bl, [d]
0143   04E3 A7 00         mov bh, 0
0144   04E5             ; START LOGICAL AND
0145   04E5 D7            push a
0146   04E6 11            mov a, b
0147   04E7 FA 05 00      lea d, [bp + 5] ; $s1
0148   04EA 2A            mov b, [d]
0149   04EB 74            mov d, b
0150   04EC 32            mov bl, [d]
0151   04ED A7 00         mov bh, 0
0152   04EF             ; START RELATIONAL
0153   04EF D7            push a
0154   04F0 11            mov a, b
0155   04F1 FA 07 00      lea d, [bp + 7] ; $s2
0156   04F4 2A            mov b, [d]
0157   04F5 74            mov d, b
0158   04F6 32            mov bl, [d]
0159   04F7 A7 00         mov bh, 0
0160   04F9 B0            cmp a, b
0161   04FA FD 71         seq ; ==
0162   04FC E4            pop a
0163   04FD             ; END RELATIONAL
0164   04FD FD A7         sand a, b
0165   04FF E4            pop a
0166   0500             ; END LOGICAL AND
0167   0500 C0 00 00      cmp b, 0
0168   0503 C6 23 05      je _while2_exit
0169   0506             _while2_block:
0170   0506             ;; s1++; 
0171   0506 FA 05 00      lea d, [bp + 5] ; $s1
0172   0509 2A            mov b, [d]
0173   050A FD 77         inc b
0174   050C FA 05 00      lea d, [bp + 5] ; $s1
0175   050F FD 43         mov [d], b
0176   0511 FD 7D         dec b
0177   0513             ;; s2++; 
0178   0513 FA 07 00      lea d, [bp + 7] ; $s2
0179   0516 2A            mov b, [d]
0180   0517 FD 77         inc b
0181   0519 FA 07 00      lea d, [bp + 7] ; $s2
0182   051C FD 43         mov [d], b
0183   051E FD 7D         dec b
0184   0520 0A DD 04      jmp _while2_cond
0185   0523             _while2_exit:
0186   0523             ;; return *s1 - *s2; 
0187   0523 FA 05 00      lea d, [bp + 5] ; $s1
0188   0526 2A            mov b, [d]
0189   0527 74            mov d, b
0190   0528 32            mov bl, [d]
0191   0529 A7 00         mov bh, 0
0192   052B             ; START TERMS
0193   052B D7            push a
0194   052C 11            mov a, b
0195   052D FA 07 00      lea d, [bp + 7] ; $s2
0196   0530 2A            mov b, [d]
0197   0531 74            mov d, b
0198   0532 32            mov bl, [d]
0199   0533 A7 00         mov bh, 0
0200   0535 60            sub a, b
0201   0536 27            mov b, a
0202   0537 E4            pop a
0203   0538             ; END TERMS
0204   0538 F9            leave
0205   0539 09            ret
0206   053A             
0207   053A             strncmp:
0208   053A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0209   053D F9            leave
0210   053E 09            ret
0211   053F             
0212   053F             strcat:
0213   053F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0214   0542             ;; int dest_len; 
0215   0542 52 02 00      sub sp, 2 ; dest_len
0216   0545             ;; int i; 
0217   0545 52 02 00      sub sp, 2 ; i
0218   0548             ;; dest_len = strlen(dest); 
0219   0548 FA FF FF      lea d, [bp + -1] ; $dest_len
0220   054B DA            push d
0221   054C FA 05 00      lea d, [bp + 5] ; $dest
0222   054F 2A            mov b, [d]
0223   0550 FD AB         swp b
0224   0552 D8            push b
0225   0553 07 F5 05      call strlen
0226   0556 51 02 00      add sp, 2
0227   0559 E7            pop d
0228   055A FD 43         mov [d], b
0229   055C             ;; for (i = 0; src[i] != 0; i=i+1) { 
0230   055C             _for3_init:
0231   055C FA FD FF      lea d, [bp + -3] ; $i
0232   055F DA            push d
0233   0560 26 00 00      mov b, $0
0234   0563 E7            pop d
0235   0564 FD 43         mov [d], b
0236   0566             _for3_cond:
0237   0566 FA 07 00      lea d, [bp + 7] ; $src
0238   0569 FD 2A         mov d, [d]
0239   056B D7            push a
0240   056C DA            push d
0241   056D FA FD FF      lea d, [bp + -3] ; $i
0242   0570 2A            mov b, [d]
0243   0571 E7            pop d
0244   0572 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0245   0576 E4            pop a
0246   0577 32            mov bl, [d]
0247   0578 A7 00         mov bh, 0
0248   057A             ; START RELATIONAL
0249   057A D7            push a
0250   057B 11            mov a, b
0251   057C 26 00 00      mov b, $0
0252   057F B0            cmp a, b
0253   0580 FD 72         sneq ; !=
0254   0582 E4            pop a
0255   0583             ; END RELATIONAL
0256   0583 C0 00 00      cmp b, 0
0257   0586 C6 CF 05      je _for3_exit
0258   0589             _for3_block:
0259   0589             ;; dest[dest_len + i] = src[i]; 
0260   0589 FA 05 00      lea d, [bp + 5] ; $dest
0261   058C FD 2A         mov d, [d]
0262   058E D7            push a
0263   058F DA            push d
0264   0590 FA FF FF      lea d, [bp + -1] ; $dest_len
0265   0593 2A            mov b, [d]
0266   0594             ; START TERMS
0267   0594 D7            push a
0268   0595 11            mov a, b
0269   0596 FA FD FF      lea d, [bp + -3] ; $i
0270   0599 2A            mov b, [d]
0271   059A 56            add b, a
0272   059B E4            pop a
0273   059C             ; END TERMS
0274   059C E7            pop d
0275   059D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0276   05A1 E4            pop a
0277   05A2 DA            push d
0278   05A3 FA 07 00      lea d, [bp + 7] ; $src
0279   05A6 FD 2A         mov d, [d]
0280   05A8 D7            push a
0281   05A9 DA            push d
0282   05AA FA FD FF      lea d, [bp + -3] ; $i
0283   05AD 2A            mov b, [d]
0284   05AE E7            pop d
0285   05AF FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0286   05B3 E4            pop a
0287   05B4 32            mov bl, [d]
0288   05B5 A7 00         mov bh, 0
0289   05B7 E7            pop d
0290   05B8 FD 3E         mov [d], bl
0291   05BA             _for3_update:
0292   05BA FA FD FF      lea d, [bp + -3] ; $i
0293   05BD DA            push d
0294   05BE FA FD FF      lea d, [bp + -3] ; $i
0295   05C1 2A            mov b, [d]
0296   05C2             ; START TERMS
0297   05C2 D7            push a
0298   05C3 11            mov a, b
0299   05C4 26 01 00      mov b, $1
0300   05C7 56            add b, a
0301   05C8 E4            pop a
0302   05C9             ; END TERMS
0303   05C9 E7            pop d
0304   05CA FD 43         mov [d], b
0305   05CC 0A 66 05      jmp _for3_cond
0306   05CF             _for3_exit:
0307   05CF             ;; dest[dest_len + i] = 0; 
0308   05CF FA 05 00      lea d, [bp + 5] ; $dest
0309   05D2 FD 2A         mov d, [d]
0310   05D4 D7            push a
0311   05D5 DA            push d
0312   05D6 FA FF FF      lea d, [bp + -1] ; $dest_len
0313   05D9 2A            mov b, [d]
0314   05DA             ; START TERMS
0315   05DA D7            push a
0316   05DB 11            mov a, b
0317   05DC FA FD FF      lea d, [bp + -3] ; $i
0318   05DF 2A            mov b, [d]
0319   05E0 56            add b, a
0320   05E1 E4            pop a
0321   05E2             ; END TERMS
0322   05E2 E7            pop d
0323   05E3 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0324   05E7 E4            pop a
0325   05E8 DA            push d
0326   05E9 26 00 00      mov b, $0
0327   05EC E7            pop d
0328   05ED FD 3E         mov [d], bl
0329   05EF             ;; return dest; 
0330   05EF FA 05 00      lea d, [bp + 5] ; $dest
0331   05F2 2A            mov b, [d]
0332   05F3 F9            leave
0333   05F4 09            ret
0334   05F5             
0335   05F5             strlen:
0336   05F5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0337   05F8             ;; int length; 
0338   05F8 52 02 00      sub sp, 2 ; length
0339   05FB             ;; length = 0; 
0340   05FB FA FF FF      lea d, [bp + -1] ; $length
0341   05FE DA            push d
0342   05FF 26 00 00      mov b, $0
0343   0602 E7            pop d
0344   0603 FD 43         mov [d], b
0345   0605             ;; while (str[length] != 0) { 
0346   0605             _while4_cond:
0347   0605 FA 05 00      lea d, [bp + 5] ; $str
0348   0608 FD 2A         mov d, [d]
0349   060A D7            push a
0350   060B DA            push d
0351   060C FA FF FF      lea d, [bp + -1] ; $length
0352   060F 2A            mov b, [d]
0353   0610 E7            pop d
0354   0611 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0355   0615 E4            pop a
0356   0616 32            mov bl, [d]
0357   0617 A7 00         mov bh, 0
0358   0619             ; START RELATIONAL
0359   0619 D7            push a
0360   061A 11            mov a, b
0361   061B 26 00 00      mov b, $0
0362   061E B0            cmp a, b
0363   061F FD 72         sneq ; !=
0364   0621 E4            pop a
0365   0622             ; END RELATIONAL
0366   0622 C0 00 00      cmp b, 0
0367   0625 C6 38 06      je _while4_exit
0368   0628             _while4_block:
0369   0628             ;; length++; 
0370   0628 FA FF FF      lea d, [bp + -1] ; $length
0371   062B 2A            mov b, [d]
0372   062C FD 77         inc b
0373   062E FA FF FF      lea d, [bp + -1] ; $length
0374   0631 FD 43         mov [d], b
0375   0633 FD 7D         dec b
0376   0635 0A 05 06      jmp _while4_cond
0377   0638             _while4_exit:
0378   0638             ;; return length; 
0379   0638 FA FF FF      lea d, [bp + -1] ; $length
0380   063B 2A            mov b, [d]
0381   063C F9            leave
0382   063D 09            ret
0383   063E             
0384   063E             exit:
0385   063E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0386   0641             
0387   0641             ; --- BEGIN INLINE ASM BLOCK
0388   0641 05 0B         syscall sys_terminate_proc
0389   0643             ; --- END INLINE ASM BLOCK
0390   0643             
0391   0643 F9            leave
0392   0644 09            ret
0393   0645             
0394   0645             memset:
0395   0645 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0396   0648             ;; int i; 
0397   0648 52 02 00      sub sp, 2 ; i
0398   064B             ;; for(i = 0; i < size; i++){ 
0399   064B             _for5_init:
0400   064B FA FF FF      lea d, [bp + -1] ; $i
0401   064E DA            push d
0402   064F 26 00 00      mov b, $0
0403   0652 E7            pop d
0404   0653 FD 43         mov [d], b
0405   0655             _for5_cond:
0406   0655 FA FF FF      lea d, [bp + -1] ; $i
0407   0658 2A            mov b, [d]
0408   0659             ; START RELATIONAL
0409   0659 D7            push a
0410   065A 11            mov a, b
0411   065B FA 08 00      lea d, [bp + 8] ; $size
0412   065E 2A            mov b, [d]
0413   065F B0            cmp a, b
0414   0660 FD 73         slt ; < (signed)
0415   0662 E4            pop a
0416   0663             ; END RELATIONAL
0417   0663 C0 00 00      cmp b, 0
0418   0666 C6 8F 06      je _for5_exit
0419   0669             _for5_block:
0420   0669             ;; *(s+i) = c; 
0421   0669 FA 05 00      lea d, [bp + 5] ; $s
0422   066C 2A            mov b, [d]
0423   066D             ; START TERMS
0424   066D D7            push a
0425   066E 11            mov a, b
0426   066F FA FF FF      lea d, [bp + -1] ; $i
0427   0672 2A            mov b, [d]
0428   0673 56            add b, a
0429   0674 E4            pop a
0430   0675             ; END TERMS
0431   0675 D8            push b
0432   0676 FA 07 00      lea d, [bp + 7] ; $c
0433   0679 32            mov bl, [d]
0434   067A A7 00         mov bh, 0
0435   067C E7            pop d
0436   067D FD 3E         mov [d], bl
0437   067F             _for5_update:
0438   067F FA FF FF      lea d, [bp + -1] ; $i
0439   0682 2A            mov b, [d]
0440   0683 FD 77         inc b
0441   0685 FA FF FF      lea d, [bp + -1] ; $i
0442   0688 FD 43         mov [d], b
0443   068A FD 7D         dec b
0444   068C 0A 55 06      jmp _for5_cond
0445   068F             _for5_exit:
0446   068F             ;; return s; 
0447   068F FA 05 00      lea d, [bp + 5] ; $s
0448   0692 2A            mov b, [d]
0449   0693 F9            leave
0450   0694 09            ret
0451   0695             
0452   0695             atoi:
0453   0695 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0454   0698             ;; int result = 0;  // Initialize result 
0455   0698 52 02 00      sub sp, 2 ; result
0456   069B             ; --- START LOCAL VAR INITIALIZATION
0457   069B FA FF FF      lea d, [bp + -1] ; $result
0458   069E DA            push d
0459   069F 26 00 00      mov b, $0
0460   06A2 E7            pop d
0461   06A3 FD 43         mov [d], b
0462   06A5             ; --- END LOCAL VAR INITIALIZATION
0463   06A5             ;; int sign = 1;    // Initialize sign as positive 
0464   06A5 52 02 00      sub sp, 2 ; sign
0465   06A8             ; --- START LOCAL VAR INITIALIZATION
0466   06A8 FA FD FF      lea d, [bp + -3] ; $sign
0467   06AB DA            push d
0468   06AC 26 01 00      mov b, $1
0469   06AF E7            pop d
0470   06B0 FD 43         mov [d], b
0471   06B2             ; --- END LOCAL VAR INITIALIZATION
0472   06B2             ;; while (*str == ' ') str++; 
0473   06B2             _while6_cond:
0474   06B2 FA 05 00      lea d, [bp + 5] ; $str
0475   06B5 2A            mov b, [d]
0476   06B6 74            mov d, b
0477   06B7 32            mov bl, [d]
0478   06B8 A7 00         mov bh, 0
0479   06BA             ; START RELATIONAL
0480   06BA D7            push a
0481   06BB 11            mov a, b
0482   06BC 26 20 00      mov b, $20
0483   06BF B0            cmp a, b
0484   06C0 FD 71         seq ; ==
0485   06C2 E4            pop a
0486   06C3             ; END RELATIONAL
0487   06C3 C0 00 00      cmp b, 0
0488   06C6 C6 D9 06      je _while6_exit
0489   06C9             _while6_block:
0490   06C9             ;; str++; 
0491   06C9 FA 05 00      lea d, [bp + 5] ; $str
0492   06CC 2A            mov b, [d]
0493   06CD FD 77         inc b
0494   06CF FA 05 00      lea d, [bp + 5] ; $str
0495   06D2 FD 43         mov [d], b
0496   06D4 FD 7D         dec b
0497   06D6 0A B2 06      jmp _while6_cond
0498   06D9             _while6_exit:
0499   06D9             ;; if (*str == '-' || *str == '+') { 
0500   06D9             _if7_cond:
0501   06D9 FA 05 00      lea d, [bp + 5] ; $str
0502   06DC 2A            mov b, [d]
0503   06DD 74            mov d, b
0504   06DE 32            mov bl, [d]
0505   06DF A7 00         mov bh, 0
0506   06E1             ; START RELATIONAL
0507   06E1 D7            push a
0508   06E2 11            mov a, b
0509   06E3 26 2D 00      mov b, $2d
0510   06E6 B0            cmp a, b
0511   06E7 FD 71         seq ; ==
0512   06E9 E4            pop a
0513   06EA             ; END RELATIONAL
0514   06EA             ; START LOGICAL OR
0515   06EA D7            push a
0516   06EB 11            mov a, b
0517   06EC FA 05 00      lea d, [bp + 5] ; $str
0518   06EF 2A            mov b, [d]
0519   06F0 74            mov d, b
0520   06F1 32            mov bl, [d]
0521   06F2 A7 00         mov bh, 0
0522   06F4             ; START RELATIONAL
0523   06F4 D7            push a
0524   06F5 11            mov a, b
0525   06F6 26 2B 00      mov b, $2b
0526   06F9 B0            cmp a, b
0527   06FA FD 71         seq ; ==
0528   06FC E4            pop a
0529   06FD             ; END RELATIONAL
0530   06FD FD A8         sor a, b ; ||
0531   06FF E4            pop a
0532   0700             ; END LOGICAL OR
0533   0700 C0 00 00      cmp b, 0
0534   0703 C6 3A 07      je _if7_exit
0535   0706             _if7_true:
0536   0706             ;; if (*str == '-') sign = -1; 
0537   0706             _if8_cond:
0538   0706 FA 05 00      lea d, [bp + 5] ; $str
0539   0709 2A            mov b, [d]
0540   070A 74            mov d, b
0541   070B 32            mov bl, [d]
0542   070C A7 00         mov bh, 0
0543   070E             ; START RELATIONAL
0544   070E D7            push a
0545   070F 11            mov a, b
0546   0710 26 2D 00      mov b, $2d
0547   0713 B0            cmp a, b
0548   0714 FD 71         seq ; ==
0549   0716 E4            pop a
0550   0717             ; END RELATIONAL
0551   0717 C0 00 00      cmp b, 0
0552   071A C6 2A 07      je _if8_exit
0553   071D             _if8_true:
0554   071D             ;; sign = -1; 
0555   071D FA FD FF      lea d, [bp + -3] ; $sign
0556   0720 DA            push d
0557   0721 26 FF FF      mov b, $ffff
0558   0724 E7            pop d
0559   0725 FD 43         mov [d], b
0560   0727 0A 2A 07      jmp _if8_exit
0561   072A             _if8_exit:
0562   072A             ;; str++; 
0563   072A FA 05 00      lea d, [bp + 5] ; $str
0564   072D 2A            mov b, [d]
0565   072E FD 77         inc b
0566   0730 FA 05 00      lea d, [bp + 5] ; $str
0567   0733 FD 43         mov [d], b
0568   0735 FD 7D         dec b
0569   0737 0A 3A 07      jmp _if7_exit
0570   073A             _if7_exit:
0571   073A             ;; while (*str >= '0' && *str <= '9') { 
0572   073A             _while9_cond:
0573   073A FA 05 00      lea d, [bp + 5] ; $str
0574   073D 2A            mov b, [d]
0575   073E 74            mov d, b
0576   073F 32            mov bl, [d]
0577   0740 A7 00         mov bh, 0
0578   0742             ; START RELATIONAL
0579   0742 D7            push a
0580   0743 11            mov a, b
0581   0744 26 30 00      mov b, $30
0582   0747 B0            cmp a, b
0583   0748 FD 82         sgeu ; >= (unsigned)
0584   074A E4            pop a
0585   074B             ; END RELATIONAL
0586   074B             ; START LOGICAL AND
0587   074B D7            push a
0588   074C 11            mov a, b
0589   074D FA 05 00      lea d, [bp + 5] ; $str
0590   0750 2A            mov b, [d]
0591   0751 74            mov d, b
0592   0752 32            mov bl, [d]
0593   0753 A7 00         mov bh, 0
0594   0755             ; START RELATIONAL
0595   0755 D7            push a
0596   0756 11            mov a, b
0597   0757 26 39 00      mov b, $39
0598   075A B0            cmp a, b
0599   075B FD 75         slu ; <= (unsigned)
0600   075D E4            pop a
0601   075E             ; END RELATIONAL
0602   075E FD A7         sand a, b
0603   0760 E4            pop a
0604   0761             ; END LOGICAL AND
0605   0761 C0 00 00      cmp b, 0
0606   0764 C6 9F 07      je _while9_exit
0607   0767             _while9_block:
0608   0767             ;; result = result * 10 + (*str - '0'); 
0609   0767 FA FF FF      lea d, [bp + -1] ; $result
0610   076A DA            push d
0611   076B FA FF FF      lea d, [bp + -1] ; $result
0612   076E 2A            mov b, [d]
0613   076F             ; START FACTORS
0614   076F D7            push a
0615   0770 11            mov a, b
0616   0771 26 0A 00      mov b, $a
0617   0774 AC            mul a, b ; *
0618   0775 11            mov a, b
0619   0776 27            mov b, a
0620   0777 E4            pop a
0621   0778             ; END FACTORS
0622   0778             ; START TERMS
0623   0778 D7            push a
0624   0779 11            mov a, b
0625   077A FA 05 00      lea d, [bp + 5] ; $str
0626   077D 2A            mov b, [d]
0627   077E 74            mov d, b
0628   077F 32            mov bl, [d]
0629   0780 A7 00         mov bh, 0
0630   0782             ; START TERMS
0631   0782 D7            push a
0632   0783 11            mov a, b
0633   0784 26 30 00      mov b, $30
0634   0787 60            sub a, b
0635   0788 27            mov b, a
0636   0789 E4            pop a
0637   078A             ; END TERMS
0638   078A 56            add b, a
0639   078B E4            pop a
0640   078C             ; END TERMS
0641   078C E7            pop d
0642   078D FD 43         mov [d], b
0643   078F             ;; str++; 
0644   078F FA 05 00      lea d, [bp + 5] ; $str
0645   0792 2A            mov b, [d]
0646   0793 FD 77         inc b
0647   0795 FA 05 00      lea d, [bp + 5] ; $str
0648   0798 FD 43         mov [d], b
0649   079A FD 7D         dec b
0650   079C 0A 3A 07      jmp _while9_cond
0651   079F             _while9_exit:
0652   079F             ;; return sign * result; 
0653   079F FA FD FF      lea d, [bp + -3] ; $sign
0654   07A2 2A            mov b, [d]
0655   07A3             ; START FACTORS
0656   07A3 D7            push a
0657   07A4 11            mov a, b
0658   07A5 FA FF FF      lea d, [bp + -1] ; $result
0659   07A8 2A            mov b, [d]
0660   07A9 AC            mul a, b ; *
0661   07AA 11            mov a, b
0662   07AB 27            mov b, a
0663   07AC E4            pop a
0664   07AD             ; END FACTORS
0665   07AD F9            leave
0666   07AE 09            ret
0667   07AF             
0668   07AF             rand:
0669   07AF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0670   07B2             ;; int  sec; 
0671   07B2 52 02 00      sub sp, 2 ; sec
0672   07B5             
0673   07B5             ; --- BEGIN INLINE ASM BLOCK
0674   07B5 19 00         mov al, 0
0675   07B7 05 01         syscall sys_rtc					
0676   07B9 1A            mov al, ah
0677   07BA FA FF FF      lea d, [bp + -1] ; $sec
0678   07BD 1E            mov al, [d]
0679   07BE 22 00         mov ah, 0
0680   07C0             ; --- END INLINE ASM BLOCK
0681   07C0             
0682   07C0             ;; return sec; 
0683   07C0 FA FF FF      lea d, [bp + -1] ; $sec
0684   07C3 2A            mov b, [d]
0685   07C4 F9            leave
0686   07C5 09            ret
0687   07C6             
0688   07C6             alloc:
0689   07C6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0690   07C9             ;; heap_top = heap_top + bytes; 
0691   07C9 3B B9 23      mov d, _heap_top ; $heap_top
0692   07CC DA            push d
0693   07CD 3B B9 23      mov d, _heap_top ; $heap_top
0694   07D0 2A            mov b, [d]
0695   07D1             ; START TERMS
0696   07D1 D7            push a
0697   07D2 11            mov a, b
0698   07D3 FA 05 00      lea d, [bp + 5] ; $bytes
0699   07D6 2A            mov b, [d]
0700   07D7 56            add b, a
0701   07D8 E4            pop a
0702   07D9             ; END TERMS
0703   07D9 E7            pop d
0704   07DA FD 43         mov [d], b
0705   07DC             ;; return heap_top - bytes; 
0706   07DC 3B B9 23      mov d, _heap_top ; $heap_top
0707   07DF 2A            mov b, [d]
0708   07E0             ; START TERMS
0709   07E0 D7            push a
0710   07E1 11            mov a, b
0711   07E2 FA 05 00      lea d, [bp + 5] ; $bytes
0712   07E5 2A            mov b, [d]
0713   07E6 60            sub a, b
0714   07E7 27            mov b, a
0715   07E8 E4            pop a
0716   07E9             ; END TERMS
0717   07E9 F9            leave
0718   07EA 09            ret
0719   07EB             
0720   07EB             free:
0721   07EB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0722   07EE             ;; return heap_top = heap_top - bytes; 
0723   07EE 3B B9 23      mov d, _heap_top ; $heap_top
0724   07F1 DA            push d
0725   07F2 3B B9 23      mov d, _heap_top ; $heap_top
0726   07F5 2A            mov b, [d]
0727   07F6             ; START TERMS
0728   07F6 D7            push a
0729   07F7 11            mov a, b
0730   07F8 FA 05 00      lea d, [bp + 5] ; $bytes
0731   07FB 2A            mov b, [d]
0732   07FC 60            sub a, b
0733   07FD 27            mov b, a
0734   07FE E4            pop a
0735   07FF             ; END TERMS
0736   07FF E7            pop d
0737   0800 FD 43         mov [d], b
0738   0802 F9            leave
0739   0803 09            ret
0740   0804             
0741   0804             fopen:
0742   0804 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0743   0807             ;; FILE *fp; 
0744   0807 52 02 00      sub sp, 2 ; fp
0745   080A             ;; fp = alloc(sizeof(int)); 
0746   080A FA FF FF      lea d, [bp + -1] ; $fp
0747   080D DA            push d
0748   080E 26 02 00      mov b, 2
0749   0811 FD AB         swp b
0750   0813 D8            push b
0751   0814 07 C6 07      call alloc
0752   0817 51 02 00      add sp, 2
0753   081A E7            pop d
0754   081B FD 43         mov [d], b
0755   081D F9            leave
0756   081E 09            ret
0757   081F             
0758   081F             printf:
0759   081F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0760   0822             ;; char *p, *format_p; 
0761   0822 52 02 00      sub sp, 2 ; p
0762   0825 52 02 00      sub sp, 2 ; format_p
0763   0828             ;; format_p = format; 
0764   0828 FA FD FF      lea d, [bp + -3] ; $format_p
0765   082B DA            push d
0766   082C FA 05 00      lea d, [bp + 5] ; $format
0767   082F 2A            mov b, [d]
0768   0830 E7            pop d
0769   0831 FD 43         mov [d], b
0770   0833             ;; p = &format + 2; 
0771   0833 FA FF FF      lea d, [bp + -1] ; $p
0772   0836 DA            push d
0773   0837 FA 05 00      lea d, [bp + 5] ; $format
0774   083A 2D            mov b, d
0775   083B             ; START TERMS
0776   083B D7            push a
0777   083C 11            mov a, b
0778   083D 26 02 00      mov b, $2
0779   0840 56            add b, a
0780   0841 E4            pop a
0781   0842             ; END TERMS
0782   0842 E7            pop d
0783   0843 FD 43         mov [d], b
0784   0845             ;; for(;;){ 
0785   0845             _for10_init:
0786   0845             _for10_cond:
0787   0845             _for10_block:
0788   0845             ;; if(!*format_p) break; 
0789   0845             _if11_cond:
0790   0845 FA FD FF      lea d, [bp + -3] ; $format_p
0791   0848 2A            mov b, [d]
0792   0849 74            mov d, b
0793   084A 32            mov bl, [d]
0794   084B A7 00         mov bh, 0
0795   084D C0 00 00      cmp b, 0
0796   0850 FD 71         seq ; !
0797   0852 C0 00 00      cmp b, 0
0798   0855 C6 5E 08      je _if11_else
0799   0858             _if11_true:
0800   0858             ;; break; 
0801   0858 0A 85 0A      jmp _for10_exit ; for break
0802   085B 0A 82 0A      jmp _if11_exit
0803   085E             _if11_else:
0804   085E             ;; if(*format_p == '%'){ 
0805   085E             _if12_cond:
0806   085E FA FD FF      lea d, [bp + -3] ; $format_p
0807   0861 2A            mov b, [d]
0808   0862 74            mov d, b
0809   0863 32            mov bl, [d]
0810   0864 A7 00         mov bh, 0
0811   0866             ; START RELATIONAL
0812   0866 D7            push a
0813   0867 11            mov a, b
0814   0868 26 25 00      mov b, $25
0815   086B B0            cmp a, b
0816   086C FD 71         seq ; ==
0817   086E E4            pop a
0818   086F             ; END RELATIONAL
0819   086F C0 00 00      cmp b, 0
0820   0872 C6 66 0A      je _if12_else
0821   0875             _if12_true:
0822   0875             ;; format_p++; 
0823   0875 FA FD FF      lea d, [bp + -3] ; $format_p
0824   0878 2A            mov b, [d]
0825   0879 FD 77         inc b
0826   087B FA FD FF      lea d, [bp + -3] ; $format_p
0827   087E FD 43         mov [d], b
0828   0880 FD 7D         dec b
0829   0882             ;; switch(*format_p){ 
0830   0882             _switch13_expr:
0831   0882 FA FD FF      lea d, [bp + -3] ; $format_p
0832   0885 2A            mov b, [d]
0833   0886 74            mov d, b
0834   0887 32            mov bl, [d]
0835   0888 A7 00         mov bh, 0
0836   088A             _switch13_comparisons:
0837   088A C1 6C         cmp bl, $6c
0838   088C C6 B8 08      je _switch13_case0
0839   088F C1 4C         cmp bl, $4c
0840   0891 C6 B8 08      je _switch13_case1
0841   0894 C1 64         cmp bl, $64
0842   0896 C6 A6 09      je _switch13_case2
0843   0899 C1 69         cmp bl, $69
0844   089B C6 A6 09      je _switch13_case3
0845   089E C1 75         cmp bl, $75
0846   08A0 C6 CA 09      je _switch13_case4
0847   08A3 C1 78         cmp bl, $78
0848   08A5 C6 EE 09      je _switch13_case5
0849   08A8 C1 63         cmp bl, $63
0850   08AA C6 0C 0A      je _switch13_case6
0851   08AD C1 73         cmp bl, $73
0852   08AF C6 2B 0A      je _switch13_case7
0853   08B2 0A 4A 0A      jmp _switch13_default
0854   08B5 0A 56 0A      jmp _switch13_exit
0855   08B8             _switch13_case0:
0856   08B8             _switch13_case1:
0857   08B8             ;; format_p++; 
0858   08B8 FA FD FF      lea d, [bp + -3] ; $format_p
0859   08BB 2A            mov b, [d]
0860   08BC FD 77         inc b
0861   08BE FA FD FF      lea d, [bp + -3] ; $format_p
0862   08C1 FD 43         mov [d], b
0863   08C3 FD 7D         dec b
0864   08C5             ;; if(*format_p == 'd' || *format_p == 'i') 
0865   08C5             _if14_cond:
0866   08C5 FA FD FF      lea d, [bp + -3] ; $format_p
0867   08C8 2A            mov b, [d]
0868   08C9 74            mov d, b
0869   08CA 32            mov bl, [d]
0870   08CB A7 00         mov bh, 0
0871   08CD             ; START RELATIONAL
0872   08CD D7            push a
0873   08CE 11            mov a, b
0874   08CF 26 64 00      mov b, $64
0875   08D2 B0            cmp a, b
0876   08D3 FD 71         seq ; ==
0877   08D5 E4            pop a
0878   08D6             ; END RELATIONAL
0879   08D6             ; START LOGICAL OR
0880   08D6 D7            push a
0881   08D7 11            mov a, b
0882   08D8 FA FD FF      lea d, [bp + -3] ; $format_p
0883   08DB 2A            mov b, [d]
0884   08DC 74            mov d, b
0885   08DD 32            mov bl, [d]
0886   08DE A7 00         mov bh, 0
0887   08E0             ; START RELATIONAL
0888   08E0 D7            push a
0889   08E1 11            mov a, b
0890   08E2 26 69 00      mov b, $69
0891   08E5 B0            cmp a, b
0892   08E6 FD 71         seq ; ==
0893   08E8 E4            pop a
0894   08E9             ; END RELATIONAL
0895   08E9 FD A8         sor a, b ; ||
0896   08EB E4            pop a
0897   08EC             ; END LOGICAL OR
0898   08EC C0 00 00      cmp b, 0
0899   08EF C6 14 09      je _if14_else
0900   08F2             _if14_true:
0901   08F2             ;; print_signed_long(*(long *)p); 
0902   08F2 FA FF FF      lea d, [bp + -1] ; $p
0903   08F5 2A            mov b, [d]
0904   08F6 AB            snex b
0905   08F7 FD 39         mov c, b
0906   08F9 74            mov d, b
0907   08FA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0908   08FD FD 39         mov c, b ; And place it into C
0909   08FF 2A            mov b, [d] ; Lower Word in B
0910   0900 FD 79         mov g, b
0911   0902 28            mov b, c
0912   0903 FD AB         swp b
0913   0905 D8            push b
0914   0906 FD 27         mov b, g
0915   0908 FD AB         swp b
0916   090A D8            push b
0917   090B 07 6B 0F      call print_signed_long
0918   090E 51 04 00      add sp, 4
0919   0911 0A 91 09      jmp _if14_exit
0920   0914             _if14_else:
0921   0914             ;; if(*format_p == 'u') 
0922   0914             _if15_cond:
0923   0914 FA FD FF      lea d, [bp + -3] ; $format_p
0924   0917 2A            mov b, [d]
0925   0918 74            mov d, b
0926   0919 32            mov bl, [d]
0927   091A A7 00         mov bh, 0
0928   091C             ; START RELATIONAL
0929   091C D7            push a
0930   091D 11            mov a, b
0931   091E 26 75 00      mov b, $75
0932   0921 B0            cmp a, b
0933   0922 FD 71         seq ; ==
0934   0924 E4            pop a
0935   0925             ; END RELATIONAL
0936   0925 C0 00 00      cmp b, 0
0937   0928 C6 4F 09      je _if15_else
0938   092B             _if15_true:
0939   092B             ;; print_unsigned_long(*(unsigned long *)p); 
0940   092B FA FF FF      lea d, [bp + -1] ; $p
0941   092E 2A            mov b, [d]
0942   092F A7 00         mov bh, 0
0943   0931 38 00 00      mov c, 0
0944   0934 74            mov d, b
0945   0935 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0946   0938 FD 39         mov c, b ; And place it into C
0947   093A 2A            mov b, [d] ; Lower Word in B
0948   093B FD 79         mov g, b
0949   093D 28            mov b, c
0950   093E FD AB         swp b
0951   0940 D8            push b
0952   0941 FD 27         mov b, g
0953   0943 FD AB         swp b
0954   0945 D8            push b
0955   0946 07 AB 12      call print_unsigned_long
0956   0949 51 04 00      add sp, 4
0957   094C 0A 91 09      jmp _if15_exit
0958   094F             _if15_else:
0959   094F             ;; if(*format_p == 'x') 
0960   094F             _if16_cond:
0961   094F FA FD FF      lea d, [bp + -3] ; $format_p
0962   0952 2A            mov b, [d]
0963   0953 74            mov d, b
0964   0954 32            mov bl, [d]
0965   0955 A7 00         mov bh, 0
0966   0957             ; START RELATIONAL
0967   0957 D7            push a
0968   0958 11            mov a, b
0969   0959 26 78 00      mov b, $78
0970   095C B0            cmp a, b
0971   095D FD 71         seq ; ==
0972   095F E4            pop a
0973   0960             ; END RELATIONAL
0974   0960 C0 00 00      cmp b, 0
0975   0963 C6 85 09      je _if16_else
0976   0966             _if16_true:
0977   0966             ;; printx32(*(long int *)p); 
0978   0966 FA FF FF      lea d, [bp + -1] ; $p
0979   0969 2A            mov b, [d]
0980   096A 74            mov d, b
0981   096B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0982   096E FD 39         mov c, b ; And place it into C
0983   0970 2A            mov b, [d] ; Lower Word in B
0984   0971 FD 79         mov g, b
0985   0973 28            mov b, c
0986   0974 FD AB         swp b
0987   0976 D8            push b
0988   0977 FD 27         mov b, g
0989   0979 FD AB         swp b
0990   097B D8            push b
0991   097C 07 E0 0C      call printx32
0992   097F 51 04 00      add sp, 4
0993   0982 0A 91 09      jmp _if16_exit
0994   0985             _if16_else:
0995   0985             ;; err("Unexpected format in printf."); 
0996   0985 26 75 23      mov b, _s3 ; "Unexpected format in printf."
0997   0988 FD AB         swp b
0998   098A D8            push b
0999   098B 07 CE 0C      call err
1000   098E 51 02 00      add sp, 2
1001   0991             _if16_exit:
1002   0991             _if15_exit:
1003   0991             _if14_exit:
1004   0991             ;; p = p + 4; 
1005   0991 FA FF FF      lea d, [bp + -1] ; $p
1006   0994 DA            push d
1007   0995 FA FF FF      lea d, [bp + -1] ; $p
1008   0998 2A            mov b, [d]
1009   0999             ; START TERMS
1010   0999 D7            push a
1011   099A 11            mov a, b
1012   099B 26 04 00      mov b, $4
1013   099E 56            add b, a
1014   099F E4            pop a
1015   09A0             ; END TERMS
1016   09A0 E7            pop d
1017   09A1 FD 43         mov [d], b
1018   09A3             ;; break; 
1019   09A3 0A 56 0A      jmp _switch13_exit ; case break
1020   09A6             _switch13_case2:
1021   09A6             _switch13_case3:
1022   09A6             ;; print_signed(*(int*)p); 
1023   09A6 FA FF FF      lea d, [bp + -1] ; $p
1024   09A9 2A            mov b, [d]
1025   09AA 74            mov d, b
1026   09AB 2A            mov b, [d]
1027   09AC FD AB         swp b
1028   09AE D8            push b
1029   09AF 07 74 0E      call print_signed
1030   09B2 51 02 00      add sp, 2
1031   09B5             ;; p = p + 2; 
1032   09B5 FA FF FF      lea d, [bp + -1] ; $p
1033   09B8 DA            push d
1034   09B9 FA FF FF      lea d, [bp + -1] ; $p
1035   09BC 2A            mov b, [d]
1036   09BD             ; START TERMS
1037   09BD D7            push a
1038   09BE 11            mov a, b
1039   09BF 26 02 00      mov b, $2
1040   09C2 56            add b, a
1041   09C3 E4            pop a
1042   09C4             ; END TERMS
1043   09C4 E7            pop d
1044   09C5 FD 43         mov [d], b
1045   09C7             ;; break; 
1046   09C7 0A 56 0A      jmp _switch13_exit ; case break
1047   09CA             _switch13_case4:
1048   09CA             ;; print_unsigned(*(unsigned int*)p); 
1049   09CA FA FF FF      lea d, [bp + -1] ; $p
1050   09CD 2A            mov b, [d]
1051   09CE 74            mov d, b
1052   09CF 2A            mov b, [d]
1053   09D0 FD AB         swp b
1054   09D2 D8            push b
1055   09D3 07 A6 14      call print_unsigned
1056   09D6 51 02 00      add sp, 2
1057   09D9             ;; p = p + 2; 
1058   09D9 FA FF FF      lea d, [bp + -1] ; $p
1059   09DC DA            push d
1060   09DD FA FF FF      lea d, [bp + -1] ; $p
1061   09E0 2A            mov b, [d]
1062   09E1             ; START TERMS
1063   09E1 D7            push a
1064   09E2 11            mov a, b
1065   09E3 26 02 00      mov b, $2
1066   09E6 56            add b, a
1067   09E7 E4            pop a
1068   09E8             ; END TERMS
1069   09E8 E7            pop d
1070   09E9 FD 43         mov [d], b
1071   09EB             ;; break; 
1072   09EB 0A 56 0A      jmp _switch13_exit ; case break
1073   09EE             _switch13_case5:
1074   09EE             
1075   09EE             ; --- BEGIN INLINE ASM BLOCK
1076   09EE FA FF FF      lea d, [bp + -1] ; $p
1077   09F1 FD 2A         mov d, [d]
1078   09F3 2A            mov b, [d]
1079   09F4 07 AC 18      call print_u16x
1080   09F7             ; --- END INLINE ASM BLOCK
1081   09F7             
1082   09F7             ;; p = p + 2; 
1083   09F7 FA FF FF      lea d, [bp + -1] ; $p
1084   09FA DA            push d
1085   09FB FA FF FF      lea d, [bp + -1] ; $p
1086   09FE 2A            mov b, [d]
1087   09FF             ; START TERMS
1088   09FF D7            push a
1089   0A00 11            mov a, b
1090   0A01 26 02 00      mov b, $2
1091   0A04 56            add b, a
1092   0A05 E4            pop a
1093   0A06             ; END TERMS
1094   0A06 E7            pop d
1095   0A07 FD 43         mov [d], b
1096   0A09             ;; break; 
1097   0A09 0A 56 0A      jmp _switch13_exit ; case break
1098   0A0C             _switch13_case6:
1099   0A0C             
1100   0A0C             ; --- BEGIN INLINE ASM BLOCK
1101   0A0C FA FF FF      lea d, [bp + -1] ; $p
1102   0A0F FD 2A         mov d, [d]
1103   0A11 1E            mov al, [d]
1104   0A12 23            mov ah, al
1105   0A13 07 0A 17      call _putchar
1106   0A16             ; --- END INLINE ASM BLOCK
1107   0A16             
1108   0A16             ;; p = p + 2; 
1109   0A16 FA FF FF      lea d, [bp + -1] ; $p
1110   0A19 DA            push d
1111   0A1A FA FF FF      lea d, [bp + -1] ; $p
1112   0A1D 2A            mov b, [d]
1113   0A1E             ; START TERMS
1114   0A1E D7            push a
1115   0A1F 11            mov a, b
1116   0A20 26 02 00      mov b, $2
1117   0A23 56            add b, a
1118   0A24 E4            pop a
1119   0A25             ; END TERMS
1120   0A25 E7            pop d
1121   0A26 FD 43         mov [d], b
1122   0A28             ;; break; 
1123   0A28 0A 56 0A      jmp _switch13_exit ; case break
1124   0A2B             _switch13_case7:
1125   0A2B             
1126   0A2B             ; --- BEGIN INLINE ASM BLOCK
1127   0A2B FA FF FF      lea d, [bp + -1] ; $p
1128   0A2E FD 2A         mov d, [d]
1129   0A30 FD 2A         mov d, [d]
1130   0A32 07 54 18      call _puts
1131   0A35             ; --- END INLINE ASM BLOCK
1132   0A35             
1133   0A35             ;; p = p + 2; 
1134   0A35 FA FF FF      lea d, [bp + -1] ; $p
1135   0A38 DA            push d
1136   0A39 FA FF FF      lea d, [bp + -1] ; $p
1137   0A3C 2A            mov b, [d]
1138   0A3D             ; START TERMS
1139   0A3D D7            push a
1140   0A3E 11            mov a, b
1141   0A3F 26 02 00      mov b, $2
1142   0A42 56            add b, a
1143   0A43 E4            pop a
1144   0A44             ; END TERMS
1145   0A44 E7            pop d
1146   0A45 FD 43         mov [d], b
1147   0A47             ;; break; 
1148   0A47 0A 56 0A      jmp _switch13_exit ; case break
1149   0A4A             _switch13_default:
1150   0A4A             ;; print("Error: Unknown argument type.\n"); 
1151   0A4A 26 92 23      mov b, _s4 ; "Error: Unknown argument type.\n"
1152   0A4D FD AB         swp b
1153   0A4F D8            push b
1154   0A50 07 C1 15      call print
1155   0A53 51 02 00      add sp, 2
1156   0A56             _switch13_exit:
1157   0A56             ;; format_p++; 
1158   0A56 FA FD FF      lea d, [bp + -3] ; $format_p
1159   0A59 2A            mov b, [d]
1160   0A5A FD 77         inc b
1161   0A5C FA FD FF      lea d, [bp + -3] ; $format_p
1162   0A5F FD 43         mov [d], b
1163   0A61 FD 7D         dec b
1164   0A63 0A 82 0A      jmp _if12_exit
1165   0A66             _if12_else:
1166   0A66             ;; putchar(*format_p); 
1167   0A66 FA FD FF      lea d, [bp + -3] ; $format_p
1168   0A69 2A            mov b, [d]
1169   0A6A 74            mov d, b
1170   0A6B 32            mov bl, [d]
1171   0A6C A7 00         mov bh, 0
1172   0A6E DD            push bl
1173   0A6F 07 79 15      call putchar
1174   0A72 51 01 00      add sp, 1
1175   0A75             ;; format_p++; 
1176   0A75 FA FD FF      lea d, [bp + -3] ; $format_p
1177   0A78 2A            mov b, [d]
1178   0A79 FD 77         inc b
1179   0A7B FA FD FF      lea d, [bp + -3] ; $format_p
1180   0A7E FD 43         mov [d], b
1181   0A80 FD 7D         dec b
1182   0A82             _if12_exit:
1183   0A82             _if11_exit:
1184   0A82             _for10_update:
1185   0A82 0A 45 08      jmp _for10_cond
1186   0A85             _for10_exit:
1187   0A85 F9            leave
1188   0A86 09            ret
1189   0A87             
1190   0A87             scanf:
1191   0A87 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1192   0A8A             ;; char *p, *format_p; 
1193   0A8A 52 02 00      sub sp, 2 ; p
1194   0A8D 52 02 00      sub sp, 2 ; format_p
1195   0A90             ;; char c; 
1196   0A90 52 01 00      sub sp, 1 ; c
1197   0A93             ;; int i; 
1198   0A93 52 02 00      sub sp, 2 ; i
1199   0A96             ;; char input_string[  512                    ]; 
1200   0A96 52 00 02      sub sp, 512 ; input_string
1201   0A99             ;; format_p = format; 
1202   0A99 FA FD FF      lea d, [bp + -3] ; $format_p
1203   0A9C DA            push d
1204   0A9D FA 05 00      lea d, [bp + 5] ; $format
1205   0AA0 2A            mov b, [d]
1206   0AA1 E7            pop d
1207   0AA2 FD 43         mov [d], b
1208   0AA4             ;; p = &format + 2; 
1209   0AA4 FA FF FF      lea d, [bp + -1] ; $p
1210   0AA7 DA            push d
1211   0AA8 FA 05 00      lea d, [bp + 5] ; $format
1212   0AAB 2D            mov b, d
1213   0AAC             ; START TERMS
1214   0AAC D7            push a
1215   0AAD 11            mov a, b
1216   0AAE 26 02 00      mov b, $2
1217   0AB1 56            add b, a
1218   0AB2 E4            pop a
1219   0AB3             ; END TERMS
1220   0AB3 E7            pop d
1221   0AB4 FD 43         mov [d], b
1222   0AB6             ;; for(;;){ 
1223   0AB6             _for17_init:
1224   0AB6             _for17_cond:
1225   0AB6             _for17_block:
1226   0AB6             ;; if(!*format_p) break; 
1227   0AB6             _if18_cond:
1228   0AB6 FA FD FF      lea d, [bp + -3] ; $format_p
1229   0AB9 2A            mov b, [d]
1230   0ABA 74            mov d, b
1231   0ABB 32            mov bl, [d]
1232   0ABC A7 00         mov bh, 0
1233   0ABE C0 00 00      cmp b, 0
1234   0AC1 FD 71         seq ; !
1235   0AC3 C0 00 00      cmp b, 0
1236   0AC6 C6 CF 0A      je _if18_else
1237   0AC9             _if18_true:
1238   0AC9             ;; break; 
1239   0AC9 0A CC 0C      jmp _for17_exit ; for break
1240   0ACC 0A C9 0C      jmp _if18_exit
1241   0ACF             _if18_else:
1242   0ACF             ;; if(*format_p == '%'){ 
1243   0ACF             _if19_cond:
1244   0ACF FA FD FF      lea d, [bp + -3] ; $format_p
1245   0AD2 2A            mov b, [d]
1246   0AD3 74            mov d, b
1247   0AD4 32            mov bl, [d]
1248   0AD5 A7 00         mov bh, 0
1249   0AD7             ; START RELATIONAL
1250   0AD7 D7            push a
1251   0AD8 11            mov a, b
1252   0AD9 26 25 00      mov b, $25
1253   0ADC B0            cmp a, b
1254   0ADD FD 71         seq ; ==
1255   0ADF E4            pop a
1256   0AE0             ; END RELATIONAL
1257   0AE0 C0 00 00      cmp b, 0
1258   0AE3 C6 AD 0C      je _if19_else
1259   0AE6             _if19_true:
1260   0AE6             ;; format_p++; 
1261   0AE6 FA FD FF      lea d, [bp + -3] ; $format_p
1262   0AE9 2A            mov b, [d]
1263   0AEA FD 77         inc b
1264   0AEC FA FD FF      lea d, [bp + -3] ; $format_p
1265   0AEF FD 43         mov [d], b
1266   0AF1 FD 7D         dec b
1267   0AF3             ;; switch(*format_p){ 
1268   0AF3             _switch20_expr:
1269   0AF3 FA FD FF      lea d, [bp + -3] ; $format_p
1270   0AF6 2A            mov b, [d]
1271   0AF7 74            mov d, b
1272   0AF8 32            mov bl, [d]
1273   0AF9 A7 00         mov bh, 0
1274   0AFB             _switch20_comparisons:
1275   0AFB C1 6C         cmp bl, $6c
1276   0AFD C6 29 0B      je _switch20_case0
1277   0B00 C1 4C         cmp bl, $4c
1278   0B02 C6 29 0B      je _switch20_case1
1279   0B05 C1 64         cmp bl, $64
1280   0B07 C6 BB 0B      je _switch20_case2
1281   0B0A C1 69         cmp bl, $69
1282   0B0C C6 BB 0B      je _switch20_case3
1283   0B0F C1 75         cmp bl, $75
1284   0B11 C6 E8 0B      je _switch20_case4
1285   0B14 C1 78         cmp bl, $78
1286   0B16 C6 15 0C      je _switch20_case5
1287   0B19 C1 63         cmp bl, $63
1288   0B1B C6 2A 0C      je _switch20_case6
1289   0B1E C1 73         cmp bl, $73
1290   0B20 C6 59 0C      je _switch20_case7
1291   0B23 0A 91 0C      jmp _switch20_default
1292   0B26 0A 9D 0C      jmp _switch20_exit
1293   0B29             _switch20_case0:
1294   0B29             _switch20_case1:
1295   0B29             ;; format_p++; 
1296   0B29 FA FD FF      lea d, [bp + -3] ; $format_p
1297   0B2C 2A            mov b, [d]
1298   0B2D FD 77         inc b
1299   0B2F FA FD FF      lea d, [bp + -3] ; $format_p
1300   0B32 FD 43         mov [d], b
1301   0B34 FD 7D         dec b
1302   0B36             ;; if(*format_p == 'd' || *format_p == 'i'); 
1303   0B36             _if21_cond:
1304   0B36 FA FD FF      lea d, [bp + -3] ; $format_p
1305   0B39 2A            mov b, [d]
1306   0B3A 74            mov d, b
1307   0B3B 32            mov bl, [d]
1308   0B3C A7 00         mov bh, 0
1309   0B3E             ; START RELATIONAL
1310   0B3E D7            push a
1311   0B3F 11            mov a, b
1312   0B40 26 64 00      mov b, $64
1313   0B43 B0            cmp a, b
1314   0B44 FD 71         seq ; ==
1315   0B46 E4            pop a
1316   0B47             ; END RELATIONAL
1317   0B47             ; START LOGICAL OR
1318   0B47 D7            push a
1319   0B48 11            mov a, b
1320   0B49 FA FD FF      lea d, [bp + -3] ; $format_p
1321   0B4C 2A            mov b, [d]
1322   0B4D 74            mov d, b
1323   0B4E 32            mov bl, [d]
1324   0B4F A7 00         mov bh, 0
1325   0B51             ; START RELATIONAL
1326   0B51 D7            push a
1327   0B52 11            mov a, b
1328   0B53 26 69 00      mov b, $69
1329   0B56 B0            cmp a, b
1330   0B57 FD 71         seq ; ==
1331   0B59 E4            pop a
1332   0B5A             ; END RELATIONAL
1333   0B5A FD A8         sor a, b ; ||
1334   0B5C E4            pop a
1335   0B5D             ; END LOGICAL OR
1336   0B5D C0 00 00      cmp b, 0
1337   0B60 C6 66 0B      je _if21_else
1338   0B63             _if21_true:
1339   0B63             ;; ; 
1340   0B63 0A A6 0B      jmp _if21_exit
1341   0B66             _if21_else:
1342   0B66             ;; if(*format_p == 'u'); 
1343   0B66             _if22_cond:
1344   0B66 FA FD FF      lea d, [bp + -3] ; $format_p
1345   0B69 2A            mov b, [d]
1346   0B6A 74            mov d, b
1347   0B6B 32            mov bl, [d]
1348   0B6C A7 00         mov bh, 0
1349   0B6E             ; START RELATIONAL
1350   0B6E D7            push a
1351   0B6F 11            mov a, b
1352   0B70 26 75 00      mov b, $75
1353   0B73 B0            cmp a, b
1354   0B74 FD 71         seq ; ==
1355   0B76 E4            pop a
1356   0B77             ; END RELATIONAL
1357   0B77 C0 00 00      cmp b, 0
1358   0B7A C6 80 0B      je _if22_else
1359   0B7D             _if22_true:
1360   0B7D             ;; ; 
1361   0B7D 0A A6 0B      jmp _if22_exit
1362   0B80             _if22_else:
1363   0B80             ;; if(*format_p == 'x'); 
1364   0B80             _if23_cond:
1365   0B80 FA FD FF      lea d, [bp + -3] ; $format_p
1366   0B83 2A            mov b, [d]
1367   0B84 74            mov d, b
1368   0B85 32            mov bl, [d]
1369   0B86 A7 00         mov bh, 0
1370   0B88             ; START RELATIONAL
1371   0B88 D7            push a
1372   0B89 11            mov a, b
1373   0B8A 26 78 00      mov b, $78
1374   0B8D B0            cmp a, b
1375   0B8E FD 71         seq ; ==
1376   0B90 E4            pop a
1377   0B91             ; END RELATIONAL
1378   0B91 C0 00 00      cmp b, 0
1379   0B94 C6 9A 0B      je _if23_else
1380   0B97             _if23_true:
1381   0B97             ;; ; 
1382   0B97 0A A6 0B      jmp _if23_exit
1383   0B9A             _if23_else:
1384   0B9A             ;; err("Unexpected format in printf."); 
1385   0B9A 26 75 23      mov b, _s3 ; "Unexpected format in printf."
1386   0B9D FD AB         swp b
1387   0B9F D8            push b
1388   0BA0 07 CE 0C      call err
1389   0BA3 51 02 00      add sp, 2
1390   0BA6             _if23_exit:
1391   0BA6             _if22_exit:
1392   0BA6             _if21_exit:
1393   0BA6             ;; p = p + 4; 
1394   0BA6 FA FF FF      lea d, [bp + -1] ; $p
1395   0BA9 DA            push d
1396   0BAA FA FF FF      lea d, [bp + -1] ; $p
1397   0BAD 2A            mov b, [d]
1398   0BAE             ; START TERMS
1399   0BAE D7            push a
1400   0BAF 11            mov a, b
1401   0BB0 26 04 00      mov b, $4
1402   0BB3 56            add b, a
1403   0BB4 E4            pop a
1404   0BB5             ; END TERMS
1405   0BB5 E7            pop d
1406   0BB6 FD 43         mov [d], b
1407   0BB8             ;; break; 
1408   0BB8 0A 9D 0C      jmp _switch20_exit ; case break
1409   0BBB             _switch20_case2:
1410   0BBB             _switch20_case3:
1411   0BBB             ;; i = scann(); 
1412   0BBB FA FA FF      lea d, [bp + -6] ; $i
1413   0BBE DA            push d
1414   0BBF 07 9C 15      call scann
1415   0BC2 E7            pop d
1416   0BC3 FD 43         mov [d], b
1417   0BC5             ;; **(int **)p = i; 
1418   0BC5 FA FF FF      lea d, [bp + -1] ; $p
1419   0BC8 2A            mov b, [d]
1420   0BC9 74            mov d, b
1421   0BCA 2A            mov b, [d]
1422   0BCB D8            push b
1423   0BCC FA FA FF      lea d, [bp + -6] ; $i
1424   0BCF 2A            mov b, [d]
1425   0BD0 E7            pop d
1426   0BD1 FD 43         mov [d], b
1427   0BD3             ;; p = p + 2; 
1428   0BD3 FA FF FF      lea d, [bp + -1] ; $p
1429   0BD6 DA            push d
1430   0BD7 FA FF FF      lea d, [bp + -1] ; $p
1431   0BDA 2A            mov b, [d]
1432   0BDB             ; START TERMS
1433   0BDB D7            push a
1434   0BDC 11            mov a, b
1435   0BDD 26 02 00      mov b, $2
1436   0BE0 56            add b, a
1437   0BE1 E4            pop a
1438   0BE2             ; END TERMS
1439   0BE2 E7            pop d
1440   0BE3 FD 43         mov [d], b
1441   0BE5             ;; break; 
1442   0BE5 0A 9D 0C      jmp _switch20_exit ; case break
1443   0BE8             _switch20_case4:
1444   0BE8             ;; i = scann(); 
1445   0BE8 FA FA FF      lea d, [bp + -6] ; $i
1446   0BEB DA            push d
1447   0BEC 07 9C 15      call scann
1448   0BEF E7            pop d
1449   0BF0 FD 43         mov [d], b
1450   0BF2             ;; **(int **)p = i; 
1451   0BF2 FA FF FF      lea d, [bp + -1] ; $p
1452   0BF5 2A            mov b, [d]
1453   0BF6 74            mov d, b
1454   0BF7 2A            mov b, [d]
1455   0BF8 D8            push b
1456   0BF9 FA FA FF      lea d, [bp + -6] ; $i
1457   0BFC 2A            mov b, [d]
1458   0BFD E7            pop d
1459   0BFE FD 43         mov [d], b
1460   0C00             ;; p = p + 2; 
1461   0C00 FA FF FF      lea d, [bp + -1] ; $p
1462   0C03 DA            push d
1463   0C04 FA FF FF      lea d, [bp + -1] ; $p
1464   0C07 2A            mov b, [d]
1465   0C08             ; START TERMS
1466   0C08 D7            push a
1467   0C09 11            mov a, b
1468   0C0A 26 02 00      mov b, $2
1469   0C0D 56            add b, a
1470   0C0E E4            pop a
1471   0C0F             ; END TERMS
1472   0C0F E7            pop d
1473   0C10 FD 43         mov [d], b
1474   0C12             ;; break; 
1475   0C12 0A 9D 0C      jmp _switch20_exit ; case break
1476   0C15             _switch20_case5:
1477   0C15             ;; p = p + 2; 
1478   0C15 FA FF FF      lea d, [bp + -1] ; $p
1479   0C18 DA            push d
1480   0C19 FA FF FF      lea d, [bp + -1] ; $p
1481   0C1C 2A            mov b, [d]
1482   0C1D             ; START TERMS
1483   0C1D D7            push a
1484   0C1E 11            mov a, b
1485   0C1F 26 02 00      mov b, $2
1486   0C22 56            add b, a
1487   0C23 E4            pop a
1488   0C24             ; END TERMS
1489   0C24 E7            pop d
1490   0C25 FD 43         mov [d], b
1491   0C27             ;; break; 
1492   0C27 0A 9D 0C      jmp _switch20_exit ; case break
1493   0C2A             _switch20_case6:
1494   0C2A             ;; c = getchar(); 
1495   0C2A FA FC FF      lea d, [bp + -4] ; $c
1496   0C2D DA            push d
1497   0C2E 07 86 15      call getchar
1498   0C31 E7            pop d
1499   0C32 FD 3E         mov [d], bl
1500   0C34             ;; **(char **)p = c; 
1501   0C34 FA FF FF      lea d, [bp + -1] ; $p
1502   0C37 2A            mov b, [d]
1503   0C38 74            mov d, b
1504   0C39 2A            mov b, [d]
1505   0C3A D8            push b
1506   0C3B FA FC FF      lea d, [bp + -4] ; $c
1507   0C3E 32            mov bl, [d]
1508   0C3F A7 00         mov bh, 0
1509   0C41 E7            pop d
1510   0C42 FD 43         mov [d], b
1511   0C44             ;; p = p + 2; 
1512   0C44 FA FF FF      lea d, [bp + -1] ; $p
1513   0C47 DA            push d
1514   0C48 FA FF FF      lea d, [bp + -1] ; $p
1515   0C4B 2A            mov b, [d]
1516   0C4C             ; START TERMS
1517   0C4C D7            push a
1518   0C4D 11            mov a, b
1519   0C4E 26 02 00      mov b, $2
1520   0C51 56            add b, a
1521   0C52 E4            pop a
1522   0C53             ; END TERMS
1523   0C53 E7            pop d
1524   0C54 FD 43         mov [d], b
1525   0C56             ;; break; 
1526   0C56 0A 9D 0C      jmp _switch20_exit ; case break
1527   0C59             _switch20_case7:
1528   0C59             ;; gets(input_string); 
1529   0C59 FA FA FD      lea d, [bp + -518] ; $input_string
1530   0C5C 2D            mov b, d
1531   0C5D FD AB         swp b
1532   0C5F D8            push b
1533   0C60 07 5A 0E      call gets
1534   0C63 51 02 00      add sp, 2
1535   0C66             ;; strcpy(*(char **)p, input_string); 
1536   0C66 FA FA FD      lea d, [bp + -518] ; $input_string
1537   0C69 2D            mov b, d
1538   0C6A FD AB         swp b
1539   0C6C D8            push b
1540   0C6D FA FF FF      lea d, [bp + -1] ; $p
1541   0C70 2A            mov b, [d]
1542   0C71 74            mov d, b
1543   0C72 2A            mov b, [d]
1544   0C73 FD AB         swp b
1545   0C75 D8            push b
1546   0C76 07 7B 04      call strcpy
1547   0C79 51 04 00      add sp, 4
1548   0C7C             ;; p = p + 2; 
1549   0C7C FA FF FF      lea d, [bp + -1] ; $p
1550   0C7F DA            push d
1551   0C80 FA FF FF      lea d, [bp + -1] ; $p
1552   0C83 2A            mov b, [d]
1553   0C84             ; START TERMS
1554   0C84 D7            push a
1555   0C85 11            mov a, b
1556   0C86 26 02 00      mov b, $2
1557   0C89 56            add b, a
1558   0C8A E4            pop a
1559   0C8B             ; END TERMS
1560   0C8B E7            pop d
1561   0C8C FD 43         mov [d], b
1562   0C8E             ;; break; 
1563   0C8E 0A 9D 0C      jmp _switch20_exit ; case break
1564   0C91             _switch20_default:
1565   0C91             ;; print("Error: Unknown argument type.\n"); 
1566   0C91 26 92 23      mov b, _s4 ; "Error: Unknown argument type.\n"
1567   0C94 FD AB         swp b
1568   0C96 D8            push b
1569   0C97 07 C1 15      call print
1570   0C9A 51 02 00      add sp, 2
1571   0C9D             _switch20_exit:
1572   0C9D             ;; format_p++; 
1573   0C9D FA FD FF      lea d, [bp + -3] ; $format_p
1574   0CA0 2A            mov b, [d]
1575   0CA1 FD 77         inc b
1576   0CA3 FA FD FF      lea d, [bp + -3] ; $format_p
1577   0CA6 FD 43         mov [d], b
1578   0CA8 FD 7D         dec b
1579   0CAA 0A C9 0C      jmp _if19_exit
1580   0CAD             _if19_else:
1581   0CAD             ;; putchar(*format_p); 
1582   0CAD FA FD FF      lea d, [bp + -3] ; $format_p
1583   0CB0 2A            mov b, [d]
1584   0CB1 74            mov d, b
1585   0CB2 32            mov bl, [d]
1586   0CB3 A7 00         mov bh, 0
1587   0CB5 DD            push bl
1588   0CB6 07 79 15      call putchar
1589   0CB9 51 01 00      add sp, 1
1590   0CBC             ;; format_p++; 
1591   0CBC FA FD FF      lea d, [bp + -3] ; $format_p
1592   0CBF 2A            mov b, [d]
1593   0CC0 FD 77         inc b
1594   0CC2 FA FD FF      lea d, [bp + -3] ; $format_p
1595   0CC5 FD 43         mov [d], b
1596   0CC7 FD 7D         dec b
1597   0CC9             _if19_exit:
1598   0CC9             _if18_exit:
1599   0CC9             _for17_update:
1600   0CC9 0A B6 0A      jmp _for17_cond
1601   0CCC             _for17_exit:
1602   0CCC F9            leave
1603   0CCD 09            ret
1604   0CCE             
1605   0CCE             err:
1606   0CCE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1607   0CD1             ;; print(e); 
1608   0CD1 FA 05 00      lea d, [bp + 5] ; $e
1609   0CD4 2A            mov b, [d]
1610   0CD5 FD AB         swp b
1611   0CD7 D8            push b
1612   0CD8 07 C1 15      call print
1613   0CDB 51 02 00      add sp, 2
1614   0CDE F9            leave
1615   0CDF 09            ret
1616   0CE0             
1617   0CE0             printx32:
1618   0CE0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1619   0CE3             
1620   0CE3             ; --- BEGIN INLINE ASM BLOCK
1621   0CE3 FA 05 00      lea d, [bp + 5] ; $hex
1622   0CE6 2B 02 00      mov b, [d+2]
1623   0CE9 07 AC 18      call print_u16x
1624   0CEC 2A            mov b, [d]
1625   0CED 07 AC 18      call print_u16x
1626   0CF0             ; --- END INLINE ASM BLOCK
1627   0CF0             
1628   0CF0 F9            leave
1629   0CF1 09            ret
1630   0CF2             
1631   0CF2             printx16:
1632   0CF2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1633   0CF5             
1634   0CF5             ; --- BEGIN INLINE ASM BLOCK
1635   0CF5 FA 05 00      lea d, [bp + 5] ; $hex
1636   0CF8 2A            mov b, [d]
1637   0CF9 07 AC 18      call print_u16x
1638   0CFC             ; --- END INLINE ASM BLOCK
1639   0CFC             
1640   0CFC F9            leave
1641   0CFD 09            ret
1642   0CFE             
1643   0CFE             printx8:
1644   0CFE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1645   0D01             
1646   0D01             ; --- BEGIN INLINE ASM BLOCK
1647   0D01 FA 05 00      lea d, [bp + 5] ; $hex
1648   0D04 32            mov bl, [d]
1649   0D05 07 F0 18      call print_u8x
1650   0D08             ; --- END INLINE ASM BLOCK
1651   0D08             
1652   0D08 F9            leave
1653   0D09 09            ret
1654   0D0A             
1655   0D0A             hex_str_to_int:
1656   0D0A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1657   0D0D             ;; int value = 0; 
1658   0D0D 52 02 00      sub sp, 2 ; value
1659   0D10             ; --- START LOCAL VAR INITIALIZATION
1660   0D10 FA FF FF      lea d, [bp + -1] ; $value
1661   0D13 DA            push d
1662   0D14 26 00 00      mov b, $0
1663   0D17 E7            pop d
1664   0D18 FD 43         mov [d], b
1665   0D1A             ; --- END LOCAL VAR INITIALIZATION
1666   0D1A             ;; int i; 
1667   0D1A 52 02 00      sub sp, 2 ; i
1668   0D1D             ;; char hex_char; 
1669   0D1D 52 01 00      sub sp, 1 ; hex_char
1670   0D20             ;; int len; 
1671   0D20 52 02 00      sub sp, 2 ; len
1672   0D23             ;; len = strlen(hex_string); 
1673   0D23 FA FA FF      lea d, [bp + -6] ; $len
1674   0D26 DA            push d
1675   0D27 FA 05 00      lea d, [bp + 5] ; $hex_string
1676   0D2A 2A            mov b, [d]
1677   0D2B FD AB         swp b
1678   0D2D D8            push b
1679   0D2E 07 F5 05      call strlen
1680   0D31 51 02 00      add sp, 2
1681   0D34 E7            pop d
1682   0D35 FD 43         mov [d], b
1683   0D37             ;; for (i = 0; i < len; i++) { 
1684   0D37             _for24_init:
1685   0D37 FA FD FF      lea d, [bp + -3] ; $i
1686   0D3A DA            push d
1687   0D3B 26 00 00      mov b, $0
1688   0D3E E7            pop d
1689   0D3F FD 43         mov [d], b
1690   0D41             _for24_cond:
1691   0D41 FA FD FF      lea d, [bp + -3] ; $i
1692   0D44 2A            mov b, [d]
1693   0D45             ; START RELATIONAL
1694   0D45 D7            push a
1695   0D46 11            mov a, b
1696   0D47 FA FA FF      lea d, [bp + -6] ; $len
1697   0D4A 2A            mov b, [d]
1698   0D4B B0            cmp a, b
1699   0D4C FD 73         slt ; < (signed)
1700   0D4E E4            pop a
1701   0D4F             ; END RELATIONAL
1702   0D4F C0 00 00      cmp b, 0
1703   0D52 C6 54 0E      je _for24_exit
1704   0D55             _for24_block:
1705   0D55             ;; hex_char = hex_string[i]; 
1706   0D55 FA FC FF      lea d, [bp + -4] ; $hex_char
1707   0D58 DA            push d
1708   0D59 FA 05 00      lea d, [bp + 5] ; $hex_string
1709   0D5C FD 2A         mov d, [d]
1710   0D5E D7            push a
1711   0D5F DA            push d
1712   0D60 FA FD FF      lea d, [bp + -3] ; $i
1713   0D63 2A            mov b, [d]
1714   0D64 E7            pop d
1715   0D65 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1716   0D69 E4            pop a
1717   0D6A 32            mov bl, [d]
1718   0D6B A7 00         mov bh, 0
1719   0D6D E7            pop d
1720   0D6E FD 3E         mov [d], bl
1721   0D70             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1722   0D70             _if25_cond:
1723   0D70 FA FC FF      lea d, [bp + -4] ; $hex_char
1724   0D73 32            mov bl, [d]
1725   0D74 A7 00         mov bh, 0
1726   0D76             ; START RELATIONAL
1727   0D76 D7            push a
1728   0D77 11            mov a, b
1729   0D78 26 61 00      mov b, $61
1730   0D7B B0            cmp a, b
1731   0D7C FD 80         sge ; >=
1732   0D7E E4            pop a
1733   0D7F             ; END RELATIONAL
1734   0D7F             ; START LOGICAL AND
1735   0D7F D7            push a
1736   0D80 11            mov a, b
1737   0D81 FA FC FF      lea d, [bp + -4] ; $hex_char
1738   0D84 32            mov bl, [d]
1739   0D85 A7 00         mov bh, 0
1740   0D87             ; START RELATIONAL
1741   0D87 D7            push a
1742   0D88 11            mov a, b
1743   0D89 26 66 00      mov b, $66
1744   0D8C B0            cmp a, b
1745   0D8D FD 73         slt ; <= (signed)
1746   0D8F E4            pop a
1747   0D90             ; END RELATIONAL
1748   0D90 FD A7         sand a, b
1749   0D92 E4            pop a
1750   0D93             ; END LOGICAL AND
1751   0D93 C0 00 00      cmp b, 0
1752   0D96 C6 C7 0D      je _if25_else
1753   0D99             _if25_true:
1754   0D99             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1755   0D99 FA FF FF      lea d, [bp + -1] ; $value
1756   0D9C DA            push d
1757   0D9D FA FF FF      lea d, [bp + -1] ; $value
1758   0DA0 2A            mov b, [d]
1759   0DA1             ; START FACTORS
1760   0DA1 D7            push a
1761   0DA2 11            mov a, b
1762   0DA3 26 10 00      mov b, $10
1763   0DA6 AC            mul a, b ; *
1764   0DA7 11            mov a, b
1765   0DA8 27            mov b, a
1766   0DA9 E4            pop a
1767   0DAA             ; END FACTORS
1768   0DAA             ; START TERMS
1769   0DAA D7            push a
1770   0DAB 11            mov a, b
1771   0DAC FA FC FF      lea d, [bp + -4] ; $hex_char
1772   0DAF 32            mov bl, [d]
1773   0DB0 A7 00         mov bh, 0
1774   0DB2             ; START TERMS
1775   0DB2 D7            push a
1776   0DB3 11            mov a, b
1777   0DB4 26 61 00      mov b, $61
1778   0DB7 60            sub a, b
1779   0DB8 27            mov b, a
1780   0DB9 11            mov a, b
1781   0DBA 26 0A 00      mov b, $a
1782   0DBD 56            add b, a
1783   0DBE E4            pop a
1784   0DBF             ; END TERMS
1785   0DBF 56            add b, a
1786   0DC0 E4            pop a
1787   0DC1             ; END TERMS
1788   0DC1 E7            pop d
1789   0DC2 FD 43         mov [d], b
1790   0DC4 0A 44 0E      jmp _if25_exit
1791   0DC7             _if25_else:
1792   0DC7             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1793   0DC7             _if26_cond:
1794   0DC7 FA FC FF      lea d, [bp + -4] ; $hex_char
1795   0DCA 32            mov bl, [d]
1796   0DCB A7 00         mov bh, 0
1797   0DCD             ; START RELATIONAL
1798   0DCD D7            push a
1799   0DCE 11            mov a, b
1800   0DCF 26 41 00      mov b, $41
1801   0DD2 B0            cmp a, b
1802   0DD3 FD 80         sge ; >=
1803   0DD5 E4            pop a
1804   0DD6             ; END RELATIONAL
1805   0DD6             ; START LOGICAL AND
1806   0DD6 D7            push a
1807   0DD7 11            mov a, b
1808   0DD8 FA FC FF      lea d, [bp + -4] ; $hex_char
1809   0DDB 32            mov bl, [d]
1810   0DDC A7 00         mov bh, 0
1811   0DDE             ; START RELATIONAL
1812   0DDE D7            push a
1813   0DDF 11            mov a, b
1814   0DE0 26 46 00      mov b, $46
1815   0DE3 B0            cmp a, b
1816   0DE4 FD 73         slt ; <= (signed)
1817   0DE6 E4            pop a
1818   0DE7             ; END RELATIONAL
1819   0DE7 FD A7         sand a, b
1820   0DE9 E4            pop a
1821   0DEA             ; END LOGICAL AND
1822   0DEA C0 00 00      cmp b, 0
1823   0DED C6 1E 0E      je _if26_else
1824   0DF0             _if26_true:
1825   0DF0             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1826   0DF0 FA FF FF      lea d, [bp + -1] ; $value
1827   0DF3 DA            push d
1828   0DF4 FA FF FF      lea d, [bp + -1] ; $value
1829   0DF7 2A            mov b, [d]
1830   0DF8             ; START FACTORS
1831   0DF8 D7            push a
1832   0DF9 11            mov a, b
1833   0DFA 26 10 00      mov b, $10
1834   0DFD AC            mul a, b ; *
1835   0DFE 11            mov a, b
1836   0DFF 27            mov b, a
1837   0E00 E4            pop a
1838   0E01             ; END FACTORS
1839   0E01             ; START TERMS
1840   0E01 D7            push a
1841   0E02 11            mov a, b
1842   0E03 FA FC FF      lea d, [bp + -4] ; $hex_char
1843   0E06 32            mov bl, [d]
1844   0E07 A7 00         mov bh, 0
1845   0E09             ; START TERMS
1846   0E09 D7            push a
1847   0E0A 11            mov a, b
1848   0E0B 26 41 00      mov b, $41
1849   0E0E 60            sub a, b
1850   0E0F 27            mov b, a
1851   0E10 11            mov a, b
1852   0E11 26 0A 00      mov b, $a
1853   0E14 56            add b, a
1854   0E15 E4            pop a
1855   0E16             ; END TERMS
1856   0E16 56            add b, a
1857   0E17 E4            pop a
1858   0E18             ; END TERMS
1859   0E18 E7            pop d
1860   0E19 FD 43         mov [d], b
1861   0E1B 0A 44 0E      jmp _if26_exit
1862   0E1E             _if26_else:
1863   0E1E             ;; value = (value * 16) + (hex_char - '0'); 
1864   0E1E FA FF FF      lea d, [bp + -1] ; $value
1865   0E21 DA            push d
1866   0E22 FA FF FF      lea d, [bp + -1] ; $value
1867   0E25 2A            mov b, [d]
1868   0E26             ; START FACTORS
1869   0E26 D7            push a
1870   0E27 11            mov a, b
1871   0E28 26 10 00      mov b, $10
1872   0E2B AC            mul a, b ; *
1873   0E2C 11            mov a, b
1874   0E2D 27            mov b, a
1875   0E2E E4            pop a
1876   0E2F             ; END FACTORS
1877   0E2F             ; START TERMS
1878   0E2F D7            push a
1879   0E30 11            mov a, b
1880   0E31 FA FC FF      lea d, [bp + -4] ; $hex_char
1881   0E34 32            mov bl, [d]
1882   0E35 A7 00         mov bh, 0
1883   0E37             ; START TERMS
1884   0E37 D7            push a
1885   0E38 11            mov a, b
1886   0E39 26 30 00      mov b, $30
1887   0E3C 60            sub a, b
1888   0E3D 27            mov b, a
1889   0E3E E4            pop a
1890   0E3F             ; END TERMS
1891   0E3F 56            add b, a
1892   0E40 E4            pop a
1893   0E41             ; END TERMS
1894   0E41 E7            pop d
1895   0E42 FD 43         mov [d], b
1896   0E44             _if26_exit:
1897   0E44             _if25_exit:
1898   0E44             _for24_update:
1899   0E44 FA FD FF      lea d, [bp + -3] ; $i
1900   0E47 2A            mov b, [d]
1901   0E48 FD 77         inc b
1902   0E4A FA FD FF      lea d, [bp + -3] ; $i
1903   0E4D FD 43         mov [d], b
1904   0E4F FD 7D         dec b
1905   0E51 0A 41 0D      jmp _for24_cond
1906   0E54             _for24_exit:
1907   0E54             ;; return value; 
1908   0E54 FA FF FF      lea d, [bp + -1] ; $value
1909   0E57 2A            mov b, [d]
1910   0E58 F9            leave
1911   0E59 09            ret
1912   0E5A             
1913   0E5A             gets:
1914   0E5A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1915   0E5D             
1916   0E5D             ; --- BEGIN INLINE ASM BLOCK
1917   0E5D FA 05 00      lea d, [bp + 5] ; $s
1918   0E60 15            mov a, [d]
1919   0E61 3C            mov d, a
1920   0E62 07 11 17      call _gets
1921   0E65             ; --- END INLINE ASM BLOCK
1922   0E65             
1923   0E65             ;; return strlen(s); 
1924   0E65 FA 05 00      lea d, [bp + 5] ; $s
1925   0E68 2A            mov b, [d]
1926   0E69 FD AB         swp b
1927   0E6B D8            push b
1928   0E6C 07 F5 05      call strlen
1929   0E6F 51 02 00      add sp, 2
1930   0E72 F9            leave
1931   0E73 09            ret
1932   0E74             
1933   0E74             print_signed:
1934   0E74 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1935   0E77             ;; char digits[5]; 
1936   0E77 52 05 00      sub sp, 5 ; digits
1937   0E7A             ;; int i = 0; 
1938   0E7A 52 02 00      sub sp, 2 ; i
1939   0E7D             ; --- START LOCAL VAR INITIALIZATION
1940   0E7D FA FA FF      lea d, [bp + -6] ; $i
1941   0E80 DA            push d
1942   0E81 26 00 00      mov b, $0
1943   0E84 E7            pop d
1944   0E85 FD 43         mov [d], b
1945   0E87             ; --- END LOCAL VAR INITIALIZATION
1946   0E87             ;; if (num < 0) { 
1947   0E87             _if27_cond:
1948   0E87 FA 05 00      lea d, [bp + 5] ; $num
1949   0E8A 2A            mov b, [d]
1950   0E8B             ; START RELATIONAL
1951   0E8B D7            push a
1952   0E8C 11            mov a, b
1953   0E8D 26 00 00      mov b, $0
1954   0E90 B0            cmp a, b
1955   0E91 FD 73         slt ; < (signed)
1956   0E93 E4            pop a
1957   0E94             ; END RELATIONAL
1958   0E94 C0 00 00      cmp b, 0
1959   0E97 C6 B4 0E      je _if27_else
1960   0E9A             _if27_true:
1961   0E9A             ;; putchar('-'); 
1962   0E9A 26 2D 00      mov b, $2d
1963   0E9D DD            push bl
1964   0E9E 07 79 15      call putchar
1965   0EA1 51 01 00      add sp, 1
1966   0EA4             ;; num = -num; 
1967   0EA4 FA 05 00      lea d, [bp + 5] ; $num
1968   0EA7 DA            push d
1969   0EA8 FA 05 00      lea d, [bp + 5] ; $num
1970   0EAB 2A            mov b, [d]
1971   0EAC FD 97         neg b
1972   0EAE E7            pop d
1973   0EAF FD 43         mov [d], b
1974   0EB1 0A D6 0E      jmp _if27_exit
1975   0EB4             _if27_else:
1976   0EB4             ;; if (num == 0) { 
1977   0EB4             _if28_cond:
1978   0EB4 FA 05 00      lea d, [bp + 5] ; $num
1979   0EB7 2A            mov b, [d]
1980   0EB8             ; START RELATIONAL
1981   0EB8 D7            push a
1982   0EB9 11            mov a, b
1983   0EBA 26 00 00      mov b, $0
1984   0EBD B0            cmp a, b
1985   0EBE FD 71         seq ; ==
1986   0EC0 E4            pop a
1987   0EC1             ; END RELATIONAL
1988   0EC1 C0 00 00      cmp b, 0
1989   0EC4 C6 D6 0E      je _if28_exit
1990   0EC7             _if28_true:
1991   0EC7             ;; putchar('0'); 
1992   0EC7 26 30 00      mov b, $30
1993   0ECA DD            push bl
1994   0ECB 07 79 15      call putchar
1995   0ECE 51 01 00      add sp, 1
1996   0ED1             ;; return; 
1997   0ED1 F9            leave
1998   0ED2 09            ret
1999   0ED3 0A D6 0E      jmp _if28_exit
2000   0ED6             _if28_exit:
2001   0ED6             _if27_exit:
2002   0ED6             ;; while (num > 0) { 
2003   0ED6             _while29_cond:
2004   0ED6 FA 05 00      lea d, [bp + 5] ; $num
2005   0ED9 2A            mov b, [d]
2006   0EDA             ; START RELATIONAL
2007   0EDA D7            push a
2008   0EDB 11            mov a, b
2009   0EDC 26 00 00      mov b, $0
2010   0EDF B0            cmp a, b
2011   0EE0 FD 7F         sgt ; >
2012   0EE2 E4            pop a
2013   0EE3             ; END RELATIONAL
2014   0EE3 C0 00 00      cmp b, 0
2015   0EE6 C6 30 0F      je _while29_exit
2016   0EE9             _while29_block:
2017   0EE9             ;; digits[i] = '0' + (num % 10); 
2018   0EE9 FA FC FF      lea d, [bp + -4] ; $digits
2019   0EEC D7            push a
2020   0EED DA            push d
2021   0EEE FA FA FF      lea d, [bp + -6] ; $i
2022   0EF1 2A            mov b, [d]
2023   0EF2 E7            pop d
2024   0EF3 5A            add d, b
2025   0EF4 E4            pop a
2026   0EF5 DA            push d
2027   0EF6 26 30 00      mov b, $30
2028   0EF9             ; START TERMS
2029   0EF9 D7            push a
2030   0EFA 11            mov a, b
2031   0EFB FA 05 00      lea d, [bp + 5] ; $num
2032   0EFE 2A            mov b, [d]
2033   0EFF             ; START FACTORS
2034   0EFF D7            push a
2035   0F00 11            mov a, b
2036   0F01 26 0A 00      mov b, $a
2037   0F04 AE            div a, b ; 
2038   0F05 11            mov a, b
2039   0F06 27            mov b, a
2040   0F07 E4            pop a
2041   0F08             ; END FACTORS
2042   0F08 56            add b, a
2043   0F09 E4            pop a
2044   0F0A             ; END TERMS
2045   0F0A E7            pop d
2046   0F0B FD 3E         mov [d], bl
2047   0F0D             ;; num = num / 10; 
2048   0F0D FA 05 00      lea d, [bp + 5] ; $num
2049   0F10 DA            push d
2050   0F11 FA 05 00      lea d, [bp + 5] ; $num
2051   0F14 2A            mov b, [d]
2052   0F15             ; START FACTORS
2053   0F15 D7            push a
2054   0F16 11            mov a, b
2055   0F17 26 0A 00      mov b, $a
2056   0F1A AE            div a, b
2057   0F1B 27            mov b, a
2058   0F1C E4            pop a
2059   0F1D             ; END FACTORS
2060   0F1D E7            pop d
2061   0F1E FD 43         mov [d], b
2062   0F20             ;; i++; 
2063   0F20 FA FA FF      lea d, [bp + -6] ; $i
2064   0F23 2A            mov b, [d]
2065   0F24 FD 77         inc b
2066   0F26 FA FA FF      lea d, [bp + -6] ; $i
2067   0F29 FD 43         mov [d], b
2068   0F2B FD 7D         dec b
2069   0F2D 0A D6 0E      jmp _while29_cond
2070   0F30             _while29_exit:
2071   0F30             ;; while (i > 0) { 
2072   0F30             _while30_cond:
2073   0F30 FA FA FF      lea d, [bp + -6] ; $i
2074   0F33 2A            mov b, [d]
2075   0F34             ; START RELATIONAL
2076   0F34 D7            push a
2077   0F35 11            mov a, b
2078   0F36 26 00 00      mov b, $0
2079   0F39 B0            cmp a, b
2080   0F3A FD 7F         sgt ; >
2081   0F3C E4            pop a
2082   0F3D             ; END RELATIONAL
2083   0F3D C0 00 00      cmp b, 0
2084   0F40 C6 69 0F      je _while30_exit
2085   0F43             _while30_block:
2086   0F43             ;; i--; 
2087   0F43 FA FA FF      lea d, [bp + -6] ; $i
2088   0F46 2A            mov b, [d]
2089   0F47 FD 7D         dec b
2090   0F49 FA FA FF      lea d, [bp + -6] ; $i
2091   0F4C FD 43         mov [d], b
2092   0F4E FD 77         inc b
2093   0F50             ;; putchar(digits[i]); 
2094   0F50 FA FC FF      lea d, [bp + -4] ; $digits
2095   0F53 D7            push a
2096   0F54 DA            push d
2097   0F55 FA FA FF      lea d, [bp + -6] ; $i
2098   0F58 2A            mov b, [d]
2099   0F59 E7            pop d
2100   0F5A 5A            add d, b
2101   0F5B E4            pop a
2102   0F5C 32            mov bl, [d]
2103   0F5D A7 00         mov bh, 0
2104   0F5F DD            push bl
2105   0F60 07 79 15      call putchar
2106   0F63 51 01 00      add sp, 1
2107   0F66 0A 30 0F      jmp _while30_cond
2108   0F69             _while30_exit:
2109   0F69 F9            leave
2110   0F6A 09            ret
2111   0F6B             
2112   0F6B             print_signed_long:
2113   0F6B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2114   0F6E             ;; char digits[10]; 
2115   0F6E 52 0A 00      sub sp, 10 ; digits
2116   0F71             ;; int i = 0; 
2117   0F71 52 02 00      sub sp, 2 ; i
2118   0F74             ; --- START LOCAL VAR INITIALIZATION
2119   0F74 FA F5 FF      lea d, [bp + -11] ; $i
2120   0F77 DA            push d
2121   0F78 26 00 00      mov b, $0
2122   0F7B E7            pop d
2123   0F7C FD 43         mov [d], b
2124   0F7E             ; --- END LOCAL VAR INITIALIZATION
2125   0F7E             ;; if (num < 0) { 
2126   0F7E             _if31_cond:
2127   0F7E FA 05 00      lea d, [bp + 5] ; $num
2128   0F81 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2129   0F84 FD 39         mov c, b ; And place it into C
2130   0F86 2A            mov b, [d] ; Lower Word in B
2131   0F87             ; START RELATIONAL
2132   0F87 D7            push a
2133   0F88 FD D8         push g
2134   0F8A 11            mov a, b
2135   0F8B FD 7A         mov g, c
2136   0F8D 26 00 00      mov b, $0
2137   0F90 38 00 00      mov c, 0
2138   0F93 FD AF 00 00   cmp32 ga, cb
2138   0F97 00 00 00 00 
2138   0F9B 00 00 00 00 
2138   0F9F 00 00 00 00 
2138   0FA3 00 00 00 00 
2138   0FA7 00 00 00 00 
2138   0FAB 00 00 00 00 
2138   0FAF 00 00 00 00 
2138   0FB3 00 00 00 00 
2138   0FB7 00 00 00 00 
2138   0FBB 00 00 00 00 
2138   0FBF 00 00 00 00 
2138   0FC3 00 00 00 00 
2138   0FC7 00 00 00 00 
2138   0FCB 00 00 00 00 
2138   0FCF 00 00 00 00 
2138   0FD3 00 00 00 00 
2138   0FD7 00 00 00 00 
2138   0FDB 00 00 00 00 
2138   0FDF 00 00 00 00 
2138   0FE3 00 00 00 00 
2138   0FE7 00 00 00 00 
2138   0FEB 00 00 00 00 
2138   0FEF 00 00 00 00 
2138   0FF3 00 00 00 00 
2138   0FF7 00 00 00 00 
2138   0FFB 00 00 00 00 
2138   0FFF 00 00 00 00 
2138   1003 00 00 00 00 
2138   1007 00 00 00 00 
2138   100B 00 00 00 00 
2138   100F 00 00 00 00 
2138   1013 00 00 00 00 
2138   1017 00 00 00 00 
2138   101B 00 00 00 00 
2138   101F 00 00 00 00 
2138   1023 00 00 00 00 
2138   1027 00 00 00 00 
2138   102B 00 00 00 00 
2138   102F 00 00 00 00 
2138   1033 00 00 00 00 
2138   1037 00 00 00 00 
2138   103B 00 00 00 00 
2138   103F 00 00 00 00 
2138   1043 00 00 00 00 
2138   1047 00 00 00 00 
2138   104B 00 00 00 00 
2138   104F 00 00 00 00 
2138   1053 00 00 00 00 
2138   1057 00 00 00 00 
2138   105B 00 00 00 00 
2138   105F 00 00 00 00 
2138   1063 00 00 00 00 
2138   1067 00 00 00 00 
2138   106B 00 00 00 00 
2138   106F 00 00 00 00 
2138   1073 00 00 00 00 
2138   1077 00 00 00 00 
2138   107B 00 00 00 00 
2138   107F 00 00 00 00 
2138   1083 00 00 00 00 
2138   1087 00 00 00 00 
2138   108B 00 00 00 00 
2138   108F 00 00 00 00 
2138   1093 00 
2139   1094 FD 73         slt ; <
2140   1096 FD F1         pop g
2141   1098 E4            pop a
2142   1099             ; END RELATIONAL
2143   1099 C0 00 00      cmp b, 0
2144   109C C6 C3 10      je _if31_else
2145   109F             _if31_true:
2146   109F             ;; putchar('-'); 
2147   109F 26 2D 00      mov b, $2d
2148   10A2 DD            push bl
2149   10A3 07 79 15      call putchar
2150   10A6 51 01 00      add sp, 1
2151   10A9             ;; num = -num; 
2152   10A9 FA 05 00      lea d, [bp + 5] ; $num
2153   10AC DA            push d
2154   10AD FA 05 00      lea d, [bp + 5] ; $num
2155   10B0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2156   10B3 FD 39         mov c, b ; And place it into C
2157   10B5 2A            mov b, [d] ; Lower Word in B
2158   10B6 FD 97         neg b
2159   10B8 E7            pop d
2160   10B9 FD 43         mov [d], b
2161   10BB 28            mov b, c
2162   10BC FD 44 02 00   mov [d + 2], b
2163   10C0 0A F3 11      jmp _if31_exit
2164   10C3             _if31_else:
2165   10C3             ;; if (num == 0) { 
2166   10C3             _if32_cond:
2167   10C3 FA 05 00      lea d, [bp + 5] ; $num
2168   10C6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2169   10C9 FD 39         mov c, b ; And place it into C
2170   10CB 2A            mov b, [d] ; Lower Word in B
2171   10CC             ; START RELATIONAL
2172   10CC D7            push a
2173   10CD FD D8         push g
2174   10CF 11            mov a, b
2175   10D0 FD 7A         mov g, c
2176   10D2 26 00 00      mov b, $0
2177   10D5 38 00 00      mov c, 0
2178   10D8 FD AF 00 00   cmp32 ga, cb
2178   10DC 00 00 00 00 
2178   10E0 00 00 00 00 
2178   10E4 00 00 00 00 
2178   10E8 00 00 00 00 
2178   10EC 00 00 00 00 
2178   10F0 00 00 00 00 
2178   10F4 00 00 00 00 
2178   10F8 00 00 00 00 
2178   10FC 00 00 00 00 
2178   1100 00 00 00 00 
2178   1104 00 00 00 00 
2178   1108 00 00 00 00 
2178   110C 00 00 00 00 
2178   1110 00 00 00 00 
2178   1114 00 00 00 00 
2178   1118 00 00 00 00 
2178   111C 00 00 00 00 
2178   1120 00 00 00 00 
2178   1124 00 00 00 00 
2178   1128 00 00 00 00 
2178   112C 00 00 00 00 
2178   1130 00 00 00 00 
2178   1134 00 00 00 00 
2178   1138 00 00 00 00 
2178   113C 00 00 00 00 
2178   1140 00 00 00 00 
2178   1144 00 00 00 00 
2178   1148 00 00 00 00 
2178   114C 00 00 00 00 
2178   1150 00 00 00 00 
2178   1154 00 00 00 00 
2178   1158 00 00 00 00 
2178   115C 00 00 00 00 
2178   1160 00 00 00 00 
2178   1164 00 00 00 00 
2178   1168 00 00 00 00 
2178   116C 00 00 00 00 
2178   1170 00 00 00 00 
2178   1174 00 00 00 00 
2178   1178 00 00 00 00 
2178   117C 00 00 00 00 
2178   1180 00 00 00 00 
2178   1184 00 00 00 00 
2178   1188 00 00 00 00 
2178   118C 00 00 00 00 
2178   1190 00 00 00 00 
2178   1194 00 00 00 00 
2178   1198 00 00 00 00 
2178   119C 00 00 00 00 
2178   11A0 00 00 00 00 
2178   11A4 00 00 00 00 
2178   11A8 00 00 00 00 
2178   11AC 00 00 00 00 
2178   11B0 00 00 00 00 
2178   11B4 00 00 00 00 
2178   11B8 00 00 00 00 
2178   11BC 00 00 00 00 
2178   11C0 00 00 00 00 
2178   11C4 00 00 00 00 
2178   11C8 00 00 00 00 
2178   11CC 00 00 00 00 
2178   11D0 00 00 00 00 
2178   11D4 00 00 00 00 
2178   11D8 00 
2179   11D9 FD 71         seq ; ==
2180   11DB FD F1         pop g
2181   11DD E4            pop a
2182   11DE             ; END RELATIONAL
2183   11DE C0 00 00      cmp b, 0
2184   11E1 C6 F3 11      je _if32_exit
2185   11E4             _if32_true:
2186   11E4             ;; putchar('0'); 
2187   11E4 26 30 00      mov b, $30
2188   11E7 DD            push bl
2189   11E8 07 79 15      call putchar
2190   11EB 51 01 00      add sp, 1
2191   11EE             ;; return; 
2192   11EE F9            leave
2193   11EF 09            ret
2194   11F0 0A F3 11      jmp _if32_exit
2195   11F3             _if32_exit:
2196   11F3             _if31_exit:
2197   11F3             ;; while (num > 0) { 
2198   11F3             _while33_cond:
2199   11F3 FA 05 00      lea d, [bp + 5] ; $num
2200   11F6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2201   11F9 FD 39         mov c, b ; And place it into C
2202   11FB 2A            mov b, [d] ; Lower Word in B
2203   11FC             ; START RELATIONAL
2204   11FC D7            push a
2205   11FD FD D8         push g
2206   11FF 11            mov a, b
2207   1200 FD 7A         mov g, c
2208   1202 26 00 00      mov b, $0
2209   1205 38 00 00      mov c, 0
2210   1208 FD 7F         sgt
2211   120A FD F1         pop g
2212   120C E4            pop a
2213   120D             ; END RELATIONAL
2214   120D C0 00 00      cmp b, 0
2215   1210 C6 70 12      je _while33_exit
2216   1213             _while33_block:
2217   1213             ;; digits[i] = '0' + (num % 10); 
2218   1213 FA F7 FF      lea d, [bp + -9] ; $digits
2219   1216 D7            push a
2220   1217 DA            push d
2221   1218 FA F5 FF      lea d, [bp + -11] ; $i
2222   121B 2A            mov b, [d]
2223   121C E7            pop d
2224   121D 5A            add d, b
2225   121E E4            pop a
2226   121F DA            push d
2227   1220 26 30 00      mov b, $30
2228   1223             ; START TERMS
2229   1223 D7            push a
2230   1224 11            mov a, b
2231   1225 FA 05 00      lea d, [bp + 5] ; $num
2232   1228 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2233   122B FD 39         mov c, b ; And place it into C
2234   122D 2A            mov b, [d] ; Lower Word in B
2235   122E             ; START FACTORS
2236   122E D7            push a
2237   122F 11            mov a, b
2238   1230 26 0A 00      mov b, $a
2239   1233 AE            div a, b ; 
2240   1234 11            mov a, b
2241   1235 27            mov b, a
2242   1236 E4            pop a
2243   1237             ; END FACTORS
2244   1237 54            add a, b
2245   1238 D7            push a
2246   1239 FD 12         mov a, g
2247   123B 28            mov b, c
2248   123C 5C            adc a, b
2249   123D 39            mov c, a
2250   123E E5            pop b
2251   123F E4            pop a
2252   1240             ; END TERMS
2253   1240 E7            pop d
2254   1241 FD 3E         mov [d], bl
2255   1243             ;; num = num / 10; 
2256   1243 FA 05 00      lea d, [bp + 5] ; $num
2257   1246 DA            push d
2258   1247 FA 05 00      lea d, [bp + 5] ; $num
2259   124A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2260   124D FD 39         mov c, b ; And place it into C
2261   124F 2A            mov b, [d] ; Lower Word in B
2262   1250             ; START FACTORS
2263   1250 D7            push a
2264   1251 11            mov a, b
2265   1252 26 0A 00      mov b, $a
2266   1255 AE            div a, b
2267   1256 27            mov b, a
2268   1257 E4            pop a
2269   1258             ; END FACTORS
2270   1258 E7            pop d
2271   1259 FD 43         mov [d], b
2272   125B 28            mov b, c
2273   125C FD 44 02 00   mov [d + 2], b
2274   1260             ;; i++; 
2275   1260 FA F5 FF      lea d, [bp + -11] ; $i
2276   1263 2A            mov b, [d]
2277   1264 FD 77         inc b
2278   1266 FA F5 FF      lea d, [bp + -11] ; $i
2279   1269 FD 43         mov [d], b
2280   126B FD 7D         dec b
2281   126D 0A F3 11      jmp _while33_cond
2282   1270             _while33_exit:
2283   1270             ;; while (i > 0) { 
2284   1270             _while34_cond:
2285   1270 FA F5 FF      lea d, [bp + -11] ; $i
2286   1273 2A            mov b, [d]
2287   1274             ; START RELATIONAL
2288   1274 D7            push a
2289   1275 11            mov a, b
2290   1276 26 00 00      mov b, $0
2291   1279 B0            cmp a, b
2292   127A FD 7F         sgt ; >
2293   127C E4            pop a
2294   127D             ; END RELATIONAL
2295   127D C0 00 00      cmp b, 0
2296   1280 C6 A9 12      je _while34_exit
2297   1283             _while34_block:
2298   1283             ;; i--; 
2299   1283 FA F5 FF      lea d, [bp + -11] ; $i
2300   1286 2A            mov b, [d]
2301   1287 FD 7D         dec b
2302   1289 FA F5 FF      lea d, [bp + -11] ; $i
2303   128C FD 43         mov [d], b
2304   128E FD 77         inc b
2305   1290             ;; putchar(digits[i]); 
2306   1290 FA F7 FF      lea d, [bp + -9] ; $digits
2307   1293 D7            push a
2308   1294 DA            push d
2309   1295 FA F5 FF      lea d, [bp + -11] ; $i
2310   1298 2A            mov b, [d]
2311   1299 E7            pop d
2312   129A 5A            add d, b
2313   129B E4            pop a
2314   129C 32            mov bl, [d]
2315   129D A7 00         mov bh, 0
2316   129F DD            push bl
2317   12A0 07 79 15      call putchar
2318   12A3 51 01 00      add sp, 1
2319   12A6 0A 70 12      jmp _while34_cond
2320   12A9             _while34_exit:
2321   12A9 F9            leave
2322   12AA 09            ret
2323   12AB             
2324   12AB             print_unsigned_long:
2325   12AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2326   12AE             ;; char digits[10]; 
2327   12AE 52 0A 00      sub sp, 10 ; digits
2328   12B1             ;; int i; 
2329   12B1 52 02 00      sub sp, 2 ; i
2330   12B4             ;; i = 0; 
2331   12B4 FA F5 FF      lea d, [bp + -11] ; $i
2332   12B7 DA            push d
2333   12B8 26 00 00      mov b, $0
2334   12BB E7            pop d
2335   12BC FD 43         mov [d], b
2336   12BE             ;; if(num == 0){ 
2337   12BE             _if35_cond:
2338   12BE FA 05 00      lea d, [bp + 5] ; $num
2339   12C1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2340   12C4 FD 39         mov c, b ; And place it into C
2341   12C6 2A            mov b, [d] ; Lower Word in B
2342   12C7             ; START RELATIONAL
2343   12C7 D7            push a
2344   12C8 FD D8         push g
2345   12CA 11            mov a, b
2346   12CB FD 7A         mov g, c
2347   12CD 26 00 00      mov b, $0
2348   12D0 38 00 00      mov c, 0
2349   12D3 FD AF 00 00   cmp32 ga, cb
2349   12D7 00 00 00 00 
2349   12DB 00 00 00 00 
2349   12DF 00 00 00 00 
2349   12E3 00 00 00 00 
2349   12E7 00 00 00 00 
2349   12EB 00 00 00 00 
2349   12EF 00 00 00 00 
2349   12F3 00 00 00 00 
2349   12F7 00 00 00 00 
2349   12FB 00 00 00 00 
2349   12FF 00 00 00 00 
2349   1303 00 00 00 00 
2349   1307 00 00 00 00 
2349   130B 00 00 00 00 
2349   130F 00 00 00 00 
2349   1313 00 00 00 00 
2349   1317 00 00 00 00 
2349   131B 00 00 00 00 
2349   131F 00 00 00 00 
2349   1323 00 00 00 00 
2349   1327 00 00 00 00 
2349   132B 00 00 00 00 
2349   132F 00 00 00 00 
2349   1333 00 00 00 00 
2349   1337 00 00 00 00 
2349   133B 00 00 00 00 
2349   133F 00 00 00 00 
2349   1343 00 00 00 00 
2349   1347 00 00 00 00 
2349   134B 00 00 00 00 
2349   134F 00 00 00 00 
2349   1353 00 00 00 00 
2349   1357 00 00 00 00 
2349   135B 00 00 00 00 
2349   135F 00 00 00 00 
2349   1363 00 00 00 00 
2349   1367 00 00 00 00 
2349   136B 00 00 00 00 
2349   136F 00 00 00 00 
2349   1373 00 00 00 00 
2349   1377 00 00 00 00 
2349   137B 00 00 00 00 
2349   137F 00 00 00 00 
2349   1383 00 00 00 00 
2349   1387 00 00 00 00 
2349   138B 00 00 00 00 
2349   138F 00 00 00 00 
2349   1393 00 00 00 00 
2349   1397 00 00 00 00 
2349   139B 00 00 00 00 
2349   139F 00 00 00 00 
2349   13A3 00 00 00 00 
2349   13A7 00 00 00 00 
2349   13AB 00 00 00 00 
2349   13AF 00 00 00 00 
2349   13B3 00 00 00 00 
2349   13B7 00 00 00 00 
2349   13BB 00 00 00 00 
2349   13BF 00 00 00 00 
2349   13C3 00 00 00 00 
2349   13C7 00 00 00 00 
2349   13CB 00 00 00 00 
2349   13CF 00 00 00 00 
2349   13D3 00 
2350   13D4 FD 71         seq ; ==
2351   13D6 FD F1         pop g
2352   13D8 E4            pop a
2353   13D9             ; END RELATIONAL
2354   13D9 C0 00 00      cmp b, 0
2355   13DC C6 EE 13      je _if35_exit
2356   13DF             _if35_true:
2357   13DF             ;; putchar('0'); 
2358   13DF 26 30 00      mov b, $30
2359   13E2 DD            push bl
2360   13E3 07 79 15      call putchar
2361   13E6 51 01 00      add sp, 1
2362   13E9             ;; return; 
2363   13E9 F9            leave
2364   13EA 09            ret
2365   13EB 0A EE 13      jmp _if35_exit
2366   13EE             _if35_exit:
2367   13EE             ;; while (num > 0) { 
2368   13EE             _while36_cond:
2369   13EE FA 05 00      lea d, [bp + 5] ; $num
2370   13F1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2371   13F4 FD 39         mov c, b ; And place it into C
2372   13F6 2A            mov b, [d] ; Lower Word in B
2373   13F7             ; START RELATIONAL
2374   13F7 D7            push a
2375   13F8 FD D8         push g
2376   13FA 11            mov a, b
2377   13FB FD 7A         mov g, c
2378   13FD 26 00 00      mov b, $0
2379   1400 38 00 00      mov c, 0
2380   1403 FD 81         sgu
2381   1405 FD F1         pop g
2382   1407 E4            pop a
2383   1408             ; END RELATIONAL
2384   1408 C0 00 00      cmp b, 0
2385   140B C6 6B 14      je _while36_exit
2386   140E             _while36_block:
2387   140E             ;; digits[i] = '0' + (num % 10); 
2388   140E FA F7 FF      lea d, [bp + -9] ; $digits
2389   1411 D7            push a
2390   1412 DA            push d
2391   1413 FA F5 FF      lea d, [bp + -11] ; $i
2392   1416 2A            mov b, [d]
2393   1417 E7            pop d
2394   1418 5A            add d, b
2395   1419 E4            pop a
2396   141A DA            push d
2397   141B 26 30 00      mov b, $30
2398   141E             ; START TERMS
2399   141E D7            push a
2400   141F 11            mov a, b
2401   1420 FA 05 00      lea d, [bp + 5] ; $num
2402   1423 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2403   1426 FD 39         mov c, b ; And place it into C
2404   1428 2A            mov b, [d] ; Lower Word in B
2405   1429             ; START FACTORS
2406   1429 D7            push a
2407   142A 11            mov a, b
2408   142B 26 0A 00      mov b, $a
2409   142E AE            div a, b ; 
2410   142F 11            mov a, b
2411   1430 27            mov b, a
2412   1431 E4            pop a
2413   1432             ; END FACTORS
2414   1432 54            add a, b
2415   1433 D7            push a
2416   1434 FD 12         mov a, g
2417   1436 28            mov b, c
2418   1437 5C            adc a, b
2419   1438 39            mov c, a
2420   1439 E5            pop b
2421   143A E4            pop a
2422   143B             ; END TERMS
2423   143B E7            pop d
2424   143C FD 3E         mov [d], bl
2425   143E             ;; num = num / 10; 
2426   143E FA 05 00      lea d, [bp + 5] ; $num
2427   1441 DA            push d
2428   1442 FA 05 00      lea d, [bp + 5] ; $num
2429   1445 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2430   1448 FD 39         mov c, b ; And place it into C
2431   144A 2A            mov b, [d] ; Lower Word in B
2432   144B             ; START FACTORS
2433   144B D7            push a
2434   144C 11            mov a, b
2435   144D 26 0A 00      mov b, $a
2436   1450 AE            div a, b
2437   1451 27            mov b, a
2438   1452 E4            pop a
2439   1453             ; END FACTORS
2440   1453 E7            pop d
2441   1454 FD 43         mov [d], b
2442   1456 28            mov b, c
2443   1457 FD 44 02 00   mov [d + 2], b
2444   145B             ;; i++; 
2445   145B FA F5 FF      lea d, [bp + -11] ; $i
2446   145E 2A            mov b, [d]
2447   145F FD 77         inc b
2448   1461 FA F5 FF      lea d, [bp + -11] ; $i
2449   1464 FD 43         mov [d], b
2450   1466 FD 7D         dec b
2451   1468 0A EE 13      jmp _while36_cond
2452   146B             _while36_exit:
2453   146B             ;; while (i > 0) { 
2454   146B             _while37_cond:
2455   146B FA F5 FF      lea d, [bp + -11] ; $i
2456   146E 2A            mov b, [d]
2457   146F             ; START RELATIONAL
2458   146F D7            push a
2459   1470 11            mov a, b
2460   1471 26 00 00      mov b, $0
2461   1474 B0            cmp a, b
2462   1475 FD 7F         sgt ; >
2463   1477 E4            pop a
2464   1478             ; END RELATIONAL
2465   1478 C0 00 00      cmp b, 0
2466   147B C6 A4 14      je _while37_exit
2467   147E             _while37_block:
2468   147E             ;; i--; 
2469   147E FA F5 FF      lea d, [bp + -11] ; $i
2470   1481 2A            mov b, [d]
2471   1482 FD 7D         dec b
2472   1484 FA F5 FF      lea d, [bp + -11] ; $i
2473   1487 FD 43         mov [d], b
2474   1489 FD 77         inc b
2475   148B             ;; putchar(digits[i]); 
2476   148B FA F7 FF      lea d, [bp + -9] ; $digits
2477   148E D7            push a
2478   148F DA            push d
2479   1490 FA F5 FF      lea d, [bp + -11] ; $i
2480   1493 2A            mov b, [d]
2481   1494 E7            pop d
2482   1495 5A            add d, b
2483   1496 E4            pop a
2484   1497 32            mov bl, [d]
2485   1498 A7 00         mov bh, 0
2486   149A DD            push bl
2487   149B 07 79 15      call putchar
2488   149E 51 01 00      add sp, 1
2489   14A1 0A 6B 14      jmp _while37_cond
2490   14A4             _while37_exit:
2491   14A4 F9            leave
2492   14A5 09            ret
2493   14A6             
2494   14A6             print_unsigned:
2495   14A6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2496   14A9             ;; char digits[5]; 
2497   14A9 52 05 00      sub sp, 5 ; digits
2498   14AC             ;; int i; 
2499   14AC 52 02 00      sub sp, 2 ; i
2500   14AF             ;; i = 0; 
2501   14AF FA FA FF      lea d, [bp + -6] ; $i
2502   14B2 DA            push d
2503   14B3 26 00 00      mov b, $0
2504   14B6 E7            pop d
2505   14B7 FD 43         mov [d], b
2506   14B9             ;; if(num == 0){ 
2507   14B9             _if38_cond:
2508   14B9 FA 05 00      lea d, [bp + 5] ; $num
2509   14BC 2A            mov b, [d]
2510   14BD             ; START RELATIONAL
2511   14BD D7            push a
2512   14BE 11            mov a, b
2513   14BF 26 00 00      mov b, $0
2514   14C2 B0            cmp a, b
2515   14C3 FD 71         seq ; ==
2516   14C5 E4            pop a
2517   14C6             ; END RELATIONAL
2518   14C6 C0 00 00      cmp b, 0
2519   14C9 C6 DB 14      je _if38_exit
2520   14CC             _if38_true:
2521   14CC             ;; putchar('0'); 
2522   14CC 26 30 00      mov b, $30
2523   14CF DD            push bl
2524   14D0 07 79 15      call putchar
2525   14D3 51 01 00      add sp, 1
2526   14D6             ;; return; 
2527   14D6 F9            leave
2528   14D7 09            ret
2529   14D8 0A DB 14      jmp _if38_exit
2530   14DB             _if38_exit:
2531   14DB             ;; while (num > 0) { 
2532   14DB             _while39_cond:
2533   14DB FA 05 00      lea d, [bp + 5] ; $num
2534   14DE 2A            mov b, [d]
2535   14DF             ; START RELATIONAL
2536   14DF D7            push a
2537   14E0 11            mov a, b
2538   14E1 26 00 00      mov b, $0
2539   14E4 B0            cmp a, b
2540   14E5 FD 81         sgu ; > (unsigned)
2541   14E7 E4            pop a
2542   14E8             ; END RELATIONAL
2543   14E8 C0 00 00      cmp b, 0
2544   14EB C6 35 15      je _while39_exit
2545   14EE             _while39_block:
2546   14EE             ;; digits[i] = '0' + (num % 10); 
2547   14EE FA FC FF      lea d, [bp + -4] ; $digits
2548   14F1 D7            push a
2549   14F2 DA            push d
2550   14F3 FA FA FF      lea d, [bp + -6] ; $i
2551   14F6 2A            mov b, [d]
2552   14F7 E7            pop d
2553   14F8 5A            add d, b
2554   14F9 E4            pop a
2555   14FA DA            push d
2556   14FB 26 30 00      mov b, $30
2557   14FE             ; START TERMS
2558   14FE D7            push a
2559   14FF 11            mov a, b
2560   1500 FA 05 00      lea d, [bp + 5] ; $num
2561   1503 2A            mov b, [d]
2562   1504             ; START FACTORS
2563   1504 D7            push a
2564   1505 11            mov a, b
2565   1506 26 0A 00      mov b, $a
2566   1509 AE            div a, b ; 
2567   150A 11            mov a, b
2568   150B 27            mov b, a
2569   150C E4            pop a
2570   150D             ; END FACTORS
2571   150D 56            add b, a
2572   150E E4            pop a
2573   150F             ; END TERMS
2574   150F E7            pop d
2575   1510 FD 3E         mov [d], bl
2576   1512             ;; num = num / 10; 
2577   1512 FA 05 00      lea d, [bp + 5] ; $num
2578   1515 DA            push d
2579   1516 FA 05 00      lea d, [bp + 5] ; $num
2580   1519 2A            mov b, [d]
2581   151A             ; START FACTORS
2582   151A D7            push a
2583   151B 11            mov a, b
2584   151C 26 0A 00      mov b, $a
2585   151F AE            div a, b
2586   1520 27            mov b, a
2587   1521 E4            pop a
2588   1522             ; END FACTORS
2589   1522 E7            pop d
2590   1523 FD 43         mov [d], b
2591   1525             ;; i++; 
2592   1525 FA FA FF      lea d, [bp + -6] ; $i
2593   1528 2A            mov b, [d]
2594   1529 FD 77         inc b
2595   152B FA FA FF      lea d, [bp + -6] ; $i
2596   152E FD 43         mov [d], b
2597   1530 FD 7D         dec b
2598   1532 0A DB 14      jmp _while39_cond
2599   1535             _while39_exit:
2600   1535             ;; while (i > 0) { 
2601   1535             _while40_cond:
2602   1535 FA FA FF      lea d, [bp + -6] ; $i
2603   1538 2A            mov b, [d]
2604   1539             ; START RELATIONAL
2605   1539 D7            push a
2606   153A 11            mov a, b
2607   153B 26 00 00      mov b, $0
2608   153E B0            cmp a, b
2609   153F FD 7F         sgt ; >
2610   1541 E4            pop a
2611   1542             ; END RELATIONAL
2612   1542 C0 00 00      cmp b, 0
2613   1545 C6 6E 15      je _while40_exit
2614   1548             _while40_block:
2615   1548             ;; i--; 
2616   1548 FA FA FF      lea d, [bp + -6] ; $i
2617   154B 2A            mov b, [d]
2618   154C FD 7D         dec b
2619   154E FA FA FF      lea d, [bp + -6] ; $i
2620   1551 FD 43         mov [d], b
2621   1553 FD 77         inc b
2622   1555             ;; putchar(digits[i]); 
2623   1555 FA FC FF      lea d, [bp + -4] ; $digits
2624   1558 D7            push a
2625   1559 DA            push d
2626   155A FA FA FF      lea d, [bp + -6] ; $i
2627   155D 2A            mov b, [d]
2628   155E E7            pop d
2629   155F 5A            add d, b
2630   1560 E4            pop a
2631   1561 32            mov bl, [d]
2632   1562 A7 00         mov bh, 0
2633   1564 DD            push bl
2634   1565 07 79 15      call putchar
2635   1568 51 01 00      add sp, 1
2636   156B 0A 35 15      jmp _while40_cond
2637   156E             _while40_exit:
2638   156E F9            leave
2639   156F 09            ret
2640   1570             
2641   1570             date:
2642   1570 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2643   1573             
2644   1573             ; --- BEGIN INLINE ASM BLOCK
2645   1573 19 00         mov al, 0 
2646   1575 05 07         syscall sys_datetime
2647   1577             ; --- END INLINE ASM BLOCK
2648   1577             
2649   1577 F9            leave
2650   1578 09            ret
2651   1579             
2652   1579             putchar:
2653   1579 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2654   157C             
2655   157C             ; --- BEGIN INLINE ASM BLOCK
2656   157C FA 05 00      lea d, [bp + 5] ; $c
2657   157F 1E            mov al, [d]
2658   1580 23            mov ah, al
2659   1581 07 0A 17      call _putchar
2660   1584             ; --- END INLINE ASM BLOCK
2661   1584             
2662   1584 F9            leave
2663   1585 09            ret
2664   1586             
2665   1586             getchar:
2666   1586 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2667   1589             ;; char c; 
2668   1589 52 01 00      sub sp, 1 ; c
2669   158C             
2670   158C             ; --- BEGIN INLINE ASM BLOCK
2671   158C 07 03 17      call getch
2672   158F 1A            mov al, ah
2673   1590 FA 00 00      lea d, [bp + 0] ; $c
2674   1593 3E            mov [d], al
2675   1594             ; --- END INLINE ASM BLOCK
2676   1594             
2677   1594             ;; return c; 
2678   1594 FA 00 00      lea d, [bp + 0] ; $c
2679   1597 32            mov bl, [d]
2680   1598 A7 00         mov bh, 0
2681   159A F9            leave
2682   159B 09            ret
2683   159C             
2684   159C             scann:
2685   159C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2686   159F             ;; int m; 
2687   159F 52 02 00      sub sp, 2 ; m
2688   15A2             
2689   15A2             ; --- BEGIN INLINE ASM BLOCK
2690   15A2 07 4E 19      call scan_u16d
2691   15A5 FA FF FF      lea d, [bp + -1] ; $m
2692   15A8 43            mov [d], a
2693   15A9             ; --- END INLINE ASM BLOCK
2694   15A9             
2695   15A9             ;; return m; 
2696   15A9 FA FF FF      lea d, [bp + -1] ; $m
2697   15AC 2A            mov b, [d]
2698   15AD F9            leave
2699   15AE 09            ret
2700   15AF             
2701   15AF             puts:
2702   15AF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2703   15B2             
2704   15B2             ; --- BEGIN INLINE ASM BLOCK
2705   15B2 FA 05 00      lea d, [bp + 5] ; $s
2706   15B5 15            mov a, [d]
2707   15B6 3C            mov d, a
2708   15B7 07 54 18      call _puts
2709   15BA 10 00 0A      mov a, $0A00
2710   15BD 05 03         syscall sys_io
2711   15BF             ; --- END INLINE ASM BLOCK
2712   15BF             
2713   15BF F9            leave
2714   15C0 09            ret
2715   15C1             
2716   15C1             print:
2717   15C1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2718   15C4             
2719   15C4             ; --- BEGIN INLINE ASM BLOCK
2720   15C4 FA 05 00      lea d, [bp + 5] ; $s
2721   15C7 FD 2A         mov d, [d]
2722   15C9 07 54 18      call _puts
2723   15CC             ; --- END INLINE ASM BLOCK
2724   15CC             
2725   15CC F9            leave
2726   15CD 09            ret
2727   15CE             
2728   15CE             getparam:
2729   15CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2730   15D1             ;; char data; 
2731   15D1 52 01 00      sub sp, 1 ; data
2732   15D4             
2733   15D4             ; --- BEGIN INLINE ASM BLOCK
2734   15D4 19 04         mov al, 4
2735   15D6 FA 05 00      lea d, [bp + 5] ; $address
2736   15D9 FD 2A         mov d, [d]
2737   15DB 05 0C         syscall sys_system
2738   15DD FA 00 00      lea d, [bp + 0] ; $data
2739   15E0 FD 3E         mov [d], bl
2740   15E2             ; --- END INLINE ASM BLOCK
2741   15E2             
2742   15E2             ;; return data; 
2743   15E2 FA 00 00      lea d, [bp + 0] ; $data
2744   15E5 32            mov bl, [d]
2745   15E6 A7 00         mov bh, 0
2746   15E8 F9            leave
2747   15E9 09            ret
2748   15EA             
2749   15EA             clear:
2750   15EA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2751   15ED             ;; print("\033[2J\033[H"); 
2752   15ED 26 B1 23      mov b, _s5 ; "\033[2J\033[H"
2753   15F0 FD AB         swp b
2754   15F2 D8            push b
2755   15F3 07 C1 15      call print
2756   15F6 51 02 00      add sp, 2
2757   15F9 F9            leave
2758   15FA 09            ret
2759   15FB             
2760   15FB             abs:
2761   15FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2762   15FE             ;; return i < 0 ? -i : i; 
2763   15FE             _ternary41_cond:
2764   15FE FA 05 00      lea d, [bp + 5] ; $i
2765   1601 2A            mov b, [d]
2766   1602             ; START RELATIONAL
2767   1602 D7            push a
2768   1603 11            mov a, b
2769   1604 26 00 00      mov b, $0
2770   1607 B0            cmp a, b
2771   1608 FD 73         slt ; < (signed)
2772   160A E4            pop a
2773   160B             ; END RELATIONAL
2774   160B C0 00 00      cmp b, 0
2775   160E C6 1A 16      je _ternary41_false
2776   1611             _ternary41_true:
2777   1611 FA 05 00      lea d, [bp + 5] ; $i
2778   1614 2A            mov b, [d]
2779   1615 FD 97         neg b
2780   1617 0A 1E 16      jmp _ternary41_exit
2781   161A             _ternary41_false:
2782   161A FA 05 00      lea d, [bp + 5] ; $i
2783   161D 2A            mov b, [d]
2784   161E             _ternary41_exit:
2785   161E F9            leave
2786   161F 09            ret
2787   1620             
2788   1620             include_stdio_asm:
2789   1620 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2790   1623             
2791   1623             ; --- BEGIN INLINE ASM BLOCK
2792   1623             .include "lib/asm/stdio.asm"
0001+  1623             ;-----------------------------------------------------------------------------
0002+  1623             ; stdio.s
0003+  1623             ;-----------------------------------------------------------------------------
0004+  1623             .include "lib/asm/string.asm"
0001++ 1623             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1623             ; string.s
0003++ 1623             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1623             
0005++ 1623             
0006++ 1623             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1623             ; _strrev
0008++ 1623             ; reverse a string
0009++ 1623             ; D = string address
0010++ 1623             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1623             ; 01234
0012++ 1623             _strrev:
0013++ 1623 4B          	pusha
0014++ 1624 07 6A 16    	call _strlen	; length in C
0015++ 1627 12          	mov a, c
0016++ 1628 AF 01 00    	cmp a, 1
0017++ 162B D0 45 16    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 162E 7D          	dec a
0019++ 162F FD 4E       	mov si, d	; beginning of string
0020++ 1631 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1633 59          	add d, a	; end of string
0022++ 1634 12          	mov a, c
0023++ 1635 FD 9B       	shr a		; divide by 2
0024++ 1637 39          	mov c, a	; C now counts the steps
0025++ 1638             _strrev_L0:
0026++ 1638 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1639 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 163A 3E          	mov [d], al	; store left char into right side
0029++ 163B 1B          	mov al, bl
0030++ 163C F7          	stosb		; store right-side char into left-side; increase DI
0031++ 163D 7E          	dec c
0032++ 163E 7F          	dec d
0033++ 163F C2 00 00    	cmp c, 0
0034++ 1642 C7 38 16    	jne _strrev_L0
0035++ 1645             _strrev_end:
0036++ 1645 4C          	popa
0037++ 1646 09          	ret
0038++ 1647             	
0039++ 1647             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1647             ; _strchr
0041++ 1647             ; search string in D for char in AL
0042++ 1647             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1647             _strchr:
0044++ 1647             _strchr_L0:
0045++ 1647 32          	mov bl, [d]
0046++ 1648 C1 00       	cmp bl, 0
0047++ 164A C6 55 16    	je _strchr_end
0048++ 164D BA          	cmp al, bl
0049++ 164E C6 55 16    	je _strchr_end
0050++ 1651 79          	inc d
0051++ 1652 0A 47 16    	jmp _strchr_L0
0052++ 1655             _strchr_end:
0053++ 1655 1B          	mov al, bl
0054++ 1656 09          	ret
0055++ 1657             
0056++ 1657             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1657             ; _strstr
0058++ 1657             ; find sub-string
0059++ 1657             ; str1 in SI
0060++ 1657             ; str2 in DI
0061++ 1657             ; SI points to end of source string
0062++ 1657             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1657             _strstr:
0064++ 1657 DB          	push al
0065++ 1658 DA          	push d
0066++ 1659 E3          	push di
0067++ 165A             _strstr_loop:
0068++ 165A F3          	cmpsb					; compare a byte of the strings
0069++ 165B C7 66 16    	jne _strstr_ret
0070++ 165E FC 00 00    	lea d, [di + 0]
0071++ 1661 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1663 C7 5A 16    	jne _strstr_loop				; equal chars but not at end
0073++ 1666             _strstr_ret:
0074++ 1666 F0          	pop di
0075++ 1667 E7          	pop d
0076++ 1668 E8          	pop al
0077++ 1669 09          	ret
0078++ 166A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 166A             ; length of null terminated string
0080++ 166A             ; result in C
0081++ 166A             ; pointer in D
0082++ 166A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 166A             _strlen:
0084++ 166A DA          	push d
0085++ 166B 38 00 00    	mov c, 0
0086++ 166E             _strlen_L1:
0087++ 166E BD 00       	cmp byte [d], 0
0088++ 1670 C6 78 16    	je _strlen_ret
0089++ 1673 79          	inc d
0090++ 1674 78          	inc c
0091++ 1675 0A 6E 16    	jmp _strlen_L1
0092++ 1678             _strlen_ret:
0093++ 1678 E7          	pop d
0094++ 1679 09          	ret
0095++ 167A             
0096++ 167A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 167A             ; STRCMP
0098++ 167A             ; compare two strings
0099++ 167A             ; str1 in SI
0100++ 167A             ; str2 in DI
0101++ 167A             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 167A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 167A             _strcmp:
0104++ 167A DB          	push al
0105++ 167B DA          	push d
0106++ 167C E3          	push di
0107++ 167D E2          	push si
0108++ 167E             _strcmp_loop:
0109++ 167E F3          	cmpsb					; compare a byte of the strings
0110++ 167F C7 8A 16    	jne _strcmp_ret
0111++ 1682 FB FF FF    	lea d, [si +- 1]
0112++ 1685 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1687 C7 7E 16    	jne _strcmp_loop				; equal chars but not at end
0114++ 168A             _strcmp_ret:
0115++ 168A EF          	pop si
0116++ 168B F0          	pop di
0117++ 168C E7          	pop d
0118++ 168D E8          	pop al
0119++ 168E 09          	ret
0120++ 168F             
0121++ 168F             
0122++ 168F             ; STRCPY
0123++ 168F             ; copy null terminated string from SI to DI
0124++ 168F             ; source in SI
0125++ 168F             ; destination in DI
0126++ 168F             _strcpy:
0127++ 168F E2          	push si
0128++ 1690 E3          	push di
0129++ 1691 DB          	push al
0130++ 1692             _strcpy_L1:
0131++ 1692 F6          	lodsb
0132++ 1693 F7          	stosb
0133++ 1694 B9 00       	cmp al, 0
0134++ 1696 C7 92 16    	jne _strcpy_L1
0135++ 1699             _strcpy_end:
0136++ 1699 E8          	pop al
0137++ 169A F0          	pop di
0138++ 169B EF          	pop si
0139++ 169C 09          	ret
0140++ 169D             
0141++ 169D             ; STRCAT
0142++ 169D             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 169D             ; source in SI
0144++ 169D             ; destination in DI
0145++ 169D             _strcat:
0146++ 169D E2          	push si
0147++ 169E E3          	push di
0148++ 169F D7          	push a
0149++ 16A0 DA          	push d
0150++ 16A1 50          	mov a, di
0151++ 16A2 3C          	mov d, a
0152++ 16A3             _strcat_goto_end_L1:
0153++ 16A3 BD 00       	cmp byte[d], 0
0154++ 16A5 C6 AC 16    	je _strcat_start
0155++ 16A8 79          	inc d
0156++ 16A9 0A A3 16    	jmp _strcat_goto_end_L1
0157++ 16AC             _strcat_start:
0158++ 16AC FD 50       	mov di, d
0159++ 16AE             _strcat_L1:
0160++ 16AE F6          	lodsb
0161++ 16AF F7          	stosb
0162++ 16B0 B9 00       	cmp al, 0
0163++ 16B2 C7 AE 16    	jne _strcat_L1
0164++ 16B5             _strcat_end:
0165++ 16B5 E7          	pop d
0166++ 16B6 E4          	pop a
0167++ 16B7 F0          	pop di
0168++ 16B8 EF          	pop si
0169++ 16B9 09          	ret
0170++ 16BA             
0171++ 16BA             
0005+  16BA             
0006+  16BA             ;-----------------------------------------------------------------------------
0007+  16BA             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  16BA             ; ASCII in BL
0009+  16BA             ; result in AL
0010+  16BA             ; ascii for F = 0100 0110
0011+  16BA             ; ascii for 9 = 0011 1001
0012+  16BA             ;-----------------------------------------------------------------------------
0013+  16BA             hex_ascii_encode:
0014+  16BA 1B            mov al, bl
0015+  16BB 93 40         test al, $40        ; test if letter or number
0016+  16BD C7 C3 16      jnz hex_letter
0017+  16C0 87 0F         and al, $0F        ; get number
0018+  16C2 09            ret
0019+  16C3             hex_letter:
0020+  16C3 87 0F         and al, $0F        ; get letter
0021+  16C5 6A 09         add al, 9
0022+  16C7 09            ret
0023+  16C8             
0024+  16C8             ;-----------------------------------------------------------------------------
0025+  16C8             ; ATOI
0026+  16C8             ; 2 letter hex string in B
0027+  16C8             ; 8bit integer returned in AL
0028+  16C8             ;-----------------------------------------------------------------------------
0029+  16C8             _atoi:
0030+  16C8 D8            push b
0031+  16C9 07 BA 16      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  16CC 30            mov bl, bh
0033+  16CD DB            push al          ; save a
0034+  16CE 07 BA 16      call hex_ascii_encode
0035+  16D1 EA            pop bl  
0036+  16D2 FD 9E 04      shl al, 4
0037+  16D5 8C            or al, bl
0038+  16D6 E5            pop b
0039+  16D7 09            ret  
0040+  16D8             
0041+  16D8             
0042+  16D8             ;-----------------------------------------------------------------------------
0043+  16D8             ; ITOA
0044+  16D8             ; 8bit value in BL
0045+  16D8             ; 2 byte ASCII result in A
0046+  16D8             ;-----------------------------------------------------------------------------
0047+  16D8             _itoa:
0048+  16D8 DA            push d
0049+  16D9 D8            push b
0050+  16DA A7 00         mov bh, 0
0051+  16DC FD A4 04      shr bl, 4  
0052+  16DF 74            mov d, b
0053+  16E0 1F 88 19      mov al, [d + s_hex_digits]
0054+  16E3 23            mov ah, al
0055+  16E4               
0056+  16E4 E5            pop b
0057+  16E5 D8            push b
0058+  16E6 A7 00         mov bh, 0
0059+  16E8 FD 87 0F      and bl, $0F
0060+  16EB 74            mov d, b
0061+  16EC 1F 88 19      mov al, [d + s_hex_digits]
0062+  16EF E5            pop b
0063+  16F0 E7            pop d
0064+  16F1 09            ret
0065+  16F2             
0066+  16F2             ;-----------------------------------------------------------------------------
0067+  16F2             ; HEX STRING TO BINARY
0068+  16F2             ; di = destination address
0069+  16F2             ; si = source
0070+  16F2             ;-----------------------------------------------------------------------------
0071+  16F2             _hex_to_int:
0072+  16F2             _hex_to_int_L1:
0073+  16F2 F6            lodsb          ; load from [SI] to AL
0074+  16F3 B9 00         cmp al, 0        ; check if ASCII 0
0075+  16F5 C6 02 17      jz _hex_to_int_ret
0076+  16F8 36            mov bh, al
0077+  16F9 F6            lodsb
0078+  16FA 2F            mov bl, al
0079+  16FB 07 C8 16      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  16FE F7            stosb          ; store AL to [DI]
0081+  16FF 0A F2 16      jmp _hex_to_int_L1
0082+  1702             _hex_to_int_ret:
0083+  1702 09            ret    
0084+  1703             
0085+  1703             ;-----------------------------------------------------------------------------
0086+  1703             ; GETCHAR
0087+  1703             ; char in ah
0088+  1703             ;-----------------------------------------------------------------------------
0089+  1703             getch:
0090+  1703 DB            push al
0091+  1704             getch_retry:
0092+  1704 19 01         mov al, 1
0093+  1706 05 03         syscall sys_io      ; receive in AH
0094+  1708 E8            pop al
0095+  1709 09            ret
0096+  170A             
0097+  170A             ;-----------------------------------------------------------------------------
0098+  170A             ; PUTCHAR
0099+  170A             ; char in ah
0100+  170A             ;-----------------------------------------------------------------------------
0101+  170A             _putchar:
0102+  170A D7            push a
0103+  170B 19 00         mov al, 0
0104+  170D 05 03         syscall sys_io      ; char in AH
0105+  170F E4            pop a
0106+  1710 09            ret
0107+  1711             
0108+  1711             ;-----------------------------------------------------------------------------
0109+  1711             ;; INPUT A STRING
0110+  1711             ;; terminates with null
0111+  1711             ;; pointer in D
0112+  1711             ;-----------------------------------------------------------------------------
0113+  1711             _gets:
0114+  1711 D7            push a
0115+  1712 DA            push d
0116+  1713             _gets_loop:
0117+  1713 19 01         mov al, 1
0118+  1715 05 03         syscall sys_io      ; receive in AH
0119+  1717 B9 00         cmp al, 0        ; check error code (AL)
0120+  1719 C6 13 17      je _gets_loop      ; if no char received, retry
0121+  171C             
0122+  171C 76 1B         cmp ah, 27
0123+  171E C6 3F 17      je _gets_ansi_esc
0124+  1721 76 0A         cmp ah, $0A        ; LF
0125+  1723 C6 AA 17      je _gets_end
0126+  1726 76 0D         cmp ah, $0D        ; CR
0127+  1728 C6 AA 17      je _gets_end
0128+  172B 76 5C         cmp ah, $5C        ; '\\'
0129+  172D C6 6B 17      je _gets_escape
0130+  1730               
0131+  1730 76 08         cmp ah, $08      ; check for backspace
0132+  1732 C6 3B 17      je _gets_backspace
0133+  1735             
0134+  1735 1A            mov al, ah
0135+  1736 3E            mov [d], al
0136+  1737 79            inc d
0137+  1738 0A 13 17      jmp _gets_loop
0138+  173B             _gets_backspace:
0139+  173B 7F            dec d
0140+  173C 0A 13 17      jmp _gets_loop
0141+  173F             _gets_ansi_esc:
0142+  173F 19 01         mov al, 1
0143+  1741 05 03         syscall sys_io        ; receive in AH without echo
0144+  1743 B9 00         cmp al, 0          ; check error code (AL)
0145+  1745 C6 3F 17      je _gets_ansi_esc    ; if no char received, retry
0146+  1748 76 5B         cmp ah, '['
0147+  174A C7 13 17      jne _gets_loop
0148+  174D             _gets_ansi_esc_2:
0149+  174D 19 01         mov al, 1
0150+  174F 05 03         syscall sys_io          ; receive in AH without echo
0151+  1751 B9 00         cmp al, 0            ; check error code (AL)
0152+  1753 C6 4D 17      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1756 76 44         cmp ah, 'D'
0154+  1758 C6 63 17      je _gets_left_arrow
0155+  175B 76 43         cmp ah, 'C'
0156+  175D C6 67 17      je _gets_right_arrow
0157+  1760 0A 13 17      jmp _gets_loop
0158+  1763             _gets_left_arrow:
0159+  1763 7F            dec d
0160+  1764 0A 13 17      jmp _gets_loop
0161+  1767             _gets_right_arrow:
0162+  1767 79            inc d
0163+  1768 0A 13 17      jmp _gets_loop
0164+  176B             _gets_escape:
0165+  176B 19 01         mov al, 1
0166+  176D 05 03         syscall sys_io      ; receive in AH
0167+  176F B9 00         cmp al, 0        ; check error code (AL)
0168+  1771 C6 6B 17      je _gets_escape      ; if no char received, retry
0169+  1774 76 6E         cmp ah, 'n'
0170+  1776 C6 95 17      je _gets_LF
0171+  1779 76 72         cmp ah, 'r'
0172+  177B C6 9C 17      je _gets_CR
0173+  177E 76 30         cmp ah, '0'
0174+  1780 C6 A3 17      je _gets_NULL
0175+  1783 76 5C         cmp ah, $5C  ; '\'
0176+  1785 C6 8E 17      je _gets_slash
0177+  1788 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1789 3E            mov [d], al
0179+  178A 79            inc d
0180+  178B 0A 13 17      jmp _gets_loop
0181+  178E             _gets_slash:
0182+  178E 19 5C         mov al, $5C
0183+  1790 3E            mov [d], al
0184+  1791 79            inc d
0185+  1792 0A 13 17      jmp _gets_loop
0186+  1795             _gets_LF:
0187+  1795 19 0A         mov al, $0A
0188+  1797 3E            mov [d], al
0189+  1798 79            inc d
0190+  1799 0A 13 17      jmp _gets_loop
0191+  179C             _gets_CR:
0192+  179C 19 0D         mov al, $0D
0193+  179E 3E            mov [d], al
0194+  179F 79            inc d
0195+  17A0 0A 13 17      jmp _gets_loop
0196+  17A3             _gets_NULL:
0197+  17A3 19 00         mov al, $00
0198+  17A5 3E            mov [d], al
0199+  17A6 79            inc d
0200+  17A7 0A 13 17      jmp _gets_loop
0201+  17AA             _gets_end:
0202+  17AA 19 00         mov al, 0
0203+  17AC 3E            mov [d], al        ; terminate string
0204+  17AD E7            pop d
0205+  17AE E4            pop a
0206+  17AF 09            ret
0207+  17B0             
0208+  17B0             ;-----------------------------------------------------------------------------
0209+  17B0             ;; INPUT TEXT
0210+  17B0             ;; terminated with CTRL+D
0211+  17B0             ;; pointer in D
0212+  17B0             ;-----------------------------------------------------------------------------
0213+  17B0             _gettxt:
0214+  17B0 D7            push a
0215+  17B1 DA            push d
0216+  17B2             _gettxt_loop:
0217+  17B2 19 01         mov al, 1
0218+  17B4 05 03         syscall sys_io      ; receive in AH
0219+  17B6 B9 00         cmp al, 0        ; check error code (AL)
0220+  17B8 C6 B2 17      je _gettxt_loop    ; if no char received, retry
0221+  17BB 76 04         cmp ah, 4      ; EOT
0222+  17BD C6 FB 17      je _gettxt_end
0223+  17C0 76 08         cmp ah, $08      ; check for backspace
0224+  17C2 C6 F7 17      je _gettxt_backspace
0225+  17C5 76 5C         cmp ah, $5C        ; '\'
0226+  17C7 C6 D0 17      je _gettxt_escape
0227+  17CA 1A            mov al, ah
0228+  17CB 3E            mov [d], al
0229+  17CC 79            inc d
0230+  17CD 0A B2 17      jmp _gettxt_loop
0231+  17D0             _gettxt_escape:
0232+  17D0 19 01         mov al, 1
0233+  17D2 05 03         syscall sys_io      ; receive in AH
0234+  17D4 B9 00         cmp al, 0        ; check error code (AL)
0235+  17D6 C6 D0 17      je _gettxt_escape    ; if no char received, retry
0236+  17D9 76 6E         cmp ah, 'n'
0237+  17DB C6 E9 17      je _gettxt_LF
0238+  17DE 76 72         cmp ah, 'r'
0239+  17E0 C6 F0 17      je _gettxt_CR
0240+  17E3 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  17E4 3E            mov [d], al
0242+  17E5 79            inc d
0243+  17E6 0A B2 17      jmp _gettxt_loop
0244+  17E9             _gettxt_LF:
0245+  17E9 19 0A         mov al, $0A
0246+  17EB 3E            mov [d], al
0247+  17EC 79            inc d
0248+  17ED 0A B2 17      jmp _gettxt_loop
0249+  17F0             _gettxt_CR:
0250+  17F0 19 0D         mov al, $0D
0251+  17F2 3E            mov [d], al
0252+  17F3 79            inc d
0253+  17F4 0A B2 17      jmp _gettxt_loop
0254+  17F7             _gettxt_backspace:
0255+  17F7 7F            dec d
0256+  17F8 0A B2 17      jmp _gettxt_loop
0257+  17FB             _gettxt_end:
0258+  17FB 19 00         mov al, 0
0259+  17FD 3E            mov [d], al        ; terminate string
0260+  17FE E7            pop d
0261+  17FF E4            pop a
0262+  1800 09            ret
0263+  1801             
0264+  1801             ;-----------------------------------------------------------------------------
0265+  1801             ; PRINT NEW LINE
0266+  1801             ;-----------------------------------------------------------------------------
0267+  1801             printnl:
0268+  1801 D7            push a
0269+  1802 10 00 0A      mov a, $0A00
0270+  1805 05 03         syscall sys_io
0271+  1807 10 00 0D      mov a, $0D00
0272+  180A 05 03         syscall sys_io
0273+  180C E4            pop a
0274+  180D 09            ret
0275+  180E             
0276+  180E             ;-----------------------------------------------------------------------------
0277+  180E             ; _strtoint
0278+  180E             ; 4 digit hex string number in d
0279+  180E             ; integer returned in A
0280+  180E             ;-----------------------------------------------------------------------------
0281+  180E             _strtointx:
0282+  180E D8            push b
0283+  180F 32            mov bl, [d]
0284+  1810 37            mov bh, bl
0285+  1811 33 01 00      mov bl, [d + 1]
0286+  1814 07 C8 16      call _atoi        ; convert to int in AL
0287+  1817 23            mov ah, al        ; move to AH
0288+  1818 33 02 00      mov bl, [d + 2]
0289+  181B 37            mov bh, bl
0290+  181C 33 03 00      mov bl, [d + 3]
0291+  181F 07 C8 16      call _atoi        ; convert to int in AL
0292+  1822 E5            pop b
0293+  1823 09            ret
0294+  1824             
0295+  1824             ;-----------------------------------------------------------------------------
0296+  1824             ; _strtoint
0297+  1824             ; 5 digit base10 string number in d
0298+  1824             ; integer returned in A
0299+  1824             ;-----------------------------------------------------------------------------
0300+  1824             _strtoint:
0301+  1824 E2            push si
0302+  1825 D8            push b
0303+  1826 D9            push c
0304+  1827 DA            push d
0305+  1828 07 6A 16      call _strlen      ; get string length in C
0306+  182B 7E            dec c
0307+  182C FD 4E         mov si, d
0308+  182E 12            mov a, c
0309+  182F FD 99         shl a
0310+  1831 3B A0 19      mov d, table_power
0311+  1834 59            add d, a
0312+  1835 38 00 00      mov c, 0
0313+  1838             _strtoint_L0:
0314+  1838 F6            lodsb      ; load ASCII to al
0315+  1839 B9 00         cmp al, 0
0316+  183B C6 4E 18      je _strtoint_end
0317+  183E 6F 30         sub al, $30    ; make into integer
0318+  1840 22 00         mov ah, 0
0319+  1842 2A            mov b, [d]
0320+  1843 AC            mul a, b      ; result in B since it fits in 16bits
0321+  1844 11            mov a, b
0322+  1845 28            mov b, c
0323+  1846 54            add a, b
0324+  1847 39            mov c, a
0325+  1848 63 02 00      sub d, 2
0326+  184B 0A 38 18      jmp _strtoint_L0
0327+  184E             _strtoint_end:
0328+  184E 12            mov a, c
0329+  184F E7            pop d
0330+  1850 E6            pop c
0331+  1851 E5            pop b
0332+  1852 EF            pop si
0333+  1853 09            ret
0334+  1854             
0335+  1854             ;-----------------------------------------------------------------------------
0336+  1854             ; PRINT NULL TERMINATED STRING
0337+  1854             ; pointer in D
0338+  1854             ;-----------------------------------------------------------------------------
0339+  1854             _puts:
0340+  1854 D7            push a
0341+  1855 DA            push d
0342+  1856             _puts_L1:
0343+  1856 1E            mov al, [d]
0344+  1857 B9 00         cmp al, 0
0345+  1859 C6 65 18      jz _puts_END
0346+  185C 23            mov ah, al
0347+  185D 19 00         mov al, 0
0348+  185F 05 03         syscall sys_io
0349+  1861 79            inc d
0350+  1862 0A 56 18      jmp _puts_L1
0351+  1865             _puts_END:
0352+  1865 E7            pop d
0353+  1866 E4            pop a
0354+  1867 09            ret
0355+  1868             
0356+  1868             ;-----------------------------------------------------------------------------
0357+  1868             ; PRINT N SIZE STRING
0358+  1868             ; pointer in D
0359+  1868             ; size in C
0360+  1868             ;-----------------------------------------------------------------------------
0361+  1868             _putsn:
0362+  1868 DB            push al
0363+  1869 DA            push d
0364+  186A D9            push c
0365+  186B             _putsn_L0:
0366+  186B 1E            mov al, [d]
0367+  186C 23            mov ah, al
0368+  186D 19 00         mov al, 0
0369+  186F 05 03         syscall sys_io
0370+  1871 79            inc d
0371+  1872 7E            dec c  
0372+  1873 C2 00 00      cmp c, 0
0373+  1876 C7 6B 18      jne _putsn_L0
0374+  1879             _putsn_end:
0375+  1879 E6            pop c
0376+  187A E7            pop d
0377+  187B E8            pop al
0378+  187C 09            ret
0379+  187D             
0380+  187D             ;-----------------------------------------------------------------------------
0381+  187D             ; print 16bit decimal number
0382+  187D             ; input number in A
0383+  187D             ;-----------------------------------------------------------------------------
0384+  187D             print_u16d:
0385+  187D D7            push a
0386+  187E D8            push b
0387+  187F 26 10 27      mov b, 10000
0388+  1882 AE            div a, b      ; get 10000's coeff.
0389+  1883 07 A5 18      call print_number
0390+  1886 11            mov a, b
0391+  1887 26 E8 03      mov b, 1000
0392+  188A AE            div a, b      ; get 1000's coeff.
0393+  188B 07 A5 18      call print_number
0394+  188E 11            mov a, b
0395+  188F 26 64 00      mov b, 100
0396+  1892 AE            div a, b
0397+  1893 07 A5 18      call print_number
0398+  1896 11            mov a, b
0399+  1897 26 0A 00      mov b, 10
0400+  189A AE            div a, b
0401+  189B 07 A5 18      call print_number
0402+  189E 1B            mov al, bl      ; 1's coeff in bl
0403+  189F 07 A5 18      call print_number
0404+  18A2 E5            pop b
0405+  18A3 E4            pop a
0406+  18A4 09            ret
0407+  18A5             
0408+  18A5             ;-----------------------------------------------------------------------------
0409+  18A5             ; print AL
0410+  18A5             ;-----------------------------------------------------------------------------
0411+  18A5             print_number:
0412+  18A5 6A 30         add al, $30
0413+  18A7 23            mov ah, al
0414+  18A8 07 0A 17      call _putchar
0415+  18AB 09            ret
0416+  18AC             
0417+  18AC             ;-----------------------------------------------------------------------------
0418+  18AC             ; PRINT 16BIT HEX INTEGER
0419+  18AC             ; integer value in reg B
0420+  18AC             ;-----------------------------------------------------------------------------
0421+  18AC             print_u16x:
0422+  18AC D7            push a
0423+  18AD D8            push b
0424+  18AE DD            push bl
0425+  18AF 30            mov bl, bh
0426+  18B0 07 D8 16      call _itoa        ; convert bh to char in A
0427+  18B3 2F            mov bl, al        ; save al
0428+  18B4 19 00         mov al, 0
0429+  18B6 05 03         syscall sys_io        ; display AH
0430+  18B8 24            mov ah, bl        ; retrieve al
0431+  18B9 19 00         mov al, 0
0432+  18BB 05 03         syscall sys_io        ; display AL
0433+  18BD             
0434+  18BD EA            pop bl
0435+  18BE 07 D8 16      call _itoa        ; convert bh to char in A
0436+  18C1 2F            mov bl, al        ; save al
0437+  18C2 19 00         mov al, 0
0438+  18C4 05 03         syscall sys_io        ; display AH
0439+  18C6 24            mov ah, bl        ; retrieve al
0440+  18C7 19 00         mov al, 0
0441+  18C9 05 03         syscall sys_io        ; display AL
0442+  18CB             
0443+  18CB E5            pop b
0444+  18CC E4            pop a
0445+  18CD 09            ret
0446+  18CE             
0447+  18CE             ;-----------------------------------------------------------------------------
0448+  18CE             ; INPUT 16BIT HEX INTEGER
0449+  18CE             ; read 16bit integer into A
0450+  18CE             ;-----------------------------------------------------------------------------
0451+  18CE             scan_u16x:
0452+  18CE F8 10 00      enter 16
0453+  18D1 D8            push b
0454+  18D2 DA            push d
0455+  18D3             
0456+  18D3 FA F1 FF      lea d, [bp + -15]
0457+  18D6 07 11 17      call _gets        ; get number
0458+  18D9             
0459+  18D9 32            mov bl, [d]
0460+  18DA 37            mov bh, bl
0461+  18DB 33 01 00      mov bl, [d + 1]
0462+  18DE 07 C8 16      call _atoi        ; convert to int in AL
0463+  18E1 23            mov ah, al        ; move to AH
0464+  18E2             
0465+  18E2 33 02 00      mov bl, [d + 2]
0466+  18E5 37            mov bh, bl
0467+  18E6 33 03 00      mov bl, [d + 3]
0468+  18E9 07 C8 16      call _atoi        ; convert to int in AL
0469+  18EC             
0470+  18EC E7            pop d
0471+  18ED E5            pop b
0472+  18EE F9            leave
0473+  18EF 09            ret
0474+  18F0             
0475+  18F0             ;-----------------------------------------------------------------------------
0476+  18F0             ; PRINT 8bit HEX INTEGER
0477+  18F0             ; integer value in reg bl
0478+  18F0             ;-----------------------------------------------------------------------------
0479+  18F0             print_u8x:
0480+  18F0 D7            push a
0481+  18F1 DD            push bl
0482+  18F2             
0483+  18F2 07 D8 16      call _itoa        ; convert bl to char in A
0484+  18F5 2F            mov bl, al        ; save al
0485+  18F6 19 00         mov al, 0
0486+  18F8 05 03         syscall sys_io        ; display AH
0487+  18FA 24            mov ah, bl        ; retrieve al
0488+  18FB 19 00         mov al, 0
0489+  18FD 05 03         syscall sys_io        ; display AL
0490+  18FF             
0491+  18FF EA            pop bl
0492+  1900 E4            pop a
0493+  1901 09            ret
0494+  1902             
0495+  1902             ;-----------------------------------------------------------------------------
0496+  1902             ; print 8bit decimal unsigned number
0497+  1902             ; input number in AL
0498+  1902             ;-----------------------------------------------------------------------------
0499+  1902             print_u8d:
0500+  1902 D7            push a
0501+  1903 D8            push b
0502+  1904             
0503+  1904 22 00         mov ah, 0
0504+  1906 26 64 00      mov b, 100
0505+  1909 AE            div a, b
0506+  190A D8            push b      ; save remainder
0507+  190B B9 00         cmp al, 0
0508+  190D C6 17 19      je skip100
0509+  1910 6A 30         add al, $30
0510+  1912 23            mov ah, al
0511+  1913 19 00         mov al, 0
0512+  1915 05 03         syscall sys_io  ; print coeff
0513+  1917             skip100:
0514+  1917 E4            pop a
0515+  1918 22 00         mov ah, 0
0516+  191A 26 0A 00      mov b, 10
0517+  191D AE            div a, b
0518+  191E D8            push b      ; save remainder
0519+  191F B9 00         cmp al, 0
0520+  1921 C6 2B 19      je skip10
0521+  1924 6A 30         add al, $30
0522+  1926 23            mov ah, al
0523+  1927 19 00         mov al, 0
0524+  1929 05 03         syscall sys_io  ; print coeff
0525+  192B             skip10:
0526+  192B E4            pop a
0527+  192C 1B            mov al, bl
0528+  192D 6A 30         add al, $30
0529+  192F 23            mov ah, al
0530+  1930 19 00         mov al, 0
0531+  1932 05 03         syscall sys_io  ; print coeff
0532+  1934 E5            pop b
0533+  1935 E4            pop a
0534+  1936 09            ret
0535+  1937             
0536+  1937             ;-----------------------------------------------------------------------------
0537+  1937             ; INPUT 8BIT HEX INTEGER
0538+  1937             ; read 8bit integer into AL
0539+  1937             ;-----------------------------------------------------------------------------
0540+  1937             scan_u8x:
0541+  1937 F8 04 00      enter 4
0542+  193A D8            push b
0543+  193B DA            push d
0544+  193C             
0545+  193C FA FD FF      lea d, [bp + -3]
0546+  193F 07 11 17      call _gets        ; get number
0547+  1942             
0548+  1942 32            mov bl, [d]
0549+  1943 37            mov bh, bl
0550+  1944 33 01 00      mov bl, [d + 1]
0551+  1947 07 C8 16      call _atoi        ; convert to int in AL
0552+  194A             
0553+  194A E7            pop d
0554+  194B E5            pop b
0555+  194C F9            leave
0556+  194D 09            ret
0557+  194E             
0558+  194E             ;-----------------------------------------------------------------------------
0559+  194E             ; input decimal number
0560+  194E             ; result in A
0561+  194E             ; 655'\0'
0562+  194E             ; low--------high
0563+  194E             ;-----------------------------------------------------------------------------
0564+  194E             scan_u16d:
0565+  194E F8 08 00      enter 8
0566+  1951 E2            push si
0567+  1952 D8            push b
0568+  1953 D9            push c
0569+  1954 DA            push d
0570+  1955 FA F9 FF      lea d, [bp +- 7]
0571+  1958 07 11 17      call _gets
0572+  195B 07 6A 16      call _strlen      ; get string length in C
0573+  195E 7E            dec c
0574+  195F FD 4E         mov si, d
0575+  1961 12            mov a, c
0576+  1962 FD 99         shl a
0577+  1964 3B A0 19      mov d, table_power
0578+  1967 59            add d, a
0579+  1968 38 00 00      mov c, 0
0580+  196B             mul_loop:
0581+  196B F6            lodsb      ; load ASCII to al
0582+  196C B9 00         cmp al, 0
0583+  196E C6 81 19      je mul_exit
0584+  1971 6F 30         sub al, $30    ; make into integer
0585+  1973 22 00         mov ah, 0
0586+  1975 2A            mov b, [d]
0587+  1976 AC            mul a, b      ; result in B since it fits in 16bits
0588+  1977 11            mov a, b
0589+  1978 28            mov b, c
0590+  1979 54            add a, b
0591+  197A 39            mov c, a
0592+  197B 63 02 00      sub d, 2
0593+  197E 0A 6B 19      jmp mul_loop
0594+  1981             mul_exit:
0595+  1981 12            mov a, c
0596+  1982 E7            pop d
0597+  1983 E6            pop c
0598+  1984 E5            pop b
0599+  1985 EF            pop si
0600+  1986 F9            leave
0601+  1987 09            ret
0602+  1988             
0603+  1988 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  198C 34 35 36 37 
0603+  1990 38 39 41 42 
0603+  1994 43 44 45 46 
0604+  1998 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  199C 1B 5B 48 00 
0605+  19A0             
0606+  19A0             table_power:
0607+  19A0 01 00         .dw 1
0608+  19A2 0A 00         .dw 10
0609+  19A4 64 00         .dw 100
0610+  19A6 E8 03         .dw 1000
0611+  19A8 10 27         .dw 100002793   19AA             ; --- END INLINE ASM BLOCK
2794   19AA             
2795   19AA F9            leave
2796   19AB 09            ret
2797   19AC             
2798   19AC             base64_encode:
2799   19AC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2800   19AF             ;; int i = 0; 
2801   19AF 52 02 00      sub sp, 2 ; i
2802   19B2             ; --- START LOCAL VAR INITIALIZATION
2803   19B2 FA FF FF      lea d, [bp + -1] ; $i
2804   19B5 DA            push d
2805   19B6 26 00 00      mov b, $0
2806   19B9 E7            pop d
2807   19BA FD 43         mov [d], b
2808   19BC             ; --- END LOCAL VAR INITIALIZATION
2809   19BC             ;; int j = 0; 
2810   19BC 52 02 00      sub sp, 2 ; j
2811   19BF             ; --- START LOCAL VAR INITIALIZATION
2812   19BF FA FD FF      lea d, [bp + -3] ; $j
2813   19C2 DA            push d
2814   19C3 26 00 00      mov b, $0
2815   19C6 E7            pop d
2816   19C7 FD 43         mov [d], b
2817   19C9             ; --- END LOCAL VAR INITIALIZATION
2818   19C9             ;; int k; 
2819   19C9 52 02 00      sub sp, 2 ; k
2820   19CC             ;; int input_len; 
2821   19CC 52 02 00      sub sp, 2 ; input_len
2822   19CF             ;; unsigned char input_buffer[3]; 
2823   19CF 52 03 00      sub sp, 3 ; input_buffer
2824   19D2             ;; unsigned char output_buffer[4]; 
2825   19D2 52 04 00      sub sp, 4 ; output_buffer
2826   19D5             ;; input_len = strlen(input); 
2827   19D5 FA F9 FF      lea d, [bp + -7] ; $input_len
2828   19D8 DA            push d
2829   19D9 FA 05 00      lea d, [bp + 5] ; $input
2830   19DC 2A            mov b, [d]
2831   19DD FD AB         swp b
2832   19DF D8            push b
2833   19E0 07 F5 05      call strlen
2834   19E3 51 02 00      add sp, 2
2835   19E6 E7            pop d
2836   19E7 FD 43         mov [d], b
2837   19E9             ;; while (input_len--) { 
2838   19E9             _while42_cond:
2839   19E9 FA F9 FF      lea d, [bp + -7] ; $input_len
2840   19EC 2A            mov b, [d]
2841   19ED FD 7D         dec b
2842   19EF FA F9 FF      lea d, [bp + -7] ; $input_len
2843   19F2 FD 43         mov [d], b
2844   19F4 FD 77         inc b
2845   19F6 C0 00 00      cmp b, 0
2846   19F9 C6 AD 1B      je _while42_exit
2847   19FC             _while42_block:
2848   19FC             ;; input_buffer[i++] = *(input++); 
2849   19FC FA F6 FF      lea d, [bp + -10] ; $input_buffer
2850   19FF D7            push a
2851   1A00 DA            push d
2852   1A01 FA FF FF      lea d, [bp + -1] ; $i
2853   1A04 2A            mov b, [d]
2854   1A05 FD 77         inc b
2855   1A07 FA FF FF      lea d, [bp + -1] ; $i
2856   1A0A FD 43         mov [d], b
2857   1A0C FD 7D         dec b
2858   1A0E E7            pop d
2859   1A0F 5A            add d, b
2860   1A10 E4            pop a
2861   1A11 DA            push d
2862   1A12 FA 05 00      lea d, [bp + 5] ; $input
2863   1A15 2A            mov b, [d]
2864   1A16 FD 77         inc b
2865   1A18 FA 05 00      lea d, [bp + 5] ; $input
2866   1A1B FD 43         mov [d], b
2867   1A1D FD 7D         dec b
2868   1A1F 74            mov d, b
2869   1A20 32            mov bl, [d]
2870   1A21 A7 00         mov bh, 0
2871   1A23 E7            pop d
2872   1A24 FD 3E         mov [d], bl
2873   1A26             ;; if (i == 3) { 
2874   1A26             _if43_cond:
2875   1A26 FA FF FF      lea d, [bp + -1] ; $i
2876   1A29 2A            mov b, [d]
2877   1A2A             ; START RELATIONAL
2878   1A2A D7            push a
2879   1A2B 11            mov a, b
2880   1A2C 26 03 00      mov b, $3
2881   1A2F B0            cmp a, b
2882   1A30 FD 71         seq ; ==
2883   1A32 E4            pop a
2884   1A33             ; END RELATIONAL
2885   1A33 C0 00 00      cmp b, 0
2886   1A36 C6 AA 1B      je _if43_exit
2887   1A39             _if43_true:
2888   1A39             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
2889   1A39 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2890   1A3C D7            push a
2891   1A3D DA            push d
2892   1A3E 26 00 00      mov b, $0
2893   1A41 E7            pop d
2894   1A42 5A            add d, b
2895   1A43 E4            pop a
2896   1A44 DA            push d
2897   1A45 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2898   1A48 D7            push a
2899   1A49 DA            push d
2900   1A4A 26 00 00      mov b, $0
2901   1A4D E7            pop d
2902   1A4E 5A            add d, b
2903   1A4F E4            pop a
2904   1A50 32            mov bl, [d]
2905   1A51 A7 00         mov bh, 0
2906   1A53 D7            push a
2907   1A54 11            mov a, b
2908   1A55 26 FC 00      mov b, $fc
2909   1A58 FD 92         and b, a ; &
2910   1A5A E4            pop a
2911   1A5B             ; START SHIFT
2912   1A5B D7            push a
2913   1A5C 11            mov a, b
2914   1A5D 26 02 00      mov b, $2
2915   1A60 FD 39         mov c, b
2916   1A62 A5            ashr a, cl
2917   1A63 27            mov b, a
2918   1A64 E4            pop a
2919   1A65             ; END SHIFT
2920   1A65 E7            pop d
2921   1A66 FD 3E         mov [d], bl
2922   1A68             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
2923   1A68 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2924   1A6B D7            push a
2925   1A6C DA            push d
2926   1A6D 26 01 00      mov b, $1
2927   1A70 E7            pop d
2928   1A71 5A            add d, b
2929   1A72 E4            pop a
2930   1A73 DA            push d
2931   1A74 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2932   1A77 D7            push a
2933   1A78 DA            push d
2934   1A79 26 00 00      mov b, $0
2935   1A7C E7            pop d
2936   1A7D 5A            add d, b
2937   1A7E E4            pop a
2938   1A7F 32            mov bl, [d]
2939   1A80 A7 00         mov bh, 0
2940   1A82 D7            push a
2941   1A83 11            mov a, b
2942   1A84 26 03 00      mov b, $3
2943   1A87 FD 92         and b, a ; &
2944   1A89 E4            pop a
2945   1A8A             ; START SHIFT
2946   1A8A D7            push a
2947   1A8B 11            mov a, b
2948   1A8C 26 04 00      mov b, $4
2949   1A8F FD 39         mov c, b
2950   1A91 9D            shl a, cl
2951   1A92 27            mov b, a
2952   1A93 E4            pop a
2953   1A94             ; END SHIFT
2954   1A94             ; START TERMS
2955   1A94 D7            push a
2956   1A95 11            mov a, b
2957   1A96 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2958   1A99 D7            push a
2959   1A9A DA            push d
2960   1A9B 26 01 00      mov b, $1
2961   1A9E E7            pop d
2962   1A9F 5A            add d, b
2963   1AA0 E4            pop a
2964   1AA1 32            mov bl, [d]
2965   1AA2 A7 00         mov bh, 0
2966   1AA4 D7            push a
2967   1AA5 11            mov a, b
2968   1AA6 26 F0 00      mov b, $f0
2969   1AA9 FD 92         and b, a ; &
2970   1AAB E4            pop a
2971   1AAC             ; START SHIFT
2972   1AAC D7            push a
2973   1AAD 11            mov a, b
2974   1AAE 26 04 00      mov b, $4
2975   1AB1 FD 39         mov c, b
2976   1AB3 A5            ashr a, cl
2977   1AB4 27            mov b, a
2978   1AB5 E4            pop a
2979   1AB6             ; END SHIFT
2980   1AB6 56            add b, a
2981   1AB7 E4            pop a
2982   1AB8             ; END TERMS
2983   1AB8 E7            pop d
2984   1AB9 FD 3E         mov [d], bl
2985   1ABB             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
2986   1ABB FA F2 FF      lea d, [bp + -14] ; $output_buffer
2987   1ABE D7            push a
2988   1ABF DA            push d
2989   1AC0 26 02 00      mov b, $2
2990   1AC3 E7            pop d
2991   1AC4 5A            add d, b
2992   1AC5 E4            pop a
2993   1AC6 DA            push d
2994   1AC7 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2995   1ACA D7            push a
2996   1ACB DA            push d
2997   1ACC 26 01 00      mov b, $1
2998   1ACF E7            pop d
2999   1AD0 5A            add d, b
3000   1AD1 E4            pop a
3001   1AD2 32            mov bl, [d]
3002   1AD3 A7 00         mov bh, 0
3003   1AD5 D7            push a
3004   1AD6 11            mov a, b
3005   1AD7 26 0F 00      mov b, $f
3006   1ADA FD 92         and b, a ; &
3007   1ADC E4            pop a
3008   1ADD             ; START SHIFT
3009   1ADD D7            push a
3010   1ADE 11            mov a, b
3011   1ADF 26 02 00      mov b, $2
3012   1AE2 FD 39         mov c, b
3013   1AE4 9D            shl a, cl
3014   1AE5 27            mov b, a
3015   1AE6 E4            pop a
3016   1AE7             ; END SHIFT
3017   1AE7             ; START TERMS
3018   1AE7 D7            push a
3019   1AE8 11            mov a, b
3020   1AE9 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3021   1AEC D7            push a
3022   1AED DA            push d
3023   1AEE 26 02 00      mov b, $2
3024   1AF1 E7            pop d
3025   1AF2 5A            add d, b
3026   1AF3 E4            pop a
3027   1AF4 32            mov bl, [d]
3028   1AF5 A7 00         mov bh, 0
3029   1AF7 D7            push a
3030   1AF8 11            mov a, b
3031   1AF9 26 C0 00      mov b, $c0
3032   1AFC FD 92         and b, a ; &
3033   1AFE E4            pop a
3034   1AFF             ; START SHIFT
3035   1AFF D7            push a
3036   1B00 11            mov a, b
3037   1B01 26 06 00      mov b, $6
3038   1B04 FD 39         mov c, b
3039   1B06 A5            ashr a, cl
3040   1B07 27            mov b, a
3041   1B08 E4            pop a
3042   1B09             ; END SHIFT
3043   1B09 56            add b, a
3044   1B0A E4            pop a
3045   1B0B             ; END TERMS
3046   1B0B E7            pop d
3047   1B0C FD 3E         mov [d], bl
3048   1B0E             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
3049   1B0E FA F2 FF      lea d, [bp + -14] ; $output_buffer
3050   1B11 D7            push a
3051   1B12 DA            push d
3052   1B13 26 03 00      mov b, $3
3053   1B16 E7            pop d
3054   1B17 5A            add d, b
3055   1B18 E4            pop a
3056   1B19 DA            push d
3057   1B1A FA F6 FF      lea d, [bp + -10] ; $input_buffer
3058   1B1D D7            push a
3059   1B1E DA            push d
3060   1B1F 26 02 00      mov b, $2
3061   1B22 E7            pop d
3062   1B23 5A            add d, b
3063   1B24 E4            pop a
3064   1B25 32            mov bl, [d]
3065   1B26 A7 00         mov bh, 0
3066   1B28 D7            push a
3067   1B29 11            mov a, b
3068   1B2A 26 3F 00      mov b, $3f
3069   1B2D FD 92         and b, a ; &
3070   1B2F E4            pop a
3071   1B30 E7            pop d
3072   1B31 FD 3E         mov [d], bl
3073   1B33             ;; for (i = 0; i < 4; i++) { 
3074   1B33             _for44_init:
3075   1B33 FA FF FF      lea d, [bp + -1] ; $i
3076   1B36 DA            push d
3077   1B37 26 00 00      mov b, $0
3078   1B3A E7            pop d
3079   1B3B FD 43         mov [d], b
3080   1B3D             _for44_cond:
3081   1B3D FA FF FF      lea d, [bp + -1] ; $i
3082   1B40 2A            mov b, [d]
3083   1B41             ; START RELATIONAL
3084   1B41 D7            push a
3085   1B42 11            mov a, b
3086   1B43 26 04 00      mov b, $4
3087   1B46 B0            cmp a, b
3088   1B47 FD 73         slt ; < (signed)
3089   1B49 E4            pop a
3090   1B4A             ; END RELATIONAL
3091   1B4A C0 00 00      cmp b, 0
3092   1B4D C6 9D 1B      je _for44_exit
3093   1B50             _for44_block:
3094   1B50             ;; output[j++] = base64_table[output_buffer[i]]; 
3095   1B50 FA 07 00      lea d, [bp + 7] ; $output
3096   1B53 FD 2A         mov d, [d]
3097   1B55 D7            push a
3098   1B56 DA            push d
3099   1B57 FA FD FF      lea d, [bp + -3] ; $j
3100   1B5A 2A            mov b, [d]
3101   1B5B FD 77         inc b
3102   1B5D FA FD FF      lea d, [bp + -3] ; $j
3103   1B60 FD 43         mov [d], b
3104   1B62 FD 7D         dec b
3105   1B64 E7            pop d
3106   1B65 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3107   1B69 E4            pop a
3108   1B6A DA            push d
3109   1B6B 3B 21 23      mov d, _base64_table ; $base64_table
3110   1B6E FD 2A         mov d, [d]
3111   1B70 D7            push a
3112   1B71 DA            push d
3113   1B72 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3114   1B75 D7            push a
3115   1B76 DA            push d
3116   1B77 FA FF FF      lea d, [bp + -1] ; $i
3117   1B7A 2A            mov b, [d]
3118   1B7B E7            pop d
3119   1B7C 5A            add d, b
3120   1B7D E4            pop a
3121   1B7E 32            mov bl, [d]
3122   1B7F A7 00         mov bh, 0
3123   1B81 E7            pop d
3124   1B82 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3125   1B86 E4            pop a
3126   1B87 32            mov bl, [d]
3127   1B88 A7 00         mov bh, 0
3128   1B8A E7            pop d
3129   1B8B FD 3E         mov [d], bl
3130   1B8D             _for44_update:
3131   1B8D FA FF FF      lea d, [bp + -1] ; $i
3132   1B90 2A            mov b, [d]
3133   1B91 FD 77         inc b
3134   1B93 FA FF FF      lea d, [bp + -1] ; $i
3135   1B96 FD 43         mov [d], b
3136   1B98 FD 7D         dec b
3137   1B9A 0A 3D 1B      jmp _for44_cond
3138   1B9D             _for44_exit:
3139   1B9D             ;; i = 0; 
3140   1B9D FA FF FF      lea d, [bp + -1] ; $i
3141   1BA0 DA            push d
3142   1BA1 26 00 00      mov b, $0
3143   1BA4 E7            pop d
3144   1BA5 FD 43         mov [d], b
3145   1BA7 0A AA 1B      jmp _if43_exit
3146   1BAA             _if43_exit:
3147   1BAA 0A E9 19      jmp _while42_cond
3148   1BAD             _while42_exit:
3149   1BAD             ;; if (i) { 
3150   1BAD             _if45_cond:
3151   1BAD FA FF FF      lea d, [bp + -1] ; $i
3152   1BB0 2A            mov b, [d]
3153   1BB1 C0 00 00      cmp b, 0
3154   1BB4 C6 82 1D      je _if45_exit
3155   1BB7             _if45_true:
3156   1BB7             ;; for (k = i; k < 3; k++) { 
3157   1BB7             _for46_init:
3158   1BB7 FA FB FF      lea d, [bp + -5] ; $k
3159   1BBA DA            push d
3160   1BBB FA FF FF      lea d, [bp + -1] ; $i
3161   1BBE 2A            mov b, [d]
3162   1BBF E7            pop d
3163   1BC0 FD 43         mov [d], b
3164   1BC2             _for46_cond:
3165   1BC2 FA FB FF      lea d, [bp + -5] ; $k
3166   1BC5 2A            mov b, [d]
3167   1BC6             ; START RELATIONAL
3168   1BC6 D7            push a
3169   1BC7 11            mov a, b
3170   1BC8 26 03 00      mov b, $3
3171   1BCB B0            cmp a, b
3172   1BCC FD 73         slt ; < (signed)
3173   1BCE E4            pop a
3174   1BCF             ; END RELATIONAL
3175   1BCF C0 00 00      cmp b, 0
3176   1BD2 C6 F8 1B      je _for46_exit
3177   1BD5             _for46_block:
3178   1BD5             ;; input_buffer[k] = '\0'; 
3179   1BD5 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3180   1BD8 D7            push a
3181   1BD9 DA            push d
3182   1BDA FA FB FF      lea d, [bp + -5] ; $k
3183   1BDD 2A            mov b, [d]
3184   1BDE E7            pop d
3185   1BDF 5A            add d, b
3186   1BE0 E4            pop a
3187   1BE1 DA            push d
3188   1BE2 26 00 00      mov b, $0
3189   1BE5 E7            pop d
3190   1BE6 FD 3E         mov [d], bl
3191   1BE8             _for46_update:
3192   1BE8 FA FB FF      lea d, [bp + -5] ; $k
3193   1BEB 2A            mov b, [d]
3194   1BEC FD 77         inc b
3195   1BEE FA FB FF      lea d, [bp + -5] ; $k
3196   1BF1 FD 43         mov [d], b
3197   1BF3 FD 7D         dec b
3198   1BF5 0A C2 1B      jmp _for46_cond
3199   1BF8             _for46_exit:
3200   1BF8             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
3201   1BF8 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3202   1BFB D7            push a
3203   1BFC DA            push d
3204   1BFD 26 00 00      mov b, $0
3205   1C00 E7            pop d
3206   1C01 5A            add d, b
3207   1C02 E4            pop a
3208   1C03 DA            push d
3209   1C04 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3210   1C07 D7            push a
3211   1C08 DA            push d
3212   1C09 26 00 00      mov b, $0
3213   1C0C E7            pop d
3214   1C0D 5A            add d, b
3215   1C0E E4            pop a
3216   1C0F 32            mov bl, [d]
3217   1C10 A7 00         mov bh, 0
3218   1C12 D7            push a
3219   1C13 11            mov a, b
3220   1C14 26 FC 00      mov b, $fc
3221   1C17 FD 92         and b, a ; &
3222   1C19 E4            pop a
3223   1C1A             ; START SHIFT
3224   1C1A D7            push a
3225   1C1B 11            mov a, b
3226   1C1C 26 02 00      mov b, $2
3227   1C1F FD 39         mov c, b
3228   1C21 A5            ashr a, cl
3229   1C22 27            mov b, a
3230   1C23 E4            pop a
3231   1C24             ; END SHIFT
3232   1C24 E7            pop d
3233   1C25 FD 3E         mov [d], bl
3234   1C27             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
3235   1C27 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3236   1C2A D7            push a
3237   1C2B DA            push d
3238   1C2C 26 01 00      mov b, $1
3239   1C2F E7            pop d
3240   1C30 5A            add d, b
3241   1C31 E4            pop a
3242   1C32 DA            push d
3243   1C33 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3244   1C36 D7            push a
3245   1C37 DA            push d
3246   1C38 26 00 00      mov b, $0
3247   1C3B E7            pop d
3248   1C3C 5A            add d, b
3249   1C3D E4            pop a
3250   1C3E 32            mov bl, [d]
3251   1C3F A7 00         mov bh, 0
3252   1C41 D7            push a
3253   1C42 11            mov a, b
3254   1C43 26 03 00      mov b, $3
3255   1C46 FD 92         and b, a ; &
3256   1C48 E4            pop a
3257   1C49             ; START SHIFT
3258   1C49 D7            push a
3259   1C4A 11            mov a, b
3260   1C4B 26 04 00      mov b, $4
3261   1C4E FD 39         mov c, b
3262   1C50 9D            shl a, cl
3263   1C51 27            mov b, a
3264   1C52 E4            pop a
3265   1C53             ; END SHIFT
3266   1C53             ; START TERMS
3267   1C53 D7            push a
3268   1C54 11            mov a, b
3269   1C55 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3270   1C58 D7            push a
3271   1C59 DA            push d
3272   1C5A 26 01 00      mov b, $1
3273   1C5D E7            pop d
3274   1C5E 5A            add d, b
3275   1C5F E4            pop a
3276   1C60 32            mov bl, [d]
3277   1C61 A7 00         mov bh, 0
3278   1C63 D7            push a
3279   1C64 11            mov a, b
3280   1C65 26 F0 00      mov b, $f0
3281   1C68 FD 92         and b, a ; &
3282   1C6A E4            pop a
3283   1C6B             ; START SHIFT
3284   1C6B D7            push a
3285   1C6C 11            mov a, b
3286   1C6D 26 04 00      mov b, $4
3287   1C70 FD 39         mov c, b
3288   1C72 A5            ashr a, cl
3289   1C73 27            mov b, a
3290   1C74 E4            pop a
3291   1C75             ; END SHIFT
3292   1C75 56            add b, a
3293   1C76 E4            pop a
3294   1C77             ; END TERMS
3295   1C77 E7            pop d
3296   1C78 FD 3E         mov [d], bl
3297   1C7A             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
3298   1C7A FA F2 FF      lea d, [bp + -14] ; $output_buffer
3299   1C7D D7            push a
3300   1C7E DA            push d
3301   1C7F 26 02 00      mov b, $2
3302   1C82 E7            pop d
3303   1C83 5A            add d, b
3304   1C84 E4            pop a
3305   1C85 DA            push d
3306   1C86 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3307   1C89 D7            push a
3308   1C8A DA            push d
3309   1C8B 26 01 00      mov b, $1
3310   1C8E E7            pop d
3311   1C8F 5A            add d, b
3312   1C90 E4            pop a
3313   1C91 32            mov bl, [d]
3314   1C92 A7 00         mov bh, 0
3315   1C94 D7            push a
3316   1C95 11            mov a, b
3317   1C96 26 0F 00      mov b, $f
3318   1C99 FD 92         and b, a ; &
3319   1C9B E4            pop a
3320   1C9C             ; START SHIFT
3321   1C9C D7            push a
3322   1C9D 11            mov a, b
3323   1C9E 26 02 00      mov b, $2
3324   1CA1 FD 39         mov c, b
3325   1CA3 9D            shl a, cl
3326   1CA4 27            mov b, a
3327   1CA5 E4            pop a
3328   1CA6             ; END SHIFT
3329   1CA6             ; START TERMS
3330   1CA6 D7            push a
3331   1CA7 11            mov a, b
3332   1CA8 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3333   1CAB D7            push a
3334   1CAC DA            push d
3335   1CAD 26 02 00      mov b, $2
3336   1CB0 E7            pop d
3337   1CB1 5A            add d, b
3338   1CB2 E4            pop a
3339   1CB3 32            mov bl, [d]
3340   1CB4 A7 00         mov bh, 0
3341   1CB6 D7            push a
3342   1CB7 11            mov a, b
3343   1CB8 26 C0 00      mov b, $c0
3344   1CBB FD 92         and b, a ; &
3345   1CBD E4            pop a
3346   1CBE             ; START SHIFT
3347   1CBE D7            push a
3348   1CBF 11            mov a, b
3349   1CC0 26 06 00      mov b, $6
3350   1CC3 FD 39         mov c, b
3351   1CC5 A5            ashr a, cl
3352   1CC6 27            mov b, a
3353   1CC7 E4            pop a
3354   1CC8             ; END SHIFT
3355   1CC8 56            add b, a
3356   1CC9 E4            pop a
3357   1CCA             ; END TERMS
3358   1CCA E7            pop d
3359   1CCB FD 3E         mov [d], bl
3360   1CCD             ;; for (k = 0; k < i + 1; k++) { 
3361   1CCD             _for47_init:
3362   1CCD FA FB FF      lea d, [bp + -5] ; $k
3363   1CD0 DA            push d
3364   1CD1 26 00 00      mov b, $0
3365   1CD4 E7            pop d
3366   1CD5 FD 43         mov [d], b
3367   1CD7             _for47_cond:
3368   1CD7 FA FB FF      lea d, [bp + -5] ; $k
3369   1CDA 2A            mov b, [d]
3370   1CDB             ; START RELATIONAL
3371   1CDB D7            push a
3372   1CDC 11            mov a, b
3373   1CDD FA FF FF      lea d, [bp + -1] ; $i
3374   1CE0 2A            mov b, [d]
3375   1CE1             ; START TERMS
3376   1CE1 D7            push a
3377   1CE2 11            mov a, b
3378   1CE3 26 01 00      mov b, $1
3379   1CE6 56            add b, a
3380   1CE7 E4            pop a
3381   1CE8             ; END TERMS
3382   1CE8 B0            cmp a, b
3383   1CE9 FD 73         slt ; < (signed)
3384   1CEB E4            pop a
3385   1CEC             ; END RELATIONAL
3386   1CEC C0 00 00      cmp b, 0
3387   1CEF C6 3F 1D      je _for47_exit
3388   1CF2             _for47_block:
3389   1CF2             ;; output[j++] = base64_table[output_buffer[k]]; 
3390   1CF2 FA 07 00      lea d, [bp + 7] ; $output
3391   1CF5 FD 2A         mov d, [d]
3392   1CF7 D7            push a
3393   1CF8 DA            push d
3394   1CF9 FA FD FF      lea d, [bp + -3] ; $j
3395   1CFC 2A            mov b, [d]
3396   1CFD FD 77         inc b
3397   1CFF FA FD FF      lea d, [bp + -3] ; $j
3398   1D02 FD 43         mov [d], b
3399   1D04 FD 7D         dec b
3400   1D06 E7            pop d
3401   1D07 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3402   1D0B E4            pop a
3403   1D0C DA            push d
3404   1D0D 3B 21 23      mov d, _base64_table ; $base64_table
3405   1D10 FD 2A         mov d, [d]
3406   1D12 D7            push a
3407   1D13 DA            push d
3408   1D14 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3409   1D17 D7            push a
3410   1D18 DA            push d
3411   1D19 FA FB FF      lea d, [bp + -5] ; $k
3412   1D1C 2A            mov b, [d]
3413   1D1D E7            pop d
3414   1D1E 5A            add d, b
3415   1D1F E4            pop a
3416   1D20 32            mov bl, [d]
3417   1D21 A7 00         mov bh, 0
3418   1D23 E7            pop d
3419   1D24 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3420   1D28 E4            pop a
3421   1D29 32            mov bl, [d]
3422   1D2A A7 00         mov bh, 0
3423   1D2C E7            pop d
3424   1D2D FD 3E         mov [d], bl
3425   1D2F             _for47_update:
3426   1D2F FA FB FF      lea d, [bp + -5] ; $k
3427   1D32 2A            mov b, [d]
3428   1D33 FD 77         inc b
3429   1D35 FA FB FF      lea d, [bp + -5] ; $k
3430   1D38 FD 43         mov [d], b
3431   1D3A FD 7D         dec b
3432   1D3C 0A D7 1C      jmp _for47_cond
3433   1D3F             _for47_exit:
3434   1D3F             ;; while (i++ < 3) { 
3435   1D3F             _while48_cond:
3436   1D3F FA FF FF      lea d, [bp + -1] ; $i
3437   1D42 2A            mov b, [d]
3438   1D43 FD 77         inc b
3439   1D45 FA FF FF      lea d, [bp + -1] ; $i
3440   1D48 FD 43         mov [d], b
3441   1D4A FD 7D         dec b
3442   1D4C             ; START RELATIONAL
3443   1D4C D7            push a
3444   1D4D 11            mov a, b
3445   1D4E 26 03 00      mov b, $3
3446   1D51 B0            cmp a, b
3447   1D52 FD 73         slt ; < (signed)
3448   1D54 E4            pop a
3449   1D55             ; END RELATIONAL
3450   1D55 C0 00 00      cmp b, 0
3451   1D58 C6 7F 1D      je _while48_exit
3452   1D5B             _while48_block:
3453   1D5B             ;; output[j++] = '='; 
3454   1D5B FA 07 00      lea d, [bp + 7] ; $output
3455   1D5E FD 2A         mov d, [d]
3456   1D60 D7            push a
3457   1D61 DA            push d
3458   1D62 FA FD FF      lea d, [bp + -3] ; $j
3459   1D65 2A            mov b, [d]
3460   1D66 FD 77         inc b
3461   1D68 FA FD FF      lea d, [bp + -3] ; $j
3462   1D6B FD 43         mov [d], b
3463   1D6D FD 7D         dec b
3464   1D6F E7            pop d
3465   1D70 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3466   1D74 E4            pop a
3467   1D75 DA            push d
3468   1D76 26 3D 00      mov b, $3d
3469   1D79 E7            pop d
3470   1D7A FD 3E         mov [d], bl
3471   1D7C 0A 3F 1D      jmp _while48_cond
3472   1D7F             _while48_exit:
3473   1D7F 0A 82 1D      jmp _if45_exit
3474   1D82             _if45_exit:
3475   1D82             ;; output[j] = '\0'; 
3476   1D82 FA 07 00      lea d, [bp + 7] ; $output
3477   1D85 FD 2A         mov d, [d]
3478   1D87 D7            push a
3479   1D88 DA            push d
3480   1D89 FA FD FF      lea d, [bp + -3] ; $j
3481   1D8C 2A            mov b, [d]
3482   1D8D E7            pop d
3483   1D8E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3484   1D92 E4            pop a
3485   1D93 DA            push d
3486   1D94 26 00 00      mov b, $0
3487   1D97 E7            pop d
3488   1D98 FD 3E         mov [d], bl
3489   1D9A F9            leave
3490   1D9B 09            ret
3491   1D9C             
3492   1D9C             base64_char_value:
3493   1D9C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3494   1D9F             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
3495   1D9F             _if49_cond:
3496   1D9F FA 05 00      lea d, [bp + 5] ; $c
3497   1DA2 32            mov bl, [d]
3498   1DA3 A7 00         mov bh, 0
3499   1DA5             ; START RELATIONAL
3500   1DA5 D7            push a
3501   1DA6 11            mov a, b
3502   1DA7 26 41 00      mov b, $41
3503   1DAA B0            cmp a, b
3504   1DAB FD 80         sge ; >=
3505   1DAD E4            pop a
3506   1DAE             ; END RELATIONAL
3507   1DAE             ; START LOGICAL AND
3508   1DAE D7            push a
3509   1DAF 11            mov a, b
3510   1DB0 FA 05 00      lea d, [bp + 5] ; $c
3511   1DB3 32            mov bl, [d]
3512   1DB4 A7 00         mov bh, 0
3513   1DB6             ; START RELATIONAL
3514   1DB6 D7            push a
3515   1DB7 11            mov a, b
3516   1DB8 26 5A 00      mov b, $5a
3517   1DBB B0            cmp a, b
3518   1DBC FD 73         slt ; <= (signed)
3519   1DBE E4            pop a
3520   1DBF             ; END RELATIONAL
3521   1DBF FD A7         sand a, b
3522   1DC1 E4            pop a
3523   1DC2             ; END LOGICAL AND
3524   1DC2 C0 00 00      cmp b, 0
3525   1DC5 C6 DB 1D      je _if49_exit
3526   1DC8             _if49_true:
3527   1DC8             ;; return c - 'A'; 
3528   1DC8 FA 05 00      lea d, [bp + 5] ; $c
3529   1DCB 32            mov bl, [d]
3530   1DCC A7 00         mov bh, 0
3531   1DCE             ; START TERMS
3532   1DCE D7            push a
3533   1DCF 11            mov a, b
3534   1DD0 26 41 00      mov b, $41
3535   1DD3 60            sub a, b
3536   1DD4 27            mov b, a
3537   1DD5 E4            pop a
3538   1DD6             ; END TERMS
3539   1DD6 F9            leave
3540   1DD7 09            ret
3541   1DD8 0A DB 1D      jmp _if49_exit
3542   1DDB             _if49_exit:
3543   1DDB             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
3544   1DDB             _if50_cond:
3545   1DDB FA 05 00      lea d, [bp + 5] ; $c
3546   1DDE 32            mov bl, [d]
3547   1DDF A7 00         mov bh, 0
3548   1DE1             ; START RELATIONAL
3549   1DE1 D7            push a
3550   1DE2 11            mov a, b
3551   1DE3 26 61 00      mov b, $61
3552   1DE6 B0            cmp a, b
3553   1DE7 FD 80         sge ; >=
3554   1DE9 E4            pop a
3555   1DEA             ; END RELATIONAL
3556   1DEA             ; START LOGICAL AND
3557   1DEA D7            push a
3558   1DEB 11            mov a, b
3559   1DEC FA 05 00      lea d, [bp + 5] ; $c
3560   1DEF 32            mov bl, [d]
3561   1DF0 A7 00         mov bh, 0
3562   1DF2             ; START RELATIONAL
3563   1DF2 D7            push a
3564   1DF3 11            mov a, b
3565   1DF4 26 7A 00      mov b, $7a
3566   1DF7 B0            cmp a, b
3567   1DF8 FD 73         slt ; <= (signed)
3568   1DFA E4            pop a
3569   1DFB             ; END RELATIONAL
3570   1DFB FD A7         sand a, b
3571   1DFD E4            pop a
3572   1DFE             ; END LOGICAL AND
3573   1DFE C0 00 00      cmp b, 0
3574   1E01 C6 1C 1E      je _if50_exit
3575   1E04             _if50_true:
3576   1E04             ;; return c - 'a' + 26; 
3577   1E04 FA 05 00      lea d, [bp + 5] ; $c
3578   1E07 32            mov bl, [d]
3579   1E08 A7 00         mov bh, 0
3580   1E0A             ; START TERMS
3581   1E0A D7            push a
3582   1E0B 11            mov a, b
3583   1E0C 26 61 00      mov b, $61
3584   1E0F 60            sub a, b
3585   1E10 27            mov b, a
3586   1E11 11            mov a, b
3587   1E12 26 1A 00      mov b, $1a
3588   1E15 56            add b, a
3589   1E16 E4            pop a
3590   1E17             ; END TERMS
3591   1E17 F9            leave
3592   1E18 09            ret
3593   1E19 0A 1C 1E      jmp _if50_exit
3594   1E1C             _if50_exit:
3595   1E1C             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
3596   1E1C             _if51_cond:
3597   1E1C FA 05 00      lea d, [bp + 5] ; $c
3598   1E1F 32            mov bl, [d]
3599   1E20 A7 00         mov bh, 0
3600   1E22             ; START RELATIONAL
3601   1E22 D7            push a
3602   1E23 11            mov a, b
3603   1E24 26 30 00      mov b, $30
3604   1E27 B0            cmp a, b
3605   1E28 FD 80         sge ; >=
3606   1E2A E4            pop a
3607   1E2B             ; END RELATIONAL
3608   1E2B             ; START LOGICAL AND
3609   1E2B D7            push a
3610   1E2C 11            mov a, b
3611   1E2D FA 05 00      lea d, [bp + 5] ; $c
3612   1E30 32            mov bl, [d]
3613   1E31 A7 00         mov bh, 0
3614   1E33             ; START RELATIONAL
3615   1E33 D7            push a
3616   1E34 11            mov a, b
3617   1E35 26 39 00      mov b, $39
3618   1E38 B0            cmp a, b
3619   1E39 FD 73         slt ; <= (signed)
3620   1E3B E4            pop a
3621   1E3C             ; END RELATIONAL
3622   1E3C FD A7         sand a, b
3623   1E3E E4            pop a
3624   1E3F             ; END LOGICAL AND
3625   1E3F C0 00 00      cmp b, 0
3626   1E42 C6 5D 1E      je _if51_exit
3627   1E45             _if51_true:
3628   1E45             ;; return c - '0' + 52; 
3629   1E45 FA 05 00      lea d, [bp + 5] ; $c
3630   1E48 32            mov bl, [d]
3631   1E49 A7 00         mov bh, 0
3632   1E4B             ; START TERMS
3633   1E4B D7            push a
3634   1E4C 11            mov a, b
3635   1E4D 26 30 00      mov b, $30
3636   1E50 60            sub a, b
3637   1E51 27            mov b, a
3638   1E52 11            mov a, b
3639   1E53 26 34 00      mov b, $34
3640   1E56 56            add b, a
3641   1E57 E4            pop a
3642   1E58             ; END TERMS
3643   1E58 F9            leave
3644   1E59 09            ret
3645   1E5A 0A 5D 1E      jmp _if51_exit
3646   1E5D             _if51_exit:
3647   1E5D             ;; if (c == '+') return 62; 
3648   1E5D             _if52_cond:
3649   1E5D FA 05 00      lea d, [bp + 5] ; $c
3650   1E60 32            mov bl, [d]
3651   1E61 A7 00         mov bh, 0
3652   1E63             ; START RELATIONAL
3653   1E63 D7            push a
3654   1E64 11            mov a, b
3655   1E65 26 2B 00      mov b, $2b
3656   1E68 B0            cmp a, b
3657   1E69 FD 71         seq ; ==
3658   1E6B E4            pop a
3659   1E6C             ; END RELATIONAL
3660   1E6C C0 00 00      cmp b, 0
3661   1E6F C6 7A 1E      je _if52_exit
3662   1E72             _if52_true:
3663   1E72             ;; return 62; 
3664   1E72 26 3E 00      mov b, $3e
3665   1E75 F9            leave
3666   1E76 09            ret
3667   1E77 0A 7A 1E      jmp _if52_exit
3668   1E7A             _if52_exit:
3669   1E7A             ;; if (c == '/') return 63; 
3670   1E7A             _if53_cond:
3671   1E7A FA 05 00      lea d, [bp + 5] ; $c
3672   1E7D 32            mov bl, [d]
3673   1E7E A7 00         mov bh, 0
3674   1E80             ; START RELATIONAL
3675   1E80 D7            push a
3676   1E81 11            mov a, b
3677   1E82 26 2F 00      mov b, $2f
3678   1E85 B0            cmp a, b
3679   1E86 FD 71         seq ; ==
3680   1E88 E4            pop a
3681   1E89             ; END RELATIONAL
3682   1E89 C0 00 00      cmp b, 0
3683   1E8C C6 97 1E      je _if53_exit
3684   1E8F             _if53_true:
3685   1E8F             ;; return 63; 
3686   1E8F 26 3F 00      mov b, $3f
3687   1E92 F9            leave
3688   1E93 09            ret
3689   1E94 0A 97 1E      jmp _if53_exit
3690   1E97             _if53_exit:
3691   1E97             ;; return -1; 
3692   1E97 26 FF FF      mov b, $ffff
3693   1E9A F9            leave
3694   1E9B 09            ret
3695   1E9C             
3696   1E9C             base64_decode:
3697   1E9C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3698   1E9F             ;; int i = 0, j = 0, k = 0; 
3699   1E9F 52 02 00      sub sp, 2 ; i
3700   1EA2             ; --- START LOCAL VAR INITIALIZATION
3701   1EA2 FA FF FF      lea d, [bp + -1] ; $i
3702   1EA5 DA            push d
3703   1EA6 26 00 00      mov b, $0
3704   1EA9 E7            pop d
3705   1EAA FD 43         mov [d], b
3706   1EAC             ; --- END LOCAL VAR INITIALIZATION
3707   1EAC 52 02 00      sub sp, 2 ; j
3708   1EAF             ; --- START LOCAL VAR INITIALIZATION
3709   1EAF FA FD FF      lea d, [bp + -3] ; $j
3710   1EB2 DA            push d
3711   1EB3 26 00 00      mov b, $0
3712   1EB6 E7            pop d
3713   1EB7 FD 43         mov [d], b
3714   1EB9             ; --- END LOCAL VAR INITIALIZATION
3715   1EB9 52 02 00      sub sp, 2 ; k
3716   1EBC             ; --- START LOCAL VAR INITIALIZATION
3717   1EBC FA FB FF      lea d, [bp + -5] ; $k
3718   1EBF DA            push d
3719   1EC0 26 00 00      mov b, $0
3720   1EC3 E7            pop d
3721   1EC4 FD 43         mov [d], b
3722   1EC6             ; --- END LOCAL VAR INITIALIZATION
3723   1EC6             ;; int input_len; 
3724   1EC6 52 02 00      sub sp, 2 ; input_len
3725   1EC9             ;; unsigned char input_buffer[4]; 
3726   1EC9 52 04 00      sub sp, 4 ; input_buffer
3727   1ECC             ;; unsigned char output_buffer[3]; 
3728   1ECC 52 03 00      sub sp, 3 ; output_buffer
3729   1ECF             ;; input_len = strlen(input); 
3730   1ECF FA F9 FF      lea d, [bp + -7] ; $input_len
3731   1ED2 DA            push d
3732   1ED3 FA 05 00      lea d, [bp + 5] ; $input
3733   1ED6 2A            mov b, [d]
3734   1ED7 FD AB         swp b
3735   1ED9 D8            push b
3736   1EDA 07 F5 05      call strlen
3737   1EDD 51 02 00      add sp, 2
3738   1EE0 E7            pop d
3739   1EE1 FD 43         mov [d], b
3740   1EE3             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
3741   1EE3             _while54_cond:
3742   1EE3 FA F9 FF      lea d, [bp + -7] ; $input_len
3743   1EE6 2A            mov b, [d]
3744   1EE7 FD 7D         dec b
3745   1EE9 FA F9 FF      lea d, [bp + -7] ; $input_len
3746   1EEC FD 43         mov [d], b
3747   1EEE FD 77         inc b
3748   1EF0             ; START LOGICAL AND
3749   1EF0 D7            push a
3750   1EF1 11            mov a, b
3751   1EF2 FA 05 00      lea d, [bp + 5] ; $input
3752   1EF5 FD 2A         mov d, [d]
3753   1EF7 D7            push a
3754   1EF8 DA            push d
3755   1EF9 FA FB FF      lea d, [bp + -5] ; $k
3756   1EFC 2A            mov b, [d]
3757   1EFD E7            pop d
3758   1EFE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3759   1F02 E4            pop a
3760   1F03 32            mov bl, [d]
3761   1F04 A7 00         mov bh, 0
3762   1F06             ; START RELATIONAL
3763   1F06 D7            push a
3764   1F07 11            mov a, b
3765   1F08 26 3D 00      mov b, $3d
3766   1F0B B0            cmp a, b
3767   1F0C FD 72         sneq ; !=
3768   1F0E E4            pop a
3769   1F0F             ; END RELATIONAL
3770   1F0F FD A7         sand a, b
3771   1F11 11            mov a, b
3772   1F12 FA 05 00      lea d, [bp + 5] ; $input
3773   1F15 FD 2A         mov d, [d]
3774   1F17 D7            push a
3775   1F18 DA            push d
3776   1F19 FA FB FF      lea d, [bp + -5] ; $k
3777   1F1C 2A            mov b, [d]
3778   1F1D E7            pop d
3779   1F1E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3780   1F22 E4            pop a
3781   1F23 32            mov bl, [d]
3782   1F24 A7 00         mov bh, 0
3783   1F26 DD            push bl
3784   1F27 07 9C 1D      call base64_char_value
3785   1F2A 51 01 00      add sp, 1
3786   1F2D             ; START RELATIONAL
3787   1F2D D7            push a
3788   1F2E 11            mov a, b
3789   1F2F 26 FF FF      mov b, $ffff
3790   1F32 B0            cmp a, b
3791   1F33 FD 72         sneq ; !=
3792   1F35 E4            pop a
3793   1F36             ; END RELATIONAL
3794   1F36 FD A7         sand a, b
3795   1F38 E4            pop a
3796   1F39             ; END LOGICAL AND
3797   1F39 C0 00 00      cmp b, 0
3798   1F3C C6 24 21      je _while54_exit
3799   1F3F             _while54_block:
3800   1F3F             ;; input_buffer[i++] = input[k++]; 
3801   1F3F FA F5 FF      lea d, [bp + -11] ; $input_buffer
3802   1F42 D7            push a
3803   1F43 DA            push d
3804   1F44 FA FF FF      lea d, [bp + -1] ; $i
3805   1F47 2A            mov b, [d]
3806   1F48 FD 77         inc b
3807   1F4A FA FF FF      lea d, [bp + -1] ; $i
3808   1F4D FD 43         mov [d], b
3809   1F4F FD 7D         dec b
3810   1F51 E7            pop d
3811   1F52 5A            add d, b
3812   1F53 E4            pop a
3813   1F54 DA            push d
3814   1F55 FA 05 00      lea d, [bp + 5] ; $input
3815   1F58 FD 2A         mov d, [d]
3816   1F5A D7            push a
3817   1F5B DA            push d
3818   1F5C FA FB FF      lea d, [bp + -5] ; $k
3819   1F5F 2A            mov b, [d]
3820   1F60 FD 77         inc b
3821   1F62 FA FB FF      lea d, [bp + -5] ; $k
3822   1F65 FD 43         mov [d], b
3823   1F67 FD 7D         dec b
3824   1F69 E7            pop d
3825   1F6A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3826   1F6E E4            pop a
3827   1F6F 32            mov bl, [d]
3828   1F70 A7 00         mov bh, 0
3829   1F72 E7            pop d
3830   1F73 FD 3E         mov [d], bl
3831   1F75             ;; if (i == 4) { 
3832   1F75             _if55_cond:
3833   1F75 FA FF FF      lea d, [bp + -1] ; $i
3834   1F78 2A            mov b, [d]
3835   1F79             ; START RELATIONAL
3836   1F79 D7            push a
3837   1F7A 11            mov a, b
3838   1F7B 26 04 00      mov b, $4
3839   1F7E B0            cmp a, b
3840   1F7F FD 71         seq ; ==
3841   1F81 E4            pop a
3842   1F82             ; END RELATIONAL
3843   1F82 C0 00 00      cmp b, 0
3844   1F85 C6 21 21      je _if55_exit
3845   1F88             _if55_true:
3846   1F88             ;; for (i = 0; i < 4; i++) { 
3847   1F88             _for56_init:
3848   1F88 FA FF FF      lea d, [bp + -1] ; $i
3849   1F8B DA            push d
3850   1F8C 26 00 00      mov b, $0
3851   1F8F E7            pop d
3852   1F90 FD 43         mov [d], b
3853   1F92             _for56_cond:
3854   1F92 FA FF FF      lea d, [bp + -1] ; $i
3855   1F95 2A            mov b, [d]
3856   1F96             ; START RELATIONAL
3857   1F96 D7            push a
3858   1F97 11            mov a, b
3859   1F98 26 04 00      mov b, $4
3860   1F9B B0            cmp a, b
3861   1F9C FD 73         slt ; < (signed)
3862   1F9E E4            pop a
3863   1F9F             ; END RELATIONAL
3864   1F9F C0 00 00      cmp b, 0
3865   1FA2 C6 DB 1F      je _for56_exit
3866   1FA5             _for56_block:
3867   1FA5             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
3868   1FA5 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3869   1FA8 D7            push a
3870   1FA9 DA            push d
3871   1FAA FA FF FF      lea d, [bp + -1] ; $i
3872   1FAD 2A            mov b, [d]
3873   1FAE E7            pop d
3874   1FAF 5A            add d, b
3875   1FB0 E4            pop a
3876   1FB1 DA            push d
3877   1FB2 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3878   1FB5 D7            push a
3879   1FB6 DA            push d
3880   1FB7 FA FF FF      lea d, [bp + -1] ; $i
3881   1FBA 2A            mov b, [d]
3882   1FBB E7            pop d
3883   1FBC 5A            add d, b
3884   1FBD E4            pop a
3885   1FBE 32            mov bl, [d]
3886   1FBF A7 00         mov bh, 0
3887   1FC1 DD            push bl
3888   1FC2 07 9C 1D      call base64_char_value
3889   1FC5 51 01 00      add sp, 1
3890   1FC8 E7            pop d
3891   1FC9 FD 3E         mov [d], bl
3892   1FCB             _for56_update:
3893   1FCB FA FF FF      lea d, [bp + -1] ; $i
3894   1FCE 2A            mov b, [d]
3895   1FCF FD 77         inc b
3896   1FD1 FA FF FF      lea d, [bp + -1] ; $i
3897   1FD4 FD 43         mov [d], b
3898   1FD6 FD 7D         dec b
3899   1FD8 0A 92 1F      jmp _for56_cond
3900   1FDB             _for56_exit:
3901   1FDB             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
3902   1FDB FA F2 FF      lea d, [bp + -14] ; $output_buffer
3903   1FDE D7            push a
3904   1FDF DA            push d
3905   1FE0 26 00 00      mov b, $0
3906   1FE3 E7            pop d
3907   1FE4 5A            add d, b
3908   1FE5 E4            pop a
3909   1FE6 DA            push d
3910   1FE7 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3911   1FEA D7            push a
3912   1FEB DA            push d
3913   1FEC 26 00 00      mov b, $0
3914   1FEF E7            pop d
3915   1FF0 5A            add d, b
3916   1FF1 E4            pop a
3917   1FF2 32            mov bl, [d]
3918   1FF3 A7 00         mov bh, 0
3919   1FF5             ; START SHIFT
3920   1FF5 D7            push a
3921   1FF6 11            mov a, b
3922   1FF7 26 02 00      mov b, $2
3923   1FFA FD 39         mov c, b
3924   1FFC 9D            shl a, cl
3925   1FFD 27            mov b, a
3926   1FFE E4            pop a
3927   1FFF             ; END SHIFT
3928   1FFF             ; START TERMS
3929   1FFF D7            push a
3930   2000 11            mov a, b
3931   2001 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3932   2004 D7            push a
3933   2005 DA            push d
3934   2006 26 01 00      mov b, $1
3935   2009 E7            pop d
3936   200A 5A            add d, b
3937   200B E4            pop a
3938   200C 32            mov bl, [d]
3939   200D A7 00         mov bh, 0
3940   200F D7            push a
3941   2010 11            mov a, b
3942   2011 26 30 00      mov b, $30
3943   2014 FD 92         and b, a ; &
3944   2016 E4            pop a
3945   2017             ; START SHIFT
3946   2017 D7            push a
3947   2018 11            mov a, b
3948   2019 26 04 00      mov b, $4
3949   201C FD 39         mov c, b
3950   201E A5            ashr a, cl
3951   201F 27            mov b, a
3952   2020 E4            pop a
3953   2021             ; END SHIFT
3954   2021 56            add b, a
3955   2022 E4            pop a
3956   2023             ; END TERMS
3957   2023 E7            pop d
3958   2024 FD 3E         mov [d], bl
3959   2026             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
3960   2026 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3961   2029 D7            push a
3962   202A DA            push d
3963   202B 26 01 00      mov b, $1
3964   202E E7            pop d
3965   202F 5A            add d, b
3966   2030 E4            pop a
3967   2031 DA            push d
3968   2032 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3969   2035 D7            push a
3970   2036 DA            push d
3971   2037 26 01 00      mov b, $1
3972   203A E7            pop d
3973   203B 5A            add d, b
3974   203C E4            pop a
3975   203D 32            mov bl, [d]
3976   203E A7 00         mov bh, 0
3977   2040 D7            push a
3978   2041 11            mov a, b
3979   2042 26 0F 00      mov b, $f
3980   2045 FD 92         and b, a ; &
3981   2047 E4            pop a
3982   2048             ; START SHIFT
3983   2048 D7            push a
3984   2049 11            mov a, b
3985   204A 26 04 00      mov b, $4
3986   204D FD 39         mov c, b
3987   204F 9D            shl a, cl
3988   2050 27            mov b, a
3989   2051 E4            pop a
3990   2052             ; END SHIFT
3991   2052             ; START TERMS
3992   2052 D7            push a
3993   2053 11            mov a, b
3994   2054 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3995   2057 D7            push a
3996   2058 DA            push d
3997   2059 26 02 00      mov b, $2
3998   205C E7            pop d
3999   205D 5A            add d, b
4000   205E E4            pop a
4001   205F 32            mov bl, [d]
4002   2060 A7 00         mov bh, 0
4003   2062 D7            push a
4004   2063 11            mov a, b
4005   2064 26 3C 00      mov b, $3c
4006   2067 FD 92         and b, a ; &
4007   2069 E4            pop a
4008   206A             ; START SHIFT
4009   206A D7            push a
4010   206B 11            mov a, b
4011   206C 26 02 00      mov b, $2
4012   206F FD 39         mov c, b
4013   2071 A5            ashr a, cl
4014   2072 27            mov b, a
4015   2073 E4            pop a
4016   2074             ; END SHIFT
4017   2074 56            add b, a
4018   2075 E4            pop a
4019   2076             ; END TERMS
4020   2076 E7            pop d
4021   2077 FD 3E         mov [d], bl
4022   2079             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
4023   2079 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4024   207C D7            push a
4025   207D DA            push d
4026   207E 26 02 00      mov b, $2
4027   2081 E7            pop d
4028   2082 5A            add d, b
4029   2083 E4            pop a
4030   2084 DA            push d
4031   2085 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4032   2088 D7            push a
4033   2089 DA            push d
4034   208A 26 02 00      mov b, $2
4035   208D E7            pop d
4036   208E 5A            add d, b
4037   208F E4            pop a
4038   2090 32            mov bl, [d]
4039   2091 A7 00         mov bh, 0
4040   2093 D7            push a
4041   2094 11            mov a, b
4042   2095 26 03 00      mov b, $3
4043   2098 FD 92         and b, a ; &
4044   209A E4            pop a
4045   209B             ; START SHIFT
4046   209B D7            push a
4047   209C 11            mov a, b
4048   209D 26 06 00      mov b, $6
4049   20A0 FD 39         mov c, b
4050   20A2 9D            shl a, cl
4051   20A3 27            mov b, a
4052   20A4 E4            pop a
4053   20A5             ; END SHIFT
4054   20A5             ; START TERMS
4055   20A5 D7            push a
4056   20A6 11            mov a, b
4057   20A7 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4058   20AA D7            push a
4059   20AB DA            push d
4060   20AC 26 03 00      mov b, $3
4061   20AF E7            pop d
4062   20B0 5A            add d, b
4063   20B1 E4            pop a
4064   20B2 32            mov bl, [d]
4065   20B3 A7 00         mov bh, 0
4066   20B5 56            add b, a
4067   20B6 E4            pop a
4068   20B7             ; END TERMS
4069   20B7 E7            pop d
4070   20B8 FD 3E         mov [d], bl
4071   20BA             ;; for (i = 0; i < 3; i++) { 
4072   20BA             _for57_init:
4073   20BA FA FF FF      lea d, [bp + -1] ; $i
4074   20BD DA            push d
4075   20BE 26 00 00      mov b, $0
4076   20C1 E7            pop d
4077   20C2 FD 43         mov [d], b
4078   20C4             _for57_cond:
4079   20C4 FA FF FF      lea d, [bp + -1] ; $i
4080   20C7 2A            mov b, [d]
4081   20C8             ; START RELATIONAL
4082   20C8 D7            push a
4083   20C9 11            mov a, b
4084   20CA 26 03 00      mov b, $3
4085   20CD B0            cmp a, b
4086   20CE FD 73         slt ; < (signed)
4087   20D0 E4            pop a
4088   20D1             ; END RELATIONAL
4089   20D1 C0 00 00      cmp b, 0
4090   20D4 C6 14 21      je _for57_exit
4091   20D7             _for57_block:
4092   20D7             ;; output[j++] = output_buffer[i]; 
4093   20D7 FA 07 00      lea d, [bp + 7] ; $output
4094   20DA FD 2A         mov d, [d]
4095   20DC D7            push a
4096   20DD DA            push d
4097   20DE FA FD FF      lea d, [bp + -3] ; $j
4098   20E1 2A            mov b, [d]
4099   20E2 FD 77         inc b
4100   20E4 FA FD FF      lea d, [bp + -3] ; $j
4101   20E7 FD 43         mov [d], b
4102   20E9 FD 7D         dec b
4103   20EB E7            pop d
4104   20EC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4105   20F0 E4            pop a
4106   20F1 DA            push d
4107   20F2 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4108   20F5 D7            push a
4109   20F6 DA            push d
4110   20F7 FA FF FF      lea d, [bp + -1] ; $i
4111   20FA 2A            mov b, [d]
4112   20FB E7            pop d
4113   20FC 5A            add d, b
4114   20FD E4            pop a
4115   20FE 32            mov bl, [d]
4116   20FF A7 00         mov bh, 0
4117   2101 E7            pop d
4118   2102 FD 3E         mov [d], bl
4119   2104             _for57_update:
4120   2104 FA FF FF      lea d, [bp + -1] ; $i
4121   2107 2A            mov b, [d]
4122   2108 FD 77         inc b
4123   210A FA FF FF      lea d, [bp + -1] ; $i
4124   210D FD 43         mov [d], b
4125   210F FD 7D         dec b
4126   2111 0A C4 20      jmp _for57_cond
4127   2114             _for57_exit:
4128   2114             ;; i = 0; 
4129   2114 FA FF FF      lea d, [bp + -1] ; $i
4130   2117 DA            push d
4131   2118 26 00 00      mov b, $0
4132   211B E7            pop d
4133   211C FD 43         mov [d], b
4134   211E 0A 21 21      jmp _if55_exit
4135   2121             _if55_exit:
4136   2121 0A E3 1E      jmp _while54_cond
4137   2124             _while54_exit:
4138   2124             ;; if (i) { 
4139   2124             _if58_cond:
4140   2124 FA FF FF      lea d, [bp + -1] ; $i
4141   2127 2A            mov b, [d]
4142   2128 C0 00 00      cmp b, 0
4143   212B C6 C6 22      je _if58_exit
4144   212E             _if58_true:
4145   212E             ;; for (k = i; k < 4; k++) { 
4146   212E             _for59_init:
4147   212E FA FB FF      lea d, [bp + -5] ; $k
4148   2131 DA            push d
4149   2132 FA FF FF      lea d, [bp + -1] ; $i
4150   2135 2A            mov b, [d]
4151   2136 E7            pop d
4152   2137 FD 43         mov [d], b
4153   2139             _for59_cond:
4154   2139 FA FB FF      lea d, [bp + -5] ; $k
4155   213C 2A            mov b, [d]
4156   213D             ; START RELATIONAL
4157   213D D7            push a
4158   213E 11            mov a, b
4159   213F 26 04 00      mov b, $4
4160   2142 B0            cmp a, b
4161   2143 FD 73         slt ; < (signed)
4162   2145 E4            pop a
4163   2146             ; END RELATIONAL
4164   2146 C0 00 00      cmp b, 0
4165   2149 C6 6F 21      je _for59_exit
4166   214C             _for59_block:
4167   214C             ;; input_buffer[k] = 0; 
4168   214C FA F5 FF      lea d, [bp + -11] ; $input_buffer
4169   214F D7            push a
4170   2150 DA            push d
4171   2151 FA FB FF      lea d, [bp + -5] ; $k
4172   2154 2A            mov b, [d]
4173   2155 E7            pop d
4174   2156 5A            add d, b
4175   2157 E4            pop a
4176   2158 DA            push d
4177   2159 26 00 00      mov b, $0
4178   215C E7            pop d
4179   215D FD 3E         mov [d], bl
4180   215F             _for59_update:
4181   215F FA FB FF      lea d, [bp + -5] ; $k
4182   2162 2A            mov b, [d]
4183   2163 FD 77         inc b
4184   2165 FA FB FF      lea d, [bp + -5] ; $k
4185   2168 FD 43         mov [d], b
4186   216A FD 7D         dec b
4187   216C 0A 39 21      jmp _for59_cond
4188   216F             _for59_exit:
4189   216F             ;; for (k = 0; k < 4; k++) { 
4190   216F             _for60_init:
4191   216F FA FB FF      lea d, [bp + -5] ; $k
4192   2172 DA            push d
4193   2173 26 00 00      mov b, $0
4194   2176 E7            pop d
4195   2177 FD 43         mov [d], b
4196   2179             _for60_cond:
4197   2179 FA FB FF      lea d, [bp + -5] ; $k
4198   217C 2A            mov b, [d]
4199   217D             ; START RELATIONAL
4200   217D D7            push a
4201   217E 11            mov a, b
4202   217F 26 04 00      mov b, $4
4203   2182 B0            cmp a, b
4204   2183 FD 73         slt ; < (signed)
4205   2185 E4            pop a
4206   2186             ; END RELATIONAL
4207   2186 C0 00 00      cmp b, 0
4208   2189 C6 C2 21      je _for60_exit
4209   218C             _for60_block:
4210   218C             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
4211   218C FA F5 FF      lea d, [bp + -11] ; $input_buffer
4212   218F D7            push a
4213   2190 DA            push d
4214   2191 FA FB FF      lea d, [bp + -5] ; $k
4215   2194 2A            mov b, [d]
4216   2195 E7            pop d
4217   2196 5A            add d, b
4218   2197 E4            pop a
4219   2198 DA            push d
4220   2199 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4221   219C D7            push a
4222   219D DA            push d
4223   219E FA FB FF      lea d, [bp + -5] ; $k
4224   21A1 2A            mov b, [d]
4225   21A2 E7            pop d
4226   21A3 5A            add d, b
4227   21A4 E4            pop a
4228   21A5 32            mov bl, [d]
4229   21A6 A7 00         mov bh, 0
4230   21A8 DD            push bl
4231   21A9 07 9C 1D      call base64_char_value
4232   21AC 51 01 00      add sp, 1
4233   21AF E7            pop d
4234   21B0 FD 3E         mov [d], bl
4235   21B2             _for60_update:
4236   21B2 FA FB FF      lea d, [bp + -5] ; $k
4237   21B5 2A            mov b, [d]
4238   21B6 FD 77         inc b
4239   21B8 FA FB FF      lea d, [bp + -5] ; $k
4240   21BB FD 43         mov [d], b
4241   21BD FD 7D         dec b
4242   21BF 0A 79 21      jmp _for60_cond
4243   21C2             _for60_exit:
4244   21C2             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
4245   21C2 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4246   21C5 D7            push a
4247   21C6 DA            push d
4248   21C7 26 00 00      mov b, $0
4249   21CA E7            pop d
4250   21CB 5A            add d, b
4251   21CC E4            pop a
4252   21CD DA            push d
4253   21CE FA F5 FF      lea d, [bp + -11] ; $input_buffer
4254   21D1 D7            push a
4255   21D2 DA            push d
4256   21D3 26 00 00      mov b, $0
4257   21D6 E7            pop d
4258   21D7 5A            add d, b
4259   21D8 E4            pop a
4260   21D9 32            mov bl, [d]
4261   21DA A7 00         mov bh, 0
4262   21DC             ; START SHIFT
4263   21DC D7            push a
4264   21DD 11            mov a, b
4265   21DE 26 02 00      mov b, $2
4266   21E1 FD 39         mov c, b
4267   21E3 9D            shl a, cl
4268   21E4 27            mov b, a
4269   21E5 E4            pop a
4270   21E6             ; END SHIFT
4271   21E6             ; START TERMS
4272   21E6 D7            push a
4273   21E7 11            mov a, b
4274   21E8 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4275   21EB D7            push a
4276   21EC DA            push d
4277   21ED 26 01 00      mov b, $1
4278   21F0 E7            pop d
4279   21F1 5A            add d, b
4280   21F2 E4            pop a
4281   21F3 32            mov bl, [d]
4282   21F4 A7 00         mov bh, 0
4283   21F6 D7            push a
4284   21F7 11            mov a, b
4285   21F8 26 30 00      mov b, $30
4286   21FB FD 92         and b, a ; &
4287   21FD E4            pop a
4288   21FE             ; START SHIFT
4289   21FE D7            push a
4290   21FF 11            mov a, b
4291   2200 26 04 00      mov b, $4
4292   2203 FD 39         mov c, b
4293   2205 A5            ashr a, cl
4294   2206 27            mov b, a
4295   2207 E4            pop a
4296   2208             ; END SHIFT
4297   2208 56            add b, a
4298   2209 E4            pop a
4299   220A             ; END TERMS
4300   220A E7            pop d
4301   220B FD 3E         mov [d], bl
4302   220D             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
4303   220D FA F2 FF      lea d, [bp + -14] ; $output_buffer
4304   2210 D7            push a
4305   2211 DA            push d
4306   2212 26 01 00      mov b, $1
4307   2215 E7            pop d
4308   2216 5A            add d, b
4309   2217 E4            pop a
4310   2218 DA            push d
4311   2219 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4312   221C D7            push a
4313   221D DA            push d
4314   221E 26 01 00      mov b, $1
4315   2221 E7            pop d
4316   2222 5A            add d, b
4317   2223 E4            pop a
4318   2224 32            mov bl, [d]
4319   2225 A7 00         mov bh, 0
4320   2227 D7            push a
4321   2228 11            mov a, b
4322   2229 26 0F 00      mov b, $f
4323   222C FD 92         and b, a ; &
4324   222E E4            pop a
4325   222F             ; START SHIFT
4326   222F D7            push a
4327   2230 11            mov a, b
4328   2231 26 04 00      mov b, $4
4329   2234 FD 39         mov c, b
4330   2236 9D            shl a, cl
4331   2237 27            mov b, a
4332   2238 E4            pop a
4333   2239             ; END SHIFT
4334   2239             ; START TERMS
4335   2239 D7            push a
4336   223A 11            mov a, b
4337   223B FA F5 FF      lea d, [bp + -11] ; $input_buffer
4338   223E D7            push a
4339   223F DA            push d
4340   2240 26 02 00      mov b, $2
4341   2243 E7            pop d
4342   2244 5A            add d, b
4343   2245 E4            pop a
4344   2246 32            mov bl, [d]
4345   2247 A7 00         mov bh, 0
4346   2249 D7            push a
4347   224A 11            mov a, b
4348   224B 26 3C 00      mov b, $3c
4349   224E FD 92         and b, a ; &
4350   2250 E4            pop a
4351   2251             ; START SHIFT
4352   2251 D7            push a
4353   2252 11            mov a, b
4354   2253 26 02 00      mov b, $2
4355   2256 FD 39         mov c, b
4356   2258 A5            ashr a, cl
4357   2259 27            mov b, a
4358   225A E4            pop a
4359   225B             ; END SHIFT
4360   225B 56            add b, a
4361   225C E4            pop a
4362   225D             ; END TERMS
4363   225D E7            pop d
4364   225E FD 3E         mov [d], bl
4365   2260             ;; for (k = 0; k < i - 1; k++) { 
4366   2260             _for61_init:
4367   2260 FA FB FF      lea d, [bp + -5] ; $k
4368   2263 DA            push d
4369   2264 26 00 00      mov b, $0
4370   2267 E7            pop d
4371   2268 FD 43         mov [d], b
4372   226A             _for61_cond:
4373   226A FA FB FF      lea d, [bp + -5] ; $k
4374   226D 2A            mov b, [d]
4375   226E             ; START RELATIONAL
4376   226E D7            push a
4377   226F 11            mov a, b
4378   2270 FA FF FF      lea d, [bp + -1] ; $i
4379   2273 2A            mov b, [d]
4380   2274             ; START TERMS
4381   2274 D7            push a
4382   2275 11            mov a, b
4383   2276 26 01 00      mov b, $1
4384   2279 60            sub a, b
4385   227A 27            mov b, a
4386   227B E4            pop a
4387   227C             ; END TERMS
4388   227C B0            cmp a, b
4389   227D FD 73         slt ; < (signed)
4390   227F E4            pop a
4391   2280             ; END RELATIONAL
4392   2280 C0 00 00      cmp b, 0
4393   2283 C6 C3 22      je _for61_exit
4394   2286             _for61_block:
4395   2286             ;; output[j++] = output_buffer[k]; 
4396   2286 FA 07 00      lea d, [bp + 7] ; $output
4397   2289 FD 2A         mov d, [d]
4398   228B D7            push a
4399   228C DA            push d
4400   228D FA FD FF      lea d, [bp + -3] ; $j
4401   2290 2A            mov b, [d]
4402   2291 FD 77         inc b
4403   2293 FA FD FF      lea d, [bp + -3] ; $j
4404   2296 FD 43         mov [d], b
4405   2298 FD 7D         dec b
4406   229A E7            pop d
4407   229B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4408   229F E4            pop a
4409   22A0 DA            push d
4410   22A1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4411   22A4 D7            push a
4412   22A5 DA            push d
4413   22A6 FA FB FF      lea d, [bp + -5] ; $k
4414   22A9 2A            mov b, [d]
4415   22AA E7            pop d
4416   22AB 5A            add d, b
4417   22AC E4            pop a
4418   22AD 32            mov bl, [d]
4419   22AE A7 00         mov bh, 0
4420   22B0 E7            pop d
4421   22B1 FD 3E         mov [d], bl
4422   22B3             _for61_update:
4423   22B3 FA FB FF      lea d, [bp + -5] ; $k
4424   22B6 2A            mov b, [d]
4425   22B7 FD 77         inc b
4426   22B9 FA FB FF      lea d, [bp + -5] ; $k
4427   22BC FD 43         mov [d], b
4428   22BE FD 7D         dec b
4429   22C0 0A 6A 22      jmp _for61_cond
4430   22C3             _for61_exit:
4431   22C3 0A C6 22      jmp _if58_exit
4432   22C6             _if58_exit:
4433   22C6             ;; output[j] = '\0'; 
4434   22C6 FA 07 00      lea d, [bp + 7] ; $output
4435   22C9 FD 2A         mov d, [d]
4436   22CB D7            push a
4437   22CC DA            push d
4438   22CD FA FD FF      lea d, [bp + -3] ; $j
4439   22D0 2A            mov b, [d]
4440   22D1 E7            pop d
4441   22D2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4442   22D6 E4            pop a
4443   22D7 DA            push d
4444   22D8 26 00 00      mov b, $0
4445   22DB E7            pop d
4446   22DC FD 3E         mov [d], bl
4447   22DE F9            leave
4448   22DF 09            ret
4449   22E0             ; --- END TEXT BLOCK
4450   22E0             
4451   22E0             ; --- BEGIN DATA BLOCK
4452   22E0 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
4452   22E4 45 46 47 48 
4452   22E8 49 4A 4B 4C 
4452   22EC 4D 4E 4F 50 
4452   22F0 51 52 53 54 
4452   22F4 55 56 57 58 
4452   22F8 59 5A 61 62 
4452   22FC 63 64 65 66 
4452   2300 67 68 69 6A 
4452   2304 6B 6C 6D 6E 
4452   2308 6F 70 71 72 
4452   230C 73 74 75 76 
4452   2310 77 78 79 7A 
4452   2314 30 31 32 33 
4452   2318 34 35 36 37 
4452   231C 38 39 2B 2F 
4452   2320 00 
4453   2321 E0 22       _base64_table: .dw _base64_table_data
4454   2323 45 6E 74 65 _s0: .db "Enter a base64 encoded string to decode: ", 0
4454   2327 72 20 61 20 
4454   232B 62 61 73 65 
4454   232F 36 34 20 65 
4454   2333 6E 63 6F 64 
4454   2337 65 64 20 73 
4454   233B 74 72 69 6E 
4454   233F 67 20 74 6F 
4454   2343 20 64 65 63 
4454   2347 6F 64 65 3A 
4454   234B 20 00 
4455   234D 45 6E 63 6F _s1: .db "Encoded string: %s\n", 0
4455   2351 64 65 64 20 
4455   2355 73 74 72 69 
4455   2359 6E 67 3A 20 
4455   235D 25 73 0A 00 
4456   2361 44 65 63 6F _s2: .db "Decoded string: %s\n", 0
4456   2365 64 65 64 20 
4456   2369 73 74 72 69 
4456   236D 6E 67 3A 20 
4456   2371 25 73 0A 00 
4457   2375 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
4457   2379 70 65 63 74 
4457   237D 65 64 20 66 
4457   2381 6F 72 6D 61 
4457   2385 74 20 69 6E 
4457   2389 20 70 72 69 
4457   238D 6E 74 66 2E 
4457   2391 00 
4458   2392 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
4458   2396 72 3A 20 55 
4458   239A 6E 6B 6E 6F 
4458   239E 77 6E 20 61 
4458   23A2 72 67 75 6D 
4458   23A6 65 6E 74 20 
4458   23AA 74 79 70 65 
4458   23AE 2E 0A 00 
4459   23B1 1B 5B 32 4A _s5: .db "\033[2J\033[H", 0
4459   23B5 1B 5B 48 00 
4460   23B9             
4461   23B9 BB 23       _heap_top: .dw _heap
4462   23BB 00          _heap: .db 0
4463   23BC             ; --- END DATA BLOCK
4464   23BC             
4465   23BC             .end
tasm: Number of errors = 0
