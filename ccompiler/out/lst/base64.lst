0001   0000             ; --- FILENAME: programs/base64
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $input 
0011   0408             ; $output 
0012   0408 52 00 03      sub sp, 768
0013   040B             ;; printf("Enter a base64 encoded string to decode: "); 
0014   040B 26 C6 1D      mov b, __s0 ; "Enter a base64 encoded string to decode: "
0015   040E FD AB         swp b
0016   0410 D8            push b
0017   0411 07 0F 08      call printf
0018   0414             ;; gets(input); 
0019   0414 FA 01 FE      lea d, [bp + -511] ; $input
0020   0417 2D            mov b, d
0021   0418 FD AB         swp b
0022   041A D8            push b
0023   041B 07 D5 0B      call gets
0024   041E 51 02 00      add sp, 2
0025   0421             ;; base64_encode(input, output); 
0026   0421 FA 01 FD      lea d, [bp + -767] ; $output
0027   0424 2D            mov b, d
0028   0425 FD AB         swp b
0029   0427 D8            push b
0030   0428 FA 01 FE      lea d, [bp + -511] ; $input
0031   042B 2D            mov b, d
0032   042C FD AB         swp b
0033   042E D8            push b
0034   042F 07 81 14      call base64_encode
0035   0432 51 04 00      add sp, 4
0036   0435             ;; printf("Encoded string: %s\n", output); 
0037   0435 FA 01 FD      lea d, [bp + -767] ; $output
0038   0438 2D            mov b, d
0039   0439 FD AB         swp b
0040   043B D8            push b
0041   043C 26 F0 1D      mov b, __s1 ; "Encoded string: %s\n"
0042   043F FD AB         swp b
0043   0441 D8            push b
0044   0442 07 0F 08      call printf
0045   0445             ;; base64_decode(output, input); 
0046   0445 FA 01 FE      lea d, [bp + -511] ; $input
0047   0448 2D            mov b, d
0048   0449 FD AB         swp b
0049   044B D8            push b
0050   044C FA 01 FD      lea d, [bp + -767] ; $output
0051   044F 2D            mov b, d
0052   0450 FD AB         swp b
0053   0452 D8            push b
0054   0453 07 5A 19      call base64_decode
0055   0456 51 04 00      add sp, 4
0056   0459             ;; printf("Decoded string: %s\n", input); 
0057   0459 FA 01 FE      lea d, [bp + -511] ; $input
0058   045C 2D            mov b, d
0059   045D FD AB         swp b
0060   045F D8            push b
0061   0460 26 04 1E      mov b, __s2 ; "Decoded string: %s\n"
0062   0463 FD AB         swp b
0063   0465 D8            push b
0064   0466 07 0F 08      call printf
0065   0469             ;; return 0; 
0066   0469 26 00 00      mov b, $0
0067   046C F9            leave
0068   046D 05 0B         syscall sys_terminate_proc
0069   046F             
0070   046F             strcpy:
0071   046F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0072   0472             ; $psrc 
0073   0472             ; $pdest 
0074   0472 52 04 00      sub sp, 4
0075   0475             ;; psrc = src; 
0076   0475 FA FF FF      lea d, [bp + -1] ; $psrc
0077   0478 DA            push d
0078   0479 FA 07 00      lea d, [bp + 7] ; $src
0079   047C 2A            mov b, [d]
0080   047D E7            pop d
0081   047E FD 43         mov [d], b
0082   0480             ;; pdest = dest; 
0083   0480 FA FD FF      lea d, [bp + -3] ; $pdest
0084   0483 DA            push d
0085   0484 FA 05 00      lea d, [bp + 5] ; $dest
0086   0487 2A            mov b, [d]
0087   0488 E7            pop d
0088   0489 FD 43         mov [d], b
0089   048B             ;; while(*psrc) *pdest++ = *psrc++; 
0090   048B             _while1_cond:
0091   048B FA FF FF      lea d, [bp + -1] ; $psrc
0092   048E 2A            mov b, [d]
0093   048F 74            mov d, b
0094   0490 32            mov bl, [d]
0095   0491 A7 00         mov bh, 0
0096   0493 C0 00 00      cmp b, 0
0097   0496 C6 BE 04      je _while1_exit
0098   0499             _while1_block:
0099   0499             ;; *pdest++ = *psrc++; 
0100   0499 FA FD FF      lea d, [bp + -3] ; $pdest
0101   049C 2A            mov b, [d]
0102   049D D8            push b
0103   049E FD 77         inc b
0104   04A0 FA FD FF      lea d, [bp + -3] ; $pdest
0105   04A3 FD 43         mov [d], b
0106   04A5 E5            pop b
0107   04A6 D8            push b
0108   04A7 FA FF FF      lea d, [bp + -1] ; $psrc
0109   04AA 2A            mov b, [d]
0110   04AB D8            push b
0111   04AC FD 77         inc b
0112   04AE FA FF FF      lea d, [bp + -1] ; $psrc
0113   04B1 FD 43         mov [d], b
0114   04B3 E5            pop b
0115   04B4 74            mov d, b
0116   04B5 32            mov bl, [d]
0117   04B6 A7 00         mov bh, 0
0118   04B8 E7            pop d
0119   04B9 FD 3E         mov [d], bl
0120   04BB 0A 8B 04      jmp _while1_cond
0121   04BE             _while1_exit:
0122   04BE             ;; *pdest = '\0'; 
0123   04BE FA FD FF      lea d, [bp + -3] ; $pdest
0124   04C1 2A            mov b, [d]
0125   04C2 D8            push b
0126   04C3 26 00 00      mov b, $0
0127   04C6 E7            pop d
0128   04C7 FD 3E         mov [d], bl
0129   04C9 F9            leave
0130   04CA 09            ret
0131   04CB             
0132   04CB             strcmp:
0133   04CB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0134   04CE             ;; while (*s1 && (*s1 == *s2)) { 
0135   04CE             _while2_cond:
0136   04CE FA 05 00      lea d, [bp + 5] ; $s1
0137   04D1 2A            mov b, [d]
0138   04D2 74            mov d, b
0139   04D3 32            mov bl, [d]
0140   04D4 A7 00         mov bh, 0
0141   04D6 D7            push a
0142   04D7 11            mov a, b
0143   04D8 FA 05 00      lea d, [bp + 5] ; $s1
0144   04DB 2A            mov b, [d]
0145   04DC 74            mov d, b
0146   04DD 32            mov bl, [d]
0147   04DE A7 00         mov bh, 0
0148   04E0             ; START RELATIONAL
0149   04E0 D7            push a
0150   04E1 11            mov a, b
0151   04E2 FA 07 00      lea d, [bp + 7] ; $s2
0152   04E5 2A            mov b, [d]
0153   04E6 74            mov d, b
0154   04E7 32            mov bl, [d]
0155   04E8 A7 00         mov bh, 0
0156   04EA B0            cmp a, b
0157   04EB FD 71         seq ; ==
0158   04ED E4            pop a
0159   04EE             ; END RELATIONAL
0160   04EE FD A7         sand a, b ; &&
0161   04F0 E4            pop a
0162   04F1 C0 00 00      cmp b, 0
0163   04F4 C6 14 05      je _while2_exit
0164   04F7             _while2_block:
0165   04F7             ;; s1++; 
0166   04F7 FA 05 00      lea d, [bp + 5] ; $s1
0167   04FA 2A            mov b, [d]
0168   04FB D8            push b
0169   04FC FD 77         inc b
0170   04FE FA 05 00      lea d, [bp + 5] ; $s1
0171   0501 FD 43         mov [d], b
0172   0503 E5            pop b
0173   0504             ;; s2++; 
0174   0504 FA 07 00      lea d, [bp + 7] ; $s2
0175   0507 2A            mov b, [d]
0176   0508 D8            push b
0177   0509 FD 77         inc b
0178   050B FA 07 00      lea d, [bp + 7] ; $s2
0179   050E FD 43         mov [d], b
0180   0510 E5            pop b
0181   0511 0A CE 04      jmp _while2_cond
0182   0514             _while2_exit:
0183   0514             ;; return *s1 - *s2; 
0184   0514 FA 05 00      lea d, [bp + 5] ; $s1
0185   0517 2A            mov b, [d]
0186   0518 74            mov d, b
0187   0519 32            mov bl, [d]
0188   051A A7 00         mov bh, 0
0189   051C             ; START TERMS
0190   051C D7            push a
0191   051D 11            mov a, b
0192   051E FA 07 00      lea d, [bp + 7] ; $s2
0193   0521 2A            mov b, [d]
0194   0522 74            mov d, b
0195   0523 32            mov bl, [d]
0196   0524 A7 00         mov bh, 0
0197   0526 60            sub a, b
0198   0527 27            mov b, a
0199   0528 E4            pop a
0200   0529             ; END TERMS
0201   0529 F9            leave
0202   052A 09            ret
0203   052B             
0204   052B             strcat:
0205   052B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0206   052E             ; $dest_len 
0207   052E             ; $i 
0208   052E 52 04 00      sub sp, 4
0209   0531             ;; dest_len = strlen(dest); 
0210   0531 FA FF FF      lea d, [bp + -1] ; $dest_len
0211   0534 DA            push d
0212   0535 FA 05 00      lea d, [bp + 5] ; $dest
0213   0538 2A            mov b, [d]
0214   0539 FD AB         swp b
0215   053B D8            push b
0216   053C 07 DE 05      call strlen
0217   053F 51 02 00      add sp, 2
0218   0542 E7            pop d
0219   0543 FD 43         mov [d], b
0220   0545             ;; for (i = 0; src[i] != 0; i=i+1) { 
0221   0545             _for3_init:
0222   0545 FA FD FF      lea d, [bp + -3] ; $i
0223   0548 DA            push d
0224   0549 26 00 00      mov b, $0
0225   054C E7            pop d
0226   054D FD 43         mov [d], b
0227   054F             _for3_cond:
0228   054F FA 07 00      lea d, [bp + 7] ; $src
0229   0552 FD 2A         mov d, [d]
0230   0554 D7            push a
0231   0555 DA            push d
0232   0556 FA FD FF      lea d, [bp + -3] ; $i
0233   0559 2A            mov b, [d]
0234   055A E7            pop d
0235   055B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0236   055F E4            pop a
0237   0560 32            mov bl, [d]
0238   0561 A7 00         mov bh, 0
0239   0563             ; START RELATIONAL
0240   0563 D7            push a
0241   0564 11            mov a, b
0242   0565 26 00 00      mov b, $0
0243   0568 B0            cmp a, b
0244   0569 FD 72         sneq ; !=
0245   056B E4            pop a
0246   056C             ; END RELATIONAL
0247   056C C0 00 00      cmp b, 0
0248   056F C6 B8 05      je _for3_exit
0249   0572             _for3_block:
0250   0572             ;; dest[dest_len + i] = src[i]; 
0251   0572 FA 05 00      lea d, [bp + 5] ; $dest
0252   0575 FD 2A         mov d, [d]
0253   0577 D7            push a
0254   0578 DA            push d
0255   0579 FA FF FF      lea d, [bp + -1] ; $dest_len
0256   057C 2A            mov b, [d]
0257   057D             ; START TERMS
0258   057D D7            push a
0259   057E 11            mov a, b
0260   057F FA FD FF      lea d, [bp + -3] ; $i
0261   0582 2A            mov b, [d]
0262   0583 56            add b, a
0263   0584 E4            pop a
0264   0585             ; END TERMS
0265   0585 E7            pop d
0266   0586 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0267   058A E4            pop a
0268   058B DA            push d
0269   058C FA 07 00      lea d, [bp + 7] ; $src
0270   058F FD 2A         mov d, [d]
0271   0591 D7            push a
0272   0592 DA            push d
0273   0593 FA FD FF      lea d, [bp + -3] ; $i
0274   0596 2A            mov b, [d]
0275   0597 E7            pop d
0276   0598 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0277   059C E4            pop a
0278   059D 32            mov bl, [d]
0279   059E A7 00         mov bh, 0
0280   05A0 E7            pop d
0281   05A1 FD 3E         mov [d], bl
0282   05A3             _for3_update:
0283   05A3 FA FD FF      lea d, [bp + -3] ; $i
0284   05A6 DA            push d
0285   05A7 FA FD FF      lea d, [bp + -3] ; $i
0286   05AA 2A            mov b, [d]
0287   05AB             ; START TERMS
0288   05AB D7            push a
0289   05AC 11            mov a, b
0290   05AD 26 01 00      mov b, $1
0291   05B0 56            add b, a
0292   05B1 E4            pop a
0293   05B2             ; END TERMS
0294   05B2 E7            pop d
0295   05B3 FD 43         mov [d], b
0296   05B5 0A 4F 05      jmp _for3_cond
0297   05B8             _for3_exit:
0298   05B8             ;; dest[dest_len + i] = 0; 
0299   05B8 FA 05 00      lea d, [bp + 5] ; $dest
0300   05BB FD 2A         mov d, [d]
0301   05BD D7            push a
0302   05BE DA            push d
0303   05BF FA FF FF      lea d, [bp + -1] ; $dest_len
0304   05C2 2A            mov b, [d]
0305   05C3             ; START TERMS
0306   05C3 D7            push a
0307   05C4 11            mov a, b
0308   05C5 FA FD FF      lea d, [bp + -3] ; $i
0309   05C8 2A            mov b, [d]
0310   05C9 56            add b, a
0311   05CA E4            pop a
0312   05CB             ; END TERMS
0313   05CB E7            pop d
0314   05CC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0315   05D0 E4            pop a
0316   05D1 DA            push d
0317   05D2 26 00 00      mov b, $0
0318   05D5 E7            pop d
0319   05D6 FD 3E         mov [d], bl
0320   05D8             ;; return dest; 
0321   05D8 FA 05 00      lea d, [bp + 5] ; $dest
0322   05DB 2A            mov b, [d]
0323   05DC F9            leave
0324   05DD 09            ret
0325   05DE             
0326   05DE             strlen:
0327   05DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0328   05E1             ; $length 
0329   05E1 52 02 00      sub sp, 2
0330   05E4             ;; length = 0; 
0331   05E4 FA FF FF      lea d, [bp + -1] ; $length
0332   05E7 DA            push d
0333   05E8 26 00 00      mov b, $0
0334   05EB E7            pop d
0335   05EC FD 43         mov [d], b
0336   05EE             ;; while (str[length] != 0) { 
0337   05EE             _while4_cond:
0338   05EE FA 05 00      lea d, [bp + 5] ; $str
0339   05F1 FD 2A         mov d, [d]
0340   05F3 D7            push a
0341   05F4 DA            push d
0342   05F5 FA FF FF      lea d, [bp + -1] ; $length
0343   05F8 2A            mov b, [d]
0344   05F9 E7            pop d
0345   05FA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0346   05FE E4            pop a
0347   05FF 32            mov bl, [d]
0348   0600 A7 00         mov bh, 0
0349   0602             ; START RELATIONAL
0350   0602 D7            push a
0351   0603 11            mov a, b
0352   0604 26 00 00      mov b, $0
0353   0607 B0            cmp a, b
0354   0608 FD 72         sneq ; !=
0355   060A E4            pop a
0356   060B             ; END RELATIONAL
0357   060B C0 00 00      cmp b, 0
0358   060E C6 21 06      je _while4_exit
0359   0611             _while4_block:
0360   0611             ;; length++; 
0361   0611 FA FF FF      lea d, [bp + -1] ; $length
0362   0614 2A            mov b, [d]
0363   0615 D8            push b
0364   0616 FD 77         inc b
0365   0618 FA FF FF      lea d, [bp + -1] ; $length
0366   061B FD 43         mov [d], b
0367   061D E5            pop b
0368   061E 0A EE 05      jmp _while4_cond
0369   0621             _while4_exit:
0370   0621             ;; return length; 
0371   0621 FA FF FF      lea d, [bp + -1] ; $length
0372   0624 2A            mov b, [d]
0373   0625 F9            leave
0374   0626 09            ret
0375   0627             
0376   0627             exit:
0377   0627 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0378   062A             
0379   062A             ; --- BEGIN INLINE ASM BLOCK
0380   062A 05 0B         syscall sys_terminate_proc
0381   062C             ; --- END INLINE ASM BLOCK
0382   062C             
0383   062C F9            leave
0384   062D 09            ret
0385   062E             
0386   062E             atoi:
0387   062E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0388   0631             ; $result 
0389   0631 10 00 00      mov a, $0
0390   0634 45 FF FF      mov [bp + -1], a
0391   0637             ; $sign 
0392   0637 10 01 00      mov a, $1
0393   063A 45 FD FF      mov [bp + -3], a
0394   063D 52 04 00      sub sp, 4
0395   0640             ;; while (*str == ' ') str++; 
0396   0640             _while5_cond:
0397   0640 FA 05 00      lea d, [bp + 5] ; $str
0398   0643 2A            mov b, [d]
0399   0644 74            mov d, b
0400   0645 32            mov bl, [d]
0401   0646 A7 00         mov bh, 0
0402   0648             ; START RELATIONAL
0403   0648 D7            push a
0404   0649 11            mov a, b
0405   064A 26 20 00      mov b, $20
0406   064D B0            cmp a, b
0407   064E FD 71         seq ; ==
0408   0650 E4            pop a
0409   0651             ; END RELATIONAL
0410   0651 C0 00 00      cmp b, 0
0411   0654 C6 67 06      je _while5_exit
0412   0657             _while5_block:
0413   0657             ;; str++; 
0414   0657 FA 05 00      lea d, [bp + 5] ; $str
0415   065A 2A            mov b, [d]
0416   065B D8            push b
0417   065C FD 77         inc b
0418   065E FA 05 00      lea d, [bp + 5] ; $str
0419   0661 FD 43         mov [d], b
0420   0663 E5            pop b
0421   0664 0A 40 06      jmp _while5_cond
0422   0667             _while5_exit:
0423   0667             ;; if (*str == '-' || *str == '+') { 
0424   0667             _if6_cond:
0425   0667 FA 05 00      lea d, [bp + 5] ; $str
0426   066A 2A            mov b, [d]
0427   066B 74            mov d, b
0428   066C 32            mov bl, [d]
0429   066D A7 00         mov bh, 0
0430   066F             ; START RELATIONAL
0431   066F D7            push a
0432   0670 11            mov a, b
0433   0671 26 2D 00      mov b, $2d
0434   0674 B0            cmp a, b
0435   0675 FD 71         seq ; ==
0436   0677 E4            pop a
0437   0678             ; END RELATIONAL
0438   0678 D7            push a
0439   0679 11            mov a, b
0440   067A FA 05 00      lea d, [bp + 5] ; $str
0441   067D 2A            mov b, [d]
0442   067E 74            mov d, b
0443   067F 32            mov bl, [d]
0444   0680 A7 00         mov bh, 0
0445   0682             ; START RELATIONAL
0446   0682 D7            push a
0447   0683 11            mov a, b
0448   0684 26 2B 00      mov b, $2b
0449   0687 B0            cmp a, b
0450   0688 FD 71         seq ; ==
0451   068A E4            pop a
0452   068B             ; END RELATIONAL
0453   068B FD A8         sor a, b ; ||
0454   068D E4            pop a
0455   068E C0 00 00      cmp b, 0
0456   0691 C6 C8 06      je _if6_exit
0457   0694             _if6_true:
0458   0694             ;; if (*str == '-') sign = -1; 
0459   0694             _if7_cond:
0460   0694 FA 05 00      lea d, [bp + 5] ; $str
0461   0697 2A            mov b, [d]
0462   0698 74            mov d, b
0463   0699 32            mov bl, [d]
0464   069A A7 00         mov bh, 0
0465   069C             ; START RELATIONAL
0466   069C D7            push a
0467   069D 11            mov a, b
0468   069E 26 2D 00      mov b, $2d
0469   06A1 B0            cmp a, b
0470   06A2 FD 71         seq ; ==
0471   06A4 E4            pop a
0472   06A5             ; END RELATIONAL
0473   06A5 C0 00 00      cmp b, 0
0474   06A8 C6 B8 06      je _if7_exit
0475   06AB             _if7_true:
0476   06AB             ;; sign = -1; 
0477   06AB FA FD FF      lea d, [bp + -3] ; $sign
0478   06AE DA            push d
0479   06AF 26 FF FF      mov b, $ffff
0480   06B2 E7            pop d
0481   06B3 FD 43         mov [d], b
0482   06B5 0A B8 06      jmp _if7_exit
0483   06B8             _if7_exit:
0484   06B8             ;; str++; 
0485   06B8 FA 05 00      lea d, [bp + 5] ; $str
0486   06BB 2A            mov b, [d]
0487   06BC D8            push b
0488   06BD FD 77         inc b
0489   06BF FA 05 00      lea d, [bp + 5] ; $str
0490   06C2 FD 43         mov [d], b
0491   06C4 E5            pop b
0492   06C5 0A C8 06      jmp _if6_exit
0493   06C8             _if6_exit:
0494   06C8             ;; while (*str >= '0' && *str <= '9') { 
0495   06C8             _while8_cond:
0496   06C8 FA 05 00      lea d, [bp + 5] ; $str
0497   06CB 2A            mov b, [d]
0498   06CC 74            mov d, b
0499   06CD 32            mov bl, [d]
0500   06CE A7 00         mov bh, 0
0501   06D0             ; START RELATIONAL
0502   06D0 D7            push a
0503   06D1 11            mov a, b
0504   06D2 26 30 00      mov b, $30
0505   06D5 B0            cmp a, b
0506   06D6 FD 82         sgeu ; >= (unsigned)
0507   06D8 E4            pop a
0508   06D9             ; END RELATIONAL
0509   06D9 D7            push a
0510   06DA 11            mov a, b
0511   06DB FA 05 00      lea d, [bp + 5] ; $str
0512   06DE 2A            mov b, [d]
0513   06DF 74            mov d, b
0514   06E0 32            mov bl, [d]
0515   06E1 A7 00         mov bh, 0
0516   06E3             ; START RELATIONAL
0517   06E3 D7            push a
0518   06E4 11            mov a, b
0519   06E5 26 39 00      mov b, $39
0520   06E8 B0            cmp a, b
0521   06E9 FD 76         sleu ; <= (unsigned)
0522   06EB E4            pop a
0523   06EC             ; END RELATIONAL
0524   06EC FD A7         sand a, b ; &&
0525   06EE E4            pop a
0526   06EF C0 00 00      cmp b, 0
0527   06F2 C6 2D 07      je _while8_exit
0528   06F5             _while8_block:
0529   06F5             ;; result = result * 10 + (*str - '0'); 
0530   06F5 FA FF FF      lea d, [bp + -1] ; $result
0531   06F8 DA            push d
0532   06F9 FA FF FF      lea d, [bp + -1] ; $result
0533   06FC 2A            mov b, [d]
0534   06FD             ; START FACTORS
0535   06FD D7            push a
0536   06FE 11            mov a, b
0537   06FF 26 0A 00      mov b, $a
0538   0702 AC            mul a, b ; *
0539   0703 11            mov a, b
0540   0704 27            mov b, a
0541   0705 E4            pop a
0542   0706             ; END FACTORS
0543   0706             ; START TERMS
0544   0706 D7            push a
0545   0707 11            mov a, b
0546   0708 FA 05 00      lea d, [bp + 5] ; $str
0547   070B 2A            mov b, [d]
0548   070C 74            mov d, b
0549   070D 32            mov bl, [d]
0550   070E A7 00         mov bh, 0
0551   0710             ; START TERMS
0552   0710 D7            push a
0553   0711 11            mov a, b
0554   0712 26 30 00      mov b, $30
0555   0715 60            sub a, b
0556   0716 27            mov b, a
0557   0717 E4            pop a
0558   0718             ; END TERMS
0559   0718 56            add b, a
0560   0719 E4            pop a
0561   071A             ; END TERMS
0562   071A E7            pop d
0563   071B FD 43         mov [d], b
0564   071D             ;; str++; 
0565   071D FA 05 00      lea d, [bp + 5] ; $str
0566   0720 2A            mov b, [d]
0567   0721 D8            push b
0568   0722 FD 77         inc b
0569   0724 FA 05 00      lea d, [bp + 5] ; $str
0570   0727 FD 43         mov [d], b
0571   0729 E5            pop b
0572   072A 0A C8 06      jmp _while8_cond
0573   072D             _while8_exit:
0574   072D             ;; return sign * result; 
0575   072D FA FD FF      lea d, [bp + -3] ; $sign
0576   0730 2A            mov b, [d]
0577   0731             ; START FACTORS
0578   0731 D7            push a
0579   0732 11            mov a, b
0580   0733 FA FF FF      lea d, [bp + -1] ; $result
0581   0736 2A            mov b, [d]
0582   0737 AC            mul a, b ; *
0583   0738 11            mov a, b
0584   0739 27            mov b, a
0585   073A E4            pop a
0586   073B             ; END FACTORS
0587   073B F9            leave
0588   073C 09            ret
0589   073D             
0590   073D             rand:
0591   073D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0592   0740             ; $sec 
0593   0740 52 02 00      sub sp, 2
0594   0743             
0595   0743             ; --- BEGIN INLINE ASM BLOCK
0596   0743 19 00         mov al, 0
0597   0745 05 01         syscall sys_rtc					
0598   0747 1A            mov al, ah
0599   0748 FA FF FF      lea d, [bp + -1] ; $sec
0600   074B 1E            mov al, [d]
0601   074C 22 00         mov ah, 0
0602   074E             ; --- END INLINE ASM BLOCK
0603   074E             
0604   074E             ;; return sec; 
0605   074E FA FF FF      lea d, [bp + -1] ; $sec
0606   0751 2A            mov b, [d]
0607   0752 F9            leave
0608   0753 09            ret
0609   0754             
0610   0754             srand:
0611   0754 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0612   0757 F9            leave
0613   0758 09            ret
0614   0759             
0615   0759             malloc:
0616   0759 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0617   075C F9            leave
0618   075D 09            ret
0619   075E             
0620   075E             calloc:
0621   075E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0622   0761 F9            leave
0623   0762 09            ret
0624   0763             
0625   0763             realloc:
0626   0763 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0627   0766 F9            leave
0628   0767 09            ret
0629   0768             
0630   0768             alloc:
0631   0768 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0632   076B             ;; heap_top = heap_top + bytes; 
0633   076B 3B 5C 1E      mov d, _heap_top ; $heap_top
0634   076E DA            push d
0635   076F 3B 5C 1E      mov d, _heap_top ; $heap_top
0636   0772 2A            mov b, [d]
0637   0773             ; START TERMS
0638   0773 D7            push a
0639   0774 11            mov a, b
0640   0775 FA 05 00      lea d, [bp + 5] ; $bytes
0641   0778 2A            mov b, [d]
0642   0779 56            add b, a
0643   077A E4            pop a
0644   077B             ; END TERMS
0645   077B E7            pop d
0646   077C FD 43         mov [d], b
0647   077E             ;; return heap_top - bytes; 
0648   077E 3B 5C 1E      mov d, _heap_top ; $heap_top
0649   0781 2A            mov b, [d]
0650   0782             ; START TERMS
0651   0782 D7            push a
0652   0783 11            mov a, b
0653   0784 FA 05 00      lea d, [bp + 5] ; $bytes
0654   0787 2A            mov b, [d]
0655   0788 60            sub a, b
0656   0789 27            mov b, a
0657   078A E4            pop a
0658   078B             ; END TERMS
0659   078B F9            leave
0660   078C 09            ret
0661   078D             
0662   078D             free:
0663   078D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0664   0790             ;; return heap_top = heap_top - bytes; 
0665   0790 3B 5C 1E      mov d, _heap_top ; $heap_top
0666   0793 DA            push d
0667   0794 3B 5C 1E      mov d, _heap_top ; $heap_top
0668   0797 2A            mov b, [d]
0669   0798             ; START TERMS
0670   0798 D7            push a
0671   0799 11            mov a, b
0672   079A FA 05 00      lea d, [bp + 5] ; $bytes
0673   079D 2A            mov b, [d]
0674   079E 60            sub a, b
0675   079F 27            mov b, a
0676   07A0 E4            pop a
0677   07A1             ; END TERMS
0678   07A1 E7            pop d
0679   07A2 FD 43         mov [d], b
0680   07A4 F9            leave
0681   07A5 09            ret
0682   07A6             
0683   07A6             va_start:
0684   07A6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0685   07A9             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
0686   07A9 FA 05 00      lea d, [bp + 5] ; $argp
0687   07AC FD 2A         mov d, [d]
0688   07AE 58 00 00      add d, 0
0689   07B1 DA            push d
0690   07B2 FA 07 00      lea d, [bp + 7] ; $first_fixed_param
0691   07B5 2A            mov b, [d]
0692   07B6             ; START TERMS
0693   07B6 D7            push a
0694   07B7 11            mov a, b
0695   07B8 26 02 00      mov b, 2
0696   07BB 56            add b, a
0697   07BC E4            pop a
0698   07BD             ; END TERMS
0699   07BD E7            pop d
0700   07BE FD 43         mov [d], b
0701   07C0 F9            leave
0702   07C1 09            ret
0703   07C2             
0704   07C2             va_arg:
0705   07C2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0706   07C5             ; $p 
0707   07C5 52 02 00      sub sp, 2
0708   07C8             ;; p = argp->current_arg; 
0709   07C8 FA FF FF      lea d, [bp + -1] ; $p
0710   07CB DA            push d
0711   07CC FA 05 00      lea d, [bp + 5] ; $argp
0712   07CF FD 2A         mov d, [d]
0713   07D1 58 00 00      add d, 0
0714   07D4 2A            mov b, [d]
0715   07D5 E7            pop d
0716   07D6 FD 43         mov [d], b
0717   07D8             ;; argp->current_arg = argp->current_arg + size; 
0718   07D8 FA 05 00      lea d, [bp + 5] ; $argp
0719   07DB FD 2A         mov d, [d]
0720   07DD 58 00 00      add d, 0
0721   07E0 DA            push d
0722   07E1 FA 05 00      lea d, [bp + 5] ; $argp
0723   07E4 FD 2A         mov d, [d]
0724   07E6 58 00 00      add d, 0
0725   07E9 2A            mov b, [d]
0726   07EA             ; START TERMS
0727   07EA D7            push a
0728   07EB 11            mov a, b
0729   07EC FA 07 00      lea d, [bp + 7] ; $size
0730   07EF 2A            mov b, [d]
0731   07F0 56            add b, a
0732   07F1 E4            pop a
0733   07F2             ; END TERMS
0734   07F2 E7            pop d
0735   07F3 FD 43         mov [d], b
0736   07F5             ;; return p; 
0737   07F5 FA FF FF      lea d, [bp + -1] ; $p
0738   07F8 2A            mov b, [d]
0739   07F9 F9            leave
0740   07FA 09            ret
0741   07FB             
0742   07FB             va_end:
0743   07FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0744   07FE             ;; argp->current_arg =   0   ; 
0745   07FE FA 05 00      lea d, [bp + 5] ; $argp
0746   0801 FD 2A         mov d, [d]
0747   0803 58 00 00      add d, 0
0748   0806 DA            push d
0749   0807 26 00 00      mov b, $0
0750   080A E7            pop d
0751   080B FD 43         mov [d], b
0752   080D F9            leave
0753   080E 09            ret
0754   080F             
0755   080F             printf:
0756   080F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0757   0812             ; $p 
0758   0812             ; $fp 
0759   0812             ; $i 
0760   0812 52 06 00      sub sp, 6
0761   0815             ;; fp = format; 
0762   0815 FA FD FF      lea d, [bp + -3] ; $fp
0763   0818 DA            push d
0764   0819 FA 05 00      lea d, [bp + 5] ; $format
0765   081C 2A            mov b, [d]
0766   081D E7            pop d
0767   081E FD 43         mov [d], b
0768   0820             ;; p = &format + 2; 
0769   0820 FA FF FF      lea d, [bp + -1] ; $p
0770   0823 DA            push d
0771   0824 FA 05 00      lea d, [bp + 5] ; $format
0772   0827 2D            mov b, d
0773   0828             ; START TERMS
0774   0828 D7            push a
0775   0829 11            mov a, b
0776   082A 26 02 00      mov b, $2
0777   082D 56            add b, a
0778   082E E4            pop a
0779   082F             ; END TERMS
0780   082F E7            pop d
0781   0830 FD 43         mov [d], b
0782   0832             ;; for(;;){ 
0783   0832             _for9_init:
0784   0832             _for9_cond:
0785   0832             _for9_block:
0786   0832             ;; if(!*fp) break; 
0787   0832             _if10_cond:
0788   0832 FA FD FF      lea d, [bp + -3] ; $fp
0789   0835 2A            mov b, [d]
0790   0836 74            mov d, b
0791   0837 32            mov bl, [d]
0792   0838 A7 00         mov bh, 0
0793   083A C0 00 00      cmp b, 0
0794   083D FD 71         seq ; !
0795   083F C0 00 00      cmp b, 0
0796   0842 C6 4B 08      je _if10_else
0797   0845             _if10_true:
0798   0845             ;; break; 
0799   0845 0A 51 0A      jmp _for9_exit ; for break
0800   0848 0A 4E 0A      jmp _if10_exit
0801   084B             _if10_else:
0802   084B             ;; if(*fp == '%'){ 
0803   084B             _if11_cond:
0804   084B FA FD FF      lea d, [bp + -3] ; $fp
0805   084E 2A            mov b, [d]
0806   084F 74            mov d, b
0807   0850 32            mov bl, [d]
0808   0851 A7 00         mov bh, 0
0809   0853             ; START RELATIONAL
0810   0853 D7            push a
0811   0854 11            mov a, b
0812   0855 26 25 00      mov b, $25
0813   0858 B0            cmp a, b
0814   0859 FD 71         seq ; ==
0815   085B E4            pop a
0816   085C             ; END RELATIONAL
0817   085C C0 00 00      cmp b, 0
0818   085F C6 32 0A      je _if11_else
0819   0862             _if11_true:
0820   0862             ;; fp++; 
0821   0862 FA FD FF      lea d, [bp + -3] ; $fp
0822   0865 2A            mov b, [d]
0823   0866 D8            push b
0824   0867 FD 77         inc b
0825   0869 FA FD FF      lea d, [bp + -3] ; $fp
0826   086C FD 43         mov [d], b
0827   086E E5            pop b
0828   086F             ;; switch(*fp){ 
0829   086F             _switch12_expr:
0830   086F FA FD FF      lea d, [bp + -3] ; $fp
0831   0872 2A            mov b, [d]
0832   0873 74            mov d, b
0833   0874 32            mov bl, [d]
0834   0875 A7 00         mov bh, 0
0835   0877             _switch12_comparisons:
0836   0877 C1 6C         cmp bl, $6c
0837   0879 C6 A5 08      je _switch12_case0
0838   087C C1 4C         cmp bl, $4c
0839   087E C6 A5 08      je _switch12_case1
0840   0881 C1 64         cmp bl, $64
0841   0883 C6 72 09      je _switch12_case2
0842   0886 C1 69         cmp bl, $69
0843   0888 C6 72 09      je _switch12_case3
0844   088B C1 75         cmp bl, $75
0845   088D C6 96 09      je _switch12_case4
0846   0890 C1 78         cmp bl, $78
0847   0892 C6 BA 09      je _switch12_case5
0848   0895 C1 63         cmp bl, $63
0849   0897 C6 D8 09      je _switch12_case6
0850   089A C1 73         cmp bl, $73
0851   089C C6 F7 09      je _switch12_case7
0852   089F 0A 16 0A      jmp _switch12_default
0853   08A2 0A 22 0A      jmp _switch12_exit
0854   08A5             _switch12_case0:
0855   08A5             _switch12_case1:
0856   08A5             ;; fp++; 
0857   08A5 FA FD FF      lea d, [bp + -3] ; $fp
0858   08A8 2A            mov b, [d]
0859   08A9 D8            push b
0860   08AA FD 77         inc b
0861   08AC FA FD FF      lea d, [bp + -3] ; $fp
0862   08AF FD 43         mov [d], b
0863   08B1 E5            pop b
0864   08B2             ;; if(*fp == 'd' || *fp == 'i') 
0865   08B2             _if13_cond:
0866   08B2 FA FD FF      lea d, [bp + -3] ; $fp
0867   08B5 2A            mov b, [d]
0868   08B6 74            mov d, b
0869   08B7 32            mov bl, [d]
0870   08B8 A7 00         mov bh, 0
0871   08BA             ; START RELATIONAL
0872   08BA D7            push a
0873   08BB 11            mov a, b
0874   08BC 26 64 00      mov b, $64
0875   08BF B0            cmp a, b
0876   08C0 FD 71         seq ; ==
0877   08C2 E4            pop a
0878   08C3             ; END RELATIONAL
0879   08C3 D7            push a
0880   08C4 11            mov a, b
0881   08C5 FA FD FF      lea d, [bp + -3] ; $fp
0882   08C8 2A            mov b, [d]
0883   08C9 74            mov d, b
0884   08CA 32            mov bl, [d]
0885   08CB A7 00         mov bh, 0
0886   08CD             ; START RELATIONAL
0887   08CD D7            push a
0888   08CE 11            mov a, b
0889   08CF 26 69 00      mov b, $69
0890   08D2 B0            cmp a, b
0891   08D3 FD 71         seq ; ==
0892   08D5 E4            pop a
0893   08D6             ; END RELATIONAL
0894   08D6 FD A8         sor a, b ; ||
0895   08D8 E4            pop a
0896   08D9 C0 00 00      cmp b, 0
0897   08DC C6 F3 08      je _if13_else
0898   08DF             _if13_true:
0899   08DF             ;; print_signed_long(*(long *)p); 
0900   08DF FD 79         mov g, b
0901   08E1 28            mov b, c
0902   08E2 FD AB         swp b
0903   08E4 D8            push b
0904   08E5 FD 27         mov b, g
0905   08E7 FD AB         swp b
0906   08E9 D8            push b
0907   08EA 07 DF 0C      call print_signed_long
0908   08ED 51 04 00      add sp, 4
0909   08F0 0A 5D 09      jmp _if13_exit
0910   08F3             _if13_else:
0911   08F3             ;; if(*fp == 'u') 
0912   08F3             _if14_cond:
0913   08F3 FA FD FF      lea d, [bp + -3] ; $fp
0914   08F6 2A            mov b, [d]
0915   08F7 74            mov d, b
0916   08F8 32            mov bl, [d]
0917   08F9 A7 00         mov bh, 0
0918   08FB             ; START RELATIONAL
0919   08FB D7            push a
0920   08FC 11            mov a, b
0921   08FD 26 75 00      mov b, $75
0922   0900 B0            cmp a, b
0923   0901 FD 71         seq ; ==
0924   0903 E4            pop a
0925   0904             ; END RELATIONAL
0926   0904 C0 00 00      cmp b, 0
0927   0907 C6 1E 09      je _if14_else
0928   090A             _if14_true:
0929   090A             ;; print_unsigned_long(*(unsigned long *)p); 
0930   090A FD 79         mov g, b
0931   090C 28            mov b, c
0932   090D FD AB         swp b
0933   090F D8            push b
0934   0910 FD 27         mov b, g
0935   0912 FD AB         swp b
0936   0914 D8            push b
0937   0915 07 31 0E      call print_unsigned_long
0938   0918 51 04 00      add sp, 4
0939   091B 0A 5D 09      jmp _if14_exit
0940   091E             _if14_else:
0941   091E             ;; if(*fp == 'x') 
0942   091E             _if15_cond:
0943   091E FA FD FF      lea d, [bp + -3] ; $fp
0944   0921 2A            mov b, [d]
0945   0922 74            mov d, b
0946   0923 32            mov bl, [d]
0947   0924 A7 00         mov bh, 0
0948   0926             ; START RELATIONAL
0949   0926 D7            push a
0950   0927 11            mov a, b
0951   0928 26 78 00      mov b, $78
0952   092B B0            cmp a, b
0953   092C FD 71         seq ; ==
0954   092E E4            pop a
0955   092F             ; END RELATIONAL
0956   092F C0 00 00      cmp b, 0
0957   0932 C6 54 09      je _if15_else
0958   0935             _if15_true:
0959   0935             ;; printx32(*(long int *)p); 
0960   0935 FA FF FF      lea d, [bp + -1] ; $p
0961   0938 2A            mov b, [d]
0962   0939 74            mov d, b
0963   093A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0964   093D FD 39         mov c, b ; And place it into C
0965   093F 2A            mov b, [d] ; Lower Word in B
0966   0940 FD 79         mov g, b
0967   0942 28            mov b, c
0968   0943 FD AB         swp b
0969   0945 D8            push b
0970   0946 FD 27         mov b, g
0971   0948 FD AB         swp b
0972   094A D8            push b
0973   094B 07 68 0A      call printx32
0974   094E 51 04 00      add sp, 4
0975   0951 0A 5D 09      jmp _if15_exit
0976   0954             _if15_else:
0977   0954             ;; err("Unexpected format in printf."); 
0978   0954 26 18 1E      mov b, __s3 ; "Unexpected format in printf."
0979   0957 FD AB         swp b
0980   0959 D8            push b
0981   095A 07 53 0A      call err
0982   095D             _if15_exit:
0983   095D             _if14_exit:
0984   095D             _if13_exit:
0985   095D             ;; p = p + 4; 
0986   095D FA FF FF      lea d, [bp + -1] ; $p
0987   0960 DA            push d
0988   0961 FA FF FF      lea d, [bp + -1] ; $p
0989   0964 2A            mov b, [d]
0990   0965             ; START TERMS
0991   0965 D7            push a
0992   0966 11            mov a, b
0993   0967 26 04 00      mov b, $4
0994   096A 56            add b, a
0995   096B E4            pop a
0996   096C             ; END TERMS
0997   096C E7            pop d
0998   096D FD 43         mov [d], b
0999   096F             ;; break; 
1000   096F 0A 22 0A      jmp _switch12_exit ; case break
1001   0972             _switch12_case2:
1002   0972             _switch12_case3:
1003   0972             ;; print_signed(*(int*)p); 
1004   0972 FA FF FF      lea d, [bp + -1] ; $p
1005   0975 2A            mov b, [d]
1006   0976 74            mov d, b
1007   0977 2A            mov b, [d]
1008   0978 FD AB         swp b
1009   097A D8            push b
1010   097B 07 EF 0B      call print_signed
1011   097E 51 02 00      add sp, 2
1012   0981             ;; p = p + 2; 
1013   0981 FA FF FF      lea d, [bp + -1] ; $p
1014   0984 DA            push d
1015   0985 FA FF FF      lea d, [bp + -1] ; $p
1016   0988 2A            mov b, [d]
1017   0989             ; START TERMS
1018   0989 D7            push a
1019   098A 11            mov a, b
1020   098B 26 02 00      mov b, $2
1021   098E 56            add b, a
1022   098F E4            pop a
1023   0990             ; END TERMS
1024   0990 E7            pop d
1025   0991 FD 43         mov [d], b
1026   0993             ;; break; 
1027   0993 0A 22 0A      jmp _switch12_exit ; case break
1028   0996             _switch12_case4:
1029   0996             ;; print_unsigned(*(unsigned int*)p); 
1030   0996 FA FF FF      lea d, [bp + -1] ; $p
1031   0999 2A            mov b, [d]
1032   099A 74            mov d, b
1033   099B 2A            mov b, [d]
1034   099C FD AB         swp b
1035   099E D8            push b
1036   099F 07 2E 0F      call print_unsigned
1037   09A2 51 02 00      add sp, 2
1038   09A5             ;; p = p + 2; 
1039   09A5 FA FF FF      lea d, [bp + -1] ; $p
1040   09A8 DA            push d
1041   09A9 FA FF FF      lea d, [bp + -1] ; $p
1042   09AC 2A            mov b, [d]
1043   09AD             ; START TERMS
1044   09AD D7            push a
1045   09AE 11            mov a, b
1046   09AF 26 02 00      mov b, $2
1047   09B2 56            add b, a
1048   09B3 E4            pop a
1049   09B4             ; END TERMS
1050   09B4 E7            pop d
1051   09B5 FD 43         mov [d], b
1052   09B7             ;; break; 
1053   09B7 0A 22 0A      jmp _switch12_exit ; case break
1054   09BA             _switch12_case5:
1055   09BA             
1056   09BA             ; --- BEGIN INLINE ASM BLOCK
1057   09BA FA FF FF      lea d, [bp + -1] ; $p
1058   09BD FD 2A         mov d, [d]
1059   09BF 2A            mov b, [d]
1060   09C0 07 81 13      call print_u16x
1061   09C3             ; --- END INLINE ASM BLOCK
1062   09C3             
1063   09C3             ;; p = p + 2; 
1064   09C3 FA FF FF      lea d, [bp + -1] ; $p
1065   09C6 DA            push d
1066   09C7 FA FF FF      lea d, [bp + -1] ; $p
1067   09CA 2A            mov b, [d]
1068   09CB             ; START TERMS
1069   09CB D7            push a
1070   09CC 11            mov a, b
1071   09CD 26 02 00      mov b, $2
1072   09D0 56            add b, a
1073   09D1 E4            pop a
1074   09D2             ; END TERMS
1075   09D2 E7            pop d
1076   09D3 FD 43         mov [d], b
1077   09D5             ;; break; 
1078   09D5 0A 22 0A      jmp _switch12_exit ; case break
1079   09D8             _switch12_case6:
1080   09D8             
1081   09D8             ; --- BEGIN INLINE ASM BLOCK
1082   09D8 FA FF FF      lea d, [bp + -1] ; $p
1083   09DB FD 2A         mov d, [d]
1084   09DD 1E            mov al, [d]
1085   09DE 23            mov ah, al
1086   09DF 07 DF 11      call _putchar
1087   09E2             ; --- END INLINE ASM BLOCK
1088   09E2             
1089   09E2             ;; p = p + 2; 
1090   09E2 FA FF FF      lea d, [bp + -1] ; $p
1091   09E5 DA            push d
1092   09E6 FA FF FF      lea d, [bp + -1] ; $p
1093   09E9 2A            mov b, [d]
1094   09EA             ; START TERMS
1095   09EA D7            push a
1096   09EB 11            mov a, b
1097   09EC 26 02 00      mov b, $2
1098   09EF 56            add b, a
1099   09F0 E4            pop a
1100   09F1             ; END TERMS
1101   09F1 E7            pop d
1102   09F2 FD 43         mov [d], b
1103   09F4             ;; break; 
1104   09F4 0A 22 0A      jmp _switch12_exit ; case break
1105   09F7             _switch12_case7:
1106   09F7             
1107   09F7             ; --- BEGIN INLINE ASM BLOCK
1108   09F7 FA FF FF      lea d, [bp + -1] ; $p
1109   09FA FD 2A         mov d, [d]
1110   09FC FD 2A         mov d, [d]
1111   09FE 07 29 13      call _puts
1112   0A01             ; --- END INLINE ASM BLOCK
1113   0A01             
1114   0A01             ;; p = p + 2; 
1115   0A01 FA FF FF      lea d, [bp + -1] ; $p
1116   0A04 DA            push d
1117   0A05 FA FF FF      lea d, [bp + -1] ; $p
1118   0A08 2A            mov b, [d]
1119   0A09             ; START TERMS
1120   0A09 D7            push a
1121   0A0A 11            mov a, b
1122   0A0B 26 02 00      mov b, $2
1123   0A0E 56            add b, a
1124   0A0F E4            pop a
1125   0A10             ; END TERMS
1126   0A10 E7            pop d
1127   0A11 FD 43         mov [d], b
1128   0A13             ;; break; 
1129   0A13 0A 22 0A      jmp _switch12_exit ; case break
1130   0A16             _switch12_default:
1131   0A16             ;; print("Error: Unknown argument type.\n"); 
1132   0A16 26 35 1E      mov b, __s4 ; "Error: Unknown argument type.\n"
1133   0A19 FD AB         swp b
1134   0A1B D8            push b
1135   0A1C 07 46 10      call print
1136   0A1F 51 02 00      add sp, 2
1137   0A22             _switch12_exit:
1138   0A22             ;; fp++; 
1139   0A22 FA FD FF      lea d, [bp + -3] ; $fp
1140   0A25 2A            mov b, [d]
1141   0A26 D8            push b
1142   0A27 FD 77         inc b
1143   0A29 FA FD FF      lea d, [bp + -3] ; $fp
1144   0A2C FD 43         mov [d], b
1145   0A2E E5            pop b
1146   0A2F 0A 4E 0A      jmp _if11_exit
1147   0A32             _if11_else:
1148   0A32             ;; putchar(*fp); 
1149   0A32 FA FD FF      lea d, [bp + -3] ; $fp
1150   0A35 2A            mov b, [d]
1151   0A36 74            mov d, b
1152   0A37 32            mov bl, [d]
1153   0A38 A7 00         mov bh, 0
1154   0A3A DD            push bl
1155   0A3B 07 FE 0F      call putchar
1156   0A3E 51 01 00      add sp, 1
1157   0A41             ;; fp++; 
1158   0A41 FA FD FF      lea d, [bp + -3] ; $fp
1159   0A44 2A            mov b, [d]
1160   0A45 D8            push b
1161   0A46 FD 77         inc b
1162   0A48 FA FD FF      lea d, [bp + -3] ; $fp
1163   0A4B FD 43         mov [d], b
1164   0A4D E5            pop b
1165   0A4E             _if11_exit:
1166   0A4E             _if10_exit:
1167   0A4E             _for9_update:
1168   0A4E 0A 32 08      jmp _for9_cond
1169   0A51             _for9_exit:
1170   0A51 F9            leave
1171   0A52 09            ret
1172   0A53             
1173   0A53             err:
1174   0A53 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1175   0A56             ;; print(e); 
1176   0A56 FA 05 00      lea d, [bp + 5] ; $e
1177   0A59 2A            mov b, [d]
1178   0A5A FD AB         swp b
1179   0A5C D8            push b
1180   0A5D 07 46 10      call print
1181   0A60 51 02 00      add sp, 2
1182   0A63             ;; exit(); 
1183   0A63 07 27 06      call exit
1184   0A66 F9            leave
1185   0A67 09            ret
1186   0A68             
1187   0A68             printx32:
1188   0A68 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1189   0A6B             
1190   0A6B             ; --- BEGIN INLINE ASM BLOCK
1191   0A6B FA 05 00      lea d, [bp + 5] ; $hex
1192   0A6E 2B 02 00      mov b, [d+2]
1193   0A71 07 81 13      call print_u16x
1194   0A74 2A            mov b, [d]
1195   0A75 07 81 13      call print_u16x
1196   0A78             ; --- END INLINE ASM BLOCK
1197   0A78             
1198   0A78 F9            leave
1199   0A79 09            ret
1200   0A7A             
1201   0A7A             printx16:
1202   0A7A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1203   0A7D             
1204   0A7D             ; --- BEGIN INLINE ASM BLOCK
1205   0A7D FA 05 00      lea d, [bp + 5] ; $hex
1206   0A80 2A            mov b, [d]
1207   0A81 07 81 13      call print_u16x
1208   0A84             ; --- END INLINE ASM BLOCK
1209   0A84             
1210   0A84 F9            leave
1211   0A85 09            ret
1212   0A86             
1213   0A86             printx8:
1214   0A86 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1215   0A89             
1216   0A89             ; --- BEGIN INLINE ASM BLOCK
1217   0A89 FA 05 00      lea d, [bp + 5] ; $hex
1218   0A8C 32            mov bl, [d]
1219   0A8D 07 C5 13      call print_u8x
1220   0A90             ; --- END INLINE ASM BLOCK
1221   0A90             
1222   0A90 F9            leave
1223   0A91 09            ret
1224   0A92             
1225   0A92             hex_to_int:
1226   0A92 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1227   0A95             ; $value 
1228   0A95 10 00 00      mov a, $0
1229   0A98 45 FF FF      mov [bp + -1], a
1230   0A9B             ; $i 
1231   0A9B             ; $hex_char 
1232   0A9B             ; $len 
1233   0A9B 52 07 00      sub sp, 7
1234   0A9E             ;; len = strlen(hex_string); 
1235   0A9E FA FA FF      lea d, [bp + -6] ; $len
1236   0AA1 DA            push d
1237   0AA2 FA 05 00      lea d, [bp + 5] ; $hex_string
1238   0AA5 2A            mov b, [d]
1239   0AA6 FD AB         swp b
1240   0AA8 D8            push b
1241   0AA9 07 DE 05      call strlen
1242   0AAC 51 02 00      add sp, 2
1243   0AAF E7            pop d
1244   0AB0 FD 43         mov [d], b
1245   0AB2             ;; for (i = 0; i < len; i++) { 
1246   0AB2             _for16_init:
1247   0AB2 FA FD FF      lea d, [bp + -3] ; $i
1248   0AB5 DA            push d
1249   0AB6 26 00 00      mov b, $0
1250   0AB9 E7            pop d
1251   0ABA FD 43         mov [d], b
1252   0ABC             _for16_cond:
1253   0ABC FA FD FF      lea d, [bp + -3] ; $i
1254   0ABF 2A            mov b, [d]
1255   0AC0             ; START RELATIONAL
1256   0AC0 D7            push a
1257   0AC1 11            mov a, b
1258   0AC2 FA FA FF      lea d, [bp + -6] ; $len
1259   0AC5 2A            mov b, [d]
1260   0AC6 B0            cmp a, b
1261   0AC7 FD 73         slt ; <= (signed)
1262   0AC9 E4            pop a
1263   0ACA             ; END RELATIONAL
1264   0ACA C0 00 00      cmp b, 0
1265   0ACD C6 CF 0B      je _for16_exit
1266   0AD0             _for16_block:
1267   0AD0             ;; hex_char = hex_string[i]; 
1268   0AD0 FA FC FF      lea d, [bp + -4] ; $hex_char
1269   0AD3 DA            push d
1270   0AD4 FA 05 00      lea d, [bp + 5] ; $hex_string
1271   0AD7 FD 2A         mov d, [d]
1272   0AD9 D7            push a
1273   0ADA DA            push d
1274   0ADB FA FD FF      lea d, [bp + -3] ; $i
1275   0ADE 2A            mov b, [d]
1276   0ADF E7            pop d
1277   0AE0 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1278   0AE4 E4            pop a
1279   0AE5 32            mov bl, [d]
1280   0AE6 A7 00         mov bh, 0
1281   0AE8 E7            pop d
1282   0AE9 FD 3E         mov [d], bl
1283   0AEB             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1284   0AEB             _if17_cond:
1285   0AEB FA FC FF      lea d, [bp + -4] ; $hex_char
1286   0AEE 32            mov bl, [d]
1287   0AEF A7 00         mov bh, 0
1288   0AF1             ; START RELATIONAL
1289   0AF1 D7            push a
1290   0AF2 11            mov a, b
1291   0AF3 26 61 00      mov b, $61
1292   0AF6 B0            cmp a, b
1293   0AF7 FD 80         sge ; >=
1294   0AF9 E4            pop a
1295   0AFA             ; END RELATIONAL
1296   0AFA D7            push a
1297   0AFB 11            mov a, b
1298   0AFC FA FC FF      lea d, [bp + -4] ; $hex_char
1299   0AFF 32            mov bl, [d]
1300   0B00 A7 00         mov bh, 0
1301   0B02             ; START RELATIONAL
1302   0B02 D7            push a
1303   0B03 11            mov a, b
1304   0B04 26 66 00      mov b, $66
1305   0B07 B0            cmp a, b
1306   0B08 FD 74         sle ; <=
1307   0B0A E4            pop a
1308   0B0B             ; END RELATIONAL
1309   0B0B FD A7         sand a, b ; &&
1310   0B0D E4            pop a
1311   0B0E C0 00 00      cmp b, 0
1312   0B11 C6 42 0B      je _if17_else
1313   0B14             _if17_true:
1314   0B14             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1315   0B14 FA FF FF      lea d, [bp + -1] ; $value
1316   0B17 DA            push d
1317   0B18 FA FF FF      lea d, [bp + -1] ; $value
1318   0B1B 2A            mov b, [d]
1319   0B1C             ; START FACTORS
1320   0B1C D7            push a
1321   0B1D 11            mov a, b
1322   0B1E 26 10 00      mov b, $10
1323   0B21 AC            mul a, b ; *
1324   0B22 11            mov a, b
1325   0B23 27            mov b, a
1326   0B24 E4            pop a
1327   0B25             ; END FACTORS
1328   0B25             ; START TERMS
1329   0B25 D7            push a
1330   0B26 11            mov a, b
1331   0B27 FA FC FF      lea d, [bp + -4] ; $hex_char
1332   0B2A 32            mov bl, [d]
1333   0B2B A7 00         mov bh, 0
1334   0B2D             ; START TERMS
1335   0B2D D7            push a
1336   0B2E 11            mov a, b
1337   0B2F 26 61 00      mov b, $61
1338   0B32 60            sub a, b
1339   0B33 27            mov b, a
1340   0B34 11            mov a, b
1341   0B35 26 0A 00      mov b, $a
1342   0B38 56            add b, a
1343   0B39 E4            pop a
1344   0B3A             ; END TERMS
1345   0B3A 56            add b, a
1346   0B3B E4            pop a
1347   0B3C             ; END TERMS
1348   0B3C E7            pop d
1349   0B3D FD 43         mov [d], b
1350   0B3F 0A BF 0B      jmp _if17_exit
1351   0B42             _if17_else:
1352   0B42             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1353   0B42             _if18_cond:
1354   0B42 FA FC FF      lea d, [bp + -4] ; $hex_char
1355   0B45 32            mov bl, [d]
1356   0B46 A7 00         mov bh, 0
1357   0B48             ; START RELATIONAL
1358   0B48 D7            push a
1359   0B49 11            mov a, b
1360   0B4A 26 41 00      mov b, $41
1361   0B4D B0            cmp a, b
1362   0B4E FD 80         sge ; >=
1363   0B50 E4            pop a
1364   0B51             ; END RELATIONAL
1365   0B51 D7            push a
1366   0B52 11            mov a, b
1367   0B53 FA FC FF      lea d, [bp + -4] ; $hex_char
1368   0B56 32            mov bl, [d]
1369   0B57 A7 00         mov bh, 0
1370   0B59             ; START RELATIONAL
1371   0B59 D7            push a
1372   0B5A 11            mov a, b
1373   0B5B 26 46 00      mov b, $46
1374   0B5E B0            cmp a, b
1375   0B5F FD 74         sle ; <=
1376   0B61 E4            pop a
1377   0B62             ; END RELATIONAL
1378   0B62 FD A7         sand a, b ; &&
1379   0B64 E4            pop a
1380   0B65 C0 00 00      cmp b, 0
1381   0B68 C6 99 0B      je _if18_else
1382   0B6B             _if18_true:
1383   0B6B             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1384   0B6B FA FF FF      lea d, [bp + -1] ; $value
1385   0B6E DA            push d
1386   0B6F FA FF FF      lea d, [bp + -1] ; $value
1387   0B72 2A            mov b, [d]
1388   0B73             ; START FACTORS
1389   0B73 D7            push a
1390   0B74 11            mov a, b
1391   0B75 26 10 00      mov b, $10
1392   0B78 AC            mul a, b ; *
1393   0B79 11            mov a, b
1394   0B7A 27            mov b, a
1395   0B7B E4            pop a
1396   0B7C             ; END FACTORS
1397   0B7C             ; START TERMS
1398   0B7C D7            push a
1399   0B7D 11            mov a, b
1400   0B7E FA FC FF      lea d, [bp + -4] ; $hex_char
1401   0B81 32            mov bl, [d]
1402   0B82 A7 00         mov bh, 0
1403   0B84             ; START TERMS
1404   0B84 D7            push a
1405   0B85 11            mov a, b
1406   0B86 26 41 00      mov b, $41
1407   0B89 60            sub a, b
1408   0B8A 27            mov b, a
1409   0B8B 11            mov a, b
1410   0B8C 26 0A 00      mov b, $a
1411   0B8F 56            add b, a
1412   0B90 E4            pop a
1413   0B91             ; END TERMS
1414   0B91 56            add b, a
1415   0B92 E4            pop a
1416   0B93             ; END TERMS
1417   0B93 E7            pop d
1418   0B94 FD 43         mov [d], b
1419   0B96 0A BF 0B      jmp _if18_exit
1420   0B99             _if18_else:
1421   0B99             ;; value = (value * 16) + (hex_char - '0'); 
1422   0B99 FA FF FF      lea d, [bp + -1] ; $value
1423   0B9C DA            push d
1424   0B9D FA FF FF      lea d, [bp + -1] ; $value
1425   0BA0 2A            mov b, [d]
1426   0BA1             ; START FACTORS
1427   0BA1 D7            push a
1428   0BA2 11            mov a, b
1429   0BA3 26 10 00      mov b, $10
1430   0BA6 AC            mul a, b ; *
1431   0BA7 11            mov a, b
1432   0BA8 27            mov b, a
1433   0BA9 E4            pop a
1434   0BAA             ; END FACTORS
1435   0BAA             ; START TERMS
1436   0BAA D7            push a
1437   0BAB 11            mov a, b
1438   0BAC FA FC FF      lea d, [bp + -4] ; $hex_char
1439   0BAF 32            mov bl, [d]
1440   0BB0 A7 00         mov bh, 0
1441   0BB2             ; START TERMS
1442   0BB2 D7            push a
1443   0BB3 11            mov a, b
1444   0BB4 26 30 00      mov b, $30
1445   0BB7 60            sub a, b
1446   0BB8 27            mov b, a
1447   0BB9 E4            pop a
1448   0BBA             ; END TERMS
1449   0BBA 56            add b, a
1450   0BBB E4            pop a
1451   0BBC             ; END TERMS
1452   0BBC E7            pop d
1453   0BBD FD 43         mov [d], b
1454   0BBF             _if18_exit:
1455   0BBF             _if17_exit:
1456   0BBF             _for16_update:
1457   0BBF FA FD FF      lea d, [bp + -3] ; $i
1458   0BC2 2A            mov b, [d]
1459   0BC3 D8            push b
1460   0BC4 FD 77         inc b
1461   0BC6 FA FD FF      lea d, [bp + -3] ; $i
1462   0BC9 FD 43         mov [d], b
1463   0BCB E5            pop b
1464   0BCC 0A BC 0A      jmp _for16_cond
1465   0BCF             _for16_exit:
1466   0BCF             ;; return value; 
1467   0BCF FA FF FF      lea d, [bp + -1] ; $value
1468   0BD2 2A            mov b, [d]
1469   0BD3 F9            leave
1470   0BD4 09            ret
1471   0BD5             
1472   0BD5             gets:
1473   0BD5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1474   0BD8             
1475   0BD8             ; --- BEGIN INLINE ASM BLOCK
1476   0BD8 FA 05 00      lea d, [bp + 5] ; $s
1477   0BDB 15            mov a, [d]
1478   0BDC 3C            mov d, a
1479   0BDD 07 E6 11      call _gets
1480   0BE0             ; --- END INLINE ASM BLOCK
1481   0BE0             
1482   0BE0             ;; return strlen(s); 
1483   0BE0 FA 05 00      lea d, [bp + 5] ; $s
1484   0BE3 2A            mov b, [d]
1485   0BE4 FD AB         swp b
1486   0BE6 D8            push b
1487   0BE7 07 DE 05      call strlen
1488   0BEA 51 02 00      add sp, 2
1489   0BED F9            leave
1490   0BEE 09            ret
1491   0BEF             
1492   0BEF             print_signed:
1493   0BEF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1494   0BF2             ; $digits 
1495   0BF2             ; $i 
1496   0BF2 10 00 00      mov a, $0
1497   0BF5 45 FA FF      mov [bp + -6], a
1498   0BF8 52 07 00      sub sp, 7
1499   0BFB             ;; if (num < 0) { 
1500   0BFB             _if19_cond:
1501   0BFB FA 05 00      lea d, [bp + 5] ; $num
1502   0BFE 2A            mov b, [d]
1503   0BFF             ; START RELATIONAL
1504   0BFF D7            push a
1505   0C00 11            mov a, b
1506   0C01 26 00 00      mov b, $0
1507   0C04 B0            cmp a, b
1508   0C05 FD 73         slt ; <= (signed)
1509   0C07 E4            pop a
1510   0C08             ; END RELATIONAL
1511   0C08 C0 00 00      cmp b, 0
1512   0C0B C6 28 0C      je _if19_else
1513   0C0E             _if19_true:
1514   0C0E             ;; putchar('-'); 
1515   0C0E 26 2D 00      mov b, $2d
1516   0C11 DD            push bl
1517   0C12 07 FE 0F      call putchar
1518   0C15 51 01 00      add sp, 1
1519   0C18             ;; num = -num; 
1520   0C18 FA 05 00      lea d, [bp + 5] ; $num
1521   0C1B DA            push d
1522   0C1C FA 05 00      lea d, [bp + 5] ; $num
1523   0C1F 2A            mov b, [d]
1524   0C20 FD 97         neg b
1525   0C22 E7            pop d
1526   0C23 FD 43         mov [d], b
1527   0C25 0A 4A 0C      jmp _if19_exit
1528   0C28             _if19_else:
1529   0C28             ;; if (num == 0) { 
1530   0C28             _if20_cond:
1531   0C28 FA 05 00      lea d, [bp + 5] ; $num
1532   0C2B 2A            mov b, [d]
1533   0C2C             ; START RELATIONAL
1534   0C2C D7            push a
1535   0C2D 11            mov a, b
1536   0C2E 26 00 00      mov b, $0
1537   0C31 B0            cmp a, b
1538   0C32 FD 71         seq ; ==
1539   0C34 E4            pop a
1540   0C35             ; END RELATIONAL
1541   0C35 C0 00 00      cmp b, 0
1542   0C38 C6 4A 0C      je _if20_exit
1543   0C3B             _if20_true:
1544   0C3B             ;; putchar('0'); 
1545   0C3B 26 30 00      mov b, $30
1546   0C3E DD            push bl
1547   0C3F 07 FE 0F      call putchar
1548   0C42 51 01 00      add sp, 1
1549   0C45             ;; return; 
1550   0C45 F9            leave
1551   0C46 09            ret
1552   0C47 0A 4A 0C      jmp _if20_exit
1553   0C4A             _if20_exit:
1554   0C4A             _if19_exit:
1555   0C4A             ;; while (num > 0) { 
1556   0C4A             _while21_cond:
1557   0C4A FA 05 00      lea d, [bp + 5] ; $num
1558   0C4D 2A            mov b, [d]
1559   0C4E             ; START RELATIONAL
1560   0C4E D7            push a
1561   0C4F 11            mov a, b
1562   0C50 26 00 00      mov b, $0
1563   0C53 B0            cmp a, b
1564   0C54 FD 7F         sgt ; >
1565   0C56 E4            pop a
1566   0C57             ; END RELATIONAL
1567   0C57 C0 00 00      cmp b, 0
1568   0C5A C6 A4 0C      je _while21_exit
1569   0C5D             _while21_block:
1570   0C5D             ;; digits[i] = '0' + (num % 10); 
1571   0C5D FA FC FF      lea d, [bp + -4] ; $digits
1572   0C60 D7            push a
1573   0C61 DA            push d
1574   0C62 FA FA FF      lea d, [bp + -6] ; $i
1575   0C65 2A            mov b, [d]
1576   0C66 E7            pop d
1577   0C67 5A            add d, b
1578   0C68 E4            pop a
1579   0C69 DA            push d
1580   0C6A 26 30 00      mov b, $30
1581   0C6D             ; START TERMS
1582   0C6D D7            push a
1583   0C6E 11            mov a, b
1584   0C6F FA 05 00      lea d, [bp + 5] ; $num
1585   0C72 2A            mov b, [d]
1586   0C73             ; START FACTORS
1587   0C73 D7            push a
1588   0C74 11            mov a, b
1589   0C75 26 0A 00      mov b, $a
1590   0C78 AE            div a, b ; 
1591   0C79 11            mov a, b
1592   0C7A 27            mov b, a
1593   0C7B E4            pop a
1594   0C7C             ; END FACTORS
1595   0C7C 56            add b, a
1596   0C7D E4            pop a
1597   0C7E             ; END TERMS
1598   0C7E E7            pop d
1599   0C7F FD 3E         mov [d], bl
1600   0C81             ;; num = num / 10; 
1601   0C81 FA 05 00      lea d, [bp + 5] ; $num
1602   0C84 DA            push d
1603   0C85 FA 05 00      lea d, [bp + 5] ; $num
1604   0C88 2A            mov b, [d]
1605   0C89             ; START FACTORS
1606   0C89 D7            push a
1607   0C8A 11            mov a, b
1608   0C8B 26 0A 00      mov b, $a
1609   0C8E AE            div a, b
1610   0C8F 27            mov b, a
1611   0C90 E4            pop a
1612   0C91             ; END FACTORS
1613   0C91 E7            pop d
1614   0C92 FD 43         mov [d], b
1615   0C94             ;; i++; 
1616   0C94 FA FA FF      lea d, [bp + -6] ; $i
1617   0C97 2A            mov b, [d]
1618   0C98 D8            push b
1619   0C99 FD 77         inc b
1620   0C9B FA FA FF      lea d, [bp + -6] ; $i
1621   0C9E FD 43         mov [d], b
1622   0CA0 E5            pop b
1623   0CA1 0A 4A 0C      jmp _while21_cond
1624   0CA4             _while21_exit:
1625   0CA4             ;; while (i > 0) { 
1626   0CA4             _while22_cond:
1627   0CA4 FA FA FF      lea d, [bp + -6] ; $i
1628   0CA7 2A            mov b, [d]
1629   0CA8             ; START RELATIONAL
1630   0CA8 D7            push a
1631   0CA9 11            mov a, b
1632   0CAA 26 00 00      mov b, $0
1633   0CAD B0            cmp a, b
1634   0CAE FD 7F         sgt ; >
1635   0CB0 E4            pop a
1636   0CB1             ; END RELATIONAL
1637   0CB1 C0 00 00      cmp b, 0
1638   0CB4 C6 DD 0C      je _while22_exit
1639   0CB7             _while22_block:
1640   0CB7             ;; i--; 
1641   0CB7 FA FA FF      lea d, [bp + -6] ; $i
1642   0CBA 2A            mov b, [d]
1643   0CBB D8            push b
1644   0CBC FD 7D         dec b
1645   0CBE FA FA FF      lea d, [bp + -6] ; $i
1646   0CC1 FD 43         mov [d], b
1647   0CC3 E5            pop b
1648   0CC4             ;; putchar(digits[i]); 
1649   0CC4 FA FC FF      lea d, [bp + -4] ; $digits
1650   0CC7 D7            push a
1651   0CC8 DA            push d
1652   0CC9 FA FA FF      lea d, [bp + -6] ; $i
1653   0CCC 2A            mov b, [d]
1654   0CCD E7            pop d
1655   0CCE 5A            add d, b
1656   0CCF E4            pop a
1657   0CD0 32            mov bl, [d]
1658   0CD1 A7 00         mov bh, 0
1659   0CD3 DD            push bl
1660   0CD4 07 FE 0F      call putchar
1661   0CD7 51 01 00      add sp, 1
1662   0CDA 0A A4 0C      jmp _while22_cond
1663   0CDD             _while22_exit:
1664   0CDD F9            leave
1665   0CDE 09            ret
1666   0CDF             
1667   0CDF             print_signed_long:
1668   0CDF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1669   0CE2             ; $digits 
1670   0CE2             ; $i 
1671   0CE2 10 00 00      mov a, $0
1672   0CE5 45 F5 FF      mov [bp + -11], a
1673   0CE8 52 0C 00      sub sp, 12
1674   0CEB             ;; if (num < 0) { 
1675   0CEB             _if23_cond:
1676   0CEB FA 05 00      lea d, [bp + 5] ; $num
1677   0CEE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1678   0CF1 FD 39         mov c, b ; And place it into C
1679   0CF3 2A            mov b, [d] ; Lower Word in B
1680   0CF4             ; START RELATIONAL
1681   0CF4 D7            push a
1682   0CF5 FD D8         push g
1683   0CF7 11            mov a, b
1684   0CF8 FD 7A         mov g, c
1685   0CFA 26 00 00      mov b, $0
1686   0CFD 4D            mov si, a
1687   0CFE 11            mov a, b
1688   0CFF 4F            mov di, a
1689   0D00 FD 12         mov a, g
1690   0D02 28            mov b, c
1691   0D03 B0            cmp a, b
1692   0D04 FD 75         slu ; <
1693   0D06 D8            push b
1694   0D07 28            mov b, c
1695   0D08 FD 71         seq ; ==
1696   0D0A D8            push b
1697   0D0B 50            mov a, di
1698   0D0C 27            mov b, a
1699   0D0D 4E            mov a, si
1700   0D0E B0            cmp a, b
1701   0D0F FD 75         slu ; <
1702   0D11 E4            pop a
1703   0D12 FD 92         and b, a
1704   0D14 E4            pop a
1705   0D15 FD 70         or b, a
1706   0D17               
1707   0D17 FD F1         pop g
1708   0D19 E4            pop a
1709   0D1A             ; END RELATIONAL
1710   0D1A C0 00 00      cmp b, 0
1711   0D1D C6 44 0D      je _if23_else
1712   0D20             _if23_true:
1713   0D20             ;; putchar('-'); 
1714   0D20 26 2D 00      mov b, $2d
1715   0D23 DD            push bl
1716   0D24 07 FE 0F      call putchar
1717   0D27 51 01 00      add sp, 1
1718   0D2A             ;; num = -num; 
1719   0D2A FA 05 00      lea d, [bp + 5] ; $num
1720   0D2D DA            push d
1721   0D2E FA 05 00      lea d, [bp + 5] ; $num
1722   0D31 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1723   0D34 FD 39         mov c, b ; And place it into C
1724   0D36 2A            mov b, [d] ; Lower Word in B
1725   0D37 FD 97         neg b
1726   0D39 E7            pop d
1727   0D3A FD 43         mov [d], b
1728   0D3C 28            mov b, c
1729   0D3D FD 44 02 00   mov [d + 2], b
1730   0D41 0A 7B 0D      jmp _if23_exit
1731   0D44             _if23_else:
1732   0D44             ;; if (num == 0) { 
1733   0D44             _if24_cond:
1734   0D44 FA 05 00      lea d, [bp + 5] ; $num
1735   0D47 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1736   0D4A FD 39         mov c, b ; And place it into C
1737   0D4C 2A            mov b, [d] ; Lower Word in B
1738   0D4D             ; START RELATIONAL
1739   0D4D D7            push a
1740   0D4E FD D8         push g
1741   0D50 11            mov a, b
1742   0D51 FD 7A         mov g, c
1743   0D53 26 00 00      mov b, $0
1744   0D56 B0            cmp a, b
1745   0D57 FD 71         seq ; ==
1746   0D59 D8            push b
1747   0D5A 12            mov a, c
1748   0D5B FD 27         mov b, g
1749   0D5D B0            cmp a, b
1750   0D5E FD 71         seq ; ==
1751   0D60 E4            pop a
1752   0D61 FD A7         sand a, b
1753   0D63 FD F1         pop g
1754   0D65 E4            pop a
1755   0D66             ; END RELATIONAL
1756   0D66 C0 00 00      cmp b, 0
1757   0D69 C6 7B 0D      je _if24_exit
1758   0D6C             _if24_true:
1759   0D6C             ;; putchar('0'); 
1760   0D6C 26 30 00      mov b, $30
1761   0D6F DD            push bl
1762   0D70 07 FE 0F      call putchar
1763   0D73 51 01 00      add sp, 1
1764   0D76             ;; return; 
1765   0D76 F9            leave
1766   0D77 09            ret
1767   0D78 0A 7B 0D      jmp _if24_exit
1768   0D7B             _if24_exit:
1769   0D7B             _if23_exit:
1770   0D7B             ;; while (num > 0) { 
1771   0D7B             _while25_cond:
1772   0D7B FA 05 00      lea d, [bp + 5] ; $num
1773   0D7E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1774   0D81 FD 39         mov c, b ; And place it into C
1775   0D83 2A            mov b, [d] ; Lower Word in B
1776   0D84             ; START RELATIONAL
1777   0D84 D7            push a
1778   0D85 FD D8         push g
1779   0D87 11            mov a, b
1780   0D88 FD 7A         mov g, c
1781   0D8A 26 00 00      mov b, $0
1782   0D8D B0            cmp a, b
1783   0D8E FD 7F         sgt ; >
1784   0D90 FD F1         pop g
1785   0D92 E4            pop a
1786   0D93             ; END RELATIONAL
1787   0D93 C0 00 00      cmp b, 0
1788   0D96 C6 F6 0D      je _while25_exit
1789   0D99             _while25_block:
1790   0D99             ;; digits[i] = '0' + (num % 10); 
1791   0D99 FA F7 FF      lea d, [bp + -9] ; $digits
1792   0D9C D7            push a
1793   0D9D DA            push d
1794   0D9E FA F5 FF      lea d, [bp + -11] ; $i
1795   0DA1 2A            mov b, [d]
1796   0DA2 E7            pop d
1797   0DA3 5A            add d, b
1798   0DA4 E4            pop a
1799   0DA5 DA            push d
1800   0DA6 26 30 00      mov b, $30
1801   0DA9             ; START TERMS
1802   0DA9 D7            push a
1803   0DAA 11            mov a, b
1804   0DAB FA 05 00      lea d, [bp + 5] ; $num
1805   0DAE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1806   0DB1 FD 39         mov c, b ; And place it into C
1807   0DB3 2A            mov b, [d] ; Lower Word in B
1808   0DB4             ; START FACTORS
1809   0DB4 D7            push a
1810   0DB5 11            mov a, b
1811   0DB6 26 0A 00      mov b, $a
1812   0DB9 AE            div a, b ; 
1813   0DBA 11            mov a, b
1814   0DBB 27            mov b, a
1815   0DBC E4            pop a
1816   0DBD             ; END FACTORS
1817   0DBD 54            add a, b
1818   0DBE D7            push a
1819   0DBF FD 12         mov a, g
1820   0DC1 28            mov b, c
1821   0DC2 5C            adc a, b
1822   0DC3 39            mov c, a
1823   0DC4 E5            pop b
1824   0DC5 E4            pop a
1825   0DC6             ; END TERMS
1826   0DC6 E7            pop d
1827   0DC7 FD 3E         mov [d], bl
1828   0DC9             ;; num = num / 10; 
1829   0DC9 FA 05 00      lea d, [bp + 5] ; $num
1830   0DCC DA            push d
1831   0DCD FA 05 00      lea d, [bp + 5] ; $num
1832   0DD0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1833   0DD3 FD 39         mov c, b ; And place it into C
1834   0DD5 2A            mov b, [d] ; Lower Word in B
1835   0DD6             ; START FACTORS
1836   0DD6 D7            push a
1837   0DD7 11            mov a, b
1838   0DD8 26 0A 00      mov b, $a
1839   0DDB AE            div a, b
1840   0DDC 27            mov b, a
1841   0DDD E4            pop a
1842   0DDE             ; END FACTORS
1843   0DDE E7            pop d
1844   0DDF FD 43         mov [d], b
1845   0DE1 28            mov b, c
1846   0DE2 FD 44 02 00   mov [d + 2], b
1847   0DE6             ;; i++; 
1848   0DE6 FA F5 FF      lea d, [bp + -11] ; $i
1849   0DE9 2A            mov b, [d]
1850   0DEA D8            push b
1851   0DEB FD 77         inc b
1852   0DED FA F5 FF      lea d, [bp + -11] ; $i
1853   0DF0 FD 43         mov [d], b
1854   0DF2 E5            pop b
1855   0DF3 0A 7B 0D      jmp _while25_cond
1856   0DF6             _while25_exit:
1857   0DF6             ;; while (i > 0) { 
1858   0DF6             _while26_cond:
1859   0DF6 FA F5 FF      lea d, [bp + -11] ; $i
1860   0DF9 2A            mov b, [d]
1861   0DFA             ; START RELATIONAL
1862   0DFA D7            push a
1863   0DFB 11            mov a, b
1864   0DFC 26 00 00      mov b, $0
1865   0DFF B0            cmp a, b
1866   0E00 FD 7F         sgt ; >
1867   0E02 E4            pop a
1868   0E03             ; END RELATIONAL
1869   0E03 C0 00 00      cmp b, 0
1870   0E06 C6 2F 0E      je _while26_exit
1871   0E09             _while26_block:
1872   0E09             ;; i--; 
1873   0E09 FA F5 FF      lea d, [bp + -11] ; $i
1874   0E0C 2A            mov b, [d]
1875   0E0D D8            push b
1876   0E0E FD 7D         dec b
1877   0E10 FA F5 FF      lea d, [bp + -11] ; $i
1878   0E13 FD 43         mov [d], b
1879   0E15 E5            pop b
1880   0E16             ;; putchar(digits[i]); 
1881   0E16 FA F7 FF      lea d, [bp + -9] ; $digits
1882   0E19 D7            push a
1883   0E1A DA            push d
1884   0E1B FA F5 FF      lea d, [bp + -11] ; $i
1885   0E1E 2A            mov b, [d]
1886   0E1F E7            pop d
1887   0E20 5A            add d, b
1888   0E21 E4            pop a
1889   0E22 32            mov bl, [d]
1890   0E23 A7 00         mov bh, 0
1891   0E25 DD            push bl
1892   0E26 07 FE 0F      call putchar
1893   0E29 51 01 00      add sp, 1
1894   0E2C 0A F6 0D      jmp _while26_cond
1895   0E2F             _while26_exit:
1896   0E2F F9            leave
1897   0E30 09            ret
1898   0E31             
1899   0E31             print_unsigned_long:
1900   0E31 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1901   0E34             ; $digits 
1902   0E34             ; $i 
1903   0E34 52 0C 00      sub sp, 12
1904   0E37             ;; i = 0; 
1905   0E37 FA F5 FF      lea d, [bp + -11] ; $i
1906   0E3A DA            push d
1907   0E3B 26 00 00      mov b, $0
1908   0E3E E7            pop d
1909   0E3F FD 43         mov [d], b
1910   0E41             ;; if(num == 0){ 
1911   0E41             _if27_cond:
1912   0E41 FA 05 00      lea d, [bp + 5] ; $num
1913   0E44 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1914   0E47 FD 39         mov c, b ; And place it into C
1915   0E49 2A            mov b, [d] ; Lower Word in B
1916   0E4A             ; START RELATIONAL
1917   0E4A D7            push a
1918   0E4B FD D8         push g
1919   0E4D 11            mov a, b
1920   0E4E FD 7A         mov g, c
1921   0E50 26 00 00      mov b, $0
1922   0E53 B0            cmp a, b
1923   0E54 FD 71         seq ; ==
1924   0E56 D8            push b
1925   0E57 12            mov a, c
1926   0E58 FD 27         mov b, g
1927   0E5A B0            cmp a, b
1928   0E5B FD 71         seq ; ==
1929   0E5D E4            pop a
1930   0E5E FD A7         sand a, b
1931   0E60 FD F1         pop g
1932   0E62 E4            pop a
1933   0E63             ; END RELATIONAL
1934   0E63 C0 00 00      cmp b, 0
1935   0E66 C6 78 0E      je _if27_exit
1936   0E69             _if27_true:
1937   0E69             ;; putchar('0'); 
1938   0E69 26 30 00      mov b, $30
1939   0E6C DD            push bl
1940   0E6D 07 FE 0F      call putchar
1941   0E70 51 01 00      add sp, 1
1942   0E73             ;; return; 
1943   0E73 F9            leave
1944   0E74 09            ret
1945   0E75 0A 78 0E      jmp _if27_exit
1946   0E78             _if27_exit:
1947   0E78             ;; while (num > 0) { 
1948   0E78             _while28_cond:
1949   0E78 FA 05 00      lea d, [bp + 5] ; $num
1950   0E7B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1951   0E7E FD 39         mov c, b ; And place it into C
1952   0E80 2A            mov b, [d] ; Lower Word in B
1953   0E81             ; START RELATIONAL
1954   0E81 D7            push a
1955   0E82 FD D8         push g
1956   0E84 11            mov a, b
1957   0E85 FD 7A         mov g, c
1958   0E87 26 00 00      mov b, $0
1959   0E8A B0            cmp a, b
1960   0E8B FD 81         sgu ; > (unsigned)
1961   0E8D FD F1         pop g
1962   0E8F E4            pop a
1963   0E90             ; END RELATIONAL
1964   0E90 C0 00 00      cmp b, 0
1965   0E93 C6 F3 0E      je _while28_exit
1966   0E96             _while28_block:
1967   0E96             ;; digits[i] = '0' + (num % 10); 
1968   0E96 FA F7 FF      lea d, [bp + -9] ; $digits
1969   0E99 D7            push a
1970   0E9A DA            push d
1971   0E9B FA F5 FF      lea d, [bp + -11] ; $i
1972   0E9E 2A            mov b, [d]
1973   0E9F E7            pop d
1974   0EA0 5A            add d, b
1975   0EA1 E4            pop a
1976   0EA2 DA            push d
1977   0EA3 26 30 00      mov b, $30
1978   0EA6             ; START TERMS
1979   0EA6 D7            push a
1980   0EA7 11            mov a, b
1981   0EA8 FA 05 00      lea d, [bp + 5] ; $num
1982   0EAB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1983   0EAE FD 39         mov c, b ; And place it into C
1984   0EB0 2A            mov b, [d] ; Lower Word in B
1985   0EB1             ; START FACTORS
1986   0EB1 D7            push a
1987   0EB2 11            mov a, b
1988   0EB3 26 0A 00      mov b, $a
1989   0EB6 AE            div a, b ; 
1990   0EB7 11            mov a, b
1991   0EB8 27            mov b, a
1992   0EB9 E4            pop a
1993   0EBA             ; END FACTORS
1994   0EBA 54            add a, b
1995   0EBB D7            push a
1996   0EBC FD 12         mov a, g
1997   0EBE 28            mov b, c
1998   0EBF 5C            adc a, b
1999   0EC0 39            mov c, a
2000   0EC1 E5            pop b
2001   0EC2 E4            pop a
2002   0EC3             ; END TERMS
2003   0EC3 E7            pop d
2004   0EC4 FD 3E         mov [d], bl
2005   0EC6             ;; num = num / 10; 
2006   0EC6 FA 05 00      lea d, [bp + 5] ; $num
2007   0EC9 DA            push d
2008   0ECA FA 05 00      lea d, [bp + 5] ; $num
2009   0ECD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2010   0ED0 FD 39         mov c, b ; And place it into C
2011   0ED2 2A            mov b, [d] ; Lower Word in B
2012   0ED3             ; START FACTORS
2013   0ED3 D7            push a
2014   0ED4 11            mov a, b
2015   0ED5 26 0A 00      mov b, $a
2016   0ED8 AE            div a, b
2017   0ED9 27            mov b, a
2018   0EDA E4            pop a
2019   0EDB             ; END FACTORS
2020   0EDB E7            pop d
2021   0EDC FD 43         mov [d], b
2022   0EDE 28            mov b, c
2023   0EDF FD 44 02 00   mov [d + 2], b
2024   0EE3             ;; i++; 
2025   0EE3 FA F5 FF      lea d, [bp + -11] ; $i
2026   0EE6 2A            mov b, [d]
2027   0EE7 D8            push b
2028   0EE8 FD 77         inc b
2029   0EEA FA F5 FF      lea d, [bp + -11] ; $i
2030   0EED FD 43         mov [d], b
2031   0EEF E5            pop b
2032   0EF0 0A 78 0E      jmp _while28_cond
2033   0EF3             _while28_exit:
2034   0EF3             ;; while (i > 0) { 
2035   0EF3             _while29_cond:
2036   0EF3 FA F5 FF      lea d, [bp + -11] ; $i
2037   0EF6 2A            mov b, [d]
2038   0EF7             ; START RELATIONAL
2039   0EF7 D7            push a
2040   0EF8 11            mov a, b
2041   0EF9 26 00 00      mov b, $0
2042   0EFC B0            cmp a, b
2043   0EFD FD 7F         sgt ; >
2044   0EFF E4            pop a
2045   0F00             ; END RELATIONAL
2046   0F00 C0 00 00      cmp b, 0
2047   0F03 C6 2C 0F      je _while29_exit
2048   0F06             _while29_block:
2049   0F06             ;; i--; 
2050   0F06 FA F5 FF      lea d, [bp + -11] ; $i
2051   0F09 2A            mov b, [d]
2052   0F0A D8            push b
2053   0F0B FD 7D         dec b
2054   0F0D FA F5 FF      lea d, [bp + -11] ; $i
2055   0F10 FD 43         mov [d], b
2056   0F12 E5            pop b
2057   0F13             ;; putchar(digits[i]); 
2058   0F13 FA F7 FF      lea d, [bp + -9] ; $digits
2059   0F16 D7            push a
2060   0F17 DA            push d
2061   0F18 FA F5 FF      lea d, [bp + -11] ; $i
2062   0F1B 2A            mov b, [d]
2063   0F1C E7            pop d
2064   0F1D 5A            add d, b
2065   0F1E E4            pop a
2066   0F1F 32            mov bl, [d]
2067   0F20 A7 00         mov bh, 0
2068   0F22 DD            push bl
2069   0F23 07 FE 0F      call putchar
2070   0F26 51 01 00      add sp, 1
2071   0F29 0A F3 0E      jmp _while29_cond
2072   0F2C             _while29_exit:
2073   0F2C F9            leave
2074   0F2D 09            ret
2075   0F2E             
2076   0F2E             print_unsigned:
2077   0F2E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2078   0F31             ; $digits 
2079   0F31             ; $i 
2080   0F31 52 07 00      sub sp, 7
2081   0F34             ;; i = 0; 
2082   0F34 FA FA FF      lea d, [bp + -6] ; $i
2083   0F37 DA            push d
2084   0F38 26 00 00      mov b, $0
2085   0F3B E7            pop d
2086   0F3C FD 43         mov [d], b
2087   0F3E             ;; if(num == 0){ 
2088   0F3E             _if30_cond:
2089   0F3E FA 05 00      lea d, [bp + 5] ; $num
2090   0F41 2A            mov b, [d]
2091   0F42             ; START RELATIONAL
2092   0F42 D7            push a
2093   0F43 11            mov a, b
2094   0F44 26 00 00      mov b, $0
2095   0F47 B0            cmp a, b
2096   0F48 FD 71         seq ; ==
2097   0F4A E4            pop a
2098   0F4B             ; END RELATIONAL
2099   0F4B C0 00 00      cmp b, 0
2100   0F4E C6 60 0F      je _if30_exit
2101   0F51             _if30_true:
2102   0F51             ;; putchar('0'); 
2103   0F51 26 30 00      mov b, $30
2104   0F54 DD            push bl
2105   0F55 07 FE 0F      call putchar
2106   0F58 51 01 00      add sp, 1
2107   0F5B             ;; return; 
2108   0F5B F9            leave
2109   0F5C 09            ret
2110   0F5D 0A 60 0F      jmp _if30_exit
2111   0F60             _if30_exit:
2112   0F60             ;; while (num > 0) { 
2113   0F60             _while31_cond:
2114   0F60 FA 05 00      lea d, [bp + 5] ; $num
2115   0F63 2A            mov b, [d]
2116   0F64             ; START RELATIONAL
2117   0F64 D7            push a
2118   0F65 11            mov a, b
2119   0F66 26 00 00      mov b, $0
2120   0F69 B0            cmp a, b
2121   0F6A FD 81         sgu ; > (unsigned)
2122   0F6C E4            pop a
2123   0F6D             ; END RELATIONAL
2124   0F6D C0 00 00      cmp b, 0
2125   0F70 C6 BA 0F      je _while31_exit
2126   0F73             _while31_block:
2127   0F73             ;; digits[i] = '0' + (num % 10); 
2128   0F73 FA FC FF      lea d, [bp + -4] ; $digits
2129   0F76 D7            push a
2130   0F77 DA            push d
2131   0F78 FA FA FF      lea d, [bp + -6] ; $i
2132   0F7B 2A            mov b, [d]
2133   0F7C E7            pop d
2134   0F7D 5A            add d, b
2135   0F7E E4            pop a
2136   0F7F DA            push d
2137   0F80 26 30 00      mov b, $30
2138   0F83             ; START TERMS
2139   0F83 D7            push a
2140   0F84 11            mov a, b
2141   0F85 FA 05 00      lea d, [bp + 5] ; $num
2142   0F88 2A            mov b, [d]
2143   0F89             ; START FACTORS
2144   0F89 D7            push a
2145   0F8A 11            mov a, b
2146   0F8B 26 0A 00      mov b, $a
2147   0F8E AE            div a, b ; 
2148   0F8F 11            mov a, b
2149   0F90 27            mov b, a
2150   0F91 E4            pop a
2151   0F92             ; END FACTORS
2152   0F92 56            add b, a
2153   0F93 E4            pop a
2154   0F94             ; END TERMS
2155   0F94 E7            pop d
2156   0F95 FD 3E         mov [d], bl
2157   0F97             ;; num = num / 10; 
2158   0F97 FA 05 00      lea d, [bp + 5] ; $num
2159   0F9A DA            push d
2160   0F9B FA 05 00      lea d, [bp + 5] ; $num
2161   0F9E 2A            mov b, [d]
2162   0F9F             ; START FACTORS
2163   0F9F D7            push a
2164   0FA0 11            mov a, b
2165   0FA1 26 0A 00      mov b, $a
2166   0FA4 AE            div a, b
2167   0FA5 27            mov b, a
2168   0FA6 E4            pop a
2169   0FA7             ; END FACTORS
2170   0FA7 E7            pop d
2171   0FA8 FD 43         mov [d], b
2172   0FAA             ;; i++; 
2173   0FAA FA FA FF      lea d, [bp + -6] ; $i
2174   0FAD 2A            mov b, [d]
2175   0FAE D8            push b
2176   0FAF FD 77         inc b
2177   0FB1 FA FA FF      lea d, [bp + -6] ; $i
2178   0FB4 FD 43         mov [d], b
2179   0FB6 E5            pop b
2180   0FB7 0A 60 0F      jmp _while31_cond
2181   0FBA             _while31_exit:
2182   0FBA             ;; while (i > 0) { 
2183   0FBA             _while32_cond:
2184   0FBA FA FA FF      lea d, [bp + -6] ; $i
2185   0FBD 2A            mov b, [d]
2186   0FBE             ; START RELATIONAL
2187   0FBE D7            push a
2188   0FBF 11            mov a, b
2189   0FC0 26 00 00      mov b, $0
2190   0FC3 B0            cmp a, b
2191   0FC4 FD 7F         sgt ; >
2192   0FC6 E4            pop a
2193   0FC7             ; END RELATIONAL
2194   0FC7 C0 00 00      cmp b, 0
2195   0FCA C6 F3 0F      je _while32_exit
2196   0FCD             _while32_block:
2197   0FCD             ;; i--; 
2198   0FCD FA FA FF      lea d, [bp + -6] ; $i
2199   0FD0 2A            mov b, [d]
2200   0FD1 D8            push b
2201   0FD2 FD 7D         dec b
2202   0FD4 FA FA FF      lea d, [bp + -6] ; $i
2203   0FD7 FD 43         mov [d], b
2204   0FD9 E5            pop b
2205   0FDA             ;; putchar(digits[i]); 
2206   0FDA FA FC FF      lea d, [bp + -4] ; $digits
2207   0FDD D7            push a
2208   0FDE DA            push d
2209   0FDF FA FA FF      lea d, [bp + -6] ; $i
2210   0FE2 2A            mov b, [d]
2211   0FE3 E7            pop d
2212   0FE4 5A            add d, b
2213   0FE5 E4            pop a
2214   0FE6 32            mov bl, [d]
2215   0FE7 A7 00         mov bh, 0
2216   0FE9 DD            push bl
2217   0FEA 07 FE 0F      call putchar
2218   0FED 51 01 00      add sp, 1
2219   0FF0 0A BA 0F      jmp _while32_cond
2220   0FF3             _while32_exit:
2221   0FF3 F9            leave
2222   0FF4 09            ret
2223   0FF5             
2224   0FF5             date:
2225   0FF5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2226   0FF8             
2227   0FF8             ; --- BEGIN INLINE ASM BLOCK
2228   0FF8 19 00         mov al, 0 
2229   0FFA 05 07         syscall sys_datetime
2230   0FFC             ; --- END INLINE ASM BLOCK
2231   0FFC             
2232   0FFC F9            leave
2233   0FFD 09            ret
2234   0FFE             
2235   0FFE             putchar:
2236   0FFE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2237   1001             
2238   1001             ; --- BEGIN INLINE ASM BLOCK
2239   1001 FA 05 00      lea d, [bp + 5] ; $c
2240   1004 1E            mov al, [d]
2241   1005 23            mov ah, al
2242   1006 07 DF 11      call _putchar
2243   1009             ; --- END INLINE ASM BLOCK
2244   1009             
2245   1009 F9            leave
2246   100A 09            ret
2247   100B             
2248   100B             getchar:
2249   100B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2250   100E             ; $c 
2251   100E 52 01 00      sub sp, 1
2252   1011             
2253   1011             ; --- BEGIN INLINE ASM BLOCK
2254   1011 07 D8 11      call getch
2255   1014 1A            mov al, ah
2256   1015 FA 00 00      lea d, [bp + 0] ; $c
2257   1018 3E            mov [d], al
2258   1019             ; --- END INLINE ASM BLOCK
2259   1019             
2260   1019             ;; return c; 
2261   1019 FA 00 00      lea d, [bp + 0] ; $c
2262   101C 32            mov bl, [d]
2263   101D A7 00         mov bh, 0
2264   101F F9            leave
2265   1020 09            ret
2266   1021             
2267   1021             scann:
2268   1021 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2269   1024             ; $m 
2270   1024 52 02 00      sub sp, 2
2271   1027             
2272   1027             ; --- BEGIN INLINE ASM BLOCK
2273   1027 07 23 14      call scan_u16d
2274   102A FA FF FF      lea d, [bp + -1] ; $m
2275   102D 43            mov [d], a
2276   102E             ; --- END INLINE ASM BLOCK
2277   102E             
2278   102E             ;; return m; 
2279   102E FA FF FF      lea d, [bp + -1] ; $m
2280   1031 2A            mov b, [d]
2281   1032 F9            leave
2282   1033 09            ret
2283   1034             
2284   1034             puts:
2285   1034 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2286   1037             
2287   1037             ; --- BEGIN INLINE ASM BLOCK
2288   1037 FA 05 00      lea d, [bp + 5] ; $s
2289   103A 15            mov a, [d]
2290   103B 3C            mov d, a
2291   103C 07 29 13      call _puts
2292   103F 10 00 0A      mov a, $0A00
2293   1042 05 03         syscall sys_io
2294   1044             ; --- END INLINE ASM BLOCK
2295   1044             
2296   1044 F9            leave
2297   1045 09            ret
2298   1046             
2299   1046             print:
2300   1046 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2301   1049             
2302   1049             ; --- BEGIN INLINE ASM BLOCK
2303   1049 FA 05 00      lea d, [bp + 5] ; $s
2304   104C FD 2A         mov d, [d]
2305   104E 07 29 13      call _puts
2306   1051             ; --- END INLINE ASM BLOCK
2307   1051             
2308   1051 F9            leave
2309   1052 09            ret
2310   1053             
2311   1053             loadfile:
2312   1053 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2313   1056             
2314   1056             ; --- BEGIN INLINE ASM BLOCK
2315   1056 FA 07 00      lea d, [bp + 7] ; $destination
2316   1059 15            mov a, [d]
2317   105A 4F            mov di, a
2318   105B FA 05 00      lea d, [bp + 5] ; $filename
2319   105E FD 2A         mov d, [d]
2320   1060 19 14         mov al, 20
2321   1062 05 04         syscall sys_filesystem
2322   1064             ; --- END INLINE ASM BLOCK
2323   1064             
2324   1064 F9            leave
2325   1065 09            ret
2326   1066             
2327   1066             create_file:
2328   1066 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2329   1069 F9            leave
2330   106A 09            ret
2331   106B             
2332   106B             delete_file:
2333   106B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2334   106E             
2335   106E             ; --- BEGIN INLINE ASM BLOCK
2336   106E FA 05 00      lea d, [bp + 5] ; $filename
2337   1071 19 0A         mov al, 10
2338   1073 05 04         syscall sys_filesystem
2339   1075             ; --- END INLINE ASM BLOCK
2340   1075             
2341   1075 F9            leave
2342   1076 09            ret
2343   1077             
2344   1077             fopen:
2345   1077 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2346   107A F9            leave
2347   107B 09            ret
2348   107C             
2349   107C             fclose:
2350   107C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2351   107F F9            leave
2352   1080 09            ret
2353   1081             
2354   1081             load_hex:
2355   1081 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2356   1084             ; $temp 
2357   1084 52 02 00      sub sp, 2
2358   1087             ;; temp = alloc(32768); 
2359   1087 FA FF FF      lea d, [bp + -1] ; $temp
2360   108A DA            push d
2361   108B 26 00 80      mov b, $8000
2362   108E FD AB         swp b
2363   1090 D8            push b
2364   1091 07 68 07      call alloc
2365   1094 51 02 00      add sp, 2
2366   1097 E7            pop d
2367   1098 FD 43         mov [d], b
2368   109A             
2369   109A             ; --- BEGIN INLINE ASM BLOCK
2370   109A               
2371   109A               
2372   109A               
2373   109A               
2374   109A               
2375   109A             _load_hex:
2376   109A D7            push a
2377   109B D8            push b
2378   109C DA            push d
2379   109D E2            push si
2380   109E E3            push di
2381   109F 52 00 80      sub sp, $8000      
2382   10A2 38 00 00      mov c, 0
2383   10A5 48            mov a, sp
2384   10A6 77            inc a
2385   10A7 3C            mov d, a          
2386   10A8 07 E6 11      call _gets        
2387   10AB 4D            mov si, a
2388   10AC             __load_hex_loop:
2389   10AC F6            lodsb             
2390   10AD B9 00         cmp al, 0         
2391   10AF C6 BD 10      jz __load_hex_ret
2392   10B2 36            mov bh, al
2393   10B3 F6            lodsb
2394   10B4 2F            mov bl, al
2395   10B5 07 9C 11      call _atoi        
2396   10B8 F7            stosb             
2397   10B9 78            inc c
2398   10BA 0A AC 10      jmp __load_hex_loop
2399   10BD             __load_hex_ret:
2400   10BD 51 00 80      add sp, $8000
2401   10C0 F0            pop di
2402   10C1 EF            pop si
2403   10C2 E7            pop d
2404   10C3 E5            pop b
2405   10C4 E4            pop a
2406   10C5             ; --- END INLINE ASM BLOCK
2407   10C5             
2408   10C5 F9            leave
2409   10C6 09            ret
2410   10C7             
2411   10C7             getparam:
2412   10C7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2413   10CA             ; $data 
2414   10CA 52 01 00      sub sp, 1
2415   10CD             
2416   10CD             ; --- BEGIN INLINE ASM BLOCK
2417   10CD 19 04         mov al, 4
2418   10CF FA 05 00      lea d, [bp + 5] ; $address
2419   10D2 FD 2A         mov d, [d]
2420   10D4 05 0C         syscall sys_system
2421   10D6 FA 00 00      lea d, [bp + 0] ; $data
2422   10D9 FD 3E         mov [d], bl
2423   10DB             ; --- END INLINE ASM BLOCK
2424   10DB             
2425   10DB             ;; return data; 
2426   10DB FA 00 00      lea d, [bp + 0] ; $data
2427   10DE 32            mov bl, [d]
2428   10DF A7 00         mov bh, 0
2429   10E1 F9            leave
2430   10E2 09            ret
2431   10E3             
2432   10E3             clear:
2433   10E3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2434   10E6             ;; print("\033[2J\033[H"); 
2435   10E6 26 54 1E      mov b, __s5 ; "\033[2J\033[H"
2436   10E9 FD AB         swp b
2437   10EB D8            push b
2438   10EC 07 46 10      call print
2439   10EF 51 02 00      add sp, 2
2440   10F2 F9            leave
2441   10F3 09            ret
2442   10F4             
2443   10F4             include_stdio_asm:
2444   10F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2445   10F7             
2446   10F7             ; --- BEGIN INLINE ASM BLOCK
2447   10F7             .include "lib/asm/stdio.asm"
0001+  10F7             ;-----------------------------------------------------------------------------
0002+  10F7             ; stdio.s
0003+  10F7             ;-----------------------------------------------------------------------------
0004+  10F7             .include "lib/asm/string.asm"
0001++ 10F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 10F7             ; string.s
0003++ 10F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 10F7             
0005++ 10F7             
0006++ 10F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 10F7             ; _strrev
0008++ 10F7             ; reverse a string
0009++ 10F7             ; D = string address
0010++ 10F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 10F7             ; 01234
0012++ 10F7             _strrev:
0013++ 10F7 4B          	pusha
0014++ 10F8 07 3E 11    	call _strlen	; length in C
0015++ 10FB 12          	mov a, c
0016++ 10FC AF 01 00    	cmp a, 1
0017++ 10FF D0 19 11    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1102 7D          	dec a
0019++ 1103 FD 4E       	mov si, d	; beginning of string
0020++ 1105 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1107 59          	add d, a	; end of string
0022++ 1108 12          	mov a, c
0023++ 1109 FD 9B       	shr a		; divide by 2
0024++ 110B 39          	mov c, a	; C now counts the steps
0025++ 110C             _strrev_L0:
0026++ 110C 32          	mov bl, [d]	; save load right-side char into BL
0027++ 110D F6          	lodsb		; load left-side char into AL; increase SI
0028++ 110E 3E          	mov [d], al	; store left char into right side
0029++ 110F 1B          	mov al, bl
0030++ 1110 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1111 7E          	dec c
0032++ 1112 7F          	dec d
0033++ 1113 C2 00 00    	cmp c, 0
0034++ 1116 C7 0C 11    	jne _strrev_L0
0035++ 1119             _strrev_end:
0036++ 1119 4C          	popa
0037++ 111A 09          	ret
0038++ 111B             	
0039++ 111B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 111B             ; _strchr
0041++ 111B             ; search string in D for char in AL
0042++ 111B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 111B             _strchr:
0044++ 111B             _strchr_L0:
0045++ 111B 32          	mov bl, [d]
0046++ 111C C1 00       	cmp bl, 0
0047++ 111E C6 29 11    	je _strchr_end
0048++ 1121 BA          	cmp al, bl
0049++ 1122 C6 29 11    	je _strchr_end
0050++ 1125 79          	inc d
0051++ 1126 0A 1B 11    	jmp _strchr_L0
0052++ 1129             _strchr_end:
0053++ 1129 1B          	mov al, bl
0054++ 112A 09          	ret
0055++ 112B             
0056++ 112B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 112B             ; _strstr
0058++ 112B             ; find sub-string
0059++ 112B             ; str1 in SI
0060++ 112B             ; str2 in DI
0061++ 112B             ; SI points to end of source string
0062++ 112B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 112B             _strstr:
0064++ 112B DB          	push al
0065++ 112C DA          	push d
0066++ 112D E3          	push di
0067++ 112E             _strstr_loop:
0068++ 112E F3          	cmpsb					; compare a byte of the strings
0069++ 112F C7 3A 11    	jne _strstr_ret
0070++ 1132 FC 00 00    	lea d, [di + 0]
0071++ 1135 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1137 C7 2E 11    	jne _strstr_loop				; equal chars but not at end
0073++ 113A             _strstr_ret:
0074++ 113A F0          	pop di
0075++ 113B E7          	pop d
0076++ 113C E8          	pop al
0077++ 113D 09          	ret
0078++ 113E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 113E             ; length of null terminated string
0080++ 113E             ; result in C
0081++ 113E             ; pointer in D
0082++ 113E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 113E             _strlen:
0084++ 113E DA          	push d
0085++ 113F 38 00 00    	mov c, 0
0086++ 1142             _strlen_L1:
0087++ 1142 BD 00       	cmp byte [d], 0
0088++ 1144 C6 4C 11    	je _strlen_ret
0089++ 1147 79          	inc d
0090++ 1148 78          	inc c
0091++ 1149 0A 42 11    	jmp _strlen_L1
0092++ 114C             _strlen_ret:
0093++ 114C E7          	pop d
0094++ 114D 09          	ret
0095++ 114E             
0096++ 114E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 114E             ; STRCMP
0098++ 114E             ; compare two strings
0099++ 114E             ; str1 in SI
0100++ 114E             ; str2 in DI
0101++ 114E             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 114E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 114E             _strcmp:
0104++ 114E DB          	push al
0105++ 114F DA          	push d
0106++ 1150 E3          	push di
0107++ 1151 E2          	push si
0108++ 1152             _strcmp_loop:
0109++ 1152 F3          	cmpsb					; compare a byte of the strings
0110++ 1153 C7 5E 11    	jne _strcmp_ret
0111++ 1156 FB FF FF    	lea d, [si +- 1]
0112++ 1159 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 115B C7 52 11    	jne _strcmp_loop				; equal chars but not at end
0114++ 115E             _strcmp_ret:
0115++ 115E EF          	pop si
0116++ 115F F0          	pop di
0117++ 1160 E7          	pop d
0118++ 1161 E8          	pop al
0119++ 1162 09          	ret
0120++ 1163             
0121++ 1163             
0122++ 1163             ; STRCPY
0123++ 1163             ; copy null terminated string from SI to DI
0124++ 1163             ; source in SI
0125++ 1163             ; destination in DI
0126++ 1163             _strcpy:
0127++ 1163 E2          	push si
0128++ 1164 E3          	push di
0129++ 1165 DB          	push al
0130++ 1166             _strcpy_L1:
0131++ 1166 F6          	lodsb
0132++ 1167 F7          	stosb
0133++ 1168 B9 00       	cmp al, 0
0134++ 116A C7 66 11    	jne _strcpy_L1
0135++ 116D             _strcpy_end:
0136++ 116D E8          	pop al
0137++ 116E F0          	pop di
0138++ 116F EF          	pop si
0139++ 1170 09          	ret
0140++ 1171             
0141++ 1171             ; STRCAT
0142++ 1171             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1171             ; source in SI
0144++ 1171             ; destination in DI
0145++ 1171             _strcat:
0146++ 1171 E2          	push si
0147++ 1172 E3          	push di
0148++ 1173 D7          	push a
0149++ 1174 DA          	push d
0150++ 1175 50          	mov a, di
0151++ 1176 3C          	mov d, a
0152++ 1177             _strcat_goto_end_L1:
0153++ 1177 BD 00       	cmp byte[d], 0
0154++ 1179 C6 80 11    	je _strcat_start
0155++ 117C 79          	inc d
0156++ 117D 0A 77 11    	jmp _strcat_goto_end_L1
0157++ 1180             _strcat_start:
0158++ 1180 FD 50       	mov di, d
0159++ 1182             _strcat_L1:
0160++ 1182 F6          	lodsb
0161++ 1183 F7          	stosb
0162++ 1184 B9 00       	cmp al, 0
0163++ 1186 C7 82 11    	jne _strcat_L1
0164++ 1189             _strcat_end:
0165++ 1189 E7          	pop d
0166++ 118A E4          	pop a
0167++ 118B F0          	pop di
0168++ 118C EF          	pop si
0169++ 118D 09          	ret
0170++ 118E             
0171++ 118E             
0005+  118E             
0006+  118E             ;-----------------------------------------------------------------------------
0007+  118E             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  118E             ; ASCII in BL
0009+  118E             ; result in AL
0010+  118E             ; ascii for F = 0100 0110
0011+  118E             ; ascii for 9 = 0011 1001
0012+  118E             ;-----------------------------------------------------------------------------
0013+  118E             hex_ascii_encode:
0014+  118E 1B            mov al, bl
0015+  118F 93 40         test al, $40        ; test if letter or number
0016+  1191 C7 97 11      jnz hex_letter
0017+  1194 87 0F         and al, $0F        ; get number
0018+  1196 09            ret
0019+  1197             hex_letter:
0020+  1197 87 0F         and al, $0F        ; get letter
0021+  1199 6A 09         add al, 9
0022+  119B 09            ret
0023+  119C             
0024+  119C             ;-----------------------------------------------------------------------------
0025+  119C             ; ATOI
0026+  119C             ; 2 letter hex string in B
0027+  119C             ; 8bit integer returned in AL
0028+  119C             ;-----------------------------------------------------------------------------
0029+  119C             _atoi:
0030+  119C D8            push b
0031+  119D 07 8E 11      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  11A0 30            mov bl, bh
0033+  11A1 DB            push al          ; save a
0034+  11A2 07 8E 11      call hex_ascii_encode
0035+  11A5 EA            pop bl  
0036+  11A6 FD 9E 04      shl al, 4
0037+  11A9 8C            or al, bl
0038+  11AA E5            pop b
0039+  11AB 09            ret  
0040+  11AC             
0041+  11AC             ;-----------------------------------------------------------------------------
0042+  11AC             ; scanf
0043+  11AC             ; no need for explanations!
0044+  11AC             ;-----------------------------------------------------------------------------
0045+  11AC             scanf:
0046+  11AC 09            ret
0047+  11AD             
0048+  11AD             ;-----------------------------------------------------------------------------
0049+  11AD             ; ITOA
0050+  11AD             ; 8bit value in BL
0051+  11AD             ; 2 byte ASCII result in A
0052+  11AD             ;-----------------------------------------------------------------------------
0053+  11AD             _itoa:
0054+  11AD DA            push d
0055+  11AE D8            push b
0056+  11AF A7 00         mov bh, 0
0057+  11B1 FD A4 04      shr bl, 4  
0058+  11B4 74            mov d, b
0059+  11B5 1F 5D 14      mov al, [d + s_hex_digits]
0060+  11B8 23            mov ah, al
0061+  11B9               
0062+  11B9 E5            pop b
0063+  11BA D8            push b
0064+  11BB A7 00         mov bh, 0
0065+  11BD FD 87 0F      and bl, $0F
0066+  11C0 74            mov d, b
0067+  11C1 1F 5D 14      mov al, [d + s_hex_digits]
0068+  11C4 E5            pop b
0069+  11C5 E7            pop d
0070+  11C6 09            ret
0071+  11C7             
0072+  11C7             ;-----------------------------------------------------------------------------
0073+  11C7             ; HEX STRING TO BINARY
0074+  11C7             ; di = destination address
0075+  11C7             ; si = source
0076+  11C7             ;-----------------------------------------------------------------------------
0077+  11C7             _hex_to_int:
0078+  11C7             _hex_to_int_L1:
0079+  11C7 F6            lodsb          ; load from [SI] to AL
0080+  11C8 B9 00         cmp al, 0        ; check if ASCII 0
0081+  11CA C6 D7 11      jz _hex_to_int_ret
0082+  11CD 36            mov bh, al
0083+  11CE F6            lodsb
0084+  11CF 2F            mov bl, al
0085+  11D0 07 9C 11      call _atoi        ; convert ASCII byte in B to int (to AL)
0086+  11D3 F7            stosb          ; store AL to [DI]
0087+  11D4 0A C7 11      jmp _hex_to_int_L1
0088+  11D7             _hex_to_int_ret:
0089+  11D7 09            ret    
0090+  11D8             
0091+  11D8             ;-----------------------------------------------------------------------------
0092+  11D8             ; GETCHAR
0093+  11D8             ; char in ah
0094+  11D8             ;-----------------------------------------------------------------------------
0095+  11D8             getch:
0096+  11D8 DB            push al
0097+  11D9             getch_retry:
0098+  11D9 19 01         mov al, 1
0099+  11DB 05 03         syscall sys_io      ; receive in AH
0100+  11DD E8            pop al
0101+  11DE 09            ret
0102+  11DF             
0103+  11DF             ;-----------------------------------------------------------------------------
0104+  11DF             ; PUTCHAR
0105+  11DF             ; char in ah
0106+  11DF             ;-----------------------------------------------------------------------------
0107+  11DF             _putchar:
0108+  11DF D7            push a
0109+  11E0 19 00         mov al, 0
0110+  11E2 05 03         syscall sys_io      ; char in AH
0111+  11E4 E4            pop a
0112+  11E5 09            ret
0113+  11E6             
0114+  11E6             ;-----------------------------------------------------------------------------
0115+  11E6             ;; INPUT A STRING
0116+  11E6             ;; terminates with null
0117+  11E6             ;; pointer in D
0118+  11E6             ;-----------------------------------------------------------------------------
0119+  11E6             _gets:
0120+  11E6 D7            push a
0121+  11E7 DA            push d
0122+  11E8             _gets_loop:
0123+  11E8 19 01         mov al, 1
0124+  11EA 05 03         syscall sys_io      ; receive in AH
0125+  11EC B9 00         cmp al, 0        ; check error code (AL)
0126+  11EE C6 E8 11      je _gets_loop      ; if no char received, retry
0127+  11F1             
0128+  11F1 76 1B         cmp ah, 27
0129+  11F3 C6 14 12      je _gets_ansi_esc
0130+  11F6 76 0A         cmp ah, $0A        ; LF
0131+  11F8 C6 7F 12      je _gets_end
0132+  11FB 76 0D         cmp ah, $0D        ; CR
0133+  11FD C6 7F 12      je _gets_end
0134+  1200 76 5C         cmp ah, $5C        ; '\\'
0135+  1202 C6 40 12      je _gets_escape
0136+  1205               
0137+  1205 76 08         cmp ah, $08      ; check for backspace
0138+  1207 C6 10 12      je _gets_backspace
0139+  120A             
0140+  120A 1A            mov al, ah
0141+  120B 3E            mov [d], al
0142+  120C 79            inc d
0143+  120D 0A E8 11      jmp _gets_loop
0144+  1210             _gets_backspace:
0145+  1210 7F            dec d
0146+  1211 0A E8 11      jmp _gets_loop
0147+  1214             _gets_ansi_esc:
0148+  1214 19 01         mov al, 1
0149+  1216 05 03         syscall sys_io        ; receive in AH without echo
0150+  1218 B9 00         cmp al, 0          ; check error code (AL)
0151+  121A C6 14 12      je _gets_ansi_esc    ; if no char received, retry
0152+  121D 76 5B         cmp ah, '['
0153+  121F C7 E8 11      jne _gets_loop
0154+  1222             _gets_ansi_esc_2:
0155+  1222 19 01         mov al, 1
0156+  1224 05 03         syscall sys_io          ; receive in AH without echo
0157+  1226 B9 00         cmp al, 0            ; check error code (AL)
0158+  1228 C6 22 12      je _gets_ansi_esc_2  ; if no char received, retry
0159+  122B 76 44         cmp ah, 'D'
0160+  122D C6 38 12      je _gets_left_arrow
0161+  1230 76 43         cmp ah, 'C'
0162+  1232 C6 3C 12      je _gets_right_arrow
0163+  1235 0A E8 11      jmp _gets_loop
0164+  1238             _gets_left_arrow:
0165+  1238 7F            dec d
0166+  1239 0A E8 11      jmp _gets_loop
0167+  123C             _gets_right_arrow:
0168+  123C 79            inc d
0169+  123D 0A E8 11      jmp _gets_loop
0170+  1240             _gets_escape:
0171+  1240 19 01         mov al, 1
0172+  1242 05 03         syscall sys_io      ; receive in AH
0173+  1244 B9 00         cmp al, 0        ; check error code (AL)
0174+  1246 C6 40 12      je _gets_escape      ; if no char received, retry
0175+  1249 76 6E         cmp ah, 'n'
0176+  124B C6 6A 12      je _gets_LF
0177+  124E 76 72         cmp ah, 'r'
0178+  1250 C6 71 12      je _gets_CR
0179+  1253 76 30         cmp ah, '0'
0180+  1255 C6 78 12      je _gets_NULL
0181+  1258 76 5C         cmp ah, $5C  ; '\'
0182+  125A C6 63 12      je _gets_slash
0183+  125D 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0184+  125E 3E            mov [d], al
0185+  125F 79            inc d
0186+  1260 0A E8 11      jmp _gets_loop
0187+  1263             _gets_slash:
0188+  1263 19 5C         mov al, $5C
0189+  1265 3E            mov [d], al
0190+  1266 79            inc d
0191+  1267 0A E8 11      jmp _gets_loop
0192+  126A             _gets_LF:
0193+  126A 19 0A         mov al, $0A
0194+  126C 3E            mov [d], al
0195+  126D 79            inc d
0196+  126E 0A E8 11      jmp _gets_loop
0197+  1271             _gets_CR:
0198+  1271 19 0D         mov al, $0D
0199+  1273 3E            mov [d], al
0200+  1274 79            inc d
0201+  1275 0A E8 11      jmp _gets_loop
0202+  1278             _gets_NULL:
0203+  1278 19 00         mov al, $00
0204+  127A 3E            mov [d], al
0205+  127B 79            inc d
0206+  127C 0A E8 11      jmp _gets_loop
0207+  127F             _gets_end:
0208+  127F 19 00         mov al, 0
0209+  1281 3E            mov [d], al        ; terminate string
0210+  1282 E7            pop d
0211+  1283 E4            pop a
0212+  1284 09            ret
0213+  1285             
0214+  1285             ;-----------------------------------------------------------------------------
0215+  1285             ;; INPUT TEXT
0216+  1285             ;; terminated with CTRL+D
0217+  1285             ;; pointer in D
0218+  1285             ;-----------------------------------------------------------------------------
0219+  1285             _gettxt:
0220+  1285 D7            push a
0221+  1286 DA            push d
0222+  1287             _gettxt_loop:
0223+  1287 19 01         mov al, 1
0224+  1289 05 03         syscall sys_io      ; receive in AH
0225+  128B B9 00         cmp al, 0        ; check error code (AL)
0226+  128D C6 87 12      je _gettxt_loop    ; if no char received, retry
0227+  1290 76 04         cmp ah, 4      ; EOT
0228+  1292 C6 D0 12      je _gettxt_end
0229+  1295 76 08         cmp ah, $08      ; check for backspace
0230+  1297 C6 CC 12      je _gettxt_backspace
0231+  129A 76 5C         cmp ah, $5C        ; '\'
0232+  129C C6 A5 12      je _gettxt_escape
0233+  129F 1A            mov al, ah
0234+  12A0 3E            mov [d], al
0235+  12A1 79            inc d
0236+  12A2 0A 87 12      jmp _gettxt_loop
0237+  12A5             _gettxt_escape:
0238+  12A5 19 01         mov al, 1
0239+  12A7 05 03         syscall sys_io      ; receive in AH
0240+  12A9 B9 00         cmp al, 0        ; check error code (AL)
0241+  12AB C6 A5 12      je _gettxt_escape    ; if no char received, retry
0242+  12AE 76 6E         cmp ah, 'n'
0243+  12B0 C6 BE 12      je _gettxt_LF
0244+  12B3 76 72         cmp ah, 'r'
0245+  12B5 C6 C5 12      je _gettxt_CR
0246+  12B8 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0247+  12B9 3E            mov [d], al
0248+  12BA 79            inc d
0249+  12BB 0A 87 12      jmp _gettxt_loop
0250+  12BE             _gettxt_LF:
0251+  12BE 19 0A         mov al, $0A
0252+  12C0 3E            mov [d], al
0253+  12C1 79            inc d
0254+  12C2 0A 87 12      jmp _gettxt_loop
0255+  12C5             _gettxt_CR:
0256+  12C5 19 0D         mov al, $0D
0257+  12C7 3E            mov [d], al
0258+  12C8 79            inc d
0259+  12C9 0A 87 12      jmp _gettxt_loop
0260+  12CC             _gettxt_backspace:
0261+  12CC 7F            dec d
0262+  12CD 0A 87 12      jmp _gettxt_loop
0263+  12D0             _gettxt_end:
0264+  12D0 19 00         mov al, 0
0265+  12D2 3E            mov [d], al        ; terminate string
0266+  12D3 E7            pop d
0267+  12D4 E4            pop a
0268+  12D5 09            ret
0269+  12D6             
0270+  12D6             ;-----------------------------------------------------------------------------
0271+  12D6             ; PRINT NEW LINE
0272+  12D6             ;-----------------------------------------------------------------------------
0273+  12D6             printnl:
0274+  12D6 D7            push a
0275+  12D7 10 00 0A      mov a, $0A00
0276+  12DA 05 03         syscall sys_io
0277+  12DC 10 00 0D      mov a, $0D00
0278+  12DF 05 03         syscall sys_io
0279+  12E1 E4            pop a
0280+  12E2 09            ret
0281+  12E3             
0282+  12E3             ;-----------------------------------------------------------------------------
0283+  12E3             ; _strtoint
0284+  12E3             ; 4 digit hex string number in d
0285+  12E3             ; integer returned in A
0286+  12E3             ;-----------------------------------------------------------------------------
0287+  12E3             _strtointx:
0288+  12E3 D8            push b
0289+  12E4 32            mov bl, [d]
0290+  12E5 37            mov bh, bl
0291+  12E6 33 01 00      mov bl, [d + 1]
0292+  12E9 07 9C 11      call _atoi        ; convert to int in AL
0293+  12EC 23            mov ah, al        ; move to AH
0294+  12ED 33 02 00      mov bl, [d + 2]
0295+  12F0 37            mov bh, bl
0296+  12F1 33 03 00      mov bl, [d + 3]
0297+  12F4 07 9C 11      call _atoi        ; convert to int in AL
0298+  12F7 E5            pop b
0299+  12F8 09            ret
0300+  12F9             
0301+  12F9             ;-----------------------------------------------------------------------------
0302+  12F9             ; _strtoint
0303+  12F9             ; 5 digit base10 string number in d
0304+  12F9             ; integer returned in A
0305+  12F9             ;-----------------------------------------------------------------------------
0306+  12F9             _strtoint:
0307+  12F9 E2            push si
0308+  12FA D8            push b
0309+  12FB D9            push c
0310+  12FC DA            push d
0311+  12FD 07 3E 11      call _strlen      ; get string length in C
0312+  1300 7E            dec c
0313+  1301 FD 4E         mov si, d
0314+  1303 12            mov a, c
0315+  1304 FD 99         shl a
0316+  1306 3B 75 14      mov d, table_power
0317+  1309 59            add d, a
0318+  130A 38 00 00      mov c, 0
0319+  130D             _strtoint_L0:
0320+  130D F6            lodsb      ; load ASCII to al
0321+  130E B9 00         cmp al, 0
0322+  1310 C6 23 13      je _strtoint_end
0323+  1313 6F 30         sub al, $30    ; make into integer
0324+  1315 22 00         mov ah, 0
0325+  1317 2A            mov b, [d]
0326+  1318 AC            mul a, b      ; result in B since it fits in 16bits
0327+  1319 11            mov a, b
0328+  131A 28            mov b, c
0329+  131B 54            add a, b
0330+  131C 39            mov c, a
0331+  131D 63 02 00      sub d, 2
0332+  1320 0A 0D 13      jmp _strtoint_L0
0333+  1323             _strtoint_end:
0334+  1323 12            mov a, c
0335+  1324 E7            pop d
0336+  1325 E6            pop c
0337+  1326 E5            pop b
0338+  1327 EF            pop si
0339+  1328 09            ret
0340+  1329             
0341+  1329             ;-----------------------------------------------------------------------------
0342+  1329             ; PRINT NULL TERMINATED STRING
0343+  1329             ; pointer in D
0344+  1329             ;-----------------------------------------------------------------------------
0345+  1329             _puts:
0346+  1329 D7            push a
0347+  132A DA            push d
0348+  132B             _puts_L1:
0349+  132B 1E            mov al, [d]
0350+  132C B9 00         cmp al, 0
0351+  132E C6 3A 13      jz _puts_END
0352+  1331 23            mov ah, al
0353+  1332 19 00         mov al, 0
0354+  1334 05 03         syscall sys_io
0355+  1336 79            inc d
0356+  1337 0A 2B 13      jmp _puts_L1
0357+  133A             _puts_END:
0358+  133A E7            pop d
0359+  133B E4            pop a
0360+  133C 09            ret
0361+  133D             
0362+  133D             ;-----------------------------------------------------------------------------
0363+  133D             ; PRINT N SIZE STRING
0364+  133D             ; pointer in D
0365+  133D             ; size in C
0366+  133D             ;-----------------------------------------------------------------------------
0367+  133D             _putsn:
0368+  133D DB            push al
0369+  133E DA            push d
0370+  133F D9            push c
0371+  1340             _putsn_L0:
0372+  1340 1E            mov al, [d]
0373+  1341 23            mov ah, al
0374+  1342 19 00         mov al, 0
0375+  1344 05 03         syscall sys_io
0376+  1346 79            inc d
0377+  1347 7E            dec c  
0378+  1348 C2 00 00      cmp c, 0
0379+  134B C7 40 13      jne _putsn_L0
0380+  134E             _putsn_end:
0381+  134E E6            pop c
0382+  134F E7            pop d
0383+  1350 E8            pop al
0384+  1351 09            ret
0385+  1352             
0386+  1352             ;-----------------------------------------------------------------------------
0387+  1352             ; print 16bit decimal number
0388+  1352             ; input number in A
0389+  1352             ;-----------------------------------------------------------------------------
0390+  1352             print_u16d:
0391+  1352 D7            push a
0392+  1353 D8            push b
0393+  1354 26 10 27      mov b, 10000
0394+  1357 AE            div a, b      ; get 10000's coeff.
0395+  1358 07 7A 13      call print_number
0396+  135B 11            mov a, b
0397+  135C 26 E8 03      mov b, 1000
0398+  135F AE            div a, b      ; get 1000's coeff.
0399+  1360 07 7A 13      call print_number
0400+  1363 11            mov a, b
0401+  1364 26 64 00      mov b, 100
0402+  1367 AE            div a, b
0403+  1368 07 7A 13      call print_number
0404+  136B 11            mov a, b
0405+  136C 26 0A 00      mov b, 10
0406+  136F AE            div a, b
0407+  1370 07 7A 13      call print_number
0408+  1373 1B            mov al, bl      ; 1's coeff in bl
0409+  1374 07 7A 13      call print_number
0410+  1377 E5            pop b
0411+  1378 E4            pop a
0412+  1379 09            ret
0413+  137A             
0414+  137A             ;-----------------------------------------------------------------------------
0415+  137A             ; print AL
0416+  137A             ;-----------------------------------------------------------------------------
0417+  137A             print_number:
0418+  137A 6A 30         add al, $30
0419+  137C 23            mov ah, al
0420+  137D 07 DF 11      call _putchar
0421+  1380 09            ret
0422+  1381             
0423+  1381             ;-----------------------------------------------------------------------------
0424+  1381             ; PRINT 16BIT HEX INTEGER
0425+  1381             ; integer value in reg B
0426+  1381             ;-----------------------------------------------------------------------------
0427+  1381             print_u16x:
0428+  1381 D7            push a
0429+  1382 D8            push b
0430+  1383 DD            push bl
0431+  1384 30            mov bl, bh
0432+  1385 07 AD 11      call _itoa        ; convert bh to char in A
0433+  1388 2F            mov bl, al        ; save al
0434+  1389 19 00         mov al, 0
0435+  138B 05 03         syscall sys_io        ; display AH
0436+  138D 24            mov ah, bl        ; retrieve al
0437+  138E 19 00         mov al, 0
0438+  1390 05 03         syscall sys_io        ; display AL
0439+  1392             
0440+  1392 EA            pop bl
0441+  1393 07 AD 11      call _itoa        ; convert bh to char in A
0442+  1396 2F            mov bl, al        ; save al
0443+  1397 19 00         mov al, 0
0444+  1399 05 03         syscall sys_io        ; display AH
0445+  139B 24            mov ah, bl        ; retrieve al
0446+  139C 19 00         mov al, 0
0447+  139E 05 03         syscall sys_io        ; display AL
0448+  13A0             
0449+  13A0 E5            pop b
0450+  13A1 E4            pop a
0451+  13A2 09            ret
0452+  13A3             
0453+  13A3             ;-----------------------------------------------------------------------------
0454+  13A3             ; INPUT 16BIT HEX INTEGER
0455+  13A3             ; read 16bit integer into A
0456+  13A3             ;-----------------------------------------------------------------------------
0457+  13A3             scan_u16x:
0458+  13A3 F8 10 00      enter 16
0459+  13A6 D8            push b
0460+  13A7 DA            push d
0461+  13A8             
0462+  13A8 FA F1 FF      lea d, [bp + -15]
0463+  13AB 07 E6 11      call _gets        ; get number
0464+  13AE             
0465+  13AE 32            mov bl, [d]
0466+  13AF 37            mov bh, bl
0467+  13B0 33 01 00      mov bl, [d + 1]
0468+  13B3 07 9C 11      call _atoi        ; convert to int in AL
0469+  13B6 23            mov ah, al        ; move to AH
0470+  13B7             
0471+  13B7 33 02 00      mov bl, [d + 2]
0472+  13BA 37            mov bh, bl
0473+  13BB 33 03 00      mov bl, [d + 3]
0474+  13BE 07 9C 11      call _atoi        ; convert to int in AL
0475+  13C1             
0476+  13C1 E7            pop d
0477+  13C2 E5            pop b
0478+  13C3 F9            leave
0479+  13C4 09            ret
0480+  13C5             
0481+  13C5             ;-----------------------------------------------------------------------------
0482+  13C5             ; PRINT 8bit HEX INTEGER
0483+  13C5             ; integer value in reg bl
0484+  13C5             ;-----------------------------------------------------------------------------
0485+  13C5             print_u8x:
0486+  13C5 D7            push a
0487+  13C6 DD            push bl
0488+  13C7             
0489+  13C7 07 AD 11      call _itoa        ; convert bl to char in A
0490+  13CA 2F            mov bl, al        ; save al
0491+  13CB 19 00         mov al, 0
0492+  13CD 05 03         syscall sys_io        ; display AH
0493+  13CF 24            mov ah, bl        ; retrieve al
0494+  13D0 19 00         mov al, 0
0495+  13D2 05 03         syscall sys_io        ; display AL
0496+  13D4             
0497+  13D4 EA            pop bl
0498+  13D5 E4            pop a
0499+  13D6 09            ret
0500+  13D7             
0501+  13D7             ;-----------------------------------------------------------------------------
0502+  13D7             ; print 8bit decimal unsigned number
0503+  13D7             ; input number in AL
0504+  13D7             ;-----------------------------------------------------------------------------
0505+  13D7             print_u8d:
0506+  13D7 D7            push a
0507+  13D8 D8            push b
0508+  13D9             
0509+  13D9 22 00         mov ah, 0
0510+  13DB 26 64 00      mov b, 100
0511+  13DE AE            div a, b
0512+  13DF D8            push b      ; save remainder
0513+  13E0 B9 00         cmp al, 0
0514+  13E2 C6 EC 13      je skip100
0515+  13E5 6A 30         add al, $30
0516+  13E7 23            mov ah, al
0517+  13E8 19 00         mov al, 0
0518+  13EA 05 03         syscall sys_io  ; print coeff
0519+  13EC             skip100:
0520+  13EC E4            pop a
0521+  13ED 22 00         mov ah, 0
0522+  13EF 26 0A 00      mov b, 10
0523+  13F2 AE            div a, b
0524+  13F3 D8            push b      ; save remainder
0525+  13F4 B9 00         cmp al, 0
0526+  13F6 C6 00 14      je skip10
0527+  13F9 6A 30         add al, $30
0528+  13FB 23            mov ah, al
0529+  13FC 19 00         mov al, 0
0530+  13FE 05 03         syscall sys_io  ; print coeff
0531+  1400             skip10:
0532+  1400 E4            pop a
0533+  1401 1B            mov al, bl
0534+  1402 6A 30         add al, $30
0535+  1404 23            mov ah, al
0536+  1405 19 00         mov al, 0
0537+  1407 05 03         syscall sys_io  ; print coeff
0538+  1409 E5            pop b
0539+  140A E4            pop a
0540+  140B 09            ret
0541+  140C             
0542+  140C             ;-----------------------------------------------------------------------------
0543+  140C             ; INPUT 8BIT HEX INTEGER
0544+  140C             ; read 8bit integer into AL
0545+  140C             ;-----------------------------------------------------------------------------
0546+  140C             scan_u8x:
0547+  140C F8 04 00      enter 4
0548+  140F D8            push b
0549+  1410 DA            push d
0550+  1411             
0551+  1411 FA FD FF      lea d, [bp + -3]
0552+  1414 07 E6 11      call _gets        ; get number
0553+  1417             
0554+  1417 32            mov bl, [d]
0555+  1418 37            mov bh, bl
0556+  1419 33 01 00      mov bl, [d + 1]
0557+  141C 07 9C 11      call _atoi        ; convert to int in AL
0558+  141F             
0559+  141F E7            pop d
0560+  1420 E5            pop b
0561+  1421 F9            leave
0562+  1422 09            ret
0563+  1423             
0564+  1423             ;-----------------------------------------------------------------------------
0565+  1423             ; input decimal number
0566+  1423             ; result in A
0567+  1423             ; 655'\0'
0568+  1423             ; low--------high
0569+  1423             ;-----------------------------------------------------------------------------
0570+  1423             scan_u16d:
0571+  1423 F8 08 00      enter 8
0572+  1426 E2            push si
0573+  1427 D8            push b
0574+  1428 D9            push c
0575+  1429 DA            push d
0576+  142A FA F9 FF      lea d, [bp +- 7]
0577+  142D 07 E6 11      call _gets
0578+  1430 07 3E 11      call _strlen      ; get string length in C
0579+  1433 7E            dec c
0580+  1434 FD 4E         mov si, d
0581+  1436 12            mov a, c
0582+  1437 FD 99         shl a
0583+  1439 3B 75 14      mov d, table_power
0584+  143C 59            add d, a
0585+  143D 38 00 00      mov c, 0
0586+  1440             mul_loop:
0587+  1440 F6            lodsb      ; load ASCII to al
0588+  1441 B9 00         cmp al, 0
0589+  1443 C6 56 14      je mul_exit
0590+  1446 6F 30         sub al, $30    ; make into integer
0591+  1448 22 00         mov ah, 0
0592+  144A 2A            mov b, [d]
0593+  144B AC            mul a, b      ; result in B since it fits in 16bits
0594+  144C 11            mov a, b
0595+  144D 28            mov b, c
0596+  144E 54            add a, b
0597+  144F 39            mov c, a
0598+  1450 63 02 00      sub d, 2
0599+  1453 0A 40 14      jmp mul_loop
0600+  1456             mul_exit:
0601+  1456 12            mov a, c
0602+  1457 E7            pop d
0603+  1458 E6            pop c
0604+  1459 E5            pop b
0605+  145A EF            pop si
0606+  145B F9            leave
0607+  145C 09            ret
0608+  145D             
0609+  145D 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0609+  1461 34 35 36 37 
0609+  1465 38 39 41 42 
0609+  1469 43 44 45 46 
0610+  146D 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0610+  1471 1B 5B 48 00 
0611+  1475             
0612+  1475             table_power:
0613+  1475 01 00         .dw 1
0614+  1477 0A 00         .dw 10
0615+  1479 64 00         .dw 100
0616+  147B E8 03         .dw 1000
0617+  147D 10 27         .dw 100002448   147F             ; --- END INLINE ASM BLOCK
2449   147F             
2450   147F F9            leave
2451   1480 09            ret
2452   1481             
2453   1481             base64_encode:
2454   1481 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2455   1484             ; $i 
2456   1484 10 00 00      mov a, $0
2457   1487 45 FF FF      mov [bp + -1], a
2458   148A             ; $j 
2459   148A 10 00 00      mov a, $0
2460   148D 45 FD FF      mov [bp + -3], a
2461   1490             ; $k 
2462   1490             ; $input_len 
2463   1490             ; $input_buffer 
2464   1490             ; $output_buffer 
2465   1490 52 0F 00      sub sp, 15
2466   1493             ;; input_len = strlen(input); 
2467   1493 FA F9 FF      lea d, [bp + -7] ; $input_len
2468   1496 DA            push d
2469   1497 FA 05 00      lea d, [bp + 5] ; $input
2470   149A 2A            mov b, [d]
2471   149B FD AB         swp b
2472   149D D8            push b
2473   149E 07 DE 05      call strlen
2474   14A1 51 02 00      add sp, 2
2475   14A4 E7            pop d
2476   14A5 FD 43         mov [d], b
2477   14A7             ;; while (input_len--) { 
2478   14A7             _while33_cond:
2479   14A7 FA F9 FF      lea d, [bp + -7] ; $input_len
2480   14AA 2A            mov b, [d]
2481   14AB D8            push b
2482   14AC FD 7D         dec b
2483   14AE FA F9 FF      lea d, [bp + -7] ; $input_len
2484   14B1 FD 43         mov [d], b
2485   14B3 E5            pop b
2486   14B4 C0 00 00      cmp b, 0
2487   14B7 C6 6B 16      je _while33_exit
2488   14BA             _while33_block:
2489   14BA             ;; input_buffer[i++] = *(input++); 
2490   14BA FA F6 FF      lea d, [bp + -10] ; $input_buffer
2491   14BD D7            push a
2492   14BE DA            push d
2493   14BF FA FF FF      lea d, [bp + -1] ; $i
2494   14C2 2A            mov b, [d]
2495   14C3 D8            push b
2496   14C4 FD 77         inc b
2497   14C6 FA FF FF      lea d, [bp + -1] ; $i
2498   14C9 FD 43         mov [d], b
2499   14CB E5            pop b
2500   14CC E7            pop d
2501   14CD 5A            add d, b
2502   14CE E4            pop a
2503   14CF DA            push d
2504   14D0 FA 05 00      lea d, [bp + 5] ; $input
2505   14D3 2A            mov b, [d]
2506   14D4 D8            push b
2507   14D5 FD 77         inc b
2508   14D7 FA 05 00      lea d, [bp + 5] ; $input
2509   14DA FD 43         mov [d], b
2510   14DC E5            pop b
2511   14DD 74            mov d, b
2512   14DE 32            mov bl, [d]
2513   14DF A7 00         mov bh, 0
2514   14E1 E7            pop d
2515   14E2 FD 3E         mov [d], bl
2516   14E4             ;; if (i == 3) { 
2517   14E4             _if34_cond:
2518   14E4 FA FF FF      lea d, [bp + -1] ; $i
2519   14E7 2A            mov b, [d]
2520   14E8             ; START RELATIONAL
2521   14E8 D7            push a
2522   14E9 11            mov a, b
2523   14EA 26 03 00      mov b, $3
2524   14ED B0            cmp a, b
2525   14EE FD 71         seq ; ==
2526   14F0 E4            pop a
2527   14F1             ; END RELATIONAL
2528   14F1 C0 00 00      cmp b, 0
2529   14F4 C6 68 16      je _if34_exit
2530   14F7             _if34_true:
2531   14F7             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
2532   14F7 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2533   14FA D7            push a
2534   14FB DA            push d
2535   14FC 26 00 00      mov b, $0
2536   14FF E7            pop d
2537   1500 5A            add d, b
2538   1501 E4            pop a
2539   1502 DA            push d
2540   1503 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2541   1506 D7            push a
2542   1507 DA            push d
2543   1508 26 00 00      mov b, $0
2544   150B E7            pop d
2545   150C 5A            add d, b
2546   150D E4            pop a
2547   150E 32            mov bl, [d]
2548   150F A7 00         mov bh, 0
2549   1511 D7            push a
2550   1512 11            mov a, b
2551   1513 26 FC 00      mov b, $fc
2552   1516 86            and a, b ; &
2553   1517 27            mov b, a
2554   1518 E4            pop a
2555   1519             ; START SHIFT
2556   1519 D7            push a
2557   151A 11            mov a, b
2558   151B 26 02 00      mov b, $2
2559   151E FD 39         mov c, b
2560   1520 A5            ashr a, cl
2561   1521 27            mov b, a
2562   1522 E4            pop a
2563   1523             ; END SHIFT
2564   1523 E7            pop d
2565   1524 FD 3E         mov [d], bl
2566   1526             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
2567   1526 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2568   1529 D7            push a
2569   152A DA            push d
2570   152B 26 01 00      mov b, $1
2571   152E E7            pop d
2572   152F 5A            add d, b
2573   1530 E4            pop a
2574   1531 DA            push d
2575   1532 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2576   1535 D7            push a
2577   1536 DA            push d
2578   1537 26 00 00      mov b, $0
2579   153A E7            pop d
2580   153B 5A            add d, b
2581   153C E4            pop a
2582   153D 32            mov bl, [d]
2583   153E A7 00         mov bh, 0
2584   1540 D7            push a
2585   1541 11            mov a, b
2586   1542 26 03 00      mov b, $3
2587   1545 86            and a, b ; &
2588   1546 27            mov b, a
2589   1547 E4            pop a
2590   1548             ; START SHIFT
2591   1548 D7            push a
2592   1549 11            mov a, b
2593   154A 26 04 00      mov b, $4
2594   154D FD 39         mov c, b
2595   154F 9D            shl a, cl
2596   1550 27            mov b, a
2597   1551 E4            pop a
2598   1552             ; END SHIFT
2599   1552             ; START TERMS
2600   1552 D7            push a
2601   1553 11            mov a, b
2602   1554 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2603   1557 D7            push a
2604   1558 DA            push d
2605   1559 26 01 00      mov b, $1
2606   155C E7            pop d
2607   155D 5A            add d, b
2608   155E E4            pop a
2609   155F 32            mov bl, [d]
2610   1560 A7 00         mov bh, 0
2611   1562 D7            push a
2612   1563 11            mov a, b
2613   1564 26 F0 00      mov b, $f0
2614   1567 86            and a, b ; &
2615   1568 27            mov b, a
2616   1569 E4            pop a
2617   156A             ; START SHIFT
2618   156A D7            push a
2619   156B 11            mov a, b
2620   156C 26 04 00      mov b, $4
2621   156F FD 39         mov c, b
2622   1571 A5            ashr a, cl
2623   1572 27            mov b, a
2624   1573 E4            pop a
2625   1574             ; END SHIFT
2626   1574 56            add b, a
2627   1575 E4            pop a
2628   1576             ; END TERMS
2629   1576 E7            pop d
2630   1577 FD 3E         mov [d], bl
2631   1579             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
2632   1579 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2633   157C D7            push a
2634   157D DA            push d
2635   157E 26 02 00      mov b, $2
2636   1581 E7            pop d
2637   1582 5A            add d, b
2638   1583 E4            pop a
2639   1584 DA            push d
2640   1585 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2641   1588 D7            push a
2642   1589 DA            push d
2643   158A 26 01 00      mov b, $1
2644   158D E7            pop d
2645   158E 5A            add d, b
2646   158F E4            pop a
2647   1590 32            mov bl, [d]
2648   1591 A7 00         mov bh, 0
2649   1593 D7            push a
2650   1594 11            mov a, b
2651   1595 26 0F 00      mov b, $f
2652   1598 86            and a, b ; &
2653   1599 27            mov b, a
2654   159A E4            pop a
2655   159B             ; START SHIFT
2656   159B D7            push a
2657   159C 11            mov a, b
2658   159D 26 02 00      mov b, $2
2659   15A0 FD 39         mov c, b
2660   15A2 9D            shl a, cl
2661   15A3 27            mov b, a
2662   15A4 E4            pop a
2663   15A5             ; END SHIFT
2664   15A5             ; START TERMS
2665   15A5 D7            push a
2666   15A6 11            mov a, b
2667   15A7 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2668   15AA D7            push a
2669   15AB DA            push d
2670   15AC 26 02 00      mov b, $2
2671   15AF E7            pop d
2672   15B0 5A            add d, b
2673   15B1 E4            pop a
2674   15B2 32            mov bl, [d]
2675   15B3 A7 00         mov bh, 0
2676   15B5 D7            push a
2677   15B6 11            mov a, b
2678   15B7 26 C0 00      mov b, $c0
2679   15BA 86            and a, b ; &
2680   15BB 27            mov b, a
2681   15BC E4            pop a
2682   15BD             ; START SHIFT
2683   15BD D7            push a
2684   15BE 11            mov a, b
2685   15BF 26 06 00      mov b, $6
2686   15C2 FD 39         mov c, b
2687   15C4 A5            ashr a, cl
2688   15C5 27            mov b, a
2689   15C6 E4            pop a
2690   15C7             ; END SHIFT
2691   15C7 56            add b, a
2692   15C8 E4            pop a
2693   15C9             ; END TERMS
2694   15C9 E7            pop d
2695   15CA FD 3E         mov [d], bl
2696   15CC             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
2697   15CC FA F2 FF      lea d, [bp + -14] ; $output_buffer
2698   15CF D7            push a
2699   15D0 DA            push d
2700   15D1 26 03 00      mov b, $3
2701   15D4 E7            pop d
2702   15D5 5A            add d, b
2703   15D6 E4            pop a
2704   15D7 DA            push d
2705   15D8 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2706   15DB D7            push a
2707   15DC DA            push d
2708   15DD 26 02 00      mov b, $2
2709   15E0 E7            pop d
2710   15E1 5A            add d, b
2711   15E2 E4            pop a
2712   15E3 32            mov bl, [d]
2713   15E4 A7 00         mov bh, 0
2714   15E6 D7            push a
2715   15E7 11            mov a, b
2716   15E8 26 3F 00      mov b, $3f
2717   15EB 86            and a, b ; &
2718   15EC 27            mov b, a
2719   15ED E4            pop a
2720   15EE E7            pop d
2721   15EF FD 3E         mov [d], bl
2722   15F1             ;; for (i = 0; i < 4; i++) { 
2723   15F1             _for35_init:
2724   15F1 FA FF FF      lea d, [bp + -1] ; $i
2725   15F4 DA            push d
2726   15F5 26 00 00      mov b, $0
2727   15F8 E7            pop d
2728   15F9 FD 43         mov [d], b
2729   15FB             _for35_cond:
2730   15FB FA FF FF      lea d, [bp + -1] ; $i
2731   15FE 2A            mov b, [d]
2732   15FF             ; START RELATIONAL
2733   15FF D7            push a
2734   1600 11            mov a, b
2735   1601 26 04 00      mov b, $4
2736   1604 B0            cmp a, b
2737   1605 FD 73         slt ; <= (signed)
2738   1607 E4            pop a
2739   1608             ; END RELATIONAL
2740   1608 C0 00 00      cmp b, 0
2741   160B C6 5B 16      je _for35_exit
2742   160E             _for35_block:
2743   160E             ;; output[j++] = base64_table[output_buffer[i]]; 
2744   160E FA 07 00      lea d, [bp + 7] ; $output
2745   1611 FD 2A         mov d, [d]
2746   1613 D7            push a
2747   1614 DA            push d
2748   1615 FA FD FF      lea d, [bp + -3] ; $j
2749   1618 2A            mov b, [d]
2750   1619 D8            push b
2751   161A FD 77         inc b
2752   161C FA FD FF      lea d, [bp + -3] ; $j
2753   161F FD 43         mov [d], b
2754   1621 E5            pop b
2755   1622 E7            pop d
2756   1623 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2757   1627 E4            pop a
2758   1628 DA            push d
2759   1629 3B C4 1D      mov d, _base64_table ; $base64_table
2760   162C FD 2A         mov d, [d]
2761   162E D7            push a
2762   162F DA            push d
2763   1630 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2764   1633 D7            push a
2765   1634 DA            push d
2766   1635 FA FF FF      lea d, [bp + -1] ; $i
2767   1638 2A            mov b, [d]
2768   1639 E7            pop d
2769   163A 5A            add d, b
2770   163B E4            pop a
2771   163C 32            mov bl, [d]
2772   163D A7 00         mov bh, 0
2773   163F E7            pop d
2774   1640 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2775   1644 E4            pop a
2776   1645 32            mov bl, [d]
2777   1646 A7 00         mov bh, 0
2778   1648 E7            pop d
2779   1649 FD 3E         mov [d], bl
2780   164B             _for35_update:
2781   164B FA FF FF      lea d, [bp + -1] ; $i
2782   164E 2A            mov b, [d]
2783   164F D8            push b
2784   1650 FD 77         inc b
2785   1652 FA FF FF      lea d, [bp + -1] ; $i
2786   1655 FD 43         mov [d], b
2787   1657 E5            pop b
2788   1658 0A FB 15      jmp _for35_cond
2789   165B             _for35_exit:
2790   165B             ;; i = 0; 
2791   165B FA FF FF      lea d, [bp + -1] ; $i
2792   165E DA            push d
2793   165F 26 00 00      mov b, $0
2794   1662 E7            pop d
2795   1663 FD 43         mov [d], b
2796   1665 0A 68 16      jmp _if34_exit
2797   1668             _if34_exit:
2798   1668 0A A7 14      jmp _while33_cond
2799   166B             _while33_exit:
2800   166B             ;; if (i) { 
2801   166B             _if36_cond:
2802   166B FA FF FF      lea d, [bp + -1] ; $i
2803   166E 2A            mov b, [d]
2804   166F C0 00 00      cmp b, 0
2805   1672 C6 40 18      je _if36_exit
2806   1675             _if36_true:
2807   1675             ;; for (k = i; k < 3; k++) { 
2808   1675             _for37_init:
2809   1675 FA FB FF      lea d, [bp + -5] ; $k
2810   1678 DA            push d
2811   1679 FA FF FF      lea d, [bp + -1] ; $i
2812   167C 2A            mov b, [d]
2813   167D E7            pop d
2814   167E FD 43         mov [d], b
2815   1680             _for37_cond:
2816   1680 FA FB FF      lea d, [bp + -5] ; $k
2817   1683 2A            mov b, [d]
2818   1684             ; START RELATIONAL
2819   1684 D7            push a
2820   1685 11            mov a, b
2821   1686 26 03 00      mov b, $3
2822   1689 B0            cmp a, b
2823   168A FD 73         slt ; <= (signed)
2824   168C E4            pop a
2825   168D             ; END RELATIONAL
2826   168D C0 00 00      cmp b, 0
2827   1690 C6 B6 16      je _for37_exit
2828   1693             _for37_block:
2829   1693             ;; input_buffer[k] = '\0'; 
2830   1693 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2831   1696 D7            push a
2832   1697 DA            push d
2833   1698 FA FB FF      lea d, [bp + -5] ; $k
2834   169B 2A            mov b, [d]
2835   169C E7            pop d
2836   169D 5A            add d, b
2837   169E E4            pop a
2838   169F DA            push d
2839   16A0 26 00 00      mov b, $0
2840   16A3 E7            pop d
2841   16A4 FD 3E         mov [d], bl
2842   16A6             _for37_update:
2843   16A6 FA FB FF      lea d, [bp + -5] ; $k
2844   16A9 2A            mov b, [d]
2845   16AA D8            push b
2846   16AB FD 77         inc b
2847   16AD FA FB FF      lea d, [bp + -5] ; $k
2848   16B0 FD 43         mov [d], b
2849   16B2 E5            pop b
2850   16B3 0A 80 16      jmp _for37_cond
2851   16B6             _for37_exit:
2852   16B6             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
2853   16B6 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2854   16B9 D7            push a
2855   16BA DA            push d
2856   16BB 26 00 00      mov b, $0
2857   16BE E7            pop d
2858   16BF 5A            add d, b
2859   16C0 E4            pop a
2860   16C1 DA            push d
2861   16C2 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2862   16C5 D7            push a
2863   16C6 DA            push d
2864   16C7 26 00 00      mov b, $0
2865   16CA E7            pop d
2866   16CB 5A            add d, b
2867   16CC E4            pop a
2868   16CD 32            mov bl, [d]
2869   16CE A7 00         mov bh, 0
2870   16D0 D7            push a
2871   16D1 11            mov a, b
2872   16D2 26 FC 00      mov b, $fc
2873   16D5 86            and a, b ; &
2874   16D6 27            mov b, a
2875   16D7 E4            pop a
2876   16D8             ; START SHIFT
2877   16D8 D7            push a
2878   16D9 11            mov a, b
2879   16DA 26 02 00      mov b, $2
2880   16DD FD 39         mov c, b
2881   16DF A5            ashr a, cl
2882   16E0 27            mov b, a
2883   16E1 E4            pop a
2884   16E2             ; END SHIFT
2885   16E2 E7            pop d
2886   16E3 FD 3E         mov [d], bl
2887   16E5             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
2888   16E5 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2889   16E8 D7            push a
2890   16E9 DA            push d
2891   16EA 26 01 00      mov b, $1
2892   16ED E7            pop d
2893   16EE 5A            add d, b
2894   16EF E4            pop a
2895   16F0 DA            push d
2896   16F1 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2897   16F4 D7            push a
2898   16F5 DA            push d
2899   16F6 26 00 00      mov b, $0
2900   16F9 E7            pop d
2901   16FA 5A            add d, b
2902   16FB E4            pop a
2903   16FC 32            mov bl, [d]
2904   16FD A7 00         mov bh, 0
2905   16FF D7            push a
2906   1700 11            mov a, b
2907   1701 26 03 00      mov b, $3
2908   1704 86            and a, b ; &
2909   1705 27            mov b, a
2910   1706 E4            pop a
2911   1707             ; START SHIFT
2912   1707 D7            push a
2913   1708 11            mov a, b
2914   1709 26 04 00      mov b, $4
2915   170C FD 39         mov c, b
2916   170E 9D            shl a, cl
2917   170F 27            mov b, a
2918   1710 E4            pop a
2919   1711             ; END SHIFT
2920   1711             ; START TERMS
2921   1711 D7            push a
2922   1712 11            mov a, b
2923   1713 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2924   1716 D7            push a
2925   1717 DA            push d
2926   1718 26 01 00      mov b, $1
2927   171B E7            pop d
2928   171C 5A            add d, b
2929   171D E4            pop a
2930   171E 32            mov bl, [d]
2931   171F A7 00         mov bh, 0
2932   1721 D7            push a
2933   1722 11            mov a, b
2934   1723 26 F0 00      mov b, $f0
2935   1726 86            and a, b ; &
2936   1727 27            mov b, a
2937   1728 E4            pop a
2938   1729             ; START SHIFT
2939   1729 D7            push a
2940   172A 11            mov a, b
2941   172B 26 04 00      mov b, $4
2942   172E FD 39         mov c, b
2943   1730 A5            ashr a, cl
2944   1731 27            mov b, a
2945   1732 E4            pop a
2946   1733             ; END SHIFT
2947   1733 56            add b, a
2948   1734 E4            pop a
2949   1735             ; END TERMS
2950   1735 E7            pop d
2951   1736 FD 3E         mov [d], bl
2952   1738             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
2953   1738 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2954   173B D7            push a
2955   173C DA            push d
2956   173D 26 02 00      mov b, $2
2957   1740 E7            pop d
2958   1741 5A            add d, b
2959   1742 E4            pop a
2960   1743 DA            push d
2961   1744 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2962   1747 D7            push a
2963   1748 DA            push d
2964   1749 26 01 00      mov b, $1
2965   174C E7            pop d
2966   174D 5A            add d, b
2967   174E E4            pop a
2968   174F 32            mov bl, [d]
2969   1750 A7 00         mov bh, 0
2970   1752 D7            push a
2971   1753 11            mov a, b
2972   1754 26 0F 00      mov b, $f
2973   1757 86            and a, b ; &
2974   1758 27            mov b, a
2975   1759 E4            pop a
2976   175A             ; START SHIFT
2977   175A D7            push a
2978   175B 11            mov a, b
2979   175C 26 02 00      mov b, $2
2980   175F FD 39         mov c, b
2981   1761 9D            shl a, cl
2982   1762 27            mov b, a
2983   1763 E4            pop a
2984   1764             ; END SHIFT
2985   1764             ; START TERMS
2986   1764 D7            push a
2987   1765 11            mov a, b
2988   1766 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2989   1769 D7            push a
2990   176A DA            push d
2991   176B 26 02 00      mov b, $2
2992   176E E7            pop d
2993   176F 5A            add d, b
2994   1770 E4            pop a
2995   1771 32            mov bl, [d]
2996   1772 A7 00         mov bh, 0
2997   1774 D7            push a
2998   1775 11            mov a, b
2999   1776 26 C0 00      mov b, $c0
3000   1779 86            and a, b ; &
3001   177A 27            mov b, a
3002   177B E4            pop a
3003   177C             ; START SHIFT
3004   177C D7            push a
3005   177D 11            mov a, b
3006   177E 26 06 00      mov b, $6
3007   1781 FD 39         mov c, b
3008   1783 A5            ashr a, cl
3009   1784 27            mov b, a
3010   1785 E4            pop a
3011   1786             ; END SHIFT
3012   1786 56            add b, a
3013   1787 E4            pop a
3014   1788             ; END TERMS
3015   1788 E7            pop d
3016   1789 FD 3E         mov [d], bl
3017   178B             ;; for (k = 0; k < i + 1; k++) { 
3018   178B             _for38_init:
3019   178B FA FB FF      lea d, [bp + -5] ; $k
3020   178E DA            push d
3021   178F 26 00 00      mov b, $0
3022   1792 E7            pop d
3023   1793 FD 43         mov [d], b
3024   1795             _for38_cond:
3025   1795 FA FB FF      lea d, [bp + -5] ; $k
3026   1798 2A            mov b, [d]
3027   1799             ; START RELATIONAL
3028   1799 D7            push a
3029   179A 11            mov a, b
3030   179B FA FF FF      lea d, [bp + -1] ; $i
3031   179E 2A            mov b, [d]
3032   179F             ; START TERMS
3033   179F D7            push a
3034   17A0 11            mov a, b
3035   17A1 26 01 00      mov b, $1
3036   17A4 56            add b, a
3037   17A5 E4            pop a
3038   17A6             ; END TERMS
3039   17A6 B0            cmp a, b
3040   17A7 FD 73         slt ; <= (signed)
3041   17A9 E4            pop a
3042   17AA             ; END RELATIONAL
3043   17AA C0 00 00      cmp b, 0
3044   17AD C6 FD 17      je _for38_exit
3045   17B0             _for38_block:
3046   17B0             ;; output[j++] = base64_table[output_buffer[k]]; 
3047   17B0 FA 07 00      lea d, [bp + 7] ; $output
3048   17B3 FD 2A         mov d, [d]
3049   17B5 D7            push a
3050   17B6 DA            push d
3051   17B7 FA FD FF      lea d, [bp + -3] ; $j
3052   17BA 2A            mov b, [d]
3053   17BB D8            push b
3054   17BC FD 77         inc b
3055   17BE FA FD FF      lea d, [bp + -3] ; $j
3056   17C1 FD 43         mov [d], b
3057   17C3 E5            pop b
3058   17C4 E7            pop d
3059   17C5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3060   17C9 E4            pop a
3061   17CA DA            push d
3062   17CB 3B C4 1D      mov d, _base64_table ; $base64_table
3063   17CE FD 2A         mov d, [d]
3064   17D0 D7            push a
3065   17D1 DA            push d
3066   17D2 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3067   17D5 D7            push a
3068   17D6 DA            push d
3069   17D7 FA FB FF      lea d, [bp + -5] ; $k
3070   17DA 2A            mov b, [d]
3071   17DB E7            pop d
3072   17DC 5A            add d, b
3073   17DD E4            pop a
3074   17DE 32            mov bl, [d]
3075   17DF A7 00         mov bh, 0
3076   17E1 E7            pop d
3077   17E2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3078   17E6 E4            pop a
3079   17E7 32            mov bl, [d]
3080   17E8 A7 00         mov bh, 0
3081   17EA E7            pop d
3082   17EB FD 3E         mov [d], bl
3083   17ED             _for38_update:
3084   17ED FA FB FF      lea d, [bp + -5] ; $k
3085   17F0 2A            mov b, [d]
3086   17F1 D8            push b
3087   17F2 FD 77         inc b
3088   17F4 FA FB FF      lea d, [bp + -5] ; $k
3089   17F7 FD 43         mov [d], b
3090   17F9 E5            pop b
3091   17FA 0A 95 17      jmp _for38_cond
3092   17FD             _for38_exit:
3093   17FD             ;; while (i++ < 3) { 
3094   17FD             _while39_cond:
3095   17FD FA FF FF      lea d, [bp + -1] ; $i
3096   1800 2A            mov b, [d]
3097   1801 D8            push b
3098   1802 FD 77         inc b
3099   1804 FA FF FF      lea d, [bp + -1] ; $i
3100   1807 FD 43         mov [d], b
3101   1809 E5            pop b
3102   180A             ; START RELATIONAL
3103   180A D7            push a
3104   180B 11            mov a, b
3105   180C 26 03 00      mov b, $3
3106   180F B0            cmp a, b
3107   1810 FD 73         slt ; <= (signed)
3108   1812 E4            pop a
3109   1813             ; END RELATIONAL
3110   1813 C0 00 00      cmp b, 0
3111   1816 C6 3D 18      je _while39_exit
3112   1819             _while39_block:
3113   1819             ;; output[j++] = '='; 
3114   1819 FA 07 00      lea d, [bp + 7] ; $output
3115   181C FD 2A         mov d, [d]
3116   181E D7            push a
3117   181F DA            push d
3118   1820 FA FD FF      lea d, [bp + -3] ; $j
3119   1823 2A            mov b, [d]
3120   1824 D8            push b
3121   1825 FD 77         inc b
3122   1827 FA FD FF      lea d, [bp + -3] ; $j
3123   182A FD 43         mov [d], b
3124   182C E5            pop b
3125   182D E7            pop d
3126   182E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3127   1832 E4            pop a
3128   1833 DA            push d
3129   1834 26 3D 00      mov b, $3d
3130   1837 E7            pop d
3131   1838 FD 3E         mov [d], bl
3132   183A 0A FD 17      jmp _while39_cond
3133   183D             _while39_exit:
3134   183D 0A 40 18      jmp _if36_exit
3135   1840             _if36_exit:
3136   1840             ;; output[j] = '\0'; 
3137   1840 FA 07 00      lea d, [bp + 7] ; $output
3138   1843 FD 2A         mov d, [d]
3139   1845 D7            push a
3140   1846 DA            push d
3141   1847 FA FD FF      lea d, [bp + -3] ; $j
3142   184A 2A            mov b, [d]
3143   184B E7            pop d
3144   184C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3145   1850 E4            pop a
3146   1851 DA            push d
3147   1852 26 00 00      mov b, $0
3148   1855 E7            pop d
3149   1856 FD 3E         mov [d], bl
3150   1858 F9            leave
3151   1859 09            ret
3152   185A             
3153   185A             base64_char_value:
3154   185A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3155   185D             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
3156   185D             _if40_cond:
3157   185D FA 05 00      lea d, [bp + 5] ; $c
3158   1860 32            mov bl, [d]
3159   1861 A7 00         mov bh, 0
3160   1863             ; START RELATIONAL
3161   1863 D7            push a
3162   1864 11            mov a, b
3163   1865 26 41 00      mov b, $41
3164   1868 B0            cmp a, b
3165   1869 FD 80         sge ; >=
3166   186B E4            pop a
3167   186C             ; END RELATIONAL
3168   186C D7            push a
3169   186D 11            mov a, b
3170   186E FA 05 00      lea d, [bp + 5] ; $c
3171   1871 32            mov bl, [d]
3172   1872 A7 00         mov bh, 0
3173   1874             ; START RELATIONAL
3174   1874 D7            push a
3175   1875 11            mov a, b
3176   1876 26 5A 00      mov b, $5a
3177   1879 B0            cmp a, b
3178   187A FD 74         sle ; <=
3179   187C E4            pop a
3180   187D             ; END RELATIONAL
3181   187D FD A7         sand a, b ; &&
3182   187F E4            pop a
3183   1880 C0 00 00      cmp b, 0
3184   1883 C6 99 18      je _if40_exit
3185   1886             _if40_true:
3186   1886             ;; return c - 'A'; 
3187   1886 FA 05 00      lea d, [bp + 5] ; $c
3188   1889 32            mov bl, [d]
3189   188A A7 00         mov bh, 0
3190   188C             ; START TERMS
3191   188C D7            push a
3192   188D 11            mov a, b
3193   188E 26 41 00      mov b, $41
3194   1891 60            sub a, b
3195   1892 27            mov b, a
3196   1893 E4            pop a
3197   1894             ; END TERMS
3198   1894 F9            leave
3199   1895 09            ret
3200   1896 0A 99 18      jmp _if40_exit
3201   1899             _if40_exit:
3202   1899             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
3203   1899             _if41_cond:
3204   1899 FA 05 00      lea d, [bp + 5] ; $c
3205   189C 32            mov bl, [d]
3206   189D A7 00         mov bh, 0
3207   189F             ; START RELATIONAL
3208   189F D7            push a
3209   18A0 11            mov a, b
3210   18A1 26 61 00      mov b, $61
3211   18A4 B0            cmp a, b
3212   18A5 FD 80         sge ; >=
3213   18A7 E4            pop a
3214   18A8             ; END RELATIONAL
3215   18A8 D7            push a
3216   18A9 11            mov a, b
3217   18AA FA 05 00      lea d, [bp + 5] ; $c
3218   18AD 32            mov bl, [d]
3219   18AE A7 00         mov bh, 0
3220   18B0             ; START RELATIONAL
3221   18B0 D7            push a
3222   18B1 11            mov a, b
3223   18B2 26 7A 00      mov b, $7a
3224   18B5 B0            cmp a, b
3225   18B6 FD 74         sle ; <=
3226   18B8 E4            pop a
3227   18B9             ; END RELATIONAL
3228   18B9 FD A7         sand a, b ; &&
3229   18BB E4            pop a
3230   18BC C0 00 00      cmp b, 0
3231   18BF C6 DA 18      je _if41_exit
3232   18C2             _if41_true:
3233   18C2             ;; return c - 'a' + 26; 
3234   18C2 FA 05 00      lea d, [bp + 5] ; $c
3235   18C5 32            mov bl, [d]
3236   18C6 A7 00         mov bh, 0
3237   18C8             ; START TERMS
3238   18C8 D7            push a
3239   18C9 11            mov a, b
3240   18CA 26 61 00      mov b, $61
3241   18CD 60            sub a, b
3242   18CE 27            mov b, a
3243   18CF 11            mov a, b
3244   18D0 26 1A 00      mov b, $1a
3245   18D3 56            add b, a
3246   18D4 E4            pop a
3247   18D5             ; END TERMS
3248   18D5 F9            leave
3249   18D6 09            ret
3250   18D7 0A DA 18      jmp _if41_exit
3251   18DA             _if41_exit:
3252   18DA             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
3253   18DA             _if42_cond:
3254   18DA FA 05 00      lea d, [bp + 5] ; $c
3255   18DD 32            mov bl, [d]
3256   18DE A7 00         mov bh, 0
3257   18E0             ; START RELATIONAL
3258   18E0 D7            push a
3259   18E1 11            mov a, b
3260   18E2 26 30 00      mov b, $30
3261   18E5 B0            cmp a, b
3262   18E6 FD 80         sge ; >=
3263   18E8 E4            pop a
3264   18E9             ; END RELATIONAL
3265   18E9 D7            push a
3266   18EA 11            mov a, b
3267   18EB FA 05 00      lea d, [bp + 5] ; $c
3268   18EE 32            mov bl, [d]
3269   18EF A7 00         mov bh, 0
3270   18F1             ; START RELATIONAL
3271   18F1 D7            push a
3272   18F2 11            mov a, b
3273   18F3 26 39 00      mov b, $39
3274   18F6 B0            cmp a, b
3275   18F7 FD 74         sle ; <=
3276   18F9 E4            pop a
3277   18FA             ; END RELATIONAL
3278   18FA FD A7         sand a, b ; &&
3279   18FC E4            pop a
3280   18FD C0 00 00      cmp b, 0
3281   1900 C6 1B 19      je _if42_exit
3282   1903             _if42_true:
3283   1903             ;; return c - '0' + 52; 
3284   1903 FA 05 00      lea d, [bp + 5] ; $c
3285   1906 32            mov bl, [d]
3286   1907 A7 00         mov bh, 0
3287   1909             ; START TERMS
3288   1909 D7            push a
3289   190A 11            mov a, b
3290   190B 26 30 00      mov b, $30
3291   190E 60            sub a, b
3292   190F 27            mov b, a
3293   1910 11            mov a, b
3294   1911 26 34 00      mov b, $34
3295   1914 56            add b, a
3296   1915 E4            pop a
3297   1916             ; END TERMS
3298   1916 F9            leave
3299   1917 09            ret
3300   1918 0A 1B 19      jmp _if42_exit
3301   191B             _if42_exit:
3302   191B             ;; if (c == '+') return 62; 
3303   191B             _if43_cond:
3304   191B FA 05 00      lea d, [bp + 5] ; $c
3305   191E 32            mov bl, [d]
3306   191F A7 00         mov bh, 0
3307   1921             ; START RELATIONAL
3308   1921 D7            push a
3309   1922 11            mov a, b
3310   1923 26 2B 00      mov b, $2b
3311   1926 B0            cmp a, b
3312   1927 FD 71         seq ; ==
3313   1929 E4            pop a
3314   192A             ; END RELATIONAL
3315   192A C0 00 00      cmp b, 0
3316   192D C6 38 19      je _if43_exit
3317   1930             _if43_true:
3318   1930             ;; return 62; 
3319   1930 26 3E 00      mov b, $3e
3320   1933 F9            leave
3321   1934 09            ret
3322   1935 0A 38 19      jmp _if43_exit
3323   1938             _if43_exit:
3324   1938             ;; if (c == '/') return 63; 
3325   1938             _if44_cond:
3326   1938 FA 05 00      lea d, [bp + 5] ; $c
3327   193B 32            mov bl, [d]
3328   193C A7 00         mov bh, 0
3329   193E             ; START RELATIONAL
3330   193E D7            push a
3331   193F 11            mov a, b
3332   1940 26 2F 00      mov b, $2f
3333   1943 B0            cmp a, b
3334   1944 FD 71         seq ; ==
3335   1946 E4            pop a
3336   1947             ; END RELATIONAL
3337   1947 C0 00 00      cmp b, 0
3338   194A C6 55 19      je _if44_exit
3339   194D             _if44_true:
3340   194D             ;; return 63; 
3341   194D 26 3F 00      mov b, $3f
3342   1950 F9            leave
3343   1951 09            ret
3344   1952 0A 55 19      jmp _if44_exit
3345   1955             _if44_exit:
3346   1955             ;; return -1; 
3347   1955 26 FF FF      mov b, $ffff
3348   1958 F9            leave
3349   1959 09            ret
3350   195A             
3351   195A             base64_decode:
3352   195A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3353   195D             ; $i 
3354   195D 10 00 00      mov a, $0
3355   1960 45 FF FF      mov [bp + -1], a
3356   1963             ; $j 
3357   1963 10 00 00      mov a, $0
3358   1966 45 FD FF      mov [bp + -3], a
3359   1969             ; $k 
3360   1969 10 00 00      mov a, $0
3361   196C 45 FB FF      mov [bp + -5], a
3362   196F             ; $input_len 
3363   196F             ; $input_buffer 
3364   196F             ; $output_buffer 
3365   196F 52 0F 00      sub sp, 15
3366   1972             ;; input_len = strlen(input); 
3367   1972 FA F9 FF      lea d, [bp + -7] ; $input_len
3368   1975 DA            push d
3369   1976 FA 05 00      lea d, [bp + 5] ; $input
3370   1979 2A            mov b, [d]
3371   197A FD AB         swp b
3372   197C D8            push b
3373   197D 07 DE 05      call strlen
3374   1980 51 02 00      add sp, 2
3375   1983 E7            pop d
3376   1984 FD 43         mov [d], b
3377   1986             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
3378   1986             _while45_cond:
3379   1986 FA F9 FF      lea d, [bp + -7] ; $input_len
3380   1989 2A            mov b, [d]
3381   198A D8            push b
3382   198B FD 7D         dec b
3383   198D FA F9 FF      lea d, [bp + -7] ; $input_len
3384   1990 FD 43         mov [d], b
3385   1992 E5            pop b
3386   1993 D7            push a
3387   1994 11            mov a, b
3388   1995 FA 05 00      lea d, [bp + 5] ; $input
3389   1998 FD 2A         mov d, [d]
3390   199A D7            push a
3391   199B DA            push d
3392   199C FA FB FF      lea d, [bp + -5] ; $k
3393   199F 2A            mov b, [d]
3394   19A0 E7            pop d
3395   19A1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3396   19A5 E4            pop a
3397   19A6 32            mov bl, [d]
3398   19A7 A7 00         mov bh, 0
3399   19A9             ; START RELATIONAL
3400   19A9 D7            push a
3401   19AA 11            mov a, b
3402   19AB 26 3D 00      mov b, $3d
3403   19AE B0            cmp a, b
3404   19AF FD 72         sneq ; !=
3405   19B1 E4            pop a
3406   19B2             ; END RELATIONAL
3407   19B2 FD A7         sand a, b ; &&
3408   19B4 11            mov a, b
3409   19B5 FA 05 00      lea d, [bp + 5] ; $input
3410   19B8 FD 2A         mov d, [d]
3411   19BA D7            push a
3412   19BB DA            push d
3413   19BC FA FB FF      lea d, [bp + -5] ; $k
3414   19BF 2A            mov b, [d]
3415   19C0 E7            pop d
3416   19C1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3417   19C5 E4            pop a
3418   19C6 32            mov bl, [d]
3419   19C7 A7 00         mov bh, 0
3420   19C9 DD            push bl
3421   19CA 07 5A 18      call base64_char_value
3422   19CD 51 01 00      add sp, 1
3423   19D0             ; START RELATIONAL
3424   19D0 D7            push a
3425   19D1 11            mov a, b
3426   19D2 26 FF FF      mov b, $ffff
3427   19D5 B0            cmp a, b
3428   19D6 FD 72         sneq ; !=
3429   19D8 E4            pop a
3430   19D9             ; END RELATIONAL
3431   19D9 FD A7         sand a, b ; &&
3432   19DB E4            pop a
3433   19DC C0 00 00      cmp b, 0
3434   19DF C6 C7 1B      je _while45_exit
3435   19E2             _while45_block:
3436   19E2             ;; input_buffer[i++] = input[k++]; 
3437   19E2 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3438   19E5 D7            push a
3439   19E6 DA            push d
3440   19E7 FA FF FF      lea d, [bp + -1] ; $i
3441   19EA 2A            mov b, [d]
3442   19EB D8            push b
3443   19EC FD 77         inc b
3444   19EE FA FF FF      lea d, [bp + -1] ; $i
3445   19F1 FD 43         mov [d], b
3446   19F3 E5            pop b
3447   19F4 E7            pop d
3448   19F5 5A            add d, b
3449   19F6 E4            pop a
3450   19F7 DA            push d
3451   19F8 FA 05 00      lea d, [bp + 5] ; $input
3452   19FB FD 2A         mov d, [d]
3453   19FD D7            push a
3454   19FE DA            push d
3455   19FF FA FB FF      lea d, [bp + -5] ; $k
3456   1A02 2A            mov b, [d]
3457   1A03 D8            push b
3458   1A04 FD 77         inc b
3459   1A06 FA FB FF      lea d, [bp + -5] ; $k
3460   1A09 FD 43         mov [d], b
3461   1A0B E5            pop b
3462   1A0C E7            pop d
3463   1A0D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3464   1A11 E4            pop a
3465   1A12 32            mov bl, [d]
3466   1A13 A7 00         mov bh, 0
3467   1A15 E7            pop d
3468   1A16 FD 3E         mov [d], bl
3469   1A18             ;; if (i == 4) { 
3470   1A18             _if46_cond:
3471   1A18 FA FF FF      lea d, [bp + -1] ; $i
3472   1A1B 2A            mov b, [d]
3473   1A1C             ; START RELATIONAL
3474   1A1C D7            push a
3475   1A1D 11            mov a, b
3476   1A1E 26 04 00      mov b, $4
3477   1A21 B0            cmp a, b
3478   1A22 FD 71         seq ; ==
3479   1A24 E4            pop a
3480   1A25             ; END RELATIONAL
3481   1A25 C0 00 00      cmp b, 0
3482   1A28 C6 C4 1B      je _if46_exit
3483   1A2B             _if46_true:
3484   1A2B             ;; for (i = 0; i < 4; i++) { 
3485   1A2B             _for47_init:
3486   1A2B FA FF FF      lea d, [bp + -1] ; $i
3487   1A2E DA            push d
3488   1A2F 26 00 00      mov b, $0
3489   1A32 E7            pop d
3490   1A33 FD 43         mov [d], b
3491   1A35             _for47_cond:
3492   1A35 FA FF FF      lea d, [bp + -1] ; $i
3493   1A38 2A            mov b, [d]
3494   1A39             ; START RELATIONAL
3495   1A39 D7            push a
3496   1A3A 11            mov a, b
3497   1A3B 26 04 00      mov b, $4
3498   1A3E B0            cmp a, b
3499   1A3F FD 73         slt ; <= (signed)
3500   1A41 E4            pop a
3501   1A42             ; END RELATIONAL
3502   1A42 C0 00 00      cmp b, 0
3503   1A45 C6 7E 1A      je _for47_exit
3504   1A48             _for47_block:
3505   1A48             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
3506   1A48 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3507   1A4B D7            push a
3508   1A4C DA            push d
3509   1A4D FA FF FF      lea d, [bp + -1] ; $i
3510   1A50 2A            mov b, [d]
3511   1A51 E7            pop d
3512   1A52 5A            add d, b
3513   1A53 E4            pop a
3514   1A54 DA            push d
3515   1A55 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3516   1A58 D7            push a
3517   1A59 DA            push d
3518   1A5A FA FF FF      lea d, [bp + -1] ; $i
3519   1A5D 2A            mov b, [d]
3520   1A5E E7            pop d
3521   1A5F 5A            add d, b
3522   1A60 E4            pop a
3523   1A61 32            mov bl, [d]
3524   1A62 A7 00         mov bh, 0
3525   1A64 DD            push bl
3526   1A65 07 5A 18      call base64_char_value
3527   1A68 51 01 00      add sp, 1
3528   1A6B E7            pop d
3529   1A6C FD 3E         mov [d], bl
3530   1A6E             _for47_update:
3531   1A6E FA FF FF      lea d, [bp + -1] ; $i
3532   1A71 2A            mov b, [d]
3533   1A72 D8            push b
3534   1A73 FD 77         inc b
3535   1A75 FA FF FF      lea d, [bp + -1] ; $i
3536   1A78 FD 43         mov [d], b
3537   1A7A E5            pop b
3538   1A7B 0A 35 1A      jmp _for47_cond
3539   1A7E             _for47_exit:
3540   1A7E             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
3541   1A7E FA F2 FF      lea d, [bp + -14] ; $output_buffer
3542   1A81 D7            push a
3543   1A82 DA            push d
3544   1A83 26 00 00      mov b, $0
3545   1A86 E7            pop d
3546   1A87 5A            add d, b
3547   1A88 E4            pop a
3548   1A89 DA            push d
3549   1A8A FA F5 FF      lea d, [bp + -11] ; $input_buffer
3550   1A8D D7            push a
3551   1A8E DA            push d
3552   1A8F 26 00 00      mov b, $0
3553   1A92 E7            pop d
3554   1A93 5A            add d, b
3555   1A94 E4            pop a
3556   1A95 32            mov bl, [d]
3557   1A96 A7 00         mov bh, 0
3558   1A98             ; START SHIFT
3559   1A98 D7            push a
3560   1A99 11            mov a, b
3561   1A9A 26 02 00      mov b, $2
3562   1A9D FD 39         mov c, b
3563   1A9F 9D            shl a, cl
3564   1AA0 27            mov b, a
3565   1AA1 E4            pop a
3566   1AA2             ; END SHIFT
3567   1AA2             ; START TERMS
3568   1AA2 D7            push a
3569   1AA3 11            mov a, b
3570   1AA4 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3571   1AA7 D7            push a
3572   1AA8 DA            push d
3573   1AA9 26 01 00      mov b, $1
3574   1AAC E7            pop d
3575   1AAD 5A            add d, b
3576   1AAE E4            pop a
3577   1AAF 32            mov bl, [d]
3578   1AB0 A7 00         mov bh, 0
3579   1AB2 D7            push a
3580   1AB3 11            mov a, b
3581   1AB4 26 30 00      mov b, $30
3582   1AB7 86            and a, b ; &
3583   1AB8 27            mov b, a
3584   1AB9 E4            pop a
3585   1ABA             ; START SHIFT
3586   1ABA D7            push a
3587   1ABB 11            mov a, b
3588   1ABC 26 04 00      mov b, $4
3589   1ABF FD 39         mov c, b
3590   1AC1 A5            ashr a, cl
3591   1AC2 27            mov b, a
3592   1AC3 E4            pop a
3593   1AC4             ; END SHIFT
3594   1AC4 56            add b, a
3595   1AC5 E4            pop a
3596   1AC6             ; END TERMS
3597   1AC6 E7            pop d
3598   1AC7 FD 3E         mov [d], bl
3599   1AC9             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
3600   1AC9 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3601   1ACC D7            push a
3602   1ACD DA            push d
3603   1ACE 26 01 00      mov b, $1
3604   1AD1 E7            pop d
3605   1AD2 5A            add d, b
3606   1AD3 E4            pop a
3607   1AD4 DA            push d
3608   1AD5 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3609   1AD8 D7            push a
3610   1AD9 DA            push d
3611   1ADA 26 01 00      mov b, $1
3612   1ADD E7            pop d
3613   1ADE 5A            add d, b
3614   1ADF E4            pop a
3615   1AE0 32            mov bl, [d]
3616   1AE1 A7 00         mov bh, 0
3617   1AE3 D7            push a
3618   1AE4 11            mov a, b
3619   1AE5 26 0F 00      mov b, $f
3620   1AE8 86            and a, b ; &
3621   1AE9 27            mov b, a
3622   1AEA E4            pop a
3623   1AEB             ; START SHIFT
3624   1AEB D7            push a
3625   1AEC 11            mov a, b
3626   1AED 26 04 00      mov b, $4
3627   1AF0 FD 39         mov c, b
3628   1AF2 9D            shl a, cl
3629   1AF3 27            mov b, a
3630   1AF4 E4            pop a
3631   1AF5             ; END SHIFT
3632   1AF5             ; START TERMS
3633   1AF5 D7            push a
3634   1AF6 11            mov a, b
3635   1AF7 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3636   1AFA D7            push a
3637   1AFB DA            push d
3638   1AFC 26 02 00      mov b, $2
3639   1AFF E7            pop d
3640   1B00 5A            add d, b
3641   1B01 E4            pop a
3642   1B02 32            mov bl, [d]
3643   1B03 A7 00         mov bh, 0
3644   1B05 D7            push a
3645   1B06 11            mov a, b
3646   1B07 26 3C 00      mov b, $3c
3647   1B0A 86            and a, b ; &
3648   1B0B 27            mov b, a
3649   1B0C E4            pop a
3650   1B0D             ; START SHIFT
3651   1B0D D7            push a
3652   1B0E 11            mov a, b
3653   1B0F 26 02 00      mov b, $2
3654   1B12 FD 39         mov c, b
3655   1B14 A5            ashr a, cl
3656   1B15 27            mov b, a
3657   1B16 E4            pop a
3658   1B17             ; END SHIFT
3659   1B17 56            add b, a
3660   1B18 E4            pop a
3661   1B19             ; END TERMS
3662   1B19 E7            pop d
3663   1B1A FD 3E         mov [d], bl
3664   1B1C             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
3665   1B1C FA F2 FF      lea d, [bp + -14] ; $output_buffer
3666   1B1F D7            push a
3667   1B20 DA            push d
3668   1B21 26 02 00      mov b, $2
3669   1B24 E7            pop d
3670   1B25 5A            add d, b
3671   1B26 E4            pop a
3672   1B27 DA            push d
3673   1B28 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3674   1B2B D7            push a
3675   1B2C DA            push d
3676   1B2D 26 02 00      mov b, $2
3677   1B30 E7            pop d
3678   1B31 5A            add d, b
3679   1B32 E4            pop a
3680   1B33 32            mov bl, [d]
3681   1B34 A7 00         mov bh, 0
3682   1B36 D7            push a
3683   1B37 11            mov a, b
3684   1B38 26 03 00      mov b, $3
3685   1B3B 86            and a, b ; &
3686   1B3C 27            mov b, a
3687   1B3D E4            pop a
3688   1B3E             ; START SHIFT
3689   1B3E D7            push a
3690   1B3F 11            mov a, b
3691   1B40 26 06 00      mov b, $6
3692   1B43 FD 39         mov c, b
3693   1B45 9D            shl a, cl
3694   1B46 27            mov b, a
3695   1B47 E4            pop a
3696   1B48             ; END SHIFT
3697   1B48             ; START TERMS
3698   1B48 D7            push a
3699   1B49 11            mov a, b
3700   1B4A FA F5 FF      lea d, [bp + -11] ; $input_buffer
3701   1B4D D7            push a
3702   1B4E DA            push d
3703   1B4F 26 03 00      mov b, $3
3704   1B52 E7            pop d
3705   1B53 5A            add d, b
3706   1B54 E4            pop a
3707   1B55 32            mov bl, [d]
3708   1B56 A7 00         mov bh, 0
3709   1B58 56            add b, a
3710   1B59 E4            pop a
3711   1B5A             ; END TERMS
3712   1B5A E7            pop d
3713   1B5B FD 3E         mov [d], bl
3714   1B5D             ;; for (i = 0; i < 3; i++) { 
3715   1B5D             _for48_init:
3716   1B5D FA FF FF      lea d, [bp + -1] ; $i
3717   1B60 DA            push d
3718   1B61 26 00 00      mov b, $0
3719   1B64 E7            pop d
3720   1B65 FD 43         mov [d], b
3721   1B67             _for48_cond:
3722   1B67 FA FF FF      lea d, [bp + -1] ; $i
3723   1B6A 2A            mov b, [d]
3724   1B6B             ; START RELATIONAL
3725   1B6B D7            push a
3726   1B6C 11            mov a, b
3727   1B6D 26 03 00      mov b, $3
3728   1B70 B0            cmp a, b
3729   1B71 FD 73         slt ; <= (signed)
3730   1B73 E4            pop a
3731   1B74             ; END RELATIONAL
3732   1B74 C0 00 00      cmp b, 0
3733   1B77 C6 B7 1B      je _for48_exit
3734   1B7A             _for48_block:
3735   1B7A             ;; output[j++] = output_buffer[i]; 
3736   1B7A FA 07 00      lea d, [bp + 7] ; $output
3737   1B7D FD 2A         mov d, [d]
3738   1B7F D7            push a
3739   1B80 DA            push d
3740   1B81 FA FD FF      lea d, [bp + -3] ; $j
3741   1B84 2A            mov b, [d]
3742   1B85 D8            push b
3743   1B86 FD 77         inc b
3744   1B88 FA FD FF      lea d, [bp + -3] ; $j
3745   1B8B FD 43         mov [d], b
3746   1B8D E5            pop b
3747   1B8E E7            pop d
3748   1B8F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3749   1B93 E4            pop a
3750   1B94 DA            push d
3751   1B95 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3752   1B98 D7            push a
3753   1B99 DA            push d
3754   1B9A FA FF FF      lea d, [bp + -1] ; $i
3755   1B9D 2A            mov b, [d]
3756   1B9E E7            pop d
3757   1B9F 5A            add d, b
3758   1BA0 E4            pop a
3759   1BA1 32            mov bl, [d]
3760   1BA2 A7 00         mov bh, 0
3761   1BA4 E7            pop d
3762   1BA5 FD 3E         mov [d], bl
3763   1BA7             _for48_update:
3764   1BA7 FA FF FF      lea d, [bp + -1] ; $i
3765   1BAA 2A            mov b, [d]
3766   1BAB D8            push b
3767   1BAC FD 77         inc b
3768   1BAE FA FF FF      lea d, [bp + -1] ; $i
3769   1BB1 FD 43         mov [d], b
3770   1BB3 E5            pop b
3771   1BB4 0A 67 1B      jmp _for48_cond
3772   1BB7             _for48_exit:
3773   1BB7             ;; i = 0; 
3774   1BB7 FA FF FF      lea d, [bp + -1] ; $i
3775   1BBA DA            push d
3776   1BBB 26 00 00      mov b, $0
3777   1BBE E7            pop d
3778   1BBF FD 43         mov [d], b
3779   1BC1 0A C4 1B      jmp _if46_exit
3780   1BC4             _if46_exit:
3781   1BC4 0A 86 19      jmp _while45_cond
3782   1BC7             _while45_exit:
3783   1BC7             ;; if (i) { 
3784   1BC7             _if49_cond:
3785   1BC7 FA FF FF      lea d, [bp + -1] ; $i
3786   1BCA 2A            mov b, [d]
3787   1BCB C0 00 00      cmp b, 0
3788   1BCE C6 69 1D      je _if49_exit
3789   1BD1             _if49_true:
3790   1BD1             ;; for (k = i; k < 4; k++) { 
3791   1BD1             _for50_init:
3792   1BD1 FA FB FF      lea d, [bp + -5] ; $k
3793   1BD4 DA            push d
3794   1BD5 FA FF FF      lea d, [bp + -1] ; $i
3795   1BD8 2A            mov b, [d]
3796   1BD9 E7            pop d
3797   1BDA FD 43         mov [d], b
3798   1BDC             _for50_cond:
3799   1BDC FA FB FF      lea d, [bp + -5] ; $k
3800   1BDF 2A            mov b, [d]
3801   1BE0             ; START RELATIONAL
3802   1BE0 D7            push a
3803   1BE1 11            mov a, b
3804   1BE2 26 04 00      mov b, $4
3805   1BE5 B0            cmp a, b
3806   1BE6 FD 73         slt ; <= (signed)
3807   1BE8 E4            pop a
3808   1BE9             ; END RELATIONAL
3809   1BE9 C0 00 00      cmp b, 0
3810   1BEC C6 12 1C      je _for50_exit
3811   1BEF             _for50_block:
3812   1BEF             ;; input_buffer[k] = 0; 
3813   1BEF FA F5 FF      lea d, [bp + -11] ; $input_buffer
3814   1BF2 D7            push a
3815   1BF3 DA            push d
3816   1BF4 FA FB FF      lea d, [bp + -5] ; $k
3817   1BF7 2A            mov b, [d]
3818   1BF8 E7            pop d
3819   1BF9 5A            add d, b
3820   1BFA E4            pop a
3821   1BFB DA            push d
3822   1BFC 26 00 00      mov b, $0
3823   1BFF E7            pop d
3824   1C00 FD 3E         mov [d], bl
3825   1C02             _for50_update:
3826   1C02 FA FB FF      lea d, [bp + -5] ; $k
3827   1C05 2A            mov b, [d]
3828   1C06 D8            push b
3829   1C07 FD 77         inc b
3830   1C09 FA FB FF      lea d, [bp + -5] ; $k
3831   1C0C FD 43         mov [d], b
3832   1C0E E5            pop b
3833   1C0F 0A DC 1B      jmp _for50_cond
3834   1C12             _for50_exit:
3835   1C12             ;; for (k = 0; k < 4; k++) { 
3836   1C12             _for51_init:
3837   1C12 FA FB FF      lea d, [bp + -5] ; $k
3838   1C15 DA            push d
3839   1C16 26 00 00      mov b, $0
3840   1C19 E7            pop d
3841   1C1A FD 43         mov [d], b
3842   1C1C             _for51_cond:
3843   1C1C FA FB FF      lea d, [bp + -5] ; $k
3844   1C1F 2A            mov b, [d]
3845   1C20             ; START RELATIONAL
3846   1C20 D7            push a
3847   1C21 11            mov a, b
3848   1C22 26 04 00      mov b, $4
3849   1C25 B0            cmp a, b
3850   1C26 FD 73         slt ; <= (signed)
3851   1C28 E4            pop a
3852   1C29             ; END RELATIONAL
3853   1C29 C0 00 00      cmp b, 0
3854   1C2C C6 65 1C      je _for51_exit
3855   1C2F             _for51_block:
3856   1C2F             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
3857   1C2F FA F5 FF      lea d, [bp + -11] ; $input_buffer
3858   1C32 D7            push a
3859   1C33 DA            push d
3860   1C34 FA FB FF      lea d, [bp + -5] ; $k
3861   1C37 2A            mov b, [d]
3862   1C38 E7            pop d
3863   1C39 5A            add d, b
3864   1C3A E4            pop a
3865   1C3B DA            push d
3866   1C3C FA F5 FF      lea d, [bp + -11] ; $input_buffer
3867   1C3F D7            push a
3868   1C40 DA            push d
3869   1C41 FA FB FF      lea d, [bp + -5] ; $k
3870   1C44 2A            mov b, [d]
3871   1C45 E7            pop d
3872   1C46 5A            add d, b
3873   1C47 E4            pop a
3874   1C48 32            mov bl, [d]
3875   1C49 A7 00         mov bh, 0
3876   1C4B DD            push bl
3877   1C4C 07 5A 18      call base64_char_value
3878   1C4F 51 01 00      add sp, 1
3879   1C52 E7            pop d
3880   1C53 FD 3E         mov [d], bl
3881   1C55             _for51_update:
3882   1C55 FA FB FF      lea d, [bp + -5] ; $k
3883   1C58 2A            mov b, [d]
3884   1C59 D8            push b
3885   1C5A FD 77         inc b
3886   1C5C FA FB FF      lea d, [bp + -5] ; $k
3887   1C5F FD 43         mov [d], b
3888   1C61 E5            pop b
3889   1C62 0A 1C 1C      jmp _for51_cond
3890   1C65             _for51_exit:
3891   1C65             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
3892   1C65 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3893   1C68 D7            push a
3894   1C69 DA            push d
3895   1C6A 26 00 00      mov b, $0
3896   1C6D E7            pop d
3897   1C6E 5A            add d, b
3898   1C6F E4            pop a
3899   1C70 DA            push d
3900   1C71 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3901   1C74 D7            push a
3902   1C75 DA            push d
3903   1C76 26 00 00      mov b, $0
3904   1C79 E7            pop d
3905   1C7A 5A            add d, b
3906   1C7B E4            pop a
3907   1C7C 32            mov bl, [d]
3908   1C7D A7 00         mov bh, 0
3909   1C7F             ; START SHIFT
3910   1C7F D7            push a
3911   1C80 11            mov a, b
3912   1C81 26 02 00      mov b, $2
3913   1C84 FD 39         mov c, b
3914   1C86 9D            shl a, cl
3915   1C87 27            mov b, a
3916   1C88 E4            pop a
3917   1C89             ; END SHIFT
3918   1C89             ; START TERMS
3919   1C89 D7            push a
3920   1C8A 11            mov a, b
3921   1C8B FA F5 FF      lea d, [bp + -11] ; $input_buffer
3922   1C8E D7            push a
3923   1C8F DA            push d
3924   1C90 26 01 00      mov b, $1
3925   1C93 E7            pop d
3926   1C94 5A            add d, b
3927   1C95 E4            pop a
3928   1C96 32            mov bl, [d]
3929   1C97 A7 00         mov bh, 0
3930   1C99 D7            push a
3931   1C9A 11            mov a, b
3932   1C9B 26 30 00      mov b, $30
3933   1C9E 86            and a, b ; &
3934   1C9F 27            mov b, a
3935   1CA0 E4            pop a
3936   1CA1             ; START SHIFT
3937   1CA1 D7            push a
3938   1CA2 11            mov a, b
3939   1CA3 26 04 00      mov b, $4
3940   1CA6 FD 39         mov c, b
3941   1CA8 A5            ashr a, cl
3942   1CA9 27            mov b, a
3943   1CAA E4            pop a
3944   1CAB             ; END SHIFT
3945   1CAB 56            add b, a
3946   1CAC E4            pop a
3947   1CAD             ; END TERMS
3948   1CAD E7            pop d
3949   1CAE FD 3E         mov [d], bl
3950   1CB0             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
3951   1CB0 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3952   1CB3 D7            push a
3953   1CB4 DA            push d
3954   1CB5 26 01 00      mov b, $1
3955   1CB8 E7            pop d
3956   1CB9 5A            add d, b
3957   1CBA E4            pop a
3958   1CBB DA            push d
3959   1CBC FA F5 FF      lea d, [bp + -11] ; $input_buffer
3960   1CBF D7            push a
3961   1CC0 DA            push d
3962   1CC1 26 01 00      mov b, $1
3963   1CC4 E7            pop d
3964   1CC5 5A            add d, b
3965   1CC6 E4            pop a
3966   1CC7 32            mov bl, [d]
3967   1CC8 A7 00         mov bh, 0
3968   1CCA D7            push a
3969   1CCB 11            mov a, b
3970   1CCC 26 0F 00      mov b, $f
3971   1CCF 86            and a, b ; &
3972   1CD0 27            mov b, a
3973   1CD1 E4            pop a
3974   1CD2             ; START SHIFT
3975   1CD2 D7            push a
3976   1CD3 11            mov a, b
3977   1CD4 26 04 00      mov b, $4
3978   1CD7 FD 39         mov c, b
3979   1CD9 9D            shl a, cl
3980   1CDA 27            mov b, a
3981   1CDB E4            pop a
3982   1CDC             ; END SHIFT
3983   1CDC             ; START TERMS
3984   1CDC D7            push a
3985   1CDD 11            mov a, b
3986   1CDE FA F5 FF      lea d, [bp + -11] ; $input_buffer
3987   1CE1 D7            push a
3988   1CE2 DA            push d
3989   1CE3 26 02 00      mov b, $2
3990   1CE6 E7            pop d
3991   1CE7 5A            add d, b
3992   1CE8 E4            pop a
3993   1CE9 32            mov bl, [d]
3994   1CEA A7 00         mov bh, 0
3995   1CEC D7            push a
3996   1CED 11            mov a, b
3997   1CEE 26 3C 00      mov b, $3c
3998   1CF1 86            and a, b ; &
3999   1CF2 27            mov b, a
4000   1CF3 E4            pop a
4001   1CF4             ; START SHIFT
4002   1CF4 D7            push a
4003   1CF5 11            mov a, b
4004   1CF6 26 02 00      mov b, $2
4005   1CF9 FD 39         mov c, b
4006   1CFB A5            ashr a, cl
4007   1CFC 27            mov b, a
4008   1CFD E4            pop a
4009   1CFE             ; END SHIFT
4010   1CFE 56            add b, a
4011   1CFF E4            pop a
4012   1D00             ; END TERMS
4013   1D00 E7            pop d
4014   1D01 FD 3E         mov [d], bl
4015   1D03             ;; for (k = 0; k < i - 1; k++) { 
4016   1D03             _for52_init:
4017   1D03 FA FB FF      lea d, [bp + -5] ; $k
4018   1D06 DA            push d
4019   1D07 26 00 00      mov b, $0
4020   1D0A E7            pop d
4021   1D0B FD 43         mov [d], b
4022   1D0D             _for52_cond:
4023   1D0D FA FB FF      lea d, [bp + -5] ; $k
4024   1D10 2A            mov b, [d]
4025   1D11             ; START RELATIONAL
4026   1D11 D7            push a
4027   1D12 11            mov a, b
4028   1D13 FA FF FF      lea d, [bp + -1] ; $i
4029   1D16 2A            mov b, [d]
4030   1D17             ; START TERMS
4031   1D17 D7            push a
4032   1D18 11            mov a, b
4033   1D19 26 01 00      mov b, $1
4034   1D1C 60            sub a, b
4035   1D1D 27            mov b, a
4036   1D1E E4            pop a
4037   1D1F             ; END TERMS
4038   1D1F B0            cmp a, b
4039   1D20 FD 73         slt ; <= (signed)
4040   1D22 E4            pop a
4041   1D23             ; END RELATIONAL
4042   1D23 C0 00 00      cmp b, 0
4043   1D26 C6 66 1D      je _for52_exit
4044   1D29             _for52_block:
4045   1D29             ;; output[j++] = output_buffer[k]; 
4046   1D29 FA 07 00      lea d, [bp + 7] ; $output
4047   1D2C FD 2A         mov d, [d]
4048   1D2E D7            push a
4049   1D2F DA            push d
4050   1D30 FA FD FF      lea d, [bp + -3] ; $j
4051   1D33 2A            mov b, [d]
4052   1D34 D8            push b
4053   1D35 FD 77         inc b
4054   1D37 FA FD FF      lea d, [bp + -3] ; $j
4055   1D3A FD 43         mov [d], b
4056   1D3C E5            pop b
4057   1D3D E7            pop d
4058   1D3E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4059   1D42 E4            pop a
4060   1D43 DA            push d
4061   1D44 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4062   1D47 D7            push a
4063   1D48 DA            push d
4064   1D49 FA FB FF      lea d, [bp + -5] ; $k
4065   1D4C 2A            mov b, [d]
4066   1D4D E7            pop d
4067   1D4E 5A            add d, b
4068   1D4F E4            pop a
4069   1D50 32            mov bl, [d]
4070   1D51 A7 00         mov bh, 0
4071   1D53 E7            pop d
4072   1D54 FD 3E         mov [d], bl
4073   1D56             _for52_update:
4074   1D56 FA FB FF      lea d, [bp + -5] ; $k
4075   1D59 2A            mov b, [d]
4076   1D5A D8            push b
4077   1D5B FD 77         inc b
4078   1D5D FA FB FF      lea d, [bp + -5] ; $k
4079   1D60 FD 43         mov [d], b
4080   1D62 E5            pop b
4081   1D63 0A 0D 1D      jmp _for52_cond
4082   1D66             _for52_exit:
4083   1D66 0A 69 1D      jmp _if49_exit
4084   1D69             _if49_exit:
4085   1D69             ;; output[j] = '\0'; 
4086   1D69 FA 07 00      lea d, [bp + 7] ; $output
4087   1D6C FD 2A         mov d, [d]
4088   1D6E D7            push a
4089   1D6F DA            push d
4090   1D70 FA FD FF      lea d, [bp + -3] ; $j
4091   1D73 2A            mov b, [d]
4092   1D74 E7            pop d
4093   1D75 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4094   1D79 E4            pop a
4095   1D7A DA            push d
4096   1D7B 26 00 00      mov b, $0
4097   1D7E E7            pop d
4098   1D7F FD 3E         mov [d], bl
4099   1D81 F9            leave
4100   1D82 09            ret
4101   1D83             ; --- END TEXT BLOCK
4102   1D83             
4103   1D83             ; --- BEGIN DATA BLOCK
4104   1D83 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
4104   1D87 45 46 47 48 
4104   1D8B 49 4A 4B 4C 
4104   1D8F 4D 4E 4F 50 
4104   1D93 51 52 53 54 
4104   1D97 55 56 57 58 
4104   1D9B 59 5A 61 62 
4104   1D9F 63 64 65 66 
4104   1DA3 67 68 69 6A 
4104   1DA7 6B 6C 6D 6E 
4104   1DAB 6F 70 71 72 
4104   1DAF 73 74 75 76 
4104   1DB3 77 78 79 7A 
4104   1DB7 30 31 32 33 
4104   1DBB 34 35 36 37 
4104   1DBF 38 39 2B 2F 
4104   1DC3 00 
4105   1DC4 83 1D       _base64_table: .dw _base64_table_data
4106   1DC6 45 6E 74 65 __s0: .db "Enter a base64 encoded string to decode: ", 0
4106   1DCA 72 20 61 20 
4106   1DCE 62 61 73 65 
4106   1DD2 36 34 20 65 
4106   1DD6 6E 63 6F 64 
4106   1DDA 65 64 20 73 
4106   1DDE 74 72 69 6E 
4106   1DE2 67 20 74 6F 
4106   1DE6 20 64 65 63 
4106   1DEA 6F 64 65 3A 
4106   1DEE 20 00 
4107   1DF0 45 6E 63 6F __s1: .db "Encoded string: %s\n", 0
4107   1DF4 64 65 64 20 
4107   1DF8 73 74 72 69 
4107   1DFC 6E 67 3A 20 
4107   1E00 25 73 0A 00 
4108   1E04 44 65 63 6F __s2: .db "Decoded string: %s\n", 0
4108   1E08 64 65 64 20 
4108   1E0C 73 74 72 69 
4108   1E10 6E 67 3A 20 
4108   1E14 25 73 0A 00 
4109   1E18 55 6E 65 78 __s3: .db "Unexpected format in printf.", 0
4109   1E1C 70 65 63 74 
4109   1E20 65 64 20 66 
4109   1E24 6F 72 6D 61 
4109   1E28 74 20 69 6E 
4109   1E2C 20 70 72 69 
4109   1E30 6E 74 66 2E 
4109   1E34 00 
4110   1E35 45 72 72 6F __s4: .db "Error: Unknown argument type.\n", 0
4110   1E39 72 3A 20 55 
4110   1E3D 6E 6B 6E 6F 
4110   1E41 77 6E 20 61 
4110   1E45 72 67 75 6D 
4110   1E49 65 6E 74 20 
4110   1E4D 74 79 70 65 
4110   1E51 2E 0A 00 
4111   1E54 1B 5B 32 4A __s5: .db "\033[2J\033[H", 0
4111   1E58 1B 5B 48 00 
4112   1E5C             
4113   1E5C 5E 1E       _heap_top: .dw _heap
4114   1E5E 00          _heap: .db 0
4115   1E5F             ; --- END DATA BLOCK
4116   1E5F             
4117   1E5F             .end
tasm: Number of errors = 0
