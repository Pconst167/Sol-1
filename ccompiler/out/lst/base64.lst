0001   0000             ; --- FILENAME: programs/base64
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; char input[512]; 
0011   0408 52 00 02      sub sp, 512 ; input
0012   040B             ;; char output[256]; 
0013   040B 52 00 01      sub sp, 256 ; output
0014   040E             ;; printf("Enter a base64 encoded string to decode: "); 
0015   040E 26 23 23      mov b, _s0 ; "Enter a base64 encoded string to decode: "
0016   0411 FD AB         swp b
0017   0413 D8            push b
0018   0414 07 1F 08      call printf
0019   0417 51 02 00      add sp, 2
0020   041A             ;; gets(input); 
0021   041A FA 01 FE      lea d, [bp + -511] ; $input
0022   041D 2D            mov b, d
0023   041E FD AB         swp b
0024   0420 D8            push b
0025   0421 07 5A 0E      call gets
0026   0424 51 02 00      add sp, 2
0027   0427             ;; base64_encode(input, output); 
0028   0427 FA 01 FD      lea d, [bp + -767] ; $output
0029   042A 2D            mov b, d
0030   042B FD AB         swp b
0031   042D D8            push b
0032   042E FA 01 FE      lea d, [bp + -511] ; $input
0033   0431 2D            mov b, d
0034   0432 FD AB         swp b
0035   0434 D8            push b
0036   0435 07 AC 19      call base64_encode
0037   0438 51 04 00      add sp, 4
0038   043B             ;; printf("Encoded string: %s\n", output); 
0039   043B FA 01 FD      lea d, [bp + -767] ; $output
0040   043E 2D            mov b, d
0041   043F FD AB         swp b
0042   0441 D8            push b
0043   0442 26 4D 23      mov b, _s1 ; "Encoded string: %s\n"
0044   0445 FD AB         swp b
0045   0447 D8            push b
0046   0448 07 1F 08      call printf
0047   044B 51 04 00      add sp, 4
0048   044E             ;; base64_decode(output, input); 
0049   044E FA 01 FE      lea d, [bp + -511] ; $input
0050   0451 2D            mov b, d
0051   0452 FD AB         swp b
0052   0454 D8            push b
0053   0455 FA 01 FD      lea d, [bp + -767] ; $output
0054   0458 2D            mov b, d
0055   0459 FD AB         swp b
0056   045B D8            push b
0057   045C 07 9C 1E      call base64_decode
0058   045F 51 04 00      add sp, 4
0059   0462             ;; printf("Decoded string: %s\n", input); 
0060   0462 FA 01 FE      lea d, [bp + -511] ; $input
0061   0465 2D            mov b, d
0062   0466 FD AB         swp b
0063   0468 D8            push b
0064   0469 26 61 23      mov b, _s2 ; "Decoded string: %s\n"
0065   046C FD AB         swp b
0066   046E D8            push b
0067   046F 07 1F 08      call printf
0068   0472 51 04 00      add sp, 4
0069   0475             ;; return 0; 
0070   0475 26 00 00      mov b, $0
0071   0478 F9            leave
0072   0479 05 0B         syscall sys_terminate_proc
0073   047B             
0074   047B             strcpy:
0075   047B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0076   047E             ;; char *psrc; 
0077   047E 52 02 00      sub sp, 2 ; psrc
0078   0481             ;; char *pdest; 
0079   0481 52 02 00      sub sp, 2 ; pdest
0080   0484             ;; psrc = src; 
0081   0484 FA FF FF      lea d, [bp + -1] ; $psrc
0082   0487 DA            push d
0083   0488 FA 07 00      lea d, [bp + 7] ; $src
0084   048B 2A            mov b, [d]
0085   048C E7            pop d
0086   048D FD 43         mov [d], b
0087   048F             ;; pdest = dest; 
0088   048F FA FD FF      lea d, [bp + -3] ; $pdest
0089   0492 DA            push d
0090   0493 FA 05 00      lea d, [bp + 5] ; $dest
0091   0496 2A            mov b, [d]
0092   0497 E7            pop d
0093   0498 FD 43         mov [d], b
0094   049A             ;; while(*psrc) *pdest++ = *psrc++; 
0095   049A             _while1_cond:
0096   049A FA FF FF      lea d, [bp + -1] ; $psrc
0097   049D 2A            mov b, [d]
0098   049E 74            mov d, b
0099   049F 32            mov bl, [d]
0100   04A0 A7 00         mov bh, 0
0101   04A2 C0 00 00      cmp b, 0
0102   04A5 C6 CD 04      je _while1_exit
0103   04A8             _while1_block:
0104   04A8             ;; *pdest++ = *psrc++; 
0105   04A8 FA FD FF      lea d, [bp + -3] ; $pdest
0106   04AB 2A            mov b, [d]
0107   04AC D8            push b
0108   04AD FD 77         inc b
0109   04AF FA FD FF      lea d, [bp + -3] ; $pdest
0110   04B2 FD 43         mov [d], b
0111   04B4 E5            pop b
0112   04B5 D8            push b
0113   04B6 FA FF FF      lea d, [bp + -1] ; $psrc
0114   04B9 2A            mov b, [d]
0115   04BA D8            push b
0116   04BB FD 77         inc b
0117   04BD FA FF FF      lea d, [bp + -1] ; $psrc
0118   04C0 FD 43         mov [d], b
0119   04C2 E5            pop b
0120   04C3 74            mov d, b
0121   04C4 32            mov bl, [d]
0122   04C5 A7 00         mov bh, 0
0123   04C7 E7            pop d
0124   04C8 FD 3E         mov [d], bl
0125   04CA 0A 9A 04      jmp _while1_cond
0126   04CD             _while1_exit:
0127   04CD             ;; *pdest = '\0'; 
0128   04CD FA FD FF      lea d, [bp + -3] ; $pdest
0129   04D0 2A            mov b, [d]
0130   04D1 D8            push b
0131   04D2 26 00 00      mov b, $0
0132   04D5 E7            pop d
0133   04D6 FD 3E         mov [d], bl
0134   04D8 F9            leave
0135   04D9 09            ret
0136   04DA             
0137   04DA             strcmp:
0138   04DA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0139   04DD             ;; while (*s1 && (*s1 == *s2)) { 
0140   04DD             _while2_cond:
0141   04DD FA 05 00      lea d, [bp + 5] ; $s1
0142   04E0 2A            mov b, [d]
0143   04E1 74            mov d, b
0144   04E2 32            mov bl, [d]
0145   04E3 A7 00         mov bh, 0
0146   04E5 D7            push a
0147   04E6 11            mov a, b
0148   04E7 FA 05 00      lea d, [bp + 5] ; $s1
0149   04EA 2A            mov b, [d]
0150   04EB 74            mov d, b
0151   04EC 32            mov bl, [d]
0152   04ED A7 00         mov bh, 0
0153   04EF             ; START RELATIONAL
0154   04EF D7            push a
0155   04F0 11            mov a, b
0156   04F1 FA 07 00      lea d, [bp + 7] ; $s2
0157   04F4 2A            mov b, [d]
0158   04F5 74            mov d, b
0159   04F6 32            mov bl, [d]
0160   04F7 A7 00         mov bh, 0
0161   04F9 B0            cmp a, b
0162   04FA FD 71         seq ; ==
0163   04FC E4            pop a
0164   04FD             ; END RELATIONAL
0165   04FD FD A7         sand a, b
0166   04FF E4            pop a
0167   0500 C0 00 00      cmp b, 0
0168   0503 C6 23 05      je _while2_exit
0169   0506             _while2_block:
0170   0506             ;; s1++; 
0171   0506 FA 05 00      lea d, [bp + 5] ; $s1
0172   0509 2A            mov b, [d]
0173   050A D8            push b
0174   050B FD 77         inc b
0175   050D FA 05 00      lea d, [bp + 5] ; $s1
0176   0510 FD 43         mov [d], b
0177   0512 E5            pop b
0178   0513             ;; s2++; 
0179   0513 FA 07 00      lea d, [bp + 7] ; $s2
0180   0516 2A            mov b, [d]
0181   0517 D8            push b
0182   0518 FD 77         inc b
0183   051A FA 07 00      lea d, [bp + 7] ; $s2
0184   051D FD 43         mov [d], b
0185   051F E5            pop b
0186   0520 0A DD 04      jmp _while2_cond
0187   0523             _while2_exit:
0188   0523             ;; return *s1 - *s2; 
0189   0523 FA 05 00      lea d, [bp + 5] ; $s1
0190   0526 2A            mov b, [d]
0191   0527 74            mov d, b
0192   0528 32            mov bl, [d]
0193   0529 A7 00         mov bh, 0
0194   052B             ; START TERMS
0195   052B D7            push a
0196   052C 11            mov a, b
0197   052D FA 07 00      lea d, [bp + 7] ; $s2
0198   0530 2A            mov b, [d]
0199   0531 74            mov d, b
0200   0532 32            mov bl, [d]
0201   0533 A7 00         mov bh, 0
0202   0535 60            sub a, b
0203   0536 27            mov b, a
0204   0537 E4            pop a
0205   0538             ; END TERMS
0206   0538 F9            leave
0207   0539 09            ret
0208   053A             
0209   053A             strncmp:
0210   053A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0211   053D F9            leave
0212   053E 09            ret
0213   053F             
0214   053F             strcat:
0215   053F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0216   0542             ;; int dest_len; 
0217   0542 52 02 00      sub sp, 2 ; dest_len
0218   0545             ;; int i; 
0219   0545 52 02 00      sub sp, 2 ; i
0220   0548             ;; dest_len = strlen(dest); 
0221   0548 FA FF FF      lea d, [bp + -1] ; $dest_len
0222   054B DA            push d
0223   054C FA 05 00      lea d, [bp + 5] ; $dest
0224   054F 2A            mov b, [d]
0225   0550 FD AB         swp b
0226   0552 D8            push b
0227   0553 07 F5 05      call strlen
0228   0556 51 02 00      add sp, 2
0229   0559 E7            pop d
0230   055A FD 43         mov [d], b
0231   055C             ;; for (i = 0; src[i] != 0; i=i+1) { 
0232   055C             _for3_init:
0233   055C FA FD FF      lea d, [bp + -3] ; $i
0234   055F DA            push d
0235   0560 26 00 00      mov b, $0
0236   0563 E7            pop d
0237   0564 FD 43         mov [d], b
0238   0566             _for3_cond:
0239   0566 FA 07 00      lea d, [bp + 7] ; $src
0240   0569 FD 2A         mov d, [d]
0241   056B D7            push a
0242   056C DA            push d
0243   056D FA FD FF      lea d, [bp + -3] ; $i
0244   0570 2A            mov b, [d]
0245   0571 E7            pop d
0246   0572 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0247   0576 E4            pop a
0248   0577 32            mov bl, [d]
0249   0578 A7 00         mov bh, 0
0250   057A             ; START RELATIONAL
0251   057A D7            push a
0252   057B 11            mov a, b
0253   057C 26 00 00      mov b, $0
0254   057F B0            cmp a, b
0255   0580 FD 72         sneq ; !=
0256   0582 E4            pop a
0257   0583             ; END RELATIONAL
0258   0583 C0 00 00      cmp b, 0
0259   0586 C6 CF 05      je _for3_exit
0260   0589             _for3_block:
0261   0589             ;; dest[dest_len + i] = src[i]; 
0262   0589 FA 05 00      lea d, [bp + 5] ; $dest
0263   058C FD 2A         mov d, [d]
0264   058E D7            push a
0265   058F DA            push d
0266   0590 FA FF FF      lea d, [bp + -1] ; $dest_len
0267   0593 2A            mov b, [d]
0268   0594             ; START TERMS
0269   0594 D7            push a
0270   0595 11            mov a, b
0271   0596 FA FD FF      lea d, [bp + -3] ; $i
0272   0599 2A            mov b, [d]
0273   059A 56            add b, a
0274   059B E4            pop a
0275   059C             ; END TERMS
0276   059C E7            pop d
0277   059D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0278   05A1 E4            pop a
0279   05A2 DA            push d
0280   05A3 FA 07 00      lea d, [bp + 7] ; $src
0281   05A6 FD 2A         mov d, [d]
0282   05A8 D7            push a
0283   05A9 DA            push d
0284   05AA FA FD FF      lea d, [bp + -3] ; $i
0285   05AD 2A            mov b, [d]
0286   05AE E7            pop d
0287   05AF FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0288   05B3 E4            pop a
0289   05B4 32            mov bl, [d]
0290   05B5 A7 00         mov bh, 0
0291   05B7 E7            pop d
0292   05B8 FD 3E         mov [d], bl
0293   05BA             _for3_update:
0294   05BA FA FD FF      lea d, [bp + -3] ; $i
0295   05BD DA            push d
0296   05BE FA FD FF      lea d, [bp + -3] ; $i
0297   05C1 2A            mov b, [d]
0298   05C2             ; START TERMS
0299   05C2 D7            push a
0300   05C3 11            mov a, b
0301   05C4 26 01 00      mov b, $1
0302   05C7 56            add b, a
0303   05C8 E4            pop a
0304   05C9             ; END TERMS
0305   05C9 E7            pop d
0306   05CA FD 43         mov [d], b
0307   05CC 0A 66 05      jmp _for3_cond
0308   05CF             _for3_exit:
0309   05CF             ;; dest[dest_len + i] = 0; 
0310   05CF FA 05 00      lea d, [bp + 5] ; $dest
0311   05D2 FD 2A         mov d, [d]
0312   05D4 D7            push a
0313   05D5 DA            push d
0314   05D6 FA FF FF      lea d, [bp + -1] ; $dest_len
0315   05D9 2A            mov b, [d]
0316   05DA             ; START TERMS
0317   05DA D7            push a
0318   05DB 11            mov a, b
0319   05DC FA FD FF      lea d, [bp + -3] ; $i
0320   05DF 2A            mov b, [d]
0321   05E0 56            add b, a
0322   05E1 E4            pop a
0323   05E2             ; END TERMS
0324   05E2 E7            pop d
0325   05E3 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0326   05E7 E4            pop a
0327   05E8 DA            push d
0328   05E9 26 00 00      mov b, $0
0329   05EC E7            pop d
0330   05ED FD 3E         mov [d], bl
0331   05EF             ;; return dest; 
0332   05EF FA 05 00      lea d, [bp + 5] ; $dest
0333   05F2 2A            mov b, [d]
0334   05F3 F9            leave
0335   05F4 09            ret
0336   05F5             
0337   05F5             strlen:
0338   05F5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0339   05F8             ;; int length; 
0340   05F8 52 02 00      sub sp, 2 ; length
0341   05FB             ;; length = 0; 
0342   05FB FA FF FF      lea d, [bp + -1] ; $length
0343   05FE DA            push d
0344   05FF 26 00 00      mov b, $0
0345   0602 E7            pop d
0346   0603 FD 43         mov [d], b
0347   0605             ;; while (str[length] != 0) { 
0348   0605             _while4_cond:
0349   0605 FA 05 00      lea d, [bp + 5] ; $str
0350   0608 FD 2A         mov d, [d]
0351   060A D7            push a
0352   060B DA            push d
0353   060C FA FF FF      lea d, [bp + -1] ; $length
0354   060F 2A            mov b, [d]
0355   0610 E7            pop d
0356   0611 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0357   0615 E4            pop a
0358   0616 32            mov bl, [d]
0359   0617 A7 00         mov bh, 0
0360   0619             ; START RELATIONAL
0361   0619 D7            push a
0362   061A 11            mov a, b
0363   061B 26 00 00      mov b, $0
0364   061E B0            cmp a, b
0365   061F FD 72         sneq ; !=
0366   0621 E4            pop a
0367   0622             ; END RELATIONAL
0368   0622 C0 00 00      cmp b, 0
0369   0625 C6 38 06      je _while4_exit
0370   0628             _while4_block:
0371   0628             ;; length++; 
0372   0628 FA FF FF      lea d, [bp + -1] ; $length
0373   062B 2A            mov b, [d]
0374   062C D8            push b
0375   062D FD 77         inc b
0376   062F FA FF FF      lea d, [bp + -1] ; $length
0377   0632 FD 43         mov [d], b
0378   0634 E5            pop b
0379   0635 0A 05 06      jmp _while4_cond
0380   0638             _while4_exit:
0381   0638             ;; return length; 
0382   0638 FA FF FF      lea d, [bp + -1] ; $length
0383   063B 2A            mov b, [d]
0384   063C F9            leave
0385   063D 09            ret
0386   063E             
0387   063E             exit:
0388   063E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0389   0641             
0390   0641             ; --- BEGIN INLINE ASM BLOCK
0391   0641 05 0B         syscall sys_terminate_proc
0392   0643             ; --- END INLINE ASM BLOCK
0393   0643             
0394   0643 F9            leave
0395   0644 09            ret
0396   0645             
0397   0645             memset:
0398   0645 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0399   0648             ;; int i; 
0400   0648 52 02 00      sub sp, 2 ; i
0401   064B             ;; for(i = 0; i < size; i++){ 
0402   064B             _for5_init:
0403   064B FA FF FF      lea d, [bp + -1] ; $i
0404   064E DA            push d
0405   064F 26 00 00      mov b, $0
0406   0652 E7            pop d
0407   0653 FD 43         mov [d], b
0408   0655             _for5_cond:
0409   0655 FA FF FF      lea d, [bp + -1] ; $i
0410   0658 2A            mov b, [d]
0411   0659             ; START RELATIONAL
0412   0659 D7            push a
0413   065A 11            mov a, b
0414   065B FA 08 00      lea d, [bp + 8] ; $size
0415   065E 2A            mov b, [d]
0416   065F B0            cmp a, b
0417   0660 FD 73         slt ; < (signed)
0418   0662 E4            pop a
0419   0663             ; END RELATIONAL
0420   0663 C0 00 00      cmp b, 0
0421   0666 C6 8F 06      je _for5_exit
0422   0669             _for5_block:
0423   0669             ;; *(s+i) = c; 
0424   0669 FA 05 00      lea d, [bp + 5] ; $s
0425   066C 2A            mov b, [d]
0426   066D             ; START TERMS
0427   066D D7            push a
0428   066E 11            mov a, b
0429   066F FA FF FF      lea d, [bp + -1] ; $i
0430   0672 2A            mov b, [d]
0431   0673 56            add b, a
0432   0674 E4            pop a
0433   0675             ; END TERMS
0434   0675 D8            push b
0435   0676 FA 07 00      lea d, [bp + 7] ; $c
0436   0679 32            mov bl, [d]
0437   067A A7 00         mov bh, 0
0438   067C E7            pop d
0439   067D FD 3E         mov [d], bl
0440   067F             _for5_update:
0441   067F FA FF FF      lea d, [bp + -1] ; $i
0442   0682 2A            mov b, [d]
0443   0683 D8            push b
0444   0684 FD 77         inc b
0445   0686 FA FF FF      lea d, [bp + -1] ; $i
0446   0689 FD 43         mov [d], b
0447   068B E5            pop b
0448   068C 0A 55 06      jmp _for5_cond
0449   068F             _for5_exit:
0450   068F             ;; return s; 
0451   068F FA 05 00      lea d, [bp + 5] ; $s
0452   0692 2A            mov b, [d]
0453   0693 F9            leave
0454   0694 09            ret
0455   0695             
0456   0695             atoi:
0457   0695 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0458   0698             ;; int result = 0;  // Initialize result 
0459   0698 52 02 00      sub sp, 2 ; result
0460   069B             ; --- START LOCAL VAR INITIALIZATION
0461   069B FA FF FF      lea d, [bp + -1] ; $result
0462   069E DA            push d
0463   069F 26 00 00      mov b, $0
0464   06A2 E7            pop d
0465   06A3 FD 43         mov [d], b
0466   06A5             ; --- END LOCAL VAR INITIALIZATION
0467   06A5             ;; int sign = 1;    // Initialize sign as positive 
0468   06A5 52 02 00      sub sp, 2 ; sign
0469   06A8             ; --- START LOCAL VAR INITIALIZATION
0470   06A8 FA FD FF      lea d, [bp + -3] ; $sign
0471   06AB DA            push d
0472   06AC 26 01 00      mov b, $1
0473   06AF E7            pop d
0474   06B0 FD 43         mov [d], b
0475   06B2             ; --- END LOCAL VAR INITIALIZATION
0476   06B2             ;; while (*str == ' ') str++; 
0477   06B2             _while6_cond:
0478   06B2 FA 05 00      lea d, [bp + 5] ; $str
0479   06B5 2A            mov b, [d]
0480   06B6 74            mov d, b
0481   06B7 32            mov bl, [d]
0482   06B8 A7 00         mov bh, 0
0483   06BA             ; START RELATIONAL
0484   06BA D7            push a
0485   06BB 11            mov a, b
0486   06BC 26 20 00      mov b, $20
0487   06BF B0            cmp a, b
0488   06C0 FD 71         seq ; ==
0489   06C2 E4            pop a
0490   06C3             ; END RELATIONAL
0491   06C3 C0 00 00      cmp b, 0
0492   06C6 C6 D9 06      je _while6_exit
0493   06C9             _while6_block:
0494   06C9             ;; str++; 
0495   06C9 FA 05 00      lea d, [bp + 5] ; $str
0496   06CC 2A            mov b, [d]
0497   06CD D8            push b
0498   06CE FD 77         inc b
0499   06D0 FA 05 00      lea d, [bp + 5] ; $str
0500   06D3 FD 43         mov [d], b
0501   06D5 E5            pop b
0502   06D6 0A B2 06      jmp _while6_cond
0503   06D9             _while6_exit:
0504   06D9             ;; if (*str == '-' || *str == '+') { 
0505   06D9             _if7_cond:
0506   06D9 FA 05 00      lea d, [bp + 5] ; $str
0507   06DC 2A            mov b, [d]
0508   06DD 74            mov d, b
0509   06DE 32            mov bl, [d]
0510   06DF A7 00         mov bh, 0
0511   06E1             ; START RELATIONAL
0512   06E1 D7            push a
0513   06E2 11            mov a, b
0514   06E3 26 2D 00      mov b, $2d
0515   06E6 B0            cmp a, b
0516   06E7 FD 71         seq ; ==
0517   06E9 E4            pop a
0518   06EA             ; END RELATIONAL
0519   06EA D7            push a
0520   06EB 11            mov a, b
0521   06EC FA 05 00      lea d, [bp + 5] ; $str
0522   06EF 2A            mov b, [d]
0523   06F0 74            mov d, b
0524   06F1 32            mov bl, [d]
0525   06F2 A7 00         mov bh, 0
0526   06F4             ; START RELATIONAL
0527   06F4 D7            push a
0528   06F5 11            mov a, b
0529   06F6 26 2B 00      mov b, $2b
0530   06F9 B0            cmp a, b
0531   06FA FD 71         seq ; ==
0532   06FC E4            pop a
0533   06FD             ; END RELATIONAL
0534   06FD FD A8         sor a, b ; ||
0535   06FF E4            pop a
0536   0700 C0 00 00      cmp b, 0
0537   0703 C6 3A 07      je _if7_exit
0538   0706             _if7_true:
0539   0706             ;; if (*str == '-') sign = -1; 
0540   0706             _if8_cond:
0541   0706 FA 05 00      lea d, [bp + 5] ; $str
0542   0709 2A            mov b, [d]
0543   070A 74            mov d, b
0544   070B 32            mov bl, [d]
0545   070C A7 00         mov bh, 0
0546   070E             ; START RELATIONAL
0547   070E D7            push a
0548   070F 11            mov a, b
0549   0710 26 2D 00      mov b, $2d
0550   0713 B0            cmp a, b
0551   0714 FD 71         seq ; ==
0552   0716 E4            pop a
0553   0717             ; END RELATIONAL
0554   0717 C0 00 00      cmp b, 0
0555   071A C6 2A 07      je _if8_exit
0556   071D             _if8_true:
0557   071D             ;; sign = -1; 
0558   071D FA FD FF      lea d, [bp + -3] ; $sign
0559   0720 DA            push d
0560   0721 26 FF FF      mov b, $ffff
0561   0724 E7            pop d
0562   0725 FD 43         mov [d], b
0563   0727 0A 2A 07      jmp _if8_exit
0564   072A             _if8_exit:
0565   072A             ;; str++; 
0566   072A FA 05 00      lea d, [bp + 5] ; $str
0567   072D 2A            mov b, [d]
0568   072E D8            push b
0569   072F FD 77         inc b
0570   0731 FA 05 00      lea d, [bp + 5] ; $str
0571   0734 FD 43         mov [d], b
0572   0736 E5            pop b
0573   0737 0A 3A 07      jmp _if7_exit
0574   073A             _if7_exit:
0575   073A             ;; while (*str >= '0' && *str <= '9') { 
0576   073A             _while9_cond:
0577   073A FA 05 00      lea d, [bp + 5] ; $str
0578   073D 2A            mov b, [d]
0579   073E 74            mov d, b
0580   073F 32            mov bl, [d]
0581   0740 A7 00         mov bh, 0
0582   0742             ; START RELATIONAL
0583   0742 D7            push a
0584   0743 11            mov a, b
0585   0744 26 30 00      mov b, $30
0586   0747 B0            cmp a, b
0587   0748 FD 82         sgeu ; >= (unsigned)
0588   074A E4            pop a
0589   074B             ; END RELATIONAL
0590   074B D7            push a
0591   074C 11            mov a, b
0592   074D FA 05 00      lea d, [bp + 5] ; $str
0593   0750 2A            mov b, [d]
0594   0751 74            mov d, b
0595   0752 32            mov bl, [d]
0596   0753 A7 00         mov bh, 0
0597   0755             ; START RELATIONAL
0598   0755 D7            push a
0599   0756 11            mov a, b
0600   0757 26 39 00      mov b, $39
0601   075A B0            cmp a, b
0602   075B FD 75         slu ; <= (unsigned)
0603   075D E4            pop a
0604   075E             ; END RELATIONAL
0605   075E FD A7         sand a, b
0606   0760 E4            pop a
0607   0761 C0 00 00      cmp b, 0
0608   0764 C6 9F 07      je _while9_exit
0609   0767             _while9_block:
0610   0767             ;; result = result * 10 + (*str - '0'); 
0611   0767 FA FF FF      lea d, [bp + -1] ; $result
0612   076A DA            push d
0613   076B FA FF FF      lea d, [bp + -1] ; $result
0614   076E 2A            mov b, [d]
0615   076F             ; START FACTORS
0616   076F D7            push a
0617   0770 11            mov a, b
0618   0771 26 0A 00      mov b, $a
0619   0774 AC            mul a, b ; *
0620   0775 11            mov a, b
0621   0776 27            mov b, a
0622   0777 E4            pop a
0623   0778             ; END FACTORS
0624   0778             ; START TERMS
0625   0778 D7            push a
0626   0779 11            mov a, b
0627   077A FA 05 00      lea d, [bp + 5] ; $str
0628   077D 2A            mov b, [d]
0629   077E 74            mov d, b
0630   077F 32            mov bl, [d]
0631   0780 A7 00         mov bh, 0
0632   0782             ; START TERMS
0633   0782 D7            push a
0634   0783 11            mov a, b
0635   0784 26 30 00      mov b, $30
0636   0787 60            sub a, b
0637   0788 27            mov b, a
0638   0789 E4            pop a
0639   078A             ; END TERMS
0640   078A 56            add b, a
0641   078B E4            pop a
0642   078C             ; END TERMS
0643   078C E7            pop d
0644   078D FD 43         mov [d], b
0645   078F             ;; str++; 
0646   078F FA 05 00      lea d, [bp + 5] ; $str
0647   0792 2A            mov b, [d]
0648   0793 D8            push b
0649   0794 FD 77         inc b
0650   0796 FA 05 00      lea d, [bp + 5] ; $str
0651   0799 FD 43         mov [d], b
0652   079B E5            pop b
0653   079C 0A 3A 07      jmp _while9_cond
0654   079F             _while9_exit:
0655   079F             ;; return sign * result; 
0656   079F FA FD FF      lea d, [bp + -3] ; $sign
0657   07A2 2A            mov b, [d]
0658   07A3             ; START FACTORS
0659   07A3 D7            push a
0660   07A4 11            mov a, b
0661   07A5 FA FF FF      lea d, [bp + -1] ; $result
0662   07A8 2A            mov b, [d]
0663   07A9 AC            mul a, b ; *
0664   07AA 11            mov a, b
0665   07AB 27            mov b, a
0666   07AC E4            pop a
0667   07AD             ; END FACTORS
0668   07AD F9            leave
0669   07AE 09            ret
0670   07AF             
0671   07AF             rand:
0672   07AF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0673   07B2             ;; int  sec; 
0674   07B2 52 02 00      sub sp, 2 ; sec
0675   07B5             
0676   07B5             ; --- BEGIN INLINE ASM BLOCK
0677   07B5 19 00         mov al, 0
0678   07B7 05 01         syscall sys_rtc					
0679   07B9 1A            mov al, ah
0680   07BA FA FF FF      lea d, [bp + -1] ; $sec
0681   07BD 1E            mov al, [d]
0682   07BE 22 00         mov ah, 0
0683   07C0             ; --- END INLINE ASM BLOCK
0684   07C0             
0685   07C0             ;; return sec; 
0686   07C0 FA FF FF      lea d, [bp + -1] ; $sec
0687   07C3 2A            mov b, [d]
0688   07C4 F9            leave
0689   07C5 09            ret
0690   07C6             
0691   07C6             alloc:
0692   07C6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0693   07C9             ;; heap_top = heap_top + bytes; 
0694   07C9 3B B9 23      mov d, _heap_top ; $heap_top
0695   07CC DA            push d
0696   07CD 3B B9 23      mov d, _heap_top ; $heap_top
0697   07D0 2A            mov b, [d]
0698   07D1             ; START TERMS
0699   07D1 D7            push a
0700   07D2 11            mov a, b
0701   07D3 FA 05 00      lea d, [bp + 5] ; $bytes
0702   07D6 2A            mov b, [d]
0703   07D7 56            add b, a
0704   07D8 E4            pop a
0705   07D9             ; END TERMS
0706   07D9 E7            pop d
0707   07DA FD 43         mov [d], b
0708   07DC             ;; return heap_top - bytes; 
0709   07DC 3B B9 23      mov d, _heap_top ; $heap_top
0710   07DF 2A            mov b, [d]
0711   07E0             ; START TERMS
0712   07E0 D7            push a
0713   07E1 11            mov a, b
0714   07E2 FA 05 00      lea d, [bp + 5] ; $bytes
0715   07E5 2A            mov b, [d]
0716   07E6 60            sub a, b
0717   07E7 27            mov b, a
0718   07E8 E4            pop a
0719   07E9             ; END TERMS
0720   07E9 F9            leave
0721   07EA 09            ret
0722   07EB             
0723   07EB             free:
0724   07EB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0725   07EE             ;; return heap_top = heap_top - bytes; 
0726   07EE 3B B9 23      mov d, _heap_top ; $heap_top
0727   07F1 DA            push d
0728   07F2 3B B9 23      mov d, _heap_top ; $heap_top
0729   07F5 2A            mov b, [d]
0730   07F6             ; START TERMS
0731   07F6 D7            push a
0732   07F7 11            mov a, b
0733   07F8 FA 05 00      lea d, [bp + 5] ; $bytes
0734   07FB 2A            mov b, [d]
0735   07FC 60            sub a, b
0736   07FD 27            mov b, a
0737   07FE E4            pop a
0738   07FF             ; END TERMS
0739   07FF E7            pop d
0740   0800 FD 43         mov [d], b
0741   0802 F9            leave
0742   0803 09            ret
0743   0804             
0744   0804             fopen:
0745   0804 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0746   0807             ;; FILE *fp; 
0747   0807 52 02 00      sub sp, 2 ; fp
0748   080A             ;; fp = alloc(sizeof(int)); 
0749   080A FA FF FF      lea d, [bp + -1] ; $fp
0750   080D DA            push d
0751   080E 26 02 00      mov b, 2
0752   0811 FD AB         swp b
0753   0813 D8            push b
0754   0814 07 C6 07      call alloc
0755   0817 51 02 00      add sp, 2
0756   081A E7            pop d
0757   081B FD 43         mov [d], b
0758   081D F9            leave
0759   081E 09            ret
0760   081F             
0761   081F             printf:
0762   081F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0763   0822             ;; char *p, *format_p; 
0764   0822 52 02 00      sub sp, 2 ; p
0765   0825 52 02 00      sub sp, 2 ; format_p
0766   0828             ;; format_p = format; 
0767   0828 FA FD FF      lea d, [bp + -3] ; $format_p
0768   082B DA            push d
0769   082C FA 05 00      lea d, [bp + 5] ; $format
0770   082F 2A            mov b, [d]
0771   0830 E7            pop d
0772   0831 FD 43         mov [d], b
0773   0833             ;; p = &format + 2; 
0774   0833 FA FF FF      lea d, [bp + -1] ; $p
0775   0836 DA            push d
0776   0837 FA 05 00      lea d, [bp + 5] ; $format
0777   083A 2D            mov b, d
0778   083B             ; START TERMS
0779   083B D7            push a
0780   083C 11            mov a, b
0781   083D 26 02 00      mov b, $2
0782   0840 56            add b, a
0783   0841 E4            pop a
0784   0842             ; END TERMS
0785   0842 E7            pop d
0786   0843 FD 43         mov [d], b
0787   0845             ;; for(;;){ 
0788   0845             _for10_init:
0789   0845             _for10_cond:
0790   0845             _for10_block:
0791   0845             ;; if(!*format_p) break; 
0792   0845             _if11_cond:
0793   0845 FA FD FF      lea d, [bp + -3] ; $format_p
0794   0848 2A            mov b, [d]
0795   0849 74            mov d, b
0796   084A 32            mov bl, [d]
0797   084B A7 00         mov bh, 0
0798   084D C0 00 00      cmp b, 0
0799   0850 FD 71         seq ; !
0800   0852 C0 00 00      cmp b, 0
0801   0855 C6 5E 08      je _if11_else
0802   0858             _if11_true:
0803   0858             ;; break; 
0804   0858 0A 85 0A      jmp _for10_exit ; for break
0805   085B 0A 82 0A      jmp _if11_exit
0806   085E             _if11_else:
0807   085E             ;; if(*format_p == '%'){ 
0808   085E             _if12_cond:
0809   085E FA FD FF      lea d, [bp + -3] ; $format_p
0810   0861 2A            mov b, [d]
0811   0862 74            mov d, b
0812   0863 32            mov bl, [d]
0813   0864 A7 00         mov bh, 0
0814   0866             ; START RELATIONAL
0815   0866 D7            push a
0816   0867 11            mov a, b
0817   0868 26 25 00      mov b, $25
0818   086B B0            cmp a, b
0819   086C FD 71         seq ; ==
0820   086E E4            pop a
0821   086F             ; END RELATIONAL
0822   086F C0 00 00      cmp b, 0
0823   0872 C6 66 0A      je _if12_else
0824   0875             _if12_true:
0825   0875             ;; format_p++; 
0826   0875 FA FD FF      lea d, [bp + -3] ; $format_p
0827   0878 2A            mov b, [d]
0828   0879 D8            push b
0829   087A FD 77         inc b
0830   087C FA FD FF      lea d, [bp + -3] ; $format_p
0831   087F FD 43         mov [d], b
0832   0881 E5            pop b
0833   0882             ;; switch(*format_p){ 
0834   0882             _switch13_expr:
0835   0882 FA FD FF      lea d, [bp + -3] ; $format_p
0836   0885 2A            mov b, [d]
0837   0886 74            mov d, b
0838   0887 32            mov bl, [d]
0839   0888 A7 00         mov bh, 0
0840   088A             _switch13_comparisons:
0841   088A C1 6C         cmp bl, $6c
0842   088C C6 B8 08      je _switch13_case0
0843   088F C1 4C         cmp bl, $4c
0844   0891 C6 B8 08      je _switch13_case1
0845   0894 C1 64         cmp bl, $64
0846   0896 C6 A6 09      je _switch13_case2
0847   0899 C1 69         cmp bl, $69
0848   089B C6 A6 09      je _switch13_case3
0849   089E C1 75         cmp bl, $75
0850   08A0 C6 CA 09      je _switch13_case4
0851   08A3 C1 78         cmp bl, $78
0852   08A5 C6 EE 09      je _switch13_case5
0853   08A8 C1 63         cmp bl, $63
0854   08AA C6 0C 0A      je _switch13_case6
0855   08AD C1 73         cmp bl, $73
0856   08AF C6 2B 0A      je _switch13_case7
0857   08B2 0A 4A 0A      jmp _switch13_default
0858   08B5 0A 56 0A      jmp _switch13_exit
0859   08B8             _switch13_case0:
0860   08B8             _switch13_case1:
0861   08B8             ;; format_p++; 
0862   08B8 FA FD FF      lea d, [bp + -3] ; $format_p
0863   08BB 2A            mov b, [d]
0864   08BC D8            push b
0865   08BD FD 77         inc b
0866   08BF FA FD FF      lea d, [bp + -3] ; $format_p
0867   08C2 FD 43         mov [d], b
0868   08C4 E5            pop b
0869   08C5             ;; if(*format_p == 'd' || *format_p == 'i') 
0870   08C5             _if14_cond:
0871   08C5 FA FD FF      lea d, [bp + -3] ; $format_p
0872   08C8 2A            mov b, [d]
0873   08C9 74            mov d, b
0874   08CA 32            mov bl, [d]
0875   08CB A7 00         mov bh, 0
0876   08CD             ; START RELATIONAL
0877   08CD D7            push a
0878   08CE 11            mov a, b
0879   08CF 26 64 00      mov b, $64
0880   08D2 B0            cmp a, b
0881   08D3 FD 71         seq ; ==
0882   08D5 E4            pop a
0883   08D6             ; END RELATIONAL
0884   08D6 D7            push a
0885   08D7 11            mov a, b
0886   08D8 FA FD FF      lea d, [bp + -3] ; $format_p
0887   08DB 2A            mov b, [d]
0888   08DC 74            mov d, b
0889   08DD 32            mov bl, [d]
0890   08DE A7 00         mov bh, 0
0891   08E0             ; START RELATIONAL
0892   08E0 D7            push a
0893   08E1 11            mov a, b
0894   08E2 26 69 00      mov b, $69
0895   08E5 B0            cmp a, b
0896   08E6 FD 71         seq ; ==
0897   08E8 E4            pop a
0898   08E9             ; END RELATIONAL
0899   08E9 FD A8         sor a, b ; ||
0900   08EB E4            pop a
0901   08EC C0 00 00      cmp b, 0
0902   08EF C6 14 09      je _if14_else
0903   08F2             _if14_true:
0904   08F2             ;; print_signed_long(*(long *)p); 
0905   08F2 FA FF FF      lea d, [bp + -1] ; $p
0906   08F5 2A            mov b, [d]
0907   08F6 AB            snex b
0908   08F7 FD 39         mov c, b
0909   08F9 74            mov d, b
0910   08FA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0911   08FD FD 39         mov c, b ; And place it into C
0912   08FF 2A            mov b, [d] ; Lower Word in B
0913   0900 FD 79         mov g, b
0914   0902 28            mov b, c
0915   0903 FD AB         swp b
0916   0905 D8            push b
0917   0906 FD 27         mov b, g
0918   0908 FD AB         swp b
0919   090A D8            push b
0920   090B 07 6B 0F      call print_signed_long
0921   090E 51 04 00      add sp, 4
0922   0911 0A 91 09      jmp _if14_exit
0923   0914             _if14_else:
0924   0914             ;; if(*format_p == 'u') 
0925   0914             _if15_cond:
0926   0914 FA FD FF      lea d, [bp + -3] ; $format_p
0927   0917 2A            mov b, [d]
0928   0918 74            mov d, b
0929   0919 32            mov bl, [d]
0930   091A A7 00         mov bh, 0
0931   091C             ; START RELATIONAL
0932   091C D7            push a
0933   091D 11            mov a, b
0934   091E 26 75 00      mov b, $75
0935   0921 B0            cmp a, b
0936   0922 FD 71         seq ; ==
0937   0924 E4            pop a
0938   0925             ; END RELATIONAL
0939   0925 C0 00 00      cmp b, 0
0940   0928 C6 4F 09      je _if15_else
0941   092B             _if15_true:
0942   092B             ;; print_unsigned_long(*(unsigned long *)p); 
0943   092B FA FF FF      lea d, [bp + -1] ; $p
0944   092E 2A            mov b, [d]
0945   092F A7 00         mov bh, 0
0946   0931 38 00 00      mov c, 0
0947   0934 74            mov d, b
0948   0935 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0949   0938 FD 39         mov c, b ; And place it into C
0950   093A 2A            mov b, [d] ; Lower Word in B
0951   093B FD 79         mov g, b
0952   093D 28            mov b, c
0953   093E FD AB         swp b
0954   0940 D8            push b
0955   0941 FD 27         mov b, g
0956   0943 FD AB         swp b
0957   0945 D8            push b
0958   0946 07 AB 12      call print_unsigned_long
0959   0949 51 04 00      add sp, 4
0960   094C 0A 91 09      jmp _if15_exit
0961   094F             _if15_else:
0962   094F             ;; if(*format_p == 'x') 
0963   094F             _if16_cond:
0964   094F FA FD FF      lea d, [bp + -3] ; $format_p
0965   0952 2A            mov b, [d]
0966   0953 74            mov d, b
0967   0954 32            mov bl, [d]
0968   0955 A7 00         mov bh, 0
0969   0957             ; START RELATIONAL
0970   0957 D7            push a
0971   0958 11            mov a, b
0972   0959 26 78 00      mov b, $78
0973   095C B0            cmp a, b
0974   095D FD 71         seq ; ==
0975   095F E4            pop a
0976   0960             ; END RELATIONAL
0977   0960 C0 00 00      cmp b, 0
0978   0963 C6 85 09      je _if16_else
0979   0966             _if16_true:
0980   0966             ;; printx32(*(long int *)p); 
0981   0966 FA FF FF      lea d, [bp + -1] ; $p
0982   0969 2A            mov b, [d]
0983   096A 74            mov d, b
0984   096B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0985   096E FD 39         mov c, b ; And place it into C
0986   0970 2A            mov b, [d] ; Lower Word in B
0987   0971 FD 79         mov g, b
0988   0973 28            mov b, c
0989   0974 FD AB         swp b
0990   0976 D8            push b
0991   0977 FD 27         mov b, g
0992   0979 FD AB         swp b
0993   097B D8            push b
0994   097C 07 E0 0C      call printx32
0995   097F 51 04 00      add sp, 4
0996   0982 0A 91 09      jmp _if16_exit
0997   0985             _if16_else:
0998   0985             ;; err("Unexpected format in printf."); 
0999   0985 26 75 23      mov b, _s3 ; "Unexpected format in printf."
1000   0988 FD AB         swp b
1001   098A D8            push b
1002   098B 07 CE 0C      call err
1003   098E 51 02 00      add sp, 2
1004   0991             _if16_exit:
1005   0991             _if15_exit:
1006   0991             _if14_exit:
1007   0991             ;; p = p + 4; 
1008   0991 FA FF FF      lea d, [bp + -1] ; $p
1009   0994 DA            push d
1010   0995 FA FF FF      lea d, [bp + -1] ; $p
1011   0998 2A            mov b, [d]
1012   0999             ; START TERMS
1013   0999 D7            push a
1014   099A 11            mov a, b
1015   099B 26 04 00      mov b, $4
1016   099E 56            add b, a
1017   099F E4            pop a
1018   09A0             ; END TERMS
1019   09A0 E7            pop d
1020   09A1 FD 43         mov [d], b
1021   09A3             ;; break; 
1022   09A3 0A 56 0A      jmp _switch13_exit ; case break
1023   09A6             _switch13_case2:
1024   09A6             _switch13_case3:
1025   09A6             ;; print_signed(*(int*)p); 
1026   09A6 FA FF FF      lea d, [bp + -1] ; $p
1027   09A9 2A            mov b, [d]
1028   09AA 74            mov d, b
1029   09AB 2A            mov b, [d]
1030   09AC FD AB         swp b
1031   09AE D8            push b
1032   09AF 07 74 0E      call print_signed
1033   09B2 51 02 00      add sp, 2
1034   09B5             ;; p = p + 2; 
1035   09B5 FA FF FF      lea d, [bp + -1] ; $p
1036   09B8 DA            push d
1037   09B9 FA FF FF      lea d, [bp + -1] ; $p
1038   09BC 2A            mov b, [d]
1039   09BD             ; START TERMS
1040   09BD D7            push a
1041   09BE 11            mov a, b
1042   09BF 26 02 00      mov b, $2
1043   09C2 56            add b, a
1044   09C3 E4            pop a
1045   09C4             ; END TERMS
1046   09C4 E7            pop d
1047   09C5 FD 43         mov [d], b
1048   09C7             ;; break; 
1049   09C7 0A 56 0A      jmp _switch13_exit ; case break
1050   09CA             _switch13_case4:
1051   09CA             ;; print_unsigned(*(unsigned int*)p); 
1052   09CA FA FF FF      lea d, [bp + -1] ; $p
1053   09CD 2A            mov b, [d]
1054   09CE 74            mov d, b
1055   09CF 2A            mov b, [d]
1056   09D0 FD AB         swp b
1057   09D2 D8            push b
1058   09D3 07 A6 14      call print_unsigned
1059   09D6 51 02 00      add sp, 2
1060   09D9             ;; p = p + 2; 
1061   09D9 FA FF FF      lea d, [bp + -1] ; $p
1062   09DC DA            push d
1063   09DD FA FF FF      lea d, [bp + -1] ; $p
1064   09E0 2A            mov b, [d]
1065   09E1             ; START TERMS
1066   09E1 D7            push a
1067   09E2 11            mov a, b
1068   09E3 26 02 00      mov b, $2
1069   09E6 56            add b, a
1070   09E7 E4            pop a
1071   09E8             ; END TERMS
1072   09E8 E7            pop d
1073   09E9 FD 43         mov [d], b
1074   09EB             ;; break; 
1075   09EB 0A 56 0A      jmp _switch13_exit ; case break
1076   09EE             _switch13_case5:
1077   09EE             
1078   09EE             ; --- BEGIN INLINE ASM BLOCK
1079   09EE FA FF FF      lea d, [bp + -1] ; $p
1080   09F1 FD 2A         mov d, [d]
1081   09F3 2A            mov b, [d]
1082   09F4 07 AC 18      call print_u16x
1083   09F7             ; --- END INLINE ASM BLOCK
1084   09F7             
1085   09F7             ;; p = p + 2; 
1086   09F7 FA FF FF      lea d, [bp + -1] ; $p
1087   09FA DA            push d
1088   09FB FA FF FF      lea d, [bp + -1] ; $p
1089   09FE 2A            mov b, [d]
1090   09FF             ; START TERMS
1091   09FF D7            push a
1092   0A00 11            mov a, b
1093   0A01 26 02 00      mov b, $2
1094   0A04 56            add b, a
1095   0A05 E4            pop a
1096   0A06             ; END TERMS
1097   0A06 E7            pop d
1098   0A07 FD 43         mov [d], b
1099   0A09             ;; break; 
1100   0A09 0A 56 0A      jmp _switch13_exit ; case break
1101   0A0C             _switch13_case6:
1102   0A0C             
1103   0A0C             ; --- BEGIN INLINE ASM BLOCK
1104   0A0C FA FF FF      lea d, [bp + -1] ; $p
1105   0A0F FD 2A         mov d, [d]
1106   0A11 1E            mov al, [d]
1107   0A12 23            mov ah, al
1108   0A13 07 0A 17      call _putchar
1109   0A16             ; --- END INLINE ASM BLOCK
1110   0A16             
1111   0A16             ;; p = p + 2; 
1112   0A16 FA FF FF      lea d, [bp + -1] ; $p
1113   0A19 DA            push d
1114   0A1A FA FF FF      lea d, [bp + -1] ; $p
1115   0A1D 2A            mov b, [d]
1116   0A1E             ; START TERMS
1117   0A1E D7            push a
1118   0A1F 11            mov a, b
1119   0A20 26 02 00      mov b, $2
1120   0A23 56            add b, a
1121   0A24 E4            pop a
1122   0A25             ; END TERMS
1123   0A25 E7            pop d
1124   0A26 FD 43         mov [d], b
1125   0A28             ;; break; 
1126   0A28 0A 56 0A      jmp _switch13_exit ; case break
1127   0A2B             _switch13_case7:
1128   0A2B             
1129   0A2B             ; --- BEGIN INLINE ASM BLOCK
1130   0A2B FA FF FF      lea d, [bp + -1] ; $p
1131   0A2E FD 2A         mov d, [d]
1132   0A30 FD 2A         mov d, [d]
1133   0A32 07 54 18      call _puts
1134   0A35             ; --- END INLINE ASM BLOCK
1135   0A35             
1136   0A35             ;; p = p + 2; 
1137   0A35 FA FF FF      lea d, [bp + -1] ; $p
1138   0A38 DA            push d
1139   0A39 FA FF FF      lea d, [bp + -1] ; $p
1140   0A3C 2A            mov b, [d]
1141   0A3D             ; START TERMS
1142   0A3D D7            push a
1143   0A3E 11            mov a, b
1144   0A3F 26 02 00      mov b, $2
1145   0A42 56            add b, a
1146   0A43 E4            pop a
1147   0A44             ; END TERMS
1148   0A44 E7            pop d
1149   0A45 FD 43         mov [d], b
1150   0A47             ;; break; 
1151   0A47 0A 56 0A      jmp _switch13_exit ; case break
1152   0A4A             _switch13_default:
1153   0A4A             ;; print("Error: Unknown argument type.\n"); 
1154   0A4A 26 92 23      mov b, _s4 ; "Error: Unknown argument type.\n"
1155   0A4D FD AB         swp b
1156   0A4F D8            push b
1157   0A50 07 C1 15      call print
1158   0A53 51 02 00      add sp, 2
1159   0A56             _switch13_exit:
1160   0A56             ;; format_p++; 
1161   0A56 FA FD FF      lea d, [bp + -3] ; $format_p
1162   0A59 2A            mov b, [d]
1163   0A5A D8            push b
1164   0A5B FD 77         inc b
1165   0A5D FA FD FF      lea d, [bp + -3] ; $format_p
1166   0A60 FD 43         mov [d], b
1167   0A62 E5            pop b
1168   0A63 0A 82 0A      jmp _if12_exit
1169   0A66             _if12_else:
1170   0A66             ;; putchar(*format_p); 
1171   0A66 FA FD FF      lea d, [bp + -3] ; $format_p
1172   0A69 2A            mov b, [d]
1173   0A6A 74            mov d, b
1174   0A6B 32            mov bl, [d]
1175   0A6C A7 00         mov bh, 0
1176   0A6E DD            push bl
1177   0A6F 07 79 15      call putchar
1178   0A72 51 01 00      add sp, 1
1179   0A75             ;; format_p++; 
1180   0A75 FA FD FF      lea d, [bp + -3] ; $format_p
1181   0A78 2A            mov b, [d]
1182   0A79 D8            push b
1183   0A7A FD 77         inc b
1184   0A7C FA FD FF      lea d, [bp + -3] ; $format_p
1185   0A7F FD 43         mov [d], b
1186   0A81 E5            pop b
1187   0A82             _if12_exit:
1188   0A82             _if11_exit:
1189   0A82             _for10_update:
1190   0A82 0A 45 08      jmp _for10_cond
1191   0A85             _for10_exit:
1192   0A85 F9            leave
1193   0A86 09            ret
1194   0A87             
1195   0A87             scanf:
1196   0A87 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1197   0A8A             ;; char *p, *format_p; 
1198   0A8A 52 02 00      sub sp, 2 ; p
1199   0A8D 52 02 00      sub sp, 2 ; format_p
1200   0A90             ;; char c; 
1201   0A90 52 01 00      sub sp, 1 ; c
1202   0A93             ;; int i; 
1203   0A93 52 02 00      sub sp, 2 ; i
1204   0A96             ;; char input_string[  512                    ]; 
1205   0A96 52 00 02      sub sp, 512 ; input_string
1206   0A99             ;; format_p = format; 
1207   0A99 FA FD FF      lea d, [bp + -3] ; $format_p
1208   0A9C DA            push d
1209   0A9D FA 05 00      lea d, [bp + 5] ; $format
1210   0AA0 2A            mov b, [d]
1211   0AA1 E7            pop d
1212   0AA2 FD 43         mov [d], b
1213   0AA4             ;; p = &format + 2; 
1214   0AA4 FA FF FF      lea d, [bp + -1] ; $p
1215   0AA7 DA            push d
1216   0AA8 FA 05 00      lea d, [bp + 5] ; $format
1217   0AAB 2D            mov b, d
1218   0AAC             ; START TERMS
1219   0AAC D7            push a
1220   0AAD 11            mov a, b
1221   0AAE 26 02 00      mov b, $2
1222   0AB1 56            add b, a
1223   0AB2 E4            pop a
1224   0AB3             ; END TERMS
1225   0AB3 E7            pop d
1226   0AB4 FD 43         mov [d], b
1227   0AB6             ;; for(;;){ 
1228   0AB6             _for17_init:
1229   0AB6             _for17_cond:
1230   0AB6             _for17_block:
1231   0AB6             ;; if(!*format_p) break; 
1232   0AB6             _if18_cond:
1233   0AB6 FA FD FF      lea d, [bp + -3] ; $format_p
1234   0AB9 2A            mov b, [d]
1235   0ABA 74            mov d, b
1236   0ABB 32            mov bl, [d]
1237   0ABC A7 00         mov bh, 0
1238   0ABE C0 00 00      cmp b, 0
1239   0AC1 FD 71         seq ; !
1240   0AC3 C0 00 00      cmp b, 0
1241   0AC6 C6 CF 0A      je _if18_else
1242   0AC9             _if18_true:
1243   0AC9             ;; break; 
1244   0AC9 0A CC 0C      jmp _for17_exit ; for break
1245   0ACC 0A C9 0C      jmp _if18_exit
1246   0ACF             _if18_else:
1247   0ACF             ;; if(*format_p == '%'){ 
1248   0ACF             _if19_cond:
1249   0ACF FA FD FF      lea d, [bp + -3] ; $format_p
1250   0AD2 2A            mov b, [d]
1251   0AD3 74            mov d, b
1252   0AD4 32            mov bl, [d]
1253   0AD5 A7 00         mov bh, 0
1254   0AD7             ; START RELATIONAL
1255   0AD7 D7            push a
1256   0AD8 11            mov a, b
1257   0AD9 26 25 00      mov b, $25
1258   0ADC B0            cmp a, b
1259   0ADD FD 71         seq ; ==
1260   0ADF E4            pop a
1261   0AE0             ; END RELATIONAL
1262   0AE0 C0 00 00      cmp b, 0
1263   0AE3 C6 AD 0C      je _if19_else
1264   0AE6             _if19_true:
1265   0AE6             ;; format_p++; 
1266   0AE6 FA FD FF      lea d, [bp + -3] ; $format_p
1267   0AE9 2A            mov b, [d]
1268   0AEA D8            push b
1269   0AEB FD 77         inc b
1270   0AED FA FD FF      lea d, [bp + -3] ; $format_p
1271   0AF0 FD 43         mov [d], b
1272   0AF2 E5            pop b
1273   0AF3             ;; switch(*format_p){ 
1274   0AF3             _switch20_expr:
1275   0AF3 FA FD FF      lea d, [bp + -3] ; $format_p
1276   0AF6 2A            mov b, [d]
1277   0AF7 74            mov d, b
1278   0AF8 32            mov bl, [d]
1279   0AF9 A7 00         mov bh, 0
1280   0AFB             _switch20_comparisons:
1281   0AFB C1 6C         cmp bl, $6c
1282   0AFD C6 29 0B      je _switch20_case0
1283   0B00 C1 4C         cmp bl, $4c
1284   0B02 C6 29 0B      je _switch20_case1
1285   0B05 C1 64         cmp bl, $64
1286   0B07 C6 BB 0B      je _switch20_case2
1287   0B0A C1 69         cmp bl, $69
1288   0B0C C6 BB 0B      je _switch20_case3
1289   0B0F C1 75         cmp bl, $75
1290   0B11 C6 E8 0B      je _switch20_case4
1291   0B14 C1 78         cmp bl, $78
1292   0B16 C6 15 0C      je _switch20_case5
1293   0B19 C1 63         cmp bl, $63
1294   0B1B C6 2A 0C      je _switch20_case6
1295   0B1E C1 73         cmp bl, $73
1296   0B20 C6 59 0C      je _switch20_case7
1297   0B23 0A 91 0C      jmp _switch20_default
1298   0B26 0A 9D 0C      jmp _switch20_exit
1299   0B29             _switch20_case0:
1300   0B29             _switch20_case1:
1301   0B29             ;; format_p++; 
1302   0B29 FA FD FF      lea d, [bp + -3] ; $format_p
1303   0B2C 2A            mov b, [d]
1304   0B2D D8            push b
1305   0B2E FD 77         inc b
1306   0B30 FA FD FF      lea d, [bp + -3] ; $format_p
1307   0B33 FD 43         mov [d], b
1308   0B35 E5            pop b
1309   0B36             ;; if(*format_p == 'd' || *format_p == 'i'); 
1310   0B36             _if21_cond:
1311   0B36 FA FD FF      lea d, [bp + -3] ; $format_p
1312   0B39 2A            mov b, [d]
1313   0B3A 74            mov d, b
1314   0B3B 32            mov bl, [d]
1315   0B3C A7 00         mov bh, 0
1316   0B3E             ; START RELATIONAL
1317   0B3E D7            push a
1318   0B3F 11            mov a, b
1319   0B40 26 64 00      mov b, $64
1320   0B43 B0            cmp a, b
1321   0B44 FD 71         seq ; ==
1322   0B46 E4            pop a
1323   0B47             ; END RELATIONAL
1324   0B47 D7            push a
1325   0B48 11            mov a, b
1326   0B49 FA FD FF      lea d, [bp + -3] ; $format_p
1327   0B4C 2A            mov b, [d]
1328   0B4D 74            mov d, b
1329   0B4E 32            mov bl, [d]
1330   0B4F A7 00         mov bh, 0
1331   0B51             ; START RELATIONAL
1332   0B51 D7            push a
1333   0B52 11            mov a, b
1334   0B53 26 69 00      mov b, $69
1335   0B56 B0            cmp a, b
1336   0B57 FD 71         seq ; ==
1337   0B59 E4            pop a
1338   0B5A             ; END RELATIONAL
1339   0B5A FD A8         sor a, b ; ||
1340   0B5C E4            pop a
1341   0B5D C0 00 00      cmp b, 0
1342   0B60 C6 66 0B      je _if21_else
1343   0B63             _if21_true:
1344   0B63             ;; ; 
1345   0B63 0A A6 0B      jmp _if21_exit
1346   0B66             _if21_else:
1347   0B66             ;; if(*format_p == 'u'); 
1348   0B66             _if22_cond:
1349   0B66 FA FD FF      lea d, [bp + -3] ; $format_p
1350   0B69 2A            mov b, [d]
1351   0B6A 74            mov d, b
1352   0B6B 32            mov bl, [d]
1353   0B6C A7 00         mov bh, 0
1354   0B6E             ; START RELATIONAL
1355   0B6E D7            push a
1356   0B6F 11            mov a, b
1357   0B70 26 75 00      mov b, $75
1358   0B73 B0            cmp a, b
1359   0B74 FD 71         seq ; ==
1360   0B76 E4            pop a
1361   0B77             ; END RELATIONAL
1362   0B77 C0 00 00      cmp b, 0
1363   0B7A C6 80 0B      je _if22_else
1364   0B7D             _if22_true:
1365   0B7D             ;; ; 
1366   0B7D 0A A6 0B      jmp _if22_exit
1367   0B80             _if22_else:
1368   0B80             ;; if(*format_p == 'x'); 
1369   0B80             _if23_cond:
1370   0B80 FA FD FF      lea d, [bp + -3] ; $format_p
1371   0B83 2A            mov b, [d]
1372   0B84 74            mov d, b
1373   0B85 32            mov bl, [d]
1374   0B86 A7 00         mov bh, 0
1375   0B88             ; START RELATIONAL
1376   0B88 D7            push a
1377   0B89 11            mov a, b
1378   0B8A 26 78 00      mov b, $78
1379   0B8D B0            cmp a, b
1380   0B8E FD 71         seq ; ==
1381   0B90 E4            pop a
1382   0B91             ; END RELATIONAL
1383   0B91 C0 00 00      cmp b, 0
1384   0B94 C6 9A 0B      je _if23_else
1385   0B97             _if23_true:
1386   0B97             ;; ; 
1387   0B97 0A A6 0B      jmp _if23_exit
1388   0B9A             _if23_else:
1389   0B9A             ;; err("Unexpected format in printf."); 
1390   0B9A 26 75 23      mov b, _s3 ; "Unexpected format in printf."
1391   0B9D FD AB         swp b
1392   0B9F D8            push b
1393   0BA0 07 CE 0C      call err
1394   0BA3 51 02 00      add sp, 2
1395   0BA6             _if23_exit:
1396   0BA6             _if22_exit:
1397   0BA6             _if21_exit:
1398   0BA6             ;; p = p + 4; 
1399   0BA6 FA FF FF      lea d, [bp + -1] ; $p
1400   0BA9 DA            push d
1401   0BAA FA FF FF      lea d, [bp + -1] ; $p
1402   0BAD 2A            mov b, [d]
1403   0BAE             ; START TERMS
1404   0BAE D7            push a
1405   0BAF 11            mov a, b
1406   0BB0 26 04 00      mov b, $4
1407   0BB3 56            add b, a
1408   0BB4 E4            pop a
1409   0BB5             ; END TERMS
1410   0BB5 E7            pop d
1411   0BB6 FD 43         mov [d], b
1412   0BB8             ;; break; 
1413   0BB8 0A 9D 0C      jmp _switch20_exit ; case break
1414   0BBB             _switch20_case2:
1415   0BBB             _switch20_case3:
1416   0BBB             ;; i = scann(); 
1417   0BBB FA FA FF      lea d, [bp + -6] ; $i
1418   0BBE DA            push d
1419   0BBF 07 9C 15      call scann
1420   0BC2 E7            pop d
1421   0BC3 FD 43         mov [d], b
1422   0BC5             ;; **(int **)p = i; 
1423   0BC5 FA FF FF      lea d, [bp + -1] ; $p
1424   0BC8 2A            mov b, [d]
1425   0BC9 74            mov d, b
1426   0BCA 2A            mov b, [d]
1427   0BCB D8            push b
1428   0BCC FA FA FF      lea d, [bp + -6] ; $i
1429   0BCF 2A            mov b, [d]
1430   0BD0 E7            pop d
1431   0BD1 FD 43         mov [d], b
1432   0BD3             ;; p = p + 2; 
1433   0BD3 FA FF FF      lea d, [bp + -1] ; $p
1434   0BD6 DA            push d
1435   0BD7 FA FF FF      lea d, [bp + -1] ; $p
1436   0BDA 2A            mov b, [d]
1437   0BDB             ; START TERMS
1438   0BDB D7            push a
1439   0BDC 11            mov a, b
1440   0BDD 26 02 00      mov b, $2
1441   0BE0 56            add b, a
1442   0BE1 E4            pop a
1443   0BE2             ; END TERMS
1444   0BE2 E7            pop d
1445   0BE3 FD 43         mov [d], b
1446   0BE5             ;; break; 
1447   0BE5 0A 9D 0C      jmp _switch20_exit ; case break
1448   0BE8             _switch20_case4:
1449   0BE8             ;; i = scann(); 
1450   0BE8 FA FA FF      lea d, [bp + -6] ; $i
1451   0BEB DA            push d
1452   0BEC 07 9C 15      call scann
1453   0BEF E7            pop d
1454   0BF0 FD 43         mov [d], b
1455   0BF2             ;; **(int **)p = i; 
1456   0BF2 FA FF FF      lea d, [bp + -1] ; $p
1457   0BF5 2A            mov b, [d]
1458   0BF6 74            mov d, b
1459   0BF7 2A            mov b, [d]
1460   0BF8 D8            push b
1461   0BF9 FA FA FF      lea d, [bp + -6] ; $i
1462   0BFC 2A            mov b, [d]
1463   0BFD E7            pop d
1464   0BFE FD 43         mov [d], b
1465   0C00             ;; p = p + 2; 
1466   0C00 FA FF FF      lea d, [bp + -1] ; $p
1467   0C03 DA            push d
1468   0C04 FA FF FF      lea d, [bp + -1] ; $p
1469   0C07 2A            mov b, [d]
1470   0C08             ; START TERMS
1471   0C08 D7            push a
1472   0C09 11            mov a, b
1473   0C0A 26 02 00      mov b, $2
1474   0C0D 56            add b, a
1475   0C0E E4            pop a
1476   0C0F             ; END TERMS
1477   0C0F E7            pop d
1478   0C10 FD 43         mov [d], b
1479   0C12             ;; break; 
1480   0C12 0A 9D 0C      jmp _switch20_exit ; case break
1481   0C15             _switch20_case5:
1482   0C15             ;; p = p + 2; 
1483   0C15 FA FF FF      lea d, [bp + -1] ; $p
1484   0C18 DA            push d
1485   0C19 FA FF FF      lea d, [bp + -1] ; $p
1486   0C1C 2A            mov b, [d]
1487   0C1D             ; START TERMS
1488   0C1D D7            push a
1489   0C1E 11            mov a, b
1490   0C1F 26 02 00      mov b, $2
1491   0C22 56            add b, a
1492   0C23 E4            pop a
1493   0C24             ; END TERMS
1494   0C24 E7            pop d
1495   0C25 FD 43         mov [d], b
1496   0C27             ;; break; 
1497   0C27 0A 9D 0C      jmp _switch20_exit ; case break
1498   0C2A             _switch20_case6:
1499   0C2A             ;; c = getchar(); 
1500   0C2A FA FC FF      lea d, [bp + -4] ; $c
1501   0C2D DA            push d
1502   0C2E 07 86 15      call getchar
1503   0C31 E7            pop d
1504   0C32 FD 3E         mov [d], bl
1505   0C34             ;; **(char **)p = c; 
1506   0C34 FA FF FF      lea d, [bp + -1] ; $p
1507   0C37 2A            mov b, [d]
1508   0C38 74            mov d, b
1509   0C39 2A            mov b, [d]
1510   0C3A D8            push b
1511   0C3B FA FC FF      lea d, [bp + -4] ; $c
1512   0C3E 32            mov bl, [d]
1513   0C3F A7 00         mov bh, 0
1514   0C41 E7            pop d
1515   0C42 FD 43         mov [d], b
1516   0C44             ;; p = p + 2; 
1517   0C44 FA FF FF      lea d, [bp + -1] ; $p
1518   0C47 DA            push d
1519   0C48 FA FF FF      lea d, [bp + -1] ; $p
1520   0C4B 2A            mov b, [d]
1521   0C4C             ; START TERMS
1522   0C4C D7            push a
1523   0C4D 11            mov a, b
1524   0C4E 26 02 00      mov b, $2
1525   0C51 56            add b, a
1526   0C52 E4            pop a
1527   0C53             ; END TERMS
1528   0C53 E7            pop d
1529   0C54 FD 43         mov [d], b
1530   0C56             ;; break; 
1531   0C56 0A 9D 0C      jmp _switch20_exit ; case break
1532   0C59             _switch20_case7:
1533   0C59             ;; gets(input_string); 
1534   0C59 FA FA FD      lea d, [bp + -518] ; $input_string
1535   0C5C 2D            mov b, d
1536   0C5D FD AB         swp b
1537   0C5F D8            push b
1538   0C60 07 5A 0E      call gets
1539   0C63 51 02 00      add sp, 2
1540   0C66             ;; strcpy(*(char **)p, input_string); 
1541   0C66 FA FA FD      lea d, [bp + -518] ; $input_string
1542   0C69 2D            mov b, d
1543   0C6A FD AB         swp b
1544   0C6C D8            push b
1545   0C6D FA FF FF      lea d, [bp + -1] ; $p
1546   0C70 2A            mov b, [d]
1547   0C71 74            mov d, b
1548   0C72 2A            mov b, [d]
1549   0C73 FD AB         swp b
1550   0C75 D8            push b
1551   0C76 07 7B 04      call strcpy
1552   0C79 51 04 00      add sp, 4
1553   0C7C             ;; p = p + 2; 
1554   0C7C FA FF FF      lea d, [bp + -1] ; $p
1555   0C7F DA            push d
1556   0C80 FA FF FF      lea d, [bp + -1] ; $p
1557   0C83 2A            mov b, [d]
1558   0C84             ; START TERMS
1559   0C84 D7            push a
1560   0C85 11            mov a, b
1561   0C86 26 02 00      mov b, $2
1562   0C89 56            add b, a
1563   0C8A E4            pop a
1564   0C8B             ; END TERMS
1565   0C8B E7            pop d
1566   0C8C FD 43         mov [d], b
1567   0C8E             ;; break; 
1568   0C8E 0A 9D 0C      jmp _switch20_exit ; case break
1569   0C91             _switch20_default:
1570   0C91             ;; print("Error: Unknown argument type.\n"); 
1571   0C91 26 92 23      mov b, _s4 ; "Error: Unknown argument type.\n"
1572   0C94 FD AB         swp b
1573   0C96 D8            push b
1574   0C97 07 C1 15      call print
1575   0C9A 51 02 00      add sp, 2
1576   0C9D             _switch20_exit:
1577   0C9D             ;; format_p++; 
1578   0C9D FA FD FF      lea d, [bp + -3] ; $format_p
1579   0CA0 2A            mov b, [d]
1580   0CA1 D8            push b
1581   0CA2 FD 77         inc b
1582   0CA4 FA FD FF      lea d, [bp + -3] ; $format_p
1583   0CA7 FD 43         mov [d], b
1584   0CA9 E5            pop b
1585   0CAA 0A C9 0C      jmp _if19_exit
1586   0CAD             _if19_else:
1587   0CAD             ;; putchar(*format_p); 
1588   0CAD FA FD FF      lea d, [bp + -3] ; $format_p
1589   0CB0 2A            mov b, [d]
1590   0CB1 74            mov d, b
1591   0CB2 32            mov bl, [d]
1592   0CB3 A7 00         mov bh, 0
1593   0CB5 DD            push bl
1594   0CB6 07 79 15      call putchar
1595   0CB9 51 01 00      add sp, 1
1596   0CBC             ;; format_p++; 
1597   0CBC FA FD FF      lea d, [bp + -3] ; $format_p
1598   0CBF 2A            mov b, [d]
1599   0CC0 D8            push b
1600   0CC1 FD 77         inc b
1601   0CC3 FA FD FF      lea d, [bp + -3] ; $format_p
1602   0CC6 FD 43         mov [d], b
1603   0CC8 E5            pop b
1604   0CC9             _if19_exit:
1605   0CC9             _if18_exit:
1606   0CC9             _for17_update:
1607   0CC9 0A B6 0A      jmp _for17_cond
1608   0CCC             _for17_exit:
1609   0CCC F9            leave
1610   0CCD 09            ret
1611   0CCE             
1612   0CCE             err:
1613   0CCE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1614   0CD1             ;; print(e); 
1615   0CD1 FA 05 00      lea d, [bp + 5] ; $e
1616   0CD4 2A            mov b, [d]
1617   0CD5 FD AB         swp b
1618   0CD7 D8            push b
1619   0CD8 07 C1 15      call print
1620   0CDB 51 02 00      add sp, 2
1621   0CDE F9            leave
1622   0CDF 09            ret
1623   0CE0             
1624   0CE0             printx32:
1625   0CE0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1626   0CE3             
1627   0CE3             ; --- BEGIN INLINE ASM BLOCK
1628   0CE3 FA 05 00      lea d, [bp + 5] ; $hex
1629   0CE6 2B 02 00      mov b, [d+2]
1630   0CE9 07 AC 18      call print_u16x
1631   0CEC 2A            mov b, [d]
1632   0CED 07 AC 18      call print_u16x
1633   0CF0             ; --- END INLINE ASM BLOCK
1634   0CF0             
1635   0CF0 F9            leave
1636   0CF1 09            ret
1637   0CF2             
1638   0CF2             printx16:
1639   0CF2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1640   0CF5             
1641   0CF5             ; --- BEGIN INLINE ASM BLOCK
1642   0CF5 FA 05 00      lea d, [bp + 5] ; $hex
1643   0CF8 2A            mov b, [d]
1644   0CF9 07 AC 18      call print_u16x
1645   0CFC             ; --- END INLINE ASM BLOCK
1646   0CFC             
1647   0CFC F9            leave
1648   0CFD 09            ret
1649   0CFE             
1650   0CFE             printx8:
1651   0CFE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1652   0D01             
1653   0D01             ; --- BEGIN INLINE ASM BLOCK
1654   0D01 FA 05 00      lea d, [bp + 5] ; $hex
1655   0D04 32            mov bl, [d]
1656   0D05 07 F0 18      call print_u8x
1657   0D08             ; --- END INLINE ASM BLOCK
1658   0D08             
1659   0D08 F9            leave
1660   0D09 09            ret
1661   0D0A             
1662   0D0A             hex_str_to_int:
1663   0D0A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1664   0D0D             ;; int value = 0; 
1665   0D0D 52 02 00      sub sp, 2 ; value
1666   0D10             ; --- START LOCAL VAR INITIALIZATION
1667   0D10 FA FF FF      lea d, [bp + -1] ; $value
1668   0D13 DA            push d
1669   0D14 26 00 00      mov b, $0
1670   0D17 E7            pop d
1671   0D18 FD 43         mov [d], b
1672   0D1A             ; --- END LOCAL VAR INITIALIZATION
1673   0D1A             ;; int i; 
1674   0D1A 52 02 00      sub sp, 2 ; i
1675   0D1D             ;; char hex_char; 
1676   0D1D 52 01 00      sub sp, 1 ; hex_char
1677   0D20             ;; int len; 
1678   0D20 52 02 00      sub sp, 2 ; len
1679   0D23             ;; len = strlen(hex_string); 
1680   0D23 FA FA FF      lea d, [bp + -6] ; $len
1681   0D26 DA            push d
1682   0D27 FA 05 00      lea d, [bp + 5] ; $hex_string
1683   0D2A 2A            mov b, [d]
1684   0D2B FD AB         swp b
1685   0D2D D8            push b
1686   0D2E 07 F5 05      call strlen
1687   0D31 51 02 00      add sp, 2
1688   0D34 E7            pop d
1689   0D35 FD 43         mov [d], b
1690   0D37             ;; for (i = 0; i < len; i++) { 
1691   0D37             _for24_init:
1692   0D37 FA FD FF      lea d, [bp + -3] ; $i
1693   0D3A DA            push d
1694   0D3B 26 00 00      mov b, $0
1695   0D3E E7            pop d
1696   0D3F FD 43         mov [d], b
1697   0D41             _for24_cond:
1698   0D41 FA FD FF      lea d, [bp + -3] ; $i
1699   0D44 2A            mov b, [d]
1700   0D45             ; START RELATIONAL
1701   0D45 D7            push a
1702   0D46 11            mov a, b
1703   0D47 FA FA FF      lea d, [bp + -6] ; $len
1704   0D4A 2A            mov b, [d]
1705   0D4B B0            cmp a, b
1706   0D4C FD 73         slt ; < (signed)
1707   0D4E E4            pop a
1708   0D4F             ; END RELATIONAL
1709   0D4F C0 00 00      cmp b, 0
1710   0D52 C6 54 0E      je _for24_exit
1711   0D55             _for24_block:
1712   0D55             ;; hex_char = hex_string[i]; 
1713   0D55 FA FC FF      lea d, [bp + -4] ; $hex_char
1714   0D58 DA            push d
1715   0D59 FA 05 00      lea d, [bp + 5] ; $hex_string
1716   0D5C FD 2A         mov d, [d]
1717   0D5E D7            push a
1718   0D5F DA            push d
1719   0D60 FA FD FF      lea d, [bp + -3] ; $i
1720   0D63 2A            mov b, [d]
1721   0D64 E7            pop d
1722   0D65 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1723   0D69 E4            pop a
1724   0D6A 32            mov bl, [d]
1725   0D6B A7 00         mov bh, 0
1726   0D6D E7            pop d
1727   0D6E FD 3E         mov [d], bl
1728   0D70             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1729   0D70             _if25_cond:
1730   0D70 FA FC FF      lea d, [bp + -4] ; $hex_char
1731   0D73 32            mov bl, [d]
1732   0D74 A7 00         mov bh, 0
1733   0D76             ; START RELATIONAL
1734   0D76 D7            push a
1735   0D77 11            mov a, b
1736   0D78 26 61 00      mov b, $61
1737   0D7B B0            cmp a, b
1738   0D7C FD 80         sge ; >=
1739   0D7E E4            pop a
1740   0D7F             ; END RELATIONAL
1741   0D7F D7            push a
1742   0D80 11            mov a, b
1743   0D81 FA FC FF      lea d, [bp + -4] ; $hex_char
1744   0D84 32            mov bl, [d]
1745   0D85 A7 00         mov bh, 0
1746   0D87             ; START RELATIONAL
1747   0D87 D7            push a
1748   0D88 11            mov a, b
1749   0D89 26 66 00      mov b, $66
1750   0D8C B0            cmp a, b
1751   0D8D FD 73         slt ; <= (signed)
1752   0D8F E4            pop a
1753   0D90             ; END RELATIONAL
1754   0D90 FD A7         sand a, b
1755   0D92 E4            pop a
1756   0D93 C0 00 00      cmp b, 0
1757   0D96 C6 C7 0D      je _if25_else
1758   0D99             _if25_true:
1759   0D99             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1760   0D99 FA FF FF      lea d, [bp + -1] ; $value
1761   0D9C DA            push d
1762   0D9D FA FF FF      lea d, [bp + -1] ; $value
1763   0DA0 2A            mov b, [d]
1764   0DA1             ; START FACTORS
1765   0DA1 D7            push a
1766   0DA2 11            mov a, b
1767   0DA3 26 10 00      mov b, $10
1768   0DA6 AC            mul a, b ; *
1769   0DA7 11            mov a, b
1770   0DA8 27            mov b, a
1771   0DA9 E4            pop a
1772   0DAA             ; END FACTORS
1773   0DAA             ; START TERMS
1774   0DAA D7            push a
1775   0DAB 11            mov a, b
1776   0DAC FA FC FF      lea d, [bp + -4] ; $hex_char
1777   0DAF 32            mov bl, [d]
1778   0DB0 A7 00         mov bh, 0
1779   0DB2             ; START TERMS
1780   0DB2 D7            push a
1781   0DB3 11            mov a, b
1782   0DB4 26 61 00      mov b, $61
1783   0DB7 60            sub a, b
1784   0DB8 27            mov b, a
1785   0DB9 11            mov a, b
1786   0DBA 26 0A 00      mov b, $a
1787   0DBD 56            add b, a
1788   0DBE E4            pop a
1789   0DBF             ; END TERMS
1790   0DBF 56            add b, a
1791   0DC0 E4            pop a
1792   0DC1             ; END TERMS
1793   0DC1 E7            pop d
1794   0DC2 FD 43         mov [d], b
1795   0DC4 0A 44 0E      jmp _if25_exit
1796   0DC7             _if25_else:
1797   0DC7             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1798   0DC7             _if26_cond:
1799   0DC7 FA FC FF      lea d, [bp + -4] ; $hex_char
1800   0DCA 32            mov bl, [d]
1801   0DCB A7 00         mov bh, 0
1802   0DCD             ; START RELATIONAL
1803   0DCD D7            push a
1804   0DCE 11            mov a, b
1805   0DCF 26 41 00      mov b, $41
1806   0DD2 B0            cmp a, b
1807   0DD3 FD 80         sge ; >=
1808   0DD5 E4            pop a
1809   0DD6             ; END RELATIONAL
1810   0DD6 D7            push a
1811   0DD7 11            mov a, b
1812   0DD8 FA FC FF      lea d, [bp + -4] ; $hex_char
1813   0DDB 32            mov bl, [d]
1814   0DDC A7 00         mov bh, 0
1815   0DDE             ; START RELATIONAL
1816   0DDE D7            push a
1817   0DDF 11            mov a, b
1818   0DE0 26 46 00      mov b, $46
1819   0DE3 B0            cmp a, b
1820   0DE4 FD 73         slt ; <= (signed)
1821   0DE6 E4            pop a
1822   0DE7             ; END RELATIONAL
1823   0DE7 FD A7         sand a, b
1824   0DE9 E4            pop a
1825   0DEA C0 00 00      cmp b, 0
1826   0DED C6 1E 0E      je _if26_else
1827   0DF0             _if26_true:
1828   0DF0             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1829   0DF0 FA FF FF      lea d, [bp + -1] ; $value
1830   0DF3 DA            push d
1831   0DF4 FA FF FF      lea d, [bp + -1] ; $value
1832   0DF7 2A            mov b, [d]
1833   0DF8             ; START FACTORS
1834   0DF8 D7            push a
1835   0DF9 11            mov a, b
1836   0DFA 26 10 00      mov b, $10
1837   0DFD AC            mul a, b ; *
1838   0DFE 11            mov a, b
1839   0DFF 27            mov b, a
1840   0E00 E4            pop a
1841   0E01             ; END FACTORS
1842   0E01             ; START TERMS
1843   0E01 D7            push a
1844   0E02 11            mov a, b
1845   0E03 FA FC FF      lea d, [bp + -4] ; $hex_char
1846   0E06 32            mov bl, [d]
1847   0E07 A7 00         mov bh, 0
1848   0E09             ; START TERMS
1849   0E09 D7            push a
1850   0E0A 11            mov a, b
1851   0E0B 26 41 00      mov b, $41
1852   0E0E 60            sub a, b
1853   0E0F 27            mov b, a
1854   0E10 11            mov a, b
1855   0E11 26 0A 00      mov b, $a
1856   0E14 56            add b, a
1857   0E15 E4            pop a
1858   0E16             ; END TERMS
1859   0E16 56            add b, a
1860   0E17 E4            pop a
1861   0E18             ; END TERMS
1862   0E18 E7            pop d
1863   0E19 FD 43         mov [d], b
1864   0E1B 0A 44 0E      jmp _if26_exit
1865   0E1E             _if26_else:
1866   0E1E             ;; value = (value * 16) + (hex_char - '0'); 
1867   0E1E FA FF FF      lea d, [bp + -1] ; $value
1868   0E21 DA            push d
1869   0E22 FA FF FF      lea d, [bp + -1] ; $value
1870   0E25 2A            mov b, [d]
1871   0E26             ; START FACTORS
1872   0E26 D7            push a
1873   0E27 11            mov a, b
1874   0E28 26 10 00      mov b, $10
1875   0E2B AC            mul a, b ; *
1876   0E2C 11            mov a, b
1877   0E2D 27            mov b, a
1878   0E2E E4            pop a
1879   0E2F             ; END FACTORS
1880   0E2F             ; START TERMS
1881   0E2F D7            push a
1882   0E30 11            mov a, b
1883   0E31 FA FC FF      lea d, [bp + -4] ; $hex_char
1884   0E34 32            mov bl, [d]
1885   0E35 A7 00         mov bh, 0
1886   0E37             ; START TERMS
1887   0E37 D7            push a
1888   0E38 11            mov a, b
1889   0E39 26 30 00      mov b, $30
1890   0E3C 60            sub a, b
1891   0E3D 27            mov b, a
1892   0E3E E4            pop a
1893   0E3F             ; END TERMS
1894   0E3F 56            add b, a
1895   0E40 E4            pop a
1896   0E41             ; END TERMS
1897   0E41 E7            pop d
1898   0E42 FD 43         mov [d], b
1899   0E44             _if26_exit:
1900   0E44             _if25_exit:
1901   0E44             _for24_update:
1902   0E44 FA FD FF      lea d, [bp + -3] ; $i
1903   0E47 2A            mov b, [d]
1904   0E48 D8            push b
1905   0E49 FD 77         inc b
1906   0E4B FA FD FF      lea d, [bp + -3] ; $i
1907   0E4E FD 43         mov [d], b
1908   0E50 E5            pop b
1909   0E51 0A 41 0D      jmp _for24_cond
1910   0E54             _for24_exit:
1911   0E54             ;; return value; 
1912   0E54 FA FF FF      lea d, [bp + -1] ; $value
1913   0E57 2A            mov b, [d]
1914   0E58 F9            leave
1915   0E59 09            ret
1916   0E5A             
1917   0E5A             gets:
1918   0E5A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1919   0E5D             
1920   0E5D             ; --- BEGIN INLINE ASM BLOCK
1921   0E5D FA 05 00      lea d, [bp + 5] ; $s
1922   0E60 15            mov a, [d]
1923   0E61 3C            mov d, a
1924   0E62 07 11 17      call _gets
1925   0E65             ; --- END INLINE ASM BLOCK
1926   0E65             
1927   0E65             ;; return strlen(s); 
1928   0E65 FA 05 00      lea d, [bp + 5] ; $s
1929   0E68 2A            mov b, [d]
1930   0E69 FD AB         swp b
1931   0E6B D8            push b
1932   0E6C 07 F5 05      call strlen
1933   0E6F 51 02 00      add sp, 2
1934   0E72 F9            leave
1935   0E73 09            ret
1936   0E74             
1937   0E74             print_signed:
1938   0E74 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1939   0E77             ;; char digits[5]; 
1940   0E77 52 05 00      sub sp, 5 ; digits
1941   0E7A             ;; int i = 0; 
1942   0E7A 52 02 00      sub sp, 2 ; i
1943   0E7D             ; --- START LOCAL VAR INITIALIZATION
1944   0E7D FA FA FF      lea d, [bp + -6] ; $i
1945   0E80 DA            push d
1946   0E81 26 00 00      mov b, $0
1947   0E84 E7            pop d
1948   0E85 FD 43         mov [d], b
1949   0E87             ; --- END LOCAL VAR INITIALIZATION
1950   0E87             ;; if (num < 0) { 
1951   0E87             _if27_cond:
1952   0E87 FA 05 00      lea d, [bp + 5] ; $num
1953   0E8A 2A            mov b, [d]
1954   0E8B             ; START RELATIONAL
1955   0E8B D7            push a
1956   0E8C 11            mov a, b
1957   0E8D 26 00 00      mov b, $0
1958   0E90 B0            cmp a, b
1959   0E91 FD 73         slt ; < (signed)
1960   0E93 E4            pop a
1961   0E94             ; END RELATIONAL
1962   0E94 C0 00 00      cmp b, 0
1963   0E97 C6 B4 0E      je _if27_else
1964   0E9A             _if27_true:
1965   0E9A             ;; putchar('-'); 
1966   0E9A 26 2D 00      mov b, $2d
1967   0E9D DD            push bl
1968   0E9E 07 79 15      call putchar
1969   0EA1 51 01 00      add sp, 1
1970   0EA4             ;; num = -num; 
1971   0EA4 FA 05 00      lea d, [bp + 5] ; $num
1972   0EA7 DA            push d
1973   0EA8 FA 05 00      lea d, [bp + 5] ; $num
1974   0EAB 2A            mov b, [d]
1975   0EAC FD 97         neg b
1976   0EAE E7            pop d
1977   0EAF FD 43         mov [d], b
1978   0EB1 0A D6 0E      jmp _if27_exit
1979   0EB4             _if27_else:
1980   0EB4             ;; if (num == 0) { 
1981   0EB4             _if28_cond:
1982   0EB4 FA 05 00      lea d, [bp + 5] ; $num
1983   0EB7 2A            mov b, [d]
1984   0EB8             ; START RELATIONAL
1985   0EB8 D7            push a
1986   0EB9 11            mov a, b
1987   0EBA 26 00 00      mov b, $0
1988   0EBD B0            cmp a, b
1989   0EBE FD 71         seq ; ==
1990   0EC0 E4            pop a
1991   0EC1             ; END RELATIONAL
1992   0EC1 C0 00 00      cmp b, 0
1993   0EC4 C6 D6 0E      je _if28_exit
1994   0EC7             _if28_true:
1995   0EC7             ;; putchar('0'); 
1996   0EC7 26 30 00      mov b, $30
1997   0ECA DD            push bl
1998   0ECB 07 79 15      call putchar
1999   0ECE 51 01 00      add sp, 1
2000   0ED1             ;; return; 
2001   0ED1 F9            leave
2002   0ED2 09            ret
2003   0ED3 0A D6 0E      jmp _if28_exit
2004   0ED6             _if28_exit:
2005   0ED6             _if27_exit:
2006   0ED6             ;; while (num > 0) { 
2007   0ED6             _while29_cond:
2008   0ED6 FA 05 00      lea d, [bp + 5] ; $num
2009   0ED9 2A            mov b, [d]
2010   0EDA             ; START RELATIONAL
2011   0EDA D7            push a
2012   0EDB 11            mov a, b
2013   0EDC 26 00 00      mov b, $0
2014   0EDF B0            cmp a, b
2015   0EE0 FD 7F         sgt ; >
2016   0EE2 E4            pop a
2017   0EE3             ; END RELATIONAL
2018   0EE3 C0 00 00      cmp b, 0
2019   0EE6 C6 30 0F      je _while29_exit
2020   0EE9             _while29_block:
2021   0EE9             ;; digits[i] = '0' + (num % 10); 
2022   0EE9 FA FC FF      lea d, [bp + -4] ; $digits
2023   0EEC D7            push a
2024   0EED DA            push d
2025   0EEE FA FA FF      lea d, [bp + -6] ; $i
2026   0EF1 2A            mov b, [d]
2027   0EF2 E7            pop d
2028   0EF3 5A            add d, b
2029   0EF4 E4            pop a
2030   0EF5 DA            push d
2031   0EF6 26 30 00      mov b, $30
2032   0EF9             ; START TERMS
2033   0EF9 D7            push a
2034   0EFA 11            mov a, b
2035   0EFB FA 05 00      lea d, [bp + 5] ; $num
2036   0EFE 2A            mov b, [d]
2037   0EFF             ; START FACTORS
2038   0EFF D7            push a
2039   0F00 11            mov a, b
2040   0F01 26 0A 00      mov b, $a
2041   0F04 AE            div a, b ; 
2042   0F05 11            mov a, b
2043   0F06 27            mov b, a
2044   0F07 E4            pop a
2045   0F08             ; END FACTORS
2046   0F08 56            add b, a
2047   0F09 E4            pop a
2048   0F0A             ; END TERMS
2049   0F0A E7            pop d
2050   0F0B FD 3E         mov [d], bl
2051   0F0D             ;; num = num / 10; 
2052   0F0D FA 05 00      lea d, [bp + 5] ; $num
2053   0F10 DA            push d
2054   0F11 FA 05 00      lea d, [bp + 5] ; $num
2055   0F14 2A            mov b, [d]
2056   0F15             ; START FACTORS
2057   0F15 D7            push a
2058   0F16 11            mov a, b
2059   0F17 26 0A 00      mov b, $a
2060   0F1A AE            div a, b
2061   0F1B 27            mov b, a
2062   0F1C E4            pop a
2063   0F1D             ; END FACTORS
2064   0F1D E7            pop d
2065   0F1E FD 43         mov [d], b
2066   0F20             ;; i++; 
2067   0F20 FA FA FF      lea d, [bp + -6] ; $i
2068   0F23 2A            mov b, [d]
2069   0F24 D8            push b
2070   0F25 FD 77         inc b
2071   0F27 FA FA FF      lea d, [bp + -6] ; $i
2072   0F2A FD 43         mov [d], b
2073   0F2C E5            pop b
2074   0F2D 0A D6 0E      jmp _while29_cond
2075   0F30             _while29_exit:
2076   0F30             ;; while (i > 0) { 
2077   0F30             _while30_cond:
2078   0F30 FA FA FF      lea d, [bp + -6] ; $i
2079   0F33 2A            mov b, [d]
2080   0F34             ; START RELATIONAL
2081   0F34 D7            push a
2082   0F35 11            mov a, b
2083   0F36 26 00 00      mov b, $0
2084   0F39 B0            cmp a, b
2085   0F3A FD 7F         sgt ; >
2086   0F3C E4            pop a
2087   0F3D             ; END RELATIONAL
2088   0F3D C0 00 00      cmp b, 0
2089   0F40 C6 69 0F      je _while30_exit
2090   0F43             _while30_block:
2091   0F43             ;; i--; 
2092   0F43 FA FA FF      lea d, [bp + -6] ; $i
2093   0F46 2A            mov b, [d]
2094   0F47 D8            push b
2095   0F48 FD 7D         dec b
2096   0F4A FA FA FF      lea d, [bp + -6] ; $i
2097   0F4D FD 43         mov [d], b
2098   0F4F E5            pop b
2099   0F50             ;; putchar(digits[i]); 
2100   0F50 FA FC FF      lea d, [bp + -4] ; $digits
2101   0F53 D7            push a
2102   0F54 DA            push d
2103   0F55 FA FA FF      lea d, [bp + -6] ; $i
2104   0F58 2A            mov b, [d]
2105   0F59 E7            pop d
2106   0F5A 5A            add d, b
2107   0F5B E4            pop a
2108   0F5C 32            mov bl, [d]
2109   0F5D A7 00         mov bh, 0
2110   0F5F DD            push bl
2111   0F60 07 79 15      call putchar
2112   0F63 51 01 00      add sp, 1
2113   0F66 0A 30 0F      jmp _while30_cond
2114   0F69             _while30_exit:
2115   0F69 F9            leave
2116   0F6A 09            ret
2117   0F6B             
2118   0F6B             print_signed_long:
2119   0F6B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2120   0F6E             ;; char digits[10]; 
2121   0F6E 52 0A 00      sub sp, 10 ; digits
2122   0F71             ;; int i = 0; 
2123   0F71 52 02 00      sub sp, 2 ; i
2124   0F74             ; --- START LOCAL VAR INITIALIZATION
2125   0F74 FA F5 FF      lea d, [bp + -11] ; $i
2126   0F77 DA            push d
2127   0F78 26 00 00      mov b, $0
2128   0F7B E7            pop d
2129   0F7C FD 43         mov [d], b
2130   0F7E             ; --- END LOCAL VAR INITIALIZATION
2131   0F7E             ;; if (num < 0) { 
2132   0F7E             _if31_cond:
2133   0F7E FA 05 00      lea d, [bp + 5] ; $num
2134   0F81 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2135   0F84 FD 39         mov c, b ; And place it into C
2136   0F86 2A            mov b, [d] ; Lower Word in B
2137   0F87             ; START RELATIONAL
2138   0F87 D7            push a
2139   0F88 FD D8         push g
2140   0F8A 11            mov a, b
2141   0F8B FD 7A         mov g, c
2142   0F8D 26 00 00      mov b, $0
2143   0F90 38 00 00      mov c, 0
2144   0F93 FD AF 00 00   cmp32 ga, cb
2144   0F97 00 00 00 00 
2144   0F9B 00 00 00 00 
2144   0F9F 00 00 00 00 
2144   0FA3 00 00 00 00 
2144   0FA7 00 00 00 00 
2144   0FAB 00 00 00 00 
2144   0FAF 00 00 00 00 
2144   0FB3 00 00 00 00 
2144   0FB7 00 00 00 00 
2144   0FBB 00 00 00 00 
2144   0FBF 00 00 00 00 
2144   0FC3 00 00 00 00 
2144   0FC7 00 00 00 00 
2144   0FCB 00 00 00 00 
2144   0FCF 00 00 00 00 
2144   0FD3 00 00 00 00 
2144   0FD7 00 00 00 00 
2144   0FDB 00 00 00 00 
2144   0FDF 00 00 00 00 
2144   0FE3 00 00 00 00 
2144   0FE7 00 00 00 00 
2144   0FEB 00 00 00 00 
2144   0FEF 00 00 00 00 
2144   0FF3 00 00 00 00 
2144   0FF7 00 00 00 00 
2144   0FFB 00 00 00 00 
2144   0FFF 00 00 00 00 
2144   1003 00 00 00 00 
2144   1007 00 00 00 00 
2144   100B 00 00 00 00 
2144   100F 00 00 00 00 
2144   1013 00 00 00 00 
2144   1017 00 00 00 00 
2144   101B 00 00 00 00 
2144   101F 00 00 00 00 
2144   1023 00 00 00 00 
2144   1027 00 00 00 00 
2144   102B 00 00 00 00 
2144   102F 00 00 00 00 
2144   1033 00 00 00 00 
2144   1037 00 00 00 00 
2144   103B 00 00 00 00 
2144   103F 00 00 00 00 
2144   1043 00 00 00 00 
2144   1047 00 00 00 00 
2144   104B 00 00 00 00 
2144   104F 00 00 00 00 
2144   1053 00 00 00 00 
2144   1057 00 00 00 00 
2144   105B 00 00 00 00 
2144   105F 00 00 00 00 
2144   1063 00 00 00 00 
2144   1067 00 00 00 00 
2144   106B 00 00 00 00 
2144   106F 00 00 00 00 
2144   1073 00 00 00 00 
2144   1077 00 00 00 00 
2144   107B 00 00 00 00 
2144   107F 00 00 00 00 
2144   1083 00 00 00 00 
2144   1087 00 00 00 00 
2144   108B 00 00 00 00 
2144   108F 00 00 00 00 
2144   1093 00 
2145   1094 FD 73         slt ; <
2146   1096 FD F1         pop g
2147   1098 E4            pop a
2148   1099             ; END RELATIONAL
2149   1099 C0 00 00      cmp b, 0
2150   109C C6 C3 10      je _if31_else
2151   109F             _if31_true:
2152   109F             ;; putchar('-'); 
2153   109F 26 2D 00      mov b, $2d
2154   10A2 DD            push bl
2155   10A3 07 79 15      call putchar
2156   10A6 51 01 00      add sp, 1
2157   10A9             ;; num = -num; 
2158   10A9 FA 05 00      lea d, [bp + 5] ; $num
2159   10AC DA            push d
2160   10AD FA 05 00      lea d, [bp + 5] ; $num
2161   10B0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2162   10B3 FD 39         mov c, b ; And place it into C
2163   10B5 2A            mov b, [d] ; Lower Word in B
2164   10B6 FD 97         neg b
2165   10B8 E7            pop d
2166   10B9 FD 43         mov [d], b
2167   10BB 28            mov b, c
2168   10BC FD 44 02 00   mov [d + 2], b
2169   10C0 0A F3 11      jmp _if31_exit
2170   10C3             _if31_else:
2171   10C3             ;; if (num == 0) { 
2172   10C3             _if32_cond:
2173   10C3 FA 05 00      lea d, [bp + 5] ; $num
2174   10C6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2175   10C9 FD 39         mov c, b ; And place it into C
2176   10CB 2A            mov b, [d] ; Lower Word in B
2177   10CC             ; START RELATIONAL
2178   10CC D7            push a
2179   10CD FD D8         push g
2180   10CF 11            mov a, b
2181   10D0 FD 7A         mov g, c
2182   10D2 26 00 00      mov b, $0
2183   10D5 38 00 00      mov c, 0
2184   10D8 FD AF 00 00   cmp32 ga, cb
2184   10DC 00 00 00 00 
2184   10E0 00 00 00 00 
2184   10E4 00 00 00 00 
2184   10E8 00 00 00 00 
2184   10EC 00 00 00 00 
2184   10F0 00 00 00 00 
2184   10F4 00 00 00 00 
2184   10F8 00 00 00 00 
2184   10FC 00 00 00 00 
2184   1100 00 00 00 00 
2184   1104 00 00 00 00 
2184   1108 00 00 00 00 
2184   110C 00 00 00 00 
2184   1110 00 00 00 00 
2184   1114 00 00 00 00 
2184   1118 00 00 00 00 
2184   111C 00 00 00 00 
2184   1120 00 00 00 00 
2184   1124 00 00 00 00 
2184   1128 00 00 00 00 
2184   112C 00 00 00 00 
2184   1130 00 00 00 00 
2184   1134 00 00 00 00 
2184   1138 00 00 00 00 
2184   113C 00 00 00 00 
2184   1140 00 00 00 00 
2184   1144 00 00 00 00 
2184   1148 00 00 00 00 
2184   114C 00 00 00 00 
2184   1150 00 00 00 00 
2184   1154 00 00 00 00 
2184   1158 00 00 00 00 
2184   115C 00 00 00 00 
2184   1160 00 00 00 00 
2184   1164 00 00 00 00 
2184   1168 00 00 00 00 
2184   116C 00 00 00 00 
2184   1170 00 00 00 00 
2184   1174 00 00 00 00 
2184   1178 00 00 00 00 
2184   117C 00 00 00 00 
2184   1180 00 00 00 00 
2184   1184 00 00 00 00 
2184   1188 00 00 00 00 
2184   118C 00 00 00 00 
2184   1190 00 00 00 00 
2184   1194 00 00 00 00 
2184   1198 00 00 00 00 
2184   119C 00 00 00 00 
2184   11A0 00 00 00 00 
2184   11A4 00 00 00 00 
2184   11A8 00 00 00 00 
2184   11AC 00 00 00 00 
2184   11B0 00 00 00 00 
2184   11B4 00 00 00 00 
2184   11B8 00 00 00 00 
2184   11BC 00 00 00 00 
2184   11C0 00 00 00 00 
2184   11C4 00 00 00 00 
2184   11C8 00 00 00 00 
2184   11CC 00 00 00 00 
2184   11D0 00 00 00 00 
2184   11D4 00 00 00 00 
2184   11D8 00 
2185   11D9 FD 71         seq ; ==
2186   11DB FD F1         pop g
2187   11DD E4            pop a
2188   11DE             ; END RELATIONAL
2189   11DE C0 00 00      cmp b, 0
2190   11E1 C6 F3 11      je _if32_exit
2191   11E4             _if32_true:
2192   11E4             ;; putchar('0'); 
2193   11E4 26 30 00      mov b, $30
2194   11E7 DD            push bl
2195   11E8 07 79 15      call putchar
2196   11EB 51 01 00      add sp, 1
2197   11EE             ;; return; 
2198   11EE F9            leave
2199   11EF 09            ret
2200   11F0 0A F3 11      jmp _if32_exit
2201   11F3             _if32_exit:
2202   11F3             _if31_exit:
2203   11F3             ;; while (num > 0) { 
2204   11F3             _while33_cond:
2205   11F3 FA 05 00      lea d, [bp + 5] ; $num
2206   11F6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2207   11F9 FD 39         mov c, b ; And place it into C
2208   11FB 2A            mov b, [d] ; Lower Word in B
2209   11FC             ; START RELATIONAL
2210   11FC D7            push a
2211   11FD FD D8         push g
2212   11FF 11            mov a, b
2213   1200 FD 7A         mov g, c
2214   1202 26 00 00      mov b, $0
2215   1205 38 00 00      mov c, 0
2216   1208 FD 7F         sgt
2217   120A FD F1         pop g
2218   120C E4            pop a
2219   120D             ; END RELATIONAL
2220   120D C0 00 00      cmp b, 0
2221   1210 C6 70 12      je _while33_exit
2222   1213             _while33_block:
2223   1213             ;; digits[i] = '0' + (num % 10); 
2224   1213 FA F7 FF      lea d, [bp + -9] ; $digits
2225   1216 D7            push a
2226   1217 DA            push d
2227   1218 FA F5 FF      lea d, [bp + -11] ; $i
2228   121B 2A            mov b, [d]
2229   121C E7            pop d
2230   121D 5A            add d, b
2231   121E E4            pop a
2232   121F DA            push d
2233   1220 26 30 00      mov b, $30
2234   1223             ; START TERMS
2235   1223 D7            push a
2236   1224 11            mov a, b
2237   1225 FA 05 00      lea d, [bp + 5] ; $num
2238   1228 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2239   122B FD 39         mov c, b ; And place it into C
2240   122D 2A            mov b, [d] ; Lower Word in B
2241   122E             ; START FACTORS
2242   122E D7            push a
2243   122F 11            mov a, b
2244   1230 26 0A 00      mov b, $a
2245   1233 AE            div a, b ; 
2246   1234 11            mov a, b
2247   1235 27            mov b, a
2248   1236 E4            pop a
2249   1237             ; END FACTORS
2250   1237 54            add a, b
2251   1238 D7            push a
2252   1239 FD 12         mov a, g
2253   123B 28            mov b, c
2254   123C 5C            adc a, b
2255   123D 39            mov c, a
2256   123E E5            pop b
2257   123F E4            pop a
2258   1240             ; END TERMS
2259   1240 E7            pop d
2260   1241 FD 3E         mov [d], bl
2261   1243             ;; num = num / 10; 
2262   1243 FA 05 00      lea d, [bp + 5] ; $num
2263   1246 DA            push d
2264   1247 FA 05 00      lea d, [bp + 5] ; $num
2265   124A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2266   124D FD 39         mov c, b ; And place it into C
2267   124F 2A            mov b, [d] ; Lower Word in B
2268   1250             ; START FACTORS
2269   1250 D7            push a
2270   1251 11            mov a, b
2271   1252 26 0A 00      mov b, $a
2272   1255 AE            div a, b
2273   1256 27            mov b, a
2274   1257 E4            pop a
2275   1258             ; END FACTORS
2276   1258 E7            pop d
2277   1259 FD 43         mov [d], b
2278   125B 28            mov b, c
2279   125C FD 44 02 00   mov [d + 2], b
2280   1260             ;; i++; 
2281   1260 FA F5 FF      lea d, [bp + -11] ; $i
2282   1263 2A            mov b, [d]
2283   1264 D8            push b
2284   1265 FD 77         inc b
2285   1267 FA F5 FF      lea d, [bp + -11] ; $i
2286   126A FD 43         mov [d], b
2287   126C E5            pop b
2288   126D 0A F3 11      jmp _while33_cond
2289   1270             _while33_exit:
2290   1270             ;; while (i > 0) { 
2291   1270             _while34_cond:
2292   1270 FA F5 FF      lea d, [bp + -11] ; $i
2293   1273 2A            mov b, [d]
2294   1274             ; START RELATIONAL
2295   1274 D7            push a
2296   1275 11            mov a, b
2297   1276 26 00 00      mov b, $0
2298   1279 B0            cmp a, b
2299   127A FD 7F         sgt ; >
2300   127C E4            pop a
2301   127D             ; END RELATIONAL
2302   127D C0 00 00      cmp b, 0
2303   1280 C6 A9 12      je _while34_exit
2304   1283             _while34_block:
2305   1283             ;; i--; 
2306   1283 FA F5 FF      lea d, [bp + -11] ; $i
2307   1286 2A            mov b, [d]
2308   1287 D8            push b
2309   1288 FD 7D         dec b
2310   128A FA F5 FF      lea d, [bp + -11] ; $i
2311   128D FD 43         mov [d], b
2312   128F E5            pop b
2313   1290             ;; putchar(digits[i]); 
2314   1290 FA F7 FF      lea d, [bp + -9] ; $digits
2315   1293 D7            push a
2316   1294 DA            push d
2317   1295 FA F5 FF      lea d, [bp + -11] ; $i
2318   1298 2A            mov b, [d]
2319   1299 E7            pop d
2320   129A 5A            add d, b
2321   129B E4            pop a
2322   129C 32            mov bl, [d]
2323   129D A7 00         mov bh, 0
2324   129F DD            push bl
2325   12A0 07 79 15      call putchar
2326   12A3 51 01 00      add sp, 1
2327   12A6 0A 70 12      jmp _while34_cond
2328   12A9             _while34_exit:
2329   12A9 F9            leave
2330   12AA 09            ret
2331   12AB             
2332   12AB             print_unsigned_long:
2333   12AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2334   12AE             ;; char digits[10]; 
2335   12AE 52 0A 00      sub sp, 10 ; digits
2336   12B1             ;; int i; 
2337   12B1 52 02 00      sub sp, 2 ; i
2338   12B4             ;; i = 0; 
2339   12B4 FA F5 FF      lea d, [bp + -11] ; $i
2340   12B7 DA            push d
2341   12B8 26 00 00      mov b, $0
2342   12BB E7            pop d
2343   12BC FD 43         mov [d], b
2344   12BE             ;; if(num == 0){ 
2345   12BE             _if35_cond:
2346   12BE FA 05 00      lea d, [bp + 5] ; $num
2347   12C1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2348   12C4 FD 39         mov c, b ; And place it into C
2349   12C6 2A            mov b, [d] ; Lower Word in B
2350   12C7             ; START RELATIONAL
2351   12C7 D7            push a
2352   12C8 FD D8         push g
2353   12CA 11            mov a, b
2354   12CB FD 7A         mov g, c
2355   12CD 26 00 00      mov b, $0
2356   12D0 38 00 00      mov c, 0
2357   12D3 FD AF 00 00   cmp32 ga, cb
2357   12D7 00 00 00 00 
2357   12DB 00 00 00 00 
2357   12DF 00 00 00 00 
2357   12E3 00 00 00 00 
2357   12E7 00 00 00 00 
2357   12EB 00 00 00 00 
2357   12EF 00 00 00 00 
2357   12F3 00 00 00 00 
2357   12F7 00 00 00 00 
2357   12FB 00 00 00 00 
2357   12FF 00 00 00 00 
2357   1303 00 00 00 00 
2357   1307 00 00 00 00 
2357   130B 00 00 00 00 
2357   130F 00 00 00 00 
2357   1313 00 00 00 00 
2357   1317 00 00 00 00 
2357   131B 00 00 00 00 
2357   131F 00 00 00 00 
2357   1323 00 00 00 00 
2357   1327 00 00 00 00 
2357   132B 00 00 00 00 
2357   132F 00 00 00 00 
2357   1333 00 00 00 00 
2357   1337 00 00 00 00 
2357   133B 00 00 00 00 
2357   133F 00 00 00 00 
2357   1343 00 00 00 00 
2357   1347 00 00 00 00 
2357   134B 00 00 00 00 
2357   134F 00 00 00 00 
2357   1353 00 00 00 00 
2357   1357 00 00 00 00 
2357   135B 00 00 00 00 
2357   135F 00 00 00 00 
2357   1363 00 00 00 00 
2357   1367 00 00 00 00 
2357   136B 00 00 00 00 
2357   136F 00 00 00 00 
2357   1373 00 00 00 00 
2357   1377 00 00 00 00 
2357   137B 00 00 00 00 
2357   137F 00 00 00 00 
2357   1383 00 00 00 00 
2357   1387 00 00 00 00 
2357   138B 00 00 00 00 
2357   138F 00 00 00 00 
2357   1393 00 00 00 00 
2357   1397 00 00 00 00 
2357   139B 00 00 00 00 
2357   139F 00 00 00 00 
2357   13A3 00 00 00 00 
2357   13A7 00 00 00 00 
2357   13AB 00 00 00 00 
2357   13AF 00 00 00 00 
2357   13B3 00 00 00 00 
2357   13B7 00 00 00 00 
2357   13BB 00 00 00 00 
2357   13BF 00 00 00 00 
2357   13C3 00 00 00 00 
2357   13C7 00 00 00 00 
2357   13CB 00 00 00 00 
2357   13CF 00 00 00 00 
2357   13D3 00 
2358   13D4 FD 71         seq ; ==
2359   13D6 FD F1         pop g
2360   13D8 E4            pop a
2361   13D9             ; END RELATIONAL
2362   13D9 C0 00 00      cmp b, 0
2363   13DC C6 EE 13      je _if35_exit
2364   13DF             _if35_true:
2365   13DF             ;; putchar('0'); 
2366   13DF 26 30 00      mov b, $30
2367   13E2 DD            push bl
2368   13E3 07 79 15      call putchar
2369   13E6 51 01 00      add sp, 1
2370   13E9             ;; return; 
2371   13E9 F9            leave
2372   13EA 09            ret
2373   13EB 0A EE 13      jmp _if35_exit
2374   13EE             _if35_exit:
2375   13EE             ;; while (num > 0) { 
2376   13EE             _while36_cond:
2377   13EE FA 05 00      lea d, [bp + 5] ; $num
2378   13F1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2379   13F4 FD 39         mov c, b ; And place it into C
2380   13F6 2A            mov b, [d] ; Lower Word in B
2381   13F7             ; START RELATIONAL
2382   13F7 D7            push a
2383   13F8 FD D8         push g
2384   13FA 11            mov a, b
2385   13FB FD 7A         mov g, c
2386   13FD 26 00 00      mov b, $0
2387   1400 38 00 00      mov c, 0
2388   1403 FD 81         sgu
2389   1405 FD F1         pop g
2390   1407 E4            pop a
2391   1408             ; END RELATIONAL
2392   1408 C0 00 00      cmp b, 0
2393   140B C6 6B 14      je _while36_exit
2394   140E             _while36_block:
2395   140E             ;; digits[i] = '0' + (num % 10); 
2396   140E FA F7 FF      lea d, [bp + -9] ; $digits
2397   1411 D7            push a
2398   1412 DA            push d
2399   1413 FA F5 FF      lea d, [bp + -11] ; $i
2400   1416 2A            mov b, [d]
2401   1417 E7            pop d
2402   1418 5A            add d, b
2403   1419 E4            pop a
2404   141A DA            push d
2405   141B 26 30 00      mov b, $30
2406   141E             ; START TERMS
2407   141E D7            push a
2408   141F 11            mov a, b
2409   1420 FA 05 00      lea d, [bp + 5] ; $num
2410   1423 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2411   1426 FD 39         mov c, b ; And place it into C
2412   1428 2A            mov b, [d] ; Lower Word in B
2413   1429             ; START FACTORS
2414   1429 D7            push a
2415   142A 11            mov a, b
2416   142B 26 0A 00      mov b, $a
2417   142E AE            div a, b ; 
2418   142F 11            mov a, b
2419   1430 27            mov b, a
2420   1431 E4            pop a
2421   1432             ; END FACTORS
2422   1432 54            add a, b
2423   1433 D7            push a
2424   1434 FD 12         mov a, g
2425   1436 28            mov b, c
2426   1437 5C            adc a, b
2427   1438 39            mov c, a
2428   1439 E5            pop b
2429   143A E4            pop a
2430   143B             ; END TERMS
2431   143B E7            pop d
2432   143C FD 3E         mov [d], bl
2433   143E             ;; num = num / 10; 
2434   143E FA 05 00      lea d, [bp + 5] ; $num
2435   1441 DA            push d
2436   1442 FA 05 00      lea d, [bp + 5] ; $num
2437   1445 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2438   1448 FD 39         mov c, b ; And place it into C
2439   144A 2A            mov b, [d] ; Lower Word in B
2440   144B             ; START FACTORS
2441   144B D7            push a
2442   144C 11            mov a, b
2443   144D 26 0A 00      mov b, $a
2444   1450 AE            div a, b
2445   1451 27            mov b, a
2446   1452 E4            pop a
2447   1453             ; END FACTORS
2448   1453 E7            pop d
2449   1454 FD 43         mov [d], b
2450   1456 28            mov b, c
2451   1457 FD 44 02 00   mov [d + 2], b
2452   145B             ;; i++; 
2453   145B FA F5 FF      lea d, [bp + -11] ; $i
2454   145E 2A            mov b, [d]
2455   145F D8            push b
2456   1460 FD 77         inc b
2457   1462 FA F5 FF      lea d, [bp + -11] ; $i
2458   1465 FD 43         mov [d], b
2459   1467 E5            pop b
2460   1468 0A EE 13      jmp _while36_cond
2461   146B             _while36_exit:
2462   146B             ;; while (i > 0) { 
2463   146B             _while37_cond:
2464   146B FA F5 FF      lea d, [bp + -11] ; $i
2465   146E 2A            mov b, [d]
2466   146F             ; START RELATIONAL
2467   146F D7            push a
2468   1470 11            mov a, b
2469   1471 26 00 00      mov b, $0
2470   1474 B0            cmp a, b
2471   1475 FD 7F         sgt ; >
2472   1477 E4            pop a
2473   1478             ; END RELATIONAL
2474   1478 C0 00 00      cmp b, 0
2475   147B C6 A4 14      je _while37_exit
2476   147E             _while37_block:
2477   147E             ;; i--; 
2478   147E FA F5 FF      lea d, [bp + -11] ; $i
2479   1481 2A            mov b, [d]
2480   1482 D8            push b
2481   1483 FD 7D         dec b
2482   1485 FA F5 FF      lea d, [bp + -11] ; $i
2483   1488 FD 43         mov [d], b
2484   148A E5            pop b
2485   148B             ;; putchar(digits[i]); 
2486   148B FA F7 FF      lea d, [bp + -9] ; $digits
2487   148E D7            push a
2488   148F DA            push d
2489   1490 FA F5 FF      lea d, [bp + -11] ; $i
2490   1493 2A            mov b, [d]
2491   1494 E7            pop d
2492   1495 5A            add d, b
2493   1496 E4            pop a
2494   1497 32            mov bl, [d]
2495   1498 A7 00         mov bh, 0
2496   149A DD            push bl
2497   149B 07 79 15      call putchar
2498   149E 51 01 00      add sp, 1
2499   14A1 0A 6B 14      jmp _while37_cond
2500   14A4             _while37_exit:
2501   14A4 F9            leave
2502   14A5 09            ret
2503   14A6             
2504   14A6             print_unsigned:
2505   14A6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2506   14A9             ;; char digits[5]; 
2507   14A9 52 05 00      sub sp, 5 ; digits
2508   14AC             ;; int i; 
2509   14AC 52 02 00      sub sp, 2 ; i
2510   14AF             ;; i = 0; 
2511   14AF FA FA FF      lea d, [bp + -6] ; $i
2512   14B2 DA            push d
2513   14B3 26 00 00      mov b, $0
2514   14B6 E7            pop d
2515   14B7 FD 43         mov [d], b
2516   14B9             ;; if(num == 0){ 
2517   14B9             _if38_cond:
2518   14B9 FA 05 00      lea d, [bp + 5] ; $num
2519   14BC 2A            mov b, [d]
2520   14BD             ; START RELATIONAL
2521   14BD D7            push a
2522   14BE 11            mov a, b
2523   14BF 26 00 00      mov b, $0
2524   14C2 B0            cmp a, b
2525   14C3 FD 71         seq ; ==
2526   14C5 E4            pop a
2527   14C6             ; END RELATIONAL
2528   14C6 C0 00 00      cmp b, 0
2529   14C9 C6 DB 14      je _if38_exit
2530   14CC             _if38_true:
2531   14CC             ;; putchar('0'); 
2532   14CC 26 30 00      mov b, $30
2533   14CF DD            push bl
2534   14D0 07 79 15      call putchar
2535   14D3 51 01 00      add sp, 1
2536   14D6             ;; return; 
2537   14D6 F9            leave
2538   14D7 09            ret
2539   14D8 0A DB 14      jmp _if38_exit
2540   14DB             _if38_exit:
2541   14DB             ;; while (num > 0) { 
2542   14DB             _while39_cond:
2543   14DB FA 05 00      lea d, [bp + 5] ; $num
2544   14DE 2A            mov b, [d]
2545   14DF             ; START RELATIONAL
2546   14DF D7            push a
2547   14E0 11            mov a, b
2548   14E1 26 00 00      mov b, $0
2549   14E4 B0            cmp a, b
2550   14E5 FD 81         sgu ; > (unsigned)
2551   14E7 E4            pop a
2552   14E8             ; END RELATIONAL
2553   14E8 C0 00 00      cmp b, 0
2554   14EB C6 35 15      je _while39_exit
2555   14EE             _while39_block:
2556   14EE             ;; digits[i] = '0' + (num % 10); 
2557   14EE FA FC FF      lea d, [bp + -4] ; $digits
2558   14F1 D7            push a
2559   14F2 DA            push d
2560   14F3 FA FA FF      lea d, [bp + -6] ; $i
2561   14F6 2A            mov b, [d]
2562   14F7 E7            pop d
2563   14F8 5A            add d, b
2564   14F9 E4            pop a
2565   14FA DA            push d
2566   14FB 26 30 00      mov b, $30
2567   14FE             ; START TERMS
2568   14FE D7            push a
2569   14FF 11            mov a, b
2570   1500 FA 05 00      lea d, [bp + 5] ; $num
2571   1503 2A            mov b, [d]
2572   1504             ; START FACTORS
2573   1504 D7            push a
2574   1505 11            mov a, b
2575   1506 26 0A 00      mov b, $a
2576   1509 AE            div a, b ; 
2577   150A 11            mov a, b
2578   150B 27            mov b, a
2579   150C E4            pop a
2580   150D             ; END FACTORS
2581   150D 56            add b, a
2582   150E E4            pop a
2583   150F             ; END TERMS
2584   150F E7            pop d
2585   1510 FD 3E         mov [d], bl
2586   1512             ;; num = num / 10; 
2587   1512 FA 05 00      lea d, [bp + 5] ; $num
2588   1515 DA            push d
2589   1516 FA 05 00      lea d, [bp + 5] ; $num
2590   1519 2A            mov b, [d]
2591   151A             ; START FACTORS
2592   151A D7            push a
2593   151B 11            mov a, b
2594   151C 26 0A 00      mov b, $a
2595   151F AE            div a, b
2596   1520 27            mov b, a
2597   1521 E4            pop a
2598   1522             ; END FACTORS
2599   1522 E7            pop d
2600   1523 FD 43         mov [d], b
2601   1525             ;; i++; 
2602   1525 FA FA FF      lea d, [bp + -6] ; $i
2603   1528 2A            mov b, [d]
2604   1529 D8            push b
2605   152A FD 77         inc b
2606   152C FA FA FF      lea d, [bp + -6] ; $i
2607   152F FD 43         mov [d], b
2608   1531 E5            pop b
2609   1532 0A DB 14      jmp _while39_cond
2610   1535             _while39_exit:
2611   1535             ;; while (i > 0) { 
2612   1535             _while40_cond:
2613   1535 FA FA FF      lea d, [bp + -6] ; $i
2614   1538 2A            mov b, [d]
2615   1539             ; START RELATIONAL
2616   1539 D7            push a
2617   153A 11            mov a, b
2618   153B 26 00 00      mov b, $0
2619   153E B0            cmp a, b
2620   153F FD 7F         sgt ; >
2621   1541 E4            pop a
2622   1542             ; END RELATIONAL
2623   1542 C0 00 00      cmp b, 0
2624   1545 C6 6E 15      je _while40_exit
2625   1548             _while40_block:
2626   1548             ;; i--; 
2627   1548 FA FA FF      lea d, [bp + -6] ; $i
2628   154B 2A            mov b, [d]
2629   154C D8            push b
2630   154D FD 7D         dec b
2631   154F FA FA FF      lea d, [bp + -6] ; $i
2632   1552 FD 43         mov [d], b
2633   1554 E5            pop b
2634   1555             ;; putchar(digits[i]); 
2635   1555 FA FC FF      lea d, [bp + -4] ; $digits
2636   1558 D7            push a
2637   1559 DA            push d
2638   155A FA FA FF      lea d, [bp + -6] ; $i
2639   155D 2A            mov b, [d]
2640   155E E7            pop d
2641   155F 5A            add d, b
2642   1560 E4            pop a
2643   1561 32            mov bl, [d]
2644   1562 A7 00         mov bh, 0
2645   1564 DD            push bl
2646   1565 07 79 15      call putchar
2647   1568 51 01 00      add sp, 1
2648   156B 0A 35 15      jmp _while40_cond
2649   156E             _while40_exit:
2650   156E F9            leave
2651   156F 09            ret
2652   1570             
2653   1570             date:
2654   1570 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2655   1573             
2656   1573             ; --- BEGIN INLINE ASM BLOCK
2657   1573 19 00         mov al, 0 
2658   1575 05 07         syscall sys_datetime
2659   1577             ; --- END INLINE ASM BLOCK
2660   1577             
2661   1577 F9            leave
2662   1578 09            ret
2663   1579             
2664   1579             putchar:
2665   1579 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2666   157C             
2667   157C             ; --- BEGIN INLINE ASM BLOCK
2668   157C FA 05 00      lea d, [bp + 5] ; $c
2669   157F 1E            mov al, [d]
2670   1580 23            mov ah, al
2671   1581 07 0A 17      call _putchar
2672   1584             ; --- END INLINE ASM BLOCK
2673   1584             
2674   1584 F9            leave
2675   1585 09            ret
2676   1586             
2677   1586             getchar:
2678   1586 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2679   1589             ;; char c; 
2680   1589 52 01 00      sub sp, 1 ; c
2681   158C             
2682   158C             ; --- BEGIN INLINE ASM BLOCK
2683   158C 07 03 17      call getch
2684   158F 1A            mov al, ah
2685   1590 FA 00 00      lea d, [bp + 0] ; $c
2686   1593 3E            mov [d], al
2687   1594             ; --- END INLINE ASM BLOCK
2688   1594             
2689   1594             ;; return c; 
2690   1594 FA 00 00      lea d, [bp + 0] ; $c
2691   1597 32            mov bl, [d]
2692   1598 A7 00         mov bh, 0
2693   159A F9            leave
2694   159B 09            ret
2695   159C             
2696   159C             scann:
2697   159C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2698   159F             ;; int m; 
2699   159F 52 02 00      sub sp, 2 ; m
2700   15A2             
2701   15A2             ; --- BEGIN INLINE ASM BLOCK
2702   15A2 07 4E 19      call scan_u16d
2703   15A5 FA FF FF      lea d, [bp + -1] ; $m
2704   15A8 43            mov [d], a
2705   15A9             ; --- END INLINE ASM BLOCK
2706   15A9             
2707   15A9             ;; return m; 
2708   15A9 FA FF FF      lea d, [bp + -1] ; $m
2709   15AC 2A            mov b, [d]
2710   15AD F9            leave
2711   15AE 09            ret
2712   15AF             
2713   15AF             puts:
2714   15AF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2715   15B2             
2716   15B2             ; --- BEGIN INLINE ASM BLOCK
2717   15B2 FA 05 00      lea d, [bp + 5] ; $s
2718   15B5 15            mov a, [d]
2719   15B6 3C            mov d, a
2720   15B7 07 54 18      call _puts
2721   15BA 10 00 0A      mov a, $0A00
2722   15BD 05 03         syscall sys_io
2723   15BF             ; --- END INLINE ASM BLOCK
2724   15BF             
2725   15BF F9            leave
2726   15C0 09            ret
2727   15C1             
2728   15C1             print:
2729   15C1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2730   15C4             
2731   15C4             ; --- BEGIN INLINE ASM BLOCK
2732   15C4 FA 05 00      lea d, [bp + 5] ; $s
2733   15C7 FD 2A         mov d, [d]
2734   15C9 07 54 18      call _puts
2735   15CC             ; --- END INLINE ASM BLOCK
2736   15CC             
2737   15CC F9            leave
2738   15CD 09            ret
2739   15CE             
2740   15CE             getparam:
2741   15CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2742   15D1             ;; char data; 
2743   15D1 52 01 00      sub sp, 1 ; data
2744   15D4             
2745   15D4             ; --- BEGIN INLINE ASM BLOCK
2746   15D4 19 04         mov al, 4
2747   15D6 FA 05 00      lea d, [bp + 5] ; $address
2748   15D9 FD 2A         mov d, [d]
2749   15DB 05 0C         syscall sys_system
2750   15DD FA 00 00      lea d, [bp + 0] ; $data
2751   15E0 FD 3E         mov [d], bl
2752   15E2             ; --- END INLINE ASM BLOCK
2753   15E2             
2754   15E2             ;; return data; 
2755   15E2 FA 00 00      lea d, [bp + 0] ; $data
2756   15E5 32            mov bl, [d]
2757   15E6 A7 00         mov bh, 0
2758   15E8 F9            leave
2759   15E9 09            ret
2760   15EA             
2761   15EA             clear:
2762   15EA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2763   15ED             ;; print("\033[2J\033[H"); 
2764   15ED 26 B1 23      mov b, _s5 ; "\033[2J\033[H"
2765   15F0 FD AB         swp b
2766   15F2 D8            push b
2767   15F3 07 C1 15      call print
2768   15F6 51 02 00      add sp, 2
2769   15F9 F9            leave
2770   15FA 09            ret
2771   15FB             
2772   15FB             abs:
2773   15FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2774   15FE             ;; return i < 0 ? -i : i; 
2775   15FE             _ternary41_cond:
2776   15FE FA 05 00      lea d, [bp + 5] ; $i
2777   1601 2A            mov b, [d]
2778   1602             ; START RELATIONAL
2779   1602 D7            push a
2780   1603 11            mov a, b
2781   1604 26 00 00      mov b, $0
2782   1607 B0            cmp a, b
2783   1608 FD 73         slt ; < (signed)
2784   160A E4            pop a
2785   160B             ; END RELATIONAL
2786   160B C0 00 00      cmp b, 0
2787   160E C6 1A 16      je _ternary41_false
2788   1611             _ternary41_true:
2789   1611 FA 05 00      lea d, [bp + 5] ; $i
2790   1614 2A            mov b, [d]
2791   1615 FD 97         neg b
2792   1617 0A 1E 16      jmp _ternary41_exit
2793   161A             _ternary41_false:
2794   161A FA 05 00      lea d, [bp + 5] ; $i
2795   161D 2A            mov b, [d]
2796   161E             _ternary41_exit:
2797   161E F9            leave
2798   161F 09            ret
2799   1620             
2800   1620             include_stdio_asm:
2801   1620 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2802   1623             
2803   1623             ; --- BEGIN INLINE ASM BLOCK
2804   1623             .include "lib/asm/stdio.asm"
0001+  1623             ;-----------------------------------------------------------------------------
0002+  1623             ; stdio.s
0003+  1623             ;-----------------------------------------------------------------------------
0004+  1623             .include "lib/asm/string.asm"
0001++ 1623             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1623             ; string.s
0003++ 1623             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1623             
0005++ 1623             
0006++ 1623             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1623             ; _strrev
0008++ 1623             ; reverse a string
0009++ 1623             ; D = string address
0010++ 1623             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1623             ; 01234
0012++ 1623             _strrev:
0013++ 1623 4B          	pusha
0014++ 1624 07 6A 16    	call _strlen	; length in C
0015++ 1627 12          	mov a, c
0016++ 1628 AF 01 00    	cmp a, 1
0017++ 162B D0 45 16    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 162E 7D          	dec a
0019++ 162F FD 4E       	mov si, d	; beginning of string
0020++ 1631 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1633 59          	add d, a	; end of string
0022++ 1634 12          	mov a, c
0023++ 1635 FD 9B       	shr a		; divide by 2
0024++ 1637 39          	mov c, a	; C now counts the steps
0025++ 1638             _strrev_L0:
0026++ 1638 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1639 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 163A 3E          	mov [d], al	; store left char into right side
0029++ 163B 1B          	mov al, bl
0030++ 163C F7          	stosb		; store right-side char into left-side; increase DI
0031++ 163D 7E          	dec c
0032++ 163E 7F          	dec d
0033++ 163F C2 00 00    	cmp c, 0
0034++ 1642 C7 38 16    	jne _strrev_L0
0035++ 1645             _strrev_end:
0036++ 1645 4C          	popa
0037++ 1646 09          	ret
0038++ 1647             	
0039++ 1647             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1647             ; _strchr
0041++ 1647             ; search string in D for char in AL
0042++ 1647             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1647             _strchr:
0044++ 1647             _strchr_L0:
0045++ 1647 32          	mov bl, [d]
0046++ 1648 C1 00       	cmp bl, 0
0047++ 164A C6 55 16    	je _strchr_end
0048++ 164D BA          	cmp al, bl
0049++ 164E C6 55 16    	je _strchr_end
0050++ 1651 79          	inc d
0051++ 1652 0A 47 16    	jmp _strchr_L0
0052++ 1655             _strchr_end:
0053++ 1655 1B          	mov al, bl
0054++ 1656 09          	ret
0055++ 1657             
0056++ 1657             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1657             ; _strstr
0058++ 1657             ; find sub-string
0059++ 1657             ; str1 in SI
0060++ 1657             ; str2 in DI
0061++ 1657             ; SI points to end of source string
0062++ 1657             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1657             _strstr:
0064++ 1657 DB          	push al
0065++ 1658 DA          	push d
0066++ 1659 E3          	push di
0067++ 165A             _strstr_loop:
0068++ 165A F3          	cmpsb					; compare a byte of the strings
0069++ 165B C7 66 16    	jne _strstr_ret
0070++ 165E FC 00 00    	lea d, [di + 0]
0071++ 1661 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1663 C7 5A 16    	jne _strstr_loop				; equal chars but not at end
0073++ 1666             _strstr_ret:
0074++ 1666 F0          	pop di
0075++ 1667 E7          	pop d
0076++ 1668 E8          	pop al
0077++ 1669 09          	ret
0078++ 166A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 166A             ; length of null terminated string
0080++ 166A             ; result in C
0081++ 166A             ; pointer in D
0082++ 166A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 166A             _strlen:
0084++ 166A DA          	push d
0085++ 166B 38 00 00    	mov c, 0
0086++ 166E             _strlen_L1:
0087++ 166E BD 00       	cmp byte [d], 0
0088++ 1670 C6 78 16    	je _strlen_ret
0089++ 1673 79          	inc d
0090++ 1674 78          	inc c
0091++ 1675 0A 6E 16    	jmp _strlen_L1
0092++ 1678             _strlen_ret:
0093++ 1678 E7          	pop d
0094++ 1679 09          	ret
0095++ 167A             
0096++ 167A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 167A             ; STRCMP
0098++ 167A             ; compare two strings
0099++ 167A             ; str1 in SI
0100++ 167A             ; str2 in DI
0101++ 167A             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 167A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 167A             _strcmp:
0104++ 167A DB          	push al
0105++ 167B DA          	push d
0106++ 167C E3          	push di
0107++ 167D E2          	push si
0108++ 167E             _strcmp_loop:
0109++ 167E F3          	cmpsb					; compare a byte of the strings
0110++ 167F C7 8A 16    	jne _strcmp_ret
0111++ 1682 FB FF FF    	lea d, [si +- 1]
0112++ 1685 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1687 C7 7E 16    	jne _strcmp_loop				; equal chars but not at end
0114++ 168A             _strcmp_ret:
0115++ 168A EF          	pop si
0116++ 168B F0          	pop di
0117++ 168C E7          	pop d
0118++ 168D E8          	pop al
0119++ 168E 09          	ret
0120++ 168F             
0121++ 168F             
0122++ 168F             ; STRCPY
0123++ 168F             ; copy null terminated string from SI to DI
0124++ 168F             ; source in SI
0125++ 168F             ; destination in DI
0126++ 168F             _strcpy:
0127++ 168F E2          	push si
0128++ 1690 E3          	push di
0129++ 1691 DB          	push al
0130++ 1692             _strcpy_L1:
0131++ 1692 F6          	lodsb
0132++ 1693 F7          	stosb
0133++ 1694 B9 00       	cmp al, 0
0134++ 1696 C7 92 16    	jne _strcpy_L1
0135++ 1699             _strcpy_end:
0136++ 1699 E8          	pop al
0137++ 169A F0          	pop di
0138++ 169B EF          	pop si
0139++ 169C 09          	ret
0140++ 169D             
0141++ 169D             ; STRCAT
0142++ 169D             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 169D             ; source in SI
0144++ 169D             ; destination in DI
0145++ 169D             _strcat:
0146++ 169D E2          	push si
0147++ 169E E3          	push di
0148++ 169F D7          	push a
0149++ 16A0 DA          	push d
0150++ 16A1 50          	mov a, di
0151++ 16A2 3C          	mov d, a
0152++ 16A3             _strcat_goto_end_L1:
0153++ 16A3 BD 00       	cmp byte[d], 0
0154++ 16A5 C6 AC 16    	je _strcat_start
0155++ 16A8 79          	inc d
0156++ 16A9 0A A3 16    	jmp _strcat_goto_end_L1
0157++ 16AC             _strcat_start:
0158++ 16AC FD 50       	mov di, d
0159++ 16AE             _strcat_L1:
0160++ 16AE F6          	lodsb
0161++ 16AF F7          	stosb
0162++ 16B0 B9 00       	cmp al, 0
0163++ 16B2 C7 AE 16    	jne _strcat_L1
0164++ 16B5             _strcat_end:
0165++ 16B5 E7          	pop d
0166++ 16B6 E4          	pop a
0167++ 16B7 F0          	pop di
0168++ 16B8 EF          	pop si
0169++ 16B9 09          	ret
0170++ 16BA             
0171++ 16BA             
0005+  16BA             
0006+  16BA             ;-----------------------------------------------------------------------------
0007+  16BA             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  16BA             ; ASCII in BL
0009+  16BA             ; result in AL
0010+  16BA             ; ascii for F = 0100 0110
0011+  16BA             ; ascii for 9 = 0011 1001
0012+  16BA             ;-----------------------------------------------------------------------------
0013+  16BA             hex_ascii_encode:
0014+  16BA 1B            mov al, bl
0015+  16BB 93 40         test al, $40        ; test if letter or number
0016+  16BD C7 C3 16      jnz hex_letter
0017+  16C0 87 0F         and al, $0F        ; get number
0018+  16C2 09            ret
0019+  16C3             hex_letter:
0020+  16C3 87 0F         and al, $0F        ; get letter
0021+  16C5 6A 09         add al, 9
0022+  16C7 09            ret
0023+  16C8             
0024+  16C8             ;-----------------------------------------------------------------------------
0025+  16C8             ; ATOI
0026+  16C8             ; 2 letter hex string in B
0027+  16C8             ; 8bit integer returned in AL
0028+  16C8             ;-----------------------------------------------------------------------------
0029+  16C8             _atoi:
0030+  16C8 D8            push b
0031+  16C9 07 BA 16      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  16CC 30            mov bl, bh
0033+  16CD DB            push al          ; save a
0034+  16CE 07 BA 16      call hex_ascii_encode
0035+  16D1 EA            pop bl  
0036+  16D2 FD 9E 04      shl al, 4
0037+  16D5 8C            or al, bl
0038+  16D6 E5            pop b
0039+  16D7 09            ret  
0040+  16D8             
0041+  16D8             
0042+  16D8             ;-----------------------------------------------------------------------------
0043+  16D8             ; ITOA
0044+  16D8             ; 8bit value in BL
0045+  16D8             ; 2 byte ASCII result in A
0046+  16D8             ;-----------------------------------------------------------------------------
0047+  16D8             _itoa:
0048+  16D8 DA            push d
0049+  16D9 D8            push b
0050+  16DA A7 00         mov bh, 0
0051+  16DC FD A4 04      shr bl, 4  
0052+  16DF 74            mov d, b
0053+  16E0 1F 88 19      mov al, [d + s_hex_digits]
0054+  16E3 23            mov ah, al
0055+  16E4               
0056+  16E4 E5            pop b
0057+  16E5 D8            push b
0058+  16E6 A7 00         mov bh, 0
0059+  16E8 FD 87 0F      and bl, $0F
0060+  16EB 74            mov d, b
0061+  16EC 1F 88 19      mov al, [d + s_hex_digits]
0062+  16EF E5            pop b
0063+  16F0 E7            pop d
0064+  16F1 09            ret
0065+  16F2             
0066+  16F2             ;-----------------------------------------------------------------------------
0067+  16F2             ; HEX STRING TO BINARY
0068+  16F2             ; di = destination address
0069+  16F2             ; si = source
0070+  16F2             ;-----------------------------------------------------------------------------
0071+  16F2             _hex_to_int:
0072+  16F2             _hex_to_int_L1:
0073+  16F2 F6            lodsb          ; load from [SI] to AL
0074+  16F3 B9 00         cmp al, 0        ; check if ASCII 0
0075+  16F5 C6 02 17      jz _hex_to_int_ret
0076+  16F8 36            mov bh, al
0077+  16F9 F6            lodsb
0078+  16FA 2F            mov bl, al
0079+  16FB 07 C8 16      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  16FE F7            stosb          ; store AL to [DI]
0081+  16FF 0A F2 16      jmp _hex_to_int_L1
0082+  1702             _hex_to_int_ret:
0083+  1702 09            ret    
0084+  1703             
0085+  1703             ;-----------------------------------------------------------------------------
0086+  1703             ; GETCHAR
0087+  1703             ; char in ah
0088+  1703             ;-----------------------------------------------------------------------------
0089+  1703             getch:
0090+  1703 DB            push al
0091+  1704             getch_retry:
0092+  1704 19 01         mov al, 1
0093+  1706 05 03         syscall sys_io      ; receive in AH
0094+  1708 E8            pop al
0095+  1709 09            ret
0096+  170A             
0097+  170A             ;-----------------------------------------------------------------------------
0098+  170A             ; PUTCHAR
0099+  170A             ; char in ah
0100+  170A             ;-----------------------------------------------------------------------------
0101+  170A             _putchar:
0102+  170A D7            push a
0103+  170B 19 00         mov al, 0
0104+  170D 05 03         syscall sys_io      ; char in AH
0105+  170F E4            pop a
0106+  1710 09            ret
0107+  1711             
0108+  1711             ;-----------------------------------------------------------------------------
0109+  1711             ;; INPUT A STRING
0110+  1711             ;; terminates with null
0111+  1711             ;; pointer in D
0112+  1711             ;-----------------------------------------------------------------------------
0113+  1711             _gets:
0114+  1711 D7            push a
0115+  1712 DA            push d
0116+  1713             _gets_loop:
0117+  1713 19 01         mov al, 1
0118+  1715 05 03         syscall sys_io      ; receive in AH
0119+  1717 B9 00         cmp al, 0        ; check error code (AL)
0120+  1719 C6 13 17      je _gets_loop      ; if no char received, retry
0121+  171C             
0122+  171C 76 1B         cmp ah, 27
0123+  171E C6 3F 17      je _gets_ansi_esc
0124+  1721 76 0A         cmp ah, $0A        ; LF
0125+  1723 C6 AA 17      je _gets_end
0126+  1726 76 0D         cmp ah, $0D        ; CR
0127+  1728 C6 AA 17      je _gets_end
0128+  172B 76 5C         cmp ah, $5C        ; '\\'
0129+  172D C6 6B 17      je _gets_escape
0130+  1730               
0131+  1730 76 08         cmp ah, $08      ; check for backspace
0132+  1732 C6 3B 17      je _gets_backspace
0133+  1735             
0134+  1735 1A            mov al, ah
0135+  1736 3E            mov [d], al
0136+  1737 79            inc d
0137+  1738 0A 13 17      jmp _gets_loop
0138+  173B             _gets_backspace:
0139+  173B 7F            dec d
0140+  173C 0A 13 17      jmp _gets_loop
0141+  173F             _gets_ansi_esc:
0142+  173F 19 01         mov al, 1
0143+  1741 05 03         syscall sys_io        ; receive in AH without echo
0144+  1743 B9 00         cmp al, 0          ; check error code (AL)
0145+  1745 C6 3F 17      je _gets_ansi_esc    ; if no char received, retry
0146+  1748 76 5B         cmp ah, '['
0147+  174A C7 13 17      jne _gets_loop
0148+  174D             _gets_ansi_esc_2:
0149+  174D 19 01         mov al, 1
0150+  174F 05 03         syscall sys_io          ; receive in AH without echo
0151+  1751 B9 00         cmp al, 0            ; check error code (AL)
0152+  1753 C6 4D 17      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1756 76 44         cmp ah, 'D'
0154+  1758 C6 63 17      je _gets_left_arrow
0155+  175B 76 43         cmp ah, 'C'
0156+  175D C6 67 17      je _gets_right_arrow
0157+  1760 0A 13 17      jmp _gets_loop
0158+  1763             _gets_left_arrow:
0159+  1763 7F            dec d
0160+  1764 0A 13 17      jmp _gets_loop
0161+  1767             _gets_right_arrow:
0162+  1767 79            inc d
0163+  1768 0A 13 17      jmp _gets_loop
0164+  176B             _gets_escape:
0165+  176B 19 01         mov al, 1
0166+  176D 05 03         syscall sys_io      ; receive in AH
0167+  176F B9 00         cmp al, 0        ; check error code (AL)
0168+  1771 C6 6B 17      je _gets_escape      ; if no char received, retry
0169+  1774 76 6E         cmp ah, 'n'
0170+  1776 C6 95 17      je _gets_LF
0171+  1779 76 72         cmp ah, 'r'
0172+  177B C6 9C 17      je _gets_CR
0173+  177E 76 30         cmp ah, '0'
0174+  1780 C6 A3 17      je _gets_NULL
0175+  1783 76 5C         cmp ah, $5C  ; '\'
0176+  1785 C6 8E 17      je _gets_slash
0177+  1788 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1789 3E            mov [d], al
0179+  178A 79            inc d
0180+  178B 0A 13 17      jmp _gets_loop
0181+  178E             _gets_slash:
0182+  178E 19 5C         mov al, $5C
0183+  1790 3E            mov [d], al
0184+  1791 79            inc d
0185+  1792 0A 13 17      jmp _gets_loop
0186+  1795             _gets_LF:
0187+  1795 19 0A         mov al, $0A
0188+  1797 3E            mov [d], al
0189+  1798 79            inc d
0190+  1799 0A 13 17      jmp _gets_loop
0191+  179C             _gets_CR:
0192+  179C 19 0D         mov al, $0D
0193+  179E 3E            mov [d], al
0194+  179F 79            inc d
0195+  17A0 0A 13 17      jmp _gets_loop
0196+  17A3             _gets_NULL:
0197+  17A3 19 00         mov al, $00
0198+  17A5 3E            mov [d], al
0199+  17A6 79            inc d
0200+  17A7 0A 13 17      jmp _gets_loop
0201+  17AA             _gets_end:
0202+  17AA 19 00         mov al, 0
0203+  17AC 3E            mov [d], al        ; terminate string
0204+  17AD E7            pop d
0205+  17AE E4            pop a
0206+  17AF 09            ret
0207+  17B0             
0208+  17B0             ;-----------------------------------------------------------------------------
0209+  17B0             ;; INPUT TEXT
0210+  17B0             ;; terminated with CTRL+D
0211+  17B0             ;; pointer in D
0212+  17B0             ;-----------------------------------------------------------------------------
0213+  17B0             _gettxt:
0214+  17B0 D7            push a
0215+  17B1 DA            push d
0216+  17B2             _gettxt_loop:
0217+  17B2 19 01         mov al, 1
0218+  17B4 05 03         syscall sys_io      ; receive in AH
0219+  17B6 B9 00         cmp al, 0        ; check error code (AL)
0220+  17B8 C6 B2 17      je _gettxt_loop    ; if no char received, retry
0221+  17BB 76 04         cmp ah, 4      ; EOT
0222+  17BD C6 FB 17      je _gettxt_end
0223+  17C0 76 08         cmp ah, $08      ; check for backspace
0224+  17C2 C6 F7 17      je _gettxt_backspace
0225+  17C5 76 5C         cmp ah, $5C        ; '\'
0226+  17C7 C6 D0 17      je _gettxt_escape
0227+  17CA 1A            mov al, ah
0228+  17CB 3E            mov [d], al
0229+  17CC 79            inc d
0230+  17CD 0A B2 17      jmp _gettxt_loop
0231+  17D0             _gettxt_escape:
0232+  17D0 19 01         mov al, 1
0233+  17D2 05 03         syscall sys_io      ; receive in AH
0234+  17D4 B9 00         cmp al, 0        ; check error code (AL)
0235+  17D6 C6 D0 17      je _gettxt_escape    ; if no char received, retry
0236+  17D9 76 6E         cmp ah, 'n'
0237+  17DB C6 E9 17      je _gettxt_LF
0238+  17DE 76 72         cmp ah, 'r'
0239+  17E0 C6 F0 17      je _gettxt_CR
0240+  17E3 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  17E4 3E            mov [d], al
0242+  17E5 79            inc d
0243+  17E6 0A B2 17      jmp _gettxt_loop
0244+  17E9             _gettxt_LF:
0245+  17E9 19 0A         mov al, $0A
0246+  17EB 3E            mov [d], al
0247+  17EC 79            inc d
0248+  17ED 0A B2 17      jmp _gettxt_loop
0249+  17F0             _gettxt_CR:
0250+  17F0 19 0D         mov al, $0D
0251+  17F2 3E            mov [d], al
0252+  17F3 79            inc d
0253+  17F4 0A B2 17      jmp _gettxt_loop
0254+  17F7             _gettxt_backspace:
0255+  17F7 7F            dec d
0256+  17F8 0A B2 17      jmp _gettxt_loop
0257+  17FB             _gettxt_end:
0258+  17FB 19 00         mov al, 0
0259+  17FD 3E            mov [d], al        ; terminate string
0260+  17FE E7            pop d
0261+  17FF E4            pop a
0262+  1800 09            ret
0263+  1801             
0264+  1801             ;-----------------------------------------------------------------------------
0265+  1801             ; PRINT NEW LINE
0266+  1801             ;-----------------------------------------------------------------------------
0267+  1801             printnl:
0268+  1801 D7            push a
0269+  1802 10 00 0A      mov a, $0A00
0270+  1805 05 03         syscall sys_io
0271+  1807 10 00 0D      mov a, $0D00
0272+  180A 05 03         syscall sys_io
0273+  180C E4            pop a
0274+  180D 09            ret
0275+  180E             
0276+  180E             ;-----------------------------------------------------------------------------
0277+  180E             ; _strtoint
0278+  180E             ; 4 digit hex string number in d
0279+  180E             ; integer returned in A
0280+  180E             ;-----------------------------------------------------------------------------
0281+  180E             _strtointx:
0282+  180E D8            push b
0283+  180F 32            mov bl, [d]
0284+  1810 37            mov bh, bl
0285+  1811 33 01 00      mov bl, [d + 1]
0286+  1814 07 C8 16      call _atoi        ; convert to int in AL
0287+  1817 23            mov ah, al        ; move to AH
0288+  1818 33 02 00      mov bl, [d + 2]
0289+  181B 37            mov bh, bl
0290+  181C 33 03 00      mov bl, [d + 3]
0291+  181F 07 C8 16      call _atoi        ; convert to int in AL
0292+  1822 E5            pop b
0293+  1823 09            ret
0294+  1824             
0295+  1824             ;-----------------------------------------------------------------------------
0296+  1824             ; _strtoint
0297+  1824             ; 5 digit base10 string number in d
0298+  1824             ; integer returned in A
0299+  1824             ;-----------------------------------------------------------------------------
0300+  1824             _strtoint:
0301+  1824 E2            push si
0302+  1825 D8            push b
0303+  1826 D9            push c
0304+  1827 DA            push d
0305+  1828 07 6A 16      call _strlen      ; get string length in C
0306+  182B 7E            dec c
0307+  182C FD 4E         mov si, d
0308+  182E 12            mov a, c
0309+  182F FD 99         shl a
0310+  1831 3B A0 19      mov d, table_power
0311+  1834 59            add d, a
0312+  1835 38 00 00      mov c, 0
0313+  1838             _strtoint_L0:
0314+  1838 F6            lodsb      ; load ASCII to al
0315+  1839 B9 00         cmp al, 0
0316+  183B C6 4E 18      je _strtoint_end
0317+  183E 6F 30         sub al, $30    ; make into integer
0318+  1840 22 00         mov ah, 0
0319+  1842 2A            mov b, [d]
0320+  1843 AC            mul a, b      ; result in B since it fits in 16bits
0321+  1844 11            mov a, b
0322+  1845 28            mov b, c
0323+  1846 54            add a, b
0324+  1847 39            mov c, a
0325+  1848 63 02 00      sub d, 2
0326+  184B 0A 38 18      jmp _strtoint_L0
0327+  184E             _strtoint_end:
0328+  184E 12            mov a, c
0329+  184F E7            pop d
0330+  1850 E6            pop c
0331+  1851 E5            pop b
0332+  1852 EF            pop si
0333+  1853 09            ret
0334+  1854             
0335+  1854             ;-----------------------------------------------------------------------------
0336+  1854             ; PRINT NULL TERMINATED STRING
0337+  1854             ; pointer in D
0338+  1854             ;-----------------------------------------------------------------------------
0339+  1854             _puts:
0340+  1854 D7            push a
0341+  1855 DA            push d
0342+  1856             _puts_L1:
0343+  1856 1E            mov al, [d]
0344+  1857 B9 00         cmp al, 0
0345+  1859 C6 65 18      jz _puts_END
0346+  185C 23            mov ah, al
0347+  185D 19 00         mov al, 0
0348+  185F 05 03         syscall sys_io
0349+  1861 79            inc d
0350+  1862 0A 56 18      jmp _puts_L1
0351+  1865             _puts_END:
0352+  1865 E7            pop d
0353+  1866 E4            pop a
0354+  1867 09            ret
0355+  1868             
0356+  1868             ;-----------------------------------------------------------------------------
0357+  1868             ; PRINT N SIZE STRING
0358+  1868             ; pointer in D
0359+  1868             ; size in C
0360+  1868             ;-----------------------------------------------------------------------------
0361+  1868             _putsn:
0362+  1868 DB            push al
0363+  1869 DA            push d
0364+  186A D9            push c
0365+  186B             _putsn_L0:
0366+  186B 1E            mov al, [d]
0367+  186C 23            mov ah, al
0368+  186D 19 00         mov al, 0
0369+  186F 05 03         syscall sys_io
0370+  1871 79            inc d
0371+  1872 7E            dec c  
0372+  1873 C2 00 00      cmp c, 0
0373+  1876 C7 6B 18      jne _putsn_L0
0374+  1879             _putsn_end:
0375+  1879 E6            pop c
0376+  187A E7            pop d
0377+  187B E8            pop al
0378+  187C 09            ret
0379+  187D             
0380+  187D             ;-----------------------------------------------------------------------------
0381+  187D             ; print 16bit decimal number
0382+  187D             ; input number in A
0383+  187D             ;-----------------------------------------------------------------------------
0384+  187D             print_u16d:
0385+  187D D7            push a
0386+  187E D8            push b
0387+  187F 26 10 27      mov b, 10000
0388+  1882 AE            div a, b      ; get 10000's coeff.
0389+  1883 07 A5 18      call print_number
0390+  1886 11            mov a, b
0391+  1887 26 E8 03      mov b, 1000
0392+  188A AE            div a, b      ; get 1000's coeff.
0393+  188B 07 A5 18      call print_number
0394+  188E 11            mov a, b
0395+  188F 26 64 00      mov b, 100
0396+  1892 AE            div a, b
0397+  1893 07 A5 18      call print_number
0398+  1896 11            mov a, b
0399+  1897 26 0A 00      mov b, 10
0400+  189A AE            div a, b
0401+  189B 07 A5 18      call print_number
0402+  189E 1B            mov al, bl      ; 1's coeff in bl
0403+  189F 07 A5 18      call print_number
0404+  18A2 E5            pop b
0405+  18A3 E4            pop a
0406+  18A4 09            ret
0407+  18A5             
0408+  18A5             ;-----------------------------------------------------------------------------
0409+  18A5             ; print AL
0410+  18A5             ;-----------------------------------------------------------------------------
0411+  18A5             print_number:
0412+  18A5 6A 30         add al, $30
0413+  18A7 23            mov ah, al
0414+  18A8 07 0A 17      call _putchar
0415+  18AB 09            ret
0416+  18AC             
0417+  18AC             ;-----------------------------------------------------------------------------
0418+  18AC             ; PRINT 16BIT HEX INTEGER
0419+  18AC             ; integer value in reg B
0420+  18AC             ;-----------------------------------------------------------------------------
0421+  18AC             print_u16x:
0422+  18AC D7            push a
0423+  18AD D8            push b
0424+  18AE DD            push bl
0425+  18AF 30            mov bl, bh
0426+  18B0 07 D8 16      call _itoa        ; convert bh to char in A
0427+  18B3 2F            mov bl, al        ; save al
0428+  18B4 19 00         mov al, 0
0429+  18B6 05 03         syscall sys_io        ; display AH
0430+  18B8 24            mov ah, bl        ; retrieve al
0431+  18B9 19 00         mov al, 0
0432+  18BB 05 03         syscall sys_io        ; display AL
0433+  18BD             
0434+  18BD EA            pop bl
0435+  18BE 07 D8 16      call _itoa        ; convert bh to char in A
0436+  18C1 2F            mov bl, al        ; save al
0437+  18C2 19 00         mov al, 0
0438+  18C4 05 03         syscall sys_io        ; display AH
0439+  18C6 24            mov ah, bl        ; retrieve al
0440+  18C7 19 00         mov al, 0
0441+  18C9 05 03         syscall sys_io        ; display AL
0442+  18CB             
0443+  18CB E5            pop b
0444+  18CC E4            pop a
0445+  18CD 09            ret
0446+  18CE             
0447+  18CE             ;-----------------------------------------------------------------------------
0448+  18CE             ; INPUT 16BIT HEX INTEGER
0449+  18CE             ; read 16bit integer into A
0450+  18CE             ;-----------------------------------------------------------------------------
0451+  18CE             scan_u16x:
0452+  18CE F8 10 00      enter 16
0453+  18D1 D8            push b
0454+  18D2 DA            push d
0455+  18D3             
0456+  18D3 FA F1 FF      lea d, [bp + -15]
0457+  18D6 07 11 17      call _gets        ; get number
0458+  18D9             
0459+  18D9 32            mov bl, [d]
0460+  18DA 37            mov bh, bl
0461+  18DB 33 01 00      mov bl, [d + 1]
0462+  18DE 07 C8 16      call _atoi        ; convert to int in AL
0463+  18E1 23            mov ah, al        ; move to AH
0464+  18E2             
0465+  18E2 33 02 00      mov bl, [d + 2]
0466+  18E5 37            mov bh, bl
0467+  18E6 33 03 00      mov bl, [d + 3]
0468+  18E9 07 C8 16      call _atoi        ; convert to int in AL
0469+  18EC             
0470+  18EC E7            pop d
0471+  18ED E5            pop b
0472+  18EE F9            leave
0473+  18EF 09            ret
0474+  18F0             
0475+  18F0             ;-----------------------------------------------------------------------------
0476+  18F0             ; PRINT 8bit HEX INTEGER
0477+  18F0             ; integer value in reg bl
0478+  18F0             ;-----------------------------------------------------------------------------
0479+  18F0             print_u8x:
0480+  18F0 D7            push a
0481+  18F1 DD            push bl
0482+  18F2             
0483+  18F2 07 D8 16      call _itoa        ; convert bl to char in A
0484+  18F5 2F            mov bl, al        ; save al
0485+  18F6 19 00         mov al, 0
0486+  18F8 05 03         syscall sys_io        ; display AH
0487+  18FA 24            mov ah, bl        ; retrieve al
0488+  18FB 19 00         mov al, 0
0489+  18FD 05 03         syscall sys_io        ; display AL
0490+  18FF             
0491+  18FF EA            pop bl
0492+  1900 E4            pop a
0493+  1901 09            ret
0494+  1902             
0495+  1902             ;-----------------------------------------------------------------------------
0496+  1902             ; print 8bit decimal unsigned number
0497+  1902             ; input number in AL
0498+  1902             ;-----------------------------------------------------------------------------
0499+  1902             print_u8d:
0500+  1902 D7            push a
0501+  1903 D8            push b
0502+  1904             
0503+  1904 22 00         mov ah, 0
0504+  1906 26 64 00      mov b, 100
0505+  1909 AE            div a, b
0506+  190A D8            push b      ; save remainder
0507+  190B B9 00         cmp al, 0
0508+  190D C6 17 19      je skip100
0509+  1910 6A 30         add al, $30
0510+  1912 23            mov ah, al
0511+  1913 19 00         mov al, 0
0512+  1915 05 03         syscall sys_io  ; print coeff
0513+  1917             skip100:
0514+  1917 E4            pop a
0515+  1918 22 00         mov ah, 0
0516+  191A 26 0A 00      mov b, 10
0517+  191D AE            div a, b
0518+  191E D8            push b      ; save remainder
0519+  191F B9 00         cmp al, 0
0520+  1921 C6 2B 19      je skip10
0521+  1924 6A 30         add al, $30
0522+  1926 23            mov ah, al
0523+  1927 19 00         mov al, 0
0524+  1929 05 03         syscall sys_io  ; print coeff
0525+  192B             skip10:
0526+  192B E4            pop a
0527+  192C 1B            mov al, bl
0528+  192D 6A 30         add al, $30
0529+  192F 23            mov ah, al
0530+  1930 19 00         mov al, 0
0531+  1932 05 03         syscall sys_io  ; print coeff
0532+  1934 E5            pop b
0533+  1935 E4            pop a
0534+  1936 09            ret
0535+  1937             
0536+  1937             ;-----------------------------------------------------------------------------
0537+  1937             ; INPUT 8BIT HEX INTEGER
0538+  1937             ; read 8bit integer into AL
0539+  1937             ;-----------------------------------------------------------------------------
0540+  1937             scan_u8x:
0541+  1937 F8 04 00      enter 4
0542+  193A D8            push b
0543+  193B DA            push d
0544+  193C             
0545+  193C FA FD FF      lea d, [bp + -3]
0546+  193F 07 11 17      call _gets        ; get number
0547+  1942             
0548+  1942 32            mov bl, [d]
0549+  1943 37            mov bh, bl
0550+  1944 33 01 00      mov bl, [d + 1]
0551+  1947 07 C8 16      call _atoi        ; convert to int in AL
0552+  194A             
0553+  194A E7            pop d
0554+  194B E5            pop b
0555+  194C F9            leave
0556+  194D 09            ret
0557+  194E             
0558+  194E             ;-----------------------------------------------------------------------------
0559+  194E             ; input decimal number
0560+  194E             ; result in A
0561+  194E             ; 655'\0'
0562+  194E             ; low--------high
0563+  194E             ;-----------------------------------------------------------------------------
0564+  194E             scan_u16d:
0565+  194E F8 08 00      enter 8
0566+  1951 E2            push si
0567+  1952 D8            push b
0568+  1953 D9            push c
0569+  1954 DA            push d
0570+  1955 FA F9 FF      lea d, [bp +- 7]
0571+  1958 07 11 17      call _gets
0572+  195B 07 6A 16      call _strlen      ; get string length in C
0573+  195E 7E            dec c
0574+  195F FD 4E         mov si, d
0575+  1961 12            mov a, c
0576+  1962 FD 99         shl a
0577+  1964 3B A0 19      mov d, table_power
0578+  1967 59            add d, a
0579+  1968 38 00 00      mov c, 0
0580+  196B             mul_loop:
0581+  196B F6            lodsb      ; load ASCII to al
0582+  196C B9 00         cmp al, 0
0583+  196E C6 81 19      je mul_exit
0584+  1971 6F 30         sub al, $30    ; make into integer
0585+  1973 22 00         mov ah, 0
0586+  1975 2A            mov b, [d]
0587+  1976 AC            mul a, b      ; result in B since it fits in 16bits
0588+  1977 11            mov a, b
0589+  1978 28            mov b, c
0590+  1979 54            add a, b
0591+  197A 39            mov c, a
0592+  197B 63 02 00      sub d, 2
0593+  197E 0A 6B 19      jmp mul_loop
0594+  1981             mul_exit:
0595+  1981 12            mov a, c
0596+  1982 E7            pop d
0597+  1983 E6            pop c
0598+  1984 E5            pop b
0599+  1985 EF            pop si
0600+  1986 F9            leave
0601+  1987 09            ret
0602+  1988             
0603+  1988 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  198C 34 35 36 37 
0603+  1990 38 39 41 42 
0603+  1994 43 44 45 46 
0604+  1998 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  199C 1B 5B 48 00 
0605+  19A0             
0606+  19A0             table_power:
0607+  19A0 01 00         .dw 1
0608+  19A2 0A 00         .dw 10
0609+  19A4 64 00         .dw 100
0610+  19A6 E8 03         .dw 1000
0611+  19A8 10 27         .dw 100002805   19AA             ; --- END INLINE ASM BLOCK
2806   19AA             
2807   19AA F9            leave
2808   19AB 09            ret
2809   19AC             
2810   19AC             base64_encode:
2811   19AC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2812   19AF             ;; int i = 0; 
2813   19AF 52 02 00      sub sp, 2 ; i
2814   19B2             ; --- START LOCAL VAR INITIALIZATION
2815   19B2 FA FF FF      lea d, [bp + -1] ; $i
2816   19B5 DA            push d
2817   19B6 26 00 00      mov b, $0
2818   19B9 E7            pop d
2819   19BA FD 43         mov [d], b
2820   19BC             ; --- END LOCAL VAR INITIALIZATION
2821   19BC             ;; int j = 0; 
2822   19BC 52 02 00      sub sp, 2 ; j
2823   19BF             ; --- START LOCAL VAR INITIALIZATION
2824   19BF FA FD FF      lea d, [bp + -3] ; $j
2825   19C2 DA            push d
2826   19C3 26 00 00      mov b, $0
2827   19C6 E7            pop d
2828   19C7 FD 43         mov [d], b
2829   19C9             ; --- END LOCAL VAR INITIALIZATION
2830   19C9             ;; int k; 
2831   19C9 52 02 00      sub sp, 2 ; k
2832   19CC             ;; int input_len; 
2833   19CC 52 02 00      sub sp, 2 ; input_len
2834   19CF             ;; unsigned char input_buffer[3]; 
2835   19CF 52 03 00      sub sp, 3 ; input_buffer
2836   19D2             ;; unsigned char output_buffer[4]; 
2837   19D2 52 04 00      sub sp, 4 ; output_buffer
2838   19D5             ;; input_len = strlen(input); 
2839   19D5 FA F9 FF      lea d, [bp + -7] ; $input_len
2840   19D8 DA            push d
2841   19D9 FA 05 00      lea d, [bp + 5] ; $input
2842   19DC 2A            mov b, [d]
2843   19DD FD AB         swp b
2844   19DF D8            push b
2845   19E0 07 F5 05      call strlen
2846   19E3 51 02 00      add sp, 2
2847   19E6 E7            pop d
2848   19E7 FD 43         mov [d], b
2849   19E9             ;; while (input_len--) { 
2850   19E9             _while42_cond:
2851   19E9 FA F9 FF      lea d, [bp + -7] ; $input_len
2852   19EC 2A            mov b, [d]
2853   19ED D8            push b
2854   19EE FD 7D         dec b
2855   19F0 FA F9 FF      lea d, [bp + -7] ; $input_len
2856   19F3 FD 43         mov [d], b
2857   19F5 E5            pop b
2858   19F6 C0 00 00      cmp b, 0
2859   19F9 C6 AD 1B      je _while42_exit
2860   19FC             _while42_block:
2861   19FC             ;; input_buffer[i++] = *(input++); 
2862   19FC FA F6 FF      lea d, [bp + -10] ; $input_buffer
2863   19FF D7            push a
2864   1A00 DA            push d
2865   1A01 FA FF FF      lea d, [bp + -1] ; $i
2866   1A04 2A            mov b, [d]
2867   1A05 D8            push b
2868   1A06 FD 77         inc b
2869   1A08 FA FF FF      lea d, [bp + -1] ; $i
2870   1A0B FD 43         mov [d], b
2871   1A0D E5            pop b
2872   1A0E E7            pop d
2873   1A0F 5A            add d, b
2874   1A10 E4            pop a
2875   1A11 DA            push d
2876   1A12 FA 05 00      lea d, [bp + 5] ; $input
2877   1A15 2A            mov b, [d]
2878   1A16 D8            push b
2879   1A17 FD 77         inc b
2880   1A19 FA 05 00      lea d, [bp + 5] ; $input
2881   1A1C FD 43         mov [d], b
2882   1A1E E5            pop b
2883   1A1F 74            mov d, b
2884   1A20 32            mov bl, [d]
2885   1A21 A7 00         mov bh, 0
2886   1A23 E7            pop d
2887   1A24 FD 3E         mov [d], bl
2888   1A26             ;; if (i == 3) { 
2889   1A26             _if43_cond:
2890   1A26 FA FF FF      lea d, [bp + -1] ; $i
2891   1A29 2A            mov b, [d]
2892   1A2A             ; START RELATIONAL
2893   1A2A D7            push a
2894   1A2B 11            mov a, b
2895   1A2C 26 03 00      mov b, $3
2896   1A2F B0            cmp a, b
2897   1A30 FD 71         seq ; ==
2898   1A32 E4            pop a
2899   1A33             ; END RELATIONAL
2900   1A33 C0 00 00      cmp b, 0
2901   1A36 C6 AA 1B      je _if43_exit
2902   1A39             _if43_true:
2903   1A39             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
2904   1A39 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2905   1A3C D7            push a
2906   1A3D DA            push d
2907   1A3E 26 00 00      mov b, $0
2908   1A41 E7            pop d
2909   1A42 5A            add d, b
2910   1A43 E4            pop a
2911   1A44 DA            push d
2912   1A45 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2913   1A48 D7            push a
2914   1A49 DA            push d
2915   1A4A 26 00 00      mov b, $0
2916   1A4D E7            pop d
2917   1A4E 5A            add d, b
2918   1A4F E4            pop a
2919   1A50 32            mov bl, [d]
2920   1A51 A7 00         mov bh, 0
2921   1A53 D7            push a
2922   1A54 11            mov a, b
2923   1A55 26 FC 00      mov b, $fc
2924   1A58 FD 92         and b, a ; &
2925   1A5A E4            pop a
2926   1A5B             ; START SHIFT
2927   1A5B D7            push a
2928   1A5C 11            mov a, b
2929   1A5D 26 02 00      mov b, $2
2930   1A60 FD 39         mov c, b
2931   1A62 A5            ashr a, cl
2932   1A63 27            mov b, a
2933   1A64 E4            pop a
2934   1A65             ; END SHIFT
2935   1A65 E7            pop d
2936   1A66 FD 3E         mov [d], bl
2937   1A68             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
2938   1A68 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2939   1A6B D7            push a
2940   1A6C DA            push d
2941   1A6D 26 01 00      mov b, $1
2942   1A70 E7            pop d
2943   1A71 5A            add d, b
2944   1A72 E4            pop a
2945   1A73 DA            push d
2946   1A74 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2947   1A77 D7            push a
2948   1A78 DA            push d
2949   1A79 26 00 00      mov b, $0
2950   1A7C E7            pop d
2951   1A7D 5A            add d, b
2952   1A7E E4            pop a
2953   1A7F 32            mov bl, [d]
2954   1A80 A7 00         mov bh, 0
2955   1A82 D7            push a
2956   1A83 11            mov a, b
2957   1A84 26 03 00      mov b, $3
2958   1A87 FD 92         and b, a ; &
2959   1A89 E4            pop a
2960   1A8A             ; START SHIFT
2961   1A8A D7            push a
2962   1A8B 11            mov a, b
2963   1A8C 26 04 00      mov b, $4
2964   1A8F FD 39         mov c, b
2965   1A91 9D            shl a, cl
2966   1A92 27            mov b, a
2967   1A93 E4            pop a
2968   1A94             ; END SHIFT
2969   1A94             ; START TERMS
2970   1A94 D7            push a
2971   1A95 11            mov a, b
2972   1A96 FA F6 FF      lea d, [bp + -10] ; $input_buffer
2973   1A99 D7            push a
2974   1A9A DA            push d
2975   1A9B 26 01 00      mov b, $1
2976   1A9E E7            pop d
2977   1A9F 5A            add d, b
2978   1AA0 E4            pop a
2979   1AA1 32            mov bl, [d]
2980   1AA2 A7 00         mov bh, 0
2981   1AA4 D7            push a
2982   1AA5 11            mov a, b
2983   1AA6 26 F0 00      mov b, $f0
2984   1AA9 FD 92         and b, a ; &
2985   1AAB E4            pop a
2986   1AAC             ; START SHIFT
2987   1AAC D7            push a
2988   1AAD 11            mov a, b
2989   1AAE 26 04 00      mov b, $4
2990   1AB1 FD 39         mov c, b
2991   1AB3 A5            ashr a, cl
2992   1AB4 27            mov b, a
2993   1AB5 E4            pop a
2994   1AB6             ; END SHIFT
2995   1AB6 56            add b, a
2996   1AB7 E4            pop a
2997   1AB8             ; END TERMS
2998   1AB8 E7            pop d
2999   1AB9 FD 3E         mov [d], bl
3000   1ABB             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
3001   1ABB FA F2 FF      lea d, [bp + -14] ; $output_buffer
3002   1ABE D7            push a
3003   1ABF DA            push d
3004   1AC0 26 02 00      mov b, $2
3005   1AC3 E7            pop d
3006   1AC4 5A            add d, b
3007   1AC5 E4            pop a
3008   1AC6 DA            push d
3009   1AC7 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3010   1ACA D7            push a
3011   1ACB DA            push d
3012   1ACC 26 01 00      mov b, $1
3013   1ACF E7            pop d
3014   1AD0 5A            add d, b
3015   1AD1 E4            pop a
3016   1AD2 32            mov bl, [d]
3017   1AD3 A7 00         mov bh, 0
3018   1AD5 D7            push a
3019   1AD6 11            mov a, b
3020   1AD7 26 0F 00      mov b, $f
3021   1ADA FD 92         and b, a ; &
3022   1ADC E4            pop a
3023   1ADD             ; START SHIFT
3024   1ADD D7            push a
3025   1ADE 11            mov a, b
3026   1ADF 26 02 00      mov b, $2
3027   1AE2 FD 39         mov c, b
3028   1AE4 9D            shl a, cl
3029   1AE5 27            mov b, a
3030   1AE6 E4            pop a
3031   1AE7             ; END SHIFT
3032   1AE7             ; START TERMS
3033   1AE7 D7            push a
3034   1AE8 11            mov a, b
3035   1AE9 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3036   1AEC D7            push a
3037   1AED DA            push d
3038   1AEE 26 02 00      mov b, $2
3039   1AF1 E7            pop d
3040   1AF2 5A            add d, b
3041   1AF3 E4            pop a
3042   1AF4 32            mov bl, [d]
3043   1AF5 A7 00         mov bh, 0
3044   1AF7 D7            push a
3045   1AF8 11            mov a, b
3046   1AF9 26 C0 00      mov b, $c0
3047   1AFC FD 92         and b, a ; &
3048   1AFE E4            pop a
3049   1AFF             ; START SHIFT
3050   1AFF D7            push a
3051   1B00 11            mov a, b
3052   1B01 26 06 00      mov b, $6
3053   1B04 FD 39         mov c, b
3054   1B06 A5            ashr a, cl
3055   1B07 27            mov b, a
3056   1B08 E4            pop a
3057   1B09             ; END SHIFT
3058   1B09 56            add b, a
3059   1B0A E4            pop a
3060   1B0B             ; END TERMS
3061   1B0B E7            pop d
3062   1B0C FD 3E         mov [d], bl
3063   1B0E             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
3064   1B0E FA F2 FF      lea d, [bp + -14] ; $output_buffer
3065   1B11 D7            push a
3066   1B12 DA            push d
3067   1B13 26 03 00      mov b, $3
3068   1B16 E7            pop d
3069   1B17 5A            add d, b
3070   1B18 E4            pop a
3071   1B19 DA            push d
3072   1B1A FA F6 FF      lea d, [bp + -10] ; $input_buffer
3073   1B1D D7            push a
3074   1B1E DA            push d
3075   1B1F 26 02 00      mov b, $2
3076   1B22 E7            pop d
3077   1B23 5A            add d, b
3078   1B24 E4            pop a
3079   1B25 32            mov bl, [d]
3080   1B26 A7 00         mov bh, 0
3081   1B28 D7            push a
3082   1B29 11            mov a, b
3083   1B2A 26 3F 00      mov b, $3f
3084   1B2D FD 92         and b, a ; &
3085   1B2F E4            pop a
3086   1B30 E7            pop d
3087   1B31 FD 3E         mov [d], bl
3088   1B33             ;; for (i = 0; i < 4; i++) { 
3089   1B33             _for44_init:
3090   1B33 FA FF FF      lea d, [bp + -1] ; $i
3091   1B36 DA            push d
3092   1B37 26 00 00      mov b, $0
3093   1B3A E7            pop d
3094   1B3B FD 43         mov [d], b
3095   1B3D             _for44_cond:
3096   1B3D FA FF FF      lea d, [bp + -1] ; $i
3097   1B40 2A            mov b, [d]
3098   1B41             ; START RELATIONAL
3099   1B41 D7            push a
3100   1B42 11            mov a, b
3101   1B43 26 04 00      mov b, $4
3102   1B46 B0            cmp a, b
3103   1B47 FD 73         slt ; < (signed)
3104   1B49 E4            pop a
3105   1B4A             ; END RELATIONAL
3106   1B4A C0 00 00      cmp b, 0
3107   1B4D C6 9D 1B      je _for44_exit
3108   1B50             _for44_block:
3109   1B50             ;; output[j++] = base64_table[output_buffer[i]]; 
3110   1B50 FA 07 00      lea d, [bp + 7] ; $output
3111   1B53 FD 2A         mov d, [d]
3112   1B55 D7            push a
3113   1B56 DA            push d
3114   1B57 FA FD FF      lea d, [bp + -3] ; $j
3115   1B5A 2A            mov b, [d]
3116   1B5B D8            push b
3117   1B5C FD 77         inc b
3118   1B5E FA FD FF      lea d, [bp + -3] ; $j
3119   1B61 FD 43         mov [d], b
3120   1B63 E5            pop b
3121   1B64 E7            pop d
3122   1B65 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3123   1B69 E4            pop a
3124   1B6A DA            push d
3125   1B6B 3B 21 23      mov d, _base64_table ; $base64_table
3126   1B6E FD 2A         mov d, [d]
3127   1B70 D7            push a
3128   1B71 DA            push d
3129   1B72 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3130   1B75 D7            push a
3131   1B76 DA            push d
3132   1B77 FA FF FF      lea d, [bp + -1] ; $i
3133   1B7A 2A            mov b, [d]
3134   1B7B E7            pop d
3135   1B7C 5A            add d, b
3136   1B7D E4            pop a
3137   1B7E 32            mov bl, [d]
3138   1B7F A7 00         mov bh, 0
3139   1B81 E7            pop d
3140   1B82 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3141   1B86 E4            pop a
3142   1B87 32            mov bl, [d]
3143   1B88 A7 00         mov bh, 0
3144   1B8A E7            pop d
3145   1B8B FD 3E         mov [d], bl
3146   1B8D             _for44_update:
3147   1B8D FA FF FF      lea d, [bp + -1] ; $i
3148   1B90 2A            mov b, [d]
3149   1B91 D8            push b
3150   1B92 FD 77         inc b
3151   1B94 FA FF FF      lea d, [bp + -1] ; $i
3152   1B97 FD 43         mov [d], b
3153   1B99 E5            pop b
3154   1B9A 0A 3D 1B      jmp _for44_cond
3155   1B9D             _for44_exit:
3156   1B9D             ;; i = 0; 
3157   1B9D FA FF FF      lea d, [bp + -1] ; $i
3158   1BA0 DA            push d
3159   1BA1 26 00 00      mov b, $0
3160   1BA4 E7            pop d
3161   1BA5 FD 43         mov [d], b
3162   1BA7 0A AA 1B      jmp _if43_exit
3163   1BAA             _if43_exit:
3164   1BAA 0A E9 19      jmp _while42_cond
3165   1BAD             _while42_exit:
3166   1BAD             ;; if (i) { 
3167   1BAD             _if45_cond:
3168   1BAD FA FF FF      lea d, [bp + -1] ; $i
3169   1BB0 2A            mov b, [d]
3170   1BB1 C0 00 00      cmp b, 0
3171   1BB4 C6 82 1D      je _if45_exit
3172   1BB7             _if45_true:
3173   1BB7             ;; for (k = i; k < 3; k++) { 
3174   1BB7             _for46_init:
3175   1BB7 FA FB FF      lea d, [bp + -5] ; $k
3176   1BBA DA            push d
3177   1BBB FA FF FF      lea d, [bp + -1] ; $i
3178   1BBE 2A            mov b, [d]
3179   1BBF E7            pop d
3180   1BC0 FD 43         mov [d], b
3181   1BC2             _for46_cond:
3182   1BC2 FA FB FF      lea d, [bp + -5] ; $k
3183   1BC5 2A            mov b, [d]
3184   1BC6             ; START RELATIONAL
3185   1BC6 D7            push a
3186   1BC7 11            mov a, b
3187   1BC8 26 03 00      mov b, $3
3188   1BCB B0            cmp a, b
3189   1BCC FD 73         slt ; < (signed)
3190   1BCE E4            pop a
3191   1BCF             ; END RELATIONAL
3192   1BCF C0 00 00      cmp b, 0
3193   1BD2 C6 F8 1B      je _for46_exit
3194   1BD5             _for46_block:
3195   1BD5             ;; input_buffer[k] = '\0'; 
3196   1BD5 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3197   1BD8 D7            push a
3198   1BD9 DA            push d
3199   1BDA FA FB FF      lea d, [bp + -5] ; $k
3200   1BDD 2A            mov b, [d]
3201   1BDE E7            pop d
3202   1BDF 5A            add d, b
3203   1BE0 E4            pop a
3204   1BE1 DA            push d
3205   1BE2 26 00 00      mov b, $0
3206   1BE5 E7            pop d
3207   1BE6 FD 3E         mov [d], bl
3208   1BE8             _for46_update:
3209   1BE8 FA FB FF      lea d, [bp + -5] ; $k
3210   1BEB 2A            mov b, [d]
3211   1BEC D8            push b
3212   1BED FD 77         inc b
3213   1BEF FA FB FF      lea d, [bp + -5] ; $k
3214   1BF2 FD 43         mov [d], b
3215   1BF4 E5            pop b
3216   1BF5 0A C2 1B      jmp _for46_cond
3217   1BF8             _for46_exit:
3218   1BF8             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
3219   1BF8 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3220   1BFB D7            push a
3221   1BFC DA            push d
3222   1BFD 26 00 00      mov b, $0
3223   1C00 E7            pop d
3224   1C01 5A            add d, b
3225   1C02 E4            pop a
3226   1C03 DA            push d
3227   1C04 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3228   1C07 D7            push a
3229   1C08 DA            push d
3230   1C09 26 00 00      mov b, $0
3231   1C0C E7            pop d
3232   1C0D 5A            add d, b
3233   1C0E E4            pop a
3234   1C0F 32            mov bl, [d]
3235   1C10 A7 00         mov bh, 0
3236   1C12 D7            push a
3237   1C13 11            mov a, b
3238   1C14 26 FC 00      mov b, $fc
3239   1C17 FD 92         and b, a ; &
3240   1C19 E4            pop a
3241   1C1A             ; START SHIFT
3242   1C1A D7            push a
3243   1C1B 11            mov a, b
3244   1C1C 26 02 00      mov b, $2
3245   1C1F FD 39         mov c, b
3246   1C21 A5            ashr a, cl
3247   1C22 27            mov b, a
3248   1C23 E4            pop a
3249   1C24             ; END SHIFT
3250   1C24 E7            pop d
3251   1C25 FD 3E         mov [d], bl
3252   1C27             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
3253   1C27 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3254   1C2A D7            push a
3255   1C2B DA            push d
3256   1C2C 26 01 00      mov b, $1
3257   1C2F E7            pop d
3258   1C30 5A            add d, b
3259   1C31 E4            pop a
3260   1C32 DA            push d
3261   1C33 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3262   1C36 D7            push a
3263   1C37 DA            push d
3264   1C38 26 00 00      mov b, $0
3265   1C3B E7            pop d
3266   1C3C 5A            add d, b
3267   1C3D E4            pop a
3268   1C3E 32            mov bl, [d]
3269   1C3F A7 00         mov bh, 0
3270   1C41 D7            push a
3271   1C42 11            mov a, b
3272   1C43 26 03 00      mov b, $3
3273   1C46 FD 92         and b, a ; &
3274   1C48 E4            pop a
3275   1C49             ; START SHIFT
3276   1C49 D7            push a
3277   1C4A 11            mov a, b
3278   1C4B 26 04 00      mov b, $4
3279   1C4E FD 39         mov c, b
3280   1C50 9D            shl a, cl
3281   1C51 27            mov b, a
3282   1C52 E4            pop a
3283   1C53             ; END SHIFT
3284   1C53             ; START TERMS
3285   1C53 D7            push a
3286   1C54 11            mov a, b
3287   1C55 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3288   1C58 D7            push a
3289   1C59 DA            push d
3290   1C5A 26 01 00      mov b, $1
3291   1C5D E7            pop d
3292   1C5E 5A            add d, b
3293   1C5F E4            pop a
3294   1C60 32            mov bl, [d]
3295   1C61 A7 00         mov bh, 0
3296   1C63 D7            push a
3297   1C64 11            mov a, b
3298   1C65 26 F0 00      mov b, $f0
3299   1C68 FD 92         and b, a ; &
3300   1C6A E4            pop a
3301   1C6B             ; START SHIFT
3302   1C6B D7            push a
3303   1C6C 11            mov a, b
3304   1C6D 26 04 00      mov b, $4
3305   1C70 FD 39         mov c, b
3306   1C72 A5            ashr a, cl
3307   1C73 27            mov b, a
3308   1C74 E4            pop a
3309   1C75             ; END SHIFT
3310   1C75 56            add b, a
3311   1C76 E4            pop a
3312   1C77             ; END TERMS
3313   1C77 E7            pop d
3314   1C78 FD 3E         mov [d], bl
3315   1C7A             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
3316   1C7A FA F2 FF      lea d, [bp + -14] ; $output_buffer
3317   1C7D D7            push a
3318   1C7E DA            push d
3319   1C7F 26 02 00      mov b, $2
3320   1C82 E7            pop d
3321   1C83 5A            add d, b
3322   1C84 E4            pop a
3323   1C85 DA            push d
3324   1C86 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3325   1C89 D7            push a
3326   1C8A DA            push d
3327   1C8B 26 01 00      mov b, $1
3328   1C8E E7            pop d
3329   1C8F 5A            add d, b
3330   1C90 E4            pop a
3331   1C91 32            mov bl, [d]
3332   1C92 A7 00         mov bh, 0
3333   1C94 D7            push a
3334   1C95 11            mov a, b
3335   1C96 26 0F 00      mov b, $f
3336   1C99 FD 92         and b, a ; &
3337   1C9B E4            pop a
3338   1C9C             ; START SHIFT
3339   1C9C D7            push a
3340   1C9D 11            mov a, b
3341   1C9E 26 02 00      mov b, $2
3342   1CA1 FD 39         mov c, b
3343   1CA3 9D            shl a, cl
3344   1CA4 27            mov b, a
3345   1CA5 E4            pop a
3346   1CA6             ; END SHIFT
3347   1CA6             ; START TERMS
3348   1CA6 D7            push a
3349   1CA7 11            mov a, b
3350   1CA8 FA F6 FF      lea d, [bp + -10] ; $input_buffer
3351   1CAB D7            push a
3352   1CAC DA            push d
3353   1CAD 26 02 00      mov b, $2
3354   1CB0 E7            pop d
3355   1CB1 5A            add d, b
3356   1CB2 E4            pop a
3357   1CB3 32            mov bl, [d]
3358   1CB4 A7 00         mov bh, 0
3359   1CB6 D7            push a
3360   1CB7 11            mov a, b
3361   1CB8 26 C0 00      mov b, $c0
3362   1CBB FD 92         and b, a ; &
3363   1CBD E4            pop a
3364   1CBE             ; START SHIFT
3365   1CBE D7            push a
3366   1CBF 11            mov a, b
3367   1CC0 26 06 00      mov b, $6
3368   1CC3 FD 39         mov c, b
3369   1CC5 A5            ashr a, cl
3370   1CC6 27            mov b, a
3371   1CC7 E4            pop a
3372   1CC8             ; END SHIFT
3373   1CC8 56            add b, a
3374   1CC9 E4            pop a
3375   1CCA             ; END TERMS
3376   1CCA E7            pop d
3377   1CCB FD 3E         mov [d], bl
3378   1CCD             ;; for (k = 0; k < i + 1; k++) { 
3379   1CCD             _for47_init:
3380   1CCD FA FB FF      lea d, [bp + -5] ; $k
3381   1CD0 DA            push d
3382   1CD1 26 00 00      mov b, $0
3383   1CD4 E7            pop d
3384   1CD5 FD 43         mov [d], b
3385   1CD7             _for47_cond:
3386   1CD7 FA FB FF      lea d, [bp + -5] ; $k
3387   1CDA 2A            mov b, [d]
3388   1CDB             ; START RELATIONAL
3389   1CDB D7            push a
3390   1CDC 11            mov a, b
3391   1CDD FA FF FF      lea d, [bp + -1] ; $i
3392   1CE0 2A            mov b, [d]
3393   1CE1             ; START TERMS
3394   1CE1 D7            push a
3395   1CE2 11            mov a, b
3396   1CE3 26 01 00      mov b, $1
3397   1CE6 56            add b, a
3398   1CE7 E4            pop a
3399   1CE8             ; END TERMS
3400   1CE8 B0            cmp a, b
3401   1CE9 FD 73         slt ; < (signed)
3402   1CEB E4            pop a
3403   1CEC             ; END RELATIONAL
3404   1CEC C0 00 00      cmp b, 0
3405   1CEF C6 3F 1D      je _for47_exit
3406   1CF2             _for47_block:
3407   1CF2             ;; output[j++] = base64_table[output_buffer[k]]; 
3408   1CF2 FA 07 00      lea d, [bp + 7] ; $output
3409   1CF5 FD 2A         mov d, [d]
3410   1CF7 D7            push a
3411   1CF8 DA            push d
3412   1CF9 FA FD FF      lea d, [bp + -3] ; $j
3413   1CFC 2A            mov b, [d]
3414   1CFD D8            push b
3415   1CFE FD 77         inc b
3416   1D00 FA FD FF      lea d, [bp + -3] ; $j
3417   1D03 FD 43         mov [d], b
3418   1D05 E5            pop b
3419   1D06 E7            pop d
3420   1D07 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3421   1D0B E4            pop a
3422   1D0C DA            push d
3423   1D0D 3B 21 23      mov d, _base64_table ; $base64_table
3424   1D10 FD 2A         mov d, [d]
3425   1D12 D7            push a
3426   1D13 DA            push d
3427   1D14 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3428   1D17 D7            push a
3429   1D18 DA            push d
3430   1D19 FA FB FF      lea d, [bp + -5] ; $k
3431   1D1C 2A            mov b, [d]
3432   1D1D E7            pop d
3433   1D1E 5A            add d, b
3434   1D1F E4            pop a
3435   1D20 32            mov bl, [d]
3436   1D21 A7 00         mov bh, 0
3437   1D23 E7            pop d
3438   1D24 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3439   1D28 E4            pop a
3440   1D29 32            mov bl, [d]
3441   1D2A A7 00         mov bh, 0
3442   1D2C E7            pop d
3443   1D2D FD 3E         mov [d], bl
3444   1D2F             _for47_update:
3445   1D2F FA FB FF      lea d, [bp + -5] ; $k
3446   1D32 2A            mov b, [d]
3447   1D33 D8            push b
3448   1D34 FD 77         inc b
3449   1D36 FA FB FF      lea d, [bp + -5] ; $k
3450   1D39 FD 43         mov [d], b
3451   1D3B E5            pop b
3452   1D3C 0A D7 1C      jmp _for47_cond
3453   1D3F             _for47_exit:
3454   1D3F             ;; while (i++ < 3) { 
3455   1D3F             _while48_cond:
3456   1D3F FA FF FF      lea d, [bp + -1] ; $i
3457   1D42 2A            mov b, [d]
3458   1D43 D8            push b
3459   1D44 FD 77         inc b
3460   1D46 FA FF FF      lea d, [bp + -1] ; $i
3461   1D49 FD 43         mov [d], b
3462   1D4B E5            pop b
3463   1D4C             ; START RELATIONAL
3464   1D4C D7            push a
3465   1D4D 11            mov a, b
3466   1D4E 26 03 00      mov b, $3
3467   1D51 B0            cmp a, b
3468   1D52 FD 73         slt ; < (signed)
3469   1D54 E4            pop a
3470   1D55             ; END RELATIONAL
3471   1D55 C0 00 00      cmp b, 0
3472   1D58 C6 7F 1D      je _while48_exit
3473   1D5B             _while48_block:
3474   1D5B             ;; output[j++] = '='; 
3475   1D5B FA 07 00      lea d, [bp + 7] ; $output
3476   1D5E FD 2A         mov d, [d]
3477   1D60 D7            push a
3478   1D61 DA            push d
3479   1D62 FA FD FF      lea d, [bp + -3] ; $j
3480   1D65 2A            mov b, [d]
3481   1D66 D8            push b
3482   1D67 FD 77         inc b
3483   1D69 FA FD FF      lea d, [bp + -3] ; $j
3484   1D6C FD 43         mov [d], b
3485   1D6E E5            pop b
3486   1D6F E7            pop d
3487   1D70 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3488   1D74 E4            pop a
3489   1D75 DA            push d
3490   1D76 26 3D 00      mov b, $3d
3491   1D79 E7            pop d
3492   1D7A FD 3E         mov [d], bl
3493   1D7C 0A 3F 1D      jmp _while48_cond
3494   1D7F             _while48_exit:
3495   1D7F 0A 82 1D      jmp _if45_exit
3496   1D82             _if45_exit:
3497   1D82             ;; output[j] = '\0'; 
3498   1D82 FA 07 00      lea d, [bp + 7] ; $output
3499   1D85 FD 2A         mov d, [d]
3500   1D87 D7            push a
3501   1D88 DA            push d
3502   1D89 FA FD FF      lea d, [bp + -3] ; $j
3503   1D8C 2A            mov b, [d]
3504   1D8D E7            pop d
3505   1D8E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3506   1D92 E4            pop a
3507   1D93 DA            push d
3508   1D94 26 00 00      mov b, $0
3509   1D97 E7            pop d
3510   1D98 FD 3E         mov [d], bl
3511   1D9A F9            leave
3512   1D9B 09            ret
3513   1D9C             
3514   1D9C             base64_char_value:
3515   1D9C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3516   1D9F             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
3517   1D9F             _if49_cond:
3518   1D9F FA 05 00      lea d, [bp + 5] ; $c
3519   1DA2 32            mov bl, [d]
3520   1DA3 A7 00         mov bh, 0
3521   1DA5             ; START RELATIONAL
3522   1DA5 D7            push a
3523   1DA6 11            mov a, b
3524   1DA7 26 41 00      mov b, $41
3525   1DAA B0            cmp a, b
3526   1DAB FD 80         sge ; >=
3527   1DAD E4            pop a
3528   1DAE             ; END RELATIONAL
3529   1DAE D7            push a
3530   1DAF 11            mov a, b
3531   1DB0 FA 05 00      lea d, [bp + 5] ; $c
3532   1DB3 32            mov bl, [d]
3533   1DB4 A7 00         mov bh, 0
3534   1DB6             ; START RELATIONAL
3535   1DB6 D7            push a
3536   1DB7 11            mov a, b
3537   1DB8 26 5A 00      mov b, $5a
3538   1DBB B0            cmp a, b
3539   1DBC FD 73         slt ; <= (signed)
3540   1DBE E4            pop a
3541   1DBF             ; END RELATIONAL
3542   1DBF FD A7         sand a, b
3543   1DC1 E4            pop a
3544   1DC2 C0 00 00      cmp b, 0
3545   1DC5 C6 DB 1D      je _if49_exit
3546   1DC8             _if49_true:
3547   1DC8             ;; return c - 'A'; 
3548   1DC8 FA 05 00      lea d, [bp + 5] ; $c
3549   1DCB 32            mov bl, [d]
3550   1DCC A7 00         mov bh, 0
3551   1DCE             ; START TERMS
3552   1DCE D7            push a
3553   1DCF 11            mov a, b
3554   1DD0 26 41 00      mov b, $41
3555   1DD3 60            sub a, b
3556   1DD4 27            mov b, a
3557   1DD5 E4            pop a
3558   1DD6             ; END TERMS
3559   1DD6 F9            leave
3560   1DD7 09            ret
3561   1DD8 0A DB 1D      jmp _if49_exit
3562   1DDB             _if49_exit:
3563   1DDB             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
3564   1DDB             _if50_cond:
3565   1DDB FA 05 00      lea d, [bp + 5] ; $c
3566   1DDE 32            mov bl, [d]
3567   1DDF A7 00         mov bh, 0
3568   1DE1             ; START RELATIONAL
3569   1DE1 D7            push a
3570   1DE2 11            mov a, b
3571   1DE3 26 61 00      mov b, $61
3572   1DE6 B0            cmp a, b
3573   1DE7 FD 80         sge ; >=
3574   1DE9 E4            pop a
3575   1DEA             ; END RELATIONAL
3576   1DEA D7            push a
3577   1DEB 11            mov a, b
3578   1DEC FA 05 00      lea d, [bp + 5] ; $c
3579   1DEF 32            mov bl, [d]
3580   1DF0 A7 00         mov bh, 0
3581   1DF2             ; START RELATIONAL
3582   1DF2 D7            push a
3583   1DF3 11            mov a, b
3584   1DF4 26 7A 00      mov b, $7a
3585   1DF7 B0            cmp a, b
3586   1DF8 FD 73         slt ; <= (signed)
3587   1DFA E4            pop a
3588   1DFB             ; END RELATIONAL
3589   1DFB FD A7         sand a, b
3590   1DFD E4            pop a
3591   1DFE C0 00 00      cmp b, 0
3592   1E01 C6 1C 1E      je _if50_exit
3593   1E04             _if50_true:
3594   1E04             ;; return c - 'a' + 26; 
3595   1E04 FA 05 00      lea d, [bp + 5] ; $c
3596   1E07 32            mov bl, [d]
3597   1E08 A7 00         mov bh, 0
3598   1E0A             ; START TERMS
3599   1E0A D7            push a
3600   1E0B 11            mov a, b
3601   1E0C 26 61 00      mov b, $61
3602   1E0F 60            sub a, b
3603   1E10 27            mov b, a
3604   1E11 11            mov a, b
3605   1E12 26 1A 00      mov b, $1a
3606   1E15 56            add b, a
3607   1E16 E4            pop a
3608   1E17             ; END TERMS
3609   1E17 F9            leave
3610   1E18 09            ret
3611   1E19 0A 1C 1E      jmp _if50_exit
3612   1E1C             _if50_exit:
3613   1E1C             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
3614   1E1C             _if51_cond:
3615   1E1C FA 05 00      lea d, [bp + 5] ; $c
3616   1E1F 32            mov bl, [d]
3617   1E20 A7 00         mov bh, 0
3618   1E22             ; START RELATIONAL
3619   1E22 D7            push a
3620   1E23 11            mov a, b
3621   1E24 26 30 00      mov b, $30
3622   1E27 B0            cmp a, b
3623   1E28 FD 80         sge ; >=
3624   1E2A E4            pop a
3625   1E2B             ; END RELATIONAL
3626   1E2B D7            push a
3627   1E2C 11            mov a, b
3628   1E2D FA 05 00      lea d, [bp + 5] ; $c
3629   1E30 32            mov bl, [d]
3630   1E31 A7 00         mov bh, 0
3631   1E33             ; START RELATIONAL
3632   1E33 D7            push a
3633   1E34 11            mov a, b
3634   1E35 26 39 00      mov b, $39
3635   1E38 B0            cmp a, b
3636   1E39 FD 73         slt ; <= (signed)
3637   1E3B E4            pop a
3638   1E3C             ; END RELATIONAL
3639   1E3C FD A7         sand a, b
3640   1E3E E4            pop a
3641   1E3F C0 00 00      cmp b, 0
3642   1E42 C6 5D 1E      je _if51_exit
3643   1E45             _if51_true:
3644   1E45             ;; return c - '0' + 52; 
3645   1E45 FA 05 00      lea d, [bp + 5] ; $c
3646   1E48 32            mov bl, [d]
3647   1E49 A7 00         mov bh, 0
3648   1E4B             ; START TERMS
3649   1E4B D7            push a
3650   1E4C 11            mov a, b
3651   1E4D 26 30 00      mov b, $30
3652   1E50 60            sub a, b
3653   1E51 27            mov b, a
3654   1E52 11            mov a, b
3655   1E53 26 34 00      mov b, $34
3656   1E56 56            add b, a
3657   1E57 E4            pop a
3658   1E58             ; END TERMS
3659   1E58 F9            leave
3660   1E59 09            ret
3661   1E5A 0A 5D 1E      jmp _if51_exit
3662   1E5D             _if51_exit:
3663   1E5D             ;; if (c == '+') return 62; 
3664   1E5D             _if52_cond:
3665   1E5D FA 05 00      lea d, [bp + 5] ; $c
3666   1E60 32            mov bl, [d]
3667   1E61 A7 00         mov bh, 0
3668   1E63             ; START RELATIONAL
3669   1E63 D7            push a
3670   1E64 11            mov a, b
3671   1E65 26 2B 00      mov b, $2b
3672   1E68 B0            cmp a, b
3673   1E69 FD 71         seq ; ==
3674   1E6B E4            pop a
3675   1E6C             ; END RELATIONAL
3676   1E6C C0 00 00      cmp b, 0
3677   1E6F C6 7A 1E      je _if52_exit
3678   1E72             _if52_true:
3679   1E72             ;; return 62; 
3680   1E72 26 3E 00      mov b, $3e
3681   1E75 F9            leave
3682   1E76 09            ret
3683   1E77 0A 7A 1E      jmp _if52_exit
3684   1E7A             _if52_exit:
3685   1E7A             ;; if (c == '/') return 63; 
3686   1E7A             _if53_cond:
3687   1E7A FA 05 00      lea d, [bp + 5] ; $c
3688   1E7D 32            mov bl, [d]
3689   1E7E A7 00         mov bh, 0
3690   1E80             ; START RELATIONAL
3691   1E80 D7            push a
3692   1E81 11            mov a, b
3693   1E82 26 2F 00      mov b, $2f
3694   1E85 B0            cmp a, b
3695   1E86 FD 71         seq ; ==
3696   1E88 E4            pop a
3697   1E89             ; END RELATIONAL
3698   1E89 C0 00 00      cmp b, 0
3699   1E8C C6 97 1E      je _if53_exit
3700   1E8F             _if53_true:
3701   1E8F             ;; return 63; 
3702   1E8F 26 3F 00      mov b, $3f
3703   1E92 F9            leave
3704   1E93 09            ret
3705   1E94 0A 97 1E      jmp _if53_exit
3706   1E97             _if53_exit:
3707   1E97             ;; return -1; 
3708   1E97 26 FF FF      mov b, $ffff
3709   1E9A F9            leave
3710   1E9B 09            ret
3711   1E9C             
3712   1E9C             base64_decode:
3713   1E9C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3714   1E9F             ;; int i = 0, j = 0, k = 0; 
3715   1E9F 52 02 00      sub sp, 2 ; i
3716   1EA2             ; --- START LOCAL VAR INITIALIZATION
3717   1EA2 FA FF FF      lea d, [bp + -1] ; $i
3718   1EA5 DA            push d
3719   1EA6 26 00 00      mov b, $0
3720   1EA9 E7            pop d
3721   1EAA FD 43         mov [d], b
3722   1EAC             ; --- END LOCAL VAR INITIALIZATION
3723   1EAC 52 02 00      sub sp, 2 ; j
3724   1EAF             ; --- START LOCAL VAR INITIALIZATION
3725   1EAF FA FD FF      lea d, [bp + -3] ; $j
3726   1EB2 DA            push d
3727   1EB3 26 00 00      mov b, $0
3728   1EB6 E7            pop d
3729   1EB7 FD 43         mov [d], b
3730   1EB9             ; --- END LOCAL VAR INITIALIZATION
3731   1EB9 52 02 00      sub sp, 2 ; k
3732   1EBC             ; --- START LOCAL VAR INITIALIZATION
3733   1EBC FA FB FF      lea d, [bp + -5] ; $k
3734   1EBF DA            push d
3735   1EC0 26 00 00      mov b, $0
3736   1EC3 E7            pop d
3737   1EC4 FD 43         mov [d], b
3738   1EC6             ; --- END LOCAL VAR INITIALIZATION
3739   1EC6             ;; int input_len; 
3740   1EC6 52 02 00      sub sp, 2 ; input_len
3741   1EC9             ;; unsigned char input_buffer[4]; 
3742   1EC9 52 04 00      sub sp, 4 ; input_buffer
3743   1ECC             ;; unsigned char output_buffer[3]; 
3744   1ECC 52 03 00      sub sp, 3 ; output_buffer
3745   1ECF             ;; input_len = strlen(input); 
3746   1ECF FA F9 FF      lea d, [bp + -7] ; $input_len
3747   1ED2 DA            push d
3748   1ED3 FA 05 00      lea d, [bp + 5] ; $input
3749   1ED6 2A            mov b, [d]
3750   1ED7 FD AB         swp b
3751   1ED9 D8            push b
3752   1EDA 07 F5 05      call strlen
3753   1EDD 51 02 00      add sp, 2
3754   1EE0 E7            pop d
3755   1EE1 FD 43         mov [d], b
3756   1EE3             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
3757   1EE3             _while54_cond:
3758   1EE3 FA F9 FF      lea d, [bp + -7] ; $input_len
3759   1EE6 2A            mov b, [d]
3760   1EE7 D8            push b
3761   1EE8 FD 7D         dec b
3762   1EEA FA F9 FF      lea d, [bp + -7] ; $input_len
3763   1EED FD 43         mov [d], b
3764   1EEF E5            pop b
3765   1EF0 D7            push a
3766   1EF1 11            mov a, b
3767   1EF2 FA 05 00      lea d, [bp + 5] ; $input
3768   1EF5 FD 2A         mov d, [d]
3769   1EF7 D7            push a
3770   1EF8 DA            push d
3771   1EF9 FA FB FF      lea d, [bp + -5] ; $k
3772   1EFC 2A            mov b, [d]
3773   1EFD E7            pop d
3774   1EFE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3775   1F02 E4            pop a
3776   1F03 32            mov bl, [d]
3777   1F04 A7 00         mov bh, 0
3778   1F06             ; START RELATIONAL
3779   1F06 D7            push a
3780   1F07 11            mov a, b
3781   1F08 26 3D 00      mov b, $3d
3782   1F0B B0            cmp a, b
3783   1F0C FD 72         sneq ; !=
3784   1F0E E4            pop a
3785   1F0F             ; END RELATIONAL
3786   1F0F FD A7         sand a, b
3787   1F11 11            mov a, b
3788   1F12 FA 05 00      lea d, [bp + 5] ; $input
3789   1F15 FD 2A         mov d, [d]
3790   1F17 D7            push a
3791   1F18 DA            push d
3792   1F19 FA FB FF      lea d, [bp + -5] ; $k
3793   1F1C 2A            mov b, [d]
3794   1F1D E7            pop d
3795   1F1E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3796   1F22 E4            pop a
3797   1F23 32            mov bl, [d]
3798   1F24 A7 00         mov bh, 0
3799   1F26 DD            push bl
3800   1F27 07 9C 1D      call base64_char_value
3801   1F2A 51 01 00      add sp, 1
3802   1F2D             ; START RELATIONAL
3803   1F2D D7            push a
3804   1F2E 11            mov a, b
3805   1F2F 26 FF FF      mov b, $ffff
3806   1F32 B0            cmp a, b
3807   1F33 FD 72         sneq ; !=
3808   1F35 E4            pop a
3809   1F36             ; END RELATIONAL
3810   1F36 FD A7         sand a, b
3811   1F38 E4            pop a
3812   1F39 C0 00 00      cmp b, 0
3813   1F3C C6 24 21      je _while54_exit
3814   1F3F             _while54_block:
3815   1F3F             ;; input_buffer[i++] = input[k++]; 
3816   1F3F FA F5 FF      lea d, [bp + -11] ; $input_buffer
3817   1F42 D7            push a
3818   1F43 DA            push d
3819   1F44 FA FF FF      lea d, [bp + -1] ; $i
3820   1F47 2A            mov b, [d]
3821   1F48 D8            push b
3822   1F49 FD 77         inc b
3823   1F4B FA FF FF      lea d, [bp + -1] ; $i
3824   1F4E FD 43         mov [d], b
3825   1F50 E5            pop b
3826   1F51 E7            pop d
3827   1F52 5A            add d, b
3828   1F53 E4            pop a
3829   1F54 DA            push d
3830   1F55 FA 05 00      lea d, [bp + 5] ; $input
3831   1F58 FD 2A         mov d, [d]
3832   1F5A D7            push a
3833   1F5B DA            push d
3834   1F5C FA FB FF      lea d, [bp + -5] ; $k
3835   1F5F 2A            mov b, [d]
3836   1F60 D8            push b
3837   1F61 FD 77         inc b
3838   1F63 FA FB FF      lea d, [bp + -5] ; $k
3839   1F66 FD 43         mov [d], b
3840   1F68 E5            pop b
3841   1F69 E7            pop d
3842   1F6A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3843   1F6E E4            pop a
3844   1F6F 32            mov bl, [d]
3845   1F70 A7 00         mov bh, 0
3846   1F72 E7            pop d
3847   1F73 FD 3E         mov [d], bl
3848   1F75             ;; if (i == 4) { 
3849   1F75             _if55_cond:
3850   1F75 FA FF FF      lea d, [bp + -1] ; $i
3851   1F78 2A            mov b, [d]
3852   1F79             ; START RELATIONAL
3853   1F79 D7            push a
3854   1F7A 11            mov a, b
3855   1F7B 26 04 00      mov b, $4
3856   1F7E B0            cmp a, b
3857   1F7F FD 71         seq ; ==
3858   1F81 E4            pop a
3859   1F82             ; END RELATIONAL
3860   1F82 C0 00 00      cmp b, 0
3861   1F85 C6 21 21      je _if55_exit
3862   1F88             _if55_true:
3863   1F88             ;; for (i = 0; i < 4; i++) { 
3864   1F88             _for56_init:
3865   1F88 FA FF FF      lea d, [bp + -1] ; $i
3866   1F8B DA            push d
3867   1F8C 26 00 00      mov b, $0
3868   1F8F E7            pop d
3869   1F90 FD 43         mov [d], b
3870   1F92             _for56_cond:
3871   1F92 FA FF FF      lea d, [bp + -1] ; $i
3872   1F95 2A            mov b, [d]
3873   1F96             ; START RELATIONAL
3874   1F96 D7            push a
3875   1F97 11            mov a, b
3876   1F98 26 04 00      mov b, $4
3877   1F9B B0            cmp a, b
3878   1F9C FD 73         slt ; < (signed)
3879   1F9E E4            pop a
3880   1F9F             ; END RELATIONAL
3881   1F9F C0 00 00      cmp b, 0
3882   1FA2 C6 DB 1F      je _for56_exit
3883   1FA5             _for56_block:
3884   1FA5             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
3885   1FA5 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3886   1FA8 D7            push a
3887   1FA9 DA            push d
3888   1FAA FA FF FF      lea d, [bp + -1] ; $i
3889   1FAD 2A            mov b, [d]
3890   1FAE E7            pop d
3891   1FAF 5A            add d, b
3892   1FB0 E4            pop a
3893   1FB1 DA            push d
3894   1FB2 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3895   1FB5 D7            push a
3896   1FB6 DA            push d
3897   1FB7 FA FF FF      lea d, [bp + -1] ; $i
3898   1FBA 2A            mov b, [d]
3899   1FBB E7            pop d
3900   1FBC 5A            add d, b
3901   1FBD E4            pop a
3902   1FBE 32            mov bl, [d]
3903   1FBF A7 00         mov bh, 0
3904   1FC1 DD            push bl
3905   1FC2 07 9C 1D      call base64_char_value
3906   1FC5 51 01 00      add sp, 1
3907   1FC8 E7            pop d
3908   1FC9 FD 3E         mov [d], bl
3909   1FCB             _for56_update:
3910   1FCB FA FF FF      lea d, [bp + -1] ; $i
3911   1FCE 2A            mov b, [d]
3912   1FCF D8            push b
3913   1FD0 FD 77         inc b
3914   1FD2 FA FF FF      lea d, [bp + -1] ; $i
3915   1FD5 FD 43         mov [d], b
3916   1FD7 E5            pop b
3917   1FD8 0A 92 1F      jmp _for56_cond
3918   1FDB             _for56_exit:
3919   1FDB             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
3920   1FDB FA F2 FF      lea d, [bp + -14] ; $output_buffer
3921   1FDE D7            push a
3922   1FDF DA            push d
3923   1FE0 26 00 00      mov b, $0
3924   1FE3 E7            pop d
3925   1FE4 5A            add d, b
3926   1FE5 E4            pop a
3927   1FE6 DA            push d
3928   1FE7 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3929   1FEA D7            push a
3930   1FEB DA            push d
3931   1FEC 26 00 00      mov b, $0
3932   1FEF E7            pop d
3933   1FF0 5A            add d, b
3934   1FF1 E4            pop a
3935   1FF2 32            mov bl, [d]
3936   1FF3 A7 00         mov bh, 0
3937   1FF5             ; START SHIFT
3938   1FF5 D7            push a
3939   1FF6 11            mov a, b
3940   1FF7 26 02 00      mov b, $2
3941   1FFA FD 39         mov c, b
3942   1FFC 9D            shl a, cl
3943   1FFD 27            mov b, a
3944   1FFE E4            pop a
3945   1FFF             ; END SHIFT
3946   1FFF             ; START TERMS
3947   1FFF D7            push a
3948   2000 11            mov a, b
3949   2001 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3950   2004 D7            push a
3951   2005 DA            push d
3952   2006 26 01 00      mov b, $1
3953   2009 E7            pop d
3954   200A 5A            add d, b
3955   200B E4            pop a
3956   200C 32            mov bl, [d]
3957   200D A7 00         mov bh, 0
3958   200F D7            push a
3959   2010 11            mov a, b
3960   2011 26 30 00      mov b, $30
3961   2014 FD 92         and b, a ; &
3962   2016 E4            pop a
3963   2017             ; START SHIFT
3964   2017 D7            push a
3965   2018 11            mov a, b
3966   2019 26 04 00      mov b, $4
3967   201C FD 39         mov c, b
3968   201E A5            ashr a, cl
3969   201F 27            mov b, a
3970   2020 E4            pop a
3971   2021             ; END SHIFT
3972   2021 56            add b, a
3973   2022 E4            pop a
3974   2023             ; END TERMS
3975   2023 E7            pop d
3976   2024 FD 3E         mov [d], bl
3977   2026             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
3978   2026 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3979   2029 D7            push a
3980   202A DA            push d
3981   202B 26 01 00      mov b, $1
3982   202E E7            pop d
3983   202F 5A            add d, b
3984   2030 E4            pop a
3985   2031 DA            push d
3986   2032 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3987   2035 D7            push a
3988   2036 DA            push d
3989   2037 26 01 00      mov b, $1
3990   203A E7            pop d
3991   203B 5A            add d, b
3992   203C E4            pop a
3993   203D 32            mov bl, [d]
3994   203E A7 00         mov bh, 0
3995   2040 D7            push a
3996   2041 11            mov a, b
3997   2042 26 0F 00      mov b, $f
3998   2045 FD 92         and b, a ; &
3999   2047 E4            pop a
4000   2048             ; START SHIFT
4001   2048 D7            push a
4002   2049 11            mov a, b
4003   204A 26 04 00      mov b, $4
4004   204D FD 39         mov c, b
4005   204F 9D            shl a, cl
4006   2050 27            mov b, a
4007   2051 E4            pop a
4008   2052             ; END SHIFT
4009   2052             ; START TERMS
4010   2052 D7            push a
4011   2053 11            mov a, b
4012   2054 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4013   2057 D7            push a
4014   2058 DA            push d
4015   2059 26 02 00      mov b, $2
4016   205C E7            pop d
4017   205D 5A            add d, b
4018   205E E4            pop a
4019   205F 32            mov bl, [d]
4020   2060 A7 00         mov bh, 0
4021   2062 D7            push a
4022   2063 11            mov a, b
4023   2064 26 3C 00      mov b, $3c
4024   2067 FD 92         and b, a ; &
4025   2069 E4            pop a
4026   206A             ; START SHIFT
4027   206A D7            push a
4028   206B 11            mov a, b
4029   206C 26 02 00      mov b, $2
4030   206F FD 39         mov c, b
4031   2071 A5            ashr a, cl
4032   2072 27            mov b, a
4033   2073 E4            pop a
4034   2074             ; END SHIFT
4035   2074 56            add b, a
4036   2075 E4            pop a
4037   2076             ; END TERMS
4038   2076 E7            pop d
4039   2077 FD 3E         mov [d], bl
4040   2079             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
4041   2079 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4042   207C D7            push a
4043   207D DA            push d
4044   207E 26 02 00      mov b, $2
4045   2081 E7            pop d
4046   2082 5A            add d, b
4047   2083 E4            pop a
4048   2084 DA            push d
4049   2085 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4050   2088 D7            push a
4051   2089 DA            push d
4052   208A 26 02 00      mov b, $2
4053   208D E7            pop d
4054   208E 5A            add d, b
4055   208F E4            pop a
4056   2090 32            mov bl, [d]
4057   2091 A7 00         mov bh, 0
4058   2093 D7            push a
4059   2094 11            mov a, b
4060   2095 26 03 00      mov b, $3
4061   2098 FD 92         and b, a ; &
4062   209A E4            pop a
4063   209B             ; START SHIFT
4064   209B D7            push a
4065   209C 11            mov a, b
4066   209D 26 06 00      mov b, $6
4067   20A0 FD 39         mov c, b
4068   20A2 9D            shl a, cl
4069   20A3 27            mov b, a
4070   20A4 E4            pop a
4071   20A5             ; END SHIFT
4072   20A5             ; START TERMS
4073   20A5 D7            push a
4074   20A6 11            mov a, b
4075   20A7 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4076   20AA D7            push a
4077   20AB DA            push d
4078   20AC 26 03 00      mov b, $3
4079   20AF E7            pop d
4080   20B0 5A            add d, b
4081   20B1 E4            pop a
4082   20B2 32            mov bl, [d]
4083   20B3 A7 00         mov bh, 0
4084   20B5 56            add b, a
4085   20B6 E4            pop a
4086   20B7             ; END TERMS
4087   20B7 E7            pop d
4088   20B8 FD 3E         mov [d], bl
4089   20BA             ;; for (i = 0; i < 3; i++) { 
4090   20BA             _for57_init:
4091   20BA FA FF FF      lea d, [bp + -1] ; $i
4092   20BD DA            push d
4093   20BE 26 00 00      mov b, $0
4094   20C1 E7            pop d
4095   20C2 FD 43         mov [d], b
4096   20C4             _for57_cond:
4097   20C4 FA FF FF      lea d, [bp + -1] ; $i
4098   20C7 2A            mov b, [d]
4099   20C8             ; START RELATIONAL
4100   20C8 D7            push a
4101   20C9 11            mov a, b
4102   20CA 26 03 00      mov b, $3
4103   20CD B0            cmp a, b
4104   20CE FD 73         slt ; < (signed)
4105   20D0 E4            pop a
4106   20D1             ; END RELATIONAL
4107   20D1 C0 00 00      cmp b, 0
4108   20D4 C6 14 21      je _for57_exit
4109   20D7             _for57_block:
4110   20D7             ;; output[j++] = output_buffer[i]; 
4111   20D7 FA 07 00      lea d, [bp + 7] ; $output
4112   20DA FD 2A         mov d, [d]
4113   20DC D7            push a
4114   20DD DA            push d
4115   20DE FA FD FF      lea d, [bp + -3] ; $j
4116   20E1 2A            mov b, [d]
4117   20E2 D8            push b
4118   20E3 FD 77         inc b
4119   20E5 FA FD FF      lea d, [bp + -3] ; $j
4120   20E8 FD 43         mov [d], b
4121   20EA E5            pop b
4122   20EB E7            pop d
4123   20EC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4124   20F0 E4            pop a
4125   20F1 DA            push d
4126   20F2 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4127   20F5 D7            push a
4128   20F6 DA            push d
4129   20F7 FA FF FF      lea d, [bp + -1] ; $i
4130   20FA 2A            mov b, [d]
4131   20FB E7            pop d
4132   20FC 5A            add d, b
4133   20FD E4            pop a
4134   20FE 32            mov bl, [d]
4135   20FF A7 00         mov bh, 0
4136   2101 E7            pop d
4137   2102 FD 3E         mov [d], bl
4138   2104             _for57_update:
4139   2104 FA FF FF      lea d, [bp + -1] ; $i
4140   2107 2A            mov b, [d]
4141   2108 D8            push b
4142   2109 FD 77         inc b
4143   210B FA FF FF      lea d, [bp + -1] ; $i
4144   210E FD 43         mov [d], b
4145   2110 E5            pop b
4146   2111 0A C4 20      jmp _for57_cond
4147   2114             _for57_exit:
4148   2114             ;; i = 0; 
4149   2114 FA FF FF      lea d, [bp + -1] ; $i
4150   2117 DA            push d
4151   2118 26 00 00      mov b, $0
4152   211B E7            pop d
4153   211C FD 43         mov [d], b
4154   211E 0A 21 21      jmp _if55_exit
4155   2121             _if55_exit:
4156   2121 0A E3 1E      jmp _while54_cond
4157   2124             _while54_exit:
4158   2124             ;; if (i) { 
4159   2124             _if58_cond:
4160   2124 FA FF FF      lea d, [bp + -1] ; $i
4161   2127 2A            mov b, [d]
4162   2128 C0 00 00      cmp b, 0
4163   212B C6 C6 22      je _if58_exit
4164   212E             _if58_true:
4165   212E             ;; for (k = i; k < 4; k++) { 
4166   212E             _for59_init:
4167   212E FA FB FF      lea d, [bp + -5] ; $k
4168   2131 DA            push d
4169   2132 FA FF FF      lea d, [bp + -1] ; $i
4170   2135 2A            mov b, [d]
4171   2136 E7            pop d
4172   2137 FD 43         mov [d], b
4173   2139             _for59_cond:
4174   2139 FA FB FF      lea d, [bp + -5] ; $k
4175   213C 2A            mov b, [d]
4176   213D             ; START RELATIONAL
4177   213D D7            push a
4178   213E 11            mov a, b
4179   213F 26 04 00      mov b, $4
4180   2142 B0            cmp a, b
4181   2143 FD 73         slt ; < (signed)
4182   2145 E4            pop a
4183   2146             ; END RELATIONAL
4184   2146 C0 00 00      cmp b, 0
4185   2149 C6 6F 21      je _for59_exit
4186   214C             _for59_block:
4187   214C             ;; input_buffer[k] = 0; 
4188   214C FA F5 FF      lea d, [bp + -11] ; $input_buffer
4189   214F D7            push a
4190   2150 DA            push d
4191   2151 FA FB FF      lea d, [bp + -5] ; $k
4192   2154 2A            mov b, [d]
4193   2155 E7            pop d
4194   2156 5A            add d, b
4195   2157 E4            pop a
4196   2158 DA            push d
4197   2159 26 00 00      mov b, $0
4198   215C E7            pop d
4199   215D FD 3E         mov [d], bl
4200   215F             _for59_update:
4201   215F FA FB FF      lea d, [bp + -5] ; $k
4202   2162 2A            mov b, [d]
4203   2163 D8            push b
4204   2164 FD 77         inc b
4205   2166 FA FB FF      lea d, [bp + -5] ; $k
4206   2169 FD 43         mov [d], b
4207   216B E5            pop b
4208   216C 0A 39 21      jmp _for59_cond
4209   216F             _for59_exit:
4210   216F             ;; for (k = 0; k < 4; k++) { 
4211   216F             _for60_init:
4212   216F FA FB FF      lea d, [bp + -5] ; $k
4213   2172 DA            push d
4214   2173 26 00 00      mov b, $0
4215   2176 E7            pop d
4216   2177 FD 43         mov [d], b
4217   2179             _for60_cond:
4218   2179 FA FB FF      lea d, [bp + -5] ; $k
4219   217C 2A            mov b, [d]
4220   217D             ; START RELATIONAL
4221   217D D7            push a
4222   217E 11            mov a, b
4223   217F 26 04 00      mov b, $4
4224   2182 B0            cmp a, b
4225   2183 FD 73         slt ; < (signed)
4226   2185 E4            pop a
4227   2186             ; END RELATIONAL
4228   2186 C0 00 00      cmp b, 0
4229   2189 C6 C2 21      je _for60_exit
4230   218C             _for60_block:
4231   218C             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
4232   218C FA F5 FF      lea d, [bp + -11] ; $input_buffer
4233   218F D7            push a
4234   2190 DA            push d
4235   2191 FA FB FF      lea d, [bp + -5] ; $k
4236   2194 2A            mov b, [d]
4237   2195 E7            pop d
4238   2196 5A            add d, b
4239   2197 E4            pop a
4240   2198 DA            push d
4241   2199 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4242   219C D7            push a
4243   219D DA            push d
4244   219E FA FB FF      lea d, [bp + -5] ; $k
4245   21A1 2A            mov b, [d]
4246   21A2 E7            pop d
4247   21A3 5A            add d, b
4248   21A4 E4            pop a
4249   21A5 32            mov bl, [d]
4250   21A6 A7 00         mov bh, 0
4251   21A8 DD            push bl
4252   21A9 07 9C 1D      call base64_char_value
4253   21AC 51 01 00      add sp, 1
4254   21AF E7            pop d
4255   21B0 FD 3E         mov [d], bl
4256   21B2             _for60_update:
4257   21B2 FA FB FF      lea d, [bp + -5] ; $k
4258   21B5 2A            mov b, [d]
4259   21B6 D8            push b
4260   21B7 FD 77         inc b
4261   21B9 FA FB FF      lea d, [bp + -5] ; $k
4262   21BC FD 43         mov [d], b
4263   21BE E5            pop b
4264   21BF 0A 79 21      jmp _for60_cond
4265   21C2             _for60_exit:
4266   21C2             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
4267   21C2 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4268   21C5 D7            push a
4269   21C6 DA            push d
4270   21C7 26 00 00      mov b, $0
4271   21CA E7            pop d
4272   21CB 5A            add d, b
4273   21CC E4            pop a
4274   21CD DA            push d
4275   21CE FA F5 FF      lea d, [bp + -11] ; $input_buffer
4276   21D1 D7            push a
4277   21D2 DA            push d
4278   21D3 26 00 00      mov b, $0
4279   21D6 E7            pop d
4280   21D7 5A            add d, b
4281   21D8 E4            pop a
4282   21D9 32            mov bl, [d]
4283   21DA A7 00         mov bh, 0
4284   21DC             ; START SHIFT
4285   21DC D7            push a
4286   21DD 11            mov a, b
4287   21DE 26 02 00      mov b, $2
4288   21E1 FD 39         mov c, b
4289   21E3 9D            shl a, cl
4290   21E4 27            mov b, a
4291   21E5 E4            pop a
4292   21E6             ; END SHIFT
4293   21E6             ; START TERMS
4294   21E6 D7            push a
4295   21E7 11            mov a, b
4296   21E8 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4297   21EB D7            push a
4298   21EC DA            push d
4299   21ED 26 01 00      mov b, $1
4300   21F0 E7            pop d
4301   21F1 5A            add d, b
4302   21F2 E4            pop a
4303   21F3 32            mov bl, [d]
4304   21F4 A7 00         mov bh, 0
4305   21F6 D7            push a
4306   21F7 11            mov a, b
4307   21F8 26 30 00      mov b, $30
4308   21FB FD 92         and b, a ; &
4309   21FD E4            pop a
4310   21FE             ; START SHIFT
4311   21FE D7            push a
4312   21FF 11            mov a, b
4313   2200 26 04 00      mov b, $4
4314   2203 FD 39         mov c, b
4315   2205 A5            ashr a, cl
4316   2206 27            mov b, a
4317   2207 E4            pop a
4318   2208             ; END SHIFT
4319   2208 56            add b, a
4320   2209 E4            pop a
4321   220A             ; END TERMS
4322   220A E7            pop d
4323   220B FD 3E         mov [d], bl
4324   220D             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
4325   220D FA F2 FF      lea d, [bp + -14] ; $output_buffer
4326   2210 D7            push a
4327   2211 DA            push d
4328   2212 26 01 00      mov b, $1
4329   2215 E7            pop d
4330   2216 5A            add d, b
4331   2217 E4            pop a
4332   2218 DA            push d
4333   2219 FA F5 FF      lea d, [bp + -11] ; $input_buffer
4334   221C D7            push a
4335   221D DA            push d
4336   221E 26 01 00      mov b, $1
4337   2221 E7            pop d
4338   2222 5A            add d, b
4339   2223 E4            pop a
4340   2224 32            mov bl, [d]
4341   2225 A7 00         mov bh, 0
4342   2227 D7            push a
4343   2228 11            mov a, b
4344   2229 26 0F 00      mov b, $f
4345   222C FD 92         and b, a ; &
4346   222E E4            pop a
4347   222F             ; START SHIFT
4348   222F D7            push a
4349   2230 11            mov a, b
4350   2231 26 04 00      mov b, $4
4351   2234 FD 39         mov c, b
4352   2236 9D            shl a, cl
4353   2237 27            mov b, a
4354   2238 E4            pop a
4355   2239             ; END SHIFT
4356   2239             ; START TERMS
4357   2239 D7            push a
4358   223A 11            mov a, b
4359   223B FA F5 FF      lea d, [bp + -11] ; $input_buffer
4360   223E D7            push a
4361   223F DA            push d
4362   2240 26 02 00      mov b, $2
4363   2243 E7            pop d
4364   2244 5A            add d, b
4365   2245 E4            pop a
4366   2246 32            mov bl, [d]
4367   2247 A7 00         mov bh, 0
4368   2249 D7            push a
4369   224A 11            mov a, b
4370   224B 26 3C 00      mov b, $3c
4371   224E FD 92         and b, a ; &
4372   2250 E4            pop a
4373   2251             ; START SHIFT
4374   2251 D7            push a
4375   2252 11            mov a, b
4376   2253 26 02 00      mov b, $2
4377   2256 FD 39         mov c, b
4378   2258 A5            ashr a, cl
4379   2259 27            mov b, a
4380   225A E4            pop a
4381   225B             ; END SHIFT
4382   225B 56            add b, a
4383   225C E4            pop a
4384   225D             ; END TERMS
4385   225D E7            pop d
4386   225E FD 3E         mov [d], bl
4387   2260             ;; for (k = 0; k < i - 1; k++) { 
4388   2260             _for61_init:
4389   2260 FA FB FF      lea d, [bp + -5] ; $k
4390   2263 DA            push d
4391   2264 26 00 00      mov b, $0
4392   2267 E7            pop d
4393   2268 FD 43         mov [d], b
4394   226A             _for61_cond:
4395   226A FA FB FF      lea d, [bp + -5] ; $k
4396   226D 2A            mov b, [d]
4397   226E             ; START RELATIONAL
4398   226E D7            push a
4399   226F 11            mov a, b
4400   2270 FA FF FF      lea d, [bp + -1] ; $i
4401   2273 2A            mov b, [d]
4402   2274             ; START TERMS
4403   2274 D7            push a
4404   2275 11            mov a, b
4405   2276 26 01 00      mov b, $1
4406   2279 60            sub a, b
4407   227A 27            mov b, a
4408   227B E4            pop a
4409   227C             ; END TERMS
4410   227C B0            cmp a, b
4411   227D FD 73         slt ; < (signed)
4412   227F E4            pop a
4413   2280             ; END RELATIONAL
4414   2280 C0 00 00      cmp b, 0
4415   2283 C6 C3 22      je _for61_exit
4416   2286             _for61_block:
4417   2286             ;; output[j++] = output_buffer[k]; 
4418   2286 FA 07 00      lea d, [bp + 7] ; $output
4419   2289 FD 2A         mov d, [d]
4420   228B D7            push a
4421   228C DA            push d
4422   228D FA FD FF      lea d, [bp + -3] ; $j
4423   2290 2A            mov b, [d]
4424   2291 D8            push b
4425   2292 FD 77         inc b
4426   2294 FA FD FF      lea d, [bp + -3] ; $j
4427   2297 FD 43         mov [d], b
4428   2299 E5            pop b
4429   229A E7            pop d
4430   229B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4431   229F E4            pop a
4432   22A0 DA            push d
4433   22A1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4434   22A4 D7            push a
4435   22A5 DA            push d
4436   22A6 FA FB FF      lea d, [bp + -5] ; $k
4437   22A9 2A            mov b, [d]
4438   22AA E7            pop d
4439   22AB 5A            add d, b
4440   22AC E4            pop a
4441   22AD 32            mov bl, [d]
4442   22AE A7 00         mov bh, 0
4443   22B0 E7            pop d
4444   22B1 FD 3E         mov [d], bl
4445   22B3             _for61_update:
4446   22B3 FA FB FF      lea d, [bp + -5] ; $k
4447   22B6 2A            mov b, [d]
4448   22B7 D8            push b
4449   22B8 FD 77         inc b
4450   22BA FA FB FF      lea d, [bp + -5] ; $k
4451   22BD FD 43         mov [d], b
4452   22BF E5            pop b
4453   22C0 0A 6A 22      jmp _for61_cond
4454   22C3             _for61_exit:
4455   22C3 0A C6 22      jmp _if58_exit
4456   22C6             _if58_exit:
4457   22C6             ;; output[j] = '\0'; 
4458   22C6 FA 07 00      lea d, [bp + 7] ; $output
4459   22C9 FD 2A         mov d, [d]
4460   22CB D7            push a
4461   22CC DA            push d
4462   22CD FA FD FF      lea d, [bp + -3] ; $j
4463   22D0 2A            mov b, [d]
4464   22D1 E7            pop d
4465   22D2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4466   22D6 E4            pop a
4467   22D7 DA            push d
4468   22D8 26 00 00      mov b, $0
4469   22DB E7            pop d
4470   22DC FD 3E         mov [d], bl
4471   22DE F9            leave
4472   22DF 09            ret
4473   22E0             ; --- END TEXT BLOCK
4474   22E0             
4475   22E0             ; --- BEGIN DATA BLOCK
4476   22E0 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
4476   22E4 45 46 47 48 
4476   22E8 49 4A 4B 4C 
4476   22EC 4D 4E 4F 50 
4476   22F0 51 52 53 54 
4476   22F4 55 56 57 58 
4476   22F8 59 5A 61 62 
4476   22FC 63 64 65 66 
4476   2300 67 68 69 6A 
4476   2304 6B 6C 6D 6E 
4476   2308 6F 70 71 72 
4476   230C 73 74 75 76 
4476   2310 77 78 79 7A 
4476   2314 30 31 32 33 
4476   2318 34 35 36 37 
4476   231C 38 39 2B 2F 
4476   2320 00 
4477   2321 E0 22       _base64_table: .dw _base64_table_data
4478   2323 45 6E 74 65 _s0: .db "Enter a base64 encoded string to decode: ", 0
4478   2327 72 20 61 20 
4478   232B 62 61 73 65 
4478   232F 36 34 20 65 
4478   2333 6E 63 6F 64 
4478   2337 65 64 20 73 
4478   233B 74 72 69 6E 
4478   233F 67 20 74 6F 
4478   2343 20 64 65 63 
4478   2347 6F 64 65 3A 
4478   234B 20 00 
4479   234D 45 6E 63 6F _s1: .db "Encoded string: %s\n", 0
4479   2351 64 65 64 20 
4479   2355 73 74 72 69 
4479   2359 6E 67 3A 20 
4479   235D 25 73 0A 00 
4480   2361 44 65 63 6F _s2: .db "Decoded string: %s\n", 0
4480   2365 64 65 64 20 
4480   2369 73 74 72 69 
4480   236D 6E 67 3A 20 
4480   2371 25 73 0A 00 
4481   2375 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
4481   2379 70 65 63 74 
4481   237D 65 64 20 66 
4481   2381 6F 72 6D 61 
4481   2385 74 20 69 6E 
4481   2389 20 70 72 69 
4481   238D 6E 74 66 2E 
4481   2391 00 
4482   2392 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
4482   2396 72 3A 20 55 
4482   239A 6E 6B 6E 6F 
4482   239E 77 6E 20 61 
4482   23A2 72 67 75 6D 
4482   23A6 65 6E 74 20 
4482   23AA 74 79 70 65 
4482   23AE 2E 0A 00 
4483   23B1 1B 5B 32 4A _s5: .db "\033[2J\033[H", 0
4483   23B5 1B 5B 48 00 
4484   23B9             
4485   23B9 BB 23       _heap_top: .dw _heap
4486   23BB 00          _heap: .db 0
4487   23BC             ; --- END DATA BLOCK
4488   23BC             
4489   23BC             .end
tasm: Number of errors = 0
