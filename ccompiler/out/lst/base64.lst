0001   0000             ; --- FILENAME: programs/base64.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; char input[512]; 
0011   0408 52 00 02      sub sp, 512
0012   040B             ; char output[256]; 
0013   040B 52 00 01      sub sp, 256
0014   040E             ; printf("\nEnter a base64 encoded string to decode: "); 
0015   040E             ; --- START FUNCTION CALL
0016   040E 26 AF 1A      mov b, _s0 ; "\nEnter a base64 encoded string to decode: "
0017   0411 FD AB         swp b
0018   0413 D8            push b
0019   0414 07 46 10      call printf
0020   0417 51 02 00      add sp, 2
0021   041A             ; --- END FUNCTION CALL
0022   041A             ; gets(input); 
0023   041A             ; --- START FUNCTION CALL
0024   041A FA 01 FE      lea d, [bp + -511] ; $input
0025   041D 2D            mov b, d
0026   041E 38 00 00      mov c, 0
0027   0421 FD AB         swp b
0028   0423 D8            push b
0029   0424 07 53 19      call gets
0030   0427 51 02 00      add sp, 2
0031   042A             ; --- END FUNCTION CALL
0032   042A             ; base64_encode(input, output); 
0033   042A             ; --- START FUNCTION CALL
0034   042A FA 01 FD      lea d, [bp + -767] ; $output
0035   042D 2D            mov b, d
0036   042E 38 00 00      mov c, 0
0037   0431 FD AB         swp b
0038   0433 D8            push b
0039   0434 FA 01 FE      lea d, [bp + -511] ; $input
0040   0437 2D            mov b, d
0041   0438 38 00 00      mov c, 0
0042   043B FD AB         swp b
0043   043D D8            push b
0044   043E 07 93 04      call base64_encode
0045   0441 51 04 00      add sp, 4
0046   0444             ; --- END FUNCTION CALL
0047   0444             ; printf("\nEncoded string: %s\n", output); 
0048   0444             ; --- START FUNCTION CALL
0049   0444 FA 01 FD      lea d, [bp + -767] ; $output
0050   0447 2D            mov b, d
0051   0448 38 00 00      mov c, 0
0052   044B FD AB         swp b
0053   044D D8            push b
0054   044E 26 DA 1A      mov b, _s1 ; "\nEncoded string: %s\n"
0055   0451 FD AB         swp b
0056   0453 D8            push b
0057   0454 07 46 10      call printf
0058   0457 51 04 00      add sp, 4
0059   045A             ; --- END FUNCTION CALL
0060   045A             ; base64_decode(output, input); 
0061   045A             ; --- START FUNCTION CALL
0062   045A FA 01 FE      lea d, [bp + -511] ; $input
0063   045D 2D            mov b, d
0064   045E 38 00 00      mov c, 0
0065   0461 FD AB         swp b
0066   0463 D8            push b
0067   0464 FA 01 FD      lea d, [bp + -767] ; $output
0068   0467 2D            mov b, d
0069   0468 38 00 00      mov c, 0
0070   046B FD AB         swp b
0071   046D D8            push b
0072   046E 07 E2 0A      call base64_decode
0073   0471 51 04 00      add sp, 4
0074   0474             ; --- END FUNCTION CALL
0075   0474             ; printf("\nDecoded string: %s\n", input); 
0076   0474             ; --- START FUNCTION CALL
0077   0474 FA 01 FE      lea d, [bp + -511] ; $input
0078   0477 2D            mov b, d
0079   0478 38 00 00      mov c, 0
0080   047B FD AB         swp b
0081   047D D8            push b
0082   047E 26 EF 1A      mov b, _s2 ; "\nDecoded string: %s\n"
0083   0481 FD AB         swp b
0084   0483 D8            push b
0085   0484 07 46 10      call printf
0086   0487 51 04 00      add sp, 4
0087   048A             ; --- END FUNCTION CALL
0088   048A             ; return 0; 
0089   048A FD 2E 00 00   mov32 cb, $00000000
0089   048E 00 00 
0090   0490 F9            leave
0091   0491 05 0B         syscall sys_terminate_proc
0092   0493             
0093   0493             base64_encode:
0094   0493 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0095   0496             ; int i = 0; 
0096   0496 52 02 00      sub sp, 2
0097   0499             ; --- START LOCAL VAR INITIALIZATION
0098   0499 FA FF FF      lea d, [bp + -1] ; $i
0099   049C DA            push d
0100   049D FD 2E 00 00   mov32 cb, $00000000
0100   04A1 00 00 
0101   04A3 E7            pop d
0102   04A4 FD 43         mov [d], b
0103   04A6             ; --- END LOCAL VAR INITIALIZATION
0104   04A6             ; int j = 0; 
0105   04A6 52 02 00      sub sp, 2
0106   04A9             ; --- START LOCAL VAR INITIALIZATION
0107   04A9 FA FD FF      lea d, [bp + -3] ; $j
0108   04AC DA            push d
0109   04AD FD 2E 00 00   mov32 cb, $00000000
0109   04B1 00 00 
0110   04B3 E7            pop d
0111   04B4 FD 43         mov [d], b
0112   04B6             ; --- END LOCAL VAR INITIALIZATION
0113   04B6             ; int k; 
0114   04B6 52 02 00      sub sp, 2
0115   04B9             ; int input_len; 
0116   04B9 52 02 00      sub sp, 2
0117   04BC             ; unsigned char input_buffer[3]; 
0118   04BC 52 03 00      sub sp, 3
0119   04BF             ; unsigned char output_buffer[4]; 
0120   04BF 52 04 00      sub sp, 4
0121   04C2             ; input_len = strlen(input); 
0122   04C2 FA F9 FF      lea d, [bp + -7] ; $input_len
0123   04C5 DA            push d
0124   04C6             ; --- START FUNCTION CALL
0125   04C6 FA 05 00      lea d, [bp + 5] ; $input
0126   04C9 2A            mov b, [d]
0127   04CA 38 00 00      mov c, 0
0128   04CD FD AB         swp b
0129   04CF D8            push b
0130   04D0 07 11 1A      call strlen
0131   04D3 51 02 00      add sp, 2
0132   04D6             ; --- END FUNCTION CALL
0133   04D6 E7            pop d
0134   04D7 FD 43         mov [d], b
0135   04D9             ; while (input_len--) { 
0136   04D9             _while1_cond:
0137   04D9 FA F9 FF      lea d, [bp + -7] ; $input_len
0138   04DC 2A            mov b, [d]
0139   04DD 38 00 00      mov c, 0
0140   04E0 11            mov a, b
0141   04E1 FD 7D         dec b
0142   04E3 FA F9 FF      lea d, [bp + -7] ; $input_len
0143   04E6 FD 43         mov [d], b
0144   04E8 27            mov b, a
0145   04E9 C0 00 00      cmp b, 0
0146   04EC C6 1B 07      je _while1_exit
0147   04EF             _while1_block:
0148   04EF             ; input_buffer[i++] = *(input++); 
0149   04EF FA F6 FF      lea d, [bp + -10] ; $input_buffer
0150   04F2 D7            push a
0151   04F3 DA            push d
0152   04F4 FA FF FF      lea d, [bp + -1] ; $i
0153   04F7 2A            mov b, [d]
0154   04F8 38 00 00      mov c, 0
0155   04FB 11            mov a, b
0156   04FC FD 77         inc b
0157   04FE FA FF FF      lea d, [bp + -1] ; $i
0158   0501 FD 43         mov [d], b
0159   0503 27            mov b, a
0160   0504 E7            pop d
0161   0505 5A            add d, b
0162   0506 E4            pop a
0163   0507 DA            push d
0164   0508 FA 05 00      lea d, [bp + 5] ; $input
0165   050B 2A            mov b, [d]
0166   050C 38 00 00      mov c, 0
0167   050F FD 77         inc b
0168   0511 FA 05 00      lea d, [bp + 5] ; $input
0169   0514 FD 43         mov [d], b
0170   0516 FD 7D         dec b
0171   0518 74            mov d, b
0172   0519 32            mov bl, [d]
0173   051A A7 00         mov bh, 0
0174   051C 38 00 00      mov c, 0
0175   051F E7            pop d
0176   0520 FD 3E         mov [d], bl
0177   0522             ; if (i == 3) { 
0178   0522             _if2_cond:
0179   0522 FA FF FF      lea d, [bp + -1] ; $i
0180   0525 2A            mov b, [d]
0181   0526 38 00 00      mov c, 0
0182   0529             ; --- START RELATIONAL
0183   0529 D7            push a
0184   052A 11            mov a, b
0185   052B FD 2E 03 00   mov32 cb, $00000003
0185   052F 00 00 
0186   0531 B0            cmp a, b
0187   0532 FD 71         seq ; ==
0188   0534 E4            pop a
0189   0535             ; --- END RELATIONAL
0190   0535 C0 00 00      cmp b, 0
0191   0538 C6 18 07      je _if2_exit
0192   053B             _if2_TRUE:
0193   053B             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0194   053B FA F2 FF      lea d, [bp + -14] ; $output_buffer
0195   053E D7            push a
0196   053F DA            push d
0197   0540 FD 2E 00 00   mov32 cb, $00000000
0197   0544 00 00 
0198   0546 E7            pop d
0199   0547 5A            add d, b
0200   0548 E4            pop a
0201   0549 DA            push d
0202   054A FA F6 FF      lea d, [bp + -10] ; $input_buffer
0203   054D D7            push a
0204   054E DA            push d
0205   054F FD 2E 00 00   mov32 cb, $00000000
0205   0553 00 00 
0206   0555 E7            pop d
0207   0556 5A            add d, b
0208   0557 E4            pop a
0209   0558 32            mov bl, [d]
0210   0559 A7 00         mov bh, 0
0211   055B 38 00 00      mov c, 0
0212   055E D7            push a
0213   055F 11            mov a, b
0214   0560 FD 2E FC 00   mov32 cb, $000000fc
0214   0564 00 00 
0215   0566 FD 92         and b, a ; &
0216   0568 E4            pop a
0217   0569             ; --- START SHIFT
0218   0569 D7            push a
0219   056A 11            mov a, b
0220   056B FD 2E 02 00   mov32 cb, $00000002
0220   056F 00 00 
0221   0571 FD 39         mov c, b
0222   0573 A5            ashr a, cl
0223   0574 27            mov b, a
0224   0575 E4            pop a
0225   0576             ; --- END SHIFT
0226   0576 E7            pop d
0227   0577 FD 3E         mov [d], bl
0228   0579             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0229   0579 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0230   057C D7            push a
0231   057D DA            push d
0232   057E FD 2E 01 00   mov32 cb, $00000001
0232   0582 00 00 
0233   0584 E7            pop d
0234   0585 5A            add d, b
0235   0586 E4            pop a
0236   0587 DA            push d
0237   0588 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0238   058B D7            push a
0239   058C DA            push d
0240   058D FD 2E 00 00   mov32 cb, $00000000
0240   0591 00 00 
0241   0593 E7            pop d
0242   0594 5A            add d, b
0243   0595 E4            pop a
0244   0596 32            mov bl, [d]
0245   0597 A7 00         mov bh, 0
0246   0599 38 00 00      mov c, 0
0247   059C D7            push a
0248   059D 11            mov a, b
0249   059E FD 2E 03 00   mov32 cb, $00000003
0249   05A2 00 00 
0250   05A4 FD 92         and b, a ; &
0251   05A6 E4            pop a
0252   05A7             ; --- START SHIFT
0253   05A7 D7            push a
0254   05A8 11            mov a, b
0255   05A9 FD 2E 04 00   mov32 cb, $00000004
0255   05AD 00 00 
0256   05AF FD 39         mov c, b
0257   05B1 9D            shl a, cl
0258   05B2 27            mov b, a
0259   05B3 E4            pop a
0260   05B4             ; --- END SHIFT
0261   05B4             ; --- START TERMS
0262   05B4 D7            push a
0263   05B5 11            mov a, b
0264   05B6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0265   05B9 D7            push a
0266   05BA DA            push d
0267   05BB FD 2E 01 00   mov32 cb, $00000001
0267   05BF 00 00 
0268   05C1 E7            pop d
0269   05C2 5A            add d, b
0270   05C3 E4            pop a
0271   05C4 32            mov bl, [d]
0272   05C5 A7 00         mov bh, 0
0273   05C7 38 00 00      mov c, 0
0274   05CA D7            push a
0275   05CB 11            mov a, b
0276   05CC FD 2E F0 00   mov32 cb, $000000f0
0276   05D0 00 00 
0277   05D2 FD 92         and b, a ; &
0278   05D4 E4            pop a
0279   05D5             ; --- START SHIFT
0280   05D5 D7            push a
0281   05D6 11            mov a, b
0282   05D7 FD 2E 04 00   mov32 cb, $00000004
0282   05DB 00 00 
0283   05DD FD 39         mov c, b
0284   05DF A5            ashr a, cl
0285   05E0 27            mov b, a
0286   05E1 E4            pop a
0287   05E2             ; --- END SHIFT
0288   05E2 56            add b, a
0289   05E3 E4            pop a
0290   05E4             ; --- END TERMS
0291   05E4 E7            pop d
0292   05E5 FD 3E         mov [d], bl
0293   05E7             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0294   05E7 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0295   05EA D7            push a
0296   05EB DA            push d
0297   05EC FD 2E 02 00   mov32 cb, $00000002
0297   05F0 00 00 
0298   05F2 E7            pop d
0299   05F3 5A            add d, b
0300   05F4 E4            pop a
0301   05F5 DA            push d
0302   05F6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0303   05F9 D7            push a
0304   05FA DA            push d
0305   05FB FD 2E 01 00   mov32 cb, $00000001
0305   05FF 00 00 
0306   0601 E7            pop d
0307   0602 5A            add d, b
0308   0603 E4            pop a
0309   0604 32            mov bl, [d]
0310   0605 A7 00         mov bh, 0
0311   0607 38 00 00      mov c, 0
0312   060A D7            push a
0313   060B 11            mov a, b
0314   060C FD 2E 0F 00   mov32 cb, $0000000f
0314   0610 00 00 
0315   0612 FD 92         and b, a ; &
0316   0614 E4            pop a
0317   0615             ; --- START SHIFT
0318   0615 D7            push a
0319   0616 11            mov a, b
0320   0617 FD 2E 02 00   mov32 cb, $00000002
0320   061B 00 00 
0321   061D FD 39         mov c, b
0322   061F 9D            shl a, cl
0323   0620 27            mov b, a
0324   0621 E4            pop a
0325   0622             ; --- END SHIFT
0326   0622             ; --- START TERMS
0327   0622 D7            push a
0328   0623 11            mov a, b
0329   0624 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0330   0627 D7            push a
0331   0628 DA            push d
0332   0629 FD 2E 02 00   mov32 cb, $00000002
0332   062D 00 00 
0333   062F E7            pop d
0334   0630 5A            add d, b
0335   0631 E4            pop a
0336   0632 32            mov bl, [d]
0337   0633 A7 00         mov bh, 0
0338   0635 38 00 00      mov c, 0
0339   0638 D7            push a
0340   0639 11            mov a, b
0341   063A FD 2E C0 00   mov32 cb, $000000c0
0341   063E 00 00 
0342   0640 FD 92         and b, a ; &
0343   0642 E4            pop a
0344   0643             ; --- START SHIFT
0345   0643 D7            push a
0346   0644 11            mov a, b
0347   0645 FD 2E 06 00   mov32 cb, $00000006
0347   0649 00 00 
0348   064B FD 39         mov c, b
0349   064D A5            ashr a, cl
0350   064E 27            mov b, a
0351   064F E4            pop a
0352   0650             ; --- END SHIFT
0353   0650 56            add b, a
0354   0651 E4            pop a
0355   0652             ; --- END TERMS
0356   0652 E7            pop d
0357   0653 FD 3E         mov [d], bl
0358   0655             ; output_buffer[3] = input_buffer[2] & 0x3F; 
0359   0655 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0360   0658 D7            push a
0361   0659 DA            push d
0362   065A FD 2E 03 00   mov32 cb, $00000003
0362   065E 00 00 
0363   0660 E7            pop d
0364   0661 5A            add d, b
0365   0662 E4            pop a
0366   0663 DA            push d
0367   0664 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0368   0667 D7            push a
0369   0668 DA            push d
0370   0669 FD 2E 02 00   mov32 cb, $00000002
0370   066D 00 00 
0371   066F E7            pop d
0372   0670 5A            add d, b
0373   0671 E4            pop a
0374   0672 32            mov bl, [d]
0375   0673 A7 00         mov bh, 0
0376   0675 38 00 00      mov c, 0
0377   0678 D7            push a
0378   0679 11            mov a, b
0379   067A FD 2E 3F 00   mov32 cb, $0000003f
0379   067E 00 00 
0380   0680 FD 92         and b, a ; &
0381   0682 E4            pop a
0382   0683 E7            pop d
0383   0684 FD 3E         mov [d], bl
0384   0686             ; for (i = 0; i < 4; i++) { 
0385   0686             _for3_init:
0386   0686 FA FF FF      lea d, [bp + -1] ; $i
0387   0689 DA            push d
0388   068A FD 2E 00 00   mov32 cb, $00000000
0388   068E 00 00 
0389   0690 E7            pop d
0390   0691 FD 43         mov [d], b
0391   0693             _for3_cond:
0392   0693 FA FF FF      lea d, [bp + -1] ; $i
0393   0696 2A            mov b, [d]
0394   0697 38 00 00      mov c, 0
0395   069A             ; --- START RELATIONAL
0396   069A D7            push a
0397   069B 11            mov a, b
0398   069C FD 2E 04 00   mov32 cb, $00000004
0398   06A0 00 00 
0399   06A2 B0            cmp a, b
0400   06A3 FD 73         slt ; < (signed)
0401   06A5 E4            pop a
0402   06A6             ; --- END RELATIONAL
0403   06A6 C0 00 00      cmp b, 0
0404   06A9 C6 08 07      je _for3_exit
0405   06AC             _for3_block:
0406   06AC             ; output[j++] = base64_table[output_buffer[i]]; 
0407   06AC FA 07 00      lea d, [bp + 7] ; $output
0408   06AF FD 2A         mov d, [d]
0409   06B1 D7            push a
0410   06B2 DA            push d
0411   06B3 FA FD FF      lea d, [bp + -3] ; $j
0412   06B6 2A            mov b, [d]
0413   06B7 38 00 00      mov c, 0
0414   06BA 11            mov a, b
0415   06BB FD 77         inc b
0416   06BD FA FD FF      lea d, [bp + -3] ; $j
0417   06C0 FD 43         mov [d], b
0418   06C2 27            mov b, a
0419   06C3 E7            pop d
0420   06C4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0421   06C8 E4            pop a
0422   06C9 DA            push d
0423   06CA 3B AD 1A      mov d, _base64_table ; $base64_table
0424   06CD FD 2A         mov d, [d]
0425   06CF D7            push a
0426   06D0 DA            push d
0427   06D1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0428   06D4 D7            push a
0429   06D5 DA            push d
0430   06D6 FA FF FF      lea d, [bp + -1] ; $i
0431   06D9 2A            mov b, [d]
0432   06DA 38 00 00      mov c, 0
0433   06DD E7            pop d
0434   06DE 5A            add d, b
0435   06DF E4            pop a
0436   06E0 32            mov bl, [d]
0437   06E1 A7 00         mov bh, 0
0438   06E3 38 00 00      mov c, 0
0439   06E6 E7            pop d
0440   06E7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0441   06EB E4            pop a
0442   06EC 32            mov bl, [d]
0443   06ED A7 00         mov bh, 0
0444   06EF 38 00 00      mov c, 0
0445   06F2 E7            pop d
0446   06F3 FD 3E         mov [d], bl
0447   06F5             _for3_update:
0448   06F5 FA FF FF      lea d, [bp + -1] ; $i
0449   06F8 2A            mov b, [d]
0450   06F9 38 00 00      mov c, 0
0451   06FC 11            mov a, b
0452   06FD FD 77         inc b
0453   06FF FA FF FF      lea d, [bp + -1] ; $i
0454   0702 FD 43         mov [d], b
0455   0704 27            mov b, a
0456   0705 0A 93 06      jmp _for3_cond
0457   0708             _for3_exit:
0458   0708             ; i = 0; 
0459   0708 FA FF FF      lea d, [bp + -1] ; $i
0460   070B DA            push d
0461   070C FD 2E 00 00   mov32 cb, $00000000
0461   0710 00 00 
0462   0712 E7            pop d
0463   0713 FD 43         mov [d], b
0464   0715 0A 18 07      jmp _if2_exit
0465   0718             _if2_exit:
0466   0718 0A D9 04      jmp _while1_cond
0467   071B             _while1_exit:
0468   071B             ; if (i) { 
0469   071B             _if4_cond:
0470   071B FA FF FF      lea d, [bp + -1] ; $i
0471   071E 2A            mov b, [d]
0472   071F 38 00 00      mov c, 0
0473   0722 C0 00 00      cmp b, 0
0474   0725 C6 71 09      je _if4_exit
0475   0728             _if4_TRUE:
0476   0728             ; for (k = i; k < 3; k++) { 
0477   0728             _for5_init:
0478   0728 FA FB FF      lea d, [bp + -5] ; $k
0479   072B DA            push d
0480   072C FA FF FF      lea d, [bp + -1] ; $i
0481   072F 2A            mov b, [d]
0482   0730 38 00 00      mov c, 0
0483   0733 E7            pop d
0484   0734 FD 43         mov [d], b
0485   0736             _for5_cond:
0486   0736 FA FB FF      lea d, [bp + -5] ; $k
0487   0739 2A            mov b, [d]
0488   073A 38 00 00      mov c, 0
0489   073D             ; --- START RELATIONAL
0490   073D D7            push a
0491   073E 11            mov a, b
0492   073F FD 2E 03 00   mov32 cb, $00000003
0492   0743 00 00 
0493   0745 B0            cmp a, b
0494   0746 FD 73         slt ; < (signed)
0495   0748 E4            pop a
0496   0749             ; --- END RELATIONAL
0497   0749 C0 00 00      cmp b, 0
0498   074C C6 7B 07      je _for5_exit
0499   074F             _for5_block:
0500   074F             ; input_buffer[k] = '\0'; 
0501   074F FA F6 FF      lea d, [bp + -10] ; $input_buffer
0502   0752 D7            push a
0503   0753 DA            push d
0504   0754 FA FB FF      lea d, [bp + -5] ; $k
0505   0757 2A            mov b, [d]
0506   0758 38 00 00      mov c, 0
0507   075B E7            pop d
0508   075C 5A            add d, b
0509   075D E4            pop a
0510   075E DA            push d
0511   075F FD 2E 00 00   mov32 cb, $00000000
0511   0763 00 00 
0512   0765 E7            pop d
0513   0766 FD 3E         mov [d], bl
0514   0768             _for5_update:
0515   0768 FA FB FF      lea d, [bp + -5] ; $k
0516   076B 2A            mov b, [d]
0517   076C 38 00 00      mov c, 0
0518   076F 11            mov a, b
0519   0770 FD 77         inc b
0520   0772 FA FB FF      lea d, [bp + -5] ; $k
0521   0775 FD 43         mov [d], b
0522   0777 27            mov b, a
0523   0778 0A 36 07      jmp _for5_cond
0524   077B             _for5_exit:
0525   077B             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0526   077B FA F2 FF      lea d, [bp + -14] ; $output_buffer
0527   077E D7            push a
0528   077F DA            push d
0529   0780 FD 2E 00 00   mov32 cb, $00000000
0529   0784 00 00 
0530   0786 E7            pop d
0531   0787 5A            add d, b
0532   0788 E4            pop a
0533   0789 DA            push d
0534   078A FA F6 FF      lea d, [bp + -10] ; $input_buffer
0535   078D D7            push a
0536   078E DA            push d
0537   078F FD 2E 00 00   mov32 cb, $00000000
0537   0793 00 00 
0538   0795 E7            pop d
0539   0796 5A            add d, b
0540   0797 E4            pop a
0541   0798 32            mov bl, [d]
0542   0799 A7 00         mov bh, 0
0543   079B 38 00 00      mov c, 0
0544   079E D7            push a
0545   079F 11            mov a, b
0546   07A0 FD 2E FC 00   mov32 cb, $000000fc
0546   07A4 00 00 
0547   07A6 FD 92         and b, a ; &
0548   07A8 E4            pop a
0549   07A9             ; --- START SHIFT
0550   07A9 D7            push a
0551   07AA 11            mov a, b
0552   07AB FD 2E 02 00   mov32 cb, $00000002
0552   07AF 00 00 
0553   07B1 FD 39         mov c, b
0554   07B3 A5            ashr a, cl
0555   07B4 27            mov b, a
0556   07B5 E4            pop a
0557   07B6             ; --- END SHIFT
0558   07B6 E7            pop d
0559   07B7 FD 3E         mov [d], bl
0560   07B9             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0561   07B9 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0562   07BC D7            push a
0563   07BD DA            push d
0564   07BE FD 2E 01 00   mov32 cb, $00000001
0564   07C2 00 00 
0565   07C4 E7            pop d
0566   07C5 5A            add d, b
0567   07C6 E4            pop a
0568   07C7 DA            push d
0569   07C8 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0570   07CB D7            push a
0571   07CC DA            push d
0572   07CD FD 2E 00 00   mov32 cb, $00000000
0572   07D1 00 00 
0573   07D3 E7            pop d
0574   07D4 5A            add d, b
0575   07D5 E4            pop a
0576   07D6 32            mov bl, [d]
0577   07D7 A7 00         mov bh, 0
0578   07D9 38 00 00      mov c, 0
0579   07DC D7            push a
0580   07DD 11            mov a, b
0581   07DE FD 2E 03 00   mov32 cb, $00000003
0581   07E2 00 00 
0582   07E4 FD 92         and b, a ; &
0583   07E6 E4            pop a
0584   07E7             ; --- START SHIFT
0585   07E7 D7            push a
0586   07E8 11            mov a, b
0587   07E9 FD 2E 04 00   mov32 cb, $00000004
0587   07ED 00 00 
0588   07EF FD 39         mov c, b
0589   07F1 9D            shl a, cl
0590   07F2 27            mov b, a
0591   07F3 E4            pop a
0592   07F4             ; --- END SHIFT
0593   07F4             ; --- START TERMS
0594   07F4 D7            push a
0595   07F5 11            mov a, b
0596   07F6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0597   07F9 D7            push a
0598   07FA DA            push d
0599   07FB FD 2E 01 00   mov32 cb, $00000001
0599   07FF 00 00 
0600   0801 E7            pop d
0601   0802 5A            add d, b
0602   0803 E4            pop a
0603   0804 32            mov bl, [d]
0604   0805 A7 00         mov bh, 0
0605   0807 38 00 00      mov c, 0
0606   080A D7            push a
0607   080B 11            mov a, b
0608   080C FD 2E F0 00   mov32 cb, $000000f0
0608   0810 00 00 
0609   0812 FD 92         and b, a ; &
0610   0814 E4            pop a
0611   0815             ; --- START SHIFT
0612   0815 D7            push a
0613   0816 11            mov a, b
0614   0817 FD 2E 04 00   mov32 cb, $00000004
0614   081B 00 00 
0615   081D FD 39         mov c, b
0616   081F A5            ashr a, cl
0617   0820 27            mov b, a
0618   0821 E4            pop a
0619   0822             ; --- END SHIFT
0620   0822 56            add b, a
0621   0823 E4            pop a
0622   0824             ; --- END TERMS
0623   0824 E7            pop d
0624   0825 FD 3E         mov [d], bl
0625   0827             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0626   0827 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0627   082A D7            push a
0628   082B DA            push d
0629   082C FD 2E 02 00   mov32 cb, $00000002
0629   0830 00 00 
0630   0832 E7            pop d
0631   0833 5A            add d, b
0632   0834 E4            pop a
0633   0835 DA            push d
0634   0836 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0635   0839 D7            push a
0636   083A DA            push d
0637   083B FD 2E 01 00   mov32 cb, $00000001
0637   083F 00 00 
0638   0841 E7            pop d
0639   0842 5A            add d, b
0640   0843 E4            pop a
0641   0844 32            mov bl, [d]
0642   0845 A7 00         mov bh, 0
0643   0847 38 00 00      mov c, 0
0644   084A D7            push a
0645   084B 11            mov a, b
0646   084C FD 2E 0F 00   mov32 cb, $0000000f
0646   0850 00 00 
0647   0852 FD 92         and b, a ; &
0648   0854 E4            pop a
0649   0855             ; --- START SHIFT
0650   0855 D7            push a
0651   0856 11            mov a, b
0652   0857 FD 2E 02 00   mov32 cb, $00000002
0652   085B 00 00 
0653   085D FD 39         mov c, b
0654   085F 9D            shl a, cl
0655   0860 27            mov b, a
0656   0861 E4            pop a
0657   0862             ; --- END SHIFT
0658   0862             ; --- START TERMS
0659   0862 D7            push a
0660   0863 11            mov a, b
0661   0864 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0662   0867 D7            push a
0663   0868 DA            push d
0664   0869 FD 2E 02 00   mov32 cb, $00000002
0664   086D 00 00 
0665   086F E7            pop d
0666   0870 5A            add d, b
0667   0871 E4            pop a
0668   0872 32            mov bl, [d]
0669   0873 A7 00         mov bh, 0
0670   0875 38 00 00      mov c, 0
0671   0878 D7            push a
0672   0879 11            mov a, b
0673   087A FD 2E C0 00   mov32 cb, $000000c0
0673   087E 00 00 
0674   0880 FD 92         and b, a ; &
0675   0882 E4            pop a
0676   0883             ; --- START SHIFT
0677   0883 D7            push a
0678   0884 11            mov a, b
0679   0885 FD 2E 06 00   mov32 cb, $00000006
0679   0889 00 00 
0680   088B FD 39         mov c, b
0681   088D A5            ashr a, cl
0682   088E 27            mov b, a
0683   088F E4            pop a
0684   0890             ; --- END SHIFT
0685   0890 56            add b, a
0686   0891 E4            pop a
0687   0892             ; --- END TERMS
0688   0892 E7            pop d
0689   0893 FD 3E         mov [d], bl
0690   0895             ; for (k = 0; k < i + 1; k++) { 
0691   0895             _for6_init:
0692   0895 FA FB FF      lea d, [bp + -5] ; $k
0693   0898 DA            push d
0694   0899 FD 2E 00 00   mov32 cb, $00000000
0694   089D 00 00 
0695   089F E7            pop d
0696   08A0 FD 43         mov [d], b
0697   08A2             _for6_cond:
0698   08A2 FA FB FF      lea d, [bp + -5] ; $k
0699   08A5 2A            mov b, [d]
0700   08A6 38 00 00      mov c, 0
0701   08A9             ; --- START RELATIONAL
0702   08A9 D7            push a
0703   08AA 11            mov a, b
0704   08AB FA FF FF      lea d, [bp + -1] ; $i
0705   08AE 2A            mov b, [d]
0706   08AF 38 00 00      mov c, 0
0707   08B2             ; --- START TERMS
0708   08B2 D7            push a
0709   08B3 11            mov a, b
0710   08B4 FD 2E 01 00   mov32 cb, $00000001
0710   08B8 00 00 
0711   08BA 56            add b, a
0712   08BB E4            pop a
0713   08BC             ; --- END TERMS
0714   08BC B0            cmp a, b
0715   08BD FD 73         slt ; < (signed)
0716   08BF E4            pop a
0717   08C0             ; --- END RELATIONAL
0718   08C0 C0 00 00      cmp b, 0
0719   08C3 C6 22 09      je _for6_exit
0720   08C6             _for6_block:
0721   08C6             ; output[j++] = base64_table[output_buffer[k]]; 
0722   08C6 FA 07 00      lea d, [bp + 7] ; $output
0723   08C9 FD 2A         mov d, [d]
0724   08CB D7            push a
0725   08CC DA            push d
0726   08CD FA FD FF      lea d, [bp + -3] ; $j
0727   08D0 2A            mov b, [d]
0728   08D1 38 00 00      mov c, 0
0729   08D4 11            mov a, b
0730   08D5 FD 77         inc b
0731   08D7 FA FD FF      lea d, [bp + -3] ; $j
0732   08DA FD 43         mov [d], b
0733   08DC 27            mov b, a
0734   08DD E7            pop d
0735   08DE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0736   08E2 E4            pop a
0737   08E3 DA            push d
0738   08E4 3B AD 1A      mov d, _base64_table ; $base64_table
0739   08E7 FD 2A         mov d, [d]
0740   08E9 D7            push a
0741   08EA DA            push d
0742   08EB FA F2 FF      lea d, [bp + -14] ; $output_buffer
0743   08EE D7            push a
0744   08EF DA            push d
0745   08F0 FA FB FF      lea d, [bp + -5] ; $k
0746   08F3 2A            mov b, [d]
0747   08F4 38 00 00      mov c, 0
0748   08F7 E7            pop d
0749   08F8 5A            add d, b
0750   08F9 E4            pop a
0751   08FA 32            mov bl, [d]
0752   08FB A7 00         mov bh, 0
0753   08FD 38 00 00      mov c, 0
0754   0900 E7            pop d
0755   0901 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0756   0905 E4            pop a
0757   0906 32            mov bl, [d]
0758   0907 A7 00         mov bh, 0
0759   0909 38 00 00      mov c, 0
0760   090C E7            pop d
0761   090D FD 3E         mov [d], bl
0762   090F             _for6_update:
0763   090F FA FB FF      lea d, [bp + -5] ; $k
0764   0912 2A            mov b, [d]
0765   0913 38 00 00      mov c, 0
0766   0916 11            mov a, b
0767   0917 FD 77         inc b
0768   0919 FA FB FF      lea d, [bp + -5] ; $k
0769   091C FD 43         mov [d], b
0770   091E 27            mov b, a
0771   091F 0A A2 08      jmp _for6_cond
0772   0922             _for6_exit:
0773   0922             ; while (i++ < 3) { 
0774   0922             _while7_cond:
0775   0922 FA FF FF      lea d, [bp + -1] ; $i
0776   0925 2A            mov b, [d]
0777   0926 38 00 00      mov c, 0
0778   0929 11            mov a, b
0779   092A FD 77         inc b
0780   092C FA FF FF      lea d, [bp + -1] ; $i
0781   092F FD 43         mov [d], b
0782   0931 27            mov b, a
0783   0932             ; --- START RELATIONAL
0784   0932 D7            push a
0785   0933 11            mov a, b
0786   0934 FD 2E 03 00   mov32 cb, $00000003
0786   0938 00 00 
0787   093A B0            cmp a, b
0788   093B FD 73         slt ; < (signed)
0789   093D E4            pop a
0790   093E             ; --- END RELATIONAL
0791   093E C0 00 00      cmp b, 0
0792   0941 C6 6E 09      je _while7_exit
0793   0944             _while7_block:
0794   0944             ; output[j++] = '='; 
0795   0944 FA 07 00      lea d, [bp + 7] ; $output
0796   0947 FD 2A         mov d, [d]
0797   0949 D7            push a
0798   094A DA            push d
0799   094B FA FD FF      lea d, [bp + -3] ; $j
0800   094E 2A            mov b, [d]
0801   094F 38 00 00      mov c, 0
0802   0952 11            mov a, b
0803   0953 FD 77         inc b
0804   0955 FA FD FF      lea d, [bp + -3] ; $j
0805   0958 FD 43         mov [d], b
0806   095A 27            mov b, a
0807   095B E7            pop d
0808   095C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0809   0960 E4            pop a
0810   0961 DA            push d
0811   0962 FD 2E 3D 00   mov32 cb, $0000003d
0811   0966 00 00 
0812   0968 E7            pop d
0813   0969 FD 3E         mov [d], bl
0814   096B 0A 22 09      jmp _while7_cond
0815   096E             _while7_exit:
0816   096E 0A 71 09      jmp _if4_exit
0817   0971             _if4_exit:
0818   0971             ; output[j] = '\0'; 
0819   0971 FA 07 00      lea d, [bp + 7] ; $output
0820   0974 FD 2A         mov d, [d]
0821   0976 D7            push a
0822   0977 DA            push d
0823   0978 FA FD FF      lea d, [bp + -3] ; $j
0824   097B 2A            mov b, [d]
0825   097C 38 00 00      mov c, 0
0826   097F E7            pop d
0827   0980 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0828   0984 E4            pop a
0829   0985 DA            push d
0830   0986 FD 2E 00 00   mov32 cb, $00000000
0830   098A 00 00 
0831   098C E7            pop d
0832   098D FD 3E         mov [d], bl
0833   098F F9            leave
0834   0990 09            ret
0835   0991             
0836   0991             base64_char_value:
0837   0991 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0838   0994             ; if (c >= 'A' && c <= 'Z') return c - 'A'; 
0839   0994             _if8_cond:
0840   0994 FA 05 00      lea d, [bp + 5] ; $c
0841   0997 32            mov bl, [d]
0842   0998 A7 00         mov bh, 0
0843   099A 38 00 00      mov c, 0
0844   099D             ; --- START RELATIONAL
0845   099D D7            push a
0846   099E 11            mov a, b
0847   099F FD 2E 41 00   mov32 cb, $00000041
0847   09A3 00 00 
0848   09A5 B0            cmp a, b
0849   09A6 FD 80         sge ; >=
0850   09A8 E4            pop a
0851   09A9             ; --- END RELATIONAL
0852   09A9             ; --- START LOGICAL AND
0853   09A9 D7            push a
0854   09AA 11            mov a, b
0855   09AB FA 05 00      lea d, [bp + 5] ; $c
0856   09AE 32            mov bl, [d]
0857   09AF A7 00         mov bh, 0
0858   09B1 38 00 00      mov c, 0
0859   09B4             ; --- START RELATIONAL
0860   09B4 D7            push a
0861   09B5 11            mov a, b
0862   09B6 FD 2E 5A 00   mov32 cb, $0000005a
0862   09BA 00 00 
0863   09BC B0            cmp a, b
0864   09BD FD 74         sle ; <= (signed)
0865   09BF E4            pop a
0866   09C0             ; --- END RELATIONAL
0867   09C0 FD A7         sand a, b
0868   09C2 E4            pop a
0869   09C3             ; --- END LOGICAL AND
0870   09C3 C0 00 00      cmp b, 0
0871   09C6 C6 E2 09      je _if8_exit
0872   09C9             _if8_TRUE:
0873   09C9             ; return c - 'A'; 
0874   09C9 FA 05 00      lea d, [bp + 5] ; $c
0875   09CC 32            mov bl, [d]
0876   09CD A7 00         mov bh, 0
0877   09CF 38 00 00      mov c, 0
0878   09D2             ; --- START TERMS
0879   09D2 D7            push a
0880   09D3 11            mov a, b
0881   09D4 FD 2E 41 00   mov32 cb, $00000041
0881   09D8 00 00 
0882   09DA 60            sub a, b
0883   09DB 27            mov b, a
0884   09DC E4            pop a
0885   09DD             ; --- END TERMS
0886   09DD F9            leave
0887   09DE 09            ret
0888   09DF 0A E2 09      jmp _if8_exit
0889   09E2             _if8_exit:
0890   09E2             ; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
0891   09E2             _if9_cond:
0892   09E2 FA 05 00      lea d, [bp + 5] ; $c
0893   09E5 32            mov bl, [d]
0894   09E6 A7 00         mov bh, 0
0895   09E8 38 00 00      mov c, 0
0896   09EB             ; --- START RELATIONAL
0897   09EB D7            push a
0898   09EC 11            mov a, b
0899   09ED FD 2E 61 00   mov32 cb, $00000061
0899   09F1 00 00 
0900   09F3 B0            cmp a, b
0901   09F4 FD 80         sge ; >=
0902   09F6 E4            pop a
0903   09F7             ; --- END RELATIONAL
0904   09F7             ; --- START LOGICAL AND
0905   09F7 D7            push a
0906   09F8 11            mov a, b
0907   09F9 FA 05 00      lea d, [bp + 5] ; $c
0908   09FC 32            mov bl, [d]
0909   09FD A7 00         mov bh, 0
0910   09FF 38 00 00      mov c, 0
0911   0A02             ; --- START RELATIONAL
0912   0A02 D7            push a
0913   0A03 11            mov a, b
0914   0A04 FD 2E 7A 00   mov32 cb, $0000007a
0914   0A08 00 00 
0915   0A0A B0            cmp a, b
0916   0A0B FD 74         sle ; <= (signed)
0917   0A0D E4            pop a
0918   0A0E             ; --- END RELATIONAL
0919   0A0E FD A7         sand a, b
0920   0A10 E4            pop a
0921   0A11             ; --- END LOGICAL AND
0922   0A11 C0 00 00      cmp b, 0
0923   0A14 C6 38 0A      je _if9_exit
0924   0A17             _if9_TRUE:
0925   0A17             ; return c - 'a' + 26; 
0926   0A17 FA 05 00      lea d, [bp + 5] ; $c
0927   0A1A 32            mov bl, [d]
0928   0A1B A7 00         mov bh, 0
0929   0A1D 38 00 00      mov c, 0
0930   0A20             ; --- START TERMS
0931   0A20 D7            push a
0932   0A21 11            mov a, b
0933   0A22 FD 2E 61 00   mov32 cb, $00000061
0933   0A26 00 00 
0934   0A28 60            sub a, b
0935   0A29 27            mov b, a
0936   0A2A 11            mov a, b
0937   0A2B FD 2E 1A 00   mov32 cb, $0000001a
0937   0A2F 00 00 
0938   0A31 56            add b, a
0939   0A32 E4            pop a
0940   0A33             ; --- END TERMS
0941   0A33 F9            leave
0942   0A34 09            ret
0943   0A35 0A 38 0A      jmp _if9_exit
0944   0A38             _if9_exit:
0945   0A38             ; if (c >= '0' && c <= '9') return c - '0' + 52; 
0946   0A38             _if10_cond:
0947   0A38 FA 05 00      lea d, [bp + 5] ; $c
0948   0A3B 32            mov bl, [d]
0949   0A3C A7 00         mov bh, 0
0950   0A3E 38 00 00      mov c, 0
0951   0A41             ; --- START RELATIONAL
0952   0A41 D7            push a
0953   0A42 11            mov a, b
0954   0A43 FD 2E 30 00   mov32 cb, $00000030
0954   0A47 00 00 
0955   0A49 B0            cmp a, b
0956   0A4A FD 80         sge ; >=
0957   0A4C E4            pop a
0958   0A4D             ; --- END RELATIONAL
0959   0A4D             ; --- START LOGICAL AND
0960   0A4D D7            push a
0961   0A4E 11            mov a, b
0962   0A4F FA 05 00      lea d, [bp + 5] ; $c
0963   0A52 32            mov bl, [d]
0964   0A53 A7 00         mov bh, 0
0965   0A55 38 00 00      mov c, 0
0966   0A58             ; --- START RELATIONAL
0967   0A58 D7            push a
0968   0A59 11            mov a, b
0969   0A5A FD 2E 39 00   mov32 cb, $00000039
0969   0A5E 00 00 
0970   0A60 B0            cmp a, b
0971   0A61 FD 74         sle ; <= (signed)
0972   0A63 E4            pop a
0973   0A64             ; --- END RELATIONAL
0974   0A64 FD A7         sand a, b
0975   0A66 E4            pop a
0976   0A67             ; --- END LOGICAL AND
0977   0A67 C0 00 00      cmp b, 0
0978   0A6A C6 8E 0A      je _if10_exit
0979   0A6D             _if10_TRUE:
0980   0A6D             ; return c - '0' + 52; 
0981   0A6D FA 05 00      lea d, [bp + 5] ; $c
0982   0A70 32            mov bl, [d]
0983   0A71 A7 00         mov bh, 0
0984   0A73 38 00 00      mov c, 0
0985   0A76             ; --- START TERMS
0986   0A76 D7            push a
0987   0A77 11            mov a, b
0988   0A78 FD 2E 30 00   mov32 cb, $00000030
0988   0A7C 00 00 
0989   0A7E 60            sub a, b
0990   0A7F 27            mov b, a
0991   0A80 11            mov a, b
0992   0A81 FD 2E 34 00   mov32 cb, $00000034
0992   0A85 00 00 
0993   0A87 56            add b, a
0994   0A88 E4            pop a
0995   0A89             ; --- END TERMS
0996   0A89 F9            leave
0997   0A8A 09            ret
0998   0A8B 0A 8E 0A      jmp _if10_exit
0999   0A8E             _if10_exit:
1000   0A8E             ; if (c == '+') return 62; 
1001   0A8E             _if11_cond:
1002   0A8E FA 05 00      lea d, [bp + 5] ; $c
1003   0A91 32            mov bl, [d]
1004   0A92 A7 00         mov bh, 0
1005   0A94 38 00 00      mov c, 0
1006   0A97             ; --- START RELATIONAL
1007   0A97 D7            push a
1008   0A98 11            mov a, b
1009   0A99 FD 2E 2B 00   mov32 cb, $0000002b
1009   0A9D 00 00 
1010   0A9F B0            cmp a, b
1011   0AA0 FD 71         seq ; ==
1012   0AA2 E4            pop a
1013   0AA3             ; --- END RELATIONAL
1014   0AA3 C0 00 00      cmp b, 0
1015   0AA6 C6 B4 0A      je _if11_exit
1016   0AA9             _if11_TRUE:
1017   0AA9             ; return 62; 
1018   0AA9 FD 2E 3E 00   mov32 cb, $0000003e
1018   0AAD 00 00 
1019   0AAF F9            leave
1020   0AB0 09            ret
1021   0AB1 0A B4 0A      jmp _if11_exit
1022   0AB4             _if11_exit:
1023   0AB4             ; if (c == '/') return 63; 
1024   0AB4             _if12_cond:
1025   0AB4 FA 05 00      lea d, [bp + 5] ; $c
1026   0AB7 32            mov bl, [d]
1027   0AB8 A7 00         mov bh, 0
1028   0ABA 38 00 00      mov c, 0
1029   0ABD             ; --- START RELATIONAL
1030   0ABD D7            push a
1031   0ABE 11            mov a, b
1032   0ABF FD 2E 2F 00   mov32 cb, $0000002f
1032   0AC3 00 00 
1033   0AC5 B0            cmp a, b
1034   0AC6 FD 71         seq ; ==
1035   0AC8 E4            pop a
1036   0AC9             ; --- END RELATIONAL
1037   0AC9 C0 00 00      cmp b, 0
1038   0ACC C6 DA 0A      je _if12_exit
1039   0ACF             _if12_TRUE:
1040   0ACF             ; return 63; 
1041   0ACF FD 2E 3F 00   mov32 cb, $0000003f
1041   0AD3 00 00 
1042   0AD5 F9            leave
1043   0AD6 09            ret
1044   0AD7 0A DA 0A      jmp _if12_exit
1045   0ADA             _if12_exit:
1046   0ADA             ; return -1; 
1047   0ADA FD 2E FF FF   mov32 cb, $ffffffff
1047   0ADE FF FF 
1048   0AE0 F9            leave
1049   0AE1 09            ret
1050   0AE2             
1051   0AE2             base64_decode:
1052   0AE2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1053   0AE5             ; int i = 0, j = 0, k = 0; 
1054   0AE5 52 02 00      sub sp, 2
1055   0AE8             ; --- START LOCAL VAR INITIALIZATION
1056   0AE8 FA FF FF      lea d, [bp + -1] ; $i
1057   0AEB DA            push d
1058   0AEC FD 2E 00 00   mov32 cb, $00000000
1058   0AF0 00 00 
1059   0AF2 E7            pop d
1060   0AF3 FD 43         mov [d], b
1061   0AF5             ; --- END LOCAL VAR INITIALIZATION
1062   0AF5 52 02 00      sub sp, 2
1063   0AF8             ; --- START LOCAL VAR INITIALIZATION
1064   0AF8 FA FD FF      lea d, [bp + -3] ; $j
1065   0AFB DA            push d
1066   0AFC FD 2E 00 00   mov32 cb, $00000000
1066   0B00 00 00 
1067   0B02 E7            pop d
1068   0B03 FD 43         mov [d], b
1069   0B05             ; --- END LOCAL VAR INITIALIZATION
1070   0B05 52 02 00      sub sp, 2
1071   0B08             ; --- START LOCAL VAR INITIALIZATION
1072   0B08 FA FB FF      lea d, [bp + -5] ; $k
1073   0B0B DA            push d
1074   0B0C FD 2E 00 00   mov32 cb, $00000000
1074   0B10 00 00 
1075   0B12 E7            pop d
1076   0B13 FD 43         mov [d], b
1077   0B15             ; --- END LOCAL VAR INITIALIZATION
1078   0B15             ; int input_len; 
1079   0B15 52 02 00      sub sp, 2
1080   0B18             ; unsigned char input_buffer[4]; 
1081   0B18 52 04 00      sub sp, 4
1082   0B1B             ; unsigned char output_buffer[3]; 
1083   0B1B 52 03 00      sub sp, 3
1084   0B1E             ; input_len = strlen(input); 
1085   0B1E FA F9 FF      lea d, [bp + -7] ; $input_len
1086   0B21 DA            push d
1087   0B22             ; --- START FUNCTION CALL
1088   0B22 FA 05 00      lea d, [bp + 5] ; $input
1089   0B25 2A            mov b, [d]
1090   0B26 38 00 00      mov c, 0
1091   0B29 FD AB         swp b
1092   0B2B D8            push b
1093   0B2C 07 11 1A      call strlen
1094   0B2F 51 02 00      add sp, 2
1095   0B32             ; --- END FUNCTION CALL
1096   0B32 E7            pop d
1097   0B33 FD 43         mov [d], b
1098   0B35             ; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1099   0B35             _while13_cond:
1100   0B35 FA F9 FF      lea d, [bp + -7] ; $input_len
1101   0B38 2A            mov b, [d]
1102   0B39 38 00 00      mov c, 0
1103   0B3C 11            mov a, b
1104   0B3D FD 7D         dec b
1105   0B3F FA F9 FF      lea d, [bp + -7] ; $input_len
1106   0B42 FD 43         mov [d], b
1107   0B44 27            mov b, a
1108   0B45             ; --- START LOGICAL AND
1109   0B45 D7            push a
1110   0B46 11            mov a, b
1111   0B47 FA 05 00      lea d, [bp + 5] ; $input
1112   0B4A FD 2A         mov d, [d]
1113   0B4C D7            push a
1114   0B4D DA            push d
1115   0B4E FA FB FF      lea d, [bp + -5] ; $k
1116   0B51 2A            mov b, [d]
1117   0B52 38 00 00      mov c, 0
1118   0B55 E7            pop d
1119   0B56 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1120   0B5A E4            pop a
1121   0B5B 32            mov bl, [d]
1122   0B5C A7 00         mov bh, 0
1123   0B5E 38 00 00      mov c, 0
1124   0B61             ; --- START RELATIONAL
1125   0B61 D7            push a
1126   0B62 11            mov a, b
1127   0B63 FD 2E 3D 00   mov32 cb, $0000003d
1127   0B67 00 00 
1128   0B69 B0            cmp a, b
1129   0B6A FD 72         sneq ; !=
1130   0B6C E4            pop a
1131   0B6D             ; --- END RELATIONAL
1132   0B6D FD A7         sand a, b
1133   0B6F 11            mov a, b
1134   0B70             ; --- START FUNCTION CALL
1135   0B70 FA 05 00      lea d, [bp + 5] ; $input
1136   0B73 FD 2A         mov d, [d]
1137   0B75 D7            push a
1138   0B76 DA            push d
1139   0B77 FA FB FF      lea d, [bp + -5] ; $k
1140   0B7A 2A            mov b, [d]
1141   0B7B 38 00 00      mov c, 0
1142   0B7E E7            pop d
1143   0B7F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1144   0B83 E4            pop a
1145   0B84 32            mov bl, [d]
1146   0B85 A7 00         mov bh, 0
1147   0B87 38 00 00      mov c, 0
1148   0B8A DD            push bl
1149   0B8B 07 91 09      call base64_char_value
1150   0B8E 51 01 00      add sp, 1
1151   0B91             ; --- END FUNCTION CALL
1152   0B91             ; --- START RELATIONAL
1153   0B91 D7            push a
1154   0B92 11            mov a, b
1155   0B93 FD 2E FF FF   mov32 cb, $ffffffff
1155   0B97 FF FF 
1156   0B99 B0            cmp a, b
1157   0B9A FD 72         sneq ; !=
1158   0B9C E4            pop a
1159   0B9D             ; --- END RELATIONAL
1160   0B9D FD A7         sand a, b
1161   0B9F E4            pop a
1162   0BA0             ; --- END LOGICAL AND
1163   0BA0 C0 00 00      cmp b, 0
1164   0BA3 C6 0F 0E      je _while13_exit
1165   0BA6             _while13_block:
1166   0BA6             ; input_buffer[i++] = input[k++]; 
1167   0BA6 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1168   0BA9 D7            push a
1169   0BAA DA            push d
1170   0BAB FA FF FF      lea d, [bp + -1] ; $i
1171   0BAE 2A            mov b, [d]
1172   0BAF 38 00 00      mov c, 0
1173   0BB2 11            mov a, b
1174   0BB3 FD 77         inc b
1175   0BB5 FA FF FF      lea d, [bp + -1] ; $i
1176   0BB8 FD 43         mov [d], b
1177   0BBA 27            mov b, a
1178   0BBB E7            pop d
1179   0BBC 5A            add d, b
1180   0BBD E4            pop a
1181   0BBE DA            push d
1182   0BBF FA 05 00      lea d, [bp + 5] ; $input
1183   0BC2 FD 2A         mov d, [d]
1184   0BC4 D7            push a
1185   0BC5 DA            push d
1186   0BC6 FA FB FF      lea d, [bp + -5] ; $k
1187   0BC9 2A            mov b, [d]
1188   0BCA 38 00 00      mov c, 0
1189   0BCD 11            mov a, b
1190   0BCE FD 77         inc b
1191   0BD0 FA FB FF      lea d, [bp + -5] ; $k
1192   0BD3 FD 43         mov [d], b
1193   0BD5 27            mov b, a
1194   0BD6 E7            pop d
1195   0BD7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1196   0BDB E4            pop a
1197   0BDC 32            mov bl, [d]
1198   0BDD A7 00         mov bh, 0
1199   0BDF 38 00 00      mov c, 0
1200   0BE2 E7            pop d
1201   0BE3 FD 3E         mov [d], bl
1202   0BE5             ; if (i == 4) { 
1203   0BE5             _if14_cond:
1204   0BE5 FA FF FF      lea d, [bp + -1] ; $i
1205   0BE8 2A            mov b, [d]
1206   0BE9 38 00 00      mov c, 0
1207   0BEC             ; --- START RELATIONAL
1208   0BEC D7            push a
1209   0BED 11            mov a, b
1210   0BEE FD 2E 04 00   mov32 cb, $00000004
1210   0BF2 00 00 
1211   0BF4 B0            cmp a, b
1212   0BF5 FD 71         seq ; ==
1213   0BF7 E4            pop a
1214   0BF8             ; --- END RELATIONAL
1215   0BF8 C0 00 00      cmp b, 0
1216   0BFB C6 0C 0E      je _if14_exit
1217   0BFE             _if14_TRUE:
1218   0BFE             ; for (i = 0; i < 4; i++) { 
1219   0BFE             _for15_init:
1220   0BFE FA FF FF      lea d, [bp + -1] ; $i
1221   0C01 DA            push d
1222   0C02 FD 2E 00 00   mov32 cb, $00000000
1222   0C06 00 00 
1223   0C08 E7            pop d
1224   0C09 FD 43         mov [d], b
1225   0C0B             _for15_cond:
1226   0C0B FA FF FF      lea d, [bp + -1] ; $i
1227   0C0E 2A            mov b, [d]
1228   0C0F 38 00 00      mov c, 0
1229   0C12             ; --- START RELATIONAL
1230   0C12 D7            push a
1231   0C13 11            mov a, b
1232   0C14 FD 2E 04 00   mov32 cb, $00000004
1232   0C18 00 00 
1233   0C1A B0            cmp a, b
1234   0C1B FD 73         slt ; < (signed)
1235   0C1D E4            pop a
1236   0C1E             ; --- END RELATIONAL
1237   0C1E C0 00 00      cmp b, 0
1238   0C21 C6 66 0C      je _for15_exit
1239   0C24             _for15_block:
1240   0C24             ; input_buffer[i] = base64_char_value(input_buffer[i]); 
1241   0C24 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1242   0C27 D7            push a
1243   0C28 DA            push d
1244   0C29 FA FF FF      lea d, [bp + -1] ; $i
1245   0C2C 2A            mov b, [d]
1246   0C2D 38 00 00      mov c, 0
1247   0C30 E7            pop d
1248   0C31 5A            add d, b
1249   0C32 E4            pop a
1250   0C33 DA            push d
1251   0C34             ; --- START FUNCTION CALL
1252   0C34 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1253   0C37 D7            push a
1254   0C38 DA            push d
1255   0C39 FA FF FF      lea d, [bp + -1] ; $i
1256   0C3C 2A            mov b, [d]
1257   0C3D 38 00 00      mov c, 0
1258   0C40 E7            pop d
1259   0C41 5A            add d, b
1260   0C42 E4            pop a
1261   0C43 32            mov bl, [d]
1262   0C44 A7 00         mov bh, 0
1263   0C46 38 00 00      mov c, 0
1264   0C49 DD            push bl
1265   0C4A 07 91 09      call base64_char_value
1266   0C4D 51 01 00      add sp, 1
1267   0C50             ; --- END FUNCTION CALL
1268   0C50 E7            pop d
1269   0C51 FD 3E         mov [d], bl
1270   0C53             _for15_update:
1271   0C53 FA FF FF      lea d, [bp + -1] ; $i
1272   0C56 2A            mov b, [d]
1273   0C57 38 00 00      mov c, 0
1274   0C5A 11            mov a, b
1275   0C5B FD 77         inc b
1276   0C5D FA FF FF      lea d, [bp + -1] ; $i
1277   0C60 FD 43         mov [d], b
1278   0C62 27            mov b, a
1279   0C63 0A 0B 0C      jmp _for15_cond
1280   0C66             _for15_exit:
1281   0C66             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1282   0C66 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1283   0C69 D7            push a
1284   0C6A DA            push d
1285   0C6B FD 2E 00 00   mov32 cb, $00000000
1285   0C6F 00 00 
1286   0C71 E7            pop d
1287   0C72 5A            add d, b
1288   0C73 E4            pop a
1289   0C74 DA            push d
1290   0C75 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1291   0C78 D7            push a
1292   0C79 DA            push d
1293   0C7A FD 2E 00 00   mov32 cb, $00000000
1293   0C7E 00 00 
1294   0C80 E7            pop d
1295   0C81 5A            add d, b
1296   0C82 E4            pop a
1297   0C83 32            mov bl, [d]
1298   0C84 A7 00         mov bh, 0
1299   0C86 38 00 00      mov c, 0
1300   0C89             ; --- START SHIFT
1301   0C89 D7            push a
1302   0C8A 11            mov a, b
1303   0C8B FD 2E 02 00   mov32 cb, $00000002
1303   0C8F 00 00 
1304   0C91 FD 39         mov c, b
1305   0C93 9D            shl a, cl
1306   0C94 27            mov b, a
1307   0C95 E4            pop a
1308   0C96             ; --- END SHIFT
1309   0C96             ; --- START TERMS
1310   0C96 D7            push a
1311   0C97 11            mov a, b
1312   0C98 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1313   0C9B D7            push a
1314   0C9C DA            push d
1315   0C9D FD 2E 01 00   mov32 cb, $00000001
1315   0CA1 00 00 
1316   0CA3 E7            pop d
1317   0CA4 5A            add d, b
1318   0CA5 E4            pop a
1319   0CA6 32            mov bl, [d]
1320   0CA7 A7 00         mov bh, 0
1321   0CA9 38 00 00      mov c, 0
1322   0CAC D7            push a
1323   0CAD 11            mov a, b
1324   0CAE FD 2E 30 00   mov32 cb, $00000030
1324   0CB2 00 00 
1325   0CB4 FD 92         and b, a ; &
1326   0CB6 E4            pop a
1327   0CB7             ; --- START SHIFT
1328   0CB7 D7            push a
1329   0CB8 11            mov a, b
1330   0CB9 FD 2E 04 00   mov32 cb, $00000004
1330   0CBD 00 00 
1331   0CBF FD 39         mov c, b
1332   0CC1 A5            ashr a, cl
1333   0CC2 27            mov b, a
1334   0CC3 E4            pop a
1335   0CC4             ; --- END SHIFT
1336   0CC4 56            add b, a
1337   0CC5 E4            pop a
1338   0CC6             ; --- END TERMS
1339   0CC6 E7            pop d
1340   0CC7 FD 3E         mov [d], bl
1341   0CC9             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1342   0CC9 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1343   0CCC D7            push a
1344   0CCD DA            push d
1345   0CCE FD 2E 01 00   mov32 cb, $00000001
1345   0CD2 00 00 
1346   0CD4 E7            pop d
1347   0CD5 5A            add d, b
1348   0CD6 E4            pop a
1349   0CD7 DA            push d
1350   0CD8 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1351   0CDB D7            push a
1352   0CDC DA            push d
1353   0CDD FD 2E 01 00   mov32 cb, $00000001
1353   0CE1 00 00 
1354   0CE3 E7            pop d
1355   0CE4 5A            add d, b
1356   0CE5 E4            pop a
1357   0CE6 32            mov bl, [d]
1358   0CE7 A7 00         mov bh, 0
1359   0CE9 38 00 00      mov c, 0
1360   0CEC D7            push a
1361   0CED 11            mov a, b
1362   0CEE FD 2E 0F 00   mov32 cb, $0000000f
1362   0CF2 00 00 
1363   0CF4 FD 92         and b, a ; &
1364   0CF6 E4            pop a
1365   0CF7             ; --- START SHIFT
1366   0CF7 D7            push a
1367   0CF8 11            mov a, b
1368   0CF9 FD 2E 04 00   mov32 cb, $00000004
1368   0CFD 00 00 
1369   0CFF FD 39         mov c, b
1370   0D01 9D            shl a, cl
1371   0D02 27            mov b, a
1372   0D03 E4            pop a
1373   0D04             ; --- END SHIFT
1374   0D04             ; --- START TERMS
1375   0D04 D7            push a
1376   0D05 11            mov a, b
1377   0D06 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1378   0D09 D7            push a
1379   0D0A DA            push d
1380   0D0B FD 2E 02 00   mov32 cb, $00000002
1380   0D0F 00 00 
1381   0D11 E7            pop d
1382   0D12 5A            add d, b
1383   0D13 E4            pop a
1384   0D14 32            mov bl, [d]
1385   0D15 A7 00         mov bh, 0
1386   0D17 38 00 00      mov c, 0
1387   0D1A D7            push a
1388   0D1B 11            mov a, b
1389   0D1C FD 2E 3C 00   mov32 cb, $0000003c
1389   0D20 00 00 
1390   0D22 FD 92         and b, a ; &
1391   0D24 E4            pop a
1392   0D25             ; --- START SHIFT
1393   0D25 D7            push a
1394   0D26 11            mov a, b
1395   0D27 FD 2E 02 00   mov32 cb, $00000002
1395   0D2B 00 00 
1396   0D2D FD 39         mov c, b
1397   0D2F A5            ashr a, cl
1398   0D30 27            mov b, a
1399   0D31 E4            pop a
1400   0D32             ; --- END SHIFT
1401   0D32 56            add b, a
1402   0D33 E4            pop a
1403   0D34             ; --- END TERMS
1404   0D34 E7            pop d
1405   0D35 FD 3E         mov [d], bl
1406   0D37             ; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
1407   0D37 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1408   0D3A D7            push a
1409   0D3B DA            push d
1410   0D3C FD 2E 02 00   mov32 cb, $00000002
1410   0D40 00 00 
1411   0D42 E7            pop d
1412   0D43 5A            add d, b
1413   0D44 E4            pop a
1414   0D45 DA            push d
1415   0D46 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1416   0D49 D7            push a
1417   0D4A DA            push d
1418   0D4B FD 2E 02 00   mov32 cb, $00000002
1418   0D4F 00 00 
1419   0D51 E7            pop d
1420   0D52 5A            add d, b
1421   0D53 E4            pop a
1422   0D54 32            mov bl, [d]
1423   0D55 A7 00         mov bh, 0
1424   0D57 38 00 00      mov c, 0
1425   0D5A D7            push a
1426   0D5B 11            mov a, b
1427   0D5C FD 2E 03 00   mov32 cb, $00000003
1427   0D60 00 00 
1428   0D62 FD 92         and b, a ; &
1429   0D64 E4            pop a
1430   0D65             ; --- START SHIFT
1431   0D65 D7            push a
1432   0D66 11            mov a, b
1433   0D67 FD 2E 06 00   mov32 cb, $00000006
1433   0D6B 00 00 
1434   0D6D FD 39         mov c, b
1435   0D6F 9D            shl a, cl
1436   0D70 27            mov b, a
1437   0D71 E4            pop a
1438   0D72             ; --- END SHIFT
1439   0D72             ; --- START TERMS
1440   0D72 D7            push a
1441   0D73 11            mov a, b
1442   0D74 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1443   0D77 D7            push a
1444   0D78 DA            push d
1445   0D79 FD 2E 03 00   mov32 cb, $00000003
1445   0D7D 00 00 
1446   0D7F E7            pop d
1447   0D80 5A            add d, b
1448   0D81 E4            pop a
1449   0D82 32            mov bl, [d]
1450   0D83 A7 00         mov bh, 0
1451   0D85 38 00 00      mov c, 0
1452   0D88 56            add b, a
1453   0D89 E4            pop a
1454   0D8A             ; --- END TERMS
1455   0D8A E7            pop d
1456   0D8B FD 3E         mov [d], bl
1457   0D8D             ; for (i = 0; i < 3; i++) { 
1458   0D8D             _for16_init:
1459   0D8D FA FF FF      lea d, [bp + -1] ; $i
1460   0D90 DA            push d
1461   0D91 FD 2E 00 00   mov32 cb, $00000000
1461   0D95 00 00 
1462   0D97 E7            pop d
1463   0D98 FD 43         mov [d], b
1464   0D9A             _for16_cond:
1465   0D9A FA FF FF      lea d, [bp + -1] ; $i
1466   0D9D 2A            mov b, [d]
1467   0D9E 38 00 00      mov c, 0
1468   0DA1             ; --- START RELATIONAL
1469   0DA1 D7            push a
1470   0DA2 11            mov a, b
1471   0DA3 FD 2E 03 00   mov32 cb, $00000003
1471   0DA7 00 00 
1472   0DA9 B0            cmp a, b
1473   0DAA FD 73         slt ; < (signed)
1474   0DAC E4            pop a
1475   0DAD             ; --- END RELATIONAL
1476   0DAD C0 00 00      cmp b, 0
1477   0DB0 C6 FC 0D      je _for16_exit
1478   0DB3             _for16_block:
1479   0DB3             ; output[j++] = output_buffer[i]; 
1480   0DB3 FA 07 00      lea d, [bp + 7] ; $output
1481   0DB6 FD 2A         mov d, [d]
1482   0DB8 D7            push a
1483   0DB9 DA            push d
1484   0DBA FA FD FF      lea d, [bp + -3] ; $j
1485   0DBD 2A            mov b, [d]
1486   0DBE 38 00 00      mov c, 0
1487   0DC1 11            mov a, b
1488   0DC2 FD 77         inc b
1489   0DC4 FA FD FF      lea d, [bp + -3] ; $j
1490   0DC7 FD 43         mov [d], b
1491   0DC9 27            mov b, a
1492   0DCA E7            pop d
1493   0DCB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1494   0DCF E4            pop a
1495   0DD0 DA            push d
1496   0DD1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1497   0DD4 D7            push a
1498   0DD5 DA            push d
1499   0DD6 FA FF FF      lea d, [bp + -1] ; $i
1500   0DD9 2A            mov b, [d]
1501   0DDA 38 00 00      mov c, 0
1502   0DDD E7            pop d
1503   0DDE 5A            add d, b
1504   0DDF E4            pop a
1505   0DE0 32            mov bl, [d]
1506   0DE1 A7 00         mov bh, 0
1507   0DE3 38 00 00      mov c, 0
1508   0DE6 E7            pop d
1509   0DE7 FD 3E         mov [d], bl
1510   0DE9             _for16_update:
1511   0DE9 FA FF FF      lea d, [bp + -1] ; $i
1512   0DEC 2A            mov b, [d]
1513   0DED 38 00 00      mov c, 0
1514   0DF0 11            mov a, b
1515   0DF1 FD 77         inc b
1516   0DF3 FA FF FF      lea d, [bp + -1] ; $i
1517   0DF6 FD 43         mov [d], b
1518   0DF8 27            mov b, a
1519   0DF9 0A 9A 0D      jmp _for16_cond
1520   0DFC             _for16_exit:
1521   0DFC             ; i = 0; 
1522   0DFC FA FF FF      lea d, [bp + -1] ; $i
1523   0DFF DA            push d
1524   0E00 FD 2E 00 00   mov32 cb, $00000000
1524   0E04 00 00 
1525   0E06 E7            pop d
1526   0E07 FD 43         mov [d], b
1527   0E09 0A 0C 0E      jmp _if14_exit
1528   0E0C             _if14_exit:
1529   0E0C 0A 35 0B      jmp _while13_cond
1530   0E0F             _while13_exit:
1531   0E0F             ; if (i) { 
1532   0E0F             _if17_cond:
1533   0E0F FA FF FF      lea d, [bp + -1] ; $i
1534   0E12 2A            mov b, [d]
1535   0E13 38 00 00      mov c, 0
1536   0E16 C0 00 00      cmp b, 0
1537   0E19 C6 26 10      je _if17_exit
1538   0E1C             _if17_TRUE:
1539   0E1C             ; for (k = i; k < 4; k++) { 
1540   0E1C             _for18_init:
1541   0E1C FA FB FF      lea d, [bp + -5] ; $k
1542   0E1F DA            push d
1543   0E20 FA FF FF      lea d, [bp + -1] ; $i
1544   0E23 2A            mov b, [d]
1545   0E24 38 00 00      mov c, 0
1546   0E27 E7            pop d
1547   0E28 FD 43         mov [d], b
1548   0E2A             _for18_cond:
1549   0E2A FA FB FF      lea d, [bp + -5] ; $k
1550   0E2D 2A            mov b, [d]
1551   0E2E 38 00 00      mov c, 0
1552   0E31             ; --- START RELATIONAL
1553   0E31 D7            push a
1554   0E32 11            mov a, b
1555   0E33 FD 2E 04 00   mov32 cb, $00000004
1555   0E37 00 00 
1556   0E39 B0            cmp a, b
1557   0E3A FD 73         slt ; < (signed)
1558   0E3C E4            pop a
1559   0E3D             ; --- END RELATIONAL
1560   0E3D C0 00 00      cmp b, 0
1561   0E40 C6 6F 0E      je _for18_exit
1562   0E43             _for18_block:
1563   0E43             ; input_buffer[k] = 0; 
1564   0E43 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1565   0E46 D7            push a
1566   0E47 DA            push d
1567   0E48 FA FB FF      lea d, [bp + -5] ; $k
1568   0E4B 2A            mov b, [d]
1569   0E4C 38 00 00      mov c, 0
1570   0E4F E7            pop d
1571   0E50 5A            add d, b
1572   0E51 E4            pop a
1573   0E52 DA            push d
1574   0E53 FD 2E 00 00   mov32 cb, $00000000
1574   0E57 00 00 
1575   0E59 E7            pop d
1576   0E5A FD 3E         mov [d], bl
1577   0E5C             _for18_update:
1578   0E5C FA FB FF      lea d, [bp + -5] ; $k
1579   0E5F 2A            mov b, [d]
1580   0E60 38 00 00      mov c, 0
1581   0E63 11            mov a, b
1582   0E64 FD 77         inc b
1583   0E66 FA FB FF      lea d, [bp + -5] ; $k
1584   0E69 FD 43         mov [d], b
1585   0E6B 27            mov b, a
1586   0E6C 0A 2A 0E      jmp _for18_cond
1587   0E6F             _for18_exit:
1588   0E6F             ; for (k = 0; k < 4; k++) { 
1589   0E6F             _for19_init:
1590   0E6F FA FB FF      lea d, [bp + -5] ; $k
1591   0E72 DA            push d
1592   0E73 FD 2E 00 00   mov32 cb, $00000000
1592   0E77 00 00 
1593   0E79 E7            pop d
1594   0E7A FD 43         mov [d], b
1595   0E7C             _for19_cond:
1596   0E7C FA FB FF      lea d, [bp + -5] ; $k
1597   0E7F 2A            mov b, [d]
1598   0E80 38 00 00      mov c, 0
1599   0E83             ; --- START RELATIONAL
1600   0E83 D7            push a
1601   0E84 11            mov a, b
1602   0E85 FD 2E 04 00   mov32 cb, $00000004
1602   0E89 00 00 
1603   0E8B B0            cmp a, b
1604   0E8C FD 73         slt ; < (signed)
1605   0E8E E4            pop a
1606   0E8F             ; --- END RELATIONAL
1607   0E8F C0 00 00      cmp b, 0
1608   0E92 C6 D7 0E      je _for19_exit
1609   0E95             _for19_block:
1610   0E95             ; input_buffer[k] = base64_char_value(input_buffer[k]); 
1611   0E95 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1612   0E98 D7            push a
1613   0E99 DA            push d
1614   0E9A FA FB FF      lea d, [bp + -5] ; $k
1615   0E9D 2A            mov b, [d]
1616   0E9E 38 00 00      mov c, 0
1617   0EA1 E7            pop d
1618   0EA2 5A            add d, b
1619   0EA3 E4            pop a
1620   0EA4 DA            push d
1621   0EA5             ; --- START FUNCTION CALL
1622   0EA5 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1623   0EA8 D7            push a
1624   0EA9 DA            push d
1625   0EAA FA FB FF      lea d, [bp + -5] ; $k
1626   0EAD 2A            mov b, [d]
1627   0EAE 38 00 00      mov c, 0
1628   0EB1 E7            pop d
1629   0EB2 5A            add d, b
1630   0EB3 E4            pop a
1631   0EB4 32            mov bl, [d]
1632   0EB5 A7 00         mov bh, 0
1633   0EB7 38 00 00      mov c, 0
1634   0EBA DD            push bl
1635   0EBB 07 91 09      call base64_char_value
1636   0EBE 51 01 00      add sp, 1
1637   0EC1             ; --- END FUNCTION CALL
1638   0EC1 E7            pop d
1639   0EC2 FD 3E         mov [d], bl
1640   0EC4             _for19_update:
1641   0EC4 FA FB FF      lea d, [bp + -5] ; $k
1642   0EC7 2A            mov b, [d]
1643   0EC8 38 00 00      mov c, 0
1644   0ECB 11            mov a, b
1645   0ECC FD 77         inc b
1646   0ECE FA FB FF      lea d, [bp + -5] ; $k
1647   0ED1 FD 43         mov [d], b
1648   0ED3 27            mov b, a
1649   0ED4 0A 7C 0E      jmp _for19_cond
1650   0ED7             _for19_exit:
1651   0ED7             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1652   0ED7 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1653   0EDA D7            push a
1654   0EDB DA            push d
1655   0EDC FD 2E 00 00   mov32 cb, $00000000
1655   0EE0 00 00 
1656   0EE2 E7            pop d
1657   0EE3 5A            add d, b
1658   0EE4 E4            pop a
1659   0EE5 DA            push d
1660   0EE6 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1661   0EE9 D7            push a
1662   0EEA DA            push d
1663   0EEB FD 2E 00 00   mov32 cb, $00000000
1663   0EEF 00 00 
1664   0EF1 E7            pop d
1665   0EF2 5A            add d, b
1666   0EF3 E4            pop a
1667   0EF4 32            mov bl, [d]
1668   0EF5 A7 00         mov bh, 0
1669   0EF7 38 00 00      mov c, 0
1670   0EFA             ; --- START SHIFT
1671   0EFA D7            push a
1672   0EFB 11            mov a, b
1673   0EFC FD 2E 02 00   mov32 cb, $00000002
1673   0F00 00 00 
1674   0F02 FD 39         mov c, b
1675   0F04 9D            shl a, cl
1676   0F05 27            mov b, a
1677   0F06 E4            pop a
1678   0F07             ; --- END SHIFT
1679   0F07             ; --- START TERMS
1680   0F07 D7            push a
1681   0F08 11            mov a, b
1682   0F09 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1683   0F0C D7            push a
1684   0F0D DA            push d
1685   0F0E FD 2E 01 00   mov32 cb, $00000001
1685   0F12 00 00 
1686   0F14 E7            pop d
1687   0F15 5A            add d, b
1688   0F16 E4            pop a
1689   0F17 32            mov bl, [d]
1690   0F18 A7 00         mov bh, 0
1691   0F1A 38 00 00      mov c, 0
1692   0F1D D7            push a
1693   0F1E 11            mov a, b
1694   0F1F FD 2E 30 00   mov32 cb, $00000030
1694   0F23 00 00 
1695   0F25 FD 92         and b, a ; &
1696   0F27 E4            pop a
1697   0F28             ; --- START SHIFT
1698   0F28 D7            push a
1699   0F29 11            mov a, b
1700   0F2A FD 2E 04 00   mov32 cb, $00000004
1700   0F2E 00 00 
1701   0F30 FD 39         mov c, b
1702   0F32 A5            ashr a, cl
1703   0F33 27            mov b, a
1704   0F34 E4            pop a
1705   0F35             ; --- END SHIFT
1706   0F35 56            add b, a
1707   0F36 E4            pop a
1708   0F37             ; --- END TERMS
1709   0F37 E7            pop d
1710   0F38 FD 3E         mov [d], bl
1711   0F3A             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1712   0F3A FA F2 FF      lea d, [bp + -14] ; $output_buffer
1713   0F3D D7            push a
1714   0F3E DA            push d
1715   0F3F FD 2E 01 00   mov32 cb, $00000001
1715   0F43 00 00 
1716   0F45 E7            pop d
1717   0F46 5A            add d, b
1718   0F47 E4            pop a
1719   0F48 DA            push d
1720   0F49 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1721   0F4C D7            push a
1722   0F4D DA            push d
1723   0F4E FD 2E 01 00   mov32 cb, $00000001
1723   0F52 00 00 
1724   0F54 E7            pop d
1725   0F55 5A            add d, b
1726   0F56 E4            pop a
1727   0F57 32            mov bl, [d]
1728   0F58 A7 00         mov bh, 0
1729   0F5A 38 00 00      mov c, 0
1730   0F5D D7            push a
1731   0F5E 11            mov a, b
1732   0F5F FD 2E 0F 00   mov32 cb, $0000000f
1732   0F63 00 00 
1733   0F65 FD 92         and b, a ; &
1734   0F67 E4            pop a
1735   0F68             ; --- START SHIFT
1736   0F68 D7            push a
1737   0F69 11            mov a, b
1738   0F6A FD 2E 04 00   mov32 cb, $00000004
1738   0F6E 00 00 
1739   0F70 FD 39         mov c, b
1740   0F72 9D            shl a, cl
1741   0F73 27            mov b, a
1742   0F74 E4            pop a
1743   0F75             ; --- END SHIFT
1744   0F75             ; --- START TERMS
1745   0F75 D7            push a
1746   0F76 11            mov a, b
1747   0F77 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1748   0F7A D7            push a
1749   0F7B DA            push d
1750   0F7C FD 2E 02 00   mov32 cb, $00000002
1750   0F80 00 00 
1751   0F82 E7            pop d
1752   0F83 5A            add d, b
1753   0F84 E4            pop a
1754   0F85 32            mov bl, [d]
1755   0F86 A7 00         mov bh, 0
1756   0F88 38 00 00      mov c, 0
1757   0F8B D7            push a
1758   0F8C 11            mov a, b
1759   0F8D FD 2E 3C 00   mov32 cb, $0000003c
1759   0F91 00 00 
1760   0F93 FD 92         and b, a ; &
1761   0F95 E4            pop a
1762   0F96             ; --- START SHIFT
1763   0F96 D7            push a
1764   0F97 11            mov a, b
1765   0F98 FD 2E 02 00   mov32 cb, $00000002
1765   0F9C 00 00 
1766   0F9E FD 39         mov c, b
1767   0FA0 A5            ashr a, cl
1768   0FA1 27            mov b, a
1769   0FA2 E4            pop a
1770   0FA3             ; --- END SHIFT
1771   0FA3 56            add b, a
1772   0FA4 E4            pop a
1773   0FA5             ; --- END TERMS
1774   0FA5 E7            pop d
1775   0FA6 FD 3E         mov [d], bl
1776   0FA8             ; for (k = 0; k < i - 1; k++) { 
1777   0FA8             _for20_init:
1778   0FA8 FA FB FF      lea d, [bp + -5] ; $k
1779   0FAB DA            push d
1780   0FAC FD 2E 00 00   mov32 cb, $00000000
1780   0FB0 00 00 
1781   0FB2 E7            pop d
1782   0FB3 FD 43         mov [d], b
1783   0FB5             _for20_cond:
1784   0FB5 FA FB FF      lea d, [bp + -5] ; $k
1785   0FB8 2A            mov b, [d]
1786   0FB9 38 00 00      mov c, 0
1787   0FBC             ; --- START RELATIONAL
1788   0FBC D7            push a
1789   0FBD 11            mov a, b
1790   0FBE FA FF FF      lea d, [bp + -1] ; $i
1791   0FC1 2A            mov b, [d]
1792   0FC2 38 00 00      mov c, 0
1793   0FC5             ; --- START TERMS
1794   0FC5 D7            push a
1795   0FC6 11            mov a, b
1796   0FC7 FD 2E 01 00   mov32 cb, $00000001
1796   0FCB 00 00 
1797   0FCD 60            sub a, b
1798   0FCE 27            mov b, a
1799   0FCF E4            pop a
1800   0FD0             ; --- END TERMS
1801   0FD0 B0            cmp a, b
1802   0FD1 FD 73         slt ; < (signed)
1803   0FD3 E4            pop a
1804   0FD4             ; --- END RELATIONAL
1805   0FD4 C0 00 00      cmp b, 0
1806   0FD7 C6 23 10      je _for20_exit
1807   0FDA             _for20_block:
1808   0FDA             ; output[j++] = output_buffer[k]; 
1809   0FDA FA 07 00      lea d, [bp + 7] ; $output
1810   0FDD FD 2A         mov d, [d]
1811   0FDF D7            push a
1812   0FE0 DA            push d
1813   0FE1 FA FD FF      lea d, [bp + -3] ; $j
1814   0FE4 2A            mov b, [d]
1815   0FE5 38 00 00      mov c, 0
1816   0FE8 11            mov a, b
1817   0FE9 FD 77         inc b
1818   0FEB FA FD FF      lea d, [bp + -3] ; $j
1819   0FEE FD 43         mov [d], b
1820   0FF0 27            mov b, a
1821   0FF1 E7            pop d
1822   0FF2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1823   0FF6 E4            pop a
1824   0FF7 DA            push d
1825   0FF8 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1826   0FFB D7            push a
1827   0FFC DA            push d
1828   0FFD FA FB FF      lea d, [bp + -5] ; $k
1829   1000 2A            mov b, [d]
1830   1001 38 00 00      mov c, 0
1831   1004 E7            pop d
1832   1005 5A            add d, b
1833   1006 E4            pop a
1834   1007 32            mov bl, [d]
1835   1008 A7 00         mov bh, 0
1836   100A 38 00 00      mov c, 0
1837   100D E7            pop d
1838   100E FD 3E         mov [d], bl
1839   1010             _for20_update:
1840   1010 FA FB FF      lea d, [bp + -5] ; $k
1841   1013 2A            mov b, [d]
1842   1014 38 00 00      mov c, 0
1843   1017 11            mov a, b
1844   1018 FD 77         inc b
1845   101A FA FB FF      lea d, [bp + -5] ; $k
1846   101D FD 43         mov [d], b
1847   101F 27            mov b, a
1848   1020 0A B5 0F      jmp _for20_cond
1849   1023             _for20_exit:
1850   1023 0A 26 10      jmp _if17_exit
1851   1026             _if17_exit:
1852   1026             ; output[j] = '\0'; 
1853   1026 FA 07 00      lea d, [bp + 7] ; $output
1854   1029 FD 2A         mov d, [d]
1855   102B D7            push a
1856   102C DA            push d
1857   102D FA FD FF      lea d, [bp + -3] ; $j
1858   1030 2A            mov b, [d]
1859   1031 38 00 00      mov c, 0
1860   1034 E7            pop d
1861   1035 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1862   1039 E4            pop a
1863   103A DA            push d
1864   103B FD 2E 00 00   mov32 cb, $00000000
1864   103F 00 00 
1865   1041 E7            pop d
1866   1042 FD 3E         mov [d], bl
1867   1044 F9            leave
1868   1045 09            ret
1869   1046             
1870   1046             printf:
1871   1046 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1872   1049             ; char *p, *format_p; 
1873   1049 52 02 00      sub sp, 2
1874   104C 52 02 00      sub sp, 2
1875   104F             ; format_p = format; 
1876   104F FA FD FF      lea d, [bp + -3] ; $format_p
1877   1052 DA            push d
1878   1053 FA 05 00      lea d, [bp + 5] ; $format
1879   1056 2A            mov b, [d]
1880   1057 38 00 00      mov c, 0
1881   105A E7            pop d
1882   105B FD 43         mov [d], b
1883   105D             ; p = &format + 2; 
1884   105D FA FF FF      lea d, [bp + -1] ; $p
1885   1060 DA            push d
1886   1061 FA 05 00      lea d, [bp + 5] ; $format
1887   1064 2D            mov b, d
1888   1065             ; --- START TERMS
1889   1065 D7            push a
1890   1066 11            mov a, b
1891   1067 FD 2E 02 00   mov32 cb, $00000002
1891   106B 00 00 
1892   106D 56            add b, a
1893   106E E4            pop a
1894   106F             ; --- END TERMS
1895   106F E7            pop d
1896   1070 FD 43         mov [d], b
1897   1072             ; for(;;){ 
1898   1072             _for21_init:
1899   1072             _for21_cond:
1900   1072             _for21_block:
1901   1072             ; if(!*format_p) break; 
1902   1072             _if22_cond:
1903   1072 FA FD FF      lea d, [bp + -3] ; $format_p
1904   1075 2A            mov b, [d]
1905   1076 38 00 00      mov c, 0
1906   1079 74            mov d, b
1907   107A 32            mov bl, [d]
1908   107B A7 00         mov bh, 0
1909   107D 38 00 00      mov c, 0
1910   1080 C0 00 00      cmp b, 0
1911   1083 FD 71         seq ; !
1912   1085 C0 00 00      cmp b, 0
1913   1088 C6 91 10      je _if22_else
1914   108B             _if22_TRUE:
1915   108B             ; break; 
1916   108B 0A 41 13      jmp _for21_exit ; for break
1917   108E 0A 3E 13      jmp _if22_exit
1918   1091             _if22_else:
1919   1091             ; if(*format_p == '%'){ 
1920   1091             _if23_cond:
1921   1091 FA FD FF      lea d, [bp + -3] ; $format_p
1922   1094 2A            mov b, [d]
1923   1095 38 00 00      mov c, 0
1924   1098 74            mov d, b
1925   1099 32            mov bl, [d]
1926   109A A7 00         mov bh, 0
1927   109C 38 00 00      mov c, 0
1928   109F             ; --- START RELATIONAL
1929   109F D7            push a
1930   10A0 11            mov a, b
1931   10A1 FD 2E 25 00   mov32 cb, $00000025
1931   10A5 00 00 
1932   10A7 B0            cmp a, b
1933   10A8 FD 71         seq ; ==
1934   10AA E4            pop a
1935   10AB             ; --- END RELATIONAL
1936   10AB C0 00 00      cmp b, 0
1937   10AE C6 19 13      je _if23_else
1938   10B1             _if23_TRUE:
1939   10B1             ; format_p++; 
1940   10B1 FA FD FF      lea d, [bp + -3] ; $format_p
1941   10B4 2A            mov b, [d]
1942   10B5 38 00 00      mov c, 0
1943   10B8 FD 77         inc b
1944   10BA FA FD FF      lea d, [bp + -3] ; $format_p
1945   10BD FD 43         mov [d], b
1946   10BF FD 7D         dec b
1947   10C1             ; switch(*format_p){ 
1948   10C1             _switch24_expr:
1949   10C1 FA FD FF      lea d, [bp + -3] ; $format_p
1950   10C4 2A            mov b, [d]
1951   10C5 38 00 00      mov c, 0
1952   10C8 74            mov d, b
1953   10C9 32            mov bl, [d]
1954   10CA A7 00         mov bh, 0
1955   10CC 38 00 00      mov c, 0
1956   10CF             _switch24_comparisons:
1957   10CF C1 6C         cmp bl, $6c
1958   10D1 C6 FD 10      je _switch24_case0
1959   10D4 C1 4C         cmp bl, $4c
1960   10D6 C6 FD 10      je _switch24_case1
1961   10D9 C1 64         cmp bl, $64
1962   10DB C6 0D 12      je _switch24_case2
1963   10DE C1 69         cmp bl, $69
1964   10E0 C6 0D 12      je _switch24_case3
1965   10E3 C1 75         cmp bl, $75
1966   10E5 C6 3D 12      je _switch24_case4
1967   10E8 C1 78         cmp bl, $78
1968   10EA C6 6D 12      je _switch24_case5
1969   10ED C1 63         cmp bl, $63
1970   10EF C6 9D 12      je _switch24_case6
1971   10F2 C1 73         cmp bl, $73
1972   10F4 C6 CD 12      je _switch24_case7
1973   10F7 0A FA 12      jmp _switch24_default
1974   10FA 0A 06 13      jmp _switch24_exit
1975   10FD             _switch24_case0:
1976   10FD             _switch24_case1:
1977   10FD             ; format_p++; 
1978   10FD FA FD FF      lea d, [bp + -3] ; $format_p
1979   1100 2A            mov b, [d]
1980   1101 38 00 00      mov c, 0
1981   1104 FD 77         inc b
1982   1106 FA FD FF      lea d, [bp + -3] ; $format_p
1983   1109 FD 43         mov [d], b
1984   110B FD 7D         dec b
1985   110D             ; if(*format_p == 'd' || *format_p == 'i') 
1986   110D             _if25_cond:
1987   110D FA FD FF      lea d, [bp + -3] ; $format_p
1988   1110 2A            mov b, [d]
1989   1111 38 00 00      mov c, 0
1990   1114 74            mov d, b
1991   1115 32            mov bl, [d]
1992   1116 A7 00         mov bh, 0
1993   1118 38 00 00      mov c, 0
1994   111B             ; --- START RELATIONAL
1995   111B D7            push a
1996   111C 11            mov a, b
1997   111D FD 2E 64 00   mov32 cb, $00000064
1997   1121 00 00 
1998   1123 B0            cmp a, b
1999   1124 FD 71         seq ; ==
2000   1126 E4            pop a
2001   1127             ; --- END RELATIONAL
2002   1127             ; --- START LOGICAL OR
2003   1127 D7            push a
2004   1128 11            mov a, b
2005   1129 FA FD FF      lea d, [bp + -3] ; $format_p
2006   112C 2A            mov b, [d]
2007   112D 38 00 00      mov c, 0
2008   1130 74            mov d, b
2009   1131 32            mov bl, [d]
2010   1132 A7 00         mov bh, 0
2011   1134 38 00 00      mov c, 0
2012   1137             ; --- START RELATIONAL
2013   1137 D7            push a
2014   1138 11            mov a, b
2015   1139 FD 2E 69 00   mov32 cb, $00000069
2015   113D 00 00 
2016   113F B0            cmp a, b
2017   1140 FD 71         seq ; ==
2018   1142 E4            pop a
2019   1143             ; --- END RELATIONAL
2020   1143 FD A8         sor a, b ; ||
2021   1145 E4            pop a
2022   1146             ; --- END LOGICAL OR
2023   1146 C0 00 00      cmp b, 0
2024   1149 C6 6A 11      je _if25_else
2025   114C             _if25_TRUE:
2026   114C             ; print_signed_long(*(long *)p); 
2027   114C             ; --- START FUNCTION CALL
2028   114C FA FF FF      lea d, [bp + -1] ; $p
2029   114F 2A            mov b, [d]
2030   1150 38 00 00      mov c, 0
2031   1153 74            mov d, b
2032   1154 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2033   1157 FD 39         mov c, b ; And place it into C
2034   1159 2A            mov b, [d] ; Lower Word in B
2035   115A 12            mov a, c
2036   115B FD AA         swp a
2037   115D D7            push a
2038   115E FD AB         swp b
2039   1160 D8            push b
2040   1161 07 43 13      call print_signed_long
2041   1164 51 04 00      add sp, 4
2042   1167             ; --- END FUNCTION CALL
2043   1167 0A F2 11      jmp _if25_exit
2044   116A             _if25_else:
2045   116A             ; if(*format_p == 'u') 
2046   116A             _if26_cond:
2047   116A FA FD FF      lea d, [bp + -3] ; $format_p
2048   116D 2A            mov b, [d]
2049   116E 38 00 00      mov c, 0
2050   1171 74            mov d, b
2051   1172 32            mov bl, [d]
2052   1173 A7 00         mov bh, 0
2053   1175 38 00 00      mov c, 0
2054   1178             ; --- START RELATIONAL
2055   1178 D7            push a
2056   1179 11            mov a, b
2057   117A FD 2E 75 00   mov32 cb, $00000075
2057   117E 00 00 
2058   1180 B0            cmp a, b
2059   1181 FD 71         seq ; ==
2060   1183 E4            pop a
2061   1184             ; --- END RELATIONAL
2062   1184 C0 00 00      cmp b, 0
2063   1187 C6 A8 11      je _if26_else
2064   118A             _if26_TRUE:
2065   118A             ; print_unsigned_long(*(unsigned long *)p); 
2066   118A             ; --- START FUNCTION CALL
2067   118A FA FF FF      lea d, [bp + -1] ; $p
2068   118D 2A            mov b, [d]
2069   118E 38 00 00      mov c, 0
2070   1191 74            mov d, b
2071   1192 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2072   1195 FD 39         mov c, b ; And place it into C
2073   1197 2A            mov b, [d] ; Lower Word in B
2074   1198 12            mov a, c
2075   1199 FD AA         swp a
2076   119B D7            push a
2077   119C FD AB         swp b
2078   119E D8            push b
2079   119F 07 D6 14      call print_unsigned_long
2080   11A2 51 04 00      add sp, 4
2081   11A5             ; --- END FUNCTION CALL
2082   11A5 0A F2 11      jmp _if26_exit
2083   11A8             _if26_else:
2084   11A8             ; if(*format_p == 'x') 
2085   11A8             _if27_cond:
2086   11A8 FA FD FF      lea d, [bp + -3] ; $format_p
2087   11AB 2A            mov b, [d]
2088   11AC 38 00 00      mov c, 0
2089   11AF 74            mov d, b
2090   11B0 32            mov bl, [d]
2091   11B1 A7 00         mov bh, 0
2092   11B3 38 00 00      mov c, 0
2093   11B6             ; --- START RELATIONAL
2094   11B6 D7            push a
2095   11B7 11            mov a, b
2096   11B8 FD 2E 78 00   mov32 cb, $00000078
2096   11BC 00 00 
2097   11BE B0            cmp a, b
2098   11BF FD 71         seq ; ==
2099   11C1 E4            pop a
2100   11C2             ; --- END RELATIONAL
2101   11C2 C0 00 00      cmp b, 0
2102   11C5 C6 E6 11      je _if27_else
2103   11C8             _if27_TRUE:
2104   11C8             ; printx32(*(long int *)p); 
2105   11C8             ; --- START FUNCTION CALL
2106   11C8 FA FF FF      lea d, [bp + -1] ; $p
2107   11CB 2A            mov b, [d]
2108   11CC 38 00 00      mov c, 0
2109   11CF 74            mov d, b
2110   11D0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2111   11D3 FD 39         mov c, b ; And place it into C
2112   11D5 2A            mov b, [d] ; Lower Word in B
2113   11D6 12            mov a, c
2114   11D7 FD AA         swp a
2115   11D9 D7            push a
2116   11DA FD AB         swp b
2117   11DC D8            push b
2118   11DD 07 0A 16      call printx32
2119   11E0 51 04 00      add sp, 4
2120   11E3             ; --- END FUNCTION CALL
2121   11E3 0A F2 11      jmp _if27_exit
2122   11E6             _if27_else:
2123   11E6             ; err("Unexpected format in printf."); 
2124   11E6             ; --- START FUNCTION CALL
2125   11E6 26 04 1B      mov b, _s3 ; "Unexpected format in printf."
2126   11E9 FD AB         swp b
2127   11EB D8            push b
2128   11EC 07 6A 16      call err
2129   11EF 51 02 00      add sp, 2
2130   11F2             ; --- END FUNCTION CALL
2131   11F2             _if27_exit:
2132   11F2             _if26_exit:
2133   11F2             _if25_exit:
2134   11F2             ; p = p + 4; 
2135   11F2 FA FF FF      lea d, [bp + -1] ; $p
2136   11F5 DA            push d
2137   11F6 FA FF FF      lea d, [bp + -1] ; $p
2138   11F9 2A            mov b, [d]
2139   11FA 38 00 00      mov c, 0
2140   11FD             ; --- START TERMS
2141   11FD D7            push a
2142   11FE 11            mov a, b
2143   11FF FD 2E 04 00   mov32 cb, $00000004
2143   1203 00 00 
2144   1205 56            add b, a
2145   1206 E4            pop a
2146   1207             ; --- END TERMS
2147   1207 E7            pop d
2148   1208 FD 43         mov [d], b
2149   120A             ; break; 
2150   120A 0A 06 13      jmp _switch24_exit ; case break
2151   120D             _switch24_case2:
2152   120D             _switch24_case3:
2153   120D             ; print_signed(*(int*)p); 
2154   120D             ; --- START FUNCTION CALL
2155   120D FA FF FF      lea d, [bp + -1] ; $p
2156   1210 2A            mov b, [d]
2157   1211 38 00 00      mov c, 0
2158   1214 74            mov d, b
2159   1215 2A            mov b, [d]
2160   1216 38 00 00      mov c, 0
2161   1219 FD AB         swp b
2162   121B D8            push b
2163   121C 07 98 16      call print_signed
2164   121F 51 02 00      add sp, 2
2165   1222             ; --- END FUNCTION CALL
2166   1222             ; p = p + 2; 
2167   1222 FA FF FF      lea d, [bp + -1] ; $p
2168   1225 DA            push d
2169   1226 FA FF FF      lea d, [bp + -1] ; $p
2170   1229 2A            mov b, [d]
2171   122A 38 00 00      mov c, 0
2172   122D             ; --- START TERMS
2173   122D D7            push a
2174   122E 11            mov a, b
2175   122F FD 2E 02 00   mov32 cb, $00000002
2175   1233 00 00 
2176   1235 56            add b, a
2177   1236 E4            pop a
2178   1237             ; --- END TERMS
2179   1237 E7            pop d
2180   1238 FD 43         mov [d], b
2181   123A             ; break; 
2182   123A 0A 06 13      jmp _switch24_exit ; case break
2183   123D             _switch24_case4:
2184   123D             ; print_unsigned(*(unsigned int*)p); 
2185   123D             ; --- START FUNCTION CALL
2186   123D FA FF FF      lea d, [bp + -1] ; $p
2187   1240 2A            mov b, [d]
2188   1241 38 00 00      mov c, 0
2189   1244 74            mov d, b
2190   1245 2A            mov b, [d]
2191   1246 38 00 00      mov c, 0
2192   1249 FD AB         swp b
2193   124B D8            push b
2194   124C 07 E9 17      call print_unsigned
2195   124F 51 02 00      add sp, 2
2196   1252             ; --- END FUNCTION CALL
2197   1252             ; p = p + 2; 
2198   1252 FA FF FF      lea d, [bp + -1] ; $p
2199   1255 DA            push d
2200   1256 FA FF FF      lea d, [bp + -1] ; $p
2201   1259 2A            mov b, [d]
2202   125A 38 00 00      mov c, 0
2203   125D             ; --- START TERMS
2204   125D D7            push a
2205   125E 11            mov a, b
2206   125F FD 2E 02 00   mov32 cb, $00000002
2206   1263 00 00 
2207   1265 56            add b, a
2208   1266 E4            pop a
2209   1267             ; --- END TERMS
2210   1267 E7            pop d
2211   1268 FD 43         mov [d], b
2212   126A             ; break; 
2213   126A 0A 06 13      jmp _switch24_exit ; case break
2214   126D             _switch24_case5:
2215   126D             ; printx16(*(int*)p); 
2216   126D             ; --- START FUNCTION CALL
2217   126D FA FF FF      lea d, [bp + -1] ; $p
2218   1270 2A            mov b, [d]
2219   1271 38 00 00      mov c, 0
2220   1274 74            mov d, b
2221   1275 2A            mov b, [d]
2222   1276 38 00 00      mov c, 0
2223   1279 FD AB         swp b
2224   127B D8            push b
2225   127C 07 01 19      call printx16
2226   127F 51 02 00      add sp, 2
2227   1282             ; --- END FUNCTION CALL
2228   1282             ; p = p + 2; 
2229   1282 FA FF FF      lea d, [bp + -1] ; $p
2230   1285 DA            push d
2231   1286 FA FF FF      lea d, [bp + -1] ; $p
2232   1289 2A            mov b, [d]
2233   128A 38 00 00      mov c, 0
2234   128D             ; --- START TERMS
2235   128D D7            push a
2236   128E 11            mov a, b
2237   128F FD 2E 02 00   mov32 cb, $00000002
2237   1293 00 00 
2238   1295 56            add b, a
2239   1296 E4            pop a
2240   1297             ; --- END TERMS
2241   1297 E7            pop d
2242   1298 FD 43         mov [d], b
2243   129A             ; break; 
2244   129A 0A 06 13      jmp _switch24_exit ; case break
2245   129D             _switch24_case6:
2246   129D             ; putchar(*(char*)p); 
2247   129D             ; --- START FUNCTION CALL
2248   129D FA FF FF      lea d, [bp + -1] ; $p
2249   12A0 2A            mov b, [d]
2250   12A1 38 00 00      mov c, 0
2251   12A4 74            mov d, b
2252   12A5 32            mov bl, [d]
2253   12A6 A7 00         mov bh, 0
2254   12A8 38 00 00      mov c, 0
2255   12AB DD            push bl
2256   12AC 07 C8 14      call putchar
2257   12AF 51 01 00      add sp, 1
2258   12B2             ; --- END FUNCTION CALL
2259   12B2             ; p = p + 1; 
2260   12B2 FA FF FF      lea d, [bp + -1] ; $p
2261   12B5 DA            push d
2262   12B6 FA FF FF      lea d, [bp + -1] ; $p
2263   12B9 2A            mov b, [d]
2264   12BA 38 00 00      mov c, 0
2265   12BD             ; --- START TERMS
2266   12BD D7            push a
2267   12BE 11            mov a, b
2268   12BF FD 2E 01 00   mov32 cb, $00000001
2268   12C3 00 00 
2269   12C5 56            add b, a
2270   12C6 E4            pop a
2271   12C7             ; --- END TERMS
2272   12C7 E7            pop d
2273   12C8 FD 43         mov [d], b
2274   12CA             ; break; 
2275   12CA 0A 06 13      jmp _switch24_exit ; case break
2276   12CD             _switch24_case7:
2277   12CD             ; print(*(char**)p); 
2278   12CD             ; --- START FUNCTION CALL
2279   12CD FA FF FF      lea d, [bp + -1] ; $p
2280   12D0 2A            mov b, [d]
2281   12D1 38 00 00      mov c, 0
2282   12D4 74            mov d, b
2283   12D5 2A            mov b, [d]
2284   12D6 FD AB         swp b
2285   12D8 D8            push b
2286   12D9 07 7F 16      call print
2287   12DC 51 02 00      add sp, 2
2288   12DF             ; --- END FUNCTION CALL
2289   12DF             ; p = p + 2; 
2290   12DF FA FF FF      lea d, [bp + -1] ; $p
2291   12E2 DA            push d
2292   12E3 FA FF FF      lea d, [bp + -1] ; $p
2293   12E6 2A            mov b, [d]
2294   12E7 38 00 00      mov c, 0
2295   12EA             ; --- START TERMS
2296   12EA D7            push a
2297   12EB 11            mov a, b
2298   12EC FD 2E 02 00   mov32 cb, $00000002
2298   12F0 00 00 
2299   12F2 56            add b, a
2300   12F3 E4            pop a
2301   12F4             ; --- END TERMS
2302   12F4 E7            pop d
2303   12F5 FD 43         mov [d], b
2304   12F7             ; break; 
2305   12F7 0A 06 13      jmp _switch24_exit ; case break
2306   12FA             _switch24_default:
2307   12FA             ; print("Error: Unknown argument type.\n"); 
2308   12FA             ; --- START FUNCTION CALL
2309   12FA 26 21 1B      mov b, _s4 ; "Error: Unknown argument type.\n"
2310   12FD FD AB         swp b
2311   12FF D8            push b
2312   1300 07 7F 16      call print
2313   1303 51 02 00      add sp, 2
2314   1306             ; --- END FUNCTION CALL
2315   1306             _switch24_exit:
2316   1306             ; format_p++; 
2317   1306 FA FD FF      lea d, [bp + -3] ; $format_p
2318   1309 2A            mov b, [d]
2319   130A 38 00 00      mov c, 0
2320   130D FD 77         inc b
2321   130F FA FD FF      lea d, [bp + -3] ; $format_p
2322   1312 FD 43         mov [d], b
2323   1314 FD 7D         dec b
2324   1316 0A 3E 13      jmp _if23_exit
2325   1319             _if23_else:
2326   1319             ; putchar(*format_p); 
2327   1319             ; --- START FUNCTION CALL
2328   1319 FA FD FF      lea d, [bp + -3] ; $format_p
2329   131C 2A            mov b, [d]
2330   131D 38 00 00      mov c, 0
2331   1320 74            mov d, b
2332   1321 32            mov bl, [d]
2333   1322 A7 00         mov bh, 0
2334   1324 38 00 00      mov c, 0
2335   1327 DD            push bl
2336   1328 07 C8 14      call putchar
2337   132B 51 01 00      add sp, 1
2338   132E             ; --- END FUNCTION CALL
2339   132E             ; format_p++; 
2340   132E FA FD FF      lea d, [bp + -3] ; $format_p
2341   1331 2A            mov b, [d]
2342   1332 38 00 00      mov c, 0
2343   1335 FD 77         inc b
2344   1337 FA FD FF      lea d, [bp + -3] ; $format_p
2345   133A FD 43         mov [d], b
2346   133C FD 7D         dec b
2347   133E             _if23_exit:
2348   133E             _if22_exit:
2349   133E             _for21_update:
2350   133E 0A 72 10      jmp _for21_cond
2351   1341             _for21_exit:
2352   1341 F9            leave
2353   1342 09            ret
2354   1343             
2355   1343             print_signed_long:
2356   1343 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2357   1346             ; char digits[10]; 
2358   1346 52 0A 00      sub sp, 10
2359   1349             ; int i = 0; 
2360   1349 52 02 00      sub sp, 2
2361   134C             ; --- START LOCAL VAR INITIALIZATION
2362   134C FA F5 FF      lea d, [bp + -11] ; $i
2363   134F DA            push d
2364   1350 FD 2E 00 00   mov32 cb, $00000000
2364   1354 00 00 
2365   1356 E7            pop d
2366   1357 FD 43         mov [d], b
2367   1359             ; --- END LOCAL VAR INITIALIZATION
2368   1359             ; if (num < 0) { 
2369   1359             _if28_cond:
2370   1359 FA 05 00      lea d, [bp + 5] ; $num
2371   135C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2372   135F FD 39         mov c, b ; And place it into C
2373   1361 2A            mov b, [d] ; Lower Word in B
2374   1362             ; --- START RELATIONAL
2375   1362 D7            push a
2376   1363 FD D8         push g
2377   1365 11            mov a, b
2378   1366 FD 7A         mov g, c
2379   1368 FD 2E 00 00   mov32 cb, $00000000
2379   136C 00 00 
2380   136E FD AF         cmp32 ga, cb
2381   1370 FD 73         slt ; <
2382   1372 FD F1         pop g
2383   1374 E4            pop a
2384   1375             ; --- END RELATIONAL
2385   1375 C0 00 00      cmp b, 0
2386   1378 C6 AA 13      je _if28_else
2387   137B             _if28_TRUE:
2388   137B             ; putchar('-'); 
2389   137B             ; --- START FUNCTION CALL
2390   137B FD 2E 2D 00   mov32 cb, $0000002d
2390   137F 00 00 
2391   1381 DD            push bl
2392   1382 07 C8 14      call putchar
2393   1385 51 01 00      add sp, 1
2394   1388             ; --- END FUNCTION CALL
2395   1388             ; num = -num; 
2396   1388 FA 05 00      lea d, [bp + 5] ; $num
2397   138B DA            push d
2398   138C FA 05 00      lea d, [bp + 5] ; $num
2399   138F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2400   1392 FD 39         mov c, b ; And place it into C
2401   1394 2A            mov b, [d] ; Lower Word in B
2402   1395 12            mov a, c
2403   1396 95            not a
2404   1397 97            not b
2405   1398 55 01 00      add b, 1
2406   139B 5B 00 00      adc a, 0
2407   139E 39            mov c, a
2408   139F E7            pop d
2409   13A0 FD 43         mov [d], b
2410   13A2 28            mov b, c
2411   13A3 FD 44 02 00   mov [d + 2], b
2412   13A7 0A DE 13      jmp _if28_exit
2413   13AA             _if28_else:
2414   13AA             ; if (num == 0) { 
2415   13AA             _if29_cond:
2416   13AA FA 05 00      lea d, [bp + 5] ; $num
2417   13AD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2418   13B0 FD 39         mov c, b ; And place it into C
2419   13B2 2A            mov b, [d] ; Lower Word in B
2420   13B3             ; --- START RELATIONAL
2421   13B3 D7            push a
2422   13B4 FD D8         push g
2423   13B6 11            mov a, b
2424   13B7 FD 7A         mov g, c
2425   13B9 FD 2E 00 00   mov32 cb, $00000000
2425   13BD 00 00 
2426   13BF FD AF         cmp32 ga, cb
2427   13C1 FD 71         seq ; ==
2428   13C3 FD F1         pop g
2429   13C5 E4            pop a
2430   13C6             ; --- END RELATIONAL
2431   13C6 C0 00 00      cmp b, 0
2432   13C9 C6 DE 13      je _if29_exit
2433   13CC             _if29_TRUE:
2434   13CC             ; putchar('0'); 
2435   13CC             ; --- START FUNCTION CALL
2436   13CC FD 2E 30 00   mov32 cb, $00000030
2436   13D0 00 00 
2437   13D2 DD            push bl
2438   13D3 07 C8 14      call putchar
2439   13D6 51 01 00      add sp, 1
2440   13D9             ; --- END FUNCTION CALL
2441   13D9             ; return; 
2442   13D9 F9            leave
2443   13DA 09            ret
2444   13DB 0A DE 13      jmp _if29_exit
2445   13DE             _if29_exit:
2446   13DE             _if28_exit:
2447   13DE             ; while (num > 0) { 
2448   13DE             _while30_cond:
2449   13DE FA 05 00      lea d, [bp + 5] ; $num
2450   13E1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2451   13E4 FD 39         mov c, b ; And place it into C
2452   13E6 2A            mov b, [d] ; Lower Word in B
2453   13E7             ; --- START RELATIONAL
2454   13E7 D7            push a
2455   13E8 FD D8         push g
2456   13EA 11            mov a, b
2457   13EB FD 7A         mov g, c
2458   13ED FD 2E 00 00   mov32 cb, $00000000
2458   13F1 00 00 
2459   13F3 FD AF         cmp32 ga, cb
2460   13F5 FD 7F         sgt
2461   13F7 FD F1         pop g
2462   13F9 E4            pop a
2463   13FA             ; --- END RELATIONAL
2464   13FA C0 00 00      cmp b, 0
2465   13FD C6 7E 14      je _while30_exit
2466   1400             _while30_block:
2467   1400             ; digits[i] = '0' + (num % 10); 
2468   1400 FA F7 FF      lea d, [bp + -9] ; $digits
2469   1403 D7            push a
2470   1404 DA            push d
2471   1405 FA F5 FF      lea d, [bp + -11] ; $i
2472   1408 2A            mov b, [d]
2473   1409 38 00 00      mov c, 0
2474   140C E7            pop d
2475   140D 5A            add d, b
2476   140E E4            pop a
2477   140F DA            push d
2478   1410 FD 2E 30 00   mov32 cb, $00000030
2478   1414 00 00 
2479   1416             ; --- START TERMS
2480   1416 D7            push a
2481   1417 11            mov a, b
2482   1418 FA 05 00      lea d, [bp + 5] ; $num
2483   141B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2484   141E FD 39         mov c, b ; And place it into C
2485   1420 2A            mov b, [d] ; Lower Word in B
2486   1421             ; --- START FACTORS
2487   1421 D7            push a
2488   1422 FD D8         push g
2489   1424 11            mov a, b
2490   1425 FD 7A         mov g, c
2491   1427 FD 2E 0A 00   mov32 cb, $0000000a
2491   142B 00 00 
2492   142D FD D8         push g ; save 'g' as the div instruction uses it
2493   142F AE            div a, b ; %, a: quotient, b: remainder
2494   1430 11            mov a, b
2495   1431 FD F1         pop g
2496   1433 FD 38         mov c, g
2497   1435 27            mov b, a
2498   1436 FD F1         pop g
2499   1438 E4            pop a
2500   1439             ; --- END FACTORS
2501   1439 FD 15         add32 cb, ga
2502   143B E4            pop a
2503   143C             ; --- END TERMS
2504   143C E7            pop d
2505   143D FD 3E         mov [d], bl
2506   143F             ; num = num / 10; 
2507   143F FA 05 00      lea d, [bp + 5] ; $num
2508   1442 DA            push d
2509   1443 FA 05 00      lea d, [bp + 5] ; $num
2510   1446 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2511   1449 FD 39         mov c, b ; And place it into C
2512   144B 2A            mov b, [d] ; Lower Word in B
2513   144C             ; --- START FACTORS
2514   144C D7            push a
2515   144D FD D8         push g
2516   144F 11            mov a, b
2517   1450 FD 7A         mov g, c
2518   1452 FD 2E 0A 00   mov32 cb, $0000000a
2518   1456 00 00 
2519   1458 FD D8         push g ; save 'g' as the div instruction uses it
2520   145A AE            div a, b ; /, a: quotient, b: remainder
2521   145B FD F1         pop g
2522   145D FD 38         mov c, g
2523   145F 27            mov b, a
2524   1460 FD F1         pop g
2525   1462 E4            pop a
2526   1463             ; --- END FACTORS
2527   1463 E7            pop d
2528   1464 FD 43         mov [d], b
2529   1466 28            mov b, c
2530   1467 FD 44 02 00   mov [d + 2], b
2531   146B             ; i++; 
2532   146B FA F5 FF      lea d, [bp + -11] ; $i
2533   146E 2A            mov b, [d]
2534   146F 38 00 00      mov c, 0
2535   1472 11            mov a, b
2536   1473 FD 77         inc b
2537   1475 FA F5 FF      lea d, [bp + -11] ; $i
2538   1478 FD 43         mov [d], b
2539   147A 27            mov b, a
2540   147B 0A DE 13      jmp _while30_cond
2541   147E             _while30_exit:
2542   147E             ; while (i > 0) { 
2543   147E             _while37_cond:
2544   147E FA F5 FF      lea d, [bp + -11] ; $i
2545   1481 2A            mov b, [d]
2546   1482 38 00 00      mov c, 0
2547   1485             ; --- START RELATIONAL
2548   1485 D7            push a
2549   1486 11            mov a, b
2550   1487 FD 2E 00 00   mov32 cb, $00000000
2550   148B 00 00 
2551   148D B0            cmp a, b
2552   148E FD 7F         sgt ; >
2553   1490 E4            pop a
2554   1491             ; --- END RELATIONAL
2555   1491 C0 00 00      cmp b, 0
2556   1494 C6 C6 14      je _while37_exit
2557   1497             _while37_block:
2558   1497             ; i--; 
2559   1497 FA F5 FF      lea d, [bp + -11] ; $i
2560   149A 2A            mov b, [d]
2561   149B 38 00 00      mov c, 0
2562   149E 11            mov a, b
2563   149F FD 7D         dec b
2564   14A1 FA F5 FF      lea d, [bp + -11] ; $i
2565   14A4 FD 43         mov [d], b
2566   14A6 27            mov b, a
2567   14A7             ; putchar(digits[i]); 
2568   14A7             ; --- START FUNCTION CALL
2569   14A7 FA F7 FF      lea d, [bp + -9] ; $digits
2570   14AA D7            push a
2571   14AB DA            push d
2572   14AC FA F5 FF      lea d, [bp + -11] ; $i
2573   14AF 2A            mov b, [d]
2574   14B0 38 00 00      mov c, 0
2575   14B3 E7            pop d
2576   14B4 5A            add d, b
2577   14B5 E4            pop a
2578   14B6 32            mov bl, [d]
2579   14B7 A7 00         mov bh, 0
2580   14B9 38 00 00      mov c, 0
2581   14BC DD            push bl
2582   14BD 07 C8 14      call putchar
2583   14C0 51 01 00      add sp, 1
2584   14C3             ; --- END FUNCTION CALL
2585   14C3 0A 7E 14      jmp _while37_cond
2586   14C6             _while37_exit:
2587   14C6 F9            leave
2588   14C7 09            ret
2589   14C8             
2590   14C8             putchar:
2591   14C8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2592   14CB             ; --- BEGIN INLINE ASM SEGMENT
2593   14CB FA 05 00      lea d, [bp + 5] ; $c
2594   14CE 1E            mov al, [d]
2595   14CF 23            mov ah, al
2596   14D0 19 00         mov al, 0
2597   14D2 05 03         syscall sys_io      ; char in AH
2598   14D4             ; --- END INLINE ASM SEGMENT
2599   14D4 F9            leave
2600   14D5 09            ret
2601   14D6             
2602   14D6             print_unsigned_long:
2603   14D6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2604   14D9             ; char digits[10]; 
2605   14D9 52 0A 00      sub sp, 10
2606   14DC             ; int i; 
2607   14DC 52 02 00      sub sp, 2
2608   14DF             ; i = 0; 
2609   14DF FA F5 FF      lea d, [bp + -11] ; $i
2610   14E2 DA            push d
2611   14E3 FD 2E 00 00   mov32 cb, $00000000
2611   14E7 00 00 
2612   14E9 E7            pop d
2613   14EA FD 43         mov [d], b
2614   14EC             ; if(num == 0){ 
2615   14EC             _if38_cond:
2616   14EC FA 05 00      lea d, [bp + 5] ; $num
2617   14EF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2618   14F2 FD 39         mov c, b ; And place it into C
2619   14F4 2A            mov b, [d] ; Lower Word in B
2620   14F5             ; --- START RELATIONAL
2621   14F5 D7            push a
2622   14F6 FD D8         push g
2623   14F8 11            mov a, b
2624   14F9 FD 7A         mov g, c
2625   14FB FD 2E 00 00   mov32 cb, $00000000
2625   14FF 00 00 
2626   1501 FD AF         cmp32 ga, cb
2627   1503 FD 71         seq ; ==
2628   1505 FD F1         pop g
2629   1507 E4            pop a
2630   1508             ; --- END RELATIONAL
2631   1508 C0 00 00      cmp b, 0
2632   150B C6 20 15      je _if38_exit
2633   150E             _if38_TRUE:
2634   150E             ; putchar('0'); 
2635   150E             ; --- START FUNCTION CALL
2636   150E FD 2E 30 00   mov32 cb, $00000030
2636   1512 00 00 
2637   1514 DD            push bl
2638   1515 07 C8 14      call putchar
2639   1518 51 01 00      add sp, 1
2640   151B             ; --- END FUNCTION CALL
2641   151B             ; return; 
2642   151B F9            leave
2643   151C 09            ret
2644   151D 0A 20 15      jmp _if38_exit
2645   1520             _if38_exit:
2646   1520             ; while (num > 0) { 
2647   1520             _while39_cond:
2648   1520 FA 05 00      lea d, [bp + 5] ; $num
2649   1523 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2650   1526 FD 39         mov c, b ; And place it into C
2651   1528 2A            mov b, [d] ; Lower Word in B
2652   1529             ; --- START RELATIONAL
2653   1529 D7            push a
2654   152A FD D8         push g
2655   152C 11            mov a, b
2656   152D FD 7A         mov g, c
2657   152F FD 2E 00 00   mov32 cb, $00000000
2657   1533 00 00 
2658   1535 FD AF         cmp32 ga, cb
2659   1537 FD 81         sgu
2660   1539 FD F1         pop g
2661   153B E4            pop a
2662   153C             ; --- END RELATIONAL
2663   153C C0 00 00      cmp b, 0
2664   153F C6 C0 15      je _while39_exit
2665   1542             _while39_block:
2666   1542             ; digits[i] = '0' + (num % 10); 
2667   1542 FA F7 FF      lea d, [bp + -9] ; $digits
2668   1545 D7            push a
2669   1546 DA            push d
2670   1547 FA F5 FF      lea d, [bp + -11] ; $i
2671   154A 2A            mov b, [d]
2672   154B 38 00 00      mov c, 0
2673   154E E7            pop d
2674   154F 5A            add d, b
2675   1550 E4            pop a
2676   1551 DA            push d
2677   1552 FD 2E 30 00   mov32 cb, $00000030
2677   1556 00 00 
2678   1558             ; --- START TERMS
2679   1558 D7            push a
2680   1559 11            mov a, b
2681   155A FA 05 00      lea d, [bp + 5] ; $num
2682   155D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2683   1560 FD 39         mov c, b ; And place it into C
2684   1562 2A            mov b, [d] ; Lower Word in B
2685   1563             ; --- START FACTORS
2686   1563 D7            push a
2687   1564 FD D8         push g
2688   1566 11            mov a, b
2689   1567 FD 7A         mov g, c
2690   1569 FD 2E 0A 00   mov32 cb, $0000000a
2690   156D 00 00 
2691   156F FD D8         push g ; save 'g' as the div instruction uses it
2692   1571 AE            div a, b ; %, a: quotient, b: remainder
2693   1572 11            mov a, b
2694   1573 FD F1         pop g
2695   1575 FD 38         mov c, g
2696   1577 27            mov b, a
2697   1578 FD F1         pop g
2698   157A E4            pop a
2699   157B             ; --- END FACTORS
2700   157B FD 15         add32 cb, ga
2701   157D E4            pop a
2702   157E             ; --- END TERMS
2703   157E E7            pop d
2704   157F FD 3E         mov [d], bl
2705   1581             ; num = num / 10; 
2706   1581 FA 05 00      lea d, [bp + 5] ; $num
2707   1584 DA            push d
2708   1585 FA 05 00      lea d, [bp + 5] ; $num
2709   1588 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2710   158B FD 39         mov c, b ; And place it into C
2711   158D 2A            mov b, [d] ; Lower Word in B
2712   158E             ; --- START FACTORS
2713   158E D7            push a
2714   158F FD D8         push g
2715   1591 11            mov a, b
2716   1592 FD 7A         mov g, c
2717   1594 FD 2E 0A 00   mov32 cb, $0000000a
2717   1598 00 00 
2718   159A FD D8         push g ; save 'g' as the div instruction uses it
2719   159C AE            div a, b ; /, a: quotient, b: remainder
2720   159D FD F1         pop g
2721   159F FD 38         mov c, g
2722   15A1 27            mov b, a
2723   15A2 FD F1         pop g
2724   15A4 E4            pop a
2725   15A5             ; --- END FACTORS
2726   15A5 E7            pop d
2727   15A6 FD 43         mov [d], b
2728   15A8 28            mov b, c
2729   15A9 FD 44 02 00   mov [d + 2], b
2730   15AD             ; i++; 
2731   15AD FA F5 FF      lea d, [bp + -11] ; $i
2732   15B0 2A            mov b, [d]
2733   15B1 38 00 00      mov c, 0
2734   15B4 11            mov a, b
2735   15B5 FD 77         inc b
2736   15B7 FA F5 FF      lea d, [bp + -11] ; $i
2737   15BA FD 43         mov [d], b
2738   15BC 27            mov b, a
2739   15BD 0A 20 15      jmp _while39_cond
2740   15C0             _while39_exit:
2741   15C0             ; while (i > 0) { 
2742   15C0             _while46_cond:
2743   15C0 FA F5 FF      lea d, [bp + -11] ; $i
2744   15C3 2A            mov b, [d]
2745   15C4 38 00 00      mov c, 0
2746   15C7             ; --- START RELATIONAL
2747   15C7 D7            push a
2748   15C8 11            mov a, b
2749   15C9 FD 2E 00 00   mov32 cb, $00000000
2749   15CD 00 00 
2750   15CF B0            cmp a, b
2751   15D0 FD 7F         sgt ; >
2752   15D2 E4            pop a
2753   15D3             ; --- END RELATIONAL
2754   15D3 C0 00 00      cmp b, 0
2755   15D6 C6 08 16      je _while46_exit
2756   15D9             _while46_block:
2757   15D9             ; i--; 
2758   15D9 FA F5 FF      lea d, [bp + -11] ; $i
2759   15DC 2A            mov b, [d]
2760   15DD 38 00 00      mov c, 0
2761   15E0 11            mov a, b
2762   15E1 FD 7D         dec b
2763   15E3 FA F5 FF      lea d, [bp + -11] ; $i
2764   15E6 FD 43         mov [d], b
2765   15E8 27            mov b, a
2766   15E9             ; putchar(digits[i]); 
2767   15E9             ; --- START FUNCTION CALL
2768   15E9 FA F7 FF      lea d, [bp + -9] ; $digits
2769   15EC D7            push a
2770   15ED DA            push d
2771   15EE FA F5 FF      lea d, [bp + -11] ; $i
2772   15F1 2A            mov b, [d]
2773   15F2 38 00 00      mov c, 0
2774   15F5 E7            pop d
2775   15F6 5A            add d, b
2776   15F7 E4            pop a
2777   15F8 32            mov bl, [d]
2778   15F9 A7 00         mov bh, 0
2779   15FB 38 00 00      mov c, 0
2780   15FE DD            push bl
2781   15FF 07 C8 14      call putchar
2782   1602 51 01 00      add sp, 1
2783   1605             ; --- END FUNCTION CALL
2784   1605 0A C0 15      jmp _while46_cond
2785   1608             _while46_exit:
2786   1608 F9            leave
2787   1609 09            ret
2788   160A             
2789   160A             printx32:
2790   160A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2791   160D             ; --- BEGIN INLINE ASM SEGMENT
2792   160D FA 05 00      lea d, [bp + 5] ; $hex
2793   1610 2B 02 00      mov b, [d+2]
2794   1613 07 1C 16      call print_u16x_printx32
2795   1616 2A            mov b, [d]
2796   1617 07 1C 16      call print_u16x_printx32
2797   161A             ; --- END INLINE ASM SEGMENT
2798   161A             ; return; 
2799   161A F9            leave
2800   161B 09            ret
2801   161C             ; --- BEGIN INLINE ASM SEGMENT
2802   161C             print_u16x_printx32:
2803   161C D7            push a
2804   161D D8            push b
2805   161E DD            push bl
2806   161F 30            mov bl, bh
2807   1620 07 3E 16      call _itoa_printx32        ; convert bh to char in A
2808   1623 2F            mov bl, al        ; save al
2809   1624 19 00         mov al, 0
2810   1626 05 03         syscall sys_io        ; display AH
2811   1628 24            mov ah, bl        ; retrieve al
2812   1629 19 00         mov al, 0
2813   162B 05 03         syscall sys_io        ; display AL
2814   162D EA            pop bl
2815   162E 07 3E 16      call _itoa_printx32        ; convert bh to char in A
2816   1631 2F            mov bl, al        ; save al
2817   1632 19 00         mov al, 0
2818   1634 05 03         syscall sys_io        ; display AH
2819   1636 24            mov ah, bl        ; retrieve al
2820   1637 19 00         mov al, 0
2821   1639 05 03         syscall sys_io        ; display AL
2822   163B E5            pop b
2823   163C E4            pop a
2824   163D 09            ret
2825   163E             _itoa_printx32:
2826   163E DA            push d
2827   163F D8            push b
2828   1640 A7 00         mov bh, 0
2829   1642 FD A4 04      shr bl, 4  
2830   1645 74            mov d, b
2831   1646 1F 58 16      mov al, [d + s_hex_digits_printx32]
2832   1649 23            mov ah, al
2833   164A E5            pop b
2834   164B D8            push b
2835   164C A7 00         mov bh, 0
2836   164E FD 87 0F      and bl, $0F
2837   1651 74            mov d, b
2838   1652 1F 58 16      mov al, [d + s_hex_digits_printx32]
2839   1655 E5            pop b
2840   1656 E7            pop d
2841   1657 09            ret
2842   1658 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2842   165C 34 35 36 37 
2842   1660 38 39 41 42 
2842   1664 43 44 45 46 
2843   1668             ; --- END INLINE ASM SEGMENT
2844   1668 F9            leave
2845   1669 09            ret
2846   166A             
2847   166A             err:
2848   166A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2849   166D             ; print(e); 
2850   166D             ; --- START FUNCTION CALL
2851   166D FA 05 00      lea d, [bp + 5] ; $e
2852   1670 2A            mov b, [d]
2853   1671 38 00 00      mov c, 0
2854   1674 FD AB         swp b
2855   1676 D8            push b
2856   1677 07 7F 16      call print
2857   167A 51 02 00      add sp, 2
2858   167D             ; --- END FUNCTION CALL
2859   167D F9            leave
2860   167E 09            ret
2861   167F             
2862   167F             print:
2863   167F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2864   1682             ; --- BEGIN INLINE ASM SEGMENT
2865   1682 FA 05 00      lea d, [bp + 5] ; $s
2866   1685 FD 2A         mov d, [d]
2867   1687             _puts_L1_print:
2868   1687 1E            mov al, [d]
2869   1688 B9 00         cmp al, 0
2870   168A C6 96 16      jz _puts_END_print
2871   168D 23            mov ah, al
2872   168E 19 00         mov al, 0
2873   1690 05 03         syscall sys_io
2874   1692 79            inc d
2875   1693 0A 87 16      jmp _puts_L1_print
2876   1696             _puts_END_print:
2877   1696             ; --- END INLINE ASM SEGMENT
2878   1696 F9            leave
2879   1697 09            ret
2880   1698             
2881   1698             print_signed:
2882   1698 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2883   169B             ; char digits[5]; 
2884   169B 52 05 00      sub sp, 5
2885   169E             ; int i = 0; 
2886   169E 52 02 00      sub sp, 2
2887   16A1             ; --- START LOCAL VAR INITIALIZATION
2888   16A1 FA FA FF      lea d, [bp + -6] ; $i
2889   16A4 DA            push d
2890   16A5 FD 2E 00 00   mov32 cb, $00000000
2890   16A9 00 00 
2891   16AB E7            pop d
2892   16AC FD 43         mov [d], b
2893   16AE             ; --- END LOCAL VAR INITIALIZATION
2894   16AE             ; if (num < 0) { 
2895   16AE             _if47_cond:
2896   16AE FA 05 00      lea d, [bp + 5] ; $num
2897   16B1 2A            mov b, [d]
2898   16B2 38 00 00      mov c, 0
2899   16B5             ; --- START RELATIONAL
2900   16B5 D7            push a
2901   16B6 11            mov a, b
2902   16B7 FD 2E 00 00   mov32 cb, $00000000
2902   16BB 00 00 
2903   16BD B0            cmp a, b
2904   16BE FD 73         slt ; < (signed)
2905   16C0 E4            pop a
2906   16C1             ; --- END RELATIONAL
2907   16C1 C0 00 00      cmp b, 0
2908   16C4 C6 E7 16      je _if47_else
2909   16C7             _if47_TRUE:
2910   16C7             ; putchar('-'); 
2911   16C7             ; --- START FUNCTION CALL
2912   16C7 FD 2E 2D 00   mov32 cb, $0000002d
2912   16CB 00 00 
2913   16CD DD            push bl
2914   16CE 07 C8 14      call putchar
2915   16D1 51 01 00      add sp, 1
2916   16D4             ; --- END FUNCTION CALL
2917   16D4             ; num = -num; 
2918   16D4 FA 05 00      lea d, [bp + 5] ; $num
2919   16D7 DA            push d
2920   16D8 FA 05 00      lea d, [bp + 5] ; $num
2921   16DB 2A            mov b, [d]
2922   16DC 38 00 00      mov c, 0
2923   16DF FD 97         neg b
2924   16E1 E7            pop d
2925   16E2 FD 43         mov [d], b
2926   16E4 0A 12 17      jmp _if47_exit
2927   16E7             _if47_else:
2928   16E7             ; if (num == 0) { 
2929   16E7             _if48_cond:
2930   16E7 FA 05 00      lea d, [bp + 5] ; $num
2931   16EA 2A            mov b, [d]
2932   16EB 38 00 00      mov c, 0
2933   16EE             ; --- START RELATIONAL
2934   16EE D7            push a
2935   16EF 11            mov a, b
2936   16F0 FD 2E 00 00   mov32 cb, $00000000
2936   16F4 00 00 
2937   16F6 B0            cmp a, b
2938   16F7 FD 71         seq ; ==
2939   16F9 E4            pop a
2940   16FA             ; --- END RELATIONAL
2941   16FA C0 00 00      cmp b, 0
2942   16FD C6 12 17      je _if48_exit
2943   1700             _if48_TRUE:
2944   1700             ; putchar('0'); 
2945   1700             ; --- START FUNCTION CALL
2946   1700 FD 2E 30 00   mov32 cb, $00000030
2946   1704 00 00 
2947   1706 DD            push bl
2948   1707 07 C8 14      call putchar
2949   170A 51 01 00      add sp, 1
2950   170D             ; --- END FUNCTION CALL
2951   170D             ; return; 
2952   170D F9            leave
2953   170E 09            ret
2954   170F 0A 12 17      jmp _if48_exit
2955   1712             _if48_exit:
2956   1712             _if47_exit:
2957   1712             ; while (num > 0) { 
2958   1712             _while49_cond:
2959   1712 FA 05 00      lea d, [bp + 5] ; $num
2960   1715 2A            mov b, [d]
2961   1716 38 00 00      mov c, 0
2962   1719             ; --- START RELATIONAL
2963   1719 D7            push a
2964   171A 11            mov a, b
2965   171B FD 2E 00 00   mov32 cb, $00000000
2965   171F 00 00 
2966   1721 B0            cmp a, b
2967   1722 FD 7F         sgt ; >
2968   1724 E4            pop a
2969   1725             ; --- END RELATIONAL
2970   1725 C0 00 00      cmp b, 0
2971   1728 C6 9F 17      je _while49_exit
2972   172B             _while49_block:
2973   172B             ; digits[i] = '0' + (num % 10); 
2974   172B FA FC FF      lea d, [bp + -4] ; $digits
2975   172E D7            push a
2976   172F DA            push d
2977   1730 FA FA FF      lea d, [bp + -6] ; $i
2978   1733 2A            mov b, [d]
2979   1734 38 00 00      mov c, 0
2980   1737 E7            pop d
2981   1738 5A            add d, b
2982   1739 E4            pop a
2983   173A DA            push d
2984   173B FD 2E 30 00   mov32 cb, $00000030
2984   173F 00 00 
2985   1741             ; --- START TERMS
2986   1741 D7            push a
2987   1742 11            mov a, b
2988   1743 FA 05 00      lea d, [bp + 5] ; $num
2989   1746 2A            mov b, [d]
2990   1747 38 00 00      mov c, 0
2991   174A             ; --- START FACTORS
2992   174A D7            push a
2993   174B FD D8         push g
2994   174D 11            mov a, b
2995   174E FD 7A         mov g, c
2996   1750 FD 2E 0A 00   mov32 cb, $0000000a
2996   1754 00 00 
2997   1756 FD D8         push g ; save 'g' as the div instruction uses it
2998   1758 AE            div a, b ; %, a: quotient, b: remainder
2999   1759 11            mov a, b
3000   175A FD F1         pop g
3001   175C FD 38         mov c, g
3002   175E 27            mov b, a
3003   175F FD F1         pop g
3004   1761 E4            pop a
3005   1762             ; --- END FACTORS
3006   1762 56            add b, a
3007   1763 E4            pop a
3008   1764             ; --- END TERMS
3009   1764 E7            pop d
3010   1765 FD 3E         mov [d], bl
3011   1767             ; num = num / 10; 
3012   1767 FA 05 00      lea d, [bp + 5] ; $num
3013   176A DA            push d
3014   176B FA 05 00      lea d, [bp + 5] ; $num
3015   176E 2A            mov b, [d]
3016   176F 38 00 00      mov c, 0
3017   1772             ; --- START FACTORS
3018   1772 D7            push a
3019   1773 FD D8         push g
3020   1775 11            mov a, b
3021   1776 FD 7A         mov g, c
3022   1778 FD 2E 0A 00   mov32 cb, $0000000a
3022   177C 00 00 
3023   177E FD D8         push g ; save 'g' as the div instruction uses it
3024   1780 AE            div a, b ; /, a: quotient, b: remainder
3025   1781 FD F1         pop g
3026   1783 FD 38         mov c, g
3027   1785 27            mov b, a
3028   1786 FD F1         pop g
3029   1788 E4            pop a
3030   1789             ; --- END FACTORS
3031   1789 E7            pop d
3032   178A FD 43         mov [d], b
3033   178C             ; i++; 
3034   178C FA FA FF      lea d, [bp + -6] ; $i
3035   178F 2A            mov b, [d]
3036   1790 38 00 00      mov c, 0
3037   1793 11            mov a, b
3038   1794 FD 77         inc b
3039   1796 FA FA FF      lea d, [bp + -6] ; $i
3040   1799 FD 43         mov [d], b
3041   179B 27            mov b, a
3042   179C 0A 12 17      jmp _while49_cond
3043   179F             _while49_exit:
3044   179F             ; while (i > 0) { 
3045   179F             _while56_cond:
3046   179F FA FA FF      lea d, [bp + -6] ; $i
3047   17A2 2A            mov b, [d]
3048   17A3 38 00 00      mov c, 0
3049   17A6             ; --- START RELATIONAL
3050   17A6 D7            push a
3051   17A7 11            mov a, b
3052   17A8 FD 2E 00 00   mov32 cb, $00000000
3052   17AC 00 00 
3053   17AE B0            cmp a, b
3054   17AF FD 7F         sgt ; >
3055   17B1 E4            pop a
3056   17B2             ; --- END RELATIONAL
3057   17B2 C0 00 00      cmp b, 0
3058   17B5 C6 E7 17      je _while56_exit
3059   17B8             _while56_block:
3060   17B8             ; i--; 
3061   17B8 FA FA FF      lea d, [bp + -6] ; $i
3062   17BB 2A            mov b, [d]
3063   17BC 38 00 00      mov c, 0
3064   17BF 11            mov a, b
3065   17C0 FD 7D         dec b
3066   17C2 FA FA FF      lea d, [bp + -6] ; $i
3067   17C5 FD 43         mov [d], b
3068   17C7 27            mov b, a
3069   17C8             ; putchar(digits[i]); 
3070   17C8             ; --- START FUNCTION CALL
3071   17C8 FA FC FF      lea d, [bp + -4] ; $digits
3072   17CB D7            push a
3073   17CC DA            push d
3074   17CD FA FA FF      lea d, [bp + -6] ; $i
3075   17D0 2A            mov b, [d]
3076   17D1 38 00 00      mov c, 0
3077   17D4 E7            pop d
3078   17D5 5A            add d, b
3079   17D6 E4            pop a
3080   17D7 32            mov bl, [d]
3081   17D8 A7 00         mov bh, 0
3082   17DA 38 00 00      mov c, 0
3083   17DD DD            push bl
3084   17DE 07 C8 14      call putchar
3085   17E1 51 01 00      add sp, 1
3086   17E4             ; --- END FUNCTION CALL
3087   17E4 0A 9F 17      jmp _while56_cond
3088   17E7             _while56_exit:
3089   17E7 F9            leave
3090   17E8 09            ret
3091   17E9             
3092   17E9             print_unsigned:
3093   17E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3094   17EC             ; char digits[5]; 
3095   17EC 52 05 00      sub sp, 5
3096   17EF             ; int i; 
3097   17EF 52 02 00      sub sp, 2
3098   17F2             ; i = 0; 
3099   17F2 FA FA FF      lea d, [bp + -6] ; $i
3100   17F5 DA            push d
3101   17F6 FD 2E 00 00   mov32 cb, $00000000
3101   17FA 00 00 
3102   17FC E7            pop d
3103   17FD FD 43         mov [d], b
3104   17FF             ; if(num == 0){ 
3105   17FF             _if57_cond:
3106   17FF FA 05 00      lea d, [bp + 5] ; $num
3107   1802 2A            mov b, [d]
3108   1803 38 00 00      mov c, 0
3109   1806             ; --- START RELATIONAL
3110   1806 D7            push a
3111   1807 11            mov a, b
3112   1808 FD 2E 00 00   mov32 cb, $00000000
3112   180C 00 00 
3113   180E B0            cmp a, b
3114   180F FD 71         seq ; ==
3115   1811 E4            pop a
3116   1812             ; --- END RELATIONAL
3117   1812 C0 00 00      cmp b, 0
3118   1815 C6 2A 18      je _if57_exit
3119   1818             _if57_TRUE:
3120   1818             ; putchar('0'); 
3121   1818             ; --- START FUNCTION CALL
3122   1818 FD 2E 30 00   mov32 cb, $00000030
3122   181C 00 00 
3123   181E DD            push bl
3124   181F 07 C8 14      call putchar
3125   1822 51 01 00      add sp, 1
3126   1825             ; --- END FUNCTION CALL
3127   1825             ; return; 
3128   1825 F9            leave
3129   1826 09            ret
3130   1827 0A 2A 18      jmp _if57_exit
3131   182A             _if57_exit:
3132   182A             ; while (num > 0) { 
3133   182A             _while58_cond:
3134   182A FA 05 00      lea d, [bp + 5] ; $num
3135   182D 2A            mov b, [d]
3136   182E 38 00 00      mov c, 0
3137   1831             ; --- START RELATIONAL
3138   1831 D7            push a
3139   1832 11            mov a, b
3140   1833 FD 2E 00 00   mov32 cb, $00000000
3140   1837 00 00 
3141   1839 B0            cmp a, b
3142   183A FD 81         sgu ; > (unsigned)
3143   183C E4            pop a
3144   183D             ; --- END RELATIONAL
3145   183D C0 00 00      cmp b, 0
3146   1840 C6 B7 18      je _while58_exit
3147   1843             _while58_block:
3148   1843             ; digits[i] = '0' + (num % 10); 
3149   1843 FA FC FF      lea d, [bp + -4] ; $digits
3150   1846 D7            push a
3151   1847 DA            push d
3152   1848 FA FA FF      lea d, [bp + -6] ; $i
3153   184B 2A            mov b, [d]
3154   184C 38 00 00      mov c, 0
3155   184F E7            pop d
3156   1850 5A            add d, b
3157   1851 E4            pop a
3158   1852 DA            push d
3159   1853 FD 2E 30 00   mov32 cb, $00000030
3159   1857 00 00 
3160   1859             ; --- START TERMS
3161   1859 D7            push a
3162   185A 11            mov a, b
3163   185B FA 05 00      lea d, [bp + 5] ; $num
3164   185E 2A            mov b, [d]
3165   185F 38 00 00      mov c, 0
3166   1862             ; --- START FACTORS
3167   1862 D7            push a
3168   1863 FD D8         push g
3169   1865 11            mov a, b
3170   1866 FD 7A         mov g, c
3171   1868 FD 2E 0A 00   mov32 cb, $0000000a
3171   186C 00 00 
3172   186E FD D8         push g ; save 'g' as the div instruction uses it
3173   1870 AE            div a, b ; %, a: quotient, b: remainder
3174   1871 11            mov a, b
3175   1872 FD F1         pop g
3176   1874 FD 38         mov c, g
3177   1876 27            mov b, a
3178   1877 FD F1         pop g
3179   1879 E4            pop a
3180   187A             ; --- END FACTORS
3181   187A 56            add b, a
3182   187B E4            pop a
3183   187C             ; --- END TERMS
3184   187C E7            pop d
3185   187D FD 3E         mov [d], bl
3186   187F             ; num = num / 10; 
3187   187F FA 05 00      lea d, [bp + 5] ; $num
3188   1882 DA            push d
3189   1883 FA 05 00      lea d, [bp + 5] ; $num
3190   1886 2A            mov b, [d]
3191   1887 38 00 00      mov c, 0
3192   188A             ; --- START FACTORS
3193   188A D7            push a
3194   188B FD D8         push g
3195   188D 11            mov a, b
3196   188E FD 7A         mov g, c
3197   1890 FD 2E 0A 00   mov32 cb, $0000000a
3197   1894 00 00 
3198   1896 FD D8         push g ; save 'g' as the div instruction uses it
3199   1898 AE            div a, b ; /, a: quotient, b: remainder
3200   1899 FD F1         pop g
3201   189B FD 38         mov c, g
3202   189D 27            mov b, a
3203   189E FD F1         pop g
3204   18A0 E4            pop a
3205   18A1             ; --- END FACTORS
3206   18A1 E7            pop d
3207   18A2 FD 43         mov [d], b
3208   18A4             ; i++; 
3209   18A4 FA FA FF      lea d, [bp + -6] ; $i
3210   18A7 2A            mov b, [d]
3211   18A8 38 00 00      mov c, 0
3212   18AB 11            mov a, b
3213   18AC FD 77         inc b
3214   18AE FA FA FF      lea d, [bp + -6] ; $i
3215   18B1 FD 43         mov [d], b
3216   18B3 27            mov b, a
3217   18B4 0A 2A 18      jmp _while58_cond
3218   18B7             _while58_exit:
3219   18B7             ; while (i > 0) { 
3220   18B7             _while65_cond:
3221   18B7 FA FA FF      lea d, [bp + -6] ; $i
3222   18BA 2A            mov b, [d]
3223   18BB 38 00 00      mov c, 0
3224   18BE             ; --- START RELATIONAL
3225   18BE D7            push a
3226   18BF 11            mov a, b
3227   18C0 FD 2E 00 00   mov32 cb, $00000000
3227   18C4 00 00 
3228   18C6 B0            cmp a, b
3229   18C7 FD 7F         sgt ; >
3230   18C9 E4            pop a
3231   18CA             ; --- END RELATIONAL
3232   18CA C0 00 00      cmp b, 0
3233   18CD C6 FF 18      je _while65_exit
3234   18D0             _while65_block:
3235   18D0             ; i--; 
3236   18D0 FA FA FF      lea d, [bp + -6] ; $i
3237   18D3 2A            mov b, [d]
3238   18D4 38 00 00      mov c, 0
3239   18D7 11            mov a, b
3240   18D8 FD 7D         dec b
3241   18DA FA FA FF      lea d, [bp + -6] ; $i
3242   18DD FD 43         mov [d], b
3243   18DF 27            mov b, a
3244   18E0             ; putchar(digits[i]); 
3245   18E0             ; --- START FUNCTION CALL
3246   18E0 FA FC FF      lea d, [bp + -4] ; $digits
3247   18E3 D7            push a
3248   18E4 DA            push d
3249   18E5 FA FA FF      lea d, [bp + -6] ; $i
3250   18E8 2A            mov b, [d]
3251   18E9 38 00 00      mov c, 0
3252   18EC E7            pop d
3253   18ED 5A            add d, b
3254   18EE E4            pop a
3255   18EF 32            mov bl, [d]
3256   18F0 A7 00         mov bh, 0
3257   18F2 38 00 00      mov c, 0
3258   18F5 DD            push bl
3259   18F6 07 C8 14      call putchar
3260   18F9 51 01 00      add sp, 1
3261   18FC             ; --- END FUNCTION CALL
3262   18FC 0A B7 18      jmp _while65_cond
3263   18FF             _while65_exit:
3264   18FF F9            leave
3265   1900 09            ret
3266   1901             
3267   1901             printx16:
3268   1901 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3269   1904             ; --- BEGIN INLINE ASM SEGMENT
3270   1904 FA 05 00      lea d, [bp + 5] ; $hex
3271   1907 2A            mov b, [d]
3272   1908             print_u16x_printx16:
3273   1908 DD            push bl
3274   1909 30            mov bl, bh
3275   190A 07 27 19      call _itoa_printx16        ; convert bh to char in A
3276   190D 2F            mov bl, al        ; save al
3277   190E 19 00         mov al, 0
3278   1910 05 03         syscall sys_io        ; display AH
3279   1912 24            mov ah, bl        ; retrieve al
3280   1913 19 00         mov al, 0
3281   1915 05 03         syscall sys_io        ; display AL
3282   1917 EA            pop bl
3283   1918 07 27 19      call _itoa_printx16        ; convert bh to char in A
3284   191B 2F            mov bl, al        ; save al
3285   191C 19 00         mov al, 0
3286   191E 05 03         syscall sys_io        ; display AH
3287   1920 24            mov ah, bl        ; retrieve al
3288   1921 19 00         mov al, 0
3289   1923 05 03         syscall sys_io        ; display AL
3290   1925             ; --- END INLINE ASM SEGMENT
3291   1925             ; return; 
3292   1925 F9            leave
3293   1926 09            ret
3294   1927             ; --- BEGIN INLINE ASM SEGMENT
3295   1927             _itoa_printx16:
3296   1927 DA            push d
3297   1928 D8            push b
3298   1929 A7 00         mov bh, 0
3299   192B FD A4 04      shr bl, 4  
3300   192E 74            mov d, b
3301   192F 1F 41 19      mov al, [d + s_hex_digits_printx16]
3302   1932 23            mov ah, al
3303   1933 E5            pop b
3304   1934 D8            push b
3305   1935 A7 00         mov bh, 0
3306   1937 FD 87 0F      and bl, $0F
3307   193A 74            mov d, b
3308   193B 1F 41 19      mov al, [d + s_hex_digits_printx16]
3309   193E E5            pop b
3310   193F E7            pop d
3311   1940 09            ret
3312   1941 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
3312   1945 34 35 36 37 
3312   1949 38 39 41 42 
3312   194D 43 44 45 46 
3313   1951             ; --- END INLINE ASM SEGMENT
3314   1951 F9            leave
3315   1952 09            ret
3316   1953             
3317   1953             gets:
3318   1953 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3319   1956             ; --- BEGIN INLINE ASM SEGMENT
3320   1956 FA 05 00      lea d, [bp + 5] ; $s
3321   1959 15            mov a, [d]
3322   195A 3C            mov d, a
3323   195B 07 70 19      call _gets_gets
3324   195E             ; --- END INLINE ASM SEGMENT
3325   195E             ; return strlen(s); 
3326   195E             ; --- START FUNCTION CALL
3327   195E FA 05 00      lea d, [bp + 5] ; $s
3328   1961 2A            mov b, [d]
3329   1962 38 00 00      mov c, 0
3330   1965 FD AB         swp b
3331   1967 D8            push b
3332   1968 07 11 1A      call strlen
3333   196B 51 02 00      add sp, 2
3334   196E             ; --- END FUNCTION CALL
3335   196E F9            leave
3336   196F 09            ret
3337   1970             ; --- BEGIN INLINE ASM SEGMENT
3338   1970             _gets_gets:
3339   1970 D7            push a
3340   1971 DA            push d
3341   1972             _gets_loop_gets:
3342   1972 19 01         mov al, 1
3343   1974 05 03         syscall sys_io      ; receive in AH
3344   1976 B9 00         cmp al, 0        ; check error code (AL)
3345   1978 C6 72 19      je _gets_loop_gets      ; if no char received, retry
3346   197B 76 1B         cmp ah, 27
3347   197D C6 9E 19      je _gets_ansi_esc_gets
3348   1980 76 0A         cmp ah, $0A        ; LF
3349   1982 C6 09 1A      je _gets_end_gets
3350   1985 76 0D         cmp ah, $0D        ; CR
3351   1987 C6 09 1A      je _gets_end_gets
3352   198A 76 5C         cmp ah, $5C        ; '\\'
3353   198C C6 CA 19      je _gets_escape_gets
3354   198F 76 08         cmp ah, $08      ; check for backspace
3355   1991 C6 9A 19      je _gets_backspace_gets
3356   1994 1A            mov al, ah
3357   1995 3E            mov [d], al
3358   1996 79            inc d
3359   1997 0A 72 19      jmp _gets_loop_gets
3360   199A             _gets_backspace_gets:
3361   199A 7F            dec d
3362   199B 0A 72 19      jmp _gets_loop_gets
3363   199E             _gets_ansi_esc_gets:
3364   199E 19 01         mov al, 1
3365   19A0 05 03         syscall sys_io        ; receive in AH without echo
3366   19A2 B9 00         cmp al, 0          ; check error code (AL)
3367   19A4 C6 9E 19      je _gets_ansi_esc_gets    ; if no char received, retry
3368   19A7 76 5B         cmp ah, '['
3369   19A9 C7 72 19      jne _gets_loop_gets
3370   19AC             _gets_ansi_esc_2_gets:
3371   19AC 19 01         mov al, 1
3372   19AE 05 03         syscall sys_io          ; receive in AH without echo
3373   19B0 B9 00         cmp al, 0            ; check error code (AL)
3374   19B2 C6 AC 19      je _gets_ansi_esc_2_gets  ; if no char received, retry
3375   19B5 76 44         cmp ah, 'D'
3376   19B7 C6 C2 19      je _gets_left_arrow_gets
3377   19BA 76 43         cmp ah, 'C'
3378   19BC C6 C6 19      je _gets_right_arrow_gets
3379   19BF 0A 72 19      jmp _gets_loop_gets
3380   19C2             _gets_left_arrow_gets:
3381   19C2 7F            dec d
3382   19C3 0A 72 19      jmp _gets_loop_gets
3383   19C6             _gets_right_arrow_gets:
3384   19C6 79            inc d
3385   19C7 0A 72 19      jmp _gets_loop_gets
3386   19CA             _gets_escape_gets:
3387   19CA 19 01         mov al, 1
3388   19CC 05 03         syscall sys_io      ; receive in AH
3389   19CE B9 00         cmp al, 0        ; check error code (AL)
3390   19D0 C6 CA 19      je _gets_escape_gets      ; if no char received, retry
3391   19D3 76 6E         cmp ah, 'n'
3392   19D5 C6 F4 19      je _gets_LF_gets
3393   19D8 76 72         cmp ah, 'r'
3394   19DA C6 FB 19      je _gets_CR_gets
3395   19DD 76 30         cmp ah, '0'
3396   19DF C6 02 1A      je _gets_NULL_gets
3397   19E2 76 5C         cmp ah, $5C  
3398   19E4 C6 ED 19      je _gets_slash_gets
3399   19E7 1A            mov al, ah        ; if not a known escape, it is just a normal letter
3400   19E8 3E            mov [d], al
3401   19E9 79            inc d
3402   19EA 0A 72 19      jmp _gets_loop_gets
3403   19ED             _gets_slash_gets:
3404   19ED 19 5C         mov al, $5C
3405   19EF 3E            mov [d], al
3406   19F0 79            inc d
3407   19F1 0A 72 19      jmp _gets_loop_gets
3408   19F4             _gets_LF_gets:
3409   19F4 19 0A         mov al, $0A
3410   19F6 3E            mov [d], al
3411   19F7 79            inc d
3412   19F8 0A 72 19      jmp _gets_loop_gets
3413   19FB             _gets_CR_gets:
3414   19FB 19 0D         mov al, $0D
3415   19FD 3E            mov [d], al
3416   19FE 79            inc d
3417   19FF 0A 72 19      jmp _gets_loop_gets
3418   1A02             _gets_NULL_gets:
3419   1A02 19 00         mov al, $00
3420   1A04 3E            mov [d], al
3421   1A05 79            inc d
3422   1A06 0A 72 19      jmp _gets_loop_gets
3423   1A09             _gets_end_gets:
3424   1A09 19 00         mov al, 0
3425   1A0B 3E            mov [d], al        ; terminate string
3426   1A0C E7            pop d
3427   1A0D E4            pop a
3428   1A0E 09            ret
3429   1A0F             ; --- END INLINE ASM SEGMENT
3430   1A0F F9            leave
3431   1A10 09            ret
3432   1A11             
3433   1A11             strlen:
3434   1A11 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3435   1A14             ; int length; 
3436   1A14 52 02 00      sub sp, 2
3437   1A17             ; length = 0; 
3438   1A17 FA FF FF      lea d, [bp + -1] ; $length
3439   1A1A DA            push d
3440   1A1B FD 2E 00 00   mov32 cb, $00000000
3440   1A1F 00 00 
3441   1A21 E7            pop d
3442   1A22 FD 43         mov [d], b
3443   1A24             ; while (str[length] != 0) { 
3444   1A24             _while66_cond:
3445   1A24 FA 05 00      lea d, [bp + 5] ; $str
3446   1A27 FD 2A         mov d, [d]
3447   1A29 D7            push a
3448   1A2A DA            push d
3449   1A2B FA FF FF      lea d, [bp + -1] ; $length
3450   1A2E 2A            mov b, [d]
3451   1A2F 38 00 00      mov c, 0
3452   1A32 E7            pop d
3453   1A33 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3454   1A37 E4            pop a
3455   1A38 32            mov bl, [d]
3456   1A39 A7 00         mov bh, 0
3457   1A3B 38 00 00      mov c, 0
3458   1A3E             ; --- START RELATIONAL
3459   1A3E D7            push a
3460   1A3F 11            mov a, b
3461   1A40 FD 2E 00 00   mov32 cb, $00000000
3461   1A44 00 00 
3462   1A46 B0            cmp a, b
3463   1A47 FD 72         sneq ; !=
3464   1A49 E4            pop a
3465   1A4A             ; --- END RELATIONAL
3466   1A4A C0 00 00      cmp b, 0
3467   1A4D C6 63 1A      je _while66_exit
3468   1A50             _while66_block:
3469   1A50             ; length++; 
3470   1A50 FA FF FF      lea d, [bp + -1] ; $length
3471   1A53 2A            mov b, [d]
3472   1A54 38 00 00      mov c, 0
3473   1A57 11            mov a, b
3474   1A58 FD 77         inc b
3475   1A5A FA FF FF      lea d, [bp + -1] ; $length
3476   1A5D FD 43         mov [d], b
3477   1A5F 27            mov b, a
3478   1A60 0A 24 1A      jmp _while66_cond
3479   1A63             _while66_exit:
3480   1A63             ; return length; 
3481   1A63 FA FF FF      lea d, [bp + -1] ; $length
3482   1A66 2A            mov b, [d]
3483   1A67 38 00 00      mov c, 0
3484   1A6A F9            leave
3485   1A6B 09            ret
3486   1A6C             ; --- END TEXT SEGMENT
3487   1A6C             
3488   1A6C             ; --- BEGIN DATA SEGMENT
3489   1A6C 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
3489   1A70 45 46 47 48 
3489   1A74 49 4A 4B 4C 
3489   1A78 4D 4E 4F 50 
3489   1A7C 51 52 53 54 
3489   1A80 55 56 57 58 
3489   1A84 59 5A 61 62 
3489   1A88 63 64 65 66 
3489   1A8C 67 68 69 6A 
3489   1A90 6B 6C 6D 6E 
3489   1A94 6F 70 71 72 
3489   1A98 73 74 75 76 
3489   1A9C 77 78 79 7A 
3489   1AA0 30 31 32 33 
3489   1AA4 34 35 36 37 
3489   1AA8 38 39 2B 2F 
3489   1AAC 00 
3490   1AAD 6C 1A       _base64_table: .dw _base64_table_data
3491   1AAF 0A 45 6E 74 _s0: .db "\nEnter a base64 encoded string to decode: ", 0
3491   1AB3 65 72 20 61 
3491   1AB7 20 62 61 73 
3491   1ABB 65 36 34 20 
3491   1ABF 65 6E 63 6F 
3491   1AC3 64 65 64 20 
3491   1AC7 73 74 72 69 
3491   1ACB 6E 67 20 74 
3491   1ACF 6F 20 64 65 
3491   1AD3 63 6F 64 65 
3491   1AD7 3A 20 00 
3492   1ADA 0A 45 6E 63 _s1: .db "\nEncoded string: %s\n", 0
3492   1ADE 6F 64 65 64 
3492   1AE2 20 73 74 72 
3492   1AE6 69 6E 67 3A 
3492   1AEA 20 25 73 0A 
3492   1AEE 00 
3493   1AEF 0A 44 65 63 _s2: .db "\nDecoded string: %s\n", 0
3493   1AF3 6F 64 65 64 
3493   1AF7 20 73 74 72 
3493   1AFB 69 6E 67 3A 
3493   1AFF 20 25 73 0A 
3493   1B03 00 
3494   1B04 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
3494   1B08 70 65 63 74 
3494   1B0C 65 64 20 66 
3494   1B10 6F 72 6D 61 
3494   1B14 74 20 69 6E 
3494   1B18 20 70 72 69 
3494   1B1C 6E 74 66 2E 
3494   1B20 00 
3495   1B21 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
3495   1B25 72 3A 20 55 
3495   1B29 6E 6B 6E 6F 
3495   1B2D 77 6E 20 61 
3495   1B31 72 67 75 6D 
3495   1B35 65 6E 74 20 
3495   1B39 74 79 70 65 
3495   1B3D 2E 0A 00 
3496   1B40             
3497   1B40 42 1B       _heap_top: .dw _heap
3498   1B42 00          _heap: .db 0
3499   1B43             ; --- END DATA SEGMENT
3500   1B43             
3501   1B43             .end
tasm: Number of errors = 0
