0001   0000             ; --- FILENAME: programs/base64.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; char input[512]; 
0011   0408 52 00 02      sub sp, 512
0012   040B             ; char output[256]; 
0013   040B 52 00 01      sub sp, 256
0014   040E             ; printf("\nEnter a base64 encoded string to decode: "); 
0015   040E             ; --- START FUNCTION CALL
0016   040E 26 93 1A      mov b, _s0 ; "\nEnter a base64 encoded string to decode: "
0017   0411 FD AB         swp b
0018   0413 D8            push b
0019   0414 07 4A 10      call printf
0020   0417 51 02 00      add sp, 2
0021   041A             ; --- END FUNCTION CALL
0022   041A             ; gets(input); 
0023   041A             ; --- START FUNCTION CALL
0024   041A FA 01 FE      lea d, [bp + -511] ; $input
0025   041D 2D            mov b, d
0026   041E 38 00 00      mov c, 0
0027   0421 FD AB         swp b
0028   0423 D8            push b
0029   0424 07 37 19      call gets
0030   0427 51 02 00      add sp, 2
0031   042A             ; --- END FUNCTION CALL
0032   042A             ; base64_encode(input, output); 
0033   042A             ; --- START FUNCTION CALL
0034   042A FA 01 FD      lea d, [bp + -767] ; $output
0035   042D 2D            mov b, d
0036   042E 38 00 00      mov c, 0
0037   0431 FD AB         swp b
0038   0433 D8            push b
0039   0434 FA 01 FE      lea d, [bp + -511] ; $input
0040   0437 2D            mov b, d
0041   0438 38 00 00      mov c, 0
0042   043B FD AB         swp b
0043   043D D8            push b
0044   043E 07 93 04      call base64_encode
0045   0441 51 04 00      add sp, 4
0046   0444             ; --- END FUNCTION CALL
0047   0444             ; printf("\nEncoded string: %s\n", output); 
0048   0444             ; --- START FUNCTION CALL
0049   0444 FA 01 FD      lea d, [bp + -767] ; $output
0050   0447 2D            mov b, d
0051   0448 38 00 00      mov c, 0
0052   044B FD AB         swp b
0053   044D D8            push b
0054   044E 26 BE 1A      mov b, _s1 ; "\nEncoded string: %s\n"
0055   0451 FD AB         swp b
0056   0453 D8            push b
0057   0454 07 4A 10      call printf
0058   0457 51 04 00      add sp, 4
0059   045A             ; --- END FUNCTION CALL
0060   045A             ; base64_decode(output, input); 
0061   045A             ; --- START FUNCTION CALL
0062   045A FA 01 FE      lea d, [bp + -511] ; $input
0063   045D 2D            mov b, d
0064   045E 38 00 00      mov c, 0
0065   0461 FD AB         swp b
0066   0463 D8            push b
0067   0464 FA 01 FD      lea d, [bp + -767] ; $output
0068   0467 2D            mov b, d
0069   0468 38 00 00      mov c, 0
0070   046B FD AB         swp b
0071   046D D8            push b
0072   046E 07 E4 0A      call base64_decode
0073   0471 51 04 00      add sp, 4
0074   0474             ; --- END FUNCTION CALL
0075   0474             ; printf("\nDecoded string: %s\n", input); 
0076   0474             ; --- START FUNCTION CALL
0077   0474 FA 01 FE      lea d, [bp + -511] ; $input
0078   0477 2D            mov b, d
0079   0478 38 00 00      mov c, 0
0080   047B FD AB         swp b
0081   047D D8            push b
0082   047E 26 D3 1A      mov b, _s2 ; "\nDecoded string: %s\n"
0083   0481 FD AB         swp b
0084   0483 D8            push b
0085   0484 07 4A 10      call printf
0086   0487 51 04 00      add sp, 4
0087   048A             ; --- END FUNCTION CALL
0088   048A             ; return 0; 
0089   048A FD 2E 00 00   mov32 cb, $00000000
0089   048E 00 00 
0090   0490 F9            leave
0091   0491 05 0B         syscall sys_terminate_proc
0092   0493             
0093   0493             base64_encode:
0094   0493 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0095   0496             ; int i = 0; 
0096   0496 52 02 00      sub sp, 2
0097   0499             ; --- START LOCAL VAR INITIALIZATION
0098   0499 FA FF FF      lea d, [bp + -1] ; $i
0099   049C DA            push d
0100   049D FD 2E 00 00   mov32 cb, $00000000
0100   04A1 00 00 
0101   04A3 E7            pop d
0102   04A4 FD 43         mov [d], b
0103   04A6             ; --- END LOCAL VAR INITIALIZATION
0104   04A6             ; int j = 0; 
0105   04A6 52 02 00      sub sp, 2
0106   04A9             ; --- START LOCAL VAR INITIALIZATION
0107   04A9 FA FD FF      lea d, [bp + -3] ; $j
0108   04AC DA            push d
0109   04AD FD 2E 00 00   mov32 cb, $00000000
0109   04B1 00 00 
0110   04B3 E7            pop d
0111   04B4 FD 43         mov [d], b
0112   04B6             ; --- END LOCAL VAR INITIALIZATION
0113   04B6             ; int k; 
0114   04B6 52 02 00      sub sp, 2
0115   04B9             ; int input_len; 
0116   04B9 52 02 00      sub sp, 2
0117   04BC             ; unsigned char input_buffer[3]; 
0118   04BC 52 03 00      sub sp, 3
0119   04BF             ; unsigned char output_buffer[4]; 
0120   04BF 52 04 00      sub sp, 4
0121   04C2             ; input_len = strlen(input); 
0122   04C2 FA F9 FF      lea d, [bp + -7] ; $input_len
0123   04C5 DA            push d
0124   04C6             ; --- START FUNCTION CALL
0125   04C6 FA 05 00      lea d, [bp + 5] ; $input
0126   04C9 2A            mov b, [d]
0127   04CA 38 00 00      mov c, 0
0128   04CD FD AB         swp b
0129   04CF D8            push b
0130   04D0 07 F5 19      call strlen
0131   04D3 51 02 00      add sp, 2
0132   04D6             ; --- END FUNCTION CALL
0133   04D6 E7            pop d
0134   04D7 FD 43         mov [d], b
0135   04D9             ; while (input_len--) { 
0136   04D9             _while1_cond:
0137   04D9 FA F9 FF      lea d, [bp + -7] ; $input_len
0138   04DC 2A            mov b, [d]
0139   04DD 38 00 00      mov c, 0
0140   04E0 11            mov a, b
0141   04E1 FD 7D         dec b
0142   04E3 FA F9 FF      lea d, [bp + -7] ; $input_len
0143   04E6 FD 43         mov [d], b
0144   04E8 27            mov b, a
0145   04E9 C0 00 00      cmp b, 0
0146   04EC C6 1B 07      je _while1_exit
0147   04EF             _while1_block:
0148   04EF             ; input_buffer[i++] = *(input++); 
0149   04EF FA F6 FF      lea d, [bp + -10] ; $input_buffer
0150   04F2 D7            push a
0151   04F3 DA            push d
0152   04F4 FA FF FF      lea d, [bp + -1] ; $i
0153   04F7 2A            mov b, [d]
0154   04F8 38 00 00      mov c, 0
0155   04FB 11            mov a, b
0156   04FC FD 77         inc b
0157   04FE FA FF FF      lea d, [bp + -1] ; $i
0158   0501 FD 43         mov [d], b
0159   0503 27            mov b, a
0160   0504 E7            pop d
0161   0505 5A            add d, b
0162   0506 E4            pop a
0163   0507 DA            push d
0164   0508 FA 05 00      lea d, [bp + 5] ; $input
0165   050B 2A            mov b, [d]
0166   050C 38 00 00      mov c, 0
0167   050F FD 77         inc b
0168   0511 FA 05 00      lea d, [bp + 5] ; $input
0169   0514 FD 43         mov [d], b
0170   0516 FD 7D         dec b
0171   0518 74            mov d, b
0172   0519 32            mov bl, [d]
0173   051A A7 00         mov bh, 0
0174   051C 38 00 00      mov c, 0
0175   051F E7            pop d
0176   0520 FD 3E         mov [d], bl
0177   0522             ; if (i == 3) { 
0178   0522             _if2_cond:
0179   0522 FA FF FF      lea d, [bp + -1] ; $i
0180   0525 2A            mov b, [d]
0181   0526 38 00 00      mov c, 0
0182   0529             ; --- START RELATIONAL
0183   0529 D7            push a
0184   052A 11            mov a, b
0185   052B FD 2E 03 00   mov32 cb, $00000003
0185   052F 00 00 
0186   0531 B0            cmp a, b
0187   0532 FD 71         seq ; ==
0188   0534 E4            pop a
0189   0535             ; --- END RELATIONAL
0190   0535 C0 00 00      cmp b, 0
0191   0538 C6 18 07      je _if2_exit
0192   053B             _if2_TRUE:
0193   053B             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0194   053B FA F2 FF      lea d, [bp + -14] ; $output_buffer
0195   053E D7            push a
0196   053F DA            push d
0197   0540 FD 2E 00 00   mov32 cb, $00000000
0197   0544 00 00 
0198   0546 E7            pop d
0199   0547 5A            add d, b
0200   0548 E4            pop a
0201   0549 DA            push d
0202   054A FA F6 FF      lea d, [bp + -10] ; $input_buffer
0203   054D D7            push a
0204   054E DA            push d
0205   054F FD 2E 00 00   mov32 cb, $00000000
0205   0553 00 00 
0206   0555 E7            pop d
0207   0556 5A            add d, b
0208   0557 E4            pop a
0209   0558 32            mov bl, [d]
0210   0559 A7 00         mov bh, 0
0211   055B 38 00 00      mov c, 0
0212   055E D7            push a
0213   055F 11            mov a, b
0214   0560 FD 2E FC 00   mov32 cb, $000000fc
0214   0564 00 00 
0215   0566 FD 92         and b, a ; &
0216   0568 E4            pop a
0217   0569             ; --- START SHIFT
0218   0569 D7            push a
0219   056A 11            mov a, b
0220   056B FD 2E 02 00   mov32 cb, $00000002
0220   056F 00 00 
0221   0571 FD 39         mov c, b
0222   0573 A5            ashr a, cl
0223   0574 27            mov b, a
0224   0575 E4            pop a
0225   0576             ; --- END SHIFT
0226   0576 E7            pop d
0227   0577 FD 3E         mov [d], bl
0228   0579             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0229   0579 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0230   057C D7            push a
0231   057D DA            push d
0232   057E FD 2E 01 00   mov32 cb, $00000001
0232   0582 00 00 
0233   0584 E7            pop d
0234   0585 5A            add d, b
0235   0586 E4            pop a
0236   0587 DA            push d
0237   0588 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0238   058B D7            push a
0239   058C DA            push d
0240   058D FD 2E 00 00   mov32 cb, $00000000
0240   0591 00 00 
0241   0593 E7            pop d
0242   0594 5A            add d, b
0243   0595 E4            pop a
0244   0596 32            mov bl, [d]
0245   0597 A7 00         mov bh, 0
0246   0599 38 00 00      mov c, 0
0247   059C D7            push a
0248   059D 11            mov a, b
0249   059E FD 2E 03 00   mov32 cb, $00000003
0249   05A2 00 00 
0250   05A4 FD 92         and b, a ; &
0251   05A6 E4            pop a
0252   05A7             ; --- START SHIFT
0253   05A7 D7            push a
0254   05A8 11            mov a, b
0255   05A9 FD 2E 04 00   mov32 cb, $00000004
0255   05AD 00 00 
0256   05AF FD 39         mov c, b
0257   05B1 9D            shl a, cl
0258   05B2 27            mov b, a
0259   05B3 E4            pop a
0260   05B4             ; --- END SHIFT
0261   05B4             ; --- START TERMS
0262   05B4 D7            push a
0263   05B5 11            mov a, b
0264   05B6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0265   05B9 D7            push a
0266   05BA DA            push d
0267   05BB FD 2E 01 00   mov32 cb, $00000001
0267   05BF 00 00 
0268   05C1 E7            pop d
0269   05C2 5A            add d, b
0270   05C3 E4            pop a
0271   05C4 32            mov bl, [d]
0272   05C5 A7 00         mov bh, 0
0273   05C7 38 00 00      mov c, 0
0274   05CA D7            push a
0275   05CB 11            mov a, b
0276   05CC FD 2E F0 00   mov32 cb, $000000f0
0276   05D0 00 00 
0277   05D2 FD 92         and b, a ; &
0278   05D4 E4            pop a
0279   05D5             ; --- START SHIFT
0280   05D5 D7            push a
0281   05D6 11            mov a, b
0282   05D7 FD 2E 04 00   mov32 cb, $00000004
0282   05DB 00 00 
0283   05DD FD 39         mov c, b
0284   05DF A5            ashr a, cl
0285   05E0 27            mov b, a
0286   05E1 E4            pop a
0287   05E2             ; --- END SHIFT
0288   05E2 56            add b, a
0289   05E3 E4            pop a
0290   05E4             ; --- END TERMS
0291   05E4 E7            pop d
0292   05E5 FD 3E         mov [d], bl
0293   05E7             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0294   05E7 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0295   05EA D7            push a
0296   05EB DA            push d
0297   05EC FD 2E 02 00   mov32 cb, $00000002
0297   05F0 00 00 
0298   05F2 E7            pop d
0299   05F3 5A            add d, b
0300   05F4 E4            pop a
0301   05F5 DA            push d
0302   05F6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0303   05F9 D7            push a
0304   05FA DA            push d
0305   05FB FD 2E 01 00   mov32 cb, $00000001
0305   05FF 00 00 
0306   0601 E7            pop d
0307   0602 5A            add d, b
0308   0603 E4            pop a
0309   0604 32            mov bl, [d]
0310   0605 A7 00         mov bh, 0
0311   0607 38 00 00      mov c, 0
0312   060A D7            push a
0313   060B 11            mov a, b
0314   060C FD 2E 0F 00   mov32 cb, $0000000f
0314   0610 00 00 
0315   0612 FD 92         and b, a ; &
0316   0614 E4            pop a
0317   0615             ; --- START SHIFT
0318   0615 D7            push a
0319   0616 11            mov a, b
0320   0617 FD 2E 02 00   mov32 cb, $00000002
0320   061B 00 00 
0321   061D FD 39         mov c, b
0322   061F 9D            shl a, cl
0323   0620 27            mov b, a
0324   0621 E4            pop a
0325   0622             ; --- END SHIFT
0326   0622             ; --- START TERMS
0327   0622 D7            push a
0328   0623 11            mov a, b
0329   0624 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0330   0627 D7            push a
0331   0628 DA            push d
0332   0629 FD 2E 02 00   mov32 cb, $00000002
0332   062D 00 00 
0333   062F E7            pop d
0334   0630 5A            add d, b
0335   0631 E4            pop a
0336   0632 32            mov bl, [d]
0337   0633 A7 00         mov bh, 0
0338   0635 38 00 00      mov c, 0
0339   0638 D7            push a
0340   0639 11            mov a, b
0341   063A FD 2E C0 00   mov32 cb, $000000c0
0341   063E 00 00 
0342   0640 FD 92         and b, a ; &
0343   0642 E4            pop a
0344   0643             ; --- START SHIFT
0345   0643 D7            push a
0346   0644 11            mov a, b
0347   0645 FD 2E 06 00   mov32 cb, $00000006
0347   0649 00 00 
0348   064B FD 39         mov c, b
0349   064D A5            ashr a, cl
0350   064E 27            mov b, a
0351   064F E4            pop a
0352   0650             ; --- END SHIFT
0353   0650 56            add b, a
0354   0651 E4            pop a
0355   0652             ; --- END TERMS
0356   0652 E7            pop d
0357   0653 FD 3E         mov [d], bl
0358   0655             ; output_buffer[3] = input_buffer[2] & 0x3F; 
0359   0655 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0360   0658 D7            push a
0361   0659 DA            push d
0362   065A FD 2E 03 00   mov32 cb, $00000003
0362   065E 00 00 
0363   0660 E7            pop d
0364   0661 5A            add d, b
0365   0662 E4            pop a
0366   0663 DA            push d
0367   0664 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0368   0667 D7            push a
0369   0668 DA            push d
0370   0669 FD 2E 02 00   mov32 cb, $00000002
0370   066D 00 00 
0371   066F E7            pop d
0372   0670 5A            add d, b
0373   0671 E4            pop a
0374   0672 32            mov bl, [d]
0375   0673 A7 00         mov bh, 0
0376   0675 38 00 00      mov c, 0
0377   0678 D7            push a
0378   0679 11            mov a, b
0379   067A FD 2E 3F 00   mov32 cb, $0000003f
0379   067E 00 00 
0380   0680 FD 92         and b, a ; &
0381   0682 E4            pop a
0382   0683 E7            pop d
0383   0684 FD 3E         mov [d], bl
0384   0686             ; for (i = 0; i < 4; i++) { 
0385   0686             _for3_init:
0386   0686 FA FF FF      lea d, [bp + -1] ; $i
0387   0689 DA            push d
0388   068A FD 2E 00 00   mov32 cb, $00000000
0388   068E 00 00 
0389   0690 E7            pop d
0390   0691 FD 43         mov [d], b
0391   0693             _for3_cond:
0392   0693 FA FF FF      lea d, [bp + -1] ; $i
0393   0696 2A            mov b, [d]
0394   0697 38 00 00      mov c, 0
0395   069A             ; --- START RELATIONAL
0396   069A D7            push a
0397   069B 11            mov a, b
0398   069C FD 2E 04 00   mov32 cb, $00000004
0398   06A0 00 00 
0399   06A2 B0            cmp a, b
0400   06A3 FD 73         slt ; < (signed)
0401   06A5 E4            pop a
0402   06A6             ; --- END RELATIONAL
0403   06A6 C0 00 00      cmp b, 0
0404   06A9 C6 08 07      je _for3_exit
0405   06AC             _for3_block:
0406   06AC             ; output[j++] = base64_table[output_buffer[i]]; 
0407   06AC FA 07 00      lea d, [bp + 7] ; $output
0408   06AF FD 2A         mov d, [d]
0409   06B1 D7            push a
0410   06B2 DA            push d
0411   06B3 FA FD FF      lea d, [bp + -3] ; $j
0412   06B6 2A            mov b, [d]
0413   06B7 38 00 00      mov c, 0
0414   06BA 11            mov a, b
0415   06BB FD 77         inc b
0416   06BD FA FD FF      lea d, [bp + -3] ; $j
0417   06C0 FD 43         mov [d], b
0418   06C2 27            mov b, a
0419   06C3 E7            pop d
0420   06C4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0421   06C8 E4            pop a
0422   06C9 DA            push d
0423   06CA 3B 91 1A      mov d, _base64_table ; $base64_table
0424   06CD FD 2A         mov d, [d]
0425   06CF D7            push a
0426   06D0 DA            push d
0427   06D1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0428   06D4 D7            push a
0429   06D5 DA            push d
0430   06D6 FA FF FF      lea d, [bp + -1] ; $i
0431   06D9 2A            mov b, [d]
0432   06DA 38 00 00      mov c, 0
0433   06DD E7            pop d
0434   06DE 5A            add d, b
0435   06DF E4            pop a
0436   06E0 32            mov bl, [d]
0437   06E1 A7 00         mov bh, 0
0438   06E3 38 00 00      mov c, 0
0439   06E6 E7            pop d
0440   06E7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0441   06EB E4            pop a
0442   06EC 32            mov bl, [d]
0443   06ED A7 00         mov bh, 0
0444   06EF 38 00 00      mov c, 0
0445   06F2 E7            pop d
0446   06F3 FD 3E         mov [d], bl
0447   06F5             _for3_update:
0448   06F5 FA FF FF      lea d, [bp + -1] ; $i
0449   06F8 2A            mov b, [d]
0450   06F9 38 00 00      mov c, 0
0451   06FC 11            mov a, b
0452   06FD FD 77         inc b
0453   06FF FA FF FF      lea d, [bp + -1] ; $i
0454   0702 FD 43         mov [d], b
0455   0704 27            mov b, a
0456   0705 0A 93 06      jmp _for3_cond
0457   0708             _for3_exit:
0458   0708             ; i = 0; 
0459   0708 FA FF FF      lea d, [bp + -1] ; $i
0460   070B DA            push d
0461   070C FD 2E 00 00   mov32 cb, $00000000
0461   0710 00 00 
0462   0712 E7            pop d
0463   0713 FD 43         mov [d], b
0464   0715 0A 18 07      jmp _if2_exit
0465   0718             _if2_exit:
0466   0718 0A D9 04      jmp _while1_cond
0467   071B             _while1_exit:
0468   071B             ; if (i) { 
0469   071B             _if4_cond:
0470   071B FA FF FF      lea d, [bp + -1] ; $i
0471   071E 2A            mov b, [d]
0472   071F 38 00 00      mov c, 0
0473   0722 C0 00 00      cmp b, 0
0474   0725 C6 71 09      je _if4_exit
0475   0728             _if4_TRUE:
0476   0728             ; for (k = i; k < 3; k++) { 
0477   0728             _for5_init:
0478   0728 FA FB FF      lea d, [bp + -5] ; $k
0479   072B DA            push d
0480   072C FA FF FF      lea d, [bp + -1] ; $i
0481   072F 2A            mov b, [d]
0482   0730 38 00 00      mov c, 0
0483   0733 E7            pop d
0484   0734 FD 43         mov [d], b
0485   0736             _for5_cond:
0486   0736 FA FB FF      lea d, [bp + -5] ; $k
0487   0739 2A            mov b, [d]
0488   073A 38 00 00      mov c, 0
0489   073D             ; --- START RELATIONAL
0490   073D D7            push a
0491   073E 11            mov a, b
0492   073F FD 2E 03 00   mov32 cb, $00000003
0492   0743 00 00 
0493   0745 B0            cmp a, b
0494   0746 FD 73         slt ; < (signed)
0495   0748 E4            pop a
0496   0749             ; --- END RELATIONAL
0497   0749 C0 00 00      cmp b, 0
0498   074C C6 7B 07      je _for5_exit
0499   074F             _for5_block:
0500   074F             ; input_buffer[k] = '\0'; 
0501   074F FA F6 FF      lea d, [bp + -10] ; $input_buffer
0502   0752 D7            push a
0503   0753 DA            push d
0504   0754 FA FB FF      lea d, [bp + -5] ; $k
0505   0757 2A            mov b, [d]
0506   0758 38 00 00      mov c, 0
0507   075B E7            pop d
0508   075C 5A            add d, b
0509   075D E4            pop a
0510   075E DA            push d
0511   075F FD 2E 00 00   mov32 cb, $00000000
0511   0763 00 00 
0512   0765 E7            pop d
0513   0766 FD 3E         mov [d], bl
0514   0768             _for5_update:
0515   0768 FA FB FF      lea d, [bp + -5] ; $k
0516   076B 2A            mov b, [d]
0517   076C 38 00 00      mov c, 0
0518   076F 11            mov a, b
0519   0770 FD 77         inc b
0520   0772 FA FB FF      lea d, [bp + -5] ; $k
0521   0775 FD 43         mov [d], b
0522   0777 27            mov b, a
0523   0778 0A 36 07      jmp _for5_cond
0524   077B             _for5_exit:
0525   077B             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0526   077B FA F2 FF      lea d, [bp + -14] ; $output_buffer
0527   077E D7            push a
0528   077F DA            push d
0529   0780 FD 2E 00 00   mov32 cb, $00000000
0529   0784 00 00 
0530   0786 E7            pop d
0531   0787 5A            add d, b
0532   0788 E4            pop a
0533   0789 DA            push d
0534   078A FA F6 FF      lea d, [bp + -10] ; $input_buffer
0535   078D D7            push a
0536   078E DA            push d
0537   078F FD 2E 00 00   mov32 cb, $00000000
0537   0793 00 00 
0538   0795 E7            pop d
0539   0796 5A            add d, b
0540   0797 E4            pop a
0541   0798 32            mov bl, [d]
0542   0799 A7 00         mov bh, 0
0543   079B 38 00 00      mov c, 0
0544   079E D7            push a
0545   079F 11            mov a, b
0546   07A0 FD 2E FC 00   mov32 cb, $000000fc
0546   07A4 00 00 
0547   07A6 FD 92         and b, a ; &
0548   07A8 E4            pop a
0549   07A9             ; --- START SHIFT
0550   07A9 D7            push a
0551   07AA 11            mov a, b
0552   07AB FD 2E 02 00   mov32 cb, $00000002
0552   07AF 00 00 
0553   07B1 FD 39         mov c, b
0554   07B3 A5            ashr a, cl
0555   07B4 27            mov b, a
0556   07B5 E4            pop a
0557   07B6             ; --- END SHIFT
0558   07B6 E7            pop d
0559   07B7 FD 3E         mov [d], bl
0560   07B9             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0561   07B9 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0562   07BC D7            push a
0563   07BD DA            push d
0564   07BE FD 2E 01 00   mov32 cb, $00000001
0564   07C2 00 00 
0565   07C4 E7            pop d
0566   07C5 5A            add d, b
0567   07C6 E4            pop a
0568   07C7 DA            push d
0569   07C8 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0570   07CB D7            push a
0571   07CC DA            push d
0572   07CD FD 2E 00 00   mov32 cb, $00000000
0572   07D1 00 00 
0573   07D3 E7            pop d
0574   07D4 5A            add d, b
0575   07D5 E4            pop a
0576   07D6 32            mov bl, [d]
0577   07D7 A7 00         mov bh, 0
0578   07D9 38 00 00      mov c, 0
0579   07DC D7            push a
0580   07DD 11            mov a, b
0581   07DE FD 2E 03 00   mov32 cb, $00000003
0581   07E2 00 00 
0582   07E4 FD 92         and b, a ; &
0583   07E6 E4            pop a
0584   07E7             ; --- START SHIFT
0585   07E7 D7            push a
0586   07E8 11            mov a, b
0587   07E9 FD 2E 04 00   mov32 cb, $00000004
0587   07ED 00 00 
0588   07EF FD 39         mov c, b
0589   07F1 9D            shl a, cl
0590   07F2 27            mov b, a
0591   07F3 E4            pop a
0592   07F4             ; --- END SHIFT
0593   07F4             ; --- START TERMS
0594   07F4 D7            push a
0595   07F5 11            mov a, b
0596   07F6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0597   07F9 D7            push a
0598   07FA DA            push d
0599   07FB FD 2E 01 00   mov32 cb, $00000001
0599   07FF 00 00 
0600   0801 E7            pop d
0601   0802 5A            add d, b
0602   0803 E4            pop a
0603   0804 32            mov bl, [d]
0604   0805 A7 00         mov bh, 0
0605   0807 38 00 00      mov c, 0
0606   080A D7            push a
0607   080B 11            mov a, b
0608   080C FD 2E F0 00   mov32 cb, $000000f0
0608   0810 00 00 
0609   0812 FD 92         and b, a ; &
0610   0814 E4            pop a
0611   0815             ; --- START SHIFT
0612   0815 D7            push a
0613   0816 11            mov a, b
0614   0817 FD 2E 04 00   mov32 cb, $00000004
0614   081B 00 00 
0615   081D FD 39         mov c, b
0616   081F A5            ashr a, cl
0617   0820 27            mov b, a
0618   0821 E4            pop a
0619   0822             ; --- END SHIFT
0620   0822 56            add b, a
0621   0823 E4            pop a
0622   0824             ; --- END TERMS
0623   0824 E7            pop d
0624   0825 FD 3E         mov [d], bl
0625   0827             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0626   0827 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0627   082A D7            push a
0628   082B DA            push d
0629   082C FD 2E 02 00   mov32 cb, $00000002
0629   0830 00 00 
0630   0832 E7            pop d
0631   0833 5A            add d, b
0632   0834 E4            pop a
0633   0835 DA            push d
0634   0836 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0635   0839 D7            push a
0636   083A DA            push d
0637   083B FD 2E 01 00   mov32 cb, $00000001
0637   083F 00 00 
0638   0841 E7            pop d
0639   0842 5A            add d, b
0640   0843 E4            pop a
0641   0844 32            mov bl, [d]
0642   0845 A7 00         mov bh, 0
0643   0847 38 00 00      mov c, 0
0644   084A D7            push a
0645   084B 11            mov a, b
0646   084C FD 2E 0F 00   mov32 cb, $0000000f
0646   0850 00 00 
0647   0852 FD 92         and b, a ; &
0648   0854 E4            pop a
0649   0855             ; --- START SHIFT
0650   0855 D7            push a
0651   0856 11            mov a, b
0652   0857 FD 2E 02 00   mov32 cb, $00000002
0652   085B 00 00 
0653   085D FD 39         mov c, b
0654   085F 9D            shl a, cl
0655   0860 27            mov b, a
0656   0861 E4            pop a
0657   0862             ; --- END SHIFT
0658   0862             ; --- START TERMS
0659   0862 D7            push a
0660   0863 11            mov a, b
0661   0864 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0662   0867 D7            push a
0663   0868 DA            push d
0664   0869 FD 2E 02 00   mov32 cb, $00000002
0664   086D 00 00 
0665   086F E7            pop d
0666   0870 5A            add d, b
0667   0871 E4            pop a
0668   0872 32            mov bl, [d]
0669   0873 A7 00         mov bh, 0
0670   0875 38 00 00      mov c, 0
0671   0878 D7            push a
0672   0879 11            mov a, b
0673   087A FD 2E C0 00   mov32 cb, $000000c0
0673   087E 00 00 
0674   0880 FD 92         and b, a ; &
0675   0882 E4            pop a
0676   0883             ; --- START SHIFT
0677   0883 D7            push a
0678   0884 11            mov a, b
0679   0885 FD 2E 06 00   mov32 cb, $00000006
0679   0889 00 00 
0680   088B FD 39         mov c, b
0681   088D A5            ashr a, cl
0682   088E 27            mov b, a
0683   088F E4            pop a
0684   0890             ; --- END SHIFT
0685   0890 56            add b, a
0686   0891 E4            pop a
0687   0892             ; --- END TERMS
0688   0892 E7            pop d
0689   0893 FD 3E         mov [d], bl
0690   0895             ; for (k = 0; k < i + 1; k++) { 
0691   0895             _for6_init:
0692   0895 FA FB FF      lea d, [bp + -5] ; $k
0693   0898 DA            push d
0694   0899 FD 2E 00 00   mov32 cb, $00000000
0694   089D 00 00 
0695   089F E7            pop d
0696   08A0 FD 43         mov [d], b
0697   08A2             _for6_cond:
0698   08A2 FA FB FF      lea d, [bp + -5] ; $k
0699   08A5 2A            mov b, [d]
0700   08A6 38 00 00      mov c, 0
0701   08A9             ; --- START RELATIONAL
0702   08A9 D7            push a
0703   08AA 11            mov a, b
0704   08AB FA FF FF      lea d, [bp + -1] ; $i
0705   08AE 2A            mov b, [d]
0706   08AF 38 00 00      mov c, 0
0707   08B2             ; --- START TERMS
0708   08B2 D7            push a
0709   08B3 11            mov a, b
0710   08B4 FD 2E 01 00   mov32 cb, $00000001
0710   08B8 00 00 
0711   08BA 56            add b, a
0712   08BB E4            pop a
0713   08BC             ; --- END TERMS
0714   08BC B0            cmp a, b
0715   08BD FD 73         slt ; < (signed)
0716   08BF E4            pop a
0717   08C0             ; --- END RELATIONAL
0718   08C0 C0 00 00      cmp b, 0
0719   08C3 C6 22 09      je _for6_exit
0720   08C6             _for6_block:
0721   08C6             ; output[j++] = base64_table[output_buffer[k]]; 
0722   08C6 FA 07 00      lea d, [bp + 7] ; $output
0723   08C9 FD 2A         mov d, [d]
0724   08CB D7            push a
0725   08CC DA            push d
0726   08CD FA FD FF      lea d, [bp + -3] ; $j
0727   08D0 2A            mov b, [d]
0728   08D1 38 00 00      mov c, 0
0729   08D4 11            mov a, b
0730   08D5 FD 77         inc b
0731   08D7 FA FD FF      lea d, [bp + -3] ; $j
0732   08DA FD 43         mov [d], b
0733   08DC 27            mov b, a
0734   08DD E7            pop d
0735   08DE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0736   08E2 E4            pop a
0737   08E3 DA            push d
0738   08E4 3B 91 1A      mov d, _base64_table ; $base64_table
0739   08E7 FD 2A         mov d, [d]
0740   08E9 D7            push a
0741   08EA DA            push d
0742   08EB FA F2 FF      lea d, [bp + -14] ; $output_buffer
0743   08EE D7            push a
0744   08EF DA            push d
0745   08F0 FA FB FF      lea d, [bp + -5] ; $k
0746   08F3 2A            mov b, [d]
0747   08F4 38 00 00      mov c, 0
0748   08F7 E7            pop d
0749   08F8 5A            add d, b
0750   08F9 E4            pop a
0751   08FA 32            mov bl, [d]
0752   08FB A7 00         mov bh, 0
0753   08FD 38 00 00      mov c, 0
0754   0900 E7            pop d
0755   0901 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0756   0905 E4            pop a
0757   0906 32            mov bl, [d]
0758   0907 A7 00         mov bh, 0
0759   0909 38 00 00      mov c, 0
0760   090C E7            pop d
0761   090D FD 3E         mov [d], bl
0762   090F             _for6_update:
0763   090F FA FB FF      lea d, [bp + -5] ; $k
0764   0912 2A            mov b, [d]
0765   0913 38 00 00      mov c, 0
0766   0916 11            mov a, b
0767   0917 FD 77         inc b
0768   0919 FA FB FF      lea d, [bp + -5] ; $k
0769   091C FD 43         mov [d], b
0770   091E 27            mov b, a
0771   091F 0A A2 08      jmp _for6_cond
0772   0922             _for6_exit:
0773   0922             ; while (i++ < 3) { 
0774   0922             _while7_cond:
0775   0922 FA FF FF      lea d, [bp + -1] ; $i
0776   0925 2A            mov b, [d]
0777   0926 38 00 00      mov c, 0
0778   0929 11            mov a, b
0779   092A FD 77         inc b
0780   092C FA FF FF      lea d, [bp + -1] ; $i
0781   092F FD 43         mov [d], b
0782   0931 27            mov b, a
0783   0932             ; --- START RELATIONAL
0784   0932 D7            push a
0785   0933 11            mov a, b
0786   0934 FD 2E 03 00   mov32 cb, $00000003
0786   0938 00 00 
0787   093A B0            cmp a, b
0788   093B FD 73         slt ; < (signed)
0789   093D E4            pop a
0790   093E             ; --- END RELATIONAL
0791   093E C0 00 00      cmp b, 0
0792   0941 C6 6E 09      je _while7_exit
0793   0944             _while7_block:
0794   0944             ; output[j++] = '='; 
0795   0944 FA 07 00      lea d, [bp + 7] ; $output
0796   0947 FD 2A         mov d, [d]
0797   0949 D7            push a
0798   094A DA            push d
0799   094B FA FD FF      lea d, [bp + -3] ; $j
0800   094E 2A            mov b, [d]
0801   094F 38 00 00      mov c, 0
0802   0952 11            mov a, b
0803   0953 FD 77         inc b
0804   0955 FA FD FF      lea d, [bp + -3] ; $j
0805   0958 FD 43         mov [d], b
0806   095A 27            mov b, a
0807   095B E7            pop d
0808   095C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0809   0960 E4            pop a
0810   0961 DA            push d
0811   0962 FD 2E 3D 00   mov32 cb, $0000003d
0811   0966 00 00 
0812   0968 E7            pop d
0813   0969 FD 3E         mov [d], bl
0814   096B 0A 22 09      jmp _while7_cond
0815   096E             _while7_exit:
0816   096E 0A 71 09      jmp _if4_exit
0817   0971             _if4_exit:
0818   0971             ; output[j] = '\0'; 
0819   0971 FA 07 00      lea d, [bp + 7] ; $output
0820   0974 FD 2A         mov d, [d]
0821   0976 D7            push a
0822   0977 DA            push d
0823   0978 FA FD FF      lea d, [bp + -3] ; $j
0824   097B 2A            mov b, [d]
0825   097C 38 00 00      mov c, 0
0826   097F E7            pop d
0827   0980 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0828   0984 E4            pop a
0829   0985 DA            push d
0830   0986 FD 2E 00 00   mov32 cb, $00000000
0830   098A 00 00 
0831   098C E7            pop d
0832   098D FD 3E         mov [d], bl
0833   098F F9            leave
0834   0990 09            ret
0835   0991             
0836   0991             base64_char_value:
0837   0991 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0838   0994             ; if (c >= 'A' && c <= 'Z') return c - 'A'; 
0839   0994             _if8_cond:
0840   0994 FA 05 00      lea d, [bp + 5] ; $c
0841   0997 32            mov bl, [d]
0842   0998 A7 00         mov bh, 0
0843   099A 38 00 00      mov c, 0
0844   099D             ; --- START RELATIONAL
0845   099D D7            push a
0846   099E 11            mov a, b
0847   099F FD 2E 41 00   mov32 cb, $00000041
0847   09A3 00 00 
0848   09A5 B0            cmp a, b
0849   09A6 FD 80         sge ; >=
0850   09A8 E4            pop a
0851   09A9             ; --- END RELATIONAL
0852   09A9             ; --- START LOGICAL AND
0853   09A9 D7            push a
0854   09AA 11            mov a, b
0855   09AB FA 05 00      lea d, [bp + 5] ; $c
0856   09AE 32            mov bl, [d]
0857   09AF A7 00         mov bh, 0
0858   09B1 38 00 00      mov c, 0
0859   09B4             ; --- START RELATIONAL
0860   09B4 D7            push a
0861   09B5 11            mov a, b
0862   09B6 FD 2E 5A 00   mov32 cb, $0000005a
0862   09BA 00 00 
0863   09BC B0            cmp a, b
0864   09BD FD 74         sle ; <= (signed)
0865   09BF E4            pop a
0866   09C0             ; --- END RELATIONAL
0867   09C0 FD A7         sand a, b
0868   09C2 E4            pop a
0869   09C3             ; --- END LOGICAL AND
0870   09C3 C0 00 00      cmp b, 0
0871   09C6 C6 E2 09      je _if8_exit
0872   09C9             _if8_TRUE:
0873   09C9             ; return c - 'A'; 
0874   09C9 FA 05 00      lea d, [bp + 5] ; $c
0875   09CC 32            mov bl, [d]
0876   09CD A7 00         mov bh, 0
0877   09CF 38 00 00      mov c, 0
0878   09D2             ; --- START TERMS
0879   09D2 D7            push a
0880   09D3 11            mov a, b
0881   09D4 FD 2E 41 00   mov32 cb, $00000041
0881   09D8 00 00 
0882   09DA 60            sub a, b
0883   09DB 27            mov b, a
0884   09DC E4            pop a
0885   09DD             ; --- END TERMS
0886   09DD F9            leave
0887   09DE 09            ret
0888   09DF 0A E2 09      jmp _if8_exit
0889   09E2             _if8_exit:
0890   09E2             ; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
0891   09E2             _if9_cond:
0892   09E2 FA 05 00      lea d, [bp + 5] ; $c
0893   09E5 32            mov bl, [d]
0894   09E6 A7 00         mov bh, 0
0895   09E8 38 00 00      mov c, 0
0896   09EB             ; --- START RELATIONAL
0897   09EB D7            push a
0898   09EC 11            mov a, b
0899   09ED FD 2E 61 00   mov32 cb, $00000061
0899   09F1 00 00 
0900   09F3 B0            cmp a, b
0901   09F4 FD 80         sge ; >=
0902   09F6 E4            pop a
0903   09F7             ; --- END RELATIONAL
0904   09F7             ; --- START LOGICAL AND
0905   09F7 D7            push a
0906   09F8 11            mov a, b
0907   09F9 FA 05 00      lea d, [bp + 5] ; $c
0908   09FC 32            mov bl, [d]
0909   09FD A7 00         mov bh, 0
0910   09FF 38 00 00      mov c, 0
0911   0A02             ; --- START RELATIONAL
0912   0A02 D7            push a
0913   0A03 11            mov a, b
0914   0A04 FD 2E 7A 00   mov32 cb, $0000007a
0914   0A08 00 00 
0915   0A0A B0            cmp a, b
0916   0A0B FD 74         sle ; <= (signed)
0917   0A0D E4            pop a
0918   0A0E             ; --- END RELATIONAL
0919   0A0E FD A7         sand a, b
0920   0A10 E4            pop a
0921   0A11             ; --- END LOGICAL AND
0922   0A11 C0 00 00      cmp b, 0
0923   0A14 C6 38 0A      je _if9_exit
0924   0A17             _if9_TRUE:
0925   0A17             ; return c - 'a' + 26; 
0926   0A17 FA 05 00      lea d, [bp + 5] ; $c
0927   0A1A 32            mov bl, [d]
0928   0A1B A7 00         mov bh, 0
0929   0A1D 38 00 00      mov c, 0
0930   0A20             ; --- START TERMS
0931   0A20 D7            push a
0932   0A21 11            mov a, b
0933   0A22 FD 2E 61 00   mov32 cb, $00000061
0933   0A26 00 00 
0934   0A28 60            sub a, b
0935   0A29 27            mov b, a
0936   0A2A 11            mov a, b
0937   0A2B FD 2E 1A 00   mov32 cb, $0000001a
0937   0A2F 00 00 
0938   0A31 56            add b, a
0939   0A32 E4            pop a
0940   0A33             ; --- END TERMS
0941   0A33 F9            leave
0942   0A34 09            ret
0943   0A35 0A 38 0A      jmp _if9_exit
0944   0A38             _if9_exit:
0945   0A38             ; if (c >= '0' && c <= '9') return c - '0' + 52; 
0946   0A38             _if10_cond:
0947   0A38 FA 05 00      lea d, [bp + 5] ; $c
0948   0A3B 32            mov bl, [d]
0949   0A3C A7 00         mov bh, 0
0950   0A3E 38 00 00      mov c, 0
0951   0A41             ; --- START RELATIONAL
0952   0A41 D7            push a
0953   0A42 11            mov a, b
0954   0A43 FD 2E 30 00   mov32 cb, $00000030
0954   0A47 00 00 
0955   0A49 B0            cmp a, b
0956   0A4A FD 80         sge ; >=
0957   0A4C E4            pop a
0958   0A4D             ; --- END RELATIONAL
0959   0A4D             ; --- START LOGICAL AND
0960   0A4D D7            push a
0961   0A4E 11            mov a, b
0962   0A4F FA 05 00      lea d, [bp + 5] ; $c
0963   0A52 32            mov bl, [d]
0964   0A53 A7 00         mov bh, 0
0965   0A55 38 00 00      mov c, 0
0966   0A58             ; --- START RELATIONAL
0967   0A58 D7            push a
0968   0A59 11            mov a, b
0969   0A5A FD 2E 39 00   mov32 cb, $00000039
0969   0A5E 00 00 
0970   0A60 B0            cmp a, b
0971   0A61 FD 74         sle ; <= (signed)
0972   0A63 E4            pop a
0973   0A64             ; --- END RELATIONAL
0974   0A64 FD A7         sand a, b
0975   0A66 E4            pop a
0976   0A67             ; --- END LOGICAL AND
0977   0A67 C0 00 00      cmp b, 0
0978   0A6A C6 8E 0A      je _if10_exit
0979   0A6D             _if10_TRUE:
0980   0A6D             ; return c - '0' + 52; 
0981   0A6D FA 05 00      lea d, [bp + 5] ; $c
0982   0A70 32            mov bl, [d]
0983   0A71 A7 00         mov bh, 0
0984   0A73 38 00 00      mov c, 0
0985   0A76             ; --- START TERMS
0986   0A76 D7            push a
0987   0A77 11            mov a, b
0988   0A78 FD 2E 30 00   mov32 cb, $00000030
0988   0A7C 00 00 
0989   0A7E 60            sub a, b
0990   0A7F 27            mov b, a
0991   0A80 11            mov a, b
0992   0A81 FD 2E 34 00   mov32 cb, $00000034
0992   0A85 00 00 
0993   0A87 56            add b, a
0994   0A88 E4            pop a
0995   0A89             ; --- END TERMS
0996   0A89 F9            leave
0997   0A8A 09            ret
0998   0A8B 0A 8E 0A      jmp _if10_exit
0999   0A8E             _if10_exit:
1000   0A8E             ; if (c == '+') return 62; 
1001   0A8E             _if11_cond:
1002   0A8E FA 05 00      lea d, [bp + 5] ; $c
1003   0A91 32            mov bl, [d]
1004   0A92 A7 00         mov bh, 0
1005   0A94 38 00 00      mov c, 0
1006   0A97             ; --- START RELATIONAL
1007   0A97 D7            push a
1008   0A98 11            mov a, b
1009   0A99 FD 2E 2B 00   mov32 cb, $0000002b
1009   0A9D 00 00 
1010   0A9F B0            cmp a, b
1011   0AA0 FD 71         seq ; ==
1012   0AA2 E4            pop a
1013   0AA3             ; --- END RELATIONAL
1014   0AA3 C0 00 00      cmp b, 0
1015   0AA6 C6 B4 0A      je _if11_exit
1016   0AA9             _if11_TRUE:
1017   0AA9             ; return 62; 
1018   0AA9 FD 2E 3E 00   mov32 cb, $0000003e
1018   0AAD 00 00 
1019   0AAF F9            leave
1020   0AB0 09            ret
1021   0AB1 0A B4 0A      jmp _if11_exit
1022   0AB4             _if11_exit:
1023   0AB4             ; if (c == '/') return 63; 
1024   0AB4             _if12_cond:
1025   0AB4 FA 05 00      lea d, [bp + 5] ; $c
1026   0AB7 32            mov bl, [d]
1027   0AB8 A7 00         mov bh, 0
1028   0ABA 38 00 00      mov c, 0
1029   0ABD             ; --- START RELATIONAL
1030   0ABD D7            push a
1031   0ABE 11            mov a, b
1032   0ABF FD 2E 2F 00   mov32 cb, $0000002f
1032   0AC3 00 00 
1033   0AC5 B0            cmp a, b
1034   0AC6 FD 71         seq ; ==
1035   0AC8 E4            pop a
1036   0AC9             ; --- END RELATIONAL
1037   0AC9 C0 00 00      cmp b, 0
1038   0ACC C6 DA 0A      je _if12_exit
1039   0ACF             _if12_TRUE:
1040   0ACF             ; return 63; 
1041   0ACF FD 2E 3F 00   mov32 cb, $0000003f
1041   0AD3 00 00 
1042   0AD5 F9            leave
1043   0AD6 09            ret
1044   0AD7 0A DA 0A      jmp _if12_exit
1045   0ADA             _if12_exit:
1046   0ADA             ; return -1; 
1047   0ADA FD 2E 01 00   mov32 cb, $00000001
1047   0ADE 00 00 
1048   0AE0 FD 97         neg b
1049   0AE2 F9            leave
1050   0AE3 09            ret
1051   0AE4             
1052   0AE4             base64_decode:
1053   0AE4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1054   0AE7             ; int i = 0, j = 0, k = 0; 
1055   0AE7 52 02 00      sub sp, 2
1056   0AEA             ; --- START LOCAL VAR INITIALIZATION
1057   0AEA FA FF FF      lea d, [bp + -1] ; $i
1058   0AED DA            push d
1059   0AEE FD 2E 00 00   mov32 cb, $00000000
1059   0AF2 00 00 
1060   0AF4 E7            pop d
1061   0AF5 FD 43         mov [d], b
1062   0AF7             ; --- END LOCAL VAR INITIALIZATION
1063   0AF7 52 02 00      sub sp, 2
1064   0AFA             ; --- START LOCAL VAR INITIALIZATION
1065   0AFA FA FD FF      lea d, [bp + -3] ; $j
1066   0AFD DA            push d
1067   0AFE FD 2E 00 00   mov32 cb, $00000000
1067   0B02 00 00 
1068   0B04 E7            pop d
1069   0B05 FD 43         mov [d], b
1070   0B07             ; --- END LOCAL VAR INITIALIZATION
1071   0B07 52 02 00      sub sp, 2
1072   0B0A             ; --- START LOCAL VAR INITIALIZATION
1073   0B0A FA FB FF      lea d, [bp + -5] ; $k
1074   0B0D DA            push d
1075   0B0E FD 2E 00 00   mov32 cb, $00000000
1075   0B12 00 00 
1076   0B14 E7            pop d
1077   0B15 FD 43         mov [d], b
1078   0B17             ; --- END LOCAL VAR INITIALIZATION
1079   0B17             ; int input_len; 
1080   0B17 52 02 00      sub sp, 2
1081   0B1A             ; unsigned char input_buffer[4]; 
1082   0B1A 52 04 00      sub sp, 4
1083   0B1D             ; unsigned char output_buffer[3]; 
1084   0B1D 52 03 00      sub sp, 3
1085   0B20             ; input_len = strlen(input); 
1086   0B20 FA F9 FF      lea d, [bp + -7] ; $input_len
1087   0B23 DA            push d
1088   0B24             ; --- START FUNCTION CALL
1089   0B24 FA 05 00      lea d, [bp + 5] ; $input
1090   0B27 2A            mov b, [d]
1091   0B28 38 00 00      mov c, 0
1092   0B2B FD AB         swp b
1093   0B2D D8            push b
1094   0B2E 07 F5 19      call strlen
1095   0B31 51 02 00      add sp, 2
1096   0B34             ; --- END FUNCTION CALL
1097   0B34 E7            pop d
1098   0B35 FD 43         mov [d], b
1099   0B37             ; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1100   0B37             _while13_cond:
1101   0B37 FA F9 FF      lea d, [bp + -7] ; $input_len
1102   0B3A 2A            mov b, [d]
1103   0B3B 38 00 00      mov c, 0
1104   0B3E 11            mov a, b
1105   0B3F FD 7D         dec b
1106   0B41 FA F9 FF      lea d, [bp + -7] ; $input_len
1107   0B44 FD 43         mov [d], b
1108   0B46 27            mov b, a
1109   0B47             ; --- START LOGICAL AND
1110   0B47 D7            push a
1111   0B48 11            mov a, b
1112   0B49 FA 05 00      lea d, [bp + 5] ; $input
1113   0B4C FD 2A         mov d, [d]
1114   0B4E D7            push a
1115   0B4F DA            push d
1116   0B50 FA FB FF      lea d, [bp + -5] ; $k
1117   0B53 2A            mov b, [d]
1118   0B54 38 00 00      mov c, 0
1119   0B57 E7            pop d
1120   0B58 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1121   0B5C E4            pop a
1122   0B5D 32            mov bl, [d]
1123   0B5E A7 00         mov bh, 0
1124   0B60 38 00 00      mov c, 0
1125   0B63             ; --- START RELATIONAL
1126   0B63 D7            push a
1127   0B64 11            mov a, b
1128   0B65 FD 2E 3D 00   mov32 cb, $0000003d
1128   0B69 00 00 
1129   0B6B B0            cmp a, b
1130   0B6C FD 72         sneq ; !=
1131   0B6E E4            pop a
1132   0B6F             ; --- END RELATIONAL
1133   0B6F FD A7         sand a, b
1134   0B71 11            mov a, b
1135   0B72             ; --- START FUNCTION CALL
1136   0B72 FA 05 00      lea d, [bp + 5] ; $input
1137   0B75 FD 2A         mov d, [d]
1138   0B77 D7            push a
1139   0B78 DA            push d
1140   0B79 FA FB FF      lea d, [bp + -5] ; $k
1141   0B7C 2A            mov b, [d]
1142   0B7D 38 00 00      mov c, 0
1143   0B80 E7            pop d
1144   0B81 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1145   0B85 E4            pop a
1146   0B86 32            mov bl, [d]
1147   0B87 A7 00         mov bh, 0
1148   0B89 38 00 00      mov c, 0
1149   0B8C DD            push bl
1150   0B8D 07 91 09      call base64_char_value
1151   0B90 51 01 00      add sp, 1
1152   0B93             ; --- END FUNCTION CALL
1153   0B93             ; --- START RELATIONAL
1154   0B93 D7            push a
1155   0B94 11            mov a, b
1156   0B95 FD 2E 01 00   mov32 cb, $00000001
1156   0B99 00 00 
1157   0B9B FD 97         neg b
1158   0B9D B0            cmp a, b
1159   0B9E FD 72         sneq ; !=
1160   0BA0 E4            pop a
1161   0BA1             ; --- END RELATIONAL
1162   0BA1 FD A7         sand a, b
1163   0BA3 E4            pop a
1164   0BA4             ; --- END LOGICAL AND
1165   0BA4 C0 00 00      cmp b, 0
1166   0BA7 C6 13 0E      je _while13_exit
1167   0BAA             _while13_block:
1168   0BAA             ; input_buffer[i++] = input[k++]; 
1169   0BAA FA F5 FF      lea d, [bp + -11] ; $input_buffer
1170   0BAD D7            push a
1171   0BAE DA            push d
1172   0BAF FA FF FF      lea d, [bp + -1] ; $i
1173   0BB2 2A            mov b, [d]
1174   0BB3 38 00 00      mov c, 0
1175   0BB6 11            mov a, b
1176   0BB7 FD 77         inc b
1177   0BB9 FA FF FF      lea d, [bp + -1] ; $i
1178   0BBC FD 43         mov [d], b
1179   0BBE 27            mov b, a
1180   0BBF E7            pop d
1181   0BC0 5A            add d, b
1182   0BC1 E4            pop a
1183   0BC2 DA            push d
1184   0BC3 FA 05 00      lea d, [bp + 5] ; $input
1185   0BC6 FD 2A         mov d, [d]
1186   0BC8 D7            push a
1187   0BC9 DA            push d
1188   0BCA FA FB FF      lea d, [bp + -5] ; $k
1189   0BCD 2A            mov b, [d]
1190   0BCE 38 00 00      mov c, 0
1191   0BD1 11            mov a, b
1192   0BD2 FD 77         inc b
1193   0BD4 FA FB FF      lea d, [bp + -5] ; $k
1194   0BD7 FD 43         mov [d], b
1195   0BD9 27            mov b, a
1196   0BDA E7            pop d
1197   0BDB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1198   0BDF E4            pop a
1199   0BE0 32            mov bl, [d]
1200   0BE1 A7 00         mov bh, 0
1201   0BE3 38 00 00      mov c, 0
1202   0BE6 E7            pop d
1203   0BE7 FD 3E         mov [d], bl
1204   0BE9             ; if (i == 4) { 
1205   0BE9             _if14_cond:
1206   0BE9 FA FF FF      lea d, [bp + -1] ; $i
1207   0BEC 2A            mov b, [d]
1208   0BED 38 00 00      mov c, 0
1209   0BF0             ; --- START RELATIONAL
1210   0BF0 D7            push a
1211   0BF1 11            mov a, b
1212   0BF2 FD 2E 04 00   mov32 cb, $00000004
1212   0BF6 00 00 
1213   0BF8 B0            cmp a, b
1214   0BF9 FD 71         seq ; ==
1215   0BFB E4            pop a
1216   0BFC             ; --- END RELATIONAL
1217   0BFC C0 00 00      cmp b, 0
1218   0BFF C6 10 0E      je _if14_exit
1219   0C02             _if14_TRUE:
1220   0C02             ; for (i = 0; i < 4; i++) { 
1221   0C02             _for15_init:
1222   0C02 FA FF FF      lea d, [bp + -1] ; $i
1223   0C05 DA            push d
1224   0C06 FD 2E 00 00   mov32 cb, $00000000
1224   0C0A 00 00 
1225   0C0C E7            pop d
1226   0C0D FD 43         mov [d], b
1227   0C0F             _for15_cond:
1228   0C0F FA FF FF      lea d, [bp + -1] ; $i
1229   0C12 2A            mov b, [d]
1230   0C13 38 00 00      mov c, 0
1231   0C16             ; --- START RELATIONAL
1232   0C16 D7            push a
1233   0C17 11            mov a, b
1234   0C18 FD 2E 04 00   mov32 cb, $00000004
1234   0C1C 00 00 
1235   0C1E B0            cmp a, b
1236   0C1F FD 73         slt ; < (signed)
1237   0C21 E4            pop a
1238   0C22             ; --- END RELATIONAL
1239   0C22 C0 00 00      cmp b, 0
1240   0C25 C6 6A 0C      je _for15_exit
1241   0C28             _for15_block:
1242   0C28             ; input_buffer[i] = base64_char_value(input_buffer[i]); 
1243   0C28 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1244   0C2B D7            push a
1245   0C2C DA            push d
1246   0C2D FA FF FF      lea d, [bp + -1] ; $i
1247   0C30 2A            mov b, [d]
1248   0C31 38 00 00      mov c, 0
1249   0C34 E7            pop d
1250   0C35 5A            add d, b
1251   0C36 E4            pop a
1252   0C37 DA            push d
1253   0C38             ; --- START FUNCTION CALL
1254   0C38 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1255   0C3B D7            push a
1256   0C3C DA            push d
1257   0C3D FA FF FF      lea d, [bp + -1] ; $i
1258   0C40 2A            mov b, [d]
1259   0C41 38 00 00      mov c, 0
1260   0C44 E7            pop d
1261   0C45 5A            add d, b
1262   0C46 E4            pop a
1263   0C47 32            mov bl, [d]
1264   0C48 A7 00         mov bh, 0
1265   0C4A 38 00 00      mov c, 0
1266   0C4D DD            push bl
1267   0C4E 07 91 09      call base64_char_value
1268   0C51 51 01 00      add sp, 1
1269   0C54             ; --- END FUNCTION CALL
1270   0C54 E7            pop d
1271   0C55 FD 3E         mov [d], bl
1272   0C57             _for15_update:
1273   0C57 FA FF FF      lea d, [bp + -1] ; $i
1274   0C5A 2A            mov b, [d]
1275   0C5B 38 00 00      mov c, 0
1276   0C5E 11            mov a, b
1277   0C5F FD 77         inc b
1278   0C61 FA FF FF      lea d, [bp + -1] ; $i
1279   0C64 FD 43         mov [d], b
1280   0C66 27            mov b, a
1281   0C67 0A 0F 0C      jmp _for15_cond
1282   0C6A             _for15_exit:
1283   0C6A             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1284   0C6A FA F2 FF      lea d, [bp + -14] ; $output_buffer
1285   0C6D D7            push a
1286   0C6E DA            push d
1287   0C6F FD 2E 00 00   mov32 cb, $00000000
1287   0C73 00 00 
1288   0C75 E7            pop d
1289   0C76 5A            add d, b
1290   0C77 E4            pop a
1291   0C78 DA            push d
1292   0C79 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1293   0C7C D7            push a
1294   0C7D DA            push d
1295   0C7E FD 2E 00 00   mov32 cb, $00000000
1295   0C82 00 00 
1296   0C84 E7            pop d
1297   0C85 5A            add d, b
1298   0C86 E4            pop a
1299   0C87 32            mov bl, [d]
1300   0C88 A7 00         mov bh, 0
1301   0C8A 38 00 00      mov c, 0
1302   0C8D             ; --- START SHIFT
1303   0C8D D7            push a
1304   0C8E 11            mov a, b
1305   0C8F FD 2E 02 00   mov32 cb, $00000002
1305   0C93 00 00 
1306   0C95 FD 39         mov c, b
1307   0C97 9D            shl a, cl
1308   0C98 27            mov b, a
1309   0C99 E4            pop a
1310   0C9A             ; --- END SHIFT
1311   0C9A             ; --- START TERMS
1312   0C9A D7            push a
1313   0C9B 11            mov a, b
1314   0C9C FA F5 FF      lea d, [bp + -11] ; $input_buffer
1315   0C9F D7            push a
1316   0CA0 DA            push d
1317   0CA1 FD 2E 01 00   mov32 cb, $00000001
1317   0CA5 00 00 
1318   0CA7 E7            pop d
1319   0CA8 5A            add d, b
1320   0CA9 E4            pop a
1321   0CAA 32            mov bl, [d]
1322   0CAB A7 00         mov bh, 0
1323   0CAD 38 00 00      mov c, 0
1324   0CB0 D7            push a
1325   0CB1 11            mov a, b
1326   0CB2 FD 2E 30 00   mov32 cb, $00000030
1326   0CB6 00 00 
1327   0CB8 FD 92         and b, a ; &
1328   0CBA E4            pop a
1329   0CBB             ; --- START SHIFT
1330   0CBB D7            push a
1331   0CBC 11            mov a, b
1332   0CBD FD 2E 04 00   mov32 cb, $00000004
1332   0CC1 00 00 
1333   0CC3 FD 39         mov c, b
1334   0CC5 A5            ashr a, cl
1335   0CC6 27            mov b, a
1336   0CC7 E4            pop a
1337   0CC8             ; --- END SHIFT
1338   0CC8 56            add b, a
1339   0CC9 E4            pop a
1340   0CCA             ; --- END TERMS
1341   0CCA E7            pop d
1342   0CCB FD 3E         mov [d], bl
1343   0CCD             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1344   0CCD FA F2 FF      lea d, [bp + -14] ; $output_buffer
1345   0CD0 D7            push a
1346   0CD1 DA            push d
1347   0CD2 FD 2E 01 00   mov32 cb, $00000001
1347   0CD6 00 00 
1348   0CD8 E7            pop d
1349   0CD9 5A            add d, b
1350   0CDA E4            pop a
1351   0CDB DA            push d
1352   0CDC FA F5 FF      lea d, [bp + -11] ; $input_buffer
1353   0CDF D7            push a
1354   0CE0 DA            push d
1355   0CE1 FD 2E 01 00   mov32 cb, $00000001
1355   0CE5 00 00 
1356   0CE7 E7            pop d
1357   0CE8 5A            add d, b
1358   0CE9 E4            pop a
1359   0CEA 32            mov bl, [d]
1360   0CEB A7 00         mov bh, 0
1361   0CED 38 00 00      mov c, 0
1362   0CF0 D7            push a
1363   0CF1 11            mov a, b
1364   0CF2 FD 2E 0F 00   mov32 cb, $0000000f
1364   0CF6 00 00 
1365   0CF8 FD 92         and b, a ; &
1366   0CFA E4            pop a
1367   0CFB             ; --- START SHIFT
1368   0CFB D7            push a
1369   0CFC 11            mov a, b
1370   0CFD FD 2E 04 00   mov32 cb, $00000004
1370   0D01 00 00 
1371   0D03 FD 39         mov c, b
1372   0D05 9D            shl a, cl
1373   0D06 27            mov b, a
1374   0D07 E4            pop a
1375   0D08             ; --- END SHIFT
1376   0D08             ; --- START TERMS
1377   0D08 D7            push a
1378   0D09 11            mov a, b
1379   0D0A FA F5 FF      lea d, [bp + -11] ; $input_buffer
1380   0D0D D7            push a
1381   0D0E DA            push d
1382   0D0F FD 2E 02 00   mov32 cb, $00000002
1382   0D13 00 00 
1383   0D15 E7            pop d
1384   0D16 5A            add d, b
1385   0D17 E4            pop a
1386   0D18 32            mov bl, [d]
1387   0D19 A7 00         mov bh, 0
1388   0D1B 38 00 00      mov c, 0
1389   0D1E D7            push a
1390   0D1F 11            mov a, b
1391   0D20 FD 2E 3C 00   mov32 cb, $0000003c
1391   0D24 00 00 
1392   0D26 FD 92         and b, a ; &
1393   0D28 E4            pop a
1394   0D29             ; --- START SHIFT
1395   0D29 D7            push a
1396   0D2A 11            mov a, b
1397   0D2B FD 2E 02 00   mov32 cb, $00000002
1397   0D2F 00 00 
1398   0D31 FD 39         mov c, b
1399   0D33 A5            ashr a, cl
1400   0D34 27            mov b, a
1401   0D35 E4            pop a
1402   0D36             ; --- END SHIFT
1403   0D36 56            add b, a
1404   0D37 E4            pop a
1405   0D38             ; --- END TERMS
1406   0D38 E7            pop d
1407   0D39 FD 3E         mov [d], bl
1408   0D3B             ; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
1409   0D3B FA F2 FF      lea d, [bp + -14] ; $output_buffer
1410   0D3E D7            push a
1411   0D3F DA            push d
1412   0D40 FD 2E 02 00   mov32 cb, $00000002
1412   0D44 00 00 
1413   0D46 E7            pop d
1414   0D47 5A            add d, b
1415   0D48 E4            pop a
1416   0D49 DA            push d
1417   0D4A FA F5 FF      lea d, [bp + -11] ; $input_buffer
1418   0D4D D7            push a
1419   0D4E DA            push d
1420   0D4F FD 2E 02 00   mov32 cb, $00000002
1420   0D53 00 00 
1421   0D55 E7            pop d
1422   0D56 5A            add d, b
1423   0D57 E4            pop a
1424   0D58 32            mov bl, [d]
1425   0D59 A7 00         mov bh, 0
1426   0D5B 38 00 00      mov c, 0
1427   0D5E D7            push a
1428   0D5F 11            mov a, b
1429   0D60 FD 2E 03 00   mov32 cb, $00000003
1429   0D64 00 00 
1430   0D66 FD 92         and b, a ; &
1431   0D68 E4            pop a
1432   0D69             ; --- START SHIFT
1433   0D69 D7            push a
1434   0D6A 11            mov a, b
1435   0D6B FD 2E 06 00   mov32 cb, $00000006
1435   0D6F 00 00 
1436   0D71 FD 39         mov c, b
1437   0D73 9D            shl a, cl
1438   0D74 27            mov b, a
1439   0D75 E4            pop a
1440   0D76             ; --- END SHIFT
1441   0D76             ; --- START TERMS
1442   0D76 D7            push a
1443   0D77 11            mov a, b
1444   0D78 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1445   0D7B D7            push a
1446   0D7C DA            push d
1447   0D7D FD 2E 03 00   mov32 cb, $00000003
1447   0D81 00 00 
1448   0D83 E7            pop d
1449   0D84 5A            add d, b
1450   0D85 E4            pop a
1451   0D86 32            mov bl, [d]
1452   0D87 A7 00         mov bh, 0
1453   0D89 38 00 00      mov c, 0
1454   0D8C 56            add b, a
1455   0D8D E4            pop a
1456   0D8E             ; --- END TERMS
1457   0D8E E7            pop d
1458   0D8F FD 3E         mov [d], bl
1459   0D91             ; for (i = 0; i < 3; i++) { 
1460   0D91             _for16_init:
1461   0D91 FA FF FF      lea d, [bp + -1] ; $i
1462   0D94 DA            push d
1463   0D95 FD 2E 00 00   mov32 cb, $00000000
1463   0D99 00 00 
1464   0D9B E7            pop d
1465   0D9C FD 43         mov [d], b
1466   0D9E             _for16_cond:
1467   0D9E FA FF FF      lea d, [bp + -1] ; $i
1468   0DA1 2A            mov b, [d]
1469   0DA2 38 00 00      mov c, 0
1470   0DA5             ; --- START RELATIONAL
1471   0DA5 D7            push a
1472   0DA6 11            mov a, b
1473   0DA7 FD 2E 03 00   mov32 cb, $00000003
1473   0DAB 00 00 
1474   0DAD B0            cmp a, b
1475   0DAE FD 73         slt ; < (signed)
1476   0DB0 E4            pop a
1477   0DB1             ; --- END RELATIONAL
1478   0DB1 C0 00 00      cmp b, 0
1479   0DB4 C6 00 0E      je _for16_exit
1480   0DB7             _for16_block:
1481   0DB7             ; output[j++] = output_buffer[i]; 
1482   0DB7 FA 07 00      lea d, [bp + 7] ; $output
1483   0DBA FD 2A         mov d, [d]
1484   0DBC D7            push a
1485   0DBD DA            push d
1486   0DBE FA FD FF      lea d, [bp + -3] ; $j
1487   0DC1 2A            mov b, [d]
1488   0DC2 38 00 00      mov c, 0
1489   0DC5 11            mov a, b
1490   0DC6 FD 77         inc b
1491   0DC8 FA FD FF      lea d, [bp + -3] ; $j
1492   0DCB FD 43         mov [d], b
1493   0DCD 27            mov b, a
1494   0DCE E7            pop d
1495   0DCF FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1496   0DD3 E4            pop a
1497   0DD4 DA            push d
1498   0DD5 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1499   0DD8 D7            push a
1500   0DD9 DA            push d
1501   0DDA FA FF FF      lea d, [bp + -1] ; $i
1502   0DDD 2A            mov b, [d]
1503   0DDE 38 00 00      mov c, 0
1504   0DE1 E7            pop d
1505   0DE2 5A            add d, b
1506   0DE3 E4            pop a
1507   0DE4 32            mov bl, [d]
1508   0DE5 A7 00         mov bh, 0
1509   0DE7 38 00 00      mov c, 0
1510   0DEA E7            pop d
1511   0DEB FD 3E         mov [d], bl
1512   0DED             _for16_update:
1513   0DED FA FF FF      lea d, [bp + -1] ; $i
1514   0DF0 2A            mov b, [d]
1515   0DF1 38 00 00      mov c, 0
1516   0DF4 11            mov a, b
1517   0DF5 FD 77         inc b
1518   0DF7 FA FF FF      lea d, [bp + -1] ; $i
1519   0DFA FD 43         mov [d], b
1520   0DFC 27            mov b, a
1521   0DFD 0A 9E 0D      jmp _for16_cond
1522   0E00             _for16_exit:
1523   0E00             ; i = 0; 
1524   0E00 FA FF FF      lea d, [bp + -1] ; $i
1525   0E03 DA            push d
1526   0E04 FD 2E 00 00   mov32 cb, $00000000
1526   0E08 00 00 
1527   0E0A E7            pop d
1528   0E0B FD 43         mov [d], b
1529   0E0D 0A 10 0E      jmp _if14_exit
1530   0E10             _if14_exit:
1531   0E10 0A 37 0B      jmp _while13_cond
1532   0E13             _while13_exit:
1533   0E13             ; if (i) { 
1534   0E13             _if17_cond:
1535   0E13 FA FF FF      lea d, [bp + -1] ; $i
1536   0E16 2A            mov b, [d]
1537   0E17 38 00 00      mov c, 0
1538   0E1A C0 00 00      cmp b, 0
1539   0E1D C6 2A 10      je _if17_exit
1540   0E20             _if17_TRUE:
1541   0E20             ; for (k = i; k < 4; k++) { 
1542   0E20             _for18_init:
1543   0E20 FA FB FF      lea d, [bp + -5] ; $k
1544   0E23 DA            push d
1545   0E24 FA FF FF      lea d, [bp + -1] ; $i
1546   0E27 2A            mov b, [d]
1547   0E28 38 00 00      mov c, 0
1548   0E2B E7            pop d
1549   0E2C FD 43         mov [d], b
1550   0E2E             _for18_cond:
1551   0E2E FA FB FF      lea d, [bp + -5] ; $k
1552   0E31 2A            mov b, [d]
1553   0E32 38 00 00      mov c, 0
1554   0E35             ; --- START RELATIONAL
1555   0E35 D7            push a
1556   0E36 11            mov a, b
1557   0E37 FD 2E 04 00   mov32 cb, $00000004
1557   0E3B 00 00 
1558   0E3D B0            cmp a, b
1559   0E3E FD 73         slt ; < (signed)
1560   0E40 E4            pop a
1561   0E41             ; --- END RELATIONAL
1562   0E41 C0 00 00      cmp b, 0
1563   0E44 C6 73 0E      je _for18_exit
1564   0E47             _for18_block:
1565   0E47             ; input_buffer[k] = 0; 
1566   0E47 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1567   0E4A D7            push a
1568   0E4B DA            push d
1569   0E4C FA FB FF      lea d, [bp + -5] ; $k
1570   0E4F 2A            mov b, [d]
1571   0E50 38 00 00      mov c, 0
1572   0E53 E7            pop d
1573   0E54 5A            add d, b
1574   0E55 E4            pop a
1575   0E56 DA            push d
1576   0E57 FD 2E 00 00   mov32 cb, $00000000
1576   0E5B 00 00 
1577   0E5D E7            pop d
1578   0E5E FD 3E         mov [d], bl
1579   0E60             _for18_update:
1580   0E60 FA FB FF      lea d, [bp + -5] ; $k
1581   0E63 2A            mov b, [d]
1582   0E64 38 00 00      mov c, 0
1583   0E67 11            mov a, b
1584   0E68 FD 77         inc b
1585   0E6A FA FB FF      lea d, [bp + -5] ; $k
1586   0E6D FD 43         mov [d], b
1587   0E6F 27            mov b, a
1588   0E70 0A 2E 0E      jmp _for18_cond
1589   0E73             _for18_exit:
1590   0E73             ; for (k = 0; k < 4; k++) { 
1591   0E73             _for19_init:
1592   0E73 FA FB FF      lea d, [bp + -5] ; $k
1593   0E76 DA            push d
1594   0E77 FD 2E 00 00   mov32 cb, $00000000
1594   0E7B 00 00 
1595   0E7D E7            pop d
1596   0E7E FD 43         mov [d], b
1597   0E80             _for19_cond:
1598   0E80 FA FB FF      lea d, [bp + -5] ; $k
1599   0E83 2A            mov b, [d]
1600   0E84 38 00 00      mov c, 0
1601   0E87             ; --- START RELATIONAL
1602   0E87 D7            push a
1603   0E88 11            mov a, b
1604   0E89 FD 2E 04 00   mov32 cb, $00000004
1604   0E8D 00 00 
1605   0E8F B0            cmp a, b
1606   0E90 FD 73         slt ; < (signed)
1607   0E92 E4            pop a
1608   0E93             ; --- END RELATIONAL
1609   0E93 C0 00 00      cmp b, 0
1610   0E96 C6 DB 0E      je _for19_exit
1611   0E99             _for19_block:
1612   0E99             ; input_buffer[k] = base64_char_value(input_buffer[k]); 
1613   0E99 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1614   0E9C D7            push a
1615   0E9D DA            push d
1616   0E9E FA FB FF      lea d, [bp + -5] ; $k
1617   0EA1 2A            mov b, [d]
1618   0EA2 38 00 00      mov c, 0
1619   0EA5 E7            pop d
1620   0EA6 5A            add d, b
1621   0EA7 E4            pop a
1622   0EA8 DA            push d
1623   0EA9             ; --- START FUNCTION CALL
1624   0EA9 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1625   0EAC D7            push a
1626   0EAD DA            push d
1627   0EAE FA FB FF      lea d, [bp + -5] ; $k
1628   0EB1 2A            mov b, [d]
1629   0EB2 38 00 00      mov c, 0
1630   0EB5 E7            pop d
1631   0EB6 5A            add d, b
1632   0EB7 E4            pop a
1633   0EB8 32            mov bl, [d]
1634   0EB9 A7 00         mov bh, 0
1635   0EBB 38 00 00      mov c, 0
1636   0EBE DD            push bl
1637   0EBF 07 91 09      call base64_char_value
1638   0EC2 51 01 00      add sp, 1
1639   0EC5             ; --- END FUNCTION CALL
1640   0EC5 E7            pop d
1641   0EC6 FD 3E         mov [d], bl
1642   0EC8             _for19_update:
1643   0EC8 FA FB FF      lea d, [bp + -5] ; $k
1644   0ECB 2A            mov b, [d]
1645   0ECC 38 00 00      mov c, 0
1646   0ECF 11            mov a, b
1647   0ED0 FD 77         inc b
1648   0ED2 FA FB FF      lea d, [bp + -5] ; $k
1649   0ED5 FD 43         mov [d], b
1650   0ED7 27            mov b, a
1651   0ED8 0A 80 0E      jmp _for19_cond
1652   0EDB             _for19_exit:
1653   0EDB             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1654   0EDB FA F2 FF      lea d, [bp + -14] ; $output_buffer
1655   0EDE D7            push a
1656   0EDF DA            push d
1657   0EE0 FD 2E 00 00   mov32 cb, $00000000
1657   0EE4 00 00 
1658   0EE6 E7            pop d
1659   0EE7 5A            add d, b
1660   0EE8 E4            pop a
1661   0EE9 DA            push d
1662   0EEA FA F5 FF      lea d, [bp + -11] ; $input_buffer
1663   0EED D7            push a
1664   0EEE DA            push d
1665   0EEF FD 2E 00 00   mov32 cb, $00000000
1665   0EF3 00 00 
1666   0EF5 E7            pop d
1667   0EF6 5A            add d, b
1668   0EF7 E4            pop a
1669   0EF8 32            mov bl, [d]
1670   0EF9 A7 00         mov bh, 0
1671   0EFB 38 00 00      mov c, 0
1672   0EFE             ; --- START SHIFT
1673   0EFE D7            push a
1674   0EFF 11            mov a, b
1675   0F00 FD 2E 02 00   mov32 cb, $00000002
1675   0F04 00 00 
1676   0F06 FD 39         mov c, b
1677   0F08 9D            shl a, cl
1678   0F09 27            mov b, a
1679   0F0A E4            pop a
1680   0F0B             ; --- END SHIFT
1681   0F0B             ; --- START TERMS
1682   0F0B D7            push a
1683   0F0C 11            mov a, b
1684   0F0D FA F5 FF      lea d, [bp + -11] ; $input_buffer
1685   0F10 D7            push a
1686   0F11 DA            push d
1687   0F12 FD 2E 01 00   mov32 cb, $00000001
1687   0F16 00 00 
1688   0F18 E7            pop d
1689   0F19 5A            add d, b
1690   0F1A E4            pop a
1691   0F1B 32            mov bl, [d]
1692   0F1C A7 00         mov bh, 0
1693   0F1E 38 00 00      mov c, 0
1694   0F21 D7            push a
1695   0F22 11            mov a, b
1696   0F23 FD 2E 30 00   mov32 cb, $00000030
1696   0F27 00 00 
1697   0F29 FD 92         and b, a ; &
1698   0F2B E4            pop a
1699   0F2C             ; --- START SHIFT
1700   0F2C D7            push a
1701   0F2D 11            mov a, b
1702   0F2E FD 2E 04 00   mov32 cb, $00000004
1702   0F32 00 00 
1703   0F34 FD 39         mov c, b
1704   0F36 A5            ashr a, cl
1705   0F37 27            mov b, a
1706   0F38 E4            pop a
1707   0F39             ; --- END SHIFT
1708   0F39 56            add b, a
1709   0F3A E4            pop a
1710   0F3B             ; --- END TERMS
1711   0F3B E7            pop d
1712   0F3C FD 3E         mov [d], bl
1713   0F3E             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1714   0F3E FA F2 FF      lea d, [bp + -14] ; $output_buffer
1715   0F41 D7            push a
1716   0F42 DA            push d
1717   0F43 FD 2E 01 00   mov32 cb, $00000001
1717   0F47 00 00 
1718   0F49 E7            pop d
1719   0F4A 5A            add d, b
1720   0F4B E4            pop a
1721   0F4C DA            push d
1722   0F4D FA F5 FF      lea d, [bp + -11] ; $input_buffer
1723   0F50 D7            push a
1724   0F51 DA            push d
1725   0F52 FD 2E 01 00   mov32 cb, $00000001
1725   0F56 00 00 
1726   0F58 E7            pop d
1727   0F59 5A            add d, b
1728   0F5A E4            pop a
1729   0F5B 32            mov bl, [d]
1730   0F5C A7 00         mov bh, 0
1731   0F5E 38 00 00      mov c, 0
1732   0F61 D7            push a
1733   0F62 11            mov a, b
1734   0F63 FD 2E 0F 00   mov32 cb, $0000000f
1734   0F67 00 00 
1735   0F69 FD 92         and b, a ; &
1736   0F6B E4            pop a
1737   0F6C             ; --- START SHIFT
1738   0F6C D7            push a
1739   0F6D 11            mov a, b
1740   0F6E FD 2E 04 00   mov32 cb, $00000004
1740   0F72 00 00 
1741   0F74 FD 39         mov c, b
1742   0F76 9D            shl a, cl
1743   0F77 27            mov b, a
1744   0F78 E4            pop a
1745   0F79             ; --- END SHIFT
1746   0F79             ; --- START TERMS
1747   0F79 D7            push a
1748   0F7A 11            mov a, b
1749   0F7B FA F5 FF      lea d, [bp + -11] ; $input_buffer
1750   0F7E D7            push a
1751   0F7F DA            push d
1752   0F80 FD 2E 02 00   mov32 cb, $00000002
1752   0F84 00 00 
1753   0F86 E7            pop d
1754   0F87 5A            add d, b
1755   0F88 E4            pop a
1756   0F89 32            mov bl, [d]
1757   0F8A A7 00         mov bh, 0
1758   0F8C 38 00 00      mov c, 0
1759   0F8F D7            push a
1760   0F90 11            mov a, b
1761   0F91 FD 2E 3C 00   mov32 cb, $0000003c
1761   0F95 00 00 
1762   0F97 FD 92         and b, a ; &
1763   0F99 E4            pop a
1764   0F9A             ; --- START SHIFT
1765   0F9A D7            push a
1766   0F9B 11            mov a, b
1767   0F9C FD 2E 02 00   mov32 cb, $00000002
1767   0FA0 00 00 
1768   0FA2 FD 39         mov c, b
1769   0FA4 A5            ashr a, cl
1770   0FA5 27            mov b, a
1771   0FA6 E4            pop a
1772   0FA7             ; --- END SHIFT
1773   0FA7 56            add b, a
1774   0FA8 E4            pop a
1775   0FA9             ; --- END TERMS
1776   0FA9 E7            pop d
1777   0FAA FD 3E         mov [d], bl
1778   0FAC             ; for (k = 0; k < i - 1; k++) { 
1779   0FAC             _for20_init:
1780   0FAC FA FB FF      lea d, [bp + -5] ; $k
1781   0FAF DA            push d
1782   0FB0 FD 2E 00 00   mov32 cb, $00000000
1782   0FB4 00 00 
1783   0FB6 E7            pop d
1784   0FB7 FD 43         mov [d], b
1785   0FB9             _for20_cond:
1786   0FB9 FA FB FF      lea d, [bp + -5] ; $k
1787   0FBC 2A            mov b, [d]
1788   0FBD 38 00 00      mov c, 0
1789   0FC0             ; --- START RELATIONAL
1790   0FC0 D7            push a
1791   0FC1 11            mov a, b
1792   0FC2 FA FF FF      lea d, [bp + -1] ; $i
1793   0FC5 2A            mov b, [d]
1794   0FC6 38 00 00      mov c, 0
1795   0FC9             ; --- START TERMS
1796   0FC9 D7            push a
1797   0FCA 11            mov a, b
1798   0FCB FD 2E 01 00   mov32 cb, $00000001
1798   0FCF 00 00 
1799   0FD1 60            sub a, b
1800   0FD2 27            mov b, a
1801   0FD3 E4            pop a
1802   0FD4             ; --- END TERMS
1803   0FD4 B0            cmp a, b
1804   0FD5 FD 73         slt ; < (signed)
1805   0FD7 E4            pop a
1806   0FD8             ; --- END RELATIONAL
1807   0FD8 C0 00 00      cmp b, 0
1808   0FDB C6 27 10      je _for20_exit
1809   0FDE             _for20_block:
1810   0FDE             ; output[j++] = output_buffer[k]; 
1811   0FDE FA 07 00      lea d, [bp + 7] ; $output
1812   0FE1 FD 2A         mov d, [d]
1813   0FE3 D7            push a
1814   0FE4 DA            push d
1815   0FE5 FA FD FF      lea d, [bp + -3] ; $j
1816   0FE8 2A            mov b, [d]
1817   0FE9 38 00 00      mov c, 0
1818   0FEC 11            mov a, b
1819   0FED FD 77         inc b
1820   0FEF FA FD FF      lea d, [bp + -3] ; $j
1821   0FF2 FD 43         mov [d], b
1822   0FF4 27            mov b, a
1823   0FF5 E7            pop d
1824   0FF6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1825   0FFA E4            pop a
1826   0FFB DA            push d
1827   0FFC FA F2 FF      lea d, [bp + -14] ; $output_buffer
1828   0FFF D7            push a
1829   1000 DA            push d
1830   1001 FA FB FF      lea d, [bp + -5] ; $k
1831   1004 2A            mov b, [d]
1832   1005 38 00 00      mov c, 0
1833   1008 E7            pop d
1834   1009 5A            add d, b
1835   100A E4            pop a
1836   100B 32            mov bl, [d]
1837   100C A7 00         mov bh, 0
1838   100E 38 00 00      mov c, 0
1839   1011 E7            pop d
1840   1012 FD 3E         mov [d], bl
1841   1014             _for20_update:
1842   1014 FA FB FF      lea d, [bp + -5] ; $k
1843   1017 2A            mov b, [d]
1844   1018 38 00 00      mov c, 0
1845   101B 11            mov a, b
1846   101C FD 77         inc b
1847   101E FA FB FF      lea d, [bp + -5] ; $k
1848   1021 FD 43         mov [d], b
1849   1023 27            mov b, a
1850   1024 0A B9 0F      jmp _for20_cond
1851   1027             _for20_exit:
1852   1027 0A 2A 10      jmp _if17_exit
1853   102A             _if17_exit:
1854   102A             ; output[j] = '\0'; 
1855   102A FA 07 00      lea d, [bp + 7] ; $output
1856   102D FD 2A         mov d, [d]
1857   102F D7            push a
1858   1030 DA            push d
1859   1031 FA FD FF      lea d, [bp + -3] ; $j
1860   1034 2A            mov b, [d]
1861   1035 38 00 00      mov c, 0
1862   1038 E7            pop d
1863   1039 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1864   103D E4            pop a
1865   103E DA            push d
1866   103F FD 2E 00 00   mov32 cb, $00000000
1866   1043 00 00 
1867   1045 E7            pop d
1868   1046 FD 3E         mov [d], bl
1869   1048 F9            leave
1870   1049 09            ret
1871   104A             
1872   104A             printf:
1873   104A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1874   104D             ; char *p, *format_p; 
1875   104D 52 02 00      sub sp, 2
1876   1050 52 02 00      sub sp, 2
1877   1053             ; format_p = format; 
1878   1053 FA FD FF      lea d, [bp + -3] ; $format_p
1879   1056 DA            push d
1880   1057 FA 05 00      lea d, [bp + 5] ; $format
1881   105A 2A            mov b, [d]
1882   105B 38 00 00      mov c, 0
1883   105E E7            pop d
1884   105F FD 43         mov [d], b
1885   1061             ; p = &format + 2; 
1886   1061 FA FF FF      lea d, [bp + -1] ; $p
1887   1064 DA            push d
1888   1065 FA 05 00      lea d, [bp + 5] ; $format
1889   1068 2D            mov b, d
1890   1069             ; --- START TERMS
1891   1069 D7            push a
1892   106A 11            mov a, b
1893   106B FD 2E 02 00   mov32 cb, $00000002
1893   106F 00 00 
1894   1071 56            add b, a
1895   1072 E4            pop a
1896   1073             ; --- END TERMS
1897   1073 E7            pop d
1898   1074 FD 43         mov [d], b
1899   1076             ; for(;;){ 
1900   1076             _for21_init:
1901   1076             _for21_cond:
1902   1076             _for21_block:
1903   1076             ; if(!*format_p) break; 
1904   1076             _if22_cond:
1905   1076 FA FD FF      lea d, [bp + -3] ; $format_p
1906   1079 2A            mov b, [d]
1907   107A 38 00 00      mov c, 0
1908   107D 74            mov d, b
1909   107E 32            mov bl, [d]
1910   107F A7 00         mov bh, 0
1911   1081 38 00 00      mov c, 0
1912   1084 C0 00 00      cmp b, 0
1913   1087 FD 71         seq ; !
1914   1089 C0 00 00      cmp b, 0
1915   108C C6 95 10      je _if22_else
1916   108F             _if22_TRUE:
1917   108F             ; break; 
1918   108F 0A 45 13      jmp _for21_exit ; for break
1919   1092 0A 42 13      jmp _if22_exit
1920   1095             _if22_else:
1921   1095             ; if(*format_p == '%'){ 
1922   1095             _if23_cond:
1923   1095 FA FD FF      lea d, [bp + -3] ; $format_p
1924   1098 2A            mov b, [d]
1925   1099 38 00 00      mov c, 0
1926   109C 74            mov d, b
1927   109D 32            mov bl, [d]
1928   109E A7 00         mov bh, 0
1929   10A0 38 00 00      mov c, 0
1930   10A3             ; --- START RELATIONAL
1931   10A3 D7            push a
1932   10A4 11            mov a, b
1933   10A5 FD 2E 25 00   mov32 cb, $00000025
1933   10A9 00 00 
1934   10AB B0            cmp a, b
1935   10AC FD 71         seq ; ==
1936   10AE E4            pop a
1937   10AF             ; --- END RELATIONAL
1938   10AF C0 00 00      cmp b, 0
1939   10B2 C6 1D 13      je _if23_else
1940   10B5             _if23_TRUE:
1941   10B5             ; format_p++; 
1942   10B5 FA FD FF      lea d, [bp + -3] ; $format_p
1943   10B8 2A            mov b, [d]
1944   10B9 38 00 00      mov c, 0
1945   10BC FD 77         inc b
1946   10BE FA FD FF      lea d, [bp + -3] ; $format_p
1947   10C1 FD 43         mov [d], b
1948   10C3 FD 7D         dec b
1949   10C5             ; switch(*format_p){ 
1950   10C5             _switch24_expr:
1951   10C5 FA FD FF      lea d, [bp + -3] ; $format_p
1952   10C8 2A            mov b, [d]
1953   10C9 38 00 00      mov c, 0
1954   10CC 74            mov d, b
1955   10CD 32            mov bl, [d]
1956   10CE A7 00         mov bh, 0
1957   10D0 38 00 00      mov c, 0
1958   10D3             _switch24_comparisons:
1959   10D3 C1 6C         cmp bl, $6c
1960   10D5 C6 01 11      je _switch24_case0
1961   10D8 C1 4C         cmp bl, $4c
1962   10DA C6 01 11      je _switch24_case1
1963   10DD C1 64         cmp bl, $64
1964   10DF C6 11 12      je _switch24_case2
1965   10E2 C1 69         cmp bl, $69
1966   10E4 C6 11 12      je _switch24_case3
1967   10E7 C1 75         cmp bl, $75
1968   10E9 C6 41 12      je _switch24_case4
1969   10EC C1 78         cmp bl, $78
1970   10EE C6 71 12      je _switch24_case5
1971   10F1 C1 63         cmp bl, $63
1972   10F3 C6 A1 12      je _switch24_case6
1973   10F6 C1 73         cmp bl, $73
1974   10F8 C6 D1 12      je _switch24_case7
1975   10FB 0A FE 12      jmp _switch24_default
1976   10FE 0A 0A 13      jmp _switch24_exit
1977   1101             _switch24_case0:
1978   1101             _switch24_case1:
1979   1101             ; format_p++; 
1980   1101 FA FD FF      lea d, [bp + -3] ; $format_p
1981   1104 2A            mov b, [d]
1982   1105 38 00 00      mov c, 0
1983   1108 FD 77         inc b
1984   110A FA FD FF      lea d, [bp + -3] ; $format_p
1985   110D FD 43         mov [d], b
1986   110F FD 7D         dec b
1987   1111             ; if(*format_p == 'd' || *format_p == 'i') 
1988   1111             _if25_cond:
1989   1111 FA FD FF      lea d, [bp + -3] ; $format_p
1990   1114 2A            mov b, [d]
1991   1115 38 00 00      mov c, 0
1992   1118 74            mov d, b
1993   1119 32            mov bl, [d]
1994   111A A7 00         mov bh, 0
1995   111C 38 00 00      mov c, 0
1996   111F             ; --- START RELATIONAL
1997   111F D7            push a
1998   1120 11            mov a, b
1999   1121 FD 2E 64 00   mov32 cb, $00000064
1999   1125 00 00 
2000   1127 B0            cmp a, b
2001   1128 FD 71         seq ; ==
2002   112A E4            pop a
2003   112B             ; --- END RELATIONAL
2004   112B             ; --- START LOGICAL OR
2005   112B D7            push a
2006   112C 11            mov a, b
2007   112D FA FD FF      lea d, [bp + -3] ; $format_p
2008   1130 2A            mov b, [d]
2009   1131 38 00 00      mov c, 0
2010   1134 74            mov d, b
2011   1135 32            mov bl, [d]
2012   1136 A7 00         mov bh, 0
2013   1138 38 00 00      mov c, 0
2014   113B             ; --- START RELATIONAL
2015   113B D7            push a
2016   113C 11            mov a, b
2017   113D FD 2E 69 00   mov32 cb, $00000069
2017   1141 00 00 
2018   1143 B0            cmp a, b
2019   1144 FD 71         seq ; ==
2020   1146 E4            pop a
2021   1147             ; --- END RELATIONAL
2022   1147 FD A8         sor a, b ; ||
2023   1149 E4            pop a
2024   114A             ; --- END LOGICAL OR
2025   114A C0 00 00      cmp b, 0
2026   114D C6 6E 11      je _if25_else
2027   1150             _if25_TRUE:
2028   1150             ; print_signed_long(*(long *)p); 
2029   1150             ; --- START FUNCTION CALL
2030   1150 FA FF FF      lea d, [bp + -1] ; $p
2031   1153 2A            mov b, [d]
2032   1154 38 00 00      mov c, 0
2033   1157 74            mov d, b
2034   1158 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2035   115B FD 39         mov c, b ; And place it into C
2036   115D 2A            mov b, [d] ; Lower Word in B
2037   115E 12            mov a, c
2038   115F FD AA         swp a
2039   1161 D7            push a
2040   1162 FD AB         swp b
2041   1164 D8            push b
2042   1165 07 47 13      call print_signed_long
2043   1168 51 04 00      add sp, 4
2044   116B             ; --- END FUNCTION CALL
2045   116B 0A F6 11      jmp _if25_exit
2046   116E             _if25_else:
2047   116E             ; if(*format_p == 'u') 
2048   116E             _if26_cond:
2049   116E FA FD FF      lea d, [bp + -3] ; $format_p
2050   1171 2A            mov b, [d]
2051   1172 38 00 00      mov c, 0
2052   1175 74            mov d, b
2053   1176 32            mov bl, [d]
2054   1177 A7 00         mov bh, 0
2055   1179 38 00 00      mov c, 0
2056   117C             ; --- START RELATIONAL
2057   117C D7            push a
2058   117D 11            mov a, b
2059   117E FD 2E 75 00   mov32 cb, $00000075
2059   1182 00 00 
2060   1184 B0            cmp a, b
2061   1185 FD 71         seq ; ==
2062   1187 E4            pop a
2063   1188             ; --- END RELATIONAL
2064   1188 C0 00 00      cmp b, 0
2065   118B C6 AC 11      je _if26_else
2066   118E             _if26_TRUE:
2067   118E             ; print_unsigned_long(*(unsigned long *)p); 
2068   118E             ; --- START FUNCTION CALL
2069   118E FA FF FF      lea d, [bp + -1] ; $p
2070   1191 2A            mov b, [d]
2071   1192 38 00 00      mov c, 0
2072   1195 74            mov d, b
2073   1196 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2074   1199 FD 39         mov c, b ; And place it into C
2075   119B 2A            mov b, [d] ; Lower Word in B
2076   119C 12            mov a, c
2077   119D FD AA         swp a
2078   119F D7            push a
2079   11A0 FD AB         swp b
2080   11A2 D8            push b
2081   11A3 07 D2 14      call print_unsigned_long
2082   11A6 51 04 00      add sp, 4
2083   11A9             ; --- END FUNCTION CALL
2084   11A9 0A F6 11      jmp _if26_exit
2085   11AC             _if26_else:
2086   11AC             ; if(*format_p == 'x') 
2087   11AC             _if27_cond:
2088   11AC FA FD FF      lea d, [bp + -3] ; $format_p
2089   11AF 2A            mov b, [d]
2090   11B0 38 00 00      mov c, 0
2091   11B3 74            mov d, b
2092   11B4 32            mov bl, [d]
2093   11B5 A7 00         mov bh, 0
2094   11B7 38 00 00      mov c, 0
2095   11BA             ; --- START RELATIONAL
2096   11BA D7            push a
2097   11BB 11            mov a, b
2098   11BC FD 2E 78 00   mov32 cb, $00000078
2098   11C0 00 00 
2099   11C2 B0            cmp a, b
2100   11C3 FD 71         seq ; ==
2101   11C5 E4            pop a
2102   11C6             ; --- END RELATIONAL
2103   11C6 C0 00 00      cmp b, 0
2104   11C9 C6 EA 11      je _if27_else
2105   11CC             _if27_TRUE:
2106   11CC             ; printx32(*(long int *)p); 
2107   11CC             ; --- START FUNCTION CALL
2108   11CC FA FF FF      lea d, [bp + -1] ; $p
2109   11CF 2A            mov b, [d]
2110   11D0 38 00 00      mov c, 0
2111   11D3 74            mov d, b
2112   11D4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2113   11D7 FD 39         mov c, b ; And place it into C
2114   11D9 2A            mov b, [d] ; Lower Word in B
2115   11DA 12            mov a, c
2116   11DB FD AA         swp a
2117   11DD D7            push a
2118   11DE FD AB         swp b
2119   11E0 D8            push b
2120   11E1 07 FE 15      call printx32
2121   11E4 51 04 00      add sp, 4
2122   11E7             ; --- END FUNCTION CALL
2123   11E7 0A F6 11      jmp _if27_exit
2124   11EA             _if27_else:
2125   11EA             ; err("Unexpected format in printf."); 
2126   11EA             ; --- START FUNCTION CALL
2127   11EA 26 E8 1A      mov b, _s3 ; "Unexpected format in printf."
2128   11ED FD AB         swp b
2129   11EF D8            push b
2130   11F0 07 5E 16      call err
2131   11F3 51 02 00      add sp, 2
2132   11F6             ; --- END FUNCTION CALL
2133   11F6             _if27_exit:
2134   11F6             _if26_exit:
2135   11F6             _if25_exit:
2136   11F6             ; p = p + 4; 
2137   11F6 FA FF FF      lea d, [bp + -1] ; $p
2138   11F9 DA            push d
2139   11FA FA FF FF      lea d, [bp + -1] ; $p
2140   11FD 2A            mov b, [d]
2141   11FE 38 00 00      mov c, 0
2142   1201             ; --- START TERMS
2143   1201 D7            push a
2144   1202 11            mov a, b
2145   1203 FD 2E 04 00   mov32 cb, $00000004
2145   1207 00 00 
2146   1209 56            add b, a
2147   120A E4            pop a
2148   120B             ; --- END TERMS
2149   120B E7            pop d
2150   120C FD 43         mov [d], b
2151   120E             ; break; 
2152   120E 0A 0A 13      jmp _switch24_exit ; case break
2153   1211             _switch24_case2:
2154   1211             _switch24_case3:
2155   1211             ; print_signed(*(int*)p); 
2156   1211             ; --- START FUNCTION CALL
2157   1211 FA FF FF      lea d, [bp + -1] ; $p
2158   1214 2A            mov b, [d]
2159   1215 38 00 00      mov c, 0
2160   1218 74            mov d, b
2161   1219 2A            mov b, [d]
2162   121A 38 00 00      mov c, 0
2163   121D FD AB         swp b
2164   121F D8            push b
2165   1220 07 8C 16      call print_signed
2166   1223 51 02 00      add sp, 2
2167   1226             ; --- END FUNCTION CALL
2168   1226             ; p = p + 2; 
2169   1226 FA FF FF      lea d, [bp + -1] ; $p
2170   1229 DA            push d
2171   122A FA FF FF      lea d, [bp + -1] ; $p
2172   122D 2A            mov b, [d]
2173   122E 38 00 00      mov c, 0
2174   1231             ; --- START TERMS
2175   1231 D7            push a
2176   1232 11            mov a, b
2177   1233 FD 2E 02 00   mov32 cb, $00000002
2177   1237 00 00 
2178   1239 56            add b, a
2179   123A E4            pop a
2180   123B             ; --- END TERMS
2181   123B E7            pop d
2182   123C FD 43         mov [d], b
2183   123E             ; break; 
2184   123E 0A 0A 13      jmp _switch24_exit ; case break
2185   1241             _switch24_case4:
2186   1241             ; print_unsigned(*(unsigned int*)p); 
2187   1241             ; --- START FUNCTION CALL
2188   1241 FA FF FF      lea d, [bp + -1] ; $p
2189   1244 2A            mov b, [d]
2190   1245 38 00 00      mov c, 0
2191   1248 74            mov d, b
2192   1249 2A            mov b, [d]
2193   124A 38 00 00      mov c, 0
2194   124D FD AB         swp b
2195   124F D8            push b
2196   1250 07 D5 17      call print_unsigned
2197   1253 51 02 00      add sp, 2
2198   1256             ; --- END FUNCTION CALL
2199   1256             ; p = p + 2; 
2200   1256 FA FF FF      lea d, [bp + -1] ; $p
2201   1259 DA            push d
2202   125A FA FF FF      lea d, [bp + -1] ; $p
2203   125D 2A            mov b, [d]
2204   125E 38 00 00      mov c, 0
2205   1261             ; --- START TERMS
2206   1261 D7            push a
2207   1262 11            mov a, b
2208   1263 FD 2E 02 00   mov32 cb, $00000002
2208   1267 00 00 
2209   1269 56            add b, a
2210   126A E4            pop a
2211   126B             ; --- END TERMS
2212   126B E7            pop d
2213   126C FD 43         mov [d], b
2214   126E             ; break; 
2215   126E 0A 0A 13      jmp _switch24_exit ; case break
2216   1271             _switch24_case5:
2217   1271             ; printx16(*(int*)p); 
2218   1271             ; --- START FUNCTION CALL
2219   1271 FA FF FF      lea d, [bp + -1] ; $p
2220   1274 2A            mov b, [d]
2221   1275 38 00 00      mov c, 0
2222   1278 74            mov d, b
2223   1279 2A            mov b, [d]
2224   127A 38 00 00      mov c, 0
2225   127D FD AB         swp b
2226   127F D8            push b
2227   1280 07 E5 18      call printx16
2228   1283 51 02 00      add sp, 2
2229   1286             ; --- END FUNCTION CALL
2230   1286             ; p = p + 2; 
2231   1286 FA FF FF      lea d, [bp + -1] ; $p
2232   1289 DA            push d
2233   128A FA FF FF      lea d, [bp + -1] ; $p
2234   128D 2A            mov b, [d]
2235   128E 38 00 00      mov c, 0
2236   1291             ; --- START TERMS
2237   1291 D7            push a
2238   1292 11            mov a, b
2239   1293 FD 2E 02 00   mov32 cb, $00000002
2239   1297 00 00 
2240   1299 56            add b, a
2241   129A E4            pop a
2242   129B             ; --- END TERMS
2243   129B E7            pop d
2244   129C FD 43         mov [d], b
2245   129E             ; break; 
2246   129E 0A 0A 13      jmp _switch24_exit ; case break
2247   12A1             _switch24_case6:
2248   12A1             ; putchar(*(char*)p); 
2249   12A1             ; --- START FUNCTION CALL
2250   12A1 FA FF FF      lea d, [bp + -1] ; $p
2251   12A4 2A            mov b, [d]
2252   12A5 38 00 00      mov c, 0
2253   12A8 74            mov d, b
2254   12A9 32            mov bl, [d]
2255   12AA A7 00         mov bh, 0
2256   12AC 38 00 00      mov c, 0
2257   12AF DD            push bl
2258   12B0 07 C4 14      call putchar
2259   12B3 51 01 00      add sp, 1
2260   12B6             ; --- END FUNCTION CALL
2261   12B6             ; p = p + 1; 
2262   12B6 FA FF FF      lea d, [bp + -1] ; $p
2263   12B9 DA            push d
2264   12BA FA FF FF      lea d, [bp + -1] ; $p
2265   12BD 2A            mov b, [d]
2266   12BE 38 00 00      mov c, 0
2267   12C1             ; --- START TERMS
2268   12C1 D7            push a
2269   12C2 11            mov a, b
2270   12C3 FD 2E 01 00   mov32 cb, $00000001
2270   12C7 00 00 
2271   12C9 56            add b, a
2272   12CA E4            pop a
2273   12CB             ; --- END TERMS
2274   12CB E7            pop d
2275   12CC FD 43         mov [d], b
2276   12CE             ; break; 
2277   12CE 0A 0A 13      jmp _switch24_exit ; case break
2278   12D1             _switch24_case7:
2279   12D1             ; print(*(char**)p); 
2280   12D1             ; --- START FUNCTION CALL
2281   12D1 FA FF FF      lea d, [bp + -1] ; $p
2282   12D4 2A            mov b, [d]
2283   12D5 38 00 00      mov c, 0
2284   12D8 74            mov d, b
2285   12D9 2A            mov b, [d]
2286   12DA FD AB         swp b
2287   12DC D8            push b
2288   12DD 07 73 16      call print
2289   12E0 51 02 00      add sp, 2
2290   12E3             ; --- END FUNCTION CALL
2291   12E3             ; p = p + 2; 
2292   12E3 FA FF FF      lea d, [bp + -1] ; $p
2293   12E6 DA            push d
2294   12E7 FA FF FF      lea d, [bp + -1] ; $p
2295   12EA 2A            mov b, [d]
2296   12EB 38 00 00      mov c, 0
2297   12EE             ; --- START TERMS
2298   12EE D7            push a
2299   12EF 11            mov a, b
2300   12F0 FD 2E 02 00   mov32 cb, $00000002
2300   12F4 00 00 
2301   12F6 56            add b, a
2302   12F7 E4            pop a
2303   12F8             ; --- END TERMS
2304   12F8 E7            pop d
2305   12F9 FD 43         mov [d], b
2306   12FB             ; break; 
2307   12FB 0A 0A 13      jmp _switch24_exit ; case break
2308   12FE             _switch24_default:
2309   12FE             ; print("Error: Unknown argument type.\n"); 
2310   12FE             ; --- START FUNCTION CALL
2311   12FE 26 05 1B      mov b, _s4 ; "Error: Unknown argument type.\n"
2312   1301 FD AB         swp b
2313   1303 D8            push b
2314   1304 07 73 16      call print
2315   1307 51 02 00      add sp, 2
2316   130A             ; --- END FUNCTION CALL
2317   130A             _switch24_exit:
2318   130A             ; format_p++; 
2319   130A FA FD FF      lea d, [bp + -3] ; $format_p
2320   130D 2A            mov b, [d]
2321   130E 38 00 00      mov c, 0
2322   1311 FD 77         inc b
2323   1313 FA FD FF      lea d, [bp + -3] ; $format_p
2324   1316 FD 43         mov [d], b
2325   1318 FD 7D         dec b
2326   131A 0A 42 13      jmp _if23_exit
2327   131D             _if23_else:
2328   131D             ; putchar(*format_p); 
2329   131D             ; --- START FUNCTION CALL
2330   131D FA FD FF      lea d, [bp + -3] ; $format_p
2331   1320 2A            mov b, [d]
2332   1321 38 00 00      mov c, 0
2333   1324 74            mov d, b
2334   1325 32            mov bl, [d]
2335   1326 A7 00         mov bh, 0
2336   1328 38 00 00      mov c, 0
2337   132B DD            push bl
2338   132C 07 C4 14      call putchar
2339   132F 51 01 00      add sp, 1
2340   1332             ; --- END FUNCTION CALL
2341   1332             ; format_p++; 
2342   1332 FA FD FF      lea d, [bp + -3] ; $format_p
2343   1335 2A            mov b, [d]
2344   1336 38 00 00      mov c, 0
2345   1339 FD 77         inc b
2346   133B FA FD FF      lea d, [bp + -3] ; $format_p
2347   133E FD 43         mov [d], b
2348   1340 FD 7D         dec b
2349   1342             _if23_exit:
2350   1342             _if22_exit:
2351   1342             _for21_update:
2352   1342 0A 76 10      jmp _for21_cond
2353   1345             _for21_exit:
2354   1345 F9            leave
2355   1346 09            ret
2356   1347             
2357   1347             print_signed_long:
2358   1347 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2359   134A             ; char digits[10]; 
2360   134A 52 0A 00      sub sp, 10
2361   134D             ; int i = 0; 
2362   134D 52 02 00      sub sp, 2
2363   1350             ; --- START LOCAL VAR INITIALIZATION
2364   1350 FA F5 FF      lea d, [bp + -11] ; $i
2365   1353 DA            push d
2366   1354 FD 2E 00 00   mov32 cb, $00000000
2366   1358 00 00 
2367   135A E7            pop d
2368   135B FD 43         mov [d], b
2369   135D             ; --- END LOCAL VAR INITIALIZATION
2370   135D             ; if (num < 0) { 
2371   135D             _if28_cond:
2372   135D FA 05 00      lea d, [bp + 5] ; $num
2373   1360 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2374   1363 FD 39         mov c, b ; And place it into C
2375   1365 2A            mov b, [d] ; Lower Word in B
2376   1366             ; --- START RELATIONAL
2377   1366 D7            push a
2378   1367 FD D8         push g
2379   1369 11            mov a, b
2380   136A FD 7A         mov g, c
2381   136C FD 2E 00 00   mov32 cb, $00000000
2381   1370 00 00 
2382   1372 FD AF         cmp32 ga, cb
2383   1374 FD 73         slt ; <
2384   1376 FD F1         pop g
2385   1378 E4            pop a
2386   1379             ; --- END RELATIONAL
2387   1379 C0 00 00      cmp b, 0
2388   137C C6 AE 13      je _if28_else
2389   137F             _if28_TRUE:
2390   137F             ; putchar('-'); 
2391   137F             ; --- START FUNCTION CALL
2392   137F FD 2E 2D 00   mov32 cb, $0000002d
2392   1383 00 00 
2393   1385 DD            push bl
2394   1386 07 C4 14      call putchar
2395   1389 51 01 00      add sp, 1
2396   138C             ; --- END FUNCTION CALL
2397   138C             ; num = -num; 
2398   138C FA 05 00      lea d, [bp + 5] ; $num
2399   138F DA            push d
2400   1390 FA 05 00      lea d, [bp + 5] ; $num
2401   1393 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2402   1396 FD 39         mov c, b ; And place it into C
2403   1398 2A            mov b, [d] ; Lower Word in B
2404   1399 12            mov a, c
2405   139A 95            not a
2406   139B 97            not b
2407   139C 55 01 00      add b, 1
2408   139F 5B 00 00      adc a, 0
2409   13A2 39            mov c, a
2410   13A3 E7            pop d
2411   13A4 FD 43         mov [d], b
2412   13A6 28            mov b, c
2413   13A7 FD 44 02 00   mov [d + 2], b
2414   13AB 0A E2 13      jmp _if28_exit
2415   13AE             _if28_else:
2416   13AE             ; if (num == 0) { 
2417   13AE             _if29_cond:
2418   13AE FA 05 00      lea d, [bp + 5] ; $num
2419   13B1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2420   13B4 FD 39         mov c, b ; And place it into C
2421   13B6 2A            mov b, [d] ; Lower Word in B
2422   13B7             ; --- START RELATIONAL
2423   13B7 D7            push a
2424   13B8 FD D8         push g
2425   13BA 11            mov a, b
2426   13BB FD 7A         mov g, c
2427   13BD FD 2E 00 00   mov32 cb, $00000000
2427   13C1 00 00 
2428   13C3 FD AF         cmp32 ga, cb
2429   13C5 FD 71         seq ; ==
2430   13C7 FD F1         pop g
2431   13C9 E4            pop a
2432   13CA             ; --- END RELATIONAL
2433   13CA C0 00 00      cmp b, 0
2434   13CD C6 E2 13      je _if29_exit
2435   13D0             _if29_TRUE:
2436   13D0             ; putchar('0'); 
2437   13D0             ; --- START FUNCTION CALL
2438   13D0 FD 2E 30 00   mov32 cb, $00000030
2438   13D4 00 00 
2439   13D6 DD            push bl
2440   13D7 07 C4 14      call putchar
2441   13DA 51 01 00      add sp, 1
2442   13DD             ; --- END FUNCTION CALL
2443   13DD             ; return; 
2444   13DD F9            leave
2445   13DE 09            ret
2446   13DF 0A E2 13      jmp _if29_exit
2447   13E2             _if29_exit:
2448   13E2             _if28_exit:
2449   13E2             ; while (num > 0) { 
2450   13E2             _while30_cond:
2451   13E2 FA 05 00      lea d, [bp + 5] ; $num
2452   13E5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2453   13E8 FD 39         mov c, b ; And place it into C
2454   13EA 2A            mov b, [d] ; Lower Word in B
2455   13EB             ; --- START RELATIONAL
2456   13EB D7            push a
2457   13EC FD D8         push g
2458   13EE 11            mov a, b
2459   13EF FD 7A         mov g, c
2460   13F1 FD 2E 00 00   mov32 cb, $00000000
2460   13F5 00 00 
2461   13F7 FD AF         cmp32 ga, cb
2462   13F9 FD 7F         sgt
2463   13FB FD F1         pop g
2464   13FD E4            pop a
2465   13FE             ; --- END RELATIONAL
2466   13FE C0 00 00      cmp b, 0
2467   1401 C6 7A 14      je _while30_exit
2468   1404             _while30_block:
2469   1404             ; digits[i] = '0' + (num % 10); 
2470   1404 FA F7 FF      lea d, [bp + -9] ; $digits
2471   1407 D7            push a
2472   1408 DA            push d
2473   1409 FA F5 FF      lea d, [bp + -11] ; $i
2474   140C 2A            mov b, [d]
2475   140D 38 00 00      mov c, 0
2476   1410 E7            pop d
2477   1411 5A            add d, b
2478   1412 E4            pop a
2479   1413 DA            push d
2480   1414 FD 2E 30 00   mov32 cb, $00000030
2480   1418 00 00 
2481   141A             ; --- START TERMS
2482   141A D7            push a
2483   141B 11            mov a, b
2484   141C FA 05 00      lea d, [bp + 5] ; $num
2485   141F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2486   1422 FD 39         mov c, b ; And place it into C
2487   1424 2A            mov b, [d] ; Lower Word in B
2488   1425             ; --- START FACTORS
2489   1425 D7            push a
2490   1426 FD D8         push g
2491   1428 11            mov a, b
2492   1429 FD 7A         mov g, c
2493   142B FD 2E 0A 00   mov32 cb, $0000000a
2493   142F 00 00 
2494   1431 AE            div a, b ; 
2495   1432 11            mov a, b
2496   1433 FD 38         mov c, g
2497   1435 27            mov b, a
2498   1436 FD F1         pop g
2499   1438 E4            pop a
2500   1439             ; --- END FACTORS
2501   1439 FD 15         add32 cb, ga
2502   143B E4            pop a
2503   143C             ; --- END TERMS
2504   143C E7            pop d
2505   143D FD 3E         mov [d], bl
2506   143F             ; num = num / 10; 
2507   143F FA 05 00      lea d, [bp + 5] ; $num
2508   1442 DA            push d
2509   1443 FA 05 00      lea d, [bp + 5] ; $num
2510   1446 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2511   1449 FD 39         mov c, b ; And place it into C
2512   144B 2A            mov b, [d] ; Lower Word in B
2513   144C             ; --- START FACTORS
2514   144C D7            push a
2515   144D FD D8         push g
2516   144F 11            mov a, b
2517   1450 FD 7A         mov g, c
2518   1452 FD 2E 0A 00   mov32 cb, $0000000a
2518   1456 00 00 
2519   1458 AE            div a, b
2520   1459 FD 38         mov c, g
2521   145B 27            mov b, a
2522   145C FD F1         pop g
2523   145E E4            pop a
2524   145F             ; --- END FACTORS
2525   145F E7            pop d
2526   1460 FD 43         mov [d], b
2527   1462 28            mov b, c
2528   1463 FD 44 02 00   mov [d + 2], b
2529   1467             ; i++; 
2530   1467 FA F5 FF      lea d, [bp + -11] ; $i
2531   146A 2A            mov b, [d]
2532   146B 38 00 00      mov c, 0
2533   146E 11            mov a, b
2534   146F FD 77         inc b
2535   1471 FA F5 FF      lea d, [bp + -11] ; $i
2536   1474 FD 43         mov [d], b
2537   1476 27            mov b, a
2538   1477 0A E2 13      jmp _while30_cond
2539   147A             _while30_exit:
2540   147A             ; while (i > 0) { 
2541   147A             _while37_cond:
2542   147A FA F5 FF      lea d, [bp + -11] ; $i
2543   147D 2A            mov b, [d]
2544   147E 38 00 00      mov c, 0
2545   1481             ; --- START RELATIONAL
2546   1481 D7            push a
2547   1482 11            mov a, b
2548   1483 FD 2E 00 00   mov32 cb, $00000000
2548   1487 00 00 
2549   1489 B0            cmp a, b
2550   148A FD 7F         sgt ; >
2551   148C E4            pop a
2552   148D             ; --- END RELATIONAL
2553   148D C0 00 00      cmp b, 0
2554   1490 C6 C2 14      je _while37_exit
2555   1493             _while37_block:
2556   1493             ; i--; 
2557   1493 FA F5 FF      lea d, [bp + -11] ; $i
2558   1496 2A            mov b, [d]
2559   1497 38 00 00      mov c, 0
2560   149A 11            mov a, b
2561   149B FD 7D         dec b
2562   149D FA F5 FF      lea d, [bp + -11] ; $i
2563   14A0 FD 43         mov [d], b
2564   14A2 27            mov b, a
2565   14A3             ; putchar(digits[i]); 
2566   14A3             ; --- START FUNCTION CALL
2567   14A3 FA F7 FF      lea d, [bp + -9] ; $digits
2568   14A6 D7            push a
2569   14A7 DA            push d
2570   14A8 FA F5 FF      lea d, [bp + -11] ; $i
2571   14AB 2A            mov b, [d]
2572   14AC 38 00 00      mov c, 0
2573   14AF E7            pop d
2574   14B0 5A            add d, b
2575   14B1 E4            pop a
2576   14B2 32            mov bl, [d]
2577   14B3 A7 00         mov bh, 0
2578   14B5 38 00 00      mov c, 0
2579   14B8 DD            push bl
2580   14B9 07 C4 14      call putchar
2581   14BC 51 01 00      add sp, 1
2582   14BF             ; --- END FUNCTION CALL
2583   14BF 0A 7A 14      jmp _while37_cond
2584   14C2             _while37_exit:
2585   14C2 F9            leave
2586   14C3 09            ret
2587   14C4             
2588   14C4             putchar:
2589   14C4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2590   14C7             ; --- BEGIN INLINE ASM SEGMENT
2591   14C7 FA 05 00      lea d, [bp + 5] ; $c
2592   14CA 1E            mov al, [d]
2593   14CB 23            mov ah, al
2594   14CC 19 00         mov al, 0
2595   14CE 05 03         syscall sys_io      
2596   14D0             ; --- END INLINE ASM SEGMENT
2597   14D0 F9            leave
2598   14D1 09            ret
2599   14D2             
2600   14D2             print_unsigned_long:
2601   14D2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2602   14D5             ; char digits[10]; 
2603   14D5 52 0A 00      sub sp, 10
2604   14D8             ; int i; 
2605   14D8 52 02 00      sub sp, 2
2606   14DB             ; i = 0; 
2607   14DB FA F5 FF      lea d, [bp + -11] ; $i
2608   14DE DA            push d
2609   14DF FD 2E 00 00   mov32 cb, $00000000
2609   14E3 00 00 
2610   14E5 E7            pop d
2611   14E6 FD 43         mov [d], b
2612   14E8             ; if(num == 0){ 
2613   14E8             _if38_cond:
2614   14E8 FA 05 00      lea d, [bp + 5] ; $num
2615   14EB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2616   14EE FD 39         mov c, b ; And place it into C
2617   14F0 2A            mov b, [d] ; Lower Word in B
2618   14F1             ; --- START RELATIONAL
2619   14F1 D7            push a
2620   14F2 FD D8         push g
2621   14F4 11            mov a, b
2622   14F5 FD 7A         mov g, c
2623   14F7 FD 2E 00 00   mov32 cb, $00000000
2623   14FB 00 00 
2624   14FD FD AF         cmp32 ga, cb
2625   14FF FD 71         seq ; ==
2626   1501 FD F1         pop g
2627   1503 E4            pop a
2628   1504             ; --- END RELATIONAL
2629   1504 C0 00 00      cmp b, 0
2630   1507 C6 1C 15      je _if38_exit
2631   150A             _if38_TRUE:
2632   150A             ; putchar('0'); 
2633   150A             ; --- START FUNCTION CALL
2634   150A FD 2E 30 00   mov32 cb, $00000030
2634   150E 00 00 
2635   1510 DD            push bl
2636   1511 07 C4 14      call putchar
2637   1514 51 01 00      add sp, 1
2638   1517             ; --- END FUNCTION CALL
2639   1517             ; return; 
2640   1517 F9            leave
2641   1518 09            ret
2642   1519 0A 1C 15      jmp _if38_exit
2643   151C             _if38_exit:
2644   151C             ; while (num > 0) { 
2645   151C             _while39_cond:
2646   151C FA 05 00      lea d, [bp + 5] ; $num
2647   151F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2648   1522 FD 39         mov c, b ; And place it into C
2649   1524 2A            mov b, [d] ; Lower Word in B
2650   1525             ; --- START RELATIONAL
2651   1525 D7            push a
2652   1526 FD D8         push g
2653   1528 11            mov a, b
2654   1529 FD 7A         mov g, c
2655   152B FD 2E 00 00   mov32 cb, $00000000
2655   152F 00 00 
2656   1531 FD AF         cmp32 ga, cb
2657   1533 FD 81         sgu
2658   1535 FD F1         pop g
2659   1537 E4            pop a
2660   1538             ; --- END RELATIONAL
2661   1538 C0 00 00      cmp b, 0
2662   153B C6 B4 15      je _while39_exit
2663   153E             _while39_block:
2664   153E             ; digits[i] = '0' + (num % 10); 
2665   153E FA F7 FF      lea d, [bp + -9] ; $digits
2666   1541 D7            push a
2667   1542 DA            push d
2668   1543 FA F5 FF      lea d, [bp + -11] ; $i
2669   1546 2A            mov b, [d]
2670   1547 38 00 00      mov c, 0
2671   154A E7            pop d
2672   154B 5A            add d, b
2673   154C E4            pop a
2674   154D DA            push d
2675   154E FD 2E 30 00   mov32 cb, $00000030
2675   1552 00 00 
2676   1554             ; --- START TERMS
2677   1554 D7            push a
2678   1555 11            mov a, b
2679   1556 FA 05 00      lea d, [bp + 5] ; $num
2680   1559 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2681   155C FD 39         mov c, b ; And place it into C
2682   155E 2A            mov b, [d] ; Lower Word in B
2683   155F             ; --- START FACTORS
2684   155F D7            push a
2685   1560 FD D8         push g
2686   1562 11            mov a, b
2687   1563 FD 7A         mov g, c
2688   1565 FD 2E 0A 00   mov32 cb, $0000000a
2688   1569 00 00 
2689   156B AE            div a, b ; 
2690   156C 11            mov a, b
2691   156D FD 38         mov c, g
2692   156F 27            mov b, a
2693   1570 FD F1         pop g
2694   1572 E4            pop a
2695   1573             ; --- END FACTORS
2696   1573 FD 15         add32 cb, ga
2697   1575 E4            pop a
2698   1576             ; --- END TERMS
2699   1576 E7            pop d
2700   1577 FD 3E         mov [d], bl
2701   1579             ; num = num / 10; 
2702   1579 FA 05 00      lea d, [bp + 5] ; $num
2703   157C DA            push d
2704   157D FA 05 00      lea d, [bp + 5] ; $num
2705   1580 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2706   1583 FD 39         mov c, b ; And place it into C
2707   1585 2A            mov b, [d] ; Lower Word in B
2708   1586             ; --- START FACTORS
2709   1586 D7            push a
2710   1587 FD D8         push g
2711   1589 11            mov a, b
2712   158A FD 7A         mov g, c
2713   158C FD 2E 0A 00   mov32 cb, $0000000a
2713   1590 00 00 
2714   1592 AE            div a, b
2715   1593 FD 38         mov c, g
2716   1595 27            mov b, a
2717   1596 FD F1         pop g
2718   1598 E4            pop a
2719   1599             ; --- END FACTORS
2720   1599 E7            pop d
2721   159A FD 43         mov [d], b
2722   159C 28            mov b, c
2723   159D FD 44 02 00   mov [d + 2], b
2724   15A1             ; i++; 
2725   15A1 FA F5 FF      lea d, [bp + -11] ; $i
2726   15A4 2A            mov b, [d]
2727   15A5 38 00 00      mov c, 0
2728   15A8 11            mov a, b
2729   15A9 FD 77         inc b
2730   15AB FA F5 FF      lea d, [bp + -11] ; $i
2731   15AE FD 43         mov [d], b
2732   15B0 27            mov b, a
2733   15B1 0A 1C 15      jmp _while39_cond
2734   15B4             _while39_exit:
2735   15B4             ; while (i > 0) { 
2736   15B4             _while46_cond:
2737   15B4 FA F5 FF      lea d, [bp + -11] ; $i
2738   15B7 2A            mov b, [d]
2739   15B8 38 00 00      mov c, 0
2740   15BB             ; --- START RELATIONAL
2741   15BB D7            push a
2742   15BC 11            mov a, b
2743   15BD FD 2E 00 00   mov32 cb, $00000000
2743   15C1 00 00 
2744   15C3 B0            cmp a, b
2745   15C4 FD 7F         sgt ; >
2746   15C6 E4            pop a
2747   15C7             ; --- END RELATIONAL
2748   15C7 C0 00 00      cmp b, 0
2749   15CA C6 FC 15      je _while46_exit
2750   15CD             _while46_block:
2751   15CD             ; i--; 
2752   15CD FA F5 FF      lea d, [bp + -11] ; $i
2753   15D0 2A            mov b, [d]
2754   15D1 38 00 00      mov c, 0
2755   15D4 11            mov a, b
2756   15D5 FD 7D         dec b
2757   15D7 FA F5 FF      lea d, [bp + -11] ; $i
2758   15DA FD 43         mov [d], b
2759   15DC 27            mov b, a
2760   15DD             ; putchar(digits[i]); 
2761   15DD             ; --- START FUNCTION CALL
2762   15DD FA F7 FF      lea d, [bp + -9] ; $digits
2763   15E0 D7            push a
2764   15E1 DA            push d
2765   15E2 FA F5 FF      lea d, [bp + -11] ; $i
2766   15E5 2A            mov b, [d]
2767   15E6 38 00 00      mov c, 0
2768   15E9 E7            pop d
2769   15EA 5A            add d, b
2770   15EB E4            pop a
2771   15EC 32            mov bl, [d]
2772   15ED A7 00         mov bh, 0
2773   15EF 38 00 00      mov c, 0
2774   15F2 DD            push bl
2775   15F3 07 C4 14      call putchar
2776   15F6 51 01 00      add sp, 1
2777   15F9             ; --- END FUNCTION CALL
2778   15F9 0A B4 15      jmp _while46_cond
2779   15FC             _while46_exit:
2780   15FC F9            leave
2781   15FD 09            ret
2782   15FE             
2783   15FE             printx32:
2784   15FE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2785   1601             ; --- BEGIN INLINE ASM SEGMENT
2786   1601 FA 05 00      lea d, [bp + 5] ; $hex
2787   1604 2B 02 00      mov b, [d+2]
2788   1607 07 10 16      call print_u16x_printx32
2789   160A 2A            mov b, [d]
2790   160B 07 10 16      call print_u16x_printx32
2791   160E             ; --- END INLINE ASM SEGMENT
2792   160E             ; return; 
2793   160E F9            leave
2794   160F 09            ret
2795   1610             ; --- BEGIN INLINE ASM SEGMENT
2796   1610             print_u16x_printx32:
2797   1610 D7            push a
2798   1611 D8            push b
2799   1612 DD            push bl
2800   1613 30            mov bl, bh
2801   1614 07 32 16      call _itoa_printx32        
2802   1617 2F            mov bl, al        
2803   1618 19 00         mov al, 0
2804   161A 05 03         syscall sys_io        
2805   161C 24            mov ah, bl        
2806   161D 19 00         mov al, 0
2807   161F 05 03         syscall sys_io        
2808   1621 EA            pop bl
2809   1622 07 32 16      call _itoa_printx32        
2810   1625 2F            mov bl, al        
2811   1626 19 00         mov al, 0
2812   1628 05 03         syscall sys_io        
2813   162A 24            mov ah, bl        
2814   162B 19 00         mov al, 0
2815   162D 05 03         syscall sys_io        
2816   162F E5            pop b
2817   1630 E4            pop a
2818   1631 09            ret
2819   1632             _itoa_printx32:
2820   1632 DA            push d
2821   1633 D8            push b
2822   1634 A7 00         mov bh, 0
2823   1636 FD A4 04      shr bl, 4  
2824   1639 74            mov d, b
2825   163A 1F 4C 16      mov al, [d + s_hex_digits_printx32]
2826   163D 23            mov ah, al
2827   163E E5            pop b
2828   163F D8            push b
2829   1640 A7 00         mov bh, 0
2830   1642 FD 87 0F      and bl, $0F
2831   1645 74            mov d, b
2832   1646 1F 4C 16      mov al, [d + s_hex_digits_printx32]
2833   1649 E5            pop b
2834   164A E7            pop d
2835   164B 09            ret
2836   164C 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2836   1650 34 35 36 37 
2836   1654 38 39 41 42 
2836   1658 43 44 45 46 
2837   165C             ; --- END INLINE ASM SEGMENT
2838   165C F9            leave
2839   165D 09            ret
2840   165E             
2841   165E             err:
2842   165E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2843   1661             ; print(e); 
2844   1661             ; --- START FUNCTION CALL
2845   1661 FA 05 00      lea d, [bp + 5] ; $e
2846   1664 2A            mov b, [d]
2847   1665 38 00 00      mov c, 0
2848   1668 FD AB         swp b
2849   166A D8            push b
2850   166B 07 73 16      call print
2851   166E 51 02 00      add sp, 2
2852   1671             ; --- END FUNCTION CALL
2853   1671 F9            leave
2854   1672 09            ret
2855   1673             
2856   1673             print:
2857   1673 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2858   1676             ; --- BEGIN INLINE ASM SEGMENT
2859   1676 FA 05 00      lea d, [bp + 5] ; $s
2860   1679 FD 2A         mov d, [d]
2861   167B             _puts_L1_print:
2862   167B 1E            mov al, [d]
2863   167C B9 00         cmp al, 0
2864   167E C6 8A 16      jz _puts_END_print
2865   1681 23            mov ah, al
2866   1682 19 00         mov al, 0
2867   1684 05 03         syscall sys_io
2868   1686 79            inc d
2869   1687 0A 7B 16      jmp _puts_L1_print
2870   168A             _puts_END_print:
2871   168A             ; --- END INLINE ASM SEGMENT
2872   168A F9            leave
2873   168B 09            ret
2874   168C             
2875   168C             print_signed:
2876   168C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2877   168F             ; char digits[5]; 
2878   168F 52 05 00      sub sp, 5
2879   1692             ; int i = 0; 
2880   1692 52 02 00      sub sp, 2
2881   1695             ; --- START LOCAL VAR INITIALIZATION
2882   1695 FA FA FF      lea d, [bp + -6] ; $i
2883   1698 DA            push d
2884   1699 FD 2E 00 00   mov32 cb, $00000000
2884   169D 00 00 
2885   169F E7            pop d
2886   16A0 FD 43         mov [d], b
2887   16A2             ; --- END LOCAL VAR INITIALIZATION
2888   16A2             ; if (num < 0) { 
2889   16A2             _if47_cond:
2890   16A2 FA 05 00      lea d, [bp + 5] ; $num
2891   16A5 2A            mov b, [d]
2892   16A6 38 00 00      mov c, 0
2893   16A9             ; --- START RELATIONAL
2894   16A9 D7            push a
2895   16AA 11            mov a, b
2896   16AB FD 2E 00 00   mov32 cb, $00000000
2896   16AF 00 00 
2897   16B1 B0            cmp a, b
2898   16B2 FD 73         slt ; < (signed)
2899   16B4 E4            pop a
2900   16B5             ; --- END RELATIONAL
2901   16B5 C0 00 00      cmp b, 0
2902   16B8 C6 DB 16      je _if47_else
2903   16BB             _if47_TRUE:
2904   16BB             ; putchar('-'); 
2905   16BB             ; --- START FUNCTION CALL
2906   16BB FD 2E 2D 00   mov32 cb, $0000002d
2906   16BF 00 00 
2907   16C1 DD            push bl
2908   16C2 07 C4 14      call putchar
2909   16C5 51 01 00      add sp, 1
2910   16C8             ; --- END FUNCTION CALL
2911   16C8             ; num = -num; 
2912   16C8 FA 05 00      lea d, [bp + 5] ; $num
2913   16CB DA            push d
2914   16CC FA 05 00      lea d, [bp + 5] ; $num
2915   16CF 2A            mov b, [d]
2916   16D0 38 00 00      mov c, 0
2917   16D3 FD 97         neg b
2918   16D5 E7            pop d
2919   16D6 FD 43         mov [d], b
2920   16D8 0A 06 17      jmp _if47_exit
2921   16DB             _if47_else:
2922   16DB             ; if (num == 0) { 
2923   16DB             _if48_cond:
2924   16DB FA 05 00      lea d, [bp + 5] ; $num
2925   16DE 2A            mov b, [d]
2926   16DF 38 00 00      mov c, 0
2927   16E2             ; --- START RELATIONAL
2928   16E2 D7            push a
2929   16E3 11            mov a, b
2930   16E4 FD 2E 00 00   mov32 cb, $00000000
2930   16E8 00 00 
2931   16EA B0            cmp a, b
2932   16EB FD 71         seq ; ==
2933   16ED E4            pop a
2934   16EE             ; --- END RELATIONAL
2935   16EE C0 00 00      cmp b, 0
2936   16F1 C6 06 17      je _if48_exit
2937   16F4             _if48_TRUE:
2938   16F4             ; putchar('0'); 
2939   16F4             ; --- START FUNCTION CALL
2940   16F4 FD 2E 30 00   mov32 cb, $00000030
2940   16F8 00 00 
2941   16FA DD            push bl
2942   16FB 07 C4 14      call putchar
2943   16FE 51 01 00      add sp, 1
2944   1701             ; --- END FUNCTION CALL
2945   1701             ; return; 
2946   1701 F9            leave
2947   1702 09            ret
2948   1703 0A 06 17      jmp _if48_exit
2949   1706             _if48_exit:
2950   1706             _if47_exit:
2951   1706             ; while (num > 0) { 
2952   1706             _while49_cond:
2953   1706 FA 05 00      lea d, [bp + 5] ; $num
2954   1709 2A            mov b, [d]
2955   170A 38 00 00      mov c, 0
2956   170D             ; --- START RELATIONAL
2957   170D D7            push a
2958   170E 11            mov a, b
2959   170F FD 2E 00 00   mov32 cb, $00000000
2959   1713 00 00 
2960   1715 B0            cmp a, b
2961   1716 FD 7F         sgt ; >
2962   1718 E4            pop a
2963   1719             ; --- END RELATIONAL
2964   1719 C0 00 00      cmp b, 0
2965   171C C6 8B 17      je _while49_exit
2966   171F             _while49_block:
2967   171F             ; digits[i] = '0' + (num % 10); 
2968   171F FA FC FF      lea d, [bp + -4] ; $digits
2969   1722 D7            push a
2970   1723 DA            push d
2971   1724 FA FA FF      lea d, [bp + -6] ; $i
2972   1727 2A            mov b, [d]
2973   1728 38 00 00      mov c, 0
2974   172B E7            pop d
2975   172C 5A            add d, b
2976   172D E4            pop a
2977   172E DA            push d
2978   172F FD 2E 30 00   mov32 cb, $00000030
2978   1733 00 00 
2979   1735             ; --- START TERMS
2980   1735 D7            push a
2981   1736 11            mov a, b
2982   1737 FA 05 00      lea d, [bp + 5] ; $num
2983   173A 2A            mov b, [d]
2984   173B 38 00 00      mov c, 0
2985   173E             ; --- START FACTORS
2986   173E D7            push a
2987   173F FD D8         push g
2988   1741 11            mov a, b
2989   1742 FD 7A         mov g, c
2990   1744 FD 2E 0A 00   mov32 cb, $0000000a
2990   1748 00 00 
2991   174A AE            div a, b ; 
2992   174B 11            mov a, b
2993   174C FD 38         mov c, g
2994   174E 27            mov b, a
2995   174F FD F1         pop g
2996   1751 E4            pop a
2997   1752             ; --- END FACTORS
2998   1752 56            add b, a
2999   1753 E4            pop a
3000   1754             ; --- END TERMS
3001   1754 E7            pop d
3002   1755 FD 3E         mov [d], bl
3003   1757             ; num = num / 10; 
3004   1757 FA 05 00      lea d, [bp + 5] ; $num
3005   175A DA            push d
3006   175B FA 05 00      lea d, [bp + 5] ; $num
3007   175E 2A            mov b, [d]
3008   175F 38 00 00      mov c, 0
3009   1762             ; --- START FACTORS
3010   1762 D7            push a
3011   1763 FD D8         push g
3012   1765 11            mov a, b
3013   1766 FD 7A         mov g, c
3014   1768 FD 2E 0A 00   mov32 cb, $0000000a
3014   176C 00 00 
3015   176E AE            div a, b
3016   176F FD 38         mov c, g
3017   1771 27            mov b, a
3018   1772 FD F1         pop g
3019   1774 E4            pop a
3020   1775             ; --- END FACTORS
3021   1775 E7            pop d
3022   1776 FD 43         mov [d], b
3023   1778             ; i++; 
3024   1778 FA FA FF      lea d, [bp + -6] ; $i
3025   177B 2A            mov b, [d]
3026   177C 38 00 00      mov c, 0
3027   177F 11            mov a, b
3028   1780 FD 77         inc b
3029   1782 FA FA FF      lea d, [bp + -6] ; $i
3030   1785 FD 43         mov [d], b
3031   1787 27            mov b, a
3032   1788 0A 06 17      jmp _while49_cond
3033   178B             _while49_exit:
3034   178B             ; while (i > 0) { 
3035   178B             _while56_cond:
3036   178B FA FA FF      lea d, [bp + -6] ; $i
3037   178E 2A            mov b, [d]
3038   178F 38 00 00      mov c, 0
3039   1792             ; --- START RELATIONAL
3040   1792 D7            push a
3041   1793 11            mov a, b
3042   1794 FD 2E 00 00   mov32 cb, $00000000
3042   1798 00 00 
3043   179A B0            cmp a, b
3044   179B FD 7F         sgt ; >
3045   179D E4            pop a
3046   179E             ; --- END RELATIONAL
3047   179E C0 00 00      cmp b, 0
3048   17A1 C6 D3 17      je _while56_exit
3049   17A4             _while56_block:
3050   17A4             ; i--; 
3051   17A4 FA FA FF      lea d, [bp + -6] ; $i
3052   17A7 2A            mov b, [d]
3053   17A8 38 00 00      mov c, 0
3054   17AB 11            mov a, b
3055   17AC FD 7D         dec b
3056   17AE FA FA FF      lea d, [bp + -6] ; $i
3057   17B1 FD 43         mov [d], b
3058   17B3 27            mov b, a
3059   17B4             ; putchar(digits[i]); 
3060   17B4             ; --- START FUNCTION CALL
3061   17B4 FA FC FF      lea d, [bp + -4] ; $digits
3062   17B7 D7            push a
3063   17B8 DA            push d
3064   17B9 FA FA FF      lea d, [bp + -6] ; $i
3065   17BC 2A            mov b, [d]
3066   17BD 38 00 00      mov c, 0
3067   17C0 E7            pop d
3068   17C1 5A            add d, b
3069   17C2 E4            pop a
3070   17C3 32            mov bl, [d]
3071   17C4 A7 00         mov bh, 0
3072   17C6 38 00 00      mov c, 0
3073   17C9 DD            push bl
3074   17CA 07 C4 14      call putchar
3075   17CD 51 01 00      add sp, 1
3076   17D0             ; --- END FUNCTION CALL
3077   17D0 0A 8B 17      jmp _while56_cond
3078   17D3             _while56_exit:
3079   17D3 F9            leave
3080   17D4 09            ret
3081   17D5             
3082   17D5             print_unsigned:
3083   17D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3084   17D8             ; char digits[5]; 
3085   17D8 52 05 00      sub sp, 5
3086   17DB             ; int i; 
3087   17DB 52 02 00      sub sp, 2
3088   17DE             ; i = 0; 
3089   17DE FA FA FF      lea d, [bp + -6] ; $i
3090   17E1 DA            push d
3091   17E2 FD 2E 00 00   mov32 cb, $00000000
3091   17E6 00 00 
3092   17E8 E7            pop d
3093   17E9 FD 43         mov [d], b
3094   17EB             ; if(num == 0){ 
3095   17EB             _if57_cond:
3096   17EB FA 05 00      lea d, [bp + 5] ; $num
3097   17EE 2A            mov b, [d]
3098   17EF 38 00 00      mov c, 0
3099   17F2             ; --- START RELATIONAL
3100   17F2 D7            push a
3101   17F3 11            mov a, b
3102   17F4 FD 2E 00 00   mov32 cb, $00000000
3102   17F8 00 00 
3103   17FA B0            cmp a, b
3104   17FB FD 71         seq ; ==
3105   17FD E4            pop a
3106   17FE             ; --- END RELATIONAL
3107   17FE C0 00 00      cmp b, 0
3108   1801 C6 16 18      je _if57_exit
3109   1804             _if57_TRUE:
3110   1804             ; putchar('0'); 
3111   1804             ; --- START FUNCTION CALL
3112   1804 FD 2E 30 00   mov32 cb, $00000030
3112   1808 00 00 
3113   180A DD            push bl
3114   180B 07 C4 14      call putchar
3115   180E 51 01 00      add sp, 1
3116   1811             ; --- END FUNCTION CALL
3117   1811             ; return; 
3118   1811 F9            leave
3119   1812 09            ret
3120   1813 0A 16 18      jmp _if57_exit
3121   1816             _if57_exit:
3122   1816             ; while (num > 0) { 
3123   1816             _while58_cond:
3124   1816 FA 05 00      lea d, [bp + 5] ; $num
3125   1819 2A            mov b, [d]
3126   181A 38 00 00      mov c, 0
3127   181D             ; --- START RELATIONAL
3128   181D D7            push a
3129   181E 11            mov a, b
3130   181F FD 2E 00 00   mov32 cb, $00000000
3130   1823 00 00 
3131   1825 B0            cmp a, b
3132   1826 FD 81         sgu ; > (unsigned)
3133   1828 E4            pop a
3134   1829             ; --- END RELATIONAL
3135   1829 C0 00 00      cmp b, 0
3136   182C C6 9B 18      je _while58_exit
3137   182F             _while58_block:
3138   182F             ; digits[i] = '0' + (num % 10); 
3139   182F FA FC FF      lea d, [bp + -4] ; $digits
3140   1832 D7            push a
3141   1833 DA            push d
3142   1834 FA FA FF      lea d, [bp + -6] ; $i
3143   1837 2A            mov b, [d]
3144   1838 38 00 00      mov c, 0
3145   183B E7            pop d
3146   183C 5A            add d, b
3147   183D E4            pop a
3148   183E DA            push d
3149   183F FD 2E 30 00   mov32 cb, $00000030
3149   1843 00 00 
3150   1845             ; --- START TERMS
3151   1845 D7            push a
3152   1846 11            mov a, b
3153   1847 FA 05 00      lea d, [bp + 5] ; $num
3154   184A 2A            mov b, [d]
3155   184B 38 00 00      mov c, 0
3156   184E             ; --- START FACTORS
3157   184E D7            push a
3158   184F FD D8         push g
3159   1851 11            mov a, b
3160   1852 FD 7A         mov g, c
3161   1854 FD 2E 0A 00   mov32 cb, $0000000a
3161   1858 00 00 
3162   185A AE            div a, b ; 
3163   185B 11            mov a, b
3164   185C FD 38         mov c, g
3165   185E 27            mov b, a
3166   185F FD F1         pop g
3167   1861 E4            pop a
3168   1862             ; --- END FACTORS
3169   1862 56            add b, a
3170   1863 E4            pop a
3171   1864             ; --- END TERMS
3172   1864 E7            pop d
3173   1865 FD 3E         mov [d], bl
3174   1867             ; num = num / 10; 
3175   1867 FA 05 00      lea d, [bp + 5] ; $num
3176   186A DA            push d
3177   186B FA 05 00      lea d, [bp + 5] ; $num
3178   186E 2A            mov b, [d]
3179   186F 38 00 00      mov c, 0
3180   1872             ; --- START FACTORS
3181   1872 D7            push a
3182   1873 FD D8         push g
3183   1875 11            mov a, b
3184   1876 FD 7A         mov g, c
3185   1878 FD 2E 0A 00   mov32 cb, $0000000a
3185   187C 00 00 
3186   187E AE            div a, b
3187   187F FD 38         mov c, g
3188   1881 27            mov b, a
3189   1882 FD F1         pop g
3190   1884 E4            pop a
3191   1885             ; --- END FACTORS
3192   1885 E7            pop d
3193   1886 FD 43         mov [d], b
3194   1888             ; i++; 
3195   1888 FA FA FF      lea d, [bp + -6] ; $i
3196   188B 2A            mov b, [d]
3197   188C 38 00 00      mov c, 0
3198   188F 11            mov a, b
3199   1890 FD 77         inc b
3200   1892 FA FA FF      lea d, [bp + -6] ; $i
3201   1895 FD 43         mov [d], b
3202   1897 27            mov b, a
3203   1898 0A 16 18      jmp _while58_cond
3204   189B             _while58_exit:
3205   189B             ; while (i > 0) { 
3206   189B             _while65_cond:
3207   189B FA FA FF      lea d, [bp + -6] ; $i
3208   189E 2A            mov b, [d]
3209   189F 38 00 00      mov c, 0
3210   18A2             ; --- START RELATIONAL
3211   18A2 D7            push a
3212   18A3 11            mov a, b
3213   18A4 FD 2E 00 00   mov32 cb, $00000000
3213   18A8 00 00 
3214   18AA B0            cmp a, b
3215   18AB FD 7F         sgt ; >
3216   18AD E4            pop a
3217   18AE             ; --- END RELATIONAL
3218   18AE C0 00 00      cmp b, 0
3219   18B1 C6 E3 18      je _while65_exit
3220   18B4             _while65_block:
3221   18B4             ; i--; 
3222   18B4 FA FA FF      lea d, [bp + -6] ; $i
3223   18B7 2A            mov b, [d]
3224   18B8 38 00 00      mov c, 0
3225   18BB 11            mov a, b
3226   18BC FD 7D         dec b
3227   18BE FA FA FF      lea d, [bp + -6] ; $i
3228   18C1 FD 43         mov [d], b
3229   18C3 27            mov b, a
3230   18C4             ; putchar(digits[i]); 
3231   18C4             ; --- START FUNCTION CALL
3232   18C4 FA FC FF      lea d, [bp + -4] ; $digits
3233   18C7 D7            push a
3234   18C8 DA            push d
3235   18C9 FA FA FF      lea d, [bp + -6] ; $i
3236   18CC 2A            mov b, [d]
3237   18CD 38 00 00      mov c, 0
3238   18D0 E7            pop d
3239   18D1 5A            add d, b
3240   18D2 E4            pop a
3241   18D3 32            mov bl, [d]
3242   18D4 A7 00         mov bh, 0
3243   18D6 38 00 00      mov c, 0
3244   18D9 DD            push bl
3245   18DA 07 C4 14      call putchar
3246   18DD 51 01 00      add sp, 1
3247   18E0             ; --- END FUNCTION CALL
3248   18E0 0A 9B 18      jmp _while65_cond
3249   18E3             _while65_exit:
3250   18E3 F9            leave
3251   18E4 09            ret
3252   18E5             
3253   18E5             printx16:
3254   18E5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3255   18E8             ; --- BEGIN INLINE ASM SEGMENT
3256   18E8 FA 05 00      lea d, [bp + 5] ; $hex
3257   18EB 2A            mov b, [d]
3258   18EC             print_u16x_printx16:
3259   18EC DD            push bl
3260   18ED 30            mov bl, bh
3261   18EE 07 0B 19      call _itoa_printx16        
3262   18F1 2F            mov bl, al        
3263   18F2 19 00         mov al, 0
3264   18F4 05 03         syscall sys_io        
3265   18F6 24            mov ah, bl        
3266   18F7 19 00         mov al, 0
3267   18F9 05 03         syscall sys_io        
3268   18FB EA            pop bl
3269   18FC 07 0B 19      call _itoa_printx16        
3270   18FF 2F            mov bl, al        
3271   1900 19 00         mov al, 0
3272   1902 05 03         syscall sys_io        
3273   1904 24            mov ah, bl        
3274   1905 19 00         mov al, 0
3275   1907 05 03         syscall sys_io        
3276   1909             ; --- END INLINE ASM SEGMENT
3277   1909             ; return; 
3278   1909 F9            leave
3279   190A 09            ret
3280   190B             ; --- BEGIN INLINE ASM SEGMENT
3281   190B             _itoa_printx16:
3282   190B DA            push d
3283   190C D8            push b
3284   190D A7 00         mov bh, 0
3285   190F FD A4 04      shr bl, 4  
3286   1912 74            mov d, b
3287   1913 1F 25 19      mov al, [d + s_hex_digits_printx16]
3288   1916 23            mov ah, al
3289   1917 E5            pop b
3290   1918 D8            push b
3291   1919 A7 00         mov bh, 0
3292   191B FD 87 0F      and bl, $0F
3293   191E 74            mov d, b
3294   191F 1F 25 19      mov al, [d + s_hex_digits_printx16]
3295   1922 E5            pop b
3296   1923 E7            pop d
3297   1924 09            ret
3298   1925 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
3298   1929 34 35 36 37 
3298   192D 38 39 41 42 
3298   1931 43 44 45 46 
3299   1935             ; --- END INLINE ASM SEGMENT
3300   1935 F9            leave
3301   1936 09            ret
3302   1937             
3303   1937             gets:
3304   1937 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3305   193A             ; --- BEGIN INLINE ASM SEGMENT
3306   193A FA 05 00      lea d, [bp + 5] ; $s
3307   193D 15            mov a, [d]
3308   193E 3C            mov d, a
3309   193F 07 54 19      call _gets_gets
3310   1942             ; --- END INLINE ASM SEGMENT
3311   1942             ; return strlen(s); 
3312   1942             ; --- START FUNCTION CALL
3313   1942 FA 05 00      lea d, [bp + 5] ; $s
3314   1945 2A            mov b, [d]
3315   1946 38 00 00      mov c, 0
3316   1949 FD AB         swp b
3317   194B D8            push b
3318   194C 07 F5 19      call strlen
3319   194F 51 02 00      add sp, 2
3320   1952             ; --- END FUNCTION CALL
3321   1952 F9            leave
3322   1953 09            ret
3323   1954             ; --- BEGIN INLINE ASM SEGMENT
3324   1954             _gets_gets:
3325   1954 D7            push a
3326   1955 DA            push d
3327   1956             _gets_loop_gets:
3328   1956 19 01         mov al, 1
3329   1958 05 03         syscall sys_io      
3330   195A B9 00         cmp al, 0        
3331   195C C6 56 19      je _gets_loop_gets      
3332   195F 76 1B         cmp ah, 27
3333   1961 C6 82 19      je _gets_ansi_esc_gets
3334   1964 76 0A         cmp ah, $0A        
3335   1966 C6 ED 19      je _gets_end_gets
3336   1969 76 0D         cmp ah, $0D        
3337   196B C6 ED 19      je _gets_end_gets
3338   196E 76 5C         cmp ah, $5C        
3339   1970 C6 AE 19      je _gets_escape_gets
3340   1973 76 08         cmp ah, $08      
3341   1975 C6 7E 19      je _gets_backspace_gets
3342   1978 1A            mov al, ah
3343   1979 3E            mov [d], al
3344   197A 79            inc d
3345   197B 0A 56 19      jmp _gets_loop_gets
3346   197E             _gets_backspace_gets:
3347   197E 7F            dec d
3348   197F 0A 56 19      jmp _gets_loop_gets
3349   1982             _gets_ansi_esc_gets:
3350   1982 19 01         mov al, 1
3351   1984 05 03         syscall sys_io        
3352   1986 B9 00         cmp al, 0          
3353   1988 C6 82 19      je _gets_ansi_esc_gets    
3354   198B 76 5B         cmp ah, '['
3355   198D C7 56 19      jne _gets_loop_gets
3356   1990             _gets_ansi_esc_2_gets:
3357   1990 19 01         mov al, 1
3358   1992 05 03         syscall sys_io          
3359   1994 B9 00         cmp al, 0            
3360   1996 C6 90 19      je _gets_ansi_esc_2_gets  
3361   1999 76 44         cmp ah, 'D'
3362   199B C6 A6 19      je _gets_left_arrow_gets
3363   199E 76 43         cmp ah, 'C'
3364   19A0 C6 AA 19      je _gets_right_arrow_gets
3365   19A3 0A 56 19      jmp _gets_loop_gets
3366   19A6             _gets_left_arrow_gets:
3367   19A6 7F            dec d
3368   19A7 0A 56 19      jmp _gets_loop_gets
3369   19AA             _gets_right_arrow_gets:
3370   19AA 79            inc d
3371   19AB 0A 56 19      jmp _gets_loop_gets
3372   19AE             _gets_escape_gets:
3373   19AE 19 01         mov al, 1
3374   19B0 05 03         syscall sys_io      
3375   19B2 B9 00         cmp al, 0        
3376   19B4 C6 AE 19      je _gets_escape_gets      
3377   19B7 76 6E         cmp ah, 'n'
3378   19B9 C6 D8 19      je _gets_LF_gets
3379   19BC 76 72         cmp ah, 'r'
3380   19BE C6 DF 19      je _gets_CR_gets
3381   19C1 76 30         cmp ah, '0'
3382   19C3 C6 E6 19      je _gets_NULL_gets
3383   19C6 76 5C         cmp ah, $5C  
3384   19C8 C6 D1 19      je _gets_slash_gets
3385   19CB 1A            mov al, ah        
3386   19CC 3E            mov [d], al
3387   19CD 79            inc d
3388   19CE 0A 56 19      jmp _gets_loop_gets
3389   19D1             _gets_slash_gets:
3390   19D1 19 5C         mov al, $5C
3391   19D3 3E            mov [d], al
3392   19D4 79            inc d
3393   19D5 0A 56 19      jmp _gets_loop_gets
3394   19D8             _gets_LF_gets:
3395   19D8 19 0A         mov al, $0A
3396   19DA 3E            mov [d], al
3397   19DB 79            inc d
3398   19DC 0A 56 19      jmp _gets_loop_gets
3399   19DF             _gets_CR_gets:
3400   19DF 19 0D         mov al, $0D
3401   19E1 3E            mov [d], al
3402   19E2 79            inc d
3403   19E3 0A 56 19      jmp _gets_loop_gets
3404   19E6             _gets_NULL_gets:
3405   19E6 19 00         mov al, $00
3406   19E8 3E            mov [d], al
3407   19E9 79            inc d
3408   19EA 0A 56 19      jmp _gets_loop_gets
3409   19ED             _gets_end_gets:
3410   19ED 19 00         mov al, 0
3411   19EF 3E            mov [d], al        
3412   19F0 E7            pop d
3413   19F1 E4            pop a
3414   19F2 09            ret
3415   19F3             ; --- END INLINE ASM SEGMENT
3416   19F3 F9            leave
3417   19F4 09            ret
3418   19F5             
3419   19F5             strlen:
3420   19F5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3421   19F8             ; int length; 
3422   19F8 52 02 00      sub sp, 2
3423   19FB             ; length = 0; 
3424   19FB FA FF FF      lea d, [bp + -1] ; $length
3425   19FE DA            push d
3426   19FF FD 2E 00 00   mov32 cb, $00000000
3426   1A03 00 00 
3427   1A05 E7            pop d
3428   1A06 FD 43         mov [d], b
3429   1A08             ; while (str[length] != 0) { 
3430   1A08             _while66_cond:
3431   1A08 FA 05 00      lea d, [bp + 5] ; $str
3432   1A0B FD 2A         mov d, [d]
3433   1A0D D7            push a
3434   1A0E DA            push d
3435   1A0F FA FF FF      lea d, [bp + -1] ; $length
3436   1A12 2A            mov b, [d]
3437   1A13 38 00 00      mov c, 0
3438   1A16 E7            pop d
3439   1A17 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3440   1A1B E4            pop a
3441   1A1C 32            mov bl, [d]
3442   1A1D A7 00         mov bh, 0
3443   1A1F 38 00 00      mov c, 0
3444   1A22             ; --- START RELATIONAL
3445   1A22 D7            push a
3446   1A23 11            mov a, b
3447   1A24 FD 2E 00 00   mov32 cb, $00000000
3447   1A28 00 00 
3448   1A2A B0            cmp a, b
3449   1A2B FD 72         sneq ; !=
3450   1A2D E4            pop a
3451   1A2E             ; --- END RELATIONAL
3452   1A2E C0 00 00      cmp b, 0
3453   1A31 C6 47 1A      je _while66_exit
3454   1A34             _while66_block:
3455   1A34             ; length++; 
3456   1A34 FA FF FF      lea d, [bp + -1] ; $length
3457   1A37 2A            mov b, [d]
3458   1A38 38 00 00      mov c, 0
3459   1A3B 11            mov a, b
3460   1A3C FD 77         inc b
3461   1A3E FA FF FF      lea d, [bp + -1] ; $length
3462   1A41 FD 43         mov [d], b
3463   1A43 27            mov b, a
3464   1A44 0A 08 1A      jmp _while66_cond
3465   1A47             _while66_exit:
3466   1A47             ; return length; 
3467   1A47 FA FF FF      lea d, [bp + -1] ; $length
3468   1A4A 2A            mov b, [d]
3469   1A4B 38 00 00      mov c, 0
3470   1A4E F9            leave
3471   1A4F 09            ret
3472   1A50             ; --- END TEXT SEGMENT
3473   1A50             
3474   1A50             ; --- BEGIN DATA SEGMENT
3475   1A50 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
3475   1A54 45 46 47 48 
3475   1A58 49 4A 4B 4C 
3475   1A5C 4D 4E 4F 50 
3475   1A60 51 52 53 54 
3475   1A64 55 56 57 58 
3475   1A68 59 5A 61 62 
3475   1A6C 63 64 65 66 
3475   1A70 67 68 69 6A 
3475   1A74 6B 6C 6D 6E 
3475   1A78 6F 70 71 72 
3475   1A7C 73 74 75 76 
3475   1A80 77 78 79 7A 
3475   1A84 30 31 32 33 
3475   1A88 34 35 36 37 
3475   1A8C 38 39 2B 2F 
3475   1A90 00 
3476   1A91 50 1A       _base64_table: .dw _base64_table_data
3477   1A93 0A 45 6E 74 _s0: .db "\nEnter a base64 encoded string to decode: ", 0
3477   1A97 65 72 20 61 
3477   1A9B 20 62 61 73 
3477   1A9F 65 36 34 20 
3477   1AA3 65 6E 63 6F 
3477   1AA7 64 65 64 20 
3477   1AAB 73 74 72 69 
3477   1AAF 6E 67 20 74 
3477   1AB3 6F 20 64 65 
3477   1AB7 63 6F 64 65 
3477   1ABB 3A 20 00 
3478   1ABE 0A 45 6E 63 _s1: .db "\nEncoded string: %s\n", 0
3478   1AC2 6F 64 65 64 
3478   1AC6 20 73 74 72 
3478   1ACA 69 6E 67 3A 
3478   1ACE 20 25 73 0A 
3478   1AD2 00 
3479   1AD3 0A 44 65 63 _s2: .db "\nDecoded string: %s\n", 0
3479   1AD7 6F 64 65 64 
3479   1ADB 20 73 74 72 
3479   1ADF 69 6E 67 3A 
3479   1AE3 20 25 73 0A 
3479   1AE7 00 
3480   1AE8 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
3480   1AEC 70 65 63 74 
3480   1AF0 65 64 20 66 
3480   1AF4 6F 72 6D 61 
3480   1AF8 74 20 69 6E 
3480   1AFC 20 70 72 69 
3480   1B00 6E 74 66 2E 
3480   1B04 00 
3481   1B05 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
3481   1B09 72 3A 20 55 
3481   1B0D 6E 6B 6E 6F 
3481   1B11 77 6E 20 61 
3481   1B15 72 67 75 6D 
3481   1B19 65 6E 74 20 
3481   1B1D 74 79 70 65 
3481   1B21 2E 0A 00 
3482   1B24             
3483   1B24 26 1B       _heap_top: .dw _heap
3484   1B26 00          _heap: .db 0
3485   1B27             ; --- END DATA SEGMENT
3486   1B27             
3487   1B27             .end
tasm: Number of errors = 0
