0001   0000             ; --- FILENAME: programs/base64.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; char input[512]; 
0011   0408 52 00 02      sub sp, 512
0012   040B             ; char output[256]; 
0013   040B 52 00 01      sub sp, 256
0014   040E             ; printf("\nEnter a base64 encoded string to decode: "); 
0015   040E             ; --- START FUNCTION CALL
0016   040E 26 8F 1A      mov b, _s0 ; "\nEnter a base64 encoded string to decode: "
0017   0411 FD AB         swp b
0018   0413 D8            push b
0019   0414 07 46 10      call printf
0020   0417 51 02 00      add sp, 2
0021   041A             ; --- END FUNCTION CALL
0022   041A             ; gets(input); 
0023   041A             ; --- START FUNCTION CALL
0024   041A FA 01 FE      lea d, [bp + -511] ; $input
0025   041D 2D            mov b, d
0026   041E 38 00 00      mov c, 0
0027   0421 FD AB         swp b
0028   0423 D8            push b
0029   0424 07 33 19      call gets
0030   0427 51 02 00      add sp, 2
0031   042A             ; --- END FUNCTION CALL
0032   042A             ; base64_encode(input, output); 
0033   042A             ; --- START FUNCTION CALL
0034   042A FA 01 FD      lea d, [bp + -767] ; $output
0035   042D 2D            mov b, d
0036   042E 38 00 00      mov c, 0
0037   0431 FD AB         swp b
0038   0433 D8            push b
0039   0434 FA 01 FE      lea d, [bp + -511] ; $input
0040   0437 2D            mov b, d
0041   0438 38 00 00      mov c, 0
0042   043B FD AB         swp b
0043   043D D8            push b
0044   043E 07 93 04      call base64_encode
0045   0441 51 04 00      add sp, 4
0046   0444             ; --- END FUNCTION CALL
0047   0444             ; printf("\nEncoded string: %s\n", output); 
0048   0444             ; --- START FUNCTION CALL
0049   0444 FA 01 FD      lea d, [bp + -767] ; $output
0050   0447 2D            mov b, d
0051   0448 38 00 00      mov c, 0
0052   044B FD AB         swp b
0053   044D D8            push b
0054   044E 26 BA 1A      mov b, _s1 ; "\nEncoded string: %s\n"
0055   0451 FD AB         swp b
0056   0453 D8            push b
0057   0454 07 46 10      call printf
0058   0457 51 04 00      add sp, 4
0059   045A             ; --- END FUNCTION CALL
0060   045A             ; base64_decode(output, input); 
0061   045A             ; --- START FUNCTION CALL
0062   045A FA 01 FE      lea d, [bp + -511] ; $input
0063   045D 2D            mov b, d
0064   045E 38 00 00      mov c, 0
0065   0461 FD AB         swp b
0066   0463 D8            push b
0067   0464 FA 01 FD      lea d, [bp + -767] ; $output
0068   0467 2D            mov b, d
0069   0468 38 00 00      mov c, 0
0070   046B FD AB         swp b
0071   046D D8            push b
0072   046E 07 E2 0A      call base64_decode
0073   0471 51 04 00      add sp, 4
0074   0474             ; --- END FUNCTION CALL
0075   0474             ; printf("\nDecoded string: %s\n", input); 
0076   0474             ; --- START FUNCTION CALL
0077   0474 FA 01 FE      lea d, [bp + -511] ; $input
0078   0477 2D            mov b, d
0079   0478 38 00 00      mov c, 0
0080   047B FD AB         swp b
0081   047D D8            push b
0082   047E 26 CF 1A      mov b, _s2 ; "\nDecoded string: %s\n"
0083   0481 FD AB         swp b
0084   0483 D8            push b
0085   0484 07 46 10      call printf
0086   0487 51 04 00      add sp, 4
0087   048A             ; --- END FUNCTION CALL
0088   048A             ; return 0; 
0089   048A FD 2E 00 00   mov32 cb, $00000000
0089   048E 00 00 
0090   0490 F9            leave
0091   0491 05 0B         syscall sys_terminate_proc
0092   0493             
0093   0493             base64_encode:
0094   0493 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0095   0496             ; int i = 0; 
0096   0496 52 02 00      sub sp, 2
0097   0499             ; --- START LOCAL VAR INITIALIZATION
0098   0499 FA FF FF      lea d, [bp + -1] ; $i
0099   049C DA            push d
0100   049D FD 2E 00 00   mov32 cb, $00000000
0100   04A1 00 00 
0101   04A3 E7            pop d
0102   04A4 FD 43         mov [d], b
0103   04A6             ; --- END LOCAL VAR INITIALIZATION
0104   04A6             ; int j = 0; 
0105   04A6 52 02 00      sub sp, 2
0106   04A9             ; --- START LOCAL VAR INITIALIZATION
0107   04A9 FA FD FF      lea d, [bp + -3] ; $j
0108   04AC DA            push d
0109   04AD FD 2E 00 00   mov32 cb, $00000000
0109   04B1 00 00 
0110   04B3 E7            pop d
0111   04B4 FD 43         mov [d], b
0112   04B6             ; --- END LOCAL VAR INITIALIZATION
0113   04B6             ; int k; 
0114   04B6 52 02 00      sub sp, 2
0115   04B9             ; int input_len; 
0116   04B9 52 02 00      sub sp, 2
0117   04BC             ; unsigned char input_buffer[3]; 
0118   04BC 52 03 00      sub sp, 3
0119   04BF             ; unsigned char output_buffer[4]; 
0120   04BF 52 04 00      sub sp, 4
0121   04C2             ; input_len = strlen(input); 
0122   04C2 FA F9 FF      lea d, [bp + -7] ; $input_len
0123   04C5 DA            push d
0124   04C6             ; --- START FUNCTION CALL
0125   04C6 FA 05 00      lea d, [bp + 5] ; $input
0126   04C9 2A            mov b, [d]
0127   04CA 38 00 00      mov c, 0
0128   04CD FD AB         swp b
0129   04CF D8            push b
0130   04D0 07 F1 19      call strlen
0131   04D3 51 02 00      add sp, 2
0132   04D6             ; --- END FUNCTION CALL
0133   04D6 E7            pop d
0134   04D7 FD 43         mov [d], b
0135   04D9             ; while (input_len--) { 
0136   04D9             _while1_cond:
0137   04D9 FA F9 FF      lea d, [bp + -7] ; $input_len
0138   04DC 2A            mov b, [d]
0139   04DD 38 00 00      mov c, 0
0140   04E0 11            mov a, b
0141   04E1 FD 7D         dec b
0142   04E3 FA F9 FF      lea d, [bp + -7] ; $input_len
0143   04E6 FD 43         mov [d], b
0144   04E8 27            mov b, a
0145   04E9 C0 00 00      cmp b, 0
0146   04EC C6 1B 07      je _while1_exit
0147   04EF             _while1_block:
0148   04EF             ; input_buffer[i++] = *(input++); 
0149   04EF FA F6 FF      lea d, [bp + -10] ; $input_buffer
0150   04F2 D7            push a
0151   04F3 DA            push d
0152   04F4 FA FF FF      lea d, [bp + -1] ; $i
0153   04F7 2A            mov b, [d]
0154   04F8 38 00 00      mov c, 0
0155   04FB 11            mov a, b
0156   04FC FD 77         inc b
0157   04FE FA FF FF      lea d, [bp + -1] ; $i
0158   0501 FD 43         mov [d], b
0159   0503 27            mov b, a
0160   0504 E7            pop d
0161   0505 5A            add d, b
0162   0506 E4            pop a
0163   0507 DA            push d
0164   0508 FA 05 00      lea d, [bp + 5] ; $input
0165   050B 2A            mov b, [d]
0166   050C 38 00 00      mov c, 0
0167   050F FD 77         inc b
0168   0511 FA 05 00      lea d, [bp + 5] ; $input
0169   0514 FD 43         mov [d], b
0170   0516 FD 7D         dec b
0171   0518 74            mov d, b
0172   0519 32            mov bl, [d]
0173   051A A7 00         mov bh, 0
0174   051C 38 00 00      mov c, 0
0175   051F E7            pop d
0176   0520 FD 3E         mov [d], bl
0177   0522             ; if (i == 3) { 
0178   0522             _if2_cond:
0179   0522 FA FF FF      lea d, [bp + -1] ; $i
0180   0525 2A            mov b, [d]
0181   0526 38 00 00      mov c, 0
0182   0529             ; --- START RELATIONAL
0183   0529 D7            push a
0184   052A 11            mov a, b
0185   052B FD 2E 03 00   mov32 cb, $00000003
0185   052F 00 00 
0186   0531 B0            cmp a, b
0187   0532 FD 71         seq ; ==
0188   0534 E4            pop a
0189   0535             ; --- END RELATIONAL
0190   0535 C0 00 00      cmp b, 0
0191   0538 C6 18 07      je _if2_exit
0192   053B             _if2_TRUE:
0193   053B             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0194   053B FA F2 FF      lea d, [bp + -14] ; $output_buffer
0195   053E D7            push a
0196   053F DA            push d
0197   0540 FD 2E 00 00   mov32 cb, $00000000
0197   0544 00 00 
0198   0546 E7            pop d
0199   0547 5A            add d, b
0200   0548 E4            pop a
0201   0549 DA            push d
0202   054A FA F6 FF      lea d, [bp + -10] ; $input_buffer
0203   054D D7            push a
0204   054E DA            push d
0205   054F FD 2E 00 00   mov32 cb, $00000000
0205   0553 00 00 
0206   0555 E7            pop d
0207   0556 5A            add d, b
0208   0557 E4            pop a
0209   0558 32            mov bl, [d]
0210   0559 A7 00         mov bh, 0
0211   055B 38 00 00      mov c, 0
0212   055E D7            push a
0213   055F 11            mov a, b
0214   0560 FD 2E FC 00   mov32 cb, $000000fc
0214   0564 00 00 
0215   0566 FD 92         and b, a ; &
0216   0568 E4            pop a
0217   0569             ; --- START SHIFT
0218   0569 D7            push a
0219   056A 11            mov a, b
0220   056B FD 2E 02 00   mov32 cb, $00000002
0220   056F 00 00 
0221   0571 FD 39         mov c, b
0222   0573 A5            ashr a, cl
0223   0574 27            mov b, a
0224   0575 E4            pop a
0225   0576             ; --- END SHIFT
0226   0576 E7            pop d
0227   0577 FD 3E         mov [d], bl
0228   0579             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0229   0579 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0230   057C D7            push a
0231   057D DA            push d
0232   057E FD 2E 01 00   mov32 cb, $00000001
0232   0582 00 00 
0233   0584 E7            pop d
0234   0585 5A            add d, b
0235   0586 E4            pop a
0236   0587 DA            push d
0237   0588 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0238   058B D7            push a
0239   058C DA            push d
0240   058D FD 2E 00 00   mov32 cb, $00000000
0240   0591 00 00 
0241   0593 E7            pop d
0242   0594 5A            add d, b
0243   0595 E4            pop a
0244   0596 32            mov bl, [d]
0245   0597 A7 00         mov bh, 0
0246   0599 38 00 00      mov c, 0
0247   059C D7            push a
0248   059D 11            mov a, b
0249   059E FD 2E 03 00   mov32 cb, $00000003
0249   05A2 00 00 
0250   05A4 FD 92         and b, a ; &
0251   05A6 E4            pop a
0252   05A7             ; --- START SHIFT
0253   05A7 D7            push a
0254   05A8 11            mov a, b
0255   05A9 FD 2E 04 00   mov32 cb, $00000004
0255   05AD 00 00 
0256   05AF FD 39         mov c, b
0257   05B1 9D            shl a, cl
0258   05B2 27            mov b, a
0259   05B3 E4            pop a
0260   05B4             ; --- END SHIFT
0261   05B4             ; --- START TERMS
0262   05B4 D7            push a
0263   05B5 11            mov a, b
0264   05B6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0265   05B9 D7            push a
0266   05BA DA            push d
0267   05BB FD 2E 01 00   mov32 cb, $00000001
0267   05BF 00 00 
0268   05C1 E7            pop d
0269   05C2 5A            add d, b
0270   05C3 E4            pop a
0271   05C4 32            mov bl, [d]
0272   05C5 A7 00         mov bh, 0
0273   05C7 38 00 00      mov c, 0
0274   05CA D7            push a
0275   05CB 11            mov a, b
0276   05CC FD 2E F0 00   mov32 cb, $000000f0
0276   05D0 00 00 
0277   05D2 FD 92         and b, a ; &
0278   05D4 E4            pop a
0279   05D5             ; --- START SHIFT
0280   05D5 D7            push a
0281   05D6 11            mov a, b
0282   05D7 FD 2E 04 00   mov32 cb, $00000004
0282   05DB 00 00 
0283   05DD FD 39         mov c, b
0284   05DF A5            ashr a, cl
0285   05E0 27            mov b, a
0286   05E1 E4            pop a
0287   05E2             ; --- END SHIFT
0288   05E2 56            add b, a
0289   05E3 E4            pop a
0290   05E4             ; --- END TERMS
0291   05E4 E7            pop d
0292   05E5 FD 3E         mov [d], bl
0293   05E7             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0294   05E7 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0295   05EA D7            push a
0296   05EB DA            push d
0297   05EC FD 2E 02 00   mov32 cb, $00000002
0297   05F0 00 00 
0298   05F2 E7            pop d
0299   05F3 5A            add d, b
0300   05F4 E4            pop a
0301   05F5 DA            push d
0302   05F6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0303   05F9 D7            push a
0304   05FA DA            push d
0305   05FB FD 2E 01 00   mov32 cb, $00000001
0305   05FF 00 00 
0306   0601 E7            pop d
0307   0602 5A            add d, b
0308   0603 E4            pop a
0309   0604 32            mov bl, [d]
0310   0605 A7 00         mov bh, 0
0311   0607 38 00 00      mov c, 0
0312   060A D7            push a
0313   060B 11            mov a, b
0314   060C FD 2E 0F 00   mov32 cb, $0000000f
0314   0610 00 00 
0315   0612 FD 92         and b, a ; &
0316   0614 E4            pop a
0317   0615             ; --- START SHIFT
0318   0615 D7            push a
0319   0616 11            mov a, b
0320   0617 FD 2E 02 00   mov32 cb, $00000002
0320   061B 00 00 
0321   061D FD 39         mov c, b
0322   061F 9D            shl a, cl
0323   0620 27            mov b, a
0324   0621 E4            pop a
0325   0622             ; --- END SHIFT
0326   0622             ; --- START TERMS
0327   0622 D7            push a
0328   0623 11            mov a, b
0329   0624 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0330   0627 D7            push a
0331   0628 DA            push d
0332   0629 FD 2E 02 00   mov32 cb, $00000002
0332   062D 00 00 
0333   062F E7            pop d
0334   0630 5A            add d, b
0335   0631 E4            pop a
0336   0632 32            mov bl, [d]
0337   0633 A7 00         mov bh, 0
0338   0635 38 00 00      mov c, 0
0339   0638 D7            push a
0340   0639 11            mov a, b
0341   063A FD 2E C0 00   mov32 cb, $000000c0
0341   063E 00 00 
0342   0640 FD 92         and b, a ; &
0343   0642 E4            pop a
0344   0643             ; --- START SHIFT
0345   0643 D7            push a
0346   0644 11            mov a, b
0347   0645 FD 2E 06 00   mov32 cb, $00000006
0347   0649 00 00 
0348   064B FD 39         mov c, b
0349   064D A5            ashr a, cl
0350   064E 27            mov b, a
0351   064F E4            pop a
0352   0650             ; --- END SHIFT
0353   0650 56            add b, a
0354   0651 E4            pop a
0355   0652             ; --- END TERMS
0356   0652 E7            pop d
0357   0653 FD 3E         mov [d], bl
0358   0655             ; output_buffer[3] = input_buffer[2] & 0x3F; 
0359   0655 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0360   0658 D7            push a
0361   0659 DA            push d
0362   065A FD 2E 03 00   mov32 cb, $00000003
0362   065E 00 00 
0363   0660 E7            pop d
0364   0661 5A            add d, b
0365   0662 E4            pop a
0366   0663 DA            push d
0367   0664 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0368   0667 D7            push a
0369   0668 DA            push d
0370   0669 FD 2E 02 00   mov32 cb, $00000002
0370   066D 00 00 
0371   066F E7            pop d
0372   0670 5A            add d, b
0373   0671 E4            pop a
0374   0672 32            mov bl, [d]
0375   0673 A7 00         mov bh, 0
0376   0675 38 00 00      mov c, 0
0377   0678 D7            push a
0378   0679 11            mov a, b
0379   067A FD 2E 3F 00   mov32 cb, $0000003f
0379   067E 00 00 
0380   0680 FD 92         and b, a ; &
0381   0682 E4            pop a
0382   0683 E7            pop d
0383   0684 FD 3E         mov [d], bl
0384   0686             ; for (i = 0; i < 4; i++) { 
0385   0686             _for3_init:
0386   0686 FA FF FF      lea d, [bp + -1] ; $i
0387   0689 DA            push d
0388   068A FD 2E 00 00   mov32 cb, $00000000
0388   068E 00 00 
0389   0690 E7            pop d
0390   0691 FD 43         mov [d], b
0391   0693             _for3_cond:
0392   0693 FA FF FF      lea d, [bp + -1] ; $i
0393   0696 2A            mov b, [d]
0394   0697 38 00 00      mov c, 0
0395   069A             ; --- START RELATIONAL
0396   069A D7            push a
0397   069B 11            mov a, b
0398   069C FD 2E 04 00   mov32 cb, $00000004
0398   06A0 00 00 
0399   06A2 B0            cmp a, b
0400   06A3 FD 73         slt ; < (signed)
0401   06A5 E4            pop a
0402   06A6             ; --- END RELATIONAL
0403   06A6 C0 00 00      cmp b, 0
0404   06A9 C6 08 07      je _for3_exit
0405   06AC             _for3_block:
0406   06AC             ; output[j++] = base64_table[output_buffer[i]]; 
0407   06AC FA 07 00      lea d, [bp + 7] ; $output
0408   06AF FD 2A         mov d, [d]
0409   06B1 D7            push a
0410   06B2 DA            push d
0411   06B3 FA FD FF      lea d, [bp + -3] ; $j
0412   06B6 2A            mov b, [d]
0413   06B7 38 00 00      mov c, 0
0414   06BA 11            mov a, b
0415   06BB FD 77         inc b
0416   06BD FA FD FF      lea d, [bp + -3] ; $j
0417   06C0 FD 43         mov [d], b
0418   06C2 27            mov b, a
0419   06C3 E7            pop d
0420   06C4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0421   06C8 E4            pop a
0422   06C9 DA            push d
0423   06CA 3B 8D 1A      mov d, _base64_table ; $base64_table
0424   06CD FD 2A         mov d, [d]
0425   06CF D7            push a
0426   06D0 DA            push d
0427   06D1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0428   06D4 D7            push a
0429   06D5 DA            push d
0430   06D6 FA FF FF      lea d, [bp + -1] ; $i
0431   06D9 2A            mov b, [d]
0432   06DA 38 00 00      mov c, 0
0433   06DD E7            pop d
0434   06DE 5A            add d, b
0435   06DF E4            pop a
0436   06E0 32            mov bl, [d]
0437   06E1 A7 00         mov bh, 0
0438   06E3 38 00 00      mov c, 0
0439   06E6 E7            pop d
0440   06E7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0441   06EB E4            pop a
0442   06EC 32            mov bl, [d]
0443   06ED A7 00         mov bh, 0
0444   06EF 38 00 00      mov c, 0
0445   06F2 E7            pop d
0446   06F3 FD 3E         mov [d], bl
0447   06F5             _for3_update:
0448   06F5 FA FF FF      lea d, [bp + -1] ; $i
0449   06F8 2A            mov b, [d]
0450   06F9 38 00 00      mov c, 0
0451   06FC 11            mov a, b
0452   06FD FD 77         inc b
0453   06FF FA FF FF      lea d, [bp + -1] ; $i
0454   0702 FD 43         mov [d], b
0455   0704 27            mov b, a
0456   0705 0A 93 06      jmp _for3_cond
0457   0708             _for3_exit:
0458   0708             ; i = 0; 
0459   0708 FA FF FF      lea d, [bp + -1] ; $i
0460   070B DA            push d
0461   070C FD 2E 00 00   mov32 cb, $00000000
0461   0710 00 00 
0462   0712 E7            pop d
0463   0713 FD 43         mov [d], b
0464   0715 0A 18 07      jmp _if2_exit
0465   0718             _if2_exit:
0466   0718 0A D9 04      jmp _while1_cond
0467   071B             _while1_exit:
0468   071B             ; if (i) { 
0469   071B             _if4_cond:
0470   071B FA FF FF      lea d, [bp + -1] ; $i
0471   071E 2A            mov b, [d]
0472   071F 38 00 00      mov c, 0
0473   0722 C0 00 00      cmp b, 0
0474   0725 C6 71 09      je _if4_exit
0475   0728             _if4_TRUE:
0476   0728             ; for (k = i; k < 3; k++) { 
0477   0728             _for5_init:
0478   0728 FA FB FF      lea d, [bp + -5] ; $k
0479   072B DA            push d
0480   072C FA FF FF      lea d, [bp + -1] ; $i
0481   072F 2A            mov b, [d]
0482   0730 38 00 00      mov c, 0
0483   0733 E7            pop d
0484   0734 FD 43         mov [d], b
0485   0736             _for5_cond:
0486   0736 FA FB FF      lea d, [bp + -5] ; $k
0487   0739 2A            mov b, [d]
0488   073A 38 00 00      mov c, 0
0489   073D             ; --- START RELATIONAL
0490   073D D7            push a
0491   073E 11            mov a, b
0492   073F FD 2E 03 00   mov32 cb, $00000003
0492   0743 00 00 
0493   0745 B0            cmp a, b
0494   0746 FD 73         slt ; < (signed)
0495   0748 E4            pop a
0496   0749             ; --- END RELATIONAL
0497   0749 C0 00 00      cmp b, 0
0498   074C C6 7B 07      je _for5_exit
0499   074F             _for5_block:
0500   074F             ; input_buffer[k] = '\0'; 
0501   074F FA F6 FF      lea d, [bp + -10] ; $input_buffer
0502   0752 D7            push a
0503   0753 DA            push d
0504   0754 FA FB FF      lea d, [bp + -5] ; $k
0505   0757 2A            mov b, [d]
0506   0758 38 00 00      mov c, 0
0507   075B E7            pop d
0508   075C 5A            add d, b
0509   075D E4            pop a
0510   075E DA            push d
0511   075F FD 2E 00 00   mov32 cb, $00000000
0511   0763 00 00 
0512   0765 E7            pop d
0513   0766 FD 3E         mov [d], bl
0514   0768             _for5_update:
0515   0768 FA FB FF      lea d, [bp + -5] ; $k
0516   076B 2A            mov b, [d]
0517   076C 38 00 00      mov c, 0
0518   076F 11            mov a, b
0519   0770 FD 77         inc b
0520   0772 FA FB FF      lea d, [bp + -5] ; $k
0521   0775 FD 43         mov [d], b
0522   0777 27            mov b, a
0523   0778 0A 36 07      jmp _for5_cond
0524   077B             _for5_exit:
0525   077B             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0526   077B FA F2 FF      lea d, [bp + -14] ; $output_buffer
0527   077E D7            push a
0528   077F DA            push d
0529   0780 FD 2E 00 00   mov32 cb, $00000000
0529   0784 00 00 
0530   0786 E7            pop d
0531   0787 5A            add d, b
0532   0788 E4            pop a
0533   0789 DA            push d
0534   078A FA F6 FF      lea d, [bp + -10] ; $input_buffer
0535   078D D7            push a
0536   078E DA            push d
0537   078F FD 2E 00 00   mov32 cb, $00000000
0537   0793 00 00 
0538   0795 E7            pop d
0539   0796 5A            add d, b
0540   0797 E4            pop a
0541   0798 32            mov bl, [d]
0542   0799 A7 00         mov bh, 0
0543   079B 38 00 00      mov c, 0
0544   079E D7            push a
0545   079F 11            mov a, b
0546   07A0 FD 2E FC 00   mov32 cb, $000000fc
0546   07A4 00 00 
0547   07A6 FD 92         and b, a ; &
0548   07A8 E4            pop a
0549   07A9             ; --- START SHIFT
0550   07A9 D7            push a
0551   07AA 11            mov a, b
0552   07AB FD 2E 02 00   mov32 cb, $00000002
0552   07AF 00 00 
0553   07B1 FD 39         mov c, b
0554   07B3 A5            ashr a, cl
0555   07B4 27            mov b, a
0556   07B5 E4            pop a
0557   07B6             ; --- END SHIFT
0558   07B6 E7            pop d
0559   07B7 FD 3E         mov [d], bl
0560   07B9             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0561   07B9 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0562   07BC D7            push a
0563   07BD DA            push d
0564   07BE FD 2E 01 00   mov32 cb, $00000001
0564   07C2 00 00 
0565   07C4 E7            pop d
0566   07C5 5A            add d, b
0567   07C6 E4            pop a
0568   07C7 DA            push d
0569   07C8 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0570   07CB D7            push a
0571   07CC DA            push d
0572   07CD FD 2E 00 00   mov32 cb, $00000000
0572   07D1 00 00 
0573   07D3 E7            pop d
0574   07D4 5A            add d, b
0575   07D5 E4            pop a
0576   07D6 32            mov bl, [d]
0577   07D7 A7 00         mov bh, 0
0578   07D9 38 00 00      mov c, 0
0579   07DC D7            push a
0580   07DD 11            mov a, b
0581   07DE FD 2E 03 00   mov32 cb, $00000003
0581   07E2 00 00 
0582   07E4 FD 92         and b, a ; &
0583   07E6 E4            pop a
0584   07E7             ; --- START SHIFT
0585   07E7 D7            push a
0586   07E8 11            mov a, b
0587   07E9 FD 2E 04 00   mov32 cb, $00000004
0587   07ED 00 00 
0588   07EF FD 39         mov c, b
0589   07F1 9D            shl a, cl
0590   07F2 27            mov b, a
0591   07F3 E4            pop a
0592   07F4             ; --- END SHIFT
0593   07F4             ; --- START TERMS
0594   07F4 D7            push a
0595   07F5 11            mov a, b
0596   07F6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0597   07F9 D7            push a
0598   07FA DA            push d
0599   07FB FD 2E 01 00   mov32 cb, $00000001
0599   07FF 00 00 
0600   0801 E7            pop d
0601   0802 5A            add d, b
0602   0803 E4            pop a
0603   0804 32            mov bl, [d]
0604   0805 A7 00         mov bh, 0
0605   0807 38 00 00      mov c, 0
0606   080A D7            push a
0607   080B 11            mov a, b
0608   080C FD 2E F0 00   mov32 cb, $000000f0
0608   0810 00 00 
0609   0812 FD 92         and b, a ; &
0610   0814 E4            pop a
0611   0815             ; --- START SHIFT
0612   0815 D7            push a
0613   0816 11            mov a, b
0614   0817 FD 2E 04 00   mov32 cb, $00000004
0614   081B 00 00 
0615   081D FD 39         mov c, b
0616   081F A5            ashr a, cl
0617   0820 27            mov b, a
0618   0821 E4            pop a
0619   0822             ; --- END SHIFT
0620   0822 56            add b, a
0621   0823 E4            pop a
0622   0824             ; --- END TERMS
0623   0824 E7            pop d
0624   0825 FD 3E         mov [d], bl
0625   0827             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0626   0827 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0627   082A D7            push a
0628   082B DA            push d
0629   082C FD 2E 02 00   mov32 cb, $00000002
0629   0830 00 00 
0630   0832 E7            pop d
0631   0833 5A            add d, b
0632   0834 E4            pop a
0633   0835 DA            push d
0634   0836 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0635   0839 D7            push a
0636   083A DA            push d
0637   083B FD 2E 01 00   mov32 cb, $00000001
0637   083F 00 00 
0638   0841 E7            pop d
0639   0842 5A            add d, b
0640   0843 E4            pop a
0641   0844 32            mov bl, [d]
0642   0845 A7 00         mov bh, 0
0643   0847 38 00 00      mov c, 0
0644   084A D7            push a
0645   084B 11            mov a, b
0646   084C FD 2E 0F 00   mov32 cb, $0000000f
0646   0850 00 00 
0647   0852 FD 92         and b, a ; &
0648   0854 E4            pop a
0649   0855             ; --- START SHIFT
0650   0855 D7            push a
0651   0856 11            mov a, b
0652   0857 FD 2E 02 00   mov32 cb, $00000002
0652   085B 00 00 
0653   085D FD 39         mov c, b
0654   085F 9D            shl a, cl
0655   0860 27            mov b, a
0656   0861 E4            pop a
0657   0862             ; --- END SHIFT
0658   0862             ; --- START TERMS
0659   0862 D7            push a
0660   0863 11            mov a, b
0661   0864 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0662   0867 D7            push a
0663   0868 DA            push d
0664   0869 FD 2E 02 00   mov32 cb, $00000002
0664   086D 00 00 
0665   086F E7            pop d
0666   0870 5A            add d, b
0667   0871 E4            pop a
0668   0872 32            mov bl, [d]
0669   0873 A7 00         mov bh, 0
0670   0875 38 00 00      mov c, 0
0671   0878 D7            push a
0672   0879 11            mov a, b
0673   087A FD 2E C0 00   mov32 cb, $000000c0
0673   087E 00 00 
0674   0880 FD 92         and b, a ; &
0675   0882 E4            pop a
0676   0883             ; --- START SHIFT
0677   0883 D7            push a
0678   0884 11            mov a, b
0679   0885 FD 2E 06 00   mov32 cb, $00000006
0679   0889 00 00 
0680   088B FD 39         mov c, b
0681   088D A5            ashr a, cl
0682   088E 27            mov b, a
0683   088F E4            pop a
0684   0890             ; --- END SHIFT
0685   0890 56            add b, a
0686   0891 E4            pop a
0687   0892             ; --- END TERMS
0688   0892 E7            pop d
0689   0893 FD 3E         mov [d], bl
0690   0895             ; for (k = 0; k < i + 1; k++) { 
0691   0895             _for6_init:
0692   0895 FA FB FF      lea d, [bp + -5] ; $k
0693   0898 DA            push d
0694   0899 FD 2E 00 00   mov32 cb, $00000000
0694   089D 00 00 
0695   089F E7            pop d
0696   08A0 FD 43         mov [d], b
0697   08A2             _for6_cond:
0698   08A2 FA FB FF      lea d, [bp + -5] ; $k
0699   08A5 2A            mov b, [d]
0700   08A6 38 00 00      mov c, 0
0701   08A9             ; --- START RELATIONAL
0702   08A9 D7            push a
0703   08AA 11            mov a, b
0704   08AB FA FF FF      lea d, [bp + -1] ; $i
0705   08AE 2A            mov b, [d]
0706   08AF 38 00 00      mov c, 0
0707   08B2             ; --- START TERMS
0708   08B2 D7            push a
0709   08B3 11            mov a, b
0710   08B4 FD 2E 01 00   mov32 cb, $00000001
0710   08B8 00 00 
0711   08BA 56            add b, a
0712   08BB E4            pop a
0713   08BC             ; --- END TERMS
0714   08BC B0            cmp a, b
0715   08BD FD 73         slt ; < (signed)
0716   08BF E4            pop a
0717   08C0             ; --- END RELATIONAL
0718   08C0 C0 00 00      cmp b, 0
0719   08C3 C6 22 09      je _for6_exit
0720   08C6             _for6_block:
0721   08C6             ; output[j++] = base64_table[output_buffer[k]]; 
0722   08C6 FA 07 00      lea d, [bp + 7] ; $output
0723   08C9 FD 2A         mov d, [d]
0724   08CB D7            push a
0725   08CC DA            push d
0726   08CD FA FD FF      lea d, [bp + -3] ; $j
0727   08D0 2A            mov b, [d]
0728   08D1 38 00 00      mov c, 0
0729   08D4 11            mov a, b
0730   08D5 FD 77         inc b
0731   08D7 FA FD FF      lea d, [bp + -3] ; $j
0732   08DA FD 43         mov [d], b
0733   08DC 27            mov b, a
0734   08DD E7            pop d
0735   08DE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0736   08E2 E4            pop a
0737   08E3 DA            push d
0738   08E4 3B 8D 1A      mov d, _base64_table ; $base64_table
0739   08E7 FD 2A         mov d, [d]
0740   08E9 D7            push a
0741   08EA DA            push d
0742   08EB FA F2 FF      lea d, [bp + -14] ; $output_buffer
0743   08EE D7            push a
0744   08EF DA            push d
0745   08F0 FA FB FF      lea d, [bp + -5] ; $k
0746   08F3 2A            mov b, [d]
0747   08F4 38 00 00      mov c, 0
0748   08F7 E7            pop d
0749   08F8 5A            add d, b
0750   08F9 E4            pop a
0751   08FA 32            mov bl, [d]
0752   08FB A7 00         mov bh, 0
0753   08FD 38 00 00      mov c, 0
0754   0900 E7            pop d
0755   0901 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0756   0905 E4            pop a
0757   0906 32            mov bl, [d]
0758   0907 A7 00         mov bh, 0
0759   0909 38 00 00      mov c, 0
0760   090C E7            pop d
0761   090D FD 3E         mov [d], bl
0762   090F             _for6_update:
0763   090F FA FB FF      lea d, [bp + -5] ; $k
0764   0912 2A            mov b, [d]
0765   0913 38 00 00      mov c, 0
0766   0916 11            mov a, b
0767   0917 FD 77         inc b
0768   0919 FA FB FF      lea d, [bp + -5] ; $k
0769   091C FD 43         mov [d], b
0770   091E 27            mov b, a
0771   091F 0A A2 08      jmp _for6_cond
0772   0922             _for6_exit:
0773   0922             ; while (i++ < 3) { 
0774   0922             _while7_cond:
0775   0922 FA FF FF      lea d, [bp + -1] ; $i
0776   0925 2A            mov b, [d]
0777   0926 38 00 00      mov c, 0
0778   0929 11            mov a, b
0779   092A FD 77         inc b
0780   092C FA FF FF      lea d, [bp + -1] ; $i
0781   092F FD 43         mov [d], b
0782   0931 27            mov b, a
0783   0932             ; --- START RELATIONAL
0784   0932 D7            push a
0785   0933 11            mov a, b
0786   0934 FD 2E 03 00   mov32 cb, $00000003
0786   0938 00 00 
0787   093A B0            cmp a, b
0788   093B FD 73         slt ; < (signed)
0789   093D E4            pop a
0790   093E             ; --- END RELATIONAL
0791   093E C0 00 00      cmp b, 0
0792   0941 C6 6E 09      je _while7_exit
0793   0944             _while7_block:
0794   0944             ; output[j++] = '='; 
0795   0944 FA 07 00      lea d, [bp + 7] ; $output
0796   0947 FD 2A         mov d, [d]
0797   0949 D7            push a
0798   094A DA            push d
0799   094B FA FD FF      lea d, [bp + -3] ; $j
0800   094E 2A            mov b, [d]
0801   094F 38 00 00      mov c, 0
0802   0952 11            mov a, b
0803   0953 FD 77         inc b
0804   0955 FA FD FF      lea d, [bp + -3] ; $j
0805   0958 FD 43         mov [d], b
0806   095A 27            mov b, a
0807   095B E7            pop d
0808   095C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0809   0960 E4            pop a
0810   0961 DA            push d
0811   0962 FD 2E 3D 00   mov32 cb, $0000003d
0811   0966 00 00 
0812   0968 E7            pop d
0813   0969 FD 3E         mov [d], bl
0814   096B 0A 22 09      jmp _while7_cond
0815   096E             _while7_exit:
0816   096E 0A 71 09      jmp _if4_exit
0817   0971             _if4_exit:
0818   0971             ; output[j] = '\0'; 
0819   0971 FA 07 00      lea d, [bp + 7] ; $output
0820   0974 FD 2A         mov d, [d]
0821   0976 D7            push a
0822   0977 DA            push d
0823   0978 FA FD FF      lea d, [bp + -3] ; $j
0824   097B 2A            mov b, [d]
0825   097C 38 00 00      mov c, 0
0826   097F E7            pop d
0827   0980 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0828   0984 E4            pop a
0829   0985 DA            push d
0830   0986 FD 2E 00 00   mov32 cb, $00000000
0830   098A 00 00 
0831   098C E7            pop d
0832   098D FD 3E         mov [d], bl
0833   098F F9            leave
0834   0990 09            ret
0835   0991             
0836   0991             base64_char_value:
0837   0991 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0838   0994             ; if (c >= 'A' && c <= 'Z') return c - 'A'; 
0839   0994             _if8_cond:
0840   0994 FA 05 00      lea d, [bp + 5] ; $c
0841   0997 32            mov bl, [d]
0842   0998 A7 00         mov bh, 0
0843   099A 38 00 00      mov c, 0
0844   099D             ; --- START RELATIONAL
0845   099D D7            push a
0846   099E 11            mov a, b
0847   099F FD 2E 41 00   mov32 cb, $00000041
0847   09A3 00 00 
0848   09A5 B0            cmp a, b
0849   09A6 FD 80         sge ; >=
0850   09A8 E4            pop a
0851   09A9             ; --- END RELATIONAL
0852   09A9             ; --- START LOGICAL AND
0853   09A9 D7            push a
0854   09AA 11            mov a, b
0855   09AB FA 05 00      lea d, [bp + 5] ; $c
0856   09AE 32            mov bl, [d]
0857   09AF A7 00         mov bh, 0
0858   09B1 38 00 00      mov c, 0
0859   09B4             ; --- START RELATIONAL
0860   09B4 D7            push a
0861   09B5 11            mov a, b
0862   09B6 FD 2E 5A 00   mov32 cb, $0000005a
0862   09BA 00 00 
0863   09BC B0            cmp a, b
0864   09BD FD 74         sle ; <= (signed)
0865   09BF E4            pop a
0866   09C0             ; --- END RELATIONAL
0867   09C0 FD A7         sand a, b
0868   09C2 E4            pop a
0869   09C3             ; --- END LOGICAL AND
0870   09C3 C0 00 00      cmp b, 0
0871   09C6 C6 E2 09      je _if8_exit
0872   09C9             _if8_TRUE:
0873   09C9             ; return c - 'A'; 
0874   09C9 FA 05 00      lea d, [bp + 5] ; $c
0875   09CC 32            mov bl, [d]
0876   09CD A7 00         mov bh, 0
0877   09CF 38 00 00      mov c, 0
0878   09D2             ; --- START TERMS
0879   09D2 D7            push a
0880   09D3 11            mov a, b
0881   09D4 FD 2E 41 00   mov32 cb, $00000041
0881   09D8 00 00 
0882   09DA 60            sub a, b
0883   09DB 27            mov b, a
0884   09DC E4            pop a
0885   09DD             ; --- END TERMS
0886   09DD F9            leave
0887   09DE 09            ret
0888   09DF 0A E2 09      jmp _if8_exit
0889   09E2             _if8_exit:
0890   09E2             ; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
0891   09E2             _if9_cond:
0892   09E2 FA 05 00      lea d, [bp + 5] ; $c
0893   09E5 32            mov bl, [d]
0894   09E6 A7 00         mov bh, 0
0895   09E8 38 00 00      mov c, 0
0896   09EB             ; --- START RELATIONAL
0897   09EB D7            push a
0898   09EC 11            mov a, b
0899   09ED FD 2E 61 00   mov32 cb, $00000061
0899   09F1 00 00 
0900   09F3 B0            cmp a, b
0901   09F4 FD 80         sge ; >=
0902   09F6 E4            pop a
0903   09F7             ; --- END RELATIONAL
0904   09F7             ; --- START LOGICAL AND
0905   09F7 D7            push a
0906   09F8 11            mov a, b
0907   09F9 FA 05 00      lea d, [bp + 5] ; $c
0908   09FC 32            mov bl, [d]
0909   09FD A7 00         mov bh, 0
0910   09FF 38 00 00      mov c, 0
0911   0A02             ; --- START RELATIONAL
0912   0A02 D7            push a
0913   0A03 11            mov a, b
0914   0A04 FD 2E 7A 00   mov32 cb, $0000007a
0914   0A08 00 00 
0915   0A0A B0            cmp a, b
0916   0A0B FD 74         sle ; <= (signed)
0917   0A0D E4            pop a
0918   0A0E             ; --- END RELATIONAL
0919   0A0E FD A7         sand a, b
0920   0A10 E4            pop a
0921   0A11             ; --- END LOGICAL AND
0922   0A11 C0 00 00      cmp b, 0
0923   0A14 C6 38 0A      je _if9_exit
0924   0A17             _if9_TRUE:
0925   0A17             ; return c - 'a' + 26; 
0926   0A17 FA 05 00      lea d, [bp + 5] ; $c
0927   0A1A 32            mov bl, [d]
0928   0A1B A7 00         mov bh, 0
0929   0A1D 38 00 00      mov c, 0
0930   0A20             ; --- START TERMS
0931   0A20 D7            push a
0932   0A21 11            mov a, b
0933   0A22 FD 2E 61 00   mov32 cb, $00000061
0933   0A26 00 00 
0934   0A28 60            sub a, b
0935   0A29 27            mov b, a
0936   0A2A 11            mov a, b
0937   0A2B FD 2E 1A 00   mov32 cb, $0000001a
0937   0A2F 00 00 
0938   0A31 56            add b, a
0939   0A32 E4            pop a
0940   0A33             ; --- END TERMS
0941   0A33 F9            leave
0942   0A34 09            ret
0943   0A35 0A 38 0A      jmp _if9_exit
0944   0A38             _if9_exit:
0945   0A38             ; if (c >= '0' && c <= '9') return c - '0' + 52; 
0946   0A38             _if10_cond:
0947   0A38 FA 05 00      lea d, [bp + 5] ; $c
0948   0A3B 32            mov bl, [d]
0949   0A3C A7 00         mov bh, 0
0950   0A3E 38 00 00      mov c, 0
0951   0A41             ; --- START RELATIONAL
0952   0A41 D7            push a
0953   0A42 11            mov a, b
0954   0A43 FD 2E 30 00   mov32 cb, $00000030
0954   0A47 00 00 
0955   0A49 B0            cmp a, b
0956   0A4A FD 80         sge ; >=
0957   0A4C E4            pop a
0958   0A4D             ; --- END RELATIONAL
0959   0A4D             ; --- START LOGICAL AND
0960   0A4D D7            push a
0961   0A4E 11            mov a, b
0962   0A4F FA 05 00      lea d, [bp + 5] ; $c
0963   0A52 32            mov bl, [d]
0964   0A53 A7 00         mov bh, 0
0965   0A55 38 00 00      mov c, 0
0966   0A58             ; --- START RELATIONAL
0967   0A58 D7            push a
0968   0A59 11            mov a, b
0969   0A5A FD 2E 39 00   mov32 cb, $00000039
0969   0A5E 00 00 
0970   0A60 B0            cmp a, b
0971   0A61 FD 74         sle ; <= (signed)
0972   0A63 E4            pop a
0973   0A64             ; --- END RELATIONAL
0974   0A64 FD A7         sand a, b
0975   0A66 E4            pop a
0976   0A67             ; --- END LOGICAL AND
0977   0A67 C0 00 00      cmp b, 0
0978   0A6A C6 8E 0A      je _if10_exit
0979   0A6D             _if10_TRUE:
0980   0A6D             ; return c - '0' + 52; 
0981   0A6D FA 05 00      lea d, [bp + 5] ; $c
0982   0A70 32            mov bl, [d]
0983   0A71 A7 00         mov bh, 0
0984   0A73 38 00 00      mov c, 0
0985   0A76             ; --- START TERMS
0986   0A76 D7            push a
0987   0A77 11            mov a, b
0988   0A78 FD 2E 30 00   mov32 cb, $00000030
0988   0A7C 00 00 
0989   0A7E 60            sub a, b
0990   0A7F 27            mov b, a
0991   0A80 11            mov a, b
0992   0A81 FD 2E 34 00   mov32 cb, $00000034
0992   0A85 00 00 
0993   0A87 56            add b, a
0994   0A88 E4            pop a
0995   0A89             ; --- END TERMS
0996   0A89 F9            leave
0997   0A8A 09            ret
0998   0A8B 0A 8E 0A      jmp _if10_exit
0999   0A8E             _if10_exit:
1000   0A8E             ; if (c == '+') return 62; 
1001   0A8E             _if11_cond:
1002   0A8E FA 05 00      lea d, [bp + 5] ; $c
1003   0A91 32            mov bl, [d]
1004   0A92 A7 00         mov bh, 0
1005   0A94 38 00 00      mov c, 0
1006   0A97             ; --- START RELATIONAL
1007   0A97 D7            push a
1008   0A98 11            mov a, b
1009   0A99 FD 2E 2B 00   mov32 cb, $0000002b
1009   0A9D 00 00 
1010   0A9F B0            cmp a, b
1011   0AA0 FD 71         seq ; ==
1012   0AA2 E4            pop a
1013   0AA3             ; --- END RELATIONAL
1014   0AA3 C0 00 00      cmp b, 0
1015   0AA6 C6 B4 0A      je _if11_exit
1016   0AA9             _if11_TRUE:
1017   0AA9             ; return 62; 
1018   0AA9 FD 2E 3E 00   mov32 cb, $0000003e
1018   0AAD 00 00 
1019   0AAF F9            leave
1020   0AB0 09            ret
1021   0AB1 0A B4 0A      jmp _if11_exit
1022   0AB4             _if11_exit:
1023   0AB4             ; if (c == '/') return 63; 
1024   0AB4             _if12_cond:
1025   0AB4 FA 05 00      lea d, [bp + 5] ; $c
1026   0AB7 32            mov bl, [d]
1027   0AB8 A7 00         mov bh, 0
1028   0ABA 38 00 00      mov c, 0
1029   0ABD             ; --- START RELATIONAL
1030   0ABD D7            push a
1031   0ABE 11            mov a, b
1032   0ABF FD 2E 2F 00   mov32 cb, $0000002f
1032   0AC3 00 00 
1033   0AC5 B0            cmp a, b
1034   0AC6 FD 71         seq ; ==
1035   0AC8 E4            pop a
1036   0AC9             ; --- END RELATIONAL
1037   0AC9 C0 00 00      cmp b, 0
1038   0ACC C6 DA 0A      je _if12_exit
1039   0ACF             _if12_TRUE:
1040   0ACF             ; return 63; 
1041   0ACF FD 2E 3F 00   mov32 cb, $0000003f
1041   0AD3 00 00 
1042   0AD5 F9            leave
1043   0AD6 09            ret
1044   0AD7 0A DA 0A      jmp _if12_exit
1045   0ADA             _if12_exit:
1046   0ADA             ; return -1; 
1047   0ADA FD 2E FF FF   mov32 cb, $ffffffff
1047   0ADE FF FF 
1048   0AE0 F9            leave
1049   0AE1 09            ret
1050   0AE2             
1051   0AE2             base64_decode:
1052   0AE2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1053   0AE5             ; int i = 0, j = 0, k = 0; 
1054   0AE5 52 02 00      sub sp, 2
1055   0AE8             ; --- START LOCAL VAR INITIALIZATION
1056   0AE8 FA FF FF      lea d, [bp + -1] ; $i
1057   0AEB DA            push d
1058   0AEC FD 2E 00 00   mov32 cb, $00000000
1058   0AF0 00 00 
1059   0AF2 E7            pop d
1060   0AF3 FD 43         mov [d], b
1061   0AF5             ; --- END LOCAL VAR INITIALIZATION
1062   0AF5 52 02 00      sub sp, 2
1063   0AF8             ; --- START LOCAL VAR INITIALIZATION
1064   0AF8 FA FD FF      lea d, [bp + -3] ; $j
1065   0AFB DA            push d
1066   0AFC FD 2E 00 00   mov32 cb, $00000000
1066   0B00 00 00 
1067   0B02 E7            pop d
1068   0B03 FD 43         mov [d], b
1069   0B05             ; --- END LOCAL VAR INITIALIZATION
1070   0B05 52 02 00      sub sp, 2
1071   0B08             ; --- START LOCAL VAR INITIALIZATION
1072   0B08 FA FB FF      lea d, [bp + -5] ; $k
1073   0B0B DA            push d
1074   0B0C FD 2E 00 00   mov32 cb, $00000000
1074   0B10 00 00 
1075   0B12 E7            pop d
1076   0B13 FD 43         mov [d], b
1077   0B15             ; --- END LOCAL VAR INITIALIZATION
1078   0B15             ; int input_len; 
1079   0B15 52 02 00      sub sp, 2
1080   0B18             ; unsigned char input_buffer[4]; 
1081   0B18 52 04 00      sub sp, 4
1082   0B1B             ; unsigned char output_buffer[3]; 
1083   0B1B 52 03 00      sub sp, 3
1084   0B1E             ; input_len = strlen(input); 
1085   0B1E FA F9 FF      lea d, [bp + -7] ; $input_len
1086   0B21 DA            push d
1087   0B22             ; --- START FUNCTION CALL
1088   0B22 FA 05 00      lea d, [bp + 5] ; $input
1089   0B25 2A            mov b, [d]
1090   0B26 38 00 00      mov c, 0
1091   0B29 FD AB         swp b
1092   0B2B D8            push b
1093   0B2C 07 F1 19      call strlen
1094   0B2F 51 02 00      add sp, 2
1095   0B32             ; --- END FUNCTION CALL
1096   0B32 E7            pop d
1097   0B33 FD 43         mov [d], b
1098   0B35             ; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1099   0B35             _while13_cond:
1100   0B35 FA F9 FF      lea d, [bp + -7] ; $input_len
1101   0B38 2A            mov b, [d]
1102   0B39 38 00 00      mov c, 0
1103   0B3C 11            mov a, b
1104   0B3D FD 7D         dec b
1105   0B3F FA F9 FF      lea d, [bp + -7] ; $input_len
1106   0B42 FD 43         mov [d], b
1107   0B44 27            mov b, a
1108   0B45             ; --- START LOGICAL AND
1109   0B45 D7            push a
1110   0B46 11            mov a, b
1111   0B47 FA 05 00      lea d, [bp + 5] ; $input
1112   0B4A FD 2A         mov d, [d]
1113   0B4C D7            push a
1114   0B4D DA            push d
1115   0B4E FA FB FF      lea d, [bp + -5] ; $k
1116   0B51 2A            mov b, [d]
1117   0B52 38 00 00      mov c, 0
1118   0B55 E7            pop d
1119   0B56 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1120   0B5A E4            pop a
1121   0B5B 32            mov bl, [d]
1122   0B5C A7 00         mov bh, 0
1123   0B5E 38 00 00      mov c, 0
1124   0B61             ; --- START RELATIONAL
1125   0B61 D7            push a
1126   0B62 11            mov a, b
1127   0B63 FD 2E 3D 00   mov32 cb, $0000003d
1127   0B67 00 00 
1128   0B69 B0            cmp a, b
1129   0B6A FD 72         sneq ; !=
1130   0B6C E4            pop a
1131   0B6D             ; --- END RELATIONAL
1132   0B6D FD A7         sand a, b
1133   0B6F 11            mov a, b
1134   0B70             ; --- START FUNCTION CALL
1135   0B70 FA 05 00      lea d, [bp + 5] ; $input
1136   0B73 FD 2A         mov d, [d]
1137   0B75 D7            push a
1138   0B76 DA            push d
1139   0B77 FA FB FF      lea d, [bp + -5] ; $k
1140   0B7A 2A            mov b, [d]
1141   0B7B 38 00 00      mov c, 0
1142   0B7E E7            pop d
1143   0B7F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1144   0B83 E4            pop a
1145   0B84 32            mov bl, [d]
1146   0B85 A7 00         mov bh, 0
1147   0B87 38 00 00      mov c, 0
1148   0B8A DD            push bl
1149   0B8B 07 91 09      call base64_char_value
1150   0B8E 51 01 00      add sp, 1
1151   0B91             ; --- END FUNCTION CALL
1152   0B91             ; --- START RELATIONAL
1153   0B91 D7            push a
1154   0B92 11            mov a, b
1155   0B93 FD 2E FF FF   mov32 cb, $ffffffff
1155   0B97 FF FF 
1156   0B99 B0            cmp a, b
1157   0B9A FD 72         sneq ; !=
1158   0B9C E4            pop a
1159   0B9D             ; --- END RELATIONAL
1160   0B9D FD A7         sand a, b
1161   0B9F E4            pop a
1162   0BA0             ; --- END LOGICAL AND
1163   0BA0 C0 00 00      cmp b, 0
1164   0BA3 C6 0F 0E      je _while13_exit
1165   0BA6             _while13_block:
1166   0BA6             ; input_buffer[i++] = input[k++]; 
1167   0BA6 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1168   0BA9 D7            push a
1169   0BAA DA            push d
1170   0BAB FA FF FF      lea d, [bp + -1] ; $i
1171   0BAE 2A            mov b, [d]
1172   0BAF 38 00 00      mov c, 0
1173   0BB2 11            mov a, b
1174   0BB3 FD 77         inc b
1175   0BB5 FA FF FF      lea d, [bp + -1] ; $i
1176   0BB8 FD 43         mov [d], b
1177   0BBA 27            mov b, a
1178   0BBB E7            pop d
1179   0BBC 5A            add d, b
1180   0BBD E4            pop a
1181   0BBE DA            push d
1182   0BBF FA 05 00      lea d, [bp + 5] ; $input
1183   0BC2 FD 2A         mov d, [d]
1184   0BC4 D7            push a
1185   0BC5 DA            push d
1186   0BC6 FA FB FF      lea d, [bp + -5] ; $k
1187   0BC9 2A            mov b, [d]
1188   0BCA 38 00 00      mov c, 0
1189   0BCD 11            mov a, b
1190   0BCE FD 77         inc b
1191   0BD0 FA FB FF      lea d, [bp + -5] ; $k
1192   0BD3 FD 43         mov [d], b
1193   0BD5 27            mov b, a
1194   0BD6 E7            pop d
1195   0BD7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1196   0BDB E4            pop a
1197   0BDC 32            mov bl, [d]
1198   0BDD A7 00         mov bh, 0
1199   0BDF 38 00 00      mov c, 0
1200   0BE2 E7            pop d
1201   0BE3 FD 3E         mov [d], bl
1202   0BE5             ; if (i == 4) { 
1203   0BE5             _if14_cond:
1204   0BE5 FA FF FF      lea d, [bp + -1] ; $i
1205   0BE8 2A            mov b, [d]
1206   0BE9 38 00 00      mov c, 0
1207   0BEC             ; --- START RELATIONAL
1208   0BEC D7            push a
1209   0BED 11            mov a, b
1210   0BEE FD 2E 04 00   mov32 cb, $00000004
1210   0BF2 00 00 
1211   0BF4 B0            cmp a, b
1212   0BF5 FD 71         seq ; ==
1213   0BF7 E4            pop a
1214   0BF8             ; --- END RELATIONAL
1215   0BF8 C0 00 00      cmp b, 0
1216   0BFB C6 0C 0E      je _if14_exit
1217   0BFE             _if14_TRUE:
1218   0BFE             ; for (i = 0; i < 4; i++) { 
1219   0BFE             _for15_init:
1220   0BFE FA FF FF      lea d, [bp + -1] ; $i
1221   0C01 DA            push d
1222   0C02 FD 2E 00 00   mov32 cb, $00000000
1222   0C06 00 00 
1223   0C08 E7            pop d
1224   0C09 FD 43         mov [d], b
1225   0C0B             _for15_cond:
1226   0C0B FA FF FF      lea d, [bp + -1] ; $i
1227   0C0E 2A            mov b, [d]
1228   0C0F 38 00 00      mov c, 0
1229   0C12             ; --- START RELATIONAL
1230   0C12 D7            push a
1231   0C13 11            mov a, b
1232   0C14 FD 2E 04 00   mov32 cb, $00000004
1232   0C18 00 00 
1233   0C1A B0            cmp a, b
1234   0C1B FD 73         slt ; < (signed)
1235   0C1D E4            pop a
1236   0C1E             ; --- END RELATIONAL
1237   0C1E C0 00 00      cmp b, 0
1238   0C21 C6 66 0C      je _for15_exit
1239   0C24             _for15_block:
1240   0C24             ; input_buffer[i] = base64_char_value(input_buffer[i]); 
1241   0C24 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1242   0C27 D7            push a
1243   0C28 DA            push d
1244   0C29 FA FF FF      lea d, [bp + -1] ; $i
1245   0C2C 2A            mov b, [d]
1246   0C2D 38 00 00      mov c, 0
1247   0C30 E7            pop d
1248   0C31 5A            add d, b
1249   0C32 E4            pop a
1250   0C33 DA            push d
1251   0C34             ; --- START FUNCTION CALL
1252   0C34 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1253   0C37 D7            push a
1254   0C38 DA            push d
1255   0C39 FA FF FF      lea d, [bp + -1] ; $i
1256   0C3C 2A            mov b, [d]
1257   0C3D 38 00 00      mov c, 0
1258   0C40 E7            pop d
1259   0C41 5A            add d, b
1260   0C42 E4            pop a
1261   0C43 32            mov bl, [d]
1262   0C44 A7 00         mov bh, 0
1263   0C46 38 00 00      mov c, 0
1264   0C49 DD            push bl
1265   0C4A 07 91 09      call base64_char_value
1266   0C4D 51 01 00      add sp, 1
1267   0C50             ; --- END FUNCTION CALL
1268   0C50 E7            pop d
1269   0C51 FD 3E         mov [d], bl
1270   0C53             _for15_update:
1271   0C53 FA FF FF      lea d, [bp + -1] ; $i
1272   0C56 2A            mov b, [d]
1273   0C57 38 00 00      mov c, 0
1274   0C5A 11            mov a, b
1275   0C5B FD 77         inc b
1276   0C5D FA FF FF      lea d, [bp + -1] ; $i
1277   0C60 FD 43         mov [d], b
1278   0C62 27            mov b, a
1279   0C63 0A 0B 0C      jmp _for15_cond
1280   0C66             _for15_exit:
1281   0C66             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1282   0C66 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1283   0C69 D7            push a
1284   0C6A DA            push d
1285   0C6B FD 2E 00 00   mov32 cb, $00000000
1285   0C6F 00 00 
1286   0C71 E7            pop d
1287   0C72 5A            add d, b
1288   0C73 E4            pop a
1289   0C74 DA            push d
1290   0C75 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1291   0C78 D7            push a
1292   0C79 DA            push d
1293   0C7A FD 2E 00 00   mov32 cb, $00000000
1293   0C7E 00 00 
1294   0C80 E7            pop d
1295   0C81 5A            add d, b
1296   0C82 E4            pop a
1297   0C83 32            mov bl, [d]
1298   0C84 A7 00         mov bh, 0
1299   0C86 38 00 00      mov c, 0
1300   0C89             ; --- START SHIFT
1301   0C89 D7            push a
1302   0C8A 11            mov a, b
1303   0C8B FD 2E 02 00   mov32 cb, $00000002
1303   0C8F 00 00 
1304   0C91 FD 39         mov c, b
1305   0C93 9D            shl a, cl
1306   0C94 27            mov b, a
1307   0C95 E4            pop a
1308   0C96             ; --- END SHIFT
1309   0C96             ; --- START TERMS
1310   0C96 D7            push a
1311   0C97 11            mov a, b
1312   0C98 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1313   0C9B D7            push a
1314   0C9C DA            push d
1315   0C9D FD 2E 01 00   mov32 cb, $00000001
1315   0CA1 00 00 
1316   0CA3 E7            pop d
1317   0CA4 5A            add d, b
1318   0CA5 E4            pop a
1319   0CA6 32            mov bl, [d]
1320   0CA7 A7 00         mov bh, 0
1321   0CA9 38 00 00      mov c, 0
1322   0CAC D7            push a
1323   0CAD 11            mov a, b
1324   0CAE FD 2E 30 00   mov32 cb, $00000030
1324   0CB2 00 00 
1325   0CB4 FD 92         and b, a ; &
1326   0CB6 E4            pop a
1327   0CB7             ; --- START SHIFT
1328   0CB7 D7            push a
1329   0CB8 11            mov a, b
1330   0CB9 FD 2E 04 00   mov32 cb, $00000004
1330   0CBD 00 00 
1331   0CBF FD 39         mov c, b
1332   0CC1 A5            ashr a, cl
1333   0CC2 27            mov b, a
1334   0CC3 E4            pop a
1335   0CC4             ; --- END SHIFT
1336   0CC4 56            add b, a
1337   0CC5 E4            pop a
1338   0CC6             ; --- END TERMS
1339   0CC6 E7            pop d
1340   0CC7 FD 3E         mov [d], bl
1341   0CC9             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1342   0CC9 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1343   0CCC D7            push a
1344   0CCD DA            push d
1345   0CCE FD 2E 01 00   mov32 cb, $00000001
1345   0CD2 00 00 
1346   0CD4 E7            pop d
1347   0CD5 5A            add d, b
1348   0CD6 E4            pop a
1349   0CD7 DA            push d
1350   0CD8 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1351   0CDB D7            push a
1352   0CDC DA            push d
1353   0CDD FD 2E 01 00   mov32 cb, $00000001
1353   0CE1 00 00 
1354   0CE3 E7            pop d
1355   0CE4 5A            add d, b
1356   0CE5 E4            pop a
1357   0CE6 32            mov bl, [d]
1358   0CE7 A7 00         mov bh, 0
1359   0CE9 38 00 00      mov c, 0
1360   0CEC D7            push a
1361   0CED 11            mov a, b
1362   0CEE FD 2E 0F 00   mov32 cb, $0000000f
1362   0CF2 00 00 
1363   0CF4 FD 92         and b, a ; &
1364   0CF6 E4            pop a
1365   0CF7             ; --- START SHIFT
1366   0CF7 D7            push a
1367   0CF8 11            mov a, b
1368   0CF9 FD 2E 04 00   mov32 cb, $00000004
1368   0CFD 00 00 
1369   0CFF FD 39         mov c, b
1370   0D01 9D            shl a, cl
1371   0D02 27            mov b, a
1372   0D03 E4            pop a
1373   0D04             ; --- END SHIFT
1374   0D04             ; --- START TERMS
1375   0D04 D7            push a
1376   0D05 11            mov a, b
1377   0D06 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1378   0D09 D7            push a
1379   0D0A DA            push d
1380   0D0B FD 2E 02 00   mov32 cb, $00000002
1380   0D0F 00 00 
1381   0D11 E7            pop d
1382   0D12 5A            add d, b
1383   0D13 E4            pop a
1384   0D14 32            mov bl, [d]
1385   0D15 A7 00         mov bh, 0
1386   0D17 38 00 00      mov c, 0
1387   0D1A D7            push a
1388   0D1B 11            mov a, b
1389   0D1C FD 2E 3C 00   mov32 cb, $0000003c
1389   0D20 00 00 
1390   0D22 FD 92         and b, a ; &
1391   0D24 E4            pop a
1392   0D25             ; --- START SHIFT
1393   0D25 D7            push a
1394   0D26 11            mov a, b
1395   0D27 FD 2E 02 00   mov32 cb, $00000002
1395   0D2B 00 00 
1396   0D2D FD 39         mov c, b
1397   0D2F A5            ashr a, cl
1398   0D30 27            mov b, a
1399   0D31 E4            pop a
1400   0D32             ; --- END SHIFT
1401   0D32 56            add b, a
1402   0D33 E4            pop a
1403   0D34             ; --- END TERMS
1404   0D34 E7            pop d
1405   0D35 FD 3E         mov [d], bl
1406   0D37             ; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
1407   0D37 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1408   0D3A D7            push a
1409   0D3B DA            push d
1410   0D3C FD 2E 02 00   mov32 cb, $00000002
1410   0D40 00 00 
1411   0D42 E7            pop d
1412   0D43 5A            add d, b
1413   0D44 E4            pop a
1414   0D45 DA            push d
1415   0D46 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1416   0D49 D7            push a
1417   0D4A DA            push d
1418   0D4B FD 2E 02 00   mov32 cb, $00000002
1418   0D4F 00 00 
1419   0D51 E7            pop d
1420   0D52 5A            add d, b
1421   0D53 E4            pop a
1422   0D54 32            mov bl, [d]
1423   0D55 A7 00         mov bh, 0
1424   0D57 38 00 00      mov c, 0
1425   0D5A D7            push a
1426   0D5B 11            mov a, b
1427   0D5C FD 2E 03 00   mov32 cb, $00000003
1427   0D60 00 00 
1428   0D62 FD 92         and b, a ; &
1429   0D64 E4            pop a
1430   0D65             ; --- START SHIFT
1431   0D65 D7            push a
1432   0D66 11            mov a, b
1433   0D67 FD 2E 06 00   mov32 cb, $00000006
1433   0D6B 00 00 
1434   0D6D FD 39         mov c, b
1435   0D6F 9D            shl a, cl
1436   0D70 27            mov b, a
1437   0D71 E4            pop a
1438   0D72             ; --- END SHIFT
1439   0D72             ; --- START TERMS
1440   0D72 D7            push a
1441   0D73 11            mov a, b
1442   0D74 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1443   0D77 D7            push a
1444   0D78 DA            push d
1445   0D79 FD 2E 03 00   mov32 cb, $00000003
1445   0D7D 00 00 
1446   0D7F E7            pop d
1447   0D80 5A            add d, b
1448   0D81 E4            pop a
1449   0D82 32            mov bl, [d]
1450   0D83 A7 00         mov bh, 0
1451   0D85 38 00 00      mov c, 0
1452   0D88 56            add b, a
1453   0D89 E4            pop a
1454   0D8A             ; --- END TERMS
1455   0D8A E7            pop d
1456   0D8B FD 3E         mov [d], bl
1457   0D8D             ; for (i = 0; i < 3; i++) { 
1458   0D8D             _for16_init:
1459   0D8D FA FF FF      lea d, [bp + -1] ; $i
1460   0D90 DA            push d
1461   0D91 FD 2E 00 00   mov32 cb, $00000000
1461   0D95 00 00 
1462   0D97 E7            pop d
1463   0D98 FD 43         mov [d], b
1464   0D9A             _for16_cond:
1465   0D9A FA FF FF      lea d, [bp + -1] ; $i
1466   0D9D 2A            mov b, [d]
1467   0D9E 38 00 00      mov c, 0
1468   0DA1             ; --- START RELATIONAL
1469   0DA1 D7            push a
1470   0DA2 11            mov a, b
1471   0DA3 FD 2E 03 00   mov32 cb, $00000003
1471   0DA7 00 00 
1472   0DA9 B0            cmp a, b
1473   0DAA FD 73         slt ; < (signed)
1474   0DAC E4            pop a
1475   0DAD             ; --- END RELATIONAL
1476   0DAD C0 00 00      cmp b, 0
1477   0DB0 C6 FC 0D      je _for16_exit
1478   0DB3             _for16_block:
1479   0DB3             ; output[j++] = output_buffer[i]; 
1480   0DB3 FA 07 00      lea d, [bp + 7] ; $output
1481   0DB6 FD 2A         mov d, [d]
1482   0DB8 D7            push a
1483   0DB9 DA            push d
1484   0DBA FA FD FF      lea d, [bp + -3] ; $j
1485   0DBD 2A            mov b, [d]
1486   0DBE 38 00 00      mov c, 0
1487   0DC1 11            mov a, b
1488   0DC2 FD 77         inc b
1489   0DC4 FA FD FF      lea d, [bp + -3] ; $j
1490   0DC7 FD 43         mov [d], b
1491   0DC9 27            mov b, a
1492   0DCA E7            pop d
1493   0DCB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1494   0DCF E4            pop a
1495   0DD0 DA            push d
1496   0DD1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1497   0DD4 D7            push a
1498   0DD5 DA            push d
1499   0DD6 FA FF FF      lea d, [bp + -1] ; $i
1500   0DD9 2A            mov b, [d]
1501   0DDA 38 00 00      mov c, 0
1502   0DDD E7            pop d
1503   0DDE 5A            add d, b
1504   0DDF E4            pop a
1505   0DE0 32            mov bl, [d]
1506   0DE1 A7 00         mov bh, 0
1507   0DE3 38 00 00      mov c, 0
1508   0DE6 E7            pop d
1509   0DE7 FD 3E         mov [d], bl
1510   0DE9             _for16_update:
1511   0DE9 FA FF FF      lea d, [bp + -1] ; $i
1512   0DEC 2A            mov b, [d]
1513   0DED 38 00 00      mov c, 0
1514   0DF0 11            mov a, b
1515   0DF1 FD 77         inc b
1516   0DF3 FA FF FF      lea d, [bp + -1] ; $i
1517   0DF6 FD 43         mov [d], b
1518   0DF8 27            mov b, a
1519   0DF9 0A 9A 0D      jmp _for16_cond
1520   0DFC             _for16_exit:
1521   0DFC             ; i = 0; 
1522   0DFC FA FF FF      lea d, [bp + -1] ; $i
1523   0DFF DA            push d
1524   0E00 FD 2E 00 00   mov32 cb, $00000000
1524   0E04 00 00 
1525   0E06 E7            pop d
1526   0E07 FD 43         mov [d], b
1527   0E09 0A 0C 0E      jmp _if14_exit
1528   0E0C             _if14_exit:
1529   0E0C 0A 35 0B      jmp _while13_cond
1530   0E0F             _while13_exit:
1531   0E0F             ; if (i) { 
1532   0E0F             _if17_cond:
1533   0E0F FA FF FF      lea d, [bp + -1] ; $i
1534   0E12 2A            mov b, [d]
1535   0E13 38 00 00      mov c, 0
1536   0E16 C0 00 00      cmp b, 0
1537   0E19 C6 26 10      je _if17_exit
1538   0E1C             _if17_TRUE:
1539   0E1C             ; for (k = i; k < 4; k++) { 
1540   0E1C             _for18_init:
1541   0E1C FA FB FF      lea d, [bp + -5] ; $k
1542   0E1F DA            push d
1543   0E20 FA FF FF      lea d, [bp + -1] ; $i
1544   0E23 2A            mov b, [d]
1545   0E24 38 00 00      mov c, 0
1546   0E27 E7            pop d
1547   0E28 FD 43         mov [d], b
1548   0E2A             _for18_cond:
1549   0E2A FA FB FF      lea d, [bp + -5] ; $k
1550   0E2D 2A            mov b, [d]
1551   0E2E 38 00 00      mov c, 0
1552   0E31             ; --- START RELATIONAL
1553   0E31 D7            push a
1554   0E32 11            mov a, b
1555   0E33 FD 2E 04 00   mov32 cb, $00000004
1555   0E37 00 00 
1556   0E39 B0            cmp a, b
1557   0E3A FD 73         slt ; < (signed)
1558   0E3C E4            pop a
1559   0E3D             ; --- END RELATIONAL
1560   0E3D C0 00 00      cmp b, 0
1561   0E40 C6 6F 0E      je _for18_exit
1562   0E43             _for18_block:
1563   0E43             ; input_buffer[k] = 0; 
1564   0E43 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1565   0E46 D7            push a
1566   0E47 DA            push d
1567   0E48 FA FB FF      lea d, [bp + -5] ; $k
1568   0E4B 2A            mov b, [d]
1569   0E4C 38 00 00      mov c, 0
1570   0E4F E7            pop d
1571   0E50 5A            add d, b
1572   0E51 E4            pop a
1573   0E52 DA            push d
1574   0E53 FD 2E 00 00   mov32 cb, $00000000
1574   0E57 00 00 
1575   0E59 E7            pop d
1576   0E5A FD 3E         mov [d], bl
1577   0E5C             _for18_update:
1578   0E5C FA FB FF      lea d, [bp + -5] ; $k
1579   0E5F 2A            mov b, [d]
1580   0E60 38 00 00      mov c, 0
1581   0E63 11            mov a, b
1582   0E64 FD 77         inc b
1583   0E66 FA FB FF      lea d, [bp + -5] ; $k
1584   0E69 FD 43         mov [d], b
1585   0E6B 27            mov b, a
1586   0E6C 0A 2A 0E      jmp _for18_cond
1587   0E6F             _for18_exit:
1588   0E6F             ; for (k = 0; k < 4; k++) { 
1589   0E6F             _for19_init:
1590   0E6F FA FB FF      lea d, [bp + -5] ; $k
1591   0E72 DA            push d
1592   0E73 FD 2E 00 00   mov32 cb, $00000000
1592   0E77 00 00 
1593   0E79 E7            pop d
1594   0E7A FD 43         mov [d], b
1595   0E7C             _for19_cond:
1596   0E7C FA FB FF      lea d, [bp + -5] ; $k
1597   0E7F 2A            mov b, [d]
1598   0E80 38 00 00      mov c, 0
1599   0E83             ; --- START RELATIONAL
1600   0E83 D7            push a
1601   0E84 11            mov a, b
1602   0E85 FD 2E 04 00   mov32 cb, $00000004
1602   0E89 00 00 
1603   0E8B B0            cmp a, b
1604   0E8C FD 73         slt ; < (signed)
1605   0E8E E4            pop a
1606   0E8F             ; --- END RELATIONAL
1607   0E8F C0 00 00      cmp b, 0
1608   0E92 C6 D7 0E      je _for19_exit
1609   0E95             _for19_block:
1610   0E95             ; input_buffer[k] = base64_char_value(input_buffer[k]); 
1611   0E95 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1612   0E98 D7            push a
1613   0E99 DA            push d
1614   0E9A FA FB FF      lea d, [bp + -5] ; $k
1615   0E9D 2A            mov b, [d]
1616   0E9E 38 00 00      mov c, 0
1617   0EA1 E7            pop d
1618   0EA2 5A            add d, b
1619   0EA3 E4            pop a
1620   0EA4 DA            push d
1621   0EA5             ; --- START FUNCTION CALL
1622   0EA5 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1623   0EA8 D7            push a
1624   0EA9 DA            push d
1625   0EAA FA FB FF      lea d, [bp + -5] ; $k
1626   0EAD 2A            mov b, [d]
1627   0EAE 38 00 00      mov c, 0
1628   0EB1 E7            pop d
1629   0EB2 5A            add d, b
1630   0EB3 E4            pop a
1631   0EB4 32            mov bl, [d]
1632   0EB5 A7 00         mov bh, 0
1633   0EB7 38 00 00      mov c, 0
1634   0EBA DD            push bl
1635   0EBB 07 91 09      call base64_char_value
1636   0EBE 51 01 00      add sp, 1
1637   0EC1             ; --- END FUNCTION CALL
1638   0EC1 E7            pop d
1639   0EC2 FD 3E         mov [d], bl
1640   0EC4             _for19_update:
1641   0EC4 FA FB FF      lea d, [bp + -5] ; $k
1642   0EC7 2A            mov b, [d]
1643   0EC8 38 00 00      mov c, 0
1644   0ECB 11            mov a, b
1645   0ECC FD 77         inc b
1646   0ECE FA FB FF      lea d, [bp + -5] ; $k
1647   0ED1 FD 43         mov [d], b
1648   0ED3 27            mov b, a
1649   0ED4 0A 7C 0E      jmp _for19_cond
1650   0ED7             _for19_exit:
1651   0ED7             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1652   0ED7 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1653   0EDA D7            push a
1654   0EDB DA            push d
1655   0EDC FD 2E 00 00   mov32 cb, $00000000
1655   0EE0 00 00 
1656   0EE2 E7            pop d
1657   0EE3 5A            add d, b
1658   0EE4 E4            pop a
1659   0EE5 DA            push d
1660   0EE6 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1661   0EE9 D7            push a
1662   0EEA DA            push d
1663   0EEB FD 2E 00 00   mov32 cb, $00000000
1663   0EEF 00 00 
1664   0EF1 E7            pop d
1665   0EF2 5A            add d, b
1666   0EF3 E4            pop a
1667   0EF4 32            mov bl, [d]
1668   0EF5 A7 00         mov bh, 0
1669   0EF7 38 00 00      mov c, 0
1670   0EFA             ; --- START SHIFT
1671   0EFA D7            push a
1672   0EFB 11            mov a, b
1673   0EFC FD 2E 02 00   mov32 cb, $00000002
1673   0F00 00 00 
1674   0F02 FD 39         mov c, b
1675   0F04 9D            shl a, cl
1676   0F05 27            mov b, a
1677   0F06 E4            pop a
1678   0F07             ; --- END SHIFT
1679   0F07             ; --- START TERMS
1680   0F07 D7            push a
1681   0F08 11            mov a, b
1682   0F09 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1683   0F0C D7            push a
1684   0F0D DA            push d
1685   0F0E FD 2E 01 00   mov32 cb, $00000001
1685   0F12 00 00 
1686   0F14 E7            pop d
1687   0F15 5A            add d, b
1688   0F16 E4            pop a
1689   0F17 32            mov bl, [d]
1690   0F18 A7 00         mov bh, 0
1691   0F1A 38 00 00      mov c, 0
1692   0F1D D7            push a
1693   0F1E 11            mov a, b
1694   0F1F FD 2E 30 00   mov32 cb, $00000030
1694   0F23 00 00 
1695   0F25 FD 92         and b, a ; &
1696   0F27 E4            pop a
1697   0F28             ; --- START SHIFT
1698   0F28 D7            push a
1699   0F29 11            mov a, b
1700   0F2A FD 2E 04 00   mov32 cb, $00000004
1700   0F2E 00 00 
1701   0F30 FD 39         mov c, b
1702   0F32 A5            ashr a, cl
1703   0F33 27            mov b, a
1704   0F34 E4            pop a
1705   0F35             ; --- END SHIFT
1706   0F35 56            add b, a
1707   0F36 E4            pop a
1708   0F37             ; --- END TERMS
1709   0F37 E7            pop d
1710   0F38 FD 3E         mov [d], bl
1711   0F3A             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1712   0F3A FA F2 FF      lea d, [bp + -14] ; $output_buffer
1713   0F3D D7            push a
1714   0F3E DA            push d
1715   0F3F FD 2E 01 00   mov32 cb, $00000001
1715   0F43 00 00 
1716   0F45 E7            pop d
1717   0F46 5A            add d, b
1718   0F47 E4            pop a
1719   0F48 DA            push d
1720   0F49 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1721   0F4C D7            push a
1722   0F4D DA            push d
1723   0F4E FD 2E 01 00   mov32 cb, $00000001
1723   0F52 00 00 
1724   0F54 E7            pop d
1725   0F55 5A            add d, b
1726   0F56 E4            pop a
1727   0F57 32            mov bl, [d]
1728   0F58 A7 00         mov bh, 0
1729   0F5A 38 00 00      mov c, 0
1730   0F5D D7            push a
1731   0F5E 11            mov a, b
1732   0F5F FD 2E 0F 00   mov32 cb, $0000000f
1732   0F63 00 00 
1733   0F65 FD 92         and b, a ; &
1734   0F67 E4            pop a
1735   0F68             ; --- START SHIFT
1736   0F68 D7            push a
1737   0F69 11            mov a, b
1738   0F6A FD 2E 04 00   mov32 cb, $00000004
1738   0F6E 00 00 
1739   0F70 FD 39         mov c, b
1740   0F72 9D            shl a, cl
1741   0F73 27            mov b, a
1742   0F74 E4            pop a
1743   0F75             ; --- END SHIFT
1744   0F75             ; --- START TERMS
1745   0F75 D7            push a
1746   0F76 11            mov a, b
1747   0F77 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1748   0F7A D7            push a
1749   0F7B DA            push d
1750   0F7C FD 2E 02 00   mov32 cb, $00000002
1750   0F80 00 00 
1751   0F82 E7            pop d
1752   0F83 5A            add d, b
1753   0F84 E4            pop a
1754   0F85 32            mov bl, [d]
1755   0F86 A7 00         mov bh, 0
1756   0F88 38 00 00      mov c, 0
1757   0F8B D7            push a
1758   0F8C 11            mov a, b
1759   0F8D FD 2E 3C 00   mov32 cb, $0000003c
1759   0F91 00 00 
1760   0F93 FD 92         and b, a ; &
1761   0F95 E4            pop a
1762   0F96             ; --- START SHIFT
1763   0F96 D7            push a
1764   0F97 11            mov a, b
1765   0F98 FD 2E 02 00   mov32 cb, $00000002
1765   0F9C 00 00 
1766   0F9E FD 39         mov c, b
1767   0FA0 A5            ashr a, cl
1768   0FA1 27            mov b, a
1769   0FA2 E4            pop a
1770   0FA3             ; --- END SHIFT
1771   0FA3 56            add b, a
1772   0FA4 E4            pop a
1773   0FA5             ; --- END TERMS
1774   0FA5 E7            pop d
1775   0FA6 FD 3E         mov [d], bl
1776   0FA8             ; for (k = 0; k < i - 1; k++) { 
1777   0FA8             _for20_init:
1778   0FA8 FA FB FF      lea d, [bp + -5] ; $k
1779   0FAB DA            push d
1780   0FAC FD 2E 00 00   mov32 cb, $00000000
1780   0FB0 00 00 
1781   0FB2 E7            pop d
1782   0FB3 FD 43         mov [d], b
1783   0FB5             _for20_cond:
1784   0FB5 FA FB FF      lea d, [bp + -5] ; $k
1785   0FB8 2A            mov b, [d]
1786   0FB9 38 00 00      mov c, 0
1787   0FBC             ; --- START RELATIONAL
1788   0FBC D7            push a
1789   0FBD 11            mov a, b
1790   0FBE FA FF FF      lea d, [bp + -1] ; $i
1791   0FC1 2A            mov b, [d]
1792   0FC2 38 00 00      mov c, 0
1793   0FC5             ; --- START TERMS
1794   0FC5 D7            push a
1795   0FC6 11            mov a, b
1796   0FC7 FD 2E 01 00   mov32 cb, $00000001
1796   0FCB 00 00 
1797   0FCD 60            sub a, b
1798   0FCE 27            mov b, a
1799   0FCF E4            pop a
1800   0FD0             ; --- END TERMS
1801   0FD0 B0            cmp a, b
1802   0FD1 FD 73         slt ; < (signed)
1803   0FD3 E4            pop a
1804   0FD4             ; --- END RELATIONAL
1805   0FD4 C0 00 00      cmp b, 0
1806   0FD7 C6 23 10      je _for20_exit
1807   0FDA             _for20_block:
1808   0FDA             ; output[j++] = output_buffer[k]; 
1809   0FDA FA 07 00      lea d, [bp + 7] ; $output
1810   0FDD FD 2A         mov d, [d]
1811   0FDF D7            push a
1812   0FE0 DA            push d
1813   0FE1 FA FD FF      lea d, [bp + -3] ; $j
1814   0FE4 2A            mov b, [d]
1815   0FE5 38 00 00      mov c, 0
1816   0FE8 11            mov a, b
1817   0FE9 FD 77         inc b
1818   0FEB FA FD FF      lea d, [bp + -3] ; $j
1819   0FEE FD 43         mov [d], b
1820   0FF0 27            mov b, a
1821   0FF1 E7            pop d
1822   0FF2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1823   0FF6 E4            pop a
1824   0FF7 DA            push d
1825   0FF8 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1826   0FFB D7            push a
1827   0FFC DA            push d
1828   0FFD FA FB FF      lea d, [bp + -5] ; $k
1829   1000 2A            mov b, [d]
1830   1001 38 00 00      mov c, 0
1831   1004 E7            pop d
1832   1005 5A            add d, b
1833   1006 E4            pop a
1834   1007 32            mov bl, [d]
1835   1008 A7 00         mov bh, 0
1836   100A 38 00 00      mov c, 0
1837   100D E7            pop d
1838   100E FD 3E         mov [d], bl
1839   1010             _for20_update:
1840   1010 FA FB FF      lea d, [bp + -5] ; $k
1841   1013 2A            mov b, [d]
1842   1014 38 00 00      mov c, 0
1843   1017 11            mov a, b
1844   1018 FD 77         inc b
1845   101A FA FB FF      lea d, [bp + -5] ; $k
1846   101D FD 43         mov [d], b
1847   101F 27            mov b, a
1848   1020 0A B5 0F      jmp _for20_cond
1849   1023             _for20_exit:
1850   1023 0A 26 10      jmp _if17_exit
1851   1026             _if17_exit:
1852   1026             ; output[j] = '\0'; 
1853   1026 FA 07 00      lea d, [bp + 7] ; $output
1854   1029 FD 2A         mov d, [d]
1855   102B D7            push a
1856   102C DA            push d
1857   102D FA FD FF      lea d, [bp + -3] ; $j
1858   1030 2A            mov b, [d]
1859   1031 38 00 00      mov c, 0
1860   1034 E7            pop d
1861   1035 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1862   1039 E4            pop a
1863   103A DA            push d
1864   103B FD 2E 00 00   mov32 cb, $00000000
1864   103F 00 00 
1865   1041 E7            pop d
1866   1042 FD 3E         mov [d], bl
1867   1044 F9            leave
1868   1045 09            ret
1869   1046             
1870   1046             printf:
1871   1046 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1872   1049             ; char *p, *format_p; 
1873   1049 52 02 00      sub sp, 2
1874   104C 52 02 00      sub sp, 2
1875   104F             ; format_p = format; 
1876   104F FA FD FF      lea d, [bp + -3] ; $format_p
1877   1052 DA            push d
1878   1053 FA 05 00      lea d, [bp + 5] ; $format
1879   1056 2A            mov b, [d]
1880   1057 38 00 00      mov c, 0
1881   105A E7            pop d
1882   105B FD 43         mov [d], b
1883   105D             ; p = &format + 2; 
1884   105D FA FF FF      lea d, [bp + -1] ; $p
1885   1060 DA            push d
1886   1061 FA 05 00      lea d, [bp + 5] ; $format
1887   1064 2D            mov b, d
1888   1065             ; --- START TERMS
1889   1065 D7            push a
1890   1066 11            mov a, b
1891   1067 FD 2E 02 00   mov32 cb, $00000002
1891   106B 00 00 
1892   106D 56            add b, a
1893   106E E4            pop a
1894   106F             ; --- END TERMS
1895   106F E7            pop d
1896   1070 FD 43         mov [d], b
1897   1072             ; for(;;){ 
1898   1072             _for21_init:
1899   1072             _for21_cond:
1900   1072             _for21_block:
1901   1072             ; if(!*format_p) break; 
1902   1072             _if22_cond:
1903   1072 FA FD FF      lea d, [bp + -3] ; $format_p
1904   1075 2A            mov b, [d]
1905   1076 38 00 00      mov c, 0
1906   1079 74            mov d, b
1907   107A 32            mov bl, [d]
1908   107B A7 00         mov bh, 0
1909   107D 38 00 00      mov c, 0
1910   1080 C0 00 00      cmp b, 0
1911   1083 FD 71         seq ; !
1912   1085 C0 00 00      cmp b, 0
1913   1088 C6 91 10      je _if22_else
1914   108B             _if22_TRUE:
1915   108B             ; break; 
1916   108B 0A 41 13      jmp _for21_exit ; for break
1917   108E 0A 3E 13      jmp _if22_exit
1918   1091             _if22_else:
1919   1091             ; if(*format_p == '%'){ 
1920   1091             _if23_cond:
1921   1091 FA FD FF      lea d, [bp + -3] ; $format_p
1922   1094 2A            mov b, [d]
1923   1095 38 00 00      mov c, 0
1924   1098 74            mov d, b
1925   1099 32            mov bl, [d]
1926   109A A7 00         mov bh, 0
1927   109C 38 00 00      mov c, 0
1928   109F             ; --- START RELATIONAL
1929   109F D7            push a
1930   10A0 11            mov a, b
1931   10A1 FD 2E 25 00   mov32 cb, $00000025
1931   10A5 00 00 
1932   10A7 B0            cmp a, b
1933   10A8 FD 71         seq ; ==
1934   10AA E4            pop a
1935   10AB             ; --- END RELATIONAL
1936   10AB C0 00 00      cmp b, 0
1937   10AE C6 19 13      je _if23_else
1938   10B1             _if23_TRUE:
1939   10B1             ; format_p++; 
1940   10B1 FA FD FF      lea d, [bp + -3] ; $format_p
1941   10B4 2A            mov b, [d]
1942   10B5 38 00 00      mov c, 0
1943   10B8 FD 77         inc b
1944   10BA FA FD FF      lea d, [bp + -3] ; $format_p
1945   10BD FD 43         mov [d], b
1946   10BF FD 7D         dec b
1947   10C1             ; switch(*format_p){ 
1948   10C1             _switch24_expr:
1949   10C1 FA FD FF      lea d, [bp + -3] ; $format_p
1950   10C4 2A            mov b, [d]
1951   10C5 38 00 00      mov c, 0
1952   10C8 74            mov d, b
1953   10C9 32            mov bl, [d]
1954   10CA A7 00         mov bh, 0
1955   10CC 38 00 00      mov c, 0
1956   10CF             _switch24_comparisons:
1957   10CF C1 6C         cmp bl, $6c
1958   10D1 C6 FD 10      je _switch24_case0
1959   10D4 C1 4C         cmp bl, $4c
1960   10D6 C6 FD 10      je _switch24_case1
1961   10D9 C1 64         cmp bl, $64
1962   10DB C6 0D 12      je _switch24_case2
1963   10DE C1 69         cmp bl, $69
1964   10E0 C6 0D 12      je _switch24_case3
1965   10E3 C1 75         cmp bl, $75
1966   10E5 C6 3D 12      je _switch24_case4
1967   10E8 C1 78         cmp bl, $78
1968   10EA C6 6D 12      je _switch24_case5
1969   10ED C1 63         cmp bl, $63
1970   10EF C6 9D 12      je _switch24_case6
1971   10F2 C1 73         cmp bl, $73
1972   10F4 C6 CD 12      je _switch24_case7
1973   10F7 0A FA 12      jmp _switch24_default
1974   10FA 0A 06 13      jmp _switch24_exit
1975   10FD             _switch24_case0:
1976   10FD             _switch24_case1:
1977   10FD             ; format_p++; 
1978   10FD FA FD FF      lea d, [bp + -3] ; $format_p
1979   1100 2A            mov b, [d]
1980   1101 38 00 00      mov c, 0
1981   1104 FD 77         inc b
1982   1106 FA FD FF      lea d, [bp + -3] ; $format_p
1983   1109 FD 43         mov [d], b
1984   110B FD 7D         dec b
1985   110D             ; if(*format_p == 'd' || *format_p == 'i') 
1986   110D             _if25_cond:
1987   110D FA FD FF      lea d, [bp + -3] ; $format_p
1988   1110 2A            mov b, [d]
1989   1111 38 00 00      mov c, 0
1990   1114 74            mov d, b
1991   1115 32            mov bl, [d]
1992   1116 A7 00         mov bh, 0
1993   1118 38 00 00      mov c, 0
1994   111B             ; --- START RELATIONAL
1995   111B D7            push a
1996   111C 11            mov a, b
1997   111D FD 2E 64 00   mov32 cb, $00000064
1997   1121 00 00 
1998   1123 B0            cmp a, b
1999   1124 FD 71         seq ; ==
2000   1126 E4            pop a
2001   1127             ; --- END RELATIONAL
2002   1127             ; --- START LOGICAL OR
2003   1127 D7            push a
2004   1128 11            mov a, b
2005   1129 FA FD FF      lea d, [bp + -3] ; $format_p
2006   112C 2A            mov b, [d]
2007   112D 38 00 00      mov c, 0
2008   1130 74            mov d, b
2009   1131 32            mov bl, [d]
2010   1132 A7 00         mov bh, 0
2011   1134 38 00 00      mov c, 0
2012   1137             ; --- START RELATIONAL
2013   1137 D7            push a
2014   1138 11            mov a, b
2015   1139 FD 2E 69 00   mov32 cb, $00000069
2015   113D 00 00 
2016   113F B0            cmp a, b
2017   1140 FD 71         seq ; ==
2018   1142 E4            pop a
2019   1143             ; --- END RELATIONAL
2020   1143 FD A8         sor a, b ; ||
2021   1145 E4            pop a
2022   1146             ; --- END LOGICAL OR
2023   1146 C0 00 00      cmp b, 0
2024   1149 C6 6A 11      je _if25_else
2025   114C             _if25_TRUE:
2026   114C             ; print_signed_long(*(long *)p); 
2027   114C             ; --- START FUNCTION CALL
2028   114C FA FF FF      lea d, [bp + -1] ; $p
2029   114F 2A            mov b, [d]
2030   1150 38 00 00      mov c, 0
2031   1153 74            mov d, b
2032   1154 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2033   1157 FD 39         mov c, b ; And place it into C
2034   1159 2A            mov b, [d] ; Lower Word in B
2035   115A 12            mov a, c
2036   115B FD AA         swp a
2037   115D D7            push a
2038   115E FD AB         swp b
2039   1160 D8            push b
2040   1161 07 43 13      call print_signed_long
2041   1164 51 04 00      add sp, 4
2042   1167             ; --- END FUNCTION CALL
2043   1167 0A F2 11      jmp _if25_exit
2044   116A             _if25_else:
2045   116A             ; if(*format_p == 'u') 
2046   116A             _if26_cond:
2047   116A FA FD FF      lea d, [bp + -3] ; $format_p
2048   116D 2A            mov b, [d]
2049   116E 38 00 00      mov c, 0
2050   1171 74            mov d, b
2051   1172 32            mov bl, [d]
2052   1173 A7 00         mov bh, 0
2053   1175 38 00 00      mov c, 0
2054   1178             ; --- START RELATIONAL
2055   1178 D7            push a
2056   1179 11            mov a, b
2057   117A FD 2E 75 00   mov32 cb, $00000075
2057   117E 00 00 
2058   1180 B0            cmp a, b
2059   1181 FD 71         seq ; ==
2060   1183 E4            pop a
2061   1184             ; --- END RELATIONAL
2062   1184 C0 00 00      cmp b, 0
2063   1187 C6 A8 11      je _if26_else
2064   118A             _if26_TRUE:
2065   118A             ; print_unsigned_long(*(unsigned long *)p); 
2066   118A             ; --- START FUNCTION CALL
2067   118A FA FF FF      lea d, [bp + -1] ; $p
2068   118D 2A            mov b, [d]
2069   118E 38 00 00      mov c, 0
2070   1191 74            mov d, b
2071   1192 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2072   1195 FD 39         mov c, b ; And place it into C
2073   1197 2A            mov b, [d] ; Lower Word in B
2074   1198 12            mov a, c
2075   1199 FD AA         swp a
2076   119B D7            push a
2077   119C FD AB         swp b
2078   119E D8            push b
2079   119F 07 CE 14      call print_unsigned_long
2080   11A2 51 04 00      add sp, 4
2081   11A5             ; --- END FUNCTION CALL
2082   11A5 0A F2 11      jmp _if26_exit
2083   11A8             _if26_else:
2084   11A8             ; if(*format_p == 'x') 
2085   11A8             _if27_cond:
2086   11A8 FA FD FF      lea d, [bp + -3] ; $format_p
2087   11AB 2A            mov b, [d]
2088   11AC 38 00 00      mov c, 0
2089   11AF 74            mov d, b
2090   11B0 32            mov bl, [d]
2091   11B1 A7 00         mov bh, 0
2092   11B3 38 00 00      mov c, 0
2093   11B6             ; --- START RELATIONAL
2094   11B6 D7            push a
2095   11B7 11            mov a, b
2096   11B8 FD 2E 78 00   mov32 cb, $00000078
2096   11BC 00 00 
2097   11BE B0            cmp a, b
2098   11BF FD 71         seq ; ==
2099   11C1 E4            pop a
2100   11C2             ; --- END RELATIONAL
2101   11C2 C0 00 00      cmp b, 0
2102   11C5 C6 E6 11      je _if27_else
2103   11C8             _if27_TRUE:
2104   11C8             ; printx32(*(long int *)p); 
2105   11C8             ; --- START FUNCTION CALL
2106   11C8 FA FF FF      lea d, [bp + -1] ; $p
2107   11CB 2A            mov b, [d]
2108   11CC 38 00 00      mov c, 0
2109   11CF 74            mov d, b
2110   11D0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2111   11D3 FD 39         mov c, b ; And place it into C
2112   11D5 2A            mov b, [d] ; Lower Word in B
2113   11D6 12            mov a, c
2114   11D7 FD AA         swp a
2115   11D9 D7            push a
2116   11DA FD AB         swp b
2117   11DC D8            push b
2118   11DD 07 FA 15      call printx32
2119   11E0 51 04 00      add sp, 4
2120   11E3             ; --- END FUNCTION CALL
2121   11E3 0A F2 11      jmp _if27_exit
2122   11E6             _if27_else:
2123   11E6             ; err("Unexpected format in printf."); 
2124   11E6             ; --- START FUNCTION CALL
2125   11E6 26 E4 1A      mov b, _s3 ; "Unexpected format in printf."
2126   11E9 FD AB         swp b
2127   11EB D8            push b
2128   11EC 07 5A 16      call err
2129   11EF 51 02 00      add sp, 2
2130   11F2             ; --- END FUNCTION CALL
2131   11F2             _if27_exit:
2132   11F2             _if26_exit:
2133   11F2             _if25_exit:
2134   11F2             ; p = p + 4; 
2135   11F2 FA FF FF      lea d, [bp + -1] ; $p
2136   11F5 DA            push d
2137   11F6 FA FF FF      lea d, [bp + -1] ; $p
2138   11F9 2A            mov b, [d]
2139   11FA 38 00 00      mov c, 0
2140   11FD             ; --- START TERMS
2141   11FD D7            push a
2142   11FE 11            mov a, b
2143   11FF FD 2E 04 00   mov32 cb, $00000004
2143   1203 00 00 
2144   1205 56            add b, a
2145   1206 E4            pop a
2146   1207             ; --- END TERMS
2147   1207 E7            pop d
2148   1208 FD 43         mov [d], b
2149   120A             ; break; 
2150   120A 0A 06 13      jmp _switch24_exit ; case break
2151   120D             _switch24_case2:
2152   120D             _switch24_case3:
2153   120D             ; print_signed(*(int*)p); 
2154   120D             ; --- START FUNCTION CALL
2155   120D FA FF FF      lea d, [bp + -1] ; $p
2156   1210 2A            mov b, [d]
2157   1211 38 00 00      mov c, 0
2158   1214 74            mov d, b
2159   1215 2A            mov b, [d]
2160   1216 38 00 00      mov c, 0
2161   1219 FD AB         swp b
2162   121B D8            push b
2163   121C 07 88 16      call print_signed
2164   121F 51 02 00      add sp, 2
2165   1222             ; --- END FUNCTION CALL
2166   1222             ; p = p + 2; 
2167   1222 FA FF FF      lea d, [bp + -1] ; $p
2168   1225 DA            push d
2169   1226 FA FF FF      lea d, [bp + -1] ; $p
2170   1229 2A            mov b, [d]
2171   122A 38 00 00      mov c, 0
2172   122D             ; --- START TERMS
2173   122D D7            push a
2174   122E 11            mov a, b
2175   122F FD 2E 02 00   mov32 cb, $00000002
2175   1233 00 00 
2176   1235 56            add b, a
2177   1236 E4            pop a
2178   1237             ; --- END TERMS
2179   1237 E7            pop d
2180   1238 FD 43         mov [d], b
2181   123A             ; break; 
2182   123A 0A 06 13      jmp _switch24_exit ; case break
2183   123D             _switch24_case4:
2184   123D             ; print_unsigned(*(unsigned int*)p); 
2185   123D             ; --- START FUNCTION CALL
2186   123D FA FF FF      lea d, [bp + -1] ; $p
2187   1240 2A            mov b, [d]
2188   1241 38 00 00      mov c, 0
2189   1244 74            mov d, b
2190   1245 2A            mov b, [d]
2191   1246 38 00 00      mov c, 0
2192   1249 FD AB         swp b
2193   124B D8            push b
2194   124C 07 D1 17      call print_unsigned
2195   124F 51 02 00      add sp, 2
2196   1252             ; --- END FUNCTION CALL
2197   1252             ; p = p + 2; 
2198   1252 FA FF FF      lea d, [bp + -1] ; $p
2199   1255 DA            push d
2200   1256 FA FF FF      lea d, [bp + -1] ; $p
2201   1259 2A            mov b, [d]
2202   125A 38 00 00      mov c, 0
2203   125D             ; --- START TERMS
2204   125D D7            push a
2205   125E 11            mov a, b
2206   125F FD 2E 02 00   mov32 cb, $00000002
2206   1263 00 00 
2207   1265 56            add b, a
2208   1266 E4            pop a
2209   1267             ; --- END TERMS
2210   1267 E7            pop d
2211   1268 FD 43         mov [d], b
2212   126A             ; break; 
2213   126A 0A 06 13      jmp _switch24_exit ; case break
2214   126D             _switch24_case5:
2215   126D             ; printx16(*(int*)p); 
2216   126D             ; --- START FUNCTION CALL
2217   126D FA FF FF      lea d, [bp + -1] ; $p
2218   1270 2A            mov b, [d]
2219   1271 38 00 00      mov c, 0
2220   1274 74            mov d, b
2221   1275 2A            mov b, [d]
2222   1276 38 00 00      mov c, 0
2223   1279 FD AB         swp b
2224   127B D8            push b
2225   127C 07 E1 18      call printx16
2226   127F 51 02 00      add sp, 2
2227   1282             ; --- END FUNCTION CALL
2228   1282             ; p = p + 2; 
2229   1282 FA FF FF      lea d, [bp + -1] ; $p
2230   1285 DA            push d
2231   1286 FA FF FF      lea d, [bp + -1] ; $p
2232   1289 2A            mov b, [d]
2233   128A 38 00 00      mov c, 0
2234   128D             ; --- START TERMS
2235   128D D7            push a
2236   128E 11            mov a, b
2237   128F FD 2E 02 00   mov32 cb, $00000002
2237   1293 00 00 
2238   1295 56            add b, a
2239   1296 E4            pop a
2240   1297             ; --- END TERMS
2241   1297 E7            pop d
2242   1298 FD 43         mov [d], b
2243   129A             ; break; 
2244   129A 0A 06 13      jmp _switch24_exit ; case break
2245   129D             _switch24_case6:
2246   129D             ; putchar(*(char*)p); 
2247   129D             ; --- START FUNCTION CALL
2248   129D FA FF FF      lea d, [bp + -1] ; $p
2249   12A0 2A            mov b, [d]
2250   12A1 38 00 00      mov c, 0
2251   12A4 74            mov d, b
2252   12A5 32            mov bl, [d]
2253   12A6 A7 00         mov bh, 0
2254   12A8 38 00 00      mov c, 0
2255   12AB DD            push bl
2256   12AC 07 C0 14      call putchar
2257   12AF 51 01 00      add sp, 1
2258   12B2             ; --- END FUNCTION CALL
2259   12B2             ; p = p + 1; 
2260   12B2 FA FF FF      lea d, [bp + -1] ; $p
2261   12B5 DA            push d
2262   12B6 FA FF FF      lea d, [bp + -1] ; $p
2263   12B9 2A            mov b, [d]
2264   12BA 38 00 00      mov c, 0
2265   12BD             ; --- START TERMS
2266   12BD D7            push a
2267   12BE 11            mov a, b
2268   12BF FD 2E 01 00   mov32 cb, $00000001
2268   12C3 00 00 
2269   12C5 56            add b, a
2270   12C6 E4            pop a
2271   12C7             ; --- END TERMS
2272   12C7 E7            pop d
2273   12C8 FD 43         mov [d], b
2274   12CA             ; break; 
2275   12CA 0A 06 13      jmp _switch24_exit ; case break
2276   12CD             _switch24_case7:
2277   12CD             ; print(*(char**)p); 
2278   12CD             ; --- START FUNCTION CALL
2279   12CD FA FF FF      lea d, [bp + -1] ; $p
2280   12D0 2A            mov b, [d]
2281   12D1 38 00 00      mov c, 0
2282   12D4 74            mov d, b
2283   12D5 2A            mov b, [d]
2284   12D6 FD AB         swp b
2285   12D8 D8            push b
2286   12D9 07 6F 16      call print
2287   12DC 51 02 00      add sp, 2
2288   12DF             ; --- END FUNCTION CALL
2289   12DF             ; p = p + 2; 
2290   12DF FA FF FF      lea d, [bp + -1] ; $p
2291   12E2 DA            push d
2292   12E3 FA FF FF      lea d, [bp + -1] ; $p
2293   12E6 2A            mov b, [d]
2294   12E7 38 00 00      mov c, 0
2295   12EA             ; --- START TERMS
2296   12EA D7            push a
2297   12EB 11            mov a, b
2298   12EC FD 2E 02 00   mov32 cb, $00000002
2298   12F0 00 00 
2299   12F2 56            add b, a
2300   12F3 E4            pop a
2301   12F4             ; --- END TERMS
2302   12F4 E7            pop d
2303   12F5 FD 43         mov [d], b
2304   12F7             ; break; 
2305   12F7 0A 06 13      jmp _switch24_exit ; case break
2306   12FA             _switch24_default:
2307   12FA             ; print("Error: Unknown argument type.\n"); 
2308   12FA             ; --- START FUNCTION CALL
2309   12FA 26 01 1B      mov b, _s4 ; "Error: Unknown argument type.\n"
2310   12FD FD AB         swp b
2311   12FF D8            push b
2312   1300 07 6F 16      call print
2313   1303 51 02 00      add sp, 2
2314   1306             ; --- END FUNCTION CALL
2315   1306             _switch24_exit:
2316   1306             ; format_p++; 
2317   1306 FA FD FF      lea d, [bp + -3] ; $format_p
2318   1309 2A            mov b, [d]
2319   130A 38 00 00      mov c, 0
2320   130D FD 77         inc b
2321   130F FA FD FF      lea d, [bp + -3] ; $format_p
2322   1312 FD 43         mov [d], b
2323   1314 FD 7D         dec b
2324   1316 0A 3E 13      jmp _if23_exit
2325   1319             _if23_else:
2326   1319             ; putchar(*format_p); 
2327   1319             ; --- START FUNCTION CALL
2328   1319 FA FD FF      lea d, [bp + -3] ; $format_p
2329   131C 2A            mov b, [d]
2330   131D 38 00 00      mov c, 0
2331   1320 74            mov d, b
2332   1321 32            mov bl, [d]
2333   1322 A7 00         mov bh, 0
2334   1324 38 00 00      mov c, 0
2335   1327 DD            push bl
2336   1328 07 C0 14      call putchar
2337   132B 51 01 00      add sp, 1
2338   132E             ; --- END FUNCTION CALL
2339   132E             ; format_p++; 
2340   132E FA FD FF      lea d, [bp + -3] ; $format_p
2341   1331 2A            mov b, [d]
2342   1332 38 00 00      mov c, 0
2343   1335 FD 77         inc b
2344   1337 FA FD FF      lea d, [bp + -3] ; $format_p
2345   133A FD 43         mov [d], b
2346   133C FD 7D         dec b
2347   133E             _if23_exit:
2348   133E             _if22_exit:
2349   133E             _for21_update:
2350   133E 0A 72 10      jmp _for21_cond
2351   1341             _for21_exit:
2352   1341 F9            leave
2353   1342 09            ret
2354   1343             
2355   1343             print_signed_long:
2356   1343 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2357   1346             ; char digits[10]; 
2358   1346 52 0A 00      sub sp, 10
2359   1349             ; int i = 0; 
2360   1349 52 02 00      sub sp, 2
2361   134C             ; --- START LOCAL VAR INITIALIZATION
2362   134C FA F5 FF      lea d, [bp + -11] ; $i
2363   134F DA            push d
2364   1350 FD 2E 00 00   mov32 cb, $00000000
2364   1354 00 00 
2365   1356 E7            pop d
2366   1357 FD 43         mov [d], b
2367   1359             ; --- END LOCAL VAR INITIALIZATION
2368   1359             ; if (num < 0) { 
2369   1359             _if28_cond:
2370   1359 FA 05 00      lea d, [bp + 5] ; $num
2371   135C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2372   135F FD 39         mov c, b ; And place it into C
2373   1361 2A            mov b, [d] ; Lower Word in B
2374   1362             ; --- START RELATIONAL
2375   1362 D7            push a
2376   1363 FD D8         push g
2377   1365 11            mov a, b
2378   1366 FD 7A         mov g, c
2379   1368 FD 2E 00 00   mov32 cb, $00000000
2379   136C 00 00 
2380   136E FD AF         cmp32 ga, cb
2381   1370 FD 73         slt ; <
2382   1372 FD F1         pop g
2383   1374 E4            pop a
2384   1375             ; --- END RELATIONAL
2385   1375 C0 00 00      cmp b, 0
2386   1378 C6 AA 13      je _if28_else
2387   137B             _if28_TRUE:
2388   137B             ; putchar('-'); 
2389   137B             ; --- START FUNCTION CALL
2390   137B FD 2E 2D 00   mov32 cb, $0000002d
2390   137F 00 00 
2391   1381 DD            push bl
2392   1382 07 C0 14      call putchar
2393   1385 51 01 00      add sp, 1
2394   1388             ; --- END FUNCTION CALL
2395   1388             ; num = -num; 
2396   1388 FA 05 00      lea d, [bp + 5] ; $num
2397   138B DA            push d
2398   138C FA 05 00      lea d, [bp + 5] ; $num
2399   138F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2400   1392 FD 39         mov c, b ; And place it into C
2401   1394 2A            mov b, [d] ; Lower Word in B
2402   1395 12            mov a, c
2403   1396 95            not a
2404   1397 97            not b
2405   1398 55 01 00      add b, 1
2406   139B 5B 00 00      adc a, 0
2407   139E 39            mov c, a
2408   139F E7            pop d
2409   13A0 FD 43         mov [d], b
2410   13A2 28            mov b, c
2411   13A3 FD 44 02 00   mov [d + 2], b
2412   13A7 0A DE 13      jmp _if28_exit
2413   13AA             _if28_else:
2414   13AA             ; if (num == 0) { 
2415   13AA             _if29_cond:
2416   13AA FA 05 00      lea d, [bp + 5] ; $num
2417   13AD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2418   13B0 FD 39         mov c, b ; And place it into C
2419   13B2 2A            mov b, [d] ; Lower Word in B
2420   13B3             ; --- START RELATIONAL
2421   13B3 D7            push a
2422   13B4 FD D8         push g
2423   13B6 11            mov a, b
2424   13B7 FD 7A         mov g, c
2425   13B9 FD 2E 00 00   mov32 cb, $00000000
2425   13BD 00 00 
2426   13BF FD AF         cmp32 ga, cb
2427   13C1 FD 71         seq ; ==
2428   13C3 FD F1         pop g
2429   13C5 E4            pop a
2430   13C6             ; --- END RELATIONAL
2431   13C6 C0 00 00      cmp b, 0
2432   13C9 C6 DE 13      je _if29_exit
2433   13CC             _if29_TRUE:
2434   13CC             ; putchar('0'); 
2435   13CC             ; --- START FUNCTION CALL
2436   13CC FD 2E 30 00   mov32 cb, $00000030
2436   13D0 00 00 
2437   13D2 DD            push bl
2438   13D3 07 C0 14      call putchar
2439   13D6 51 01 00      add sp, 1
2440   13D9             ; --- END FUNCTION CALL
2441   13D9             ; return; 
2442   13D9 F9            leave
2443   13DA 09            ret
2444   13DB 0A DE 13      jmp _if29_exit
2445   13DE             _if29_exit:
2446   13DE             _if28_exit:
2447   13DE             ; while (num > 0) { 
2448   13DE             _while30_cond:
2449   13DE FA 05 00      lea d, [bp + 5] ; $num
2450   13E1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2451   13E4 FD 39         mov c, b ; And place it into C
2452   13E6 2A            mov b, [d] ; Lower Word in B
2453   13E7             ; --- START RELATIONAL
2454   13E7 D7            push a
2455   13E8 FD D8         push g
2456   13EA 11            mov a, b
2457   13EB FD 7A         mov g, c
2458   13ED FD 2E 00 00   mov32 cb, $00000000
2458   13F1 00 00 
2459   13F3 FD AF         cmp32 ga, cb
2460   13F5 FD 7F         sgt
2461   13F7 FD F1         pop g
2462   13F9 E4            pop a
2463   13FA             ; --- END RELATIONAL
2464   13FA C0 00 00      cmp b, 0
2465   13FD C6 76 14      je _while30_exit
2466   1400             _while30_block:
2467   1400             ; digits[i] = '0' + (num % 10); 
2468   1400 FA F7 FF      lea d, [bp + -9] ; $digits
2469   1403 D7            push a
2470   1404 DA            push d
2471   1405 FA F5 FF      lea d, [bp + -11] ; $i
2472   1408 2A            mov b, [d]
2473   1409 38 00 00      mov c, 0
2474   140C E7            pop d
2475   140D 5A            add d, b
2476   140E E4            pop a
2477   140F DA            push d
2478   1410 FD 2E 30 00   mov32 cb, $00000030
2478   1414 00 00 
2479   1416             ; --- START TERMS
2480   1416 D7            push a
2481   1417 11            mov a, b
2482   1418 FA 05 00      lea d, [bp + 5] ; $num
2483   141B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2484   141E FD 39         mov c, b ; And place it into C
2485   1420 2A            mov b, [d] ; Lower Word in B
2486   1421             ; --- START FACTORS
2487   1421 D7            push a
2488   1422 FD D8         push g
2489   1424 11            mov a, b
2490   1425 FD 7A         mov g, c
2491   1427 FD 2E 0A 00   mov32 cb, $0000000a
2491   142B 00 00 
2492   142D AE            div a, b ; 
2493   142E 11            mov a, b
2494   142F FD 38         mov c, g
2495   1431 27            mov b, a
2496   1432 FD F1         pop g
2497   1434 E4            pop a
2498   1435             ; --- END FACTORS
2499   1435 FD 15         add32 cb, ga
2500   1437 E4            pop a
2501   1438             ; --- END TERMS
2502   1438 E7            pop d
2503   1439 FD 3E         mov [d], bl
2504   143B             ; num = num / 10; 
2505   143B FA 05 00      lea d, [bp + 5] ; $num
2506   143E DA            push d
2507   143F FA 05 00      lea d, [bp + 5] ; $num
2508   1442 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2509   1445 FD 39         mov c, b ; And place it into C
2510   1447 2A            mov b, [d] ; Lower Word in B
2511   1448             ; --- START FACTORS
2512   1448 D7            push a
2513   1449 FD D8         push g
2514   144B 11            mov a, b
2515   144C FD 7A         mov g, c
2516   144E FD 2E 0A 00   mov32 cb, $0000000a
2516   1452 00 00 
2517   1454 AE            div a, b
2518   1455 FD 38         mov c, g
2519   1457 27            mov b, a
2520   1458 FD F1         pop g
2521   145A E4            pop a
2522   145B             ; --- END FACTORS
2523   145B E7            pop d
2524   145C FD 43         mov [d], b
2525   145E 28            mov b, c
2526   145F FD 44 02 00   mov [d + 2], b
2527   1463             ; i++; 
2528   1463 FA F5 FF      lea d, [bp + -11] ; $i
2529   1466 2A            mov b, [d]
2530   1467 38 00 00      mov c, 0
2531   146A 11            mov a, b
2532   146B FD 77         inc b
2533   146D FA F5 FF      lea d, [bp + -11] ; $i
2534   1470 FD 43         mov [d], b
2535   1472 27            mov b, a
2536   1473 0A DE 13      jmp _while30_cond
2537   1476             _while30_exit:
2538   1476             ; while (i > 0) { 
2539   1476             _while37_cond:
2540   1476 FA F5 FF      lea d, [bp + -11] ; $i
2541   1479 2A            mov b, [d]
2542   147A 38 00 00      mov c, 0
2543   147D             ; --- START RELATIONAL
2544   147D D7            push a
2545   147E 11            mov a, b
2546   147F FD 2E 00 00   mov32 cb, $00000000
2546   1483 00 00 
2547   1485 B0            cmp a, b
2548   1486 FD 7F         sgt ; >
2549   1488 E4            pop a
2550   1489             ; --- END RELATIONAL
2551   1489 C0 00 00      cmp b, 0
2552   148C C6 BE 14      je _while37_exit
2553   148F             _while37_block:
2554   148F             ; i--; 
2555   148F FA F5 FF      lea d, [bp + -11] ; $i
2556   1492 2A            mov b, [d]
2557   1493 38 00 00      mov c, 0
2558   1496 11            mov a, b
2559   1497 FD 7D         dec b
2560   1499 FA F5 FF      lea d, [bp + -11] ; $i
2561   149C FD 43         mov [d], b
2562   149E 27            mov b, a
2563   149F             ; putchar(digits[i]); 
2564   149F             ; --- START FUNCTION CALL
2565   149F FA F7 FF      lea d, [bp + -9] ; $digits
2566   14A2 D7            push a
2567   14A3 DA            push d
2568   14A4 FA F5 FF      lea d, [bp + -11] ; $i
2569   14A7 2A            mov b, [d]
2570   14A8 38 00 00      mov c, 0
2571   14AB E7            pop d
2572   14AC 5A            add d, b
2573   14AD E4            pop a
2574   14AE 32            mov bl, [d]
2575   14AF A7 00         mov bh, 0
2576   14B1 38 00 00      mov c, 0
2577   14B4 DD            push bl
2578   14B5 07 C0 14      call putchar
2579   14B8 51 01 00      add sp, 1
2580   14BB             ; --- END FUNCTION CALL
2581   14BB 0A 76 14      jmp _while37_cond
2582   14BE             _while37_exit:
2583   14BE F9            leave
2584   14BF 09            ret
2585   14C0             
2586   14C0             putchar:
2587   14C0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2588   14C3             ; --- BEGIN INLINE ASM SEGMENT
2589   14C3 FA 05 00      lea d, [bp + 5] ; $c
2590   14C6 1E            mov al, [d]
2591   14C7 23            mov ah, al
2592   14C8 19 00         mov al, 0
2593   14CA 05 03         syscall sys_io      ; char in AH
2594   14CC             ; --- END INLINE ASM SEGMENT
2595   14CC F9            leave
2596   14CD 09            ret
2597   14CE             
2598   14CE             print_unsigned_long:
2599   14CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2600   14D1             ; char digits[10]; 
2601   14D1 52 0A 00      sub sp, 10
2602   14D4             ; int i; 
2603   14D4 52 02 00      sub sp, 2
2604   14D7             ; i = 0; 
2605   14D7 FA F5 FF      lea d, [bp + -11] ; $i
2606   14DA DA            push d
2607   14DB FD 2E 00 00   mov32 cb, $00000000
2607   14DF 00 00 
2608   14E1 E7            pop d
2609   14E2 FD 43         mov [d], b
2610   14E4             ; if(num == 0){ 
2611   14E4             _if38_cond:
2612   14E4 FA 05 00      lea d, [bp + 5] ; $num
2613   14E7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2614   14EA FD 39         mov c, b ; And place it into C
2615   14EC 2A            mov b, [d] ; Lower Word in B
2616   14ED             ; --- START RELATIONAL
2617   14ED D7            push a
2618   14EE FD D8         push g
2619   14F0 11            mov a, b
2620   14F1 FD 7A         mov g, c
2621   14F3 FD 2E 00 00   mov32 cb, $00000000
2621   14F7 00 00 
2622   14F9 FD AF         cmp32 ga, cb
2623   14FB FD 71         seq ; ==
2624   14FD FD F1         pop g
2625   14FF E4            pop a
2626   1500             ; --- END RELATIONAL
2627   1500 C0 00 00      cmp b, 0
2628   1503 C6 18 15      je _if38_exit
2629   1506             _if38_TRUE:
2630   1506             ; putchar('0'); 
2631   1506             ; --- START FUNCTION CALL
2632   1506 FD 2E 30 00   mov32 cb, $00000030
2632   150A 00 00 
2633   150C DD            push bl
2634   150D 07 C0 14      call putchar
2635   1510 51 01 00      add sp, 1
2636   1513             ; --- END FUNCTION CALL
2637   1513             ; return; 
2638   1513 F9            leave
2639   1514 09            ret
2640   1515 0A 18 15      jmp _if38_exit
2641   1518             _if38_exit:
2642   1518             ; while (num > 0) { 
2643   1518             _while39_cond:
2644   1518 FA 05 00      lea d, [bp + 5] ; $num
2645   151B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2646   151E FD 39         mov c, b ; And place it into C
2647   1520 2A            mov b, [d] ; Lower Word in B
2648   1521             ; --- START RELATIONAL
2649   1521 D7            push a
2650   1522 FD D8         push g
2651   1524 11            mov a, b
2652   1525 FD 7A         mov g, c
2653   1527 FD 2E 00 00   mov32 cb, $00000000
2653   152B 00 00 
2654   152D FD AF         cmp32 ga, cb
2655   152F FD 81         sgu
2656   1531 FD F1         pop g
2657   1533 E4            pop a
2658   1534             ; --- END RELATIONAL
2659   1534 C0 00 00      cmp b, 0
2660   1537 C6 B0 15      je _while39_exit
2661   153A             _while39_block:
2662   153A             ; digits[i] = '0' + (num % 10); 
2663   153A FA F7 FF      lea d, [bp + -9] ; $digits
2664   153D D7            push a
2665   153E DA            push d
2666   153F FA F5 FF      lea d, [bp + -11] ; $i
2667   1542 2A            mov b, [d]
2668   1543 38 00 00      mov c, 0
2669   1546 E7            pop d
2670   1547 5A            add d, b
2671   1548 E4            pop a
2672   1549 DA            push d
2673   154A FD 2E 30 00   mov32 cb, $00000030
2673   154E 00 00 
2674   1550             ; --- START TERMS
2675   1550 D7            push a
2676   1551 11            mov a, b
2677   1552 FA 05 00      lea d, [bp + 5] ; $num
2678   1555 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2679   1558 FD 39         mov c, b ; And place it into C
2680   155A 2A            mov b, [d] ; Lower Word in B
2681   155B             ; --- START FACTORS
2682   155B D7            push a
2683   155C FD D8         push g
2684   155E 11            mov a, b
2685   155F FD 7A         mov g, c
2686   1561 FD 2E 0A 00   mov32 cb, $0000000a
2686   1565 00 00 
2687   1567 AE            div a, b ; 
2688   1568 11            mov a, b
2689   1569 FD 38         mov c, g
2690   156B 27            mov b, a
2691   156C FD F1         pop g
2692   156E E4            pop a
2693   156F             ; --- END FACTORS
2694   156F FD 15         add32 cb, ga
2695   1571 E4            pop a
2696   1572             ; --- END TERMS
2697   1572 E7            pop d
2698   1573 FD 3E         mov [d], bl
2699   1575             ; num = num / 10; 
2700   1575 FA 05 00      lea d, [bp + 5] ; $num
2701   1578 DA            push d
2702   1579 FA 05 00      lea d, [bp + 5] ; $num
2703   157C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2704   157F FD 39         mov c, b ; And place it into C
2705   1581 2A            mov b, [d] ; Lower Word in B
2706   1582             ; --- START FACTORS
2707   1582 D7            push a
2708   1583 FD D8         push g
2709   1585 11            mov a, b
2710   1586 FD 7A         mov g, c
2711   1588 FD 2E 0A 00   mov32 cb, $0000000a
2711   158C 00 00 
2712   158E AE            div a, b
2713   158F FD 38         mov c, g
2714   1591 27            mov b, a
2715   1592 FD F1         pop g
2716   1594 E4            pop a
2717   1595             ; --- END FACTORS
2718   1595 E7            pop d
2719   1596 FD 43         mov [d], b
2720   1598 28            mov b, c
2721   1599 FD 44 02 00   mov [d + 2], b
2722   159D             ; i++; 
2723   159D FA F5 FF      lea d, [bp + -11] ; $i
2724   15A0 2A            mov b, [d]
2725   15A1 38 00 00      mov c, 0
2726   15A4 11            mov a, b
2727   15A5 FD 77         inc b
2728   15A7 FA F5 FF      lea d, [bp + -11] ; $i
2729   15AA FD 43         mov [d], b
2730   15AC 27            mov b, a
2731   15AD 0A 18 15      jmp _while39_cond
2732   15B0             _while39_exit:
2733   15B0             ; while (i > 0) { 
2734   15B0             _while46_cond:
2735   15B0 FA F5 FF      lea d, [bp + -11] ; $i
2736   15B3 2A            mov b, [d]
2737   15B4 38 00 00      mov c, 0
2738   15B7             ; --- START RELATIONAL
2739   15B7 D7            push a
2740   15B8 11            mov a, b
2741   15B9 FD 2E 00 00   mov32 cb, $00000000
2741   15BD 00 00 
2742   15BF B0            cmp a, b
2743   15C0 FD 7F         sgt ; >
2744   15C2 E4            pop a
2745   15C3             ; --- END RELATIONAL
2746   15C3 C0 00 00      cmp b, 0
2747   15C6 C6 F8 15      je _while46_exit
2748   15C9             _while46_block:
2749   15C9             ; i--; 
2750   15C9 FA F5 FF      lea d, [bp + -11] ; $i
2751   15CC 2A            mov b, [d]
2752   15CD 38 00 00      mov c, 0
2753   15D0 11            mov a, b
2754   15D1 FD 7D         dec b
2755   15D3 FA F5 FF      lea d, [bp + -11] ; $i
2756   15D6 FD 43         mov [d], b
2757   15D8 27            mov b, a
2758   15D9             ; putchar(digits[i]); 
2759   15D9             ; --- START FUNCTION CALL
2760   15D9 FA F7 FF      lea d, [bp + -9] ; $digits
2761   15DC D7            push a
2762   15DD DA            push d
2763   15DE FA F5 FF      lea d, [bp + -11] ; $i
2764   15E1 2A            mov b, [d]
2765   15E2 38 00 00      mov c, 0
2766   15E5 E7            pop d
2767   15E6 5A            add d, b
2768   15E7 E4            pop a
2769   15E8 32            mov bl, [d]
2770   15E9 A7 00         mov bh, 0
2771   15EB 38 00 00      mov c, 0
2772   15EE DD            push bl
2773   15EF 07 C0 14      call putchar
2774   15F2 51 01 00      add sp, 1
2775   15F5             ; --- END FUNCTION CALL
2776   15F5 0A B0 15      jmp _while46_cond
2777   15F8             _while46_exit:
2778   15F8 F9            leave
2779   15F9 09            ret
2780   15FA             
2781   15FA             printx32:
2782   15FA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2783   15FD             ; --- BEGIN INLINE ASM SEGMENT
2784   15FD FA 05 00      lea d, [bp + 5] ; $hex
2785   1600 2B 02 00      mov b, [d+2]
2786   1603 07 0C 16      call print_u16x_printx32
2787   1606 2A            mov b, [d]
2788   1607 07 0C 16      call print_u16x_printx32
2789   160A             ; --- END INLINE ASM SEGMENT
2790   160A             ; return; 
2791   160A F9            leave
2792   160B 09            ret
2793   160C             ; --- BEGIN INLINE ASM SEGMENT
2794   160C             print_u16x_printx32:
2795   160C D7            push a
2796   160D D8            push b
2797   160E DD            push bl
2798   160F 30            mov bl, bh
2799   1610 07 2E 16      call _itoa_printx32        ; convert bh to char in A
2800   1613 2F            mov bl, al        ; save al
2801   1614 19 00         mov al, 0
2802   1616 05 03         syscall sys_io        ; display AH
2803   1618 24            mov ah, bl        ; retrieve al
2804   1619 19 00         mov al, 0
2805   161B 05 03         syscall sys_io        ; display AL
2806   161D EA            pop bl
2807   161E 07 2E 16      call _itoa_printx32        ; convert bh to char in A
2808   1621 2F            mov bl, al        ; save al
2809   1622 19 00         mov al, 0
2810   1624 05 03         syscall sys_io        ; display AH
2811   1626 24            mov ah, bl        ; retrieve al
2812   1627 19 00         mov al, 0
2813   1629 05 03         syscall sys_io        ; display AL
2814   162B E5            pop b
2815   162C E4            pop a
2816   162D 09            ret
2817   162E             _itoa_printx32:
2818   162E DA            push d
2819   162F D8            push b
2820   1630 A7 00         mov bh, 0
2821   1632 FD A4 04      shr bl, 4  
2822   1635 74            mov d, b
2823   1636 1F 48 16      mov al, [d + s_hex_digits_printx32]
2824   1639 23            mov ah, al
2825   163A E5            pop b
2826   163B D8            push b
2827   163C A7 00         mov bh, 0
2828   163E FD 87 0F      and bl, $0F
2829   1641 74            mov d, b
2830   1642 1F 48 16      mov al, [d + s_hex_digits_printx32]
2831   1645 E5            pop b
2832   1646 E7            pop d
2833   1647 09            ret
2834   1648 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2834   164C 34 35 36 37 
2834   1650 38 39 41 42 
2834   1654 43 44 45 46 
2835   1658             ; --- END INLINE ASM SEGMENT
2836   1658 F9            leave
2837   1659 09            ret
2838   165A             
2839   165A             err:
2840   165A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2841   165D             ; print(e); 
2842   165D             ; --- START FUNCTION CALL
2843   165D FA 05 00      lea d, [bp + 5] ; $e
2844   1660 2A            mov b, [d]
2845   1661 38 00 00      mov c, 0
2846   1664 FD AB         swp b
2847   1666 D8            push b
2848   1667 07 6F 16      call print
2849   166A 51 02 00      add sp, 2
2850   166D             ; --- END FUNCTION CALL
2851   166D F9            leave
2852   166E 09            ret
2853   166F             
2854   166F             print:
2855   166F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2856   1672             ; --- BEGIN INLINE ASM SEGMENT
2857   1672 FA 05 00      lea d, [bp + 5] ; $s
2858   1675 FD 2A         mov d, [d]
2859   1677             _puts_L1_print:
2860   1677 1E            mov al, [d]
2861   1678 B9 00         cmp al, 0
2862   167A C6 86 16      jz _puts_END_print
2863   167D 23            mov ah, al
2864   167E 19 00         mov al, 0
2865   1680 05 03         syscall sys_io
2866   1682 79            inc d
2867   1683 0A 77 16      jmp _puts_L1_print
2868   1686             _puts_END_print:
2869   1686             ; --- END INLINE ASM SEGMENT
2870   1686 F9            leave
2871   1687 09            ret
2872   1688             
2873   1688             print_signed:
2874   1688 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2875   168B             ; char digits[5]; 
2876   168B 52 05 00      sub sp, 5
2877   168E             ; int i = 0; 
2878   168E 52 02 00      sub sp, 2
2879   1691             ; --- START LOCAL VAR INITIALIZATION
2880   1691 FA FA FF      lea d, [bp + -6] ; $i
2881   1694 DA            push d
2882   1695 FD 2E 00 00   mov32 cb, $00000000
2882   1699 00 00 
2883   169B E7            pop d
2884   169C FD 43         mov [d], b
2885   169E             ; --- END LOCAL VAR INITIALIZATION
2886   169E             ; if (num < 0) { 
2887   169E             _if47_cond:
2888   169E FA 05 00      lea d, [bp + 5] ; $num
2889   16A1 2A            mov b, [d]
2890   16A2 38 00 00      mov c, 0
2891   16A5             ; --- START RELATIONAL
2892   16A5 D7            push a
2893   16A6 11            mov a, b
2894   16A7 FD 2E 00 00   mov32 cb, $00000000
2894   16AB 00 00 
2895   16AD B0            cmp a, b
2896   16AE FD 73         slt ; < (signed)
2897   16B0 E4            pop a
2898   16B1             ; --- END RELATIONAL
2899   16B1 C0 00 00      cmp b, 0
2900   16B4 C6 D7 16      je _if47_else
2901   16B7             _if47_TRUE:
2902   16B7             ; putchar('-'); 
2903   16B7             ; --- START FUNCTION CALL
2904   16B7 FD 2E 2D 00   mov32 cb, $0000002d
2904   16BB 00 00 
2905   16BD DD            push bl
2906   16BE 07 C0 14      call putchar
2907   16C1 51 01 00      add sp, 1
2908   16C4             ; --- END FUNCTION CALL
2909   16C4             ; num = -num; 
2910   16C4 FA 05 00      lea d, [bp + 5] ; $num
2911   16C7 DA            push d
2912   16C8 FA 05 00      lea d, [bp + 5] ; $num
2913   16CB 2A            mov b, [d]
2914   16CC 38 00 00      mov c, 0
2915   16CF FD 97         neg b
2916   16D1 E7            pop d
2917   16D2 FD 43         mov [d], b
2918   16D4 0A 02 17      jmp _if47_exit
2919   16D7             _if47_else:
2920   16D7             ; if (num == 0) { 
2921   16D7             _if48_cond:
2922   16D7 FA 05 00      lea d, [bp + 5] ; $num
2923   16DA 2A            mov b, [d]
2924   16DB 38 00 00      mov c, 0
2925   16DE             ; --- START RELATIONAL
2926   16DE D7            push a
2927   16DF 11            mov a, b
2928   16E0 FD 2E 00 00   mov32 cb, $00000000
2928   16E4 00 00 
2929   16E6 B0            cmp a, b
2930   16E7 FD 71         seq ; ==
2931   16E9 E4            pop a
2932   16EA             ; --- END RELATIONAL
2933   16EA C0 00 00      cmp b, 0
2934   16ED C6 02 17      je _if48_exit
2935   16F0             _if48_TRUE:
2936   16F0             ; putchar('0'); 
2937   16F0             ; --- START FUNCTION CALL
2938   16F0 FD 2E 30 00   mov32 cb, $00000030
2938   16F4 00 00 
2939   16F6 DD            push bl
2940   16F7 07 C0 14      call putchar
2941   16FA 51 01 00      add sp, 1
2942   16FD             ; --- END FUNCTION CALL
2943   16FD             ; return; 
2944   16FD F9            leave
2945   16FE 09            ret
2946   16FF 0A 02 17      jmp _if48_exit
2947   1702             _if48_exit:
2948   1702             _if47_exit:
2949   1702             ; while (num > 0) { 
2950   1702             _while49_cond:
2951   1702 FA 05 00      lea d, [bp + 5] ; $num
2952   1705 2A            mov b, [d]
2953   1706 38 00 00      mov c, 0
2954   1709             ; --- START RELATIONAL
2955   1709 D7            push a
2956   170A 11            mov a, b
2957   170B FD 2E 00 00   mov32 cb, $00000000
2957   170F 00 00 
2958   1711 B0            cmp a, b
2959   1712 FD 7F         sgt ; >
2960   1714 E4            pop a
2961   1715             ; --- END RELATIONAL
2962   1715 C0 00 00      cmp b, 0
2963   1718 C6 87 17      je _while49_exit
2964   171B             _while49_block:
2965   171B             ; digits[i] = '0' + (num % 10); 
2966   171B FA FC FF      lea d, [bp + -4] ; $digits
2967   171E D7            push a
2968   171F DA            push d
2969   1720 FA FA FF      lea d, [bp + -6] ; $i
2970   1723 2A            mov b, [d]
2971   1724 38 00 00      mov c, 0
2972   1727 E7            pop d
2973   1728 5A            add d, b
2974   1729 E4            pop a
2975   172A DA            push d
2976   172B FD 2E 30 00   mov32 cb, $00000030
2976   172F 00 00 
2977   1731             ; --- START TERMS
2978   1731 D7            push a
2979   1732 11            mov a, b
2980   1733 FA 05 00      lea d, [bp + 5] ; $num
2981   1736 2A            mov b, [d]
2982   1737 38 00 00      mov c, 0
2983   173A             ; --- START FACTORS
2984   173A D7            push a
2985   173B FD D8         push g
2986   173D 11            mov a, b
2987   173E FD 7A         mov g, c
2988   1740 FD 2E 0A 00   mov32 cb, $0000000a
2988   1744 00 00 
2989   1746 AE            div a, b ; 
2990   1747 11            mov a, b
2991   1748 FD 38         mov c, g
2992   174A 27            mov b, a
2993   174B FD F1         pop g
2994   174D E4            pop a
2995   174E             ; --- END FACTORS
2996   174E 56            add b, a
2997   174F E4            pop a
2998   1750             ; --- END TERMS
2999   1750 E7            pop d
3000   1751 FD 3E         mov [d], bl
3001   1753             ; num = num / 10; 
3002   1753 FA 05 00      lea d, [bp + 5] ; $num
3003   1756 DA            push d
3004   1757 FA 05 00      lea d, [bp + 5] ; $num
3005   175A 2A            mov b, [d]
3006   175B 38 00 00      mov c, 0
3007   175E             ; --- START FACTORS
3008   175E D7            push a
3009   175F FD D8         push g
3010   1761 11            mov a, b
3011   1762 FD 7A         mov g, c
3012   1764 FD 2E 0A 00   mov32 cb, $0000000a
3012   1768 00 00 
3013   176A AE            div a, b
3014   176B FD 38         mov c, g
3015   176D 27            mov b, a
3016   176E FD F1         pop g
3017   1770 E4            pop a
3018   1771             ; --- END FACTORS
3019   1771 E7            pop d
3020   1772 FD 43         mov [d], b
3021   1774             ; i++; 
3022   1774 FA FA FF      lea d, [bp + -6] ; $i
3023   1777 2A            mov b, [d]
3024   1778 38 00 00      mov c, 0
3025   177B 11            mov a, b
3026   177C FD 77         inc b
3027   177E FA FA FF      lea d, [bp + -6] ; $i
3028   1781 FD 43         mov [d], b
3029   1783 27            mov b, a
3030   1784 0A 02 17      jmp _while49_cond
3031   1787             _while49_exit:
3032   1787             ; while (i > 0) { 
3033   1787             _while56_cond:
3034   1787 FA FA FF      lea d, [bp + -6] ; $i
3035   178A 2A            mov b, [d]
3036   178B 38 00 00      mov c, 0
3037   178E             ; --- START RELATIONAL
3038   178E D7            push a
3039   178F 11            mov a, b
3040   1790 FD 2E 00 00   mov32 cb, $00000000
3040   1794 00 00 
3041   1796 B0            cmp a, b
3042   1797 FD 7F         sgt ; >
3043   1799 E4            pop a
3044   179A             ; --- END RELATIONAL
3045   179A C0 00 00      cmp b, 0
3046   179D C6 CF 17      je _while56_exit
3047   17A0             _while56_block:
3048   17A0             ; i--; 
3049   17A0 FA FA FF      lea d, [bp + -6] ; $i
3050   17A3 2A            mov b, [d]
3051   17A4 38 00 00      mov c, 0
3052   17A7 11            mov a, b
3053   17A8 FD 7D         dec b
3054   17AA FA FA FF      lea d, [bp + -6] ; $i
3055   17AD FD 43         mov [d], b
3056   17AF 27            mov b, a
3057   17B0             ; putchar(digits[i]); 
3058   17B0             ; --- START FUNCTION CALL
3059   17B0 FA FC FF      lea d, [bp + -4] ; $digits
3060   17B3 D7            push a
3061   17B4 DA            push d
3062   17B5 FA FA FF      lea d, [bp + -6] ; $i
3063   17B8 2A            mov b, [d]
3064   17B9 38 00 00      mov c, 0
3065   17BC E7            pop d
3066   17BD 5A            add d, b
3067   17BE E4            pop a
3068   17BF 32            mov bl, [d]
3069   17C0 A7 00         mov bh, 0
3070   17C2 38 00 00      mov c, 0
3071   17C5 DD            push bl
3072   17C6 07 C0 14      call putchar
3073   17C9 51 01 00      add sp, 1
3074   17CC             ; --- END FUNCTION CALL
3075   17CC 0A 87 17      jmp _while56_cond
3076   17CF             _while56_exit:
3077   17CF F9            leave
3078   17D0 09            ret
3079   17D1             
3080   17D1             print_unsigned:
3081   17D1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3082   17D4             ; char digits[5]; 
3083   17D4 52 05 00      sub sp, 5
3084   17D7             ; int i; 
3085   17D7 52 02 00      sub sp, 2
3086   17DA             ; i = 0; 
3087   17DA FA FA FF      lea d, [bp + -6] ; $i
3088   17DD DA            push d
3089   17DE FD 2E 00 00   mov32 cb, $00000000
3089   17E2 00 00 
3090   17E4 E7            pop d
3091   17E5 FD 43         mov [d], b
3092   17E7             ; if(num == 0){ 
3093   17E7             _if57_cond:
3094   17E7 FA 05 00      lea d, [bp + 5] ; $num
3095   17EA 2A            mov b, [d]
3096   17EB 38 00 00      mov c, 0
3097   17EE             ; --- START RELATIONAL
3098   17EE D7            push a
3099   17EF 11            mov a, b
3100   17F0 FD 2E 00 00   mov32 cb, $00000000
3100   17F4 00 00 
3101   17F6 B0            cmp a, b
3102   17F7 FD 71         seq ; ==
3103   17F9 E4            pop a
3104   17FA             ; --- END RELATIONAL
3105   17FA C0 00 00      cmp b, 0
3106   17FD C6 12 18      je _if57_exit
3107   1800             _if57_TRUE:
3108   1800             ; putchar('0'); 
3109   1800             ; --- START FUNCTION CALL
3110   1800 FD 2E 30 00   mov32 cb, $00000030
3110   1804 00 00 
3111   1806 DD            push bl
3112   1807 07 C0 14      call putchar
3113   180A 51 01 00      add sp, 1
3114   180D             ; --- END FUNCTION CALL
3115   180D             ; return; 
3116   180D F9            leave
3117   180E 09            ret
3118   180F 0A 12 18      jmp _if57_exit
3119   1812             _if57_exit:
3120   1812             ; while (num > 0) { 
3121   1812             _while58_cond:
3122   1812 FA 05 00      lea d, [bp + 5] ; $num
3123   1815 2A            mov b, [d]
3124   1816 38 00 00      mov c, 0
3125   1819             ; --- START RELATIONAL
3126   1819 D7            push a
3127   181A 11            mov a, b
3128   181B FD 2E 00 00   mov32 cb, $00000000
3128   181F 00 00 
3129   1821 B0            cmp a, b
3130   1822 FD 81         sgu ; > (unsigned)
3131   1824 E4            pop a
3132   1825             ; --- END RELATIONAL
3133   1825 C0 00 00      cmp b, 0
3134   1828 C6 97 18      je _while58_exit
3135   182B             _while58_block:
3136   182B             ; digits[i] = '0' + (num % 10); 
3137   182B FA FC FF      lea d, [bp + -4] ; $digits
3138   182E D7            push a
3139   182F DA            push d
3140   1830 FA FA FF      lea d, [bp + -6] ; $i
3141   1833 2A            mov b, [d]
3142   1834 38 00 00      mov c, 0
3143   1837 E7            pop d
3144   1838 5A            add d, b
3145   1839 E4            pop a
3146   183A DA            push d
3147   183B FD 2E 30 00   mov32 cb, $00000030
3147   183F 00 00 
3148   1841             ; --- START TERMS
3149   1841 D7            push a
3150   1842 11            mov a, b
3151   1843 FA 05 00      lea d, [bp + 5] ; $num
3152   1846 2A            mov b, [d]
3153   1847 38 00 00      mov c, 0
3154   184A             ; --- START FACTORS
3155   184A D7            push a
3156   184B FD D8         push g
3157   184D 11            mov a, b
3158   184E FD 7A         mov g, c
3159   1850 FD 2E 0A 00   mov32 cb, $0000000a
3159   1854 00 00 
3160   1856 AE            div a, b ; 
3161   1857 11            mov a, b
3162   1858 FD 38         mov c, g
3163   185A 27            mov b, a
3164   185B FD F1         pop g
3165   185D E4            pop a
3166   185E             ; --- END FACTORS
3167   185E 56            add b, a
3168   185F E4            pop a
3169   1860             ; --- END TERMS
3170   1860 E7            pop d
3171   1861 FD 3E         mov [d], bl
3172   1863             ; num = num / 10; 
3173   1863 FA 05 00      lea d, [bp + 5] ; $num
3174   1866 DA            push d
3175   1867 FA 05 00      lea d, [bp + 5] ; $num
3176   186A 2A            mov b, [d]
3177   186B 38 00 00      mov c, 0
3178   186E             ; --- START FACTORS
3179   186E D7            push a
3180   186F FD D8         push g
3181   1871 11            mov a, b
3182   1872 FD 7A         mov g, c
3183   1874 FD 2E 0A 00   mov32 cb, $0000000a
3183   1878 00 00 
3184   187A AE            div a, b
3185   187B FD 38         mov c, g
3186   187D 27            mov b, a
3187   187E FD F1         pop g
3188   1880 E4            pop a
3189   1881             ; --- END FACTORS
3190   1881 E7            pop d
3191   1882 FD 43         mov [d], b
3192   1884             ; i++; 
3193   1884 FA FA FF      lea d, [bp + -6] ; $i
3194   1887 2A            mov b, [d]
3195   1888 38 00 00      mov c, 0
3196   188B 11            mov a, b
3197   188C FD 77         inc b
3198   188E FA FA FF      lea d, [bp + -6] ; $i
3199   1891 FD 43         mov [d], b
3200   1893 27            mov b, a
3201   1894 0A 12 18      jmp _while58_cond
3202   1897             _while58_exit:
3203   1897             ; while (i > 0) { 
3204   1897             _while65_cond:
3205   1897 FA FA FF      lea d, [bp + -6] ; $i
3206   189A 2A            mov b, [d]
3207   189B 38 00 00      mov c, 0
3208   189E             ; --- START RELATIONAL
3209   189E D7            push a
3210   189F 11            mov a, b
3211   18A0 FD 2E 00 00   mov32 cb, $00000000
3211   18A4 00 00 
3212   18A6 B0            cmp a, b
3213   18A7 FD 7F         sgt ; >
3214   18A9 E4            pop a
3215   18AA             ; --- END RELATIONAL
3216   18AA C0 00 00      cmp b, 0
3217   18AD C6 DF 18      je _while65_exit
3218   18B0             _while65_block:
3219   18B0             ; i--; 
3220   18B0 FA FA FF      lea d, [bp + -6] ; $i
3221   18B3 2A            mov b, [d]
3222   18B4 38 00 00      mov c, 0
3223   18B7 11            mov a, b
3224   18B8 FD 7D         dec b
3225   18BA FA FA FF      lea d, [bp + -6] ; $i
3226   18BD FD 43         mov [d], b
3227   18BF 27            mov b, a
3228   18C0             ; putchar(digits[i]); 
3229   18C0             ; --- START FUNCTION CALL
3230   18C0 FA FC FF      lea d, [bp + -4] ; $digits
3231   18C3 D7            push a
3232   18C4 DA            push d
3233   18C5 FA FA FF      lea d, [bp + -6] ; $i
3234   18C8 2A            mov b, [d]
3235   18C9 38 00 00      mov c, 0
3236   18CC E7            pop d
3237   18CD 5A            add d, b
3238   18CE E4            pop a
3239   18CF 32            mov bl, [d]
3240   18D0 A7 00         mov bh, 0
3241   18D2 38 00 00      mov c, 0
3242   18D5 DD            push bl
3243   18D6 07 C0 14      call putchar
3244   18D9 51 01 00      add sp, 1
3245   18DC             ; --- END FUNCTION CALL
3246   18DC 0A 97 18      jmp _while65_cond
3247   18DF             _while65_exit:
3248   18DF F9            leave
3249   18E0 09            ret
3250   18E1             
3251   18E1             printx16:
3252   18E1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3253   18E4             ; --- BEGIN INLINE ASM SEGMENT
3254   18E4 FA 05 00      lea d, [bp + 5] ; $hex
3255   18E7 2A            mov b, [d]
3256   18E8             print_u16x_printx16:
3257   18E8 DD            push bl
3258   18E9 30            mov bl, bh
3259   18EA 07 07 19      call _itoa_printx16        ; convert bh to char in A
3260   18ED 2F            mov bl, al        ; save al
3261   18EE 19 00         mov al, 0
3262   18F0 05 03         syscall sys_io        ; display AH
3263   18F2 24            mov ah, bl        ; retrieve al
3264   18F3 19 00         mov al, 0
3265   18F5 05 03         syscall sys_io        ; display AL
3266   18F7 EA            pop bl
3267   18F8 07 07 19      call _itoa_printx16        ; convert bh to char in A
3268   18FB 2F            mov bl, al        ; save al
3269   18FC 19 00         mov al, 0
3270   18FE 05 03         syscall sys_io        ; display AH
3271   1900 24            mov ah, bl        ; retrieve al
3272   1901 19 00         mov al, 0
3273   1903 05 03         syscall sys_io        ; display AL
3274   1905             ; --- END INLINE ASM SEGMENT
3275   1905             ; return; 
3276   1905 F9            leave
3277   1906 09            ret
3278   1907             ; --- BEGIN INLINE ASM SEGMENT
3279   1907             _itoa_printx16:
3280   1907 DA            push d
3281   1908 D8            push b
3282   1909 A7 00         mov bh, 0
3283   190B FD A4 04      shr bl, 4  
3284   190E 74            mov d, b
3285   190F 1F 21 19      mov al, [d + s_hex_digits_printx16]
3286   1912 23            mov ah, al
3287   1913 E5            pop b
3288   1914 D8            push b
3289   1915 A7 00         mov bh, 0
3290   1917 FD 87 0F      and bl, $0F
3291   191A 74            mov d, b
3292   191B 1F 21 19      mov al, [d + s_hex_digits_printx16]
3293   191E E5            pop b
3294   191F E7            pop d
3295   1920 09            ret
3296   1921 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
3296   1925 34 35 36 37 
3296   1929 38 39 41 42 
3296   192D 43 44 45 46 
3297   1931             ; --- END INLINE ASM SEGMENT
3298   1931 F9            leave
3299   1932 09            ret
3300   1933             
3301   1933             gets:
3302   1933 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3303   1936             ; --- BEGIN INLINE ASM SEGMENT
3304   1936 FA 05 00      lea d, [bp + 5] ; $s
3305   1939 15            mov a, [d]
3306   193A 3C            mov d, a
3307   193B 07 50 19      call _gets_gets
3308   193E             ; --- END INLINE ASM SEGMENT
3309   193E             ; return strlen(s); 
3310   193E             ; --- START FUNCTION CALL
3311   193E FA 05 00      lea d, [bp + 5] ; $s
3312   1941 2A            mov b, [d]
3313   1942 38 00 00      mov c, 0
3314   1945 FD AB         swp b
3315   1947 D8            push b
3316   1948 07 F1 19      call strlen
3317   194B 51 02 00      add sp, 2
3318   194E             ; --- END FUNCTION CALL
3319   194E F9            leave
3320   194F 09            ret
3321   1950             ; --- BEGIN INLINE ASM SEGMENT
3322   1950             _gets_gets:
3323   1950 D7            push a
3324   1951 DA            push d
3325   1952             _gets_loop_gets:
3326   1952 19 01         mov al, 1
3327   1954 05 03         syscall sys_io      ; receive in AH
3328   1956 B9 00         cmp al, 0        ; check error code (AL)
3329   1958 C6 52 19      je _gets_loop_gets      ; if no char received, retry
3330   195B 76 1B         cmp ah, 27
3331   195D C6 7E 19      je _gets_ansi_esc_gets
3332   1960 76 0A         cmp ah, $0A        ; LF
3333   1962 C6 E9 19      je _gets_end_gets
3334   1965 76 0D         cmp ah, $0D        ; CR
3335   1967 C6 E9 19      je _gets_end_gets
3336   196A 76 5C         cmp ah, $5C        ; '\\'
3337   196C C6 AA 19      je _gets_escape_gets
3338   196F 76 08         cmp ah, $08      ; check for backspace
3339   1971 C6 7A 19      je _gets_backspace_gets
3340   1974 1A            mov al, ah
3341   1975 3E            mov [d], al
3342   1976 79            inc d
3343   1977 0A 52 19      jmp _gets_loop_gets
3344   197A             _gets_backspace_gets:
3345   197A 7F            dec d
3346   197B 0A 52 19      jmp _gets_loop_gets
3347   197E             _gets_ansi_esc_gets:
3348   197E 19 01         mov al, 1
3349   1980 05 03         syscall sys_io        ; receive in AH without echo
3350   1982 B9 00         cmp al, 0          ; check error code (AL)
3351   1984 C6 7E 19      je _gets_ansi_esc_gets    ; if no char received, retry
3352   1987 76 5B         cmp ah, '['
3353   1989 C7 52 19      jne _gets_loop_gets
3354   198C             _gets_ansi_esc_2_gets:
3355   198C 19 01         mov al, 1
3356   198E 05 03         syscall sys_io          ; receive in AH without echo
3357   1990 B9 00         cmp al, 0            ; check error code (AL)
3358   1992 C6 8C 19      je _gets_ansi_esc_2_gets  ; if no char received, retry
3359   1995 76 44         cmp ah, 'D'
3360   1997 C6 A2 19      je _gets_left_arrow_gets
3361   199A 76 43         cmp ah, 'C'
3362   199C C6 A6 19      je _gets_right_arrow_gets
3363   199F 0A 52 19      jmp _gets_loop_gets
3364   19A2             _gets_left_arrow_gets:
3365   19A2 7F            dec d
3366   19A3 0A 52 19      jmp _gets_loop_gets
3367   19A6             _gets_right_arrow_gets:
3368   19A6 79            inc d
3369   19A7 0A 52 19      jmp _gets_loop_gets
3370   19AA             _gets_escape_gets:
3371   19AA 19 01         mov al, 1
3372   19AC 05 03         syscall sys_io      ; receive in AH
3373   19AE B9 00         cmp al, 0        ; check error code (AL)
3374   19B0 C6 AA 19      je _gets_escape_gets      ; if no char received, retry
3375   19B3 76 6E         cmp ah, 'n'
3376   19B5 C6 D4 19      je _gets_LF_gets
3377   19B8 76 72         cmp ah, 'r'
3378   19BA C6 DB 19      je _gets_CR_gets
3379   19BD 76 30         cmp ah, '0'
3380   19BF C6 E2 19      je _gets_NULL_gets
3381   19C2 76 5C         cmp ah, $5C  
3382   19C4 C6 CD 19      je _gets_slash_gets
3383   19C7 1A            mov al, ah        ; if not a known escape, it is just a normal letter
3384   19C8 3E            mov [d], al
3385   19C9 79            inc d
3386   19CA 0A 52 19      jmp _gets_loop_gets
3387   19CD             _gets_slash_gets:
3388   19CD 19 5C         mov al, $5C
3389   19CF 3E            mov [d], al
3390   19D0 79            inc d
3391   19D1 0A 52 19      jmp _gets_loop_gets
3392   19D4             _gets_LF_gets:
3393   19D4 19 0A         mov al, $0A
3394   19D6 3E            mov [d], al
3395   19D7 79            inc d
3396   19D8 0A 52 19      jmp _gets_loop_gets
3397   19DB             _gets_CR_gets:
3398   19DB 19 0D         mov al, $0D
3399   19DD 3E            mov [d], al
3400   19DE 79            inc d
3401   19DF 0A 52 19      jmp _gets_loop_gets
3402   19E2             _gets_NULL_gets:
3403   19E2 19 00         mov al, $00
3404   19E4 3E            mov [d], al
3405   19E5 79            inc d
3406   19E6 0A 52 19      jmp _gets_loop_gets
3407   19E9             _gets_end_gets:
3408   19E9 19 00         mov al, 0
3409   19EB 3E            mov [d], al        ; terminate string
3410   19EC E7            pop d
3411   19ED E4            pop a
3412   19EE 09            ret
3413   19EF             ; --- END INLINE ASM SEGMENT
3414   19EF F9            leave
3415   19F0 09            ret
3416   19F1             
3417   19F1             strlen:
3418   19F1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3419   19F4             ; int length; 
3420   19F4 52 02 00      sub sp, 2
3421   19F7             ; length = 0; 
3422   19F7 FA FF FF      lea d, [bp + -1] ; $length
3423   19FA DA            push d
3424   19FB FD 2E 00 00   mov32 cb, $00000000
3424   19FF 00 00 
3425   1A01 E7            pop d
3426   1A02 FD 43         mov [d], b
3427   1A04             ; while (str[length] != 0) { 
3428   1A04             _while66_cond:
3429   1A04 FA 05 00      lea d, [bp + 5] ; $str
3430   1A07 FD 2A         mov d, [d]
3431   1A09 D7            push a
3432   1A0A DA            push d
3433   1A0B FA FF FF      lea d, [bp + -1] ; $length
3434   1A0E 2A            mov b, [d]
3435   1A0F 38 00 00      mov c, 0
3436   1A12 E7            pop d
3437   1A13 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3438   1A17 E4            pop a
3439   1A18 32            mov bl, [d]
3440   1A19 A7 00         mov bh, 0
3441   1A1B 38 00 00      mov c, 0
3442   1A1E             ; --- START RELATIONAL
3443   1A1E D7            push a
3444   1A1F 11            mov a, b
3445   1A20 FD 2E 00 00   mov32 cb, $00000000
3445   1A24 00 00 
3446   1A26 B0            cmp a, b
3447   1A27 FD 72         sneq ; !=
3448   1A29 E4            pop a
3449   1A2A             ; --- END RELATIONAL
3450   1A2A C0 00 00      cmp b, 0
3451   1A2D C6 43 1A      je _while66_exit
3452   1A30             _while66_block:
3453   1A30             ; length++; 
3454   1A30 FA FF FF      lea d, [bp + -1] ; $length
3455   1A33 2A            mov b, [d]
3456   1A34 38 00 00      mov c, 0
3457   1A37 11            mov a, b
3458   1A38 FD 77         inc b
3459   1A3A FA FF FF      lea d, [bp + -1] ; $length
3460   1A3D FD 43         mov [d], b
3461   1A3F 27            mov b, a
3462   1A40 0A 04 1A      jmp _while66_cond
3463   1A43             _while66_exit:
3464   1A43             ; return length; 
3465   1A43 FA FF FF      lea d, [bp + -1] ; $length
3466   1A46 2A            mov b, [d]
3467   1A47 38 00 00      mov c, 0
3468   1A4A F9            leave
3469   1A4B 09            ret
3470   1A4C             ; --- END TEXT SEGMENT
3471   1A4C             
3472   1A4C             ; --- BEGIN DATA SEGMENT
3473   1A4C 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
3473   1A50 45 46 47 48 
3473   1A54 49 4A 4B 4C 
3473   1A58 4D 4E 4F 50 
3473   1A5C 51 52 53 54 
3473   1A60 55 56 57 58 
3473   1A64 59 5A 61 62 
3473   1A68 63 64 65 66 
3473   1A6C 67 68 69 6A 
3473   1A70 6B 6C 6D 6E 
3473   1A74 6F 70 71 72 
3473   1A78 73 74 75 76 
3473   1A7C 77 78 79 7A 
3473   1A80 30 31 32 33 
3473   1A84 34 35 36 37 
3473   1A88 38 39 2B 2F 
3473   1A8C 00 
3474   1A8D 4C 1A       _base64_table: .dw _base64_table_data
3475   1A8F 0A 45 6E 74 _s0: .db "\nEnter a base64 encoded string to decode: ", 0
3475   1A93 65 72 20 61 
3475   1A97 20 62 61 73 
3475   1A9B 65 36 34 20 
3475   1A9F 65 6E 63 6F 
3475   1AA3 64 65 64 20 
3475   1AA7 73 74 72 69 
3475   1AAB 6E 67 20 74 
3475   1AAF 6F 20 64 65 
3475   1AB3 63 6F 64 65 
3475   1AB7 3A 20 00 
3476   1ABA 0A 45 6E 63 _s1: .db "\nEncoded string: %s\n", 0
3476   1ABE 6F 64 65 64 
3476   1AC2 20 73 74 72 
3476   1AC6 69 6E 67 3A 
3476   1ACA 20 25 73 0A 
3476   1ACE 00 
3477   1ACF 0A 44 65 63 _s2: .db "\nDecoded string: %s\n", 0
3477   1AD3 6F 64 65 64 
3477   1AD7 20 73 74 72 
3477   1ADB 69 6E 67 3A 
3477   1ADF 20 25 73 0A 
3477   1AE3 00 
3478   1AE4 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
3478   1AE8 70 65 63 74 
3478   1AEC 65 64 20 66 
3478   1AF0 6F 72 6D 61 
3478   1AF4 74 20 69 6E 
3478   1AF8 20 70 72 69 
3478   1AFC 6E 74 66 2E 
3478   1B00 00 
3479   1B01 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
3479   1B05 72 3A 20 55 
3479   1B09 6E 6B 6E 6F 
3479   1B0D 77 6E 20 61 
3479   1B11 72 67 75 6D 
3479   1B15 65 6E 74 20 
3479   1B19 74 79 70 65 
3479   1B1D 2E 0A 00 
3480   1B20             
3481   1B20 22 1B       _heap_top: .dw _heap
3482   1B22 00          _heap: .db 0
3483   1B23             ; --- END DATA SEGMENT
3484   1B23             
3485   1B23             .end
tasm: Number of errors = 0
