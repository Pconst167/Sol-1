0001   0000             ; --- FILENAME: programs/base64.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; char input[512]; 
0011   0408 52 00 02      sub sp, 512
0012   040B             ; char output[256]; 
0013   040B 52 00 01      sub sp, 256
0014   040E             ; printf("\nEnter a base64 encoded string to decode: "); 
0015   040E             ; --- START FUNCTION CALL
0016   040E 26 C4 2D      mov b, _s0 ; "\nEnter a base64 encoded string to decode: "
0017   0411 FD AB         swp b
0018   0413 D8            push b
0019   0414 07 BE 09      call printf
0020   0417 51 02 00      add sp, 2
0021   041A             ; --- END FUNCTION CALL
0022   041A             ; gets(input); 
0023   041A             ; --- START FUNCTION CALL
0024   041A FA 01 FE      lea d, [bp + -511] ; $input
0025   041D 2D            mov b, d
0026   041E 38 00 00      mov c, 0
0027   0421 FD AB         swp b
0028   0423 D8            push b
0029   0424 07 16 15      call gets
0030   0427 51 02 00      add sp, 2
0031   042A             ; --- END FUNCTION CALL
0032   042A             ; base64_encode(input, output); 
0033   042A             ; --- START FUNCTION CALL
0034   042A FA 01 FD      lea d, [bp + -767] ; $output
0035   042D 2D            mov b, d
0036   042E 38 00 00      mov c, 0
0037   0431 FD AB         swp b
0038   0433 D8            push b
0039   0434 FA 01 FE      lea d, [bp + -511] ; $input
0040   0437 2D            mov b, d
0041   0438 38 00 00      mov c, 0
0042   043B FD AB         swp b
0043   043D D8            push b
0044   043E 07 C8 21      call base64_encode
0045   0441 51 04 00      add sp, 4
0046   0444             ; --- END FUNCTION CALL
0047   0444             ; printf("\nEncoded string: %s\n", output); 
0048   0444             ; --- START FUNCTION CALL
0049   0444 FA 01 FD      lea d, [bp + -767] ; $output
0050   0447 2D            mov b, d
0051   0448 38 00 00      mov c, 0
0052   044B FD AB         swp b
0053   044D D8            push b
0054   044E 26 EF 2D      mov b, _s1 ; "\nEncoded string: %s\n"
0055   0451 FD AB         swp b
0056   0453 D8            push b
0057   0454 07 BE 09      call printf
0058   0457 51 04 00      add sp, 4
0059   045A             ; --- END FUNCTION CALL
0060   045A             ; base64_decode(output, input); 
0061   045A             ; --- START FUNCTION CALL
0062   045A FA 01 FE      lea d, [bp + -511] ; $input
0063   045D 2D            mov b, d
0064   045E 38 00 00      mov c, 0
0065   0461 FD AB         swp b
0066   0463 D8            push b
0067   0464 FA 01 FD      lea d, [bp + -767] ; $output
0068   0467 2D            mov b, d
0069   0468 38 00 00      mov c, 0
0070   046B FD AB         swp b
0071   046D D8            push b
0072   046E 07 19 28      call base64_decode
0073   0471 51 04 00      add sp, 4
0074   0474             ; --- END FUNCTION CALL
0075   0474             ; printf("\nDecoded string: %s\n", input); 
0076   0474             ; --- START FUNCTION CALL
0077   0474 FA 01 FE      lea d, [bp + -511] ; $input
0078   0477 2D            mov b, d
0079   0478 38 00 00      mov c, 0
0080   047B FD AB         swp b
0081   047D D8            push b
0082   047E 26 04 2E      mov b, _s2 ; "\nDecoded string: %s\n"
0083   0481 FD AB         swp b
0084   0483 D8            push b
0085   0484 07 BE 09      call printf
0086   0487 51 04 00      add sp, 4
0087   048A             ; --- END FUNCTION CALL
0088   048A             ; return 0; 
0089   048A FD 2E 00 00   mov32 cb, $00000000
0089   048E 00 00 
0090   0490 F9            leave
0091   0491 05 0B         syscall sys_terminate_proc
0092   0493             
0093   0493             strcpy:
0094   0493 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0095   0496             ; char *psrc; 
0096   0496 52 02 00      sub sp, 2
0097   0499             ; char *pdest; 
0098   0499 52 02 00      sub sp, 2
0099   049C             ; psrc = src; 
0100   049C FA FF FF      lea d, [bp + -1] ; $psrc
0101   049F DA            push d
0102   04A0 FA 07 00      lea d, [bp + 7] ; $src
0103   04A3 2A            mov b, [d]
0104   04A4 38 00 00      mov c, 0
0105   04A7 E7            pop d
0106   04A8 FD 43         mov [d], b
0107   04AA             ; pdest = dest; 
0108   04AA FA FD FF      lea d, [bp + -3] ; $pdest
0109   04AD DA            push d
0110   04AE FA 05 00      lea d, [bp + 5] ; $dest
0111   04B1 2A            mov b, [d]
0112   04B2 38 00 00      mov c, 0
0113   04B5 E7            pop d
0114   04B6 FD 43         mov [d], b
0115   04B8             ; while(*psrc) *pdest++ = *psrc++; 
0116   04B8             _while1_cond:
0117   04B8 FA FF FF      lea d, [bp + -1] ; $psrc
0118   04BB 2A            mov b, [d]
0119   04BC 38 00 00      mov c, 0
0120   04BF 74            mov d, b
0121   04C0 32            mov bl, [d]
0122   04C1 A7 00         mov bh, 0
0123   04C3 38 00 00      mov c, 0
0124   04C6 C0 00 00      cmp b, 0
0125   04C9 C6 FA 04      je _while1_exit
0126   04CC             _while1_block:
0127   04CC             ; *pdest++ = *psrc++; 
0128   04CC FA FD FF      lea d, [bp + -3] ; $pdest
0129   04CF 2A            mov b, [d]
0130   04D0 38 00 00      mov c, 0
0131   04D3 FD 77         inc b
0132   04D5 FA FD FF      lea d, [bp + -3] ; $pdest
0133   04D8 FD 43         mov [d], b
0134   04DA FD 7D         dec b
0135   04DC D8            push b
0136   04DD FA FF FF      lea d, [bp + -1] ; $psrc
0137   04E0 2A            mov b, [d]
0138   04E1 38 00 00      mov c, 0
0139   04E4 FD 77         inc b
0140   04E6 FA FF FF      lea d, [bp + -1] ; $psrc
0141   04E9 FD 43         mov [d], b
0142   04EB FD 7D         dec b
0143   04ED 74            mov d, b
0144   04EE 32            mov bl, [d]
0145   04EF A7 00         mov bh, 0
0146   04F1 38 00 00      mov c, 0
0147   04F4 E7            pop d
0148   04F5 FD 3E         mov [d], bl
0149   04F7 0A B8 04      jmp _while1_cond
0150   04FA             _while1_exit:
0151   04FA             ; *pdest = '\0'; 
0152   04FA FA FD FF      lea d, [bp + -3] ; $pdest
0153   04FD 2A            mov b, [d]
0154   04FE 38 00 00      mov c, 0
0155   0501 D8            push b
0156   0502 FD 2E 00 00   mov32 cb, $00000000
0156   0506 00 00 
0157   0508 E7            pop d
0158   0509 FD 3E         mov [d], bl
0159   050B F9            leave
0160   050C 09            ret
0161   050D             
0162   050D             strcmp:
0163   050D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0164   0510             ; while (*s1 && (*s1 == *s2)) { 
0165   0510             _while2_cond:
0166   0510 FA 05 00      lea d, [bp + 5] ; $s1
0167   0513 2A            mov b, [d]
0168   0514 38 00 00      mov c, 0
0169   0517 74            mov d, b
0170   0518 32            mov bl, [d]
0171   0519 A7 00         mov bh, 0
0172   051B 38 00 00      mov c, 0
0173   051E             ; --- START LOGICAL AND
0174   051E D7            push a
0175   051F 11            mov a, b
0176   0520 FA 05 00      lea d, [bp + 5] ; $s1
0177   0523 2A            mov b, [d]
0178   0524 38 00 00      mov c, 0
0179   0527 74            mov d, b
0180   0528 32            mov bl, [d]
0181   0529 A7 00         mov bh, 0
0182   052B 38 00 00      mov c, 0
0183   052E             ; --- START RELATIONAL
0184   052E D7            push a
0185   052F 11            mov a, b
0186   0530 FA 07 00      lea d, [bp + 7] ; $s2
0187   0533 2A            mov b, [d]
0188   0534 38 00 00      mov c, 0
0189   0537 74            mov d, b
0190   0538 32            mov bl, [d]
0191   0539 A7 00         mov bh, 0
0192   053B 38 00 00      mov c, 0
0193   053E B0            cmp a, b
0194   053F FD 71         seq ; ==
0195   0541 E4            pop a
0196   0542             ; --- END RELATIONAL
0197   0542 FD A7         sand a, b
0198   0544 E4            pop a
0199   0545             ; --- END LOGICAL AND
0200   0545 C0 00 00      cmp b, 0
0201   0548 C6 6E 05      je _while2_exit
0202   054B             _while2_block:
0203   054B             ; s1++; 
0204   054B FA 05 00      lea d, [bp + 5] ; $s1
0205   054E 2A            mov b, [d]
0206   054F 38 00 00      mov c, 0
0207   0552 FD 77         inc b
0208   0554 FA 05 00      lea d, [bp + 5] ; $s1
0209   0557 FD 43         mov [d], b
0210   0559 FD 7D         dec b
0211   055B             ; s2++; 
0212   055B FA 07 00      lea d, [bp + 7] ; $s2
0213   055E 2A            mov b, [d]
0214   055F 38 00 00      mov c, 0
0215   0562 FD 77         inc b
0216   0564 FA 07 00      lea d, [bp + 7] ; $s2
0217   0567 FD 43         mov [d], b
0218   0569 FD 7D         dec b
0219   056B 0A 10 05      jmp _while2_cond
0220   056E             _while2_exit:
0221   056E             ; return *s1 - *s2; 
0222   056E FA 05 00      lea d, [bp + 5] ; $s1
0223   0571 2A            mov b, [d]
0224   0572 38 00 00      mov c, 0
0225   0575 74            mov d, b
0226   0576 32            mov bl, [d]
0227   0577 A7 00         mov bh, 0
0228   0579 38 00 00      mov c, 0
0229   057C             ; --- START TERMS
0230   057C D7            push a
0231   057D 11            mov a, b
0232   057E FA 07 00      lea d, [bp + 7] ; $s2
0233   0581 2A            mov b, [d]
0234   0582 38 00 00      mov c, 0
0235   0585 74            mov d, b
0236   0586 32            mov bl, [d]
0237   0587 A7 00         mov bh, 0
0238   0589 38 00 00      mov c, 0
0239   058C 60            sub a, b
0240   058D 27            mov b, a
0241   058E E4            pop a
0242   058F             ; --- END TERMS
0243   058F F9            leave
0244   0590 09            ret
0245   0591             
0246   0591             strncmp:
0247   0591 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0248   0594 F9            leave
0249   0595 09            ret
0250   0596             
0251   0596             strcat:
0252   0596 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0253   0599             ; int dest_len; 
0254   0599 52 02 00      sub sp, 2
0255   059C             ; int i; 
0256   059C 52 02 00      sub sp, 2
0257   059F             ; dest_len = strlen(dest); 
0258   059F FA FF FF      lea d, [bp + -1] ; $dest_len
0259   05A2 DA            push d
0260   05A3             ; --- START FUNCTION CALL
0261   05A3 FA 05 00      lea d, [bp + 5] ; $dest
0262   05A6 2A            mov b, [d]
0263   05A7 38 00 00      mov c, 0
0264   05AA FD AB         swp b
0265   05AC D8            push b
0266   05AD 07 79 06      call strlen
0267   05B0 51 02 00      add sp, 2
0268   05B3             ; --- END FUNCTION CALL
0269   05B3 E7            pop d
0270   05B4 FD 43         mov [d], b
0271   05B6             ; for (i = 0; src[i] != 0; i=i+1) { 
0272   05B6             _for3_init:
0273   05B6 FA FD FF      lea d, [bp + -3] ; $i
0274   05B9 DA            push d
0275   05BA FD 2E 00 00   mov32 cb, $00000000
0275   05BE 00 00 
0276   05C0 E7            pop d
0277   05C1 FD 43         mov [d], b
0278   05C3             _for3_cond:
0279   05C3 FA 07 00      lea d, [bp + 7] ; $src
0280   05C6 FD 2A         mov d, [d]
0281   05C8 D7            push a
0282   05C9 DA            push d
0283   05CA FA FD FF      lea d, [bp + -3] ; $i
0284   05CD 2A            mov b, [d]
0285   05CE 38 00 00      mov c, 0
0286   05D1 E7            pop d
0287   05D2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0288   05D6 E4            pop a
0289   05D7 32            mov bl, [d]
0290   05D8 A7 00         mov bh, 0
0291   05DA 38 00 00      mov c, 0
0292   05DD             ; --- START RELATIONAL
0293   05DD D7            push a
0294   05DE 11            mov a, b
0295   05DF FD 2E 00 00   mov32 cb, $00000000
0295   05E3 00 00 
0296   05E5 B0            cmp a, b
0297   05E6 FD 72         sneq ; !=
0298   05E8 E4            pop a
0299   05E9             ; --- END RELATIONAL
0300   05E9 C0 00 00      cmp b, 0
0301   05EC C6 47 06      je _for3_exit
0302   05EF             _for3_block:
0303   05EF             ; dest[dest_len + i] = src[i]; 
0304   05EF FA 05 00      lea d, [bp + 5] ; $dest
0305   05F2 FD 2A         mov d, [d]
0306   05F4 D7            push a
0307   05F5 DA            push d
0308   05F6 FA FF FF      lea d, [bp + -1] ; $dest_len
0309   05F9 2A            mov b, [d]
0310   05FA 38 00 00      mov c, 0
0311   05FD             ; --- START TERMS
0312   05FD D7            push a
0313   05FE 11            mov a, b
0314   05FF FA FD FF      lea d, [bp + -3] ; $i
0315   0602 2A            mov b, [d]
0316   0603 38 00 00      mov c, 0
0317   0606 56            add b, a
0318   0607 E4            pop a
0319   0608             ; --- END TERMS
0320   0608 E7            pop d
0321   0609 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0322   060D E4            pop a
0323   060E DA            push d
0324   060F FA 07 00      lea d, [bp + 7] ; $src
0325   0612 FD 2A         mov d, [d]
0326   0614 D7            push a
0327   0615 DA            push d
0328   0616 FA FD FF      lea d, [bp + -3] ; $i
0329   0619 2A            mov b, [d]
0330   061A 38 00 00      mov c, 0
0331   061D E7            pop d
0332   061E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0333   0622 E4            pop a
0334   0623 32            mov bl, [d]
0335   0624 A7 00         mov bh, 0
0336   0626 38 00 00      mov c, 0
0337   0629 E7            pop d
0338   062A FD 3E         mov [d], bl
0339   062C             _for3_update:
0340   062C FA FD FF      lea d, [bp + -3] ; $i
0341   062F DA            push d
0342   0630 FA FD FF      lea d, [bp + -3] ; $i
0343   0633 2A            mov b, [d]
0344   0634 38 00 00      mov c, 0
0345   0637             ; --- START TERMS
0346   0637 D7            push a
0347   0638 11            mov a, b
0348   0639 FD 2E 01 00   mov32 cb, $00000001
0348   063D 00 00 
0349   063F 56            add b, a
0350   0640 E4            pop a
0351   0641             ; --- END TERMS
0352   0641 E7            pop d
0353   0642 FD 43         mov [d], b
0354   0644 0A C3 05      jmp _for3_cond
0355   0647             _for3_exit:
0356   0647             ; dest[dest_len + i] = 0; 
0357   0647 FA 05 00      lea d, [bp + 5] ; $dest
0358   064A FD 2A         mov d, [d]
0359   064C D7            push a
0360   064D DA            push d
0361   064E FA FF FF      lea d, [bp + -1] ; $dest_len
0362   0651 2A            mov b, [d]
0363   0652 38 00 00      mov c, 0
0364   0655             ; --- START TERMS
0365   0655 D7            push a
0366   0656 11            mov a, b
0367   0657 FA FD FF      lea d, [bp + -3] ; $i
0368   065A 2A            mov b, [d]
0369   065B 38 00 00      mov c, 0
0370   065E 56            add b, a
0371   065F E4            pop a
0372   0660             ; --- END TERMS
0373   0660 E7            pop d
0374   0661 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0375   0665 E4            pop a
0376   0666 DA            push d
0377   0667 FD 2E 00 00   mov32 cb, $00000000
0377   066B 00 00 
0378   066D E7            pop d
0379   066E FD 3E         mov [d], bl
0380   0670             ; return dest; 
0381   0670 FA 05 00      lea d, [bp + 5] ; $dest
0382   0673 2A            mov b, [d]
0383   0674 38 00 00      mov c, 0
0384   0677 F9            leave
0385   0678 09            ret
0386   0679             
0387   0679             strlen:
0388   0679 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0389   067C             ; int length; 
0390   067C 52 02 00      sub sp, 2
0391   067F             ; length = 0; 
0392   067F FA FF FF      lea d, [bp + -1] ; $length
0393   0682 DA            push d
0394   0683 FD 2E 00 00   mov32 cb, $00000000
0394   0687 00 00 
0395   0689 E7            pop d
0396   068A FD 43         mov [d], b
0397   068C             ; while (str[length] != 0) { 
0398   068C             _while4_cond:
0399   068C FA 05 00      lea d, [bp + 5] ; $str
0400   068F FD 2A         mov d, [d]
0401   0691 D7            push a
0402   0692 DA            push d
0403   0693 FA FF FF      lea d, [bp + -1] ; $length
0404   0696 2A            mov b, [d]
0405   0697 38 00 00      mov c, 0
0406   069A E7            pop d
0407   069B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0408   069F E4            pop a
0409   06A0 32            mov bl, [d]
0410   06A1 A7 00         mov bh, 0
0411   06A3 38 00 00      mov c, 0
0412   06A6             ; --- START RELATIONAL
0413   06A6 D7            push a
0414   06A7 11            mov a, b
0415   06A8 FD 2E 00 00   mov32 cb, $00000000
0415   06AC 00 00 
0416   06AE B0            cmp a, b
0417   06AF FD 72         sneq ; !=
0418   06B1 E4            pop a
0419   06B2             ; --- END RELATIONAL
0420   06B2 C0 00 00      cmp b, 0
0421   06B5 C6 CB 06      je _while4_exit
0422   06B8             _while4_block:
0423   06B8             ; length++; 
0424   06B8 FA FF FF      lea d, [bp + -1] ; $length
0425   06BB 2A            mov b, [d]
0426   06BC 38 00 00      mov c, 0
0427   06BF FD 77         inc b
0428   06C1 FA FF FF      lea d, [bp + -1] ; $length
0429   06C4 FD 43         mov [d], b
0430   06C6 FD 7D         dec b
0431   06C8 0A 8C 06      jmp _while4_cond
0432   06CB             _while4_exit:
0433   06CB             ; return length; 
0434   06CB FA FF FF      lea d, [bp + -1] ; $length
0435   06CE 2A            mov b, [d]
0436   06CF 38 00 00      mov c, 0
0437   06D2 F9            leave
0438   06D3 09            ret
0439   06D4             
0440   06D4             exit:
0441   06D4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0442   06D7             
0443   06D7             ; --- BEGIN INLINE ASM SEGMENT
0444   06D7 05 0B         syscall sys_terminate_proc
0445   06D9             ; --- END INLINE ASM SEGMENT
0446   06D9             
0447   06D9 F9            leave
0448   06DA 09            ret
0449   06DB             
0450   06DB             memset:
0451   06DB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0452   06DE             ; int i; 
0453   06DE 52 02 00      sub sp, 2
0454   06E1             ; for(i = 0; i < size; i++){ 
0455   06E1             _for5_init:
0456   06E1 FA FF FF      lea d, [bp + -1] ; $i
0457   06E4 DA            push d
0458   06E5 FD 2E 00 00   mov32 cb, $00000000
0458   06E9 00 00 
0459   06EB E7            pop d
0460   06EC FD 43         mov [d], b
0461   06EE             _for5_cond:
0462   06EE FA FF FF      lea d, [bp + -1] ; $i
0463   06F1 2A            mov b, [d]
0464   06F2 38 00 00      mov c, 0
0465   06F5             ; --- START RELATIONAL
0466   06F5 D7            push a
0467   06F6 11            mov a, b
0468   06F7 FA 08 00      lea d, [bp + 8] ; $size
0469   06FA 2A            mov b, [d]
0470   06FB 38 00 00      mov c, 0
0471   06FE B0            cmp a, b
0472   06FF FD 73         slt ; < (signed)
0473   0701 E4            pop a
0474   0702             ; --- END RELATIONAL
0475   0702 C0 00 00      cmp b, 0
0476   0705 C6 3A 07      je _for5_exit
0477   0708             _for5_block:
0478   0708             ; *(s+i) = c; 
0479   0708 FA 05 00      lea d, [bp + 5] ; $s
0480   070B 2A            mov b, [d]
0481   070C 38 00 00      mov c, 0
0482   070F             ; --- START TERMS
0483   070F D7            push a
0484   0710 11            mov a, b
0485   0711 FA FF FF      lea d, [bp + -1] ; $i
0486   0714 2A            mov b, [d]
0487   0715 38 00 00      mov c, 0
0488   0718 56            add b, a
0489   0719 E4            pop a
0490   071A             ; --- END TERMS
0491   071A D8            push b
0492   071B FA 07 00      lea d, [bp + 7] ; $c
0493   071E 32            mov bl, [d]
0494   071F A7 00         mov bh, 0
0495   0721 38 00 00      mov c, 0
0496   0724 E7            pop d
0497   0725 FD 3E         mov [d], bl
0498   0727             _for5_update:
0499   0727 FA FF FF      lea d, [bp + -1] ; $i
0500   072A 2A            mov b, [d]
0501   072B 38 00 00      mov c, 0
0502   072E FD 77         inc b
0503   0730 FA FF FF      lea d, [bp + -1] ; $i
0504   0733 FD 43         mov [d], b
0505   0735 FD 7D         dec b
0506   0737 0A EE 06      jmp _for5_cond
0507   073A             _for5_exit:
0508   073A             ; return s; 
0509   073A FA 05 00      lea d, [bp + 5] ; $s
0510   073D 2A            mov b, [d]
0511   073E 38 00 00      mov c, 0
0512   0741 F9            leave
0513   0742 09            ret
0514   0743             
0515   0743             atoi:
0516   0743 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0517   0746             ; int result = 0;  // Initialize result 
0518   0746 52 02 00      sub sp, 2
0519   0749             ; --- START LOCAL VAR INITIALIZATION
0520   0749 FA FF FF      lea d, [bp + -1] ; $result
0521   074C DA            push d
0522   074D FD 2E 00 00   mov32 cb, $00000000
0522   0751 00 00 
0523   0753 E7            pop d
0524   0754 FD 43         mov [d], b
0525   0756             ; --- END LOCAL VAR INITIALIZATION
0526   0756             ; int sign = 1;    // Initialize sign as positive 
0527   0756 52 02 00      sub sp, 2
0528   0759             ; --- START LOCAL VAR INITIALIZATION
0529   0759 FA FD FF      lea d, [bp + -3] ; $sign
0530   075C DA            push d
0531   075D FD 2E 01 00   mov32 cb, $00000001
0531   0761 00 00 
0532   0763 E7            pop d
0533   0764 FD 43         mov [d], b
0534   0766             ; --- END LOCAL VAR INITIALIZATION
0535   0766             ; while (*str == ' ') str++; 
0536   0766             _while6_cond:
0537   0766 FA 05 00      lea d, [bp + 5] ; $str
0538   0769 2A            mov b, [d]
0539   076A 38 00 00      mov c, 0
0540   076D 74            mov d, b
0541   076E 32            mov bl, [d]
0542   076F A7 00         mov bh, 0
0543   0771 38 00 00      mov c, 0
0544   0774             ; --- START RELATIONAL
0545   0774 D7            push a
0546   0775 11            mov a, b
0547   0776 FD 2E 20 00   mov32 cb, $00000020
0547   077A 00 00 
0548   077C B0            cmp a, b
0549   077D FD 71         seq ; ==
0550   077F E4            pop a
0551   0780             ; --- END RELATIONAL
0552   0780 C0 00 00      cmp b, 0
0553   0783 C6 99 07      je _while6_exit
0554   0786             _while6_block:
0555   0786             ; str++; 
0556   0786 FA 05 00      lea d, [bp + 5] ; $str
0557   0789 2A            mov b, [d]
0558   078A 38 00 00      mov c, 0
0559   078D FD 77         inc b
0560   078F FA 05 00      lea d, [bp + 5] ; $str
0561   0792 FD 43         mov [d], b
0562   0794 FD 7D         dec b
0563   0796 0A 66 07      jmp _while6_cond
0564   0799             _while6_exit:
0565   0799             ; if (*str == '-' || *str == '+') { 
0566   0799             _if7_cond:
0567   0799 FA 05 00      lea d, [bp + 5] ; $str
0568   079C 2A            mov b, [d]
0569   079D 38 00 00      mov c, 0
0570   07A0 74            mov d, b
0571   07A1 32            mov bl, [d]
0572   07A2 A7 00         mov bh, 0
0573   07A4 38 00 00      mov c, 0
0574   07A7             ; --- START RELATIONAL
0575   07A7 D7            push a
0576   07A8 11            mov a, b
0577   07A9 FD 2E 2D 00   mov32 cb, $0000002d
0577   07AD 00 00 
0578   07AF B0            cmp a, b
0579   07B0 FD 71         seq ; ==
0580   07B2 E4            pop a
0581   07B3             ; --- END RELATIONAL
0582   07B3             ; --- START LOGICAL OR
0583   07B3 D7            push a
0584   07B4 11            mov a, b
0585   07B5 FA 05 00      lea d, [bp + 5] ; $str
0586   07B8 2A            mov b, [d]
0587   07B9 38 00 00      mov c, 0
0588   07BC 74            mov d, b
0589   07BD 32            mov bl, [d]
0590   07BE A7 00         mov bh, 0
0591   07C0 38 00 00      mov c, 0
0592   07C3             ; --- START RELATIONAL
0593   07C3 D7            push a
0594   07C4 11            mov a, b
0595   07C5 FD 2E 2B 00   mov32 cb, $0000002b
0595   07C9 00 00 
0596   07CB B0            cmp a, b
0597   07CC FD 71         seq ; ==
0598   07CE E4            pop a
0599   07CF             ; --- END RELATIONAL
0600   07CF FD A8         sor a, b ; ||
0601   07D1 E4            pop a
0602   07D2             ; --- END LOGICAL OR
0603   07D2 C0 00 00      cmp b, 0
0604   07D5 C6 1D 08      je _if7_exit
0605   07D8             _if7_true:
0606   07D8             ; if (*str == '-') sign = -1; 
0607   07D8             _if8_cond:
0608   07D8 FA 05 00      lea d, [bp + 5] ; $str
0609   07DB 2A            mov b, [d]
0610   07DC 38 00 00      mov c, 0
0611   07DF 74            mov d, b
0612   07E0 32            mov bl, [d]
0613   07E1 A7 00         mov bh, 0
0614   07E3 38 00 00      mov c, 0
0615   07E6             ; --- START RELATIONAL
0616   07E6 D7            push a
0617   07E7 11            mov a, b
0618   07E8 FD 2E 2D 00   mov32 cb, $0000002d
0618   07EC 00 00 
0619   07EE B0            cmp a, b
0620   07EF FD 71         seq ; ==
0621   07F1 E4            pop a
0622   07F2             ; --- END RELATIONAL
0623   07F2 C0 00 00      cmp b, 0
0624   07F5 C6 0A 08      je _if8_exit
0625   07F8             _if8_true:
0626   07F8             ; sign = -1; 
0627   07F8 FA FD FF      lea d, [bp + -3] ; $sign
0628   07FB DA            push d
0629   07FC FD 2E 01 00   mov32 cb, $00000001
0629   0800 00 00 
0630   0802 FD 97         neg b
0631   0804 E7            pop d
0632   0805 FD 43         mov [d], b
0633   0807 0A 0A 08      jmp _if8_exit
0634   080A             _if8_exit:
0635   080A             ; str++; 
0636   080A FA 05 00      lea d, [bp + 5] ; $str
0637   080D 2A            mov b, [d]
0638   080E 38 00 00      mov c, 0
0639   0811 FD 77         inc b
0640   0813 FA 05 00      lea d, [bp + 5] ; $str
0641   0816 FD 43         mov [d], b
0642   0818 FD 7D         dec b
0643   081A 0A 1D 08      jmp _if7_exit
0644   081D             _if7_exit:
0645   081D             ; while (*str >= '0' && *str <= '9') { 
0646   081D             _while9_cond:
0647   081D FA 05 00      lea d, [bp + 5] ; $str
0648   0820 2A            mov b, [d]
0649   0821 38 00 00      mov c, 0
0650   0824 74            mov d, b
0651   0825 32            mov bl, [d]
0652   0826 A7 00         mov bh, 0
0653   0828 38 00 00      mov c, 0
0654   082B             ; --- START RELATIONAL
0655   082B D7            push a
0656   082C 11            mov a, b
0657   082D FD 2E 30 00   mov32 cb, $00000030
0657   0831 00 00 
0658   0833 B0            cmp a, b
0659   0834 FD 82         sgeu ; >= (unsigned)
0660   0836 E4            pop a
0661   0837             ; --- END RELATIONAL
0662   0837             ; --- START LOGICAL AND
0663   0837 D7            push a
0664   0838 11            mov a, b
0665   0839 FA 05 00      lea d, [bp + 5] ; $str
0666   083C 2A            mov b, [d]
0667   083D 38 00 00      mov c, 0
0668   0840 74            mov d, b
0669   0841 32            mov bl, [d]
0670   0842 A7 00         mov bh, 0
0671   0844 38 00 00      mov c, 0
0672   0847             ; --- START RELATIONAL
0673   0847 D7            push a
0674   0848 11            mov a, b
0675   0849 FD 2E 39 00   mov32 cb, $00000039
0675   084D 00 00 
0676   084F B0            cmp a, b
0677   0850 FD 76         sleu ; <= (unsigned)
0678   0852 E4            pop a
0679   0853             ; --- END RELATIONAL
0680   0853 FD A7         sand a, b
0681   0855 E4            pop a
0682   0856             ; --- END LOGICAL AND
0683   0856 C0 00 00      cmp b, 0
0684   0859 C6 A6 08      je _while9_exit
0685   085C             _while9_block:
0686   085C             ; result = result * 10 + (*str - '0'); 
0687   085C FA FF FF      lea d, [bp + -1] ; $result
0688   085F DA            push d
0689   0860 FA FF FF      lea d, [bp + -1] ; $result
0690   0863 2A            mov b, [d]
0691   0864 38 00 00      mov c, 0
0692   0867             ; --- START FACTORS
0693   0867 D7            push a
0694   0868 11            mov a, b
0695   0869 FD 2E 0A 00   mov32 cb, $0000000a
0695   086D 00 00 
0696   086F AC            mul a, b ; *
0697   0870 11            mov a, b
0698   0871 27            mov b, a
0699   0872 E4            pop a
0700   0873             ; --- END FACTORS
0701   0873             ; --- START TERMS
0702   0873 D7            push a
0703   0874 11            mov a, b
0704   0875 FA 05 00      lea d, [bp + 5] ; $str
0705   0878 2A            mov b, [d]
0706   0879 38 00 00      mov c, 0
0707   087C 74            mov d, b
0708   087D 32            mov bl, [d]
0709   087E A7 00         mov bh, 0
0710   0880 38 00 00      mov c, 0
0711   0883             ; --- START TERMS
0712   0883 D7            push a
0713   0884 11            mov a, b
0714   0885 FD 2E 30 00   mov32 cb, $00000030
0714   0889 00 00 
0715   088B 60            sub a, b
0716   088C 27            mov b, a
0717   088D E4            pop a
0718   088E             ; --- END TERMS
0719   088E 56            add b, a
0720   088F E4            pop a
0721   0890             ; --- END TERMS
0722   0890 E7            pop d
0723   0891 FD 43         mov [d], b
0724   0893             ; str++; 
0725   0893 FA 05 00      lea d, [bp + 5] ; $str
0726   0896 2A            mov b, [d]
0727   0897 38 00 00      mov c, 0
0728   089A FD 77         inc b
0729   089C FA 05 00      lea d, [bp + 5] ; $str
0730   089F FD 43         mov [d], b
0731   08A1 FD 7D         dec b
0732   08A3 0A 1D 08      jmp _while9_cond
0733   08A6             _while9_exit:
0734   08A6             ; return sign * result; 
0735   08A6 FA FD FF      lea d, [bp + -3] ; $sign
0736   08A9 2A            mov b, [d]
0737   08AA 38 00 00      mov c, 0
0738   08AD             ; --- START FACTORS
0739   08AD D7            push a
0740   08AE 11            mov a, b
0741   08AF FA FF FF      lea d, [bp + -1] ; $result
0742   08B2 2A            mov b, [d]
0743   08B3 38 00 00      mov c, 0
0744   08B6 AC            mul a, b ; *
0745   08B7 11            mov a, b
0746   08B8 27            mov b, a
0747   08B9 E4            pop a
0748   08BA             ; --- END FACTORS
0749   08BA F9            leave
0750   08BB 09            ret
0751   08BC             
0752   08BC             rand:
0753   08BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0754   08BF             ; int  sec; 
0755   08BF 52 02 00      sub sp, 2
0756   08C2             
0757   08C2             ; --- BEGIN INLINE ASM SEGMENT
0758   08C2 19 00         mov al, 0
0759   08C4 05 01         syscall sys_rtc					
0760   08C6 1A            mov al, ah
0761   08C7 FA FF FF      lea d, [bp + -1] ; $sec
0762   08CA 1E            mov al, [d]
0763   08CB 22 00         mov ah, 0
0764   08CD             ; --- END INLINE ASM SEGMENT
0765   08CD             
0766   08CD             ; return sec; 
0767   08CD FA FF FF      lea d, [bp + -1] ; $sec
0768   08D0 2A            mov b, [d]
0769   08D1 38 00 00      mov c, 0
0770   08D4 F9            leave
0771   08D5 09            ret
0772   08D6             
0773   08D6             alloc:
0774   08D6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0775   08D9             ; heap_top = heap_top + bytes; 
0776   08D9 3B 5D 2E      mov d, _heap_top ; $heap_top
0777   08DC DA            push d
0778   08DD 3B 5D 2E      mov d, _heap_top ; $heap_top
0779   08E0 2A            mov b, [d]
0780   08E1 38 00 00      mov c, 0
0781   08E4             ; --- START TERMS
0782   08E4 D7            push a
0783   08E5 11            mov a, b
0784   08E6 FA 05 00      lea d, [bp + 5] ; $bytes
0785   08E9 2A            mov b, [d]
0786   08EA 38 00 00      mov c, 0
0787   08ED 56            add b, a
0788   08EE E4            pop a
0789   08EF             ; --- END TERMS
0790   08EF E7            pop d
0791   08F0 FD 43         mov [d], b
0792   08F2             ; return heap_top - bytes; 
0793   08F2 3B 5D 2E      mov d, _heap_top ; $heap_top
0794   08F5 2A            mov b, [d]
0795   08F6 38 00 00      mov c, 0
0796   08F9             ; --- START TERMS
0797   08F9 D7            push a
0798   08FA 11            mov a, b
0799   08FB FA 05 00      lea d, [bp + 5] ; $bytes
0800   08FE 2A            mov b, [d]
0801   08FF 38 00 00      mov c, 0
0802   0902 60            sub a, b
0803   0903 27            mov b, a
0804   0904 E4            pop a
0805   0905             ; --- END TERMS
0806   0905 F9            leave
0807   0906 09            ret
0808   0907             
0809   0907             free:
0810   0907 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0811   090A             ; return heap_top = heap_top - bytes; 
0812   090A 3B 5D 2E      mov d, _heap_top ; $heap_top
0813   090D DA            push d
0814   090E 3B 5D 2E      mov d, _heap_top ; $heap_top
0815   0911 2A            mov b, [d]
0816   0912 38 00 00      mov c, 0
0817   0915             ; --- START TERMS
0818   0915 D7            push a
0819   0916 11            mov a, b
0820   0917 FA 05 00      lea d, [bp + 5] ; $bytes
0821   091A 2A            mov b, [d]
0822   091B 38 00 00      mov c, 0
0823   091E 60            sub a, b
0824   091F 27            mov b, a
0825   0920 E4            pop a
0826   0921             ; --- END TERMS
0827   0921 E7            pop d
0828   0922 FD 43         mov [d], b
0829   0924 F9            leave
0830   0925 09            ret
0831   0926             
0832   0926             fopen:
0833   0926 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0834   0929             ; FILE *fp; 
0835   0929 52 02 00      sub sp, 2
0836   092C             ; static int max_handle = 0; 
0837   092C 52 02 00      sub sp, 2
0838   092F             ; fp = alloc(sizeof(FILE)); 
0839   092F FA FF FF      lea d, [bp + -1] ; $fp
0840   0932 DA            push d
0841   0933             ; --- START FUNCTION CALL
0842   0933 26 04 01      mov b, 260
0843   0936 FD AB         swp b
0844   0938 D8            push b
0845   0939 07 D6 08      call alloc
0846   093C 51 02 00      add sp, 2
0847   093F             ; --- END FUNCTION CALL
0848   093F E7            pop d
0849   0940 FD 43         mov [d], b
0850   0942             ; strcpy(fp->filename, filename); 
0851   0942             ; --- START FUNCTION CALL
0852   0942 FA 05 00      lea d, [bp + 5] ; $filename
0853   0945 2A            mov b, [d]
0854   0946 38 00 00      mov c, 0
0855   0949 FD AB         swp b
0856   094B D8            push b
0857   094C FA FF FF      lea d, [bp + -1] ; $fp
0858   094F FD 2A         mov d, [d]
0859   0951 58 02 00      add d, 2
0860   0954 2D            mov b, d
0861   0955 38 00 00      mov c, 0
0862   0958 FD AB         swp b
0863   095A D8            push b
0864   095B 07 93 04      call strcpy
0865   095E 51 04 00      add sp, 4
0866   0961             ; --- END FUNCTION CALL
0867   0961             ; fp->handle = max_handle; 
0868   0961 FA FF FF      lea d, [bp + -1] ; $fp
0869   0964 FD 2A         mov d, [d]
0870   0966 58 00 00      add d, 0
0871   0969 DA            push d
0872   096A 3B C2 2D      mov d, st_fopen_max_handle ; static max_handle
0873   096D 2A            mov b, [d]
0874   096E 38 00 00      mov c, 0
0875   0971 E7            pop d
0876   0972 FD 43         mov [d], b
0877   0974             ; fp->mode = mode; 
0878   0974 FA FF FF      lea d, [bp + -1] ; $fp
0879   0977 FD 2A         mov d, [d]
0880   0979 58 02 01      add d, 258
0881   097C DA            push d
0882   097D FA 07 00      lea d, [bp + 7] ; $mode
0883   0980 32            mov bl, [d]
0884   0981 A7 00         mov bh, 0
0885   0983 38 00 00      mov c, 0
0886   0986 E7            pop d
0887   0987 FD 3E         mov [d], bl
0888   0989             ; fp->loc = 0; 
0889   0989 FA FF FF      lea d, [bp + -1] ; $fp
0890   098C FD 2A         mov d, [d]
0891   098E 58 03 01      add d, 259
0892   0991 DA            push d
0893   0992 FD 2E 00 00   mov32 cb, $00000000
0893   0996 00 00 
0894   0998 E7            pop d
0895   0999 FD 3E         mov [d], bl
0896   099B             ; max_handle++; 
0897   099B 3B C2 2D      mov d, st_fopen_max_handle ; static max_handle
0898   099E 2A            mov b, [d]
0899   099F 38 00 00      mov c, 0
0900   09A2 FD 77         inc b
0901   09A4 3B C2 2D      mov d, st_fopen_max_handle ; static max_handle
0902   09A7 FD 43         mov [d], b
0903   09A9 FD 7D         dec b
0904   09AB F9            leave
0905   09AC 09            ret
0906   09AD             
0907   09AD             fclose:
0908   09AD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0909   09B0             ; free(sizeof(FILE)); 
0910   09B0             ; --- START FUNCTION CALL
0911   09B0 26 04 01      mov b, 260
0912   09B3 FD AB         swp b
0913   09B5 D8            push b
0914   09B6 07 07 09      call free
0915   09B9 51 02 00      add sp, 2
0916   09BC             ; --- END FUNCTION CALL
0917   09BC F9            leave
0918   09BD 09            ret
0919   09BE             
0920   09BE             printf:
0921   09BE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0922   09C1             ; char *p, *format_p; 
0923   09C1 52 02 00      sub sp, 2
0924   09C4 52 02 00      sub sp, 2
0925   09C7             ; format_p = format; 
0926   09C7 FA FD FF      lea d, [bp + -3] ; $format_p
0927   09CA DA            push d
0928   09CB FA 05 00      lea d, [bp + 5] ; $format
0929   09CE 2A            mov b, [d]
0930   09CF 38 00 00      mov c, 0
0931   09D2 E7            pop d
0932   09D3 FD 43         mov [d], b
0933   09D5             ; p = &format + 2; 
0934   09D5 FA FF FF      lea d, [bp + -1] ; $p
0935   09D8 DA            push d
0936   09D9 FA 05 00      lea d, [bp + 5] ; $format
0937   09DC 2D            mov b, d
0938   09DD             ; --- START TERMS
0939   09DD D7            push a
0940   09DE 11            mov a, b
0941   09DF FD 2E 02 00   mov32 cb, $00000002
0941   09E3 00 00 
0942   09E5 56            add b, a
0943   09E6 E4            pop a
0944   09E7             ; --- END TERMS
0945   09E7 E7            pop d
0946   09E8 FD 43         mov [d], b
0947   09EA             ; for(;;){ 
0948   09EA             _for10_init:
0949   09EA             _for10_cond:
0950   09EA             _for10_block:
0951   09EA             ; if(!*format_p) break; 
0952   09EA             _if11_cond:
0953   09EA FA FD FF      lea d, [bp + -3] ; $format_p
0954   09ED 2A            mov b, [d]
0955   09EE 38 00 00      mov c, 0
0956   09F1 74            mov d, b
0957   09F2 32            mov bl, [d]
0958   09F3 A7 00         mov bh, 0
0959   09F5 38 00 00      mov c, 0
0960   09F8 C0 00 00      cmp b, 0
0961   09FB FD 71         seq ; !
0962   09FD C0 00 00      cmp b, 0
0963   0A00 C6 09 0A      je _if11_else
0964   0A03             _if11_true:
0965   0A03             ; break; 
0966   0A03 0A 9A 0C      jmp _for10_exit ; for break
0967   0A06 0A 97 0C      jmp _if11_exit
0968   0A09             _if11_else:
0969   0A09             ; if(*format_p == '%'){ 
0970   0A09             _if12_cond:
0971   0A09 FA FD FF      lea d, [bp + -3] ; $format_p
0972   0A0C 2A            mov b, [d]
0973   0A0D 38 00 00      mov c, 0
0974   0A10 74            mov d, b
0975   0A11 32            mov bl, [d]
0976   0A12 A7 00         mov bh, 0
0977   0A14 38 00 00      mov c, 0
0978   0A17             ; --- START RELATIONAL
0979   0A17 D7            push a
0980   0A18 11            mov a, b
0981   0A19 FD 2E 25 00   mov32 cb, $00000025
0981   0A1D 00 00 
0982   0A1F B0            cmp a, b
0983   0A20 FD 71         seq ; ==
0984   0A22 E4            pop a
0985   0A23             ; --- END RELATIONAL
0986   0A23 C0 00 00      cmp b, 0
0987   0A26 C6 72 0C      je _if12_else
0988   0A29             _if12_true:
0989   0A29             ; format_p++; 
0990   0A29 FA FD FF      lea d, [bp + -3] ; $format_p
0991   0A2C 2A            mov b, [d]
0992   0A2D 38 00 00      mov c, 0
0993   0A30 FD 77         inc b
0994   0A32 FA FD FF      lea d, [bp + -3] ; $format_p
0995   0A35 FD 43         mov [d], b
0996   0A37 FD 7D         dec b
0997   0A39             ; switch(*format_p){ 
0998   0A39             _switch13_expr:
0999   0A39 FA FD FF      lea d, [bp + -3] ; $format_p
1000   0A3C 2A            mov b, [d]
1001   0A3D 38 00 00      mov c, 0
1002   0A40 74            mov d, b
1003   0A41 32            mov bl, [d]
1004   0A42 A7 00         mov bh, 0
1005   0A44 38 00 00      mov c, 0
1006   0A47             _switch13_comparisons:
1007   0A47 C1 6C         cmp bl, $6c
1008   0A49 C6 75 0A      je _switch13_case0
1009   0A4C C1 4C         cmp bl, $4c
1010   0A4E C6 75 0A      je _switch13_case1
1011   0A51 C1 64         cmp bl, $64
1012   0A53 C6 85 0B      je _switch13_case2
1013   0A56 C1 69         cmp bl, $69
1014   0A58 C6 85 0B      je _switch13_case3
1015   0A5B C1 75         cmp bl, $75
1016   0A5D C6 B5 0B      je _switch13_case4
1017   0A60 C1 78         cmp bl, $78
1018   0A62 C6 E5 0B      je _switch13_case5
1019   0A65 C1 63         cmp bl, $63
1020   0A67 C6 09 0C      je _switch13_case6
1021   0A6A C1 73         cmp bl, $73
1022   0A6C C6 2E 0C      je _switch13_case7
1023   0A6F 0A 53 0C      jmp _switch13_default
1024   0A72 0A 5F 0C      jmp _switch13_exit
1025   0A75             _switch13_case0:
1026   0A75             _switch13_case1:
1027   0A75             ; format_p++; 
1028   0A75 FA FD FF      lea d, [bp + -3] ; $format_p
1029   0A78 2A            mov b, [d]
1030   0A79 38 00 00      mov c, 0
1031   0A7C FD 77         inc b
1032   0A7E FA FD FF      lea d, [bp + -3] ; $format_p
1033   0A81 FD 43         mov [d], b
1034   0A83 FD 7D         dec b
1035   0A85             ; if(*format_p == 'd' || *format_p == 'i') 
1036   0A85             _if14_cond:
1037   0A85 FA FD FF      lea d, [bp + -3] ; $format_p
1038   0A88 2A            mov b, [d]
1039   0A89 38 00 00      mov c, 0
1040   0A8C 74            mov d, b
1041   0A8D 32            mov bl, [d]
1042   0A8E A7 00         mov bh, 0
1043   0A90 38 00 00      mov c, 0
1044   0A93             ; --- START RELATIONAL
1045   0A93 D7            push a
1046   0A94 11            mov a, b
1047   0A95 FD 2E 64 00   mov32 cb, $00000064
1047   0A99 00 00 
1048   0A9B B0            cmp a, b
1049   0A9C FD 71         seq ; ==
1050   0A9E E4            pop a
1051   0A9F             ; --- END RELATIONAL
1052   0A9F             ; --- START LOGICAL OR
1053   0A9F D7            push a
1054   0AA0 11            mov a, b
1055   0AA1 FA FD FF      lea d, [bp + -3] ; $format_p
1056   0AA4 2A            mov b, [d]
1057   0AA5 38 00 00      mov c, 0
1058   0AA8 74            mov d, b
1059   0AA9 32            mov bl, [d]
1060   0AAA A7 00         mov bh, 0
1061   0AAC 38 00 00      mov c, 0
1062   0AAF             ; --- START RELATIONAL
1063   0AAF D7            push a
1064   0AB0 11            mov a, b
1065   0AB1 FD 2E 69 00   mov32 cb, $00000069
1065   0AB5 00 00 
1066   0AB7 B0            cmp a, b
1067   0AB8 FD 71         seq ; ==
1068   0ABA E4            pop a
1069   0ABB             ; --- END RELATIONAL
1070   0ABB FD A8         sor a, b ; ||
1071   0ABD E4            pop a
1072   0ABE             ; --- END LOGICAL OR
1073   0ABE C0 00 00      cmp b, 0
1074   0AC1 C6 E2 0A      je _if14_else
1075   0AC4             _if14_true:
1076   0AC4             ; print_signed_long(*(long *)p); 
1077   0AC4             ; --- START FUNCTION CALL
1078   0AC4 FA FF FF      lea d, [bp + -1] ; $p
1079   0AC7 2A            mov b, [d]
1080   0AC8 38 00 00      mov c, 0
1081   0ACB 74            mov d, b
1082   0ACC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1083   0ACF FD 39         mov c, b ; And place it into C
1084   0AD1 2A            mov b, [d] ; Lower Word in B
1085   0AD2 12            mov a, c
1086   0AD3 FD AA         swp a
1087   0AD5 D7            push a
1088   0AD6 FD AB         swp b
1089   0AD8 D8            push b
1090   0AD9 07 6C 16      call print_signed_long
1091   0ADC 51 04 00      add sp, 4
1092   0ADF             ; --- END FUNCTION CALL
1093   0ADF 0A 6A 0B      jmp _if14_exit
1094   0AE2             _if14_else:
1095   0AE2             ; if(*format_p == 'u') 
1096   0AE2             _if15_cond:
1097   0AE2 FA FD FF      lea d, [bp + -3] ; $format_p
1098   0AE5 2A            mov b, [d]
1099   0AE6 38 00 00      mov c, 0
1100   0AE9 74            mov d, b
1101   0AEA 32            mov bl, [d]
1102   0AEB A7 00         mov bh, 0
1103   0AED 38 00 00      mov c, 0
1104   0AF0             ; --- START RELATIONAL
1105   0AF0 D7            push a
1106   0AF1 11            mov a, b
1107   0AF2 FD 2E 75 00   mov32 cb, $00000075
1107   0AF6 00 00 
1108   0AF8 B0            cmp a, b
1109   0AF9 FD 71         seq ; ==
1110   0AFB E4            pop a
1111   0AFC             ; --- END RELATIONAL
1112   0AFC C0 00 00      cmp b, 0
1113   0AFF C6 20 0B      je _if15_else
1114   0B02             _if15_true:
1115   0B02             ; print_unsigned_long(*(unsigned long *)p); 
1116   0B02             ; --- START FUNCTION CALL
1117   0B02 FA FF FF      lea d, [bp + -1] ; $p
1118   0B05 2A            mov b, [d]
1119   0B06 38 00 00      mov c, 0
1120   0B09 74            mov d, b
1121   0B0A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1122   0B0D FD 39         mov c, b ; And place it into C
1123   0B0F 2A            mov b, [d] ; Lower Word in B
1124   0B10 12            mov a, c
1125   0B11 FD AA         swp a
1126   0B13 D7            push a
1127   0B14 FD AB         swp b
1128   0B16 D8            push b
1129   0B17 07 DB 17      call print_unsigned_long
1130   0B1A 51 04 00      add sp, 4
1131   0B1D             ; --- END FUNCTION CALL
1132   0B1D 0A 6A 0B      jmp _if15_exit
1133   0B20             _if15_else:
1134   0B20             ; if(*format_p == 'x') 
1135   0B20             _if16_cond:
1136   0B20 FA FD FF      lea d, [bp + -3] ; $format_p
1137   0B23 2A            mov b, [d]
1138   0B24 38 00 00      mov c, 0
1139   0B27 74            mov d, b
1140   0B28 32            mov bl, [d]
1141   0B29 A7 00         mov bh, 0
1142   0B2B 38 00 00      mov c, 0
1143   0B2E             ; --- START RELATIONAL
1144   0B2E D7            push a
1145   0B2F 11            mov a, b
1146   0B30 FD 2E 78 00   mov32 cb, $00000078
1146   0B34 00 00 
1147   0B36 B0            cmp a, b
1148   0B37 FD 71         seq ; ==
1149   0B39 E4            pop a
1150   0B3A             ; --- END RELATIONAL
1151   0B3A C0 00 00      cmp b, 0
1152   0B3D C6 5E 0B      je _if16_else
1153   0B40             _if16_true:
1154   0B40             ; printx32(*(long int *)p); 
1155   0B40             ; --- START FUNCTION CALL
1156   0B40 FA FF FF      lea d, [bp + -1] ; $p
1157   0B43 2A            mov b, [d]
1158   0B44 38 00 00      mov c, 0
1159   0B47 74            mov d, b
1160   0B48 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1161   0B4B FD 39         mov c, b ; And place it into C
1162   0B4D 2A            mov b, [d] ; Lower Word in B
1163   0B4E 12            mov a, c
1164   0B4F FD AA         swp a
1165   0B51 D7            push a
1166   0B52 FD AB         swp b
1167   0B54 D8            push b
1168   0B55 07 3F 13      call printx32
1169   0B58 51 04 00      add sp, 4
1170   0B5B             ; --- END FUNCTION CALL
1171   0B5B 0A 6A 0B      jmp _if16_exit
1172   0B5E             _if16_else:
1173   0B5E             ; err("Unexpected format in printf."); 
1174   0B5E             ; --- START FUNCTION CALL
1175   0B5E 26 19 2E      mov b, _s3 ; "Unexpected format in printf."
1176   0B61 FD AB         swp b
1177   0B63 D8            push b
1178   0B64 07 2A 13      call err
1179   0B67 51 02 00      add sp, 2
1180   0B6A             ; --- END FUNCTION CALL
1181   0B6A             _if16_exit:
1182   0B6A             _if15_exit:
1183   0B6A             _if14_exit:
1184   0B6A             ; p = p + 4; 
1185   0B6A FA FF FF      lea d, [bp + -1] ; $p
1186   0B6D DA            push d
1187   0B6E FA FF FF      lea d, [bp + -1] ; $p
1188   0B71 2A            mov b, [d]
1189   0B72 38 00 00      mov c, 0
1190   0B75             ; --- START TERMS
1191   0B75 D7            push a
1192   0B76 11            mov a, b
1193   0B77 FD 2E 04 00   mov32 cb, $00000004
1193   0B7B 00 00 
1194   0B7D 56            add b, a
1195   0B7E E4            pop a
1196   0B7F             ; --- END TERMS
1197   0B7F E7            pop d
1198   0B80 FD 43         mov [d], b
1199   0B82             ; break; 
1200   0B82 0A 5F 0C      jmp _switch13_exit ; case break
1201   0B85             _switch13_case2:
1202   0B85             _switch13_case3:
1203   0B85             ; print_signed(*(int*)p); 
1204   0B85             ; --- START FUNCTION CALL
1205   0B85 FA FF FF      lea d, [bp + -1] ; $p
1206   0B88 2A            mov b, [d]
1207   0B89 38 00 00      mov c, 0
1208   0B8C 74            mov d, b
1209   0B8D 2A            mov b, [d]
1210   0B8E 38 00 00      mov c, 0
1211   0B91 FD AB         swp b
1212   0B93 D8            push b
1213   0B94 07 33 15      call print_signed
1214   0B97 51 02 00      add sp, 2
1215   0B9A             ; --- END FUNCTION CALL
1216   0B9A             ; p = p + 2; 
1217   0B9A FA FF FF      lea d, [bp + -1] ; $p
1218   0B9D DA            push d
1219   0B9E FA FF FF      lea d, [bp + -1] ; $p
1220   0BA1 2A            mov b, [d]
1221   0BA2 38 00 00      mov c, 0
1222   0BA5             ; --- START TERMS
1223   0BA5 D7            push a
1224   0BA6 11            mov a, b
1225   0BA7 FD 2E 02 00   mov32 cb, $00000002
1225   0BAB 00 00 
1226   0BAD 56            add b, a
1227   0BAE E4            pop a
1228   0BAF             ; --- END TERMS
1229   0BAF E7            pop d
1230   0BB0 FD 43         mov [d], b
1231   0BB2             ; break; 
1232   0BB2 0A 5F 0C      jmp _switch13_exit ; case break
1233   0BB5             _switch13_case4:
1234   0BB5             ; print_unsigned(*(unsigned int*)p); 
1235   0BB5             ; --- START FUNCTION CALL
1236   0BB5 FA FF FF      lea d, [bp + -1] ; $p
1237   0BB8 2A            mov b, [d]
1238   0BB9 38 00 00      mov c, 0
1239   0BBC 74            mov d, b
1240   0BBD 2A            mov b, [d]
1241   0BBE 38 00 00      mov c, 0
1242   0BC1 FD AB         swp b
1243   0BC3 D8            push b
1244   0BC4 07 4F 1A      call print_unsigned
1245   0BC7 51 02 00      add sp, 2
1246   0BCA             ; --- END FUNCTION CALL
1247   0BCA             ; p = p + 2; 
1248   0BCA FA FF FF      lea d, [bp + -1] ; $p
1249   0BCD DA            push d
1250   0BCE FA FF FF      lea d, [bp + -1] ; $p
1251   0BD1 2A            mov b, [d]
1252   0BD2 38 00 00      mov c, 0
1253   0BD5             ; --- START TERMS
1254   0BD5 D7            push a
1255   0BD6 11            mov a, b
1256   0BD7 FD 2E 02 00   mov32 cb, $00000002
1256   0BDB 00 00 
1257   0BDD 56            add b, a
1258   0BDE E4            pop a
1259   0BDF             ; --- END TERMS
1260   0BDF E7            pop d
1261   0BE0 FD 43         mov [d], b
1262   0BE2             ; break; 
1263   0BE2 0A 5F 0C      jmp _switch13_exit ; case break
1264   0BE5             _switch13_case5:
1265   0BE5             
1266   0BE5             ; --- BEGIN INLINE ASM SEGMENT
1267   0BE5 FA FF FF      lea d, [bp + -1] ; $p
1268   0BE8 FD 2A         mov d, [d]
1269   0BEA 2A            mov b, [d]
1270   0BEB 07 C8 20      call print_u16x
1271   0BEE             ; --- END INLINE ASM SEGMENT
1272   0BEE             
1273   0BEE             ; p = p + 2; 
1274   0BEE FA FF FF      lea d, [bp + -1] ; $p
1275   0BF1 DA            push d
1276   0BF2 FA FF FF      lea d, [bp + -1] ; $p
1277   0BF5 2A            mov b, [d]
1278   0BF6 38 00 00      mov c, 0
1279   0BF9             ; --- START TERMS
1280   0BF9 D7            push a
1281   0BFA 11            mov a, b
1282   0BFB FD 2E 02 00   mov32 cb, $00000002
1282   0BFF 00 00 
1283   0C01 56            add b, a
1284   0C02 E4            pop a
1285   0C03             ; --- END TERMS
1286   0C03 E7            pop d
1287   0C04 FD 43         mov [d], b
1288   0C06             ; break; 
1289   0C06 0A 5F 0C      jmp _switch13_exit ; case break
1290   0C09             _switch13_case6:
1291   0C09             
1292   0C09             ; --- BEGIN INLINE ASM SEGMENT
1293   0C09 FA FF FF      lea d, [bp + -1] ; $p
1294   0C0C FD 2A         mov d, [d]
1295   0C0E 1E            mov al, [d]
1296   0C0F 23            mov ah, al
1297   0C10 07 26 1F      call _putchar
1298   0C13             ; --- END INLINE ASM SEGMENT
1299   0C13             
1300   0C13             ; p = p + 1; 
1301   0C13 FA FF FF      lea d, [bp + -1] ; $p
1302   0C16 DA            push d
1303   0C17 FA FF FF      lea d, [bp + -1] ; $p
1304   0C1A 2A            mov b, [d]
1305   0C1B 38 00 00      mov c, 0
1306   0C1E             ; --- START TERMS
1307   0C1E D7            push a
1308   0C1F 11            mov a, b
1309   0C20 FD 2E 01 00   mov32 cb, $00000001
1309   0C24 00 00 
1310   0C26 56            add b, a
1311   0C27 E4            pop a
1312   0C28             ; --- END TERMS
1313   0C28 E7            pop d
1314   0C29 FD 43         mov [d], b
1315   0C2B             ; break; 
1316   0C2B 0A 5F 0C      jmp _switch13_exit ; case break
1317   0C2E             _switch13_case7:
1318   0C2E             
1319   0C2E             ; --- BEGIN INLINE ASM SEGMENT
1320   0C2E FA FF FF      lea d, [bp + -1] ; $p
1321   0C31 FD 2A         mov d, [d]
1322   0C33 FD 2A         mov d, [d]
1323   0C35 07 70 20      call _puts
1324   0C38             ; --- END INLINE ASM SEGMENT
1325   0C38             
1326   0C38             ; p = p + 2; 
1327   0C38 FA FF FF      lea d, [bp + -1] ; $p
1328   0C3B DA            push d
1329   0C3C FA FF FF      lea d, [bp + -1] ; $p
1330   0C3F 2A            mov b, [d]
1331   0C40 38 00 00      mov c, 0
1332   0C43             ; --- START TERMS
1333   0C43 D7            push a
1334   0C44 11            mov a, b
1335   0C45 FD 2E 02 00   mov32 cb, $00000002
1335   0C49 00 00 
1336   0C4B 56            add b, a
1337   0C4C E4            pop a
1338   0C4D             ; --- END TERMS
1339   0C4D E7            pop d
1340   0C4E FD 43         mov [d], b
1341   0C50             ; break; 
1342   0C50 0A 5F 0C      jmp _switch13_exit ; case break
1343   0C53             _switch13_default:
1344   0C53             ; print("Error: Unknown argument type.\n"); 
1345   0C53             ; --- START FUNCTION CALL
1346   0C53 26 36 2E      mov b, _s4 ; "Error: Unknown argument type.\n"
1347   0C56 FD AB         swp b
1348   0C58 D8            push b
1349   0C59 07 65 1D      call print
1350   0C5C 51 02 00      add sp, 2
1351   0C5F             ; --- END FUNCTION CALL
1352   0C5F             _switch13_exit:
1353   0C5F             ; format_p++; 
1354   0C5F FA FD FF      lea d, [bp + -3] ; $format_p
1355   0C62 2A            mov b, [d]
1356   0C63 38 00 00      mov c, 0
1357   0C66 FD 77         inc b
1358   0C68 FA FD FF      lea d, [bp + -3] ; $format_p
1359   0C6B FD 43         mov [d], b
1360   0C6D FD 7D         dec b
1361   0C6F 0A 97 0C      jmp _if12_exit
1362   0C72             _if12_else:
1363   0C72             ; putchar(*format_p); 
1364   0C72             ; --- START FUNCTION CALL
1365   0C72 FA FD FF      lea d, [bp + -3] ; $format_p
1366   0C75 2A            mov b, [d]
1367   0C76 38 00 00      mov c, 0
1368   0C79 74            mov d, b
1369   0C7A 32            mov bl, [d]
1370   0C7B A7 00         mov bh, 0
1371   0C7D 38 00 00      mov c, 0
1372   0C80 DD            push bl
1373   0C81 07 17 1D      call putchar
1374   0C84 51 01 00      add sp, 1
1375   0C87             ; --- END FUNCTION CALL
1376   0C87             ; format_p++; 
1377   0C87 FA FD FF      lea d, [bp + -3] ; $format_p
1378   0C8A 2A            mov b, [d]
1379   0C8B 38 00 00      mov c, 0
1380   0C8E FD 77         inc b
1381   0C90 FA FD FF      lea d, [bp + -3] ; $format_p
1382   0C93 FD 43         mov [d], b
1383   0C95 FD 7D         dec b
1384   0C97             _if12_exit:
1385   0C97             _if11_exit:
1386   0C97             _for10_update:
1387   0C97 0A EA 09      jmp _for10_cond
1388   0C9A             _for10_exit:
1389   0C9A F9            leave
1390   0C9B 09            ret
1391   0C9C             
1392   0C9C             scanf:
1393   0C9C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1394   0C9F             ; char *p, *format_p; 
1395   0C9F 52 02 00      sub sp, 2
1396   0CA2 52 02 00      sub sp, 2
1397   0CA5             ; char c; 
1398   0CA5 52 01 00      sub sp, 1
1399   0CA8             ; int i; 
1400   0CA8 52 02 00      sub sp, 2
1401   0CAB             ; char input_string[  512                    ]; 
1402   0CAB 52 00 02      sub sp, 512
1403   0CAE             ; format_p = format; 
1404   0CAE FA FD FF      lea d, [bp + -3] ; $format_p
1405   0CB1 DA            push d
1406   0CB2 FA 05 00      lea d, [bp + 5] ; $format
1407   0CB5 2A            mov b, [d]
1408   0CB6 38 00 00      mov c, 0
1409   0CB9 E7            pop d
1410   0CBA FD 43         mov [d], b
1411   0CBC             ; p = &format + 2; 
1412   0CBC FA FF FF      lea d, [bp + -1] ; $p
1413   0CBF DA            push d
1414   0CC0 FA 05 00      lea d, [bp + 5] ; $format
1415   0CC3 2D            mov b, d
1416   0CC4             ; --- START TERMS
1417   0CC4 D7            push a
1418   0CC5 11            mov a, b
1419   0CC6 FD 2E 02 00   mov32 cb, $00000002
1419   0CCA 00 00 
1420   0CCC 56            add b, a
1421   0CCD E4            pop a
1422   0CCE             ; --- END TERMS
1423   0CCE E7            pop d
1424   0CCF FD 43         mov [d], b
1425   0CD1             ; for(;;){ 
1426   0CD1             _for17_init:
1427   0CD1             _for17_cond:
1428   0CD1             _for17_block:
1429   0CD1             ; if(!*format_p) break; 
1430   0CD1             _if18_cond:
1431   0CD1 FA FD FF      lea d, [bp + -3] ; $format_p
1432   0CD4 2A            mov b, [d]
1433   0CD5 38 00 00      mov c, 0
1434   0CD8 74            mov d, b
1435   0CD9 32            mov bl, [d]
1436   0CDA A7 00         mov bh, 0
1437   0CDC 38 00 00      mov c, 0
1438   0CDF C0 00 00      cmp b, 0
1439   0CE2 FD 71         seq ; !
1440   0CE4 C0 00 00      cmp b, 0
1441   0CE7 C6 F0 0C      je _if18_else
1442   0CEA             _if18_true:
1443   0CEA             ; break; 
1444   0CEA 0A 78 0F      jmp _for17_exit ; for break
1445   0CED 0A 75 0F      jmp _if18_exit
1446   0CF0             _if18_else:
1447   0CF0             ; if(*format_p == '%'){ 
1448   0CF0             _if19_cond:
1449   0CF0 FA FD FF      lea d, [bp + -3] ; $format_p
1450   0CF3 2A            mov b, [d]
1451   0CF4 38 00 00      mov c, 0
1452   0CF7 74            mov d, b
1453   0CF8 32            mov bl, [d]
1454   0CF9 A7 00         mov bh, 0
1455   0CFB 38 00 00      mov c, 0
1456   0CFE             ; --- START RELATIONAL
1457   0CFE D7            push a
1458   0CFF 11            mov a, b
1459   0D00 FD 2E 25 00   mov32 cb, $00000025
1459   0D04 00 00 
1460   0D06 B0            cmp a, b
1461   0D07 FD 71         seq ; ==
1462   0D09 E4            pop a
1463   0D0A             ; --- END RELATIONAL
1464   0D0A C0 00 00      cmp b, 0
1465   0D0D C6 50 0F      je _if19_else
1466   0D10             _if19_true:
1467   0D10             ; format_p++; 
1468   0D10 FA FD FF      lea d, [bp + -3] ; $format_p
1469   0D13 2A            mov b, [d]
1470   0D14 38 00 00      mov c, 0
1471   0D17 FD 77         inc b
1472   0D19 FA FD FF      lea d, [bp + -3] ; $format_p
1473   0D1C FD 43         mov [d], b
1474   0D1E FD 7D         dec b
1475   0D20             ; switch(*format_p){ 
1476   0D20             _switch20_expr:
1477   0D20 FA FD FF      lea d, [bp + -3] ; $format_p
1478   0D23 2A            mov b, [d]
1479   0D24 38 00 00      mov c, 0
1480   0D27 74            mov d, b
1481   0D28 32            mov bl, [d]
1482   0D29 A7 00         mov bh, 0
1483   0D2B 38 00 00      mov c, 0
1484   0D2E             _switch20_comparisons:
1485   0D2E C1 6C         cmp bl, $6c
1486   0D30 C6 5C 0D      je _switch20_case0
1487   0D33 C1 4C         cmp bl, $4c
1488   0D35 C6 5C 0D      je _switch20_case1
1489   0D38 C1 64         cmp bl, $64
1490   0D3A C6 1B 0E      je _switch20_case2
1491   0D3D C1 69         cmp bl, $69
1492   0D3F C6 1B 0E      je _switch20_case3
1493   0D42 C1 75         cmp bl, $75
1494   0D44 C6 54 0E      je _switch20_case4
1495   0D47 C1 78         cmp bl, $78
1496   0D49 C6 8D 0E      je _switch20_case5
1497   0D4C C1 63         cmp bl, $63
1498   0D4E C6 A8 0E      je _switch20_case6
1499   0D51 C1 73         cmp bl, $73
1500   0D53 C6 EA 0E      je _switch20_case7
1501   0D56 0A 31 0F      jmp _switch20_default
1502   0D59 0A 3D 0F      jmp _switch20_exit
1503   0D5C             _switch20_case0:
1504   0D5C             _switch20_case1:
1505   0D5C             ; format_p++; 
1506   0D5C FA FD FF      lea d, [bp + -3] ; $format_p
1507   0D5F 2A            mov b, [d]
1508   0D60 38 00 00      mov c, 0
1509   0D63 FD 77         inc b
1510   0D65 FA FD FF      lea d, [bp + -3] ; $format_p
1511   0D68 FD 43         mov [d], b
1512   0D6A FD 7D         dec b
1513   0D6C             ; if(*format_p == 'd' || *format_p == 'i'); 
1514   0D6C             _if21_cond:
1515   0D6C FA FD FF      lea d, [bp + -3] ; $format_p
1516   0D6F 2A            mov b, [d]
1517   0D70 38 00 00      mov c, 0
1518   0D73 74            mov d, b
1519   0D74 32            mov bl, [d]
1520   0D75 A7 00         mov bh, 0
1521   0D77 38 00 00      mov c, 0
1522   0D7A             ; --- START RELATIONAL
1523   0D7A D7            push a
1524   0D7B 11            mov a, b
1525   0D7C FD 2E 64 00   mov32 cb, $00000064
1525   0D80 00 00 
1526   0D82 B0            cmp a, b
1527   0D83 FD 71         seq ; ==
1528   0D85 E4            pop a
1529   0D86             ; --- END RELATIONAL
1530   0D86             ; --- START LOGICAL OR
1531   0D86 D7            push a
1532   0D87 11            mov a, b
1533   0D88 FA FD FF      lea d, [bp + -3] ; $format_p
1534   0D8B 2A            mov b, [d]
1535   0D8C 38 00 00      mov c, 0
1536   0D8F 74            mov d, b
1537   0D90 32            mov bl, [d]
1538   0D91 A7 00         mov bh, 0
1539   0D93 38 00 00      mov c, 0
1540   0D96             ; --- START RELATIONAL
1541   0D96 D7            push a
1542   0D97 11            mov a, b
1543   0D98 FD 2E 69 00   mov32 cb, $00000069
1543   0D9C 00 00 
1544   0D9E B0            cmp a, b
1545   0D9F FD 71         seq ; ==
1546   0DA1 E4            pop a
1547   0DA2             ; --- END RELATIONAL
1548   0DA2 FD A8         sor a, b ; ||
1549   0DA4 E4            pop a
1550   0DA5             ; --- END LOGICAL OR
1551   0DA5 C0 00 00      cmp b, 0
1552   0DA8 C6 AE 0D      je _if21_else
1553   0DAB             _if21_true:
1554   0DAB             ; ; 
1555   0DAB 0A 00 0E      jmp _if21_exit
1556   0DAE             _if21_else:
1557   0DAE             ; if(*format_p == 'u'); 
1558   0DAE             _if22_cond:
1559   0DAE FA FD FF      lea d, [bp + -3] ; $format_p
1560   0DB1 2A            mov b, [d]
1561   0DB2 38 00 00      mov c, 0
1562   0DB5 74            mov d, b
1563   0DB6 32            mov bl, [d]
1564   0DB7 A7 00         mov bh, 0
1565   0DB9 38 00 00      mov c, 0
1566   0DBC             ; --- START RELATIONAL
1567   0DBC D7            push a
1568   0DBD 11            mov a, b
1569   0DBE FD 2E 75 00   mov32 cb, $00000075
1569   0DC2 00 00 
1570   0DC4 B0            cmp a, b
1571   0DC5 FD 71         seq ; ==
1572   0DC7 E4            pop a
1573   0DC8             ; --- END RELATIONAL
1574   0DC8 C0 00 00      cmp b, 0
1575   0DCB C6 D1 0D      je _if22_else
1576   0DCE             _if22_true:
1577   0DCE             ; ; 
1578   0DCE 0A 00 0E      jmp _if22_exit
1579   0DD1             _if22_else:
1580   0DD1             ; if(*format_p == 'x'); 
1581   0DD1             _if23_cond:
1582   0DD1 FA FD FF      lea d, [bp + -3] ; $format_p
1583   0DD4 2A            mov b, [d]
1584   0DD5 38 00 00      mov c, 0
1585   0DD8 74            mov d, b
1586   0DD9 32            mov bl, [d]
1587   0DDA A7 00         mov bh, 0
1588   0DDC 38 00 00      mov c, 0
1589   0DDF             ; --- START RELATIONAL
1590   0DDF D7            push a
1591   0DE0 11            mov a, b
1592   0DE1 FD 2E 78 00   mov32 cb, $00000078
1592   0DE5 00 00 
1593   0DE7 B0            cmp a, b
1594   0DE8 FD 71         seq ; ==
1595   0DEA E4            pop a
1596   0DEB             ; --- END RELATIONAL
1597   0DEB C0 00 00      cmp b, 0
1598   0DEE C6 F4 0D      je _if23_else
1599   0DF1             _if23_true:
1600   0DF1             ; ; 
1601   0DF1 0A 00 0E      jmp _if23_exit
1602   0DF4             _if23_else:
1603   0DF4             ; err("Unexpected format in printf."); 
1604   0DF4             ; --- START FUNCTION CALL
1605   0DF4 26 19 2E      mov b, _s3 ; "Unexpected format in printf."
1606   0DF7 FD AB         swp b
1607   0DF9 D8            push b
1608   0DFA 07 2A 13      call err
1609   0DFD 51 02 00      add sp, 2
1610   0E00             ; --- END FUNCTION CALL
1611   0E00             _if23_exit:
1612   0E00             _if22_exit:
1613   0E00             _if21_exit:
1614   0E00             ; p = p + 4; 
1615   0E00 FA FF FF      lea d, [bp + -1] ; $p
1616   0E03 DA            push d
1617   0E04 FA FF FF      lea d, [bp + -1] ; $p
1618   0E07 2A            mov b, [d]
1619   0E08 38 00 00      mov c, 0
1620   0E0B             ; --- START TERMS
1621   0E0B D7            push a
1622   0E0C 11            mov a, b
1623   0E0D FD 2E 04 00   mov32 cb, $00000004
1623   0E11 00 00 
1624   0E13 56            add b, a
1625   0E14 E4            pop a
1626   0E15             ; --- END TERMS
1627   0E15 E7            pop d
1628   0E16 FD 43         mov [d], b
1629   0E18             ; break; 
1630   0E18 0A 3D 0F      jmp _switch20_exit ; case break
1631   0E1B             _switch20_case2:
1632   0E1B             _switch20_case3:
1633   0E1B             ; i = scann(); 
1634   0E1B FA FA FF      lea d, [bp + -6] ; $i
1635   0E1E DA            push d
1636   0E1F             ; --- START FUNCTION CALL
1637   0E1F 07 3D 1D      call scann
1638   0E22 E7            pop d
1639   0E23 FD 43         mov [d], b
1640   0E25             ; **(int **)p = i; 
1641   0E25 FA FF FF      lea d, [bp + -1] ; $p
1642   0E28 2A            mov b, [d]
1643   0E29 38 00 00      mov c, 0
1644   0E2C 74            mov d, b
1645   0E2D 2A            mov b, [d]
1646   0E2E D8            push b
1647   0E2F FA FA FF      lea d, [bp + -6] ; $i
1648   0E32 2A            mov b, [d]
1649   0E33 38 00 00      mov c, 0
1650   0E36 E7            pop d
1651   0E37 FD 43         mov [d], b
1652   0E39             ; p = p + 2; 
1653   0E39 FA FF FF      lea d, [bp + -1] ; $p
1654   0E3C DA            push d
1655   0E3D FA FF FF      lea d, [bp + -1] ; $p
1656   0E40 2A            mov b, [d]
1657   0E41 38 00 00      mov c, 0
1658   0E44             ; --- START TERMS
1659   0E44 D7            push a
1660   0E45 11            mov a, b
1661   0E46 FD 2E 02 00   mov32 cb, $00000002
1661   0E4A 00 00 
1662   0E4C 56            add b, a
1663   0E4D E4            pop a
1664   0E4E             ; --- END TERMS
1665   0E4E E7            pop d
1666   0E4F FD 43         mov [d], b
1667   0E51             ; break; 
1668   0E51 0A 3D 0F      jmp _switch20_exit ; case break
1669   0E54             _switch20_case4:
1670   0E54             ; i = scann(); 
1671   0E54 FA FA FF      lea d, [bp + -6] ; $i
1672   0E57 DA            push d
1673   0E58             ; --- START FUNCTION CALL
1674   0E58 07 3D 1D      call scann
1675   0E5B E7            pop d
1676   0E5C FD 43         mov [d], b
1677   0E5E             ; **(int **)p = i; 
1678   0E5E FA FF FF      lea d, [bp + -1] ; $p
1679   0E61 2A            mov b, [d]
1680   0E62 38 00 00      mov c, 0
1681   0E65 74            mov d, b
1682   0E66 2A            mov b, [d]
1683   0E67 D8            push b
1684   0E68 FA FA FF      lea d, [bp + -6] ; $i
1685   0E6B 2A            mov b, [d]
1686   0E6C 38 00 00      mov c, 0
1687   0E6F E7            pop d
1688   0E70 FD 43         mov [d], b
1689   0E72             ; p = p + 2; 
1690   0E72 FA FF FF      lea d, [bp + -1] ; $p
1691   0E75 DA            push d
1692   0E76 FA FF FF      lea d, [bp + -1] ; $p
1693   0E79 2A            mov b, [d]
1694   0E7A 38 00 00      mov c, 0
1695   0E7D             ; --- START TERMS
1696   0E7D D7            push a
1697   0E7E 11            mov a, b
1698   0E7F FD 2E 02 00   mov32 cb, $00000002
1698   0E83 00 00 
1699   0E85 56            add b, a
1700   0E86 E4            pop a
1701   0E87             ; --- END TERMS
1702   0E87 E7            pop d
1703   0E88 FD 43         mov [d], b
1704   0E8A             ; break; 
1705   0E8A 0A 3D 0F      jmp _switch20_exit ; case break
1706   0E8D             _switch20_case5:
1707   0E8D             ; p = p + 2; 
1708   0E8D FA FF FF      lea d, [bp + -1] ; $p
1709   0E90 DA            push d
1710   0E91 FA FF FF      lea d, [bp + -1] ; $p
1711   0E94 2A            mov b, [d]
1712   0E95 38 00 00      mov c, 0
1713   0E98             ; --- START TERMS
1714   0E98 D7            push a
1715   0E99 11            mov a, b
1716   0E9A FD 2E 02 00   mov32 cb, $00000002
1716   0E9E 00 00 
1717   0EA0 56            add b, a
1718   0EA1 E4            pop a
1719   0EA2             ; --- END TERMS
1720   0EA2 E7            pop d
1721   0EA3 FD 43         mov [d], b
1722   0EA5             ; break; 
1723   0EA5 0A 3D 0F      jmp _switch20_exit ; case break
1724   0EA8             _switch20_case6:
1725   0EA8             ; c = getchar(); 
1726   0EA8 FA FC FF      lea d, [bp + -4] ; $c
1727   0EAB DA            push d
1728   0EAC             ; --- START FUNCTION CALL
1729   0EAC 07 24 1D      call getchar
1730   0EAF E7            pop d
1731   0EB0 FD 3E         mov [d], bl
1732   0EB2             ; **(char **)p = *(char *)c; 
1733   0EB2 FA FF FF      lea d, [bp + -1] ; $p
1734   0EB5 2A            mov b, [d]
1735   0EB6 38 00 00      mov c, 0
1736   0EB9 74            mov d, b
1737   0EBA 2A            mov b, [d]
1738   0EBB D8            push b
1739   0EBC FA FC FF      lea d, [bp + -4] ; $c
1740   0EBF 32            mov bl, [d]
1741   0EC0 A7 00         mov bh, 0
1742   0EC2 38 00 00      mov c, 0
1743   0EC5 74            mov d, b
1744   0EC6 32            mov bl, [d]
1745   0EC7 A7 00         mov bh, 0
1746   0EC9 38 00 00      mov c, 0
1747   0ECC E7            pop d
1748   0ECD FD 43         mov [d], b
1749   0ECF             ; p = p + 1; 
1750   0ECF FA FF FF      lea d, [bp + -1] ; $p
1751   0ED2 DA            push d
1752   0ED3 FA FF FF      lea d, [bp + -1] ; $p
1753   0ED6 2A            mov b, [d]
1754   0ED7 38 00 00      mov c, 0
1755   0EDA             ; --- START TERMS
1756   0EDA D7            push a
1757   0EDB 11            mov a, b
1758   0EDC FD 2E 01 00   mov32 cb, $00000001
1758   0EE0 00 00 
1759   0EE2 56            add b, a
1760   0EE3 E4            pop a
1761   0EE4             ; --- END TERMS
1762   0EE4 E7            pop d
1763   0EE5 FD 43         mov [d], b
1764   0EE7             ; break; 
1765   0EE7 0A 3D 0F      jmp _switch20_exit ; case break
1766   0EEA             _switch20_case7:
1767   0EEA             ; gets(input_string); 
1768   0EEA             ; --- START FUNCTION CALL
1769   0EEA FA FA FD      lea d, [bp + -518] ; $input_string
1770   0EED 2D            mov b, d
1771   0EEE 38 00 00      mov c, 0
1772   0EF1 FD AB         swp b
1773   0EF3 D8            push b
1774   0EF4 07 16 15      call gets
1775   0EF7 51 02 00      add sp, 2
1776   0EFA             ; --- END FUNCTION CALL
1777   0EFA             ; strcpy(*(char **)p, input_string); 
1778   0EFA             ; --- START FUNCTION CALL
1779   0EFA FA FA FD      lea d, [bp + -518] ; $input_string
1780   0EFD 2D            mov b, d
1781   0EFE 38 00 00      mov c, 0
1782   0F01 FD AB         swp b
1783   0F03 D8            push b
1784   0F04 FA FF FF      lea d, [bp + -1] ; $p
1785   0F07 2A            mov b, [d]
1786   0F08 38 00 00      mov c, 0
1787   0F0B 74            mov d, b
1788   0F0C 2A            mov b, [d]
1789   0F0D FD AB         swp b
1790   0F0F D8            push b
1791   0F10 07 93 04      call strcpy
1792   0F13 51 04 00      add sp, 4
1793   0F16             ; --- END FUNCTION CALL
1794   0F16             ; p = p + 2; 
1795   0F16 FA FF FF      lea d, [bp + -1] ; $p
1796   0F19 DA            push d
1797   0F1A FA FF FF      lea d, [bp + -1] ; $p
1798   0F1D 2A            mov b, [d]
1799   0F1E 38 00 00      mov c, 0
1800   0F21             ; --- START TERMS
1801   0F21 D7            push a
1802   0F22 11            mov a, b
1803   0F23 FD 2E 02 00   mov32 cb, $00000002
1803   0F27 00 00 
1804   0F29 56            add b, a
1805   0F2A E4            pop a
1806   0F2B             ; --- END TERMS
1807   0F2B E7            pop d
1808   0F2C FD 43         mov [d], b
1809   0F2E             ; break; 
1810   0F2E 0A 3D 0F      jmp _switch20_exit ; case break
1811   0F31             _switch20_default:
1812   0F31             ; print("Error: Unknown argument type.\n"); 
1813   0F31             ; --- START FUNCTION CALL
1814   0F31 26 36 2E      mov b, _s4 ; "Error: Unknown argument type.\n"
1815   0F34 FD AB         swp b
1816   0F36 D8            push b
1817   0F37 07 65 1D      call print
1818   0F3A 51 02 00      add sp, 2
1819   0F3D             ; --- END FUNCTION CALL
1820   0F3D             _switch20_exit:
1821   0F3D             ; format_p++; 
1822   0F3D FA FD FF      lea d, [bp + -3] ; $format_p
1823   0F40 2A            mov b, [d]
1824   0F41 38 00 00      mov c, 0
1825   0F44 FD 77         inc b
1826   0F46 FA FD FF      lea d, [bp + -3] ; $format_p
1827   0F49 FD 43         mov [d], b
1828   0F4B FD 7D         dec b
1829   0F4D 0A 75 0F      jmp _if19_exit
1830   0F50             _if19_else:
1831   0F50             ; putchar(*format_p); 
1832   0F50             ; --- START FUNCTION CALL
1833   0F50 FA FD FF      lea d, [bp + -3] ; $format_p
1834   0F53 2A            mov b, [d]
1835   0F54 38 00 00      mov c, 0
1836   0F57 74            mov d, b
1837   0F58 32            mov bl, [d]
1838   0F59 A7 00         mov bh, 0
1839   0F5B 38 00 00      mov c, 0
1840   0F5E DD            push bl
1841   0F5F 07 17 1D      call putchar
1842   0F62 51 01 00      add sp, 1
1843   0F65             ; --- END FUNCTION CALL
1844   0F65             ; format_p++; 
1845   0F65 FA FD FF      lea d, [bp + -3] ; $format_p
1846   0F68 2A            mov b, [d]
1847   0F69 38 00 00      mov c, 0
1848   0F6C FD 77         inc b
1849   0F6E FA FD FF      lea d, [bp + -3] ; $format_p
1850   0F71 FD 43         mov [d], b
1851   0F73 FD 7D         dec b
1852   0F75             _if19_exit:
1853   0F75             _if18_exit:
1854   0F75             _for17_update:
1855   0F75 0A D1 0C      jmp _for17_cond
1856   0F78             _for17_exit:
1857   0F78 F9            leave
1858   0F79 09            ret
1859   0F7A             
1860   0F7A             sprintf:
1861   0F7A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1862   0F7D             ; char *p, *format_p; 
1863   0F7D 52 02 00      sub sp, 2
1864   0F80 52 02 00      sub sp, 2
1865   0F83             ; char *sp; 
1866   0F83 52 02 00      sub sp, 2
1867   0F86             ; sp = dest; 
1868   0F86 FA FB FF      lea d, [bp + -5] ; $sp
1869   0F89 DA            push d
1870   0F8A FA 05 00      lea d, [bp + 5] ; $dest
1871   0F8D 2A            mov b, [d]
1872   0F8E 38 00 00      mov c, 0
1873   0F91 E7            pop d
1874   0F92 FD 43         mov [d], b
1875   0F94             ; format_p = format; 
1876   0F94 FA FD FF      lea d, [bp + -3] ; $format_p
1877   0F97 DA            push d
1878   0F98 FA 07 00      lea d, [bp + 7] ; $format
1879   0F9B 2A            mov b, [d]
1880   0F9C 38 00 00      mov c, 0
1881   0F9F E7            pop d
1882   0FA0 FD 43         mov [d], b
1883   0FA2             ; p = &format + 2; 
1884   0FA2 FA FF FF      lea d, [bp + -1] ; $p
1885   0FA5 DA            push d
1886   0FA6 FA 07 00      lea d, [bp + 7] ; $format
1887   0FA9 2D            mov b, d
1888   0FAA             ; --- START TERMS
1889   0FAA D7            push a
1890   0FAB 11            mov a, b
1891   0FAC FD 2E 02 00   mov32 cb, $00000002
1891   0FB0 00 00 
1892   0FB2 56            add b, a
1893   0FB3 E4            pop a
1894   0FB4             ; --- END TERMS
1895   0FB4 E7            pop d
1896   0FB5 FD 43         mov [d], b
1897   0FB7             ; for(;;){ 
1898   0FB7             _for24_init:
1899   0FB7             _for24_cond:
1900   0FB7             _for24_block:
1901   0FB7             ; if(!*format_p) break; 
1902   0FB7             _if25_cond:
1903   0FB7 FA FD FF      lea d, [bp + -3] ; $format_p
1904   0FBA 2A            mov b, [d]
1905   0FBB 38 00 00      mov c, 0
1906   0FBE 74            mov d, b
1907   0FBF 32            mov bl, [d]
1908   0FC0 A7 00         mov bh, 0
1909   0FC2 38 00 00      mov c, 0
1910   0FC5 C0 00 00      cmp b, 0
1911   0FC8 FD 71         seq ; !
1912   0FCA C0 00 00      cmp b, 0
1913   0FCD C6 D6 0F      je _if25_else
1914   0FD0             _if25_true:
1915   0FD0             ; break; 
1916   0FD0 0A 04 13      jmp _for24_exit ; for break
1917   0FD3 0A 01 13      jmp _if25_exit
1918   0FD6             _if25_else:
1919   0FD6             ; if(*format_p == '%'){ 
1920   0FD6             _if26_cond:
1921   0FD6 FA FD FF      lea d, [bp + -3] ; $format_p
1922   0FD9 2A            mov b, [d]
1923   0FDA 38 00 00      mov c, 0
1924   0FDD 74            mov d, b
1925   0FDE 32            mov bl, [d]
1926   0FDF A7 00         mov bh, 0
1927   0FE1 38 00 00      mov c, 0
1928   0FE4             ; --- START RELATIONAL
1929   0FE4 D7            push a
1930   0FE5 11            mov a, b
1931   0FE6 FD 2E 25 00   mov32 cb, $00000025
1931   0FEA 00 00 
1932   0FEC B0            cmp a, b
1933   0FED FD 71         seq ; ==
1934   0FEF E4            pop a
1935   0FF0             ; --- END RELATIONAL
1936   0FF0 C0 00 00      cmp b, 0
1937   0FF3 C6 D6 12      je _if26_else
1938   0FF6             _if26_true:
1939   0FF6             ; format_p++; 
1940   0FF6 FA FD FF      lea d, [bp + -3] ; $format_p
1941   0FF9 2A            mov b, [d]
1942   0FFA 38 00 00      mov c, 0
1943   0FFD FD 77         inc b
1944   0FFF FA FD FF      lea d, [bp + -3] ; $format_p
1945   1002 FD 43         mov [d], b
1946   1004 FD 7D         dec b
1947   1006             ; switch(*format_p){ 
1948   1006             _switch27_expr:
1949   1006 FA FD FF      lea d, [bp + -3] ; $format_p
1950   1009 2A            mov b, [d]
1951   100A 38 00 00      mov c, 0
1952   100D 74            mov d, b
1953   100E 32            mov bl, [d]
1954   100F A7 00         mov bh, 0
1955   1011 38 00 00      mov c, 0
1956   1014             _switch27_comparisons:
1957   1014 C1 6C         cmp bl, $6c
1958   1016 C6 42 10      je _switch27_case0
1959   1019 C1 4C         cmp bl, $4c
1960   101B C6 42 10      je _switch27_case1
1961   101E C1 64         cmp bl, $64
1962   1020 C6 52 11      je _switch27_case2
1963   1023 C1 69         cmp bl, $69
1964   1025 C6 52 11      je _switch27_case3
1965   1028 C1 75         cmp bl, $75
1966   102A C6 9E 11      je _switch27_case4
1967   102D C1 78         cmp bl, $78
1968   102F C6 EA 11      je _switch27_case5
1969   1032 C1 63         cmp bl, $63
1970   1034 C6 0E 12      je _switch27_case6
1971   1037 C1 73         cmp bl, $73
1972   1039 C6 4B 12      je _switch27_case7
1973   103C 0A B7 12      jmp _switch27_default
1974   103F 0A C3 12      jmp _switch27_exit
1975   1042             _switch27_case0:
1976   1042             _switch27_case1:
1977   1042             ; format_p++; 
1978   1042 FA FD FF      lea d, [bp + -3] ; $format_p
1979   1045 2A            mov b, [d]
1980   1046 38 00 00      mov c, 0
1981   1049 FD 77         inc b
1982   104B FA FD FF      lea d, [bp + -3] ; $format_p
1983   104E FD 43         mov [d], b
1984   1050 FD 7D         dec b
1985   1052             ; if(*format_p == 'd' || *format_p == 'i') 
1986   1052             _if28_cond:
1987   1052 FA FD FF      lea d, [bp + -3] ; $format_p
1988   1055 2A            mov b, [d]
1989   1056 38 00 00      mov c, 0
1990   1059 74            mov d, b
1991   105A 32            mov bl, [d]
1992   105B A7 00         mov bh, 0
1993   105D 38 00 00      mov c, 0
1994   1060             ; --- START RELATIONAL
1995   1060 D7            push a
1996   1061 11            mov a, b
1997   1062 FD 2E 64 00   mov32 cb, $00000064
1997   1066 00 00 
1998   1068 B0            cmp a, b
1999   1069 FD 71         seq ; ==
2000   106B E4            pop a
2001   106C             ; --- END RELATIONAL
2002   106C             ; --- START LOGICAL OR
2003   106C D7            push a
2004   106D 11            mov a, b
2005   106E FA FD FF      lea d, [bp + -3] ; $format_p
2006   1071 2A            mov b, [d]
2007   1072 38 00 00      mov c, 0
2008   1075 74            mov d, b
2009   1076 32            mov bl, [d]
2010   1077 A7 00         mov bh, 0
2011   1079 38 00 00      mov c, 0
2012   107C             ; --- START RELATIONAL
2013   107C D7            push a
2014   107D 11            mov a, b
2015   107E FD 2E 69 00   mov32 cb, $00000069
2015   1082 00 00 
2016   1084 B0            cmp a, b
2017   1085 FD 71         seq ; ==
2018   1087 E4            pop a
2019   1088             ; --- END RELATIONAL
2020   1088 FD A8         sor a, b ; ||
2021   108A E4            pop a
2022   108B             ; --- END LOGICAL OR
2023   108B C0 00 00      cmp b, 0
2024   108E C6 AF 10      je _if28_else
2025   1091             _if28_true:
2026   1091             ; print_signed_long(*(long *)p); 
2027   1091             ; --- START FUNCTION CALL
2028   1091 FA FF FF      lea d, [bp + -1] ; $p
2029   1094 2A            mov b, [d]
2030   1095 38 00 00      mov c, 0
2031   1098 74            mov d, b
2032   1099 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2033   109C FD 39         mov c, b ; And place it into C
2034   109E 2A            mov b, [d] ; Lower Word in B
2035   109F 12            mov a, c
2036   10A0 FD AA         swp a
2037   10A2 D7            push a
2038   10A3 FD AB         swp b
2039   10A5 D8            push b
2040   10A6 07 6C 16      call print_signed_long
2041   10A9 51 04 00      add sp, 4
2042   10AC             ; --- END FUNCTION CALL
2043   10AC 0A 37 11      jmp _if28_exit
2044   10AF             _if28_else:
2045   10AF             ; if(*format_p == 'u') 
2046   10AF             _if29_cond:
2047   10AF FA FD FF      lea d, [bp + -3] ; $format_p
2048   10B2 2A            mov b, [d]
2049   10B3 38 00 00      mov c, 0
2050   10B6 74            mov d, b
2051   10B7 32            mov bl, [d]
2052   10B8 A7 00         mov bh, 0
2053   10BA 38 00 00      mov c, 0
2054   10BD             ; --- START RELATIONAL
2055   10BD D7            push a
2056   10BE 11            mov a, b
2057   10BF FD 2E 75 00   mov32 cb, $00000075
2057   10C3 00 00 
2058   10C5 B0            cmp a, b
2059   10C6 FD 71         seq ; ==
2060   10C8 E4            pop a
2061   10C9             ; --- END RELATIONAL
2062   10C9 C0 00 00      cmp b, 0
2063   10CC C6 ED 10      je _if29_else
2064   10CF             _if29_true:
2065   10CF             ; print_unsigned_long(*(unsigned long *)p); 
2066   10CF             ; --- START FUNCTION CALL
2067   10CF FA FF FF      lea d, [bp + -1] ; $p
2068   10D2 2A            mov b, [d]
2069   10D3 38 00 00      mov c, 0
2070   10D6 74            mov d, b
2071   10D7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2072   10DA FD 39         mov c, b ; And place it into C
2073   10DC 2A            mov b, [d] ; Lower Word in B
2074   10DD 12            mov a, c
2075   10DE FD AA         swp a
2076   10E0 D7            push a
2077   10E1 FD AB         swp b
2078   10E3 D8            push b
2079   10E4 07 DB 17      call print_unsigned_long
2080   10E7 51 04 00      add sp, 4
2081   10EA             ; --- END FUNCTION CALL
2082   10EA 0A 37 11      jmp _if29_exit
2083   10ED             _if29_else:
2084   10ED             ; if(*format_p == 'x') 
2085   10ED             _if30_cond:
2086   10ED FA FD FF      lea d, [bp + -3] ; $format_p
2087   10F0 2A            mov b, [d]
2088   10F1 38 00 00      mov c, 0
2089   10F4 74            mov d, b
2090   10F5 32            mov bl, [d]
2091   10F6 A7 00         mov bh, 0
2092   10F8 38 00 00      mov c, 0
2093   10FB             ; --- START RELATIONAL
2094   10FB D7            push a
2095   10FC 11            mov a, b
2096   10FD FD 2E 78 00   mov32 cb, $00000078
2096   1101 00 00 
2097   1103 B0            cmp a, b
2098   1104 FD 71         seq ; ==
2099   1106 E4            pop a
2100   1107             ; --- END RELATIONAL
2101   1107 C0 00 00      cmp b, 0
2102   110A C6 2B 11      je _if30_else
2103   110D             _if30_true:
2104   110D             ; printx32(*(long int *)p); 
2105   110D             ; --- START FUNCTION CALL
2106   110D FA FF FF      lea d, [bp + -1] ; $p
2107   1110 2A            mov b, [d]
2108   1111 38 00 00      mov c, 0
2109   1114 74            mov d, b
2110   1115 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2111   1118 FD 39         mov c, b ; And place it into C
2112   111A 2A            mov b, [d] ; Lower Word in B
2113   111B 12            mov a, c
2114   111C FD AA         swp a
2115   111E D7            push a
2116   111F FD AB         swp b
2117   1121 D8            push b
2118   1122 07 3F 13      call printx32
2119   1125 51 04 00      add sp, 4
2120   1128             ; --- END FUNCTION CALL
2121   1128 0A 37 11      jmp _if30_exit
2122   112B             _if30_else:
2123   112B             ; err("Unexpected format in printf."); 
2124   112B             ; --- START FUNCTION CALL
2125   112B 26 19 2E      mov b, _s3 ; "Unexpected format in printf."
2126   112E FD AB         swp b
2127   1130 D8            push b
2128   1131 07 2A 13      call err
2129   1134 51 02 00      add sp, 2
2130   1137             ; --- END FUNCTION CALL
2131   1137             _if30_exit:
2132   1137             _if29_exit:
2133   1137             _if28_exit:
2134   1137             ; p = p + 4; 
2135   1137 FA FF FF      lea d, [bp + -1] ; $p
2136   113A DA            push d
2137   113B FA FF FF      lea d, [bp + -1] ; $p
2138   113E 2A            mov b, [d]
2139   113F 38 00 00      mov c, 0
2140   1142             ; --- START TERMS
2141   1142 D7            push a
2142   1143 11            mov a, b
2143   1144 FD 2E 04 00   mov32 cb, $00000004
2143   1148 00 00 
2144   114A 56            add b, a
2145   114B E4            pop a
2146   114C             ; --- END TERMS
2147   114C E7            pop d
2148   114D FD 43         mov [d], b
2149   114F             ; break; 
2150   114F 0A C3 12      jmp _switch27_exit ; case break
2151   1152             _switch27_case2:
2152   1152             _switch27_case3:
2153   1152             ; sp = sp + sprint_signed(sp, *(int*)p); 
2154   1152 FA FB FF      lea d, [bp + -5] ; $sp
2155   1155 DA            push d
2156   1156 FA FB FF      lea d, [bp + -5] ; $sp
2157   1159 2A            mov b, [d]
2158   115A 38 00 00      mov c, 0
2159   115D             ; --- START TERMS
2160   115D D7            push a
2161   115E 11            mov a, b
2162   115F             ; --- START FUNCTION CALL
2163   115F FA FF FF      lea d, [bp + -1] ; $p
2164   1162 2A            mov b, [d]
2165   1163 38 00 00      mov c, 0
2166   1166 74            mov d, b
2167   1167 2A            mov b, [d]
2168   1168 38 00 00      mov c, 0
2169   116B FD AB         swp b
2170   116D D8            push b
2171   116E FA FB FF      lea d, [bp + -5] ; $sp
2172   1171 2A            mov b, [d]
2173   1172 38 00 00      mov c, 0
2174   1175 FD AB         swp b
2175   1177 D8            push b
2176   1178 07 4F 1B      call sprint_signed
2177   117B 51 04 00      add sp, 4
2178   117E             ; --- END FUNCTION CALL
2179   117E 56            add b, a
2180   117F E4            pop a
2181   1180             ; --- END TERMS
2182   1180 E7            pop d
2183   1181 FD 43         mov [d], b
2184   1183             ; p = p + 2; 
2185   1183 FA FF FF      lea d, [bp + -1] ; $p
2186   1186 DA            push d
2187   1187 FA FF FF      lea d, [bp + -1] ; $p
2188   118A 2A            mov b, [d]
2189   118B 38 00 00      mov c, 0
2190   118E             ; --- START TERMS
2191   118E D7            push a
2192   118F 11            mov a, b
2193   1190 FD 2E 02 00   mov32 cb, $00000002
2193   1194 00 00 
2194   1196 56            add b, a
2195   1197 E4            pop a
2196   1198             ; --- END TERMS
2197   1198 E7            pop d
2198   1199 FD 43         mov [d], b
2199   119B             ; break; 
2200   119B 0A C3 12      jmp _switch27_exit ; case break
2201   119E             _switch27_case4:
2202   119E             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
2203   119E FA FB FF      lea d, [bp + -5] ; $sp
2204   11A1 DA            push d
2205   11A2 FA FB FF      lea d, [bp + -5] ; $sp
2206   11A5 2A            mov b, [d]
2207   11A6 38 00 00      mov c, 0
2208   11A9             ; --- START TERMS
2209   11A9 D7            push a
2210   11AA 11            mov a, b
2211   11AB             ; --- START FUNCTION CALL
2212   11AB FA FF FF      lea d, [bp + -1] ; $p
2213   11AE 2A            mov b, [d]
2214   11AF 38 00 00      mov c, 0
2215   11B2 74            mov d, b
2216   11B3 2A            mov b, [d]
2217   11B4 38 00 00      mov c, 0
2218   11B7 FD AB         swp b
2219   11B9 D8            push b
2220   11BA FA FB FF      lea d, [bp + -5] ; $sp
2221   11BD 2A            mov b, [d]
2222   11BE 38 00 00      mov c, 0
2223   11C1 FD AB         swp b
2224   11C3 D8            push b
2225   11C4 07 F7 18      call sprint_unsigned
2226   11C7 51 04 00      add sp, 4
2227   11CA             ; --- END FUNCTION CALL
2228   11CA 56            add b, a
2229   11CB E4            pop a
2230   11CC             ; --- END TERMS
2231   11CC E7            pop d
2232   11CD FD 43         mov [d], b
2233   11CF             ; p = p + 2; 
2234   11CF FA FF FF      lea d, [bp + -1] ; $p
2235   11D2 DA            push d
2236   11D3 FA FF FF      lea d, [bp + -1] ; $p
2237   11D6 2A            mov b, [d]
2238   11D7 38 00 00      mov c, 0
2239   11DA             ; --- START TERMS
2240   11DA D7            push a
2241   11DB 11            mov a, b
2242   11DC FD 2E 02 00   mov32 cb, $00000002
2242   11E0 00 00 
2243   11E2 56            add b, a
2244   11E3 E4            pop a
2245   11E4             ; --- END TERMS
2246   11E4 E7            pop d
2247   11E5 FD 43         mov [d], b
2248   11E7             ; break; 
2249   11E7 0A C3 12      jmp _switch27_exit ; case break
2250   11EA             _switch27_case5:
2251   11EA             
2252   11EA             ; --- BEGIN INLINE ASM SEGMENT
2253   11EA FA FF FF      lea d, [bp + -1] ; $p
2254   11ED FD 2A         mov d, [d]
2255   11EF 2A            mov b, [d]
2256   11F0 07 C8 20      call print_u16x
2257   11F3             ; --- END INLINE ASM SEGMENT
2258   11F3             
2259   11F3             ; p = p + 2; 
2260   11F3 FA FF FF      lea d, [bp + -1] ; $p
2261   11F6 DA            push d
2262   11F7 FA FF FF      lea d, [bp + -1] ; $p
2263   11FA 2A            mov b, [d]
2264   11FB 38 00 00      mov c, 0
2265   11FE             ; --- START TERMS
2266   11FE D7            push a
2267   11FF 11            mov a, b
2268   1200 FD 2E 02 00   mov32 cb, $00000002
2268   1204 00 00 
2269   1206 56            add b, a
2270   1207 E4            pop a
2271   1208             ; --- END TERMS
2272   1208 E7            pop d
2273   1209 FD 43         mov [d], b
2274   120B             ; break; 
2275   120B 0A C3 12      jmp _switch27_exit ; case break
2276   120E             _switch27_case6:
2277   120E             ; *sp++ = *(char *)p; 
2278   120E FA FB FF      lea d, [bp + -5] ; $sp
2279   1211 2A            mov b, [d]
2280   1212 38 00 00      mov c, 0
2281   1215 FD 77         inc b
2282   1217 FA FB FF      lea d, [bp + -5] ; $sp
2283   121A FD 43         mov [d], b
2284   121C FD 7D         dec b
2285   121E D8            push b
2286   121F FA FF FF      lea d, [bp + -1] ; $p
2287   1222 2A            mov b, [d]
2288   1223 38 00 00      mov c, 0
2289   1226 74            mov d, b
2290   1227 32            mov bl, [d]
2291   1228 A7 00         mov bh, 0
2292   122A 38 00 00      mov c, 0
2293   122D E7            pop d
2294   122E FD 3E         mov [d], bl
2295   1230             ; p = p + 1; 
2296   1230 FA FF FF      lea d, [bp + -1] ; $p
2297   1233 DA            push d
2298   1234 FA FF FF      lea d, [bp + -1] ; $p
2299   1237 2A            mov b, [d]
2300   1238 38 00 00      mov c, 0
2301   123B             ; --- START TERMS
2302   123B D7            push a
2303   123C 11            mov a, b
2304   123D FD 2E 01 00   mov32 cb, $00000001
2304   1241 00 00 
2305   1243 56            add b, a
2306   1244 E4            pop a
2307   1245             ; --- END TERMS
2308   1245 E7            pop d
2309   1246 FD 43         mov [d], b
2310   1248             ; break; 
2311   1248 0A C3 12      jmp _switch27_exit ; case break
2312   124B             _switch27_case7:
2313   124B             ; int len = strlen(*(char **)p); 
2314   124B 52 02 00      sub sp, 2
2315   124E             ; --- START LOCAL VAR INITIALIZATION
2316   124E FA F9 FF      lea d, [bp + -7] ; $len
2317   1251 DA            push d
2318   1252             ; --- START FUNCTION CALL
2319   1252 FA FF FF      lea d, [bp + -1] ; $p
2320   1255 2A            mov b, [d]
2321   1256 38 00 00      mov c, 0
2322   1259 74            mov d, b
2323   125A 2A            mov b, [d]
2324   125B FD AB         swp b
2325   125D D8            push b
2326   125E 07 79 06      call strlen
2327   1261 51 02 00      add sp, 2
2328   1264             ; --- END FUNCTION CALL
2329   1264 E7            pop d
2330   1265 FD 43         mov [d], b
2331   1267             ; --- END LOCAL VAR INITIALIZATION
2332   1267             ; strcpy(sp, *(char **)p); 
2333   1267             ; --- START FUNCTION CALL
2334   1267 FA FF FF      lea d, [bp + -1] ; $p
2335   126A 2A            mov b, [d]
2336   126B 38 00 00      mov c, 0
2337   126E 74            mov d, b
2338   126F 2A            mov b, [d]
2339   1270 FD AB         swp b
2340   1272 D8            push b
2341   1273 FA FB FF      lea d, [bp + -5] ; $sp
2342   1276 2A            mov b, [d]
2343   1277 38 00 00      mov c, 0
2344   127A FD AB         swp b
2345   127C D8            push b
2346   127D 07 93 04      call strcpy
2347   1280 51 04 00      add sp, 4
2348   1283             ; --- END FUNCTION CALL
2349   1283             ; sp = sp + len; 
2350   1283 FA FB FF      lea d, [bp + -5] ; $sp
2351   1286 DA            push d
2352   1287 FA FB FF      lea d, [bp + -5] ; $sp
2353   128A 2A            mov b, [d]
2354   128B 38 00 00      mov c, 0
2355   128E             ; --- START TERMS
2356   128E D7            push a
2357   128F 11            mov a, b
2358   1290 FA F9 FF      lea d, [bp + -7] ; $len
2359   1293 2A            mov b, [d]
2360   1294 38 00 00      mov c, 0
2361   1297 56            add b, a
2362   1298 E4            pop a
2363   1299             ; --- END TERMS
2364   1299 E7            pop d
2365   129A FD 43         mov [d], b
2366   129C             ; p = p + 2; 
2367   129C FA FF FF      lea d, [bp + -1] ; $p
2368   129F DA            push d
2369   12A0 FA FF FF      lea d, [bp + -1] ; $p
2370   12A3 2A            mov b, [d]
2371   12A4 38 00 00      mov c, 0
2372   12A7             ; --- START TERMS
2373   12A7 D7            push a
2374   12A8 11            mov a, b
2375   12A9 FD 2E 02 00   mov32 cb, $00000002
2375   12AD 00 00 
2376   12AF 56            add b, a
2377   12B0 E4            pop a
2378   12B1             ; --- END TERMS
2379   12B1 E7            pop d
2380   12B2 FD 43         mov [d], b
2381   12B4             ; break; 
2382   12B4 0A C3 12      jmp _switch27_exit ; case break
2383   12B7             _switch27_default:
2384   12B7             ; print("Error: Unknown argument type.\n"); 
2385   12B7             ; --- START FUNCTION CALL
2386   12B7 26 36 2E      mov b, _s4 ; "Error: Unknown argument type.\n"
2387   12BA FD AB         swp b
2388   12BC D8            push b
2389   12BD 07 65 1D      call print
2390   12C0 51 02 00      add sp, 2
2391   12C3             ; --- END FUNCTION CALL
2392   12C3             _switch27_exit:
2393   12C3             ; format_p++; 
2394   12C3 FA FD FF      lea d, [bp + -3] ; $format_p
2395   12C6 2A            mov b, [d]
2396   12C7 38 00 00      mov c, 0
2397   12CA FD 77         inc b
2398   12CC FA FD FF      lea d, [bp + -3] ; $format_p
2399   12CF FD 43         mov [d], b
2400   12D1 FD 7D         dec b
2401   12D3 0A 01 13      jmp _if26_exit
2402   12D6             _if26_else:
2403   12D6             ; *sp++ = *format_p++; 
2404   12D6 FA FB FF      lea d, [bp + -5] ; $sp
2405   12D9 2A            mov b, [d]
2406   12DA 38 00 00      mov c, 0
2407   12DD FD 77         inc b
2408   12DF FA FB FF      lea d, [bp + -5] ; $sp
2409   12E2 FD 43         mov [d], b
2410   12E4 FD 7D         dec b
2411   12E6 D8            push b
2412   12E7 FA FD FF      lea d, [bp + -3] ; $format_p
2413   12EA 2A            mov b, [d]
2414   12EB 38 00 00      mov c, 0
2415   12EE FD 77         inc b
2416   12F0 FA FD FF      lea d, [bp + -3] ; $format_p
2417   12F3 FD 43         mov [d], b
2418   12F5 FD 7D         dec b
2419   12F7 74            mov d, b
2420   12F8 32            mov bl, [d]
2421   12F9 A7 00         mov bh, 0
2422   12FB 38 00 00      mov c, 0
2423   12FE E7            pop d
2424   12FF FD 3E         mov [d], bl
2425   1301             _if26_exit:
2426   1301             _if25_exit:
2427   1301             _for24_update:
2428   1301 0A B7 0F      jmp _for24_cond
2429   1304             _for24_exit:
2430   1304             ; *sp = '\0'; 
2431   1304 FA FB FF      lea d, [bp + -5] ; $sp
2432   1307 2A            mov b, [d]
2433   1308 38 00 00      mov c, 0
2434   130B D8            push b
2435   130C FD 2E 00 00   mov32 cb, $00000000
2435   1310 00 00 
2436   1312 E7            pop d
2437   1313 FD 3E         mov [d], bl
2438   1315             ; return sp - dest; // return total number of chars written 
2439   1315 FA FB FF      lea d, [bp + -5] ; $sp
2440   1318 2A            mov b, [d]
2441   1319 38 00 00      mov c, 0
2442   131C             ; --- START TERMS
2443   131C D7            push a
2444   131D 11            mov a, b
2445   131E FA 05 00      lea d, [bp + 5] ; $dest
2446   1321 2A            mov b, [d]
2447   1322 38 00 00      mov c, 0
2448   1325 60            sub a, b
2449   1326 27            mov b, a
2450   1327 E4            pop a
2451   1328             ; --- END TERMS
2452   1328 F9            leave
2453   1329 09            ret
2454   132A             
2455   132A             err:
2456   132A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2457   132D             ; print(e); 
2458   132D             ; --- START FUNCTION CALL
2459   132D FA 05 00      lea d, [bp + 5] ; $e
2460   1330 2A            mov b, [d]
2461   1331 38 00 00      mov c, 0
2462   1334 FD AB         swp b
2463   1336 D8            push b
2464   1337 07 65 1D      call print
2465   133A 51 02 00      add sp, 2
2466   133D             ; --- END FUNCTION CALL
2467   133D F9            leave
2468   133E 09            ret
2469   133F             
2470   133F             printx32:
2471   133F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2472   1342             
2473   1342             ; --- BEGIN INLINE ASM SEGMENT
2474   1342 FA 05 00      lea d, [bp + 5] ; $hex
2475   1345 2B 02 00      mov b, [d+2]
2476   1348 07 C8 20      call print_u16x
2477   134B 2A            mov b, [d]
2478   134C 07 C8 20      call print_u16x
2479   134F             ; --- END INLINE ASM SEGMENT
2480   134F             
2481   134F F9            leave
2482   1350 09            ret
2483   1351             
2484   1351             printx16:
2485   1351 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2486   1354             
2487   1354             ; --- BEGIN INLINE ASM SEGMENT
2488   1354 FA 05 00      lea d, [bp + 5] ; $hex
2489   1357 2A            mov b, [d]
2490   1358 07 C8 20      call print_u16x
2491   135B             ; --- END INLINE ASM SEGMENT
2492   135B             
2493   135B F9            leave
2494   135C 09            ret
2495   135D             
2496   135D             printx8:
2497   135D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2498   1360             
2499   1360             ; --- BEGIN INLINE ASM SEGMENT
2500   1360 FA 05 00      lea d, [bp + 5] ; $hex
2501   1363 32            mov bl, [d]
2502   1364 07 0C 21      call print_u8x
2503   1367             ; --- END INLINE ASM SEGMENT
2504   1367             
2505   1367 F9            leave
2506   1368 09            ret
2507   1369             
2508   1369             hex_str_to_int:
2509   1369 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2510   136C             ; int value = 0; 
2511   136C 52 02 00      sub sp, 2
2512   136F             ; --- START LOCAL VAR INITIALIZATION
2513   136F FA FF FF      lea d, [bp + -1] ; $value
2514   1372 DA            push d
2515   1373 FD 2E 00 00   mov32 cb, $00000000
2515   1377 00 00 
2516   1379 E7            pop d
2517   137A FD 43         mov [d], b
2518   137C             ; --- END LOCAL VAR INITIALIZATION
2519   137C             ; int i; 
2520   137C 52 02 00      sub sp, 2
2521   137F             ; char hex_char; 
2522   137F 52 01 00      sub sp, 1
2523   1382             ; int len; 
2524   1382 52 02 00      sub sp, 2
2525   1385             ; len = strlen(hex_string); 
2526   1385 FA FA FF      lea d, [bp + -6] ; $len
2527   1388 DA            push d
2528   1389             ; --- START FUNCTION CALL
2529   1389 FA 05 00      lea d, [bp + 5] ; $hex_string
2530   138C 2A            mov b, [d]
2531   138D 38 00 00      mov c, 0
2532   1390 FD AB         swp b
2533   1392 D8            push b
2534   1393 07 79 06      call strlen
2535   1396 51 02 00      add sp, 2
2536   1399             ; --- END FUNCTION CALL
2537   1399 E7            pop d
2538   139A FD 43         mov [d], b
2539   139C             ; for (i = 0; i < len; i++) { 
2540   139C             _for31_init:
2541   139C FA FD FF      lea d, [bp + -3] ; $i
2542   139F DA            push d
2543   13A0 FD 2E 00 00   mov32 cb, $00000000
2543   13A4 00 00 
2544   13A6 E7            pop d
2545   13A7 FD 43         mov [d], b
2546   13A9             _for31_cond:
2547   13A9 FA FD FF      lea d, [bp + -3] ; $i
2548   13AC 2A            mov b, [d]
2549   13AD 38 00 00      mov c, 0
2550   13B0             ; --- START RELATIONAL
2551   13B0 D7            push a
2552   13B1 11            mov a, b
2553   13B2 FA FA FF      lea d, [bp + -6] ; $len
2554   13B5 2A            mov b, [d]
2555   13B6 38 00 00      mov c, 0
2556   13B9 B0            cmp a, b
2557   13BA FD 73         slt ; < (signed)
2558   13BC E4            pop a
2559   13BD             ; --- END RELATIONAL
2560   13BD C0 00 00      cmp b, 0
2561   13C0 C6 0D 15      je _for31_exit
2562   13C3             _for31_block:
2563   13C3             ; hex_char = hex_string[i]; 
2564   13C3 FA FC FF      lea d, [bp + -4] ; $hex_char
2565   13C6 DA            push d
2566   13C7 FA 05 00      lea d, [bp + 5] ; $hex_string
2567   13CA FD 2A         mov d, [d]
2568   13CC D7            push a
2569   13CD DA            push d
2570   13CE FA FD FF      lea d, [bp + -3] ; $i
2571   13D1 2A            mov b, [d]
2572   13D2 38 00 00      mov c, 0
2573   13D5 E7            pop d
2574   13D6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2575   13DA E4            pop a
2576   13DB 32            mov bl, [d]
2577   13DC A7 00         mov bh, 0
2578   13DE 38 00 00      mov c, 0
2579   13E1 E7            pop d
2580   13E2 FD 3E         mov [d], bl
2581   13E4             ; if (hex_char >= 'a' && hex_char <= 'f')  
2582   13E4             _if32_cond:
2583   13E4 FA FC FF      lea d, [bp + -4] ; $hex_char
2584   13E7 32            mov bl, [d]
2585   13E8 A7 00         mov bh, 0
2586   13EA 38 00 00      mov c, 0
2587   13ED             ; --- START RELATIONAL
2588   13ED D7            push a
2589   13EE 11            mov a, b
2590   13EF FD 2E 61 00   mov32 cb, $00000061
2590   13F3 00 00 
2591   13F5 B0            cmp a, b
2592   13F6 FD 80         sge ; >=
2593   13F8 E4            pop a
2594   13F9             ; --- END RELATIONAL
2595   13F9             ; --- START LOGICAL AND
2596   13F9 D7            push a
2597   13FA 11            mov a, b
2598   13FB FA FC FF      lea d, [bp + -4] ; $hex_char
2599   13FE 32            mov bl, [d]
2600   13FF A7 00         mov bh, 0
2601   1401 38 00 00      mov c, 0
2602   1404             ; --- START RELATIONAL
2603   1404 D7            push a
2604   1405 11            mov a, b
2605   1406 FD 2E 66 00   mov32 cb, $00000066
2605   140A 00 00 
2606   140C B0            cmp a, b
2607   140D FD 74         sle ; <= (signed)
2608   140F E4            pop a
2609   1410             ; --- END RELATIONAL
2610   1410 FD A7         sand a, b
2611   1412 E4            pop a
2612   1413             ; --- END LOGICAL AND
2613   1413 C0 00 00      cmp b, 0
2614   1416 C6 56 14      je _if32_else
2615   1419             _if32_true:
2616   1419             ; value = (value * 16) + (hex_char - 'a' + 10); 
2617   1419 FA FF FF      lea d, [bp + -1] ; $value
2618   141C DA            push d
2619   141D FA FF FF      lea d, [bp + -1] ; $value
2620   1420 2A            mov b, [d]
2621   1421 38 00 00      mov c, 0
2622   1424             ; --- START FACTORS
2623   1424 D7            push a
2624   1425 11            mov a, b
2625   1426 FD 2E 10 00   mov32 cb, $00000010
2625   142A 00 00 
2626   142C AC            mul a, b ; *
2627   142D 11            mov a, b
2628   142E 27            mov b, a
2629   142F E4            pop a
2630   1430             ; --- END FACTORS
2631   1430             ; --- START TERMS
2632   1430 D7            push a
2633   1431 11            mov a, b
2634   1432 FA FC FF      lea d, [bp + -4] ; $hex_char
2635   1435 32            mov bl, [d]
2636   1436 A7 00         mov bh, 0
2637   1438 38 00 00      mov c, 0
2638   143B             ; --- START TERMS
2639   143B D7            push a
2640   143C 11            mov a, b
2641   143D FD 2E 61 00   mov32 cb, $00000061
2641   1441 00 00 
2642   1443 60            sub a, b
2643   1444 27            mov b, a
2644   1445 11            mov a, b
2645   1446 FD 2E 0A 00   mov32 cb, $0000000a
2645   144A 00 00 
2646   144C 56            add b, a
2647   144D E4            pop a
2648   144E             ; --- END TERMS
2649   144E 56            add b, a
2650   144F E4            pop a
2651   1450             ; --- END TERMS
2652   1450 E7            pop d
2653   1451 FD 43         mov [d], b
2654   1453 0A FA 14      jmp _if32_exit
2655   1456             _if32_else:
2656   1456             ; if (hex_char >= 'A' && hex_char <= 'F')  
2657   1456             _if33_cond:
2658   1456 FA FC FF      lea d, [bp + -4] ; $hex_char
2659   1459 32            mov bl, [d]
2660   145A A7 00         mov bh, 0
2661   145C 38 00 00      mov c, 0
2662   145F             ; --- START RELATIONAL
2663   145F D7            push a
2664   1460 11            mov a, b
2665   1461 FD 2E 41 00   mov32 cb, $00000041
2665   1465 00 00 
2666   1467 B0            cmp a, b
2667   1468 FD 80         sge ; >=
2668   146A E4            pop a
2669   146B             ; --- END RELATIONAL
2670   146B             ; --- START LOGICAL AND
2671   146B D7            push a
2672   146C 11            mov a, b
2673   146D FA FC FF      lea d, [bp + -4] ; $hex_char
2674   1470 32            mov bl, [d]
2675   1471 A7 00         mov bh, 0
2676   1473 38 00 00      mov c, 0
2677   1476             ; --- START RELATIONAL
2678   1476 D7            push a
2679   1477 11            mov a, b
2680   1478 FD 2E 46 00   mov32 cb, $00000046
2680   147C 00 00 
2681   147E B0            cmp a, b
2682   147F FD 74         sle ; <= (signed)
2683   1481 E4            pop a
2684   1482             ; --- END RELATIONAL
2685   1482 FD A7         sand a, b
2686   1484 E4            pop a
2687   1485             ; --- END LOGICAL AND
2688   1485 C0 00 00      cmp b, 0
2689   1488 C6 C8 14      je _if33_else
2690   148B             _if33_true:
2691   148B             ; value = (value * 16) + (hex_char - 'A' + 10); 
2692   148B FA FF FF      lea d, [bp + -1] ; $value
2693   148E DA            push d
2694   148F FA FF FF      lea d, [bp + -1] ; $value
2695   1492 2A            mov b, [d]
2696   1493 38 00 00      mov c, 0
2697   1496             ; --- START FACTORS
2698   1496 D7            push a
2699   1497 11            mov a, b
2700   1498 FD 2E 10 00   mov32 cb, $00000010
2700   149C 00 00 
2701   149E AC            mul a, b ; *
2702   149F 11            mov a, b
2703   14A0 27            mov b, a
2704   14A1 E4            pop a
2705   14A2             ; --- END FACTORS
2706   14A2             ; --- START TERMS
2707   14A2 D7            push a
2708   14A3 11            mov a, b
2709   14A4 FA FC FF      lea d, [bp + -4] ; $hex_char
2710   14A7 32            mov bl, [d]
2711   14A8 A7 00         mov bh, 0
2712   14AA 38 00 00      mov c, 0
2713   14AD             ; --- START TERMS
2714   14AD D7            push a
2715   14AE 11            mov a, b
2716   14AF FD 2E 41 00   mov32 cb, $00000041
2716   14B3 00 00 
2717   14B5 60            sub a, b
2718   14B6 27            mov b, a
2719   14B7 11            mov a, b
2720   14B8 FD 2E 0A 00   mov32 cb, $0000000a
2720   14BC 00 00 
2721   14BE 56            add b, a
2722   14BF E4            pop a
2723   14C0             ; --- END TERMS
2724   14C0 56            add b, a
2725   14C1 E4            pop a
2726   14C2             ; --- END TERMS
2727   14C2 E7            pop d
2728   14C3 FD 43         mov [d], b
2729   14C5 0A FA 14      jmp _if33_exit
2730   14C8             _if33_else:
2731   14C8             ; value = (value * 16) + (hex_char - '0'); 
2732   14C8 FA FF FF      lea d, [bp + -1] ; $value
2733   14CB DA            push d
2734   14CC FA FF FF      lea d, [bp + -1] ; $value
2735   14CF 2A            mov b, [d]
2736   14D0 38 00 00      mov c, 0
2737   14D3             ; --- START FACTORS
2738   14D3 D7            push a
2739   14D4 11            mov a, b
2740   14D5 FD 2E 10 00   mov32 cb, $00000010
2740   14D9 00 00 
2741   14DB AC            mul a, b ; *
2742   14DC 11            mov a, b
2743   14DD 27            mov b, a
2744   14DE E4            pop a
2745   14DF             ; --- END FACTORS
2746   14DF             ; --- START TERMS
2747   14DF D7            push a
2748   14E0 11            mov a, b
2749   14E1 FA FC FF      lea d, [bp + -4] ; $hex_char
2750   14E4 32            mov bl, [d]
2751   14E5 A7 00         mov bh, 0
2752   14E7 38 00 00      mov c, 0
2753   14EA             ; --- START TERMS
2754   14EA D7            push a
2755   14EB 11            mov a, b
2756   14EC FD 2E 30 00   mov32 cb, $00000030
2756   14F0 00 00 
2757   14F2 60            sub a, b
2758   14F3 27            mov b, a
2759   14F4 E4            pop a
2760   14F5             ; --- END TERMS
2761   14F5 56            add b, a
2762   14F6 E4            pop a
2763   14F7             ; --- END TERMS
2764   14F7 E7            pop d
2765   14F8 FD 43         mov [d], b
2766   14FA             _if33_exit:
2767   14FA             _if32_exit:
2768   14FA             _for31_update:
2769   14FA FA FD FF      lea d, [bp + -3] ; $i
2770   14FD 2A            mov b, [d]
2771   14FE 38 00 00      mov c, 0
2772   1501 FD 77         inc b
2773   1503 FA FD FF      lea d, [bp + -3] ; $i
2774   1506 FD 43         mov [d], b
2775   1508 FD 7D         dec b
2776   150A 0A A9 13      jmp _for31_cond
2777   150D             _for31_exit:
2778   150D             ; return value; 
2779   150D FA FF FF      lea d, [bp + -1] ; $value
2780   1510 2A            mov b, [d]
2781   1511 38 00 00      mov c, 0
2782   1514 F9            leave
2783   1515 09            ret
2784   1516             
2785   1516             gets:
2786   1516 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2787   1519             
2788   1519             ; --- BEGIN INLINE ASM SEGMENT
2789   1519 FA 05 00      lea d, [bp + 5] ; $s
2790   151C 15            mov a, [d]
2791   151D 3C            mov d, a
2792   151E 07 2D 1F      call _gets
2793   1521             ; --- END INLINE ASM SEGMENT
2794   1521             
2795   1521             ; return strlen(s); 
2796   1521             ; --- START FUNCTION CALL
2797   1521 FA 05 00      lea d, [bp + 5] ; $s
2798   1524 2A            mov b, [d]
2799   1525 38 00 00      mov c, 0
2800   1528 FD AB         swp b
2801   152A D8            push b
2802   152B 07 79 06      call strlen
2803   152E 51 02 00      add sp, 2
2804   1531             ; --- END FUNCTION CALL
2805   1531 F9            leave
2806   1532 09            ret
2807   1533             
2808   1533             print_signed:
2809   1533 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2810   1536             ; char digits[5]; 
2811   1536 52 05 00      sub sp, 5
2812   1539             ; int i = 0; 
2813   1539 52 02 00      sub sp, 2
2814   153C             ; --- START LOCAL VAR INITIALIZATION
2815   153C FA FA FF      lea d, [bp + -6] ; $i
2816   153F DA            push d
2817   1540 FD 2E 00 00   mov32 cb, $00000000
2817   1544 00 00 
2818   1546 E7            pop d
2819   1547 FD 43         mov [d], b
2820   1549             ; --- END LOCAL VAR INITIALIZATION
2821   1549             ; if (num < 0) { 
2822   1549             _if34_cond:
2823   1549 FA 05 00      lea d, [bp + 5] ; $num
2824   154C 2A            mov b, [d]
2825   154D 38 00 00      mov c, 0
2826   1550             ; --- START RELATIONAL
2827   1550 D7            push a
2828   1551 11            mov a, b
2829   1552 FD 2E 00 00   mov32 cb, $00000000
2829   1556 00 00 
2830   1558 B0            cmp a, b
2831   1559 FD 73         slt ; < (signed)
2832   155B E4            pop a
2833   155C             ; --- END RELATIONAL
2834   155C C0 00 00      cmp b, 0
2835   155F C6 82 15      je _if34_else
2836   1562             _if34_true:
2837   1562             ; putchar('-'); 
2838   1562             ; --- START FUNCTION CALL
2839   1562 FD 2E 2D 00   mov32 cb, $0000002d
2839   1566 00 00 
2840   1568 DD            push bl
2841   1569 07 17 1D      call putchar
2842   156C 51 01 00      add sp, 1
2843   156F             ; --- END FUNCTION CALL
2844   156F             ; num = -num; 
2845   156F FA 05 00      lea d, [bp + 5] ; $num
2846   1572 DA            push d
2847   1573 FA 05 00      lea d, [bp + 5] ; $num
2848   1576 2A            mov b, [d]
2849   1577 38 00 00      mov c, 0
2850   157A FD 97         neg b
2851   157C E7            pop d
2852   157D FD 43         mov [d], b
2853   157F 0A AD 15      jmp _if34_exit
2854   1582             _if34_else:
2855   1582             ; if (num == 0) { 
2856   1582             _if35_cond:
2857   1582 FA 05 00      lea d, [bp + 5] ; $num
2858   1585 2A            mov b, [d]
2859   1586 38 00 00      mov c, 0
2860   1589             ; --- START RELATIONAL
2861   1589 D7            push a
2862   158A 11            mov a, b
2863   158B FD 2E 00 00   mov32 cb, $00000000
2863   158F 00 00 
2864   1591 B0            cmp a, b
2865   1592 FD 71         seq ; ==
2866   1594 E4            pop a
2867   1595             ; --- END RELATIONAL
2868   1595 C0 00 00      cmp b, 0
2869   1598 C6 AD 15      je _if35_exit
2870   159B             _if35_true:
2871   159B             ; putchar('0'); 
2872   159B             ; --- START FUNCTION CALL
2873   159B FD 2E 30 00   mov32 cb, $00000030
2873   159F 00 00 
2874   15A1 DD            push bl
2875   15A2 07 17 1D      call putchar
2876   15A5 51 01 00      add sp, 1
2877   15A8             ; --- END FUNCTION CALL
2878   15A8             ; return; 
2879   15A8 F9            leave
2880   15A9 09            ret
2881   15AA 0A AD 15      jmp _if35_exit
2882   15AD             _if35_exit:
2883   15AD             _if34_exit:
2884   15AD             ; while (num > 0) { 
2885   15AD             _while36_cond:
2886   15AD FA 05 00      lea d, [bp + 5] ; $num
2887   15B0 2A            mov b, [d]
2888   15B1 38 00 00      mov c, 0
2889   15B4             ; --- START RELATIONAL
2890   15B4 D7            push a
2891   15B5 11            mov a, b
2892   15B6 FD 2E 00 00   mov32 cb, $00000000
2892   15BA 00 00 
2893   15BC B0            cmp a, b
2894   15BD FD 7F         sgt ; >
2895   15BF E4            pop a
2896   15C0             ; --- END RELATIONAL
2897   15C0 C0 00 00      cmp b, 0
2898   15C3 C6 22 16      je _while36_exit
2899   15C6             _while36_block:
2900   15C6             ; digits[i] = '0' + (num % 10); 
2901   15C6 FA FC FF      lea d, [bp + -4] ; $digits
2902   15C9 D7            push a
2903   15CA DA            push d
2904   15CB FA FA FF      lea d, [bp + -6] ; $i
2905   15CE 2A            mov b, [d]
2906   15CF 38 00 00      mov c, 0
2907   15D2 E7            pop d
2908   15D3 5A            add d, b
2909   15D4 E4            pop a
2910   15D5 DA            push d
2911   15D6 FD 2E 30 00   mov32 cb, $00000030
2911   15DA 00 00 
2912   15DC             ; --- START TERMS
2913   15DC D7            push a
2914   15DD 11            mov a, b
2915   15DE FA 05 00      lea d, [bp + 5] ; $num
2916   15E1 2A            mov b, [d]
2917   15E2 38 00 00      mov c, 0
2918   15E5             ; --- START FACTORS
2919   15E5 D7            push a
2920   15E6 11            mov a, b
2921   15E7 FD 2E 0A 00   mov32 cb, $0000000a
2921   15EB 00 00 
2922   15ED AE            div a, b ; 
2923   15EE 11            mov a, b
2924   15EF 27            mov b, a
2925   15F0 E4            pop a
2926   15F1             ; --- END FACTORS
2927   15F1 56            add b, a
2928   15F2 E4            pop a
2929   15F3             ; --- END TERMS
2930   15F3 E7            pop d
2931   15F4 FD 3E         mov [d], bl
2932   15F6             ; num = num / 10; 
2933   15F6 FA 05 00      lea d, [bp + 5] ; $num
2934   15F9 DA            push d
2935   15FA FA 05 00      lea d, [bp + 5] ; $num
2936   15FD 2A            mov b, [d]
2937   15FE 38 00 00      mov c, 0
2938   1601             ; --- START FACTORS
2939   1601 D7            push a
2940   1602 11            mov a, b
2941   1603 FD 2E 0A 00   mov32 cb, $0000000a
2941   1607 00 00 
2942   1609 AE            div a, b
2943   160A 27            mov b, a
2944   160B E4            pop a
2945   160C             ; --- END FACTORS
2946   160C E7            pop d
2947   160D FD 43         mov [d], b
2948   160F             ; i++; 
2949   160F FA FA FF      lea d, [bp + -6] ; $i
2950   1612 2A            mov b, [d]
2951   1613 38 00 00      mov c, 0
2952   1616 FD 77         inc b
2953   1618 FA FA FF      lea d, [bp + -6] ; $i
2954   161B FD 43         mov [d], b
2955   161D FD 7D         dec b
2956   161F 0A AD 15      jmp _while36_cond
2957   1622             _while36_exit:
2958   1622             ; while (i > 0) { 
2959   1622             _while37_cond:
2960   1622 FA FA FF      lea d, [bp + -6] ; $i
2961   1625 2A            mov b, [d]
2962   1626 38 00 00      mov c, 0
2963   1629             ; --- START RELATIONAL
2964   1629 D7            push a
2965   162A 11            mov a, b
2966   162B FD 2E 00 00   mov32 cb, $00000000
2966   162F 00 00 
2967   1631 B0            cmp a, b
2968   1632 FD 7F         sgt ; >
2969   1634 E4            pop a
2970   1635             ; --- END RELATIONAL
2971   1635 C0 00 00      cmp b, 0
2972   1638 C6 6A 16      je _while37_exit
2973   163B             _while37_block:
2974   163B             ; i--; 
2975   163B FA FA FF      lea d, [bp + -6] ; $i
2976   163E 2A            mov b, [d]
2977   163F 38 00 00      mov c, 0
2978   1642 FD 7D         dec b
2979   1644 FA FA FF      lea d, [bp + -6] ; $i
2980   1647 FD 43         mov [d], b
2981   1649 FD 77         inc b
2982   164B             ; putchar(digits[i]); 
2983   164B             ; --- START FUNCTION CALL
2984   164B FA FC FF      lea d, [bp + -4] ; $digits
2985   164E D7            push a
2986   164F DA            push d
2987   1650 FA FA FF      lea d, [bp + -6] ; $i
2988   1653 2A            mov b, [d]
2989   1654 38 00 00      mov c, 0
2990   1657 E7            pop d
2991   1658 5A            add d, b
2992   1659 E4            pop a
2993   165A 32            mov bl, [d]
2994   165B A7 00         mov bh, 0
2995   165D 38 00 00      mov c, 0
2996   1660 DD            push bl
2997   1661 07 17 1D      call putchar
2998   1664 51 01 00      add sp, 1
2999   1667             ; --- END FUNCTION CALL
3000   1667 0A 22 16      jmp _while37_cond
3001   166A             _while37_exit:
3002   166A F9            leave
3003   166B 09            ret
3004   166C             
3005   166C             print_signed_long:
3006   166C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3007   166F             ; char digits[10]; 
3008   166F 52 0A 00      sub sp, 10
3009   1672             ; int i = 0; 
3010   1672 52 02 00      sub sp, 2
3011   1675             ; --- START LOCAL VAR INITIALIZATION
3012   1675 FA F5 FF      lea d, [bp + -11] ; $i
3013   1678 DA            push d
3014   1679 FD 2E 00 00   mov32 cb, $00000000
3014   167D 00 00 
3015   167F E7            pop d
3016   1680 FD 43         mov [d], b
3017   1682             ; --- END LOCAL VAR INITIALIZATION
3018   1682             ; if (num < 0) { 
3019   1682             _if38_cond:
3020   1682 FA 05 00      lea d, [bp + 5] ; $num
3021   1685 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3022   1688 FD 39         mov c, b ; And place it into C
3023   168A 2A            mov b, [d] ; Lower Word in B
3024   168B             ; --- START RELATIONAL
3025   168B D7            push a
3026   168C FD D8         push g
3027   168E 11            mov a, b
3028   168F FD 7A         mov g, c
3029   1691 FD 2E 00 00   mov32 cb, $00000000
3029   1695 00 00 
3030   1697 FD AF         cmp32 ga, cb
3031   1699 FD 73         slt ; <
3032   169B FD F1         pop g
3033   169D E4            pop a
3034   169E             ; --- END RELATIONAL
3035   169E C0 00 00      cmp b, 0
3036   16A1 C6 D5 16      je _if38_else
3037   16A4             _if38_true:
3038   16A4             ; putchar('-'); 
3039   16A4             ; --- START FUNCTION CALL
3040   16A4 FD 2E 2D 00   mov32 cb, $0000002d
3040   16A8 00 00 
3041   16AA DD            push bl
3042   16AB 07 17 1D      call putchar
3043   16AE 51 01 00      add sp, 1
3044   16B1             ; --- END FUNCTION CALL
3045   16B1             ; num = -num; 
3046   16B1 FA 05 00      lea d, [bp + 5] ; $num
3047   16B4 DA            push d
3048   16B5 FA 05 00      lea d, [bp + 5] ; $num
3049   16B8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3050   16BB FD 39         mov c, b ; And place it into C
3051   16BD 2A            mov b, [d] ; Lower Word in B
3052   16BE 12            mov a, c
3053   16BF 95            not a
3054   16C0 97            not b
3055   16C1 55 01 00      add b, 1
3056   16C4 5B 00 00      adc a, 0
3057   16C7 39            mov c, a
3058   16C8 E7            pop d
3059   16C9 FD 43         mov [d], b
3060   16CB 26 00 00      mov b, 0
3061   16CE FD 44 02 00   mov [d + 2], b
3062   16D2 0A 09 17      jmp _if38_exit
3063   16D5             _if38_else:
3064   16D5             ; if (num == 0) { 
3065   16D5             _if39_cond:
3066   16D5 FA 05 00      lea d, [bp + 5] ; $num
3067   16D8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3068   16DB FD 39         mov c, b ; And place it into C
3069   16DD 2A            mov b, [d] ; Lower Word in B
3070   16DE             ; --- START RELATIONAL
3071   16DE D7            push a
3072   16DF FD D8         push g
3073   16E1 11            mov a, b
3074   16E2 FD 7A         mov g, c
3075   16E4 FD 2E 00 00   mov32 cb, $00000000
3075   16E8 00 00 
3076   16EA FD AF         cmp32 ga, cb
3077   16EC FD 71         seq ; ==
3078   16EE FD F1         pop g
3079   16F0 E4            pop a
3080   16F1             ; --- END RELATIONAL
3081   16F1 C0 00 00      cmp b, 0
3082   16F4 C6 09 17      je _if39_exit
3083   16F7             _if39_true:
3084   16F7             ; putchar('0'); 
3085   16F7             ; --- START FUNCTION CALL
3086   16F7 FD 2E 30 00   mov32 cb, $00000030
3086   16FB 00 00 
3087   16FD DD            push bl
3088   16FE 07 17 1D      call putchar
3089   1701 51 01 00      add sp, 1
3090   1704             ; --- END FUNCTION CALL
3091   1704             ; return; 
3092   1704 F9            leave
3093   1705 09            ret
3094   1706 0A 09 17      jmp _if39_exit
3095   1709             _if39_exit:
3096   1709             _if38_exit:
3097   1709             ; while (num > 0) { 
3098   1709             _while40_cond:
3099   1709 FA 05 00      lea d, [bp + 5] ; $num
3100   170C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3101   170F FD 39         mov c, b ; And place it into C
3102   1711 2A            mov b, [d] ; Lower Word in B
3103   1712             ; --- START RELATIONAL
3104   1712 D7            push a
3105   1713 FD D8         push g
3106   1715 11            mov a, b
3107   1716 FD 7A         mov g, c
3108   1718 FD 2E 00 00   mov32 cb, $00000000
3108   171C 00 00 
3109   171E FD AF         cmp32 ga, cb
3110   1720 FD 7F         sgt
3111   1722 FD F1         pop g
3112   1724 E4            pop a
3113   1725             ; --- END RELATIONAL
3114   1725 C0 00 00      cmp b, 0
3115   1728 C6 91 17      je _while40_exit
3116   172B             _while40_block:
3117   172B             ; digits[i] = '0' + (num % 10); 
3118   172B FA F7 FF      lea d, [bp + -9] ; $digits
3119   172E D7            push a
3120   172F DA            push d
3121   1730 FA F5 FF      lea d, [bp + -11] ; $i
3122   1733 2A            mov b, [d]
3123   1734 38 00 00      mov c, 0
3124   1737 E7            pop d
3125   1738 5A            add d, b
3126   1739 E4            pop a
3127   173A DA            push d
3128   173B FD 2E 30 00   mov32 cb, $00000030
3128   173F 00 00 
3129   1741             ; --- START TERMS
3130   1741 D7            push a
3131   1742 11            mov a, b
3132   1743 FA 05 00      lea d, [bp + 5] ; $num
3133   1746 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3134   1749 FD 39         mov c, b ; And place it into C
3135   174B 2A            mov b, [d] ; Lower Word in B
3136   174C             ; --- START FACTORS
3137   174C D7            push a
3138   174D 11            mov a, b
3139   174E FD 2E 0A 00   mov32 cb, $0000000a
3139   1752 00 00 
3140   1754 AE            div a, b ; 
3141   1755 11            mov a, b
3142   1756 27            mov b, a
3143   1757 E4            pop a
3144   1758             ; --- END FACTORS
3145   1758 FD 15         add32 cb, ga
3146   175A E4            pop a
3147   175B             ; --- END TERMS
3148   175B E7            pop d
3149   175C FD 3E         mov [d], bl
3150   175E             ; num = num / 10; 
3151   175E FA 05 00      lea d, [bp + 5] ; $num
3152   1761 DA            push d
3153   1762 FA 05 00      lea d, [bp + 5] ; $num
3154   1765 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3155   1768 FD 39         mov c, b ; And place it into C
3156   176A 2A            mov b, [d] ; Lower Word in B
3157   176B             ; --- START FACTORS
3158   176B D7            push a
3159   176C 11            mov a, b
3160   176D FD 2E 0A 00   mov32 cb, $0000000a
3160   1771 00 00 
3161   1773 AE            div a, b
3162   1774 27            mov b, a
3163   1775 E4            pop a
3164   1776             ; --- END FACTORS
3165   1776 E7            pop d
3166   1777 FD 43         mov [d], b
3167   1779 28            mov b, c
3168   177A FD 44 02 00   mov [d + 2], b
3169   177E             ; i++; 
3170   177E FA F5 FF      lea d, [bp + -11] ; $i
3171   1781 2A            mov b, [d]
3172   1782 38 00 00      mov c, 0
3173   1785 FD 77         inc b
3174   1787 FA F5 FF      lea d, [bp + -11] ; $i
3175   178A FD 43         mov [d], b
3176   178C FD 7D         dec b
3177   178E 0A 09 17      jmp _while40_cond
3178   1791             _while40_exit:
3179   1791             ; while (i > 0) { 
3180   1791             _while41_cond:
3181   1791 FA F5 FF      lea d, [bp + -11] ; $i
3182   1794 2A            mov b, [d]
3183   1795 38 00 00      mov c, 0
3184   1798             ; --- START RELATIONAL
3185   1798 D7            push a
3186   1799 11            mov a, b
3187   179A FD 2E 00 00   mov32 cb, $00000000
3187   179E 00 00 
3188   17A0 B0            cmp a, b
3189   17A1 FD 7F         sgt ; >
3190   17A3 E4            pop a
3191   17A4             ; --- END RELATIONAL
3192   17A4 C0 00 00      cmp b, 0
3193   17A7 C6 D9 17      je _while41_exit
3194   17AA             _while41_block:
3195   17AA             ; i--; 
3196   17AA FA F5 FF      lea d, [bp + -11] ; $i
3197   17AD 2A            mov b, [d]
3198   17AE 38 00 00      mov c, 0
3199   17B1 FD 7D         dec b
3200   17B3 FA F5 FF      lea d, [bp + -11] ; $i
3201   17B6 FD 43         mov [d], b
3202   17B8 FD 77         inc b
3203   17BA             ; putchar(digits[i]); 
3204   17BA             ; --- START FUNCTION CALL
3205   17BA FA F7 FF      lea d, [bp + -9] ; $digits
3206   17BD D7            push a
3207   17BE DA            push d
3208   17BF FA F5 FF      lea d, [bp + -11] ; $i
3209   17C2 2A            mov b, [d]
3210   17C3 38 00 00      mov c, 0
3211   17C6 E7            pop d
3212   17C7 5A            add d, b
3213   17C8 E4            pop a
3214   17C9 32            mov bl, [d]
3215   17CA A7 00         mov bh, 0
3216   17CC 38 00 00      mov c, 0
3217   17CF DD            push bl
3218   17D0 07 17 1D      call putchar
3219   17D3 51 01 00      add sp, 1
3220   17D6             ; --- END FUNCTION CALL
3221   17D6 0A 91 17      jmp _while41_cond
3222   17D9             _while41_exit:
3223   17D9 F9            leave
3224   17DA 09            ret
3225   17DB             
3226   17DB             print_unsigned_long:
3227   17DB F8 00 00      enter 0 ; (push bp; mov bp, sp)
3228   17DE             ; char digits[10]; 
3229   17DE 52 0A 00      sub sp, 10
3230   17E1             ; int i; 
3231   17E1 52 02 00      sub sp, 2
3232   17E4             ; i = 0; 
3233   17E4 FA F5 FF      lea d, [bp + -11] ; $i
3234   17E7 DA            push d
3235   17E8 FD 2E 00 00   mov32 cb, $00000000
3235   17EC 00 00 
3236   17EE E7            pop d
3237   17EF FD 43         mov [d], b
3238   17F1             ; if(num == 0){ 
3239   17F1             _if42_cond:
3240   17F1 FA 05 00      lea d, [bp + 5] ; $num
3241   17F4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3242   17F7 FD 39         mov c, b ; And place it into C
3243   17F9 2A            mov b, [d] ; Lower Word in B
3244   17FA             ; --- START RELATIONAL
3245   17FA D7            push a
3246   17FB FD D8         push g
3247   17FD 11            mov a, b
3248   17FE FD 7A         mov g, c
3249   1800 FD 2E 00 00   mov32 cb, $00000000
3249   1804 00 00 
3250   1806 FD AF         cmp32 ga, cb
3251   1808 FD 71         seq ; ==
3252   180A FD F1         pop g
3253   180C E4            pop a
3254   180D             ; --- END RELATIONAL
3255   180D C0 00 00      cmp b, 0
3256   1810 C6 25 18      je _if42_exit
3257   1813             _if42_true:
3258   1813             ; putchar('0'); 
3259   1813             ; --- START FUNCTION CALL
3260   1813 FD 2E 30 00   mov32 cb, $00000030
3260   1817 00 00 
3261   1819 DD            push bl
3262   181A 07 17 1D      call putchar
3263   181D 51 01 00      add sp, 1
3264   1820             ; --- END FUNCTION CALL
3265   1820             ; return; 
3266   1820 F9            leave
3267   1821 09            ret
3268   1822 0A 25 18      jmp _if42_exit
3269   1825             _if42_exit:
3270   1825             ; while (num > 0) { 
3271   1825             _while43_cond:
3272   1825 FA 05 00      lea d, [bp + 5] ; $num
3273   1828 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3274   182B FD 39         mov c, b ; And place it into C
3275   182D 2A            mov b, [d] ; Lower Word in B
3276   182E             ; --- START RELATIONAL
3277   182E D7            push a
3278   182F FD D8         push g
3279   1831 11            mov a, b
3280   1832 FD 7A         mov g, c
3281   1834 FD 2E 00 00   mov32 cb, $00000000
3281   1838 00 00 
3282   183A FD AF         cmp32 ga, cb
3283   183C FD 81         sgu
3284   183E FD F1         pop g
3285   1840 E4            pop a
3286   1841             ; --- END RELATIONAL
3287   1841 C0 00 00      cmp b, 0
3288   1844 C6 AD 18      je _while43_exit
3289   1847             _while43_block:
3290   1847             ; digits[i] = '0' + (num % 10); 
3291   1847 FA F7 FF      lea d, [bp + -9] ; $digits
3292   184A D7            push a
3293   184B DA            push d
3294   184C FA F5 FF      lea d, [bp + -11] ; $i
3295   184F 2A            mov b, [d]
3296   1850 38 00 00      mov c, 0
3297   1853 E7            pop d
3298   1854 5A            add d, b
3299   1855 E4            pop a
3300   1856 DA            push d
3301   1857 FD 2E 30 00   mov32 cb, $00000030
3301   185B 00 00 
3302   185D             ; --- START TERMS
3303   185D D7            push a
3304   185E 11            mov a, b
3305   185F FA 05 00      lea d, [bp + 5] ; $num
3306   1862 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3307   1865 FD 39         mov c, b ; And place it into C
3308   1867 2A            mov b, [d] ; Lower Word in B
3309   1868             ; --- START FACTORS
3310   1868 D7            push a
3311   1869 11            mov a, b
3312   186A FD 2E 0A 00   mov32 cb, $0000000a
3312   186E 00 00 
3313   1870 AE            div a, b ; 
3314   1871 11            mov a, b
3315   1872 27            mov b, a
3316   1873 E4            pop a
3317   1874             ; --- END FACTORS
3318   1874 FD 15         add32 cb, ga
3319   1876 E4            pop a
3320   1877             ; --- END TERMS
3321   1877 E7            pop d
3322   1878 FD 3E         mov [d], bl
3323   187A             ; num = num / 10; 
3324   187A FA 05 00      lea d, [bp + 5] ; $num
3325   187D DA            push d
3326   187E FA 05 00      lea d, [bp + 5] ; $num
3327   1881 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3328   1884 FD 39         mov c, b ; And place it into C
3329   1886 2A            mov b, [d] ; Lower Word in B
3330   1887             ; --- START FACTORS
3331   1887 D7            push a
3332   1888 11            mov a, b
3333   1889 FD 2E 0A 00   mov32 cb, $0000000a
3333   188D 00 00 
3334   188F AE            div a, b
3335   1890 27            mov b, a
3336   1891 E4            pop a
3337   1892             ; --- END FACTORS
3338   1892 E7            pop d
3339   1893 FD 43         mov [d], b
3340   1895 28            mov b, c
3341   1896 FD 44 02 00   mov [d + 2], b
3342   189A             ; i++; 
3343   189A FA F5 FF      lea d, [bp + -11] ; $i
3344   189D 2A            mov b, [d]
3345   189E 38 00 00      mov c, 0
3346   18A1 FD 77         inc b
3347   18A3 FA F5 FF      lea d, [bp + -11] ; $i
3348   18A6 FD 43         mov [d], b
3349   18A8 FD 7D         dec b
3350   18AA 0A 25 18      jmp _while43_cond
3351   18AD             _while43_exit:
3352   18AD             ; while (i > 0) { 
3353   18AD             _while44_cond:
3354   18AD FA F5 FF      lea d, [bp + -11] ; $i
3355   18B0 2A            mov b, [d]
3356   18B1 38 00 00      mov c, 0
3357   18B4             ; --- START RELATIONAL
3358   18B4 D7            push a
3359   18B5 11            mov a, b
3360   18B6 FD 2E 00 00   mov32 cb, $00000000
3360   18BA 00 00 
3361   18BC B0            cmp a, b
3362   18BD FD 7F         sgt ; >
3363   18BF E4            pop a
3364   18C0             ; --- END RELATIONAL
3365   18C0 C0 00 00      cmp b, 0
3366   18C3 C6 F5 18      je _while44_exit
3367   18C6             _while44_block:
3368   18C6             ; i--; 
3369   18C6 FA F5 FF      lea d, [bp + -11] ; $i
3370   18C9 2A            mov b, [d]
3371   18CA 38 00 00      mov c, 0
3372   18CD FD 7D         dec b
3373   18CF FA F5 FF      lea d, [bp + -11] ; $i
3374   18D2 FD 43         mov [d], b
3375   18D4 FD 77         inc b
3376   18D6             ; putchar(digits[i]); 
3377   18D6             ; --- START FUNCTION CALL
3378   18D6 FA F7 FF      lea d, [bp + -9] ; $digits
3379   18D9 D7            push a
3380   18DA DA            push d
3381   18DB FA F5 FF      lea d, [bp + -11] ; $i
3382   18DE 2A            mov b, [d]
3383   18DF 38 00 00      mov c, 0
3384   18E2 E7            pop d
3385   18E3 5A            add d, b
3386   18E4 E4            pop a
3387   18E5 32            mov bl, [d]
3388   18E6 A7 00         mov bh, 0
3389   18E8 38 00 00      mov c, 0
3390   18EB DD            push bl
3391   18EC 07 17 1D      call putchar
3392   18EF 51 01 00      add sp, 1
3393   18F2             ; --- END FUNCTION CALL
3394   18F2 0A AD 18      jmp _while44_cond
3395   18F5             _while44_exit:
3396   18F5 F9            leave
3397   18F6 09            ret
3398   18F7             
3399   18F7             sprint_unsigned:
3400   18F7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3401   18FA             ; char digits[5]; 
3402   18FA 52 05 00      sub sp, 5
3403   18FD             ; int i; 
3404   18FD 52 02 00      sub sp, 2
3405   1900             ; int len = 0; 
3406   1900 52 02 00      sub sp, 2
3407   1903             ; --- START LOCAL VAR INITIALIZATION
3408   1903 FA F8 FF      lea d, [bp + -8] ; $len
3409   1906 DA            push d
3410   1907 FD 2E 00 00   mov32 cb, $00000000
3410   190B 00 00 
3411   190D E7            pop d
3412   190E FD 43         mov [d], b
3413   1910             ; --- END LOCAL VAR INITIALIZATION
3414   1910             ; i = 0; 
3415   1910 FA FA FF      lea d, [bp + -6] ; $i
3416   1913 DA            push d
3417   1914 FD 2E 00 00   mov32 cb, $00000000
3417   1918 00 00 
3418   191A E7            pop d
3419   191B FD 43         mov [d], b
3420   191D             ; if(num == 0){ 
3421   191D             _if45_cond:
3422   191D FA 07 00      lea d, [bp + 7] ; $num
3423   1920 2A            mov b, [d]
3424   1921 38 00 00      mov c, 0
3425   1924             ; --- START RELATIONAL
3426   1924 D7            push a
3427   1925 11            mov a, b
3428   1926 FD 2E 00 00   mov32 cb, $00000000
3428   192A 00 00 
3429   192C B0            cmp a, b
3430   192D FD 71         seq ; ==
3431   192F E4            pop a
3432   1930             ; --- END RELATIONAL
3433   1930 C0 00 00      cmp b, 0
3434   1933 C6 5B 19      je _if45_exit
3435   1936             _if45_true:
3436   1936             ; *dest++ = '0'; 
3437   1936 FA 05 00      lea d, [bp + 5] ; $dest
3438   1939 2A            mov b, [d]
3439   193A 38 00 00      mov c, 0
3440   193D FD 77         inc b
3441   193F FA 05 00      lea d, [bp + 5] ; $dest
3442   1942 FD 43         mov [d], b
3443   1944 FD 7D         dec b
3444   1946 D8            push b
3445   1947 FD 2E 30 00   mov32 cb, $00000030
3445   194B 00 00 
3446   194D E7            pop d
3447   194E FD 3E         mov [d], bl
3448   1950             ; return 1; 
3449   1950 FD 2E 01 00   mov32 cb, $00000001
3449   1954 00 00 
3450   1956 F9            leave
3451   1957 09            ret
3452   1958 0A 5B 19      jmp _if45_exit
3453   195B             _if45_exit:
3454   195B             ; while (num > 0) { 
3455   195B             _while46_cond:
3456   195B FA 07 00      lea d, [bp + 7] ; $num
3457   195E 2A            mov b, [d]
3458   195F 38 00 00      mov c, 0
3459   1962             ; --- START RELATIONAL
3460   1962 D7            push a
3461   1963 11            mov a, b
3462   1964 FD 2E 00 00   mov32 cb, $00000000
3462   1968 00 00 
3463   196A B0            cmp a, b
3464   196B FD 81         sgu ; > (unsigned)
3465   196D E4            pop a
3466   196E             ; --- END RELATIONAL
3467   196E C0 00 00      cmp b, 0
3468   1971 C6 D0 19      je _while46_exit
3469   1974             _while46_block:
3470   1974             ; digits[i] = '0' + (num % 10); 
3471   1974 FA FC FF      lea d, [bp + -4] ; $digits
3472   1977 D7            push a
3473   1978 DA            push d
3474   1979 FA FA FF      lea d, [bp + -6] ; $i
3475   197C 2A            mov b, [d]
3476   197D 38 00 00      mov c, 0
3477   1980 E7            pop d
3478   1981 5A            add d, b
3479   1982 E4            pop a
3480   1983 DA            push d
3481   1984 FD 2E 30 00   mov32 cb, $00000030
3481   1988 00 00 
3482   198A             ; --- START TERMS
3483   198A D7            push a
3484   198B 11            mov a, b
3485   198C FA 07 00      lea d, [bp + 7] ; $num
3486   198F 2A            mov b, [d]
3487   1990 38 00 00      mov c, 0
3488   1993             ; --- START FACTORS
3489   1993 D7            push a
3490   1994 11            mov a, b
3491   1995 FD 2E 0A 00   mov32 cb, $0000000a
3491   1999 00 00 
3492   199B AE            div a, b ; 
3493   199C 11            mov a, b
3494   199D 27            mov b, a
3495   199E E4            pop a
3496   199F             ; --- END FACTORS
3497   199F 56            add b, a
3498   19A0 E4            pop a
3499   19A1             ; --- END TERMS
3500   19A1 E7            pop d
3501   19A2 FD 3E         mov [d], bl
3502   19A4             ; num = num / 10; 
3503   19A4 FA 07 00      lea d, [bp + 7] ; $num
3504   19A7 DA            push d
3505   19A8 FA 07 00      lea d, [bp + 7] ; $num
3506   19AB 2A            mov b, [d]
3507   19AC 38 00 00      mov c, 0
3508   19AF             ; --- START FACTORS
3509   19AF D7            push a
3510   19B0 11            mov a, b
3511   19B1 FD 2E 0A 00   mov32 cb, $0000000a
3511   19B5 00 00 
3512   19B7 AE            div a, b
3513   19B8 27            mov b, a
3514   19B9 E4            pop a
3515   19BA             ; --- END FACTORS
3516   19BA E7            pop d
3517   19BB FD 43         mov [d], b
3518   19BD             ; i++; 
3519   19BD FA FA FF      lea d, [bp + -6] ; $i
3520   19C0 2A            mov b, [d]
3521   19C1 38 00 00      mov c, 0
3522   19C4 FD 77         inc b
3523   19C6 FA FA FF      lea d, [bp + -6] ; $i
3524   19C9 FD 43         mov [d], b
3525   19CB FD 7D         dec b
3526   19CD 0A 5B 19      jmp _while46_cond
3527   19D0             _while46_exit:
3528   19D0             ; while (i > 0) { 
3529   19D0             _while47_cond:
3530   19D0 FA FA FF      lea d, [bp + -6] ; $i
3531   19D3 2A            mov b, [d]
3532   19D4 38 00 00      mov c, 0
3533   19D7             ; --- START RELATIONAL
3534   19D7 D7            push a
3535   19D8 11            mov a, b
3536   19D9 FD 2E 00 00   mov32 cb, $00000000
3536   19DD 00 00 
3537   19DF B0            cmp a, b
3538   19E0 FD 7F         sgt ; >
3539   19E2 E4            pop a
3540   19E3             ; --- END RELATIONAL
3541   19E3 C0 00 00      cmp b, 0
3542   19E6 C6 35 1A      je _while47_exit
3543   19E9             _while47_block:
3544   19E9             ; i--; 
3545   19E9 FA FA FF      lea d, [bp + -6] ; $i
3546   19EC 2A            mov b, [d]
3547   19ED 38 00 00      mov c, 0
3548   19F0 FD 7D         dec b
3549   19F2 FA FA FF      lea d, [bp + -6] ; $i
3550   19F5 FD 43         mov [d], b
3551   19F7 FD 77         inc b
3552   19F9             ; *dest++ = digits[i]; 
3553   19F9 FA 05 00      lea d, [bp + 5] ; $dest
3554   19FC 2A            mov b, [d]
3555   19FD 38 00 00      mov c, 0
3556   1A00 FD 77         inc b
3557   1A02 FA 05 00      lea d, [bp + 5] ; $dest
3558   1A05 FD 43         mov [d], b
3559   1A07 FD 7D         dec b
3560   1A09 D8            push b
3561   1A0A FA FC FF      lea d, [bp + -4] ; $digits
3562   1A0D D7            push a
3563   1A0E DA            push d
3564   1A0F FA FA FF      lea d, [bp + -6] ; $i
3565   1A12 2A            mov b, [d]
3566   1A13 38 00 00      mov c, 0
3567   1A16 E7            pop d
3568   1A17 5A            add d, b
3569   1A18 E4            pop a
3570   1A19 32            mov bl, [d]
3571   1A1A A7 00         mov bh, 0
3572   1A1C 38 00 00      mov c, 0
3573   1A1F E7            pop d
3574   1A20 FD 3E         mov [d], bl
3575   1A22             ; len++; 
3576   1A22 FA F8 FF      lea d, [bp + -8] ; $len
3577   1A25 2A            mov b, [d]
3578   1A26 38 00 00      mov c, 0
3579   1A29 FD 77         inc b
3580   1A2B FA F8 FF      lea d, [bp + -8] ; $len
3581   1A2E FD 43         mov [d], b
3582   1A30 FD 7D         dec b
3583   1A32 0A D0 19      jmp _while47_cond
3584   1A35             _while47_exit:
3585   1A35             ; *dest = '\0'; 
3586   1A35 FA 05 00      lea d, [bp + 5] ; $dest
3587   1A38 2A            mov b, [d]
3588   1A39 38 00 00      mov c, 0
3589   1A3C D8            push b
3590   1A3D FD 2E 00 00   mov32 cb, $00000000
3590   1A41 00 00 
3591   1A43 E7            pop d
3592   1A44 FD 3E         mov [d], bl
3593   1A46             ; return len; 
3594   1A46 FA F8 FF      lea d, [bp + -8] ; $len
3595   1A49 2A            mov b, [d]
3596   1A4A 38 00 00      mov c, 0
3597   1A4D F9            leave
3598   1A4E 09            ret
3599   1A4F             
3600   1A4F             print_unsigned:
3601   1A4F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3602   1A52             ; char digits[5]; 
3603   1A52 52 05 00      sub sp, 5
3604   1A55             ; int i; 
3605   1A55 52 02 00      sub sp, 2
3606   1A58             ; i = 0; 
3607   1A58 FA FA FF      lea d, [bp + -6] ; $i
3608   1A5B DA            push d
3609   1A5C FD 2E 00 00   mov32 cb, $00000000
3609   1A60 00 00 
3610   1A62 E7            pop d
3611   1A63 FD 43         mov [d], b
3612   1A65             ; if(num == 0){ 
3613   1A65             _if48_cond:
3614   1A65 FA 05 00      lea d, [bp + 5] ; $num
3615   1A68 2A            mov b, [d]
3616   1A69 38 00 00      mov c, 0
3617   1A6C             ; --- START RELATIONAL
3618   1A6C D7            push a
3619   1A6D 11            mov a, b
3620   1A6E FD 2E 00 00   mov32 cb, $00000000
3620   1A72 00 00 
3621   1A74 B0            cmp a, b
3622   1A75 FD 71         seq ; ==
3623   1A77 E4            pop a
3624   1A78             ; --- END RELATIONAL
3625   1A78 C0 00 00      cmp b, 0
3626   1A7B C6 90 1A      je _if48_exit
3627   1A7E             _if48_true:
3628   1A7E             ; putchar('0'); 
3629   1A7E             ; --- START FUNCTION CALL
3630   1A7E FD 2E 30 00   mov32 cb, $00000030
3630   1A82 00 00 
3631   1A84 DD            push bl
3632   1A85 07 17 1D      call putchar
3633   1A88 51 01 00      add sp, 1
3634   1A8B             ; --- END FUNCTION CALL
3635   1A8B             ; return; 
3636   1A8B F9            leave
3637   1A8C 09            ret
3638   1A8D 0A 90 1A      jmp _if48_exit
3639   1A90             _if48_exit:
3640   1A90             ; while (num > 0) { 
3641   1A90             _while49_cond:
3642   1A90 FA 05 00      lea d, [bp + 5] ; $num
3643   1A93 2A            mov b, [d]
3644   1A94 38 00 00      mov c, 0
3645   1A97             ; --- START RELATIONAL
3646   1A97 D7            push a
3647   1A98 11            mov a, b
3648   1A99 FD 2E 00 00   mov32 cb, $00000000
3648   1A9D 00 00 
3649   1A9F B0            cmp a, b
3650   1AA0 FD 81         sgu ; > (unsigned)
3651   1AA2 E4            pop a
3652   1AA3             ; --- END RELATIONAL
3653   1AA3 C0 00 00      cmp b, 0
3654   1AA6 C6 05 1B      je _while49_exit
3655   1AA9             _while49_block:
3656   1AA9             ; digits[i] = '0' + (num % 10); 
3657   1AA9 FA FC FF      lea d, [bp + -4] ; $digits
3658   1AAC D7            push a
3659   1AAD DA            push d
3660   1AAE FA FA FF      lea d, [bp + -6] ; $i
3661   1AB1 2A            mov b, [d]
3662   1AB2 38 00 00      mov c, 0
3663   1AB5 E7            pop d
3664   1AB6 5A            add d, b
3665   1AB7 E4            pop a
3666   1AB8 DA            push d
3667   1AB9 FD 2E 30 00   mov32 cb, $00000030
3667   1ABD 00 00 
3668   1ABF             ; --- START TERMS
3669   1ABF D7            push a
3670   1AC0 11            mov a, b
3671   1AC1 FA 05 00      lea d, [bp + 5] ; $num
3672   1AC4 2A            mov b, [d]
3673   1AC5 38 00 00      mov c, 0
3674   1AC8             ; --- START FACTORS
3675   1AC8 D7            push a
3676   1AC9 11            mov a, b
3677   1ACA FD 2E 0A 00   mov32 cb, $0000000a
3677   1ACE 00 00 
3678   1AD0 AE            div a, b ; 
3679   1AD1 11            mov a, b
3680   1AD2 27            mov b, a
3681   1AD3 E4            pop a
3682   1AD4             ; --- END FACTORS
3683   1AD4 56            add b, a
3684   1AD5 E4            pop a
3685   1AD6             ; --- END TERMS
3686   1AD6 E7            pop d
3687   1AD7 FD 3E         mov [d], bl
3688   1AD9             ; num = num / 10; 
3689   1AD9 FA 05 00      lea d, [bp + 5] ; $num
3690   1ADC DA            push d
3691   1ADD FA 05 00      lea d, [bp + 5] ; $num
3692   1AE0 2A            mov b, [d]
3693   1AE1 38 00 00      mov c, 0
3694   1AE4             ; --- START FACTORS
3695   1AE4 D7            push a
3696   1AE5 11            mov a, b
3697   1AE6 FD 2E 0A 00   mov32 cb, $0000000a
3697   1AEA 00 00 
3698   1AEC AE            div a, b
3699   1AED 27            mov b, a
3700   1AEE E4            pop a
3701   1AEF             ; --- END FACTORS
3702   1AEF E7            pop d
3703   1AF0 FD 43         mov [d], b
3704   1AF2             ; i++; 
3705   1AF2 FA FA FF      lea d, [bp + -6] ; $i
3706   1AF5 2A            mov b, [d]
3707   1AF6 38 00 00      mov c, 0
3708   1AF9 FD 77         inc b
3709   1AFB FA FA FF      lea d, [bp + -6] ; $i
3710   1AFE FD 43         mov [d], b
3711   1B00 FD 7D         dec b
3712   1B02 0A 90 1A      jmp _while49_cond
3713   1B05             _while49_exit:
3714   1B05             ; while (i > 0) { 
3715   1B05             _while50_cond:
3716   1B05 FA FA FF      lea d, [bp + -6] ; $i
3717   1B08 2A            mov b, [d]
3718   1B09 38 00 00      mov c, 0
3719   1B0C             ; --- START RELATIONAL
3720   1B0C D7            push a
3721   1B0D 11            mov a, b
3722   1B0E FD 2E 00 00   mov32 cb, $00000000
3722   1B12 00 00 
3723   1B14 B0            cmp a, b
3724   1B15 FD 7F         sgt ; >
3725   1B17 E4            pop a
3726   1B18             ; --- END RELATIONAL
3727   1B18 C0 00 00      cmp b, 0
3728   1B1B C6 4D 1B      je _while50_exit
3729   1B1E             _while50_block:
3730   1B1E             ; i--; 
3731   1B1E FA FA FF      lea d, [bp + -6] ; $i
3732   1B21 2A            mov b, [d]
3733   1B22 38 00 00      mov c, 0
3734   1B25 FD 7D         dec b
3735   1B27 FA FA FF      lea d, [bp + -6] ; $i
3736   1B2A FD 43         mov [d], b
3737   1B2C FD 77         inc b
3738   1B2E             ; putchar(digits[i]); 
3739   1B2E             ; --- START FUNCTION CALL
3740   1B2E FA FC FF      lea d, [bp + -4] ; $digits
3741   1B31 D7            push a
3742   1B32 DA            push d
3743   1B33 FA FA FF      lea d, [bp + -6] ; $i
3744   1B36 2A            mov b, [d]
3745   1B37 38 00 00      mov c, 0
3746   1B3A E7            pop d
3747   1B3B 5A            add d, b
3748   1B3C E4            pop a
3749   1B3D 32            mov bl, [d]
3750   1B3E A7 00         mov bh, 0
3751   1B40 38 00 00      mov c, 0
3752   1B43 DD            push bl
3753   1B44 07 17 1D      call putchar
3754   1B47 51 01 00      add sp, 1
3755   1B4A             ; --- END FUNCTION CALL
3756   1B4A 0A 05 1B      jmp _while50_cond
3757   1B4D             _while50_exit:
3758   1B4D F9            leave
3759   1B4E 09            ret
3760   1B4F             
3761   1B4F             sprint_signed:
3762   1B4F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3763   1B52             ; char digits[5]; 
3764   1B52 52 05 00      sub sp, 5
3765   1B55             ; int i = 0; 
3766   1B55 52 02 00      sub sp, 2
3767   1B58             ; --- START LOCAL VAR INITIALIZATION
3768   1B58 FA FA FF      lea d, [bp + -6] ; $i
3769   1B5B DA            push d
3770   1B5C FD 2E 00 00   mov32 cb, $00000000
3770   1B60 00 00 
3771   1B62 E7            pop d
3772   1B63 FD 43         mov [d], b
3773   1B65             ; --- END LOCAL VAR INITIALIZATION
3774   1B65             ; int len = 0; 
3775   1B65 52 02 00      sub sp, 2
3776   1B68             ; --- START LOCAL VAR INITIALIZATION
3777   1B68 FA F8 FF      lea d, [bp + -8] ; $len
3778   1B6B DA            push d
3779   1B6C FD 2E 00 00   mov32 cb, $00000000
3779   1B70 00 00 
3780   1B72 E7            pop d
3781   1B73 FD 43         mov [d], b
3782   1B75             ; --- END LOCAL VAR INITIALIZATION
3783   1B75             ; if (num < 0) { 
3784   1B75             _if51_cond:
3785   1B75 FA 07 00      lea d, [bp + 7] ; $num
3786   1B78 2A            mov b, [d]
3787   1B79 38 00 00      mov c, 0
3788   1B7C             ; --- START RELATIONAL
3789   1B7C D7            push a
3790   1B7D 11            mov a, b
3791   1B7E FD 2E 00 00   mov32 cb, $00000000
3791   1B82 00 00 
3792   1B84 B0            cmp a, b
3793   1B85 FD 73         slt ; < (signed)
3794   1B87 E4            pop a
3795   1B88             ; --- END RELATIONAL
3796   1B88 C0 00 00      cmp b, 0
3797   1B8B C6 CB 1B      je _if51_else
3798   1B8E             _if51_true:
3799   1B8E             ; *dest++ = '-'; 
3800   1B8E FA 05 00      lea d, [bp + 5] ; $dest
3801   1B91 2A            mov b, [d]
3802   1B92 38 00 00      mov c, 0
3803   1B95 FD 77         inc b
3804   1B97 FA 05 00      lea d, [bp + 5] ; $dest
3805   1B9A FD 43         mov [d], b
3806   1B9C FD 7D         dec b
3807   1B9E D8            push b
3808   1B9F FD 2E 2D 00   mov32 cb, $0000002d
3808   1BA3 00 00 
3809   1BA5 E7            pop d
3810   1BA6 FD 3E         mov [d], bl
3811   1BA8             ; num = -num; 
3812   1BA8 FA 07 00      lea d, [bp + 7] ; $num
3813   1BAB DA            push d
3814   1BAC FA 07 00      lea d, [bp + 7] ; $num
3815   1BAF 2A            mov b, [d]
3816   1BB0 38 00 00      mov c, 0
3817   1BB3 FD 97         neg b
3818   1BB5 E7            pop d
3819   1BB6 FD 43         mov [d], b
3820   1BB8             ; len++; 
3821   1BB8 FA F8 FF      lea d, [bp + -8] ; $len
3822   1BBB 2A            mov b, [d]
3823   1BBC 38 00 00      mov c, 0
3824   1BBF FD 77         inc b
3825   1BC1 FA F8 FF      lea d, [bp + -8] ; $len
3826   1BC4 FD 43         mov [d], b
3827   1BC6 FD 7D         dec b
3828   1BC8 0A 1A 1C      jmp _if51_exit
3829   1BCB             _if51_else:
3830   1BCB             ; if (num == 0) { 
3831   1BCB             _if52_cond:
3832   1BCB FA 07 00      lea d, [bp + 7] ; $num
3833   1BCE 2A            mov b, [d]
3834   1BCF 38 00 00      mov c, 0
3835   1BD2             ; --- START RELATIONAL
3836   1BD2 D7            push a
3837   1BD3 11            mov a, b
3838   1BD4 FD 2E 00 00   mov32 cb, $00000000
3838   1BD8 00 00 
3839   1BDA B0            cmp a, b
3840   1BDB FD 71         seq ; ==
3841   1BDD E4            pop a
3842   1BDE             ; --- END RELATIONAL
3843   1BDE C0 00 00      cmp b, 0
3844   1BE1 C6 1A 1C      je _if52_exit
3845   1BE4             _if52_true:
3846   1BE4             ; *dest++ = '0'; 
3847   1BE4 FA 05 00      lea d, [bp + 5] ; $dest
3848   1BE7 2A            mov b, [d]
3849   1BE8 38 00 00      mov c, 0
3850   1BEB FD 77         inc b
3851   1BED FA 05 00      lea d, [bp + 5] ; $dest
3852   1BF0 FD 43         mov [d], b
3853   1BF2 FD 7D         dec b
3854   1BF4 D8            push b
3855   1BF5 FD 2E 30 00   mov32 cb, $00000030
3855   1BF9 00 00 
3856   1BFB E7            pop d
3857   1BFC FD 3E         mov [d], bl
3858   1BFE             ; *dest = '\0'; 
3859   1BFE FA 05 00      lea d, [bp + 5] ; $dest
3860   1C01 2A            mov b, [d]
3861   1C02 38 00 00      mov c, 0
3862   1C05 D8            push b
3863   1C06 FD 2E 00 00   mov32 cb, $00000000
3863   1C0A 00 00 
3864   1C0C E7            pop d
3865   1C0D FD 3E         mov [d], bl
3866   1C0F             ; return 1; 
3867   1C0F FD 2E 01 00   mov32 cb, $00000001
3867   1C13 00 00 
3868   1C15 F9            leave
3869   1C16 09            ret
3870   1C17 0A 1A 1C      jmp _if52_exit
3871   1C1A             _if52_exit:
3872   1C1A             _if51_exit:
3873   1C1A             ; while (num > 0) { 
3874   1C1A             _while53_cond:
3875   1C1A FA 07 00      lea d, [bp + 7] ; $num
3876   1C1D 2A            mov b, [d]
3877   1C1E 38 00 00      mov c, 0
3878   1C21             ; --- START RELATIONAL
3879   1C21 D7            push a
3880   1C22 11            mov a, b
3881   1C23 FD 2E 00 00   mov32 cb, $00000000
3881   1C27 00 00 
3882   1C29 B0            cmp a, b
3883   1C2A FD 7F         sgt ; >
3884   1C2C E4            pop a
3885   1C2D             ; --- END RELATIONAL
3886   1C2D C0 00 00      cmp b, 0
3887   1C30 C6 8F 1C      je _while53_exit
3888   1C33             _while53_block:
3889   1C33             ; digits[i] = '0' + (num % 10); 
3890   1C33 FA FC FF      lea d, [bp + -4] ; $digits
3891   1C36 D7            push a
3892   1C37 DA            push d
3893   1C38 FA FA FF      lea d, [bp + -6] ; $i
3894   1C3B 2A            mov b, [d]
3895   1C3C 38 00 00      mov c, 0
3896   1C3F E7            pop d
3897   1C40 5A            add d, b
3898   1C41 E4            pop a
3899   1C42 DA            push d
3900   1C43 FD 2E 30 00   mov32 cb, $00000030
3900   1C47 00 00 
3901   1C49             ; --- START TERMS
3902   1C49 D7            push a
3903   1C4A 11            mov a, b
3904   1C4B FA 07 00      lea d, [bp + 7] ; $num
3905   1C4E 2A            mov b, [d]
3906   1C4F 38 00 00      mov c, 0
3907   1C52             ; --- START FACTORS
3908   1C52 D7            push a
3909   1C53 11            mov a, b
3910   1C54 FD 2E 0A 00   mov32 cb, $0000000a
3910   1C58 00 00 
3911   1C5A AE            div a, b ; 
3912   1C5B 11            mov a, b
3913   1C5C 27            mov b, a
3914   1C5D E4            pop a
3915   1C5E             ; --- END FACTORS
3916   1C5E 56            add b, a
3917   1C5F E4            pop a
3918   1C60             ; --- END TERMS
3919   1C60 E7            pop d
3920   1C61 FD 3E         mov [d], bl
3921   1C63             ; num = num / 10; 
3922   1C63 FA 07 00      lea d, [bp + 7] ; $num
3923   1C66 DA            push d
3924   1C67 FA 07 00      lea d, [bp + 7] ; $num
3925   1C6A 2A            mov b, [d]
3926   1C6B 38 00 00      mov c, 0
3927   1C6E             ; --- START FACTORS
3928   1C6E D7            push a
3929   1C6F 11            mov a, b
3930   1C70 FD 2E 0A 00   mov32 cb, $0000000a
3930   1C74 00 00 
3931   1C76 AE            div a, b
3932   1C77 27            mov b, a
3933   1C78 E4            pop a
3934   1C79             ; --- END FACTORS
3935   1C79 E7            pop d
3936   1C7A FD 43         mov [d], b
3937   1C7C             ; i++; 
3938   1C7C FA FA FF      lea d, [bp + -6] ; $i
3939   1C7F 2A            mov b, [d]
3940   1C80 38 00 00      mov c, 0
3941   1C83 FD 77         inc b
3942   1C85 FA FA FF      lea d, [bp + -6] ; $i
3943   1C88 FD 43         mov [d], b
3944   1C8A FD 7D         dec b
3945   1C8C 0A 1A 1C      jmp _while53_cond
3946   1C8F             _while53_exit:
3947   1C8F             ; while (i > 0) { 
3948   1C8F             _while54_cond:
3949   1C8F FA FA FF      lea d, [bp + -6] ; $i
3950   1C92 2A            mov b, [d]
3951   1C93 38 00 00      mov c, 0
3952   1C96             ; --- START RELATIONAL
3953   1C96 D7            push a
3954   1C97 11            mov a, b
3955   1C98 FD 2E 00 00   mov32 cb, $00000000
3955   1C9C 00 00 
3956   1C9E B0            cmp a, b
3957   1C9F FD 7F         sgt ; >
3958   1CA1 E4            pop a
3959   1CA2             ; --- END RELATIONAL
3960   1CA2 C0 00 00      cmp b, 0
3961   1CA5 C6 F4 1C      je _while54_exit
3962   1CA8             _while54_block:
3963   1CA8             ; i--; 
3964   1CA8 FA FA FF      lea d, [bp + -6] ; $i
3965   1CAB 2A            mov b, [d]
3966   1CAC 38 00 00      mov c, 0
3967   1CAF FD 7D         dec b
3968   1CB1 FA FA FF      lea d, [bp + -6] ; $i
3969   1CB4 FD 43         mov [d], b
3970   1CB6 FD 77         inc b
3971   1CB8             ; *dest++ = digits[i]; 
3972   1CB8 FA 05 00      lea d, [bp + 5] ; $dest
3973   1CBB 2A            mov b, [d]
3974   1CBC 38 00 00      mov c, 0
3975   1CBF FD 77         inc b
3976   1CC1 FA 05 00      lea d, [bp + 5] ; $dest
3977   1CC4 FD 43         mov [d], b
3978   1CC6 FD 7D         dec b
3979   1CC8 D8            push b
3980   1CC9 FA FC FF      lea d, [bp + -4] ; $digits
3981   1CCC D7            push a
3982   1CCD DA            push d
3983   1CCE FA FA FF      lea d, [bp + -6] ; $i
3984   1CD1 2A            mov b, [d]
3985   1CD2 38 00 00      mov c, 0
3986   1CD5 E7            pop d
3987   1CD6 5A            add d, b
3988   1CD7 E4            pop a
3989   1CD8 32            mov bl, [d]
3990   1CD9 A7 00         mov bh, 0
3991   1CDB 38 00 00      mov c, 0
3992   1CDE E7            pop d
3993   1CDF FD 3E         mov [d], bl
3994   1CE1             ; len++; 
3995   1CE1 FA F8 FF      lea d, [bp + -8] ; $len
3996   1CE4 2A            mov b, [d]
3997   1CE5 38 00 00      mov c, 0
3998   1CE8 FD 77         inc b
3999   1CEA FA F8 FF      lea d, [bp + -8] ; $len
4000   1CED FD 43         mov [d], b
4001   1CEF FD 7D         dec b
4002   1CF1 0A 8F 1C      jmp _while54_cond
4003   1CF4             _while54_exit:
4004   1CF4             ; *dest = '\0'; 
4005   1CF4 FA 05 00      lea d, [bp + 5] ; $dest
4006   1CF7 2A            mov b, [d]
4007   1CF8 38 00 00      mov c, 0
4008   1CFB D8            push b
4009   1CFC FD 2E 00 00   mov32 cb, $00000000
4009   1D00 00 00 
4010   1D02 E7            pop d
4011   1D03 FD 3E         mov [d], bl
4012   1D05             ; return len; 
4013   1D05 FA F8 FF      lea d, [bp + -8] ; $len
4014   1D08 2A            mov b, [d]
4015   1D09 38 00 00      mov c, 0
4016   1D0C F9            leave
4017   1D0D 09            ret
4018   1D0E             
4019   1D0E             date:
4020   1D0E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4021   1D11             
4022   1D11             ; --- BEGIN INLINE ASM SEGMENT
4023   1D11 19 00         mov al, 0 
4024   1D13 05 07         syscall sys_datetime
4025   1D15             ; --- END INLINE ASM SEGMENT
4026   1D15             
4027   1D15 F9            leave
4028   1D16 09            ret
4029   1D17             
4030   1D17             putchar:
4031   1D17 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4032   1D1A             
4033   1D1A             ; --- BEGIN INLINE ASM SEGMENT
4034   1D1A FA 05 00      lea d, [bp + 5] ; $c
4035   1D1D 1E            mov al, [d]
4036   1D1E 23            mov ah, al
4037   1D1F 07 26 1F      call _putchar
4038   1D22             ; --- END INLINE ASM SEGMENT
4039   1D22             
4040   1D22 F9            leave
4041   1D23 09            ret
4042   1D24             
4043   1D24             getchar:
4044   1D24 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4045   1D27             ; char c; 
4046   1D27 52 01 00      sub sp, 1
4047   1D2A             
4048   1D2A             ; --- BEGIN INLINE ASM SEGMENT
4049   1D2A 07 1F 1F      call getch
4050   1D2D 1A            mov al, ah
4051   1D2E FA 00 00      lea d, [bp + 0] ; $c
4052   1D31 3E            mov [d], al
4053   1D32             ; --- END INLINE ASM SEGMENT
4054   1D32             
4055   1D32             ; return c; 
4056   1D32 FA 00 00      lea d, [bp + 0] ; $c
4057   1D35 32            mov bl, [d]
4058   1D36 A7 00         mov bh, 0
4059   1D38 38 00 00      mov c, 0
4060   1D3B F9            leave
4061   1D3C 09            ret
4062   1D3D             
4063   1D3D             scann:
4064   1D3D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4065   1D40             ; int m; 
4066   1D40 52 02 00      sub sp, 2
4067   1D43             
4068   1D43             ; --- BEGIN INLINE ASM SEGMENT
4069   1D43 07 6A 21      call scan_u16d
4070   1D46 FA FF FF      lea d, [bp + -1] ; $m
4071   1D49 43            mov [d], a
4072   1D4A             ; --- END INLINE ASM SEGMENT
4073   1D4A             
4074   1D4A             ; return m; 
4075   1D4A FA FF FF      lea d, [bp + -1] ; $m
4076   1D4D 2A            mov b, [d]
4077   1D4E 38 00 00      mov c, 0
4078   1D51 F9            leave
4079   1D52 09            ret
4080   1D53             
4081   1D53             puts:
4082   1D53 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4083   1D56             
4084   1D56             ; --- BEGIN INLINE ASM SEGMENT
4085   1D56 FA 05 00      lea d, [bp + 5] ; $s
4086   1D59 15            mov a, [d]
4087   1D5A 3C            mov d, a
4088   1D5B 07 70 20      call _puts
4089   1D5E 10 00 0A      mov a, $0A00
4090   1D61 05 03         syscall sys_io
4091   1D63             ; --- END INLINE ASM SEGMENT
4092   1D63             
4093   1D63 F9            leave
4094   1D64 09            ret
4095   1D65             
4096   1D65             print:
4097   1D65 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4098   1D68             
4099   1D68             ; --- BEGIN INLINE ASM SEGMENT
4100   1D68 FA 05 00      lea d, [bp + 5] ; $s
4101   1D6B FD 2A         mov d, [d]
4102   1D6D 07 70 20      call _puts
4103   1D70             ; --- END INLINE ASM SEGMENT
4104   1D70             
4105   1D70 F9            leave
4106   1D71 09            ret
4107   1D72             
4108   1D72             getparam:
4109   1D72 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4110   1D75             ; char data; 
4111   1D75 52 01 00      sub sp, 1
4112   1D78             
4113   1D78             ; --- BEGIN INLINE ASM SEGMENT
4114   1D78 19 04         mov al, 4
4115   1D7A FA 05 00      lea d, [bp + 5] ; $address
4116   1D7D FD 2A         mov d, [d]
4117   1D7F 05 0C         syscall sys_system
4118   1D81 FA 00 00      lea d, [bp + 0] ; $data
4119   1D84 FD 3E         mov [d], bl
4120   1D86             ; --- END INLINE ASM SEGMENT
4121   1D86             
4122   1D86             ; return data; 
4123   1D86 FA 00 00      lea d, [bp + 0] ; $data
4124   1D89 32            mov bl, [d]
4125   1D8A A7 00         mov bh, 0
4126   1D8C 38 00 00      mov c, 0
4127   1D8F F9            leave
4128   1D90 09            ret
4129   1D91             
4130   1D91             clear:
4131   1D91 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4132   1D94             ; print("\033[2J\033[H"); 
4133   1D94             ; --- START FUNCTION CALL
4134   1D94 26 55 2E      mov b, _s5 ; "\033[2J\033[H"
4135   1D97 FD AB         swp b
4136   1D99 D8            push b
4137   1D9A 07 65 1D      call print
4138   1D9D 51 02 00      add sp, 2
4139   1DA0             ; --- END FUNCTION CALL
4140   1DA0 F9            leave
4141   1DA1 09            ret
4142   1DA2             
4143   1DA2             abs:
4144   1DA2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4145   1DA5             ; return i < 0 ? -i : i; 
4146   1DA5             _ternary55_cond:
4147   1DA5 FA 05 00      lea d, [bp + 5] ; $i
4148   1DA8 2A            mov b, [d]
4149   1DA9 38 00 00      mov c, 0
4150   1DAC             ; --- START RELATIONAL
4151   1DAC D7            push a
4152   1DAD 11            mov a, b
4153   1DAE FD 2E 00 00   mov32 cb, $00000000
4153   1DB2 00 00 
4154   1DB4 B0            cmp a, b
4155   1DB5 FD 73         slt ; < (signed)
4156   1DB7 E4            pop a
4157   1DB8             ; --- END RELATIONAL
4158   1DB8 C0 00 00      cmp b, 0
4159   1DBB C6 CA 1D      je _ternary55_false
4160   1DBE             _ternary55_true:
4161   1DBE FA 05 00      lea d, [bp + 5] ; $i
4162   1DC1 2A            mov b, [d]
4163   1DC2 38 00 00      mov c, 0
4164   1DC5 FD 97         neg b
4165   1DC7 0A D1 1D      jmp _ternary55_exit
4166   1DCA             _ternary55_false:
4167   1DCA FA 05 00      lea d, [bp + 5] ; $i
4168   1DCD 2A            mov b, [d]
4169   1DCE 38 00 00      mov c, 0
4170   1DD1             _ternary55_exit:
4171   1DD1 F9            leave
4172   1DD2 09            ret
4173   1DD3             
4174   1DD3             loadfile:
4175   1DD3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4176   1DD6             
4177   1DD6             ; --- BEGIN INLINE ASM SEGMENT
4178   1DD6 FA 07 00      lea d, [bp + 7] ; $destination
4179   1DD9 15            mov a, [d]
4180   1DDA 4F            mov di, a
4181   1DDB FA 05 00      lea d, [bp + 5] ; $filename
4182   1DDE FD 2A         mov d, [d]
4183   1DE0 19 14         mov al, 20
4184   1DE2 05 04         syscall sys_filesystem
4185   1DE4             ; --- END INLINE ASM SEGMENT
4186   1DE4             
4187   1DE4 F9            leave
4188   1DE5 09            ret
4189   1DE6             
4190   1DE6             create_file:
4191   1DE6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4192   1DE9 F9            leave
4193   1DEA 09            ret
4194   1DEB             
4195   1DEB             delete_file:
4196   1DEB F8 00 00      enter 0 ; (push bp; mov bp, sp)
4197   1DEE             
4198   1DEE             ; --- BEGIN INLINE ASM SEGMENT
4199   1DEE FA 05 00      lea d, [bp + 5] ; $filename
4200   1DF1 19 0A         mov al, 10
4201   1DF3 05 04         syscall sys_filesystem
4202   1DF5             ; --- END INLINE ASM SEGMENT
4203   1DF5             
4204   1DF5 F9            leave
4205   1DF6 09            ret
4206   1DF7             
4207   1DF7             load_hex:
4208   1DF7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4209   1DFA             ; char *temp; 
4210   1DFA 52 02 00      sub sp, 2
4211   1DFD             ; temp = alloc(32768); 
4212   1DFD FA FF FF      lea d, [bp + -1] ; $temp
4213   1E00 DA            push d
4214   1E01             ; --- START FUNCTION CALL
4215   1E01 FD 2E 00 80   mov32 cb, $00008000
4215   1E05 00 00 
4216   1E07 FD AB         swp b
4217   1E09 D8            push b
4218   1E0A 07 D6 08      call alloc
4219   1E0D 51 02 00      add sp, 2
4220   1E10             ; --- END FUNCTION CALL
4221   1E10 E7            pop d
4222   1E11 FD 43         mov [d], b
4223   1E13             
4224   1E13             ; --- BEGIN INLINE ASM SEGMENT
4225   1E13               
4226   1E13               
4227   1E13               
4228   1E13             _load_hex:
4229   1E13 FA 05 00      lea d, [bp + 5] ; $destination
4230   1E16 FD 2A         mov d, [d]
4231   1E18 FD 50         mov di, d
4232   1E1A FA FF FF      lea d, [bp + -1] ; $temp
4233   1E1D FD 2A         mov d, [d]
4234   1E1F 38 00 00      mov c, 0
4235   1E22 48            mov a, sp
4236   1E23 77            inc a
4237   1E24 3C            mov d, a          
4238   1E25 07 2D 1F      call _gets        
4239   1E28 4D            mov si, a
4240   1E29             __load_hex_loop:
4241   1E29 F6            lodsb             
4242   1E2A B9 00         cmp al, 0         
4243   1E2C C6 3A 1E      jz __load_hex_ret
4244   1E2F 36            mov bh, al
4245   1E30 F6            lodsb
4246   1E31 2F            mov bl, al
4247   1E32 07 E4 1E      call _atoi        
4248   1E35 F7            stosb             
4249   1E36 78            inc c
4250   1E37 0A 29 1E      jmp __load_hex_loop
4251   1E3A             __load_hex_ret:
4252   1E3A             ; --- END INLINE ASM SEGMENT
4253   1E3A             
4254   1E3A F9            leave
4255   1E3B 09            ret
4256   1E3C             
4257   1E3C             include_stdio_asm:
4258   1E3C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4259   1E3F             
4260   1E3F             ; --- BEGIN INLINE ASM SEGMENT
4261   1E3F             .include "lib/asm/stdio.asm"
0001+  1E3F             ;-----------------------------------------------------------------------------
0002+  1E3F             ; stdio.s
0003+  1E3F             ;-----------------------------------------------------------------------------
0004+  1E3F             .include "lib/asm/string.asm"
0001++ 1E3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1E3F             ; string.s
0003++ 1E3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1E3F             
0005++ 1E3F             
0006++ 1E3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1E3F             ; _strrev
0008++ 1E3F             ; reverse a string
0009++ 1E3F             ; D = string address
0010++ 1E3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1E3F             ; 01234
0012++ 1E3F             _strrev:
0013++ 1E3F 4B          	pusha
0014++ 1E40 07 86 1E    	call _strlen	; length in C
0015++ 1E43 12          	mov a, c
0016++ 1E44 AF 01 00    	cmp a, 1
0017++ 1E47 D0 61 1E    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1E4A 7D          	dec a
0019++ 1E4B FD 4E       	mov si, d	; beginning of string
0020++ 1E4D FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1E4F 59          	add d, a	; end of string
0022++ 1E50 12          	mov a, c
0023++ 1E51 FD 9B       	shr a		; divide by 2
0024++ 1E53 39          	mov c, a	; C now counts the steps
0025++ 1E54             _strrev_L0:
0026++ 1E54 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1E55 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1E56 3E          	mov [d], al	; store left char into right side
0029++ 1E57 1B          	mov al, bl
0030++ 1E58 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1E59 7E          	dec c
0032++ 1E5A 7F          	dec d
0033++ 1E5B C2 00 00    	cmp c, 0
0034++ 1E5E C7 54 1E    	jne _strrev_L0
0035++ 1E61             _strrev_end:
0036++ 1E61 4C          	popa
0037++ 1E62 09          	ret
0038++ 1E63             	
0039++ 1E63             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1E63             ; _strchr
0041++ 1E63             ; search string in D for char in AL
0042++ 1E63             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1E63             _strchr:
0044++ 1E63             _strchr_L0:
0045++ 1E63 32          	mov bl, [d]
0046++ 1E64 C1 00       	cmp bl, 0
0047++ 1E66 C6 71 1E    	je _strchr_end
0048++ 1E69 BA          	cmp al, bl
0049++ 1E6A C6 71 1E    	je _strchr_end
0050++ 1E6D 79          	inc d
0051++ 1E6E 0A 63 1E    	jmp _strchr_L0
0052++ 1E71             _strchr_end:
0053++ 1E71 1B          	mov al, bl
0054++ 1E72 09          	ret
0055++ 1E73             
0056++ 1E73             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1E73             ; _strstr
0058++ 1E73             ; find sub-string
0059++ 1E73             ; str1 in SI
0060++ 1E73             ; str2 in DI
0061++ 1E73             ; SI points to end of source string
0062++ 1E73             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1E73             _strstr:
0064++ 1E73 DB          	push al
0065++ 1E74 DA          	push d
0066++ 1E75 E3          	push di
0067++ 1E76             _strstr_loop:
0068++ 1E76 F3          	cmpsb					; compare a byte of the strings
0069++ 1E77 C7 82 1E    	jne _strstr_ret
0070++ 1E7A FC 00 00    	lea d, [di + 0]
0071++ 1E7D BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1E7F C7 76 1E    	jne _strstr_loop				; equal chars but not at end
0073++ 1E82             _strstr_ret:
0074++ 1E82 F0          	pop di
0075++ 1E83 E7          	pop d
0076++ 1E84 E8          	pop al
0077++ 1E85 09          	ret
0078++ 1E86             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1E86             ; length of null terminated string
0080++ 1E86             ; result in C
0081++ 1E86             ; pointer in D
0082++ 1E86             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1E86             _strlen:
0084++ 1E86 DA          	push d
0085++ 1E87 38 00 00    	mov c, 0
0086++ 1E8A             _strlen_L1:
0087++ 1E8A BD 00       	cmp byte [d], 0
0088++ 1E8C C6 94 1E    	je _strlen_ret
0089++ 1E8F 79          	inc d
0090++ 1E90 78          	inc c
0091++ 1E91 0A 8A 1E    	jmp _strlen_L1
0092++ 1E94             _strlen_ret:
0093++ 1E94 E7          	pop d
0094++ 1E95 09          	ret
0095++ 1E96             
0096++ 1E96             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1E96             ; STRCMP
0098++ 1E96             ; compare two strings
0099++ 1E96             ; str1 in SI
0100++ 1E96             ; str2 in DI
0101++ 1E96             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1E96             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1E96             _strcmp:
0104++ 1E96 DB          	push al
0105++ 1E97 DA          	push d
0106++ 1E98 E3          	push di
0107++ 1E99 E2          	push si
0108++ 1E9A             _strcmp_loop:
0109++ 1E9A F3          	cmpsb					; compare a byte of the strings
0110++ 1E9B C7 A6 1E    	jne _strcmp_ret
0111++ 1E9E FB FF FF    	lea d, [si +- 1]
0112++ 1EA1 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1EA3 C7 9A 1E    	jne _strcmp_loop				; equal chars but not at end
0114++ 1EA6             _strcmp_ret:
0115++ 1EA6 EF          	pop si
0116++ 1EA7 F0          	pop di
0117++ 1EA8 E7          	pop d
0118++ 1EA9 E8          	pop al
0119++ 1EAA 09          	ret
0120++ 1EAB             
0121++ 1EAB             
0122++ 1EAB             ; STRCPY
0123++ 1EAB             ; copy null terminated string from SI to DI
0124++ 1EAB             ; source in SI
0125++ 1EAB             ; destination in DI
0126++ 1EAB             _strcpy:
0127++ 1EAB E2          	push si
0128++ 1EAC E3          	push di
0129++ 1EAD DB          	push al
0130++ 1EAE             _strcpy_L1:
0131++ 1EAE F6          	lodsb
0132++ 1EAF F7          	stosb
0133++ 1EB0 B9 00       	cmp al, 0
0134++ 1EB2 C7 AE 1E    	jne _strcpy_L1
0135++ 1EB5             _strcpy_end:
0136++ 1EB5 E8          	pop al
0137++ 1EB6 F0          	pop di
0138++ 1EB7 EF          	pop si
0139++ 1EB8 09          	ret
0140++ 1EB9             
0141++ 1EB9             ; STRCAT
0142++ 1EB9             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1EB9             ; source in SI
0144++ 1EB9             ; destination in DI
0145++ 1EB9             _strcat:
0146++ 1EB9 E2          	push si
0147++ 1EBA E3          	push di
0148++ 1EBB D7          	push a
0149++ 1EBC DA          	push d
0150++ 1EBD 50          	mov a, di
0151++ 1EBE 3C          	mov d, a
0152++ 1EBF             _strcat_goto_end_L1:
0153++ 1EBF BD 00       	cmp byte[d], 0
0154++ 1EC1 C6 C8 1E    	je _strcat_start
0155++ 1EC4 79          	inc d
0156++ 1EC5 0A BF 1E    	jmp _strcat_goto_end_L1
0157++ 1EC8             _strcat_start:
0158++ 1EC8 FD 50       	mov di, d
0159++ 1ECA             _strcat_L1:
0160++ 1ECA F6          	lodsb
0161++ 1ECB F7          	stosb
0162++ 1ECC B9 00       	cmp al, 0
0163++ 1ECE C7 CA 1E    	jne _strcat_L1
0164++ 1ED1             _strcat_end:
0165++ 1ED1 E7          	pop d
0166++ 1ED2 E4          	pop a
0167++ 1ED3 F0          	pop di
0168++ 1ED4 EF          	pop si
0169++ 1ED5 09          	ret
0170++ 1ED6             
0171++ 1ED6             
0005+  1ED6             
0006+  1ED6             ;-----------------------------------------------------------------------------
0007+  1ED6             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1ED6             ; ASCII in BL
0009+  1ED6             ; result in AL
0010+  1ED6             ; ascii for F = 0100 0110
0011+  1ED6             ; ascii for 9 = 0011 1001
0012+  1ED6             ;-----------------------------------------------------------------------------
0013+  1ED6             hex_ascii_encode:
0014+  1ED6 1B            mov al, bl
0015+  1ED7 93 40         test al, $40        ; test if letter or number
0016+  1ED9 C7 DF 1E      jnz hex_letter
0017+  1EDC 87 0F         and al, $0F        ; get number
0018+  1EDE 09            ret
0019+  1EDF             hex_letter:
0020+  1EDF 87 0F         and al, $0F        ; get letter
0021+  1EE1 6A 09         add al, 9
0022+  1EE3 09            ret
0023+  1EE4             
0024+  1EE4             ;-----------------------------------------------------------------------------
0025+  1EE4             ; ATOI
0026+  1EE4             ; 2 letter hex string in B
0027+  1EE4             ; 8bit integer returned in AL
0028+  1EE4             ;-----------------------------------------------------------------------------
0029+  1EE4             _atoi:
0030+  1EE4 D8            push b
0031+  1EE5 07 D6 1E      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1EE8 30            mov bl, bh
0033+  1EE9 DB            push al          ; save a
0034+  1EEA 07 D6 1E      call hex_ascii_encode
0035+  1EED EA            pop bl  
0036+  1EEE FD 9E 04      shl al, 4
0037+  1EF1 8C            or al, bl
0038+  1EF2 E5            pop b
0039+  1EF3 09            ret  
0040+  1EF4             
0041+  1EF4             
0042+  1EF4             ;-----------------------------------------------------------------------------
0043+  1EF4             ; ITOA
0044+  1EF4             ; 8bit value in BL
0045+  1EF4             ; 2 byte ASCII result in A
0046+  1EF4             ;-----------------------------------------------------------------------------
0047+  1EF4             _itoa:
0048+  1EF4 DA            push d
0049+  1EF5 D8            push b
0050+  1EF6 A7 00         mov bh, 0
0051+  1EF8 FD A4 04      shr bl, 4  
0052+  1EFB 74            mov d, b
0053+  1EFC 1F A4 21      mov al, [d + s_hex_digits]
0054+  1EFF 23            mov ah, al
0055+  1F00               
0056+  1F00 E5            pop b
0057+  1F01 D8            push b
0058+  1F02 A7 00         mov bh, 0
0059+  1F04 FD 87 0F      and bl, $0F
0060+  1F07 74            mov d, b
0061+  1F08 1F A4 21      mov al, [d + s_hex_digits]
0062+  1F0B E5            pop b
0063+  1F0C E7            pop d
0064+  1F0D 09            ret
0065+  1F0E             
0066+  1F0E             ;-----------------------------------------------------------------------------
0067+  1F0E             ; HEX STRING TO BINARY
0068+  1F0E             ; di = destination address
0069+  1F0E             ; si = source
0070+  1F0E             ;-----------------------------------------------------------------------------
0071+  1F0E             _hex_to_int:
0072+  1F0E             _hex_to_int_L1:
0073+  1F0E F6            lodsb          ; load from [SI] to AL
0074+  1F0F B9 00         cmp al, 0        ; check if ASCII 0
0075+  1F11 C6 1E 1F      jz _hex_to_int_ret
0076+  1F14 36            mov bh, al
0077+  1F15 F6            lodsb
0078+  1F16 2F            mov bl, al
0079+  1F17 07 E4 1E      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1F1A F7            stosb          ; store AL to [DI]
0081+  1F1B 0A 0E 1F      jmp _hex_to_int_L1
0082+  1F1E             _hex_to_int_ret:
0083+  1F1E 09            ret    
0084+  1F1F             
0085+  1F1F             ;-----------------------------------------------------------------------------
0086+  1F1F             ; GETCHAR
0087+  1F1F             ; char in ah
0088+  1F1F             ;-----------------------------------------------------------------------------
0089+  1F1F             getch:
0090+  1F1F DB            push al
0091+  1F20             getch_retry:
0092+  1F20 19 01         mov al, 1
0093+  1F22 05 03         syscall sys_io      ; receive in AH
0094+  1F24 E8            pop al
0095+  1F25 09            ret
0096+  1F26             
0097+  1F26             ;-----------------------------------------------------------------------------
0098+  1F26             ; PUTCHAR
0099+  1F26             ; char in ah
0100+  1F26             ;-----------------------------------------------------------------------------
0101+  1F26             _putchar:
0102+  1F26 D7            push a
0103+  1F27 19 00         mov al, 0
0104+  1F29 05 03         syscall sys_io      ; char in AH
0105+  1F2B E4            pop a
0106+  1F2C 09            ret
0107+  1F2D             
0108+  1F2D             ;-----------------------------------------------------------------------------
0109+  1F2D             ;; INPUT A STRING
0110+  1F2D             ;; terminates with null
0111+  1F2D             ;; pointer in D
0112+  1F2D             ;-----------------------------------------------------------------------------
0113+  1F2D             _gets:
0114+  1F2D D7            push a
0115+  1F2E DA            push d
0116+  1F2F             _gets_loop:
0117+  1F2F 19 01         mov al, 1
0118+  1F31 05 03         syscall sys_io      ; receive in AH
0119+  1F33 B9 00         cmp al, 0        ; check error code (AL)
0120+  1F35 C6 2F 1F      je _gets_loop      ; if no char received, retry
0121+  1F38             
0122+  1F38 76 1B         cmp ah, 27
0123+  1F3A C6 5B 1F      je _gets_ansi_esc
0124+  1F3D 76 0A         cmp ah, $0A        ; LF
0125+  1F3F C6 C6 1F      je _gets_end
0126+  1F42 76 0D         cmp ah, $0D        ; CR
0127+  1F44 C6 C6 1F      je _gets_end
0128+  1F47 76 5C         cmp ah, $5C        ; '\\'
0129+  1F49 C6 87 1F      je _gets_escape
0130+  1F4C               
0131+  1F4C 76 08         cmp ah, $08      ; check for backspace
0132+  1F4E C6 57 1F      je _gets_backspace
0133+  1F51             
0134+  1F51 1A            mov al, ah
0135+  1F52 3E            mov [d], al
0136+  1F53 79            inc d
0137+  1F54 0A 2F 1F      jmp _gets_loop
0138+  1F57             _gets_backspace:
0139+  1F57 7F            dec d
0140+  1F58 0A 2F 1F      jmp _gets_loop
0141+  1F5B             _gets_ansi_esc:
0142+  1F5B 19 01         mov al, 1
0143+  1F5D 05 03         syscall sys_io        ; receive in AH without echo
0144+  1F5F B9 00         cmp al, 0          ; check error code (AL)
0145+  1F61 C6 5B 1F      je _gets_ansi_esc    ; if no char received, retry
0146+  1F64 76 5B         cmp ah, '['
0147+  1F66 C7 2F 1F      jne _gets_loop
0148+  1F69             _gets_ansi_esc_2:
0149+  1F69 19 01         mov al, 1
0150+  1F6B 05 03         syscall sys_io          ; receive in AH without echo
0151+  1F6D B9 00         cmp al, 0            ; check error code (AL)
0152+  1F6F C6 69 1F      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1F72 76 44         cmp ah, 'D'
0154+  1F74 C6 7F 1F      je _gets_left_arrow
0155+  1F77 76 43         cmp ah, 'C'
0156+  1F79 C6 83 1F      je _gets_right_arrow
0157+  1F7C 0A 2F 1F      jmp _gets_loop
0158+  1F7F             _gets_left_arrow:
0159+  1F7F 7F            dec d
0160+  1F80 0A 2F 1F      jmp _gets_loop
0161+  1F83             _gets_right_arrow:
0162+  1F83 79            inc d
0163+  1F84 0A 2F 1F      jmp _gets_loop
0164+  1F87             _gets_escape:
0165+  1F87 19 01         mov al, 1
0166+  1F89 05 03         syscall sys_io      ; receive in AH
0167+  1F8B B9 00         cmp al, 0        ; check error code (AL)
0168+  1F8D C6 87 1F      je _gets_escape      ; if no char received, retry
0169+  1F90 76 6E         cmp ah, 'n'
0170+  1F92 C6 B1 1F      je _gets_LF
0171+  1F95 76 72         cmp ah, 'r'
0172+  1F97 C6 B8 1F      je _gets_CR
0173+  1F9A 76 30         cmp ah, '0'
0174+  1F9C C6 BF 1F      je _gets_NULL
0175+  1F9F 76 5C         cmp ah, $5C  ; '\'
0176+  1FA1 C6 AA 1F      je _gets_slash
0177+  1FA4 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1FA5 3E            mov [d], al
0179+  1FA6 79            inc d
0180+  1FA7 0A 2F 1F      jmp _gets_loop
0181+  1FAA             _gets_slash:
0182+  1FAA 19 5C         mov al, $5C
0183+  1FAC 3E            mov [d], al
0184+  1FAD 79            inc d
0185+  1FAE 0A 2F 1F      jmp _gets_loop
0186+  1FB1             _gets_LF:
0187+  1FB1 19 0A         mov al, $0A
0188+  1FB3 3E            mov [d], al
0189+  1FB4 79            inc d
0190+  1FB5 0A 2F 1F      jmp _gets_loop
0191+  1FB8             _gets_CR:
0192+  1FB8 19 0D         mov al, $0D
0193+  1FBA 3E            mov [d], al
0194+  1FBB 79            inc d
0195+  1FBC 0A 2F 1F      jmp _gets_loop
0196+  1FBF             _gets_NULL:
0197+  1FBF 19 00         mov al, $00
0198+  1FC1 3E            mov [d], al
0199+  1FC2 79            inc d
0200+  1FC3 0A 2F 1F      jmp _gets_loop
0201+  1FC6             _gets_end:
0202+  1FC6 19 00         mov al, 0
0203+  1FC8 3E            mov [d], al        ; terminate string
0204+  1FC9 E7            pop d
0205+  1FCA E4            pop a
0206+  1FCB 09            ret
0207+  1FCC             
0208+  1FCC             ;-----------------------------------------------------------------------------
0209+  1FCC             ;; INPUT TEXT
0210+  1FCC             ;; terminated with CTRL+D
0211+  1FCC             ;; pointer in D
0212+  1FCC             ;-----------------------------------------------------------------------------
0213+  1FCC             _gettxt:
0214+  1FCC D7            push a
0215+  1FCD DA            push d
0216+  1FCE             _gettxt_loop:
0217+  1FCE 19 01         mov al, 1
0218+  1FD0 05 03         syscall sys_io      ; receive in AH
0219+  1FD2 B9 00         cmp al, 0        ; check error code (AL)
0220+  1FD4 C6 CE 1F      je _gettxt_loop    ; if no char received, retry
0221+  1FD7 76 04         cmp ah, 4      ; EOT
0222+  1FD9 C6 17 20      je _gettxt_end
0223+  1FDC 76 08         cmp ah, $08      ; check for backspace
0224+  1FDE C6 13 20      je _gettxt_backspace
0225+  1FE1 76 5C         cmp ah, $5C        ; '\'
0226+  1FE3 C6 EC 1F      je _gettxt_escape
0227+  1FE6 1A            mov al, ah
0228+  1FE7 3E            mov [d], al
0229+  1FE8 79            inc d
0230+  1FE9 0A CE 1F      jmp _gettxt_loop
0231+  1FEC             _gettxt_escape:
0232+  1FEC 19 01         mov al, 1
0233+  1FEE 05 03         syscall sys_io      ; receive in AH
0234+  1FF0 B9 00         cmp al, 0        ; check error code (AL)
0235+  1FF2 C6 EC 1F      je _gettxt_escape    ; if no char received, retry
0236+  1FF5 76 6E         cmp ah, 'n'
0237+  1FF7 C6 05 20      je _gettxt_LF
0238+  1FFA 76 72         cmp ah, 'r'
0239+  1FFC C6 0C 20      je _gettxt_CR
0240+  1FFF 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  2000 3E            mov [d], al
0242+  2001 79            inc d
0243+  2002 0A CE 1F      jmp _gettxt_loop
0244+  2005             _gettxt_LF:
0245+  2005 19 0A         mov al, $0A
0246+  2007 3E            mov [d], al
0247+  2008 79            inc d
0248+  2009 0A CE 1F      jmp _gettxt_loop
0249+  200C             _gettxt_CR:
0250+  200C 19 0D         mov al, $0D
0251+  200E 3E            mov [d], al
0252+  200F 79            inc d
0253+  2010 0A CE 1F      jmp _gettxt_loop
0254+  2013             _gettxt_backspace:
0255+  2013 7F            dec d
0256+  2014 0A CE 1F      jmp _gettxt_loop
0257+  2017             _gettxt_end:
0258+  2017 19 00         mov al, 0
0259+  2019 3E            mov [d], al        ; terminate string
0260+  201A E7            pop d
0261+  201B E4            pop a
0262+  201C 09            ret
0263+  201D             
0264+  201D             ;-----------------------------------------------------------------------------
0265+  201D             ; PRINT NEW LINE
0266+  201D             ;-----------------------------------------------------------------------------
0267+  201D             printnl:
0268+  201D D7            push a
0269+  201E 10 00 0A      mov a, $0A00
0270+  2021 05 03         syscall sys_io
0271+  2023 10 00 0D      mov a, $0D00
0272+  2026 05 03         syscall sys_io
0273+  2028 E4            pop a
0274+  2029 09            ret
0275+  202A             
0276+  202A             ;-----------------------------------------------------------------------------
0277+  202A             ; _strtoint
0278+  202A             ; 4 digit hex string number in d
0279+  202A             ; integer returned in A
0280+  202A             ;-----------------------------------------------------------------------------
0281+  202A             _strtointx:
0282+  202A D8            push b
0283+  202B 32            mov bl, [d]
0284+  202C 37            mov bh, bl
0285+  202D 33 01 00      mov bl, [d + 1]
0286+  2030 07 E4 1E      call _atoi        ; convert to int in AL
0287+  2033 23            mov ah, al        ; move to AH
0288+  2034 33 02 00      mov bl, [d + 2]
0289+  2037 37            mov bh, bl
0290+  2038 33 03 00      mov bl, [d + 3]
0291+  203B 07 E4 1E      call _atoi        ; convert to int in AL
0292+  203E E5            pop b
0293+  203F 09            ret
0294+  2040             
0295+  2040             ;-----------------------------------------------------------------------------
0296+  2040             ; _strtoint
0297+  2040             ; 5 digit base10 string number in d
0298+  2040             ; integer returned in A
0299+  2040             ;-----------------------------------------------------------------------------
0300+  2040             _strtoint:
0301+  2040 E2            push si
0302+  2041 D8            push b
0303+  2042 D9            push c
0304+  2043 DA            push d
0305+  2044 07 86 1E      call _strlen      ; get string length in C
0306+  2047 7E            dec c
0307+  2048 FD 4E         mov si, d
0308+  204A 12            mov a, c
0309+  204B FD 99         shl a
0310+  204D 3B BC 21      mov d, table_power
0311+  2050 59            add d, a
0312+  2051 38 00 00      mov c, 0
0313+  2054             _strtoint_L0:
0314+  2054 F6            lodsb      ; load ASCII to al
0315+  2055 B9 00         cmp al, 0
0316+  2057 C6 6A 20      je _strtoint_end
0317+  205A 6F 30         sub al, $30    ; make into integer
0318+  205C 22 00         mov ah, 0
0319+  205E 2A            mov b, [d]
0320+  205F AC            mul a, b      ; result in B since it fits in 16bits
0321+  2060 11            mov a, b
0322+  2061 28            mov b, c
0323+  2062 54            add a, b
0324+  2063 39            mov c, a
0325+  2064 63 02 00      sub d, 2
0326+  2067 0A 54 20      jmp _strtoint_L0
0327+  206A             _strtoint_end:
0328+  206A 12            mov a, c
0329+  206B E7            pop d
0330+  206C E6            pop c
0331+  206D E5            pop b
0332+  206E EF            pop si
0333+  206F 09            ret
0334+  2070             
0335+  2070             ;-----------------------------------------------------------------------------
0336+  2070             ; PRINT NULL TERMINATED STRING
0337+  2070             ; pointer in D
0338+  2070             ;-----------------------------------------------------------------------------
0339+  2070             _puts:
0340+  2070 D7            push a
0341+  2071 DA            push d
0342+  2072             _puts_L1:
0343+  2072 1E            mov al, [d]
0344+  2073 B9 00         cmp al, 0
0345+  2075 C6 81 20      jz _puts_END
0346+  2078 23            mov ah, al
0347+  2079 19 00         mov al, 0
0348+  207B 05 03         syscall sys_io
0349+  207D 79            inc d
0350+  207E 0A 72 20      jmp _puts_L1
0351+  2081             _puts_END:
0352+  2081 E7            pop d
0353+  2082 E4            pop a
0354+  2083 09            ret
0355+  2084             
0356+  2084             ;-----------------------------------------------------------------------------
0357+  2084             ; PRINT N SIZE STRING
0358+  2084             ; pointer in D
0359+  2084             ; size in C
0360+  2084             ;-----------------------------------------------------------------------------
0361+  2084             _putsn:
0362+  2084 DB            push al
0363+  2085 DA            push d
0364+  2086 D9            push c
0365+  2087             _putsn_L0:
0366+  2087 1E            mov al, [d]
0367+  2088 23            mov ah, al
0368+  2089 19 00         mov al, 0
0369+  208B 05 03         syscall sys_io
0370+  208D 79            inc d
0371+  208E 7E            dec c  
0372+  208F C2 00 00      cmp c, 0
0373+  2092 C7 87 20      jne _putsn_L0
0374+  2095             _putsn_end:
0375+  2095 E6            pop c
0376+  2096 E7            pop d
0377+  2097 E8            pop al
0378+  2098 09            ret
0379+  2099             
0380+  2099             ;-----------------------------------------------------------------------------
0381+  2099             ; print 16bit decimal number
0382+  2099             ; input number in A
0383+  2099             ;-----------------------------------------------------------------------------
0384+  2099             print_u16d:
0385+  2099 D7            push a
0386+  209A D8            push b
0387+  209B 26 10 27      mov b, 10000
0388+  209E AE            div a, b      ; get 10000's coeff.
0389+  209F 07 C1 20      call print_number
0390+  20A2 11            mov a, b
0391+  20A3 26 E8 03      mov b, 1000
0392+  20A6 AE            div a, b      ; get 1000's coeff.
0393+  20A7 07 C1 20      call print_number
0394+  20AA 11            mov a, b
0395+  20AB 26 64 00      mov b, 100
0396+  20AE AE            div a, b
0397+  20AF 07 C1 20      call print_number
0398+  20B2 11            mov a, b
0399+  20B3 26 0A 00      mov b, 10
0400+  20B6 AE            div a, b
0401+  20B7 07 C1 20      call print_number
0402+  20BA 1B            mov al, bl      ; 1's coeff in bl
0403+  20BB 07 C1 20      call print_number
0404+  20BE E5            pop b
0405+  20BF E4            pop a
0406+  20C0 09            ret
0407+  20C1             
0408+  20C1             ;-----------------------------------------------------------------------------
0409+  20C1             ; print AL
0410+  20C1             ;-----------------------------------------------------------------------------
0411+  20C1             print_number:
0412+  20C1 6A 30         add al, $30
0413+  20C3 23            mov ah, al
0414+  20C4 07 26 1F      call _putchar
0415+  20C7 09            ret
0416+  20C8             
0417+  20C8             ;-----------------------------------------------------------------------------
0418+  20C8             ; PRINT 16BIT HEX INTEGER
0419+  20C8             ; integer value in reg B
0420+  20C8             ;-----------------------------------------------------------------------------
0421+  20C8             print_u16x:
0422+  20C8 D7            push a
0423+  20C9 D8            push b
0424+  20CA DD            push bl
0425+  20CB 30            mov bl, bh
0426+  20CC 07 F4 1E      call _itoa        ; convert bh to char in A
0427+  20CF 2F            mov bl, al        ; save al
0428+  20D0 19 00         mov al, 0
0429+  20D2 05 03         syscall sys_io        ; display AH
0430+  20D4 24            mov ah, bl        ; retrieve al
0431+  20D5 19 00         mov al, 0
0432+  20D7 05 03         syscall sys_io        ; display AL
0433+  20D9             
0434+  20D9 EA            pop bl
0435+  20DA 07 F4 1E      call _itoa        ; convert bh to char in A
0436+  20DD 2F            mov bl, al        ; save al
0437+  20DE 19 00         mov al, 0
0438+  20E0 05 03         syscall sys_io        ; display AH
0439+  20E2 24            mov ah, bl        ; retrieve al
0440+  20E3 19 00         mov al, 0
0441+  20E5 05 03         syscall sys_io        ; display AL
0442+  20E7             
0443+  20E7 E5            pop b
0444+  20E8 E4            pop a
0445+  20E9 09            ret
0446+  20EA             
0447+  20EA             ;-----------------------------------------------------------------------------
0448+  20EA             ; INPUT 16BIT HEX INTEGER
0449+  20EA             ; read 16bit integer into A
0450+  20EA             ;-----------------------------------------------------------------------------
0451+  20EA             scan_u16x:
0452+  20EA F8 10 00      enter 16
0453+  20ED D8            push b
0454+  20EE DA            push d
0455+  20EF             
0456+  20EF FA F1 FF      lea d, [bp + -15]
0457+  20F2 07 2D 1F      call _gets        ; get number
0458+  20F5             
0459+  20F5 32            mov bl, [d]
0460+  20F6 37            mov bh, bl
0461+  20F7 33 01 00      mov bl, [d + 1]
0462+  20FA 07 E4 1E      call _atoi        ; convert to int in AL
0463+  20FD 23            mov ah, al        ; move to AH
0464+  20FE             
0465+  20FE 33 02 00      mov bl, [d + 2]
0466+  2101 37            mov bh, bl
0467+  2102 33 03 00      mov bl, [d + 3]
0468+  2105 07 E4 1E      call _atoi        ; convert to int in AL
0469+  2108             
0470+  2108 E7            pop d
0471+  2109 E5            pop b
0472+  210A F9            leave
0473+  210B 09            ret
0474+  210C             
0475+  210C             ;-----------------------------------------------------------------------------
0476+  210C             ; PRINT 8bit HEX INTEGER
0477+  210C             ; integer value in reg bl
0478+  210C             ;-----------------------------------------------------------------------------
0479+  210C             print_u8x:
0480+  210C D7            push a
0481+  210D DD            push bl
0482+  210E             
0483+  210E 07 F4 1E      call _itoa        ; convert bl to char in A
0484+  2111 2F            mov bl, al        ; save al
0485+  2112 19 00         mov al, 0
0486+  2114 05 03         syscall sys_io        ; display AH
0487+  2116 24            mov ah, bl        ; retrieve al
0488+  2117 19 00         mov al, 0
0489+  2119 05 03         syscall sys_io        ; display AL
0490+  211B             
0491+  211B EA            pop bl
0492+  211C E4            pop a
0493+  211D 09            ret
0494+  211E             
0495+  211E             ;-----------------------------------------------------------------------------
0496+  211E             ; print 8bit decimal unsigned number
0497+  211E             ; input number in AL
0498+  211E             ;-----------------------------------------------------------------------------
0499+  211E             print_u8d:
0500+  211E D7            push a
0501+  211F D8            push b
0502+  2120             
0503+  2120 22 00         mov ah, 0
0504+  2122 26 64 00      mov b, 100
0505+  2125 AE            div a, b
0506+  2126 D8            push b      ; save remainder
0507+  2127 B9 00         cmp al, 0
0508+  2129 C6 33 21      je skip100
0509+  212C 6A 30         add al, $30
0510+  212E 23            mov ah, al
0511+  212F 19 00         mov al, 0
0512+  2131 05 03         syscall sys_io  ; print coeff
0513+  2133             skip100:
0514+  2133 E4            pop a
0515+  2134 22 00         mov ah, 0
0516+  2136 26 0A 00      mov b, 10
0517+  2139 AE            div a, b
0518+  213A D8            push b      ; save remainder
0519+  213B B9 00         cmp al, 0
0520+  213D C6 47 21      je skip10
0521+  2140 6A 30         add al, $30
0522+  2142 23            mov ah, al
0523+  2143 19 00         mov al, 0
0524+  2145 05 03         syscall sys_io  ; print coeff
0525+  2147             skip10:
0526+  2147 E4            pop a
0527+  2148 1B            mov al, bl
0528+  2149 6A 30         add al, $30
0529+  214B 23            mov ah, al
0530+  214C 19 00         mov al, 0
0531+  214E 05 03         syscall sys_io  ; print coeff
0532+  2150 E5            pop b
0533+  2151 E4            pop a
0534+  2152 09            ret
0535+  2153             
0536+  2153             ;-----------------------------------------------------------------------------
0537+  2153             ; INPUT 8BIT HEX INTEGER
0538+  2153             ; read 8bit integer into AL
0539+  2153             ;-----------------------------------------------------------------------------
0540+  2153             scan_u8x:
0541+  2153 F8 04 00      enter 4
0542+  2156 D8            push b
0543+  2157 DA            push d
0544+  2158             
0545+  2158 FA FD FF      lea d, [bp + -3]
0546+  215B 07 2D 1F      call _gets        ; get number
0547+  215E             
0548+  215E 32            mov bl, [d]
0549+  215F 37            mov bh, bl
0550+  2160 33 01 00      mov bl, [d + 1]
0551+  2163 07 E4 1E      call _atoi        ; convert to int in AL
0552+  2166             
0553+  2166 E7            pop d
0554+  2167 E5            pop b
0555+  2168 F9            leave
0556+  2169 09            ret
0557+  216A             
0558+  216A             ;-----------------------------------------------------------------------------
0559+  216A             ; input decimal number
0560+  216A             ; result in A
0561+  216A             ; 655'\0'
0562+  216A             ; low--------high
0563+  216A             ;-----------------------------------------------------------------------------
0564+  216A             scan_u16d:
0565+  216A F8 08 00      enter 8
0566+  216D E2            push si
0567+  216E D8            push b
0568+  216F D9            push c
0569+  2170 DA            push d
0570+  2171 FA F9 FF      lea d, [bp +- 7]
0571+  2174 07 2D 1F      call _gets
0572+  2177 07 86 1E      call _strlen      ; get string length in C
0573+  217A 7E            dec c
0574+  217B FD 4E         mov si, d
0575+  217D 12            mov a, c
0576+  217E FD 99         shl a
0577+  2180 3B BC 21      mov d, table_power
0578+  2183 59            add d, a
0579+  2184 38 00 00      mov c, 0
0580+  2187             mul_loop:
0581+  2187 F6            lodsb      ; load ASCII to al
0582+  2188 B9 00         cmp al, 0
0583+  218A C6 9D 21      je mul_exit
0584+  218D 6F 30         sub al, $30    ; make into integer
0585+  218F 22 00         mov ah, 0
0586+  2191 2A            mov b, [d]
0587+  2192 AC            mul a, b      ; result in B since it fits in 16bits
0588+  2193 11            mov a, b
0589+  2194 28            mov b, c
0590+  2195 54            add a, b
0591+  2196 39            mov c, a
0592+  2197 63 02 00      sub d, 2
0593+  219A 0A 87 21      jmp mul_loop
0594+  219D             mul_exit:
0595+  219D 12            mov a, c
0596+  219E E7            pop d
0597+  219F E6            pop c
0598+  21A0 E5            pop b
0599+  21A1 EF            pop si
0600+  21A2 F9            leave
0601+  21A3 09            ret
0602+  21A4             
0603+  21A4 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  21A8 34 35 36 37 
0603+  21AC 38 39 41 42 
0603+  21B0 43 44 45 46 
0604+  21B4 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  21B8 1B 5B 48 00 
0605+  21BC             
0606+  21BC             table_power:
0607+  21BC 01 00         .dw 1
0608+  21BE 0A 00         .dw 10
0609+  21C0 64 00         .dw 100
0610+  21C2 E8 03         .dw 1000
0611+  21C4 10 27         .dw 100004262   21C6             ; --- END INLINE ASM SEGMENT
4263   21C6             
4264   21C6 F9            leave
4265   21C7 09            ret
4266   21C8             
4267   21C8             base64_encode:
4268   21C8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4269   21CB             ; int i = 0; 
4270   21CB 52 02 00      sub sp, 2
4271   21CE             ; --- START LOCAL VAR INITIALIZATION
4272   21CE FA FF FF      lea d, [bp + -1] ; $i
4273   21D1 DA            push d
4274   21D2 FD 2E 00 00   mov32 cb, $00000000
4274   21D6 00 00 
4275   21D8 E7            pop d
4276   21D9 FD 43         mov [d], b
4277   21DB             ; --- END LOCAL VAR INITIALIZATION
4278   21DB             ; int j = 0; 
4279   21DB 52 02 00      sub sp, 2
4280   21DE             ; --- START LOCAL VAR INITIALIZATION
4281   21DE FA FD FF      lea d, [bp + -3] ; $j
4282   21E1 DA            push d
4283   21E2 FD 2E 00 00   mov32 cb, $00000000
4283   21E6 00 00 
4284   21E8 E7            pop d
4285   21E9 FD 43         mov [d], b
4286   21EB             ; --- END LOCAL VAR INITIALIZATION
4287   21EB             ; int k; 
4288   21EB 52 02 00      sub sp, 2
4289   21EE             ; int input_len; 
4290   21EE 52 02 00      sub sp, 2
4291   21F1             ; unsigned char input_buffer[3]; 
4292   21F1 52 03 00      sub sp, 3
4293   21F4             ; unsigned char output_buffer[4]; 
4294   21F4 52 04 00      sub sp, 4
4295   21F7             ; input_len = strlen(input); 
4296   21F7 FA F9 FF      lea d, [bp + -7] ; $input_len
4297   21FA DA            push d
4298   21FB             ; --- START FUNCTION CALL
4299   21FB FA 05 00      lea d, [bp + 5] ; $input
4300   21FE 2A            mov b, [d]
4301   21FF 38 00 00      mov c, 0
4302   2202 FD AB         swp b
4303   2204 D8            push b
4304   2205 07 79 06      call strlen
4305   2208 51 02 00      add sp, 2
4306   220B             ; --- END FUNCTION CALL
4307   220B E7            pop d
4308   220C FD 43         mov [d], b
4309   220E             ; while (input_len--) { 
4310   220E             _while56_cond:
4311   220E FA F9 FF      lea d, [bp + -7] ; $input_len
4312   2211 2A            mov b, [d]
4313   2212 38 00 00      mov c, 0
4314   2215 FD 7D         dec b
4315   2217 FA F9 FF      lea d, [bp + -7] ; $input_len
4316   221A FD 43         mov [d], b
4317   221C FD 77         inc b
4318   221E C0 00 00      cmp b, 0
4319   2221 C6 50 24      je _while56_exit
4320   2224             _while56_block:
4321   2224             ; input_buffer[i++] = *(input++); 
4322   2224 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4323   2227 D7            push a
4324   2228 DA            push d
4325   2229 FA FF FF      lea d, [bp + -1] ; $i
4326   222C 2A            mov b, [d]
4327   222D 38 00 00      mov c, 0
4328   2230 FD 77         inc b
4329   2232 FA FF FF      lea d, [bp + -1] ; $i
4330   2235 FD 43         mov [d], b
4331   2237 FD 7D         dec b
4332   2239 E7            pop d
4333   223A 5A            add d, b
4334   223B E4            pop a
4335   223C DA            push d
4336   223D FA 05 00      lea d, [bp + 5] ; $input
4337   2240 2A            mov b, [d]
4338   2241 38 00 00      mov c, 0
4339   2244 FD 77         inc b
4340   2246 FA 05 00      lea d, [bp + 5] ; $input
4341   2249 FD 43         mov [d], b
4342   224B FD 7D         dec b
4343   224D 74            mov d, b
4344   224E 32            mov bl, [d]
4345   224F A7 00         mov bh, 0
4346   2251 38 00 00      mov c, 0
4347   2254 E7            pop d
4348   2255 FD 3E         mov [d], bl
4349   2257             ; if (i == 3) { 
4350   2257             _if57_cond:
4351   2257 FA FF FF      lea d, [bp + -1] ; $i
4352   225A 2A            mov b, [d]
4353   225B 38 00 00      mov c, 0
4354   225E             ; --- START RELATIONAL
4355   225E D7            push a
4356   225F 11            mov a, b
4357   2260 FD 2E 03 00   mov32 cb, $00000003
4357   2264 00 00 
4358   2266 B0            cmp a, b
4359   2267 FD 71         seq ; ==
4360   2269 E4            pop a
4361   226A             ; --- END RELATIONAL
4362   226A C0 00 00      cmp b, 0
4363   226D C6 4D 24      je _if57_exit
4364   2270             _if57_true:
4365   2270             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
4366   2270 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4367   2273 D7            push a
4368   2274 DA            push d
4369   2275 FD 2E 00 00   mov32 cb, $00000000
4369   2279 00 00 
4370   227B E7            pop d
4371   227C 5A            add d, b
4372   227D E4            pop a
4373   227E DA            push d
4374   227F FA F6 FF      lea d, [bp + -10] ; $input_buffer
4375   2282 D7            push a
4376   2283 DA            push d
4377   2284 FD 2E 00 00   mov32 cb, $00000000
4377   2288 00 00 
4378   228A E7            pop d
4379   228B 5A            add d, b
4380   228C E4            pop a
4381   228D 32            mov bl, [d]
4382   228E A7 00         mov bh, 0
4383   2290 38 00 00      mov c, 0
4384   2293 D7            push a
4385   2294 11            mov a, b
4386   2295 FD 2E FC 00   mov32 cb, $000000fc
4386   2299 00 00 
4387   229B FD 92         and b, a ; &
4388   229D E4            pop a
4389   229E             ; --- START SHIFT
4390   229E D7            push a
4391   229F 11            mov a, b
4392   22A0 FD 2E 02 00   mov32 cb, $00000002
4392   22A4 00 00 
4393   22A6 FD 39         mov c, b
4394   22A8 A5            ashr a, cl
4395   22A9 27            mov b, a
4396   22AA E4            pop a
4397   22AB             ; --- END SHIFT
4398   22AB E7            pop d
4399   22AC FD 3E         mov [d], bl
4400   22AE             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
4401   22AE FA F2 FF      lea d, [bp + -14] ; $output_buffer
4402   22B1 D7            push a
4403   22B2 DA            push d
4404   22B3 FD 2E 01 00   mov32 cb, $00000001
4404   22B7 00 00 
4405   22B9 E7            pop d
4406   22BA 5A            add d, b
4407   22BB E4            pop a
4408   22BC DA            push d
4409   22BD FA F6 FF      lea d, [bp + -10] ; $input_buffer
4410   22C0 D7            push a
4411   22C1 DA            push d
4412   22C2 FD 2E 00 00   mov32 cb, $00000000
4412   22C6 00 00 
4413   22C8 E7            pop d
4414   22C9 5A            add d, b
4415   22CA E4            pop a
4416   22CB 32            mov bl, [d]
4417   22CC A7 00         mov bh, 0
4418   22CE 38 00 00      mov c, 0
4419   22D1 D7            push a
4420   22D2 11            mov a, b
4421   22D3 FD 2E 03 00   mov32 cb, $00000003
4421   22D7 00 00 
4422   22D9 FD 92         and b, a ; &
4423   22DB E4            pop a
4424   22DC             ; --- START SHIFT
4425   22DC D7            push a
4426   22DD 11            mov a, b
4427   22DE FD 2E 04 00   mov32 cb, $00000004
4427   22E2 00 00 
4428   22E4 FD 39         mov c, b
4429   22E6 9D            shl a, cl
4430   22E7 27            mov b, a
4431   22E8 E4            pop a
4432   22E9             ; --- END SHIFT
4433   22E9             ; --- START TERMS
4434   22E9 D7            push a
4435   22EA 11            mov a, b
4436   22EB FA F6 FF      lea d, [bp + -10] ; $input_buffer
4437   22EE D7            push a
4438   22EF DA            push d
4439   22F0 FD 2E 01 00   mov32 cb, $00000001
4439   22F4 00 00 
4440   22F6 E7            pop d
4441   22F7 5A            add d, b
4442   22F8 E4            pop a
4443   22F9 32            mov bl, [d]
4444   22FA A7 00         mov bh, 0
4445   22FC 38 00 00      mov c, 0
4446   22FF D7            push a
4447   2300 11            mov a, b
4448   2301 FD 2E F0 00   mov32 cb, $000000f0
4448   2305 00 00 
4449   2307 FD 92         and b, a ; &
4450   2309 E4            pop a
4451   230A             ; --- START SHIFT
4452   230A D7            push a
4453   230B 11            mov a, b
4454   230C FD 2E 04 00   mov32 cb, $00000004
4454   2310 00 00 
4455   2312 FD 39         mov c, b
4456   2314 A5            ashr a, cl
4457   2315 27            mov b, a
4458   2316 E4            pop a
4459   2317             ; --- END SHIFT
4460   2317 56            add b, a
4461   2318 E4            pop a
4462   2319             ; --- END TERMS
4463   2319 E7            pop d
4464   231A FD 3E         mov [d], bl
4465   231C             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
4466   231C FA F2 FF      lea d, [bp + -14] ; $output_buffer
4467   231F D7            push a
4468   2320 DA            push d
4469   2321 FD 2E 02 00   mov32 cb, $00000002
4469   2325 00 00 
4470   2327 E7            pop d
4471   2328 5A            add d, b
4472   2329 E4            pop a
4473   232A DA            push d
4474   232B FA F6 FF      lea d, [bp + -10] ; $input_buffer
4475   232E D7            push a
4476   232F DA            push d
4477   2330 FD 2E 01 00   mov32 cb, $00000001
4477   2334 00 00 
4478   2336 E7            pop d
4479   2337 5A            add d, b
4480   2338 E4            pop a
4481   2339 32            mov bl, [d]
4482   233A A7 00         mov bh, 0
4483   233C 38 00 00      mov c, 0
4484   233F D7            push a
4485   2340 11            mov a, b
4486   2341 FD 2E 0F 00   mov32 cb, $0000000f
4486   2345 00 00 
4487   2347 FD 92         and b, a ; &
4488   2349 E4            pop a
4489   234A             ; --- START SHIFT
4490   234A D7            push a
4491   234B 11            mov a, b
4492   234C FD 2E 02 00   mov32 cb, $00000002
4492   2350 00 00 
4493   2352 FD 39         mov c, b
4494   2354 9D            shl a, cl
4495   2355 27            mov b, a
4496   2356 E4            pop a
4497   2357             ; --- END SHIFT
4498   2357             ; --- START TERMS
4499   2357 D7            push a
4500   2358 11            mov a, b
4501   2359 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4502   235C D7            push a
4503   235D DA            push d
4504   235E FD 2E 02 00   mov32 cb, $00000002
4504   2362 00 00 
4505   2364 E7            pop d
4506   2365 5A            add d, b
4507   2366 E4            pop a
4508   2367 32            mov bl, [d]
4509   2368 A7 00         mov bh, 0
4510   236A 38 00 00      mov c, 0
4511   236D D7            push a
4512   236E 11            mov a, b
4513   236F FD 2E C0 00   mov32 cb, $000000c0
4513   2373 00 00 
4514   2375 FD 92         and b, a ; &
4515   2377 E4            pop a
4516   2378             ; --- START SHIFT
4517   2378 D7            push a
4518   2379 11            mov a, b
4519   237A FD 2E 06 00   mov32 cb, $00000006
4519   237E 00 00 
4520   2380 FD 39         mov c, b
4521   2382 A5            ashr a, cl
4522   2383 27            mov b, a
4523   2384 E4            pop a
4524   2385             ; --- END SHIFT
4525   2385 56            add b, a
4526   2386 E4            pop a
4527   2387             ; --- END TERMS
4528   2387 E7            pop d
4529   2388 FD 3E         mov [d], bl
4530   238A             ; output_buffer[3] = input_buffer[2] & 0x3F; 
4531   238A FA F2 FF      lea d, [bp + -14] ; $output_buffer
4532   238D D7            push a
4533   238E DA            push d
4534   238F FD 2E 03 00   mov32 cb, $00000003
4534   2393 00 00 
4535   2395 E7            pop d
4536   2396 5A            add d, b
4537   2397 E4            pop a
4538   2398 DA            push d
4539   2399 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4540   239C D7            push a
4541   239D DA            push d
4542   239E FD 2E 02 00   mov32 cb, $00000002
4542   23A2 00 00 
4543   23A4 E7            pop d
4544   23A5 5A            add d, b
4545   23A6 E4            pop a
4546   23A7 32            mov bl, [d]
4547   23A8 A7 00         mov bh, 0
4548   23AA 38 00 00      mov c, 0
4549   23AD D7            push a
4550   23AE 11            mov a, b
4551   23AF FD 2E 3F 00   mov32 cb, $0000003f
4551   23B3 00 00 
4552   23B5 FD 92         and b, a ; &
4553   23B7 E4            pop a
4554   23B8 E7            pop d
4555   23B9 FD 3E         mov [d], bl
4556   23BB             ; for (i = 0; i < 4; i++) { 
4557   23BB             _for58_init:
4558   23BB FA FF FF      lea d, [bp + -1] ; $i
4559   23BE DA            push d
4560   23BF FD 2E 00 00   mov32 cb, $00000000
4560   23C3 00 00 
4561   23C5 E7            pop d
4562   23C6 FD 43         mov [d], b
4563   23C8             _for58_cond:
4564   23C8 FA FF FF      lea d, [bp + -1] ; $i
4565   23CB 2A            mov b, [d]
4566   23CC 38 00 00      mov c, 0
4567   23CF             ; --- START RELATIONAL
4568   23CF D7            push a
4569   23D0 11            mov a, b
4570   23D1 FD 2E 04 00   mov32 cb, $00000004
4570   23D5 00 00 
4571   23D7 B0            cmp a, b
4572   23D8 FD 73         slt ; < (signed)
4573   23DA E4            pop a
4574   23DB             ; --- END RELATIONAL
4575   23DB C0 00 00      cmp b, 0
4576   23DE C6 3D 24      je _for58_exit
4577   23E1             _for58_block:
4578   23E1             ; output[j++] = base64_table[output_buffer[i]]; 
4579   23E1 FA 07 00      lea d, [bp + 7] ; $output
4580   23E4 FD 2A         mov d, [d]
4581   23E6 D7            push a
4582   23E7 DA            push d
4583   23E8 FA FD FF      lea d, [bp + -3] ; $j
4584   23EB 2A            mov b, [d]
4585   23EC 38 00 00      mov c, 0
4586   23EF FD 77         inc b
4587   23F1 FA FD FF      lea d, [bp + -3] ; $j
4588   23F4 FD 43         mov [d], b
4589   23F6 FD 7D         dec b
4590   23F8 E7            pop d
4591   23F9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4592   23FD E4            pop a
4593   23FE DA            push d
4594   23FF 3B C0 2D      mov d, _base64_table ; $base64_table
4595   2402 FD 2A         mov d, [d]
4596   2404 D7            push a
4597   2405 DA            push d
4598   2406 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4599   2409 D7            push a
4600   240A DA            push d
4601   240B FA FF FF      lea d, [bp + -1] ; $i
4602   240E 2A            mov b, [d]
4603   240F 38 00 00      mov c, 0
4604   2412 E7            pop d
4605   2413 5A            add d, b
4606   2414 E4            pop a
4607   2415 32            mov bl, [d]
4608   2416 A7 00         mov bh, 0
4609   2418 38 00 00      mov c, 0
4610   241B E7            pop d
4611   241C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4612   2420 E4            pop a
4613   2421 32            mov bl, [d]
4614   2422 A7 00         mov bh, 0
4615   2424 38 00 00      mov c, 0
4616   2427 E7            pop d
4617   2428 FD 3E         mov [d], bl
4618   242A             _for58_update:
4619   242A FA FF FF      lea d, [bp + -1] ; $i
4620   242D 2A            mov b, [d]
4621   242E 38 00 00      mov c, 0
4622   2431 FD 77         inc b
4623   2433 FA FF FF      lea d, [bp + -1] ; $i
4624   2436 FD 43         mov [d], b
4625   2438 FD 7D         dec b
4626   243A 0A C8 23      jmp _for58_cond
4627   243D             _for58_exit:
4628   243D             ; i = 0; 
4629   243D FA FF FF      lea d, [bp + -1] ; $i
4630   2440 DA            push d
4631   2441 FD 2E 00 00   mov32 cb, $00000000
4631   2445 00 00 
4632   2447 E7            pop d
4633   2448 FD 43         mov [d], b
4634   244A 0A 4D 24      jmp _if57_exit
4635   244D             _if57_exit:
4636   244D 0A 0E 22      jmp _while56_cond
4637   2450             _while56_exit:
4638   2450             ; if (i) { 
4639   2450             _if59_cond:
4640   2450 FA FF FF      lea d, [bp + -1] ; $i
4641   2453 2A            mov b, [d]
4642   2454 38 00 00      mov c, 0
4643   2457 C0 00 00      cmp b, 0
4644   245A C6 A6 26      je _if59_exit
4645   245D             _if59_true:
4646   245D             ; for (k = i; k < 3; k++) { 
4647   245D             _for60_init:
4648   245D FA FB FF      lea d, [bp + -5] ; $k
4649   2460 DA            push d
4650   2461 FA FF FF      lea d, [bp + -1] ; $i
4651   2464 2A            mov b, [d]
4652   2465 38 00 00      mov c, 0
4653   2468 E7            pop d
4654   2469 FD 43         mov [d], b
4655   246B             _for60_cond:
4656   246B FA FB FF      lea d, [bp + -5] ; $k
4657   246E 2A            mov b, [d]
4658   246F 38 00 00      mov c, 0
4659   2472             ; --- START RELATIONAL
4660   2472 D7            push a
4661   2473 11            mov a, b
4662   2474 FD 2E 03 00   mov32 cb, $00000003
4662   2478 00 00 
4663   247A B0            cmp a, b
4664   247B FD 73         slt ; < (signed)
4665   247D E4            pop a
4666   247E             ; --- END RELATIONAL
4667   247E C0 00 00      cmp b, 0
4668   2481 C6 B0 24      je _for60_exit
4669   2484             _for60_block:
4670   2484             ; input_buffer[k] = '\0'; 
4671   2484 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4672   2487 D7            push a
4673   2488 DA            push d
4674   2489 FA FB FF      lea d, [bp + -5] ; $k
4675   248C 2A            mov b, [d]
4676   248D 38 00 00      mov c, 0
4677   2490 E7            pop d
4678   2491 5A            add d, b
4679   2492 E4            pop a
4680   2493 DA            push d
4681   2494 FD 2E 00 00   mov32 cb, $00000000
4681   2498 00 00 
4682   249A E7            pop d
4683   249B FD 3E         mov [d], bl
4684   249D             _for60_update:
4685   249D FA FB FF      lea d, [bp + -5] ; $k
4686   24A0 2A            mov b, [d]
4687   24A1 38 00 00      mov c, 0
4688   24A4 FD 77         inc b
4689   24A6 FA FB FF      lea d, [bp + -5] ; $k
4690   24A9 FD 43         mov [d], b
4691   24AB FD 7D         dec b
4692   24AD 0A 6B 24      jmp _for60_cond
4693   24B0             _for60_exit:
4694   24B0             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
4695   24B0 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4696   24B3 D7            push a
4697   24B4 DA            push d
4698   24B5 FD 2E 00 00   mov32 cb, $00000000
4698   24B9 00 00 
4699   24BB E7            pop d
4700   24BC 5A            add d, b
4701   24BD E4            pop a
4702   24BE DA            push d
4703   24BF FA F6 FF      lea d, [bp + -10] ; $input_buffer
4704   24C2 D7            push a
4705   24C3 DA            push d
4706   24C4 FD 2E 00 00   mov32 cb, $00000000
4706   24C8 00 00 
4707   24CA E7            pop d
4708   24CB 5A            add d, b
4709   24CC E4            pop a
4710   24CD 32            mov bl, [d]
4711   24CE A7 00         mov bh, 0
4712   24D0 38 00 00      mov c, 0
4713   24D3 D7            push a
4714   24D4 11            mov a, b
4715   24D5 FD 2E FC 00   mov32 cb, $000000fc
4715   24D9 00 00 
4716   24DB FD 92         and b, a ; &
4717   24DD E4            pop a
4718   24DE             ; --- START SHIFT
4719   24DE D7            push a
4720   24DF 11            mov a, b
4721   24E0 FD 2E 02 00   mov32 cb, $00000002
4721   24E4 00 00 
4722   24E6 FD 39         mov c, b
4723   24E8 A5            ashr a, cl
4724   24E9 27            mov b, a
4725   24EA E4            pop a
4726   24EB             ; --- END SHIFT
4727   24EB E7            pop d
4728   24EC FD 3E         mov [d], bl
4729   24EE             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
4730   24EE FA F2 FF      lea d, [bp + -14] ; $output_buffer
4731   24F1 D7            push a
4732   24F2 DA            push d
4733   24F3 FD 2E 01 00   mov32 cb, $00000001
4733   24F7 00 00 
4734   24F9 E7            pop d
4735   24FA 5A            add d, b
4736   24FB E4            pop a
4737   24FC DA            push d
4738   24FD FA F6 FF      lea d, [bp + -10] ; $input_buffer
4739   2500 D7            push a
4740   2501 DA            push d
4741   2502 FD 2E 00 00   mov32 cb, $00000000
4741   2506 00 00 
4742   2508 E7            pop d
4743   2509 5A            add d, b
4744   250A E4            pop a
4745   250B 32            mov bl, [d]
4746   250C A7 00         mov bh, 0
4747   250E 38 00 00      mov c, 0
4748   2511 D7            push a
4749   2512 11            mov a, b
4750   2513 FD 2E 03 00   mov32 cb, $00000003
4750   2517 00 00 
4751   2519 FD 92         and b, a ; &
4752   251B E4            pop a
4753   251C             ; --- START SHIFT
4754   251C D7            push a
4755   251D 11            mov a, b
4756   251E FD 2E 04 00   mov32 cb, $00000004
4756   2522 00 00 
4757   2524 FD 39         mov c, b
4758   2526 9D            shl a, cl
4759   2527 27            mov b, a
4760   2528 E4            pop a
4761   2529             ; --- END SHIFT
4762   2529             ; --- START TERMS
4763   2529 D7            push a
4764   252A 11            mov a, b
4765   252B FA F6 FF      lea d, [bp + -10] ; $input_buffer
4766   252E D7            push a
4767   252F DA            push d
4768   2530 FD 2E 01 00   mov32 cb, $00000001
4768   2534 00 00 
4769   2536 E7            pop d
4770   2537 5A            add d, b
4771   2538 E4            pop a
4772   2539 32            mov bl, [d]
4773   253A A7 00         mov bh, 0
4774   253C 38 00 00      mov c, 0
4775   253F D7            push a
4776   2540 11            mov a, b
4777   2541 FD 2E F0 00   mov32 cb, $000000f0
4777   2545 00 00 
4778   2547 FD 92         and b, a ; &
4779   2549 E4            pop a
4780   254A             ; --- START SHIFT
4781   254A D7            push a
4782   254B 11            mov a, b
4783   254C FD 2E 04 00   mov32 cb, $00000004
4783   2550 00 00 
4784   2552 FD 39         mov c, b
4785   2554 A5            ashr a, cl
4786   2555 27            mov b, a
4787   2556 E4            pop a
4788   2557             ; --- END SHIFT
4789   2557 56            add b, a
4790   2558 E4            pop a
4791   2559             ; --- END TERMS
4792   2559 E7            pop d
4793   255A FD 3E         mov [d], bl
4794   255C             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
4795   255C FA F2 FF      lea d, [bp + -14] ; $output_buffer
4796   255F D7            push a
4797   2560 DA            push d
4798   2561 FD 2E 02 00   mov32 cb, $00000002
4798   2565 00 00 
4799   2567 E7            pop d
4800   2568 5A            add d, b
4801   2569 E4            pop a
4802   256A DA            push d
4803   256B FA F6 FF      lea d, [bp + -10] ; $input_buffer
4804   256E D7            push a
4805   256F DA            push d
4806   2570 FD 2E 01 00   mov32 cb, $00000001
4806   2574 00 00 
4807   2576 E7            pop d
4808   2577 5A            add d, b
4809   2578 E4            pop a
4810   2579 32            mov bl, [d]
4811   257A A7 00         mov bh, 0
4812   257C 38 00 00      mov c, 0
4813   257F D7            push a
4814   2580 11            mov a, b
4815   2581 FD 2E 0F 00   mov32 cb, $0000000f
4815   2585 00 00 
4816   2587 FD 92         and b, a ; &
4817   2589 E4            pop a
4818   258A             ; --- START SHIFT
4819   258A D7            push a
4820   258B 11            mov a, b
4821   258C FD 2E 02 00   mov32 cb, $00000002
4821   2590 00 00 
4822   2592 FD 39         mov c, b
4823   2594 9D            shl a, cl
4824   2595 27            mov b, a
4825   2596 E4            pop a
4826   2597             ; --- END SHIFT
4827   2597             ; --- START TERMS
4828   2597 D7            push a
4829   2598 11            mov a, b
4830   2599 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4831   259C D7            push a
4832   259D DA            push d
4833   259E FD 2E 02 00   mov32 cb, $00000002
4833   25A2 00 00 
4834   25A4 E7            pop d
4835   25A5 5A            add d, b
4836   25A6 E4            pop a
4837   25A7 32            mov bl, [d]
4838   25A8 A7 00         mov bh, 0
4839   25AA 38 00 00      mov c, 0
4840   25AD D7            push a
4841   25AE 11            mov a, b
4842   25AF FD 2E C0 00   mov32 cb, $000000c0
4842   25B3 00 00 
4843   25B5 FD 92         and b, a ; &
4844   25B7 E4            pop a
4845   25B8             ; --- START SHIFT
4846   25B8 D7            push a
4847   25B9 11            mov a, b
4848   25BA FD 2E 06 00   mov32 cb, $00000006
4848   25BE 00 00 
4849   25C0 FD 39         mov c, b
4850   25C2 A5            ashr a, cl
4851   25C3 27            mov b, a
4852   25C4 E4            pop a
4853   25C5             ; --- END SHIFT
4854   25C5 56            add b, a
4855   25C6 E4            pop a
4856   25C7             ; --- END TERMS
4857   25C7 E7            pop d
4858   25C8 FD 3E         mov [d], bl
4859   25CA             ; for (k = 0; k < i + 1; k++) { 
4860   25CA             _for61_init:
4861   25CA FA FB FF      lea d, [bp + -5] ; $k
4862   25CD DA            push d
4863   25CE FD 2E 00 00   mov32 cb, $00000000
4863   25D2 00 00 
4864   25D4 E7            pop d
4865   25D5 FD 43         mov [d], b
4866   25D7             _for61_cond:
4867   25D7 FA FB FF      lea d, [bp + -5] ; $k
4868   25DA 2A            mov b, [d]
4869   25DB 38 00 00      mov c, 0
4870   25DE             ; --- START RELATIONAL
4871   25DE D7            push a
4872   25DF 11            mov a, b
4873   25E0 FA FF FF      lea d, [bp + -1] ; $i
4874   25E3 2A            mov b, [d]
4875   25E4 38 00 00      mov c, 0
4876   25E7             ; --- START TERMS
4877   25E7 D7            push a
4878   25E8 11            mov a, b
4879   25E9 FD 2E 01 00   mov32 cb, $00000001
4879   25ED 00 00 
4880   25EF 56            add b, a
4881   25F0 E4            pop a
4882   25F1             ; --- END TERMS
4883   25F1 B0            cmp a, b
4884   25F2 FD 73         slt ; < (signed)
4885   25F4 E4            pop a
4886   25F5             ; --- END RELATIONAL
4887   25F5 C0 00 00      cmp b, 0
4888   25F8 C6 57 26      je _for61_exit
4889   25FB             _for61_block:
4890   25FB             ; output[j++] = base64_table[output_buffer[k]]; 
4891   25FB FA 07 00      lea d, [bp + 7] ; $output
4892   25FE FD 2A         mov d, [d]
4893   2600 D7            push a
4894   2601 DA            push d
4895   2602 FA FD FF      lea d, [bp + -3] ; $j
4896   2605 2A            mov b, [d]
4897   2606 38 00 00      mov c, 0
4898   2609 FD 77         inc b
4899   260B FA FD FF      lea d, [bp + -3] ; $j
4900   260E FD 43         mov [d], b
4901   2610 FD 7D         dec b
4902   2612 E7            pop d
4903   2613 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4904   2617 E4            pop a
4905   2618 DA            push d
4906   2619 3B C0 2D      mov d, _base64_table ; $base64_table
4907   261C FD 2A         mov d, [d]
4908   261E D7            push a
4909   261F DA            push d
4910   2620 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4911   2623 D7            push a
4912   2624 DA            push d
4913   2625 FA FB FF      lea d, [bp + -5] ; $k
4914   2628 2A            mov b, [d]
4915   2629 38 00 00      mov c, 0
4916   262C E7            pop d
4917   262D 5A            add d, b
4918   262E E4            pop a
4919   262F 32            mov bl, [d]
4920   2630 A7 00         mov bh, 0
4921   2632 38 00 00      mov c, 0
4922   2635 E7            pop d
4923   2636 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4924   263A E4            pop a
4925   263B 32            mov bl, [d]
4926   263C A7 00         mov bh, 0
4927   263E 38 00 00      mov c, 0
4928   2641 E7            pop d
4929   2642 FD 3E         mov [d], bl
4930   2644             _for61_update:
4931   2644 FA FB FF      lea d, [bp + -5] ; $k
4932   2647 2A            mov b, [d]
4933   2648 38 00 00      mov c, 0
4934   264B FD 77         inc b
4935   264D FA FB FF      lea d, [bp + -5] ; $k
4936   2650 FD 43         mov [d], b
4937   2652 FD 7D         dec b
4938   2654 0A D7 25      jmp _for61_cond
4939   2657             _for61_exit:
4940   2657             ; while (i++ < 3) { 
4941   2657             _while62_cond:
4942   2657 FA FF FF      lea d, [bp + -1] ; $i
4943   265A 2A            mov b, [d]
4944   265B 38 00 00      mov c, 0
4945   265E FD 77         inc b
4946   2660 FA FF FF      lea d, [bp + -1] ; $i
4947   2663 FD 43         mov [d], b
4948   2665 FD 7D         dec b
4949   2667             ; --- START RELATIONAL
4950   2667 D7            push a
4951   2668 11            mov a, b
4952   2669 FD 2E 03 00   mov32 cb, $00000003
4952   266D 00 00 
4953   266F B0            cmp a, b
4954   2670 FD 73         slt ; < (signed)
4955   2672 E4            pop a
4956   2673             ; --- END RELATIONAL
4957   2673 C0 00 00      cmp b, 0
4958   2676 C6 A3 26      je _while62_exit
4959   2679             _while62_block:
4960   2679             ; output[j++] = '='; 
4961   2679 FA 07 00      lea d, [bp + 7] ; $output
4962   267C FD 2A         mov d, [d]
4963   267E D7            push a
4964   267F DA            push d
4965   2680 FA FD FF      lea d, [bp + -3] ; $j
4966   2683 2A            mov b, [d]
4967   2684 38 00 00      mov c, 0
4968   2687 FD 77         inc b
4969   2689 FA FD FF      lea d, [bp + -3] ; $j
4970   268C FD 43         mov [d], b
4971   268E FD 7D         dec b
4972   2690 E7            pop d
4973   2691 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4974   2695 E4            pop a
4975   2696 DA            push d
4976   2697 FD 2E 3D 00   mov32 cb, $0000003d
4976   269B 00 00 
4977   269D E7            pop d
4978   269E FD 3E         mov [d], bl
4979   26A0 0A 57 26      jmp _while62_cond
4980   26A3             _while62_exit:
4981   26A3 0A A6 26      jmp _if59_exit
4982   26A6             _if59_exit:
4983   26A6             ; output[j] = '\0'; 
4984   26A6 FA 07 00      lea d, [bp + 7] ; $output
4985   26A9 FD 2A         mov d, [d]
4986   26AB D7            push a
4987   26AC DA            push d
4988   26AD FA FD FF      lea d, [bp + -3] ; $j
4989   26B0 2A            mov b, [d]
4990   26B1 38 00 00      mov c, 0
4991   26B4 E7            pop d
4992   26B5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4993   26B9 E4            pop a
4994   26BA DA            push d
4995   26BB FD 2E 00 00   mov32 cb, $00000000
4995   26BF 00 00 
4996   26C1 E7            pop d
4997   26C2 FD 3E         mov [d], bl
4998   26C4 F9            leave
4999   26C5 09            ret
5000   26C6             
5001   26C6             base64_char_value:
5002   26C6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5003   26C9             ; if (c >= 'A' && c <= 'Z') return c - 'A'; 
5004   26C9             _if63_cond:
5005   26C9 FA 05 00      lea d, [bp + 5] ; $c
5006   26CC 32            mov bl, [d]
5007   26CD A7 00         mov bh, 0
5008   26CF 38 00 00      mov c, 0
5009   26D2             ; --- START RELATIONAL
5010   26D2 D7            push a
5011   26D3 11            mov a, b
5012   26D4 FD 2E 41 00   mov32 cb, $00000041
5012   26D8 00 00 
5013   26DA B0            cmp a, b
5014   26DB FD 80         sge ; >=
5015   26DD E4            pop a
5016   26DE             ; --- END RELATIONAL
5017   26DE             ; --- START LOGICAL AND
5018   26DE D7            push a
5019   26DF 11            mov a, b
5020   26E0 FA 05 00      lea d, [bp + 5] ; $c
5021   26E3 32            mov bl, [d]
5022   26E4 A7 00         mov bh, 0
5023   26E6 38 00 00      mov c, 0
5024   26E9             ; --- START RELATIONAL
5025   26E9 D7            push a
5026   26EA 11            mov a, b
5027   26EB FD 2E 5A 00   mov32 cb, $0000005a
5027   26EF 00 00 
5028   26F1 B0            cmp a, b
5029   26F2 FD 74         sle ; <= (signed)
5030   26F4 E4            pop a
5031   26F5             ; --- END RELATIONAL
5032   26F5 FD A7         sand a, b
5033   26F7 E4            pop a
5034   26F8             ; --- END LOGICAL AND
5035   26F8 C0 00 00      cmp b, 0
5036   26FB C6 17 27      je _if63_exit
5037   26FE             _if63_true:
5038   26FE             ; return c - 'A'; 
5039   26FE FA 05 00      lea d, [bp + 5] ; $c
5040   2701 32            mov bl, [d]
5041   2702 A7 00         mov bh, 0
5042   2704 38 00 00      mov c, 0
5043   2707             ; --- START TERMS
5044   2707 D7            push a
5045   2708 11            mov a, b
5046   2709 FD 2E 41 00   mov32 cb, $00000041
5046   270D 00 00 
5047   270F 60            sub a, b
5048   2710 27            mov b, a
5049   2711 E4            pop a
5050   2712             ; --- END TERMS
5051   2712 F9            leave
5052   2713 09            ret
5053   2714 0A 17 27      jmp _if63_exit
5054   2717             _if63_exit:
5055   2717             ; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
5056   2717             _if64_cond:
5057   2717 FA 05 00      lea d, [bp + 5] ; $c
5058   271A 32            mov bl, [d]
5059   271B A7 00         mov bh, 0
5060   271D 38 00 00      mov c, 0
5061   2720             ; --- START RELATIONAL
5062   2720 D7            push a
5063   2721 11            mov a, b
5064   2722 FD 2E 61 00   mov32 cb, $00000061
5064   2726 00 00 
5065   2728 B0            cmp a, b
5066   2729 FD 80         sge ; >=
5067   272B E4            pop a
5068   272C             ; --- END RELATIONAL
5069   272C             ; --- START LOGICAL AND
5070   272C D7            push a
5071   272D 11            mov a, b
5072   272E FA 05 00      lea d, [bp + 5] ; $c
5073   2731 32            mov bl, [d]
5074   2732 A7 00         mov bh, 0
5075   2734 38 00 00      mov c, 0
5076   2737             ; --- START RELATIONAL
5077   2737 D7            push a
5078   2738 11            mov a, b
5079   2739 FD 2E 7A 00   mov32 cb, $0000007a
5079   273D 00 00 
5080   273F B0            cmp a, b
5081   2740 FD 74         sle ; <= (signed)
5082   2742 E4            pop a
5083   2743             ; --- END RELATIONAL
5084   2743 FD A7         sand a, b
5085   2745 E4            pop a
5086   2746             ; --- END LOGICAL AND
5087   2746 C0 00 00      cmp b, 0
5088   2749 C6 6D 27      je _if64_exit
5089   274C             _if64_true:
5090   274C             ; return c - 'a' + 26; 
5091   274C FA 05 00      lea d, [bp + 5] ; $c
5092   274F 32            mov bl, [d]
5093   2750 A7 00         mov bh, 0
5094   2752 38 00 00      mov c, 0
5095   2755             ; --- START TERMS
5096   2755 D7            push a
5097   2756 11            mov a, b
5098   2757 FD 2E 61 00   mov32 cb, $00000061
5098   275B 00 00 
5099   275D 60            sub a, b
5100   275E 27            mov b, a
5101   275F 11            mov a, b
5102   2760 FD 2E 1A 00   mov32 cb, $0000001a
5102   2764 00 00 
5103   2766 56            add b, a
5104   2767 E4            pop a
5105   2768             ; --- END TERMS
5106   2768 F9            leave
5107   2769 09            ret
5108   276A 0A 6D 27      jmp _if64_exit
5109   276D             _if64_exit:
5110   276D             ; if (c >= '0' && c <= '9') return c - '0' + 52; 
5111   276D             _if65_cond:
5112   276D FA 05 00      lea d, [bp + 5] ; $c
5113   2770 32            mov bl, [d]
5114   2771 A7 00         mov bh, 0
5115   2773 38 00 00      mov c, 0
5116   2776             ; --- START RELATIONAL
5117   2776 D7            push a
5118   2777 11            mov a, b
5119   2778 FD 2E 30 00   mov32 cb, $00000030
5119   277C 00 00 
5120   277E B0            cmp a, b
5121   277F FD 80         sge ; >=
5122   2781 E4            pop a
5123   2782             ; --- END RELATIONAL
5124   2782             ; --- START LOGICAL AND
5125   2782 D7            push a
5126   2783 11            mov a, b
5127   2784 FA 05 00      lea d, [bp + 5] ; $c
5128   2787 32            mov bl, [d]
5129   2788 A7 00         mov bh, 0
5130   278A 38 00 00      mov c, 0
5131   278D             ; --- START RELATIONAL
5132   278D D7            push a
5133   278E 11            mov a, b
5134   278F FD 2E 39 00   mov32 cb, $00000039
5134   2793 00 00 
5135   2795 B0            cmp a, b
5136   2796 FD 74         sle ; <= (signed)
5137   2798 E4            pop a
5138   2799             ; --- END RELATIONAL
5139   2799 FD A7         sand a, b
5140   279B E4            pop a
5141   279C             ; --- END LOGICAL AND
5142   279C C0 00 00      cmp b, 0
5143   279F C6 C3 27      je _if65_exit
5144   27A2             _if65_true:
5145   27A2             ; return c - '0' + 52; 
5146   27A2 FA 05 00      lea d, [bp + 5] ; $c
5147   27A5 32            mov bl, [d]
5148   27A6 A7 00         mov bh, 0
5149   27A8 38 00 00      mov c, 0
5150   27AB             ; --- START TERMS
5151   27AB D7            push a
5152   27AC 11            mov a, b
5153   27AD FD 2E 30 00   mov32 cb, $00000030
5153   27B1 00 00 
5154   27B3 60            sub a, b
5155   27B4 27            mov b, a
5156   27B5 11            mov a, b
5157   27B6 FD 2E 34 00   mov32 cb, $00000034
5157   27BA 00 00 
5158   27BC 56            add b, a
5159   27BD E4            pop a
5160   27BE             ; --- END TERMS
5161   27BE F9            leave
5162   27BF 09            ret
5163   27C0 0A C3 27      jmp _if65_exit
5164   27C3             _if65_exit:
5165   27C3             ; if (c == '+') return 62; 
5166   27C3             _if66_cond:
5167   27C3 FA 05 00      lea d, [bp + 5] ; $c
5168   27C6 32            mov bl, [d]
5169   27C7 A7 00         mov bh, 0
5170   27C9 38 00 00      mov c, 0
5171   27CC             ; --- START RELATIONAL
5172   27CC D7            push a
5173   27CD 11            mov a, b
5174   27CE FD 2E 2B 00   mov32 cb, $0000002b
5174   27D2 00 00 
5175   27D4 B0            cmp a, b
5176   27D5 FD 71         seq ; ==
5177   27D7 E4            pop a
5178   27D8             ; --- END RELATIONAL
5179   27D8 C0 00 00      cmp b, 0
5180   27DB C6 E9 27      je _if66_exit
5181   27DE             _if66_true:
5182   27DE             ; return 62; 
5183   27DE FD 2E 3E 00   mov32 cb, $0000003e
5183   27E2 00 00 
5184   27E4 F9            leave
5185   27E5 09            ret
5186   27E6 0A E9 27      jmp _if66_exit
5187   27E9             _if66_exit:
5188   27E9             ; if (c == '/') return 63; 
5189   27E9             _if67_cond:
5190   27E9 FA 05 00      lea d, [bp + 5] ; $c
5191   27EC 32            mov bl, [d]
5192   27ED A7 00         mov bh, 0
5193   27EF 38 00 00      mov c, 0
5194   27F2             ; --- START RELATIONAL
5195   27F2 D7            push a
5196   27F3 11            mov a, b
5197   27F4 FD 2E 2F 00   mov32 cb, $0000002f
5197   27F8 00 00 
5198   27FA B0            cmp a, b
5199   27FB FD 71         seq ; ==
5200   27FD E4            pop a
5201   27FE             ; --- END RELATIONAL
5202   27FE C0 00 00      cmp b, 0
5203   2801 C6 0F 28      je _if67_exit
5204   2804             _if67_true:
5205   2804             ; return 63; 
5206   2804 FD 2E 3F 00   mov32 cb, $0000003f
5206   2808 00 00 
5207   280A F9            leave
5208   280B 09            ret
5209   280C 0A 0F 28      jmp _if67_exit
5210   280F             _if67_exit:
5211   280F             ; return -1; 
5212   280F FD 2E 01 00   mov32 cb, $00000001
5212   2813 00 00 
5213   2815 FD 97         neg b
5214   2817 F9            leave
5215   2818 09            ret
5216   2819             
5217   2819             base64_decode:
5218   2819 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5219   281C             ; int i = 0, j = 0, k = 0; 
5220   281C 52 02 00      sub sp, 2
5221   281F             ; --- START LOCAL VAR INITIALIZATION
5222   281F FA FF FF      lea d, [bp + -1] ; $i
5223   2822 DA            push d
5224   2823 FD 2E 00 00   mov32 cb, $00000000
5224   2827 00 00 
5225   2829 E7            pop d
5226   282A FD 43         mov [d], b
5227   282C             ; --- END LOCAL VAR INITIALIZATION
5228   282C 52 02 00      sub sp, 2
5229   282F             ; --- START LOCAL VAR INITIALIZATION
5230   282F FA FD FF      lea d, [bp + -3] ; $j
5231   2832 DA            push d
5232   2833 FD 2E 00 00   mov32 cb, $00000000
5232   2837 00 00 
5233   2839 E7            pop d
5234   283A FD 43         mov [d], b
5235   283C             ; --- END LOCAL VAR INITIALIZATION
5236   283C 52 02 00      sub sp, 2
5237   283F             ; --- START LOCAL VAR INITIALIZATION
5238   283F FA FB FF      lea d, [bp + -5] ; $k
5239   2842 DA            push d
5240   2843 FD 2E 00 00   mov32 cb, $00000000
5240   2847 00 00 
5241   2849 E7            pop d
5242   284A FD 43         mov [d], b
5243   284C             ; --- END LOCAL VAR INITIALIZATION
5244   284C             ; int input_len; 
5245   284C 52 02 00      sub sp, 2
5246   284F             ; unsigned char input_buffer[4]; 
5247   284F 52 04 00      sub sp, 4
5248   2852             ; unsigned char output_buffer[3]; 
5249   2852 52 03 00      sub sp, 3
5250   2855             ; input_len = strlen(input); 
5251   2855 FA F9 FF      lea d, [bp + -7] ; $input_len
5252   2858 DA            push d
5253   2859             ; --- START FUNCTION CALL
5254   2859 FA 05 00      lea d, [bp + 5] ; $input
5255   285C 2A            mov b, [d]
5256   285D 38 00 00      mov c, 0
5257   2860 FD AB         swp b
5258   2862 D8            push b
5259   2863 07 79 06      call strlen
5260   2866 51 02 00      add sp, 2
5261   2869             ; --- END FUNCTION CALL
5262   2869 E7            pop d
5263   286A FD 43         mov [d], b
5264   286C             ; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
5265   286C             _while68_cond:
5266   286C FA F9 FF      lea d, [bp + -7] ; $input_len
5267   286F 2A            mov b, [d]
5268   2870 38 00 00      mov c, 0
5269   2873 FD 7D         dec b
5270   2875 FA F9 FF      lea d, [bp + -7] ; $input_len
5271   2878 FD 43         mov [d], b
5272   287A FD 77         inc b
5273   287C             ; --- START LOGICAL AND
5274   287C D7            push a
5275   287D 11            mov a, b
5276   287E FA 05 00      lea d, [bp + 5] ; $input
5277   2881 FD 2A         mov d, [d]
5278   2883 D7            push a
5279   2884 DA            push d
5280   2885 FA FB FF      lea d, [bp + -5] ; $k
5281   2888 2A            mov b, [d]
5282   2889 38 00 00      mov c, 0
5283   288C E7            pop d
5284   288D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5285   2891 E4            pop a
5286   2892 32            mov bl, [d]
5287   2893 A7 00         mov bh, 0
5288   2895 38 00 00      mov c, 0
5289   2898             ; --- START RELATIONAL
5290   2898 D7            push a
5291   2899 11            mov a, b
5292   289A FD 2E 3D 00   mov32 cb, $0000003d
5292   289E 00 00 
5293   28A0 B0            cmp a, b
5294   28A1 FD 72         sneq ; !=
5295   28A3 E4            pop a
5296   28A4             ; --- END RELATIONAL
5297   28A4 FD A7         sand a, b
5298   28A6 11            mov a, b
5299   28A7             ; --- START FUNCTION CALL
5300   28A7 FA 05 00      lea d, [bp + 5] ; $input
5301   28AA FD 2A         mov d, [d]
5302   28AC D7            push a
5303   28AD DA            push d
5304   28AE FA FB FF      lea d, [bp + -5] ; $k
5305   28B1 2A            mov b, [d]
5306   28B2 38 00 00      mov c, 0
5307   28B5 E7            pop d
5308   28B6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5309   28BA E4            pop a
5310   28BB 32            mov bl, [d]
5311   28BC A7 00         mov bh, 0
5312   28BE 38 00 00      mov c, 0
5313   28C1 DD            push bl
5314   28C2 07 C6 26      call base64_char_value
5315   28C5 51 01 00      add sp, 1
5316   28C8             ; --- END FUNCTION CALL
5317   28C8             ; --- START RELATIONAL
5318   28C8 D7            push a
5319   28C9 11            mov a, b
5320   28CA FD 2E 01 00   mov32 cb, $00000001
5320   28CE 00 00 
5321   28D0 FD 97         neg b
5322   28D2 B0            cmp a, b
5323   28D3 FD 72         sneq ; !=
5324   28D5 E4            pop a
5325   28D6             ; --- END RELATIONAL
5326   28D6 FD A7         sand a, b
5327   28D8 E4            pop a
5328   28D9             ; --- END LOGICAL AND
5329   28D9 C0 00 00      cmp b, 0
5330   28DC C6 48 2B      je _while68_exit
5331   28DF             _while68_block:
5332   28DF             ; input_buffer[i++] = input[k++]; 
5333   28DF FA F5 FF      lea d, [bp + -11] ; $input_buffer
5334   28E2 D7            push a
5335   28E3 DA            push d
5336   28E4 FA FF FF      lea d, [bp + -1] ; $i
5337   28E7 2A            mov b, [d]
5338   28E8 38 00 00      mov c, 0
5339   28EB FD 77         inc b
5340   28ED FA FF FF      lea d, [bp + -1] ; $i
5341   28F0 FD 43         mov [d], b
5342   28F2 FD 7D         dec b
5343   28F4 E7            pop d
5344   28F5 5A            add d, b
5345   28F6 E4            pop a
5346   28F7 DA            push d
5347   28F8 FA 05 00      lea d, [bp + 5] ; $input
5348   28FB FD 2A         mov d, [d]
5349   28FD D7            push a
5350   28FE DA            push d
5351   28FF FA FB FF      lea d, [bp + -5] ; $k
5352   2902 2A            mov b, [d]
5353   2903 38 00 00      mov c, 0
5354   2906 FD 77         inc b
5355   2908 FA FB FF      lea d, [bp + -5] ; $k
5356   290B FD 43         mov [d], b
5357   290D FD 7D         dec b
5358   290F E7            pop d
5359   2910 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5360   2914 E4            pop a
5361   2915 32            mov bl, [d]
5362   2916 A7 00         mov bh, 0
5363   2918 38 00 00      mov c, 0
5364   291B E7            pop d
5365   291C FD 3E         mov [d], bl
5366   291E             ; if (i == 4) { 
5367   291E             _if69_cond:
5368   291E FA FF FF      lea d, [bp + -1] ; $i
5369   2921 2A            mov b, [d]
5370   2922 38 00 00      mov c, 0
5371   2925             ; --- START RELATIONAL
5372   2925 D7            push a
5373   2926 11            mov a, b
5374   2927 FD 2E 04 00   mov32 cb, $00000004
5374   292B 00 00 
5375   292D B0            cmp a, b
5376   292E FD 71         seq ; ==
5377   2930 E4            pop a
5378   2931             ; --- END RELATIONAL
5379   2931 C0 00 00      cmp b, 0
5380   2934 C6 45 2B      je _if69_exit
5381   2937             _if69_true:
5382   2937             ; for (i = 0; i < 4; i++) { 
5383   2937             _for70_init:
5384   2937 FA FF FF      lea d, [bp + -1] ; $i
5385   293A DA            push d
5386   293B FD 2E 00 00   mov32 cb, $00000000
5386   293F 00 00 
5387   2941 E7            pop d
5388   2942 FD 43         mov [d], b
5389   2944             _for70_cond:
5390   2944 FA FF FF      lea d, [bp + -1] ; $i
5391   2947 2A            mov b, [d]
5392   2948 38 00 00      mov c, 0
5393   294B             ; --- START RELATIONAL
5394   294B D7            push a
5395   294C 11            mov a, b
5396   294D FD 2E 04 00   mov32 cb, $00000004
5396   2951 00 00 
5397   2953 B0            cmp a, b
5398   2954 FD 73         slt ; < (signed)
5399   2956 E4            pop a
5400   2957             ; --- END RELATIONAL
5401   2957 C0 00 00      cmp b, 0
5402   295A C6 9F 29      je _for70_exit
5403   295D             _for70_block:
5404   295D             ; input_buffer[i] = base64_char_value(input_buffer[i]); 
5405   295D FA F5 FF      lea d, [bp + -11] ; $input_buffer
5406   2960 D7            push a
5407   2961 DA            push d
5408   2962 FA FF FF      lea d, [bp + -1] ; $i
5409   2965 2A            mov b, [d]
5410   2966 38 00 00      mov c, 0
5411   2969 E7            pop d
5412   296A 5A            add d, b
5413   296B E4            pop a
5414   296C DA            push d
5415   296D             ; --- START FUNCTION CALL
5416   296D FA F5 FF      lea d, [bp + -11] ; $input_buffer
5417   2970 D7            push a
5418   2971 DA            push d
5419   2972 FA FF FF      lea d, [bp + -1] ; $i
5420   2975 2A            mov b, [d]
5421   2976 38 00 00      mov c, 0
5422   2979 E7            pop d
5423   297A 5A            add d, b
5424   297B E4            pop a
5425   297C 32            mov bl, [d]
5426   297D A7 00         mov bh, 0
5427   297F 38 00 00      mov c, 0
5428   2982 DD            push bl
5429   2983 07 C6 26      call base64_char_value
5430   2986 51 01 00      add sp, 1
5431   2989             ; --- END FUNCTION CALL
5432   2989 E7            pop d
5433   298A FD 3E         mov [d], bl
5434   298C             _for70_update:
5435   298C FA FF FF      lea d, [bp + -1] ; $i
5436   298F 2A            mov b, [d]
5437   2990 38 00 00      mov c, 0
5438   2993 FD 77         inc b
5439   2995 FA FF FF      lea d, [bp + -1] ; $i
5440   2998 FD 43         mov [d], b
5441   299A FD 7D         dec b
5442   299C 0A 44 29      jmp _for70_cond
5443   299F             _for70_exit:
5444   299F             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
5445   299F FA F2 FF      lea d, [bp + -14] ; $output_buffer
5446   29A2 D7            push a
5447   29A3 DA            push d
5448   29A4 FD 2E 00 00   mov32 cb, $00000000
5448   29A8 00 00 
5449   29AA E7            pop d
5450   29AB 5A            add d, b
5451   29AC E4            pop a
5452   29AD DA            push d
5453   29AE FA F5 FF      lea d, [bp + -11] ; $input_buffer
5454   29B1 D7            push a
5455   29B2 DA            push d
5456   29B3 FD 2E 00 00   mov32 cb, $00000000
5456   29B7 00 00 
5457   29B9 E7            pop d
5458   29BA 5A            add d, b
5459   29BB E4            pop a
5460   29BC 32            mov bl, [d]
5461   29BD A7 00         mov bh, 0
5462   29BF 38 00 00      mov c, 0
5463   29C2             ; --- START SHIFT
5464   29C2 D7            push a
5465   29C3 11            mov a, b
5466   29C4 FD 2E 02 00   mov32 cb, $00000002
5466   29C8 00 00 
5467   29CA FD 39         mov c, b
5468   29CC 9D            shl a, cl
5469   29CD 27            mov b, a
5470   29CE E4            pop a
5471   29CF             ; --- END SHIFT
5472   29CF             ; --- START TERMS
5473   29CF D7            push a
5474   29D0 11            mov a, b
5475   29D1 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5476   29D4 D7            push a
5477   29D5 DA            push d
5478   29D6 FD 2E 01 00   mov32 cb, $00000001
5478   29DA 00 00 
5479   29DC E7            pop d
5480   29DD 5A            add d, b
5481   29DE E4            pop a
5482   29DF 32            mov bl, [d]
5483   29E0 A7 00         mov bh, 0
5484   29E2 38 00 00      mov c, 0
5485   29E5 D7            push a
5486   29E6 11            mov a, b
5487   29E7 FD 2E 30 00   mov32 cb, $00000030
5487   29EB 00 00 
5488   29ED FD 92         and b, a ; &
5489   29EF E4            pop a
5490   29F0             ; --- START SHIFT
5491   29F0 D7            push a
5492   29F1 11            mov a, b
5493   29F2 FD 2E 04 00   mov32 cb, $00000004
5493   29F6 00 00 
5494   29F8 FD 39         mov c, b
5495   29FA A5            ashr a, cl
5496   29FB 27            mov b, a
5497   29FC E4            pop a
5498   29FD             ; --- END SHIFT
5499   29FD 56            add b, a
5500   29FE E4            pop a
5501   29FF             ; --- END TERMS
5502   29FF E7            pop d
5503   2A00 FD 3E         mov [d], bl
5504   2A02             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
5505   2A02 FA F2 FF      lea d, [bp + -14] ; $output_buffer
5506   2A05 D7            push a
5507   2A06 DA            push d
5508   2A07 FD 2E 01 00   mov32 cb, $00000001
5508   2A0B 00 00 
5509   2A0D E7            pop d
5510   2A0E 5A            add d, b
5511   2A0F E4            pop a
5512   2A10 DA            push d
5513   2A11 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5514   2A14 D7            push a
5515   2A15 DA            push d
5516   2A16 FD 2E 01 00   mov32 cb, $00000001
5516   2A1A 00 00 
5517   2A1C E7            pop d
5518   2A1D 5A            add d, b
5519   2A1E E4            pop a
5520   2A1F 32            mov bl, [d]
5521   2A20 A7 00         mov bh, 0
5522   2A22 38 00 00      mov c, 0
5523   2A25 D7            push a
5524   2A26 11            mov a, b
5525   2A27 FD 2E 0F 00   mov32 cb, $0000000f
5525   2A2B 00 00 
5526   2A2D FD 92         and b, a ; &
5527   2A2F E4            pop a
5528   2A30             ; --- START SHIFT
5529   2A30 D7            push a
5530   2A31 11            mov a, b
5531   2A32 FD 2E 04 00   mov32 cb, $00000004
5531   2A36 00 00 
5532   2A38 FD 39         mov c, b
5533   2A3A 9D            shl a, cl
5534   2A3B 27            mov b, a
5535   2A3C E4            pop a
5536   2A3D             ; --- END SHIFT
5537   2A3D             ; --- START TERMS
5538   2A3D D7            push a
5539   2A3E 11            mov a, b
5540   2A3F FA F5 FF      lea d, [bp + -11] ; $input_buffer
5541   2A42 D7            push a
5542   2A43 DA            push d
5543   2A44 FD 2E 02 00   mov32 cb, $00000002
5543   2A48 00 00 
5544   2A4A E7            pop d
5545   2A4B 5A            add d, b
5546   2A4C E4            pop a
5547   2A4D 32            mov bl, [d]
5548   2A4E A7 00         mov bh, 0
5549   2A50 38 00 00      mov c, 0
5550   2A53 D7            push a
5551   2A54 11            mov a, b
5552   2A55 FD 2E 3C 00   mov32 cb, $0000003c
5552   2A59 00 00 
5553   2A5B FD 92         and b, a ; &
5554   2A5D E4            pop a
5555   2A5E             ; --- START SHIFT
5556   2A5E D7            push a
5557   2A5F 11            mov a, b
5558   2A60 FD 2E 02 00   mov32 cb, $00000002
5558   2A64 00 00 
5559   2A66 FD 39         mov c, b
5560   2A68 A5            ashr a, cl
5561   2A69 27            mov b, a
5562   2A6A E4            pop a
5563   2A6B             ; --- END SHIFT
5564   2A6B 56            add b, a
5565   2A6C E4            pop a
5566   2A6D             ; --- END TERMS
5567   2A6D E7            pop d
5568   2A6E FD 3E         mov [d], bl
5569   2A70             ; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
5570   2A70 FA F2 FF      lea d, [bp + -14] ; $output_buffer
5571   2A73 D7            push a
5572   2A74 DA            push d
5573   2A75 FD 2E 02 00   mov32 cb, $00000002
5573   2A79 00 00 
5574   2A7B E7            pop d
5575   2A7C 5A            add d, b
5576   2A7D E4            pop a
5577   2A7E DA            push d
5578   2A7F FA F5 FF      lea d, [bp + -11] ; $input_buffer
5579   2A82 D7            push a
5580   2A83 DA            push d
5581   2A84 FD 2E 02 00   mov32 cb, $00000002
5581   2A88 00 00 
5582   2A8A E7            pop d
5583   2A8B 5A            add d, b
5584   2A8C E4            pop a
5585   2A8D 32            mov bl, [d]
5586   2A8E A7 00         mov bh, 0
5587   2A90 38 00 00      mov c, 0
5588   2A93 D7            push a
5589   2A94 11            mov a, b
5590   2A95 FD 2E 03 00   mov32 cb, $00000003
5590   2A99 00 00 
5591   2A9B FD 92         and b, a ; &
5592   2A9D E4            pop a
5593   2A9E             ; --- START SHIFT
5594   2A9E D7            push a
5595   2A9F 11            mov a, b
5596   2AA0 FD 2E 06 00   mov32 cb, $00000006
5596   2AA4 00 00 
5597   2AA6 FD 39         mov c, b
5598   2AA8 9D            shl a, cl
5599   2AA9 27            mov b, a
5600   2AAA E4            pop a
5601   2AAB             ; --- END SHIFT
5602   2AAB             ; --- START TERMS
5603   2AAB D7            push a
5604   2AAC 11            mov a, b
5605   2AAD FA F5 FF      lea d, [bp + -11] ; $input_buffer
5606   2AB0 D7            push a
5607   2AB1 DA            push d
5608   2AB2 FD 2E 03 00   mov32 cb, $00000003
5608   2AB6 00 00 
5609   2AB8 E7            pop d
5610   2AB9 5A            add d, b
5611   2ABA E4            pop a
5612   2ABB 32            mov bl, [d]
5613   2ABC A7 00         mov bh, 0
5614   2ABE 38 00 00      mov c, 0
5615   2AC1 56            add b, a
5616   2AC2 E4            pop a
5617   2AC3             ; --- END TERMS
5618   2AC3 E7            pop d
5619   2AC4 FD 3E         mov [d], bl
5620   2AC6             ; for (i = 0; i < 3; i++) { 
5621   2AC6             _for71_init:
5622   2AC6 FA FF FF      lea d, [bp + -1] ; $i
5623   2AC9 DA            push d
5624   2ACA FD 2E 00 00   mov32 cb, $00000000
5624   2ACE 00 00 
5625   2AD0 E7            pop d
5626   2AD1 FD 43         mov [d], b
5627   2AD3             _for71_cond:
5628   2AD3 FA FF FF      lea d, [bp + -1] ; $i
5629   2AD6 2A            mov b, [d]
5630   2AD7 38 00 00      mov c, 0
5631   2ADA             ; --- START RELATIONAL
5632   2ADA D7            push a
5633   2ADB 11            mov a, b
5634   2ADC FD 2E 03 00   mov32 cb, $00000003
5634   2AE0 00 00 
5635   2AE2 B0            cmp a, b
5636   2AE3 FD 73         slt ; < (signed)
5637   2AE5 E4            pop a
5638   2AE6             ; --- END RELATIONAL
5639   2AE6 C0 00 00      cmp b, 0
5640   2AE9 C6 35 2B      je _for71_exit
5641   2AEC             _for71_block:
5642   2AEC             ; output[j++] = output_buffer[i]; 
5643   2AEC FA 07 00      lea d, [bp + 7] ; $output
5644   2AEF FD 2A         mov d, [d]
5645   2AF1 D7            push a
5646   2AF2 DA            push d
5647   2AF3 FA FD FF      lea d, [bp + -3] ; $j
5648   2AF6 2A            mov b, [d]
5649   2AF7 38 00 00      mov c, 0
5650   2AFA FD 77         inc b
5651   2AFC FA FD FF      lea d, [bp + -3] ; $j
5652   2AFF FD 43         mov [d], b
5653   2B01 FD 7D         dec b
5654   2B03 E7            pop d
5655   2B04 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5656   2B08 E4            pop a
5657   2B09 DA            push d
5658   2B0A FA F2 FF      lea d, [bp + -14] ; $output_buffer
5659   2B0D D7            push a
5660   2B0E DA            push d
5661   2B0F FA FF FF      lea d, [bp + -1] ; $i
5662   2B12 2A            mov b, [d]
5663   2B13 38 00 00      mov c, 0
5664   2B16 E7            pop d
5665   2B17 5A            add d, b
5666   2B18 E4            pop a
5667   2B19 32            mov bl, [d]
5668   2B1A A7 00         mov bh, 0
5669   2B1C 38 00 00      mov c, 0
5670   2B1F E7            pop d
5671   2B20 FD 3E         mov [d], bl
5672   2B22             _for71_update:
5673   2B22 FA FF FF      lea d, [bp + -1] ; $i
5674   2B25 2A            mov b, [d]
5675   2B26 38 00 00      mov c, 0
5676   2B29 FD 77         inc b
5677   2B2B FA FF FF      lea d, [bp + -1] ; $i
5678   2B2E FD 43         mov [d], b
5679   2B30 FD 7D         dec b
5680   2B32 0A D3 2A      jmp _for71_cond
5681   2B35             _for71_exit:
5682   2B35             ; i = 0; 
5683   2B35 FA FF FF      lea d, [bp + -1] ; $i
5684   2B38 DA            push d
5685   2B39 FD 2E 00 00   mov32 cb, $00000000
5685   2B3D 00 00 
5686   2B3F E7            pop d
5687   2B40 FD 43         mov [d], b
5688   2B42 0A 45 2B      jmp _if69_exit
5689   2B45             _if69_exit:
5690   2B45 0A 6C 28      jmp _while68_cond
5691   2B48             _while68_exit:
5692   2B48             ; if (i) { 
5693   2B48             _if72_cond:
5694   2B48 FA FF FF      lea d, [bp + -1] ; $i
5695   2B4B 2A            mov b, [d]
5696   2B4C 38 00 00      mov c, 0
5697   2B4F C0 00 00      cmp b, 0
5698   2B52 C6 5F 2D      je _if72_exit
5699   2B55             _if72_true:
5700   2B55             ; for (k = i; k < 4; k++) { 
5701   2B55             _for73_init:
5702   2B55 FA FB FF      lea d, [bp + -5] ; $k
5703   2B58 DA            push d
5704   2B59 FA FF FF      lea d, [bp + -1] ; $i
5705   2B5C 2A            mov b, [d]
5706   2B5D 38 00 00      mov c, 0
5707   2B60 E7            pop d
5708   2B61 FD 43         mov [d], b
5709   2B63             _for73_cond:
5710   2B63 FA FB FF      lea d, [bp + -5] ; $k
5711   2B66 2A            mov b, [d]
5712   2B67 38 00 00      mov c, 0
5713   2B6A             ; --- START RELATIONAL
5714   2B6A D7            push a
5715   2B6B 11            mov a, b
5716   2B6C FD 2E 04 00   mov32 cb, $00000004
5716   2B70 00 00 
5717   2B72 B0            cmp a, b
5718   2B73 FD 73         slt ; < (signed)
5719   2B75 E4            pop a
5720   2B76             ; --- END RELATIONAL
5721   2B76 C0 00 00      cmp b, 0
5722   2B79 C6 A8 2B      je _for73_exit
5723   2B7C             _for73_block:
5724   2B7C             ; input_buffer[k] = 0; 
5725   2B7C FA F5 FF      lea d, [bp + -11] ; $input_buffer
5726   2B7F D7            push a
5727   2B80 DA            push d
5728   2B81 FA FB FF      lea d, [bp + -5] ; $k
5729   2B84 2A            mov b, [d]
5730   2B85 38 00 00      mov c, 0
5731   2B88 E7            pop d
5732   2B89 5A            add d, b
5733   2B8A E4            pop a
5734   2B8B DA            push d
5735   2B8C FD 2E 00 00   mov32 cb, $00000000
5735   2B90 00 00 
5736   2B92 E7            pop d
5737   2B93 FD 3E         mov [d], bl
5738   2B95             _for73_update:
5739   2B95 FA FB FF      lea d, [bp + -5] ; $k
5740   2B98 2A            mov b, [d]
5741   2B99 38 00 00      mov c, 0
5742   2B9C FD 77         inc b
5743   2B9E FA FB FF      lea d, [bp + -5] ; $k
5744   2BA1 FD 43         mov [d], b
5745   2BA3 FD 7D         dec b
5746   2BA5 0A 63 2B      jmp _for73_cond
5747   2BA8             _for73_exit:
5748   2BA8             ; for (k = 0; k < 4; k++) { 
5749   2BA8             _for74_init:
5750   2BA8 FA FB FF      lea d, [bp + -5] ; $k
5751   2BAB DA            push d
5752   2BAC FD 2E 00 00   mov32 cb, $00000000
5752   2BB0 00 00 
5753   2BB2 E7            pop d
5754   2BB3 FD 43         mov [d], b
5755   2BB5             _for74_cond:
5756   2BB5 FA FB FF      lea d, [bp + -5] ; $k
5757   2BB8 2A            mov b, [d]
5758   2BB9 38 00 00      mov c, 0
5759   2BBC             ; --- START RELATIONAL
5760   2BBC D7            push a
5761   2BBD 11            mov a, b
5762   2BBE FD 2E 04 00   mov32 cb, $00000004
5762   2BC2 00 00 
5763   2BC4 B0            cmp a, b
5764   2BC5 FD 73         slt ; < (signed)
5765   2BC7 E4            pop a
5766   2BC8             ; --- END RELATIONAL
5767   2BC8 C0 00 00      cmp b, 0
5768   2BCB C6 10 2C      je _for74_exit
5769   2BCE             _for74_block:
5770   2BCE             ; input_buffer[k] = base64_char_value(input_buffer[k]); 
5771   2BCE FA F5 FF      lea d, [bp + -11] ; $input_buffer
5772   2BD1 D7            push a
5773   2BD2 DA            push d
5774   2BD3 FA FB FF      lea d, [bp + -5] ; $k
5775   2BD6 2A            mov b, [d]
5776   2BD7 38 00 00      mov c, 0
5777   2BDA E7            pop d
5778   2BDB 5A            add d, b
5779   2BDC E4            pop a
5780   2BDD DA            push d
5781   2BDE             ; --- START FUNCTION CALL
5782   2BDE FA F5 FF      lea d, [bp + -11] ; $input_buffer
5783   2BE1 D7            push a
5784   2BE2 DA            push d
5785   2BE3 FA FB FF      lea d, [bp + -5] ; $k
5786   2BE6 2A            mov b, [d]
5787   2BE7 38 00 00      mov c, 0
5788   2BEA E7            pop d
5789   2BEB 5A            add d, b
5790   2BEC E4            pop a
5791   2BED 32            mov bl, [d]
5792   2BEE A7 00         mov bh, 0
5793   2BF0 38 00 00      mov c, 0
5794   2BF3 DD            push bl
5795   2BF4 07 C6 26      call base64_char_value
5796   2BF7 51 01 00      add sp, 1
5797   2BFA             ; --- END FUNCTION CALL
5798   2BFA E7            pop d
5799   2BFB FD 3E         mov [d], bl
5800   2BFD             _for74_update:
5801   2BFD FA FB FF      lea d, [bp + -5] ; $k
5802   2C00 2A            mov b, [d]
5803   2C01 38 00 00      mov c, 0
5804   2C04 FD 77         inc b
5805   2C06 FA FB FF      lea d, [bp + -5] ; $k
5806   2C09 FD 43         mov [d], b
5807   2C0B FD 7D         dec b
5808   2C0D 0A B5 2B      jmp _for74_cond
5809   2C10             _for74_exit:
5810   2C10             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
5811   2C10 FA F2 FF      lea d, [bp + -14] ; $output_buffer
5812   2C13 D7            push a
5813   2C14 DA            push d
5814   2C15 FD 2E 00 00   mov32 cb, $00000000
5814   2C19 00 00 
5815   2C1B E7            pop d
5816   2C1C 5A            add d, b
5817   2C1D E4            pop a
5818   2C1E DA            push d
5819   2C1F FA F5 FF      lea d, [bp + -11] ; $input_buffer
5820   2C22 D7            push a
5821   2C23 DA            push d
5822   2C24 FD 2E 00 00   mov32 cb, $00000000
5822   2C28 00 00 
5823   2C2A E7            pop d
5824   2C2B 5A            add d, b
5825   2C2C E4            pop a
5826   2C2D 32            mov bl, [d]
5827   2C2E A7 00         mov bh, 0
5828   2C30 38 00 00      mov c, 0
5829   2C33             ; --- START SHIFT
5830   2C33 D7            push a
5831   2C34 11            mov a, b
5832   2C35 FD 2E 02 00   mov32 cb, $00000002
5832   2C39 00 00 
5833   2C3B FD 39         mov c, b
5834   2C3D 9D            shl a, cl
5835   2C3E 27            mov b, a
5836   2C3F E4            pop a
5837   2C40             ; --- END SHIFT
5838   2C40             ; --- START TERMS
5839   2C40 D7            push a
5840   2C41 11            mov a, b
5841   2C42 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5842   2C45 D7            push a
5843   2C46 DA            push d
5844   2C47 FD 2E 01 00   mov32 cb, $00000001
5844   2C4B 00 00 
5845   2C4D E7            pop d
5846   2C4E 5A            add d, b
5847   2C4F E4            pop a
5848   2C50 32            mov bl, [d]
5849   2C51 A7 00         mov bh, 0
5850   2C53 38 00 00      mov c, 0
5851   2C56 D7            push a
5852   2C57 11            mov a, b
5853   2C58 FD 2E 30 00   mov32 cb, $00000030
5853   2C5C 00 00 
5854   2C5E FD 92         and b, a ; &
5855   2C60 E4            pop a
5856   2C61             ; --- START SHIFT
5857   2C61 D7            push a
5858   2C62 11            mov a, b
5859   2C63 FD 2E 04 00   mov32 cb, $00000004
5859   2C67 00 00 
5860   2C69 FD 39         mov c, b
5861   2C6B A5            ashr a, cl
5862   2C6C 27            mov b, a
5863   2C6D E4            pop a
5864   2C6E             ; --- END SHIFT
5865   2C6E 56            add b, a
5866   2C6F E4            pop a
5867   2C70             ; --- END TERMS
5868   2C70 E7            pop d
5869   2C71 FD 3E         mov [d], bl
5870   2C73             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
5871   2C73 FA F2 FF      lea d, [bp + -14] ; $output_buffer
5872   2C76 D7            push a
5873   2C77 DA            push d
5874   2C78 FD 2E 01 00   mov32 cb, $00000001
5874   2C7C 00 00 
5875   2C7E E7            pop d
5876   2C7F 5A            add d, b
5877   2C80 E4            pop a
5878   2C81 DA            push d
5879   2C82 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5880   2C85 D7            push a
5881   2C86 DA            push d
5882   2C87 FD 2E 01 00   mov32 cb, $00000001
5882   2C8B 00 00 
5883   2C8D E7            pop d
5884   2C8E 5A            add d, b
5885   2C8F E4            pop a
5886   2C90 32            mov bl, [d]
5887   2C91 A7 00         mov bh, 0
5888   2C93 38 00 00      mov c, 0
5889   2C96 D7            push a
5890   2C97 11            mov a, b
5891   2C98 FD 2E 0F 00   mov32 cb, $0000000f
5891   2C9C 00 00 
5892   2C9E FD 92         and b, a ; &
5893   2CA0 E4            pop a
5894   2CA1             ; --- START SHIFT
5895   2CA1 D7            push a
5896   2CA2 11            mov a, b
5897   2CA3 FD 2E 04 00   mov32 cb, $00000004
5897   2CA7 00 00 
5898   2CA9 FD 39         mov c, b
5899   2CAB 9D            shl a, cl
5900   2CAC 27            mov b, a
5901   2CAD E4            pop a
5902   2CAE             ; --- END SHIFT
5903   2CAE             ; --- START TERMS
5904   2CAE D7            push a
5905   2CAF 11            mov a, b
5906   2CB0 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5907   2CB3 D7            push a
5908   2CB4 DA            push d
5909   2CB5 FD 2E 02 00   mov32 cb, $00000002
5909   2CB9 00 00 
5910   2CBB E7            pop d
5911   2CBC 5A            add d, b
5912   2CBD E4            pop a
5913   2CBE 32            mov bl, [d]
5914   2CBF A7 00         mov bh, 0
5915   2CC1 38 00 00      mov c, 0
5916   2CC4 D7            push a
5917   2CC5 11            mov a, b
5918   2CC6 FD 2E 3C 00   mov32 cb, $0000003c
5918   2CCA 00 00 
5919   2CCC FD 92         and b, a ; &
5920   2CCE E4            pop a
5921   2CCF             ; --- START SHIFT
5922   2CCF D7            push a
5923   2CD0 11            mov a, b
5924   2CD1 FD 2E 02 00   mov32 cb, $00000002
5924   2CD5 00 00 
5925   2CD7 FD 39         mov c, b
5926   2CD9 A5            ashr a, cl
5927   2CDA 27            mov b, a
5928   2CDB E4            pop a
5929   2CDC             ; --- END SHIFT
5930   2CDC 56            add b, a
5931   2CDD E4            pop a
5932   2CDE             ; --- END TERMS
5933   2CDE E7            pop d
5934   2CDF FD 3E         mov [d], bl
5935   2CE1             ; for (k = 0; k < i - 1; k++) { 
5936   2CE1             _for75_init:
5937   2CE1 FA FB FF      lea d, [bp + -5] ; $k
5938   2CE4 DA            push d
5939   2CE5 FD 2E 00 00   mov32 cb, $00000000
5939   2CE9 00 00 
5940   2CEB E7            pop d
5941   2CEC FD 43         mov [d], b
5942   2CEE             _for75_cond:
5943   2CEE FA FB FF      lea d, [bp + -5] ; $k
5944   2CF1 2A            mov b, [d]
5945   2CF2 38 00 00      mov c, 0
5946   2CF5             ; --- START RELATIONAL
5947   2CF5 D7            push a
5948   2CF6 11            mov a, b
5949   2CF7 FA FF FF      lea d, [bp + -1] ; $i
5950   2CFA 2A            mov b, [d]
5951   2CFB 38 00 00      mov c, 0
5952   2CFE             ; --- START TERMS
5953   2CFE D7            push a
5954   2CFF 11            mov a, b
5955   2D00 FD 2E 01 00   mov32 cb, $00000001
5955   2D04 00 00 
5956   2D06 60            sub a, b
5957   2D07 27            mov b, a
5958   2D08 E4            pop a
5959   2D09             ; --- END TERMS
5960   2D09 B0            cmp a, b
5961   2D0A FD 73         slt ; < (signed)
5962   2D0C E4            pop a
5963   2D0D             ; --- END RELATIONAL
5964   2D0D C0 00 00      cmp b, 0
5965   2D10 C6 5C 2D      je _for75_exit
5966   2D13             _for75_block:
5967   2D13             ; output[j++] = output_buffer[k]; 
5968   2D13 FA 07 00      lea d, [bp + 7] ; $output
5969   2D16 FD 2A         mov d, [d]
5970   2D18 D7            push a
5971   2D19 DA            push d
5972   2D1A FA FD FF      lea d, [bp + -3] ; $j
5973   2D1D 2A            mov b, [d]
5974   2D1E 38 00 00      mov c, 0
5975   2D21 FD 77         inc b
5976   2D23 FA FD FF      lea d, [bp + -3] ; $j
5977   2D26 FD 43         mov [d], b
5978   2D28 FD 7D         dec b
5979   2D2A E7            pop d
5980   2D2B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5981   2D2F E4            pop a
5982   2D30 DA            push d
5983   2D31 FA F2 FF      lea d, [bp + -14] ; $output_buffer
5984   2D34 D7            push a
5985   2D35 DA            push d
5986   2D36 FA FB FF      lea d, [bp + -5] ; $k
5987   2D39 2A            mov b, [d]
5988   2D3A 38 00 00      mov c, 0
5989   2D3D E7            pop d
5990   2D3E 5A            add d, b
5991   2D3F E4            pop a
5992   2D40 32            mov bl, [d]
5993   2D41 A7 00         mov bh, 0
5994   2D43 38 00 00      mov c, 0
5995   2D46 E7            pop d
5996   2D47 FD 3E         mov [d], bl
5997   2D49             _for75_update:
5998   2D49 FA FB FF      lea d, [bp + -5] ; $k
5999   2D4C 2A            mov b, [d]
6000   2D4D 38 00 00      mov c, 0
6001   2D50 FD 77         inc b
6002   2D52 FA FB FF      lea d, [bp + -5] ; $k
6003   2D55 FD 43         mov [d], b
6004   2D57 FD 7D         dec b
6005   2D59 0A EE 2C      jmp _for75_cond
6006   2D5C             _for75_exit:
6007   2D5C 0A 5F 2D      jmp _if72_exit
6008   2D5F             _if72_exit:
6009   2D5F             ; output[j] = '\0'; 
6010   2D5F FA 07 00      lea d, [bp + 7] ; $output
6011   2D62 FD 2A         mov d, [d]
6012   2D64 D7            push a
6013   2D65 DA            push d
6014   2D66 FA FD FF      lea d, [bp + -3] ; $j
6015   2D69 2A            mov b, [d]
6016   2D6A 38 00 00      mov c, 0
6017   2D6D E7            pop d
6018   2D6E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
6019   2D72 E4            pop a
6020   2D73 DA            push d
6021   2D74 FD 2E 00 00   mov32 cb, $00000000
6021   2D78 00 00 
6022   2D7A E7            pop d
6023   2D7B FD 3E         mov [d], bl
6024   2D7D F9            leave
6025   2D7E 09            ret
6026   2D7F             ; --- END TEXT SEGMENT
6027   2D7F             
6028   2D7F             ; --- BEGIN DATA SEGMENT
6029   2D7F 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
6029   2D83 45 46 47 48 
6029   2D87 49 4A 4B 4C 
6029   2D8B 4D 4E 4F 50 
6029   2D8F 51 52 53 54 
6029   2D93 55 56 57 58 
6029   2D97 59 5A 61 62 
6029   2D9B 63 64 65 66 
6029   2D9F 67 68 69 6A 
6029   2DA3 6B 6C 6D 6E 
6029   2DA7 6F 70 71 72 
6029   2DAB 73 74 75 76 
6029   2DAF 77 78 79 7A 
6029   2DB3 30 31 32 33 
6029   2DB7 34 35 36 37 
6029   2DBB 38 39 2B 2F 
6029   2DBF 00 
6030   2DC0 7F 2D       _base64_table: .dw _base64_table_data
6031   2DC2 00 00       st_fopen_max_handle: .dw 0
6032   2DC4 0A 45 6E 74 _s0: .db "\nEnter a base64 encoded string to decode: ", 0
6032   2DC8 65 72 20 61 
6032   2DCC 20 62 61 73 
6032   2DD0 65 36 34 20 
6032   2DD4 65 6E 63 6F 
6032   2DD8 64 65 64 20 
6032   2DDC 73 74 72 69 
6032   2DE0 6E 67 20 74 
6032   2DE4 6F 20 64 65 
6032   2DE8 63 6F 64 65 
6032   2DEC 3A 20 00 
6033   2DEF 0A 45 6E 63 _s1: .db "\nEncoded string: %s\n", 0
6033   2DF3 6F 64 65 64 
6033   2DF7 20 73 74 72 
6033   2DFB 69 6E 67 3A 
6033   2DFF 20 25 73 0A 
6033   2E03 00 
6034   2E04 0A 44 65 63 _s2: .db "\nDecoded string: %s\n", 0
6034   2E08 6F 64 65 64 
6034   2E0C 20 73 74 72 
6034   2E10 69 6E 67 3A 
6034   2E14 20 25 73 0A 
6034   2E18 00 
6035   2E19 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
6035   2E1D 70 65 63 74 
6035   2E21 65 64 20 66 
6035   2E25 6F 72 6D 61 
6035   2E29 74 20 69 6E 
6035   2E2D 20 70 72 69 
6035   2E31 6E 74 66 2E 
6035   2E35 00 
6036   2E36 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
6036   2E3A 72 3A 20 55 
6036   2E3E 6E 6B 6E 6F 
6036   2E42 77 6E 20 61 
6036   2E46 72 67 75 6D 
6036   2E4A 65 6E 74 20 
6036   2E4E 74 79 70 65 
6036   2E52 2E 0A 00 
6037   2E55 1B 5B 32 4A _s5: .db "\033[2J\033[H", 0
6037   2E59 1B 5B 48 00 
6038   2E5D             
6039   2E5D 5F 2E       _heap_top: .dw _heap
6040   2E5F 00          _heap: .db 0
6041   2E60             ; --- END DATA SEGMENT
6042   2E60             
6043   2E60             .end
tasm: Number of errors = 0
