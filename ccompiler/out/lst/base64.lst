0001   0000             ; --- FILENAME: programs/base64.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; char input[512]; 
0011   0408 52 00 02      sub sp, 512
0012   040B             ; char output[256]; 
0013   040B 52 00 01      sub sp, 256
0014   040E             ; printf("\nEnter a base64 encoded string to decode: "); 
0015   040E             ; --- START FUNCTION CALL
0016   040E 26 C4 2D      mov b, _s0 ; "\nEnter a base64 encoded string to decode: "
0017   0411 FD AB         swp b
0018   0413 D8            push b
0019   0414 07 BE 09      call printf
0020   0417 51 02 00      add sp, 2
0021   041A             ; --- END FUNCTION CALL
0022   041A             ; gets(input); 
0023   041A             ; --- START FUNCTION CALL
0024   041A FA 01 FE      lea d, [bp + -511] ; $input
0025   041D 2D            mov b, d
0026   041E 38 00 00      mov c, 0
0027   0421 FD AB         swp b
0028   0423 D8            push b
0029   0424 07 16 15      call gets
0030   0427 51 02 00      add sp, 2
0031   042A             ; --- END FUNCTION CALL
0032   042A             ; base64_encode(input, output); 
0033   042A             ; --- START FUNCTION CALL
0034   042A FA 01 FD      lea d, [bp + -767] ; $output
0035   042D 2D            mov b, d
0036   042E 38 00 00      mov c, 0
0037   0431 FD AB         swp b
0038   0433 D8            push b
0039   0434 FA 01 FE      lea d, [bp + -511] ; $input
0040   0437 2D            mov b, d
0041   0438 38 00 00      mov c, 0
0042   043B FD AB         swp b
0043   043D D8            push b
0044   043E 07 C8 21      call base64_encode
0045   0441 51 04 00      add sp, 4
0046   0444             ; --- END FUNCTION CALL
0047   0444             ; printf("\nEncoded string: %s\n", output); 
0048   0444             ; --- START FUNCTION CALL
0049   0444 FA 01 FD      lea d, [bp + -767] ; $output
0050   0447 2D            mov b, d
0051   0448 38 00 00      mov c, 0
0052   044B FD AB         swp b
0053   044D D8            push b
0054   044E 26 EF 2D      mov b, _s1 ; "\nEncoded string: %s\n"
0055   0451 FD AB         swp b
0056   0453 D8            push b
0057   0454 07 BE 09      call printf
0058   0457 51 04 00      add sp, 4
0059   045A             ; --- END FUNCTION CALL
0060   045A             ; base64_decode(output, input); 
0061   045A             ; --- START FUNCTION CALL
0062   045A FA 01 FE      lea d, [bp + -511] ; $input
0063   045D 2D            mov b, d
0064   045E 38 00 00      mov c, 0
0065   0461 FD AB         swp b
0066   0463 D8            push b
0067   0464 FA 01 FD      lea d, [bp + -767] ; $output
0068   0467 2D            mov b, d
0069   0468 38 00 00      mov c, 0
0070   046B FD AB         swp b
0071   046D D8            push b
0072   046E 07 19 28      call base64_decode
0073   0471 51 04 00      add sp, 4
0074   0474             ; --- END FUNCTION CALL
0075   0474             ; printf("\nDecoded string: %s\n", input); 
0076   0474             ; --- START FUNCTION CALL
0077   0474 FA 01 FE      lea d, [bp + -511] ; $input
0078   0477 2D            mov b, d
0079   0478 38 00 00      mov c, 0
0080   047B FD AB         swp b
0081   047D D8            push b
0082   047E 26 04 2E      mov b, _s2 ; "\nDecoded string: %s\n"
0083   0481 FD AB         swp b
0084   0483 D8            push b
0085   0484 07 BE 09      call printf
0086   0487 51 04 00      add sp, 4
0087   048A             ; --- END FUNCTION CALL
0088   048A             ; return 0; 
0089   048A FD 2E 00 00   mov32 cb, $00000000
0089   048E 00 00 
0090   0490 F9            leave
0091   0491 05 0B         syscall sys_terminate_proc
0092   0493             
0093   0493             strcpy:
0094   0493 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0095   0496             ; char *psrc; 
0096   0496 52 02 00      sub sp, 2
0097   0499             ; char *pdest; 
0098   0499 52 02 00      sub sp, 2
0099   049C             ; psrc = src; 
0100   049C FA FF FF      lea d, [bp + -1] ; $psrc
0101   049F DA            push d
0102   04A0 FA 07 00      lea d, [bp + 7] ; $src
0103   04A3 2A            mov b, [d]
0104   04A4 38 00 00      mov c, 0
0105   04A7 E7            pop d
0106   04A8 FD 43         mov [d], b
0107   04AA             ; pdest = dest; 
0108   04AA FA FD FF      lea d, [bp + -3] ; $pdest
0109   04AD DA            push d
0110   04AE FA 05 00      lea d, [bp + 5] ; $dest
0111   04B1 2A            mov b, [d]
0112   04B2 38 00 00      mov c, 0
0113   04B5 E7            pop d
0114   04B6 FD 43         mov [d], b
0115   04B8             ; while(*psrc) *pdest++ = *psrc++; 
0116   04B8             _while1_cond:
0117   04B8 FA FF FF      lea d, [bp + -1] ; $psrc
0118   04BB 2A            mov b, [d]
0119   04BC 38 00 00      mov c, 0
0120   04BF 74            mov d, b
0121   04C0 32            mov bl, [d]
0122   04C1 A7 00         mov bh, 0
0123   04C3 38 00 00      mov c, 0
0124   04C6 C0 00 00      cmp b, 0
0125   04C9 C6 FA 04      je _while1_exit
0126   04CC             _while1_block:
0127   04CC             ; *pdest++ = *psrc++; 
0128   04CC FA FD FF      lea d, [bp + -3] ; $pdest
0129   04CF 2A            mov b, [d]
0130   04D0 38 00 00      mov c, 0
0131   04D3 FD 77         inc b
0132   04D5 FA FD FF      lea d, [bp + -3] ; $pdest
0133   04D8 FD 3E         mov [d], bl
0134   04DA FD 7D         dec b
0135   04DC D8            push b
0136   04DD FA FF FF      lea d, [bp + -1] ; $psrc
0137   04E0 2A            mov b, [d]
0138   04E1 38 00 00      mov c, 0
0139   04E4 FD 77         inc b
0140   04E6 FA FF FF      lea d, [bp + -1] ; $psrc
0141   04E9 FD 3E         mov [d], bl
0142   04EB FD 7D         dec b
0143   04ED 74            mov d, b
0144   04EE 32            mov bl, [d]
0145   04EF A7 00         mov bh, 0
0146   04F1 38 00 00      mov c, 0
0147   04F4 E7            pop d
0148   04F5 FD 3E         mov [d], bl
0149   04F7 0A B8 04      jmp _while1_cond
0150   04FA             _while1_exit:
0151   04FA             ; *pdest = '\0'; 
0152   04FA FA FD FF      lea d, [bp + -3] ; $pdest
0153   04FD 2A            mov b, [d]
0154   04FE 38 00 00      mov c, 0
0155   0501 D8            push b
0156   0502 FD 2E 00 00   mov32 cb, $00000000
0156   0506 00 00 
0157   0508 E7            pop d
0158   0509 FD 3E         mov [d], bl
0159   050B F9            leave
0160   050C 09            ret
0161   050D             
0162   050D             strcmp:
0163   050D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0164   0510             ; while (*s1 && (*s1 == *s2)) { 
0165   0510             _while2_cond:
0166   0510 FA 05 00      lea d, [bp + 5] ; $s1
0167   0513 2A            mov b, [d]
0168   0514 38 00 00      mov c, 0
0169   0517 74            mov d, b
0170   0518 32            mov bl, [d]
0171   0519 A7 00         mov bh, 0
0172   051B 38 00 00      mov c, 0
0173   051E             ; --- START LOGICAL AND
0174   051E D7            push a
0175   051F 11            mov a, b
0176   0520 FA 05 00      lea d, [bp + 5] ; $s1
0177   0523 2A            mov b, [d]
0178   0524 38 00 00      mov c, 0
0179   0527 74            mov d, b
0180   0528 32            mov bl, [d]
0181   0529 A7 00         mov bh, 0
0182   052B 38 00 00      mov c, 0
0183   052E             ; --- START RELATIONAL
0184   052E D7            push a
0185   052F 11            mov a, b
0186   0530 FA 07 00      lea d, [bp + 7] ; $s2
0187   0533 2A            mov b, [d]
0188   0534 38 00 00      mov c, 0
0189   0537 74            mov d, b
0190   0538 32            mov bl, [d]
0191   0539 A7 00         mov bh, 0
0192   053B 38 00 00      mov c, 0
0193   053E B0            cmp a, b
0194   053F FD 71         seq ; ==
0195   0541 E4            pop a
0196   0542             ; --- END RELATIONAL
0197   0542 FD A7         sand a, b
0198   0544 E4            pop a
0199   0545             ; --- END LOGICAL AND
0200   0545 C0 00 00      cmp b, 0
0201   0548 C6 6E 05      je _while2_exit
0202   054B             _while2_block:
0203   054B             ; s1++; 
0204   054B FA 05 00      lea d, [bp + 5] ; $s1
0205   054E 2A            mov b, [d]
0206   054F 38 00 00      mov c, 0
0207   0552 FD 77         inc b
0208   0554 FA 05 00      lea d, [bp + 5] ; $s1
0209   0557 FD 3E         mov [d], bl
0210   0559 FD 7D         dec b
0211   055B             ; s2++; 
0212   055B FA 07 00      lea d, [bp + 7] ; $s2
0213   055E 2A            mov b, [d]
0214   055F 38 00 00      mov c, 0
0215   0562 FD 77         inc b
0216   0564 FA 07 00      lea d, [bp + 7] ; $s2
0217   0567 FD 3E         mov [d], bl
0218   0569 FD 7D         dec b
0219   056B 0A 10 05      jmp _while2_cond
0220   056E             _while2_exit:
0221   056E             ; return *s1 - *s2; 
0222   056E FA 05 00      lea d, [bp + 5] ; $s1
0223   0571 2A            mov b, [d]
0224   0572 38 00 00      mov c, 0
0225   0575 74            mov d, b
0226   0576 32            mov bl, [d]
0227   0577 A7 00         mov bh, 0
0228   0579 38 00 00      mov c, 0
0229   057C             ; --- START TERMS
0230   057C D7            push a
0231   057D 11            mov a, b
0232   057E FA 07 00      lea d, [bp + 7] ; $s2
0233   0581 2A            mov b, [d]
0234   0582 38 00 00      mov c, 0
0235   0585 74            mov d, b
0236   0586 32            mov bl, [d]
0237   0587 A7 00         mov bh, 0
0238   0589 38 00 00      mov c, 0
0239   058C 60            sub a, b
0240   058D 27            mov b, a
0241   058E E4            pop a
0242   058F             ; --- END TERMS
0243   058F F9            leave
0244   0590 09            ret
0245   0591             
0246   0591             strncmp:
0247   0591 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0248   0594 F9            leave
0249   0595 09            ret
0250   0596             
0251   0596             strcat:
0252   0596 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0253   0599             ; int dest_len; 
0254   0599 52 02 00      sub sp, 2
0255   059C             ; int i; 
0256   059C 52 02 00      sub sp, 2
0257   059F             ; dest_len = strlen(dest); 
0258   059F FA FF FF      lea d, [bp + -1] ; $dest_len
0259   05A2 DA            push d
0260   05A3             ; --- START FUNCTION CALL
0261   05A3 FA 05 00      lea d, [bp + 5] ; $dest
0262   05A6 2A            mov b, [d]
0263   05A7 38 00 00      mov c, 0
0264   05AA FD AB         swp b
0265   05AC D8            push b
0266   05AD 07 79 06      call strlen
0267   05B0 51 02 00      add sp, 2
0268   05B3             ; --- END FUNCTION CALL
0269   05B3 E7            pop d
0270   05B4 FD 43         mov [d], b
0271   05B6             ; for (i = 0; src[i] != 0; i=i+1) { 
0272   05B6             _for3_init:
0273   05B6 FA FD FF      lea d, [bp + -3] ; $i
0274   05B9 DA            push d
0275   05BA FD 2E 00 00   mov32 cb, $00000000
0275   05BE 00 00 
0276   05C0 E7            pop d
0277   05C1 FD 43         mov [d], b
0278   05C3             _for3_cond:
0279   05C3 FA 07 00      lea d, [bp + 7] ; $src
0280   05C6 FD 2A         mov d, [d]
0281   05C8 D7            push a
0282   05C9 DA            push d
0283   05CA FA FD FF      lea d, [bp + -3] ; $i
0284   05CD 2A            mov b, [d]
0285   05CE 38 00 00      mov c, 0
0286   05D1 E7            pop d
0287   05D2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0288   05D6 E4            pop a
0289   05D7 32            mov bl, [d]
0290   05D8 A7 00         mov bh, 0
0291   05DA 38 00 00      mov c, 0
0292   05DD             ; --- START RELATIONAL
0293   05DD D7            push a
0294   05DE 11            mov a, b
0295   05DF FD 2E 00 00   mov32 cb, $00000000
0295   05E3 00 00 
0296   05E5 B0            cmp a, b
0297   05E6 FD 72         sneq ; !=
0298   05E8 E4            pop a
0299   05E9             ; --- END RELATIONAL
0300   05E9 C0 00 00      cmp b, 0
0301   05EC C6 47 06      je _for3_exit
0302   05EF             _for3_block:
0303   05EF             ; dest[dest_len + i] = src[i]; 
0304   05EF FA 05 00      lea d, [bp + 5] ; $dest
0305   05F2 FD 2A         mov d, [d]
0306   05F4 D7            push a
0307   05F5 DA            push d
0308   05F6 FA FF FF      lea d, [bp + -1] ; $dest_len
0309   05F9 2A            mov b, [d]
0310   05FA 38 00 00      mov c, 0
0311   05FD             ; --- START TERMS
0312   05FD D7            push a
0313   05FE 11            mov a, b
0314   05FF FA FD FF      lea d, [bp + -3] ; $i
0315   0602 2A            mov b, [d]
0316   0603 38 00 00      mov c, 0
0317   0606 56            add b, a
0318   0607 E4            pop a
0319   0608             ; --- END TERMS
0320   0608 E7            pop d
0321   0609 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0322   060D E4            pop a
0323   060E DA            push d
0324   060F FA 07 00      lea d, [bp + 7] ; $src
0325   0612 FD 2A         mov d, [d]
0326   0614 D7            push a
0327   0615 DA            push d
0328   0616 FA FD FF      lea d, [bp + -3] ; $i
0329   0619 2A            mov b, [d]
0330   061A 38 00 00      mov c, 0
0331   061D E7            pop d
0332   061E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0333   0622 E4            pop a
0334   0623 32            mov bl, [d]
0335   0624 A7 00         mov bh, 0
0336   0626 38 00 00      mov c, 0
0337   0629 E7            pop d
0338   062A FD 3E         mov [d], bl
0339   062C             _for3_update:
0340   062C FA FD FF      lea d, [bp + -3] ; $i
0341   062F DA            push d
0342   0630 FA FD FF      lea d, [bp + -3] ; $i
0343   0633 2A            mov b, [d]
0344   0634 38 00 00      mov c, 0
0345   0637             ; --- START TERMS
0346   0637 D7            push a
0347   0638 11            mov a, b
0348   0639 FD 2E 01 00   mov32 cb, $00000001
0348   063D 00 00 
0349   063F 56            add b, a
0350   0640 E4            pop a
0351   0641             ; --- END TERMS
0352   0641 E7            pop d
0353   0642 FD 43         mov [d], b
0354   0644 0A C3 05      jmp _for3_cond
0355   0647             _for3_exit:
0356   0647             ; dest[dest_len + i] = 0; 
0357   0647 FA 05 00      lea d, [bp + 5] ; $dest
0358   064A FD 2A         mov d, [d]
0359   064C D7            push a
0360   064D DA            push d
0361   064E FA FF FF      lea d, [bp + -1] ; $dest_len
0362   0651 2A            mov b, [d]
0363   0652 38 00 00      mov c, 0
0364   0655             ; --- START TERMS
0365   0655 D7            push a
0366   0656 11            mov a, b
0367   0657 FA FD FF      lea d, [bp + -3] ; $i
0368   065A 2A            mov b, [d]
0369   065B 38 00 00      mov c, 0
0370   065E 56            add b, a
0371   065F E4            pop a
0372   0660             ; --- END TERMS
0373   0660 E7            pop d
0374   0661 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0375   0665 E4            pop a
0376   0666 DA            push d
0377   0667 FD 2E 00 00   mov32 cb, $00000000
0377   066B 00 00 
0378   066D E7            pop d
0379   066E FD 3E         mov [d], bl
0380   0670             ; return dest; 
0381   0670 FA 05 00      lea d, [bp + 5] ; $dest
0382   0673 2A            mov b, [d]
0383   0674 38 00 00      mov c, 0
0384   0677 F9            leave
0385   0678 09            ret
0386   0679             
0387   0679             strlen:
0388   0679 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0389   067C             ; int length; 
0390   067C 52 02 00      sub sp, 2
0391   067F             ; length = 0; 
0392   067F FA FF FF      lea d, [bp + -1] ; $length
0393   0682 DA            push d
0394   0683 FD 2E 00 00   mov32 cb, $00000000
0394   0687 00 00 
0395   0689 E7            pop d
0396   068A FD 43         mov [d], b
0397   068C             ; while (str[length] != 0) { 
0398   068C             _while4_cond:
0399   068C FA 05 00      lea d, [bp + 5] ; $str
0400   068F FD 2A         mov d, [d]
0401   0691 D7            push a
0402   0692 DA            push d
0403   0693 FA FF FF      lea d, [bp + -1] ; $length
0404   0696 2A            mov b, [d]
0405   0697 38 00 00      mov c, 0
0406   069A E7            pop d
0407   069B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0408   069F E4            pop a
0409   06A0 32            mov bl, [d]
0410   06A1 A7 00         mov bh, 0
0411   06A3 38 00 00      mov c, 0
0412   06A6             ; --- START RELATIONAL
0413   06A6 D7            push a
0414   06A7 11            mov a, b
0415   06A8 FD 2E 00 00   mov32 cb, $00000000
0415   06AC 00 00 
0416   06AE B0            cmp a, b
0417   06AF FD 72         sneq ; !=
0418   06B1 E4            pop a
0419   06B2             ; --- END RELATIONAL
0420   06B2 C0 00 00      cmp b, 0
0421   06B5 C6 CB 06      je _while4_exit
0422   06B8             _while4_block:
0423   06B8             ; length++; 
0424   06B8 FA FF FF      lea d, [bp + -1] ; $length
0425   06BB 2A            mov b, [d]
0426   06BC 38 00 00      mov c, 0
0427   06BF 11            mov a, b
0428   06C0 FD 77         inc b
0429   06C2 FA FF FF      lea d, [bp + -1] ; $length
0430   06C5 FD 43         mov [d], b
0431   06C7 27            mov b, a
0432   06C8 0A 8C 06      jmp _while4_cond
0433   06CB             _while4_exit:
0434   06CB             ; return length; 
0435   06CB FA FF FF      lea d, [bp + -1] ; $length
0436   06CE 2A            mov b, [d]
0437   06CF 38 00 00      mov c, 0
0438   06D2 F9            leave
0439   06D3 09            ret
0440   06D4             
0441   06D4             exit:
0442   06D4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0443   06D7             
0444   06D7             ; --- BEGIN INLINE ASM SEGMENT
0445   06D7 05 0B         syscall sys_terminate_proc
0446   06D9             ; --- END INLINE ASM SEGMENT
0447   06D9             
0448   06D9 F9            leave
0449   06DA 09            ret
0450   06DB             
0451   06DB             memset:
0452   06DB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0453   06DE             ; int i; 
0454   06DE 52 02 00      sub sp, 2
0455   06E1             ; for(i = 0; i < size; i++){ 
0456   06E1             _for5_init:
0457   06E1 FA FF FF      lea d, [bp + -1] ; $i
0458   06E4 DA            push d
0459   06E5 FD 2E 00 00   mov32 cb, $00000000
0459   06E9 00 00 
0460   06EB E7            pop d
0461   06EC FD 43         mov [d], b
0462   06EE             _for5_cond:
0463   06EE FA FF FF      lea d, [bp + -1] ; $i
0464   06F1 2A            mov b, [d]
0465   06F2 38 00 00      mov c, 0
0466   06F5             ; --- START RELATIONAL
0467   06F5 D7            push a
0468   06F6 11            mov a, b
0469   06F7 FA 08 00      lea d, [bp + 8] ; $size
0470   06FA 2A            mov b, [d]
0471   06FB 38 00 00      mov c, 0
0472   06FE B0            cmp a, b
0473   06FF FD 73         slt ; < (signed)
0474   0701 E4            pop a
0475   0702             ; --- END RELATIONAL
0476   0702 C0 00 00      cmp b, 0
0477   0705 C6 3A 07      je _for5_exit
0478   0708             _for5_block:
0479   0708             ; *(s+i) = c; 
0480   0708 FA 05 00      lea d, [bp + 5] ; $s
0481   070B 2A            mov b, [d]
0482   070C 38 00 00      mov c, 0
0483   070F             ; --- START TERMS
0484   070F D7            push a
0485   0710 11            mov a, b
0486   0711 FA FF FF      lea d, [bp + -1] ; $i
0487   0714 2A            mov b, [d]
0488   0715 38 00 00      mov c, 0
0489   0718 56            add b, a
0490   0719 E4            pop a
0491   071A             ; --- END TERMS
0492   071A D8            push b
0493   071B FA 07 00      lea d, [bp + 7] ; $c
0494   071E 32            mov bl, [d]
0495   071F A7 00         mov bh, 0
0496   0721 38 00 00      mov c, 0
0497   0724 E7            pop d
0498   0725 FD 3E         mov [d], bl
0499   0727             _for5_update:
0500   0727 FA FF FF      lea d, [bp + -1] ; $i
0501   072A 2A            mov b, [d]
0502   072B 38 00 00      mov c, 0
0503   072E 11            mov a, b
0504   072F FD 77         inc b
0505   0731 FA FF FF      lea d, [bp + -1] ; $i
0506   0734 FD 43         mov [d], b
0507   0736 27            mov b, a
0508   0737 0A EE 06      jmp _for5_cond
0509   073A             _for5_exit:
0510   073A             ; return s; 
0511   073A FA 05 00      lea d, [bp + 5] ; $s
0512   073D 2A            mov b, [d]
0513   073E 38 00 00      mov c, 0
0514   0741 F9            leave
0515   0742 09            ret
0516   0743             
0517   0743             atoi:
0518   0743 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0519   0746             ; int result = 0;  // Initialize result 
0520   0746 52 02 00      sub sp, 2
0521   0749             ; --- START LOCAL VAR INITIALIZATION
0522   0749 FA FF FF      lea d, [bp + -1] ; $result
0523   074C DA            push d
0524   074D FD 2E 00 00   mov32 cb, $00000000
0524   0751 00 00 
0525   0753 E7            pop d
0526   0754 FD 43         mov [d], b
0527   0756             ; --- END LOCAL VAR INITIALIZATION
0528   0756             ; int sign = 1;    // Initialize sign as positive 
0529   0756 52 02 00      sub sp, 2
0530   0759             ; --- START LOCAL VAR INITIALIZATION
0531   0759 FA FD FF      lea d, [bp + -3] ; $sign
0532   075C DA            push d
0533   075D FD 2E 01 00   mov32 cb, $00000001
0533   0761 00 00 
0534   0763 E7            pop d
0535   0764 FD 43         mov [d], b
0536   0766             ; --- END LOCAL VAR INITIALIZATION
0537   0766             ; while (*str == ' ') str++; 
0538   0766             _while6_cond:
0539   0766 FA 05 00      lea d, [bp + 5] ; $str
0540   0769 2A            mov b, [d]
0541   076A 38 00 00      mov c, 0
0542   076D 74            mov d, b
0543   076E 32            mov bl, [d]
0544   076F A7 00         mov bh, 0
0545   0771 38 00 00      mov c, 0
0546   0774             ; --- START RELATIONAL
0547   0774 D7            push a
0548   0775 11            mov a, b
0549   0776 FD 2E 20 00   mov32 cb, $00000020
0549   077A 00 00 
0550   077C B0            cmp a, b
0551   077D FD 71         seq ; ==
0552   077F E4            pop a
0553   0780             ; --- END RELATIONAL
0554   0780 C0 00 00      cmp b, 0
0555   0783 C6 99 07      je _while6_exit
0556   0786             _while6_block:
0557   0786             ; str++; 
0558   0786 FA 05 00      lea d, [bp + 5] ; $str
0559   0789 2A            mov b, [d]
0560   078A 38 00 00      mov c, 0
0561   078D FD 77         inc b
0562   078F FA 05 00      lea d, [bp + 5] ; $str
0563   0792 FD 3E         mov [d], bl
0564   0794 FD 7D         dec b
0565   0796 0A 66 07      jmp _while6_cond
0566   0799             _while6_exit:
0567   0799             ; if (*str == '-' || *str == '+') { 
0568   0799             _if7_cond:
0569   0799 FA 05 00      lea d, [bp + 5] ; $str
0570   079C 2A            mov b, [d]
0571   079D 38 00 00      mov c, 0
0572   07A0 74            mov d, b
0573   07A1 32            mov bl, [d]
0574   07A2 A7 00         mov bh, 0
0575   07A4 38 00 00      mov c, 0
0576   07A7             ; --- START RELATIONAL
0577   07A7 D7            push a
0578   07A8 11            mov a, b
0579   07A9 FD 2E 2D 00   mov32 cb, $0000002d
0579   07AD 00 00 
0580   07AF B0            cmp a, b
0581   07B0 FD 71         seq ; ==
0582   07B2 E4            pop a
0583   07B3             ; --- END RELATIONAL
0584   07B3             ; --- START LOGICAL OR
0585   07B3 D7            push a
0586   07B4 11            mov a, b
0587   07B5 FA 05 00      lea d, [bp + 5] ; $str
0588   07B8 2A            mov b, [d]
0589   07B9 38 00 00      mov c, 0
0590   07BC 74            mov d, b
0591   07BD 32            mov bl, [d]
0592   07BE A7 00         mov bh, 0
0593   07C0 38 00 00      mov c, 0
0594   07C3             ; --- START RELATIONAL
0595   07C3 D7            push a
0596   07C4 11            mov a, b
0597   07C5 FD 2E 2B 00   mov32 cb, $0000002b
0597   07C9 00 00 
0598   07CB B0            cmp a, b
0599   07CC FD 71         seq ; ==
0600   07CE E4            pop a
0601   07CF             ; --- END RELATIONAL
0602   07CF FD A8         sor a, b ; ||
0603   07D1 E4            pop a
0604   07D2             ; --- END LOGICAL OR
0605   07D2 C0 00 00      cmp b, 0
0606   07D5 C6 1D 08      je _if7_exit
0607   07D8             _if7_true:
0608   07D8             ; if (*str == '-') sign = -1; 
0609   07D8             _if8_cond:
0610   07D8 FA 05 00      lea d, [bp + 5] ; $str
0611   07DB 2A            mov b, [d]
0612   07DC 38 00 00      mov c, 0
0613   07DF 74            mov d, b
0614   07E0 32            mov bl, [d]
0615   07E1 A7 00         mov bh, 0
0616   07E3 38 00 00      mov c, 0
0617   07E6             ; --- START RELATIONAL
0618   07E6 D7            push a
0619   07E7 11            mov a, b
0620   07E8 FD 2E 2D 00   mov32 cb, $0000002d
0620   07EC 00 00 
0621   07EE B0            cmp a, b
0622   07EF FD 71         seq ; ==
0623   07F1 E4            pop a
0624   07F2             ; --- END RELATIONAL
0625   07F2 C0 00 00      cmp b, 0
0626   07F5 C6 0A 08      je _if8_exit
0627   07F8             _if8_true:
0628   07F8             ; sign = -1; 
0629   07F8 FA FD FF      lea d, [bp + -3] ; $sign
0630   07FB DA            push d
0631   07FC FD 2E 01 00   mov32 cb, $00000001
0631   0800 00 00 
0632   0802 FD 97         neg b
0633   0804 E7            pop d
0634   0805 FD 43         mov [d], b
0635   0807 0A 0A 08      jmp _if8_exit
0636   080A             _if8_exit:
0637   080A             ; str++; 
0638   080A FA 05 00      lea d, [bp + 5] ; $str
0639   080D 2A            mov b, [d]
0640   080E 38 00 00      mov c, 0
0641   0811 FD 77         inc b
0642   0813 FA 05 00      lea d, [bp + 5] ; $str
0643   0816 FD 3E         mov [d], bl
0644   0818 FD 7D         dec b
0645   081A 0A 1D 08      jmp _if7_exit
0646   081D             _if7_exit:
0647   081D             ; while (*str >= '0' && *str <= '9') { 
0648   081D             _while9_cond:
0649   081D FA 05 00      lea d, [bp + 5] ; $str
0650   0820 2A            mov b, [d]
0651   0821 38 00 00      mov c, 0
0652   0824 74            mov d, b
0653   0825 32            mov bl, [d]
0654   0826 A7 00         mov bh, 0
0655   0828 38 00 00      mov c, 0
0656   082B             ; --- START RELATIONAL
0657   082B D7            push a
0658   082C 11            mov a, b
0659   082D FD 2E 30 00   mov32 cb, $00000030
0659   0831 00 00 
0660   0833 B0            cmp a, b
0661   0834 FD 82         sgeu ; >= (unsigned)
0662   0836 E4            pop a
0663   0837             ; --- END RELATIONAL
0664   0837             ; --- START LOGICAL AND
0665   0837 D7            push a
0666   0838 11            mov a, b
0667   0839 FA 05 00      lea d, [bp + 5] ; $str
0668   083C 2A            mov b, [d]
0669   083D 38 00 00      mov c, 0
0670   0840 74            mov d, b
0671   0841 32            mov bl, [d]
0672   0842 A7 00         mov bh, 0
0673   0844 38 00 00      mov c, 0
0674   0847             ; --- START RELATIONAL
0675   0847 D7            push a
0676   0848 11            mov a, b
0677   0849 FD 2E 39 00   mov32 cb, $00000039
0677   084D 00 00 
0678   084F B0            cmp a, b
0679   0850 FD 76         sleu ; <= (unsigned)
0680   0852 E4            pop a
0681   0853             ; --- END RELATIONAL
0682   0853 FD A7         sand a, b
0683   0855 E4            pop a
0684   0856             ; --- END LOGICAL AND
0685   0856 C0 00 00      cmp b, 0
0686   0859 C6 A6 08      je _while9_exit
0687   085C             _while9_block:
0688   085C             ; result = result * 10 + (*str - '0'); 
0689   085C FA FF FF      lea d, [bp + -1] ; $result
0690   085F DA            push d
0691   0860 FA FF FF      lea d, [bp + -1] ; $result
0692   0863 2A            mov b, [d]
0693   0864 38 00 00      mov c, 0
0694   0867             ; --- START FACTORS
0695   0867 D7            push a
0696   0868 11            mov a, b
0697   0869 FD 2E 0A 00   mov32 cb, $0000000a
0697   086D 00 00 
0698   086F AC            mul a, b ; *
0699   0870 11            mov a, b
0700   0871 27            mov b, a
0701   0872 E4            pop a
0702   0873             ; --- END FACTORS
0703   0873             ; --- START TERMS
0704   0873 D7            push a
0705   0874 11            mov a, b
0706   0875 FA 05 00      lea d, [bp + 5] ; $str
0707   0878 2A            mov b, [d]
0708   0879 38 00 00      mov c, 0
0709   087C 74            mov d, b
0710   087D 32            mov bl, [d]
0711   087E A7 00         mov bh, 0
0712   0880 38 00 00      mov c, 0
0713   0883             ; --- START TERMS
0714   0883 D7            push a
0715   0884 11            mov a, b
0716   0885 FD 2E 30 00   mov32 cb, $00000030
0716   0889 00 00 
0717   088B 60            sub a, b
0718   088C 27            mov b, a
0719   088D E4            pop a
0720   088E             ; --- END TERMS
0721   088E 56            add b, a
0722   088F E4            pop a
0723   0890             ; --- END TERMS
0724   0890 E7            pop d
0725   0891 FD 43         mov [d], b
0726   0893             ; str++; 
0727   0893 FA 05 00      lea d, [bp + 5] ; $str
0728   0896 2A            mov b, [d]
0729   0897 38 00 00      mov c, 0
0730   089A FD 77         inc b
0731   089C FA 05 00      lea d, [bp + 5] ; $str
0732   089F FD 3E         mov [d], bl
0733   08A1 FD 7D         dec b
0734   08A3 0A 1D 08      jmp _while9_cond
0735   08A6             _while9_exit:
0736   08A6             ; return sign * result; 
0737   08A6 FA FD FF      lea d, [bp + -3] ; $sign
0738   08A9 2A            mov b, [d]
0739   08AA 38 00 00      mov c, 0
0740   08AD             ; --- START FACTORS
0741   08AD D7            push a
0742   08AE 11            mov a, b
0743   08AF FA FF FF      lea d, [bp + -1] ; $result
0744   08B2 2A            mov b, [d]
0745   08B3 38 00 00      mov c, 0
0746   08B6 AC            mul a, b ; *
0747   08B7 11            mov a, b
0748   08B8 27            mov b, a
0749   08B9 E4            pop a
0750   08BA             ; --- END FACTORS
0751   08BA F9            leave
0752   08BB 09            ret
0753   08BC             
0754   08BC             rand:
0755   08BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0756   08BF             ; int  sec; 
0757   08BF 52 02 00      sub sp, 2
0758   08C2             
0759   08C2             ; --- BEGIN INLINE ASM SEGMENT
0760   08C2 19 00         mov al, 0
0761   08C4 05 01         syscall sys_rtc					
0762   08C6 1A            mov al, ah
0763   08C7 FA FF FF      lea d, [bp + -1] ; $sec
0764   08CA 1E            mov al, [d]
0765   08CB 22 00         mov ah, 0
0766   08CD             ; --- END INLINE ASM SEGMENT
0767   08CD             
0768   08CD             ; return sec; 
0769   08CD FA FF FF      lea d, [bp + -1] ; $sec
0770   08D0 2A            mov b, [d]
0771   08D1 38 00 00      mov c, 0
0772   08D4 F9            leave
0773   08D5 09            ret
0774   08D6             
0775   08D6             alloc:
0776   08D6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0777   08D9             ; heap_top = heap_top + bytes; 
0778   08D9 3B 5D 2E      mov d, _heap_top ; $heap_top
0779   08DC DA            push d
0780   08DD 3B 5D 2E      mov d, _heap_top ; $heap_top
0781   08E0 2A            mov b, [d]
0782   08E1 38 00 00      mov c, 0
0783   08E4             ; --- START TERMS
0784   08E4 D7            push a
0785   08E5 11            mov a, b
0786   08E6 FA 05 00      lea d, [bp + 5] ; $bytes
0787   08E9 2A            mov b, [d]
0788   08EA 38 00 00      mov c, 0
0789   08ED 56            add b, a
0790   08EE E4            pop a
0791   08EF             ; --- END TERMS
0792   08EF E7            pop d
0793   08F0 FD 43         mov [d], b
0794   08F2             ; return heap_top - bytes; 
0795   08F2 3B 5D 2E      mov d, _heap_top ; $heap_top
0796   08F5 2A            mov b, [d]
0797   08F6 38 00 00      mov c, 0
0798   08F9             ; --- START TERMS
0799   08F9 D7            push a
0800   08FA 11            mov a, b
0801   08FB FA 05 00      lea d, [bp + 5] ; $bytes
0802   08FE 2A            mov b, [d]
0803   08FF 38 00 00      mov c, 0
0804   0902 60            sub a, b
0805   0903 27            mov b, a
0806   0904 E4            pop a
0807   0905             ; --- END TERMS
0808   0905 F9            leave
0809   0906 09            ret
0810   0907             
0811   0907             free:
0812   0907 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0813   090A             ; return heap_top = heap_top - bytes; 
0814   090A 3B 5D 2E      mov d, _heap_top ; $heap_top
0815   090D DA            push d
0816   090E 3B 5D 2E      mov d, _heap_top ; $heap_top
0817   0911 2A            mov b, [d]
0818   0912 38 00 00      mov c, 0
0819   0915             ; --- START TERMS
0820   0915 D7            push a
0821   0916 11            mov a, b
0822   0917 FA 05 00      lea d, [bp + 5] ; $bytes
0823   091A 2A            mov b, [d]
0824   091B 38 00 00      mov c, 0
0825   091E 60            sub a, b
0826   091F 27            mov b, a
0827   0920 E4            pop a
0828   0921             ; --- END TERMS
0829   0921 E7            pop d
0830   0922 FD 43         mov [d], b
0831   0924 F9            leave
0832   0925 09            ret
0833   0926             
0834   0926             fopen:
0835   0926 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0836   0929             ; FILE *fp; 
0837   0929 52 02 00      sub sp, 2
0838   092C             ; static int max_handle = 0; 
0839   092C 52 02 00      sub sp, 2
0840   092F             ; fp = alloc(sizeof(FILE)); 
0841   092F FA FF FF      lea d, [bp + -1] ; $fp
0842   0932 DA            push d
0843   0933             ; --- START FUNCTION CALL
0844   0933 26 04 01      mov b, 260
0845   0936 FD AB         swp b
0846   0938 D8            push b
0847   0939 07 D6 08      call alloc
0848   093C 51 02 00      add sp, 2
0849   093F             ; --- END FUNCTION CALL
0850   093F E7            pop d
0851   0940 FD 43         mov [d], b
0852   0942             ; strcpy(fp->filename, filename); 
0853   0942             ; --- START FUNCTION CALL
0854   0942 FA 05 00      lea d, [bp + 5] ; $filename
0855   0945 2A            mov b, [d]
0856   0946 38 00 00      mov c, 0
0857   0949 FD AB         swp b
0858   094B D8            push b
0859   094C FA FF FF      lea d, [bp + -1] ; $fp
0860   094F FD 2A         mov d, [d]
0861   0951 58 02 00      add d, 2
0862   0954 2D            mov b, d
0863   0955 38 00 00      mov c, 0
0864   0958 FD AB         swp b
0865   095A D8            push b
0866   095B 07 93 04      call strcpy
0867   095E 51 04 00      add sp, 4
0868   0961             ; --- END FUNCTION CALL
0869   0961             ; fp->handle = max_handle; 
0870   0961 FA FF FF      lea d, [bp + -1] ; $fp
0871   0964 FD 2A         mov d, [d]
0872   0966 58 00 00      add d, 0
0873   0969 DA            push d
0874   096A 3B C2 2D      mov d, st_fopen_max_handle ; static max_handle
0875   096D 2A            mov b, [d]
0876   096E 38 00 00      mov c, 0
0877   0971 E7            pop d
0878   0972 FD 43         mov [d], b
0879   0974             ; fp->mode = mode; 
0880   0974 FA FF FF      lea d, [bp + -1] ; $fp
0881   0977 FD 2A         mov d, [d]
0882   0979 58 02 01      add d, 258
0883   097C DA            push d
0884   097D FA 07 00      lea d, [bp + 7] ; $mode
0885   0980 32            mov bl, [d]
0886   0981 A7 00         mov bh, 0
0887   0983 38 00 00      mov c, 0
0888   0986 E7            pop d
0889   0987 FD 3E         mov [d], bl
0890   0989             ; fp->loc = 0; 
0891   0989 FA FF FF      lea d, [bp + -1] ; $fp
0892   098C FD 2A         mov d, [d]
0893   098E 58 03 01      add d, 259
0894   0991 DA            push d
0895   0992 FD 2E 00 00   mov32 cb, $00000000
0895   0996 00 00 
0896   0998 E7            pop d
0897   0999 FD 3E         mov [d], bl
0898   099B             ; max_handle++; 
0899   099B 3B C2 2D      mov d, st_fopen_max_handle ; static max_handle
0900   099E 2A            mov b, [d]
0901   099F 38 00 00      mov c, 0
0902   09A2 11            mov a, b
0903   09A3 FD 77         inc b
0904   09A5 3B C2 2D      mov d, st_fopen_max_handle ; static max_handle
0905   09A8 FD 43         mov [d], b
0906   09AA 27            mov b, a
0907   09AB F9            leave
0908   09AC 09            ret
0909   09AD             
0910   09AD             fclose:
0911   09AD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0912   09B0             ; free(sizeof(FILE)); 
0913   09B0             ; --- START FUNCTION CALL
0914   09B0 26 04 01      mov b, 260
0915   09B3 FD AB         swp b
0916   09B5 D8            push b
0917   09B6 07 07 09      call free
0918   09B9 51 02 00      add sp, 2
0919   09BC             ; --- END FUNCTION CALL
0920   09BC F9            leave
0921   09BD 09            ret
0922   09BE             
0923   09BE             printf:
0924   09BE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0925   09C1             ; char *p, *format_p; 
0926   09C1 52 02 00      sub sp, 2
0927   09C4 52 02 00      sub sp, 2
0928   09C7             ; format_p = format; 
0929   09C7 FA FD FF      lea d, [bp + -3] ; $format_p
0930   09CA DA            push d
0931   09CB FA 05 00      lea d, [bp + 5] ; $format
0932   09CE 2A            mov b, [d]
0933   09CF 38 00 00      mov c, 0
0934   09D2 E7            pop d
0935   09D3 FD 43         mov [d], b
0936   09D5             ; p = &format + 2; 
0937   09D5 FA FF FF      lea d, [bp + -1] ; $p
0938   09D8 DA            push d
0939   09D9 FA 05 00      lea d, [bp + 5] ; $format
0940   09DC 2D            mov b, d
0941   09DD             ; --- START TERMS
0942   09DD D7            push a
0943   09DE 11            mov a, b
0944   09DF FD 2E 02 00   mov32 cb, $00000002
0944   09E3 00 00 
0945   09E5 56            add b, a
0946   09E6 E4            pop a
0947   09E7             ; --- END TERMS
0948   09E7 E7            pop d
0949   09E8 FD 43         mov [d], b
0950   09EA             ; for(;;){ 
0951   09EA             _for10_init:
0952   09EA             _for10_cond:
0953   09EA             _for10_block:
0954   09EA             ; if(!*format_p) break; 
0955   09EA             _if11_cond:
0956   09EA FA FD FF      lea d, [bp + -3] ; $format_p
0957   09ED 2A            mov b, [d]
0958   09EE 38 00 00      mov c, 0
0959   09F1 74            mov d, b
0960   09F2 32            mov bl, [d]
0961   09F3 A7 00         mov bh, 0
0962   09F5 38 00 00      mov c, 0
0963   09F8 C0 00 00      cmp b, 0
0964   09FB FD 71         seq ; !
0965   09FD C0 00 00      cmp b, 0
0966   0A00 C6 09 0A      je _if11_else
0967   0A03             _if11_true:
0968   0A03             ; break; 
0969   0A03 0A 9A 0C      jmp _for10_exit ; for break
0970   0A06 0A 97 0C      jmp _if11_exit
0971   0A09             _if11_else:
0972   0A09             ; if(*format_p == '%'){ 
0973   0A09             _if12_cond:
0974   0A09 FA FD FF      lea d, [bp + -3] ; $format_p
0975   0A0C 2A            mov b, [d]
0976   0A0D 38 00 00      mov c, 0
0977   0A10 74            mov d, b
0978   0A11 32            mov bl, [d]
0979   0A12 A7 00         mov bh, 0
0980   0A14 38 00 00      mov c, 0
0981   0A17             ; --- START RELATIONAL
0982   0A17 D7            push a
0983   0A18 11            mov a, b
0984   0A19 FD 2E 25 00   mov32 cb, $00000025
0984   0A1D 00 00 
0985   0A1F B0            cmp a, b
0986   0A20 FD 71         seq ; ==
0987   0A22 E4            pop a
0988   0A23             ; --- END RELATIONAL
0989   0A23 C0 00 00      cmp b, 0
0990   0A26 C6 72 0C      je _if12_else
0991   0A29             _if12_true:
0992   0A29             ; format_p++; 
0993   0A29 FA FD FF      lea d, [bp + -3] ; $format_p
0994   0A2C 2A            mov b, [d]
0995   0A2D 38 00 00      mov c, 0
0996   0A30 FD 77         inc b
0997   0A32 FA FD FF      lea d, [bp + -3] ; $format_p
0998   0A35 FD 3E         mov [d], bl
0999   0A37 FD 7D         dec b
1000   0A39             ; switch(*format_p){ 
1001   0A39             _switch13_expr:
1002   0A39 FA FD FF      lea d, [bp + -3] ; $format_p
1003   0A3C 2A            mov b, [d]
1004   0A3D 38 00 00      mov c, 0
1005   0A40 74            mov d, b
1006   0A41 32            mov bl, [d]
1007   0A42 A7 00         mov bh, 0
1008   0A44 38 00 00      mov c, 0
1009   0A47             _switch13_comparisons:
1010   0A47 C1 6C         cmp bl, $6c
1011   0A49 C6 75 0A      je _switch13_case0
1012   0A4C C1 4C         cmp bl, $4c
1013   0A4E C6 75 0A      je _switch13_case1
1014   0A51 C1 64         cmp bl, $64
1015   0A53 C6 85 0B      je _switch13_case2
1016   0A56 C1 69         cmp bl, $69
1017   0A58 C6 85 0B      je _switch13_case3
1018   0A5B C1 75         cmp bl, $75
1019   0A5D C6 B5 0B      je _switch13_case4
1020   0A60 C1 78         cmp bl, $78
1021   0A62 C6 E5 0B      je _switch13_case5
1022   0A65 C1 63         cmp bl, $63
1023   0A67 C6 09 0C      je _switch13_case6
1024   0A6A C1 73         cmp bl, $73
1025   0A6C C6 2E 0C      je _switch13_case7
1026   0A6F 0A 53 0C      jmp _switch13_default
1027   0A72 0A 5F 0C      jmp _switch13_exit
1028   0A75             _switch13_case0:
1029   0A75             _switch13_case1:
1030   0A75             ; format_p++; 
1031   0A75 FA FD FF      lea d, [bp + -3] ; $format_p
1032   0A78 2A            mov b, [d]
1033   0A79 38 00 00      mov c, 0
1034   0A7C FD 77         inc b
1035   0A7E FA FD FF      lea d, [bp + -3] ; $format_p
1036   0A81 FD 3E         mov [d], bl
1037   0A83 FD 7D         dec b
1038   0A85             ; if(*format_p == 'd' || *format_p == 'i') 
1039   0A85             _if14_cond:
1040   0A85 FA FD FF      lea d, [bp + -3] ; $format_p
1041   0A88 2A            mov b, [d]
1042   0A89 38 00 00      mov c, 0
1043   0A8C 74            mov d, b
1044   0A8D 32            mov bl, [d]
1045   0A8E A7 00         mov bh, 0
1046   0A90 38 00 00      mov c, 0
1047   0A93             ; --- START RELATIONAL
1048   0A93 D7            push a
1049   0A94 11            mov a, b
1050   0A95 FD 2E 64 00   mov32 cb, $00000064
1050   0A99 00 00 
1051   0A9B B0            cmp a, b
1052   0A9C FD 71         seq ; ==
1053   0A9E E4            pop a
1054   0A9F             ; --- END RELATIONAL
1055   0A9F             ; --- START LOGICAL OR
1056   0A9F D7            push a
1057   0AA0 11            mov a, b
1058   0AA1 FA FD FF      lea d, [bp + -3] ; $format_p
1059   0AA4 2A            mov b, [d]
1060   0AA5 38 00 00      mov c, 0
1061   0AA8 74            mov d, b
1062   0AA9 32            mov bl, [d]
1063   0AAA A7 00         mov bh, 0
1064   0AAC 38 00 00      mov c, 0
1065   0AAF             ; --- START RELATIONAL
1066   0AAF D7            push a
1067   0AB0 11            mov a, b
1068   0AB1 FD 2E 69 00   mov32 cb, $00000069
1068   0AB5 00 00 
1069   0AB7 B0            cmp a, b
1070   0AB8 FD 71         seq ; ==
1071   0ABA E4            pop a
1072   0ABB             ; --- END RELATIONAL
1073   0ABB FD A8         sor a, b ; ||
1074   0ABD E4            pop a
1075   0ABE             ; --- END LOGICAL OR
1076   0ABE C0 00 00      cmp b, 0
1077   0AC1 C6 E2 0A      je _if14_else
1078   0AC4             _if14_true:
1079   0AC4             ; print_signed_long(*(long *)p); 
1080   0AC4             ; --- START FUNCTION CALL
1081   0AC4 FA FF FF      lea d, [bp + -1] ; $p
1082   0AC7 2A            mov b, [d]
1083   0AC8 38 00 00      mov c, 0
1084   0ACB 74            mov d, b
1085   0ACC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1086   0ACF FD 39         mov c, b ; And place it into C
1087   0AD1 2A            mov b, [d] ; Lower Word in B
1088   0AD2 12            mov a, c
1089   0AD3 FD AA         swp a
1090   0AD5 D7            push a
1091   0AD6 FD AB         swp b
1092   0AD8 D8            push b
1093   0AD9 07 6C 16      call print_signed_long
1094   0ADC 51 04 00      add sp, 4
1095   0ADF             ; --- END FUNCTION CALL
1096   0ADF 0A 6A 0B      jmp _if14_exit
1097   0AE2             _if14_else:
1098   0AE2             ; if(*format_p == 'u') 
1099   0AE2             _if15_cond:
1100   0AE2 FA FD FF      lea d, [bp + -3] ; $format_p
1101   0AE5 2A            mov b, [d]
1102   0AE6 38 00 00      mov c, 0
1103   0AE9 74            mov d, b
1104   0AEA 32            mov bl, [d]
1105   0AEB A7 00         mov bh, 0
1106   0AED 38 00 00      mov c, 0
1107   0AF0             ; --- START RELATIONAL
1108   0AF0 D7            push a
1109   0AF1 11            mov a, b
1110   0AF2 FD 2E 75 00   mov32 cb, $00000075
1110   0AF6 00 00 
1111   0AF8 B0            cmp a, b
1112   0AF9 FD 71         seq ; ==
1113   0AFB E4            pop a
1114   0AFC             ; --- END RELATIONAL
1115   0AFC C0 00 00      cmp b, 0
1116   0AFF C6 20 0B      je _if15_else
1117   0B02             _if15_true:
1118   0B02             ; print_unsigned_long(*(unsigned long *)p); 
1119   0B02             ; --- START FUNCTION CALL
1120   0B02 FA FF FF      lea d, [bp + -1] ; $p
1121   0B05 2A            mov b, [d]
1122   0B06 38 00 00      mov c, 0
1123   0B09 74            mov d, b
1124   0B0A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1125   0B0D FD 39         mov c, b ; And place it into C
1126   0B0F 2A            mov b, [d] ; Lower Word in B
1127   0B10 12            mov a, c
1128   0B11 FD AA         swp a
1129   0B13 D7            push a
1130   0B14 FD AB         swp b
1131   0B16 D8            push b
1132   0B17 07 DB 17      call print_unsigned_long
1133   0B1A 51 04 00      add sp, 4
1134   0B1D             ; --- END FUNCTION CALL
1135   0B1D 0A 6A 0B      jmp _if15_exit
1136   0B20             _if15_else:
1137   0B20             ; if(*format_p == 'x') 
1138   0B20             _if16_cond:
1139   0B20 FA FD FF      lea d, [bp + -3] ; $format_p
1140   0B23 2A            mov b, [d]
1141   0B24 38 00 00      mov c, 0
1142   0B27 74            mov d, b
1143   0B28 32            mov bl, [d]
1144   0B29 A7 00         mov bh, 0
1145   0B2B 38 00 00      mov c, 0
1146   0B2E             ; --- START RELATIONAL
1147   0B2E D7            push a
1148   0B2F 11            mov a, b
1149   0B30 FD 2E 78 00   mov32 cb, $00000078
1149   0B34 00 00 
1150   0B36 B0            cmp a, b
1151   0B37 FD 71         seq ; ==
1152   0B39 E4            pop a
1153   0B3A             ; --- END RELATIONAL
1154   0B3A C0 00 00      cmp b, 0
1155   0B3D C6 5E 0B      je _if16_else
1156   0B40             _if16_true:
1157   0B40             ; printx32(*(long int *)p); 
1158   0B40             ; --- START FUNCTION CALL
1159   0B40 FA FF FF      lea d, [bp + -1] ; $p
1160   0B43 2A            mov b, [d]
1161   0B44 38 00 00      mov c, 0
1162   0B47 74            mov d, b
1163   0B48 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1164   0B4B FD 39         mov c, b ; And place it into C
1165   0B4D 2A            mov b, [d] ; Lower Word in B
1166   0B4E 12            mov a, c
1167   0B4F FD AA         swp a
1168   0B51 D7            push a
1169   0B52 FD AB         swp b
1170   0B54 D8            push b
1171   0B55 07 3F 13      call printx32
1172   0B58 51 04 00      add sp, 4
1173   0B5B             ; --- END FUNCTION CALL
1174   0B5B 0A 6A 0B      jmp _if16_exit
1175   0B5E             _if16_else:
1176   0B5E             ; err("Unexpected format in printf."); 
1177   0B5E             ; --- START FUNCTION CALL
1178   0B5E 26 19 2E      mov b, _s3 ; "Unexpected format in printf."
1179   0B61 FD AB         swp b
1180   0B63 D8            push b
1181   0B64 07 2A 13      call err
1182   0B67 51 02 00      add sp, 2
1183   0B6A             ; --- END FUNCTION CALL
1184   0B6A             _if16_exit:
1185   0B6A             _if15_exit:
1186   0B6A             _if14_exit:
1187   0B6A             ; p = p + 4; 
1188   0B6A FA FF FF      lea d, [bp + -1] ; $p
1189   0B6D DA            push d
1190   0B6E FA FF FF      lea d, [bp + -1] ; $p
1191   0B71 2A            mov b, [d]
1192   0B72 38 00 00      mov c, 0
1193   0B75             ; --- START TERMS
1194   0B75 D7            push a
1195   0B76 11            mov a, b
1196   0B77 FD 2E 04 00   mov32 cb, $00000004
1196   0B7B 00 00 
1197   0B7D 56            add b, a
1198   0B7E E4            pop a
1199   0B7F             ; --- END TERMS
1200   0B7F E7            pop d
1201   0B80 FD 43         mov [d], b
1202   0B82             ; break; 
1203   0B82 0A 5F 0C      jmp _switch13_exit ; case break
1204   0B85             _switch13_case2:
1205   0B85             _switch13_case3:
1206   0B85             ; print_signed(*(int*)p); 
1207   0B85             ; --- START FUNCTION CALL
1208   0B85 FA FF FF      lea d, [bp + -1] ; $p
1209   0B88 2A            mov b, [d]
1210   0B89 38 00 00      mov c, 0
1211   0B8C 74            mov d, b
1212   0B8D 2A            mov b, [d]
1213   0B8E 38 00 00      mov c, 0
1214   0B91 FD AB         swp b
1215   0B93 D8            push b
1216   0B94 07 33 15      call print_signed
1217   0B97 51 02 00      add sp, 2
1218   0B9A             ; --- END FUNCTION CALL
1219   0B9A             ; p = p + 2; 
1220   0B9A FA FF FF      lea d, [bp + -1] ; $p
1221   0B9D DA            push d
1222   0B9E FA FF FF      lea d, [bp + -1] ; $p
1223   0BA1 2A            mov b, [d]
1224   0BA2 38 00 00      mov c, 0
1225   0BA5             ; --- START TERMS
1226   0BA5 D7            push a
1227   0BA6 11            mov a, b
1228   0BA7 FD 2E 02 00   mov32 cb, $00000002
1228   0BAB 00 00 
1229   0BAD 56            add b, a
1230   0BAE E4            pop a
1231   0BAF             ; --- END TERMS
1232   0BAF E7            pop d
1233   0BB0 FD 43         mov [d], b
1234   0BB2             ; break; 
1235   0BB2 0A 5F 0C      jmp _switch13_exit ; case break
1236   0BB5             _switch13_case4:
1237   0BB5             ; print_unsigned(*(unsigned int*)p); 
1238   0BB5             ; --- START FUNCTION CALL
1239   0BB5 FA FF FF      lea d, [bp + -1] ; $p
1240   0BB8 2A            mov b, [d]
1241   0BB9 38 00 00      mov c, 0
1242   0BBC 74            mov d, b
1243   0BBD 2A            mov b, [d]
1244   0BBE 38 00 00      mov c, 0
1245   0BC1 FD AB         swp b
1246   0BC3 D8            push b
1247   0BC4 07 4F 1A      call print_unsigned
1248   0BC7 51 02 00      add sp, 2
1249   0BCA             ; --- END FUNCTION CALL
1250   0BCA             ; p = p + 2; 
1251   0BCA FA FF FF      lea d, [bp + -1] ; $p
1252   0BCD DA            push d
1253   0BCE FA FF FF      lea d, [bp + -1] ; $p
1254   0BD1 2A            mov b, [d]
1255   0BD2 38 00 00      mov c, 0
1256   0BD5             ; --- START TERMS
1257   0BD5 D7            push a
1258   0BD6 11            mov a, b
1259   0BD7 FD 2E 02 00   mov32 cb, $00000002
1259   0BDB 00 00 
1260   0BDD 56            add b, a
1261   0BDE E4            pop a
1262   0BDF             ; --- END TERMS
1263   0BDF E7            pop d
1264   0BE0 FD 43         mov [d], b
1265   0BE2             ; break; 
1266   0BE2 0A 5F 0C      jmp _switch13_exit ; case break
1267   0BE5             _switch13_case5:
1268   0BE5             
1269   0BE5             ; --- BEGIN INLINE ASM SEGMENT
1270   0BE5 FA FF FF      lea d, [bp + -1] ; $p
1271   0BE8 FD 2A         mov d, [d]
1272   0BEA 2A            mov b, [d]
1273   0BEB 07 C8 20      call print_u16x
1274   0BEE             ; --- END INLINE ASM SEGMENT
1275   0BEE             
1276   0BEE             ; p = p + 2; 
1277   0BEE FA FF FF      lea d, [bp + -1] ; $p
1278   0BF1 DA            push d
1279   0BF2 FA FF FF      lea d, [bp + -1] ; $p
1280   0BF5 2A            mov b, [d]
1281   0BF6 38 00 00      mov c, 0
1282   0BF9             ; --- START TERMS
1283   0BF9 D7            push a
1284   0BFA 11            mov a, b
1285   0BFB FD 2E 02 00   mov32 cb, $00000002
1285   0BFF 00 00 
1286   0C01 56            add b, a
1287   0C02 E4            pop a
1288   0C03             ; --- END TERMS
1289   0C03 E7            pop d
1290   0C04 FD 43         mov [d], b
1291   0C06             ; break; 
1292   0C06 0A 5F 0C      jmp _switch13_exit ; case break
1293   0C09             _switch13_case6:
1294   0C09             
1295   0C09             ; --- BEGIN INLINE ASM SEGMENT
1296   0C09 FA FF FF      lea d, [bp + -1] ; $p
1297   0C0C FD 2A         mov d, [d]
1298   0C0E 1E            mov al, [d]
1299   0C0F 23            mov ah, al
1300   0C10 07 26 1F      call _putchar
1301   0C13             ; --- END INLINE ASM SEGMENT
1302   0C13             
1303   0C13             ; p = p + 1; 
1304   0C13 FA FF FF      lea d, [bp + -1] ; $p
1305   0C16 DA            push d
1306   0C17 FA FF FF      lea d, [bp + -1] ; $p
1307   0C1A 2A            mov b, [d]
1308   0C1B 38 00 00      mov c, 0
1309   0C1E             ; --- START TERMS
1310   0C1E D7            push a
1311   0C1F 11            mov a, b
1312   0C20 FD 2E 01 00   mov32 cb, $00000001
1312   0C24 00 00 
1313   0C26 56            add b, a
1314   0C27 E4            pop a
1315   0C28             ; --- END TERMS
1316   0C28 E7            pop d
1317   0C29 FD 43         mov [d], b
1318   0C2B             ; break; 
1319   0C2B 0A 5F 0C      jmp _switch13_exit ; case break
1320   0C2E             _switch13_case7:
1321   0C2E             
1322   0C2E             ; --- BEGIN INLINE ASM SEGMENT
1323   0C2E FA FF FF      lea d, [bp + -1] ; $p
1324   0C31 FD 2A         mov d, [d]
1325   0C33 FD 2A         mov d, [d]
1326   0C35 07 70 20      call _puts
1327   0C38             ; --- END INLINE ASM SEGMENT
1328   0C38             
1329   0C38             ; p = p + 2; 
1330   0C38 FA FF FF      lea d, [bp + -1] ; $p
1331   0C3B DA            push d
1332   0C3C FA FF FF      lea d, [bp + -1] ; $p
1333   0C3F 2A            mov b, [d]
1334   0C40 38 00 00      mov c, 0
1335   0C43             ; --- START TERMS
1336   0C43 D7            push a
1337   0C44 11            mov a, b
1338   0C45 FD 2E 02 00   mov32 cb, $00000002
1338   0C49 00 00 
1339   0C4B 56            add b, a
1340   0C4C E4            pop a
1341   0C4D             ; --- END TERMS
1342   0C4D E7            pop d
1343   0C4E FD 43         mov [d], b
1344   0C50             ; break; 
1345   0C50 0A 5F 0C      jmp _switch13_exit ; case break
1346   0C53             _switch13_default:
1347   0C53             ; print("Error: Unknown argument type.\n"); 
1348   0C53             ; --- START FUNCTION CALL
1349   0C53 26 36 2E      mov b, _s4 ; "Error: Unknown argument type.\n"
1350   0C56 FD AB         swp b
1351   0C58 D8            push b
1352   0C59 07 65 1D      call print
1353   0C5C 51 02 00      add sp, 2
1354   0C5F             ; --- END FUNCTION CALL
1355   0C5F             _switch13_exit:
1356   0C5F             ; format_p++; 
1357   0C5F FA FD FF      lea d, [bp + -3] ; $format_p
1358   0C62 2A            mov b, [d]
1359   0C63 38 00 00      mov c, 0
1360   0C66 FD 77         inc b
1361   0C68 FA FD FF      lea d, [bp + -3] ; $format_p
1362   0C6B FD 3E         mov [d], bl
1363   0C6D FD 7D         dec b
1364   0C6F 0A 97 0C      jmp _if12_exit
1365   0C72             _if12_else:
1366   0C72             ; putchar(*format_p); 
1367   0C72             ; --- START FUNCTION CALL
1368   0C72 FA FD FF      lea d, [bp + -3] ; $format_p
1369   0C75 2A            mov b, [d]
1370   0C76 38 00 00      mov c, 0
1371   0C79 74            mov d, b
1372   0C7A 32            mov bl, [d]
1373   0C7B A7 00         mov bh, 0
1374   0C7D 38 00 00      mov c, 0
1375   0C80 DD            push bl
1376   0C81 07 17 1D      call putchar
1377   0C84 51 01 00      add sp, 1
1378   0C87             ; --- END FUNCTION CALL
1379   0C87             ; format_p++; 
1380   0C87 FA FD FF      lea d, [bp + -3] ; $format_p
1381   0C8A 2A            mov b, [d]
1382   0C8B 38 00 00      mov c, 0
1383   0C8E FD 77         inc b
1384   0C90 FA FD FF      lea d, [bp + -3] ; $format_p
1385   0C93 FD 3E         mov [d], bl
1386   0C95 FD 7D         dec b
1387   0C97             _if12_exit:
1388   0C97             _if11_exit:
1389   0C97             _for10_update:
1390   0C97 0A EA 09      jmp _for10_cond
1391   0C9A             _for10_exit:
1392   0C9A F9            leave
1393   0C9B 09            ret
1394   0C9C             
1395   0C9C             scanf:
1396   0C9C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1397   0C9F             ; char *p, *format_p; 
1398   0C9F 52 02 00      sub sp, 2
1399   0CA2 52 02 00      sub sp, 2
1400   0CA5             ; char c; 
1401   0CA5 52 01 00      sub sp, 1
1402   0CA8             ; int i; 
1403   0CA8 52 02 00      sub sp, 2
1404   0CAB             ; char input_string[  512                    ]; 
1405   0CAB 52 00 02      sub sp, 512
1406   0CAE             ; format_p = format; 
1407   0CAE FA FD FF      lea d, [bp + -3] ; $format_p
1408   0CB1 DA            push d
1409   0CB2 FA 05 00      lea d, [bp + 5] ; $format
1410   0CB5 2A            mov b, [d]
1411   0CB6 38 00 00      mov c, 0
1412   0CB9 E7            pop d
1413   0CBA FD 43         mov [d], b
1414   0CBC             ; p = &format + 2; 
1415   0CBC FA FF FF      lea d, [bp + -1] ; $p
1416   0CBF DA            push d
1417   0CC0 FA 05 00      lea d, [bp + 5] ; $format
1418   0CC3 2D            mov b, d
1419   0CC4             ; --- START TERMS
1420   0CC4 D7            push a
1421   0CC5 11            mov a, b
1422   0CC6 FD 2E 02 00   mov32 cb, $00000002
1422   0CCA 00 00 
1423   0CCC 56            add b, a
1424   0CCD E4            pop a
1425   0CCE             ; --- END TERMS
1426   0CCE E7            pop d
1427   0CCF FD 43         mov [d], b
1428   0CD1             ; for(;;){ 
1429   0CD1             _for17_init:
1430   0CD1             _for17_cond:
1431   0CD1             _for17_block:
1432   0CD1             ; if(!*format_p) break; 
1433   0CD1             _if18_cond:
1434   0CD1 FA FD FF      lea d, [bp + -3] ; $format_p
1435   0CD4 2A            mov b, [d]
1436   0CD5 38 00 00      mov c, 0
1437   0CD8 74            mov d, b
1438   0CD9 32            mov bl, [d]
1439   0CDA A7 00         mov bh, 0
1440   0CDC 38 00 00      mov c, 0
1441   0CDF C0 00 00      cmp b, 0
1442   0CE2 FD 71         seq ; !
1443   0CE4 C0 00 00      cmp b, 0
1444   0CE7 C6 F0 0C      je _if18_else
1445   0CEA             _if18_true:
1446   0CEA             ; break; 
1447   0CEA 0A 78 0F      jmp _for17_exit ; for break
1448   0CED 0A 75 0F      jmp _if18_exit
1449   0CF0             _if18_else:
1450   0CF0             ; if(*format_p == '%'){ 
1451   0CF0             _if19_cond:
1452   0CF0 FA FD FF      lea d, [bp + -3] ; $format_p
1453   0CF3 2A            mov b, [d]
1454   0CF4 38 00 00      mov c, 0
1455   0CF7 74            mov d, b
1456   0CF8 32            mov bl, [d]
1457   0CF9 A7 00         mov bh, 0
1458   0CFB 38 00 00      mov c, 0
1459   0CFE             ; --- START RELATIONAL
1460   0CFE D7            push a
1461   0CFF 11            mov a, b
1462   0D00 FD 2E 25 00   mov32 cb, $00000025
1462   0D04 00 00 
1463   0D06 B0            cmp a, b
1464   0D07 FD 71         seq ; ==
1465   0D09 E4            pop a
1466   0D0A             ; --- END RELATIONAL
1467   0D0A C0 00 00      cmp b, 0
1468   0D0D C6 50 0F      je _if19_else
1469   0D10             _if19_true:
1470   0D10             ; format_p++; 
1471   0D10 FA FD FF      lea d, [bp + -3] ; $format_p
1472   0D13 2A            mov b, [d]
1473   0D14 38 00 00      mov c, 0
1474   0D17 FD 77         inc b
1475   0D19 FA FD FF      lea d, [bp + -3] ; $format_p
1476   0D1C FD 3E         mov [d], bl
1477   0D1E FD 7D         dec b
1478   0D20             ; switch(*format_p){ 
1479   0D20             _switch20_expr:
1480   0D20 FA FD FF      lea d, [bp + -3] ; $format_p
1481   0D23 2A            mov b, [d]
1482   0D24 38 00 00      mov c, 0
1483   0D27 74            mov d, b
1484   0D28 32            mov bl, [d]
1485   0D29 A7 00         mov bh, 0
1486   0D2B 38 00 00      mov c, 0
1487   0D2E             _switch20_comparisons:
1488   0D2E C1 6C         cmp bl, $6c
1489   0D30 C6 5C 0D      je _switch20_case0
1490   0D33 C1 4C         cmp bl, $4c
1491   0D35 C6 5C 0D      je _switch20_case1
1492   0D38 C1 64         cmp bl, $64
1493   0D3A C6 1B 0E      je _switch20_case2
1494   0D3D C1 69         cmp bl, $69
1495   0D3F C6 1B 0E      je _switch20_case3
1496   0D42 C1 75         cmp bl, $75
1497   0D44 C6 54 0E      je _switch20_case4
1498   0D47 C1 78         cmp bl, $78
1499   0D49 C6 8D 0E      je _switch20_case5
1500   0D4C C1 63         cmp bl, $63
1501   0D4E C6 A8 0E      je _switch20_case6
1502   0D51 C1 73         cmp bl, $73
1503   0D53 C6 EA 0E      je _switch20_case7
1504   0D56 0A 31 0F      jmp _switch20_default
1505   0D59 0A 3D 0F      jmp _switch20_exit
1506   0D5C             _switch20_case0:
1507   0D5C             _switch20_case1:
1508   0D5C             ; format_p++; 
1509   0D5C FA FD FF      lea d, [bp + -3] ; $format_p
1510   0D5F 2A            mov b, [d]
1511   0D60 38 00 00      mov c, 0
1512   0D63 FD 77         inc b
1513   0D65 FA FD FF      lea d, [bp + -3] ; $format_p
1514   0D68 FD 3E         mov [d], bl
1515   0D6A FD 7D         dec b
1516   0D6C             ; if(*format_p == 'd' || *format_p == 'i'); 
1517   0D6C             _if21_cond:
1518   0D6C FA FD FF      lea d, [bp + -3] ; $format_p
1519   0D6F 2A            mov b, [d]
1520   0D70 38 00 00      mov c, 0
1521   0D73 74            mov d, b
1522   0D74 32            mov bl, [d]
1523   0D75 A7 00         mov bh, 0
1524   0D77 38 00 00      mov c, 0
1525   0D7A             ; --- START RELATIONAL
1526   0D7A D7            push a
1527   0D7B 11            mov a, b
1528   0D7C FD 2E 64 00   mov32 cb, $00000064
1528   0D80 00 00 
1529   0D82 B0            cmp a, b
1530   0D83 FD 71         seq ; ==
1531   0D85 E4            pop a
1532   0D86             ; --- END RELATIONAL
1533   0D86             ; --- START LOGICAL OR
1534   0D86 D7            push a
1535   0D87 11            mov a, b
1536   0D88 FA FD FF      lea d, [bp + -3] ; $format_p
1537   0D8B 2A            mov b, [d]
1538   0D8C 38 00 00      mov c, 0
1539   0D8F 74            mov d, b
1540   0D90 32            mov bl, [d]
1541   0D91 A7 00         mov bh, 0
1542   0D93 38 00 00      mov c, 0
1543   0D96             ; --- START RELATIONAL
1544   0D96 D7            push a
1545   0D97 11            mov a, b
1546   0D98 FD 2E 69 00   mov32 cb, $00000069
1546   0D9C 00 00 
1547   0D9E B0            cmp a, b
1548   0D9F FD 71         seq ; ==
1549   0DA1 E4            pop a
1550   0DA2             ; --- END RELATIONAL
1551   0DA2 FD A8         sor a, b ; ||
1552   0DA4 E4            pop a
1553   0DA5             ; --- END LOGICAL OR
1554   0DA5 C0 00 00      cmp b, 0
1555   0DA8 C6 AE 0D      je _if21_else
1556   0DAB             _if21_true:
1557   0DAB             ; ; 
1558   0DAB 0A 00 0E      jmp _if21_exit
1559   0DAE             _if21_else:
1560   0DAE             ; if(*format_p == 'u'); 
1561   0DAE             _if22_cond:
1562   0DAE FA FD FF      lea d, [bp + -3] ; $format_p
1563   0DB1 2A            mov b, [d]
1564   0DB2 38 00 00      mov c, 0
1565   0DB5 74            mov d, b
1566   0DB6 32            mov bl, [d]
1567   0DB7 A7 00         mov bh, 0
1568   0DB9 38 00 00      mov c, 0
1569   0DBC             ; --- START RELATIONAL
1570   0DBC D7            push a
1571   0DBD 11            mov a, b
1572   0DBE FD 2E 75 00   mov32 cb, $00000075
1572   0DC2 00 00 
1573   0DC4 B0            cmp a, b
1574   0DC5 FD 71         seq ; ==
1575   0DC7 E4            pop a
1576   0DC8             ; --- END RELATIONAL
1577   0DC8 C0 00 00      cmp b, 0
1578   0DCB C6 D1 0D      je _if22_else
1579   0DCE             _if22_true:
1580   0DCE             ; ; 
1581   0DCE 0A 00 0E      jmp _if22_exit
1582   0DD1             _if22_else:
1583   0DD1             ; if(*format_p == 'x'); 
1584   0DD1             _if23_cond:
1585   0DD1 FA FD FF      lea d, [bp + -3] ; $format_p
1586   0DD4 2A            mov b, [d]
1587   0DD5 38 00 00      mov c, 0
1588   0DD8 74            mov d, b
1589   0DD9 32            mov bl, [d]
1590   0DDA A7 00         mov bh, 0
1591   0DDC 38 00 00      mov c, 0
1592   0DDF             ; --- START RELATIONAL
1593   0DDF D7            push a
1594   0DE0 11            mov a, b
1595   0DE1 FD 2E 78 00   mov32 cb, $00000078
1595   0DE5 00 00 
1596   0DE7 B0            cmp a, b
1597   0DE8 FD 71         seq ; ==
1598   0DEA E4            pop a
1599   0DEB             ; --- END RELATIONAL
1600   0DEB C0 00 00      cmp b, 0
1601   0DEE C6 F4 0D      je _if23_else
1602   0DF1             _if23_true:
1603   0DF1             ; ; 
1604   0DF1 0A 00 0E      jmp _if23_exit
1605   0DF4             _if23_else:
1606   0DF4             ; err("Unexpected format in printf."); 
1607   0DF4             ; --- START FUNCTION CALL
1608   0DF4 26 19 2E      mov b, _s3 ; "Unexpected format in printf."
1609   0DF7 FD AB         swp b
1610   0DF9 D8            push b
1611   0DFA 07 2A 13      call err
1612   0DFD 51 02 00      add sp, 2
1613   0E00             ; --- END FUNCTION CALL
1614   0E00             _if23_exit:
1615   0E00             _if22_exit:
1616   0E00             _if21_exit:
1617   0E00             ; p = p + 4; 
1618   0E00 FA FF FF      lea d, [bp + -1] ; $p
1619   0E03 DA            push d
1620   0E04 FA FF FF      lea d, [bp + -1] ; $p
1621   0E07 2A            mov b, [d]
1622   0E08 38 00 00      mov c, 0
1623   0E0B             ; --- START TERMS
1624   0E0B D7            push a
1625   0E0C 11            mov a, b
1626   0E0D FD 2E 04 00   mov32 cb, $00000004
1626   0E11 00 00 
1627   0E13 56            add b, a
1628   0E14 E4            pop a
1629   0E15             ; --- END TERMS
1630   0E15 E7            pop d
1631   0E16 FD 43         mov [d], b
1632   0E18             ; break; 
1633   0E18 0A 3D 0F      jmp _switch20_exit ; case break
1634   0E1B             _switch20_case2:
1635   0E1B             _switch20_case3:
1636   0E1B             ; i = scann(); 
1637   0E1B FA FA FF      lea d, [bp + -6] ; $i
1638   0E1E DA            push d
1639   0E1F             ; --- START FUNCTION CALL
1640   0E1F 07 3D 1D      call scann
1641   0E22 E7            pop d
1642   0E23 FD 43         mov [d], b
1643   0E25             ; **(int **)p = i; 
1644   0E25 FA FF FF      lea d, [bp + -1] ; $p
1645   0E28 2A            mov b, [d]
1646   0E29 38 00 00      mov c, 0
1647   0E2C 74            mov d, b
1648   0E2D 2A            mov b, [d]
1649   0E2E D8            push b
1650   0E2F FA FA FF      lea d, [bp + -6] ; $i
1651   0E32 2A            mov b, [d]
1652   0E33 38 00 00      mov c, 0
1653   0E36 E7            pop d
1654   0E37 FD 43         mov [d], b
1655   0E39             ; p = p + 2; 
1656   0E39 FA FF FF      lea d, [bp + -1] ; $p
1657   0E3C DA            push d
1658   0E3D FA FF FF      lea d, [bp + -1] ; $p
1659   0E40 2A            mov b, [d]
1660   0E41 38 00 00      mov c, 0
1661   0E44             ; --- START TERMS
1662   0E44 D7            push a
1663   0E45 11            mov a, b
1664   0E46 FD 2E 02 00   mov32 cb, $00000002
1664   0E4A 00 00 
1665   0E4C 56            add b, a
1666   0E4D E4            pop a
1667   0E4E             ; --- END TERMS
1668   0E4E E7            pop d
1669   0E4F FD 43         mov [d], b
1670   0E51             ; break; 
1671   0E51 0A 3D 0F      jmp _switch20_exit ; case break
1672   0E54             _switch20_case4:
1673   0E54             ; i = scann(); 
1674   0E54 FA FA FF      lea d, [bp + -6] ; $i
1675   0E57 DA            push d
1676   0E58             ; --- START FUNCTION CALL
1677   0E58 07 3D 1D      call scann
1678   0E5B E7            pop d
1679   0E5C FD 43         mov [d], b
1680   0E5E             ; **(int **)p = i; 
1681   0E5E FA FF FF      lea d, [bp + -1] ; $p
1682   0E61 2A            mov b, [d]
1683   0E62 38 00 00      mov c, 0
1684   0E65 74            mov d, b
1685   0E66 2A            mov b, [d]
1686   0E67 D8            push b
1687   0E68 FA FA FF      lea d, [bp + -6] ; $i
1688   0E6B 2A            mov b, [d]
1689   0E6C 38 00 00      mov c, 0
1690   0E6F E7            pop d
1691   0E70 FD 43         mov [d], b
1692   0E72             ; p = p + 2; 
1693   0E72 FA FF FF      lea d, [bp + -1] ; $p
1694   0E75 DA            push d
1695   0E76 FA FF FF      lea d, [bp + -1] ; $p
1696   0E79 2A            mov b, [d]
1697   0E7A 38 00 00      mov c, 0
1698   0E7D             ; --- START TERMS
1699   0E7D D7            push a
1700   0E7E 11            mov a, b
1701   0E7F FD 2E 02 00   mov32 cb, $00000002
1701   0E83 00 00 
1702   0E85 56            add b, a
1703   0E86 E4            pop a
1704   0E87             ; --- END TERMS
1705   0E87 E7            pop d
1706   0E88 FD 43         mov [d], b
1707   0E8A             ; break; 
1708   0E8A 0A 3D 0F      jmp _switch20_exit ; case break
1709   0E8D             _switch20_case5:
1710   0E8D             ; p = p + 2; 
1711   0E8D FA FF FF      lea d, [bp + -1] ; $p
1712   0E90 DA            push d
1713   0E91 FA FF FF      lea d, [bp + -1] ; $p
1714   0E94 2A            mov b, [d]
1715   0E95 38 00 00      mov c, 0
1716   0E98             ; --- START TERMS
1717   0E98 D7            push a
1718   0E99 11            mov a, b
1719   0E9A FD 2E 02 00   mov32 cb, $00000002
1719   0E9E 00 00 
1720   0EA0 56            add b, a
1721   0EA1 E4            pop a
1722   0EA2             ; --- END TERMS
1723   0EA2 E7            pop d
1724   0EA3 FD 43         mov [d], b
1725   0EA5             ; break; 
1726   0EA5 0A 3D 0F      jmp _switch20_exit ; case break
1727   0EA8             _switch20_case6:
1728   0EA8             ; c = getchar(); 
1729   0EA8 FA FC FF      lea d, [bp + -4] ; $c
1730   0EAB DA            push d
1731   0EAC             ; --- START FUNCTION CALL
1732   0EAC 07 24 1D      call getchar
1733   0EAF E7            pop d
1734   0EB0 FD 3E         mov [d], bl
1735   0EB2             ; **(char **)p = *(char *)c; 
1736   0EB2 FA FF FF      lea d, [bp + -1] ; $p
1737   0EB5 2A            mov b, [d]
1738   0EB6 38 00 00      mov c, 0
1739   0EB9 74            mov d, b
1740   0EBA 2A            mov b, [d]
1741   0EBB D8            push b
1742   0EBC FA FC FF      lea d, [bp + -4] ; $c
1743   0EBF 32            mov bl, [d]
1744   0EC0 A7 00         mov bh, 0
1745   0EC2 38 00 00      mov c, 0
1746   0EC5 74            mov d, b
1747   0EC6 32            mov bl, [d]
1748   0EC7 A7 00         mov bh, 0
1749   0EC9 38 00 00      mov c, 0
1750   0ECC E7            pop d
1751   0ECD FD 43         mov [d], b
1752   0ECF             ; p = p + 1; 
1753   0ECF FA FF FF      lea d, [bp + -1] ; $p
1754   0ED2 DA            push d
1755   0ED3 FA FF FF      lea d, [bp + -1] ; $p
1756   0ED6 2A            mov b, [d]
1757   0ED7 38 00 00      mov c, 0
1758   0EDA             ; --- START TERMS
1759   0EDA D7            push a
1760   0EDB 11            mov a, b
1761   0EDC FD 2E 01 00   mov32 cb, $00000001
1761   0EE0 00 00 
1762   0EE2 56            add b, a
1763   0EE3 E4            pop a
1764   0EE4             ; --- END TERMS
1765   0EE4 E7            pop d
1766   0EE5 FD 43         mov [d], b
1767   0EE7             ; break; 
1768   0EE7 0A 3D 0F      jmp _switch20_exit ; case break
1769   0EEA             _switch20_case7:
1770   0EEA             ; gets(input_string); 
1771   0EEA             ; --- START FUNCTION CALL
1772   0EEA FA FA FD      lea d, [bp + -518] ; $input_string
1773   0EED 2D            mov b, d
1774   0EEE 38 00 00      mov c, 0
1775   0EF1 FD AB         swp b
1776   0EF3 D8            push b
1777   0EF4 07 16 15      call gets
1778   0EF7 51 02 00      add sp, 2
1779   0EFA             ; --- END FUNCTION CALL
1780   0EFA             ; strcpy(*(char **)p, input_string); 
1781   0EFA             ; --- START FUNCTION CALL
1782   0EFA FA FA FD      lea d, [bp + -518] ; $input_string
1783   0EFD 2D            mov b, d
1784   0EFE 38 00 00      mov c, 0
1785   0F01 FD AB         swp b
1786   0F03 D8            push b
1787   0F04 FA FF FF      lea d, [bp + -1] ; $p
1788   0F07 2A            mov b, [d]
1789   0F08 38 00 00      mov c, 0
1790   0F0B 74            mov d, b
1791   0F0C 2A            mov b, [d]
1792   0F0D FD AB         swp b
1793   0F0F D8            push b
1794   0F10 07 93 04      call strcpy
1795   0F13 51 04 00      add sp, 4
1796   0F16             ; --- END FUNCTION CALL
1797   0F16             ; p = p + 2; 
1798   0F16 FA FF FF      lea d, [bp + -1] ; $p
1799   0F19 DA            push d
1800   0F1A FA FF FF      lea d, [bp + -1] ; $p
1801   0F1D 2A            mov b, [d]
1802   0F1E 38 00 00      mov c, 0
1803   0F21             ; --- START TERMS
1804   0F21 D7            push a
1805   0F22 11            mov a, b
1806   0F23 FD 2E 02 00   mov32 cb, $00000002
1806   0F27 00 00 
1807   0F29 56            add b, a
1808   0F2A E4            pop a
1809   0F2B             ; --- END TERMS
1810   0F2B E7            pop d
1811   0F2C FD 43         mov [d], b
1812   0F2E             ; break; 
1813   0F2E 0A 3D 0F      jmp _switch20_exit ; case break
1814   0F31             _switch20_default:
1815   0F31             ; print("Error: Unknown argument type.\n"); 
1816   0F31             ; --- START FUNCTION CALL
1817   0F31 26 36 2E      mov b, _s4 ; "Error: Unknown argument type.\n"
1818   0F34 FD AB         swp b
1819   0F36 D8            push b
1820   0F37 07 65 1D      call print
1821   0F3A 51 02 00      add sp, 2
1822   0F3D             ; --- END FUNCTION CALL
1823   0F3D             _switch20_exit:
1824   0F3D             ; format_p++; 
1825   0F3D FA FD FF      lea d, [bp + -3] ; $format_p
1826   0F40 2A            mov b, [d]
1827   0F41 38 00 00      mov c, 0
1828   0F44 FD 77         inc b
1829   0F46 FA FD FF      lea d, [bp + -3] ; $format_p
1830   0F49 FD 3E         mov [d], bl
1831   0F4B FD 7D         dec b
1832   0F4D 0A 75 0F      jmp _if19_exit
1833   0F50             _if19_else:
1834   0F50             ; putchar(*format_p); 
1835   0F50             ; --- START FUNCTION CALL
1836   0F50 FA FD FF      lea d, [bp + -3] ; $format_p
1837   0F53 2A            mov b, [d]
1838   0F54 38 00 00      mov c, 0
1839   0F57 74            mov d, b
1840   0F58 32            mov bl, [d]
1841   0F59 A7 00         mov bh, 0
1842   0F5B 38 00 00      mov c, 0
1843   0F5E DD            push bl
1844   0F5F 07 17 1D      call putchar
1845   0F62 51 01 00      add sp, 1
1846   0F65             ; --- END FUNCTION CALL
1847   0F65             ; format_p++; 
1848   0F65 FA FD FF      lea d, [bp + -3] ; $format_p
1849   0F68 2A            mov b, [d]
1850   0F69 38 00 00      mov c, 0
1851   0F6C FD 77         inc b
1852   0F6E FA FD FF      lea d, [bp + -3] ; $format_p
1853   0F71 FD 3E         mov [d], bl
1854   0F73 FD 7D         dec b
1855   0F75             _if19_exit:
1856   0F75             _if18_exit:
1857   0F75             _for17_update:
1858   0F75 0A D1 0C      jmp _for17_cond
1859   0F78             _for17_exit:
1860   0F78 F9            leave
1861   0F79 09            ret
1862   0F7A             
1863   0F7A             sprintf:
1864   0F7A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1865   0F7D             ; char *p, *format_p; 
1866   0F7D 52 02 00      sub sp, 2
1867   0F80 52 02 00      sub sp, 2
1868   0F83             ; char *sp; 
1869   0F83 52 02 00      sub sp, 2
1870   0F86             ; sp = dest; 
1871   0F86 FA FB FF      lea d, [bp + -5] ; $sp
1872   0F89 DA            push d
1873   0F8A FA 05 00      lea d, [bp + 5] ; $dest
1874   0F8D 2A            mov b, [d]
1875   0F8E 38 00 00      mov c, 0
1876   0F91 E7            pop d
1877   0F92 FD 43         mov [d], b
1878   0F94             ; format_p = format; 
1879   0F94 FA FD FF      lea d, [bp + -3] ; $format_p
1880   0F97 DA            push d
1881   0F98 FA 07 00      lea d, [bp + 7] ; $format
1882   0F9B 2A            mov b, [d]
1883   0F9C 38 00 00      mov c, 0
1884   0F9F E7            pop d
1885   0FA0 FD 43         mov [d], b
1886   0FA2             ; p = &format + 2; 
1887   0FA2 FA FF FF      lea d, [bp + -1] ; $p
1888   0FA5 DA            push d
1889   0FA6 FA 07 00      lea d, [bp + 7] ; $format
1890   0FA9 2D            mov b, d
1891   0FAA             ; --- START TERMS
1892   0FAA D7            push a
1893   0FAB 11            mov a, b
1894   0FAC FD 2E 02 00   mov32 cb, $00000002
1894   0FB0 00 00 
1895   0FB2 56            add b, a
1896   0FB3 E4            pop a
1897   0FB4             ; --- END TERMS
1898   0FB4 E7            pop d
1899   0FB5 FD 43         mov [d], b
1900   0FB7             ; for(;;){ 
1901   0FB7             _for24_init:
1902   0FB7             _for24_cond:
1903   0FB7             _for24_block:
1904   0FB7             ; if(!*format_p) break; 
1905   0FB7             _if25_cond:
1906   0FB7 FA FD FF      lea d, [bp + -3] ; $format_p
1907   0FBA 2A            mov b, [d]
1908   0FBB 38 00 00      mov c, 0
1909   0FBE 74            mov d, b
1910   0FBF 32            mov bl, [d]
1911   0FC0 A7 00         mov bh, 0
1912   0FC2 38 00 00      mov c, 0
1913   0FC5 C0 00 00      cmp b, 0
1914   0FC8 FD 71         seq ; !
1915   0FCA C0 00 00      cmp b, 0
1916   0FCD C6 D6 0F      je _if25_else
1917   0FD0             _if25_true:
1918   0FD0             ; break; 
1919   0FD0 0A 04 13      jmp _for24_exit ; for break
1920   0FD3 0A 01 13      jmp _if25_exit
1921   0FD6             _if25_else:
1922   0FD6             ; if(*format_p == '%'){ 
1923   0FD6             _if26_cond:
1924   0FD6 FA FD FF      lea d, [bp + -3] ; $format_p
1925   0FD9 2A            mov b, [d]
1926   0FDA 38 00 00      mov c, 0
1927   0FDD 74            mov d, b
1928   0FDE 32            mov bl, [d]
1929   0FDF A7 00         mov bh, 0
1930   0FE1 38 00 00      mov c, 0
1931   0FE4             ; --- START RELATIONAL
1932   0FE4 D7            push a
1933   0FE5 11            mov a, b
1934   0FE6 FD 2E 25 00   mov32 cb, $00000025
1934   0FEA 00 00 
1935   0FEC B0            cmp a, b
1936   0FED FD 71         seq ; ==
1937   0FEF E4            pop a
1938   0FF0             ; --- END RELATIONAL
1939   0FF0 C0 00 00      cmp b, 0
1940   0FF3 C6 D6 12      je _if26_else
1941   0FF6             _if26_true:
1942   0FF6             ; format_p++; 
1943   0FF6 FA FD FF      lea d, [bp + -3] ; $format_p
1944   0FF9 2A            mov b, [d]
1945   0FFA 38 00 00      mov c, 0
1946   0FFD FD 77         inc b
1947   0FFF FA FD FF      lea d, [bp + -3] ; $format_p
1948   1002 FD 3E         mov [d], bl
1949   1004 FD 7D         dec b
1950   1006             ; switch(*format_p){ 
1951   1006             _switch27_expr:
1952   1006 FA FD FF      lea d, [bp + -3] ; $format_p
1953   1009 2A            mov b, [d]
1954   100A 38 00 00      mov c, 0
1955   100D 74            mov d, b
1956   100E 32            mov bl, [d]
1957   100F A7 00         mov bh, 0
1958   1011 38 00 00      mov c, 0
1959   1014             _switch27_comparisons:
1960   1014 C1 6C         cmp bl, $6c
1961   1016 C6 42 10      je _switch27_case0
1962   1019 C1 4C         cmp bl, $4c
1963   101B C6 42 10      je _switch27_case1
1964   101E C1 64         cmp bl, $64
1965   1020 C6 52 11      je _switch27_case2
1966   1023 C1 69         cmp bl, $69
1967   1025 C6 52 11      je _switch27_case3
1968   1028 C1 75         cmp bl, $75
1969   102A C6 9E 11      je _switch27_case4
1970   102D C1 78         cmp bl, $78
1971   102F C6 EA 11      je _switch27_case5
1972   1032 C1 63         cmp bl, $63
1973   1034 C6 0E 12      je _switch27_case6
1974   1037 C1 73         cmp bl, $73
1975   1039 C6 4B 12      je _switch27_case7
1976   103C 0A B7 12      jmp _switch27_default
1977   103F 0A C3 12      jmp _switch27_exit
1978   1042             _switch27_case0:
1979   1042             _switch27_case1:
1980   1042             ; format_p++; 
1981   1042 FA FD FF      lea d, [bp + -3] ; $format_p
1982   1045 2A            mov b, [d]
1983   1046 38 00 00      mov c, 0
1984   1049 FD 77         inc b
1985   104B FA FD FF      lea d, [bp + -3] ; $format_p
1986   104E FD 3E         mov [d], bl
1987   1050 FD 7D         dec b
1988   1052             ; if(*format_p == 'd' || *format_p == 'i') 
1989   1052             _if28_cond:
1990   1052 FA FD FF      lea d, [bp + -3] ; $format_p
1991   1055 2A            mov b, [d]
1992   1056 38 00 00      mov c, 0
1993   1059 74            mov d, b
1994   105A 32            mov bl, [d]
1995   105B A7 00         mov bh, 0
1996   105D 38 00 00      mov c, 0
1997   1060             ; --- START RELATIONAL
1998   1060 D7            push a
1999   1061 11            mov a, b
2000   1062 FD 2E 64 00   mov32 cb, $00000064
2000   1066 00 00 
2001   1068 B0            cmp a, b
2002   1069 FD 71         seq ; ==
2003   106B E4            pop a
2004   106C             ; --- END RELATIONAL
2005   106C             ; --- START LOGICAL OR
2006   106C D7            push a
2007   106D 11            mov a, b
2008   106E FA FD FF      lea d, [bp + -3] ; $format_p
2009   1071 2A            mov b, [d]
2010   1072 38 00 00      mov c, 0
2011   1075 74            mov d, b
2012   1076 32            mov bl, [d]
2013   1077 A7 00         mov bh, 0
2014   1079 38 00 00      mov c, 0
2015   107C             ; --- START RELATIONAL
2016   107C D7            push a
2017   107D 11            mov a, b
2018   107E FD 2E 69 00   mov32 cb, $00000069
2018   1082 00 00 
2019   1084 B0            cmp a, b
2020   1085 FD 71         seq ; ==
2021   1087 E4            pop a
2022   1088             ; --- END RELATIONAL
2023   1088 FD A8         sor a, b ; ||
2024   108A E4            pop a
2025   108B             ; --- END LOGICAL OR
2026   108B C0 00 00      cmp b, 0
2027   108E C6 AF 10      je _if28_else
2028   1091             _if28_true:
2029   1091             ; print_signed_long(*(long *)p); 
2030   1091             ; --- START FUNCTION CALL
2031   1091 FA FF FF      lea d, [bp + -1] ; $p
2032   1094 2A            mov b, [d]
2033   1095 38 00 00      mov c, 0
2034   1098 74            mov d, b
2035   1099 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2036   109C FD 39         mov c, b ; And place it into C
2037   109E 2A            mov b, [d] ; Lower Word in B
2038   109F 12            mov a, c
2039   10A0 FD AA         swp a
2040   10A2 D7            push a
2041   10A3 FD AB         swp b
2042   10A5 D8            push b
2043   10A6 07 6C 16      call print_signed_long
2044   10A9 51 04 00      add sp, 4
2045   10AC             ; --- END FUNCTION CALL
2046   10AC 0A 37 11      jmp _if28_exit
2047   10AF             _if28_else:
2048   10AF             ; if(*format_p == 'u') 
2049   10AF             _if29_cond:
2050   10AF FA FD FF      lea d, [bp + -3] ; $format_p
2051   10B2 2A            mov b, [d]
2052   10B3 38 00 00      mov c, 0
2053   10B6 74            mov d, b
2054   10B7 32            mov bl, [d]
2055   10B8 A7 00         mov bh, 0
2056   10BA 38 00 00      mov c, 0
2057   10BD             ; --- START RELATIONAL
2058   10BD D7            push a
2059   10BE 11            mov a, b
2060   10BF FD 2E 75 00   mov32 cb, $00000075
2060   10C3 00 00 
2061   10C5 B0            cmp a, b
2062   10C6 FD 71         seq ; ==
2063   10C8 E4            pop a
2064   10C9             ; --- END RELATIONAL
2065   10C9 C0 00 00      cmp b, 0
2066   10CC C6 ED 10      je _if29_else
2067   10CF             _if29_true:
2068   10CF             ; print_unsigned_long(*(unsigned long *)p); 
2069   10CF             ; --- START FUNCTION CALL
2070   10CF FA FF FF      lea d, [bp + -1] ; $p
2071   10D2 2A            mov b, [d]
2072   10D3 38 00 00      mov c, 0
2073   10D6 74            mov d, b
2074   10D7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2075   10DA FD 39         mov c, b ; And place it into C
2076   10DC 2A            mov b, [d] ; Lower Word in B
2077   10DD 12            mov a, c
2078   10DE FD AA         swp a
2079   10E0 D7            push a
2080   10E1 FD AB         swp b
2081   10E3 D8            push b
2082   10E4 07 DB 17      call print_unsigned_long
2083   10E7 51 04 00      add sp, 4
2084   10EA             ; --- END FUNCTION CALL
2085   10EA 0A 37 11      jmp _if29_exit
2086   10ED             _if29_else:
2087   10ED             ; if(*format_p == 'x') 
2088   10ED             _if30_cond:
2089   10ED FA FD FF      lea d, [bp + -3] ; $format_p
2090   10F0 2A            mov b, [d]
2091   10F1 38 00 00      mov c, 0
2092   10F4 74            mov d, b
2093   10F5 32            mov bl, [d]
2094   10F6 A7 00         mov bh, 0
2095   10F8 38 00 00      mov c, 0
2096   10FB             ; --- START RELATIONAL
2097   10FB D7            push a
2098   10FC 11            mov a, b
2099   10FD FD 2E 78 00   mov32 cb, $00000078
2099   1101 00 00 
2100   1103 B0            cmp a, b
2101   1104 FD 71         seq ; ==
2102   1106 E4            pop a
2103   1107             ; --- END RELATIONAL
2104   1107 C0 00 00      cmp b, 0
2105   110A C6 2B 11      je _if30_else
2106   110D             _if30_true:
2107   110D             ; printx32(*(long int *)p); 
2108   110D             ; --- START FUNCTION CALL
2109   110D FA FF FF      lea d, [bp + -1] ; $p
2110   1110 2A            mov b, [d]
2111   1111 38 00 00      mov c, 0
2112   1114 74            mov d, b
2113   1115 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2114   1118 FD 39         mov c, b ; And place it into C
2115   111A 2A            mov b, [d] ; Lower Word in B
2116   111B 12            mov a, c
2117   111C FD AA         swp a
2118   111E D7            push a
2119   111F FD AB         swp b
2120   1121 D8            push b
2121   1122 07 3F 13      call printx32
2122   1125 51 04 00      add sp, 4
2123   1128             ; --- END FUNCTION CALL
2124   1128 0A 37 11      jmp _if30_exit
2125   112B             _if30_else:
2126   112B             ; err("Unexpected format in printf."); 
2127   112B             ; --- START FUNCTION CALL
2128   112B 26 19 2E      mov b, _s3 ; "Unexpected format in printf."
2129   112E FD AB         swp b
2130   1130 D8            push b
2131   1131 07 2A 13      call err
2132   1134 51 02 00      add sp, 2
2133   1137             ; --- END FUNCTION CALL
2134   1137             _if30_exit:
2135   1137             _if29_exit:
2136   1137             _if28_exit:
2137   1137             ; p = p + 4; 
2138   1137 FA FF FF      lea d, [bp + -1] ; $p
2139   113A DA            push d
2140   113B FA FF FF      lea d, [bp + -1] ; $p
2141   113E 2A            mov b, [d]
2142   113F 38 00 00      mov c, 0
2143   1142             ; --- START TERMS
2144   1142 D7            push a
2145   1143 11            mov a, b
2146   1144 FD 2E 04 00   mov32 cb, $00000004
2146   1148 00 00 
2147   114A 56            add b, a
2148   114B E4            pop a
2149   114C             ; --- END TERMS
2150   114C E7            pop d
2151   114D FD 43         mov [d], b
2152   114F             ; break; 
2153   114F 0A C3 12      jmp _switch27_exit ; case break
2154   1152             _switch27_case2:
2155   1152             _switch27_case3:
2156   1152             ; sp = sp + sprint_signed(sp, *(int*)p); 
2157   1152 FA FB FF      lea d, [bp + -5] ; $sp
2158   1155 DA            push d
2159   1156 FA FB FF      lea d, [bp + -5] ; $sp
2160   1159 2A            mov b, [d]
2161   115A 38 00 00      mov c, 0
2162   115D             ; --- START TERMS
2163   115D D7            push a
2164   115E 11            mov a, b
2165   115F             ; --- START FUNCTION CALL
2166   115F FA FF FF      lea d, [bp + -1] ; $p
2167   1162 2A            mov b, [d]
2168   1163 38 00 00      mov c, 0
2169   1166 74            mov d, b
2170   1167 2A            mov b, [d]
2171   1168 38 00 00      mov c, 0
2172   116B FD AB         swp b
2173   116D D8            push b
2174   116E FA FB FF      lea d, [bp + -5] ; $sp
2175   1171 2A            mov b, [d]
2176   1172 38 00 00      mov c, 0
2177   1175 FD AB         swp b
2178   1177 D8            push b
2179   1178 07 4F 1B      call sprint_signed
2180   117B 51 04 00      add sp, 4
2181   117E             ; --- END FUNCTION CALL
2182   117E 56            add b, a
2183   117F E4            pop a
2184   1180             ; --- END TERMS
2185   1180 E7            pop d
2186   1181 FD 43         mov [d], b
2187   1183             ; p = p + 2; 
2188   1183 FA FF FF      lea d, [bp + -1] ; $p
2189   1186 DA            push d
2190   1187 FA FF FF      lea d, [bp + -1] ; $p
2191   118A 2A            mov b, [d]
2192   118B 38 00 00      mov c, 0
2193   118E             ; --- START TERMS
2194   118E D7            push a
2195   118F 11            mov a, b
2196   1190 FD 2E 02 00   mov32 cb, $00000002
2196   1194 00 00 
2197   1196 56            add b, a
2198   1197 E4            pop a
2199   1198             ; --- END TERMS
2200   1198 E7            pop d
2201   1199 FD 43         mov [d], b
2202   119B             ; break; 
2203   119B 0A C3 12      jmp _switch27_exit ; case break
2204   119E             _switch27_case4:
2205   119E             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
2206   119E FA FB FF      lea d, [bp + -5] ; $sp
2207   11A1 DA            push d
2208   11A2 FA FB FF      lea d, [bp + -5] ; $sp
2209   11A5 2A            mov b, [d]
2210   11A6 38 00 00      mov c, 0
2211   11A9             ; --- START TERMS
2212   11A9 D7            push a
2213   11AA 11            mov a, b
2214   11AB             ; --- START FUNCTION CALL
2215   11AB FA FF FF      lea d, [bp + -1] ; $p
2216   11AE 2A            mov b, [d]
2217   11AF 38 00 00      mov c, 0
2218   11B2 74            mov d, b
2219   11B3 2A            mov b, [d]
2220   11B4 38 00 00      mov c, 0
2221   11B7 FD AB         swp b
2222   11B9 D8            push b
2223   11BA FA FB FF      lea d, [bp + -5] ; $sp
2224   11BD 2A            mov b, [d]
2225   11BE 38 00 00      mov c, 0
2226   11C1 FD AB         swp b
2227   11C3 D8            push b
2228   11C4 07 F7 18      call sprint_unsigned
2229   11C7 51 04 00      add sp, 4
2230   11CA             ; --- END FUNCTION CALL
2231   11CA 56            add b, a
2232   11CB E4            pop a
2233   11CC             ; --- END TERMS
2234   11CC E7            pop d
2235   11CD FD 43         mov [d], b
2236   11CF             ; p = p + 2; 
2237   11CF FA FF FF      lea d, [bp + -1] ; $p
2238   11D2 DA            push d
2239   11D3 FA FF FF      lea d, [bp + -1] ; $p
2240   11D6 2A            mov b, [d]
2241   11D7 38 00 00      mov c, 0
2242   11DA             ; --- START TERMS
2243   11DA D7            push a
2244   11DB 11            mov a, b
2245   11DC FD 2E 02 00   mov32 cb, $00000002
2245   11E0 00 00 
2246   11E2 56            add b, a
2247   11E3 E4            pop a
2248   11E4             ; --- END TERMS
2249   11E4 E7            pop d
2250   11E5 FD 43         mov [d], b
2251   11E7             ; break; 
2252   11E7 0A C3 12      jmp _switch27_exit ; case break
2253   11EA             _switch27_case5:
2254   11EA             
2255   11EA             ; --- BEGIN INLINE ASM SEGMENT
2256   11EA FA FF FF      lea d, [bp + -1] ; $p
2257   11ED FD 2A         mov d, [d]
2258   11EF 2A            mov b, [d]
2259   11F0 07 C8 20      call print_u16x
2260   11F3             ; --- END INLINE ASM SEGMENT
2261   11F3             
2262   11F3             ; p = p + 2; 
2263   11F3 FA FF FF      lea d, [bp + -1] ; $p
2264   11F6 DA            push d
2265   11F7 FA FF FF      lea d, [bp + -1] ; $p
2266   11FA 2A            mov b, [d]
2267   11FB 38 00 00      mov c, 0
2268   11FE             ; --- START TERMS
2269   11FE D7            push a
2270   11FF 11            mov a, b
2271   1200 FD 2E 02 00   mov32 cb, $00000002
2271   1204 00 00 
2272   1206 56            add b, a
2273   1207 E4            pop a
2274   1208             ; --- END TERMS
2275   1208 E7            pop d
2276   1209 FD 43         mov [d], b
2277   120B             ; break; 
2278   120B 0A C3 12      jmp _switch27_exit ; case break
2279   120E             _switch27_case6:
2280   120E             ; *sp++ = *(char *)p; 
2281   120E FA FB FF      lea d, [bp + -5] ; $sp
2282   1211 2A            mov b, [d]
2283   1212 38 00 00      mov c, 0
2284   1215 FD 77         inc b
2285   1217 FA FB FF      lea d, [bp + -5] ; $sp
2286   121A FD 3E         mov [d], bl
2287   121C FD 7D         dec b
2288   121E D8            push b
2289   121F FA FF FF      lea d, [bp + -1] ; $p
2290   1222 2A            mov b, [d]
2291   1223 38 00 00      mov c, 0
2292   1226 74            mov d, b
2293   1227 32            mov bl, [d]
2294   1228 A7 00         mov bh, 0
2295   122A 38 00 00      mov c, 0
2296   122D E7            pop d
2297   122E FD 3E         mov [d], bl
2298   1230             ; p = p + 1; 
2299   1230 FA FF FF      lea d, [bp + -1] ; $p
2300   1233 DA            push d
2301   1234 FA FF FF      lea d, [bp + -1] ; $p
2302   1237 2A            mov b, [d]
2303   1238 38 00 00      mov c, 0
2304   123B             ; --- START TERMS
2305   123B D7            push a
2306   123C 11            mov a, b
2307   123D FD 2E 01 00   mov32 cb, $00000001
2307   1241 00 00 
2308   1243 56            add b, a
2309   1244 E4            pop a
2310   1245             ; --- END TERMS
2311   1245 E7            pop d
2312   1246 FD 43         mov [d], b
2313   1248             ; break; 
2314   1248 0A C3 12      jmp _switch27_exit ; case break
2315   124B             _switch27_case7:
2316   124B             ; int len = strlen(*(char **)p); 
2317   124B 52 02 00      sub sp, 2
2318   124E             ; --- START LOCAL VAR INITIALIZATION
2319   124E FA F9 FF      lea d, [bp + -7] ; $len
2320   1251 DA            push d
2321   1252             ; --- START FUNCTION CALL
2322   1252 FA FF FF      lea d, [bp + -1] ; $p
2323   1255 2A            mov b, [d]
2324   1256 38 00 00      mov c, 0
2325   1259 74            mov d, b
2326   125A 2A            mov b, [d]
2327   125B FD AB         swp b
2328   125D D8            push b
2329   125E 07 79 06      call strlen
2330   1261 51 02 00      add sp, 2
2331   1264             ; --- END FUNCTION CALL
2332   1264 E7            pop d
2333   1265 FD 43         mov [d], b
2334   1267             ; --- END LOCAL VAR INITIALIZATION
2335   1267             ; strcpy(sp, *(char **)p); 
2336   1267             ; --- START FUNCTION CALL
2337   1267 FA FF FF      lea d, [bp + -1] ; $p
2338   126A 2A            mov b, [d]
2339   126B 38 00 00      mov c, 0
2340   126E 74            mov d, b
2341   126F 2A            mov b, [d]
2342   1270 FD AB         swp b
2343   1272 D8            push b
2344   1273 FA FB FF      lea d, [bp + -5] ; $sp
2345   1276 2A            mov b, [d]
2346   1277 38 00 00      mov c, 0
2347   127A FD AB         swp b
2348   127C D8            push b
2349   127D 07 93 04      call strcpy
2350   1280 51 04 00      add sp, 4
2351   1283             ; --- END FUNCTION CALL
2352   1283             ; sp = sp + len; 
2353   1283 FA FB FF      lea d, [bp + -5] ; $sp
2354   1286 DA            push d
2355   1287 FA FB FF      lea d, [bp + -5] ; $sp
2356   128A 2A            mov b, [d]
2357   128B 38 00 00      mov c, 0
2358   128E             ; --- START TERMS
2359   128E D7            push a
2360   128F 11            mov a, b
2361   1290 FA F9 FF      lea d, [bp + -7] ; $len
2362   1293 2A            mov b, [d]
2363   1294 38 00 00      mov c, 0
2364   1297 56            add b, a
2365   1298 E4            pop a
2366   1299             ; --- END TERMS
2367   1299 E7            pop d
2368   129A FD 43         mov [d], b
2369   129C             ; p = p + 2; 
2370   129C FA FF FF      lea d, [bp + -1] ; $p
2371   129F DA            push d
2372   12A0 FA FF FF      lea d, [bp + -1] ; $p
2373   12A3 2A            mov b, [d]
2374   12A4 38 00 00      mov c, 0
2375   12A7             ; --- START TERMS
2376   12A7 D7            push a
2377   12A8 11            mov a, b
2378   12A9 FD 2E 02 00   mov32 cb, $00000002
2378   12AD 00 00 
2379   12AF 56            add b, a
2380   12B0 E4            pop a
2381   12B1             ; --- END TERMS
2382   12B1 E7            pop d
2383   12B2 FD 43         mov [d], b
2384   12B4             ; break; 
2385   12B4 0A C3 12      jmp _switch27_exit ; case break
2386   12B7             _switch27_default:
2387   12B7             ; print("Error: Unknown argument type.\n"); 
2388   12B7             ; --- START FUNCTION CALL
2389   12B7 26 36 2E      mov b, _s4 ; "Error: Unknown argument type.\n"
2390   12BA FD AB         swp b
2391   12BC D8            push b
2392   12BD 07 65 1D      call print
2393   12C0 51 02 00      add sp, 2
2394   12C3             ; --- END FUNCTION CALL
2395   12C3             _switch27_exit:
2396   12C3             ; format_p++; 
2397   12C3 FA FD FF      lea d, [bp + -3] ; $format_p
2398   12C6 2A            mov b, [d]
2399   12C7 38 00 00      mov c, 0
2400   12CA FD 77         inc b
2401   12CC FA FD FF      lea d, [bp + -3] ; $format_p
2402   12CF FD 3E         mov [d], bl
2403   12D1 FD 7D         dec b
2404   12D3 0A 01 13      jmp _if26_exit
2405   12D6             _if26_else:
2406   12D6             ; *sp++ = *format_p++; 
2407   12D6 FA FB FF      lea d, [bp + -5] ; $sp
2408   12D9 2A            mov b, [d]
2409   12DA 38 00 00      mov c, 0
2410   12DD FD 77         inc b
2411   12DF FA FB FF      lea d, [bp + -5] ; $sp
2412   12E2 FD 3E         mov [d], bl
2413   12E4 FD 7D         dec b
2414   12E6 D8            push b
2415   12E7 FA FD FF      lea d, [bp + -3] ; $format_p
2416   12EA 2A            mov b, [d]
2417   12EB 38 00 00      mov c, 0
2418   12EE FD 77         inc b
2419   12F0 FA FD FF      lea d, [bp + -3] ; $format_p
2420   12F3 FD 3E         mov [d], bl
2421   12F5 FD 7D         dec b
2422   12F7 74            mov d, b
2423   12F8 32            mov bl, [d]
2424   12F9 A7 00         mov bh, 0
2425   12FB 38 00 00      mov c, 0
2426   12FE E7            pop d
2427   12FF FD 3E         mov [d], bl
2428   1301             _if26_exit:
2429   1301             _if25_exit:
2430   1301             _for24_update:
2431   1301 0A B7 0F      jmp _for24_cond
2432   1304             _for24_exit:
2433   1304             ; *sp = '\0'; 
2434   1304 FA FB FF      lea d, [bp + -5] ; $sp
2435   1307 2A            mov b, [d]
2436   1308 38 00 00      mov c, 0
2437   130B D8            push b
2438   130C FD 2E 00 00   mov32 cb, $00000000
2438   1310 00 00 
2439   1312 E7            pop d
2440   1313 FD 3E         mov [d], bl
2441   1315             ; return sp - dest; // return total number of chars written 
2442   1315 FA FB FF      lea d, [bp + -5] ; $sp
2443   1318 2A            mov b, [d]
2444   1319 38 00 00      mov c, 0
2445   131C             ; --- START TERMS
2446   131C D7            push a
2447   131D 11            mov a, b
2448   131E FA 05 00      lea d, [bp + 5] ; $dest
2449   1321 2A            mov b, [d]
2450   1322 38 00 00      mov c, 0
2451   1325 60            sub a, b
2452   1326 27            mov b, a
2453   1327 E4            pop a
2454   1328             ; --- END TERMS
2455   1328 F9            leave
2456   1329 09            ret
2457   132A             
2458   132A             err:
2459   132A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2460   132D             ; print(e); 
2461   132D             ; --- START FUNCTION CALL
2462   132D FA 05 00      lea d, [bp + 5] ; $e
2463   1330 2A            mov b, [d]
2464   1331 38 00 00      mov c, 0
2465   1334 FD AB         swp b
2466   1336 D8            push b
2467   1337 07 65 1D      call print
2468   133A 51 02 00      add sp, 2
2469   133D             ; --- END FUNCTION CALL
2470   133D F9            leave
2471   133E 09            ret
2472   133F             
2473   133F             printx32:
2474   133F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2475   1342             
2476   1342             ; --- BEGIN INLINE ASM SEGMENT
2477   1342 FA 05 00      lea d, [bp + 5] ; $hex
2478   1345 2B 02 00      mov b, [d+2]
2479   1348 07 C8 20      call print_u16x
2480   134B 2A            mov b, [d]
2481   134C 07 C8 20      call print_u16x
2482   134F             ; --- END INLINE ASM SEGMENT
2483   134F             
2484   134F F9            leave
2485   1350 09            ret
2486   1351             
2487   1351             printx16:
2488   1351 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2489   1354             
2490   1354             ; --- BEGIN INLINE ASM SEGMENT
2491   1354 FA 05 00      lea d, [bp + 5] ; $hex
2492   1357 2A            mov b, [d]
2493   1358 07 C8 20      call print_u16x
2494   135B             ; --- END INLINE ASM SEGMENT
2495   135B             
2496   135B F9            leave
2497   135C 09            ret
2498   135D             
2499   135D             printx8:
2500   135D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2501   1360             
2502   1360             ; --- BEGIN INLINE ASM SEGMENT
2503   1360 FA 05 00      lea d, [bp + 5] ; $hex
2504   1363 32            mov bl, [d]
2505   1364 07 0C 21      call print_u8x
2506   1367             ; --- END INLINE ASM SEGMENT
2507   1367             
2508   1367 F9            leave
2509   1368 09            ret
2510   1369             
2511   1369             hex_str_to_int:
2512   1369 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2513   136C             ; int value = 0; 
2514   136C 52 02 00      sub sp, 2
2515   136F             ; --- START LOCAL VAR INITIALIZATION
2516   136F FA FF FF      lea d, [bp + -1] ; $value
2517   1372 DA            push d
2518   1373 FD 2E 00 00   mov32 cb, $00000000
2518   1377 00 00 
2519   1379 E7            pop d
2520   137A FD 43         mov [d], b
2521   137C             ; --- END LOCAL VAR INITIALIZATION
2522   137C             ; int i; 
2523   137C 52 02 00      sub sp, 2
2524   137F             ; char hex_char; 
2525   137F 52 01 00      sub sp, 1
2526   1382             ; int len; 
2527   1382 52 02 00      sub sp, 2
2528   1385             ; len = strlen(hex_string); 
2529   1385 FA FA FF      lea d, [bp + -6] ; $len
2530   1388 DA            push d
2531   1389             ; --- START FUNCTION CALL
2532   1389 FA 05 00      lea d, [bp + 5] ; $hex_string
2533   138C 2A            mov b, [d]
2534   138D 38 00 00      mov c, 0
2535   1390 FD AB         swp b
2536   1392 D8            push b
2537   1393 07 79 06      call strlen
2538   1396 51 02 00      add sp, 2
2539   1399             ; --- END FUNCTION CALL
2540   1399 E7            pop d
2541   139A FD 43         mov [d], b
2542   139C             ; for (i = 0; i < len; i++) { 
2543   139C             _for31_init:
2544   139C FA FD FF      lea d, [bp + -3] ; $i
2545   139F DA            push d
2546   13A0 FD 2E 00 00   mov32 cb, $00000000
2546   13A4 00 00 
2547   13A6 E7            pop d
2548   13A7 FD 43         mov [d], b
2549   13A9             _for31_cond:
2550   13A9 FA FD FF      lea d, [bp + -3] ; $i
2551   13AC 2A            mov b, [d]
2552   13AD 38 00 00      mov c, 0
2553   13B0             ; --- START RELATIONAL
2554   13B0 D7            push a
2555   13B1 11            mov a, b
2556   13B2 FA FA FF      lea d, [bp + -6] ; $len
2557   13B5 2A            mov b, [d]
2558   13B6 38 00 00      mov c, 0
2559   13B9 B0            cmp a, b
2560   13BA FD 73         slt ; < (signed)
2561   13BC E4            pop a
2562   13BD             ; --- END RELATIONAL
2563   13BD C0 00 00      cmp b, 0
2564   13C0 C6 0D 15      je _for31_exit
2565   13C3             _for31_block:
2566   13C3             ; hex_char = hex_string[i]; 
2567   13C3 FA FC FF      lea d, [bp + -4] ; $hex_char
2568   13C6 DA            push d
2569   13C7 FA 05 00      lea d, [bp + 5] ; $hex_string
2570   13CA FD 2A         mov d, [d]
2571   13CC D7            push a
2572   13CD DA            push d
2573   13CE FA FD FF      lea d, [bp + -3] ; $i
2574   13D1 2A            mov b, [d]
2575   13D2 38 00 00      mov c, 0
2576   13D5 E7            pop d
2577   13D6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2578   13DA E4            pop a
2579   13DB 32            mov bl, [d]
2580   13DC A7 00         mov bh, 0
2581   13DE 38 00 00      mov c, 0
2582   13E1 E7            pop d
2583   13E2 FD 3E         mov [d], bl
2584   13E4             ; if (hex_char >= 'a' && hex_char <= 'f')  
2585   13E4             _if32_cond:
2586   13E4 FA FC FF      lea d, [bp + -4] ; $hex_char
2587   13E7 32            mov bl, [d]
2588   13E8 A7 00         mov bh, 0
2589   13EA 38 00 00      mov c, 0
2590   13ED             ; --- START RELATIONAL
2591   13ED D7            push a
2592   13EE 11            mov a, b
2593   13EF FD 2E 61 00   mov32 cb, $00000061
2593   13F3 00 00 
2594   13F5 B0            cmp a, b
2595   13F6 FD 80         sge ; >=
2596   13F8 E4            pop a
2597   13F9             ; --- END RELATIONAL
2598   13F9             ; --- START LOGICAL AND
2599   13F9 D7            push a
2600   13FA 11            mov a, b
2601   13FB FA FC FF      lea d, [bp + -4] ; $hex_char
2602   13FE 32            mov bl, [d]
2603   13FF A7 00         mov bh, 0
2604   1401 38 00 00      mov c, 0
2605   1404             ; --- START RELATIONAL
2606   1404 D7            push a
2607   1405 11            mov a, b
2608   1406 FD 2E 66 00   mov32 cb, $00000066
2608   140A 00 00 
2609   140C B0            cmp a, b
2610   140D FD 74         sle ; <= (signed)
2611   140F E4            pop a
2612   1410             ; --- END RELATIONAL
2613   1410 FD A7         sand a, b
2614   1412 E4            pop a
2615   1413             ; --- END LOGICAL AND
2616   1413 C0 00 00      cmp b, 0
2617   1416 C6 56 14      je _if32_else
2618   1419             _if32_true:
2619   1419             ; value = (value * 16) + (hex_char - 'a' + 10); 
2620   1419 FA FF FF      lea d, [bp + -1] ; $value
2621   141C DA            push d
2622   141D FA FF FF      lea d, [bp + -1] ; $value
2623   1420 2A            mov b, [d]
2624   1421 38 00 00      mov c, 0
2625   1424             ; --- START FACTORS
2626   1424 D7            push a
2627   1425 11            mov a, b
2628   1426 FD 2E 10 00   mov32 cb, $00000010
2628   142A 00 00 
2629   142C AC            mul a, b ; *
2630   142D 11            mov a, b
2631   142E 27            mov b, a
2632   142F E4            pop a
2633   1430             ; --- END FACTORS
2634   1430             ; --- START TERMS
2635   1430 D7            push a
2636   1431 11            mov a, b
2637   1432 FA FC FF      lea d, [bp + -4] ; $hex_char
2638   1435 32            mov bl, [d]
2639   1436 A7 00         mov bh, 0
2640   1438 38 00 00      mov c, 0
2641   143B             ; --- START TERMS
2642   143B D7            push a
2643   143C 11            mov a, b
2644   143D FD 2E 61 00   mov32 cb, $00000061
2644   1441 00 00 
2645   1443 60            sub a, b
2646   1444 27            mov b, a
2647   1445 11            mov a, b
2648   1446 FD 2E 0A 00   mov32 cb, $0000000a
2648   144A 00 00 
2649   144C 56            add b, a
2650   144D E4            pop a
2651   144E             ; --- END TERMS
2652   144E 56            add b, a
2653   144F E4            pop a
2654   1450             ; --- END TERMS
2655   1450 E7            pop d
2656   1451 FD 43         mov [d], b
2657   1453 0A FA 14      jmp _if32_exit
2658   1456             _if32_else:
2659   1456             ; if (hex_char >= 'A' && hex_char <= 'F')  
2660   1456             _if33_cond:
2661   1456 FA FC FF      lea d, [bp + -4] ; $hex_char
2662   1459 32            mov bl, [d]
2663   145A A7 00         mov bh, 0
2664   145C 38 00 00      mov c, 0
2665   145F             ; --- START RELATIONAL
2666   145F D7            push a
2667   1460 11            mov a, b
2668   1461 FD 2E 41 00   mov32 cb, $00000041
2668   1465 00 00 
2669   1467 B0            cmp a, b
2670   1468 FD 80         sge ; >=
2671   146A E4            pop a
2672   146B             ; --- END RELATIONAL
2673   146B             ; --- START LOGICAL AND
2674   146B D7            push a
2675   146C 11            mov a, b
2676   146D FA FC FF      lea d, [bp + -4] ; $hex_char
2677   1470 32            mov bl, [d]
2678   1471 A7 00         mov bh, 0
2679   1473 38 00 00      mov c, 0
2680   1476             ; --- START RELATIONAL
2681   1476 D7            push a
2682   1477 11            mov a, b
2683   1478 FD 2E 46 00   mov32 cb, $00000046
2683   147C 00 00 
2684   147E B0            cmp a, b
2685   147F FD 74         sle ; <= (signed)
2686   1481 E4            pop a
2687   1482             ; --- END RELATIONAL
2688   1482 FD A7         sand a, b
2689   1484 E4            pop a
2690   1485             ; --- END LOGICAL AND
2691   1485 C0 00 00      cmp b, 0
2692   1488 C6 C8 14      je _if33_else
2693   148B             _if33_true:
2694   148B             ; value = (value * 16) + (hex_char - 'A' + 10); 
2695   148B FA FF FF      lea d, [bp + -1] ; $value
2696   148E DA            push d
2697   148F FA FF FF      lea d, [bp + -1] ; $value
2698   1492 2A            mov b, [d]
2699   1493 38 00 00      mov c, 0
2700   1496             ; --- START FACTORS
2701   1496 D7            push a
2702   1497 11            mov a, b
2703   1498 FD 2E 10 00   mov32 cb, $00000010
2703   149C 00 00 
2704   149E AC            mul a, b ; *
2705   149F 11            mov a, b
2706   14A0 27            mov b, a
2707   14A1 E4            pop a
2708   14A2             ; --- END FACTORS
2709   14A2             ; --- START TERMS
2710   14A2 D7            push a
2711   14A3 11            mov a, b
2712   14A4 FA FC FF      lea d, [bp + -4] ; $hex_char
2713   14A7 32            mov bl, [d]
2714   14A8 A7 00         mov bh, 0
2715   14AA 38 00 00      mov c, 0
2716   14AD             ; --- START TERMS
2717   14AD D7            push a
2718   14AE 11            mov a, b
2719   14AF FD 2E 41 00   mov32 cb, $00000041
2719   14B3 00 00 
2720   14B5 60            sub a, b
2721   14B6 27            mov b, a
2722   14B7 11            mov a, b
2723   14B8 FD 2E 0A 00   mov32 cb, $0000000a
2723   14BC 00 00 
2724   14BE 56            add b, a
2725   14BF E4            pop a
2726   14C0             ; --- END TERMS
2727   14C0 56            add b, a
2728   14C1 E4            pop a
2729   14C2             ; --- END TERMS
2730   14C2 E7            pop d
2731   14C3 FD 43         mov [d], b
2732   14C5 0A FA 14      jmp _if33_exit
2733   14C8             _if33_else:
2734   14C8             ; value = (value * 16) + (hex_char - '0'); 
2735   14C8 FA FF FF      lea d, [bp + -1] ; $value
2736   14CB DA            push d
2737   14CC FA FF FF      lea d, [bp + -1] ; $value
2738   14CF 2A            mov b, [d]
2739   14D0 38 00 00      mov c, 0
2740   14D3             ; --- START FACTORS
2741   14D3 D7            push a
2742   14D4 11            mov a, b
2743   14D5 FD 2E 10 00   mov32 cb, $00000010
2743   14D9 00 00 
2744   14DB AC            mul a, b ; *
2745   14DC 11            mov a, b
2746   14DD 27            mov b, a
2747   14DE E4            pop a
2748   14DF             ; --- END FACTORS
2749   14DF             ; --- START TERMS
2750   14DF D7            push a
2751   14E0 11            mov a, b
2752   14E1 FA FC FF      lea d, [bp + -4] ; $hex_char
2753   14E4 32            mov bl, [d]
2754   14E5 A7 00         mov bh, 0
2755   14E7 38 00 00      mov c, 0
2756   14EA             ; --- START TERMS
2757   14EA D7            push a
2758   14EB 11            mov a, b
2759   14EC FD 2E 30 00   mov32 cb, $00000030
2759   14F0 00 00 
2760   14F2 60            sub a, b
2761   14F3 27            mov b, a
2762   14F4 E4            pop a
2763   14F5             ; --- END TERMS
2764   14F5 56            add b, a
2765   14F6 E4            pop a
2766   14F7             ; --- END TERMS
2767   14F7 E7            pop d
2768   14F8 FD 43         mov [d], b
2769   14FA             _if33_exit:
2770   14FA             _if32_exit:
2771   14FA             _for31_update:
2772   14FA FA FD FF      lea d, [bp + -3] ; $i
2773   14FD 2A            mov b, [d]
2774   14FE 38 00 00      mov c, 0
2775   1501 11            mov a, b
2776   1502 FD 77         inc b
2777   1504 FA FD FF      lea d, [bp + -3] ; $i
2778   1507 FD 43         mov [d], b
2779   1509 27            mov b, a
2780   150A 0A A9 13      jmp _for31_cond
2781   150D             _for31_exit:
2782   150D             ; return value; 
2783   150D FA FF FF      lea d, [bp + -1] ; $value
2784   1510 2A            mov b, [d]
2785   1511 38 00 00      mov c, 0
2786   1514 F9            leave
2787   1515 09            ret
2788   1516             
2789   1516             gets:
2790   1516 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2791   1519             
2792   1519             ; --- BEGIN INLINE ASM SEGMENT
2793   1519 FA 05 00      lea d, [bp + 5] ; $s
2794   151C 15            mov a, [d]
2795   151D 3C            mov d, a
2796   151E 07 2D 1F      call _gets
2797   1521             ; --- END INLINE ASM SEGMENT
2798   1521             
2799   1521             ; return strlen(s); 
2800   1521             ; --- START FUNCTION CALL
2801   1521 FA 05 00      lea d, [bp + 5] ; $s
2802   1524 2A            mov b, [d]
2803   1525 38 00 00      mov c, 0
2804   1528 FD AB         swp b
2805   152A D8            push b
2806   152B 07 79 06      call strlen
2807   152E 51 02 00      add sp, 2
2808   1531             ; --- END FUNCTION CALL
2809   1531 F9            leave
2810   1532 09            ret
2811   1533             
2812   1533             print_signed:
2813   1533 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2814   1536             ; char digits[5]; 
2815   1536 52 05 00      sub sp, 5
2816   1539             ; int i = 0; 
2817   1539 52 02 00      sub sp, 2
2818   153C             ; --- START LOCAL VAR INITIALIZATION
2819   153C FA FA FF      lea d, [bp + -6] ; $i
2820   153F DA            push d
2821   1540 FD 2E 00 00   mov32 cb, $00000000
2821   1544 00 00 
2822   1546 E7            pop d
2823   1547 FD 43         mov [d], b
2824   1549             ; --- END LOCAL VAR INITIALIZATION
2825   1549             ; if (num < 0) { 
2826   1549             _if34_cond:
2827   1549 FA 05 00      lea d, [bp + 5] ; $num
2828   154C 2A            mov b, [d]
2829   154D 38 00 00      mov c, 0
2830   1550             ; --- START RELATIONAL
2831   1550 D7            push a
2832   1551 11            mov a, b
2833   1552 FD 2E 00 00   mov32 cb, $00000000
2833   1556 00 00 
2834   1558 B0            cmp a, b
2835   1559 FD 73         slt ; < (signed)
2836   155B E4            pop a
2837   155C             ; --- END RELATIONAL
2838   155C C0 00 00      cmp b, 0
2839   155F C6 82 15      je _if34_else
2840   1562             _if34_true:
2841   1562             ; putchar('-'); 
2842   1562             ; --- START FUNCTION CALL
2843   1562 FD 2E 2D 00   mov32 cb, $0000002d
2843   1566 00 00 
2844   1568 DD            push bl
2845   1569 07 17 1D      call putchar
2846   156C 51 01 00      add sp, 1
2847   156F             ; --- END FUNCTION CALL
2848   156F             ; num = -num; 
2849   156F FA 05 00      lea d, [bp + 5] ; $num
2850   1572 DA            push d
2851   1573 FA 05 00      lea d, [bp + 5] ; $num
2852   1576 2A            mov b, [d]
2853   1577 38 00 00      mov c, 0
2854   157A FD 97         neg b
2855   157C E7            pop d
2856   157D FD 43         mov [d], b
2857   157F 0A AD 15      jmp _if34_exit
2858   1582             _if34_else:
2859   1582             ; if (num == 0) { 
2860   1582             _if35_cond:
2861   1582 FA 05 00      lea d, [bp + 5] ; $num
2862   1585 2A            mov b, [d]
2863   1586 38 00 00      mov c, 0
2864   1589             ; --- START RELATIONAL
2865   1589 D7            push a
2866   158A 11            mov a, b
2867   158B FD 2E 00 00   mov32 cb, $00000000
2867   158F 00 00 
2868   1591 B0            cmp a, b
2869   1592 FD 71         seq ; ==
2870   1594 E4            pop a
2871   1595             ; --- END RELATIONAL
2872   1595 C0 00 00      cmp b, 0
2873   1598 C6 AD 15      je _if35_exit
2874   159B             _if35_true:
2875   159B             ; putchar('0'); 
2876   159B             ; --- START FUNCTION CALL
2877   159B FD 2E 30 00   mov32 cb, $00000030
2877   159F 00 00 
2878   15A1 DD            push bl
2879   15A2 07 17 1D      call putchar
2880   15A5 51 01 00      add sp, 1
2881   15A8             ; --- END FUNCTION CALL
2882   15A8             ; return; 
2883   15A8 F9            leave
2884   15A9 09            ret
2885   15AA 0A AD 15      jmp _if35_exit
2886   15AD             _if35_exit:
2887   15AD             _if34_exit:
2888   15AD             ; while (num > 0) { 
2889   15AD             _while36_cond:
2890   15AD FA 05 00      lea d, [bp + 5] ; $num
2891   15B0 2A            mov b, [d]
2892   15B1 38 00 00      mov c, 0
2893   15B4             ; --- START RELATIONAL
2894   15B4 D7            push a
2895   15B5 11            mov a, b
2896   15B6 FD 2E 00 00   mov32 cb, $00000000
2896   15BA 00 00 
2897   15BC B0            cmp a, b
2898   15BD FD 7F         sgt ; >
2899   15BF E4            pop a
2900   15C0             ; --- END RELATIONAL
2901   15C0 C0 00 00      cmp b, 0
2902   15C3 C6 22 16      je _while36_exit
2903   15C6             _while36_block:
2904   15C6             ; digits[i] = '0' + (num % 10); 
2905   15C6 FA FC FF      lea d, [bp + -4] ; $digits
2906   15C9 D7            push a
2907   15CA DA            push d
2908   15CB FA FA FF      lea d, [bp + -6] ; $i
2909   15CE 2A            mov b, [d]
2910   15CF 38 00 00      mov c, 0
2911   15D2 E7            pop d
2912   15D3 5A            add d, b
2913   15D4 E4            pop a
2914   15D5 DA            push d
2915   15D6 FD 2E 30 00   mov32 cb, $00000030
2915   15DA 00 00 
2916   15DC             ; --- START TERMS
2917   15DC D7            push a
2918   15DD 11            mov a, b
2919   15DE FA 05 00      lea d, [bp + 5] ; $num
2920   15E1 2A            mov b, [d]
2921   15E2 38 00 00      mov c, 0
2922   15E5             ; --- START FACTORS
2923   15E5 D7            push a
2924   15E6 11            mov a, b
2925   15E7 FD 2E 0A 00   mov32 cb, $0000000a
2925   15EB 00 00 
2926   15ED AE            div a, b ; 
2927   15EE 11            mov a, b
2928   15EF 27            mov b, a
2929   15F0 E4            pop a
2930   15F1             ; --- END FACTORS
2931   15F1 56            add b, a
2932   15F2 E4            pop a
2933   15F3             ; --- END TERMS
2934   15F3 E7            pop d
2935   15F4 FD 3E         mov [d], bl
2936   15F6             ; num = num / 10; 
2937   15F6 FA 05 00      lea d, [bp + 5] ; $num
2938   15F9 DA            push d
2939   15FA FA 05 00      lea d, [bp + 5] ; $num
2940   15FD 2A            mov b, [d]
2941   15FE 38 00 00      mov c, 0
2942   1601             ; --- START FACTORS
2943   1601 D7            push a
2944   1602 11            mov a, b
2945   1603 FD 2E 0A 00   mov32 cb, $0000000a
2945   1607 00 00 
2946   1609 AE            div a, b
2947   160A 27            mov b, a
2948   160B E4            pop a
2949   160C             ; --- END FACTORS
2950   160C E7            pop d
2951   160D FD 43         mov [d], b
2952   160F             ; i++; 
2953   160F FA FA FF      lea d, [bp + -6] ; $i
2954   1612 2A            mov b, [d]
2955   1613 38 00 00      mov c, 0
2956   1616 11            mov a, b
2957   1617 FD 77         inc b
2958   1619 FA FA FF      lea d, [bp + -6] ; $i
2959   161C FD 43         mov [d], b
2960   161E 27            mov b, a
2961   161F 0A AD 15      jmp _while36_cond
2962   1622             _while36_exit:
2963   1622             ; while (i > 0) { 
2964   1622             _while37_cond:
2965   1622 FA FA FF      lea d, [bp + -6] ; $i
2966   1625 2A            mov b, [d]
2967   1626 38 00 00      mov c, 0
2968   1629             ; --- START RELATIONAL
2969   1629 D7            push a
2970   162A 11            mov a, b
2971   162B FD 2E 00 00   mov32 cb, $00000000
2971   162F 00 00 
2972   1631 B0            cmp a, b
2973   1632 FD 7F         sgt ; >
2974   1634 E4            pop a
2975   1635             ; --- END RELATIONAL
2976   1635 C0 00 00      cmp b, 0
2977   1638 C6 6A 16      je _while37_exit
2978   163B             _while37_block:
2979   163B             ; i--; 
2980   163B FA FA FF      lea d, [bp + -6] ; $i
2981   163E 2A            mov b, [d]
2982   163F 38 00 00      mov c, 0
2983   1642 11            mov a, b
2984   1643 FD 7D         dec b
2985   1645 FA FA FF      lea d, [bp + -6] ; $i
2986   1648 FD 43         mov [d], b
2987   164A 27            mov b, a
2988   164B             ; putchar(digits[i]); 
2989   164B             ; --- START FUNCTION CALL
2990   164B FA FC FF      lea d, [bp + -4] ; $digits
2991   164E D7            push a
2992   164F DA            push d
2993   1650 FA FA FF      lea d, [bp + -6] ; $i
2994   1653 2A            mov b, [d]
2995   1654 38 00 00      mov c, 0
2996   1657 E7            pop d
2997   1658 5A            add d, b
2998   1659 E4            pop a
2999   165A 32            mov bl, [d]
3000   165B A7 00         mov bh, 0
3001   165D 38 00 00      mov c, 0
3002   1660 DD            push bl
3003   1661 07 17 1D      call putchar
3004   1664 51 01 00      add sp, 1
3005   1667             ; --- END FUNCTION CALL
3006   1667 0A 22 16      jmp _while37_cond
3007   166A             _while37_exit:
3008   166A F9            leave
3009   166B 09            ret
3010   166C             
3011   166C             print_signed_long:
3012   166C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3013   166F             ; char digits[10]; 
3014   166F 52 0A 00      sub sp, 10
3015   1672             ; int i = 0; 
3016   1672 52 02 00      sub sp, 2
3017   1675             ; --- START LOCAL VAR INITIALIZATION
3018   1675 FA F5 FF      lea d, [bp + -11] ; $i
3019   1678 DA            push d
3020   1679 FD 2E 00 00   mov32 cb, $00000000
3020   167D 00 00 
3021   167F E7            pop d
3022   1680 FD 43         mov [d], b
3023   1682             ; --- END LOCAL VAR INITIALIZATION
3024   1682             ; if (num < 0) { 
3025   1682             _if38_cond:
3026   1682 FA 05 00      lea d, [bp + 5] ; $num
3027   1685 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3028   1688 FD 39         mov c, b ; And place it into C
3029   168A 2A            mov b, [d] ; Lower Word in B
3030   168B             ; --- START RELATIONAL
3031   168B D7            push a
3032   168C FD D8         push g
3033   168E 11            mov a, b
3034   168F FD 7A         mov g, c
3035   1691 FD 2E 00 00   mov32 cb, $00000000
3035   1695 00 00 
3036   1697 FD AF         cmp32 ga, cb
3037   1699 FD 73         slt ; <
3038   169B FD F1         pop g
3039   169D E4            pop a
3040   169E             ; --- END RELATIONAL
3041   169E C0 00 00      cmp b, 0
3042   16A1 C6 D5 16      je _if38_else
3043   16A4             _if38_true:
3044   16A4             ; putchar('-'); 
3045   16A4             ; --- START FUNCTION CALL
3046   16A4 FD 2E 2D 00   mov32 cb, $0000002d
3046   16A8 00 00 
3047   16AA DD            push bl
3048   16AB 07 17 1D      call putchar
3049   16AE 51 01 00      add sp, 1
3050   16B1             ; --- END FUNCTION CALL
3051   16B1             ; num = -num; 
3052   16B1 FA 05 00      lea d, [bp + 5] ; $num
3053   16B4 DA            push d
3054   16B5 FA 05 00      lea d, [bp + 5] ; $num
3055   16B8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3056   16BB FD 39         mov c, b ; And place it into C
3057   16BD 2A            mov b, [d] ; Lower Word in B
3058   16BE 12            mov a, c
3059   16BF 95            not a
3060   16C0 97            not b
3061   16C1 55 01 00      add b, 1
3062   16C4 5B 00 00      adc a, 0
3063   16C7 39            mov c, a
3064   16C8 E7            pop d
3065   16C9 FD 43         mov [d], b
3066   16CB 26 00 00      mov b, 0
3067   16CE FD 44 02 00   mov [d + 2], b
3068   16D2 0A 09 17      jmp _if38_exit
3069   16D5             _if38_else:
3070   16D5             ; if (num == 0) { 
3071   16D5             _if39_cond:
3072   16D5 FA 05 00      lea d, [bp + 5] ; $num
3073   16D8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3074   16DB FD 39         mov c, b ; And place it into C
3075   16DD 2A            mov b, [d] ; Lower Word in B
3076   16DE             ; --- START RELATIONAL
3077   16DE D7            push a
3078   16DF FD D8         push g
3079   16E1 11            mov a, b
3080   16E2 FD 7A         mov g, c
3081   16E4 FD 2E 00 00   mov32 cb, $00000000
3081   16E8 00 00 
3082   16EA FD AF         cmp32 ga, cb
3083   16EC FD 71         seq ; ==
3084   16EE FD F1         pop g
3085   16F0 E4            pop a
3086   16F1             ; --- END RELATIONAL
3087   16F1 C0 00 00      cmp b, 0
3088   16F4 C6 09 17      je _if39_exit
3089   16F7             _if39_true:
3090   16F7             ; putchar('0'); 
3091   16F7             ; --- START FUNCTION CALL
3092   16F7 FD 2E 30 00   mov32 cb, $00000030
3092   16FB 00 00 
3093   16FD DD            push bl
3094   16FE 07 17 1D      call putchar
3095   1701 51 01 00      add sp, 1
3096   1704             ; --- END FUNCTION CALL
3097   1704             ; return; 
3098   1704 F9            leave
3099   1705 09            ret
3100   1706 0A 09 17      jmp _if39_exit
3101   1709             _if39_exit:
3102   1709             _if38_exit:
3103   1709             ; while (num > 0) { 
3104   1709             _while40_cond:
3105   1709 FA 05 00      lea d, [bp + 5] ; $num
3106   170C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3107   170F FD 39         mov c, b ; And place it into C
3108   1711 2A            mov b, [d] ; Lower Word in B
3109   1712             ; --- START RELATIONAL
3110   1712 D7            push a
3111   1713 FD D8         push g
3112   1715 11            mov a, b
3113   1716 FD 7A         mov g, c
3114   1718 FD 2E 00 00   mov32 cb, $00000000
3114   171C 00 00 
3115   171E FD AF         cmp32 ga, cb
3116   1720 FD 7F         sgt
3117   1722 FD F1         pop g
3118   1724 E4            pop a
3119   1725             ; --- END RELATIONAL
3120   1725 C0 00 00      cmp b, 0
3121   1728 C6 91 17      je _while40_exit
3122   172B             _while40_block:
3123   172B             ; digits[i] = '0' + (num % 10); 
3124   172B FA F7 FF      lea d, [bp + -9] ; $digits
3125   172E D7            push a
3126   172F DA            push d
3127   1730 FA F5 FF      lea d, [bp + -11] ; $i
3128   1733 2A            mov b, [d]
3129   1734 38 00 00      mov c, 0
3130   1737 E7            pop d
3131   1738 5A            add d, b
3132   1739 E4            pop a
3133   173A DA            push d
3134   173B FD 2E 30 00   mov32 cb, $00000030
3134   173F 00 00 
3135   1741             ; --- START TERMS
3136   1741 D7            push a
3137   1742 11            mov a, b
3138   1743 FA 05 00      lea d, [bp + 5] ; $num
3139   1746 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3140   1749 FD 39         mov c, b ; And place it into C
3141   174B 2A            mov b, [d] ; Lower Word in B
3142   174C             ; --- START FACTORS
3143   174C D7            push a
3144   174D 11            mov a, b
3145   174E FD 2E 0A 00   mov32 cb, $0000000a
3145   1752 00 00 
3146   1754 AE            div a, b ; 
3147   1755 11            mov a, b
3148   1756 27            mov b, a
3149   1757 E4            pop a
3150   1758             ; --- END FACTORS
3151   1758 FD 15         add32 cb, ga
3152   175A E4            pop a
3153   175B             ; --- END TERMS
3154   175B E7            pop d
3155   175C FD 3E         mov [d], bl
3156   175E             ; num = num / 10; 
3157   175E FA 05 00      lea d, [bp + 5] ; $num
3158   1761 DA            push d
3159   1762 FA 05 00      lea d, [bp + 5] ; $num
3160   1765 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3161   1768 FD 39         mov c, b ; And place it into C
3162   176A 2A            mov b, [d] ; Lower Word in B
3163   176B             ; --- START FACTORS
3164   176B D7            push a
3165   176C 11            mov a, b
3166   176D FD 2E 0A 00   mov32 cb, $0000000a
3166   1771 00 00 
3167   1773 AE            div a, b
3168   1774 27            mov b, a
3169   1775 E4            pop a
3170   1776             ; --- END FACTORS
3171   1776 E7            pop d
3172   1777 FD 43         mov [d], b
3173   1779 28            mov b, c
3174   177A FD 44 02 00   mov [d + 2], b
3175   177E             ; i++; 
3176   177E FA F5 FF      lea d, [bp + -11] ; $i
3177   1781 2A            mov b, [d]
3178   1782 38 00 00      mov c, 0
3179   1785 11            mov a, b
3180   1786 FD 77         inc b
3181   1788 FA F5 FF      lea d, [bp + -11] ; $i
3182   178B FD 43         mov [d], b
3183   178D 27            mov b, a
3184   178E 0A 09 17      jmp _while40_cond
3185   1791             _while40_exit:
3186   1791             ; while (i > 0) { 
3187   1791             _while41_cond:
3188   1791 FA F5 FF      lea d, [bp + -11] ; $i
3189   1794 2A            mov b, [d]
3190   1795 38 00 00      mov c, 0
3191   1798             ; --- START RELATIONAL
3192   1798 D7            push a
3193   1799 11            mov a, b
3194   179A FD 2E 00 00   mov32 cb, $00000000
3194   179E 00 00 
3195   17A0 B0            cmp a, b
3196   17A1 FD 7F         sgt ; >
3197   17A3 E4            pop a
3198   17A4             ; --- END RELATIONAL
3199   17A4 C0 00 00      cmp b, 0
3200   17A7 C6 D9 17      je _while41_exit
3201   17AA             _while41_block:
3202   17AA             ; i--; 
3203   17AA FA F5 FF      lea d, [bp + -11] ; $i
3204   17AD 2A            mov b, [d]
3205   17AE 38 00 00      mov c, 0
3206   17B1 11            mov a, b
3207   17B2 FD 7D         dec b
3208   17B4 FA F5 FF      lea d, [bp + -11] ; $i
3209   17B7 FD 43         mov [d], b
3210   17B9 27            mov b, a
3211   17BA             ; putchar(digits[i]); 
3212   17BA             ; --- START FUNCTION CALL
3213   17BA FA F7 FF      lea d, [bp + -9] ; $digits
3214   17BD D7            push a
3215   17BE DA            push d
3216   17BF FA F5 FF      lea d, [bp + -11] ; $i
3217   17C2 2A            mov b, [d]
3218   17C3 38 00 00      mov c, 0
3219   17C6 E7            pop d
3220   17C7 5A            add d, b
3221   17C8 E4            pop a
3222   17C9 32            mov bl, [d]
3223   17CA A7 00         mov bh, 0
3224   17CC 38 00 00      mov c, 0
3225   17CF DD            push bl
3226   17D0 07 17 1D      call putchar
3227   17D3 51 01 00      add sp, 1
3228   17D6             ; --- END FUNCTION CALL
3229   17D6 0A 91 17      jmp _while41_cond
3230   17D9             _while41_exit:
3231   17D9 F9            leave
3232   17DA 09            ret
3233   17DB             
3234   17DB             print_unsigned_long:
3235   17DB F8 00 00      enter 0 ; (push bp; mov bp, sp)
3236   17DE             ; char digits[10]; 
3237   17DE 52 0A 00      sub sp, 10
3238   17E1             ; int i; 
3239   17E1 52 02 00      sub sp, 2
3240   17E4             ; i = 0; 
3241   17E4 FA F5 FF      lea d, [bp + -11] ; $i
3242   17E7 DA            push d
3243   17E8 FD 2E 00 00   mov32 cb, $00000000
3243   17EC 00 00 
3244   17EE E7            pop d
3245   17EF FD 43         mov [d], b
3246   17F1             ; if(num == 0){ 
3247   17F1             _if42_cond:
3248   17F1 FA 05 00      lea d, [bp + 5] ; $num
3249   17F4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3250   17F7 FD 39         mov c, b ; And place it into C
3251   17F9 2A            mov b, [d] ; Lower Word in B
3252   17FA             ; --- START RELATIONAL
3253   17FA D7            push a
3254   17FB FD D8         push g
3255   17FD 11            mov a, b
3256   17FE FD 7A         mov g, c
3257   1800 FD 2E 00 00   mov32 cb, $00000000
3257   1804 00 00 
3258   1806 FD AF         cmp32 ga, cb
3259   1808 FD 71         seq ; ==
3260   180A FD F1         pop g
3261   180C E4            pop a
3262   180D             ; --- END RELATIONAL
3263   180D C0 00 00      cmp b, 0
3264   1810 C6 25 18      je _if42_exit
3265   1813             _if42_true:
3266   1813             ; putchar('0'); 
3267   1813             ; --- START FUNCTION CALL
3268   1813 FD 2E 30 00   mov32 cb, $00000030
3268   1817 00 00 
3269   1819 DD            push bl
3270   181A 07 17 1D      call putchar
3271   181D 51 01 00      add sp, 1
3272   1820             ; --- END FUNCTION CALL
3273   1820             ; return; 
3274   1820 F9            leave
3275   1821 09            ret
3276   1822 0A 25 18      jmp _if42_exit
3277   1825             _if42_exit:
3278   1825             ; while (num > 0) { 
3279   1825             _while43_cond:
3280   1825 FA 05 00      lea d, [bp + 5] ; $num
3281   1828 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3282   182B FD 39         mov c, b ; And place it into C
3283   182D 2A            mov b, [d] ; Lower Word in B
3284   182E             ; --- START RELATIONAL
3285   182E D7            push a
3286   182F FD D8         push g
3287   1831 11            mov a, b
3288   1832 FD 7A         mov g, c
3289   1834 FD 2E 00 00   mov32 cb, $00000000
3289   1838 00 00 
3290   183A FD AF         cmp32 ga, cb
3291   183C FD 81         sgu
3292   183E FD F1         pop g
3293   1840 E4            pop a
3294   1841             ; --- END RELATIONAL
3295   1841 C0 00 00      cmp b, 0
3296   1844 C6 AD 18      je _while43_exit
3297   1847             _while43_block:
3298   1847             ; digits[i] = '0' + (num % 10); 
3299   1847 FA F7 FF      lea d, [bp + -9] ; $digits
3300   184A D7            push a
3301   184B DA            push d
3302   184C FA F5 FF      lea d, [bp + -11] ; $i
3303   184F 2A            mov b, [d]
3304   1850 38 00 00      mov c, 0
3305   1853 E7            pop d
3306   1854 5A            add d, b
3307   1855 E4            pop a
3308   1856 DA            push d
3309   1857 FD 2E 30 00   mov32 cb, $00000030
3309   185B 00 00 
3310   185D             ; --- START TERMS
3311   185D D7            push a
3312   185E 11            mov a, b
3313   185F FA 05 00      lea d, [bp + 5] ; $num
3314   1862 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3315   1865 FD 39         mov c, b ; And place it into C
3316   1867 2A            mov b, [d] ; Lower Word in B
3317   1868             ; --- START FACTORS
3318   1868 D7            push a
3319   1869 11            mov a, b
3320   186A FD 2E 0A 00   mov32 cb, $0000000a
3320   186E 00 00 
3321   1870 AE            div a, b ; 
3322   1871 11            mov a, b
3323   1872 27            mov b, a
3324   1873 E4            pop a
3325   1874             ; --- END FACTORS
3326   1874 FD 15         add32 cb, ga
3327   1876 E4            pop a
3328   1877             ; --- END TERMS
3329   1877 E7            pop d
3330   1878 FD 3E         mov [d], bl
3331   187A             ; num = num / 10; 
3332   187A FA 05 00      lea d, [bp + 5] ; $num
3333   187D DA            push d
3334   187E FA 05 00      lea d, [bp + 5] ; $num
3335   1881 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3336   1884 FD 39         mov c, b ; And place it into C
3337   1886 2A            mov b, [d] ; Lower Word in B
3338   1887             ; --- START FACTORS
3339   1887 D7            push a
3340   1888 11            mov a, b
3341   1889 FD 2E 0A 00   mov32 cb, $0000000a
3341   188D 00 00 
3342   188F AE            div a, b
3343   1890 27            mov b, a
3344   1891 E4            pop a
3345   1892             ; --- END FACTORS
3346   1892 E7            pop d
3347   1893 FD 43         mov [d], b
3348   1895 28            mov b, c
3349   1896 FD 44 02 00   mov [d + 2], b
3350   189A             ; i++; 
3351   189A FA F5 FF      lea d, [bp + -11] ; $i
3352   189D 2A            mov b, [d]
3353   189E 38 00 00      mov c, 0
3354   18A1 11            mov a, b
3355   18A2 FD 77         inc b
3356   18A4 FA F5 FF      lea d, [bp + -11] ; $i
3357   18A7 FD 43         mov [d], b
3358   18A9 27            mov b, a
3359   18AA 0A 25 18      jmp _while43_cond
3360   18AD             _while43_exit:
3361   18AD             ; while (i > 0) { 
3362   18AD             _while44_cond:
3363   18AD FA F5 FF      lea d, [bp + -11] ; $i
3364   18B0 2A            mov b, [d]
3365   18B1 38 00 00      mov c, 0
3366   18B4             ; --- START RELATIONAL
3367   18B4 D7            push a
3368   18B5 11            mov a, b
3369   18B6 FD 2E 00 00   mov32 cb, $00000000
3369   18BA 00 00 
3370   18BC B0            cmp a, b
3371   18BD FD 7F         sgt ; >
3372   18BF E4            pop a
3373   18C0             ; --- END RELATIONAL
3374   18C0 C0 00 00      cmp b, 0
3375   18C3 C6 F5 18      je _while44_exit
3376   18C6             _while44_block:
3377   18C6             ; i--; 
3378   18C6 FA F5 FF      lea d, [bp + -11] ; $i
3379   18C9 2A            mov b, [d]
3380   18CA 38 00 00      mov c, 0
3381   18CD 11            mov a, b
3382   18CE FD 7D         dec b
3383   18D0 FA F5 FF      lea d, [bp + -11] ; $i
3384   18D3 FD 43         mov [d], b
3385   18D5 27            mov b, a
3386   18D6             ; putchar(digits[i]); 
3387   18D6             ; --- START FUNCTION CALL
3388   18D6 FA F7 FF      lea d, [bp + -9] ; $digits
3389   18D9 D7            push a
3390   18DA DA            push d
3391   18DB FA F5 FF      lea d, [bp + -11] ; $i
3392   18DE 2A            mov b, [d]
3393   18DF 38 00 00      mov c, 0
3394   18E2 E7            pop d
3395   18E3 5A            add d, b
3396   18E4 E4            pop a
3397   18E5 32            mov bl, [d]
3398   18E6 A7 00         mov bh, 0
3399   18E8 38 00 00      mov c, 0
3400   18EB DD            push bl
3401   18EC 07 17 1D      call putchar
3402   18EF 51 01 00      add sp, 1
3403   18F2             ; --- END FUNCTION CALL
3404   18F2 0A AD 18      jmp _while44_cond
3405   18F5             _while44_exit:
3406   18F5 F9            leave
3407   18F6 09            ret
3408   18F7             
3409   18F7             sprint_unsigned:
3410   18F7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3411   18FA             ; char digits[5]; 
3412   18FA 52 05 00      sub sp, 5
3413   18FD             ; int i; 
3414   18FD 52 02 00      sub sp, 2
3415   1900             ; int len = 0; 
3416   1900 52 02 00      sub sp, 2
3417   1903             ; --- START LOCAL VAR INITIALIZATION
3418   1903 FA F8 FF      lea d, [bp + -8] ; $len
3419   1906 DA            push d
3420   1907 FD 2E 00 00   mov32 cb, $00000000
3420   190B 00 00 
3421   190D E7            pop d
3422   190E FD 43         mov [d], b
3423   1910             ; --- END LOCAL VAR INITIALIZATION
3424   1910             ; i = 0; 
3425   1910 FA FA FF      lea d, [bp + -6] ; $i
3426   1913 DA            push d
3427   1914 FD 2E 00 00   mov32 cb, $00000000
3427   1918 00 00 
3428   191A E7            pop d
3429   191B FD 43         mov [d], b
3430   191D             ; if(num == 0){ 
3431   191D             _if45_cond:
3432   191D FA 07 00      lea d, [bp + 7] ; $num
3433   1920 2A            mov b, [d]
3434   1921 38 00 00      mov c, 0
3435   1924             ; --- START RELATIONAL
3436   1924 D7            push a
3437   1925 11            mov a, b
3438   1926 FD 2E 00 00   mov32 cb, $00000000
3438   192A 00 00 
3439   192C B0            cmp a, b
3440   192D FD 71         seq ; ==
3441   192F E4            pop a
3442   1930             ; --- END RELATIONAL
3443   1930 C0 00 00      cmp b, 0
3444   1933 C6 5B 19      je _if45_exit
3445   1936             _if45_true:
3446   1936             ; *dest++ = '0'; 
3447   1936 FA 05 00      lea d, [bp + 5] ; $dest
3448   1939 2A            mov b, [d]
3449   193A 38 00 00      mov c, 0
3450   193D FD 77         inc b
3451   193F FA 05 00      lea d, [bp + 5] ; $dest
3452   1942 FD 3E         mov [d], bl
3453   1944 FD 7D         dec b
3454   1946 D8            push b
3455   1947 FD 2E 30 00   mov32 cb, $00000030
3455   194B 00 00 
3456   194D E7            pop d
3457   194E FD 3E         mov [d], bl
3458   1950             ; return 1; 
3459   1950 FD 2E 01 00   mov32 cb, $00000001
3459   1954 00 00 
3460   1956 F9            leave
3461   1957 09            ret
3462   1958 0A 5B 19      jmp _if45_exit
3463   195B             _if45_exit:
3464   195B             ; while (num > 0) { 
3465   195B             _while46_cond:
3466   195B FA 07 00      lea d, [bp + 7] ; $num
3467   195E 2A            mov b, [d]
3468   195F 38 00 00      mov c, 0
3469   1962             ; --- START RELATIONAL
3470   1962 D7            push a
3471   1963 11            mov a, b
3472   1964 FD 2E 00 00   mov32 cb, $00000000
3472   1968 00 00 
3473   196A B0            cmp a, b
3474   196B FD 81         sgu ; > (unsigned)
3475   196D E4            pop a
3476   196E             ; --- END RELATIONAL
3477   196E C0 00 00      cmp b, 0
3478   1971 C6 D0 19      je _while46_exit
3479   1974             _while46_block:
3480   1974             ; digits[i] = '0' + (num % 10); 
3481   1974 FA FC FF      lea d, [bp + -4] ; $digits
3482   1977 D7            push a
3483   1978 DA            push d
3484   1979 FA FA FF      lea d, [bp + -6] ; $i
3485   197C 2A            mov b, [d]
3486   197D 38 00 00      mov c, 0
3487   1980 E7            pop d
3488   1981 5A            add d, b
3489   1982 E4            pop a
3490   1983 DA            push d
3491   1984 FD 2E 30 00   mov32 cb, $00000030
3491   1988 00 00 
3492   198A             ; --- START TERMS
3493   198A D7            push a
3494   198B 11            mov a, b
3495   198C FA 07 00      lea d, [bp + 7] ; $num
3496   198F 2A            mov b, [d]
3497   1990 38 00 00      mov c, 0
3498   1993             ; --- START FACTORS
3499   1993 D7            push a
3500   1994 11            mov a, b
3501   1995 FD 2E 0A 00   mov32 cb, $0000000a
3501   1999 00 00 
3502   199B AE            div a, b ; 
3503   199C 11            mov a, b
3504   199D 27            mov b, a
3505   199E E4            pop a
3506   199F             ; --- END FACTORS
3507   199F 56            add b, a
3508   19A0 E4            pop a
3509   19A1             ; --- END TERMS
3510   19A1 E7            pop d
3511   19A2 FD 3E         mov [d], bl
3512   19A4             ; num = num / 10; 
3513   19A4 FA 07 00      lea d, [bp + 7] ; $num
3514   19A7 DA            push d
3515   19A8 FA 07 00      lea d, [bp + 7] ; $num
3516   19AB 2A            mov b, [d]
3517   19AC 38 00 00      mov c, 0
3518   19AF             ; --- START FACTORS
3519   19AF D7            push a
3520   19B0 11            mov a, b
3521   19B1 FD 2E 0A 00   mov32 cb, $0000000a
3521   19B5 00 00 
3522   19B7 AE            div a, b
3523   19B8 27            mov b, a
3524   19B9 E4            pop a
3525   19BA             ; --- END FACTORS
3526   19BA E7            pop d
3527   19BB FD 43         mov [d], b
3528   19BD             ; i++; 
3529   19BD FA FA FF      lea d, [bp + -6] ; $i
3530   19C0 2A            mov b, [d]
3531   19C1 38 00 00      mov c, 0
3532   19C4 11            mov a, b
3533   19C5 FD 77         inc b
3534   19C7 FA FA FF      lea d, [bp + -6] ; $i
3535   19CA FD 43         mov [d], b
3536   19CC 27            mov b, a
3537   19CD 0A 5B 19      jmp _while46_cond
3538   19D0             _while46_exit:
3539   19D0             ; while (i > 0) { 
3540   19D0             _while47_cond:
3541   19D0 FA FA FF      lea d, [bp + -6] ; $i
3542   19D3 2A            mov b, [d]
3543   19D4 38 00 00      mov c, 0
3544   19D7             ; --- START RELATIONAL
3545   19D7 D7            push a
3546   19D8 11            mov a, b
3547   19D9 FD 2E 00 00   mov32 cb, $00000000
3547   19DD 00 00 
3548   19DF B0            cmp a, b
3549   19E0 FD 7F         sgt ; >
3550   19E2 E4            pop a
3551   19E3             ; --- END RELATIONAL
3552   19E3 C0 00 00      cmp b, 0
3553   19E6 C6 35 1A      je _while47_exit
3554   19E9             _while47_block:
3555   19E9             ; i--; 
3556   19E9 FA FA FF      lea d, [bp + -6] ; $i
3557   19EC 2A            mov b, [d]
3558   19ED 38 00 00      mov c, 0
3559   19F0 11            mov a, b
3560   19F1 FD 7D         dec b
3561   19F3 FA FA FF      lea d, [bp + -6] ; $i
3562   19F6 FD 43         mov [d], b
3563   19F8 27            mov b, a
3564   19F9             ; *dest++ = digits[i]; 
3565   19F9 FA 05 00      lea d, [bp + 5] ; $dest
3566   19FC 2A            mov b, [d]
3567   19FD 38 00 00      mov c, 0
3568   1A00 FD 77         inc b
3569   1A02 FA 05 00      lea d, [bp + 5] ; $dest
3570   1A05 FD 3E         mov [d], bl
3571   1A07 FD 7D         dec b
3572   1A09 D8            push b
3573   1A0A FA FC FF      lea d, [bp + -4] ; $digits
3574   1A0D D7            push a
3575   1A0E DA            push d
3576   1A0F FA FA FF      lea d, [bp + -6] ; $i
3577   1A12 2A            mov b, [d]
3578   1A13 38 00 00      mov c, 0
3579   1A16 E7            pop d
3580   1A17 5A            add d, b
3581   1A18 E4            pop a
3582   1A19 32            mov bl, [d]
3583   1A1A A7 00         mov bh, 0
3584   1A1C 38 00 00      mov c, 0
3585   1A1F E7            pop d
3586   1A20 FD 3E         mov [d], bl
3587   1A22             ; len++; 
3588   1A22 FA F8 FF      lea d, [bp + -8] ; $len
3589   1A25 2A            mov b, [d]
3590   1A26 38 00 00      mov c, 0
3591   1A29 11            mov a, b
3592   1A2A FD 77         inc b
3593   1A2C FA F8 FF      lea d, [bp + -8] ; $len
3594   1A2F FD 43         mov [d], b
3595   1A31 27            mov b, a
3596   1A32 0A D0 19      jmp _while47_cond
3597   1A35             _while47_exit:
3598   1A35             ; *dest = '\0'; 
3599   1A35 FA 05 00      lea d, [bp + 5] ; $dest
3600   1A38 2A            mov b, [d]
3601   1A39 38 00 00      mov c, 0
3602   1A3C D8            push b
3603   1A3D FD 2E 00 00   mov32 cb, $00000000
3603   1A41 00 00 
3604   1A43 E7            pop d
3605   1A44 FD 3E         mov [d], bl
3606   1A46             ; return len; 
3607   1A46 FA F8 FF      lea d, [bp + -8] ; $len
3608   1A49 2A            mov b, [d]
3609   1A4A 38 00 00      mov c, 0
3610   1A4D F9            leave
3611   1A4E 09            ret
3612   1A4F             
3613   1A4F             print_unsigned:
3614   1A4F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3615   1A52             ; char digits[5]; 
3616   1A52 52 05 00      sub sp, 5
3617   1A55             ; int i; 
3618   1A55 52 02 00      sub sp, 2
3619   1A58             ; i = 0; 
3620   1A58 FA FA FF      lea d, [bp + -6] ; $i
3621   1A5B DA            push d
3622   1A5C FD 2E 00 00   mov32 cb, $00000000
3622   1A60 00 00 
3623   1A62 E7            pop d
3624   1A63 FD 43         mov [d], b
3625   1A65             ; if(num == 0){ 
3626   1A65             _if48_cond:
3627   1A65 FA 05 00      lea d, [bp + 5] ; $num
3628   1A68 2A            mov b, [d]
3629   1A69 38 00 00      mov c, 0
3630   1A6C             ; --- START RELATIONAL
3631   1A6C D7            push a
3632   1A6D 11            mov a, b
3633   1A6E FD 2E 00 00   mov32 cb, $00000000
3633   1A72 00 00 
3634   1A74 B0            cmp a, b
3635   1A75 FD 71         seq ; ==
3636   1A77 E4            pop a
3637   1A78             ; --- END RELATIONAL
3638   1A78 C0 00 00      cmp b, 0
3639   1A7B C6 90 1A      je _if48_exit
3640   1A7E             _if48_true:
3641   1A7E             ; putchar('0'); 
3642   1A7E             ; --- START FUNCTION CALL
3643   1A7E FD 2E 30 00   mov32 cb, $00000030
3643   1A82 00 00 
3644   1A84 DD            push bl
3645   1A85 07 17 1D      call putchar
3646   1A88 51 01 00      add sp, 1
3647   1A8B             ; --- END FUNCTION CALL
3648   1A8B             ; return; 
3649   1A8B F9            leave
3650   1A8C 09            ret
3651   1A8D 0A 90 1A      jmp _if48_exit
3652   1A90             _if48_exit:
3653   1A90             ; while (num > 0) { 
3654   1A90             _while49_cond:
3655   1A90 FA 05 00      lea d, [bp + 5] ; $num
3656   1A93 2A            mov b, [d]
3657   1A94 38 00 00      mov c, 0
3658   1A97             ; --- START RELATIONAL
3659   1A97 D7            push a
3660   1A98 11            mov a, b
3661   1A99 FD 2E 00 00   mov32 cb, $00000000
3661   1A9D 00 00 
3662   1A9F B0            cmp a, b
3663   1AA0 FD 81         sgu ; > (unsigned)
3664   1AA2 E4            pop a
3665   1AA3             ; --- END RELATIONAL
3666   1AA3 C0 00 00      cmp b, 0
3667   1AA6 C6 05 1B      je _while49_exit
3668   1AA9             _while49_block:
3669   1AA9             ; digits[i] = '0' + (num % 10); 
3670   1AA9 FA FC FF      lea d, [bp + -4] ; $digits
3671   1AAC D7            push a
3672   1AAD DA            push d
3673   1AAE FA FA FF      lea d, [bp + -6] ; $i
3674   1AB1 2A            mov b, [d]
3675   1AB2 38 00 00      mov c, 0
3676   1AB5 E7            pop d
3677   1AB6 5A            add d, b
3678   1AB7 E4            pop a
3679   1AB8 DA            push d
3680   1AB9 FD 2E 30 00   mov32 cb, $00000030
3680   1ABD 00 00 
3681   1ABF             ; --- START TERMS
3682   1ABF D7            push a
3683   1AC0 11            mov a, b
3684   1AC1 FA 05 00      lea d, [bp + 5] ; $num
3685   1AC4 2A            mov b, [d]
3686   1AC5 38 00 00      mov c, 0
3687   1AC8             ; --- START FACTORS
3688   1AC8 D7            push a
3689   1AC9 11            mov a, b
3690   1ACA FD 2E 0A 00   mov32 cb, $0000000a
3690   1ACE 00 00 
3691   1AD0 AE            div a, b ; 
3692   1AD1 11            mov a, b
3693   1AD2 27            mov b, a
3694   1AD3 E4            pop a
3695   1AD4             ; --- END FACTORS
3696   1AD4 56            add b, a
3697   1AD5 E4            pop a
3698   1AD6             ; --- END TERMS
3699   1AD6 E7            pop d
3700   1AD7 FD 3E         mov [d], bl
3701   1AD9             ; num = num / 10; 
3702   1AD9 FA 05 00      lea d, [bp + 5] ; $num
3703   1ADC DA            push d
3704   1ADD FA 05 00      lea d, [bp + 5] ; $num
3705   1AE0 2A            mov b, [d]
3706   1AE1 38 00 00      mov c, 0
3707   1AE4             ; --- START FACTORS
3708   1AE4 D7            push a
3709   1AE5 11            mov a, b
3710   1AE6 FD 2E 0A 00   mov32 cb, $0000000a
3710   1AEA 00 00 
3711   1AEC AE            div a, b
3712   1AED 27            mov b, a
3713   1AEE E4            pop a
3714   1AEF             ; --- END FACTORS
3715   1AEF E7            pop d
3716   1AF0 FD 43         mov [d], b
3717   1AF2             ; i++; 
3718   1AF2 FA FA FF      lea d, [bp + -6] ; $i
3719   1AF5 2A            mov b, [d]
3720   1AF6 38 00 00      mov c, 0
3721   1AF9 11            mov a, b
3722   1AFA FD 77         inc b
3723   1AFC FA FA FF      lea d, [bp + -6] ; $i
3724   1AFF FD 43         mov [d], b
3725   1B01 27            mov b, a
3726   1B02 0A 90 1A      jmp _while49_cond
3727   1B05             _while49_exit:
3728   1B05             ; while (i > 0) { 
3729   1B05             _while50_cond:
3730   1B05 FA FA FF      lea d, [bp + -6] ; $i
3731   1B08 2A            mov b, [d]
3732   1B09 38 00 00      mov c, 0
3733   1B0C             ; --- START RELATIONAL
3734   1B0C D7            push a
3735   1B0D 11            mov a, b
3736   1B0E FD 2E 00 00   mov32 cb, $00000000
3736   1B12 00 00 
3737   1B14 B0            cmp a, b
3738   1B15 FD 7F         sgt ; >
3739   1B17 E4            pop a
3740   1B18             ; --- END RELATIONAL
3741   1B18 C0 00 00      cmp b, 0
3742   1B1B C6 4D 1B      je _while50_exit
3743   1B1E             _while50_block:
3744   1B1E             ; i--; 
3745   1B1E FA FA FF      lea d, [bp + -6] ; $i
3746   1B21 2A            mov b, [d]
3747   1B22 38 00 00      mov c, 0
3748   1B25 11            mov a, b
3749   1B26 FD 7D         dec b
3750   1B28 FA FA FF      lea d, [bp + -6] ; $i
3751   1B2B FD 43         mov [d], b
3752   1B2D 27            mov b, a
3753   1B2E             ; putchar(digits[i]); 
3754   1B2E             ; --- START FUNCTION CALL
3755   1B2E FA FC FF      lea d, [bp + -4] ; $digits
3756   1B31 D7            push a
3757   1B32 DA            push d
3758   1B33 FA FA FF      lea d, [bp + -6] ; $i
3759   1B36 2A            mov b, [d]
3760   1B37 38 00 00      mov c, 0
3761   1B3A E7            pop d
3762   1B3B 5A            add d, b
3763   1B3C E4            pop a
3764   1B3D 32            mov bl, [d]
3765   1B3E A7 00         mov bh, 0
3766   1B40 38 00 00      mov c, 0
3767   1B43 DD            push bl
3768   1B44 07 17 1D      call putchar
3769   1B47 51 01 00      add sp, 1
3770   1B4A             ; --- END FUNCTION CALL
3771   1B4A 0A 05 1B      jmp _while50_cond
3772   1B4D             _while50_exit:
3773   1B4D F9            leave
3774   1B4E 09            ret
3775   1B4F             
3776   1B4F             sprint_signed:
3777   1B4F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3778   1B52             ; char digits[5]; 
3779   1B52 52 05 00      sub sp, 5
3780   1B55             ; int i = 0; 
3781   1B55 52 02 00      sub sp, 2
3782   1B58             ; --- START LOCAL VAR INITIALIZATION
3783   1B58 FA FA FF      lea d, [bp + -6] ; $i
3784   1B5B DA            push d
3785   1B5C FD 2E 00 00   mov32 cb, $00000000
3785   1B60 00 00 
3786   1B62 E7            pop d
3787   1B63 FD 43         mov [d], b
3788   1B65             ; --- END LOCAL VAR INITIALIZATION
3789   1B65             ; int len = 0; 
3790   1B65 52 02 00      sub sp, 2
3791   1B68             ; --- START LOCAL VAR INITIALIZATION
3792   1B68 FA F8 FF      lea d, [bp + -8] ; $len
3793   1B6B DA            push d
3794   1B6C FD 2E 00 00   mov32 cb, $00000000
3794   1B70 00 00 
3795   1B72 E7            pop d
3796   1B73 FD 43         mov [d], b
3797   1B75             ; --- END LOCAL VAR INITIALIZATION
3798   1B75             ; if (num < 0) { 
3799   1B75             _if51_cond:
3800   1B75 FA 07 00      lea d, [bp + 7] ; $num
3801   1B78 2A            mov b, [d]
3802   1B79 38 00 00      mov c, 0
3803   1B7C             ; --- START RELATIONAL
3804   1B7C D7            push a
3805   1B7D 11            mov a, b
3806   1B7E FD 2E 00 00   mov32 cb, $00000000
3806   1B82 00 00 
3807   1B84 B0            cmp a, b
3808   1B85 FD 73         slt ; < (signed)
3809   1B87 E4            pop a
3810   1B88             ; --- END RELATIONAL
3811   1B88 C0 00 00      cmp b, 0
3812   1B8B C6 CB 1B      je _if51_else
3813   1B8E             _if51_true:
3814   1B8E             ; *dest++ = '-'; 
3815   1B8E FA 05 00      lea d, [bp + 5] ; $dest
3816   1B91 2A            mov b, [d]
3817   1B92 38 00 00      mov c, 0
3818   1B95 FD 77         inc b
3819   1B97 FA 05 00      lea d, [bp + 5] ; $dest
3820   1B9A FD 3E         mov [d], bl
3821   1B9C FD 7D         dec b
3822   1B9E D8            push b
3823   1B9F FD 2E 2D 00   mov32 cb, $0000002d
3823   1BA3 00 00 
3824   1BA5 E7            pop d
3825   1BA6 FD 3E         mov [d], bl
3826   1BA8             ; num = -num; 
3827   1BA8 FA 07 00      lea d, [bp + 7] ; $num
3828   1BAB DA            push d
3829   1BAC FA 07 00      lea d, [bp + 7] ; $num
3830   1BAF 2A            mov b, [d]
3831   1BB0 38 00 00      mov c, 0
3832   1BB3 FD 97         neg b
3833   1BB5 E7            pop d
3834   1BB6 FD 43         mov [d], b
3835   1BB8             ; len++; 
3836   1BB8 FA F8 FF      lea d, [bp + -8] ; $len
3837   1BBB 2A            mov b, [d]
3838   1BBC 38 00 00      mov c, 0
3839   1BBF 11            mov a, b
3840   1BC0 FD 77         inc b
3841   1BC2 FA F8 FF      lea d, [bp + -8] ; $len
3842   1BC5 FD 43         mov [d], b
3843   1BC7 27            mov b, a
3844   1BC8 0A 1A 1C      jmp _if51_exit
3845   1BCB             _if51_else:
3846   1BCB             ; if (num == 0) { 
3847   1BCB             _if52_cond:
3848   1BCB FA 07 00      lea d, [bp + 7] ; $num
3849   1BCE 2A            mov b, [d]
3850   1BCF 38 00 00      mov c, 0
3851   1BD2             ; --- START RELATIONAL
3852   1BD2 D7            push a
3853   1BD3 11            mov a, b
3854   1BD4 FD 2E 00 00   mov32 cb, $00000000
3854   1BD8 00 00 
3855   1BDA B0            cmp a, b
3856   1BDB FD 71         seq ; ==
3857   1BDD E4            pop a
3858   1BDE             ; --- END RELATIONAL
3859   1BDE C0 00 00      cmp b, 0
3860   1BE1 C6 1A 1C      je _if52_exit
3861   1BE4             _if52_true:
3862   1BE4             ; *dest++ = '0'; 
3863   1BE4 FA 05 00      lea d, [bp + 5] ; $dest
3864   1BE7 2A            mov b, [d]
3865   1BE8 38 00 00      mov c, 0
3866   1BEB FD 77         inc b
3867   1BED FA 05 00      lea d, [bp + 5] ; $dest
3868   1BF0 FD 3E         mov [d], bl
3869   1BF2 FD 7D         dec b
3870   1BF4 D8            push b
3871   1BF5 FD 2E 30 00   mov32 cb, $00000030
3871   1BF9 00 00 
3872   1BFB E7            pop d
3873   1BFC FD 3E         mov [d], bl
3874   1BFE             ; *dest = '\0'; 
3875   1BFE FA 05 00      lea d, [bp + 5] ; $dest
3876   1C01 2A            mov b, [d]
3877   1C02 38 00 00      mov c, 0
3878   1C05 D8            push b
3879   1C06 FD 2E 00 00   mov32 cb, $00000000
3879   1C0A 00 00 
3880   1C0C E7            pop d
3881   1C0D FD 3E         mov [d], bl
3882   1C0F             ; return 1; 
3883   1C0F FD 2E 01 00   mov32 cb, $00000001
3883   1C13 00 00 
3884   1C15 F9            leave
3885   1C16 09            ret
3886   1C17 0A 1A 1C      jmp _if52_exit
3887   1C1A             _if52_exit:
3888   1C1A             _if51_exit:
3889   1C1A             ; while (num > 0) { 
3890   1C1A             _while53_cond:
3891   1C1A FA 07 00      lea d, [bp + 7] ; $num
3892   1C1D 2A            mov b, [d]
3893   1C1E 38 00 00      mov c, 0
3894   1C21             ; --- START RELATIONAL
3895   1C21 D7            push a
3896   1C22 11            mov a, b
3897   1C23 FD 2E 00 00   mov32 cb, $00000000
3897   1C27 00 00 
3898   1C29 B0            cmp a, b
3899   1C2A FD 7F         sgt ; >
3900   1C2C E4            pop a
3901   1C2D             ; --- END RELATIONAL
3902   1C2D C0 00 00      cmp b, 0
3903   1C30 C6 8F 1C      je _while53_exit
3904   1C33             _while53_block:
3905   1C33             ; digits[i] = '0' + (num % 10); 
3906   1C33 FA FC FF      lea d, [bp + -4] ; $digits
3907   1C36 D7            push a
3908   1C37 DA            push d
3909   1C38 FA FA FF      lea d, [bp + -6] ; $i
3910   1C3B 2A            mov b, [d]
3911   1C3C 38 00 00      mov c, 0
3912   1C3F E7            pop d
3913   1C40 5A            add d, b
3914   1C41 E4            pop a
3915   1C42 DA            push d
3916   1C43 FD 2E 30 00   mov32 cb, $00000030
3916   1C47 00 00 
3917   1C49             ; --- START TERMS
3918   1C49 D7            push a
3919   1C4A 11            mov a, b
3920   1C4B FA 07 00      lea d, [bp + 7] ; $num
3921   1C4E 2A            mov b, [d]
3922   1C4F 38 00 00      mov c, 0
3923   1C52             ; --- START FACTORS
3924   1C52 D7            push a
3925   1C53 11            mov a, b
3926   1C54 FD 2E 0A 00   mov32 cb, $0000000a
3926   1C58 00 00 
3927   1C5A AE            div a, b ; 
3928   1C5B 11            mov a, b
3929   1C5C 27            mov b, a
3930   1C5D E4            pop a
3931   1C5E             ; --- END FACTORS
3932   1C5E 56            add b, a
3933   1C5F E4            pop a
3934   1C60             ; --- END TERMS
3935   1C60 E7            pop d
3936   1C61 FD 3E         mov [d], bl
3937   1C63             ; num = num / 10; 
3938   1C63 FA 07 00      lea d, [bp + 7] ; $num
3939   1C66 DA            push d
3940   1C67 FA 07 00      lea d, [bp + 7] ; $num
3941   1C6A 2A            mov b, [d]
3942   1C6B 38 00 00      mov c, 0
3943   1C6E             ; --- START FACTORS
3944   1C6E D7            push a
3945   1C6F 11            mov a, b
3946   1C70 FD 2E 0A 00   mov32 cb, $0000000a
3946   1C74 00 00 
3947   1C76 AE            div a, b
3948   1C77 27            mov b, a
3949   1C78 E4            pop a
3950   1C79             ; --- END FACTORS
3951   1C79 E7            pop d
3952   1C7A FD 43         mov [d], b
3953   1C7C             ; i++; 
3954   1C7C FA FA FF      lea d, [bp + -6] ; $i
3955   1C7F 2A            mov b, [d]
3956   1C80 38 00 00      mov c, 0
3957   1C83 11            mov a, b
3958   1C84 FD 77         inc b
3959   1C86 FA FA FF      lea d, [bp + -6] ; $i
3960   1C89 FD 43         mov [d], b
3961   1C8B 27            mov b, a
3962   1C8C 0A 1A 1C      jmp _while53_cond
3963   1C8F             _while53_exit:
3964   1C8F             ; while (i > 0) { 
3965   1C8F             _while54_cond:
3966   1C8F FA FA FF      lea d, [bp + -6] ; $i
3967   1C92 2A            mov b, [d]
3968   1C93 38 00 00      mov c, 0
3969   1C96             ; --- START RELATIONAL
3970   1C96 D7            push a
3971   1C97 11            mov a, b
3972   1C98 FD 2E 00 00   mov32 cb, $00000000
3972   1C9C 00 00 
3973   1C9E B0            cmp a, b
3974   1C9F FD 7F         sgt ; >
3975   1CA1 E4            pop a
3976   1CA2             ; --- END RELATIONAL
3977   1CA2 C0 00 00      cmp b, 0
3978   1CA5 C6 F4 1C      je _while54_exit
3979   1CA8             _while54_block:
3980   1CA8             ; i--; 
3981   1CA8 FA FA FF      lea d, [bp + -6] ; $i
3982   1CAB 2A            mov b, [d]
3983   1CAC 38 00 00      mov c, 0
3984   1CAF 11            mov a, b
3985   1CB0 FD 7D         dec b
3986   1CB2 FA FA FF      lea d, [bp + -6] ; $i
3987   1CB5 FD 43         mov [d], b
3988   1CB7 27            mov b, a
3989   1CB8             ; *dest++ = digits[i]; 
3990   1CB8 FA 05 00      lea d, [bp + 5] ; $dest
3991   1CBB 2A            mov b, [d]
3992   1CBC 38 00 00      mov c, 0
3993   1CBF FD 77         inc b
3994   1CC1 FA 05 00      lea d, [bp + 5] ; $dest
3995   1CC4 FD 3E         mov [d], bl
3996   1CC6 FD 7D         dec b
3997   1CC8 D8            push b
3998   1CC9 FA FC FF      lea d, [bp + -4] ; $digits
3999   1CCC D7            push a
4000   1CCD DA            push d
4001   1CCE FA FA FF      lea d, [bp + -6] ; $i
4002   1CD1 2A            mov b, [d]
4003   1CD2 38 00 00      mov c, 0
4004   1CD5 E7            pop d
4005   1CD6 5A            add d, b
4006   1CD7 E4            pop a
4007   1CD8 32            mov bl, [d]
4008   1CD9 A7 00         mov bh, 0
4009   1CDB 38 00 00      mov c, 0
4010   1CDE E7            pop d
4011   1CDF FD 3E         mov [d], bl
4012   1CE1             ; len++; 
4013   1CE1 FA F8 FF      lea d, [bp + -8] ; $len
4014   1CE4 2A            mov b, [d]
4015   1CE5 38 00 00      mov c, 0
4016   1CE8 11            mov a, b
4017   1CE9 FD 77         inc b
4018   1CEB FA F8 FF      lea d, [bp + -8] ; $len
4019   1CEE FD 43         mov [d], b
4020   1CF0 27            mov b, a
4021   1CF1 0A 8F 1C      jmp _while54_cond
4022   1CF4             _while54_exit:
4023   1CF4             ; *dest = '\0'; 
4024   1CF4 FA 05 00      lea d, [bp + 5] ; $dest
4025   1CF7 2A            mov b, [d]
4026   1CF8 38 00 00      mov c, 0
4027   1CFB D8            push b
4028   1CFC FD 2E 00 00   mov32 cb, $00000000
4028   1D00 00 00 
4029   1D02 E7            pop d
4030   1D03 FD 3E         mov [d], bl
4031   1D05             ; return len; 
4032   1D05 FA F8 FF      lea d, [bp + -8] ; $len
4033   1D08 2A            mov b, [d]
4034   1D09 38 00 00      mov c, 0
4035   1D0C F9            leave
4036   1D0D 09            ret
4037   1D0E             
4038   1D0E             date:
4039   1D0E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4040   1D11             
4041   1D11             ; --- BEGIN INLINE ASM SEGMENT
4042   1D11 19 00         mov al, 0 
4043   1D13 05 07         syscall sys_datetime
4044   1D15             ; --- END INLINE ASM SEGMENT
4045   1D15             
4046   1D15 F9            leave
4047   1D16 09            ret
4048   1D17             
4049   1D17             putchar:
4050   1D17 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4051   1D1A             
4052   1D1A             ; --- BEGIN INLINE ASM SEGMENT
4053   1D1A FA 05 00      lea d, [bp + 5] ; $c
4054   1D1D 1E            mov al, [d]
4055   1D1E 23            mov ah, al
4056   1D1F 07 26 1F      call _putchar
4057   1D22             ; --- END INLINE ASM SEGMENT
4058   1D22             
4059   1D22 F9            leave
4060   1D23 09            ret
4061   1D24             
4062   1D24             getchar:
4063   1D24 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4064   1D27             ; char c; 
4065   1D27 52 01 00      sub sp, 1
4066   1D2A             
4067   1D2A             ; --- BEGIN INLINE ASM SEGMENT
4068   1D2A 07 1F 1F      call getch
4069   1D2D 1A            mov al, ah
4070   1D2E FA 00 00      lea d, [bp + 0] ; $c
4071   1D31 3E            mov [d], al
4072   1D32             ; --- END INLINE ASM SEGMENT
4073   1D32             
4074   1D32             ; return c; 
4075   1D32 FA 00 00      lea d, [bp + 0] ; $c
4076   1D35 32            mov bl, [d]
4077   1D36 A7 00         mov bh, 0
4078   1D38 38 00 00      mov c, 0
4079   1D3B F9            leave
4080   1D3C 09            ret
4081   1D3D             
4082   1D3D             scann:
4083   1D3D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4084   1D40             ; int m; 
4085   1D40 52 02 00      sub sp, 2
4086   1D43             
4087   1D43             ; --- BEGIN INLINE ASM SEGMENT
4088   1D43 07 6A 21      call scan_u16d
4089   1D46 FA FF FF      lea d, [bp + -1] ; $m
4090   1D49 43            mov [d], a
4091   1D4A             ; --- END INLINE ASM SEGMENT
4092   1D4A             
4093   1D4A             ; return m; 
4094   1D4A FA FF FF      lea d, [bp + -1] ; $m
4095   1D4D 2A            mov b, [d]
4096   1D4E 38 00 00      mov c, 0
4097   1D51 F9            leave
4098   1D52 09            ret
4099   1D53             
4100   1D53             puts:
4101   1D53 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4102   1D56             
4103   1D56             ; --- BEGIN INLINE ASM SEGMENT
4104   1D56 FA 05 00      lea d, [bp + 5] ; $s
4105   1D59 15            mov a, [d]
4106   1D5A 3C            mov d, a
4107   1D5B 07 70 20      call _puts
4108   1D5E 10 00 0A      mov a, $0A00
4109   1D61 05 03         syscall sys_io
4110   1D63             ; --- END INLINE ASM SEGMENT
4111   1D63             
4112   1D63 F9            leave
4113   1D64 09            ret
4114   1D65             
4115   1D65             print:
4116   1D65 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4117   1D68             
4118   1D68             ; --- BEGIN INLINE ASM SEGMENT
4119   1D68 FA 05 00      lea d, [bp + 5] ; $s
4120   1D6B FD 2A         mov d, [d]
4121   1D6D 07 70 20      call _puts
4122   1D70             ; --- END INLINE ASM SEGMENT
4123   1D70             
4124   1D70 F9            leave
4125   1D71 09            ret
4126   1D72             
4127   1D72             getparam:
4128   1D72 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4129   1D75             ; char data; 
4130   1D75 52 01 00      sub sp, 1
4131   1D78             
4132   1D78             ; --- BEGIN INLINE ASM SEGMENT
4133   1D78 19 04         mov al, 4
4134   1D7A FA 05 00      lea d, [bp + 5] ; $address
4135   1D7D FD 2A         mov d, [d]
4136   1D7F 05 0C         syscall sys_system
4137   1D81 FA 00 00      lea d, [bp + 0] ; $data
4138   1D84 FD 3E         mov [d], bl
4139   1D86             ; --- END INLINE ASM SEGMENT
4140   1D86             
4141   1D86             ; return data; 
4142   1D86 FA 00 00      lea d, [bp + 0] ; $data
4143   1D89 32            mov bl, [d]
4144   1D8A A7 00         mov bh, 0
4145   1D8C 38 00 00      mov c, 0
4146   1D8F F9            leave
4147   1D90 09            ret
4148   1D91             
4149   1D91             clear:
4150   1D91 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4151   1D94             ; print("\033[2J\033[H"); 
4152   1D94             ; --- START FUNCTION CALL
4153   1D94 26 55 2E      mov b, _s5 ; "\033[2J\033[H"
4154   1D97 FD AB         swp b
4155   1D99 D8            push b
4156   1D9A 07 65 1D      call print
4157   1D9D 51 02 00      add sp, 2
4158   1DA0             ; --- END FUNCTION CALL
4159   1DA0 F9            leave
4160   1DA1 09            ret
4161   1DA2             
4162   1DA2             abs:
4163   1DA2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4164   1DA5             ; return i < 0 ? -i : i; 
4165   1DA5             _ternary55_cond:
4166   1DA5 FA 05 00      lea d, [bp + 5] ; $i
4167   1DA8 2A            mov b, [d]
4168   1DA9 38 00 00      mov c, 0
4169   1DAC             ; --- START RELATIONAL
4170   1DAC D7            push a
4171   1DAD 11            mov a, b
4172   1DAE FD 2E 00 00   mov32 cb, $00000000
4172   1DB2 00 00 
4173   1DB4 B0            cmp a, b
4174   1DB5 FD 73         slt ; < (signed)
4175   1DB7 E4            pop a
4176   1DB8             ; --- END RELATIONAL
4177   1DB8 C0 00 00      cmp b, 0
4178   1DBB C6 CA 1D      je _ternary55_false
4179   1DBE             _ternary55_true:
4180   1DBE FA 05 00      lea d, [bp + 5] ; $i
4181   1DC1 2A            mov b, [d]
4182   1DC2 38 00 00      mov c, 0
4183   1DC5 FD 97         neg b
4184   1DC7 0A D1 1D      jmp _ternary55_exit
4185   1DCA             _ternary55_false:
4186   1DCA FA 05 00      lea d, [bp + 5] ; $i
4187   1DCD 2A            mov b, [d]
4188   1DCE 38 00 00      mov c, 0
4189   1DD1             _ternary55_exit:
4190   1DD1 F9            leave
4191   1DD2 09            ret
4192   1DD3             
4193   1DD3             loadfile:
4194   1DD3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4195   1DD6             
4196   1DD6             ; --- BEGIN INLINE ASM SEGMENT
4197   1DD6 FA 07 00      lea d, [bp + 7] ; $destination
4198   1DD9 15            mov a, [d]
4199   1DDA 4F            mov di, a
4200   1DDB FA 05 00      lea d, [bp + 5] ; $filename
4201   1DDE FD 2A         mov d, [d]
4202   1DE0 19 14         mov al, 20
4203   1DE2 05 04         syscall sys_filesystem
4204   1DE4             ; --- END INLINE ASM SEGMENT
4205   1DE4             
4206   1DE4 F9            leave
4207   1DE5 09            ret
4208   1DE6             
4209   1DE6             create_file:
4210   1DE6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4211   1DE9 F9            leave
4212   1DEA 09            ret
4213   1DEB             
4214   1DEB             delete_file:
4215   1DEB F8 00 00      enter 0 ; (push bp; mov bp, sp)
4216   1DEE             
4217   1DEE             ; --- BEGIN INLINE ASM SEGMENT
4218   1DEE FA 05 00      lea d, [bp + 5] ; $filename
4219   1DF1 19 0A         mov al, 10
4220   1DF3 05 04         syscall sys_filesystem
4221   1DF5             ; --- END INLINE ASM SEGMENT
4222   1DF5             
4223   1DF5 F9            leave
4224   1DF6 09            ret
4225   1DF7             
4226   1DF7             load_hex:
4227   1DF7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4228   1DFA             ; char *temp; 
4229   1DFA 52 02 00      sub sp, 2
4230   1DFD             ; temp = alloc(32768); 
4231   1DFD FA FF FF      lea d, [bp + -1] ; $temp
4232   1E00 DA            push d
4233   1E01             ; --- START FUNCTION CALL
4234   1E01 FD 2E 00 80   mov32 cb, $00008000
4234   1E05 00 00 
4235   1E07 FD AB         swp b
4236   1E09 D8            push b
4237   1E0A 07 D6 08      call alloc
4238   1E0D 51 02 00      add sp, 2
4239   1E10             ; --- END FUNCTION CALL
4240   1E10 E7            pop d
4241   1E11 FD 43         mov [d], b
4242   1E13             
4243   1E13             ; --- BEGIN INLINE ASM SEGMENT
4244   1E13               
4245   1E13               
4246   1E13               
4247   1E13             _load_hex:
4248   1E13 FA 05 00      lea d, [bp + 5] ; $destination
4249   1E16 FD 2A         mov d, [d]
4250   1E18 FD 50         mov di, d
4251   1E1A FA FF FF      lea d, [bp + -1] ; $temp
4252   1E1D FD 2A         mov d, [d]
4253   1E1F 38 00 00      mov c, 0
4254   1E22 48            mov a, sp
4255   1E23 77            inc a
4256   1E24 3C            mov d, a          
4257   1E25 07 2D 1F      call _gets        
4258   1E28 4D            mov si, a
4259   1E29             __load_hex_loop:
4260   1E29 F6            lodsb             
4261   1E2A B9 00         cmp al, 0         
4262   1E2C C6 3A 1E      jz __load_hex_ret
4263   1E2F 36            mov bh, al
4264   1E30 F6            lodsb
4265   1E31 2F            mov bl, al
4266   1E32 07 E4 1E      call _atoi        
4267   1E35 F7            stosb             
4268   1E36 78            inc c
4269   1E37 0A 29 1E      jmp __load_hex_loop
4270   1E3A             __load_hex_ret:
4271   1E3A             ; --- END INLINE ASM SEGMENT
4272   1E3A             
4273   1E3A F9            leave
4274   1E3B 09            ret
4275   1E3C             
4276   1E3C             include_stdio_asm:
4277   1E3C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4278   1E3F             
4279   1E3F             ; --- BEGIN INLINE ASM SEGMENT
4280   1E3F             .include "lib/asm/stdio.asm"
0001+  1E3F             ;-----------------------------------------------------------------------------
0002+  1E3F             ; stdio.s
0003+  1E3F             ;-----------------------------------------------------------------------------
0004+  1E3F             .include "lib/asm/string.asm"
0001++ 1E3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1E3F             ; string.s
0003++ 1E3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1E3F             
0005++ 1E3F             
0006++ 1E3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1E3F             ; _strrev
0008++ 1E3F             ; reverse a string
0009++ 1E3F             ; D = string address
0010++ 1E3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1E3F             ; 01234
0012++ 1E3F             _strrev:
0013++ 1E3F 4B          	pusha
0014++ 1E40 07 86 1E    	call _strlen	; length in C
0015++ 1E43 12          	mov a, c
0016++ 1E44 AF 01 00    	cmp a, 1
0017++ 1E47 D0 61 1E    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1E4A 7D          	dec a
0019++ 1E4B FD 4E       	mov si, d	; beginning of string
0020++ 1E4D FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1E4F 59          	add d, a	; end of string
0022++ 1E50 12          	mov a, c
0023++ 1E51 FD 9B       	shr a		; divide by 2
0024++ 1E53 39          	mov c, a	; C now counts the steps
0025++ 1E54             _strrev_L0:
0026++ 1E54 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1E55 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1E56 3E          	mov [d], al	; store left char into right side
0029++ 1E57 1B          	mov al, bl
0030++ 1E58 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1E59 7E          	dec c
0032++ 1E5A 7F          	dec d
0033++ 1E5B C2 00 00    	cmp c, 0
0034++ 1E5E C7 54 1E    	jne _strrev_L0
0035++ 1E61             _strrev_end:
0036++ 1E61 4C          	popa
0037++ 1E62 09          	ret
0038++ 1E63             	
0039++ 1E63             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1E63             ; _strchr
0041++ 1E63             ; search string in D for char in AL
0042++ 1E63             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1E63             _strchr:
0044++ 1E63             _strchr_L0:
0045++ 1E63 32          	mov bl, [d]
0046++ 1E64 C1 00       	cmp bl, 0
0047++ 1E66 C6 71 1E    	je _strchr_end
0048++ 1E69 BA          	cmp al, bl
0049++ 1E6A C6 71 1E    	je _strchr_end
0050++ 1E6D 79          	inc d
0051++ 1E6E 0A 63 1E    	jmp _strchr_L0
0052++ 1E71             _strchr_end:
0053++ 1E71 1B          	mov al, bl
0054++ 1E72 09          	ret
0055++ 1E73             
0056++ 1E73             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1E73             ; _strstr
0058++ 1E73             ; find sub-string
0059++ 1E73             ; str1 in SI
0060++ 1E73             ; str2 in DI
0061++ 1E73             ; SI points to end of source string
0062++ 1E73             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1E73             _strstr:
0064++ 1E73 DB          	push al
0065++ 1E74 DA          	push d
0066++ 1E75 E3          	push di
0067++ 1E76             _strstr_loop:
0068++ 1E76 F3          	cmpsb					; compare a byte of the strings
0069++ 1E77 C7 82 1E    	jne _strstr_ret
0070++ 1E7A FC 00 00    	lea d, [di + 0]
0071++ 1E7D BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1E7F C7 76 1E    	jne _strstr_loop				; equal chars but not at end
0073++ 1E82             _strstr_ret:
0074++ 1E82 F0          	pop di
0075++ 1E83 E7          	pop d
0076++ 1E84 E8          	pop al
0077++ 1E85 09          	ret
0078++ 1E86             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1E86             ; length of null terminated string
0080++ 1E86             ; result in C
0081++ 1E86             ; pointer in D
0082++ 1E86             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1E86             _strlen:
0084++ 1E86 DA          	push d
0085++ 1E87 38 00 00    	mov c, 0
0086++ 1E8A             _strlen_L1:
0087++ 1E8A BD 00       	cmp byte [d], 0
0088++ 1E8C C6 94 1E    	je _strlen_ret
0089++ 1E8F 79          	inc d
0090++ 1E90 78          	inc c
0091++ 1E91 0A 8A 1E    	jmp _strlen_L1
0092++ 1E94             _strlen_ret:
0093++ 1E94 E7          	pop d
0094++ 1E95 09          	ret
0095++ 1E96             
0096++ 1E96             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1E96             ; STRCMP
0098++ 1E96             ; compare two strings
0099++ 1E96             ; str1 in SI
0100++ 1E96             ; str2 in DI
0101++ 1E96             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1E96             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1E96             _strcmp:
0104++ 1E96 DB          	push al
0105++ 1E97 DA          	push d
0106++ 1E98 E3          	push di
0107++ 1E99 E2          	push si
0108++ 1E9A             _strcmp_loop:
0109++ 1E9A F3          	cmpsb					; compare a byte of the strings
0110++ 1E9B C7 A6 1E    	jne _strcmp_ret
0111++ 1E9E FB FF FF    	lea d, [si +- 1]
0112++ 1EA1 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1EA3 C7 9A 1E    	jne _strcmp_loop				; equal chars but not at end
0114++ 1EA6             _strcmp_ret:
0115++ 1EA6 EF          	pop si
0116++ 1EA7 F0          	pop di
0117++ 1EA8 E7          	pop d
0118++ 1EA9 E8          	pop al
0119++ 1EAA 09          	ret
0120++ 1EAB             
0121++ 1EAB             
0122++ 1EAB             ; STRCPY
0123++ 1EAB             ; copy null terminated string from SI to DI
0124++ 1EAB             ; source in SI
0125++ 1EAB             ; destination in DI
0126++ 1EAB             _strcpy:
0127++ 1EAB E2          	push si
0128++ 1EAC E3          	push di
0129++ 1EAD DB          	push al
0130++ 1EAE             _strcpy_L1:
0131++ 1EAE F6          	lodsb
0132++ 1EAF F7          	stosb
0133++ 1EB0 B9 00       	cmp al, 0
0134++ 1EB2 C7 AE 1E    	jne _strcpy_L1
0135++ 1EB5             _strcpy_end:
0136++ 1EB5 E8          	pop al
0137++ 1EB6 F0          	pop di
0138++ 1EB7 EF          	pop si
0139++ 1EB8 09          	ret
0140++ 1EB9             
0141++ 1EB9             ; STRCAT
0142++ 1EB9             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1EB9             ; source in SI
0144++ 1EB9             ; destination in DI
0145++ 1EB9             _strcat:
0146++ 1EB9 E2          	push si
0147++ 1EBA E3          	push di
0148++ 1EBB D7          	push a
0149++ 1EBC DA          	push d
0150++ 1EBD 50          	mov a, di
0151++ 1EBE 3C          	mov d, a
0152++ 1EBF             _strcat_goto_end_L1:
0153++ 1EBF BD 00       	cmp byte[d], 0
0154++ 1EC1 C6 C8 1E    	je _strcat_start
0155++ 1EC4 79          	inc d
0156++ 1EC5 0A BF 1E    	jmp _strcat_goto_end_L1
0157++ 1EC8             _strcat_start:
0158++ 1EC8 FD 50       	mov di, d
0159++ 1ECA             _strcat_L1:
0160++ 1ECA F6          	lodsb
0161++ 1ECB F7          	stosb
0162++ 1ECC B9 00       	cmp al, 0
0163++ 1ECE C7 CA 1E    	jne _strcat_L1
0164++ 1ED1             _strcat_end:
0165++ 1ED1 E7          	pop d
0166++ 1ED2 E4          	pop a
0167++ 1ED3 F0          	pop di
0168++ 1ED4 EF          	pop si
0169++ 1ED5 09          	ret
0170++ 1ED6             
0171++ 1ED6             
0005+  1ED6             
0006+  1ED6             ;-----------------------------------------------------------------------------
0007+  1ED6             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1ED6             ; ASCII in BL
0009+  1ED6             ; result in AL
0010+  1ED6             ; ascii for F = 0100 0110
0011+  1ED6             ; ascii for 9 = 0011 1001
0012+  1ED6             ;-----------------------------------------------------------------------------
0013+  1ED6             hex_ascii_encode:
0014+  1ED6 1B            mov al, bl
0015+  1ED7 93 40         test al, $40        ; test if letter or number
0016+  1ED9 C7 DF 1E      jnz hex_letter
0017+  1EDC 87 0F         and al, $0F        ; get number
0018+  1EDE 09            ret
0019+  1EDF             hex_letter:
0020+  1EDF 87 0F         and al, $0F        ; get letter
0021+  1EE1 6A 09         add al, 9
0022+  1EE3 09            ret
0023+  1EE4             
0024+  1EE4             ;-----------------------------------------------------------------------------
0025+  1EE4             ; ATOI
0026+  1EE4             ; 2 letter hex string in B
0027+  1EE4             ; 8bit integer returned in AL
0028+  1EE4             ;-----------------------------------------------------------------------------
0029+  1EE4             _atoi:
0030+  1EE4 D8            push b
0031+  1EE5 07 D6 1E      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1EE8 30            mov bl, bh
0033+  1EE9 DB            push al          ; save a
0034+  1EEA 07 D6 1E      call hex_ascii_encode
0035+  1EED EA            pop bl  
0036+  1EEE FD 9E 04      shl al, 4
0037+  1EF1 8C            or al, bl
0038+  1EF2 E5            pop b
0039+  1EF3 09            ret  
0040+  1EF4             
0041+  1EF4             
0042+  1EF4             ;-----------------------------------------------------------------------------
0043+  1EF4             ; ITOA
0044+  1EF4             ; 8bit value in BL
0045+  1EF4             ; 2 byte ASCII result in A
0046+  1EF4             ;-----------------------------------------------------------------------------
0047+  1EF4             _itoa:
0048+  1EF4 DA            push d
0049+  1EF5 D8            push b
0050+  1EF6 A7 00         mov bh, 0
0051+  1EF8 FD A4 04      shr bl, 4  
0052+  1EFB 74            mov d, b
0053+  1EFC 1F A4 21      mov al, [d + s_hex_digits]
0054+  1EFF 23            mov ah, al
0055+  1F00               
0056+  1F00 E5            pop b
0057+  1F01 D8            push b
0058+  1F02 A7 00         mov bh, 0
0059+  1F04 FD 87 0F      and bl, $0F
0060+  1F07 74            mov d, b
0061+  1F08 1F A4 21      mov al, [d + s_hex_digits]
0062+  1F0B E5            pop b
0063+  1F0C E7            pop d
0064+  1F0D 09            ret
0065+  1F0E             
0066+  1F0E             ;-----------------------------------------------------------------------------
0067+  1F0E             ; HEX STRING TO BINARY
0068+  1F0E             ; di = destination address
0069+  1F0E             ; si = source
0070+  1F0E             ;-----------------------------------------------------------------------------
0071+  1F0E             _hex_to_int:
0072+  1F0E             _hex_to_int_L1:
0073+  1F0E F6            lodsb          ; load from [SI] to AL
0074+  1F0F B9 00         cmp al, 0        ; check if ASCII 0
0075+  1F11 C6 1E 1F      jz _hex_to_int_ret
0076+  1F14 36            mov bh, al
0077+  1F15 F6            lodsb
0078+  1F16 2F            mov bl, al
0079+  1F17 07 E4 1E      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1F1A F7            stosb          ; store AL to [DI]
0081+  1F1B 0A 0E 1F      jmp _hex_to_int_L1
0082+  1F1E             _hex_to_int_ret:
0083+  1F1E 09            ret    
0084+  1F1F             
0085+  1F1F             ;-----------------------------------------------------------------------------
0086+  1F1F             ; GETCHAR
0087+  1F1F             ; char in ah
0088+  1F1F             ;-----------------------------------------------------------------------------
0089+  1F1F             getch:
0090+  1F1F DB            push al
0091+  1F20             getch_retry:
0092+  1F20 19 01         mov al, 1
0093+  1F22 05 03         syscall sys_io      ; receive in AH
0094+  1F24 E8            pop al
0095+  1F25 09            ret
0096+  1F26             
0097+  1F26             ;-----------------------------------------------------------------------------
0098+  1F26             ; PUTCHAR
0099+  1F26             ; char in ah
0100+  1F26             ;-----------------------------------------------------------------------------
0101+  1F26             _putchar:
0102+  1F26 D7            push a
0103+  1F27 19 00         mov al, 0
0104+  1F29 05 03         syscall sys_io      ; char in AH
0105+  1F2B E4            pop a
0106+  1F2C 09            ret
0107+  1F2D             
0108+  1F2D             ;-----------------------------------------------------------------------------
0109+  1F2D             ;; INPUT A STRING
0110+  1F2D             ;; terminates with null
0111+  1F2D             ;; pointer in D
0112+  1F2D             ;-----------------------------------------------------------------------------
0113+  1F2D             _gets:
0114+  1F2D D7            push a
0115+  1F2E DA            push d
0116+  1F2F             _gets_loop:
0117+  1F2F 19 01         mov al, 1
0118+  1F31 05 03         syscall sys_io      ; receive in AH
0119+  1F33 B9 00         cmp al, 0        ; check error code (AL)
0120+  1F35 C6 2F 1F      je _gets_loop      ; if no char received, retry
0121+  1F38             
0122+  1F38 76 1B         cmp ah, 27
0123+  1F3A C6 5B 1F      je _gets_ansi_esc
0124+  1F3D 76 0A         cmp ah, $0A        ; LF
0125+  1F3F C6 C6 1F      je _gets_end
0126+  1F42 76 0D         cmp ah, $0D        ; CR
0127+  1F44 C6 C6 1F      je _gets_end
0128+  1F47 76 5C         cmp ah, $5C        ; '\\'
0129+  1F49 C6 87 1F      je _gets_escape
0130+  1F4C               
0131+  1F4C 76 08         cmp ah, $08      ; check for backspace
0132+  1F4E C6 57 1F      je _gets_backspace
0133+  1F51             
0134+  1F51 1A            mov al, ah
0135+  1F52 3E            mov [d], al
0136+  1F53 79            inc d
0137+  1F54 0A 2F 1F      jmp _gets_loop
0138+  1F57             _gets_backspace:
0139+  1F57 7F            dec d
0140+  1F58 0A 2F 1F      jmp _gets_loop
0141+  1F5B             _gets_ansi_esc:
0142+  1F5B 19 01         mov al, 1
0143+  1F5D 05 03         syscall sys_io        ; receive in AH without echo
0144+  1F5F B9 00         cmp al, 0          ; check error code (AL)
0145+  1F61 C6 5B 1F      je _gets_ansi_esc    ; if no char received, retry
0146+  1F64 76 5B         cmp ah, '['
0147+  1F66 C7 2F 1F      jne _gets_loop
0148+  1F69             _gets_ansi_esc_2:
0149+  1F69 19 01         mov al, 1
0150+  1F6B 05 03         syscall sys_io          ; receive in AH without echo
0151+  1F6D B9 00         cmp al, 0            ; check error code (AL)
0152+  1F6F C6 69 1F      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1F72 76 44         cmp ah, 'D'
0154+  1F74 C6 7F 1F      je _gets_left_arrow
0155+  1F77 76 43         cmp ah, 'C'
0156+  1F79 C6 83 1F      je _gets_right_arrow
0157+  1F7C 0A 2F 1F      jmp _gets_loop
0158+  1F7F             _gets_left_arrow:
0159+  1F7F 7F            dec d
0160+  1F80 0A 2F 1F      jmp _gets_loop
0161+  1F83             _gets_right_arrow:
0162+  1F83 79            inc d
0163+  1F84 0A 2F 1F      jmp _gets_loop
0164+  1F87             _gets_escape:
0165+  1F87 19 01         mov al, 1
0166+  1F89 05 03         syscall sys_io      ; receive in AH
0167+  1F8B B9 00         cmp al, 0        ; check error code (AL)
0168+  1F8D C6 87 1F      je _gets_escape      ; if no char received, retry
0169+  1F90 76 6E         cmp ah, 'n'
0170+  1F92 C6 B1 1F      je _gets_LF
0171+  1F95 76 72         cmp ah, 'r'
0172+  1F97 C6 B8 1F      je _gets_CR
0173+  1F9A 76 30         cmp ah, '0'
0174+  1F9C C6 BF 1F      je _gets_NULL
0175+  1F9F 76 5C         cmp ah, $5C  ; '\'
0176+  1FA1 C6 AA 1F      je _gets_slash
0177+  1FA4 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1FA5 3E            mov [d], al
0179+  1FA6 79            inc d
0180+  1FA7 0A 2F 1F      jmp _gets_loop
0181+  1FAA             _gets_slash:
0182+  1FAA 19 5C         mov al, $5C
0183+  1FAC 3E            mov [d], al
0184+  1FAD 79            inc d
0185+  1FAE 0A 2F 1F      jmp _gets_loop
0186+  1FB1             _gets_LF:
0187+  1FB1 19 0A         mov al, $0A
0188+  1FB3 3E            mov [d], al
0189+  1FB4 79            inc d
0190+  1FB5 0A 2F 1F      jmp _gets_loop
0191+  1FB8             _gets_CR:
0192+  1FB8 19 0D         mov al, $0D
0193+  1FBA 3E            mov [d], al
0194+  1FBB 79            inc d
0195+  1FBC 0A 2F 1F      jmp _gets_loop
0196+  1FBF             _gets_NULL:
0197+  1FBF 19 00         mov al, $00
0198+  1FC1 3E            mov [d], al
0199+  1FC2 79            inc d
0200+  1FC3 0A 2F 1F      jmp _gets_loop
0201+  1FC6             _gets_end:
0202+  1FC6 19 00         mov al, 0
0203+  1FC8 3E            mov [d], al        ; terminate string
0204+  1FC9 E7            pop d
0205+  1FCA E4            pop a
0206+  1FCB 09            ret
0207+  1FCC             
0208+  1FCC             ;-----------------------------------------------------------------------------
0209+  1FCC             ;; INPUT TEXT
0210+  1FCC             ;; terminated with CTRL+D
0211+  1FCC             ;; pointer in D
0212+  1FCC             ;-----------------------------------------------------------------------------
0213+  1FCC             _gettxt:
0214+  1FCC D7            push a
0215+  1FCD DA            push d
0216+  1FCE             _gettxt_loop:
0217+  1FCE 19 01         mov al, 1
0218+  1FD0 05 03         syscall sys_io      ; receive in AH
0219+  1FD2 B9 00         cmp al, 0        ; check error code (AL)
0220+  1FD4 C6 CE 1F      je _gettxt_loop    ; if no char received, retry
0221+  1FD7 76 04         cmp ah, 4      ; EOT
0222+  1FD9 C6 17 20      je _gettxt_end
0223+  1FDC 76 08         cmp ah, $08      ; check for backspace
0224+  1FDE C6 13 20      je _gettxt_backspace
0225+  1FE1 76 5C         cmp ah, $5C        ; '\'
0226+  1FE3 C6 EC 1F      je _gettxt_escape
0227+  1FE6 1A            mov al, ah
0228+  1FE7 3E            mov [d], al
0229+  1FE8 79            inc d
0230+  1FE9 0A CE 1F      jmp _gettxt_loop
0231+  1FEC             _gettxt_escape:
0232+  1FEC 19 01         mov al, 1
0233+  1FEE 05 03         syscall sys_io      ; receive in AH
0234+  1FF0 B9 00         cmp al, 0        ; check error code (AL)
0235+  1FF2 C6 EC 1F      je _gettxt_escape    ; if no char received, retry
0236+  1FF5 76 6E         cmp ah, 'n'
0237+  1FF7 C6 05 20      je _gettxt_LF
0238+  1FFA 76 72         cmp ah, 'r'
0239+  1FFC C6 0C 20      je _gettxt_CR
0240+  1FFF 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  2000 3E            mov [d], al
0242+  2001 79            inc d
0243+  2002 0A CE 1F      jmp _gettxt_loop
0244+  2005             _gettxt_LF:
0245+  2005 19 0A         mov al, $0A
0246+  2007 3E            mov [d], al
0247+  2008 79            inc d
0248+  2009 0A CE 1F      jmp _gettxt_loop
0249+  200C             _gettxt_CR:
0250+  200C 19 0D         mov al, $0D
0251+  200E 3E            mov [d], al
0252+  200F 79            inc d
0253+  2010 0A CE 1F      jmp _gettxt_loop
0254+  2013             _gettxt_backspace:
0255+  2013 7F            dec d
0256+  2014 0A CE 1F      jmp _gettxt_loop
0257+  2017             _gettxt_end:
0258+  2017 19 00         mov al, 0
0259+  2019 3E            mov [d], al        ; terminate string
0260+  201A E7            pop d
0261+  201B E4            pop a
0262+  201C 09            ret
0263+  201D             
0264+  201D             ;-----------------------------------------------------------------------------
0265+  201D             ; PRINT NEW LINE
0266+  201D             ;-----------------------------------------------------------------------------
0267+  201D             printnl:
0268+  201D D7            push a
0269+  201E 10 00 0A      mov a, $0A00
0270+  2021 05 03         syscall sys_io
0271+  2023 10 00 0D      mov a, $0D00
0272+  2026 05 03         syscall sys_io
0273+  2028 E4            pop a
0274+  2029 09            ret
0275+  202A             
0276+  202A             ;-----------------------------------------------------------------------------
0277+  202A             ; _strtoint
0278+  202A             ; 4 digit hex string number in d
0279+  202A             ; integer returned in A
0280+  202A             ;-----------------------------------------------------------------------------
0281+  202A             _strtointx:
0282+  202A D8            push b
0283+  202B 32            mov bl, [d]
0284+  202C 37            mov bh, bl
0285+  202D 33 01 00      mov bl, [d + 1]
0286+  2030 07 E4 1E      call _atoi        ; convert to int in AL
0287+  2033 23            mov ah, al        ; move to AH
0288+  2034 33 02 00      mov bl, [d + 2]
0289+  2037 37            mov bh, bl
0290+  2038 33 03 00      mov bl, [d + 3]
0291+  203B 07 E4 1E      call _atoi        ; convert to int in AL
0292+  203E E5            pop b
0293+  203F 09            ret
0294+  2040             
0295+  2040             ;-----------------------------------------------------------------------------
0296+  2040             ; _strtoint
0297+  2040             ; 5 digit base10 string number in d
0298+  2040             ; integer returned in A
0299+  2040             ;-----------------------------------------------------------------------------
0300+  2040             _strtoint:
0301+  2040 E2            push si
0302+  2041 D8            push b
0303+  2042 D9            push c
0304+  2043 DA            push d
0305+  2044 07 86 1E      call _strlen      ; get string length in C
0306+  2047 7E            dec c
0307+  2048 FD 4E         mov si, d
0308+  204A 12            mov a, c
0309+  204B FD 99         shl a
0310+  204D 3B BC 21      mov d, table_power
0311+  2050 59            add d, a
0312+  2051 38 00 00      mov c, 0
0313+  2054             _strtoint_L0:
0314+  2054 F6            lodsb      ; load ASCII to al
0315+  2055 B9 00         cmp al, 0
0316+  2057 C6 6A 20      je _strtoint_end
0317+  205A 6F 30         sub al, $30    ; make into integer
0318+  205C 22 00         mov ah, 0
0319+  205E 2A            mov b, [d]
0320+  205F AC            mul a, b      ; result in B since it fits in 16bits
0321+  2060 11            mov a, b
0322+  2061 28            mov b, c
0323+  2062 54            add a, b
0324+  2063 39            mov c, a
0325+  2064 63 02 00      sub d, 2
0326+  2067 0A 54 20      jmp _strtoint_L0
0327+  206A             _strtoint_end:
0328+  206A 12            mov a, c
0329+  206B E7            pop d
0330+  206C E6            pop c
0331+  206D E5            pop b
0332+  206E EF            pop si
0333+  206F 09            ret
0334+  2070             
0335+  2070             ;-----------------------------------------------------------------------------
0336+  2070             ; PRINT NULL TERMINATED STRING
0337+  2070             ; pointer in D
0338+  2070             ;-----------------------------------------------------------------------------
0339+  2070             _puts:
0340+  2070 D7            push a
0341+  2071 DA            push d
0342+  2072             _puts_L1:
0343+  2072 1E            mov al, [d]
0344+  2073 B9 00         cmp al, 0
0345+  2075 C6 81 20      jz _puts_END
0346+  2078 23            mov ah, al
0347+  2079 19 00         mov al, 0
0348+  207B 05 03         syscall sys_io
0349+  207D 79            inc d
0350+  207E 0A 72 20      jmp _puts_L1
0351+  2081             _puts_END:
0352+  2081 E7            pop d
0353+  2082 E4            pop a
0354+  2083 09            ret
0355+  2084             
0356+  2084             ;-----------------------------------------------------------------------------
0357+  2084             ; PRINT N SIZE STRING
0358+  2084             ; pointer in D
0359+  2084             ; size in C
0360+  2084             ;-----------------------------------------------------------------------------
0361+  2084             _putsn:
0362+  2084 DB            push al
0363+  2085 DA            push d
0364+  2086 D9            push c
0365+  2087             _putsn_L0:
0366+  2087 1E            mov al, [d]
0367+  2088 23            mov ah, al
0368+  2089 19 00         mov al, 0
0369+  208B 05 03         syscall sys_io
0370+  208D 79            inc d
0371+  208E 7E            dec c  
0372+  208F C2 00 00      cmp c, 0
0373+  2092 C7 87 20      jne _putsn_L0
0374+  2095             _putsn_end:
0375+  2095 E6            pop c
0376+  2096 E7            pop d
0377+  2097 E8            pop al
0378+  2098 09            ret
0379+  2099             
0380+  2099             ;-----------------------------------------------------------------------------
0381+  2099             ; print 16bit decimal number
0382+  2099             ; input number in A
0383+  2099             ;-----------------------------------------------------------------------------
0384+  2099             print_u16d:
0385+  2099 D7            push a
0386+  209A D8            push b
0387+  209B 26 10 27      mov b, 10000
0388+  209E AE            div a, b      ; get 10000's coeff.
0389+  209F 07 C1 20      call print_number
0390+  20A2 11            mov a, b
0391+  20A3 26 E8 03      mov b, 1000
0392+  20A6 AE            div a, b      ; get 1000's coeff.
0393+  20A7 07 C1 20      call print_number
0394+  20AA 11            mov a, b
0395+  20AB 26 64 00      mov b, 100
0396+  20AE AE            div a, b
0397+  20AF 07 C1 20      call print_number
0398+  20B2 11            mov a, b
0399+  20B3 26 0A 00      mov b, 10
0400+  20B6 AE            div a, b
0401+  20B7 07 C1 20      call print_number
0402+  20BA 1B            mov al, bl      ; 1's coeff in bl
0403+  20BB 07 C1 20      call print_number
0404+  20BE E5            pop b
0405+  20BF E4            pop a
0406+  20C0 09            ret
0407+  20C1             
0408+  20C1             ;-----------------------------------------------------------------------------
0409+  20C1             ; print AL
0410+  20C1             ;-----------------------------------------------------------------------------
0411+  20C1             print_number:
0412+  20C1 6A 30         add al, $30
0413+  20C3 23            mov ah, al
0414+  20C4 07 26 1F      call _putchar
0415+  20C7 09            ret
0416+  20C8             
0417+  20C8             ;-----------------------------------------------------------------------------
0418+  20C8             ; PRINT 16BIT HEX INTEGER
0419+  20C8             ; integer value in reg B
0420+  20C8             ;-----------------------------------------------------------------------------
0421+  20C8             print_u16x:
0422+  20C8 D7            push a
0423+  20C9 D8            push b
0424+  20CA DD            push bl
0425+  20CB 30            mov bl, bh
0426+  20CC 07 F4 1E      call _itoa        ; convert bh to char in A
0427+  20CF 2F            mov bl, al        ; save al
0428+  20D0 19 00         mov al, 0
0429+  20D2 05 03         syscall sys_io        ; display AH
0430+  20D4 24            mov ah, bl        ; retrieve al
0431+  20D5 19 00         mov al, 0
0432+  20D7 05 03         syscall sys_io        ; display AL
0433+  20D9             
0434+  20D9 EA            pop bl
0435+  20DA 07 F4 1E      call _itoa        ; convert bh to char in A
0436+  20DD 2F            mov bl, al        ; save al
0437+  20DE 19 00         mov al, 0
0438+  20E0 05 03         syscall sys_io        ; display AH
0439+  20E2 24            mov ah, bl        ; retrieve al
0440+  20E3 19 00         mov al, 0
0441+  20E5 05 03         syscall sys_io        ; display AL
0442+  20E7             
0443+  20E7 E5            pop b
0444+  20E8 E4            pop a
0445+  20E9 09            ret
0446+  20EA             
0447+  20EA             ;-----------------------------------------------------------------------------
0448+  20EA             ; INPUT 16BIT HEX INTEGER
0449+  20EA             ; read 16bit integer into A
0450+  20EA             ;-----------------------------------------------------------------------------
0451+  20EA             scan_u16x:
0452+  20EA F8 10 00      enter 16
0453+  20ED D8            push b
0454+  20EE DA            push d
0455+  20EF             
0456+  20EF FA F1 FF      lea d, [bp + -15]
0457+  20F2 07 2D 1F      call _gets        ; get number
0458+  20F5             
0459+  20F5 32            mov bl, [d]
0460+  20F6 37            mov bh, bl
0461+  20F7 33 01 00      mov bl, [d + 1]
0462+  20FA 07 E4 1E      call _atoi        ; convert to int in AL
0463+  20FD 23            mov ah, al        ; move to AH
0464+  20FE             
0465+  20FE 33 02 00      mov bl, [d + 2]
0466+  2101 37            mov bh, bl
0467+  2102 33 03 00      mov bl, [d + 3]
0468+  2105 07 E4 1E      call _atoi        ; convert to int in AL
0469+  2108             
0470+  2108 E7            pop d
0471+  2109 E5            pop b
0472+  210A F9            leave
0473+  210B 09            ret
0474+  210C             
0475+  210C             ;-----------------------------------------------------------------------------
0476+  210C             ; PRINT 8bit HEX INTEGER
0477+  210C             ; integer value in reg bl
0478+  210C             ;-----------------------------------------------------------------------------
0479+  210C             print_u8x:
0480+  210C D7            push a
0481+  210D DD            push bl
0482+  210E             
0483+  210E 07 F4 1E      call _itoa        ; convert bl to char in A
0484+  2111 2F            mov bl, al        ; save al
0485+  2112 19 00         mov al, 0
0486+  2114 05 03         syscall sys_io        ; display AH
0487+  2116 24            mov ah, bl        ; retrieve al
0488+  2117 19 00         mov al, 0
0489+  2119 05 03         syscall sys_io        ; display AL
0490+  211B             
0491+  211B EA            pop bl
0492+  211C E4            pop a
0493+  211D 09            ret
0494+  211E             
0495+  211E             ;-----------------------------------------------------------------------------
0496+  211E             ; print 8bit decimal unsigned number
0497+  211E             ; input number in AL
0498+  211E             ;-----------------------------------------------------------------------------
0499+  211E             print_u8d:
0500+  211E D7            push a
0501+  211F D8            push b
0502+  2120             
0503+  2120 22 00         mov ah, 0
0504+  2122 26 64 00      mov b, 100
0505+  2125 AE            div a, b
0506+  2126 D8            push b      ; save remainder
0507+  2127 B9 00         cmp al, 0
0508+  2129 C6 33 21      je skip100
0509+  212C 6A 30         add al, $30
0510+  212E 23            mov ah, al
0511+  212F 19 00         mov al, 0
0512+  2131 05 03         syscall sys_io  ; print coeff
0513+  2133             skip100:
0514+  2133 E4            pop a
0515+  2134 22 00         mov ah, 0
0516+  2136 26 0A 00      mov b, 10
0517+  2139 AE            div a, b
0518+  213A D8            push b      ; save remainder
0519+  213B B9 00         cmp al, 0
0520+  213D C6 47 21      je skip10
0521+  2140 6A 30         add al, $30
0522+  2142 23            mov ah, al
0523+  2143 19 00         mov al, 0
0524+  2145 05 03         syscall sys_io  ; print coeff
0525+  2147             skip10:
0526+  2147 E4            pop a
0527+  2148 1B            mov al, bl
0528+  2149 6A 30         add al, $30
0529+  214B 23            mov ah, al
0530+  214C 19 00         mov al, 0
0531+  214E 05 03         syscall sys_io  ; print coeff
0532+  2150 E5            pop b
0533+  2151 E4            pop a
0534+  2152 09            ret
0535+  2153             
0536+  2153             ;-----------------------------------------------------------------------------
0537+  2153             ; INPUT 8BIT HEX INTEGER
0538+  2153             ; read 8bit integer into AL
0539+  2153             ;-----------------------------------------------------------------------------
0540+  2153             scan_u8x:
0541+  2153 F8 04 00      enter 4
0542+  2156 D8            push b
0543+  2157 DA            push d
0544+  2158             
0545+  2158 FA FD FF      lea d, [bp + -3]
0546+  215B 07 2D 1F      call _gets        ; get number
0547+  215E             
0548+  215E 32            mov bl, [d]
0549+  215F 37            mov bh, bl
0550+  2160 33 01 00      mov bl, [d + 1]
0551+  2163 07 E4 1E      call _atoi        ; convert to int in AL
0552+  2166             
0553+  2166 E7            pop d
0554+  2167 E5            pop b
0555+  2168 F9            leave
0556+  2169 09            ret
0557+  216A             
0558+  216A             ;-----------------------------------------------------------------------------
0559+  216A             ; input decimal number
0560+  216A             ; result in A
0561+  216A             ; 655'\0'
0562+  216A             ; low--------high
0563+  216A             ;-----------------------------------------------------------------------------
0564+  216A             scan_u16d:
0565+  216A F8 08 00      enter 8
0566+  216D E2            push si
0567+  216E D8            push b
0568+  216F D9            push c
0569+  2170 DA            push d
0570+  2171 FA F9 FF      lea d, [bp +- 7]
0571+  2174 07 2D 1F      call _gets
0572+  2177 07 86 1E      call _strlen      ; get string length in C
0573+  217A 7E            dec c
0574+  217B FD 4E         mov si, d
0575+  217D 12            mov a, c
0576+  217E FD 99         shl a
0577+  2180 3B BC 21      mov d, table_power
0578+  2183 59            add d, a
0579+  2184 38 00 00      mov c, 0
0580+  2187             mul_loop:
0581+  2187 F6            lodsb      ; load ASCII to al
0582+  2188 B9 00         cmp al, 0
0583+  218A C6 9D 21      je mul_exit
0584+  218D 6F 30         sub al, $30    ; make into integer
0585+  218F 22 00         mov ah, 0
0586+  2191 2A            mov b, [d]
0587+  2192 AC            mul a, b      ; result in B since it fits in 16bits
0588+  2193 11            mov a, b
0589+  2194 28            mov b, c
0590+  2195 54            add a, b
0591+  2196 39            mov c, a
0592+  2197 63 02 00      sub d, 2
0593+  219A 0A 87 21      jmp mul_loop
0594+  219D             mul_exit:
0595+  219D 12            mov a, c
0596+  219E E7            pop d
0597+  219F E6            pop c
0598+  21A0 E5            pop b
0599+  21A1 EF            pop si
0600+  21A2 F9            leave
0601+  21A3 09            ret
0602+  21A4             
0603+  21A4 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  21A8 34 35 36 37 
0603+  21AC 38 39 41 42 
0603+  21B0 43 44 45 46 
0604+  21B4 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  21B8 1B 5B 48 00 
0605+  21BC             
0606+  21BC             table_power:
0607+  21BC 01 00         .dw 1
0608+  21BE 0A 00         .dw 10
0609+  21C0 64 00         .dw 100
0610+  21C2 E8 03         .dw 1000
0611+  21C4 10 27         .dw 100004281   21C6             ; --- END INLINE ASM SEGMENT
4282   21C6             
4283   21C6 F9            leave
4284   21C7 09            ret
4285   21C8             
4286   21C8             base64_encode:
4287   21C8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4288   21CB             ; int i = 0; 
4289   21CB 52 02 00      sub sp, 2
4290   21CE             ; --- START LOCAL VAR INITIALIZATION
4291   21CE FA FF FF      lea d, [bp + -1] ; $i
4292   21D1 DA            push d
4293   21D2 FD 2E 00 00   mov32 cb, $00000000
4293   21D6 00 00 
4294   21D8 E7            pop d
4295   21D9 FD 43         mov [d], b
4296   21DB             ; --- END LOCAL VAR INITIALIZATION
4297   21DB             ; int j = 0; 
4298   21DB 52 02 00      sub sp, 2
4299   21DE             ; --- START LOCAL VAR INITIALIZATION
4300   21DE FA FD FF      lea d, [bp + -3] ; $j
4301   21E1 DA            push d
4302   21E2 FD 2E 00 00   mov32 cb, $00000000
4302   21E6 00 00 
4303   21E8 E7            pop d
4304   21E9 FD 43         mov [d], b
4305   21EB             ; --- END LOCAL VAR INITIALIZATION
4306   21EB             ; int k; 
4307   21EB 52 02 00      sub sp, 2
4308   21EE             ; int input_len; 
4309   21EE 52 02 00      sub sp, 2
4310   21F1             ; unsigned char input_buffer[3]; 
4311   21F1 52 03 00      sub sp, 3
4312   21F4             ; unsigned char output_buffer[4]; 
4313   21F4 52 04 00      sub sp, 4
4314   21F7             ; input_len = strlen(input); 
4315   21F7 FA F9 FF      lea d, [bp + -7] ; $input_len
4316   21FA DA            push d
4317   21FB             ; --- START FUNCTION CALL
4318   21FB FA 05 00      lea d, [bp + 5] ; $input
4319   21FE 2A            mov b, [d]
4320   21FF 38 00 00      mov c, 0
4321   2202 FD AB         swp b
4322   2204 D8            push b
4323   2205 07 79 06      call strlen
4324   2208 51 02 00      add sp, 2
4325   220B             ; --- END FUNCTION CALL
4326   220B E7            pop d
4327   220C FD 43         mov [d], b
4328   220E             ; while (input_len--) { 
4329   220E             _while56_cond:
4330   220E FA F9 FF      lea d, [bp + -7] ; $input_len
4331   2211 2A            mov b, [d]
4332   2212 38 00 00      mov c, 0
4333   2215 11            mov a, b
4334   2216 FD 7D         dec b
4335   2218 FA F9 FF      lea d, [bp + -7] ; $input_len
4336   221B FD 43         mov [d], b
4337   221D 27            mov b, a
4338   221E C0 00 00      cmp b, 0
4339   2221 C6 50 24      je _while56_exit
4340   2224             _while56_block:
4341   2224             ; input_buffer[i++] = *(input++); 
4342   2224 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4343   2227 D7            push a
4344   2228 DA            push d
4345   2229 FA FF FF      lea d, [bp + -1] ; $i
4346   222C 2A            mov b, [d]
4347   222D 38 00 00      mov c, 0
4348   2230 11            mov a, b
4349   2231 FD 77         inc b
4350   2233 FA FF FF      lea d, [bp + -1] ; $i
4351   2236 FD 43         mov [d], b
4352   2238 27            mov b, a
4353   2239 E7            pop d
4354   223A 5A            add d, b
4355   223B E4            pop a
4356   223C DA            push d
4357   223D FA 05 00      lea d, [bp + 5] ; $input
4358   2240 2A            mov b, [d]
4359   2241 38 00 00      mov c, 0
4360   2244 FD 77         inc b
4361   2246 FA 05 00      lea d, [bp + 5] ; $input
4362   2249 FD 3E         mov [d], bl
4363   224B FD 7D         dec b
4364   224D 74            mov d, b
4365   224E 32            mov bl, [d]
4366   224F A7 00         mov bh, 0
4367   2251 38 00 00      mov c, 0
4368   2254 E7            pop d
4369   2255 FD 3E         mov [d], bl
4370   2257             ; if (i == 3) { 
4371   2257             _if57_cond:
4372   2257 FA FF FF      lea d, [bp + -1] ; $i
4373   225A 2A            mov b, [d]
4374   225B 38 00 00      mov c, 0
4375   225E             ; --- START RELATIONAL
4376   225E D7            push a
4377   225F 11            mov a, b
4378   2260 FD 2E 03 00   mov32 cb, $00000003
4378   2264 00 00 
4379   2266 B0            cmp a, b
4380   2267 FD 71         seq ; ==
4381   2269 E4            pop a
4382   226A             ; --- END RELATIONAL
4383   226A C0 00 00      cmp b, 0
4384   226D C6 4D 24      je _if57_exit
4385   2270             _if57_true:
4386   2270             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
4387   2270 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4388   2273 D7            push a
4389   2274 DA            push d
4390   2275 FD 2E 00 00   mov32 cb, $00000000
4390   2279 00 00 
4391   227B E7            pop d
4392   227C 5A            add d, b
4393   227D E4            pop a
4394   227E DA            push d
4395   227F FA F6 FF      lea d, [bp + -10] ; $input_buffer
4396   2282 D7            push a
4397   2283 DA            push d
4398   2284 FD 2E 00 00   mov32 cb, $00000000
4398   2288 00 00 
4399   228A E7            pop d
4400   228B 5A            add d, b
4401   228C E4            pop a
4402   228D 32            mov bl, [d]
4403   228E A7 00         mov bh, 0
4404   2290 38 00 00      mov c, 0
4405   2293 D7            push a
4406   2294 11            mov a, b
4407   2295 FD 2E FC 00   mov32 cb, $000000fc
4407   2299 00 00 
4408   229B FD 92         and b, a ; &
4409   229D E4            pop a
4410   229E             ; --- START SHIFT
4411   229E D7            push a
4412   229F 11            mov a, b
4413   22A0 FD 2E 02 00   mov32 cb, $00000002
4413   22A4 00 00 
4414   22A6 FD 39         mov c, b
4415   22A8 A5            ashr a, cl
4416   22A9 27            mov b, a
4417   22AA E4            pop a
4418   22AB             ; --- END SHIFT
4419   22AB E7            pop d
4420   22AC FD 3E         mov [d], bl
4421   22AE             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
4422   22AE FA F2 FF      lea d, [bp + -14] ; $output_buffer
4423   22B1 D7            push a
4424   22B2 DA            push d
4425   22B3 FD 2E 01 00   mov32 cb, $00000001
4425   22B7 00 00 
4426   22B9 E7            pop d
4427   22BA 5A            add d, b
4428   22BB E4            pop a
4429   22BC DA            push d
4430   22BD FA F6 FF      lea d, [bp + -10] ; $input_buffer
4431   22C0 D7            push a
4432   22C1 DA            push d
4433   22C2 FD 2E 00 00   mov32 cb, $00000000
4433   22C6 00 00 
4434   22C8 E7            pop d
4435   22C9 5A            add d, b
4436   22CA E4            pop a
4437   22CB 32            mov bl, [d]
4438   22CC A7 00         mov bh, 0
4439   22CE 38 00 00      mov c, 0
4440   22D1 D7            push a
4441   22D2 11            mov a, b
4442   22D3 FD 2E 03 00   mov32 cb, $00000003
4442   22D7 00 00 
4443   22D9 FD 92         and b, a ; &
4444   22DB E4            pop a
4445   22DC             ; --- START SHIFT
4446   22DC D7            push a
4447   22DD 11            mov a, b
4448   22DE FD 2E 04 00   mov32 cb, $00000004
4448   22E2 00 00 
4449   22E4 FD 39         mov c, b
4450   22E6 9D            shl a, cl
4451   22E7 27            mov b, a
4452   22E8 E4            pop a
4453   22E9             ; --- END SHIFT
4454   22E9             ; --- START TERMS
4455   22E9 D7            push a
4456   22EA 11            mov a, b
4457   22EB FA F6 FF      lea d, [bp + -10] ; $input_buffer
4458   22EE D7            push a
4459   22EF DA            push d
4460   22F0 FD 2E 01 00   mov32 cb, $00000001
4460   22F4 00 00 
4461   22F6 E7            pop d
4462   22F7 5A            add d, b
4463   22F8 E4            pop a
4464   22F9 32            mov bl, [d]
4465   22FA A7 00         mov bh, 0
4466   22FC 38 00 00      mov c, 0
4467   22FF D7            push a
4468   2300 11            mov a, b
4469   2301 FD 2E F0 00   mov32 cb, $000000f0
4469   2305 00 00 
4470   2307 FD 92         and b, a ; &
4471   2309 E4            pop a
4472   230A             ; --- START SHIFT
4473   230A D7            push a
4474   230B 11            mov a, b
4475   230C FD 2E 04 00   mov32 cb, $00000004
4475   2310 00 00 
4476   2312 FD 39         mov c, b
4477   2314 A5            ashr a, cl
4478   2315 27            mov b, a
4479   2316 E4            pop a
4480   2317             ; --- END SHIFT
4481   2317 56            add b, a
4482   2318 E4            pop a
4483   2319             ; --- END TERMS
4484   2319 E7            pop d
4485   231A FD 3E         mov [d], bl
4486   231C             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
4487   231C FA F2 FF      lea d, [bp + -14] ; $output_buffer
4488   231F D7            push a
4489   2320 DA            push d
4490   2321 FD 2E 02 00   mov32 cb, $00000002
4490   2325 00 00 
4491   2327 E7            pop d
4492   2328 5A            add d, b
4493   2329 E4            pop a
4494   232A DA            push d
4495   232B FA F6 FF      lea d, [bp + -10] ; $input_buffer
4496   232E D7            push a
4497   232F DA            push d
4498   2330 FD 2E 01 00   mov32 cb, $00000001
4498   2334 00 00 
4499   2336 E7            pop d
4500   2337 5A            add d, b
4501   2338 E4            pop a
4502   2339 32            mov bl, [d]
4503   233A A7 00         mov bh, 0
4504   233C 38 00 00      mov c, 0
4505   233F D7            push a
4506   2340 11            mov a, b
4507   2341 FD 2E 0F 00   mov32 cb, $0000000f
4507   2345 00 00 
4508   2347 FD 92         and b, a ; &
4509   2349 E4            pop a
4510   234A             ; --- START SHIFT
4511   234A D7            push a
4512   234B 11            mov a, b
4513   234C FD 2E 02 00   mov32 cb, $00000002
4513   2350 00 00 
4514   2352 FD 39         mov c, b
4515   2354 9D            shl a, cl
4516   2355 27            mov b, a
4517   2356 E4            pop a
4518   2357             ; --- END SHIFT
4519   2357             ; --- START TERMS
4520   2357 D7            push a
4521   2358 11            mov a, b
4522   2359 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4523   235C D7            push a
4524   235D DA            push d
4525   235E FD 2E 02 00   mov32 cb, $00000002
4525   2362 00 00 
4526   2364 E7            pop d
4527   2365 5A            add d, b
4528   2366 E4            pop a
4529   2367 32            mov bl, [d]
4530   2368 A7 00         mov bh, 0
4531   236A 38 00 00      mov c, 0
4532   236D D7            push a
4533   236E 11            mov a, b
4534   236F FD 2E C0 00   mov32 cb, $000000c0
4534   2373 00 00 
4535   2375 FD 92         and b, a ; &
4536   2377 E4            pop a
4537   2378             ; --- START SHIFT
4538   2378 D7            push a
4539   2379 11            mov a, b
4540   237A FD 2E 06 00   mov32 cb, $00000006
4540   237E 00 00 
4541   2380 FD 39         mov c, b
4542   2382 A5            ashr a, cl
4543   2383 27            mov b, a
4544   2384 E4            pop a
4545   2385             ; --- END SHIFT
4546   2385 56            add b, a
4547   2386 E4            pop a
4548   2387             ; --- END TERMS
4549   2387 E7            pop d
4550   2388 FD 3E         mov [d], bl
4551   238A             ; output_buffer[3] = input_buffer[2] & 0x3F; 
4552   238A FA F2 FF      lea d, [bp + -14] ; $output_buffer
4553   238D D7            push a
4554   238E DA            push d
4555   238F FD 2E 03 00   mov32 cb, $00000003
4555   2393 00 00 
4556   2395 E7            pop d
4557   2396 5A            add d, b
4558   2397 E4            pop a
4559   2398 DA            push d
4560   2399 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4561   239C D7            push a
4562   239D DA            push d
4563   239E FD 2E 02 00   mov32 cb, $00000002
4563   23A2 00 00 
4564   23A4 E7            pop d
4565   23A5 5A            add d, b
4566   23A6 E4            pop a
4567   23A7 32            mov bl, [d]
4568   23A8 A7 00         mov bh, 0
4569   23AA 38 00 00      mov c, 0
4570   23AD D7            push a
4571   23AE 11            mov a, b
4572   23AF FD 2E 3F 00   mov32 cb, $0000003f
4572   23B3 00 00 
4573   23B5 FD 92         and b, a ; &
4574   23B7 E4            pop a
4575   23B8 E7            pop d
4576   23B9 FD 3E         mov [d], bl
4577   23BB             ; for (i = 0; i < 4; i++) { 
4578   23BB             _for58_init:
4579   23BB FA FF FF      lea d, [bp + -1] ; $i
4580   23BE DA            push d
4581   23BF FD 2E 00 00   mov32 cb, $00000000
4581   23C3 00 00 
4582   23C5 E7            pop d
4583   23C6 FD 43         mov [d], b
4584   23C8             _for58_cond:
4585   23C8 FA FF FF      lea d, [bp + -1] ; $i
4586   23CB 2A            mov b, [d]
4587   23CC 38 00 00      mov c, 0
4588   23CF             ; --- START RELATIONAL
4589   23CF D7            push a
4590   23D0 11            mov a, b
4591   23D1 FD 2E 04 00   mov32 cb, $00000004
4591   23D5 00 00 
4592   23D7 B0            cmp a, b
4593   23D8 FD 73         slt ; < (signed)
4594   23DA E4            pop a
4595   23DB             ; --- END RELATIONAL
4596   23DB C0 00 00      cmp b, 0
4597   23DE C6 3D 24      je _for58_exit
4598   23E1             _for58_block:
4599   23E1             ; output[j++] = base64_table[output_buffer[i]]; 
4600   23E1 FA 07 00      lea d, [bp + 7] ; $output
4601   23E4 FD 2A         mov d, [d]
4602   23E6 D7            push a
4603   23E7 DA            push d
4604   23E8 FA FD FF      lea d, [bp + -3] ; $j
4605   23EB 2A            mov b, [d]
4606   23EC 38 00 00      mov c, 0
4607   23EF 11            mov a, b
4608   23F0 FD 77         inc b
4609   23F2 FA FD FF      lea d, [bp + -3] ; $j
4610   23F5 FD 43         mov [d], b
4611   23F7 27            mov b, a
4612   23F8 E7            pop d
4613   23F9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4614   23FD E4            pop a
4615   23FE DA            push d
4616   23FF 3B C0 2D      mov d, _base64_table ; $base64_table
4617   2402 FD 2A         mov d, [d]
4618   2404 D7            push a
4619   2405 DA            push d
4620   2406 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4621   2409 D7            push a
4622   240A DA            push d
4623   240B FA FF FF      lea d, [bp + -1] ; $i
4624   240E 2A            mov b, [d]
4625   240F 38 00 00      mov c, 0
4626   2412 E7            pop d
4627   2413 5A            add d, b
4628   2414 E4            pop a
4629   2415 32            mov bl, [d]
4630   2416 A7 00         mov bh, 0
4631   2418 38 00 00      mov c, 0
4632   241B E7            pop d
4633   241C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4634   2420 E4            pop a
4635   2421 32            mov bl, [d]
4636   2422 A7 00         mov bh, 0
4637   2424 38 00 00      mov c, 0
4638   2427 E7            pop d
4639   2428 FD 3E         mov [d], bl
4640   242A             _for58_update:
4641   242A FA FF FF      lea d, [bp + -1] ; $i
4642   242D 2A            mov b, [d]
4643   242E 38 00 00      mov c, 0
4644   2431 11            mov a, b
4645   2432 FD 77         inc b
4646   2434 FA FF FF      lea d, [bp + -1] ; $i
4647   2437 FD 43         mov [d], b
4648   2439 27            mov b, a
4649   243A 0A C8 23      jmp _for58_cond
4650   243D             _for58_exit:
4651   243D             ; i = 0; 
4652   243D FA FF FF      lea d, [bp + -1] ; $i
4653   2440 DA            push d
4654   2441 FD 2E 00 00   mov32 cb, $00000000
4654   2445 00 00 
4655   2447 E7            pop d
4656   2448 FD 43         mov [d], b
4657   244A 0A 4D 24      jmp _if57_exit
4658   244D             _if57_exit:
4659   244D 0A 0E 22      jmp _while56_cond
4660   2450             _while56_exit:
4661   2450             ; if (i) { 
4662   2450             _if59_cond:
4663   2450 FA FF FF      lea d, [bp + -1] ; $i
4664   2453 2A            mov b, [d]
4665   2454 38 00 00      mov c, 0
4666   2457 C0 00 00      cmp b, 0
4667   245A C6 A6 26      je _if59_exit
4668   245D             _if59_true:
4669   245D             ; for (k = i; k < 3; k++) { 
4670   245D             _for60_init:
4671   245D FA FB FF      lea d, [bp + -5] ; $k
4672   2460 DA            push d
4673   2461 FA FF FF      lea d, [bp + -1] ; $i
4674   2464 2A            mov b, [d]
4675   2465 38 00 00      mov c, 0
4676   2468 E7            pop d
4677   2469 FD 43         mov [d], b
4678   246B             _for60_cond:
4679   246B FA FB FF      lea d, [bp + -5] ; $k
4680   246E 2A            mov b, [d]
4681   246F 38 00 00      mov c, 0
4682   2472             ; --- START RELATIONAL
4683   2472 D7            push a
4684   2473 11            mov a, b
4685   2474 FD 2E 03 00   mov32 cb, $00000003
4685   2478 00 00 
4686   247A B0            cmp a, b
4687   247B FD 73         slt ; < (signed)
4688   247D E4            pop a
4689   247E             ; --- END RELATIONAL
4690   247E C0 00 00      cmp b, 0
4691   2481 C6 B0 24      je _for60_exit
4692   2484             _for60_block:
4693   2484             ; input_buffer[k] = '\0'; 
4694   2484 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4695   2487 D7            push a
4696   2488 DA            push d
4697   2489 FA FB FF      lea d, [bp + -5] ; $k
4698   248C 2A            mov b, [d]
4699   248D 38 00 00      mov c, 0
4700   2490 E7            pop d
4701   2491 5A            add d, b
4702   2492 E4            pop a
4703   2493 DA            push d
4704   2494 FD 2E 00 00   mov32 cb, $00000000
4704   2498 00 00 
4705   249A E7            pop d
4706   249B FD 3E         mov [d], bl
4707   249D             _for60_update:
4708   249D FA FB FF      lea d, [bp + -5] ; $k
4709   24A0 2A            mov b, [d]
4710   24A1 38 00 00      mov c, 0
4711   24A4 11            mov a, b
4712   24A5 FD 77         inc b
4713   24A7 FA FB FF      lea d, [bp + -5] ; $k
4714   24AA FD 43         mov [d], b
4715   24AC 27            mov b, a
4716   24AD 0A 6B 24      jmp _for60_cond
4717   24B0             _for60_exit:
4718   24B0             ; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
4719   24B0 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4720   24B3 D7            push a
4721   24B4 DA            push d
4722   24B5 FD 2E 00 00   mov32 cb, $00000000
4722   24B9 00 00 
4723   24BB E7            pop d
4724   24BC 5A            add d, b
4725   24BD E4            pop a
4726   24BE DA            push d
4727   24BF FA F6 FF      lea d, [bp + -10] ; $input_buffer
4728   24C2 D7            push a
4729   24C3 DA            push d
4730   24C4 FD 2E 00 00   mov32 cb, $00000000
4730   24C8 00 00 
4731   24CA E7            pop d
4732   24CB 5A            add d, b
4733   24CC E4            pop a
4734   24CD 32            mov bl, [d]
4735   24CE A7 00         mov bh, 0
4736   24D0 38 00 00      mov c, 0
4737   24D3 D7            push a
4738   24D4 11            mov a, b
4739   24D5 FD 2E FC 00   mov32 cb, $000000fc
4739   24D9 00 00 
4740   24DB FD 92         and b, a ; &
4741   24DD E4            pop a
4742   24DE             ; --- START SHIFT
4743   24DE D7            push a
4744   24DF 11            mov a, b
4745   24E0 FD 2E 02 00   mov32 cb, $00000002
4745   24E4 00 00 
4746   24E6 FD 39         mov c, b
4747   24E8 A5            ashr a, cl
4748   24E9 27            mov b, a
4749   24EA E4            pop a
4750   24EB             ; --- END SHIFT
4751   24EB E7            pop d
4752   24EC FD 3E         mov [d], bl
4753   24EE             ; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
4754   24EE FA F2 FF      lea d, [bp + -14] ; $output_buffer
4755   24F1 D7            push a
4756   24F2 DA            push d
4757   24F3 FD 2E 01 00   mov32 cb, $00000001
4757   24F7 00 00 
4758   24F9 E7            pop d
4759   24FA 5A            add d, b
4760   24FB E4            pop a
4761   24FC DA            push d
4762   24FD FA F6 FF      lea d, [bp + -10] ; $input_buffer
4763   2500 D7            push a
4764   2501 DA            push d
4765   2502 FD 2E 00 00   mov32 cb, $00000000
4765   2506 00 00 
4766   2508 E7            pop d
4767   2509 5A            add d, b
4768   250A E4            pop a
4769   250B 32            mov bl, [d]
4770   250C A7 00         mov bh, 0
4771   250E 38 00 00      mov c, 0
4772   2511 D7            push a
4773   2512 11            mov a, b
4774   2513 FD 2E 03 00   mov32 cb, $00000003
4774   2517 00 00 
4775   2519 FD 92         and b, a ; &
4776   251B E4            pop a
4777   251C             ; --- START SHIFT
4778   251C D7            push a
4779   251D 11            mov a, b
4780   251E FD 2E 04 00   mov32 cb, $00000004
4780   2522 00 00 
4781   2524 FD 39         mov c, b
4782   2526 9D            shl a, cl
4783   2527 27            mov b, a
4784   2528 E4            pop a
4785   2529             ; --- END SHIFT
4786   2529             ; --- START TERMS
4787   2529 D7            push a
4788   252A 11            mov a, b
4789   252B FA F6 FF      lea d, [bp + -10] ; $input_buffer
4790   252E D7            push a
4791   252F DA            push d
4792   2530 FD 2E 01 00   mov32 cb, $00000001
4792   2534 00 00 
4793   2536 E7            pop d
4794   2537 5A            add d, b
4795   2538 E4            pop a
4796   2539 32            mov bl, [d]
4797   253A A7 00         mov bh, 0
4798   253C 38 00 00      mov c, 0
4799   253F D7            push a
4800   2540 11            mov a, b
4801   2541 FD 2E F0 00   mov32 cb, $000000f0
4801   2545 00 00 
4802   2547 FD 92         and b, a ; &
4803   2549 E4            pop a
4804   254A             ; --- START SHIFT
4805   254A D7            push a
4806   254B 11            mov a, b
4807   254C FD 2E 04 00   mov32 cb, $00000004
4807   2550 00 00 
4808   2552 FD 39         mov c, b
4809   2554 A5            ashr a, cl
4810   2555 27            mov b, a
4811   2556 E4            pop a
4812   2557             ; --- END SHIFT
4813   2557 56            add b, a
4814   2558 E4            pop a
4815   2559             ; --- END TERMS
4816   2559 E7            pop d
4817   255A FD 3E         mov [d], bl
4818   255C             ; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
4819   255C FA F2 FF      lea d, [bp + -14] ; $output_buffer
4820   255F D7            push a
4821   2560 DA            push d
4822   2561 FD 2E 02 00   mov32 cb, $00000002
4822   2565 00 00 
4823   2567 E7            pop d
4824   2568 5A            add d, b
4825   2569 E4            pop a
4826   256A DA            push d
4827   256B FA F6 FF      lea d, [bp + -10] ; $input_buffer
4828   256E D7            push a
4829   256F DA            push d
4830   2570 FD 2E 01 00   mov32 cb, $00000001
4830   2574 00 00 
4831   2576 E7            pop d
4832   2577 5A            add d, b
4833   2578 E4            pop a
4834   2579 32            mov bl, [d]
4835   257A A7 00         mov bh, 0
4836   257C 38 00 00      mov c, 0
4837   257F D7            push a
4838   2580 11            mov a, b
4839   2581 FD 2E 0F 00   mov32 cb, $0000000f
4839   2585 00 00 
4840   2587 FD 92         and b, a ; &
4841   2589 E4            pop a
4842   258A             ; --- START SHIFT
4843   258A D7            push a
4844   258B 11            mov a, b
4845   258C FD 2E 02 00   mov32 cb, $00000002
4845   2590 00 00 
4846   2592 FD 39         mov c, b
4847   2594 9D            shl a, cl
4848   2595 27            mov b, a
4849   2596 E4            pop a
4850   2597             ; --- END SHIFT
4851   2597             ; --- START TERMS
4852   2597 D7            push a
4853   2598 11            mov a, b
4854   2599 FA F6 FF      lea d, [bp + -10] ; $input_buffer
4855   259C D7            push a
4856   259D DA            push d
4857   259E FD 2E 02 00   mov32 cb, $00000002
4857   25A2 00 00 
4858   25A4 E7            pop d
4859   25A5 5A            add d, b
4860   25A6 E4            pop a
4861   25A7 32            mov bl, [d]
4862   25A8 A7 00         mov bh, 0
4863   25AA 38 00 00      mov c, 0
4864   25AD D7            push a
4865   25AE 11            mov a, b
4866   25AF FD 2E C0 00   mov32 cb, $000000c0
4866   25B3 00 00 
4867   25B5 FD 92         and b, a ; &
4868   25B7 E4            pop a
4869   25B8             ; --- START SHIFT
4870   25B8 D7            push a
4871   25B9 11            mov a, b
4872   25BA FD 2E 06 00   mov32 cb, $00000006
4872   25BE 00 00 
4873   25C0 FD 39         mov c, b
4874   25C2 A5            ashr a, cl
4875   25C3 27            mov b, a
4876   25C4 E4            pop a
4877   25C5             ; --- END SHIFT
4878   25C5 56            add b, a
4879   25C6 E4            pop a
4880   25C7             ; --- END TERMS
4881   25C7 E7            pop d
4882   25C8 FD 3E         mov [d], bl
4883   25CA             ; for (k = 0; k < i + 1; k++) { 
4884   25CA             _for61_init:
4885   25CA FA FB FF      lea d, [bp + -5] ; $k
4886   25CD DA            push d
4887   25CE FD 2E 00 00   mov32 cb, $00000000
4887   25D2 00 00 
4888   25D4 E7            pop d
4889   25D5 FD 43         mov [d], b
4890   25D7             _for61_cond:
4891   25D7 FA FB FF      lea d, [bp + -5] ; $k
4892   25DA 2A            mov b, [d]
4893   25DB 38 00 00      mov c, 0
4894   25DE             ; --- START RELATIONAL
4895   25DE D7            push a
4896   25DF 11            mov a, b
4897   25E0 FA FF FF      lea d, [bp + -1] ; $i
4898   25E3 2A            mov b, [d]
4899   25E4 38 00 00      mov c, 0
4900   25E7             ; --- START TERMS
4901   25E7 D7            push a
4902   25E8 11            mov a, b
4903   25E9 FD 2E 01 00   mov32 cb, $00000001
4903   25ED 00 00 
4904   25EF 56            add b, a
4905   25F0 E4            pop a
4906   25F1             ; --- END TERMS
4907   25F1 B0            cmp a, b
4908   25F2 FD 73         slt ; < (signed)
4909   25F4 E4            pop a
4910   25F5             ; --- END RELATIONAL
4911   25F5 C0 00 00      cmp b, 0
4912   25F8 C6 57 26      je _for61_exit
4913   25FB             _for61_block:
4914   25FB             ; output[j++] = base64_table[output_buffer[k]]; 
4915   25FB FA 07 00      lea d, [bp + 7] ; $output
4916   25FE FD 2A         mov d, [d]
4917   2600 D7            push a
4918   2601 DA            push d
4919   2602 FA FD FF      lea d, [bp + -3] ; $j
4920   2605 2A            mov b, [d]
4921   2606 38 00 00      mov c, 0
4922   2609 11            mov a, b
4923   260A FD 77         inc b
4924   260C FA FD FF      lea d, [bp + -3] ; $j
4925   260F FD 43         mov [d], b
4926   2611 27            mov b, a
4927   2612 E7            pop d
4928   2613 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4929   2617 E4            pop a
4930   2618 DA            push d
4931   2619 3B C0 2D      mov d, _base64_table ; $base64_table
4932   261C FD 2A         mov d, [d]
4933   261E D7            push a
4934   261F DA            push d
4935   2620 FA F2 FF      lea d, [bp + -14] ; $output_buffer
4936   2623 D7            push a
4937   2624 DA            push d
4938   2625 FA FB FF      lea d, [bp + -5] ; $k
4939   2628 2A            mov b, [d]
4940   2629 38 00 00      mov c, 0
4941   262C E7            pop d
4942   262D 5A            add d, b
4943   262E E4            pop a
4944   262F 32            mov bl, [d]
4945   2630 A7 00         mov bh, 0
4946   2632 38 00 00      mov c, 0
4947   2635 E7            pop d
4948   2636 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
4949   263A E4            pop a
4950   263B 32            mov bl, [d]
4951   263C A7 00         mov bh, 0
4952   263E 38 00 00      mov c, 0
4953   2641 E7            pop d
4954   2642 FD 3E         mov [d], bl
4955   2644             _for61_update:
4956   2644 FA FB FF      lea d, [bp + -5] ; $k
4957   2647 2A            mov b, [d]
4958   2648 38 00 00      mov c, 0
4959   264B 11            mov a, b
4960   264C FD 77         inc b
4961   264E FA FB FF      lea d, [bp + -5] ; $k
4962   2651 FD 43         mov [d], b
4963   2653 27            mov b, a
4964   2654 0A D7 25      jmp _for61_cond
4965   2657             _for61_exit:
4966   2657             ; while (i++ < 3) { 
4967   2657             _while62_cond:
4968   2657 FA FF FF      lea d, [bp + -1] ; $i
4969   265A 2A            mov b, [d]
4970   265B 38 00 00      mov c, 0
4971   265E 11            mov a, b
4972   265F FD 77         inc b
4973   2661 FA FF FF      lea d, [bp + -1] ; $i
4974   2664 FD 43         mov [d], b
4975   2666 27            mov b, a
4976   2667             ; --- START RELATIONAL
4977   2667 D7            push a
4978   2668 11            mov a, b
4979   2669 FD 2E 03 00   mov32 cb, $00000003
4979   266D 00 00 
4980   266F B0            cmp a, b
4981   2670 FD 73         slt ; < (signed)
4982   2672 E4            pop a
4983   2673             ; --- END RELATIONAL
4984   2673 C0 00 00      cmp b, 0
4985   2676 C6 A3 26      je _while62_exit
4986   2679             _while62_block:
4987   2679             ; output[j++] = '='; 
4988   2679 FA 07 00      lea d, [bp + 7] ; $output
4989   267C FD 2A         mov d, [d]
4990   267E D7            push a
4991   267F DA            push d
4992   2680 FA FD FF      lea d, [bp + -3] ; $j
4993   2683 2A            mov b, [d]
4994   2684 38 00 00      mov c, 0
4995   2687 11            mov a, b
4996   2688 FD 77         inc b
4997   268A FA FD FF      lea d, [bp + -3] ; $j
4998   268D FD 43         mov [d], b
4999   268F 27            mov b, a
5000   2690 E7            pop d
5001   2691 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5002   2695 E4            pop a
5003   2696 DA            push d
5004   2697 FD 2E 3D 00   mov32 cb, $0000003d
5004   269B 00 00 
5005   269D E7            pop d
5006   269E FD 3E         mov [d], bl
5007   26A0 0A 57 26      jmp _while62_cond
5008   26A3             _while62_exit:
5009   26A3 0A A6 26      jmp _if59_exit
5010   26A6             _if59_exit:
5011   26A6             ; output[j] = '\0'; 
5012   26A6 FA 07 00      lea d, [bp + 7] ; $output
5013   26A9 FD 2A         mov d, [d]
5014   26AB D7            push a
5015   26AC DA            push d
5016   26AD FA FD FF      lea d, [bp + -3] ; $j
5017   26B0 2A            mov b, [d]
5018   26B1 38 00 00      mov c, 0
5019   26B4 E7            pop d
5020   26B5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5021   26B9 E4            pop a
5022   26BA DA            push d
5023   26BB FD 2E 00 00   mov32 cb, $00000000
5023   26BF 00 00 
5024   26C1 E7            pop d
5025   26C2 FD 3E         mov [d], bl
5026   26C4 F9            leave
5027   26C5 09            ret
5028   26C6             
5029   26C6             base64_char_value:
5030   26C6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5031   26C9             ; if (c >= 'A' && c <= 'Z') return c - 'A'; 
5032   26C9             _if63_cond:
5033   26C9 FA 05 00      lea d, [bp + 5] ; $c
5034   26CC 32            mov bl, [d]
5035   26CD A7 00         mov bh, 0
5036   26CF 38 00 00      mov c, 0
5037   26D2             ; --- START RELATIONAL
5038   26D2 D7            push a
5039   26D3 11            mov a, b
5040   26D4 FD 2E 41 00   mov32 cb, $00000041
5040   26D8 00 00 
5041   26DA B0            cmp a, b
5042   26DB FD 80         sge ; >=
5043   26DD E4            pop a
5044   26DE             ; --- END RELATIONAL
5045   26DE             ; --- START LOGICAL AND
5046   26DE D7            push a
5047   26DF 11            mov a, b
5048   26E0 FA 05 00      lea d, [bp + 5] ; $c
5049   26E3 32            mov bl, [d]
5050   26E4 A7 00         mov bh, 0
5051   26E6 38 00 00      mov c, 0
5052   26E9             ; --- START RELATIONAL
5053   26E9 D7            push a
5054   26EA 11            mov a, b
5055   26EB FD 2E 5A 00   mov32 cb, $0000005a
5055   26EF 00 00 
5056   26F1 B0            cmp a, b
5057   26F2 FD 74         sle ; <= (signed)
5058   26F4 E4            pop a
5059   26F5             ; --- END RELATIONAL
5060   26F5 FD A7         sand a, b
5061   26F7 E4            pop a
5062   26F8             ; --- END LOGICAL AND
5063   26F8 C0 00 00      cmp b, 0
5064   26FB C6 17 27      je _if63_exit
5065   26FE             _if63_true:
5066   26FE             ; return c - 'A'; 
5067   26FE FA 05 00      lea d, [bp + 5] ; $c
5068   2701 32            mov bl, [d]
5069   2702 A7 00         mov bh, 0
5070   2704 38 00 00      mov c, 0
5071   2707             ; --- START TERMS
5072   2707 D7            push a
5073   2708 11            mov a, b
5074   2709 FD 2E 41 00   mov32 cb, $00000041
5074   270D 00 00 
5075   270F 60            sub a, b
5076   2710 27            mov b, a
5077   2711 E4            pop a
5078   2712             ; --- END TERMS
5079   2712 F9            leave
5080   2713 09            ret
5081   2714 0A 17 27      jmp _if63_exit
5082   2717             _if63_exit:
5083   2717             ; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
5084   2717             _if64_cond:
5085   2717 FA 05 00      lea d, [bp + 5] ; $c
5086   271A 32            mov bl, [d]
5087   271B A7 00         mov bh, 0
5088   271D 38 00 00      mov c, 0
5089   2720             ; --- START RELATIONAL
5090   2720 D7            push a
5091   2721 11            mov a, b
5092   2722 FD 2E 61 00   mov32 cb, $00000061
5092   2726 00 00 
5093   2728 B0            cmp a, b
5094   2729 FD 80         sge ; >=
5095   272B E4            pop a
5096   272C             ; --- END RELATIONAL
5097   272C             ; --- START LOGICAL AND
5098   272C D7            push a
5099   272D 11            mov a, b
5100   272E FA 05 00      lea d, [bp + 5] ; $c
5101   2731 32            mov bl, [d]
5102   2732 A7 00         mov bh, 0
5103   2734 38 00 00      mov c, 0
5104   2737             ; --- START RELATIONAL
5105   2737 D7            push a
5106   2738 11            mov a, b
5107   2739 FD 2E 7A 00   mov32 cb, $0000007a
5107   273D 00 00 
5108   273F B0            cmp a, b
5109   2740 FD 74         sle ; <= (signed)
5110   2742 E4            pop a
5111   2743             ; --- END RELATIONAL
5112   2743 FD A7         sand a, b
5113   2745 E4            pop a
5114   2746             ; --- END LOGICAL AND
5115   2746 C0 00 00      cmp b, 0
5116   2749 C6 6D 27      je _if64_exit
5117   274C             _if64_true:
5118   274C             ; return c - 'a' + 26; 
5119   274C FA 05 00      lea d, [bp + 5] ; $c
5120   274F 32            mov bl, [d]
5121   2750 A7 00         mov bh, 0
5122   2752 38 00 00      mov c, 0
5123   2755             ; --- START TERMS
5124   2755 D7            push a
5125   2756 11            mov a, b
5126   2757 FD 2E 61 00   mov32 cb, $00000061
5126   275B 00 00 
5127   275D 60            sub a, b
5128   275E 27            mov b, a
5129   275F 11            mov a, b
5130   2760 FD 2E 1A 00   mov32 cb, $0000001a
5130   2764 00 00 
5131   2766 56            add b, a
5132   2767 E4            pop a
5133   2768             ; --- END TERMS
5134   2768 F9            leave
5135   2769 09            ret
5136   276A 0A 6D 27      jmp _if64_exit
5137   276D             _if64_exit:
5138   276D             ; if (c >= '0' && c <= '9') return c - '0' + 52; 
5139   276D             _if65_cond:
5140   276D FA 05 00      lea d, [bp + 5] ; $c
5141   2770 32            mov bl, [d]
5142   2771 A7 00         mov bh, 0
5143   2773 38 00 00      mov c, 0
5144   2776             ; --- START RELATIONAL
5145   2776 D7            push a
5146   2777 11            mov a, b
5147   2778 FD 2E 30 00   mov32 cb, $00000030
5147   277C 00 00 
5148   277E B0            cmp a, b
5149   277F FD 80         sge ; >=
5150   2781 E4            pop a
5151   2782             ; --- END RELATIONAL
5152   2782             ; --- START LOGICAL AND
5153   2782 D7            push a
5154   2783 11            mov a, b
5155   2784 FA 05 00      lea d, [bp + 5] ; $c
5156   2787 32            mov bl, [d]
5157   2788 A7 00         mov bh, 0
5158   278A 38 00 00      mov c, 0
5159   278D             ; --- START RELATIONAL
5160   278D D7            push a
5161   278E 11            mov a, b
5162   278F FD 2E 39 00   mov32 cb, $00000039
5162   2793 00 00 
5163   2795 B0            cmp a, b
5164   2796 FD 74         sle ; <= (signed)
5165   2798 E4            pop a
5166   2799             ; --- END RELATIONAL
5167   2799 FD A7         sand a, b
5168   279B E4            pop a
5169   279C             ; --- END LOGICAL AND
5170   279C C0 00 00      cmp b, 0
5171   279F C6 C3 27      je _if65_exit
5172   27A2             _if65_true:
5173   27A2             ; return c - '0' + 52; 
5174   27A2 FA 05 00      lea d, [bp + 5] ; $c
5175   27A5 32            mov bl, [d]
5176   27A6 A7 00         mov bh, 0
5177   27A8 38 00 00      mov c, 0
5178   27AB             ; --- START TERMS
5179   27AB D7            push a
5180   27AC 11            mov a, b
5181   27AD FD 2E 30 00   mov32 cb, $00000030
5181   27B1 00 00 
5182   27B3 60            sub a, b
5183   27B4 27            mov b, a
5184   27B5 11            mov a, b
5185   27B6 FD 2E 34 00   mov32 cb, $00000034
5185   27BA 00 00 
5186   27BC 56            add b, a
5187   27BD E4            pop a
5188   27BE             ; --- END TERMS
5189   27BE F9            leave
5190   27BF 09            ret
5191   27C0 0A C3 27      jmp _if65_exit
5192   27C3             _if65_exit:
5193   27C3             ; if (c == '+') return 62; 
5194   27C3             _if66_cond:
5195   27C3 FA 05 00      lea d, [bp + 5] ; $c
5196   27C6 32            mov bl, [d]
5197   27C7 A7 00         mov bh, 0
5198   27C9 38 00 00      mov c, 0
5199   27CC             ; --- START RELATIONAL
5200   27CC D7            push a
5201   27CD 11            mov a, b
5202   27CE FD 2E 2B 00   mov32 cb, $0000002b
5202   27D2 00 00 
5203   27D4 B0            cmp a, b
5204   27D5 FD 71         seq ; ==
5205   27D7 E4            pop a
5206   27D8             ; --- END RELATIONAL
5207   27D8 C0 00 00      cmp b, 0
5208   27DB C6 E9 27      je _if66_exit
5209   27DE             _if66_true:
5210   27DE             ; return 62; 
5211   27DE FD 2E 3E 00   mov32 cb, $0000003e
5211   27E2 00 00 
5212   27E4 F9            leave
5213   27E5 09            ret
5214   27E6 0A E9 27      jmp _if66_exit
5215   27E9             _if66_exit:
5216   27E9             ; if (c == '/') return 63; 
5217   27E9             _if67_cond:
5218   27E9 FA 05 00      lea d, [bp + 5] ; $c
5219   27EC 32            mov bl, [d]
5220   27ED A7 00         mov bh, 0
5221   27EF 38 00 00      mov c, 0
5222   27F2             ; --- START RELATIONAL
5223   27F2 D7            push a
5224   27F3 11            mov a, b
5225   27F4 FD 2E 2F 00   mov32 cb, $0000002f
5225   27F8 00 00 
5226   27FA B0            cmp a, b
5227   27FB FD 71         seq ; ==
5228   27FD E4            pop a
5229   27FE             ; --- END RELATIONAL
5230   27FE C0 00 00      cmp b, 0
5231   2801 C6 0F 28      je _if67_exit
5232   2804             _if67_true:
5233   2804             ; return 63; 
5234   2804 FD 2E 3F 00   mov32 cb, $0000003f
5234   2808 00 00 
5235   280A F9            leave
5236   280B 09            ret
5237   280C 0A 0F 28      jmp _if67_exit
5238   280F             _if67_exit:
5239   280F             ; return -1; 
5240   280F FD 2E 01 00   mov32 cb, $00000001
5240   2813 00 00 
5241   2815 FD 97         neg b
5242   2817 F9            leave
5243   2818 09            ret
5244   2819             
5245   2819             base64_decode:
5246   2819 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5247   281C             ; int i = 0, j = 0, k = 0; 
5248   281C 52 02 00      sub sp, 2
5249   281F             ; --- START LOCAL VAR INITIALIZATION
5250   281F FA FF FF      lea d, [bp + -1] ; $i
5251   2822 DA            push d
5252   2823 FD 2E 00 00   mov32 cb, $00000000
5252   2827 00 00 
5253   2829 E7            pop d
5254   282A FD 43         mov [d], b
5255   282C             ; --- END LOCAL VAR INITIALIZATION
5256   282C 52 02 00      sub sp, 2
5257   282F             ; --- START LOCAL VAR INITIALIZATION
5258   282F FA FD FF      lea d, [bp + -3] ; $j
5259   2832 DA            push d
5260   2833 FD 2E 00 00   mov32 cb, $00000000
5260   2837 00 00 
5261   2839 E7            pop d
5262   283A FD 43         mov [d], b
5263   283C             ; --- END LOCAL VAR INITIALIZATION
5264   283C 52 02 00      sub sp, 2
5265   283F             ; --- START LOCAL VAR INITIALIZATION
5266   283F FA FB FF      lea d, [bp + -5] ; $k
5267   2842 DA            push d
5268   2843 FD 2E 00 00   mov32 cb, $00000000
5268   2847 00 00 
5269   2849 E7            pop d
5270   284A FD 43         mov [d], b
5271   284C             ; --- END LOCAL VAR INITIALIZATION
5272   284C             ; int input_len; 
5273   284C 52 02 00      sub sp, 2
5274   284F             ; unsigned char input_buffer[4]; 
5275   284F 52 04 00      sub sp, 4
5276   2852             ; unsigned char output_buffer[3]; 
5277   2852 52 03 00      sub sp, 3
5278   2855             ; input_len = strlen(input); 
5279   2855 FA F9 FF      lea d, [bp + -7] ; $input_len
5280   2858 DA            push d
5281   2859             ; --- START FUNCTION CALL
5282   2859 FA 05 00      lea d, [bp + 5] ; $input
5283   285C 2A            mov b, [d]
5284   285D 38 00 00      mov c, 0
5285   2860 FD AB         swp b
5286   2862 D8            push b
5287   2863 07 79 06      call strlen
5288   2866 51 02 00      add sp, 2
5289   2869             ; --- END FUNCTION CALL
5290   2869 E7            pop d
5291   286A FD 43         mov [d], b
5292   286C             ; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
5293   286C             _while68_cond:
5294   286C FA F9 FF      lea d, [bp + -7] ; $input_len
5295   286F 2A            mov b, [d]
5296   2870 38 00 00      mov c, 0
5297   2873 11            mov a, b
5298   2874 FD 7D         dec b
5299   2876 FA F9 FF      lea d, [bp + -7] ; $input_len
5300   2879 FD 43         mov [d], b
5301   287B 27            mov b, a
5302   287C             ; --- START LOGICAL AND
5303   287C D7            push a
5304   287D 11            mov a, b
5305   287E FA 05 00      lea d, [bp + 5] ; $input
5306   2881 FD 2A         mov d, [d]
5307   2883 D7            push a
5308   2884 DA            push d
5309   2885 FA FB FF      lea d, [bp + -5] ; $k
5310   2888 2A            mov b, [d]
5311   2889 38 00 00      mov c, 0
5312   288C E7            pop d
5313   288D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5314   2891 E4            pop a
5315   2892 32            mov bl, [d]
5316   2893 A7 00         mov bh, 0
5317   2895 38 00 00      mov c, 0
5318   2898             ; --- START RELATIONAL
5319   2898 D7            push a
5320   2899 11            mov a, b
5321   289A FD 2E 3D 00   mov32 cb, $0000003d
5321   289E 00 00 
5322   28A0 B0            cmp a, b
5323   28A1 FD 72         sneq ; !=
5324   28A3 E4            pop a
5325   28A4             ; --- END RELATIONAL
5326   28A4 FD A7         sand a, b
5327   28A6 11            mov a, b
5328   28A7             ; --- START FUNCTION CALL
5329   28A7 FA 05 00      lea d, [bp + 5] ; $input
5330   28AA FD 2A         mov d, [d]
5331   28AC D7            push a
5332   28AD DA            push d
5333   28AE FA FB FF      lea d, [bp + -5] ; $k
5334   28B1 2A            mov b, [d]
5335   28B2 38 00 00      mov c, 0
5336   28B5 E7            pop d
5337   28B6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5338   28BA E4            pop a
5339   28BB 32            mov bl, [d]
5340   28BC A7 00         mov bh, 0
5341   28BE 38 00 00      mov c, 0
5342   28C1 DD            push bl
5343   28C2 07 C6 26      call base64_char_value
5344   28C5 51 01 00      add sp, 1
5345   28C8             ; --- END FUNCTION CALL
5346   28C8             ; --- START RELATIONAL
5347   28C8 D7            push a
5348   28C9 11            mov a, b
5349   28CA FD 2E 01 00   mov32 cb, $00000001
5349   28CE 00 00 
5350   28D0 FD 97         neg b
5351   28D2 B0            cmp a, b
5352   28D3 FD 72         sneq ; !=
5353   28D5 E4            pop a
5354   28D6             ; --- END RELATIONAL
5355   28D6 FD A7         sand a, b
5356   28D8 E4            pop a
5357   28D9             ; --- END LOGICAL AND
5358   28D9 C0 00 00      cmp b, 0
5359   28DC C6 48 2B      je _while68_exit
5360   28DF             _while68_block:
5361   28DF             ; input_buffer[i++] = input[k++]; 
5362   28DF FA F5 FF      lea d, [bp + -11] ; $input_buffer
5363   28E2 D7            push a
5364   28E3 DA            push d
5365   28E4 FA FF FF      lea d, [bp + -1] ; $i
5366   28E7 2A            mov b, [d]
5367   28E8 38 00 00      mov c, 0
5368   28EB 11            mov a, b
5369   28EC FD 77         inc b
5370   28EE FA FF FF      lea d, [bp + -1] ; $i
5371   28F1 FD 43         mov [d], b
5372   28F3 27            mov b, a
5373   28F4 E7            pop d
5374   28F5 5A            add d, b
5375   28F6 E4            pop a
5376   28F7 DA            push d
5377   28F8 FA 05 00      lea d, [bp + 5] ; $input
5378   28FB FD 2A         mov d, [d]
5379   28FD D7            push a
5380   28FE DA            push d
5381   28FF FA FB FF      lea d, [bp + -5] ; $k
5382   2902 2A            mov b, [d]
5383   2903 38 00 00      mov c, 0
5384   2906 11            mov a, b
5385   2907 FD 77         inc b
5386   2909 FA FB FF      lea d, [bp + -5] ; $k
5387   290C FD 43         mov [d], b
5388   290E 27            mov b, a
5389   290F E7            pop d
5390   2910 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5391   2914 E4            pop a
5392   2915 32            mov bl, [d]
5393   2916 A7 00         mov bh, 0
5394   2918 38 00 00      mov c, 0
5395   291B E7            pop d
5396   291C FD 3E         mov [d], bl
5397   291E             ; if (i == 4) { 
5398   291E             _if69_cond:
5399   291E FA FF FF      lea d, [bp + -1] ; $i
5400   2921 2A            mov b, [d]
5401   2922 38 00 00      mov c, 0
5402   2925             ; --- START RELATIONAL
5403   2925 D7            push a
5404   2926 11            mov a, b
5405   2927 FD 2E 04 00   mov32 cb, $00000004
5405   292B 00 00 
5406   292D B0            cmp a, b
5407   292E FD 71         seq ; ==
5408   2930 E4            pop a
5409   2931             ; --- END RELATIONAL
5410   2931 C0 00 00      cmp b, 0
5411   2934 C6 45 2B      je _if69_exit
5412   2937             _if69_true:
5413   2937             ; for (i = 0; i < 4; i++) { 
5414   2937             _for70_init:
5415   2937 FA FF FF      lea d, [bp + -1] ; $i
5416   293A DA            push d
5417   293B FD 2E 00 00   mov32 cb, $00000000
5417   293F 00 00 
5418   2941 E7            pop d
5419   2942 FD 43         mov [d], b
5420   2944             _for70_cond:
5421   2944 FA FF FF      lea d, [bp + -1] ; $i
5422   2947 2A            mov b, [d]
5423   2948 38 00 00      mov c, 0
5424   294B             ; --- START RELATIONAL
5425   294B D7            push a
5426   294C 11            mov a, b
5427   294D FD 2E 04 00   mov32 cb, $00000004
5427   2951 00 00 
5428   2953 B0            cmp a, b
5429   2954 FD 73         slt ; < (signed)
5430   2956 E4            pop a
5431   2957             ; --- END RELATIONAL
5432   2957 C0 00 00      cmp b, 0
5433   295A C6 9F 29      je _for70_exit
5434   295D             _for70_block:
5435   295D             ; input_buffer[i] = base64_char_value(input_buffer[i]); 
5436   295D FA F5 FF      lea d, [bp + -11] ; $input_buffer
5437   2960 D7            push a
5438   2961 DA            push d
5439   2962 FA FF FF      lea d, [bp + -1] ; $i
5440   2965 2A            mov b, [d]
5441   2966 38 00 00      mov c, 0
5442   2969 E7            pop d
5443   296A 5A            add d, b
5444   296B E4            pop a
5445   296C DA            push d
5446   296D             ; --- START FUNCTION CALL
5447   296D FA F5 FF      lea d, [bp + -11] ; $input_buffer
5448   2970 D7            push a
5449   2971 DA            push d
5450   2972 FA FF FF      lea d, [bp + -1] ; $i
5451   2975 2A            mov b, [d]
5452   2976 38 00 00      mov c, 0
5453   2979 E7            pop d
5454   297A 5A            add d, b
5455   297B E4            pop a
5456   297C 32            mov bl, [d]
5457   297D A7 00         mov bh, 0
5458   297F 38 00 00      mov c, 0
5459   2982 DD            push bl
5460   2983 07 C6 26      call base64_char_value
5461   2986 51 01 00      add sp, 1
5462   2989             ; --- END FUNCTION CALL
5463   2989 E7            pop d
5464   298A FD 3E         mov [d], bl
5465   298C             _for70_update:
5466   298C FA FF FF      lea d, [bp + -1] ; $i
5467   298F 2A            mov b, [d]
5468   2990 38 00 00      mov c, 0
5469   2993 11            mov a, b
5470   2994 FD 77         inc b
5471   2996 FA FF FF      lea d, [bp + -1] ; $i
5472   2999 FD 43         mov [d], b
5473   299B 27            mov b, a
5474   299C 0A 44 29      jmp _for70_cond
5475   299F             _for70_exit:
5476   299F             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
5477   299F FA F2 FF      lea d, [bp + -14] ; $output_buffer
5478   29A2 D7            push a
5479   29A3 DA            push d
5480   29A4 FD 2E 00 00   mov32 cb, $00000000
5480   29A8 00 00 
5481   29AA E7            pop d
5482   29AB 5A            add d, b
5483   29AC E4            pop a
5484   29AD DA            push d
5485   29AE FA F5 FF      lea d, [bp + -11] ; $input_buffer
5486   29B1 D7            push a
5487   29B2 DA            push d
5488   29B3 FD 2E 00 00   mov32 cb, $00000000
5488   29B7 00 00 
5489   29B9 E7            pop d
5490   29BA 5A            add d, b
5491   29BB E4            pop a
5492   29BC 32            mov bl, [d]
5493   29BD A7 00         mov bh, 0
5494   29BF 38 00 00      mov c, 0
5495   29C2             ; --- START SHIFT
5496   29C2 D7            push a
5497   29C3 11            mov a, b
5498   29C4 FD 2E 02 00   mov32 cb, $00000002
5498   29C8 00 00 
5499   29CA FD 39         mov c, b
5500   29CC 9D            shl a, cl
5501   29CD 27            mov b, a
5502   29CE E4            pop a
5503   29CF             ; --- END SHIFT
5504   29CF             ; --- START TERMS
5505   29CF D7            push a
5506   29D0 11            mov a, b
5507   29D1 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5508   29D4 D7            push a
5509   29D5 DA            push d
5510   29D6 FD 2E 01 00   mov32 cb, $00000001
5510   29DA 00 00 
5511   29DC E7            pop d
5512   29DD 5A            add d, b
5513   29DE E4            pop a
5514   29DF 32            mov bl, [d]
5515   29E0 A7 00         mov bh, 0
5516   29E2 38 00 00      mov c, 0
5517   29E5 D7            push a
5518   29E6 11            mov a, b
5519   29E7 FD 2E 30 00   mov32 cb, $00000030
5519   29EB 00 00 
5520   29ED FD 92         and b, a ; &
5521   29EF E4            pop a
5522   29F0             ; --- START SHIFT
5523   29F0 D7            push a
5524   29F1 11            mov a, b
5525   29F2 FD 2E 04 00   mov32 cb, $00000004
5525   29F6 00 00 
5526   29F8 FD 39         mov c, b
5527   29FA A5            ashr a, cl
5528   29FB 27            mov b, a
5529   29FC E4            pop a
5530   29FD             ; --- END SHIFT
5531   29FD 56            add b, a
5532   29FE E4            pop a
5533   29FF             ; --- END TERMS
5534   29FF E7            pop d
5535   2A00 FD 3E         mov [d], bl
5536   2A02             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
5537   2A02 FA F2 FF      lea d, [bp + -14] ; $output_buffer
5538   2A05 D7            push a
5539   2A06 DA            push d
5540   2A07 FD 2E 01 00   mov32 cb, $00000001
5540   2A0B 00 00 
5541   2A0D E7            pop d
5542   2A0E 5A            add d, b
5543   2A0F E4            pop a
5544   2A10 DA            push d
5545   2A11 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5546   2A14 D7            push a
5547   2A15 DA            push d
5548   2A16 FD 2E 01 00   mov32 cb, $00000001
5548   2A1A 00 00 
5549   2A1C E7            pop d
5550   2A1D 5A            add d, b
5551   2A1E E4            pop a
5552   2A1F 32            mov bl, [d]
5553   2A20 A7 00         mov bh, 0
5554   2A22 38 00 00      mov c, 0
5555   2A25 D7            push a
5556   2A26 11            mov a, b
5557   2A27 FD 2E 0F 00   mov32 cb, $0000000f
5557   2A2B 00 00 
5558   2A2D FD 92         and b, a ; &
5559   2A2F E4            pop a
5560   2A30             ; --- START SHIFT
5561   2A30 D7            push a
5562   2A31 11            mov a, b
5563   2A32 FD 2E 04 00   mov32 cb, $00000004
5563   2A36 00 00 
5564   2A38 FD 39         mov c, b
5565   2A3A 9D            shl a, cl
5566   2A3B 27            mov b, a
5567   2A3C E4            pop a
5568   2A3D             ; --- END SHIFT
5569   2A3D             ; --- START TERMS
5570   2A3D D7            push a
5571   2A3E 11            mov a, b
5572   2A3F FA F5 FF      lea d, [bp + -11] ; $input_buffer
5573   2A42 D7            push a
5574   2A43 DA            push d
5575   2A44 FD 2E 02 00   mov32 cb, $00000002
5575   2A48 00 00 
5576   2A4A E7            pop d
5577   2A4B 5A            add d, b
5578   2A4C E4            pop a
5579   2A4D 32            mov bl, [d]
5580   2A4E A7 00         mov bh, 0
5581   2A50 38 00 00      mov c, 0
5582   2A53 D7            push a
5583   2A54 11            mov a, b
5584   2A55 FD 2E 3C 00   mov32 cb, $0000003c
5584   2A59 00 00 
5585   2A5B FD 92         and b, a ; &
5586   2A5D E4            pop a
5587   2A5E             ; --- START SHIFT
5588   2A5E D7            push a
5589   2A5F 11            mov a, b
5590   2A60 FD 2E 02 00   mov32 cb, $00000002
5590   2A64 00 00 
5591   2A66 FD 39         mov c, b
5592   2A68 A5            ashr a, cl
5593   2A69 27            mov b, a
5594   2A6A E4            pop a
5595   2A6B             ; --- END SHIFT
5596   2A6B 56            add b, a
5597   2A6C E4            pop a
5598   2A6D             ; --- END TERMS
5599   2A6D E7            pop d
5600   2A6E FD 3E         mov [d], bl
5601   2A70             ; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
5602   2A70 FA F2 FF      lea d, [bp + -14] ; $output_buffer
5603   2A73 D7            push a
5604   2A74 DA            push d
5605   2A75 FD 2E 02 00   mov32 cb, $00000002
5605   2A79 00 00 
5606   2A7B E7            pop d
5607   2A7C 5A            add d, b
5608   2A7D E4            pop a
5609   2A7E DA            push d
5610   2A7F FA F5 FF      lea d, [bp + -11] ; $input_buffer
5611   2A82 D7            push a
5612   2A83 DA            push d
5613   2A84 FD 2E 02 00   mov32 cb, $00000002
5613   2A88 00 00 
5614   2A8A E7            pop d
5615   2A8B 5A            add d, b
5616   2A8C E4            pop a
5617   2A8D 32            mov bl, [d]
5618   2A8E A7 00         mov bh, 0
5619   2A90 38 00 00      mov c, 0
5620   2A93 D7            push a
5621   2A94 11            mov a, b
5622   2A95 FD 2E 03 00   mov32 cb, $00000003
5622   2A99 00 00 
5623   2A9B FD 92         and b, a ; &
5624   2A9D E4            pop a
5625   2A9E             ; --- START SHIFT
5626   2A9E D7            push a
5627   2A9F 11            mov a, b
5628   2AA0 FD 2E 06 00   mov32 cb, $00000006
5628   2AA4 00 00 
5629   2AA6 FD 39         mov c, b
5630   2AA8 9D            shl a, cl
5631   2AA9 27            mov b, a
5632   2AAA E4            pop a
5633   2AAB             ; --- END SHIFT
5634   2AAB             ; --- START TERMS
5635   2AAB D7            push a
5636   2AAC 11            mov a, b
5637   2AAD FA F5 FF      lea d, [bp + -11] ; $input_buffer
5638   2AB0 D7            push a
5639   2AB1 DA            push d
5640   2AB2 FD 2E 03 00   mov32 cb, $00000003
5640   2AB6 00 00 
5641   2AB8 E7            pop d
5642   2AB9 5A            add d, b
5643   2ABA E4            pop a
5644   2ABB 32            mov bl, [d]
5645   2ABC A7 00         mov bh, 0
5646   2ABE 38 00 00      mov c, 0
5647   2AC1 56            add b, a
5648   2AC2 E4            pop a
5649   2AC3             ; --- END TERMS
5650   2AC3 E7            pop d
5651   2AC4 FD 3E         mov [d], bl
5652   2AC6             ; for (i = 0; i < 3; i++) { 
5653   2AC6             _for71_init:
5654   2AC6 FA FF FF      lea d, [bp + -1] ; $i
5655   2AC9 DA            push d
5656   2ACA FD 2E 00 00   mov32 cb, $00000000
5656   2ACE 00 00 
5657   2AD0 E7            pop d
5658   2AD1 FD 43         mov [d], b
5659   2AD3             _for71_cond:
5660   2AD3 FA FF FF      lea d, [bp + -1] ; $i
5661   2AD6 2A            mov b, [d]
5662   2AD7 38 00 00      mov c, 0
5663   2ADA             ; --- START RELATIONAL
5664   2ADA D7            push a
5665   2ADB 11            mov a, b
5666   2ADC FD 2E 03 00   mov32 cb, $00000003
5666   2AE0 00 00 
5667   2AE2 B0            cmp a, b
5668   2AE3 FD 73         slt ; < (signed)
5669   2AE5 E4            pop a
5670   2AE6             ; --- END RELATIONAL
5671   2AE6 C0 00 00      cmp b, 0
5672   2AE9 C6 35 2B      je _for71_exit
5673   2AEC             _for71_block:
5674   2AEC             ; output[j++] = output_buffer[i]; 
5675   2AEC FA 07 00      lea d, [bp + 7] ; $output
5676   2AEF FD 2A         mov d, [d]
5677   2AF1 D7            push a
5678   2AF2 DA            push d
5679   2AF3 FA FD FF      lea d, [bp + -3] ; $j
5680   2AF6 2A            mov b, [d]
5681   2AF7 38 00 00      mov c, 0
5682   2AFA 11            mov a, b
5683   2AFB FD 77         inc b
5684   2AFD FA FD FF      lea d, [bp + -3] ; $j
5685   2B00 FD 43         mov [d], b
5686   2B02 27            mov b, a
5687   2B03 E7            pop d
5688   2B04 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5689   2B08 E4            pop a
5690   2B09 DA            push d
5691   2B0A FA F2 FF      lea d, [bp + -14] ; $output_buffer
5692   2B0D D7            push a
5693   2B0E DA            push d
5694   2B0F FA FF FF      lea d, [bp + -1] ; $i
5695   2B12 2A            mov b, [d]
5696   2B13 38 00 00      mov c, 0
5697   2B16 E7            pop d
5698   2B17 5A            add d, b
5699   2B18 E4            pop a
5700   2B19 32            mov bl, [d]
5701   2B1A A7 00         mov bh, 0
5702   2B1C 38 00 00      mov c, 0
5703   2B1F E7            pop d
5704   2B20 FD 3E         mov [d], bl
5705   2B22             _for71_update:
5706   2B22 FA FF FF      lea d, [bp + -1] ; $i
5707   2B25 2A            mov b, [d]
5708   2B26 38 00 00      mov c, 0
5709   2B29 11            mov a, b
5710   2B2A FD 77         inc b
5711   2B2C FA FF FF      lea d, [bp + -1] ; $i
5712   2B2F FD 43         mov [d], b
5713   2B31 27            mov b, a
5714   2B32 0A D3 2A      jmp _for71_cond
5715   2B35             _for71_exit:
5716   2B35             ; i = 0; 
5717   2B35 FA FF FF      lea d, [bp + -1] ; $i
5718   2B38 DA            push d
5719   2B39 FD 2E 00 00   mov32 cb, $00000000
5719   2B3D 00 00 
5720   2B3F E7            pop d
5721   2B40 FD 43         mov [d], b
5722   2B42 0A 45 2B      jmp _if69_exit
5723   2B45             _if69_exit:
5724   2B45 0A 6C 28      jmp _while68_cond
5725   2B48             _while68_exit:
5726   2B48             ; if (i) { 
5727   2B48             _if72_cond:
5728   2B48 FA FF FF      lea d, [bp + -1] ; $i
5729   2B4B 2A            mov b, [d]
5730   2B4C 38 00 00      mov c, 0
5731   2B4F C0 00 00      cmp b, 0
5732   2B52 C6 5F 2D      je _if72_exit
5733   2B55             _if72_true:
5734   2B55             ; for (k = i; k < 4; k++) { 
5735   2B55             _for73_init:
5736   2B55 FA FB FF      lea d, [bp + -5] ; $k
5737   2B58 DA            push d
5738   2B59 FA FF FF      lea d, [bp + -1] ; $i
5739   2B5C 2A            mov b, [d]
5740   2B5D 38 00 00      mov c, 0
5741   2B60 E7            pop d
5742   2B61 FD 43         mov [d], b
5743   2B63             _for73_cond:
5744   2B63 FA FB FF      lea d, [bp + -5] ; $k
5745   2B66 2A            mov b, [d]
5746   2B67 38 00 00      mov c, 0
5747   2B6A             ; --- START RELATIONAL
5748   2B6A D7            push a
5749   2B6B 11            mov a, b
5750   2B6C FD 2E 04 00   mov32 cb, $00000004
5750   2B70 00 00 
5751   2B72 B0            cmp a, b
5752   2B73 FD 73         slt ; < (signed)
5753   2B75 E4            pop a
5754   2B76             ; --- END RELATIONAL
5755   2B76 C0 00 00      cmp b, 0
5756   2B79 C6 A8 2B      je _for73_exit
5757   2B7C             _for73_block:
5758   2B7C             ; input_buffer[k] = 0; 
5759   2B7C FA F5 FF      lea d, [bp + -11] ; $input_buffer
5760   2B7F D7            push a
5761   2B80 DA            push d
5762   2B81 FA FB FF      lea d, [bp + -5] ; $k
5763   2B84 2A            mov b, [d]
5764   2B85 38 00 00      mov c, 0
5765   2B88 E7            pop d
5766   2B89 5A            add d, b
5767   2B8A E4            pop a
5768   2B8B DA            push d
5769   2B8C FD 2E 00 00   mov32 cb, $00000000
5769   2B90 00 00 
5770   2B92 E7            pop d
5771   2B93 FD 3E         mov [d], bl
5772   2B95             _for73_update:
5773   2B95 FA FB FF      lea d, [bp + -5] ; $k
5774   2B98 2A            mov b, [d]
5775   2B99 38 00 00      mov c, 0
5776   2B9C 11            mov a, b
5777   2B9D FD 77         inc b
5778   2B9F FA FB FF      lea d, [bp + -5] ; $k
5779   2BA2 FD 43         mov [d], b
5780   2BA4 27            mov b, a
5781   2BA5 0A 63 2B      jmp _for73_cond
5782   2BA8             _for73_exit:
5783   2BA8             ; for (k = 0; k < 4; k++) { 
5784   2BA8             _for74_init:
5785   2BA8 FA FB FF      lea d, [bp + -5] ; $k
5786   2BAB DA            push d
5787   2BAC FD 2E 00 00   mov32 cb, $00000000
5787   2BB0 00 00 
5788   2BB2 E7            pop d
5789   2BB3 FD 43         mov [d], b
5790   2BB5             _for74_cond:
5791   2BB5 FA FB FF      lea d, [bp + -5] ; $k
5792   2BB8 2A            mov b, [d]
5793   2BB9 38 00 00      mov c, 0
5794   2BBC             ; --- START RELATIONAL
5795   2BBC D7            push a
5796   2BBD 11            mov a, b
5797   2BBE FD 2E 04 00   mov32 cb, $00000004
5797   2BC2 00 00 
5798   2BC4 B0            cmp a, b
5799   2BC5 FD 73         slt ; < (signed)
5800   2BC7 E4            pop a
5801   2BC8             ; --- END RELATIONAL
5802   2BC8 C0 00 00      cmp b, 0
5803   2BCB C6 10 2C      je _for74_exit
5804   2BCE             _for74_block:
5805   2BCE             ; input_buffer[k] = base64_char_value(input_buffer[k]); 
5806   2BCE FA F5 FF      lea d, [bp + -11] ; $input_buffer
5807   2BD1 D7            push a
5808   2BD2 DA            push d
5809   2BD3 FA FB FF      lea d, [bp + -5] ; $k
5810   2BD6 2A            mov b, [d]
5811   2BD7 38 00 00      mov c, 0
5812   2BDA E7            pop d
5813   2BDB 5A            add d, b
5814   2BDC E4            pop a
5815   2BDD DA            push d
5816   2BDE             ; --- START FUNCTION CALL
5817   2BDE FA F5 FF      lea d, [bp + -11] ; $input_buffer
5818   2BE1 D7            push a
5819   2BE2 DA            push d
5820   2BE3 FA FB FF      lea d, [bp + -5] ; $k
5821   2BE6 2A            mov b, [d]
5822   2BE7 38 00 00      mov c, 0
5823   2BEA E7            pop d
5824   2BEB 5A            add d, b
5825   2BEC E4            pop a
5826   2BED 32            mov bl, [d]
5827   2BEE A7 00         mov bh, 0
5828   2BF0 38 00 00      mov c, 0
5829   2BF3 DD            push bl
5830   2BF4 07 C6 26      call base64_char_value
5831   2BF7 51 01 00      add sp, 1
5832   2BFA             ; --- END FUNCTION CALL
5833   2BFA E7            pop d
5834   2BFB FD 3E         mov [d], bl
5835   2BFD             _for74_update:
5836   2BFD FA FB FF      lea d, [bp + -5] ; $k
5837   2C00 2A            mov b, [d]
5838   2C01 38 00 00      mov c, 0
5839   2C04 11            mov a, b
5840   2C05 FD 77         inc b
5841   2C07 FA FB FF      lea d, [bp + -5] ; $k
5842   2C0A FD 43         mov [d], b
5843   2C0C 27            mov b, a
5844   2C0D 0A B5 2B      jmp _for74_cond
5845   2C10             _for74_exit:
5846   2C10             ; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
5847   2C10 FA F2 FF      lea d, [bp + -14] ; $output_buffer
5848   2C13 D7            push a
5849   2C14 DA            push d
5850   2C15 FD 2E 00 00   mov32 cb, $00000000
5850   2C19 00 00 
5851   2C1B E7            pop d
5852   2C1C 5A            add d, b
5853   2C1D E4            pop a
5854   2C1E DA            push d
5855   2C1F FA F5 FF      lea d, [bp + -11] ; $input_buffer
5856   2C22 D7            push a
5857   2C23 DA            push d
5858   2C24 FD 2E 00 00   mov32 cb, $00000000
5858   2C28 00 00 
5859   2C2A E7            pop d
5860   2C2B 5A            add d, b
5861   2C2C E4            pop a
5862   2C2D 32            mov bl, [d]
5863   2C2E A7 00         mov bh, 0
5864   2C30 38 00 00      mov c, 0
5865   2C33             ; --- START SHIFT
5866   2C33 D7            push a
5867   2C34 11            mov a, b
5868   2C35 FD 2E 02 00   mov32 cb, $00000002
5868   2C39 00 00 
5869   2C3B FD 39         mov c, b
5870   2C3D 9D            shl a, cl
5871   2C3E 27            mov b, a
5872   2C3F E4            pop a
5873   2C40             ; --- END SHIFT
5874   2C40             ; --- START TERMS
5875   2C40 D7            push a
5876   2C41 11            mov a, b
5877   2C42 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5878   2C45 D7            push a
5879   2C46 DA            push d
5880   2C47 FD 2E 01 00   mov32 cb, $00000001
5880   2C4B 00 00 
5881   2C4D E7            pop d
5882   2C4E 5A            add d, b
5883   2C4F E4            pop a
5884   2C50 32            mov bl, [d]
5885   2C51 A7 00         mov bh, 0
5886   2C53 38 00 00      mov c, 0
5887   2C56 D7            push a
5888   2C57 11            mov a, b
5889   2C58 FD 2E 30 00   mov32 cb, $00000030
5889   2C5C 00 00 
5890   2C5E FD 92         and b, a ; &
5891   2C60 E4            pop a
5892   2C61             ; --- START SHIFT
5893   2C61 D7            push a
5894   2C62 11            mov a, b
5895   2C63 FD 2E 04 00   mov32 cb, $00000004
5895   2C67 00 00 
5896   2C69 FD 39         mov c, b
5897   2C6B A5            ashr a, cl
5898   2C6C 27            mov b, a
5899   2C6D E4            pop a
5900   2C6E             ; --- END SHIFT
5901   2C6E 56            add b, a
5902   2C6F E4            pop a
5903   2C70             ; --- END TERMS
5904   2C70 E7            pop d
5905   2C71 FD 3E         mov [d], bl
5906   2C73             ; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
5907   2C73 FA F2 FF      lea d, [bp + -14] ; $output_buffer
5908   2C76 D7            push a
5909   2C77 DA            push d
5910   2C78 FD 2E 01 00   mov32 cb, $00000001
5910   2C7C 00 00 
5911   2C7E E7            pop d
5912   2C7F 5A            add d, b
5913   2C80 E4            pop a
5914   2C81 DA            push d
5915   2C82 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5916   2C85 D7            push a
5917   2C86 DA            push d
5918   2C87 FD 2E 01 00   mov32 cb, $00000001
5918   2C8B 00 00 
5919   2C8D E7            pop d
5920   2C8E 5A            add d, b
5921   2C8F E4            pop a
5922   2C90 32            mov bl, [d]
5923   2C91 A7 00         mov bh, 0
5924   2C93 38 00 00      mov c, 0
5925   2C96 D7            push a
5926   2C97 11            mov a, b
5927   2C98 FD 2E 0F 00   mov32 cb, $0000000f
5927   2C9C 00 00 
5928   2C9E FD 92         and b, a ; &
5929   2CA0 E4            pop a
5930   2CA1             ; --- START SHIFT
5931   2CA1 D7            push a
5932   2CA2 11            mov a, b
5933   2CA3 FD 2E 04 00   mov32 cb, $00000004
5933   2CA7 00 00 
5934   2CA9 FD 39         mov c, b
5935   2CAB 9D            shl a, cl
5936   2CAC 27            mov b, a
5937   2CAD E4            pop a
5938   2CAE             ; --- END SHIFT
5939   2CAE             ; --- START TERMS
5940   2CAE D7            push a
5941   2CAF 11            mov a, b
5942   2CB0 FA F5 FF      lea d, [bp + -11] ; $input_buffer
5943   2CB3 D7            push a
5944   2CB4 DA            push d
5945   2CB5 FD 2E 02 00   mov32 cb, $00000002
5945   2CB9 00 00 
5946   2CBB E7            pop d
5947   2CBC 5A            add d, b
5948   2CBD E4            pop a
5949   2CBE 32            mov bl, [d]
5950   2CBF A7 00         mov bh, 0
5951   2CC1 38 00 00      mov c, 0
5952   2CC4 D7            push a
5953   2CC5 11            mov a, b
5954   2CC6 FD 2E 3C 00   mov32 cb, $0000003c
5954   2CCA 00 00 
5955   2CCC FD 92         and b, a ; &
5956   2CCE E4            pop a
5957   2CCF             ; --- START SHIFT
5958   2CCF D7            push a
5959   2CD0 11            mov a, b
5960   2CD1 FD 2E 02 00   mov32 cb, $00000002
5960   2CD5 00 00 
5961   2CD7 FD 39         mov c, b
5962   2CD9 A5            ashr a, cl
5963   2CDA 27            mov b, a
5964   2CDB E4            pop a
5965   2CDC             ; --- END SHIFT
5966   2CDC 56            add b, a
5967   2CDD E4            pop a
5968   2CDE             ; --- END TERMS
5969   2CDE E7            pop d
5970   2CDF FD 3E         mov [d], bl
5971   2CE1             ; for (k = 0; k < i - 1; k++) { 
5972   2CE1             _for75_init:
5973   2CE1 FA FB FF      lea d, [bp + -5] ; $k
5974   2CE4 DA            push d
5975   2CE5 FD 2E 00 00   mov32 cb, $00000000
5975   2CE9 00 00 
5976   2CEB E7            pop d
5977   2CEC FD 43         mov [d], b
5978   2CEE             _for75_cond:
5979   2CEE FA FB FF      lea d, [bp + -5] ; $k
5980   2CF1 2A            mov b, [d]
5981   2CF2 38 00 00      mov c, 0
5982   2CF5             ; --- START RELATIONAL
5983   2CF5 D7            push a
5984   2CF6 11            mov a, b
5985   2CF7 FA FF FF      lea d, [bp + -1] ; $i
5986   2CFA 2A            mov b, [d]
5987   2CFB 38 00 00      mov c, 0
5988   2CFE             ; --- START TERMS
5989   2CFE D7            push a
5990   2CFF 11            mov a, b
5991   2D00 FD 2E 01 00   mov32 cb, $00000001
5991   2D04 00 00 
5992   2D06 60            sub a, b
5993   2D07 27            mov b, a
5994   2D08 E4            pop a
5995   2D09             ; --- END TERMS
5996   2D09 B0            cmp a, b
5997   2D0A FD 73         slt ; < (signed)
5998   2D0C E4            pop a
5999   2D0D             ; --- END RELATIONAL
6000   2D0D C0 00 00      cmp b, 0
6001   2D10 C6 5C 2D      je _for75_exit
6002   2D13             _for75_block:
6003   2D13             ; output[j++] = output_buffer[k]; 
6004   2D13 FA 07 00      lea d, [bp + 7] ; $output
6005   2D16 FD 2A         mov d, [d]
6006   2D18 D7            push a
6007   2D19 DA            push d
6008   2D1A FA FD FF      lea d, [bp + -3] ; $j
6009   2D1D 2A            mov b, [d]
6010   2D1E 38 00 00      mov c, 0
6011   2D21 11            mov a, b
6012   2D22 FD 77         inc b
6013   2D24 FA FD FF      lea d, [bp + -3] ; $j
6014   2D27 FD 43         mov [d], b
6015   2D29 27            mov b, a
6016   2D2A E7            pop d
6017   2D2B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
6018   2D2F E4            pop a
6019   2D30 DA            push d
6020   2D31 FA F2 FF      lea d, [bp + -14] ; $output_buffer
6021   2D34 D7            push a
6022   2D35 DA            push d
6023   2D36 FA FB FF      lea d, [bp + -5] ; $k
6024   2D39 2A            mov b, [d]
6025   2D3A 38 00 00      mov c, 0
6026   2D3D E7            pop d
6027   2D3E 5A            add d, b
6028   2D3F E4            pop a
6029   2D40 32            mov bl, [d]
6030   2D41 A7 00         mov bh, 0
6031   2D43 38 00 00      mov c, 0
6032   2D46 E7            pop d
6033   2D47 FD 3E         mov [d], bl
6034   2D49             _for75_update:
6035   2D49 FA FB FF      lea d, [bp + -5] ; $k
6036   2D4C 2A            mov b, [d]
6037   2D4D 38 00 00      mov c, 0
6038   2D50 11            mov a, b
6039   2D51 FD 77         inc b
6040   2D53 FA FB FF      lea d, [bp + -5] ; $k
6041   2D56 FD 43         mov [d], b
6042   2D58 27            mov b, a
6043   2D59 0A EE 2C      jmp _for75_cond
6044   2D5C             _for75_exit:
6045   2D5C 0A 5F 2D      jmp _if72_exit
6046   2D5F             _if72_exit:
6047   2D5F             ; output[j] = '\0'; 
6048   2D5F FA 07 00      lea d, [bp + 7] ; $output
6049   2D62 FD 2A         mov d, [d]
6050   2D64 D7            push a
6051   2D65 DA            push d
6052   2D66 FA FD FF      lea d, [bp + -3] ; $j
6053   2D69 2A            mov b, [d]
6054   2D6A 38 00 00      mov c, 0
6055   2D6D E7            pop d
6056   2D6E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
6057   2D72 E4            pop a
6058   2D73 DA            push d
6059   2D74 FD 2E 00 00   mov32 cb, $00000000
6059   2D78 00 00 
6060   2D7A E7            pop d
6061   2D7B FD 3E         mov [d], bl
6062   2D7D F9            leave
6063   2D7E 09            ret
6064   2D7F             ; --- END TEXT SEGMENT
6065   2D7F             
6066   2D7F             ; --- BEGIN DATA SEGMENT
6067   2D7F 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
6067   2D83 45 46 47 48 
6067   2D87 49 4A 4B 4C 
6067   2D8B 4D 4E 4F 50 
6067   2D8F 51 52 53 54 
6067   2D93 55 56 57 58 
6067   2D97 59 5A 61 62 
6067   2D9B 63 64 65 66 
6067   2D9F 67 68 69 6A 
6067   2DA3 6B 6C 6D 6E 
6067   2DA7 6F 70 71 72 
6067   2DAB 73 74 75 76 
6067   2DAF 77 78 79 7A 
6067   2DB3 30 31 32 33 
6067   2DB7 34 35 36 37 
6067   2DBB 38 39 2B 2F 
6067   2DBF 00 
6068   2DC0 7F 2D       _base64_table: .dw _base64_table_data
6069   2DC2 00 00       st_fopen_max_handle: .dw 0
6070   2DC4 0A 45 6E 74 _s0: .db "\nEnter a base64 encoded string to decode: ", 0
6070   2DC8 65 72 20 61 
6070   2DCC 20 62 61 73 
6070   2DD0 65 36 34 20 
6070   2DD4 65 6E 63 6F 
6070   2DD8 64 65 64 20 
6070   2DDC 73 74 72 69 
6070   2DE0 6E 67 20 74 
6070   2DE4 6F 20 64 65 
6070   2DE8 63 6F 64 65 
6070   2DEC 3A 20 00 
6071   2DEF 0A 45 6E 63 _s1: .db "\nEncoded string: %s\n", 0
6071   2DF3 6F 64 65 64 
6071   2DF7 20 73 74 72 
6071   2DFB 69 6E 67 3A 
6071   2DFF 20 25 73 0A 
6071   2E03 00 
6072   2E04 0A 44 65 63 _s2: .db "\nDecoded string: %s\n", 0
6072   2E08 6F 64 65 64 
6072   2E0C 20 73 74 72 
6072   2E10 69 6E 67 3A 
6072   2E14 20 25 73 0A 
6072   2E18 00 
6073   2E19 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
6073   2E1D 70 65 63 74 
6073   2E21 65 64 20 66 
6073   2E25 6F 72 6D 61 
6073   2E29 74 20 69 6E 
6073   2E2D 20 70 72 69 
6073   2E31 6E 74 66 2E 
6073   2E35 00 
6074   2E36 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
6074   2E3A 72 3A 20 55 
6074   2E3E 6E 6B 6E 6F 
6074   2E42 77 6E 20 61 
6074   2E46 72 67 75 6D 
6074   2E4A 65 6E 74 20 
6074   2E4E 74 79 70 65 
6074   2E52 2E 0A 00 
6075   2E55 1B 5B 32 4A _s5: .db "\033[2J\033[H", 0
6075   2E59 1B 5B 48 00 
6076   2E5D             
6077   2E5D 5F 2E       _heap_top: .dw _heap
6078   2E5F 00          _heap: .db 0
6079   2E60             ; --- END DATA SEGMENT
6080   2E60             
6081   2E60             .end
tasm: Number of errors = 0
