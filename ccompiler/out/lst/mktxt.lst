0001   0000             ; --- FILENAME: ../solarium/usr/bin/mktxt
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $s 
0011   0408 52 02 00      sub sp, 2
0012   040B             ;; content = alloc(16900); // 1024 * 16 + 512 
0013   040B 3B 42 27      mov d, _content ; $content
0014   040E DA            push d
0015   040F 26 04 42      mov b, $4204
0016   0412 FD AB         swp b
0017   0414 D8            push b
0018   0415 07 23 10      call alloc
0019   0418 51 02 00      add sp, 2
0020   041B E7            pop d
0021   041C FD 43         mov [d], b
0022   041E             ;; prog = 0x0000; // Beginning of filenameuments buffer 
0023   041E 3B 00 25      mov d, _prog ; $prog         
0024   0421 26 00 00      mov b, $0        
0025   0424 FD 43         mov [d], b
0026   0426             ;; s = filename; 
0027   0426 FA FF FF      lea d, [bp + -1] ; $s         
0028   0429 26 02 27      mov b, _filename_data ; $filename                   
0029   042C FD 43         mov [d], b
0030   042E             ;; for(;;){ 
0031   042E             _for1_init:
0032   042E             _for1_cond:
0033   042E             _for1_block:
0034   042E             ;; if(*prog == '\0' || *prog == ';' || *prog == ' '){ 
0035   042E             _if2_cond:
0036   042E 29 00 25      mov b, [_prog] ; $prog           
0037   0431 74            mov d, b
0038   0432 32            mov bl, [d]
0039   0433 A7 00         mov bh, 0
0040   0435             ; START RELATIONAL
0041   0435 D7            push a
0042   0436 11            mov a, b
0043   0437 26 00 00      mov b, $0
0044   043A B0            cmp a, b
0045   043B FD 71         seq ; ==
0046   043D E4            pop a
0047   043E             ; END RELATIONAL
0048   043E D7            push a
0049   043F 11            mov a, b
0050   0440 29 00 25      mov b, [_prog] ; $prog           
0051   0443 74            mov d, b
0052   0444 32            mov bl, [d]
0053   0445 A7 00         mov bh, 0
0054   0447             ; START RELATIONAL
0055   0447 D7            push a
0056   0448 11            mov a, b
0057   0449 26 3B 00      mov b, $3b
0058   044C B0            cmp a, b
0059   044D FD 71         seq ; ==
0060   044F E4            pop a
0061   0450             ; END RELATIONAL
0062   0450 FD A8         sor a, b ; ||
0063   0452 11            mov a, b
0064   0453 29 00 25      mov b, [_prog] ; $prog           
0065   0456 74            mov d, b
0066   0457 32            mov bl, [d]
0067   0458 A7 00         mov bh, 0
0068   045A             ; START RELATIONAL
0069   045A D7            push a
0070   045B 11            mov a, b
0071   045C 26 20 00      mov b, $20
0072   045F B0            cmp a, b
0073   0460 FD 71         seq ; ==
0074   0462 E4            pop a
0075   0463             ; END RELATIONAL
0076   0463 FD A8         sor a, b ; ||
0077   0465 E4            pop a
0078   0466 C0 00 00      cmp b, 0
0079   0469 C6 7C 04      je _if2_else
0080   046C             _if2_true:
0081   046C             ;; *s = '\0'; 
0082   046C 2C FF FF      mov b, [bp + -1] ; $s             
0083   046F D8            push b
0084   0470 26 00 00      mov b, $0
0085   0473 E7            pop d
0086   0474 FD 3E         mov [d], bl
0087   0476             ;; break; 
0088   0476 0A A3 04      jmp _for1_exit ; for break
0089   0479 0A A0 04      jmp _if2_exit
0090   047C             _if2_else:
0091   047C             ;; *s++ = *prog++; 
0092   047C 2C FF FF      mov b, [bp + -1] ; $s             
0093   047F FD 79         mov g, b
0094   0481 FD 77         inc b
0095   0483 FA FF FF      lea d, [bp + -1] ; $s
0096   0486 FD 43         mov [d], b
0097   0488 FD 27         mov b, g
0098   048A D8            push b
0099   048B 29 00 25      mov b, [_prog] ; $prog           
0100   048E FD 79         mov g, b
0101   0490 FD 77         inc b
0102   0492 3B 00 25      mov d, _prog ; $prog
0103   0495 FD 43         mov [d], b
0104   0497 FD 27         mov b, g
0105   0499 74            mov d, b
0106   049A 32            mov bl, [d]
0107   049B A7 00         mov bh, 0
0108   049D E7            pop d
0109   049E FD 3E         mov [d], bl
0110   04A0             _if2_exit:
0111   04A0             _for1_update:
0112   04A0 0A 2E 04      jmp _for1_cond
0113   04A3             _for1_exit:
0114   04A3             ;; strcpy(content + 1, filename); 
0115   04A3 29 42 27      mov b, [_content] ; $content           
0116   04A6             ; START TERMS
0117   04A6 D7            push a
0118   04A7 11            mov a, b
0119   04A8 26 01 00      mov b, $1
0120   04AB 54            add a, b
0121   04AC 27            mov b, a
0122   04AD E4            pop a
0123   04AE             ; END TERMS
0124   04AE FD AB         swp b
0125   04B0 D8            push b
0126   04B1 26 02 27      mov b, _filename_data ; $filename           
0127   04B4 FD AB         swp b
0128   04B6 D8            push b
0129   04B7 07 05 08      call strcpy
0130   04BA 51 04 00      add sp, 4
0131   04BD             
0132   04BD             ; --- BEGIN INLINE ASM BLOCK
0133   04BD 14 42 27      mov a, [_content]
0134   04C0 3C            mov d, a
0135   04C1 58 00 02      add d, 512
0136   04C4 07 36 12      call _gettxt
0137   04C7 14 42 27      mov a, [_content]
0138   04CA 3C            mov d, a
0139   04CB 58 01 00      add d, 1
0140   04CE 14 42 27      mov a, [_content]
0141   04D1 3C            mov d, a
0142   04D2 19 05         mov al, 5
0143   04D4 05 04         syscall sys_filesystem
0144   04D6             ; --- END INLINE ASM BLOCK
0145   04D6             
0146   04D6 05 0B         syscall sys_terminate_proc
0147   04D8             
0148   04D8             include_ctype_lib:
0149   04D8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0150   04DB             
0151   04DB             ; --- BEGIN INLINE ASM BLOCK
0152   04DB             .include "lib/ctype.asm"
0001+  04DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  04DB             ; ctype.s
0003+  04DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  04DB             
0005+  04DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  04DB             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  04DB             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  04DB             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  04DB             ;; characters are supported.
0010+  04DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  04DB             ;; _isalnum 
0012+  04DB             ;; _isalpha 
0013+  04DB             ;; islower 
0014+  04DB             ;; isupper 
0015+  04DB             ;; _isdigit 
0016+  04DB             ;; isxdigit
0017+  04DB             ;; iscntrl 
0018+  04DB             ;; isgraph 
0019+  04DB             ;; _isspace 
0020+  04DB             ;; isblank 
0021+  04DB             ;; isprint 
0022+  04DB             ;; ispunct 
0023+  04DB             ;; tolower 
0024+  04DB             ;; toupper
0025+  04DB             
0026+  04DB             
0027+  04DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  04DB             ;; IS ALPHANUMERIC
0029+  04DB             ;; sets ZF according with result
0030+  04DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  04DB             _isalnum:
0032+  04DB 07 F8 04    	call _isalpha
0033+  04DE C6 E4 04    	je _isalnum_exit
0034+  04E1 07 E5 04    	call _isdigit
0035+  04E4             _isalnum_exit:
0036+  04E4 09          	ret	
0037+  04E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  04E5             ;; IS DIGIT
0039+  04E5             ;; sets ZF according with result
0040+  04E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  04E5             _isdigit:
0042+  04E5 DB          	push al
0043+  04E6 B9 30       	cmp al, '0'
0044+  04E8 C8 F4 04    	jlu _isdigit_false
0045+  04EB B9 39       	cmp al, '9'
0046+  04ED D1 F4 04    	jgu _isdigit_false
0047+  04F0 87 00       	and al, 0	; set ZF
0048+  04F2 E8          	pop al
0049+  04F3 09          	ret
0050+  04F4             _isdigit_false:
0051+  04F4 8B 01       	or al, 1	; clear ZF
0052+  04F6 E8          	pop al
0053+  04F7 09          	ret	
0054+  04F8             	
0055+  04F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  04F8             ;; IS ALPHA
0057+  04F8             ;; sets ZF according with result
0058+  04F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  04F8             _isalpha:
0060+  04F8 DB          	push al
0061+  04F9 B9 5F       	cmp al, '_'
0062+  04FB C6 1B 05    	je _isalpha_true
0063+  04FE B9 2E       	cmp al, '.'
0064+  0500 C6 1B 05    	je _isalpha_true
0065+  0503 B9 41       	cmp al, 'A'
0066+  0505 C8 17 05    	jlu _isalpha_false
0067+  0508 B9 7A       	cmp al, 'z'
0068+  050A D1 17 05    	jgu _isalpha_false
0069+  050D B9 5A       	cmp al, 'Z'
0070+  050F D0 1B 05    	jleu _isalpha_true
0071+  0512 B9 61       	cmp al, 'a'
0072+  0514 C9 1B 05    	jgeu _isalpha_true
0073+  0517             _isalpha_false:
0074+  0517 8B 01       	or al, 1	; clear ZF
0075+  0519 E8          	pop al
0076+  051A 09          	ret
0077+  051B             _isalpha_true:
0078+  051B 87 00       	and al, 0	; set ZF
0079+  051D E8          	pop al
0080+  051E 09          	ret
0081+  051F             
0082+  051F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  051F             ;; IS PATH-ALPHA
0084+  051F             ;; sets ZF according with result
0085+  051F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  051F             ispath:
0087+  051F DB          	push al
0088+  0520 07 E5 04    	call _isdigit
0089+  0523 C6 4D 05    	je ispath_true
0090+  0526 B9 5F       	cmp al, '_'
0091+  0528 C6 4D 05    	je ispath_true
0092+  052B B9 2F       	cmp al, '/'
0093+  052D C6 4D 05    	je ispath_true
0094+  0530 B9 2E       	cmp al, '.'
0095+  0532 C6 4D 05    	je ispath_true
0096+  0535 B9 41       	cmp al, 'A'
0097+  0537 C8 49 05    	jlu ispath_false
0098+  053A B9 7A       	cmp al, 'z'
0099+  053C D1 49 05    	jgu ispath_false
0100+  053F B9 5A       	cmp al, 'Z'
0101+  0541 D0 4D 05    	jleu ispath_true
0102+  0544 B9 61       	cmp al, 'a'
0103+  0546 C9 4D 05    	jgeu ispath_true
0104+  0549             ispath_false:
0105+  0549 8B 01       	or al, 1	; clear ZF
0106+  054B E8          	pop al
0107+  054C 09          	ret
0108+  054D             ispath_true:
0109+  054D 87 00       	and al, 0	; set ZF
0110+  054F E8          	pop al
0111+  0550 09          	ret
0112+  0551             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0551             ;; IS SPACE
0114+  0551             ;; sets ZF according with result
0115+  0551             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0551             _isspace:
0117+  0551 B9 20       	cmp al, $20		; ' '
0118+  0553 C6 67 05    	je _isspace_exit
0119+  0556 B9 09       	cmp al, $09		; '\t'
0120+  0558 C6 67 05    	je _isspace_exit
0121+  055B B9 0A       	cmp al, $0A		; '\n'
0122+  055D C6 67 05    	je _isspace_exit
0123+  0560 B9 0D       	cmp al, $0D		; '\r'
0124+  0562 C6 67 05    	je _isspace_exit
0125+  0565 B9 0B       	cmp al, $0B		; '\v'
0126+  0567             _isspace_exit:
0127+  0567 09          	ret	
0128+  0568             
0129+  0568             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0568             ; TO LOWER
0131+  0568             ; input in AL
0132+  0568             ; output in AL
0133+  0568             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0568             _to_lower:
0135+  0568 B9 5A       	cmp al, 'Z'
0136+  056A D1 6F 05    	jgu _to_lower_ret
0137+  056D 6A 20       	add al, $20				; convert to lower case
0138+  056F             _to_lower_ret:
0139+  056F 09          	ret
0140+  0570             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0570             ; TO UPPER
0142+  0570             ; input in AL
0143+  0570             ; output in AL
0144+  0570             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0570             _to_upper:
0146+  0570 B9 61       	cmp al, 'a'
0147+  0572 C8 77 05    	jlu _to_upper_ret
0148+  0575 6F 20       	sub al, $20			; convert to upper case
0149+  0577             _to_upper_ret:
0150+  0577 09          	ret
0151+  0578             
0153   0578             ; --- END INLINE ASM BLOCK
0154   0578             
0155   0578 F9            leave
0156   0579 09            ret
0157   057A             
0158   057A             is_space:
0159   057A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0160   057D             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
0161   057D 34 05 00      mov bl, [bp + 5] ; $c
0162   0580 A7 00         mov bh, 0             
0163   0582             ; START RELATIONAL
0164   0582 D7            push a
0165   0583 11            mov a, b
0166   0584 26 20 00      mov b, $20
0167   0587 B0            cmp a, b
0168   0588 FD 71         seq ; ==
0169   058A E4            pop a
0170   058B             ; END RELATIONAL
0171   058B D7            push a
0172   058C 11            mov a, b
0173   058D 34 05 00      mov bl, [bp + 5] ; $c
0174   0590 A7 00         mov bh, 0             
0175   0592             ; START RELATIONAL
0176   0592 D7            push a
0177   0593 11            mov a, b
0178   0594 26 09 00      mov b, $9
0179   0597 B0            cmp a, b
0180   0598 FD 71         seq ; ==
0181   059A E4            pop a
0182   059B             ; END RELATIONAL
0183   059B FD A8         sor a, b ; ||
0184   059D 11            mov a, b
0185   059E 34 05 00      mov bl, [bp + 5] ; $c
0186   05A1 A7 00         mov bh, 0             
0187   05A3             ; START RELATIONAL
0188   05A3 D7            push a
0189   05A4 11            mov a, b
0190   05A5 26 0A 00      mov b, $a
0191   05A8 B0            cmp a, b
0192   05A9 FD 71         seq ; ==
0193   05AB E4            pop a
0194   05AC             ; END RELATIONAL
0195   05AC FD A8         sor a, b ; ||
0196   05AE 11            mov a, b
0197   05AF 34 05 00      mov bl, [bp + 5] ; $c
0198   05B2 A7 00         mov bh, 0             
0199   05B4             ; START RELATIONAL
0200   05B4 D7            push a
0201   05B5 11            mov a, b
0202   05B6 26 0D 00      mov b, $d
0203   05B9 B0            cmp a, b
0204   05BA FD 71         seq ; ==
0205   05BC E4            pop a
0206   05BD             ; END RELATIONAL
0207   05BD FD A8         sor a, b ; ||
0208   05BF E4            pop a
0209   05C0 F9            leave
0210   05C1 09            ret
0211   05C2             
0212   05C2             is_digit:
0213   05C2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0214   05C5             ;; return c >= '0' && c <= '9'; 
0215   05C5 34 05 00      mov bl, [bp + 5] ; $c
0216   05C8 A7 00         mov bh, 0             
0217   05CA             ; START RELATIONAL
0218   05CA D7            push a
0219   05CB 11            mov a, b
0220   05CC 26 30 00      mov b, $30
0221   05CF B0            cmp a, b
0222   05D0 FD 80         sge ; >=
0223   05D2 E4            pop a
0224   05D3             ; END RELATIONAL
0225   05D3 D7            push a
0226   05D4 11            mov a, b
0227   05D5 34 05 00      mov bl, [bp + 5] ; $c
0228   05D8 A7 00         mov bh, 0             
0229   05DA             ; START RELATIONAL
0230   05DA D7            push a
0231   05DB 11            mov a, b
0232   05DC 26 39 00      mov b, $39
0233   05DF B0            cmp a, b
0234   05E0 FD 74         sle ; <=
0235   05E2 E4            pop a
0236   05E3             ; END RELATIONAL
0237   05E3 FD A7         sand a, b ; &&
0238   05E5 E4            pop a
0239   05E6 F9            leave
0240   05E7 09            ret
0241   05E8             
0242   05E8             is_alpha:
0243   05E8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0244   05EB             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
0245   05EB 34 05 00      mov bl, [bp + 5] ; $c
0246   05EE A7 00         mov bh, 0             
0247   05F0             ; START RELATIONAL
0248   05F0 D7            push a
0249   05F1 11            mov a, b
0250   05F2 26 61 00      mov b, $61
0251   05F5 B0            cmp a, b
0252   05F6 FD 80         sge ; >=
0253   05F8 E4            pop a
0254   05F9             ; END RELATIONAL
0255   05F9 D7            push a
0256   05FA 11            mov a, b
0257   05FB 34 05 00      mov bl, [bp + 5] ; $c
0258   05FE A7 00         mov bh, 0             
0259   0600             ; START RELATIONAL
0260   0600 D7            push a
0261   0601 11            mov a, b
0262   0602 26 7A 00      mov b, $7a
0263   0605 B0            cmp a, b
0264   0606 FD 74         sle ; <=
0265   0608 E4            pop a
0266   0609             ; END RELATIONAL
0267   0609 FD A7         sand a, b ; &&
0268   060B E4            pop a
0269   060C D7            push a
0270   060D 11            mov a, b
0271   060E 34 05 00      mov bl, [bp + 5] ; $c
0272   0611 A7 00         mov bh, 0             
0273   0613             ; START RELATIONAL
0274   0613 D7            push a
0275   0614 11            mov a, b
0276   0615 26 41 00      mov b, $41
0277   0618 B0            cmp a, b
0278   0619 FD 80         sge ; >=
0279   061B E4            pop a
0280   061C             ; END RELATIONAL
0281   061C D7            push a
0282   061D 11            mov a, b
0283   061E 34 05 00      mov bl, [bp + 5] ; $c
0284   0621 A7 00         mov bh, 0             
0285   0623             ; START RELATIONAL
0286   0623 D7            push a
0287   0624 11            mov a, b
0288   0625 26 5A 00      mov b, $5a
0289   0628 B0            cmp a, b
0290   0629 FD 74         sle ; <=
0291   062B E4            pop a
0292   062C             ; END RELATIONAL
0293   062C FD A7         sand a, b ; &&
0294   062E E4            pop a
0295   062F FD A8         sor a, b ; ||
0296   0631 11            mov a, b
0297   0632 34 05 00      mov bl, [bp + 5] ; $c
0298   0635 A7 00         mov bh, 0             
0299   0637             ; START RELATIONAL
0300   0637 D7            push a
0301   0638 11            mov a, b
0302   0639 26 5F 00      mov b, $5f
0303   063C B0            cmp a, b
0304   063D FD 71         seq ; ==
0305   063F E4            pop a
0306   0640             ; END RELATIONAL
0307   0640 FD A8         sor a, b ; ||
0308   0642 E4            pop a
0309   0643 F9            leave
0310   0644 09            ret
0311   0645             
0312   0645             is_delimiter:
0313   0645 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0314   0648             ;; if( 
0315   0648             _if3_cond:
0316   0648 34 05 00      mov bl, [bp + 5] ; $c
0317   064B A7 00         mov bh, 0             
0318   064D             ; START RELATIONAL
0319   064D D7            push a
0320   064E 11            mov a, b
0321   064F 26 40 00      mov b, $40
0322   0652 B0            cmp a, b
0323   0653 FD 71         seq ; ==
0324   0655 E4            pop a
0325   0656             ; END RELATIONAL
0326   0656 D7            push a
0327   0657 11            mov a, b
0328   0658 34 05 00      mov bl, [bp + 5] ; $c
0329   065B A7 00         mov bh, 0             
0330   065D             ; START RELATIONAL
0331   065D D7            push a
0332   065E 11            mov a, b
0333   065F 26 23 00      mov b, $23
0334   0662 B0            cmp a, b
0335   0663 FD 71         seq ; ==
0336   0665 E4            pop a
0337   0666             ; END RELATIONAL
0338   0666 FD A8         sor a, b ; ||
0339   0668 11            mov a, b
0340   0669 34 05 00      mov bl, [bp + 5] ; $c
0341   066C A7 00         mov bh, 0             
0342   066E             ; START RELATIONAL
0343   066E D7            push a
0344   066F 11            mov a, b
0345   0670 26 24 00      mov b, $24
0346   0673 B0            cmp a, b
0347   0674 FD 71         seq ; ==
0348   0676 E4            pop a
0349   0677             ; END RELATIONAL
0350   0677 FD A8         sor a, b ; ||
0351   0679 11            mov a, b
0352   067A 34 05 00      mov bl, [bp + 5] ; $c
0353   067D A7 00         mov bh, 0             
0354   067F             ; START RELATIONAL
0355   067F D7            push a
0356   0680 11            mov a, b
0357   0681 26 2B 00      mov b, $2b
0358   0684 B0            cmp a, b
0359   0685 FD 71         seq ; ==
0360   0687 E4            pop a
0361   0688             ; END RELATIONAL
0362   0688 FD A8         sor a, b ; ||
0363   068A 11            mov a, b
0364   068B 34 05 00      mov bl, [bp + 5] ; $c
0365   068E A7 00         mov bh, 0             
0366   0690             ; START RELATIONAL
0367   0690 D7            push a
0368   0691 11            mov a, b
0369   0692 26 2D 00      mov b, $2d
0370   0695 B0            cmp a, b
0371   0696 FD 71         seq ; ==
0372   0698 E4            pop a
0373   0699             ; END RELATIONAL
0374   0699 FD A8         sor a, b ; ||
0375   069B 11            mov a, b
0376   069C 34 05 00      mov bl, [bp + 5] ; $c
0377   069F A7 00         mov bh, 0             
0378   06A1             ; START RELATIONAL
0379   06A1 D7            push a
0380   06A2 11            mov a, b
0381   06A3 26 2A 00      mov b, $2a
0382   06A6 B0            cmp a, b
0383   06A7 FD 71         seq ; ==
0384   06A9 E4            pop a
0385   06AA             ; END RELATIONAL
0386   06AA FD A8         sor a, b ; ||
0387   06AC 11            mov a, b
0388   06AD 34 05 00      mov bl, [bp + 5] ; $c
0389   06B0 A7 00         mov bh, 0             
0390   06B2             ; START RELATIONAL
0391   06B2 D7            push a
0392   06B3 11            mov a, b
0393   06B4 26 2F 00      mov b, $2f
0394   06B7 B0            cmp a, b
0395   06B8 FD 71         seq ; ==
0396   06BA E4            pop a
0397   06BB             ; END RELATIONAL
0398   06BB FD A8         sor a, b ; ||
0399   06BD 11            mov a, b
0400   06BE 34 05 00      mov bl, [bp + 5] ; $c
0401   06C1 A7 00         mov bh, 0             
0402   06C3             ; START RELATIONAL
0403   06C3 D7            push a
0404   06C4 11            mov a, b
0405   06C5 26 25 00      mov b, $25
0406   06C8 B0            cmp a, b
0407   06C9 FD 71         seq ; ==
0408   06CB E4            pop a
0409   06CC             ; END RELATIONAL
0410   06CC FD A8         sor a, b ; ||
0411   06CE 11            mov a, b
0412   06CF 34 05 00      mov bl, [bp + 5] ; $c
0413   06D2 A7 00         mov bh, 0             
0414   06D4             ; START RELATIONAL
0415   06D4 D7            push a
0416   06D5 11            mov a, b
0417   06D6 26 5B 00      mov b, $5b
0418   06D9 B0            cmp a, b
0419   06DA FD 71         seq ; ==
0420   06DC E4            pop a
0421   06DD             ; END RELATIONAL
0422   06DD FD A8         sor a, b ; ||
0423   06DF 11            mov a, b
0424   06E0 34 05 00      mov bl, [bp + 5] ; $c
0425   06E3 A7 00         mov bh, 0             
0426   06E5             ; START RELATIONAL
0427   06E5 D7            push a
0428   06E6 11            mov a, b
0429   06E7 26 5D 00      mov b, $5d
0430   06EA B0            cmp a, b
0431   06EB FD 71         seq ; ==
0432   06ED E4            pop a
0433   06EE             ; END RELATIONAL
0434   06EE FD A8         sor a, b ; ||
0435   06F0 11            mov a, b
0436   06F1 34 05 00      mov bl, [bp + 5] ; $c
0437   06F4 A7 00         mov bh, 0             
0438   06F6             ; START RELATIONAL
0439   06F6 D7            push a
0440   06F7 11            mov a, b
0441   06F8 26 28 00      mov b, $28
0442   06FB B0            cmp a, b
0443   06FC FD 71         seq ; ==
0444   06FE E4            pop a
0445   06FF             ; END RELATIONAL
0446   06FF FD A8         sor a, b ; ||
0447   0701 11            mov a, b
0448   0702 34 05 00      mov bl, [bp + 5] ; $c
0449   0705 A7 00         mov bh, 0             
0450   0707             ; START RELATIONAL
0451   0707 D7            push a
0452   0708 11            mov a, b
0453   0709 26 29 00      mov b, $29
0454   070C B0            cmp a, b
0455   070D FD 71         seq ; ==
0456   070F E4            pop a
0457   0710             ; END RELATIONAL
0458   0710 FD A8         sor a, b ; ||
0459   0712 11            mov a, b
0460   0713 34 05 00      mov bl, [bp + 5] ; $c
0461   0716 A7 00         mov bh, 0             
0462   0718             ; START RELATIONAL
0463   0718 D7            push a
0464   0719 11            mov a, b
0465   071A 26 7B 00      mov b, $7b
0466   071D B0            cmp a, b
0467   071E FD 71         seq ; ==
0468   0720 E4            pop a
0469   0721             ; END RELATIONAL
0470   0721 FD A8         sor a, b ; ||
0471   0723 11            mov a, b
0472   0724 34 05 00      mov bl, [bp + 5] ; $c
0473   0727 A7 00         mov bh, 0             
0474   0729             ; START RELATIONAL
0475   0729 D7            push a
0476   072A 11            mov a, b
0477   072B 26 7D 00      mov b, $7d
0478   072E B0            cmp a, b
0479   072F FD 71         seq ; ==
0480   0731 E4            pop a
0481   0732             ; END RELATIONAL
0482   0732 FD A8         sor a, b ; ||
0483   0734 11            mov a, b
0484   0735 34 05 00      mov bl, [bp + 5] ; $c
0485   0738 A7 00         mov bh, 0             
0486   073A             ; START RELATIONAL
0487   073A D7            push a
0488   073B 11            mov a, b
0489   073C 26 3A 00      mov b, $3a
0490   073F B0            cmp a, b
0491   0740 FD 71         seq ; ==
0492   0742 E4            pop a
0493   0743             ; END RELATIONAL
0494   0743 FD A8         sor a, b ; ||
0495   0745 11            mov a, b
0496   0746 34 05 00      mov bl, [bp + 5] ; $c
0497   0749 A7 00         mov bh, 0             
0498   074B             ; START RELATIONAL
0499   074B D7            push a
0500   074C 11            mov a, b
0501   074D 26 3B 00      mov b, $3b
0502   0750 B0            cmp a, b
0503   0751 FD 71         seq ; ==
0504   0753 E4            pop a
0505   0754             ; END RELATIONAL
0506   0754 FD A8         sor a, b ; ||
0507   0756 11            mov a, b
0508   0757 34 05 00      mov bl, [bp + 5] ; $c
0509   075A A7 00         mov bh, 0             
0510   075C             ; START RELATIONAL
0511   075C D7            push a
0512   075D 11            mov a, b
0513   075E 26 3C 00      mov b, $3c
0514   0761 B0            cmp a, b
0515   0762 FD 71         seq ; ==
0516   0764 E4            pop a
0517   0765             ; END RELATIONAL
0518   0765 FD A8         sor a, b ; ||
0519   0767 11            mov a, b
0520   0768 34 05 00      mov bl, [bp + 5] ; $c
0521   076B A7 00         mov bh, 0             
0522   076D             ; START RELATIONAL
0523   076D D7            push a
0524   076E 11            mov a, b
0525   076F 26 3E 00      mov b, $3e
0526   0772 B0            cmp a, b
0527   0773 FD 71         seq ; ==
0528   0775 E4            pop a
0529   0776             ; END RELATIONAL
0530   0776 FD A8         sor a, b ; ||
0531   0778 11            mov a, b
0532   0779 34 05 00      mov bl, [bp + 5] ; $c
0533   077C A7 00         mov bh, 0             
0534   077E             ; START RELATIONAL
0535   077E D7            push a
0536   077F 11            mov a, b
0537   0780 26 3D 00      mov b, $3d
0538   0783 B0            cmp a, b
0539   0784 FD 71         seq ; ==
0540   0786 E4            pop a
0541   0787             ; END RELATIONAL
0542   0787 FD A8         sor a, b ; ||
0543   0789 11            mov a, b
0544   078A 34 05 00      mov bl, [bp + 5] ; $c
0545   078D A7 00         mov bh, 0             
0546   078F             ; START RELATIONAL
0547   078F D7            push a
0548   0790 11            mov a, b
0549   0791 26 21 00      mov b, $21
0550   0794 B0            cmp a, b
0551   0795 FD 71         seq ; ==
0552   0797 E4            pop a
0553   0798             ; END RELATIONAL
0554   0798 FD A8         sor a, b ; ||
0555   079A 11            mov a, b
0556   079B 34 05 00      mov bl, [bp + 5] ; $c
0557   079E A7 00         mov bh, 0             
0558   07A0             ; START RELATIONAL
0559   07A0 D7            push a
0560   07A1 11            mov a, b
0561   07A2 26 5E 00      mov b, $5e
0562   07A5 B0            cmp a, b
0563   07A6 FD 71         seq ; ==
0564   07A8 E4            pop a
0565   07A9             ; END RELATIONAL
0566   07A9 FD A8         sor a, b ; ||
0567   07AB 11            mov a, b
0568   07AC 34 05 00      mov bl, [bp + 5] ; $c
0569   07AF A7 00         mov bh, 0             
0570   07B1             ; START RELATIONAL
0571   07B1 D7            push a
0572   07B2 11            mov a, b
0573   07B3 26 26 00      mov b, $26
0574   07B6 B0            cmp a, b
0575   07B7 FD 71         seq ; ==
0576   07B9 E4            pop a
0577   07BA             ; END RELATIONAL
0578   07BA FD A8         sor a, b ; ||
0579   07BC 11            mov a, b
0580   07BD 34 05 00      mov bl, [bp + 5] ; $c
0581   07C0 A7 00         mov bh, 0             
0582   07C2             ; START RELATIONAL
0583   07C2 D7            push a
0584   07C3 11            mov a, b
0585   07C4 26 7C 00      mov b, $7c
0586   07C7 B0            cmp a, b
0587   07C8 FD 71         seq ; ==
0588   07CA E4            pop a
0589   07CB             ; END RELATIONAL
0590   07CB FD A8         sor a, b ; ||
0591   07CD 11            mov a, b
0592   07CE 34 05 00      mov bl, [bp + 5] ; $c
0593   07D1 A7 00         mov bh, 0             
0594   07D3             ; START RELATIONAL
0595   07D3 D7            push a
0596   07D4 11            mov a, b
0597   07D5 26 7E 00      mov b, $7e
0598   07D8 B0            cmp a, b
0599   07D9 FD 71         seq ; ==
0600   07DB E4            pop a
0601   07DC             ; END RELATIONAL
0602   07DC FD A8         sor a, b ; ||
0603   07DE 11            mov a, b
0604   07DF 34 05 00      mov bl, [bp + 5] ; $c
0605   07E2 A7 00         mov bh, 0             
0606   07E4             ; START RELATIONAL
0607   07E4 D7            push a
0608   07E5 11            mov a, b
0609   07E6 26 2E 00      mov b, $2e
0610   07E9 B0            cmp a, b
0611   07EA FD 71         seq ; ==
0612   07EC E4            pop a
0613   07ED             ; END RELATIONAL
0614   07ED FD A8         sor a, b ; ||
0615   07EF E4            pop a
0616   07F0 C0 00 00      cmp b, 0
0617   07F3 C6 FE 07      je _if3_else
0618   07F6             _if3_true:
0619   07F6             ;; return 1; 
0620   07F6 26 01 00      mov b, $1
0621   07F9 F9            leave
0622   07FA 09            ret
0623   07FB 0A 03 08      jmp _if3_exit
0624   07FE             _if3_else:
0625   07FE             ;; return 0; 
0626   07FE 26 00 00      mov b, $0
0627   0801 F9            leave
0628   0802 09            ret
0629   0803             _if3_exit:
0630   0803 F9            leave
0631   0804 09            ret
0632   0805             
0633   0805             strcpy:
0634   0805 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0635   0808             ; $psrc 
0636   0808             ; $pdest 
0637   0808 52 04 00      sub sp, 4
0638   080B             ;; psrc = src; 
0639   080B FA FF FF      lea d, [bp + -1] ; $psrc         
0640   080E 2C 05 00      mov b, [bp + 5] ; $src                     
0641   0811 FD 43         mov [d], b
0642   0813             ;; pdest = dest; 
0643   0813 FA FD FF      lea d, [bp + -3] ; $pdest         
0644   0816 2C 07 00      mov b, [bp + 7] ; $dest                     
0645   0819 FD 43         mov [d], b
0646   081B             ;; while(*psrc) *pdest++ = *psrc++; 
0647   081B             _while4_cond:
0648   081B 2C FF FF      mov b, [bp + -1] ; $psrc             
0649   081E 74            mov d, b
0650   081F 32            mov bl, [d]
0651   0820 A7 00         mov bh, 0
0652   0822 C0 00 00      cmp b, 0
0653   0825 C6 4F 08      je _while4_exit
0654   0828             _while4_block:
0655   0828             ;; *pdest++ = *psrc++; 
0656   0828 2C FD FF      mov b, [bp + -3] ; $pdest             
0657   082B FD 79         mov g, b
0658   082D FD 77         inc b
0659   082F FA FD FF      lea d, [bp + -3] ; $pdest
0660   0832 FD 43         mov [d], b
0661   0834 FD 27         mov b, g
0662   0836 D8            push b
0663   0837 2C FF FF      mov b, [bp + -1] ; $psrc             
0664   083A FD 79         mov g, b
0665   083C FD 77         inc b
0666   083E FA FF FF      lea d, [bp + -1] ; $psrc
0667   0841 FD 43         mov [d], b
0668   0843 FD 27         mov b, g
0669   0845 74            mov d, b
0670   0846 32            mov bl, [d]
0671   0847 A7 00         mov bh, 0
0672   0849 E7            pop d
0673   084A FD 3E         mov [d], bl
0674   084C 0A 1B 08      jmp _while4_cond
0675   084F             _while4_exit:
0676   084F             ;; *pdest = '\0'; 
0677   084F 2C FD FF      mov b, [bp + -3] ; $pdest             
0678   0852 D8            push b
0679   0853 26 00 00      mov b, $0
0680   0856 E7            pop d
0681   0857 FD 3E         mov [d], bl
0682   0859 F9            leave
0683   085A 09            ret
0684   085B             
0685   085B             strcmp:
0686   085B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0687   085E             ;; while (*s1 && (*s1 == *s2)) { 
0688   085E             _while5_cond:
0689   085E 2C 07 00      mov b, [bp + 7] ; $s1             
0690   0861 74            mov d, b
0691   0862 32            mov bl, [d]
0692   0863 A7 00         mov bh, 0
0693   0865 D7            push a
0694   0866 11            mov a, b
0695   0867 2C 07 00      mov b, [bp + 7] ; $s1             
0696   086A 74            mov d, b
0697   086B 32            mov bl, [d]
0698   086C A7 00         mov bh, 0
0699   086E             ; START RELATIONAL
0700   086E D7            push a
0701   086F 11            mov a, b
0702   0870 2C 05 00      mov b, [bp + 5] ; $s2             
0703   0873 74            mov d, b
0704   0874 32            mov bl, [d]
0705   0875 A7 00         mov bh, 0
0706   0877 B0            cmp a, b
0707   0878 FD 71         seq ; ==
0708   087A E4            pop a
0709   087B             ; END RELATIONAL
0710   087B FD A7         sand a, b ; &&
0711   087D E4            pop a
0712   087E C0 00 00      cmp b, 0
0713   0881 C6 A3 08      je _while5_exit
0714   0884             _while5_block:
0715   0884             ;; s1++; 
0716   0884 2C 07 00      mov b, [bp + 7] ; $s1             
0717   0887 FD 79         mov g, b
0718   0889 FD 77         inc b
0719   088B FA 07 00      lea d, [bp + 7] ; $s1
0720   088E FD 43         mov [d], b
0721   0890 FD 27         mov b, g
0722   0892             ;; s2++; 
0723   0892 2C 05 00      mov b, [bp + 5] ; $s2             
0724   0895 FD 79         mov g, b
0725   0897 FD 77         inc b
0726   0899 FA 05 00      lea d, [bp + 5] ; $s2
0727   089C FD 43         mov [d], b
0728   089E FD 27         mov b, g
0729   08A0 0A 5E 08      jmp _while5_cond
0730   08A3             _while5_exit:
0731   08A3             ;; return *s1 - *s2; 
0732   08A3 2C 07 00      mov b, [bp + 7] ; $s1             
0733   08A6 74            mov d, b
0734   08A7 32            mov bl, [d]
0735   08A8 A7 00         mov bh, 0
0736   08AA             ; START TERMS
0737   08AA D7            push a
0738   08AB 11            mov a, b
0739   08AC 2C 05 00      mov b, [bp + 5] ; $s2             
0740   08AF 74            mov d, b
0741   08B0 32            mov bl, [d]
0742   08B1 A7 00         mov bh, 0
0743   08B3 60            sub a, b
0744   08B4 27            mov b, a
0745   08B5 E4            pop a
0746   08B6             ; END TERMS
0747   08B6 F9            leave
0748   08B7 09            ret
0749   08B8             
0750   08B8             strcat:
0751   08B8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0752   08BB             ; $dest_len 
0753   08BB             ; $i 
0754   08BB 52 04 00      sub sp, 4
0755   08BE             ;; dest_len = strlen(dest); 
0756   08BE FA FF FF      lea d, [bp + -1] ; $dest_len
0757   08C1 DA            push d
0758   08C2 2C 07 00      mov b, [bp + 7] ; $dest             
0759   08C5 FD AB         swp b
0760   08C7 D8            push b
0761   08C8 07 57 09      call strlen
0762   08CB 51 02 00      add sp, 2
0763   08CE E7            pop d
0764   08CF FD 43         mov [d], b
0765   08D1             ;; for (i = 0; src[i] != 0; i=i+1) { 
0766   08D1             _for6_init:
0767   08D1 FA FD FF      lea d, [bp + -3] ; $i         
0768   08D4 26 00 00      mov b, $0        
0769   08D7 FD 43         mov [d], b
0770   08D9             _for6_cond:
0771   08D9 FA 05 00      lea d, [bp + 5] ; $src
0772   08DC FD 2A         mov d, [d]
0773   08DE D7            push a         
0774   08DF 2C FD FF      mov b, [bp + -3] ; $i                     
0775   08E2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0776   08E6 E4            pop a
0777   08E7 32            mov bl, [d]
0778   08E8 A7 00         mov bh, 0
0779   08EA             ; START RELATIONAL
0780   08EA D7            push a
0781   08EB 11            mov a, b
0782   08EC 26 00 00      mov b, $0
0783   08EF B0            cmp a, b
0784   08F0 FD 72         sneq ; !=
0785   08F2 E4            pop a
0786   08F3             ; END RELATIONAL
0787   08F3 C0 00 00      cmp b, 0
0788   08F6 C6 37 09      je _for6_exit
0789   08F9             _for6_block:
0790   08F9             ;; dest[dest_len + i] = src[i]; 
0791   08F9 FA 07 00      lea d, [bp + 7] ; $dest
0792   08FC FD 2A         mov d, [d]
0793   08FE D7            push a         
0794   08FF 2C FF FF      mov b, [bp + -1] ; $dest_len             
0795   0902             ; START TERMS
0796   0902 D7            push a
0797   0903 11            mov a, b
0798   0904 2C FD FF      mov b, [bp + -3] ; $i             
0799   0907 54            add a, b
0800   0908 27            mov b, a
0801   0909 E4            pop a
0802   090A             ; END TERMS        
0803   090A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0804   090E E4            pop a
0805   090F DA            push d
0806   0910 FA 05 00      lea d, [bp + 5] ; $src
0807   0913 FD 2A         mov d, [d]
0808   0915 D7            push a         
0809   0916 2C FD FF      mov b, [bp + -3] ; $i                     
0810   0919 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0811   091D E4            pop a
0812   091E 32            mov bl, [d]
0813   091F A7 00         mov bh, 0
0814   0921 E7            pop d
0815   0922 FD 3E         mov [d], bl
0816   0924             _for6_update:
0817   0924 FA FD FF      lea d, [bp + -3] ; $i         
0818   0927 2C FD FF      mov b, [bp + -3] ; $i             
0819   092A             ; START TERMS
0820   092A D7            push a
0821   092B 11            mov a, b
0822   092C 26 01 00      mov b, $1
0823   092F 54            add a, b
0824   0930 27            mov b, a
0825   0931 E4            pop a
0826   0932             ; END TERMS        
0827   0932 FD 43         mov [d], b
0828   0934 0A D9 08      jmp _for6_cond
0829   0937             _for6_exit:
0830   0937             ;; dest[dest_len + i] = 0; 
0831   0937 FA 07 00      lea d, [bp + 7] ; $dest
0832   093A FD 2A         mov d, [d]
0833   093C D7            push a         
0834   093D 2C FF FF      mov b, [bp + -1] ; $dest_len             
0835   0940             ; START TERMS
0836   0940 D7            push a
0837   0941 11            mov a, b
0838   0942 2C FD FF      mov b, [bp + -3] ; $i             
0839   0945 54            add a, b
0840   0946 27            mov b, a
0841   0947 E4            pop a
0842   0948             ; END TERMS        
0843   0948 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0844   094C E4            pop a         
0845   094D 26 00 00      mov b, $0        
0846   0950 FD 3E         mov [d], bl
0847   0952             ;; return dest; 
0848   0952 2C 07 00      mov b, [bp + 7] ; $dest             
0849   0955 F9            leave
0850   0956 09            ret
0851   0957             
0852   0957             strlen:
0853   0957 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0854   095A             ; $length 
0855   095A 52 02 00      sub sp, 2
0856   095D             ;; length = 0; 
0857   095D FA FF FF      lea d, [bp + -1] ; $length         
0858   0960 26 00 00      mov b, $0        
0859   0963 FD 43         mov [d], b
0860   0965             ;; while (str[length] != 0) { 
0861   0965             _while7_cond:
0862   0965 FA 05 00      lea d, [bp + 5] ; $str
0863   0968 FD 2A         mov d, [d]
0864   096A D7            push a         
0865   096B 2C FF FF      mov b, [bp + -1] ; $length                     
0866   096E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0867   0972 E4            pop a
0868   0973 32            mov bl, [d]
0869   0974 A7 00         mov bh, 0
0870   0976             ; START RELATIONAL
0871   0976 D7            push a
0872   0977 11            mov a, b
0873   0978 26 00 00      mov b, $0
0874   097B B0            cmp a, b
0875   097C FD 72         sneq ; !=
0876   097E E4            pop a
0877   097F             ; END RELATIONAL
0878   097F C0 00 00      cmp b, 0
0879   0982 C6 96 09      je _while7_exit
0880   0985             _while7_block:
0881   0985             ;; length++; 
0882   0985 2C FF FF      mov b, [bp + -1] ; $length             
0883   0988 FD 79         mov g, b
0884   098A FD 77         inc b
0885   098C FA FF FF      lea d, [bp + -1] ; $length
0886   098F FD 43         mov [d], b
0887   0991 FD 27         mov b, g
0888   0993 0A 65 09      jmp _while7_cond
0889   0996             _while7_exit:
0890   0996             ;; return length; 
0891   0996 2C FF FF      mov b, [bp + -1] ; $length             
0892   0999 F9            leave
0893   099A 09            ret
0894   099B             
0895   099B             va_arg:
0896   099B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0897   099E             ; $val 
0898   099E 52 02 00      sub sp, 2
0899   09A1             ;; if(size == 1){ 
0900   09A1             _if8_cond:
0901   09A1 2C 05 00      mov b, [bp + 5] ; $size             
0902   09A4             ; START RELATIONAL
0903   09A4 D7            push a
0904   09A5 11            mov a, b
0905   09A6 26 01 00      mov b, $1
0906   09A9 B0            cmp a, b
0907   09AA FD 71         seq ; ==
0908   09AC E4            pop a
0909   09AD             ; END RELATIONAL
0910   09AD C0 00 00      cmp b, 0
0911   09B0 C6 CC 09      je _if8_else
0912   09B3             _if8_true:
0913   09B3             ;; val = *(char*)arg->p; 
0914   09B3 FA FF FF      lea d, [bp + -1] ; $val
0915   09B6 DA            push d
0916   09B7 FA 07 00      lea d, [bp + 7] ; $arg
0917   09BA FD 2A         mov d, [d]
0918   09BC 58 00 00      add d, 0
0919   09BF FD 14         clb
0920   09C1 2A            mov b, [d]
0921   09C2 74            mov d, b
0922   09C3 32            mov bl, [d]
0923   09C4 A7 00         mov bh, 0
0924   09C6 E7            pop d
0925   09C7 FD 43         mov [d], b
0926   09C9 0A 01 0A      jmp _if8_exit
0927   09CC             _if8_else:
0928   09CC             ;; if(size == 2){ 
0929   09CC             _if9_cond:
0930   09CC 2C 05 00      mov b, [bp + 5] ; $size             
0931   09CF             ; START RELATIONAL
0932   09CF D7            push a
0933   09D0 11            mov a, b
0934   09D1 26 02 00      mov b, $2
0935   09D4 B0            cmp a, b
0936   09D5 FD 71         seq ; ==
0937   09D7 E4            pop a
0938   09D8             ; END RELATIONAL
0939   09D8 C0 00 00      cmp b, 0
0940   09DB C6 F5 09      je _if9_else
0941   09DE             _if9_true:
0942   09DE             ;; val = *(int*)arg->p; 
0943   09DE FA FF FF      lea d, [bp + -1] ; $val
0944   09E1 DA            push d
0945   09E2 FA 07 00      lea d, [bp + 7] ; $arg
0946   09E5 FD 2A         mov d, [d]
0947   09E7 58 00 00      add d, 0
0948   09EA FD 14         clb
0949   09EC 2A            mov b, [d]
0950   09ED 74            mov d, b
0951   09EE 2A            mov b, [d]
0952   09EF E7            pop d
0953   09F0 FD 43         mov [d], b
0954   09F2 0A 01 0A      jmp _if9_exit
0955   09F5             _if9_else:
0956   09F5             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
0957   09F5 26 44 27      mov b, __s0 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
0958   09F8 FD AB         swp b
0959   09FA D8            push b
0960   09FB 07 EA 0F      call print
0961   09FE 51 02 00      add sp, 2
0962   0A01             _if9_exit:
0963   0A01             _if8_exit:
0964   0A01             ;; arg->p = arg->p + size; 
0965   0A01 FA 07 00      lea d, [bp + 7] ; $arg
0966   0A04 FD 2A         mov d, [d]
0967   0A06 58 00 00      add d, 0
0968   0A09 FD 14         clb
0969   0A0B DA            push d
0970   0A0C FA 07 00      lea d, [bp + 7] ; $arg
0971   0A0F FD 2A         mov d, [d]
0972   0A11 58 00 00      add d, 0
0973   0A14 FD 14         clb
0974   0A16 2A            mov b, [d]
0975   0A17             ; START TERMS
0976   0A17 D7            push a
0977   0A18 11            mov a, b
0978   0A19 2C 05 00      mov b, [bp + 5] ; $size             
0979   0A1C 54            add a, b
0980   0A1D 27            mov b, a
0981   0A1E E4            pop a
0982   0A1F             ; END TERMS
0983   0A1F E7            pop d
0984   0A20 FD 43         mov [d], b
0985   0A22             ;; return val; 
0986   0A22 2C FF FF      mov b, [bp + -1] ; $val             
0987   0A25 F9            leave
0988   0A26 09            ret
0989   0A27             
0990   0A27             printf:
0991   0A27 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0992   0A2A             ; $p 
0993   0A2A             ; $fp 
0994   0A2A             ; $i 
0995   0A2A 52 06 00      sub sp, 6
0996   0A2D             ;; fp = format; 
0997   0A2D FA FD FF      lea d, [bp + -3] ; $fp         
0998   0A30 2C 05 00      mov b, [bp + 5] ; $format                     
0999   0A33 FD 43         mov [d], b
1000   0A35             ;; p = &format; 
1001   0A35 FA FF FF      lea d, [bp + -1] ; $p
1002   0A38 DA            push d
1003   0A39 FA 05 00      lea d, [bp + 5] ; $format
1004   0A3C 2D            mov b, d
1005   0A3D E7            pop d
1006   0A3E FD 43         mov [d], b
1007   0A40             ;; for(;;){ 
1008   0A40             _for10_init:
1009   0A40             _for10_cond:
1010   0A40             _for10_block:
1011   0A40             ;; if(!*fp) break; 
1012   0A40             _if11_cond:
1013   0A40 2C FD FF      mov b, [bp + -3] ; $fp             
1014   0A43 74            mov d, b
1015   0A44 32            mov bl, [d]
1016   0A45 A7 00         mov bh, 0
1017   0A47 C0 00 00      cmp b, 0
1018   0A4A FD 71         seq ; !
1019   0A4C C0 00 00      cmp b, 0
1020   0A4F C6 58 0A      je _if11_exit
1021   0A52             _if11_true:
1022   0A52             ;; break; 
1023   0A52 0A 88 0B      jmp _for10_exit ; for break
1024   0A55 0A 58 0A      jmp _if11_exit
1025   0A58             _if11_exit:
1026   0A58             ;; if(*fp == '%'){ 
1027   0A58             _if12_cond:
1028   0A58 2C FD FF      mov b, [bp + -3] ; $fp             
1029   0A5B 74            mov d, b
1030   0A5C 32            mov bl, [d]
1031   0A5D A7 00         mov bh, 0
1032   0A5F             ; START RELATIONAL
1033   0A5F D7            push a
1034   0A60 11            mov a, b
1035   0A61 26 25 00      mov b, $25
1036   0A64 B0            cmp a, b
1037   0A65 FD 71         seq ; ==
1038   0A67 E4            pop a
1039   0A68             ; END RELATIONAL
1040   0A68 C0 00 00      cmp b, 0
1041   0A6B C6 69 0B      je _if12_else
1042   0A6E             _if12_true:
1043   0A6E             ;; fp++; 
1044   0A6E 2C FD FF      mov b, [bp + -3] ; $fp             
1045   0A71 FD 79         mov g, b
1046   0A73 FD 77         inc b
1047   0A75 FA FD FF      lea d, [bp + -3] ; $fp
1048   0A78 FD 43         mov [d], b
1049   0A7A FD 27         mov b, g
1050   0A7C             ;; switch(*fp){ 
1051   0A7C             _switch13_expr:
1052   0A7C 2C FD FF      mov b, [bp + -3] ; $fp             
1053   0A7F 74            mov d, b
1054   0A80 32            mov bl, [d]
1055   0A81 A7 00         mov bh, 0
1056   0A83             _switch13_comparisons:
1057   0A83 C1 64         cmp bl, $64
1058   0A85 C6 A7 0A      je _switch13_case0
1059   0A88 C1 69         cmp bl, $69
1060   0A8A C6 A7 0A      je _switch13_case1
1061   0A8D C1 75         cmp bl, $75
1062   0A8F C6 C8 0A      je _switch13_case2
1063   0A92 C1 78         cmp bl, $78
1064   0A94 C6 E9 0A      je _switch13_case3
1065   0A97 C1 63         cmp bl, $63
1066   0A99 C6 0A 0B      je _switch13_case4
1067   0A9C C1 73         cmp bl, $73
1068   0A9E C6 2B 0B      je _switch13_case5
1069   0AA1 0A 4C 0B      jmp _switch13_default
1070   0AA4 0A 58 0B      jmp _switch13_exit
1071   0AA7             _switch13_case0:
1072   0AA7             _switch13_case1:
1073   0AA7             ;; p = p - 2; 
1074   0AA7 FA FF FF      lea d, [bp + -1] ; $p         
1075   0AAA 2C FF FF      mov b, [bp + -1] ; $p             
1076   0AAD             ; START TERMS
1077   0AAD D7            push a
1078   0AAE 11            mov a, b
1079   0AAF 26 02 00      mov b, $2
1080   0AB2 60            sub a, b
1081   0AB3 27            mov b, a
1082   0AB4 E4            pop a
1083   0AB5             ; END TERMS        
1084   0AB5 FD 43         mov [d], b
1085   0AB7             ;; prints(*(int*)p); 
1086   0AB7 2C FF FF      mov b, [bp + -1] ; $p             
1087   0ABA 74            mov d, b
1088   0ABB 2A            mov b, [d]
1089   0ABC FD AB         swp b
1090   0ABE D8            push b
1091   0ABF 07 EE 0D      call prints
1092   0AC2 51 02 00      add sp, 2
1093   0AC5             ;; break; 
1094   0AC5 0A 58 0B      jmp _switch13_exit ; case break
1095   0AC8             _switch13_case2:
1096   0AC8             ;; p = p - 2; 
1097   0AC8 FA FF FF      lea d, [bp + -1] ; $p         
1098   0ACB 2C FF FF      mov b, [bp + -1] ; $p             
1099   0ACE             ; START TERMS
1100   0ACE D7            push a
1101   0ACF 11            mov a, b
1102   0AD0 26 02 00      mov b, $2
1103   0AD3 60            sub a, b
1104   0AD4 27            mov b, a
1105   0AD5 E4            pop a
1106   0AD6             ; END TERMS        
1107   0AD6 FD 43         mov [d], b
1108   0AD8             ;; printu(*(unsigned int*)p); 
1109   0AD8 2C FF FF      mov b, [bp + -1] ; $p             
1110   0ADB 74            mov d, b
1111   0ADC 2A            mov b, [d]
1112   0ADD FD AB         swp b
1113   0ADF D8            push b
1114   0AE0 07 CE 0E      call printu
1115   0AE3 51 02 00      add sp, 2
1116   0AE6             ;; break; 
1117   0AE6 0A 58 0B      jmp _switch13_exit ; case break
1118   0AE9             _switch13_case3:
1119   0AE9             ;; p = p - 2; 
1120   0AE9 FA FF FF      lea d, [bp + -1] ; $p         
1121   0AEC 2C FF FF      mov b, [bp + -1] ; $p             
1122   0AEF             ; START TERMS
1123   0AEF D7            push a
1124   0AF0 11            mov a, b
1125   0AF1 26 02 00      mov b, $2
1126   0AF4 60            sub a, b
1127   0AF5 27            mov b, a
1128   0AF6 E4            pop a
1129   0AF7             ; END TERMS        
1130   0AF7 FD 43         mov [d], b
1131   0AF9             ;; printx16(*(unsigned int*)p); 
1132   0AF9 2C FF FF      mov b, [bp + -1] ; $p             
1133   0AFC 74            mov d, b
1134   0AFD 2A            mov b, [d]
1135   0AFE FD AB         swp b
1136   0B00 D8            push b
1137   0B01 07 8A 0B      call printx16
1138   0B04 51 02 00      add sp, 2
1139   0B07             ;; break; 
1140   0B07 0A 58 0B      jmp _switch13_exit ; case break
1141   0B0A             _switch13_case4:
1142   0B0A             ;; p = p - 2; 
1143   0B0A FA FF FF      lea d, [bp + -1] ; $p         
1144   0B0D 2C FF FF      mov b, [bp + -1] ; $p             
1145   0B10             ; START TERMS
1146   0B10 D7            push a
1147   0B11 11            mov a, b
1148   0B12 26 02 00      mov b, $2
1149   0B15 60            sub a, b
1150   0B16 27            mov b, a
1151   0B17 E4            pop a
1152   0B18             ; END TERMS        
1153   0B18 FD 43         mov [d], b
1154   0B1A             ;; putchar(*(char*)p); 
1155   0B1A 2C FF FF      mov b, [bp + -1] ; $p             
1156   0B1D 74            mov d, b
1157   0B1E 32            mov bl, [d]
1158   0B1F A7 00         mov bh, 0
1159   0B21 DD            push bl
1160   0B22 07 A5 0F      call putchar
1161   0B25 51 01 00      add sp, 1
1162   0B28             ;; break; 
1163   0B28 0A 58 0B      jmp _switch13_exit ; case break
1164   0B2B             _switch13_case5:
1165   0B2B             ;; p = p - 2; 
1166   0B2B FA FF FF      lea d, [bp + -1] ; $p         
1167   0B2E 2C FF FF      mov b, [bp + -1] ; $p             
1168   0B31             ; START TERMS
1169   0B31 D7            push a
1170   0B32 11            mov a, b
1171   0B33 26 02 00      mov b, $2
1172   0B36 60            sub a, b
1173   0B37 27            mov b, a
1174   0B38 E4            pop a
1175   0B39             ; END TERMS        
1176   0B39 FD 43         mov [d], b
1177   0B3B             ;; print(*(char**)p); 
1178   0B3B 2C FF FF      mov b, [bp + -1] ; $p             
1179   0B3E 74            mov d, b
1180   0B3F 2A            mov b, [d]
1181   0B40 FD AB         swp b
1182   0B42 D8            push b
1183   0B43 07 EA 0F      call print
1184   0B46 51 02 00      add sp, 2
1185   0B49             ;; break; 
1186   0B49 0A 58 0B      jmp _switch13_exit ; case break
1187   0B4C             _switch13_default:
1188   0B4C             ;; print("Error: Unknown argument type.\n"); 
1189   0B4C 26 88 27      mov b, __s1 ; "Error: Unknown argument type.\n"
1190   0B4F FD AB         swp b
1191   0B51 D8            push b
1192   0B52 07 EA 0F      call print
1193   0B55 51 02 00      add sp, 2
1194   0B58             _switch13_exit:
1195   0B58             ;; fp++; 
1196   0B58 2C FD FF      mov b, [bp + -3] ; $fp             
1197   0B5B FD 79         mov g, b
1198   0B5D FD 77         inc b
1199   0B5F FA FD FF      lea d, [bp + -3] ; $fp
1200   0B62 FD 43         mov [d], b
1201   0B64 FD 27         mov b, g
1202   0B66 0A 85 0B      jmp _if12_exit
1203   0B69             _if12_else:
1204   0B69             ;; putchar(*fp); 
1205   0B69 2C FD FF      mov b, [bp + -3] ; $fp             
1206   0B6C 74            mov d, b
1207   0B6D 32            mov bl, [d]
1208   0B6E A7 00         mov bh, 0
1209   0B70 DD            push bl
1210   0B71 07 A5 0F      call putchar
1211   0B74 51 01 00      add sp, 1
1212   0B77             ;; fp++; 
1213   0B77 2C FD FF      mov b, [bp + -3] ; $fp             
1214   0B7A FD 79         mov g, b
1215   0B7C FD 77         inc b
1216   0B7E FA FD FF      lea d, [bp + -3] ; $fp
1217   0B81 FD 43         mov [d], b
1218   0B83 FD 27         mov b, g
1219   0B85             _if12_exit:
1220   0B85             _for10_update:
1221   0B85 0A 40 0A      jmp _for10_cond
1222   0B88             _for10_exit:
1223   0B88 F9            leave
1224   0B89 09            ret
1225   0B8A             
1226   0B8A             printx16:
1227   0B8A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1228   0B8D             
1229   0B8D             ; --- BEGIN INLINE ASM BLOCK
1230   0B8D 2C 05 00      mov b, [bp + 5] ; $hex             
1231   0B90 07 32 13      call print_u16x
1232   0B93             ; --- END INLINE ASM BLOCK
1233   0B93             
1234   0B93 F9            leave
1235   0B94 09            ret
1236   0B95             
1237   0B95             printx8:
1238   0B95 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1239   0B98             
1240   0B98             ; --- BEGIN INLINE ASM BLOCK
1241   0B98 FA 05 00      lea d, [bp + 5] ; $hex
1242   0B9B 32            mov bl, [d]
1243   0B9C 07 76 13      call print_u8x
1244   0B9F             ; --- END INLINE ASM BLOCK
1245   0B9F             
1246   0B9F F9            leave
1247   0BA0 09            ret
1248   0BA1             
1249   0BA1             hex_to_int:
1250   0BA1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1251   0BA4             ; $value 
1252   0BA4 10 00 00      mov a, $0
1253   0BA7 45 FF FF      mov [bp + -1], a
1254   0BAA             ; $i 
1255   0BAA             ; $hex_char 
1256   0BAA             ; $len 
1257   0BAA 52 07 00      sub sp, 7
1258   0BAD             ;; len = strlen(hex_string); 
1259   0BAD FA FA FF      lea d, [bp + -6] ; $len
1260   0BB0 DA            push d
1261   0BB1 2C 05 00      mov b, [bp + 5] ; $hex_string             
1262   0BB4 FD AB         swp b
1263   0BB6 D8            push b
1264   0BB7 07 57 09      call strlen
1265   0BBA 51 02 00      add sp, 2
1266   0BBD E7            pop d
1267   0BBE FD 43         mov [d], b
1268   0BC0             ;; for (i = 0; i < len; i++) { 
1269   0BC0             _for14_init:
1270   0BC0 FA FD FF      lea d, [bp + -3] ; $i         
1271   0BC3 26 00 00      mov b, $0        
1272   0BC6 FD 43         mov [d], b
1273   0BC8             _for14_cond:
1274   0BC8 2C FD FF      mov b, [bp + -3] ; $i             
1275   0BCB             ; START RELATIONAL
1276   0BCB D7            push a
1277   0BCC 11            mov a, b
1278   0BCD 2C FA FF      mov b, [bp + -6] ; $len             
1279   0BD0 B0            cmp a, b
1280   0BD1 FD 73         slt ; < 
1281   0BD3 E4            pop a
1282   0BD4             ; END RELATIONAL
1283   0BD4 C0 00 00      cmp b, 0
1284   0BD7 C6 C8 0C      je _for14_exit
1285   0BDA             _for14_block:
1286   0BDA             ;; hex_char = hex_string[i]; 
1287   0BDA FA FC FF      lea d, [bp + -4] ; $hex_char
1288   0BDD DA            push d
1289   0BDE FA 05 00      lea d, [bp + 5] ; $hex_string
1290   0BE1 FD 2A         mov d, [d]
1291   0BE3 D7            push a         
1292   0BE4 2C FD FF      mov b, [bp + -3] ; $i                     
1293   0BE7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1294   0BEB E4            pop a
1295   0BEC 32            mov bl, [d]
1296   0BED A7 00         mov bh, 0
1297   0BEF E7            pop d
1298   0BF0 FD 3E         mov [d], bl
1299   0BF2             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1300   0BF2             _if15_cond:
1301   0BF2 34 FC FF      mov bl, [bp + -4] ; $hex_char
1302   0BF5 A7 00         mov bh, 0             
1303   0BF7             ; START RELATIONAL
1304   0BF7 D7            push a
1305   0BF8 11            mov a, b
1306   0BF9 26 61 00      mov b, $61
1307   0BFC B0            cmp a, b
1308   0BFD FD 80         sge ; >=
1309   0BFF E4            pop a
1310   0C00             ; END RELATIONAL
1311   0C00 D7            push a
1312   0C01 11            mov a, b
1313   0C02 34 FC FF      mov bl, [bp + -4] ; $hex_char
1314   0C05 A7 00         mov bh, 0             
1315   0C07             ; START RELATIONAL
1316   0C07 D7            push a
1317   0C08 11            mov a, b
1318   0C09 26 66 00      mov b, $66
1319   0C0C B0            cmp a, b
1320   0C0D FD 74         sle ; <=
1321   0C0F E4            pop a
1322   0C10             ; END RELATIONAL
1323   0C10 FD A7         sand a, b ; &&
1324   0C12 E4            pop a
1325   0C13 C0 00 00      cmp b, 0
1326   0C16 C6 43 0C      je _if15_else
1327   0C19             _if15_true:
1328   0C19             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1329   0C19 FA FF FF      lea d, [bp + -1] ; $value         
1330   0C1C 2C FF FF      mov b, [bp + -1] ; $value             
1331   0C1F             ; START FACTORS
1332   0C1F D7            push a
1333   0C20 11            mov a, b
1334   0C21 26 10 00      mov b, $10
1335   0C24 AC            mul a, b ; *
1336   0C25 11            mov a, b
1337   0C26 27            mov b, a
1338   0C27 E4            pop a
1339   0C28             ; END FACTORS
1340   0C28             ; START TERMS
1341   0C28 D7            push a
1342   0C29 11            mov a, b
1343   0C2A 34 FC FF      mov bl, [bp + -4] ; $hex_char
1344   0C2D A7 00         mov bh, 0             
1345   0C2F             ; START TERMS
1346   0C2F D7            push a
1347   0C30 11            mov a, b
1348   0C31 26 61 00      mov b, $61
1349   0C34 60            sub a, b
1350   0C35 26 0A 00      mov b, $a
1351   0C38 54            add a, b
1352   0C39 27            mov b, a
1353   0C3A E4            pop a
1354   0C3B             ; END TERMS
1355   0C3B 54            add a, b
1356   0C3C 27            mov b, a
1357   0C3D E4            pop a
1358   0C3E             ; END TERMS        
1359   0C3E FD 43         mov [d], b
1360   0C40 0A B7 0C      jmp _if15_exit
1361   0C43             _if15_else:
1362   0C43             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1363   0C43             _if16_cond:
1364   0C43 34 FC FF      mov bl, [bp + -4] ; $hex_char
1365   0C46 A7 00         mov bh, 0             
1366   0C48             ; START RELATIONAL
1367   0C48 D7            push a
1368   0C49 11            mov a, b
1369   0C4A 26 41 00      mov b, $41
1370   0C4D B0            cmp a, b
1371   0C4E FD 80         sge ; >=
1372   0C50 E4            pop a
1373   0C51             ; END RELATIONAL
1374   0C51 D7            push a
1375   0C52 11            mov a, b
1376   0C53 34 FC FF      mov bl, [bp + -4] ; $hex_char
1377   0C56 A7 00         mov bh, 0             
1378   0C58             ; START RELATIONAL
1379   0C58 D7            push a
1380   0C59 11            mov a, b
1381   0C5A 26 46 00      mov b, $46
1382   0C5D B0            cmp a, b
1383   0C5E FD 74         sle ; <=
1384   0C60 E4            pop a
1385   0C61             ; END RELATIONAL
1386   0C61 FD A7         sand a, b ; &&
1387   0C63 E4            pop a
1388   0C64 C0 00 00      cmp b, 0
1389   0C67 C6 94 0C      je _if16_else
1390   0C6A             _if16_true:
1391   0C6A             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1392   0C6A FA FF FF      lea d, [bp + -1] ; $value         
1393   0C6D 2C FF FF      mov b, [bp + -1] ; $value             
1394   0C70             ; START FACTORS
1395   0C70 D7            push a
1396   0C71 11            mov a, b
1397   0C72 26 10 00      mov b, $10
1398   0C75 AC            mul a, b ; *
1399   0C76 11            mov a, b
1400   0C77 27            mov b, a
1401   0C78 E4            pop a
1402   0C79             ; END FACTORS
1403   0C79             ; START TERMS
1404   0C79 D7            push a
1405   0C7A 11            mov a, b
1406   0C7B 34 FC FF      mov bl, [bp + -4] ; $hex_char
1407   0C7E A7 00         mov bh, 0             
1408   0C80             ; START TERMS
1409   0C80 D7            push a
1410   0C81 11            mov a, b
1411   0C82 26 41 00      mov b, $41
1412   0C85 60            sub a, b
1413   0C86 26 0A 00      mov b, $a
1414   0C89 54            add a, b
1415   0C8A 27            mov b, a
1416   0C8B E4            pop a
1417   0C8C             ; END TERMS
1418   0C8C 54            add a, b
1419   0C8D 27            mov b, a
1420   0C8E E4            pop a
1421   0C8F             ; END TERMS        
1422   0C8F FD 43         mov [d], b
1423   0C91 0A B7 0C      jmp _if16_exit
1424   0C94             _if16_else:
1425   0C94             ;; value = (value * 16) + (hex_char - '0'); 
1426   0C94 FA FF FF      lea d, [bp + -1] ; $value         
1427   0C97 2C FF FF      mov b, [bp + -1] ; $value             
1428   0C9A             ; START FACTORS
1429   0C9A D7            push a
1430   0C9B 11            mov a, b
1431   0C9C 26 10 00      mov b, $10
1432   0C9F AC            mul a, b ; *
1433   0CA0 11            mov a, b
1434   0CA1 27            mov b, a
1435   0CA2 E4            pop a
1436   0CA3             ; END FACTORS
1437   0CA3             ; START TERMS
1438   0CA3 D7            push a
1439   0CA4 11            mov a, b
1440   0CA5 34 FC FF      mov bl, [bp + -4] ; $hex_char
1441   0CA8 A7 00         mov bh, 0             
1442   0CAA             ; START TERMS
1443   0CAA D7            push a
1444   0CAB 11            mov a, b
1445   0CAC 26 30 00      mov b, $30
1446   0CAF 60            sub a, b
1447   0CB0 27            mov b, a
1448   0CB1 E4            pop a
1449   0CB2             ; END TERMS
1450   0CB2 54            add a, b
1451   0CB3 27            mov b, a
1452   0CB4 E4            pop a
1453   0CB5             ; END TERMS        
1454   0CB5 FD 43         mov [d], b
1455   0CB7             _if16_exit:
1456   0CB7             _if15_exit:
1457   0CB7             _for14_update:
1458   0CB7 2C FD FF      mov b, [bp + -3] ; $i             
1459   0CBA FD 79         mov g, b
1460   0CBC FD 77         inc b
1461   0CBE FA FD FF      lea d, [bp + -3] ; $i
1462   0CC1 FD 43         mov [d], b
1463   0CC3 FD 27         mov b, g
1464   0CC5 0A C8 0B      jmp _for14_cond
1465   0CC8             _for14_exit:
1466   0CC8             ;; return value; 
1467   0CC8 2C FF FF      mov b, [bp + -1] ; $value             
1468   0CCB F9            leave
1469   0CCC 09            ret
1470   0CCD             
1471   0CCD             atoi:
1472   0CCD F8 00 00      enter 0 ; (push bp; mov bp, sp)
1473   0CD0             ; $result 
1474   0CD0 10 00 00      mov a, $0
1475   0CD3 45 FF FF      mov [bp + -1], a
1476   0CD6             ; $sign 
1477   0CD6 10 01 00      mov a, $1
1478   0CD9 45 FD FF      mov [bp + -3], a
1479   0CDC 52 04 00      sub sp, 4
1480   0CDF             ;; while (*str == ' ') str++; 
1481   0CDF             _while17_cond:
1482   0CDF 2C 05 00      mov b, [bp + 5] ; $str             
1483   0CE2 74            mov d, b
1484   0CE3 32            mov bl, [d]
1485   0CE4 A7 00         mov bh, 0
1486   0CE6             ; START RELATIONAL
1487   0CE6 D7            push a
1488   0CE7 11            mov a, b
1489   0CE8 26 20 00      mov b, $20
1490   0CEB B0            cmp a, b
1491   0CEC FD 71         seq ; ==
1492   0CEE E4            pop a
1493   0CEF             ; END RELATIONAL
1494   0CEF C0 00 00      cmp b, 0
1495   0CF2 C6 06 0D      je _while17_exit
1496   0CF5             _while17_block:
1497   0CF5             ;; str++; 
1498   0CF5 2C 05 00      mov b, [bp + 5] ; $str             
1499   0CF8 FD 79         mov g, b
1500   0CFA FD 77         inc b
1501   0CFC FA 05 00      lea d, [bp + 5] ; $str
1502   0CFF FD 43         mov [d], b
1503   0D01 FD 27         mov b, g
1504   0D03 0A DF 0C      jmp _while17_cond
1505   0D06             _while17_exit:
1506   0D06             ;; if (*str == '-' || *str == '+') { 
1507   0D06             _if18_cond:
1508   0D06 2C 05 00      mov b, [bp + 5] ; $str             
1509   0D09 74            mov d, b
1510   0D0A 32            mov bl, [d]
1511   0D0B A7 00         mov bh, 0
1512   0D0D             ; START RELATIONAL
1513   0D0D D7            push a
1514   0D0E 11            mov a, b
1515   0D0F 26 2D 00      mov b, $2d
1516   0D12 B0            cmp a, b
1517   0D13 FD 71         seq ; ==
1518   0D15 E4            pop a
1519   0D16             ; END RELATIONAL
1520   0D16 D7            push a
1521   0D17 11            mov a, b
1522   0D18 2C 05 00      mov b, [bp + 5] ; $str             
1523   0D1B 74            mov d, b
1524   0D1C 32            mov bl, [d]
1525   0D1D A7 00         mov bh, 0
1526   0D1F             ; START RELATIONAL
1527   0D1F D7            push a
1528   0D20 11            mov a, b
1529   0D21 26 2B 00      mov b, $2b
1530   0D24 B0            cmp a, b
1531   0D25 FD 71         seq ; ==
1532   0D27 E4            pop a
1533   0D28             ; END RELATIONAL
1534   0D28 FD A8         sor a, b ; ||
1535   0D2A E4            pop a
1536   0D2B C0 00 00      cmp b, 0
1537   0D2E C6 65 0D      je _if18_exit
1538   0D31             _if18_true:
1539   0D31             ;; if (*str == '-') sign = -1; 
1540   0D31             _if19_cond:
1541   0D31 2C 05 00      mov b, [bp + 5] ; $str             
1542   0D34 74            mov d, b
1543   0D35 32            mov bl, [d]
1544   0D36 A7 00         mov bh, 0
1545   0D38             ; START RELATIONAL
1546   0D38 D7            push a
1547   0D39 11            mov a, b
1548   0D3A 26 2D 00      mov b, $2d
1549   0D3D B0            cmp a, b
1550   0D3E FD 71         seq ; ==
1551   0D40 E4            pop a
1552   0D41             ; END RELATIONAL
1553   0D41 C0 00 00      cmp b, 0
1554   0D44 C6 54 0D      je _if19_exit
1555   0D47             _if19_true:
1556   0D47             ;; sign = -1; 
1557   0D47 FA FD FF      lea d, [bp + -3] ; $sign         
1558   0D4A 26 01 00      mov b, $1
1559   0D4D FD 97         neg b        
1560   0D4F FD 43         mov [d], b
1561   0D51 0A 54 0D      jmp _if19_exit
1562   0D54             _if19_exit:
1563   0D54             ;; str++; 
1564   0D54 2C 05 00      mov b, [bp + 5] ; $str             
1565   0D57 FD 79         mov g, b
1566   0D59 FD 77         inc b
1567   0D5B FA 05 00      lea d, [bp + 5] ; $str
1568   0D5E FD 43         mov [d], b
1569   0D60 FD 27         mov b, g
1570   0D62 0A 65 0D      jmp _if18_exit
1571   0D65             _if18_exit:
1572   0D65             ;; while (*str >= '0' && *str <= '9') { 
1573   0D65             _while20_cond:
1574   0D65 2C 05 00      mov b, [bp + 5] ; $str             
1575   0D68 74            mov d, b
1576   0D69 32            mov bl, [d]
1577   0D6A A7 00         mov bh, 0
1578   0D6C             ; START RELATIONAL
1579   0D6C D7            push a
1580   0D6D 11            mov a, b
1581   0D6E 26 30 00      mov b, $30
1582   0D71 B0            cmp a, b
1583   0D72 FD 80         sge ; >=
1584   0D74 E4            pop a
1585   0D75             ; END RELATIONAL
1586   0D75 D7            push a
1587   0D76 11            mov a, b
1588   0D77 2C 05 00      mov b, [bp + 5] ; $str             
1589   0D7A 74            mov d, b
1590   0D7B 32            mov bl, [d]
1591   0D7C A7 00         mov bh, 0
1592   0D7E             ; START RELATIONAL
1593   0D7E D7            push a
1594   0D7F 11            mov a, b
1595   0D80 26 39 00      mov b, $39
1596   0D83 B0            cmp a, b
1597   0D84 FD 74         sle ; <=
1598   0D86 E4            pop a
1599   0D87             ; END RELATIONAL
1600   0D87 FD A7         sand a, b ; &&
1601   0D89 E4            pop a
1602   0D8A C0 00 00      cmp b, 0
1603   0D8D C6 C8 0D      je _while20_exit
1604   0D90             _while20_block:
1605   0D90             ;; result = result * 10 + (*str - '0'); 
1606   0D90 FA FF FF      lea d, [bp + -1] ; $result
1607   0D93 DA            push d
1608   0D94 2C FF FF      mov b, [bp + -1] ; $result             
1609   0D97             ; START FACTORS
1610   0D97 D7            push a
1611   0D98 11            mov a, b
1612   0D99 26 0A 00      mov b, $a
1613   0D9C AC            mul a, b ; *
1614   0D9D 11            mov a, b
1615   0D9E 27            mov b, a
1616   0D9F E4            pop a
1617   0DA0             ; END FACTORS
1618   0DA0             ; START TERMS
1619   0DA0 D7            push a
1620   0DA1 11            mov a, b
1621   0DA2 2C 05 00      mov b, [bp + 5] ; $str             
1622   0DA5 74            mov d, b
1623   0DA6 32            mov bl, [d]
1624   0DA7 A7 00         mov bh, 0
1625   0DA9             ; START TERMS
1626   0DA9 D7            push a
1627   0DAA 11            mov a, b
1628   0DAB 26 30 00      mov b, $30
1629   0DAE 60            sub a, b
1630   0DAF 27            mov b, a
1631   0DB0 E4            pop a
1632   0DB1             ; END TERMS
1633   0DB1 54            add a, b
1634   0DB2 27            mov b, a
1635   0DB3 E4            pop a
1636   0DB4             ; END TERMS
1637   0DB4 E7            pop d
1638   0DB5 FD 43         mov [d], b
1639   0DB7             ;; str++; 
1640   0DB7 2C 05 00      mov b, [bp + 5] ; $str             
1641   0DBA FD 79         mov g, b
1642   0DBC FD 77         inc b
1643   0DBE FA 05 00      lea d, [bp + 5] ; $str
1644   0DC1 FD 43         mov [d], b
1645   0DC3 FD 27         mov b, g
1646   0DC5 0A 65 0D      jmp _while20_cond
1647   0DC8             _while20_exit:
1648   0DC8             ;; return sign * result; 
1649   0DC8 2C FD FF      mov b, [bp + -3] ; $sign             
1650   0DCB             ; START FACTORS
1651   0DCB D7            push a
1652   0DCC 11            mov a, b
1653   0DCD 2C FF FF      mov b, [bp + -1] ; $result             
1654   0DD0 AC            mul a, b ; *
1655   0DD1 11            mov a, b
1656   0DD2 27            mov b, a
1657   0DD3 E4            pop a
1658   0DD4             ; END FACTORS
1659   0DD4 F9            leave
1660   0DD5 09            ret
1661   0DD6             
1662   0DD6             gets:
1663   0DD6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1664   0DD9             
1665   0DD9             ; --- BEGIN INLINE ASM BLOCK
1666   0DD9 17 05 00      mov a, [bp + 5] ; $s             
1667   0DDC 3C            mov d, a
1668   0DDD 07 97 11      call _gets
1669   0DE0             ; --- END INLINE ASM BLOCK
1670   0DE0             
1671   0DE0             ;; return strlen(s); 
1672   0DE0 2C 05 00      mov b, [bp + 5] ; $s             
1673   0DE3 FD AB         swp b
1674   0DE5 D8            push b
1675   0DE6 07 57 09      call strlen
1676   0DE9 51 02 00      add sp, 2
1677   0DEC F9            leave
1678   0DED 09            ret
1679   0DEE             
1680   0DEE             prints:
1681   0DEE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1682   0DF1             ; $digits 
1683   0DF1             ; $i 
1684   0DF1 10 00 00      mov a, $0
1685   0DF4 45 FA FF      mov [bp + -6], a
1686   0DF7 52 07 00      sub sp, 7
1687   0DFA             ;; if (num < 0) { 
1688   0DFA             _if21_cond:
1689   0DFA 2C 05 00      mov b, [bp + 5] ; $num             
1690   0DFD             ; START RELATIONAL
1691   0DFD D7            push a
1692   0DFE 11            mov a, b
1693   0DFF 26 00 00      mov b, $0
1694   0E02 B0            cmp a, b
1695   0E03 FD 73         slt ; < 
1696   0E05 E4            pop a
1697   0E06             ; END RELATIONAL
1698   0E06 C0 00 00      cmp b, 0
1699   0E09 C6 23 0E      je _if21_else
1700   0E0C             _if21_true:
1701   0E0C             ;; putchar('-'); 
1702   0E0C 26 2D 00      mov b, $2d
1703   0E0F DD            push bl
1704   0E10 07 A5 0F      call putchar
1705   0E13 51 01 00      add sp, 1
1706   0E16             ;; num = -num; 
1707   0E16 FA 05 00      lea d, [bp + 5] ; $num         
1708   0E19 2C 05 00      mov b, [bp + 5] ; $num             
1709   0E1C FD 97         neg b        
1710   0E1E FD 43         mov [d], b
1711   0E20 0A 44 0E      jmp _if21_exit
1712   0E23             _if21_else:
1713   0E23             ;; if (num == 0) { 
1714   0E23             _if22_cond:
1715   0E23 2C 05 00      mov b, [bp + 5] ; $num             
1716   0E26             ; START RELATIONAL
1717   0E26 D7            push a
1718   0E27 11            mov a, b
1719   0E28 26 00 00      mov b, $0
1720   0E2B B0            cmp a, b
1721   0E2C FD 71         seq ; ==
1722   0E2E E4            pop a
1723   0E2F             ; END RELATIONAL
1724   0E2F C0 00 00      cmp b, 0
1725   0E32 C6 44 0E      je _if22_exit
1726   0E35             _if22_true:
1727   0E35             ;; putchar('0'); 
1728   0E35 26 30 00      mov b, $30
1729   0E38 DD            push bl
1730   0E39 07 A5 0F      call putchar
1731   0E3C 51 01 00      add sp, 1
1732   0E3F             ;; return; 
1733   0E3F F9            leave
1734   0E40 09            ret
1735   0E41 0A 44 0E      jmp _if22_exit
1736   0E44             _if22_exit:
1737   0E44             _if21_exit:
1738   0E44             ;; while (num > 0) { 
1739   0E44             _while23_cond:
1740   0E44 2C 05 00      mov b, [bp + 5] ; $num             
1741   0E47             ; START RELATIONAL
1742   0E47 D7            push a
1743   0E48 11            mov a, b
1744   0E49 26 00 00      mov b, $0
1745   0E4C B0            cmp a, b
1746   0E4D FD 7F         sgt ; >
1747   0E4F E4            pop a
1748   0E50             ; END RELATIONAL
1749   0E50 C0 00 00      cmp b, 0
1750   0E53 C6 96 0E      je _while23_exit
1751   0E56             _while23_block:
1752   0E56             ;; digits[i] = '0' + (num % 10); 
1753   0E56 FA FC FF      lea d, [bp + -4] ; $digits
1754   0E59 D7            push a         
1755   0E5A 2C FA FF      mov b, [bp + -6] ; $i                     
1756   0E5D 5A            add d, b
1757   0E5E E4            pop a         
1758   0E5F 26 30 00      mov b, $30
1759   0E62             ; START TERMS
1760   0E62 D7            push a
1761   0E63 11            mov a, b
1762   0E64 2C 05 00      mov b, [bp + 5] ; $num             
1763   0E67             ; START FACTORS
1764   0E67 D7            push a
1765   0E68 11            mov a, b
1766   0E69 26 0A 00      mov b, $a
1767   0E6C AE            div a, b ; 
1768   0E6D 11            mov a, b
1769   0E6E 27            mov b, a
1770   0E6F E4            pop a
1771   0E70             ; END FACTORS
1772   0E70 54            add a, b
1773   0E71 27            mov b, a
1774   0E72 E4            pop a
1775   0E73             ; END TERMS        
1776   0E73 FD 3E         mov [d], bl
1777   0E75             ;; num = num / 10; 
1778   0E75 FA 05 00      lea d, [bp + 5] ; $num         
1779   0E78 2C 05 00      mov b, [bp + 5] ; $num             
1780   0E7B             ; START FACTORS
1781   0E7B D7            push a
1782   0E7C 11            mov a, b
1783   0E7D 26 0A 00      mov b, $a
1784   0E80 AE            div a, b
1785   0E81 27            mov b, a
1786   0E82 E4            pop a
1787   0E83             ; END FACTORS        
1788   0E83 FD 43         mov [d], b
1789   0E85             ;; i++; 
1790   0E85 2C FA FF      mov b, [bp + -6] ; $i             
1791   0E88 FD 79         mov g, b
1792   0E8A FD 77         inc b
1793   0E8C FA FA FF      lea d, [bp + -6] ; $i
1794   0E8F FD 43         mov [d], b
1795   0E91 FD 27         mov b, g
1796   0E93 0A 44 0E      jmp _while23_cond
1797   0E96             _while23_exit:
1798   0E96             ;; while (i > 0) { 
1799   0E96             _while24_cond:
1800   0E96 2C FA FF      mov b, [bp + -6] ; $i             
1801   0E99             ; START RELATIONAL
1802   0E99 D7            push a
1803   0E9A 11            mov a, b
1804   0E9B 26 00 00      mov b, $0
1805   0E9E B0            cmp a, b
1806   0E9F FD 7F         sgt ; >
1807   0EA1 E4            pop a
1808   0EA2             ; END RELATIONAL
1809   0EA2 C0 00 00      cmp b, 0
1810   0EA5 C6 CC 0E      je _while24_exit
1811   0EA8             _while24_block:
1812   0EA8             ;; i--; 
1813   0EA8 2C FA FF      mov b, [bp + -6] ; $i             
1814   0EAB FD 79         mov g, b
1815   0EAD FD 7D         dec b
1816   0EAF FA FA FF      lea d, [bp + -6] ; $i
1817   0EB2 FD 43         mov [d], b
1818   0EB4 FD 27         mov b, g
1819   0EB6             ;; putchar(digits[i]); 
1820   0EB6 FA FC FF      lea d, [bp + -4] ; $digits
1821   0EB9 D7            push a         
1822   0EBA 2C FA FF      mov b, [bp + -6] ; $i                     
1823   0EBD 5A            add d, b
1824   0EBE E4            pop a
1825   0EBF 32            mov bl, [d]
1826   0EC0 A7 00         mov bh, 0
1827   0EC2 DD            push bl
1828   0EC3 07 A5 0F      call putchar
1829   0EC6 51 01 00      add sp, 1
1830   0EC9 0A 96 0E      jmp _while24_cond
1831   0ECC             _while24_exit:
1832   0ECC F9            leave
1833   0ECD 09            ret
1834   0ECE             
1835   0ECE             printu:
1836   0ECE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1837   0ED1             ; $digits 
1838   0ED1             ; $i 
1839   0ED1 52 07 00      sub sp, 7
1840   0ED4             ;; i = 0; 
1841   0ED4 FA FA FF      lea d, [bp + -6] ; $i         
1842   0ED7 26 00 00      mov b, $0        
1843   0EDA FD 43         mov [d], b
1844   0EDC             ;; if(num == 0){ 
1845   0EDC             _if25_cond:
1846   0EDC 2C 05 00      mov b, [bp + 5] ; $num             
1847   0EDF             ; START RELATIONAL
1848   0EDF D7            push a
1849   0EE0 11            mov a, b
1850   0EE1 26 00 00      mov b, $0
1851   0EE4 B0            cmp a, b
1852   0EE5 FD 71         seq ; ==
1853   0EE7 E4            pop a
1854   0EE8             ; END RELATIONAL
1855   0EE8 C0 00 00      cmp b, 0
1856   0EEB C6 FD 0E      je _if25_exit
1857   0EEE             _if25_true:
1858   0EEE             ;; putchar('0'); 
1859   0EEE 26 30 00      mov b, $30
1860   0EF1 DD            push bl
1861   0EF2 07 A5 0F      call putchar
1862   0EF5 51 01 00      add sp, 1
1863   0EF8             ;; return; 
1864   0EF8 F9            leave
1865   0EF9 09            ret
1866   0EFA 0A FD 0E      jmp _if25_exit
1867   0EFD             _if25_exit:
1868   0EFD             ;; while (num > 0) { 
1869   0EFD             _while26_cond:
1870   0EFD 2C 05 00      mov b, [bp + 5] ; $num             
1871   0F00             ; START RELATIONAL
1872   0F00 D7            push a
1873   0F01 11            mov a, b
1874   0F02 26 00 00      mov b, $0
1875   0F05 B0            cmp a, b
1876   0F06 FD 81         sgu ; > (unsigned)
1877   0F08 E4            pop a
1878   0F09             ; END RELATIONAL
1879   0F09 C0 00 00      cmp b, 0
1880   0F0C C6 4F 0F      je _while26_exit
1881   0F0F             _while26_block:
1882   0F0F             ;; digits[i] = '0' + (num % 10); 
1883   0F0F FA FC FF      lea d, [bp + -4] ; $digits
1884   0F12 D7            push a         
1885   0F13 2C FA FF      mov b, [bp + -6] ; $i                     
1886   0F16 5A            add d, b
1887   0F17 E4            pop a         
1888   0F18 26 30 00      mov b, $30
1889   0F1B             ; START TERMS
1890   0F1B D7            push a
1891   0F1C 11            mov a, b
1892   0F1D 2C 05 00      mov b, [bp + 5] ; $num             
1893   0F20             ; START FACTORS
1894   0F20 D7            push a
1895   0F21 11            mov a, b
1896   0F22 26 0A 00      mov b, $a
1897   0F25 AE            div a, b ; 
1898   0F26 11            mov a, b
1899   0F27 27            mov b, a
1900   0F28 E4            pop a
1901   0F29             ; END FACTORS
1902   0F29 54            add a, b
1903   0F2A 27            mov b, a
1904   0F2B E4            pop a
1905   0F2C             ; END TERMS        
1906   0F2C FD 3E         mov [d], bl
1907   0F2E             ;; num = num / 10; 
1908   0F2E FA 05 00      lea d, [bp + 5] ; $num         
1909   0F31 2C 05 00      mov b, [bp + 5] ; $num             
1910   0F34             ; START FACTORS
1911   0F34 D7            push a
1912   0F35 11            mov a, b
1913   0F36 26 0A 00      mov b, $a
1914   0F39 AE            div a, b
1915   0F3A 27            mov b, a
1916   0F3B E4            pop a
1917   0F3C             ; END FACTORS        
1918   0F3C FD 43         mov [d], b
1919   0F3E             ;; i++; 
1920   0F3E 2C FA FF      mov b, [bp + -6] ; $i             
1921   0F41 FD 79         mov g, b
1922   0F43 FD 77         inc b
1923   0F45 FA FA FF      lea d, [bp + -6] ; $i
1924   0F48 FD 43         mov [d], b
1925   0F4A FD 27         mov b, g
1926   0F4C 0A FD 0E      jmp _while26_cond
1927   0F4F             _while26_exit:
1928   0F4F             ;; while (i > 0) { 
1929   0F4F             _while27_cond:
1930   0F4F 2C FA FF      mov b, [bp + -6] ; $i             
1931   0F52             ; START RELATIONAL
1932   0F52 D7            push a
1933   0F53 11            mov a, b
1934   0F54 26 00 00      mov b, $0
1935   0F57 B0            cmp a, b
1936   0F58 FD 7F         sgt ; >
1937   0F5A E4            pop a
1938   0F5B             ; END RELATIONAL
1939   0F5B C0 00 00      cmp b, 0
1940   0F5E C6 85 0F      je _while27_exit
1941   0F61             _while27_block:
1942   0F61             ;; i--; 
1943   0F61 2C FA FF      mov b, [bp + -6] ; $i             
1944   0F64 FD 79         mov g, b
1945   0F66 FD 7D         dec b
1946   0F68 FA FA FF      lea d, [bp + -6] ; $i
1947   0F6B FD 43         mov [d], b
1948   0F6D FD 27         mov b, g
1949   0F6F             ;; putchar(digits[i]); 
1950   0F6F FA FC FF      lea d, [bp + -4] ; $digits
1951   0F72 D7            push a         
1952   0F73 2C FA FF      mov b, [bp + -6] ; $i                     
1953   0F76 5A            add d, b
1954   0F77 E4            pop a
1955   0F78 32            mov bl, [d]
1956   0F79 A7 00         mov bh, 0
1957   0F7B DD            push bl
1958   0F7C 07 A5 0F      call putchar
1959   0F7F 51 01 00      add sp, 1
1960   0F82 0A 4F 0F      jmp _while27_cond
1961   0F85             _while27_exit:
1962   0F85 F9            leave
1963   0F86 09            ret
1964   0F87             
1965   0F87             rand:
1966   0F87 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1967   0F8A             ; $sec 
1968   0F8A 52 01 00      sub sp, 1
1969   0F8D             
1970   0F8D             ; --- BEGIN INLINE ASM BLOCK
1971   0F8D 19 00         mov al, 0
1972   0F8F 05 01         syscall sys_rtc					
1973   0F91 1A            mov al, ah
1974   0F92 20 00 00      mov al, [bp + 0] ; $sec
1975   0F95                         
1976   0F95             ; --- END INLINE ASM BLOCK
1977   0F95             
1978   0F95             ;; return sec; 
1979   0F95 34 00 00      mov bl, [bp + 0] ; $sec
1980   0F98 A7 00         mov bh, 0             
1981   0F9A F9            leave
1982   0F9B 09            ret
1983   0F9C             
1984   0F9C             date:
1985   0F9C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1986   0F9F             
1987   0F9F             ; --- BEGIN INLINE ASM BLOCK
1988   0F9F 19 00         mov al, 0 
1989   0FA1 05 07         syscall sys_datetime
1990   0FA3             ; --- END INLINE ASM BLOCK
1991   0FA3             
1992   0FA3 F9            leave
1993   0FA4 09            ret
1994   0FA5             
1995   0FA5             putchar:
1996   0FA5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1997   0FA8             
1998   0FA8             ; --- BEGIN INLINE ASM BLOCK
1999   0FA8 20 05 00      mov al, [bp + 5] ; $c
2000   0FAB                         
2001   0FAB 23            mov ah, al
2002   0FAC 07 90 11      call _putchar
2003   0FAF             ; --- END INLINE ASM BLOCK
2004   0FAF             
2005   0FAF F9            leave
2006   0FB0 09            ret
2007   0FB1             
2008   0FB1             getchar:
2009   0FB1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2010   0FB4             ; $c 
2011   0FB4 52 01 00      sub sp, 1
2012   0FB7             
2013   0FB7             ; --- BEGIN INLINE ASM BLOCK
2014   0FB7 07 89 11      call getch
2015   0FBA 1A            mov al, ah
2016   0FBB FA 00 00      lea d, [bp + 0] ; $c
2017   0FBE 3E            mov [d], al
2018   0FBF             ; --- END INLINE ASM BLOCK
2019   0FBF             
2020   0FBF             ;; return c; 
2021   0FBF 34 00 00      mov bl, [bp + 0] ; $c
2022   0FC2 A7 00         mov bh, 0             
2023   0FC4 F9            leave
2024   0FC5 09            ret
2025   0FC6             
2026   0FC6             scann:
2027   0FC6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2028   0FC9             ; $m 
2029   0FC9 52 02 00      sub sp, 2
2030   0FCC             
2031   0FCC             ; --- BEGIN INLINE ASM BLOCK
2032   0FCC 07 D4 13      call scan_u16d
2033   0FCF FA FF FF      lea d, [bp + -1] ; $m
2034   0FD2 43            mov [d], a
2035   0FD3             ; --- END INLINE ASM BLOCK
2036   0FD3             
2037   0FD3             ;; return m; 
2038   0FD3 2C FF FF      mov b, [bp + -1] ; $m             
2039   0FD6 F9            leave
2040   0FD7 09            ret
2041   0FD8             
2042   0FD8             puts:
2043   0FD8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2044   0FDB             
2045   0FDB             ; --- BEGIN INLINE ASM BLOCK
2046   0FDB 17 05 00      mov a, [bp + 5] ; $s             
2047   0FDE 3C            mov d, a
2048   0FDF 07 DA 12      call _puts
2049   0FE2 22 0A         mov ah, $0A
2050   0FE4 19 00         mov al, 0
2051   0FE6 05 03         syscall sys_io
2052   0FE8             ; --- END INLINE ASM BLOCK
2053   0FE8             
2054   0FE8 F9            leave
2055   0FE9 09            ret
2056   0FEA             
2057   0FEA             print:
2058   0FEA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2059   0FED             
2060   0FED             ; --- BEGIN INLINE ASM BLOCK
2061   0FED 17 05 00      mov a, [bp + 5] ; $s             
2062   0FF0 3C            mov d, a
2063   0FF1 07 DA 12      call _puts
2064   0FF4             ; --- END INLINE ASM BLOCK
2065   0FF4             
2066   0FF4 F9            leave
2067   0FF5 09            ret
2068   0FF6             
2069   0FF6             loadfile:
2070   0FF6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2071   0FF9             
2072   0FF9             ; --- BEGIN INLINE ASM BLOCK
2073   0FF9 17 05 00      mov a, [bp + 5] ; $destination             
2074   0FFC 4F            mov di, a
2075   0FFD FA 07 00      lea d, [bp + 7] ; $filename
2076   1000 FD 2A         mov d, [d]
2077   1002 19 14         mov al, 20
2078   1004 05 04         syscall sys_filesystem
2079   1006             ; --- END INLINE ASM BLOCK
2080   1006             
2081   1006 F9            leave
2082   1007 09            ret
2083   1008             
2084   1008             create_file:
2085   1008 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2086   100B F9            leave
2087   100C 09            ret
2088   100D             
2089   100D             delete_file:
2090   100D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2091   1010             
2092   1010             ; --- BEGIN INLINE ASM BLOCK
2093   1010 FA 05 00      lea d, [bp + 5] ; $filename
2094   1013 19 0A         mov al, 10
2095   1015 05 04         syscall sys_filesystem
2096   1017             ; --- END INLINE ASM BLOCK
2097   1017             
2098   1017 F9            leave
2099   1018 09            ret
2100   1019             
2101   1019             fopen:
2102   1019 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2103   101C F9            leave
2104   101D 09            ret
2105   101E             
2106   101E             fclose:
2107   101E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2108   1021 F9            leave
2109   1022 09            ret
2110   1023             
2111   1023             alloc:
2112   1023 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2113   1026             ;; heap_top = heap_top + bytes; 
2114   1026 3B C9 27      mov d, _heap_top ; $heap_top         
2115   1029 29 C9 27      mov b, [_heap_top] ; $heap_top           
2116   102C             ; START TERMS
2117   102C D7            push a
2118   102D 11            mov a, b
2119   102E 2C 05 00      mov b, [bp + 5] ; $bytes             
2120   1031 54            add a, b
2121   1032 27            mov b, a
2122   1033 E4            pop a
2123   1034             ; END TERMS        
2124   1034 FD 43         mov [d], b
2125   1036             ;; return heap_top - bytes; 
2126   1036 29 C9 27      mov b, [_heap_top] ; $heap_top           
2127   1039             ; START TERMS
2128   1039 D7            push a
2129   103A 11            mov a, b
2130   103B 2C 05 00      mov b, [bp + 5] ; $bytes             
2131   103E 60            sub a, b
2132   103F 27            mov b, a
2133   1040 E4            pop a
2134   1041             ; END TERMS
2135   1041 F9            leave
2136   1042 09            ret
2137   1043             
2138   1043             free:
2139   1043 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2140   1046             ;; return heap_top = heap_top - bytes; 
2141   1046 3B C9 27      mov d, _heap_top ; $heap_top         
2142   1049 29 C9 27      mov b, [_heap_top] ; $heap_top           
2143   104C             ; START TERMS
2144   104C D7            push a
2145   104D 11            mov a, b
2146   104E 2C 05 00      mov b, [bp + 5] ; $bytes             
2147   1051 60            sub a, b
2148   1052 27            mov b, a
2149   1053 E4            pop a
2150   1054             ; END TERMS        
2151   1054 FD 43         mov [d], b
2152   1056 F9            leave
2153   1057 09            ret
2154   1058             
2155   1058             exit:
2156   1058 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2157   105B             
2158   105B             ; --- BEGIN INLINE ASM BLOCK
2159   105B 05 0B         syscall sys_terminate_proc
2160   105D             ; --- END INLINE ASM BLOCK
2161   105D             
2162   105D F9            leave
2163   105E 09            ret
2164   105F             
2165   105F             load_hex:
2166   105F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2167   1062             ; $temp 
2168   1062 52 02 00      sub sp, 2
2169   1065             ;; temp = alloc(32768); 
2170   1065 FA FF FF      lea d, [bp + -1] ; $temp
2171   1068 DA            push d
2172   1069 26 00 80      mov b, $8000
2173   106C FD AB         swp b
2174   106E D8            push b
2175   106F 07 23 10      call alloc
2176   1072 51 02 00      add sp, 2
2177   1075 E7            pop d
2178   1076 FD 43         mov [d], b
2179   1078             
2180   1078             ; --- BEGIN INLINE ASM BLOCK
2181   1078               
2182   1078               
2183   1078               
2184   1078               
2185   1078               
2186   1078             _load_hex:
2187   1078 D7            push a
2188   1079 D8            push b
2189   107A DA            push d
2190   107B E2            push si
2191   107C E3            push di
2192   107D 52 00 80      sub sp, $8000      
2193   1080 38 00 00      mov c, 0
2194   1083 48            mov a, sp
2195   1084 77            inc a
2196   1085 3C            mov d, a          
2197   1086 07 97 11      call _gets        
2198   1089 4D            mov si, a
2199   108A             __load_hex_loop:
2200   108A F6            lodsb             
2201   108B B9 00         cmp al, 0         
2202   108D C6 9B 10      jz __load_hex_ret
2203   1090 36            mov bh, al
2204   1091 F6            lodsb
2205   1092 2F            mov bl, al
2206   1093 07 4D 11      call _atoi        
2207   1096 F7            stosb             
2208   1097 78            inc c
2209   1098 0A 8A 10      jmp __load_hex_loop
2210   109B             __load_hex_ret:
2211   109B 51 00 80      add sp, $8000
2212   109E F0            pop di
2213   109F EF            pop si
2214   10A0 E7            pop d
2215   10A1 E5            pop b
2216   10A2 E4            pop a
2217   10A3             ; --- END INLINE ASM BLOCK
2218   10A3             
2219   10A3 F9            leave
2220   10A4 09            ret
2221   10A5             
2222   10A5             include_stdio_asm:
2223   10A5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2224   10A8             
2225   10A8             ; --- BEGIN INLINE ASM BLOCK
2226   10A8             .include "lib/stdio.asm"
0001+  10A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  10A8             ; stdio.s
0003+  10A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  10A8             .include "lib/string.asm"
0001++ 10A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 10A8             ; string.s
0003++ 10A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 10A8             
0005++ 10A8             
0006++ 10A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 10A8             ; _strrev
0008++ 10A8             ; reverse a string
0009++ 10A8             ; D = string address
0010++ 10A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 10A8             ; 01234
0012++ 10A8             _strrev:
0013++ 10A8 4B          	pusha
0014++ 10A9 07 EF 10    	call _strlen	; length in C
0015++ 10AC 12          	mov a, c
0016++ 10AD AF 01 00    	cmp a, 1
0017++ 10B0 D0 CA 10    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 10B3 7D          	dec a
0019++ 10B4 FD 4E       	mov si, d	; beginning of string
0020++ 10B6 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 10B8 59          	add d, a	; end of string
0022++ 10B9 12          	mov a, c
0023++ 10BA FD 9B       	shr a		; divide by 2
0024++ 10BC 39          	mov c, a	; C now counts the steps
0025++ 10BD             _strrev_L0:
0026++ 10BD 32          	mov bl, [d]	; save load right-side char into BL
0027++ 10BE F6          	lodsb		; load left-side char into AL; increase SI
0028++ 10BF 3E          	mov [d], al	; store left char into right side
0029++ 10C0 1B          	mov al, bl
0030++ 10C1 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 10C2 7E          	dec c
0032++ 10C3 7F          	dec d
0033++ 10C4 C2 00 00    	cmp c, 0
0034++ 10C7 C7 BD 10    	jne _strrev_L0
0035++ 10CA             _strrev_end:
0036++ 10CA 4C          	popa
0037++ 10CB 09          	ret
0038++ 10CC             	
0039++ 10CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 10CC             ; _strchr
0041++ 10CC             ; search string in D for char in AL
0042++ 10CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 10CC             _strchr:
0044++ 10CC             _strchr_L0:
0045++ 10CC 32          	mov bl, [d]
0046++ 10CD C1 00       	cmp bl, 0
0047++ 10CF C6 DA 10    	je _strchr_end
0048++ 10D2 BA          	cmp al, bl
0049++ 10D3 C6 DA 10    	je _strchr_end
0050++ 10D6 79          	inc d
0051++ 10D7 0A CC 10    	jmp _strchr_L0
0052++ 10DA             _strchr_end:
0053++ 10DA 1B          	mov al, bl
0054++ 10DB 09          	ret
0055++ 10DC             
0056++ 10DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 10DC             ; _strstr
0058++ 10DC             ; find sub-string
0059++ 10DC             ; str1 in SI
0060++ 10DC             ; str2 in DI
0061++ 10DC             ; SI points to end of source string
0062++ 10DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 10DC             _strstr:
0064++ 10DC DB          	push al
0065++ 10DD DA          	push d
0066++ 10DE E3          	push di
0067++ 10DF             _strstr_loop:
0068++ 10DF F3          	cmpsb					; compare a byte of the strings
0069++ 10E0 C7 EB 10    	jne _strstr_ret
0070++ 10E3 FC 00 00    	lea d, [di + 0]
0071++ 10E6 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 10E8 C7 DF 10    	jne _strstr_loop				; equal chars but not at end
0073++ 10EB             _strstr_ret:
0074++ 10EB F0          	pop di
0075++ 10EC E7          	pop d
0076++ 10ED E8          	pop al
0077++ 10EE 09          	ret
0078++ 10EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 10EF             ; length of null terminated string
0080++ 10EF             ; result in C
0081++ 10EF             ; pointer in D
0082++ 10EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 10EF             _strlen:
0084++ 10EF DA          	push d
0085++ 10F0 38 00 00    	mov c, 0
0086++ 10F3             _strlen_L1:
0087++ 10F3 BD 00       	cmp byte [d], 0
0088++ 10F5 C6 FD 10    	je _strlen_ret
0089++ 10F8 79          	inc d
0090++ 10F9 78          	inc c
0091++ 10FA 0A F3 10    	jmp _strlen_L1
0092++ 10FD             _strlen_ret:
0093++ 10FD E7          	pop d
0094++ 10FE 09          	ret
0095++ 10FF             
0096++ 10FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 10FF             ; STRCMP
0098++ 10FF             ; compare two strings
0099++ 10FF             ; str1 in SI
0100++ 10FF             ; str2 in DI
0101++ 10FF             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 10FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 10FF             _strcmp:
0104++ 10FF DB          	push al
0105++ 1100 DA          	push d
0106++ 1101 E3          	push di
0107++ 1102 E2          	push si
0108++ 1103             _strcmp_loop:
0109++ 1103 F3          	cmpsb					; compare a byte of the strings
0110++ 1104 C7 0F 11    	jne _strcmp_ret
0111++ 1107 FB FF FF    	lea d, [si +- 1]
0112++ 110A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 110C C7 03 11    	jne _strcmp_loop				; equal chars but not at end
0114++ 110F             _strcmp_ret:
0115++ 110F EF          	pop si
0116++ 1110 F0          	pop di
0117++ 1111 E7          	pop d
0118++ 1112 E8          	pop al
0119++ 1113 09          	ret
0120++ 1114             
0121++ 1114             
0122++ 1114             ; STRCPY
0123++ 1114             ; copy null terminated string from SI to DI
0124++ 1114             ; source in SI
0125++ 1114             ; destination in DI
0126++ 1114             _strcpy:
0127++ 1114 E2          	push si
0128++ 1115 E3          	push di
0129++ 1116 DB          	push al
0130++ 1117             _strcpy_L1:
0131++ 1117 F6          	lodsb
0132++ 1118 F7          	stosb
0133++ 1119 B9 00       	cmp al, 0
0134++ 111B C7 17 11    	jne _strcpy_L1
0135++ 111E             _strcpy_end:
0136++ 111E E8          	pop al
0137++ 111F F0          	pop di
0138++ 1120 EF          	pop si
0139++ 1121 09          	ret
0140++ 1122             
0141++ 1122             ; STRCAT
0142++ 1122             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1122             ; source in SI
0144++ 1122             ; destination in DI
0145++ 1122             _strcat:
0146++ 1122 E2          	push si
0147++ 1123 E3          	push di
0148++ 1124 D7          	push a
0149++ 1125 DA          	push d
0150++ 1126 50          	mov a, di
0151++ 1127 3C          	mov d, a
0152++ 1128             _strcat_goto_end_L1:
0153++ 1128 BD 00       	cmp byte[d], 0
0154++ 112A C6 31 11    	je _strcat_start
0155++ 112D 79          	inc d
0156++ 112E 0A 28 11    	jmp _strcat_goto_end_L1
0157++ 1131             _strcat_start:
0158++ 1131 FD 50       	mov di, d
0159++ 1133             _strcat_L1:
0160++ 1133 F6          	lodsb
0161++ 1134 F7          	stosb
0162++ 1135 B9 00       	cmp al, 0
0163++ 1137 C7 33 11    	jne _strcat_L1
0164++ 113A             _strcat_end:
0165++ 113A E7          	pop d
0166++ 113B E4          	pop a
0167++ 113C F0          	pop di
0168++ 113D EF          	pop si
0169++ 113E 09          	ret
0170++ 113F             
0171++ 113F             
0005+  113F             
0006+  113F             
0007+  113F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  113F             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  113F             ; ASCII in BL
0010+  113F             ; result in AL
0011+  113F             ; ascii for F = 0100 0110
0012+  113F             ; ascii for 9 = 0011 1001
0013+  113F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  113F             hex_ascii_encode:
0015+  113F 1B            mov al, bl
0016+  1140 93 40         test al, $40        ; test if letter or number
0017+  1142 C7 48 11      jnz hex_letter
0018+  1145 87 0F         and al, $0F        ; get number
0019+  1147 09            ret
0020+  1148             hex_letter:
0021+  1148 87 0F         and al, $0F        ; get letter
0022+  114A 6A 09         add al, 9
0023+  114C 09            ret
0024+  114D             
0025+  114D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  114D             ; ATOI
0027+  114D             ; 2 letter hex string in B
0028+  114D             ; 8bit integer returned in AL
0029+  114D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  114D             _atoi:
0031+  114D D8            push b
0032+  114E 07 3F 11      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  1151 30            mov bl, bh
0034+  1152 DB            push al          ; save a
0035+  1153 07 3F 11      call hex_ascii_encode
0036+  1156 EA            pop bl  
0037+  1157 FD 9E 04      shl al, 4
0038+  115A 8C            or al, bl
0039+  115B E5            pop b
0040+  115C 09            ret  
0041+  115D             
0042+  115D             
0043+  115D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  115D             ; scanf
0045+  115D             ; no need for explanations!
0046+  115D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  115D             scanf:
0048+  115D 09            ret
0049+  115E             
0050+  115E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  115E             ; ITOA
0052+  115E             ; 8bit value in BL
0053+  115E             ; 2 byte ASCII result in A
0054+  115E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  115E             _itoa:
0056+  115E DA            push d
0057+  115F D8            push b
0058+  1160 A7 00         mov bh, 0
0059+  1162 FD A4 04      shr bl, 4  
0060+  1165 74            mov d, b
0061+  1166 1F 0E 14      mov al, [d + s_hex_digits]
0062+  1169 23            mov ah, al
0063+  116A               
0064+  116A E5            pop b
0065+  116B D8            push b
0066+  116C A7 00         mov bh, 0
0067+  116E FD 87 0F      and bl, $0F
0068+  1171 74            mov d, b
0069+  1172 1F 0E 14      mov al, [d + s_hex_digits]
0070+  1175 E5            pop b
0071+  1176 E7            pop d
0072+  1177 09            ret
0073+  1178             
0074+  1178             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  1178             ; HEX STRING TO BINARY
0076+  1178             ; di = destination address
0077+  1178             ; si = source
0078+  1178             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  1178             _hex_to_int:
0080+  1178             _hex_to_int_L1:
0081+  1178 F6            lodsb          ; load from [SI] to AL
0082+  1179 B9 00         cmp al, 0        ; check if ASCII 0
0083+  117B C6 88 11      jz _hex_to_int_ret
0084+  117E 36            mov bh, al
0085+  117F F6            lodsb
0086+  1180 2F            mov bl, al
0087+  1181 07 4D 11      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  1184 F7            stosb          ; store AL to [DI]
0089+  1185 0A 78 11      jmp _hex_to_int_L1
0090+  1188             _hex_to_int_ret:
0091+  1188 09            ret    
0092+  1189             
0093+  1189             
0094+  1189             
0095+  1189             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  1189             ; GETCHAR
0097+  1189             ; char in ah
0098+  1189             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  1189             getch:
0100+  1189 DB            push al
0101+  118A             getch_retry:
0102+  118A 19 01         mov al, 1
0103+  118C 05 03         syscall sys_io      ; receive in AH
0104+  118E E8            pop al
0105+  118F 09            ret
0106+  1190             
0107+  1190             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  1190             ; PUTCHAR
0109+  1190             ; char in ah
0110+  1190             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  1190             _putchar:
0112+  1190 D7            push a
0113+  1191 19 00         mov al, 0
0114+  1193 05 03         syscall sys_io      ; char in AH
0115+  1195 E4            pop a
0116+  1196 09            ret
0117+  1197             
0118+  1197             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  1197             ;; INPUT A STRING
0120+  1197             ;; terminates with null
0121+  1197             ;; pointer in D
0122+  1197             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  1197             _gets:
0124+  1197 D7            push a
0125+  1198 DA            push d
0126+  1199             _gets_loop:
0127+  1199 19 01         mov al, 1
0128+  119B 05 03         syscall sys_io      ; receive in AH
0129+  119D B9 00         cmp al, 0        ; check error code (AL)
0130+  119F C6 99 11      je _gets_loop      ; if no char received, retry
0131+  11A2             
0132+  11A2 76 1B         cmp ah, 27
0133+  11A4 C6 C5 11      je _gets_ansi_esc
0134+  11A7 76 0A         cmp ah, $0A        ; LF
0135+  11A9 C6 30 12      je _gets_end
0136+  11AC 76 0D         cmp ah, $0D        ; CR
0137+  11AE C6 30 12      je _gets_end
0138+  11B1 76 5C         cmp ah, $5C        ; '\\'
0139+  11B3 C6 F1 11      je _gets_escape
0140+  11B6               
0141+  11B6 76 08         cmp ah, $08      ; check for backspace
0142+  11B8 C6 C1 11      je _gets_backspace
0143+  11BB             
0144+  11BB 1A            mov al, ah
0145+  11BC 3E            mov [d], al
0146+  11BD 79            inc d
0147+  11BE 0A 99 11      jmp _gets_loop
0148+  11C1             _gets_backspace:
0149+  11C1 7F            dec d
0150+  11C2 0A 99 11      jmp _gets_loop
0151+  11C5             _gets_ansi_esc:
0152+  11C5 19 01         mov al, 1
0153+  11C7 05 03         syscall sys_io        ; receive in AH without echo
0154+  11C9 B9 00         cmp al, 0          ; check error code (AL)
0155+  11CB C6 C5 11      je _gets_ansi_esc    ; if no char received, retry
0156+  11CE 76 5B         cmp ah, '['
0157+  11D0 C7 99 11      jne _gets_loop
0158+  11D3             _gets_ansi_esc_2:
0159+  11D3 19 01         mov al, 1
0160+  11D5 05 03         syscall sys_io          ; receive in AH without echo
0161+  11D7 B9 00         cmp al, 0            ; check error code (AL)
0162+  11D9 C6 D3 11      je _gets_ansi_esc_2  ; if no char received, retry
0163+  11DC 76 44         cmp ah, 'D'
0164+  11DE C6 E9 11      je _gets_left_arrow
0165+  11E1 76 43         cmp ah, 'C'
0166+  11E3 C6 ED 11      je _gets_right_arrow
0167+  11E6 0A 99 11      jmp _gets_loop
0168+  11E9             _gets_left_arrow:
0169+  11E9 7F            dec d
0170+  11EA 0A 99 11      jmp _gets_loop
0171+  11ED             _gets_right_arrow:
0172+  11ED 79            inc d
0173+  11EE 0A 99 11      jmp _gets_loop
0174+  11F1             _gets_escape:
0175+  11F1 19 01         mov al, 1
0176+  11F3 05 03         syscall sys_io      ; receive in AH
0177+  11F5 B9 00         cmp al, 0        ; check error code (AL)
0178+  11F7 C6 F1 11      je _gets_escape      ; if no char received, retry
0179+  11FA 76 6E         cmp ah, 'n'
0180+  11FC C6 1B 12      je _gets_LF
0181+  11FF 76 72         cmp ah, 'r'
0182+  1201 C6 22 12      je _gets_CR
0183+  1204 76 30         cmp ah, '0'
0184+  1206 C6 29 12      je _gets_NULL
0185+  1209 76 5C         cmp ah, $5C  ; '\'
0186+  120B C6 14 12      je _gets_slash
0187+  120E 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  120F 3E            mov [d], al
0189+  1210 79            inc d
0190+  1211 0A 99 11      jmp _gets_loop
0191+  1214             _gets_slash:
0192+  1214 19 5C         mov al, $5C
0193+  1216 3E            mov [d], al
0194+  1217 79            inc d
0195+  1218 0A 99 11      jmp _gets_loop
0196+  121B             _gets_LF:
0197+  121B 19 0A         mov al, $0A
0198+  121D 3E            mov [d], al
0199+  121E 79            inc d
0200+  121F 0A 99 11      jmp _gets_loop
0201+  1222             _gets_CR:
0202+  1222 19 0D         mov al, $0D
0203+  1224 3E            mov [d], al
0204+  1225 79            inc d
0205+  1226 0A 99 11      jmp _gets_loop
0206+  1229             _gets_NULL:
0207+  1229 19 00         mov al, $00
0208+  122B 3E            mov [d], al
0209+  122C 79            inc d
0210+  122D 0A 99 11      jmp _gets_loop
0211+  1230             _gets_end:
0212+  1230 19 00         mov al, 0
0213+  1232 3E            mov [d], al        ; terminate string
0214+  1233 E7            pop d
0215+  1234 E4            pop a
0216+  1235 09            ret
0217+  1236             
0218+  1236             
0219+  1236             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  1236             ;; INPUT TEXT
0221+  1236             ;; terminated with CTRL+D
0222+  1236             ;; pointer in D
0223+  1236             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  1236             _gettxt:
0225+  1236 D7            push a
0226+  1237 DA            push d
0227+  1238             _gettxt_loop:
0228+  1238 19 01         mov al, 1
0229+  123A 05 03         syscall sys_io      ; receive in AH
0230+  123C B9 00         cmp al, 0        ; check error code (AL)
0231+  123E C6 38 12      je _gettxt_loop    ; if no char received, retry
0232+  1241 76 04         cmp ah, 4      ; EOT
0233+  1243 C6 81 12      je _gettxt_end
0234+  1246 76 08         cmp ah, $08      ; check for backspace
0235+  1248 C6 7D 12      je _gettxt_backspace
0236+  124B 76 5C         cmp ah, $5C        ; '\'
0237+  124D C6 56 12      je _gettxt_escape
0238+  1250 1A            mov al, ah
0239+  1251 3E            mov [d], al
0240+  1252 79            inc d
0241+  1253 0A 38 12      jmp _gettxt_loop
0242+  1256             _gettxt_escape:
0243+  1256 19 01         mov al, 1
0244+  1258 05 03         syscall sys_io      ; receive in AH
0245+  125A B9 00         cmp al, 0        ; check error code (AL)
0246+  125C C6 56 12      je _gettxt_escape    ; if no char received, retry
0247+  125F 76 6E         cmp ah, 'n'
0248+  1261 C6 6F 12      je _gettxt_LF
0249+  1264 76 72         cmp ah, 'r'
0250+  1266 C6 76 12      je _gettxt_CR
0251+  1269 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  126A 3E            mov [d], al
0253+  126B 79            inc d
0254+  126C 0A 38 12      jmp _gettxt_loop
0255+  126F             _gettxt_LF:
0256+  126F 19 0A         mov al, $0A
0257+  1271 3E            mov [d], al
0258+  1272 79            inc d
0259+  1273 0A 38 12      jmp _gettxt_loop
0260+  1276             _gettxt_CR:
0261+  1276 19 0D         mov al, $0D
0262+  1278 3E            mov [d], al
0263+  1279 79            inc d
0264+  127A 0A 38 12      jmp _gettxt_loop
0265+  127D             _gettxt_backspace:
0266+  127D 7F            dec d
0267+  127E 0A 38 12      jmp _gettxt_loop
0268+  1281             _gettxt_end:
0269+  1281 19 00         mov al, 0
0270+  1283 3E            mov [d], al        ; terminate string
0271+  1284 E7            pop d
0272+  1285 E4            pop a
0273+  1286 09            ret
0274+  1287             
0275+  1287             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  1287             ; PRINT NEW LINE
0277+  1287             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  1287             printnl:
0279+  1287 D7            push a
0280+  1288 10 00 0A      mov a, $0A00
0281+  128B 05 03         syscall sys_io
0282+  128D 10 00 0D      mov a, $0D00
0283+  1290 05 03         syscall sys_io
0284+  1292 E4            pop a
0285+  1293 09            ret
0286+  1294             
0287+  1294             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  1294             ; _strtoint
0289+  1294             ; 4 digit hex string number in d
0290+  1294             ; integer returned in A
0291+  1294             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  1294             _strtointx:
0293+  1294 D8            push b
0294+  1295 32            mov bl, [d]
0295+  1296 37            mov bh, bl
0296+  1297 33 01 00      mov bl, [d + 1]
0297+  129A 07 4D 11      call _atoi        ; convert to int in AL
0298+  129D 23            mov ah, al        ; move to AH
0299+  129E 33 02 00      mov bl, [d + 2]
0300+  12A1 37            mov bh, bl
0301+  12A2 33 03 00      mov bl, [d + 3]
0302+  12A5 07 4D 11      call _atoi        ; convert to int in AL
0303+  12A8 E5            pop b
0304+  12A9 09            ret
0305+  12AA             
0306+  12AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  12AA             ; _strtoint
0308+  12AA             ; 5 digit base10 string number in d
0309+  12AA             ; integer returned in A
0310+  12AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  12AA             _strtoint:
0312+  12AA E2            push si
0313+  12AB D8            push b
0314+  12AC D9            push c
0315+  12AD DA            push d
0316+  12AE 07 EF 10      call _strlen      ; get string length in C
0317+  12B1 7E            dec c
0318+  12B2 FD 4E         mov si, d
0319+  12B4 12            mov a, c
0320+  12B5 FD 99         shl a
0321+  12B7 3B 26 14      mov d, table_power
0322+  12BA 59            add d, a
0323+  12BB 38 00 00      mov c, 0
0324+  12BE             _strtoint_L0:
0325+  12BE F6            lodsb      ; load ASCII to al
0326+  12BF B9 00         cmp al, 0
0327+  12C1 C6 D4 12      je _strtoint_end
0328+  12C4 6F 30         sub al, $30    ; make into integer
0329+  12C6 22 00         mov ah, 0
0330+  12C8 2A            mov b, [d]
0331+  12C9 AC            mul a, b      ; result in B since it fits in 16bits
0332+  12CA 11            mov a, b
0333+  12CB 28            mov b, c
0334+  12CC 54            add a, b
0335+  12CD 39            mov c, a
0336+  12CE 63 02 00      sub d, 2
0337+  12D1 0A BE 12      jmp _strtoint_L0
0338+  12D4             _strtoint_end:
0339+  12D4 12            mov a, c
0340+  12D5 E7            pop d
0341+  12D6 E6            pop c
0342+  12D7 E5            pop b
0343+  12D8 EF            pop si
0344+  12D9 09            ret
0345+  12DA             
0346+  12DA             
0347+  12DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  12DA             ; PRINT NULL TERMINATED STRING
0349+  12DA             ; pointer in D
0350+  12DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  12DA             _puts:
0352+  12DA D7            push a
0353+  12DB DA            push d
0354+  12DC             _puts_L1:
0355+  12DC 1E            mov al, [d]
0356+  12DD B9 00         cmp al, 0
0357+  12DF C6 EB 12      jz _puts_END
0358+  12E2 23            mov ah, al
0359+  12E3 19 00         mov al, 0
0360+  12E5 05 03         syscall sys_io
0361+  12E7 79            inc d
0362+  12E8 0A DC 12      jmp _puts_L1
0363+  12EB             _puts_END:
0364+  12EB E7            pop d
0365+  12EC E4            pop a
0366+  12ED 09            ret
0367+  12EE             
0368+  12EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  12EE             ; PRINT N SIZE STRING
0370+  12EE             ; pointer in D
0371+  12EE             ; size in C
0372+  12EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  12EE             _putsn:
0374+  12EE DB            push al
0375+  12EF DA            push d
0376+  12F0 D9            push c
0377+  12F1             _putsn_L0:
0378+  12F1 1E            mov al, [d]
0379+  12F2 23            mov ah, al
0380+  12F3 19 00         mov al, 0
0381+  12F5 05 03         syscall sys_io
0382+  12F7 79            inc d
0383+  12F8 7E            dec c  
0384+  12F9 C2 00 00      cmp c, 0
0385+  12FC C7 F1 12      jne _putsn_L0
0386+  12FF             _putsn_end:
0387+  12FF E6            pop c
0388+  1300 E7            pop d
0389+  1301 E8            pop al
0390+  1302 09            ret
0391+  1303             
0392+  1303             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  1303             ; print 16bit decimal number
0394+  1303             ; input number in A
0395+  1303             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  1303             print_u16d:
0397+  1303 D7            push a
0398+  1304 D8            push b
0399+  1305 26 10 27      mov b, 10000
0400+  1308 AE            div a, b      ; get 10000's coeff.
0401+  1309 07 2B 13      call print_number
0402+  130C 11            mov a, b
0403+  130D 26 E8 03      mov b, 1000
0404+  1310 AE            div a, b      ; get 1000's coeff.
0405+  1311 07 2B 13      call print_number
0406+  1314 11            mov a, b
0407+  1315 26 64 00      mov b, 100
0408+  1318 AE            div a, b
0409+  1319 07 2B 13      call print_number
0410+  131C 11            mov a, b
0411+  131D 26 0A 00      mov b, 10
0412+  1320 AE            div a, b
0413+  1321 07 2B 13      call print_number
0414+  1324 1B            mov al, bl      ; 1's coeff in bl
0415+  1325 07 2B 13      call print_number
0416+  1328 E5            pop b
0417+  1329 E4            pop a
0418+  132A 09            ret
0419+  132B             
0420+  132B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  132B             ; print AL
0422+  132B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  132B             print_number:
0424+  132B 6A 30         add al, $30
0425+  132D 23            mov ah, al
0426+  132E 07 90 11      call _putchar
0427+  1331 09            ret
0428+  1332             
0429+  1332             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  1332             ; PRINT 16BIT HEX INTEGER
0431+  1332             ; integer value in reg B
0432+  1332             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  1332             print_u16x:
0434+  1332 D7            push a
0435+  1333 D8            push b
0436+  1334 DD            push bl
0437+  1335 30            mov bl, bh
0438+  1336 07 5E 11      call _itoa        ; convert bh to char in A
0439+  1339 2F            mov bl, al        ; save al
0440+  133A 19 00         mov al, 0
0441+  133C 05 03         syscall sys_io        ; display AH
0442+  133E 24            mov ah, bl        ; retrieve al
0443+  133F 19 00         mov al, 0
0444+  1341 05 03         syscall sys_io        ; display AL
0445+  1343             
0446+  1343 EA            pop bl
0447+  1344 07 5E 11      call _itoa        ; convert bh to char in A
0448+  1347 2F            mov bl, al        ; save al
0449+  1348 19 00         mov al, 0
0450+  134A 05 03         syscall sys_io        ; display AH
0451+  134C 24            mov ah, bl        ; retrieve al
0452+  134D 19 00         mov al, 0
0453+  134F 05 03         syscall sys_io        ; display AL
0454+  1351             
0455+  1351 E5            pop b
0456+  1352 E4            pop a
0457+  1353 09            ret
0458+  1354             
0459+  1354             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  1354             ; INPUT 16BIT HEX INTEGER
0461+  1354             ; read 16bit integer into A
0462+  1354             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  1354             scan_u16x:
0464+  1354 F8 10 00      enter 16
0465+  1357 D8            push b
0466+  1358 DA            push d
0467+  1359             
0468+  1359 FA F1 FF      lea d, [bp + -15]
0469+  135C 07 97 11      call _gets        ; get number
0470+  135F             
0471+  135F 32            mov bl, [d]
0472+  1360 37            mov bh, bl
0473+  1361 33 01 00      mov bl, [d + 1]
0474+  1364 07 4D 11      call _atoi        ; convert to int in AL
0475+  1367 23            mov ah, al        ; move to AH
0476+  1368             
0477+  1368 33 02 00      mov bl, [d + 2]
0478+  136B 37            mov bh, bl
0479+  136C 33 03 00      mov bl, [d + 3]
0480+  136F 07 4D 11      call _atoi        ; convert to int in AL
0481+  1372             
0482+  1372 E7            pop d
0483+  1373 E5            pop b
0484+  1374 F9            leave
0485+  1375 09            ret
0486+  1376             
0487+  1376             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  1376             ; PRINT 8bit HEX INTEGER
0489+  1376             ; integer value in reg bl
0490+  1376             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  1376             print_u8x:
0492+  1376 D7            push a
0493+  1377 DD            push bl
0494+  1378             
0495+  1378 07 5E 11      call _itoa        ; convert bl to char in A
0496+  137B 2F            mov bl, al        ; save al
0497+  137C 19 00         mov al, 0
0498+  137E 05 03         syscall sys_io        ; display AH
0499+  1380 24            mov ah, bl        ; retrieve al
0500+  1381 19 00         mov al, 0
0501+  1383 05 03         syscall sys_io        ; display AL
0502+  1385             
0503+  1385 EA            pop bl
0504+  1386 E4            pop a
0505+  1387 09            ret
0506+  1388             
0507+  1388             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  1388             ; print 8bit decimal unsigned number
0509+  1388             ; input number in AL
0510+  1388             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  1388             print_u8d:
0512+  1388 D7            push a
0513+  1389 D8            push b
0514+  138A             
0515+  138A 22 00         mov ah, 0
0516+  138C 26 64 00      mov b, 100
0517+  138F AE            div a, b
0518+  1390 D8            push b      ; save remainder
0519+  1391 B9 00         cmp al, 0
0520+  1393 C6 9D 13      je skip100
0521+  1396 6A 30         add al, $30
0522+  1398 23            mov ah, al
0523+  1399 19 00         mov al, 0
0524+  139B 05 03         syscall sys_io  ; print coeff
0525+  139D             skip100:
0526+  139D E4            pop a
0527+  139E 22 00         mov ah, 0
0528+  13A0 26 0A 00      mov b, 10
0529+  13A3 AE            div a, b
0530+  13A4 D8            push b      ; save remainder
0531+  13A5 B9 00         cmp al, 0
0532+  13A7 C6 B1 13      je skip10
0533+  13AA 6A 30         add al, $30
0534+  13AC 23            mov ah, al
0535+  13AD 19 00         mov al, 0
0536+  13AF 05 03         syscall sys_io  ; print coeff
0537+  13B1             skip10:
0538+  13B1 E4            pop a
0539+  13B2 1B            mov al, bl
0540+  13B3 6A 30         add al, $30
0541+  13B5 23            mov ah, al
0542+  13B6 19 00         mov al, 0
0543+  13B8 05 03         syscall sys_io  ; print coeff
0544+  13BA E5            pop b
0545+  13BB E4            pop a
0546+  13BC 09            ret
0547+  13BD             
0548+  13BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  13BD             ; INPUT 8BIT HEX INTEGER
0550+  13BD             ; read 8bit integer into AL
0551+  13BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  13BD             scan_u8x:
0553+  13BD F8 04 00      enter 4
0554+  13C0 D8            push b
0555+  13C1 DA            push d
0556+  13C2             
0557+  13C2 FA FD FF      lea d, [bp + -3]
0558+  13C5 07 97 11      call _gets        ; get number
0559+  13C8             
0560+  13C8 32            mov bl, [d]
0561+  13C9 37            mov bh, bl
0562+  13CA 33 01 00      mov bl, [d + 1]
0563+  13CD 07 4D 11      call _atoi        ; convert to int in AL
0564+  13D0             
0565+  13D0 E7            pop d
0566+  13D1 E5            pop b
0567+  13D2 F9            leave
0568+  13D3 09            ret
0569+  13D4             
0570+  13D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  13D4             ; input decimal number
0572+  13D4             ; result in A
0573+  13D4             ; 655'\0'
0574+  13D4             ; low--------high
0575+  13D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  13D4             scan_u16d:
0577+  13D4 F8 08 00      enter 8
0578+  13D7 E2            push si
0579+  13D8 D8            push b
0580+  13D9 D9            push c
0581+  13DA DA            push d
0582+  13DB FA F9 FF      lea d, [bp +- 7]
0583+  13DE 07 97 11      call _gets
0584+  13E1 07 EF 10      call _strlen      ; get string length in C
0585+  13E4 7E            dec c
0586+  13E5 FD 4E         mov si, d
0587+  13E7 12            mov a, c
0588+  13E8 FD 99         shl a
0589+  13EA 3B 26 14      mov d, table_power
0590+  13ED 59            add d, a
0591+  13EE 38 00 00      mov c, 0
0592+  13F1             mul_loop:
0593+  13F1 F6            lodsb      ; load ASCII to al
0594+  13F2 B9 00         cmp al, 0
0595+  13F4 C6 07 14      je mul_exit
0596+  13F7 6F 30         sub al, $30    ; make into integer
0597+  13F9 22 00         mov ah, 0
0598+  13FB 2A            mov b, [d]
0599+  13FC AC            mul a, b      ; result in B since it fits in 16bits
0600+  13FD 11            mov a, b
0601+  13FE 28            mov b, c
0602+  13FF 54            add a, b
0603+  1400 39            mov c, a
0604+  1401 63 02 00      sub d, 2
0605+  1404 0A F1 13      jmp mul_loop
0606+  1407             mul_exit:
0607+  1407 12            mov a, c
0608+  1408 E7            pop d
0609+  1409 E6            pop c
0610+  140A E5            pop b
0611+  140B EF            pop si
0612+  140C F9            leave
0613+  140D 09            ret
0614+  140E             
0615+  140E             
0616+  140E 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  1412 34 35 36 37 
0616+  1416 38 39 41 42 
0616+  141A 43 44 45 46 
0617+  141E 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  1422 1B 5B 48 00 
0618+  1426             
0619+  1426             table_power:
0620+  1426 01 00         .dw 1
0621+  1428 0A 00         .dw 10
0622+  142A 64 00         .dw 100
0623+  142C E8 03         .dw 1000
0624+  142E 10 27         .dw 100002227   1430             ; --- END INLINE ASM BLOCK
2228   1430             
2229   1430 F9            leave
2230   1431 09            ret
2231   1432             
2232   1432             back:
2233   1432 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2234   1435             ; $t 
2235   1435 52 02 00      sub sp, 2
2236   1438             ;; t = token; 
2237   1438 FA FF FF      lea d, [bp + -1] ; $t         
2238   143B 26 02 25      mov b, _token_data ; $token                   
2239   143E FD 43         mov [d], b
2240   1440             ;; while(*t++) prog--; 
2241   1440             _while28_cond:
2242   1440 2C FF FF      mov b, [bp + -1] ; $t             
2243   1443 FD 79         mov g, b
2244   1445 FD 77         inc b
2245   1447 FA FF FF      lea d, [bp + -1] ; $t
2246   144A FD 43         mov [d], b
2247   144C FD 27         mov b, g
2248   144E 74            mov d, b
2249   144F 32            mov bl, [d]
2250   1450 A7 00         mov bh, 0
2251   1452 C0 00 00      cmp b, 0
2252   1455 C6 69 14      je _while28_exit
2253   1458             _while28_block:
2254   1458             ;; prog--; 
2255   1458 29 00 25      mov b, [_prog] ; $prog           
2256   145B FD 79         mov g, b
2257   145D FD 7D         dec b
2258   145F 3B 00 25      mov d, _prog ; $prog
2259   1462 FD 43         mov [d], b
2260   1464 FD 27         mov b, g
2261   1466 0A 40 14      jmp _while28_cond
2262   1469             _while28_exit:
2263   1469             ;; tok = TOK_UNDEF; 
2264   1469 3B FC 24      mov d, _tok ; $tok         
2265   146C 26 00 00      mov b, 0; TOK_UNDEF        
2266   146F FD 43         mov [d], b
2267   1471             ;; toktype = TYPE_UNDEF; 
2268   1471 3B FE 24      mov d, _toktype ; $toktype         
2269   1474 26 00 00      mov b, 0; TYPE_UNDEF        
2270   1477 FD 43         mov [d], b
2271   1479             ;; token[0] = '\0'; 
2272   1479 3B 02 25      mov d, _token_data ; $token
2273   147C D7            push a         
2274   147D 26 00 00      mov b, $0        
2275   1480 5A            add d, b
2276   1481 E4            pop a         
2277   1482 26 00 00      mov b, $0        
2278   1485 FD 3E         mov [d], bl
2279   1487 F9            leave
2280   1488 09            ret
2281   1489             
2282   1489             get_path:
2283   1489 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2284   148C             ; $t 
2285   148C 52 02 00      sub sp, 2
2286   148F             ;; *token = '\0'; 
2287   148F 26 02 25      mov b, _token_data ; $token           
2288   1492 D8            push b
2289   1493 26 00 00      mov b, $0
2290   1496 E7            pop d
2291   1497 FD 3E         mov [d], bl
2292   1499             ;; t = token; 
2293   1499 FA FF FF      lea d, [bp + -1] ; $t         
2294   149C 26 02 25      mov b, _token_data ; $token                   
2295   149F FD 43         mov [d], b
2296   14A1             ;; while(is_space(*prog)) prog++; 
2297   14A1             _while29_cond:
2298   14A1 29 00 25      mov b, [_prog] ; $prog           
2299   14A4 74            mov d, b
2300   14A5 32            mov bl, [d]
2301   14A6 A7 00         mov bh, 0
2302   14A8 DD            push bl
2303   14A9 07 7A 05      call is_space
2304   14AC 51 01 00      add sp, 1
2305   14AF C0 00 00      cmp b, 0
2306   14B2 C6 C6 14      je _while29_exit
2307   14B5             _while29_block:
2308   14B5             ;; prog++; 
2309   14B5 29 00 25      mov b, [_prog] ; $prog           
2310   14B8 FD 79         mov g, b
2311   14BA FD 77         inc b
2312   14BC 3B 00 25      mov d, _prog ; $prog
2313   14BF FD 43         mov [d], b
2314   14C1 FD 27         mov b, g
2315   14C3 0A A1 14      jmp _while29_cond
2316   14C6             _while29_exit:
2317   14C6             ;; if(*prog == '\0'){ 
2318   14C6             _if30_cond:
2319   14C6 29 00 25      mov b, [_prog] ; $prog           
2320   14C9 74            mov d, b
2321   14CA 32            mov bl, [d]
2322   14CB A7 00         mov bh, 0
2323   14CD             ; START RELATIONAL
2324   14CD D7            push a
2325   14CE 11            mov a, b
2326   14CF 26 00 00      mov b, $0
2327   14D2 B0            cmp a, b
2328   14D3 FD 71         seq ; ==
2329   14D5 E4            pop a
2330   14D6             ; END RELATIONAL
2331   14D6 C0 00 00      cmp b, 0
2332   14D9 C6 E1 14      je _if30_exit
2333   14DC             _if30_true:
2334   14DC             ;; return; 
2335   14DC F9            leave
2336   14DD 09            ret
2337   14DE 0A E1 14      jmp _if30_exit
2338   14E1             _if30_exit:
2339   14E1             ;; while( 
2340   14E1             _while31_cond:
2341   14E1 29 00 25      mov b, [_prog] ; $prog           
2342   14E4 74            mov d, b
2343   14E5 32            mov bl, [d]
2344   14E6 A7 00         mov bh, 0
2345   14E8             ; START RELATIONAL
2346   14E8 D7            push a
2347   14E9 11            mov a, b
2348   14EA 26 61 00      mov b, $61
2349   14ED B0            cmp a, b
2350   14EE FD 80         sge ; >=
2351   14F0 E4            pop a
2352   14F1             ; END RELATIONAL
2353   14F1 D7            push a
2354   14F2 11            mov a, b
2355   14F3 29 00 25      mov b, [_prog] ; $prog           
2356   14F6 74            mov d, b
2357   14F7 32            mov bl, [d]
2358   14F8 A7 00         mov bh, 0
2359   14FA             ; START RELATIONAL
2360   14FA D7            push a
2361   14FB 11            mov a, b
2362   14FC 26 7A 00      mov b, $7a
2363   14FF B0            cmp a, b
2364   1500 FD 74         sle ; <=
2365   1502 E4            pop a
2366   1503             ; END RELATIONAL
2367   1503 FD A7         sand a, b ; &&
2368   1505 E4            pop a
2369   1506 D7            push a
2370   1507 11            mov a, b
2371   1508 29 00 25      mov b, [_prog] ; $prog           
2372   150B 74            mov d, b
2373   150C 32            mov bl, [d]
2374   150D A7 00         mov bh, 0
2375   150F             ; START RELATIONAL
2376   150F D7            push a
2377   1510 11            mov a, b
2378   1511 26 41 00      mov b, $41
2379   1514 B0            cmp a, b
2380   1515 FD 80         sge ; >=
2381   1517 E4            pop a
2382   1518             ; END RELATIONAL
2383   1518 D7            push a
2384   1519 11            mov a, b
2385   151A 29 00 25      mov b, [_prog] ; $prog           
2386   151D 74            mov d, b
2387   151E 32            mov bl, [d]
2388   151F A7 00         mov bh, 0
2389   1521             ; START RELATIONAL
2390   1521 D7            push a
2391   1522 11            mov a, b
2392   1523 26 5A 00      mov b, $5a
2393   1526 B0            cmp a, b
2394   1527 FD 74         sle ; <=
2395   1529 E4            pop a
2396   152A             ; END RELATIONAL
2397   152A FD A7         sand a, b ; &&
2398   152C E4            pop a
2399   152D FD A8         sor a, b ; ||
2400   152F 11            mov a, b
2401   1530 29 00 25      mov b, [_prog] ; $prog           
2402   1533 74            mov d, b
2403   1534 32            mov bl, [d]
2404   1535 A7 00         mov bh, 0
2405   1537             ; START RELATIONAL
2406   1537 D7            push a
2407   1538 11            mov a, b
2408   1539 26 30 00      mov b, $30
2409   153C B0            cmp a, b
2410   153D FD 80         sge ; >=
2411   153F E4            pop a
2412   1540             ; END RELATIONAL
2413   1540 D7            push a
2414   1541 11            mov a, b
2415   1542 29 00 25      mov b, [_prog] ; $prog           
2416   1545 74            mov d, b
2417   1546 32            mov bl, [d]
2418   1547 A7 00         mov bh, 0
2419   1549             ; START RELATIONAL
2420   1549 D7            push a
2421   154A 11            mov a, b
2422   154B 26 39 00      mov b, $39
2423   154E B0            cmp a, b
2424   154F FD 74         sle ; <=
2425   1551 E4            pop a
2426   1552             ; END RELATIONAL
2427   1552 FD A7         sand a, b ; &&
2428   1554 E4            pop a
2429   1555 FD A8         sor a, b ; ||
2430   1557 11            mov a, b
2431   1558 29 00 25      mov b, [_prog] ; $prog           
2432   155B 74            mov d, b
2433   155C 32            mov bl, [d]
2434   155D A7 00         mov bh, 0
2435   155F             ; START RELATIONAL
2436   155F D7            push a
2437   1560 11            mov a, b
2438   1561 26 2F 00      mov b, $2f
2439   1564 B0            cmp a, b
2440   1565 FD 71         seq ; ==
2441   1567 E4            pop a
2442   1568             ; END RELATIONAL
2443   1568 FD A8         sor a, b ; ||
2444   156A 11            mov a, b
2445   156B 29 00 25      mov b, [_prog] ; $prog           
2446   156E 74            mov d, b
2447   156F 32            mov bl, [d]
2448   1570 A7 00         mov bh, 0
2449   1572             ; START RELATIONAL
2450   1572 D7            push a
2451   1573 11            mov a, b
2452   1574 26 5F 00      mov b, $5f
2453   1577 B0            cmp a, b
2454   1578 FD 71         seq ; ==
2455   157A E4            pop a
2456   157B             ; END RELATIONAL
2457   157B FD A8         sor a, b ; ||
2458   157D 11            mov a, b
2459   157E 29 00 25      mov b, [_prog] ; $prog           
2460   1581 74            mov d, b
2461   1582 32            mov bl, [d]
2462   1583 A7 00         mov bh, 0
2463   1585             ; START RELATIONAL
2464   1585 D7            push a
2465   1586 11            mov a, b
2466   1587 26 2D 00      mov b, $2d
2467   158A B0            cmp a, b
2468   158B FD 71         seq ; ==
2469   158D E4            pop a
2470   158E             ; END RELATIONAL
2471   158E FD A8         sor a, b ; ||
2472   1590 11            mov a, b
2473   1591 29 00 25      mov b, [_prog] ; $prog           
2474   1594 74            mov d, b
2475   1595 32            mov bl, [d]
2476   1596 A7 00         mov bh, 0
2477   1598             ; START RELATIONAL
2478   1598 D7            push a
2479   1599 11            mov a, b
2480   159A 26 2E 00      mov b, $2e
2481   159D B0            cmp a, b
2482   159E FD 71         seq ; ==
2483   15A0 E4            pop a
2484   15A1             ; END RELATIONAL
2485   15A1 FD A8         sor a, b ; ||
2486   15A3 E4            pop a
2487   15A4 C0 00 00      cmp b, 0
2488   15A7 C6 D1 15      je _while31_exit
2489   15AA             _while31_block:
2490   15AA             ;; *t++ = *prog++; 
2491   15AA 2C FF FF      mov b, [bp + -1] ; $t             
2492   15AD FD 79         mov g, b
2493   15AF FD 77         inc b
2494   15B1 FA FF FF      lea d, [bp + -1] ; $t
2495   15B4 FD 43         mov [d], b
2496   15B6 FD 27         mov b, g
2497   15B8 D8            push b
2498   15B9 29 00 25      mov b, [_prog] ; $prog           
2499   15BC FD 79         mov g, b
2500   15BE FD 77         inc b
2501   15C0 3B 00 25      mov d, _prog ; $prog
2502   15C3 FD 43         mov [d], b
2503   15C5 FD 27         mov b, g
2504   15C7 74            mov d, b
2505   15C8 32            mov bl, [d]
2506   15C9 A7 00         mov bh, 0
2507   15CB E7            pop d
2508   15CC FD 3E         mov [d], bl
2509   15CE 0A E1 14      jmp _while31_cond
2510   15D1             _while31_exit:
2511   15D1             ;; *t = '\0'; 
2512   15D1 2C FF FF      mov b, [bp + -1] ; $t             
2513   15D4 D8            push b
2514   15D5 26 00 00      mov b, $0
2515   15D8 E7            pop d
2516   15D9 FD 3E         mov [d], bl
2517   15DB F9            leave
2518   15DC 09            ret
2519   15DD             
2520   15DD             get:
2521   15DD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2522   15E0             ; $t 
2523   15E0 52 02 00      sub sp, 2
2524   15E3             ;; *token = '\0'; 
2525   15E3 26 02 25      mov b, _token_data ; $token           
2526   15E6 D8            push b
2527   15E7 26 00 00      mov b, $0
2528   15EA E7            pop d
2529   15EB FD 3E         mov [d], bl
2530   15ED             ;; tok = 0; 
2531   15ED 3B FC 24      mov d, _tok ; $tok         
2532   15F0 26 00 00      mov b, $0        
2533   15F3 FD 43         mov [d], b
2534   15F5             ;; toktype = 0; 
2535   15F5 3B FE 24      mov d, _toktype ; $toktype         
2536   15F8 26 00 00      mov b, $0        
2537   15FB FD 43         mov [d], b
2538   15FD             ;; t = token; 
2539   15FD FA FF FF      lea d, [bp + -1] ; $t         
2540   1600 26 02 25      mov b, _token_data ; $token                   
2541   1603 FD 43         mov [d], b
2542   1605             ;; while(is_space(*prog)) prog++; 
2543   1605             _while32_cond:
2544   1605 29 00 25      mov b, [_prog] ; $prog           
2545   1608 74            mov d, b
2546   1609 32            mov bl, [d]
2547   160A A7 00         mov bh, 0
2548   160C DD            push bl
2549   160D 07 7A 05      call is_space
2550   1610 51 01 00      add sp, 1
2551   1613 C0 00 00      cmp b, 0
2552   1616 C6 2A 16      je _while32_exit
2553   1619             _while32_block:
2554   1619             ;; prog++; 
2555   1619 29 00 25      mov b, [_prog] ; $prog           
2556   161C FD 79         mov g, b
2557   161E FD 77         inc b
2558   1620 3B 00 25      mov d, _prog ; $prog
2559   1623 FD 43         mov [d], b
2560   1625 FD 27         mov b, g
2561   1627 0A 05 16      jmp _while32_cond
2562   162A             _while32_exit:
2563   162A             ;; if(*prog == '\0'){ 
2564   162A             _if33_cond:
2565   162A 29 00 25      mov b, [_prog] ; $prog           
2566   162D 74            mov d, b
2567   162E 32            mov bl, [d]
2568   162F A7 00         mov bh, 0
2569   1631             ; START RELATIONAL
2570   1631 D7            push a
2571   1632 11            mov a, b
2572   1633 26 00 00      mov b, $0
2573   1636 B0            cmp a, b
2574   1637 FD 71         seq ; ==
2575   1639 E4            pop a
2576   163A             ; END RELATIONAL
2577   163A C0 00 00      cmp b, 0
2578   163D C6 4D 16      je _if33_exit
2579   1640             _if33_true:
2580   1640             ;; toktype = END; 
2581   1640 3B FE 24      mov d, _toktype ; $toktype         
2582   1643 26 06 00      mov b, 6; END        
2583   1646 FD 43         mov [d], b
2584   1648             ;; return; 
2585   1648 F9            leave
2586   1649 09            ret
2587   164A 0A 4D 16      jmp _if33_exit
2588   164D             _if33_exit:
2589   164D             ;; if(is_digit(*prog)){ 
2590   164D             _if34_cond:
2591   164D 29 00 25      mov b, [_prog] ; $prog           
2592   1650 74            mov d, b
2593   1651 32            mov bl, [d]
2594   1652 A7 00         mov bh, 0
2595   1654 DD            push bl
2596   1655 07 C2 05      call is_digit
2597   1658 51 01 00      add sp, 1
2598   165B C0 00 00      cmp b, 0
2599   165E C6 B3 16      je _if34_else
2600   1661             _if34_true:
2601   1661             ;; while(is_digit(*prog)){ 
2602   1661             _while35_cond:
2603   1661 29 00 25      mov b, [_prog] ; $prog           
2604   1664 74            mov d, b
2605   1665 32            mov bl, [d]
2606   1666 A7 00         mov bh, 0
2607   1668 DD            push bl
2608   1669 07 C2 05      call is_digit
2609   166C 51 01 00      add sp, 1
2610   166F C0 00 00      cmp b, 0
2611   1672 C6 9C 16      je _while35_exit
2612   1675             _while35_block:
2613   1675             ;; *t++ = *prog++; 
2614   1675 2C FF FF      mov b, [bp + -1] ; $t             
2615   1678 FD 79         mov g, b
2616   167A FD 77         inc b
2617   167C FA FF FF      lea d, [bp + -1] ; $t
2618   167F FD 43         mov [d], b
2619   1681 FD 27         mov b, g
2620   1683 D8            push b
2621   1684 29 00 25      mov b, [_prog] ; $prog           
2622   1687 FD 79         mov g, b
2623   1689 FD 77         inc b
2624   168B 3B 00 25      mov d, _prog ; $prog
2625   168E FD 43         mov [d], b
2626   1690 FD 27         mov b, g
2627   1692 74            mov d, b
2628   1693 32            mov bl, [d]
2629   1694 A7 00         mov bh, 0
2630   1696 E7            pop d
2631   1697 FD 3E         mov [d], bl
2632   1699 0A 61 16      jmp _while35_cond
2633   169C             _while35_exit:
2634   169C             ;; *t = '\0'; 
2635   169C 2C FF FF      mov b, [bp + -1] ; $t             
2636   169F D8            push b
2637   16A0 26 00 00      mov b, $0
2638   16A3 E7            pop d
2639   16A4 FD 3E         mov [d], bl
2640   16A6             ;; toktype = INTEGER_CONST; 
2641   16A6 3B FE 24      mov d, _toktype ; $toktype         
2642   16A9 26 04 00      mov b, 4; INTEGER_CONST        
2643   16AC FD 43         mov [d], b
2644   16AE             ;; return; // return to avoid *t = '\0' line at the end of function 
2645   16AE F9            leave
2646   16AF 09            ret
2647   16B0 0A 90 22      jmp _if34_exit
2648   16B3             _if34_else:
2649   16B3             ;; if(is_alpha(*prog)){ 
2650   16B3             _if36_cond:
2651   16B3 29 00 25      mov b, [_prog] ; $prog           
2652   16B6 74            mov d, b
2653   16B7 32            mov bl, [d]
2654   16B8 A7 00         mov bh, 0
2655   16BA DD            push bl
2656   16BB 07 E8 05      call is_alpha
2657   16BE 51 01 00      add sp, 1
2658   16C1 C0 00 00      cmp b, 0
2659   16C4 C6 2A 17      je _if36_else
2660   16C7             _if36_true:
2661   16C7             ;; while(is_alpha(*prog) || is_digit(*prog)){ 
2662   16C7             _while37_cond:
2663   16C7 29 00 25      mov b, [_prog] ; $prog           
2664   16CA 74            mov d, b
2665   16CB 32            mov bl, [d]
2666   16CC A7 00         mov bh, 0
2667   16CE DD            push bl
2668   16CF 07 E8 05      call is_alpha
2669   16D2 51 01 00      add sp, 1
2670   16D5 D7            push a
2671   16D6 11            mov a, b
2672   16D7 29 00 25      mov b, [_prog] ; $prog           
2673   16DA 74            mov d, b
2674   16DB 32            mov bl, [d]
2675   16DC A7 00         mov bh, 0
2676   16DE DD            push bl
2677   16DF 07 C2 05      call is_digit
2678   16E2 51 01 00      add sp, 1
2679   16E5 FD A8         sor a, b ; ||
2680   16E7 E4            pop a
2681   16E8 C0 00 00      cmp b, 0
2682   16EB C6 15 17      je _while37_exit
2683   16EE             _while37_block:
2684   16EE             ;; *t++ = *prog++; 
2685   16EE 2C FF FF      mov b, [bp + -1] ; $t             
2686   16F1 FD 79         mov g, b
2687   16F3 FD 77         inc b
2688   16F5 FA FF FF      lea d, [bp + -1] ; $t
2689   16F8 FD 43         mov [d], b
2690   16FA FD 27         mov b, g
2691   16FC D8            push b
2692   16FD 29 00 25      mov b, [_prog] ; $prog           
2693   1700 FD 79         mov g, b
2694   1702 FD 77         inc b
2695   1704 3B 00 25      mov d, _prog ; $prog
2696   1707 FD 43         mov [d], b
2697   1709 FD 27         mov b, g
2698   170B 74            mov d, b
2699   170C 32            mov bl, [d]
2700   170D A7 00         mov bh, 0
2701   170F E7            pop d
2702   1710 FD 3E         mov [d], bl
2703   1712 0A C7 16      jmp _while37_cond
2704   1715             _while37_exit:
2705   1715             ;; *t = '\0'; 
2706   1715 2C FF FF      mov b, [bp + -1] ; $t             
2707   1718 D8            push b
2708   1719 26 00 00      mov b, $0
2709   171C E7            pop d
2710   171D FD 3E         mov [d], bl
2711   171F             ;; toktype = IDENTIFIER; 
2712   171F 3B FE 24      mov d, _toktype ; $toktype         
2713   1722 26 05 00      mov b, 5; IDENTIFIER        
2714   1725 FD 43         mov [d], b
2715   1727 0A 90 22      jmp _if36_exit
2716   172A             _if36_else:
2717   172A             ;; if(*prog == '\"'){ 
2718   172A             _if38_cond:
2719   172A 29 00 25      mov b, [_prog] ; $prog           
2720   172D 74            mov d, b
2721   172E 32            mov bl, [d]
2722   172F A7 00         mov bh, 0
2723   1731             ; START RELATIONAL
2724   1731 D7            push a
2725   1732 11            mov a, b
2726   1733 26 22 00      mov b, $22
2727   1736 B0            cmp a, b
2728   1737 FD 71         seq ; ==
2729   1739 E4            pop a
2730   173A             ; END RELATIONAL
2731   173A C0 00 00      cmp b, 0
2732   173D C6 0C 18      je _if38_else
2733   1740             _if38_true:
2734   1740             ;; *t++ = '\"'; 
2735   1740 2C FF FF      mov b, [bp + -1] ; $t             
2736   1743 FD 79         mov g, b
2737   1745 FD 77         inc b
2738   1747 FA FF FF      lea d, [bp + -1] ; $t
2739   174A FD 43         mov [d], b
2740   174C FD 27         mov b, g
2741   174E D8            push b
2742   174F 26 22 00      mov b, $22
2743   1752 E7            pop d
2744   1753 FD 3E         mov [d], bl
2745   1755             ;; prog++; 
2746   1755 29 00 25      mov b, [_prog] ; $prog           
2747   1758 FD 79         mov g, b
2748   175A FD 77         inc b
2749   175C 3B 00 25      mov d, _prog ; $prog
2750   175F FD 43         mov [d], b
2751   1761 FD 27         mov b, g
2752   1763             ;; while(*prog != '\"' && *prog){ 
2753   1763             _while39_cond:
2754   1763 29 00 25      mov b, [_prog] ; $prog           
2755   1766 74            mov d, b
2756   1767 32            mov bl, [d]
2757   1768 A7 00         mov bh, 0
2758   176A             ; START RELATIONAL
2759   176A D7            push a
2760   176B 11            mov a, b
2761   176C 26 22 00      mov b, $22
2762   176F B0            cmp a, b
2763   1770 FD 72         sneq ; !=
2764   1772 E4            pop a
2765   1773             ; END RELATIONAL
2766   1773 D7            push a
2767   1774 11            mov a, b
2768   1775 29 00 25      mov b, [_prog] ; $prog           
2769   1778 74            mov d, b
2770   1779 32            mov bl, [d]
2771   177A A7 00         mov bh, 0
2772   177C FD A7         sand a, b ; &&
2773   177E E4            pop a
2774   177F C0 00 00      cmp b, 0
2775   1782 C6 AC 17      je _while39_exit
2776   1785             _while39_block:
2777   1785             ;; *t++ = *prog++; 
2778   1785 2C FF FF      mov b, [bp + -1] ; $t             
2779   1788 FD 79         mov g, b
2780   178A FD 77         inc b
2781   178C FA FF FF      lea d, [bp + -1] ; $t
2782   178F FD 43         mov [d], b
2783   1791 FD 27         mov b, g
2784   1793 D8            push b
2785   1794 29 00 25      mov b, [_prog] ; $prog           
2786   1797 FD 79         mov g, b
2787   1799 FD 77         inc b
2788   179B 3B 00 25      mov d, _prog ; $prog
2789   179E FD 43         mov [d], b
2790   17A0 FD 27         mov b, g
2791   17A2 74            mov d, b
2792   17A3 32            mov bl, [d]
2793   17A4 A7 00         mov bh, 0
2794   17A6 E7            pop d
2795   17A7 FD 3E         mov [d], bl
2796   17A9 0A 63 17      jmp _while39_cond
2797   17AC             _while39_exit:
2798   17AC             ;; if(*prog != '\"') error("Double quotes expected"); 
2799   17AC             _if40_cond:
2800   17AC 29 00 25      mov b, [_prog] ; $prog           
2801   17AF 74            mov d, b
2802   17B0 32            mov bl, [d]
2803   17B1 A7 00         mov bh, 0
2804   17B3             ; START RELATIONAL
2805   17B3 D7            push a
2806   17B4 11            mov a, b
2807   17B5 26 22 00      mov b, $22
2808   17B8 B0            cmp a, b
2809   17B9 FD 72         sneq ; !=
2810   17BB E4            pop a
2811   17BC             ; END RELATIONAL
2812   17BC C0 00 00      cmp b, 0
2813   17BF C6 D1 17      je _if40_exit
2814   17C2             _if40_true:
2815   17C2             ;; error("Double quotes expected"); 
2816   17C2 26 A7 27      mov b, __s2 ; "Double quotes expected"
2817   17C5 FD AB         swp b
2818   17C7 D8            push b
2819   17C8 07 D3 24      call error
2820   17CB 51 02 00      add sp, 2
2821   17CE 0A D1 17      jmp _if40_exit
2822   17D1             _if40_exit:
2823   17D1             ;; *t++ = '\"'; 
2824   17D1 2C FF FF      mov b, [bp + -1] ; $t             
2825   17D4 FD 79         mov g, b
2826   17D6 FD 77         inc b
2827   17D8 FA FF FF      lea d, [bp + -1] ; $t
2828   17DB FD 43         mov [d], b
2829   17DD FD 27         mov b, g
2830   17DF D8            push b
2831   17E0 26 22 00      mov b, $22
2832   17E3 E7            pop d
2833   17E4 FD 3E         mov [d], bl
2834   17E6             ;; prog++; 
2835   17E6 29 00 25      mov b, [_prog] ; $prog           
2836   17E9 FD 79         mov g, b
2837   17EB FD 77         inc b
2838   17ED 3B 00 25      mov d, _prog ; $prog
2839   17F0 FD 43         mov [d], b
2840   17F2 FD 27         mov b, g
2841   17F4             ;; toktype = STRING_CONST; 
2842   17F4 3B FE 24      mov d, _toktype ; $toktype         
2843   17F7 26 03 00      mov b, 3; STRING_CONST        
2844   17FA FD 43         mov [d], b
2845   17FC             ;; *t = '\0'; 
2846   17FC 2C FF FF      mov b, [bp + -1] ; $t             
2847   17FF D8            push b
2848   1800 26 00 00      mov b, $0
2849   1803 E7            pop d
2850   1804 FD 3E         mov [d], bl
2851   1806             ;; convert_constant(); // converts this string token qith quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
2852   1806 07 9C 22      call convert_constant
2853   1809 0A 90 22      jmp _if38_exit
2854   180C             _if38_else:
2855   180C             ;; if(*prog == '#'){ 
2856   180C             _if41_cond:
2857   180C 29 00 25      mov b, [_prog] ; $prog           
2858   180F 74            mov d, b
2859   1810 32            mov bl, [d]
2860   1811 A7 00         mov bh, 0
2861   1813             ; START RELATIONAL
2862   1813 D7            push a
2863   1814 11            mov a, b
2864   1815 26 23 00      mov b, $23
2865   1818 B0            cmp a, b
2866   1819 FD 71         seq ; ==
2867   181B E4            pop a
2868   181C             ; END RELATIONAL
2869   181C C0 00 00      cmp b, 0
2870   181F C6 59 18      je _if41_else
2871   1822             _if41_true:
2872   1822             ;; *t++ = *prog++; 
2873   1822 2C FF FF      mov b, [bp + -1] ; $t             
2874   1825 FD 79         mov g, b
2875   1827 FD 77         inc b
2876   1829 FA FF FF      lea d, [bp + -1] ; $t
2877   182C FD 43         mov [d], b
2878   182E FD 27         mov b, g
2879   1830 D8            push b
2880   1831 29 00 25      mov b, [_prog] ; $prog           
2881   1834 FD 79         mov g, b
2882   1836 FD 77         inc b
2883   1838 3B 00 25      mov d, _prog ; $prog
2884   183B FD 43         mov [d], b
2885   183D FD 27         mov b, g
2886   183F 74            mov d, b
2887   1840 32            mov bl, [d]
2888   1841 A7 00         mov bh, 0
2889   1843 E7            pop d
2890   1844 FD 3E         mov [d], bl
2891   1846             ;; tok = HASH; 
2892   1846 3B FC 24      mov d, _tok ; $tok         
2893   1849 26 15 00      mov b, 21; HASH        
2894   184C FD 43         mov [d], b
2895   184E             ;; toktype = DELIMITER;   
2896   184E 3B FE 24      mov d, _toktype ; $toktype         
2897   1851 26 01 00      mov b, 1; DELIMITER        
2898   1854 FD 43         mov [d], b
2899   1856 0A 90 22      jmp _if41_exit
2900   1859             _if41_else:
2901   1859             ;; if(*prog == '{'){ 
2902   1859             _if42_cond:
2903   1859 29 00 25      mov b, [_prog] ; $prog           
2904   185C 74            mov d, b
2905   185D 32            mov bl, [d]
2906   185E A7 00         mov bh, 0
2907   1860             ; START RELATIONAL
2908   1860 D7            push a
2909   1861 11            mov a, b
2910   1862 26 7B 00      mov b, $7b
2911   1865 B0            cmp a, b
2912   1866 FD 71         seq ; ==
2913   1868 E4            pop a
2914   1869             ; END RELATIONAL
2915   1869 C0 00 00      cmp b, 0
2916   186C C6 A6 18      je _if42_else
2917   186F             _if42_true:
2918   186F             ;; *t++ = *prog++; 
2919   186F 2C FF FF      mov b, [bp + -1] ; $t             
2920   1872 FD 79         mov g, b
2921   1874 FD 77         inc b
2922   1876 FA FF FF      lea d, [bp + -1] ; $t
2923   1879 FD 43         mov [d], b
2924   187B FD 27         mov b, g
2925   187D D8            push b
2926   187E 29 00 25      mov b, [_prog] ; $prog           
2927   1881 FD 79         mov g, b
2928   1883 FD 77         inc b
2929   1885 3B 00 25      mov d, _prog ; $prog
2930   1888 FD 43         mov [d], b
2931   188A FD 27         mov b, g
2932   188C 74            mov d, b
2933   188D 32            mov bl, [d]
2934   188E A7 00         mov bh, 0
2935   1890 E7            pop d
2936   1891 FD 3E         mov [d], bl
2937   1893             ;; tok = OPENING_BRACE; 
2938   1893 3B FC 24      mov d, _tok ; $tok         
2939   1896 26 1E 00      mov b, 30; OPENING_BRACE        
2940   1899 FD 43         mov [d], b
2941   189B             ;; toktype = DELIMITER;   
2942   189B 3B FE 24      mov d, _toktype ; $toktype         
2943   189E 26 01 00      mov b, 1; DELIMITER        
2944   18A1 FD 43         mov [d], b
2945   18A3 0A 90 22      jmp _if42_exit
2946   18A6             _if42_else:
2947   18A6             ;; if(*prog == '}'){ 
2948   18A6             _if43_cond:
2949   18A6 29 00 25      mov b, [_prog] ; $prog           
2950   18A9 74            mov d, b
2951   18AA 32            mov bl, [d]
2952   18AB A7 00         mov bh, 0
2953   18AD             ; START RELATIONAL
2954   18AD D7            push a
2955   18AE 11            mov a, b
2956   18AF 26 7D 00      mov b, $7d
2957   18B2 B0            cmp a, b
2958   18B3 FD 71         seq ; ==
2959   18B5 E4            pop a
2960   18B6             ; END RELATIONAL
2961   18B6 C0 00 00      cmp b, 0
2962   18B9 C6 F3 18      je _if43_else
2963   18BC             _if43_true:
2964   18BC             ;; *t++ = *prog++; 
2965   18BC 2C FF FF      mov b, [bp + -1] ; $t             
2966   18BF FD 79         mov g, b
2967   18C1 FD 77         inc b
2968   18C3 FA FF FF      lea d, [bp + -1] ; $t
2969   18C6 FD 43         mov [d], b
2970   18C8 FD 27         mov b, g
2971   18CA D8            push b
2972   18CB 29 00 25      mov b, [_prog] ; $prog           
2973   18CE FD 79         mov g, b
2974   18D0 FD 77         inc b
2975   18D2 3B 00 25      mov d, _prog ; $prog
2976   18D5 FD 43         mov [d], b
2977   18D7 FD 27         mov b, g
2978   18D9 74            mov d, b
2979   18DA 32            mov bl, [d]
2980   18DB A7 00         mov bh, 0
2981   18DD E7            pop d
2982   18DE FD 3E         mov [d], bl
2983   18E0             ;; tok = CLOSING_BRACE; 
2984   18E0 3B FC 24      mov d, _tok ; $tok         
2985   18E3 26 1F 00      mov b, 31; CLOSING_BRACE        
2986   18E6 FD 43         mov [d], b
2987   18E8             ;; toktype = DELIMITER;   
2988   18E8 3B FE 24      mov d, _toktype ; $toktype         
2989   18EB 26 01 00      mov b, 1; DELIMITER        
2990   18EE FD 43         mov [d], b
2991   18F0 0A 90 22      jmp _if43_exit
2992   18F3             _if43_else:
2993   18F3             ;; if(*prog == '['){ 
2994   18F3             _if44_cond:
2995   18F3 29 00 25      mov b, [_prog] ; $prog           
2996   18F6 74            mov d, b
2997   18F7 32            mov bl, [d]
2998   18F8 A7 00         mov bh, 0
2999   18FA             ; START RELATIONAL
3000   18FA D7            push a
3001   18FB 11            mov a, b
3002   18FC 26 5B 00      mov b, $5b
3003   18FF B0            cmp a, b
3004   1900 FD 71         seq ; ==
3005   1902 E4            pop a
3006   1903             ; END RELATIONAL
3007   1903 C0 00 00      cmp b, 0
3008   1906 C6 40 19      je _if44_else
3009   1909             _if44_true:
3010   1909             ;; *t++ = *prog++; 
3011   1909 2C FF FF      mov b, [bp + -1] ; $t             
3012   190C FD 79         mov g, b
3013   190E FD 77         inc b
3014   1910 FA FF FF      lea d, [bp + -1] ; $t
3015   1913 FD 43         mov [d], b
3016   1915 FD 27         mov b, g
3017   1917 D8            push b
3018   1918 29 00 25      mov b, [_prog] ; $prog           
3019   191B FD 79         mov g, b
3020   191D FD 77         inc b
3021   191F 3B 00 25      mov d, _prog ; $prog
3022   1922 FD 43         mov [d], b
3023   1924 FD 27         mov b, g
3024   1926 74            mov d, b
3025   1927 32            mov bl, [d]
3026   1928 A7 00         mov bh, 0
3027   192A E7            pop d
3028   192B FD 3E         mov [d], bl
3029   192D             ;; tok = OPENING_BRACKET; 
3030   192D 3B FC 24      mov d, _tok ; $tok         
3031   1930 26 20 00      mov b, 32; OPENING_BRACKET        
3032   1933 FD 43         mov [d], b
3033   1935             ;; toktype = DELIMITER;   
3034   1935 3B FE 24      mov d, _toktype ; $toktype         
3035   1938 26 01 00      mov b, 1; DELIMITER        
3036   193B FD 43         mov [d], b
3037   193D 0A 90 22      jmp _if44_exit
3038   1940             _if44_else:
3039   1940             ;; if(*prog == ']'){ 
3040   1940             _if45_cond:
3041   1940 29 00 25      mov b, [_prog] ; $prog           
3042   1943 74            mov d, b
3043   1944 32            mov bl, [d]
3044   1945 A7 00         mov bh, 0
3045   1947             ; START RELATIONAL
3046   1947 D7            push a
3047   1948 11            mov a, b
3048   1949 26 5D 00      mov b, $5d
3049   194C B0            cmp a, b
3050   194D FD 71         seq ; ==
3051   194F E4            pop a
3052   1950             ; END RELATIONAL
3053   1950 C0 00 00      cmp b, 0
3054   1953 C6 8D 19      je _if45_else
3055   1956             _if45_true:
3056   1956             ;; *t++ = *prog++; 
3057   1956 2C FF FF      mov b, [bp + -1] ; $t             
3058   1959 FD 79         mov g, b
3059   195B FD 77         inc b
3060   195D FA FF FF      lea d, [bp + -1] ; $t
3061   1960 FD 43         mov [d], b
3062   1962 FD 27         mov b, g
3063   1964 D8            push b
3064   1965 29 00 25      mov b, [_prog] ; $prog           
3065   1968 FD 79         mov g, b
3066   196A FD 77         inc b
3067   196C 3B 00 25      mov d, _prog ; $prog
3068   196F FD 43         mov [d], b
3069   1971 FD 27         mov b, g
3070   1973 74            mov d, b
3071   1974 32            mov bl, [d]
3072   1975 A7 00         mov bh, 0
3073   1977 E7            pop d
3074   1978 FD 3E         mov [d], bl
3075   197A             ;; tok = CLOSING_BRACKET; 
3076   197A 3B FC 24      mov d, _tok ; $tok         
3077   197D 26 21 00      mov b, 33; CLOSING_BRACKET        
3078   1980 FD 43         mov [d], b
3079   1982             ;; toktype = DELIMITER;   
3080   1982 3B FE 24      mov d, _toktype ; $toktype         
3081   1985 26 01 00      mov b, 1; DELIMITER        
3082   1988 FD 43         mov [d], b
3083   198A 0A 90 22      jmp _if45_exit
3084   198D             _if45_else:
3085   198D             ;; if(*prog == '='){ 
3086   198D             _if46_cond:
3087   198D 29 00 25      mov b, [_prog] ; $prog           
3088   1990 74            mov d, b
3089   1991 32            mov bl, [d]
3090   1992 A7 00         mov bh, 0
3091   1994             ; START RELATIONAL
3092   1994 D7            push a
3093   1995 11            mov a, b
3094   1996 26 3D 00      mov b, $3d
3095   1999 B0            cmp a, b
3096   199A FD 71         seq ; ==
3097   199C E4            pop a
3098   199D             ; END RELATIONAL
3099   199D C0 00 00      cmp b, 0
3100   19A0 C6 1F 1A      je _if46_else
3101   19A3             _if46_true:
3102   19A3             ;; *t++ = *prog++; 
3103   19A3 2C FF FF      mov b, [bp + -1] ; $t             
3104   19A6 FD 79         mov g, b
3105   19A8 FD 77         inc b
3106   19AA FA FF FF      lea d, [bp + -1] ; $t
3107   19AD FD 43         mov [d], b
3108   19AF FD 27         mov b, g
3109   19B1 D8            push b
3110   19B2 29 00 25      mov b, [_prog] ; $prog           
3111   19B5 FD 79         mov g, b
3112   19B7 FD 77         inc b
3113   19B9 3B 00 25      mov d, _prog ; $prog
3114   19BC FD 43         mov [d], b
3115   19BE FD 27         mov b, g
3116   19C0 74            mov d, b
3117   19C1 32            mov bl, [d]
3118   19C2 A7 00         mov bh, 0
3119   19C4 E7            pop d
3120   19C5 FD 3E         mov [d], bl
3121   19C7             ;; if (*prog == '='){ 
3122   19C7             _if47_cond:
3123   19C7 29 00 25      mov b, [_prog] ; $prog           
3124   19CA 74            mov d, b
3125   19CB 32            mov bl, [d]
3126   19CC A7 00         mov bh, 0
3127   19CE             ; START RELATIONAL
3128   19CE D7            push a
3129   19CF 11            mov a, b
3130   19D0 26 3D 00      mov b, $3d
3131   19D3 B0            cmp a, b
3132   19D4 FD 71         seq ; ==
3133   19D6 E4            pop a
3134   19D7             ; END RELATIONAL
3135   19D7 C0 00 00      cmp b, 0
3136   19DA C6 0C 1A      je _if47_else
3137   19DD             _if47_true:
3138   19DD             ;; *t++ = *prog++; 
3139   19DD 2C FF FF      mov b, [bp + -1] ; $t             
3140   19E0 FD 79         mov g, b
3141   19E2 FD 77         inc b
3142   19E4 FA FF FF      lea d, [bp + -1] ; $t
3143   19E7 FD 43         mov [d], b
3144   19E9 FD 27         mov b, g
3145   19EB D8            push b
3146   19EC 29 00 25      mov b, [_prog] ; $prog           
3147   19EF FD 79         mov g, b
3148   19F1 FD 77         inc b
3149   19F3 3B 00 25      mov d, _prog ; $prog
3150   19F6 FD 43         mov [d], b
3151   19F8 FD 27         mov b, g
3152   19FA 74            mov d, b
3153   19FB 32            mov bl, [d]
3154   19FC A7 00         mov bh, 0
3155   19FE E7            pop d
3156   19FF FD 3E         mov [d], bl
3157   1A01             ;; tok = EQUAL; 
3158   1A01 3B FC 24      mov d, _tok ; $tok         
3159   1A04 26 08 00      mov b, 8; EQUAL        
3160   1A07 FD 43         mov [d], b
3161   1A09 0A 14 1A      jmp _if47_exit
3162   1A0C             _if47_else:
3163   1A0C             ;; tok = ASSIGNMENT; 
3164   1A0C 3B FC 24      mov d, _tok ; $tok         
3165   1A0F 26 11 00      mov b, 17; ASSIGNMENT        
3166   1A12 FD 43         mov [d], b
3167   1A14             _if47_exit:
3168   1A14             ;; toktype = DELIMITER;   
3169   1A14 3B FE 24      mov d, _toktype ; $toktype         
3170   1A17 26 01 00      mov b, 1; DELIMITER        
3171   1A1A FD 43         mov [d], b
3172   1A1C 0A 90 22      jmp _if46_exit
3173   1A1F             _if46_else:
3174   1A1F             ;; if(*prog == '&'){ 
3175   1A1F             _if48_cond:
3176   1A1F 29 00 25      mov b, [_prog] ; $prog           
3177   1A22 74            mov d, b
3178   1A23 32            mov bl, [d]
3179   1A24 A7 00         mov bh, 0
3180   1A26             ; START RELATIONAL
3181   1A26 D7            push a
3182   1A27 11            mov a, b
3183   1A28 26 26 00      mov b, $26
3184   1A2B B0            cmp a, b
3185   1A2C FD 71         seq ; ==
3186   1A2E E4            pop a
3187   1A2F             ; END RELATIONAL
3188   1A2F C0 00 00      cmp b, 0
3189   1A32 C6 B1 1A      je _if48_else
3190   1A35             _if48_true:
3191   1A35             ;; *t++ = *prog++; 
3192   1A35 2C FF FF      mov b, [bp + -1] ; $t             
3193   1A38 FD 79         mov g, b
3194   1A3A FD 77         inc b
3195   1A3C FA FF FF      lea d, [bp + -1] ; $t
3196   1A3F FD 43         mov [d], b
3197   1A41 FD 27         mov b, g
3198   1A43 D8            push b
3199   1A44 29 00 25      mov b, [_prog] ; $prog           
3200   1A47 FD 79         mov g, b
3201   1A49 FD 77         inc b
3202   1A4B 3B 00 25      mov d, _prog ; $prog
3203   1A4E FD 43         mov [d], b
3204   1A50 FD 27         mov b, g
3205   1A52 74            mov d, b
3206   1A53 32            mov bl, [d]
3207   1A54 A7 00         mov bh, 0
3208   1A56 E7            pop d
3209   1A57 FD 3E         mov [d], bl
3210   1A59             ;; if(*prog == '&'){ 
3211   1A59             _if49_cond:
3212   1A59 29 00 25      mov b, [_prog] ; $prog           
3213   1A5C 74            mov d, b
3214   1A5D 32            mov bl, [d]
3215   1A5E A7 00         mov bh, 0
3216   1A60             ; START RELATIONAL
3217   1A60 D7            push a
3218   1A61 11            mov a, b
3219   1A62 26 26 00      mov b, $26
3220   1A65 B0            cmp a, b
3221   1A66 FD 71         seq ; ==
3222   1A68 E4            pop a
3223   1A69             ; END RELATIONAL
3224   1A69 C0 00 00      cmp b, 0
3225   1A6C C6 9E 1A      je _if49_else
3226   1A6F             _if49_true:
3227   1A6F             ;; *t++ = *prog++; 
3228   1A6F 2C FF FF      mov b, [bp + -1] ; $t             
3229   1A72 FD 79         mov g, b
3230   1A74 FD 77         inc b
3231   1A76 FA FF FF      lea d, [bp + -1] ; $t
3232   1A79 FD 43         mov [d], b
3233   1A7B FD 27         mov b, g
3234   1A7D D8            push b
3235   1A7E 29 00 25      mov b, [_prog] ; $prog           
3236   1A81 FD 79         mov g, b
3237   1A83 FD 77         inc b
3238   1A85 3B 00 25      mov d, _prog ; $prog
3239   1A88 FD 43         mov [d], b
3240   1A8A FD 27         mov b, g
3241   1A8C 74            mov d, b
3242   1A8D 32            mov bl, [d]
3243   1A8E A7 00         mov bh, 0
3244   1A90 E7            pop d
3245   1A91 FD 3E         mov [d], bl
3246   1A93             ;; tok = LOGICAL_AND; 
3247   1A93 3B FC 24      mov d, _tok ; $tok         
3248   1A96 26 0E 00      mov b, 14; LOGICAL_AND        
3249   1A99 FD 43         mov [d], b
3250   1A9B 0A A6 1A      jmp _if49_exit
3251   1A9E             _if49_else:
3252   1A9E             ;; tok = AMPERSAND; 
3253   1A9E 3B FC 24      mov d, _tok ; $tok         
3254   1AA1 26 16 00      mov b, 22; AMPERSAND        
3255   1AA4 FD 43         mov [d], b
3256   1AA6             _if49_exit:
3257   1AA6             ;; toktype = DELIMITER;   
3258   1AA6 3B FE 24      mov d, _toktype ; $toktype         
3259   1AA9 26 01 00      mov b, 1; DELIMITER        
3260   1AAC FD 43         mov [d], b
3261   1AAE 0A 90 22      jmp _if48_exit
3262   1AB1             _if48_else:
3263   1AB1             ;; if(*prog == '|'){ 
3264   1AB1             _if50_cond:
3265   1AB1 29 00 25      mov b, [_prog] ; $prog           
3266   1AB4 74            mov d, b
3267   1AB5 32            mov bl, [d]
3268   1AB6 A7 00         mov bh, 0
3269   1AB8             ; START RELATIONAL
3270   1AB8 D7            push a
3271   1AB9 11            mov a, b
3272   1ABA 26 7C 00      mov b, $7c
3273   1ABD B0            cmp a, b
3274   1ABE FD 71         seq ; ==
3275   1AC0 E4            pop a
3276   1AC1             ; END RELATIONAL
3277   1AC1 C0 00 00      cmp b, 0
3278   1AC4 C6 43 1B      je _if50_else
3279   1AC7             _if50_true:
3280   1AC7             ;; *t++ = *prog++; 
3281   1AC7 2C FF FF      mov b, [bp + -1] ; $t             
3282   1ACA FD 79         mov g, b
3283   1ACC FD 77         inc b
3284   1ACE FA FF FF      lea d, [bp + -1] ; $t
3285   1AD1 FD 43         mov [d], b
3286   1AD3 FD 27         mov b, g
3287   1AD5 D8            push b
3288   1AD6 29 00 25      mov b, [_prog] ; $prog           
3289   1AD9 FD 79         mov g, b
3290   1ADB FD 77         inc b
3291   1ADD 3B 00 25      mov d, _prog ; $prog
3292   1AE0 FD 43         mov [d], b
3293   1AE2 FD 27         mov b, g
3294   1AE4 74            mov d, b
3295   1AE5 32            mov bl, [d]
3296   1AE6 A7 00         mov bh, 0
3297   1AE8 E7            pop d
3298   1AE9 FD 3E         mov [d], bl
3299   1AEB             ;; if (*prog == '|'){ 
3300   1AEB             _if51_cond:
3301   1AEB 29 00 25      mov b, [_prog] ; $prog           
3302   1AEE 74            mov d, b
3303   1AEF 32            mov bl, [d]
3304   1AF0 A7 00         mov bh, 0
3305   1AF2             ; START RELATIONAL
3306   1AF2 D7            push a
3307   1AF3 11            mov a, b
3308   1AF4 26 7C 00      mov b, $7c
3309   1AF7 B0            cmp a, b
3310   1AF8 FD 71         seq ; ==
3311   1AFA E4            pop a
3312   1AFB             ; END RELATIONAL
3313   1AFB C0 00 00      cmp b, 0
3314   1AFE C6 30 1B      je _if51_else
3315   1B01             _if51_true:
3316   1B01             ;; *t++ = *prog++; 
3317   1B01 2C FF FF      mov b, [bp + -1] ; $t             
3318   1B04 FD 79         mov g, b
3319   1B06 FD 77         inc b
3320   1B08 FA FF FF      lea d, [bp + -1] ; $t
3321   1B0B FD 43         mov [d], b
3322   1B0D FD 27         mov b, g
3323   1B0F D8            push b
3324   1B10 29 00 25      mov b, [_prog] ; $prog           
3325   1B13 FD 79         mov g, b
3326   1B15 FD 77         inc b
3327   1B17 3B 00 25      mov d, _prog ; $prog
3328   1B1A FD 43         mov [d], b
3329   1B1C FD 27         mov b, g
3330   1B1E 74            mov d, b
3331   1B1F 32            mov bl, [d]
3332   1B20 A7 00         mov bh, 0
3333   1B22 E7            pop d
3334   1B23 FD 3E         mov [d], bl
3335   1B25             ;; tok = LOGICAL_OR; 
3336   1B25 3B FC 24      mov d, _tok ; $tok         
3337   1B28 26 0F 00      mov b, 15; LOGICAL_OR        
3338   1B2B FD 43         mov [d], b
3339   1B2D 0A 38 1B      jmp _if51_exit
3340   1B30             _if51_else:
3341   1B30             ;; tok = BITWISE_OR; 
3342   1B30 3B FC 24      mov d, _tok ; $tok         
3343   1B33 26 18 00      mov b, 24; BITWISE_OR        
3344   1B36 FD 43         mov [d], b
3345   1B38             _if51_exit:
3346   1B38             ;; toktype = DELIMITER;   
3347   1B38 3B FE 24      mov d, _toktype ; $toktype         
3348   1B3B 26 01 00      mov b, 1; DELIMITER        
3349   1B3E FD 43         mov [d], b
3350   1B40 0A 90 22      jmp _if50_exit
3351   1B43             _if50_else:
3352   1B43             ;; if(*prog == '~'){ 
3353   1B43             _if52_cond:
3354   1B43 29 00 25      mov b, [_prog] ; $prog           
3355   1B46 74            mov d, b
3356   1B47 32            mov bl, [d]
3357   1B48 A7 00         mov bh, 0
3358   1B4A             ; START RELATIONAL
3359   1B4A D7            push a
3360   1B4B 11            mov a, b
3361   1B4C 26 7E 00      mov b, $7e
3362   1B4F B0            cmp a, b
3363   1B50 FD 71         seq ; ==
3364   1B52 E4            pop a
3365   1B53             ; END RELATIONAL
3366   1B53 C0 00 00      cmp b, 0
3367   1B56 C6 90 1B      je _if52_else
3368   1B59             _if52_true:
3369   1B59             ;; *t++ = *prog++; 
3370   1B59 2C FF FF      mov b, [bp + -1] ; $t             
3371   1B5C FD 79         mov g, b
3372   1B5E FD 77         inc b
3373   1B60 FA FF FF      lea d, [bp + -1] ; $t
3374   1B63 FD 43         mov [d], b
3375   1B65 FD 27         mov b, g
3376   1B67 D8            push b
3377   1B68 29 00 25      mov b, [_prog] ; $prog           
3378   1B6B FD 79         mov g, b
3379   1B6D FD 77         inc b
3380   1B6F 3B 00 25      mov d, _prog ; $prog
3381   1B72 FD 43         mov [d], b
3382   1B74 FD 27         mov b, g
3383   1B76 74            mov d, b
3384   1B77 32            mov bl, [d]
3385   1B78 A7 00         mov bh, 0
3386   1B7A E7            pop d
3387   1B7B FD 3E         mov [d], bl
3388   1B7D             ;; tok = BITWISE_NOT; 
3389   1B7D 3B FC 24      mov d, _tok ; $tok         
3390   1B80 26 19 00      mov b, 25; BITWISE_NOT        
3391   1B83 FD 43         mov [d], b
3392   1B85             ;; toktype = DELIMITER;   
3393   1B85 3B FE 24      mov d, _toktype ; $toktype         
3394   1B88 26 01 00      mov b, 1; DELIMITER        
3395   1B8B FD 43         mov [d], b
3396   1B8D 0A 90 22      jmp _if52_exit
3397   1B90             _if52_else:
3398   1B90             ;; if(*prog == '<'){ 
3399   1B90             _if53_cond:
3400   1B90 29 00 25      mov b, [_prog] ; $prog           
3401   1B93 74            mov d, b
3402   1B94 32            mov bl, [d]
3403   1B95 A7 00         mov bh, 0
3404   1B97             ; START RELATIONAL
3405   1B97 D7            push a
3406   1B98 11            mov a, b
3407   1B99 26 3C 00      mov b, $3c
3408   1B9C B0            cmp a, b
3409   1B9D FD 71         seq ; ==
3410   1B9F E4            pop a
3411   1BA0             ; END RELATIONAL
3412   1BA0 C0 00 00      cmp b, 0
3413   1BA3 C6 67 1C      je _if53_else
3414   1BA6             _if53_true:
3415   1BA6             ;; *t++ = *prog++; 
3416   1BA6 2C FF FF      mov b, [bp + -1] ; $t             
3417   1BA9 FD 79         mov g, b
3418   1BAB FD 77         inc b
3419   1BAD FA FF FF      lea d, [bp + -1] ; $t
3420   1BB0 FD 43         mov [d], b
3421   1BB2 FD 27         mov b, g
3422   1BB4 D8            push b
3423   1BB5 29 00 25      mov b, [_prog] ; $prog           
3424   1BB8 FD 79         mov g, b
3425   1BBA FD 77         inc b
3426   1BBC 3B 00 25      mov d, _prog ; $prog
3427   1BBF FD 43         mov [d], b
3428   1BC1 FD 27         mov b, g
3429   1BC3 74            mov d, b
3430   1BC4 32            mov bl, [d]
3431   1BC5 A7 00         mov bh, 0
3432   1BC7 E7            pop d
3433   1BC8 FD 3E         mov [d], bl
3434   1BCA             ;; if (*prog == '='){ 
3435   1BCA             _if54_cond:
3436   1BCA 29 00 25      mov b, [_prog] ; $prog           
3437   1BCD 74            mov d, b
3438   1BCE 32            mov bl, [d]
3439   1BCF A7 00         mov bh, 0
3440   1BD1             ; START RELATIONAL
3441   1BD1 D7            push a
3442   1BD2 11            mov a, b
3443   1BD3 26 3D 00      mov b, $3d
3444   1BD6 B0            cmp a, b
3445   1BD7 FD 71         seq ; ==
3446   1BD9 E4            pop a
3447   1BDA             ; END RELATIONAL
3448   1BDA C0 00 00      cmp b, 0
3449   1BDD C6 0F 1C      je _if54_else
3450   1BE0             _if54_true:
3451   1BE0             ;; *t++ = *prog++; 
3452   1BE0 2C FF FF      mov b, [bp + -1] ; $t             
3453   1BE3 FD 79         mov g, b
3454   1BE5 FD 77         inc b
3455   1BE7 FA FF FF      lea d, [bp + -1] ; $t
3456   1BEA FD 43         mov [d], b
3457   1BEC FD 27         mov b, g
3458   1BEE D8            push b
3459   1BEF 29 00 25      mov b, [_prog] ; $prog           
3460   1BF2 FD 79         mov g, b
3461   1BF4 FD 77         inc b
3462   1BF6 3B 00 25      mov d, _prog ; $prog
3463   1BF9 FD 43         mov [d], b
3464   1BFB FD 27         mov b, g
3465   1BFD 74            mov d, b
3466   1BFE 32            mov bl, [d]
3467   1BFF A7 00         mov bh, 0
3468   1C01 E7            pop d
3469   1C02 FD 3E         mov [d], bl
3470   1C04             ;; tok = LESS_THAN_OR_EQUAL; 
3471   1C04 3B FC 24      mov d, _tok ; $tok         
3472   1C07 26 0B 00      mov b, 11; LESS_THAN_OR_EQUAL        
3473   1C0A FD 43         mov [d], b
3474   1C0C 0A 5C 1C      jmp _if54_exit
3475   1C0F             _if54_else:
3476   1C0F             ;; if (*prog == '<'){ 
3477   1C0F             _if55_cond:
3478   1C0F 29 00 25      mov b, [_prog] ; $prog           
3479   1C12 74            mov d, b
3480   1C13 32            mov bl, [d]
3481   1C14 A7 00         mov bh, 0
3482   1C16             ; START RELATIONAL
3483   1C16 D7            push a
3484   1C17 11            mov a, b
3485   1C18 26 3C 00      mov b, $3c
3486   1C1B B0            cmp a, b
3487   1C1C FD 71         seq ; ==
3488   1C1E E4            pop a
3489   1C1F             ; END RELATIONAL
3490   1C1F C0 00 00      cmp b, 0
3491   1C22 C6 54 1C      je _if55_else
3492   1C25             _if55_true:
3493   1C25             ;; *t++ = *prog++; 
3494   1C25 2C FF FF      mov b, [bp + -1] ; $t             
3495   1C28 FD 79         mov g, b
3496   1C2A FD 77         inc b
3497   1C2C FA FF FF      lea d, [bp + -1] ; $t
3498   1C2F FD 43         mov [d], b
3499   1C31 FD 27         mov b, g
3500   1C33 D8            push b
3501   1C34 29 00 25      mov b, [_prog] ; $prog           
3502   1C37 FD 79         mov g, b
3503   1C39 FD 77         inc b
3504   1C3B 3B 00 25      mov d, _prog ; $prog
3505   1C3E FD 43         mov [d], b
3506   1C40 FD 27         mov b, g
3507   1C42 74            mov d, b
3508   1C43 32            mov bl, [d]
3509   1C44 A7 00         mov bh, 0
3510   1C46 E7            pop d
3511   1C47 FD 3E         mov [d], bl
3512   1C49             ;; tok = BITWISE_SHL; 
3513   1C49 3B FC 24      mov d, _tok ; $tok         
3514   1C4C 26 1A 00      mov b, 26; BITWISE_SHL        
3515   1C4F FD 43         mov [d], b
3516   1C51 0A 5C 1C      jmp _if55_exit
3517   1C54             _if55_else:
3518   1C54             ;; tok = LESS_THAN; 
3519   1C54 3B FC 24      mov d, _tok ; $tok         
3520   1C57 26 0A 00      mov b, 10; LESS_THAN        
3521   1C5A FD 43         mov [d], b
3522   1C5C             _if55_exit:
3523   1C5C             _if54_exit:
3524   1C5C             ;; toktype = DELIMITER;   
3525   1C5C 3B FE 24      mov d, _toktype ; $toktype         
3526   1C5F 26 01 00      mov b, 1; DELIMITER        
3527   1C62 FD 43         mov [d], b
3528   1C64 0A 90 22      jmp _if53_exit
3529   1C67             _if53_else:
3530   1C67             ;; if(*prog == '>'){ 
3531   1C67             _if56_cond:
3532   1C67 29 00 25      mov b, [_prog] ; $prog           
3533   1C6A 74            mov d, b
3534   1C6B 32            mov bl, [d]
3535   1C6C A7 00         mov bh, 0
3536   1C6E             ; START RELATIONAL
3537   1C6E D7            push a
3538   1C6F 11            mov a, b
3539   1C70 26 3E 00      mov b, $3e
3540   1C73 B0            cmp a, b
3541   1C74 FD 71         seq ; ==
3542   1C76 E4            pop a
3543   1C77             ; END RELATIONAL
3544   1C77 C0 00 00      cmp b, 0
3545   1C7A C6 3E 1D      je _if56_else
3546   1C7D             _if56_true:
3547   1C7D             ;; *t++ = *prog++; 
3548   1C7D 2C FF FF      mov b, [bp + -1] ; $t             
3549   1C80 FD 79         mov g, b
3550   1C82 FD 77         inc b
3551   1C84 FA FF FF      lea d, [bp + -1] ; $t
3552   1C87 FD 43         mov [d], b
3553   1C89 FD 27         mov b, g
3554   1C8B D8            push b
3555   1C8C 29 00 25      mov b, [_prog] ; $prog           
3556   1C8F FD 79         mov g, b
3557   1C91 FD 77         inc b
3558   1C93 3B 00 25      mov d, _prog ; $prog
3559   1C96 FD 43         mov [d], b
3560   1C98 FD 27         mov b, g
3561   1C9A 74            mov d, b
3562   1C9B 32            mov bl, [d]
3563   1C9C A7 00         mov bh, 0
3564   1C9E E7            pop d
3565   1C9F FD 3E         mov [d], bl
3566   1CA1             ;; if (*prog == '='){ 
3567   1CA1             _if57_cond:
3568   1CA1 29 00 25      mov b, [_prog] ; $prog           
3569   1CA4 74            mov d, b
3570   1CA5 32            mov bl, [d]
3571   1CA6 A7 00         mov bh, 0
3572   1CA8             ; START RELATIONAL
3573   1CA8 D7            push a
3574   1CA9 11            mov a, b
3575   1CAA 26 3D 00      mov b, $3d
3576   1CAD B0            cmp a, b
3577   1CAE FD 71         seq ; ==
3578   1CB0 E4            pop a
3579   1CB1             ; END RELATIONAL
3580   1CB1 C0 00 00      cmp b, 0
3581   1CB4 C6 E6 1C      je _if57_else
3582   1CB7             _if57_true:
3583   1CB7             ;; *t++ = *prog++; 
3584   1CB7 2C FF FF      mov b, [bp + -1] ; $t             
3585   1CBA FD 79         mov g, b
3586   1CBC FD 77         inc b
3587   1CBE FA FF FF      lea d, [bp + -1] ; $t
3588   1CC1 FD 43         mov [d], b
3589   1CC3 FD 27         mov b, g
3590   1CC5 D8            push b
3591   1CC6 29 00 25      mov b, [_prog] ; $prog           
3592   1CC9 FD 79         mov g, b
3593   1CCB FD 77         inc b
3594   1CCD 3B 00 25      mov d, _prog ; $prog
3595   1CD0 FD 43         mov [d], b
3596   1CD2 FD 27         mov b, g
3597   1CD4 74            mov d, b
3598   1CD5 32            mov bl, [d]
3599   1CD6 A7 00         mov bh, 0
3600   1CD8 E7            pop d
3601   1CD9 FD 3E         mov [d], bl
3602   1CDB             ;; tok = GREATER_THAN_OR_EQUAL; 
3603   1CDB 3B FC 24      mov d, _tok ; $tok         
3604   1CDE 26 0D 00      mov b, 13; GREATER_THAN_OR_EQUAL        
3605   1CE1 FD 43         mov [d], b
3606   1CE3 0A 33 1D      jmp _if57_exit
3607   1CE6             _if57_else:
3608   1CE6             ;; if (*prog == '>'){ 
3609   1CE6             _if58_cond:
3610   1CE6 29 00 25      mov b, [_prog] ; $prog           
3611   1CE9 74            mov d, b
3612   1CEA 32            mov bl, [d]
3613   1CEB A7 00         mov bh, 0
3614   1CED             ; START RELATIONAL
3615   1CED D7            push a
3616   1CEE 11            mov a, b
3617   1CEF 26 3E 00      mov b, $3e
3618   1CF2 B0            cmp a, b
3619   1CF3 FD 71         seq ; ==
3620   1CF5 E4            pop a
3621   1CF6             ; END RELATIONAL
3622   1CF6 C0 00 00      cmp b, 0
3623   1CF9 C6 2B 1D      je _if58_else
3624   1CFC             _if58_true:
3625   1CFC             ;; *t++ = *prog++; 
3626   1CFC 2C FF FF      mov b, [bp + -1] ; $t             
3627   1CFF FD 79         mov g, b
3628   1D01 FD 77         inc b
3629   1D03 FA FF FF      lea d, [bp + -1] ; $t
3630   1D06 FD 43         mov [d], b
3631   1D08 FD 27         mov b, g
3632   1D0A D8            push b
3633   1D0B 29 00 25      mov b, [_prog] ; $prog           
3634   1D0E FD 79         mov g, b
3635   1D10 FD 77         inc b
3636   1D12 3B 00 25      mov d, _prog ; $prog
3637   1D15 FD 43         mov [d], b
3638   1D17 FD 27         mov b, g
3639   1D19 74            mov d, b
3640   1D1A 32            mov bl, [d]
3641   1D1B A7 00         mov bh, 0
3642   1D1D E7            pop d
3643   1D1E FD 3E         mov [d], bl
3644   1D20             ;; tok = BITWISE_SHR; 
3645   1D20 3B FC 24      mov d, _tok ; $tok         
3646   1D23 26 1B 00      mov b, 27; BITWISE_SHR        
3647   1D26 FD 43         mov [d], b
3648   1D28 0A 33 1D      jmp _if58_exit
3649   1D2B             _if58_else:
3650   1D2B             ;; tok = GREATER_THAN; 
3651   1D2B 3B FC 24      mov d, _tok ; $tok         
3652   1D2E 26 0C 00      mov b, 12; GREATER_THAN        
3653   1D31 FD 43         mov [d], b
3654   1D33             _if58_exit:
3655   1D33             _if57_exit:
3656   1D33             ;; toktype = DELIMITER;   
3657   1D33 3B FE 24      mov d, _toktype ; $toktype         
3658   1D36 26 01 00      mov b, 1; DELIMITER        
3659   1D39 FD 43         mov [d], b
3660   1D3B 0A 90 22      jmp _if56_exit
3661   1D3E             _if56_else:
3662   1D3E             ;; if(*prog == '!'){ 
3663   1D3E             _if59_cond:
3664   1D3E 29 00 25      mov b, [_prog] ; $prog           
3665   1D41 74            mov d, b
3666   1D42 32            mov bl, [d]
3667   1D43 A7 00         mov bh, 0
3668   1D45             ; START RELATIONAL
3669   1D45 D7            push a
3670   1D46 11            mov a, b
3671   1D47 26 21 00      mov b, $21
3672   1D4A B0            cmp a, b
3673   1D4B FD 71         seq ; ==
3674   1D4D E4            pop a
3675   1D4E             ; END RELATIONAL
3676   1D4E C0 00 00      cmp b, 0
3677   1D51 C6 D0 1D      je _if59_else
3678   1D54             _if59_true:
3679   1D54             ;; *t++ = *prog++; 
3680   1D54 2C FF FF      mov b, [bp + -1] ; $t             
3681   1D57 FD 79         mov g, b
3682   1D59 FD 77         inc b
3683   1D5B FA FF FF      lea d, [bp + -1] ; $t
3684   1D5E FD 43         mov [d], b
3685   1D60 FD 27         mov b, g
3686   1D62 D8            push b
3687   1D63 29 00 25      mov b, [_prog] ; $prog           
3688   1D66 FD 79         mov g, b
3689   1D68 FD 77         inc b
3690   1D6A 3B 00 25      mov d, _prog ; $prog
3691   1D6D FD 43         mov [d], b
3692   1D6F FD 27         mov b, g
3693   1D71 74            mov d, b
3694   1D72 32            mov bl, [d]
3695   1D73 A7 00         mov bh, 0
3696   1D75 E7            pop d
3697   1D76 FD 3E         mov [d], bl
3698   1D78             ;; if(*prog == '='){ 
3699   1D78             _if60_cond:
3700   1D78 29 00 25      mov b, [_prog] ; $prog           
3701   1D7B 74            mov d, b
3702   1D7C 32            mov bl, [d]
3703   1D7D A7 00         mov bh, 0
3704   1D7F             ; START RELATIONAL
3705   1D7F D7            push a
3706   1D80 11            mov a, b
3707   1D81 26 3D 00      mov b, $3d
3708   1D84 B0            cmp a, b
3709   1D85 FD 71         seq ; ==
3710   1D87 E4            pop a
3711   1D88             ; END RELATIONAL
3712   1D88 C0 00 00      cmp b, 0
3713   1D8B C6 BD 1D      je _if60_else
3714   1D8E             _if60_true:
3715   1D8E             ;; *t++ = *prog++; 
3716   1D8E 2C FF FF      mov b, [bp + -1] ; $t             
3717   1D91 FD 79         mov g, b
3718   1D93 FD 77         inc b
3719   1D95 FA FF FF      lea d, [bp + -1] ; $t
3720   1D98 FD 43         mov [d], b
3721   1D9A FD 27         mov b, g
3722   1D9C D8            push b
3723   1D9D 29 00 25      mov b, [_prog] ; $prog           
3724   1DA0 FD 79         mov g, b
3725   1DA2 FD 77         inc b
3726   1DA4 3B 00 25      mov d, _prog ; $prog
3727   1DA7 FD 43         mov [d], b
3728   1DA9 FD 27         mov b, g
3729   1DAB 74            mov d, b
3730   1DAC 32            mov bl, [d]
3731   1DAD A7 00         mov bh, 0
3732   1DAF E7            pop d
3733   1DB0 FD 3E         mov [d], bl
3734   1DB2             ;; tok = NOT_EQUAL; 
3735   1DB2 3B FC 24      mov d, _tok ; $tok         
3736   1DB5 26 09 00      mov b, 9; NOT_EQUAL        
3737   1DB8 FD 43         mov [d], b
3738   1DBA 0A C5 1D      jmp _if60_exit
3739   1DBD             _if60_else:
3740   1DBD             ;; tok = LOGICAL_NOT; 
3741   1DBD 3B FC 24      mov d, _tok ; $tok         
3742   1DC0 26 10 00      mov b, 16; LOGICAL_NOT        
3743   1DC3 FD 43         mov [d], b
3744   1DC5             _if60_exit:
3745   1DC5             ;; toktype = DELIMITER;   
3746   1DC5 3B FE 24      mov d, _toktype ; $toktype         
3747   1DC8 26 01 00      mov b, 1; DELIMITER        
3748   1DCB FD 43         mov [d], b
3749   1DCD 0A 90 22      jmp _if59_exit
3750   1DD0             _if59_else:
3751   1DD0             ;; if(*prog == '+'){ 
3752   1DD0             _if61_cond:
3753   1DD0 29 00 25      mov b, [_prog] ; $prog           
3754   1DD3 74            mov d, b
3755   1DD4 32            mov bl, [d]
3756   1DD5 A7 00         mov bh, 0
3757   1DD7             ; START RELATIONAL
3758   1DD7 D7            push a
3759   1DD8 11            mov a, b
3760   1DD9 26 2B 00      mov b, $2b
3761   1DDC B0            cmp a, b
3762   1DDD FD 71         seq ; ==
3763   1DDF E4            pop a
3764   1DE0             ; END RELATIONAL
3765   1DE0 C0 00 00      cmp b, 0
3766   1DE3 C6 62 1E      je _if61_else
3767   1DE6             _if61_true:
3768   1DE6             ;; *t++ = *prog++; 
3769   1DE6 2C FF FF      mov b, [bp + -1] ; $t             
3770   1DE9 FD 79         mov g, b
3771   1DEB FD 77         inc b
3772   1DED FA FF FF      lea d, [bp + -1] ; $t
3773   1DF0 FD 43         mov [d], b
3774   1DF2 FD 27         mov b, g
3775   1DF4 D8            push b
3776   1DF5 29 00 25      mov b, [_prog] ; $prog           
3777   1DF8 FD 79         mov g, b
3778   1DFA FD 77         inc b
3779   1DFC 3B 00 25      mov d, _prog ; $prog
3780   1DFF FD 43         mov [d], b
3781   1E01 FD 27         mov b, g
3782   1E03 74            mov d, b
3783   1E04 32            mov bl, [d]
3784   1E05 A7 00         mov bh, 0
3785   1E07 E7            pop d
3786   1E08 FD 3E         mov [d], bl
3787   1E0A             ;; if(*prog == '+'){ 
3788   1E0A             _if62_cond:
3789   1E0A 29 00 25      mov b, [_prog] ; $prog           
3790   1E0D 74            mov d, b
3791   1E0E 32            mov bl, [d]
3792   1E0F A7 00         mov bh, 0
3793   1E11             ; START RELATIONAL
3794   1E11 D7            push a
3795   1E12 11            mov a, b
3796   1E13 26 2B 00      mov b, $2b
3797   1E16 B0            cmp a, b
3798   1E17 FD 71         seq ; ==
3799   1E19 E4            pop a
3800   1E1A             ; END RELATIONAL
3801   1E1A C0 00 00      cmp b, 0
3802   1E1D C6 4F 1E      je _if62_else
3803   1E20             _if62_true:
3804   1E20             ;; *t++ = *prog++; 
3805   1E20 2C FF FF      mov b, [bp + -1] ; $t             
3806   1E23 FD 79         mov g, b
3807   1E25 FD 77         inc b
3808   1E27 FA FF FF      lea d, [bp + -1] ; $t
3809   1E2A FD 43         mov [d], b
3810   1E2C FD 27         mov b, g
3811   1E2E D8            push b
3812   1E2F 29 00 25      mov b, [_prog] ; $prog           
3813   1E32 FD 79         mov g, b
3814   1E34 FD 77         inc b
3815   1E36 3B 00 25      mov d, _prog ; $prog
3816   1E39 FD 43         mov [d], b
3817   1E3B FD 27         mov b, g
3818   1E3D 74            mov d, b
3819   1E3E 32            mov bl, [d]
3820   1E3F A7 00         mov bh, 0
3821   1E41 E7            pop d
3822   1E42 FD 3E         mov [d], bl
3823   1E44             ;; tok = INCREMENT; 
3824   1E44 3B FC 24      mov d, _tok ; $tok         
3825   1E47 26 05 00      mov b, 5; INCREMENT        
3826   1E4A FD 43         mov [d], b
3827   1E4C 0A 57 1E      jmp _if62_exit
3828   1E4F             _if62_else:
3829   1E4F             ;; tok = PLUS; 
3830   1E4F 3B FC 24      mov d, _tok ; $tok         
3831   1E52 26 01 00      mov b, 1; PLUS        
3832   1E55 FD 43         mov [d], b
3833   1E57             _if62_exit:
3834   1E57             ;; toktype = DELIMITER;   
3835   1E57 3B FE 24      mov d, _toktype ; $toktype         
3836   1E5A 26 01 00      mov b, 1; DELIMITER        
3837   1E5D FD 43         mov [d], b
3838   1E5F 0A 90 22      jmp _if61_exit
3839   1E62             _if61_else:
3840   1E62             ;; if(*prog == '-'){ 
3841   1E62             _if63_cond:
3842   1E62 29 00 25      mov b, [_prog] ; $prog           
3843   1E65 74            mov d, b
3844   1E66 32            mov bl, [d]
3845   1E67 A7 00         mov bh, 0
3846   1E69             ; START RELATIONAL
3847   1E69 D7            push a
3848   1E6A 11            mov a, b
3849   1E6B 26 2D 00      mov b, $2d
3850   1E6E B0            cmp a, b
3851   1E6F FD 71         seq ; ==
3852   1E71 E4            pop a
3853   1E72             ; END RELATIONAL
3854   1E72 C0 00 00      cmp b, 0
3855   1E75 C6 F4 1E      je _if63_else
3856   1E78             _if63_true:
3857   1E78             ;; *t++ = *prog++; 
3858   1E78 2C FF FF      mov b, [bp + -1] ; $t             
3859   1E7B FD 79         mov g, b
3860   1E7D FD 77         inc b
3861   1E7F FA FF FF      lea d, [bp + -1] ; $t
3862   1E82 FD 43         mov [d], b
3863   1E84 FD 27         mov b, g
3864   1E86 D8            push b
3865   1E87 29 00 25      mov b, [_prog] ; $prog           
3866   1E8A FD 79         mov g, b
3867   1E8C FD 77         inc b
3868   1E8E 3B 00 25      mov d, _prog ; $prog
3869   1E91 FD 43         mov [d], b
3870   1E93 FD 27         mov b, g
3871   1E95 74            mov d, b
3872   1E96 32            mov bl, [d]
3873   1E97 A7 00         mov bh, 0
3874   1E99 E7            pop d
3875   1E9A FD 3E         mov [d], bl
3876   1E9C             ;; if(*prog == '-'){ 
3877   1E9C             _if64_cond:
3878   1E9C 29 00 25      mov b, [_prog] ; $prog           
3879   1E9F 74            mov d, b
3880   1EA0 32            mov bl, [d]
3881   1EA1 A7 00         mov bh, 0
3882   1EA3             ; START RELATIONAL
3883   1EA3 D7            push a
3884   1EA4 11            mov a, b
3885   1EA5 26 2D 00      mov b, $2d
3886   1EA8 B0            cmp a, b
3887   1EA9 FD 71         seq ; ==
3888   1EAB E4            pop a
3889   1EAC             ; END RELATIONAL
3890   1EAC C0 00 00      cmp b, 0
3891   1EAF C6 E1 1E      je _if64_else
3892   1EB2             _if64_true:
3893   1EB2             ;; *t++ = *prog++; 
3894   1EB2 2C FF FF      mov b, [bp + -1] ; $t             
3895   1EB5 FD 79         mov g, b
3896   1EB7 FD 77         inc b
3897   1EB9 FA FF FF      lea d, [bp + -1] ; $t
3898   1EBC FD 43         mov [d], b
3899   1EBE FD 27         mov b, g
3900   1EC0 D8            push b
3901   1EC1 29 00 25      mov b, [_prog] ; $prog           
3902   1EC4 FD 79         mov g, b
3903   1EC6 FD 77         inc b
3904   1EC8 3B 00 25      mov d, _prog ; $prog
3905   1ECB FD 43         mov [d], b
3906   1ECD FD 27         mov b, g
3907   1ECF 74            mov d, b
3908   1ED0 32            mov bl, [d]
3909   1ED1 A7 00         mov bh, 0
3910   1ED3 E7            pop d
3911   1ED4 FD 3E         mov [d], bl
3912   1ED6             ;; tok = DECREMENT; 
3913   1ED6 3B FC 24      mov d, _tok ; $tok         
3914   1ED9 26 06 00      mov b, 6; DECREMENT        
3915   1EDC FD 43         mov [d], b
3916   1EDE 0A E9 1E      jmp _if64_exit
3917   1EE1             _if64_else:
3918   1EE1             ;; tok = MINUS; 
3919   1EE1 3B FC 24      mov d, _tok ; $tok         
3920   1EE4 26 02 00      mov b, 2; MINUS        
3921   1EE7 FD 43         mov [d], b
3922   1EE9             _if64_exit:
3923   1EE9             ;; toktype = DELIMITER;   
3924   1EE9 3B FE 24      mov d, _toktype ; $toktype         
3925   1EEC 26 01 00      mov b, 1; DELIMITER        
3926   1EEF FD 43         mov [d], b
3927   1EF1 0A 90 22      jmp _if63_exit
3928   1EF4             _if63_else:
3929   1EF4             ;; if(*prog == '$'){ 
3930   1EF4             _if65_cond:
3931   1EF4 29 00 25      mov b, [_prog] ; $prog           
3932   1EF7 74            mov d, b
3933   1EF8 32            mov bl, [d]
3934   1EF9 A7 00         mov bh, 0
3935   1EFB             ; START RELATIONAL
3936   1EFB D7            push a
3937   1EFC 11            mov a, b
3938   1EFD 26 24 00      mov b, $24
3939   1F00 B0            cmp a, b
3940   1F01 FD 71         seq ; ==
3941   1F03 E4            pop a
3942   1F04             ; END RELATIONAL
3943   1F04 C0 00 00      cmp b, 0
3944   1F07 C6 41 1F      je _if65_else
3945   1F0A             _if65_true:
3946   1F0A             ;; *t++ = *prog++; 
3947   1F0A 2C FF FF      mov b, [bp + -1] ; $t             
3948   1F0D FD 79         mov g, b
3949   1F0F FD 77         inc b
3950   1F11 FA FF FF      lea d, [bp + -1] ; $t
3951   1F14 FD 43         mov [d], b
3952   1F16 FD 27         mov b, g
3953   1F18 D8            push b
3954   1F19 29 00 25      mov b, [_prog] ; $prog           
3955   1F1C FD 79         mov g, b
3956   1F1E FD 77         inc b
3957   1F20 3B 00 25      mov d, _prog ; $prog
3958   1F23 FD 43         mov [d], b
3959   1F25 FD 27         mov b, g
3960   1F27 74            mov d, b
3961   1F28 32            mov bl, [d]
3962   1F29 A7 00         mov bh, 0
3963   1F2B E7            pop d
3964   1F2C FD 3E         mov [d], bl
3965   1F2E             ;; tok = DOLLAR; 
3966   1F2E 3B FC 24      mov d, _tok ; $tok         
3967   1F31 26 12 00      mov b, 18; DOLLAR        
3968   1F34 FD 43         mov [d], b
3969   1F36             ;; toktype = DELIMITER;   
3970   1F36 3B FE 24      mov d, _toktype ; $toktype         
3971   1F39 26 01 00      mov b, 1; DELIMITER        
3972   1F3C FD 43         mov [d], b
3973   1F3E 0A 90 22      jmp _if65_exit
3974   1F41             _if65_else:
3975   1F41             ;; if(*prog == '^'){ 
3976   1F41             _if66_cond:
3977   1F41 29 00 25      mov b, [_prog] ; $prog           
3978   1F44 74            mov d, b
3979   1F45 32            mov bl, [d]
3980   1F46 A7 00         mov bh, 0
3981   1F48             ; START RELATIONAL
3982   1F48 D7            push a
3983   1F49 11            mov a, b
3984   1F4A 26 5E 00      mov b, $5e
3985   1F4D B0            cmp a, b
3986   1F4E FD 71         seq ; ==
3987   1F50 E4            pop a
3988   1F51             ; END RELATIONAL
3989   1F51 C0 00 00      cmp b, 0
3990   1F54 C6 8E 1F      je _if66_else
3991   1F57             _if66_true:
3992   1F57             ;; *t++ = *prog++; 
3993   1F57 2C FF FF      mov b, [bp + -1] ; $t             
3994   1F5A FD 79         mov g, b
3995   1F5C FD 77         inc b
3996   1F5E FA FF FF      lea d, [bp + -1] ; $t
3997   1F61 FD 43         mov [d], b
3998   1F63 FD 27         mov b, g
3999   1F65 D8            push b
4000   1F66 29 00 25      mov b, [_prog] ; $prog           
4001   1F69 FD 79         mov g, b
4002   1F6B FD 77         inc b
4003   1F6D 3B 00 25      mov d, _prog ; $prog
4004   1F70 FD 43         mov [d], b
4005   1F72 FD 27         mov b, g
4006   1F74 74            mov d, b
4007   1F75 32            mov bl, [d]
4008   1F76 A7 00         mov bh, 0
4009   1F78 E7            pop d
4010   1F79 FD 3E         mov [d], bl
4011   1F7B             ;; tok = BITWISE_XOR; 
4012   1F7B 3B FC 24      mov d, _tok ; $tok         
4013   1F7E 26 17 00      mov b, 23; BITWISE_XOR        
4014   1F81 FD 43         mov [d], b
4015   1F83             ;; toktype = DELIMITER;   
4016   1F83 3B FE 24      mov d, _toktype ; $toktype         
4017   1F86 26 01 00      mov b, 1; DELIMITER        
4018   1F89 FD 43         mov [d], b
4019   1F8B 0A 90 22      jmp _if66_exit
4020   1F8E             _if66_else:
4021   1F8E             ;; if(*prog == '@'){ 
4022   1F8E             _if67_cond:
4023   1F8E 29 00 25      mov b, [_prog] ; $prog           
4024   1F91 74            mov d, b
4025   1F92 32            mov bl, [d]
4026   1F93 A7 00         mov bh, 0
4027   1F95             ; START RELATIONAL
4028   1F95 D7            push a
4029   1F96 11            mov a, b
4030   1F97 26 40 00      mov b, $40
4031   1F9A B0            cmp a, b
4032   1F9B FD 71         seq ; ==
4033   1F9D E4            pop a
4034   1F9E             ; END RELATIONAL
4035   1F9E C0 00 00      cmp b, 0
4036   1FA1 C6 DB 1F      je _if67_else
4037   1FA4             _if67_true:
4038   1FA4             ;; *t++ = *prog++; 
4039   1FA4 2C FF FF      mov b, [bp + -1] ; $t             
4040   1FA7 FD 79         mov g, b
4041   1FA9 FD 77         inc b
4042   1FAB FA FF FF      lea d, [bp + -1] ; $t
4043   1FAE FD 43         mov [d], b
4044   1FB0 FD 27         mov b, g
4045   1FB2 D8            push b
4046   1FB3 29 00 25      mov b, [_prog] ; $prog           
4047   1FB6 FD 79         mov g, b
4048   1FB8 FD 77         inc b
4049   1FBA 3B 00 25      mov d, _prog ; $prog
4050   1FBD FD 43         mov [d], b
4051   1FBF FD 27         mov b, g
4052   1FC1 74            mov d, b
4053   1FC2 32            mov bl, [d]
4054   1FC3 A7 00         mov bh, 0
4055   1FC5 E7            pop d
4056   1FC6 FD 3E         mov [d], bl
4057   1FC8             ;; tok = AT; 
4058   1FC8 3B FC 24      mov d, _tok ; $tok         
4059   1FCB 26 14 00      mov b, 20; AT        
4060   1FCE FD 43         mov [d], b
4061   1FD0             ;; toktype = DELIMITER;   
4062   1FD0 3B FE 24      mov d, _toktype ; $toktype         
4063   1FD3 26 01 00      mov b, 1; DELIMITER        
4064   1FD6 FD 43         mov [d], b
4065   1FD8 0A 90 22      jmp _if67_exit
4066   1FDB             _if67_else:
4067   1FDB             ;; if(*prog == '*'){ 
4068   1FDB             _if68_cond:
4069   1FDB 29 00 25      mov b, [_prog] ; $prog           
4070   1FDE 74            mov d, b
4071   1FDF 32            mov bl, [d]
4072   1FE0 A7 00         mov bh, 0
4073   1FE2             ; START RELATIONAL
4074   1FE2 D7            push a
4075   1FE3 11            mov a, b
4076   1FE4 26 2A 00      mov b, $2a
4077   1FE7 B0            cmp a, b
4078   1FE8 FD 71         seq ; ==
4079   1FEA E4            pop a
4080   1FEB             ; END RELATIONAL
4081   1FEB C0 00 00      cmp b, 0
4082   1FEE C6 28 20      je _if68_else
4083   1FF1             _if68_true:
4084   1FF1             ;; *t++ = *prog++; 
4085   1FF1 2C FF FF      mov b, [bp + -1] ; $t             
4086   1FF4 FD 79         mov g, b
4087   1FF6 FD 77         inc b
4088   1FF8 FA FF FF      lea d, [bp + -1] ; $t
4089   1FFB FD 43         mov [d], b
4090   1FFD FD 27         mov b, g
4091   1FFF D8            push b
4092   2000 29 00 25      mov b, [_prog] ; $prog           
4093   2003 FD 79         mov g, b
4094   2005 FD 77         inc b
4095   2007 3B 00 25      mov d, _prog ; $prog
4096   200A FD 43         mov [d], b
4097   200C FD 27         mov b, g
4098   200E 74            mov d, b
4099   200F 32            mov bl, [d]
4100   2010 A7 00         mov bh, 0
4101   2012 E7            pop d
4102   2013 FD 3E         mov [d], bl
4103   2015             ;; tok = STAR; 
4104   2015 3B FC 24      mov d, _tok ; $tok         
4105   2018 26 03 00      mov b, 3; STAR        
4106   201B FD 43         mov [d], b
4107   201D             ;; toktype = DELIMITER;   
4108   201D 3B FE 24      mov d, _toktype ; $toktype         
4109   2020 26 01 00      mov b, 1; DELIMITER        
4110   2023 FD 43         mov [d], b
4111   2025 0A 90 22      jmp _if68_exit
4112   2028             _if68_else:
4113   2028             ;; if(*prog == '/'){ 
4114   2028             _if69_cond:
4115   2028 29 00 25      mov b, [_prog] ; $prog           
4116   202B 74            mov d, b
4117   202C 32            mov bl, [d]
4118   202D A7 00         mov bh, 0
4119   202F             ; START RELATIONAL
4120   202F D7            push a
4121   2030 11            mov a, b
4122   2031 26 2F 00      mov b, $2f
4123   2034 B0            cmp a, b
4124   2035 FD 71         seq ; ==
4125   2037 E4            pop a
4126   2038             ; END RELATIONAL
4127   2038 C0 00 00      cmp b, 0
4128   203B C6 75 20      je _if69_else
4129   203E             _if69_true:
4130   203E             ;; *t++ = *prog++; 
4131   203E 2C FF FF      mov b, [bp + -1] ; $t             
4132   2041 FD 79         mov g, b
4133   2043 FD 77         inc b
4134   2045 FA FF FF      lea d, [bp + -1] ; $t
4135   2048 FD 43         mov [d], b
4136   204A FD 27         mov b, g
4137   204C D8            push b
4138   204D 29 00 25      mov b, [_prog] ; $prog           
4139   2050 FD 79         mov g, b
4140   2052 FD 77         inc b
4141   2054 3B 00 25      mov d, _prog ; $prog
4142   2057 FD 43         mov [d], b
4143   2059 FD 27         mov b, g
4144   205B 74            mov d, b
4145   205C 32            mov bl, [d]
4146   205D A7 00         mov bh, 0
4147   205F E7            pop d
4148   2060 FD 3E         mov [d], bl
4149   2062             ;; tok = FSLASH; 
4150   2062 3B FC 24      mov d, _tok ; $tok         
4151   2065 26 04 00      mov b, 4; FSLASH        
4152   2068 FD 43         mov [d], b
4153   206A             ;; toktype = DELIMITER;   
4154   206A 3B FE 24      mov d, _toktype ; $toktype         
4155   206D 26 01 00      mov b, 1; DELIMITER        
4156   2070 FD 43         mov [d], b
4157   2072 0A 90 22      jmp _if69_exit
4158   2075             _if69_else:
4159   2075             ;; if(*prog == '%'){ 
4160   2075             _if70_cond:
4161   2075 29 00 25      mov b, [_prog] ; $prog           
4162   2078 74            mov d, b
4163   2079 32            mov bl, [d]
4164   207A A7 00         mov bh, 0
4165   207C             ; START RELATIONAL
4166   207C D7            push a
4167   207D 11            mov a, b
4168   207E 26 25 00      mov b, $25
4169   2081 B0            cmp a, b
4170   2082 FD 71         seq ; ==
4171   2084 E4            pop a
4172   2085             ; END RELATIONAL
4173   2085 C0 00 00      cmp b, 0
4174   2088 C6 C2 20      je _if70_else
4175   208B             _if70_true:
4176   208B             ;; *t++ = *prog++; 
4177   208B 2C FF FF      mov b, [bp + -1] ; $t             
4178   208E FD 79         mov g, b
4179   2090 FD 77         inc b
4180   2092 FA FF FF      lea d, [bp + -1] ; $t
4181   2095 FD 43         mov [d], b
4182   2097 FD 27         mov b, g
4183   2099 D8            push b
4184   209A 29 00 25      mov b, [_prog] ; $prog           
4185   209D FD 79         mov g, b
4186   209F FD 77         inc b
4187   20A1 3B 00 25      mov d, _prog ; $prog
4188   20A4 FD 43         mov [d], b
4189   20A6 FD 27         mov b, g
4190   20A8 74            mov d, b
4191   20A9 32            mov bl, [d]
4192   20AA A7 00         mov bh, 0
4193   20AC E7            pop d
4194   20AD FD 3E         mov [d], bl
4195   20AF             ;; tok = MOD; 
4196   20AF 3B FC 24      mov d, _tok ; $tok         
4197   20B2 26 07 00      mov b, 7; MOD        
4198   20B5 FD 43         mov [d], b
4199   20B7             ;; toktype = DELIMITER;   
4200   20B7 3B FE 24      mov d, _toktype ; $toktype         
4201   20BA 26 01 00      mov b, 1; DELIMITER        
4202   20BD FD 43         mov [d], b
4203   20BF 0A 90 22      jmp _if70_exit
4204   20C2             _if70_else:
4205   20C2             ;; if(*prog == '('){ 
4206   20C2             _if71_cond:
4207   20C2 29 00 25      mov b, [_prog] ; $prog           
4208   20C5 74            mov d, b
4209   20C6 32            mov bl, [d]
4210   20C7 A7 00         mov bh, 0
4211   20C9             ; START RELATIONAL
4212   20C9 D7            push a
4213   20CA 11            mov a, b
4214   20CB 26 28 00      mov b, $28
4215   20CE B0            cmp a, b
4216   20CF FD 71         seq ; ==
4217   20D1 E4            pop a
4218   20D2             ; END RELATIONAL
4219   20D2 C0 00 00      cmp b, 0
4220   20D5 C6 0F 21      je _if71_else
4221   20D8             _if71_true:
4222   20D8             ;; *t++ = *prog++; 
4223   20D8 2C FF FF      mov b, [bp + -1] ; $t             
4224   20DB FD 79         mov g, b
4225   20DD FD 77         inc b
4226   20DF FA FF FF      lea d, [bp + -1] ; $t
4227   20E2 FD 43         mov [d], b
4228   20E4 FD 27         mov b, g
4229   20E6 D8            push b
4230   20E7 29 00 25      mov b, [_prog] ; $prog           
4231   20EA FD 79         mov g, b
4232   20EC FD 77         inc b
4233   20EE 3B 00 25      mov d, _prog ; $prog
4234   20F1 FD 43         mov [d], b
4235   20F3 FD 27         mov b, g
4236   20F5 74            mov d, b
4237   20F6 32            mov bl, [d]
4238   20F7 A7 00         mov bh, 0
4239   20F9 E7            pop d
4240   20FA FD 3E         mov [d], bl
4241   20FC             ;; tok = OPENING_PAREN; 
4242   20FC 3B FC 24      mov d, _tok ; $tok         
4243   20FF 26 1C 00      mov b, 28; OPENING_PAREN        
4244   2102 FD 43         mov [d], b
4245   2104             ;; toktype = DELIMITER;   
4246   2104 3B FE 24      mov d, _toktype ; $toktype         
4247   2107 26 01 00      mov b, 1; DELIMITER        
4248   210A FD 43         mov [d], b
4249   210C 0A 90 22      jmp _if71_exit
4250   210F             _if71_else:
4251   210F             ;; if(*prog == ')'){ 
4252   210F             _if72_cond:
4253   210F 29 00 25      mov b, [_prog] ; $prog           
4254   2112 74            mov d, b
4255   2113 32            mov bl, [d]
4256   2114 A7 00         mov bh, 0
4257   2116             ; START RELATIONAL
4258   2116 D7            push a
4259   2117 11            mov a, b
4260   2118 26 29 00      mov b, $29
4261   211B B0            cmp a, b
4262   211C FD 71         seq ; ==
4263   211E E4            pop a
4264   211F             ; END RELATIONAL
4265   211F C0 00 00      cmp b, 0
4266   2122 C6 5C 21      je _if72_else
4267   2125             _if72_true:
4268   2125             ;; *t++ = *prog++; 
4269   2125 2C FF FF      mov b, [bp + -1] ; $t             
4270   2128 FD 79         mov g, b
4271   212A FD 77         inc b
4272   212C FA FF FF      lea d, [bp + -1] ; $t
4273   212F FD 43         mov [d], b
4274   2131 FD 27         mov b, g
4275   2133 D8            push b
4276   2134 29 00 25      mov b, [_prog] ; $prog           
4277   2137 FD 79         mov g, b
4278   2139 FD 77         inc b
4279   213B 3B 00 25      mov d, _prog ; $prog
4280   213E FD 43         mov [d], b
4281   2140 FD 27         mov b, g
4282   2142 74            mov d, b
4283   2143 32            mov bl, [d]
4284   2144 A7 00         mov bh, 0
4285   2146 E7            pop d
4286   2147 FD 3E         mov [d], bl
4287   2149             ;; tok = CLOSING_PAREN; 
4288   2149 3B FC 24      mov d, _tok ; $tok         
4289   214C 26 1D 00      mov b, 29; CLOSING_PAREN        
4290   214F FD 43         mov [d], b
4291   2151             ;; toktype = DELIMITER;   
4292   2151 3B FE 24      mov d, _toktype ; $toktype         
4293   2154 26 01 00      mov b, 1; DELIMITER        
4294   2157 FD 43         mov [d], b
4295   2159 0A 90 22      jmp _if72_exit
4296   215C             _if72_else:
4297   215C             ;; if(*prog == ';'){ 
4298   215C             _if73_cond:
4299   215C 29 00 25      mov b, [_prog] ; $prog           
4300   215F 74            mov d, b
4301   2160 32            mov bl, [d]
4302   2161 A7 00         mov bh, 0
4303   2163             ; START RELATIONAL
4304   2163 D7            push a
4305   2164 11            mov a, b
4306   2165 26 3B 00      mov b, $3b
4307   2168 B0            cmp a, b
4308   2169 FD 71         seq ; ==
4309   216B E4            pop a
4310   216C             ; END RELATIONAL
4311   216C C0 00 00      cmp b, 0
4312   216F C6 A9 21      je _if73_else
4313   2172             _if73_true:
4314   2172             ;; *t++ = *prog++; 
4315   2172 2C FF FF      mov b, [bp + -1] ; $t             
4316   2175 FD 79         mov g, b
4317   2177 FD 77         inc b
4318   2179 FA FF FF      lea d, [bp + -1] ; $t
4319   217C FD 43         mov [d], b
4320   217E FD 27         mov b, g
4321   2180 D8            push b
4322   2181 29 00 25      mov b, [_prog] ; $prog           
4323   2184 FD 79         mov g, b
4324   2186 FD 77         inc b
4325   2188 3B 00 25      mov d, _prog ; $prog
4326   218B FD 43         mov [d], b
4327   218D FD 27         mov b, g
4328   218F 74            mov d, b
4329   2190 32            mov bl, [d]
4330   2191 A7 00         mov bh, 0
4331   2193 E7            pop d
4332   2194 FD 3E         mov [d], bl
4333   2196             ;; tok = SEMICOLON; 
4334   2196 3B FC 24      mov d, _tok ; $tok         
4335   2199 26 23 00      mov b, 35; SEMICOLON        
4336   219C FD 43         mov [d], b
4337   219E             ;; toktype = DELIMITER;   
4338   219E 3B FE 24      mov d, _toktype ; $toktype         
4339   21A1 26 01 00      mov b, 1; DELIMITER        
4340   21A4 FD 43         mov [d], b
4341   21A6 0A 90 22      jmp _if73_exit
4342   21A9             _if73_else:
4343   21A9             ;; if(*prog == ':'){ 
4344   21A9             _if74_cond:
4345   21A9 29 00 25      mov b, [_prog] ; $prog           
4346   21AC 74            mov d, b
4347   21AD 32            mov bl, [d]
4348   21AE A7 00         mov bh, 0
4349   21B0             ; START RELATIONAL
4350   21B0 D7            push a
4351   21B1 11            mov a, b
4352   21B2 26 3A 00      mov b, $3a
4353   21B5 B0            cmp a, b
4354   21B6 FD 71         seq ; ==
4355   21B8 E4            pop a
4356   21B9             ; END RELATIONAL
4357   21B9 C0 00 00      cmp b, 0
4358   21BC C6 F6 21      je _if74_else
4359   21BF             _if74_true:
4360   21BF             ;; *t++ = *prog++; 
4361   21BF 2C FF FF      mov b, [bp + -1] ; $t             
4362   21C2 FD 79         mov g, b
4363   21C4 FD 77         inc b
4364   21C6 FA FF FF      lea d, [bp + -1] ; $t
4365   21C9 FD 43         mov [d], b
4366   21CB FD 27         mov b, g
4367   21CD D8            push b
4368   21CE 29 00 25      mov b, [_prog] ; $prog           
4369   21D1 FD 79         mov g, b
4370   21D3 FD 77         inc b
4371   21D5 3B 00 25      mov d, _prog ; $prog
4372   21D8 FD 43         mov [d], b
4373   21DA FD 27         mov b, g
4374   21DC 74            mov d, b
4375   21DD 32            mov bl, [d]
4376   21DE A7 00         mov bh, 0
4377   21E0 E7            pop d
4378   21E1 FD 3E         mov [d], bl
4379   21E3             ;; tok = COLON; 
4380   21E3 3B FC 24      mov d, _tok ; $tok         
4381   21E6 26 22 00      mov b, 34; COLON        
4382   21E9 FD 43         mov [d], b
4383   21EB             ;; toktype = DELIMITER;   
4384   21EB 3B FE 24      mov d, _toktype ; $toktype         
4385   21EE 26 01 00      mov b, 1; DELIMITER        
4386   21F1 FD 43         mov [d], b
4387   21F3 0A 90 22      jmp _if74_exit
4388   21F6             _if74_else:
4389   21F6             ;; if(*prog == ','){ 
4390   21F6             _if75_cond:
4391   21F6 29 00 25      mov b, [_prog] ; $prog           
4392   21F9 74            mov d, b
4393   21FA 32            mov bl, [d]
4394   21FB A7 00         mov bh, 0
4395   21FD             ; START RELATIONAL
4396   21FD D7            push a
4397   21FE 11            mov a, b
4398   21FF 26 2C 00      mov b, $2c
4399   2202 B0            cmp a, b
4400   2203 FD 71         seq ; ==
4401   2205 E4            pop a
4402   2206             ; END RELATIONAL
4403   2206 C0 00 00      cmp b, 0
4404   2209 C6 43 22      je _if75_else
4405   220C             _if75_true:
4406   220C             ;; *t++ = *prog++; 
4407   220C 2C FF FF      mov b, [bp + -1] ; $t             
4408   220F FD 79         mov g, b
4409   2211 FD 77         inc b
4410   2213 FA FF FF      lea d, [bp + -1] ; $t
4411   2216 FD 43         mov [d], b
4412   2218 FD 27         mov b, g
4413   221A D8            push b
4414   221B 29 00 25      mov b, [_prog] ; $prog           
4415   221E FD 79         mov g, b
4416   2220 FD 77         inc b
4417   2222 3B 00 25      mov d, _prog ; $prog
4418   2225 FD 43         mov [d], b
4419   2227 FD 27         mov b, g
4420   2229 74            mov d, b
4421   222A 32            mov bl, [d]
4422   222B A7 00         mov bh, 0
4423   222D E7            pop d
4424   222E FD 3E         mov [d], bl
4425   2230             ;; tok = COMMA; 
4426   2230 3B FC 24      mov d, _tok ; $tok         
4427   2233 26 24 00      mov b, 36; COMMA        
4428   2236 FD 43         mov [d], b
4429   2238             ;; toktype = DELIMITER;   
4430   2238 3B FE 24      mov d, _toktype ; $toktype         
4431   223B 26 01 00      mov b, 1; DELIMITER        
4432   223E FD 43         mov [d], b
4433   2240 0A 90 22      jmp _if75_exit
4434   2243             _if75_else:
4435   2243             ;; if(*prog == '.'){ 
4436   2243             _if76_cond:
4437   2243 29 00 25      mov b, [_prog] ; $prog           
4438   2246 74            mov d, b
4439   2247 32            mov bl, [d]
4440   2248 A7 00         mov bh, 0
4441   224A             ; START RELATIONAL
4442   224A D7            push a
4443   224B 11            mov a, b
4444   224C 26 2E 00      mov b, $2e
4445   224F B0            cmp a, b
4446   2250 FD 71         seq ; ==
4447   2252 E4            pop a
4448   2253             ; END RELATIONAL
4449   2253 C0 00 00      cmp b, 0
4450   2256 C6 90 22      je _if76_exit
4451   2259             _if76_true:
4452   2259             ;; *t++ = *prog++; 
4453   2259 2C FF FF      mov b, [bp + -1] ; $t             
4454   225C FD 79         mov g, b
4455   225E FD 77         inc b
4456   2260 FA FF FF      lea d, [bp + -1] ; $t
4457   2263 FD 43         mov [d], b
4458   2265 FD 27         mov b, g
4459   2267 D8            push b
4460   2268 29 00 25      mov b, [_prog] ; $prog           
4461   226B FD 79         mov g, b
4462   226D FD 77         inc b
4463   226F 3B 00 25      mov d, _prog ; $prog
4464   2272 FD 43         mov [d], b
4465   2274 FD 27         mov b, g
4466   2276 74            mov d, b
4467   2277 32            mov bl, [d]
4468   2278 A7 00         mov bh, 0
4469   227A E7            pop d
4470   227B FD 3E         mov [d], bl
4471   227D             ;; tok = DOT; 
4472   227D 3B FC 24      mov d, _tok ; $tok         
4473   2280 26 25 00      mov b, 37; DOT        
4474   2283 FD 43         mov [d], b
4475   2285             ;; toktype = DELIMITER;   
4476   2285 3B FE 24      mov d, _toktype ; $toktype         
4477   2288 26 01 00      mov b, 1; DELIMITER        
4478   228B FD 43         mov [d], b
4479   228D 0A 90 22      jmp _if76_exit
4480   2290             _if76_exit:
4481   2290             _if75_exit:
4482   2290             _if74_exit:
4483   2290             _if73_exit:
4484   2290             _if72_exit:
4485   2290             _if71_exit:
4486   2290             _if70_exit:
4487   2290             _if69_exit:
4488   2290             _if68_exit:
4489   2290             _if67_exit:
4490   2290             _if66_exit:
4491   2290             _if65_exit:
4492   2290             _if63_exit:
4493   2290             _if61_exit:
4494   2290             _if59_exit:
4495   2290             _if56_exit:
4496   2290             _if53_exit:
4497   2290             _if52_exit:
4498   2290             _if50_exit:
4499   2290             _if48_exit:
4500   2290             _if46_exit:
4501   2290             _if45_exit:
4502   2290             _if44_exit:
4503   2290             _if43_exit:
4504   2290             _if42_exit:
4505   2290             _if41_exit:
4506   2290             _if38_exit:
4507   2290             _if36_exit:
4508   2290             _if34_exit:
4509   2290             ;; *t = '\0'; 
4510   2290 2C FF FF      mov b, [bp + -1] ; $t             
4511   2293 D8            push b
4512   2294 26 00 00      mov b, $0
4513   2297 E7            pop d
4514   2298 FD 3E         mov [d], bl
4515   229A F9            leave
4516   229B 09            ret
4517   229C             
4518   229C             convert_constant:
4519   229C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4520   229F             ; $s 
4521   229F             ; $t 
4522   229F 52 04 00      sub sp, 4
4523   22A2             ;; t = token; 
4524   22A2 FA FD FF      lea d, [bp + -3] ; $t         
4525   22A5 26 02 25      mov b, _token_data ; $token                   
4526   22A8 FD 43         mov [d], b
4527   22AA             ;; s = string_const; 
4528   22AA FA FF FF      lea d, [bp + -1] ; $s         
4529   22AD 26 02 26      mov b, _string_const_data ; $string_const                   
4530   22B0 FD 43         mov [d], b
4531   22B2             ;; if(toktype == CHAR_CONST){ 
4532   22B2             _if77_cond:
4533   22B2 29 FE 24      mov b, [_toktype] ; $toktype           
4534   22B5             ; START RELATIONAL
4535   22B5 D7            push a
4536   22B6 11            mov a, b
4537   22B7 26 02 00      mov b, 2; CHAR_CONST
4538   22BA B0            cmp a, b
4539   22BB FD 71         seq ; ==
4540   22BD E4            pop a
4541   22BE             ; END RELATIONAL
4542   22BE C0 00 00      cmp b, 0
4543   22C1 C6 5B 24      je _if77_else
4544   22C4             _if77_true:
4545   22C4             ;; t++; 
4546   22C4 2C FD FF      mov b, [bp + -3] ; $t             
4547   22C7 FD 79         mov g, b
4548   22C9 FD 77         inc b
4549   22CB FA FD FF      lea d, [bp + -3] ; $t
4550   22CE FD 43         mov [d], b
4551   22D0 FD 27         mov b, g
4552   22D2             ;; if(*t == '\\'){ 
4553   22D2             _if78_cond:
4554   22D2 2C FD FF      mov b, [bp + -3] ; $t             
4555   22D5 74            mov d, b
4556   22D6 32            mov bl, [d]
4557   22D7 A7 00         mov bh, 0
4558   22D9             ; START RELATIONAL
4559   22D9 D7            push a
4560   22DA 11            mov a, b
4561   22DB 26 5C 00      mov b, $5c
4562   22DE B0            cmp a, b
4563   22DF FD 71         seq ; ==
4564   22E1 E4            pop a
4565   22E2             ; END RELATIONAL
4566   22E2 C0 00 00      cmp b, 0
4567   22E5 C6 3F 24      je _if78_else
4568   22E8             _if78_true:
4569   22E8             ;; t++; 
4570   22E8 2C FD FF      mov b, [bp + -3] ; $t             
4571   22EB FD 79         mov g, b
4572   22ED FD 77         inc b
4573   22EF FA FD FF      lea d, [bp + -3] ; $t
4574   22F2 FD 43         mov [d], b
4575   22F4 FD 27         mov b, g
4576   22F6             ;; switch(*t){ 
4577   22F6             _switch79_expr:
4578   22F6 2C FD FF      mov b, [bp + -3] ; $t             
4579   22F9 74            mov d, b
4580   22FA 32            mov bl, [d]
4581   22FB A7 00         mov bh, 0
4582   22FD             _switch79_comparisons:
4583   22FD C1 30         cmp bl, $30
4584   22FF C6 37 23      je _switch79_case0
4585   2302 C1 61         cmp bl, $61
4586   2304 C6 4F 23      je _switch79_case1
4587   2307 C1 62         cmp bl, $62
4588   2309 C6 67 23      je _switch79_case2
4589   230C C1 66         cmp bl, $66
4590   230E C6 7F 23      je _switch79_case3
4591   2311 C1 6E         cmp bl, $6e
4592   2313 C6 97 23      je _switch79_case4
4593   2316 C1 72         cmp bl, $72
4594   2318 C6 AF 23      je _switch79_case5
4595   231B C1 74         cmp bl, $74
4596   231D C6 C7 23      je _switch79_case6
4597   2320 C1 76         cmp bl, $76
4598   2322 C6 DF 23      je _switch79_case7
4599   2325 C1 5C         cmp bl, $5c
4600   2327 C6 F7 23      je _switch79_case8
4601   232A C1 27         cmp bl, $27
4602   232C C6 0F 24      je _switch79_case9
4603   232F C1 22         cmp bl, $22
4604   2331 C6 27 24      je _switch79_case10
4605   2334 0A 3C 24      jmp _switch79_exit
4606   2337             _switch79_case0:
4607   2337             ;; *s++ = '\0'; 
4608   2337 2C FF FF      mov b, [bp + -1] ; $s             
4609   233A FD 79         mov g, b
4610   233C FD 77         inc b
4611   233E FA FF FF      lea d, [bp + -1] ; $s
4612   2341 FD 43         mov [d], b
4613   2343 FD 27         mov b, g
4614   2345 D8            push b
4615   2346 26 00 00      mov b, $0
4616   2349 E7            pop d
4617   234A FD 3E         mov [d], bl
4618   234C             ;; break; 
4619   234C 0A 3C 24      jmp _switch79_exit ; case break
4620   234F             _switch79_case1:
4621   234F             ;; *s++ = '\a'; 
4622   234F 2C FF FF      mov b, [bp + -1] ; $s             
4623   2352 FD 79         mov g, b
4624   2354 FD 77         inc b
4625   2356 FA FF FF      lea d, [bp + -1] ; $s
4626   2359 FD 43         mov [d], b
4627   235B FD 27         mov b, g
4628   235D D8            push b
4629   235E 26 07 00      mov b, $7
4630   2361 E7            pop d
4631   2362 FD 3E         mov [d], bl
4632   2364             ;; break; 
4633   2364 0A 3C 24      jmp _switch79_exit ; case break
4634   2367             _switch79_case2:
4635   2367             ;; *s++ = '\b'; 
4636   2367 2C FF FF      mov b, [bp + -1] ; $s             
4637   236A FD 79         mov g, b
4638   236C FD 77         inc b
4639   236E FA FF FF      lea d, [bp + -1] ; $s
4640   2371 FD 43         mov [d], b
4641   2373 FD 27         mov b, g
4642   2375 D8            push b
4643   2376 26 08 00      mov b, $8
4644   2379 E7            pop d
4645   237A FD 3E         mov [d], bl
4646   237C             ;; break;   
4647   237C 0A 3C 24      jmp _switch79_exit ; case break
4648   237F             _switch79_case3:
4649   237F             ;; *s++ = '\f'; 
4650   237F 2C FF FF      mov b, [bp + -1] ; $s             
4651   2382 FD 79         mov g, b
4652   2384 FD 77         inc b
4653   2386 FA FF FF      lea d, [bp + -1] ; $s
4654   2389 FD 43         mov [d], b
4655   238B FD 27         mov b, g
4656   238D D8            push b
4657   238E 26 0C 00      mov b, $c
4658   2391 E7            pop d
4659   2392 FD 3E         mov [d], bl
4660   2394             ;; break; 
4661   2394 0A 3C 24      jmp _switch79_exit ; case break
4662   2397             _switch79_case4:
4663   2397             ;; *s++ = '\n'; 
4664   2397 2C FF FF      mov b, [bp + -1] ; $s             
4665   239A FD 79         mov g, b
4666   239C FD 77         inc b
4667   239E FA FF FF      lea d, [bp + -1] ; $s
4668   23A1 FD 43         mov [d], b
4669   23A3 FD 27         mov b, g
4670   23A5 D8            push b
4671   23A6 26 0A 00      mov b, $a
4672   23A9 E7            pop d
4673   23AA FD 3E         mov [d], bl
4674   23AC             ;; break; 
4675   23AC 0A 3C 24      jmp _switch79_exit ; case break
4676   23AF             _switch79_case5:
4677   23AF             ;; *s++ = '\r'; 
4678   23AF 2C FF FF      mov b, [bp + -1] ; $s             
4679   23B2 FD 79         mov g, b
4680   23B4 FD 77         inc b
4681   23B6 FA FF FF      lea d, [bp + -1] ; $s
4682   23B9 FD 43         mov [d], b
4683   23BB FD 27         mov b, g
4684   23BD D8            push b
4685   23BE 26 0D 00      mov b, $d
4686   23C1 E7            pop d
4687   23C2 FD 3E         mov [d], bl
4688   23C4             ;; break; 
4689   23C4 0A 3C 24      jmp _switch79_exit ; case break
4690   23C7             _switch79_case6:
4691   23C7             ;; *s++ = '\t'; 
4692   23C7 2C FF FF      mov b, [bp + -1] ; $s             
4693   23CA FD 79         mov g, b
4694   23CC FD 77         inc b
4695   23CE FA FF FF      lea d, [bp + -1] ; $s
4696   23D1 FD 43         mov [d], b
4697   23D3 FD 27         mov b, g
4698   23D5 D8            push b
4699   23D6 26 09 00      mov b, $9
4700   23D9 E7            pop d
4701   23DA FD 3E         mov [d], bl
4702   23DC             ;; break; 
4703   23DC 0A 3C 24      jmp _switch79_exit ; case break
4704   23DF             _switch79_case7:
4705   23DF             ;; *s++ = '\v'; 
4706   23DF 2C FF FF      mov b, [bp + -1] ; $s             
4707   23E2 FD 79         mov g, b
4708   23E4 FD 77         inc b
4709   23E6 FA FF FF      lea d, [bp + -1] ; $s
4710   23E9 FD 43         mov [d], b
4711   23EB FD 27         mov b, g
4712   23ED D8            push b
4713   23EE 26 0B 00      mov b, $b
4714   23F1 E7            pop d
4715   23F2 FD 3E         mov [d], bl
4716   23F4             ;; break; 
4717   23F4 0A 3C 24      jmp _switch79_exit ; case break
4718   23F7             _switch79_case8:
4719   23F7             ;; *s++ = '\\'; 
4720   23F7 2C FF FF      mov b, [bp + -1] ; $s             
4721   23FA FD 79         mov g, b
4722   23FC FD 77         inc b
4723   23FE FA FF FF      lea d, [bp + -1] ; $s
4724   2401 FD 43         mov [d], b
4725   2403 FD 27         mov b, g
4726   2405 D8            push b
4727   2406 26 5C 00      mov b, $5c
4728   2409 E7            pop d
4729   240A FD 3E         mov [d], bl
4730   240C             ;; break; 
4731   240C 0A 3C 24      jmp _switch79_exit ; case break
4732   240F             _switch79_case9:
4733   240F             ;; *s++ = '\''; 
4734   240F 2C FF FF      mov b, [bp + -1] ; $s             
4735   2412 FD 79         mov g, b
4736   2414 FD 77         inc b
4737   2416 FA FF FF      lea d, [bp + -1] ; $s
4738   2419 FD 43         mov [d], b
4739   241B FD 27         mov b, g
4740   241D D8            push b
4741   241E 26 27 00      mov b, $27
4742   2421 E7            pop d
4743   2422 FD 3E         mov [d], bl
4744   2424             ;; break; 
4745   2424 0A 3C 24      jmp _switch79_exit ; case break
4746   2427             _switch79_case10:
4747   2427             ;; *s++ = '\"'; 
4748   2427 2C FF FF      mov b, [bp + -1] ; $s             
4749   242A FD 79         mov g, b
4750   242C FD 77         inc b
4751   242E FA FF FF      lea d, [bp + -1] ; $s
4752   2431 FD 43         mov [d], b
4753   2433 FD 27         mov b, g
4754   2435 D8            push b
4755   2436 26 22 00      mov b, $22
4756   2439 E7            pop d
4757   243A FD 3E         mov [d], bl
4758   243C             _switch79_exit:
4759   243C 0A 58 24      jmp _if78_exit
4760   243F             _if78_else:
4761   243F             ;; *s++ = *t; 
4762   243F 2C FF FF      mov b, [bp + -1] ; $s             
4763   2442 FD 79         mov g, b
4764   2444 FD 77         inc b
4765   2446 FA FF FF      lea d, [bp + -1] ; $s
4766   2449 FD 43         mov [d], b
4767   244B FD 27         mov b, g
4768   244D D8            push b
4769   244E 2C FD FF      mov b, [bp + -3] ; $t             
4770   2451 74            mov d, b
4771   2452 32            mov bl, [d]
4772   2453 A7 00         mov bh, 0
4773   2455 E7            pop d
4774   2456 FD 3E         mov [d], bl
4775   2458             _if78_exit:
4776   2458 0A C7 24      jmp _if77_exit
4777   245B             _if77_else:
4778   245B             ;; if(toktype == STRING_CONST){ 
4779   245B             _if80_cond:
4780   245B 29 FE 24      mov b, [_toktype] ; $toktype           
4781   245E             ; START RELATIONAL
4782   245E D7            push a
4783   245F 11            mov a, b
4784   2460 26 03 00      mov b, 3; STRING_CONST
4785   2463 B0            cmp a, b
4786   2464 FD 71         seq ; ==
4787   2466 E4            pop a
4788   2467             ; END RELATIONAL
4789   2467 C0 00 00      cmp b, 0
4790   246A C6 C7 24      je _if80_exit
4791   246D             _if80_true:
4792   246D             ;; t++; 
4793   246D 2C FD FF      mov b, [bp + -3] ; $t             
4794   2470 FD 79         mov g, b
4795   2472 FD 77         inc b
4796   2474 FA FD FF      lea d, [bp + -3] ; $t
4797   2477 FD 43         mov [d], b
4798   2479 FD 27         mov b, g
4799   247B             ;; while(*t != '\"' && *t){ 
4800   247B             _while81_cond:
4801   247B 2C FD FF      mov b, [bp + -3] ; $t             
4802   247E 74            mov d, b
4803   247F 32            mov bl, [d]
4804   2480 A7 00         mov bh, 0
4805   2482             ; START RELATIONAL
4806   2482 D7            push a
4807   2483 11            mov a, b
4808   2484 26 22 00      mov b, $22
4809   2487 B0            cmp a, b
4810   2488 FD 72         sneq ; !=
4811   248A E4            pop a
4812   248B             ; END RELATIONAL
4813   248B D7            push a
4814   248C 11            mov a, b
4815   248D 2C FD FF      mov b, [bp + -3] ; $t             
4816   2490 74            mov d, b
4817   2491 32            mov bl, [d]
4818   2492 A7 00         mov bh, 0
4819   2494 FD A7         sand a, b ; &&
4820   2496 E4            pop a
4821   2497 C0 00 00      cmp b, 0
4822   249A C6 C4 24      je _while81_exit
4823   249D             _while81_block:
4824   249D             ;; *s++ = *t++; 
4825   249D 2C FF FF      mov b, [bp + -1] ; $s             
4826   24A0 FD 79         mov g, b
4827   24A2 FD 77         inc b
4828   24A4 FA FF FF      lea d, [bp + -1] ; $s
4829   24A7 FD 43         mov [d], b
4830   24A9 FD 27         mov b, g
4831   24AB D8            push b
4832   24AC 2C FD FF      mov b, [bp + -3] ; $t             
4833   24AF FD 79         mov g, b
4834   24B1 FD 77         inc b
4835   24B3 FA FD FF      lea d, [bp + -3] ; $t
4836   24B6 FD 43         mov [d], b
4837   24B8 FD 27         mov b, g
4838   24BA 74            mov d, b
4839   24BB 32            mov bl, [d]
4840   24BC A7 00         mov bh, 0
4841   24BE E7            pop d
4842   24BF FD 3E         mov [d], bl
4843   24C1 0A 7B 24      jmp _while81_cond
4844   24C4             _while81_exit:
4845   24C4 0A C7 24      jmp _if80_exit
4846   24C7             _if80_exit:
4847   24C7             _if77_exit:
4848   24C7             ;; *s = '\0'; 
4849   24C7 2C FF FF      mov b, [bp + -1] ; $s             
4850   24CA D8            push b
4851   24CB 26 00 00      mov b, $0
4852   24CE E7            pop d
4853   24CF FD 3E         mov [d], bl
4854   24D1 F9            leave
4855   24D2 09            ret
4856   24D3             
4857   24D3             error:
4858   24D3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4859   24D6             ;; printf("\nError: "); 
4860   24D6 26 BE 27      mov b, __s3 ; "\nError: "
4861   24D9 FD AB         swp b
4862   24DB D8            push b
4863   24DC 07 27 0A      call printf
4864   24DF 51 02 00      add sp, 2
4865   24E2             ;; printf(msg); 
4866   24E2 2C 05 00      mov b, [bp + 5] ; $msg             
4867   24E5 FD AB         swp b
4868   24E7 D8            push b
4869   24E8 07 27 0A      call printf
4870   24EB 51 02 00      add sp, 2
4871   24EE             ;; printf("\n"); 
4872   24EE 26 C7 27      mov b, __s4 ; "\n"
4873   24F1 FD AB         swp b
4874   24F3 D8            push b
4875   24F4 07 27 0A      call printf
4876   24F7 51 02 00      add sp, 2
4877   24FA F9            leave
4878   24FB 09            ret
4879   24FC             ; --- END TEXT BLOCK
4880   24FC             
4881   24FC             ; --- BEGIN DATA BLOCK
4882   24FC 00 00       _tok: .fill 2, 0
4883   24FE 00 00       _toktype: .fill 2, 0
4884   2500 00 00       _prog: .fill 2, 0
4885   2502 00 00 00 00 _token_data: .fill 256, 0
4885   2506 00 00 00 00 
4885   250A 00 00 00 00 
4885   250E 00 00 00 00 
4885   2512 00 00 00 00 
4885   2516 00 00 00 00 
4885   251A 00 00 00 00 
4885   251E 00 00 00 00 
4885   2522 00 00 00 00 
4885   2526 00 00 00 00 
4885   252A 00 00 00 00 
4885   252E 00 00 00 00 
4885   2532 00 00 00 00 
4885   2536 00 00 00 00 
4885   253A 00 00 00 00 
4885   253E 00 00 00 00 
4885   2542 00 00 00 00 
4885   2546 00 00 00 00 
4885   254A 00 00 00 00 
4885   254E 00 00 00 00 
4885   2552 00 00 00 00 
4885   2556 00 00 00 00 
4885   255A 00 00 00 00 
4885   255E 00 00 00 00 
4885   2562 00 00 00 00 
4885   2566 00 00 00 00 
4885   256A 00 00 00 00 
4885   256E 00 00 00 00 
4885   2572 00 00 00 00 
4885   2576 00 00 00 00 
4885   257A 00 00 00 00 
4885   257E 00 00 00 00 
4885   2582 00 00 00 00 
4885   2586 00 00 00 00 
4885   258A 00 00 00 00 
4885   258E 00 00 00 00 
4885   2592 00 00 00 00 
4885   2596 00 00 00 00 
4885   259A 00 00 00 00 
4885   259E 00 00 00 00 
4885   25A2 00 00 00 00 
4885   25A6 00 00 00 00 
4885   25AA 00 00 00 00 
4885   25AE 00 00 00 00 
4885   25B2 00 00 00 00 
4885   25B6 00 00 00 00 
4885   25BA 00 00 00 00 
4885   25BE 00 00 00 00 
4885   25C2 00 00 00 00 
4885   25C6 00 00 00 00 
4885   25CA 00 00 00 00 
4885   25CE 00 00 00 00 
4885   25D2 00 00 00 00 
4885   25D6 00 00 00 00 
4885   25DA 00 00 00 00 
4885   25DE 00 00 00 00 
4885   25E2 00 00 00 00 
4885   25E6 00 00 00 00 
4885   25EA 00 00 00 00 
4885   25EE 00 00 00 00 
4885   25F2 00 00 00 00 
4885   25F6 00 00 00 00 
4885   25FA 00 00 00 00 
4885   25FE 00 00 00 00 
4886   2602 00 00 00 00 _string_const_data: .fill 256, 0
4886   2606 00 00 00 00 
4886   260A 00 00 00 00 
4886   260E 00 00 00 00 
4886   2612 00 00 00 00 
4886   2616 00 00 00 00 
4886   261A 00 00 00 00 
4886   261E 00 00 00 00 
4886   2622 00 00 00 00 
4886   2626 00 00 00 00 
4886   262A 00 00 00 00 
4886   262E 00 00 00 00 
4886   2632 00 00 00 00 
4886   2636 00 00 00 00 
4886   263A 00 00 00 00 
4886   263E 00 00 00 00 
4886   2642 00 00 00 00 
4886   2646 00 00 00 00 
4886   264A 00 00 00 00 
4886   264E 00 00 00 00 
4886   2652 00 00 00 00 
4886   2656 00 00 00 00 
4886   265A 00 00 00 00 
4886   265E 00 00 00 00 
4886   2662 00 00 00 00 
4886   2666 00 00 00 00 
4886   266A 00 00 00 00 
4886   266E 00 00 00 00 
4886   2672 00 00 00 00 
4886   2676 00 00 00 00 
4886   267A 00 00 00 00 
4886   267E 00 00 00 00 
4886   2682 00 00 00 00 
4886   2686 00 00 00 00 
4886   268A 00 00 00 00 
4886   268E 00 00 00 00 
4886   2692 00 00 00 00 
4886   2696 00 00 00 00 
4886   269A 00 00 00 00 
4886   269E 00 00 00 00 
4886   26A2 00 00 00 00 
4886   26A6 00 00 00 00 
4886   26AA 00 00 00 00 
4886   26AE 00 00 00 00 
4886   26B2 00 00 00 00 
4886   26B6 00 00 00 00 
4886   26BA 00 00 00 00 
4886   26BE 00 00 00 00 
4886   26C2 00 00 00 00 
4886   26C6 00 00 00 00 
4886   26CA 00 00 00 00 
4886   26CE 00 00 00 00 
4886   26D2 00 00 00 00 
4886   26D6 00 00 00 00 
4886   26DA 00 00 00 00 
4886   26DE 00 00 00 00 
4886   26E2 00 00 00 00 
4886   26E6 00 00 00 00 
4886   26EA 00 00 00 00 
4886   26EE 00 00 00 00 
4886   26F2 00 00 00 00 
4886   26F6 00 00 00 00 
4886   26FA 00 00 00 00 
4886   26FE 00 00 00 00 
4887   2702 00 00 00 00 _filename_data: .fill 64, 0
4887   2706 00 00 00 00 
4887   270A 00 00 00 00 
4887   270E 00 00 00 00 
4887   2712 00 00 00 00 
4887   2716 00 00 00 00 
4887   271A 00 00 00 00 
4887   271E 00 00 00 00 
4887   2722 00 00 00 00 
4887   2726 00 00 00 00 
4887   272A 00 00 00 00 
4887   272E 00 00 00 00 
4887   2732 00 00 00 00 
4887   2736 00 00 00 00 
4887   273A 00 00 00 00 
4887   273E 00 00 00 00 
4888   2742 00 00       _content: .fill 2, 0
4889   2744 55 6E 6B 6E __s0: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
4889   2748 6F 77 6E 20 
4889   274C 74 79 70 65 
4889   2750 20 73 69 7A 
4889   2754 65 20 69 6E 
4889   2758 20 76 61 5F 
4889   275C 61 72 67 28 
4889   2760 29 20 63 61 
4889   2764 6C 6C 2E 20 
4889   2768 53 69 7A 65 
4889   276C 20 6E 65 65 
4889   2770 64 73 20 74 
4889   2774 6F 20 62 65 
4889   2778 20 65 69 74 
4889   277C 68 65 72 20 
4889   2780 31 20 6F 72 
4889   2784 20 32 2E 00 
4890   2788 45 72 72 6F __s1: .db "Error: Unknown argument type.\n", 0
4890   278C 72 3A 20 55 
4890   2790 6E 6B 6E 6F 
4890   2794 77 6E 20 61 
4890   2798 72 67 75 6D 
4890   279C 65 6E 74 20 
4890   27A0 74 79 70 65 
4890   27A4 2E 0A 00 
4891   27A7 44 6F 75 62 __s2: .db "Double quotes expected", 0
4891   27AB 6C 65 20 71 
4891   27AF 75 6F 74 65 
4891   27B3 73 20 65 78 
4891   27B7 70 65 63 74 
4891   27BB 65 64 00 
4892   27BE 0A 45 72 72 __s3: .db "\nError: ", 0
4892   27C2 6F 72 3A 20 
4892   27C6 00 
4893   27C7 0A 00       __s4: .db "\n", 0
4894   27C9             
4895   27C9 CB 27       _heap_top: .dw _heap
4896   27CB 00          _heap: .db 0
4897   27CC             ; --- END DATA BLOCK
4898   27CC             
4899   27CC             .end
tasm: Number of errors = 0
