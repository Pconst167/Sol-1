0001   0000             ; --- FILENAME: ../solarium/usr/bin/mkbin
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $s 
0011   0408 52 02 00      sub sp, 2
0012   040B             ;; prog = 0x0000; // Beginning of arguments buffer 
0013   040B 3B 7F 27      mov d, _prog ; $prog
0014   040E DA            push d
0015   040F 26 00 00      mov b, $0
0016   0412 E7            pop d
0017   0413 FD 43         mov [d], b
0018   0415             ;; s = arg; 
0019   0415 FA FF FF      lea d, [bp + -1] ; $s
0020   0418 DA            push d
0021   0419 3B 81 29      mov d, _arg_data ; $arg
0022   041C 2D            mov b, d
0023   041D E7            pop d
0024   041E FD 43         mov [d], b
0025   0420             ;; for(;;){ 
0026   0420             _for1_init:
0027   0420             _for1_cond:
0028   0420             _for1_block:
0029   0420             ;; if(*prog == '\0' || *prog == ';' || *prog == ' '){ 
0030   0420             _if2_cond:
0031   0420 3B 7F 27      mov d, _prog ; $prog
0032   0423 2A            mov b, [d]
0033   0424 74            mov d, b
0034   0425 32            mov bl, [d]
0035   0426 A7 00         mov bh, 0
0036   0428             ; START RELATIONAL
0037   0428 D7            push a
0038   0429 11            mov a, b
0039   042A 26 00 00      mov b, $0
0040   042D B0            cmp a, b
0041   042E FD 71         seq ; ==
0042   0430 E4            pop a
0043   0431             ; END RELATIONAL
0044   0431 D7            push a
0045   0432 11            mov a, b
0046   0433 3B 7F 27      mov d, _prog ; $prog
0047   0436 2A            mov b, [d]
0048   0437 74            mov d, b
0049   0438 32            mov bl, [d]
0050   0439 A7 00         mov bh, 0
0051   043B             ; START RELATIONAL
0052   043B D7            push a
0053   043C 11            mov a, b
0054   043D 26 3B 00      mov b, $3b
0055   0440 B0            cmp a, b
0056   0441 FD 71         seq ; ==
0057   0443 E4            pop a
0058   0444             ; END RELATIONAL
0059   0444 FD A8         sor a, b ; ||
0060   0446 11            mov a, b
0061   0447 3B 7F 27      mov d, _prog ; $prog
0062   044A 2A            mov b, [d]
0063   044B 74            mov d, b
0064   044C 32            mov bl, [d]
0065   044D A7 00         mov bh, 0
0066   044F             ; START RELATIONAL
0067   044F D7            push a
0068   0450 11            mov a, b
0069   0451 26 20 00      mov b, $20
0070   0454 B0            cmp a, b
0071   0455 FD 71         seq ; ==
0072   0457 E4            pop a
0073   0458             ; END RELATIONAL
0074   0458 FD A8         sor a, b ; ||
0075   045A E4            pop a
0076   045B C0 00 00      cmp b, 0
0077   045E C6 72 04      je _if2_else
0078   0461             _if2_true:
0079   0461             ;; *s = '\0'; 
0080   0461 FA FF FF      lea d, [bp + -1] ; $s
0081   0464 2A            mov b, [d]
0082   0465 D8            push b
0083   0466 26 00 00      mov b, $0
0084   0469 E7            pop d
0085   046A FD 3E         mov [d], bl
0086   046C             ;; break; 
0087   046C 0A 9B 04      jmp _for1_exit ; for break
0088   046F 0A 98 04      jmp _if2_exit
0089   0472             _if2_else:
0090   0472             ;; *s++ = *prog++; 
0091   0472 FA FF FF      lea d, [bp + -1] ; $s
0092   0475 2A            mov b, [d]
0093   0476 FD 79         mov g, b
0094   0478 FD 77         inc b
0095   047A FA FF FF      lea d, [bp + -1] ; $s
0096   047D FD 43         mov [d], b
0097   047F FD 27         mov b, g
0098   0481 D8            push b
0099   0482 3B 7F 27      mov d, _prog ; $prog
0100   0485 2A            mov b, [d]
0101   0486 FD 79         mov g, b
0102   0488 FD 77         inc b
0103   048A 3B 7F 27      mov d, _prog ; $prog
0104   048D FD 43         mov [d], b
0105   048F FD 27         mov b, g
0106   0491 74            mov d, b
0107   0492 32            mov bl, [d]
0108   0493 A7 00         mov bh, 0
0109   0495 E7            pop d
0110   0496 FD 3E         mov [d], bl
0111   0498             _if2_exit:
0112   0498             _for1_update:
0113   0498 0A 20 04      jmp _for1_cond
0114   049B             _for1_exit:
0115   049B             ;; printf("> "); 
0116   049B 26 81 2B      mov b, __s0 ; "> "
0117   049E FD AB         swp b
0118   04A0 D8            push b
0119   04A1 07 A3 0A      call printf
0120   04A4 51 02 00      add sp, 2
0121   04A7             
0122   04A7             ; --- BEGIN INLINE ASM BLOCK
0123   04A7 3B 81 29      mov d, _arg_data ; $arg
0124   04AA 19 06         mov al, 6
0125   04AC 05 04         syscall sys_filesystem
0126   04AE             ; --- END INLINE ASM BLOCK
0127   04AE             
0128   04AE 05 0B         syscall sys_terminate_proc
0129   04B0             
0130   04B0             include_ctype_lib:
0131   04B0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0132   04B3             
0133   04B3             ; --- BEGIN INLINE ASM BLOCK
0134   04B3             .include "lib/ctype.asm"
0001+  04B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  04B3             ; ctype.s
0003+  04B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  04B3             
0005+  04B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  04B3             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  04B3             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  04B3             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  04B3             ;; characters are supported.
0010+  04B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  04B3             ;; _isalnum 
0012+  04B3             ;; _isalpha 
0013+  04B3             ;; islower 
0014+  04B3             ;; isupper 
0015+  04B3             ;; _isdigit 
0016+  04B3             ;; isxdigit
0017+  04B3             ;; iscntrl 
0018+  04B3             ;; isgraph 
0019+  04B3             ;; _isspace 
0020+  04B3             ;; isblank 
0021+  04B3             ;; isprint 
0022+  04B3             ;; ispunct 
0023+  04B3             ;; tolower 
0024+  04B3             ;; toupper
0025+  04B3             
0026+  04B3             
0027+  04B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  04B3             ;; IS ALPHANUMERIC
0029+  04B3             ;; sets ZF according with result
0030+  04B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  04B3             _isalnum:
0032+  04B3 07 D0 04    	call _isalpha
0033+  04B6 C6 BC 04    	je _isalnum_exit
0034+  04B9 07 BD 04    	call _isdigit
0035+  04BC             _isalnum_exit:
0036+  04BC 09          	ret	
0037+  04BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  04BD             ;; IS DIGIT
0039+  04BD             ;; sets ZF according with result
0040+  04BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  04BD             _isdigit:
0042+  04BD DB          	push al
0043+  04BE B9 30       	cmp al, '0'
0044+  04C0 C8 CC 04    	jlu _isdigit_false
0045+  04C3 B9 39       	cmp al, '9'
0046+  04C5 D1 CC 04    	jgu _isdigit_false
0047+  04C8 87 00       	and al, 0	; set ZF
0048+  04CA E8          	pop al
0049+  04CB 09          	ret
0050+  04CC             _isdigit_false:
0051+  04CC 8B 01       	or al, 1	; clear ZF
0052+  04CE E8          	pop al
0053+  04CF 09          	ret	
0054+  04D0             	
0055+  04D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  04D0             ;; IS ALPHA
0057+  04D0             ;; sets ZF according with result
0058+  04D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  04D0             _isalpha:
0060+  04D0 DB          	push al
0061+  04D1 B9 5F       	cmp al, '_'
0062+  04D3 C6 F3 04    	je _isalpha_true
0063+  04D6 B9 2E       	cmp al, '.'
0064+  04D8 C6 F3 04    	je _isalpha_true
0065+  04DB B9 41       	cmp al, 'A'
0066+  04DD C8 EF 04    	jlu _isalpha_false
0067+  04E0 B9 7A       	cmp al, 'z'
0068+  04E2 D1 EF 04    	jgu _isalpha_false
0069+  04E5 B9 5A       	cmp al, 'Z'
0070+  04E7 D0 F3 04    	jleu _isalpha_true
0071+  04EA B9 61       	cmp al, 'a'
0072+  04EC C9 F3 04    	jgeu _isalpha_true
0073+  04EF             _isalpha_false:
0074+  04EF 8B 01       	or al, 1	; clear ZF
0075+  04F1 E8          	pop al
0076+  04F2 09          	ret
0077+  04F3             _isalpha_true:
0078+  04F3 87 00       	and al, 0	; set ZF
0079+  04F5 E8          	pop al
0080+  04F6 09          	ret
0081+  04F7             
0082+  04F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  04F7             ;; IS PATH-ALPHA
0084+  04F7             ;; sets ZF according with result
0085+  04F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  04F7             ispath:
0087+  04F7 DB          	push al
0088+  04F8 07 BD 04    	call _isdigit
0089+  04FB C6 25 05    	je ispath_true
0090+  04FE B9 5F       	cmp al, '_'
0091+  0500 C6 25 05    	je ispath_true
0092+  0503 B9 2F       	cmp al, '/'
0093+  0505 C6 25 05    	je ispath_true
0094+  0508 B9 2E       	cmp al, '.'
0095+  050A C6 25 05    	je ispath_true
0096+  050D B9 41       	cmp al, 'A'
0097+  050F C8 21 05    	jlu ispath_false
0098+  0512 B9 7A       	cmp al, 'z'
0099+  0514 D1 21 05    	jgu ispath_false
0100+  0517 B9 5A       	cmp al, 'Z'
0101+  0519 D0 25 05    	jleu ispath_true
0102+  051C B9 61       	cmp al, 'a'
0103+  051E C9 25 05    	jgeu ispath_true
0104+  0521             ispath_false:
0105+  0521 8B 01       	or al, 1	; clear ZF
0106+  0523 E8          	pop al
0107+  0524 09          	ret
0108+  0525             ispath_true:
0109+  0525 87 00       	and al, 0	; set ZF
0110+  0527 E8          	pop al
0111+  0528 09          	ret
0112+  0529             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0529             ;; IS SPACE
0114+  0529             ;; sets ZF according with result
0115+  0529             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0529             _isspace:
0117+  0529 B9 20       	cmp al, $20		; ' '
0118+  052B C6 3F 05    	je _isspace_exit
0119+  052E B9 09       	cmp al, $09		; '\t'
0120+  0530 C6 3F 05    	je _isspace_exit
0121+  0533 B9 0A       	cmp al, $0A		; '\n'
0122+  0535 C6 3F 05    	je _isspace_exit
0123+  0538 B9 0D       	cmp al, $0D		; '\r'
0124+  053A C6 3F 05    	je _isspace_exit
0125+  053D B9 0B       	cmp al, $0B		; '\v'
0126+  053F             _isspace_exit:
0127+  053F 09          	ret	
0128+  0540             
0129+  0540             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0540             ; TO LOWER
0131+  0540             ; input in AL
0132+  0540             ; output in AL
0133+  0540             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0540             _to_lower:
0135+  0540 B9 5A       	cmp al, 'Z'
0136+  0542 D1 47 05    	jgu _to_lower_ret
0137+  0545 6A 20       	add al, $20				; convert to lower case
0138+  0547             _to_lower_ret:
0139+  0547 09          	ret
0140+  0548             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0548             ; TO UPPER
0142+  0548             ; input in AL
0143+  0548             ; output in AL
0144+  0548             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0548             _to_upper:
0146+  0548 B9 61       	cmp al, 'a'
0147+  054A C8 4F 05    	jlu _to_upper_ret
0148+  054D 6F 20       	sub al, $20			; convert to upper case
0149+  054F             _to_upper_ret:
0150+  054F 09          	ret
0151+  0550             
0135   0550             ; --- END INLINE ASM BLOCK
0136   0550             
0137   0550 F9            leave
0138   0551 09            ret
0139   0552             
0140   0552             is_space:
0141   0552 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0142   0555             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
0143   0555 FA 05 00      lea d, [bp + 5] ; $c
0144   0558 32            mov bl, [d]
0145   0559 A7 00         mov bh, 0
0146   055B             ; START RELATIONAL
0147   055B D7            push a
0148   055C 11            mov a, b
0149   055D 26 20 00      mov b, $20
0150   0560 B0            cmp a, b
0151   0561 FD 71         seq ; ==
0152   0563 E4            pop a
0153   0564             ; END RELATIONAL
0154   0564 D7            push a
0155   0565 11            mov a, b
0156   0566 FA 05 00      lea d, [bp + 5] ; $c
0157   0569 32            mov bl, [d]
0158   056A A7 00         mov bh, 0
0159   056C             ; START RELATIONAL
0160   056C D7            push a
0161   056D 11            mov a, b
0162   056E 26 09 00      mov b, $9
0163   0571 B0            cmp a, b
0164   0572 FD 71         seq ; ==
0165   0574 E4            pop a
0166   0575             ; END RELATIONAL
0167   0575 FD A8         sor a, b ; ||
0168   0577 11            mov a, b
0169   0578 FA 05 00      lea d, [bp + 5] ; $c
0170   057B 32            mov bl, [d]
0171   057C A7 00         mov bh, 0
0172   057E             ; START RELATIONAL
0173   057E D7            push a
0174   057F 11            mov a, b
0175   0580 26 0A 00      mov b, $a
0176   0583 B0            cmp a, b
0177   0584 FD 71         seq ; ==
0178   0586 E4            pop a
0179   0587             ; END RELATIONAL
0180   0587 FD A8         sor a, b ; ||
0181   0589 11            mov a, b
0182   058A FA 05 00      lea d, [bp + 5] ; $c
0183   058D 32            mov bl, [d]
0184   058E A7 00         mov bh, 0
0185   0590             ; START RELATIONAL
0186   0590 D7            push a
0187   0591 11            mov a, b
0188   0592 26 0D 00      mov b, $d
0189   0595 B0            cmp a, b
0190   0596 FD 71         seq ; ==
0191   0598 E4            pop a
0192   0599             ; END RELATIONAL
0193   0599 FD A8         sor a, b ; ||
0194   059B E4            pop a
0195   059C F9            leave
0196   059D 09            ret
0197   059E             
0198   059E             is_digit:
0199   059E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0200   05A1             ;; return c >= '0' && c <= '9'; 
0201   05A1 FA 05 00      lea d, [bp + 5] ; $c
0202   05A4 32            mov bl, [d]
0203   05A5 A7 00         mov bh, 0
0204   05A7             ; START RELATIONAL
0205   05A7 D7            push a
0206   05A8 11            mov a, b
0207   05A9 26 30 00      mov b, $30
0208   05AC B0            cmp a, b
0209   05AD FD 80         sge ; >=
0210   05AF E4            pop a
0211   05B0             ; END RELATIONAL
0212   05B0 D7            push a
0213   05B1 11            mov a, b
0214   05B2 FA 05 00      lea d, [bp + 5] ; $c
0215   05B5 32            mov bl, [d]
0216   05B6 A7 00         mov bh, 0
0217   05B8             ; START RELATIONAL
0218   05B8 D7            push a
0219   05B9 11            mov a, b
0220   05BA 26 39 00      mov b, $39
0221   05BD B0            cmp a, b
0222   05BE FD 74         sle ; <=
0223   05C0 E4            pop a
0224   05C1             ; END RELATIONAL
0225   05C1 FD A7         sand a, b ; &&
0226   05C3 E4            pop a
0227   05C4 F9            leave
0228   05C5 09            ret
0229   05C6             
0230   05C6             is_alpha:
0231   05C6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0232   05C9             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
0233   05C9 FA 05 00      lea d, [bp + 5] ; $c
0234   05CC 32            mov bl, [d]
0235   05CD A7 00         mov bh, 0
0236   05CF             ; START RELATIONAL
0237   05CF D7            push a
0238   05D0 11            mov a, b
0239   05D1 26 61 00      mov b, $61
0240   05D4 B0            cmp a, b
0241   05D5 FD 80         sge ; >=
0242   05D7 E4            pop a
0243   05D8             ; END RELATIONAL
0244   05D8 D7            push a
0245   05D9 11            mov a, b
0246   05DA FA 05 00      lea d, [bp + 5] ; $c
0247   05DD 32            mov bl, [d]
0248   05DE A7 00         mov bh, 0
0249   05E0             ; START RELATIONAL
0250   05E0 D7            push a
0251   05E1 11            mov a, b
0252   05E2 26 7A 00      mov b, $7a
0253   05E5 B0            cmp a, b
0254   05E6 FD 74         sle ; <=
0255   05E8 E4            pop a
0256   05E9             ; END RELATIONAL
0257   05E9 FD A7         sand a, b ; &&
0258   05EB E4            pop a
0259   05EC D7            push a
0260   05ED 11            mov a, b
0261   05EE FA 05 00      lea d, [bp + 5] ; $c
0262   05F1 32            mov bl, [d]
0263   05F2 A7 00         mov bh, 0
0264   05F4             ; START RELATIONAL
0265   05F4 D7            push a
0266   05F5 11            mov a, b
0267   05F6 26 41 00      mov b, $41
0268   05F9 B0            cmp a, b
0269   05FA FD 80         sge ; >=
0270   05FC E4            pop a
0271   05FD             ; END RELATIONAL
0272   05FD D7            push a
0273   05FE 11            mov a, b
0274   05FF FA 05 00      lea d, [bp + 5] ; $c
0275   0602 32            mov bl, [d]
0276   0603 A7 00         mov bh, 0
0277   0605             ; START RELATIONAL
0278   0605 D7            push a
0279   0606 11            mov a, b
0280   0607 26 5A 00      mov b, $5a
0281   060A B0            cmp a, b
0282   060B FD 74         sle ; <=
0283   060D E4            pop a
0284   060E             ; END RELATIONAL
0285   060E FD A7         sand a, b ; &&
0286   0610 E4            pop a
0287   0611 FD A8         sor a, b ; ||
0288   0613 11            mov a, b
0289   0614 FA 05 00      lea d, [bp + 5] ; $c
0290   0617 32            mov bl, [d]
0291   0618 A7 00         mov bh, 0
0292   061A             ; START RELATIONAL
0293   061A D7            push a
0294   061B 11            mov a, b
0295   061C 26 5F 00      mov b, $5f
0296   061F B0            cmp a, b
0297   0620 FD 71         seq ; ==
0298   0622 E4            pop a
0299   0623             ; END RELATIONAL
0300   0623 FD A8         sor a, b ; ||
0301   0625 E4            pop a
0302   0626 F9            leave
0303   0627 09            ret
0304   0628             
0305   0628             toupper:
0306   0628 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0307   062B             ;; if (ch >= 'a' && ch <= 'z') { 
0308   062B             _if3_cond:
0309   062B FA 05 00      lea d, [bp + 5] ; $ch
0310   062E 32            mov bl, [d]
0311   062F A7 00         mov bh, 0
0312   0631             ; START RELATIONAL
0313   0631 D7            push a
0314   0632 11            mov a, b
0315   0633 26 61 00      mov b, $61
0316   0636 B0            cmp a, b
0317   0637 FD 80         sge ; >=
0318   0639 E4            pop a
0319   063A             ; END RELATIONAL
0320   063A D7            push a
0321   063B 11            mov a, b
0322   063C FA 05 00      lea d, [bp + 5] ; $ch
0323   063F 32            mov bl, [d]
0324   0640 A7 00         mov bh, 0
0325   0642             ; START RELATIONAL
0326   0642 D7            push a
0327   0643 11            mov a, b
0328   0644 26 7A 00      mov b, $7a
0329   0647 B0            cmp a, b
0330   0648 FD 74         sle ; <=
0331   064A E4            pop a
0332   064B             ; END RELATIONAL
0333   064B FD A7         sand a, b ; &&
0334   064D E4            pop a
0335   064E C0 00 00      cmp b, 0
0336   0651 C6 6B 06      je _if3_else
0337   0654             _if3_true:
0338   0654             ;; return ch - 'a' + 'A'; 
0339   0654 FA 05 00      lea d, [bp + 5] ; $ch
0340   0657 32            mov bl, [d]
0341   0658 A7 00         mov bh, 0
0342   065A             ; START TERMS
0343   065A D7            push a
0344   065B 11            mov a, b
0345   065C 26 61 00      mov b, $61
0346   065F 60            sub a, b
0347   0660 26 41 00      mov b, $41
0348   0663 54            add a, b
0349   0664 27            mov b, a
0350   0665 E4            pop a
0351   0666             ; END TERMS
0352   0666 F9            leave
0353   0667 09            ret
0354   0668 0A 73 06      jmp _if3_exit
0355   066B             _if3_else:
0356   066B             ;; return ch; 
0357   066B FA 05 00      lea d, [bp + 5] ; $ch
0358   066E 32            mov bl, [d]
0359   066F A7 00         mov bh, 0
0360   0671 F9            leave
0361   0672 09            ret
0362   0673             _if3_exit:
0363   0673 F9            leave
0364   0674 09            ret
0365   0675             
0366   0675             is_delimiter:
0367   0675 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0368   0678             ;; if( 
0369   0678             _if4_cond:
0370   0678 FA 05 00      lea d, [bp + 5] ; $c
0371   067B 32            mov bl, [d]
0372   067C A7 00         mov bh, 0
0373   067E             ; START RELATIONAL
0374   067E D7            push a
0375   067F 11            mov a, b
0376   0680 26 40 00      mov b, $40
0377   0683 B0            cmp a, b
0378   0684 FD 71         seq ; ==
0379   0686 E4            pop a
0380   0687             ; END RELATIONAL
0381   0687 D7            push a
0382   0688 11            mov a, b
0383   0689 FA 05 00      lea d, [bp + 5] ; $c
0384   068C 32            mov bl, [d]
0385   068D A7 00         mov bh, 0
0386   068F             ; START RELATIONAL
0387   068F D7            push a
0388   0690 11            mov a, b
0389   0691 26 23 00      mov b, $23
0390   0694 B0            cmp a, b
0391   0695 FD 71         seq ; ==
0392   0697 E4            pop a
0393   0698             ; END RELATIONAL
0394   0698 FD A8         sor a, b ; ||
0395   069A 11            mov a, b
0396   069B FA 05 00      lea d, [bp + 5] ; $c
0397   069E 32            mov bl, [d]
0398   069F A7 00         mov bh, 0
0399   06A1             ; START RELATIONAL
0400   06A1 D7            push a
0401   06A2 11            mov a, b
0402   06A3 26 24 00      mov b, $24
0403   06A6 B0            cmp a, b
0404   06A7 FD 71         seq ; ==
0405   06A9 E4            pop a
0406   06AA             ; END RELATIONAL
0407   06AA FD A8         sor a, b ; ||
0408   06AC 11            mov a, b
0409   06AD FA 05 00      lea d, [bp + 5] ; $c
0410   06B0 32            mov bl, [d]
0411   06B1 A7 00         mov bh, 0
0412   06B3             ; START RELATIONAL
0413   06B3 D7            push a
0414   06B4 11            mov a, b
0415   06B5 26 2B 00      mov b, $2b
0416   06B8 B0            cmp a, b
0417   06B9 FD 71         seq ; ==
0418   06BB E4            pop a
0419   06BC             ; END RELATIONAL
0420   06BC FD A8         sor a, b ; ||
0421   06BE 11            mov a, b
0422   06BF FA 05 00      lea d, [bp + 5] ; $c
0423   06C2 32            mov bl, [d]
0424   06C3 A7 00         mov bh, 0
0425   06C5             ; START RELATIONAL
0426   06C5 D7            push a
0427   06C6 11            mov a, b
0428   06C7 26 2D 00      mov b, $2d
0429   06CA B0            cmp a, b
0430   06CB FD 71         seq ; ==
0431   06CD E4            pop a
0432   06CE             ; END RELATIONAL
0433   06CE FD A8         sor a, b ; ||
0434   06D0 11            mov a, b
0435   06D1 FA 05 00      lea d, [bp + 5] ; $c
0436   06D4 32            mov bl, [d]
0437   06D5 A7 00         mov bh, 0
0438   06D7             ; START RELATIONAL
0439   06D7 D7            push a
0440   06D8 11            mov a, b
0441   06D9 26 2A 00      mov b, $2a
0442   06DC B0            cmp a, b
0443   06DD FD 71         seq ; ==
0444   06DF E4            pop a
0445   06E0             ; END RELATIONAL
0446   06E0 FD A8         sor a, b ; ||
0447   06E2 11            mov a, b
0448   06E3 FA 05 00      lea d, [bp + 5] ; $c
0449   06E6 32            mov bl, [d]
0450   06E7 A7 00         mov bh, 0
0451   06E9             ; START RELATIONAL
0452   06E9 D7            push a
0453   06EA 11            mov a, b
0454   06EB 26 2F 00      mov b, $2f
0455   06EE B0            cmp a, b
0456   06EF FD 71         seq ; ==
0457   06F1 E4            pop a
0458   06F2             ; END RELATIONAL
0459   06F2 FD A8         sor a, b ; ||
0460   06F4 11            mov a, b
0461   06F5 FA 05 00      lea d, [bp + 5] ; $c
0462   06F8 32            mov bl, [d]
0463   06F9 A7 00         mov bh, 0
0464   06FB             ; START RELATIONAL
0465   06FB D7            push a
0466   06FC 11            mov a, b
0467   06FD 26 25 00      mov b, $25
0468   0700 B0            cmp a, b
0469   0701 FD 71         seq ; ==
0470   0703 E4            pop a
0471   0704             ; END RELATIONAL
0472   0704 FD A8         sor a, b ; ||
0473   0706 11            mov a, b
0474   0707 FA 05 00      lea d, [bp + 5] ; $c
0475   070A 32            mov bl, [d]
0476   070B A7 00         mov bh, 0
0477   070D             ; START RELATIONAL
0478   070D D7            push a
0479   070E 11            mov a, b
0480   070F 26 5B 00      mov b, $5b
0481   0712 B0            cmp a, b
0482   0713 FD 71         seq ; ==
0483   0715 E4            pop a
0484   0716             ; END RELATIONAL
0485   0716 FD A8         sor a, b ; ||
0486   0718 11            mov a, b
0487   0719 FA 05 00      lea d, [bp + 5] ; $c
0488   071C 32            mov bl, [d]
0489   071D A7 00         mov bh, 0
0490   071F             ; START RELATIONAL
0491   071F D7            push a
0492   0720 11            mov a, b
0493   0721 26 5D 00      mov b, $5d
0494   0724 B0            cmp a, b
0495   0725 FD 71         seq ; ==
0496   0727 E4            pop a
0497   0728             ; END RELATIONAL
0498   0728 FD A8         sor a, b ; ||
0499   072A 11            mov a, b
0500   072B FA 05 00      lea d, [bp + 5] ; $c
0501   072E 32            mov bl, [d]
0502   072F A7 00         mov bh, 0
0503   0731             ; START RELATIONAL
0504   0731 D7            push a
0505   0732 11            mov a, b
0506   0733 26 28 00      mov b, $28
0507   0736 B0            cmp a, b
0508   0737 FD 71         seq ; ==
0509   0739 E4            pop a
0510   073A             ; END RELATIONAL
0511   073A FD A8         sor a, b ; ||
0512   073C 11            mov a, b
0513   073D FA 05 00      lea d, [bp + 5] ; $c
0514   0740 32            mov bl, [d]
0515   0741 A7 00         mov bh, 0
0516   0743             ; START RELATIONAL
0517   0743 D7            push a
0518   0744 11            mov a, b
0519   0745 26 29 00      mov b, $29
0520   0748 B0            cmp a, b
0521   0749 FD 71         seq ; ==
0522   074B E4            pop a
0523   074C             ; END RELATIONAL
0524   074C FD A8         sor a, b ; ||
0525   074E 11            mov a, b
0526   074F FA 05 00      lea d, [bp + 5] ; $c
0527   0752 32            mov bl, [d]
0528   0753 A7 00         mov bh, 0
0529   0755             ; START RELATIONAL
0530   0755 D7            push a
0531   0756 11            mov a, b
0532   0757 26 7B 00      mov b, $7b
0533   075A B0            cmp a, b
0534   075B FD 71         seq ; ==
0535   075D E4            pop a
0536   075E             ; END RELATIONAL
0537   075E FD A8         sor a, b ; ||
0538   0760 11            mov a, b
0539   0761 FA 05 00      lea d, [bp + 5] ; $c
0540   0764 32            mov bl, [d]
0541   0765 A7 00         mov bh, 0
0542   0767             ; START RELATIONAL
0543   0767 D7            push a
0544   0768 11            mov a, b
0545   0769 26 7D 00      mov b, $7d
0546   076C B0            cmp a, b
0547   076D FD 71         seq ; ==
0548   076F E4            pop a
0549   0770             ; END RELATIONAL
0550   0770 FD A8         sor a, b ; ||
0551   0772 11            mov a, b
0552   0773 FA 05 00      lea d, [bp + 5] ; $c
0553   0776 32            mov bl, [d]
0554   0777 A7 00         mov bh, 0
0555   0779             ; START RELATIONAL
0556   0779 D7            push a
0557   077A 11            mov a, b
0558   077B 26 3A 00      mov b, $3a
0559   077E B0            cmp a, b
0560   077F FD 71         seq ; ==
0561   0781 E4            pop a
0562   0782             ; END RELATIONAL
0563   0782 FD A8         sor a, b ; ||
0564   0784 11            mov a, b
0565   0785 FA 05 00      lea d, [bp + 5] ; $c
0566   0788 32            mov bl, [d]
0567   0789 A7 00         mov bh, 0
0568   078B             ; START RELATIONAL
0569   078B D7            push a
0570   078C 11            mov a, b
0571   078D 26 3B 00      mov b, $3b
0572   0790 B0            cmp a, b
0573   0791 FD 71         seq ; ==
0574   0793 E4            pop a
0575   0794             ; END RELATIONAL
0576   0794 FD A8         sor a, b ; ||
0577   0796 11            mov a, b
0578   0797 FA 05 00      lea d, [bp + 5] ; $c
0579   079A 32            mov bl, [d]
0580   079B A7 00         mov bh, 0
0581   079D             ; START RELATIONAL
0582   079D D7            push a
0583   079E 11            mov a, b
0584   079F 26 3C 00      mov b, $3c
0585   07A2 B0            cmp a, b
0586   07A3 FD 71         seq ; ==
0587   07A5 E4            pop a
0588   07A6             ; END RELATIONAL
0589   07A6 FD A8         sor a, b ; ||
0590   07A8 11            mov a, b
0591   07A9 FA 05 00      lea d, [bp + 5] ; $c
0592   07AC 32            mov bl, [d]
0593   07AD A7 00         mov bh, 0
0594   07AF             ; START RELATIONAL
0595   07AF D7            push a
0596   07B0 11            mov a, b
0597   07B1 26 3E 00      mov b, $3e
0598   07B4 B0            cmp a, b
0599   07B5 FD 71         seq ; ==
0600   07B7 E4            pop a
0601   07B8             ; END RELATIONAL
0602   07B8 FD A8         sor a, b ; ||
0603   07BA 11            mov a, b
0604   07BB FA 05 00      lea d, [bp + 5] ; $c
0605   07BE 32            mov bl, [d]
0606   07BF A7 00         mov bh, 0
0607   07C1             ; START RELATIONAL
0608   07C1 D7            push a
0609   07C2 11            mov a, b
0610   07C3 26 3D 00      mov b, $3d
0611   07C6 B0            cmp a, b
0612   07C7 FD 71         seq ; ==
0613   07C9 E4            pop a
0614   07CA             ; END RELATIONAL
0615   07CA FD A8         sor a, b ; ||
0616   07CC 11            mov a, b
0617   07CD FA 05 00      lea d, [bp + 5] ; $c
0618   07D0 32            mov bl, [d]
0619   07D1 A7 00         mov bh, 0
0620   07D3             ; START RELATIONAL
0621   07D3 D7            push a
0622   07D4 11            mov a, b
0623   07D5 26 21 00      mov b, $21
0624   07D8 B0            cmp a, b
0625   07D9 FD 71         seq ; ==
0626   07DB E4            pop a
0627   07DC             ; END RELATIONAL
0628   07DC FD A8         sor a, b ; ||
0629   07DE 11            mov a, b
0630   07DF FA 05 00      lea d, [bp + 5] ; $c
0631   07E2 32            mov bl, [d]
0632   07E3 A7 00         mov bh, 0
0633   07E5             ; START RELATIONAL
0634   07E5 D7            push a
0635   07E6 11            mov a, b
0636   07E7 26 5E 00      mov b, $5e
0637   07EA B0            cmp a, b
0638   07EB FD 71         seq ; ==
0639   07ED E4            pop a
0640   07EE             ; END RELATIONAL
0641   07EE FD A8         sor a, b ; ||
0642   07F0 11            mov a, b
0643   07F1 FA 05 00      lea d, [bp + 5] ; $c
0644   07F4 32            mov bl, [d]
0645   07F5 A7 00         mov bh, 0
0646   07F7             ; START RELATIONAL
0647   07F7 D7            push a
0648   07F8 11            mov a, b
0649   07F9 26 26 00      mov b, $26
0650   07FC B0            cmp a, b
0651   07FD FD 71         seq ; ==
0652   07FF E4            pop a
0653   0800             ; END RELATIONAL
0654   0800 FD A8         sor a, b ; ||
0655   0802 11            mov a, b
0656   0803 FA 05 00      lea d, [bp + 5] ; $c
0657   0806 32            mov bl, [d]
0658   0807 A7 00         mov bh, 0
0659   0809             ; START RELATIONAL
0660   0809 D7            push a
0661   080A 11            mov a, b
0662   080B 26 7C 00      mov b, $7c
0663   080E B0            cmp a, b
0664   080F FD 71         seq ; ==
0665   0811 E4            pop a
0666   0812             ; END RELATIONAL
0667   0812 FD A8         sor a, b ; ||
0668   0814 11            mov a, b
0669   0815 FA 05 00      lea d, [bp + 5] ; $c
0670   0818 32            mov bl, [d]
0671   0819 A7 00         mov bh, 0
0672   081B             ; START RELATIONAL
0673   081B D7            push a
0674   081C 11            mov a, b
0675   081D 26 7E 00      mov b, $7e
0676   0820 B0            cmp a, b
0677   0821 FD 71         seq ; ==
0678   0823 E4            pop a
0679   0824             ; END RELATIONAL
0680   0824 FD A8         sor a, b ; ||
0681   0826 11            mov a, b
0682   0827 FA 05 00      lea d, [bp + 5] ; $c
0683   082A 32            mov bl, [d]
0684   082B A7 00         mov bh, 0
0685   082D             ; START RELATIONAL
0686   082D D7            push a
0687   082E 11            mov a, b
0688   082F 26 2E 00      mov b, $2e
0689   0832 B0            cmp a, b
0690   0833 FD 71         seq ; ==
0691   0835 E4            pop a
0692   0836             ; END RELATIONAL
0693   0836 FD A8         sor a, b ; ||
0694   0838 E4            pop a
0695   0839 C0 00 00      cmp b, 0
0696   083C C6 47 08      je _if4_else
0697   083F             _if4_true:
0698   083F             ;; return 1; 
0699   083F 26 01 00      mov b, $1
0700   0842 F9            leave
0701   0843 09            ret
0702   0844 0A 4C 08      jmp _if4_exit
0703   0847             _if4_else:
0704   0847             ;; return 0; 
0705   0847 26 00 00      mov b, $0
0706   084A F9            leave
0707   084B 09            ret
0708   084C             _if4_exit:
0709   084C F9            leave
0710   084D 09            ret
0711   084E             
0712   084E             strcpy:
0713   084E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0714   0851             ; $psrc 
0715   0851             ; $pdest 
0716   0851 52 04 00      sub sp, 4
0717   0854             ;; psrc = src; 
0718   0854 FA FF FF      lea d, [bp + -1] ; $psrc
0719   0857 DA            push d
0720   0858 FA 05 00      lea d, [bp + 5] ; $src
0721   085B 2A            mov b, [d]
0722   085C E7            pop d
0723   085D FD 43         mov [d], b
0724   085F             ;; pdest = dest; 
0725   085F FA FD FF      lea d, [bp + -3] ; $pdest
0726   0862 DA            push d
0727   0863 FA 07 00      lea d, [bp + 7] ; $dest
0728   0866 2A            mov b, [d]
0729   0867 E7            pop d
0730   0868 FD 43         mov [d], b
0731   086A             ;; while(*psrc) *pdest++ = *psrc++; 
0732   086A             _while5_cond:
0733   086A FA FF FF      lea d, [bp + -1] ; $psrc
0734   086D 2A            mov b, [d]
0735   086E 74            mov d, b
0736   086F 32            mov bl, [d]
0737   0870 A7 00         mov bh, 0
0738   0872 C0 00 00      cmp b, 0
0739   0875 C6 A1 08      je _while5_exit
0740   0878             _while5_block:
0741   0878             ;; *pdest++ = *psrc++; 
0742   0878 FA FD FF      lea d, [bp + -3] ; $pdest
0743   087B 2A            mov b, [d]
0744   087C FD 79         mov g, b
0745   087E FD 77         inc b
0746   0880 FA FD FF      lea d, [bp + -3] ; $pdest
0747   0883 FD 43         mov [d], b
0748   0885 FD 27         mov b, g
0749   0887 D8            push b
0750   0888 FA FF FF      lea d, [bp + -1] ; $psrc
0751   088B 2A            mov b, [d]
0752   088C FD 79         mov g, b
0753   088E FD 77         inc b
0754   0890 FA FF FF      lea d, [bp + -1] ; $psrc
0755   0893 FD 43         mov [d], b
0756   0895 FD 27         mov b, g
0757   0897 74            mov d, b
0758   0898 32            mov bl, [d]
0759   0899 A7 00         mov bh, 0
0760   089B E7            pop d
0761   089C FD 3E         mov [d], bl
0762   089E 0A 6A 08      jmp _while5_cond
0763   08A1             _while5_exit:
0764   08A1             ;; *pdest = '\0'; 
0765   08A1 FA FD FF      lea d, [bp + -3] ; $pdest
0766   08A4 2A            mov b, [d]
0767   08A5 D8            push b
0768   08A6 26 00 00      mov b, $0
0769   08A9 E7            pop d
0770   08AA FD 3E         mov [d], bl
0771   08AC F9            leave
0772   08AD 09            ret
0773   08AE             
0774   08AE             strcmp:
0775   08AE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0776   08B1             ;; while (*s1 && (*s1 == *s2)) { 
0777   08B1             _while6_cond:
0778   08B1 FA 07 00      lea d, [bp + 7] ; $s1
0779   08B4 2A            mov b, [d]
0780   08B5 74            mov d, b
0781   08B6 32            mov bl, [d]
0782   08B7 A7 00         mov bh, 0
0783   08B9 D7            push a
0784   08BA 11            mov a, b
0785   08BB FA 07 00      lea d, [bp + 7] ; $s1
0786   08BE 2A            mov b, [d]
0787   08BF 74            mov d, b
0788   08C0 32            mov bl, [d]
0789   08C1 A7 00         mov bh, 0
0790   08C3             ; START RELATIONAL
0791   08C3 D7            push a
0792   08C4 11            mov a, b
0793   08C5 FA 05 00      lea d, [bp + 5] ; $s2
0794   08C8 2A            mov b, [d]
0795   08C9 74            mov d, b
0796   08CA 32            mov bl, [d]
0797   08CB A7 00         mov bh, 0
0798   08CD B0            cmp a, b
0799   08CE FD 71         seq ; ==
0800   08D0 E4            pop a
0801   08D1             ; END RELATIONAL
0802   08D1 FD A7         sand a, b ; &&
0803   08D3 E4            pop a
0804   08D4 C0 00 00      cmp b, 0
0805   08D7 C6 FB 08      je _while6_exit
0806   08DA             _while6_block:
0807   08DA             ;; s1++; 
0808   08DA FA 07 00      lea d, [bp + 7] ; $s1
0809   08DD 2A            mov b, [d]
0810   08DE FD 79         mov g, b
0811   08E0 FD 77         inc b
0812   08E2 FA 07 00      lea d, [bp + 7] ; $s1
0813   08E5 FD 43         mov [d], b
0814   08E7 FD 27         mov b, g
0815   08E9             ;; s2++; 
0816   08E9 FA 05 00      lea d, [bp + 5] ; $s2
0817   08EC 2A            mov b, [d]
0818   08ED FD 79         mov g, b
0819   08EF FD 77         inc b
0820   08F1 FA 05 00      lea d, [bp + 5] ; $s2
0821   08F4 FD 43         mov [d], b
0822   08F6 FD 27         mov b, g
0823   08F8 0A B1 08      jmp _while6_cond
0824   08FB             _while6_exit:
0825   08FB             ;; return *s1 - *s2; 
0826   08FB FA 07 00      lea d, [bp + 7] ; $s1
0827   08FE 2A            mov b, [d]
0828   08FF 74            mov d, b
0829   0900 32            mov bl, [d]
0830   0901 A7 00         mov bh, 0
0831   0903             ; START TERMS
0832   0903 D7            push a
0833   0904 11            mov a, b
0834   0905 FA 05 00      lea d, [bp + 5] ; $s2
0835   0908 2A            mov b, [d]
0836   0909 74            mov d, b
0837   090A 32            mov bl, [d]
0838   090B A7 00         mov bh, 0
0839   090D 60            sub a, b
0840   090E 27            mov b, a
0841   090F E4            pop a
0842   0910             ; END TERMS
0843   0910 F9            leave
0844   0911 09            ret
0845   0912             
0846   0912             strcat:
0847   0912 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0848   0915             ; $dest_len 
0849   0915             ; $i 
0850   0915 52 04 00      sub sp, 4
0851   0918             ;; dest_len = strlen(dest); 
0852   0918 FA FF FF      lea d, [bp + -1] ; $dest_len
0853   091B DA            push d
0854   091C FA 07 00      lea d, [bp + 7] ; $dest
0855   091F 2A            mov b, [d]
0856   0920 FD AB         swp b
0857   0922 D8            push b
0858   0923 07 C8 09      call strlen
0859   0926 51 02 00      add sp, 2
0860   0929 E7            pop d
0861   092A FD 43         mov [d], b
0862   092C             ;; for (i = 0; src[i] != 0; i=i+1) { 
0863   092C             _for7_init:
0864   092C FA FD FF      lea d, [bp + -3] ; $i
0865   092F DA            push d
0866   0930 26 00 00      mov b, $0
0867   0933 E7            pop d
0868   0934 FD 43         mov [d], b
0869   0936             _for7_cond:
0870   0936 FA 05 00      lea d, [bp + 5] ; $src
0871   0939 FD 2A         mov d, [d]
0872   093B D7            push a
0873   093C DA            push d
0874   093D FA FD FF      lea d, [bp + -3] ; $i
0875   0940 2A            mov b, [d]
0876   0941 E7            pop d
0877   0942 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0878   0946 E4            pop a
0879   0947 32            mov bl, [d]
0880   0948 A7 00         mov bh, 0
0881   094A             ; START RELATIONAL
0882   094A D7            push a
0883   094B 11            mov a, b
0884   094C 26 00 00      mov b, $0
0885   094F B0            cmp a, b
0886   0950 FD 72         sneq ; !=
0887   0952 E4            pop a
0888   0953             ; END RELATIONAL
0889   0953 C0 00 00      cmp b, 0
0890   0956 C6 A1 09      je _for7_exit
0891   0959             _for7_block:
0892   0959             ;; dest[dest_len + i] = src[i]; 
0893   0959 FA 07 00      lea d, [bp + 7] ; $dest
0894   095C FD 2A         mov d, [d]
0895   095E D7            push a
0896   095F DA            push d
0897   0960 FA FF FF      lea d, [bp + -1] ; $dest_len
0898   0963 2A            mov b, [d]
0899   0964             ; START TERMS
0900   0964 D7            push a
0901   0965 11            mov a, b
0902   0966 FA FD FF      lea d, [bp + -3] ; $i
0903   0969 2A            mov b, [d]
0904   096A 54            add a, b
0905   096B 27            mov b, a
0906   096C E4            pop a
0907   096D             ; END TERMS
0908   096D E7            pop d
0909   096E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0910   0972 E4            pop a
0911   0973 DA            push d
0912   0974 FA 05 00      lea d, [bp + 5] ; $src
0913   0977 FD 2A         mov d, [d]
0914   0979 D7            push a
0915   097A DA            push d
0916   097B FA FD FF      lea d, [bp + -3] ; $i
0917   097E 2A            mov b, [d]
0918   097F E7            pop d
0919   0980 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0920   0984 E4            pop a
0921   0985 32            mov bl, [d]
0922   0986 A7 00         mov bh, 0
0923   0988 E7            pop d
0924   0989 FD 3E         mov [d], bl
0925   098B             _for7_update:
0926   098B FA FD FF      lea d, [bp + -3] ; $i
0927   098E DA            push d
0928   098F FA FD FF      lea d, [bp + -3] ; $i
0929   0992 2A            mov b, [d]
0930   0993             ; START TERMS
0931   0993 D7            push a
0932   0994 11            mov a, b
0933   0995 26 01 00      mov b, $1
0934   0998 54            add a, b
0935   0999 27            mov b, a
0936   099A E4            pop a
0937   099B             ; END TERMS
0938   099B E7            pop d
0939   099C FD 43         mov [d], b
0940   099E 0A 36 09      jmp _for7_cond
0941   09A1             _for7_exit:
0942   09A1             ;; dest[dest_len + i] = 0; 
0943   09A1 FA 07 00      lea d, [bp + 7] ; $dest
0944   09A4 FD 2A         mov d, [d]
0945   09A6 D7            push a
0946   09A7 DA            push d
0947   09A8 FA FF FF      lea d, [bp + -1] ; $dest_len
0948   09AB 2A            mov b, [d]
0949   09AC             ; START TERMS
0950   09AC D7            push a
0951   09AD 11            mov a, b
0952   09AE FA FD FF      lea d, [bp + -3] ; $i
0953   09B1 2A            mov b, [d]
0954   09B2 54            add a, b
0955   09B3 27            mov b, a
0956   09B4 E4            pop a
0957   09B5             ; END TERMS
0958   09B5 E7            pop d
0959   09B6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0960   09BA E4            pop a
0961   09BB DA            push d
0962   09BC 26 00 00      mov b, $0
0963   09BF E7            pop d
0964   09C0 FD 3E         mov [d], bl
0965   09C2             ;; return dest; 
0966   09C2 FA 07 00      lea d, [bp + 7] ; $dest
0967   09C5 2A            mov b, [d]
0968   09C6 F9            leave
0969   09C7 09            ret
0970   09C8             
0971   09C8             strlen:
0972   09C8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0973   09CB             ; $length 
0974   09CB 52 02 00      sub sp, 2
0975   09CE             ;; length = 0; 
0976   09CE FA FF FF      lea d, [bp + -1] ; $length
0977   09D1 DA            push d
0978   09D2 26 00 00      mov b, $0
0979   09D5 E7            pop d
0980   09D6 FD 43         mov [d], b
0981   09D8             ;; while (str[length] != 0) { 
0982   09D8             _while8_cond:
0983   09D8 FA 05 00      lea d, [bp + 5] ; $str
0984   09DB FD 2A         mov d, [d]
0985   09DD D7            push a
0986   09DE DA            push d
0987   09DF FA FF FF      lea d, [bp + -1] ; $length
0988   09E2 2A            mov b, [d]
0989   09E3 E7            pop d
0990   09E4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0991   09E8 E4            pop a
0992   09E9 32            mov bl, [d]
0993   09EA A7 00         mov bh, 0
0994   09EC             ; START RELATIONAL
0995   09EC D7            push a
0996   09ED 11            mov a, b
0997   09EE 26 00 00      mov b, $0
0998   09F1 B0            cmp a, b
0999   09F2 FD 72         sneq ; !=
1000   09F4 E4            pop a
1001   09F5             ; END RELATIONAL
1002   09F5 C0 00 00      cmp b, 0
1003   09F8 C6 0D 0A      je _while8_exit
1004   09FB             _while8_block:
1005   09FB             ;; length++; 
1006   09FB FA FF FF      lea d, [bp + -1] ; $length
1007   09FE 2A            mov b, [d]
1008   09FF FD 79         mov g, b
1009   0A01 FD 77         inc b
1010   0A03 FA FF FF      lea d, [bp + -1] ; $length
1011   0A06 FD 43         mov [d], b
1012   0A08 FD 27         mov b, g
1013   0A0A 0A D8 09      jmp _while8_cond
1014   0A0D             _while8_exit:
1015   0A0D             ;; return length; 
1016   0A0D FA FF FF      lea d, [bp + -1] ; $length
1017   0A10 2A            mov b, [d]
1018   0A11 F9            leave
1019   0A12 09            ret
1020   0A13             
1021   0A13             va_arg:
1022   0A13 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1023   0A16             ; $val 
1024   0A16 52 02 00      sub sp, 2
1025   0A19             ;; if(size == 1){ 
1026   0A19             _if9_cond:
1027   0A19 FA 05 00      lea d, [bp + 5] ; $size
1028   0A1C 2A            mov b, [d]
1029   0A1D             ; START RELATIONAL
1030   0A1D D7            push a
1031   0A1E 11            mov a, b
1032   0A1F 26 01 00      mov b, $1
1033   0A22 B0            cmp a, b
1034   0A23 FD 71         seq ; ==
1035   0A25 E4            pop a
1036   0A26             ; END RELATIONAL
1037   0A26 C0 00 00      cmp b, 0
1038   0A29 C6 45 0A      je _if9_else
1039   0A2C             _if9_true:
1040   0A2C             ;; val = *(char*)arg->p; 
1041   0A2C FA FF FF      lea d, [bp + -1] ; $val
1042   0A2F DA            push d
1043   0A30 FA 07 00      lea d, [bp + 7] ; $arg
1044   0A33 FD 2A         mov d, [d]
1045   0A35 58 00 00      add d, 0
1046   0A38 FD 14         clb
1047   0A3A 2A            mov b, [d]
1048   0A3B 74            mov d, b
1049   0A3C 32            mov bl, [d]
1050   0A3D A7 00         mov bh, 0
1051   0A3F E7            pop d
1052   0A40 FD 43         mov [d], b
1053   0A42 0A 7B 0A      jmp _if9_exit
1054   0A45             _if9_else:
1055   0A45             ;; if(size == 2){ 
1056   0A45             _if10_cond:
1057   0A45 FA 05 00      lea d, [bp + 5] ; $size
1058   0A48 2A            mov b, [d]
1059   0A49             ; START RELATIONAL
1060   0A49 D7            push a
1061   0A4A 11            mov a, b
1062   0A4B 26 02 00      mov b, $2
1063   0A4E B0            cmp a, b
1064   0A4F FD 71         seq ; ==
1065   0A51 E4            pop a
1066   0A52             ; END RELATIONAL
1067   0A52 C0 00 00      cmp b, 0
1068   0A55 C6 6F 0A      je _if10_else
1069   0A58             _if10_true:
1070   0A58             ;; val = *(int*)arg->p; 
1071   0A58 FA FF FF      lea d, [bp + -1] ; $val
1072   0A5B DA            push d
1073   0A5C FA 07 00      lea d, [bp + 7] ; $arg
1074   0A5F FD 2A         mov d, [d]
1075   0A61 58 00 00      add d, 0
1076   0A64 FD 14         clb
1077   0A66 2A            mov b, [d]
1078   0A67 74            mov d, b
1079   0A68 2A            mov b, [d]
1080   0A69 E7            pop d
1081   0A6A FD 43         mov [d], b
1082   0A6C 0A 7B 0A      jmp _if10_exit
1083   0A6F             _if10_else:
1084   0A6F             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
1085   0A6F 26 84 2B      mov b, __s1 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
1086   0A72 FD AB         swp b
1087   0A74 D8            push b
1088   0A75 07 DD 10      call print
1089   0A78 51 02 00      add sp, 2
1090   0A7B             _if10_exit:
1091   0A7B             _if9_exit:
1092   0A7B             ;; arg->p = arg->p + size; 
1093   0A7B FA 07 00      lea d, [bp + 7] ; $arg
1094   0A7E FD 2A         mov d, [d]
1095   0A80 58 00 00      add d, 0
1096   0A83 FD 14         clb
1097   0A85 DA            push d
1098   0A86 FA 07 00      lea d, [bp + 7] ; $arg
1099   0A89 FD 2A         mov d, [d]
1100   0A8B 58 00 00      add d, 0
1101   0A8E FD 14         clb
1102   0A90 2A            mov b, [d]
1103   0A91             ; START TERMS
1104   0A91 D7            push a
1105   0A92 11            mov a, b
1106   0A93 FA 05 00      lea d, [bp + 5] ; $size
1107   0A96 2A            mov b, [d]
1108   0A97 54            add a, b
1109   0A98 27            mov b, a
1110   0A99 E4            pop a
1111   0A9A             ; END TERMS
1112   0A9A E7            pop d
1113   0A9B FD 43         mov [d], b
1114   0A9D             ;; return val; 
1115   0A9D FA FF FF      lea d, [bp + -1] ; $val
1116   0AA0 2A            mov b, [d]
1117   0AA1 F9            leave
1118   0AA2 09            ret
1119   0AA3             
1120   0AA3             printf:
1121   0AA3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1122   0AA6             ; $p 
1123   0AA6             ; $fp 
1124   0AA6             ; $i 
1125   0AA6 52 06 00      sub sp, 6
1126   0AA9             ;; fp = format; 
1127   0AA9 FA FD FF      lea d, [bp + -3] ; $fp
1128   0AAC DA            push d
1129   0AAD FA 05 00      lea d, [bp + 5] ; $format
1130   0AB0 2A            mov b, [d]
1131   0AB1 E7            pop d
1132   0AB2 FD 43         mov [d], b
1133   0AB4             ;; p = &format; 
1134   0AB4 FA FF FF      lea d, [bp + -1] ; $p
1135   0AB7 DA            push d
1136   0AB8 FA 05 00      lea d, [bp + 5] ; $format
1137   0ABB 2D            mov b, d
1138   0ABC E7            pop d
1139   0ABD FD 43         mov [d], b
1140   0ABF             ;; for(;;){ 
1141   0ABF             _for11_init:
1142   0ABF             _for11_cond:
1143   0ABF             _for11_block:
1144   0ABF             ;; if(!*fp) break; 
1145   0ABF             _if12_cond:
1146   0ABF FA FD FF      lea d, [bp + -3] ; $fp
1147   0AC2 2A            mov b, [d]
1148   0AC3 74            mov d, b
1149   0AC4 32            mov bl, [d]
1150   0AC5 A7 00         mov bh, 0
1151   0AC7 C0 00 00      cmp b, 0
1152   0ACA FD 71         seq ; !
1153   0ACC C0 00 00      cmp b, 0
1154   0ACF C6 D8 0A      je _if12_exit
1155   0AD2             _if12_true:
1156   0AD2             ;; break; 
1157   0AD2 0A 22 0C      jmp _for11_exit ; for break
1158   0AD5 0A D8 0A      jmp _if12_exit
1159   0AD8             _if12_exit:
1160   0AD8             ;; if(*fp == '%'){ 
1161   0AD8             _if13_cond:
1162   0AD8 FA FD FF      lea d, [bp + -3] ; $fp
1163   0ADB 2A            mov b, [d]
1164   0ADC 74            mov d, b
1165   0ADD 32            mov bl, [d]
1166   0ADE A7 00         mov bh, 0
1167   0AE0             ; START RELATIONAL
1168   0AE0 D7            push a
1169   0AE1 11            mov a, b
1170   0AE2 26 25 00      mov b, $25
1171   0AE5 B0            cmp a, b
1172   0AE6 FD 71         seq ; ==
1173   0AE8 E4            pop a
1174   0AE9             ; END RELATIONAL
1175   0AE9 C0 00 00      cmp b, 0
1176   0AEC C6 01 0C      je _if13_else
1177   0AEF             _if13_true:
1178   0AEF             ;; fp++; 
1179   0AEF FA FD FF      lea d, [bp + -3] ; $fp
1180   0AF2 2A            mov b, [d]
1181   0AF3 FD 79         mov g, b
1182   0AF5 FD 77         inc b
1183   0AF7 FA FD FF      lea d, [bp + -3] ; $fp
1184   0AFA FD 43         mov [d], b
1185   0AFC FD 27         mov b, g
1186   0AFE             ;; switch(*fp){ 
1187   0AFE             _switch14_expr:
1188   0AFE FA FD FF      lea d, [bp + -3] ; $fp
1189   0B01 2A            mov b, [d]
1190   0B02 74            mov d, b
1191   0B03 32            mov bl, [d]
1192   0B04 A7 00         mov bh, 0
1193   0B06             _switch14_comparisons:
1194   0B06 C1 64         cmp bl, $64
1195   0B08 C6 2A 0B      je _switch14_case0
1196   0B0B C1 69         cmp bl, $69
1197   0B0D C6 2A 0B      je _switch14_case1
1198   0B10 C1 75         cmp bl, $75
1199   0B12 C6 4F 0B      je _switch14_case2
1200   0B15 C1 78         cmp bl, $78
1201   0B17 C6 74 0B      je _switch14_case3
1202   0B1A C1 63         cmp bl, $63
1203   0B1C C6 99 0B      je _switch14_case4
1204   0B1F C1 73         cmp bl, $73
1205   0B21 C6 BE 0B      je _switch14_case5
1206   0B24 0A E3 0B      jmp _switch14_default
1207   0B27 0A EF 0B      jmp _switch14_exit
1208   0B2A             _switch14_case0:
1209   0B2A             _switch14_case1:
1210   0B2A             ;; p = p - 2; 
1211   0B2A FA FF FF      lea d, [bp + -1] ; $p
1212   0B2D DA            push d
1213   0B2E FA FF FF      lea d, [bp + -1] ; $p
1214   0B31 2A            mov b, [d]
1215   0B32             ; START TERMS
1216   0B32 D7            push a
1217   0B33 11            mov a, b
1218   0B34 26 02 00      mov b, $2
1219   0B37 60            sub a, b
1220   0B38 27            mov b, a
1221   0B39 E4            pop a
1222   0B3A             ; END TERMS
1223   0B3A E7            pop d
1224   0B3B FD 43         mov [d], b
1225   0B3D             ;; prints(*(int*)p); 
1226   0B3D FA FF FF      lea d, [bp + -1] ; $p
1227   0B40 2A            mov b, [d]
1228   0B41 74            mov d, b
1229   0B42 2A            mov b, [d]
1230   0B43 FD AB         swp b
1231   0B45 D8            push b
1232   0B46 07 B4 0E      call prints
1233   0B49 51 02 00      add sp, 2
1234   0B4C             ;; break; 
1235   0B4C 0A EF 0B      jmp _switch14_exit ; case break
1236   0B4F             _switch14_case2:
1237   0B4F             ;; p = p - 2; 
1238   0B4F FA FF FF      lea d, [bp + -1] ; $p
1239   0B52 DA            push d
1240   0B53 FA FF FF      lea d, [bp + -1] ; $p
1241   0B56 2A            mov b, [d]
1242   0B57             ; START TERMS
1243   0B57 D7            push a
1244   0B58 11            mov a, b
1245   0B59 26 02 00      mov b, $2
1246   0B5C 60            sub a, b
1247   0B5D 27            mov b, a
1248   0B5E E4            pop a
1249   0B5F             ; END TERMS
1250   0B5F E7            pop d
1251   0B60 FD 43         mov [d], b
1252   0B62             ;; printu(*(unsigned int*)p); 
1253   0B62 FA FF FF      lea d, [bp + -1] ; $p
1254   0B65 2A            mov b, [d]
1255   0B66 74            mov d, b
1256   0B67 2A            mov b, [d]
1257   0B68 FD AB         swp b
1258   0B6A D8            push b
1259   0B6B 07 A9 0F      call printu
1260   0B6E 51 02 00      add sp, 2
1261   0B71             ;; break; 
1262   0B71 0A EF 0B      jmp _switch14_exit ; case break
1263   0B74             _switch14_case3:
1264   0B74             ;; p = p - 2; 
1265   0B74 FA FF FF      lea d, [bp + -1] ; $p
1266   0B77 DA            push d
1267   0B78 FA FF FF      lea d, [bp + -1] ; $p
1268   0B7B 2A            mov b, [d]
1269   0B7C             ; START TERMS
1270   0B7C D7            push a
1271   0B7D 11            mov a, b
1272   0B7E 26 02 00      mov b, $2
1273   0B81 60            sub a, b
1274   0B82 27            mov b, a
1275   0B83 E4            pop a
1276   0B84             ; END TERMS
1277   0B84 E7            pop d
1278   0B85 FD 43         mov [d], b
1279   0B87             ;; printx16(*(unsigned int*)p); 
1280   0B87 FA FF FF      lea d, [bp + -1] ; $p
1281   0B8A 2A            mov b, [d]
1282   0B8B 74            mov d, b
1283   0B8C 2A            mov b, [d]
1284   0B8D FD AB         swp b
1285   0B8F D8            push b
1286   0B90 07 24 0C      call printx16
1287   0B93 51 02 00      add sp, 2
1288   0B96             ;; break; 
1289   0B96 0A EF 0B      jmp _switch14_exit ; case break
1290   0B99             _switch14_case4:
1291   0B99             ;; p = p - 2; 
1292   0B99 FA FF FF      lea d, [bp + -1] ; $p
1293   0B9C DA            push d
1294   0B9D FA FF FF      lea d, [bp + -1] ; $p
1295   0BA0 2A            mov b, [d]
1296   0BA1             ; START TERMS
1297   0BA1 D7            push a
1298   0BA2 11            mov a, b
1299   0BA3 26 02 00      mov b, $2
1300   0BA6 60            sub a, b
1301   0BA7 27            mov b, a
1302   0BA8 E4            pop a
1303   0BA9             ; END TERMS
1304   0BA9 E7            pop d
1305   0BAA FD 43         mov [d], b
1306   0BAC             ;; putchar(*(char*)p); 
1307   0BAC FA FF FF      lea d, [bp + -1] ; $p
1308   0BAF 2A            mov b, [d]
1309   0BB0 74            mov d, b
1310   0BB1 32            mov bl, [d]
1311   0BB2 A7 00         mov bh, 0
1312   0BB4 DD            push bl
1313   0BB5 07 95 10      call putchar
1314   0BB8 51 01 00      add sp, 1
1315   0BBB             ;; break; 
1316   0BBB 0A EF 0B      jmp _switch14_exit ; case break
1317   0BBE             _switch14_case5:
1318   0BBE             ;; p = p - 2; 
1319   0BBE FA FF FF      lea d, [bp + -1] ; $p
1320   0BC1 DA            push d
1321   0BC2 FA FF FF      lea d, [bp + -1] ; $p
1322   0BC5 2A            mov b, [d]
1323   0BC6             ; START TERMS
1324   0BC6 D7            push a
1325   0BC7 11            mov a, b
1326   0BC8 26 02 00      mov b, $2
1327   0BCB 60            sub a, b
1328   0BCC 27            mov b, a
1329   0BCD E4            pop a
1330   0BCE             ; END TERMS
1331   0BCE E7            pop d
1332   0BCF FD 43         mov [d], b
1333   0BD1             ;; print(*(char**)p); 
1334   0BD1 FA FF FF      lea d, [bp + -1] ; $p
1335   0BD4 2A            mov b, [d]
1336   0BD5 74            mov d, b
1337   0BD6 2A            mov b, [d]
1338   0BD7 FD AB         swp b
1339   0BD9 D8            push b
1340   0BDA 07 DD 10      call print
1341   0BDD 51 02 00      add sp, 2
1342   0BE0             ;; break; 
1343   0BE0 0A EF 0B      jmp _switch14_exit ; case break
1344   0BE3             _switch14_default:
1345   0BE3             ;; print("Error: Unknown argument type.\n"); 
1346   0BE3 26 C8 2B      mov b, __s2 ; "Error: Unknown argument type.\n"
1347   0BE6 FD AB         swp b
1348   0BE8 D8            push b
1349   0BE9 07 DD 10      call print
1350   0BEC 51 02 00      add sp, 2
1351   0BEF             _switch14_exit:
1352   0BEF             ;; fp++; 
1353   0BEF FA FD FF      lea d, [bp + -3] ; $fp
1354   0BF2 2A            mov b, [d]
1355   0BF3 FD 79         mov g, b
1356   0BF5 FD 77         inc b
1357   0BF7 FA FD FF      lea d, [bp + -3] ; $fp
1358   0BFA FD 43         mov [d], b
1359   0BFC FD 27         mov b, g
1360   0BFE 0A 1F 0C      jmp _if13_exit
1361   0C01             _if13_else:
1362   0C01             ;; putchar(*fp); 
1363   0C01 FA FD FF      lea d, [bp + -3] ; $fp
1364   0C04 2A            mov b, [d]
1365   0C05 74            mov d, b
1366   0C06 32            mov bl, [d]
1367   0C07 A7 00         mov bh, 0
1368   0C09 DD            push bl
1369   0C0A 07 95 10      call putchar
1370   0C0D 51 01 00      add sp, 1
1371   0C10             ;; fp++; 
1372   0C10 FA FD FF      lea d, [bp + -3] ; $fp
1373   0C13 2A            mov b, [d]
1374   0C14 FD 79         mov g, b
1375   0C16 FD 77         inc b
1376   0C18 FA FD FF      lea d, [bp + -3] ; $fp
1377   0C1B FD 43         mov [d], b
1378   0C1D FD 27         mov b, g
1379   0C1F             _if13_exit:
1380   0C1F             _for11_update:
1381   0C1F 0A BF 0A      jmp _for11_cond
1382   0C22             _for11_exit:
1383   0C22 F9            leave
1384   0C23 09            ret
1385   0C24             
1386   0C24             printx16:
1387   0C24 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1388   0C27             
1389   0C27             ; --- BEGIN INLINE ASM BLOCK
1390   0C27 FA 05 00      lea d, [bp + 5] ; $hex
1391   0C2A 2A            mov b, [d]
1392   0C2B 07 5E 14      call print_u16x
1393   0C2E             ; --- END INLINE ASM BLOCK
1394   0C2E             
1395   0C2E F9            leave
1396   0C2F 09            ret
1397   0C30             
1398   0C30             printx8:
1399   0C30 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1400   0C33             
1401   0C33             ; --- BEGIN INLINE ASM BLOCK
1402   0C33 FA 05 00      lea d, [bp + 5] ; $hex
1403   0C36 32            mov bl, [d]
1404   0C37 07 A2 14      call print_u8x
1405   0C3A             ; --- END INLINE ASM BLOCK
1406   0C3A             
1407   0C3A F9            leave
1408   0C3B 09            ret
1409   0C3C             
1410   0C3C             hex_to_int:
1411   0C3C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1412   0C3F             ; $value 
1413   0C3F 10 00 00      mov a, $0
1414   0C42 45 FF FF      mov [bp + -1], a
1415   0C45             ; $i 
1416   0C45             ; $hex_char 
1417   0C45             ; $len 
1418   0C45 52 07 00      sub sp, 7
1419   0C48             ;; len = strlen(hex_string); 
1420   0C48 FA FA FF      lea d, [bp + -6] ; $len
1421   0C4B DA            push d
1422   0C4C FA 05 00      lea d, [bp + 5] ; $hex_string
1423   0C4F 2A            mov b, [d]
1424   0C50 FD AB         swp b
1425   0C52 D8            push b
1426   0C53 07 C8 09      call strlen
1427   0C56 51 02 00      add sp, 2
1428   0C59 E7            pop d
1429   0C5A FD 43         mov [d], b
1430   0C5C             ;; for (i = 0; i < len; i++) { 
1431   0C5C             _for15_init:
1432   0C5C FA FD FF      lea d, [bp + -3] ; $i
1433   0C5F DA            push d
1434   0C60 26 00 00      mov b, $0
1435   0C63 E7            pop d
1436   0C64 FD 43         mov [d], b
1437   0C66             _for15_cond:
1438   0C66 FA FD FF      lea d, [bp + -3] ; $i
1439   0C69 2A            mov b, [d]
1440   0C6A             ; START RELATIONAL
1441   0C6A D7            push a
1442   0C6B 11            mov a, b
1443   0C6C FA FA FF      lea d, [bp + -6] ; $len
1444   0C6F 2A            mov b, [d]
1445   0C70 B0            cmp a, b
1446   0C71 FD 73         slt ; < 
1447   0C73 E4            pop a
1448   0C74             ; END RELATIONAL
1449   0C74 C0 00 00      cmp b, 0
1450   0C77 C6 7C 0D      je _for15_exit
1451   0C7A             _for15_block:
1452   0C7A             ;; hex_char = hex_string[i]; 
1453   0C7A FA FC FF      lea d, [bp + -4] ; $hex_char
1454   0C7D DA            push d
1455   0C7E FA 05 00      lea d, [bp + 5] ; $hex_string
1456   0C81 FD 2A         mov d, [d]
1457   0C83 D7            push a
1458   0C84 DA            push d
1459   0C85 FA FD FF      lea d, [bp + -3] ; $i
1460   0C88 2A            mov b, [d]
1461   0C89 E7            pop d
1462   0C8A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1463   0C8E E4            pop a
1464   0C8F 32            mov bl, [d]
1465   0C90 A7 00         mov bh, 0
1466   0C92 E7            pop d
1467   0C93 FD 3E         mov [d], bl
1468   0C95             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1469   0C95             _if16_cond:
1470   0C95 FA FC FF      lea d, [bp + -4] ; $hex_char
1471   0C98 32            mov bl, [d]
1472   0C99 A7 00         mov bh, 0
1473   0C9B             ; START RELATIONAL
1474   0C9B D7            push a
1475   0C9C 11            mov a, b
1476   0C9D 26 61 00      mov b, $61
1477   0CA0 B0            cmp a, b
1478   0CA1 FD 80         sge ; >=
1479   0CA3 E4            pop a
1480   0CA4             ; END RELATIONAL
1481   0CA4 D7            push a
1482   0CA5 11            mov a, b
1483   0CA6 FA FC FF      lea d, [bp + -4] ; $hex_char
1484   0CA9 32            mov bl, [d]
1485   0CAA A7 00         mov bh, 0
1486   0CAC             ; START RELATIONAL
1487   0CAC D7            push a
1488   0CAD 11            mov a, b
1489   0CAE 26 66 00      mov b, $66
1490   0CB1 B0            cmp a, b
1491   0CB2 FD 74         sle ; <=
1492   0CB4 E4            pop a
1493   0CB5             ; END RELATIONAL
1494   0CB5 FD A7         sand a, b ; &&
1495   0CB7 E4            pop a
1496   0CB8 C0 00 00      cmp b, 0
1497   0CBB C6 EC 0C      je _if16_else
1498   0CBE             _if16_true:
1499   0CBE             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1500   0CBE FA FF FF      lea d, [bp + -1] ; $value
1501   0CC1 DA            push d
1502   0CC2 FA FF FF      lea d, [bp + -1] ; $value
1503   0CC5 2A            mov b, [d]
1504   0CC6             ; START FACTORS
1505   0CC6 D7            push a
1506   0CC7 11            mov a, b
1507   0CC8 26 10 00      mov b, $10
1508   0CCB AC            mul a, b ; *
1509   0CCC 11            mov a, b
1510   0CCD 27            mov b, a
1511   0CCE E4            pop a
1512   0CCF             ; END FACTORS
1513   0CCF             ; START TERMS
1514   0CCF D7            push a
1515   0CD0 11            mov a, b
1516   0CD1 FA FC FF      lea d, [bp + -4] ; $hex_char
1517   0CD4 32            mov bl, [d]
1518   0CD5 A7 00         mov bh, 0
1519   0CD7             ; START TERMS
1520   0CD7 D7            push a
1521   0CD8 11            mov a, b
1522   0CD9 26 61 00      mov b, $61
1523   0CDC 60            sub a, b
1524   0CDD 26 0A 00      mov b, $a
1525   0CE0 54            add a, b
1526   0CE1 27            mov b, a
1527   0CE2 E4            pop a
1528   0CE3             ; END TERMS
1529   0CE3 54            add a, b
1530   0CE4 27            mov b, a
1531   0CE5 E4            pop a
1532   0CE6             ; END TERMS
1533   0CE6 E7            pop d
1534   0CE7 FD 43         mov [d], b
1535   0CE9 0A 6A 0D      jmp _if16_exit
1536   0CEC             _if16_else:
1537   0CEC             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1538   0CEC             _if17_cond:
1539   0CEC FA FC FF      lea d, [bp + -4] ; $hex_char
1540   0CEF 32            mov bl, [d]
1541   0CF0 A7 00         mov bh, 0
1542   0CF2             ; START RELATIONAL
1543   0CF2 D7            push a
1544   0CF3 11            mov a, b
1545   0CF4 26 41 00      mov b, $41
1546   0CF7 B0            cmp a, b
1547   0CF8 FD 80         sge ; >=
1548   0CFA E4            pop a
1549   0CFB             ; END RELATIONAL
1550   0CFB D7            push a
1551   0CFC 11            mov a, b
1552   0CFD FA FC FF      lea d, [bp + -4] ; $hex_char
1553   0D00 32            mov bl, [d]
1554   0D01 A7 00         mov bh, 0
1555   0D03             ; START RELATIONAL
1556   0D03 D7            push a
1557   0D04 11            mov a, b
1558   0D05 26 46 00      mov b, $46
1559   0D08 B0            cmp a, b
1560   0D09 FD 74         sle ; <=
1561   0D0B E4            pop a
1562   0D0C             ; END RELATIONAL
1563   0D0C FD A7         sand a, b ; &&
1564   0D0E E4            pop a
1565   0D0F C0 00 00      cmp b, 0
1566   0D12 C6 43 0D      je _if17_else
1567   0D15             _if17_true:
1568   0D15             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1569   0D15 FA FF FF      lea d, [bp + -1] ; $value
1570   0D18 DA            push d
1571   0D19 FA FF FF      lea d, [bp + -1] ; $value
1572   0D1C 2A            mov b, [d]
1573   0D1D             ; START FACTORS
1574   0D1D D7            push a
1575   0D1E 11            mov a, b
1576   0D1F 26 10 00      mov b, $10
1577   0D22 AC            mul a, b ; *
1578   0D23 11            mov a, b
1579   0D24 27            mov b, a
1580   0D25 E4            pop a
1581   0D26             ; END FACTORS
1582   0D26             ; START TERMS
1583   0D26 D7            push a
1584   0D27 11            mov a, b
1585   0D28 FA FC FF      lea d, [bp + -4] ; $hex_char
1586   0D2B 32            mov bl, [d]
1587   0D2C A7 00         mov bh, 0
1588   0D2E             ; START TERMS
1589   0D2E D7            push a
1590   0D2F 11            mov a, b
1591   0D30 26 41 00      mov b, $41
1592   0D33 60            sub a, b
1593   0D34 26 0A 00      mov b, $a
1594   0D37 54            add a, b
1595   0D38 27            mov b, a
1596   0D39 E4            pop a
1597   0D3A             ; END TERMS
1598   0D3A 54            add a, b
1599   0D3B 27            mov b, a
1600   0D3C E4            pop a
1601   0D3D             ; END TERMS
1602   0D3D E7            pop d
1603   0D3E FD 43         mov [d], b
1604   0D40 0A 6A 0D      jmp _if17_exit
1605   0D43             _if17_else:
1606   0D43             ;; value = (value * 16) + (hex_char - '0'); 
1607   0D43 FA FF FF      lea d, [bp + -1] ; $value
1608   0D46 DA            push d
1609   0D47 FA FF FF      lea d, [bp + -1] ; $value
1610   0D4A 2A            mov b, [d]
1611   0D4B             ; START FACTORS
1612   0D4B D7            push a
1613   0D4C 11            mov a, b
1614   0D4D 26 10 00      mov b, $10
1615   0D50 AC            mul a, b ; *
1616   0D51 11            mov a, b
1617   0D52 27            mov b, a
1618   0D53 E4            pop a
1619   0D54             ; END FACTORS
1620   0D54             ; START TERMS
1621   0D54 D7            push a
1622   0D55 11            mov a, b
1623   0D56 FA FC FF      lea d, [bp + -4] ; $hex_char
1624   0D59 32            mov bl, [d]
1625   0D5A A7 00         mov bh, 0
1626   0D5C             ; START TERMS
1627   0D5C D7            push a
1628   0D5D 11            mov a, b
1629   0D5E 26 30 00      mov b, $30
1630   0D61 60            sub a, b
1631   0D62 27            mov b, a
1632   0D63 E4            pop a
1633   0D64             ; END TERMS
1634   0D64 54            add a, b
1635   0D65 27            mov b, a
1636   0D66 E4            pop a
1637   0D67             ; END TERMS
1638   0D67 E7            pop d
1639   0D68 FD 43         mov [d], b
1640   0D6A             _if17_exit:
1641   0D6A             _if16_exit:
1642   0D6A             _for15_update:
1643   0D6A FA FD FF      lea d, [bp + -3] ; $i
1644   0D6D 2A            mov b, [d]
1645   0D6E FD 79         mov g, b
1646   0D70 FD 77         inc b
1647   0D72 FA FD FF      lea d, [bp + -3] ; $i
1648   0D75 FD 43         mov [d], b
1649   0D77 FD 27         mov b, g
1650   0D79 0A 66 0C      jmp _for15_cond
1651   0D7C             _for15_exit:
1652   0D7C             ;; return value; 
1653   0D7C FA FF FF      lea d, [bp + -1] ; $value
1654   0D7F 2A            mov b, [d]
1655   0D80 F9            leave
1656   0D81 09            ret
1657   0D82             
1658   0D82             atoi:
1659   0D82 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1660   0D85             ; $result 
1661   0D85 10 00 00      mov a, $0
1662   0D88 45 FF FF      mov [bp + -1], a
1663   0D8B             ; $sign 
1664   0D8B 10 01 00      mov a, $1
1665   0D8E 45 FD FF      mov [bp + -3], a
1666   0D91 52 04 00      sub sp, 4
1667   0D94             ;; while (*str == ' ') str++; 
1668   0D94             _while18_cond:
1669   0D94 FA 05 00      lea d, [bp + 5] ; $str
1670   0D97 2A            mov b, [d]
1671   0D98 74            mov d, b
1672   0D99 32            mov bl, [d]
1673   0D9A A7 00         mov bh, 0
1674   0D9C             ; START RELATIONAL
1675   0D9C D7            push a
1676   0D9D 11            mov a, b
1677   0D9E 26 20 00      mov b, $20
1678   0DA1 B0            cmp a, b
1679   0DA2 FD 71         seq ; ==
1680   0DA4 E4            pop a
1681   0DA5             ; END RELATIONAL
1682   0DA5 C0 00 00      cmp b, 0
1683   0DA8 C6 BD 0D      je _while18_exit
1684   0DAB             _while18_block:
1685   0DAB             ;; str++; 
1686   0DAB FA 05 00      lea d, [bp + 5] ; $str
1687   0DAE 2A            mov b, [d]
1688   0DAF FD 79         mov g, b
1689   0DB1 FD 77         inc b
1690   0DB3 FA 05 00      lea d, [bp + 5] ; $str
1691   0DB6 FD 43         mov [d], b
1692   0DB8 FD 27         mov b, g
1693   0DBA 0A 94 0D      jmp _while18_cond
1694   0DBD             _while18_exit:
1695   0DBD             ;; if (*str == '-' || *str == '+') { 
1696   0DBD             _if19_cond:
1697   0DBD FA 05 00      lea d, [bp + 5] ; $str
1698   0DC0 2A            mov b, [d]
1699   0DC1 74            mov d, b
1700   0DC2 32            mov bl, [d]
1701   0DC3 A7 00         mov bh, 0
1702   0DC5             ; START RELATIONAL
1703   0DC5 D7            push a
1704   0DC6 11            mov a, b
1705   0DC7 26 2D 00      mov b, $2d
1706   0DCA B0            cmp a, b
1707   0DCB FD 71         seq ; ==
1708   0DCD E4            pop a
1709   0DCE             ; END RELATIONAL
1710   0DCE D7            push a
1711   0DCF 11            mov a, b
1712   0DD0 FA 05 00      lea d, [bp + 5] ; $str
1713   0DD3 2A            mov b, [d]
1714   0DD4 74            mov d, b
1715   0DD5 32            mov bl, [d]
1716   0DD6 A7 00         mov bh, 0
1717   0DD8             ; START RELATIONAL
1718   0DD8 D7            push a
1719   0DD9 11            mov a, b
1720   0DDA 26 2B 00      mov b, $2b
1721   0DDD B0            cmp a, b
1722   0DDE FD 71         seq ; ==
1723   0DE0 E4            pop a
1724   0DE1             ; END RELATIONAL
1725   0DE1 FD A8         sor a, b ; ||
1726   0DE3 E4            pop a
1727   0DE4 C0 00 00      cmp b, 0
1728   0DE7 C6 22 0E      je _if19_exit
1729   0DEA             _if19_true:
1730   0DEA             ;; if (*str == '-') sign = -1; 
1731   0DEA             _if20_cond:
1732   0DEA FA 05 00      lea d, [bp + 5] ; $str
1733   0DED 2A            mov b, [d]
1734   0DEE 74            mov d, b
1735   0DEF 32            mov bl, [d]
1736   0DF0 A7 00         mov bh, 0
1737   0DF2             ; START RELATIONAL
1738   0DF2 D7            push a
1739   0DF3 11            mov a, b
1740   0DF4 26 2D 00      mov b, $2d
1741   0DF7 B0            cmp a, b
1742   0DF8 FD 71         seq ; ==
1743   0DFA E4            pop a
1744   0DFB             ; END RELATIONAL
1745   0DFB C0 00 00      cmp b, 0
1746   0DFE C6 10 0E      je _if20_exit
1747   0E01             _if20_true:
1748   0E01             ;; sign = -1; 
1749   0E01 FA FD FF      lea d, [bp + -3] ; $sign
1750   0E04 DA            push d
1751   0E05 26 01 00      mov b, $1
1752   0E08 FD 97         neg b
1753   0E0A E7            pop d
1754   0E0B FD 43         mov [d], b
1755   0E0D 0A 10 0E      jmp _if20_exit
1756   0E10             _if20_exit:
1757   0E10             ;; str++; 
1758   0E10 FA 05 00      lea d, [bp + 5] ; $str
1759   0E13 2A            mov b, [d]
1760   0E14 FD 79         mov g, b
1761   0E16 FD 77         inc b
1762   0E18 FA 05 00      lea d, [bp + 5] ; $str
1763   0E1B FD 43         mov [d], b
1764   0E1D FD 27         mov b, g
1765   0E1F 0A 22 0E      jmp _if19_exit
1766   0E22             _if19_exit:
1767   0E22             ;; while (*str >= '0' && *str <= '9') { 
1768   0E22             _while21_cond:
1769   0E22 FA 05 00      lea d, [bp + 5] ; $str
1770   0E25 2A            mov b, [d]
1771   0E26 74            mov d, b
1772   0E27 32            mov bl, [d]
1773   0E28 A7 00         mov bh, 0
1774   0E2A             ; START RELATIONAL
1775   0E2A D7            push a
1776   0E2B 11            mov a, b
1777   0E2C 26 30 00      mov b, $30
1778   0E2F B0            cmp a, b
1779   0E30 FD 80         sge ; >=
1780   0E32 E4            pop a
1781   0E33             ; END RELATIONAL
1782   0E33 D7            push a
1783   0E34 11            mov a, b
1784   0E35 FA 05 00      lea d, [bp + 5] ; $str
1785   0E38 2A            mov b, [d]
1786   0E39 74            mov d, b
1787   0E3A 32            mov bl, [d]
1788   0E3B A7 00         mov bh, 0
1789   0E3D             ; START RELATIONAL
1790   0E3D D7            push a
1791   0E3E 11            mov a, b
1792   0E3F 26 39 00      mov b, $39
1793   0E42 B0            cmp a, b
1794   0E43 FD 74         sle ; <=
1795   0E45 E4            pop a
1796   0E46             ; END RELATIONAL
1797   0E46 FD A7         sand a, b ; &&
1798   0E48 E4            pop a
1799   0E49 C0 00 00      cmp b, 0
1800   0E4C C6 8A 0E      je _while21_exit
1801   0E4F             _while21_block:
1802   0E4F             ;; result = result * 10 + (*str - '0'); 
1803   0E4F FA FF FF      lea d, [bp + -1] ; $result
1804   0E52 DA            push d
1805   0E53 FA FF FF      lea d, [bp + -1] ; $result
1806   0E56 2A            mov b, [d]
1807   0E57             ; START FACTORS
1808   0E57 D7            push a
1809   0E58 11            mov a, b
1810   0E59 26 0A 00      mov b, $a
1811   0E5C AC            mul a, b ; *
1812   0E5D 11            mov a, b
1813   0E5E 27            mov b, a
1814   0E5F E4            pop a
1815   0E60             ; END FACTORS
1816   0E60             ; START TERMS
1817   0E60 D7            push a
1818   0E61 11            mov a, b
1819   0E62 FA 05 00      lea d, [bp + 5] ; $str
1820   0E65 2A            mov b, [d]
1821   0E66 74            mov d, b
1822   0E67 32            mov bl, [d]
1823   0E68 A7 00         mov bh, 0
1824   0E6A             ; START TERMS
1825   0E6A D7            push a
1826   0E6B 11            mov a, b
1827   0E6C 26 30 00      mov b, $30
1828   0E6F 60            sub a, b
1829   0E70 27            mov b, a
1830   0E71 E4            pop a
1831   0E72             ; END TERMS
1832   0E72 54            add a, b
1833   0E73 27            mov b, a
1834   0E74 E4            pop a
1835   0E75             ; END TERMS
1836   0E75 E7            pop d
1837   0E76 FD 43         mov [d], b
1838   0E78             ;; str++; 
1839   0E78 FA 05 00      lea d, [bp + 5] ; $str
1840   0E7B 2A            mov b, [d]
1841   0E7C FD 79         mov g, b
1842   0E7E FD 77         inc b
1843   0E80 FA 05 00      lea d, [bp + 5] ; $str
1844   0E83 FD 43         mov [d], b
1845   0E85 FD 27         mov b, g
1846   0E87 0A 22 0E      jmp _while21_cond
1847   0E8A             _while21_exit:
1848   0E8A             ;; return sign * result; 
1849   0E8A FA FD FF      lea d, [bp + -3] ; $sign
1850   0E8D 2A            mov b, [d]
1851   0E8E             ; START FACTORS
1852   0E8E D7            push a
1853   0E8F 11            mov a, b
1854   0E90 FA FF FF      lea d, [bp + -1] ; $result
1855   0E93 2A            mov b, [d]
1856   0E94 AC            mul a, b ; *
1857   0E95 11            mov a, b
1858   0E96 27            mov b, a
1859   0E97 E4            pop a
1860   0E98             ; END FACTORS
1861   0E98 F9            leave
1862   0E99 09            ret
1863   0E9A             
1864   0E9A             gets:
1865   0E9A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1866   0E9D             
1867   0E9D             ; --- BEGIN INLINE ASM BLOCK
1868   0E9D FA 05 00      lea d, [bp + 5] ; $s
1869   0EA0 15            mov a, [d]
1870   0EA1 3C            mov d, a
1871   0EA2 07 C3 12      call _gets
1872   0EA5             ; --- END INLINE ASM BLOCK
1873   0EA5             
1874   0EA5             ;; return strlen(s); 
1875   0EA5 FA 05 00      lea d, [bp + 5] ; $s
1876   0EA8 2A            mov b, [d]
1877   0EA9 FD AB         swp b
1878   0EAB D8            push b
1879   0EAC 07 C8 09      call strlen
1880   0EAF 51 02 00      add sp, 2
1881   0EB2 F9            leave
1882   0EB3 09            ret
1883   0EB4             
1884   0EB4             prints:
1885   0EB4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1886   0EB7             ; $digits 
1887   0EB7             ; $i 
1888   0EB7 10 00 00      mov a, $0
1889   0EBA 45 FA FF      mov [bp + -6], a
1890   0EBD 52 07 00      sub sp, 7
1891   0EC0             ;; if (num < 0) { 
1892   0EC0             _if22_cond:
1893   0EC0 FA 05 00      lea d, [bp + 5] ; $num
1894   0EC3 2A            mov b, [d]
1895   0EC4             ; START RELATIONAL
1896   0EC4 D7            push a
1897   0EC5 11            mov a, b
1898   0EC6 26 00 00      mov b, $0
1899   0EC9 B0            cmp a, b
1900   0ECA FD 73         slt ; < 
1901   0ECC E4            pop a
1902   0ECD             ; END RELATIONAL
1903   0ECD C0 00 00      cmp b, 0
1904   0ED0 C6 ED 0E      je _if22_else
1905   0ED3             _if22_true:
1906   0ED3             ;; putchar('-'); 
1907   0ED3 26 2D 00      mov b, $2d
1908   0ED6 DD            push bl
1909   0ED7 07 95 10      call putchar
1910   0EDA 51 01 00      add sp, 1
1911   0EDD             ;; num = -num; 
1912   0EDD FA 05 00      lea d, [bp + 5] ; $num
1913   0EE0 DA            push d
1914   0EE1 FA 05 00      lea d, [bp + 5] ; $num
1915   0EE4 2A            mov b, [d]
1916   0EE5 FD 97         neg b
1917   0EE7 E7            pop d
1918   0EE8 FD 43         mov [d], b
1919   0EEA 0A 0F 0F      jmp _if22_exit
1920   0EED             _if22_else:
1921   0EED             ;; if (num == 0) { 
1922   0EED             _if23_cond:
1923   0EED FA 05 00      lea d, [bp + 5] ; $num
1924   0EF0 2A            mov b, [d]
1925   0EF1             ; START RELATIONAL
1926   0EF1 D7            push a
1927   0EF2 11            mov a, b
1928   0EF3 26 00 00      mov b, $0
1929   0EF6 B0            cmp a, b
1930   0EF7 FD 71         seq ; ==
1931   0EF9 E4            pop a
1932   0EFA             ; END RELATIONAL
1933   0EFA C0 00 00      cmp b, 0
1934   0EFD C6 0F 0F      je _if23_exit
1935   0F00             _if23_true:
1936   0F00             ;; putchar('0'); 
1937   0F00 26 30 00      mov b, $30
1938   0F03 DD            push bl
1939   0F04 07 95 10      call putchar
1940   0F07 51 01 00      add sp, 1
1941   0F0A             ;; return; 
1942   0F0A F9            leave
1943   0F0B 09            ret
1944   0F0C 0A 0F 0F      jmp _if23_exit
1945   0F0F             _if23_exit:
1946   0F0F             _if22_exit:
1947   0F0F             ;; while (num > 0) { 
1948   0F0F             _while24_cond:
1949   0F0F FA 05 00      lea d, [bp + 5] ; $num
1950   0F12 2A            mov b, [d]
1951   0F13             ; START RELATIONAL
1952   0F13 D7            push a
1953   0F14 11            mov a, b
1954   0F15 26 00 00      mov b, $0
1955   0F18 B0            cmp a, b
1956   0F19 FD 7F         sgt ; >
1957   0F1B E4            pop a
1958   0F1C             ; END RELATIONAL
1959   0F1C C0 00 00      cmp b, 0
1960   0F1F C6 6C 0F      je _while24_exit
1961   0F22             _while24_block:
1962   0F22             ;; digits[i] = '0' + (num % 10); 
1963   0F22 FA FC FF      lea d, [bp + -4] ; $digits
1964   0F25 D7            push a
1965   0F26 DA            push d
1966   0F27 FA FA FF      lea d, [bp + -6] ; $i
1967   0F2A 2A            mov b, [d]
1968   0F2B E7            pop d
1969   0F2C 5A            add d, b
1970   0F2D E4            pop a
1971   0F2E DA            push d
1972   0F2F 26 30 00      mov b, $30
1973   0F32             ; START TERMS
1974   0F32 D7            push a
1975   0F33 11            mov a, b
1976   0F34 FA 05 00      lea d, [bp + 5] ; $num
1977   0F37 2A            mov b, [d]
1978   0F38             ; START FACTORS
1979   0F38 D7            push a
1980   0F39 11            mov a, b
1981   0F3A 26 0A 00      mov b, $a
1982   0F3D AE            div a, b ; 
1983   0F3E 11            mov a, b
1984   0F3F 27            mov b, a
1985   0F40 E4            pop a
1986   0F41             ; END FACTORS
1987   0F41 54            add a, b
1988   0F42 27            mov b, a
1989   0F43 E4            pop a
1990   0F44             ; END TERMS
1991   0F44 E7            pop d
1992   0F45 FD 3E         mov [d], bl
1993   0F47             ;; num = num / 10; 
1994   0F47 FA 05 00      lea d, [bp + 5] ; $num
1995   0F4A DA            push d
1996   0F4B FA 05 00      lea d, [bp + 5] ; $num
1997   0F4E 2A            mov b, [d]
1998   0F4F             ; START FACTORS
1999   0F4F D7            push a
2000   0F50 11            mov a, b
2001   0F51 26 0A 00      mov b, $a
2002   0F54 AE            div a, b
2003   0F55 27            mov b, a
2004   0F56 E4            pop a
2005   0F57             ; END FACTORS
2006   0F57 E7            pop d
2007   0F58 FD 43         mov [d], b
2008   0F5A             ;; i++; 
2009   0F5A FA FA FF      lea d, [bp + -6] ; $i
2010   0F5D 2A            mov b, [d]
2011   0F5E FD 79         mov g, b
2012   0F60 FD 77         inc b
2013   0F62 FA FA FF      lea d, [bp + -6] ; $i
2014   0F65 FD 43         mov [d], b
2015   0F67 FD 27         mov b, g
2016   0F69 0A 0F 0F      jmp _while24_cond
2017   0F6C             _while24_exit:
2018   0F6C             ;; while (i > 0) { 
2019   0F6C             _while25_cond:
2020   0F6C FA FA FF      lea d, [bp + -6] ; $i
2021   0F6F 2A            mov b, [d]
2022   0F70             ; START RELATIONAL
2023   0F70 D7            push a
2024   0F71 11            mov a, b
2025   0F72 26 00 00      mov b, $0
2026   0F75 B0            cmp a, b
2027   0F76 FD 7F         sgt ; >
2028   0F78 E4            pop a
2029   0F79             ; END RELATIONAL
2030   0F79 C0 00 00      cmp b, 0
2031   0F7C C6 A7 0F      je _while25_exit
2032   0F7F             _while25_block:
2033   0F7F             ;; i--; 
2034   0F7F FA FA FF      lea d, [bp + -6] ; $i
2035   0F82 2A            mov b, [d]
2036   0F83 FD 79         mov g, b
2037   0F85 FD 7D         dec b
2038   0F87 FA FA FF      lea d, [bp + -6] ; $i
2039   0F8A FD 43         mov [d], b
2040   0F8C FD 27         mov b, g
2041   0F8E             ;; putchar(digits[i]); 
2042   0F8E FA FC FF      lea d, [bp + -4] ; $digits
2043   0F91 D7            push a
2044   0F92 DA            push d
2045   0F93 FA FA FF      lea d, [bp + -6] ; $i
2046   0F96 2A            mov b, [d]
2047   0F97 E7            pop d
2048   0F98 5A            add d, b
2049   0F99 E4            pop a
2050   0F9A 32            mov bl, [d]
2051   0F9B A7 00         mov bh, 0
2052   0F9D DD            push bl
2053   0F9E 07 95 10      call putchar
2054   0FA1 51 01 00      add sp, 1
2055   0FA4 0A 6C 0F      jmp _while25_cond
2056   0FA7             _while25_exit:
2057   0FA7 F9            leave
2058   0FA8 09            ret
2059   0FA9             
2060   0FA9             printu:
2061   0FA9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2062   0FAC             ; $digits 
2063   0FAC             ; $i 
2064   0FAC 52 07 00      sub sp, 7
2065   0FAF             ;; i = 0; 
2066   0FAF FA FA FF      lea d, [bp + -6] ; $i
2067   0FB2 DA            push d
2068   0FB3 26 00 00      mov b, $0
2069   0FB6 E7            pop d
2070   0FB7 FD 43         mov [d], b
2071   0FB9             ;; if(num == 0){ 
2072   0FB9             _if26_cond:
2073   0FB9 FA 05 00      lea d, [bp + 5] ; $num
2074   0FBC 2A            mov b, [d]
2075   0FBD             ; START RELATIONAL
2076   0FBD D7            push a
2077   0FBE 11            mov a, b
2078   0FBF 26 00 00      mov b, $0
2079   0FC2 B0            cmp a, b
2080   0FC3 FD 71         seq ; ==
2081   0FC5 E4            pop a
2082   0FC6             ; END RELATIONAL
2083   0FC6 C0 00 00      cmp b, 0
2084   0FC9 C6 DB 0F      je _if26_exit
2085   0FCC             _if26_true:
2086   0FCC             ;; putchar('0'); 
2087   0FCC 26 30 00      mov b, $30
2088   0FCF DD            push bl
2089   0FD0 07 95 10      call putchar
2090   0FD3 51 01 00      add sp, 1
2091   0FD6             ;; return; 
2092   0FD6 F9            leave
2093   0FD7 09            ret
2094   0FD8 0A DB 0F      jmp _if26_exit
2095   0FDB             _if26_exit:
2096   0FDB             ;; while (num > 0) { 
2097   0FDB             _while27_cond:
2098   0FDB FA 05 00      lea d, [bp + 5] ; $num
2099   0FDE 2A            mov b, [d]
2100   0FDF             ; START RELATIONAL
2101   0FDF D7            push a
2102   0FE0 11            mov a, b
2103   0FE1 26 00 00      mov b, $0
2104   0FE4 B0            cmp a, b
2105   0FE5 FD 81         sgu ; > (unsigned)
2106   0FE7 E4            pop a
2107   0FE8             ; END RELATIONAL
2108   0FE8 C0 00 00      cmp b, 0
2109   0FEB C6 38 10      je _while27_exit
2110   0FEE             _while27_block:
2111   0FEE             ;; digits[i] = '0' + (num % 10); 
2112   0FEE FA FC FF      lea d, [bp + -4] ; $digits
2113   0FF1 D7            push a
2114   0FF2 DA            push d
2115   0FF3 FA FA FF      lea d, [bp + -6] ; $i
2116   0FF6 2A            mov b, [d]
2117   0FF7 E7            pop d
2118   0FF8 5A            add d, b
2119   0FF9 E4            pop a
2120   0FFA DA            push d
2121   0FFB 26 30 00      mov b, $30
2122   0FFE             ; START TERMS
2123   0FFE D7            push a
2124   0FFF 11            mov a, b
2125   1000 FA 05 00      lea d, [bp + 5] ; $num
2126   1003 2A            mov b, [d]
2127   1004             ; START FACTORS
2128   1004 D7            push a
2129   1005 11            mov a, b
2130   1006 26 0A 00      mov b, $a
2131   1009 AE            div a, b ; 
2132   100A 11            mov a, b
2133   100B 27            mov b, a
2134   100C E4            pop a
2135   100D             ; END FACTORS
2136   100D 54            add a, b
2137   100E 27            mov b, a
2138   100F E4            pop a
2139   1010             ; END TERMS
2140   1010 E7            pop d
2141   1011 FD 3E         mov [d], bl
2142   1013             ;; num = num / 10; 
2143   1013 FA 05 00      lea d, [bp + 5] ; $num
2144   1016 DA            push d
2145   1017 FA 05 00      lea d, [bp + 5] ; $num
2146   101A 2A            mov b, [d]
2147   101B             ; START FACTORS
2148   101B D7            push a
2149   101C 11            mov a, b
2150   101D 26 0A 00      mov b, $a
2151   1020 AE            div a, b
2152   1021 27            mov b, a
2153   1022 E4            pop a
2154   1023             ; END FACTORS
2155   1023 E7            pop d
2156   1024 FD 43         mov [d], b
2157   1026             ;; i++; 
2158   1026 FA FA FF      lea d, [bp + -6] ; $i
2159   1029 2A            mov b, [d]
2160   102A FD 79         mov g, b
2161   102C FD 77         inc b
2162   102E FA FA FF      lea d, [bp + -6] ; $i
2163   1031 FD 43         mov [d], b
2164   1033 FD 27         mov b, g
2165   1035 0A DB 0F      jmp _while27_cond
2166   1038             _while27_exit:
2167   1038             ;; while (i > 0) { 
2168   1038             _while28_cond:
2169   1038 FA FA FF      lea d, [bp + -6] ; $i
2170   103B 2A            mov b, [d]
2171   103C             ; START RELATIONAL
2172   103C D7            push a
2173   103D 11            mov a, b
2174   103E 26 00 00      mov b, $0
2175   1041 B0            cmp a, b
2176   1042 FD 7F         sgt ; >
2177   1044 E4            pop a
2178   1045             ; END RELATIONAL
2179   1045 C0 00 00      cmp b, 0
2180   1048 C6 73 10      je _while28_exit
2181   104B             _while28_block:
2182   104B             ;; i--; 
2183   104B FA FA FF      lea d, [bp + -6] ; $i
2184   104E 2A            mov b, [d]
2185   104F FD 79         mov g, b
2186   1051 FD 7D         dec b
2187   1053 FA FA FF      lea d, [bp + -6] ; $i
2188   1056 FD 43         mov [d], b
2189   1058 FD 27         mov b, g
2190   105A             ;; putchar(digits[i]); 
2191   105A FA FC FF      lea d, [bp + -4] ; $digits
2192   105D D7            push a
2193   105E DA            push d
2194   105F FA FA FF      lea d, [bp + -6] ; $i
2195   1062 2A            mov b, [d]
2196   1063 E7            pop d
2197   1064 5A            add d, b
2198   1065 E4            pop a
2199   1066 32            mov bl, [d]
2200   1067 A7 00         mov bh, 0
2201   1069 DD            push bl
2202   106A 07 95 10      call putchar
2203   106D 51 01 00      add sp, 1
2204   1070 0A 38 10      jmp _while28_cond
2205   1073             _while28_exit:
2206   1073 F9            leave
2207   1074 09            ret
2208   1075             
2209   1075             rand:
2210   1075 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2211   1078             ; $sec 
2212   1078 52 01 00      sub sp, 1
2213   107B             
2214   107B             ; --- BEGIN INLINE ASM BLOCK
2215   107B 19 00         mov al, 0
2216   107D 05 01         syscall sys_rtc					
2217   107F 1A            mov al, ah
2218   1080 FA 00 00      lea d, [bp + 0] ; $sec
2219   1083 1E            mov al, [d]
2220   1084             ; --- END INLINE ASM BLOCK
2221   1084             
2222   1084             ;; return sec; 
2223   1084 FA 00 00      lea d, [bp + 0] ; $sec
2224   1087 32            mov bl, [d]
2225   1088 A7 00         mov bh, 0
2226   108A F9            leave
2227   108B 09            ret
2228   108C             
2229   108C             date:
2230   108C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2231   108F             
2232   108F             ; --- BEGIN INLINE ASM BLOCK
2233   108F 19 00         mov al, 0 
2234   1091 05 07         syscall sys_datetime
2235   1093             ; --- END INLINE ASM BLOCK
2236   1093             
2237   1093 F9            leave
2238   1094 09            ret
2239   1095             
2240   1095             putchar:
2241   1095 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2242   1098             
2243   1098             ; --- BEGIN INLINE ASM BLOCK
2244   1098 FA 05 00      lea d, [bp + 5] ; $c
2245   109B 1E            mov al, [d]
2246   109C 23            mov ah, al
2247   109D 07 BC 12      call _putchar
2248   10A0             ; --- END INLINE ASM BLOCK
2249   10A0             
2250   10A0 F9            leave
2251   10A1 09            ret
2252   10A2             
2253   10A2             getchar:
2254   10A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2255   10A5             ; $c 
2256   10A5 52 01 00      sub sp, 1
2257   10A8             
2258   10A8             ; --- BEGIN INLINE ASM BLOCK
2259   10A8 07 B5 12      call getch
2260   10AB 1A            mov al, ah
2261   10AC FA 00 00      lea d, [bp + 0] ; $c
2262   10AF 3E            mov [d], al
2263   10B0             ; --- END INLINE ASM BLOCK
2264   10B0             
2265   10B0             ;; return c; 
2266   10B0 FA 00 00      lea d, [bp + 0] ; $c
2267   10B3 32            mov bl, [d]
2268   10B4 A7 00         mov bh, 0
2269   10B6 F9            leave
2270   10B7 09            ret
2271   10B8             
2272   10B8             scann:
2273   10B8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2274   10BB             ; $m 
2275   10BB 52 02 00      sub sp, 2
2276   10BE             
2277   10BE             ; --- BEGIN INLINE ASM BLOCK
2278   10BE 07 00 15      call scan_u16d
2279   10C1 FA FF FF      lea d, [bp + -1] ; $m
2280   10C4 43            mov [d], a
2281   10C5             ; --- END INLINE ASM BLOCK
2282   10C5             
2283   10C5             ;; return m; 
2284   10C5 FA FF FF      lea d, [bp + -1] ; $m
2285   10C8 2A            mov b, [d]
2286   10C9 F9            leave
2287   10CA 09            ret
2288   10CB             
2289   10CB             puts:
2290   10CB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2291   10CE             
2292   10CE             ; --- BEGIN INLINE ASM BLOCK
2293   10CE FA 05 00      lea d, [bp + 5] ; $s
2294   10D1 15            mov a, [d]
2295   10D2 3C            mov d, a
2296   10D3 07 06 14      call _puts
2297   10D6 10 00 0A      mov a, $0A00
2298   10D9 05 03         syscall sys_io
2299   10DB             ; --- END INLINE ASM BLOCK
2300   10DB             
2301   10DB F9            leave
2302   10DC 09            ret
2303   10DD             
2304   10DD             print:
2305   10DD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2306   10E0             
2307   10E0             ; --- BEGIN INLINE ASM BLOCK
2308   10E0 FA 05 00      lea d, [bp + 5] ; $s
2309   10E3 FD 2A         mov d, [d]
2310   10E5 07 06 14      call _puts
2311   10E8             ; --- END INLINE ASM BLOCK
2312   10E8             
2313   10E8 F9            leave
2314   10E9 09            ret
2315   10EA             
2316   10EA             loadfile:
2317   10EA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2318   10ED             
2319   10ED             ; --- BEGIN INLINE ASM BLOCK
2320   10ED FA 05 00      lea d, [bp + 5] ; $destination
2321   10F0 15            mov a, [d]
2322   10F1 4F            mov di, a
2323   10F2 FA 07 00      lea d, [bp + 7] ; $filename
2324   10F5 FD 2A         mov d, [d]
2325   10F7 19 14         mov al, 20
2326   10F9 05 04         syscall sys_filesystem
2327   10FB             ; --- END INLINE ASM BLOCK
2328   10FB             
2329   10FB F9            leave
2330   10FC 09            ret
2331   10FD             
2332   10FD             create_file:
2333   10FD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2334   1100 F9            leave
2335   1101 09            ret
2336   1102             
2337   1102             delete_file:
2338   1102 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2339   1105             
2340   1105             ; --- BEGIN INLINE ASM BLOCK
2341   1105 FA 05 00      lea d, [bp + 5] ; $filename
2342   1108 19 0A         mov al, 10
2343   110A 05 04         syscall sys_filesystem
2344   110C             ; --- END INLINE ASM BLOCK
2345   110C             
2346   110C F9            leave
2347   110D 09            ret
2348   110E             
2349   110E             fopen:
2350   110E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2351   1111 F9            leave
2352   1112 09            ret
2353   1113             
2354   1113             fclose:
2355   1113 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2356   1116 F9            leave
2357   1117 09            ret
2358   1118             
2359   1118             alloc:
2360   1118 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2361   111B             ;; heap_top = heap_top + bytes; 
2362   111B 3B 11 2C      mov d, _heap_top ; $heap_top
2363   111E DA            push d
2364   111F 3B 11 2C      mov d, _heap_top ; $heap_top
2365   1122 2A            mov b, [d]
2366   1123             ; START TERMS
2367   1123 D7            push a
2368   1124 11            mov a, b
2369   1125 FA 05 00      lea d, [bp + 5] ; $bytes
2370   1128 2A            mov b, [d]
2371   1129 54            add a, b
2372   112A 27            mov b, a
2373   112B E4            pop a
2374   112C             ; END TERMS
2375   112C E7            pop d
2376   112D FD 43         mov [d], b
2377   112F             ;; return heap_top - bytes; 
2378   112F 3B 11 2C      mov d, _heap_top ; $heap_top
2379   1132 2A            mov b, [d]
2380   1133             ; START TERMS
2381   1133 D7            push a
2382   1134 11            mov a, b
2383   1135 FA 05 00      lea d, [bp + 5] ; $bytes
2384   1138 2A            mov b, [d]
2385   1139 60            sub a, b
2386   113A 27            mov b, a
2387   113B E4            pop a
2388   113C             ; END TERMS
2389   113C F9            leave
2390   113D 09            ret
2391   113E             
2392   113E             free:
2393   113E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2394   1141             ;; return heap_top = heap_top - bytes; 
2395   1141 3B 11 2C      mov d, _heap_top ; $heap_top
2396   1144 DA            push d
2397   1145 3B 11 2C      mov d, _heap_top ; $heap_top
2398   1148 2A            mov b, [d]
2399   1149             ; START TERMS
2400   1149 D7            push a
2401   114A 11            mov a, b
2402   114B FA 05 00      lea d, [bp + 5] ; $bytes
2403   114E 2A            mov b, [d]
2404   114F 60            sub a, b
2405   1150 27            mov b, a
2406   1151 E4            pop a
2407   1152             ; END TERMS
2408   1152 E7            pop d
2409   1153 FD 43         mov [d], b
2410   1155 F9            leave
2411   1156 09            ret
2412   1157             
2413   1157             exit:
2414   1157 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2415   115A             
2416   115A             ; --- BEGIN INLINE ASM BLOCK
2417   115A 05 0B         syscall sys_terminate_proc
2418   115C             ; --- END INLINE ASM BLOCK
2419   115C             
2420   115C F9            leave
2421   115D 09            ret
2422   115E             
2423   115E             load_hex:
2424   115E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2425   1161             ; $temp 
2426   1161 52 02 00      sub sp, 2
2427   1164             ;; temp = alloc(32768); 
2428   1164 FA FF FF      lea d, [bp + -1] ; $temp
2429   1167 DA            push d
2430   1168 26 00 80      mov b, $8000
2431   116B FD AB         swp b
2432   116D D8            push b
2433   116E 07 18 11      call alloc
2434   1171 51 02 00      add sp, 2
2435   1174 E7            pop d
2436   1175 FD 43         mov [d], b
2437   1177             
2438   1177             ; --- BEGIN INLINE ASM BLOCK
2439   1177               
2440   1177               
2441   1177               
2442   1177               
2443   1177               
2444   1177             _load_hex:
2445   1177 D7            push a
2446   1178 D8            push b
2447   1179 DA            push d
2448   117A E2            push si
2449   117B E3            push di
2450   117C 52 00 80      sub sp, $8000      
2451   117F 38 00 00      mov c, 0
2452   1182 48            mov a, sp
2453   1183 77            inc a
2454   1184 3C            mov d, a          
2455   1185 07 C3 12      call _gets        
2456   1188 4D            mov si, a
2457   1189             __load_hex_loop:
2458   1189 F6            lodsb             
2459   118A B9 00         cmp al, 0         
2460   118C C6 9A 11      jz __load_hex_ret
2461   118F 36            mov bh, al
2462   1190 F6            lodsb
2463   1191 2F            mov bl, al
2464   1192 07 79 12      call _atoi        
2465   1195 F7            stosb             
2466   1196 78            inc c
2467   1197 0A 89 11      jmp __load_hex_loop
2468   119A             __load_hex_ret:
2469   119A 51 00 80      add sp, $8000
2470   119D F0            pop di
2471   119E EF            pop si
2472   119F E7            pop d
2473   11A0 E5            pop b
2474   11A1 E4            pop a
2475   11A2             ; --- END INLINE ASM BLOCK
2476   11A2             
2477   11A2 F9            leave
2478   11A3 09            ret
2479   11A4             
2480   11A4             getparam:
2481   11A4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2482   11A7             ; $data 
2483   11A7 52 01 00      sub sp, 1
2484   11AA             
2485   11AA             ; --- BEGIN INLINE ASM BLOCK
2486   11AA 19 04         mov al, 4
2487   11AC FA 05 00      lea d, [bp + 5] ; $address
2488   11AF FD 2A         mov d, [d]
2489   11B1 05 0C         syscall sys_system
2490   11B3 FA 00 00      lea d, [bp + 0] ; $data
2491   11B6 FD 3E         mov [d], bl
2492   11B8             ; --- END INLINE ASM BLOCK
2493   11B8             
2494   11B8             ;; return data; 
2495   11B8 FA 00 00      lea d, [bp + 0] ; $data
2496   11BB 32            mov bl, [d]
2497   11BC A7 00         mov bh, 0
2498   11BE F9            leave
2499   11BF 09            ret
2500   11C0             
2501   11C0             clear:
2502   11C0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2503   11C3             ;; print("\033[2J\033[H"); 
2504   11C3 26 E7 2B      mov b, __s3 ; "\033[2J\033[H"
2505   11C6 FD AB         swp b
2506   11C8 D8            push b
2507   11C9 07 DD 10      call print
2508   11CC 51 02 00      add sp, 2
2509   11CF F9            leave
2510   11D0 09            ret
2511   11D1             
2512   11D1             include_stdio_asm:
2513   11D1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2514   11D4             
2515   11D4             ; --- BEGIN INLINE ASM BLOCK
2516   11D4             .include "lib/stdio.asm"
0001+  11D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  11D4             ; stdio.s
0003+  11D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  11D4             .include "lib/string.asm"
0001++ 11D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 11D4             ; string.s
0003++ 11D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 11D4             
0005++ 11D4             
0006++ 11D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 11D4             ; _strrev
0008++ 11D4             ; reverse a string
0009++ 11D4             ; D = string address
0010++ 11D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 11D4             ; 01234
0012++ 11D4             _strrev:
0013++ 11D4 4B          	pusha
0014++ 11D5 07 1B 12    	call _strlen	; length in C
0015++ 11D8 12          	mov a, c
0016++ 11D9 AF 01 00    	cmp a, 1
0017++ 11DC D0 F6 11    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 11DF 7D          	dec a
0019++ 11E0 FD 4E       	mov si, d	; beginning of string
0020++ 11E2 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 11E4 59          	add d, a	; end of string
0022++ 11E5 12          	mov a, c
0023++ 11E6 FD 9B       	shr a		; divide by 2
0024++ 11E8 39          	mov c, a	; C now counts the steps
0025++ 11E9             _strrev_L0:
0026++ 11E9 32          	mov bl, [d]	; save load right-side char into BL
0027++ 11EA F6          	lodsb		; load left-side char into AL; increase SI
0028++ 11EB 3E          	mov [d], al	; store left char into right side
0029++ 11EC 1B          	mov al, bl
0030++ 11ED F7          	stosb		; store right-side char into left-side; increase DI
0031++ 11EE 7E          	dec c
0032++ 11EF 7F          	dec d
0033++ 11F0 C2 00 00    	cmp c, 0
0034++ 11F3 C7 E9 11    	jne _strrev_L0
0035++ 11F6             _strrev_end:
0036++ 11F6 4C          	popa
0037++ 11F7 09          	ret
0038++ 11F8             	
0039++ 11F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 11F8             ; _strchr
0041++ 11F8             ; search string in D for char in AL
0042++ 11F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 11F8             _strchr:
0044++ 11F8             _strchr_L0:
0045++ 11F8 32          	mov bl, [d]
0046++ 11F9 C1 00       	cmp bl, 0
0047++ 11FB C6 06 12    	je _strchr_end
0048++ 11FE BA          	cmp al, bl
0049++ 11FF C6 06 12    	je _strchr_end
0050++ 1202 79          	inc d
0051++ 1203 0A F8 11    	jmp _strchr_L0
0052++ 1206             _strchr_end:
0053++ 1206 1B          	mov al, bl
0054++ 1207 09          	ret
0055++ 1208             
0056++ 1208             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1208             ; _strstr
0058++ 1208             ; find sub-string
0059++ 1208             ; str1 in SI
0060++ 1208             ; str2 in DI
0061++ 1208             ; SI points to end of source string
0062++ 1208             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1208             _strstr:
0064++ 1208 DB          	push al
0065++ 1209 DA          	push d
0066++ 120A E3          	push di
0067++ 120B             _strstr_loop:
0068++ 120B F3          	cmpsb					; compare a byte of the strings
0069++ 120C C7 17 12    	jne _strstr_ret
0070++ 120F FC 00 00    	lea d, [di + 0]
0071++ 1212 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1214 C7 0B 12    	jne _strstr_loop				; equal chars but not at end
0073++ 1217             _strstr_ret:
0074++ 1217 F0          	pop di
0075++ 1218 E7          	pop d
0076++ 1219 E8          	pop al
0077++ 121A 09          	ret
0078++ 121B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 121B             ; length of null terminated string
0080++ 121B             ; result in C
0081++ 121B             ; pointer in D
0082++ 121B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 121B             _strlen:
0084++ 121B DA          	push d
0085++ 121C 38 00 00    	mov c, 0
0086++ 121F             _strlen_L1:
0087++ 121F BD 00       	cmp byte [d], 0
0088++ 1221 C6 29 12    	je _strlen_ret
0089++ 1224 79          	inc d
0090++ 1225 78          	inc c
0091++ 1226 0A 1F 12    	jmp _strlen_L1
0092++ 1229             _strlen_ret:
0093++ 1229 E7          	pop d
0094++ 122A 09          	ret
0095++ 122B             
0096++ 122B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 122B             ; STRCMP
0098++ 122B             ; compare two strings
0099++ 122B             ; str1 in SI
0100++ 122B             ; str2 in DI
0101++ 122B             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 122B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 122B             _strcmp:
0104++ 122B DB          	push al
0105++ 122C DA          	push d
0106++ 122D E3          	push di
0107++ 122E E2          	push si
0108++ 122F             _strcmp_loop:
0109++ 122F F3          	cmpsb					; compare a byte of the strings
0110++ 1230 C7 3B 12    	jne _strcmp_ret
0111++ 1233 FB FF FF    	lea d, [si +- 1]
0112++ 1236 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1238 C7 2F 12    	jne _strcmp_loop				; equal chars but not at end
0114++ 123B             _strcmp_ret:
0115++ 123B EF          	pop si
0116++ 123C F0          	pop di
0117++ 123D E7          	pop d
0118++ 123E E8          	pop al
0119++ 123F 09          	ret
0120++ 1240             
0121++ 1240             
0122++ 1240             ; STRCPY
0123++ 1240             ; copy null terminated string from SI to DI
0124++ 1240             ; source in SI
0125++ 1240             ; destination in DI
0126++ 1240             _strcpy:
0127++ 1240 E2          	push si
0128++ 1241 E3          	push di
0129++ 1242 DB          	push al
0130++ 1243             _strcpy_L1:
0131++ 1243 F6          	lodsb
0132++ 1244 F7          	stosb
0133++ 1245 B9 00       	cmp al, 0
0134++ 1247 C7 43 12    	jne _strcpy_L1
0135++ 124A             _strcpy_end:
0136++ 124A E8          	pop al
0137++ 124B F0          	pop di
0138++ 124C EF          	pop si
0139++ 124D 09          	ret
0140++ 124E             
0141++ 124E             ; STRCAT
0142++ 124E             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 124E             ; source in SI
0144++ 124E             ; destination in DI
0145++ 124E             _strcat:
0146++ 124E E2          	push si
0147++ 124F E3          	push di
0148++ 1250 D7          	push a
0149++ 1251 DA          	push d
0150++ 1252 50          	mov a, di
0151++ 1253 3C          	mov d, a
0152++ 1254             _strcat_goto_end_L1:
0153++ 1254 BD 00       	cmp byte[d], 0
0154++ 1256 C6 5D 12    	je _strcat_start
0155++ 1259 79          	inc d
0156++ 125A 0A 54 12    	jmp _strcat_goto_end_L1
0157++ 125D             _strcat_start:
0158++ 125D FD 50       	mov di, d
0159++ 125F             _strcat_L1:
0160++ 125F F6          	lodsb
0161++ 1260 F7          	stosb
0162++ 1261 B9 00       	cmp al, 0
0163++ 1263 C7 5F 12    	jne _strcat_L1
0164++ 1266             _strcat_end:
0165++ 1266 E7          	pop d
0166++ 1267 E4          	pop a
0167++ 1268 F0          	pop di
0168++ 1269 EF          	pop si
0169++ 126A 09          	ret
0170++ 126B             
0171++ 126B             
0005+  126B             
0006+  126B             
0007+  126B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  126B             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  126B             ; ASCII in BL
0010+  126B             ; result in AL
0011+  126B             ; ascii for F = 0100 0110
0012+  126B             ; ascii for 9 = 0011 1001
0013+  126B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  126B             hex_ascii_encode:
0015+  126B 1B            mov al, bl
0016+  126C 93 40         test al, $40        ; test if letter or number
0017+  126E C7 74 12      jnz hex_letter
0018+  1271 87 0F         and al, $0F        ; get number
0019+  1273 09            ret
0020+  1274             hex_letter:
0021+  1274 87 0F         and al, $0F        ; get letter
0022+  1276 6A 09         add al, 9
0023+  1278 09            ret
0024+  1279             
0025+  1279             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  1279             ; ATOI
0027+  1279             ; 2 letter hex string in B
0028+  1279             ; 8bit integer returned in AL
0029+  1279             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  1279             _atoi:
0031+  1279 D8            push b
0032+  127A 07 6B 12      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  127D 30            mov bl, bh
0034+  127E DB            push al          ; save a
0035+  127F 07 6B 12      call hex_ascii_encode
0036+  1282 EA            pop bl  
0037+  1283 FD 9E 04      shl al, 4
0038+  1286 8C            or al, bl
0039+  1287 E5            pop b
0040+  1288 09            ret  
0041+  1289             
0042+  1289             
0043+  1289             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  1289             ; scanf
0045+  1289             ; no need for explanations!
0046+  1289             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  1289             scanf:
0048+  1289 09            ret
0049+  128A             
0050+  128A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  128A             ; ITOA
0052+  128A             ; 8bit value in BL
0053+  128A             ; 2 byte ASCII result in A
0054+  128A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  128A             _itoa:
0056+  128A DA            push d
0057+  128B D8            push b
0058+  128C A7 00         mov bh, 0
0059+  128E FD A4 04      shr bl, 4  
0060+  1291 74            mov d, b
0061+  1292 1F 3A 15      mov al, [d + s_hex_digits]
0062+  1295 23            mov ah, al
0063+  1296               
0064+  1296 E5            pop b
0065+  1297 D8            push b
0066+  1298 A7 00         mov bh, 0
0067+  129A FD 87 0F      and bl, $0F
0068+  129D 74            mov d, b
0069+  129E 1F 3A 15      mov al, [d + s_hex_digits]
0070+  12A1 E5            pop b
0071+  12A2 E7            pop d
0072+  12A3 09            ret
0073+  12A4             
0074+  12A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  12A4             ; HEX STRING TO BINARY
0076+  12A4             ; di = destination address
0077+  12A4             ; si = source
0078+  12A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  12A4             _hex_to_int:
0080+  12A4             _hex_to_int_L1:
0081+  12A4 F6            lodsb          ; load from [SI] to AL
0082+  12A5 B9 00         cmp al, 0        ; check if ASCII 0
0083+  12A7 C6 B4 12      jz _hex_to_int_ret
0084+  12AA 36            mov bh, al
0085+  12AB F6            lodsb
0086+  12AC 2F            mov bl, al
0087+  12AD 07 79 12      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  12B0 F7            stosb          ; store AL to [DI]
0089+  12B1 0A A4 12      jmp _hex_to_int_L1
0090+  12B4             _hex_to_int_ret:
0091+  12B4 09            ret    
0092+  12B5             
0093+  12B5             
0094+  12B5             
0095+  12B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  12B5             ; GETCHAR
0097+  12B5             ; char in ah
0098+  12B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  12B5             getch:
0100+  12B5 DB            push al
0101+  12B6             getch_retry:
0102+  12B6 19 01         mov al, 1
0103+  12B8 05 03         syscall sys_io      ; receive in AH
0104+  12BA E8            pop al
0105+  12BB 09            ret
0106+  12BC             
0107+  12BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  12BC             ; PUTCHAR
0109+  12BC             ; char in ah
0110+  12BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  12BC             _putchar:
0112+  12BC D7            push a
0113+  12BD 19 00         mov al, 0
0114+  12BF 05 03         syscall sys_io      ; char in AH
0115+  12C1 E4            pop a
0116+  12C2 09            ret
0117+  12C3             
0118+  12C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  12C3             ;; INPUT A STRING
0120+  12C3             ;; terminates with null
0121+  12C3             ;; pointer in D
0122+  12C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  12C3             _gets:
0124+  12C3 D7            push a
0125+  12C4 DA            push d
0126+  12C5             _gets_loop:
0127+  12C5 19 01         mov al, 1
0128+  12C7 05 03         syscall sys_io      ; receive in AH
0129+  12C9 B9 00         cmp al, 0        ; check error code (AL)
0130+  12CB C6 C5 12      je _gets_loop      ; if no char received, retry
0131+  12CE             
0132+  12CE 76 1B         cmp ah, 27
0133+  12D0 C6 F1 12      je _gets_ansi_esc
0134+  12D3 76 0A         cmp ah, $0A        ; LF
0135+  12D5 C6 5C 13      je _gets_end
0136+  12D8 76 0D         cmp ah, $0D        ; CR
0137+  12DA C6 5C 13      je _gets_end
0138+  12DD 76 5C         cmp ah, $5C        ; '\\'
0139+  12DF C6 1D 13      je _gets_escape
0140+  12E2               
0141+  12E2 76 08         cmp ah, $08      ; check for backspace
0142+  12E4 C6 ED 12      je _gets_backspace
0143+  12E7             
0144+  12E7 1A            mov al, ah
0145+  12E8 3E            mov [d], al
0146+  12E9 79            inc d
0147+  12EA 0A C5 12      jmp _gets_loop
0148+  12ED             _gets_backspace:
0149+  12ED 7F            dec d
0150+  12EE 0A C5 12      jmp _gets_loop
0151+  12F1             _gets_ansi_esc:
0152+  12F1 19 01         mov al, 1
0153+  12F3 05 03         syscall sys_io        ; receive in AH without echo
0154+  12F5 B9 00         cmp al, 0          ; check error code (AL)
0155+  12F7 C6 F1 12      je _gets_ansi_esc    ; if no char received, retry
0156+  12FA 76 5B         cmp ah, '['
0157+  12FC C7 C5 12      jne _gets_loop
0158+  12FF             _gets_ansi_esc_2:
0159+  12FF 19 01         mov al, 1
0160+  1301 05 03         syscall sys_io          ; receive in AH without echo
0161+  1303 B9 00         cmp al, 0            ; check error code (AL)
0162+  1305 C6 FF 12      je _gets_ansi_esc_2  ; if no char received, retry
0163+  1308 76 44         cmp ah, 'D'
0164+  130A C6 15 13      je _gets_left_arrow
0165+  130D 76 43         cmp ah, 'C'
0166+  130F C6 19 13      je _gets_right_arrow
0167+  1312 0A C5 12      jmp _gets_loop
0168+  1315             _gets_left_arrow:
0169+  1315 7F            dec d
0170+  1316 0A C5 12      jmp _gets_loop
0171+  1319             _gets_right_arrow:
0172+  1319 79            inc d
0173+  131A 0A C5 12      jmp _gets_loop
0174+  131D             _gets_escape:
0175+  131D 19 01         mov al, 1
0176+  131F 05 03         syscall sys_io      ; receive in AH
0177+  1321 B9 00         cmp al, 0        ; check error code (AL)
0178+  1323 C6 1D 13      je _gets_escape      ; if no char received, retry
0179+  1326 76 6E         cmp ah, 'n'
0180+  1328 C6 47 13      je _gets_LF
0181+  132B 76 72         cmp ah, 'r'
0182+  132D C6 4E 13      je _gets_CR
0183+  1330 76 30         cmp ah, '0'
0184+  1332 C6 55 13      je _gets_NULL
0185+  1335 76 5C         cmp ah, $5C  ; '\'
0186+  1337 C6 40 13      je _gets_slash
0187+  133A 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  133B 3E            mov [d], al
0189+  133C 79            inc d
0190+  133D 0A C5 12      jmp _gets_loop
0191+  1340             _gets_slash:
0192+  1340 19 5C         mov al, $5C
0193+  1342 3E            mov [d], al
0194+  1343 79            inc d
0195+  1344 0A C5 12      jmp _gets_loop
0196+  1347             _gets_LF:
0197+  1347 19 0A         mov al, $0A
0198+  1349 3E            mov [d], al
0199+  134A 79            inc d
0200+  134B 0A C5 12      jmp _gets_loop
0201+  134E             _gets_CR:
0202+  134E 19 0D         mov al, $0D
0203+  1350 3E            mov [d], al
0204+  1351 79            inc d
0205+  1352 0A C5 12      jmp _gets_loop
0206+  1355             _gets_NULL:
0207+  1355 19 00         mov al, $00
0208+  1357 3E            mov [d], al
0209+  1358 79            inc d
0210+  1359 0A C5 12      jmp _gets_loop
0211+  135C             _gets_end:
0212+  135C 19 00         mov al, 0
0213+  135E 3E            mov [d], al        ; terminate string
0214+  135F E7            pop d
0215+  1360 E4            pop a
0216+  1361 09            ret
0217+  1362             
0218+  1362             
0219+  1362             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  1362             ;; INPUT TEXT
0221+  1362             ;; terminated with CTRL+D
0222+  1362             ;; pointer in D
0223+  1362             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  1362             _gettxt:
0225+  1362 D7            push a
0226+  1363 DA            push d
0227+  1364             _gettxt_loop:
0228+  1364 19 01         mov al, 1
0229+  1366 05 03         syscall sys_io      ; receive in AH
0230+  1368 B9 00         cmp al, 0        ; check error code (AL)
0231+  136A C6 64 13      je _gettxt_loop    ; if no char received, retry
0232+  136D 76 04         cmp ah, 4      ; EOT
0233+  136F C6 AD 13      je _gettxt_end
0234+  1372 76 08         cmp ah, $08      ; check for backspace
0235+  1374 C6 A9 13      je _gettxt_backspace
0236+  1377 76 5C         cmp ah, $5C        ; '\'
0237+  1379 C6 82 13      je _gettxt_escape
0238+  137C 1A            mov al, ah
0239+  137D 3E            mov [d], al
0240+  137E 79            inc d
0241+  137F 0A 64 13      jmp _gettxt_loop
0242+  1382             _gettxt_escape:
0243+  1382 19 01         mov al, 1
0244+  1384 05 03         syscall sys_io      ; receive in AH
0245+  1386 B9 00         cmp al, 0        ; check error code (AL)
0246+  1388 C6 82 13      je _gettxt_escape    ; if no char received, retry
0247+  138B 76 6E         cmp ah, 'n'
0248+  138D C6 9B 13      je _gettxt_LF
0249+  1390 76 72         cmp ah, 'r'
0250+  1392 C6 A2 13      je _gettxt_CR
0251+  1395 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  1396 3E            mov [d], al
0253+  1397 79            inc d
0254+  1398 0A 64 13      jmp _gettxt_loop
0255+  139B             _gettxt_LF:
0256+  139B 19 0A         mov al, $0A
0257+  139D 3E            mov [d], al
0258+  139E 79            inc d
0259+  139F 0A 64 13      jmp _gettxt_loop
0260+  13A2             _gettxt_CR:
0261+  13A2 19 0D         mov al, $0D
0262+  13A4 3E            mov [d], al
0263+  13A5 79            inc d
0264+  13A6 0A 64 13      jmp _gettxt_loop
0265+  13A9             _gettxt_backspace:
0266+  13A9 7F            dec d
0267+  13AA 0A 64 13      jmp _gettxt_loop
0268+  13AD             _gettxt_end:
0269+  13AD 19 00         mov al, 0
0270+  13AF 3E            mov [d], al        ; terminate string
0271+  13B0 E7            pop d
0272+  13B1 E4            pop a
0273+  13B2 09            ret
0274+  13B3             
0275+  13B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  13B3             ; PRINT NEW LINE
0277+  13B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  13B3             printnl:
0279+  13B3 D7            push a
0280+  13B4 10 00 0A      mov a, $0A00
0281+  13B7 05 03         syscall sys_io
0282+  13B9 10 00 0D      mov a, $0D00
0283+  13BC 05 03         syscall sys_io
0284+  13BE E4            pop a
0285+  13BF 09            ret
0286+  13C0             
0287+  13C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  13C0             ; _strtoint
0289+  13C0             ; 4 digit hex string number in d
0290+  13C0             ; integer returned in A
0291+  13C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  13C0             _strtointx:
0293+  13C0 D8            push b
0294+  13C1 32            mov bl, [d]
0295+  13C2 37            mov bh, bl
0296+  13C3 33 01 00      mov bl, [d + 1]
0297+  13C6 07 79 12      call _atoi        ; convert to int in AL
0298+  13C9 23            mov ah, al        ; move to AH
0299+  13CA 33 02 00      mov bl, [d + 2]
0300+  13CD 37            mov bh, bl
0301+  13CE 33 03 00      mov bl, [d + 3]
0302+  13D1 07 79 12      call _atoi        ; convert to int in AL
0303+  13D4 E5            pop b
0304+  13D5 09            ret
0305+  13D6             
0306+  13D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  13D6             ; _strtoint
0308+  13D6             ; 5 digit base10 string number in d
0309+  13D6             ; integer returned in A
0310+  13D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  13D6             _strtoint:
0312+  13D6 E2            push si
0313+  13D7 D8            push b
0314+  13D8 D9            push c
0315+  13D9 DA            push d
0316+  13DA 07 1B 12      call _strlen      ; get string length in C
0317+  13DD 7E            dec c
0318+  13DE FD 4E         mov si, d
0319+  13E0 12            mov a, c
0320+  13E1 FD 99         shl a
0321+  13E3 3B 52 15      mov d, table_power
0322+  13E6 59            add d, a
0323+  13E7 38 00 00      mov c, 0
0324+  13EA             _strtoint_L0:
0325+  13EA F6            lodsb      ; load ASCII to al
0326+  13EB B9 00         cmp al, 0
0327+  13ED C6 00 14      je _strtoint_end
0328+  13F0 6F 30         sub al, $30    ; make into integer
0329+  13F2 22 00         mov ah, 0
0330+  13F4 2A            mov b, [d]
0331+  13F5 AC            mul a, b      ; result in B since it fits in 16bits
0332+  13F6 11            mov a, b
0333+  13F7 28            mov b, c
0334+  13F8 54            add a, b
0335+  13F9 39            mov c, a
0336+  13FA 63 02 00      sub d, 2
0337+  13FD 0A EA 13      jmp _strtoint_L0
0338+  1400             _strtoint_end:
0339+  1400 12            mov a, c
0340+  1401 E7            pop d
0341+  1402 E6            pop c
0342+  1403 E5            pop b
0343+  1404 EF            pop si
0344+  1405 09            ret
0345+  1406             
0346+  1406             
0347+  1406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  1406             ; PRINT NULL TERMINATED STRING
0349+  1406             ; pointer in D
0350+  1406             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  1406             _puts:
0352+  1406 D7            push a
0353+  1407 DA            push d
0354+  1408             _puts_L1:
0355+  1408 1E            mov al, [d]
0356+  1409 B9 00         cmp al, 0
0357+  140B C6 17 14      jz _puts_END
0358+  140E 23            mov ah, al
0359+  140F 19 00         mov al, 0
0360+  1411 05 03         syscall sys_io
0361+  1413 79            inc d
0362+  1414 0A 08 14      jmp _puts_L1
0363+  1417             _puts_END:
0364+  1417 E7            pop d
0365+  1418 E4            pop a
0366+  1419 09            ret
0367+  141A             
0368+  141A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  141A             ; PRINT N SIZE STRING
0370+  141A             ; pointer in D
0371+  141A             ; size in C
0372+  141A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  141A             _putsn:
0374+  141A DB            push al
0375+  141B DA            push d
0376+  141C D9            push c
0377+  141D             _putsn_L0:
0378+  141D 1E            mov al, [d]
0379+  141E 23            mov ah, al
0380+  141F 19 00         mov al, 0
0381+  1421 05 03         syscall sys_io
0382+  1423 79            inc d
0383+  1424 7E            dec c  
0384+  1425 C2 00 00      cmp c, 0
0385+  1428 C7 1D 14      jne _putsn_L0
0386+  142B             _putsn_end:
0387+  142B E6            pop c
0388+  142C E7            pop d
0389+  142D E8            pop al
0390+  142E 09            ret
0391+  142F             
0392+  142F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  142F             ; print 16bit decimal number
0394+  142F             ; input number in A
0395+  142F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  142F             print_u16d:
0397+  142F D7            push a
0398+  1430 D8            push b
0399+  1431 26 10 27      mov b, 10000
0400+  1434 AE            div a, b      ; get 10000's coeff.
0401+  1435 07 57 14      call print_number
0402+  1438 11            mov a, b
0403+  1439 26 E8 03      mov b, 1000
0404+  143C AE            div a, b      ; get 1000's coeff.
0405+  143D 07 57 14      call print_number
0406+  1440 11            mov a, b
0407+  1441 26 64 00      mov b, 100
0408+  1444 AE            div a, b
0409+  1445 07 57 14      call print_number
0410+  1448 11            mov a, b
0411+  1449 26 0A 00      mov b, 10
0412+  144C AE            div a, b
0413+  144D 07 57 14      call print_number
0414+  1450 1B            mov al, bl      ; 1's coeff in bl
0415+  1451 07 57 14      call print_number
0416+  1454 E5            pop b
0417+  1455 E4            pop a
0418+  1456 09            ret
0419+  1457             
0420+  1457             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  1457             ; print AL
0422+  1457             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  1457             print_number:
0424+  1457 6A 30         add al, $30
0425+  1459 23            mov ah, al
0426+  145A 07 BC 12      call _putchar
0427+  145D 09            ret
0428+  145E             
0429+  145E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  145E             ; PRINT 16BIT HEX INTEGER
0431+  145E             ; integer value in reg B
0432+  145E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  145E             print_u16x:
0434+  145E D7            push a
0435+  145F D8            push b
0436+  1460 DD            push bl
0437+  1461 30            mov bl, bh
0438+  1462 07 8A 12      call _itoa        ; convert bh to char in A
0439+  1465 2F            mov bl, al        ; save al
0440+  1466 19 00         mov al, 0
0441+  1468 05 03         syscall sys_io        ; display AH
0442+  146A 24            mov ah, bl        ; retrieve al
0443+  146B 19 00         mov al, 0
0444+  146D 05 03         syscall sys_io        ; display AL
0445+  146F             
0446+  146F EA            pop bl
0447+  1470 07 8A 12      call _itoa        ; convert bh to char in A
0448+  1473 2F            mov bl, al        ; save al
0449+  1474 19 00         mov al, 0
0450+  1476 05 03         syscall sys_io        ; display AH
0451+  1478 24            mov ah, bl        ; retrieve al
0452+  1479 19 00         mov al, 0
0453+  147B 05 03         syscall sys_io        ; display AL
0454+  147D             
0455+  147D E5            pop b
0456+  147E E4            pop a
0457+  147F 09            ret
0458+  1480             
0459+  1480             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  1480             ; INPUT 16BIT HEX INTEGER
0461+  1480             ; read 16bit integer into A
0462+  1480             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  1480             scan_u16x:
0464+  1480 F8 10 00      enter 16
0465+  1483 D8            push b
0466+  1484 DA            push d
0467+  1485             
0468+  1485 FA F1 FF      lea d, [bp + -15]
0469+  1488 07 C3 12      call _gets        ; get number
0470+  148B             
0471+  148B 32            mov bl, [d]
0472+  148C 37            mov bh, bl
0473+  148D 33 01 00      mov bl, [d + 1]
0474+  1490 07 79 12      call _atoi        ; convert to int in AL
0475+  1493 23            mov ah, al        ; move to AH
0476+  1494             
0477+  1494 33 02 00      mov bl, [d + 2]
0478+  1497 37            mov bh, bl
0479+  1498 33 03 00      mov bl, [d + 3]
0480+  149B 07 79 12      call _atoi        ; convert to int in AL
0481+  149E             
0482+  149E E7            pop d
0483+  149F E5            pop b
0484+  14A0 F9            leave
0485+  14A1 09            ret
0486+  14A2             
0487+  14A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  14A2             ; PRINT 8bit HEX INTEGER
0489+  14A2             ; integer value in reg bl
0490+  14A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  14A2             print_u8x:
0492+  14A2 D7            push a
0493+  14A3 DD            push bl
0494+  14A4             
0495+  14A4 07 8A 12      call _itoa        ; convert bl to char in A
0496+  14A7 2F            mov bl, al        ; save al
0497+  14A8 19 00         mov al, 0
0498+  14AA 05 03         syscall sys_io        ; display AH
0499+  14AC 24            mov ah, bl        ; retrieve al
0500+  14AD 19 00         mov al, 0
0501+  14AF 05 03         syscall sys_io        ; display AL
0502+  14B1             
0503+  14B1 EA            pop bl
0504+  14B2 E4            pop a
0505+  14B3 09            ret
0506+  14B4             
0507+  14B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  14B4             ; print 8bit decimal unsigned number
0509+  14B4             ; input number in AL
0510+  14B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  14B4             print_u8d:
0512+  14B4 D7            push a
0513+  14B5 D8            push b
0514+  14B6             
0515+  14B6 22 00         mov ah, 0
0516+  14B8 26 64 00      mov b, 100
0517+  14BB AE            div a, b
0518+  14BC D8            push b      ; save remainder
0519+  14BD B9 00         cmp al, 0
0520+  14BF C6 C9 14      je skip100
0521+  14C2 6A 30         add al, $30
0522+  14C4 23            mov ah, al
0523+  14C5 19 00         mov al, 0
0524+  14C7 05 03         syscall sys_io  ; print coeff
0525+  14C9             skip100:
0526+  14C9 E4            pop a
0527+  14CA 22 00         mov ah, 0
0528+  14CC 26 0A 00      mov b, 10
0529+  14CF AE            div a, b
0530+  14D0 D8            push b      ; save remainder
0531+  14D1 B9 00         cmp al, 0
0532+  14D3 C6 DD 14      je skip10
0533+  14D6 6A 30         add al, $30
0534+  14D8 23            mov ah, al
0535+  14D9 19 00         mov al, 0
0536+  14DB 05 03         syscall sys_io  ; print coeff
0537+  14DD             skip10:
0538+  14DD E4            pop a
0539+  14DE 1B            mov al, bl
0540+  14DF 6A 30         add al, $30
0541+  14E1 23            mov ah, al
0542+  14E2 19 00         mov al, 0
0543+  14E4 05 03         syscall sys_io  ; print coeff
0544+  14E6 E5            pop b
0545+  14E7 E4            pop a
0546+  14E8 09            ret
0547+  14E9             
0548+  14E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  14E9             ; INPUT 8BIT HEX INTEGER
0550+  14E9             ; read 8bit integer into AL
0551+  14E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  14E9             scan_u8x:
0553+  14E9 F8 04 00      enter 4
0554+  14EC D8            push b
0555+  14ED DA            push d
0556+  14EE             
0557+  14EE FA FD FF      lea d, [bp + -3]
0558+  14F1 07 C3 12      call _gets        ; get number
0559+  14F4             
0560+  14F4 32            mov bl, [d]
0561+  14F5 37            mov bh, bl
0562+  14F6 33 01 00      mov bl, [d + 1]
0563+  14F9 07 79 12      call _atoi        ; convert to int in AL
0564+  14FC             
0565+  14FC E7            pop d
0566+  14FD E5            pop b
0567+  14FE F9            leave
0568+  14FF 09            ret
0569+  1500             
0570+  1500             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  1500             ; input decimal number
0572+  1500             ; result in A
0573+  1500             ; 655'\0'
0574+  1500             ; low--------high
0575+  1500             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  1500             scan_u16d:
0577+  1500 F8 08 00      enter 8
0578+  1503 E2            push si
0579+  1504 D8            push b
0580+  1505 D9            push c
0581+  1506 DA            push d
0582+  1507 FA F9 FF      lea d, [bp +- 7]
0583+  150A 07 C3 12      call _gets
0584+  150D 07 1B 12      call _strlen      ; get string length in C
0585+  1510 7E            dec c
0586+  1511 FD 4E         mov si, d
0587+  1513 12            mov a, c
0588+  1514 FD 99         shl a
0589+  1516 3B 52 15      mov d, table_power
0590+  1519 59            add d, a
0591+  151A 38 00 00      mov c, 0
0592+  151D             mul_loop:
0593+  151D F6            lodsb      ; load ASCII to al
0594+  151E B9 00         cmp al, 0
0595+  1520 C6 33 15      je mul_exit
0596+  1523 6F 30         sub al, $30    ; make into integer
0597+  1525 22 00         mov ah, 0
0598+  1527 2A            mov b, [d]
0599+  1528 AC            mul a, b      ; result in B since it fits in 16bits
0600+  1529 11            mov a, b
0601+  152A 28            mov b, c
0602+  152B 54            add a, b
0603+  152C 39            mov c, a
0604+  152D 63 02 00      sub d, 2
0605+  1530 0A 1D 15      jmp mul_loop
0606+  1533             mul_exit:
0607+  1533 12            mov a, c
0608+  1534 E7            pop d
0609+  1535 E6            pop c
0610+  1536 E5            pop b
0611+  1537 EF            pop si
0612+  1538 F9            leave
0613+  1539 09            ret
0614+  153A             
0615+  153A             
0616+  153A 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  153E 34 35 36 37 
0616+  1542 38 39 41 42 
0616+  1546 43 44 45 46 
0617+  154A 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  154E 1B 5B 48 00 
0618+  1552             
0619+  1552             table_power:
0620+  1552 01 00         .dw 1
0621+  1554 0A 00         .dw 10
0622+  1556 64 00         .dw 100
0623+  1558 E8 03         .dw 1000
0624+  155A 10 27         .dw 100002517   155C             ; --- END INLINE ASM BLOCK
2518   155C             
2519   155C F9            leave
2520   155D 09            ret
2521   155E             
2522   155E             back:
2523   155E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2524   1561             ; $t 
2525   1561 52 02 00      sub sp, 2
2526   1564             ;; t = token; 
2527   1564 FA FF FF      lea d, [bp + -1] ; $t
2528   1567 DA            push d
2529   1568 3B 81 27      mov d, _token_data ; $token
2530   156B 2D            mov b, d
2531   156C E7            pop d
2532   156D FD 43         mov [d], b
2533   156F             ;; while(*t++) prog--; 
2534   156F             _while29_cond:
2535   156F FA FF FF      lea d, [bp + -1] ; $t
2536   1572 2A            mov b, [d]
2537   1573 FD 79         mov g, b
2538   1575 FD 77         inc b
2539   1577 FA FF FF      lea d, [bp + -1] ; $t
2540   157A FD 43         mov [d], b
2541   157C FD 27         mov b, g
2542   157E 74            mov d, b
2543   157F 32            mov bl, [d]
2544   1580 A7 00         mov bh, 0
2545   1582 C0 00 00      cmp b, 0
2546   1585 C6 9A 15      je _while29_exit
2547   1588             _while29_block:
2548   1588             ;; prog--; 
2549   1588 3B 7F 27      mov d, _prog ; $prog
2550   158B 2A            mov b, [d]
2551   158C FD 79         mov g, b
2552   158E FD 7D         dec b
2553   1590 3B 7F 27      mov d, _prog ; $prog
2554   1593 FD 43         mov [d], b
2555   1595 FD 27         mov b, g
2556   1597 0A 6F 15      jmp _while29_cond
2557   159A             _while29_exit:
2558   159A             ;; tok = TOK_UNDEF; 
2559   159A 3B 7B 27      mov d, _tok ; $tok
2560   159D DA            push d
2561   159E 26 00 00      mov b, 0; TOK_UNDEF
2562   15A1 E7            pop d
2563   15A2 FD 43         mov [d], b
2564   15A4             ;; toktype = TYPE_UNDEF; 
2565   15A4 3B 7D 27      mov d, _toktype ; $toktype
2566   15A7 DA            push d
2567   15A8 26 00 00      mov b, 0; TYPE_UNDEF
2568   15AB E7            pop d
2569   15AC FD 43         mov [d], b
2570   15AE             ;; token[0] = '\0'; 
2571   15AE 3B 81 27      mov d, _token_data ; $token
2572   15B1 D7            push a
2573   15B2 DA            push d
2574   15B3 26 00 00      mov b, $0
2575   15B6 E7            pop d
2576   15B7 5A            add d, b
2577   15B8 E4            pop a
2578   15B9 DA            push d
2579   15BA 26 00 00      mov b, $0
2580   15BD E7            pop d
2581   15BE FD 3E         mov [d], bl
2582   15C0 F9            leave
2583   15C1 09            ret
2584   15C2             
2585   15C2             get_path:
2586   15C2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2587   15C5             ; $t 
2588   15C5 52 02 00      sub sp, 2
2589   15C8             ;; *token = '\0'; 
2590   15C8 3B 81 27      mov d, _token_data ; $token
2591   15CB 2D            mov b, d
2592   15CC D8            push b
2593   15CD 26 00 00      mov b, $0
2594   15D0 E7            pop d
2595   15D1 FD 3E         mov [d], bl
2596   15D3             ;; t = token; 
2597   15D3 FA FF FF      lea d, [bp + -1] ; $t
2598   15D6 DA            push d
2599   15D7 3B 81 27      mov d, _token_data ; $token
2600   15DA 2D            mov b, d
2601   15DB E7            pop d
2602   15DC FD 43         mov [d], b
2603   15DE             ;; while(is_space(*prog)) prog++; 
2604   15DE             _while30_cond:
2605   15DE 3B 7F 27      mov d, _prog ; $prog
2606   15E1 2A            mov b, [d]
2607   15E2 74            mov d, b
2608   15E3 32            mov bl, [d]
2609   15E4 A7 00         mov bh, 0
2610   15E6 DD            push bl
2611   15E7 07 52 05      call is_space
2612   15EA 51 01 00      add sp, 1
2613   15ED C0 00 00      cmp b, 0
2614   15F0 C6 05 16      je _while30_exit
2615   15F3             _while30_block:
2616   15F3             ;; prog++; 
2617   15F3 3B 7F 27      mov d, _prog ; $prog
2618   15F6 2A            mov b, [d]
2619   15F7 FD 79         mov g, b
2620   15F9 FD 77         inc b
2621   15FB 3B 7F 27      mov d, _prog ; $prog
2622   15FE FD 43         mov [d], b
2623   1600 FD 27         mov b, g
2624   1602 0A DE 15      jmp _while30_cond
2625   1605             _while30_exit:
2626   1605             ;; if(*prog == '\0'){ 
2627   1605             _if31_cond:
2628   1605 3B 7F 27      mov d, _prog ; $prog
2629   1608 2A            mov b, [d]
2630   1609 74            mov d, b
2631   160A 32            mov bl, [d]
2632   160B A7 00         mov bh, 0
2633   160D             ; START RELATIONAL
2634   160D D7            push a
2635   160E 11            mov a, b
2636   160F 26 00 00      mov b, $0
2637   1612 B0            cmp a, b
2638   1613 FD 71         seq ; ==
2639   1615 E4            pop a
2640   1616             ; END RELATIONAL
2641   1616 C0 00 00      cmp b, 0
2642   1619 C6 21 16      je _if31_exit
2643   161C             _if31_true:
2644   161C             ;; return; 
2645   161C F9            leave
2646   161D 09            ret
2647   161E 0A 21 16      jmp _if31_exit
2648   1621             _if31_exit:
2649   1621             ;; while( 
2650   1621             _while32_cond:
2651   1621 3B 7F 27      mov d, _prog ; $prog
2652   1624 2A            mov b, [d]
2653   1625 74            mov d, b
2654   1626 32            mov bl, [d]
2655   1627 A7 00         mov bh, 0
2656   1629             ; START RELATIONAL
2657   1629 D7            push a
2658   162A 11            mov a, b
2659   162B 26 61 00      mov b, $61
2660   162E B0            cmp a, b
2661   162F FD 80         sge ; >=
2662   1631 E4            pop a
2663   1632             ; END RELATIONAL
2664   1632 D7            push a
2665   1633 11            mov a, b
2666   1634 3B 7F 27      mov d, _prog ; $prog
2667   1637 2A            mov b, [d]
2668   1638 74            mov d, b
2669   1639 32            mov bl, [d]
2670   163A A7 00         mov bh, 0
2671   163C             ; START RELATIONAL
2672   163C D7            push a
2673   163D 11            mov a, b
2674   163E 26 7A 00      mov b, $7a
2675   1641 B0            cmp a, b
2676   1642 FD 74         sle ; <=
2677   1644 E4            pop a
2678   1645             ; END RELATIONAL
2679   1645 FD A7         sand a, b ; &&
2680   1647 E4            pop a
2681   1648 D7            push a
2682   1649 11            mov a, b
2683   164A 3B 7F 27      mov d, _prog ; $prog
2684   164D 2A            mov b, [d]
2685   164E 74            mov d, b
2686   164F 32            mov bl, [d]
2687   1650 A7 00         mov bh, 0
2688   1652             ; START RELATIONAL
2689   1652 D7            push a
2690   1653 11            mov a, b
2691   1654 26 41 00      mov b, $41
2692   1657 B0            cmp a, b
2693   1658 FD 80         sge ; >=
2694   165A E4            pop a
2695   165B             ; END RELATIONAL
2696   165B D7            push a
2697   165C 11            mov a, b
2698   165D 3B 7F 27      mov d, _prog ; $prog
2699   1660 2A            mov b, [d]
2700   1661 74            mov d, b
2701   1662 32            mov bl, [d]
2702   1663 A7 00         mov bh, 0
2703   1665             ; START RELATIONAL
2704   1665 D7            push a
2705   1666 11            mov a, b
2706   1667 26 5A 00      mov b, $5a
2707   166A B0            cmp a, b
2708   166B FD 74         sle ; <=
2709   166D E4            pop a
2710   166E             ; END RELATIONAL
2711   166E FD A7         sand a, b ; &&
2712   1670 E4            pop a
2713   1671 FD A8         sor a, b ; ||
2714   1673 11            mov a, b
2715   1674 3B 7F 27      mov d, _prog ; $prog
2716   1677 2A            mov b, [d]
2717   1678 74            mov d, b
2718   1679 32            mov bl, [d]
2719   167A A7 00         mov bh, 0
2720   167C             ; START RELATIONAL
2721   167C D7            push a
2722   167D 11            mov a, b
2723   167E 26 30 00      mov b, $30
2724   1681 B0            cmp a, b
2725   1682 FD 80         sge ; >=
2726   1684 E4            pop a
2727   1685             ; END RELATIONAL
2728   1685 D7            push a
2729   1686 11            mov a, b
2730   1687 3B 7F 27      mov d, _prog ; $prog
2731   168A 2A            mov b, [d]
2732   168B 74            mov d, b
2733   168C 32            mov bl, [d]
2734   168D A7 00         mov bh, 0
2735   168F             ; START RELATIONAL
2736   168F D7            push a
2737   1690 11            mov a, b
2738   1691 26 39 00      mov b, $39
2739   1694 B0            cmp a, b
2740   1695 FD 74         sle ; <=
2741   1697 E4            pop a
2742   1698             ; END RELATIONAL
2743   1698 FD A7         sand a, b ; &&
2744   169A E4            pop a
2745   169B FD A8         sor a, b ; ||
2746   169D 11            mov a, b
2747   169E 3B 7F 27      mov d, _prog ; $prog
2748   16A1 2A            mov b, [d]
2749   16A2 74            mov d, b
2750   16A3 32            mov bl, [d]
2751   16A4 A7 00         mov bh, 0
2752   16A6             ; START RELATIONAL
2753   16A6 D7            push a
2754   16A7 11            mov a, b
2755   16A8 26 2F 00      mov b, $2f
2756   16AB B0            cmp a, b
2757   16AC FD 71         seq ; ==
2758   16AE E4            pop a
2759   16AF             ; END RELATIONAL
2760   16AF FD A8         sor a, b ; ||
2761   16B1 11            mov a, b
2762   16B2 3B 7F 27      mov d, _prog ; $prog
2763   16B5 2A            mov b, [d]
2764   16B6 74            mov d, b
2765   16B7 32            mov bl, [d]
2766   16B8 A7 00         mov bh, 0
2767   16BA             ; START RELATIONAL
2768   16BA D7            push a
2769   16BB 11            mov a, b
2770   16BC 26 5F 00      mov b, $5f
2771   16BF B0            cmp a, b
2772   16C0 FD 71         seq ; ==
2773   16C2 E4            pop a
2774   16C3             ; END RELATIONAL
2775   16C3 FD A8         sor a, b ; ||
2776   16C5 11            mov a, b
2777   16C6 3B 7F 27      mov d, _prog ; $prog
2778   16C9 2A            mov b, [d]
2779   16CA 74            mov d, b
2780   16CB 32            mov bl, [d]
2781   16CC A7 00         mov bh, 0
2782   16CE             ; START RELATIONAL
2783   16CE D7            push a
2784   16CF 11            mov a, b
2785   16D0 26 2D 00      mov b, $2d
2786   16D3 B0            cmp a, b
2787   16D4 FD 71         seq ; ==
2788   16D6 E4            pop a
2789   16D7             ; END RELATIONAL
2790   16D7 FD A8         sor a, b ; ||
2791   16D9 11            mov a, b
2792   16DA 3B 7F 27      mov d, _prog ; $prog
2793   16DD 2A            mov b, [d]
2794   16DE 74            mov d, b
2795   16DF 32            mov bl, [d]
2796   16E0 A7 00         mov bh, 0
2797   16E2             ; START RELATIONAL
2798   16E2 D7            push a
2799   16E3 11            mov a, b
2800   16E4 26 2E 00      mov b, $2e
2801   16E7 B0            cmp a, b
2802   16E8 FD 71         seq ; ==
2803   16EA E4            pop a
2804   16EB             ; END RELATIONAL
2805   16EB FD A8         sor a, b ; ||
2806   16ED E4            pop a
2807   16EE C0 00 00      cmp b, 0
2808   16F1 C6 1D 17      je _while32_exit
2809   16F4             _while32_block:
2810   16F4             ;; *t++ = *prog++; 
2811   16F4 FA FF FF      lea d, [bp + -1] ; $t
2812   16F7 2A            mov b, [d]
2813   16F8 FD 79         mov g, b
2814   16FA FD 77         inc b
2815   16FC FA FF FF      lea d, [bp + -1] ; $t
2816   16FF FD 43         mov [d], b
2817   1701 FD 27         mov b, g
2818   1703 D8            push b
2819   1704 3B 7F 27      mov d, _prog ; $prog
2820   1707 2A            mov b, [d]
2821   1708 FD 79         mov g, b
2822   170A FD 77         inc b
2823   170C 3B 7F 27      mov d, _prog ; $prog
2824   170F FD 43         mov [d], b
2825   1711 FD 27         mov b, g
2826   1713 74            mov d, b
2827   1714 32            mov bl, [d]
2828   1715 A7 00         mov bh, 0
2829   1717 E7            pop d
2830   1718 FD 3E         mov [d], bl
2831   171A 0A 21 16      jmp _while32_cond
2832   171D             _while32_exit:
2833   171D             ;; *t = '\0'; 
2834   171D FA FF FF      lea d, [bp + -1] ; $t
2835   1720 2A            mov b, [d]
2836   1721 D8            push b
2837   1722 26 00 00      mov b, $0
2838   1725 E7            pop d
2839   1726 FD 3E         mov [d], bl
2840   1728 F9            leave
2841   1729 09            ret
2842   172A             
2843   172A             get:
2844   172A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2845   172D             ; $t 
2846   172D 52 02 00      sub sp, 2
2847   1730             ;; *token = '\0'; 
2848   1730 3B 81 27      mov d, _token_data ; $token
2849   1733 2D            mov b, d
2850   1734 D8            push b
2851   1735 26 00 00      mov b, $0
2852   1738 E7            pop d
2853   1739 FD 3E         mov [d], bl
2854   173B             ;; tok = 0; 
2855   173B 3B 7B 27      mov d, _tok ; $tok
2856   173E DA            push d
2857   173F 26 00 00      mov b, $0
2858   1742 E7            pop d
2859   1743 FD 43         mov [d], b
2860   1745             ;; toktype = 0; 
2861   1745 3B 7D 27      mov d, _toktype ; $toktype
2862   1748 DA            push d
2863   1749 26 00 00      mov b, $0
2864   174C E7            pop d
2865   174D FD 43         mov [d], b
2866   174F             ;; t = token; 
2867   174F FA FF FF      lea d, [bp + -1] ; $t
2868   1752 DA            push d
2869   1753 3B 81 27      mov d, _token_data ; $token
2870   1756 2D            mov b, d
2871   1757 E7            pop d
2872   1758 FD 43         mov [d], b
2873   175A             ;; while(is_space(*prog)) prog++; 
2874   175A             _while33_cond:
2875   175A 3B 7F 27      mov d, _prog ; $prog
2876   175D 2A            mov b, [d]
2877   175E 74            mov d, b
2878   175F 32            mov bl, [d]
2879   1760 A7 00         mov bh, 0
2880   1762 DD            push bl
2881   1763 07 52 05      call is_space
2882   1766 51 01 00      add sp, 1
2883   1769 C0 00 00      cmp b, 0
2884   176C C6 81 17      je _while33_exit
2885   176F             _while33_block:
2886   176F             ;; prog++; 
2887   176F 3B 7F 27      mov d, _prog ; $prog
2888   1772 2A            mov b, [d]
2889   1773 FD 79         mov g, b
2890   1775 FD 77         inc b
2891   1777 3B 7F 27      mov d, _prog ; $prog
2892   177A FD 43         mov [d], b
2893   177C FD 27         mov b, g
2894   177E 0A 5A 17      jmp _while33_cond
2895   1781             _while33_exit:
2896   1781             ;; if(*prog == '\0'){ 
2897   1781             _if34_cond:
2898   1781 3B 7F 27      mov d, _prog ; $prog
2899   1784 2A            mov b, [d]
2900   1785 74            mov d, b
2901   1786 32            mov bl, [d]
2902   1787 A7 00         mov bh, 0
2903   1789             ; START RELATIONAL
2904   1789 D7            push a
2905   178A 11            mov a, b
2906   178B 26 00 00      mov b, $0
2907   178E B0            cmp a, b
2908   178F FD 71         seq ; ==
2909   1791 E4            pop a
2910   1792             ; END RELATIONAL
2911   1792 C0 00 00      cmp b, 0
2912   1795 C6 A7 17      je _if34_exit
2913   1798             _if34_true:
2914   1798             ;; toktype = END; 
2915   1798 3B 7D 27      mov d, _toktype ; $toktype
2916   179B DA            push d
2917   179C 26 06 00      mov b, 6; END
2918   179F E7            pop d
2919   17A0 FD 43         mov [d], b
2920   17A2             ;; return; 
2921   17A2 F9            leave
2922   17A3 09            ret
2923   17A4 0A A7 17      jmp _if34_exit
2924   17A7             _if34_exit:
2925   17A7             ;; if(is_digit(*prog)){ 
2926   17A7             _if35_cond:
2927   17A7 3B 7F 27      mov d, _prog ; $prog
2928   17AA 2A            mov b, [d]
2929   17AB 74            mov d, b
2930   17AC 32            mov bl, [d]
2931   17AD A7 00         mov bh, 0
2932   17AF DD            push bl
2933   17B0 07 9E 05      call is_digit
2934   17B3 51 01 00      add sp, 1
2935   17B6 C0 00 00      cmp b, 0
2936   17B9 C6 14 18      je _if35_else
2937   17BC             _if35_true:
2938   17BC             ;; while(is_digit(*prog)){ 
2939   17BC             _while36_cond:
2940   17BC 3B 7F 27      mov d, _prog ; $prog
2941   17BF 2A            mov b, [d]
2942   17C0 74            mov d, b
2943   17C1 32            mov bl, [d]
2944   17C2 A7 00         mov bh, 0
2945   17C4 DD            push bl
2946   17C5 07 9E 05      call is_digit
2947   17C8 51 01 00      add sp, 1
2948   17CB C0 00 00      cmp b, 0
2949   17CE C6 FA 17      je _while36_exit
2950   17D1             _while36_block:
2951   17D1             ;; *t++ = *prog++; 
2952   17D1 FA FF FF      lea d, [bp + -1] ; $t
2953   17D4 2A            mov b, [d]
2954   17D5 FD 79         mov g, b
2955   17D7 FD 77         inc b
2956   17D9 FA FF FF      lea d, [bp + -1] ; $t
2957   17DC FD 43         mov [d], b
2958   17DE FD 27         mov b, g
2959   17E0 D8            push b
2960   17E1 3B 7F 27      mov d, _prog ; $prog
2961   17E4 2A            mov b, [d]
2962   17E5 FD 79         mov g, b
2963   17E7 FD 77         inc b
2964   17E9 3B 7F 27      mov d, _prog ; $prog
2965   17EC FD 43         mov [d], b
2966   17EE FD 27         mov b, g
2967   17F0 74            mov d, b
2968   17F1 32            mov bl, [d]
2969   17F2 A7 00         mov bh, 0
2970   17F4 E7            pop d
2971   17F5 FD 3E         mov [d], bl
2972   17F7 0A BC 17      jmp _while36_cond
2973   17FA             _while36_exit:
2974   17FA             ;; *t = '\0'; 
2975   17FA FA FF FF      lea d, [bp + -1] ; $t
2976   17FD 2A            mov b, [d]
2977   17FE D8            push b
2978   17FF 26 00 00      mov b, $0
2979   1802 E7            pop d
2980   1803 FD 3E         mov [d], bl
2981   1805             ;; toktype = INTEGER_CONST; 
2982   1805 3B 7D 27      mov d, _toktype ; $toktype
2983   1808 DA            push d
2984   1809 26 04 00      mov b, 4; INTEGER_CONST
2985   180C E7            pop d
2986   180D FD 43         mov [d], b
2987   180F             ;; return; // return to avoid *t = '\0' line at the end of function 
2988   180F F9            leave
2989   1810 09            ret
2990   1811 0A EE 24      jmp _if35_exit
2991   1814             _if35_else:
2992   1814             ;; if(is_alpha(*prog)){ 
2993   1814             _if37_cond:
2994   1814 3B 7F 27      mov d, _prog ; $prog
2995   1817 2A            mov b, [d]
2996   1818 74            mov d, b
2997   1819 32            mov bl, [d]
2998   181A A7 00         mov bh, 0
2999   181C DD            push bl
3000   181D 07 C6 05      call is_alpha
3001   1820 51 01 00      add sp, 1
3002   1823 C0 00 00      cmp b, 0
3003   1826 C6 93 18      je _if37_else
3004   1829             _if37_true:
3005   1829             ;; while(is_alpha(*prog) || is_digit(*prog)){ 
3006   1829             _while38_cond:
3007   1829 3B 7F 27      mov d, _prog ; $prog
3008   182C 2A            mov b, [d]
3009   182D 74            mov d, b
3010   182E 32            mov bl, [d]
3011   182F A7 00         mov bh, 0
3012   1831 DD            push bl
3013   1832 07 C6 05      call is_alpha
3014   1835 51 01 00      add sp, 1
3015   1838 D7            push a
3016   1839 11            mov a, b
3017   183A 3B 7F 27      mov d, _prog ; $prog
3018   183D 2A            mov b, [d]
3019   183E 74            mov d, b
3020   183F 32            mov bl, [d]
3021   1840 A7 00         mov bh, 0
3022   1842 DD            push bl
3023   1843 07 9E 05      call is_digit
3024   1846 51 01 00      add sp, 1
3025   1849 FD A8         sor a, b ; ||
3026   184B E4            pop a
3027   184C C0 00 00      cmp b, 0
3028   184F C6 7B 18      je _while38_exit
3029   1852             _while38_block:
3030   1852             ;; *t++ = *prog++; 
3031   1852 FA FF FF      lea d, [bp + -1] ; $t
3032   1855 2A            mov b, [d]
3033   1856 FD 79         mov g, b
3034   1858 FD 77         inc b
3035   185A FA FF FF      lea d, [bp + -1] ; $t
3036   185D FD 43         mov [d], b
3037   185F FD 27         mov b, g
3038   1861 D8            push b
3039   1862 3B 7F 27      mov d, _prog ; $prog
3040   1865 2A            mov b, [d]
3041   1866 FD 79         mov g, b
3042   1868 FD 77         inc b
3043   186A 3B 7F 27      mov d, _prog ; $prog
3044   186D FD 43         mov [d], b
3045   186F FD 27         mov b, g
3046   1871 74            mov d, b
3047   1872 32            mov bl, [d]
3048   1873 A7 00         mov bh, 0
3049   1875 E7            pop d
3050   1876 FD 3E         mov [d], bl
3051   1878 0A 29 18      jmp _while38_cond
3052   187B             _while38_exit:
3053   187B             ;; *t = '\0'; 
3054   187B FA FF FF      lea d, [bp + -1] ; $t
3055   187E 2A            mov b, [d]
3056   187F D8            push b
3057   1880 26 00 00      mov b, $0
3058   1883 E7            pop d
3059   1884 FD 3E         mov [d], bl
3060   1886             ;; toktype = IDENTIFIER; 
3061   1886 3B 7D 27      mov d, _toktype ; $toktype
3062   1889 DA            push d
3063   188A 26 05 00      mov b, 5; IDENTIFIER
3064   188D E7            pop d
3065   188E FD 43         mov [d], b
3066   1890 0A EE 24      jmp _if37_exit
3067   1893             _if37_else:
3068   1893             ;; if(*prog == '\"'){ 
3069   1893             _if39_cond:
3070   1893 3B 7F 27      mov d, _prog ; $prog
3071   1896 2A            mov b, [d]
3072   1897 74            mov d, b
3073   1898 32            mov bl, [d]
3074   1899 A7 00         mov bh, 0
3075   189B             ; START RELATIONAL
3076   189B D7            push a
3077   189C 11            mov a, b
3078   189D 26 22 00      mov b, $22
3079   18A0 B0            cmp a, b
3080   18A1 FD 71         seq ; ==
3081   18A3 E4            pop a
3082   18A4             ; END RELATIONAL
3083   18A4 C0 00 00      cmp b, 0
3084   18A7 C6 82 19      je _if39_else
3085   18AA             _if39_true:
3086   18AA             ;; *t++ = '\"'; 
3087   18AA FA FF FF      lea d, [bp + -1] ; $t
3088   18AD 2A            mov b, [d]
3089   18AE FD 79         mov g, b
3090   18B0 FD 77         inc b
3091   18B2 FA FF FF      lea d, [bp + -1] ; $t
3092   18B5 FD 43         mov [d], b
3093   18B7 FD 27         mov b, g
3094   18B9 D8            push b
3095   18BA 26 22 00      mov b, $22
3096   18BD E7            pop d
3097   18BE FD 3E         mov [d], bl
3098   18C0             ;; prog++; 
3099   18C0 3B 7F 27      mov d, _prog ; $prog
3100   18C3 2A            mov b, [d]
3101   18C4 FD 79         mov g, b
3102   18C6 FD 77         inc b
3103   18C8 3B 7F 27      mov d, _prog ; $prog
3104   18CB FD 43         mov [d], b
3105   18CD FD 27         mov b, g
3106   18CF             ;; while(*prog != '\"' && *prog){ 
3107   18CF             _while40_cond:
3108   18CF 3B 7F 27      mov d, _prog ; $prog
3109   18D2 2A            mov b, [d]
3110   18D3 74            mov d, b
3111   18D4 32            mov bl, [d]
3112   18D5 A7 00         mov bh, 0
3113   18D7             ; START RELATIONAL
3114   18D7 D7            push a
3115   18D8 11            mov a, b
3116   18D9 26 22 00      mov b, $22
3117   18DC B0            cmp a, b
3118   18DD FD 72         sneq ; !=
3119   18DF E4            pop a
3120   18E0             ; END RELATIONAL
3121   18E0 D7            push a
3122   18E1 11            mov a, b
3123   18E2 3B 7F 27      mov d, _prog ; $prog
3124   18E5 2A            mov b, [d]
3125   18E6 74            mov d, b
3126   18E7 32            mov bl, [d]
3127   18E8 A7 00         mov bh, 0
3128   18EA FD A7         sand a, b ; &&
3129   18EC E4            pop a
3130   18ED C0 00 00      cmp b, 0
3131   18F0 C6 1C 19      je _while40_exit
3132   18F3             _while40_block:
3133   18F3             ;; *t++ = *prog++; 
3134   18F3 FA FF FF      lea d, [bp + -1] ; $t
3135   18F6 2A            mov b, [d]
3136   18F7 FD 79         mov g, b
3137   18F9 FD 77         inc b
3138   18FB FA FF FF      lea d, [bp + -1] ; $t
3139   18FE FD 43         mov [d], b
3140   1900 FD 27         mov b, g
3141   1902 D8            push b
3142   1903 3B 7F 27      mov d, _prog ; $prog
3143   1906 2A            mov b, [d]
3144   1907 FD 79         mov g, b
3145   1909 FD 77         inc b
3146   190B 3B 7F 27      mov d, _prog ; $prog
3147   190E FD 43         mov [d], b
3148   1910 FD 27         mov b, g
3149   1912 74            mov d, b
3150   1913 32            mov bl, [d]
3151   1914 A7 00         mov bh, 0
3152   1916 E7            pop d
3153   1917 FD 3E         mov [d], bl
3154   1919 0A CF 18      jmp _while40_cond
3155   191C             _while40_exit:
3156   191C             ;; if(*prog != '\"') error("Double quotes expected"); 
3157   191C             _if41_cond:
3158   191C 3B 7F 27      mov d, _prog ; $prog
3159   191F 2A            mov b, [d]
3160   1920 74            mov d, b
3161   1921 32            mov bl, [d]
3162   1922 A7 00         mov bh, 0
3163   1924             ; START RELATIONAL
3164   1924 D7            push a
3165   1925 11            mov a, b
3166   1926 26 22 00      mov b, $22
3167   1929 B0            cmp a, b
3168   192A FD 72         sneq ; !=
3169   192C E4            pop a
3170   192D             ; END RELATIONAL
3171   192D C0 00 00      cmp b, 0
3172   1930 C6 42 19      je _if41_exit
3173   1933             _if41_true:
3174   1933             ;; error("Double quotes expected"); 
3175   1933 26 EF 2B      mov b, __s4 ; "Double quotes expected"
3176   1936 FD AB         swp b
3177   1938 D8            push b
3178   1939 07 51 27      call error
3179   193C 51 02 00      add sp, 2
3180   193F 0A 42 19      jmp _if41_exit
3181   1942             _if41_exit:
3182   1942             ;; *t++ = '\"'; 
3183   1942 FA FF FF      lea d, [bp + -1] ; $t
3184   1945 2A            mov b, [d]
3185   1946 FD 79         mov g, b
3186   1948 FD 77         inc b
3187   194A FA FF FF      lea d, [bp + -1] ; $t
3188   194D FD 43         mov [d], b
3189   194F FD 27         mov b, g
3190   1951 D8            push b
3191   1952 26 22 00      mov b, $22
3192   1955 E7            pop d
3193   1956 FD 3E         mov [d], bl
3194   1958             ;; prog++; 
3195   1958 3B 7F 27      mov d, _prog ; $prog
3196   195B 2A            mov b, [d]
3197   195C FD 79         mov g, b
3198   195E FD 77         inc b
3199   1960 3B 7F 27      mov d, _prog ; $prog
3200   1963 FD 43         mov [d], b
3201   1965 FD 27         mov b, g
3202   1967             ;; toktype = STRING_CONST; 
3203   1967 3B 7D 27      mov d, _toktype ; $toktype
3204   196A DA            push d
3205   196B 26 03 00      mov b, 3; STRING_CONST
3206   196E E7            pop d
3207   196F FD 43         mov [d], b
3208   1971             ;; *t = '\0'; 
3209   1971 FA FF FF      lea d, [bp + -1] ; $t
3210   1974 2A            mov b, [d]
3211   1975 D8            push b
3212   1976 26 00 00      mov b, $0
3213   1979 E7            pop d
3214   197A FD 3E         mov [d], bl
3215   197C             ;; convert_constant(); // converts this string token qith quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
3216   197C 07 FB 24      call convert_constant
3217   197F 0A EE 24      jmp _if39_exit
3218   1982             _if39_else:
3219   1982             ;; if(*prog == '#'){ 
3220   1982             _if42_cond:
3221   1982 3B 7F 27      mov d, _prog ; $prog
3222   1985 2A            mov b, [d]
3223   1986 74            mov d, b
3224   1987 32            mov bl, [d]
3225   1988 A7 00         mov bh, 0
3226   198A             ; START RELATIONAL
3227   198A D7            push a
3228   198B 11            mov a, b
3229   198C 26 23 00      mov b, $23
3230   198F B0            cmp a, b
3231   1990 FD 71         seq ; ==
3232   1992 E4            pop a
3233   1993             ; END RELATIONAL
3234   1993 C0 00 00      cmp b, 0
3235   1996 C6 D6 19      je _if42_else
3236   1999             _if42_true:
3237   1999             ;; *t++ = *prog++; 
3238   1999 FA FF FF      lea d, [bp + -1] ; $t
3239   199C 2A            mov b, [d]
3240   199D FD 79         mov g, b
3241   199F FD 77         inc b
3242   19A1 FA FF FF      lea d, [bp + -1] ; $t
3243   19A4 FD 43         mov [d], b
3244   19A6 FD 27         mov b, g
3245   19A8 D8            push b
3246   19A9 3B 7F 27      mov d, _prog ; $prog
3247   19AC 2A            mov b, [d]
3248   19AD FD 79         mov g, b
3249   19AF FD 77         inc b
3250   19B1 3B 7F 27      mov d, _prog ; $prog
3251   19B4 FD 43         mov [d], b
3252   19B6 FD 27         mov b, g
3253   19B8 74            mov d, b
3254   19B9 32            mov bl, [d]
3255   19BA A7 00         mov bh, 0
3256   19BC E7            pop d
3257   19BD FD 3E         mov [d], bl
3258   19BF             ;; tok = HASH; 
3259   19BF 3B 7B 27      mov d, _tok ; $tok
3260   19C2 DA            push d
3261   19C3 26 15 00      mov b, 21; HASH
3262   19C6 E7            pop d
3263   19C7 FD 43         mov [d], b
3264   19C9             ;; toktype = DELIMITER;   
3265   19C9 3B 7D 27      mov d, _toktype ; $toktype
3266   19CC DA            push d
3267   19CD 26 01 00      mov b, 1; DELIMITER
3268   19D0 E7            pop d
3269   19D1 FD 43         mov [d], b
3270   19D3 0A EE 24      jmp _if42_exit
3271   19D6             _if42_else:
3272   19D6             ;; if(*prog == '{'){ 
3273   19D6             _if43_cond:
3274   19D6 3B 7F 27      mov d, _prog ; $prog
3275   19D9 2A            mov b, [d]
3276   19DA 74            mov d, b
3277   19DB 32            mov bl, [d]
3278   19DC A7 00         mov bh, 0
3279   19DE             ; START RELATIONAL
3280   19DE D7            push a
3281   19DF 11            mov a, b
3282   19E0 26 7B 00      mov b, $7b
3283   19E3 B0            cmp a, b
3284   19E4 FD 71         seq ; ==
3285   19E6 E4            pop a
3286   19E7             ; END RELATIONAL
3287   19E7 C0 00 00      cmp b, 0
3288   19EA C6 2A 1A      je _if43_else
3289   19ED             _if43_true:
3290   19ED             ;; *t++ = *prog++; 
3291   19ED FA FF FF      lea d, [bp + -1] ; $t
3292   19F0 2A            mov b, [d]
3293   19F1 FD 79         mov g, b
3294   19F3 FD 77         inc b
3295   19F5 FA FF FF      lea d, [bp + -1] ; $t
3296   19F8 FD 43         mov [d], b
3297   19FA FD 27         mov b, g
3298   19FC D8            push b
3299   19FD 3B 7F 27      mov d, _prog ; $prog
3300   1A00 2A            mov b, [d]
3301   1A01 FD 79         mov g, b
3302   1A03 FD 77         inc b
3303   1A05 3B 7F 27      mov d, _prog ; $prog
3304   1A08 FD 43         mov [d], b
3305   1A0A FD 27         mov b, g
3306   1A0C 74            mov d, b
3307   1A0D 32            mov bl, [d]
3308   1A0E A7 00         mov bh, 0
3309   1A10 E7            pop d
3310   1A11 FD 3E         mov [d], bl
3311   1A13             ;; tok = OPENING_BRACE; 
3312   1A13 3B 7B 27      mov d, _tok ; $tok
3313   1A16 DA            push d
3314   1A17 26 1E 00      mov b, 30; OPENING_BRACE
3315   1A1A E7            pop d
3316   1A1B FD 43         mov [d], b
3317   1A1D             ;; toktype = DELIMITER;   
3318   1A1D 3B 7D 27      mov d, _toktype ; $toktype
3319   1A20 DA            push d
3320   1A21 26 01 00      mov b, 1; DELIMITER
3321   1A24 E7            pop d
3322   1A25 FD 43         mov [d], b
3323   1A27 0A EE 24      jmp _if43_exit
3324   1A2A             _if43_else:
3325   1A2A             ;; if(*prog == '}'){ 
3326   1A2A             _if44_cond:
3327   1A2A 3B 7F 27      mov d, _prog ; $prog
3328   1A2D 2A            mov b, [d]
3329   1A2E 74            mov d, b
3330   1A2F 32            mov bl, [d]
3331   1A30 A7 00         mov bh, 0
3332   1A32             ; START RELATIONAL
3333   1A32 D7            push a
3334   1A33 11            mov a, b
3335   1A34 26 7D 00      mov b, $7d
3336   1A37 B0            cmp a, b
3337   1A38 FD 71         seq ; ==
3338   1A3A E4            pop a
3339   1A3B             ; END RELATIONAL
3340   1A3B C0 00 00      cmp b, 0
3341   1A3E C6 7E 1A      je _if44_else
3342   1A41             _if44_true:
3343   1A41             ;; *t++ = *prog++; 
3344   1A41 FA FF FF      lea d, [bp + -1] ; $t
3345   1A44 2A            mov b, [d]
3346   1A45 FD 79         mov g, b
3347   1A47 FD 77         inc b
3348   1A49 FA FF FF      lea d, [bp + -1] ; $t
3349   1A4C FD 43         mov [d], b
3350   1A4E FD 27         mov b, g
3351   1A50 D8            push b
3352   1A51 3B 7F 27      mov d, _prog ; $prog
3353   1A54 2A            mov b, [d]
3354   1A55 FD 79         mov g, b
3355   1A57 FD 77         inc b
3356   1A59 3B 7F 27      mov d, _prog ; $prog
3357   1A5C FD 43         mov [d], b
3358   1A5E FD 27         mov b, g
3359   1A60 74            mov d, b
3360   1A61 32            mov bl, [d]
3361   1A62 A7 00         mov bh, 0
3362   1A64 E7            pop d
3363   1A65 FD 3E         mov [d], bl
3364   1A67             ;; tok = CLOSING_BRACE; 
3365   1A67 3B 7B 27      mov d, _tok ; $tok
3366   1A6A DA            push d
3367   1A6B 26 1F 00      mov b, 31; CLOSING_BRACE
3368   1A6E E7            pop d
3369   1A6F FD 43         mov [d], b
3370   1A71             ;; toktype = DELIMITER;   
3371   1A71 3B 7D 27      mov d, _toktype ; $toktype
3372   1A74 DA            push d
3373   1A75 26 01 00      mov b, 1; DELIMITER
3374   1A78 E7            pop d
3375   1A79 FD 43         mov [d], b
3376   1A7B 0A EE 24      jmp _if44_exit
3377   1A7E             _if44_else:
3378   1A7E             ;; if(*prog == '['){ 
3379   1A7E             _if45_cond:
3380   1A7E 3B 7F 27      mov d, _prog ; $prog
3381   1A81 2A            mov b, [d]
3382   1A82 74            mov d, b
3383   1A83 32            mov bl, [d]
3384   1A84 A7 00         mov bh, 0
3385   1A86             ; START RELATIONAL
3386   1A86 D7            push a
3387   1A87 11            mov a, b
3388   1A88 26 5B 00      mov b, $5b
3389   1A8B B0            cmp a, b
3390   1A8C FD 71         seq ; ==
3391   1A8E E4            pop a
3392   1A8F             ; END RELATIONAL
3393   1A8F C0 00 00      cmp b, 0
3394   1A92 C6 D2 1A      je _if45_else
3395   1A95             _if45_true:
3396   1A95             ;; *t++ = *prog++; 
3397   1A95 FA FF FF      lea d, [bp + -1] ; $t
3398   1A98 2A            mov b, [d]
3399   1A99 FD 79         mov g, b
3400   1A9B FD 77         inc b
3401   1A9D FA FF FF      lea d, [bp + -1] ; $t
3402   1AA0 FD 43         mov [d], b
3403   1AA2 FD 27         mov b, g
3404   1AA4 D8            push b
3405   1AA5 3B 7F 27      mov d, _prog ; $prog
3406   1AA8 2A            mov b, [d]
3407   1AA9 FD 79         mov g, b
3408   1AAB FD 77         inc b
3409   1AAD 3B 7F 27      mov d, _prog ; $prog
3410   1AB0 FD 43         mov [d], b
3411   1AB2 FD 27         mov b, g
3412   1AB4 74            mov d, b
3413   1AB5 32            mov bl, [d]
3414   1AB6 A7 00         mov bh, 0
3415   1AB8 E7            pop d
3416   1AB9 FD 3E         mov [d], bl
3417   1ABB             ;; tok = OPENING_BRACKET; 
3418   1ABB 3B 7B 27      mov d, _tok ; $tok
3419   1ABE DA            push d
3420   1ABF 26 20 00      mov b, 32; OPENING_BRACKET
3421   1AC2 E7            pop d
3422   1AC3 FD 43         mov [d], b
3423   1AC5             ;; toktype = DELIMITER;   
3424   1AC5 3B 7D 27      mov d, _toktype ; $toktype
3425   1AC8 DA            push d
3426   1AC9 26 01 00      mov b, 1; DELIMITER
3427   1ACC E7            pop d
3428   1ACD FD 43         mov [d], b
3429   1ACF 0A EE 24      jmp _if45_exit
3430   1AD2             _if45_else:
3431   1AD2             ;; if(*prog == ']'){ 
3432   1AD2             _if46_cond:
3433   1AD2 3B 7F 27      mov d, _prog ; $prog
3434   1AD5 2A            mov b, [d]
3435   1AD6 74            mov d, b
3436   1AD7 32            mov bl, [d]
3437   1AD8 A7 00         mov bh, 0
3438   1ADA             ; START RELATIONAL
3439   1ADA D7            push a
3440   1ADB 11            mov a, b
3441   1ADC 26 5D 00      mov b, $5d
3442   1ADF B0            cmp a, b
3443   1AE0 FD 71         seq ; ==
3444   1AE2 E4            pop a
3445   1AE3             ; END RELATIONAL
3446   1AE3 C0 00 00      cmp b, 0
3447   1AE6 C6 26 1B      je _if46_else
3448   1AE9             _if46_true:
3449   1AE9             ;; *t++ = *prog++; 
3450   1AE9 FA FF FF      lea d, [bp + -1] ; $t
3451   1AEC 2A            mov b, [d]
3452   1AED FD 79         mov g, b
3453   1AEF FD 77         inc b
3454   1AF1 FA FF FF      lea d, [bp + -1] ; $t
3455   1AF4 FD 43         mov [d], b
3456   1AF6 FD 27         mov b, g
3457   1AF8 D8            push b
3458   1AF9 3B 7F 27      mov d, _prog ; $prog
3459   1AFC 2A            mov b, [d]
3460   1AFD FD 79         mov g, b
3461   1AFF FD 77         inc b
3462   1B01 3B 7F 27      mov d, _prog ; $prog
3463   1B04 FD 43         mov [d], b
3464   1B06 FD 27         mov b, g
3465   1B08 74            mov d, b
3466   1B09 32            mov bl, [d]
3467   1B0A A7 00         mov bh, 0
3468   1B0C E7            pop d
3469   1B0D FD 3E         mov [d], bl
3470   1B0F             ;; tok = CLOSING_BRACKET; 
3471   1B0F 3B 7B 27      mov d, _tok ; $tok
3472   1B12 DA            push d
3473   1B13 26 21 00      mov b, 33; CLOSING_BRACKET
3474   1B16 E7            pop d
3475   1B17 FD 43         mov [d], b
3476   1B19             ;; toktype = DELIMITER;   
3477   1B19 3B 7D 27      mov d, _toktype ; $toktype
3478   1B1C DA            push d
3479   1B1D 26 01 00      mov b, 1; DELIMITER
3480   1B20 E7            pop d
3481   1B21 FD 43         mov [d], b
3482   1B23 0A EE 24      jmp _if46_exit
3483   1B26             _if46_else:
3484   1B26             ;; if(*prog == '='){ 
3485   1B26             _if47_cond:
3486   1B26 3B 7F 27      mov d, _prog ; $prog
3487   1B29 2A            mov b, [d]
3488   1B2A 74            mov d, b
3489   1B2B 32            mov bl, [d]
3490   1B2C A7 00         mov bh, 0
3491   1B2E             ; START RELATIONAL
3492   1B2E D7            push a
3493   1B2F 11            mov a, b
3494   1B30 26 3D 00      mov b, $3d
3495   1B33 B0            cmp a, b
3496   1B34 FD 71         seq ; ==
3497   1B36 E4            pop a
3498   1B37             ; END RELATIONAL
3499   1B37 C0 00 00      cmp b, 0
3500   1B3A C6 C4 1B      je _if47_else
3501   1B3D             _if47_true:
3502   1B3D             ;; *t++ = *prog++; 
3503   1B3D FA FF FF      lea d, [bp + -1] ; $t
3504   1B40 2A            mov b, [d]
3505   1B41 FD 79         mov g, b
3506   1B43 FD 77         inc b
3507   1B45 FA FF FF      lea d, [bp + -1] ; $t
3508   1B48 FD 43         mov [d], b
3509   1B4A FD 27         mov b, g
3510   1B4C D8            push b
3511   1B4D 3B 7F 27      mov d, _prog ; $prog
3512   1B50 2A            mov b, [d]
3513   1B51 FD 79         mov g, b
3514   1B53 FD 77         inc b
3515   1B55 3B 7F 27      mov d, _prog ; $prog
3516   1B58 FD 43         mov [d], b
3517   1B5A FD 27         mov b, g
3518   1B5C 74            mov d, b
3519   1B5D 32            mov bl, [d]
3520   1B5E A7 00         mov bh, 0
3521   1B60 E7            pop d
3522   1B61 FD 3E         mov [d], bl
3523   1B63             ;; if (*prog == '='){ 
3524   1B63             _if48_cond:
3525   1B63 3B 7F 27      mov d, _prog ; $prog
3526   1B66 2A            mov b, [d]
3527   1B67 74            mov d, b
3528   1B68 32            mov bl, [d]
3529   1B69 A7 00         mov bh, 0
3530   1B6B             ; START RELATIONAL
3531   1B6B D7            push a
3532   1B6C 11            mov a, b
3533   1B6D 26 3D 00      mov b, $3d
3534   1B70 B0            cmp a, b
3535   1B71 FD 71         seq ; ==
3536   1B73 E4            pop a
3537   1B74             ; END RELATIONAL
3538   1B74 C0 00 00      cmp b, 0
3539   1B77 C6 AD 1B      je _if48_else
3540   1B7A             _if48_true:
3541   1B7A             ;; *t++ = *prog++; 
3542   1B7A FA FF FF      lea d, [bp + -1] ; $t
3543   1B7D 2A            mov b, [d]
3544   1B7E FD 79         mov g, b
3545   1B80 FD 77         inc b
3546   1B82 FA FF FF      lea d, [bp + -1] ; $t
3547   1B85 FD 43         mov [d], b
3548   1B87 FD 27         mov b, g
3549   1B89 D8            push b
3550   1B8A 3B 7F 27      mov d, _prog ; $prog
3551   1B8D 2A            mov b, [d]
3552   1B8E FD 79         mov g, b
3553   1B90 FD 77         inc b
3554   1B92 3B 7F 27      mov d, _prog ; $prog
3555   1B95 FD 43         mov [d], b
3556   1B97 FD 27         mov b, g
3557   1B99 74            mov d, b
3558   1B9A 32            mov bl, [d]
3559   1B9B A7 00         mov bh, 0
3560   1B9D E7            pop d
3561   1B9E FD 3E         mov [d], bl
3562   1BA0             ;; tok = EQUAL; 
3563   1BA0 3B 7B 27      mov d, _tok ; $tok
3564   1BA3 DA            push d
3565   1BA4 26 08 00      mov b, 8; EQUAL
3566   1BA7 E7            pop d
3567   1BA8 FD 43         mov [d], b
3568   1BAA 0A B7 1B      jmp _if48_exit
3569   1BAD             _if48_else:
3570   1BAD             ;; tok = ASSIGNMENT; 
3571   1BAD 3B 7B 27      mov d, _tok ; $tok
3572   1BB0 DA            push d
3573   1BB1 26 11 00      mov b, 17; ASSIGNMENT
3574   1BB4 E7            pop d
3575   1BB5 FD 43         mov [d], b
3576   1BB7             _if48_exit:
3577   1BB7             ;; toktype = DELIMITER;   
3578   1BB7 3B 7D 27      mov d, _toktype ; $toktype
3579   1BBA DA            push d
3580   1BBB 26 01 00      mov b, 1; DELIMITER
3581   1BBE E7            pop d
3582   1BBF FD 43         mov [d], b
3583   1BC1 0A EE 24      jmp _if47_exit
3584   1BC4             _if47_else:
3585   1BC4             ;; if(*prog == '&'){ 
3586   1BC4             _if49_cond:
3587   1BC4 3B 7F 27      mov d, _prog ; $prog
3588   1BC7 2A            mov b, [d]
3589   1BC8 74            mov d, b
3590   1BC9 32            mov bl, [d]
3591   1BCA A7 00         mov bh, 0
3592   1BCC             ; START RELATIONAL
3593   1BCC D7            push a
3594   1BCD 11            mov a, b
3595   1BCE 26 26 00      mov b, $26
3596   1BD1 B0            cmp a, b
3597   1BD2 FD 71         seq ; ==
3598   1BD4 E4            pop a
3599   1BD5             ; END RELATIONAL
3600   1BD5 C0 00 00      cmp b, 0
3601   1BD8 C6 62 1C      je _if49_else
3602   1BDB             _if49_true:
3603   1BDB             ;; *t++ = *prog++; 
3604   1BDB FA FF FF      lea d, [bp + -1] ; $t
3605   1BDE 2A            mov b, [d]
3606   1BDF FD 79         mov g, b
3607   1BE1 FD 77         inc b
3608   1BE3 FA FF FF      lea d, [bp + -1] ; $t
3609   1BE6 FD 43         mov [d], b
3610   1BE8 FD 27         mov b, g
3611   1BEA D8            push b
3612   1BEB 3B 7F 27      mov d, _prog ; $prog
3613   1BEE 2A            mov b, [d]
3614   1BEF FD 79         mov g, b
3615   1BF1 FD 77         inc b
3616   1BF3 3B 7F 27      mov d, _prog ; $prog
3617   1BF6 FD 43         mov [d], b
3618   1BF8 FD 27         mov b, g
3619   1BFA 74            mov d, b
3620   1BFB 32            mov bl, [d]
3621   1BFC A7 00         mov bh, 0
3622   1BFE E7            pop d
3623   1BFF FD 3E         mov [d], bl
3624   1C01             ;; if(*prog == '&'){ 
3625   1C01             _if50_cond:
3626   1C01 3B 7F 27      mov d, _prog ; $prog
3627   1C04 2A            mov b, [d]
3628   1C05 74            mov d, b
3629   1C06 32            mov bl, [d]
3630   1C07 A7 00         mov bh, 0
3631   1C09             ; START RELATIONAL
3632   1C09 D7            push a
3633   1C0A 11            mov a, b
3634   1C0B 26 26 00      mov b, $26
3635   1C0E B0            cmp a, b
3636   1C0F FD 71         seq ; ==
3637   1C11 E4            pop a
3638   1C12             ; END RELATIONAL
3639   1C12 C0 00 00      cmp b, 0
3640   1C15 C6 4B 1C      je _if50_else
3641   1C18             _if50_true:
3642   1C18             ;; *t++ = *prog++; 
3643   1C18 FA FF FF      lea d, [bp + -1] ; $t
3644   1C1B 2A            mov b, [d]
3645   1C1C FD 79         mov g, b
3646   1C1E FD 77         inc b
3647   1C20 FA FF FF      lea d, [bp + -1] ; $t
3648   1C23 FD 43         mov [d], b
3649   1C25 FD 27         mov b, g
3650   1C27 D8            push b
3651   1C28 3B 7F 27      mov d, _prog ; $prog
3652   1C2B 2A            mov b, [d]
3653   1C2C FD 79         mov g, b
3654   1C2E FD 77         inc b
3655   1C30 3B 7F 27      mov d, _prog ; $prog
3656   1C33 FD 43         mov [d], b
3657   1C35 FD 27         mov b, g
3658   1C37 74            mov d, b
3659   1C38 32            mov bl, [d]
3660   1C39 A7 00         mov bh, 0
3661   1C3B E7            pop d
3662   1C3C FD 3E         mov [d], bl
3663   1C3E             ;; tok = LOGICAL_AND; 
3664   1C3E 3B 7B 27      mov d, _tok ; $tok
3665   1C41 DA            push d
3666   1C42 26 0E 00      mov b, 14; LOGICAL_AND
3667   1C45 E7            pop d
3668   1C46 FD 43         mov [d], b
3669   1C48 0A 55 1C      jmp _if50_exit
3670   1C4B             _if50_else:
3671   1C4B             ;; tok = AMPERSAND; 
3672   1C4B 3B 7B 27      mov d, _tok ; $tok
3673   1C4E DA            push d
3674   1C4F 26 16 00      mov b, 22; AMPERSAND
3675   1C52 E7            pop d
3676   1C53 FD 43         mov [d], b
3677   1C55             _if50_exit:
3678   1C55             ;; toktype = DELIMITER;   
3679   1C55 3B 7D 27      mov d, _toktype ; $toktype
3680   1C58 DA            push d
3681   1C59 26 01 00      mov b, 1; DELIMITER
3682   1C5C E7            pop d
3683   1C5D FD 43         mov [d], b
3684   1C5F 0A EE 24      jmp _if49_exit
3685   1C62             _if49_else:
3686   1C62             ;; if(*prog == '|'){ 
3687   1C62             _if51_cond:
3688   1C62 3B 7F 27      mov d, _prog ; $prog
3689   1C65 2A            mov b, [d]
3690   1C66 74            mov d, b
3691   1C67 32            mov bl, [d]
3692   1C68 A7 00         mov bh, 0
3693   1C6A             ; START RELATIONAL
3694   1C6A D7            push a
3695   1C6B 11            mov a, b
3696   1C6C 26 7C 00      mov b, $7c
3697   1C6F B0            cmp a, b
3698   1C70 FD 71         seq ; ==
3699   1C72 E4            pop a
3700   1C73             ; END RELATIONAL
3701   1C73 C0 00 00      cmp b, 0
3702   1C76 C6 00 1D      je _if51_else
3703   1C79             _if51_true:
3704   1C79             ;; *t++ = *prog++; 
3705   1C79 FA FF FF      lea d, [bp + -1] ; $t
3706   1C7C 2A            mov b, [d]
3707   1C7D FD 79         mov g, b
3708   1C7F FD 77         inc b
3709   1C81 FA FF FF      lea d, [bp + -1] ; $t
3710   1C84 FD 43         mov [d], b
3711   1C86 FD 27         mov b, g
3712   1C88 D8            push b
3713   1C89 3B 7F 27      mov d, _prog ; $prog
3714   1C8C 2A            mov b, [d]
3715   1C8D FD 79         mov g, b
3716   1C8F FD 77         inc b
3717   1C91 3B 7F 27      mov d, _prog ; $prog
3718   1C94 FD 43         mov [d], b
3719   1C96 FD 27         mov b, g
3720   1C98 74            mov d, b
3721   1C99 32            mov bl, [d]
3722   1C9A A7 00         mov bh, 0
3723   1C9C E7            pop d
3724   1C9D FD 3E         mov [d], bl
3725   1C9F             ;; if (*prog == '|'){ 
3726   1C9F             _if52_cond:
3727   1C9F 3B 7F 27      mov d, _prog ; $prog
3728   1CA2 2A            mov b, [d]
3729   1CA3 74            mov d, b
3730   1CA4 32            mov bl, [d]
3731   1CA5 A7 00         mov bh, 0
3732   1CA7             ; START RELATIONAL
3733   1CA7 D7            push a
3734   1CA8 11            mov a, b
3735   1CA9 26 7C 00      mov b, $7c
3736   1CAC B0            cmp a, b
3737   1CAD FD 71         seq ; ==
3738   1CAF E4            pop a
3739   1CB0             ; END RELATIONAL
3740   1CB0 C0 00 00      cmp b, 0
3741   1CB3 C6 E9 1C      je _if52_else
3742   1CB6             _if52_true:
3743   1CB6             ;; *t++ = *prog++; 
3744   1CB6 FA FF FF      lea d, [bp + -1] ; $t
3745   1CB9 2A            mov b, [d]
3746   1CBA FD 79         mov g, b
3747   1CBC FD 77         inc b
3748   1CBE FA FF FF      lea d, [bp + -1] ; $t
3749   1CC1 FD 43         mov [d], b
3750   1CC3 FD 27         mov b, g
3751   1CC5 D8            push b
3752   1CC6 3B 7F 27      mov d, _prog ; $prog
3753   1CC9 2A            mov b, [d]
3754   1CCA FD 79         mov g, b
3755   1CCC FD 77         inc b
3756   1CCE 3B 7F 27      mov d, _prog ; $prog
3757   1CD1 FD 43         mov [d], b
3758   1CD3 FD 27         mov b, g
3759   1CD5 74            mov d, b
3760   1CD6 32            mov bl, [d]
3761   1CD7 A7 00         mov bh, 0
3762   1CD9 E7            pop d
3763   1CDA FD 3E         mov [d], bl
3764   1CDC             ;; tok = LOGICAL_OR; 
3765   1CDC 3B 7B 27      mov d, _tok ; $tok
3766   1CDF DA            push d
3767   1CE0 26 0F 00      mov b, 15; LOGICAL_OR
3768   1CE3 E7            pop d
3769   1CE4 FD 43         mov [d], b
3770   1CE6 0A F3 1C      jmp _if52_exit
3771   1CE9             _if52_else:
3772   1CE9             ;; tok = BITWISE_OR; 
3773   1CE9 3B 7B 27      mov d, _tok ; $tok
3774   1CEC DA            push d
3775   1CED 26 18 00      mov b, 24; BITWISE_OR
3776   1CF0 E7            pop d
3777   1CF1 FD 43         mov [d], b
3778   1CF3             _if52_exit:
3779   1CF3             ;; toktype = DELIMITER;   
3780   1CF3 3B 7D 27      mov d, _toktype ; $toktype
3781   1CF6 DA            push d
3782   1CF7 26 01 00      mov b, 1; DELIMITER
3783   1CFA E7            pop d
3784   1CFB FD 43         mov [d], b
3785   1CFD 0A EE 24      jmp _if51_exit
3786   1D00             _if51_else:
3787   1D00             ;; if(*prog == '~'){ 
3788   1D00             _if53_cond:
3789   1D00 3B 7F 27      mov d, _prog ; $prog
3790   1D03 2A            mov b, [d]
3791   1D04 74            mov d, b
3792   1D05 32            mov bl, [d]
3793   1D06 A7 00         mov bh, 0
3794   1D08             ; START RELATIONAL
3795   1D08 D7            push a
3796   1D09 11            mov a, b
3797   1D0A 26 7E 00      mov b, $7e
3798   1D0D B0            cmp a, b
3799   1D0E FD 71         seq ; ==
3800   1D10 E4            pop a
3801   1D11             ; END RELATIONAL
3802   1D11 C0 00 00      cmp b, 0
3803   1D14 C6 54 1D      je _if53_else
3804   1D17             _if53_true:
3805   1D17             ;; *t++ = *prog++; 
3806   1D17 FA FF FF      lea d, [bp + -1] ; $t
3807   1D1A 2A            mov b, [d]
3808   1D1B FD 79         mov g, b
3809   1D1D FD 77         inc b
3810   1D1F FA FF FF      lea d, [bp + -1] ; $t
3811   1D22 FD 43         mov [d], b
3812   1D24 FD 27         mov b, g
3813   1D26 D8            push b
3814   1D27 3B 7F 27      mov d, _prog ; $prog
3815   1D2A 2A            mov b, [d]
3816   1D2B FD 79         mov g, b
3817   1D2D FD 77         inc b
3818   1D2F 3B 7F 27      mov d, _prog ; $prog
3819   1D32 FD 43         mov [d], b
3820   1D34 FD 27         mov b, g
3821   1D36 74            mov d, b
3822   1D37 32            mov bl, [d]
3823   1D38 A7 00         mov bh, 0
3824   1D3A E7            pop d
3825   1D3B FD 3E         mov [d], bl
3826   1D3D             ;; tok = BITWISE_NOT; 
3827   1D3D 3B 7B 27      mov d, _tok ; $tok
3828   1D40 DA            push d
3829   1D41 26 19 00      mov b, 25; BITWISE_NOT
3830   1D44 E7            pop d
3831   1D45 FD 43         mov [d], b
3832   1D47             ;; toktype = DELIMITER;   
3833   1D47 3B 7D 27      mov d, _toktype ; $toktype
3834   1D4A DA            push d
3835   1D4B 26 01 00      mov b, 1; DELIMITER
3836   1D4E E7            pop d
3837   1D4F FD 43         mov [d], b
3838   1D51 0A EE 24      jmp _if53_exit
3839   1D54             _if53_else:
3840   1D54             ;; if(*prog == '<'){ 
3841   1D54             _if54_cond:
3842   1D54 3B 7F 27      mov d, _prog ; $prog
3843   1D57 2A            mov b, [d]
3844   1D58 74            mov d, b
3845   1D59 32            mov bl, [d]
3846   1D5A A7 00         mov bh, 0
3847   1D5C             ; START RELATIONAL
3848   1D5C D7            push a
3849   1D5D 11            mov a, b
3850   1D5E 26 3C 00      mov b, $3c
3851   1D61 B0            cmp a, b
3852   1D62 FD 71         seq ; ==
3853   1D64 E4            pop a
3854   1D65             ; END RELATIONAL
3855   1D65 C0 00 00      cmp b, 0
3856   1D68 C6 3C 1E      je _if54_else
3857   1D6B             _if54_true:
3858   1D6B             ;; *t++ = *prog++; 
3859   1D6B FA FF FF      lea d, [bp + -1] ; $t
3860   1D6E 2A            mov b, [d]
3861   1D6F FD 79         mov g, b
3862   1D71 FD 77         inc b
3863   1D73 FA FF FF      lea d, [bp + -1] ; $t
3864   1D76 FD 43         mov [d], b
3865   1D78 FD 27         mov b, g
3866   1D7A D8            push b
3867   1D7B 3B 7F 27      mov d, _prog ; $prog
3868   1D7E 2A            mov b, [d]
3869   1D7F FD 79         mov g, b
3870   1D81 FD 77         inc b
3871   1D83 3B 7F 27      mov d, _prog ; $prog
3872   1D86 FD 43         mov [d], b
3873   1D88 FD 27         mov b, g
3874   1D8A 74            mov d, b
3875   1D8B 32            mov bl, [d]
3876   1D8C A7 00         mov bh, 0
3877   1D8E E7            pop d
3878   1D8F FD 3E         mov [d], bl
3879   1D91             ;; if (*prog == '='){ 
3880   1D91             _if55_cond:
3881   1D91 3B 7F 27      mov d, _prog ; $prog
3882   1D94 2A            mov b, [d]
3883   1D95 74            mov d, b
3884   1D96 32            mov bl, [d]
3885   1D97 A7 00         mov bh, 0
3886   1D99             ; START RELATIONAL
3887   1D99 D7            push a
3888   1D9A 11            mov a, b
3889   1D9B 26 3D 00      mov b, $3d
3890   1D9E B0            cmp a, b
3891   1D9F FD 71         seq ; ==
3892   1DA1 E4            pop a
3893   1DA2             ; END RELATIONAL
3894   1DA2 C0 00 00      cmp b, 0
3895   1DA5 C6 DB 1D      je _if55_else
3896   1DA8             _if55_true:
3897   1DA8             ;; *t++ = *prog++; 
3898   1DA8 FA FF FF      lea d, [bp + -1] ; $t
3899   1DAB 2A            mov b, [d]
3900   1DAC FD 79         mov g, b
3901   1DAE FD 77         inc b
3902   1DB0 FA FF FF      lea d, [bp + -1] ; $t
3903   1DB3 FD 43         mov [d], b
3904   1DB5 FD 27         mov b, g
3905   1DB7 D8            push b
3906   1DB8 3B 7F 27      mov d, _prog ; $prog
3907   1DBB 2A            mov b, [d]
3908   1DBC FD 79         mov g, b
3909   1DBE FD 77         inc b
3910   1DC0 3B 7F 27      mov d, _prog ; $prog
3911   1DC3 FD 43         mov [d], b
3912   1DC5 FD 27         mov b, g
3913   1DC7 74            mov d, b
3914   1DC8 32            mov bl, [d]
3915   1DC9 A7 00         mov bh, 0
3916   1DCB E7            pop d
3917   1DCC FD 3E         mov [d], bl
3918   1DCE             ;; tok = LESS_THAN_OR_EQUAL; 
3919   1DCE 3B 7B 27      mov d, _tok ; $tok
3920   1DD1 DA            push d
3921   1DD2 26 0B 00      mov b, 11; LESS_THAN_OR_EQUAL
3922   1DD5 E7            pop d
3923   1DD6 FD 43         mov [d], b
3924   1DD8 0A 2F 1E      jmp _if55_exit
3925   1DDB             _if55_else:
3926   1DDB             ;; if (*prog == '<'){ 
3927   1DDB             _if56_cond:
3928   1DDB 3B 7F 27      mov d, _prog ; $prog
3929   1DDE 2A            mov b, [d]
3930   1DDF 74            mov d, b
3931   1DE0 32            mov bl, [d]
3932   1DE1 A7 00         mov bh, 0
3933   1DE3             ; START RELATIONAL
3934   1DE3 D7            push a
3935   1DE4 11            mov a, b
3936   1DE5 26 3C 00      mov b, $3c
3937   1DE8 B0            cmp a, b
3938   1DE9 FD 71         seq ; ==
3939   1DEB E4            pop a
3940   1DEC             ; END RELATIONAL
3941   1DEC C0 00 00      cmp b, 0
3942   1DEF C6 25 1E      je _if56_else
3943   1DF2             _if56_true:
3944   1DF2             ;; *t++ = *prog++; 
3945   1DF2 FA FF FF      lea d, [bp + -1] ; $t
3946   1DF5 2A            mov b, [d]
3947   1DF6 FD 79         mov g, b
3948   1DF8 FD 77         inc b
3949   1DFA FA FF FF      lea d, [bp + -1] ; $t
3950   1DFD FD 43         mov [d], b
3951   1DFF FD 27         mov b, g
3952   1E01 D8            push b
3953   1E02 3B 7F 27      mov d, _prog ; $prog
3954   1E05 2A            mov b, [d]
3955   1E06 FD 79         mov g, b
3956   1E08 FD 77         inc b
3957   1E0A 3B 7F 27      mov d, _prog ; $prog
3958   1E0D FD 43         mov [d], b
3959   1E0F FD 27         mov b, g
3960   1E11 74            mov d, b
3961   1E12 32            mov bl, [d]
3962   1E13 A7 00         mov bh, 0
3963   1E15 E7            pop d
3964   1E16 FD 3E         mov [d], bl
3965   1E18             ;; tok = BITWISE_SHL; 
3966   1E18 3B 7B 27      mov d, _tok ; $tok
3967   1E1B DA            push d
3968   1E1C 26 1A 00      mov b, 26; BITWISE_SHL
3969   1E1F E7            pop d
3970   1E20 FD 43         mov [d], b
3971   1E22 0A 2F 1E      jmp _if56_exit
3972   1E25             _if56_else:
3973   1E25             ;; tok = LESS_THAN; 
3974   1E25 3B 7B 27      mov d, _tok ; $tok
3975   1E28 DA            push d
3976   1E29 26 0A 00      mov b, 10; LESS_THAN
3977   1E2C E7            pop d
3978   1E2D FD 43         mov [d], b
3979   1E2F             _if56_exit:
3980   1E2F             _if55_exit:
3981   1E2F             ;; toktype = DELIMITER;   
3982   1E2F 3B 7D 27      mov d, _toktype ; $toktype
3983   1E32 DA            push d
3984   1E33 26 01 00      mov b, 1; DELIMITER
3985   1E36 E7            pop d
3986   1E37 FD 43         mov [d], b
3987   1E39 0A EE 24      jmp _if54_exit
3988   1E3C             _if54_else:
3989   1E3C             ;; if(*prog == '>'){ 
3990   1E3C             _if57_cond:
3991   1E3C 3B 7F 27      mov d, _prog ; $prog
3992   1E3F 2A            mov b, [d]
3993   1E40 74            mov d, b
3994   1E41 32            mov bl, [d]
3995   1E42 A7 00         mov bh, 0
3996   1E44             ; START RELATIONAL
3997   1E44 D7            push a
3998   1E45 11            mov a, b
3999   1E46 26 3E 00      mov b, $3e
4000   1E49 B0            cmp a, b
4001   1E4A FD 71         seq ; ==
4002   1E4C E4            pop a
4003   1E4D             ; END RELATIONAL
4004   1E4D C0 00 00      cmp b, 0
4005   1E50 C6 24 1F      je _if57_else
4006   1E53             _if57_true:
4007   1E53             ;; *t++ = *prog++; 
4008   1E53 FA FF FF      lea d, [bp + -1] ; $t
4009   1E56 2A            mov b, [d]
4010   1E57 FD 79         mov g, b
4011   1E59 FD 77         inc b
4012   1E5B FA FF FF      lea d, [bp + -1] ; $t
4013   1E5E FD 43         mov [d], b
4014   1E60 FD 27         mov b, g
4015   1E62 D8            push b
4016   1E63 3B 7F 27      mov d, _prog ; $prog
4017   1E66 2A            mov b, [d]
4018   1E67 FD 79         mov g, b
4019   1E69 FD 77         inc b
4020   1E6B 3B 7F 27      mov d, _prog ; $prog
4021   1E6E FD 43         mov [d], b
4022   1E70 FD 27         mov b, g
4023   1E72 74            mov d, b
4024   1E73 32            mov bl, [d]
4025   1E74 A7 00         mov bh, 0
4026   1E76 E7            pop d
4027   1E77 FD 3E         mov [d], bl
4028   1E79             ;; if (*prog == '='){ 
4029   1E79             _if58_cond:
4030   1E79 3B 7F 27      mov d, _prog ; $prog
4031   1E7C 2A            mov b, [d]
4032   1E7D 74            mov d, b
4033   1E7E 32            mov bl, [d]
4034   1E7F A7 00         mov bh, 0
4035   1E81             ; START RELATIONAL
4036   1E81 D7            push a
4037   1E82 11            mov a, b
4038   1E83 26 3D 00      mov b, $3d
4039   1E86 B0            cmp a, b
4040   1E87 FD 71         seq ; ==
4041   1E89 E4            pop a
4042   1E8A             ; END RELATIONAL
4043   1E8A C0 00 00      cmp b, 0
4044   1E8D C6 C3 1E      je _if58_else
4045   1E90             _if58_true:
4046   1E90             ;; *t++ = *prog++; 
4047   1E90 FA FF FF      lea d, [bp + -1] ; $t
4048   1E93 2A            mov b, [d]
4049   1E94 FD 79         mov g, b
4050   1E96 FD 77         inc b
4051   1E98 FA FF FF      lea d, [bp + -1] ; $t
4052   1E9B FD 43         mov [d], b
4053   1E9D FD 27         mov b, g
4054   1E9F D8            push b
4055   1EA0 3B 7F 27      mov d, _prog ; $prog
4056   1EA3 2A            mov b, [d]
4057   1EA4 FD 79         mov g, b
4058   1EA6 FD 77         inc b
4059   1EA8 3B 7F 27      mov d, _prog ; $prog
4060   1EAB FD 43         mov [d], b
4061   1EAD FD 27         mov b, g
4062   1EAF 74            mov d, b
4063   1EB0 32            mov bl, [d]
4064   1EB1 A7 00         mov bh, 0
4065   1EB3 E7            pop d
4066   1EB4 FD 3E         mov [d], bl
4067   1EB6             ;; tok = GREATER_THAN_OR_EQUAL; 
4068   1EB6 3B 7B 27      mov d, _tok ; $tok
4069   1EB9 DA            push d
4070   1EBA 26 0D 00      mov b, 13; GREATER_THAN_OR_EQUAL
4071   1EBD E7            pop d
4072   1EBE FD 43         mov [d], b
4073   1EC0 0A 17 1F      jmp _if58_exit
4074   1EC3             _if58_else:
4075   1EC3             ;; if (*prog == '>'){ 
4076   1EC3             _if59_cond:
4077   1EC3 3B 7F 27      mov d, _prog ; $prog
4078   1EC6 2A            mov b, [d]
4079   1EC7 74            mov d, b
4080   1EC8 32            mov bl, [d]
4081   1EC9 A7 00         mov bh, 0
4082   1ECB             ; START RELATIONAL
4083   1ECB D7            push a
4084   1ECC 11            mov a, b
4085   1ECD 26 3E 00      mov b, $3e
4086   1ED0 B0            cmp a, b
4087   1ED1 FD 71         seq ; ==
4088   1ED3 E4            pop a
4089   1ED4             ; END RELATIONAL
4090   1ED4 C0 00 00      cmp b, 0
4091   1ED7 C6 0D 1F      je _if59_else
4092   1EDA             _if59_true:
4093   1EDA             ;; *t++ = *prog++; 
4094   1EDA FA FF FF      lea d, [bp + -1] ; $t
4095   1EDD 2A            mov b, [d]
4096   1EDE FD 79         mov g, b
4097   1EE0 FD 77         inc b
4098   1EE2 FA FF FF      lea d, [bp + -1] ; $t
4099   1EE5 FD 43         mov [d], b
4100   1EE7 FD 27         mov b, g
4101   1EE9 D8            push b
4102   1EEA 3B 7F 27      mov d, _prog ; $prog
4103   1EED 2A            mov b, [d]
4104   1EEE FD 79         mov g, b
4105   1EF0 FD 77         inc b
4106   1EF2 3B 7F 27      mov d, _prog ; $prog
4107   1EF5 FD 43         mov [d], b
4108   1EF7 FD 27         mov b, g
4109   1EF9 74            mov d, b
4110   1EFA 32            mov bl, [d]
4111   1EFB A7 00         mov bh, 0
4112   1EFD E7            pop d
4113   1EFE FD 3E         mov [d], bl
4114   1F00             ;; tok = BITWISE_SHR; 
4115   1F00 3B 7B 27      mov d, _tok ; $tok
4116   1F03 DA            push d
4117   1F04 26 1B 00      mov b, 27; BITWISE_SHR
4118   1F07 E7            pop d
4119   1F08 FD 43         mov [d], b
4120   1F0A 0A 17 1F      jmp _if59_exit
4121   1F0D             _if59_else:
4122   1F0D             ;; tok = GREATER_THAN; 
4123   1F0D 3B 7B 27      mov d, _tok ; $tok
4124   1F10 DA            push d
4125   1F11 26 0C 00      mov b, 12; GREATER_THAN
4126   1F14 E7            pop d
4127   1F15 FD 43         mov [d], b
4128   1F17             _if59_exit:
4129   1F17             _if58_exit:
4130   1F17             ;; toktype = DELIMITER;   
4131   1F17 3B 7D 27      mov d, _toktype ; $toktype
4132   1F1A DA            push d
4133   1F1B 26 01 00      mov b, 1; DELIMITER
4134   1F1E E7            pop d
4135   1F1F FD 43         mov [d], b
4136   1F21 0A EE 24      jmp _if57_exit
4137   1F24             _if57_else:
4138   1F24             ;; if(*prog == '!'){ 
4139   1F24             _if60_cond:
4140   1F24 3B 7F 27      mov d, _prog ; $prog
4141   1F27 2A            mov b, [d]
4142   1F28 74            mov d, b
4143   1F29 32            mov bl, [d]
4144   1F2A A7 00         mov bh, 0
4145   1F2C             ; START RELATIONAL
4146   1F2C D7            push a
4147   1F2D 11            mov a, b
4148   1F2E 26 21 00      mov b, $21
4149   1F31 B0            cmp a, b
4150   1F32 FD 71         seq ; ==
4151   1F34 E4            pop a
4152   1F35             ; END RELATIONAL
4153   1F35 C0 00 00      cmp b, 0
4154   1F38 C6 C2 1F      je _if60_else
4155   1F3B             _if60_true:
4156   1F3B             ;; *t++ = *prog++; 
4157   1F3B FA FF FF      lea d, [bp + -1] ; $t
4158   1F3E 2A            mov b, [d]
4159   1F3F FD 79         mov g, b
4160   1F41 FD 77         inc b
4161   1F43 FA FF FF      lea d, [bp + -1] ; $t
4162   1F46 FD 43         mov [d], b
4163   1F48 FD 27         mov b, g
4164   1F4A D8            push b
4165   1F4B 3B 7F 27      mov d, _prog ; $prog
4166   1F4E 2A            mov b, [d]
4167   1F4F FD 79         mov g, b
4168   1F51 FD 77         inc b
4169   1F53 3B 7F 27      mov d, _prog ; $prog
4170   1F56 FD 43         mov [d], b
4171   1F58 FD 27         mov b, g
4172   1F5A 74            mov d, b
4173   1F5B 32            mov bl, [d]
4174   1F5C A7 00         mov bh, 0
4175   1F5E E7            pop d
4176   1F5F FD 3E         mov [d], bl
4177   1F61             ;; if(*prog == '='){ 
4178   1F61             _if61_cond:
4179   1F61 3B 7F 27      mov d, _prog ; $prog
4180   1F64 2A            mov b, [d]
4181   1F65 74            mov d, b
4182   1F66 32            mov bl, [d]
4183   1F67 A7 00         mov bh, 0
4184   1F69             ; START RELATIONAL
4185   1F69 D7            push a
4186   1F6A 11            mov a, b
4187   1F6B 26 3D 00      mov b, $3d
4188   1F6E B0            cmp a, b
4189   1F6F FD 71         seq ; ==
4190   1F71 E4            pop a
4191   1F72             ; END RELATIONAL
4192   1F72 C0 00 00      cmp b, 0
4193   1F75 C6 AB 1F      je _if61_else
4194   1F78             _if61_true:
4195   1F78             ;; *t++ = *prog++; 
4196   1F78 FA FF FF      lea d, [bp + -1] ; $t
4197   1F7B 2A            mov b, [d]
4198   1F7C FD 79         mov g, b
4199   1F7E FD 77         inc b
4200   1F80 FA FF FF      lea d, [bp + -1] ; $t
4201   1F83 FD 43         mov [d], b
4202   1F85 FD 27         mov b, g
4203   1F87 D8            push b
4204   1F88 3B 7F 27      mov d, _prog ; $prog
4205   1F8B 2A            mov b, [d]
4206   1F8C FD 79         mov g, b
4207   1F8E FD 77         inc b
4208   1F90 3B 7F 27      mov d, _prog ; $prog
4209   1F93 FD 43         mov [d], b
4210   1F95 FD 27         mov b, g
4211   1F97 74            mov d, b
4212   1F98 32            mov bl, [d]
4213   1F99 A7 00         mov bh, 0
4214   1F9B E7            pop d
4215   1F9C FD 3E         mov [d], bl
4216   1F9E             ;; tok = NOT_EQUAL; 
4217   1F9E 3B 7B 27      mov d, _tok ; $tok
4218   1FA1 DA            push d
4219   1FA2 26 09 00      mov b, 9; NOT_EQUAL
4220   1FA5 E7            pop d
4221   1FA6 FD 43         mov [d], b
4222   1FA8 0A B5 1F      jmp _if61_exit
4223   1FAB             _if61_else:
4224   1FAB             ;; tok = LOGICAL_NOT; 
4225   1FAB 3B 7B 27      mov d, _tok ; $tok
4226   1FAE DA            push d
4227   1FAF 26 10 00      mov b, 16; LOGICAL_NOT
4228   1FB2 E7            pop d
4229   1FB3 FD 43         mov [d], b
4230   1FB5             _if61_exit:
4231   1FB5             ;; toktype = DELIMITER;   
4232   1FB5 3B 7D 27      mov d, _toktype ; $toktype
4233   1FB8 DA            push d
4234   1FB9 26 01 00      mov b, 1; DELIMITER
4235   1FBC E7            pop d
4236   1FBD FD 43         mov [d], b
4237   1FBF 0A EE 24      jmp _if60_exit
4238   1FC2             _if60_else:
4239   1FC2             ;; if(*prog == '+'){ 
4240   1FC2             _if62_cond:
4241   1FC2 3B 7F 27      mov d, _prog ; $prog
4242   1FC5 2A            mov b, [d]
4243   1FC6 74            mov d, b
4244   1FC7 32            mov bl, [d]
4245   1FC8 A7 00         mov bh, 0
4246   1FCA             ; START RELATIONAL
4247   1FCA D7            push a
4248   1FCB 11            mov a, b
4249   1FCC 26 2B 00      mov b, $2b
4250   1FCF B0            cmp a, b
4251   1FD0 FD 71         seq ; ==
4252   1FD2 E4            pop a
4253   1FD3             ; END RELATIONAL
4254   1FD3 C0 00 00      cmp b, 0
4255   1FD6 C6 60 20      je _if62_else
4256   1FD9             _if62_true:
4257   1FD9             ;; *t++ = *prog++; 
4258   1FD9 FA FF FF      lea d, [bp + -1] ; $t
4259   1FDC 2A            mov b, [d]
4260   1FDD FD 79         mov g, b
4261   1FDF FD 77         inc b
4262   1FE1 FA FF FF      lea d, [bp + -1] ; $t
4263   1FE4 FD 43         mov [d], b
4264   1FE6 FD 27         mov b, g
4265   1FE8 D8            push b
4266   1FE9 3B 7F 27      mov d, _prog ; $prog
4267   1FEC 2A            mov b, [d]
4268   1FED FD 79         mov g, b
4269   1FEF FD 77         inc b
4270   1FF1 3B 7F 27      mov d, _prog ; $prog
4271   1FF4 FD 43         mov [d], b
4272   1FF6 FD 27         mov b, g
4273   1FF8 74            mov d, b
4274   1FF9 32            mov bl, [d]
4275   1FFA A7 00         mov bh, 0
4276   1FFC E7            pop d
4277   1FFD FD 3E         mov [d], bl
4278   1FFF             ;; if(*prog == '+'){ 
4279   1FFF             _if63_cond:
4280   1FFF 3B 7F 27      mov d, _prog ; $prog
4281   2002 2A            mov b, [d]
4282   2003 74            mov d, b
4283   2004 32            mov bl, [d]
4284   2005 A7 00         mov bh, 0
4285   2007             ; START RELATIONAL
4286   2007 D7            push a
4287   2008 11            mov a, b
4288   2009 26 2B 00      mov b, $2b
4289   200C B0            cmp a, b
4290   200D FD 71         seq ; ==
4291   200F E4            pop a
4292   2010             ; END RELATIONAL
4293   2010 C0 00 00      cmp b, 0
4294   2013 C6 49 20      je _if63_else
4295   2016             _if63_true:
4296   2016             ;; *t++ = *prog++; 
4297   2016 FA FF FF      lea d, [bp + -1] ; $t
4298   2019 2A            mov b, [d]
4299   201A FD 79         mov g, b
4300   201C FD 77         inc b
4301   201E FA FF FF      lea d, [bp + -1] ; $t
4302   2021 FD 43         mov [d], b
4303   2023 FD 27         mov b, g
4304   2025 D8            push b
4305   2026 3B 7F 27      mov d, _prog ; $prog
4306   2029 2A            mov b, [d]
4307   202A FD 79         mov g, b
4308   202C FD 77         inc b
4309   202E 3B 7F 27      mov d, _prog ; $prog
4310   2031 FD 43         mov [d], b
4311   2033 FD 27         mov b, g
4312   2035 74            mov d, b
4313   2036 32            mov bl, [d]
4314   2037 A7 00         mov bh, 0
4315   2039 E7            pop d
4316   203A FD 3E         mov [d], bl
4317   203C             ;; tok = INCREMENT; 
4318   203C 3B 7B 27      mov d, _tok ; $tok
4319   203F DA            push d
4320   2040 26 05 00      mov b, 5; INCREMENT
4321   2043 E7            pop d
4322   2044 FD 43         mov [d], b
4323   2046 0A 53 20      jmp _if63_exit
4324   2049             _if63_else:
4325   2049             ;; tok = PLUS; 
4326   2049 3B 7B 27      mov d, _tok ; $tok
4327   204C DA            push d
4328   204D 26 01 00      mov b, 1; PLUS
4329   2050 E7            pop d
4330   2051 FD 43         mov [d], b
4331   2053             _if63_exit:
4332   2053             ;; toktype = DELIMITER;   
4333   2053 3B 7D 27      mov d, _toktype ; $toktype
4334   2056 DA            push d
4335   2057 26 01 00      mov b, 1; DELIMITER
4336   205A E7            pop d
4337   205B FD 43         mov [d], b
4338   205D 0A EE 24      jmp _if62_exit
4339   2060             _if62_else:
4340   2060             ;; if(*prog == '-'){ 
4341   2060             _if64_cond:
4342   2060 3B 7F 27      mov d, _prog ; $prog
4343   2063 2A            mov b, [d]
4344   2064 74            mov d, b
4345   2065 32            mov bl, [d]
4346   2066 A7 00         mov bh, 0
4347   2068             ; START RELATIONAL
4348   2068 D7            push a
4349   2069 11            mov a, b
4350   206A 26 2D 00      mov b, $2d
4351   206D B0            cmp a, b
4352   206E FD 71         seq ; ==
4353   2070 E4            pop a
4354   2071             ; END RELATIONAL
4355   2071 C0 00 00      cmp b, 0
4356   2074 C6 FE 20      je _if64_else
4357   2077             _if64_true:
4358   2077             ;; *t++ = *prog++; 
4359   2077 FA FF FF      lea d, [bp + -1] ; $t
4360   207A 2A            mov b, [d]
4361   207B FD 79         mov g, b
4362   207D FD 77         inc b
4363   207F FA FF FF      lea d, [bp + -1] ; $t
4364   2082 FD 43         mov [d], b
4365   2084 FD 27         mov b, g
4366   2086 D8            push b
4367   2087 3B 7F 27      mov d, _prog ; $prog
4368   208A 2A            mov b, [d]
4369   208B FD 79         mov g, b
4370   208D FD 77         inc b
4371   208F 3B 7F 27      mov d, _prog ; $prog
4372   2092 FD 43         mov [d], b
4373   2094 FD 27         mov b, g
4374   2096 74            mov d, b
4375   2097 32            mov bl, [d]
4376   2098 A7 00         mov bh, 0
4377   209A E7            pop d
4378   209B FD 3E         mov [d], bl
4379   209D             ;; if(*prog == '-'){ 
4380   209D             _if65_cond:
4381   209D 3B 7F 27      mov d, _prog ; $prog
4382   20A0 2A            mov b, [d]
4383   20A1 74            mov d, b
4384   20A2 32            mov bl, [d]
4385   20A3 A7 00         mov bh, 0
4386   20A5             ; START RELATIONAL
4387   20A5 D7            push a
4388   20A6 11            mov a, b
4389   20A7 26 2D 00      mov b, $2d
4390   20AA B0            cmp a, b
4391   20AB FD 71         seq ; ==
4392   20AD E4            pop a
4393   20AE             ; END RELATIONAL
4394   20AE C0 00 00      cmp b, 0
4395   20B1 C6 E7 20      je _if65_else
4396   20B4             _if65_true:
4397   20B4             ;; *t++ = *prog++; 
4398   20B4 FA FF FF      lea d, [bp + -1] ; $t
4399   20B7 2A            mov b, [d]
4400   20B8 FD 79         mov g, b
4401   20BA FD 77         inc b
4402   20BC FA FF FF      lea d, [bp + -1] ; $t
4403   20BF FD 43         mov [d], b
4404   20C1 FD 27         mov b, g
4405   20C3 D8            push b
4406   20C4 3B 7F 27      mov d, _prog ; $prog
4407   20C7 2A            mov b, [d]
4408   20C8 FD 79         mov g, b
4409   20CA FD 77         inc b
4410   20CC 3B 7F 27      mov d, _prog ; $prog
4411   20CF FD 43         mov [d], b
4412   20D1 FD 27         mov b, g
4413   20D3 74            mov d, b
4414   20D4 32            mov bl, [d]
4415   20D5 A7 00         mov bh, 0
4416   20D7 E7            pop d
4417   20D8 FD 3E         mov [d], bl
4418   20DA             ;; tok = DECREMENT; 
4419   20DA 3B 7B 27      mov d, _tok ; $tok
4420   20DD DA            push d
4421   20DE 26 06 00      mov b, 6; DECREMENT
4422   20E1 E7            pop d
4423   20E2 FD 43         mov [d], b
4424   20E4 0A F1 20      jmp _if65_exit
4425   20E7             _if65_else:
4426   20E7             ;; tok = MINUS; 
4427   20E7 3B 7B 27      mov d, _tok ; $tok
4428   20EA DA            push d
4429   20EB 26 02 00      mov b, 2; MINUS
4430   20EE E7            pop d
4431   20EF FD 43         mov [d], b
4432   20F1             _if65_exit:
4433   20F1             ;; toktype = DELIMITER;   
4434   20F1 3B 7D 27      mov d, _toktype ; $toktype
4435   20F4 DA            push d
4436   20F5 26 01 00      mov b, 1; DELIMITER
4437   20F8 E7            pop d
4438   20F9 FD 43         mov [d], b
4439   20FB 0A EE 24      jmp _if64_exit
4440   20FE             _if64_else:
4441   20FE             ;; if(*prog == '$'){ 
4442   20FE             _if66_cond:
4443   20FE 3B 7F 27      mov d, _prog ; $prog
4444   2101 2A            mov b, [d]
4445   2102 74            mov d, b
4446   2103 32            mov bl, [d]
4447   2104 A7 00         mov bh, 0
4448   2106             ; START RELATIONAL
4449   2106 D7            push a
4450   2107 11            mov a, b
4451   2108 26 24 00      mov b, $24
4452   210B B0            cmp a, b
4453   210C FD 71         seq ; ==
4454   210E E4            pop a
4455   210F             ; END RELATIONAL
4456   210F C0 00 00      cmp b, 0
4457   2112 C6 52 21      je _if66_else
4458   2115             _if66_true:
4459   2115             ;; *t++ = *prog++; 
4460   2115 FA FF FF      lea d, [bp + -1] ; $t
4461   2118 2A            mov b, [d]
4462   2119 FD 79         mov g, b
4463   211B FD 77         inc b
4464   211D FA FF FF      lea d, [bp + -1] ; $t
4465   2120 FD 43         mov [d], b
4466   2122 FD 27         mov b, g
4467   2124 D8            push b
4468   2125 3B 7F 27      mov d, _prog ; $prog
4469   2128 2A            mov b, [d]
4470   2129 FD 79         mov g, b
4471   212B FD 77         inc b
4472   212D 3B 7F 27      mov d, _prog ; $prog
4473   2130 FD 43         mov [d], b
4474   2132 FD 27         mov b, g
4475   2134 74            mov d, b
4476   2135 32            mov bl, [d]
4477   2136 A7 00         mov bh, 0
4478   2138 E7            pop d
4479   2139 FD 3E         mov [d], bl
4480   213B             ;; tok = DOLLAR; 
4481   213B 3B 7B 27      mov d, _tok ; $tok
4482   213E DA            push d
4483   213F 26 12 00      mov b, 18; DOLLAR
4484   2142 E7            pop d
4485   2143 FD 43         mov [d], b
4486   2145             ;; toktype = DELIMITER;   
4487   2145 3B 7D 27      mov d, _toktype ; $toktype
4488   2148 DA            push d
4489   2149 26 01 00      mov b, 1; DELIMITER
4490   214C E7            pop d
4491   214D FD 43         mov [d], b
4492   214F 0A EE 24      jmp _if66_exit
4493   2152             _if66_else:
4494   2152             ;; if(*prog == '^'){ 
4495   2152             _if67_cond:
4496   2152 3B 7F 27      mov d, _prog ; $prog
4497   2155 2A            mov b, [d]
4498   2156 74            mov d, b
4499   2157 32            mov bl, [d]
4500   2158 A7 00         mov bh, 0
4501   215A             ; START RELATIONAL
4502   215A D7            push a
4503   215B 11            mov a, b
4504   215C 26 5E 00      mov b, $5e
4505   215F B0            cmp a, b
4506   2160 FD 71         seq ; ==
4507   2162 E4            pop a
4508   2163             ; END RELATIONAL
4509   2163 C0 00 00      cmp b, 0
4510   2166 C6 A6 21      je _if67_else
4511   2169             _if67_true:
4512   2169             ;; *t++ = *prog++; 
4513   2169 FA FF FF      lea d, [bp + -1] ; $t
4514   216C 2A            mov b, [d]
4515   216D FD 79         mov g, b
4516   216F FD 77         inc b
4517   2171 FA FF FF      lea d, [bp + -1] ; $t
4518   2174 FD 43         mov [d], b
4519   2176 FD 27         mov b, g
4520   2178 D8            push b
4521   2179 3B 7F 27      mov d, _prog ; $prog
4522   217C 2A            mov b, [d]
4523   217D FD 79         mov g, b
4524   217F FD 77         inc b
4525   2181 3B 7F 27      mov d, _prog ; $prog
4526   2184 FD 43         mov [d], b
4527   2186 FD 27         mov b, g
4528   2188 74            mov d, b
4529   2189 32            mov bl, [d]
4530   218A A7 00         mov bh, 0
4531   218C E7            pop d
4532   218D FD 3E         mov [d], bl
4533   218F             ;; tok = BITWISE_XOR; 
4534   218F 3B 7B 27      mov d, _tok ; $tok
4535   2192 DA            push d
4536   2193 26 17 00      mov b, 23; BITWISE_XOR
4537   2196 E7            pop d
4538   2197 FD 43         mov [d], b
4539   2199             ;; toktype = DELIMITER;   
4540   2199 3B 7D 27      mov d, _toktype ; $toktype
4541   219C DA            push d
4542   219D 26 01 00      mov b, 1; DELIMITER
4543   21A0 E7            pop d
4544   21A1 FD 43         mov [d], b
4545   21A3 0A EE 24      jmp _if67_exit
4546   21A6             _if67_else:
4547   21A6             ;; if(*prog == '@'){ 
4548   21A6             _if68_cond:
4549   21A6 3B 7F 27      mov d, _prog ; $prog
4550   21A9 2A            mov b, [d]
4551   21AA 74            mov d, b
4552   21AB 32            mov bl, [d]
4553   21AC A7 00         mov bh, 0
4554   21AE             ; START RELATIONAL
4555   21AE D7            push a
4556   21AF 11            mov a, b
4557   21B0 26 40 00      mov b, $40
4558   21B3 B0            cmp a, b
4559   21B4 FD 71         seq ; ==
4560   21B6 E4            pop a
4561   21B7             ; END RELATIONAL
4562   21B7 C0 00 00      cmp b, 0
4563   21BA C6 FA 21      je _if68_else
4564   21BD             _if68_true:
4565   21BD             ;; *t++ = *prog++; 
4566   21BD FA FF FF      lea d, [bp + -1] ; $t
4567   21C0 2A            mov b, [d]
4568   21C1 FD 79         mov g, b
4569   21C3 FD 77         inc b
4570   21C5 FA FF FF      lea d, [bp + -1] ; $t
4571   21C8 FD 43         mov [d], b
4572   21CA FD 27         mov b, g
4573   21CC D8            push b
4574   21CD 3B 7F 27      mov d, _prog ; $prog
4575   21D0 2A            mov b, [d]
4576   21D1 FD 79         mov g, b
4577   21D3 FD 77         inc b
4578   21D5 3B 7F 27      mov d, _prog ; $prog
4579   21D8 FD 43         mov [d], b
4580   21DA FD 27         mov b, g
4581   21DC 74            mov d, b
4582   21DD 32            mov bl, [d]
4583   21DE A7 00         mov bh, 0
4584   21E0 E7            pop d
4585   21E1 FD 3E         mov [d], bl
4586   21E3             ;; tok = AT; 
4587   21E3 3B 7B 27      mov d, _tok ; $tok
4588   21E6 DA            push d
4589   21E7 26 14 00      mov b, 20; AT
4590   21EA E7            pop d
4591   21EB FD 43         mov [d], b
4592   21ED             ;; toktype = DELIMITER;   
4593   21ED 3B 7D 27      mov d, _toktype ; $toktype
4594   21F0 DA            push d
4595   21F1 26 01 00      mov b, 1; DELIMITER
4596   21F4 E7            pop d
4597   21F5 FD 43         mov [d], b
4598   21F7 0A EE 24      jmp _if68_exit
4599   21FA             _if68_else:
4600   21FA             ;; if(*prog == '*'){ 
4601   21FA             _if69_cond:
4602   21FA 3B 7F 27      mov d, _prog ; $prog
4603   21FD 2A            mov b, [d]
4604   21FE 74            mov d, b
4605   21FF 32            mov bl, [d]
4606   2200 A7 00         mov bh, 0
4607   2202             ; START RELATIONAL
4608   2202 D7            push a
4609   2203 11            mov a, b
4610   2204 26 2A 00      mov b, $2a
4611   2207 B0            cmp a, b
4612   2208 FD 71         seq ; ==
4613   220A E4            pop a
4614   220B             ; END RELATIONAL
4615   220B C0 00 00      cmp b, 0
4616   220E C6 4E 22      je _if69_else
4617   2211             _if69_true:
4618   2211             ;; *t++ = *prog++; 
4619   2211 FA FF FF      lea d, [bp + -1] ; $t
4620   2214 2A            mov b, [d]
4621   2215 FD 79         mov g, b
4622   2217 FD 77         inc b
4623   2219 FA FF FF      lea d, [bp + -1] ; $t
4624   221C FD 43         mov [d], b
4625   221E FD 27         mov b, g
4626   2220 D8            push b
4627   2221 3B 7F 27      mov d, _prog ; $prog
4628   2224 2A            mov b, [d]
4629   2225 FD 79         mov g, b
4630   2227 FD 77         inc b
4631   2229 3B 7F 27      mov d, _prog ; $prog
4632   222C FD 43         mov [d], b
4633   222E FD 27         mov b, g
4634   2230 74            mov d, b
4635   2231 32            mov bl, [d]
4636   2232 A7 00         mov bh, 0
4637   2234 E7            pop d
4638   2235 FD 3E         mov [d], bl
4639   2237             ;; tok = STAR; 
4640   2237 3B 7B 27      mov d, _tok ; $tok
4641   223A DA            push d
4642   223B 26 03 00      mov b, 3; STAR
4643   223E E7            pop d
4644   223F FD 43         mov [d], b
4645   2241             ;; toktype = DELIMITER;   
4646   2241 3B 7D 27      mov d, _toktype ; $toktype
4647   2244 DA            push d
4648   2245 26 01 00      mov b, 1; DELIMITER
4649   2248 E7            pop d
4650   2249 FD 43         mov [d], b
4651   224B 0A EE 24      jmp _if69_exit
4652   224E             _if69_else:
4653   224E             ;; if(*prog == '/'){ 
4654   224E             _if70_cond:
4655   224E 3B 7F 27      mov d, _prog ; $prog
4656   2251 2A            mov b, [d]
4657   2252 74            mov d, b
4658   2253 32            mov bl, [d]
4659   2254 A7 00         mov bh, 0
4660   2256             ; START RELATIONAL
4661   2256 D7            push a
4662   2257 11            mov a, b
4663   2258 26 2F 00      mov b, $2f
4664   225B B0            cmp a, b
4665   225C FD 71         seq ; ==
4666   225E E4            pop a
4667   225F             ; END RELATIONAL
4668   225F C0 00 00      cmp b, 0
4669   2262 C6 A2 22      je _if70_else
4670   2265             _if70_true:
4671   2265             ;; *t++ = *prog++; 
4672   2265 FA FF FF      lea d, [bp + -1] ; $t
4673   2268 2A            mov b, [d]
4674   2269 FD 79         mov g, b
4675   226B FD 77         inc b
4676   226D FA FF FF      lea d, [bp + -1] ; $t
4677   2270 FD 43         mov [d], b
4678   2272 FD 27         mov b, g
4679   2274 D8            push b
4680   2275 3B 7F 27      mov d, _prog ; $prog
4681   2278 2A            mov b, [d]
4682   2279 FD 79         mov g, b
4683   227B FD 77         inc b
4684   227D 3B 7F 27      mov d, _prog ; $prog
4685   2280 FD 43         mov [d], b
4686   2282 FD 27         mov b, g
4687   2284 74            mov d, b
4688   2285 32            mov bl, [d]
4689   2286 A7 00         mov bh, 0
4690   2288 E7            pop d
4691   2289 FD 3E         mov [d], bl
4692   228B             ;; tok = FSLASH; 
4693   228B 3B 7B 27      mov d, _tok ; $tok
4694   228E DA            push d
4695   228F 26 04 00      mov b, 4; FSLASH
4696   2292 E7            pop d
4697   2293 FD 43         mov [d], b
4698   2295             ;; toktype = DELIMITER;   
4699   2295 3B 7D 27      mov d, _toktype ; $toktype
4700   2298 DA            push d
4701   2299 26 01 00      mov b, 1; DELIMITER
4702   229C E7            pop d
4703   229D FD 43         mov [d], b
4704   229F 0A EE 24      jmp _if70_exit
4705   22A2             _if70_else:
4706   22A2             ;; if(*prog == '%'){ 
4707   22A2             _if71_cond:
4708   22A2 3B 7F 27      mov d, _prog ; $prog
4709   22A5 2A            mov b, [d]
4710   22A6 74            mov d, b
4711   22A7 32            mov bl, [d]
4712   22A8 A7 00         mov bh, 0
4713   22AA             ; START RELATIONAL
4714   22AA D7            push a
4715   22AB 11            mov a, b
4716   22AC 26 25 00      mov b, $25
4717   22AF B0            cmp a, b
4718   22B0 FD 71         seq ; ==
4719   22B2 E4            pop a
4720   22B3             ; END RELATIONAL
4721   22B3 C0 00 00      cmp b, 0
4722   22B6 C6 F6 22      je _if71_else
4723   22B9             _if71_true:
4724   22B9             ;; *t++ = *prog++; 
4725   22B9 FA FF FF      lea d, [bp + -1] ; $t
4726   22BC 2A            mov b, [d]
4727   22BD FD 79         mov g, b
4728   22BF FD 77         inc b
4729   22C1 FA FF FF      lea d, [bp + -1] ; $t
4730   22C4 FD 43         mov [d], b
4731   22C6 FD 27         mov b, g
4732   22C8 D8            push b
4733   22C9 3B 7F 27      mov d, _prog ; $prog
4734   22CC 2A            mov b, [d]
4735   22CD FD 79         mov g, b
4736   22CF FD 77         inc b
4737   22D1 3B 7F 27      mov d, _prog ; $prog
4738   22D4 FD 43         mov [d], b
4739   22D6 FD 27         mov b, g
4740   22D8 74            mov d, b
4741   22D9 32            mov bl, [d]
4742   22DA A7 00         mov bh, 0
4743   22DC E7            pop d
4744   22DD FD 3E         mov [d], bl
4745   22DF             ;; tok = MOD; 
4746   22DF 3B 7B 27      mov d, _tok ; $tok
4747   22E2 DA            push d
4748   22E3 26 07 00      mov b, 7; MOD
4749   22E6 E7            pop d
4750   22E7 FD 43         mov [d], b
4751   22E9             ;; toktype = DELIMITER;   
4752   22E9 3B 7D 27      mov d, _toktype ; $toktype
4753   22EC DA            push d
4754   22ED 26 01 00      mov b, 1; DELIMITER
4755   22F0 E7            pop d
4756   22F1 FD 43         mov [d], b
4757   22F3 0A EE 24      jmp _if71_exit
4758   22F6             _if71_else:
4759   22F6             ;; if(*prog == '('){ 
4760   22F6             _if72_cond:
4761   22F6 3B 7F 27      mov d, _prog ; $prog
4762   22F9 2A            mov b, [d]
4763   22FA 74            mov d, b
4764   22FB 32            mov bl, [d]
4765   22FC A7 00         mov bh, 0
4766   22FE             ; START RELATIONAL
4767   22FE D7            push a
4768   22FF 11            mov a, b
4769   2300 26 28 00      mov b, $28
4770   2303 B0            cmp a, b
4771   2304 FD 71         seq ; ==
4772   2306 E4            pop a
4773   2307             ; END RELATIONAL
4774   2307 C0 00 00      cmp b, 0
4775   230A C6 4A 23      je _if72_else
4776   230D             _if72_true:
4777   230D             ;; *t++ = *prog++; 
4778   230D FA FF FF      lea d, [bp + -1] ; $t
4779   2310 2A            mov b, [d]
4780   2311 FD 79         mov g, b
4781   2313 FD 77         inc b
4782   2315 FA FF FF      lea d, [bp + -1] ; $t
4783   2318 FD 43         mov [d], b
4784   231A FD 27         mov b, g
4785   231C D8            push b
4786   231D 3B 7F 27      mov d, _prog ; $prog
4787   2320 2A            mov b, [d]
4788   2321 FD 79         mov g, b
4789   2323 FD 77         inc b
4790   2325 3B 7F 27      mov d, _prog ; $prog
4791   2328 FD 43         mov [d], b
4792   232A FD 27         mov b, g
4793   232C 74            mov d, b
4794   232D 32            mov bl, [d]
4795   232E A7 00         mov bh, 0
4796   2330 E7            pop d
4797   2331 FD 3E         mov [d], bl
4798   2333             ;; tok = OPENING_PAREN; 
4799   2333 3B 7B 27      mov d, _tok ; $tok
4800   2336 DA            push d
4801   2337 26 1C 00      mov b, 28; OPENING_PAREN
4802   233A E7            pop d
4803   233B FD 43         mov [d], b
4804   233D             ;; toktype = DELIMITER;   
4805   233D 3B 7D 27      mov d, _toktype ; $toktype
4806   2340 DA            push d
4807   2341 26 01 00      mov b, 1; DELIMITER
4808   2344 E7            pop d
4809   2345 FD 43         mov [d], b
4810   2347 0A EE 24      jmp _if72_exit
4811   234A             _if72_else:
4812   234A             ;; if(*prog == ')'){ 
4813   234A             _if73_cond:
4814   234A 3B 7F 27      mov d, _prog ; $prog
4815   234D 2A            mov b, [d]
4816   234E 74            mov d, b
4817   234F 32            mov bl, [d]
4818   2350 A7 00         mov bh, 0
4819   2352             ; START RELATIONAL
4820   2352 D7            push a
4821   2353 11            mov a, b
4822   2354 26 29 00      mov b, $29
4823   2357 B0            cmp a, b
4824   2358 FD 71         seq ; ==
4825   235A E4            pop a
4826   235B             ; END RELATIONAL
4827   235B C0 00 00      cmp b, 0
4828   235E C6 9E 23      je _if73_else
4829   2361             _if73_true:
4830   2361             ;; *t++ = *prog++; 
4831   2361 FA FF FF      lea d, [bp + -1] ; $t
4832   2364 2A            mov b, [d]
4833   2365 FD 79         mov g, b
4834   2367 FD 77         inc b
4835   2369 FA FF FF      lea d, [bp + -1] ; $t
4836   236C FD 43         mov [d], b
4837   236E FD 27         mov b, g
4838   2370 D8            push b
4839   2371 3B 7F 27      mov d, _prog ; $prog
4840   2374 2A            mov b, [d]
4841   2375 FD 79         mov g, b
4842   2377 FD 77         inc b
4843   2379 3B 7F 27      mov d, _prog ; $prog
4844   237C FD 43         mov [d], b
4845   237E FD 27         mov b, g
4846   2380 74            mov d, b
4847   2381 32            mov bl, [d]
4848   2382 A7 00         mov bh, 0
4849   2384 E7            pop d
4850   2385 FD 3E         mov [d], bl
4851   2387             ;; tok = CLOSING_PAREN; 
4852   2387 3B 7B 27      mov d, _tok ; $tok
4853   238A DA            push d
4854   238B 26 1D 00      mov b, 29; CLOSING_PAREN
4855   238E E7            pop d
4856   238F FD 43         mov [d], b
4857   2391             ;; toktype = DELIMITER;   
4858   2391 3B 7D 27      mov d, _toktype ; $toktype
4859   2394 DA            push d
4860   2395 26 01 00      mov b, 1; DELIMITER
4861   2398 E7            pop d
4862   2399 FD 43         mov [d], b
4863   239B 0A EE 24      jmp _if73_exit
4864   239E             _if73_else:
4865   239E             ;; if(*prog == ';'){ 
4866   239E             _if74_cond:
4867   239E 3B 7F 27      mov d, _prog ; $prog
4868   23A1 2A            mov b, [d]
4869   23A2 74            mov d, b
4870   23A3 32            mov bl, [d]
4871   23A4 A7 00         mov bh, 0
4872   23A6             ; START RELATIONAL
4873   23A6 D7            push a
4874   23A7 11            mov a, b
4875   23A8 26 3B 00      mov b, $3b
4876   23AB B0            cmp a, b
4877   23AC FD 71         seq ; ==
4878   23AE E4            pop a
4879   23AF             ; END RELATIONAL
4880   23AF C0 00 00      cmp b, 0
4881   23B2 C6 F2 23      je _if74_else
4882   23B5             _if74_true:
4883   23B5             ;; *t++ = *prog++; 
4884   23B5 FA FF FF      lea d, [bp + -1] ; $t
4885   23B8 2A            mov b, [d]
4886   23B9 FD 79         mov g, b
4887   23BB FD 77         inc b
4888   23BD FA FF FF      lea d, [bp + -1] ; $t
4889   23C0 FD 43         mov [d], b
4890   23C2 FD 27         mov b, g
4891   23C4 D8            push b
4892   23C5 3B 7F 27      mov d, _prog ; $prog
4893   23C8 2A            mov b, [d]
4894   23C9 FD 79         mov g, b
4895   23CB FD 77         inc b
4896   23CD 3B 7F 27      mov d, _prog ; $prog
4897   23D0 FD 43         mov [d], b
4898   23D2 FD 27         mov b, g
4899   23D4 74            mov d, b
4900   23D5 32            mov bl, [d]
4901   23D6 A7 00         mov bh, 0
4902   23D8 E7            pop d
4903   23D9 FD 3E         mov [d], bl
4904   23DB             ;; tok = SEMICOLON; 
4905   23DB 3B 7B 27      mov d, _tok ; $tok
4906   23DE DA            push d
4907   23DF 26 23 00      mov b, 35; SEMICOLON
4908   23E2 E7            pop d
4909   23E3 FD 43         mov [d], b
4910   23E5             ;; toktype = DELIMITER;   
4911   23E5 3B 7D 27      mov d, _toktype ; $toktype
4912   23E8 DA            push d
4913   23E9 26 01 00      mov b, 1; DELIMITER
4914   23EC E7            pop d
4915   23ED FD 43         mov [d], b
4916   23EF 0A EE 24      jmp _if74_exit
4917   23F2             _if74_else:
4918   23F2             ;; if(*prog == ':'){ 
4919   23F2             _if75_cond:
4920   23F2 3B 7F 27      mov d, _prog ; $prog
4921   23F5 2A            mov b, [d]
4922   23F6 74            mov d, b
4923   23F7 32            mov bl, [d]
4924   23F8 A7 00         mov bh, 0
4925   23FA             ; START RELATIONAL
4926   23FA D7            push a
4927   23FB 11            mov a, b
4928   23FC 26 3A 00      mov b, $3a
4929   23FF B0            cmp a, b
4930   2400 FD 71         seq ; ==
4931   2402 E4            pop a
4932   2403             ; END RELATIONAL
4933   2403 C0 00 00      cmp b, 0
4934   2406 C6 46 24      je _if75_else
4935   2409             _if75_true:
4936   2409             ;; *t++ = *prog++; 
4937   2409 FA FF FF      lea d, [bp + -1] ; $t
4938   240C 2A            mov b, [d]
4939   240D FD 79         mov g, b
4940   240F FD 77         inc b
4941   2411 FA FF FF      lea d, [bp + -1] ; $t
4942   2414 FD 43         mov [d], b
4943   2416 FD 27         mov b, g
4944   2418 D8            push b
4945   2419 3B 7F 27      mov d, _prog ; $prog
4946   241C 2A            mov b, [d]
4947   241D FD 79         mov g, b
4948   241F FD 77         inc b
4949   2421 3B 7F 27      mov d, _prog ; $prog
4950   2424 FD 43         mov [d], b
4951   2426 FD 27         mov b, g
4952   2428 74            mov d, b
4953   2429 32            mov bl, [d]
4954   242A A7 00         mov bh, 0
4955   242C E7            pop d
4956   242D FD 3E         mov [d], bl
4957   242F             ;; tok = COLON; 
4958   242F 3B 7B 27      mov d, _tok ; $tok
4959   2432 DA            push d
4960   2433 26 22 00      mov b, 34; COLON
4961   2436 E7            pop d
4962   2437 FD 43         mov [d], b
4963   2439             ;; toktype = DELIMITER;   
4964   2439 3B 7D 27      mov d, _toktype ; $toktype
4965   243C DA            push d
4966   243D 26 01 00      mov b, 1; DELIMITER
4967   2440 E7            pop d
4968   2441 FD 43         mov [d], b
4969   2443 0A EE 24      jmp _if75_exit
4970   2446             _if75_else:
4971   2446             ;; if(*prog == ','){ 
4972   2446             _if76_cond:
4973   2446 3B 7F 27      mov d, _prog ; $prog
4974   2449 2A            mov b, [d]
4975   244A 74            mov d, b
4976   244B 32            mov bl, [d]
4977   244C A7 00         mov bh, 0
4978   244E             ; START RELATIONAL
4979   244E D7            push a
4980   244F 11            mov a, b
4981   2450 26 2C 00      mov b, $2c
4982   2453 B0            cmp a, b
4983   2454 FD 71         seq ; ==
4984   2456 E4            pop a
4985   2457             ; END RELATIONAL
4986   2457 C0 00 00      cmp b, 0
4987   245A C6 9A 24      je _if76_else
4988   245D             _if76_true:
4989   245D             ;; *t++ = *prog++; 
4990   245D FA FF FF      lea d, [bp + -1] ; $t
4991   2460 2A            mov b, [d]
4992   2461 FD 79         mov g, b
4993   2463 FD 77         inc b
4994   2465 FA FF FF      lea d, [bp + -1] ; $t
4995   2468 FD 43         mov [d], b
4996   246A FD 27         mov b, g
4997   246C D8            push b
4998   246D 3B 7F 27      mov d, _prog ; $prog
4999   2470 2A            mov b, [d]
5000   2471 FD 79         mov g, b
5001   2473 FD 77         inc b
5002   2475 3B 7F 27      mov d, _prog ; $prog
5003   2478 FD 43         mov [d], b
5004   247A FD 27         mov b, g
5005   247C 74            mov d, b
5006   247D 32            mov bl, [d]
5007   247E A7 00         mov bh, 0
5008   2480 E7            pop d
5009   2481 FD 3E         mov [d], bl
5010   2483             ;; tok = COMMA; 
5011   2483 3B 7B 27      mov d, _tok ; $tok
5012   2486 DA            push d
5013   2487 26 24 00      mov b, 36; COMMA
5014   248A E7            pop d
5015   248B FD 43         mov [d], b
5016   248D             ;; toktype = DELIMITER;   
5017   248D 3B 7D 27      mov d, _toktype ; $toktype
5018   2490 DA            push d
5019   2491 26 01 00      mov b, 1; DELIMITER
5020   2494 E7            pop d
5021   2495 FD 43         mov [d], b
5022   2497 0A EE 24      jmp _if76_exit
5023   249A             _if76_else:
5024   249A             ;; if(*prog == '.'){ 
5025   249A             _if77_cond:
5026   249A 3B 7F 27      mov d, _prog ; $prog
5027   249D 2A            mov b, [d]
5028   249E 74            mov d, b
5029   249F 32            mov bl, [d]
5030   24A0 A7 00         mov bh, 0
5031   24A2             ; START RELATIONAL
5032   24A2 D7            push a
5033   24A3 11            mov a, b
5034   24A4 26 2E 00      mov b, $2e
5035   24A7 B0            cmp a, b
5036   24A8 FD 71         seq ; ==
5037   24AA E4            pop a
5038   24AB             ; END RELATIONAL
5039   24AB C0 00 00      cmp b, 0
5040   24AE C6 EE 24      je _if77_exit
5041   24B1             _if77_true:
5042   24B1             ;; *t++ = *prog++; 
5043   24B1 FA FF FF      lea d, [bp + -1] ; $t
5044   24B4 2A            mov b, [d]
5045   24B5 FD 79         mov g, b
5046   24B7 FD 77         inc b
5047   24B9 FA FF FF      lea d, [bp + -1] ; $t
5048   24BC FD 43         mov [d], b
5049   24BE FD 27         mov b, g
5050   24C0 D8            push b
5051   24C1 3B 7F 27      mov d, _prog ; $prog
5052   24C4 2A            mov b, [d]
5053   24C5 FD 79         mov g, b
5054   24C7 FD 77         inc b
5055   24C9 3B 7F 27      mov d, _prog ; $prog
5056   24CC FD 43         mov [d], b
5057   24CE FD 27         mov b, g
5058   24D0 74            mov d, b
5059   24D1 32            mov bl, [d]
5060   24D2 A7 00         mov bh, 0
5061   24D4 E7            pop d
5062   24D5 FD 3E         mov [d], bl
5063   24D7             ;; tok = DOT; 
5064   24D7 3B 7B 27      mov d, _tok ; $tok
5065   24DA DA            push d
5066   24DB 26 25 00      mov b, 37; DOT
5067   24DE E7            pop d
5068   24DF FD 43         mov [d], b
5069   24E1             ;; toktype = DELIMITER;   
5070   24E1 3B 7D 27      mov d, _toktype ; $toktype
5071   24E4 DA            push d
5072   24E5 26 01 00      mov b, 1; DELIMITER
5073   24E8 E7            pop d
5074   24E9 FD 43         mov [d], b
5075   24EB 0A EE 24      jmp _if77_exit
5076   24EE             _if77_exit:
5077   24EE             _if76_exit:
5078   24EE             _if75_exit:
5079   24EE             _if74_exit:
5080   24EE             _if73_exit:
5081   24EE             _if72_exit:
5082   24EE             _if71_exit:
5083   24EE             _if70_exit:
5084   24EE             _if69_exit:
5085   24EE             _if68_exit:
5086   24EE             _if67_exit:
5087   24EE             _if66_exit:
5088   24EE             _if64_exit:
5089   24EE             _if62_exit:
5090   24EE             _if60_exit:
5091   24EE             _if57_exit:
5092   24EE             _if54_exit:
5093   24EE             _if53_exit:
5094   24EE             _if51_exit:
5095   24EE             _if49_exit:
5096   24EE             _if47_exit:
5097   24EE             _if46_exit:
5098   24EE             _if45_exit:
5099   24EE             _if44_exit:
5100   24EE             _if43_exit:
5101   24EE             _if42_exit:
5102   24EE             _if39_exit:
5103   24EE             _if37_exit:
5104   24EE             _if35_exit:
5105   24EE             ;; *t = '\0'; 
5106   24EE FA FF FF      lea d, [bp + -1] ; $t
5107   24F1 2A            mov b, [d]
5108   24F2 D8            push b
5109   24F3 26 00 00      mov b, $0
5110   24F6 E7            pop d
5111   24F7 FD 3E         mov [d], bl
5112   24F9 F9            leave
5113   24FA 09            ret
5114   24FB             
5115   24FB             convert_constant:
5116   24FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
5117   24FE             ; $s 
5118   24FE             ; $t 
5119   24FE 52 04 00      sub sp, 4
5120   2501             ;; t = token; 
5121   2501 FA FD FF      lea d, [bp + -3] ; $t
5122   2504 DA            push d
5123   2505 3B 81 27      mov d, _token_data ; $token
5124   2508 2D            mov b, d
5125   2509 E7            pop d
5126   250A FD 43         mov [d], b
5127   250C             ;; s = string_const; 
5128   250C FA FF FF      lea d, [bp + -1] ; $s
5129   250F DA            push d
5130   2510 3B 81 28      mov d, _string_const_data ; $string_const
5131   2513 2D            mov b, d
5132   2514 E7            pop d
5133   2515 FD 43         mov [d], b
5134   2517             ;; if(toktype == CHAR_CONST){ 
5135   2517             _if78_cond:
5136   2517 3B 7D 27      mov d, _toktype ; $toktype
5137   251A 2A            mov b, [d]
5138   251B             ; START RELATIONAL
5139   251B D7            push a
5140   251C 11            mov a, b
5141   251D 26 02 00      mov b, 2; CHAR_CONST
5142   2520 B0            cmp a, b
5143   2521 FD 71         seq ; ==
5144   2523 E4            pop a
5145   2524             ; END RELATIONAL
5146   2524 C0 00 00      cmp b, 0
5147   2527 C6 D2 26      je _if78_else
5148   252A             _if78_true:
5149   252A             ;; t++; 
5150   252A FA FD FF      lea d, [bp + -3] ; $t
5151   252D 2A            mov b, [d]
5152   252E FD 79         mov g, b
5153   2530 FD 77         inc b
5154   2532 FA FD FF      lea d, [bp + -3] ; $t
5155   2535 FD 43         mov [d], b
5156   2537 FD 27         mov b, g
5157   2539             ;; if(*t == '\\'){ 
5158   2539             _if79_cond:
5159   2539 FA FD FF      lea d, [bp + -3] ; $t
5160   253C 2A            mov b, [d]
5161   253D 74            mov d, b
5162   253E 32            mov bl, [d]
5163   253F A7 00         mov bh, 0
5164   2541             ; START RELATIONAL
5165   2541 D7            push a
5166   2542 11            mov a, b
5167   2543 26 5C 00      mov b, $5c
5168   2546 B0            cmp a, b
5169   2547 FD 71         seq ; ==
5170   2549 E4            pop a
5171   254A             ; END RELATIONAL
5172   254A C0 00 00      cmp b, 0
5173   254D C6 B4 26      je _if79_else
5174   2550             _if79_true:
5175   2550             ;; t++; 
5176   2550 FA FD FF      lea d, [bp + -3] ; $t
5177   2553 2A            mov b, [d]
5178   2554 FD 79         mov g, b
5179   2556 FD 77         inc b
5180   2558 FA FD FF      lea d, [bp + -3] ; $t
5181   255B FD 43         mov [d], b
5182   255D FD 27         mov b, g
5183   255F             ;; switch(*t){ 
5184   255F             _switch80_expr:
5185   255F FA FD FF      lea d, [bp + -3] ; $t
5186   2562 2A            mov b, [d]
5187   2563 74            mov d, b
5188   2564 32            mov bl, [d]
5189   2565 A7 00         mov bh, 0
5190   2567             _switch80_comparisons:
5191   2567 C1 30         cmp bl, $30
5192   2569 C6 A1 25      je _switch80_case0
5193   256C C1 61         cmp bl, $61
5194   256E C6 BA 25      je _switch80_case1
5195   2571 C1 62         cmp bl, $62
5196   2573 C6 D3 25      je _switch80_case2
5197   2576 C1 66         cmp bl, $66
5198   2578 C6 EC 25      je _switch80_case3
5199   257B C1 6E         cmp bl, $6e
5200   257D C6 05 26      je _switch80_case4
5201   2580 C1 72         cmp bl, $72
5202   2582 C6 1E 26      je _switch80_case5
5203   2585 C1 74         cmp bl, $74
5204   2587 C6 37 26      je _switch80_case6
5205   258A C1 76         cmp bl, $76
5206   258C C6 50 26      je _switch80_case7
5207   258F C1 5C         cmp bl, $5c
5208   2591 C6 69 26      je _switch80_case8
5209   2594 C1 27         cmp bl, $27
5210   2596 C6 82 26      je _switch80_case9
5211   2599 C1 22         cmp bl, $22
5212   259B C6 9B 26      je _switch80_case10
5213   259E 0A B1 26      jmp _switch80_exit
5214   25A1             _switch80_case0:
5215   25A1             ;; *s++ = '\0'; 
5216   25A1 FA FF FF      lea d, [bp + -1] ; $s
5217   25A4 2A            mov b, [d]
5218   25A5 FD 79         mov g, b
5219   25A7 FD 77         inc b
5220   25A9 FA FF FF      lea d, [bp + -1] ; $s
5221   25AC FD 43         mov [d], b
5222   25AE FD 27         mov b, g
5223   25B0 D8            push b
5224   25B1 26 00 00      mov b, $0
5225   25B4 E7            pop d
5226   25B5 FD 3E         mov [d], bl
5227   25B7             ;; break; 
5228   25B7 0A B1 26      jmp _switch80_exit ; case break
5229   25BA             _switch80_case1:
5230   25BA             ;; *s++ = '\a'; 
5231   25BA FA FF FF      lea d, [bp + -1] ; $s
5232   25BD 2A            mov b, [d]
5233   25BE FD 79         mov g, b
5234   25C0 FD 77         inc b
5235   25C2 FA FF FF      lea d, [bp + -1] ; $s
5236   25C5 FD 43         mov [d], b
5237   25C7 FD 27         mov b, g
5238   25C9 D8            push b
5239   25CA 26 07 00      mov b, $7
5240   25CD E7            pop d
5241   25CE FD 3E         mov [d], bl
5242   25D0             ;; break; 
5243   25D0 0A B1 26      jmp _switch80_exit ; case break
5244   25D3             _switch80_case2:
5245   25D3             ;; *s++ = '\b'; 
5246   25D3 FA FF FF      lea d, [bp + -1] ; $s
5247   25D6 2A            mov b, [d]
5248   25D7 FD 79         mov g, b
5249   25D9 FD 77         inc b
5250   25DB FA FF FF      lea d, [bp + -1] ; $s
5251   25DE FD 43         mov [d], b
5252   25E0 FD 27         mov b, g
5253   25E2 D8            push b
5254   25E3 26 08 00      mov b, $8
5255   25E6 E7            pop d
5256   25E7 FD 3E         mov [d], bl
5257   25E9             ;; break;   
5258   25E9 0A B1 26      jmp _switch80_exit ; case break
5259   25EC             _switch80_case3:
5260   25EC             ;; *s++ = '\f'; 
5261   25EC FA FF FF      lea d, [bp + -1] ; $s
5262   25EF 2A            mov b, [d]
5263   25F0 FD 79         mov g, b
5264   25F2 FD 77         inc b
5265   25F4 FA FF FF      lea d, [bp + -1] ; $s
5266   25F7 FD 43         mov [d], b
5267   25F9 FD 27         mov b, g
5268   25FB D8            push b
5269   25FC 26 0C 00      mov b, $c
5270   25FF E7            pop d
5271   2600 FD 3E         mov [d], bl
5272   2602             ;; break; 
5273   2602 0A B1 26      jmp _switch80_exit ; case break
5274   2605             _switch80_case4:
5275   2605             ;; *s++ = '\n'; 
5276   2605 FA FF FF      lea d, [bp + -1] ; $s
5277   2608 2A            mov b, [d]
5278   2609 FD 79         mov g, b
5279   260B FD 77         inc b
5280   260D FA FF FF      lea d, [bp + -1] ; $s
5281   2610 FD 43         mov [d], b
5282   2612 FD 27         mov b, g
5283   2614 D8            push b
5284   2615 26 0A 00      mov b, $a
5285   2618 E7            pop d
5286   2619 FD 3E         mov [d], bl
5287   261B             ;; break; 
5288   261B 0A B1 26      jmp _switch80_exit ; case break
5289   261E             _switch80_case5:
5290   261E             ;; *s++ = '\r'; 
5291   261E FA FF FF      lea d, [bp + -1] ; $s
5292   2621 2A            mov b, [d]
5293   2622 FD 79         mov g, b
5294   2624 FD 77         inc b
5295   2626 FA FF FF      lea d, [bp + -1] ; $s
5296   2629 FD 43         mov [d], b
5297   262B FD 27         mov b, g
5298   262D D8            push b
5299   262E 26 0D 00      mov b, $d
5300   2631 E7            pop d
5301   2632 FD 3E         mov [d], bl
5302   2634             ;; break; 
5303   2634 0A B1 26      jmp _switch80_exit ; case break
5304   2637             _switch80_case6:
5305   2637             ;; *s++ = '\t'; 
5306   2637 FA FF FF      lea d, [bp + -1] ; $s
5307   263A 2A            mov b, [d]
5308   263B FD 79         mov g, b
5309   263D FD 77         inc b
5310   263F FA FF FF      lea d, [bp + -1] ; $s
5311   2642 FD 43         mov [d], b
5312   2644 FD 27         mov b, g
5313   2646 D8            push b
5314   2647 26 09 00      mov b, $9
5315   264A E7            pop d
5316   264B FD 3E         mov [d], bl
5317   264D             ;; break; 
5318   264D 0A B1 26      jmp _switch80_exit ; case break
5319   2650             _switch80_case7:
5320   2650             ;; *s++ = '\v'; 
5321   2650 FA FF FF      lea d, [bp + -1] ; $s
5322   2653 2A            mov b, [d]
5323   2654 FD 79         mov g, b
5324   2656 FD 77         inc b
5325   2658 FA FF FF      lea d, [bp + -1] ; $s
5326   265B FD 43         mov [d], b
5327   265D FD 27         mov b, g
5328   265F D8            push b
5329   2660 26 0B 00      mov b, $b
5330   2663 E7            pop d
5331   2664 FD 3E         mov [d], bl
5332   2666             ;; break; 
5333   2666 0A B1 26      jmp _switch80_exit ; case break
5334   2669             _switch80_case8:
5335   2669             ;; *s++ = '\\'; 
5336   2669 FA FF FF      lea d, [bp + -1] ; $s
5337   266C 2A            mov b, [d]
5338   266D FD 79         mov g, b
5339   266F FD 77         inc b
5340   2671 FA FF FF      lea d, [bp + -1] ; $s
5341   2674 FD 43         mov [d], b
5342   2676 FD 27         mov b, g
5343   2678 D8            push b
5344   2679 26 5C 00      mov b, $5c
5345   267C E7            pop d
5346   267D FD 3E         mov [d], bl
5347   267F             ;; break; 
5348   267F 0A B1 26      jmp _switch80_exit ; case break
5349   2682             _switch80_case9:
5350   2682             ;; *s++ = '\''; 
5351   2682 FA FF FF      lea d, [bp + -1] ; $s
5352   2685 2A            mov b, [d]
5353   2686 FD 79         mov g, b
5354   2688 FD 77         inc b
5355   268A FA FF FF      lea d, [bp + -1] ; $s
5356   268D FD 43         mov [d], b
5357   268F FD 27         mov b, g
5358   2691 D8            push b
5359   2692 26 27 00      mov b, $27
5360   2695 E7            pop d
5361   2696 FD 3E         mov [d], bl
5362   2698             ;; break; 
5363   2698 0A B1 26      jmp _switch80_exit ; case break
5364   269B             _switch80_case10:
5365   269B             ;; *s++ = '\"'; 
5366   269B FA FF FF      lea d, [bp + -1] ; $s
5367   269E 2A            mov b, [d]
5368   269F FD 79         mov g, b
5369   26A1 FD 77         inc b
5370   26A3 FA FF FF      lea d, [bp + -1] ; $s
5371   26A6 FD 43         mov [d], b
5372   26A8 FD 27         mov b, g
5373   26AA D8            push b
5374   26AB 26 22 00      mov b, $22
5375   26AE E7            pop d
5376   26AF FD 3E         mov [d], bl
5377   26B1             _switch80_exit:
5378   26B1 0A CF 26      jmp _if79_exit
5379   26B4             _if79_else:
5380   26B4             ;; *s++ = *t; 
5381   26B4 FA FF FF      lea d, [bp + -1] ; $s
5382   26B7 2A            mov b, [d]
5383   26B8 FD 79         mov g, b
5384   26BA FD 77         inc b
5385   26BC FA FF FF      lea d, [bp + -1] ; $s
5386   26BF FD 43         mov [d], b
5387   26C1 FD 27         mov b, g
5388   26C3 D8            push b
5389   26C4 FA FD FF      lea d, [bp + -3] ; $t
5390   26C7 2A            mov b, [d]
5391   26C8 74            mov d, b
5392   26C9 32            mov bl, [d]
5393   26CA A7 00         mov bh, 0
5394   26CC E7            pop d
5395   26CD FD 3E         mov [d], bl
5396   26CF             _if79_exit:
5397   26CF 0A 44 27      jmp _if78_exit
5398   26D2             _if78_else:
5399   26D2             ;; if(toktype == STRING_CONST){ 
5400   26D2             _if81_cond:
5401   26D2 3B 7D 27      mov d, _toktype ; $toktype
5402   26D5 2A            mov b, [d]
5403   26D6             ; START RELATIONAL
5404   26D6 D7            push a
5405   26D7 11            mov a, b
5406   26D8 26 03 00      mov b, 3; STRING_CONST
5407   26DB B0            cmp a, b
5408   26DC FD 71         seq ; ==
5409   26DE E4            pop a
5410   26DF             ; END RELATIONAL
5411   26DF C0 00 00      cmp b, 0
5412   26E2 C6 44 27      je _if81_exit
5413   26E5             _if81_true:
5414   26E5             ;; t++; 
5415   26E5 FA FD FF      lea d, [bp + -3] ; $t
5416   26E8 2A            mov b, [d]
5417   26E9 FD 79         mov g, b
5418   26EB FD 77         inc b
5419   26ED FA FD FF      lea d, [bp + -3] ; $t
5420   26F0 FD 43         mov [d], b
5421   26F2 FD 27         mov b, g
5422   26F4             ;; while(*t != '\"' && *t){ 
5423   26F4             _while82_cond:
5424   26F4 FA FD FF      lea d, [bp + -3] ; $t
5425   26F7 2A            mov b, [d]
5426   26F8 74            mov d, b
5427   26F9 32            mov bl, [d]
5428   26FA A7 00         mov bh, 0
5429   26FC             ; START RELATIONAL
5430   26FC D7            push a
5431   26FD 11            mov a, b
5432   26FE 26 22 00      mov b, $22
5433   2701 B0            cmp a, b
5434   2702 FD 72         sneq ; !=
5435   2704 E4            pop a
5436   2705             ; END RELATIONAL
5437   2705 D7            push a
5438   2706 11            mov a, b
5439   2707 FA FD FF      lea d, [bp + -3] ; $t
5440   270A 2A            mov b, [d]
5441   270B 74            mov d, b
5442   270C 32            mov bl, [d]
5443   270D A7 00         mov bh, 0
5444   270F FD A7         sand a, b ; &&
5445   2711 E4            pop a
5446   2712 C0 00 00      cmp b, 0
5447   2715 C6 41 27      je _while82_exit
5448   2718             _while82_block:
5449   2718             ;; *s++ = *t++; 
5450   2718 FA FF FF      lea d, [bp + -1] ; $s
5451   271B 2A            mov b, [d]
5452   271C FD 79         mov g, b
5453   271E FD 77         inc b
5454   2720 FA FF FF      lea d, [bp + -1] ; $s
5455   2723 FD 43         mov [d], b
5456   2725 FD 27         mov b, g
5457   2727 D8            push b
5458   2728 FA FD FF      lea d, [bp + -3] ; $t
5459   272B 2A            mov b, [d]
5460   272C FD 79         mov g, b
5461   272E FD 77         inc b
5462   2730 FA FD FF      lea d, [bp + -3] ; $t
5463   2733 FD 43         mov [d], b
5464   2735 FD 27         mov b, g
5465   2737 74            mov d, b
5466   2738 32            mov bl, [d]
5467   2739 A7 00         mov bh, 0
5468   273B E7            pop d
5469   273C FD 3E         mov [d], bl
5470   273E 0A F4 26      jmp _while82_cond
5471   2741             _while82_exit:
5472   2741 0A 44 27      jmp _if81_exit
5473   2744             _if81_exit:
5474   2744             _if78_exit:
5475   2744             ;; *s = '\0'; 
5476   2744 FA FF FF      lea d, [bp + -1] ; $s
5477   2747 2A            mov b, [d]
5478   2748 D8            push b
5479   2749 26 00 00      mov b, $0
5480   274C E7            pop d
5481   274D FD 3E         mov [d], bl
5482   274F F9            leave
5483   2750 09            ret
5484   2751             
5485   2751             error:
5486   2751 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5487   2754             ;; printf("\nError: "); 
5488   2754 26 06 2C      mov b, __s5 ; "\nError: "
5489   2757 FD AB         swp b
5490   2759 D8            push b
5491   275A 07 A3 0A      call printf
5492   275D 51 02 00      add sp, 2
5493   2760             ;; printf(msg); 
5494   2760 FA 05 00      lea d, [bp + 5] ; $msg
5495   2763 2A            mov b, [d]
5496   2764 FD AB         swp b
5497   2766 D8            push b
5498   2767 07 A3 0A      call printf
5499   276A 51 02 00      add sp, 2
5500   276D             ;; printf("\n"); 
5501   276D 26 0F 2C      mov b, __s6 ; "\n"
5502   2770 FD AB         swp b
5503   2772 D8            push b
5504   2773 07 A3 0A      call printf
5505   2776 51 02 00      add sp, 2
5506   2779 F9            leave
5507   277A 09            ret
5508   277B             ; --- END TEXT BLOCK
5509   277B             
5510   277B             ; --- BEGIN DATA BLOCK
5511   277B 00 00       _tok: .fill 2, 0
5512   277D 00 00       _toktype: .fill 2, 0
5513   277F 00 00       _prog: .fill 2, 0
5514   2781 00 00 00 00 _token_data: .fill 256, 0
5514   2785 00 00 00 00 
5514   2789 00 00 00 00 
5514   278D 00 00 00 00 
5514   2791 00 00 00 00 
5514   2795 00 00 00 00 
5514   2799 00 00 00 00 
5514   279D 00 00 00 00 
5514   27A1 00 00 00 00 
5514   27A5 00 00 00 00 
5514   27A9 00 00 00 00 
5514   27AD 00 00 00 00 
5514   27B1 00 00 00 00 
5514   27B5 00 00 00 00 
5514   27B9 00 00 00 00 
5514   27BD 00 00 00 00 
5514   27C1 00 00 00 00 
5514   27C5 00 00 00 00 
5514   27C9 00 00 00 00 
5514   27CD 00 00 00 00 
5514   27D1 00 00 00 00 
5514   27D5 00 00 00 00 
5514   27D9 00 00 00 00 
5514   27DD 00 00 00 00 
5514   27E1 00 00 00 00 
5514   27E5 00 00 00 00 
5514   27E9 00 00 00 00 
5514   27ED 00 00 00 00 
5514   27F1 00 00 00 00 
5514   27F5 00 00 00 00 
5514   27F9 00 00 00 00 
5514   27FD 00 00 00 00 
5514   2801 00 00 00 00 
5514   2805 00 00 00 00 
5514   2809 00 00 00 00 
5514   280D 00 00 00 00 
5514   2811 00 00 00 00 
5514   2815 00 00 00 00 
5514   2819 00 00 00 00 
5514   281D 00 00 00 00 
5514   2821 00 00 00 00 
5514   2825 00 00 00 00 
5514   2829 00 00 00 00 
5514   282D 00 00 00 00 
5514   2831 00 00 00 00 
5514   2835 00 00 00 00 
5514   2839 00 00 00 00 
5514   283D 00 00 00 00 
5514   2841 00 00 00 00 
5514   2845 00 00 00 00 
5514   2849 00 00 00 00 
5514   284D 00 00 00 00 
5514   2851 00 00 00 00 
5514   2855 00 00 00 00 
5514   2859 00 00 00 00 
5514   285D 00 00 00 00 
5514   2861 00 00 00 00 
5514   2865 00 00 00 00 
5514   2869 00 00 00 00 
5514   286D 00 00 00 00 
5514   2871 00 00 00 00 
5514   2875 00 00 00 00 
5514   2879 00 00 00 00 
5514   287D 00 00 00 00 
5515   2881 00 00 00 00 _string_const_data: .fill 256, 0
5515   2885 00 00 00 00 
5515   2889 00 00 00 00 
5515   288D 00 00 00 00 
5515   2891 00 00 00 00 
5515   2895 00 00 00 00 
5515   2899 00 00 00 00 
5515   289D 00 00 00 00 
5515   28A1 00 00 00 00 
5515   28A5 00 00 00 00 
5515   28A9 00 00 00 00 
5515   28AD 00 00 00 00 
5515   28B1 00 00 00 00 
5515   28B5 00 00 00 00 
5515   28B9 00 00 00 00 
5515   28BD 00 00 00 00 
5515   28C1 00 00 00 00 
5515   28C5 00 00 00 00 
5515   28C9 00 00 00 00 
5515   28CD 00 00 00 00 
5515   28D1 00 00 00 00 
5515   28D5 00 00 00 00 
5515   28D9 00 00 00 00 
5515   28DD 00 00 00 00 
5515   28E1 00 00 00 00 
5515   28E5 00 00 00 00 
5515   28E9 00 00 00 00 
5515   28ED 00 00 00 00 
5515   28F1 00 00 00 00 
5515   28F5 00 00 00 00 
5515   28F9 00 00 00 00 
5515   28FD 00 00 00 00 
5515   2901 00 00 00 00 
5515   2905 00 00 00 00 
5515   2909 00 00 00 00 
5515   290D 00 00 00 00 
5515   2911 00 00 00 00 
5515   2915 00 00 00 00 
5515   2919 00 00 00 00 
5515   291D 00 00 00 00 
5515   2921 00 00 00 00 
5515   2925 00 00 00 00 
5515   2929 00 00 00 00 
5515   292D 00 00 00 00 
5515   2931 00 00 00 00 
5515   2935 00 00 00 00 
5515   2939 00 00 00 00 
5515   293D 00 00 00 00 
5515   2941 00 00 00 00 
5515   2945 00 00 00 00 
5515   2949 00 00 00 00 
5515   294D 00 00 00 00 
5515   2951 00 00 00 00 
5515   2955 00 00 00 00 
5515   2959 00 00 00 00 
5515   295D 00 00 00 00 
5515   2961 00 00 00 00 
5515   2965 00 00 00 00 
5515   2969 00 00 00 00 
5515   296D 00 00 00 00 
5515   2971 00 00 00 00 
5515   2975 00 00 00 00 
5515   2979 00 00 00 00 
5515   297D 00 00 00 00 
5516   2981 00 00 00 00 _arg_data: .fill 512, 0
5516   2985 00 00 00 00 
5516   2989 00 00 00 00 
5516   298D 00 00 00 00 
5516   2991 00 00 00 00 
5516   2995 00 00 00 00 
5516   2999 00 00 00 00 
5516   299D 00 00 00 00 
5516   29A1 00 00 00 00 
5516   29A5 00 00 00 00 
5516   29A9 00 00 00 00 
5516   29AD 00 00 00 00 
5516   29B1 00 00 00 00 
5516   29B5 00 00 00 00 
5516   29B9 00 00 00 00 
5516   29BD 00 00 00 00 
5516   29C1 00 00 00 00 
5516   29C5 00 00 00 00 
5516   29C9 00 00 00 00 
5516   29CD 00 00 00 00 
5516   29D1 00 00 00 00 
5516   29D5 00 00 00 00 
5516   29D9 00 00 00 00 
5516   29DD 00 00 00 00 
5516   29E1 00 00 00 00 
5516   29E5 00 00 00 00 
5516   29E9 00 00 00 00 
5516   29ED 00 00 00 00 
5516   29F1 00 00 00 00 
5516   29F5 00 00 00 00 
5516   29F9 00 00 00 00 
5516   29FD 00 00 00 00 
5516   2A01 00 00 00 00 
5516   2A05 00 00 00 00 
5516   2A09 00 00 00 00 
5516   2A0D 00 00 00 00 
5516   2A11 00 00 00 00 
5516   2A15 00 00 00 00 
5516   2A19 00 00 00 00 
5516   2A1D 00 00 00 00 
5516   2A21 00 00 00 00 
5516   2A25 00 00 00 00 
5516   2A29 00 00 00 00 
5516   2A2D 00 00 00 00 
5516   2A31 00 00 00 00 
5516   2A35 00 00 00 00 
5516   2A39 00 00 00 00 
5516   2A3D 00 00 00 00 
5516   2A41 00 00 00 00 
5516   2A45 00 00 00 00 
5516   2A49 00 00 00 00 
5516   2A4D 00 00 00 00 
5516   2A51 00 00 00 00 
5516   2A55 00 00 00 00 
5516   2A59 00 00 00 00 
5516   2A5D 00 00 00 00 
5516   2A61 00 00 00 00 
5516   2A65 00 00 00 00 
5516   2A69 00 00 00 00 
5516   2A6D 00 00 00 00 
5516   2A71 00 00 00 00 
5516   2A75 00 00 00 00 
5516   2A79 00 00 00 00 
5516   2A7D 00 00 00 00 
5516   2A81 00 00 00 00 
5516   2A85 00 00 00 00 
5516   2A89 00 00 00 00 
5516   2A8D 00 00 00 00 
5516   2A91 00 00 00 00 
5516   2A95 00 00 00 00 
5516   2A99 00 00 00 00 
5516   2A9D 00 00 00 00 
5516   2AA1 00 00 00 00 
5516   2AA5 00 00 00 00 
5516   2AA9 00 00 00 00 
5516   2AAD 00 00 00 00 
5516   2AB1 00 00 00 00 
5516   2AB5 00 00 00 00 
5516   2AB9 00 00 00 00 
5516   2ABD 00 00 00 00 
5516   2AC1 00 00 00 00 
5516   2AC5 00 00 00 00 
5516   2AC9 00 00 00 00 
5516   2ACD 00 00 00 00 
5516   2AD1 00 00 00 00 
5516   2AD5 00 00 00 00 
5516   2AD9 00 00 00 00 
5516   2ADD 00 00 00 00 
5516   2AE1 00 00 00 00 
5516   2AE5 00 00 00 00 
5516   2AE9 00 00 00 00 
5516   2AED 00 00 00 00 
5516   2AF1 00 00 00 00 
5516   2AF5 00 00 00 00 
5516   2AF9 00 00 00 00 
5516   2AFD 00 00 00 00 
5516   2B01 00 00 00 00 
5516   2B05 00 00 00 00 
5516   2B09 00 00 00 00 
5516   2B0D 00 00 00 00 
5516   2B11 00 00 00 00 
5516   2B15 00 00 00 00 
5516   2B19 00 00 00 00 
5516   2B1D 00 00 00 00 
5516   2B21 00 00 00 00 
5516   2B25 00 00 00 00 
5516   2B29 00 00 00 00 
5516   2B2D 00 00 00 00 
5516   2B31 00 00 00 00 
5516   2B35 00 00 00 00 
5516   2B39 00 00 00 00 
5516   2B3D 00 00 00 00 
5516   2B41 00 00 00 00 
5516   2B45 00 00 00 00 
5516   2B49 00 00 00 00 
5516   2B4D 00 00 00 00 
5516   2B51 00 00 00 00 
5516   2B55 00 00 00 00 
5516   2B59 00 00 00 00 
5516   2B5D 00 00 00 00 
5516   2B61 00 00 00 00 
5516   2B65 00 00 00 00 
5516   2B69 00 00 00 00 
5516   2B6D 00 00 00 00 
5516   2B71 00 00 00 00 
5516   2B75 00 00 00 00 
5516   2B79 00 00 00 00 
5516   2B7D 00 00 00 00 
5517   2B81 3E 20 00    __s0: .db "> ", 0
5518   2B84 55 6E 6B 6E __s1: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
5518   2B88 6F 77 6E 20 
5518   2B8C 74 79 70 65 
5518   2B90 20 73 69 7A 
5518   2B94 65 20 69 6E 
5518   2B98 20 76 61 5F 
5518   2B9C 61 72 67 28 
5518   2BA0 29 20 63 61 
5518   2BA4 6C 6C 2E 20 
5518   2BA8 53 69 7A 65 
5518   2BAC 20 6E 65 65 
5518   2BB0 64 73 20 74 
5518   2BB4 6F 20 62 65 
5518   2BB8 20 65 69 74 
5518   2BBC 68 65 72 20 
5518   2BC0 31 20 6F 72 
5518   2BC4 20 32 2E 00 
5519   2BC8 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
5519   2BCC 72 3A 20 55 
5519   2BD0 6E 6B 6E 6F 
5519   2BD4 77 6E 20 61 
5519   2BD8 72 67 75 6D 
5519   2BDC 65 6E 74 20 
5519   2BE0 74 79 70 65 
5519   2BE4 2E 0A 00 
5520   2BE7 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
5520   2BEB 1B 5B 48 00 
5521   2BEF 44 6F 75 62 __s4: .db "Double quotes expected", 0
5521   2BF3 6C 65 20 71 
5521   2BF7 75 6F 74 65 
5521   2BFB 73 20 65 78 
5521   2BFF 70 65 63 74 
5521   2C03 65 64 00 
5522   2C06 0A 45 72 72 __s5: .db "\nError: ", 0
5522   2C0A 6F 72 3A 20 
5522   2C0E 00 
5523   2C0F 0A 00       __s6: .db "\n", 0
5524   2C11             
5525   2C11 13 2C       _heap_top: .dw _heap
5526   2C13 00          _heap: .db 0
5527   2C14             ; --- END DATA BLOCK
5528   2C14             
5529   2C14             .end
tasm: Number of errors = 0
