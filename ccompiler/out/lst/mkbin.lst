0001   0000             ; --- FILENAME: ../solarium/usr/bin/mkbin
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $s 
0011   0408 52 02 00      sub sp, 2
0012   040B             ;; prog = 0x0000; // Beginning of arguments buffer 
0013   040B 3B D8 2E      mov d, _prog ; $prog
0014   040E DA            push d
0015   040F 26 00 00      mov b, $0
0016   0412 E7            pop d
0017   0413 FD 43         mov [d], b
0018   0415             ;; s = arg; 
0019   0415 FA FF FF      lea d, [bp + -1] ; $s
0020   0418 DA            push d
0021   0419 3B DA 30      mov d, _arg_data ; $arg
0022   041C 2D            mov b, d
0023   041D E7            pop d
0024   041E FD 43         mov [d], b
0025   0420             ;; for(;;){ 
0026   0420             _for1_init:
0027   0420             _for1_cond:
0028   0420             _for1_block:
0029   0420             ;; if(*prog == '\0' || *prog == ';' || *prog == ' '){ 
0030   0420             _if2_cond:
0031   0420 3B D8 2E      mov d, _prog ; $prog
0032   0423 2A            mov b, [d]
0033   0424 74            mov d, b
0034   0425 32            mov bl, [d]
0035   0426 A7 00         mov bh, 0
0036   0428             ; START RELATIONAL
0037   0428 D7            push a
0038   0429 11            mov a, b
0039   042A 26 00 00      mov b, $0
0040   042D B0            cmp a, b
0041   042E FD 71         seq ; ==
0042   0430 E4            pop a
0043   0431             ; END RELATIONAL
0044   0431 D7            push a
0045   0432 11            mov a, b
0046   0433 3B D8 2E      mov d, _prog ; $prog
0047   0436 2A            mov b, [d]
0048   0437 74            mov d, b
0049   0438 32            mov bl, [d]
0050   0439 A7 00         mov bh, 0
0051   043B             ; START RELATIONAL
0052   043B D7            push a
0053   043C 11            mov a, b
0054   043D 26 3B 00      mov b, $3b
0055   0440 B0            cmp a, b
0056   0441 FD 71         seq ; ==
0057   0443 E4            pop a
0058   0444             ; END RELATIONAL
0059   0444 FD A8         sor a, b ; ||
0060   0446 11            mov a, b
0061   0447 3B D8 2E      mov d, _prog ; $prog
0062   044A 2A            mov b, [d]
0063   044B 74            mov d, b
0064   044C 32            mov bl, [d]
0065   044D A7 00         mov bh, 0
0066   044F             ; START RELATIONAL
0067   044F D7            push a
0068   0450 11            mov a, b
0069   0451 26 20 00      mov b, $20
0070   0454 B0            cmp a, b
0071   0455 FD 71         seq ; ==
0072   0457 E4            pop a
0073   0458             ; END RELATIONAL
0074   0458 FD A8         sor a, b ; ||
0075   045A E4            pop a
0076   045B C0 00 00      cmp b, 0
0077   045E C6 72 04      je _if2_else
0078   0461             _if2_true:
0079   0461             ;; *s = '\0'; 
0080   0461 FA FF FF      lea d, [bp + -1] ; $s
0081   0464 2A            mov b, [d]
0082   0465 D8            push b
0083   0466 26 00 00      mov b, $0
0084   0469 E7            pop d
0085   046A FD 3E         mov [d], bl
0086   046C             ;; break; 
0087   046C 0A 97 04      jmp _for1_exit ; for break
0088   046F 0A 94 04      jmp _if2_exit
0089   0472             _if2_else:
0090   0472             ;; *s++ = *prog++; 
0091   0472 FA FF FF      lea d, [bp + -1] ; $s
0092   0475 2A            mov b, [d]
0093   0476 D8            push b
0094   0477 FD 77         inc b
0095   0479 FA FF FF      lea d, [bp + -1] ; $s
0096   047C FD 43         mov [d], b
0097   047E E5            pop b
0098   047F D8            push b
0099   0480 3B D8 2E      mov d, _prog ; $prog
0100   0483 2A            mov b, [d]
0101   0484 D8            push b
0102   0485 FD 77         inc b
0103   0487 3B D8 2E      mov d, _prog ; $prog
0104   048A FD 43         mov [d], b
0105   048C E5            pop b
0106   048D 74            mov d, b
0107   048E 32            mov bl, [d]
0108   048F A7 00         mov bh, 0
0109   0491 E7            pop d
0110   0492 FD 3E         mov [d], bl
0111   0494             _if2_exit:
0112   0494             _for1_update:
0113   0494 0A 20 04      jmp _for1_cond
0114   0497             _for1_exit:
0115   0497             ;; printf("> "); 
0116   0497 26 DA 32      mov b, _s0 ; "> "
0117   049A FD AB         swp b
0118   049C D8            push b
0119   049D 07 2C 0C      call printf
0120   04A0 51 02 00      add sp, 2
0121   04A3             
0122   04A3             ; --- BEGIN INLINE ASM BLOCK
0123   04A3 3B DA 30      mov d, _arg_data ; $arg
0124   04A6 19 06         mov al, 6
0125   04A8 05 04         syscall sys_filesystem
0126   04AA             ; --- END INLINE ASM BLOCK
0127   04AA             
0128   04AA 05 0B         syscall sys_terminate_proc
0129   04AC             
0130   04AC             include_ctype_lib:
0131   04AC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0132   04AF             
0133   04AF             ; --- BEGIN INLINE ASM BLOCK
0134   04AF             .include "lib/asm/ctype.asm"
0001+  04AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  04AF             ; ctype.s
0003+  04AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  04AF             
0005+  04AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  04AF             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  04AF             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  04AF             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  04AF             ;; characters are supported.
0010+  04AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  04AF             ;; _isalnum 
0012+  04AF             ;; _isalpha 
0013+  04AF             ;; islower 
0014+  04AF             ;; isupper 
0015+  04AF             ;; _isdigit 
0016+  04AF             ;; isxdigit
0017+  04AF             ;; iscntrl 
0018+  04AF             ;; isgraph 
0019+  04AF             ;; _isspace 
0020+  04AF             ;; isblank 
0021+  04AF             ;; isprint 
0022+  04AF             ;; ispunct 
0023+  04AF             ;; tolower 
0024+  04AF             ;; toupper
0025+  04AF             
0026+  04AF             
0027+  04AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  04AF             ;; IS ALPHANUMERIC
0029+  04AF             ;; sets ZF according with result
0030+  04AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  04AF             _isalnum:
0032+  04AF 07 CC 04    	call _isalpha
0033+  04B2 C6 B8 04    	je _isalnum_exit
0034+  04B5 07 B9 04    	call _isdigit
0035+  04B8             _isalnum_exit:
0036+  04B8 09          	ret	
0037+  04B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  04B9             ;; IS DIGIT
0039+  04B9             ;; sets ZF according with result
0040+  04B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  04B9             _isdigit:
0042+  04B9 DB          	push al
0043+  04BA B9 30       	cmp al, '0'
0044+  04BC C8 C8 04    	jlu _isdigit_false
0045+  04BF B9 39       	cmp al, '9'
0046+  04C1 D1 C8 04    	jgu _isdigit_false
0047+  04C4 87 00       	and al, 0	; set ZF
0048+  04C6 E8          	pop al
0049+  04C7 09          	ret
0050+  04C8             _isdigit_false:
0051+  04C8 8B 01       	or al, 1	; clear ZF
0052+  04CA E8          	pop al
0053+  04CB 09          	ret	
0054+  04CC             	
0055+  04CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  04CC             ;; IS ALPHA
0057+  04CC             ;; sets ZF according with result
0058+  04CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  04CC             _isalpha:
0060+  04CC DB          	push al
0061+  04CD B9 5F       	cmp al, '_'
0062+  04CF C6 EF 04    	je _isalpha_true
0063+  04D2 B9 2E       	cmp al, '.'
0064+  04D4 C6 EF 04    	je _isalpha_true
0065+  04D7 B9 41       	cmp al, 'A'
0066+  04D9 C8 EB 04    	jlu _isalpha_false
0067+  04DC B9 7A       	cmp al, 'z'
0068+  04DE D1 EB 04    	jgu _isalpha_false
0069+  04E1 B9 5A       	cmp al, 'Z'
0070+  04E3 D0 EF 04    	jleu _isalpha_true
0071+  04E6 B9 61       	cmp al, 'a'
0072+  04E8 C9 EF 04    	jgeu _isalpha_true
0073+  04EB             _isalpha_false:
0074+  04EB 8B 01       	or al, 1	; clear ZF
0075+  04ED E8          	pop al
0076+  04EE 09          	ret
0077+  04EF             _isalpha_true:
0078+  04EF 87 00       	and al, 0	; set ZF
0079+  04F1 E8          	pop al
0080+  04F2 09          	ret
0081+  04F3             
0082+  04F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  04F3             ;; IS PATH-ALPHA
0084+  04F3             ;; sets ZF according with result
0085+  04F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  04F3             ispath:
0087+  04F3 DB          	push al
0088+  04F4 07 B9 04    	call _isdigit
0089+  04F7 C6 21 05    	je ispath_true
0090+  04FA B9 5F       	cmp al, '_'
0091+  04FC C6 21 05    	je ispath_true
0092+  04FF B9 2F       	cmp al, '/'
0093+  0501 C6 21 05    	je ispath_true
0094+  0504 B9 2E       	cmp al, '.'
0095+  0506 C6 21 05    	je ispath_true
0096+  0509 B9 41       	cmp al, 'A'
0097+  050B C8 1D 05    	jlu ispath_false
0098+  050E B9 7A       	cmp al, 'z'
0099+  0510 D1 1D 05    	jgu ispath_false
0100+  0513 B9 5A       	cmp al, 'Z'
0101+  0515 D0 21 05    	jleu ispath_true
0102+  0518 B9 61       	cmp al, 'a'
0103+  051A C9 21 05    	jgeu ispath_true
0104+  051D             ispath_false:
0105+  051D 8B 01       	or al, 1	; clear ZF
0106+  051F E8          	pop al
0107+  0520 09          	ret
0108+  0521             ispath_true:
0109+  0521 87 00       	and al, 0	; set ZF
0110+  0523 E8          	pop al
0111+  0524 09          	ret
0112+  0525             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0525             ;; IS SPACE
0114+  0525             ;; sets ZF according with result
0115+  0525             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0525             _isspace:
0117+  0525 B9 20       	cmp al, $20		; ' '
0118+  0527 C6 3B 05    	je _isspace_exit
0119+  052A B9 09       	cmp al, $09		; '\t'
0120+  052C C6 3B 05    	je _isspace_exit
0121+  052F B9 0A       	cmp al, $0A		; '\n'
0122+  0531 C6 3B 05    	je _isspace_exit
0123+  0534 B9 0D       	cmp al, $0D		; '\r'
0124+  0536 C6 3B 05    	je _isspace_exit
0125+  0539 B9 0B       	cmp al, $0B		; '\v'
0126+  053B             _isspace_exit:
0127+  053B 09          	ret	
0128+  053C             
0129+  053C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  053C             ; TO LOWER
0131+  053C             ; input in AL
0132+  053C             ; output in AL
0133+  053C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  053C             _to_lower:
0135+  053C B9 5A       	cmp al, 'Z'
0136+  053E D1 43 05    	jgu _to_lower_ret
0137+  0541 6A 20       	add al, $20				; convert to lower case
0138+  0543             _to_lower_ret:
0139+  0543 09          	ret
0140+  0544             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0544             ; TO UPPER
0142+  0544             ; input in AL
0143+  0544             ; output in AL
0144+  0544             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0544             _to_upper:
0146+  0544 B9 61       	cmp al, 'a'
0147+  0546 C8 4B 05    	jlu _to_upper_ret
0148+  0549 6F 20       	sub al, $20			; convert to upper case
0149+  054B             _to_upper_ret:
0150+  054B 09          	ret
0151+  054C             
0135   054C             ; --- END INLINE ASM BLOCK
0136   054C             
0137   054C F9            leave
0138   054D 09            ret
0139   054E             
0140   054E             is_space:
0141   054E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0142   0551             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
0143   0551 FA 05 00      lea d, [bp + 5] ; $c
0144   0554 32            mov bl, [d]
0145   0555 A7 00         mov bh, 0
0146   0557             ; START RELATIONAL
0147   0557 D7            push a
0148   0558 11            mov a, b
0149   0559 26 20 00      mov b, $20
0150   055C B0            cmp a, b
0151   055D FD 71         seq ; ==
0152   055F E4            pop a
0153   0560             ; END RELATIONAL
0154   0560 D7            push a
0155   0561 11            mov a, b
0156   0562 FA 05 00      lea d, [bp + 5] ; $c
0157   0565 32            mov bl, [d]
0158   0566 A7 00         mov bh, 0
0159   0568             ; START RELATIONAL
0160   0568 D7            push a
0161   0569 11            mov a, b
0162   056A 26 09 00      mov b, $9
0163   056D B0            cmp a, b
0164   056E FD 71         seq ; ==
0165   0570 E4            pop a
0166   0571             ; END RELATIONAL
0167   0571 FD A8         sor a, b ; ||
0168   0573 11            mov a, b
0169   0574 FA 05 00      lea d, [bp + 5] ; $c
0170   0577 32            mov bl, [d]
0171   0578 A7 00         mov bh, 0
0172   057A             ; START RELATIONAL
0173   057A D7            push a
0174   057B 11            mov a, b
0175   057C 26 0A 00      mov b, $a
0176   057F B0            cmp a, b
0177   0580 FD 71         seq ; ==
0178   0582 E4            pop a
0179   0583             ; END RELATIONAL
0180   0583 FD A8         sor a, b ; ||
0181   0585 11            mov a, b
0182   0586 FA 05 00      lea d, [bp + 5] ; $c
0183   0589 32            mov bl, [d]
0184   058A A7 00         mov bh, 0
0185   058C             ; START RELATIONAL
0186   058C D7            push a
0187   058D 11            mov a, b
0188   058E 26 0D 00      mov b, $d
0189   0591 B0            cmp a, b
0190   0592 FD 71         seq ; ==
0191   0594 E4            pop a
0192   0595             ; END RELATIONAL
0193   0595 FD A8         sor a, b ; ||
0194   0597 E4            pop a
0195   0598 F9            leave
0196   0599 09            ret
0197   059A             
0198   059A             is_digit:
0199   059A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0200   059D             ;; return c >= '0' && c <= '9'; 
0201   059D FA 05 00      lea d, [bp + 5] ; $c
0202   05A0 32            mov bl, [d]
0203   05A1 A7 00         mov bh, 0
0204   05A3             ; START RELATIONAL
0205   05A3 D7            push a
0206   05A4 11            mov a, b
0207   05A5 26 30 00      mov b, $30
0208   05A8 B0            cmp a, b
0209   05A9 FD 80         sge ; >=
0210   05AB E4            pop a
0211   05AC             ; END RELATIONAL
0212   05AC D7            push a
0213   05AD 11            mov a, b
0214   05AE FA 05 00      lea d, [bp + 5] ; $c
0215   05B1 32            mov bl, [d]
0216   05B2 A7 00         mov bh, 0
0217   05B4             ; START RELATIONAL
0218   05B4 D7            push a
0219   05B5 11            mov a, b
0220   05B6 26 39 00      mov b, $39
0221   05B9 B0            cmp a, b
0222   05BA FD 73         slt ; <= (signed)
0223   05BC E4            pop a
0224   05BD             ; END RELATIONAL
0225   05BD FD A7         sand a, b
0226   05BF E4            pop a
0227   05C0 F9            leave
0228   05C1 09            ret
0229   05C2             
0230   05C2             is_alpha:
0231   05C2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0232   05C5             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
0233   05C5 FA 05 00      lea d, [bp + 5] ; $c
0234   05C8 32            mov bl, [d]
0235   05C9 A7 00         mov bh, 0
0236   05CB             ; START RELATIONAL
0237   05CB D7            push a
0238   05CC 11            mov a, b
0239   05CD 26 61 00      mov b, $61
0240   05D0 B0            cmp a, b
0241   05D1 FD 80         sge ; >=
0242   05D3 E4            pop a
0243   05D4             ; END RELATIONAL
0244   05D4 D7            push a
0245   05D5 11            mov a, b
0246   05D6 FA 05 00      lea d, [bp + 5] ; $c
0247   05D9 32            mov bl, [d]
0248   05DA A7 00         mov bh, 0
0249   05DC             ; START RELATIONAL
0250   05DC D7            push a
0251   05DD 11            mov a, b
0252   05DE 26 7A 00      mov b, $7a
0253   05E1 B0            cmp a, b
0254   05E2 FD 73         slt ; <= (signed)
0255   05E4 E4            pop a
0256   05E5             ; END RELATIONAL
0257   05E5 FD A7         sand a, b
0258   05E7 E4            pop a
0259   05E8 D7            push a
0260   05E9 11            mov a, b
0261   05EA FA 05 00      lea d, [bp + 5] ; $c
0262   05ED 32            mov bl, [d]
0263   05EE A7 00         mov bh, 0
0264   05F0             ; START RELATIONAL
0265   05F0 D7            push a
0266   05F1 11            mov a, b
0267   05F2 26 41 00      mov b, $41
0268   05F5 B0            cmp a, b
0269   05F6 FD 80         sge ; >=
0270   05F8 E4            pop a
0271   05F9             ; END RELATIONAL
0272   05F9 D7            push a
0273   05FA 11            mov a, b
0274   05FB FA 05 00      lea d, [bp + 5] ; $c
0275   05FE 32            mov bl, [d]
0276   05FF A7 00         mov bh, 0
0277   0601             ; START RELATIONAL
0278   0601 D7            push a
0279   0602 11            mov a, b
0280   0603 26 5A 00      mov b, $5a
0281   0606 B0            cmp a, b
0282   0607 FD 73         slt ; <= (signed)
0283   0609 E4            pop a
0284   060A             ; END RELATIONAL
0285   060A FD A7         sand a, b
0286   060C E4            pop a
0287   060D FD A8         sor a, b ; ||
0288   060F 11            mov a, b
0289   0610 FA 05 00      lea d, [bp + 5] ; $c
0290   0613 32            mov bl, [d]
0291   0614 A7 00         mov bh, 0
0292   0616             ; START RELATIONAL
0293   0616 D7            push a
0294   0617 11            mov a, b
0295   0618 26 5F 00      mov b, $5f
0296   061B B0            cmp a, b
0297   061C FD 71         seq ; ==
0298   061E E4            pop a
0299   061F             ; END RELATIONAL
0300   061F FD A8         sor a, b ; ||
0301   0621 E4            pop a
0302   0622 F9            leave
0303   0623 09            ret
0304   0624             
0305   0624             tolower:
0306   0624 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0307   0627             ;; if (ch >= 'A' && ch <= 'Z')  
0308   0627             _if3_cond:
0309   0627 FA 05 00      lea d, [bp + 5] ; $ch
0310   062A 32            mov bl, [d]
0311   062B A7 00         mov bh, 0
0312   062D             ; START RELATIONAL
0313   062D D7            push a
0314   062E 11            mov a, b
0315   062F 26 41 00      mov b, $41
0316   0632 B0            cmp a, b
0317   0633 FD 80         sge ; >=
0318   0635 E4            pop a
0319   0636             ; END RELATIONAL
0320   0636 D7            push a
0321   0637 11            mov a, b
0322   0638 FA 05 00      lea d, [bp + 5] ; $ch
0323   063B 32            mov bl, [d]
0324   063C A7 00         mov bh, 0
0325   063E             ; START RELATIONAL
0326   063E D7            push a
0327   063F 11            mov a, b
0328   0640 26 5A 00      mov b, $5a
0329   0643 B0            cmp a, b
0330   0644 FD 73         slt ; <= (signed)
0331   0646 E4            pop a
0332   0647             ; END RELATIONAL
0333   0647 FD A7         sand a, b
0334   0649 E4            pop a
0335   064A C0 00 00      cmp b, 0
0336   064D C6 68 06      je _if3_else
0337   0650             _if3_true:
0338   0650             ;; return ch - 'A' + 'a'; 
0339   0650 FA 05 00      lea d, [bp + 5] ; $ch
0340   0653 32            mov bl, [d]
0341   0654 A7 00         mov bh, 0
0342   0656             ; START TERMS
0343   0656 D7            push a
0344   0657 11            mov a, b
0345   0658 26 41 00      mov b, $41
0346   065B 60            sub a, b
0347   065C 27            mov b, a
0348   065D 11            mov a, b
0349   065E 26 61 00      mov b, $61
0350   0661 56            add b, a
0351   0662 E4            pop a
0352   0663             ; END TERMS
0353   0663 F9            leave
0354   0664 09            ret
0355   0665 0A 70 06      jmp _if3_exit
0356   0668             _if3_else:
0357   0668             ;; return ch; 
0358   0668 FA 05 00      lea d, [bp + 5] ; $ch
0359   066B 32            mov bl, [d]
0360   066C A7 00         mov bh, 0
0361   066E F9            leave
0362   066F 09            ret
0363   0670             _if3_exit:
0364   0670 F9            leave
0365   0671 09            ret
0366   0672             
0367   0672             toupper:
0368   0672 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0369   0675             ;; if (ch >= 'a' && ch <= 'z')  
0370   0675             _if4_cond:
0371   0675 FA 05 00      lea d, [bp + 5] ; $ch
0372   0678 32            mov bl, [d]
0373   0679 A7 00         mov bh, 0
0374   067B             ; START RELATIONAL
0375   067B D7            push a
0376   067C 11            mov a, b
0377   067D 26 61 00      mov b, $61
0378   0680 B0            cmp a, b
0379   0681 FD 80         sge ; >=
0380   0683 E4            pop a
0381   0684             ; END RELATIONAL
0382   0684 D7            push a
0383   0685 11            mov a, b
0384   0686 FA 05 00      lea d, [bp + 5] ; $ch
0385   0689 32            mov bl, [d]
0386   068A A7 00         mov bh, 0
0387   068C             ; START RELATIONAL
0388   068C D7            push a
0389   068D 11            mov a, b
0390   068E 26 7A 00      mov b, $7a
0391   0691 B0            cmp a, b
0392   0692 FD 73         slt ; <= (signed)
0393   0694 E4            pop a
0394   0695             ; END RELATIONAL
0395   0695 FD A7         sand a, b
0396   0697 E4            pop a
0397   0698 C0 00 00      cmp b, 0
0398   069B C6 B6 06      je _if4_else
0399   069E             _if4_true:
0400   069E             ;; return ch - 'a' + 'A'; 
0401   069E FA 05 00      lea d, [bp + 5] ; $ch
0402   06A1 32            mov bl, [d]
0403   06A2 A7 00         mov bh, 0
0404   06A4             ; START TERMS
0405   06A4 D7            push a
0406   06A5 11            mov a, b
0407   06A6 26 61 00      mov b, $61
0408   06A9 60            sub a, b
0409   06AA 27            mov b, a
0410   06AB 11            mov a, b
0411   06AC 26 41 00      mov b, $41
0412   06AF 56            add b, a
0413   06B0 E4            pop a
0414   06B1             ; END TERMS
0415   06B1 F9            leave
0416   06B2 09            ret
0417   06B3 0A BE 06      jmp _if4_exit
0418   06B6             _if4_else:
0419   06B6             ;; return ch; 
0420   06B6 FA 05 00      lea d, [bp + 5] ; $ch
0421   06B9 32            mov bl, [d]
0422   06BA A7 00         mov bh, 0
0423   06BC F9            leave
0424   06BD 09            ret
0425   06BE             _if4_exit:
0426   06BE F9            leave
0427   06BF 09            ret
0428   06C0             
0429   06C0             is_delimiter:
0430   06C0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0431   06C3             ;; if( 
0432   06C3             _if5_cond:
0433   06C3 FA 05 00      lea d, [bp + 5] ; $c
0434   06C6 32            mov bl, [d]
0435   06C7 A7 00         mov bh, 0
0436   06C9             ; START RELATIONAL
0437   06C9 D7            push a
0438   06CA 11            mov a, b
0439   06CB 26 40 00      mov b, $40
0440   06CE B0            cmp a, b
0441   06CF FD 71         seq ; ==
0442   06D1 E4            pop a
0443   06D2             ; END RELATIONAL
0444   06D2 D7            push a
0445   06D3 11            mov a, b
0446   06D4 FA 05 00      lea d, [bp + 5] ; $c
0447   06D7 32            mov bl, [d]
0448   06D8 A7 00         mov bh, 0
0449   06DA             ; START RELATIONAL
0450   06DA D7            push a
0451   06DB 11            mov a, b
0452   06DC 26 23 00      mov b, $23
0453   06DF B0            cmp a, b
0454   06E0 FD 71         seq ; ==
0455   06E2 E4            pop a
0456   06E3             ; END RELATIONAL
0457   06E3 FD A8         sor a, b ; ||
0458   06E5 11            mov a, b
0459   06E6 FA 05 00      lea d, [bp + 5] ; $c
0460   06E9 32            mov bl, [d]
0461   06EA A7 00         mov bh, 0
0462   06EC             ; START RELATIONAL
0463   06EC D7            push a
0464   06ED 11            mov a, b
0465   06EE 26 24 00      mov b, $24
0466   06F1 B0            cmp a, b
0467   06F2 FD 71         seq ; ==
0468   06F4 E4            pop a
0469   06F5             ; END RELATIONAL
0470   06F5 FD A8         sor a, b ; ||
0471   06F7 11            mov a, b
0472   06F8 FA 05 00      lea d, [bp + 5] ; $c
0473   06FB 32            mov bl, [d]
0474   06FC A7 00         mov bh, 0
0475   06FE             ; START RELATIONAL
0476   06FE D7            push a
0477   06FF 11            mov a, b
0478   0700 26 2B 00      mov b, $2b
0479   0703 B0            cmp a, b
0480   0704 FD 71         seq ; ==
0481   0706 E4            pop a
0482   0707             ; END RELATIONAL
0483   0707 FD A8         sor a, b ; ||
0484   0709 11            mov a, b
0485   070A FA 05 00      lea d, [bp + 5] ; $c
0486   070D 32            mov bl, [d]
0487   070E A7 00         mov bh, 0
0488   0710             ; START RELATIONAL
0489   0710 D7            push a
0490   0711 11            mov a, b
0491   0712 26 2D 00      mov b, $2d
0492   0715 B0            cmp a, b
0493   0716 FD 71         seq ; ==
0494   0718 E4            pop a
0495   0719             ; END RELATIONAL
0496   0719 FD A8         sor a, b ; ||
0497   071B 11            mov a, b
0498   071C FA 05 00      lea d, [bp + 5] ; $c
0499   071F 32            mov bl, [d]
0500   0720 A7 00         mov bh, 0
0501   0722             ; START RELATIONAL
0502   0722 D7            push a
0503   0723 11            mov a, b
0504   0724 26 2A 00      mov b, $2a
0505   0727 B0            cmp a, b
0506   0728 FD 71         seq ; ==
0507   072A E4            pop a
0508   072B             ; END RELATIONAL
0509   072B FD A8         sor a, b ; ||
0510   072D 11            mov a, b
0511   072E FA 05 00      lea d, [bp + 5] ; $c
0512   0731 32            mov bl, [d]
0513   0732 A7 00         mov bh, 0
0514   0734             ; START RELATIONAL
0515   0734 D7            push a
0516   0735 11            mov a, b
0517   0736 26 2F 00      mov b, $2f
0518   0739 B0            cmp a, b
0519   073A FD 71         seq ; ==
0520   073C E4            pop a
0521   073D             ; END RELATIONAL
0522   073D FD A8         sor a, b ; ||
0523   073F 11            mov a, b
0524   0740 FA 05 00      lea d, [bp + 5] ; $c
0525   0743 32            mov bl, [d]
0526   0744 A7 00         mov bh, 0
0527   0746             ; START RELATIONAL
0528   0746 D7            push a
0529   0747 11            mov a, b
0530   0748 26 25 00      mov b, $25
0531   074B B0            cmp a, b
0532   074C FD 71         seq ; ==
0533   074E E4            pop a
0534   074F             ; END RELATIONAL
0535   074F FD A8         sor a, b ; ||
0536   0751 11            mov a, b
0537   0752 FA 05 00      lea d, [bp + 5] ; $c
0538   0755 32            mov bl, [d]
0539   0756 A7 00         mov bh, 0
0540   0758             ; START RELATIONAL
0541   0758 D7            push a
0542   0759 11            mov a, b
0543   075A 26 5B 00      mov b, $5b
0544   075D B0            cmp a, b
0545   075E FD 71         seq ; ==
0546   0760 E4            pop a
0547   0761             ; END RELATIONAL
0548   0761 FD A8         sor a, b ; ||
0549   0763 11            mov a, b
0550   0764 FA 05 00      lea d, [bp + 5] ; $c
0551   0767 32            mov bl, [d]
0552   0768 A7 00         mov bh, 0
0553   076A             ; START RELATIONAL
0554   076A D7            push a
0555   076B 11            mov a, b
0556   076C 26 5D 00      mov b, $5d
0557   076F B0            cmp a, b
0558   0770 FD 71         seq ; ==
0559   0772 E4            pop a
0560   0773             ; END RELATIONAL
0561   0773 FD A8         sor a, b ; ||
0562   0775 11            mov a, b
0563   0776 FA 05 00      lea d, [bp + 5] ; $c
0564   0779 32            mov bl, [d]
0565   077A A7 00         mov bh, 0
0566   077C             ; START RELATIONAL
0567   077C D7            push a
0568   077D 11            mov a, b
0569   077E 26 28 00      mov b, $28
0570   0781 B0            cmp a, b
0571   0782 FD 71         seq ; ==
0572   0784 E4            pop a
0573   0785             ; END RELATIONAL
0574   0785 FD A8         sor a, b ; ||
0575   0787 11            mov a, b
0576   0788 FA 05 00      lea d, [bp + 5] ; $c
0577   078B 32            mov bl, [d]
0578   078C A7 00         mov bh, 0
0579   078E             ; START RELATIONAL
0580   078E D7            push a
0581   078F 11            mov a, b
0582   0790 26 29 00      mov b, $29
0583   0793 B0            cmp a, b
0584   0794 FD 71         seq ; ==
0585   0796 E4            pop a
0586   0797             ; END RELATIONAL
0587   0797 FD A8         sor a, b ; ||
0588   0799 11            mov a, b
0589   079A FA 05 00      lea d, [bp + 5] ; $c
0590   079D 32            mov bl, [d]
0591   079E A7 00         mov bh, 0
0592   07A0             ; START RELATIONAL
0593   07A0 D7            push a
0594   07A1 11            mov a, b
0595   07A2 26 7B 00      mov b, $7b
0596   07A5 B0            cmp a, b
0597   07A6 FD 71         seq ; ==
0598   07A8 E4            pop a
0599   07A9             ; END RELATIONAL
0600   07A9 FD A8         sor a, b ; ||
0601   07AB 11            mov a, b
0602   07AC FA 05 00      lea d, [bp + 5] ; $c
0603   07AF 32            mov bl, [d]
0604   07B0 A7 00         mov bh, 0
0605   07B2             ; START RELATIONAL
0606   07B2 D7            push a
0607   07B3 11            mov a, b
0608   07B4 26 7D 00      mov b, $7d
0609   07B7 B0            cmp a, b
0610   07B8 FD 71         seq ; ==
0611   07BA E4            pop a
0612   07BB             ; END RELATIONAL
0613   07BB FD A8         sor a, b ; ||
0614   07BD 11            mov a, b
0615   07BE FA 05 00      lea d, [bp + 5] ; $c
0616   07C1 32            mov bl, [d]
0617   07C2 A7 00         mov bh, 0
0618   07C4             ; START RELATIONAL
0619   07C4 D7            push a
0620   07C5 11            mov a, b
0621   07C6 26 3A 00      mov b, $3a
0622   07C9 B0            cmp a, b
0623   07CA FD 71         seq ; ==
0624   07CC E4            pop a
0625   07CD             ; END RELATIONAL
0626   07CD FD A8         sor a, b ; ||
0627   07CF 11            mov a, b
0628   07D0 FA 05 00      lea d, [bp + 5] ; $c
0629   07D3 32            mov bl, [d]
0630   07D4 A7 00         mov bh, 0
0631   07D6             ; START RELATIONAL
0632   07D6 D7            push a
0633   07D7 11            mov a, b
0634   07D8 26 3B 00      mov b, $3b
0635   07DB B0            cmp a, b
0636   07DC FD 71         seq ; ==
0637   07DE E4            pop a
0638   07DF             ; END RELATIONAL
0639   07DF FD A8         sor a, b ; ||
0640   07E1 11            mov a, b
0641   07E2 FA 05 00      lea d, [bp + 5] ; $c
0642   07E5 32            mov bl, [d]
0643   07E6 A7 00         mov bh, 0
0644   07E8             ; START RELATIONAL
0645   07E8 D7            push a
0646   07E9 11            mov a, b
0647   07EA 26 3C 00      mov b, $3c
0648   07ED B0            cmp a, b
0649   07EE FD 71         seq ; ==
0650   07F0 E4            pop a
0651   07F1             ; END RELATIONAL
0652   07F1 FD A8         sor a, b ; ||
0653   07F3 11            mov a, b
0654   07F4 FA 05 00      lea d, [bp + 5] ; $c
0655   07F7 32            mov bl, [d]
0656   07F8 A7 00         mov bh, 0
0657   07FA             ; START RELATIONAL
0658   07FA D7            push a
0659   07FB 11            mov a, b
0660   07FC 26 3E 00      mov b, $3e
0661   07FF B0            cmp a, b
0662   0800 FD 71         seq ; ==
0663   0802 E4            pop a
0664   0803             ; END RELATIONAL
0665   0803 FD A8         sor a, b ; ||
0666   0805 11            mov a, b
0667   0806 FA 05 00      lea d, [bp + 5] ; $c
0668   0809 32            mov bl, [d]
0669   080A A7 00         mov bh, 0
0670   080C             ; START RELATIONAL
0671   080C D7            push a
0672   080D 11            mov a, b
0673   080E 26 3D 00      mov b, $3d
0674   0811 B0            cmp a, b
0675   0812 FD 71         seq ; ==
0676   0814 E4            pop a
0677   0815             ; END RELATIONAL
0678   0815 FD A8         sor a, b ; ||
0679   0817 11            mov a, b
0680   0818 FA 05 00      lea d, [bp + 5] ; $c
0681   081B 32            mov bl, [d]
0682   081C A7 00         mov bh, 0
0683   081E             ; START RELATIONAL
0684   081E D7            push a
0685   081F 11            mov a, b
0686   0820 26 21 00      mov b, $21
0687   0823 B0            cmp a, b
0688   0824 FD 71         seq ; ==
0689   0826 E4            pop a
0690   0827             ; END RELATIONAL
0691   0827 FD A8         sor a, b ; ||
0692   0829 11            mov a, b
0693   082A FA 05 00      lea d, [bp + 5] ; $c
0694   082D 32            mov bl, [d]
0695   082E A7 00         mov bh, 0
0696   0830             ; START RELATIONAL
0697   0830 D7            push a
0698   0831 11            mov a, b
0699   0832 26 5E 00      mov b, $5e
0700   0835 B0            cmp a, b
0701   0836 FD 71         seq ; ==
0702   0838 E4            pop a
0703   0839             ; END RELATIONAL
0704   0839 FD A8         sor a, b ; ||
0705   083B 11            mov a, b
0706   083C FA 05 00      lea d, [bp + 5] ; $c
0707   083F 32            mov bl, [d]
0708   0840 A7 00         mov bh, 0
0709   0842             ; START RELATIONAL
0710   0842 D7            push a
0711   0843 11            mov a, b
0712   0844 26 26 00      mov b, $26
0713   0847 B0            cmp a, b
0714   0848 FD 71         seq ; ==
0715   084A E4            pop a
0716   084B             ; END RELATIONAL
0717   084B FD A8         sor a, b ; ||
0718   084D 11            mov a, b
0719   084E FA 05 00      lea d, [bp + 5] ; $c
0720   0851 32            mov bl, [d]
0721   0852 A7 00         mov bh, 0
0722   0854             ; START RELATIONAL
0723   0854 D7            push a
0724   0855 11            mov a, b
0725   0856 26 7C 00      mov b, $7c
0726   0859 B0            cmp a, b
0727   085A FD 71         seq ; ==
0728   085C E4            pop a
0729   085D             ; END RELATIONAL
0730   085D FD A8         sor a, b ; ||
0731   085F 11            mov a, b
0732   0860 FA 05 00      lea d, [bp + 5] ; $c
0733   0863 32            mov bl, [d]
0734   0864 A7 00         mov bh, 0
0735   0866             ; START RELATIONAL
0736   0866 D7            push a
0737   0867 11            mov a, b
0738   0868 26 7E 00      mov b, $7e
0739   086B B0            cmp a, b
0740   086C FD 71         seq ; ==
0741   086E E4            pop a
0742   086F             ; END RELATIONAL
0743   086F FD A8         sor a, b ; ||
0744   0871 11            mov a, b
0745   0872 FA 05 00      lea d, [bp + 5] ; $c
0746   0875 32            mov bl, [d]
0747   0876 A7 00         mov bh, 0
0748   0878             ; START RELATIONAL
0749   0878 D7            push a
0750   0879 11            mov a, b
0751   087A 26 2E 00      mov b, $2e
0752   087D B0            cmp a, b
0753   087E FD 71         seq ; ==
0754   0880 E4            pop a
0755   0881             ; END RELATIONAL
0756   0881 FD A8         sor a, b ; ||
0757   0883 E4            pop a
0758   0884 C0 00 00      cmp b, 0
0759   0887 C6 92 08      je _if5_else
0760   088A             _if5_true:
0761   088A             ;; return 1; 
0762   088A 26 01 00      mov b, $1
0763   088D F9            leave
0764   088E 09            ret
0765   088F 0A 97 08      jmp _if5_exit
0766   0892             _if5_else:
0767   0892             ;; return 0; 
0768   0892 26 00 00      mov b, $0
0769   0895 F9            leave
0770   0896 09            ret
0771   0897             _if5_exit:
0772   0897 F9            leave
0773   0898 09            ret
0774   0899             
0775   0899             strcpy:
0776   0899 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0777   089C             ; $psrc 
0778   089C             ; $pdest 
0779   089C 52 04 00      sub sp, 4
0780   089F             ;; psrc = src; 
0781   089F FA FF FF      lea d, [bp + -1] ; $psrc
0782   08A2 DA            push d
0783   08A3 FA 07 00      lea d, [bp + 7] ; $src
0784   08A6 2A            mov b, [d]
0785   08A7 E7            pop d
0786   08A8 FD 43         mov [d], b
0787   08AA             ;; pdest = dest; 
0788   08AA FA FD FF      lea d, [bp + -3] ; $pdest
0789   08AD DA            push d
0790   08AE FA 05 00      lea d, [bp + 5] ; $dest
0791   08B1 2A            mov b, [d]
0792   08B2 E7            pop d
0793   08B3 FD 43         mov [d], b
0794   08B5             ;; while(*psrc) *pdest++ = *psrc++; 
0795   08B5             _while6_cond:
0796   08B5 FA FF FF      lea d, [bp + -1] ; $psrc
0797   08B8 2A            mov b, [d]
0798   08B9 74            mov d, b
0799   08BA 32            mov bl, [d]
0800   08BB A7 00         mov bh, 0
0801   08BD C0 00 00      cmp b, 0
0802   08C0 C6 E8 08      je _while6_exit
0803   08C3             _while6_block:
0804   08C3             ;; *pdest++ = *psrc++; 
0805   08C3 FA FD FF      lea d, [bp + -3] ; $pdest
0806   08C6 2A            mov b, [d]
0807   08C7 D8            push b
0808   08C8 FD 77         inc b
0809   08CA FA FD FF      lea d, [bp + -3] ; $pdest
0810   08CD FD 43         mov [d], b
0811   08CF E5            pop b
0812   08D0 D8            push b
0813   08D1 FA FF FF      lea d, [bp + -1] ; $psrc
0814   08D4 2A            mov b, [d]
0815   08D5 D8            push b
0816   08D6 FD 77         inc b
0817   08D8 FA FF FF      lea d, [bp + -1] ; $psrc
0818   08DB FD 43         mov [d], b
0819   08DD E5            pop b
0820   08DE 74            mov d, b
0821   08DF 32            mov bl, [d]
0822   08E0 A7 00         mov bh, 0
0823   08E2 E7            pop d
0824   08E3 FD 3E         mov [d], bl
0825   08E5 0A B5 08      jmp _while6_cond
0826   08E8             _while6_exit:
0827   08E8             ;; *pdest = '\0'; 
0828   08E8 FA FD FF      lea d, [bp + -3] ; $pdest
0829   08EB 2A            mov b, [d]
0830   08EC D8            push b
0831   08ED 26 00 00      mov b, $0
0832   08F0 E7            pop d
0833   08F1 FD 3E         mov [d], bl
0834   08F3 F9            leave
0835   08F4 09            ret
0836   08F5             
0837   08F5             strcmp:
0838   08F5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0839   08F8             ;; while (*s1 && (*s1 == *s2)) { 
0840   08F8             _while7_cond:
0841   08F8 FA 05 00      lea d, [bp + 5] ; $s1
0842   08FB 2A            mov b, [d]
0843   08FC 74            mov d, b
0844   08FD 32            mov bl, [d]
0845   08FE A7 00         mov bh, 0
0846   0900 D7            push a
0847   0901 11            mov a, b
0848   0902 FA 05 00      lea d, [bp + 5] ; $s1
0849   0905 2A            mov b, [d]
0850   0906 74            mov d, b
0851   0907 32            mov bl, [d]
0852   0908 A7 00         mov bh, 0
0853   090A             ; START RELATIONAL
0854   090A D7            push a
0855   090B 11            mov a, b
0856   090C FA 07 00      lea d, [bp + 7] ; $s2
0857   090F 2A            mov b, [d]
0858   0910 74            mov d, b
0859   0911 32            mov bl, [d]
0860   0912 A7 00         mov bh, 0
0861   0914 B0            cmp a, b
0862   0915 FD 71         seq ; ==
0863   0917 E4            pop a
0864   0918             ; END RELATIONAL
0865   0918 FD A7         sand a, b
0866   091A E4            pop a
0867   091B C0 00 00      cmp b, 0
0868   091E C6 3E 09      je _while7_exit
0869   0921             _while7_block:
0870   0921             ;; s1++; 
0871   0921 FA 05 00      lea d, [bp + 5] ; $s1
0872   0924 2A            mov b, [d]
0873   0925 D8            push b
0874   0926 FD 77         inc b
0875   0928 FA 05 00      lea d, [bp + 5] ; $s1
0876   092B FD 43         mov [d], b
0877   092D E5            pop b
0878   092E             ;; s2++; 
0879   092E FA 07 00      lea d, [bp + 7] ; $s2
0880   0931 2A            mov b, [d]
0881   0932 D8            push b
0882   0933 FD 77         inc b
0883   0935 FA 07 00      lea d, [bp + 7] ; $s2
0884   0938 FD 43         mov [d], b
0885   093A E5            pop b
0886   093B 0A F8 08      jmp _while7_cond
0887   093E             _while7_exit:
0888   093E             ;; return *s1 - *s2; 
0889   093E FA 05 00      lea d, [bp + 5] ; $s1
0890   0941 2A            mov b, [d]
0891   0942 74            mov d, b
0892   0943 32            mov bl, [d]
0893   0944 A7 00         mov bh, 0
0894   0946             ; START TERMS
0895   0946 D7            push a
0896   0947 11            mov a, b
0897   0948 FA 07 00      lea d, [bp + 7] ; $s2
0898   094B 2A            mov b, [d]
0899   094C 74            mov d, b
0900   094D 32            mov bl, [d]
0901   094E A7 00         mov bh, 0
0902   0950 60            sub a, b
0903   0951 27            mov b, a
0904   0952 E4            pop a
0905   0953             ; END TERMS
0906   0953 F9            leave
0907   0954 09            ret
0908   0955             
0909   0955             strncmp:
0910   0955 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0911   0958 F9            leave
0912   0959 09            ret
0913   095A             
0914   095A             strcat:
0915   095A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0916   095D             ; $dest_len 
0917   095D             ; $i 
0918   095D 52 04 00      sub sp, 4
0919   0960             ;; dest_len = strlen(dest); 
0920   0960 FA FF FF      lea d, [bp + -1] ; $dest_len
0921   0963 DA            push d
0922   0964 FA 05 00      lea d, [bp + 5] ; $dest
0923   0967 2A            mov b, [d]
0924   0968 FD AB         swp b
0925   096A D8            push b
0926   096B 07 0D 0A      call strlen
0927   096E 51 02 00      add sp, 2
0928   0971 E7            pop d
0929   0972 FD 43         mov [d], b
0930   0974             ;; for (i = 0; src[i] != 0; i=i+1) { 
0931   0974             _for8_init:
0932   0974 FA FD FF      lea d, [bp + -3] ; $i
0933   0977 DA            push d
0934   0978 26 00 00      mov b, $0
0935   097B E7            pop d
0936   097C FD 43         mov [d], b
0937   097E             _for8_cond:
0938   097E FA 07 00      lea d, [bp + 7] ; $src
0939   0981 FD 2A         mov d, [d]
0940   0983 D7            push a
0941   0984 DA            push d
0942   0985 FA FD FF      lea d, [bp + -3] ; $i
0943   0988 2A            mov b, [d]
0944   0989 E7            pop d
0945   098A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0946   098E E4            pop a
0947   098F 32            mov bl, [d]
0948   0990 A7 00         mov bh, 0
0949   0992             ; START RELATIONAL
0950   0992 D7            push a
0951   0993 11            mov a, b
0952   0994 26 00 00      mov b, $0
0953   0997 B0            cmp a, b
0954   0998 FD 72         sneq ; !=
0955   099A E4            pop a
0956   099B             ; END RELATIONAL
0957   099B C0 00 00      cmp b, 0
0958   099E C6 E7 09      je _for8_exit
0959   09A1             _for8_block:
0960   09A1             ;; dest[dest_len + i] = src[i]; 
0961   09A1 FA 05 00      lea d, [bp + 5] ; $dest
0962   09A4 FD 2A         mov d, [d]
0963   09A6 D7            push a
0964   09A7 DA            push d
0965   09A8 FA FF FF      lea d, [bp + -1] ; $dest_len
0966   09AB 2A            mov b, [d]
0967   09AC             ; START TERMS
0968   09AC D7            push a
0969   09AD 11            mov a, b
0970   09AE FA FD FF      lea d, [bp + -3] ; $i
0971   09B1 2A            mov b, [d]
0972   09B2 56            add b, a
0973   09B3 E4            pop a
0974   09B4             ; END TERMS
0975   09B4 E7            pop d
0976   09B5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0977   09B9 E4            pop a
0978   09BA DA            push d
0979   09BB FA 07 00      lea d, [bp + 7] ; $src
0980   09BE FD 2A         mov d, [d]
0981   09C0 D7            push a
0982   09C1 DA            push d
0983   09C2 FA FD FF      lea d, [bp + -3] ; $i
0984   09C5 2A            mov b, [d]
0985   09C6 E7            pop d
0986   09C7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0987   09CB E4            pop a
0988   09CC 32            mov bl, [d]
0989   09CD A7 00         mov bh, 0
0990   09CF E7            pop d
0991   09D0 FD 3E         mov [d], bl
0992   09D2             _for8_update:
0993   09D2 FA FD FF      lea d, [bp + -3] ; $i
0994   09D5 DA            push d
0995   09D6 FA FD FF      lea d, [bp + -3] ; $i
0996   09D9 2A            mov b, [d]
0997   09DA             ; START TERMS
0998   09DA D7            push a
0999   09DB 11            mov a, b
1000   09DC 26 01 00      mov b, $1
1001   09DF 56            add b, a
1002   09E0 E4            pop a
1003   09E1             ; END TERMS
1004   09E1 E7            pop d
1005   09E2 FD 43         mov [d], b
1006   09E4 0A 7E 09      jmp _for8_cond
1007   09E7             _for8_exit:
1008   09E7             ;; dest[dest_len + i] = 0; 
1009   09E7 FA 05 00      lea d, [bp + 5] ; $dest
1010   09EA FD 2A         mov d, [d]
1011   09EC D7            push a
1012   09ED DA            push d
1013   09EE FA FF FF      lea d, [bp + -1] ; $dest_len
1014   09F1 2A            mov b, [d]
1015   09F2             ; START TERMS
1016   09F2 D7            push a
1017   09F3 11            mov a, b
1018   09F4 FA FD FF      lea d, [bp + -3] ; $i
1019   09F7 2A            mov b, [d]
1020   09F8 56            add b, a
1021   09F9 E4            pop a
1022   09FA             ; END TERMS
1023   09FA E7            pop d
1024   09FB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1025   09FF E4            pop a
1026   0A00 DA            push d
1027   0A01 26 00 00      mov b, $0
1028   0A04 E7            pop d
1029   0A05 FD 3E         mov [d], bl
1030   0A07             ;; return dest; 
1031   0A07 FA 05 00      lea d, [bp + 5] ; $dest
1032   0A0A 2A            mov b, [d]
1033   0A0B F9            leave
1034   0A0C 09            ret
1035   0A0D             
1036   0A0D             strlen:
1037   0A0D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1038   0A10             ; $length 
1039   0A10 52 02 00      sub sp, 2
1040   0A13             ;; length = 0; 
1041   0A13 FA FF FF      lea d, [bp + -1] ; $length
1042   0A16 DA            push d
1043   0A17 26 00 00      mov b, $0
1044   0A1A E7            pop d
1045   0A1B FD 43         mov [d], b
1046   0A1D             ;; while (str[length] != 0) { 
1047   0A1D             _while9_cond:
1048   0A1D FA 05 00      lea d, [bp + 5] ; $str
1049   0A20 FD 2A         mov d, [d]
1050   0A22 D7            push a
1051   0A23 DA            push d
1052   0A24 FA FF FF      lea d, [bp + -1] ; $length
1053   0A27 2A            mov b, [d]
1054   0A28 E7            pop d
1055   0A29 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1056   0A2D E4            pop a
1057   0A2E 32            mov bl, [d]
1058   0A2F A7 00         mov bh, 0
1059   0A31             ; START RELATIONAL
1060   0A31 D7            push a
1061   0A32 11            mov a, b
1062   0A33 26 00 00      mov b, $0
1063   0A36 B0            cmp a, b
1064   0A37 FD 72         sneq ; !=
1065   0A39 E4            pop a
1066   0A3A             ; END RELATIONAL
1067   0A3A C0 00 00      cmp b, 0
1068   0A3D C6 50 0A      je _while9_exit
1069   0A40             _while9_block:
1070   0A40             ;; length++; 
1071   0A40 FA FF FF      lea d, [bp + -1] ; $length
1072   0A43 2A            mov b, [d]
1073   0A44 D8            push b
1074   0A45 FD 77         inc b
1075   0A47 FA FF FF      lea d, [bp + -1] ; $length
1076   0A4A FD 43         mov [d], b
1077   0A4C E5            pop b
1078   0A4D 0A 1D 0A      jmp _while9_cond
1079   0A50             _while9_exit:
1080   0A50             ;; return length; 
1081   0A50 FA FF FF      lea d, [bp + -1] ; $length
1082   0A53 2A            mov b, [d]
1083   0A54 F9            leave
1084   0A55 09            ret
1085   0A56             
1086   0A56             exit:
1087   0A56 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1088   0A59             
1089   0A59             ; --- BEGIN INLINE ASM BLOCK
1090   0A59 05 0B         syscall sys_terminate_proc
1091   0A5B             ; --- END INLINE ASM BLOCK
1092   0A5B             
1093   0A5B F9            leave
1094   0A5C 09            ret
1095   0A5D             
1096   0A5D             memset:
1097   0A5D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1098   0A60             ; $i 
1099   0A60 52 02 00      sub sp, 2
1100   0A63             ;; for(i = 0; i < size; i++){ 
1101   0A63             _for10_init:
1102   0A63 FA FF FF      lea d, [bp + -1] ; $i
1103   0A66 DA            push d
1104   0A67 26 00 00      mov b, $0
1105   0A6A E7            pop d
1106   0A6B FD 43         mov [d], b
1107   0A6D             _for10_cond:
1108   0A6D FA FF FF      lea d, [bp + -1] ; $i
1109   0A70 2A            mov b, [d]
1110   0A71             ; START RELATIONAL
1111   0A71 D7            push a
1112   0A72 11            mov a, b
1113   0A73 FA 08 00      lea d, [bp + 8] ; $size
1114   0A76 2A            mov b, [d]
1115   0A77 B0            cmp a, b
1116   0A78 FD 73         slt ; < (signed)
1117   0A7A E4            pop a
1118   0A7B             ; END RELATIONAL
1119   0A7B C0 00 00      cmp b, 0
1120   0A7E C6 A7 0A      je _for10_exit
1121   0A81             _for10_block:
1122   0A81             ;; *(s+i) = c; 
1123   0A81 FA 05 00      lea d, [bp + 5] ; $s
1124   0A84 2A            mov b, [d]
1125   0A85             ; START TERMS
1126   0A85 D7            push a
1127   0A86 11            mov a, b
1128   0A87 FA FF FF      lea d, [bp + -1] ; $i
1129   0A8A 2A            mov b, [d]
1130   0A8B 56            add b, a
1131   0A8C E4            pop a
1132   0A8D             ; END TERMS
1133   0A8D D8            push b
1134   0A8E FA 07 00      lea d, [bp + 7] ; $c
1135   0A91 32            mov bl, [d]
1136   0A92 A7 00         mov bh, 0
1137   0A94 E7            pop d
1138   0A95 FD 3E         mov [d], bl
1139   0A97             _for10_update:
1140   0A97 FA FF FF      lea d, [bp + -1] ; $i
1141   0A9A 2A            mov b, [d]
1142   0A9B D8            push b
1143   0A9C FD 77         inc b
1144   0A9E FA FF FF      lea d, [bp + -1] ; $i
1145   0AA1 FD 43         mov [d], b
1146   0AA3 E5            pop b
1147   0AA4 0A 6D 0A      jmp _for10_cond
1148   0AA7             _for10_exit:
1149   0AA7             ;; return s; 
1150   0AA7 FA 05 00      lea d, [bp + 5] ; $s
1151   0AAA 2A            mov b, [d]
1152   0AAB F9            leave
1153   0AAC 09            ret
1154   0AAD             
1155   0AAD             atoi:
1156   0AAD F8 00 00      enter 0 ; (push bp; mov bp, sp)
1157   0AB0             ; $result 
1158   0AB0 10 00 00      mov a, $0
1159   0AB3 45 FF FF      mov [bp + -1], a
1160   0AB6             ; $sign 
1161   0AB6 10 01 00      mov a, $1
1162   0AB9 45 FD FF      mov [bp + -3], a
1163   0ABC 52 04 00      sub sp, 4
1164   0ABF             ;; while (*str == ' ') str++; 
1165   0ABF             _while11_cond:
1166   0ABF FA 05 00      lea d, [bp + 5] ; $str
1167   0AC2 2A            mov b, [d]
1168   0AC3 74            mov d, b
1169   0AC4 32            mov bl, [d]
1170   0AC5 A7 00         mov bh, 0
1171   0AC7             ; START RELATIONAL
1172   0AC7 D7            push a
1173   0AC8 11            mov a, b
1174   0AC9 26 20 00      mov b, $20
1175   0ACC B0            cmp a, b
1176   0ACD FD 71         seq ; ==
1177   0ACF E4            pop a
1178   0AD0             ; END RELATIONAL
1179   0AD0 C0 00 00      cmp b, 0
1180   0AD3 C6 E6 0A      je _while11_exit
1181   0AD6             _while11_block:
1182   0AD6             ;; str++; 
1183   0AD6 FA 05 00      lea d, [bp + 5] ; $str
1184   0AD9 2A            mov b, [d]
1185   0ADA D8            push b
1186   0ADB FD 77         inc b
1187   0ADD FA 05 00      lea d, [bp + 5] ; $str
1188   0AE0 FD 43         mov [d], b
1189   0AE2 E5            pop b
1190   0AE3 0A BF 0A      jmp _while11_cond
1191   0AE6             _while11_exit:
1192   0AE6             ;; if (*str == '-' || *str == '+') { 
1193   0AE6             _if12_cond:
1194   0AE6 FA 05 00      lea d, [bp + 5] ; $str
1195   0AE9 2A            mov b, [d]
1196   0AEA 74            mov d, b
1197   0AEB 32            mov bl, [d]
1198   0AEC A7 00         mov bh, 0
1199   0AEE             ; START RELATIONAL
1200   0AEE D7            push a
1201   0AEF 11            mov a, b
1202   0AF0 26 2D 00      mov b, $2d
1203   0AF3 B0            cmp a, b
1204   0AF4 FD 71         seq ; ==
1205   0AF6 E4            pop a
1206   0AF7             ; END RELATIONAL
1207   0AF7 D7            push a
1208   0AF8 11            mov a, b
1209   0AF9 FA 05 00      lea d, [bp + 5] ; $str
1210   0AFC 2A            mov b, [d]
1211   0AFD 74            mov d, b
1212   0AFE 32            mov bl, [d]
1213   0AFF A7 00         mov bh, 0
1214   0B01             ; START RELATIONAL
1215   0B01 D7            push a
1216   0B02 11            mov a, b
1217   0B03 26 2B 00      mov b, $2b
1218   0B06 B0            cmp a, b
1219   0B07 FD 71         seq ; ==
1220   0B09 E4            pop a
1221   0B0A             ; END RELATIONAL
1222   0B0A FD A8         sor a, b ; ||
1223   0B0C E4            pop a
1224   0B0D C0 00 00      cmp b, 0
1225   0B10 C6 47 0B      je _if12_exit
1226   0B13             _if12_true:
1227   0B13             ;; if (*str == '-') sign = -1; 
1228   0B13             _if13_cond:
1229   0B13 FA 05 00      lea d, [bp + 5] ; $str
1230   0B16 2A            mov b, [d]
1231   0B17 74            mov d, b
1232   0B18 32            mov bl, [d]
1233   0B19 A7 00         mov bh, 0
1234   0B1B             ; START RELATIONAL
1235   0B1B D7            push a
1236   0B1C 11            mov a, b
1237   0B1D 26 2D 00      mov b, $2d
1238   0B20 B0            cmp a, b
1239   0B21 FD 71         seq ; ==
1240   0B23 E4            pop a
1241   0B24             ; END RELATIONAL
1242   0B24 C0 00 00      cmp b, 0
1243   0B27 C6 37 0B      je _if13_exit
1244   0B2A             _if13_true:
1245   0B2A             ;; sign = -1; 
1246   0B2A FA FD FF      lea d, [bp + -3] ; $sign
1247   0B2D DA            push d
1248   0B2E 26 FF FF      mov b, $ffff
1249   0B31 E7            pop d
1250   0B32 FD 43         mov [d], b
1251   0B34 0A 37 0B      jmp _if13_exit
1252   0B37             _if13_exit:
1253   0B37             ;; str++; 
1254   0B37 FA 05 00      lea d, [bp + 5] ; $str
1255   0B3A 2A            mov b, [d]
1256   0B3B D8            push b
1257   0B3C FD 77         inc b
1258   0B3E FA 05 00      lea d, [bp + 5] ; $str
1259   0B41 FD 43         mov [d], b
1260   0B43 E5            pop b
1261   0B44 0A 47 0B      jmp _if12_exit
1262   0B47             _if12_exit:
1263   0B47             ;; while (*str >= '0' && *str <= '9') { 
1264   0B47             _while14_cond:
1265   0B47 FA 05 00      lea d, [bp + 5] ; $str
1266   0B4A 2A            mov b, [d]
1267   0B4B 74            mov d, b
1268   0B4C 32            mov bl, [d]
1269   0B4D A7 00         mov bh, 0
1270   0B4F             ; START RELATIONAL
1271   0B4F D7            push a
1272   0B50 11            mov a, b
1273   0B51 26 30 00      mov b, $30
1274   0B54 B0            cmp a, b
1275   0B55 FD 82         sgeu ; >= (unsigned)
1276   0B57 E4            pop a
1277   0B58             ; END RELATIONAL
1278   0B58 D7            push a
1279   0B59 11            mov a, b
1280   0B5A FA 05 00      lea d, [bp + 5] ; $str
1281   0B5D 2A            mov b, [d]
1282   0B5E 74            mov d, b
1283   0B5F 32            mov bl, [d]
1284   0B60 A7 00         mov bh, 0
1285   0B62             ; START RELATIONAL
1286   0B62 D7            push a
1287   0B63 11            mov a, b
1288   0B64 26 39 00      mov b, $39
1289   0B67 B0            cmp a, b
1290   0B68 FD 75         slu ; <= (unsigned)
1291   0B6A E4            pop a
1292   0B6B             ; END RELATIONAL
1293   0B6B FD A7         sand a, b
1294   0B6D E4            pop a
1295   0B6E C0 00 00      cmp b, 0
1296   0B71 C6 AC 0B      je _while14_exit
1297   0B74             _while14_block:
1298   0B74             ;; result = result * 10 + (*str - '0'); 
1299   0B74 FA FF FF      lea d, [bp + -1] ; $result
1300   0B77 DA            push d
1301   0B78 FA FF FF      lea d, [bp + -1] ; $result
1302   0B7B 2A            mov b, [d]
1303   0B7C             ; START FACTORS
1304   0B7C D7            push a
1305   0B7D 11            mov a, b
1306   0B7E 26 0A 00      mov b, $a
1307   0B81 AC            mul a, b ; *
1308   0B82 11            mov a, b
1309   0B83 27            mov b, a
1310   0B84 E4            pop a
1311   0B85             ; END FACTORS
1312   0B85             ; START TERMS
1313   0B85 D7            push a
1314   0B86 11            mov a, b
1315   0B87 FA 05 00      lea d, [bp + 5] ; $str
1316   0B8A 2A            mov b, [d]
1317   0B8B 74            mov d, b
1318   0B8C 32            mov bl, [d]
1319   0B8D A7 00         mov bh, 0
1320   0B8F             ; START TERMS
1321   0B8F D7            push a
1322   0B90 11            mov a, b
1323   0B91 26 30 00      mov b, $30
1324   0B94 60            sub a, b
1325   0B95 27            mov b, a
1326   0B96 E4            pop a
1327   0B97             ; END TERMS
1328   0B97 56            add b, a
1329   0B98 E4            pop a
1330   0B99             ; END TERMS
1331   0B99 E7            pop d
1332   0B9A FD 43         mov [d], b
1333   0B9C             ;; str++; 
1334   0B9C FA 05 00      lea d, [bp + 5] ; $str
1335   0B9F 2A            mov b, [d]
1336   0BA0 D8            push b
1337   0BA1 FD 77         inc b
1338   0BA3 FA 05 00      lea d, [bp + 5] ; $str
1339   0BA6 FD 43         mov [d], b
1340   0BA8 E5            pop b
1341   0BA9 0A 47 0B      jmp _while14_cond
1342   0BAC             _while14_exit:
1343   0BAC             ;; return sign * result; 
1344   0BAC FA FD FF      lea d, [bp + -3] ; $sign
1345   0BAF 2A            mov b, [d]
1346   0BB0             ; START FACTORS
1347   0BB0 D7            push a
1348   0BB1 11            mov a, b
1349   0BB2 FA FF FF      lea d, [bp + -1] ; $result
1350   0BB5 2A            mov b, [d]
1351   0BB6 AC            mul a, b ; *
1352   0BB7 11            mov a, b
1353   0BB8 27            mov b, a
1354   0BB9 E4            pop a
1355   0BBA             ; END FACTORS
1356   0BBA F9            leave
1357   0BBB 09            ret
1358   0BBC             
1359   0BBC             rand:
1360   0BBC F8 00 00      enter 0 ; (push bp; mov bp, sp)
1361   0BBF             ; $sec 
1362   0BBF 52 02 00      sub sp, 2
1363   0BC2             
1364   0BC2             ; --- BEGIN INLINE ASM BLOCK
1365   0BC2 19 00         mov al, 0
1366   0BC4 05 01         syscall sys_rtc					
1367   0BC6 1A            mov al, ah
1368   0BC7 FA FF FF      lea d, [bp + -1] ; $sec
1369   0BCA 1E            mov al, [d]
1370   0BCB 22 00         mov ah, 0
1371   0BCD             ; --- END INLINE ASM BLOCK
1372   0BCD             
1373   0BCD             ;; return sec; 
1374   0BCD FA FF FF      lea d, [bp + -1] ; $sec
1375   0BD0 2A            mov b, [d]
1376   0BD1 F9            leave
1377   0BD2 09            ret
1378   0BD3             
1379   0BD3             alloc:
1380   0BD3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1381   0BD6             ;; heap_top = heap_top + bytes; 
1382   0BD6 3B 43 33      mov d, _heap_top ; $heap_top
1383   0BD9 DA            push d
1384   0BDA 3B 43 33      mov d, _heap_top ; $heap_top
1385   0BDD 2A            mov b, [d]
1386   0BDE             ; START TERMS
1387   0BDE D7            push a
1388   0BDF 11            mov a, b
1389   0BE0 FA 05 00      lea d, [bp + 5] ; $bytes
1390   0BE3 2A            mov b, [d]
1391   0BE4 56            add b, a
1392   0BE5 E4            pop a
1393   0BE6             ; END TERMS
1394   0BE6 E7            pop d
1395   0BE7 FD 43         mov [d], b
1396   0BE9             ;; return heap_top - bytes; 
1397   0BE9 3B 43 33      mov d, _heap_top ; $heap_top
1398   0BEC 2A            mov b, [d]
1399   0BED             ; START TERMS
1400   0BED D7            push a
1401   0BEE 11            mov a, b
1402   0BEF FA 05 00      lea d, [bp + 5] ; $bytes
1403   0BF2 2A            mov b, [d]
1404   0BF3 60            sub a, b
1405   0BF4 27            mov b, a
1406   0BF5 E4            pop a
1407   0BF6             ; END TERMS
1408   0BF6 F9            leave
1409   0BF7 09            ret
1410   0BF8             
1411   0BF8             free:
1412   0BF8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1413   0BFB             ;; return heap_top = heap_top - bytes; 
1414   0BFB 3B 43 33      mov d, _heap_top ; $heap_top
1415   0BFE DA            push d
1416   0BFF 3B 43 33      mov d, _heap_top ; $heap_top
1417   0C02 2A            mov b, [d]
1418   0C03             ; START TERMS
1419   0C03 D7            push a
1420   0C04 11            mov a, b
1421   0C05 FA 05 00      lea d, [bp + 5] ; $bytes
1422   0C08 2A            mov b, [d]
1423   0C09 60            sub a, b
1424   0C0A 27            mov b, a
1425   0C0B E4            pop a
1426   0C0C             ; END TERMS
1427   0C0C E7            pop d
1428   0C0D FD 43         mov [d], b
1429   0C0F F9            leave
1430   0C10 09            ret
1431   0C11             
1432   0C11             fopen:
1433   0C11 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1434   0C14             ; $fp 
1435   0C14 52 02 00      sub sp, 2
1436   0C17             ;; fp = alloc(sizeof(struct _FILE)); 
1437   0C17 FA FF FF      lea d, [bp + -1] ; $fp
1438   0C1A DA            push d
out/mkbin.asm line 1439: Unused data in MS byte of argument. (2be3)
1439   0C1B 26 00 D4      mov b, 736351232
1440   0C1E FD AB         swp b
1441   0C20 D8            push b
1442   0C21 07 D3 0B      call alloc
1443   0C24 51 02 00      add sp, 2
1444   0C27 E7            pop d
1445   0C28 FD 43         mov [d], b
1446   0C2A F9            leave
1447   0C2B 09            ret
1448   0C2C             
1449   0C2C             printf:
1450   0C2C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1451   0C2F             ; $p 
1452   0C2F             ; $format_p 
1453   0C2F 52 04 00      sub sp, 4
1454   0C32             ;; format_p = format; 
1455   0C32 FA FD FF      lea d, [bp + -3] ; $format_p
1456   0C35 DA            push d
1457   0C36 FA 05 00      lea d, [bp + 5] ; $format
1458   0C39 2A            mov b, [d]
1459   0C3A E7            pop d
1460   0C3B FD 43         mov [d], b
1461   0C3D             ;; p = &format + 2; 
1462   0C3D FA FF FF      lea d, [bp + -1] ; $p
1463   0C40 DA            push d
1464   0C41 FA 05 00      lea d, [bp + 5] ; $format
1465   0C44 2D            mov b, d
1466   0C45             ; START TERMS
1467   0C45 D7            push a
1468   0C46 11            mov a, b
1469   0C47 26 02 00      mov b, $2
1470   0C4A 56            add b, a
1471   0C4B E4            pop a
1472   0C4C             ; END TERMS
1473   0C4C E7            pop d
1474   0C4D FD 43         mov [d], b
1475   0C4F             ;; for(;;){ 
1476   0C4F             _for15_init:
1477   0C4F             _for15_cond:
1478   0C4F             _for15_block:
1479   0C4F             ;; if(!*format_p) break; 
1480   0C4F             _if16_cond:
1481   0C4F FA FD FF      lea d, [bp + -3] ; $format_p
1482   0C52 2A            mov b, [d]
1483   0C53 74            mov d, b
1484   0C54 32            mov bl, [d]
1485   0C55 A7 00         mov bh, 0
1486   0C57 C0 00 00      cmp b, 0
1487   0C5A FD 71         seq ; !
1488   0C5C C0 00 00      cmp b, 0
1489   0C5F C6 68 0C      je _if16_else
1490   0C62             _if16_true:
1491   0C62             ;; break; 
1492   0C62 0A 8F 0E      jmp _for15_exit ; for break
1493   0C65 0A 8C 0E      jmp _if16_exit
1494   0C68             _if16_else:
1495   0C68             ;; if(*format_p == '%'){ 
1496   0C68             _if17_cond:
1497   0C68 FA FD FF      lea d, [bp + -3] ; $format_p
1498   0C6B 2A            mov b, [d]
1499   0C6C 74            mov d, b
1500   0C6D 32            mov bl, [d]
1501   0C6E A7 00         mov bh, 0
1502   0C70             ; START RELATIONAL
1503   0C70 D7            push a
1504   0C71 11            mov a, b
1505   0C72 26 25 00      mov b, $25
1506   0C75 B0            cmp a, b
1507   0C76 FD 71         seq ; ==
1508   0C78 E4            pop a
1509   0C79             ; END RELATIONAL
1510   0C79 C0 00 00      cmp b, 0
1511   0C7C C6 70 0E      je _if17_else
1512   0C7F             _if17_true:
1513   0C7F             ;; format_p++; 
1514   0C7F FA FD FF      lea d, [bp + -3] ; $format_p
1515   0C82 2A            mov b, [d]
1516   0C83 D8            push b
1517   0C84 FD 77         inc b
1518   0C86 FA FD FF      lea d, [bp + -3] ; $format_p
1519   0C89 FD 43         mov [d], b
1520   0C8B E5            pop b
1521   0C8C             ;; switch(*format_p){ 
1522   0C8C             _switch18_expr:
1523   0C8C FA FD FF      lea d, [bp + -3] ; $format_p
1524   0C8F 2A            mov b, [d]
1525   0C90 74            mov d, b
1526   0C91 32            mov bl, [d]
1527   0C92 A7 00         mov bh, 0
1528   0C94             _switch18_comparisons:
1529   0C94 C1 6C         cmp bl, $6c
1530   0C96 C6 C2 0C      je _switch18_case0
1531   0C99 C1 4C         cmp bl, $4c
1532   0C9B C6 C2 0C      je _switch18_case1
1533   0C9E C1 64         cmp bl, $64
1534   0CA0 C6 B0 0D      je _switch18_case2
1535   0CA3 C1 69         cmp bl, $69
1536   0CA5 C6 B0 0D      je _switch18_case3
1537   0CA8 C1 75         cmp bl, $75
1538   0CAA C6 D4 0D      je _switch18_case4
1539   0CAD C1 78         cmp bl, $78
1540   0CAF C6 F8 0D      je _switch18_case5
1541   0CB2 C1 63         cmp bl, $63
1542   0CB4 C6 16 0E      je _switch18_case6
1543   0CB7 C1 73         cmp bl, $73
1544   0CB9 C6 35 0E      je _switch18_case7
1545   0CBC 0A 54 0E      jmp _switch18_default
1546   0CBF 0A 60 0E      jmp _switch18_exit
1547   0CC2             _switch18_case0:
1548   0CC2             _switch18_case1:
1549   0CC2             ;; format_p++; 
1550   0CC2 FA FD FF      lea d, [bp + -3] ; $format_p
1551   0CC5 2A            mov b, [d]
1552   0CC6 D8            push b
1553   0CC7 FD 77         inc b
1554   0CC9 FA FD FF      lea d, [bp + -3] ; $format_p
1555   0CCC FD 43         mov [d], b
1556   0CCE E5            pop b
1557   0CCF             ;; if(*format_p == 'd' || *format_p == 'i') 
1558   0CCF             _if19_cond:
1559   0CCF FA FD FF      lea d, [bp + -3] ; $format_p
1560   0CD2 2A            mov b, [d]
1561   0CD3 74            mov d, b
1562   0CD4 32            mov bl, [d]
1563   0CD5 A7 00         mov bh, 0
1564   0CD7             ; START RELATIONAL
1565   0CD7 D7            push a
1566   0CD8 11            mov a, b
1567   0CD9 26 64 00      mov b, $64
1568   0CDC B0            cmp a, b
1569   0CDD FD 71         seq ; ==
1570   0CDF E4            pop a
1571   0CE0             ; END RELATIONAL
1572   0CE0 D7            push a
1573   0CE1 11            mov a, b
1574   0CE2 FA FD FF      lea d, [bp + -3] ; $format_p
1575   0CE5 2A            mov b, [d]
1576   0CE6 74            mov d, b
1577   0CE7 32            mov bl, [d]
1578   0CE8 A7 00         mov bh, 0
1579   0CEA             ; START RELATIONAL
1580   0CEA D7            push a
1581   0CEB 11            mov a, b
1582   0CEC 26 69 00      mov b, $69
1583   0CEF B0            cmp a, b
1584   0CF0 FD 71         seq ; ==
1585   0CF2 E4            pop a
1586   0CF3             ; END RELATIONAL
1587   0CF3 FD A8         sor a, b ; ||
1588   0CF5 E4            pop a
1589   0CF6 C0 00 00      cmp b, 0
1590   0CF9 C6 1E 0D      je _if19_else
1591   0CFC             _if19_true:
1592   0CFC             ;; print_signed_long(*(long *)p); 
1593   0CFC FA FF FF      lea d, [bp + -1] ; $p
1594   0CFF 2A            mov b, [d]
1595   0D00 AB            snex b
1596   0D01 FD 39         mov c, b
1597   0D03 74            mov d, b
1598   0D04 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1599   0D07 FD 39         mov c, b ; And place it into C
1600   0D09 2A            mov b, [d] ; Lower Word in B
1601   0D0A FD 79         mov g, b
1602   0D0C 28            mov b, c
1603   0D0D FD AB         swp b
1604   0D0F D8            push b
1605   0D10 FD 27         mov b, g
1606   0D12 FD AB         swp b
1607   0D14 D8            push b
1608   0D15 07 55 13      call print_signed_long
1609   0D18 51 04 00      add sp, 4
1610   0D1B 0A 9B 0D      jmp _if19_exit
1611   0D1E             _if19_else:
1612   0D1E             ;; if(*format_p == 'u') 
1613   0D1E             _if20_cond:
1614   0D1E FA FD FF      lea d, [bp + -3] ; $format_p
1615   0D21 2A            mov b, [d]
1616   0D22 74            mov d, b
1617   0D23 32            mov bl, [d]
1618   0D24 A7 00         mov bh, 0
1619   0D26             ; START RELATIONAL
1620   0D26 D7            push a
1621   0D27 11            mov a, b
1622   0D28 26 75 00      mov b, $75
1623   0D2B B0            cmp a, b
1624   0D2C FD 71         seq ; ==
1625   0D2E E4            pop a
1626   0D2F             ; END RELATIONAL
1627   0D2F C0 00 00      cmp b, 0
1628   0D32 C6 59 0D      je _if20_else
1629   0D35             _if20_true:
1630   0D35             ;; print_unsigned_long(*(unsigned long *)p); 
1631   0D35 FA FF FF      lea d, [bp + -1] ; $p
1632   0D38 2A            mov b, [d]
1633   0D39 A7 00         mov bh, 0
1634   0D3B 38 00 00      mov c, 0
1635   0D3E 74            mov d, b
1636   0D3F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1637   0D42 FD 39         mov c, b ; And place it into C
1638   0D44 2A            mov b, [d] ; Lower Word in B
1639   0D45 FD 79         mov g, b
1640   0D47 28            mov b, c
1641   0D48 FD AB         swp b
1642   0D4A D8            push b
1643   0D4B FD 27         mov b, g
1644   0D4D FD AB         swp b
1645   0D4F D8            push b
1646   0D50 07 8E 16      call print_unsigned_long
1647   0D53 51 04 00      add sp, 4
1648   0D56 0A 9B 0D      jmp _if20_exit
1649   0D59             _if20_else:
1650   0D59             ;; if(*format_p == 'x') 
1651   0D59             _if21_cond:
1652   0D59 FA FD FF      lea d, [bp + -3] ; $format_p
1653   0D5C 2A            mov b, [d]
1654   0D5D 74            mov d, b
1655   0D5E 32            mov bl, [d]
1656   0D5F A7 00         mov bh, 0
1657   0D61             ; START RELATIONAL
1658   0D61 D7            push a
1659   0D62 11            mov a, b
1660   0D63 26 78 00      mov b, $78
1661   0D66 B0            cmp a, b
1662   0D67 FD 71         seq ; ==
1663   0D69 E4            pop a
1664   0D6A             ; END RELATIONAL
1665   0D6A C0 00 00      cmp b, 0
1666   0D6D C6 8F 0D      je _if21_else
1667   0D70             _if21_true:
1668   0D70             ;; printx32(*(long int *)p); 
1669   0D70 FA FF FF      lea d, [bp + -1] ; $p
1670   0D73 2A            mov b, [d]
1671   0D74 74            mov d, b
1672   0D75 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1673   0D78 FD 39         mov c, b ; And place it into C
1674   0D7A 2A            mov b, [d] ; Lower Word in B
1675   0D7B FD 79         mov g, b
1676   0D7D 28            mov b, c
1677   0D7E FD AB         swp b
1678   0D80 D8            push b
1679   0D81 FD 27         mov b, g
1680   0D83 FD AB         swp b
1681   0D85 D8            push b
1682   0D86 07 DE 10      call printx32
1683   0D89 51 04 00      add sp, 4
1684   0D8C 0A 9B 0D      jmp _if21_exit
1685   0D8F             _if21_else:
1686   0D8F             ;; err("Unexpected format in printf."); 
1687   0D8F 26 DD 32      mov b, _s1 ; "Unexpected format in printf."
1688   0D92 FD AB         swp b
1689   0D94 D8            push b
1690   0D95 07 CC 10      call err
1691   0D98 51 02 00      add sp, 2
1692   0D9B             _if21_exit:
1693   0D9B             _if20_exit:
1694   0D9B             _if19_exit:
1695   0D9B             ;; p = p + 4; 
1696   0D9B FA FF FF      lea d, [bp + -1] ; $p
1697   0D9E DA            push d
1698   0D9F FA FF FF      lea d, [bp + -1] ; $p
1699   0DA2 2A            mov b, [d]
1700   0DA3             ; START TERMS
1701   0DA3 D7            push a
1702   0DA4 11            mov a, b
1703   0DA5 26 04 00      mov b, $4
1704   0DA8 56            add b, a
1705   0DA9 E4            pop a
1706   0DAA             ; END TERMS
1707   0DAA E7            pop d
1708   0DAB FD 43         mov [d], b
1709   0DAD             ;; break; 
1710   0DAD 0A 60 0E      jmp _switch18_exit ; case break
1711   0DB0             _switch18_case2:
1712   0DB0             _switch18_case3:
1713   0DB0             ;; print_signed(*(int*)p); 
1714   0DB0 FA FF FF      lea d, [bp + -1] ; $p
1715   0DB3 2A            mov b, [d]
1716   0DB4 74            mov d, b
1717   0DB5 2A            mov b, [d]
1718   0DB6 FD AB         swp b
1719   0DB8 D8            push b
1720   0DB9 07 65 12      call print_signed
1721   0DBC 51 02 00      add sp, 2
1722   0DBF             ;; p = p + 2; 
1723   0DBF FA FF FF      lea d, [bp + -1] ; $p
1724   0DC2 DA            push d
1725   0DC3 FA FF FF      lea d, [bp + -1] ; $p
1726   0DC6 2A            mov b, [d]
1727   0DC7             ; START TERMS
1728   0DC7 D7            push a
1729   0DC8 11            mov a, b
1730   0DC9 26 02 00      mov b, $2
1731   0DCC 56            add b, a
1732   0DCD E4            pop a
1733   0DCE             ; END TERMS
1734   0DCE E7            pop d
1735   0DCF FD 43         mov [d], b
1736   0DD1             ;; break; 
1737   0DD1 0A 60 0E      jmp _switch18_exit ; case break
1738   0DD4             _switch18_case4:
1739   0DD4             ;; print_unsigned(*(unsigned int*)p); 
1740   0DD4 FA FF FF      lea d, [bp + -1] ; $p
1741   0DD7 2A            mov b, [d]
1742   0DD8 74            mov d, b
1743   0DD9 2A            mov b, [d]
1744   0DDA FD AB         swp b
1745   0DDC D8            push b
1746   0DDD 07 86 18      call print_unsigned
1747   0DE0 51 02 00      add sp, 2
1748   0DE3             ;; p = p + 2; 
1749   0DE3 FA FF FF      lea d, [bp + -1] ; $p
1750   0DE6 DA            push d
1751   0DE7 FA FF FF      lea d, [bp + -1] ; $p
1752   0DEA 2A            mov b, [d]
1753   0DEB             ; START TERMS
1754   0DEB D7            push a
1755   0DEC 11            mov a, b
1756   0DED 26 02 00      mov b, $2
1757   0DF0 56            add b, a
1758   0DF1 E4            pop a
1759   0DF2             ; END TERMS
1760   0DF2 E7            pop d
1761   0DF3 FD 43         mov [d], b
1762   0DF5             ;; break; 
1763   0DF5 0A 60 0E      jmp _switch18_exit ; case break
1764   0DF8             _switch18_case5:
1765   0DF8             
1766   0DF8             ; --- BEGIN INLINE ASM BLOCK
1767   0DF8 FA FF FF      lea d, [bp + -1] ; $p
1768   0DFB FD 2A         mov d, [d]
1769   0DFD 2A            mov b, [d]
1770   0DFE 07 89 1C      call print_u16x
1771   0E01             ; --- END INLINE ASM BLOCK
1772   0E01             
1773   0E01             ;; p = p + 2; 
1774   0E01 FA FF FF      lea d, [bp + -1] ; $p
1775   0E04 DA            push d
1776   0E05 FA FF FF      lea d, [bp + -1] ; $p
1777   0E08 2A            mov b, [d]
1778   0E09             ; START TERMS
1779   0E09 D7            push a
1780   0E0A 11            mov a, b
1781   0E0B 26 02 00      mov b, $2
1782   0E0E 56            add b, a
1783   0E0F E4            pop a
1784   0E10             ; END TERMS
1785   0E10 E7            pop d
1786   0E11 FD 43         mov [d], b
1787   0E13             ;; break; 
1788   0E13 0A 60 0E      jmp _switch18_exit ; case break
1789   0E16             _switch18_case6:
1790   0E16             
1791   0E16             ; --- BEGIN INLINE ASM BLOCK
1792   0E16 FA FF FF      lea d, [bp + -1] ; $p
1793   0E19 FD 2A         mov d, [d]
1794   0E1B 1E            mov al, [d]
1795   0E1C 23            mov ah, al
1796   0E1D 07 E7 1A      call _putchar
1797   0E20             ; --- END INLINE ASM BLOCK
1798   0E20             
1799   0E20             ;; p = p + 2; 
1800   0E20 FA FF FF      lea d, [bp + -1] ; $p
1801   0E23 DA            push d
1802   0E24 FA FF FF      lea d, [bp + -1] ; $p
1803   0E27 2A            mov b, [d]
1804   0E28             ; START TERMS
1805   0E28 D7            push a
1806   0E29 11            mov a, b
1807   0E2A 26 02 00      mov b, $2
1808   0E2D 56            add b, a
1809   0E2E E4            pop a
1810   0E2F             ; END TERMS
1811   0E2F E7            pop d
1812   0E30 FD 43         mov [d], b
1813   0E32             ;; break; 
1814   0E32 0A 60 0E      jmp _switch18_exit ; case break
1815   0E35             _switch18_case7:
1816   0E35             
1817   0E35             ; --- BEGIN INLINE ASM BLOCK
1818   0E35 FA FF FF      lea d, [bp + -1] ; $p
1819   0E38 FD 2A         mov d, [d]
1820   0E3A FD 2A         mov d, [d]
1821   0E3C 07 31 1C      call _puts
1822   0E3F             ; --- END INLINE ASM BLOCK
1823   0E3F             
1824   0E3F             ;; p = p + 2; 
1825   0E3F FA FF FF      lea d, [bp + -1] ; $p
1826   0E42 DA            push d
1827   0E43 FA FF FF      lea d, [bp + -1] ; $p
1828   0E46 2A            mov b, [d]
1829   0E47             ; START TERMS
1830   0E47 D7            push a
1831   0E48 11            mov a, b
1832   0E49 26 02 00      mov b, $2
1833   0E4C 56            add b, a
1834   0E4D E4            pop a
1835   0E4E             ; END TERMS
1836   0E4E E7            pop d
1837   0E4F FD 43         mov [d], b
1838   0E51             ;; break; 
1839   0E51 0A 60 0E      jmp _switch18_exit ; case break
1840   0E54             _switch18_default:
1841   0E54             ;; print("Error: Unknown argument type.\n"); 
1842   0E54 26 FA 32      mov b, _s2 ; "Error: Unknown argument type.\n"
1843   0E57 FD AB         swp b
1844   0E59 D8            push b
1845   0E5A 07 9E 19      call print
1846   0E5D 51 02 00      add sp, 2
1847   0E60             _switch18_exit:
1848   0E60             ;; format_p++; 
1849   0E60 FA FD FF      lea d, [bp + -3] ; $format_p
1850   0E63 2A            mov b, [d]
1851   0E64 D8            push b
1852   0E65 FD 77         inc b
1853   0E67 FA FD FF      lea d, [bp + -3] ; $format_p
1854   0E6A FD 43         mov [d], b
1855   0E6C E5            pop b
1856   0E6D 0A 8C 0E      jmp _if17_exit
1857   0E70             _if17_else:
1858   0E70             ;; putchar(*format_p); 
1859   0E70 FA FD FF      lea d, [bp + -3] ; $format_p
1860   0E73 2A            mov b, [d]
1861   0E74 74            mov d, b
1862   0E75 32            mov bl, [d]
1863   0E76 A7 00         mov bh, 0
1864   0E78 DD            push bl
1865   0E79 07 56 19      call putchar
1866   0E7C 51 01 00      add sp, 1
1867   0E7F             ;; format_p++; 
1868   0E7F FA FD FF      lea d, [bp + -3] ; $format_p
1869   0E82 2A            mov b, [d]
1870   0E83 D8            push b
1871   0E84 FD 77         inc b
1872   0E86 FA FD FF      lea d, [bp + -3] ; $format_p
1873   0E89 FD 43         mov [d], b
1874   0E8B E5            pop b
1875   0E8C             _if17_exit:
1876   0E8C             _if16_exit:
1877   0E8C             _for15_update:
1878   0E8C 0A 4F 0C      jmp _for15_cond
1879   0E8F             _for15_exit:
1880   0E8F F9            leave
1881   0E90 09            ret
1882   0E91             
1883   0E91             scanf:
1884   0E91 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1885   0E94             ; $p 
1886   0E94             ; $format_p 
1887   0E94             ; $c 
1888   0E94             ; $i 
1889   0E94             ; $input_string 
1890   0E94 52 07 02      sub sp, 519
1891   0E97             ;; format_p = format; 
1892   0E97 FA FD FF      lea d, [bp + -3] ; $format_p
1893   0E9A DA            push d
1894   0E9B FA 05 00      lea d, [bp + 5] ; $format
1895   0E9E 2A            mov b, [d]
1896   0E9F E7            pop d
1897   0EA0 FD 43         mov [d], b
1898   0EA2             ;; p = &format + 2; 
1899   0EA2 FA FF FF      lea d, [bp + -1] ; $p
1900   0EA5 DA            push d
1901   0EA6 FA 05 00      lea d, [bp + 5] ; $format
1902   0EA9 2D            mov b, d
1903   0EAA             ; START TERMS
1904   0EAA D7            push a
1905   0EAB 11            mov a, b
1906   0EAC 26 02 00      mov b, $2
1907   0EAF 56            add b, a
1908   0EB0 E4            pop a
1909   0EB1             ; END TERMS
1910   0EB1 E7            pop d
1911   0EB2 FD 43         mov [d], b
1912   0EB4             ;; for(;;){ 
1913   0EB4             _for22_init:
1914   0EB4             _for22_cond:
1915   0EB4             _for22_block:
1916   0EB4             ;; if(!*format_p) break; 
1917   0EB4             _if23_cond:
1918   0EB4 FA FD FF      lea d, [bp + -3] ; $format_p
1919   0EB7 2A            mov b, [d]
1920   0EB8 74            mov d, b
1921   0EB9 32            mov bl, [d]
1922   0EBA A7 00         mov bh, 0
1923   0EBC C0 00 00      cmp b, 0
1924   0EBF FD 71         seq ; !
1925   0EC1 C0 00 00      cmp b, 0
1926   0EC4 C6 CD 0E      je _if23_else
1927   0EC7             _if23_true:
1928   0EC7             ;; break; 
1929   0EC7 0A CA 10      jmp _for22_exit ; for break
1930   0ECA 0A C7 10      jmp _if23_exit
1931   0ECD             _if23_else:
1932   0ECD             ;; if(*format_p == '%'){ 
1933   0ECD             _if24_cond:
1934   0ECD FA FD FF      lea d, [bp + -3] ; $format_p
1935   0ED0 2A            mov b, [d]
1936   0ED1 74            mov d, b
1937   0ED2 32            mov bl, [d]
1938   0ED3 A7 00         mov bh, 0
1939   0ED5             ; START RELATIONAL
1940   0ED5 D7            push a
1941   0ED6 11            mov a, b
1942   0ED7 26 25 00      mov b, $25
1943   0EDA B0            cmp a, b
1944   0EDB FD 71         seq ; ==
1945   0EDD E4            pop a
1946   0EDE             ; END RELATIONAL
1947   0EDE C0 00 00      cmp b, 0
1948   0EE1 C6 AB 10      je _if24_else
1949   0EE4             _if24_true:
1950   0EE4             ;; format_p++; 
1951   0EE4 FA FD FF      lea d, [bp + -3] ; $format_p
1952   0EE7 2A            mov b, [d]
1953   0EE8 D8            push b
1954   0EE9 FD 77         inc b
1955   0EEB FA FD FF      lea d, [bp + -3] ; $format_p
1956   0EEE FD 43         mov [d], b
1957   0EF0 E5            pop b
1958   0EF1             ;; switch(*format_p){ 
1959   0EF1             _switch25_expr:
1960   0EF1 FA FD FF      lea d, [bp + -3] ; $format_p
1961   0EF4 2A            mov b, [d]
1962   0EF5 74            mov d, b
1963   0EF6 32            mov bl, [d]
1964   0EF7 A7 00         mov bh, 0
1965   0EF9             _switch25_comparisons:
1966   0EF9 C1 6C         cmp bl, $6c
1967   0EFB C6 27 0F      je _switch25_case0
1968   0EFE C1 4C         cmp bl, $4c
1969   0F00 C6 27 0F      je _switch25_case1
1970   0F03 C1 64         cmp bl, $64
1971   0F05 C6 B9 0F      je _switch25_case2
1972   0F08 C1 69         cmp bl, $69
1973   0F0A C6 B9 0F      je _switch25_case3
1974   0F0D C1 75         cmp bl, $75
1975   0F0F C6 E6 0F      je _switch25_case4
1976   0F12 C1 78         cmp bl, $78
1977   0F14 C6 13 10      je _switch25_case5
1978   0F17 C1 63         cmp bl, $63
1979   0F19 C6 28 10      je _switch25_case6
1980   0F1C C1 73         cmp bl, $73
1981   0F1E C6 57 10      je _switch25_case7
1982   0F21 0A 8F 10      jmp _switch25_default
1983   0F24 0A 9B 10      jmp _switch25_exit
1984   0F27             _switch25_case0:
1985   0F27             _switch25_case1:
1986   0F27             ;; format_p++; 
1987   0F27 FA FD FF      lea d, [bp + -3] ; $format_p
1988   0F2A 2A            mov b, [d]
1989   0F2B D8            push b
1990   0F2C FD 77         inc b
1991   0F2E FA FD FF      lea d, [bp + -3] ; $format_p
1992   0F31 FD 43         mov [d], b
1993   0F33 E5            pop b
1994   0F34             ;; if(*format_p == 'd' || *format_p == 'i'); 
1995   0F34             _if26_cond:
1996   0F34 FA FD FF      lea d, [bp + -3] ; $format_p
1997   0F37 2A            mov b, [d]
1998   0F38 74            mov d, b
1999   0F39 32            mov bl, [d]
2000   0F3A A7 00         mov bh, 0
2001   0F3C             ; START RELATIONAL
2002   0F3C D7            push a
2003   0F3D 11            mov a, b
2004   0F3E 26 64 00      mov b, $64
2005   0F41 B0            cmp a, b
2006   0F42 FD 71         seq ; ==
2007   0F44 E4            pop a
2008   0F45             ; END RELATIONAL
2009   0F45 D7            push a
2010   0F46 11            mov a, b
2011   0F47 FA FD FF      lea d, [bp + -3] ; $format_p
2012   0F4A 2A            mov b, [d]
2013   0F4B 74            mov d, b
2014   0F4C 32            mov bl, [d]
2015   0F4D A7 00         mov bh, 0
2016   0F4F             ; START RELATIONAL
2017   0F4F D7            push a
2018   0F50 11            mov a, b
2019   0F51 26 69 00      mov b, $69
2020   0F54 B0            cmp a, b
2021   0F55 FD 71         seq ; ==
2022   0F57 E4            pop a
2023   0F58             ; END RELATIONAL
2024   0F58 FD A8         sor a, b ; ||
2025   0F5A E4            pop a
2026   0F5B C0 00 00      cmp b, 0
2027   0F5E C6 64 0F      je _if26_else
2028   0F61             _if26_true:
2029   0F61             ;; ; 
2030   0F61 0A A4 0F      jmp _if26_exit
2031   0F64             _if26_else:
2032   0F64             ;; if(*format_p == 'u'); 
2033   0F64             _if27_cond:
2034   0F64 FA FD FF      lea d, [bp + -3] ; $format_p
2035   0F67 2A            mov b, [d]
2036   0F68 74            mov d, b
2037   0F69 32            mov bl, [d]
2038   0F6A A7 00         mov bh, 0
2039   0F6C             ; START RELATIONAL
2040   0F6C D7            push a
2041   0F6D 11            mov a, b
2042   0F6E 26 75 00      mov b, $75
2043   0F71 B0            cmp a, b
2044   0F72 FD 71         seq ; ==
2045   0F74 E4            pop a
2046   0F75             ; END RELATIONAL
2047   0F75 C0 00 00      cmp b, 0
2048   0F78 C6 7E 0F      je _if27_else
2049   0F7B             _if27_true:
2050   0F7B             ;; ; 
2051   0F7B 0A A4 0F      jmp _if27_exit
2052   0F7E             _if27_else:
2053   0F7E             ;; if(*format_p == 'x'); 
2054   0F7E             _if28_cond:
2055   0F7E FA FD FF      lea d, [bp + -3] ; $format_p
2056   0F81 2A            mov b, [d]
2057   0F82 74            mov d, b
2058   0F83 32            mov bl, [d]
2059   0F84 A7 00         mov bh, 0
2060   0F86             ; START RELATIONAL
2061   0F86 D7            push a
2062   0F87 11            mov a, b
2063   0F88 26 78 00      mov b, $78
2064   0F8B B0            cmp a, b
2065   0F8C FD 71         seq ; ==
2066   0F8E E4            pop a
2067   0F8F             ; END RELATIONAL
2068   0F8F C0 00 00      cmp b, 0
2069   0F92 C6 98 0F      je _if28_else
2070   0F95             _if28_true:
2071   0F95             ;; ; 
2072   0F95 0A A4 0F      jmp _if28_exit
2073   0F98             _if28_else:
2074   0F98             ;; err("Unexpected format in printf."); 
2075   0F98 26 DD 32      mov b, _s1 ; "Unexpected format in printf."
2076   0F9B FD AB         swp b
2077   0F9D D8            push b
2078   0F9E 07 CC 10      call err
2079   0FA1 51 02 00      add sp, 2
2080   0FA4             _if28_exit:
2081   0FA4             _if27_exit:
2082   0FA4             _if26_exit:
2083   0FA4             ;; p = p + 4; 
2084   0FA4 FA FF FF      lea d, [bp + -1] ; $p
2085   0FA7 DA            push d
2086   0FA8 FA FF FF      lea d, [bp + -1] ; $p
2087   0FAB 2A            mov b, [d]
2088   0FAC             ; START TERMS
2089   0FAC D7            push a
2090   0FAD 11            mov a, b
2091   0FAE 26 04 00      mov b, $4
2092   0FB1 56            add b, a
2093   0FB2 E4            pop a
2094   0FB3             ; END TERMS
2095   0FB3 E7            pop d
2096   0FB4 FD 43         mov [d], b
2097   0FB6             ;; break; 
2098   0FB6 0A 9B 10      jmp _switch25_exit ; case break
2099   0FB9             _switch25_case2:
2100   0FB9             _switch25_case3:
2101   0FB9             ;; i = scann(); 
2102   0FB9 FA FA FF      lea d, [bp + -6] ; $i
2103   0FBC DA            push d
2104   0FBD 07 79 19      call scann
2105   0FC0 E7            pop d
2106   0FC1 FD 43         mov [d], b
2107   0FC3             ;; **(int **)p = i; 
2108   0FC3 FA FF FF      lea d, [bp + -1] ; $p
2109   0FC6 2A            mov b, [d]
2110   0FC7 74            mov d, b
2111   0FC8 2A            mov b, [d]
2112   0FC9 D8            push b
2113   0FCA FA FA FF      lea d, [bp + -6] ; $i
2114   0FCD 2A            mov b, [d]
2115   0FCE E7            pop d
2116   0FCF FD 43         mov [d], b
2117   0FD1             ;; p = p + 2; 
2118   0FD1 FA FF FF      lea d, [bp + -1] ; $p
2119   0FD4 DA            push d
2120   0FD5 FA FF FF      lea d, [bp + -1] ; $p
2121   0FD8 2A            mov b, [d]
2122   0FD9             ; START TERMS
2123   0FD9 D7            push a
2124   0FDA 11            mov a, b
2125   0FDB 26 02 00      mov b, $2
2126   0FDE 56            add b, a
2127   0FDF E4            pop a
2128   0FE0             ; END TERMS
2129   0FE0 E7            pop d
2130   0FE1 FD 43         mov [d], b
2131   0FE3             ;; break; 
2132   0FE3 0A 9B 10      jmp _switch25_exit ; case break
2133   0FE6             _switch25_case4:
2134   0FE6             ;; i = scann(); 
2135   0FE6 FA FA FF      lea d, [bp + -6] ; $i
2136   0FE9 DA            push d
2137   0FEA 07 79 19      call scann
2138   0FED E7            pop d
2139   0FEE FD 43         mov [d], b
2140   0FF0             ;; **(int **)p = i; 
2141   0FF0 FA FF FF      lea d, [bp + -1] ; $p
2142   0FF3 2A            mov b, [d]
2143   0FF4 74            mov d, b
2144   0FF5 2A            mov b, [d]
2145   0FF6 D8            push b
2146   0FF7 FA FA FF      lea d, [bp + -6] ; $i
2147   0FFA 2A            mov b, [d]
2148   0FFB E7            pop d
2149   0FFC FD 43         mov [d], b
2150   0FFE             ;; p = p + 2; 
2151   0FFE FA FF FF      lea d, [bp + -1] ; $p
2152   1001 DA            push d
2153   1002 FA FF FF      lea d, [bp + -1] ; $p
2154   1005 2A            mov b, [d]
2155   1006             ; START TERMS
2156   1006 D7            push a
2157   1007 11            mov a, b
2158   1008 26 02 00      mov b, $2
2159   100B 56            add b, a
2160   100C E4            pop a
2161   100D             ; END TERMS
2162   100D E7            pop d
2163   100E FD 43         mov [d], b
2164   1010             ;; break; 
2165   1010 0A 9B 10      jmp _switch25_exit ; case break
2166   1013             _switch25_case5:
2167   1013             ;; p = p + 2; 
2168   1013 FA FF FF      lea d, [bp + -1] ; $p
2169   1016 DA            push d
2170   1017 FA FF FF      lea d, [bp + -1] ; $p
2171   101A 2A            mov b, [d]
2172   101B             ; START TERMS
2173   101B D7            push a
2174   101C 11            mov a, b
2175   101D 26 02 00      mov b, $2
2176   1020 56            add b, a
2177   1021 E4            pop a
2178   1022             ; END TERMS
2179   1022 E7            pop d
2180   1023 FD 43         mov [d], b
2181   1025             ;; break; 
2182   1025 0A 9B 10      jmp _switch25_exit ; case break
2183   1028             _switch25_case6:
2184   1028             ;; c = getchar(); 
2185   1028 FA FC FF      lea d, [bp + -4] ; $c
2186   102B DA            push d
2187   102C 07 63 19      call getchar
2188   102F E7            pop d
2189   1030 FD 3E         mov [d], bl
2190   1032             ;; **(char **)p = c; 
2191   1032 FA FF FF      lea d, [bp + -1] ; $p
2192   1035 2A            mov b, [d]
2193   1036 74            mov d, b
2194   1037 2A            mov b, [d]
2195   1038 D8            push b
2196   1039 FA FC FF      lea d, [bp + -4] ; $c
2197   103C 32            mov bl, [d]
2198   103D A7 00         mov bh, 0
2199   103F E7            pop d
2200   1040 FD 43         mov [d], b
2201   1042             ;; p = p + 2; 
2202   1042 FA FF FF      lea d, [bp + -1] ; $p
2203   1045 DA            push d
2204   1046 FA FF FF      lea d, [bp + -1] ; $p
2205   1049 2A            mov b, [d]
2206   104A             ; START TERMS
2207   104A D7            push a
2208   104B 11            mov a, b
2209   104C 26 02 00      mov b, $2
2210   104F 56            add b, a
2211   1050 E4            pop a
2212   1051             ; END TERMS
2213   1051 E7            pop d
2214   1052 FD 43         mov [d], b
2215   1054             ;; break; 
2216   1054 0A 9B 10      jmp _switch25_exit ; case break
2217   1057             _switch25_case7:
2218   1057             ;; gets(input_string); 
2219   1057 FA FA FD      lea d, [bp + -518] ; $input_string
2220   105A 2D            mov b, d
2221   105B FD AB         swp b
2222   105D D8            push b
2223   105E 07 4B 12      call gets
2224   1061 51 02 00      add sp, 2
2225   1064             ;; strcpy(*(char **)p, input_string); 
2226   1064 FA FA FD      lea d, [bp + -518] ; $input_string
2227   1067 2D            mov b, d
2228   1068 FD AB         swp b
2229   106A D8            push b
2230   106B FA FF FF      lea d, [bp + -1] ; $p
2231   106E 2A            mov b, [d]
2232   106F 74            mov d, b
2233   1070 2A            mov b, [d]
2234   1071 FD AB         swp b
2235   1073 D8            push b
2236   1074 07 99 08      call strcpy
2237   1077 51 04 00      add sp, 4
2238   107A             ;; p = p + 2; 
2239   107A FA FF FF      lea d, [bp + -1] ; $p
2240   107D DA            push d
2241   107E FA FF FF      lea d, [bp + -1] ; $p
2242   1081 2A            mov b, [d]
2243   1082             ; START TERMS
2244   1082 D7            push a
2245   1083 11            mov a, b
2246   1084 26 02 00      mov b, $2
2247   1087 56            add b, a
2248   1088 E4            pop a
2249   1089             ; END TERMS
2250   1089 E7            pop d
2251   108A FD 43         mov [d], b
2252   108C             ;; break; 
2253   108C 0A 9B 10      jmp _switch25_exit ; case break
2254   108F             _switch25_default:
2255   108F             ;; print("Error: Unknown argument type.\n"); 
2256   108F 26 FA 32      mov b, _s2 ; "Error: Unknown argument type.\n"
2257   1092 FD AB         swp b
2258   1094 D8            push b
2259   1095 07 9E 19      call print
2260   1098 51 02 00      add sp, 2
2261   109B             _switch25_exit:
2262   109B             ;; format_p++; 
2263   109B FA FD FF      lea d, [bp + -3] ; $format_p
2264   109E 2A            mov b, [d]
2265   109F D8            push b
2266   10A0 FD 77         inc b
2267   10A2 FA FD FF      lea d, [bp + -3] ; $format_p
2268   10A5 FD 43         mov [d], b
2269   10A7 E5            pop b
2270   10A8 0A C7 10      jmp _if24_exit
2271   10AB             _if24_else:
2272   10AB             ;; putchar(*format_p); 
2273   10AB FA FD FF      lea d, [bp + -3] ; $format_p
2274   10AE 2A            mov b, [d]
2275   10AF 74            mov d, b
2276   10B0 32            mov bl, [d]
2277   10B1 A7 00         mov bh, 0
2278   10B3 DD            push bl
2279   10B4 07 56 19      call putchar
2280   10B7 51 01 00      add sp, 1
2281   10BA             ;; format_p++; 
2282   10BA FA FD FF      lea d, [bp + -3] ; $format_p
2283   10BD 2A            mov b, [d]
2284   10BE D8            push b
2285   10BF FD 77         inc b
2286   10C1 FA FD FF      lea d, [bp + -3] ; $format_p
2287   10C4 FD 43         mov [d], b
2288   10C6 E5            pop b
2289   10C7             _if24_exit:
2290   10C7             _if23_exit:
2291   10C7             _for22_update:
2292   10C7 0A B4 0E      jmp _for22_cond
2293   10CA             _for22_exit:
2294   10CA F9            leave
2295   10CB 09            ret
2296   10CC             
2297   10CC             err:
2298   10CC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2299   10CF             ;; print(e); 
2300   10CF FA 05 00      lea d, [bp + 5] ; $e
2301   10D2 2A            mov b, [d]
2302   10D3 FD AB         swp b
2303   10D5 D8            push b
2304   10D6 07 9E 19      call print
2305   10D9 51 02 00      add sp, 2
2306   10DC F9            leave
2307   10DD 09            ret
2308   10DE             
2309   10DE             printx32:
2310   10DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2311   10E1             
2312   10E1             ; --- BEGIN INLINE ASM BLOCK
2313   10E1 FA 05 00      lea d, [bp + 5] ; $hex
2314   10E4 2B 02 00      mov b, [d+2]
2315   10E7 07 89 1C      call print_u16x
2316   10EA 2A            mov b, [d]
2317   10EB 07 89 1C      call print_u16x
2318   10EE             ; --- END INLINE ASM BLOCK
2319   10EE             
2320   10EE F9            leave
2321   10EF 09            ret
2322   10F0             
2323   10F0             printx16:
2324   10F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2325   10F3             
2326   10F3             ; --- BEGIN INLINE ASM BLOCK
2327   10F3 FA 05 00      lea d, [bp + 5] ; $hex
2328   10F6 2A            mov b, [d]
2329   10F7 07 89 1C      call print_u16x
2330   10FA             ; --- END INLINE ASM BLOCK
2331   10FA             
2332   10FA F9            leave
2333   10FB 09            ret
2334   10FC             
2335   10FC             printx8:
2336   10FC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2337   10FF             
2338   10FF             ; --- BEGIN INLINE ASM BLOCK
2339   10FF FA 05 00      lea d, [bp + 5] ; $hex
2340   1102 32            mov bl, [d]
2341   1103 07 CD 1C      call print_u8x
2342   1106             ; --- END INLINE ASM BLOCK
2343   1106             
2344   1106 F9            leave
2345   1107 09            ret
2346   1108             
2347   1108             hex_str_to_int:
2348   1108 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2349   110B             ; $value 
2350   110B 10 00 00      mov a, $0
2351   110E 45 FF FF      mov [bp + -1], a
2352   1111             ; $i 
2353   1111             ; $hex_char 
2354   1111             ; $len 
2355   1111 52 07 00      sub sp, 7
2356   1114             ;; len = strlen(hex_string); 
2357   1114 FA FA FF      lea d, [bp + -6] ; $len
2358   1117 DA            push d
2359   1118 FA 05 00      lea d, [bp + 5] ; $hex_string
2360   111B 2A            mov b, [d]
2361   111C FD AB         swp b
2362   111E D8            push b
2363   111F 07 0D 0A      call strlen
2364   1122 51 02 00      add sp, 2
2365   1125 E7            pop d
2366   1126 FD 43         mov [d], b
2367   1128             ;; for (i = 0; i < len; i++) { 
2368   1128             _for29_init:
2369   1128 FA FD FF      lea d, [bp + -3] ; $i
2370   112B DA            push d
2371   112C 26 00 00      mov b, $0
2372   112F E7            pop d
2373   1130 FD 43         mov [d], b
2374   1132             _for29_cond:
2375   1132 FA FD FF      lea d, [bp + -3] ; $i
2376   1135 2A            mov b, [d]
2377   1136             ; START RELATIONAL
2378   1136 D7            push a
2379   1137 11            mov a, b
2380   1138 FA FA FF      lea d, [bp + -6] ; $len
2381   113B 2A            mov b, [d]
2382   113C B0            cmp a, b
2383   113D FD 73         slt ; < (signed)
2384   113F E4            pop a
2385   1140             ; END RELATIONAL
2386   1140 C0 00 00      cmp b, 0
2387   1143 C6 45 12      je _for29_exit
2388   1146             _for29_block:
2389   1146             ;; hex_char = hex_string[i]; 
2390   1146 FA FC FF      lea d, [bp + -4] ; $hex_char
2391   1149 DA            push d
2392   114A FA 05 00      lea d, [bp + 5] ; $hex_string
2393   114D FD 2A         mov d, [d]
2394   114F D7            push a
2395   1150 DA            push d
2396   1151 FA FD FF      lea d, [bp + -3] ; $i
2397   1154 2A            mov b, [d]
2398   1155 E7            pop d
2399   1156 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2400   115A E4            pop a
2401   115B 32            mov bl, [d]
2402   115C A7 00         mov bh, 0
2403   115E E7            pop d
2404   115F FD 3E         mov [d], bl
2405   1161             ;; if (hex_char >= 'a' && hex_char <= 'f')  
2406   1161             _if30_cond:
2407   1161 FA FC FF      lea d, [bp + -4] ; $hex_char
2408   1164 32            mov bl, [d]
2409   1165 A7 00         mov bh, 0
2410   1167             ; START RELATIONAL
2411   1167 D7            push a
2412   1168 11            mov a, b
2413   1169 26 61 00      mov b, $61
2414   116C B0            cmp a, b
2415   116D FD 80         sge ; >=
2416   116F E4            pop a
2417   1170             ; END RELATIONAL
2418   1170 D7            push a
2419   1171 11            mov a, b
2420   1172 FA FC FF      lea d, [bp + -4] ; $hex_char
2421   1175 32            mov bl, [d]
2422   1176 A7 00         mov bh, 0
2423   1178             ; START RELATIONAL
2424   1178 D7            push a
2425   1179 11            mov a, b
2426   117A 26 66 00      mov b, $66
2427   117D B0            cmp a, b
2428   117E FD 73         slt ; <= (signed)
2429   1180 E4            pop a
2430   1181             ; END RELATIONAL
2431   1181 FD A7         sand a, b
2432   1183 E4            pop a
2433   1184 C0 00 00      cmp b, 0
2434   1187 C6 B8 11      je _if30_else
2435   118A             _if30_true:
2436   118A             ;; value = (value * 16) + (hex_char - 'a' + 10); 
2437   118A FA FF FF      lea d, [bp + -1] ; $value
2438   118D DA            push d
2439   118E FA FF FF      lea d, [bp + -1] ; $value
2440   1191 2A            mov b, [d]
2441   1192             ; START FACTORS
2442   1192 D7            push a
2443   1193 11            mov a, b
2444   1194 26 10 00      mov b, $10
2445   1197 AC            mul a, b ; *
2446   1198 11            mov a, b
2447   1199 27            mov b, a
2448   119A E4            pop a
2449   119B             ; END FACTORS
2450   119B             ; START TERMS
2451   119B D7            push a
2452   119C 11            mov a, b
2453   119D FA FC FF      lea d, [bp + -4] ; $hex_char
2454   11A0 32            mov bl, [d]
2455   11A1 A7 00         mov bh, 0
2456   11A3             ; START TERMS
2457   11A3 D7            push a
2458   11A4 11            mov a, b
2459   11A5 26 61 00      mov b, $61
2460   11A8 60            sub a, b
2461   11A9 27            mov b, a
2462   11AA 11            mov a, b
2463   11AB 26 0A 00      mov b, $a
2464   11AE 56            add b, a
2465   11AF E4            pop a
2466   11B0             ; END TERMS
2467   11B0 56            add b, a
2468   11B1 E4            pop a
2469   11B2             ; END TERMS
2470   11B2 E7            pop d
2471   11B3 FD 43         mov [d], b
2472   11B5 0A 35 12      jmp _if30_exit
2473   11B8             _if30_else:
2474   11B8             ;; if (hex_char >= 'A' && hex_char <= 'F')  
2475   11B8             _if31_cond:
2476   11B8 FA FC FF      lea d, [bp + -4] ; $hex_char
2477   11BB 32            mov bl, [d]
2478   11BC A7 00         mov bh, 0
2479   11BE             ; START RELATIONAL
2480   11BE D7            push a
2481   11BF 11            mov a, b
2482   11C0 26 41 00      mov b, $41
2483   11C3 B0            cmp a, b
2484   11C4 FD 80         sge ; >=
2485   11C6 E4            pop a
2486   11C7             ; END RELATIONAL
2487   11C7 D7            push a
2488   11C8 11            mov a, b
2489   11C9 FA FC FF      lea d, [bp + -4] ; $hex_char
2490   11CC 32            mov bl, [d]
2491   11CD A7 00         mov bh, 0
2492   11CF             ; START RELATIONAL
2493   11CF D7            push a
2494   11D0 11            mov a, b
2495   11D1 26 46 00      mov b, $46
2496   11D4 B0            cmp a, b
2497   11D5 FD 73         slt ; <= (signed)
2498   11D7 E4            pop a
2499   11D8             ; END RELATIONAL
2500   11D8 FD A7         sand a, b
2501   11DA E4            pop a
2502   11DB C0 00 00      cmp b, 0
2503   11DE C6 0F 12      je _if31_else
2504   11E1             _if31_true:
2505   11E1             ;; value = (value * 16) + (hex_char - 'A' + 10); 
2506   11E1 FA FF FF      lea d, [bp + -1] ; $value
2507   11E4 DA            push d
2508   11E5 FA FF FF      lea d, [bp + -1] ; $value
2509   11E8 2A            mov b, [d]
2510   11E9             ; START FACTORS
2511   11E9 D7            push a
2512   11EA 11            mov a, b
2513   11EB 26 10 00      mov b, $10
2514   11EE AC            mul a, b ; *
2515   11EF 11            mov a, b
2516   11F0 27            mov b, a
2517   11F1 E4            pop a
2518   11F2             ; END FACTORS
2519   11F2             ; START TERMS
2520   11F2 D7            push a
2521   11F3 11            mov a, b
2522   11F4 FA FC FF      lea d, [bp + -4] ; $hex_char
2523   11F7 32            mov bl, [d]
2524   11F8 A7 00         mov bh, 0
2525   11FA             ; START TERMS
2526   11FA D7            push a
2527   11FB 11            mov a, b
2528   11FC 26 41 00      mov b, $41
2529   11FF 60            sub a, b
2530   1200 27            mov b, a
2531   1201 11            mov a, b
2532   1202 26 0A 00      mov b, $a
2533   1205 56            add b, a
2534   1206 E4            pop a
2535   1207             ; END TERMS
2536   1207 56            add b, a
2537   1208 E4            pop a
2538   1209             ; END TERMS
2539   1209 E7            pop d
2540   120A FD 43         mov [d], b
2541   120C 0A 35 12      jmp _if31_exit
2542   120F             _if31_else:
2543   120F             ;; value = (value * 16) + (hex_char - '0'); 
2544   120F FA FF FF      lea d, [bp + -1] ; $value
2545   1212 DA            push d
2546   1213 FA FF FF      lea d, [bp + -1] ; $value
2547   1216 2A            mov b, [d]
2548   1217             ; START FACTORS
2549   1217 D7            push a
2550   1218 11            mov a, b
2551   1219 26 10 00      mov b, $10
2552   121C AC            mul a, b ; *
2553   121D 11            mov a, b
2554   121E 27            mov b, a
2555   121F E4            pop a
2556   1220             ; END FACTORS
2557   1220             ; START TERMS
2558   1220 D7            push a
2559   1221 11            mov a, b
2560   1222 FA FC FF      lea d, [bp + -4] ; $hex_char
2561   1225 32            mov bl, [d]
2562   1226 A7 00         mov bh, 0
2563   1228             ; START TERMS
2564   1228 D7            push a
2565   1229 11            mov a, b
2566   122A 26 30 00      mov b, $30
2567   122D 60            sub a, b
2568   122E 27            mov b, a
2569   122F E4            pop a
2570   1230             ; END TERMS
2571   1230 56            add b, a
2572   1231 E4            pop a
2573   1232             ; END TERMS
2574   1232 E7            pop d
2575   1233 FD 43         mov [d], b
2576   1235             _if31_exit:
2577   1235             _if30_exit:
2578   1235             _for29_update:
2579   1235 FA FD FF      lea d, [bp + -3] ; $i
2580   1238 2A            mov b, [d]
2581   1239 D8            push b
2582   123A FD 77         inc b
2583   123C FA FD FF      lea d, [bp + -3] ; $i
2584   123F FD 43         mov [d], b
2585   1241 E5            pop b
2586   1242 0A 32 11      jmp _for29_cond
2587   1245             _for29_exit:
2588   1245             ;; return value; 
2589   1245 FA FF FF      lea d, [bp + -1] ; $value
2590   1248 2A            mov b, [d]
2591   1249 F9            leave
2592   124A 09            ret
2593   124B             
2594   124B             gets:
2595   124B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2596   124E             
2597   124E             ; --- BEGIN INLINE ASM BLOCK
2598   124E FA 05 00      lea d, [bp + 5] ; $s
2599   1251 15            mov a, [d]
2600   1252 3C            mov d, a
2601   1253 07 EE 1A      call _gets
2602   1256             ; --- END INLINE ASM BLOCK
2603   1256             
2604   1256             ;; return strlen(s); 
2605   1256 FA 05 00      lea d, [bp + 5] ; $s
2606   1259 2A            mov b, [d]
2607   125A FD AB         swp b
2608   125C D8            push b
2609   125D 07 0D 0A      call strlen
2610   1260 51 02 00      add sp, 2
2611   1263 F9            leave
2612   1264 09            ret
2613   1265             
2614   1265             print_signed:
2615   1265 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2616   1268             ; $digits 
2617   1268             ; $i 
2618   1268 10 00 00      mov a, $0
2619   126B 45 FA FF      mov [bp + -6], a
2620   126E 52 07 00      sub sp, 7
2621   1271             ;; if (num < 0) { 
2622   1271             _if32_cond:
2623   1271 FA 05 00      lea d, [bp + 5] ; $num
2624   1274 2A            mov b, [d]
2625   1275             ; START RELATIONAL
2626   1275 D7            push a
2627   1276 11            mov a, b
2628   1277 26 00 00      mov b, $0
2629   127A B0            cmp a, b
2630   127B FD 73         slt ; < (signed)
2631   127D E4            pop a
2632   127E             ; END RELATIONAL
2633   127E C0 00 00      cmp b, 0
2634   1281 C6 9E 12      je _if32_else
2635   1284             _if32_true:
2636   1284             ;; putchar('-'); 
2637   1284 26 2D 00      mov b, $2d
2638   1287 DD            push bl
2639   1288 07 56 19      call putchar
2640   128B 51 01 00      add sp, 1
2641   128E             ;; num = -num; 
2642   128E FA 05 00      lea d, [bp + 5] ; $num
2643   1291 DA            push d
2644   1292 FA 05 00      lea d, [bp + 5] ; $num
2645   1295 2A            mov b, [d]
2646   1296 FD 97         neg b
2647   1298 E7            pop d
2648   1299 FD 43         mov [d], b
2649   129B 0A C0 12      jmp _if32_exit
2650   129E             _if32_else:
2651   129E             ;; if (num == 0) { 
2652   129E             _if33_cond:
2653   129E FA 05 00      lea d, [bp + 5] ; $num
2654   12A1 2A            mov b, [d]
2655   12A2             ; START RELATIONAL
2656   12A2 D7            push a
2657   12A3 11            mov a, b
2658   12A4 26 00 00      mov b, $0
2659   12A7 B0            cmp a, b
2660   12A8 FD 71         seq ; ==
2661   12AA E4            pop a
2662   12AB             ; END RELATIONAL
2663   12AB C0 00 00      cmp b, 0
2664   12AE C6 C0 12      je _if33_exit
2665   12B1             _if33_true:
2666   12B1             ;; putchar('0'); 
2667   12B1 26 30 00      mov b, $30
2668   12B4 DD            push bl
2669   12B5 07 56 19      call putchar
2670   12B8 51 01 00      add sp, 1
2671   12BB             ;; return; 
2672   12BB F9            leave
2673   12BC 09            ret
2674   12BD 0A C0 12      jmp _if33_exit
2675   12C0             _if33_exit:
2676   12C0             _if32_exit:
2677   12C0             ;; while (num > 0) { 
2678   12C0             _while34_cond:
2679   12C0 FA 05 00      lea d, [bp + 5] ; $num
2680   12C3 2A            mov b, [d]
2681   12C4             ; START RELATIONAL
2682   12C4 D7            push a
2683   12C5 11            mov a, b
2684   12C6 26 00 00      mov b, $0
2685   12C9 B0            cmp a, b
2686   12CA FD 7F         sgt ; >
2687   12CC E4            pop a
2688   12CD             ; END RELATIONAL
2689   12CD C0 00 00      cmp b, 0
2690   12D0 C6 1A 13      je _while34_exit
2691   12D3             _while34_block:
2692   12D3             ;; digits[i] = '0' + (num % 10); 
2693   12D3 FA FC FF      lea d, [bp + -4] ; $digits
2694   12D6 D7            push a
2695   12D7 DA            push d
2696   12D8 FA FA FF      lea d, [bp + -6] ; $i
2697   12DB 2A            mov b, [d]
2698   12DC E7            pop d
2699   12DD 5A            add d, b
2700   12DE E4            pop a
2701   12DF DA            push d
2702   12E0 26 30 00      mov b, $30
2703   12E3             ; START TERMS
2704   12E3 D7            push a
2705   12E4 11            mov a, b
2706   12E5 FA 05 00      lea d, [bp + 5] ; $num
2707   12E8 2A            mov b, [d]
2708   12E9             ; START FACTORS
2709   12E9 D7            push a
2710   12EA 11            mov a, b
2711   12EB 26 0A 00      mov b, $a
2712   12EE AE            div a, b ; 
2713   12EF 11            mov a, b
2714   12F0 27            mov b, a
2715   12F1 E4            pop a
2716   12F2             ; END FACTORS
2717   12F2 56            add b, a
2718   12F3 E4            pop a
2719   12F4             ; END TERMS
2720   12F4 E7            pop d
2721   12F5 FD 3E         mov [d], bl
2722   12F7             ;; num = num / 10; 
2723   12F7 FA 05 00      lea d, [bp + 5] ; $num
2724   12FA DA            push d
2725   12FB FA 05 00      lea d, [bp + 5] ; $num
2726   12FE 2A            mov b, [d]
2727   12FF             ; START FACTORS
2728   12FF D7            push a
2729   1300 11            mov a, b
2730   1301 26 0A 00      mov b, $a
2731   1304 AE            div a, b
2732   1305 27            mov b, a
2733   1306 E4            pop a
2734   1307             ; END FACTORS
2735   1307 E7            pop d
2736   1308 FD 43         mov [d], b
2737   130A             ;; i++; 
2738   130A FA FA FF      lea d, [bp + -6] ; $i
2739   130D 2A            mov b, [d]
2740   130E D8            push b
2741   130F FD 77         inc b
2742   1311 FA FA FF      lea d, [bp + -6] ; $i
2743   1314 FD 43         mov [d], b
2744   1316 E5            pop b
2745   1317 0A C0 12      jmp _while34_cond
2746   131A             _while34_exit:
2747   131A             ;; while (i > 0) { 
2748   131A             _while35_cond:
2749   131A FA FA FF      lea d, [bp + -6] ; $i
2750   131D 2A            mov b, [d]
2751   131E             ; START RELATIONAL
2752   131E D7            push a
2753   131F 11            mov a, b
2754   1320 26 00 00      mov b, $0
2755   1323 B0            cmp a, b
2756   1324 FD 7F         sgt ; >
2757   1326 E4            pop a
2758   1327             ; END RELATIONAL
2759   1327 C0 00 00      cmp b, 0
2760   132A C6 53 13      je _while35_exit
2761   132D             _while35_block:
2762   132D             ;; i--; 
2763   132D FA FA FF      lea d, [bp + -6] ; $i
2764   1330 2A            mov b, [d]
2765   1331 D8            push b
2766   1332 FD 7D         dec b
2767   1334 FA FA FF      lea d, [bp + -6] ; $i
2768   1337 FD 43         mov [d], b
2769   1339 E5            pop b
2770   133A             ;; putchar(digits[i]); 
2771   133A FA FC FF      lea d, [bp + -4] ; $digits
2772   133D D7            push a
2773   133E DA            push d
2774   133F FA FA FF      lea d, [bp + -6] ; $i
2775   1342 2A            mov b, [d]
2776   1343 E7            pop d
2777   1344 5A            add d, b
2778   1345 E4            pop a
2779   1346 32            mov bl, [d]
2780   1347 A7 00         mov bh, 0
2781   1349 DD            push bl
2782   134A 07 56 19      call putchar
2783   134D 51 01 00      add sp, 1
2784   1350 0A 1A 13      jmp _while35_cond
2785   1353             _while35_exit:
2786   1353 F9            leave
2787   1354 09            ret
2788   1355             
2789   1355             print_signed_long:
2790   1355 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2791   1358             ; $digits 
2792   1358             ; $i 
2793   1358 10 00 00      mov a, $0
2794   135B 45 F5 FF      mov [bp + -11], a
2795   135E 52 0C 00      sub sp, 12
2796   1361             ;; if (num < 0) { 
2797   1361             _if36_cond:
2798   1361 FA 05 00      lea d, [bp + 5] ; $num
2799   1364 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2800   1367 FD 39         mov c, b ; And place it into C
2801   1369 2A            mov b, [d] ; Lower Word in B
2802   136A             ; START RELATIONAL
2803   136A D7            push a
2804   136B FD D8         push g
2805   136D 11            mov a, b
2806   136E FD 7A         mov g, c
2807   1370 26 00 00      mov b, $0
2808   1373 38 00 00      mov c, 0
2809   1376 FD AF 00 00   cmp32 ga, cb
2809   137A 00 00 00 00 
2809   137E 00 00 00 00 
2809   1382 00 00 00 00 
2809   1386 00 00 00 00 
2809   138A 00 00 00 00 
2809   138E 00 00 00 00 
2809   1392 00 00 00 00 
2809   1396 00 00 00 00 
2809   139A 00 00 00 00 
2809   139E 00 00 00 00 
2809   13A2 00 00 00 00 
2809   13A6 00 00 00 00 
2809   13AA 00 00 00 00 
2809   13AE 00 00 00 00 
2809   13B2 00 00 00 00 
2809   13B6 00 00 00 00 
2809   13BA 00 00 00 00 
2809   13BE 00 00 00 00 
2809   13C2 00 00 00 00 
2809   13C6 00 00 00 00 
2809   13CA 00 00 00 00 
2809   13CE 00 00 00 00 
2809   13D2 00 00 00 00 
2809   13D6 00 00 00 00 
2809   13DA 00 00 00 00 
2809   13DE 00 00 00 00 
2809   13E2 00 00 00 00 
2809   13E6 00 00 00 00 
2809   13EA 00 00 00 00 
2809   13EE 00 00 00 00 
2809   13F2 00 00 00 00 
2809   13F6 00 00 00 00 
2809   13FA 00 00 00 00 
2809   13FE 00 00 00 00 
2809   1402 00 00 00 00 
2809   1406 00 00 00 00 
2809   140A 00 00 00 00 
2809   140E 00 00 00 00 
2809   1412 00 00 00 00 
2809   1416 00 00 00 00 
2809   141A 00 00 00 00 
2809   141E 00 00 00 00 
2809   1422 00 00 00 00 
2809   1426 00 00 00 00 
2809   142A 00 00 00 00 
2809   142E 00 00 00 00 
2809   1432 00 00 00 00 
2809   1436 00 00 00 00 
2809   143A 00 00 00 00 
2809   143E 00 00 00 00 
2809   1442 00 00 00 00 
2809   1446 00 00 00 00 
2809   144A 00 00 00 00 
2809   144E 00 00 00 00 
2809   1452 00 00 00 00 
2809   1456 00 00 00 00 
2809   145A 00 00 00 00 
2809   145E 00 00 00 00 
2809   1462 00 00 00 00 
2809   1466 00 00 00 00 
2809   146A 00 00 00 00 
2809   146E 00 00 00 00 
2809   1472 00 00 00 00 
2809   1476 00 
2810   1477 FD 73         slt ; <
2811   1479 FD F1         pop g
2812   147B E4            pop a
2813   147C             ; END RELATIONAL
2814   147C C0 00 00      cmp b, 0
2815   147F C6 A6 14      je _if36_else
2816   1482             _if36_true:
2817   1482             ;; putchar('-'); 
2818   1482 26 2D 00      mov b, $2d
2819   1485 DD            push bl
2820   1486 07 56 19      call putchar
2821   1489 51 01 00      add sp, 1
2822   148C             ;; num = -num; 
2823   148C FA 05 00      lea d, [bp + 5] ; $num
2824   148F DA            push d
2825   1490 FA 05 00      lea d, [bp + 5] ; $num
2826   1493 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2827   1496 FD 39         mov c, b ; And place it into C
2828   1498 2A            mov b, [d] ; Lower Word in B
2829   1499 FD 97         neg b
2830   149B E7            pop d
2831   149C FD 43         mov [d], b
2832   149E 28            mov b, c
2833   149F FD 44 02 00   mov [d + 2], b
2834   14A3 0A D6 15      jmp _if36_exit
2835   14A6             _if36_else:
2836   14A6             ;; if (num == 0) { 
2837   14A6             _if37_cond:
2838   14A6 FA 05 00      lea d, [bp + 5] ; $num
2839   14A9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2840   14AC FD 39         mov c, b ; And place it into C
2841   14AE 2A            mov b, [d] ; Lower Word in B
2842   14AF             ; START RELATIONAL
2843   14AF D7            push a
2844   14B0 FD D8         push g
2845   14B2 11            mov a, b
2846   14B3 FD 7A         mov g, c
2847   14B5 26 00 00      mov b, $0
2848   14B8 38 00 00      mov c, 0
2849   14BB FD AF 00 00   cmp32 ga, cb
2849   14BF 00 00 00 00 
2849   14C3 00 00 00 00 
2849   14C7 00 00 00 00 
2849   14CB 00 00 00 00 
2849   14CF 00 00 00 00 
2849   14D3 00 00 00 00 
2849   14D7 00 00 00 00 
2849   14DB 00 00 00 00 
2849   14DF 00 00 00 00 
2849   14E3 00 00 00 00 
2849   14E7 00 00 00 00 
2849   14EB 00 00 00 00 
2849   14EF 00 00 00 00 
2849   14F3 00 00 00 00 
2849   14F7 00 00 00 00 
2849   14FB 00 00 00 00 
2849   14FF 00 00 00 00 
2849   1503 00 00 00 00 
2849   1507 00 00 00 00 
2849   150B 00 00 00 00 
2849   150F 00 00 00 00 
2849   1513 00 00 00 00 
2849   1517 00 00 00 00 
2849   151B 00 00 00 00 
2849   151F 00 00 00 00 
2849   1523 00 00 00 00 
2849   1527 00 00 00 00 
2849   152B 00 00 00 00 
2849   152F 00 00 00 00 
2849   1533 00 00 00 00 
2849   1537 00 00 00 00 
2849   153B 00 00 00 00 
2849   153F 00 00 00 00 
2849   1543 00 00 00 00 
2849   1547 00 00 00 00 
2849   154B 00 00 00 00 
2849   154F 00 00 00 00 
2849   1553 00 00 00 00 
2849   1557 00 00 00 00 
2849   155B 00 00 00 00 
2849   155F 00 00 00 00 
2849   1563 00 00 00 00 
2849   1567 00 00 00 00 
2849   156B 00 00 00 00 
2849   156F 00 00 00 00 
2849   1573 00 00 00 00 
2849   1577 00 00 00 00 
2849   157B 00 00 00 00 
2849   157F 00 00 00 00 
2849   1583 00 00 00 00 
2849   1587 00 00 00 00 
2849   158B 00 00 00 00 
2849   158F 00 00 00 00 
2849   1593 00 00 00 00 
2849   1597 00 00 00 00 
2849   159B 00 00 00 00 
2849   159F 00 00 00 00 
2849   15A3 00 00 00 00 
2849   15A7 00 00 00 00 
2849   15AB 00 00 00 00 
2849   15AF 00 00 00 00 
2849   15B3 00 00 00 00 
2849   15B7 00 00 00 00 
2849   15BB 00 
2850   15BC FD 71         seq ; ==
2851   15BE FD F1         pop g
2852   15C0 E4            pop a
2853   15C1             ; END RELATIONAL
2854   15C1 C0 00 00      cmp b, 0
2855   15C4 C6 D6 15      je _if37_exit
2856   15C7             _if37_true:
2857   15C7             ;; putchar('0'); 
2858   15C7 26 30 00      mov b, $30
2859   15CA DD            push bl
2860   15CB 07 56 19      call putchar
2861   15CE 51 01 00      add sp, 1
2862   15D1             ;; return; 
2863   15D1 F9            leave
2864   15D2 09            ret
2865   15D3 0A D6 15      jmp _if37_exit
2866   15D6             _if37_exit:
2867   15D6             _if36_exit:
2868   15D6             ;; while (num > 0) { 
2869   15D6             _while38_cond:
2870   15D6 FA 05 00      lea d, [bp + 5] ; $num
2871   15D9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2872   15DC FD 39         mov c, b ; And place it into C
2873   15DE 2A            mov b, [d] ; Lower Word in B
2874   15DF             ; START RELATIONAL
2875   15DF D7            push a
2876   15E0 FD D8         push g
2877   15E2 11            mov a, b
2878   15E3 FD 7A         mov g, c
2879   15E5 26 00 00      mov b, $0
2880   15E8 38 00 00      mov c, 0
2881   15EB FD 7F         sgt
2882   15ED FD F1         pop g
2883   15EF E4            pop a
2884   15F0             ; END RELATIONAL
2885   15F0 C0 00 00      cmp b, 0
2886   15F3 C6 53 16      je _while38_exit
2887   15F6             _while38_block:
2888   15F6             ;; digits[i] = '0' + (num % 10); 
2889   15F6 FA F7 FF      lea d, [bp + -9] ; $digits
2890   15F9 D7            push a
2891   15FA DA            push d
2892   15FB FA F5 FF      lea d, [bp + -11] ; $i
2893   15FE 2A            mov b, [d]
2894   15FF E7            pop d
2895   1600 5A            add d, b
2896   1601 E4            pop a
2897   1602 DA            push d
2898   1603 26 30 00      mov b, $30
2899   1606             ; START TERMS
2900   1606 D7            push a
2901   1607 11            mov a, b
2902   1608 FA 05 00      lea d, [bp + 5] ; $num
2903   160B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2904   160E FD 39         mov c, b ; And place it into C
2905   1610 2A            mov b, [d] ; Lower Word in B
2906   1611             ; START FACTORS
2907   1611 D7            push a
2908   1612 11            mov a, b
2909   1613 26 0A 00      mov b, $a
2910   1616 AE            div a, b ; 
2911   1617 11            mov a, b
2912   1618 27            mov b, a
2913   1619 E4            pop a
2914   161A             ; END FACTORS
2915   161A 54            add a, b
2916   161B D7            push a
2917   161C FD 12         mov a, g
2918   161E 28            mov b, c
2919   161F 5C            adc a, b
2920   1620 39            mov c, a
2921   1621 E5            pop b
2922   1622 E4            pop a
2923   1623             ; END TERMS
2924   1623 E7            pop d
2925   1624 FD 3E         mov [d], bl
2926   1626             ;; num = num / 10; 
2927   1626 FA 05 00      lea d, [bp + 5] ; $num
2928   1629 DA            push d
2929   162A FA 05 00      lea d, [bp + 5] ; $num
2930   162D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2931   1630 FD 39         mov c, b ; And place it into C
2932   1632 2A            mov b, [d] ; Lower Word in B
2933   1633             ; START FACTORS
2934   1633 D7            push a
2935   1634 11            mov a, b
2936   1635 26 0A 00      mov b, $a
2937   1638 AE            div a, b
2938   1639 27            mov b, a
2939   163A E4            pop a
2940   163B             ; END FACTORS
2941   163B E7            pop d
2942   163C FD 43         mov [d], b
2943   163E 28            mov b, c
2944   163F FD 44 02 00   mov [d + 2], b
2945   1643             ;; i++; 
2946   1643 FA F5 FF      lea d, [bp + -11] ; $i
2947   1646 2A            mov b, [d]
2948   1647 D8            push b
2949   1648 FD 77         inc b
2950   164A FA F5 FF      lea d, [bp + -11] ; $i
2951   164D FD 43         mov [d], b
2952   164F E5            pop b
2953   1650 0A D6 15      jmp _while38_cond
2954   1653             _while38_exit:
2955   1653             ;; while (i > 0) { 
2956   1653             _while39_cond:
2957   1653 FA F5 FF      lea d, [bp + -11] ; $i
2958   1656 2A            mov b, [d]
2959   1657             ; START RELATIONAL
2960   1657 D7            push a
2961   1658 11            mov a, b
2962   1659 26 00 00      mov b, $0
2963   165C B0            cmp a, b
2964   165D FD 7F         sgt ; >
2965   165F E4            pop a
2966   1660             ; END RELATIONAL
2967   1660 C0 00 00      cmp b, 0
2968   1663 C6 8C 16      je _while39_exit
2969   1666             _while39_block:
2970   1666             ;; i--; 
2971   1666 FA F5 FF      lea d, [bp + -11] ; $i
2972   1669 2A            mov b, [d]
2973   166A D8            push b
2974   166B FD 7D         dec b
2975   166D FA F5 FF      lea d, [bp + -11] ; $i
2976   1670 FD 43         mov [d], b
2977   1672 E5            pop b
2978   1673             ;; putchar(digits[i]); 
2979   1673 FA F7 FF      lea d, [bp + -9] ; $digits
2980   1676 D7            push a
2981   1677 DA            push d
2982   1678 FA F5 FF      lea d, [bp + -11] ; $i
2983   167B 2A            mov b, [d]
2984   167C E7            pop d
2985   167D 5A            add d, b
2986   167E E4            pop a
2987   167F 32            mov bl, [d]
2988   1680 A7 00         mov bh, 0
2989   1682 DD            push bl
2990   1683 07 56 19      call putchar
2991   1686 51 01 00      add sp, 1
2992   1689 0A 53 16      jmp _while39_cond
2993   168C             _while39_exit:
2994   168C F9            leave
2995   168D 09            ret
2996   168E             
2997   168E             print_unsigned_long:
2998   168E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2999   1691             ; $digits 
3000   1691             ; $i 
3001   1691 52 0C 00      sub sp, 12
3002   1694             ;; i = 0; 
3003   1694 FA F5 FF      lea d, [bp + -11] ; $i
3004   1697 DA            push d
3005   1698 26 00 00      mov b, $0
3006   169B E7            pop d
3007   169C FD 43         mov [d], b
3008   169E             ;; if(num == 0){ 
3009   169E             _if40_cond:
3010   169E FA 05 00      lea d, [bp + 5] ; $num
3011   16A1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3012   16A4 FD 39         mov c, b ; And place it into C
3013   16A6 2A            mov b, [d] ; Lower Word in B
3014   16A7             ; START RELATIONAL
3015   16A7 D7            push a
3016   16A8 FD D8         push g
3017   16AA 11            mov a, b
3018   16AB FD 7A         mov g, c
3019   16AD 26 00 00      mov b, $0
3020   16B0 38 00 00      mov c, 0
3021   16B3 FD AF 00 00   cmp32 ga, cb
3021   16B7 00 00 00 00 
3021   16BB 00 00 00 00 
3021   16BF 00 00 00 00 
3021   16C3 00 00 00 00 
3021   16C7 00 00 00 00 
3021   16CB 00 00 00 00 
3021   16CF 00 00 00 00 
3021   16D3 00 00 00 00 
3021   16D7 00 00 00 00 
3021   16DB 00 00 00 00 
3021   16DF 00 00 00 00 
3021   16E3 00 00 00 00 
3021   16E7 00 00 00 00 
3021   16EB 00 00 00 00 
3021   16EF 00 00 00 00 
3021   16F3 00 00 00 00 
3021   16F7 00 00 00 00 
3021   16FB 00 00 00 00 
3021   16FF 00 00 00 00 
3021   1703 00 00 00 00 
3021   1707 00 00 00 00 
3021   170B 00 00 00 00 
3021   170F 00 00 00 00 
3021   1713 00 00 00 00 
3021   1717 00 00 00 00 
3021   171B 00 00 00 00 
3021   171F 00 00 00 00 
3021   1723 00 00 00 00 
3021   1727 00 00 00 00 
3021   172B 00 00 00 00 
3021   172F 00 00 00 00 
3021   1733 00 00 00 00 
3021   1737 00 00 00 00 
3021   173B 00 00 00 00 
3021   173F 00 00 00 00 
3021   1743 00 00 00 00 
3021   1747 00 00 00 00 
3021   174B 00 00 00 00 
3021   174F 00 00 00 00 
3021   1753 00 00 00 00 
3021   1757 00 00 00 00 
3021   175B 00 00 00 00 
3021   175F 00 00 00 00 
3021   1763 00 00 00 00 
3021   1767 00 00 00 00 
3021   176B 00 00 00 00 
3021   176F 00 00 00 00 
3021   1773 00 00 00 00 
3021   1777 00 00 00 00 
3021   177B 00 00 00 00 
3021   177F 00 00 00 00 
3021   1783 00 00 00 00 
3021   1787 00 00 00 00 
3021   178B 00 00 00 00 
3021   178F 00 00 00 00 
3021   1793 00 00 00 00 
3021   1797 00 00 00 00 
3021   179B 00 00 00 00 
3021   179F 00 00 00 00 
3021   17A3 00 00 00 00 
3021   17A7 00 00 00 00 
3021   17AB 00 00 00 00 
3021   17AF 00 00 00 00 
3021   17B3 00 
3022   17B4 FD 71         seq ; ==
3023   17B6 FD F1         pop g
3024   17B8 E4            pop a
3025   17B9             ; END RELATIONAL
3026   17B9 C0 00 00      cmp b, 0
3027   17BC C6 CE 17      je _if40_exit
3028   17BF             _if40_true:
3029   17BF             ;; putchar('0'); 
3030   17BF 26 30 00      mov b, $30
3031   17C2 DD            push bl
3032   17C3 07 56 19      call putchar
3033   17C6 51 01 00      add sp, 1
3034   17C9             ;; return; 
3035   17C9 F9            leave
3036   17CA 09            ret
3037   17CB 0A CE 17      jmp _if40_exit
3038   17CE             _if40_exit:
3039   17CE             ;; while (num > 0) { 
3040   17CE             _while41_cond:
3041   17CE FA 05 00      lea d, [bp + 5] ; $num
3042   17D1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3043   17D4 FD 39         mov c, b ; And place it into C
3044   17D6 2A            mov b, [d] ; Lower Word in B
3045   17D7             ; START RELATIONAL
3046   17D7 D7            push a
3047   17D8 FD D8         push g
3048   17DA 11            mov a, b
3049   17DB FD 7A         mov g, c
3050   17DD 26 00 00      mov b, $0
3051   17E0 38 00 00      mov c, 0
3052   17E3 FD 81         sgu
3053   17E5 FD F1         pop g
3054   17E7 E4            pop a
3055   17E8             ; END RELATIONAL
3056   17E8 C0 00 00      cmp b, 0
3057   17EB C6 4B 18      je _while41_exit
3058   17EE             _while41_block:
3059   17EE             ;; digits[i] = '0' + (num % 10); 
3060   17EE FA F7 FF      lea d, [bp + -9] ; $digits
3061   17F1 D7            push a
3062   17F2 DA            push d
3063   17F3 FA F5 FF      lea d, [bp + -11] ; $i
3064   17F6 2A            mov b, [d]
3065   17F7 E7            pop d
3066   17F8 5A            add d, b
3067   17F9 E4            pop a
3068   17FA DA            push d
3069   17FB 26 30 00      mov b, $30
3070   17FE             ; START TERMS
3071   17FE D7            push a
3072   17FF 11            mov a, b
3073   1800 FA 05 00      lea d, [bp + 5] ; $num
3074   1803 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3075   1806 FD 39         mov c, b ; And place it into C
3076   1808 2A            mov b, [d] ; Lower Word in B
3077   1809             ; START FACTORS
3078   1809 D7            push a
3079   180A 11            mov a, b
3080   180B 26 0A 00      mov b, $a
3081   180E AE            div a, b ; 
3082   180F 11            mov a, b
3083   1810 27            mov b, a
3084   1811 E4            pop a
3085   1812             ; END FACTORS
3086   1812 54            add a, b
3087   1813 D7            push a
3088   1814 FD 12         mov a, g
3089   1816 28            mov b, c
3090   1817 5C            adc a, b
3091   1818 39            mov c, a
3092   1819 E5            pop b
3093   181A E4            pop a
3094   181B             ; END TERMS
3095   181B E7            pop d
3096   181C FD 3E         mov [d], bl
3097   181E             ;; num = num / 10; 
3098   181E FA 05 00      lea d, [bp + 5] ; $num
3099   1821 DA            push d
3100   1822 FA 05 00      lea d, [bp + 5] ; $num
3101   1825 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3102   1828 FD 39         mov c, b ; And place it into C
3103   182A 2A            mov b, [d] ; Lower Word in B
3104   182B             ; START FACTORS
3105   182B D7            push a
3106   182C 11            mov a, b
3107   182D 26 0A 00      mov b, $a
3108   1830 AE            div a, b
3109   1831 27            mov b, a
3110   1832 E4            pop a
3111   1833             ; END FACTORS
3112   1833 E7            pop d
3113   1834 FD 43         mov [d], b
3114   1836 28            mov b, c
3115   1837 FD 44 02 00   mov [d + 2], b
3116   183B             ;; i++; 
3117   183B FA F5 FF      lea d, [bp + -11] ; $i
3118   183E 2A            mov b, [d]
3119   183F D8            push b
3120   1840 FD 77         inc b
3121   1842 FA F5 FF      lea d, [bp + -11] ; $i
3122   1845 FD 43         mov [d], b
3123   1847 E5            pop b
3124   1848 0A CE 17      jmp _while41_cond
3125   184B             _while41_exit:
3126   184B             ;; while (i > 0) { 
3127   184B             _while42_cond:
3128   184B FA F5 FF      lea d, [bp + -11] ; $i
3129   184E 2A            mov b, [d]
3130   184F             ; START RELATIONAL
3131   184F D7            push a
3132   1850 11            mov a, b
3133   1851 26 00 00      mov b, $0
3134   1854 B0            cmp a, b
3135   1855 FD 7F         sgt ; >
3136   1857 E4            pop a
3137   1858             ; END RELATIONAL
3138   1858 C0 00 00      cmp b, 0
3139   185B C6 84 18      je _while42_exit
3140   185E             _while42_block:
3141   185E             ;; i--; 
3142   185E FA F5 FF      lea d, [bp + -11] ; $i
3143   1861 2A            mov b, [d]
3144   1862 D8            push b
3145   1863 FD 7D         dec b
3146   1865 FA F5 FF      lea d, [bp + -11] ; $i
3147   1868 FD 43         mov [d], b
3148   186A E5            pop b
3149   186B             ;; putchar(digits[i]); 
3150   186B FA F7 FF      lea d, [bp + -9] ; $digits
3151   186E D7            push a
3152   186F DA            push d
3153   1870 FA F5 FF      lea d, [bp + -11] ; $i
3154   1873 2A            mov b, [d]
3155   1874 E7            pop d
3156   1875 5A            add d, b
3157   1876 E4            pop a
3158   1877 32            mov bl, [d]
3159   1878 A7 00         mov bh, 0
3160   187A DD            push bl
3161   187B 07 56 19      call putchar
3162   187E 51 01 00      add sp, 1
3163   1881 0A 4B 18      jmp _while42_cond
3164   1884             _while42_exit:
3165   1884 F9            leave
3166   1885 09            ret
3167   1886             
3168   1886             print_unsigned:
3169   1886 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3170   1889             ; $digits 
3171   1889             ; $i 
3172   1889 52 07 00      sub sp, 7
3173   188C             ;; i = 0; 
3174   188C FA FA FF      lea d, [bp + -6] ; $i
3175   188F DA            push d
3176   1890 26 00 00      mov b, $0
3177   1893 E7            pop d
3178   1894 FD 43         mov [d], b
3179   1896             ;; if(num == 0){ 
3180   1896             _if43_cond:
3181   1896 FA 05 00      lea d, [bp + 5] ; $num
3182   1899 2A            mov b, [d]
3183   189A             ; START RELATIONAL
3184   189A D7            push a
3185   189B 11            mov a, b
3186   189C 26 00 00      mov b, $0
3187   189F B0            cmp a, b
3188   18A0 FD 71         seq ; ==
3189   18A2 E4            pop a
3190   18A3             ; END RELATIONAL
3191   18A3 C0 00 00      cmp b, 0
3192   18A6 C6 B8 18      je _if43_exit
3193   18A9             _if43_true:
3194   18A9             ;; putchar('0'); 
3195   18A9 26 30 00      mov b, $30
3196   18AC DD            push bl
3197   18AD 07 56 19      call putchar
3198   18B0 51 01 00      add sp, 1
3199   18B3             ;; return; 
3200   18B3 F9            leave
3201   18B4 09            ret
3202   18B5 0A B8 18      jmp _if43_exit
3203   18B8             _if43_exit:
3204   18B8             ;; while (num > 0) { 
3205   18B8             _while44_cond:
3206   18B8 FA 05 00      lea d, [bp + 5] ; $num
3207   18BB 2A            mov b, [d]
3208   18BC             ; START RELATIONAL
3209   18BC D7            push a
3210   18BD 11            mov a, b
3211   18BE 26 00 00      mov b, $0
3212   18C1 B0            cmp a, b
3213   18C2 FD 81         sgu ; > (unsigned)
3214   18C4 E4            pop a
3215   18C5             ; END RELATIONAL
3216   18C5 C0 00 00      cmp b, 0
3217   18C8 C6 12 19      je _while44_exit
3218   18CB             _while44_block:
3219   18CB             ;; digits[i] = '0' + (num % 10); 
3220   18CB FA FC FF      lea d, [bp + -4] ; $digits
3221   18CE D7            push a
3222   18CF DA            push d
3223   18D0 FA FA FF      lea d, [bp + -6] ; $i
3224   18D3 2A            mov b, [d]
3225   18D4 E7            pop d
3226   18D5 5A            add d, b
3227   18D6 E4            pop a
3228   18D7 DA            push d
3229   18D8 26 30 00      mov b, $30
3230   18DB             ; START TERMS
3231   18DB D7            push a
3232   18DC 11            mov a, b
3233   18DD FA 05 00      lea d, [bp + 5] ; $num
3234   18E0 2A            mov b, [d]
3235   18E1             ; START FACTORS
3236   18E1 D7            push a
3237   18E2 11            mov a, b
3238   18E3 26 0A 00      mov b, $a
3239   18E6 AE            div a, b ; 
3240   18E7 11            mov a, b
3241   18E8 27            mov b, a
3242   18E9 E4            pop a
3243   18EA             ; END FACTORS
3244   18EA 56            add b, a
3245   18EB E4            pop a
3246   18EC             ; END TERMS
3247   18EC E7            pop d
3248   18ED FD 3E         mov [d], bl
3249   18EF             ;; num = num / 10; 
3250   18EF FA 05 00      lea d, [bp + 5] ; $num
3251   18F2 DA            push d
3252   18F3 FA 05 00      lea d, [bp + 5] ; $num
3253   18F6 2A            mov b, [d]
3254   18F7             ; START FACTORS
3255   18F7 D7            push a
3256   18F8 11            mov a, b
3257   18F9 26 0A 00      mov b, $a
3258   18FC AE            div a, b
3259   18FD 27            mov b, a
3260   18FE E4            pop a
3261   18FF             ; END FACTORS
3262   18FF E7            pop d
3263   1900 FD 43         mov [d], b
3264   1902             ;; i++; 
3265   1902 FA FA FF      lea d, [bp + -6] ; $i
3266   1905 2A            mov b, [d]
3267   1906 D8            push b
3268   1907 FD 77         inc b
3269   1909 FA FA FF      lea d, [bp + -6] ; $i
3270   190C FD 43         mov [d], b
3271   190E E5            pop b
3272   190F 0A B8 18      jmp _while44_cond
3273   1912             _while44_exit:
3274   1912             ;; while (i > 0) { 
3275   1912             _while45_cond:
3276   1912 FA FA FF      lea d, [bp + -6] ; $i
3277   1915 2A            mov b, [d]
3278   1916             ; START RELATIONAL
3279   1916 D7            push a
3280   1917 11            mov a, b
3281   1918 26 00 00      mov b, $0
3282   191B B0            cmp a, b
3283   191C FD 7F         sgt ; >
3284   191E E4            pop a
3285   191F             ; END RELATIONAL
3286   191F C0 00 00      cmp b, 0
3287   1922 C6 4B 19      je _while45_exit
3288   1925             _while45_block:
3289   1925             ;; i--; 
3290   1925 FA FA FF      lea d, [bp + -6] ; $i
3291   1928 2A            mov b, [d]
3292   1929 D8            push b
3293   192A FD 7D         dec b
3294   192C FA FA FF      lea d, [bp + -6] ; $i
3295   192F FD 43         mov [d], b
3296   1931 E5            pop b
3297   1932             ;; putchar(digits[i]); 
3298   1932 FA FC FF      lea d, [bp + -4] ; $digits
3299   1935 D7            push a
3300   1936 DA            push d
3301   1937 FA FA FF      lea d, [bp + -6] ; $i
3302   193A 2A            mov b, [d]
3303   193B E7            pop d
3304   193C 5A            add d, b
3305   193D E4            pop a
3306   193E 32            mov bl, [d]
3307   193F A7 00         mov bh, 0
3308   1941 DD            push bl
3309   1942 07 56 19      call putchar
3310   1945 51 01 00      add sp, 1
3311   1948 0A 12 19      jmp _while45_cond
3312   194B             _while45_exit:
3313   194B F9            leave
3314   194C 09            ret
3315   194D             
3316   194D             date:
3317   194D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3318   1950             
3319   1950             ; --- BEGIN INLINE ASM BLOCK
3320   1950 19 00         mov al, 0 
3321   1952 05 07         syscall sys_datetime
3322   1954             ; --- END INLINE ASM BLOCK
3323   1954             
3324   1954 F9            leave
3325   1955 09            ret
3326   1956             
3327   1956             putchar:
3328   1956 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3329   1959             
3330   1959             ; --- BEGIN INLINE ASM BLOCK
3331   1959 FA 05 00      lea d, [bp + 5] ; $c
3332   195C 1E            mov al, [d]
3333   195D 23            mov ah, al
3334   195E 07 E7 1A      call _putchar
3335   1961             ; --- END INLINE ASM BLOCK
3336   1961             
3337   1961 F9            leave
3338   1962 09            ret
3339   1963             
3340   1963             getchar:
3341   1963 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3342   1966             ; $c 
3343   1966 52 01 00      sub sp, 1
3344   1969             
3345   1969             ; --- BEGIN INLINE ASM BLOCK
3346   1969 07 E0 1A      call getch
3347   196C 1A            mov al, ah
3348   196D FA 00 00      lea d, [bp + 0] ; $c
3349   1970 3E            mov [d], al
3350   1971             ; --- END INLINE ASM BLOCK
3351   1971             
3352   1971             ;; return c; 
3353   1971 FA 00 00      lea d, [bp + 0] ; $c
3354   1974 32            mov bl, [d]
3355   1975 A7 00         mov bh, 0
3356   1977 F9            leave
3357   1978 09            ret
3358   1979             
3359   1979             scann:
3360   1979 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3361   197C             ; $m 
3362   197C 52 02 00      sub sp, 2
3363   197F             
3364   197F             ; --- BEGIN INLINE ASM BLOCK
3365   197F 07 2B 1D      call scan_u16d
3366   1982 FA FF FF      lea d, [bp + -1] ; $m
3367   1985 43            mov [d], a
3368   1986             ; --- END INLINE ASM BLOCK
3369   1986             
3370   1986             ;; return m; 
3371   1986 FA FF FF      lea d, [bp + -1] ; $m
3372   1989 2A            mov b, [d]
3373   198A F9            leave
3374   198B 09            ret
3375   198C             
3376   198C             puts:
3377   198C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3378   198F             
3379   198F             ; --- BEGIN INLINE ASM BLOCK
3380   198F FA 05 00      lea d, [bp + 5] ; $s
3381   1992 15            mov a, [d]
3382   1993 3C            mov d, a
3383   1994 07 31 1C      call _puts
3384   1997 10 00 0A      mov a, $0A00
3385   199A 05 03         syscall sys_io
3386   199C             ; --- END INLINE ASM BLOCK
3387   199C             
3388   199C F9            leave
3389   199D 09            ret
3390   199E             
3391   199E             print:
3392   199E F8 00 00      enter 0 ; (push bp; mov bp, sp)
3393   19A1             
3394   19A1             ; --- BEGIN INLINE ASM BLOCK
3395   19A1 FA 05 00      lea d, [bp + 5] ; $s
3396   19A4 FD 2A         mov d, [d]
3397   19A6 07 31 1C      call _puts
3398   19A9             ; --- END INLINE ASM BLOCK
3399   19A9             
3400   19A9 F9            leave
3401   19AA 09            ret
3402   19AB             
3403   19AB             getparam:
3404   19AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
3405   19AE             ; $data 
3406   19AE 52 01 00      sub sp, 1
3407   19B1             
3408   19B1             ; --- BEGIN INLINE ASM BLOCK
3409   19B1 19 04         mov al, 4
3410   19B3 FA 05 00      lea d, [bp + 5] ; $address
3411   19B6 FD 2A         mov d, [d]
3412   19B8 05 0C         syscall sys_system
3413   19BA FA 00 00      lea d, [bp + 0] ; $data
3414   19BD FD 3E         mov [d], bl
3415   19BF             ; --- END INLINE ASM BLOCK
3416   19BF             
3417   19BF             ;; return data; 
3418   19BF FA 00 00      lea d, [bp + 0] ; $data
3419   19C2 32            mov bl, [d]
3420   19C3 A7 00         mov bh, 0
3421   19C5 F9            leave
3422   19C6 09            ret
3423   19C7             
3424   19C7             clear:
3425   19C7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3426   19CA             ;; print("\033[2J\033[H"); 
3427   19CA 26 19 33      mov b, _s3 ; "\033[2J\033[H"
3428   19CD FD AB         swp b
3429   19CF D8            push b
3430   19D0 07 9E 19      call print
3431   19D3 51 02 00      add sp, 2
3432   19D6 F9            leave
3433   19D7 09            ret
3434   19D8             
3435   19D8             abs:
3436   19D8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3437   19DB             ;; return i < 0 ? -i : i; 
3438   19DB             _ternary46_cond:
3439   19DB FA 05 00      lea d, [bp + 5] ; $i
3440   19DE 2A            mov b, [d]
3441   19DF             ; START RELATIONAL
3442   19DF D7            push a
3443   19E0 11            mov a, b
3444   19E1 26 00 00      mov b, $0
3445   19E4 B0            cmp a, b
3446   19E5 FD 73         slt ; < (signed)
3447   19E7 E4            pop a
3448   19E8             ; END RELATIONAL
3449   19E8 C0 00 00      cmp b, 0
3450   19EB C6 F7 19      je _ternary46_false
3451   19EE             _ternary46_true:
3452   19EE FA 05 00      lea d, [bp + 5] ; $i
3453   19F1 2A            mov b, [d]
3454   19F2 FD 97         neg b
3455   19F4 0A FB 19      jmp _ternary46_exit
3456   19F7             _ternary46_false:
3457   19F7 FA 05 00      lea d, [bp + 5] ; $i
3458   19FA 2A            mov b, [d]
3459   19FB             _ternary46_exit:
3460   19FB F9            leave
3461   19FC 09            ret
3462   19FD             
3463   19FD             include_stdio_asm:
3464   19FD F8 00 00      enter 0 ; (push bp; mov bp, sp)
3465   1A00             
3466   1A00             ; --- BEGIN INLINE ASM BLOCK
3467   1A00             .include "lib/asm/stdio.asm"
0001+  1A00             ;-----------------------------------------------------------------------------
0002+  1A00             ; stdio.s
0003+  1A00             ;-----------------------------------------------------------------------------
0004+  1A00             .include "lib/asm/string.asm"
0001++ 1A00             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1A00             ; string.s
0003++ 1A00             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1A00             
0005++ 1A00             
0006++ 1A00             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1A00             ; _strrev
0008++ 1A00             ; reverse a string
0009++ 1A00             ; D = string address
0010++ 1A00             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1A00             ; 01234
0012++ 1A00             _strrev:
0013++ 1A00 4B          	pusha
0014++ 1A01 07 47 1A    	call _strlen	; length in C
0015++ 1A04 12          	mov a, c
0016++ 1A05 AF 01 00    	cmp a, 1
0017++ 1A08 D0 22 1A    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1A0B 7D          	dec a
0019++ 1A0C FD 4E       	mov si, d	; beginning of string
0020++ 1A0E FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1A10 59          	add d, a	; end of string
0022++ 1A11 12          	mov a, c
0023++ 1A12 FD 9B       	shr a		; divide by 2
0024++ 1A14 39          	mov c, a	; C now counts the steps
0025++ 1A15             _strrev_L0:
0026++ 1A15 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1A16 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1A17 3E          	mov [d], al	; store left char into right side
0029++ 1A18 1B          	mov al, bl
0030++ 1A19 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1A1A 7E          	dec c
0032++ 1A1B 7F          	dec d
0033++ 1A1C C2 00 00    	cmp c, 0
0034++ 1A1F C7 15 1A    	jne _strrev_L0
0035++ 1A22             _strrev_end:
0036++ 1A22 4C          	popa
0037++ 1A23 09          	ret
0038++ 1A24             	
0039++ 1A24             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1A24             ; _strchr
0041++ 1A24             ; search string in D for char in AL
0042++ 1A24             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1A24             _strchr:
0044++ 1A24             _strchr_L0:
0045++ 1A24 32          	mov bl, [d]
0046++ 1A25 C1 00       	cmp bl, 0
0047++ 1A27 C6 32 1A    	je _strchr_end
0048++ 1A2A BA          	cmp al, bl
0049++ 1A2B C6 32 1A    	je _strchr_end
0050++ 1A2E 79          	inc d
0051++ 1A2F 0A 24 1A    	jmp _strchr_L0
0052++ 1A32             _strchr_end:
0053++ 1A32 1B          	mov al, bl
0054++ 1A33 09          	ret
0055++ 1A34             
0056++ 1A34             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1A34             ; _strstr
0058++ 1A34             ; find sub-string
0059++ 1A34             ; str1 in SI
0060++ 1A34             ; str2 in DI
0061++ 1A34             ; SI points to end of source string
0062++ 1A34             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1A34             _strstr:
0064++ 1A34 DB          	push al
0065++ 1A35 DA          	push d
0066++ 1A36 E3          	push di
0067++ 1A37             _strstr_loop:
0068++ 1A37 F3          	cmpsb					; compare a byte of the strings
0069++ 1A38 C7 43 1A    	jne _strstr_ret
0070++ 1A3B FC 00 00    	lea d, [di + 0]
0071++ 1A3E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1A40 C7 37 1A    	jne _strstr_loop				; equal chars but not at end
0073++ 1A43             _strstr_ret:
0074++ 1A43 F0          	pop di
0075++ 1A44 E7          	pop d
0076++ 1A45 E8          	pop al
0077++ 1A46 09          	ret
0078++ 1A47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1A47             ; length of null terminated string
0080++ 1A47             ; result in C
0081++ 1A47             ; pointer in D
0082++ 1A47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1A47             _strlen:
0084++ 1A47 DA          	push d
0085++ 1A48 38 00 00    	mov c, 0
0086++ 1A4B             _strlen_L1:
0087++ 1A4B BD 00       	cmp byte [d], 0
0088++ 1A4D C6 55 1A    	je _strlen_ret
0089++ 1A50 79          	inc d
0090++ 1A51 78          	inc c
0091++ 1A52 0A 4B 1A    	jmp _strlen_L1
0092++ 1A55             _strlen_ret:
0093++ 1A55 E7          	pop d
0094++ 1A56 09          	ret
0095++ 1A57             
0096++ 1A57             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1A57             ; STRCMP
0098++ 1A57             ; compare two strings
0099++ 1A57             ; str1 in SI
0100++ 1A57             ; str2 in DI
0101++ 1A57             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1A57             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1A57             _strcmp:
0104++ 1A57 DB          	push al
0105++ 1A58 DA          	push d
0106++ 1A59 E3          	push di
0107++ 1A5A E2          	push si
0108++ 1A5B             _strcmp_loop:
0109++ 1A5B F3          	cmpsb					; compare a byte of the strings
0110++ 1A5C C7 67 1A    	jne _strcmp_ret
0111++ 1A5F FB FF FF    	lea d, [si +- 1]
0112++ 1A62 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1A64 C7 5B 1A    	jne _strcmp_loop				; equal chars but not at end
0114++ 1A67             _strcmp_ret:
0115++ 1A67 EF          	pop si
0116++ 1A68 F0          	pop di
0117++ 1A69 E7          	pop d
0118++ 1A6A E8          	pop al
0119++ 1A6B 09          	ret
0120++ 1A6C             
0121++ 1A6C             
0122++ 1A6C             ; STRCPY
0123++ 1A6C             ; copy null terminated string from SI to DI
0124++ 1A6C             ; source in SI
0125++ 1A6C             ; destination in DI
0126++ 1A6C             _strcpy:
0127++ 1A6C E2          	push si
0128++ 1A6D E3          	push di
0129++ 1A6E DB          	push al
0130++ 1A6F             _strcpy_L1:
0131++ 1A6F F6          	lodsb
0132++ 1A70 F7          	stosb
0133++ 1A71 B9 00       	cmp al, 0
0134++ 1A73 C7 6F 1A    	jne _strcpy_L1
0135++ 1A76             _strcpy_end:
0136++ 1A76 E8          	pop al
0137++ 1A77 F0          	pop di
0138++ 1A78 EF          	pop si
0139++ 1A79 09          	ret
0140++ 1A7A             
0141++ 1A7A             ; STRCAT
0142++ 1A7A             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1A7A             ; source in SI
0144++ 1A7A             ; destination in DI
0145++ 1A7A             _strcat:
0146++ 1A7A E2          	push si
0147++ 1A7B E3          	push di
0148++ 1A7C D7          	push a
0149++ 1A7D DA          	push d
0150++ 1A7E 50          	mov a, di
0151++ 1A7F 3C          	mov d, a
0152++ 1A80             _strcat_goto_end_L1:
0153++ 1A80 BD 00       	cmp byte[d], 0
0154++ 1A82 C6 89 1A    	je _strcat_start
0155++ 1A85 79          	inc d
0156++ 1A86 0A 80 1A    	jmp _strcat_goto_end_L1
0157++ 1A89             _strcat_start:
0158++ 1A89 FD 50       	mov di, d
0159++ 1A8B             _strcat_L1:
0160++ 1A8B F6          	lodsb
0161++ 1A8C F7          	stosb
0162++ 1A8D B9 00       	cmp al, 0
0163++ 1A8F C7 8B 1A    	jne _strcat_L1
0164++ 1A92             _strcat_end:
0165++ 1A92 E7          	pop d
0166++ 1A93 E4          	pop a
0167++ 1A94 F0          	pop di
0168++ 1A95 EF          	pop si
0169++ 1A96 09          	ret
0170++ 1A97             
0171++ 1A97             
0005+  1A97             
0006+  1A97             ;-----------------------------------------------------------------------------
0007+  1A97             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1A97             ; ASCII in BL
0009+  1A97             ; result in AL
0010+  1A97             ; ascii for F = 0100 0110
0011+  1A97             ; ascii for 9 = 0011 1001
0012+  1A97             ;-----------------------------------------------------------------------------
0013+  1A97             hex_ascii_encode:
0014+  1A97 1B            mov al, bl
0015+  1A98 93 40         test al, $40        ; test if letter or number
0016+  1A9A C7 A0 1A      jnz hex_letter
0017+  1A9D 87 0F         and al, $0F        ; get number
0018+  1A9F 09            ret
0019+  1AA0             hex_letter:
0020+  1AA0 87 0F         and al, $0F        ; get letter
0021+  1AA2 6A 09         add al, 9
0022+  1AA4 09            ret
0023+  1AA5             
0024+  1AA5             ;-----------------------------------------------------------------------------
0025+  1AA5             ; ATOI
0026+  1AA5             ; 2 letter hex string in B
0027+  1AA5             ; 8bit integer returned in AL
0028+  1AA5             ;-----------------------------------------------------------------------------
0029+  1AA5             _atoi:
0030+  1AA5 D8            push b
0031+  1AA6 07 97 1A      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1AA9 30            mov bl, bh
0033+  1AAA DB            push al          ; save a
0034+  1AAB 07 97 1A      call hex_ascii_encode
0035+  1AAE EA            pop bl  
0036+  1AAF FD 9E 04      shl al, 4
0037+  1AB2 8C            or al, bl
0038+  1AB3 E5            pop b
0039+  1AB4 09            ret  
0040+  1AB5             
0041+  1AB5             
0042+  1AB5             ;-----------------------------------------------------------------------------
0043+  1AB5             ; ITOA
0044+  1AB5             ; 8bit value in BL
0045+  1AB5             ; 2 byte ASCII result in A
0046+  1AB5             ;-----------------------------------------------------------------------------
0047+  1AB5             _itoa:
0048+  1AB5 DA            push d
0049+  1AB6 D8            push b
0050+  1AB7 A7 00         mov bh, 0
0051+  1AB9 FD A4 04      shr bl, 4  
0052+  1ABC 74            mov d, b
0053+  1ABD 1F 65 1D      mov al, [d + s_hex_digits]
0054+  1AC0 23            mov ah, al
0055+  1AC1               
0056+  1AC1 E5            pop b
0057+  1AC2 D8            push b
0058+  1AC3 A7 00         mov bh, 0
0059+  1AC5 FD 87 0F      and bl, $0F
0060+  1AC8 74            mov d, b
0061+  1AC9 1F 65 1D      mov al, [d + s_hex_digits]
0062+  1ACC E5            pop b
0063+  1ACD E7            pop d
0064+  1ACE 09            ret
0065+  1ACF             
0066+  1ACF             ;-----------------------------------------------------------------------------
0067+  1ACF             ; HEX STRING TO BINARY
0068+  1ACF             ; di = destination address
0069+  1ACF             ; si = source
0070+  1ACF             ;-----------------------------------------------------------------------------
0071+  1ACF             _hex_to_int:
0072+  1ACF             _hex_to_int_L1:
0073+  1ACF F6            lodsb          ; load from [SI] to AL
0074+  1AD0 B9 00         cmp al, 0        ; check if ASCII 0
0075+  1AD2 C6 DF 1A      jz _hex_to_int_ret
0076+  1AD5 36            mov bh, al
0077+  1AD6 F6            lodsb
0078+  1AD7 2F            mov bl, al
0079+  1AD8 07 A5 1A      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1ADB F7            stosb          ; store AL to [DI]
0081+  1ADC 0A CF 1A      jmp _hex_to_int_L1
0082+  1ADF             _hex_to_int_ret:
0083+  1ADF 09            ret    
0084+  1AE0             
0085+  1AE0             ;-----------------------------------------------------------------------------
0086+  1AE0             ; GETCHAR
0087+  1AE0             ; char in ah
0088+  1AE0             ;-----------------------------------------------------------------------------
0089+  1AE0             getch:
0090+  1AE0 DB            push al
0091+  1AE1             getch_retry:
0092+  1AE1 19 01         mov al, 1
0093+  1AE3 05 03         syscall sys_io      ; receive in AH
0094+  1AE5 E8            pop al
0095+  1AE6 09            ret
0096+  1AE7             
0097+  1AE7             ;-----------------------------------------------------------------------------
0098+  1AE7             ; PUTCHAR
0099+  1AE7             ; char in ah
0100+  1AE7             ;-----------------------------------------------------------------------------
0101+  1AE7             _putchar:
0102+  1AE7 D7            push a
0103+  1AE8 19 00         mov al, 0
0104+  1AEA 05 03         syscall sys_io      ; char in AH
0105+  1AEC E4            pop a
0106+  1AED 09            ret
0107+  1AEE             
0108+  1AEE             ;-----------------------------------------------------------------------------
0109+  1AEE             ;; INPUT A STRING
0110+  1AEE             ;; terminates with null
0111+  1AEE             ;; pointer in D
0112+  1AEE             ;-----------------------------------------------------------------------------
0113+  1AEE             _gets:
0114+  1AEE D7            push a
0115+  1AEF DA            push d
0116+  1AF0             _gets_loop:
0117+  1AF0 19 01         mov al, 1
0118+  1AF2 05 03         syscall sys_io      ; receive in AH
0119+  1AF4 B9 00         cmp al, 0        ; check error code (AL)
0120+  1AF6 C6 F0 1A      je _gets_loop      ; if no char received, retry
0121+  1AF9             
0122+  1AF9 76 1B         cmp ah, 27
0123+  1AFB C6 1C 1B      je _gets_ansi_esc
0124+  1AFE 76 0A         cmp ah, $0A        ; LF
0125+  1B00 C6 87 1B      je _gets_end
0126+  1B03 76 0D         cmp ah, $0D        ; CR
0127+  1B05 C6 87 1B      je _gets_end
0128+  1B08 76 5C         cmp ah, $5C        ; '\\'
0129+  1B0A C6 48 1B      je _gets_escape
0130+  1B0D               
0131+  1B0D 76 08         cmp ah, $08      ; check for backspace
0132+  1B0F C6 18 1B      je _gets_backspace
0133+  1B12             
0134+  1B12 1A            mov al, ah
0135+  1B13 3E            mov [d], al
0136+  1B14 79            inc d
0137+  1B15 0A F0 1A      jmp _gets_loop
0138+  1B18             _gets_backspace:
0139+  1B18 7F            dec d
0140+  1B19 0A F0 1A      jmp _gets_loop
0141+  1B1C             _gets_ansi_esc:
0142+  1B1C 19 01         mov al, 1
0143+  1B1E 05 03         syscall sys_io        ; receive in AH without echo
0144+  1B20 B9 00         cmp al, 0          ; check error code (AL)
0145+  1B22 C6 1C 1B      je _gets_ansi_esc    ; if no char received, retry
0146+  1B25 76 5B         cmp ah, '['
0147+  1B27 C7 F0 1A      jne _gets_loop
0148+  1B2A             _gets_ansi_esc_2:
0149+  1B2A 19 01         mov al, 1
0150+  1B2C 05 03         syscall sys_io          ; receive in AH without echo
0151+  1B2E B9 00         cmp al, 0            ; check error code (AL)
0152+  1B30 C6 2A 1B      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1B33 76 44         cmp ah, 'D'
0154+  1B35 C6 40 1B      je _gets_left_arrow
0155+  1B38 76 43         cmp ah, 'C'
0156+  1B3A C6 44 1B      je _gets_right_arrow
0157+  1B3D 0A F0 1A      jmp _gets_loop
0158+  1B40             _gets_left_arrow:
0159+  1B40 7F            dec d
0160+  1B41 0A F0 1A      jmp _gets_loop
0161+  1B44             _gets_right_arrow:
0162+  1B44 79            inc d
0163+  1B45 0A F0 1A      jmp _gets_loop
0164+  1B48             _gets_escape:
0165+  1B48 19 01         mov al, 1
0166+  1B4A 05 03         syscall sys_io      ; receive in AH
0167+  1B4C B9 00         cmp al, 0        ; check error code (AL)
0168+  1B4E C6 48 1B      je _gets_escape      ; if no char received, retry
0169+  1B51 76 6E         cmp ah, 'n'
0170+  1B53 C6 72 1B      je _gets_LF
0171+  1B56 76 72         cmp ah, 'r'
0172+  1B58 C6 79 1B      je _gets_CR
0173+  1B5B 76 30         cmp ah, '0'
0174+  1B5D C6 80 1B      je _gets_NULL
0175+  1B60 76 5C         cmp ah, $5C  ; '\'
0176+  1B62 C6 6B 1B      je _gets_slash
0177+  1B65 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1B66 3E            mov [d], al
0179+  1B67 79            inc d
0180+  1B68 0A F0 1A      jmp _gets_loop
0181+  1B6B             _gets_slash:
0182+  1B6B 19 5C         mov al, $5C
0183+  1B6D 3E            mov [d], al
0184+  1B6E 79            inc d
0185+  1B6F 0A F0 1A      jmp _gets_loop
0186+  1B72             _gets_LF:
0187+  1B72 19 0A         mov al, $0A
0188+  1B74 3E            mov [d], al
0189+  1B75 79            inc d
0190+  1B76 0A F0 1A      jmp _gets_loop
0191+  1B79             _gets_CR:
0192+  1B79 19 0D         mov al, $0D
0193+  1B7B 3E            mov [d], al
0194+  1B7C 79            inc d
0195+  1B7D 0A F0 1A      jmp _gets_loop
0196+  1B80             _gets_NULL:
0197+  1B80 19 00         mov al, $00
0198+  1B82 3E            mov [d], al
0199+  1B83 79            inc d
0200+  1B84 0A F0 1A      jmp _gets_loop
0201+  1B87             _gets_end:
0202+  1B87 19 00         mov al, 0
0203+  1B89 3E            mov [d], al        ; terminate string
0204+  1B8A E7            pop d
0205+  1B8B E4            pop a
0206+  1B8C 09            ret
0207+  1B8D             
0208+  1B8D             ;-----------------------------------------------------------------------------
0209+  1B8D             ;; INPUT TEXT
0210+  1B8D             ;; terminated with CTRL+D
0211+  1B8D             ;; pointer in D
0212+  1B8D             ;-----------------------------------------------------------------------------
0213+  1B8D             _gettxt:
0214+  1B8D D7            push a
0215+  1B8E DA            push d
0216+  1B8F             _gettxt_loop:
0217+  1B8F 19 01         mov al, 1
0218+  1B91 05 03         syscall sys_io      ; receive in AH
0219+  1B93 B9 00         cmp al, 0        ; check error code (AL)
0220+  1B95 C6 8F 1B      je _gettxt_loop    ; if no char received, retry
0221+  1B98 76 04         cmp ah, 4      ; EOT
0222+  1B9A C6 D8 1B      je _gettxt_end
0223+  1B9D 76 08         cmp ah, $08      ; check for backspace
0224+  1B9F C6 D4 1B      je _gettxt_backspace
0225+  1BA2 76 5C         cmp ah, $5C        ; '\'
0226+  1BA4 C6 AD 1B      je _gettxt_escape
0227+  1BA7 1A            mov al, ah
0228+  1BA8 3E            mov [d], al
0229+  1BA9 79            inc d
0230+  1BAA 0A 8F 1B      jmp _gettxt_loop
0231+  1BAD             _gettxt_escape:
0232+  1BAD 19 01         mov al, 1
0233+  1BAF 05 03         syscall sys_io      ; receive in AH
0234+  1BB1 B9 00         cmp al, 0        ; check error code (AL)
0235+  1BB3 C6 AD 1B      je _gettxt_escape    ; if no char received, retry
0236+  1BB6 76 6E         cmp ah, 'n'
0237+  1BB8 C6 C6 1B      je _gettxt_LF
0238+  1BBB 76 72         cmp ah, 'r'
0239+  1BBD C6 CD 1B      je _gettxt_CR
0240+  1BC0 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1BC1 3E            mov [d], al
0242+  1BC2 79            inc d
0243+  1BC3 0A 8F 1B      jmp _gettxt_loop
0244+  1BC6             _gettxt_LF:
0245+  1BC6 19 0A         mov al, $0A
0246+  1BC8 3E            mov [d], al
0247+  1BC9 79            inc d
0248+  1BCA 0A 8F 1B      jmp _gettxt_loop
0249+  1BCD             _gettxt_CR:
0250+  1BCD 19 0D         mov al, $0D
0251+  1BCF 3E            mov [d], al
0252+  1BD0 79            inc d
0253+  1BD1 0A 8F 1B      jmp _gettxt_loop
0254+  1BD4             _gettxt_backspace:
0255+  1BD4 7F            dec d
0256+  1BD5 0A 8F 1B      jmp _gettxt_loop
0257+  1BD8             _gettxt_end:
0258+  1BD8 19 00         mov al, 0
0259+  1BDA 3E            mov [d], al        ; terminate string
0260+  1BDB E7            pop d
0261+  1BDC E4            pop a
0262+  1BDD 09            ret
0263+  1BDE             
0264+  1BDE             ;-----------------------------------------------------------------------------
0265+  1BDE             ; PRINT NEW LINE
0266+  1BDE             ;-----------------------------------------------------------------------------
0267+  1BDE             printnl:
0268+  1BDE D7            push a
0269+  1BDF 10 00 0A      mov a, $0A00
0270+  1BE2 05 03         syscall sys_io
0271+  1BE4 10 00 0D      mov a, $0D00
0272+  1BE7 05 03         syscall sys_io
0273+  1BE9 E4            pop a
0274+  1BEA 09            ret
0275+  1BEB             
0276+  1BEB             ;-----------------------------------------------------------------------------
0277+  1BEB             ; _strtoint
0278+  1BEB             ; 4 digit hex string number in d
0279+  1BEB             ; integer returned in A
0280+  1BEB             ;-----------------------------------------------------------------------------
0281+  1BEB             _strtointx:
0282+  1BEB D8            push b
0283+  1BEC 32            mov bl, [d]
0284+  1BED 37            mov bh, bl
0285+  1BEE 33 01 00      mov bl, [d + 1]
0286+  1BF1 07 A5 1A      call _atoi        ; convert to int in AL
0287+  1BF4 23            mov ah, al        ; move to AH
0288+  1BF5 33 02 00      mov bl, [d + 2]
0289+  1BF8 37            mov bh, bl
0290+  1BF9 33 03 00      mov bl, [d + 3]
0291+  1BFC 07 A5 1A      call _atoi        ; convert to int in AL
0292+  1BFF E5            pop b
0293+  1C00 09            ret
0294+  1C01             
0295+  1C01             ;-----------------------------------------------------------------------------
0296+  1C01             ; _strtoint
0297+  1C01             ; 5 digit base10 string number in d
0298+  1C01             ; integer returned in A
0299+  1C01             ;-----------------------------------------------------------------------------
0300+  1C01             _strtoint:
0301+  1C01 E2            push si
0302+  1C02 D8            push b
0303+  1C03 D9            push c
0304+  1C04 DA            push d
0305+  1C05 07 47 1A      call _strlen      ; get string length in C
0306+  1C08 7E            dec c
0307+  1C09 FD 4E         mov si, d
0308+  1C0B 12            mov a, c
0309+  1C0C FD 99         shl a
0310+  1C0E 3B 7D 1D      mov d, table_power
0311+  1C11 59            add d, a
0312+  1C12 38 00 00      mov c, 0
0313+  1C15             _strtoint_L0:
0314+  1C15 F6            lodsb      ; load ASCII to al
0315+  1C16 B9 00         cmp al, 0
0316+  1C18 C6 2B 1C      je _strtoint_end
0317+  1C1B 6F 30         sub al, $30    ; make into integer
0318+  1C1D 22 00         mov ah, 0
0319+  1C1F 2A            mov b, [d]
0320+  1C20 AC            mul a, b      ; result in B since it fits in 16bits
0321+  1C21 11            mov a, b
0322+  1C22 28            mov b, c
0323+  1C23 54            add a, b
0324+  1C24 39            mov c, a
0325+  1C25 63 02 00      sub d, 2
0326+  1C28 0A 15 1C      jmp _strtoint_L0
0327+  1C2B             _strtoint_end:
0328+  1C2B 12            mov a, c
0329+  1C2C E7            pop d
0330+  1C2D E6            pop c
0331+  1C2E E5            pop b
0332+  1C2F EF            pop si
0333+  1C30 09            ret
0334+  1C31             
0335+  1C31             ;-----------------------------------------------------------------------------
0336+  1C31             ; PRINT NULL TERMINATED STRING
0337+  1C31             ; pointer in D
0338+  1C31             ;-----------------------------------------------------------------------------
0339+  1C31             _puts:
0340+  1C31 D7            push a
0341+  1C32 DA            push d
0342+  1C33             _puts_L1:
0343+  1C33 1E            mov al, [d]
0344+  1C34 B9 00         cmp al, 0
0345+  1C36 C6 42 1C      jz _puts_END
0346+  1C39 23            mov ah, al
0347+  1C3A 19 00         mov al, 0
0348+  1C3C 05 03         syscall sys_io
0349+  1C3E 79            inc d
0350+  1C3F 0A 33 1C      jmp _puts_L1
0351+  1C42             _puts_END:
0352+  1C42 E7            pop d
0353+  1C43 E4            pop a
0354+  1C44 09            ret
0355+  1C45             
0356+  1C45             ;-----------------------------------------------------------------------------
0357+  1C45             ; PRINT N SIZE STRING
0358+  1C45             ; pointer in D
0359+  1C45             ; size in C
0360+  1C45             ;-----------------------------------------------------------------------------
0361+  1C45             _putsn:
0362+  1C45 DB            push al
0363+  1C46 DA            push d
0364+  1C47 D9            push c
0365+  1C48             _putsn_L0:
0366+  1C48 1E            mov al, [d]
0367+  1C49 23            mov ah, al
0368+  1C4A 19 00         mov al, 0
0369+  1C4C 05 03         syscall sys_io
0370+  1C4E 79            inc d
0371+  1C4F 7E            dec c  
0372+  1C50 C2 00 00      cmp c, 0
0373+  1C53 C7 48 1C      jne _putsn_L0
0374+  1C56             _putsn_end:
0375+  1C56 E6            pop c
0376+  1C57 E7            pop d
0377+  1C58 E8            pop al
0378+  1C59 09            ret
0379+  1C5A             
0380+  1C5A             ;-----------------------------------------------------------------------------
0381+  1C5A             ; print 16bit decimal number
0382+  1C5A             ; input number in A
0383+  1C5A             ;-----------------------------------------------------------------------------
0384+  1C5A             print_u16d:
0385+  1C5A D7            push a
0386+  1C5B D8            push b
0387+  1C5C 26 10 27      mov b, 10000
0388+  1C5F AE            div a, b      ; get 10000's coeff.
0389+  1C60 07 82 1C      call print_number
0390+  1C63 11            mov a, b
0391+  1C64 26 E8 03      mov b, 1000
0392+  1C67 AE            div a, b      ; get 1000's coeff.
0393+  1C68 07 82 1C      call print_number
0394+  1C6B 11            mov a, b
0395+  1C6C 26 64 00      mov b, 100
0396+  1C6F AE            div a, b
0397+  1C70 07 82 1C      call print_number
0398+  1C73 11            mov a, b
0399+  1C74 26 0A 00      mov b, 10
0400+  1C77 AE            div a, b
0401+  1C78 07 82 1C      call print_number
0402+  1C7B 1B            mov al, bl      ; 1's coeff in bl
0403+  1C7C 07 82 1C      call print_number
0404+  1C7F E5            pop b
0405+  1C80 E4            pop a
0406+  1C81 09            ret
0407+  1C82             
0408+  1C82             ;-----------------------------------------------------------------------------
0409+  1C82             ; print AL
0410+  1C82             ;-----------------------------------------------------------------------------
0411+  1C82             print_number:
0412+  1C82 6A 30         add al, $30
0413+  1C84 23            mov ah, al
0414+  1C85 07 E7 1A      call _putchar
0415+  1C88 09            ret
0416+  1C89             
0417+  1C89             ;-----------------------------------------------------------------------------
0418+  1C89             ; PRINT 16BIT HEX INTEGER
0419+  1C89             ; integer value in reg B
0420+  1C89             ;-----------------------------------------------------------------------------
0421+  1C89             print_u16x:
0422+  1C89 D7            push a
0423+  1C8A D8            push b
0424+  1C8B DD            push bl
0425+  1C8C 30            mov bl, bh
0426+  1C8D 07 B5 1A      call _itoa        ; convert bh to char in A
0427+  1C90 2F            mov bl, al        ; save al
0428+  1C91 19 00         mov al, 0
0429+  1C93 05 03         syscall sys_io        ; display AH
0430+  1C95 24            mov ah, bl        ; retrieve al
0431+  1C96 19 00         mov al, 0
0432+  1C98 05 03         syscall sys_io        ; display AL
0433+  1C9A             
0434+  1C9A EA            pop bl
0435+  1C9B 07 B5 1A      call _itoa        ; convert bh to char in A
0436+  1C9E 2F            mov bl, al        ; save al
0437+  1C9F 19 00         mov al, 0
0438+  1CA1 05 03         syscall sys_io        ; display AH
0439+  1CA3 24            mov ah, bl        ; retrieve al
0440+  1CA4 19 00         mov al, 0
0441+  1CA6 05 03         syscall sys_io        ; display AL
0442+  1CA8             
0443+  1CA8 E5            pop b
0444+  1CA9 E4            pop a
0445+  1CAA 09            ret
0446+  1CAB             
0447+  1CAB             ;-----------------------------------------------------------------------------
0448+  1CAB             ; INPUT 16BIT HEX INTEGER
0449+  1CAB             ; read 16bit integer into A
0450+  1CAB             ;-----------------------------------------------------------------------------
0451+  1CAB             scan_u16x:
0452+  1CAB F8 10 00      enter 16
0453+  1CAE D8            push b
0454+  1CAF DA            push d
0455+  1CB0             
0456+  1CB0 FA F1 FF      lea d, [bp + -15]
0457+  1CB3 07 EE 1A      call _gets        ; get number
0458+  1CB6             
0459+  1CB6 32            mov bl, [d]
0460+  1CB7 37            mov bh, bl
0461+  1CB8 33 01 00      mov bl, [d + 1]
0462+  1CBB 07 A5 1A      call _atoi        ; convert to int in AL
0463+  1CBE 23            mov ah, al        ; move to AH
0464+  1CBF             
0465+  1CBF 33 02 00      mov bl, [d + 2]
0466+  1CC2 37            mov bh, bl
0467+  1CC3 33 03 00      mov bl, [d + 3]
0468+  1CC6 07 A5 1A      call _atoi        ; convert to int in AL
0469+  1CC9             
0470+  1CC9 E7            pop d
0471+  1CCA E5            pop b
0472+  1CCB F9            leave
0473+  1CCC 09            ret
0474+  1CCD             
0475+  1CCD             ;-----------------------------------------------------------------------------
0476+  1CCD             ; PRINT 8bit HEX INTEGER
0477+  1CCD             ; integer value in reg bl
0478+  1CCD             ;-----------------------------------------------------------------------------
0479+  1CCD             print_u8x:
0480+  1CCD D7            push a
0481+  1CCE DD            push bl
0482+  1CCF             
0483+  1CCF 07 B5 1A      call _itoa        ; convert bl to char in A
0484+  1CD2 2F            mov bl, al        ; save al
0485+  1CD3 19 00         mov al, 0
0486+  1CD5 05 03         syscall sys_io        ; display AH
0487+  1CD7 24            mov ah, bl        ; retrieve al
0488+  1CD8 19 00         mov al, 0
0489+  1CDA 05 03         syscall sys_io        ; display AL
0490+  1CDC             
0491+  1CDC EA            pop bl
0492+  1CDD E4            pop a
0493+  1CDE 09            ret
0494+  1CDF             
0495+  1CDF             ;-----------------------------------------------------------------------------
0496+  1CDF             ; print 8bit decimal unsigned number
0497+  1CDF             ; input number in AL
0498+  1CDF             ;-----------------------------------------------------------------------------
0499+  1CDF             print_u8d:
0500+  1CDF D7            push a
0501+  1CE0 D8            push b
0502+  1CE1             
0503+  1CE1 22 00         mov ah, 0
0504+  1CE3 26 64 00      mov b, 100
0505+  1CE6 AE            div a, b
0506+  1CE7 D8            push b      ; save remainder
0507+  1CE8 B9 00         cmp al, 0
0508+  1CEA C6 F4 1C      je skip100
0509+  1CED 6A 30         add al, $30
0510+  1CEF 23            mov ah, al
0511+  1CF0 19 00         mov al, 0
0512+  1CF2 05 03         syscall sys_io  ; print coeff
0513+  1CF4             skip100:
0514+  1CF4 E4            pop a
0515+  1CF5 22 00         mov ah, 0
0516+  1CF7 26 0A 00      mov b, 10
0517+  1CFA AE            div a, b
0518+  1CFB D8            push b      ; save remainder
0519+  1CFC B9 00         cmp al, 0
0520+  1CFE C6 08 1D      je skip10
0521+  1D01 6A 30         add al, $30
0522+  1D03 23            mov ah, al
0523+  1D04 19 00         mov al, 0
0524+  1D06 05 03         syscall sys_io  ; print coeff
0525+  1D08             skip10:
0526+  1D08 E4            pop a
0527+  1D09 1B            mov al, bl
0528+  1D0A 6A 30         add al, $30
0529+  1D0C 23            mov ah, al
0530+  1D0D 19 00         mov al, 0
0531+  1D0F 05 03         syscall sys_io  ; print coeff
0532+  1D11 E5            pop b
0533+  1D12 E4            pop a
0534+  1D13 09            ret
0535+  1D14             
0536+  1D14             ;-----------------------------------------------------------------------------
0537+  1D14             ; INPUT 8BIT HEX INTEGER
0538+  1D14             ; read 8bit integer into AL
0539+  1D14             ;-----------------------------------------------------------------------------
0540+  1D14             scan_u8x:
0541+  1D14 F8 04 00      enter 4
0542+  1D17 D8            push b
0543+  1D18 DA            push d
0544+  1D19             
0545+  1D19 FA FD FF      lea d, [bp + -3]
0546+  1D1C 07 EE 1A      call _gets        ; get number
0547+  1D1F             
0548+  1D1F 32            mov bl, [d]
0549+  1D20 37            mov bh, bl
0550+  1D21 33 01 00      mov bl, [d + 1]
0551+  1D24 07 A5 1A      call _atoi        ; convert to int in AL
0552+  1D27             
0553+  1D27 E7            pop d
0554+  1D28 E5            pop b
0555+  1D29 F9            leave
0556+  1D2A 09            ret
0557+  1D2B             
0558+  1D2B             ;-----------------------------------------------------------------------------
0559+  1D2B             ; input decimal number
0560+  1D2B             ; result in A
0561+  1D2B             ; 655'\0'
0562+  1D2B             ; low--------high
0563+  1D2B             ;-----------------------------------------------------------------------------
0564+  1D2B             scan_u16d:
0565+  1D2B F8 08 00      enter 8
0566+  1D2E E2            push si
0567+  1D2F D8            push b
0568+  1D30 D9            push c
0569+  1D31 DA            push d
0570+  1D32 FA F9 FF      lea d, [bp +- 7]
0571+  1D35 07 EE 1A      call _gets
0572+  1D38 07 47 1A      call _strlen      ; get string length in C
0573+  1D3B 7E            dec c
0574+  1D3C FD 4E         mov si, d
0575+  1D3E 12            mov a, c
0576+  1D3F FD 99         shl a
0577+  1D41 3B 7D 1D      mov d, table_power
0578+  1D44 59            add d, a
0579+  1D45 38 00 00      mov c, 0
0580+  1D48             mul_loop:
0581+  1D48 F6            lodsb      ; load ASCII to al
0582+  1D49 B9 00         cmp al, 0
0583+  1D4B C6 5E 1D      je mul_exit
0584+  1D4E 6F 30         sub al, $30    ; make into integer
0585+  1D50 22 00         mov ah, 0
0586+  1D52 2A            mov b, [d]
0587+  1D53 AC            mul a, b      ; result in B since it fits in 16bits
0588+  1D54 11            mov a, b
0589+  1D55 28            mov b, c
0590+  1D56 54            add a, b
0591+  1D57 39            mov c, a
0592+  1D58 63 02 00      sub d, 2
0593+  1D5B 0A 48 1D      jmp mul_loop
0594+  1D5E             mul_exit:
0595+  1D5E 12            mov a, c
0596+  1D5F E7            pop d
0597+  1D60 E6            pop c
0598+  1D61 E5            pop b
0599+  1D62 EF            pop si
0600+  1D63 F9            leave
0601+  1D64 09            ret
0602+  1D65             
0603+  1D65 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1D69 34 35 36 37 
0603+  1D6D 38 39 41 42 
0603+  1D71 43 44 45 46 
0604+  1D75 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1D79 1B 5B 48 00 
0605+  1D7D             
0606+  1D7D             table_power:
0607+  1D7D 01 00         .dw 1
0608+  1D7F 0A 00         .dw 10
0609+  1D81 64 00         .dw 100
0610+  1D83 E8 03         .dw 1000
0611+  1D85 10 27         .dw 100003468   1D87             ; --- END INLINE ASM BLOCK
3469   1D87             
3470   1D87 F9            leave
3471   1D88 09            ret
3472   1D89             
3473   1D89             back:
3474   1D89 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3475   1D8C             ; $t 
3476   1D8C 52 02 00      sub sp, 2
3477   1D8F             ;; t = token; 
3478   1D8F FA FF FF      lea d, [bp + -1] ; $t
3479   1D92 DA            push d
3480   1D93 3B DA 2E      mov d, _token_data ; $token
3481   1D96 2D            mov b, d
3482   1D97 E7            pop d
3483   1D98 FD 43         mov [d], b
3484   1D9A             ;; while(*t++) prog--; 
3485   1D9A             _while47_cond:
3486   1D9A FA FF FF      lea d, [bp + -1] ; $t
3487   1D9D 2A            mov b, [d]
3488   1D9E D8            push b
3489   1D9F FD 77         inc b
3490   1DA1 FA FF FF      lea d, [bp + -1] ; $t
3491   1DA4 FD 43         mov [d], b
3492   1DA6 E5            pop b
3493   1DA7 74            mov d, b
3494   1DA8 32            mov bl, [d]
3495   1DA9 A7 00         mov bh, 0
3496   1DAB C0 00 00      cmp b, 0
3497   1DAE C6 C1 1D      je _while47_exit
3498   1DB1             _while47_block:
3499   1DB1             ;; prog--; 
3500   1DB1 3B D8 2E      mov d, _prog ; $prog
3501   1DB4 2A            mov b, [d]
3502   1DB5 D8            push b
3503   1DB6 FD 7D         dec b
3504   1DB8 3B D8 2E      mov d, _prog ; $prog
3505   1DBB FD 43         mov [d], b
3506   1DBD E5            pop b
3507   1DBE 0A 9A 1D      jmp _while47_cond
3508   1DC1             _while47_exit:
3509   1DC1             ;; tok = TOK_UNDEF; 
3510   1DC1 3B D4 2E      mov d, _tok ; $tok
3511   1DC4 DA            push d
3512   1DC5 26 00 00      mov b, 0; TOK_UNDEF
3513   1DC8 E7            pop d
3514   1DC9 FD 43         mov [d], b
3515   1DCB             ;; toktype = TYPE_UNDEF; 
3516   1DCB 3B D6 2E      mov d, _toktype ; $toktype
3517   1DCE DA            push d
3518   1DCF 26 00 00      mov b, 0; TYPE_UNDEF
3519   1DD2 E7            pop d
3520   1DD3 FD 43         mov [d], b
3521   1DD5             ;; token[0] = '\0'; 
3522   1DD5 3B DA 2E      mov d, _token_data ; $token
3523   1DD8 D7            push a
3524   1DD9 DA            push d
3525   1DDA 26 00 00      mov b, $0
3526   1DDD E7            pop d
3527   1DDE 5A            add d, b
3528   1DDF E4            pop a
3529   1DE0 DA            push d
3530   1DE1 26 00 00      mov b, $0
3531   1DE4 E7            pop d
3532   1DE5 FD 3E         mov [d], bl
3533   1DE7 F9            leave
3534   1DE8 09            ret
3535   1DE9             
3536   1DE9             get_path:
3537   1DE9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3538   1DEC             ; $t 
3539   1DEC 52 02 00      sub sp, 2
3540   1DEF             ;; *token = '\0'; 
3541   1DEF 3B DA 2E      mov d, _token_data ; $token
3542   1DF2 2D            mov b, d
3543   1DF3 D8            push b
3544   1DF4 26 00 00      mov b, $0
3545   1DF7 E7            pop d
3546   1DF8 FD 3E         mov [d], bl
3547   1DFA             ;; t = token; 
3548   1DFA FA FF FF      lea d, [bp + -1] ; $t
3549   1DFD DA            push d
3550   1DFE 3B DA 2E      mov d, _token_data ; $token
3551   1E01 2D            mov b, d
3552   1E02 E7            pop d
3553   1E03 FD 43         mov [d], b
3554   1E05             ;; while(is_space(*prog)) prog++; 
3555   1E05             _while48_cond:
3556   1E05 3B D8 2E      mov d, _prog ; $prog
3557   1E08 2A            mov b, [d]
3558   1E09 74            mov d, b
3559   1E0A 32            mov bl, [d]
3560   1E0B A7 00         mov bh, 0
3561   1E0D DD            push bl
3562   1E0E 07 4E 05      call is_space
3563   1E11 51 01 00      add sp, 1
3564   1E14 C0 00 00      cmp b, 0
3565   1E17 C6 2A 1E      je _while48_exit
3566   1E1A             _while48_block:
3567   1E1A             ;; prog++; 
3568   1E1A 3B D8 2E      mov d, _prog ; $prog
3569   1E1D 2A            mov b, [d]
3570   1E1E D8            push b
3571   1E1F FD 77         inc b
3572   1E21 3B D8 2E      mov d, _prog ; $prog
3573   1E24 FD 43         mov [d], b
3574   1E26 E5            pop b
3575   1E27 0A 05 1E      jmp _while48_cond
3576   1E2A             _while48_exit:
3577   1E2A             ;; if(*prog == '\0'){ 
3578   1E2A             _if49_cond:
3579   1E2A 3B D8 2E      mov d, _prog ; $prog
3580   1E2D 2A            mov b, [d]
3581   1E2E 74            mov d, b
3582   1E2F 32            mov bl, [d]
3583   1E30 A7 00         mov bh, 0
3584   1E32             ; START RELATIONAL
3585   1E32 D7            push a
3586   1E33 11            mov a, b
3587   1E34 26 00 00      mov b, $0
3588   1E37 B0            cmp a, b
3589   1E38 FD 71         seq ; ==
3590   1E3A E4            pop a
3591   1E3B             ; END RELATIONAL
3592   1E3B C0 00 00      cmp b, 0
3593   1E3E C6 46 1E      je _if49_exit
3594   1E41             _if49_true:
3595   1E41             ;; return; 
3596   1E41 F9            leave
3597   1E42 09            ret
3598   1E43 0A 46 1E      jmp _if49_exit
3599   1E46             _if49_exit:
3600   1E46             ;; while( 
3601   1E46             _while50_cond:
3602   1E46 3B D8 2E      mov d, _prog ; $prog
3603   1E49 2A            mov b, [d]
3604   1E4A 74            mov d, b
3605   1E4B 32            mov bl, [d]
3606   1E4C A7 00         mov bh, 0
3607   1E4E             ; START RELATIONAL
3608   1E4E D7            push a
3609   1E4F 11            mov a, b
3610   1E50 26 61 00      mov b, $61
3611   1E53 B0            cmp a, b
3612   1E54 FD 82         sgeu ; >= (unsigned)
3613   1E56 E4            pop a
3614   1E57             ; END RELATIONAL
3615   1E57 D7            push a
3616   1E58 11            mov a, b
3617   1E59 3B D8 2E      mov d, _prog ; $prog
3618   1E5C 2A            mov b, [d]
3619   1E5D 74            mov d, b
3620   1E5E 32            mov bl, [d]
3621   1E5F A7 00         mov bh, 0
3622   1E61             ; START RELATIONAL
3623   1E61 D7            push a
3624   1E62 11            mov a, b
3625   1E63 26 7A 00      mov b, $7a
3626   1E66 B0            cmp a, b
3627   1E67 FD 75         slu ; <= (unsigned)
3628   1E69 E4            pop a
3629   1E6A             ; END RELATIONAL
3630   1E6A FD A7         sand a, b
3631   1E6C E4            pop a
3632   1E6D D7            push a
3633   1E6E 11            mov a, b
3634   1E6F 3B D8 2E      mov d, _prog ; $prog
3635   1E72 2A            mov b, [d]
3636   1E73 74            mov d, b
3637   1E74 32            mov bl, [d]
3638   1E75 A7 00         mov bh, 0
3639   1E77             ; START RELATIONAL
3640   1E77 D7            push a
3641   1E78 11            mov a, b
3642   1E79 26 41 00      mov b, $41
3643   1E7C B0            cmp a, b
3644   1E7D FD 82         sgeu ; >= (unsigned)
3645   1E7F E4            pop a
3646   1E80             ; END RELATIONAL
3647   1E80 D7            push a
3648   1E81 11            mov a, b
3649   1E82 3B D8 2E      mov d, _prog ; $prog
3650   1E85 2A            mov b, [d]
3651   1E86 74            mov d, b
3652   1E87 32            mov bl, [d]
3653   1E88 A7 00         mov bh, 0
3654   1E8A             ; START RELATIONAL
3655   1E8A D7            push a
3656   1E8B 11            mov a, b
3657   1E8C 26 5A 00      mov b, $5a
3658   1E8F B0            cmp a, b
3659   1E90 FD 75         slu ; <= (unsigned)
3660   1E92 E4            pop a
3661   1E93             ; END RELATIONAL
3662   1E93 FD A7         sand a, b
3663   1E95 E4            pop a
3664   1E96 FD A8         sor a, b ; ||
3665   1E98 11            mov a, b
3666   1E99 3B D8 2E      mov d, _prog ; $prog
3667   1E9C 2A            mov b, [d]
3668   1E9D 74            mov d, b
3669   1E9E 32            mov bl, [d]
3670   1E9F A7 00         mov bh, 0
3671   1EA1             ; START RELATIONAL
3672   1EA1 D7            push a
3673   1EA2 11            mov a, b
3674   1EA3 26 30 00      mov b, $30
3675   1EA6 B0            cmp a, b
3676   1EA7 FD 82         sgeu ; >= (unsigned)
3677   1EA9 E4            pop a
3678   1EAA             ; END RELATIONAL
3679   1EAA D7            push a
3680   1EAB 11            mov a, b
3681   1EAC 3B D8 2E      mov d, _prog ; $prog
3682   1EAF 2A            mov b, [d]
3683   1EB0 74            mov d, b
3684   1EB1 32            mov bl, [d]
3685   1EB2 A7 00         mov bh, 0
3686   1EB4             ; START RELATIONAL
3687   1EB4 D7            push a
3688   1EB5 11            mov a, b
3689   1EB6 26 39 00      mov b, $39
3690   1EB9 B0            cmp a, b
3691   1EBA FD 75         slu ; <= (unsigned)
3692   1EBC E4            pop a
3693   1EBD             ; END RELATIONAL
3694   1EBD FD A7         sand a, b
3695   1EBF E4            pop a
3696   1EC0 FD A8         sor a, b ; ||
3697   1EC2 11            mov a, b
3698   1EC3 3B D8 2E      mov d, _prog ; $prog
3699   1EC6 2A            mov b, [d]
3700   1EC7 74            mov d, b
3701   1EC8 32            mov bl, [d]
3702   1EC9 A7 00         mov bh, 0
3703   1ECB             ; START RELATIONAL
3704   1ECB D7            push a
3705   1ECC 11            mov a, b
3706   1ECD 26 2F 00      mov b, $2f
3707   1ED0 B0            cmp a, b
3708   1ED1 FD 71         seq ; ==
3709   1ED3 E4            pop a
3710   1ED4             ; END RELATIONAL
3711   1ED4 FD A8         sor a, b ; ||
3712   1ED6 11            mov a, b
3713   1ED7 3B D8 2E      mov d, _prog ; $prog
3714   1EDA 2A            mov b, [d]
3715   1EDB 74            mov d, b
3716   1EDC 32            mov bl, [d]
3717   1EDD A7 00         mov bh, 0
3718   1EDF             ; START RELATIONAL
3719   1EDF D7            push a
3720   1EE0 11            mov a, b
3721   1EE1 26 5F 00      mov b, $5f
3722   1EE4 B0            cmp a, b
3723   1EE5 FD 71         seq ; ==
3724   1EE7 E4            pop a
3725   1EE8             ; END RELATIONAL
3726   1EE8 FD A8         sor a, b ; ||
3727   1EEA 11            mov a, b
3728   1EEB 3B D8 2E      mov d, _prog ; $prog
3729   1EEE 2A            mov b, [d]
3730   1EEF 74            mov d, b
3731   1EF0 32            mov bl, [d]
3732   1EF1 A7 00         mov bh, 0
3733   1EF3             ; START RELATIONAL
3734   1EF3 D7            push a
3735   1EF4 11            mov a, b
3736   1EF5 26 2D 00      mov b, $2d
3737   1EF8 B0            cmp a, b
3738   1EF9 FD 71         seq ; ==
3739   1EFB E4            pop a
3740   1EFC             ; END RELATIONAL
3741   1EFC FD A8         sor a, b ; ||
3742   1EFE 11            mov a, b
3743   1EFF 3B D8 2E      mov d, _prog ; $prog
3744   1F02 2A            mov b, [d]
3745   1F03 74            mov d, b
3746   1F04 32            mov bl, [d]
3747   1F05 A7 00         mov bh, 0
3748   1F07             ; START RELATIONAL
3749   1F07 D7            push a
3750   1F08 11            mov a, b
3751   1F09 26 2E 00      mov b, $2e
3752   1F0C B0            cmp a, b
3753   1F0D FD 71         seq ; ==
3754   1F0F E4            pop a
3755   1F10             ; END RELATIONAL
3756   1F10 FD A8         sor a, b ; ||
3757   1F12 E4            pop a
3758   1F13 C0 00 00      cmp b, 0
3759   1F16 C6 3E 1F      je _while50_exit
3760   1F19             _while50_block:
3761   1F19             ;; *t++ = *prog++; 
3762   1F19 FA FF FF      lea d, [bp + -1] ; $t
3763   1F1C 2A            mov b, [d]
3764   1F1D D8            push b
3765   1F1E FD 77         inc b
3766   1F20 FA FF FF      lea d, [bp + -1] ; $t
3767   1F23 FD 43         mov [d], b
3768   1F25 E5            pop b
3769   1F26 D8            push b
3770   1F27 3B D8 2E      mov d, _prog ; $prog
3771   1F2A 2A            mov b, [d]
3772   1F2B D8            push b
3773   1F2C FD 77         inc b
3774   1F2E 3B D8 2E      mov d, _prog ; $prog
3775   1F31 FD 43         mov [d], b
3776   1F33 E5            pop b
3777   1F34 74            mov d, b
3778   1F35 32            mov bl, [d]
3779   1F36 A7 00         mov bh, 0
3780   1F38 E7            pop d
3781   1F39 FD 3E         mov [d], bl
3782   1F3B 0A 46 1E      jmp _while50_cond
3783   1F3E             _while50_exit:
3784   1F3E             ;; *t = '\0'; 
3785   1F3E FA FF FF      lea d, [bp + -1] ; $t
3786   1F41 2A            mov b, [d]
3787   1F42 D8            push b
3788   1F43 26 00 00      mov b, $0
3789   1F46 E7            pop d
3790   1F47 FD 3E         mov [d], bl
3791   1F49 F9            leave
3792   1F4A 09            ret
3793   1F4B             
3794   1F4B             get:
3795   1F4B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3796   1F4E             ; $t 
3797   1F4E 52 02 00      sub sp, 2
3798   1F51             ;; *token = '\0'; 
3799   1F51 3B DA 2E      mov d, _token_data ; $token
3800   1F54 2D            mov b, d
3801   1F55 D8            push b
3802   1F56 26 00 00      mov b, $0
3803   1F59 E7            pop d
3804   1F5A FD 3E         mov [d], bl
3805   1F5C             ;; tok = 0; 
3806   1F5C 3B D4 2E      mov d, _tok ; $tok
3807   1F5F DA            push d
3808   1F60 26 00 00      mov b, $0
3809   1F63 E7            pop d
3810   1F64 FD 43         mov [d], b
3811   1F66             ;; toktype = 0; 
3812   1F66 3B D6 2E      mov d, _toktype ; $toktype
3813   1F69 DA            push d
3814   1F6A 26 00 00      mov b, $0
3815   1F6D E7            pop d
3816   1F6E FD 43         mov [d], b
3817   1F70             ;; t = token; 
3818   1F70 FA FF FF      lea d, [bp + -1] ; $t
3819   1F73 DA            push d
3820   1F74 3B DA 2E      mov d, _token_data ; $token
3821   1F77 2D            mov b, d
3822   1F78 E7            pop d
3823   1F79 FD 43         mov [d], b
3824   1F7B             ;; while(is_space(*prog)) prog++; 
3825   1F7B             _while51_cond:
3826   1F7B 3B D8 2E      mov d, _prog ; $prog
3827   1F7E 2A            mov b, [d]
3828   1F7F 74            mov d, b
3829   1F80 32            mov bl, [d]
3830   1F81 A7 00         mov bh, 0
3831   1F83 DD            push bl
3832   1F84 07 4E 05      call is_space
3833   1F87 51 01 00      add sp, 1
3834   1F8A C0 00 00      cmp b, 0
3835   1F8D C6 A0 1F      je _while51_exit
3836   1F90             _while51_block:
3837   1F90             ;; prog++; 
3838   1F90 3B D8 2E      mov d, _prog ; $prog
3839   1F93 2A            mov b, [d]
3840   1F94 D8            push b
3841   1F95 FD 77         inc b
3842   1F97 3B D8 2E      mov d, _prog ; $prog
3843   1F9A FD 43         mov [d], b
3844   1F9C E5            pop b
3845   1F9D 0A 7B 1F      jmp _while51_cond
3846   1FA0             _while51_exit:
3847   1FA0             ;; if(*prog == '\0'){ 
3848   1FA0             _if52_cond:
3849   1FA0 3B D8 2E      mov d, _prog ; $prog
3850   1FA3 2A            mov b, [d]
3851   1FA4 74            mov d, b
3852   1FA5 32            mov bl, [d]
3853   1FA6 A7 00         mov bh, 0
3854   1FA8             ; START RELATIONAL
3855   1FA8 D7            push a
3856   1FA9 11            mov a, b
3857   1FAA 26 00 00      mov b, $0
3858   1FAD B0            cmp a, b
3859   1FAE FD 71         seq ; ==
3860   1FB0 E4            pop a
3861   1FB1             ; END RELATIONAL
3862   1FB1 C0 00 00      cmp b, 0
3863   1FB4 C6 C6 1F      je _if52_exit
3864   1FB7             _if52_true:
3865   1FB7             ;; toktype = END; 
3866   1FB7 3B D6 2E      mov d, _toktype ; $toktype
3867   1FBA DA            push d
3868   1FBB 26 06 00      mov b, 6; END
3869   1FBE E7            pop d
3870   1FBF FD 43         mov [d], b
3871   1FC1             ;; return; 
3872   1FC1 F9            leave
3873   1FC2 09            ret
3874   1FC3 0A C6 1F      jmp _if52_exit
3875   1FC6             _if52_exit:
3876   1FC6             ;; if(is_digit(*prog)){ 
3877   1FC6             _if53_cond:
3878   1FC6 3B D8 2E      mov d, _prog ; $prog
3879   1FC9 2A            mov b, [d]
3880   1FCA 74            mov d, b
3881   1FCB 32            mov bl, [d]
3882   1FCC A7 00         mov bh, 0
3883   1FCE DD            push bl
3884   1FCF 07 9A 05      call is_digit
3885   1FD2 51 01 00      add sp, 1
3886   1FD5 C0 00 00      cmp b, 0
3887   1FD8 C6 2F 20      je _if53_else
3888   1FDB             _if53_true:
3889   1FDB             ;; while(is_digit(*prog)){ 
3890   1FDB             _while54_cond:
3891   1FDB 3B D8 2E      mov d, _prog ; $prog
3892   1FDE 2A            mov b, [d]
3893   1FDF 74            mov d, b
3894   1FE0 32            mov bl, [d]
3895   1FE1 A7 00         mov bh, 0
3896   1FE3 DD            push bl
3897   1FE4 07 9A 05      call is_digit
3898   1FE7 51 01 00      add sp, 1
3899   1FEA C0 00 00      cmp b, 0
3900   1FED C6 15 20      je _while54_exit
3901   1FF0             _while54_block:
3902   1FF0             ;; *t++ = *prog++; 
3903   1FF0 FA FF FF      lea d, [bp + -1] ; $t
3904   1FF3 2A            mov b, [d]
3905   1FF4 D8            push b
3906   1FF5 FD 77         inc b
3907   1FF7 FA FF FF      lea d, [bp + -1] ; $t
3908   1FFA FD 43         mov [d], b
3909   1FFC E5            pop b
3910   1FFD D8            push b
3911   1FFE 3B D8 2E      mov d, _prog ; $prog
3912   2001 2A            mov b, [d]
3913   2002 D8            push b
3914   2003 FD 77         inc b
3915   2005 3B D8 2E      mov d, _prog ; $prog
3916   2008 FD 43         mov [d], b
3917   200A E5            pop b
3918   200B 74            mov d, b
3919   200C 32            mov bl, [d]
3920   200D A7 00         mov bh, 0
3921   200F E7            pop d
3922   2010 FD 3E         mov [d], bl
3923   2012 0A DB 1F      jmp _while54_cond
3924   2015             _while54_exit:
3925   2015             ;; *t = '\0'; 
3926   2015 FA FF FF      lea d, [bp + -1] ; $t
3927   2018 2A            mov b, [d]
3928   2019 D8            push b
3929   201A 26 00 00      mov b, $0
3930   201D E7            pop d
3931   201E FD 3E         mov [d], bl
3932   2020             ;; toktype = INTEGER_CONST; 
3933   2020 3B D6 2E      mov d, _toktype ; $toktype
3934   2023 DA            push d
3935   2024 26 04 00      mov b, 4; INTEGER_CONST
3936   2027 E7            pop d
3937   2028 FD 43         mov [d], b
3938   202A             ;; return; // return to avoid *t = '\0' line at the end of function 
3939   202A F9            leave
3940   202B 09            ret
3941   202C 0A 69 2C      jmp _if53_exit
3942   202F             _if53_else:
3943   202F             ;; if(is_alpha(*prog)){ 
3944   202F             _if55_cond:
3945   202F 3B D8 2E      mov d, _prog ; $prog
3946   2032 2A            mov b, [d]
3947   2033 74            mov d, b
3948   2034 32            mov bl, [d]
3949   2035 A7 00         mov bh, 0
3950   2037 DD            push bl
3951   2038 07 C2 05      call is_alpha
3952   203B 51 01 00      add sp, 1
3953   203E C0 00 00      cmp b, 0
3954   2041 C6 AA 20      je _if55_else
3955   2044             _if55_true:
3956   2044             ;; while(is_alpha(*prog) || is_digit(*prog)){ 
3957   2044             _while56_cond:
3958   2044 3B D8 2E      mov d, _prog ; $prog
3959   2047 2A            mov b, [d]
3960   2048 74            mov d, b
3961   2049 32            mov bl, [d]
3962   204A A7 00         mov bh, 0
3963   204C DD            push bl
3964   204D 07 C2 05      call is_alpha
3965   2050 51 01 00      add sp, 1
3966   2053 D7            push a
3967   2054 11            mov a, b
3968   2055 3B D8 2E      mov d, _prog ; $prog
3969   2058 2A            mov b, [d]
3970   2059 74            mov d, b
3971   205A 32            mov bl, [d]
3972   205B A7 00         mov bh, 0
3973   205D DD            push bl
3974   205E 07 9A 05      call is_digit
3975   2061 51 01 00      add sp, 1
3976   2064 FD A8         sor a, b ; ||
3977   2066 E4            pop a
3978   2067 C0 00 00      cmp b, 0
3979   206A C6 92 20      je _while56_exit
3980   206D             _while56_block:
3981   206D             ;; *t++ = *prog++; 
3982   206D FA FF FF      lea d, [bp + -1] ; $t
3983   2070 2A            mov b, [d]
3984   2071 D8            push b
3985   2072 FD 77         inc b
3986   2074 FA FF FF      lea d, [bp + -1] ; $t
3987   2077 FD 43         mov [d], b
3988   2079 E5            pop b
3989   207A D8            push b
3990   207B 3B D8 2E      mov d, _prog ; $prog
3991   207E 2A            mov b, [d]
3992   207F D8            push b
3993   2080 FD 77         inc b
3994   2082 3B D8 2E      mov d, _prog ; $prog
3995   2085 FD 43         mov [d], b
3996   2087 E5            pop b
3997   2088 74            mov d, b
3998   2089 32            mov bl, [d]
3999   208A A7 00         mov bh, 0
4000   208C E7            pop d
4001   208D FD 3E         mov [d], bl
4002   208F 0A 44 20      jmp _while56_cond
4003   2092             _while56_exit:
4004   2092             ;; *t = '\0'; 
4005   2092 FA FF FF      lea d, [bp + -1] ; $t
4006   2095 2A            mov b, [d]
4007   2096 D8            push b
4008   2097 26 00 00      mov b, $0
4009   209A E7            pop d
4010   209B FD 3E         mov [d], bl
4011   209D             ;; toktype = IDENTIFIER; 
4012   209D 3B D6 2E      mov d, _toktype ; $toktype
4013   20A0 DA            push d
4014   20A1 26 05 00      mov b, 5; IDENTIFIER
4015   20A4 E7            pop d
4016   20A5 FD 43         mov [d], b
4017   20A7 0A 69 2C      jmp _if55_exit
4018   20AA             _if55_else:
4019   20AA             ;; if(*prog == '\"'){ 
4020   20AA             _if57_cond:
4021   20AA 3B D8 2E      mov d, _prog ; $prog
4022   20AD 2A            mov b, [d]
4023   20AE 74            mov d, b
4024   20AF 32            mov bl, [d]
4025   20B0 A7 00         mov bh, 0
4026   20B2             ; START RELATIONAL
4027   20B2 D7            push a
4028   20B3 11            mov a, b
4029   20B4 26 22 00      mov b, $22
4030   20B7 B0            cmp a, b
4031   20B8 FD 71         seq ; ==
4032   20BA E4            pop a
4033   20BB             ; END RELATIONAL
4034   20BB C0 00 00      cmp b, 0
4035   20BE C6 8D 21      je _if57_else
4036   20C1             _if57_true:
4037   20C1             ;; *t++ = '\"'; 
4038   20C1 FA FF FF      lea d, [bp + -1] ; $t
4039   20C4 2A            mov b, [d]
4040   20C5 D8            push b
4041   20C6 FD 77         inc b
4042   20C8 FA FF FF      lea d, [bp + -1] ; $t
4043   20CB FD 43         mov [d], b
4044   20CD E5            pop b
4045   20CE D8            push b
4046   20CF 26 22 00      mov b, $22
4047   20D2 E7            pop d
4048   20D3 FD 3E         mov [d], bl
4049   20D5             ;; prog++; 
4050   20D5 3B D8 2E      mov d, _prog ; $prog
4051   20D8 2A            mov b, [d]
4052   20D9 D8            push b
4053   20DA FD 77         inc b
4054   20DC 3B D8 2E      mov d, _prog ; $prog
4055   20DF FD 43         mov [d], b
4056   20E1 E5            pop b
4057   20E2             ;; while(*prog != '\"' && *prog){ 
4058   20E2             _while58_cond:
4059   20E2 3B D8 2E      mov d, _prog ; $prog
4060   20E5 2A            mov b, [d]
4061   20E6 74            mov d, b
4062   20E7 32            mov bl, [d]
4063   20E8 A7 00         mov bh, 0
4064   20EA             ; START RELATIONAL
4065   20EA D7            push a
4066   20EB 11            mov a, b
4067   20EC 26 22 00      mov b, $22
4068   20EF B0            cmp a, b
4069   20F0 FD 72         sneq ; !=
4070   20F2 E4            pop a
4071   20F3             ; END RELATIONAL
4072   20F3 D7            push a
4073   20F4 11            mov a, b
4074   20F5 3B D8 2E      mov d, _prog ; $prog
4075   20F8 2A            mov b, [d]
4076   20F9 74            mov d, b
4077   20FA 32            mov bl, [d]
4078   20FB A7 00         mov bh, 0
4079   20FD FD A7         sand a, b
4080   20FF E4            pop a
4081   2100 C0 00 00      cmp b, 0
4082   2103 C6 2B 21      je _while58_exit
4083   2106             _while58_block:
4084   2106             ;; *t++ = *prog++; 
4085   2106 FA FF FF      lea d, [bp + -1] ; $t
4086   2109 2A            mov b, [d]
4087   210A D8            push b
4088   210B FD 77         inc b
4089   210D FA FF FF      lea d, [bp + -1] ; $t
4090   2110 FD 43         mov [d], b
4091   2112 E5            pop b
4092   2113 D8            push b
4093   2114 3B D8 2E      mov d, _prog ; $prog
4094   2117 2A            mov b, [d]
4095   2118 D8            push b
4096   2119 FD 77         inc b
4097   211B 3B D8 2E      mov d, _prog ; $prog
4098   211E FD 43         mov [d], b
4099   2120 E5            pop b
4100   2121 74            mov d, b
4101   2122 32            mov bl, [d]
4102   2123 A7 00         mov bh, 0
4103   2125 E7            pop d
4104   2126 FD 3E         mov [d], bl
4105   2128 0A E2 20      jmp _while58_cond
4106   212B             _while58_exit:
4107   212B             ;; if(*prog != '\"') error("Double quotes expected"); 
4108   212B             _if59_cond:
4109   212B 3B D8 2E      mov d, _prog ; $prog
4110   212E 2A            mov b, [d]
4111   212F 74            mov d, b
4112   2130 32            mov bl, [d]
4113   2131 A7 00         mov bh, 0
4114   2133             ; START RELATIONAL
4115   2133 D7            push a
4116   2134 11            mov a, b
4117   2135 26 22 00      mov b, $22
4118   2138 B0            cmp a, b
4119   2139 FD 72         sneq ; !=
4120   213B E4            pop a
4121   213C             ; END RELATIONAL
4122   213C C0 00 00      cmp b, 0
4123   213F C6 51 21      je _if59_exit
4124   2142             _if59_true:
4125   2142             ;; error("Double quotes expected"); 
4126   2142 26 21 33      mov b, _s4 ; "Double quotes expected"
4127   2145 FD AB         swp b
4128   2147 D8            push b
4129   2148 07 AA 2E      call error
4130   214B 51 02 00      add sp, 2
4131   214E 0A 51 21      jmp _if59_exit
4132   2151             _if59_exit:
4133   2151             ;; *t++ = '\"'; 
4134   2151 FA FF FF      lea d, [bp + -1] ; $t
4135   2154 2A            mov b, [d]
4136   2155 D8            push b
4137   2156 FD 77         inc b
4138   2158 FA FF FF      lea d, [bp + -1] ; $t
4139   215B FD 43         mov [d], b
4140   215D E5            pop b
4141   215E D8            push b
4142   215F 26 22 00      mov b, $22
4143   2162 E7            pop d
4144   2163 FD 3E         mov [d], bl
4145   2165             ;; prog++; 
4146   2165 3B D8 2E      mov d, _prog ; $prog
4147   2168 2A            mov b, [d]
4148   2169 D8            push b
4149   216A FD 77         inc b
4150   216C 3B D8 2E      mov d, _prog ; $prog
4151   216F FD 43         mov [d], b
4152   2171 E5            pop b
4153   2172             ;; toktype = STRING_CONST; 
4154   2172 3B D6 2E      mov d, _toktype ; $toktype
4155   2175 DA            push d
4156   2176 26 03 00      mov b, 3; STRING_CONST
4157   2179 E7            pop d
4158   217A FD 43         mov [d], b
4159   217C             ;; *t = '\0'; 
4160   217C FA FF FF      lea d, [bp + -1] ; $t
4161   217F 2A            mov b, [d]
4162   2180 D8            push b
4163   2181 26 00 00      mov b, $0
4164   2184 E7            pop d
4165   2185 FD 3E         mov [d], bl
4166   2187             ;; convert_constant(); // converts this string token qith quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
4167   2187 07 76 2C      call convert_constant
4168   218A 0A 69 2C      jmp _if57_exit
4169   218D             _if57_else:
4170   218D             ;; if(*prog == '#'){ 
4171   218D             _if60_cond:
4172   218D 3B D8 2E      mov d, _prog ; $prog
4173   2190 2A            mov b, [d]
4174   2191 74            mov d, b
4175   2192 32            mov bl, [d]
4176   2193 A7 00         mov bh, 0
4177   2195             ; START RELATIONAL
4178   2195 D7            push a
4179   2196 11            mov a, b
4180   2197 26 23 00      mov b, $23
4181   219A B0            cmp a, b
4182   219B FD 71         seq ; ==
4183   219D E4            pop a
4184   219E             ; END RELATIONAL
4185   219E C0 00 00      cmp b, 0
4186   21A1 C6 DD 21      je _if60_else
4187   21A4             _if60_true:
4188   21A4             ;; *t++ = *prog++; 
4189   21A4 FA FF FF      lea d, [bp + -1] ; $t
4190   21A7 2A            mov b, [d]
4191   21A8 D8            push b
4192   21A9 FD 77         inc b
4193   21AB FA FF FF      lea d, [bp + -1] ; $t
4194   21AE FD 43         mov [d], b
4195   21B0 E5            pop b
4196   21B1 D8            push b
4197   21B2 3B D8 2E      mov d, _prog ; $prog
4198   21B5 2A            mov b, [d]
4199   21B6 D8            push b
4200   21B7 FD 77         inc b
4201   21B9 3B D8 2E      mov d, _prog ; $prog
4202   21BC FD 43         mov [d], b
4203   21BE E5            pop b
4204   21BF 74            mov d, b
4205   21C0 32            mov bl, [d]
4206   21C1 A7 00         mov bh, 0
4207   21C3 E7            pop d
4208   21C4 FD 3E         mov [d], bl
4209   21C6             ;; tok = HASH; 
4210   21C6 3B D4 2E      mov d, _tok ; $tok
4211   21C9 DA            push d
4212   21CA 26 15 00      mov b, 21; HASH
4213   21CD E7            pop d
4214   21CE FD 43         mov [d], b
4215   21D0             ;; toktype = DELIMITER;   
4216   21D0 3B D6 2E      mov d, _toktype ; $toktype
4217   21D3 DA            push d
4218   21D4 26 01 00      mov b, 1; DELIMITER
4219   21D7 E7            pop d
4220   21D8 FD 43         mov [d], b
4221   21DA 0A 69 2C      jmp _if60_exit
4222   21DD             _if60_else:
4223   21DD             ;; if(*prog == '{'){ 
4224   21DD             _if61_cond:
4225   21DD 3B D8 2E      mov d, _prog ; $prog
4226   21E0 2A            mov b, [d]
4227   21E1 74            mov d, b
4228   21E2 32            mov bl, [d]
4229   21E3 A7 00         mov bh, 0
4230   21E5             ; START RELATIONAL
4231   21E5 D7            push a
4232   21E6 11            mov a, b
4233   21E7 26 7B 00      mov b, $7b
4234   21EA B0            cmp a, b
4235   21EB FD 71         seq ; ==
4236   21ED E4            pop a
4237   21EE             ; END RELATIONAL
4238   21EE C0 00 00      cmp b, 0
4239   21F1 C6 2D 22      je _if61_else
4240   21F4             _if61_true:
4241   21F4             ;; *t++ = *prog++; 
4242   21F4 FA FF FF      lea d, [bp + -1] ; $t
4243   21F7 2A            mov b, [d]
4244   21F8 D8            push b
4245   21F9 FD 77         inc b
4246   21FB FA FF FF      lea d, [bp + -1] ; $t
4247   21FE FD 43         mov [d], b
4248   2200 E5            pop b
4249   2201 D8            push b
4250   2202 3B D8 2E      mov d, _prog ; $prog
4251   2205 2A            mov b, [d]
4252   2206 D8            push b
4253   2207 FD 77         inc b
4254   2209 3B D8 2E      mov d, _prog ; $prog
4255   220C FD 43         mov [d], b
4256   220E E5            pop b
4257   220F 74            mov d, b
4258   2210 32            mov bl, [d]
4259   2211 A7 00         mov bh, 0
4260   2213 E7            pop d
4261   2214 FD 3E         mov [d], bl
4262   2216             ;; tok = OPENING_BRACE; 
4263   2216 3B D4 2E      mov d, _tok ; $tok
4264   2219 DA            push d
4265   221A 26 1E 00      mov b, 30; OPENING_BRACE
4266   221D E7            pop d
4267   221E FD 43         mov [d], b
4268   2220             ;; toktype = DELIMITER;   
4269   2220 3B D6 2E      mov d, _toktype ; $toktype
4270   2223 DA            push d
4271   2224 26 01 00      mov b, 1; DELIMITER
4272   2227 E7            pop d
4273   2228 FD 43         mov [d], b
4274   222A 0A 69 2C      jmp _if61_exit
4275   222D             _if61_else:
4276   222D             ;; if(*prog == '}'){ 
4277   222D             _if62_cond:
4278   222D 3B D8 2E      mov d, _prog ; $prog
4279   2230 2A            mov b, [d]
4280   2231 74            mov d, b
4281   2232 32            mov bl, [d]
4282   2233 A7 00         mov bh, 0
4283   2235             ; START RELATIONAL
4284   2235 D7            push a
4285   2236 11            mov a, b
4286   2237 26 7D 00      mov b, $7d
4287   223A B0            cmp a, b
4288   223B FD 71         seq ; ==
4289   223D E4            pop a
4290   223E             ; END RELATIONAL
4291   223E C0 00 00      cmp b, 0
4292   2241 C6 7D 22      je _if62_else
4293   2244             _if62_true:
4294   2244             ;; *t++ = *prog++; 
4295   2244 FA FF FF      lea d, [bp + -1] ; $t
4296   2247 2A            mov b, [d]
4297   2248 D8            push b
4298   2249 FD 77         inc b
4299   224B FA FF FF      lea d, [bp + -1] ; $t
4300   224E FD 43         mov [d], b
4301   2250 E5            pop b
4302   2251 D8            push b
4303   2252 3B D8 2E      mov d, _prog ; $prog
4304   2255 2A            mov b, [d]
4305   2256 D8            push b
4306   2257 FD 77         inc b
4307   2259 3B D8 2E      mov d, _prog ; $prog
4308   225C FD 43         mov [d], b
4309   225E E5            pop b
4310   225F 74            mov d, b
4311   2260 32            mov bl, [d]
4312   2261 A7 00         mov bh, 0
4313   2263 E7            pop d
4314   2264 FD 3E         mov [d], bl
4315   2266             ;; tok = CLOSING_BRACE; 
4316   2266 3B D4 2E      mov d, _tok ; $tok
4317   2269 DA            push d
4318   226A 26 1F 00      mov b, 31; CLOSING_BRACE
4319   226D E7            pop d
4320   226E FD 43         mov [d], b
4321   2270             ;; toktype = DELIMITER;   
4322   2270 3B D6 2E      mov d, _toktype ; $toktype
4323   2273 DA            push d
4324   2274 26 01 00      mov b, 1; DELIMITER
4325   2277 E7            pop d
4326   2278 FD 43         mov [d], b
4327   227A 0A 69 2C      jmp _if62_exit
4328   227D             _if62_else:
4329   227D             ;; if(*prog == '['){ 
4330   227D             _if63_cond:
4331   227D 3B D8 2E      mov d, _prog ; $prog
4332   2280 2A            mov b, [d]
4333   2281 74            mov d, b
4334   2282 32            mov bl, [d]
4335   2283 A7 00         mov bh, 0
4336   2285             ; START RELATIONAL
4337   2285 D7            push a
4338   2286 11            mov a, b
4339   2287 26 5B 00      mov b, $5b
4340   228A B0            cmp a, b
4341   228B FD 71         seq ; ==
4342   228D E4            pop a
4343   228E             ; END RELATIONAL
4344   228E C0 00 00      cmp b, 0
4345   2291 C6 CD 22      je _if63_else
4346   2294             _if63_true:
4347   2294             ;; *t++ = *prog++; 
4348   2294 FA FF FF      lea d, [bp + -1] ; $t
4349   2297 2A            mov b, [d]
4350   2298 D8            push b
4351   2299 FD 77         inc b
4352   229B FA FF FF      lea d, [bp + -1] ; $t
4353   229E FD 43         mov [d], b
4354   22A0 E5            pop b
4355   22A1 D8            push b
4356   22A2 3B D8 2E      mov d, _prog ; $prog
4357   22A5 2A            mov b, [d]
4358   22A6 D8            push b
4359   22A7 FD 77         inc b
4360   22A9 3B D8 2E      mov d, _prog ; $prog
4361   22AC FD 43         mov [d], b
4362   22AE E5            pop b
4363   22AF 74            mov d, b
4364   22B0 32            mov bl, [d]
4365   22B1 A7 00         mov bh, 0
4366   22B3 E7            pop d
4367   22B4 FD 3E         mov [d], bl
4368   22B6             ;; tok = OPENING_BRACKET; 
4369   22B6 3B D4 2E      mov d, _tok ; $tok
4370   22B9 DA            push d
4371   22BA 26 20 00      mov b, 32; OPENING_BRACKET
4372   22BD E7            pop d
4373   22BE FD 43         mov [d], b
4374   22C0             ;; toktype = DELIMITER;   
4375   22C0 3B D6 2E      mov d, _toktype ; $toktype
4376   22C3 DA            push d
4377   22C4 26 01 00      mov b, 1; DELIMITER
4378   22C7 E7            pop d
4379   22C8 FD 43         mov [d], b
4380   22CA 0A 69 2C      jmp _if63_exit
4381   22CD             _if63_else:
4382   22CD             ;; if(*prog == ']'){ 
4383   22CD             _if64_cond:
4384   22CD 3B D8 2E      mov d, _prog ; $prog
4385   22D0 2A            mov b, [d]
4386   22D1 74            mov d, b
4387   22D2 32            mov bl, [d]
4388   22D3 A7 00         mov bh, 0
4389   22D5             ; START RELATIONAL
4390   22D5 D7            push a
4391   22D6 11            mov a, b
4392   22D7 26 5D 00      mov b, $5d
4393   22DA B0            cmp a, b
4394   22DB FD 71         seq ; ==
4395   22DD E4            pop a
4396   22DE             ; END RELATIONAL
4397   22DE C0 00 00      cmp b, 0
4398   22E1 C6 1D 23      je _if64_else
4399   22E4             _if64_true:
4400   22E4             ;; *t++ = *prog++; 
4401   22E4 FA FF FF      lea d, [bp + -1] ; $t
4402   22E7 2A            mov b, [d]
4403   22E8 D8            push b
4404   22E9 FD 77         inc b
4405   22EB FA FF FF      lea d, [bp + -1] ; $t
4406   22EE FD 43         mov [d], b
4407   22F0 E5            pop b
4408   22F1 D8            push b
4409   22F2 3B D8 2E      mov d, _prog ; $prog
4410   22F5 2A            mov b, [d]
4411   22F6 D8            push b
4412   22F7 FD 77         inc b
4413   22F9 3B D8 2E      mov d, _prog ; $prog
4414   22FC FD 43         mov [d], b
4415   22FE E5            pop b
4416   22FF 74            mov d, b
4417   2300 32            mov bl, [d]
4418   2301 A7 00         mov bh, 0
4419   2303 E7            pop d
4420   2304 FD 3E         mov [d], bl
4421   2306             ;; tok = CLOSING_BRACKET; 
4422   2306 3B D4 2E      mov d, _tok ; $tok
4423   2309 DA            push d
4424   230A 26 21 00      mov b, 33; CLOSING_BRACKET
4425   230D E7            pop d
4426   230E FD 43         mov [d], b
4427   2310             ;; toktype = DELIMITER;   
4428   2310 3B D6 2E      mov d, _toktype ; $toktype
4429   2313 DA            push d
4430   2314 26 01 00      mov b, 1; DELIMITER
4431   2317 E7            pop d
4432   2318 FD 43         mov [d], b
4433   231A 0A 69 2C      jmp _if64_exit
4434   231D             _if64_else:
4435   231D             ;; if(*prog == '='){ 
4436   231D             _if65_cond:
4437   231D 3B D8 2E      mov d, _prog ; $prog
4438   2320 2A            mov b, [d]
4439   2321 74            mov d, b
4440   2322 32            mov bl, [d]
4441   2323 A7 00         mov bh, 0
4442   2325             ; START RELATIONAL
4443   2325 D7            push a
4444   2326 11            mov a, b
4445   2327 26 3D 00      mov b, $3d
4446   232A B0            cmp a, b
4447   232B FD 71         seq ; ==
4448   232D E4            pop a
4449   232E             ; END RELATIONAL
4450   232E C0 00 00      cmp b, 0
4451   2331 C6 B3 23      je _if65_else
4452   2334             _if65_true:
4453   2334             ;; *t++ = *prog++; 
4454   2334 FA FF FF      lea d, [bp + -1] ; $t
4455   2337 2A            mov b, [d]
4456   2338 D8            push b
4457   2339 FD 77         inc b
4458   233B FA FF FF      lea d, [bp + -1] ; $t
4459   233E FD 43         mov [d], b
4460   2340 E5            pop b
4461   2341 D8            push b
4462   2342 3B D8 2E      mov d, _prog ; $prog
4463   2345 2A            mov b, [d]
4464   2346 D8            push b
4465   2347 FD 77         inc b
4466   2349 3B D8 2E      mov d, _prog ; $prog
4467   234C FD 43         mov [d], b
4468   234E E5            pop b
4469   234F 74            mov d, b
4470   2350 32            mov bl, [d]
4471   2351 A7 00         mov bh, 0
4472   2353 E7            pop d
4473   2354 FD 3E         mov [d], bl
4474   2356             ;; if (*prog == '='){ 
4475   2356             _if66_cond:
4476   2356 3B D8 2E      mov d, _prog ; $prog
4477   2359 2A            mov b, [d]
4478   235A 74            mov d, b
4479   235B 32            mov bl, [d]
4480   235C A7 00         mov bh, 0
4481   235E             ; START RELATIONAL
4482   235E D7            push a
4483   235F 11            mov a, b
4484   2360 26 3D 00      mov b, $3d
4485   2363 B0            cmp a, b
4486   2364 FD 71         seq ; ==
4487   2366 E4            pop a
4488   2367             ; END RELATIONAL
4489   2367 C0 00 00      cmp b, 0
4490   236A C6 9C 23      je _if66_else
4491   236D             _if66_true:
4492   236D             ;; *t++ = *prog++; 
4493   236D FA FF FF      lea d, [bp + -1] ; $t
4494   2370 2A            mov b, [d]
4495   2371 D8            push b
4496   2372 FD 77         inc b
4497   2374 FA FF FF      lea d, [bp + -1] ; $t
4498   2377 FD 43         mov [d], b
4499   2379 E5            pop b
4500   237A D8            push b
4501   237B 3B D8 2E      mov d, _prog ; $prog
4502   237E 2A            mov b, [d]
4503   237F D8            push b
4504   2380 FD 77         inc b
4505   2382 3B D8 2E      mov d, _prog ; $prog
4506   2385 FD 43         mov [d], b
4507   2387 E5            pop b
4508   2388 74            mov d, b
4509   2389 32            mov bl, [d]
4510   238A A7 00         mov bh, 0
4511   238C E7            pop d
4512   238D FD 3E         mov [d], bl
4513   238F             ;; tok = EQUAL; 
4514   238F 3B D4 2E      mov d, _tok ; $tok
4515   2392 DA            push d
4516   2393 26 08 00      mov b, 8; EQUAL
4517   2396 E7            pop d
4518   2397 FD 43         mov [d], b
4519   2399 0A A6 23      jmp _if66_exit
4520   239C             _if66_else:
4521   239C             ;; tok = ASSIGNMENT; 
4522   239C 3B D4 2E      mov d, _tok ; $tok
4523   239F DA            push d
4524   23A0 26 11 00      mov b, 17; ASSIGNMENT
4525   23A3 E7            pop d
4526   23A4 FD 43         mov [d], b
4527   23A6             _if66_exit:
4528   23A6             ;; toktype = DELIMITER;   
4529   23A6 3B D6 2E      mov d, _toktype ; $toktype
4530   23A9 DA            push d
4531   23AA 26 01 00      mov b, 1; DELIMITER
4532   23AD E7            pop d
4533   23AE FD 43         mov [d], b
4534   23B0 0A 69 2C      jmp _if65_exit
4535   23B3             _if65_else:
4536   23B3             ;; if(*prog == '&'){ 
4537   23B3             _if67_cond:
4538   23B3 3B D8 2E      mov d, _prog ; $prog
4539   23B6 2A            mov b, [d]
4540   23B7 74            mov d, b
4541   23B8 32            mov bl, [d]
4542   23B9 A7 00         mov bh, 0
4543   23BB             ; START RELATIONAL
4544   23BB D7            push a
4545   23BC 11            mov a, b
4546   23BD 26 26 00      mov b, $26
4547   23C0 B0            cmp a, b
4548   23C1 FD 71         seq ; ==
4549   23C3 E4            pop a
4550   23C4             ; END RELATIONAL
4551   23C4 C0 00 00      cmp b, 0
4552   23C7 C6 49 24      je _if67_else
4553   23CA             _if67_true:
4554   23CA             ;; *t++ = *prog++; 
4555   23CA FA FF FF      lea d, [bp + -1] ; $t
4556   23CD 2A            mov b, [d]
4557   23CE D8            push b
4558   23CF FD 77         inc b
4559   23D1 FA FF FF      lea d, [bp + -1] ; $t
4560   23D4 FD 43         mov [d], b
4561   23D6 E5            pop b
4562   23D7 D8            push b
4563   23D8 3B D8 2E      mov d, _prog ; $prog
4564   23DB 2A            mov b, [d]
4565   23DC D8            push b
4566   23DD FD 77         inc b
4567   23DF 3B D8 2E      mov d, _prog ; $prog
4568   23E2 FD 43         mov [d], b
4569   23E4 E5            pop b
4570   23E5 74            mov d, b
4571   23E6 32            mov bl, [d]
4572   23E7 A7 00         mov bh, 0
4573   23E9 E7            pop d
4574   23EA FD 3E         mov [d], bl
4575   23EC             ;; if(*prog == '&'){ 
4576   23EC             _if68_cond:
4577   23EC 3B D8 2E      mov d, _prog ; $prog
4578   23EF 2A            mov b, [d]
4579   23F0 74            mov d, b
4580   23F1 32            mov bl, [d]
4581   23F2 A7 00         mov bh, 0
4582   23F4             ; START RELATIONAL
4583   23F4 D7            push a
4584   23F5 11            mov a, b
4585   23F6 26 26 00      mov b, $26
4586   23F9 B0            cmp a, b
4587   23FA FD 71         seq ; ==
4588   23FC E4            pop a
4589   23FD             ; END RELATIONAL
4590   23FD C0 00 00      cmp b, 0
4591   2400 C6 32 24      je _if68_else
4592   2403             _if68_true:
4593   2403             ;; *t++ = *prog++; 
4594   2403 FA FF FF      lea d, [bp + -1] ; $t
4595   2406 2A            mov b, [d]
4596   2407 D8            push b
4597   2408 FD 77         inc b
4598   240A FA FF FF      lea d, [bp + -1] ; $t
4599   240D FD 43         mov [d], b
4600   240F E5            pop b
4601   2410 D8            push b
4602   2411 3B D8 2E      mov d, _prog ; $prog
4603   2414 2A            mov b, [d]
4604   2415 D8            push b
4605   2416 FD 77         inc b
4606   2418 3B D8 2E      mov d, _prog ; $prog
4607   241B FD 43         mov [d], b
4608   241D E5            pop b
4609   241E 74            mov d, b
4610   241F 32            mov bl, [d]
4611   2420 A7 00         mov bh, 0
4612   2422 E7            pop d
4613   2423 FD 3E         mov [d], bl
4614   2425             ;; tok = LOGICAL_AND; 
4615   2425 3B D4 2E      mov d, _tok ; $tok
4616   2428 DA            push d
4617   2429 26 0E 00      mov b, 14; LOGICAL_AND
4618   242C E7            pop d
4619   242D FD 43         mov [d], b
4620   242F 0A 3C 24      jmp _if68_exit
4621   2432             _if68_else:
4622   2432             ;; tok = AMPERSAND; 
4623   2432 3B D4 2E      mov d, _tok ; $tok
4624   2435 DA            push d
4625   2436 26 16 00      mov b, 22; AMPERSAND
4626   2439 E7            pop d
4627   243A FD 43         mov [d], b
4628   243C             _if68_exit:
4629   243C             ;; toktype = DELIMITER;   
4630   243C 3B D6 2E      mov d, _toktype ; $toktype
4631   243F DA            push d
4632   2440 26 01 00      mov b, 1; DELIMITER
4633   2443 E7            pop d
4634   2444 FD 43         mov [d], b
4635   2446 0A 69 2C      jmp _if67_exit
4636   2449             _if67_else:
4637   2449             ;; if(*prog == '|'){ 
4638   2449             _if69_cond:
4639   2449 3B D8 2E      mov d, _prog ; $prog
4640   244C 2A            mov b, [d]
4641   244D 74            mov d, b
4642   244E 32            mov bl, [d]
4643   244F A7 00         mov bh, 0
4644   2451             ; START RELATIONAL
4645   2451 D7            push a
4646   2452 11            mov a, b
4647   2453 26 7C 00      mov b, $7c
4648   2456 B0            cmp a, b
4649   2457 FD 71         seq ; ==
4650   2459 E4            pop a
4651   245A             ; END RELATIONAL
4652   245A C0 00 00      cmp b, 0
4653   245D C6 DF 24      je _if69_else
4654   2460             _if69_true:
4655   2460             ;; *t++ = *prog++; 
4656   2460 FA FF FF      lea d, [bp + -1] ; $t
4657   2463 2A            mov b, [d]
4658   2464 D8            push b
4659   2465 FD 77         inc b
4660   2467 FA FF FF      lea d, [bp + -1] ; $t
4661   246A FD 43         mov [d], b
4662   246C E5            pop b
4663   246D D8            push b
4664   246E 3B D8 2E      mov d, _prog ; $prog
4665   2471 2A            mov b, [d]
4666   2472 D8            push b
4667   2473 FD 77         inc b
4668   2475 3B D8 2E      mov d, _prog ; $prog
4669   2478 FD 43         mov [d], b
4670   247A E5            pop b
4671   247B 74            mov d, b
4672   247C 32            mov bl, [d]
4673   247D A7 00         mov bh, 0
4674   247F E7            pop d
4675   2480 FD 3E         mov [d], bl
4676   2482             ;; if (*prog == '|'){ 
4677   2482             _if70_cond:
4678   2482 3B D8 2E      mov d, _prog ; $prog
4679   2485 2A            mov b, [d]
4680   2486 74            mov d, b
4681   2487 32            mov bl, [d]
4682   2488 A7 00         mov bh, 0
4683   248A             ; START RELATIONAL
4684   248A D7            push a
4685   248B 11            mov a, b
4686   248C 26 7C 00      mov b, $7c
4687   248F B0            cmp a, b
4688   2490 FD 71         seq ; ==
4689   2492 E4            pop a
4690   2493             ; END RELATIONAL
4691   2493 C0 00 00      cmp b, 0
4692   2496 C6 C8 24      je _if70_else
4693   2499             _if70_true:
4694   2499             ;; *t++ = *prog++; 
4695   2499 FA FF FF      lea d, [bp + -1] ; $t
4696   249C 2A            mov b, [d]
4697   249D D8            push b
4698   249E FD 77         inc b
4699   24A0 FA FF FF      lea d, [bp + -1] ; $t
4700   24A3 FD 43         mov [d], b
4701   24A5 E5            pop b
4702   24A6 D8            push b
4703   24A7 3B D8 2E      mov d, _prog ; $prog
4704   24AA 2A            mov b, [d]
4705   24AB D8            push b
4706   24AC FD 77         inc b
4707   24AE 3B D8 2E      mov d, _prog ; $prog
4708   24B1 FD 43         mov [d], b
4709   24B3 E5            pop b
4710   24B4 74            mov d, b
4711   24B5 32            mov bl, [d]
4712   24B6 A7 00         mov bh, 0
4713   24B8 E7            pop d
4714   24B9 FD 3E         mov [d], bl
4715   24BB             ;; tok = LOGICAL_OR; 
4716   24BB 3B D4 2E      mov d, _tok ; $tok
4717   24BE DA            push d
4718   24BF 26 0F 00      mov b, 15; LOGICAL_OR
4719   24C2 E7            pop d
4720   24C3 FD 43         mov [d], b
4721   24C5 0A D2 24      jmp _if70_exit
4722   24C8             _if70_else:
4723   24C8             ;; tok = BITWISE_OR; 
4724   24C8 3B D4 2E      mov d, _tok ; $tok
4725   24CB DA            push d
4726   24CC 26 18 00      mov b, 24; BITWISE_OR
4727   24CF E7            pop d
4728   24D0 FD 43         mov [d], b
4729   24D2             _if70_exit:
4730   24D2             ;; toktype = DELIMITER;   
4731   24D2 3B D6 2E      mov d, _toktype ; $toktype
4732   24D5 DA            push d
4733   24D6 26 01 00      mov b, 1; DELIMITER
4734   24D9 E7            pop d
4735   24DA FD 43         mov [d], b
4736   24DC 0A 69 2C      jmp _if69_exit
4737   24DF             _if69_else:
4738   24DF             ;; if(*prog == '~'){ 
4739   24DF             _if71_cond:
4740   24DF 3B D8 2E      mov d, _prog ; $prog
4741   24E2 2A            mov b, [d]
4742   24E3 74            mov d, b
4743   24E4 32            mov bl, [d]
4744   24E5 A7 00         mov bh, 0
4745   24E7             ; START RELATIONAL
4746   24E7 D7            push a
4747   24E8 11            mov a, b
4748   24E9 26 7E 00      mov b, $7e
4749   24EC B0            cmp a, b
4750   24ED FD 71         seq ; ==
4751   24EF E4            pop a
4752   24F0             ; END RELATIONAL
4753   24F0 C0 00 00      cmp b, 0
4754   24F3 C6 2F 25      je _if71_else
4755   24F6             _if71_true:
4756   24F6             ;; *t++ = *prog++; 
4757   24F6 FA FF FF      lea d, [bp + -1] ; $t
4758   24F9 2A            mov b, [d]
4759   24FA D8            push b
4760   24FB FD 77         inc b
4761   24FD FA FF FF      lea d, [bp + -1] ; $t
4762   2500 FD 43         mov [d], b
4763   2502 E5            pop b
4764   2503 D8            push b
4765   2504 3B D8 2E      mov d, _prog ; $prog
4766   2507 2A            mov b, [d]
4767   2508 D8            push b
4768   2509 FD 77         inc b
4769   250B 3B D8 2E      mov d, _prog ; $prog
4770   250E FD 43         mov [d], b
4771   2510 E5            pop b
4772   2511 74            mov d, b
4773   2512 32            mov bl, [d]
4774   2513 A7 00         mov bh, 0
4775   2515 E7            pop d
4776   2516 FD 3E         mov [d], bl
4777   2518             ;; tok = BITWISE_NOT; 
4778   2518 3B D4 2E      mov d, _tok ; $tok
4779   251B DA            push d
4780   251C 26 19 00      mov b, 25; BITWISE_NOT
4781   251F E7            pop d
4782   2520 FD 43         mov [d], b
4783   2522             ;; toktype = DELIMITER;   
4784   2522 3B D6 2E      mov d, _toktype ; $toktype
4785   2525 DA            push d
4786   2526 26 01 00      mov b, 1; DELIMITER
4787   2529 E7            pop d
4788   252A FD 43         mov [d], b
4789   252C 0A 69 2C      jmp _if71_exit
4790   252F             _if71_else:
4791   252F             ;; if(*prog == '<'){ 
4792   252F             _if72_cond:
4793   252F 3B D8 2E      mov d, _prog ; $prog
4794   2532 2A            mov b, [d]
4795   2533 74            mov d, b
4796   2534 32            mov bl, [d]
4797   2535 A7 00         mov bh, 0
4798   2537             ; START RELATIONAL
4799   2537 D7            push a
4800   2538 11            mov a, b
4801   2539 26 3C 00      mov b, $3c
4802   253C B0            cmp a, b
4803   253D FD 71         seq ; ==
4804   253F E4            pop a
4805   2540             ; END RELATIONAL
4806   2540 C0 00 00      cmp b, 0
4807   2543 C6 0B 26      je _if72_else
4808   2546             _if72_true:
4809   2546             ;; *t++ = *prog++; 
4810   2546 FA FF FF      lea d, [bp + -1] ; $t
4811   2549 2A            mov b, [d]
4812   254A D8            push b
4813   254B FD 77         inc b
4814   254D FA FF FF      lea d, [bp + -1] ; $t
4815   2550 FD 43         mov [d], b
4816   2552 E5            pop b
4817   2553 D8            push b
4818   2554 3B D8 2E      mov d, _prog ; $prog
4819   2557 2A            mov b, [d]
4820   2558 D8            push b
4821   2559 FD 77         inc b
4822   255B 3B D8 2E      mov d, _prog ; $prog
4823   255E FD 43         mov [d], b
4824   2560 E5            pop b
4825   2561 74            mov d, b
4826   2562 32            mov bl, [d]
4827   2563 A7 00         mov bh, 0
4828   2565 E7            pop d
4829   2566 FD 3E         mov [d], bl
4830   2568             ;; if (*prog == '='){ 
4831   2568             _if73_cond:
4832   2568 3B D8 2E      mov d, _prog ; $prog
4833   256B 2A            mov b, [d]
4834   256C 74            mov d, b
4835   256D 32            mov bl, [d]
4836   256E A7 00         mov bh, 0
4837   2570             ; START RELATIONAL
4838   2570 D7            push a
4839   2571 11            mov a, b
4840   2572 26 3D 00      mov b, $3d
4841   2575 B0            cmp a, b
4842   2576 FD 71         seq ; ==
4843   2578 E4            pop a
4844   2579             ; END RELATIONAL
4845   2579 C0 00 00      cmp b, 0
4846   257C C6 AE 25      je _if73_else
4847   257F             _if73_true:
4848   257F             ;; *t++ = *prog++; 
4849   257F FA FF FF      lea d, [bp + -1] ; $t
4850   2582 2A            mov b, [d]
4851   2583 D8            push b
4852   2584 FD 77         inc b
4853   2586 FA FF FF      lea d, [bp + -1] ; $t
4854   2589 FD 43         mov [d], b
4855   258B E5            pop b
4856   258C D8            push b
4857   258D 3B D8 2E      mov d, _prog ; $prog
4858   2590 2A            mov b, [d]
4859   2591 D8            push b
4860   2592 FD 77         inc b
4861   2594 3B D8 2E      mov d, _prog ; $prog
4862   2597 FD 43         mov [d], b
4863   2599 E5            pop b
4864   259A 74            mov d, b
4865   259B 32            mov bl, [d]
4866   259C A7 00         mov bh, 0
4867   259E E7            pop d
4868   259F FD 3E         mov [d], bl
4869   25A1             ;; tok = LESS_THAN_OR_EQUAL; 
4870   25A1 3B D4 2E      mov d, _tok ; $tok
4871   25A4 DA            push d
4872   25A5 26 0B 00      mov b, 11; LESS_THAN_OR_EQUAL
4873   25A8 E7            pop d
4874   25A9 FD 43         mov [d], b
4875   25AB 0A FE 25      jmp _if73_exit
4876   25AE             _if73_else:
4877   25AE             ;; if (*prog == '<'){ 
4878   25AE             _if74_cond:
4879   25AE 3B D8 2E      mov d, _prog ; $prog
4880   25B1 2A            mov b, [d]
4881   25B2 74            mov d, b
4882   25B3 32            mov bl, [d]
4883   25B4 A7 00         mov bh, 0
4884   25B6             ; START RELATIONAL
4885   25B6 D7            push a
4886   25B7 11            mov a, b
4887   25B8 26 3C 00      mov b, $3c
4888   25BB B0            cmp a, b
4889   25BC FD 71         seq ; ==
4890   25BE E4            pop a
4891   25BF             ; END RELATIONAL
4892   25BF C0 00 00      cmp b, 0
4893   25C2 C6 F4 25      je _if74_else
4894   25C5             _if74_true:
4895   25C5             ;; *t++ = *prog++; 
4896   25C5 FA FF FF      lea d, [bp + -1] ; $t
4897   25C8 2A            mov b, [d]
4898   25C9 D8            push b
4899   25CA FD 77         inc b
4900   25CC FA FF FF      lea d, [bp + -1] ; $t
4901   25CF FD 43         mov [d], b
4902   25D1 E5            pop b
4903   25D2 D8            push b
4904   25D3 3B D8 2E      mov d, _prog ; $prog
4905   25D6 2A            mov b, [d]
4906   25D7 D8            push b
4907   25D8 FD 77         inc b
4908   25DA 3B D8 2E      mov d, _prog ; $prog
4909   25DD FD 43         mov [d], b
4910   25DF E5            pop b
4911   25E0 74            mov d, b
4912   25E1 32            mov bl, [d]
4913   25E2 A7 00         mov bh, 0
4914   25E4 E7            pop d
4915   25E5 FD 3E         mov [d], bl
4916   25E7             ;; tok = BITWISE_SHL; 
4917   25E7 3B D4 2E      mov d, _tok ; $tok
4918   25EA DA            push d
4919   25EB 26 1A 00      mov b, 26; BITWISE_SHL
4920   25EE E7            pop d
4921   25EF FD 43         mov [d], b
4922   25F1 0A FE 25      jmp _if74_exit
4923   25F4             _if74_else:
4924   25F4             ;; tok = LESS_THAN; 
4925   25F4 3B D4 2E      mov d, _tok ; $tok
4926   25F7 DA            push d
4927   25F8 26 0A 00      mov b, 10; LESS_THAN
4928   25FB E7            pop d
4929   25FC FD 43         mov [d], b
4930   25FE             _if74_exit:
4931   25FE             _if73_exit:
4932   25FE             ;; toktype = DELIMITER;   
4933   25FE 3B D6 2E      mov d, _toktype ; $toktype
4934   2601 DA            push d
4935   2602 26 01 00      mov b, 1; DELIMITER
4936   2605 E7            pop d
4937   2606 FD 43         mov [d], b
4938   2608 0A 69 2C      jmp _if72_exit
4939   260B             _if72_else:
4940   260B             ;; if(*prog == '>'){ 
4941   260B             _if75_cond:
4942   260B 3B D8 2E      mov d, _prog ; $prog
4943   260E 2A            mov b, [d]
4944   260F 74            mov d, b
4945   2610 32            mov bl, [d]
4946   2611 A7 00         mov bh, 0
4947   2613             ; START RELATIONAL
4948   2613 D7            push a
4949   2614 11            mov a, b
4950   2615 26 3E 00      mov b, $3e
4951   2618 B0            cmp a, b
4952   2619 FD 71         seq ; ==
4953   261B E4            pop a
4954   261C             ; END RELATIONAL
4955   261C C0 00 00      cmp b, 0
4956   261F C6 E7 26      je _if75_else
4957   2622             _if75_true:
4958   2622             ;; *t++ = *prog++; 
4959   2622 FA FF FF      lea d, [bp + -1] ; $t
4960   2625 2A            mov b, [d]
4961   2626 D8            push b
4962   2627 FD 77         inc b
4963   2629 FA FF FF      lea d, [bp + -1] ; $t
4964   262C FD 43         mov [d], b
4965   262E E5            pop b
4966   262F D8            push b
4967   2630 3B D8 2E      mov d, _prog ; $prog
4968   2633 2A            mov b, [d]
4969   2634 D8            push b
4970   2635 FD 77         inc b
4971   2637 3B D8 2E      mov d, _prog ; $prog
4972   263A FD 43         mov [d], b
4973   263C E5            pop b
4974   263D 74            mov d, b
4975   263E 32            mov bl, [d]
4976   263F A7 00         mov bh, 0
4977   2641 E7            pop d
4978   2642 FD 3E         mov [d], bl
4979   2644             ;; if (*prog == '='){ 
4980   2644             _if76_cond:
4981   2644 3B D8 2E      mov d, _prog ; $prog
4982   2647 2A            mov b, [d]
4983   2648 74            mov d, b
4984   2649 32            mov bl, [d]
4985   264A A7 00         mov bh, 0
4986   264C             ; START RELATIONAL
4987   264C D7            push a
4988   264D 11            mov a, b
4989   264E 26 3D 00      mov b, $3d
4990   2651 B0            cmp a, b
4991   2652 FD 71         seq ; ==
4992   2654 E4            pop a
4993   2655             ; END RELATIONAL
4994   2655 C0 00 00      cmp b, 0
4995   2658 C6 8A 26      je _if76_else
4996   265B             _if76_true:
4997   265B             ;; *t++ = *prog++; 
4998   265B FA FF FF      lea d, [bp + -1] ; $t
4999   265E 2A            mov b, [d]
5000   265F D8            push b
5001   2660 FD 77         inc b
5002   2662 FA FF FF      lea d, [bp + -1] ; $t
5003   2665 FD 43         mov [d], b
5004   2667 E5            pop b
5005   2668 D8            push b
5006   2669 3B D8 2E      mov d, _prog ; $prog
5007   266C 2A            mov b, [d]
5008   266D D8            push b
5009   266E FD 77         inc b
5010   2670 3B D8 2E      mov d, _prog ; $prog
5011   2673 FD 43         mov [d], b
5012   2675 E5            pop b
5013   2676 74            mov d, b
5014   2677 32            mov bl, [d]
5015   2678 A7 00         mov bh, 0
5016   267A E7            pop d
5017   267B FD 3E         mov [d], bl
5018   267D             ;; tok = GREATER_THAN_OR_EQUAL; 
5019   267D 3B D4 2E      mov d, _tok ; $tok
5020   2680 DA            push d
5021   2681 26 0D 00      mov b, 13; GREATER_THAN_OR_EQUAL
5022   2684 E7            pop d
5023   2685 FD 43         mov [d], b
5024   2687 0A DA 26      jmp _if76_exit
5025   268A             _if76_else:
5026   268A             ;; if (*prog == '>'){ 
5027   268A             _if77_cond:
5028   268A 3B D8 2E      mov d, _prog ; $prog
5029   268D 2A            mov b, [d]
5030   268E 74            mov d, b
5031   268F 32            mov bl, [d]
5032   2690 A7 00         mov bh, 0
5033   2692             ; START RELATIONAL
5034   2692 D7            push a
5035   2693 11            mov a, b
5036   2694 26 3E 00      mov b, $3e
5037   2697 B0            cmp a, b
5038   2698 FD 71         seq ; ==
5039   269A E4            pop a
5040   269B             ; END RELATIONAL
5041   269B C0 00 00      cmp b, 0
5042   269E C6 D0 26      je _if77_else
5043   26A1             _if77_true:
5044   26A1             ;; *t++ = *prog++; 
5045   26A1 FA FF FF      lea d, [bp + -1] ; $t
5046   26A4 2A            mov b, [d]
5047   26A5 D8            push b
5048   26A6 FD 77         inc b
5049   26A8 FA FF FF      lea d, [bp + -1] ; $t
5050   26AB FD 43         mov [d], b
5051   26AD E5            pop b
5052   26AE D8            push b
5053   26AF 3B D8 2E      mov d, _prog ; $prog
5054   26B2 2A            mov b, [d]
5055   26B3 D8            push b
5056   26B4 FD 77         inc b
5057   26B6 3B D8 2E      mov d, _prog ; $prog
5058   26B9 FD 43         mov [d], b
5059   26BB E5            pop b
5060   26BC 74            mov d, b
5061   26BD 32            mov bl, [d]
5062   26BE A7 00         mov bh, 0
5063   26C0 E7            pop d
5064   26C1 FD 3E         mov [d], bl
5065   26C3             ;; tok = BITWISE_SHR; 
5066   26C3 3B D4 2E      mov d, _tok ; $tok
5067   26C6 DA            push d
5068   26C7 26 1B 00      mov b, 27; BITWISE_SHR
5069   26CA E7            pop d
5070   26CB FD 43         mov [d], b
5071   26CD 0A DA 26      jmp _if77_exit
5072   26D0             _if77_else:
5073   26D0             ;; tok = GREATER_THAN; 
5074   26D0 3B D4 2E      mov d, _tok ; $tok
5075   26D3 DA            push d
5076   26D4 26 0C 00      mov b, 12; GREATER_THAN
5077   26D7 E7            pop d
5078   26D8 FD 43         mov [d], b
5079   26DA             _if77_exit:
5080   26DA             _if76_exit:
5081   26DA             ;; toktype = DELIMITER;   
5082   26DA 3B D6 2E      mov d, _toktype ; $toktype
5083   26DD DA            push d
5084   26DE 26 01 00      mov b, 1; DELIMITER
5085   26E1 E7            pop d
5086   26E2 FD 43         mov [d], b
5087   26E4 0A 69 2C      jmp _if75_exit
5088   26E7             _if75_else:
5089   26E7             ;; if(*prog == '!'){ 
5090   26E7             _if78_cond:
5091   26E7 3B D8 2E      mov d, _prog ; $prog
5092   26EA 2A            mov b, [d]
5093   26EB 74            mov d, b
5094   26EC 32            mov bl, [d]
5095   26ED A7 00         mov bh, 0
5096   26EF             ; START RELATIONAL
5097   26EF D7            push a
5098   26F0 11            mov a, b
5099   26F1 26 21 00      mov b, $21
5100   26F4 B0            cmp a, b
5101   26F5 FD 71         seq ; ==
5102   26F7 E4            pop a
5103   26F8             ; END RELATIONAL
5104   26F8 C0 00 00      cmp b, 0
5105   26FB C6 7D 27      je _if78_else
5106   26FE             _if78_true:
5107   26FE             ;; *t++ = *prog++; 
5108   26FE FA FF FF      lea d, [bp + -1] ; $t
5109   2701 2A            mov b, [d]
5110   2702 D8            push b
5111   2703 FD 77         inc b
5112   2705 FA FF FF      lea d, [bp + -1] ; $t
5113   2708 FD 43         mov [d], b
5114   270A E5            pop b
5115   270B D8            push b
5116   270C 3B D8 2E      mov d, _prog ; $prog
5117   270F 2A            mov b, [d]
5118   2710 D8            push b
5119   2711 FD 77         inc b
5120   2713 3B D8 2E      mov d, _prog ; $prog
5121   2716 FD 43         mov [d], b
5122   2718 E5            pop b
5123   2719 74            mov d, b
5124   271A 32            mov bl, [d]
5125   271B A7 00         mov bh, 0
5126   271D E7            pop d
5127   271E FD 3E         mov [d], bl
5128   2720             ;; if(*prog == '='){ 
5129   2720             _if79_cond:
5130   2720 3B D8 2E      mov d, _prog ; $prog
5131   2723 2A            mov b, [d]
5132   2724 74            mov d, b
5133   2725 32            mov bl, [d]
5134   2726 A7 00         mov bh, 0
5135   2728             ; START RELATIONAL
5136   2728 D7            push a
5137   2729 11            mov a, b
5138   272A 26 3D 00      mov b, $3d
5139   272D B0            cmp a, b
5140   272E FD 71         seq ; ==
5141   2730 E4            pop a
5142   2731             ; END RELATIONAL
5143   2731 C0 00 00      cmp b, 0
5144   2734 C6 66 27      je _if79_else
5145   2737             _if79_true:
5146   2737             ;; *t++ = *prog++; 
5147   2737 FA FF FF      lea d, [bp + -1] ; $t
5148   273A 2A            mov b, [d]
5149   273B D8            push b
5150   273C FD 77         inc b
5151   273E FA FF FF      lea d, [bp + -1] ; $t
5152   2741 FD 43         mov [d], b
5153   2743 E5            pop b
5154   2744 D8            push b
5155   2745 3B D8 2E      mov d, _prog ; $prog
5156   2748 2A            mov b, [d]
5157   2749 D8            push b
5158   274A FD 77         inc b
5159   274C 3B D8 2E      mov d, _prog ; $prog
5160   274F FD 43         mov [d], b
5161   2751 E5            pop b
5162   2752 74            mov d, b
5163   2753 32            mov bl, [d]
5164   2754 A7 00         mov bh, 0
5165   2756 E7            pop d
5166   2757 FD 3E         mov [d], bl
5167   2759             ;; tok = NOT_EQUAL; 
5168   2759 3B D4 2E      mov d, _tok ; $tok
5169   275C DA            push d
5170   275D 26 09 00      mov b, 9; NOT_EQUAL
5171   2760 E7            pop d
5172   2761 FD 43         mov [d], b
5173   2763 0A 70 27      jmp _if79_exit
5174   2766             _if79_else:
5175   2766             ;; tok = LOGICAL_NOT; 
5176   2766 3B D4 2E      mov d, _tok ; $tok
5177   2769 DA            push d
5178   276A 26 10 00      mov b, 16; LOGICAL_NOT
5179   276D E7            pop d
5180   276E FD 43         mov [d], b
5181   2770             _if79_exit:
5182   2770             ;; toktype = DELIMITER;   
5183   2770 3B D6 2E      mov d, _toktype ; $toktype
5184   2773 DA            push d
5185   2774 26 01 00      mov b, 1; DELIMITER
5186   2777 E7            pop d
5187   2778 FD 43         mov [d], b
5188   277A 0A 69 2C      jmp _if78_exit
5189   277D             _if78_else:
5190   277D             ;; if(*prog == '+'){ 
5191   277D             _if80_cond:
5192   277D 3B D8 2E      mov d, _prog ; $prog
5193   2780 2A            mov b, [d]
5194   2781 74            mov d, b
5195   2782 32            mov bl, [d]
5196   2783 A7 00         mov bh, 0
5197   2785             ; START RELATIONAL
5198   2785 D7            push a
5199   2786 11            mov a, b
5200   2787 26 2B 00      mov b, $2b
5201   278A B0            cmp a, b
5202   278B FD 71         seq ; ==
5203   278D E4            pop a
5204   278E             ; END RELATIONAL
5205   278E C0 00 00      cmp b, 0
5206   2791 C6 13 28      je _if80_else
5207   2794             _if80_true:
5208   2794             ;; *t++ = *prog++; 
5209   2794 FA FF FF      lea d, [bp + -1] ; $t
5210   2797 2A            mov b, [d]
5211   2798 D8            push b
5212   2799 FD 77         inc b
5213   279B FA FF FF      lea d, [bp + -1] ; $t
5214   279E FD 43         mov [d], b
5215   27A0 E5            pop b
5216   27A1 D8            push b
5217   27A2 3B D8 2E      mov d, _prog ; $prog
5218   27A5 2A            mov b, [d]
5219   27A6 D8            push b
5220   27A7 FD 77         inc b
5221   27A9 3B D8 2E      mov d, _prog ; $prog
5222   27AC FD 43         mov [d], b
5223   27AE E5            pop b
5224   27AF 74            mov d, b
5225   27B0 32            mov bl, [d]
5226   27B1 A7 00         mov bh, 0
5227   27B3 E7            pop d
5228   27B4 FD 3E         mov [d], bl
5229   27B6             ;; if(*prog == '+'){ 
5230   27B6             _if81_cond:
5231   27B6 3B D8 2E      mov d, _prog ; $prog
5232   27B9 2A            mov b, [d]
5233   27BA 74            mov d, b
5234   27BB 32            mov bl, [d]
5235   27BC A7 00         mov bh, 0
5236   27BE             ; START RELATIONAL
5237   27BE D7            push a
5238   27BF 11            mov a, b
5239   27C0 26 2B 00      mov b, $2b
5240   27C3 B0            cmp a, b
5241   27C4 FD 71         seq ; ==
5242   27C6 E4            pop a
5243   27C7             ; END RELATIONAL
5244   27C7 C0 00 00      cmp b, 0
5245   27CA C6 FC 27      je _if81_else
5246   27CD             _if81_true:
5247   27CD             ;; *t++ = *prog++; 
5248   27CD FA FF FF      lea d, [bp + -1] ; $t
5249   27D0 2A            mov b, [d]
5250   27D1 D8            push b
5251   27D2 FD 77         inc b
5252   27D4 FA FF FF      lea d, [bp + -1] ; $t
5253   27D7 FD 43         mov [d], b
5254   27D9 E5            pop b
5255   27DA D8            push b
5256   27DB 3B D8 2E      mov d, _prog ; $prog
5257   27DE 2A            mov b, [d]
5258   27DF D8            push b
5259   27E0 FD 77         inc b
5260   27E2 3B D8 2E      mov d, _prog ; $prog
5261   27E5 FD 43         mov [d], b
5262   27E7 E5            pop b
5263   27E8 74            mov d, b
5264   27E9 32            mov bl, [d]
5265   27EA A7 00         mov bh, 0
5266   27EC E7            pop d
5267   27ED FD 3E         mov [d], bl
5268   27EF             ;; tok = INCREMENT; 
5269   27EF 3B D4 2E      mov d, _tok ; $tok
5270   27F2 DA            push d
5271   27F3 26 05 00      mov b, 5; INCREMENT
5272   27F6 E7            pop d
5273   27F7 FD 43         mov [d], b
5274   27F9 0A 06 28      jmp _if81_exit
5275   27FC             _if81_else:
5276   27FC             ;; tok = PLUS; 
5277   27FC 3B D4 2E      mov d, _tok ; $tok
5278   27FF DA            push d
5279   2800 26 01 00      mov b, 1; PLUS
5280   2803 E7            pop d
5281   2804 FD 43         mov [d], b
5282   2806             _if81_exit:
5283   2806             ;; toktype = DELIMITER;   
5284   2806 3B D6 2E      mov d, _toktype ; $toktype
5285   2809 DA            push d
5286   280A 26 01 00      mov b, 1; DELIMITER
5287   280D E7            pop d
5288   280E FD 43         mov [d], b
5289   2810 0A 69 2C      jmp _if80_exit
5290   2813             _if80_else:
5291   2813             ;; if(*prog == '-'){ 
5292   2813             _if82_cond:
5293   2813 3B D8 2E      mov d, _prog ; $prog
5294   2816 2A            mov b, [d]
5295   2817 74            mov d, b
5296   2818 32            mov bl, [d]
5297   2819 A7 00         mov bh, 0
5298   281B             ; START RELATIONAL
5299   281B D7            push a
5300   281C 11            mov a, b
5301   281D 26 2D 00      mov b, $2d
5302   2820 B0            cmp a, b
5303   2821 FD 71         seq ; ==
5304   2823 E4            pop a
5305   2824             ; END RELATIONAL
5306   2824 C0 00 00      cmp b, 0
5307   2827 C6 A9 28      je _if82_else
5308   282A             _if82_true:
5309   282A             ;; *t++ = *prog++; 
5310   282A FA FF FF      lea d, [bp + -1] ; $t
5311   282D 2A            mov b, [d]
5312   282E D8            push b
5313   282F FD 77         inc b
5314   2831 FA FF FF      lea d, [bp + -1] ; $t
5315   2834 FD 43         mov [d], b
5316   2836 E5            pop b
5317   2837 D8            push b
5318   2838 3B D8 2E      mov d, _prog ; $prog
5319   283B 2A            mov b, [d]
5320   283C D8            push b
5321   283D FD 77         inc b
5322   283F 3B D8 2E      mov d, _prog ; $prog
5323   2842 FD 43         mov [d], b
5324   2844 E5            pop b
5325   2845 74            mov d, b
5326   2846 32            mov bl, [d]
5327   2847 A7 00         mov bh, 0
5328   2849 E7            pop d
5329   284A FD 3E         mov [d], bl
5330   284C             ;; if(*prog == '-'){ 
5331   284C             _if83_cond:
5332   284C 3B D8 2E      mov d, _prog ; $prog
5333   284F 2A            mov b, [d]
5334   2850 74            mov d, b
5335   2851 32            mov bl, [d]
5336   2852 A7 00         mov bh, 0
5337   2854             ; START RELATIONAL
5338   2854 D7            push a
5339   2855 11            mov a, b
5340   2856 26 2D 00      mov b, $2d
5341   2859 B0            cmp a, b
5342   285A FD 71         seq ; ==
5343   285C E4            pop a
5344   285D             ; END RELATIONAL
5345   285D C0 00 00      cmp b, 0
5346   2860 C6 92 28      je _if83_else
5347   2863             _if83_true:
5348   2863             ;; *t++ = *prog++; 
5349   2863 FA FF FF      lea d, [bp + -1] ; $t
5350   2866 2A            mov b, [d]
5351   2867 D8            push b
5352   2868 FD 77         inc b
5353   286A FA FF FF      lea d, [bp + -1] ; $t
5354   286D FD 43         mov [d], b
5355   286F E5            pop b
5356   2870 D8            push b
5357   2871 3B D8 2E      mov d, _prog ; $prog
5358   2874 2A            mov b, [d]
5359   2875 D8            push b
5360   2876 FD 77         inc b
5361   2878 3B D8 2E      mov d, _prog ; $prog
5362   287B FD 43         mov [d], b
5363   287D E5            pop b
5364   287E 74            mov d, b
5365   287F 32            mov bl, [d]
5366   2880 A7 00         mov bh, 0
5367   2882 E7            pop d
5368   2883 FD 3E         mov [d], bl
5369   2885             ;; tok = DECREMENT; 
5370   2885 3B D4 2E      mov d, _tok ; $tok
5371   2888 DA            push d
5372   2889 26 06 00      mov b, 6; DECREMENT
5373   288C E7            pop d
5374   288D FD 43         mov [d], b
5375   288F 0A 9C 28      jmp _if83_exit
5376   2892             _if83_else:
5377   2892             ;; tok = MINUS; 
5378   2892 3B D4 2E      mov d, _tok ; $tok
5379   2895 DA            push d
5380   2896 26 02 00      mov b, 2; MINUS
5381   2899 E7            pop d
5382   289A FD 43         mov [d], b
5383   289C             _if83_exit:
5384   289C             ;; toktype = DELIMITER;   
5385   289C 3B D6 2E      mov d, _toktype ; $toktype
5386   289F DA            push d
5387   28A0 26 01 00      mov b, 1; DELIMITER
5388   28A3 E7            pop d
5389   28A4 FD 43         mov [d], b
5390   28A6 0A 69 2C      jmp _if82_exit
5391   28A9             _if82_else:
5392   28A9             ;; if(*prog == '$'){ 
5393   28A9             _if84_cond:
5394   28A9 3B D8 2E      mov d, _prog ; $prog
5395   28AC 2A            mov b, [d]
5396   28AD 74            mov d, b
5397   28AE 32            mov bl, [d]
5398   28AF A7 00         mov bh, 0
5399   28B1             ; START RELATIONAL
5400   28B1 D7            push a
5401   28B2 11            mov a, b
5402   28B3 26 24 00      mov b, $24
5403   28B6 B0            cmp a, b
5404   28B7 FD 71         seq ; ==
5405   28B9 E4            pop a
5406   28BA             ; END RELATIONAL
5407   28BA C0 00 00      cmp b, 0
5408   28BD C6 F9 28      je _if84_else
5409   28C0             _if84_true:
5410   28C0             ;; *t++ = *prog++; 
5411   28C0 FA FF FF      lea d, [bp + -1] ; $t
5412   28C3 2A            mov b, [d]
5413   28C4 D8            push b
5414   28C5 FD 77         inc b
5415   28C7 FA FF FF      lea d, [bp + -1] ; $t
5416   28CA FD 43         mov [d], b
5417   28CC E5            pop b
5418   28CD D8            push b
5419   28CE 3B D8 2E      mov d, _prog ; $prog
5420   28D1 2A            mov b, [d]
5421   28D2 D8            push b
5422   28D3 FD 77         inc b
5423   28D5 3B D8 2E      mov d, _prog ; $prog
5424   28D8 FD 43         mov [d], b
5425   28DA E5            pop b
5426   28DB 74            mov d, b
5427   28DC 32            mov bl, [d]
5428   28DD A7 00         mov bh, 0
5429   28DF E7            pop d
5430   28E0 FD 3E         mov [d], bl
5431   28E2             ;; tok = DOLLAR; 
5432   28E2 3B D4 2E      mov d, _tok ; $tok
5433   28E5 DA            push d
5434   28E6 26 12 00      mov b, 18; DOLLAR
5435   28E9 E7            pop d
5436   28EA FD 43         mov [d], b
5437   28EC             ;; toktype = DELIMITER;   
5438   28EC 3B D6 2E      mov d, _toktype ; $toktype
5439   28EF DA            push d
5440   28F0 26 01 00      mov b, 1; DELIMITER
5441   28F3 E7            pop d
5442   28F4 FD 43         mov [d], b
5443   28F6 0A 69 2C      jmp _if84_exit
5444   28F9             _if84_else:
5445   28F9             ;; if(*prog == '^'){ 
5446   28F9             _if85_cond:
5447   28F9 3B D8 2E      mov d, _prog ; $prog
5448   28FC 2A            mov b, [d]
5449   28FD 74            mov d, b
5450   28FE 32            mov bl, [d]
5451   28FF A7 00         mov bh, 0
5452   2901             ; START RELATIONAL
5453   2901 D7            push a
5454   2902 11            mov a, b
5455   2903 26 5E 00      mov b, $5e
5456   2906 B0            cmp a, b
5457   2907 FD 71         seq ; ==
5458   2909 E4            pop a
5459   290A             ; END RELATIONAL
5460   290A C0 00 00      cmp b, 0
5461   290D C6 49 29      je _if85_else
5462   2910             _if85_true:
5463   2910             ;; *t++ = *prog++; 
5464   2910 FA FF FF      lea d, [bp + -1] ; $t
5465   2913 2A            mov b, [d]
5466   2914 D8            push b
5467   2915 FD 77         inc b
5468   2917 FA FF FF      lea d, [bp + -1] ; $t
5469   291A FD 43         mov [d], b
5470   291C E5            pop b
5471   291D D8            push b
5472   291E 3B D8 2E      mov d, _prog ; $prog
5473   2921 2A            mov b, [d]
5474   2922 D8            push b
5475   2923 FD 77         inc b
5476   2925 3B D8 2E      mov d, _prog ; $prog
5477   2928 FD 43         mov [d], b
5478   292A E5            pop b
5479   292B 74            mov d, b
5480   292C 32            mov bl, [d]
5481   292D A7 00         mov bh, 0
5482   292F E7            pop d
5483   2930 FD 3E         mov [d], bl
5484   2932             ;; tok = BITWISE_XOR; 
5485   2932 3B D4 2E      mov d, _tok ; $tok
5486   2935 DA            push d
5487   2936 26 17 00      mov b, 23; BITWISE_XOR
5488   2939 E7            pop d
5489   293A FD 43         mov [d], b
5490   293C             ;; toktype = DELIMITER;   
5491   293C 3B D6 2E      mov d, _toktype ; $toktype
5492   293F DA            push d
5493   2940 26 01 00      mov b, 1; DELIMITER
5494   2943 E7            pop d
5495   2944 FD 43         mov [d], b
5496   2946 0A 69 2C      jmp _if85_exit
5497   2949             _if85_else:
5498   2949             ;; if(*prog == '@'){ 
5499   2949             _if86_cond:
5500   2949 3B D8 2E      mov d, _prog ; $prog
5501   294C 2A            mov b, [d]
5502   294D 74            mov d, b
5503   294E 32            mov bl, [d]
5504   294F A7 00         mov bh, 0
5505   2951             ; START RELATIONAL
5506   2951 D7            push a
5507   2952 11            mov a, b
5508   2953 26 40 00      mov b, $40
5509   2956 B0            cmp a, b
5510   2957 FD 71         seq ; ==
5511   2959 E4            pop a
5512   295A             ; END RELATIONAL
5513   295A C0 00 00      cmp b, 0
5514   295D C6 99 29      je _if86_else
5515   2960             _if86_true:
5516   2960             ;; *t++ = *prog++; 
5517   2960 FA FF FF      lea d, [bp + -1] ; $t
5518   2963 2A            mov b, [d]
5519   2964 D8            push b
5520   2965 FD 77         inc b
5521   2967 FA FF FF      lea d, [bp + -1] ; $t
5522   296A FD 43         mov [d], b
5523   296C E5            pop b
5524   296D D8            push b
5525   296E 3B D8 2E      mov d, _prog ; $prog
5526   2971 2A            mov b, [d]
5527   2972 D8            push b
5528   2973 FD 77         inc b
5529   2975 3B D8 2E      mov d, _prog ; $prog
5530   2978 FD 43         mov [d], b
5531   297A E5            pop b
5532   297B 74            mov d, b
5533   297C 32            mov bl, [d]
5534   297D A7 00         mov bh, 0
5535   297F E7            pop d
5536   2980 FD 3E         mov [d], bl
5537   2982             ;; tok = AT; 
5538   2982 3B D4 2E      mov d, _tok ; $tok
5539   2985 DA            push d
5540   2986 26 14 00      mov b, 20; AT
5541   2989 E7            pop d
5542   298A FD 43         mov [d], b
5543   298C             ;; toktype = DELIMITER;   
5544   298C 3B D6 2E      mov d, _toktype ; $toktype
5545   298F DA            push d
5546   2990 26 01 00      mov b, 1; DELIMITER
5547   2993 E7            pop d
5548   2994 FD 43         mov [d], b
5549   2996 0A 69 2C      jmp _if86_exit
5550   2999             _if86_else:
5551   2999             ;; if(*prog == '*'){ 
5552   2999             _if87_cond:
5553   2999 3B D8 2E      mov d, _prog ; $prog
5554   299C 2A            mov b, [d]
5555   299D 74            mov d, b
5556   299E 32            mov bl, [d]
5557   299F A7 00         mov bh, 0
5558   29A1             ; START RELATIONAL
5559   29A1 D7            push a
5560   29A2 11            mov a, b
5561   29A3 26 2A 00      mov b, $2a
5562   29A6 B0            cmp a, b
5563   29A7 FD 71         seq ; ==
5564   29A9 E4            pop a
5565   29AA             ; END RELATIONAL
5566   29AA C0 00 00      cmp b, 0
5567   29AD C6 E9 29      je _if87_else
5568   29B0             _if87_true:
5569   29B0             ;; *t++ = *prog++; 
5570   29B0 FA FF FF      lea d, [bp + -1] ; $t
5571   29B3 2A            mov b, [d]
5572   29B4 D8            push b
5573   29B5 FD 77         inc b
5574   29B7 FA FF FF      lea d, [bp + -1] ; $t
5575   29BA FD 43         mov [d], b
5576   29BC E5            pop b
5577   29BD D8            push b
5578   29BE 3B D8 2E      mov d, _prog ; $prog
5579   29C1 2A            mov b, [d]
5580   29C2 D8            push b
5581   29C3 FD 77         inc b
5582   29C5 3B D8 2E      mov d, _prog ; $prog
5583   29C8 FD 43         mov [d], b
5584   29CA E5            pop b
5585   29CB 74            mov d, b
5586   29CC 32            mov bl, [d]
5587   29CD A7 00         mov bh, 0
5588   29CF E7            pop d
5589   29D0 FD 3E         mov [d], bl
5590   29D2             ;; tok = STAR; 
5591   29D2 3B D4 2E      mov d, _tok ; $tok
5592   29D5 DA            push d
5593   29D6 26 03 00      mov b, 3; STAR
5594   29D9 E7            pop d
5595   29DA FD 43         mov [d], b
5596   29DC             ;; toktype = DELIMITER;   
5597   29DC 3B D6 2E      mov d, _toktype ; $toktype
5598   29DF DA            push d
5599   29E0 26 01 00      mov b, 1; DELIMITER
5600   29E3 E7            pop d
5601   29E4 FD 43         mov [d], b
5602   29E6 0A 69 2C      jmp _if87_exit
5603   29E9             _if87_else:
5604   29E9             ;; if(*prog == '/'){ 
5605   29E9             _if88_cond:
5606   29E9 3B D8 2E      mov d, _prog ; $prog
5607   29EC 2A            mov b, [d]
5608   29ED 74            mov d, b
5609   29EE 32            mov bl, [d]
5610   29EF A7 00         mov bh, 0
5611   29F1             ; START RELATIONAL
5612   29F1 D7            push a
5613   29F2 11            mov a, b
5614   29F3 26 2F 00      mov b, $2f
5615   29F6 B0            cmp a, b
5616   29F7 FD 71         seq ; ==
5617   29F9 E4            pop a
5618   29FA             ; END RELATIONAL
5619   29FA C0 00 00      cmp b, 0
5620   29FD C6 39 2A      je _if88_else
5621   2A00             _if88_true:
5622   2A00             ;; *t++ = *prog++; 
5623   2A00 FA FF FF      lea d, [bp + -1] ; $t
5624   2A03 2A            mov b, [d]
5625   2A04 D8            push b
5626   2A05 FD 77         inc b
5627   2A07 FA FF FF      lea d, [bp + -1] ; $t
5628   2A0A FD 43         mov [d], b
5629   2A0C E5            pop b
5630   2A0D D8            push b
5631   2A0E 3B D8 2E      mov d, _prog ; $prog
5632   2A11 2A            mov b, [d]
5633   2A12 D8            push b
5634   2A13 FD 77         inc b
5635   2A15 3B D8 2E      mov d, _prog ; $prog
5636   2A18 FD 43         mov [d], b
5637   2A1A E5            pop b
5638   2A1B 74            mov d, b
5639   2A1C 32            mov bl, [d]
5640   2A1D A7 00         mov bh, 0
5641   2A1F E7            pop d
5642   2A20 FD 3E         mov [d], bl
5643   2A22             ;; tok = FSLASH; 
5644   2A22 3B D4 2E      mov d, _tok ; $tok
5645   2A25 DA            push d
5646   2A26 26 04 00      mov b, 4; FSLASH
5647   2A29 E7            pop d
5648   2A2A FD 43         mov [d], b
5649   2A2C             ;; toktype = DELIMITER;   
5650   2A2C 3B D6 2E      mov d, _toktype ; $toktype
5651   2A2F DA            push d
5652   2A30 26 01 00      mov b, 1; DELIMITER
5653   2A33 E7            pop d
5654   2A34 FD 43         mov [d], b
5655   2A36 0A 69 2C      jmp _if88_exit
5656   2A39             _if88_else:
5657   2A39             ;; if(*prog == '%'){ 
5658   2A39             _if89_cond:
5659   2A39 3B D8 2E      mov d, _prog ; $prog
5660   2A3C 2A            mov b, [d]
5661   2A3D 74            mov d, b
5662   2A3E 32            mov bl, [d]
5663   2A3F A7 00         mov bh, 0
5664   2A41             ; START RELATIONAL
5665   2A41 D7            push a
5666   2A42 11            mov a, b
5667   2A43 26 25 00      mov b, $25
5668   2A46 B0            cmp a, b
5669   2A47 FD 71         seq ; ==
5670   2A49 E4            pop a
5671   2A4A             ; END RELATIONAL
5672   2A4A C0 00 00      cmp b, 0
5673   2A4D C6 89 2A      je _if89_else
5674   2A50             _if89_true:
5675   2A50             ;; *t++ = *prog++; 
5676   2A50 FA FF FF      lea d, [bp + -1] ; $t
5677   2A53 2A            mov b, [d]
5678   2A54 D8            push b
5679   2A55 FD 77         inc b
5680   2A57 FA FF FF      lea d, [bp + -1] ; $t
5681   2A5A FD 43         mov [d], b
5682   2A5C E5            pop b
5683   2A5D D8            push b
5684   2A5E 3B D8 2E      mov d, _prog ; $prog
5685   2A61 2A            mov b, [d]
5686   2A62 D8            push b
5687   2A63 FD 77         inc b
5688   2A65 3B D8 2E      mov d, _prog ; $prog
5689   2A68 FD 43         mov [d], b
5690   2A6A E5            pop b
5691   2A6B 74            mov d, b
5692   2A6C 32            mov bl, [d]
5693   2A6D A7 00         mov bh, 0
5694   2A6F E7            pop d
5695   2A70 FD 3E         mov [d], bl
5696   2A72             ;; tok = MOD; 
5697   2A72 3B D4 2E      mov d, _tok ; $tok
5698   2A75 DA            push d
5699   2A76 26 07 00      mov b, 7; MOD
5700   2A79 E7            pop d
5701   2A7A FD 43         mov [d], b
5702   2A7C             ;; toktype = DELIMITER;   
5703   2A7C 3B D6 2E      mov d, _toktype ; $toktype
5704   2A7F DA            push d
5705   2A80 26 01 00      mov b, 1; DELIMITER
5706   2A83 E7            pop d
5707   2A84 FD 43         mov [d], b
5708   2A86 0A 69 2C      jmp _if89_exit
5709   2A89             _if89_else:
5710   2A89             ;; if(*prog == '('){ 
5711   2A89             _if90_cond:
5712   2A89 3B D8 2E      mov d, _prog ; $prog
5713   2A8C 2A            mov b, [d]
5714   2A8D 74            mov d, b
5715   2A8E 32            mov bl, [d]
5716   2A8F A7 00         mov bh, 0
5717   2A91             ; START RELATIONAL
5718   2A91 D7            push a
5719   2A92 11            mov a, b
5720   2A93 26 28 00      mov b, $28
5721   2A96 B0            cmp a, b
5722   2A97 FD 71         seq ; ==
5723   2A99 E4            pop a
5724   2A9A             ; END RELATIONAL
5725   2A9A C0 00 00      cmp b, 0
5726   2A9D C6 D9 2A      je _if90_else
5727   2AA0             _if90_true:
5728   2AA0             ;; *t++ = *prog++; 
5729   2AA0 FA FF FF      lea d, [bp + -1] ; $t
5730   2AA3 2A            mov b, [d]
5731   2AA4 D8            push b
5732   2AA5 FD 77         inc b
5733   2AA7 FA FF FF      lea d, [bp + -1] ; $t
5734   2AAA FD 43         mov [d], b
5735   2AAC E5            pop b
5736   2AAD D8            push b
5737   2AAE 3B D8 2E      mov d, _prog ; $prog
5738   2AB1 2A            mov b, [d]
5739   2AB2 D8            push b
5740   2AB3 FD 77         inc b
5741   2AB5 3B D8 2E      mov d, _prog ; $prog
5742   2AB8 FD 43         mov [d], b
5743   2ABA E5            pop b
5744   2ABB 74            mov d, b
5745   2ABC 32            mov bl, [d]
5746   2ABD A7 00         mov bh, 0
5747   2ABF E7            pop d
5748   2AC0 FD 3E         mov [d], bl
5749   2AC2             ;; tok = OPENING_PAREN; 
5750   2AC2 3B D4 2E      mov d, _tok ; $tok
5751   2AC5 DA            push d
5752   2AC6 26 1C 00      mov b, 28; OPENING_PAREN
5753   2AC9 E7            pop d
5754   2ACA FD 43         mov [d], b
5755   2ACC             ;; toktype = DELIMITER;   
5756   2ACC 3B D6 2E      mov d, _toktype ; $toktype
5757   2ACF DA            push d
5758   2AD0 26 01 00      mov b, 1; DELIMITER
5759   2AD3 E7            pop d
5760   2AD4 FD 43         mov [d], b
5761   2AD6 0A 69 2C      jmp _if90_exit
5762   2AD9             _if90_else:
5763   2AD9             ;; if(*prog == ')'){ 
5764   2AD9             _if91_cond:
5765   2AD9 3B D8 2E      mov d, _prog ; $prog
5766   2ADC 2A            mov b, [d]
5767   2ADD 74            mov d, b
5768   2ADE 32            mov bl, [d]
5769   2ADF A7 00         mov bh, 0
5770   2AE1             ; START RELATIONAL
5771   2AE1 D7            push a
5772   2AE2 11            mov a, b
5773   2AE3 26 29 00      mov b, $29
5774   2AE6 B0            cmp a, b
5775   2AE7 FD 71         seq ; ==
5776   2AE9 E4            pop a
5777   2AEA             ; END RELATIONAL
5778   2AEA C0 00 00      cmp b, 0
5779   2AED C6 29 2B      je _if91_else
5780   2AF0             _if91_true:
5781   2AF0             ;; *t++ = *prog++; 
5782   2AF0 FA FF FF      lea d, [bp + -1] ; $t
5783   2AF3 2A            mov b, [d]
5784   2AF4 D8            push b
5785   2AF5 FD 77         inc b
5786   2AF7 FA FF FF      lea d, [bp + -1] ; $t
5787   2AFA FD 43         mov [d], b
5788   2AFC E5            pop b
5789   2AFD D8            push b
5790   2AFE 3B D8 2E      mov d, _prog ; $prog
5791   2B01 2A            mov b, [d]
5792   2B02 D8            push b
5793   2B03 FD 77         inc b
5794   2B05 3B D8 2E      mov d, _prog ; $prog
5795   2B08 FD 43         mov [d], b
5796   2B0A E5            pop b
5797   2B0B 74            mov d, b
5798   2B0C 32            mov bl, [d]
5799   2B0D A7 00         mov bh, 0
5800   2B0F E7            pop d
5801   2B10 FD 3E         mov [d], bl
5802   2B12             ;; tok = CLOSING_PAREN; 
5803   2B12 3B D4 2E      mov d, _tok ; $tok
5804   2B15 DA            push d
5805   2B16 26 1D 00      mov b, 29; CLOSING_PAREN
5806   2B19 E7            pop d
5807   2B1A FD 43         mov [d], b
5808   2B1C             ;; toktype = DELIMITER;   
5809   2B1C 3B D6 2E      mov d, _toktype ; $toktype
5810   2B1F DA            push d
5811   2B20 26 01 00      mov b, 1; DELIMITER
5812   2B23 E7            pop d
5813   2B24 FD 43         mov [d], b
5814   2B26 0A 69 2C      jmp _if91_exit
5815   2B29             _if91_else:
5816   2B29             ;; if(*prog == ';'){ 
5817   2B29             _if92_cond:
5818   2B29 3B D8 2E      mov d, _prog ; $prog
5819   2B2C 2A            mov b, [d]
5820   2B2D 74            mov d, b
5821   2B2E 32            mov bl, [d]
5822   2B2F A7 00         mov bh, 0
5823   2B31             ; START RELATIONAL
5824   2B31 D7            push a
5825   2B32 11            mov a, b
5826   2B33 26 3B 00      mov b, $3b
5827   2B36 B0            cmp a, b
5828   2B37 FD 71         seq ; ==
5829   2B39 E4            pop a
5830   2B3A             ; END RELATIONAL
5831   2B3A C0 00 00      cmp b, 0
5832   2B3D C6 79 2B      je _if92_else
5833   2B40             _if92_true:
5834   2B40             ;; *t++ = *prog++; 
5835   2B40 FA FF FF      lea d, [bp + -1] ; $t
5836   2B43 2A            mov b, [d]
5837   2B44 D8            push b
5838   2B45 FD 77         inc b
5839   2B47 FA FF FF      lea d, [bp + -1] ; $t
5840   2B4A FD 43         mov [d], b
5841   2B4C E5            pop b
5842   2B4D D8            push b
5843   2B4E 3B D8 2E      mov d, _prog ; $prog
5844   2B51 2A            mov b, [d]
5845   2B52 D8            push b
5846   2B53 FD 77         inc b
5847   2B55 3B D8 2E      mov d, _prog ; $prog
5848   2B58 FD 43         mov [d], b
5849   2B5A E5            pop b
5850   2B5B 74            mov d, b
5851   2B5C 32            mov bl, [d]
5852   2B5D A7 00         mov bh, 0
5853   2B5F E7            pop d
5854   2B60 FD 3E         mov [d], bl
5855   2B62             ;; tok = SEMICOLON; 
5856   2B62 3B D4 2E      mov d, _tok ; $tok
5857   2B65 DA            push d
5858   2B66 26 23 00      mov b, 35; SEMICOLON
5859   2B69 E7            pop d
5860   2B6A FD 43         mov [d], b
5861   2B6C             ;; toktype = DELIMITER;   
5862   2B6C 3B D6 2E      mov d, _toktype ; $toktype
5863   2B6F DA            push d
5864   2B70 26 01 00      mov b, 1; DELIMITER
5865   2B73 E7            pop d
5866   2B74 FD 43         mov [d], b
5867   2B76 0A 69 2C      jmp _if92_exit
5868   2B79             _if92_else:
5869   2B79             ;; if(*prog == ':'){ 
5870   2B79             _if93_cond:
5871   2B79 3B D8 2E      mov d, _prog ; $prog
5872   2B7C 2A            mov b, [d]
5873   2B7D 74            mov d, b
5874   2B7E 32            mov bl, [d]
5875   2B7F A7 00         mov bh, 0
5876   2B81             ; START RELATIONAL
5877   2B81 D7            push a
5878   2B82 11            mov a, b
5879   2B83 26 3A 00      mov b, $3a
5880   2B86 B0            cmp a, b
5881   2B87 FD 71         seq ; ==
5882   2B89 E4            pop a
5883   2B8A             ; END RELATIONAL
5884   2B8A C0 00 00      cmp b, 0
5885   2B8D C6 C9 2B      je _if93_else
5886   2B90             _if93_true:
5887   2B90             ;; *t++ = *prog++; 
5888   2B90 FA FF FF      lea d, [bp + -1] ; $t
5889   2B93 2A            mov b, [d]
5890   2B94 D8            push b
5891   2B95 FD 77         inc b
5892   2B97 FA FF FF      lea d, [bp + -1] ; $t
5893   2B9A FD 43         mov [d], b
5894   2B9C E5            pop b
5895   2B9D D8            push b
5896   2B9E 3B D8 2E      mov d, _prog ; $prog
5897   2BA1 2A            mov b, [d]
5898   2BA2 D8            push b
5899   2BA3 FD 77         inc b
5900   2BA5 3B D8 2E      mov d, _prog ; $prog
5901   2BA8 FD 43         mov [d], b
5902   2BAA E5            pop b
5903   2BAB 74            mov d, b
5904   2BAC 32            mov bl, [d]
5905   2BAD A7 00         mov bh, 0
5906   2BAF E7            pop d
5907   2BB0 FD 3E         mov [d], bl
5908   2BB2             ;; tok = COLON; 
5909   2BB2 3B D4 2E      mov d, _tok ; $tok
5910   2BB5 DA            push d
5911   2BB6 26 22 00      mov b, 34; COLON
5912   2BB9 E7            pop d
5913   2BBA FD 43         mov [d], b
5914   2BBC             ;; toktype = DELIMITER;   
5915   2BBC 3B D6 2E      mov d, _toktype ; $toktype
5916   2BBF DA            push d
5917   2BC0 26 01 00      mov b, 1; DELIMITER
5918   2BC3 E7            pop d
5919   2BC4 FD 43         mov [d], b
5920   2BC6 0A 69 2C      jmp _if93_exit
5921   2BC9             _if93_else:
5922   2BC9             ;; if(*prog == ','){ 
5923   2BC9             _if94_cond:
5924   2BC9 3B D8 2E      mov d, _prog ; $prog
5925   2BCC 2A            mov b, [d]
5926   2BCD 74            mov d, b
5927   2BCE 32            mov bl, [d]
5928   2BCF A7 00         mov bh, 0
5929   2BD1             ; START RELATIONAL
5930   2BD1 D7            push a
5931   2BD2 11            mov a, b
5932   2BD3 26 2C 00      mov b, $2c
5933   2BD6 B0            cmp a, b
5934   2BD7 FD 71         seq ; ==
5935   2BD9 E4            pop a
5936   2BDA             ; END RELATIONAL
5937   2BDA C0 00 00      cmp b, 0
5938   2BDD C6 19 2C      je _if94_else
5939   2BE0             _if94_true:
5940   2BE0             ;; *t++ = *prog++; 
5941   2BE0 FA FF FF      lea d, [bp + -1] ; $t
5942   2BE3 2A            mov b, [d]
5943   2BE4 D8            push b
5944   2BE5 FD 77         inc b
5945   2BE7 FA FF FF      lea d, [bp + -1] ; $t
5946   2BEA FD 43         mov [d], b
5947   2BEC E5            pop b
5948   2BED D8            push b
5949   2BEE 3B D8 2E      mov d, _prog ; $prog
5950   2BF1 2A            mov b, [d]
5951   2BF2 D8            push b
5952   2BF3 FD 77         inc b
5953   2BF5 3B D8 2E      mov d, _prog ; $prog
5954   2BF8 FD 43         mov [d], b
5955   2BFA E5            pop b
5956   2BFB 74            mov d, b
5957   2BFC 32            mov bl, [d]
5958   2BFD A7 00         mov bh, 0
5959   2BFF E7            pop d
5960   2C00 FD 3E         mov [d], bl
5961   2C02             ;; tok = COMMA; 
5962   2C02 3B D4 2E      mov d, _tok ; $tok
5963   2C05 DA            push d
5964   2C06 26 24 00      mov b, 36; COMMA
5965   2C09 E7            pop d
5966   2C0A FD 43         mov [d], b
5967   2C0C             ;; toktype = DELIMITER;   
5968   2C0C 3B D6 2E      mov d, _toktype ; $toktype
5969   2C0F DA            push d
5970   2C10 26 01 00      mov b, 1; DELIMITER
5971   2C13 E7            pop d
5972   2C14 FD 43         mov [d], b
5973   2C16 0A 69 2C      jmp _if94_exit
5974   2C19             _if94_else:
5975   2C19             ;; if(*prog == '.'){ 
5976   2C19             _if95_cond:
5977   2C19 3B D8 2E      mov d, _prog ; $prog
5978   2C1C 2A            mov b, [d]
5979   2C1D 74            mov d, b
5980   2C1E 32            mov bl, [d]
5981   2C1F A7 00         mov bh, 0
5982   2C21             ; START RELATIONAL
5983   2C21 D7            push a
5984   2C22 11            mov a, b
5985   2C23 26 2E 00      mov b, $2e
5986   2C26 B0            cmp a, b
5987   2C27 FD 71         seq ; ==
5988   2C29 E4            pop a
5989   2C2A             ; END RELATIONAL
5990   2C2A C0 00 00      cmp b, 0
5991   2C2D C6 69 2C      je _if95_exit
5992   2C30             _if95_true:
5993   2C30             ;; *t++ = *prog++; 
5994   2C30 FA FF FF      lea d, [bp + -1] ; $t
5995   2C33 2A            mov b, [d]
5996   2C34 D8            push b
5997   2C35 FD 77         inc b
5998   2C37 FA FF FF      lea d, [bp + -1] ; $t
5999   2C3A FD 43         mov [d], b
6000   2C3C E5            pop b
6001   2C3D D8            push b
6002   2C3E 3B D8 2E      mov d, _prog ; $prog
6003   2C41 2A            mov b, [d]
6004   2C42 D8            push b
6005   2C43 FD 77         inc b
6006   2C45 3B D8 2E      mov d, _prog ; $prog
6007   2C48 FD 43         mov [d], b
6008   2C4A E5            pop b
6009   2C4B 74            mov d, b
6010   2C4C 32            mov bl, [d]
6011   2C4D A7 00         mov bh, 0
6012   2C4F E7            pop d
6013   2C50 FD 3E         mov [d], bl
6014   2C52             ;; tok = DOT; 
6015   2C52 3B D4 2E      mov d, _tok ; $tok
6016   2C55 DA            push d
6017   2C56 26 25 00      mov b, 37; DOT
6018   2C59 E7            pop d
6019   2C5A FD 43         mov [d], b
6020   2C5C             ;; toktype = DELIMITER;   
6021   2C5C 3B D6 2E      mov d, _toktype ; $toktype
6022   2C5F DA            push d
6023   2C60 26 01 00      mov b, 1; DELIMITER
6024   2C63 E7            pop d
6025   2C64 FD 43         mov [d], b
6026   2C66 0A 69 2C      jmp _if95_exit
6027   2C69             _if95_exit:
6028   2C69             _if94_exit:
6029   2C69             _if93_exit:
6030   2C69             _if92_exit:
6031   2C69             _if91_exit:
6032   2C69             _if90_exit:
6033   2C69             _if89_exit:
6034   2C69             _if88_exit:
6035   2C69             _if87_exit:
6036   2C69             _if86_exit:
6037   2C69             _if85_exit:
6038   2C69             _if84_exit:
6039   2C69             _if82_exit:
6040   2C69             _if80_exit:
6041   2C69             _if78_exit:
6042   2C69             _if75_exit:
6043   2C69             _if72_exit:
6044   2C69             _if71_exit:
6045   2C69             _if69_exit:
6046   2C69             _if67_exit:
6047   2C69             _if65_exit:
6048   2C69             _if64_exit:
6049   2C69             _if63_exit:
6050   2C69             _if62_exit:
6051   2C69             _if61_exit:
6052   2C69             _if60_exit:
6053   2C69             _if57_exit:
6054   2C69             _if55_exit:
6055   2C69             _if53_exit:
6056   2C69             ;; *t = '\0'; 
6057   2C69 FA FF FF      lea d, [bp + -1] ; $t
6058   2C6C 2A            mov b, [d]
6059   2C6D D8            push b
6060   2C6E 26 00 00      mov b, $0
6061   2C71 E7            pop d
6062   2C72 FD 3E         mov [d], bl
6063   2C74 F9            leave
6064   2C75 09            ret
6065   2C76             
6066   2C76             convert_constant:
6067   2C76 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6068   2C79             ; $s 
6069   2C79             ; $t 
6070   2C79 52 04 00      sub sp, 4
6071   2C7C             ;; t = token; 
6072   2C7C FA FD FF      lea d, [bp + -3] ; $t
6073   2C7F DA            push d
6074   2C80 3B DA 2E      mov d, _token_data ; $token
6075   2C83 2D            mov b, d
6076   2C84 E7            pop d
6077   2C85 FD 43         mov [d], b
6078   2C87             ;; s = string_const; 
6079   2C87 FA FF FF      lea d, [bp + -1] ; $s
6080   2C8A DA            push d
6081   2C8B 3B DA 2F      mov d, _string_const_data ; $string_const
6082   2C8E 2D            mov b, d
6083   2C8F E7            pop d
6084   2C90 FD 43         mov [d], b
6085   2C92             ;; if(toktype == CHAR_CONST){ 
6086   2C92             _if96_cond:
6087   2C92 3B D6 2E      mov d, _toktype ; $toktype
6088   2C95 2A            mov b, [d]
6089   2C96             ; START RELATIONAL
6090   2C96 D7            push a
6091   2C97 11            mov a, b
6092   2C98 26 02 00      mov b, 2; CHAR_CONST
6093   2C9B B0            cmp a, b
6094   2C9C FD 71         seq ; ==
6095   2C9E E4            pop a
6096   2C9F             ; END RELATIONAL
6097   2C9F C0 00 00      cmp b, 0
6098   2CA2 C6 31 2E      je _if96_else
6099   2CA5             _if96_true:
6100   2CA5             ;; t++; 
6101   2CA5 FA FD FF      lea d, [bp + -3] ; $t
6102   2CA8 2A            mov b, [d]
6103   2CA9 D8            push b
6104   2CAA FD 77         inc b
6105   2CAC FA FD FF      lea d, [bp + -3] ; $t
6106   2CAF FD 43         mov [d], b
6107   2CB1 E5            pop b
6108   2CB2             ;; if(*t == '\\'){ 
6109   2CB2             _if97_cond:
6110   2CB2 FA FD FF      lea d, [bp + -3] ; $t
6111   2CB5 2A            mov b, [d]
6112   2CB6 74            mov d, b
6113   2CB7 32            mov bl, [d]
6114   2CB8 A7 00         mov bh, 0
6115   2CBA             ; START RELATIONAL
6116   2CBA D7            push a
6117   2CBB 11            mov a, b
6118   2CBC 26 5C 00      mov b, $5c
6119   2CBF B0            cmp a, b
6120   2CC0 FD 71         seq ; ==
6121   2CC2 E4            pop a
6122   2CC3             ; END RELATIONAL
6123   2CC3 C0 00 00      cmp b, 0
6124   2CC6 C6 15 2E      je _if97_else
6125   2CC9             _if97_true:
6126   2CC9             ;; t++; 
6127   2CC9 FA FD FF      lea d, [bp + -3] ; $t
6128   2CCC 2A            mov b, [d]
6129   2CCD D8            push b
6130   2CCE FD 77         inc b
6131   2CD0 FA FD FF      lea d, [bp + -3] ; $t
6132   2CD3 FD 43         mov [d], b
6133   2CD5 E5            pop b
6134   2CD6             ;; switch(*t){ 
6135   2CD6             _switch98_expr:
6136   2CD6 FA FD FF      lea d, [bp + -3] ; $t
6137   2CD9 2A            mov b, [d]
6138   2CDA 74            mov d, b
6139   2CDB 32            mov bl, [d]
6140   2CDC A7 00         mov bh, 0
6141   2CDE             _switch98_comparisons:
6142   2CDE C1 30         cmp bl, $30
6143   2CE0 C6 18 2D      je _switch98_case0
6144   2CE3 C1 61         cmp bl, $61
6145   2CE5 C6 2F 2D      je _switch98_case1
6146   2CE8 C1 62         cmp bl, $62
6147   2CEA C6 46 2D      je _switch98_case2
6148   2CED C1 66         cmp bl, $66
6149   2CEF C6 5D 2D      je _switch98_case3
6150   2CF2 C1 6E         cmp bl, $6e
6151   2CF4 C6 74 2D      je _switch98_case4
6152   2CF7 C1 72         cmp bl, $72
6153   2CF9 C6 8B 2D      je _switch98_case5
6154   2CFC C1 74         cmp bl, $74
6155   2CFE C6 A2 2D      je _switch98_case6
6156   2D01 C1 76         cmp bl, $76
6157   2D03 C6 B9 2D      je _switch98_case7
6158   2D06 C1 5C         cmp bl, $5c
6159   2D08 C6 D0 2D      je _switch98_case8
6160   2D0B C1 27         cmp bl, $27
6161   2D0D C6 E7 2D      je _switch98_case9
6162   2D10 C1 22         cmp bl, $22
6163   2D12 C6 FE 2D      je _switch98_case10
6164   2D15 0A 12 2E      jmp _switch98_exit
6165   2D18             _switch98_case0:
6166   2D18             ;; *s++ = '\0'; 
6167   2D18 FA FF FF      lea d, [bp + -1] ; $s
6168   2D1B 2A            mov b, [d]
6169   2D1C D8            push b
6170   2D1D FD 77         inc b
6171   2D1F FA FF FF      lea d, [bp + -1] ; $s
6172   2D22 FD 43         mov [d], b
6173   2D24 E5            pop b
6174   2D25 D8            push b
6175   2D26 26 00 00      mov b, $0
6176   2D29 E7            pop d
6177   2D2A FD 3E         mov [d], bl
6178   2D2C             ;; break; 
6179   2D2C 0A 12 2E      jmp _switch98_exit ; case break
6180   2D2F             _switch98_case1:
6181   2D2F             ;; *s++ = '\a'; 
6182   2D2F FA FF FF      lea d, [bp + -1] ; $s
6183   2D32 2A            mov b, [d]
6184   2D33 D8            push b
6185   2D34 FD 77         inc b
6186   2D36 FA FF FF      lea d, [bp + -1] ; $s
6187   2D39 FD 43         mov [d], b
6188   2D3B E5            pop b
6189   2D3C D8            push b
6190   2D3D 26 07 00      mov b, $7
6191   2D40 E7            pop d
6192   2D41 FD 3E         mov [d], bl
6193   2D43             ;; break; 
6194   2D43 0A 12 2E      jmp _switch98_exit ; case break
6195   2D46             _switch98_case2:
6196   2D46             ;; *s++ = '\b'; 
6197   2D46 FA FF FF      lea d, [bp + -1] ; $s
6198   2D49 2A            mov b, [d]
6199   2D4A D8            push b
6200   2D4B FD 77         inc b
6201   2D4D FA FF FF      lea d, [bp + -1] ; $s
6202   2D50 FD 43         mov [d], b
6203   2D52 E5            pop b
6204   2D53 D8            push b
6205   2D54 26 08 00      mov b, $8
6206   2D57 E7            pop d
6207   2D58 FD 3E         mov [d], bl
6208   2D5A             ;; break;   
6209   2D5A 0A 12 2E      jmp _switch98_exit ; case break
6210   2D5D             _switch98_case3:
6211   2D5D             ;; *s++ = '\f'; 
6212   2D5D FA FF FF      lea d, [bp + -1] ; $s
6213   2D60 2A            mov b, [d]
6214   2D61 D8            push b
6215   2D62 FD 77         inc b
6216   2D64 FA FF FF      lea d, [bp + -1] ; $s
6217   2D67 FD 43         mov [d], b
6218   2D69 E5            pop b
6219   2D6A D8            push b
6220   2D6B 26 0C 00      mov b, $c
6221   2D6E E7            pop d
6222   2D6F FD 3E         mov [d], bl
6223   2D71             ;; break; 
6224   2D71 0A 12 2E      jmp _switch98_exit ; case break
6225   2D74             _switch98_case4:
6226   2D74             ;; *s++ = '\n'; 
6227   2D74 FA FF FF      lea d, [bp + -1] ; $s
6228   2D77 2A            mov b, [d]
6229   2D78 D8            push b
6230   2D79 FD 77         inc b
6231   2D7B FA FF FF      lea d, [bp + -1] ; $s
6232   2D7E FD 43         mov [d], b
6233   2D80 E5            pop b
6234   2D81 D8            push b
6235   2D82 26 0A 00      mov b, $a
6236   2D85 E7            pop d
6237   2D86 FD 3E         mov [d], bl
6238   2D88             ;; break; 
6239   2D88 0A 12 2E      jmp _switch98_exit ; case break
6240   2D8B             _switch98_case5:
6241   2D8B             ;; *s++ = '\r'; 
6242   2D8B FA FF FF      lea d, [bp + -1] ; $s
6243   2D8E 2A            mov b, [d]
6244   2D8F D8            push b
6245   2D90 FD 77         inc b
6246   2D92 FA FF FF      lea d, [bp + -1] ; $s
6247   2D95 FD 43         mov [d], b
6248   2D97 E5            pop b
6249   2D98 D8            push b
6250   2D99 26 0D 00      mov b, $d
6251   2D9C E7            pop d
6252   2D9D FD 3E         mov [d], bl
6253   2D9F             ;; break; 
6254   2D9F 0A 12 2E      jmp _switch98_exit ; case break
6255   2DA2             _switch98_case6:
6256   2DA2             ;; *s++ = '\t'; 
6257   2DA2 FA FF FF      lea d, [bp + -1] ; $s
6258   2DA5 2A            mov b, [d]
6259   2DA6 D8            push b
6260   2DA7 FD 77         inc b
6261   2DA9 FA FF FF      lea d, [bp + -1] ; $s
6262   2DAC FD 43         mov [d], b
6263   2DAE E5            pop b
6264   2DAF D8            push b
6265   2DB0 26 09 00      mov b, $9
6266   2DB3 E7            pop d
6267   2DB4 FD 3E         mov [d], bl
6268   2DB6             ;; break; 
6269   2DB6 0A 12 2E      jmp _switch98_exit ; case break
6270   2DB9             _switch98_case7:
6271   2DB9             ;; *s++ = '\v'; 
6272   2DB9 FA FF FF      lea d, [bp + -1] ; $s
6273   2DBC 2A            mov b, [d]
6274   2DBD D8            push b
6275   2DBE FD 77         inc b
6276   2DC0 FA FF FF      lea d, [bp + -1] ; $s
6277   2DC3 FD 43         mov [d], b
6278   2DC5 E5            pop b
6279   2DC6 D8            push b
6280   2DC7 26 0B 00      mov b, $b
6281   2DCA E7            pop d
6282   2DCB FD 3E         mov [d], bl
6283   2DCD             ;; break; 
6284   2DCD 0A 12 2E      jmp _switch98_exit ; case break
6285   2DD0             _switch98_case8:
6286   2DD0             ;; *s++ = '\\'; 
6287   2DD0 FA FF FF      lea d, [bp + -1] ; $s
6288   2DD3 2A            mov b, [d]
6289   2DD4 D8            push b
6290   2DD5 FD 77         inc b
6291   2DD7 FA FF FF      lea d, [bp + -1] ; $s
6292   2DDA FD 43         mov [d], b
6293   2DDC E5            pop b
6294   2DDD D8            push b
6295   2DDE 26 5C 00      mov b, $5c
6296   2DE1 E7            pop d
6297   2DE2 FD 3E         mov [d], bl
6298   2DE4             ;; break; 
6299   2DE4 0A 12 2E      jmp _switch98_exit ; case break
6300   2DE7             _switch98_case9:
6301   2DE7             ;; *s++ = '\''; 
6302   2DE7 FA FF FF      lea d, [bp + -1] ; $s
6303   2DEA 2A            mov b, [d]
6304   2DEB D8            push b
6305   2DEC FD 77         inc b
6306   2DEE FA FF FF      lea d, [bp + -1] ; $s
6307   2DF1 FD 43         mov [d], b
6308   2DF3 E5            pop b
6309   2DF4 D8            push b
6310   2DF5 26 27 00      mov b, $27
6311   2DF8 E7            pop d
6312   2DF9 FD 3E         mov [d], bl
6313   2DFB             ;; break; 
6314   2DFB 0A 12 2E      jmp _switch98_exit ; case break
6315   2DFE             _switch98_case10:
6316   2DFE             ;; *s++ = '\"'; 
6317   2DFE FA FF FF      lea d, [bp + -1] ; $s
6318   2E01 2A            mov b, [d]
6319   2E02 D8            push b
6320   2E03 FD 77         inc b
6321   2E05 FA FF FF      lea d, [bp + -1] ; $s
6322   2E08 FD 43         mov [d], b
6323   2E0A E5            pop b
6324   2E0B D8            push b
6325   2E0C 26 22 00      mov b, $22
6326   2E0F E7            pop d
6327   2E10 FD 3E         mov [d], bl
6328   2E12             _switch98_exit:
6329   2E12 0A 2E 2E      jmp _if97_exit
6330   2E15             _if97_else:
6331   2E15             ;; *s++ = *t; 
6332   2E15 FA FF FF      lea d, [bp + -1] ; $s
6333   2E18 2A            mov b, [d]
6334   2E19 D8            push b
6335   2E1A FD 77         inc b
6336   2E1C FA FF FF      lea d, [bp + -1] ; $s
6337   2E1F FD 43         mov [d], b
6338   2E21 E5            pop b
6339   2E22 D8            push b
6340   2E23 FA FD FF      lea d, [bp + -3] ; $t
6341   2E26 2A            mov b, [d]
6342   2E27 74            mov d, b
6343   2E28 32            mov bl, [d]
6344   2E29 A7 00         mov bh, 0
6345   2E2B E7            pop d
6346   2E2C FD 3E         mov [d], bl
6347   2E2E             _if97_exit:
6348   2E2E 0A 9D 2E      jmp _if96_exit
6349   2E31             _if96_else:
6350   2E31             ;; if(toktype == STRING_CONST){ 
6351   2E31             _if99_cond:
6352   2E31 3B D6 2E      mov d, _toktype ; $toktype
6353   2E34 2A            mov b, [d]
6354   2E35             ; START RELATIONAL
6355   2E35 D7            push a
6356   2E36 11            mov a, b
6357   2E37 26 03 00      mov b, 3; STRING_CONST
6358   2E3A B0            cmp a, b
6359   2E3B FD 71         seq ; ==
6360   2E3D E4            pop a
6361   2E3E             ; END RELATIONAL
6362   2E3E C0 00 00      cmp b, 0
6363   2E41 C6 9D 2E      je _if99_exit
6364   2E44             _if99_true:
6365   2E44             ;; t++; 
6366   2E44 FA FD FF      lea d, [bp + -3] ; $t
6367   2E47 2A            mov b, [d]
6368   2E48 D8            push b
6369   2E49 FD 77         inc b
6370   2E4B FA FD FF      lea d, [bp + -3] ; $t
6371   2E4E FD 43         mov [d], b
6372   2E50 E5            pop b
6373   2E51             ;; while(*t != '\"' && *t){ 
6374   2E51             _while100_cond:
6375   2E51 FA FD FF      lea d, [bp + -3] ; $t
6376   2E54 2A            mov b, [d]
6377   2E55 74            mov d, b
6378   2E56 32            mov bl, [d]
6379   2E57 A7 00         mov bh, 0
6380   2E59             ; START RELATIONAL
6381   2E59 D7            push a
6382   2E5A 11            mov a, b
6383   2E5B 26 22 00      mov b, $22
6384   2E5E B0            cmp a, b
6385   2E5F FD 72         sneq ; !=
6386   2E61 E4            pop a
6387   2E62             ; END RELATIONAL
6388   2E62 D7            push a
6389   2E63 11            mov a, b
6390   2E64 FA FD FF      lea d, [bp + -3] ; $t
6391   2E67 2A            mov b, [d]
6392   2E68 74            mov d, b
6393   2E69 32            mov bl, [d]
6394   2E6A A7 00         mov bh, 0
6395   2E6C FD A7         sand a, b
6396   2E6E E4            pop a
6397   2E6F C0 00 00      cmp b, 0
6398   2E72 C6 9A 2E      je _while100_exit
6399   2E75             _while100_block:
6400   2E75             ;; *s++ = *t++; 
6401   2E75 FA FF FF      lea d, [bp + -1] ; $s
6402   2E78 2A            mov b, [d]
6403   2E79 D8            push b
6404   2E7A FD 77         inc b
6405   2E7C FA FF FF      lea d, [bp + -1] ; $s
6406   2E7F FD 43         mov [d], b
6407   2E81 E5            pop b
6408   2E82 D8            push b
6409   2E83 FA FD FF      lea d, [bp + -3] ; $t
6410   2E86 2A            mov b, [d]
6411   2E87 D8            push b
6412   2E88 FD 77         inc b
6413   2E8A FA FD FF      lea d, [bp + -3] ; $t
6414   2E8D FD 43         mov [d], b
6415   2E8F E5            pop b
6416   2E90 74            mov d, b
6417   2E91 32            mov bl, [d]
6418   2E92 A7 00         mov bh, 0
6419   2E94 E7            pop d
6420   2E95 FD 3E         mov [d], bl
6421   2E97 0A 51 2E      jmp _while100_cond
6422   2E9A             _while100_exit:
6423   2E9A 0A 9D 2E      jmp _if99_exit
6424   2E9D             _if99_exit:
6425   2E9D             _if96_exit:
6426   2E9D             ;; *s = '\0'; 
6427   2E9D FA FF FF      lea d, [bp + -1] ; $s
6428   2EA0 2A            mov b, [d]
6429   2EA1 D8            push b
6430   2EA2 26 00 00      mov b, $0
6431   2EA5 E7            pop d
6432   2EA6 FD 3E         mov [d], bl
6433   2EA8 F9            leave
6434   2EA9 09            ret
6435   2EAA             
6436   2EAA             error:
6437   2EAA F8 00 00      enter 0 ; (push bp; mov bp, sp)
6438   2EAD             ;; printf("\nError: "); 
6439   2EAD 26 38 33      mov b, _s5 ; "\nError: "
6440   2EB0 FD AB         swp b
6441   2EB2 D8            push b
6442   2EB3 07 2C 0C      call printf
6443   2EB6 51 02 00      add sp, 2
6444   2EB9             ;; printf(msg); 
6445   2EB9 FA 05 00      lea d, [bp + 5] ; $msg
6446   2EBC 2A            mov b, [d]
6447   2EBD FD AB         swp b
6448   2EBF D8            push b
6449   2EC0 07 2C 0C      call printf
6450   2EC3 51 02 00      add sp, 2
6451   2EC6             ;; printf("\n"); 
6452   2EC6 26 41 33      mov b, _s6 ; "\n"
6453   2EC9 FD AB         swp b
6454   2ECB D8            push b
6455   2ECC 07 2C 0C      call printf
6456   2ECF 51 02 00      add sp, 2
6457   2ED2 F9            leave
6458   2ED3 09            ret
6459   2ED4             ; --- END TEXT BLOCK
6460   2ED4             
6461   2ED4             ; --- BEGIN DATA BLOCK
6462   2ED4 00 00       _tok: .fill 2, 0
6463   2ED6 00 00       _toktype: .fill 2, 0
6464   2ED8 00 00       _prog: .fill 2, 0
6465   2EDA 00 00 00 00 _token_data: .fill 256, 0
6465   2EDE 00 00 00 00 
6465   2EE2 00 00 00 00 
6465   2EE6 00 00 00 00 
6465   2EEA 00 00 00 00 
6465   2EEE 00 00 00 00 
6465   2EF2 00 00 00 00 
6465   2EF6 00 00 00 00 
6465   2EFA 00 00 00 00 
6465   2EFE 00 00 00 00 
6465   2F02 00 00 00 00 
6465   2F06 00 00 00 00 
6465   2F0A 00 00 00 00 
6465   2F0E 00 00 00 00 
6465   2F12 00 00 00 00 
6465   2F16 00 00 00 00 
6465   2F1A 00 00 00 00 
6465   2F1E 00 00 00 00 
6465   2F22 00 00 00 00 
6465   2F26 00 00 00 00 
6465   2F2A 00 00 00 00 
6465   2F2E 00 00 00 00 
6465   2F32 00 00 00 00 
6465   2F36 00 00 00 00 
6465   2F3A 00 00 00 00 
6465   2F3E 00 00 00 00 
6465   2F42 00 00 00 00 
6465   2F46 00 00 00 00 
6465   2F4A 00 00 00 00 
6465   2F4E 00 00 00 00 
6465   2F52 00 00 00 00 
6465   2F56 00 00 00 00 
6465   2F5A 00 00 00 00 
6465   2F5E 00 00 00 00 
6465   2F62 00 00 00 00 
6465   2F66 00 00 00 00 
6465   2F6A 00 00 00 00 
6465   2F6E 00 00 00 00 
6465   2F72 00 00 00 00 
6465   2F76 00 00 00 00 
6465   2F7A 00 00 00 00 
6465   2F7E 00 00 00 00 
6465   2F82 00 00 00 00 
6465   2F86 00 00 00 00 
6465   2F8A 00 00 00 00 
6465   2F8E 00 00 00 00 
6465   2F92 00 00 00 00 
6465   2F96 00 00 00 00 
6465   2F9A 00 00 00 00 
6465   2F9E 00 00 00 00 
6465   2FA2 00 00 00 00 
6465   2FA6 00 00 00 00 
6465   2FAA 00 00 00 00 
6465   2FAE 00 00 00 00 
6465   2FB2 00 00 00 00 
6465   2FB6 00 00 00 00 
6465   2FBA 00 00 00 00 
6465   2FBE 00 00 00 00 
6465   2FC2 00 00 00 00 
6465   2FC6 00 00 00 00 
6465   2FCA 00 00 00 00 
6465   2FCE 00 00 00 00 
6465   2FD2 00 00 00 00 
6465   2FD6 00 00 00 00 
6466   2FDA 00 00 00 00 _string_const_data: .fill 256, 0
6466   2FDE 00 00 00 00 
6466   2FE2 00 00 00 00 
6466   2FE6 00 00 00 00 
6466   2FEA 00 00 00 00 
6466   2FEE 00 00 00 00 
6466   2FF2 00 00 00 00 
6466   2FF6 00 00 00 00 
6466   2FFA 00 00 00 00 
6466   2FFE 00 00 00 00 
6466   3002 00 00 00 00 
6466   3006 00 00 00 00 
6466   300A 00 00 00 00 
6466   300E 00 00 00 00 
6466   3012 00 00 00 00 
6466   3016 00 00 00 00 
6466   301A 00 00 00 00 
6466   301E 00 00 00 00 
6466   3022 00 00 00 00 
6466   3026 00 00 00 00 
6466   302A 00 00 00 00 
6466   302E 00 00 00 00 
6466   3032 00 00 00 00 
6466   3036 00 00 00 00 
6466   303A 00 00 00 00 
6466   303E 00 00 00 00 
6466   3042 00 00 00 00 
6466   3046 00 00 00 00 
6466   304A 00 00 00 00 
6466   304E 00 00 00 00 
6466   3052 00 00 00 00 
6466   3056 00 00 00 00 
6466   305A 00 00 00 00 
6466   305E 00 00 00 00 
6466   3062 00 00 00 00 
6466   3066 00 00 00 00 
6466   306A 00 00 00 00 
6466   306E 00 00 00 00 
6466   3072 00 00 00 00 
6466   3076 00 00 00 00 
6466   307A 00 00 00 00 
6466   307E 00 00 00 00 
6466   3082 00 00 00 00 
6466   3086 00 00 00 00 
6466   308A 00 00 00 00 
6466   308E 00 00 00 00 
6466   3092 00 00 00 00 
6466   3096 00 00 00 00 
6466   309A 00 00 00 00 
6466   309E 00 00 00 00 
6466   30A2 00 00 00 00 
6466   30A6 00 00 00 00 
6466   30AA 00 00 00 00 
6466   30AE 00 00 00 00 
6466   30B2 00 00 00 00 
6466   30B6 00 00 00 00 
6466   30BA 00 00 00 00 
6466   30BE 00 00 00 00 
6466   30C2 00 00 00 00 
6466   30C6 00 00 00 00 
6466   30CA 00 00 00 00 
6466   30CE 00 00 00 00 
6466   30D2 00 00 00 00 
6466   30D6 00 00 00 00 
6467   30DA 00 00 00 00 _arg_data: .fill 512, 0
6467   30DE 00 00 00 00 
6467   30E2 00 00 00 00 
6467   30E6 00 00 00 00 
6467   30EA 00 00 00 00 
6467   30EE 00 00 00 00 
6467   30F2 00 00 00 00 
6467   30F6 00 00 00 00 
6467   30FA 00 00 00 00 
6467   30FE 00 00 00 00 
6467   3102 00 00 00 00 
6467   3106 00 00 00 00 
6467   310A 00 00 00 00 
6467   310E 00 00 00 00 
6467   3112 00 00 00 00 
6467   3116 00 00 00 00 
6467   311A 00 00 00 00 
6467   311E 00 00 00 00 
6467   3122 00 00 00 00 
6467   3126 00 00 00 00 
6467   312A 00 00 00 00 
6467   312E 00 00 00 00 
6467   3132 00 00 00 00 
6467   3136 00 00 00 00 
6467   313A 00 00 00 00 
6467   313E 00 00 00 00 
6467   3142 00 00 00 00 
6467   3146 00 00 00 00 
6467   314A 00 00 00 00 
6467   314E 00 00 00 00 
6467   3152 00 00 00 00 
6467   3156 00 00 00 00 
6467   315A 00 00 00 00 
6467   315E 00 00 00 00 
6467   3162 00 00 00 00 
6467   3166 00 00 00 00 
6467   316A 00 00 00 00 
6467   316E 00 00 00 00 
6467   3172 00 00 00 00 
6467   3176 00 00 00 00 
6467   317A 00 00 00 00 
6467   317E 00 00 00 00 
6467   3182 00 00 00 00 
6467   3186 00 00 00 00 
6467   318A 00 00 00 00 
6467   318E 00 00 00 00 
6467   3192 00 00 00 00 
6467   3196 00 00 00 00 
6467   319A 00 00 00 00 
6467   319E 00 00 00 00 
6467   31A2 00 00 00 00 
6467   31A6 00 00 00 00 
6467   31AA 00 00 00 00 
6467   31AE 00 00 00 00 
6467   31B2 00 00 00 00 
6467   31B6 00 00 00 00 
6467   31BA 00 00 00 00 
6467   31BE 00 00 00 00 
6467   31C2 00 00 00 00 
6467   31C6 00 00 00 00 
6467   31CA 00 00 00 00 
6467   31CE 00 00 00 00 
6467   31D2 00 00 00 00 
6467   31D6 00 00 00 00 
6467   31DA 00 00 00 00 
6467   31DE 00 00 00 00 
6467   31E2 00 00 00 00 
6467   31E6 00 00 00 00 
6467   31EA 00 00 00 00 
6467   31EE 00 00 00 00 
6467   31F2 00 00 00 00 
6467   31F6 00 00 00 00 
6467   31FA 00 00 00 00 
6467   31FE 00 00 00 00 
6467   3202 00 00 00 00 
6467   3206 00 00 00 00 
6467   320A 00 00 00 00 
6467   320E 00 00 00 00 
6467   3212 00 00 00 00 
6467   3216 00 00 00 00 
6467   321A 00 00 00 00 
6467   321E 00 00 00 00 
6467   3222 00 00 00 00 
6467   3226 00 00 00 00 
6467   322A 00 00 00 00 
6467   322E 00 00 00 00 
6467   3232 00 00 00 00 
6467   3236 00 00 00 00 
6467   323A 00 00 00 00 
6467   323E 00 00 00 00 
6467   3242 00 00 00 00 
6467   3246 00 00 00 00 
6467   324A 00 00 00 00 
6467   324E 00 00 00 00 
6467   3252 00 00 00 00 
6467   3256 00 00 00 00 
6467   325A 00 00 00 00 
6467   325E 00 00 00 00 
6467   3262 00 00 00 00 
6467   3266 00 00 00 00 
6467   326A 00 00 00 00 
6467   326E 00 00 00 00 
6467   3272 00 00 00 00 
6467   3276 00 00 00 00 
6467   327A 00 00 00 00 
6467   327E 00 00 00 00 
6467   3282 00 00 00 00 
6467   3286 00 00 00 00 
6467   328A 00 00 00 00 
6467   328E 00 00 00 00 
6467   3292 00 00 00 00 
6467   3296 00 00 00 00 
6467   329A 00 00 00 00 
6467   329E 00 00 00 00 
6467   32A2 00 00 00 00 
6467   32A6 00 00 00 00 
6467   32AA 00 00 00 00 
6467   32AE 00 00 00 00 
6467   32B2 00 00 00 00 
6467   32B6 00 00 00 00 
6467   32BA 00 00 00 00 
6467   32BE 00 00 00 00 
6467   32C2 00 00 00 00 
6467   32C6 00 00 00 00 
6467   32CA 00 00 00 00 
6467   32CE 00 00 00 00 
6467   32D2 00 00 00 00 
6467   32D6 00 00 00 00 
6468   32DA 3E 20 00    _s0: .db "> ", 0
6469   32DD 55 6E 65 78 _s1: .db "Unexpected format in printf.", 0
6469   32E1 70 65 63 74 
6469   32E5 65 64 20 66 
6469   32E9 6F 72 6D 61 
6469   32ED 74 20 69 6E 
6469   32F1 20 70 72 69 
6469   32F5 6E 74 66 2E 
6469   32F9 00 
6470   32FA 45 72 72 6F _s2: .db "Error: Unknown argument type.\n", 0
6470   32FE 72 3A 20 55 
6470   3302 6E 6B 6E 6F 
6470   3306 77 6E 20 61 
6470   330A 72 67 75 6D 
6470   330E 65 6E 74 20 
6470   3312 74 79 70 65 
6470   3316 2E 0A 00 
6471   3319 1B 5B 32 4A _s3: .db "\033[2J\033[H", 0
6471   331D 1B 5B 48 00 
6472   3321 44 6F 75 62 _s4: .db "Double quotes expected", 0
6472   3325 6C 65 20 71 
6472   3329 75 6F 74 65 
6472   332D 73 20 65 78 
6472   3331 70 65 63 74 
6472   3335 65 64 00 
6473   3338 0A 45 72 72 _s5: .db "\nError: ", 0
6473   333C 6F 72 3A 20 
6473   3340 00 
6474   3341 0A 00       _s6: .db "\n", 0
6475   3343             
6476   3343 45 33       _heap_top: .dw _heap
6477   3345 00          _heap: .db 0
6478   3346             ; --- END DATA BLOCK
6479   3346             
6480   3346             .end
tasm: Number of errors = 1
