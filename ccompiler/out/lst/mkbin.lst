0001   0000             ; --- FILENAME: ../solarium/usr/bin/mkbin
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $s 
0011   0408 52 02 00      sub sp, 2
0012   040B             ;; prog = 0x0000; // Beginning of arguments buffer 
0013   040B 3B E8 24      mov d, _prog ; $prog         
0014   040E 26 00 00      mov b, $0        
0015   0411 FD 43         mov [d], b
0016   0413             ;; s = arg; 
0017   0413 FA FF FF      lea d, [bp + -1] ; $s         
0018   0416 26 EA 26      mov b, _arg_data ; $arg                   
0019   0419 FD 43         mov [d], b
0020   041B             ;; for(;;){ 
0021   041B             _for1_init:
0022   041B             _for1_cond:
0023   041B             _for1_block:
0024   041B             ;; if(*prog == '\0' || *prog == ';' || *prog == ' '){ 
0025   041B             _if2_cond:
0026   041B 29 E8 24      mov b, [_prog] ; $prog           
0027   041E 74            mov d, b
0028   041F 32            mov bl, [d]
0029   0420 A7 00         mov bh, 0
0030   0422             ; START RELATIONAL
0031   0422 D7            push a
0032   0423 11            mov a, b
0033   0424 26 00 00      mov b, $0
0034   0427 B0            cmp a, b
0035   0428 FD 71         seq ; ==
0036   042A E4            pop a
0037   042B             ; END RELATIONAL
0038   042B D7            push a
0039   042C 11            mov a, b
0040   042D 29 E8 24      mov b, [_prog] ; $prog           
0041   0430 74            mov d, b
0042   0431 32            mov bl, [d]
0043   0432 A7 00         mov bh, 0
0044   0434             ; START RELATIONAL
0045   0434 D7            push a
0046   0435 11            mov a, b
0047   0436 26 3B 00      mov b, $3b
0048   0439 B0            cmp a, b
0049   043A FD 71         seq ; ==
0050   043C E4            pop a
0051   043D             ; END RELATIONAL
0052   043D FD A8         sor a, b ; ||
0053   043F 11            mov a, b
0054   0440 29 E8 24      mov b, [_prog] ; $prog           
0055   0443 74            mov d, b
0056   0444 32            mov bl, [d]
0057   0445 A7 00         mov bh, 0
0058   0447             ; START RELATIONAL
0059   0447 D7            push a
0060   0448 11            mov a, b
0061   0449 26 20 00      mov b, $20
0062   044C B0            cmp a, b
0063   044D FD 71         seq ; ==
0064   044F E4            pop a
0065   0450             ; END RELATIONAL
0066   0450 FD A8         sor a, b ; ||
0067   0452 E4            pop a
0068   0453 C0 00 00      cmp b, 0
0069   0456 C6 69 04      je _if2_else
0070   0459             _if2_true:
0071   0459             ;; *s = '\0'; 
0072   0459 2C FF FF      mov b, [bp + -1] ; $s             
0073   045C D8            push b
0074   045D 26 00 00      mov b, $0
0075   0460 E7            pop d
0076   0461 FD 3E         mov [d], bl
0077   0463             ;; break; 
0078   0463 0A 90 04      jmp _for1_exit ; for break
0079   0466 0A 8D 04      jmp _if2_exit
0080   0469             _if2_else:
0081   0469             ;; *s++ = *prog++; 
0082   0469 2C FF FF      mov b, [bp + -1] ; $s             
0083   046C FD 79         mov g, b
0084   046E FD 77         inc b
0085   0470 FA FF FF      lea d, [bp + -1] ; $s
0086   0473 FD 43         mov [d], b
0087   0475 FD 27         mov b, g
0088   0477 D8            push b
0089   0478 29 E8 24      mov b, [_prog] ; $prog           
0090   047B FD 79         mov g, b
0091   047D FD 77         inc b
0092   047F 3B E8 24      mov d, _prog ; $prog
0093   0482 FD 43         mov [d], b
0094   0484 FD 27         mov b, g
0095   0486 74            mov d, b
0096   0487 32            mov bl, [d]
0097   0488 A7 00         mov bh, 0
0098   048A E7            pop d
0099   048B FD 3E         mov [d], bl
0100   048D             _if2_exit:
0101   048D             _for1_update:
0102   048D 0A 1B 04      jmp _for1_cond
0103   0490             _for1_exit:
0104   0490             ;; printf("> "); 
0105   0490 26 EA 28      mov b, __s0 ; "> "
0106   0493 FD AB         swp b
0107   0495 D8            push b
0108   0496 07 F4 09      call printf
0109   0499 51 02 00      add sp, 2
0110   049C             
0111   049C             ; --- BEGIN INLINE ASM BLOCK
0112   049C 3B EA 26      mov d, _arg_data ; $arg
0113   049F 19 06         mov al, 6
0114   04A1 05 04         syscall sys_filesystem
0115   04A3             ; --- END INLINE ASM BLOCK
0116   04A3             
0117   04A3 05 0B         syscall sys_terminate_proc
0118   04A5             
0119   04A5             include_ctype_lib:
0120   04A5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0121   04A8             
0122   04A8             ; --- BEGIN INLINE ASM BLOCK
0123   04A8             .include "lib/ctype.asm"
0001+  04A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  04A8             ; ctype.s
0003+  04A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  04A8             
0005+  04A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  04A8             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  04A8             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  04A8             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  04A8             ;; characters are supported.
0010+  04A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  04A8             ;; _isalnum 
0012+  04A8             ;; _isalpha 
0013+  04A8             ;; islower 
0014+  04A8             ;; isupper 
0015+  04A8             ;; _isdigit 
0016+  04A8             ;; isxdigit
0017+  04A8             ;; iscntrl 
0018+  04A8             ;; isgraph 
0019+  04A8             ;; _isspace 
0020+  04A8             ;; isblank 
0021+  04A8             ;; isprint 
0022+  04A8             ;; ispunct 
0023+  04A8             ;; tolower 
0024+  04A8             ;; toupper
0025+  04A8             
0026+  04A8             
0027+  04A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  04A8             ;; IS ALPHANUMERIC
0029+  04A8             ;; sets ZF according with result
0030+  04A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  04A8             _isalnum:
0032+  04A8 07 C5 04    	call _isalpha
0033+  04AB C6 B1 04    	je _isalnum_exit
0034+  04AE 07 B2 04    	call _isdigit
0035+  04B1             _isalnum_exit:
0036+  04B1 09          	ret	
0037+  04B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  04B2             ;; IS DIGIT
0039+  04B2             ;; sets ZF according with result
0040+  04B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  04B2             _isdigit:
0042+  04B2 DB          	push al
0043+  04B3 B9 30       	cmp al, '0'
0044+  04B5 C8 C1 04    	jlu _isdigit_false
0045+  04B8 B9 39       	cmp al, '9'
0046+  04BA D1 C1 04    	jgu _isdigit_false
0047+  04BD 87 00       	and al, 0	; set ZF
0048+  04BF E8          	pop al
0049+  04C0 09          	ret
0050+  04C1             _isdigit_false:
0051+  04C1 8B 01       	or al, 1	; clear ZF
0052+  04C3 E8          	pop al
0053+  04C4 09          	ret	
0054+  04C5             	
0055+  04C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  04C5             ;; IS ALPHA
0057+  04C5             ;; sets ZF according with result
0058+  04C5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  04C5             _isalpha:
0060+  04C5 DB          	push al
0061+  04C6 B9 5F       	cmp al, '_'
0062+  04C8 C6 E8 04    	je _isalpha_true
0063+  04CB B9 2E       	cmp al, '.'
0064+  04CD C6 E8 04    	je _isalpha_true
0065+  04D0 B9 41       	cmp al, 'A'
0066+  04D2 C8 E4 04    	jlu _isalpha_false
0067+  04D5 B9 7A       	cmp al, 'z'
0068+  04D7 D1 E4 04    	jgu _isalpha_false
0069+  04DA B9 5A       	cmp al, 'Z'
0070+  04DC D0 E8 04    	jleu _isalpha_true
0071+  04DF B9 61       	cmp al, 'a'
0072+  04E1 C9 E8 04    	jgeu _isalpha_true
0073+  04E4             _isalpha_false:
0074+  04E4 8B 01       	or al, 1	; clear ZF
0075+  04E6 E8          	pop al
0076+  04E7 09          	ret
0077+  04E8             _isalpha_true:
0078+  04E8 87 00       	and al, 0	; set ZF
0079+  04EA E8          	pop al
0080+  04EB 09          	ret
0081+  04EC             
0082+  04EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  04EC             ;; IS PATH-ALPHA
0084+  04EC             ;; sets ZF according with result
0085+  04EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  04EC             ispath:
0087+  04EC DB          	push al
0088+  04ED 07 B2 04    	call _isdigit
0089+  04F0 C6 1A 05    	je ispath_true
0090+  04F3 B9 5F       	cmp al, '_'
0091+  04F5 C6 1A 05    	je ispath_true
0092+  04F8 B9 2F       	cmp al, '/'
0093+  04FA C6 1A 05    	je ispath_true
0094+  04FD B9 2E       	cmp al, '.'
0095+  04FF C6 1A 05    	je ispath_true
0096+  0502 B9 41       	cmp al, 'A'
0097+  0504 C8 16 05    	jlu ispath_false
0098+  0507 B9 7A       	cmp al, 'z'
0099+  0509 D1 16 05    	jgu ispath_false
0100+  050C B9 5A       	cmp al, 'Z'
0101+  050E D0 1A 05    	jleu ispath_true
0102+  0511 B9 61       	cmp al, 'a'
0103+  0513 C9 1A 05    	jgeu ispath_true
0104+  0516             ispath_false:
0105+  0516 8B 01       	or al, 1	; clear ZF
0106+  0518 E8          	pop al
0107+  0519 09          	ret
0108+  051A             ispath_true:
0109+  051A 87 00       	and al, 0	; set ZF
0110+  051C E8          	pop al
0111+  051D 09          	ret
0112+  051E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  051E             ;; IS SPACE
0114+  051E             ;; sets ZF according with result
0115+  051E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  051E             _isspace:
0117+  051E B9 20       	cmp al, $20		; ' '
0118+  0520 C6 34 05    	je _isspace_exit
0119+  0523 B9 09       	cmp al, $09		; '\t'
0120+  0525 C6 34 05    	je _isspace_exit
0121+  0528 B9 0A       	cmp al, $0A		; '\n'
0122+  052A C6 34 05    	je _isspace_exit
0123+  052D B9 0D       	cmp al, $0D		; '\r'
0124+  052F C6 34 05    	je _isspace_exit
0125+  0532 B9 0B       	cmp al, $0B		; '\v'
0126+  0534             _isspace_exit:
0127+  0534 09          	ret	
0128+  0535             
0129+  0535             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0535             ; TO LOWER
0131+  0535             ; input in AL
0132+  0535             ; output in AL
0133+  0535             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0535             _to_lower:
0135+  0535 B9 5A       	cmp al, 'Z'
0136+  0537 D1 3C 05    	jgu _to_lower_ret
0137+  053A 6A 20       	add al, $20				; convert to lower case
0138+  053C             _to_lower_ret:
0139+  053C 09          	ret
0140+  053D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  053D             ; TO UPPER
0142+  053D             ; input in AL
0143+  053D             ; output in AL
0144+  053D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  053D             _to_upper:
0146+  053D B9 61       	cmp al, 'a'
0147+  053F C8 44 05    	jlu _to_upper_ret
0148+  0542 6F 20       	sub al, $20			; convert to upper case
0149+  0544             _to_upper_ret:
0150+  0544 09          	ret
0151+  0545             
0124   0545             ; --- END INLINE ASM BLOCK
0125   0545             
0126   0545 F9            leave
0127   0546 09            ret
0128   0547             
0129   0547             is_space:
0130   0547 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0131   054A             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
0132   054A 34 05 00      mov bl, [bp + 5] ; $c
0133   054D A7 00         mov bh, 0             
0134   054F             ; START RELATIONAL
0135   054F D7            push a
0136   0550 11            mov a, b
0137   0551 26 20 00      mov b, $20
0138   0554 B0            cmp a, b
0139   0555 FD 71         seq ; ==
0140   0557 E4            pop a
0141   0558             ; END RELATIONAL
0142   0558 D7            push a
0143   0559 11            mov a, b
0144   055A 34 05 00      mov bl, [bp + 5] ; $c
0145   055D A7 00         mov bh, 0             
0146   055F             ; START RELATIONAL
0147   055F D7            push a
0148   0560 11            mov a, b
0149   0561 26 09 00      mov b, $9
0150   0564 B0            cmp a, b
0151   0565 FD 71         seq ; ==
0152   0567 E4            pop a
0153   0568             ; END RELATIONAL
0154   0568 FD A8         sor a, b ; ||
0155   056A 11            mov a, b
0156   056B 34 05 00      mov bl, [bp + 5] ; $c
0157   056E A7 00         mov bh, 0             
0158   0570             ; START RELATIONAL
0159   0570 D7            push a
0160   0571 11            mov a, b
0161   0572 26 0A 00      mov b, $a
0162   0575 B0            cmp a, b
0163   0576 FD 71         seq ; ==
0164   0578 E4            pop a
0165   0579             ; END RELATIONAL
0166   0579 FD A8         sor a, b ; ||
0167   057B 11            mov a, b
0168   057C 34 05 00      mov bl, [bp + 5] ; $c
0169   057F A7 00         mov bh, 0             
0170   0581             ; START RELATIONAL
0171   0581 D7            push a
0172   0582 11            mov a, b
0173   0583 26 0D 00      mov b, $d
0174   0586 B0            cmp a, b
0175   0587 FD 71         seq ; ==
0176   0589 E4            pop a
0177   058A             ; END RELATIONAL
0178   058A FD A8         sor a, b ; ||
0179   058C E4            pop a
0180   058D F9            leave
0181   058E 09            ret
0182   058F             
0183   058F             is_digit:
0184   058F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0185   0592             ;; return c >= '0' && c <= '9'; 
0186   0592 34 05 00      mov bl, [bp + 5] ; $c
0187   0595 A7 00         mov bh, 0             
0188   0597             ; START RELATIONAL
0189   0597 D7            push a
0190   0598 11            mov a, b
0191   0599 26 30 00      mov b, $30
0192   059C B0            cmp a, b
0193   059D FD 80         sge ; >=
0194   059F E4            pop a
0195   05A0             ; END RELATIONAL
0196   05A0 D7            push a
0197   05A1 11            mov a, b
0198   05A2 34 05 00      mov bl, [bp + 5] ; $c
0199   05A5 A7 00         mov bh, 0             
0200   05A7             ; START RELATIONAL
0201   05A7 D7            push a
0202   05A8 11            mov a, b
0203   05A9 26 39 00      mov b, $39
0204   05AC B0            cmp a, b
0205   05AD FD 74         sle ; <=
0206   05AF E4            pop a
0207   05B0             ; END RELATIONAL
0208   05B0 FD A7         sand a, b ; &&
0209   05B2 E4            pop a
0210   05B3 F9            leave
0211   05B4 09            ret
0212   05B5             
0213   05B5             is_alpha:
0214   05B5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0215   05B8             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
0216   05B8 34 05 00      mov bl, [bp + 5] ; $c
0217   05BB A7 00         mov bh, 0             
0218   05BD             ; START RELATIONAL
0219   05BD D7            push a
0220   05BE 11            mov a, b
0221   05BF 26 61 00      mov b, $61
0222   05C2 B0            cmp a, b
0223   05C3 FD 80         sge ; >=
0224   05C5 E4            pop a
0225   05C6             ; END RELATIONAL
0226   05C6 D7            push a
0227   05C7 11            mov a, b
0228   05C8 34 05 00      mov bl, [bp + 5] ; $c
0229   05CB A7 00         mov bh, 0             
0230   05CD             ; START RELATIONAL
0231   05CD D7            push a
0232   05CE 11            mov a, b
0233   05CF 26 7A 00      mov b, $7a
0234   05D2 B0            cmp a, b
0235   05D3 FD 74         sle ; <=
0236   05D5 E4            pop a
0237   05D6             ; END RELATIONAL
0238   05D6 FD A7         sand a, b ; &&
0239   05D8 E4            pop a
0240   05D9 D7            push a
0241   05DA 11            mov a, b
0242   05DB 34 05 00      mov bl, [bp + 5] ; $c
0243   05DE A7 00         mov bh, 0             
0244   05E0             ; START RELATIONAL
0245   05E0 D7            push a
0246   05E1 11            mov a, b
0247   05E2 26 41 00      mov b, $41
0248   05E5 B0            cmp a, b
0249   05E6 FD 80         sge ; >=
0250   05E8 E4            pop a
0251   05E9             ; END RELATIONAL
0252   05E9 D7            push a
0253   05EA 11            mov a, b
0254   05EB 34 05 00      mov bl, [bp + 5] ; $c
0255   05EE A7 00         mov bh, 0             
0256   05F0             ; START RELATIONAL
0257   05F0 D7            push a
0258   05F1 11            mov a, b
0259   05F2 26 5A 00      mov b, $5a
0260   05F5 B0            cmp a, b
0261   05F6 FD 74         sle ; <=
0262   05F8 E4            pop a
0263   05F9             ; END RELATIONAL
0264   05F9 FD A7         sand a, b ; &&
0265   05FB E4            pop a
0266   05FC FD A8         sor a, b ; ||
0267   05FE 11            mov a, b
0268   05FF 34 05 00      mov bl, [bp + 5] ; $c
0269   0602 A7 00         mov bh, 0             
0270   0604             ; START RELATIONAL
0271   0604 D7            push a
0272   0605 11            mov a, b
0273   0606 26 5F 00      mov b, $5f
0274   0609 B0            cmp a, b
0275   060A FD 71         seq ; ==
0276   060C E4            pop a
0277   060D             ; END RELATIONAL
0278   060D FD A8         sor a, b ; ||
0279   060F E4            pop a
0280   0610 F9            leave
0281   0611 09            ret
0282   0612             
0283   0612             is_delimiter:
0284   0612 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0285   0615             ;; if( 
0286   0615             _if3_cond:
0287   0615 34 05 00      mov bl, [bp + 5] ; $c
0288   0618 A7 00         mov bh, 0             
0289   061A             ; START RELATIONAL
0290   061A D7            push a
0291   061B 11            mov a, b
0292   061C 26 40 00      mov b, $40
0293   061F B0            cmp a, b
0294   0620 FD 71         seq ; ==
0295   0622 E4            pop a
0296   0623             ; END RELATIONAL
0297   0623 D7            push a
0298   0624 11            mov a, b
0299   0625 34 05 00      mov bl, [bp + 5] ; $c
0300   0628 A7 00         mov bh, 0             
0301   062A             ; START RELATIONAL
0302   062A D7            push a
0303   062B 11            mov a, b
0304   062C 26 23 00      mov b, $23
0305   062F B0            cmp a, b
0306   0630 FD 71         seq ; ==
0307   0632 E4            pop a
0308   0633             ; END RELATIONAL
0309   0633 FD A8         sor a, b ; ||
0310   0635 11            mov a, b
0311   0636 34 05 00      mov bl, [bp + 5] ; $c
0312   0639 A7 00         mov bh, 0             
0313   063B             ; START RELATIONAL
0314   063B D7            push a
0315   063C 11            mov a, b
0316   063D 26 24 00      mov b, $24
0317   0640 B0            cmp a, b
0318   0641 FD 71         seq ; ==
0319   0643 E4            pop a
0320   0644             ; END RELATIONAL
0321   0644 FD A8         sor a, b ; ||
0322   0646 11            mov a, b
0323   0647 34 05 00      mov bl, [bp + 5] ; $c
0324   064A A7 00         mov bh, 0             
0325   064C             ; START RELATIONAL
0326   064C D7            push a
0327   064D 11            mov a, b
0328   064E 26 2B 00      mov b, $2b
0329   0651 B0            cmp a, b
0330   0652 FD 71         seq ; ==
0331   0654 E4            pop a
0332   0655             ; END RELATIONAL
0333   0655 FD A8         sor a, b ; ||
0334   0657 11            mov a, b
0335   0658 34 05 00      mov bl, [bp + 5] ; $c
0336   065B A7 00         mov bh, 0             
0337   065D             ; START RELATIONAL
0338   065D D7            push a
0339   065E 11            mov a, b
0340   065F 26 2D 00      mov b, $2d
0341   0662 B0            cmp a, b
0342   0663 FD 71         seq ; ==
0343   0665 E4            pop a
0344   0666             ; END RELATIONAL
0345   0666 FD A8         sor a, b ; ||
0346   0668 11            mov a, b
0347   0669 34 05 00      mov bl, [bp + 5] ; $c
0348   066C A7 00         mov bh, 0             
0349   066E             ; START RELATIONAL
0350   066E D7            push a
0351   066F 11            mov a, b
0352   0670 26 2A 00      mov b, $2a
0353   0673 B0            cmp a, b
0354   0674 FD 71         seq ; ==
0355   0676 E4            pop a
0356   0677             ; END RELATIONAL
0357   0677 FD A8         sor a, b ; ||
0358   0679 11            mov a, b
0359   067A 34 05 00      mov bl, [bp + 5] ; $c
0360   067D A7 00         mov bh, 0             
0361   067F             ; START RELATIONAL
0362   067F D7            push a
0363   0680 11            mov a, b
0364   0681 26 2F 00      mov b, $2f
0365   0684 B0            cmp a, b
0366   0685 FD 71         seq ; ==
0367   0687 E4            pop a
0368   0688             ; END RELATIONAL
0369   0688 FD A8         sor a, b ; ||
0370   068A 11            mov a, b
0371   068B 34 05 00      mov bl, [bp + 5] ; $c
0372   068E A7 00         mov bh, 0             
0373   0690             ; START RELATIONAL
0374   0690 D7            push a
0375   0691 11            mov a, b
0376   0692 26 25 00      mov b, $25
0377   0695 B0            cmp a, b
0378   0696 FD 71         seq ; ==
0379   0698 E4            pop a
0380   0699             ; END RELATIONAL
0381   0699 FD A8         sor a, b ; ||
0382   069B 11            mov a, b
0383   069C 34 05 00      mov bl, [bp + 5] ; $c
0384   069F A7 00         mov bh, 0             
0385   06A1             ; START RELATIONAL
0386   06A1 D7            push a
0387   06A2 11            mov a, b
0388   06A3 26 5B 00      mov b, $5b
0389   06A6 B0            cmp a, b
0390   06A7 FD 71         seq ; ==
0391   06A9 E4            pop a
0392   06AA             ; END RELATIONAL
0393   06AA FD A8         sor a, b ; ||
0394   06AC 11            mov a, b
0395   06AD 34 05 00      mov bl, [bp + 5] ; $c
0396   06B0 A7 00         mov bh, 0             
0397   06B2             ; START RELATIONAL
0398   06B2 D7            push a
0399   06B3 11            mov a, b
0400   06B4 26 5D 00      mov b, $5d
0401   06B7 B0            cmp a, b
0402   06B8 FD 71         seq ; ==
0403   06BA E4            pop a
0404   06BB             ; END RELATIONAL
0405   06BB FD A8         sor a, b ; ||
0406   06BD 11            mov a, b
0407   06BE 34 05 00      mov bl, [bp + 5] ; $c
0408   06C1 A7 00         mov bh, 0             
0409   06C3             ; START RELATIONAL
0410   06C3 D7            push a
0411   06C4 11            mov a, b
0412   06C5 26 28 00      mov b, $28
0413   06C8 B0            cmp a, b
0414   06C9 FD 71         seq ; ==
0415   06CB E4            pop a
0416   06CC             ; END RELATIONAL
0417   06CC FD A8         sor a, b ; ||
0418   06CE 11            mov a, b
0419   06CF 34 05 00      mov bl, [bp + 5] ; $c
0420   06D2 A7 00         mov bh, 0             
0421   06D4             ; START RELATIONAL
0422   06D4 D7            push a
0423   06D5 11            mov a, b
0424   06D6 26 29 00      mov b, $29
0425   06D9 B0            cmp a, b
0426   06DA FD 71         seq ; ==
0427   06DC E4            pop a
0428   06DD             ; END RELATIONAL
0429   06DD FD A8         sor a, b ; ||
0430   06DF 11            mov a, b
0431   06E0 34 05 00      mov bl, [bp + 5] ; $c
0432   06E3 A7 00         mov bh, 0             
0433   06E5             ; START RELATIONAL
0434   06E5 D7            push a
0435   06E6 11            mov a, b
0436   06E7 26 7B 00      mov b, $7b
0437   06EA B0            cmp a, b
0438   06EB FD 71         seq ; ==
0439   06ED E4            pop a
0440   06EE             ; END RELATIONAL
0441   06EE FD A8         sor a, b ; ||
0442   06F0 11            mov a, b
0443   06F1 34 05 00      mov bl, [bp + 5] ; $c
0444   06F4 A7 00         mov bh, 0             
0445   06F6             ; START RELATIONAL
0446   06F6 D7            push a
0447   06F7 11            mov a, b
0448   06F8 26 7D 00      mov b, $7d
0449   06FB B0            cmp a, b
0450   06FC FD 71         seq ; ==
0451   06FE E4            pop a
0452   06FF             ; END RELATIONAL
0453   06FF FD A8         sor a, b ; ||
0454   0701 11            mov a, b
0455   0702 34 05 00      mov bl, [bp + 5] ; $c
0456   0705 A7 00         mov bh, 0             
0457   0707             ; START RELATIONAL
0458   0707 D7            push a
0459   0708 11            mov a, b
0460   0709 26 3A 00      mov b, $3a
0461   070C B0            cmp a, b
0462   070D FD 71         seq ; ==
0463   070F E4            pop a
0464   0710             ; END RELATIONAL
0465   0710 FD A8         sor a, b ; ||
0466   0712 11            mov a, b
0467   0713 34 05 00      mov bl, [bp + 5] ; $c
0468   0716 A7 00         mov bh, 0             
0469   0718             ; START RELATIONAL
0470   0718 D7            push a
0471   0719 11            mov a, b
0472   071A 26 3B 00      mov b, $3b
0473   071D B0            cmp a, b
0474   071E FD 71         seq ; ==
0475   0720 E4            pop a
0476   0721             ; END RELATIONAL
0477   0721 FD A8         sor a, b ; ||
0478   0723 11            mov a, b
0479   0724 34 05 00      mov bl, [bp + 5] ; $c
0480   0727 A7 00         mov bh, 0             
0481   0729             ; START RELATIONAL
0482   0729 D7            push a
0483   072A 11            mov a, b
0484   072B 26 3C 00      mov b, $3c
0485   072E B0            cmp a, b
0486   072F FD 71         seq ; ==
0487   0731 E4            pop a
0488   0732             ; END RELATIONAL
0489   0732 FD A8         sor a, b ; ||
0490   0734 11            mov a, b
0491   0735 34 05 00      mov bl, [bp + 5] ; $c
0492   0738 A7 00         mov bh, 0             
0493   073A             ; START RELATIONAL
0494   073A D7            push a
0495   073B 11            mov a, b
0496   073C 26 3E 00      mov b, $3e
0497   073F B0            cmp a, b
0498   0740 FD 71         seq ; ==
0499   0742 E4            pop a
0500   0743             ; END RELATIONAL
0501   0743 FD A8         sor a, b ; ||
0502   0745 11            mov a, b
0503   0746 34 05 00      mov bl, [bp + 5] ; $c
0504   0749 A7 00         mov bh, 0             
0505   074B             ; START RELATIONAL
0506   074B D7            push a
0507   074C 11            mov a, b
0508   074D 26 3D 00      mov b, $3d
0509   0750 B0            cmp a, b
0510   0751 FD 71         seq ; ==
0511   0753 E4            pop a
0512   0754             ; END RELATIONAL
0513   0754 FD A8         sor a, b ; ||
0514   0756 11            mov a, b
0515   0757 34 05 00      mov bl, [bp + 5] ; $c
0516   075A A7 00         mov bh, 0             
0517   075C             ; START RELATIONAL
0518   075C D7            push a
0519   075D 11            mov a, b
0520   075E 26 21 00      mov b, $21
0521   0761 B0            cmp a, b
0522   0762 FD 71         seq ; ==
0523   0764 E4            pop a
0524   0765             ; END RELATIONAL
0525   0765 FD A8         sor a, b ; ||
0526   0767 11            mov a, b
0527   0768 34 05 00      mov bl, [bp + 5] ; $c
0528   076B A7 00         mov bh, 0             
0529   076D             ; START RELATIONAL
0530   076D D7            push a
0531   076E 11            mov a, b
0532   076F 26 5E 00      mov b, $5e
0533   0772 B0            cmp a, b
0534   0773 FD 71         seq ; ==
0535   0775 E4            pop a
0536   0776             ; END RELATIONAL
0537   0776 FD A8         sor a, b ; ||
0538   0778 11            mov a, b
0539   0779 34 05 00      mov bl, [bp + 5] ; $c
0540   077C A7 00         mov bh, 0             
0541   077E             ; START RELATIONAL
0542   077E D7            push a
0543   077F 11            mov a, b
0544   0780 26 26 00      mov b, $26
0545   0783 B0            cmp a, b
0546   0784 FD 71         seq ; ==
0547   0786 E4            pop a
0548   0787             ; END RELATIONAL
0549   0787 FD A8         sor a, b ; ||
0550   0789 11            mov a, b
0551   078A 34 05 00      mov bl, [bp + 5] ; $c
0552   078D A7 00         mov bh, 0             
0553   078F             ; START RELATIONAL
0554   078F D7            push a
0555   0790 11            mov a, b
0556   0791 26 7C 00      mov b, $7c
0557   0794 B0            cmp a, b
0558   0795 FD 71         seq ; ==
0559   0797 E4            pop a
0560   0798             ; END RELATIONAL
0561   0798 FD A8         sor a, b ; ||
0562   079A 11            mov a, b
0563   079B 34 05 00      mov bl, [bp + 5] ; $c
0564   079E A7 00         mov bh, 0             
0565   07A0             ; START RELATIONAL
0566   07A0 D7            push a
0567   07A1 11            mov a, b
0568   07A2 26 7E 00      mov b, $7e
0569   07A5 B0            cmp a, b
0570   07A6 FD 71         seq ; ==
0571   07A8 E4            pop a
0572   07A9             ; END RELATIONAL
0573   07A9 FD A8         sor a, b ; ||
0574   07AB 11            mov a, b
0575   07AC 34 05 00      mov bl, [bp + 5] ; $c
0576   07AF A7 00         mov bh, 0             
0577   07B1             ; START RELATIONAL
0578   07B1 D7            push a
0579   07B2 11            mov a, b
0580   07B3 26 2E 00      mov b, $2e
0581   07B6 B0            cmp a, b
0582   07B7 FD 71         seq ; ==
0583   07B9 E4            pop a
0584   07BA             ; END RELATIONAL
0585   07BA FD A8         sor a, b ; ||
0586   07BC E4            pop a
0587   07BD C0 00 00      cmp b, 0
0588   07C0 C6 CB 07      je _if3_else
0589   07C3             _if3_true:
0590   07C3             ;; return 1; 
0591   07C3 26 01 00      mov b, $1
0592   07C6 F9            leave
0593   07C7 09            ret
0594   07C8 0A D0 07      jmp _if3_exit
0595   07CB             _if3_else:
0596   07CB             ;; return 0; 
0597   07CB 26 00 00      mov b, $0
0598   07CE F9            leave
0599   07CF 09            ret
0600   07D0             _if3_exit:
0601   07D0 F9            leave
0602   07D1 09            ret
0603   07D2             
0604   07D2             strcpy:
0605   07D2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0606   07D5             ; $psrc 
0607   07D5             ; $pdest 
0608   07D5 52 04 00      sub sp, 4
0609   07D8             ;; psrc = src; 
0610   07D8 FA FF FF      lea d, [bp + -1] ; $psrc         
0611   07DB 2C 05 00      mov b, [bp + 5] ; $src                     
0612   07DE FD 43         mov [d], b
0613   07E0             ;; pdest = dest; 
0614   07E0 FA FD FF      lea d, [bp + -3] ; $pdest         
0615   07E3 2C 07 00      mov b, [bp + 7] ; $dest                     
0616   07E6 FD 43         mov [d], b
0617   07E8             ;; while(*psrc) *pdest++ = *psrc++; 
0618   07E8             _while4_cond:
0619   07E8 2C FF FF      mov b, [bp + -1] ; $psrc             
0620   07EB 74            mov d, b
0621   07EC 32            mov bl, [d]
0622   07ED A7 00         mov bh, 0
0623   07EF C0 00 00      cmp b, 0
0624   07F2 C6 1C 08      je _while4_exit
0625   07F5             _while4_block:
0626   07F5             ;; *pdest++ = *psrc++; 
0627   07F5 2C FD FF      mov b, [bp + -3] ; $pdest             
0628   07F8 FD 79         mov g, b
0629   07FA FD 77         inc b
0630   07FC FA FD FF      lea d, [bp + -3] ; $pdest
0631   07FF FD 43         mov [d], b
0632   0801 FD 27         mov b, g
0633   0803 D8            push b
0634   0804 2C FF FF      mov b, [bp + -1] ; $psrc             
0635   0807 FD 79         mov g, b
0636   0809 FD 77         inc b
0637   080B FA FF FF      lea d, [bp + -1] ; $psrc
0638   080E FD 43         mov [d], b
0639   0810 FD 27         mov b, g
0640   0812 74            mov d, b
0641   0813 32            mov bl, [d]
0642   0814 A7 00         mov bh, 0
0643   0816 E7            pop d
0644   0817 FD 3E         mov [d], bl
0645   0819 0A E8 07      jmp _while4_cond
0646   081C             _while4_exit:
0647   081C             ;; *pdest = '\0'; 
0648   081C 2C FD FF      mov b, [bp + -3] ; $pdest             
0649   081F D8            push b
0650   0820 26 00 00      mov b, $0
0651   0823 E7            pop d
0652   0824 FD 3E         mov [d], bl
0653   0826 F9            leave
0654   0827 09            ret
0655   0828             
0656   0828             strcmp:
0657   0828 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0658   082B             ;; while (*s1 && (*s1 == *s2)) { 
0659   082B             _while5_cond:
0660   082B 2C 07 00      mov b, [bp + 7] ; $s1             
0661   082E 74            mov d, b
0662   082F 32            mov bl, [d]
0663   0830 A7 00         mov bh, 0
0664   0832 D7            push a
0665   0833 11            mov a, b
0666   0834 2C 07 00      mov b, [bp + 7] ; $s1             
0667   0837 74            mov d, b
0668   0838 32            mov bl, [d]
0669   0839 A7 00         mov bh, 0
0670   083B             ; START RELATIONAL
0671   083B D7            push a
0672   083C 11            mov a, b
0673   083D 2C 05 00      mov b, [bp + 5] ; $s2             
0674   0840 74            mov d, b
0675   0841 32            mov bl, [d]
0676   0842 A7 00         mov bh, 0
0677   0844 B0            cmp a, b
0678   0845 FD 71         seq ; ==
0679   0847 E4            pop a
0680   0848             ; END RELATIONAL
0681   0848 FD A7         sand a, b ; &&
0682   084A E4            pop a
0683   084B C0 00 00      cmp b, 0
0684   084E C6 70 08      je _while5_exit
0685   0851             _while5_block:
0686   0851             ;; s1++; 
0687   0851 2C 07 00      mov b, [bp + 7] ; $s1             
0688   0854 FD 79         mov g, b
0689   0856 FD 77         inc b
0690   0858 FA 07 00      lea d, [bp + 7] ; $s1
0691   085B FD 43         mov [d], b
0692   085D FD 27         mov b, g
0693   085F             ;; s2++; 
0694   085F 2C 05 00      mov b, [bp + 5] ; $s2             
0695   0862 FD 79         mov g, b
0696   0864 FD 77         inc b
0697   0866 FA 05 00      lea d, [bp + 5] ; $s2
0698   0869 FD 43         mov [d], b
0699   086B FD 27         mov b, g
0700   086D 0A 2B 08      jmp _while5_cond
0701   0870             _while5_exit:
0702   0870             ;; return *s1 - *s2; 
0703   0870 2C 07 00      mov b, [bp + 7] ; $s1             
0704   0873 74            mov d, b
0705   0874 32            mov bl, [d]
0706   0875 A7 00         mov bh, 0
0707   0877             ; START TERMS
0708   0877 D7            push a
0709   0878 11            mov a, b
0710   0879 2C 05 00      mov b, [bp + 5] ; $s2             
0711   087C 74            mov d, b
0712   087D 32            mov bl, [d]
0713   087E A7 00         mov bh, 0
0714   0880 60            sub a, b
0715   0881 27            mov b, a
0716   0882 E4            pop a
0717   0883             ; END TERMS
0718   0883 F9            leave
0719   0884 09            ret
0720   0885             
0721   0885             strcat:
0722   0885 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0723   0888             ; $dest_len 
0724   0888             ; $i 
0725   0888 52 04 00      sub sp, 4
0726   088B             ;; dest_len = strlen(dest); 
0727   088B FA FF FF      lea d, [bp + -1] ; $dest_len
0728   088E DA            push d
0729   088F 2C 07 00      mov b, [bp + 7] ; $dest             
0730   0892 FD AB         swp b
0731   0894 D8            push b
0732   0895 07 24 09      call strlen
0733   0898 51 02 00      add sp, 2
0734   089B E7            pop d
0735   089C FD 43         mov [d], b
0736   089E             ;; for (i = 0; src[i] != 0; i=i+1) { 
0737   089E             _for6_init:
0738   089E FA FD FF      lea d, [bp + -3] ; $i         
0739   08A1 26 00 00      mov b, $0        
0740   08A4 FD 43         mov [d], b
0741   08A6             _for6_cond:
0742   08A6 FA 05 00      lea d, [bp + 5] ; $src
0743   08A9 FD 2A         mov d, [d]
0744   08AB D7            push a         
0745   08AC 2C FD FF      mov b, [bp + -3] ; $i                     
0746   08AF FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0747   08B3 E4            pop a
0748   08B4 32            mov bl, [d]
0749   08B5 A7 00         mov bh, 0
0750   08B7             ; START RELATIONAL
0751   08B7 D7            push a
0752   08B8 11            mov a, b
0753   08B9 26 00 00      mov b, $0
0754   08BC B0            cmp a, b
0755   08BD FD 72         sneq ; !=
0756   08BF E4            pop a
0757   08C0             ; END RELATIONAL
0758   08C0 C0 00 00      cmp b, 0
0759   08C3 C6 04 09      je _for6_exit
0760   08C6             _for6_block:
0761   08C6             ;; dest[dest_len + i] = src[i]; 
0762   08C6 FA 07 00      lea d, [bp + 7] ; $dest
0763   08C9 FD 2A         mov d, [d]
0764   08CB D7            push a         
0765   08CC 2C FF FF      mov b, [bp + -1] ; $dest_len             
0766   08CF             ; START TERMS
0767   08CF D7            push a
0768   08D0 11            mov a, b
0769   08D1 2C FD FF      mov b, [bp + -3] ; $i             
0770   08D4 54            add a, b
0771   08D5 27            mov b, a
0772   08D6 E4            pop a
0773   08D7             ; END TERMS        
0774   08D7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0775   08DB E4            pop a
0776   08DC DA            push d
0777   08DD FA 05 00      lea d, [bp + 5] ; $src
0778   08E0 FD 2A         mov d, [d]
0779   08E2 D7            push a         
0780   08E3 2C FD FF      mov b, [bp + -3] ; $i                     
0781   08E6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0782   08EA E4            pop a
0783   08EB 32            mov bl, [d]
0784   08EC A7 00         mov bh, 0
0785   08EE E7            pop d
0786   08EF FD 3E         mov [d], bl
0787   08F1             _for6_update:
0788   08F1 FA FD FF      lea d, [bp + -3] ; $i         
0789   08F4 2C FD FF      mov b, [bp + -3] ; $i             
0790   08F7             ; START TERMS
0791   08F7 D7            push a
0792   08F8 11            mov a, b
0793   08F9 26 01 00      mov b, $1
0794   08FC 54            add a, b
0795   08FD 27            mov b, a
0796   08FE E4            pop a
0797   08FF             ; END TERMS        
0798   08FF FD 43         mov [d], b
0799   0901 0A A6 08      jmp _for6_cond
0800   0904             _for6_exit:
0801   0904             ;; dest[dest_len + i] = 0; 
0802   0904 FA 07 00      lea d, [bp + 7] ; $dest
0803   0907 FD 2A         mov d, [d]
0804   0909 D7            push a         
0805   090A 2C FF FF      mov b, [bp + -1] ; $dest_len             
0806   090D             ; START TERMS
0807   090D D7            push a
0808   090E 11            mov a, b
0809   090F 2C FD FF      mov b, [bp + -3] ; $i             
0810   0912 54            add a, b
0811   0913 27            mov b, a
0812   0914 E4            pop a
0813   0915             ; END TERMS        
0814   0915 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0815   0919 E4            pop a         
0816   091A 26 00 00      mov b, $0        
0817   091D FD 3E         mov [d], bl
0818   091F             ;; return dest; 
0819   091F 2C 07 00      mov b, [bp + 7] ; $dest             
0820   0922 F9            leave
0821   0923 09            ret
0822   0924             
0823   0924             strlen:
0824   0924 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0825   0927             ; $length 
0826   0927 52 02 00      sub sp, 2
0827   092A             ;; length = 0; 
0828   092A FA FF FF      lea d, [bp + -1] ; $length         
0829   092D 26 00 00      mov b, $0        
0830   0930 FD 43         mov [d], b
0831   0932             ;; while (str[length] != 0) { 
0832   0932             _while7_cond:
0833   0932 FA 05 00      lea d, [bp + 5] ; $str
0834   0935 FD 2A         mov d, [d]
0835   0937 D7            push a         
0836   0938 2C FF FF      mov b, [bp + -1] ; $length                     
0837   093B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0838   093F E4            pop a
0839   0940 32            mov bl, [d]
0840   0941 A7 00         mov bh, 0
0841   0943             ; START RELATIONAL
0842   0943 D7            push a
0843   0944 11            mov a, b
0844   0945 26 00 00      mov b, $0
0845   0948 B0            cmp a, b
0846   0949 FD 72         sneq ; !=
0847   094B E4            pop a
0848   094C             ; END RELATIONAL
0849   094C C0 00 00      cmp b, 0
0850   094F C6 63 09      je _while7_exit
0851   0952             _while7_block:
0852   0952             ;; length++; 
0853   0952 2C FF FF      mov b, [bp + -1] ; $length             
0854   0955 FD 79         mov g, b
0855   0957 FD 77         inc b
0856   0959 FA FF FF      lea d, [bp + -1] ; $length
0857   095C FD 43         mov [d], b
0858   095E FD 27         mov b, g
0859   0960 0A 32 09      jmp _while7_cond
0860   0963             _while7_exit:
0861   0963             ;; return length; 
0862   0963 2C FF FF      mov b, [bp + -1] ; $length             
0863   0966 F9            leave
0864   0967 09            ret
0865   0968             
0866   0968             va_arg:
0867   0968 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0868   096B             ; $val 
0869   096B 52 02 00      sub sp, 2
0870   096E             ;; if(size == 1){ 
0871   096E             _if8_cond:
0872   096E 2C 05 00      mov b, [bp + 5] ; $size             
0873   0971             ; START RELATIONAL
0874   0971 D7            push a
0875   0972 11            mov a, b
0876   0973 26 01 00      mov b, $1
0877   0976 B0            cmp a, b
0878   0977 FD 71         seq ; ==
0879   0979 E4            pop a
0880   097A             ; END RELATIONAL
0881   097A C0 00 00      cmp b, 0
0882   097D C6 99 09      je _if8_else
0883   0980             _if8_true:
0884   0980             ;; val = *(char*)arg->p; 
0885   0980 FA FF FF      lea d, [bp + -1] ; $val
0886   0983 DA            push d
0887   0984 FA 07 00      lea d, [bp + 7] ; $arg
0888   0987 FD 2A         mov d, [d]
0889   0989 58 00 00      add d, 0
0890   098C FD 14         clb
0891   098E 2A            mov b, [d]
0892   098F 74            mov d, b
0893   0990 32            mov bl, [d]
0894   0991 A7 00         mov bh, 0
0895   0993 E7            pop d
0896   0994 FD 43         mov [d], b
0897   0996 0A CE 09      jmp _if8_exit
0898   0999             _if8_else:
0899   0999             ;; if(size == 2){ 
0900   0999             _if9_cond:
0901   0999 2C 05 00      mov b, [bp + 5] ; $size             
0902   099C             ; START RELATIONAL
0903   099C D7            push a
0904   099D 11            mov a, b
0905   099E 26 02 00      mov b, $2
0906   09A1 B0            cmp a, b
0907   09A2 FD 71         seq ; ==
0908   09A4 E4            pop a
0909   09A5             ; END RELATIONAL
0910   09A5 C0 00 00      cmp b, 0
0911   09A8 C6 C2 09      je _if9_else
0912   09AB             _if9_true:
0913   09AB             ;; val = *(int*)arg->p; 
0914   09AB FA FF FF      lea d, [bp + -1] ; $val
0915   09AE DA            push d
0916   09AF FA 07 00      lea d, [bp + 7] ; $arg
0917   09B2 FD 2A         mov d, [d]
0918   09B4 58 00 00      add d, 0
0919   09B7 FD 14         clb
0920   09B9 2A            mov b, [d]
0921   09BA 74            mov d, b
0922   09BB 2A            mov b, [d]
0923   09BC E7            pop d
0924   09BD FD 43         mov [d], b
0925   09BF 0A CE 09      jmp _if9_exit
0926   09C2             _if9_else:
0927   09C2             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
0928   09C2 26 ED 28      mov b, __s1 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
0929   09C5 FD AB         swp b
0930   09C7 D8            push b
0931   09C8 07 B7 0F      call print
0932   09CB 51 02 00      add sp, 2
0933   09CE             _if9_exit:
0934   09CE             _if8_exit:
0935   09CE             ;; arg->p = arg->p + size; 
0936   09CE FA 07 00      lea d, [bp + 7] ; $arg
0937   09D1 FD 2A         mov d, [d]
0938   09D3 58 00 00      add d, 0
0939   09D6 FD 14         clb
0940   09D8 DA            push d
0941   09D9 FA 07 00      lea d, [bp + 7] ; $arg
0942   09DC FD 2A         mov d, [d]
0943   09DE 58 00 00      add d, 0
0944   09E1 FD 14         clb
0945   09E3 2A            mov b, [d]
0946   09E4             ; START TERMS
0947   09E4 D7            push a
0948   09E5 11            mov a, b
0949   09E6 2C 05 00      mov b, [bp + 5] ; $size             
0950   09E9 54            add a, b
0951   09EA 27            mov b, a
0952   09EB E4            pop a
0953   09EC             ; END TERMS
0954   09EC E7            pop d
0955   09ED FD 43         mov [d], b
0956   09EF             ;; return val; 
0957   09EF 2C FF FF      mov b, [bp + -1] ; $val             
0958   09F2 F9            leave
0959   09F3 09            ret
0960   09F4             
0961   09F4             printf:
0962   09F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0963   09F7             ; $p 
0964   09F7             ; $fp 
0965   09F7             ; $i 
0966   09F7 52 06 00      sub sp, 6
0967   09FA             ;; fp = format; 
0968   09FA FA FD FF      lea d, [bp + -3] ; $fp         
0969   09FD 2C 05 00      mov b, [bp + 5] ; $format                     
0970   0A00 FD 43         mov [d], b
0971   0A02             ;; p = &format; 
0972   0A02 FA FF FF      lea d, [bp + -1] ; $p
0973   0A05 DA            push d
0974   0A06 FA 05 00      lea d, [bp + 5] ; $format
0975   0A09 2D            mov b, d
0976   0A0A E7            pop d
0977   0A0B FD 43         mov [d], b
0978   0A0D             ;; for(;;){ 
0979   0A0D             _for10_init:
0980   0A0D             _for10_cond:
0981   0A0D             _for10_block:
0982   0A0D             ;; if(!*fp) break; 
0983   0A0D             _if11_cond:
0984   0A0D 2C FD FF      mov b, [bp + -3] ; $fp             
0985   0A10 74            mov d, b
0986   0A11 32            mov bl, [d]
0987   0A12 A7 00         mov bh, 0
0988   0A14 C0 00 00      cmp b, 0
0989   0A17 FD 71         seq ; !
0990   0A19 C0 00 00      cmp b, 0
0991   0A1C C6 25 0A      je _if11_exit
0992   0A1F             _if11_true:
0993   0A1F             ;; break; 
0994   0A1F 0A 55 0B      jmp _for10_exit ; for break
0995   0A22 0A 25 0A      jmp _if11_exit
0996   0A25             _if11_exit:
0997   0A25             ;; if(*fp == '%'){ 
0998   0A25             _if12_cond:
0999   0A25 2C FD FF      mov b, [bp + -3] ; $fp             
1000   0A28 74            mov d, b
1001   0A29 32            mov bl, [d]
1002   0A2A A7 00         mov bh, 0
1003   0A2C             ; START RELATIONAL
1004   0A2C D7            push a
1005   0A2D 11            mov a, b
1006   0A2E 26 25 00      mov b, $25
1007   0A31 B0            cmp a, b
1008   0A32 FD 71         seq ; ==
1009   0A34 E4            pop a
1010   0A35             ; END RELATIONAL
1011   0A35 C0 00 00      cmp b, 0
1012   0A38 C6 36 0B      je _if12_else
1013   0A3B             _if12_true:
1014   0A3B             ;; fp++; 
1015   0A3B 2C FD FF      mov b, [bp + -3] ; $fp             
1016   0A3E FD 79         mov g, b
1017   0A40 FD 77         inc b
1018   0A42 FA FD FF      lea d, [bp + -3] ; $fp
1019   0A45 FD 43         mov [d], b
1020   0A47 FD 27         mov b, g
1021   0A49             ;; switch(*fp){ 
1022   0A49             _switch13_expr:
1023   0A49 2C FD FF      mov b, [bp + -3] ; $fp             
1024   0A4C 74            mov d, b
1025   0A4D 32            mov bl, [d]
1026   0A4E A7 00         mov bh, 0
1027   0A50             _switch13_comparisons:
1028   0A50 C1 64         cmp bl, $64
1029   0A52 C6 74 0A      je _switch13_case0
1030   0A55 C1 69         cmp bl, $69
1031   0A57 C6 74 0A      je _switch13_case1
1032   0A5A C1 75         cmp bl, $75
1033   0A5C C6 95 0A      je _switch13_case2
1034   0A5F C1 78         cmp bl, $78
1035   0A61 C6 B6 0A      je _switch13_case3
1036   0A64 C1 63         cmp bl, $63
1037   0A66 C6 D7 0A      je _switch13_case4
1038   0A69 C1 73         cmp bl, $73
1039   0A6B C6 F8 0A      je _switch13_case5
1040   0A6E 0A 19 0B      jmp _switch13_default
1041   0A71 0A 25 0B      jmp _switch13_exit
1042   0A74             _switch13_case0:
1043   0A74             _switch13_case1:
1044   0A74             ;; p = p - 2; 
1045   0A74 FA FF FF      lea d, [bp + -1] ; $p         
1046   0A77 2C FF FF      mov b, [bp + -1] ; $p             
1047   0A7A             ; START TERMS
1048   0A7A D7            push a
1049   0A7B 11            mov a, b
1050   0A7C 26 02 00      mov b, $2
1051   0A7F 60            sub a, b
1052   0A80 27            mov b, a
1053   0A81 E4            pop a
1054   0A82             ; END TERMS        
1055   0A82 FD 43         mov [d], b
1056   0A84             ;; prints(*(int*)p); 
1057   0A84 2C FF FF      mov b, [bp + -1] ; $p             
1058   0A87 74            mov d, b
1059   0A88 2A            mov b, [d]
1060   0A89 FD AB         swp b
1061   0A8B D8            push b
1062   0A8C 07 BB 0D      call prints
1063   0A8F 51 02 00      add sp, 2
1064   0A92             ;; break; 
1065   0A92 0A 25 0B      jmp _switch13_exit ; case break
1066   0A95             _switch13_case2:
1067   0A95             ;; p = p - 2; 
1068   0A95 FA FF FF      lea d, [bp + -1] ; $p         
1069   0A98 2C FF FF      mov b, [bp + -1] ; $p             
1070   0A9B             ; START TERMS
1071   0A9B D7            push a
1072   0A9C 11            mov a, b
1073   0A9D 26 02 00      mov b, $2
1074   0AA0 60            sub a, b
1075   0AA1 27            mov b, a
1076   0AA2 E4            pop a
1077   0AA3             ; END TERMS        
1078   0AA3 FD 43         mov [d], b
1079   0AA5             ;; printu(*(unsigned int*)p); 
1080   0AA5 2C FF FF      mov b, [bp + -1] ; $p             
1081   0AA8 74            mov d, b
1082   0AA9 2A            mov b, [d]
1083   0AAA FD AB         swp b
1084   0AAC D8            push b
1085   0AAD 07 9B 0E      call printu
1086   0AB0 51 02 00      add sp, 2
1087   0AB3             ;; break; 
1088   0AB3 0A 25 0B      jmp _switch13_exit ; case break
1089   0AB6             _switch13_case3:
1090   0AB6             ;; p = p - 2; 
1091   0AB6 FA FF FF      lea d, [bp + -1] ; $p         
1092   0AB9 2C FF FF      mov b, [bp + -1] ; $p             
1093   0ABC             ; START TERMS
1094   0ABC D7            push a
1095   0ABD 11            mov a, b
1096   0ABE 26 02 00      mov b, $2
1097   0AC1 60            sub a, b
1098   0AC2 27            mov b, a
1099   0AC3 E4            pop a
1100   0AC4             ; END TERMS        
1101   0AC4 FD 43         mov [d], b
1102   0AC6             ;; printx16(*(unsigned int*)p); 
1103   0AC6 2C FF FF      mov b, [bp + -1] ; $p             
1104   0AC9 74            mov d, b
1105   0ACA 2A            mov b, [d]
1106   0ACB FD AB         swp b
1107   0ACD D8            push b
1108   0ACE 07 57 0B      call printx16
1109   0AD1 51 02 00      add sp, 2
1110   0AD4             ;; break; 
1111   0AD4 0A 25 0B      jmp _switch13_exit ; case break
1112   0AD7             _switch13_case4:
1113   0AD7             ;; p = p - 2; 
1114   0AD7 FA FF FF      lea d, [bp + -1] ; $p         
1115   0ADA 2C FF FF      mov b, [bp + -1] ; $p             
1116   0ADD             ; START TERMS
1117   0ADD D7            push a
1118   0ADE 11            mov a, b
1119   0ADF 26 02 00      mov b, $2
1120   0AE2 60            sub a, b
1121   0AE3 27            mov b, a
1122   0AE4 E4            pop a
1123   0AE5             ; END TERMS        
1124   0AE5 FD 43         mov [d], b
1125   0AE7             ;; putchar(*(char*)p); 
1126   0AE7 2C FF FF      mov b, [bp + -1] ; $p             
1127   0AEA 74            mov d, b
1128   0AEB 32            mov bl, [d]
1129   0AEC A7 00         mov bh, 0
1130   0AEE DD            push bl
1131   0AEF 07 72 0F      call putchar
1132   0AF2 51 01 00      add sp, 1
1133   0AF5             ;; break; 
1134   0AF5 0A 25 0B      jmp _switch13_exit ; case break
1135   0AF8             _switch13_case5:
1136   0AF8             ;; p = p - 2; 
1137   0AF8 FA FF FF      lea d, [bp + -1] ; $p         
1138   0AFB 2C FF FF      mov b, [bp + -1] ; $p             
1139   0AFE             ; START TERMS
1140   0AFE D7            push a
1141   0AFF 11            mov a, b
1142   0B00 26 02 00      mov b, $2
1143   0B03 60            sub a, b
1144   0B04 27            mov b, a
1145   0B05 E4            pop a
1146   0B06             ; END TERMS        
1147   0B06 FD 43         mov [d], b
1148   0B08             ;; print(*(char**)p); 
1149   0B08 2C FF FF      mov b, [bp + -1] ; $p             
1150   0B0B 74            mov d, b
1151   0B0C 2A            mov b, [d]
1152   0B0D FD AB         swp b
1153   0B0F D8            push b
1154   0B10 07 B7 0F      call print
1155   0B13 51 02 00      add sp, 2
1156   0B16             ;; break; 
1157   0B16 0A 25 0B      jmp _switch13_exit ; case break
1158   0B19             _switch13_default:
1159   0B19             ;; print("Error: Unknown argument type.\n"); 
1160   0B19 26 31 29      mov b, __s2 ; "Error: Unknown argument type.\n"
1161   0B1C FD AB         swp b
1162   0B1E D8            push b
1163   0B1F 07 B7 0F      call print
1164   0B22 51 02 00      add sp, 2
1165   0B25             _switch13_exit:
1166   0B25             ;; fp++; 
1167   0B25 2C FD FF      mov b, [bp + -3] ; $fp             
1168   0B28 FD 79         mov g, b
1169   0B2A FD 77         inc b
1170   0B2C FA FD FF      lea d, [bp + -3] ; $fp
1171   0B2F FD 43         mov [d], b
1172   0B31 FD 27         mov b, g
1173   0B33 0A 52 0B      jmp _if12_exit
1174   0B36             _if12_else:
1175   0B36             ;; putchar(*fp); 
1176   0B36 2C FD FF      mov b, [bp + -3] ; $fp             
1177   0B39 74            mov d, b
1178   0B3A 32            mov bl, [d]
1179   0B3B A7 00         mov bh, 0
1180   0B3D DD            push bl
1181   0B3E 07 72 0F      call putchar
1182   0B41 51 01 00      add sp, 1
1183   0B44             ;; fp++; 
1184   0B44 2C FD FF      mov b, [bp + -3] ; $fp             
1185   0B47 FD 79         mov g, b
1186   0B49 FD 77         inc b
1187   0B4B FA FD FF      lea d, [bp + -3] ; $fp
1188   0B4E FD 43         mov [d], b
1189   0B50 FD 27         mov b, g
1190   0B52             _if12_exit:
1191   0B52             _for10_update:
1192   0B52 0A 0D 0A      jmp _for10_cond
1193   0B55             _for10_exit:
1194   0B55 F9            leave
1195   0B56 09            ret
1196   0B57             
1197   0B57             printx16:
1198   0B57 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1199   0B5A             
1200   0B5A             ; --- BEGIN INLINE ASM BLOCK
1201   0B5A 2C 05 00      mov b, [bp + 5] ; $hex             
1202   0B5D 07 1A 13      call print_u16x
1203   0B60             ; --- END INLINE ASM BLOCK
1204   0B60             
1205   0B60 F9            leave
1206   0B61 09            ret
1207   0B62             
1208   0B62             printx8:
1209   0B62 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1210   0B65             
1211   0B65             ; --- BEGIN INLINE ASM BLOCK
1212   0B65 FA 05 00      lea d, [bp + 5] ; $hex
1213   0B68 32            mov bl, [d]
1214   0B69 07 5E 13      call print_u8x
1215   0B6C             ; --- END INLINE ASM BLOCK
1216   0B6C             
1217   0B6C F9            leave
1218   0B6D 09            ret
1219   0B6E             
1220   0B6E             hex_to_int:
1221   0B6E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1222   0B71             ; $value 
1223   0B71 10 00 00      mov a, $0
1224   0B74 45 FF FF      mov [bp + -1], a
1225   0B77             ; $i 
1226   0B77             ; $hex_char 
1227   0B77             ; $len 
1228   0B77 52 07 00      sub sp, 7
1229   0B7A             ;; len = strlen(hex_string); 
1230   0B7A FA FA FF      lea d, [bp + -6] ; $len
1231   0B7D DA            push d
1232   0B7E 2C 05 00      mov b, [bp + 5] ; $hex_string             
1233   0B81 FD AB         swp b
1234   0B83 D8            push b
1235   0B84 07 24 09      call strlen
1236   0B87 51 02 00      add sp, 2
1237   0B8A E7            pop d
1238   0B8B FD 43         mov [d], b
1239   0B8D             ;; for (i = 0; i < len; i++) { 
1240   0B8D             _for14_init:
1241   0B8D FA FD FF      lea d, [bp + -3] ; $i         
1242   0B90 26 00 00      mov b, $0        
1243   0B93 FD 43         mov [d], b
1244   0B95             _for14_cond:
1245   0B95 2C FD FF      mov b, [bp + -3] ; $i             
1246   0B98             ; START RELATIONAL
1247   0B98 D7            push a
1248   0B99 11            mov a, b
1249   0B9A 2C FA FF      mov b, [bp + -6] ; $len             
1250   0B9D B0            cmp a, b
1251   0B9E FD 73         slt ; < 
1252   0BA0 E4            pop a
1253   0BA1             ; END RELATIONAL
1254   0BA1 C0 00 00      cmp b, 0
1255   0BA4 C6 95 0C      je _for14_exit
1256   0BA7             _for14_block:
1257   0BA7             ;; hex_char = hex_string[i]; 
1258   0BA7 FA FC FF      lea d, [bp + -4] ; $hex_char
1259   0BAA DA            push d
1260   0BAB FA 05 00      lea d, [bp + 5] ; $hex_string
1261   0BAE FD 2A         mov d, [d]
1262   0BB0 D7            push a         
1263   0BB1 2C FD FF      mov b, [bp + -3] ; $i                     
1264   0BB4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1265   0BB8 E4            pop a
1266   0BB9 32            mov bl, [d]
1267   0BBA A7 00         mov bh, 0
1268   0BBC E7            pop d
1269   0BBD FD 3E         mov [d], bl
1270   0BBF             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1271   0BBF             _if15_cond:
1272   0BBF 34 FC FF      mov bl, [bp + -4] ; $hex_char
1273   0BC2 A7 00         mov bh, 0             
1274   0BC4             ; START RELATIONAL
1275   0BC4 D7            push a
1276   0BC5 11            mov a, b
1277   0BC6 26 61 00      mov b, $61
1278   0BC9 B0            cmp a, b
1279   0BCA FD 80         sge ; >=
1280   0BCC E4            pop a
1281   0BCD             ; END RELATIONAL
1282   0BCD D7            push a
1283   0BCE 11            mov a, b
1284   0BCF 34 FC FF      mov bl, [bp + -4] ; $hex_char
1285   0BD2 A7 00         mov bh, 0             
1286   0BD4             ; START RELATIONAL
1287   0BD4 D7            push a
1288   0BD5 11            mov a, b
1289   0BD6 26 66 00      mov b, $66
1290   0BD9 B0            cmp a, b
1291   0BDA FD 74         sle ; <=
1292   0BDC E4            pop a
1293   0BDD             ; END RELATIONAL
1294   0BDD FD A7         sand a, b ; &&
1295   0BDF E4            pop a
1296   0BE0 C0 00 00      cmp b, 0
1297   0BE3 C6 10 0C      je _if15_else
1298   0BE6             _if15_true:
1299   0BE6             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1300   0BE6 FA FF FF      lea d, [bp + -1] ; $value         
1301   0BE9 2C FF FF      mov b, [bp + -1] ; $value             
1302   0BEC             ; START FACTORS
1303   0BEC D7            push a
1304   0BED 11            mov a, b
1305   0BEE 26 10 00      mov b, $10
1306   0BF1 AC            mul a, b ; *
1307   0BF2 11            mov a, b
1308   0BF3 27            mov b, a
1309   0BF4 E4            pop a
1310   0BF5             ; END FACTORS
1311   0BF5             ; START TERMS
1312   0BF5 D7            push a
1313   0BF6 11            mov a, b
1314   0BF7 34 FC FF      mov bl, [bp + -4] ; $hex_char
1315   0BFA A7 00         mov bh, 0             
1316   0BFC             ; START TERMS
1317   0BFC D7            push a
1318   0BFD 11            mov a, b
1319   0BFE 26 61 00      mov b, $61
1320   0C01 60            sub a, b
1321   0C02 26 0A 00      mov b, $a
1322   0C05 54            add a, b
1323   0C06 27            mov b, a
1324   0C07 E4            pop a
1325   0C08             ; END TERMS
1326   0C08 54            add a, b
1327   0C09 27            mov b, a
1328   0C0A E4            pop a
1329   0C0B             ; END TERMS        
1330   0C0B FD 43         mov [d], b
1331   0C0D 0A 84 0C      jmp _if15_exit
1332   0C10             _if15_else:
1333   0C10             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1334   0C10             _if16_cond:
1335   0C10 34 FC FF      mov bl, [bp + -4] ; $hex_char
1336   0C13 A7 00         mov bh, 0             
1337   0C15             ; START RELATIONAL
1338   0C15 D7            push a
1339   0C16 11            mov a, b
1340   0C17 26 41 00      mov b, $41
1341   0C1A B0            cmp a, b
1342   0C1B FD 80         sge ; >=
1343   0C1D E4            pop a
1344   0C1E             ; END RELATIONAL
1345   0C1E D7            push a
1346   0C1F 11            mov a, b
1347   0C20 34 FC FF      mov bl, [bp + -4] ; $hex_char
1348   0C23 A7 00         mov bh, 0             
1349   0C25             ; START RELATIONAL
1350   0C25 D7            push a
1351   0C26 11            mov a, b
1352   0C27 26 46 00      mov b, $46
1353   0C2A B0            cmp a, b
1354   0C2B FD 74         sle ; <=
1355   0C2D E4            pop a
1356   0C2E             ; END RELATIONAL
1357   0C2E FD A7         sand a, b ; &&
1358   0C30 E4            pop a
1359   0C31 C0 00 00      cmp b, 0
1360   0C34 C6 61 0C      je _if16_else
1361   0C37             _if16_true:
1362   0C37             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1363   0C37 FA FF FF      lea d, [bp + -1] ; $value         
1364   0C3A 2C FF FF      mov b, [bp + -1] ; $value             
1365   0C3D             ; START FACTORS
1366   0C3D D7            push a
1367   0C3E 11            mov a, b
1368   0C3F 26 10 00      mov b, $10
1369   0C42 AC            mul a, b ; *
1370   0C43 11            mov a, b
1371   0C44 27            mov b, a
1372   0C45 E4            pop a
1373   0C46             ; END FACTORS
1374   0C46             ; START TERMS
1375   0C46 D7            push a
1376   0C47 11            mov a, b
1377   0C48 34 FC FF      mov bl, [bp + -4] ; $hex_char
1378   0C4B A7 00         mov bh, 0             
1379   0C4D             ; START TERMS
1380   0C4D D7            push a
1381   0C4E 11            mov a, b
1382   0C4F 26 41 00      mov b, $41
1383   0C52 60            sub a, b
1384   0C53 26 0A 00      mov b, $a
1385   0C56 54            add a, b
1386   0C57 27            mov b, a
1387   0C58 E4            pop a
1388   0C59             ; END TERMS
1389   0C59 54            add a, b
1390   0C5A 27            mov b, a
1391   0C5B E4            pop a
1392   0C5C             ; END TERMS        
1393   0C5C FD 43         mov [d], b
1394   0C5E 0A 84 0C      jmp _if16_exit
1395   0C61             _if16_else:
1396   0C61             ;; value = (value * 16) + (hex_char - '0'); 
1397   0C61 FA FF FF      lea d, [bp + -1] ; $value         
1398   0C64 2C FF FF      mov b, [bp + -1] ; $value             
1399   0C67             ; START FACTORS
1400   0C67 D7            push a
1401   0C68 11            mov a, b
1402   0C69 26 10 00      mov b, $10
1403   0C6C AC            mul a, b ; *
1404   0C6D 11            mov a, b
1405   0C6E 27            mov b, a
1406   0C6F E4            pop a
1407   0C70             ; END FACTORS
1408   0C70             ; START TERMS
1409   0C70 D7            push a
1410   0C71 11            mov a, b
1411   0C72 34 FC FF      mov bl, [bp + -4] ; $hex_char
1412   0C75 A7 00         mov bh, 0             
1413   0C77             ; START TERMS
1414   0C77 D7            push a
1415   0C78 11            mov a, b
1416   0C79 26 30 00      mov b, $30
1417   0C7C 60            sub a, b
1418   0C7D 27            mov b, a
1419   0C7E E4            pop a
1420   0C7F             ; END TERMS
1421   0C7F 54            add a, b
1422   0C80 27            mov b, a
1423   0C81 E4            pop a
1424   0C82             ; END TERMS        
1425   0C82 FD 43         mov [d], b
1426   0C84             _if16_exit:
1427   0C84             _if15_exit:
1428   0C84             _for14_update:
1429   0C84 2C FD FF      mov b, [bp + -3] ; $i             
1430   0C87 FD 79         mov g, b
1431   0C89 FD 77         inc b
1432   0C8B FA FD FF      lea d, [bp + -3] ; $i
1433   0C8E FD 43         mov [d], b
1434   0C90 FD 27         mov b, g
1435   0C92 0A 95 0B      jmp _for14_cond
1436   0C95             _for14_exit:
1437   0C95             ;; return value; 
1438   0C95 2C FF FF      mov b, [bp + -1] ; $value             
1439   0C98 F9            leave
1440   0C99 09            ret
1441   0C9A             
1442   0C9A             atoi:
1443   0C9A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1444   0C9D             ; $result 
1445   0C9D 10 00 00      mov a, $0
1446   0CA0 45 FF FF      mov [bp + -1], a
1447   0CA3             ; $sign 
1448   0CA3 10 01 00      mov a, $1
1449   0CA6 45 FD FF      mov [bp + -3], a
1450   0CA9 52 04 00      sub sp, 4
1451   0CAC             ;; while (*str == ' ') str++; 
1452   0CAC             _while17_cond:
1453   0CAC 2C 05 00      mov b, [bp + 5] ; $str             
1454   0CAF 74            mov d, b
1455   0CB0 32            mov bl, [d]
1456   0CB1 A7 00         mov bh, 0
1457   0CB3             ; START RELATIONAL
1458   0CB3 D7            push a
1459   0CB4 11            mov a, b
1460   0CB5 26 20 00      mov b, $20
1461   0CB8 B0            cmp a, b
1462   0CB9 FD 71         seq ; ==
1463   0CBB E4            pop a
1464   0CBC             ; END RELATIONAL
1465   0CBC C0 00 00      cmp b, 0
1466   0CBF C6 D3 0C      je _while17_exit
1467   0CC2             _while17_block:
1468   0CC2             ;; str++; 
1469   0CC2 2C 05 00      mov b, [bp + 5] ; $str             
1470   0CC5 FD 79         mov g, b
1471   0CC7 FD 77         inc b
1472   0CC9 FA 05 00      lea d, [bp + 5] ; $str
1473   0CCC FD 43         mov [d], b
1474   0CCE FD 27         mov b, g
1475   0CD0 0A AC 0C      jmp _while17_cond
1476   0CD3             _while17_exit:
1477   0CD3             ;; if (*str == '-' || *str == '+') { 
1478   0CD3             _if18_cond:
1479   0CD3 2C 05 00      mov b, [bp + 5] ; $str             
1480   0CD6 74            mov d, b
1481   0CD7 32            mov bl, [d]
1482   0CD8 A7 00         mov bh, 0
1483   0CDA             ; START RELATIONAL
1484   0CDA D7            push a
1485   0CDB 11            mov a, b
1486   0CDC 26 2D 00      mov b, $2d
1487   0CDF B0            cmp a, b
1488   0CE0 FD 71         seq ; ==
1489   0CE2 E4            pop a
1490   0CE3             ; END RELATIONAL
1491   0CE3 D7            push a
1492   0CE4 11            mov a, b
1493   0CE5 2C 05 00      mov b, [bp + 5] ; $str             
1494   0CE8 74            mov d, b
1495   0CE9 32            mov bl, [d]
1496   0CEA A7 00         mov bh, 0
1497   0CEC             ; START RELATIONAL
1498   0CEC D7            push a
1499   0CED 11            mov a, b
1500   0CEE 26 2B 00      mov b, $2b
1501   0CF1 B0            cmp a, b
1502   0CF2 FD 71         seq ; ==
1503   0CF4 E4            pop a
1504   0CF5             ; END RELATIONAL
1505   0CF5 FD A8         sor a, b ; ||
1506   0CF7 E4            pop a
1507   0CF8 C0 00 00      cmp b, 0
1508   0CFB C6 32 0D      je _if18_exit
1509   0CFE             _if18_true:
1510   0CFE             ;; if (*str == '-') sign = -1; 
1511   0CFE             _if19_cond:
1512   0CFE 2C 05 00      mov b, [bp + 5] ; $str             
1513   0D01 74            mov d, b
1514   0D02 32            mov bl, [d]
1515   0D03 A7 00         mov bh, 0
1516   0D05             ; START RELATIONAL
1517   0D05 D7            push a
1518   0D06 11            mov a, b
1519   0D07 26 2D 00      mov b, $2d
1520   0D0A B0            cmp a, b
1521   0D0B FD 71         seq ; ==
1522   0D0D E4            pop a
1523   0D0E             ; END RELATIONAL
1524   0D0E C0 00 00      cmp b, 0
1525   0D11 C6 21 0D      je _if19_exit
1526   0D14             _if19_true:
1527   0D14             ;; sign = -1; 
1528   0D14 FA FD FF      lea d, [bp + -3] ; $sign         
1529   0D17 26 01 00      mov b, $1
1530   0D1A FD 97         neg b        
1531   0D1C FD 43         mov [d], b
1532   0D1E 0A 21 0D      jmp _if19_exit
1533   0D21             _if19_exit:
1534   0D21             ;; str++; 
1535   0D21 2C 05 00      mov b, [bp + 5] ; $str             
1536   0D24 FD 79         mov g, b
1537   0D26 FD 77         inc b
1538   0D28 FA 05 00      lea d, [bp + 5] ; $str
1539   0D2B FD 43         mov [d], b
1540   0D2D FD 27         mov b, g
1541   0D2F 0A 32 0D      jmp _if18_exit
1542   0D32             _if18_exit:
1543   0D32             ;; while (*str >= '0' && *str <= '9') { 
1544   0D32             _while20_cond:
1545   0D32 2C 05 00      mov b, [bp + 5] ; $str             
1546   0D35 74            mov d, b
1547   0D36 32            mov bl, [d]
1548   0D37 A7 00         mov bh, 0
1549   0D39             ; START RELATIONAL
1550   0D39 D7            push a
1551   0D3A 11            mov a, b
1552   0D3B 26 30 00      mov b, $30
1553   0D3E B0            cmp a, b
1554   0D3F FD 80         sge ; >=
1555   0D41 E4            pop a
1556   0D42             ; END RELATIONAL
1557   0D42 D7            push a
1558   0D43 11            mov a, b
1559   0D44 2C 05 00      mov b, [bp + 5] ; $str             
1560   0D47 74            mov d, b
1561   0D48 32            mov bl, [d]
1562   0D49 A7 00         mov bh, 0
1563   0D4B             ; START RELATIONAL
1564   0D4B D7            push a
1565   0D4C 11            mov a, b
1566   0D4D 26 39 00      mov b, $39
1567   0D50 B0            cmp a, b
1568   0D51 FD 74         sle ; <=
1569   0D53 E4            pop a
1570   0D54             ; END RELATIONAL
1571   0D54 FD A7         sand a, b ; &&
1572   0D56 E4            pop a
1573   0D57 C0 00 00      cmp b, 0
1574   0D5A C6 95 0D      je _while20_exit
1575   0D5D             _while20_block:
1576   0D5D             ;; result = result * 10 + (*str - '0'); 
1577   0D5D FA FF FF      lea d, [bp + -1] ; $result
1578   0D60 DA            push d
1579   0D61 2C FF FF      mov b, [bp + -1] ; $result             
1580   0D64             ; START FACTORS
1581   0D64 D7            push a
1582   0D65 11            mov a, b
1583   0D66 26 0A 00      mov b, $a
1584   0D69 AC            mul a, b ; *
1585   0D6A 11            mov a, b
1586   0D6B 27            mov b, a
1587   0D6C E4            pop a
1588   0D6D             ; END FACTORS
1589   0D6D             ; START TERMS
1590   0D6D D7            push a
1591   0D6E 11            mov a, b
1592   0D6F 2C 05 00      mov b, [bp + 5] ; $str             
1593   0D72 74            mov d, b
1594   0D73 32            mov bl, [d]
1595   0D74 A7 00         mov bh, 0
1596   0D76             ; START TERMS
1597   0D76 D7            push a
1598   0D77 11            mov a, b
1599   0D78 26 30 00      mov b, $30
1600   0D7B 60            sub a, b
1601   0D7C 27            mov b, a
1602   0D7D E4            pop a
1603   0D7E             ; END TERMS
1604   0D7E 54            add a, b
1605   0D7F 27            mov b, a
1606   0D80 E4            pop a
1607   0D81             ; END TERMS
1608   0D81 E7            pop d
1609   0D82 FD 43         mov [d], b
1610   0D84             ;; str++; 
1611   0D84 2C 05 00      mov b, [bp + 5] ; $str             
1612   0D87 FD 79         mov g, b
1613   0D89 FD 77         inc b
1614   0D8B FA 05 00      lea d, [bp + 5] ; $str
1615   0D8E FD 43         mov [d], b
1616   0D90 FD 27         mov b, g
1617   0D92 0A 32 0D      jmp _while20_cond
1618   0D95             _while20_exit:
1619   0D95             ;; return sign * result; 
1620   0D95 2C FD FF      mov b, [bp + -3] ; $sign             
1621   0D98             ; START FACTORS
1622   0D98 D7            push a
1623   0D99 11            mov a, b
1624   0D9A 2C FF FF      mov b, [bp + -1] ; $result             
1625   0D9D AC            mul a, b ; *
1626   0D9E 11            mov a, b
1627   0D9F 27            mov b, a
1628   0DA0 E4            pop a
1629   0DA1             ; END FACTORS
1630   0DA1 F9            leave
1631   0DA2 09            ret
1632   0DA3             
1633   0DA3             gets:
1634   0DA3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1635   0DA6             
1636   0DA6             ; --- BEGIN INLINE ASM BLOCK
1637   0DA6 17 05 00      mov a, [bp + 5] ; $s             
1638   0DA9 3C            mov d, a
1639   0DAA 07 7F 11      call _gets
1640   0DAD             ; --- END INLINE ASM BLOCK
1641   0DAD             
1642   0DAD             ;; return strlen(s); 
1643   0DAD 2C 05 00      mov b, [bp + 5] ; $s             
1644   0DB0 FD AB         swp b
1645   0DB2 D8            push b
1646   0DB3 07 24 09      call strlen
1647   0DB6 51 02 00      add sp, 2
1648   0DB9 F9            leave
1649   0DBA 09            ret
1650   0DBB             
1651   0DBB             prints:
1652   0DBB F8 00 00      enter 0 ; (push bp; mov bp, sp)
1653   0DBE             ; $digits 
1654   0DBE             ; $i 
1655   0DBE 10 00 00      mov a, $0
1656   0DC1 45 FA FF      mov [bp + -6], a
1657   0DC4 52 07 00      sub sp, 7
1658   0DC7             ;; if (num < 0) { 
1659   0DC7             _if21_cond:
1660   0DC7 2C 05 00      mov b, [bp + 5] ; $num             
1661   0DCA             ; START RELATIONAL
1662   0DCA D7            push a
1663   0DCB 11            mov a, b
1664   0DCC 26 00 00      mov b, $0
1665   0DCF B0            cmp a, b
1666   0DD0 FD 73         slt ; < 
1667   0DD2 E4            pop a
1668   0DD3             ; END RELATIONAL
1669   0DD3 C0 00 00      cmp b, 0
1670   0DD6 C6 F0 0D      je _if21_else
1671   0DD9             _if21_true:
1672   0DD9             ;; putchar('-'); 
1673   0DD9 26 2D 00      mov b, $2d
1674   0DDC DD            push bl
1675   0DDD 07 72 0F      call putchar
1676   0DE0 51 01 00      add sp, 1
1677   0DE3             ;; num = -num; 
1678   0DE3 FA 05 00      lea d, [bp + 5] ; $num         
1679   0DE6 2C 05 00      mov b, [bp + 5] ; $num             
1680   0DE9 FD 97         neg b        
1681   0DEB FD 43         mov [d], b
1682   0DED 0A 11 0E      jmp _if21_exit
1683   0DF0             _if21_else:
1684   0DF0             ;; if (num == 0) { 
1685   0DF0             _if22_cond:
1686   0DF0 2C 05 00      mov b, [bp + 5] ; $num             
1687   0DF3             ; START RELATIONAL
1688   0DF3 D7            push a
1689   0DF4 11            mov a, b
1690   0DF5 26 00 00      mov b, $0
1691   0DF8 B0            cmp a, b
1692   0DF9 FD 71         seq ; ==
1693   0DFB E4            pop a
1694   0DFC             ; END RELATIONAL
1695   0DFC C0 00 00      cmp b, 0
1696   0DFF C6 11 0E      je _if22_exit
1697   0E02             _if22_true:
1698   0E02             ;; putchar('0'); 
1699   0E02 26 30 00      mov b, $30
1700   0E05 DD            push bl
1701   0E06 07 72 0F      call putchar
1702   0E09 51 01 00      add sp, 1
1703   0E0C             ;; return; 
1704   0E0C F9            leave
1705   0E0D 09            ret
1706   0E0E 0A 11 0E      jmp _if22_exit
1707   0E11             _if22_exit:
1708   0E11             _if21_exit:
1709   0E11             ;; while (num > 0) { 
1710   0E11             _while23_cond:
1711   0E11 2C 05 00      mov b, [bp + 5] ; $num             
1712   0E14             ; START RELATIONAL
1713   0E14 D7            push a
1714   0E15 11            mov a, b
1715   0E16 26 00 00      mov b, $0
1716   0E19 B0            cmp a, b
1717   0E1A FD 7F         sgt ; >
1718   0E1C E4            pop a
1719   0E1D             ; END RELATIONAL
1720   0E1D C0 00 00      cmp b, 0
1721   0E20 C6 63 0E      je _while23_exit
1722   0E23             _while23_block:
1723   0E23             ;; digits[i] = '0' + (num % 10); 
1724   0E23 FA FC FF      lea d, [bp + -4] ; $digits
1725   0E26 D7            push a         
1726   0E27 2C FA FF      mov b, [bp + -6] ; $i                     
1727   0E2A 5A            add d, b
1728   0E2B E4            pop a         
1729   0E2C 26 30 00      mov b, $30
1730   0E2F             ; START TERMS
1731   0E2F D7            push a
1732   0E30 11            mov a, b
1733   0E31 2C 05 00      mov b, [bp + 5] ; $num             
1734   0E34             ; START FACTORS
1735   0E34 D7            push a
1736   0E35 11            mov a, b
1737   0E36 26 0A 00      mov b, $a
1738   0E39 AE            div a, b ; 
1739   0E3A 11            mov a, b
1740   0E3B 27            mov b, a
1741   0E3C E4            pop a
1742   0E3D             ; END FACTORS
1743   0E3D 54            add a, b
1744   0E3E 27            mov b, a
1745   0E3F E4            pop a
1746   0E40             ; END TERMS        
1747   0E40 FD 3E         mov [d], bl
1748   0E42             ;; num = num / 10; 
1749   0E42 FA 05 00      lea d, [bp + 5] ; $num         
1750   0E45 2C 05 00      mov b, [bp + 5] ; $num             
1751   0E48             ; START FACTORS
1752   0E48 D7            push a
1753   0E49 11            mov a, b
1754   0E4A 26 0A 00      mov b, $a
1755   0E4D AE            div a, b
1756   0E4E 27            mov b, a
1757   0E4F E4            pop a
1758   0E50             ; END FACTORS        
1759   0E50 FD 43         mov [d], b
1760   0E52             ;; i++; 
1761   0E52 2C FA FF      mov b, [bp + -6] ; $i             
1762   0E55 FD 79         mov g, b
1763   0E57 FD 77         inc b
1764   0E59 FA FA FF      lea d, [bp + -6] ; $i
1765   0E5C FD 43         mov [d], b
1766   0E5E FD 27         mov b, g
1767   0E60 0A 11 0E      jmp _while23_cond
1768   0E63             _while23_exit:
1769   0E63             ;; while (i > 0) { 
1770   0E63             _while24_cond:
1771   0E63 2C FA FF      mov b, [bp + -6] ; $i             
1772   0E66             ; START RELATIONAL
1773   0E66 D7            push a
1774   0E67 11            mov a, b
1775   0E68 26 00 00      mov b, $0
1776   0E6B B0            cmp a, b
1777   0E6C FD 7F         sgt ; >
1778   0E6E E4            pop a
1779   0E6F             ; END RELATIONAL
1780   0E6F C0 00 00      cmp b, 0
1781   0E72 C6 99 0E      je _while24_exit
1782   0E75             _while24_block:
1783   0E75             ;; i--; 
1784   0E75 2C FA FF      mov b, [bp + -6] ; $i             
1785   0E78 FD 79         mov g, b
1786   0E7A FD 7D         dec b
1787   0E7C FA FA FF      lea d, [bp + -6] ; $i
1788   0E7F FD 43         mov [d], b
1789   0E81 FD 27         mov b, g
1790   0E83             ;; putchar(digits[i]); 
1791   0E83 FA FC FF      lea d, [bp + -4] ; $digits
1792   0E86 D7            push a         
1793   0E87 2C FA FF      mov b, [bp + -6] ; $i                     
1794   0E8A 5A            add d, b
1795   0E8B E4            pop a
1796   0E8C 32            mov bl, [d]
1797   0E8D A7 00         mov bh, 0
1798   0E8F DD            push bl
1799   0E90 07 72 0F      call putchar
1800   0E93 51 01 00      add sp, 1
1801   0E96 0A 63 0E      jmp _while24_cond
1802   0E99             _while24_exit:
1803   0E99 F9            leave
1804   0E9A 09            ret
1805   0E9B             
1806   0E9B             printu:
1807   0E9B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1808   0E9E             ; $digits 
1809   0E9E             ; $i 
1810   0E9E 52 07 00      sub sp, 7
1811   0EA1             ;; i = 0; 
1812   0EA1 FA FA FF      lea d, [bp + -6] ; $i         
1813   0EA4 26 00 00      mov b, $0        
1814   0EA7 FD 43         mov [d], b
1815   0EA9             ;; if(num == 0){ 
1816   0EA9             _if25_cond:
1817   0EA9 2C 05 00      mov b, [bp + 5] ; $num             
1818   0EAC             ; START RELATIONAL
1819   0EAC D7            push a
1820   0EAD 11            mov a, b
1821   0EAE 26 00 00      mov b, $0
1822   0EB1 B0            cmp a, b
1823   0EB2 FD 71         seq ; ==
1824   0EB4 E4            pop a
1825   0EB5             ; END RELATIONAL
1826   0EB5 C0 00 00      cmp b, 0
1827   0EB8 C6 CA 0E      je _if25_exit
1828   0EBB             _if25_true:
1829   0EBB             ;; putchar('0'); 
1830   0EBB 26 30 00      mov b, $30
1831   0EBE DD            push bl
1832   0EBF 07 72 0F      call putchar
1833   0EC2 51 01 00      add sp, 1
1834   0EC5             ;; return; 
1835   0EC5 F9            leave
1836   0EC6 09            ret
1837   0EC7 0A CA 0E      jmp _if25_exit
1838   0ECA             _if25_exit:
1839   0ECA             ;; while (num > 0) { 
1840   0ECA             _while26_cond:
1841   0ECA 2C 05 00      mov b, [bp + 5] ; $num             
1842   0ECD             ; START RELATIONAL
1843   0ECD D7            push a
1844   0ECE 11            mov a, b
1845   0ECF 26 00 00      mov b, $0
1846   0ED2 B0            cmp a, b
1847   0ED3 FD 81         sgu ; > (unsigned)
1848   0ED5 E4            pop a
1849   0ED6             ; END RELATIONAL
1850   0ED6 C0 00 00      cmp b, 0
1851   0ED9 C6 1C 0F      je _while26_exit
1852   0EDC             _while26_block:
1853   0EDC             ;; digits[i] = '0' + (num % 10); 
1854   0EDC FA FC FF      lea d, [bp + -4] ; $digits
1855   0EDF D7            push a         
1856   0EE0 2C FA FF      mov b, [bp + -6] ; $i                     
1857   0EE3 5A            add d, b
1858   0EE4 E4            pop a         
1859   0EE5 26 30 00      mov b, $30
1860   0EE8             ; START TERMS
1861   0EE8 D7            push a
1862   0EE9 11            mov a, b
1863   0EEA 2C 05 00      mov b, [bp + 5] ; $num             
1864   0EED             ; START FACTORS
1865   0EED D7            push a
1866   0EEE 11            mov a, b
1867   0EEF 26 0A 00      mov b, $a
1868   0EF2 AE            div a, b ; 
1869   0EF3 11            mov a, b
1870   0EF4 27            mov b, a
1871   0EF5 E4            pop a
1872   0EF6             ; END FACTORS
1873   0EF6 54            add a, b
1874   0EF7 27            mov b, a
1875   0EF8 E4            pop a
1876   0EF9             ; END TERMS        
1877   0EF9 FD 3E         mov [d], bl
1878   0EFB             ;; num = num / 10; 
1879   0EFB FA 05 00      lea d, [bp + 5] ; $num         
1880   0EFE 2C 05 00      mov b, [bp + 5] ; $num             
1881   0F01             ; START FACTORS
1882   0F01 D7            push a
1883   0F02 11            mov a, b
1884   0F03 26 0A 00      mov b, $a
1885   0F06 AE            div a, b
1886   0F07 27            mov b, a
1887   0F08 E4            pop a
1888   0F09             ; END FACTORS        
1889   0F09 FD 43         mov [d], b
1890   0F0B             ;; i++; 
1891   0F0B 2C FA FF      mov b, [bp + -6] ; $i             
1892   0F0E FD 79         mov g, b
1893   0F10 FD 77         inc b
1894   0F12 FA FA FF      lea d, [bp + -6] ; $i
1895   0F15 FD 43         mov [d], b
1896   0F17 FD 27         mov b, g
1897   0F19 0A CA 0E      jmp _while26_cond
1898   0F1C             _while26_exit:
1899   0F1C             ;; while (i > 0) { 
1900   0F1C             _while27_cond:
1901   0F1C 2C FA FF      mov b, [bp + -6] ; $i             
1902   0F1F             ; START RELATIONAL
1903   0F1F D7            push a
1904   0F20 11            mov a, b
1905   0F21 26 00 00      mov b, $0
1906   0F24 B0            cmp a, b
1907   0F25 FD 7F         sgt ; >
1908   0F27 E4            pop a
1909   0F28             ; END RELATIONAL
1910   0F28 C0 00 00      cmp b, 0
1911   0F2B C6 52 0F      je _while27_exit
1912   0F2E             _while27_block:
1913   0F2E             ;; i--; 
1914   0F2E 2C FA FF      mov b, [bp + -6] ; $i             
1915   0F31 FD 79         mov g, b
1916   0F33 FD 7D         dec b
1917   0F35 FA FA FF      lea d, [bp + -6] ; $i
1918   0F38 FD 43         mov [d], b
1919   0F3A FD 27         mov b, g
1920   0F3C             ;; putchar(digits[i]); 
1921   0F3C FA FC FF      lea d, [bp + -4] ; $digits
1922   0F3F D7            push a         
1923   0F40 2C FA FF      mov b, [bp + -6] ; $i                     
1924   0F43 5A            add d, b
1925   0F44 E4            pop a
1926   0F45 32            mov bl, [d]
1927   0F46 A7 00         mov bh, 0
1928   0F48 DD            push bl
1929   0F49 07 72 0F      call putchar
1930   0F4C 51 01 00      add sp, 1
1931   0F4F 0A 1C 0F      jmp _while27_cond
1932   0F52             _while27_exit:
1933   0F52 F9            leave
1934   0F53 09            ret
1935   0F54             
1936   0F54             rand:
1937   0F54 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1938   0F57             ; $sec 
1939   0F57 52 01 00      sub sp, 1
1940   0F5A             
1941   0F5A             ; --- BEGIN INLINE ASM BLOCK
1942   0F5A 19 00         mov al, 0
1943   0F5C 05 01         syscall sys_rtc					
1944   0F5E 1A            mov al, ah
1945   0F5F 20 00 00      mov al, [bp + 0] ; $sec
1946   0F62                         
1947   0F62             ; --- END INLINE ASM BLOCK
1948   0F62             
1949   0F62             ;; return sec; 
1950   0F62 34 00 00      mov bl, [bp + 0] ; $sec
1951   0F65 A7 00         mov bh, 0             
1952   0F67 F9            leave
1953   0F68 09            ret
1954   0F69             
1955   0F69             date:
1956   0F69 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1957   0F6C             
1958   0F6C             ; --- BEGIN INLINE ASM BLOCK
1959   0F6C 19 00         mov al, 0 
1960   0F6E 05 07         syscall sys_datetime
1961   0F70             ; --- END INLINE ASM BLOCK
1962   0F70             
1963   0F70 F9            leave
1964   0F71 09            ret
1965   0F72             
1966   0F72             putchar:
1967   0F72 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1968   0F75             
1969   0F75             ; --- BEGIN INLINE ASM BLOCK
1970   0F75 20 05 00      mov al, [bp + 5] ; $c
1971   0F78                         
1972   0F78 23            mov ah, al
1973   0F79 07 78 11      call _putchar
1974   0F7C             ; --- END INLINE ASM BLOCK
1975   0F7C             
1976   0F7C F9            leave
1977   0F7D 09            ret
1978   0F7E             
1979   0F7E             getchar:
1980   0F7E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1981   0F81             ; $c 
1982   0F81 52 01 00      sub sp, 1
1983   0F84             
1984   0F84             ; --- BEGIN INLINE ASM BLOCK
1985   0F84 07 71 11      call getch
1986   0F87 1A            mov al, ah
1987   0F88 FA 00 00      lea d, [bp + 0] ; $c
1988   0F8B 3E            mov [d], al
1989   0F8C             ; --- END INLINE ASM BLOCK
1990   0F8C             
1991   0F8C             ;; return c; 
1992   0F8C 34 00 00      mov bl, [bp + 0] ; $c
1993   0F8F A7 00         mov bh, 0             
1994   0F91 F9            leave
1995   0F92 09            ret
1996   0F93             
1997   0F93             scann:
1998   0F93 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1999   0F96             ; $m 
2000   0F96 52 02 00      sub sp, 2
2001   0F99             
2002   0F99             ; --- BEGIN INLINE ASM BLOCK
2003   0F99 07 BC 13      call scan_u16d
2004   0F9C FA FF FF      lea d, [bp + -1] ; $m
2005   0F9F 43            mov [d], a
2006   0FA0             ; --- END INLINE ASM BLOCK
2007   0FA0             
2008   0FA0             ;; return m; 
2009   0FA0 2C FF FF      mov b, [bp + -1] ; $m             
2010   0FA3 F9            leave
2011   0FA4 09            ret
2012   0FA5             
2013   0FA5             puts:
2014   0FA5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2015   0FA8             
2016   0FA8             ; --- BEGIN INLINE ASM BLOCK
2017   0FA8 17 05 00      mov a, [bp + 5] ; $s             
2018   0FAB 3C            mov d, a
2019   0FAC 07 C2 12      call _puts
2020   0FAF 22 0A         mov ah, $0A
2021   0FB1 19 00         mov al, 0
2022   0FB3 05 03         syscall sys_io
2023   0FB5             ; --- END INLINE ASM BLOCK
2024   0FB5             
2025   0FB5 F9            leave
2026   0FB6 09            ret
2027   0FB7             
2028   0FB7             print:
2029   0FB7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2030   0FBA             
2031   0FBA             ; --- BEGIN INLINE ASM BLOCK
2032   0FBA 17 05 00      mov a, [bp + 5] ; $s             
2033   0FBD 3C            mov d, a
2034   0FBE 07 C2 12      call _puts
2035   0FC1             ; --- END INLINE ASM BLOCK
2036   0FC1             
2037   0FC1 F9            leave
2038   0FC2 09            ret
2039   0FC3             
2040   0FC3             loadfile:
2041   0FC3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2042   0FC6             
2043   0FC6             ; --- BEGIN INLINE ASM BLOCK
2044   0FC6 17 05 00      mov a, [bp + 5] ; $destination             
2045   0FC9 4F            mov di, a
2046   0FCA FA 07 00      lea d, [bp + 7] ; $filename
2047   0FCD FD 2A         mov d, [d]
2048   0FCF 19 14         mov al, 20
2049   0FD1 05 04         syscall sys_filesystem
2050   0FD3             ; --- END INLINE ASM BLOCK
2051   0FD3             
2052   0FD3 F9            leave
2053   0FD4 09            ret
2054   0FD5             
2055   0FD5             create_file:
2056   0FD5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2057   0FD8 F9            leave
2058   0FD9 09            ret
2059   0FDA             
2060   0FDA             delete_file:
2061   0FDA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2062   0FDD             
2063   0FDD             ; --- BEGIN INLINE ASM BLOCK
2064   0FDD FA 05 00      lea d, [bp + 5] ; $filename
2065   0FE0 19 0A         mov al, 10
2066   0FE2 05 04         syscall sys_filesystem
2067   0FE4             ; --- END INLINE ASM BLOCK
2068   0FE4             
2069   0FE4 F9            leave
2070   0FE5 09            ret
2071   0FE6             
2072   0FE6             fopen:
2073   0FE6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2074   0FE9 F9            leave
2075   0FEA 09            ret
2076   0FEB             
2077   0FEB             fclose:
2078   0FEB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2079   0FEE F9            leave
2080   0FEF 09            ret
2081   0FF0             
2082   0FF0             alloc:
2083   0FF0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2084   0FF3             ;; heap_top = heap_top + bytes; 
2085   0FF3 3B 72 29      mov d, _heap_top ; $heap_top         
2086   0FF6 29 72 29      mov b, [_heap_top] ; $heap_top           
2087   0FF9             ; START TERMS
2088   0FF9 D7            push a
2089   0FFA 11            mov a, b
2090   0FFB 2C 05 00      mov b, [bp + 5] ; $bytes             
2091   0FFE 54            add a, b
2092   0FFF 27            mov b, a
2093   1000 E4            pop a
2094   1001             ; END TERMS        
2095   1001 FD 43         mov [d], b
2096   1003             ;; return heap_top - bytes; 
2097   1003 29 72 29      mov b, [_heap_top] ; $heap_top           
2098   1006             ; START TERMS
2099   1006 D7            push a
2100   1007 11            mov a, b
2101   1008 2C 05 00      mov b, [bp + 5] ; $bytes             
2102   100B 60            sub a, b
2103   100C 27            mov b, a
2104   100D E4            pop a
2105   100E             ; END TERMS
2106   100E F9            leave
2107   100F 09            ret
2108   1010             
2109   1010             free:
2110   1010 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2111   1013             ;; return heap_top = heap_top - bytes; 
2112   1013 3B 72 29      mov d, _heap_top ; $heap_top         
2113   1016 29 72 29      mov b, [_heap_top] ; $heap_top           
2114   1019             ; START TERMS
2115   1019 D7            push a
2116   101A 11            mov a, b
2117   101B 2C 05 00      mov b, [bp + 5] ; $bytes             
2118   101E 60            sub a, b
2119   101F 27            mov b, a
2120   1020 E4            pop a
2121   1021             ; END TERMS        
2122   1021 FD 43         mov [d], b
2123   1023 F9            leave
2124   1024 09            ret
2125   1025             
2126   1025             exit:
2127   1025 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2128   1028             
2129   1028             ; --- BEGIN INLINE ASM BLOCK
2130   1028 05 0B         syscall sys_terminate_proc
2131   102A             ; --- END INLINE ASM BLOCK
2132   102A             
2133   102A F9            leave
2134   102B 09            ret
2135   102C             
2136   102C             load_hex:
2137   102C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2138   102F             ; $temp 
2139   102F 52 02 00      sub sp, 2
2140   1032             ;; temp = alloc(32768); 
2141   1032 FA FF FF      lea d, [bp + -1] ; $temp
2142   1035 DA            push d
2143   1036 26 00 80      mov b, $8000
2144   1039 FD AB         swp b
2145   103B D8            push b
2146   103C 07 F0 0F      call alloc
2147   103F 51 02 00      add sp, 2
2148   1042 E7            pop d
2149   1043 FD 43         mov [d], b
2150   1045             
2151   1045             ; --- BEGIN INLINE ASM BLOCK
2152   1045               
2153   1045               
2154   1045               
2155   1045               
2156   1045               
2157   1045             _load_hex:
2158   1045 D7            push a
2159   1046 D8            push b
2160   1047 DA            push d
2161   1048 E2            push si
2162   1049 E3            push di
2163   104A 52 00 80      sub sp, $8000      
2164   104D 38 00 00      mov c, 0
2165   1050 48            mov a, sp
2166   1051 77            inc a
2167   1052 3C            mov d, a          
2168   1053 07 7F 11      call _gets        
2169   1056 4D            mov si, a
2170   1057             __load_hex_loop:
2171   1057 F6            lodsb             
2172   1058 B9 00         cmp al, 0         
2173   105A C6 68 10      jz __load_hex_ret
2174   105D 36            mov bh, al
2175   105E F6            lodsb
2176   105F 2F            mov bl, al
2177   1060 07 35 11      call _atoi        
2178   1063 F7            stosb             
2179   1064 78            inc c
2180   1065 0A 57 10      jmp __load_hex_loop
2181   1068             __load_hex_ret:
2182   1068 51 00 80      add sp, $8000
2183   106B F0            pop di
2184   106C EF            pop si
2185   106D E7            pop d
2186   106E E5            pop b
2187   106F E4            pop a
2188   1070             ; --- END INLINE ASM BLOCK
2189   1070             
2190   1070 F9            leave
2191   1071 09            ret
2192   1072             
2193   1072             getparam:
2194   1072 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2195   1075             ; $data 
2196   1075 52 01 00      sub sp, 1
2197   1078             
2198   1078             ; --- BEGIN INLINE ASM BLOCK
2199   1078 19 04         mov al, 4
2200   107A FA 05 00      lea d, [bp + 5] ; $address
2201   107D FD 2A         mov d, [d]
2202   107F 05 0C         syscall sys_system
2203   1081 FA 00 00      lea d, [bp + 0] ; $data
2204   1084 FD 3E         mov [d], bl
2205   1086             ; --- END INLINE ASM BLOCK
2206   1086             
2207   1086             ;; return data; 
2208   1086 34 00 00      mov bl, [bp + 0] ; $data
2209   1089 A7 00         mov bh, 0             
2210   108B F9            leave
2211   108C 09            ret
2212   108D             
2213   108D             include_stdio_asm:
2214   108D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2215   1090             
2216   1090             ; --- BEGIN INLINE ASM BLOCK
2217   1090             .include "lib/stdio.asm"
0001+  1090             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1090             ; stdio.s
0003+  1090             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1090             .include "lib/string.asm"
0001++ 1090             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1090             ; string.s
0003++ 1090             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1090             
0005++ 1090             
0006++ 1090             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1090             ; _strrev
0008++ 1090             ; reverse a string
0009++ 1090             ; D = string address
0010++ 1090             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1090             ; 01234
0012++ 1090             _strrev:
0013++ 1090 4B          	pusha
0014++ 1091 07 D7 10    	call _strlen	; length in C
0015++ 1094 12          	mov a, c
0016++ 1095 AF 01 00    	cmp a, 1
0017++ 1098 D0 B2 10    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 109B 7D          	dec a
0019++ 109C FD 4E       	mov si, d	; beginning of string
0020++ 109E FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 10A0 59          	add d, a	; end of string
0022++ 10A1 12          	mov a, c
0023++ 10A2 FD 9B       	shr a		; divide by 2
0024++ 10A4 39          	mov c, a	; C now counts the steps
0025++ 10A5             _strrev_L0:
0026++ 10A5 32          	mov bl, [d]	; save load right-side char into BL
0027++ 10A6 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 10A7 3E          	mov [d], al	; store left char into right side
0029++ 10A8 1B          	mov al, bl
0030++ 10A9 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 10AA 7E          	dec c
0032++ 10AB 7F          	dec d
0033++ 10AC C2 00 00    	cmp c, 0
0034++ 10AF C7 A5 10    	jne _strrev_L0
0035++ 10B2             _strrev_end:
0036++ 10B2 4C          	popa
0037++ 10B3 09          	ret
0038++ 10B4             	
0039++ 10B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 10B4             ; _strchr
0041++ 10B4             ; search string in D for char in AL
0042++ 10B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 10B4             _strchr:
0044++ 10B4             _strchr_L0:
0045++ 10B4 32          	mov bl, [d]
0046++ 10B5 C1 00       	cmp bl, 0
0047++ 10B7 C6 C2 10    	je _strchr_end
0048++ 10BA BA          	cmp al, bl
0049++ 10BB C6 C2 10    	je _strchr_end
0050++ 10BE 79          	inc d
0051++ 10BF 0A B4 10    	jmp _strchr_L0
0052++ 10C2             _strchr_end:
0053++ 10C2 1B          	mov al, bl
0054++ 10C3 09          	ret
0055++ 10C4             
0056++ 10C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 10C4             ; _strstr
0058++ 10C4             ; find sub-string
0059++ 10C4             ; str1 in SI
0060++ 10C4             ; str2 in DI
0061++ 10C4             ; SI points to end of source string
0062++ 10C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 10C4             _strstr:
0064++ 10C4 DB          	push al
0065++ 10C5 DA          	push d
0066++ 10C6 E3          	push di
0067++ 10C7             _strstr_loop:
0068++ 10C7 F3          	cmpsb					; compare a byte of the strings
0069++ 10C8 C7 D3 10    	jne _strstr_ret
0070++ 10CB FC 00 00    	lea d, [di + 0]
0071++ 10CE BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 10D0 C7 C7 10    	jne _strstr_loop				; equal chars but not at end
0073++ 10D3             _strstr_ret:
0074++ 10D3 F0          	pop di
0075++ 10D4 E7          	pop d
0076++ 10D5 E8          	pop al
0077++ 10D6 09          	ret
0078++ 10D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 10D7             ; length of null terminated string
0080++ 10D7             ; result in C
0081++ 10D7             ; pointer in D
0082++ 10D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 10D7             _strlen:
0084++ 10D7 DA          	push d
0085++ 10D8 38 00 00    	mov c, 0
0086++ 10DB             _strlen_L1:
0087++ 10DB BD 00       	cmp byte [d], 0
0088++ 10DD C6 E5 10    	je _strlen_ret
0089++ 10E0 79          	inc d
0090++ 10E1 78          	inc c
0091++ 10E2 0A DB 10    	jmp _strlen_L1
0092++ 10E5             _strlen_ret:
0093++ 10E5 E7          	pop d
0094++ 10E6 09          	ret
0095++ 10E7             
0096++ 10E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 10E7             ; STRCMP
0098++ 10E7             ; compare two strings
0099++ 10E7             ; str1 in SI
0100++ 10E7             ; str2 in DI
0101++ 10E7             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 10E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 10E7             _strcmp:
0104++ 10E7 DB          	push al
0105++ 10E8 DA          	push d
0106++ 10E9 E3          	push di
0107++ 10EA E2          	push si
0108++ 10EB             _strcmp_loop:
0109++ 10EB F3          	cmpsb					; compare a byte of the strings
0110++ 10EC C7 F7 10    	jne _strcmp_ret
0111++ 10EF FB FF FF    	lea d, [si +- 1]
0112++ 10F2 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 10F4 C7 EB 10    	jne _strcmp_loop				; equal chars but not at end
0114++ 10F7             _strcmp_ret:
0115++ 10F7 EF          	pop si
0116++ 10F8 F0          	pop di
0117++ 10F9 E7          	pop d
0118++ 10FA E8          	pop al
0119++ 10FB 09          	ret
0120++ 10FC             
0121++ 10FC             
0122++ 10FC             ; STRCPY
0123++ 10FC             ; copy null terminated string from SI to DI
0124++ 10FC             ; source in SI
0125++ 10FC             ; destination in DI
0126++ 10FC             _strcpy:
0127++ 10FC E2          	push si
0128++ 10FD E3          	push di
0129++ 10FE DB          	push al
0130++ 10FF             _strcpy_L1:
0131++ 10FF F6          	lodsb
0132++ 1100 F7          	stosb
0133++ 1101 B9 00       	cmp al, 0
0134++ 1103 C7 FF 10    	jne _strcpy_L1
0135++ 1106             _strcpy_end:
0136++ 1106 E8          	pop al
0137++ 1107 F0          	pop di
0138++ 1108 EF          	pop si
0139++ 1109 09          	ret
0140++ 110A             
0141++ 110A             ; STRCAT
0142++ 110A             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 110A             ; source in SI
0144++ 110A             ; destination in DI
0145++ 110A             _strcat:
0146++ 110A E2          	push si
0147++ 110B E3          	push di
0148++ 110C D7          	push a
0149++ 110D DA          	push d
0150++ 110E 50          	mov a, di
0151++ 110F 3C          	mov d, a
0152++ 1110             _strcat_goto_end_L1:
0153++ 1110 BD 00       	cmp byte[d], 0
0154++ 1112 C6 19 11    	je _strcat_start
0155++ 1115 79          	inc d
0156++ 1116 0A 10 11    	jmp _strcat_goto_end_L1
0157++ 1119             _strcat_start:
0158++ 1119 FD 50       	mov di, d
0159++ 111B             _strcat_L1:
0160++ 111B F6          	lodsb
0161++ 111C F7          	stosb
0162++ 111D B9 00       	cmp al, 0
0163++ 111F C7 1B 11    	jne _strcat_L1
0164++ 1122             _strcat_end:
0165++ 1122 E7          	pop d
0166++ 1123 E4          	pop a
0167++ 1124 F0          	pop di
0168++ 1125 EF          	pop si
0169++ 1126 09          	ret
0170++ 1127             
0171++ 1127             
0005+  1127             
0006+  1127             
0007+  1127             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  1127             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  1127             ; ASCII in BL
0010+  1127             ; result in AL
0011+  1127             ; ascii for F = 0100 0110
0012+  1127             ; ascii for 9 = 0011 1001
0013+  1127             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  1127             hex_ascii_encode:
0015+  1127 1B            mov al, bl
0016+  1128 93 40         test al, $40        ; test if letter or number
0017+  112A C7 30 11      jnz hex_letter
0018+  112D 87 0F         and al, $0F        ; get number
0019+  112F 09            ret
0020+  1130             hex_letter:
0021+  1130 87 0F         and al, $0F        ; get letter
0022+  1132 6A 09         add al, 9
0023+  1134 09            ret
0024+  1135             
0025+  1135             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  1135             ; ATOI
0027+  1135             ; 2 letter hex string in B
0028+  1135             ; 8bit integer returned in AL
0029+  1135             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  1135             _atoi:
0031+  1135 D8            push b
0032+  1136 07 27 11      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  1139 30            mov bl, bh
0034+  113A DB            push al          ; save a
0035+  113B 07 27 11      call hex_ascii_encode
0036+  113E EA            pop bl  
0037+  113F FD 9E 04      shl al, 4
0038+  1142 8C            or al, bl
0039+  1143 E5            pop b
0040+  1144 09            ret  
0041+  1145             
0042+  1145             
0043+  1145             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  1145             ; scanf
0045+  1145             ; no need for explanations!
0046+  1145             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  1145             scanf:
0048+  1145 09            ret
0049+  1146             
0050+  1146             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  1146             ; ITOA
0052+  1146             ; 8bit value in BL
0053+  1146             ; 2 byte ASCII result in A
0054+  1146             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  1146             _itoa:
0056+  1146 DA            push d
0057+  1147 D8            push b
0058+  1148 A7 00         mov bh, 0
0059+  114A FD A4 04      shr bl, 4  
0060+  114D 74            mov d, b
0061+  114E 1F F6 13      mov al, [d + s_hex_digits]
0062+  1151 23            mov ah, al
0063+  1152               
0064+  1152 E5            pop b
0065+  1153 D8            push b
0066+  1154 A7 00         mov bh, 0
0067+  1156 FD 87 0F      and bl, $0F
0068+  1159 74            mov d, b
0069+  115A 1F F6 13      mov al, [d + s_hex_digits]
0070+  115D E5            pop b
0071+  115E E7            pop d
0072+  115F 09            ret
0073+  1160             
0074+  1160             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  1160             ; HEX STRING TO BINARY
0076+  1160             ; di = destination address
0077+  1160             ; si = source
0078+  1160             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  1160             _hex_to_int:
0080+  1160             _hex_to_int_L1:
0081+  1160 F6            lodsb          ; load from [SI] to AL
0082+  1161 B9 00         cmp al, 0        ; check if ASCII 0
0083+  1163 C6 70 11      jz _hex_to_int_ret
0084+  1166 36            mov bh, al
0085+  1167 F6            lodsb
0086+  1168 2F            mov bl, al
0087+  1169 07 35 11      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  116C F7            stosb          ; store AL to [DI]
0089+  116D 0A 60 11      jmp _hex_to_int_L1
0090+  1170             _hex_to_int_ret:
0091+  1170 09            ret    
0092+  1171             
0093+  1171             
0094+  1171             
0095+  1171             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  1171             ; GETCHAR
0097+  1171             ; char in ah
0098+  1171             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  1171             getch:
0100+  1171 DB            push al
0101+  1172             getch_retry:
0102+  1172 19 01         mov al, 1
0103+  1174 05 03         syscall sys_io      ; receive in AH
0104+  1176 E8            pop al
0105+  1177 09            ret
0106+  1178             
0107+  1178             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  1178             ; PUTCHAR
0109+  1178             ; char in ah
0110+  1178             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  1178             _putchar:
0112+  1178 D7            push a
0113+  1179 19 00         mov al, 0
0114+  117B 05 03         syscall sys_io      ; char in AH
0115+  117D E4            pop a
0116+  117E 09            ret
0117+  117F             
0118+  117F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  117F             ;; INPUT A STRING
0120+  117F             ;; terminates with null
0121+  117F             ;; pointer in D
0122+  117F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  117F             _gets:
0124+  117F D7            push a
0125+  1180 DA            push d
0126+  1181             _gets_loop:
0127+  1181 19 01         mov al, 1
0128+  1183 05 03         syscall sys_io      ; receive in AH
0129+  1185 B9 00         cmp al, 0        ; check error code (AL)
0130+  1187 C6 81 11      je _gets_loop      ; if no char received, retry
0131+  118A             
0132+  118A 76 1B         cmp ah, 27
0133+  118C C6 AD 11      je _gets_ansi_esc
0134+  118F 76 0A         cmp ah, $0A        ; LF
0135+  1191 C6 18 12      je _gets_end
0136+  1194 76 0D         cmp ah, $0D        ; CR
0137+  1196 C6 18 12      je _gets_end
0138+  1199 76 5C         cmp ah, $5C        ; '\\'
0139+  119B C6 D9 11      je _gets_escape
0140+  119E               
0141+  119E 76 08         cmp ah, $08      ; check for backspace
0142+  11A0 C6 A9 11      je _gets_backspace
0143+  11A3             
0144+  11A3 1A            mov al, ah
0145+  11A4 3E            mov [d], al
0146+  11A5 79            inc d
0147+  11A6 0A 81 11      jmp _gets_loop
0148+  11A9             _gets_backspace:
0149+  11A9 7F            dec d
0150+  11AA 0A 81 11      jmp _gets_loop
0151+  11AD             _gets_ansi_esc:
0152+  11AD 19 01         mov al, 1
0153+  11AF 05 03         syscall sys_io        ; receive in AH without echo
0154+  11B1 B9 00         cmp al, 0          ; check error code (AL)
0155+  11B3 C6 AD 11      je _gets_ansi_esc    ; if no char received, retry
0156+  11B6 76 5B         cmp ah, '['
0157+  11B8 C7 81 11      jne _gets_loop
0158+  11BB             _gets_ansi_esc_2:
0159+  11BB 19 01         mov al, 1
0160+  11BD 05 03         syscall sys_io          ; receive in AH without echo
0161+  11BF B9 00         cmp al, 0            ; check error code (AL)
0162+  11C1 C6 BB 11      je _gets_ansi_esc_2  ; if no char received, retry
0163+  11C4 76 44         cmp ah, 'D'
0164+  11C6 C6 D1 11      je _gets_left_arrow
0165+  11C9 76 43         cmp ah, 'C'
0166+  11CB C6 D5 11      je _gets_right_arrow
0167+  11CE 0A 81 11      jmp _gets_loop
0168+  11D1             _gets_left_arrow:
0169+  11D1 7F            dec d
0170+  11D2 0A 81 11      jmp _gets_loop
0171+  11D5             _gets_right_arrow:
0172+  11D5 79            inc d
0173+  11D6 0A 81 11      jmp _gets_loop
0174+  11D9             _gets_escape:
0175+  11D9 19 01         mov al, 1
0176+  11DB 05 03         syscall sys_io      ; receive in AH
0177+  11DD B9 00         cmp al, 0        ; check error code (AL)
0178+  11DF C6 D9 11      je _gets_escape      ; if no char received, retry
0179+  11E2 76 6E         cmp ah, 'n'
0180+  11E4 C6 03 12      je _gets_LF
0181+  11E7 76 72         cmp ah, 'r'
0182+  11E9 C6 0A 12      je _gets_CR
0183+  11EC 76 30         cmp ah, '0'
0184+  11EE C6 11 12      je _gets_NULL
0185+  11F1 76 5C         cmp ah, $5C  ; '\'
0186+  11F3 C6 FC 11      je _gets_slash
0187+  11F6 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  11F7 3E            mov [d], al
0189+  11F8 79            inc d
0190+  11F9 0A 81 11      jmp _gets_loop
0191+  11FC             _gets_slash:
0192+  11FC 19 5C         mov al, $5C
0193+  11FE 3E            mov [d], al
0194+  11FF 79            inc d
0195+  1200 0A 81 11      jmp _gets_loop
0196+  1203             _gets_LF:
0197+  1203 19 0A         mov al, $0A
0198+  1205 3E            mov [d], al
0199+  1206 79            inc d
0200+  1207 0A 81 11      jmp _gets_loop
0201+  120A             _gets_CR:
0202+  120A 19 0D         mov al, $0D
0203+  120C 3E            mov [d], al
0204+  120D 79            inc d
0205+  120E 0A 81 11      jmp _gets_loop
0206+  1211             _gets_NULL:
0207+  1211 19 00         mov al, $00
0208+  1213 3E            mov [d], al
0209+  1214 79            inc d
0210+  1215 0A 81 11      jmp _gets_loop
0211+  1218             _gets_end:
0212+  1218 19 00         mov al, 0
0213+  121A 3E            mov [d], al        ; terminate string
0214+  121B E7            pop d
0215+  121C E4            pop a
0216+  121D 09            ret
0217+  121E             
0218+  121E             
0219+  121E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  121E             ;; INPUT TEXT
0221+  121E             ;; terminated with CTRL+D
0222+  121E             ;; pointer in D
0223+  121E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  121E             _gettxt:
0225+  121E D7            push a
0226+  121F DA            push d
0227+  1220             _gettxt_loop:
0228+  1220 19 01         mov al, 1
0229+  1222 05 03         syscall sys_io      ; receive in AH
0230+  1224 B9 00         cmp al, 0        ; check error code (AL)
0231+  1226 C6 20 12      je _gettxt_loop    ; if no char received, retry
0232+  1229 76 04         cmp ah, 4      ; EOT
0233+  122B C6 69 12      je _gettxt_end
0234+  122E 76 08         cmp ah, $08      ; check for backspace
0235+  1230 C6 65 12      je _gettxt_backspace
0236+  1233 76 5C         cmp ah, $5C        ; '\'
0237+  1235 C6 3E 12      je _gettxt_escape
0238+  1238 1A            mov al, ah
0239+  1239 3E            mov [d], al
0240+  123A 79            inc d
0241+  123B 0A 20 12      jmp _gettxt_loop
0242+  123E             _gettxt_escape:
0243+  123E 19 01         mov al, 1
0244+  1240 05 03         syscall sys_io      ; receive in AH
0245+  1242 B9 00         cmp al, 0        ; check error code (AL)
0246+  1244 C6 3E 12      je _gettxt_escape    ; if no char received, retry
0247+  1247 76 6E         cmp ah, 'n'
0248+  1249 C6 57 12      je _gettxt_LF
0249+  124C 76 72         cmp ah, 'r'
0250+  124E C6 5E 12      je _gettxt_CR
0251+  1251 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  1252 3E            mov [d], al
0253+  1253 79            inc d
0254+  1254 0A 20 12      jmp _gettxt_loop
0255+  1257             _gettxt_LF:
0256+  1257 19 0A         mov al, $0A
0257+  1259 3E            mov [d], al
0258+  125A 79            inc d
0259+  125B 0A 20 12      jmp _gettxt_loop
0260+  125E             _gettxt_CR:
0261+  125E 19 0D         mov al, $0D
0262+  1260 3E            mov [d], al
0263+  1261 79            inc d
0264+  1262 0A 20 12      jmp _gettxt_loop
0265+  1265             _gettxt_backspace:
0266+  1265 7F            dec d
0267+  1266 0A 20 12      jmp _gettxt_loop
0268+  1269             _gettxt_end:
0269+  1269 19 00         mov al, 0
0270+  126B 3E            mov [d], al        ; terminate string
0271+  126C E7            pop d
0272+  126D E4            pop a
0273+  126E 09            ret
0274+  126F             
0275+  126F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  126F             ; PRINT NEW LINE
0277+  126F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  126F             printnl:
0279+  126F D7            push a
0280+  1270 10 00 0A      mov a, $0A00
0281+  1273 05 03         syscall sys_io
0282+  1275 10 00 0D      mov a, $0D00
0283+  1278 05 03         syscall sys_io
0284+  127A E4            pop a
0285+  127B 09            ret
0286+  127C             
0287+  127C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  127C             ; _strtoint
0289+  127C             ; 4 digit hex string number in d
0290+  127C             ; integer returned in A
0291+  127C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  127C             _strtointx:
0293+  127C D8            push b
0294+  127D 32            mov bl, [d]
0295+  127E 37            mov bh, bl
0296+  127F 33 01 00      mov bl, [d + 1]
0297+  1282 07 35 11      call _atoi        ; convert to int in AL
0298+  1285 23            mov ah, al        ; move to AH
0299+  1286 33 02 00      mov bl, [d + 2]
0300+  1289 37            mov bh, bl
0301+  128A 33 03 00      mov bl, [d + 3]
0302+  128D 07 35 11      call _atoi        ; convert to int in AL
0303+  1290 E5            pop b
0304+  1291 09            ret
0305+  1292             
0306+  1292             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  1292             ; _strtoint
0308+  1292             ; 5 digit base10 string number in d
0309+  1292             ; integer returned in A
0310+  1292             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  1292             _strtoint:
0312+  1292 E2            push si
0313+  1293 D8            push b
0314+  1294 D9            push c
0315+  1295 DA            push d
0316+  1296 07 D7 10      call _strlen      ; get string length in C
0317+  1299 7E            dec c
0318+  129A FD 4E         mov si, d
0319+  129C 12            mov a, c
0320+  129D FD 99         shl a
0321+  129F 3B 0E 14      mov d, table_power
0322+  12A2 59            add d, a
0323+  12A3 38 00 00      mov c, 0
0324+  12A6             _strtoint_L0:
0325+  12A6 F6            lodsb      ; load ASCII to al
0326+  12A7 B9 00         cmp al, 0
0327+  12A9 C6 BC 12      je _strtoint_end
0328+  12AC 6F 30         sub al, $30    ; make into integer
0329+  12AE 22 00         mov ah, 0
0330+  12B0 2A            mov b, [d]
0331+  12B1 AC            mul a, b      ; result in B since it fits in 16bits
0332+  12B2 11            mov a, b
0333+  12B3 28            mov b, c
0334+  12B4 54            add a, b
0335+  12B5 39            mov c, a
0336+  12B6 63 02 00      sub d, 2
0337+  12B9 0A A6 12      jmp _strtoint_L0
0338+  12BC             _strtoint_end:
0339+  12BC 12            mov a, c
0340+  12BD E7            pop d
0341+  12BE E6            pop c
0342+  12BF E5            pop b
0343+  12C0 EF            pop si
0344+  12C1 09            ret
0345+  12C2             
0346+  12C2             
0347+  12C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  12C2             ; PRINT NULL TERMINATED STRING
0349+  12C2             ; pointer in D
0350+  12C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  12C2             _puts:
0352+  12C2 D7            push a
0353+  12C3 DA            push d
0354+  12C4             _puts_L1:
0355+  12C4 1E            mov al, [d]
0356+  12C5 B9 00         cmp al, 0
0357+  12C7 C6 D3 12      jz _puts_END
0358+  12CA 23            mov ah, al
0359+  12CB 19 00         mov al, 0
0360+  12CD 05 03         syscall sys_io
0361+  12CF 79            inc d
0362+  12D0 0A C4 12      jmp _puts_L1
0363+  12D3             _puts_END:
0364+  12D3 E7            pop d
0365+  12D4 E4            pop a
0366+  12D5 09            ret
0367+  12D6             
0368+  12D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  12D6             ; PRINT N SIZE STRING
0370+  12D6             ; pointer in D
0371+  12D6             ; size in C
0372+  12D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  12D6             _putsn:
0374+  12D6 DB            push al
0375+  12D7 DA            push d
0376+  12D8 D9            push c
0377+  12D9             _putsn_L0:
0378+  12D9 1E            mov al, [d]
0379+  12DA 23            mov ah, al
0380+  12DB 19 00         mov al, 0
0381+  12DD 05 03         syscall sys_io
0382+  12DF 79            inc d
0383+  12E0 7E            dec c  
0384+  12E1 C2 00 00      cmp c, 0
0385+  12E4 C7 D9 12      jne _putsn_L0
0386+  12E7             _putsn_end:
0387+  12E7 E6            pop c
0388+  12E8 E7            pop d
0389+  12E9 E8            pop al
0390+  12EA 09            ret
0391+  12EB             
0392+  12EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  12EB             ; print 16bit decimal number
0394+  12EB             ; input number in A
0395+  12EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  12EB             print_u16d:
0397+  12EB D7            push a
0398+  12EC D8            push b
0399+  12ED 26 10 27      mov b, 10000
0400+  12F0 AE            div a, b      ; get 10000's coeff.
0401+  12F1 07 13 13      call print_number
0402+  12F4 11            mov a, b
0403+  12F5 26 E8 03      mov b, 1000
0404+  12F8 AE            div a, b      ; get 1000's coeff.
0405+  12F9 07 13 13      call print_number
0406+  12FC 11            mov a, b
0407+  12FD 26 64 00      mov b, 100
0408+  1300 AE            div a, b
0409+  1301 07 13 13      call print_number
0410+  1304 11            mov a, b
0411+  1305 26 0A 00      mov b, 10
0412+  1308 AE            div a, b
0413+  1309 07 13 13      call print_number
0414+  130C 1B            mov al, bl      ; 1's coeff in bl
0415+  130D 07 13 13      call print_number
0416+  1310 E5            pop b
0417+  1311 E4            pop a
0418+  1312 09            ret
0419+  1313             
0420+  1313             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  1313             ; print AL
0422+  1313             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  1313             print_number:
0424+  1313 6A 30         add al, $30
0425+  1315 23            mov ah, al
0426+  1316 07 78 11      call _putchar
0427+  1319 09            ret
0428+  131A             
0429+  131A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  131A             ; PRINT 16BIT HEX INTEGER
0431+  131A             ; integer value in reg B
0432+  131A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  131A             print_u16x:
0434+  131A D7            push a
0435+  131B D8            push b
0436+  131C DD            push bl
0437+  131D 30            mov bl, bh
0438+  131E 07 46 11      call _itoa        ; convert bh to char in A
0439+  1321 2F            mov bl, al        ; save al
0440+  1322 19 00         mov al, 0
0441+  1324 05 03         syscall sys_io        ; display AH
0442+  1326 24            mov ah, bl        ; retrieve al
0443+  1327 19 00         mov al, 0
0444+  1329 05 03         syscall sys_io        ; display AL
0445+  132B             
0446+  132B EA            pop bl
0447+  132C 07 46 11      call _itoa        ; convert bh to char in A
0448+  132F 2F            mov bl, al        ; save al
0449+  1330 19 00         mov al, 0
0450+  1332 05 03         syscall sys_io        ; display AH
0451+  1334 24            mov ah, bl        ; retrieve al
0452+  1335 19 00         mov al, 0
0453+  1337 05 03         syscall sys_io        ; display AL
0454+  1339             
0455+  1339 E5            pop b
0456+  133A E4            pop a
0457+  133B 09            ret
0458+  133C             
0459+  133C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  133C             ; INPUT 16BIT HEX INTEGER
0461+  133C             ; read 16bit integer into A
0462+  133C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  133C             scan_u16x:
0464+  133C F8 10 00      enter 16
0465+  133F D8            push b
0466+  1340 DA            push d
0467+  1341             
0468+  1341 FA F1 FF      lea d, [bp + -15]
0469+  1344 07 7F 11      call _gets        ; get number
0470+  1347             
0471+  1347 32            mov bl, [d]
0472+  1348 37            mov bh, bl
0473+  1349 33 01 00      mov bl, [d + 1]
0474+  134C 07 35 11      call _atoi        ; convert to int in AL
0475+  134F 23            mov ah, al        ; move to AH
0476+  1350             
0477+  1350 33 02 00      mov bl, [d + 2]
0478+  1353 37            mov bh, bl
0479+  1354 33 03 00      mov bl, [d + 3]
0480+  1357 07 35 11      call _atoi        ; convert to int in AL
0481+  135A             
0482+  135A E7            pop d
0483+  135B E5            pop b
0484+  135C F9            leave
0485+  135D 09            ret
0486+  135E             
0487+  135E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  135E             ; PRINT 8bit HEX INTEGER
0489+  135E             ; integer value in reg bl
0490+  135E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  135E             print_u8x:
0492+  135E D7            push a
0493+  135F DD            push bl
0494+  1360             
0495+  1360 07 46 11      call _itoa        ; convert bl to char in A
0496+  1363 2F            mov bl, al        ; save al
0497+  1364 19 00         mov al, 0
0498+  1366 05 03         syscall sys_io        ; display AH
0499+  1368 24            mov ah, bl        ; retrieve al
0500+  1369 19 00         mov al, 0
0501+  136B 05 03         syscall sys_io        ; display AL
0502+  136D             
0503+  136D EA            pop bl
0504+  136E E4            pop a
0505+  136F 09            ret
0506+  1370             
0507+  1370             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  1370             ; print 8bit decimal unsigned number
0509+  1370             ; input number in AL
0510+  1370             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  1370             print_u8d:
0512+  1370 D7            push a
0513+  1371 D8            push b
0514+  1372             
0515+  1372 22 00         mov ah, 0
0516+  1374 26 64 00      mov b, 100
0517+  1377 AE            div a, b
0518+  1378 D8            push b      ; save remainder
0519+  1379 B9 00         cmp al, 0
0520+  137B C6 85 13      je skip100
0521+  137E 6A 30         add al, $30
0522+  1380 23            mov ah, al
0523+  1381 19 00         mov al, 0
0524+  1383 05 03         syscall sys_io  ; print coeff
0525+  1385             skip100:
0526+  1385 E4            pop a
0527+  1386 22 00         mov ah, 0
0528+  1388 26 0A 00      mov b, 10
0529+  138B AE            div a, b
0530+  138C D8            push b      ; save remainder
0531+  138D B9 00         cmp al, 0
0532+  138F C6 99 13      je skip10
0533+  1392 6A 30         add al, $30
0534+  1394 23            mov ah, al
0535+  1395 19 00         mov al, 0
0536+  1397 05 03         syscall sys_io  ; print coeff
0537+  1399             skip10:
0538+  1399 E4            pop a
0539+  139A 1B            mov al, bl
0540+  139B 6A 30         add al, $30
0541+  139D 23            mov ah, al
0542+  139E 19 00         mov al, 0
0543+  13A0 05 03         syscall sys_io  ; print coeff
0544+  13A2 E5            pop b
0545+  13A3 E4            pop a
0546+  13A4 09            ret
0547+  13A5             
0548+  13A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  13A5             ; INPUT 8BIT HEX INTEGER
0550+  13A5             ; read 8bit integer into AL
0551+  13A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  13A5             scan_u8x:
0553+  13A5 F8 04 00      enter 4
0554+  13A8 D8            push b
0555+  13A9 DA            push d
0556+  13AA             
0557+  13AA FA FD FF      lea d, [bp + -3]
0558+  13AD 07 7F 11      call _gets        ; get number
0559+  13B0             
0560+  13B0 32            mov bl, [d]
0561+  13B1 37            mov bh, bl
0562+  13B2 33 01 00      mov bl, [d + 1]
0563+  13B5 07 35 11      call _atoi        ; convert to int in AL
0564+  13B8             
0565+  13B8 E7            pop d
0566+  13B9 E5            pop b
0567+  13BA F9            leave
0568+  13BB 09            ret
0569+  13BC             
0570+  13BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  13BC             ; input decimal number
0572+  13BC             ; result in A
0573+  13BC             ; 655'\0'
0574+  13BC             ; low--------high
0575+  13BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  13BC             scan_u16d:
0577+  13BC F8 08 00      enter 8
0578+  13BF E2            push si
0579+  13C0 D8            push b
0580+  13C1 D9            push c
0581+  13C2 DA            push d
0582+  13C3 FA F9 FF      lea d, [bp +- 7]
0583+  13C6 07 7F 11      call _gets
0584+  13C9 07 D7 10      call _strlen      ; get string length in C
0585+  13CC 7E            dec c
0586+  13CD FD 4E         mov si, d
0587+  13CF 12            mov a, c
0588+  13D0 FD 99         shl a
0589+  13D2 3B 0E 14      mov d, table_power
0590+  13D5 59            add d, a
0591+  13D6 38 00 00      mov c, 0
0592+  13D9             mul_loop:
0593+  13D9 F6            lodsb      ; load ASCII to al
0594+  13DA B9 00         cmp al, 0
0595+  13DC C6 EF 13      je mul_exit
0596+  13DF 6F 30         sub al, $30    ; make into integer
0597+  13E1 22 00         mov ah, 0
0598+  13E3 2A            mov b, [d]
0599+  13E4 AC            mul a, b      ; result in B since it fits in 16bits
0600+  13E5 11            mov a, b
0601+  13E6 28            mov b, c
0602+  13E7 54            add a, b
0603+  13E8 39            mov c, a
0604+  13E9 63 02 00      sub d, 2
0605+  13EC 0A D9 13      jmp mul_loop
0606+  13EF             mul_exit:
0607+  13EF 12            mov a, c
0608+  13F0 E7            pop d
0609+  13F1 E6            pop c
0610+  13F2 E5            pop b
0611+  13F3 EF            pop si
0612+  13F4 F9            leave
0613+  13F5 09            ret
0614+  13F6             
0615+  13F6             
0616+  13F6 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  13FA 34 35 36 37 
0616+  13FE 38 39 41 42 
0616+  1402 43 44 45 46 
0617+  1406 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  140A 1B 5B 48 00 
0618+  140E             
0619+  140E             table_power:
0620+  140E 01 00         .dw 1
0621+  1410 0A 00         .dw 10
0622+  1412 64 00         .dw 100
0623+  1414 E8 03         .dw 1000
0624+  1416 10 27         .dw 100002218   1418             ; --- END INLINE ASM BLOCK
2219   1418             
2220   1418 F9            leave
2221   1419 09            ret
2222   141A             
2223   141A             back:
2224   141A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2225   141D             ; $t 
2226   141D 52 02 00      sub sp, 2
2227   1420             ;; t = token; 
2228   1420 FA FF FF      lea d, [bp + -1] ; $t         
2229   1423 26 EA 24      mov b, _token_data ; $token                   
2230   1426 FD 43         mov [d], b
2231   1428             ;; while(*t++) prog--; 
2232   1428             _while28_cond:
2233   1428 2C FF FF      mov b, [bp + -1] ; $t             
2234   142B FD 79         mov g, b
2235   142D FD 77         inc b
2236   142F FA FF FF      lea d, [bp + -1] ; $t
2237   1432 FD 43         mov [d], b
2238   1434 FD 27         mov b, g
2239   1436 74            mov d, b
2240   1437 32            mov bl, [d]
2241   1438 A7 00         mov bh, 0
2242   143A C0 00 00      cmp b, 0
2243   143D C6 51 14      je _while28_exit
2244   1440             _while28_block:
2245   1440             ;; prog--; 
2246   1440 29 E8 24      mov b, [_prog] ; $prog           
2247   1443 FD 79         mov g, b
2248   1445 FD 7D         dec b
2249   1447 3B E8 24      mov d, _prog ; $prog
2250   144A FD 43         mov [d], b
2251   144C FD 27         mov b, g
2252   144E 0A 28 14      jmp _while28_cond
2253   1451             _while28_exit:
2254   1451             ;; tok = TOK_UNDEF; 
2255   1451 3B E4 24      mov d, _tok ; $tok         
2256   1454 26 00 00      mov b, 0; TOK_UNDEF        
2257   1457 FD 43         mov [d], b
2258   1459             ;; toktype = TYPE_UNDEF; 
2259   1459 3B E6 24      mov d, _toktype ; $toktype         
2260   145C 26 00 00      mov b, 0; TYPE_UNDEF        
2261   145F FD 43         mov [d], b
2262   1461             ;; token[0] = '\0'; 
2263   1461 3B EA 24      mov d, _token_data ; $token
2264   1464 D7            push a         
2265   1465 26 00 00      mov b, $0        
2266   1468 5A            add d, b
2267   1469 E4            pop a         
2268   146A 26 00 00      mov b, $0        
2269   146D FD 3E         mov [d], bl
2270   146F F9            leave
2271   1470 09            ret
2272   1471             
2273   1471             get_path:
2274   1471 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2275   1474             ; $t 
2276   1474 52 02 00      sub sp, 2
2277   1477             ;; *token = '\0'; 
2278   1477 26 EA 24      mov b, _token_data ; $token           
2279   147A D8            push b
2280   147B 26 00 00      mov b, $0
2281   147E E7            pop d
2282   147F FD 3E         mov [d], bl
2283   1481             ;; t = token; 
2284   1481 FA FF FF      lea d, [bp + -1] ; $t         
2285   1484 26 EA 24      mov b, _token_data ; $token                   
2286   1487 FD 43         mov [d], b
2287   1489             ;; while(is_space(*prog)) prog++; 
2288   1489             _while29_cond:
2289   1489 29 E8 24      mov b, [_prog] ; $prog           
2290   148C 74            mov d, b
2291   148D 32            mov bl, [d]
2292   148E A7 00         mov bh, 0
2293   1490 DD            push bl
2294   1491 07 47 05      call is_space
2295   1494 51 01 00      add sp, 1
2296   1497 C0 00 00      cmp b, 0
2297   149A C6 AE 14      je _while29_exit
2298   149D             _while29_block:
2299   149D             ;; prog++; 
2300   149D 29 E8 24      mov b, [_prog] ; $prog           
2301   14A0 FD 79         mov g, b
2302   14A2 FD 77         inc b
2303   14A4 3B E8 24      mov d, _prog ; $prog
2304   14A7 FD 43         mov [d], b
2305   14A9 FD 27         mov b, g
2306   14AB 0A 89 14      jmp _while29_cond
2307   14AE             _while29_exit:
2308   14AE             ;; if(*prog == '\0'){ 
2309   14AE             _if30_cond:
2310   14AE 29 E8 24      mov b, [_prog] ; $prog           
2311   14B1 74            mov d, b
2312   14B2 32            mov bl, [d]
2313   14B3 A7 00         mov bh, 0
2314   14B5             ; START RELATIONAL
2315   14B5 D7            push a
2316   14B6 11            mov a, b
2317   14B7 26 00 00      mov b, $0
2318   14BA B0            cmp a, b
2319   14BB FD 71         seq ; ==
2320   14BD E4            pop a
2321   14BE             ; END RELATIONAL
2322   14BE C0 00 00      cmp b, 0
2323   14C1 C6 C9 14      je _if30_exit
2324   14C4             _if30_true:
2325   14C4             ;; return; 
2326   14C4 F9            leave
2327   14C5 09            ret
2328   14C6 0A C9 14      jmp _if30_exit
2329   14C9             _if30_exit:
2330   14C9             ;; while( 
2331   14C9             _while31_cond:
2332   14C9 29 E8 24      mov b, [_prog] ; $prog           
2333   14CC 74            mov d, b
2334   14CD 32            mov bl, [d]
2335   14CE A7 00         mov bh, 0
2336   14D0             ; START RELATIONAL
2337   14D0 D7            push a
2338   14D1 11            mov a, b
2339   14D2 26 61 00      mov b, $61
2340   14D5 B0            cmp a, b
2341   14D6 FD 80         sge ; >=
2342   14D8 E4            pop a
2343   14D9             ; END RELATIONAL
2344   14D9 D7            push a
2345   14DA 11            mov a, b
2346   14DB 29 E8 24      mov b, [_prog] ; $prog           
2347   14DE 74            mov d, b
2348   14DF 32            mov bl, [d]
2349   14E0 A7 00         mov bh, 0
2350   14E2             ; START RELATIONAL
2351   14E2 D7            push a
2352   14E3 11            mov a, b
2353   14E4 26 7A 00      mov b, $7a
2354   14E7 B0            cmp a, b
2355   14E8 FD 74         sle ; <=
2356   14EA E4            pop a
2357   14EB             ; END RELATIONAL
2358   14EB FD A7         sand a, b ; &&
2359   14ED E4            pop a
2360   14EE D7            push a
2361   14EF 11            mov a, b
2362   14F0 29 E8 24      mov b, [_prog] ; $prog           
2363   14F3 74            mov d, b
2364   14F4 32            mov bl, [d]
2365   14F5 A7 00         mov bh, 0
2366   14F7             ; START RELATIONAL
2367   14F7 D7            push a
2368   14F8 11            mov a, b
2369   14F9 26 41 00      mov b, $41
2370   14FC B0            cmp a, b
2371   14FD FD 80         sge ; >=
2372   14FF E4            pop a
2373   1500             ; END RELATIONAL
2374   1500 D7            push a
2375   1501 11            mov a, b
2376   1502 29 E8 24      mov b, [_prog] ; $prog           
2377   1505 74            mov d, b
2378   1506 32            mov bl, [d]
2379   1507 A7 00         mov bh, 0
2380   1509             ; START RELATIONAL
2381   1509 D7            push a
2382   150A 11            mov a, b
2383   150B 26 5A 00      mov b, $5a
2384   150E B0            cmp a, b
2385   150F FD 74         sle ; <=
2386   1511 E4            pop a
2387   1512             ; END RELATIONAL
2388   1512 FD A7         sand a, b ; &&
2389   1514 E4            pop a
2390   1515 FD A8         sor a, b ; ||
2391   1517 11            mov a, b
2392   1518 29 E8 24      mov b, [_prog] ; $prog           
2393   151B 74            mov d, b
2394   151C 32            mov bl, [d]
2395   151D A7 00         mov bh, 0
2396   151F             ; START RELATIONAL
2397   151F D7            push a
2398   1520 11            mov a, b
2399   1521 26 30 00      mov b, $30
2400   1524 B0            cmp a, b
2401   1525 FD 80         sge ; >=
2402   1527 E4            pop a
2403   1528             ; END RELATIONAL
2404   1528 D7            push a
2405   1529 11            mov a, b
2406   152A 29 E8 24      mov b, [_prog] ; $prog           
2407   152D 74            mov d, b
2408   152E 32            mov bl, [d]
2409   152F A7 00         mov bh, 0
2410   1531             ; START RELATIONAL
2411   1531 D7            push a
2412   1532 11            mov a, b
2413   1533 26 39 00      mov b, $39
2414   1536 B0            cmp a, b
2415   1537 FD 74         sle ; <=
2416   1539 E4            pop a
2417   153A             ; END RELATIONAL
2418   153A FD A7         sand a, b ; &&
2419   153C E4            pop a
2420   153D FD A8         sor a, b ; ||
2421   153F 11            mov a, b
2422   1540 29 E8 24      mov b, [_prog] ; $prog           
2423   1543 74            mov d, b
2424   1544 32            mov bl, [d]
2425   1545 A7 00         mov bh, 0
2426   1547             ; START RELATIONAL
2427   1547 D7            push a
2428   1548 11            mov a, b
2429   1549 26 2F 00      mov b, $2f
2430   154C B0            cmp a, b
2431   154D FD 71         seq ; ==
2432   154F E4            pop a
2433   1550             ; END RELATIONAL
2434   1550 FD A8         sor a, b ; ||
2435   1552 11            mov a, b
2436   1553 29 E8 24      mov b, [_prog] ; $prog           
2437   1556 74            mov d, b
2438   1557 32            mov bl, [d]
2439   1558 A7 00         mov bh, 0
2440   155A             ; START RELATIONAL
2441   155A D7            push a
2442   155B 11            mov a, b
2443   155C 26 5F 00      mov b, $5f
2444   155F B0            cmp a, b
2445   1560 FD 71         seq ; ==
2446   1562 E4            pop a
2447   1563             ; END RELATIONAL
2448   1563 FD A8         sor a, b ; ||
2449   1565 11            mov a, b
2450   1566 29 E8 24      mov b, [_prog] ; $prog           
2451   1569 74            mov d, b
2452   156A 32            mov bl, [d]
2453   156B A7 00         mov bh, 0
2454   156D             ; START RELATIONAL
2455   156D D7            push a
2456   156E 11            mov a, b
2457   156F 26 2D 00      mov b, $2d
2458   1572 B0            cmp a, b
2459   1573 FD 71         seq ; ==
2460   1575 E4            pop a
2461   1576             ; END RELATIONAL
2462   1576 FD A8         sor a, b ; ||
2463   1578 11            mov a, b
2464   1579 29 E8 24      mov b, [_prog] ; $prog           
2465   157C 74            mov d, b
2466   157D 32            mov bl, [d]
2467   157E A7 00         mov bh, 0
2468   1580             ; START RELATIONAL
2469   1580 D7            push a
2470   1581 11            mov a, b
2471   1582 26 2E 00      mov b, $2e
2472   1585 B0            cmp a, b
2473   1586 FD 71         seq ; ==
2474   1588 E4            pop a
2475   1589             ; END RELATIONAL
2476   1589 FD A8         sor a, b ; ||
2477   158B E4            pop a
2478   158C C0 00 00      cmp b, 0
2479   158F C6 B9 15      je _while31_exit
2480   1592             _while31_block:
2481   1592             ;; *t++ = *prog++; 
2482   1592 2C FF FF      mov b, [bp + -1] ; $t             
2483   1595 FD 79         mov g, b
2484   1597 FD 77         inc b
2485   1599 FA FF FF      lea d, [bp + -1] ; $t
2486   159C FD 43         mov [d], b
2487   159E FD 27         mov b, g
2488   15A0 D8            push b
2489   15A1 29 E8 24      mov b, [_prog] ; $prog           
2490   15A4 FD 79         mov g, b
2491   15A6 FD 77         inc b
2492   15A8 3B E8 24      mov d, _prog ; $prog
2493   15AB FD 43         mov [d], b
2494   15AD FD 27         mov b, g
2495   15AF 74            mov d, b
2496   15B0 32            mov bl, [d]
2497   15B1 A7 00         mov bh, 0
2498   15B3 E7            pop d
2499   15B4 FD 3E         mov [d], bl
2500   15B6 0A C9 14      jmp _while31_cond
2501   15B9             _while31_exit:
2502   15B9             ;; *t = '\0'; 
2503   15B9 2C FF FF      mov b, [bp + -1] ; $t             
2504   15BC D8            push b
2505   15BD 26 00 00      mov b, $0
2506   15C0 E7            pop d
2507   15C1 FD 3E         mov [d], bl
2508   15C3 F9            leave
2509   15C4 09            ret
2510   15C5             
2511   15C5             get:
2512   15C5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2513   15C8             ; $t 
2514   15C8 52 02 00      sub sp, 2
2515   15CB             ;; *token = '\0'; 
2516   15CB 26 EA 24      mov b, _token_data ; $token           
2517   15CE D8            push b
2518   15CF 26 00 00      mov b, $0
2519   15D2 E7            pop d
2520   15D3 FD 3E         mov [d], bl
2521   15D5             ;; tok = 0; 
2522   15D5 3B E4 24      mov d, _tok ; $tok         
2523   15D8 26 00 00      mov b, $0        
2524   15DB FD 43         mov [d], b
2525   15DD             ;; toktype = 0; 
2526   15DD 3B E6 24      mov d, _toktype ; $toktype         
2527   15E0 26 00 00      mov b, $0        
2528   15E3 FD 43         mov [d], b
2529   15E5             ;; t = token; 
2530   15E5 FA FF FF      lea d, [bp + -1] ; $t         
2531   15E8 26 EA 24      mov b, _token_data ; $token                   
2532   15EB FD 43         mov [d], b
2533   15ED             ;; while(is_space(*prog)) prog++; 
2534   15ED             _while32_cond:
2535   15ED 29 E8 24      mov b, [_prog] ; $prog           
2536   15F0 74            mov d, b
2537   15F1 32            mov bl, [d]
2538   15F2 A7 00         mov bh, 0
2539   15F4 DD            push bl
2540   15F5 07 47 05      call is_space
2541   15F8 51 01 00      add sp, 1
2542   15FB C0 00 00      cmp b, 0
2543   15FE C6 12 16      je _while32_exit
2544   1601             _while32_block:
2545   1601             ;; prog++; 
2546   1601 29 E8 24      mov b, [_prog] ; $prog           
2547   1604 FD 79         mov g, b
2548   1606 FD 77         inc b
2549   1608 3B E8 24      mov d, _prog ; $prog
2550   160B FD 43         mov [d], b
2551   160D FD 27         mov b, g
2552   160F 0A ED 15      jmp _while32_cond
2553   1612             _while32_exit:
2554   1612             ;; if(*prog == '\0'){ 
2555   1612             _if33_cond:
2556   1612 29 E8 24      mov b, [_prog] ; $prog           
2557   1615 74            mov d, b
2558   1616 32            mov bl, [d]
2559   1617 A7 00         mov bh, 0
2560   1619             ; START RELATIONAL
2561   1619 D7            push a
2562   161A 11            mov a, b
2563   161B 26 00 00      mov b, $0
2564   161E B0            cmp a, b
2565   161F FD 71         seq ; ==
2566   1621 E4            pop a
2567   1622             ; END RELATIONAL
2568   1622 C0 00 00      cmp b, 0
2569   1625 C6 35 16      je _if33_exit
2570   1628             _if33_true:
2571   1628             ;; toktype = END; 
2572   1628 3B E6 24      mov d, _toktype ; $toktype         
2573   162B 26 06 00      mov b, 6; END        
2574   162E FD 43         mov [d], b
2575   1630             ;; return; 
2576   1630 F9            leave
2577   1631 09            ret
2578   1632 0A 35 16      jmp _if33_exit
2579   1635             _if33_exit:
2580   1635             ;; if(is_digit(*prog)){ 
2581   1635             _if34_cond:
2582   1635 29 E8 24      mov b, [_prog] ; $prog           
2583   1638 74            mov d, b
2584   1639 32            mov bl, [d]
2585   163A A7 00         mov bh, 0
2586   163C DD            push bl
2587   163D 07 8F 05      call is_digit
2588   1640 51 01 00      add sp, 1
2589   1643 C0 00 00      cmp b, 0
2590   1646 C6 9B 16      je _if34_else
2591   1649             _if34_true:
2592   1649             ;; while(is_digit(*prog)){ 
2593   1649             _while35_cond:
2594   1649 29 E8 24      mov b, [_prog] ; $prog           
2595   164C 74            mov d, b
2596   164D 32            mov bl, [d]
2597   164E A7 00         mov bh, 0
2598   1650 DD            push bl
2599   1651 07 8F 05      call is_digit
2600   1654 51 01 00      add sp, 1
2601   1657 C0 00 00      cmp b, 0
2602   165A C6 84 16      je _while35_exit
2603   165D             _while35_block:
2604   165D             ;; *t++ = *prog++; 
2605   165D 2C FF FF      mov b, [bp + -1] ; $t             
2606   1660 FD 79         mov g, b
2607   1662 FD 77         inc b
2608   1664 FA FF FF      lea d, [bp + -1] ; $t
2609   1667 FD 43         mov [d], b
2610   1669 FD 27         mov b, g
2611   166B D8            push b
2612   166C 29 E8 24      mov b, [_prog] ; $prog           
2613   166F FD 79         mov g, b
2614   1671 FD 77         inc b
2615   1673 3B E8 24      mov d, _prog ; $prog
2616   1676 FD 43         mov [d], b
2617   1678 FD 27         mov b, g
2618   167A 74            mov d, b
2619   167B 32            mov bl, [d]
2620   167C A7 00         mov bh, 0
2621   167E E7            pop d
2622   167F FD 3E         mov [d], bl
2623   1681 0A 49 16      jmp _while35_cond
2624   1684             _while35_exit:
2625   1684             ;; *t = '\0'; 
2626   1684 2C FF FF      mov b, [bp + -1] ; $t             
2627   1687 D8            push b
2628   1688 26 00 00      mov b, $0
2629   168B E7            pop d
2630   168C FD 3E         mov [d], bl
2631   168E             ;; toktype = INTEGER_CONST; 
2632   168E 3B E6 24      mov d, _toktype ; $toktype         
2633   1691 26 04 00      mov b, 4; INTEGER_CONST        
2634   1694 FD 43         mov [d], b
2635   1696             ;; return; // return to avoid *t = '\0' line at the end of function 
2636   1696 F9            leave
2637   1697 09            ret
2638   1698 0A 78 22      jmp _if34_exit
2639   169B             _if34_else:
2640   169B             ;; if(is_alpha(*prog)){ 
2641   169B             _if36_cond:
2642   169B 29 E8 24      mov b, [_prog] ; $prog           
2643   169E 74            mov d, b
2644   169F 32            mov bl, [d]
2645   16A0 A7 00         mov bh, 0
2646   16A2 DD            push bl
2647   16A3 07 B5 05      call is_alpha
2648   16A6 51 01 00      add sp, 1
2649   16A9 C0 00 00      cmp b, 0
2650   16AC C6 12 17      je _if36_else
2651   16AF             _if36_true:
2652   16AF             ;; while(is_alpha(*prog) || is_digit(*prog)){ 
2653   16AF             _while37_cond:
2654   16AF 29 E8 24      mov b, [_prog] ; $prog           
2655   16B2 74            mov d, b
2656   16B3 32            mov bl, [d]
2657   16B4 A7 00         mov bh, 0
2658   16B6 DD            push bl
2659   16B7 07 B5 05      call is_alpha
2660   16BA 51 01 00      add sp, 1
2661   16BD D7            push a
2662   16BE 11            mov a, b
2663   16BF 29 E8 24      mov b, [_prog] ; $prog           
2664   16C2 74            mov d, b
2665   16C3 32            mov bl, [d]
2666   16C4 A7 00         mov bh, 0
2667   16C6 DD            push bl
2668   16C7 07 8F 05      call is_digit
2669   16CA 51 01 00      add sp, 1
2670   16CD FD A8         sor a, b ; ||
2671   16CF E4            pop a
2672   16D0 C0 00 00      cmp b, 0
2673   16D3 C6 FD 16      je _while37_exit
2674   16D6             _while37_block:
2675   16D6             ;; *t++ = *prog++; 
2676   16D6 2C FF FF      mov b, [bp + -1] ; $t             
2677   16D9 FD 79         mov g, b
2678   16DB FD 77         inc b
2679   16DD FA FF FF      lea d, [bp + -1] ; $t
2680   16E0 FD 43         mov [d], b
2681   16E2 FD 27         mov b, g
2682   16E4 D8            push b
2683   16E5 29 E8 24      mov b, [_prog] ; $prog           
2684   16E8 FD 79         mov g, b
2685   16EA FD 77         inc b
2686   16EC 3B E8 24      mov d, _prog ; $prog
2687   16EF FD 43         mov [d], b
2688   16F1 FD 27         mov b, g
2689   16F3 74            mov d, b
2690   16F4 32            mov bl, [d]
2691   16F5 A7 00         mov bh, 0
2692   16F7 E7            pop d
2693   16F8 FD 3E         mov [d], bl
2694   16FA 0A AF 16      jmp _while37_cond
2695   16FD             _while37_exit:
2696   16FD             ;; *t = '\0'; 
2697   16FD 2C FF FF      mov b, [bp + -1] ; $t             
2698   1700 D8            push b
2699   1701 26 00 00      mov b, $0
2700   1704 E7            pop d
2701   1705 FD 3E         mov [d], bl
2702   1707             ;; toktype = IDENTIFIER; 
2703   1707 3B E6 24      mov d, _toktype ; $toktype         
2704   170A 26 05 00      mov b, 5; IDENTIFIER        
2705   170D FD 43         mov [d], b
2706   170F 0A 78 22      jmp _if36_exit
2707   1712             _if36_else:
2708   1712             ;; if(*prog == '\"'){ 
2709   1712             _if38_cond:
2710   1712 29 E8 24      mov b, [_prog] ; $prog           
2711   1715 74            mov d, b
2712   1716 32            mov bl, [d]
2713   1717 A7 00         mov bh, 0
2714   1719             ; START RELATIONAL
2715   1719 D7            push a
2716   171A 11            mov a, b
2717   171B 26 22 00      mov b, $22
2718   171E B0            cmp a, b
2719   171F FD 71         seq ; ==
2720   1721 E4            pop a
2721   1722             ; END RELATIONAL
2722   1722 C0 00 00      cmp b, 0
2723   1725 C6 F4 17      je _if38_else
2724   1728             _if38_true:
2725   1728             ;; *t++ = '\"'; 
2726   1728 2C FF FF      mov b, [bp + -1] ; $t             
2727   172B FD 79         mov g, b
2728   172D FD 77         inc b
2729   172F FA FF FF      lea d, [bp + -1] ; $t
2730   1732 FD 43         mov [d], b
2731   1734 FD 27         mov b, g
2732   1736 D8            push b
2733   1737 26 22 00      mov b, $22
2734   173A E7            pop d
2735   173B FD 3E         mov [d], bl
2736   173D             ;; prog++; 
2737   173D 29 E8 24      mov b, [_prog] ; $prog           
2738   1740 FD 79         mov g, b
2739   1742 FD 77         inc b
2740   1744 3B E8 24      mov d, _prog ; $prog
2741   1747 FD 43         mov [d], b
2742   1749 FD 27         mov b, g
2743   174B             ;; while(*prog != '\"' && *prog){ 
2744   174B             _while39_cond:
2745   174B 29 E8 24      mov b, [_prog] ; $prog           
2746   174E 74            mov d, b
2747   174F 32            mov bl, [d]
2748   1750 A7 00         mov bh, 0
2749   1752             ; START RELATIONAL
2750   1752 D7            push a
2751   1753 11            mov a, b
2752   1754 26 22 00      mov b, $22
2753   1757 B0            cmp a, b
2754   1758 FD 72         sneq ; !=
2755   175A E4            pop a
2756   175B             ; END RELATIONAL
2757   175B D7            push a
2758   175C 11            mov a, b
2759   175D 29 E8 24      mov b, [_prog] ; $prog           
2760   1760 74            mov d, b
2761   1761 32            mov bl, [d]
2762   1762 A7 00         mov bh, 0
2763   1764 FD A7         sand a, b ; &&
2764   1766 E4            pop a
2765   1767 C0 00 00      cmp b, 0
2766   176A C6 94 17      je _while39_exit
2767   176D             _while39_block:
2768   176D             ;; *t++ = *prog++; 
2769   176D 2C FF FF      mov b, [bp + -1] ; $t             
2770   1770 FD 79         mov g, b
2771   1772 FD 77         inc b
2772   1774 FA FF FF      lea d, [bp + -1] ; $t
2773   1777 FD 43         mov [d], b
2774   1779 FD 27         mov b, g
2775   177B D8            push b
2776   177C 29 E8 24      mov b, [_prog] ; $prog           
2777   177F FD 79         mov g, b
2778   1781 FD 77         inc b
2779   1783 3B E8 24      mov d, _prog ; $prog
2780   1786 FD 43         mov [d], b
2781   1788 FD 27         mov b, g
2782   178A 74            mov d, b
2783   178B 32            mov bl, [d]
2784   178C A7 00         mov bh, 0
2785   178E E7            pop d
2786   178F FD 3E         mov [d], bl
2787   1791 0A 4B 17      jmp _while39_cond
2788   1794             _while39_exit:
2789   1794             ;; if(*prog != '\"') error("Double quotes expected"); 
2790   1794             _if40_cond:
2791   1794 29 E8 24      mov b, [_prog] ; $prog           
2792   1797 74            mov d, b
2793   1798 32            mov bl, [d]
2794   1799 A7 00         mov bh, 0
2795   179B             ; START RELATIONAL
2796   179B D7            push a
2797   179C 11            mov a, b
2798   179D 26 22 00      mov b, $22
2799   17A0 B0            cmp a, b
2800   17A1 FD 72         sneq ; !=
2801   17A3 E4            pop a
2802   17A4             ; END RELATIONAL
2803   17A4 C0 00 00      cmp b, 0
2804   17A7 C6 B9 17      je _if40_exit
2805   17AA             _if40_true:
2806   17AA             ;; error("Double quotes expected"); 
2807   17AA 26 50 29      mov b, __s3 ; "Double quotes expected"
2808   17AD FD AB         swp b
2809   17AF D8            push b
2810   17B0 07 BB 24      call error
2811   17B3 51 02 00      add sp, 2
2812   17B6 0A B9 17      jmp _if40_exit
2813   17B9             _if40_exit:
2814   17B9             ;; *t++ = '\"'; 
2815   17B9 2C FF FF      mov b, [bp + -1] ; $t             
2816   17BC FD 79         mov g, b
2817   17BE FD 77         inc b
2818   17C0 FA FF FF      lea d, [bp + -1] ; $t
2819   17C3 FD 43         mov [d], b
2820   17C5 FD 27         mov b, g
2821   17C7 D8            push b
2822   17C8 26 22 00      mov b, $22
2823   17CB E7            pop d
2824   17CC FD 3E         mov [d], bl
2825   17CE             ;; prog++; 
2826   17CE 29 E8 24      mov b, [_prog] ; $prog           
2827   17D1 FD 79         mov g, b
2828   17D3 FD 77         inc b
2829   17D5 3B E8 24      mov d, _prog ; $prog
2830   17D8 FD 43         mov [d], b
2831   17DA FD 27         mov b, g
2832   17DC             ;; toktype = STRING_CONST; 
2833   17DC 3B E6 24      mov d, _toktype ; $toktype         
2834   17DF 26 03 00      mov b, 3; STRING_CONST        
2835   17E2 FD 43         mov [d], b
2836   17E4             ;; *t = '\0'; 
2837   17E4 2C FF FF      mov b, [bp + -1] ; $t             
2838   17E7 D8            push b
2839   17E8 26 00 00      mov b, $0
2840   17EB E7            pop d
2841   17EC FD 3E         mov [d], bl
2842   17EE             ;; convert_constant(); // converts this string token qith quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
2843   17EE 07 84 22      call convert_constant
2844   17F1 0A 78 22      jmp _if38_exit
2845   17F4             _if38_else:
2846   17F4             ;; if(*prog == '#'){ 
2847   17F4             _if41_cond:
2848   17F4 29 E8 24      mov b, [_prog] ; $prog           
2849   17F7 74            mov d, b
2850   17F8 32            mov bl, [d]
2851   17F9 A7 00         mov bh, 0
2852   17FB             ; START RELATIONAL
2853   17FB D7            push a
2854   17FC 11            mov a, b
2855   17FD 26 23 00      mov b, $23
2856   1800 B0            cmp a, b
2857   1801 FD 71         seq ; ==
2858   1803 E4            pop a
2859   1804             ; END RELATIONAL
2860   1804 C0 00 00      cmp b, 0
2861   1807 C6 41 18      je _if41_else
2862   180A             _if41_true:
2863   180A             ;; *t++ = *prog++; 
2864   180A 2C FF FF      mov b, [bp + -1] ; $t             
2865   180D FD 79         mov g, b
2866   180F FD 77         inc b
2867   1811 FA FF FF      lea d, [bp + -1] ; $t
2868   1814 FD 43         mov [d], b
2869   1816 FD 27         mov b, g
2870   1818 D8            push b
2871   1819 29 E8 24      mov b, [_prog] ; $prog           
2872   181C FD 79         mov g, b
2873   181E FD 77         inc b
2874   1820 3B E8 24      mov d, _prog ; $prog
2875   1823 FD 43         mov [d], b
2876   1825 FD 27         mov b, g
2877   1827 74            mov d, b
2878   1828 32            mov bl, [d]
2879   1829 A7 00         mov bh, 0
2880   182B E7            pop d
2881   182C FD 3E         mov [d], bl
2882   182E             ;; tok = HASH; 
2883   182E 3B E4 24      mov d, _tok ; $tok         
2884   1831 26 15 00      mov b, 21; HASH        
2885   1834 FD 43         mov [d], b
2886   1836             ;; toktype = DELIMITER;   
2887   1836 3B E6 24      mov d, _toktype ; $toktype         
2888   1839 26 01 00      mov b, 1; DELIMITER        
2889   183C FD 43         mov [d], b
2890   183E 0A 78 22      jmp _if41_exit
2891   1841             _if41_else:
2892   1841             ;; if(*prog == '{'){ 
2893   1841             _if42_cond:
2894   1841 29 E8 24      mov b, [_prog] ; $prog           
2895   1844 74            mov d, b
2896   1845 32            mov bl, [d]
2897   1846 A7 00         mov bh, 0
2898   1848             ; START RELATIONAL
2899   1848 D7            push a
2900   1849 11            mov a, b
2901   184A 26 7B 00      mov b, $7b
2902   184D B0            cmp a, b
2903   184E FD 71         seq ; ==
2904   1850 E4            pop a
2905   1851             ; END RELATIONAL
2906   1851 C0 00 00      cmp b, 0
2907   1854 C6 8E 18      je _if42_else
2908   1857             _if42_true:
2909   1857             ;; *t++ = *prog++; 
2910   1857 2C FF FF      mov b, [bp + -1] ; $t             
2911   185A FD 79         mov g, b
2912   185C FD 77         inc b
2913   185E FA FF FF      lea d, [bp + -1] ; $t
2914   1861 FD 43         mov [d], b
2915   1863 FD 27         mov b, g
2916   1865 D8            push b
2917   1866 29 E8 24      mov b, [_prog] ; $prog           
2918   1869 FD 79         mov g, b
2919   186B FD 77         inc b
2920   186D 3B E8 24      mov d, _prog ; $prog
2921   1870 FD 43         mov [d], b
2922   1872 FD 27         mov b, g
2923   1874 74            mov d, b
2924   1875 32            mov bl, [d]
2925   1876 A7 00         mov bh, 0
2926   1878 E7            pop d
2927   1879 FD 3E         mov [d], bl
2928   187B             ;; tok = OPENING_BRACE; 
2929   187B 3B E4 24      mov d, _tok ; $tok         
2930   187E 26 1E 00      mov b, 30; OPENING_BRACE        
2931   1881 FD 43         mov [d], b
2932   1883             ;; toktype = DELIMITER;   
2933   1883 3B E6 24      mov d, _toktype ; $toktype         
2934   1886 26 01 00      mov b, 1; DELIMITER        
2935   1889 FD 43         mov [d], b
2936   188B 0A 78 22      jmp _if42_exit
2937   188E             _if42_else:
2938   188E             ;; if(*prog == '}'){ 
2939   188E             _if43_cond:
2940   188E 29 E8 24      mov b, [_prog] ; $prog           
2941   1891 74            mov d, b
2942   1892 32            mov bl, [d]
2943   1893 A7 00         mov bh, 0
2944   1895             ; START RELATIONAL
2945   1895 D7            push a
2946   1896 11            mov a, b
2947   1897 26 7D 00      mov b, $7d
2948   189A B0            cmp a, b
2949   189B FD 71         seq ; ==
2950   189D E4            pop a
2951   189E             ; END RELATIONAL
2952   189E C0 00 00      cmp b, 0
2953   18A1 C6 DB 18      je _if43_else
2954   18A4             _if43_true:
2955   18A4             ;; *t++ = *prog++; 
2956   18A4 2C FF FF      mov b, [bp + -1] ; $t             
2957   18A7 FD 79         mov g, b
2958   18A9 FD 77         inc b
2959   18AB FA FF FF      lea d, [bp + -1] ; $t
2960   18AE FD 43         mov [d], b
2961   18B0 FD 27         mov b, g
2962   18B2 D8            push b
2963   18B3 29 E8 24      mov b, [_prog] ; $prog           
2964   18B6 FD 79         mov g, b
2965   18B8 FD 77         inc b
2966   18BA 3B E8 24      mov d, _prog ; $prog
2967   18BD FD 43         mov [d], b
2968   18BF FD 27         mov b, g
2969   18C1 74            mov d, b
2970   18C2 32            mov bl, [d]
2971   18C3 A7 00         mov bh, 0
2972   18C5 E7            pop d
2973   18C6 FD 3E         mov [d], bl
2974   18C8             ;; tok = CLOSING_BRACE; 
2975   18C8 3B E4 24      mov d, _tok ; $tok         
2976   18CB 26 1F 00      mov b, 31; CLOSING_BRACE        
2977   18CE FD 43         mov [d], b
2978   18D0             ;; toktype = DELIMITER;   
2979   18D0 3B E6 24      mov d, _toktype ; $toktype         
2980   18D3 26 01 00      mov b, 1; DELIMITER        
2981   18D6 FD 43         mov [d], b
2982   18D8 0A 78 22      jmp _if43_exit
2983   18DB             _if43_else:
2984   18DB             ;; if(*prog == '['){ 
2985   18DB             _if44_cond:
2986   18DB 29 E8 24      mov b, [_prog] ; $prog           
2987   18DE 74            mov d, b
2988   18DF 32            mov bl, [d]
2989   18E0 A7 00         mov bh, 0
2990   18E2             ; START RELATIONAL
2991   18E2 D7            push a
2992   18E3 11            mov a, b
2993   18E4 26 5B 00      mov b, $5b
2994   18E7 B0            cmp a, b
2995   18E8 FD 71         seq ; ==
2996   18EA E4            pop a
2997   18EB             ; END RELATIONAL
2998   18EB C0 00 00      cmp b, 0
2999   18EE C6 28 19      je _if44_else
3000   18F1             _if44_true:
3001   18F1             ;; *t++ = *prog++; 
3002   18F1 2C FF FF      mov b, [bp + -1] ; $t             
3003   18F4 FD 79         mov g, b
3004   18F6 FD 77         inc b
3005   18F8 FA FF FF      lea d, [bp + -1] ; $t
3006   18FB FD 43         mov [d], b
3007   18FD FD 27         mov b, g
3008   18FF D8            push b
3009   1900 29 E8 24      mov b, [_prog] ; $prog           
3010   1903 FD 79         mov g, b
3011   1905 FD 77         inc b
3012   1907 3B E8 24      mov d, _prog ; $prog
3013   190A FD 43         mov [d], b
3014   190C FD 27         mov b, g
3015   190E 74            mov d, b
3016   190F 32            mov bl, [d]
3017   1910 A7 00         mov bh, 0
3018   1912 E7            pop d
3019   1913 FD 3E         mov [d], bl
3020   1915             ;; tok = OPENING_BRACKET; 
3021   1915 3B E4 24      mov d, _tok ; $tok         
3022   1918 26 20 00      mov b, 32; OPENING_BRACKET        
3023   191B FD 43         mov [d], b
3024   191D             ;; toktype = DELIMITER;   
3025   191D 3B E6 24      mov d, _toktype ; $toktype         
3026   1920 26 01 00      mov b, 1; DELIMITER        
3027   1923 FD 43         mov [d], b
3028   1925 0A 78 22      jmp _if44_exit
3029   1928             _if44_else:
3030   1928             ;; if(*prog == ']'){ 
3031   1928             _if45_cond:
3032   1928 29 E8 24      mov b, [_prog] ; $prog           
3033   192B 74            mov d, b
3034   192C 32            mov bl, [d]
3035   192D A7 00         mov bh, 0
3036   192F             ; START RELATIONAL
3037   192F D7            push a
3038   1930 11            mov a, b
3039   1931 26 5D 00      mov b, $5d
3040   1934 B0            cmp a, b
3041   1935 FD 71         seq ; ==
3042   1937 E4            pop a
3043   1938             ; END RELATIONAL
3044   1938 C0 00 00      cmp b, 0
3045   193B C6 75 19      je _if45_else
3046   193E             _if45_true:
3047   193E             ;; *t++ = *prog++; 
3048   193E 2C FF FF      mov b, [bp + -1] ; $t             
3049   1941 FD 79         mov g, b
3050   1943 FD 77         inc b
3051   1945 FA FF FF      lea d, [bp + -1] ; $t
3052   1948 FD 43         mov [d], b
3053   194A FD 27         mov b, g
3054   194C D8            push b
3055   194D 29 E8 24      mov b, [_prog] ; $prog           
3056   1950 FD 79         mov g, b
3057   1952 FD 77         inc b
3058   1954 3B E8 24      mov d, _prog ; $prog
3059   1957 FD 43         mov [d], b
3060   1959 FD 27         mov b, g
3061   195B 74            mov d, b
3062   195C 32            mov bl, [d]
3063   195D A7 00         mov bh, 0
3064   195F E7            pop d
3065   1960 FD 3E         mov [d], bl
3066   1962             ;; tok = CLOSING_BRACKET; 
3067   1962 3B E4 24      mov d, _tok ; $tok         
3068   1965 26 21 00      mov b, 33; CLOSING_BRACKET        
3069   1968 FD 43         mov [d], b
3070   196A             ;; toktype = DELIMITER;   
3071   196A 3B E6 24      mov d, _toktype ; $toktype         
3072   196D 26 01 00      mov b, 1; DELIMITER        
3073   1970 FD 43         mov [d], b
3074   1972 0A 78 22      jmp _if45_exit
3075   1975             _if45_else:
3076   1975             ;; if(*prog == '='){ 
3077   1975             _if46_cond:
3078   1975 29 E8 24      mov b, [_prog] ; $prog           
3079   1978 74            mov d, b
3080   1979 32            mov bl, [d]
3081   197A A7 00         mov bh, 0
3082   197C             ; START RELATIONAL
3083   197C D7            push a
3084   197D 11            mov a, b
3085   197E 26 3D 00      mov b, $3d
3086   1981 B0            cmp a, b
3087   1982 FD 71         seq ; ==
3088   1984 E4            pop a
3089   1985             ; END RELATIONAL
3090   1985 C0 00 00      cmp b, 0
3091   1988 C6 07 1A      je _if46_else
3092   198B             _if46_true:
3093   198B             ;; *t++ = *prog++; 
3094   198B 2C FF FF      mov b, [bp + -1] ; $t             
3095   198E FD 79         mov g, b
3096   1990 FD 77         inc b
3097   1992 FA FF FF      lea d, [bp + -1] ; $t
3098   1995 FD 43         mov [d], b
3099   1997 FD 27         mov b, g
3100   1999 D8            push b
3101   199A 29 E8 24      mov b, [_prog] ; $prog           
3102   199D FD 79         mov g, b
3103   199F FD 77         inc b
3104   19A1 3B E8 24      mov d, _prog ; $prog
3105   19A4 FD 43         mov [d], b
3106   19A6 FD 27         mov b, g
3107   19A8 74            mov d, b
3108   19A9 32            mov bl, [d]
3109   19AA A7 00         mov bh, 0
3110   19AC E7            pop d
3111   19AD FD 3E         mov [d], bl
3112   19AF             ;; if (*prog == '='){ 
3113   19AF             _if47_cond:
3114   19AF 29 E8 24      mov b, [_prog] ; $prog           
3115   19B2 74            mov d, b
3116   19B3 32            mov bl, [d]
3117   19B4 A7 00         mov bh, 0
3118   19B6             ; START RELATIONAL
3119   19B6 D7            push a
3120   19B7 11            mov a, b
3121   19B8 26 3D 00      mov b, $3d
3122   19BB B0            cmp a, b
3123   19BC FD 71         seq ; ==
3124   19BE E4            pop a
3125   19BF             ; END RELATIONAL
3126   19BF C0 00 00      cmp b, 0
3127   19C2 C6 F4 19      je _if47_else
3128   19C5             _if47_true:
3129   19C5             ;; *t++ = *prog++; 
3130   19C5 2C FF FF      mov b, [bp + -1] ; $t             
3131   19C8 FD 79         mov g, b
3132   19CA FD 77         inc b
3133   19CC FA FF FF      lea d, [bp + -1] ; $t
3134   19CF FD 43         mov [d], b
3135   19D1 FD 27         mov b, g
3136   19D3 D8            push b
3137   19D4 29 E8 24      mov b, [_prog] ; $prog           
3138   19D7 FD 79         mov g, b
3139   19D9 FD 77         inc b
3140   19DB 3B E8 24      mov d, _prog ; $prog
3141   19DE FD 43         mov [d], b
3142   19E0 FD 27         mov b, g
3143   19E2 74            mov d, b
3144   19E3 32            mov bl, [d]
3145   19E4 A7 00         mov bh, 0
3146   19E6 E7            pop d
3147   19E7 FD 3E         mov [d], bl
3148   19E9             ;; tok = EQUAL; 
3149   19E9 3B E4 24      mov d, _tok ; $tok         
3150   19EC 26 08 00      mov b, 8; EQUAL        
3151   19EF FD 43         mov [d], b
3152   19F1 0A FC 19      jmp _if47_exit
3153   19F4             _if47_else:
3154   19F4             ;; tok = ASSIGNMENT; 
3155   19F4 3B E4 24      mov d, _tok ; $tok         
3156   19F7 26 11 00      mov b, 17; ASSIGNMENT        
3157   19FA FD 43         mov [d], b
3158   19FC             _if47_exit:
3159   19FC             ;; toktype = DELIMITER;   
3160   19FC 3B E6 24      mov d, _toktype ; $toktype         
3161   19FF 26 01 00      mov b, 1; DELIMITER        
3162   1A02 FD 43         mov [d], b
3163   1A04 0A 78 22      jmp _if46_exit
3164   1A07             _if46_else:
3165   1A07             ;; if(*prog == '&'){ 
3166   1A07             _if48_cond:
3167   1A07 29 E8 24      mov b, [_prog] ; $prog           
3168   1A0A 74            mov d, b
3169   1A0B 32            mov bl, [d]
3170   1A0C A7 00         mov bh, 0
3171   1A0E             ; START RELATIONAL
3172   1A0E D7            push a
3173   1A0F 11            mov a, b
3174   1A10 26 26 00      mov b, $26
3175   1A13 B0            cmp a, b
3176   1A14 FD 71         seq ; ==
3177   1A16 E4            pop a
3178   1A17             ; END RELATIONAL
3179   1A17 C0 00 00      cmp b, 0
3180   1A1A C6 99 1A      je _if48_else
3181   1A1D             _if48_true:
3182   1A1D             ;; *t++ = *prog++; 
3183   1A1D 2C FF FF      mov b, [bp + -1] ; $t             
3184   1A20 FD 79         mov g, b
3185   1A22 FD 77         inc b
3186   1A24 FA FF FF      lea d, [bp + -1] ; $t
3187   1A27 FD 43         mov [d], b
3188   1A29 FD 27         mov b, g
3189   1A2B D8            push b
3190   1A2C 29 E8 24      mov b, [_prog] ; $prog           
3191   1A2F FD 79         mov g, b
3192   1A31 FD 77         inc b
3193   1A33 3B E8 24      mov d, _prog ; $prog
3194   1A36 FD 43         mov [d], b
3195   1A38 FD 27         mov b, g
3196   1A3A 74            mov d, b
3197   1A3B 32            mov bl, [d]
3198   1A3C A7 00         mov bh, 0
3199   1A3E E7            pop d
3200   1A3F FD 3E         mov [d], bl
3201   1A41             ;; if(*prog == '&'){ 
3202   1A41             _if49_cond:
3203   1A41 29 E8 24      mov b, [_prog] ; $prog           
3204   1A44 74            mov d, b
3205   1A45 32            mov bl, [d]
3206   1A46 A7 00         mov bh, 0
3207   1A48             ; START RELATIONAL
3208   1A48 D7            push a
3209   1A49 11            mov a, b
3210   1A4A 26 26 00      mov b, $26
3211   1A4D B0            cmp a, b
3212   1A4E FD 71         seq ; ==
3213   1A50 E4            pop a
3214   1A51             ; END RELATIONAL
3215   1A51 C0 00 00      cmp b, 0
3216   1A54 C6 86 1A      je _if49_else
3217   1A57             _if49_true:
3218   1A57             ;; *t++ = *prog++; 
3219   1A57 2C FF FF      mov b, [bp + -1] ; $t             
3220   1A5A FD 79         mov g, b
3221   1A5C FD 77         inc b
3222   1A5E FA FF FF      lea d, [bp + -1] ; $t
3223   1A61 FD 43         mov [d], b
3224   1A63 FD 27         mov b, g
3225   1A65 D8            push b
3226   1A66 29 E8 24      mov b, [_prog] ; $prog           
3227   1A69 FD 79         mov g, b
3228   1A6B FD 77         inc b
3229   1A6D 3B E8 24      mov d, _prog ; $prog
3230   1A70 FD 43         mov [d], b
3231   1A72 FD 27         mov b, g
3232   1A74 74            mov d, b
3233   1A75 32            mov bl, [d]
3234   1A76 A7 00         mov bh, 0
3235   1A78 E7            pop d
3236   1A79 FD 3E         mov [d], bl
3237   1A7B             ;; tok = LOGICAL_AND; 
3238   1A7B 3B E4 24      mov d, _tok ; $tok         
3239   1A7E 26 0E 00      mov b, 14; LOGICAL_AND        
3240   1A81 FD 43         mov [d], b
3241   1A83 0A 8E 1A      jmp _if49_exit
3242   1A86             _if49_else:
3243   1A86             ;; tok = AMPERSAND; 
3244   1A86 3B E4 24      mov d, _tok ; $tok         
3245   1A89 26 16 00      mov b, 22; AMPERSAND        
3246   1A8C FD 43         mov [d], b
3247   1A8E             _if49_exit:
3248   1A8E             ;; toktype = DELIMITER;   
3249   1A8E 3B E6 24      mov d, _toktype ; $toktype         
3250   1A91 26 01 00      mov b, 1; DELIMITER        
3251   1A94 FD 43         mov [d], b
3252   1A96 0A 78 22      jmp _if48_exit
3253   1A99             _if48_else:
3254   1A99             ;; if(*prog == '|'){ 
3255   1A99             _if50_cond:
3256   1A99 29 E8 24      mov b, [_prog] ; $prog           
3257   1A9C 74            mov d, b
3258   1A9D 32            mov bl, [d]
3259   1A9E A7 00         mov bh, 0
3260   1AA0             ; START RELATIONAL
3261   1AA0 D7            push a
3262   1AA1 11            mov a, b
3263   1AA2 26 7C 00      mov b, $7c
3264   1AA5 B0            cmp a, b
3265   1AA6 FD 71         seq ; ==
3266   1AA8 E4            pop a
3267   1AA9             ; END RELATIONAL
3268   1AA9 C0 00 00      cmp b, 0
3269   1AAC C6 2B 1B      je _if50_else
3270   1AAF             _if50_true:
3271   1AAF             ;; *t++ = *prog++; 
3272   1AAF 2C FF FF      mov b, [bp + -1] ; $t             
3273   1AB2 FD 79         mov g, b
3274   1AB4 FD 77         inc b
3275   1AB6 FA FF FF      lea d, [bp + -1] ; $t
3276   1AB9 FD 43         mov [d], b
3277   1ABB FD 27         mov b, g
3278   1ABD D8            push b
3279   1ABE 29 E8 24      mov b, [_prog] ; $prog           
3280   1AC1 FD 79         mov g, b
3281   1AC3 FD 77         inc b
3282   1AC5 3B E8 24      mov d, _prog ; $prog
3283   1AC8 FD 43         mov [d], b
3284   1ACA FD 27         mov b, g
3285   1ACC 74            mov d, b
3286   1ACD 32            mov bl, [d]
3287   1ACE A7 00         mov bh, 0
3288   1AD0 E7            pop d
3289   1AD1 FD 3E         mov [d], bl
3290   1AD3             ;; if (*prog == '|'){ 
3291   1AD3             _if51_cond:
3292   1AD3 29 E8 24      mov b, [_prog] ; $prog           
3293   1AD6 74            mov d, b
3294   1AD7 32            mov bl, [d]
3295   1AD8 A7 00         mov bh, 0
3296   1ADA             ; START RELATIONAL
3297   1ADA D7            push a
3298   1ADB 11            mov a, b
3299   1ADC 26 7C 00      mov b, $7c
3300   1ADF B0            cmp a, b
3301   1AE0 FD 71         seq ; ==
3302   1AE2 E4            pop a
3303   1AE3             ; END RELATIONAL
3304   1AE3 C0 00 00      cmp b, 0
3305   1AE6 C6 18 1B      je _if51_else
3306   1AE9             _if51_true:
3307   1AE9             ;; *t++ = *prog++; 
3308   1AE9 2C FF FF      mov b, [bp + -1] ; $t             
3309   1AEC FD 79         mov g, b
3310   1AEE FD 77         inc b
3311   1AF0 FA FF FF      lea d, [bp + -1] ; $t
3312   1AF3 FD 43         mov [d], b
3313   1AF5 FD 27         mov b, g
3314   1AF7 D8            push b
3315   1AF8 29 E8 24      mov b, [_prog] ; $prog           
3316   1AFB FD 79         mov g, b
3317   1AFD FD 77         inc b
3318   1AFF 3B E8 24      mov d, _prog ; $prog
3319   1B02 FD 43         mov [d], b
3320   1B04 FD 27         mov b, g
3321   1B06 74            mov d, b
3322   1B07 32            mov bl, [d]
3323   1B08 A7 00         mov bh, 0
3324   1B0A E7            pop d
3325   1B0B FD 3E         mov [d], bl
3326   1B0D             ;; tok = LOGICAL_OR; 
3327   1B0D 3B E4 24      mov d, _tok ; $tok         
3328   1B10 26 0F 00      mov b, 15; LOGICAL_OR        
3329   1B13 FD 43         mov [d], b
3330   1B15 0A 20 1B      jmp _if51_exit
3331   1B18             _if51_else:
3332   1B18             ;; tok = BITWISE_OR; 
3333   1B18 3B E4 24      mov d, _tok ; $tok         
3334   1B1B 26 18 00      mov b, 24; BITWISE_OR        
3335   1B1E FD 43         mov [d], b
3336   1B20             _if51_exit:
3337   1B20             ;; toktype = DELIMITER;   
3338   1B20 3B E6 24      mov d, _toktype ; $toktype         
3339   1B23 26 01 00      mov b, 1; DELIMITER        
3340   1B26 FD 43         mov [d], b
3341   1B28 0A 78 22      jmp _if50_exit
3342   1B2B             _if50_else:
3343   1B2B             ;; if(*prog == '~'){ 
3344   1B2B             _if52_cond:
3345   1B2B 29 E8 24      mov b, [_prog] ; $prog           
3346   1B2E 74            mov d, b
3347   1B2F 32            mov bl, [d]
3348   1B30 A7 00         mov bh, 0
3349   1B32             ; START RELATIONAL
3350   1B32 D7            push a
3351   1B33 11            mov a, b
3352   1B34 26 7E 00      mov b, $7e
3353   1B37 B0            cmp a, b
3354   1B38 FD 71         seq ; ==
3355   1B3A E4            pop a
3356   1B3B             ; END RELATIONAL
3357   1B3B C0 00 00      cmp b, 0
3358   1B3E C6 78 1B      je _if52_else
3359   1B41             _if52_true:
3360   1B41             ;; *t++ = *prog++; 
3361   1B41 2C FF FF      mov b, [bp + -1] ; $t             
3362   1B44 FD 79         mov g, b
3363   1B46 FD 77         inc b
3364   1B48 FA FF FF      lea d, [bp + -1] ; $t
3365   1B4B FD 43         mov [d], b
3366   1B4D FD 27         mov b, g
3367   1B4F D8            push b
3368   1B50 29 E8 24      mov b, [_prog] ; $prog           
3369   1B53 FD 79         mov g, b
3370   1B55 FD 77         inc b
3371   1B57 3B E8 24      mov d, _prog ; $prog
3372   1B5A FD 43         mov [d], b
3373   1B5C FD 27         mov b, g
3374   1B5E 74            mov d, b
3375   1B5F 32            mov bl, [d]
3376   1B60 A7 00         mov bh, 0
3377   1B62 E7            pop d
3378   1B63 FD 3E         mov [d], bl
3379   1B65             ;; tok = BITWISE_NOT; 
3380   1B65 3B E4 24      mov d, _tok ; $tok         
3381   1B68 26 19 00      mov b, 25; BITWISE_NOT        
3382   1B6B FD 43         mov [d], b
3383   1B6D             ;; toktype = DELIMITER;   
3384   1B6D 3B E6 24      mov d, _toktype ; $toktype         
3385   1B70 26 01 00      mov b, 1; DELIMITER        
3386   1B73 FD 43         mov [d], b
3387   1B75 0A 78 22      jmp _if52_exit
3388   1B78             _if52_else:
3389   1B78             ;; if(*prog == '<'){ 
3390   1B78             _if53_cond:
3391   1B78 29 E8 24      mov b, [_prog] ; $prog           
3392   1B7B 74            mov d, b
3393   1B7C 32            mov bl, [d]
3394   1B7D A7 00         mov bh, 0
3395   1B7F             ; START RELATIONAL
3396   1B7F D7            push a
3397   1B80 11            mov a, b
3398   1B81 26 3C 00      mov b, $3c
3399   1B84 B0            cmp a, b
3400   1B85 FD 71         seq ; ==
3401   1B87 E4            pop a
3402   1B88             ; END RELATIONAL
3403   1B88 C0 00 00      cmp b, 0
3404   1B8B C6 4F 1C      je _if53_else
3405   1B8E             _if53_true:
3406   1B8E             ;; *t++ = *prog++; 
3407   1B8E 2C FF FF      mov b, [bp + -1] ; $t             
3408   1B91 FD 79         mov g, b
3409   1B93 FD 77         inc b
3410   1B95 FA FF FF      lea d, [bp + -1] ; $t
3411   1B98 FD 43         mov [d], b
3412   1B9A FD 27         mov b, g
3413   1B9C D8            push b
3414   1B9D 29 E8 24      mov b, [_prog] ; $prog           
3415   1BA0 FD 79         mov g, b
3416   1BA2 FD 77         inc b
3417   1BA4 3B E8 24      mov d, _prog ; $prog
3418   1BA7 FD 43         mov [d], b
3419   1BA9 FD 27         mov b, g
3420   1BAB 74            mov d, b
3421   1BAC 32            mov bl, [d]
3422   1BAD A7 00         mov bh, 0
3423   1BAF E7            pop d
3424   1BB0 FD 3E         mov [d], bl
3425   1BB2             ;; if (*prog == '='){ 
3426   1BB2             _if54_cond:
3427   1BB2 29 E8 24      mov b, [_prog] ; $prog           
3428   1BB5 74            mov d, b
3429   1BB6 32            mov bl, [d]
3430   1BB7 A7 00         mov bh, 0
3431   1BB9             ; START RELATIONAL
3432   1BB9 D7            push a
3433   1BBA 11            mov a, b
3434   1BBB 26 3D 00      mov b, $3d
3435   1BBE B0            cmp a, b
3436   1BBF FD 71         seq ; ==
3437   1BC1 E4            pop a
3438   1BC2             ; END RELATIONAL
3439   1BC2 C0 00 00      cmp b, 0
3440   1BC5 C6 F7 1B      je _if54_else
3441   1BC8             _if54_true:
3442   1BC8             ;; *t++ = *prog++; 
3443   1BC8 2C FF FF      mov b, [bp + -1] ; $t             
3444   1BCB FD 79         mov g, b
3445   1BCD FD 77         inc b
3446   1BCF FA FF FF      lea d, [bp + -1] ; $t
3447   1BD2 FD 43         mov [d], b
3448   1BD4 FD 27         mov b, g
3449   1BD6 D8            push b
3450   1BD7 29 E8 24      mov b, [_prog] ; $prog           
3451   1BDA FD 79         mov g, b
3452   1BDC FD 77         inc b
3453   1BDE 3B E8 24      mov d, _prog ; $prog
3454   1BE1 FD 43         mov [d], b
3455   1BE3 FD 27         mov b, g
3456   1BE5 74            mov d, b
3457   1BE6 32            mov bl, [d]
3458   1BE7 A7 00         mov bh, 0
3459   1BE9 E7            pop d
3460   1BEA FD 3E         mov [d], bl
3461   1BEC             ;; tok = LESS_THAN_OR_EQUAL; 
3462   1BEC 3B E4 24      mov d, _tok ; $tok         
3463   1BEF 26 0B 00      mov b, 11; LESS_THAN_OR_EQUAL        
3464   1BF2 FD 43         mov [d], b
3465   1BF4 0A 44 1C      jmp _if54_exit
3466   1BF7             _if54_else:
3467   1BF7             ;; if (*prog == '<'){ 
3468   1BF7             _if55_cond:
3469   1BF7 29 E8 24      mov b, [_prog] ; $prog           
3470   1BFA 74            mov d, b
3471   1BFB 32            mov bl, [d]
3472   1BFC A7 00         mov bh, 0
3473   1BFE             ; START RELATIONAL
3474   1BFE D7            push a
3475   1BFF 11            mov a, b
3476   1C00 26 3C 00      mov b, $3c
3477   1C03 B0            cmp a, b
3478   1C04 FD 71         seq ; ==
3479   1C06 E4            pop a
3480   1C07             ; END RELATIONAL
3481   1C07 C0 00 00      cmp b, 0
3482   1C0A C6 3C 1C      je _if55_else
3483   1C0D             _if55_true:
3484   1C0D             ;; *t++ = *prog++; 
3485   1C0D 2C FF FF      mov b, [bp + -1] ; $t             
3486   1C10 FD 79         mov g, b
3487   1C12 FD 77         inc b
3488   1C14 FA FF FF      lea d, [bp + -1] ; $t
3489   1C17 FD 43         mov [d], b
3490   1C19 FD 27         mov b, g
3491   1C1B D8            push b
3492   1C1C 29 E8 24      mov b, [_prog] ; $prog           
3493   1C1F FD 79         mov g, b
3494   1C21 FD 77         inc b
3495   1C23 3B E8 24      mov d, _prog ; $prog
3496   1C26 FD 43         mov [d], b
3497   1C28 FD 27         mov b, g
3498   1C2A 74            mov d, b
3499   1C2B 32            mov bl, [d]
3500   1C2C A7 00         mov bh, 0
3501   1C2E E7            pop d
3502   1C2F FD 3E         mov [d], bl
3503   1C31             ;; tok = BITWISE_SHL; 
3504   1C31 3B E4 24      mov d, _tok ; $tok         
3505   1C34 26 1A 00      mov b, 26; BITWISE_SHL        
3506   1C37 FD 43         mov [d], b
3507   1C39 0A 44 1C      jmp _if55_exit
3508   1C3C             _if55_else:
3509   1C3C             ;; tok = LESS_THAN; 
3510   1C3C 3B E4 24      mov d, _tok ; $tok         
3511   1C3F 26 0A 00      mov b, 10; LESS_THAN        
3512   1C42 FD 43         mov [d], b
3513   1C44             _if55_exit:
3514   1C44             _if54_exit:
3515   1C44             ;; toktype = DELIMITER;   
3516   1C44 3B E6 24      mov d, _toktype ; $toktype         
3517   1C47 26 01 00      mov b, 1; DELIMITER        
3518   1C4A FD 43         mov [d], b
3519   1C4C 0A 78 22      jmp _if53_exit
3520   1C4F             _if53_else:
3521   1C4F             ;; if(*prog == '>'){ 
3522   1C4F             _if56_cond:
3523   1C4F 29 E8 24      mov b, [_prog] ; $prog           
3524   1C52 74            mov d, b
3525   1C53 32            mov bl, [d]
3526   1C54 A7 00         mov bh, 0
3527   1C56             ; START RELATIONAL
3528   1C56 D7            push a
3529   1C57 11            mov a, b
3530   1C58 26 3E 00      mov b, $3e
3531   1C5B B0            cmp a, b
3532   1C5C FD 71         seq ; ==
3533   1C5E E4            pop a
3534   1C5F             ; END RELATIONAL
3535   1C5F C0 00 00      cmp b, 0
3536   1C62 C6 26 1D      je _if56_else
3537   1C65             _if56_true:
3538   1C65             ;; *t++ = *prog++; 
3539   1C65 2C FF FF      mov b, [bp + -1] ; $t             
3540   1C68 FD 79         mov g, b
3541   1C6A FD 77         inc b
3542   1C6C FA FF FF      lea d, [bp + -1] ; $t
3543   1C6F FD 43         mov [d], b
3544   1C71 FD 27         mov b, g
3545   1C73 D8            push b
3546   1C74 29 E8 24      mov b, [_prog] ; $prog           
3547   1C77 FD 79         mov g, b
3548   1C79 FD 77         inc b
3549   1C7B 3B E8 24      mov d, _prog ; $prog
3550   1C7E FD 43         mov [d], b
3551   1C80 FD 27         mov b, g
3552   1C82 74            mov d, b
3553   1C83 32            mov bl, [d]
3554   1C84 A7 00         mov bh, 0
3555   1C86 E7            pop d
3556   1C87 FD 3E         mov [d], bl
3557   1C89             ;; if (*prog == '='){ 
3558   1C89             _if57_cond:
3559   1C89 29 E8 24      mov b, [_prog] ; $prog           
3560   1C8C 74            mov d, b
3561   1C8D 32            mov bl, [d]
3562   1C8E A7 00         mov bh, 0
3563   1C90             ; START RELATIONAL
3564   1C90 D7            push a
3565   1C91 11            mov a, b
3566   1C92 26 3D 00      mov b, $3d
3567   1C95 B0            cmp a, b
3568   1C96 FD 71         seq ; ==
3569   1C98 E4            pop a
3570   1C99             ; END RELATIONAL
3571   1C99 C0 00 00      cmp b, 0
3572   1C9C C6 CE 1C      je _if57_else
3573   1C9F             _if57_true:
3574   1C9F             ;; *t++ = *prog++; 
3575   1C9F 2C FF FF      mov b, [bp + -1] ; $t             
3576   1CA2 FD 79         mov g, b
3577   1CA4 FD 77         inc b
3578   1CA6 FA FF FF      lea d, [bp + -1] ; $t
3579   1CA9 FD 43         mov [d], b
3580   1CAB FD 27         mov b, g
3581   1CAD D8            push b
3582   1CAE 29 E8 24      mov b, [_prog] ; $prog           
3583   1CB1 FD 79         mov g, b
3584   1CB3 FD 77         inc b
3585   1CB5 3B E8 24      mov d, _prog ; $prog
3586   1CB8 FD 43         mov [d], b
3587   1CBA FD 27         mov b, g
3588   1CBC 74            mov d, b
3589   1CBD 32            mov bl, [d]
3590   1CBE A7 00         mov bh, 0
3591   1CC0 E7            pop d
3592   1CC1 FD 3E         mov [d], bl
3593   1CC3             ;; tok = GREATER_THAN_OR_EQUAL; 
3594   1CC3 3B E4 24      mov d, _tok ; $tok         
3595   1CC6 26 0D 00      mov b, 13; GREATER_THAN_OR_EQUAL        
3596   1CC9 FD 43         mov [d], b
3597   1CCB 0A 1B 1D      jmp _if57_exit
3598   1CCE             _if57_else:
3599   1CCE             ;; if (*prog == '>'){ 
3600   1CCE             _if58_cond:
3601   1CCE 29 E8 24      mov b, [_prog] ; $prog           
3602   1CD1 74            mov d, b
3603   1CD2 32            mov bl, [d]
3604   1CD3 A7 00         mov bh, 0
3605   1CD5             ; START RELATIONAL
3606   1CD5 D7            push a
3607   1CD6 11            mov a, b
3608   1CD7 26 3E 00      mov b, $3e
3609   1CDA B0            cmp a, b
3610   1CDB FD 71         seq ; ==
3611   1CDD E4            pop a
3612   1CDE             ; END RELATIONAL
3613   1CDE C0 00 00      cmp b, 0
3614   1CE1 C6 13 1D      je _if58_else
3615   1CE4             _if58_true:
3616   1CE4             ;; *t++ = *prog++; 
3617   1CE4 2C FF FF      mov b, [bp + -1] ; $t             
3618   1CE7 FD 79         mov g, b
3619   1CE9 FD 77         inc b
3620   1CEB FA FF FF      lea d, [bp + -1] ; $t
3621   1CEE FD 43         mov [d], b
3622   1CF0 FD 27         mov b, g
3623   1CF2 D8            push b
3624   1CF3 29 E8 24      mov b, [_prog] ; $prog           
3625   1CF6 FD 79         mov g, b
3626   1CF8 FD 77         inc b
3627   1CFA 3B E8 24      mov d, _prog ; $prog
3628   1CFD FD 43         mov [d], b
3629   1CFF FD 27         mov b, g
3630   1D01 74            mov d, b
3631   1D02 32            mov bl, [d]
3632   1D03 A7 00         mov bh, 0
3633   1D05 E7            pop d
3634   1D06 FD 3E         mov [d], bl
3635   1D08             ;; tok = BITWISE_SHR; 
3636   1D08 3B E4 24      mov d, _tok ; $tok         
3637   1D0B 26 1B 00      mov b, 27; BITWISE_SHR        
3638   1D0E FD 43         mov [d], b
3639   1D10 0A 1B 1D      jmp _if58_exit
3640   1D13             _if58_else:
3641   1D13             ;; tok = GREATER_THAN; 
3642   1D13 3B E4 24      mov d, _tok ; $tok         
3643   1D16 26 0C 00      mov b, 12; GREATER_THAN        
3644   1D19 FD 43         mov [d], b
3645   1D1B             _if58_exit:
3646   1D1B             _if57_exit:
3647   1D1B             ;; toktype = DELIMITER;   
3648   1D1B 3B E6 24      mov d, _toktype ; $toktype         
3649   1D1E 26 01 00      mov b, 1; DELIMITER        
3650   1D21 FD 43         mov [d], b
3651   1D23 0A 78 22      jmp _if56_exit
3652   1D26             _if56_else:
3653   1D26             ;; if(*prog == '!'){ 
3654   1D26             _if59_cond:
3655   1D26 29 E8 24      mov b, [_prog] ; $prog           
3656   1D29 74            mov d, b
3657   1D2A 32            mov bl, [d]
3658   1D2B A7 00         mov bh, 0
3659   1D2D             ; START RELATIONAL
3660   1D2D D7            push a
3661   1D2E 11            mov a, b
3662   1D2F 26 21 00      mov b, $21
3663   1D32 B0            cmp a, b
3664   1D33 FD 71         seq ; ==
3665   1D35 E4            pop a
3666   1D36             ; END RELATIONAL
3667   1D36 C0 00 00      cmp b, 0
3668   1D39 C6 B8 1D      je _if59_else
3669   1D3C             _if59_true:
3670   1D3C             ;; *t++ = *prog++; 
3671   1D3C 2C FF FF      mov b, [bp + -1] ; $t             
3672   1D3F FD 79         mov g, b
3673   1D41 FD 77         inc b
3674   1D43 FA FF FF      lea d, [bp + -1] ; $t
3675   1D46 FD 43         mov [d], b
3676   1D48 FD 27         mov b, g
3677   1D4A D8            push b
3678   1D4B 29 E8 24      mov b, [_prog] ; $prog           
3679   1D4E FD 79         mov g, b
3680   1D50 FD 77         inc b
3681   1D52 3B E8 24      mov d, _prog ; $prog
3682   1D55 FD 43         mov [d], b
3683   1D57 FD 27         mov b, g
3684   1D59 74            mov d, b
3685   1D5A 32            mov bl, [d]
3686   1D5B A7 00         mov bh, 0
3687   1D5D E7            pop d
3688   1D5E FD 3E         mov [d], bl
3689   1D60             ;; if(*prog == '='){ 
3690   1D60             _if60_cond:
3691   1D60 29 E8 24      mov b, [_prog] ; $prog           
3692   1D63 74            mov d, b
3693   1D64 32            mov bl, [d]
3694   1D65 A7 00         mov bh, 0
3695   1D67             ; START RELATIONAL
3696   1D67 D7            push a
3697   1D68 11            mov a, b
3698   1D69 26 3D 00      mov b, $3d
3699   1D6C B0            cmp a, b
3700   1D6D FD 71         seq ; ==
3701   1D6F E4            pop a
3702   1D70             ; END RELATIONAL
3703   1D70 C0 00 00      cmp b, 0
3704   1D73 C6 A5 1D      je _if60_else
3705   1D76             _if60_true:
3706   1D76             ;; *t++ = *prog++; 
3707   1D76 2C FF FF      mov b, [bp + -1] ; $t             
3708   1D79 FD 79         mov g, b
3709   1D7B FD 77         inc b
3710   1D7D FA FF FF      lea d, [bp + -1] ; $t
3711   1D80 FD 43         mov [d], b
3712   1D82 FD 27         mov b, g
3713   1D84 D8            push b
3714   1D85 29 E8 24      mov b, [_prog] ; $prog           
3715   1D88 FD 79         mov g, b
3716   1D8A FD 77         inc b
3717   1D8C 3B E8 24      mov d, _prog ; $prog
3718   1D8F FD 43         mov [d], b
3719   1D91 FD 27         mov b, g
3720   1D93 74            mov d, b
3721   1D94 32            mov bl, [d]
3722   1D95 A7 00         mov bh, 0
3723   1D97 E7            pop d
3724   1D98 FD 3E         mov [d], bl
3725   1D9A             ;; tok = NOT_EQUAL; 
3726   1D9A 3B E4 24      mov d, _tok ; $tok         
3727   1D9D 26 09 00      mov b, 9; NOT_EQUAL        
3728   1DA0 FD 43         mov [d], b
3729   1DA2 0A AD 1D      jmp _if60_exit
3730   1DA5             _if60_else:
3731   1DA5             ;; tok = LOGICAL_NOT; 
3732   1DA5 3B E4 24      mov d, _tok ; $tok         
3733   1DA8 26 10 00      mov b, 16; LOGICAL_NOT        
3734   1DAB FD 43         mov [d], b
3735   1DAD             _if60_exit:
3736   1DAD             ;; toktype = DELIMITER;   
3737   1DAD 3B E6 24      mov d, _toktype ; $toktype         
3738   1DB0 26 01 00      mov b, 1; DELIMITER        
3739   1DB3 FD 43         mov [d], b
3740   1DB5 0A 78 22      jmp _if59_exit
3741   1DB8             _if59_else:
3742   1DB8             ;; if(*prog == '+'){ 
3743   1DB8             _if61_cond:
3744   1DB8 29 E8 24      mov b, [_prog] ; $prog           
3745   1DBB 74            mov d, b
3746   1DBC 32            mov bl, [d]
3747   1DBD A7 00         mov bh, 0
3748   1DBF             ; START RELATIONAL
3749   1DBF D7            push a
3750   1DC0 11            mov a, b
3751   1DC1 26 2B 00      mov b, $2b
3752   1DC4 B0            cmp a, b
3753   1DC5 FD 71         seq ; ==
3754   1DC7 E4            pop a
3755   1DC8             ; END RELATIONAL
3756   1DC8 C0 00 00      cmp b, 0
3757   1DCB C6 4A 1E      je _if61_else
3758   1DCE             _if61_true:
3759   1DCE             ;; *t++ = *prog++; 
3760   1DCE 2C FF FF      mov b, [bp + -1] ; $t             
3761   1DD1 FD 79         mov g, b
3762   1DD3 FD 77         inc b
3763   1DD5 FA FF FF      lea d, [bp + -1] ; $t
3764   1DD8 FD 43         mov [d], b
3765   1DDA FD 27         mov b, g
3766   1DDC D8            push b
3767   1DDD 29 E8 24      mov b, [_prog] ; $prog           
3768   1DE0 FD 79         mov g, b
3769   1DE2 FD 77         inc b
3770   1DE4 3B E8 24      mov d, _prog ; $prog
3771   1DE7 FD 43         mov [d], b
3772   1DE9 FD 27         mov b, g
3773   1DEB 74            mov d, b
3774   1DEC 32            mov bl, [d]
3775   1DED A7 00         mov bh, 0
3776   1DEF E7            pop d
3777   1DF0 FD 3E         mov [d], bl
3778   1DF2             ;; if(*prog == '+'){ 
3779   1DF2             _if62_cond:
3780   1DF2 29 E8 24      mov b, [_prog] ; $prog           
3781   1DF5 74            mov d, b
3782   1DF6 32            mov bl, [d]
3783   1DF7 A7 00         mov bh, 0
3784   1DF9             ; START RELATIONAL
3785   1DF9 D7            push a
3786   1DFA 11            mov a, b
3787   1DFB 26 2B 00      mov b, $2b
3788   1DFE B0            cmp a, b
3789   1DFF FD 71         seq ; ==
3790   1E01 E4            pop a
3791   1E02             ; END RELATIONAL
3792   1E02 C0 00 00      cmp b, 0
3793   1E05 C6 37 1E      je _if62_else
3794   1E08             _if62_true:
3795   1E08             ;; *t++ = *prog++; 
3796   1E08 2C FF FF      mov b, [bp + -1] ; $t             
3797   1E0B FD 79         mov g, b
3798   1E0D FD 77         inc b
3799   1E0F FA FF FF      lea d, [bp + -1] ; $t
3800   1E12 FD 43         mov [d], b
3801   1E14 FD 27         mov b, g
3802   1E16 D8            push b
3803   1E17 29 E8 24      mov b, [_prog] ; $prog           
3804   1E1A FD 79         mov g, b
3805   1E1C FD 77         inc b
3806   1E1E 3B E8 24      mov d, _prog ; $prog
3807   1E21 FD 43         mov [d], b
3808   1E23 FD 27         mov b, g
3809   1E25 74            mov d, b
3810   1E26 32            mov bl, [d]
3811   1E27 A7 00         mov bh, 0
3812   1E29 E7            pop d
3813   1E2A FD 3E         mov [d], bl
3814   1E2C             ;; tok = INCREMENT; 
3815   1E2C 3B E4 24      mov d, _tok ; $tok         
3816   1E2F 26 05 00      mov b, 5; INCREMENT        
3817   1E32 FD 43         mov [d], b
3818   1E34 0A 3F 1E      jmp _if62_exit
3819   1E37             _if62_else:
3820   1E37             ;; tok = PLUS; 
3821   1E37 3B E4 24      mov d, _tok ; $tok         
3822   1E3A 26 01 00      mov b, 1; PLUS        
3823   1E3D FD 43         mov [d], b
3824   1E3F             _if62_exit:
3825   1E3F             ;; toktype = DELIMITER;   
3826   1E3F 3B E6 24      mov d, _toktype ; $toktype         
3827   1E42 26 01 00      mov b, 1; DELIMITER        
3828   1E45 FD 43         mov [d], b
3829   1E47 0A 78 22      jmp _if61_exit
3830   1E4A             _if61_else:
3831   1E4A             ;; if(*prog == '-'){ 
3832   1E4A             _if63_cond:
3833   1E4A 29 E8 24      mov b, [_prog] ; $prog           
3834   1E4D 74            mov d, b
3835   1E4E 32            mov bl, [d]
3836   1E4F A7 00         mov bh, 0
3837   1E51             ; START RELATIONAL
3838   1E51 D7            push a
3839   1E52 11            mov a, b
3840   1E53 26 2D 00      mov b, $2d
3841   1E56 B0            cmp a, b
3842   1E57 FD 71         seq ; ==
3843   1E59 E4            pop a
3844   1E5A             ; END RELATIONAL
3845   1E5A C0 00 00      cmp b, 0
3846   1E5D C6 DC 1E      je _if63_else
3847   1E60             _if63_true:
3848   1E60             ;; *t++ = *prog++; 
3849   1E60 2C FF FF      mov b, [bp + -1] ; $t             
3850   1E63 FD 79         mov g, b
3851   1E65 FD 77         inc b
3852   1E67 FA FF FF      lea d, [bp + -1] ; $t
3853   1E6A FD 43         mov [d], b
3854   1E6C FD 27         mov b, g
3855   1E6E D8            push b
3856   1E6F 29 E8 24      mov b, [_prog] ; $prog           
3857   1E72 FD 79         mov g, b
3858   1E74 FD 77         inc b
3859   1E76 3B E8 24      mov d, _prog ; $prog
3860   1E79 FD 43         mov [d], b
3861   1E7B FD 27         mov b, g
3862   1E7D 74            mov d, b
3863   1E7E 32            mov bl, [d]
3864   1E7F A7 00         mov bh, 0
3865   1E81 E7            pop d
3866   1E82 FD 3E         mov [d], bl
3867   1E84             ;; if(*prog == '-'){ 
3868   1E84             _if64_cond:
3869   1E84 29 E8 24      mov b, [_prog] ; $prog           
3870   1E87 74            mov d, b
3871   1E88 32            mov bl, [d]
3872   1E89 A7 00         mov bh, 0
3873   1E8B             ; START RELATIONAL
3874   1E8B D7            push a
3875   1E8C 11            mov a, b
3876   1E8D 26 2D 00      mov b, $2d
3877   1E90 B0            cmp a, b
3878   1E91 FD 71         seq ; ==
3879   1E93 E4            pop a
3880   1E94             ; END RELATIONAL
3881   1E94 C0 00 00      cmp b, 0
3882   1E97 C6 C9 1E      je _if64_else
3883   1E9A             _if64_true:
3884   1E9A             ;; *t++ = *prog++; 
3885   1E9A 2C FF FF      mov b, [bp + -1] ; $t             
3886   1E9D FD 79         mov g, b
3887   1E9F FD 77         inc b
3888   1EA1 FA FF FF      lea d, [bp + -1] ; $t
3889   1EA4 FD 43         mov [d], b
3890   1EA6 FD 27         mov b, g
3891   1EA8 D8            push b
3892   1EA9 29 E8 24      mov b, [_prog] ; $prog           
3893   1EAC FD 79         mov g, b
3894   1EAE FD 77         inc b
3895   1EB0 3B E8 24      mov d, _prog ; $prog
3896   1EB3 FD 43         mov [d], b
3897   1EB5 FD 27         mov b, g
3898   1EB7 74            mov d, b
3899   1EB8 32            mov bl, [d]
3900   1EB9 A7 00         mov bh, 0
3901   1EBB E7            pop d
3902   1EBC FD 3E         mov [d], bl
3903   1EBE             ;; tok = DECREMENT; 
3904   1EBE 3B E4 24      mov d, _tok ; $tok         
3905   1EC1 26 06 00      mov b, 6; DECREMENT        
3906   1EC4 FD 43         mov [d], b
3907   1EC6 0A D1 1E      jmp _if64_exit
3908   1EC9             _if64_else:
3909   1EC9             ;; tok = MINUS; 
3910   1EC9 3B E4 24      mov d, _tok ; $tok         
3911   1ECC 26 02 00      mov b, 2; MINUS        
3912   1ECF FD 43         mov [d], b
3913   1ED1             _if64_exit:
3914   1ED1             ;; toktype = DELIMITER;   
3915   1ED1 3B E6 24      mov d, _toktype ; $toktype         
3916   1ED4 26 01 00      mov b, 1; DELIMITER        
3917   1ED7 FD 43         mov [d], b
3918   1ED9 0A 78 22      jmp _if63_exit
3919   1EDC             _if63_else:
3920   1EDC             ;; if(*prog == '$'){ 
3921   1EDC             _if65_cond:
3922   1EDC 29 E8 24      mov b, [_prog] ; $prog           
3923   1EDF 74            mov d, b
3924   1EE0 32            mov bl, [d]
3925   1EE1 A7 00         mov bh, 0
3926   1EE3             ; START RELATIONAL
3927   1EE3 D7            push a
3928   1EE4 11            mov a, b
3929   1EE5 26 24 00      mov b, $24
3930   1EE8 B0            cmp a, b
3931   1EE9 FD 71         seq ; ==
3932   1EEB E4            pop a
3933   1EEC             ; END RELATIONAL
3934   1EEC C0 00 00      cmp b, 0
3935   1EEF C6 29 1F      je _if65_else
3936   1EF2             _if65_true:
3937   1EF2             ;; *t++ = *prog++; 
3938   1EF2 2C FF FF      mov b, [bp + -1] ; $t             
3939   1EF5 FD 79         mov g, b
3940   1EF7 FD 77         inc b
3941   1EF9 FA FF FF      lea d, [bp + -1] ; $t
3942   1EFC FD 43         mov [d], b
3943   1EFE FD 27         mov b, g
3944   1F00 D8            push b
3945   1F01 29 E8 24      mov b, [_prog] ; $prog           
3946   1F04 FD 79         mov g, b
3947   1F06 FD 77         inc b
3948   1F08 3B E8 24      mov d, _prog ; $prog
3949   1F0B FD 43         mov [d], b
3950   1F0D FD 27         mov b, g
3951   1F0F 74            mov d, b
3952   1F10 32            mov bl, [d]
3953   1F11 A7 00         mov bh, 0
3954   1F13 E7            pop d
3955   1F14 FD 3E         mov [d], bl
3956   1F16             ;; tok = DOLLAR; 
3957   1F16 3B E4 24      mov d, _tok ; $tok         
3958   1F19 26 12 00      mov b, 18; DOLLAR        
3959   1F1C FD 43         mov [d], b
3960   1F1E             ;; toktype = DELIMITER;   
3961   1F1E 3B E6 24      mov d, _toktype ; $toktype         
3962   1F21 26 01 00      mov b, 1; DELIMITER        
3963   1F24 FD 43         mov [d], b
3964   1F26 0A 78 22      jmp _if65_exit
3965   1F29             _if65_else:
3966   1F29             ;; if(*prog == '^'){ 
3967   1F29             _if66_cond:
3968   1F29 29 E8 24      mov b, [_prog] ; $prog           
3969   1F2C 74            mov d, b
3970   1F2D 32            mov bl, [d]
3971   1F2E A7 00         mov bh, 0
3972   1F30             ; START RELATIONAL
3973   1F30 D7            push a
3974   1F31 11            mov a, b
3975   1F32 26 5E 00      mov b, $5e
3976   1F35 B0            cmp a, b
3977   1F36 FD 71         seq ; ==
3978   1F38 E4            pop a
3979   1F39             ; END RELATIONAL
3980   1F39 C0 00 00      cmp b, 0
3981   1F3C C6 76 1F      je _if66_else
3982   1F3F             _if66_true:
3983   1F3F             ;; *t++ = *prog++; 
3984   1F3F 2C FF FF      mov b, [bp + -1] ; $t             
3985   1F42 FD 79         mov g, b
3986   1F44 FD 77         inc b
3987   1F46 FA FF FF      lea d, [bp + -1] ; $t
3988   1F49 FD 43         mov [d], b
3989   1F4B FD 27         mov b, g
3990   1F4D D8            push b
3991   1F4E 29 E8 24      mov b, [_prog] ; $prog           
3992   1F51 FD 79         mov g, b
3993   1F53 FD 77         inc b
3994   1F55 3B E8 24      mov d, _prog ; $prog
3995   1F58 FD 43         mov [d], b
3996   1F5A FD 27         mov b, g
3997   1F5C 74            mov d, b
3998   1F5D 32            mov bl, [d]
3999   1F5E A7 00         mov bh, 0
4000   1F60 E7            pop d
4001   1F61 FD 3E         mov [d], bl
4002   1F63             ;; tok = BITWISE_XOR; 
4003   1F63 3B E4 24      mov d, _tok ; $tok         
4004   1F66 26 17 00      mov b, 23; BITWISE_XOR        
4005   1F69 FD 43         mov [d], b
4006   1F6B             ;; toktype = DELIMITER;   
4007   1F6B 3B E6 24      mov d, _toktype ; $toktype         
4008   1F6E 26 01 00      mov b, 1; DELIMITER        
4009   1F71 FD 43         mov [d], b
4010   1F73 0A 78 22      jmp _if66_exit
4011   1F76             _if66_else:
4012   1F76             ;; if(*prog == '@'){ 
4013   1F76             _if67_cond:
4014   1F76 29 E8 24      mov b, [_prog] ; $prog           
4015   1F79 74            mov d, b
4016   1F7A 32            mov bl, [d]
4017   1F7B A7 00         mov bh, 0
4018   1F7D             ; START RELATIONAL
4019   1F7D D7            push a
4020   1F7E 11            mov a, b
4021   1F7F 26 40 00      mov b, $40
4022   1F82 B0            cmp a, b
4023   1F83 FD 71         seq ; ==
4024   1F85 E4            pop a
4025   1F86             ; END RELATIONAL
4026   1F86 C0 00 00      cmp b, 0
4027   1F89 C6 C3 1F      je _if67_else
4028   1F8C             _if67_true:
4029   1F8C             ;; *t++ = *prog++; 
4030   1F8C 2C FF FF      mov b, [bp + -1] ; $t             
4031   1F8F FD 79         mov g, b
4032   1F91 FD 77         inc b
4033   1F93 FA FF FF      lea d, [bp + -1] ; $t
4034   1F96 FD 43         mov [d], b
4035   1F98 FD 27         mov b, g
4036   1F9A D8            push b
4037   1F9B 29 E8 24      mov b, [_prog] ; $prog           
4038   1F9E FD 79         mov g, b
4039   1FA0 FD 77         inc b
4040   1FA2 3B E8 24      mov d, _prog ; $prog
4041   1FA5 FD 43         mov [d], b
4042   1FA7 FD 27         mov b, g
4043   1FA9 74            mov d, b
4044   1FAA 32            mov bl, [d]
4045   1FAB A7 00         mov bh, 0
4046   1FAD E7            pop d
4047   1FAE FD 3E         mov [d], bl
4048   1FB0             ;; tok = AT; 
4049   1FB0 3B E4 24      mov d, _tok ; $tok         
4050   1FB3 26 14 00      mov b, 20; AT        
4051   1FB6 FD 43         mov [d], b
4052   1FB8             ;; toktype = DELIMITER;   
4053   1FB8 3B E6 24      mov d, _toktype ; $toktype         
4054   1FBB 26 01 00      mov b, 1; DELIMITER        
4055   1FBE FD 43         mov [d], b
4056   1FC0 0A 78 22      jmp _if67_exit
4057   1FC3             _if67_else:
4058   1FC3             ;; if(*prog == '*'){ 
4059   1FC3             _if68_cond:
4060   1FC3 29 E8 24      mov b, [_prog] ; $prog           
4061   1FC6 74            mov d, b
4062   1FC7 32            mov bl, [d]
4063   1FC8 A7 00         mov bh, 0
4064   1FCA             ; START RELATIONAL
4065   1FCA D7            push a
4066   1FCB 11            mov a, b
4067   1FCC 26 2A 00      mov b, $2a
4068   1FCF B0            cmp a, b
4069   1FD0 FD 71         seq ; ==
4070   1FD2 E4            pop a
4071   1FD3             ; END RELATIONAL
4072   1FD3 C0 00 00      cmp b, 0
4073   1FD6 C6 10 20      je _if68_else
4074   1FD9             _if68_true:
4075   1FD9             ;; *t++ = *prog++; 
4076   1FD9 2C FF FF      mov b, [bp + -1] ; $t             
4077   1FDC FD 79         mov g, b
4078   1FDE FD 77         inc b
4079   1FE0 FA FF FF      lea d, [bp + -1] ; $t
4080   1FE3 FD 43         mov [d], b
4081   1FE5 FD 27         mov b, g
4082   1FE7 D8            push b
4083   1FE8 29 E8 24      mov b, [_prog] ; $prog           
4084   1FEB FD 79         mov g, b
4085   1FED FD 77         inc b
4086   1FEF 3B E8 24      mov d, _prog ; $prog
4087   1FF2 FD 43         mov [d], b
4088   1FF4 FD 27         mov b, g
4089   1FF6 74            mov d, b
4090   1FF7 32            mov bl, [d]
4091   1FF8 A7 00         mov bh, 0
4092   1FFA E7            pop d
4093   1FFB FD 3E         mov [d], bl
4094   1FFD             ;; tok = STAR; 
4095   1FFD 3B E4 24      mov d, _tok ; $tok         
4096   2000 26 03 00      mov b, 3; STAR        
4097   2003 FD 43         mov [d], b
4098   2005             ;; toktype = DELIMITER;   
4099   2005 3B E6 24      mov d, _toktype ; $toktype         
4100   2008 26 01 00      mov b, 1; DELIMITER        
4101   200B FD 43         mov [d], b
4102   200D 0A 78 22      jmp _if68_exit
4103   2010             _if68_else:
4104   2010             ;; if(*prog == '/'){ 
4105   2010             _if69_cond:
4106   2010 29 E8 24      mov b, [_prog] ; $prog           
4107   2013 74            mov d, b
4108   2014 32            mov bl, [d]
4109   2015 A7 00         mov bh, 0
4110   2017             ; START RELATIONAL
4111   2017 D7            push a
4112   2018 11            mov a, b
4113   2019 26 2F 00      mov b, $2f
4114   201C B0            cmp a, b
4115   201D FD 71         seq ; ==
4116   201F E4            pop a
4117   2020             ; END RELATIONAL
4118   2020 C0 00 00      cmp b, 0
4119   2023 C6 5D 20      je _if69_else
4120   2026             _if69_true:
4121   2026             ;; *t++ = *prog++; 
4122   2026 2C FF FF      mov b, [bp + -1] ; $t             
4123   2029 FD 79         mov g, b
4124   202B FD 77         inc b
4125   202D FA FF FF      lea d, [bp + -1] ; $t
4126   2030 FD 43         mov [d], b
4127   2032 FD 27         mov b, g
4128   2034 D8            push b
4129   2035 29 E8 24      mov b, [_prog] ; $prog           
4130   2038 FD 79         mov g, b
4131   203A FD 77         inc b
4132   203C 3B E8 24      mov d, _prog ; $prog
4133   203F FD 43         mov [d], b
4134   2041 FD 27         mov b, g
4135   2043 74            mov d, b
4136   2044 32            mov bl, [d]
4137   2045 A7 00         mov bh, 0
4138   2047 E7            pop d
4139   2048 FD 3E         mov [d], bl
4140   204A             ;; tok = FSLASH; 
4141   204A 3B E4 24      mov d, _tok ; $tok         
4142   204D 26 04 00      mov b, 4; FSLASH        
4143   2050 FD 43         mov [d], b
4144   2052             ;; toktype = DELIMITER;   
4145   2052 3B E6 24      mov d, _toktype ; $toktype         
4146   2055 26 01 00      mov b, 1; DELIMITER        
4147   2058 FD 43         mov [d], b
4148   205A 0A 78 22      jmp _if69_exit
4149   205D             _if69_else:
4150   205D             ;; if(*prog == '%'){ 
4151   205D             _if70_cond:
4152   205D 29 E8 24      mov b, [_prog] ; $prog           
4153   2060 74            mov d, b
4154   2061 32            mov bl, [d]
4155   2062 A7 00         mov bh, 0
4156   2064             ; START RELATIONAL
4157   2064 D7            push a
4158   2065 11            mov a, b
4159   2066 26 25 00      mov b, $25
4160   2069 B0            cmp a, b
4161   206A FD 71         seq ; ==
4162   206C E4            pop a
4163   206D             ; END RELATIONAL
4164   206D C0 00 00      cmp b, 0
4165   2070 C6 AA 20      je _if70_else
4166   2073             _if70_true:
4167   2073             ;; *t++ = *prog++; 
4168   2073 2C FF FF      mov b, [bp + -1] ; $t             
4169   2076 FD 79         mov g, b
4170   2078 FD 77         inc b
4171   207A FA FF FF      lea d, [bp + -1] ; $t
4172   207D FD 43         mov [d], b
4173   207F FD 27         mov b, g
4174   2081 D8            push b
4175   2082 29 E8 24      mov b, [_prog] ; $prog           
4176   2085 FD 79         mov g, b
4177   2087 FD 77         inc b
4178   2089 3B E8 24      mov d, _prog ; $prog
4179   208C FD 43         mov [d], b
4180   208E FD 27         mov b, g
4181   2090 74            mov d, b
4182   2091 32            mov bl, [d]
4183   2092 A7 00         mov bh, 0
4184   2094 E7            pop d
4185   2095 FD 3E         mov [d], bl
4186   2097             ;; tok = MOD; 
4187   2097 3B E4 24      mov d, _tok ; $tok         
4188   209A 26 07 00      mov b, 7; MOD        
4189   209D FD 43         mov [d], b
4190   209F             ;; toktype = DELIMITER;   
4191   209F 3B E6 24      mov d, _toktype ; $toktype         
4192   20A2 26 01 00      mov b, 1; DELIMITER        
4193   20A5 FD 43         mov [d], b
4194   20A7 0A 78 22      jmp _if70_exit
4195   20AA             _if70_else:
4196   20AA             ;; if(*prog == '('){ 
4197   20AA             _if71_cond:
4198   20AA 29 E8 24      mov b, [_prog] ; $prog           
4199   20AD 74            mov d, b
4200   20AE 32            mov bl, [d]
4201   20AF A7 00         mov bh, 0
4202   20B1             ; START RELATIONAL
4203   20B1 D7            push a
4204   20B2 11            mov a, b
4205   20B3 26 28 00      mov b, $28
4206   20B6 B0            cmp a, b
4207   20B7 FD 71         seq ; ==
4208   20B9 E4            pop a
4209   20BA             ; END RELATIONAL
4210   20BA C0 00 00      cmp b, 0
4211   20BD C6 F7 20      je _if71_else
4212   20C0             _if71_true:
4213   20C0             ;; *t++ = *prog++; 
4214   20C0 2C FF FF      mov b, [bp + -1] ; $t             
4215   20C3 FD 79         mov g, b
4216   20C5 FD 77         inc b
4217   20C7 FA FF FF      lea d, [bp + -1] ; $t
4218   20CA FD 43         mov [d], b
4219   20CC FD 27         mov b, g
4220   20CE D8            push b
4221   20CF 29 E8 24      mov b, [_prog] ; $prog           
4222   20D2 FD 79         mov g, b
4223   20D4 FD 77         inc b
4224   20D6 3B E8 24      mov d, _prog ; $prog
4225   20D9 FD 43         mov [d], b
4226   20DB FD 27         mov b, g
4227   20DD 74            mov d, b
4228   20DE 32            mov bl, [d]
4229   20DF A7 00         mov bh, 0
4230   20E1 E7            pop d
4231   20E2 FD 3E         mov [d], bl
4232   20E4             ;; tok = OPENING_PAREN; 
4233   20E4 3B E4 24      mov d, _tok ; $tok         
4234   20E7 26 1C 00      mov b, 28; OPENING_PAREN        
4235   20EA FD 43         mov [d], b
4236   20EC             ;; toktype = DELIMITER;   
4237   20EC 3B E6 24      mov d, _toktype ; $toktype         
4238   20EF 26 01 00      mov b, 1; DELIMITER        
4239   20F2 FD 43         mov [d], b
4240   20F4 0A 78 22      jmp _if71_exit
4241   20F7             _if71_else:
4242   20F7             ;; if(*prog == ')'){ 
4243   20F7             _if72_cond:
4244   20F7 29 E8 24      mov b, [_prog] ; $prog           
4245   20FA 74            mov d, b
4246   20FB 32            mov bl, [d]
4247   20FC A7 00         mov bh, 0
4248   20FE             ; START RELATIONAL
4249   20FE D7            push a
4250   20FF 11            mov a, b
4251   2100 26 29 00      mov b, $29
4252   2103 B0            cmp a, b
4253   2104 FD 71         seq ; ==
4254   2106 E4            pop a
4255   2107             ; END RELATIONAL
4256   2107 C0 00 00      cmp b, 0
4257   210A C6 44 21      je _if72_else
4258   210D             _if72_true:
4259   210D             ;; *t++ = *prog++; 
4260   210D 2C FF FF      mov b, [bp + -1] ; $t             
4261   2110 FD 79         mov g, b
4262   2112 FD 77         inc b
4263   2114 FA FF FF      lea d, [bp + -1] ; $t
4264   2117 FD 43         mov [d], b
4265   2119 FD 27         mov b, g
4266   211B D8            push b
4267   211C 29 E8 24      mov b, [_prog] ; $prog           
4268   211F FD 79         mov g, b
4269   2121 FD 77         inc b
4270   2123 3B E8 24      mov d, _prog ; $prog
4271   2126 FD 43         mov [d], b
4272   2128 FD 27         mov b, g
4273   212A 74            mov d, b
4274   212B 32            mov bl, [d]
4275   212C A7 00         mov bh, 0
4276   212E E7            pop d
4277   212F FD 3E         mov [d], bl
4278   2131             ;; tok = CLOSING_PAREN; 
4279   2131 3B E4 24      mov d, _tok ; $tok         
4280   2134 26 1D 00      mov b, 29; CLOSING_PAREN        
4281   2137 FD 43         mov [d], b
4282   2139             ;; toktype = DELIMITER;   
4283   2139 3B E6 24      mov d, _toktype ; $toktype         
4284   213C 26 01 00      mov b, 1; DELIMITER        
4285   213F FD 43         mov [d], b
4286   2141 0A 78 22      jmp _if72_exit
4287   2144             _if72_else:
4288   2144             ;; if(*prog == ';'){ 
4289   2144             _if73_cond:
4290   2144 29 E8 24      mov b, [_prog] ; $prog           
4291   2147 74            mov d, b
4292   2148 32            mov bl, [d]
4293   2149 A7 00         mov bh, 0
4294   214B             ; START RELATIONAL
4295   214B D7            push a
4296   214C 11            mov a, b
4297   214D 26 3B 00      mov b, $3b
4298   2150 B0            cmp a, b
4299   2151 FD 71         seq ; ==
4300   2153 E4            pop a
4301   2154             ; END RELATIONAL
4302   2154 C0 00 00      cmp b, 0
4303   2157 C6 91 21      je _if73_else
4304   215A             _if73_true:
4305   215A             ;; *t++ = *prog++; 
4306   215A 2C FF FF      mov b, [bp + -1] ; $t             
4307   215D FD 79         mov g, b
4308   215F FD 77         inc b
4309   2161 FA FF FF      lea d, [bp + -1] ; $t
4310   2164 FD 43         mov [d], b
4311   2166 FD 27         mov b, g
4312   2168 D8            push b
4313   2169 29 E8 24      mov b, [_prog] ; $prog           
4314   216C FD 79         mov g, b
4315   216E FD 77         inc b
4316   2170 3B E8 24      mov d, _prog ; $prog
4317   2173 FD 43         mov [d], b
4318   2175 FD 27         mov b, g
4319   2177 74            mov d, b
4320   2178 32            mov bl, [d]
4321   2179 A7 00         mov bh, 0
4322   217B E7            pop d
4323   217C FD 3E         mov [d], bl
4324   217E             ;; tok = SEMICOLON; 
4325   217E 3B E4 24      mov d, _tok ; $tok         
4326   2181 26 23 00      mov b, 35; SEMICOLON        
4327   2184 FD 43         mov [d], b
4328   2186             ;; toktype = DELIMITER;   
4329   2186 3B E6 24      mov d, _toktype ; $toktype         
4330   2189 26 01 00      mov b, 1; DELIMITER        
4331   218C FD 43         mov [d], b
4332   218E 0A 78 22      jmp _if73_exit
4333   2191             _if73_else:
4334   2191             ;; if(*prog == ':'){ 
4335   2191             _if74_cond:
4336   2191 29 E8 24      mov b, [_prog] ; $prog           
4337   2194 74            mov d, b
4338   2195 32            mov bl, [d]
4339   2196 A7 00         mov bh, 0
4340   2198             ; START RELATIONAL
4341   2198 D7            push a
4342   2199 11            mov a, b
4343   219A 26 3A 00      mov b, $3a
4344   219D B0            cmp a, b
4345   219E FD 71         seq ; ==
4346   21A0 E4            pop a
4347   21A1             ; END RELATIONAL
4348   21A1 C0 00 00      cmp b, 0
4349   21A4 C6 DE 21      je _if74_else
4350   21A7             _if74_true:
4351   21A7             ;; *t++ = *prog++; 
4352   21A7 2C FF FF      mov b, [bp + -1] ; $t             
4353   21AA FD 79         mov g, b
4354   21AC FD 77         inc b
4355   21AE FA FF FF      lea d, [bp + -1] ; $t
4356   21B1 FD 43         mov [d], b
4357   21B3 FD 27         mov b, g
4358   21B5 D8            push b
4359   21B6 29 E8 24      mov b, [_prog] ; $prog           
4360   21B9 FD 79         mov g, b
4361   21BB FD 77         inc b
4362   21BD 3B E8 24      mov d, _prog ; $prog
4363   21C0 FD 43         mov [d], b
4364   21C2 FD 27         mov b, g
4365   21C4 74            mov d, b
4366   21C5 32            mov bl, [d]
4367   21C6 A7 00         mov bh, 0
4368   21C8 E7            pop d
4369   21C9 FD 3E         mov [d], bl
4370   21CB             ;; tok = COLON; 
4371   21CB 3B E4 24      mov d, _tok ; $tok         
4372   21CE 26 22 00      mov b, 34; COLON        
4373   21D1 FD 43         mov [d], b
4374   21D3             ;; toktype = DELIMITER;   
4375   21D3 3B E6 24      mov d, _toktype ; $toktype         
4376   21D6 26 01 00      mov b, 1; DELIMITER        
4377   21D9 FD 43         mov [d], b
4378   21DB 0A 78 22      jmp _if74_exit
4379   21DE             _if74_else:
4380   21DE             ;; if(*prog == ','){ 
4381   21DE             _if75_cond:
4382   21DE 29 E8 24      mov b, [_prog] ; $prog           
4383   21E1 74            mov d, b
4384   21E2 32            mov bl, [d]
4385   21E3 A7 00         mov bh, 0
4386   21E5             ; START RELATIONAL
4387   21E5 D7            push a
4388   21E6 11            mov a, b
4389   21E7 26 2C 00      mov b, $2c
4390   21EA B0            cmp a, b
4391   21EB FD 71         seq ; ==
4392   21ED E4            pop a
4393   21EE             ; END RELATIONAL
4394   21EE C0 00 00      cmp b, 0
4395   21F1 C6 2B 22      je _if75_else
4396   21F4             _if75_true:
4397   21F4             ;; *t++ = *prog++; 
4398   21F4 2C FF FF      mov b, [bp + -1] ; $t             
4399   21F7 FD 79         mov g, b
4400   21F9 FD 77         inc b
4401   21FB FA FF FF      lea d, [bp + -1] ; $t
4402   21FE FD 43         mov [d], b
4403   2200 FD 27         mov b, g
4404   2202 D8            push b
4405   2203 29 E8 24      mov b, [_prog] ; $prog           
4406   2206 FD 79         mov g, b
4407   2208 FD 77         inc b
4408   220A 3B E8 24      mov d, _prog ; $prog
4409   220D FD 43         mov [d], b
4410   220F FD 27         mov b, g
4411   2211 74            mov d, b
4412   2212 32            mov bl, [d]
4413   2213 A7 00         mov bh, 0
4414   2215 E7            pop d
4415   2216 FD 3E         mov [d], bl
4416   2218             ;; tok = COMMA; 
4417   2218 3B E4 24      mov d, _tok ; $tok         
4418   221B 26 24 00      mov b, 36; COMMA        
4419   221E FD 43         mov [d], b
4420   2220             ;; toktype = DELIMITER;   
4421   2220 3B E6 24      mov d, _toktype ; $toktype         
4422   2223 26 01 00      mov b, 1; DELIMITER        
4423   2226 FD 43         mov [d], b
4424   2228 0A 78 22      jmp _if75_exit
4425   222B             _if75_else:
4426   222B             ;; if(*prog == '.'){ 
4427   222B             _if76_cond:
4428   222B 29 E8 24      mov b, [_prog] ; $prog           
4429   222E 74            mov d, b
4430   222F 32            mov bl, [d]
4431   2230 A7 00         mov bh, 0
4432   2232             ; START RELATIONAL
4433   2232 D7            push a
4434   2233 11            mov a, b
4435   2234 26 2E 00      mov b, $2e
4436   2237 B0            cmp a, b
4437   2238 FD 71         seq ; ==
4438   223A E4            pop a
4439   223B             ; END RELATIONAL
4440   223B C0 00 00      cmp b, 0
4441   223E C6 78 22      je _if76_exit
4442   2241             _if76_true:
4443   2241             ;; *t++ = *prog++; 
4444   2241 2C FF FF      mov b, [bp + -1] ; $t             
4445   2244 FD 79         mov g, b
4446   2246 FD 77         inc b
4447   2248 FA FF FF      lea d, [bp + -1] ; $t
4448   224B FD 43         mov [d], b
4449   224D FD 27         mov b, g
4450   224F D8            push b
4451   2250 29 E8 24      mov b, [_prog] ; $prog           
4452   2253 FD 79         mov g, b
4453   2255 FD 77         inc b
4454   2257 3B E8 24      mov d, _prog ; $prog
4455   225A FD 43         mov [d], b
4456   225C FD 27         mov b, g
4457   225E 74            mov d, b
4458   225F 32            mov bl, [d]
4459   2260 A7 00         mov bh, 0
4460   2262 E7            pop d
4461   2263 FD 3E         mov [d], bl
4462   2265             ;; tok = DOT; 
4463   2265 3B E4 24      mov d, _tok ; $tok         
4464   2268 26 25 00      mov b, 37; DOT        
4465   226B FD 43         mov [d], b
4466   226D             ;; toktype = DELIMITER;   
4467   226D 3B E6 24      mov d, _toktype ; $toktype         
4468   2270 26 01 00      mov b, 1; DELIMITER        
4469   2273 FD 43         mov [d], b
4470   2275 0A 78 22      jmp _if76_exit
4471   2278             _if76_exit:
4472   2278             _if75_exit:
4473   2278             _if74_exit:
4474   2278             _if73_exit:
4475   2278             _if72_exit:
4476   2278             _if71_exit:
4477   2278             _if70_exit:
4478   2278             _if69_exit:
4479   2278             _if68_exit:
4480   2278             _if67_exit:
4481   2278             _if66_exit:
4482   2278             _if65_exit:
4483   2278             _if63_exit:
4484   2278             _if61_exit:
4485   2278             _if59_exit:
4486   2278             _if56_exit:
4487   2278             _if53_exit:
4488   2278             _if52_exit:
4489   2278             _if50_exit:
4490   2278             _if48_exit:
4491   2278             _if46_exit:
4492   2278             _if45_exit:
4493   2278             _if44_exit:
4494   2278             _if43_exit:
4495   2278             _if42_exit:
4496   2278             _if41_exit:
4497   2278             _if38_exit:
4498   2278             _if36_exit:
4499   2278             _if34_exit:
4500   2278             ;; *t = '\0'; 
4501   2278 2C FF FF      mov b, [bp + -1] ; $t             
4502   227B D8            push b
4503   227C 26 00 00      mov b, $0
4504   227F E7            pop d
4505   2280 FD 3E         mov [d], bl
4506   2282 F9            leave
4507   2283 09            ret
4508   2284             
4509   2284             convert_constant:
4510   2284 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4511   2287             ; $s 
4512   2287             ; $t 
4513   2287 52 04 00      sub sp, 4
4514   228A             ;; t = token; 
4515   228A FA FD FF      lea d, [bp + -3] ; $t         
4516   228D 26 EA 24      mov b, _token_data ; $token                   
4517   2290 FD 43         mov [d], b
4518   2292             ;; s = string_const; 
4519   2292 FA FF FF      lea d, [bp + -1] ; $s         
4520   2295 26 EA 25      mov b, _string_const_data ; $string_const                   
4521   2298 FD 43         mov [d], b
4522   229A             ;; if(toktype == CHAR_CONST){ 
4523   229A             _if77_cond:
4524   229A 29 E6 24      mov b, [_toktype] ; $toktype           
4525   229D             ; START RELATIONAL
4526   229D D7            push a
4527   229E 11            mov a, b
4528   229F 26 02 00      mov b, 2; CHAR_CONST
4529   22A2 B0            cmp a, b
4530   22A3 FD 71         seq ; ==
4531   22A5 E4            pop a
4532   22A6             ; END RELATIONAL
4533   22A6 C0 00 00      cmp b, 0
4534   22A9 C6 43 24      je _if77_else
4535   22AC             _if77_true:
4536   22AC             ;; t++; 
4537   22AC 2C FD FF      mov b, [bp + -3] ; $t             
4538   22AF FD 79         mov g, b
4539   22B1 FD 77         inc b
4540   22B3 FA FD FF      lea d, [bp + -3] ; $t
4541   22B6 FD 43         mov [d], b
4542   22B8 FD 27         mov b, g
4543   22BA             ;; if(*t == '\\'){ 
4544   22BA             _if78_cond:
4545   22BA 2C FD FF      mov b, [bp + -3] ; $t             
4546   22BD 74            mov d, b
4547   22BE 32            mov bl, [d]
4548   22BF A7 00         mov bh, 0
4549   22C1             ; START RELATIONAL
4550   22C1 D7            push a
4551   22C2 11            mov a, b
4552   22C3 26 5C 00      mov b, $5c
4553   22C6 B0            cmp a, b
4554   22C7 FD 71         seq ; ==
4555   22C9 E4            pop a
4556   22CA             ; END RELATIONAL
4557   22CA C0 00 00      cmp b, 0
4558   22CD C6 27 24      je _if78_else
4559   22D0             _if78_true:
4560   22D0             ;; t++; 
4561   22D0 2C FD FF      mov b, [bp + -3] ; $t             
4562   22D3 FD 79         mov g, b
4563   22D5 FD 77         inc b
4564   22D7 FA FD FF      lea d, [bp + -3] ; $t
4565   22DA FD 43         mov [d], b
4566   22DC FD 27         mov b, g
4567   22DE             ;; switch(*t){ 
4568   22DE             _switch79_expr:
4569   22DE 2C FD FF      mov b, [bp + -3] ; $t             
4570   22E1 74            mov d, b
4571   22E2 32            mov bl, [d]
4572   22E3 A7 00         mov bh, 0
4573   22E5             _switch79_comparisons:
4574   22E5 C1 30         cmp bl, $30
4575   22E7 C6 1F 23      je _switch79_case0
4576   22EA C1 61         cmp bl, $61
4577   22EC C6 37 23      je _switch79_case1
4578   22EF C1 62         cmp bl, $62
4579   22F1 C6 4F 23      je _switch79_case2
4580   22F4 C1 66         cmp bl, $66
4581   22F6 C6 67 23      je _switch79_case3
4582   22F9 C1 6E         cmp bl, $6e
4583   22FB C6 7F 23      je _switch79_case4
4584   22FE C1 72         cmp bl, $72
4585   2300 C6 97 23      je _switch79_case5
4586   2303 C1 74         cmp bl, $74
4587   2305 C6 AF 23      je _switch79_case6
4588   2308 C1 76         cmp bl, $76
4589   230A C6 C7 23      je _switch79_case7
4590   230D C1 5C         cmp bl, $5c
4591   230F C6 DF 23      je _switch79_case8
4592   2312 C1 27         cmp bl, $27
4593   2314 C6 F7 23      je _switch79_case9
4594   2317 C1 22         cmp bl, $22
4595   2319 C6 0F 24      je _switch79_case10
4596   231C 0A 24 24      jmp _switch79_exit
4597   231F             _switch79_case0:
4598   231F             ;; *s++ = '\0'; 
4599   231F 2C FF FF      mov b, [bp + -1] ; $s             
4600   2322 FD 79         mov g, b
4601   2324 FD 77         inc b
4602   2326 FA FF FF      lea d, [bp + -1] ; $s
4603   2329 FD 43         mov [d], b
4604   232B FD 27         mov b, g
4605   232D D8            push b
4606   232E 26 00 00      mov b, $0
4607   2331 E7            pop d
4608   2332 FD 3E         mov [d], bl
4609   2334             ;; break; 
4610   2334 0A 24 24      jmp _switch79_exit ; case break
4611   2337             _switch79_case1:
4612   2337             ;; *s++ = '\a'; 
4613   2337 2C FF FF      mov b, [bp + -1] ; $s             
4614   233A FD 79         mov g, b
4615   233C FD 77         inc b
4616   233E FA FF FF      lea d, [bp + -1] ; $s
4617   2341 FD 43         mov [d], b
4618   2343 FD 27         mov b, g
4619   2345 D8            push b
4620   2346 26 07 00      mov b, $7
4621   2349 E7            pop d
4622   234A FD 3E         mov [d], bl
4623   234C             ;; break; 
4624   234C 0A 24 24      jmp _switch79_exit ; case break
4625   234F             _switch79_case2:
4626   234F             ;; *s++ = '\b'; 
4627   234F 2C FF FF      mov b, [bp + -1] ; $s             
4628   2352 FD 79         mov g, b
4629   2354 FD 77         inc b
4630   2356 FA FF FF      lea d, [bp + -1] ; $s
4631   2359 FD 43         mov [d], b
4632   235B FD 27         mov b, g
4633   235D D8            push b
4634   235E 26 08 00      mov b, $8
4635   2361 E7            pop d
4636   2362 FD 3E         mov [d], bl
4637   2364             ;; break;   
4638   2364 0A 24 24      jmp _switch79_exit ; case break
4639   2367             _switch79_case3:
4640   2367             ;; *s++ = '\f'; 
4641   2367 2C FF FF      mov b, [bp + -1] ; $s             
4642   236A FD 79         mov g, b
4643   236C FD 77         inc b
4644   236E FA FF FF      lea d, [bp + -1] ; $s
4645   2371 FD 43         mov [d], b
4646   2373 FD 27         mov b, g
4647   2375 D8            push b
4648   2376 26 0C 00      mov b, $c
4649   2379 E7            pop d
4650   237A FD 3E         mov [d], bl
4651   237C             ;; break; 
4652   237C 0A 24 24      jmp _switch79_exit ; case break
4653   237F             _switch79_case4:
4654   237F             ;; *s++ = '\n'; 
4655   237F 2C FF FF      mov b, [bp + -1] ; $s             
4656   2382 FD 79         mov g, b
4657   2384 FD 77         inc b
4658   2386 FA FF FF      lea d, [bp + -1] ; $s
4659   2389 FD 43         mov [d], b
4660   238B FD 27         mov b, g
4661   238D D8            push b
4662   238E 26 0A 00      mov b, $a
4663   2391 E7            pop d
4664   2392 FD 3E         mov [d], bl
4665   2394             ;; break; 
4666   2394 0A 24 24      jmp _switch79_exit ; case break
4667   2397             _switch79_case5:
4668   2397             ;; *s++ = '\r'; 
4669   2397 2C FF FF      mov b, [bp + -1] ; $s             
4670   239A FD 79         mov g, b
4671   239C FD 77         inc b
4672   239E FA FF FF      lea d, [bp + -1] ; $s
4673   23A1 FD 43         mov [d], b
4674   23A3 FD 27         mov b, g
4675   23A5 D8            push b
4676   23A6 26 0D 00      mov b, $d
4677   23A9 E7            pop d
4678   23AA FD 3E         mov [d], bl
4679   23AC             ;; break; 
4680   23AC 0A 24 24      jmp _switch79_exit ; case break
4681   23AF             _switch79_case6:
4682   23AF             ;; *s++ = '\t'; 
4683   23AF 2C FF FF      mov b, [bp + -1] ; $s             
4684   23B2 FD 79         mov g, b
4685   23B4 FD 77         inc b
4686   23B6 FA FF FF      lea d, [bp + -1] ; $s
4687   23B9 FD 43         mov [d], b
4688   23BB FD 27         mov b, g
4689   23BD D8            push b
4690   23BE 26 09 00      mov b, $9
4691   23C1 E7            pop d
4692   23C2 FD 3E         mov [d], bl
4693   23C4             ;; break; 
4694   23C4 0A 24 24      jmp _switch79_exit ; case break
4695   23C7             _switch79_case7:
4696   23C7             ;; *s++ = '\v'; 
4697   23C7 2C FF FF      mov b, [bp + -1] ; $s             
4698   23CA FD 79         mov g, b
4699   23CC FD 77         inc b
4700   23CE FA FF FF      lea d, [bp + -1] ; $s
4701   23D1 FD 43         mov [d], b
4702   23D3 FD 27         mov b, g
4703   23D5 D8            push b
4704   23D6 26 0B 00      mov b, $b
4705   23D9 E7            pop d
4706   23DA FD 3E         mov [d], bl
4707   23DC             ;; break; 
4708   23DC 0A 24 24      jmp _switch79_exit ; case break
4709   23DF             _switch79_case8:
4710   23DF             ;; *s++ = '\\'; 
4711   23DF 2C FF FF      mov b, [bp + -1] ; $s             
4712   23E2 FD 79         mov g, b
4713   23E4 FD 77         inc b
4714   23E6 FA FF FF      lea d, [bp + -1] ; $s
4715   23E9 FD 43         mov [d], b
4716   23EB FD 27         mov b, g
4717   23ED D8            push b
4718   23EE 26 5C 00      mov b, $5c
4719   23F1 E7            pop d
4720   23F2 FD 3E         mov [d], bl
4721   23F4             ;; break; 
4722   23F4 0A 24 24      jmp _switch79_exit ; case break
4723   23F7             _switch79_case9:
4724   23F7             ;; *s++ = '\''; 
4725   23F7 2C FF FF      mov b, [bp + -1] ; $s             
4726   23FA FD 79         mov g, b
4727   23FC FD 77         inc b
4728   23FE FA FF FF      lea d, [bp + -1] ; $s
4729   2401 FD 43         mov [d], b
4730   2403 FD 27         mov b, g
4731   2405 D8            push b
4732   2406 26 27 00      mov b, $27
4733   2409 E7            pop d
4734   240A FD 3E         mov [d], bl
4735   240C             ;; break; 
4736   240C 0A 24 24      jmp _switch79_exit ; case break
4737   240F             _switch79_case10:
4738   240F             ;; *s++ = '\"'; 
4739   240F 2C FF FF      mov b, [bp + -1] ; $s             
4740   2412 FD 79         mov g, b
4741   2414 FD 77         inc b
4742   2416 FA FF FF      lea d, [bp + -1] ; $s
4743   2419 FD 43         mov [d], b
4744   241B FD 27         mov b, g
4745   241D D8            push b
4746   241E 26 22 00      mov b, $22
4747   2421 E7            pop d
4748   2422 FD 3E         mov [d], bl
4749   2424             _switch79_exit:
4750   2424 0A 40 24      jmp _if78_exit
4751   2427             _if78_else:
4752   2427             ;; *s++ = *t; 
4753   2427 2C FF FF      mov b, [bp + -1] ; $s             
4754   242A FD 79         mov g, b
4755   242C FD 77         inc b
4756   242E FA FF FF      lea d, [bp + -1] ; $s
4757   2431 FD 43         mov [d], b
4758   2433 FD 27         mov b, g
4759   2435 D8            push b
4760   2436 2C FD FF      mov b, [bp + -3] ; $t             
4761   2439 74            mov d, b
4762   243A 32            mov bl, [d]
4763   243B A7 00         mov bh, 0
4764   243D E7            pop d
4765   243E FD 3E         mov [d], bl
4766   2440             _if78_exit:
4767   2440 0A AF 24      jmp _if77_exit
4768   2443             _if77_else:
4769   2443             ;; if(toktype == STRING_CONST){ 
4770   2443             _if80_cond:
4771   2443 29 E6 24      mov b, [_toktype] ; $toktype           
4772   2446             ; START RELATIONAL
4773   2446 D7            push a
4774   2447 11            mov a, b
4775   2448 26 03 00      mov b, 3; STRING_CONST
4776   244B B0            cmp a, b
4777   244C FD 71         seq ; ==
4778   244E E4            pop a
4779   244F             ; END RELATIONAL
4780   244F C0 00 00      cmp b, 0
4781   2452 C6 AF 24      je _if80_exit
4782   2455             _if80_true:
4783   2455             ;; t++; 
4784   2455 2C FD FF      mov b, [bp + -3] ; $t             
4785   2458 FD 79         mov g, b
4786   245A FD 77         inc b
4787   245C FA FD FF      lea d, [bp + -3] ; $t
4788   245F FD 43         mov [d], b
4789   2461 FD 27         mov b, g
4790   2463             ;; while(*t != '\"' && *t){ 
4791   2463             _while81_cond:
4792   2463 2C FD FF      mov b, [bp + -3] ; $t             
4793   2466 74            mov d, b
4794   2467 32            mov bl, [d]
4795   2468 A7 00         mov bh, 0
4796   246A             ; START RELATIONAL
4797   246A D7            push a
4798   246B 11            mov a, b
4799   246C 26 22 00      mov b, $22
4800   246F B0            cmp a, b
4801   2470 FD 72         sneq ; !=
4802   2472 E4            pop a
4803   2473             ; END RELATIONAL
4804   2473 D7            push a
4805   2474 11            mov a, b
4806   2475 2C FD FF      mov b, [bp + -3] ; $t             
4807   2478 74            mov d, b
4808   2479 32            mov bl, [d]
4809   247A A7 00         mov bh, 0
4810   247C FD A7         sand a, b ; &&
4811   247E E4            pop a
4812   247F C0 00 00      cmp b, 0
4813   2482 C6 AC 24      je _while81_exit
4814   2485             _while81_block:
4815   2485             ;; *s++ = *t++; 
4816   2485 2C FF FF      mov b, [bp + -1] ; $s             
4817   2488 FD 79         mov g, b
4818   248A FD 77         inc b
4819   248C FA FF FF      lea d, [bp + -1] ; $s
4820   248F FD 43         mov [d], b
4821   2491 FD 27         mov b, g
4822   2493 D8            push b
4823   2494 2C FD FF      mov b, [bp + -3] ; $t             
4824   2497 FD 79         mov g, b
4825   2499 FD 77         inc b
4826   249B FA FD FF      lea d, [bp + -3] ; $t
4827   249E FD 43         mov [d], b
4828   24A0 FD 27         mov b, g
4829   24A2 74            mov d, b
4830   24A3 32            mov bl, [d]
4831   24A4 A7 00         mov bh, 0
4832   24A6 E7            pop d
4833   24A7 FD 3E         mov [d], bl
4834   24A9 0A 63 24      jmp _while81_cond
4835   24AC             _while81_exit:
4836   24AC 0A AF 24      jmp _if80_exit
4837   24AF             _if80_exit:
4838   24AF             _if77_exit:
4839   24AF             ;; *s = '\0'; 
4840   24AF 2C FF FF      mov b, [bp + -1] ; $s             
4841   24B2 D8            push b
4842   24B3 26 00 00      mov b, $0
4843   24B6 E7            pop d
4844   24B7 FD 3E         mov [d], bl
4845   24B9 F9            leave
4846   24BA 09            ret
4847   24BB             
4848   24BB             error:
4849   24BB F8 00 00      enter 0 ; (push bp; mov bp, sp)
4850   24BE             ;; printf("\nError: "); 
4851   24BE 26 67 29      mov b, __s4 ; "\nError: "
4852   24C1 FD AB         swp b
4853   24C3 D8            push b
4854   24C4 07 F4 09      call printf
4855   24C7 51 02 00      add sp, 2
4856   24CA             ;; printf(msg); 
4857   24CA 2C 05 00      mov b, [bp + 5] ; $msg             
4858   24CD FD AB         swp b
4859   24CF D8            push b
4860   24D0 07 F4 09      call printf
4861   24D3 51 02 00      add sp, 2
4862   24D6             ;; printf("\n"); 
4863   24D6 26 70 29      mov b, __s5 ; "\n"
4864   24D9 FD AB         swp b
4865   24DB D8            push b
4866   24DC 07 F4 09      call printf
4867   24DF 51 02 00      add sp, 2
4868   24E2 F9            leave
4869   24E3 09            ret
4870   24E4             ; --- END TEXT BLOCK
4871   24E4             
4872   24E4             ; --- BEGIN DATA BLOCK
4873   24E4 00 00       _tok: .fill 2, 0
4874   24E6 00 00       _toktype: .fill 2, 0
4875   24E8 00 00       _prog: .fill 2, 0
4876   24EA 00 00 00 00 _token_data: .fill 256, 0
4876   24EE 00 00 00 00 
4876   24F2 00 00 00 00 
4876   24F6 00 00 00 00 
4876   24FA 00 00 00 00 
4876   24FE 00 00 00 00 
4876   2502 00 00 00 00 
4876   2506 00 00 00 00 
4876   250A 00 00 00 00 
4876   250E 00 00 00 00 
4876   2512 00 00 00 00 
4876   2516 00 00 00 00 
4876   251A 00 00 00 00 
4876   251E 00 00 00 00 
4876   2522 00 00 00 00 
4876   2526 00 00 00 00 
4876   252A 00 00 00 00 
4876   252E 00 00 00 00 
4876   2532 00 00 00 00 
4876   2536 00 00 00 00 
4876   253A 00 00 00 00 
4876   253E 00 00 00 00 
4876   2542 00 00 00 00 
4876   2546 00 00 00 00 
4876   254A 00 00 00 00 
4876   254E 00 00 00 00 
4876   2552 00 00 00 00 
4876   2556 00 00 00 00 
4876   255A 00 00 00 00 
4876   255E 00 00 00 00 
4876   2562 00 00 00 00 
4876   2566 00 00 00 00 
4876   256A 00 00 00 00 
4876   256E 00 00 00 00 
4876   2572 00 00 00 00 
4876   2576 00 00 00 00 
4876   257A 00 00 00 00 
4876   257E 00 00 00 00 
4876   2582 00 00 00 00 
4876   2586 00 00 00 00 
4876   258A 00 00 00 00 
4876   258E 00 00 00 00 
4876   2592 00 00 00 00 
4876   2596 00 00 00 00 
4876   259A 00 00 00 00 
4876   259E 00 00 00 00 
4876   25A2 00 00 00 00 
4876   25A6 00 00 00 00 
4876   25AA 00 00 00 00 
4876   25AE 00 00 00 00 
4876   25B2 00 00 00 00 
4876   25B6 00 00 00 00 
4876   25BA 00 00 00 00 
4876   25BE 00 00 00 00 
4876   25C2 00 00 00 00 
4876   25C6 00 00 00 00 
4876   25CA 00 00 00 00 
4876   25CE 00 00 00 00 
4876   25D2 00 00 00 00 
4876   25D6 00 00 00 00 
4876   25DA 00 00 00 00 
4876   25DE 00 00 00 00 
4876   25E2 00 00 00 00 
4876   25E6 00 00 00 00 
4877   25EA 00 00 00 00 _string_const_data: .fill 256, 0
4877   25EE 00 00 00 00 
4877   25F2 00 00 00 00 
4877   25F6 00 00 00 00 
4877   25FA 00 00 00 00 
4877   25FE 00 00 00 00 
4877   2602 00 00 00 00 
4877   2606 00 00 00 00 
4877   260A 00 00 00 00 
4877   260E 00 00 00 00 
4877   2612 00 00 00 00 
4877   2616 00 00 00 00 
4877   261A 00 00 00 00 
4877   261E 00 00 00 00 
4877   2622 00 00 00 00 
4877   2626 00 00 00 00 
4877   262A 00 00 00 00 
4877   262E 00 00 00 00 
4877   2632 00 00 00 00 
4877   2636 00 00 00 00 
4877   263A 00 00 00 00 
4877   263E 00 00 00 00 
4877   2642 00 00 00 00 
4877   2646 00 00 00 00 
4877   264A 00 00 00 00 
4877   264E 00 00 00 00 
4877   2652 00 00 00 00 
4877   2656 00 00 00 00 
4877   265A 00 00 00 00 
4877   265E 00 00 00 00 
4877   2662 00 00 00 00 
4877   2666 00 00 00 00 
4877   266A 00 00 00 00 
4877   266E 00 00 00 00 
4877   2672 00 00 00 00 
4877   2676 00 00 00 00 
4877   267A 00 00 00 00 
4877   267E 00 00 00 00 
4877   2682 00 00 00 00 
4877   2686 00 00 00 00 
4877   268A 00 00 00 00 
4877   268E 00 00 00 00 
4877   2692 00 00 00 00 
4877   2696 00 00 00 00 
4877   269A 00 00 00 00 
4877   269E 00 00 00 00 
4877   26A2 00 00 00 00 
4877   26A6 00 00 00 00 
4877   26AA 00 00 00 00 
4877   26AE 00 00 00 00 
4877   26B2 00 00 00 00 
4877   26B6 00 00 00 00 
4877   26BA 00 00 00 00 
4877   26BE 00 00 00 00 
4877   26C2 00 00 00 00 
4877   26C6 00 00 00 00 
4877   26CA 00 00 00 00 
4877   26CE 00 00 00 00 
4877   26D2 00 00 00 00 
4877   26D6 00 00 00 00 
4877   26DA 00 00 00 00 
4877   26DE 00 00 00 00 
4877   26E2 00 00 00 00 
4877   26E6 00 00 00 00 
4878   26EA 00 00 00 00 _arg_data: .fill 512, 0
4878   26EE 00 00 00 00 
4878   26F2 00 00 00 00 
4878   26F6 00 00 00 00 
4878   26FA 00 00 00 00 
4878   26FE 00 00 00 00 
4878   2702 00 00 00 00 
4878   2706 00 00 00 00 
4878   270A 00 00 00 00 
4878   270E 00 00 00 00 
4878   2712 00 00 00 00 
4878   2716 00 00 00 00 
4878   271A 00 00 00 00 
4878   271E 00 00 00 00 
4878   2722 00 00 00 00 
4878   2726 00 00 00 00 
4878   272A 00 00 00 00 
4878   272E 00 00 00 00 
4878   2732 00 00 00 00 
4878   2736 00 00 00 00 
4878   273A 00 00 00 00 
4878   273E 00 00 00 00 
4878   2742 00 00 00 00 
4878   2746 00 00 00 00 
4878   274A 00 00 00 00 
4878   274E 00 00 00 00 
4878   2752 00 00 00 00 
4878   2756 00 00 00 00 
4878   275A 00 00 00 00 
4878   275E 00 00 00 00 
4878   2762 00 00 00 00 
4878   2766 00 00 00 00 
4878   276A 00 00 00 00 
4878   276E 00 00 00 00 
4878   2772 00 00 00 00 
4878   2776 00 00 00 00 
4878   277A 00 00 00 00 
4878   277E 00 00 00 00 
4878   2782 00 00 00 00 
4878   2786 00 00 00 00 
4878   278A 00 00 00 00 
4878   278E 00 00 00 00 
4878   2792 00 00 00 00 
4878   2796 00 00 00 00 
4878   279A 00 00 00 00 
4878   279E 00 00 00 00 
4878   27A2 00 00 00 00 
4878   27A6 00 00 00 00 
4878   27AA 00 00 00 00 
4878   27AE 00 00 00 00 
4878   27B2 00 00 00 00 
4878   27B6 00 00 00 00 
4878   27BA 00 00 00 00 
4878   27BE 00 00 00 00 
4878   27C2 00 00 00 00 
4878   27C6 00 00 00 00 
4878   27CA 00 00 00 00 
4878   27CE 00 00 00 00 
4878   27D2 00 00 00 00 
4878   27D6 00 00 00 00 
4878   27DA 00 00 00 00 
4878   27DE 00 00 00 00 
4878   27E2 00 00 00 00 
4878   27E6 00 00 00 00 
4878   27EA 00 00 00 00 
4878   27EE 00 00 00 00 
4878   27F2 00 00 00 00 
4878   27F6 00 00 00 00 
4878   27FA 00 00 00 00 
4878   27FE 00 00 00 00 
4878   2802 00 00 00 00 
4878   2806 00 00 00 00 
4878   280A 00 00 00 00 
4878   280E 00 00 00 00 
4878   2812 00 00 00 00 
4878   2816 00 00 00 00 
4878   281A 00 00 00 00 
4878   281E 00 00 00 00 
4878   2822 00 00 00 00 
4878   2826 00 00 00 00 
4878   282A 00 00 00 00 
4878   282E 00 00 00 00 
4878   2832 00 00 00 00 
4878   2836 00 00 00 00 
4878   283A 00 00 00 00 
4878   283E 00 00 00 00 
4878   2842 00 00 00 00 
4878   2846 00 00 00 00 
4878   284A 00 00 00 00 
4878   284E 00 00 00 00 
4878   2852 00 00 00 00 
4878   2856 00 00 00 00 
4878   285A 00 00 00 00 
4878   285E 00 00 00 00 
4878   2862 00 00 00 00 
4878   2866 00 00 00 00 
4878   286A 00 00 00 00 
4878   286E 00 00 00 00 
4878   2872 00 00 00 00 
4878   2876 00 00 00 00 
4878   287A 00 00 00 00 
4878   287E 00 00 00 00 
4878   2882 00 00 00 00 
4878   2886 00 00 00 00 
4878   288A 00 00 00 00 
4878   288E 00 00 00 00 
4878   2892 00 00 00 00 
4878   2896 00 00 00 00 
4878   289A 00 00 00 00 
4878   289E 00 00 00 00 
4878   28A2 00 00 00 00 
4878   28A6 00 00 00 00 
4878   28AA 00 00 00 00 
4878   28AE 00 00 00 00 
4878   28B2 00 00 00 00 
4878   28B6 00 00 00 00 
4878   28BA 00 00 00 00 
4878   28BE 00 00 00 00 
4878   28C2 00 00 00 00 
4878   28C6 00 00 00 00 
4878   28CA 00 00 00 00 
4878   28CE 00 00 00 00 
4878   28D2 00 00 00 00 
4878   28D6 00 00 00 00 
4878   28DA 00 00 00 00 
4878   28DE 00 00 00 00 
4878   28E2 00 00 00 00 
4878   28E6 00 00 00 00 
4879   28EA 3E 20 00    __s0: .db "> ", 0
4880   28ED 55 6E 6B 6E __s1: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
4880   28F1 6F 77 6E 20 
4880   28F5 74 79 70 65 
4880   28F9 20 73 69 7A 
4880   28FD 65 20 69 6E 
4880   2901 20 76 61 5F 
4880   2905 61 72 67 28 
4880   2909 29 20 63 61 
4880   290D 6C 6C 2E 20 
4880   2911 53 69 7A 65 
4880   2915 20 6E 65 65 
4880   2919 64 73 20 74 
4880   291D 6F 20 62 65 
4880   2921 20 65 69 74 
4880   2925 68 65 72 20 
4880   2929 31 20 6F 72 
4880   292D 20 32 2E 00 
4881   2931 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
4881   2935 72 3A 20 55 
4881   2939 6E 6B 6E 6F 
4881   293D 77 6E 20 61 
4881   2941 72 67 75 6D 
4881   2945 65 6E 74 20 
4881   2949 74 79 70 65 
4881   294D 2E 0A 00 
4882   2950 44 6F 75 62 __s3: .db "Double quotes expected", 0
4882   2954 6C 65 20 71 
4882   2958 75 6F 74 65 
4882   295C 73 20 65 78 
4882   2960 70 65 63 74 
4882   2964 65 64 00 
4883   2967 0A 45 72 72 __s4: .db "\nError: ", 0
4883   296B 6F 72 3A 20 
4883   296F 00 
4884   2970 0A 00       __s5: .db "\n", 0
4885   2972             
4886   2972 74 29       _heap_top: .dw _heap
4887   2974 00          _heap: .db 0
4888   2975             ; --- END DATA BLOCK
4889   2975             
4890   2975             .end
tasm: Number of errors = 0
