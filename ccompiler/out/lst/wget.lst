0001   0000             ; --- FILENAME: ../solarium/usr/bin/wget
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $status 
0011   0408             ; $p 
0012   0408 52 03 00      sub sp, 3
0013   040B             ;; p = url; 
0014   040B FA FE FF      lea d, [bp + -2] ; $p         
0015   040E 26 4F 2B      mov b, _url_data ; $url                   
0016   0411 FD 43         mov [d], b
0017   0413             ;; prog = 0; 
0018   0413 3B 4D 29      mov d, _prog ; $prog         
0019   0416 26 00 00      mov b, $0        
0020   0419 FD 43         mov [d], b
0021   041B             ;; while(*prog && *prog != ' ') *p++ = *prog++; 
0022   041B             _while1_cond:
0023   041B 29 4D 29      mov b, [_prog] ; $prog           
0024   041E 74            mov d, b
0025   041F 32            mov bl, [d]
0026   0420 A7 00         mov bh, 0
0027   0422 D7            push a
0028   0423 11            mov a, b
0029   0424 29 4D 29      mov b, [_prog] ; $prog           
0030   0427 74            mov d, b
0031   0428 32            mov bl, [d]
0032   0429 A7 00         mov bh, 0
0033   042B             ; START RELATIONAL
0034   042B D7            push a
0035   042C 11            mov a, b
0036   042D 26 20 00      mov b, $20
0037   0430 B0            cmp a, b
0038   0431 FD 72         sneq ; !=
0039   0433 E4            pop a
0040   0434             ; END RELATIONAL
0041   0434 FD A7         sand a, b ; &&
0042   0436 E4            pop a
0043   0437 C0 00 00      cmp b, 0
0044   043A C6 64 04      je _while1_exit
0045   043D             _while1_block:
0046   043D             ;; *p++ = *prog++; 
0047   043D 2C FE FF      mov b, [bp + -2] ; $p             
0048   0440 FD 79         mov g, b
0049   0442 FD 77         inc b
0050   0444 FA FE FF      lea d, [bp + -2] ; $p
0051   0447 FD 43         mov [d], b
0052   0449 FD 27         mov b, g
0053   044B D8            push b
0054   044C 29 4D 29      mov b, [_prog] ; $prog           
0055   044F FD 79         mov g, b
0056   0451 FD 77         inc b
0057   0453 3B 4D 29      mov d, _prog ; $prog
0058   0456 FD 43         mov [d], b
0059   0458 FD 27         mov b, g
0060   045A 74            mov d, b
0061   045B 32            mov bl, [d]
0062   045C A7 00         mov bh, 0
0063   045E E7            pop d
0064   045F FD 3E         mov [d], bl
0065   0461 0A 1B 04      jmp _while1_cond
0066   0464             _while1_exit:
0067   0464             ;; *p = '\0'; 
0068   0464 2C FE FF      mov b, [bp + -2] ; $p             
0069   0467 D8            push b
0070   0468 26 00 00      mov b, $0
0071   046B E7            pop d
0072   046C FD 3E         mov [d], bl
0073   046E             ;; if(!*prog){ 
0074   046E             _if2_cond:
0075   046E 29 4D 29      mov b, [_prog] ; $prog           
0076   0471 74            mov d, b
0077   0472 32            mov bl, [d]
0078   0473 A7 00         mov bh, 0
0079   0475 C0 00 00      cmp b, 0
0080   0478 FD 71         seq ; !
0081   047A C0 00 00      cmp b, 0
0082   047D C6 92 04      je _if2_exit
0083   0480             _if2_true:
0084   0480             ;; printf("\nusage: hget <url> <filename>"); 
0085   0480 26 0F 2C      mov b, __s0 ; "\nusage: hget <url> <filename>"
0086   0483 FD AB         swp b
0087   0485 D8            push b
0088   0486 07 60 0B      call printf
0089   0489 51 02 00      add sp, 2
0090   048C             ;; exit(); 
0091   048C 07 91 11      call exit
0092   048F 0A 92 04      jmp _if2_exit
0093   0492             _if2_exit:
0094   0492             ;; while(*prog == ' ') prog++; 
0095   0492             _while3_cond:
0096   0492 29 4D 29      mov b, [_prog] ; $prog           
0097   0495 74            mov d, b
0098   0496 32            mov bl, [d]
0099   0497 A7 00         mov bh, 0
0100   0499             ; START RELATIONAL
0101   0499 D7            push a
0102   049A 11            mov a, b
0103   049B 26 20 00      mov b, $20
0104   049E B0            cmp a, b
0105   049F FD 71         seq ; ==
0106   04A1 E4            pop a
0107   04A2             ; END RELATIONAL
0108   04A2 C0 00 00      cmp b, 0
0109   04A5 C6 B9 04      je _while3_exit
0110   04A8             _while3_block:
0111   04A8             ;; prog++; 
0112   04A8 29 4D 29      mov b, [_prog] ; $prog           
0113   04AB FD 79         mov g, b
0114   04AD FD 77         inc b
0115   04AF 3B 4D 29      mov d, _prog ; $prog
0116   04B2 FD 43         mov [d], b
0117   04B4 FD 27         mov b, g
0118   04B6 0A 92 04      jmp _while3_cond
0119   04B9             _while3_exit:
0120   04B9             ;; if(!*prog){ 
0121   04B9             _if4_cond:
0122   04B9 29 4D 29      mov b, [_prog] ; $prog           
0123   04BC 74            mov d, b
0124   04BD 32            mov bl, [d]
0125   04BE A7 00         mov bh, 0
0126   04C0 C0 00 00      cmp b, 0
0127   04C3 FD 71         seq ; !
0128   04C5 C0 00 00      cmp b, 0
0129   04C8 C6 DD 04      je _if4_exit
0130   04CB             _if4_true:
0131   04CB             ;; printf("\nusage: hget <url> <filename>"); 
0132   04CB 26 0F 2C      mov b, __s0 ; "\nusage: hget <url> <filename>"
0133   04CE FD AB         swp b
0134   04D0 D8            push b
0135   04D1 07 60 0B      call printf
0136   04D4 51 02 00      add sp, 2
0137   04D7             ;; exit(); 
0138   04D7 07 91 11      call exit
0139   04DA 0A DD 04      jmp _if4_exit
0140   04DD             _if4_exit:
0141   04DD             ;; p = filename; 
0142   04DD FA FE FF      lea d, [bp + -2] ; $p         
0143   04E0 26 CF 2B      mov b, _filename_data ; $filename                   
0144   04E3 FD 43         mov [d], b
0145   04E5             ;; while(*prog && *prog != ' ' && *prog != ';') *p++ = *prog++; 
0146   04E5             _while5_cond:
0147   04E5 29 4D 29      mov b, [_prog] ; $prog           
0148   04E8 74            mov d, b
0149   04E9 32            mov bl, [d]
0150   04EA A7 00         mov bh, 0
0151   04EC D7            push a
0152   04ED 11            mov a, b
0153   04EE 29 4D 29      mov b, [_prog] ; $prog           
0154   04F1 74            mov d, b
0155   04F2 32            mov bl, [d]
0156   04F3 A7 00         mov bh, 0
0157   04F5             ; START RELATIONAL
0158   04F5 D7            push a
0159   04F6 11            mov a, b
0160   04F7 26 20 00      mov b, $20
0161   04FA B0            cmp a, b
0162   04FB FD 72         sneq ; !=
0163   04FD E4            pop a
0164   04FE             ; END RELATIONAL
0165   04FE FD A7         sand a, b ; &&
0166   0500 11            mov a, b
0167   0501 29 4D 29      mov b, [_prog] ; $prog           
0168   0504 74            mov d, b
0169   0505 32            mov bl, [d]
0170   0506 A7 00         mov bh, 0
0171   0508             ; START RELATIONAL
0172   0508 D7            push a
0173   0509 11            mov a, b
0174   050A 26 3B 00      mov b, $3b
0175   050D B0            cmp a, b
0176   050E FD 72         sneq ; !=
0177   0510 E4            pop a
0178   0511             ; END RELATIONAL
0179   0511 FD A7         sand a, b ; &&
0180   0513 E4            pop a
0181   0514 C0 00 00      cmp b, 0
0182   0517 C6 41 05      je _while5_exit
0183   051A             _while5_block:
0184   051A             ;; *p++ = *prog++; 
0185   051A 2C FE FF      mov b, [bp + -2] ; $p             
0186   051D FD 79         mov g, b
0187   051F FD 77         inc b
0188   0521 FA FE FF      lea d, [bp + -2] ; $p
0189   0524 FD 43         mov [d], b
0190   0526 FD 27         mov b, g
0191   0528 D8            push b
0192   0529 29 4D 29      mov b, [_prog] ; $prog           
0193   052C FD 79         mov g, b
0194   052E FD 77         inc b
0195   0530 3B 4D 29      mov d, _prog ; $prog
0196   0533 FD 43         mov [d], b
0197   0535 FD 27         mov b, g
0198   0537 74            mov d, b
0199   0538 32            mov bl, [d]
0200   0539 A7 00         mov bh, 0
0201   053B E7            pop d
0202   053C FD 3E         mov [d], bl
0203   053E 0A E5 04      jmp _while5_cond
0204   0541             _while5_exit:
0205   0541             ;; *p = '\0'; 
0206   0541 2C FE FF      mov b, [bp + -2] ; $p             
0207   0544 D8            push b
0208   0545 26 00 00      mov b, $0
0209   0548 E7            pop d
0210   0549 FD 3E         mov [d], bl
0211   054B             ;; printf("Filename: "); printf(filename); printf("\n"); 
0212   054B 26 2D 2C      mov b, __s1 ; "Filename: "
0213   054E FD AB         swp b
0214   0550 D8            push b
0215   0551 07 60 0B      call printf
0216   0554 51 02 00      add sp, 2
0217   0557             ;; printf(filename); printf("\n"); 
0218   0557 26 CF 2B      mov b, _filename_data ; $filename           
0219   055A FD AB         swp b
0220   055C D8            push b
0221   055D 07 60 0B      call printf
0222   0560 51 02 00      add sp, 2
0223   0563             ;; printf("\n"); 
0224   0563 26 38 2C      mov b, __s2 ; "\n"
0225   0566 FD AB         swp b
0226   0568 D8            push b
0227   0569 07 60 0B      call printf
0228   056C 51 02 00      add sp, 2
0229   056F             ;; printf("Url: "); printf(url); printf("\n"); 
0230   056F 26 3A 2C      mov b, __s3 ; "Url: "
0231   0572 FD AB         swp b
0232   0574 D8            push b
0233   0575 07 60 0B      call printf
0234   0578 51 02 00      add sp, 2
0235   057B             ;; printf(url); printf("\n"); 
0236   057B 26 4F 2B      mov b, _url_data ; $url           
0237   057E FD AB         swp b
0238   0580 D8            push b
0239   0581 07 60 0B      call printf
0240   0584 51 02 00      add sp, 2
0241   0587             ;; printf("\n"); 
0242   0587 26 38 2C      mov b, __s2 ; "\n"
0243   058A FD AB         swp b
0244   058C D8            push b
0245   058D 07 60 0B      call printf
0246   0590 51 02 00      add sp, 2
0247   0593             ;; status = http(2, url); // Request ESP to download file 
0248   0593 FA 00 00      lea d, [bp + 0] ; $status
0249   0596 DA            push d
0250   0597 26 02 00      mov b, $2
0251   059A DD            push bl
0252   059B 26 4F 2B      mov b, _url_data ; $url           
0253   059E FD AB         swp b
0254   05A0 D8            push b
0255   05A1 07 35 26      call http
0256   05A4 51 03 00      add sp, 3
0257   05A7 E7            pop d
0258   05A8 FD 3E         mov [d], bl
0259   05AA             ;; if(status >= 100 && status <= 299){ 
0260   05AA             _if6_cond:
0261   05AA 34 00 00      mov bl, [bp + 0] ; $status
0262   05AD A7 00         mov bh, 0             
0263   05AF             ; START RELATIONAL
0264   05AF D7            push a
0265   05B0 11            mov a, b
0266   05B1 26 64 00      mov b, $64
0267   05B4 B0            cmp a, b
0268   05B5 FD 80         sge ; >=
0269   05B7 E4            pop a
0270   05B8             ; END RELATIONAL
0271   05B8 D7            push a
0272   05B9 11            mov a, b
0273   05BA 34 00 00      mov bl, [bp + 0] ; $status
0274   05BD A7 00         mov bh, 0             
0275   05BF             ; START RELATIONAL
0276   05BF D7            push a
0277   05C0 11            mov a, b
0278   05C1 26 2B 01      mov b, $12b
0279   05C4 B0            cmp a, b
0280   05C5 FD 74         sle ; <=
0281   05C7 E4            pop a
0282   05C8             ; END RELATIONAL
0283   05C8 FD A7         sand a, b ; &&
0284   05CA E4            pop a
0285   05CB C0 00 00      cmp b, 0
0286   05CE C6 03 06      je _if6_else
0287   05D1             _if6_true:
0288   05D1             ;; printf("Now creating file...\n"); 
0289   05D1 26 40 2C      mov b, __s4 ; "Now creating file...\n"
0290   05D4 FD AB         swp b
0291   05D6 D8            push b
0292   05D7 07 60 0B      call printf
0293   05DA 51 02 00      add sp, 2
0294   05DD             ;; http(3, url); // Request ESP to send the file 
0295   05DD 26 03 00      mov b, $3
0296   05E0 DD            push bl
0297   05E1 26 4F 2B      mov b, _url_data ; $url           
0298   05E4 FD AB         swp b
0299   05E6 D8            push b
0300   05E7 07 35 26      call http
0301   05EA 51 03 00      add sp, 3
0302   05ED             
0303   05ED             ; --- BEGIN INLINE ASM BLOCK
0304   05ED 3B CF 2B      mov d, _filename_data ; $filename
0305   05F0 19 0B         mov al, 11
0306   05F2 05 04         syscall sys_filesystem
0307   05F4             ; --- END INLINE ASM BLOCK
0308   05F4             
0309   05F4             ;; printf("OK.\n"); 
0310   05F4 26 56 2C      mov b, __s5 ; "OK.\n"
0311   05F7 FD AB         swp b
0312   05F9 D8            push b
0313   05FA 07 60 0B      call printf
0314   05FD 51 02 00      add sp, 2
0315   0600 0A 0F 06      jmp _if6_exit
0316   0603             _if6_else:
0317   0603             ;; printf("Bad code, aborting...\n"); 
0318   0603 26 5B 2C      mov b, __s6 ; "Bad code, aborting...\n"
0319   0606 FD AB         swp b
0320   0608 D8            push b
0321   0609 07 60 0B      call printf
0322   060C 51 02 00      add sp, 2
0323   060F             _if6_exit:
0324   060F 05 0B         syscall sys_terminate_proc
0325   0611             
0326   0611             include_ctype_lib:
0327   0611 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0328   0614             
0329   0614             ; --- BEGIN INLINE ASM BLOCK
0330   0614             .include "lib/ctype.asm"
0001+  0614             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0614             ; ctype.s
0003+  0614             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0614             
0005+  0614             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0614             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0614             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0614             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0614             ;; characters are supported.
0010+  0614             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0614             ;; _isalnum 
0012+  0614             ;; _isalpha 
0013+  0614             ;; islower 
0014+  0614             ;; isupper 
0015+  0614             ;; _isdigit 
0016+  0614             ;; isxdigit
0017+  0614             ;; iscntrl 
0018+  0614             ;; isgraph 
0019+  0614             ;; _isspace 
0020+  0614             ;; isblank 
0021+  0614             ;; isprint 
0022+  0614             ;; ispunct 
0023+  0614             ;; tolower 
0024+  0614             ;; toupper
0025+  0614             
0026+  0614             
0027+  0614             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0614             ;; IS ALPHANUMERIC
0029+  0614             ;; sets ZF according with result
0030+  0614             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0614             _isalnum:
0032+  0614 07 31 06    	call _isalpha
0033+  0617 C6 1D 06    	je _isalnum_exit
0034+  061A 07 1E 06    	call _isdigit
0035+  061D             _isalnum_exit:
0036+  061D 09          	ret	
0037+  061E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  061E             ;; IS DIGIT
0039+  061E             ;; sets ZF according with result
0040+  061E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  061E             _isdigit:
0042+  061E DB          	push al
0043+  061F B9 30       	cmp al, '0'
0044+  0621 C8 2D 06    	jlu _isdigit_false
0045+  0624 B9 39       	cmp al, '9'
0046+  0626 D1 2D 06    	jgu _isdigit_false
0047+  0629 87 00       	and al, 0	; set ZF
0048+  062B E8          	pop al
0049+  062C 09          	ret
0050+  062D             _isdigit_false:
0051+  062D 8B 01       	or al, 1	; clear ZF
0052+  062F E8          	pop al
0053+  0630 09          	ret	
0054+  0631             	
0055+  0631             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0631             ;; IS ALPHA
0057+  0631             ;; sets ZF according with result
0058+  0631             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0631             _isalpha:
0060+  0631 DB          	push al
0061+  0632 B9 5F       	cmp al, '_'
0062+  0634 C6 54 06    	je _isalpha_true
0063+  0637 B9 2E       	cmp al, '.'
0064+  0639 C6 54 06    	je _isalpha_true
0065+  063C B9 41       	cmp al, 'A'
0066+  063E C8 50 06    	jlu _isalpha_false
0067+  0641 B9 7A       	cmp al, 'z'
0068+  0643 D1 50 06    	jgu _isalpha_false
0069+  0646 B9 5A       	cmp al, 'Z'
0070+  0648 D0 54 06    	jleu _isalpha_true
0071+  064B B9 61       	cmp al, 'a'
0072+  064D C9 54 06    	jgeu _isalpha_true
0073+  0650             _isalpha_false:
0074+  0650 8B 01       	or al, 1	; clear ZF
0075+  0652 E8          	pop al
0076+  0653 09          	ret
0077+  0654             _isalpha_true:
0078+  0654 87 00       	and al, 0	; set ZF
0079+  0656 E8          	pop al
0080+  0657 09          	ret
0081+  0658             
0082+  0658             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0658             ;; IS PATH-ALPHA
0084+  0658             ;; sets ZF according with result
0085+  0658             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0658             ispath:
0087+  0658 DB          	push al
0088+  0659 07 1E 06    	call _isdigit
0089+  065C C6 86 06    	je ispath_true
0090+  065F B9 5F       	cmp al, '_'
0091+  0661 C6 86 06    	je ispath_true
0092+  0664 B9 2F       	cmp al, '/'
0093+  0666 C6 86 06    	je ispath_true
0094+  0669 B9 2E       	cmp al, '.'
0095+  066B C6 86 06    	je ispath_true
0096+  066E B9 41       	cmp al, 'A'
0097+  0670 C8 82 06    	jlu ispath_false
0098+  0673 B9 7A       	cmp al, 'z'
0099+  0675 D1 82 06    	jgu ispath_false
0100+  0678 B9 5A       	cmp al, 'Z'
0101+  067A D0 86 06    	jleu ispath_true
0102+  067D B9 61       	cmp al, 'a'
0103+  067F C9 86 06    	jgeu ispath_true
0104+  0682             ispath_false:
0105+  0682 8B 01       	or al, 1	; clear ZF
0106+  0684 E8          	pop al
0107+  0685 09          	ret
0108+  0686             ispath_true:
0109+  0686 87 00       	and al, 0	; set ZF
0110+  0688 E8          	pop al
0111+  0689 09          	ret
0112+  068A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  068A             ;; IS SPACE
0114+  068A             ;; sets ZF according with result
0115+  068A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  068A             _isspace:
0117+  068A B9 20       	cmp al, $20		; ' '
0118+  068C C6 A0 06    	je _isspace_exit
0119+  068F B9 09       	cmp al, $09		; '\t'
0120+  0691 C6 A0 06    	je _isspace_exit
0121+  0694 B9 0A       	cmp al, $0A		; '\n'
0122+  0696 C6 A0 06    	je _isspace_exit
0123+  0699 B9 0D       	cmp al, $0D		; '\r'
0124+  069B C6 A0 06    	je _isspace_exit
0125+  069E B9 0B       	cmp al, $0B		; '\v'
0126+  06A0             _isspace_exit:
0127+  06A0 09          	ret	
0128+  06A1             
0129+  06A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  06A1             ; TO LOWER
0131+  06A1             ; input in AL
0132+  06A1             ; output in AL
0133+  06A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  06A1             _to_lower:
0135+  06A1 B9 5A       	cmp al, 'Z'
0136+  06A3 D1 A8 06    	jgu _to_lower_ret
0137+  06A6 6A 20       	add al, $20				; convert to lower case
0138+  06A8             _to_lower_ret:
0139+  06A8 09          	ret
0140+  06A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  06A9             ; TO UPPER
0142+  06A9             ; input in AL
0143+  06A9             ; output in AL
0144+  06A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  06A9             _to_upper:
0146+  06A9 B9 61       	cmp al, 'a'
0147+  06AB C8 B0 06    	jlu _to_upper_ret
0148+  06AE 6F 20       	sub al, $20			; convert to upper case
0149+  06B0             _to_upper_ret:
0150+  06B0 09          	ret
0151+  06B1             
0331   06B1             ; --- END INLINE ASM BLOCK
0332   06B1             
0333   06B1 F9            leave
0334   06B2 09            ret
0335   06B3             
0336   06B3             is_space:
0337   06B3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0338   06B6             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
0339   06B6 34 05 00      mov bl, [bp + 5] ; $c
0340   06B9 A7 00         mov bh, 0             
0341   06BB             ; START RELATIONAL
0342   06BB D7            push a
0343   06BC 11            mov a, b
0344   06BD 26 20 00      mov b, $20
0345   06C0 B0            cmp a, b
0346   06C1 FD 71         seq ; ==
0347   06C3 E4            pop a
0348   06C4             ; END RELATIONAL
0349   06C4 D7            push a
0350   06C5 11            mov a, b
0351   06C6 34 05 00      mov bl, [bp + 5] ; $c
0352   06C9 A7 00         mov bh, 0             
0353   06CB             ; START RELATIONAL
0354   06CB D7            push a
0355   06CC 11            mov a, b
0356   06CD 26 09 00      mov b, $9
0357   06D0 B0            cmp a, b
0358   06D1 FD 71         seq ; ==
0359   06D3 E4            pop a
0360   06D4             ; END RELATIONAL
0361   06D4 FD A8         sor a, b ; ||
0362   06D6 11            mov a, b
0363   06D7 34 05 00      mov bl, [bp + 5] ; $c
0364   06DA A7 00         mov bh, 0             
0365   06DC             ; START RELATIONAL
0366   06DC D7            push a
0367   06DD 11            mov a, b
0368   06DE 26 0A 00      mov b, $a
0369   06E1 B0            cmp a, b
0370   06E2 FD 71         seq ; ==
0371   06E4 E4            pop a
0372   06E5             ; END RELATIONAL
0373   06E5 FD A8         sor a, b ; ||
0374   06E7 11            mov a, b
0375   06E8 34 05 00      mov bl, [bp + 5] ; $c
0376   06EB A7 00         mov bh, 0             
0377   06ED             ; START RELATIONAL
0378   06ED D7            push a
0379   06EE 11            mov a, b
0380   06EF 26 0D 00      mov b, $d
0381   06F2 B0            cmp a, b
0382   06F3 FD 71         seq ; ==
0383   06F5 E4            pop a
0384   06F6             ; END RELATIONAL
0385   06F6 FD A8         sor a, b ; ||
0386   06F8 E4            pop a
0387   06F9 F9            leave
0388   06FA 09            ret
0389   06FB             
0390   06FB             is_digit:
0391   06FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0392   06FE             ;; return c >= '0' && c <= '9'; 
0393   06FE 34 05 00      mov bl, [bp + 5] ; $c
0394   0701 A7 00         mov bh, 0             
0395   0703             ; START RELATIONAL
0396   0703 D7            push a
0397   0704 11            mov a, b
0398   0705 26 30 00      mov b, $30
0399   0708 B0            cmp a, b
0400   0709 FD 80         sge ; >=
0401   070B E4            pop a
0402   070C             ; END RELATIONAL
0403   070C D7            push a
0404   070D 11            mov a, b
0405   070E 34 05 00      mov bl, [bp + 5] ; $c
0406   0711 A7 00         mov bh, 0             
0407   0713             ; START RELATIONAL
0408   0713 D7            push a
0409   0714 11            mov a, b
0410   0715 26 39 00      mov b, $39
0411   0718 B0            cmp a, b
0412   0719 FD 74         sle ; <=
0413   071B E4            pop a
0414   071C             ; END RELATIONAL
0415   071C FD A7         sand a, b ; &&
0416   071E E4            pop a
0417   071F F9            leave
0418   0720 09            ret
0419   0721             
0420   0721             is_alpha:
0421   0721 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0422   0724             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
0423   0724 34 05 00      mov bl, [bp + 5] ; $c
0424   0727 A7 00         mov bh, 0             
0425   0729             ; START RELATIONAL
0426   0729 D7            push a
0427   072A 11            mov a, b
0428   072B 26 61 00      mov b, $61
0429   072E B0            cmp a, b
0430   072F FD 80         sge ; >=
0431   0731 E4            pop a
0432   0732             ; END RELATIONAL
0433   0732 D7            push a
0434   0733 11            mov a, b
0435   0734 34 05 00      mov bl, [bp + 5] ; $c
0436   0737 A7 00         mov bh, 0             
0437   0739             ; START RELATIONAL
0438   0739 D7            push a
0439   073A 11            mov a, b
0440   073B 26 7A 00      mov b, $7a
0441   073E B0            cmp a, b
0442   073F FD 74         sle ; <=
0443   0741 E4            pop a
0444   0742             ; END RELATIONAL
0445   0742 FD A7         sand a, b ; &&
0446   0744 E4            pop a
0447   0745 D7            push a
0448   0746 11            mov a, b
0449   0747 34 05 00      mov bl, [bp + 5] ; $c
0450   074A A7 00         mov bh, 0             
0451   074C             ; START RELATIONAL
0452   074C D7            push a
0453   074D 11            mov a, b
0454   074E 26 41 00      mov b, $41
0455   0751 B0            cmp a, b
0456   0752 FD 80         sge ; >=
0457   0754 E4            pop a
0458   0755             ; END RELATIONAL
0459   0755 D7            push a
0460   0756 11            mov a, b
0461   0757 34 05 00      mov bl, [bp + 5] ; $c
0462   075A A7 00         mov bh, 0             
0463   075C             ; START RELATIONAL
0464   075C D7            push a
0465   075D 11            mov a, b
0466   075E 26 5A 00      mov b, $5a
0467   0761 B0            cmp a, b
0468   0762 FD 74         sle ; <=
0469   0764 E4            pop a
0470   0765             ; END RELATIONAL
0471   0765 FD A7         sand a, b ; &&
0472   0767 E4            pop a
0473   0768 FD A8         sor a, b ; ||
0474   076A 11            mov a, b
0475   076B 34 05 00      mov bl, [bp + 5] ; $c
0476   076E A7 00         mov bh, 0             
0477   0770             ; START RELATIONAL
0478   0770 D7            push a
0479   0771 11            mov a, b
0480   0772 26 5F 00      mov b, $5f
0481   0775 B0            cmp a, b
0482   0776 FD 71         seq ; ==
0483   0778 E4            pop a
0484   0779             ; END RELATIONAL
0485   0779 FD A8         sor a, b ; ||
0486   077B E4            pop a
0487   077C F9            leave
0488   077D 09            ret
0489   077E             
0490   077E             is_delimiter:
0491   077E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0492   0781             ;; if( 
0493   0781             _if7_cond:
0494   0781 34 05 00      mov bl, [bp + 5] ; $c
0495   0784 A7 00         mov bh, 0             
0496   0786             ; START RELATIONAL
0497   0786 D7            push a
0498   0787 11            mov a, b
0499   0788 26 40 00      mov b, $40
0500   078B B0            cmp a, b
0501   078C FD 71         seq ; ==
0502   078E E4            pop a
0503   078F             ; END RELATIONAL
0504   078F D7            push a
0505   0790 11            mov a, b
0506   0791 34 05 00      mov bl, [bp + 5] ; $c
0507   0794 A7 00         mov bh, 0             
0508   0796             ; START RELATIONAL
0509   0796 D7            push a
0510   0797 11            mov a, b
0511   0798 26 23 00      mov b, $23
0512   079B B0            cmp a, b
0513   079C FD 71         seq ; ==
0514   079E E4            pop a
0515   079F             ; END RELATIONAL
0516   079F FD A8         sor a, b ; ||
0517   07A1 11            mov a, b
0518   07A2 34 05 00      mov bl, [bp + 5] ; $c
0519   07A5 A7 00         mov bh, 0             
0520   07A7             ; START RELATIONAL
0521   07A7 D7            push a
0522   07A8 11            mov a, b
0523   07A9 26 24 00      mov b, $24
0524   07AC B0            cmp a, b
0525   07AD FD 71         seq ; ==
0526   07AF E4            pop a
0527   07B0             ; END RELATIONAL
0528   07B0 FD A8         sor a, b ; ||
0529   07B2 11            mov a, b
0530   07B3 34 05 00      mov bl, [bp + 5] ; $c
0531   07B6 A7 00         mov bh, 0             
0532   07B8             ; START RELATIONAL
0533   07B8 D7            push a
0534   07B9 11            mov a, b
0535   07BA 26 2B 00      mov b, $2b
0536   07BD B0            cmp a, b
0537   07BE FD 71         seq ; ==
0538   07C0 E4            pop a
0539   07C1             ; END RELATIONAL
0540   07C1 FD A8         sor a, b ; ||
0541   07C3 11            mov a, b
0542   07C4 34 05 00      mov bl, [bp + 5] ; $c
0543   07C7 A7 00         mov bh, 0             
0544   07C9             ; START RELATIONAL
0545   07C9 D7            push a
0546   07CA 11            mov a, b
0547   07CB 26 2D 00      mov b, $2d
0548   07CE B0            cmp a, b
0549   07CF FD 71         seq ; ==
0550   07D1 E4            pop a
0551   07D2             ; END RELATIONAL
0552   07D2 FD A8         sor a, b ; ||
0553   07D4 11            mov a, b
0554   07D5 34 05 00      mov bl, [bp + 5] ; $c
0555   07D8 A7 00         mov bh, 0             
0556   07DA             ; START RELATIONAL
0557   07DA D7            push a
0558   07DB 11            mov a, b
0559   07DC 26 2A 00      mov b, $2a
0560   07DF B0            cmp a, b
0561   07E0 FD 71         seq ; ==
0562   07E2 E4            pop a
0563   07E3             ; END RELATIONAL
0564   07E3 FD A8         sor a, b ; ||
0565   07E5 11            mov a, b
0566   07E6 34 05 00      mov bl, [bp + 5] ; $c
0567   07E9 A7 00         mov bh, 0             
0568   07EB             ; START RELATIONAL
0569   07EB D7            push a
0570   07EC 11            mov a, b
0571   07ED 26 2F 00      mov b, $2f
0572   07F0 B0            cmp a, b
0573   07F1 FD 71         seq ; ==
0574   07F3 E4            pop a
0575   07F4             ; END RELATIONAL
0576   07F4 FD A8         sor a, b ; ||
0577   07F6 11            mov a, b
0578   07F7 34 05 00      mov bl, [bp + 5] ; $c
0579   07FA A7 00         mov bh, 0             
0580   07FC             ; START RELATIONAL
0581   07FC D7            push a
0582   07FD 11            mov a, b
0583   07FE 26 25 00      mov b, $25
0584   0801 B0            cmp a, b
0585   0802 FD 71         seq ; ==
0586   0804 E4            pop a
0587   0805             ; END RELATIONAL
0588   0805 FD A8         sor a, b ; ||
0589   0807 11            mov a, b
0590   0808 34 05 00      mov bl, [bp + 5] ; $c
0591   080B A7 00         mov bh, 0             
0592   080D             ; START RELATIONAL
0593   080D D7            push a
0594   080E 11            mov a, b
0595   080F 26 5B 00      mov b, $5b
0596   0812 B0            cmp a, b
0597   0813 FD 71         seq ; ==
0598   0815 E4            pop a
0599   0816             ; END RELATIONAL
0600   0816 FD A8         sor a, b ; ||
0601   0818 11            mov a, b
0602   0819 34 05 00      mov bl, [bp + 5] ; $c
0603   081C A7 00         mov bh, 0             
0604   081E             ; START RELATIONAL
0605   081E D7            push a
0606   081F 11            mov a, b
0607   0820 26 5D 00      mov b, $5d
0608   0823 B0            cmp a, b
0609   0824 FD 71         seq ; ==
0610   0826 E4            pop a
0611   0827             ; END RELATIONAL
0612   0827 FD A8         sor a, b ; ||
0613   0829 11            mov a, b
0614   082A 34 05 00      mov bl, [bp + 5] ; $c
0615   082D A7 00         mov bh, 0             
0616   082F             ; START RELATIONAL
0617   082F D7            push a
0618   0830 11            mov a, b
0619   0831 26 28 00      mov b, $28
0620   0834 B0            cmp a, b
0621   0835 FD 71         seq ; ==
0622   0837 E4            pop a
0623   0838             ; END RELATIONAL
0624   0838 FD A8         sor a, b ; ||
0625   083A 11            mov a, b
0626   083B 34 05 00      mov bl, [bp + 5] ; $c
0627   083E A7 00         mov bh, 0             
0628   0840             ; START RELATIONAL
0629   0840 D7            push a
0630   0841 11            mov a, b
0631   0842 26 29 00      mov b, $29
0632   0845 B0            cmp a, b
0633   0846 FD 71         seq ; ==
0634   0848 E4            pop a
0635   0849             ; END RELATIONAL
0636   0849 FD A8         sor a, b ; ||
0637   084B 11            mov a, b
0638   084C 34 05 00      mov bl, [bp + 5] ; $c
0639   084F A7 00         mov bh, 0             
0640   0851             ; START RELATIONAL
0641   0851 D7            push a
0642   0852 11            mov a, b
0643   0853 26 7B 00      mov b, $7b
0644   0856 B0            cmp a, b
0645   0857 FD 71         seq ; ==
0646   0859 E4            pop a
0647   085A             ; END RELATIONAL
0648   085A FD A8         sor a, b ; ||
0649   085C 11            mov a, b
0650   085D 34 05 00      mov bl, [bp + 5] ; $c
0651   0860 A7 00         mov bh, 0             
0652   0862             ; START RELATIONAL
0653   0862 D7            push a
0654   0863 11            mov a, b
0655   0864 26 7D 00      mov b, $7d
0656   0867 B0            cmp a, b
0657   0868 FD 71         seq ; ==
0658   086A E4            pop a
0659   086B             ; END RELATIONAL
0660   086B FD A8         sor a, b ; ||
0661   086D 11            mov a, b
0662   086E 34 05 00      mov bl, [bp + 5] ; $c
0663   0871 A7 00         mov bh, 0             
0664   0873             ; START RELATIONAL
0665   0873 D7            push a
0666   0874 11            mov a, b
0667   0875 26 3A 00      mov b, $3a
0668   0878 B0            cmp a, b
0669   0879 FD 71         seq ; ==
0670   087B E4            pop a
0671   087C             ; END RELATIONAL
0672   087C FD A8         sor a, b ; ||
0673   087E 11            mov a, b
0674   087F 34 05 00      mov bl, [bp + 5] ; $c
0675   0882 A7 00         mov bh, 0             
0676   0884             ; START RELATIONAL
0677   0884 D7            push a
0678   0885 11            mov a, b
0679   0886 26 3B 00      mov b, $3b
0680   0889 B0            cmp a, b
0681   088A FD 71         seq ; ==
0682   088C E4            pop a
0683   088D             ; END RELATIONAL
0684   088D FD A8         sor a, b ; ||
0685   088F 11            mov a, b
0686   0890 34 05 00      mov bl, [bp + 5] ; $c
0687   0893 A7 00         mov bh, 0             
0688   0895             ; START RELATIONAL
0689   0895 D7            push a
0690   0896 11            mov a, b
0691   0897 26 3C 00      mov b, $3c
0692   089A B0            cmp a, b
0693   089B FD 71         seq ; ==
0694   089D E4            pop a
0695   089E             ; END RELATIONAL
0696   089E FD A8         sor a, b ; ||
0697   08A0 11            mov a, b
0698   08A1 34 05 00      mov bl, [bp + 5] ; $c
0699   08A4 A7 00         mov bh, 0             
0700   08A6             ; START RELATIONAL
0701   08A6 D7            push a
0702   08A7 11            mov a, b
0703   08A8 26 3E 00      mov b, $3e
0704   08AB B0            cmp a, b
0705   08AC FD 71         seq ; ==
0706   08AE E4            pop a
0707   08AF             ; END RELATIONAL
0708   08AF FD A8         sor a, b ; ||
0709   08B1 11            mov a, b
0710   08B2 34 05 00      mov bl, [bp + 5] ; $c
0711   08B5 A7 00         mov bh, 0             
0712   08B7             ; START RELATIONAL
0713   08B7 D7            push a
0714   08B8 11            mov a, b
0715   08B9 26 3D 00      mov b, $3d
0716   08BC B0            cmp a, b
0717   08BD FD 71         seq ; ==
0718   08BF E4            pop a
0719   08C0             ; END RELATIONAL
0720   08C0 FD A8         sor a, b ; ||
0721   08C2 11            mov a, b
0722   08C3 34 05 00      mov bl, [bp + 5] ; $c
0723   08C6 A7 00         mov bh, 0             
0724   08C8             ; START RELATIONAL
0725   08C8 D7            push a
0726   08C9 11            mov a, b
0727   08CA 26 21 00      mov b, $21
0728   08CD B0            cmp a, b
0729   08CE FD 71         seq ; ==
0730   08D0 E4            pop a
0731   08D1             ; END RELATIONAL
0732   08D1 FD A8         sor a, b ; ||
0733   08D3 11            mov a, b
0734   08D4 34 05 00      mov bl, [bp + 5] ; $c
0735   08D7 A7 00         mov bh, 0             
0736   08D9             ; START RELATIONAL
0737   08D9 D7            push a
0738   08DA 11            mov a, b
0739   08DB 26 5E 00      mov b, $5e
0740   08DE B0            cmp a, b
0741   08DF FD 71         seq ; ==
0742   08E1 E4            pop a
0743   08E2             ; END RELATIONAL
0744   08E2 FD A8         sor a, b ; ||
0745   08E4 11            mov a, b
0746   08E5 34 05 00      mov bl, [bp + 5] ; $c
0747   08E8 A7 00         mov bh, 0             
0748   08EA             ; START RELATIONAL
0749   08EA D7            push a
0750   08EB 11            mov a, b
0751   08EC 26 26 00      mov b, $26
0752   08EF B0            cmp a, b
0753   08F0 FD 71         seq ; ==
0754   08F2 E4            pop a
0755   08F3             ; END RELATIONAL
0756   08F3 FD A8         sor a, b ; ||
0757   08F5 11            mov a, b
0758   08F6 34 05 00      mov bl, [bp + 5] ; $c
0759   08F9 A7 00         mov bh, 0             
0760   08FB             ; START RELATIONAL
0761   08FB D7            push a
0762   08FC 11            mov a, b
0763   08FD 26 7C 00      mov b, $7c
0764   0900 B0            cmp a, b
0765   0901 FD 71         seq ; ==
0766   0903 E4            pop a
0767   0904             ; END RELATIONAL
0768   0904 FD A8         sor a, b ; ||
0769   0906 11            mov a, b
0770   0907 34 05 00      mov bl, [bp + 5] ; $c
0771   090A A7 00         mov bh, 0             
0772   090C             ; START RELATIONAL
0773   090C D7            push a
0774   090D 11            mov a, b
0775   090E 26 7E 00      mov b, $7e
0776   0911 B0            cmp a, b
0777   0912 FD 71         seq ; ==
0778   0914 E4            pop a
0779   0915             ; END RELATIONAL
0780   0915 FD A8         sor a, b ; ||
0781   0917 11            mov a, b
0782   0918 34 05 00      mov bl, [bp + 5] ; $c
0783   091B A7 00         mov bh, 0             
0784   091D             ; START RELATIONAL
0785   091D D7            push a
0786   091E 11            mov a, b
0787   091F 26 2E 00      mov b, $2e
0788   0922 B0            cmp a, b
0789   0923 FD 71         seq ; ==
0790   0925 E4            pop a
0791   0926             ; END RELATIONAL
0792   0926 FD A8         sor a, b ; ||
0793   0928 E4            pop a
0794   0929 C0 00 00      cmp b, 0
0795   092C C6 37 09      je _if7_else
0796   092F             _if7_true:
0797   092F             ;; return 1; 
0798   092F 26 01 00      mov b, $1
0799   0932 F9            leave
0800   0933 09            ret
0801   0934 0A 3C 09      jmp _if7_exit
0802   0937             _if7_else:
0803   0937             ;; return 0; 
0804   0937 26 00 00      mov b, $0
0805   093A F9            leave
0806   093B 09            ret
0807   093C             _if7_exit:
0808   093C F9            leave
0809   093D 09            ret
0810   093E             
0811   093E             strcpy:
0812   093E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0813   0941             ; $psrc 
0814   0941             ; $pdest 
0815   0941 52 04 00      sub sp, 4
0816   0944             ;; psrc = src; 
0817   0944 FA FF FF      lea d, [bp + -1] ; $psrc         
0818   0947 2C 05 00      mov b, [bp + 5] ; $src                     
0819   094A FD 43         mov [d], b
0820   094C             ;; pdest = dest; 
0821   094C FA FD FF      lea d, [bp + -3] ; $pdest         
0822   094F 2C 07 00      mov b, [bp + 7] ; $dest                     
0823   0952 FD 43         mov [d], b
0824   0954             ;; while(*psrc) *pdest++ = *psrc++; 
0825   0954             _while8_cond:
0826   0954 2C FF FF      mov b, [bp + -1] ; $psrc             
0827   0957 74            mov d, b
0828   0958 32            mov bl, [d]
0829   0959 A7 00         mov bh, 0
0830   095B C0 00 00      cmp b, 0
0831   095E C6 88 09      je _while8_exit
0832   0961             _while8_block:
0833   0961             ;; *pdest++ = *psrc++; 
0834   0961 2C FD FF      mov b, [bp + -3] ; $pdest             
0835   0964 FD 79         mov g, b
0836   0966 FD 77         inc b
0837   0968 FA FD FF      lea d, [bp + -3] ; $pdest
0838   096B FD 43         mov [d], b
0839   096D FD 27         mov b, g
0840   096F D8            push b
0841   0970 2C FF FF      mov b, [bp + -1] ; $psrc             
0842   0973 FD 79         mov g, b
0843   0975 FD 77         inc b
0844   0977 FA FF FF      lea d, [bp + -1] ; $psrc
0845   097A FD 43         mov [d], b
0846   097C FD 27         mov b, g
0847   097E 74            mov d, b
0848   097F 32            mov bl, [d]
0849   0980 A7 00         mov bh, 0
0850   0982 E7            pop d
0851   0983 FD 3E         mov [d], bl
0852   0985 0A 54 09      jmp _while8_cond
0853   0988             _while8_exit:
0854   0988             ;; *pdest = '\0'; 
0855   0988 2C FD FF      mov b, [bp + -3] ; $pdest             
0856   098B D8            push b
0857   098C 26 00 00      mov b, $0
0858   098F E7            pop d
0859   0990 FD 3E         mov [d], bl
0860   0992 F9            leave
0861   0993 09            ret
0862   0994             
0863   0994             strcmp:
0864   0994 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0865   0997             ;; while (*s1 && (*s1 == *s2)) { 
0866   0997             _while9_cond:
0867   0997 2C 07 00      mov b, [bp + 7] ; $s1             
0868   099A 74            mov d, b
0869   099B 32            mov bl, [d]
0870   099C A7 00         mov bh, 0
0871   099E D7            push a
0872   099F 11            mov a, b
0873   09A0 2C 07 00      mov b, [bp + 7] ; $s1             
0874   09A3 74            mov d, b
0875   09A4 32            mov bl, [d]
0876   09A5 A7 00         mov bh, 0
0877   09A7             ; START RELATIONAL
0878   09A7 D7            push a
0879   09A8 11            mov a, b
0880   09A9 2C 05 00      mov b, [bp + 5] ; $s2             
0881   09AC 74            mov d, b
0882   09AD 32            mov bl, [d]
0883   09AE A7 00         mov bh, 0
0884   09B0 B0            cmp a, b
0885   09B1 FD 71         seq ; ==
0886   09B3 E4            pop a
0887   09B4             ; END RELATIONAL
0888   09B4 FD A7         sand a, b ; &&
0889   09B6 E4            pop a
0890   09B7 C0 00 00      cmp b, 0
0891   09BA C6 DC 09      je _while9_exit
0892   09BD             _while9_block:
0893   09BD             ;; s1++; 
0894   09BD 2C 07 00      mov b, [bp + 7] ; $s1             
0895   09C0 FD 79         mov g, b
0896   09C2 FD 77         inc b
0897   09C4 FA 07 00      lea d, [bp + 7] ; $s1
0898   09C7 FD 43         mov [d], b
0899   09C9 FD 27         mov b, g
0900   09CB             ;; s2++; 
0901   09CB 2C 05 00      mov b, [bp + 5] ; $s2             
0902   09CE FD 79         mov g, b
0903   09D0 FD 77         inc b
0904   09D2 FA 05 00      lea d, [bp + 5] ; $s2
0905   09D5 FD 43         mov [d], b
0906   09D7 FD 27         mov b, g
0907   09D9 0A 97 09      jmp _while9_cond
0908   09DC             _while9_exit:
0909   09DC             ;; return *s1 - *s2; 
0910   09DC 2C 07 00      mov b, [bp + 7] ; $s1             
0911   09DF 74            mov d, b
0912   09E0 32            mov bl, [d]
0913   09E1 A7 00         mov bh, 0
0914   09E3             ; START TERMS
0915   09E3 D7            push a
0916   09E4 11            mov a, b
0917   09E5 2C 05 00      mov b, [bp + 5] ; $s2             
0918   09E8 74            mov d, b
0919   09E9 32            mov bl, [d]
0920   09EA A7 00         mov bh, 0
0921   09EC 60            sub a, b
0922   09ED 27            mov b, a
0923   09EE E4            pop a
0924   09EF             ; END TERMS
0925   09EF F9            leave
0926   09F0 09            ret
0927   09F1             
0928   09F1             strcat:
0929   09F1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0930   09F4             ; $dest_len 
0931   09F4             ; $i 
0932   09F4 52 04 00      sub sp, 4
0933   09F7             ;; dest_len = strlen(dest); 
0934   09F7 FA FF FF      lea d, [bp + -1] ; $dest_len
0935   09FA DA            push d
0936   09FB 2C 07 00      mov b, [bp + 7] ; $dest             
0937   09FE FD AB         swp b
0938   0A00 D8            push b
0939   0A01 07 90 0A      call strlen
0940   0A04 51 02 00      add sp, 2
0941   0A07 E7            pop d
0942   0A08 FD 43         mov [d], b
0943   0A0A             ;; for (i = 0; src[i] != 0; i=i+1) { 
0944   0A0A             _for10_init:
0945   0A0A FA FD FF      lea d, [bp + -3] ; $i         
0946   0A0D 26 00 00      mov b, $0        
0947   0A10 FD 43         mov [d], b
0948   0A12             _for10_cond:
0949   0A12 FA 05 00      lea d, [bp + 5] ; $src
0950   0A15 FD 2A         mov d, [d]
0951   0A17 D7            push a         
0952   0A18 2C FD FF      mov b, [bp + -3] ; $i                     
0953   0A1B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0954   0A1F E4            pop a
0955   0A20 32            mov bl, [d]
0956   0A21 A7 00         mov bh, 0
0957   0A23             ; START RELATIONAL
0958   0A23 D7            push a
0959   0A24 11            mov a, b
0960   0A25 26 00 00      mov b, $0
0961   0A28 B0            cmp a, b
0962   0A29 FD 72         sneq ; !=
0963   0A2B E4            pop a
0964   0A2C             ; END RELATIONAL
0965   0A2C C0 00 00      cmp b, 0
0966   0A2F C6 70 0A      je _for10_exit
0967   0A32             _for10_block:
0968   0A32             ;; dest[dest_len + i] = src[i]; 
0969   0A32 FA 07 00      lea d, [bp + 7] ; $dest
0970   0A35 FD 2A         mov d, [d]
0971   0A37 D7            push a         
0972   0A38 2C FF FF      mov b, [bp + -1] ; $dest_len             
0973   0A3B             ; START TERMS
0974   0A3B D7            push a
0975   0A3C 11            mov a, b
0976   0A3D 2C FD FF      mov b, [bp + -3] ; $i             
0977   0A40 54            add a, b
0978   0A41 27            mov b, a
0979   0A42 E4            pop a
0980   0A43             ; END TERMS        
0981   0A43 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0982   0A47 E4            pop a
0983   0A48 DA            push d
0984   0A49 FA 05 00      lea d, [bp + 5] ; $src
0985   0A4C FD 2A         mov d, [d]
0986   0A4E D7            push a         
0987   0A4F 2C FD FF      mov b, [bp + -3] ; $i                     
0988   0A52 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0989   0A56 E4            pop a
0990   0A57 32            mov bl, [d]
0991   0A58 A7 00         mov bh, 0
0992   0A5A E7            pop d
0993   0A5B FD 3E         mov [d], bl
0994   0A5D             _for10_update:
0995   0A5D FA FD FF      lea d, [bp + -3] ; $i         
0996   0A60 2C FD FF      mov b, [bp + -3] ; $i             
0997   0A63             ; START TERMS
0998   0A63 D7            push a
0999   0A64 11            mov a, b
1000   0A65 26 01 00      mov b, $1
1001   0A68 54            add a, b
1002   0A69 27            mov b, a
1003   0A6A E4            pop a
1004   0A6B             ; END TERMS        
1005   0A6B FD 43         mov [d], b
1006   0A6D 0A 12 0A      jmp _for10_cond
1007   0A70             _for10_exit:
1008   0A70             ;; dest[dest_len + i] = 0; 
1009   0A70 FA 07 00      lea d, [bp + 7] ; $dest
1010   0A73 FD 2A         mov d, [d]
1011   0A75 D7            push a         
1012   0A76 2C FF FF      mov b, [bp + -1] ; $dest_len             
1013   0A79             ; START TERMS
1014   0A79 D7            push a
1015   0A7A 11            mov a, b
1016   0A7B 2C FD FF      mov b, [bp + -3] ; $i             
1017   0A7E 54            add a, b
1018   0A7F 27            mov b, a
1019   0A80 E4            pop a
1020   0A81             ; END TERMS        
1021   0A81 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1022   0A85 E4            pop a         
1023   0A86 26 00 00      mov b, $0        
1024   0A89 FD 3E         mov [d], bl
1025   0A8B             ;; return dest; 
1026   0A8B 2C 07 00      mov b, [bp + 7] ; $dest             
1027   0A8E F9            leave
1028   0A8F 09            ret
1029   0A90             
1030   0A90             strlen:
1031   0A90 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1032   0A93             ; $length 
1033   0A93 52 02 00      sub sp, 2
1034   0A96             ;; length = 0; 
1035   0A96 FA FF FF      lea d, [bp + -1] ; $length         
1036   0A99 26 00 00      mov b, $0        
1037   0A9C FD 43         mov [d], b
1038   0A9E             ;; while (str[length] != 0) { 
1039   0A9E             _while11_cond:
1040   0A9E FA 05 00      lea d, [bp + 5] ; $str
1041   0AA1 FD 2A         mov d, [d]
1042   0AA3 D7            push a         
1043   0AA4 2C FF FF      mov b, [bp + -1] ; $length                     
1044   0AA7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1045   0AAB E4            pop a
1046   0AAC 32            mov bl, [d]
1047   0AAD A7 00         mov bh, 0
1048   0AAF             ; START RELATIONAL
1049   0AAF D7            push a
1050   0AB0 11            mov a, b
1051   0AB1 26 00 00      mov b, $0
1052   0AB4 B0            cmp a, b
1053   0AB5 FD 72         sneq ; !=
1054   0AB7 E4            pop a
1055   0AB8             ; END RELATIONAL
1056   0AB8 C0 00 00      cmp b, 0
1057   0ABB C6 CF 0A      je _while11_exit
1058   0ABE             _while11_block:
1059   0ABE             ;; length++; 
1060   0ABE 2C FF FF      mov b, [bp + -1] ; $length             
1061   0AC1 FD 79         mov g, b
1062   0AC3 FD 77         inc b
1063   0AC5 FA FF FF      lea d, [bp + -1] ; $length
1064   0AC8 FD 43         mov [d], b
1065   0ACA FD 27         mov b, g
1066   0ACC 0A 9E 0A      jmp _while11_cond
1067   0ACF             _while11_exit:
1068   0ACF             ;; return length; 
1069   0ACF 2C FF FF      mov b, [bp + -1] ; $length             
1070   0AD2 F9            leave
1071   0AD3 09            ret
1072   0AD4             
1073   0AD4             va_arg:
1074   0AD4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1075   0AD7             ; $val 
1076   0AD7 52 02 00      sub sp, 2
1077   0ADA             ;; if(size == 1){ 
1078   0ADA             _if12_cond:
1079   0ADA 2C 05 00      mov b, [bp + 5] ; $size             
1080   0ADD             ; START RELATIONAL
1081   0ADD D7            push a
1082   0ADE 11            mov a, b
1083   0ADF 26 01 00      mov b, $1
1084   0AE2 B0            cmp a, b
1085   0AE3 FD 71         seq ; ==
1086   0AE5 E4            pop a
1087   0AE6             ; END RELATIONAL
1088   0AE6 C0 00 00      cmp b, 0
1089   0AE9 C6 05 0B      je _if12_else
1090   0AEC             _if12_true:
1091   0AEC             ;; val = *(char*)arg->p; 
1092   0AEC FA FF FF      lea d, [bp + -1] ; $val
1093   0AEF DA            push d
1094   0AF0 FA 07 00      lea d, [bp + 7] ; $arg
1095   0AF3 FD 2A         mov d, [d]
1096   0AF5 58 00 00      add d, 0
1097   0AF8 FD 14         clb
1098   0AFA 2A            mov b, [d]
1099   0AFB 74            mov d, b
1100   0AFC 32            mov bl, [d]
1101   0AFD A7 00         mov bh, 0
1102   0AFF E7            pop d
1103   0B00 FD 43         mov [d], b
1104   0B02 0A 3A 0B      jmp _if12_exit
1105   0B05             _if12_else:
1106   0B05             ;; if(size == 2){ 
1107   0B05             _if13_cond:
1108   0B05 2C 05 00      mov b, [bp + 5] ; $size             
1109   0B08             ; START RELATIONAL
1110   0B08 D7            push a
1111   0B09 11            mov a, b
1112   0B0A 26 02 00      mov b, $2
1113   0B0D B0            cmp a, b
1114   0B0E FD 71         seq ; ==
1115   0B10 E4            pop a
1116   0B11             ; END RELATIONAL
1117   0B11 C0 00 00      cmp b, 0
1118   0B14 C6 2E 0B      je _if13_else
1119   0B17             _if13_true:
1120   0B17             ;; val = *(int*)arg->p; 
1121   0B17 FA FF FF      lea d, [bp + -1] ; $val
1122   0B1A DA            push d
1123   0B1B FA 07 00      lea d, [bp + 7] ; $arg
1124   0B1E FD 2A         mov d, [d]
1125   0B20 58 00 00      add d, 0
1126   0B23 FD 14         clb
1127   0B25 2A            mov b, [d]
1128   0B26 74            mov d, b
1129   0B27 2A            mov b, [d]
1130   0B28 E7            pop d
1131   0B29 FD 43         mov [d], b
1132   0B2B 0A 3A 0B      jmp _if13_exit
1133   0B2E             _if13_else:
1134   0B2E             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
1135   0B2E 26 72 2C      mov b, __s7 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
1136   0B31 FD AB         swp b
1137   0B33 D8            push b
1138   0B34 07 23 11      call print
1139   0B37 51 02 00      add sp, 2
1140   0B3A             _if13_exit:
1141   0B3A             _if12_exit:
1142   0B3A             ;; arg->p = arg->p + size; 
1143   0B3A FA 07 00      lea d, [bp + 7] ; $arg
1144   0B3D FD 2A         mov d, [d]
1145   0B3F 58 00 00      add d, 0
1146   0B42 FD 14         clb
1147   0B44 DA            push d
1148   0B45 FA 07 00      lea d, [bp + 7] ; $arg
1149   0B48 FD 2A         mov d, [d]
1150   0B4A 58 00 00      add d, 0
1151   0B4D FD 14         clb
1152   0B4F 2A            mov b, [d]
1153   0B50             ; START TERMS
1154   0B50 D7            push a
1155   0B51 11            mov a, b
1156   0B52 2C 05 00      mov b, [bp + 5] ; $size             
1157   0B55 54            add a, b
1158   0B56 27            mov b, a
1159   0B57 E4            pop a
1160   0B58             ; END TERMS
1161   0B58 E7            pop d
1162   0B59 FD 43         mov [d], b
1163   0B5B             ;; return val; 
1164   0B5B 2C FF FF      mov b, [bp + -1] ; $val             
1165   0B5E F9            leave
1166   0B5F 09            ret
1167   0B60             
1168   0B60             printf:
1169   0B60 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1170   0B63             ; $p 
1171   0B63             ; $fp 
1172   0B63             ; $i 
1173   0B63 52 06 00      sub sp, 6
1174   0B66             ;; fp = format; 
1175   0B66 FA FD FF      lea d, [bp + -3] ; $fp         
1176   0B69 2C 05 00      mov b, [bp + 5] ; $format                     
1177   0B6C FD 43         mov [d], b
1178   0B6E             ;; p = &format; 
1179   0B6E FA FF FF      lea d, [bp + -1] ; $p
1180   0B71 DA            push d
1181   0B72 FA 05 00      lea d, [bp + 5] ; $format
1182   0B75 2D            mov b, d
1183   0B76 E7            pop d
1184   0B77 FD 43         mov [d], b
1185   0B79             ;; for(;;){ 
1186   0B79             _for14_init:
1187   0B79             _for14_cond:
1188   0B79             _for14_block:
1189   0B79             ;; if(!*fp) break; 
1190   0B79             _if15_cond:
1191   0B79 2C FD FF      mov b, [bp + -3] ; $fp             
1192   0B7C 74            mov d, b
1193   0B7D 32            mov bl, [d]
1194   0B7E A7 00         mov bh, 0
1195   0B80 C0 00 00      cmp b, 0
1196   0B83 FD 71         seq ; !
1197   0B85 C0 00 00      cmp b, 0
1198   0B88 C6 91 0B      je _if15_exit
1199   0B8B             _if15_true:
1200   0B8B             ;; break; 
1201   0B8B 0A C1 0C      jmp _for14_exit ; for break
1202   0B8E 0A 91 0B      jmp _if15_exit
1203   0B91             _if15_exit:
1204   0B91             ;; if(*fp == '%'){ 
1205   0B91             _if16_cond:
1206   0B91 2C FD FF      mov b, [bp + -3] ; $fp             
1207   0B94 74            mov d, b
1208   0B95 32            mov bl, [d]
1209   0B96 A7 00         mov bh, 0
1210   0B98             ; START RELATIONAL
1211   0B98 D7            push a
1212   0B99 11            mov a, b
1213   0B9A 26 25 00      mov b, $25
1214   0B9D B0            cmp a, b
1215   0B9E FD 71         seq ; ==
1216   0BA0 E4            pop a
1217   0BA1             ; END RELATIONAL
1218   0BA1 C0 00 00      cmp b, 0
1219   0BA4 C6 A2 0C      je _if16_else
1220   0BA7             _if16_true:
1221   0BA7             ;; fp++; 
1222   0BA7 2C FD FF      mov b, [bp + -3] ; $fp             
1223   0BAA FD 79         mov g, b
1224   0BAC FD 77         inc b
1225   0BAE FA FD FF      lea d, [bp + -3] ; $fp
1226   0BB1 FD 43         mov [d], b
1227   0BB3 FD 27         mov b, g
1228   0BB5             ;; switch(*fp){ 
1229   0BB5             _switch17_expr:
1230   0BB5 2C FD FF      mov b, [bp + -3] ; $fp             
1231   0BB8 74            mov d, b
1232   0BB9 32            mov bl, [d]
1233   0BBA A7 00         mov bh, 0
1234   0BBC             _switch17_comparisons:
1235   0BBC C1 64         cmp bl, $64
1236   0BBE C6 E0 0B      je _switch17_case0
1237   0BC1 C1 69         cmp bl, $69
1238   0BC3 C6 E0 0B      je _switch17_case1
1239   0BC6 C1 75         cmp bl, $75
1240   0BC8 C6 01 0C      je _switch17_case2
1241   0BCB C1 78         cmp bl, $78
1242   0BCD C6 22 0C      je _switch17_case3
1243   0BD0 C1 63         cmp bl, $63
1244   0BD2 C6 43 0C      je _switch17_case4
1245   0BD5 C1 73         cmp bl, $73
1246   0BD7 C6 64 0C      je _switch17_case5
1247   0BDA 0A 85 0C      jmp _switch17_default
1248   0BDD 0A 91 0C      jmp _switch17_exit
1249   0BE0             _switch17_case0:
1250   0BE0             _switch17_case1:
1251   0BE0             ;; p = p - 2; 
1252   0BE0 FA FF FF      lea d, [bp + -1] ; $p         
1253   0BE3 2C FF FF      mov b, [bp + -1] ; $p             
1254   0BE6             ; START TERMS
1255   0BE6 D7            push a
1256   0BE7 11            mov a, b
1257   0BE8 26 02 00      mov b, $2
1258   0BEB 60            sub a, b
1259   0BEC 27            mov b, a
1260   0BED E4            pop a
1261   0BEE             ; END TERMS        
1262   0BEE FD 43         mov [d], b
1263   0BF0             ;; prints(*(int*)p); 
1264   0BF0 2C FF FF      mov b, [bp + -1] ; $p             
1265   0BF3 74            mov d, b
1266   0BF4 2A            mov b, [d]
1267   0BF5 FD AB         swp b
1268   0BF7 D8            push b
1269   0BF8 07 27 0F      call prints
1270   0BFB 51 02 00      add sp, 2
1271   0BFE             ;; break; 
1272   0BFE 0A 91 0C      jmp _switch17_exit ; case break
1273   0C01             _switch17_case2:
1274   0C01             ;; p = p - 2; 
1275   0C01 FA FF FF      lea d, [bp + -1] ; $p         
1276   0C04 2C FF FF      mov b, [bp + -1] ; $p             
1277   0C07             ; START TERMS
1278   0C07 D7            push a
1279   0C08 11            mov a, b
1280   0C09 26 02 00      mov b, $2
1281   0C0C 60            sub a, b
1282   0C0D 27            mov b, a
1283   0C0E E4            pop a
1284   0C0F             ; END TERMS        
1285   0C0F FD 43         mov [d], b
1286   0C11             ;; printu(*(unsigned int*)p); 
1287   0C11 2C FF FF      mov b, [bp + -1] ; $p             
1288   0C14 74            mov d, b
1289   0C15 2A            mov b, [d]
1290   0C16 FD AB         swp b
1291   0C18 D8            push b
1292   0C19 07 07 10      call printu
1293   0C1C 51 02 00      add sp, 2
1294   0C1F             ;; break; 
1295   0C1F 0A 91 0C      jmp _switch17_exit ; case break
1296   0C22             _switch17_case3:
1297   0C22             ;; p = p - 2; 
1298   0C22 FA FF FF      lea d, [bp + -1] ; $p         
1299   0C25 2C FF FF      mov b, [bp + -1] ; $p             
1300   0C28             ; START TERMS
1301   0C28 D7            push a
1302   0C29 11            mov a, b
1303   0C2A 26 02 00      mov b, $2
1304   0C2D 60            sub a, b
1305   0C2E 27            mov b, a
1306   0C2F E4            pop a
1307   0C30             ; END TERMS        
1308   0C30 FD 43         mov [d], b
1309   0C32             ;; printx16(*(unsigned int*)p); 
1310   0C32 2C FF FF      mov b, [bp + -1] ; $p             
1311   0C35 74            mov d, b
1312   0C36 2A            mov b, [d]
1313   0C37 FD AB         swp b
1314   0C39 D8            push b
1315   0C3A 07 C3 0C      call printx16
1316   0C3D 51 02 00      add sp, 2
1317   0C40             ;; break; 
1318   0C40 0A 91 0C      jmp _switch17_exit ; case break
1319   0C43             _switch17_case4:
1320   0C43             ;; p = p - 2; 
1321   0C43 FA FF FF      lea d, [bp + -1] ; $p         
1322   0C46 2C FF FF      mov b, [bp + -1] ; $p             
1323   0C49             ; START TERMS
1324   0C49 D7            push a
1325   0C4A 11            mov a, b
1326   0C4B 26 02 00      mov b, $2
1327   0C4E 60            sub a, b
1328   0C4F 27            mov b, a
1329   0C50 E4            pop a
1330   0C51             ; END TERMS        
1331   0C51 FD 43         mov [d], b
1332   0C53             ;; putchar(*(char*)p); 
1333   0C53 2C FF FF      mov b, [bp + -1] ; $p             
1334   0C56 74            mov d, b
1335   0C57 32            mov bl, [d]
1336   0C58 A7 00         mov bh, 0
1337   0C5A DD            push bl
1338   0C5B 07 DE 10      call putchar
1339   0C5E 51 01 00      add sp, 1
1340   0C61             ;; break; 
1341   0C61 0A 91 0C      jmp _switch17_exit ; case break
1342   0C64             _switch17_case5:
1343   0C64             ;; p = p - 2; 
1344   0C64 FA FF FF      lea d, [bp + -1] ; $p         
1345   0C67 2C FF FF      mov b, [bp + -1] ; $p             
1346   0C6A             ; START TERMS
1347   0C6A D7            push a
1348   0C6B 11            mov a, b
1349   0C6C 26 02 00      mov b, $2
1350   0C6F 60            sub a, b
1351   0C70 27            mov b, a
1352   0C71 E4            pop a
1353   0C72             ; END TERMS        
1354   0C72 FD 43         mov [d], b
1355   0C74             ;; print(*(char**)p); 
1356   0C74 2C FF FF      mov b, [bp + -1] ; $p             
1357   0C77 74            mov d, b
1358   0C78 2A            mov b, [d]
1359   0C79 FD AB         swp b
1360   0C7B D8            push b
1361   0C7C 07 23 11      call print
1362   0C7F 51 02 00      add sp, 2
1363   0C82             ;; break; 
1364   0C82 0A 91 0C      jmp _switch17_exit ; case break
1365   0C85             _switch17_default:
1366   0C85             ;; print("Error: Unknown argument type.\n"); 
1367   0C85 26 B6 2C      mov b, __s8 ; "Error: Unknown argument type.\n"
1368   0C88 FD AB         swp b
1369   0C8A D8            push b
1370   0C8B 07 23 11      call print
1371   0C8E 51 02 00      add sp, 2
1372   0C91             _switch17_exit:
1373   0C91             ;; fp++; 
1374   0C91 2C FD FF      mov b, [bp + -3] ; $fp             
1375   0C94 FD 79         mov g, b
1376   0C96 FD 77         inc b
1377   0C98 FA FD FF      lea d, [bp + -3] ; $fp
1378   0C9B FD 43         mov [d], b
1379   0C9D FD 27         mov b, g
1380   0C9F 0A BE 0C      jmp _if16_exit
1381   0CA2             _if16_else:
1382   0CA2             ;; putchar(*fp); 
1383   0CA2 2C FD FF      mov b, [bp + -3] ; $fp             
1384   0CA5 74            mov d, b
1385   0CA6 32            mov bl, [d]
1386   0CA7 A7 00         mov bh, 0
1387   0CA9 DD            push bl
1388   0CAA 07 DE 10      call putchar
1389   0CAD 51 01 00      add sp, 1
1390   0CB0             ;; fp++; 
1391   0CB0 2C FD FF      mov b, [bp + -3] ; $fp             
1392   0CB3 FD 79         mov g, b
1393   0CB5 FD 77         inc b
1394   0CB7 FA FD FF      lea d, [bp + -3] ; $fp
1395   0CBA FD 43         mov [d], b
1396   0CBC FD 27         mov b, g
1397   0CBE             _if16_exit:
1398   0CBE             _for14_update:
1399   0CBE 0A 79 0B      jmp _for14_cond
1400   0CC1             _for14_exit:
1401   0CC1 F9            leave
1402   0CC2 09            ret
1403   0CC3             
1404   0CC3             printx16:
1405   0CC3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1406   0CC6             
1407   0CC6             ; --- BEGIN INLINE ASM BLOCK
1408   0CC6 2C 05 00      mov b, [bp + 5] ; $hex             
1409   0CC9 07 6B 14      call print_u16x
1410   0CCC             ; --- END INLINE ASM BLOCK
1411   0CCC             
1412   0CCC F9            leave
1413   0CCD 09            ret
1414   0CCE             
1415   0CCE             printx8:
1416   0CCE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1417   0CD1             
1418   0CD1             ; --- BEGIN INLINE ASM BLOCK
1419   0CD1 FA 05 00      lea d, [bp + 5] ; $hex
1420   0CD4 32            mov bl, [d]
1421   0CD5 07 AF 14      call print_u8x
1422   0CD8             ; --- END INLINE ASM BLOCK
1423   0CD8             
1424   0CD8 F9            leave
1425   0CD9 09            ret
1426   0CDA             
1427   0CDA             hex_to_int:
1428   0CDA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1429   0CDD             ; $value 
1430   0CDD 10 00 00      mov a, $0
1431   0CE0 45 FF FF      mov [bp + -1], a
1432   0CE3             ; $i 
1433   0CE3             ; $hex_char 
1434   0CE3             ; $len 
1435   0CE3 52 07 00      sub sp, 7
1436   0CE6             ;; len = strlen(hex_string); 
1437   0CE6 FA FA FF      lea d, [bp + -6] ; $len
1438   0CE9 DA            push d
1439   0CEA 2C 05 00      mov b, [bp + 5] ; $hex_string             
1440   0CED FD AB         swp b
1441   0CEF D8            push b
1442   0CF0 07 90 0A      call strlen
1443   0CF3 51 02 00      add sp, 2
1444   0CF6 E7            pop d
1445   0CF7 FD 43         mov [d], b
1446   0CF9             ;; for (i = 0; i < len; i++) { 
1447   0CF9             _for18_init:
1448   0CF9 FA FD FF      lea d, [bp + -3] ; $i         
1449   0CFC 26 00 00      mov b, $0        
1450   0CFF FD 43         mov [d], b
1451   0D01             _for18_cond:
1452   0D01 2C FD FF      mov b, [bp + -3] ; $i             
1453   0D04             ; START RELATIONAL
1454   0D04 D7            push a
1455   0D05 11            mov a, b
1456   0D06 2C FA FF      mov b, [bp + -6] ; $len             
1457   0D09 B0            cmp a, b
1458   0D0A FD 73         slt ; < 
1459   0D0C E4            pop a
1460   0D0D             ; END RELATIONAL
1461   0D0D C0 00 00      cmp b, 0
1462   0D10 C6 01 0E      je _for18_exit
1463   0D13             _for18_block:
1464   0D13             ;; hex_char = hex_string[i]; 
1465   0D13 FA FC FF      lea d, [bp + -4] ; $hex_char
1466   0D16 DA            push d
1467   0D17 FA 05 00      lea d, [bp + 5] ; $hex_string
1468   0D1A FD 2A         mov d, [d]
1469   0D1C D7            push a         
1470   0D1D 2C FD FF      mov b, [bp + -3] ; $i                     
1471   0D20 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1472   0D24 E4            pop a
1473   0D25 32            mov bl, [d]
1474   0D26 A7 00         mov bh, 0
1475   0D28 E7            pop d
1476   0D29 FD 3E         mov [d], bl
1477   0D2B             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1478   0D2B             _if19_cond:
1479   0D2B 34 FC FF      mov bl, [bp + -4] ; $hex_char
1480   0D2E A7 00         mov bh, 0             
1481   0D30             ; START RELATIONAL
1482   0D30 D7            push a
1483   0D31 11            mov a, b
1484   0D32 26 61 00      mov b, $61
1485   0D35 B0            cmp a, b
1486   0D36 FD 80         sge ; >=
1487   0D38 E4            pop a
1488   0D39             ; END RELATIONAL
1489   0D39 D7            push a
1490   0D3A 11            mov a, b
1491   0D3B 34 FC FF      mov bl, [bp + -4] ; $hex_char
1492   0D3E A7 00         mov bh, 0             
1493   0D40             ; START RELATIONAL
1494   0D40 D7            push a
1495   0D41 11            mov a, b
1496   0D42 26 66 00      mov b, $66
1497   0D45 B0            cmp a, b
1498   0D46 FD 74         sle ; <=
1499   0D48 E4            pop a
1500   0D49             ; END RELATIONAL
1501   0D49 FD A7         sand a, b ; &&
1502   0D4B E4            pop a
1503   0D4C C0 00 00      cmp b, 0
1504   0D4F C6 7C 0D      je _if19_else
1505   0D52             _if19_true:
1506   0D52             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1507   0D52 FA FF FF      lea d, [bp + -1] ; $value         
1508   0D55 2C FF FF      mov b, [bp + -1] ; $value             
1509   0D58             ; START FACTORS
1510   0D58 D7            push a
1511   0D59 11            mov a, b
1512   0D5A 26 10 00      mov b, $10
1513   0D5D AC            mul a, b ; *
1514   0D5E 11            mov a, b
1515   0D5F 27            mov b, a
1516   0D60 E4            pop a
1517   0D61             ; END FACTORS
1518   0D61             ; START TERMS
1519   0D61 D7            push a
1520   0D62 11            mov a, b
1521   0D63 34 FC FF      mov bl, [bp + -4] ; $hex_char
1522   0D66 A7 00         mov bh, 0             
1523   0D68             ; START TERMS
1524   0D68 D7            push a
1525   0D69 11            mov a, b
1526   0D6A 26 61 00      mov b, $61
1527   0D6D 60            sub a, b
1528   0D6E 26 0A 00      mov b, $a
1529   0D71 54            add a, b
1530   0D72 27            mov b, a
1531   0D73 E4            pop a
1532   0D74             ; END TERMS
1533   0D74 54            add a, b
1534   0D75 27            mov b, a
1535   0D76 E4            pop a
1536   0D77             ; END TERMS        
1537   0D77 FD 43         mov [d], b
1538   0D79 0A F0 0D      jmp _if19_exit
1539   0D7C             _if19_else:
1540   0D7C             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1541   0D7C             _if20_cond:
1542   0D7C 34 FC FF      mov bl, [bp + -4] ; $hex_char
1543   0D7F A7 00         mov bh, 0             
1544   0D81             ; START RELATIONAL
1545   0D81 D7            push a
1546   0D82 11            mov a, b
1547   0D83 26 41 00      mov b, $41
1548   0D86 B0            cmp a, b
1549   0D87 FD 80         sge ; >=
1550   0D89 E4            pop a
1551   0D8A             ; END RELATIONAL
1552   0D8A D7            push a
1553   0D8B 11            mov a, b
1554   0D8C 34 FC FF      mov bl, [bp + -4] ; $hex_char
1555   0D8F A7 00         mov bh, 0             
1556   0D91             ; START RELATIONAL
1557   0D91 D7            push a
1558   0D92 11            mov a, b
1559   0D93 26 46 00      mov b, $46
1560   0D96 B0            cmp a, b
1561   0D97 FD 74         sle ; <=
1562   0D99 E4            pop a
1563   0D9A             ; END RELATIONAL
1564   0D9A FD A7         sand a, b ; &&
1565   0D9C E4            pop a
1566   0D9D C0 00 00      cmp b, 0
1567   0DA0 C6 CD 0D      je _if20_else
1568   0DA3             _if20_true:
1569   0DA3             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1570   0DA3 FA FF FF      lea d, [bp + -1] ; $value         
1571   0DA6 2C FF FF      mov b, [bp + -1] ; $value             
1572   0DA9             ; START FACTORS
1573   0DA9 D7            push a
1574   0DAA 11            mov a, b
1575   0DAB 26 10 00      mov b, $10
1576   0DAE AC            mul a, b ; *
1577   0DAF 11            mov a, b
1578   0DB0 27            mov b, a
1579   0DB1 E4            pop a
1580   0DB2             ; END FACTORS
1581   0DB2             ; START TERMS
1582   0DB2 D7            push a
1583   0DB3 11            mov a, b
1584   0DB4 34 FC FF      mov bl, [bp + -4] ; $hex_char
1585   0DB7 A7 00         mov bh, 0             
1586   0DB9             ; START TERMS
1587   0DB9 D7            push a
1588   0DBA 11            mov a, b
1589   0DBB 26 41 00      mov b, $41
1590   0DBE 60            sub a, b
1591   0DBF 26 0A 00      mov b, $a
1592   0DC2 54            add a, b
1593   0DC3 27            mov b, a
1594   0DC4 E4            pop a
1595   0DC5             ; END TERMS
1596   0DC5 54            add a, b
1597   0DC6 27            mov b, a
1598   0DC7 E4            pop a
1599   0DC8             ; END TERMS        
1600   0DC8 FD 43         mov [d], b
1601   0DCA 0A F0 0D      jmp _if20_exit
1602   0DCD             _if20_else:
1603   0DCD             ;; value = (value * 16) + (hex_char - '0'); 
1604   0DCD FA FF FF      lea d, [bp + -1] ; $value         
1605   0DD0 2C FF FF      mov b, [bp + -1] ; $value             
1606   0DD3             ; START FACTORS
1607   0DD3 D7            push a
1608   0DD4 11            mov a, b
1609   0DD5 26 10 00      mov b, $10
1610   0DD8 AC            mul a, b ; *
1611   0DD9 11            mov a, b
1612   0DDA 27            mov b, a
1613   0DDB E4            pop a
1614   0DDC             ; END FACTORS
1615   0DDC             ; START TERMS
1616   0DDC D7            push a
1617   0DDD 11            mov a, b
1618   0DDE 34 FC FF      mov bl, [bp + -4] ; $hex_char
1619   0DE1 A7 00         mov bh, 0             
1620   0DE3             ; START TERMS
1621   0DE3 D7            push a
1622   0DE4 11            mov a, b
1623   0DE5 26 30 00      mov b, $30
1624   0DE8 60            sub a, b
1625   0DE9 27            mov b, a
1626   0DEA E4            pop a
1627   0DEB             ; END TERMS
1628   0DEB 54            add a, b
1629   0DEC 27            mov b, a
1630   0DED E4            pop a
1631   0DEE             ; END TERMS        
1632   0DEE FD 43         mov [d], b
1633   0DF0             _if20_exit:
1634   0DF0             _if19_exit:
1635   0DF0             _for18_update:
1636   0DF0 2C FD FF      mov b, [bp + -3] ; $i             
1637   0DF3 FD 79         mov g, b
1638   0DF5 FD 77         inc b
1639   0DF7 FA FD FF      lea d, [bp + -3] ; $i
1640   0DFA FD 43         mov [d], b
1641   0DFC FD 27         mov b, g
1642   0DFE 0A 01 0D      jmp _for18_cond
1643   0E01             _for18_exit:
1644   0E01             ;; return value; 
1645   0E01 2C FF FF      mov b, [bp + -1] ; $value             
1646   0E04 F9            leave
1647   0E05 09            ret
1648   0E06             
1649   0E06             atoi:
1650   0E06 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1651   0E09             ; $result 
1652   0E09 10 00 00      mov a, $0
1653   0E0C 45 FF FF      mov [bp + -1], a
1654   0E0F             ; $sign 
1655   0E0F 10 01 00      mov a, $1
1656   0E12 45 FD FF      mov [bp + -3], a
1657   0E15 52 04 00      sub sp, 4
1658   0E18             ;; while (*str == ' ') str++; 
1659   0E18             _while21_cond:
1660   0E18 2C 05 00      mov b, [bp + 5] ; $str             
1661   0E1B 74            mov d, b
1662   0E1C 32            mov bl, [d]
1663   0E1D A7 00         mov bh, 0
1664   0E1F             ; START RELATIONAL
1665   0E1F D7            push a
1666   0E20 11            mov a, b
1667   0E21 26 20 00      mov b, $20
1668   0E24 B0            cmp a, b
1669   0E25 FD 71         seq ; ==
1670   0E27 E4            pop a
1671   0E28             ; END RELATIONAL
1672   0E28 C0 00 00      cmp b, 0
1673   0E2B C6 3F 0E      je _while21_exit
1674   0E2E             _while21_block:
1675   0E2E             ;; str++; 
1676   0E2E 2C 05 00      mov b, [bp + 5] ; $str             
1677   0E31 FD 79         mov g, b
1678   0E33 FD 77         inc b
1679   0E35 FA 05 00      lea d, [bp + 5] ; $str
1680   0E38 FD 43         mov [d], b
1681   0E3A FD 27         mov b, g
1682   0E3C 0A 18 0E      jmp _while21_cond
1683   0E3F             _while21_exit:
1684   0E3F             ;; if (*str == '-' || *str == '+') { 
1685   0E3F             _if22_cond:
1686   0E3F 2C 05 00      mov b, [bp + 5] ; $str             
1687   0E42 74            mov d, b
1688   0E43 32            mov bl, [d]
1689   0E44 A7 00         mov bh, 0
1690   0E46             ; START RELATIONAL
1691   0E46 D7            push a
1692   0E47 11            mov a, b
1693   0E48 26 2D 00      mov b, $2d
1694   0E4B B0            cmp a, b
1695   0E4C FD 71         seq ; ==
1696   0E4E E4            pop a
1697   0E4F             ; END RELATIONAL
1698   0E4F D7            push a
1699   0E50 11            mov a, b
1700   0E51 2C 05 00      mov b, [bp + 5] ; $str             
1701   0E54 74            mov d, b
1702   0E55 32            mov bl, [d]
1703   0E56 A7 00         mov bh, 0
1704   0E58             ; START RELATIONAL
1705   0E58 D7            push a
1706   0E59 11            mov a, b
1707   0E5A 26 2B 00      mov b, $2b
1708   0E5D B0            cmp a, b
1709   0E5E FD 71         seq ; ==
1710   0E60 E4            pop a
1711   0E61             ; END RELATIONAL
1712   0E61 FD A8         sor a, b ; ||
1713   0E63 E4            pop a
1714   0E64 C0 00 00      cmp b, 0
1715   0E67 C6 9E 0E      je _if22_exit
1716   0E6A             _if22_true:
1717   0E6A             ;; if (*str == '-') sign = -1; 
1718   0E6A             _if23_cond:
1719   0E6A 2C 05 00      mov b, [bp + 5] ; $str             
1720   0E6D 74            mov d, b
1721   0E6E 32            mov bl, [d]
1722   0E6F A7 00         mov bh, 0
1723   0E71             ; START RELATIONAL
1724   0E71 D7            push a
1725   0E72 11            mov a, b
1726   0E73 26 2D 00      mov b, $2d
1727   0E76 B0            cmp a, b
1728   0E77 FD 71         seq ; ==
1729   0E79 E4            pop a
1730   0E7A             ; END RELATIONAL
1731   0E7A C0 00 00      cmp b, 0
1732   0E7D C6 8D 0E      je _if23_exit
1733   0E80             _if23_true:
1734   0E80             ;; sign = -1; 
1735   0E80 FA FD FF      lea d, [bp + -3] ; $sign         
1736   0E83 26 01 00      mov b, $1
1737   0E86 FD 97         neg b        
1738   0E88 FD 43         mov [d], b
1739   0E8A 0A 8D 0E      jmp _if23_exit
1740   0E8D             _if23_exit:
1741   0E8D             ;; str++; 
1742   0E8D 2C 05 00      mov b, [bp + 5] ; $str             
1743   0E90 FD 79         mov g, b
1744   0E92 FD 77         inc b
1745   0E94 FA 05 00      lea d, [bp + 5] ; $str
1746   0E97 FD 43         mov [d], b
1747   0E99 FD 27         mov b, g
1748   0E9B 0A 9E 0E      jmp _if22_exit
1749   0E9E             _if22_exit:
1750   0E9E             ;; while (*str >= '0' && *str <= '9') { 
1751   0E9E             _while24_cond:
1752   0E9E 2C 05 00      mov b, [bp + 5] ; $str             
1753   0EA1 74            mov d, b
1754   0EA2 32            mov bl, [d]
1755   0EA3 A7 00         mov bh, 0
1756   0EA5             ; START RELATIONAL
1757   0EA5 D7            push a
1758   0EA6 11            mov a, b
1759   0EA7 26 30 00      mov b, $30
1760   0EAA B0            cmp a, b
1761   0EAB FD 80         sge ; >=
1762   0EAD E4            pop a
1763   0EAE             ; END RELATIONAL
1764   0EAE D7            push a
1765   0EAF 11            mov a, b
1766   0EB0 2C 05 00      mov b, [bp + 5] ; $str             
1767   0EB3 74            mov d, b
1768   0EB4 32            mov bl, [d]
1769   0EB5 A7 00         mov bh, 0
1770   0EB7             ; START RELATIONAL
1771   0EB7 D7            push a
1772   0EB8 11            mov a, b
1773   0EB9 26 39 00      mov b, $39
1774   0EBC B0            cmp a, b
1775   0EBD FD 74         sle ; <=
1776   0EBF E4            pop a
1777   0EC0             ; END RELATIONAL
1778   0EC0 FD A7         sand a, b ; &&
1779   0EC2 E4            pop a
1780   0EC3 C0 00 00      cmp b, 0
1781   0EC6 C6 01 0F      je _while24_exit
1782   0EC9             _while24_block:
1783   0EC9             ;; result = result * 10 + (*str - '0'); 
1784   0EC9 FA FF FF      lea d, [bp + -1] ; $result
1785   0ECC DA            push d
1786   0ECD 2C FF FF      mov b, [bp + -1] ; $result             
1787   0ED0             ; START FACTORS
1788   0ED0 D7            push a
1789   0ED1 11            mov a, b
1790   0ED2 26 0A 00      mov b, $a
1791   0ED5 AC            mul a, b ; *
1792   0ED6 11            mov a, b
1793   0ED7 27            mov b, a
1794   0ED8 E4            pop a
1795   0ED9             ; END FACTORS
1796   0ED9             ; START TERMS
1797   0ED9 D7            push a
1798   0EDA 11            mov a, b
1799   0EDB 2C 05 00      mov b, [bp + 5] ; $str             
1800   0EDE 74            mov d, b
1801   0EDF 32            mov bl, [d]
1802   0EE0 A7 00         mov bh, 0
1803   0EE2             ; START TERMS
1804   0EE2 D7            push a
1805   0EE3 11            mov a, b
1806   0EE4 26 30 00      mov b, $30
1807   0EE7 60            sub a, b
1808   0EE8 27            mov b, a
1809   0EE9 E4            pop a
1810   0EEA             ; END TERMS
1811   0EEA 54            add a, b
1812   0EEB 27            mov b, a
1813   0EEC E4            pop a
1814   0EED             ; END TERMS
1815   0EED E7            pop d
1816   0EEE FD 43         mov [d], b
1817   0EF0             ;; str++; 
1818   0EF0 2C 05 00      mov b, [bp + 5] ; $str             
1819   0EF3 FD 79         mov g, b
1820   0EF5 FD 77         inc b
1821   0EF7 FA 05 00      lea d, [bp + 5] ; $str
1822   0EFA FD 43         mov [d], b
1823   0EFC FD 27         mov b, g
1824   0EFE 0A 9E 0E      jmp _while24_cond
1825   0F01             _while24_exit:
1826   0F01             ;; return sign * result; 
1827   0F01 2C FD FF      mov b, [bp + -3] ; $sign             
1828   0F04             ; START FACTORS
1829   0F04 D7            push a
1830   0F05 11            mov a, b
1831   0F06 2C FF FF      mov b, [bp + -1] ; $result             
1832   0F09 AC            mul a, b ; *
1833   0F0A 11            mov a, b
1834   0F0B 27            mov b, a
1835   0F0C E4            pop a
1836   0F0D             ; END FACTORS
1837   0F0D F9            leave
1838   0F0E 09            ret
1839   0F0F             
1840   0F0F             gets:
1841   0F0F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1842   0F12             
1843   0F12             ; --- BEGIN INLINE ASM BLOCK
1844   0F12 17 05 00      mov a, [bp + 5] ; $s             
1845   0F15 3C            mov d, a
1846   0F16 07 D0 12      call _gets
1847   0F19             ; --- END INLINE ASM BLOCK
1848   0F19             
1849   0F19             ;; return strlen(s); 
1850   0F19 2C 05 00      mov b, [bp + 5] ; $s             
1851   0F1C FD AB         swp b
1852   0F1E D8            push b
1853   0F1F 07 90 0A      call strlen
1854   0F22 51 02 00      add sp, 2
1855   0F25 F9            leave
1856   0F26 09            ret
1857   0F27             
1858   0F27             prints:
1859   0F27 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1860   0F2A             ; $digits 
1861   0F2A             ; $i 
1862   0F2A 10 00 00      mov a, $0
1863   0F2D 45 FA FF      mov [bp + -6], a
1864   0F30 52 07 00      sub sp, 7
1865   0F33             ;; if (num < 0) { 
1866   0F33             _if25_cond:
1867   0F33 2C 05 00      mov b, [bp + 5] ; $num             
1868   0F36             ; START RELATIONAL
1869   0F36 D7            push a
1870   0F37 11            mov a, b
1871   0F38 26 00 00      mov b, $0
1872   0F3B B0            cmp a, b
1873   0F3C FD 73         slt ; < 
1874   0F3E E4            pop a
1875   0F3F             ; END RELATIONAL
1876   0F3F C0 00 00      cmp b, 0
1877   0F42 C6 5C 0F      je _if25_else
1878   0F45             _if25_true:
1879   0F45             ;; putchar('-'); 
1880   0F45 26 2D 00      mov b, $2d
1881   0F48 DD            push bl
1882   0F49 07 DE 10      call putchar
1883   0F4C 51 01 00      add sp, 1
1884   0F4F             ;; num = -num; 
1885   0F4F FA 05 00      lea d, [bp + 5] ; $num         
1886   0F52 2C 05 00      mov b, [bp + 5] ; $num             
1887   0F55 FD 97         neg b        
1888   0F57 FD 43         mov [d], b
1889   0F59 0A 7D 0F      jmp _if25_exit
1890   0F5C             _if25_else:
1891   0F5C             ;; if (num == 0) { 
1892   0F5C             _if26_cond:
1893   0F5C 2C 05 00      mov b, [bp + 5] ; $num             
1894   0F5F             ; START RELATIONAL
1895   0F5F D7            push a
1896   0F60 11            mov a, b
1897   0F61 26 00 00      mov b, $0
1898   0F64 B0            cmp a, b
1899   0F65 FD 71         seq ; ==
1900   0F67 E4            pop a
1901   0F68             ; END RELATIONAL
1902   0F68 C0 00 00      cmp b, 0
1903   0F6B C6 7D 0F      je _if26_exit
1904   0F6E             _if26_true:
1905   0F6E             ;; putchar('0'); 
1906   0F6E 26 30 00      mov b, $30
1907   0F71 DD            push bl
1908   0F72 07 DE 10      call putchar
1909   0F75 51 01 00      add sp, 1
1910   0F78             ;; return; 
1911   0F78 F9            leave
1912   0F79 09            ret
1913   0F7A 0A 7D 0F      jmp _if26_exit
1914   0F7D             _if26_exit:
1915   0F7D             _if25_exit:
1916   0F7D             ;; while (num > 0) { 
1917   0F7D             _while27_cond:
1918   0F7D 2C 05 00      mov b, [bp + 5] ; $num             
1919   0F80             ; START RELATIONAL
1920   0F80 D7            push a
1921   0F81 11            mov a, b
1922   0F82 26 00 00      mov b, $0
1923   0F85 B0            cmp a, b
1924   0F86 FD 7F         sgt ; >
1925   0F88 E4            pop a
1926   0F89             ; END RELATIONAL
1927   0F89 C0 00 00      cmp b, 0
1928   0F8C C6 CF 0F      je _while27_exit
1929   0F8F             _while27_block:
1930   0F8F             ;; digits[i] = '0' + (num % 10); 
1931   0F8F FA FC FF      lea d, [bp + -4] ; $digits
1932   0F92 D7            push a         
1933   0F93 2C FA FF      mov b, [bp + -6] ; $i                     
1934   0F96 5A            add d, b
1935   0F97 E4            pop a         
1936   0F98 26 30 00      mov b, $30
1937   0F9B             ; START TERMS
1938   0F9B D7            push a
1939   0F9C 11            mov a, b
1940   0F9D 2C 05 00      mov b, [bp + 5] ; $num             
1941   0FA0             ; START FACTORS
1942   0FA0 D7            push a
1943   0FA1 11            mov a, b
1944   0FA2 26 0A 00      mov b, $a
1945   0FA5 AE            div a, b ; 
1946   0FA6 11            mov a, b
1947   0FA7 27            mov b, a
1948   0FA8 E4            pop a
1949   0FA9             ; END FACTORS
1950   0FA9 54            add a, b
1951   0FAA 27            mov b, a
1952   0FAB E4            pop a
1953   0FAC             ; END TERMS        
1954   0FAC FD 3E         mov [d], bl
1955   0FAE             ;; num = num / 10; 
1956   0FAE FA 05 00      lea d, [bp + 5] ; $num         
1957   0FB1 2C 05 00      mov b, [bp + 5] ; $num             
1958   0FB4             ; START FACTORS
1959   0FB4 D7            push a
1960   0FB5 11            mov a, b
1961   0FB6 26 0A 00      mov b, $a
1962   0FB9 AE            div a, b
1963   0FBA 27            mov b, a
1964   0FBB E4            pop a
1965   0FBC             ; END FACTORS        
1966   0FBC FD 43         mov [d], b
1967   0FBE             ;; i++; 
1968   0FBE 2C FA FF      mov b, [bp + -6] ; $i             
1969   0FC1 FD 79         mov g, b
1970   0FC3 FD 77         inc b
1971   0FC5 FA FA FF      lea d, [bp + -6] ; $i
1972   0FC8 FD 43         mov [d], b
1973   0FCA FD 27         mov b, g
1974   0FCC 0A 7D 0F      jmp _while27_cond
1975   0FCF             _while27_exit:
1976   0FCF             ;; while (i > 0) { 
1977   0FCF             _while28_cond:
1978   0FCF 2C FA FF      mov b, [bp + -6] ; $i             
1979   0FD2             ; START RELATIONAL
1980   0FD2 D7            push a
1981   0FD3 11            mov a, b
1982   0FD4 26 00 00      mov b, $0
1983   0FD7 B0            cmp a, b
1984   0FD8 FD 7F         sgt ; >
1985   0FDA E4            pop a
1986   0FDB             ; END RELATIONAL
1987   0FDB C0 00 00      cmp b, 0
1988   0FDE C6 05 10      je _while28_exit
1989   0FE1             _while28_block:
1990   0FE1             ;; i--; 
1991   0FE1 2C FA FF      mov b, [bp + -6] ; $i             
1992   0FE4 FD 79         mov g, b
1993   0FE6 FD 7D         dec b
1994   0FE8 FA FA FF      lea d, [bp + -6] ; $i
1995   0FEB FD 43         mov [d], b
1996   0FED FD 27         mov b, g
1997   0FEF             ;; putchar(digits[i]); 
1998   0FEF FA FC FF      lea d, [bp + -4] ; $digits
1999   0FF2 D7            push a         
2000   0FF3 2C FA FF      mov b, [bp + -6] ; $i                     
2001   0FF6 5A            add d, b
2002   0FF7 E4            pop a
2003   0FF8 32            mov bl, [d]
2004   0FF9 A7 00         mov bh, 0
2005   0FFB DD            push bl
2006   0FFC 07 DE 10      call putchar
2007   0FFF 51 01 00      add sp, 1
2008   1002 0A CF 0F      jmp _while28_cond
2009   1005             _while28_exit:
2010   1005 F9            leave
2011   1006 09            ret
2012   1007             
2013   1007             printu:
2014   1007 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2015   100A             ; $digits 
2016   100A             ; $i 
2017   100A 52 07 00      sub sp, 7
2018   100D             ;; i = 0; 
2019   100D FA FA FF      lea d, [bp + -6] ; $i         
2020   1010 26 00 00      mov b, $0        
2021   1013 FD 43         mov [d], b
2022   1015             ;; if(num == 0){ 
2023   1015             _if29_cond:
2024   1015 2C 05 00      mov b, [bp + 5] ; $num             
2025   1018             ; START RELATIONAL
2026   1018 D7            push a
2027   1019 11            mov a, b
2028   101A 26 00 00      mov b, $0
2029   101D B0            cmp a, b
2030   101E FD 71         seq ; ==
2031   1020 E4            pop a
2032   1021             ; END RELATIONAL
2033   1021 C0 00 00      cmp b, 0
2034   1024 C6 36 10      je _if29_exit
2035   1027             _if29_true:
2036   1027             ;; putchar('0'); 
2037   1027 26 30 00      mov b, $30
2038   102A DD            push bl
2039   102B 07 DE 10      call putchar
2040   102E 51 01 00      add sp, 1
2041   1031             ;; return; 
2042   1031 F9            leave
2043   1032 09            ret
2044   1033 0A 36 10      jmp _if29_exit
2045   1036             _if29_exit:
2046   1036             ;; while (num > 0) { 
2047   1036             _while30_cond:
2048   1036 2C 05 00      mov b, [bp + 5] ; $num             
2049   1039             ; START RELATIONAL
2050   1039 D7            push a
2051   103A 11            mov a, b
2052   103B 26 00 00      mov b, $0
2053   103E B0            cmp a, b
2054   103F FD 81         sgu ; > (unsigned)
2055   1041 E4            pop a
2056   1042             ; END RELATIONAL
2057   1042 C0 00 00      cmp b, 0
2058   1045 C6 88 10      je _while30_exit
2059   1048             _while30_block:
2060   1048             ;; digits[i] = '0' + (num % 10); 
2061   1048 FA FC FF      lea d, [bp + -4] ; $digits
2062   104B D7            push a         
2063   104C 2C FA FF      mov b, [bp + -6] ; $i                     
2064   104F 5A            add d, b
2065   1050 E4            pop a         
2066   1051 26 30 00      mov b, $30
2067   1054             ; START TERMS
2068   1054 D7            push a
2069   1055 11            mov a, b
2070   1056 2C 05 00      mov b, [bp + 5] ; $num             
2071   1059             ; START FACTORS
2072   1059 D7            push a
2073   105A 11            mov a, b
2074   105B 26 0A 00      mov b, $a
2075   105E AE            div a, b ; 
2076   105F 11            mov a, b
2077   1060 27            mov b, a
2078   1061 E4            pop a
2079   1062             ; END FACTORS
2080   1062 54            add a, b
2081   1063 27            mov b, a
2082   1064 E4            pop a
2083   1065             ; END TERMS        
2084   1065 FD 3E         mov [d], bl
2085   1067             ;; num = num / 10; 
2086   1067 FA 05 00      lea d, [bp + 5] ; $num         
2087   106A 2C 05 00      mov b, [bp + 5] ; $num             
2088   106D             ; START FACTORS
2089   106D D7            push a
2090   106E 11            mov a, b
2091   106F 26 0A 00      mov b, $a
2092   1072 AE            div a, b
2093   1073 27            mov b, a
2094   1074 E4            pop a
2095   1075             ; END FACTORS        
2096   1075 FD 43         mov [d], b
2097   1077             ;; i++; 
2098   1077 2C FA FF      mov b, [bp + -6] ; $i             
2099   107A FD 79         mov g, b
2100   107C FD 77         inc b
2101   107E FA FA FF      lea d, [bp + -6] ; $i
2102   1081 FD 43         mov [d], b
2103   1083 FD 27         mov b, g
2104   1085 0A 36 10      jmp _while30_cond
2105   1088             _while30_exit:
2106   1088             ;; while (i > 0) { 
2107   1088             _while31_cond:
2108   1088 2C FA FF      mov b, [bp + -6] ; $i             
2109   108B             ; START RELATIONAL
2110   108B D7            push a
2111   108C 11            mov a, b
2112   108D 26 00 00      mov b, $0
2113   1090 B0            cmp a, b
2114   1091 FD 7F         sgt ; >
2115   1093 E4            pop a
2116   1094             ; END RELATIONAL
2117   1094 C0 00 00      cmp b, 0
2118   1097 C6 BE 10      je _while31_exit
2119   109A             _while31_block:
2120   109A             ;; i--; 
2121   109A 2C FA FF      mov b, [bp + -6] ; $i             
2122   109D FD 79         mov g, b
2123   109F FD 7D         dec b
2124   10A1 FA FA FF      lea d, [bp + -6] ; $i
2125   10A4 FD 43         mov [d], b
2126   10A6 FD 27         mov b, g
2127   10A8             ;; putchar(digits[i]); 
2128   10A8 FA FC FF      lea d, [bp + -4] ; $digits
2129   10AB D7            push a         
2130   10AC 2C FA FF      mov b, [bp + -6] ; $i                     
2131   10AF 5A            add d, b
2132   10B0 E4            pop a
2133   10B1 32            mov bl, [d]
2134   10B2 A7 00         mov bh, 0
2135   10B4 DD            push bl
2136   10B5 07 DE 10      call putchar
2137   10B8 51 01 00      add sp, 1
2138   10BB 0A 88 10      jmp _while31_cond
2139   10BE             _while31_exit:
2140   10BE F9            leave
2141   10BF 09            ret
2142   10C0             
2143   10C0             rand:
2144   10C0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2145   10C3             ; $sec 
2146   10C3 52 01 00      sub sp, 1
2147   10C6             
2148   10C6             ; --- BEGIN INLINE ASM BLOCK
2149   10C6 19 00         mov al, 0
2150   10C8 05 01         syscall sys_rtc					
2151   10CA 1A            mov al, ah
2152   10CB 20 00 00      mov al, [bp + 0] ; $sec
2153   10CE                         
2154   10CE             ; --- END INLINE ASM BLOCK
2155   10CE             
2156   10CE             ;; return sec; 
2157   10CE 34 00 00      mov bl, [bp + 0] ; $sec
2158   10D1 A7 00         mov bh, 0             
2159   10D3 F9            leave
2160   10D4 09            ret
2161   10D5             
2162   10D5             date:
2163   10D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2164   10D8             
2165   10D8             ; --- BEGIN INLINE ASM BLOCK
2166   10D8 19 00         mov al, 0 
2167   10DA 05 07         syscall sys_datetime
2168   10DC             ; --- END INLINE ASM BLOCK
2169   10DC             
2170   10DC F9            leave
2171   10DD 09            ret
2172   10DE             
2173   10DE             putchar:
2174   10DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2175   10E1             
2176   10E1             ; --- BEGIN INLINE ASM BLOCK
2177   10E1 20 05 00      mov al, [bp + 5] ; $c
2178   10E4                         
2179   10E4 23            mov ah, al
2180   10E5 07 C9 12      call _putchar
2181   10E8             ; --- END INLINE ASM BLOCK
2182   10E8             
2183   10E8 F9            leave
2184   10E9 09            ret
2185   10EA             
2186   10EA             getchar:
2187   10EA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2188   10ED             ; $c 
2189   10ED 52 01 00      sub sp, 1
2190   10F0             
2191   10F0             ; --- BEGIN INLINE ASM BLOCK
2192   10F0 07 C2 12      call getch
2193   10F3 1A            mov al, ah
2194   10F4 FA 00 00      lea d, [bp + 0] ; $c
2195   10F7 3E            mov [d], al
2196   10F8             ; --- END INLINE ASM BLOCK
2197   10F8             
2198   10F8             ;; return c; 
2199   10F8 34 00 00      mov bl, [bp + 0] ; $c
2200   10FB A7 00         mov bh, 0             
2201   10FD F9            leave
2202   10FE 09            ret
2203   10FF             
2204   10FF             scann:
2205   10FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2206   1102             ; $m 
2207   1102 52 02 00      sub sp, 2
2208   1105             
2209   1105             ; --- BEGIN INLINE ASM BLOCK
2210   1105 07 0D 15      call scan_u16d
2211   1108 FA FF FF      lea d, [bp + -1] ; $m
2212   110B 43            mov [d], a
2213   110C             ; --- END INLINE ASM BLOCK
2214   110C             
2215   110C             ;; return m; 
2216   110C 2C FF FF      mov b, [bp + -1] ; $m             
2217   110F F9            leave
2218   1110 09            ret
2219   1111             
2220   1111             puts:
2221   1111 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2222   1114             
2223   1114             ; --- BEGIN INLINE ASM BLOCK
2224   1114 17 05 00      mov a, [bp + 5] ; $s             
2225   1117 3C            mov d, a
2226   1118 07 13 14      call _puts
2227   111B 22 0A         mov ah, $0A
2228   111D 19 00         mov al, 0
2229   111F 05 03         syscall sys_io
2230   1121             ; --- END INLINE ASM BLOCK
2231   1121             
2232   1121 F9            leave
2233   1122 09            ret
2234   1123             
2235   1123             print:
2236   1123 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2237   1126             
2238   1126             ; --- BEGIN INLINE ASM BLOCK
2239   1126 17 05 00      mov a, [bp + 5] ; $s             
2240   1129 3C            mov d, a
2241   112A 07 13 14      call _puts
2242   112D             ; --- END INLINE ASM BLOCK
2243   112D             
2244   112D F9            leave
2245   112E 09            ret
2246   112F             
2247   112F             loadfile:
2248   112F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2249   1132             
2250   1132             ; --- BEGIN INLINE ASM BLOCK
2251   1132 17 05 00      mov a, [bp + 5] ; $destination             
2252   1135 4F            mov di, a
2253   1136 FA 07 00      lea d, [bp + 7] ; $filename
2254   1139 FD 2A         mov d, [d]
2255   113B 19 14         mov al, 20
2256   113D 05 04         syscall sys_filesystem
2257   113F             ; --- END INLINE ASM BLOCK
2258   113F             
2259   113F F9            leave
2260   1140 09            ret
2261   1141             
2262   1141             create_file:
2263   1141 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2264   1144 F9            leave
2265   1145 09            ret
2266   1146             
2267   1146             delete_file:
2268   1146 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2269   1149             
2270   1149             ; --- BEGIN INLINE ASM BLOCK
2271   1149 FA 05 00      lea d, [bp + 5] ; $filename
2272   114C 19 0A         mov al, 10
2273   114E 05 04         syscall sys_filesystem
2274   1150             ; --- END INLINE ASM BLOCK
2275   1150             
2276   1150 F9            leave
2277   1151 09            ret
2278   1152             
2279   1152             fopen:
2280   1152 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2281   1155 F9            leave
2282   1156 09            ret
2283   1157             
2284   1157             fclose:
2285   1157 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2286   115A F9            leave
2287   115B 09            ret
2288   115C             
2289   115C             alloc:
2290   115C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2291   115F             ;; heap_top = heap_top + bytes; 
2292   115F 3B 05 2D      mov d, _heap_top ; $heap_top         
2293   1162 29 05 2D      mov b, [_heap_top] ; $heap_top           
2294   1165             ; START TERMS
2295   1165 D7            push a
2296   1166 11            mov a, b
2297   1167 2C 05 00      mov b, [bp + 5] ; $bytes             
2298   116A 54            add a, b
2299   116B 27            mov b, a
2300   116C E4            pop a
2301   116D             ; END TERMS        
2302   116D FD 43         mov [d], b
2303   116F             ;; return heap_top - bytes; 
2304   116F 29 05 2D      mov b, [_heap_top] ; $heap_top           
2305   1172             ; START TERMS
2306   1172 D7            push a
2307   1173 11            mov a, b
2308   1174 2C 05 00      mov b, [bp + 5] ; $bytes             
2309   1177 60            sub a, b
2310   1178 27            mov b, a
2311   1179 E4            pop a
2312   117A             ; END TERMS
2313   117A F9            leave
2314   117B 09            ret
2315   117C             
2316   117C             free:
2317   117C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2318   117F             ;; return heap_top = heap_top - bytes; 
2319   117F 3B 05 2D      mov d, _heap_top ; $heap_top         
2320   1182 29 05 2D      mov b, [_heap_top] ; $heap_top           
2321   1185             ; START TERMS
2322   1185 D7            push a
2323   1186 11            mov a, b
2324   1187 2C 05 00      mov b, [bp + 5] ; $bytes             
2325   118A 60            sub a, b
2326   118B 27            mov b, a
2327   118C E4            pop a
2328   118D             ; END TERMS        
2329   118D FD 43         mov [d], b
2330   118F F9            leave
2331   1190 09            ret
2332   1191             
2333   1191             exit:
2334   1191 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2335   1194             
2336   1194             ; --- BEGIN INLINE ASM BLOCK
2337   1194 05 0B         syscall sys_terminate_proc
2338   1196             ; --- END INLINE ASM BLOCK
2339   1196             
2340   1196 F9            leave
2341   1197 09            ret
2342   1198             
2343   1198             load_hex:
2344   1198 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2345   119B             ; $temp 
2346   119B 52 02 00      sub sp, 2
2347   119E             ;; temp = alloc(32768); 
2348   119E FA FF FF      lea d, [bp + -1] ; $temp
2349   11A1 DA            push d
2350   11A2 26 00 80      mov b, $8000
2351   11A5 FD AB         swp b
2352   11A7 D8            push b
2353   11A8 07 5C 11      call alloc
2354   11AB 51 02 00      add sp, 2
2355   11AE E7            pop d
2356   11AF FD 43         mov [d], b
2357   11B1             
2358   11B1             ; --- BEGIN INLINE ASM BLOCK
2359   11B1               
2360   11B1               
2361   11B1               
2362   11B1               
2363   11B1               
2364   11B1             _load_hex:
2365   11B1 D7            push a
2366   11B2 D8            push b
2367   11B3 DA            push d
2368   11B4 E2            push si
2369   11B5 E3            push di
2370   11B6 52 00 80      sub sp, $8000      
2371   11B9 38 00 00      mov c, 0
2372   11BC 48            mov a, sp
2373   11BD 77            inc a
2374   11BE 3C            mov d, a          
2375   11BF 07 D0 12      call _gets        
2376   11C2 4D            mov si, a
2377   11C3             __load_hex_loop:
2378   11C3 F6            lodsb             
2379   11C4 B9 00         cmp al, 0         
2380   11C6 C6 D4 11      jz __load_hex_ret
2381   11C9 36            mov bh, al
2382   11CA F6            lodsb
2383   11CB 2F            mov bl, al
2384   11CC 07 86 12      call _atoi        
2385   11CF F7            stosb             
2386   11D0 78            inc c
2387   11D1 0A C3 11      jmp __load_hex_loop
2388   11D4             __load_hex_ret:
2389   11D4 51 00 80      add sp, $8000
2390   11D7 F0            pop di
2391   11D8 EF            pop si
2392   11D9 E7            pop d
2393   11DA E5            pop b
2394   11DB E4            pop a
2395   11DC             ; --- END INLINE ASM BLOCK
2396   11DC             
2397   11DC F9            leave
2398   11DD 09            ret
2399   11DE             
2400   11DE             include_stdio_asm:
2401   11DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2402   11E1             
2403   11E1             ; --- BEGIN INLINE ASM BLOCK
2404   11E1             .include "lib/stdio.asm"
0001+  11E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  11E1             ; stdio.s
0003+  11E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  11E1             .include "lib/string.asm"
0001++ 11E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 11E1             ; string.s
0003++ 11E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 11E1             
0005++ 11E1             
0006++ 11E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 11E1             ; _strrev
0008++ 11E1             ; reverse a string
0009++ 11E1             ; D = string address
0010++ 11E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 11E1             ; 01234
0012++ 11E1             _strrev:
0013++ 11E1 4B          	pusha
0014++ 11E2 07 28 12    	call _strlen	; length in C
0015++ 11E5 12          	mov a, c
0016++ 11E6 AF 01 00    	cmp a, 1
0017++ 11E9 D0 03 12    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 11EC 7D          	dec a
0019++ 11ED FD 4E       	mov si, d	; beginning of string
0020++ 11EF FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 11F1 59          	add d, a	; end of string
0022++ 11F2 12          	mov a, c
0023++ 11F3 FD 9B       	shr a		; divide by 2
0024++ 11F5 39          	mov c, a	; C now counts the steps
0025++ 11F6             _strrev_L0:
0026++ 11F6 32          	mov bl, [d]	; save load right-side char into BL
0027++ 11F7 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 11F8 3E          	mov [d], al	; store left char into right side
0029++ 11F9 1B          	mov al, bl
0030++ 11FA F7          	stosb		; store right-side char into left-side; increase DI
0031++ 11FB 7E          	dec c
0032++ 11FC 7F          	dec d
0033++ 11FD C2 00 00    	cmp c, 0
0034++ 1200 C7 F6 11    	jne _strrev_L0
0035++ 1203             _strrev_end:
0036++ 1203 4C          	popa
0037++ 1204 09          	ret
0038++ 1205             	
0039++ 1205             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1205             ; _strchr
0041++ 1205             ; search string in D for char in AL
0042++ 1205             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1205             _strchr:
0044++ 1205             _strchr_L0:
0045++ 1205 32          	mov bl, [d]
0046++ 1206 C1 00       	cmp bl, 0
0047++ 1208 C6 13 12    	je _strchr_end
0048++ 120B BA          	cmp al, bl
0049++ 120C C6 13 12    	je _strchr_end
0050++ 120F 79          	inc d
0051++ 1210 0A 05 12    	jmp _strchr_L0
0052++ 1213             _strchr_end:
0053++ 1213 1B          	mov al, bl
0054++ 1214 09          	ret
0055++ 1215             
0056++ 1215             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1215             ; _strstr
0058++ 1215             ; find sub-string
0059++ 1215             ; str1 in SI
0060++ 1215             ; str2 in DI
0061++ 1215             ; SI points to end of source string
0062++ 1215             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1215             _strstr:
0064++ 1215 DB          	push al
0065++ 1216 DA          	push d
0066++ 1217 E3          	push di
0067++ 1218             _strstr_loop:
0068++ 1218 F3          	cmpsb					; compare a byte of the strings
0069++ 1219 C7 24 12    	jne _strstr_ret
0070++ 121C FC 00 00    	lea d, [di + 0]
0071++ 121F BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1221 C7 18 12    	jne _strstr_loop				; equal chars but not at end
0073++ 1224             _strstr_ret:
0074++ 1224 F0          	pop di
0075++ 1225 E7          	pop d
0076++ 1226 E8          	pop al
0077++ 1227 09          	ret
0078++ 1228             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1228             ; length of null terminated string
0080++ 1228             ; result in C
0081++ 1228             ; pointer in D
0082++ 1228             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1228             _strlen:
0084++ 1228 DA          	push d
0085++ 1229 38 00 00    	mov c, 0
0086++ 122C             _strlen_L1:
0087++ 122C BD 00       	cmp byte [d], 0
0088++ 122E C6 36 12    	je _strlen_ret
0089++ 1231 79          	inc d
0090++ 1232 78          	inc c
0091++ 1233 0A 2C 12    	jmp _strlen_L1
0092++ 1236             _strlen_ret:
0093++ 1236 E7          	pop d
0094++ 1237 09          	ret
0095++ 1238             
0096++ 1238             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1238             ; STRCMP
0098++ 1238             ; compare two strings
0099++ 1238             ; str1 in SI
0100++ 1238             ; str2 in DI
0101++ 1238             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1238             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1238             _strcmp:
0104++ 1238 DB          	push al
0105++ 1239 DA          	push d
0106++ 123A E3          	push di
0107++ 123B E2          	push si
0108++ 123C             _strcmp_loop:
0109++ 123C F3          	cmpsb					; compare a byte of the strings
0110++ 123D C7 48 12    	jne _strcmp_ret
0111++ 1240 FB FF FF    	lea d, [si +- 1]
0112++ 1243 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1245 C7 3C 12    	jne _strcmp_loop				; equal chars but not at end
0114++ 1248             _strcmp_ret:
0115++ 1248 EF          	pop si
0116++ 1249 F0          	pop di
0117++ 124A E7          	pop d
0118++ 124B E8          	pop al
0119++ 124C 09          	ret
0120++ 124D             
0121++ 124D             
0122++ 124D             ; STRCPY
0123++ 124D             ; copy null terminated string from SI to DI
0124++ 124D             ; source in SI
0125++ 124D             ; destination in DI
0126++ 124D             _strcpy:
0127++ 124D E2          	push si
0128++ 124E E3          	push di
0129++ 124F DB          	push al
0130++ 1250             _strcpy_L1:
0131++ 1250 F6          	lodsb
0132++ 1251 F7          	stosb
0133++ 1252 B9 00       	cmp al, 0
0134++ 1254 C7 50 12    	jne _strcpy_L1
0135++ 1257             _strcpy_end:
0136++ 1257 E8          	pop al
0137++ 1258 F0          	pop di
0138++ 1259 EF          	pop si
0139++ 125A 09          	ret
0140++ 125B             
0141++ 125B             ; STRCAT
0142++ 125B             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 125B             ; source in SI
0144++ 125B             ; destination in DI
0145++ 125B             _strcat:
0146++ 125B E2          	push si
0147++ 125C E3          	push di
0148++ 125D D7          	push a
0149++ 125E DA          	push d
0150++ 125F 50          	mov a, di
0151++ 1260 3C          	mov d, a
0152++ 1261             _strcat_goto_end_L1:
0153++ 1261 BD 00       	cmp byte[d], 0
0154++ 1263 C6 6A 12    	je _strcat_start
0155++ 1266 79          	inc d
0156++ 1267 0A 61 12    	jmp _strcat_goto_end_L1
0157++ 126A             _strcat_start:
0158++ 126A FD 50       	mov di, d
0159++ 126C             _strcat_L1:
0160++ 126C F6          	lodsb
0161++ 126D F7          	stosb
0162++ 126E B9 00       	cmp al, 0
0163++ 1270 C7 6C 12    	jne _strcat_L1
0164++ 1273             _strcat_end:
0165++ 1273 E7          	pop d
0166++ 1274 E4          	pop a
0167++ 1275 F0          	pop di
0168++ 1276 EF          	pop si
0169++ 1277 09          	ret
0170++ 1278             
0171++ 1278             
0005+  1278             
0006+  1278             
0007+  1278             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  1278             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  1278             ; ASCII in BL
0010+  1278             ; result in AL
0011+  1278             ; ascii for F = 0100 0110
0012+  1278             ; ascii for 9 = 0011 1001
0013+  1278             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  1278             hex_ascii_encode:
0015+  1278 1B            mov al, bl
0016+  1279 93 40         test al, $40        ; test if letter or number
0017+  127B C7 81 12      jnz hex_letter
0018+  127E 87 0F         and al, $0F        ; get number
0019+  1280 09            ret
0020+  1281             hex_letter:
0021+  1281 87 0F         and al, $0F        ; get letter
0022+  1283 6A 09         add al, 9
0023+  1285 09            ret
0024+  1286             
0025+  1286             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  1286             ; ATOI
0027+  1286             ; 2 letter hex string in B
0028+  1286             ; 8bit integer returned in AL
0029+  1286             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  1286             _atoi:
0031+  1286 D8            push b
0032+  1287 07 78 12      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  128A 30            mov bl, bh
0034+  128B DB            push al          ; save a
0035+  128C 07 78 12      call hex_ascii_encode
0036+  128F EA            pop bl  
0037+  1290 FD 9E 04      shl al, 4
0038+  1293 8C            or al, bl
0039+  1294 E5            pop b
0040+  1295 09            ret  
0041+  1296             
0042+  1296             
0043+  1296             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  1296             ; scanf
0045+  1296             ; no need for explanations!
0046+  1296             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  1296             scanf:
0048+  1296 09            ret
0049+  1297             
0050+  1297             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  1297             ; ITOA
0052+  1297             ; 8bit value in BL
0053+  1297             ; 2 byte ASCII result in A
0054+  1297             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  1297             _itoa:
0056+  1297 DA            push d
0057+  1298 D8            push b
0058+  1299 A7 00         mov bh, 0
0059+  129B FD A4 04      shr bl, 4  
0060+  129E 74            mov d, b
0061+  129F 1F 47 15      mov al, [d + s_hex_digits]
0062+  12A2 23            mov ah, al
0063+  12A3               
0064+  12A3 E5            pop b
0065+  12A4 D8            push b
0066+  12A5 A7 00         mov bh, 0
0067+  12A7 FD 87 0F      and bl, $0F
0068+  12AA 74            mov d, b
0069+  12AB 1F 47 15      mov al, [d + s_hex_digits]
0070+  12AE E5            pop b
0071+  12AF E7            pop d
0072+  12B0 09            ret
0073+  12B1             
0074+  12B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  12B1             ; HEX STRING TO BINARY
0076+  12B1             ; di = destination address
0077+  12B1             ; si = source
0078+  12B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  12B1             _hex_to_int:
0080+  12B1             _hex_to_int_L1:
0081+  12B1 F6            lodsb          ; load from [SI] to AL
0082+  12B2 B9 00         cmp al, 0        ; check if ASCII 0
0083+  12B4 C6 C1 12      jz _hex_to_int_ret
0084+  12B7 36            mov bh, al
0085+  12B8 F6            lodsb
0086+  12B9 2F            mov bl, al
0087+  12BA 07 86 12      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  12BD F7            stosb          ; store AL to [DI]
0089+  12BE 0A B1 12      jmp _hex_to_int_L1
0090+  12C1             _hex_to_int_ret:
0091+  12C1 09            ret    
0092+  12C2             
0093+  12C2             
0094+  12C2             
0095+  12C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  12C2             ; GETCHAR
0097+  12C2             ; char in ah
0098+  12C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  12C2             getch:
0100+  12C2 DB            push al
0101+  12C3             getch_retry:
0102+  12C3 19 01         mov al, 1
0103+  12C5 05 03         syscall sys_io      ; receive in AH
0104+  12C7 E8            pop al
0105+  12C8 09            ret
0106+  12C9             
0107+  12C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  12C9             ; PUTCHAR
0109+  12C9             ; char in ah
0110+  12C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  12C9             _putchar:
0112+  12C9 D7            push a
0113+  12CA 19 00         mov al, 0
0114+  12CC 05 03         syscall sys_io      ; char in AH
0115+  12CE E4            pop a
0116+  12CF 09            ret
0117+  12D0             
0118+  12D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  12D0             ;; INPUT A STRING
0120+  12D0             ;; terminates with null
0121+  12D0             ;; pointer in D
0122+  12D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  12D0             _gets:
0124+  12D0 D7            push a
0125+  12D1 DA            push d
0126+  12D2             _gets_loop:
0127+  12D2 19 01         mov al, 1
0128+  12D4 05 03         syscall sys_io      ; receive in AH
0129+  12D6 B9 00         cmp al, 0        ; check error code (AL)
0130+  12D8 C6 D2 12      je _gets_loop      ; if no char received, retry
0131+  12DB             
0132+  12DB 76 1B         cmp ah, 27
0133+  12DD C6 FE 12      je _gets_ansi_esc
0134+  12E0 76 0A         cmp ah, $0A        ; LF
0135+  12E2 C6 69 13      je _gets_end
0136+  12E5 76 0D         cmp ah, $0D        ; CR
0137+  12E7 C6 69 13      je _gets_end
0138+  12EA 76 5C         cmp ah, $5C        ; '\\'
0139+  12EC C6 2A 13      je _gets_escape
0140+  12EF               
0141+  12EF 76 08         cmp ah, $08      ; check for backspace
0142+  12F1 C6 FA 12      je _gets_backspace
0143+  12F4             
0144+  12F4 1A            mov al, ah
0145+  12F5 3E            mov [d], al
0146+  12F6 79            inc d
0147+  12F7 0A D2 12      jmp _gets_loop
0148+  12FA             _gets_backspace:
0149+  12FA 7F            dec d
0150+  12FB 0A D2 12      jmp _gets_loop
0151+  12FE             _gets_ansi_esc:
0152+  12FE 19 01         mov al, 1
0153+  1300 05 03         syscall sys_io        ; receive in AH without echo
0154+  1302 B9 00         cmp al, 0          ; check error code (AL)
0155+  1304 C6 FE 12      je _gets_ansi_esc    ; if no char received, retry
0156+  1307 76 5B         cmp ah, '['
0157+  1309 C7 D2 12      jne _gets_loop
0158+  130C             _gets_ansi_esc_2:
0159+  130C 19 01         mov al, 1
0160+  130E 05 03         syscall sys_io          ; receive in AH without echo
0161+  1310 B9 00         cmp al, 0            ; check error code (AL)
0162+  1312 C6 0C 13      je _gets_ansi_esc_2  ; if no char received, retry
0163+  1315 76 44         cmp ah, 'D'
0164+  1317 C6 22 13      je _gets_left_arrow
0165+  131A 76 43         cmp ah, 'C'
0166+  131C C6 26 13      je _gets_right_arrow
0167+  131F 0A D2 12      jmp _gets_loop
0168+  1322             _gets_left_arrow:
0169+  1322 7F            dec d
0170+  1323 0A D2 12      jmp _gets_loop
0171+  1326             _gets_right_arrow:
0172+  1326 79            inc d
0173+  1327 0A D2 12      jmp _gets_loop
0174+  132A             _gets_escape:
0175+  132A 19 01         mov al, 1
0176+  132C 05 03         syscall sys_io      ; receive in AH
0177+  132E B9 00         cmp al, 0        ; check error code (AL)
0178+  1330 C6 2A 13      je _gets_escape      ; if no char received, retry
0179+  1333 76 6E         cmp ah, 'n'
0180+  1335 C6 54 13      je _gets_LF
0181+  1338 76 72         cmp ah, 'r'
0182+  133A C6 5B 13      je _gets_CR
0183+  133D 76 30         cmp ah, '0'
0184+  133F C6 62 13      je _gets_NULL
0185+  1342 76 5C         cmp ah, $5C  ; '\'
0186+  1344 C6 4D 13      je _gets_slash
0187+  1347 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  1348 3E            mov [d], al
0189+  1349 79            inc d
0190+  134A 0A D2 12      jmp _gets_loop
0191+  134D             _gets_slash:
0192+  134D 19 5C         mov al, $5C
0193+  134F 3E            mov [d], al
0194+  1350 79            inc d
0195+  1351 0A D2 12      jmp _gets_loop
0196+  1354             _gets_LF:
0197+  1354 19 0A         mov al, $0A
0198+  1356 3E            mov [d], al
0199+  1357 79            inc d
0200+  1358 0A D2 12      jmp _gets_loop
0201+  135B             _gets_CR:
0202+  135B 19 0D         mov al, $0D
0203+  135D 3E            mov [d], al
0204+  135E 79            inc d
0205+  135F 0A D2 12      jmp _gets_loop
0206+  1362             _gets_NULL:
0207+  1362 19 00         mov al, $00
0208+  1364 3E            mov [d], al
0209+  1365 79            inc d
0210+  1366 0A D2 12      jmp _gets_loop
0211+  1369             _gets_end:
0212+  1369 19 00         mov al, 0
0213+  136B 3E            mov [d], al        ; terminate string
0214+  136C E7            pop d
0215+  136D E4            pop a
0216+  136E 09            ret
0217+  136F             
0218+  136F             
0219+  136F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  136F             ;; INPUT TEXT
0221+  136F             ;; terminated with CTRL+D
0222+  136F             ;; pointer in D
0223+  136F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  136F             _gettxt:
0225+  136F D7            push a
0226+  1370 DA            push d
0227+  1371             _gettxt_loop:
0228+  1371 19 01         mov al, 1
0229+  1373 05 03         syscall sys_io      ; receive in AH
0230+  1375 B9 00         cmp al, 0        ; check error code (AL)
0231+  1377 C6 71 13      je _gettxt_loop    ; if no char received, retry
0232+  137A 76 04         cmp ah, 4      ; EOT
0233+  137C C6 BA 13      je _gettxt_end
0234+  137F 76 08         cmp ah, $08      ; check for backspace
0235+  1381 C6 B6 13      je _gettxt_backspace
0236+  1384 76 5C         cmp ah, $5C        ; '\'
0237+  1386 C6 8F 13      je _gettxt_escape
0238+  1389 1A            mov al, ah
0239+  138A 3E            mov [d], al
0240+  138B 79            inc d
0241+  138C 0A 71 13      jmp _gettxt_loop
0242+  138F             _gettxt_escape:
0243+  138F 19 01         mov al, 1
0244+  1391 05 03         syscall sys_io      ; receive in AH
0245+  1393 B9 00         cmp al, 0        ; check error code (AL)
0246+  1395 C6 8F 13      je _gettxt_escape    ; if no char received, retry
0247+  1398 76 6E         cmp ah, 'n'
0248+  139A C6 A8 13      je _gettxt_LF
0249+  139D 76 72         cmp ah, 'r'
0250+  139F C6 AF 13      je _gettxt_CR
0251+  13A2 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  13A3 3E            mov [d], al
0253+  13A4 79            inc d
0254+  13A5 0A 71 13      jmp _gettxt_loop
0255+  13A8             _gettxt_LF:
0256+  13A8 19 0A         mov al, $0A
0257+  13AA 3E            mov [d], al
0258+  13AB 79            inc d
0259+  13AC 0A 71 13      jmp _gettxt_loop
0260+  13AF             _gettxt_CR:
0261+  13AF 19 0D         mov al, $0D
0262+  13B1 3E            mov [d], al
0263+  13B2 79            inc d
0264+  13B3 0A 71 13      jmp _gettxt_loop
0265+  13B6             _gettxt_backspace:
0266+  13B6 7F            dec d
0267+  13B7 0A 71 13      jmp _gettxt_loop
0268+  13BA             _gettxt_end:
0269+  13BA 19 00         mov al, 0
0270+  13BC 3E            mov [d], al        ; terminate string
0271+  13BD E7            pop d
0272+  13BE E4            pop a
0273+  13BF 09            ret
0274+  13C0             
0275+  13C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  13C0             ; PRINT NEW LINE
0277+  13C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  13C0             printnl:
0279+  13C0 D7            push a
0280+  13C1 10 00 0A      mov a, $0A00
0281+  13C4 05 03         syscall sys_io
0282+  13C6 10 00 0D      mov a, $0D00
0283+  13C9 05 03         syscall sys_io
0284+  13CB E4            pop a
0285+  13CC 09            ret
0286+  13CD             
0287+  13CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  13CD             ; _strtoint
0289+  13CD             ; 4 digit hex string number in d
0290+  13CD             ; integer returned in A
0291+  13CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  13CD             _strtointx:
0293+  13CD D8            push b
0294+  13CE 32            mov bl, [d]
0295+  13CF 37            mov bh, bl
0296+  13D0 33 01 00      mov bl, [d + 1]
0297+  13D3 07 86 12      call _atoi        ; convert to int in AL
0298+  13D6 23            mov ah, al        ; move to AH
0299+  13D7 33 02 00      mov bl, [d + 2]
0300+  13DA 37            mov bh, bl
0301+  13DB 33 03 00      mov bl, [d + 3]
0302+  13DE 07 86 12      call _atoi        ; convert to int in AL
0303+  13E1 E5            pop b
0304+  13E2 09            ret
0305+  13E3             
0306+  13E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  13E3             ; _strtoint
0308+  13E3             ; 5 digit base10 string number in d
0309+  13E3             ; integer returned in A
0310+  13E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  13E3             _strtoint:
0312+  13E3 E2            push si
0313+  13E4 D8            push b
0314+  13E5 D9            push c
0315+  13E6 DA            push d
0316+  13E7 07 28 12      call _strlen      ; get string length in C
0317+  13EA 7E            dec c
0318+  13EB FD 4E         mov si, d
0319+  13ED 12            mov a, c
0320+  13EE FD 99         shl a
0321+  13F0 3B 5F 15      mov d, table_power
0322+  13F3 59            add d, a
0323+  13F4 38 00 00      mov c, 0
0324+  13F7             _strtoint_L0:
0325+  13F7 F6            lodsb      ; load ASCII to al
0326+  13F8 B9 00         cmp al, 0
0327+  13FA C6 0D 14      je _strtoint_end
0328+  13FD 6F 30         sub al, $30    ; make into integer
0329+  13FF 22 00         mov ah, 0
0330+  1401 2A            mov b, [d]
0331+  1402 AC            mul a, b      ; result in B since it fits in 16bits
0332+  1403 11            mov a, b
0333+  1404 28            mov b, c
0334+  1405 54            add a, b
0335+  1406 39            mov c, a
0336+  1407 63 02 00      sub d, 2
0337+  140A 0A F7 13      jmp _strtoint_L0
0338+  140D             _strtoint_end:
0339+  140D 12            mov a, c
0340+  140E E7            pop d
0341+  140F E6            pop c
0342+  1410 E5            pop b
0343+  1411 EF            pop si
0344+  1412 09            ret
0345+  1413             
0346+  1413             
0347+  1413             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  1413             ; PRINT NULL TERMINATED STRING
0349+  1413             ; pointer in D
0350+  1413             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  1413             _puts:
0352+  1413 D7            push a
0353+  1414 DA            push d
0354+  1415             _puts_L1:
0355+  1415 1E            mov al, [d]
0356+  1416 B9 00         cmp al, 0
0357+  1418 C6 24 14      jz _puts_END
0358+  141B 23            mov ah, al
0359+  141C 19 00         mov al, 0
0360+  141E 05 03         syscall sys_io
0361+  1420 79            inc d
0362+  1421 0A 15 14      jmp _puts_L1
0363+  1424             _puts_END:
0364+  1424 E7            pop d
0365+  1425 E4            pop a
0366+  1426 09            ret
0367+  1427             
0368+  1427             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  1427             ; PRINT N SIZE STRING
0370+  1427             ; pointer in D
0371+  1427             ; size in C
0372+  1427             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  1427             _putsn:
0374+  1427 DB            push al
0375+  1428 DA            push d
0376+  1429 D9            push c
0377+  142A             _putsn_L0:
0378+  142A 1E            mov al, [d]
0379+  142B 23            mov ah, al
0380+  142C 19 00         mov al, 0
0381+  142E 05 03         syscall sys_io
0382+  1430 79            inc d
0383+  1431 7E            dec c  
0384+  1432 C2 00 00      cmp c, 0
0385+  1435 C7 2A 14      jne _putsn_L0
0386+  1438             _putsn_end:
0387+  1438 E6            pop c
0388+  1439 E7            pop d
0389+  143A E8            pop al
0390+  143B 09            ret
0391+  143C             
0392+  143C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  143C             ; print 16bit decimal number
0394+  143C             ; input number in A
0395+  143C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  143C             print_u16d:
0397+  143C D7            push a
0398+  143D D8            push b
0399+  143E 26 10 27      mov b, 10000
0400+  1441 AE            div a, b      ; get 10000's coeff.
0401+  1442 07 64 14      call print_number
0402+  1445 11            mov a, b
0403+  1446 26 E8 03      mov b, 1000
0404+  1449 AE            div a, b      ; get 1000's coeff.
0405+  144A 07 64 14      call print_number
0406+  144D 11            mov a, b
0407+  144E 26 64 00      mov b, 100
0408+  1451 AE            div a, b
0409+  1452 07 64 14      call print_number
0410+  1455 11            mov a, b
0411+  1456 26 0A 00      mov b, 10
0412+  1459 AE            div a, b
0413+  145A 07 64 14      call print_number
0414+  145D 1B            mov al, bl      ; 1's coeff in bl
0415+  145E 07 64 14      call print_number
0416+  1461 E5            pop b
0417+  1462 E4            pop a
0418+  1463 09            ret
0419+  1464             
0420+  1464             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  1464             ; print AL
0422+  1464             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  1464             print_number:
0424+  1464 6A 30         add al, $30
0425+  1466 23            mov ah, al
0426+  1467 07 C9 12      call _putchar
0427+  146A 09            ret
0428+  146B             
0429+  146B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  146B             ; PRINT 16BIT HEX INTEGER
0431+  146B             ; integer value in reg B
0432+  146B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  146B             print_u16x:
0434+  146B D7            push a
0435+  146C D8            push b
0436+  146D DD            push bl
0437+  146E 30            mov bl, bh
0438+  146F 07 97 12      call _itoa        ; convert bh to char in A
0439+  1472 2F            mov bl, al        ; save al
0440+  1473 19 00         mov al, 0
0441+  1475 05 03         syscall sys_io        ; display AH
0442+  1477 24            mov ah, bl        ; retrieve al
0443+  1478 19 00         mov al, 0
0444+  147A 05 03         syscall sys_io        ; display AL
0445+  147C             
0446+  147C EA            pop bl
0447+  147D 07 97 12      call _itoa        ; convert bh to char in A
0448+  1480 2F            mov bl, al        ; save al
0449+  1481 19 00         mov al, 0
0450+  1483 05 03         syscall sys_io        ; display AH
0451+  1485 24            mov ah, bl        ; retrieve al
0452+  1486 19 00         mov al, 0
0453+  1488 05 03         syscall sys_io        ; display AL
0454+  148A             
0455+  148A E5            pop b
0456+  148B E4            pop a
0457+  148C 09            ret
0458+  148D             
0459+  148D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  148D             ; INPUT 16BIT HEX INTEGER
0461+  148D             ; read 16bit integer into A
0462+  148D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  148D             scan_u16x:
0464+  148D F8 10 00      enter 16
0465+  1490 D8            push b
0466+  1491 DA            push d
0467+  1492             
0468+  1492 FA F1 FF      lea d, [bp + -15]
0469+  1495 07 D0 12      call _gets        ; get number
0470+  1498             
0471+  1498 32            mov bl, [d]
0472+  1499 37            mov bh, bl
0473+  149A 33 01 00      mov bl, [d + 1]
0474+  149D 07 86 12      call _atoi        ; convert to int in AL
0475+  14A0 23            mov ah, al        ; move to AH
0476+  14A1             
0477+  14A1 33 02 00      mov bl, [d + 2]
0478+  14A4 37            mov bh, bl
0479+  14A5 33 03 00      mov bl, [d + 3]
0480+  14A8 07 86 12      call _atoi        ; convert to int in AL
0481+  14AB             
0482+  14AB E7            pop d
0483+  14AC E5            pop b
0484+  14AD F9            leave
0485+  14AE 09            ret
0486+  14AF             
0487+  14AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  14AF             ; PRINT 8bit HEX INTEGER
0489+  14AF             ; integer value in reg bl
0490+  14AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  14AF             print_u8x:
0492+  14AF D7            push a
0493+  14B0 DD            push bl
0494+  14B1             
0495+  14B1 07 97 12      call _itoa        ; convert bl to char in A
0496+  14B4 2F            mov bl, al        ; save al
0497+  14B5 19 00         mov al, 0
0498+  14B7 05 03         syscall sys_io        ; display AH
0499+  14B9 24            mov ah, bl        ; retrieve al
0500+  14BA 19 00         mov al, 0
0501+  14BC 05 03         syscall sys_io        ; display AL
0502+  14BE             
0503+  14BE EA            pop bl
0504+  14BF E4            pop a
0505+  14C0 09            ret
0506+  14C1             
0507+  14C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  14C1             ; print 8bit decimal unsigned number
0509+  14C1             ; input number in AL
0510+  14C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  14C1             print_u8d:
0512+  14C1 D7            push a
0513+  14C2 D8            push b
0514+  14C3             
0515+  14C3 22 00         mov ah, 0
0516+  14C5 26 64 00      mov b, 100
0517+  14C8 AE            div a, b
0518+  14C9 D8            push b      ; save remainder
0519+  14CA B9 00         cmp al, 0
0520+  14CC C6 D6 14      je skip100
0521+  14CF 6A 30         add al, $30
0522+  14D1 23            mov ah, al
0523+  14D2 19 00         mov al, 0
0524+  14D4 05 03         syscall sys_io  ; print coeff
0525+  14D6             skip100:
0526+  14D6 E4            pop a
0527+  14D7 22 00         mov ah, 0
0528+  14D9 26 0A 00      mov b, 10
0529+  14DC AE            div a, b
0530+  14DD D8            push b      ; save remainder
0531+  14DE B9 00         cmp al, 0
0532+  14E0 C6 EA 14      je skip10
0533+  14E3 6A 30         add al, $30
0534+  14E5 23            mov ah, al
0535+  14E6 19 00         mov al, 0
0536+  14E8 05 03         syscall sys_io  ; print coeff
0537+  14EA             skip10:
0538+  14EA E4            pop a
0539+  14EB 1B            mov al, bl
0540+  14EC 6A 30         add al, $30
0541+  14EE 23            mov ah, al
0542+  14EF 19 00         mov al, 0
0543+  14F1 05 03         syscall sys_io  ; print coeff
0544+  14F3 E5            pop b
0545+  14F4 E4            pop a
0546+  14F5 09            ret
0547+  14F6             
0548+  14F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  14F6             ; INPUT 8BIT HEX INTEGER
0550+  14F6             ; read 8bit integer into AL
0551+  14F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  14F6             scan_u8x:
0553+  14F6 F8 04 00      enter 4
0554+  14F9 D8            push b
0555+  14FA DA            push d
0556+  14FB             
0557+  14FB FA FD FF      lea d, [bp + -3]
0558+  14FE 07 D0 12      call _gets        ; get number
0559+  1501             
0560+  1501 32            mov bl, [d]
0561+  1502 37            mov bh, bl
0562+  1503 33 01 00      mov bl, [d + 1]
0563+  1506 07 86 12      call _atoi        ; convert to int in AL
0564+  1509             
0565+  1509 E7            pop d
0566+  150A E5            pop b
0567+  150B F9            leave
0568+  150C 09            ret
0569+  150D             
0570+  150D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  150D             ; input decimal number
0572+  150D             ; result in A
0573+  150D             ; 655'\0'
0574+  150D             ; low--------high
0575+  150D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  150D             scan_u16d:
0577+  150D F8 08 00      enter 8
0578+  1510 E2            push si
0579+  1511 D8            push b
0580+  1512 D9            push c
0581+  1513 DA            push d
0582+  1514 FA F9 FF      lea d, [bp +- 7]
0583+  1517 07 D0 12      call _gets
0584+  151A 07 28 12      call _strlen      ; get string length in C
0585+  151D 7E            dec c
0586+  151E FD 4E         mov si, d
0587+  1520 12            mov a, c
0588+  1521 FD 99         shl a
0589+  1523 3B 5F 15      mov d, table_power
0590+  1526 59            add d, a
0591+  1527 38 00 00      mov c, 0
0592+  152A             mul_loop:
0593+  152A F6            lodsb      ; load ASCII to al
0594+  152B B9 00         cmp al, 0
0595+  152D C6 40 15      je mul_exit
0596+  1530 6F 30         sub al, $30    ; make into integer
0597+  1532 22 00         mov ah, 0
0598+  1534 2A            mov b, [d]
0599+  1535 AC            mul a, b      ; result in B since it fits in 16bits
0600+  1536 11            mov a, b
0601+  1537 28            mov b, c
0602+  1538 54            add a, b
0603+  1539 39            mov c, a
0604+  153A 63 02 00      sub d, 2
0605+  153D 0A 2A 15      jmp mul_loop
0606+  1540             mul_exit:
0607+  1540 12            mov a, c
0608+  1541 E7            pop d
0609+  1542 E6            pop c
0610+  1543 E5            pop b
0611+  1544 EF            pop si
0612+  1545 F9            leave
0613+  1546 09            ret
0614+  1547             
0615+  1547             
0616+  1547 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  154B 34 35 36 37 
0616+  154F 38 39 41 42 
0616+  1553 43 44 45 46 
0617+  1557 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  155B 1B 5B 48 00 
0618+  155F             
0619+  155F             table_power:
0620+  155F 01 00         .dw 1
0621+  1561 0A 00         .dw 10
0622+  1563 64 00         .dw 100
0623+  1565 E8 03         .dw 1000
0624+  1567 10 27         .dw 100002405   1569             ; --- END INLINE ASM BLOCK
2406   1569             
2407   1569 F9            leave
2408   156A 09            ret
2409   156B             
2410   156B             back:
2411   156B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2412   156E             ; $t 
2413   156E 52 02 00      sub sp, 2
2414   1571             ;; t = token; 
2415   1571 FA FF FF      lea d, [bp + -1] ; $t         
2416   1574 26 4F 29      mov b, _token_data ; $token                   
2417   1577 FD 43         mov [d], b
2418   1579             ;; while(*t++) prog--; 
2419   1579             _while32_cond:
2420   1579 2C FF FF      mov b, [bp + -1] ; $t             
2421   157C FD 79         mov g, b
2422   157E FD 77         inc b
2423   1580 FA FF FF      lea d, [bp + -1] ; $t
2424   1583 FD 43         mov [d], b
2425   1585 FD 27         mov b, g
2426   1587 74            mov d, b
2427   1588 32            mov bl, [d]
2428   1589 A7 00         mov bh, 0
2429   158B C0 00 00      cmp b, 0
2430   158E C6 A2 15      je _while32_exit
2431   1591             _while32_block:
2432   1591             ;; prog--; 
2433   1591 29 4D 29      mov b, [_prog] ; $prog           
2434   1594 FD 79         mov g, b
2435   1596 FD 7D         dec b
2436   1598 3B 4D 29      mov d, _prog ; $prog
2437   159B FD 43         mov [d], b
2438   159D FD 27         mov b, g
2439   159F 0A 79 15      jmp _while32_cond
2440   15A2             _while32_exit:
2441   15A2             ;; tok = TOK_UNDEF; 
2442   15A2 3B 49 29      mov d, _tok ; $tok         
2443   15A5 26 00 00      mov b, 0; TOK_UNDEF        
2444   15A8 FD 43         mov [d], b
2445   15AA             ;; toktype = TYPE_UNDEF; 
2446   15AA 3B 4B 29      mov d, _toktype ; $toktype         
2447   15AD 26 00 00      mov b, 0; TYPE_UNDEF        
2448   15B0 FD 43         mov [d], b
2449   15B2             ;; token[0] = '\0'; 
2450   15B2 3B 4F 29      mov d, _token_data ; $token
2451   15B5 D7            push a         
2452   15B6 26 00 00      mov b, $0        
2453   15B9 5A            add d, b
2454   15BA E4            pop a         
2455   15BB 26 00 00      mov b, $0        
2456   15BE FD 3E         mov [d], bl
2457   15C0 F9            leave
2458   15C1 09            ret
2459   15C2             
2460   15C2             get_path:
2461   15C2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2462   15C5             ; $t 
2463   15C5 52 02 00      sub sp, 2
2464   15C8             ;; *token = '\0'; 
2465   15C8 26 4F 29      mov b, _token_data ; $token           
2466   15CB D8            push b
2467   15CC 26 00 00      mov b, $0
2468   15CF E7            pop d
2469   15D0 FD 3E         mov [d], bl
2470   15D2             ;; t = token; 
2471   15D2 FA FF FF      lea d, [bp + -1] ; $t         
2472   15D5 26 4F 29      mov b, _token_data ; $token                   
2473   15D8 FD 43         mov [d], b
2474   15DA             ;; while(is_space(*prog)) prog++; 
2475   15DA             _while33_cond:
2476   15DA 29 4D 29      mov b, [_prog] ; $prog           
2477   15DD 74            mov d, b
2478   15DE 32            mov bl, [d]
2479   15DF A7 00         mov bh, 0
2480   15E1 DD            push bl
2481   15E2 07 B3 06      call is_space
2482   15E5 51 01 00      add sp, 1
2483   15E8 C0 00 00      cmp b, 0
2484   15EB C6 FF 15      je _while33_exit
2485   15EE             _while33_block:
2486   15EE             ;; prog++; 
2487   15EE 29 4D 29      mov b, [_prog] ; $prog           
2488   15F1 FD 79         mov g, b
2489   15F3 FD 77         inc b
2490   15F5 3B 4D 29      mov d, _prog ; $prog
2491   15F8 FD 43         mov [d], b
2492   15FA FD 27         mov b, g
2493   15FC 0A DA 15      jmp _while33_cond
2494   15FF             _while33_exit:
2495   15FF             ;; if(*prog == '\0'){ 
2496   15FF             _if34_cond:
2497   15FF 29 4D 29      mov b, [_prog] ; $prog           
2498   1602 74            mov d, b
2499   1603 32            mov bl, [d]
2500   1604 A7 00         mov bh, 0
2501   1606             ; START RELATIONAL
2502   1606 D7            push a
2503   1607 11            mov a, b
2504   1608 26 00 00      mov b, $0
2505   160B B0            cmp a, b
2506   160C FD 71         seq ; ==
2507   160E E4            pop a
2508   160F             ; END RELATIONAL
2509   160F C0 00 00      cmp b, 0
2510   1612 C6 1A 16      je _if34_exit
2511   1615             _if34_true:
2512   1615             ;; return; 
2513   1615 F9            leave
2514   1616 09            ret
2515   1617 0A 1A 16      jmp _if34_exit
2516   161A             _if34_exit:
2517   161A             ;; while( 
2518   161A             _while35_cond:
2519   161A 29 4D 29      mov b, [_prog] ; $prog           
2520   161D 74            mov d, b
2521   161E 32            mov bl, [d]
2522   161F A7 00         mov bh, 0
2523   1621             ; START RELATIONAL
2524   1621 D7            push a
2525   1622 11            mov a, b
2526   1623 26 61 00      mov b, $61
2527   1626 B0            cmp a, b
2528   1627 FD 80         sge ; >=
2529   1629 E4            pop a
2530   162A             ; END RELATIONAL
2531   162A D7            push a
2532   162B 11            mov a, b
2533   162C 29 4D 29      mov b, [_prog] ; $prog           
2534   162F 74            mov d, b
2535   1630 32            mov bl, [d]
2536   1631 A7 00         mov bh, 0
2537   1633             ; START RELATIONAL
2538   1633 D7            push a
2539   1634 11            mov a, b
2540   1635 26 7A 00      mov b, $7a
2541   1638 B0            cmp a, b
2542   1639 FD 74         sle ; <=
2543   163B E4            pop a
2544   163C             ; END RELATIONAL
2545   163C FD A7         sand a, b ; &&
2546   163E E4            pop a
2547   163F D7            push a
2548   1640 11            mov a, b
2549   1641 29 4D 29      mov b, [_prog] ; $prog           
2550   1644 74            mov d, b
2551   1645 32            mov bl, [d]
2552   1646 A7 00         mov bh, 0
2553   1648             ; START RELATIONAL
2554   1648 D7            push a
2555   1649 11            mov a, b
2556   164A 26 41 00      mov b, $41
2557   164D B0            cmp a, b
2558   164E FD 80         sge ; >=
2559   1650 E4            pop a
2560   1651             ; END RELATIONAL
2561   1651 D7            push a
2562   1652 11            mov a, b
2563   1653 29 4D 29      mov b, [_prog] ; $prog           
2564   1656 74            mov d, b
2565   1657 32            mov bl, [d]
2566   1658 A7 00         mov bh, 0
2567   165A             ; START RELATIONAL
2568   165A D7            push a
2569   165B 11            mov a, b
2570   165C 26 5A 00      mov b, $5a
2571   165F B0            cmp a, b
2572   1660 FD 74         sle ; <=
2573   1662 E4            pop a
2574   1663             ; END RELATIONAL
2575   1663 FD A7         sand a, b ; &&
2576   1665 E4            pop a
2577   1666 FD A8         sor a, b ; ||
2578   1668 11            mov a, b
2579   1669 29 4D 29      mov b, [_prog] ; $prog           
2580   166C 74            mov d, b
2581   166D 32            mov bl, [d]
2582   166E A7 00         mov bh, 0
2583   1670             ; START RELATIONAL
2584   1670 D7            push a
2585   1671 11            mov a, b
2586   1672 26 30 00      mov b, $30
2587   1675 B0            cmp a, b
2588   1676 FD 80         sge ; >=
2589   1678 E4            pop a
2590   1679             ; END RELATIONAL
2591   1679 D7            push a
2592   167A 11            mov a, b
2593   167B 29 4D 29      mov b, [_prog] ; $prog           
2594   167E 74            mov d, b
2595   167F 32            mov bl, [d]
2596   1680 A7 00         mov bh, 0
2597   1682             ; START RELATIONAL
2598   1682 D7            push a
2599   1683 11            mov a, b
2600   1684 26 39 00      mov b, $39
2601   1687 B0            cmp a, b
2602   1688 FD 74         sle ; <=
2603   168A E4            pop a
2604   168B             ; END RELATIONAL
2605   168B FD A7         sand a, b ; &&
2606   168D E4            pop a
2607   168E FD A8         sor a, b ; ||
2608   1690 11            mov a, b
2609   1691 29 4D 29      mov b, [_prog] ; $prog           
2610   1694 74            mov d, b
2611   1695 32            mov bl, [d]
2612   1696 A7 00         mov bh, 0
2613   1698             ; START RELATIONAL
2614   1698 D7            push a
2615   1699 11            mov a, b
2616   169A 26 2F 00      mov b, $2f
2617   169D B0            cmp a, b
2618   169E FD 71         seq ; ==
2619   16A0 E4            pop a
2620   16A1             ; END RELATIONAL
2621   16A1 FD A8         sor a, b ; ||
2622   16A3 11            mov a, b
2623   16A4 29 4D 29      mov b, [_prog] ; $prog           
2624   16A7 74            mov d, b
2625   16A8 32            mov bl, [d]
2626   16A9 A7 00         mov bh, 0
2627   16AB             ; START RELATIONAL
2628   16AB D7            push a
2629   16AC 11            mov a, b
2630   16AD 26 5F 00      mov b, $5f
2631   16B0 B0            cmp a, b
2632   16B1 FD 71         seq ; ==
2633   16B3 E4            pop a
2634   16B4             ; END RELATIONAL
2635   16B4 FD A8         sor a, b ; ||
2636   16B6 11            mov a, b
2637   16B7 29 4D 29      mov b, [_prog] ; $prog           
2638   16BA 74            mov d, b
2639   16BB 32            mov bl, [d]
2640   16BC A7 00         mov bh, 0
2641   16BE             ; START RELATIONAL
2642   16BE D7            push a
2643   16BF 11            mov a, b
2644   16C0 26 2D 00      mov b, $2d
2645   16C3 B0            cmp a, b
2646   16C4 FD 71         seq ; ==
2647   16C6 E4            pop a
2648   16C7             ; END RELATIONAL
2649   16C7 FD A8         sor a, b ; ||
2650   16C9 11            mov a, b
2651   16CA 29 4D 29      mov b, [_prog] ; $prog           
2652   16CD 74            mov d, b
2653   16CE 32            mov bl, [d]
2654   16CF A7 00         mov bh, 0
2655   16D1             ; START RELATIONAL
2656   16D1 D7            push a
2657   16D2 11            mov a, b
2658   16D3 26 2E 00      mov b, $2e
2659   16D6 B0            cmp a, b
2660   16D7 FD 71         seq ; ==
2661   16D9 E4            pop a
2662   16DA             ; END RELATIONAL
2663   16DA FD A8         sor a, b ; ||
2664   16DC E4            pop a
2665   16DD C0 00 00      cmp b, 0
2666   16E0 C6 0A 17      je _while35_exit
2667   16E3             _while35_block:
2668   16E3             ;; *t++ = *prog++; 
2669   16E3 2C FF FF      mov b, [bp + -1] ; $t             
2670   16E6 FD 79         mov g, b
2671   16E8 FD 77         inc b
2672   16EA FA FF FF      lea d, [bp + -1] ; $t
2673   16ED FD 43         mov [d], b
2674   16EF FD 27         mov b, g
2675   16F1 D8            push b
2676   16F2 29 4D 29      mov b, [_prog] ; $prog           
2677   16F5 FD 79         mov g, b
2678   16F7 FD 77         inc b
2679   16F9 3B 4D 29      mov d, _prog ; $prog
2680   16FC FD 43         mov [d], b
2681   16FE FD 27         mov b, g
2682   1700 74            mov d, b
2683   1701 32            mov bl, [d]
2684   1702 A7 00         mov bh, 0
2685   1704 E7            pop d
2686   1705 FD 3E         mov [d], bl
2687   1707 0A 1A 16      jmp _while35_cond
2688   170A             _while35_exit:
2689   170A             ;; *t = '\0'; 
2690   170A 2C FF FF      mov b, [bp + -1] ; $t             
2691   170D D8            push b
2692   170E 26 00 00      mov b, $0
2693   1711 E7            pop d
2694   1712 FD 3E         mov [d], bl
2695   1714 F9            leave
2696   1715 09            ret
2697   1716             
2698   1716             get:
2699   1716 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2700   1719             ; $t 
2701   1719 52 02 00      sub sp, 2
2702   171C             ;; *token = '\0'; 
2703   171C 26 4F 29      mov b, _token_data ; $token           
2704   171F D8            push b
2705   1720 26 00 00      mov b, $0
2706   1723 E7            pop d
2707   1724 FD 3E         mov [d], bl
2708   1726             ;; tok = 0; 
2709   1726 3B 49 29      mov d, _tok ; $tok         
2710   1729 26 00 00      mov b, $0        
2711   172C FD 43         mov [d], b
2712   172E             ;; toktype = 0; 
2713   172E 3B 4B 29      mov d, _toktype ; $toktype         
2714   1731 26 00 00      mov b, $0        
2715   1734 FD 43         mov [d], b
2716   1736             ;; t = token; 
2717   1736 FA FF FF      lea d, [bp + -1] ; $t         
2718   1739 26 4F 29      mov b, _token_data ; $token                   
2719   173C FD 43         mov [d], b
2720   173E             ;; while(is_space(*prog)) prog++; 
2721   173E             _while36_cond:
2722   173E 29 4D 29      mov b, [_prog] ; $prog           
2723   1741 74            mov d, b
2724   1742 32            mov bl, [d]
2725   1743 A7 00         mov bh, 0
2726   1745 DD            push bl
2727   1746 07 B3 06      call is_space
2728   1749 51 01 00      add sp, 1
2729   174C C0 00 00      cmp b, 0
2730   174F C6 63 17      je _while36_exit
2731   1752             _while36_block:
2732   1752             ;; prog++; 
2733   1752 29 4D 29      mov b, [_prog] ; $prog           
2734   1755 FD 79         mov g, b
2735   1757 FD 77         inc b
2736   1759 3B 4D 29      mov d, _prog ; $prog
2737   175C FD 43         mov [d], b
2738   175E FD 27         mov b, g
2739   1760 0A 3E 17      jmp _while36_cond
2740   1763             _while36_exit:
2741   1763             ;; if(*prog == '\0'){ 
2742   1763             _if37_cond:
2743   1763 29 4D 29      mov b, [_prog] ; $prog           
2744   1766 74            mov d, b
2745   1767 32            mov bl, [d]
2746   1768 A7 00         mov bh, 0
2747   176A             ; START RELATIONAL
2748   176A D7            push a
2749   176B 11            mov a, b
2750   176C 26 00 00      mov b, $0
2751   176F B0            cmp a, b
2752   1770 FD 71         seq ; ==
2753   1772 E4            pop a
2754   1773             ; END RELATIONAL
2755   1773 C0 00 00      cmp b, 0
2756   1776 C6 86 17      je _if37_exit
2757   1779             _if37_true:
2758   1779             ;; toktype = END; 
2759   1779 3B 4B 29      mov d, _toktype ; $toktype         
2760   177C 26 06 00      mov b, 6; END        
2761   177F FD 43         mov [d], b
2762   1781             ;; return; 
2763   1781 F9            leave
2764   1782 09            ret
2765   1783 0A 86 17      jmp _if37_exit
2766   1786             _if37_exit:
2767   1786             ;; if(is_digit(*prog)){ 
2768   1786             _if38_cond:
2769   1786 29 4D 29      mov b, [_prog] ; $prog           
2770   1789 74            mov d, b
2771   178A 32            mov bl, [d]
2772   178B A7 00         mov bh, 0
2773   178D DD            push bl
2774   178E 07 FB 06      call is_digit
2775   1791 51 01 00      add sp, 1
2776   1794 C0 00 00      cmp b, 0
2777   1797 C6 EC 17      je _if38_else
2778   179A             _if38_true:
2779   179A             ;; while(is_digit(*prog)){ 
2780   179A             _while39_cond:
2781   179A 29 4D 29      mov b, [_prog] ; $prog           
2782   179D 74            mov d, b
2783   179E 32            mov bl, [d]
2784   179F A7 00         mov bh, 0
2785   17A1 DD            push bl
2786   17A2 07 FB 06      call is_digit
2787   17A5 51 01 00      add sp, 1
2788   17A8 C0 00 00      cmp b, 0
2789   17AB C6 D5 17      je _while39_exit
2790   17AE             _while39_block:
2791   17AE             ;; *t++ = *prog++; 
2792   17AE 2C FF FF      mov b, [bp + -1] ; $t             
2793   17B1 FD 79         mov g, b
2794   17B3 FD 77         inc b
2795   17B5 FA FF FF      lea d, [bp + -1] ; $t
2796   17B8 FD 43         mov [d], b
2797   17BA FD 27         mov b, g
2798   17BC D8            push b
2799   17BD 29 4D 29      mov b, [_prog] ; $prog           
2800   17C0 FD 79         mov g, b
2801   17C2 FD 77         inc b
2802   17C4 3B 4D 29      mov d, _prog ; $prog
2803   17C7 FD 43         mov [d], b
2804   17C9 FD 27         mov b, g
2805   17CB 74            mov d, b
2806   17CC 32            mov bl, [d]
2807   17CD A7 00         mov bh, 0
2808   17CF E7            pop d
2809   17D0 FD 3E         mov [d], bl
2810   17D2 0A 9A 17      jmp _while39_cond
2811   17D5             _while39_exit:
2812   17D5             ;; *t = '\0'; 
2813   17D5 2C FF FF      mov b, [bp + -1] ; $t             
2814   17D8 D8            push b
2815   17D9 26 00 00      mov b, $0
2816   17DC E7            pop d
2817   17DD FD 3E         mov [d], bl
2818   17DF             ;; toktype = INTEGER_CONST; 
2819   17DF 3B 4B 29      mov d, _toktype ; $toktype         
2820   17E2 26 04 00      mov b, 4; INTEGER_CONST        
2821   17E5 FD 43         mov [d], b
2822   17E7             ;; return; // return to avoid *t = '\0' line at the end of function 
2823   17E7 F9            leave
2824   17E8 09            ret
2825   17E9 0A C9 23      jmp _if38_exit
2826   17EC             _if38_else:
2827   17EC             ;; if(is_alpha(*prog)){ 
2828   17EC             _if40_cond:
2829   17EC 29 4D 29      mov b, [_prog] ; $prog           
2830   17EF 74            mov d, b
2831   17F0 32            mov bl, [d]
2832   17F1 A7 00         mov bh, 0
2833   17F3 DD            push bl
2834   17F4 07 21 07      call is_alpha
2835   17F7 51 01 00      add sp, 1
2836   17FA C0 00 00      cmp b, 0
2837   17FD C6 63 18      je _if40_else
2838   1800             _if40_true:
2839   1800             ;; while(is_alpha(*prog) || is_digit(*prog)){ 
2840   1800             _while41_cond:
2841   1800 29 4D 29      mov b, [_prog] ; $prog           
2842   1803 74            mov d, b
2843   1804 32            mov bl, [d]
2844   1805 A7 00         mov bh, 0
2845   1807 DD            push bl
2846   1808 07 21 07      call is_alpha
2847   180B 51 01 00      add sp, 1
2848   180E D7            push a
2849   180F 11            mov a, b
2850   1810 29 4D 29      mov b, [_prog] ; $prog           
2851   1813 74            mov d, b
2852   1814 32            mov bl, [d]
2853   1815 A7 00         mov bh, 0
2854   1817 DD            push bl
2855   1818 07 FB 06      call is_digit
2856   181B 51 01 00      add sp, 1
2857   181E FD A8         sor a, b ; ||
2858   1820 E4            pop a
2859   1821 C0 00 00      cmp b, 0
2860   1824 C6 4E 18      je _while41_exit
2861   1827             _while41_block:
2862   1827             ;; *t++ = *prog++; 
2863   1827 2C FF FF      mov b, [bp + -1] ; $t             
2864   182A FD 79         mov g, b
2865   182C FD 77         inc b
2866   182E FA FF FF      lea d, [bp + -1] ; $t
2867   1831 FD 43         mov [d], b
2868   1833 FD 27         mov b, g
2869   1835 D8            push b
2870   1836 29 4D 29      mov b, [_prog] ; $prog           
2871   1839 FD 79         mov g, b
2872   183B FD 77         inc b
2873   183D 3B 4D 29      mov d, _prog ; $prog
2874   1840 FD 43         mov [d], b
2875   1842 FD 27         mov b, g
2876   1844 74            mov d, b
2877   1845 32            mov bl, [d]
2878   1846 A7 00         mov bh, 0
2879   1848 E7            pop d
2880   1849 FD 3E         mov [d], bl
2881   184B 0A 00 18      jmp _while41_cond
2882   184E             _while41_exit:
2883   184E             ;; *t = '\0'; 
2884   184E 2C FF FF      mov b, [bp + -1] ; $t             
2885   1851 D8            push b
2886   1852 26 00 00      mov b, $0
2887   1855 E7            pop d
2888   1856 FD 3E         mov [d], bl
2889   1858             ;; toktype = IDENTIFIER; 
2890   1858 3B 4B 29      mov d, _toktype ; $toktype         
2891   185B 26 05 00      mov b, 5; IDENTIFIER        
2892   185E FD 43         mov [d], b
2893   1860 0A C9 23      jmp _if40_exit
2894   1863             _if40_else:
2895   1863             ;; if(*prog == '\"'){ 
2896   1863             _if42_cond:
2897   1863 29 4D 29      mov b, [_prog] ; $prog           
2898   1866 74            mov d, b
2899   1867 32            mov bl, [d]
2900   1868 A7 00         mov bh, 0
2901   186A             ; START RELATIONAL
2902   186A D7            push a
2903   186B 11            mov a, b
2904   186C 26 22 00      mov b, $22
2905   186F B0            cmp a, b
2906   1870 FD 71         seq ; ==
2907   1872 E4            pop a
2908   1873             ; END RELATIONAL
2909   1873 C0 00 00      cmp b, 0
2910   1876 C6 45 19      je _if42_else
2911   1879             _if42_true:
2912   1879             ;; *t++ = '\"'; 
2913   1879 2C FF FF      mov b, [bp + -1] ; $t             
2914   187C FD 79         mov g, b
2915   187E FD 77         inc b
2916   1880 FA FF FF      lea d, [bp + -1] ; $t
2917   1883 FD 43         mov [d], b
2918   1885 FD 27         mov b, g
2919   1887 D8            push b
2920   1888 26 22 00      mov b, $22
2921   188B E7            pop d
2922   188C FD 3E         mov [d], bl
2923   188E             ;; prog++; 
2924   188E 29 4D 29      mov b, [_prog] ; $prog           
2925   1891 FD 79         mov g, b
2926   1893 FD 77         inc b
2927   1895 3B 4D 29      mov d, _prog ; $prog
2928   1898 FD 43         mov [d], b
2929   189A FD 27         mov b, g
2930   189C             ;; while(*prog != '\"' && *prog){ 
2931   189C             _while43_cond:
2932   189C 29 4D 29      mov b, [_prog] ; $prog           
2933   189F 74            mov d, b
2934   18A0 32            mov bl, [d]
2935   18A1 A7 00         mov bh, 0
2936   18A3             ; START RELATIONAL
2937   18A3 D7            push a
2938   18A4 11            mov a, b
2939   18A5 26 22 00      mov b, $22
2940   18A8 B0            cmp a, b
2941   18A9 FD 72         sneq ; !=
2942   18AB E4            pop a
2943   18AC             ; END RELATIONAL
2944   18AC D7            push a
2945   18AD 11            mov a, b
2946   18AE 29 4D 29      mov b, [_prog] ; $prog           
2947   18B1 74            mov d, b
2948   18B2 32            mov bl, [d]
2949   18B3 A7 00         mov bh, 0
2950   18B5 FD A7         sand a, b ; &&
2951   18B7 E4            pop a
2952   18B8 C0 00 00      cmp b, 0
2953   18BB C6 E5 18      je _while43_exit
2954   18BE             _while43_block:
2955   18BE             ;; *t++ = *prog++; 
2956   18BE 2C FF FF      mov b, [bp + -1] ; $t             
2957   18C1 FD 79         mov g, b
2958   18C3 FD 77         inc b
2959   18C5 FA FF FF      lea d, [bp + -1] ; $t
2960   18C8 FD 43         mov [d], b
2961   18CA FD 27         mov b, g
2962   18CC D8            push b
2963   18CD 29 4D 29      mov b, [_prog] ; $prog           
2964   18D0 FD 79         mov g, b
2965   18D2 FD 77         inc b
2966   18D4 3B 4D 29      mov d, _prog ; $prog
2967   18D7 FD 43         mov [d], b
2968   18D9 FD 27         mov b, g
2969   18DB 74            mov d, b
2970   18DC 32            mov bl, [d]
2971   18DD A7 00         mov bh, 0
2972   18DF E7            pop d
2973   18E0 FD 3E         mov [d], bl
2974   18E2 0A 9C 18      jmp _while43_cond
2975   18E5             _while43_exit:
2976   18E5             ;; if(*prog != '\"') error("Double quotes expected"); 
2977   18E5             _if44_cond:
2978   18E5 29 4D 29      mov b, [_prog] ; $prog           
2979   18E8 74            mov d, b
2980   18E9 32            mov bl, [d]
2981   18EA A7 00         mov bh, 0
2982   18EC             ; START RELATIONAL
2983   18EC D7            push a
2984   18ED 11            mov a, b
2985   18EE 26 22 00      mov b, $22
2986   18F1 B0            cmp a, b
2987   18F2 FD 72         sneq ; !=
2988   18F4 E4            pop a
2989   18F5             ; END RELATIONAL
2990   18F5 C0 00 00      cmp b, 0
2991   18F8 C6 0A 19      je _if44_exit
2992   18FB             _if44_true:
2993   18FB             ;; error("Double quotes expected"); 
2994   18FB 26 D5 2C      mov b, __s9 ; "Double quotes expected"
2995   18FE FD AB         swp b
2996   1900 D8            push b
2997   1901 07 0C 26      call error
2998   1904 51 02 00      add sp, 2
2999   1907 0A 0A 19      jmp _if44_exit
3000   190A             _if44_exit:
3001   190A             ;; *t++ = '\"'; 
3002   190A 2C FF FF      mov b, [bp + -1] ; $t             
3003   190D FD 79         mov g, b
3004   190F FD 77         inc b
3005   1911 FA FF FF      lea d, [bp + -1] ; $t
3006   1914 FD 43         mov [d], b
3007   1916 FD 27         mov b, g
3008   1918 D8            push b
3009   1919 26 22 00      mov b, $22
3010   191C E7            pop d
3011   191D FD 3E         mov [d], bl
3012   191F             ;; prog++; 
3013   191F 29 4D 29      mov b, [_prog] ; $prog           
3014   1922 FD 79         mov g, b
3015   1924 FD 77         inc b
3016   1926 3B 4D 29      mov d, _prog ; $prog
3017   1929 FD 43         mov [d], b
3018   192B FD 27         mov b, g
3019   192D             ;; toktype = STRING_CONST; 
3020   192D 3B 4B 29      mov d, _toktype ; $toktype         
3021   1930 26 03 00      mov b, 3; STRING_CONST        
3022   1933 FD 43         mov [d], b
3023   1935             ;; *t = '\0'; 
3024   1935 2C FF FF      mov b, [bp + -1] ; $t             
3025   1938 D8            push b
3026   1939 26 00 00      mov b, $0
3027   193C E7            pop d
3028   193D FD 3E         mov [d], bl
3029   193F             ;; convert_constant(); // converts this string token qith quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
3030   193F 07 D5 23      call convert_constant
3031   1942 0A C9 23      jmp _if42_exit
3032   1945             _if42_else:
3033   1945             ;; if(*prog == '#'){ 
3034   1945             _if45_cond:
3035   1945 29 4D 29      mov b, [_prog] ; $prog           
3036   1948 74            mov d, b
3037   1949 32            mov bl, [d]
3038   194A A7 00         mov bh, 0
3039   194C             ; START RELATIONAL
3040   194C D7            push a
3041   194D 11            mov a, b
3042   194E 26 23 00      mov b, $23
3043   1951 B0            cmp a, b
3044   1952 FD 71         seq ; ==
3045   1954 E4            pop a
3046   1955             ; END RELATIONAL
3047   1955 C0 00 00      cmp b, 0
3048   1958 C6 92 19      je _if45_else
3049   195B             _if45_true:
3050   195B             ;; *t++ = *prog++; 
3051   195B 2C FF FF      mov b, [bp + -1] ; $t             
3052   195E FD 79         mov g, b
3053   1960 FD 77         inc b
3054   1962 FA FF FF      lea d, [bp + -1] ; $t
3055   1965 FD 43         mov [d], b
3056   1967 FD 27         mov b, g
3057   1969 D8            push b
3058   196A 29 4D 29      mov b, [_prog] ; $prog           
3059   196D FD 79         mov g, b
3060   196F FD 77         inc b
3061   1971 3B 4D 29      mov d, _prog ; $prog
3062   1974 FD 43         mov [d], b
3063   1976 FD 27         mov b, g
3064   1978 74            mov d, b
3065   1979 32            mov bl, [d]
3066   197A A7 00         mov bh, 0
3067   197C E7            pop d
3068   197D FD 3E         mov [d], bl
3069   197F             ;; tok = HASH; 
3070   197F 3B 49 29      mov d, _tok ; $tok         
3071   1982 26 15 00      mov b, 21; HASH        
3072   1985 FD 43         mov [d], b
3073   1987             ;; toktype = DELIMITER;   
3074   1987 3B 4B 29      mov d, _toktype ; $toktype         
3075   198A 26 01 00      mov b, 1; DELIMITER        
3076   198D FD 43         mov [d], b
3077   198F 0A C9 23      jmp _if45_exit
3078   1992             _if45_else:
3079   1992             ;; if(*prog == '{'){ 
3080   1992             _if46_cond:
3081   1992 29 4D 29      mov b, [_prog] ; $prog           
3082   1995 74            mov d, b
3083   1996 32            mov bl, [d]
3084   1997 A7 00         mov bh, 0
3085   1999             ; START RELATIONAL
3086   1999 D7            push a
3087   199A 11            mov a, b
3088   199B 26 7B 00      mov b, $7b
3089   199E B0            cmp a, b
3090   199F FD 71         seq ; ==
3091   19A1 E4            pop a
3092   19A2             ; END RELATIONAL
3093   19A2 C0 00 00      cmp b, 0
3094   19A5 C6 DF 19      je _if46_else
3095   19A8             _if46_true:
3096   19A8             ;; *t++ = *prog++; 
3097   19A8 2C FF FF      mov b, [bp + -1] ; $t             
3098   19AB FD 79         mov g, b
3099   19AD FD 77         inc b
3100   19AF FA FF FF      lea d, [bp + -1] ; $t
3101   19B2 FD 43         mov [d], b
3102   19B4 FD 27         mov b, g
3103   19B6 D8            push b
3104   19B7 29 4D 29      mov b, [_prog] ; $prog           
3105   19BA FD 79         mov g, b
3106   19BC FD 77         inc b
3107   19BE 3B 4D 29      mov d, _prog ; $prog
3108   19C1 FD 43         mov [d], b
3109   19C3 FD 27         mov b, g
3110   19C5 74            mov d, b
3111   19C6 32            mov bl, [d]
3112   19C7 A7 00         mov bh, 0
3113   19C9 E7            pop d
3114   19CA FD 3E         mov [d], bl
3115   19CC             ;; tok = OPENING_BRACE; 
3116   19CC 3B 49 29      mov d, _tok ; $tok         
3117   19CF 26 1E 00      mov b, 30; OPENING_BRACE        
3118   19D2 FD 43         mov [d], b
3119   19D4             ;; toktype = DELIMITER;   
3120   19D4 3B 4B 29      mov d, _toktype ; $toktype         
3121   19D7 26 01 00      mov b, 1; DELIMITER        
3122   19DA FD 43         mov [d], b
3123   19DC 0A C9 23      jmp _if46_exit
3124   19DF             _if46_else:
3125   19DF             ;; if(*prog == '}'){ 
3126   19DF             _if47_cond:
3127   19DF 29 4D 29      mov b, [_prog] ; $prog           
3128   19E2 74            mov d, b
3129   19E3 32            mov bl, [d]
3130   19E4 A7 00         mov bh, 0
3131   19E6             ; START RELATIONAL
3132   19E6 D7            push a
3133   19E7 11            mov a, b
3134   19E8 26 7D 00      mov b, $7d
3135   19EB B0            cmp a, b
3136   19EC FD 71         seq ; ==
3137   19EE E4            pop a
3138   19EF             ; END RELATIONAL
3139   19EF C0 00 00      cmp b, 0
3140   19F2 C6 2C 1A      je _if47_else
3141   19F5             _if47_true:
3142   19F5             ;; *t++ = *prog++; 
3143   19F5 2C FF FF      mov b, [bp + -1] ; $t             
3144   19F8 FD 79         mov g, b
3145   19FA FD 77         inc b
3146   19FC FA FF FF      lea d, [bp + -1] ; $t
3147   19FF FD 43         mov [d], b
3148   1A01 FD 27         mov b, g
3149   1A03 D8            push b
3150   1A04 29 4D 29      mov b, [_prog] ; $prog           
3151   1A07 FD 79         mov g, b
3152   1A09 FD 77         inc b
3153   1A0B 3B 4D 29      mov d, _prog ; $prog
3154   1A0E FD 43         mov [d], b
3155   1A10 FD 27         mov b, g
3156   1A12 74            mov d, b
3157   1A13 32            mov bl, [d]
3158   1A14 A7 00         mov bh, 0
3159   1A16 E7            pop d
3160   1A17 FD 3E         mov [d], bl
3161   1A19             ;; tok = CLOSING_BRACE; 
3162   1A19 3B 49 29      mov d, _tok ; $tok         
3163   1A1C 26 1F 00      mov b, 31; CLOSING_BRACE        
3164   1A1F FD 43         mov [d], b
3165   1A21             ;; toktype = DELIMITER;   
3166   1A21 3B 4B 29      mov d, _toktype ; $toktype         
3167   1A24 26 01 00      mov b, 1; DELIMITER        
3168   1A27 FD 43         mov [d], b
3169   1A29 0A C9 23      jmp _if47_exit
3170   1A2C             _if47_else:
3171   1A2C             ;; if(*prog == '['){ 
3172   1A2C             _if48_cond:
3173   1A2C 29 4D 29      mov b, [_prog] ; $prog           
3174   1A2F 74            mov d, b
3175   1A30 32            mov bl, [d]
3176   1A31 A7 00         mov bh, 0
3177   1A33             ; START RELATIONAL
3178   1A33 D7            push a
3179   1A34 11            mov a, b
3180   1A35 26 5B 00      mov b, $5b
3181   1A38 B0            cmp a, b
3182   1A39 FD 71         seq ; ==
3183   1A3B E4            pop a
3184   1A3C             ; END RELATIONAL
3185   1A3C C0 00 00      cmp b, 0
3186   1A3F C6 79 1A      je _if48_else
3187   1A42             _if48_true:
3188   1A42             ;; *t++ = *prog++; 
3189   1A42 2C FF FF      mov b, [bp + -1] ; $t             
3190   1A45 FD 79         mov g, b
3191   1A47 FD 77         inc b
3192   1A49 FA FF FF      lea d, [bp + -1] ; $t
3193   1A4C FD 43         mov [d], b
3194   1A4E FD 27         mov b, g
3195   1A50 D8            push b
3196   1A51 29 4D 29      mov b, [_prog] ; $prog           
3197   1A54 FD 79         mov g, b
3198   1A56 FD 77         inc b
3199   1A58 3B 4D 29      mov d, _prog ; $prog
3200   1A5B FD 43         mov [d], b
3201   1A5D FD 27         mov b, g
3202   1A5F 74            mov d, b
3203   1A60 32            mov bl, [d]
3204   1A61 A7 00         mov bh, 0
3205   1A63 E7            pop d
3206   1A64 FD 3E         mov [d], bl
3207   1A66             ;; tok = OPENING_BRACKET; 
3208   1A66 3B 49 29      mov d, _tok ; $tok         
3209   1A69 26 20 00      mov b, 32; OPENING_BRACKET        
3210   1A6C FD 43         mov [d], b
3211   1A6E             ;; toktype = DELIMITER;   
3212   1A6E 3B 4B 29      mov d, _toktype ; $toktype         
3213   1A71 26 01 00      mov b, 1; DELIMITER        
3214   1A74 FD 43         mov [d], b
3215   1A76 0A C9 23      jmp _if48_exit
3216   1A79             _if48_else:
3217   1A79             ;; if(*prog == ']'){ 
3218   1A79             _if49_cond:
3219   1A79 29 4D 29      mov b, [_prog] ; $prog           
3220   1A7C 74            mov d, b
3221   1A7D 32            mov bl, [d]
3222   1A7E A7 00         mov bh, 0
3223   1A80             ; START RELATIONAL
3224   1A80 D7            push a
3225   1A81 11            mov a, b
3226   1A82 26 5D 00      mov b, $5d
3227   1A85 B0            cmp a, b
3228   1A86 FD 71         seq ; ==
3229   1A88 E4            pop a
3230   1A89             ; END RELATIONAL
3231   1A89 C0 00 00      cmp b, 0
3232   1A8C C6 C6 1A      je _if49_else
3233   1A8F             _if49_true:
3234   1A8F             ;; *t++ = *prog++; 
3235   1A8F 2C FF FF      mov b, [bp + -1] ; $t             
3236   1A92 FD 79         mov g, b
3237   1A94 FD 77         inc b
3238   1A96 FA FF FF      lea d, [bp + -1] ; $t
3239   1A99 FD 43         mov [d], b
3240   1A9B FD 27         mov b, g
3241   1A9D D8            push b
3242   1A9E 29 4D 29      mov b, [_prog] ; $prog           
3243   1AA1 FD 79         mov g, b
3244   1AA3 FD 77         inc b
3245   1AA5 3B 4D 29      mov d, _prog ; $prog
3246   1AA8 FD 43         mov [d], b
3247   1AAA FD 27         mov b, g
3248   1AAC 74            mov d, b
3249   1AAD 32            mov bl, [d]
3250   1AAE A7 00         mov bh, 0
3251   1AB0 E7            pop d
3252   1AB1 FD 3E         mov [d], bl
3253   1AB3             ;; tok = CLOSING_BRACKET; 
3254   1AB3 3B 49 29      mov d, _tok ; $tok         
3255   1AB6 26 21 00      mov b, 33; CLOSING_BRACKET        
3256   1AB9 FD 43         mov [d], b
3257   1ABB             ;; toktype = DELIMITER;   
3258   1ABB 3B 4B 29      mov d, _toktype ; $toktype         
3259   1ABE 26 01 00      mov b, 1; DELIMITER        
3260   1AC1 FD 43         mov [d], b
3261   1AC3 0A C9 23      jmp _if49_exit
3262   1AC6             _if49_else:
3263   1AC6             ;; if(*prog == '='){ 
3264   1AC6             _if50_cond:
3265   1AC6 29 4D 29      mov b, [_prog] ; $prog           
3266   1AC9 74            mov d, b
3267   1ACA 32            mov bl, [d]
3268   1ACB A7 00         mov bh, 0
3269   1ACD             ; START RELATIONAL
3270   1ACD D7            push a
3271   1ACE 11            mov a, b
3272   1ACF 26 3D 00      mov b, $3d
3273   1AD2 B0            cmp a, b
3274   1AD3 FD 71         seq ; ==
3275   1AD5 E4            pop a
3276   1AD6             ; END RELATIONAL
3277   1AD6 C0 00 00      cmp b, 0
3278   1AD9 C6 58 1B      je _if50_else
3279   1ADC             _if50_true:
3280   1ADC             ;; *t++ = *prog++; 
3281   1ADC 2C FF FF      mov b, [bp + -1] ; $t             
3282   1ADF FD 79         mov g, b
3283   1AE1 FD 77         inc b
3284   1AE3 FA FF FF      lea d, [bp + -1] ; $t
3285   1AE6 FD 43         mov [d], b
3286   1AE8 FD 27         mov b, g
3287   1AEA D8            push b
3288   1AEB 29 4D 29      mov b, [_prog] ; $prog           
3289   1AEE FD 79         mov g, b
3290   1AF0 FD 77         inc b
3291   1AF2 3B 4D 29      mov d, _prog ; $prog
3292   1AF5 FD 43         mov [d], b
3293   1AF7 FD 27         mov b, g
3294   1AF9 74            mov d, b
3295   1AFA 32            mov bl, [d]
3296   1AFB A7 00         mov bh, 0
3297   1AFD E7            pop d
3298   1AFE FD 3E         mov [d], bl
3299   1B00             ;; if (*prog == '='){ 
3300   1B00             _if51_cond:
3301   1B00 29 4D 29      mov b, [_prog] ; $prog           
3302   1B03 74            mov d, b
3303   1B04 32            mov bl, [d]
3304   1B05 A7 00         mov bh, 0
3305   1B07             ; START RELATIONAL
3306   1B07 D7            push a
3307   1B08 11            mov a, b
3308   1B09 26 3D 00      mov b, $3d
3309   1B0C B0            cmp a, b
3310   1B0D FD 71         seq ; ==
3311   1B0F E4            pop a
3312   1B10             ; END RELATIONAL
3313   1B10 C0 00 00      cmp b, 0
3314   1B13 C6 45 1B      je _if51_else
3315   1B16             _if51_true:
3316   1B16             ;; *t++ = *prog++; 
3317   1B16 2C FF FF      mov b, [bp + -1] ; $t             
3318   1B19 FD 79         mov g, b
3319   1B1B FD 77         inc b
3320   1B1D FA FF FF      lea d, [bp + -1] ; $t
3321   1B20 FD 43         mov [d], b
3322   1B22 FD 27         mov b, g
3323   1B24 D8            push b
3324   1B25 29 4D 29      mov b, [_prog] ; $prog           
3325   1B28 FD 79         mov g, b
3326   1B2A FD 77         inc b
3327   1B2C 3B 4D 29      mov d, _prog ; $prog
3328   1B2F FD 43         mov [d], b
3329   1B31 FD 27         mov b, g
3330   1B33 74            mov d, b
3331   1B34 32            mov bl, [d]
3332   1B35 A7 00         mov bh, 0
3333   1B37 E7            pop d
3334   1B38 FD 3E         mov [d], bl
3335   1B3A             ;; tok = EQUAL; 
3336   1B3A 3B 49 29      mov d, _tok ; $tok         
3337   1B3D 26 08 00      mov b, 8; EQUAL        
3338   1B40 FD 43         mov [d], b
3339   1B42 0A 4D 1B      jmp _if51_exit
3340   1B45             _if51_else:
3341   1B45             ;; tok = ASSIGNMENT; 
3342   1B45 3B 49 29      mov d, _tok ; $tok         
3343   1B48 26 11 00      mov b, 17; ASSIGNMENT        
3344   1B4B FD 43         mov [d], b
3345   1B4D             _if51_exit:
3346   1B4D             ;; toktype = DELIMITER;   
3347   1B4D 3B 4B 29      mov d, _toktype ; $toktype         
3348   1B50 26 01 00      mov b, 1; DELIMITER        
3349   1B53 FD 43         mov [d], b
3350   1B55 0A C9 23      jmp _if50_exit
3351   1B58             _if50_else:
3352   1B58             ;; if(*prog == '&'){ 
3353   1B58             _if52_cond:
3354   1B58 29 4D 29      mov b, [_prog] ; $prog           
3355   1B5B 74            mov d, b
3356   1B5C 32            mov bl, [d]
3357   1B5D A7 00         mov bh, 0
3358   1B5F             ; START RELATIONAL
3359   1B5F D7            push a
3360   1B60 11            mov a, b
3361   1B61 26 26 00      mov b, $26
3362   1B64 B0            cmp a, b
3363   1B65 FD 71         seq ; ==
3364   1B67 E4            pop a
3365   1B68             ; END RELATIONAL
3366   1B68 C0 00 00      cmp b, 0
3367   1B6B C6 EA 1B      je _if52_else
3368   1B6E             _if52_true:
3369   1B6E             ;; *t++ = *prog++; 
3370   1B6E 2C FF FF      mov b, [bp + -1] ; $t             
3371   1B71 FD 79         mov g, b
3372   1B73 FD 77         inc b
3373   1B75 FA FF FF      lea d, [bp + -1] ; $t
3374   1B78 FD 43         mov [d], b
3375   1B7A FD 27         mov b, g
3376   1B7C D8            push b
3377   1B7D 29 4D 29      mov b, [_prog] ; $prog           
3378   1B80 FD 79         mov g, b
3379   1B82 FD 77         inc b
3380   1B84 3B 4D 29      mov d, _prog ; $prog
3381   1B87 FD 43         mov [d], b
3382   1B89 FD 27         mov b, g
3383   1B8B 74            mov d, b
3384   1B8C 32            mov bl, [d]
3385   1B8D A7 00         mov bh, 0
3386   1B8F E7            pop d
3387   1B90 FD 3E         mov [d], bl
3388   1B92             ;; if(*prog == '&'){ 
3389   1B92             _if53_cond:
3390   1B92 29 4D 29      mov b, [_prog] ; $prog           
3391   1B95 74            mov d, b
3392   1B96 32            mov bl, [d]
3393   1B97 A7 00         mov bh, 0
3394   1B99             ; START RELATIONAL
3395   1B99 D7            push a
3396   1B9A 11            mov a, b
3397   1B9B 26 26 00      mov b, $26
3398   1B9E B0            cmp a, b
3399   1B9F FD 71         seq ; ==
3400   1BA1 E4            pop a
3401   1BA2             ; END RELATIONAL
3402   1BA2 C0 00 00      cmp b, 0
3403   1BA5 C6 D7 1B      je _if53_else
3404   1BA8             _if53_true:
3405   1BA8             ;; *t++ = *prog++; 
3406   1BA8 2C FF FF      mov b, [bp + -1] ; $t             
3407   1BAB FD 79         mov g, b
3408   1BAD FD 77         inc b
3409   1BAF FA FF FF      lea d, [bp + -1] ; $t
3410   1BB2 FD 43         mov [d], b
3411   1BB4 FD 27         mov b, g
3412   1BB6 D8            push b
3413   1BB7 29 4D 29      mov b, [_prog] ; $prog           
3414   1BBA FD 79         mov g, b
3415   1BBC FD 77         inc b
3416   1BBE 3B 4D 29      mov d, _prog ; $prog
3417   1BC1 FD 43         mov [d], b
3418   1BC3 FD 27         mov b, g
3419   1BC5 74            mov d, b
3420   1BC6 32            mov bl, [d]
3421   1BC7 A7 00         mov bh, 0
3422   1BC9 E7            pop d
3423   1BCA FD 3E         mov [d], bl
3424   1BCC             ;; tok = LOGICAL_AND; 
3425   1BCC 3B 49 29      mov d, _tok ; $tok         
3426   1BCF 26 0E 00      mov b, 14; LOGICAL_AND        
3427   1BD2 FD 43         mov [d], b
3428   1BD4 0A DF 1B      jmp _if53_exit
3429   1BD7             _if53_else:
3430   1BD7             ;; tok = AMPERSAND; 
3431   1BD7 3B 49 29      mov d, _tok ; $tok         
3432   1BDA 26 16 00      mov b, 22; AMPERSAND        
3433   1BDD FD 43         mov [d], b
3434   1BDF             _if53_exit:
3435   1BDF             ;; toktype = DELIMITER;   
3436   1BDF 3B 4B 29      mov d, _toktype ; $toktype         
3437   1BE2 26 01 00      mov b, 1; DELIMITER        
3438   1BE5 FD 43         mov [d], b
3439   1BE7 0A C9 23      jmp _if52_exit
3440   1BEA             _if52_else:
3441   1BEA             ;; if(*prog == '|'){ 
3442   1BEA             _if54_cond:
3443   1BEA 29 4D 29      mov b, [_prog] ; $prog           
3444   1BED 74            mov d, b
3445   1BEE 32            mov bl, [d]
3446   1BEF A7 00         mov bh, 0
3447   1BF1             ; START RELATIONAL
3448   1BF1 D7            push a
3449   1BF2 11            mov a, b
3450   1BF3 26 7C 00      mov b, $7c
3451   1BF6 B0            cmp a, b
3452   1BF7 FD 71         seq ; ==
3453   1BF9 E4            pop a
3454   1BFA             ; END RELATIONAL
3455   1BFA C0 00 00      cmp b, 0
3456   1BFD C6 7C 1C      je _if54_else
3457   1C00             _if54_true:
3458   1C00             ;; *t++ = *prog++; 
3459   1C00 2C FF FF      mov b, [bp + -1] ; $t             
3460   1C03 FD 79         mov g, b
3461   1C05 FD 77         inc b
3462   1C07 FA FF FF      lea d, [bp + -1] ; $t
3463   1C0A FD 43         mov [d], b
3464   1C0C FD 27         mov b, g
3465   1C0E D8            push b
3466   1C0F 29 4D 29      mov b, [_prog] ; $prog           
3467   1C12 FD 79         mov g, b
3468   1C14 FD 77         inc b
3469   1C16 3B 4D 29      mov d, _prog ; $prog
3470   1C19 FD 43         mov [d], b
3471   1C1B FD 27         mov b, g
3472   1C1D 74            mov d, b
3473   1C1E 32            mov bl, [d]
3474   1C1F A7 00         mov bh, 0
3475   1C21 E7            pop d
3476   1C22 FD 3E         mov [d], bl
3477   1C24             ;; if (*prog == '|'){ 
3478   1C24             _if55_cond:
3479   1C24 29 4D 29      mov b, [_prog] ; $prog           
3480   1C27 74            mov d, b
3481   1C28 32            mov bl, [d]
3482   1C29 A7 00         mov bh, 0
3483   1C2B             ; START RELATIONAL
3484   1C2B D7            push a
3485   1C2C 11            mov a, b
3486   1C2D 26 7C 00      mov b, $7c
3487   1C30 B0            cmp a, b
3488   1C31 FD 71         seq ; ==
3489   1C33 E4            pop a
3490   1C34             ; END RELATIONAL
3491   1C34 C0 00 00      cmp b, 0
3492   1C37 C6 69 1C      je _if55_else
3493   1C3A             _if55_true:
3494   1C3A             ;; *t++ = *prog++; 
3495   1C3A 2C FF FF      mov b, [bp + -1] ; $t             
3496   1C3D FD 79         mov g, b
3497   1C3F FD 77         inc b
3498   1C41 FA FF FF      lea d, [bp + -1] ; $t
3499   1C44 FD 43         mov [d], b
3500   1C46 FD 27         mov b, g
3501   1C48 D8            push b
3502   1C49 29 4D 29      mov b, [_prog] ; $prog           
3503   1C4C FD 79         mov g, b
3504   1C4E FD 77         inc b
3505   1C50 3B 4D 29      mov d, _prog ; $prog
3506   1C53 FD 43         mov [d], b
3507   1C55 FD 27         mov b, g
3508   1C57 74            mov d, b
3509   1C58 32            mov bl, [d]
3510   1C59 A7 00         mov bh, 0
3511   1C5B E7            pop d
3512   1C5C FD 3E         mov [d], bl
3513   1C5E             ;; tok = LOGICAL_OR; 
3514   1C5E 3B 49 29      mov d, _tok ; $tok         
3515   1C61 26 0F 00      mov b, 15; LOGICAL_OR        
3516   1C64 FD 43         mov [d], b
3517   1C66 0A 71 1C      jmp _if55_exit
3518   1C69             _if55_else:
3519   1C69             ;; tok = BITWISE_OR; 
3520   1C69 3B 49 29      mov d, _tok ; $tok         
3521   1C6C 26 18 00      mov b, 24; BITWISE_OR        
3522   1C6F FD 43         mov [d], b
3523   1C71             _if55_exit:
3524   1C71             ;; toktype = DELIMITER;   
3525   1C71 3B 4B 29      mov d, _toktype ; $toktype         
3526   1C74 26 01 00      mov b, 1; DELIMITER        
3527   1C77 FD 43         mov [d], b
3528   1C79 0A C9 23      jmp _if54_exit
3529   1C7C             _if54_else:
3530   1C7C             ;; if(*prog == '~'){ 
3531   1C7C             _if56_cond:
3532   1C7C 29 4D 29      mov b, [_prog] ; $prog           
3533   1C7F 74            mov d, b
3534   1C80 32            mov bl, [d]
3535   1C81 A7 00         mov bh, 0
3536   1C83             ; START RELATIONAL
3537   1C83 D7            push a
3538   1C84 11            mov a, b
3539   1C85 26 7E 00      mov b, $7e
3540   1C88 B0            cmp a, b
3541   1C89 FD 71         seq ; ==
3542   1C8B E4            pop a
3543   1C8C             ; END RELATIONAL
3544   1C8C C0 00 00      cmp b, 0
3545   1C8F C6 C9 1C      je _if56_else
3546   1C92             _if56_true:
3547   1C92             ;; *t++ = *prog++; 
3548   1C92 2C FF FF      mov b, [bp + -1] ; $t             
3549   1C95 FD 79         mov g, b
3550   1C97 FD 77         inc b
3551   1C99 FA FF FF      lea d, [bp + -1] ; $t
3552   1C9C FD 43         mov [d], b
3553   1C9E FD 27         mov b, g
3554   1CA0 D8            push b
3555   1CA1 29 4D 29      mov b, [_prog] ; $prog           
3556   1CA4 FD 79         mov g, b
3557   1CA6 FD 77         inc b
3558   1CA8 3B 4D 29      mov d, _prog ; $prog
3559   1CAB FD 43         mov [d], b
3560   1CAD FD 27         mov b, g
3561   1CAF 74            mov d, b
3562   1CB0 32            mov bl, [d]
3563   1CB1 A7 00         mov bh, 0
3564   1CB3 E7            pop d
3565   1CB4 FD 3E         mov [d], bl
3566   1CB6             ;; tok = BITWISE_NOT; 
3567   1CB6 3B 49 29      mov d, _tok ; $tok         
3568   1CB9 26 19 00      mov b, 25; BITWISE_NOT        
3569   1CBC FD 43         mov [d], b
3570   1CBE             ;; toktype = DELIMITER;   
3571   1CBE 3B 4B 29      mov d, _toktype ; $toktype         
3572   1CC1 26 01 00      mov b, 1; DELIMITER        
3573   1CC4 FD 43         mov [d], b
3574   1CC6 0A C9 23      jmp _if56_exit
3575   1CC9             _if56_else:
3576   1CC9             ;; if(*prog == '<'){ 
3577   1CC9             _if57_cond:
3578   1CC9 29 4D 29      mov b, [_prog] ; $prog           
3579   1CCC 74            mov d, b
3580   1CCD 32            mov bl, [d]
3581   1CCE A7 00         mov bh, 0
3582   1CD0             ; START RELATIONAL
3583   1CD0 D7            push a
3584   1CD1 11            mov a, b
3585   1CD2 26 3C 00      mov b, $3c
3586   1CD5 B0            cmp a, b
3587   1CD6 FD 71         seq ; ==
3588   1CD8 E4            pop a
3589   1CD9             ; END RELATIONAL
3590   1CD9 C0 00 00      cmp b, 0
3591   1CDC C6 A0 1D      je _if57_else
3592   1CDF             _if57_true:
3593   1CDF             ;; *t++ = *prog++; 
3594   1CDF 2C FF FF      mov b, [bp + -1] ; $t             
3595   1CE2 FD 79         mov g, b
3596   1CE4 FD 77         inc b
3597   1CE6 FA FF FF      lea d, [bp + -1] ; $t
3598   1CE9 FD 43         mov [d], b
3599   1CEB FD 27         mov b, g
3600   1CED D8            push b
3601   1CEE 29 4D 29      mov b, [_prog] ; $prog           
3602   1CF1 FD 79         mov g, b
3603   1CF3 FD 77         inc b
3604   1CF5 3B 4D 29      mov d, _prog ; $prog
3605   1CF8 FD 43         mov [d], b
3606   1CFA FD 27         mov b, g
3607   1CFC 74            mov d, b
3608   1CFD 32            mov bl, [d]
3609   1CFE A7 00         mov bh, 0
3610   1D00 E7            pop d
3611   1D01 FD 3E         mov [d], bl
3612   1D03             ;; if (*prog == '='){ 
3613   1D03             _if58_cond:
3614   1D03 29 4D 29      mov b, [_prog] ; $prog           
3615   1D06 74            mov d, b
3616   1D07 32            mov bl, [d]
3617   1D08 A7 00         mov bh, 0
3618   1D0A             ; START RELATIONAL
3619   1D0A D7            push a
3620   1D0B 11            mov a, b
3621   1D0C 26 3D 00      mov b, $3d
3622   1D0F B0            cmp a, b
3623   1D10 FD 71         seq ; ==
3624   1D12 E4            pop a
3625   1D13             ; END RELATIONAL
3626   1D13 C0 00 00      cmp b, 0
3627   1D16 C6 48 1D      je _if58_else
3628   1D19             _if58_true:
3629   1D19             ;; *t++ = *prog++; 
3630   1D19 2C FF FF      mov b, [bp + -1] ; $t             
3631   1D1C FD 79         mov g, b
3632   1D1E FD 77         inc b
3633   1D20 FA FF FF      lea d, [bp + -1] ; $t
3634   1D23 FD 43         mov [d], b
3635   1D25 FD 27         mov b, g
3636   1D27 D8            push b
3637   1D28 29 4D 29      mov b, [_prog] ; $prog           
3638   1D2B FD 79         mov g, b
3639   1D2D FD 77         inc b
3640   1D2F 3B 4D 29      mov d, _prog ; $prog
3641   1D32 FD 43         mov [d], b
3642   1D34 FD 27         mov b, g
3643   1D36 74            mov d, b
3644   1D37 32            mov bl, [d]
3645   1D38 A7 00         mov bh, 0
3646   1D3A E7            pop d
3647   1D3B FD 3E         mov [d], bl
3648   1D3D             ;; tok = LESS_THAN_OR_EQUAL; 
3649   1D3D 3B 49 29      mov d, _tok ; $tok         
3650   1D40 26 0B 00      mov b, 11; LESS_THAN_OR_EQUAL        
3651   1D43 FD 43         mov [d], b
3652   1D45 0A 95 1D      jmp _if58_exit
3653   1D48             _if58_else:
3654   1D48             ;; if (*prog == '<'){ 
3655   1D48             _if59_cond:
3656   1D48 29 4D 29      mov b, [_prog] ; $prog           
3657   1D4B 74            mov d, b
3658   1D4C 32            mov bl, [d]
3659   1D4D A7 00         mov bh, 0
3660   1D4F             ; START RELATIONAL
3661   1D4F D7            push a
3662   1D50 11            mov a, b
3663   1D51 26 3C 00      mov b, $3c
3664   1D54 B0            cmp a, b
3665   1D55 FD 71         seq ; ==
3666   1D57 E4            pop a
3667   1D58             ; END RELATIONAL
3668   1D58 C0 00 00      cmp b, 0
3669   1D5B C6 8D 1D      je _if59_else
3670   1D5E             _if59_true:
3671   1D5E             ;; *t++ = *prog++; 
3672   1D5E 2C FF FF      mov b, [bp + -1] ; $t             
3673   1D61 FD 79         mov g, b
3674   1D63 FD 77         inc b
3675   1D65 FA FF FF      lea d, [bp + -1] ; $t
3676   1D68 FD 43         mov [d], b
3677   1D6A FD 27         mov b, g
3678   1D6C D8            push b
3679   1D6D 29 4D 29      mov b, [_prog] ; $prog           
3680   1D70 FD 79         mov g, b
3681   1D72 FD 77         inc b
3682   1D74 3B 4D 29      mov d, _prog ; $prog
3683   1D77 FD 43         mov [d], b
3684   1D79 FD 27         mov b, g
3685   1D7B 74            mov d, b
3686   1D7C 32            mov bl, [d]
3687   1D7D A7 00         mov bh, 0
3688   1D7F E7            pop d
3689   1D80 FD 3E         mov [d], bl
3690   1D82             ;; tok = BITWISE_SHL; 
3691   1D82 3B 49 29      mov d, _tok ; $tok         
3692   1D85 26 1A 00      mov b, 26; BITWISE_SHL        
3693   1D88 FD 43         mov [d], b
3694   1D8A 0A 95 1D      jmp _if59_exit
3695   1D8D             _if59_else:
3696   1D8D             ;; tok = LESS_THAN; 
3697   1D8D 3B 49 29      mov d, _tok ; $tok         
3698   1D90 26 0A 00      mov b, 10; LESS_THAN        
3699   1D93 FD 43         mov [d], b
3700   1D95             _if59_exit:
3701   1D95             _if58_exit:
3702   1D95             ;; toktype = DELIMITER;   
3703   1D95 3B 4B 29      mov d, _toktype ; $toktype         
3704   1D98 26 01 00      mov b, 1; DELIMITER        
3705   1D9B FD 43         mov [d], b
3706   1D9D 0A C9 23      jmp _if57_exit
3707   1DA0             _if57_else:
3708   1DA0             ;; if(*prog == '>'){ 
3709   1DA0             _if60_cond:
3710   1DA0 29 4D 29      mov b, [_prog] ; $prog           
3711   1DA3 74            mov d, b
3712   1DA4 32            mov bl, [d]
3713   1DA5 A7 00         mov bh, 0
3714   1DA7             ; START RELATIONAL
3715   1DA7 D7            push a
3716   1DA8 11            mov a, b
3717   1DA9 26 3E 00      mov b, $3e
3718   1DAC B0            cmp a, b
3719   1DAD FD 71         seq ; ==
3720   1DAF E4            pop a
3721   1DB0             ; END RELATIONAL
3722   1DB0 C0 00 00      cmp b, 0
3723   1DB3 C6 77 1E      je _if60_else
3724   1DB6             _if60_true:
3725   1DB6             ;; *t++ = *prog++; 
3726   1DB6 2C FF FF      mov b, [bp + -1] ; $t             
3727   1DB9 FD 79         mov g, b
3728   1DBB FD 77         inc b
3729   1DBD FA FF FF      lea d, [bp + -1] ; $t
3730   1DC0 FD 43         mov [d], b
3731   1DC2 FD 27         mov b, g
3732   1DC4 D8            push b
3733   1DC5 29 4D 29      mov b, [_prog] ; $prog           
3734   1DC8 FD 79         mov g, b
3735   1DCA FD 77         inc b
3736   1DCC 3B 4D 29      mov d, _prog ; $prog
3737   1DCF FD 43         mov [d], b
3738   1DD1 FD 27         mov b, g
3739   1DD3 74            mov d, b
3740   1DD4 32            mov bl, [d]
3741   1DD5 A7 00         mov bh, 0
3742   1DD7 E7            pop d
3743   1DD8 FD 3E         mov [d], bl
3744   1DDA             ;; if (*prog == '='){ 
3745   1DDA             _if61_cond:
3746   1DDA 29 4D 29      mov b, [_prog] ; $prog           
3747   1DDD 74            mov d, b
3748   1DDE 32            mov bl, [d]
3749   1DDF A7 00         mov bh, 0
3750   1DE1             ; START RELATIONAL
3751   1DE1 D7            push a
3752   1DE2 11            mov a, b
3753   1DE3 26 3D 00      mov b, $3d
3754   1DE6 B0            cmp a, b
3755   1DE7 FD 71         seq ; ==
3756   1DE9 E4            pop a
3757   1DEA             ; END RELATIONAL
3758   1DEA C0 00 00      cmp b, 0
3759   1DED C6 1F 1E      je _if61_else
3760   1DF0             _if61_true:
3761   1DF0             ;; *t++ = *prog++; 
3762   1DF0 2C FF FF      mov b, [bp + -1] ; $t             
3763   1DF3 FD 79         mov g, b
3764   1DF5 FD 77         inc b
3765   1DF7 FA FF FF      lea d, [bp + -1] ; $t
3766   1DFA FD 43         mov [d], b
3767   1DFC FD 27         mov b, g
3768   1DFE D8            push b
3769   1DFF 29 4D 29      mov b, [_prog] ; $prog           
3770   1E02 FD 79         mov g, b
3771   1E04 FD 77         inc b
3772   1E06 3B 4D 29      mov d, _prog ; $prog
3773   1E09 FD 43         mov [d], b
3774   1E0B FD 27         mov b, g
3775   1E0D 74            mov d, b
3776   1E0E 32            mov bl, [d]
3777   1E0F A7 00         mov bh, 0
3778   1E11 E7            pop d
3779   1E12 FD 3E         mov [d], bl
3780   1E14             ;; tok = GREATER_THAN_OR_EQUAL; 
3781   1E14 3B 49 29      mov d, _tok ; $tok         
3782   1E17 26 0D 00      mov b, 13; GREATER_THAN_OR_EQUAL        
3783   1E1A FD 43         mov [d], b
3784   1E1C 0A 6C 1E      jmp _if61_exit
3785   1E1F             _if61_else:
3786   1E1F             ;; if (*prog == '>'){ 
3787   1E1F             _if62_cond:
3788   1E1F 29 4D 29      mov b, [_prog] ; $prog           
3789   1E22 74            mov d, b
3790   1E23 32            mov bl, [d]
3791   1E24 A7 00         mov bh, 0
3792   1E26             ; START RELATIONAL
3793   1E26 D7            push a
3794   1E27 11            mov a, b
3795   1E28 26 3E 00      mov b, $3e
3796   1E2B B0            cmp a, b
3797   1E2C FD 71         seq ; ==
3798   1E2E E4            pop a
3799   1E2F             ; END RELATIONAL
3800   1E2F C0 00 00      cmp b, 0
3801   1E32 C6 64 1E      je _if62_else
3802   1E35             _if62_true:
3803   1E35             ;; *t++ = *prog++; 
3804   1E35 2C FF FF      mov b, [bp + -1] ; $t             
3805   1E38 FD 79         mov g, b
3806   1E3A FD 77         inc b
3807   1E3C FA FF FF      lea d, [bp + -1] ; $t
3808   1E3F FD 43         mov [d], b
3809   1E41 FD 27         mov b, g
3810   1E43 D8            push b
3811   1E44 29 4D 29      mov b, [_prog] ; $prog           
3812   1E47 FD 79         mov g, b
3813   1E49 FD 77         inc b
3814   1E4B 3B 4D 29      mov d, _prog ; $prog
3815   1E4E FD 43         mov [d], b
3816   1E50 FD 27         mov b, g
3817   1E52 74            mov d, b
3818   1E53 32            mov bl, [d]
3819   1E54 A7 00         mov bh, 0
3820   1E56 E7            pop d
3821   1E57 FD 3E         mov [d], bl
3822   1E59             ;; tok = BITWISE_SHR; 
3823   1E59 3B 49 29      mov d, _tok ; $tok         
3824   1E5C 26 1B 00      mov b, 27; BITWISE_SHR        
3825   1E5F FD 43         mov [d], b
3826   1E61 0A 6C 1E      jmp _if62_exit
3827   1E64             _if62_else:
3828   1E64             ;; tok = GREATER_THAN; 
3829   1E64 3B 49 29      mov d, _tok ; $tok         
3830   1E67 26 0C 00      mov b, 12; GREATER_THAN        
3831   1E6A FD 43         mov [d], b
3832   1E6C             _if62_exit:
3833   1E6C             _if61_exit:
3834   1E6C             ;; toktype = DELIMITER;   
3835   1E6C 3B 4B 29      mov d, _toktype ; $toktype         
3836   1E6F 26 01 00      mov b, 1; DELIMITER        
3837   1E72 FD 43         mov [d], b
3838   1E74 0A C9 23      jmp _if60_exit
3839   1E77             _if60_else:
3840   1E77             ;; if(*prog == '!'){ 
3841   1E77             _if63_cond:
3842   1E77 29 4D 29      mov b, [_prog] ; $prog           
3843   1E7A 74            mov d, b
3844   1E7B 32            mov bl, [d]
3845   1E7C A7 00         mov bh, 0
3846   1E7E             ; START RELATIONAL
3847   1E7E D7            push a
3848   1E7F 11            mov a, b
3849   1E80 26 21 00      mov b, $21
3850   1E83 B0            cmp a, b
3851   1E84 FD 71         seq ; ==
3852   1E86 E4            pop a
3853   1E87             ; END RELATIONAL
3854   1E87 C0 00 00      cmp b, 0
3855   1E8A C6 09 1F      je _if63_else
3856   1E8D             _if63_true:
3857   1E8D             ;; *t++ = *prog++; 
3858   1E8D 2C FF FF      mov b, [bp + -1] ; $t             
3859   1E90 FD 79         mov g, b
3860   1E92 FD 77         inc b
3861   1E94 FA FF FF      lea d, [bp + -1] ; $t
3862   1E97 FD 43         mov [d], b
3863   1E99 FD 27         mov b, g
3864   1E9B D8            push b
3865   1E9C 29 4D 29      mov b, [_prog] ; $prog           
3866   1E9F FD 79         mov g, b
3867   1EA1 FD 77         inc b
3868   1EA3 3B 4D 29      mov d, _prog ; $prog
3869   1EA6 FD 43         mov [d], b
3870   1EA8 FD 27         mov b, g
3871   1EAA 74            mov d, b
3872   1EAB 32            mov bl, [d]
3873   1EAC A7 00         mov bh, 0
3874   1EAE E7            pop d
3875   1EAF FD 3E         mov [d], bl
3876   1EB1             ;; if(*prog == '='){ 
3877   1EB1             _if64_cond:
3878   1EB1 29 4D 29      mov b, [_prog] ; $prog           
3879   1EB4 74            mov d, b
3880   1EB5 32            mov bl, [d]
3881   1EB6 A7 00         mov bh, 0
3882   1EB8             ; START RELATIONAL
3883   1EB8 D7            push a
3884   1EB9 11            mov a, b
3885   1EBA 26 3D 00      mov b, $3d
3886   1EBD B0            cmp a, b
3887   1EBE FD 71         seq ; ==
3888   1EC0 E4            pop a
3889   1EC1             ; END RELATIONAL
3890   1EC1 C0 00 00      cmp b, 0
3891   1EC4 C6 F6 1E      je _if64_else
3892   1EC7             _if64_true:
3893   1EC7             ;; *t++ = *prog++; 
3894   1EC7 2C FF FF      mov b, [bp + -1] ; $t             
3895   1ECA FD 79         mov g, b
3896   1ECC FD 77         inc b
3897   1ECE FA FF FF      lea d, [bp + -1] ; $t
3898   1ED1 FD 43         mov [d], b
3899   1ED3 FD 27         mov b, g
3900   1ED5 D8            push b
3901   1ED6 29 4D 29      mov b, [_prog] ; $prog           
3902   1ED9 FD 79         mov g, b
3903   1EDB FD 77         inc b
3904   1EDD 3B 4D 29      mov d, _prog ; $prog
3905   1EE0 FD 43         mov [d], b
3906   1EE2 FD 27         mov b, g
3907   1EE4 74            mov d, b
3908   1EE5 32            mov bl, [d]
3909   1EE6 A7 00         mov bh, 0
3910   1EE8 E7            pop d
3911   1EE9 FD 3E         mov [d], bl
3912   1EEB             ;; tok = NOT_EQUAL; 
3913   1EEB 3B 49 29      mov d, _tok ; $tok         
3914   1EEE 26 09 00      mov b, 9; NOT_EQUAL        
3915   1EF1 FD 43         mov [d], b
3916   1EF3 0A FE 1E      jmp _if64_exit
3917   1EF6             _if64_else:
3918   1EF6             ;; tok = LOGICAL_NOT; 
3919   1EF6 3B 49 29      mov d, _tok ; $tok         
3920   1EF9 26 10 00      mov b, 16; LOGICAL_NOT        
3921   1EFC FD 43         mov [d], b
3922   1EFE             _if64_exit:
3923   1EFE             ;; toktype = DELIMITER;   
3924   1EFE 3B 4B 29      mov d, _toktype ; $toktype         
3925   1F01 26 01 00      mov b, 1; DELIMITER        
3926   1F04 FD 43         mov [d], b
3927   1F06 0A C9 23      jmp _if63_exit
3928   1F09             _if63_else:
3929   1F09             ;; if(*prog == '+'){ 
3930   1F09             _if65_cond:
3931   1F09 29 4D 29      mov b, [_prog] ; $prog           
3932   1F0C 74            mov d, b
3933   1F0D 32            mov bl, [d]
3934   1F0E A7 00         mov bh, 0
3935   1F10             ; START RELATIONAL
3936   1F10 D7            push a
3937   1F11 11            mov a, b
3938   1F12 26 2B 00      mov b, $2b
3939   1F15 B0            cmp a, b
3940   1F16 FD 71         seq ; ==
3941   1F18 E4            pop a
3942   1F19             ; END RELATIONAL
3943   1F19 C0 00 00      cmp b, 0
3944   1F1C C6 9B 1F      je _if65_else
3945   1F1F             _if65_true:
3946   1F1F             ;; *t++ = *prog++; 
3947   1F1F 2C FF FF      mov b, [bp + -1] ; $t             
3948   1F22 FD 79         mov g, b
3949   1F24 FD 77         inc b
3950   1F26 FA FF FF      lea d, [bp + -1] ; $t
3951   1F29 FD 43         mov [d], b
3952   1F2B FD 27         mov b, g
3953   1F2D D8            push b
3954   1F2E 29 4D 29      mov b, [_prog] ; $prog           
3955   1F31 FD 79         mov g, b
3956   1F33 FD 77         inc b
3957   1F35 3B 4D 29      mov d, _prog ; $prog
3958   1F38 FD 43         mov [d], b
3959   1F3A FD 27         mov b, g
3960   1F3C 74            mov d, b
3961   1F3D 32            mov bl, [d]
3962   1F3E A7 00         mov bh, 0
3963   1F40 E7            pop d
3964   1F41 FD 3E         mov [d], bl
3965   1F43             ;; if(*prog == '+'){ 
3966   1F43             _if66_cond:
3967   1F43 29 4D 29      mov b, [_prog] ; $prog           
3968   1F46 74            mov d, b
3969   1F47 32            mov bl, [d]
3970   1F48 A7 00         mov bh, 0
3971   1F4A             ; START RELATIONAL
3972   1F4A D7            push a
3973   1F4B 11            mov a, b
3974   1F4C 26 2B 00      mov b, $2b
3975   1F4F B0            cmp a, b
3976   1F50 FD 71         seq ; ==
3977   1F52 E4            pop a
3978   1F53             ; END RELATIONAL
3979   1F53 C0 00 00      cmp b, 0
3980   1F56 C6 88 1F      je _if66_else
3981   1F59             _if66_true:
3982   1F59             ;; *t++ = *prog++; 
3983   1F59 2C FF FF      mov b, [bp + -1] ; $t             
3984   1F5C FD 79         mov g, b
3985   1F5E FD 77         inc b
3986   1F60 FA FF FF      lea d, [bp + -1] ; $t
3987   1F63 FD 43         mov [d], b
3988   1F65 FD 27         mov b, g
3989   1F67 D8            push b
3990   1F68 29 4D 29      mov b, [_prog] ; $prog           
3991   1F6B FD 79         mov g, b
3992   1F6D FD 77         inc b
3993   1F6F 3B 4D 29      mov d, _prog ; $prog
3994   1F72 FD 43         mov [d], b
3995   1F74 FD 27         mov b, g
3996   1F76 74            mov d, b
3997   1F77 32            mov bl, [d]
3998   1F78 A7 00         mov bh, 0
3999   1F7A E7            pop d
4000   1F7B FD 3E         mov [d], bl
4001   1F7D             ;; tok = INCREMENT; 
4002   1F7D 3B 49 29      mov d, _tok ; $tok         
4003   1F80 26 05 00      mov b, 5; INCREMENT        
4004   1F83 FD 43         mov [d], b
4005   1F85 0A 90 1F      jmp _if66_exit
4006   1F88             _if66_else:
4007   1F88             ;; tok = PLUS; 
4008   1F88 3B 49 29      mov d, _tok ; $tok         
4009   1F8B 26 01 00      mov b, 1; PLUS        
4010   1F8E FD 43         mov [d], b
4011   1F90             _if66_exit:
4012   1F90             ;; toktype = DELIMITER;   
4013   1F90 3B 4B 29      mov d, _toktype ; $toktype         
4014   1F93 26 01 00      mov b, 1; DELIMITER        
4015   1F96 FD 43         mov [d], b
4016   1F98 0A C9 23      jmp _if65_exit
4017   1F9B             _if65_else:
4018   1F9B             ;; if(*prog == '-'){ 
4019   1F9B             _if67_cond:
4020   1F9B 29 4D 29      mov b, [_prog] ; $prog           
4021   1F9E 74            mov d, b
4022   1F9F 32            mov bl, [d]
4023   1FA0 A7 00         mov bh, 0
4024   1FA2             ; START RELATIONAL
4025   1FA2 D7            push a
4026   1FA3 11            mov a, b
4027   1FA4 26 2D 00      mov b, $2d
4028   1FA7 B0            cmp a, b
4029   1FA8 FD 71         seq ; ==
4030   1FAA E4            pop a
4031   1FAB             ; END RELATIONAL
4032   1FAB C0 00 00      cmp b, 0
4033   1FAE C6 2D 20      je _if67_else
4034   1FB1             _if67_true:
4035   1FB1             ;; *t++ = *prog++; 
4036   1FB1 2C FF FF      mov b, [bp + -1] ; $t             
4037   1FB4 FD 79         mov g, b
4038   1FB6 FD 77         inc b
4039   1FB8 FA FF FF      lea d, [bp + -1] ; $t
4040   1FBB FD 43         mov [d], b
4041   1FBD FD 27         mov b, g
4042   1FBF D8            push b
4043   1FC0 29 4D 29      mov b, [_prog] ; $prog           
4044   1FC3 FD 79         mov g, b
4045   1FC5 FD 77         inc b
4046   1FC7 3B 4D 29      mov d, _prog ; $prog
4047   1FCA FD 43         mov [d], b
4048   1FCC FD 27         mov b, g
4049   1FCE 74            mov d, b
4050   1FCF 32            mov bl, [d]
4051   1FD0 A7 00         mov bh, 0
4052   1FD2 E7            pop d
4053   1FD3 FD 3E         mov [d], bl
4054   1FD5             ;; if(*prog == '-'){ 
4055   1FD5             _if68_cond:
4056   1FD5 29 4D 29      mov b, [_prog] ; $prog           
4057   1FD8 74            mov d, b
4058   1FD9 32            mov bl, [d]
4059   1FDA A7 00         mov bh, 0
4060   1FDC             ; START RELATIONAL
4061   1FDC D7            push a
4062   1FDD 11            mov a, b
4063   1FDE 26 2D 00      mov b, $2d
4064   1FE1 B0            cmp a, b
4065   1FE2 FD 71         seq ; ==
4066   1FE4 E4            pop a
4067   1FE5             ; END RELATIONAL
4068   1FE5 C0 00 00      cmp b, 0
4069   1FE8 C6 1A 20      je _if68_else
4070   1FEB             _if68_true:
4071   1FEB             ;; *t++ = *prog++; 
4072   1FEB 2C FF FF      mov b, [bp + -1] ; $t             
4073   1FEE FD 79         mov g, b
4074   1FF0 FD 77         inc b
4075   1FF2 FA FF FF      lea d, [bp + -1] ; $t
4076   1FF5 FD 43         mov [d], b
4077   1FF7 FD 27         mov b, g
4078   1FF9 D8            push b
4079   1FFA 29 4D 29      mov b, [_prog] ; $prog           
4080   1FFD FD 79         mov g, b
4081   1FFF FD 77         inc b
4082   2001 3B 4D 29      mov d, _prog ; $prog
4083   2004 FD 43         mov [d], b
4084   2006 FD 27         mov b, g
4085   2008 74            mov d, b
4086   2009 32            mov bl, [d]
4087   200A A7 00         mov bh, 0
4088   200C E7            pop d
4089   200D FD 3E         mov [d], bl
4090   200F             ;; tok = DECREMENT; 
4091   200F 3B 49 29      mov d, _tok ; $tok         
4092   2012 26 06 00      mov b, 6; DECREMENT        
4093   2015 FD 43         mov [d], b
4094   2017 0A 22 20      jmp _if68_exit
4095   201A             _if68_else:
4096   201A             ;; tok = MINUS; 
4097   201A 3B 49 29      mov d, _tok ; $tok         
4098   201D 26 02 00      mov b, 2; MINUS        
4099   2020 FD 43         mov [d], b
4100   2022             _if68_exit:
4101   2022             ;; toktype = DELIMITER;   
4102   2022 3B 4B 29      mov d, _toktype ; $toktype         
4103   2025 26 01 00      mov b, 1; DELIMITER        
4104   2028 FD 43         mov [d], b
4105   202A 0A C9 23      jmp _if67_exit
4106   202D             _if67_else:
4107   202D             ;; if(*prog == '$'){ 
4108   202D             _if69_cond:
4109   202D 29 4D 29      mov b, [_prog] ; $prog           
4110   2030 74            mov d, b
4111   2031 32            mov bl, [d]
4112   2032 A7 00         mov bh, 0
4113   2034             ; START RELATIONAL
4114   2034 D7            push a
4115   2035 11            mov a, b
4116   2036 26 24 00      mov b, $24
4117   2039 B0            cmp a, b
4118   203A FD 71         seq ; ==
4119   203C E4            pop a
4120   203D             ; END RELATIONAL
4121   203D C0 00 00      cmp b, 0
4122   2040 C6 7A 20      je _if69_else
4123   2043             _if69_true:
4124   2043             ;; *t++ = *prog++; 
4125   2043 2C FF FF      mov b, [bp + -1] ; $t             
4126   2046 FD 79         mov g, b
4127   2048 FD 77         inc b
4128   204A FA FF FF      lea d, [bp + -1] ; $t
4129   204D FD 43         mov [d], b
4130   204F FD 27         mov b, g
4131   2051 D8            push b
4132   2052 29 4D 29      mov b, [_prog] ; $prog           
4133   2055 FD 79         mov g, b
4134   2057 FD 77         inc b
4135   2059 3B 4D 29      mov d, _prog ; $prog
4136   205C FD 43         mov [d], b
4137   205E FD 27         mov b, g
4138   2060 74            mov d, b
4139   2061 32            mov bl, [d]
4140   2062 A7 00         mov bh, 0
4141   2064 E7            pop d
4142   2065 FD 3E         mov [d], bl
4143   2067             ;; tok = DOLLAR; 
4144   2067 3B 49 29      mov d, _tok ; $tok         
4145   206A 26 12 00      mov b, 18; DOLLAR        
4146   206D FD 43         mov [d], b
4147   206F             ;; toktype = DELIMITER;   
4148   206F 3B 4B 29      mov d, _toktype ; $toktype         
4149   2072 26 01 00      mov b, 1; DELIMITER        
4150   2075 FD 43         mov [d], b
4151   2077 0A C9 23      jmp _if69_exit
4152   207A             _if69_else:
4153   207A             ;; if(*prog == '^'){ 
4154   207A             _if70_cond:
4155   207A 29 4D 29      mov b, [_prog] ; $prog           
4156   207D 74            mov d, b
4157   207E 32            mov bl, [d]
4158   207F A7 00         mov bh, 0
4159   2081             ; START RELATIONAL
4160   2081 D7            push a
4161   2082 11            mov a, b
4162   2083 26 5E 00      mov b, $5e
4163   2086 B0            cmp a, b
4164   2087 FD 71         seq ; ==
4165   2089 E4            pop a
4166   208A             ; END RELATIONAL
4167   208A C0 00 00      cmp b, 0
4168   208D C6 C7 20      je _if70_else
4169   2090             _if70_true:
4170   2090             ;; *t++ = *prog++; 
4171   2090 2C FF FF      mov b, [bp + -1] ; $t             
4172   2093 FD 79         mov g, b
4173   2095 FD 77         inc b
4174   2097 FA FF FF      lea d, [bp + -1] ; $t
4175   209A FD 43         mov [d], b
4176   209C FD 27         mov b, g
4177   209E D8            push b
4178   209F 29 4D 29      mov b, [_prog] ; $prog           
4179   20A2 FD 79         mov g, b
4180   20A4 FD 77         inc b
4181   20A6 3B 4D 29      mov d, _prog ; $prog
4182   20A9 FD 43         mov [d], b
4183   20AB FD 27         mov b, g
4184   20AD 74            mov d, b
4185   20AE 32            mov bl, [d]
4186   20AF A7 00         mov bh, 0
4187   20B1 E7            pop d
4188   20B2 FD 3E         mov [d], bl
4189   20B4             ;; tok = BITWISE_XOR; 
4190   20B4 3B 49 29      mov d, _tok ; $tok         
4191   20B7 26 17 00      mov b, 23; BITWISE_XOR        
4192   20BA FD 43         mov [d], b
4193   20BC             ;; toktype = DELIMITER;   
4194   20BC 3B 4B 29      mov d, _toktype ; $toktype         
4195   20BF 26 01 00      mov b, 1; DELIMITER        
4196   20C2 FD 43         mov [d], b
4197   20C4 0A C9 23      jmp _if70_exit
4198   20C7             _if70_else:
4199   20C7             ;; if(*prog == '@'){ 
4200   20C7             _if71_cond:
4201   20C7 29 4D 29      mov b, [_prog] ; $prog           
4202   20CA 74            mov d, b
4203   20CB 32            mov bl, [d]
4204   20CC A7 00         mov bh, 0
4205   20CE             ; START RELATIONAL
4206   20CE D7            push a
4207   20CF 11            mov a, b
4208   20D0 26 40 00      mov b, $40
4209   20D3 B0            cmp a, b
4210   20D4 FD 71         seq ; ==
4211   20D6 E4            pop a
4212   20D7             ; END RELATIONAL
4213   20D7 C0 00 00      cmp b, 0
4214   20DA C6 14 21      je _if71_else
4215   20DD             _if71_true:
4216   20DD             ;; *t++ = *prog++; 
4217   20DD 2C FF FF      mov b, [bp + -1] ; $t             
4218   20E0 FD 79         mov g, b
4219   20E2 FD 77         inc b
4220   20E4 FA FF FF      lea d, [bp + -1] ; $t
4221   20E7 FD 43         mov [d], b
4222   20E9 FD 27         mov b, g
4223   20EB D8            push b
4224   20EC 29 4D 29      mov b, [_prog] ; $prog           
4225   20EF FD 79         mov g, b
4226   20F1 FD 77         inc b
4227   20F3 3B 4D 29      mov d, _prog ; $prog
4228   20F6 FD 43         mov [d], b
4229   20F8 FD 27         mov b, g
4230   20FA 74            mov d, b
4231   20FB 32            mov bl, [d]
4232   20FC A7 00         mov bh, 0
4233   20FE E7            pop d
4234   20FF FD 3E         mov [d], bl
4235   2101             ;; tok = AT; 
4236   2101 3B 49 29      mov d, _tok ; $tok         
4237   2104 26 14 00      mov b, 20; AT        
4238   2107 FD 43         mov [d], b
4239   2109             ;; toktype = DELIMITER;   
4240   2109 3B 4B 29      mov d, _toktype ; $toktype         
4241   210C 26 01 00      mov b, 1; DELIMITER        
4242   210F FD 43         mov [d], b
4243   2111 0A C9 23      jmp _if71_exit
4244   2114             _if71_else:
4245   2114             ;; if(*prog == '*'){ 
4246   2114             _if72_cond:
4247   2114 29 4D 29      mov b, [_prog] ; $prog           
4248   2117 74            mov d, b
4249   2118 32            mov bl, [d]
4250   2119 A7 00         mov bh, 0
4251   211B             ; START RELATIONAL
4252   211B D7            push a
4253   211C 11            mov a, b
4254   211D 26 2A 00      mov b, $2a
4255   2120 B0            cmp a, b
4256   2121 FD 71         seq ; ==
4257   2123 E4            pop a
4258   2124             ; END RELATIONAL
4259   2124 C0 00 00      cmp b, 0
4260   2127 C6 61 21      je _if72_else
4261   212A             _if72_true:
4262   212A             ;; *t++ = *prog++; 
4263   212A 2C FF FF      mov b, [bp + -1] ; $t             
4264   212D FD 79         mov g, b
4265   212F FD 77         inc b
4266   2131 FA FF FF      lea d, [bp + -1] ; $t
4267   2134 FD 43         mov [d], b
4268   2136 FD 27         mov b, g
4269   2138 D8            push b
4270   2139 29 4D 29      mov b, [_prog] ; $prog           
4271   213C FD 79         mov g, b
4272   213E FD 77         inc b
4273   2140 3B 4D 29      mov d, _prog ; $prog
4274   2143 FD 43         mov [d], b
4275   2145 FD 27         mov b, g
4276   2147 74            mov d, b
4277   2148 32            mov bl, [d]
4278   2149 A7 00         mov bh, 0
4279   214B E7            pop d
4280   214C FD 3E         mov [d], bl
4281   214E             ;; tok = STAR; 
4282   214E 3B 49 29      mov d, _tok ; $tok         
4283   2151 26 03 00      mov b, 3; STAR        
4284   2154 FD 43         mov [d], b
4285   2156             ;; toktype = DELIMITER;   
4286   2156 3B 4B 29      mov d, _toktype ; $toktype         
4287   2159 26 01 00      mov b, 1; DELIMITER        
4288   215C FD 43         mov [d], b
4289   215E 0A C9 23      jmp _if72_exit
4290   2161             _if72_else:
4291   2161             ;; if(*prog == '/'){ 
4292   2161             _if73_cond:
4293   2161 29 4D 29      mov b, [_prog] ; $prog           
4294   2164 74            mov d, b
4295   2165 32            mov bl, [d]
4296   2166 A7 00         mov bh, 0
4297   2168             ; START RELATIONAL
4298   2168 D7            push a
4299   2169 11            mov a, b
4300   216A 26 2F 00      mov b, $2f
4301   216D B0            cmp a, b
4302   216E FD 71         seq ; ==
4303   2170 E4            pop a
4304   2171             ; END RELATIONAL
4305   2171 C0 00 00      cmp b, 0
4306   2174 C6 AE 21      je _if73_else
4307   2177             _if73_true:
4308   2177             ;; *t++ = *prog++; 
4309   2177 2C FF FF      mov b, [bp + -1] ; $t             
4310   217A FD 79         mov g, b
4311   217C FD 77         inc b
4312   217E FA FF FF      lea d, [bp + -1] ; $t
4313   2181 FD 43         mov [d], b
4314   2183 FD 27         mov b, g
4315   2185 D8            push b
4316   2186 29 4D 29      mov b, [_prog] ; $prog           
4317   2189 FD 79         mov g, b
4318   218B FD 77         inc b
4319   218D 3B 4D 29      mov d, _prog ; $prog
4320   2190 FD 43         mov [d], b
4321   2192 FD 27         mov b, g
4322   2194 74            mov d, b
4323   2195 32            mov bl, [d]
4324   2196 A7 00         mov bh, 0
4325   2198 E7            pop d
4326   2199 FD 3E         mov [d], bl
4327   219B             ;; tok = FSLASH; 
4328   219B 3B 49 29      mov d, _tok ; $tok         
4329   219E 26 04 00      mov b, 4; FSLASH        
4330   21A1 FD 43         mov [d], b
4331   21A3             ;; toktype = DELIMITER;   
4332   21A3 3B 4B 29      mov d, _toktype ; $toktype         
4333   21A6 26 01 00      mov b, 1; DELIMITER        
4334   21A9 FD 43         mov [d], b
4335   21AB 0A C9 23      jmp _if73_exit
4336   21AE             _if73_else:
4337   21AE             ;; if(*prog == '%'){ 
4338   21AE             _if74_cond:
4339   21AE 29 4D 29      mov b, [_prog] ; $prog           
4340   21B1 74            mov d, b
4341   21B2 32            mov bl, [d]
4342   21B3 A7 00         mov bh, 0
4343   21B5             ; START RELATIONAL
4344   21B5 D7            push a
4345   21B6 11            mov a, b
4346   21B7 26 25 00      mov b, $25
4347   21BA B0            cmp a, b
4348   21BB FD 71         seq ; ==
4349   21BD E4            pop a
4350   21BE             ; END RELATIONAL
4351   21BE C0 00 00      cmp b, 0
4352   21C1 C6 FB 21      je _if74_else
4353   21C4             _if74_true:
4354   21C4             ;; *t++ = *prog++; 
4355   21C4 2C FF FF      mov b, [bp + -1] ; $t             
4356   21C7 FD 79         mov g, b
4357   21C9 FD 77         inc b
4358   21CB FA FF FF      lea d, [bp + -1] ; $t
4359   21CE FD 43         mov [d], b
4360   21D0 FD 27         mov b, g
4361   21D2 D8            push b
4362   21D3 29 4D 29      mov b, [_prog] ; $prog           
4363   21D6 FD 79         mov g, b
4364   21D8 FD 77         inc b
4365   21DA 3B 4D 29      mov d, _prog ; $prog
4366   21DD FD 43         mov [d], b
4367   21DF FD 27         mov b, g
4368   21E1 74            mov d, b
4369   21E2 32            mov bl, [d]
4370   21E3 A7 00         mov bh, 0
4371   21E5 E7            pop d
4372   21E6 FD 3E         mov [d], bl
4373   21E8             ;; tok = MOD; 
4374   21E8 3B 49 29      mov d, _tok ; $tok         
4375   21EB 26 07 00      mov b, 7; MOD        
4376   21EE FD 43         mov [d], b
4377   21F0             ;; toktype = DELIMITER;   
4378   21F0 3B 4B 29      mov d, _toktype ; $toktype         
4379   21F3 26 01 00      mov b, 1; DELIMITER        
4380   21F6 FD 43         mov [d], b
4381   21F8 0A C9 23      jmp _if74_exit
4382   21FB             _if74_else:
4383   21FB             ;; if(*prog == '('){ 
4384   21FB             _if75_cond:
4385   21FB 29 4D 29      mov b, [_prog] ; $prog           
4386   21FE 74            mov d, b
4387   21FF 32            mov bl, [d]
4388   2200 A7 00         mov bh, 0
4389   2202             ; START RELATIONAL
4390   2202 D7            push a
4391   2203 11            mov a, b
4392   2204 26 28 00      mov b, $28
4393   2207 B0            cmp a, b
4394   2208 FD 71         seq ; ==
4395   220A E4            pop a
4396   220B             ; END RELATIONAL
4397   220B C0 00 00      cmp b, 0
4398   220E C6 48 22      je _if75_else
4399   2211             _if75_true:
4400   2211             ;; *t++ = *prog++; 
4401   2211 2C FF FF      mov b, [bp + -1] ; $t             
4402   2214 FD 79         mov g, b
4403   2216 FD 77         inc b
4404   2218 FA FF FF      lea d, [bp + -1] ; $t
4405   221B FD 43         mov [d], b
4406   221D FD 27         mov b, g
4407   221F D8            push b
4408   2220 29 4D 29      mov b, [_prog] ; $prog           
4409   2223 FD 79         mov g, b
4410   2225 FD 77         inc b
4411   2227 3B 4D 29      mov d, _prog ; $prog
4412   222A FD 43         mov [d], b
4413   222C FD 27         mov b, g
4414   222E 74            mov d, b
4415   222F 32            mov bl, [d]
4416   2230 A7 00         mov bh, 0
4417   2232 E7            pop d
4418   2233 FD 3E         mov [d], bl
4419   2235             ;; tok = OPENING_PAREN; 
4420   2235 3B 49 29      mov d, _tok ; $tok         
4421   2238 26 1C 00      mov b, 28; OPENING_PAREN        
4422   223B FD 43         mov [d], b
4423   223D             ;; toktype = DELIMITER;   
4424   223D 3B 4B 29      mov d, _toktype ; $toktype         
4425   2240 26 01 00      mov b, 1; DELIMITER        
4426   2243 FD 43         mov [d], b
4427   2245 0A C9 23      jmp _if75_exit
4428   2248             _if75_else:
4429   2248             ;; if(*prog == ')'){ 
4430   2248             _if76_cond:
4431   2248 29 4D 29      mov b, [_prog] ; $prog           
4432   224B 74            mov d, b
4433   224C 32            mov bl, [d]
4434   224D A7 00         mov bh, 0
4435   224F             ; START RELATIONAL
4436   224F D7            push a
4437   2250 11            mov a, b
4438   2251 26 29 00      mov b, $29
4439   2254 B0            cmp a, b
4440   2255 FD 71         seq ; ==
4441   2257 E4            pop a
4442   2258             ; END RELATIONAL
4443   2258 C0 00 00      cmp b, 0
4444   225B C6 95 22      je _if76_else
4445   225E             _if76_true:
4446   225E             ;; *t++ = *prog++; 
4447   225E 2C FF FF      mov b, [bp + -1] ; $t             
4448   2261 FD 79         mov g, b
4449   2263 FD 77         inc b
4450   2265 FA FF FF      lea d, [bp + -1] ; $t
4451   2268 FD 43         mov [d], b
4452   226A FD 27         mov b, g
4453   226C D8            push b
4454   226D 29 4D 29      mov b, [_prog] ; $prog           
4455   2270 FD 79         mov g, b
4456   2272 FD 77         inc b
4457   2274 3B 4D 29      mov d, _prog ; $prog
4458   2277 FD 43         mov [d], b
4459   2279 FD 27         mov b, g
4460   227B 74            mov d, b
4461   227C 32            mov bl, [d]
4462   227D A7 00         mov bh, 0
4463   227F E7            pop d
4464   2280 FD 3E         mov [d], bl
4465   2282             ;; tok = CLOSING_PAREN; 
4466   2282 3B 49 29      mov d, _tok ; $tok         
4467   2285 26 1D 00      mov b, 29; CLOSING_PAREN        
4468   2288 FD 43         mov [d], b
4469   228A             ;; toktype = DELIMITER;   
4470   228A 3B 4B 29      mov d, _toktype ; $toktype         
4471   228D 26 01 00      mov b, 1; DELIMITER        
4472   2290 FD 43         mov [d], b
4473   2292 0A C9 23      jmp _if76_exit
4474   2295             _if76_else:
4475   2295             ;; if(*prog == ';'){ 
4476   2295             _if77_cond:
4477   2295 29 4D 29      mov b, [_prog] ; $prog           
4478   2298 74            mov d, b
4479   2299 32            mov bl, [d]
4480   229A A7 00         mov bh, 0
4481   229C             ; START RELATIONAL
4482   229C D7            push a
4483   229D 11            mov a, b
4484   229E 26 3B 00      mov b, $3b
4485   22A1 B0            cmp a, b
4486   22A2 FD 71         seq ; ==
4487   22A4 E4            pop a
4488   22A5             ; END RELATIONAL
4489   22A5 C0 00 00      cmp b, 0
4490   22A8 C6 E2 22      je _if77_else
4491   22AB             _if77_true:
4492   22AB             ;; *t++ = *prog++; 
4493   22AB 2C FF FF      mov b, [bp + -1] ; $t             
4494   22AE FD 79         mov g, b
4495   22B0 FD 77         inc b
4496   22B2 FA FF FF      lea d, [bp + -1] ; $t
4497   22B5 FD 43         mov [d], b
4498   22B7 FD 27         mov b, g
4499   22B9 D8            push b
4500   22BA 29 4D 29      mov b, [_prog] ; $prog           
4501   22BD FD 79         mov g, b
4502   22BF FD 77         inc b
4503   22C1 3B 4D 29      mov d, _prog ; $prog
4504   22C4 FD 43         mov [d], b
4505   22C6 FD 27         mov b, g
4506   22C8 74            mov d, b
4507   22C9 32            mov bl, [d]
4508   22CA A7 00         mov bh, 0
4509   22CC E7            pop d
4510   22CD FD 3E         mov [d], bl
4511   22CF             ;; tok = SEMICOLON; 
4512   22CF 3B 49 29      mov d, _tok ; $tok         
4513   22D2 26 23 00      mov b, 35; SEMICOLON        
4514   22D5 FD 43         mov [d], b
4515   22D7             ;; toktype = DELIMITER;   
4516   22D7 3B 4B 29      mov d, _toktype ; $toktype         
4517   22DA 26 01 00      mov b, 1; DELIMITER        
4518   22DD FD 43         mov [d], b
4519   22DF 0A C9 23      jmp _if77_exit
4520   22E2             _if77_else:
4521   22E2             ;; if(*prog == ':'){ 
4522   22E2             _if78_cond:
4523   22E2 29 4D 29      mov b, [_prog] ; $prog           
4524   22E5 74            mov d, b
4525   22E6 32            mov bl, [d]
4526   22E7 A7 00         mov bh, 0
4527   22E9             ; START RELATIONAL
4528   22E9 D7            push a
4529   22EA 11            mov a, b
4530   22EB 26 3A 00      mov b, $3a
4531   22EE B0            cmp a, b
4532   22EF FD 71         seq ; ==
4533   22F1 E4            pop a
4534   22F2             ; END RELATIONAL
4535   22F2 C0 00 00      cmp b, 0
4536   22F5 C6 2F 23      je _if78_else
4537   22F8             _if78_true:
4538   22F8             ;; *t++ = *prog++; 
4539   22F8 2C FF FF      mov b, [bp + -1] ; $t             
4540   22FB FD 79         mov g, b
4541   22FD FD 77         inc b
4542   22FF FA FF FF      lea d, [bp + -1] ; $t
4543   2302 FD 43         mov [d], b
4544   2304 FD 27         mov b, g
4545   2306 D8            push b
4546   2307 29 4D 29      mov b, [_prog] ; $prog           
4547   230A FD 79         mov g, b
4548   230C FD 77         inc b
4549   230E 3B 4D 29      mov d, _prog ; $prog
4550   2311 FD 43         mov [d], b
4551   2313 FD 27         mov b, g
4552   2315 74            mov d, b
4553   2316 32            mov bl, [d]
4554   2317 A7 00         mov bh, 0
4555   2319 E7            pop d
4556   231A FD 3E         mov [d], bl
4557   231C             ;; tok = COLON; 
4558   231C 3B 49 29      mov d, _tok ; $tok         
4559   231F 26 22 00      mov b, 34; COLON        
4560   2322 FD 43         mov [d], b
4561   2324             ;; toktype = DELIMITER;   
4562   2324 3B 4B 29      mov d, _toktype ; $toktype         
4563   2327 26 01 00      mov b, 1; DELIMITER        
4564   232A FD 43         mov [d], b
4565   232C 0A C9 23      jmp _if78_exit
4566   232F             _if78_else:
4567   232F             ;; if(*prog == ','){ 
4568   232F             _if79_cond:
4569   232F 29 4D 29      mov b, [_prog] ; $prog           
4570   2332 74            mov d, b
4571   2333 32            mov bl, [d]
4572   2334 A7 00         mov bh, 0
4573   2336             ; START RELATIONAL
4574   2336 D7            push a
4575   2337 11            mov a, b
4576   2338 26 2C 00      mov b, $2c
4577   233B B0            cmp a, b
4578   233C FD 71         seq ; ==
4579   233E E4            pop a
4580   233F             ; END RELATIONAL
4581   233F C0 00 00      cmp b, 0
4582   2342 C6 7C 23      je _if79_else
4583   2345             _if79_true:
4584   2345             ;; *t++ = *prog++; 
4585   2345 2C FF FF      mov b, [bp + -1] ; $t             
4586   2348 FD 79         mov g, b
4587   234A FD 77         inc b
4588   234C FA FF FF      lea d, [bp + -1] ; $t
4589   234F FD 43         mov [d], b
4590   2351 FD 27         mov b, g
4591   2353 D8            push b
4592   2354 29 4D 29      mov b, [_prog] ; $prog           
4593   2357 FD 79         mov g, b
4594   2359 FD 77         inc b
4595   235B 3B 4D 29      mov d, _prog ; $prog
4596   235E FD 43         mov [d], b
4597   2360 FD 27         mov b, g
4598   2362 74            mov d, b
4599   2363 32            mov bl, [d]
4600   2364 A7 00         mov bh, 0
4601   2366 E7            pop d
4602   2367 FD 3E         mov [d], bl
4603   2369             ;; tok = COMMA; 
4604   2369 3B 49 29      mov d, _tok ; $tok         
4605   236C 26 24 00      mov b, 36; COMMA        
4606   236F FD 43         mov [d], b
4607   2371             ;; toktype = DELIMITER;   
4608   2371 3B 4B 29      mov d, _toktype ; $toktype         
4609   2374 26 01 00      mov b, 1; DELIMITER        
4610   2377 FD 43         mov [d], b
4611   2379 0A C9 23      jmp _if79_exit
4612   237C             _if79_else:
4613   237C             ;; if(*prog == '.'){ 
4614   237C             _if80_cond:
4615   237C 29 4D 29      mov b, [_prog] ; $prog           
4616   237F 74            mov d, b
4617   2380 32            mov bl, [d]
4618   2381 A7 00         mov bh, 0
4619   2383             ; START RELATIONAL
4620   2383 D7            push a
4621   2384 11            mov a, b
4622   2385 26 2E 00      mov b, $2e
4623   2388 B0            cmp a, b
4624   2389 FD 71         seq ; ==
4625   238B E4            pop a
4626   238C             ; END RELATIONAL
4627   238C C0 00 00      cmp b, 0
4628   238F C6 C9 23      je _if80_exit
4629   2392             _if80_true:
4630   2392             ;; *t++ = *prog++; 
4631   2392 2C FF FF      mov b, [bp + -1] ; $t             
4632   2395 FD 79         mov g, b
4633   2397 FD 77         inc b
4634   2399 FA FF FF      lea d, [bp + -1] ; $t
4635   239C FD 43         mov [d], b
4636   239E FD 27         mov b, g
4637   23A0 D8            push b
4638   23A1 29 4D 29      mov b, [_prog] ; $prog           
4639   23A4 FD 79         mov g, b
4640   23A6 FD 77         inc b
4641   23A8 3B 4D 29      mov d, _prog ; $prog
4642   23AB FD 43         mov [d], b
4643   23AD FD 27         mov b, g
4644   23AF 74            mov d, b
4645   23B0 32            mov bl, [d]
4646   23B1 A7 00         mov bh, 0
4647   23B3 E7            pop d
4648   23B4 FD 3E         mov [d], bl
4649   23B6             ;; tok = DOT; 
4650   23B6 3B 49 29      mov d, _tok ; $tok         
4651   23B9 26 25 00      mov b, 37; DOT        
4652   23BC FD 43         mov [d], b
4653   23BE             ;; toktype = DELIMITER;   
4654   23BE 3B 4B 29      mov d, _toktype ; $toktype         
4655   23C1 26 01 00      mov b, 1; DELIMITER        
4656   23C4 FD 43         mov [d], b
4657   23C6 0A C9 23      jmp _if80_exit
4658   23C9             _if80_exit:
4659   23C9             _if79_exit:
4660   23C9             _if78_exit:
4661   23C9             _if77_exit:
4662   23C9             _if76_exit:
4663   23C9             _if75_exit:
4664   23C9             _if74_exit:
4665   23C9             _if73_exit:
4666   23C9             _if72_exit:
4667   23C9             _if71_exit:
4668   23C9             _if70_exit:
4669   23C9             _if69_exit:
4670   23C9             _if67_exit:
4671   23C9             _if65_exit:
4672   23C9             _if63_exit:
4673   23C9             _if60_exit:
4674   23C9             _if57_exit:
4675   23C9             _if56_exit:
4676   23C9             _if54_exit:
4677   23C9             _if52_exit:
4678   23C9             _if50_exit:
4679   23C9             _if49_exit:
4680   23C9             _if48_exit:
4681   23C9             _if47_exit:
4682   23C9             _if46_exit:
4683   23C9             _if45_exit:
4684   23C9             _if42_exit:
4685   23C9             _if40_exit:
4686   23C9             _if38_exit:
4687   23C9             ;; *t = '\0'; 
4688   23C9 2C FF FF      mov b, [bp + -1] ; $t             
4689   23CC D8            push b
4690   23CD 26 00 00      mov b, $0
4691   23D0 E7            pop d
4692   23D1 FD 3E         mov [d], bl
4693   23D3 F9            leave
4694   23D4 09            ret
4695   23D5             
4696   23D5             convert_constant:
4697   23D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4698   23D8             ; $s 
4699   23D8             ; $t 
4700   23D8 52 04 00      sub sp, 4
4701   23DB             ;; t = token; 
4702   23DB FA FD FF      lea d, [bp + -3] ; $t         
4703   23DE 26 4F 29      mov b, _token_data ; $token                   
4704   23E1 FD 43         mov [d], b
4705   23E3             ;; s = string_const; 
4706   23E3 FA FF FF      lea d, [bp + -1] ; $s         
4707   23E6 26 4F 2A      mov b, _string_const_data ; $string_const                   
4708   23E9 FD 43         mov [d], b
4709   23EB             ;; if(toktype == CHAR_CONST){ 
4710   23EB             _if81_cond:
4711   23EB 29 4B 29      mov b, [_toktype] ; $toktype           
4712   23EE             ; START RELATIONAL
4713   23EE D7            push a
4714   23EF 11            mov a, b
4715   23F0 26 02 00      mov b, 2; CHAR_CONST
4716   23F3 B0            cmp a, b
4717   23F4 FD 71         seq ; ==
4718   23F6 E4            pop a
4719   23F7             ; END RELATIONAL
4720   23F7 C0 00 00      cmp b, 0
4721   23FA C6 94 25      je _if81_else
4722   23FD             _if81_true:
4723   23FD             ;; t++; 
4724   23FD 2C FD FF      mov b, [bp + -3] ; $t             
4725   2400 FD 79         mov g, b
4726   2402 FD 77         inc b
4727   2404 FA FD FF      lea d, [bp + -3] ; $t
4728   2407 FD 43         mov [d], b
4729   2409 FD 27         mov b, g
4730   240B             ;; if(*t == '\\'){ 
4731   240B             _if82_cond:
4732   240B 2C FD FF      mov b, [bp + -3] ; $t             
4733   240E 74            mov d, b
4734   240F 32            mov bl, [d]
4735   2410 A7 00         mov bh, 0
4736   2412             ; START RELATIONAL
4737   2412 D7            push a
4738   2413 11            mov a, b
4739   2414 26 5C 00      mov b, $5c
4740   2417 B0            cmp a, b
4741   2418 FD 71         seq ; ==
4742   241A E4            pop a
4743   241B             ; END RELATIONAL
4744   241B C0 00 00      cmp b, 0
4745   241E C6 78 25      je _if82_else
4746   2421             _if82_true:
4747   2421             ;; t++; 
4748   2421 2C FD FF      mov b, [bp + -3] ; $t             
4749   2424 FD 79         mov g, b
4750   2426 FD 77         inc b
4751   2428 FA FD FF      lea d, [bp + -3] ; $t
4752   242B FD 43         mov [d], b
4753   242D FD 27         mov b, g
4754   242F             ;; switch(*t){ 
4755   242F             _switch83_expr:
4756   242F 2C FD FF      mov b, [bp + -3] ; $t             
4757   2432 74            mov d, b
4758   2433 32            mov bl, [d]
4759   2434 A7 00         mov bh, 0
4760   2436             _switch83_comparisons:
4761   2436 C1 30         cmp bl, $30
4762   2438 C6 70 24      je _switch83_case0
4763   243B C1 61         cmp bl, $61
4764   243D C6 88 24      je _switch83_case1
4765   2440 C1 62         cmp bl, $62
4766   2442 C6 A0 24      je _switch83_case2
4767   2445 C1 66         cmp bl, $66
4768   2447 C6 B8 24      je _switch83_case3
4769   244A C1 6E         cmp bl, $6e
4770   244C C6 D0 24      je _switch83_case4
4771   244F C1 72         cmp bl, $72
4772   2451 C6 E8 24      je _switch83_case5
4773   2454 C1 74         cmp bl, $74
4774   2456 C6 00 25      je _switch83_case6
4775   2459 C1 76         cmp bl, $76
4776   245B C6 18 25      je _switch83_case7
4777   245E C1 5C         cmp bl, $5c
4778   2460 C6 30 25      je _switch83_case8
4779   2463 C1 27         cmp bl, $27
4780   2465 C6 48 25      je _switch83_case9
4781   2468 C1 22         cmp bl, $22
4782   246A C6 60 25      je _switch83_case10
4783   246D 0A 75 25      jmp _switch83_exit
4784   2470             _switch83_case0:
4785   2470             ;; *s++ = '\0'; 
4786   2470 2C FF FF      mov b, [bp + -1] ; $s             
4787   2473 FD 79         mov g, b
4788   2475 FD 77         inc b
4789   2477 FA FF FF      lea d, [bp + -1] ; $s
4790   247A FD 43         mov [d], b
4791   247C FD 27         mov b, g
4792   247E D8            push b
4793   247F 26 00 00      mov b, $0
4794   2482 E7            pop d
4795   2483 FD 3E         mov [d], bl
4796   2485             ;; break; 
4797   2485 0A 75 25      jmp _switch83_exit ; case break
4798   2488             _switch83_case1:
4799   2488             ;; *s++ = '\a'; 
4800   2488 2C FF FF      mov b, [bp + -1] ; $s             
4801   248B FD 79         mov g, b
4802   248D FD 77         inc b
4803   248F FA FF FF      lea d, [bp + -1] ; $s
4804   2492 FD 43         mov [d], b
4805   2494 FD 27         mov b, g
4806   2496 D8            push b
4807   2497 26 07 00      mov b, $7
4808   249A E7            pop d
4809   249B FD 3E         mov [d], bl
4810   249D             ;; break; 
4811   249D 0A 75 25      jmp _switch83_exit ; case break
4812   24A0             _switch83_case2:
4813   24A0             ;; *s++ = '\b'; 
4814   24A0 2C FF FF      mov b, [bp + -1] ; $s             
4815   24A3 FD 79         mov g, b
4816   24A5 FD 77         inc b
4817   24A7 FA FF FF      lea d, [bp + -1] ; $s
4818   24AA FD 43         mov [d], b
4819   24AC FD 27         mov b, g
4820   24AE D8            push b
4821   24AF 26 08 00      mov b, $8
4822   24B2 E7            pop d
4823   24B3 FD 3E         mov [d], bl
4824   24B5             ;; break;   
4825   24B5 0A 75 25      jmp _switch83_exit ; case break
4826   24B8             _switch83_case3:
4827   24B8             ;; *s++ = '\f'; 
4828   24B8 2C FF FF      mov b, [bp + -1] ; $s             
4829   24BB FD 79         mov g, b
4830   24BD FD 77         inc b
4831   24BF FA FF FF      lea d, [bp + -1] ; $s
4832   24C2 FD 43         mov [d], b
4833   24C4 FD 27         mov b, g
4834   24C6 D8            push b
4835   24C7 26 0C 00      mov b, $c
4836   24CA E7            pop d
4837   24CB FD 3E         mov [d], bl
4838   24CD             ;; break; 
4839   24CD 0A 75 25      jmp _switch83_exit ; case break
4840   24D0             _switch83_case4:
4841   24D0             ;; *s++ = '\n'; 
4842   24D0 2C FF FF      mov b, [bp + -1] ; $s             
4843   24D3 FD 79         mov g, b
4844   24D5 FD 77         inc b
4845   24D7 FA FF FF      lea d, [bp + -1] ; $s
4846   24DA FD 43         mov [d], b
4847   24DC FD 27         mov b, g
4848   24DE D8            push b
4849   24DF 26 0A 00      mov b, $a
4850   24E2 E7            pop d
4851   24E3 FD 3E         mov [d], bl
4852   24E5             ;; break; 
4853   24E5 0A 75 25      jmp _switch83_exit ; case break
4854   24E8             _switch83_case5:
4855   24E8             ;; *s++ = '\r'; 
4856   24E8 2C FF FF      mov b, [bp + -1] ; $s             
4857   24EB FD 79         mov g, b
4858   24ED FD 77         inc b
4859   24EF FA FF FF      lea d, [bp + -1] ; $s
4860   24F2 FD 43         mov [d], b
4861   24F4 FD 27         mov b, g
4862   24F6 D8            push b
4863   24F7 26 0D 00      mov b, $d
4864   24FA E7            pop d
4865   24FB FD 3E         mov [d], bl
4866   24FD             ;; break; 
4867   24FD 0A 75 25      jmp _switch83_exit ; case break
4868   2500             _switch83_case6:
4869   2500             ;; *s++ = '\t'; 
4870   2500 2C FF FF      mov b, [bp + -1] ; $s             
4871   2503 FD 79         mov g, b
4872   2505 FD 77         inc b
4873   2507 FA FF FF      lea d, [bp + -1] ; $s
4874   250A FD 43         mov [d], b
4875   250C FD 27         mov b, g
4876   250E D8            push b
4877   250F 26 09 00      mov b, $9
4878   2512 E7            pop d
4879   2513 FD 3E         mov [d], bl
4880   2515             ;; break; 
4881   2515 0A 75 25      jmp _switch83_exit ; case break
4882   2518             _switch83_case7:
4883   2518             ;; *s++ = '\v'; 
4884   2518 2C FF FF      mov b, [bp + -1] ; $s             
4885   251B FD 79         mov g, b
4886   251D FD 77         inc b
4887   251F FA FF FF      lea d, [bp + -1] ; $s
4888   2522 FD 43         mov [d], b
4889   2524 FD 27         mov b, g
4890   2526 D8            push b
4891   2527 26 0B 00      mov b, $b
4892   252A E7            pop d
4893   252B FD 3E         mov [d], bl
4894   252D             ;; break; 
4895   252D 0A 75 25      jmp _switch83_exit ; case break
4896   2530             _switch83_case8:
4897   2530             ;; *s++ = '\\'; 
4898   2530 2C FF FF      mov b, [bp + -1] ; $s             
4899   2533 FD 79         mov g, b
4900   2535 FD 77         inc b
4901   2537 FA FF FF      lea d, [bp + -1] ; $s
4902   253A FD 43         mov [d], b
4903   253C FD 27         mov b, g
4904   253E D8            push b
4905   253F 26 5C 00      mov b, $5c
4906   2542 E7            pop d
4907   2543 FD 3E         mov [d], bl
4908   2545             ;; break; 
4909   2545 0A 75 25      jmp _switch83_exit ; case break
4910   2548             _switch83_case9:
4911   2548             ;; *s++ = '\''; 
4912   2548 2C FF FF      mov b, [bp + -1] ; $s             
4913   254B FD 79         mov g, b
4914   254D FD 77         inc b
4915   254F FA FF FF      lea d, [bp + -1] ; $s
4916   2552 FD 43         mov [d], b
4917   2554 FD 27         mov b, g
4918   2556 D8            push b
4919   2557 26 27 00      mov b, $27
4920   255A E7            pop d
4921   255B FD 3E         mov [d], bl
4922   255D             ;; break; 
4923   255D 0A 75 25      jmp _switch83_exit ; case break
4924   2560             _switch83_case10:
4925   2560             ;; *s++ = '\"'; 
4926   2560 2C FF FF      mov b, [bp + -1] ; $s             
4927   2563 FD 79         mov g, b
4928   2565 FD 77         inc b
4929   2567 FA FF FF      lea d, [bp + -1] ; $s
4930   256A FD 43         mov [d], b
4931   256C FD 27         mov b, g
4932   256E D8            push b
4933   256F 26 22 00      mov b, $22
4934   2572 E7            pop d
4935   2573 FD 3E         mov [d], bl
4936   2575             _switch83_exit:
4937   2575 0A 91 25      jmp _if82_exit
4938   2578             _if82_else:
4939   2578             ;; *s++ = *t; 
4940   2578 2C FF FF      mov b, [bp + -1] ; $s             
4941   257B FD 79         mov g, b
4942   257D FD 77         inc b
4943   257F FA FF FF      lea d, [bp + -1] ; $s
4944   2582 FD 43         mov [d], b
4945   2584 FD 27         mov b, g
4946   2586 D8            push b
4947   2587 2C FD FF      mov b, [bp + -3] ; $t             
4948   258A 74            mov d, b
4949   258B 32            mov bl, [d]
4950   258C A7 00         mov bh, 0
4951   258E E7            pop d
4952   258F FD 3E         mov [d], bl
4953   2591             _if82_exit:
4954   2591 0A 00 26      jmp _if81_exit
4955   2594             _if81_else:
4956   2594             ;; if(toktype == STRING_CONST){ 
4957   2594             _if84_cond:
4958   2594 29 4B 29      mov b, [_toktype] ; $toktype           
4959   2597             ; START RELATIONAL
4960   2597 D7            push a
4961   2598 11            mov a, b
4962   2599 26 03 00      mov b, 3; STRING_CONST
4963   259C B0            cmp a, b
4964   259D FD 71         seq ; ==
4965   259F E4            pop a
4966   25A0             ; END RELATIONAL
4967   25A0 C0 00 00      cmp b, 0
4968   25A3 C6 00 26      je _if84_exit
4969   25A6             _if84_true:
4970   25A6             ;; t++; 
4971   25A6 2C FD FF      mov b, [bp + -3] ; $t             
4972   25A9 FD 79         mov g, b
4973   25AB FD 77         inc b
4974   25AD FA FD FF      lea d, [bp + -3] ; $t
4975   25B0 FD 43         mov [d], b
4976   25B2 FD 27         mov b, g
4977   25B4             ;; while(*t != '\"' && *t){ 
4978   25B4             _while85_cond:
4979   25B4 2C FD FF      mov b, [bp + -3] ; $t             
4980   25B7 74            mov d, b
4981   25B8 32            mov bl, [d]
4982   25B9 A7 00         mov bh, 0
4983   25BB             ; START RELATIONAL
4984   25BB D7            push a
4985   25BC 11            mov a, b
4986   25BD 26 22 00      mov b, $22
4987   25C0 B0            cmp a, b
4988   25C1 FD 72         sneq ; !=
4989   25C3 E4            pop a
4990   25C4             ; END RELATIONAL
4991   25C4 D7            push a
4992   25C5 11            mov a, b
4993   25C6 2C FD FF      mov b, [bp + -3] ; $t             
4994   25C9 74            mov d, b
4995   25CA 32            mov bl, [d]
4996   25CB A7 00         mov bh, 0
4997   25CD FD A7         sand a, b ; &&
4998   25CF E4            pop a
4999   25D0 C0 00 00      cmp b, 0
5000   25D3 C6 FD 25      je _while85_exit
5001   25D6             _while85_block:
5002   25D6             ;; *s++ = *t++; 
5003   25D6 2C FF FF      mov b, [bp + -1] ; $s             
5004   25D9 FD 79         mov g, b
5005   25DB FD 77         inc b
5006   25DD FA FF FF      lea d, [bp + -1] ; $s
5007   25E0 FD 43         mov [d], b
5008   25E2 FD 27         mov b, g
5009   25E4 D8            push b
5010   25E5 2C FD FF      mov b, [bp + -3] ; $t             
5011   25E8 FD 79         mov g, b
5012   25EA FD 77         inc b
5013   25EC FA FD FF      lea d, [bp + -3] ; $t
5014   25EF FD 43         mov [d], b
5015   25F1 FD 27         mov b, g
5016   25F3 74            mov d, b
5017   25F4 32            mov bl, [d]
5018   25F5 A7 00         mov bh, 0
5019   25F7 E7            pop d
5020   25F8 FD 3E         mov [d], bl
5021   25FA 0A B4 25      jmp _while85_cond
5022   25FD             _while85_exit:
5023   25FD 0A 00 26      jmp _if84_exit
5024   2600             _if84_exit:
5025   2600             _if81_exit:
5026   2600             ;; *s = '\0'; 
5027   2600 2C FF FF      mov b, [bp + -1] ; $s             
5028   2603 D8            push b
5029   2604 26 00 00      mov b, $0
5030   2607 E7            pop d
5031   2608 FD 3E         mov [d], bl
5032   260A F9            leave
5033   260B 09            ret
5034   260C             
5035   260C             error:
5036   260C F8 00 00      enter 0 ; (push bp; mov bp, sp)
5037   260F             ;; printf("\nError: "); 
5038   260F 26 EC 2C      mov b, __s10 ; "\nError: "
5039   2612 FD AB         swp b
5040   2614 D8            push b
5041   2615 07 60 0B      call printf
5042   2618 51 02 00      add sp, 2
5043   261B             ;; printf(msg); 
5044   261B 2C 05 00      mov b, [bp + 5] ; $msg             
5045   261E FD AB         swp b
5046   2620 D8            push b
5047   2621 07 60 0B      call printf
5048   2624 51 02 00      add sp, 2
5049   2627             ;; printf("\n"); 
5050   2627 26 38 2C      mov b, __s2 ; "\n"
5051   262A FD AB         swp b
5052   262C D8            push b
5053   262D 07 60 0B      call printf
5054   2630 51 02 00      add sp, 2
5055   2633 F9            leave
5056   2634 09            ret
5057   2635             
5058   2635             http:
5059   2635 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5060   2638             ; $i 
5061   2638             ; $command 
5062   2638             ; $response 
5063   2638 52 C2 00      sub sp, 194
5064   263B             ;; switch(cmd){ 
5065   263B             _switch86_expr:
5066   263B 34 07 00      mov bl, [bp + 7] ; $cmd
5067   263E A7 00         mov bh, 0             
5068   2640             _switch86_comparisons:
5069   2640 C0 00 00      cmp b, 0
5070   2643 C6 64 26      je _switch86_case0
5071   2646 C0 01 00      cmp b, 1
5072   2649 C6 67 26      je _switch86_case1
5073   264C C0 02 00      cmp b, 2
5074   264F C6 4F 27      je _switch86_case2
5075   2652 C0 03 00      cmp b, 3
5076   2655 C6 50 28      je _switch86_case3
5077   2658 C0 04 00      cmp b, 4
5078   265B C6 5F 28      je _switch86_case4
5079   265E 0A 47 29      jmp _switch86_default
5080   2661 0A 47 29      jmp _switch86_exit
5081   2664             _switch86_case0:
5082   2664             ;; break; 
5083   2664 0A 47 29      jmp _switch86_exit ; case break
5084   2667             _switch86_case1:
5085   2667             ;; strcpy(command, "~1("); 
5086   2667 FA 7F FF      lea d, [bp + -129] ; $command
5087   266A 2D            mov b, d
5088   266B FD AB         swp b
5089   266D D8            push b
5090   266E 26 F5 2C      mov b, __s11 ; "~1("
5091   2671 FD AB         swp b
5092   2673 D8            push b
5093   2674 07 3E 09      call strcpy
5094   2677 51 04 00      add sp, 4
5095   267A             ;; for(i = 3; i < strlen(arg) + 3; i++){ 
5096   267A             _for87_init:
5097   267A FA FF FF      lea d, [bp + -1] ; $i         
5098   267D 26 03 00      mov b, $3        
5099   2680 FD 43         mov [d], b
5100   2682             _for87_cond:
5101   2682 2C FF FF      mov b, [bp + -1] ; $i             
5102   2685             ; START RELATIONAL
5103   2685 D7            push a
5104   2686 11            mov a, b
5105   2687 2C 05 00      mov b, [bp + 5] ; $arg             
5106   268A FD AB         swp b
5107   268C D8            push b
5108   268D 07 90 0A      call strlen
5109   2690 51 02 00      add sp, 2
5110   2693             ; START TERMS
5111   2693 D7            push a
5112   2694 11            mov a, b
5113   2695 26 03 00      mov b, $3
5114   2698 54            add a, b
5115   2699 27            mov b, a
5116   269A E4            pop a
5117   269B             ; END TERMS
5118   269B B0            cmp a, b
5119   269C FD 73         slt ; < 
5120   269E E4            pop a
5121   269F             ; END RELATIONAL
5122   269F C0 00 00      cmp b, 0
5123   26A2 C6 DC 26      je _for87_exit
5124   26A5             _for87_block:
5125   26A5             ;; command[i] = arg[i-3]; 
5126   26A5 FA 7F FF      lea d, [bp + -129] ; $command
5127   26A8 D7            push a         
5128   26A9 2C FF FF      mov b, [bp + -1] ; $i                     
5129   26AC 5A            add d, b
5130   26AD E4            pop a
5131   26AE DA            push d
5132   26AF FA 05 00      lea d, [bp + 5] ; $arg
5133   26B2 FD 2A         mov d, [d]
5134   26B4 D7            push a         
5135   26B5 2C FF FF      mov b, [bp + -1] ; $i             
5136   26B8             ; START TERMS
5137   26B8 D7            push a
5138   26B9 11            mov a, b
5139   26BA 26 03 00      mov b, $3
5140   26BD 60            sub a, b
5141   26BE 27            mov b, a
5142   26BF E4            pop a
5143   26C0             ; END TERMS        
5144   26C0 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5145   26C4 E4            pop a
5146   26C5 32            mov bl, [d]
5147   26C6 A7 00         mov bh, 0
5148   26C8 E7            pop d
5149   26C9 FD 3E         mov [d], bl
5150   26CB             _for87_update:
5151   26CB 2C FF FF      mov b, [bp + -1] ; $i             
5152   26CE FD 79         mov g, b
5153   26D0 FD 77         inc b
5154   26D2 FA FF FF      lea d, [bp + -1] ; $i
5155   26D5 FD 43         mov [d], b
5156   26D7 FD 27         mov b, g
5157   26D9 0A 82 26      jmp _for87_cond
5158   26DC             _for87_exit:
5159   26DC             ;; command[strlen(arg) + 3] = ')'; 
5160   26DC FA 7F FF      lea d, [bp + -129] ; $command
5161   26DF D7            push a
5162   26E0 DA            push d
5163   26E1 2C 05 00      mov b, [bp + 5] ; $arg             
5164   26E4 FD AB         swp b
5165   26E6 D8            push b
5166   26E7 07 90 0A      call strlen
5167   26EA 51 02 00      add sp, 2
5168   26ED             ; START TERMS
5169   26ED D7            push a
5170   26EE 11            mov a, b
5171   26EF 26 03 00      mov b, $3
5172   26F2 54            add a, b
5173   26F3 27            mov b, a
5174   26F4 E4            pop a
5175   26F5             ; END TERMS
5176   26F5 E7            pop d
5177   26F6 5A            add d, b
5178   26F7 E4            pop a         
5179   26F8 26 29 00      mov b, $29        
5180   26FB FD 3E         mov [d], bl
5181   26FD             ;; command[strlen(arg) + 4] = '\n'; 
5182   26FD FA 7F FF      lea d, [bp + -129] ; $command
5183   2700 D7            push a
5184   2701 DA            push d
5185   2702 2C 05 00      mov b, [bp + 5] ; $arg             
5186   2705 FD AB         swp b
5187   2707 D8            push b
5188   2708 07 90 0A      call strlen
5189   270B 51 02 00      add sp, 2
5190   270E             ; START TERMS
5191   270E D7            push a
5192   270F 11            mov a, b
5193   2710 26 04 00      mov b, $4
5194   2713 54            add a, b
5195   2714 27            mov b, a
5196   2715 E4            pop a
5197   2716             ; END TERMS
5198   2716 E7            pop d
5199   2717 5A            add d, b
5200   2718 E4            pop a         
5201   2719 26 0A 00      mov b, $a        
5202   271C FD 3E         mov [d], bl
5203   271E             ;; command[strlen(arg) + 5] = '\0'; 
5204   271E FA 7F FF      lea d, [bp + -129] ; $command
5205   2721 D7            push a
5206   2722 DA            push d
5207   2723 2C 05 00      mov b, [bp + 5] ; $arg             
5208   2726 FD AB         swp b
5209   2728 D8            push b
5210   2729 07 90 0A      call strlen
5211   272C 51 02 00      add sp, 2
5212   272F             ; START TERMS
5213   272F D7            push a
5214   2730 11            mov a, b
5215   2731 26 05 00      mov b, $5
5216   2734 54            add a, b
5217   2735 27            mov b, a
5218   2736 E4            pop a
5219   2737             ; END TERMS
5220   2737 E7            pop d
5221   2738 5A            add d, b
5222   2739 E4            pop a         
5223   273A 26 00 00      mov b, $0        
5224   273D FD 3E         mov [d], bl
5225   273F             ;; printf(command); 
5226   273F FA 7F FF      lea d, [bp + -129] ; $command
5227   2742 2D            mov b, d
5228   2743 FD AB         swp b
5229   2745 D8            push b
5230   2746 07 60 0B      call printf
5231   2749 51 02 00      add sp, 2
5232   274C             ;; break; 
5233   274C 0A 47 29      jmp _switch86_exit ; case break
5234   274F             _switch86_case2:
5235   274F             ;; strcpy(command, "~2("); 
5236   274F FA 7F FF      lea d, [bp + -129] ; $command
5237   2752 2D            mov b, d
5238   2753 FD AB         swp b
5239   2755 D8            push b
5240   2756 26 F9 2C      mov b, __s12 ; "~2("
5241   2759 FD AB         swp b
5242   275B D8            push b
5243   275C 07 3E 09      call strcpy
5244   275F 51 04 00      add sp, 4
5245   2762             ;; for(i = 3; i < strlen(arg) + 3; i++){ 
5246   2762             _for88_init:
5247   2762 FA FF FF      lea d, [bp + -1] ; $i         
5248   2765 26 03 00      mov b, $3        
5249   2768 FD 43         mov [d], b
5250   276A             _for88_cond:
5251   276A 2C FF FF      mov b, [bp + -1] ; $i             
5252   276D             ; START RELATIONAL
5253   276D D7            push a
5254   276E 11            mov a, b
5255   276F 2C 05 00      mov b, [bp + 5] ; $arg             
5256   2772 FD AB         swp b
5257   2774 D8            push b
5258   2775 07 90 0A      call strlen
5259   2778 51 02 00      add sp, 2
5260   277B             ; START TERMS
5261   277B D7            push a
5262   277C 11            mov a, b
5263   277D 26 03 00      mov b, $3
5264   2780 54            add a, b
5265   2781 27            mov b, a
5266   2782 E4            pop a
5267   2783             ; END TERMS
5268   2783 B0            cmp a, b
5269   2784 FD 73         slt ; < 
5270   2786 E4            pop a
5271   2787             ; END RELATIONAL
5272   2787 C0 00 00      cmp b, 0
5273   278A C6 C4 27      je _for88_exit
5274   278D             _for88_block:
5275   278D             ;; command[i] = arg[i-3]; 
5276   278D FA 7F FF      lea d, [bp + -129] ; $command
5277   2790 D7            push a         
5278   2791 2C FF FF      mov b, [bp + -1] ; $i                     
5279   2794 5A            add d, b
5280   2795 E4            pop a
5281   2796 DA            push d
5282   2797 FA 05 00      lea d, [bp + 5] ; $arg
5283   279A FD 2A         mov d, [d]
5284   279C D7            push a         
5285   279D 2C FF FF      mov b, [bp + -1] ; $i             
5286   27A0             ; START TERMS
5287   27A0 D7            push a
5288   27A1 11            mov a, b
5289   27A2 26 03 00      mov b, $3
5290   27A5 60            sub a, b
5291   27A6 27            mov b, a
5292   27A7 E4            pop a
5293   27A8             ; END TERMS        
5294   27A8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5295   27AC E4            pop a
5296   27AD 32            mov bl, [d]
5297   27AE A7 00         mov bh, 0
5298   27B0 E7            pop d
5299   27B1 FD 3E         mov [d], bl
5300   27B3             _for88_update:
5301   27B3 2C FF FF      mov b, [bp + -1] ; $i             
5302   27B6 FD 79         mov g, b
5303   27B8 FD 77         inc b
5304   27BA FA FF FF      lea d, [bp + -1] ; $i
5305   27BD FD 43         mov [d], b
5306   27BF FD 27         mov b, g
5307   27C1 0A 6A 27      jmp _for88_cond
5308   27C4             _for88_exit:
5309   27C4             ;; command[strlen(arg) + 3] = ')'; 
5310   27C4 FA 7F FF      lea d, [bp + -129] ; $command
5311   27C7 D7            push a
5312   27C8 DA            push d
5313   27C9 2C 05 00      mov b, [bp + 5] ; $arg             
5314   27CC FD AB         swp b
5315   27CE D8            push b
5316   27CF 07 90 0A      call strlen
5317   27D2 51 02 00      add sp, 2
5318   27D5             ; START TERMS
5319   27D5 D7            push a
5320   27D6 11            mov a, b
5321   27D7 26 03 00      mov b, $3
5322   27DA 54            add a, b
5323   27DB 27            mov b, a
5324   27DC E4            pop a
5325   27DD             ; END TERMS
5326   27DD E7            pop d
5327   27DE 5A            add d, b
5328   27DF E4            pop a         
5329   27E0 26 29 00      mov b, $29        
5330   27E3 FD 3E         mov [d], bl
5331   27E5             ;; command[strlen(arg) + 4] = '\n'; 
5332   27E5 FA 7F FF      lea d, [bp + -129] ; $command
5333   27E8 D7            push a
5334   27E9 DA            push d
5335   27EA 2C 05 00      mov b, [bp + 5] ; $arg             
5336   27ED FD AB         swp b
5337   27EF D8            push b
5338   27F0 07 90 0A      call strlen
5339   27F3 51 02 00      add sp, 2
5340   27F6             ; START TERMS
5341   27F6 D7            push a
5342   27F7 11            mov a, b
5343   27F8 26 04 00      mov b, $4
5344   27FB 54            add a, b
5345   27FC 27            mov b, a
5346   27FD E4            pop a
5347   27FE             ; END TERMS
5348   27FE E7            pop d
5349   27FF 5A            add d, b
5350   2800 E4            pop a         
5351   2801 26 0A 00      mov b, $a        
5352   2804 FD 3E         mov [d], bl
5353   2806             ;; command[strlen(arg) + 5] = '\0'; 
5354   2806 FA 7F FF      lea d, [bp + -129] ; $command
5355   2809 D7            push a
5356   280A DA            push d
5357   280B 2C 05 00      mov b, [bp + 5] ; $arg             
5358   280E FD AB         swp b
5359   2810 D8            push b
5360   2811 07 90 0A      call strlen
5361   2814 51 02 00      add sp, 2
5362   2817             ; START TERMS
5363   2817 D7            push a
5364   2818 11            mov a, b
5365   2819 26 05 00      mov b, $5
5366   281C 54            add a, b
5367   281D 27            mov b, a
5368   281E E4            pop a
5369   281F             ; END TERMS
5370   281F E7            pop d
5371   2820 5A            add d, b
5372   2821 E4            pop a         
5373   2822 26 00 00      mov b, $0        
5374   2825 FD 3E         mov [d], bl
5375   2827             ;; printf(command); 
5376   2827 FA 7F FF      lea d, [bp + -129] ; $command
5377   282A 2D            mov b, d
5378   282B FD AB         swp b
5379   282D D8            push b
5380   282E 07 60 0B      call printf
5381   2831 51 02 00      add sp, 2
5382   2834             ;; gets(response); // Read status response. 
5383   2834 FA 3F FF      lea d, [bp + -193] ; $response
5384   2837 2D            mov b, d
5385   2838 FD AB         swp b
5386   283A D8            push b
5387   283B 07 0F 0F      call gets
5388   283E 51 02 00      add sp, 2
5389   2841             ;; return atoi(response); 
5390   2841 FA 3F FF      lea d, [bp + -193] ; $response
5391   2844 2D            mov b, d
5392   2845 FD AB         swp b
5393   2847 D8            push b
5394   2848 07 06 0E      call atoi
5395   284B 51 02 00      add sp, 2
5396   284E F9            leave
5397   284F 09            ret
5398   2850             _switch86_case3:
5399   2850             ;; printf("~3\n"); // Command sent to ESP8266. ESP will wait 3 seconds before sending the file. 
5400   2850 26 FD 2C      mov b, __s13 ; "~3\n"
5401   2853 FD AB         swp b
5402   2855 D8            push b
5403   2856 07 60 0B      call printf
5404   2859 51 02 00      add sp, 2
5405   285C             ;; break; 
5406   285C 0A 47 29      jmp _switch86_exit ; case break
5407   285F             _switch86_case4:
5408   285F             ;; strcpy(command, "~4("); 
5409   285F FA 7F FF      lea d, [bp + -129] ; $command
5410   2862 2D            mov b, d
5411   2863 FD AB         swp b
5412   2865 D8            push b
5413   2866 26 01 2D      mov b, __s14 ; "~4("
5414   2869 FD AB         swp b
5415   286B D8            push b
5416   286C 07 3E 09      call strcpy
5417   286F 51 04 00      add sp, 4
5418   2872             ;; for(i = 3; i < strlen(arg) + 3; i++){ 
5419   2872             _for89_init:
5420   2872 FA FF FF      lea d, [bp + -1] ; $i         
5421   2875 26 03 00      mov b, $3        
5422   2878 FD 43         mov [d], b
5423   287A             _for89_cond:
5424   287A 2C FF FF      mov b, [bp + -1] ; $i             
5425   287D             ; START RELATIONAL
5426   287D D7            push a
5427   287E 11            mov a, b
5428   287F 2C 05 00      mov b, [bp + 5] ; $arg             
5429   2882 FD AB         swp b
5430   2884 D8            push b
5431   2885 07 90 0A      call strlen
5432   2888 51 02 00      add sp, 2
5433   288B             ; START TERMS
5434   288B D7            push a
5435   288C 11            mov a, b
5436   288D 26 03 00      mov b, $3
5437   2890 54            add a, b
5438   2891 27            mov b, a
5439   2892 E4            pop a
5440   2893             ; END TERMS
5441   2893 B0            cmp a, b
5442   2894 FD 73         slt ; < 
5443   2896 E4            pop a
5444   2897             ; END RELATIONAL
5445   2897 C0 00 00      cmp b, 0
5446   289A C6 D4 28      je _for89_exit
5447   289D             _for89_block:
5448   289D             ;; command[i] = arg[i-3]; 
5449   289D FA 7F FF      lea d, [bp + -129] ; $command
5450   28A0 D7            push a         
5451   28A1 2C FF FF      mov b, [bp + -1] ; $i                     
5452   28A4 5A            add d, b
5453   28A5 E4            pop a
5454   28A6 DA            push d
5455   28A7 FA 05 00      lea d, [bp + 5] ; $arg
5456   28AA FD 2A         mov d, [d]
5457   28AC D7            push a         
5458   28AD 2C FF FF      mov b, [bp + -1] ; $i             
5459   28B0             ; START TERMS
5460   28B0 D7            push a
5461   28B1 11            mov a, b
5462   28B2 26 03 00      mov b, $3
5463   28B5 60            sub a, b
5464   28B6 27            mov b, a
5465   28B7 E4            pop a
5466   28B8             ; END TERMS        
5467   28B8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
5468   28BC E4            pop a
5469   28BD 32            mov bl, [d]
5470   28BE A7 00         mov bh, 0
5471   28C0 E7            pop d
5472   28C1 FD 3E         mov [d], bl
5473   28C3             _for89_update:
5474   28C3 2C FF FF      mov b, [bp + -1] ; $i             
5475   28C6 FD 79         mov g, b
5476   28C8 FD 77         inc b
5477   28CA FA FF FF      lea d, [bp + -1] ; $i
5478   28CD FD 43         mov [d], b
5479   28CF FD 27         mov b, g
5480   28D1 0A 7A 28      jmp _for89_cond
5481   28D4             _for89_exit:
5482   28D4             ;; command[strlen(arg) + 3] = ')'; 
5483   28D4 FA 7F FF      lea d, [bp + -129] ; $command
5484   28D7 D7            push a
5485   28D8 DA            push d
5486   28D9 2C 05 00      mov b, [bp + 5] ; $arg             
5487   28DC FD AB         swp b
5488   28DE D8            push b
5489   28DF 07 90 0A      call strlen
5490   28E2 51 02 00      add sp, 2
5491   28E5             ; START TERMS
5492   28E5 D7            push a
5493   28E6 11            mov a, b
5494   28E7 26 03 00      mov b, $3
5495   28EA 54            add a, b
5496   28EB 27            mov b, a
5497   28EC E4            pop a
5498   28ED             ; END TERMS
5499   28ED E7            pop d
5500   28EE 5A            add d, b
5501   28EF E4            pop a         
5502   28F0 26 29 00      mov b, $29        
5503   28F3 FD 3E         mov [d], bl
5504   28F5             ;; command[strlen(arg) + 4] = '\n'; 
5505   28F5 FA 7F FF      lea d, [bp + -129] ; $command
5506   28F8 D7            push a
5507   28F9 DA            push d
5508   28FA 2C 05 00      mov b, [bp + 5] ; $arg             
5509   28FD FD AB         swp b
5510   28FF D8            push b
5511   2900 07 90 0A      call strlen
5512   2903 51 02 00      add sp, 2
5513   2906             ; START TERMS
5514   2906 D7            push a
5515   2907 11            mov a, b
5516   2908 26 04 00      mov b, $4
5517   290B 54            add a, b
5518   290C 27            mov b, a
5519   290D E4            pop a
5520   290E             ; END TERMS
5521   290E E7            pop d
5522   290F 5A            add d, b
5523   2910 E4            pop a         
5524   2911 26 0A 00      mov b, $a        
5525   2914 FD 3E         mov [d], bl
5526   2916             ;; command[strlen(arg) + 5] = '\0'; 
5527   2916 FA 7F FF      lea d, [bp + -129] ; $command
5528   2919 D7            push a
5529   291A DA            push d
5530   291B 2C 05 00      mov b, [bp + 5] ; $arg             
5531   291E FD AB         swp b
5532   2920 D8            push b
5533   2921 07 90 0A      call strlen
5534   2924 51 02 00      add sp, 2
5535   2927             ; START TERMS
5536   2927 D7            push a
5537   2928 11            mov a, b
5538   2929 26 05 00      mov b, $5
5539   292C 54            add a, b
5540   292D 27            mov b, a
5541   292E E4            pop a
5542   292F             ; END TERMS
5543   292F E7            pop d
5544   2930 5A            add d, b
5545   2931 E4            pop a         
5546   2932 26 00 00      mov b, $0        
5547   2935 FD 3E         mov [d], bl
5548   2937             ;; printf(command); 
5549   2937 FA 7F FF      lea d, [bp + -129] ; $command
5550   293A 2D            mov b, d
5551   293B FD AB         swp b
5552   293D D8            push b
5553   293E 07 60 0B      call printf
5554   2941 51 02 00      add sp, 2
5555   2944             ;; break; 
5556   2944 0A 47 29      jmp _switch86_exit ; case break
5557   2947             _switch86_default:
5558   2947             _switch86_exit:
5559   2947 F9            leave
5560   2948 09            ret
5561   2949             ; --- END TEXT BLOCK
5562   2949             
5563   2949             ; --- BEGIN DATA BLOCK
5564   2949 00 00       _tok: .fill 2, 0
5565   294B 00 00       _toktype: .fill 2, 0
5566   294D 00 00       _prog: .fill 2, 0
5567   294F 00 00 00 00 _token_data: .fill 256, 0
5567   2953 00 00 00 00 
5567   2957 00 00 00 00 
5567   295B 00 00 00 00 
5567   295F 00 00 00 00 
5567   2963 00 00 00 00 
5567   2967 00 00 00 00 
5567   296B 00 00 00 00 
5567   296F 00 00 00 00 
5567   2973 00 00 00 00 
5567   2977 00 00 00 00 
5567   297B 00 00 00 00 
5567   297F 00 00 00 00 
5567   2983 00 00 00 00 
5567   2987 00 00 00 00 
5567   298B 00 00 00 00 
5567   298F 00 00 00 00 
5567   2993 00 00 00 00 
5567   2997 00 00 00 00 
5567   299B 00 00 00 00 
5567   299F 00 00 00 00 
5567   29A3 00 00 00 00 
5567   29A7 00 00 00 00 
5567   29AB 00 00 00 00 
5567   29AF 00 00 00 00 
5567   29B3 00 00 00 00 
5567   29B7 00 00 00 00 
5567   29BB 00 00 00 00 
5567   29BF 00 00 00 00 
5567   29C3 00 00 00 00 
5567   29C7 00 00 00 00 
5567   29CB 00 00 00 00 
5567   29CF 00 00 00 00 
5567   29D3 00 00 00 00 
5567   29D7 00 00 00 00 
5567   29DB 00 00 00 00 
5567   29DF 00 00 00 00 
5567   29E3 00 00 00 00 
5567   29E7 00 00 00 00 
5567   29EB 00 00 00 00 
5567   29EF 00 00 00 00 
5567   29F3 00 00 00 00 
5567   29F7 00 00 00 00 
5567   29FB 00 00 00 00 
5567   29FF 00 00 00 00 
5567   2A03 00 00 00 00 
5567   2A07 00 00 00 00 
5567   2A0B 00 00 00 00 
5567   2A0F 00 00 00 00 
5567   2A13 00 00 00 00 
5567   2A17 00 00 00 00 
5567   2A1B 00 00 00 00 
5567   2A1F 00 00 00 00 
5567   2A23 00 00 00 00 
5567   2A27 00 00 00 00 
5567   2A2B 00 00 00 00 
5567   2A2F 00 00 00 00 
5567   2A33 00 00 00 00 
5567   2A37 00 00 00 00 
5567   2A3B 00 00 00 00 
5567   2A3F 00 00 00 00 
5567   2A43 00 00 00 00 
5567   2A47 00 00 00 00 
5567   2A4B 00 00 00 00 
5568   2A4F 00 00 00 00 _string_const_data: .fill 256, 0
5568   2A53 00 00 00 00 
5568   2A57 00 00 00 00 
5568   2A5B 00 00 00 00 
5568   2A5F 00 00 00 00 
5568   2A63 00 00 00 00 
5568   2A67 00 00 00 00 
5568   2A6B 00 00 00 00 
5568   2A6F 00 00 00 00 
5568   2A73 00 00 00 00 
5568   2A77 00 00 00 00 
5568   2A7B 00 00 00 00 
5568   2A7F 00 00 00 00 
5568   2A83 00 00 00 00 
5568   2A87 00 00 00 00 
5568   2A8B 00 00 00 00 
5568   2A8F 00 00 00 00 
5568   2A93 00 00 00 00 
5568   2A97 00 00 00 00 
5568   2A9B 00 00 00 00 
5568   2A9F 00 00 00 00 
5568   2AA3 00 00 00 00 
5568   2AA7 00 00 00 00 
5568   2AAB 00 00 00 00 
5568   2AAF 00 00 00 00 
5568   2AB3 00 00 00 00 
5568   2AB7 00 00 00 00 
5568   2ABB 00 00 00 00 
5568   2ABF 00 00 00 00 
5568   2AC3 00 00 00 00 
5568   2AC7 00 00 00 00 
5568   2ACB 00 00 00 00 
5568   2ACF 00 00 00 00 
5568   2AD3 00 00 00 00 
5568   2AD7 00 00 00 00 
5568   2ADB 00 00 00 00 
5568   2ADF 00 00 00 00 
5568   2AE3 00 00 00 00 
5568   2AE7 00 00 00 00 
5568   2AEB 00 00 00 00 
5568   2AEF 00 00 00 00 
5568   2AF3 00 00 00 00 
5568   2AF7 00 00 00 00 
5568   2AFB 00 00 00 00 
5568   2AFF 00 00 00 00 
5568   2B03 00 00 00 00 
5568   2B07 00 00 00 00 
5568   2B0B 00 00 00 00 
5568   2B0F 00 00 00 00 
5568   2B13 00 00 00 00 
5568   2B17 00 00 00 00 
5568   2B1B 00 00 00 00 
5568   2B1F 00 00 00 00 
5568   2B23 00 00 00 00 
5568   2B27 00 00 00 00 
5568   2B2B 00 00 00 00 
5568   2B2F 00 00 00 00 
5568   2B33 00 00 00 00 
5568   2B37 00 00 00 00 
5568   2B3B 00 00 00 00 
5568   2B3F 00 00 00 00 
5568   2B43 00 00 00 00 
5568   2B47 00 00 00 00 
5568   2B4B 00 00 00 00 
5569   2B4F 00 00 00 00 _url_data: .fill 128, 0
5569   2B53 00 00 00 00 
5569   2B57 00 00 00 00 
5569   2B5B 00 00 00 00 
5569   2B5F 00 00 00 00 
5569   2B63 00 00 00 00 
5569   2B67 00 00 00 00 
5569   2B6B 00 00 00 00 
5569   2B6F 00 00 00 00 
5569   2B73 00 00 00 00 
5569   2B77 00 00 00 00 
5569   2B7B 00 00 00 00 
5569   2B7F 00 00 00 00 
5569   2B83 00 00 00 00 
5569   2B87 00 00 00 00 
5569   2B8B 00 00 00 00 
5569   2B8F 00 00 00 00 
5569   2B93 00 00 00 00 
5569   2B97 00 00 00 00 
5569   2B9B 00 00 00 00 
5569   2B9F 00 00 00 00 
5569   2BA3 00 00 00 00 
5569   2BA7 00 00 00 00 
5569   2BAB 00 00 00 00 
5569   2BAF 00 00 00 00 
5569   2BB3 00 00 00 00 
5569   2BB7 00 00 00 00 
5569   2BBB 00 00 00 00 
5569   2BBF 00 00 00 00 
5569   2BC3 00 00 00 00 
5569   2BC7 00 00 00 00 
5569   2BCB 00 00 00 00 
5570   2BCF 00 00 00 00 _filename_data: .fill 64, 0
5570   2BD3 00 00 00 00 
5570   2BD7 00 00 00 00 
5570   2BDB 00 00 00 00 
5570   2BDF 00 00 00 00 
5570   2BE3 00 00 00 00 
5570   2BE7 00 00 00 00 
5570   2BEB 00 00 00 00 
5570   2BEF 00 00 00 00 
5570   2BF3 00 00 00 00 
5570   2BF7 00 00 00 00 
5570   2BFB 00 00 00 00 
5570   2BFF 00 00 00 00 
5570   2C03 00 00 00 00 
5570   2C07 00 00 00 00 
5570   2C0B 00 00 00 00 
5571   2C0F 0A 75 73 61 __s0: .db "\nusage: hget <url> <filename>", 0
5571   2C13 67 65 3A 20 
5571   2C17 68 67 65 74 
5571   2C1B 20 3C 75 72 
5571   2C1F 6C 3E 20 3C 
5571   2C23 66 69 6C 65 
5571   2C27 6E 61 6D 65 
5571   2C2B 3E 00 
5572   2C2D 46 69 6C 65 __s1: .db "Filename: ", 0
5572   2C31 6E 61 6D 65 
5572   2C35 3A 20 00 
5573   2C38 0A 00       __s2: .db "\n", 0
5574   2C3A 55 72 6C 3A __s3: .db "Url: ", 0
5574   2C3E 20 00 
5575   2C40 4E 6F 77 20 __s4: .db "Now creating file...\n", 0
5575   2C44 63 72 65 61 
5575   2C48 74 69 6E 67 
5575   2C4C 20 66 69 6C 
5575   2C50 65 2E 2E 2E 
5575   2C54 0A 00 
5576   2C56 4F 4B 2E 0A __s5: .db "OK.\n", 0
5576   2C5A 00 
5577   2C5B 42 61 64 20 __s6: .db "Bad code, aborting...\n", 0
5577   2C5F 63 6F 64 65 
5577   2C63 2C 20 61 62 
5577   2C67 6F 72 74 69 
5577   2C6B 6E 67 2E 2E 
5577   2C6F 2E 0A 00 
5578   2C72 55 6E 6B 6E __s7: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
5578   2C76 6F 77 6E 20 
5578   2C7A 74 79 70 65 
5578   2C7E 20 73 69 7A 
5578   2C82 65 20 69 6E 
5578   2C86 20 76 61 5F 
5578   2C8A 61 72 67 28 
5578   2C8E 29 20 63 61 
5578   2C92 6C 6C 2E 20 
5578   2C96 53 69 7A 65 
5578   2C9A 20 6E 65 65 
5578   2C9E 64 73 20 74 
5578   2CA2 6F 20 62 65 
5578   2CA6 20 65 69 74 
5578   2CAA 68 65 72 20 
5578   2CAE 31 20 6F 72 
5578   2CB2 20 32 2E 00 
5579   2CB6 45 72 72 6F __s8: .db "Error: Unknown argument type.\n", 0
5579   2CBA 72 3A 20 55 
5579   2CBE 6E 6B 6E 6F 
5579   2CC2 77 6E 20 61 
5579   2CC6 72 67 75 6D 
5579   2CCA 65 6E 74 20 
5579   2CCE 74 79 70 65 
5579   2CD2 2E 0A 00 
5580   2CD5 44 6F 75 62 __s9: .db "Double quotes expected", 0
5580   2CD9 6C 65 20 71 
5580   2CDD 75 6F 74 65 
5580   2CE1 73 20 65 78 
5580   2CE5 70 65 63 74 
5580   2CE9 65 64 00 
5581   2CEC 0A 45 72 72 __s10: .db "\nError: ", 0
5581   2CF0 6F 72 3A 20 
5581   2CF4 00 
5582   2CF5 7E 31 28 00 __s11: .db "~1(", 0
5583   2CF9 7E 32 28 00 __s12: .db "~2(", 0
5584   2CFD 7E 33 0A 00 __s13: .db "~3\n", 0
5585   2D01 7E 34 28 00 __s14: .db "~4(", 0
5586   2D05             
5587   2D05 07 2D       _heap_top: .dw _heap
5588   2D07 00          _heap: .db 0
5589   2D08             ; --- END DATA BLOCK
5590   2D08             
5591   2D08             .end
tasm: Number of errors = 0
