0001   0000             ; --- FILENAME: ../solarium/usr/bin/shell
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400             
0009   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0010   0404             
0011   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0012   0408             
0013   0408             ; $p 
0014   0408             ; $t 
0015   0408             ; $temp_prog 
0016   0408             ; $varname 
0017   0408             ; $is_assignment 
0018   0408             ; $variable_str 
0019   0408             ; $variable_int 
0020   0408             ; $var_index 
0021   0408             ; $i 
0022   0408 52 8E 00      sub sp, 142
0023   040B             
0024   040B             ;; new_str_var("path", "", 64); 
0025   040B 26 40 00      mov b, $40
0026   040E FD AB         swp b
0027   0410 D8            push b
0028   0411 26 58 3B      mov b, __s1 ; ""
0029   0414 FD AB         swp b
0030   0416 D8            push b
0031   0417 26 53 3B      mov b, __s0 ; "path"
0032   041A FD AB         swp b
0033   041C D8            push b
0034   041D 07 5E 2C      call new_str_var
0035   0420 51 06 00      add sp, 6
0036   0423             ;; new_str_var("home", "", 64); 
0037   0423 26 40 00      mov b, $40
0038   0426 FD AB         swp b
0039   0428 D8            push b
0040   0429 26 5D 3B      mov b, __s2 ; ""
0041   042C FD AB         swp b
0042   042E D8            push b
0043   042F 26 58 3B      mov b, __s1 ; "home"
0044   0432 FD AB         swp b
0045   0434 D8            push b
0046   0435 07 5E 2C      call new_str_var
0047   0438 51 06 00      add sp, 6
0048   043B             ;; read_config("/etc/shell.cfg", "path", variables[0].as_string); 
0049   043B 3B 7F 3A      mov d, _variables_data ; $variables
0050   043E D7            push a
0051   043F DA            push d
0052   0440 26 00 00      mov b, $0
0053   0443 E7            pop d
0054   0444 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0055   0448 E4            pop a
0056   0449 58 11 00      add d, 17
0057   044C FD 14         clb
0058   044E 2A            mov b, [d]
0059   044F FD AB         swp b
0060   0451 D8            push b
0061   0452 26 53 3B      mov b, __s0 ; "path"
0062   0455 FD AB         swp b
0063   0457 D8            push b
0064   0458 26 5D 3B      mov b, __s2 ; "/etc/shell.cfg"
0065   045B FD AB         swp b
0066   045D D8            push b
0067   045E 07 28 32      call read_config
0068   0461 51 06 00      add sp, 6
0069   0464             ;; read_config("/etc/shell.cfg", "home", variables[1].as_string); 
0070   0464 3B 7F 3A      mov d, _variables_data ; $variables
0071   0467 D7            push a
0072   0468 DA            push d
0073   0469 26 01 00      mov b, $1
0074   046C E7            pop d
0075   046D FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0076   0471 E4            pop a
0077   0472 58 11 00      add d, 17
0078   0475 FD 14         clb
0079   0477 2A            mov b, [d]
0080   0478 FD AB         swp b
0081   047A D8            push b
0082   047B 26 58 3B      mov b, __s1 ; "home"
0083   047E FD AB         swp b
0084   0480 D8            push b
0085   0481 26 5D 3B      mov b, __s2 ; "/etc/shell.cfg"
0086   0484 FD AB         swp b
0087   0486 D8            push b
0088   0487 07 28 32      call read_config
0089   048A 51 06 00      add sp, 6
0090   048D             ;; for(;;){ 
0091   048D             _for1_init:
0092   048D             _for1_cond:
0093   048D             _for1_block:
0094   048D             ;; printf("root@Sol-1:");  
0095   048D 26 6C 3B      mov b, __s3 ; "root@Sol-1:"
0096   0490 FD AB         swp b
0097   0492 D8            push b
0098   0493 07 EB 0E      call printf
0099   0496 51 02 00      add sp, 2
0100   0499             ;; print_cwd();  
0101   0499 07 05 32      call print_cwd
0102   049C             ;; printf(" # "); 
0103   049C 26 78 3B      mov b, __s4 ; " # "
0104   049F FD AB         swp b
0105   04A1 D8            push b
0106   04A2 07 EB 0E      call printf
0107   04A5 51 02 00      add sp, 2
0108   04A8             ;; gets(command); 
0109   04A8 3B FF 34      mov d, _command_data ; $command
0110   04AB 2D            mov b, d
0111   04AC FD AB         swp b
0112   04AE D8            push b
0113   04AF 07 EA 12      call gets
0114   04B2 51 02 00      add sp, 2
0115   04B5             ;; print("\n\r"); 
0116   04B5 26 7C 3B      mov b, __s5 ; "\n\r"
0117   04B8 FD AB         swp b
0118   04BA D8            push b
0119   04BB 07 2D 15      call print
0120   04BE 51 02 00      add sp, 2
0121   04C1             ;; if(command[0]) strcpy(last_cmd, command); 
0122   04C1             _if2_cond:
0123   04C1 3B FF 34      mov d, _command_data ; $command
0124   04C4 D7            push a
0125   04C5 DA            push d
0126   04C6 26 00 00      mov b, $0
0127   04C9 E7            pop d
0128   04CA 5A            add d, b
0129   04CB E4            pop a
0130   04CC 32            mov bl, [d]
0131   04CD A7 00         mov bh, 0
0132   04CF C0 00 00      cmp b, 0
0133   04D2 C6 EC 04      je _if2_exit
0134   04D5             _if2_true:
0135   04D5             ;; strcpy(last_cmd, command); 
0136   04D5 3B FF 34      mov d, _command_data ; $command
0137   04D8 2D            mov b, d
0138   04D9 FD AB         swp b
0139   04DB D8            push b
0140   04DC 3B FF 39      mov d, _last_cmd_data ; $last_cmd
0141   04DF 2D            mov b, d
0142   04E0 FD AB         swp b
0143   04E2 D8            push b
0144   04E3 07 26 0D      call strcpy
0145   04E6 51 04 00      add sp, 4
0146   04E9 0A EC 04      jmp _if2_exit
0147   04EC             _if2_exit:
0148   04EC             ;; prog = command; 
0149   04EC 3B FB 32      mov d, _prog ; $prog
0150   04EF DA            push d
0151   04F0 3B FF 34      mov d, _command_data ; $command
0152   04F3 2D            mov b, d
0153   04F4 E7            pop d
0154   04F5 FD 43         mov [d], b
0155   04F7             ;; for(;;){ 
0156   04F7             _for3_init:
0157   04F7             _for3_cond:
0158   04F7             _for3_block:
0159   04F7             ;; temp_prog = prog; 
0160   04F7 FA FB FF      lea d, [bp + -5] ; $temp_prog
0161   04FA DA            push d
0162   04FB 3B FB 32      mov d, _prog ; $prog
0163   04FE 2A            mov b, [d]
0164   04FF E7            pop d
0165   0500 FD 43         mov [d], b
0166   0502             ;; get(); 
0167   0502 07 D0 1B      call get
0168   0505             ;; if(tok == SEMICOLON) get(); 
0169   0505             _if4_cond:
0170   0505 3B F7 32      mov d, _tok ; $tok
0171   0508 2A            mov b, [d]
0172   0509             ; START RELATIONAL
0173   0509 D7            push a
0174   050A 11            mov a, b
0175   050B 26 23 00      mov b, 35; SEMICOLON
0176   050E B0            cmp a, b
0177   050F FD 71         seq ; ==
0178   0511 E4            pop a
0179   0512             ; END RELATIONAL
0180   0512 C0 00 00      cmp b, 0
0181   0515 C6 1E 05      je _if4_exit
0182   0518             _if4_true:
0183   0518             ;; get(); 
0184   0518 07 D0 1B      call get
0185   051B 0A 1E 05      jmp _if4_exit
0186   051E             _if4_exit:
0187   051E             ;; if(toktype == END) break; // check for empty input 
0188   051E             _if5_cond:
0189   051E 3B F9 32      mov d, _toktype ; $toktype
0190   0521 2A            mov b, [d]
0191   0522             ; START RELATIONAL
0192   0522 D7            push a
0193   0523 11            mov a, b
0194   0524 26 06 00      mov b, 6; END
0195   0527 B0            cmp a, b
0196   0528 FD 71         seq ; ==
0197   052A E4            pop a
0198   052B             ; END RELATIONAL
0199   052B C0 00 00      cmp b, 0
0200   052E C6 37 05      je _if5_exit
0201   0531             _if5_true:
0202   0531             ;; break; // check for empty input 
0203   0531 0A 83 09      jmp _for3_exit ; for break
0204   0534 0A 37 05      jmp _if5_exit
0205   0537             _if5_exit:
0206   0537             ;; is_assignment = 0; 
0207   0537 FA F9 FF      lea d, [bp + -7] ; $is_assignment
0208   053A DA            push d
0209   053B 26 00 00      mov b, $0
0210   053E E7            pop d
0211   053F FD 3E         mov [d], bl
0212   0541             ;; if(toktype == IDENTIFIER){ 
0213   0541             _if6_cond:
0214   0541 3B F9 32      mov d, _toktype ; $toktype
0215   0544 2A            mov b, [d]
0216   0545             ; START RELATIONAL
0217   0545 D7            push a
0218   0546 11            mov a, b
0219   0547 26 05 00      mov b, 5; IDENTIFIER
0220   054A B0            cmp a, b
0221   054B FD 71         seq ; ==
0222   054D E4            pop a
0223   054E             ; END RELATIONAL
0224   054E C0 00 00      cmp b, 0
0225   0551 C6 84 05      je _if6_exit
0226   0554             _if6_true:
0227   0554             ;; strcpy(varname, token); 
0228   0554 3B FD 32      mov d, _token_data ; $token
0229   0557 2D            mov b, d
0230   0558 FD AB         swp b
0231   055A D8            push b
0232   055B FA FA FF      lea d, [bp + -6] ; $varname
0233   055E 32            mov bl, [d]
0234   055F A7 00         mov bh, 0
0235   0561 FD AB         swp b
0236   0563 D8            push b
0237   0564 07 26 0D      call strcpy
0238   0567 51 04 00      add sp, 4
0239   056A             ;; get(); 
0240   056A 07 D0 1B      call get
0241   056D             ;; is_assignment = tok == ASSIGNMENT; 
0242   056D FA F9 FF      lea d, [bp + -7] ; $is_assignment
0243   0570 DA            push d
0244   0571 3B F7 32      mov d, _tok ; $tok
0245   0574 2A            mov b, [d]
0246   0575             ; START RELATIONAL
0247   0575 D7            push a
0248   0576 11            mov a, b
0249   0577 26 11 00      mov b, 17; ASSIGNMENT
0250   057A B0            cmp a, b
0251   057B FD 71         seq ; ==
0252   057D E4            pop a
0253   057E             ; END RELATIONAL
0254   057E E7            pop d
0255   057F FD 3E         mov [d], bl
0256   0581 0A 84 05      jmp _if6_exit
0257   0584             _if6_exit:
0258   0584             ;; if(is_assignment){ 
0259   0584             _if7_cond:
0260   0584 FA F9 FF      lea d, [bp + -7] ; $is_assignment
0261   0587 32            mov bl, [d]
0262   0588 A7 00         mov bh, 0
0263   058A C0 00 00      cmp b, 0
0264   058D C6 43 06      je _if7_else
0265   0590             _if7_true:
0266   0590             ;; get(); 
0267   0590 07 D0 1B      call get
0268   0593             ;; if(toktype == INTEGER_CONST) set_int_var(varname, atoi(token)); 
0269   0593             _if8_cond:
0270   0593 3B F9 32      mov d, _toktype ; $toktype
0271   0596 2A            mov b, [d]
0272   0597             ; START RELATIONAL
0273   0597 D7            push a
0274   0598 11            mov a, b
0275   0599 26 04 00      mov b, 4; INTEGER_CONST
0276   059C B0            cmp a, b
0277   059D FD 71         seq ; ==
0278   059F E4            pop a
0279   05A0             ; END RELATIONAL
0280   05A0 C0 00 00      cmp b, 0
0281   05A3 C6 C8 05      je _if8_else
0282   05A6             _if8_true:
0283   05A6             ;; set_int_var(varname, atoi(token)); 
0284   05A6 3B FD 32      mov d, _token_data ; $token
0285   05A9 2D            mov b, d
0286   05AA FD AB         swp b
0287   05AC D8            push b
0288   05AD 07 D2 11      call atoi
0289   05B0 51 02 00      add sp, 2
0290   05B3 FD AB         swp b
0291   05B5 D8            push b
0292   05B6 FA FA FF      lea d, [bp + -6] ; $varname
0293   05B9 32            mov bl, [d]
0294   05BA A7 00         mov bh, 0
0295   05BC FD AB         swp b
0296   05BE D8            push b
0297   05BF 07 A9 2D      call set_int_var
0298   05C2 51 04 00      add sp, 4
0299   05C5 0A 40 06      jmp _if8_exit
0300   05C8             _if8_else:
0301   05C8             ;; if(toktype == STRING_CONST) new_str_var(varname, string_const, strlen(string_const)); 
0302   05C8             _if9_cond:
0303   05C8 3B F9 32      mov d, _toktype ; $toktype
0304   05CB 2A            mov b, [d]
0305   05CC             ; START RELATIONAL
0306   05CC D7            push a
0307   05CD 11            mov a, b
0308   05CE 26 03 00      mov b, 3; STRING_CONST
0309   05D1 B0            cmp a, b
0310   05D2 FD 71         seq ; ==
0311   05D4 E4            pop a
0312   05D5             ; END RELATIONAL
0313   05D5 C0 00 00      cmp b, 0
0314   05D8 C6 04 06      je _if9_else
0315   05DB             _if9_true:
0316   05DB             ;; new_str_var(varname, string_const, strlen(string_const)); 
0317   05DB 3B FD 33      mov d, _string_const_data ; $string_const
0318   05DE 2D            mov b, d
0319   05DF FD AB         swp b
0320   05E1 D8            push b
0321   05E2 07 A0 0E      call strlen
0322   05E5 51 02 00      add sp, 2
0323   05E8 FD AB         swp b
0324   05EA D8            push b
0325   05EB 3B FD 33      mov d, _string_const_data ; $string_const
0326   05EE 2D            mov b, d
0327   05EF FD AB         swp b
0328   05F1 D8            push b
0329   05F2 FA FA FF      lea d, [bp + -6] ; $varname
0330   05F5 32            mov bl, [d]
0331   05F6 A7 00         mov bh, 0
0332   05F8 FD AB         swp b
0333   05FA D8            push b
0334   05FB 07 5E 2C      call new_str_var
0335   05FE 51 06 00      add sp, 6
0336   0601 0A 40 06      jmp _if9_exit
0337   0604             _if9_else:
0338   0604             ;; if(toktype == IDENTIFIER) new_str_var(varname, token, strlen(token)); 
0339   0604             _if10_cond:
0340   0604 3B F9 32      mov d, _toktype ; $toktype
0341   0607 2A            mov b, [d]
0342   0608             ; START RELATIONAL
0343   0608 D7            push a
0344   0609 11            mov a, b
0345   060A 26 05 00      mov b, 5; IDENTIFIER
0346   060D B0            cmp a, b
0347   060E FD 71         seq ; ==
0348   0610 E4            pop a
0349   0611             ; END RELATIONAL
0350   0611 C0 00 00      cmp b, 0
0351   0614 C6 40 06      je _if10_exit
0352   0617             _if10_true:
0353   0617             ;; new_str_var(varname, token, strlen(token)); 
0354   0617 3B FD 32      mov d, _token_data ; $token
0355   061A 2D            mov b, d
0356   061B FD AB         swp b
0357   061D D8            push b
0358   061E 07 A0 0E      call strlen
0359   0621 51 02 00      add sp, 2
0360   0624 FD AB         swp b
0361   0626 D8            push b
0362   0627 3B FD 32      mov d, _token_data ; $token
0363   062A 2D            mov b, d
0364   062B FD AB         swp b
0365   062D D8            push b
0366   062E FA FA FF      lea d, [bp + -6] ; $varname
0367   0631 32            mov bl, [d]
0368   0632 A7 00         mov bh, 0
0369   0634 FD AB         swp b
0370   0636 D8            push b
0371   0637 07 5E 2C      call new_str_var
0372   063A 51 06 00      add sp, 6
0373   063D 0A 40 06      jmp _if10_exit
0374   0640             _if10_exit:
0375   0640             _if9_exit:
0376   0640             _if8_exit:
0377   0640 0A 80 09      jmp _if7_exit
0378   0643             _if7_else:
0379   0643             ;; prog = temp_prog; 
0380   0643 3B FB 32      mov d, _prog ; $prog
0381   0646 DA            push d
0382   0647 FA FB FF      lea d, [bp + -5] ; $temp_prog
0383   064A 2A            mov b, [d]
0384   064B E7            pop d
0385   064C FD 43         mov [d], b
0386   064E             ;; get(); 
0387   064E 07 D0 1B      call get
0388   0651             ;; if(!strcmp(token, "cd")) command_cd(); 
0389   0651             _if11_cond:
0390   0651 26 7F 3B      mov b, __s6 ; "cd"
0391   0654 FD AB         swp b
0392   0656 D8            push b
0393   0657 3B FD 32      mov d, _token_data ; $token
0394   065A 2D            mov b, d
0395   065B FD AB         swp b
0396   065D D8            push b
0397   065E 07 86 0D      call strcmp
0398   0661 51 04 00      add sp, 4
0399   0664 C0 00 00      cmp b, 0
0400   0667 FD 71         seq ; !
0401   0669 C0 00 00      cmp b, 0
0402   066C C6 75 06      je _if11_else
0403   066F             _if11_true:
0404   066F             ;; command_cd(); 
0405   066F 07 04 31      call command_cd
0406   0672 0A 80 09      jmp _if11_exit
0407   0675             _if11_else:
0408   0675             ;; if(!strcmp(token, "shell")) command_shell(); 
0409   0675             _if12_cond:
0410   0675 26 82 3B      mov b, __s7 ; "shell"
0411   0678 FD AB         swp b
0412   067A D8            push b
0413   067B 3B FD 32      mov d, _token_data ; $token
0414   067E 2D            mov b, d
0415   067F FD AB         swp b
0416   0681 D8            push b
0417   0682 07 86 0D      call strcmp
0418   0685 51 04 00      add sp, 4
0419   0688 C0 00 00      cmp b, 0
0420   068B FD 71         seq ; !
0421   068D C0 00 00      cmp b, 0
0422   0690 C6 99 06      je _if12_else
0423   0693             _if12_true:
0424   0693             ;; command_shell(); 
0425   0693 07 1E 32      call command_shell
0426   0696 0A 80 09      jmp _if12_exit
0427   0699             _if12_else:
0428   0699             ;; back(); 
0429   0699 07 04 1A      call back
0430   069C             ;; get_path(); 
0431   069C 07 68 1A      call get_path
0432   069F             ;; strcpy(path, token); // save file path 
0433   069F 3B FD 32      mov d, _token_data ; $token
0434   06A2 2D            mov b, d
0435   06A3 FD AB         swp b
0436   06A5 D8            push b
0437   06A6 3B FF 36      mov d, _path_data ; $path
0438   06A9 2D            mov b, d
0439   06AA FD AB         swp b
0440   06AC D8            push b
0441   06AD 07 26 0D      call strcpy
0442   06B0 51 04 00      add sp, 4
0443   06B3             ;; for(i = 0; i < 256; i++) argument[i] = 0; 
0444   06B3             _for13_init:
0445   06B3 FA 73 FF      lea d, [bp + -141] ; $i
0446   06B6 DA            push d
0447   06B7 26 00 00      mov b, $0
0448   06BA E7            pop d
0449   06BB FD 43         mov [d], b
0450   06BD             _for13_cond:
0451   06BD FA 73 FF      lea d, [bp + -141] ; $i
0452   06C0 2A            mov b, [d]
0453   06C1             ; START RELATIONAL
0454   06C1 D7            push a
0455   06C2 11            mov a, b
0456   06C3 26 00 01      mov b, $100
0457   06C6 B0            cmp a, b
0458   06C7 FD 73         slt ; < 
0459   06C9 E4            pop a
0460   06CA             ; END RELATIONAL
0461   06CA C0 00 00      cmp b, 0
0462   06CD C6 F5 06      je _for13_exit
0463   06D0             _for13_block:
0464   06D0             ;; argument[i] = 0; 
0465   06D0 3B FF 38      mov d, _argument_data ; $argument
0466   06D3 D7            push a
0467   06D4 DA            push d
0468   06D5 FA 73 FF      lea d, [bp + -141] ; $i
0469   06D8 2A            mov b, [d]
0470   06D9 E7            pop d
0471   06DA 5A            add d, b
0472   06DB E4            pop a
0473   06DC DA            push d
0474   06DD 26 00 00      mov b, $0
0475   06E0 E7            pop d
0476   06E1 FD 3E         mov [d], bl
0477   06E3             _for13_update:
0478   06E3 FA 73 FF      lea d, [bp + -141] ; $i
0479   06E6 2A            mov b, [d]
0480   06E7 FD 79         mov g, b
0481   06E9 FD 77         inc b
0482   06EB FA 73 FF      lea d, [bp + -141] ; $i
0483   06EE FD 43         mov [d], b
0484   06F0 FD 27         mov b, g
0485   06F2 0A BD 06      jmp _for13_cond
0486   06F5             _for13_exit:
0487   06F5             ;; get(); 
0488   06F5 07 D0 1B      call get
0489   06F8             ;; if(tok != SEMICOLON && toktype != END){ 
0490   06F8             _if14_cond:
0491   06F8 3B F7 32      mov d, _tok ; $tok
0492   06FB 2A            mov b, [d]
0493   06FC             ; START RELATIONAL
0494   06FC D7            push a
0495   06FD 11            mov a, b
0496   06FE 26 23 00      mov b, 35; SEMICOLON
0497   0701 B0            cmp a, b
0498   0702 FD 72         sneq ; !=
0499   0704 E4            pop a
0500   0705             ; END RELATIONAL
0501   0705 D7            push a
0502   0706 11            mov a, b
0503   0707 3B F9 32      mov d, _toktype ; $toktype
0504   070A 2A            mov b, [d]
0505   070B             ; START RELATIONAL
0506   070B D7            push a
0507   070C 11            mov a, b
0508   070D 26 06 00      mov b, 6; END
0509   0710 B0            cmp a, b
0510   0711 FD 72         sneq ; !=
0511   0713 E4            pop a
0512   0714             ; END RELATIONAL
0513   0714 FD A7         sand a, b ; &&
0514   0716 E4            pop a
0515   0717 C0 00 00      cmp b, 0
0516   071A C6 72 08      je _if14_exit
0517   071D             _if14_true:
0518   071D             ;; back(); 
0519   071D 07 04 1A      call back
0520   0720             ;; p = argument; 
0521   0720 FA FF FF      lea d, [bp + -1] ; $p
0522   0723 DA            push d
0523   0724 3B FF 38      mov d, _argument_data ; $argument
0524   0727 2D            mov b, d
0525   0728 E7            pop d
0526   0729 FD 43         mov [d], b
0527   072B             ;; do{ 
0528   072B             _do15_block:
0529   072B             ;; if(*prog == '$'){ 
0530   072B             _if16_cond:
0531   072B 3B FB 32      mov d, _prog ; $prog
0532   072E 2A            mov b, [d]
0533   072F 74            mov d, b
0534   0730 32            mov bl, [d]
0535   0731 A7 00         mov bh, 0
0536   0733             ; START RELATIONAL
0537   0733 D7            push a
0538   0734 11            mov a, b
0539   0735 26 24 00      mov b, $24
0540   0738 B0            cmp a, b
0541   0739 FD 71         seq ; ==
0542   073B E4            pop a
0543   073C             ; END RELATIONAL
0544   073C C0 00 00      cmp b, 0
0545   073F C6 11 08      je _if16_else
0546   0742             _if16_true:
0547   0742             ;; prog++; 
0548   0742 3B FB 32      mov d, _prog ; $prog
0549   0745 2A            mov b, [d]
0550   0746 FD 79         mov g, b
0551   0748 FD 77         inc b
0552   074A 3B FB 32      mov d, _prog ; $prog
0553   074D FD 43         mov [d], b
0554   074F FD 27         mov b, g
0555   0751             ;; get(); // get variable name 
0556   0751 07 D0 1B      call get
0557   0754             ;; var_index = get_var_index(token); 
0558   0754 FA 75 FF      lea d, [bp + -139] ; $var_index
0559   0757 DA            push d
0560   0758 3B FD 32      mov d, _token_data ; $token
0561   075B 2D            mov b, d
0562   075C FD AB         swp b
0563   075E D8            push b
0564   075F 07 AD 2E      call get_var_index
0565   0762 51 02 00      add sp, 2
0566   0765 E7            pop d
0567   0766 FD 43         mov [d], b
0568   0768             ;; if(var_index != -1){ 
0569   0768             _if17_cond:
0570   0768 FA 75 FF      lea d, [bp + -139] ; $var_index
0571   076B 2A            mov b, [d]
0572   076C             ; START RELATIONAL
0573   076C D7            push a
0574   076D 11            mov a, b
0575   076E 26 01 00      mov b, $1
0576   0771 FD 97         neg b
0577   0773 B0            cmp a, b
0578   0774 FD 72         sneq ; !=
0579   0776 E4            pop a
0580   0777             ; END RELATIONAL
0581   0777 C0 00 00      cmp b, 0
0582   077A C6 0E 08      je _if17_exit
0583   077D             _if17_true:
0584   077D             ;; if(get_var_type(token) == SHELL_VAR_TYP_INT) strcat(argument, "123"); 
0585   077D             _if18_cond:
0586   077D 3B FD 32      mov d, _token_data ; $token
0587   0780 2D            mov b, d
0588   0781 FD AB         swp b
0589   0783 D8            push b
0590   0784 07 23 2F      call get_var_type
0591   0787 51 02 00      add sp, 2
0592   078A             ; START RELATIONAL
0593   078A D7            push a
0594   078B 11            mov a, b
0595   078C 26 01 00      mov b, 1; SHELL_VAR_TYP_INT
0596   078F B0            cmp a, b
0597   0790 FD 71         seq ; ==
0598   0792 E4            pop a
0599   0793             ; END RELATIONAL
0600   0793 C0 00 00      cmp b, 0
0601   0796 C6 AF 07      je _if18_else
0602   0799             _if18_true:
0603   0799             ;; strcat(argument, "123"); 
0604   0799 26 88 3B      mov b, __s8 ; "123"
0605   079C FD AB         swp b
0606   079E D8            push b
0607   079F 3B FF 38      mov d, _argument_data ; $argument
0608   07A2 2D            mov b, d
0609   07A3 FD AB         swp b
0610   07A5 D8            push b
0611   07A6 07 EA 0D      call strcat
0612   07A9 51 04 00      add sp, 4
0613   07AC 0A EB 07      jmp _if18_exit
0614   07AF             _if18_else:
0615   07AF             ;; if(get_var_type(token) == SHELL_VAR_TYP_STR) strcat(argument, get_shell_var_strval(var_index)); 
0616   07AF             _if19_cond:
0617   07AF 3B FD 32      mov d, _token_data ; $token
0618   07B2 2D            mov b, d
0619   07B3 FD AB         swp b
0620   07B5 D8            push b
0621   07B6 07 23 2F      call get_var_type
0622   07B9 51 02 00      add sp, 2
0623   07BC             ; START RELATIONAL
0624   07BC D7            push a
0625   07BD 11            mov a, b
0626   07BE 26 00 00      mov b, 0; SHELL_VAR_TYP_STR
0627   07C1 B0            cmp a, b
0628   07C2 FD 71         seq ; ==
0629   07C4 E4            pop a
0630   07C5             ; END RELATIONAL
0631   07C5 C0 00 00      cmp b, 0
0632   07C8 C6 EB 07      je _if19_exit
0633   07CB             _if19_true:
0634   07CB             ;; strcat(argument, get_shell_var_strval(var_index)); 
0635   07CB FA 75 FF      lea d, [bp + -139] ; $var_index
0636   07CE 2A            mov b, [d]
0637   07CF FD AB         swp b
0638   07D1 D8            push b
0639   07D2 07 B7 30      call get_shell_var_strval
0640   07D5 51 02 00      add sp, 2
0641   07D8 FD AB         swp b
0642   07DA D8            push b
0643   07DB 3B FF 38      mov d, _argument_data ; $argument
0644   07DE 2D            mov b, d
0645   07DF FD AB         swp b
0646   07E1 D8            push b
0647   07E2 07 EA 0D      call strcat
0648   07E5 51 04 00      add sp, 4
0649   07E8 0A EB 07      jmp _if19_exit
0650   07EB             _if19_exit:
0651   07EB             _if18_exit:
0652   07EB             ;; while(*p) p++; 
0653   07EB             _while20_cond:
0654   07EB FA FF FF      lea d, [bp + -1] ; $p
0655   07EE 2A            mov b, [d]
0656   07EF 74            mov d, b
0657   07F0 32            mov bl, [d]
0658   07F1 A7 00         mov bh, 0
0659   07F3 C0 00 00      cmp b, 0
0660   07F6 C6 0B 08      je _while20_exit
0661   07F9             _while20_block:
0662   07F9             ;; p++; 
0663   07F9 FA FF FF      lea d, [bp + -1] ; $p
0664   07FC 2A            mov b, [d]
0665   07FD FD 79         mov g, b
0666   07FF FD 77         inc b
0667   0801 FA FF FF      lea d, [bp + -1] ; $p
0668   0804 FD 43         mov [d], b
0669   0806 FD 27         mov b, g
0670   0808 0A EB 07      jmp _while20_cond
0671   080B             _while20_exit:
0672   080B 0A 0E 08      jmp _if17_exit
0673   080E             _if17_exit:
0674   080E 0A 37 08      jmp _if16_exit
0675   0811             _if16_else:
0676   0811             ;; *p++ = *prog++; 
0677   0811 FA FF FF      lea d, [bp + -1] ; $p
0678   0814 2A            mov b, [d]
0679   0815 FD 79         mov g, b
0680   0817 FD 77         inc b
0681   0819 FA FF FF      lea d, [bp + -1] ; $p
0682   081C FD 43         mov [d], b
0683   081E FD 27         mov b, g
0684   0820 D8            push b
0685   0821 3B FB 32      mov d, _prog ; $prog
0686   0824 2A            mov b, [d]
0687   0825 FD 79         mov g, b
0688   0827 FD 77         inc b
0689   0829 3B FB 32      mov d, _prog ; $prog
0690   082C FD 43         mov [d], b
0691   082E FD 27         mov b, g
0692   0830 74            mov d, b
0693   0831 32            mov bl, [d]
0694   0832 A7 00         mov bh, 0
0695   0834 E7            pop d
0696   0835 FD 3E         mov [d], bl
0697   0837             _if16_exit:
0698   0837             ;; } while(*prog != '\0' && *prog != ';'); 
0699   0837             _do15_cond:
0700   0837 3B FB 32      mov d, _prog ; $prog
0701   083A 2A            mov b, [d]
0702   083B 74            mov d, b
0703   083C 32            mov bl, [d]
0704   083D A7 00         mov bh, 0
0705   083F             ; START RELATIONAL
0706   083F D7            push a
0707   0840 11            mov a, b
0708   0841 26 00 00      mov b, $0
0709   0844 B0            cmp a, b
0710   0845 FD 72         sneq ; !=
0711   0847 E4            pop a
0712   0848             ; END RELATIONAL
0713   0848 D7            push a
0714   0849 11            mov a, b
0715   084A 3B FB 32      mov d, _prog ; $prog
0716   084D 2A            mov b, [d]
0717   084E 74            mov d, b
0718   084F 32            mov bl, [d]
0719   0850 A7 00         mov bh, 0
0720   0852             ; START RELATIONAL
0721   0852 D7            push a
0722   0853 11            mov a, b
0723   0854 26 3B 00      mov b, $3b
0724   0857 B0            cmp a, b
0725   0858 FD 72         sneq ; !=
0726   085A E4            pop a
0727   085B             ; END RELATIONAL
0728   085B FD A7         sand a, b ; &&
0729   085D E4            pop a
0730   085E C0 01 00      cmp b, 1
0731   0861 C6 2B 07      je _do15_block
0732   0864             _do15_exit:
0733   0864             ;; *p = '\0'; 
0734   0864 FA FF FF      lea d, [bp + -1] ; $p
0735   0867 2A            mov b, [d]
0736   0868 D8            push b
0737   0869 26 00 00      mov b, $0
0738   086C E7            pop d
0739   086D FD 3E         mov [d], bl
0740   086F 0A 72 08      jmp _if14_exit
0741   0872             _if14_exit:
0742   0872             ;; if(*path == '/' || *path == '.') spawn_new_proc(path, argument); 
0743   0872             _if21_cond:
0744   0872 3B FF 36      mov d, _path_data ; $path
0745   0875 2D            mov b, d
0746   0876 74            mov d, b
0747   0877 32            mov bl, [d]
0748   0878 A7 00         mov bh, 0
0749   087A             ; START RELATIONAL
0750   087A D7            push a
0751   087B 11            mov a, b
0752   087C 26 2F 00      mov b, $2f
0753   087F B0            cmp a, b
0754   0880 FD 71         seq ; ==
0755   0882 E4            pop a
0756   0883             ; END RELATIONAL
0757   0883 D7            push a
0758   0884 11            mov a, b
0759   0885 3B FF 36      mov d, _path_data ; $path
0760   0888 2D            mov b, d
0761   0889 74            mov d, b
0762   088A 32            mov bl, [d]
0763   088B A7 00         mov bh, 0
0764   088D             ; START RELATIONAL
0765   088D D7            push a
0766   088E 11            mov a, b
0767   088F 26 2E 00      mov b, $2e
0768   0892 B0            cmp a, b
0769   0893 FD 71         seq ; ==
0770   0895 E4            pop a
0771   0896             ; END RELATIONAL
0772   0896 FD A8         sor a, b ; ||
0773   0898 E4            pop a
0774   0899 C0 00 00      cmp b, 0
0775   089C C6 B6 08      je _if21_else
0776   089F             _if21_true:
0777   089F             ;; spawn_new_proc(path, argument); 
0778   089F 3B FF 38      mov d, _argument_data ; $argument
0779   08A2 2D            mov b, d
0780   08A3 FD AB         swp b
0781   08A5 D8            push b
0782   08A6 3B FF 36      mov d, _path_data ; $path
0783   08A9 2D            mov b, d
0784   08AA FD AB         swp b
0785   08AC D8            push b
0786   08AD 07 0E 32      call spawn_new_proc
0787   08B0 51 04 00      add sp, 4
0788   08B3 0A 80 09      jmp _if21_exit
0789   08B6             _if21_else:
0790   08B6             ;; temp_prog = prog; 
0791   08B6 FA FB FF      lea d, [bp + -5] ; $temp_prog
0792   08B9 DA            push d
0793   08BA 3B FB 32      mov d, _prog ; $prog
0794   08BD 2A            mov b, [d]
0795   08BE E7            pop d
0796   08BF FD 43         mov [d], b
0797   08C1             ;; prog = variables[0].as_string; 
0798   08C1 3B FB 32      mov d, _prog ; $prog
0799   08C4 DA            push d
0800   08C5 3B 7F 3A      mov d, _variables_data ; $variables
0801   08C8 D7            push a
0802   08C9 DA            push d
0803   08CA 26 00 00      mov b, $0
0804   08CD E7            pop d
0805   08CE FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
0806   08D2 E4            pop a
0807   08D3 58 11 00      add d, 17
0808   08D6 FD 14         clb
0809   08D8 2A            mov b, [d]
0810   08D9 E7            pop d
0811   08DA FD 43         mov [d], b
0812   08DC             ;; for(;;){ 
0813   08DC             _for22_init:
0814   08DC             _for22_cond:
0815   08DC             _for22_block:
0816   08DC             ;; get(); 
0817   08DC 07 D0 1B      call get
0818   08DF             ;; if(toktype == END){ 
0819   08DF             _if23_cond:
0820   08DF 3B F9 32      mov d, _toktype ; $toktype
0821   08E2 2A            mov b, [d]
0822   08E3             ; START RELATIONAL
0823   08E3 D7            push a
0824   08E4 11            mov a, b
0825   08E5 26 06 00      mov b, 6; END
0826   08E8 B0            cmp a, b
0827   08E9 FD 71         seq ; ==
0828   08EB E4            pop a
0829   08EC             ; END RELATIONAL
0830   08EC C0 00 00      cmp b, 0
0831   08EF C6 F8 08      je _if23_else
0832   08F2             _if23_true:
0833   08F2             ;; break; 
0834   08F2 0A 75 09      jmp _for22_exit ; for break
0835   08F5 0A FB 08      jmp _if23_exit
0836   08F8             _if23_else:
0837   08F8             ;; back(); 
0838   08F8 07 04 1A      call back
0839   08FB             _if23_exit:
0840   08FB             ;; get_path(); 
0841   08FB 07 68 1A      call get_path
0842   08FE             ;; strcpy(temp, token); 
0843   08FE 3B FD 32      mov d, _token_data ; $token
0844   0901 2D            mov b, d
0845   0902 FD AB         swp b
0846   0904 D8            push b
0847   0905 3B FF 37      mov d, _temp_data ; $temp
0848   0908 2D            mov b, d
0849   0909 FD AB         swp b
0850   090B D8            push b
0851   090C 07 26 0D      call strcpy
0852   090F 51 04 00      add sp, 4
0853   0912             ;; strcat(temp, "/"); 
0854   0912 26 8C 3B      mov b, __s9 ; "/"
0855   0915 FD AB         swp b
0856   0917 D8            push b
0857   0918 3B FF 37      mov d, _temp_data ; $temp
0858   091B 2D            mov b, d
0859   091C FD AB         swp b
0860   091E D8            push b
0861   091F 07 EA 0D      call strcat
0862   0922 51 04 00      add sp, 4
0863   0925             ;; strcat(temp, path); // form full filepath with ENV_PATH + given filename 
0864   0925 3B FF 36      mov d, _path_data ; $path
0865   0928 2D            mov b, d
0866   0929 FD AB         swp b
0867   092B D8            push b
0868   092C 3B FF 37      mov d, _temp_data ; $temp
0869   092F 2D            mov b, d
0870   0930 FD AB         swp b
0871   0932 D8            push b
0872   0933 07 EA 0D      call strcat
0873   0936 51 04 00      add sp, 4
0874   0939             ;; if(file_exists(temp) != 0){ 
0875   0939             _if24_cond:
0876   0939 3B FF 37      mov d, _temp_data ; $temp
0877   093C 2D            mov b, d
0878   093D FD AB         swp b
0879   093F D8            push b
0880   0940 07 EB 30      call file_exists
0881   0943 51 02 00      add sp, 2
0882   0946             ; START RELATIONAL
0883   0946 D7            push a
0884   0947 11            mov a, b
0885   0948 26 00 00      mov b, $0
0886   094B B0            cmp a, b
0887   094C FD 72         sneq ; !=
0888   094E E4            pop a
0889   094F             ; END RELATIONAL
0890   094F C0 00 00      cmp b, 0
0891   0952 C6 6F 09      je _if24_exit
0892   0955             _if24_true:
0893   0955             ;; spawn_new_proc(temp, argument); 
0894   0955 3B FF 38      mov d, _argument_data ; $argument
0895   0958 2D            mov b, d
0896   0959 FD AB         swp b
0897   095B D8            push b
0898   095C 3B FF 37      mov d, _temp_data ; $temp
0899   095F 2D            mov b, d
0900   0960 FD AB         swp b
0901   0962 D8            push b
0902   0963 07 0E 32      call spawn_new_proc
0903   0966 51 04 00      add sp, 4
0904   0969             ;; break; 
0905   0969 0A 75 09      jmp _for22_exit ; for break
0906   096C 0A 6F 09      jmp _if24_exit
0907   096F             _if24_exit:
0908   096F             ;; get(); // get separator 
0909   096F 07 D0 1B      call get
0910   0972             _for22_update:
0911   0972 0A DC 08      jmp _for22_cond
0912   0975             _for22_exit:
0913   0975             ;; prog = temp_prog; 
0914   0975 3B FB 32      mov d, _prog ; $prog
0915   0978 DA            push d
0916   0979 FA FB FF      lea d, [bp + -5] ; $temp_prog
0917   097C 2A            mov b, [d]
0918   097D E7            pop d
0919   097E FD 43         mov [d], b
0920   0980             _if21_exit:
0921   0980             _if12_exit:
0922   0980             _if11_exit:
0923   0980             _if7_exit:
0924   0980             _for3_update:
0925   0980 0A F7 04      jmp _for3_cond
0926   0983             _for3_exit:
0927   0983             _for1_update:
0928   0983 0A 8D 04      jmp _for1_cond
0929   0986             _for1_exit:
0930   0986 05 0B         syscall sys_terminate_proc
0931   0988             
0932   0988             include_ctype_lib:
0933   0988 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0934   098B             
0935   098B             ; --- BEGIN INLINE ASM BLOCK
0936   098B             .include "lib/ctype.asm"
0001+  098B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  098B             ; ctype.s
0003+  098B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  098B             
0005+  098B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  098B             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  098B             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  098B             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  098B             ;; characters are supported.
0010+  098B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  098B             ;; _isalnum 
0012+  098B             ;; _isalpha 
0013+  098B             ;; islower 
0014+  098B             ;; isupper 
0015+  098B             ;; _isdigit 
0016+  098B             ;; isxdigit
0017+  098B             ;; iscntrl 
0018+  098B             ;; isgraph 
0019+  098B             ;; _isspace 
0020+  098B             ;; isblank 
0021+  098B             ;; isprint 
0022+  098B             ;; ispunct 
0023+  098B             ;; tolower 
0024+  098B             ;; toupper
0025+  098B             
0026+  098B             
0027+  098B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  098B             ;; IS ALPHANUMERIC
0029+  098B             ;; sets ZF according with result
0030+  098B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  098B             _isalnum:
0032+  098B 07 A8 09    	call _isalpha
0033+  098E C6 94 09    	je _isalnum_exit
0034+  0991 07 95 09    	call _isdigit
0035+  0994             _isalnum_exit:
0036+  0994 09          	ret	
0037+  0995             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0995             ;; IS DIGIT
0039+  0995             ;; sets ZF according with result
0040+  0995             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0995             _isdigit:
0042+  0995 DB          	push al
0043+  0996 B9 30       	cmp al, '0'
0044+  0998 C8 A4 09    	jlu _isdigit_false
0045+  099B B9 39       	cmp al, '9'
0046+  099D D1 A4 09    	jgu _isdigit_false
0047+  09A0 87 00       	and al, 0	; set ZF
0048+  09A2 E8          	pop al
0049+  09A3 09          	ret
0050+  09A4             _isdigit_false:
0051+  09A4 8B 01       	or al, 1	; clear ZF
0052+  09A6 E8          	pop al
0053+  09A7 09          	ret	
0054+  09A8             	
0055+  09A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  09A8             ;; IS ALPHA
0057+  09A8             ;; sets ZF according with result
0058+  09A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  09A8             _isalpha:
0060+  09A8 DB          	push al
0061+  09A9 B9 5F       	cmp al, '_'
0062+  09AB C6 CB 09    	je _isalpha_true
0063+  09AE B9 2E       	cmp al, '.'
0064+  09B0 C6 CB 09    	je _isalpha_true
0065+  09B3 B9 41       	cmp al, 'A'
0066+  09B5 C8 C7 09    	jlu _isalpha_false
0067+  09B8 B9 7A       	cmp al, 'z'
0068+  09BA D1 C7 09    	jgu _isalpha_false
0069+  09BD B9 5A       	cmp al, 'Z'
0070+  09BF D0 CB 09    	jleu _isalpha_true
0071+  09C2 B9 61       	cmp al, 'a'
0072+  09C4 C9 CB 09    	jgeu _isalpha_true
0073+  09C7             _isalpha_false:
0074+  09C7 8B 01       	or al, 1	; clear ZF
0075+  09C9 E8          	pop al
0076+  09CA 09          	ret
0077+  09CB             _isalpha_true:
0078+  09CB 87 00       	and al, 0	; set ZF
0079+  09CD E8          	pop al
0080+  09CE 09          	ret
0081+  09CF             
0082+  09CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  09CF             ;; IS PATH-ALPHA
0084+  09CF             ;; sets ZF according with result
0085+  09CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  09CF             ispath:
0087+  09CF DB          	push al
0088+  09D0 07 95 09    	call _isdigit
0089+  09D3 C6 FD 09    	je ispath_true
0090+  09D6 B9 5F       	cmp al, '_'
0091+  09D8 C6 FD 09    	je ispath_true
0092+  09DB B9 2F       	cmp al, '/'
0093+  09DD C6 FD 09    	je ispath_true
0094+  09E0 B9 2E       	cmp al, '.'
0095+  09E2 C6 FD 09    	je ispath_true
0096+  09E5 B9 41       	cmp al, 'A'
0097+  09E7 C8 F9 09    	jlu ispath_false
0098+  09EA B9 7A       	cmp al, 'z'
0099+  09EC D1 F9 09    	jgu ispath_false
0100+  09EF B9 5A       	cmp al, 'Z'
0101+  09F1 D0 FD 09    	jleu ispath_true
0102+  09F4 B9 61       	cmp al, 'a'
0103+  09F6 C9 FD 09    	jgeu ispath_true
0104+  09F9             ispath_false:
0105+  09F9 8B 01       	or al, 1	; clear ZF
0106+  09FB E8          	pop al
0107+  09FC 09          	ret
0108+  09FD             ispath_true:
0109+  09FD 87 00       	and al, 0	; set ZF
0110+  09FF E8          	pop al
0111+  0A00 09          	ret
0112+  0A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0A01             ;; IS SPACE
0114+  0A01             ;; sets ZF according with result
0115+  0A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0A01             _isspace:
0117+  0A01 B9 20       	cmp al, $20		; ' '
0118+  0A03 C6 17 0A    	je _isspace_exit
0119+  0A06 B9 09       	cmp al, $09		; '\t'
0120+  0A08 C6 17 0A    	je _isspace_exit
0121+  0A0B B9 0A       	cmp al, $0A		; '\n'
0122+  0A0D C6 17 0A    	je _isspace_exit
0123+  0A10 B9 0D       	cmp al, $0D		; '\r'
0124+  0A12 C6 17 0A    	je _isspace_exit
0125+  0A15 B9 0B       	cmp al, $0B		; '\v'
0126+  0A17             _isspace_exit:
0127+  0A17 09          	ret	
0128+  0A18             
0129+  0A18             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0A18             ; TO LOWER
0131+  0A18             ; input in AL
0132+  0A18             ; output in AL
0133+  0A18             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0A18             _to_lower:
0135+  0A18 B9 5A       	cmp al, 'Z'
0136+  0A1A D1 1F 0A    	jgu _to_lower_ret
0137+  0A1D 6A 20       	add al, $20				; convert to lower case
0138+  0A1F             _to_lower_ret:
0139+  0A1F 09          	ret
0140+  0A20             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0A20             ; TO UPPER
0142+  0A20             ; input in AL
0143+  0A20             ; output in AL
0144+  0A20             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0A20             _to_upper:
0146+  0A20 B9 61       	cmp al, 'a'
0147+  0A22 C8 27 0A    	jlu _to_upper_ret
0148+  0A25 6F 20       	sub al, $20			; convert to upper case
0149+  0A27             _to_upper_ret:
0150+  0A27 09          	ret
0151+  0A28             
0937   0A28             ; --- END INLINE ASM BLOCK
0938   0A28             
0939   0A28 F9            leave
0940   0A29 09            ret
0941   0A2A             
0942   0A2A             is_space:
0943   0A2A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0944   0A2D             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
0945   0A2D FA 05 00      lea d, [bp + 5] ; $c
0946   0A30 32            mov bl, [d]
0947   0A31 A7 00         mov bh, 0
0948   0A33             ; START RELATIONAL
0949   0A33 D7            push a
0950   0A34 11            mov a, b
0951   0A35 26 20 00      mov b, $20
0952   0A38 B0            cmp a, b
0953   0A39 FD 71         seq ; ==
0954   0A3B E4            pop a
0955   0A3C             ; END RELATIONAL
0956   0A3C D7            push a
0957   0A3D 11            mov a, b
0958   0A3E FA 05 00      lea d, [bp + 5] ; $c
0959   0A41 32            mov bl, [d]
0960   0A42 A7 00         mov bh, 0
0961   0A44             ; START RELATIONAL
0962   0A44 D7            push a
0963   0A45 11            mov a, b
0964   0A46 26 09 00      mov b, $9
0965   0A49 B0            cmp a, b
0966   0A4A FD 71         seq ; ==
0967   0A4C E4            pop a
0968   0A4D             ; END RELATIONAL
0969   0A4D FD A8         sor a, b ; ||
0970   0A4F 11            mov a, b
0971   0A50 FA 05 00      lea d, [bp + 5] ; $c
0972   0A53 32            mov bl, [d]
0973   0A54 A7 00         mov bh, 0
0974   0A56             ; START RELATIONAL
0975   0A56 D7            push a
0976   0A57 11            mov a, b
0977   0A58 26 0A 00      mov b, $a
0978   0A5B B0            cmp a, b
0979   0A5C FD 71         seq ; ==
0980   0A5E E4            pop a
0981   0A5F             ; END RELATIONAL
0982   0A5F FD A8         sor a, b ; ||
0983   0A61 11            mov a, b
0984   0A62 FA 05 00      lea d, [bp + 5] ; $c
0985   0A65 32            mov bl, [d]
0986   0A66 A7 00         mov bh, 0
0987   0A68             ; START RELATIONAL
0988   0A68 D7            push a
0989   0A69 11            mov a, b
0990   0A6A 26 0D 00      mov b, $d
0991   0A6D B0            cmp a, b
0992   0A6E FD 71         seq ; ==
0993   0A70 E4            pop a
0994   0A71             ; END RELATIONAL
0995   0A71 FD A8         sor a, b ; ||
0996   0A73 E4            pop a
0997   0A74 F9            leave
0998   0A75 09            ret
0999   0A76             
1000   0A76             is_digit:
1001   0A76 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1002   0A79             ;; return c >= '0' && c <= '9'; 
1003   0A79 FA 05 00      lea d, [bp + 5] ; $c
1004   0A7C 32            mov bl, [d]
1005   0A7D A7 00         mov bh, 0
1006   0A7F             ; START RELATIONAL
1007   0A7F D7            push a
1008   0A80 11            mov a, b
1009   0A81 26 30 00      mov b, $30
1010   0A84 B0            cmp a, b
1011   0A85 FD 80         sge ; >=
1012   0A87 E4            pop a
1013   0A88             ; END RELATIONAL
1014   0A88 D7            push a
1015   0A89 11            mov a, b
1016   0A8A FA 05 00      lea d, [bp + 5] ; $c
1017   0A8D 32            mov bl, [d]
1018   0A8E A7 00         mov bh, 0
1019   0A90             ; START RELATIONAL
1020   0A90 D7            push a
1021   0A91 11            mov a, b
1022   0A92 26 39 00      mov b, $39
1023   0A95 B0            cmp a, b
1024   0A96 FD 74         sle ; <=
1025   0A98 E4            pop a
1026   0A99             ; END RELATIONAL
1027   0A99 FD A7         sand a, b ; &&
1028   0A9B E4            pop a
1029   0A9C F9            leave
1030   0A9D 09            ret
1031   0A9E             
1032   0A9E             is_alpha:
1033   0A9E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1034   0AA1             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
1035   0AA1 FA 05 00      lea d, [bp + 5] ; $c
1036   0AA4 32            mov bl, [d]
1037   0AA5 A7 00         mov bh, 0
1038   0AA7             ; START RELATIONAL
1039   0AA7 D7            push a
1040   0AA8 11            mov a, b
1041   0AA9 26 61 00      mov b, $61
1042   0AAC B0            cmp a, b
1043   0AAD FD 80         sge ; >=
1044   0AAF E4            pop a
1045   0AB0             ; END RELATIONAL
1046   0AB0 D7            push a
1047   0AB1 11            mov a, b
1048   0AB2 FA 05 00      lea d, [bp + 5] ; $c
1049   0AB5 32            mov bl, [d]
1050   0AB6 A7 00         mov bh, 0
1051   0AB8             ; START RELATIONAL
1052   0AB8 D7            push a
1053   0AB9 11            mov a, b
1054   0ABA 26 7A 00      mov b, $7a
1055   0ABD B0            cmp a, b
1056   0ABE FD 74         sle ; <=
1057   0AC0 E4            pop a
1058   0AC1             ; END RELATIONAL
1059   0AC1 FD A7         sand a, b ; &&
1060   0AC3 E4            pop a
1061   0AC4 D7            push a
1062   0AC5 11            mov a, b
1063   0AC6 FA 05 00      lea d, [bp + 5] ; $c
1064   0AC9 32            mov bl, [d]
1065   0ACA A7 00         mov bh, 0
1066   0ACC             ; START RELATIONAL
1067   0ACC D7            push a
1068   0ACD 11            mov a, b
1069   0ACE 26 41 00      mov b, $41
1070   0AD1 B0            cmp a, b
1071   0AD2 FD 80         sge ; >=
1072   0AD4 E4            pop a
1073   0AD5             ; END RELATIONAL
1074   0AD5 D7            push a
1075   0AD6 11            mov a, b
1076   0AD7 FA 05 00      lea d, [bp + 5] ; $c
1077   0ADA 32            mov bl, [d]
1078   0ADB A7 00         mov bh, 0
1079   0ADD             ; START RELATIONAL
1080   0ADD D7            push a
1081   0ADE 11            mov a, b
1082   0ADF 26 5A 00      mov b, $5a
1083   0AE2 B0            cmp a, b
1084   0AE3 FD 74         sle ; <=
1085   0AE5 E4            pop a
1086   0AE6             ; END RELATIONAL
1087   0AE6 FD A7         sand a, b ; &&
1088   0AE8 E4            pop a
1089   0AE9 FD A8         sor a, b ; ||
1090   0AEB 11            mov a, b
1091   0AEC FA 05 00      lea d, [bp + 5] ; $c
1092   0AEF 32            mov bl, [d]
1093   0AF0 A7 00         mov bh, 0
1094   0AF2             ; START RELATIONAL
1095   0AF2 D7            push a
1096   0AF3 11            mov a, b
1097   0AF4 26 5F 00      mov b, $5f
1098   0AF7 B0            cmp a, b
1099   0AF8 FD 71         seq ; ==
1100   0AFA E4            pop a
1101   0AFB             ; END RELATIONAL
1102   0AFB FD A8         sor a, b ; ||
1103   0AFD E4            pop a
1104   0AFE F9            leave
1105   0AFF 09            ret
1106   0B00             
1107   0B00             toupper:
1108   0B00 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1109   0B03             ;; if (ch >= 'a' && ch <= 'z') { 
1110   0B03             _if25_cond:
1111   0B03 FA 05 00      lea d, [bp + 5] ; $ch
1112   0B06 32            mov bl, [d]
1113   0B07 A7 00         mov bh, 0
1114   0B09             ; START RELATIONAL
1115   0B09 D7            push a
1116   0B0A 11            mov a, b
1117   0B0B 26 61 00      mov b, $61
1118   0B0E B0            cmp a, b
1119   0B0F FD 80         sge ; >=
1120   0B11 E4            pop a
1121   0B12             ; END RELATIONAL
1122   0B12 D7            push a
1123   0B13 11            mov a, b
1124   0B14 FA 05 00      lea d, [bp + 5] ; $ch
1125   0B17 32            mov bl, [d]
1126   0B18 A7 00         mov bh, 0
1127   0B1A             ; START RELATIONAL
1128   0B1A D7            push a
1129   0B1B 11            mov a, b
1130   0B1C 26 7A 00      mov b, $7a
1131   0B1F B0            cmp a, b
1132   0B20 FD 74         sle ; <=
1133   0B22 E4            pop a
1134   0B23             ; END RELATIONAL
1135   0B23 FD A7         sand a, b ; &&
1136   0B25 E4            pop a
1137   0B26 C0 00 00      cmp b, 0
1138   0B29 C6 43 0B      je _if25_else
1139   0B2C             _if25_true:
1140   0B2C             ;; return ch - 'a' + 'A'; 
1141   0B2C FA 05 00      lea d, [bp + 5] ; $ch
1142   0B2F 32            mov bl, [d]
1143   0B30 A7 00         mov bh, 0
1144   0B32             ; START TERMS
1145   0B32 D7            push a
1146   0B33 11            mov a, b
1147   0B34 26 61 00      mov b, $61
1148   0B37 60            sub a, b
1149   0B38 26 41 00      mov b, $41
1150   0B3B 54            add a, b
1151   0B3C 27            mov b, a
1152   0B3D E4            pop a
1153   0B3E             ; END TERMS
1154   0B3E F9            leave
1155   0B3F 09            ret
1156   0B40 0A 4B 0B      jmp _if25_exit
1157   0B43             _if25_else:
1158   0B43             ;; return ch; 
1159   0B43 FA 05 00      lea d, [bp + 5] ; $ch
1160   0B46 32            mov bl, [d]
1161   0B47 A7 00         mov bh, 0
1162   0B49 F9            leave
1163   0B4A 09            ret
1164   0B4B             _if25_exit:
1165   0B4B F9            leave
1166   0B4C 09            ret
1167   0B4D             
1168   0B4D             is_delimiter:
1169   0B4D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1170   0B50             ;; if( 
1171   0B50             _if26_cond:
1172   0B50 FA 05 00      lea d, [bp + 5] ; $c
1173   0B53 32            mov bl, [d]
1174   0B54 A7 00         mov bh, 0
1175   0B56             ; START RELATIONAL
1176   0B56 D7            push a
1177   0B57 11            mov a, b
1178   0B58 26 40 00      mov b, $40
1179   0B5B B0            cmp a, b
1180   0B5C FD 71         seq ; ==
1181   0B5E E4            pop a
1182   0B5F             ; END RELATIONAL
1183   0B5F D7            push a
1184   0B60 11            mov a, b
1185   0B61 FA 05 00      lea d, [bp + 5] ; $c
1186   0B64 32            mov bl, [d]
1187   0B65 A7 00         mov bh, 0
1188   0B67             ; START RELATIONAL
1189   0B67 D7            push a
1190   0B68 11            mov a, b
1191   0B69 26 23 00      mov b, $23
1192   0B6C B0            cmp a, b
1193   0B6D FD 71         seq ; ==
1194   0B6F E4            pop a
1195   0B70             ; END RELATIONAL
1196   0B70 FD A8         sor a, b ; ||
1197   0B72 11            mov a, b
1198   0B73 FA 05 00      lea d, [bp + 5] ; $c
1199   0B76 32            mov bl, [d]
1200   0B77 A7 00         mov bh, 0
1201   0B79             ; START RELATIONAL
1202   0B79 D7            push a
1203   0B7A 11            mov a, b
1204   0B7B 26 24 00      mov b, $24
1205   0B7E B0            cmp a, b
1206   0B7F FD 71         seq ; ==
1207   0B81 E4            pop a
1208   0B82             ; END RELATIONAL
1209   0B82 FD A8         sor a, b ; ||
1210   0B84 11            mov a, b
1211   0B85 FA 05 00      lea d, [bp + 5] ; $c
1212   0B88 32            mov bl, [d]
1213   0B89 A7 00         mov bh, 0
1214   0B8B             ; START RELATIONAL
1215   0B8B D7            push a
1216   0B8C 11            mov a, b
1217   0B8D 26 2B 00      mov b, $2b
1218   0B90 B0            cmp a, b
1219   0B91 FD 71         seq ; ==
1220   0B93 E4            pop a
1221   0B94             ; END RELATIONAL
1222   0B94 FD A8         sor a, b ; ||
1223   0B96 11            mov a, b
1224   0B97 FA 05 00      lea d, [bp + 5] ; $c
1225   0B9A 32            mov bl, [d]
1226   0B9B A7 00         mov bh, 0
1227   0B9D             ; START RELATIONAL
1228   0B9D D7            push a
1229   0B9E 11            mov a, b
1230   0B9F 26 2D 00      mov b, $2d
1231   0BA2 B0            cmp a, b
1232   0BA3 FD 71         seq ; ==
1233   0BA5 E4            pop a
1234   0BA6             ; END RELATIONAL
1235   0BA6 FD A8         sor a, b ; ||
1236   0BA8 11            mov a, b
1237   0BA9 FA 05 00      lea d, [bp + 5] ; $c
1238   0BAC 32            mov bl, [d]
1239   0BAD A7 00         mov bh, 0
1240   0BAF             ; START RELATIONAL
1241   0BAF D7            push a
1242   0BB0 11            mov a, b
1243   0BB1 26 2A 00      mov b, $2a
1244   0BB4 B0            cmp a, b
1245   0BB5 FD 71         seq ; ==
1246   0BB7 E4            pop a
1247   0BB8             ; END RELATIONAL
1248   0BB8 FD A8         sor a, b ; ||
1249   0BBA 11            mov a, b
1250   0BBB FA 05 00      lea d, [bp + 5] ; $c
1251   0BBE 32            mov bl, [d]
1252   0BBF A7 00         mov bh, 0
1253   0BC1             ; START RELATIONAL
1254   0BC1 D7            push a
1255   0BC2 11            mov a, b
1256   0BC3 26 2F 00      mov b, $2f
1257   0BC6 B0            cmp a, b
1258   0BC7 FD 71         seq ; ==
1259   0BC9 E4            pop a
1260   0BCA             ; END RELATIONAL
1261   0BCA FD A8         sor a, b ; ||
1262   0BCC 11            mov a, b
1263   0BCD FA 05 00      lea d, [bp + 5] ; $c
1264   0BD0 32            mov bl, [d]
1265   0BD1 A7 00         mov bh, 0
1266   0BD3             ; START RELATIONAL
1267   0BD3 D7            push a
1268   0BD4 11            mov a, b
1269   0BD5 26 25 00      mov b, $25
1270   0BD8 B0            cmp a, b
1271   0BD9 FD 71         seq ; ==
1272   0BDB E4            pop a
1273   0BDC             ; END RELATIONAL
1274   0BDC FD A8         sor a, b ; ||
1275   0BDE 11            mov a, b
1276   0BDF FA 05 00      lea d, [bp + 5] ; $c
1277   0BE2 32            mov bl, [d]
1278   0BE3 A7 00         mov bh, 0
1279   0BE5             ; START RELATIONAL
1280   0BE5 D7            push a
1281   0BE6 11            mov a, b
1282   0BE7 26 5B 00      mov b, $5b
1283   0BEA B0            cmp a, b
1284   0BEB FD 71         seq ; ==
1285   0BED E4            pop a
1286   0BEE             ; END RELATIONAL
1287   0BEE FD A8         sor a, b ; ||
1288   0BF0 11            mov a, b
1289   0BF1 FA 05 00      lea d, [bp + 5] ; $c
1290   0BF4 32            mov bl, [d]
1291   0BF5 A7 00         mov bh, 0
1292   0BF7             ; START RELATIONAL
1293   0BF7 D7            push a
1294   0BF8 11            mov a, b
1295   0BF9 26 5D 00      mov b, $5d
1296   0BFC B0            cmp a, b
1297   0BFD FD 71         seq ; ==
1298   0BFF E4            pop a
1299   0C00             ; END RELATIONAL
1300   0C00 FD A8         sor a, b ; ||
1301   0C02 11            mov a, b
1302   0C03 FA 05 00      lea d, [bp + 5] ; $c
1303   0C06 32            mov bl, [d]
1304   0C07 A7 00         mov bh, 0
1305   0C09             ; START RELATIONAL
1306   0C09 D7            push a
1307   0C0A 11            mov a, b
1308   0C0B 26 28 00      mov b, $28
1309   0C0E B0            cmp a, b
1310   0C0F FD 71         seq ; ==
1311   0C11 E4            pop a
1312   0C12             ; END RELATIONAL
1313   0C12 FD A8         sor a, b ; ||
1314   0C14 11            mov a, b
1315   0C15 FA 05 00      lea d, [bp + 5] ; $c
1316   0C18 32            mov bl, [d]
1317   0C19 A7 00         mov bh, 0
1318   0C1B             ; START RELATIONAL
1319   0C1B D7            push a
1320   0C1C 11            mov a, b
1321   0C1D 26 29 00      mov b, $29
1322   0C20 B0            cmp a, b
1323   0C21 FD 71         seq ; ==
1324   0C23 E4            pop a
1325   0C24             ; END RELATIONAL
1326   0C24 FD A8         sor a, b ; ||
1327   0C26 11            mov a, b
1328   0C27 FA 05 00      lea d, [bp + 5] ; $c
1329   0C2A 32            mov bl, [d]
1330   0C2B A7 00         mov bh, 0
1331   0C2D             ; START RELATIONAL
1332   0C2D D7            push a
1333   0C2E 11            mov a, b
1334   0C2F 26 7B 00      mov b, $7b
1335   0C32 B0            cmp a, b
1336   0C33 FD 71         seq ; ==
1337   0C35 E4            pop a
1338   0C36             ; END RELATIONAL
1339   0C36 FD A8         sor a, b ; ||
1340   0C38 11            mov a, b
1341   0C39 FA 05 00      lea d, [bp + 5] ; $c
1342   0C3C 32            mov bl, [d]
1343   0C3D A7 00         mov bh, 0
1344   0C3F             ; START RELATIONAL
1345   0C3F D7            push a
1346   0C40 11            mov a, b
1347   0C41 26 7D 00      mov b, $7d
1348   0C44 B0            cmp a, b
1349   0C45 FD 71         seq ; ==
1350   0C47 E4            pop a
1351   0C48             ; END RELATIONAL
1352   0C48 FD A8         sor a, b ; ||
1353   0C4A 11            mov a, b
1354   0C4B FA 05 00      lea d, [bp + 5] ; $c
1355   0C4E 32            mov bl, [d]
1356   0C4F A7 00         mov bh, 0
1357   0C51             ; START RELATIONAL
1358   0C51 D7            push a
1359   0C52 11            mov a, b
1360   0C53 26 3A 00      mov b, $3a
1361   0C56 B0            cmp a, b
1362   0C57 FD 71         seq ; ==
1363   0C59 E4            pop a
1364   0C5A             ; END RELATIONAL
1365   0C5A FD A8         sor a, b ; ||
1366   0C5C 11            mov a, b
1367   0C5D FA 05 00      lea d, [bp + 5] ; $c
1368   0C60 32            mov bl, [d]
1369   0C61 A7 00         mov bh, 0
1370   0C63             ; START RELATIONAL
1371   0C63 D7            push a
1372   0C64 11            mov a, b
1373   0C65 26 3B 00      mov b, $3b
1374   0C68 B0            cmp a, b
1375   0C69 FD 71         seq ; ==
1376   0C6B E4            pop a
1377   0C6C             ; END RELATIONAL
1378   0C6C FD A8         sor a, b ; ||
1379   0C6E 11            mov a, b
1380   0C6F FA 05 00      lea d, [bp + 5] ; $c
1381   0C72 32            mov bl, [d]
1382   0C73 A7 00         mov bh, 0
1383   0C75             ; START RELATIONAL
1384   0C75 D7            push a
1385   0C76 11            mov a, b
1386   0C77 26 3C 00      mov b, $3c
1387   0C7A B0            cmp a, b
1388   0C7B FD 71         seq ; ==
1389   0C7D E4            pop a
1390   0C7E             ; END RELATIONAL
1391   0C7E FD A8         sor a, b ; ||
1392   0C80 11            mov a, b
1393   0C81 FA 05 00      lea d, [bp + 5] ; $c
1394   0C84 32            mov bl, [d]
1395   0C85 A7 00         mov bh, 0
1396   0C87             ; START RELATIONAL
1397   0C87 D7            push a
1398   0C88 11            mov a, b
1399   0C89 26 3E 00      mov b, $3e
1400   0C8C B0            cmp a, b
1401   0C8D FD 71         seq ; ==
1402   0C8F E4            pop a
1403   0C90             ; END RELATIONAL
1404   0C90 FD A8         sor a, b ; ||
1405   0C92 11            mov a, b
1406   0C93 FA 05 00      lea d, [bp + 5] ; $c
1407   0C96 32            mov bl, [d]
1408   0C97 A7 00         mov bh, 0
1409   0C99             ; START RELATIONAL
1410   0C99 D7            push a
1411   0C9A 11            mov a, b
1412   0C9B 26 3D 00      mov b, $3d
1413   0C9E B0            cmp a, b
1414   0C9F FD 71         seq ; ==
1415   0CA1 E4            pop a
1416   0CA2             ; END RELATIONAL
1417   0CA2 FD A8         sor a, b ; ||
1418   0CA4 11            mov a, b
1419   0CA5 FA 05 00      lea d, [bp + 5] ; $c
1420   0CA8 32            mov bl, [d]
1421   0CA9 A7 00         mov bh, 0
1422   0CAB             ; START RELATIONAL
1423   0CAB D7            push a
1424   0CAC 11            mov a, b
1425   0CAD 26 21 00      mov b, $21
1426   0CB0 B0            cmp a, b
1427   0CB1 FD 71         seq ; ==
1428   0CB3 E4            pop a
1429   0CB4             ; END RELATIONAL
1430   0CB4 FD A8         sor a, b ; ||
1431   0CB6 11            mov a, b
1432   0CB7 FA 05 00      lea d, [bp + 5] ; $c
1433   0CBA 32            mov bl, [d]
1434   0CBB A7 00         mov bh, 0
1435   0CBD             ; START RELATIONAL
1436   0CBD D7            push a
1437   0CBE 11            mov a, b
1438   0CBF 26 5E 00      mov b, $5e
1439   0CC2 B0            cmp a, b
1440   0CC3 FD 71         seq ; ==
1441   0CC5 E4            pop a
1442   0CC6             ; END RELATIONAL
1443   0CC6 FD A8         sor a, b ; ||
1444   0CC8 11            mov a, b
1445   0CC9 FA 05 00      lea d, [bp + 5] ; $c
1446   0CCC 32            mov bl, [d]
1447   0CCD A7 00         mov bh, 0
1448   0CCF             ; START RELATIONAL
1449   0CCF D7            push a
1450   0CD0 11            mov a, b
1451   0CD1 26 26 00      mov b, $26
1452   0CD4 B0            cmp a, b
1453   0CD5 FD 71         seq ; ==
1454   0CD7 E4            pop a
1455   0CD8             ; END RELATIONAL
1456   0CD8 FD A8         sor a, b ; ||
1457   0CDA 11            mov a, b
1458   0CDB FA 05 00      lea d, [bp + 5] ; $c
1459   0CDE 32            mov bl, [d]
1460   0CDF A7 00         mov bh, 0
1461   0CE1             ; START RELATIONAL
1462   0CE1 D7            push a
1463   0CE2 11            mov a, b
1464   0CE3 26 7C 00      mov b, $7c
1465   0CE6 B0            cmp a, b
1466   0CE7 FD 71         seq ; ==
1467   0CE9 E4            pop a
1468   0CEA             ; END RELATIONAL
1469   0CEA FD A8         sor a, b ; ||
1470   0CEC 11            mov a, b
1471   0CED FA 05 00      lea d, [bp + 5] ; $c
1472   0CF0 32            mov bl, [d]
1473   0CF1 A7 00         mov bh, 0
1474   0CF3             ; START RELATIONAL
1475   0CF3 D7            push a
1476   0CF4 11            mov a, b
1477   0CF5 26 7E 00      mov b, $7e
1478   0CF8 B0            cmp a, b
1479   0CF9 FD 71         seq ; ==
1480   0CFB E4            pop a
1481   0CFC             ; END RELATIONAL
1482   0CFC FD A8         sor a, b ; ||
1483   0CFE 11            mov a, b
1484   0CFF FA 05 00      lea d, [bp + 5] ; $c
1485   0D02 32            mov bl, [d]
1486   0D03 A7 00         mov bh, 0
1487   0D05             ; START RELATIONAL
1488   0D05 D7            push a
1489   0D06 11            mov a, b
1490   0D07 26 2E 00      mov b, $2e
1491   0D0A B0            cmp a, b
1492   0D0B FD 71         seq ; ==
1493   0D0D E4            pop a
1494   0D0E             ; END RELATIONAL
1495   0D0E FD A8         sor a, b ; ||
1496   0D10 E4            pop a
1497   0D11 C0 00 00      cmp b, 0
1498   0D14 C6 1F 0D      je _if26_else
1499   0D17             _if26_true:
1500   0D17             ;; return 1; 
1501   0D17 26 01 00      mov b, $1
1502   0D1A F9            leave
1503   0D1B 09            ret
1504   0D1C 0A 24 0D      jmp _if26_exit
1505   0D1F             _if26_else:
1506   0D1F             ;; return 0; 
1507   0D1F 26 00 00      mov b, $0
1508   0D22 F9            leave
1509   0D23 09            ret
1510   0D24             _if26_exit:
1511   0D24 F9            leave
1512   0D25 09            ret
1513   0D26             
1514   0D26             strcpy:
1515   0D26 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1516   0D29             ; $psrc 
1517   0D29             ; $pdest 
1518   0D29 52 04 00      sub sp, 4
1519   0D2C             
1520   0D2C             ;; psrc = src; 
1521   0D2C FA FF FF      lea d, [bp + -1] ; $psrc
1522   0D2F DA            push d
1523   0D30 FA 07 00      lea d, [bp + 7] ; $src
1524   0D33 2A            mov b, [d]
1525   0D34 E7            pop d
1526   0D35 FD 43         mov [d], b
1527   0D37             ;; pdest = dest; 
1528   0D37 FA FD FF      lea d, [bp + -3] ; $pdest
1529   0D3A DA            push d
1530   0D3B FA 05 00      lea d, [bp + 5] ; $dest
1531   0D3E 2A            mov b, [d]
1532   0D3F E7            pop d
1533   0D40 FD 43         mov [d], b
1534   0D42             ;; while(*psrc) *pdest++ = *psrc++; 
1535   0D42             _while27_cond:
1536   0D42 FA FF FF      lea d, [bp + -1] ; $psrc
1537   0D45 2A            mov b, [d]
1538   0D46 74            mov d, b
1539   0D47 32            mov bl, [d]
1540   0D48 A7 00         mov bh, 0
1541   0D4A C0 00 00      cmp b, 0
1542   0D4D C6 79 0D      je _while27_exit
1543   0D50             _while27_block:
1544   0D50             ;; *pdest++ = *psrc++; 
1545   0D50 FA FD FF      lea d, [bp + -3] ; $pdest
1546   0D53 2A            mov b, [d]
1547   0D54 FD 79         mov g, b
1548   0D56 FD 77         inc b
1549   0D58 FA FD FF      lea d, [bp + -3] ; $pdest
1550   0D5B FD 43         mov [d], b
1551   0D5D FD 27         mov b, g
1552   0D5F D8            push b
1553   0D60 FA FF FF      lea d, [bp + -1] ; $psrc
1554   0D63 2A            mov b, [d]
1555   0D64 FD 79         mov g, b
1556   0D66 FD 77         inc b
1557   0D68 FA FF FF      lea d, [bp + -1] ; $psrc
1558   0D6B FD 43         mov [d], b
1559   0D6D FD 27         mov b, g
1560   0D6F 74            mov d, b
1561   0D70 32            mov bl, [d]
1562   0D71 A7 00         mov bh, 0
1563   0D73 E7            pop d
1564   0D74 FD 3E         mov [d], bl
1565   0D76 0A 42 0D      jmp _while27_cond
1566   0D79             _while27_exit:
1567   0D79             ;; *pdest = '\0'; 
1568   0D79 FA FD FF      lea d, [bp + -3] ; $pdest
1569   0D7C 2A            mov b, [d]
1570   0D7D D8            push b
1571   0D7E 26 00 00      mov b, $0
1572   0D81 E7            pop d
1573   0D82 FD 3E         mov [d], bl
1574   0D84 F9            leave
1575   0D85 09            ret
1576   0D86             
1577   0D86             strcmp:
1578   0D86 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1579   0D89             ;; while (*s1 && (*s1 == *s2)) { 
1580   0D89             _while28_cond:
1581   0D89 FA 05 00      lea d, [bp + 5] ; $s1
1582   0D8C 2A            mov b, [d]
1583   0D8D 74            mov d, b
1584   0D8E 32            mov bl, [d]
1585   0D8F A7 00         mov bh, 0
1586   0D91 D7            push a
1587   0D92 11            mov a, b
1588   0D93 FA 05 00      lea d, [bp + 5] ; $s1
1589   0D96 2A            mov b, [d]
1590   0D97 74            mov d, b
1591   0D98 32            mov bl, [d]
1592   0D99 A7 00         mov bh, 0
1593   0D9B             ; START RELATIONAL
1594   0D9B D7            push a
1595   0D9C 11            mov a, b
1596   0D9D FA 07 00      lea d, [bp + 7] ; $s2
1597   0DA0 2A            mov b, [d]
1598   0DA1 74            mov d, b
1599   0DA2 32            mov bl, [d]
1600   0DA3 A7 00         mov bh, 0
1601   0DA5 B0            cmp a, b
1602   0DA6 FD 71         seq ; ==
1603   0DA8 E4            pop a
1604   0DA9             ; END RELATIONAL
1605   0DA9 FD A7         sand a, b ; &&
1606   0DAB E4            pop a
1607   0DAC C0 00 00      cmp b, 0
1608   0DAF C6 D3 0D      je _while28_exit
1609   0DB2             _while28_block:
1610   0DB2             ;; s1++; 
1611   0DB2 FA 05 00      lea d, [bp + 5] ; $s1
1612   0DB5 2A            mov b, [d]
1613   0DB6 FD 79         mov g, b
1614   0DB8 FD 77         inc b
1615   0DBA FA 05 00      lea d, [bp + 5] ; $s1
1616   0DBD FD 43         mov [d], b
1617   0DBF FD 27         mov b, g
1618   0DC1             ;; s2++; 
1619   0DC1 FA 07 00      lea d, [bp + 7] ; $s2
1620   0DC4 2A            mov b, [d]
1621   0DC5 FD 79         mov g, b
1622   0DC7 FD 77         inc b
1623   0DC9 FA 07 00      lea d, [bp + 7] ; $s2
1624   0DCC FD 43         mov [d], b
1625   0DCE FD 27         mov b, g
1626   0DD0 0A 89 0D      jmp _while28_cond
1627   0DD3             _while28_exit:
1628   0DD3             ;; return *s1 - *s2; 
1629   0DD3 FA 05 00      lea d, [bp + 5] ; $s1
1630   0DD6 2A            mov b, [d]
1631   0DD7 74            mov d, b
1632   0DD8 32            mov bl, [d]
1633   0DD9 A7 00         mov bh, 0
1634   0DDB             ; START TERMS
1635   0DDB D7            push a
1636   0DDC 11            mov a, b
1637   0DDD FA 07 00      lea d, [bp + 7] ; $s2
1638   0DE0 2A            mov b, [d]
1639   0DE1 74            mov d, b
1640   0DE2 32            mov bl, [d]
1641   0DE3 A7 00         mov bh, 0
1642   0DE5 60            sub a, b
1643   0DE6 27            mov b, a
1644   0DE7 E4            pop a
1645   0DE8             ; END TERMS
1646   0DE8 F9            leave
1647   0DE9 09            ret
1648   0DEA             
1649   0DEA             strcat:
1650   0DEA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1651   0DED             ; $dest_len 
1652   0DED             ; $i 
1653   0DED 52 04 00      sub sp, 4
1654   0DF0             
1655   0DF0             ;; dest_len = strlen(dest); 
1656   0DF0 FA FF FF      lea d, [bp + -1] ; $dest_len
1657   0DF3 DA            push d
1658   0DF4 FA 05 00      lea d, [bp + 5] ; $dest
1659   0DF7 2A            mov b, [d]
1660   0DF8 FD AB         swp b
1661   0DFA D8            push b
1662   0DFB 07 A0 0E      call strlen
1663   0DFE 51 02 00      add sp, 2
1664   0E01 E7            pop d
1665   0E02 FD 43         mov [d], b
1666   0E04             ;; for (i = 0; src[i] != 0; i=i+1) { 
1667   0E04             _for29_init:
1668   0E04 FA FD FF      lea d, [bp + -3] ; $i
1669   0E07 DA            push d
1670   0E08 26 00 00      mov b, $0
1671   0E0B E7            pop d
1672   0E0C FD 43         mov [d], b
1673   0E0E             _for29_cond:
1674   0E0E FA 07 00      lea d, [bp + 7] ; $src
1675   0E11 FD 2A         mov d, [d]
1676   0E13 D7            push a
1677   0E14 DA            push d
1678   0E15 FA FD FF      lea d, [bp + -3] ; $i
1679   0E18 2A            mov b, [d]
1680   0E19 E7            pop d
1681   0E1A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1682   0E1E E4            pop a
1683   0E1F 32            mov bl, [d]
1684   0E20 A7 00         mov bh, 0
1685   0E22             ; START RELATIONAL
1686   0E22 D7            push a
1687   0E23 11            mov a, b
1688   0E24 26 00 00      mov b, $0
1689   0E27 B0            cmp a, b
1690   0E28 FD 72         sneq ; !=
1691   0E2A E4            pop a
1692   0E2B             ; END RELATIONAL
1693   0E2B C0 00 00      cmp b, 0
1694   0E2E C6 79 0E      je _for29_exit
1695   0E31             _for29_block:
1696   0E31             ;; dest[dest_len + i] = src[i]; 
1697   0E31 FA 05 00      lea d, [bp + 5] ; $dest
1698   0E34 FD 2A         mov d, [d]
1699   0E36 D7            push a
1700   0E37 DA            push d
1701   0E38 FA FF FF      lea d, [bp + -1] ; $dest_len
1702   0E3B 2A            mov b, [d]
1703   0E3C             ; START TERMS
1704   0E3C D7            push a
1705   0E3D 11            mov a, b
1706   0E3E FA FD FF      lea d, [bp + -3] ; $i
1707   0E41 2A            mov b, [d]
1708   0E42 54            add a, b
1709   0E43 27            mov b, a
1710   0E44 E4            pop a
1711   0E45             ; END TERMS
1712   0E45 E7            pop d
1713   0E46 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1714   0E4A E4            pop a
1715   0E4B DA            push d
1716   0E4C FA 07 00      lea d, [bp + 7] ; $src
1717   0E4F FD 2A         mov d, [d]
1718   0E51 D7            push a
1719   0E52 DA            push d
1720   0E53 FA FD FF      lea d, [bp + -3] ; $i
1721   0E56 2A            mov b, [d]
1722   0E57 E7            pop d
1723   0E58 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1724   0E5C E4            pop a
1725   0E5D 32            mov bl, [d]
1726   0E5E A7 00         mov bh, 0
1727   0E60 E7            pop d
1728   0E61 FD 3E         mov [d], bl
1729   0E63             _for29_update:
1730   0E63 FA FD FF      lea d, [bp + -3] ; $i
1731   0E66 DA            push d
1732   0E67 FA FD FF      lea d, [bp + -3] ; $i
1733   0E6A 2A            mov b, [d]
1734   0E6B             ; START TERMS
1735   0E6B D7            push a
1736   0E6C 11            mov a, b
1737   0E6D 26 01 00      mov b, $1
1738   0E70 54            add a, b
1739   0E71 27            mov b, a
1740   0E72 E4            pop a
1741   0E73             ; END TERMS
1742   0E73 E7            pop d
1743   0E74 FD 43         mov [d], b
1744   0E76 0A 0E 0E      jmp _for29_cond
1745   0E79             _for29_exit:
1746   0E79             ;; dest[dest_len + i] = 0; 
1747   0E79 FA 05 00      lea d, [bp + 5] ; $dest
1748   0E7C FD 2A         mov d, [d]
1749   0E7E D7            push a
1750   0E7F DA            push d
1751   0E80 FA FF FF      lea d, [bp + -1] ; $dest_len
1752   0E83 2A            mov b, [d]
1753   0E84             ; START TERMS
1754   0E84 D7            push a
1755   0E85 11            mov a, b
1756   0E86 FA FD FF      lea d, [bp + -3] ; $i
1757   0E89 2A            mov b, [d]
1758   0E8A 54            add a, b
1759   0E8B 27            mov b, a
1760   0E8C E4            pop a
1761   0E8D             ; END TERMS
1762   0E8D E7            pop d
1763   0E8E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1764   0E92 E4            pop a
1765   0E93 DA            push d
1766   0E94 26 00 00      mov b, $0
1767   0E97 E7            pop d
1768   0E98 FD 3E         mov [d], bl
1769   0E9A             ;; return dest; 
1770   0E9A FA 05 00      lea d, [bp + 5] ; $dest
1771   0E9D 2A            mov b, [d]
1772   0E9E F9            leave
1773   0E9F 09            ret
1774   0EA0             
1775   0EA0             strlen:
1776   0EA0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1777   0EA3             ; $length 
1778   0EA3 52 02 00      sub sp, 2
1779   0EA6             
1780   0EA6             ;; length = 0; 
1781   0EA6 FA FF FF      lea d, [bp + -1] ; $length
1782   0EA9 DA            push d
1783   0EAA 26 00 00      mov b, $0
1784   0EAD E7            pop d
1785   0EAE FD 43         mov [d], b
1786   0EB0             ;; while (str[length] != 0) { 
1787   0EB0             _while30_cond:
1788   0EB0 FA 05 00      lea d, [bp + 5] ; $str
1789   0EB3 FD 2A         mov d, [d]
1790   0EB5 D7            push a
1791   0EB6 DA            push d
1792   0EB7 FA FF FF      lea d, [bp + -1] ; $length
1793   0EBA 2A            mov b, [d]
1794   0EBB E7            pop d
1795   0EBC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1796   0EC0 E4            pop a
1797   0EC1 32            mov bl, [d]
1798   0EC2 A7 00         mov bh, 0
1799   0EC4             ; START RELATIONAL
1800   0EC4 D7            push a
1801   0EC5 11            mov a, b
1802   0EC6 26 00 00      mov b, $0
1803   0EC9 B0            cmp a, b
1804   0ECA FD 72         sneq ; !=
1805   0ECC E4            pop a
1806   0ECD             ; END RELATIONAL
1807   0ECD C0 00 00      cmp b, 0
1808   0ED0 C6 E5 0E      je _while30_exit
1809   0ED3             _while30_block:
1810   0ED3             ;; length++; 
1811   0ED3 FA FF FF      lea d, [bp + -1] ; $length
1812   0ED6 2A            mov b, [d]
1813   0ED7 FD 79         mov g, b
1814   0ED9 FD 77         inc b
1815   0EDB FA FF FF      lea d, [bp + -1] ; $length
1816   0EDE FD 43         mov [d], b
1817   0EE0 FD 27         mov b, g
1818   0EE2 0A B0 0E      jmp _while30_cond
1819   0EE5             _while30_exit:
1820   0EE5             ;; return length; 
1821   0EE5 FA FF FF      lea d, [bp + -1] ; $length
1822   0EE8 2A            mov b, [d]
1823   0EE9 F9            leave
1824   0EEA 09            ret
1825   0EEB             
1826   0EEB             printf:
1827   0EEB F8 00 00      enter 0 ; (push bp; mov bp, sp)
1828   0EEE             ; $p 
1829   0EEE             ; $fp 
1830   0EEE             ; $i 
1831   0EEE 52 06 00      sub sp, 6
1832   0EF1             
1833   0EF1             ;; fp = format; 
1834   0EF1 FA FD FF      lea d, [bp + -3] ; $fp
1835   0EF4 DA            push d
1836   0EF5 FA 05 00      lea d, [bp + 5] ; $format
1837   0EF8 2A            mov b, [d]
1838   0EF9 E7            pop d
1839   0EFA FD 43         mov [d], b
1840   0EFC             ;; p = &format + 2; 
1841   0EFC FA FF FF      lea d, [bp + -1] ; $p
1842   0EFF DA            push d
1843   0F00 FA 05 00      lea d, [bp + 5] ; $format
1844   0F03 2D            mov b, d
1845   0F04             ; START TERMS
1846   0F04 D7            push a
1847   0F05 11            mov a, b
1848   0F06 26 02 00      mov b, $2
1849   0F09 54            add a, b
1850   0F0A 27            mov b, a
1851   0F0B E4            pop a
1852   0F0C             ; END TERMS
1853   0F0C E7            pop d
1854   0F0D FD 43         mov [d], b
1855   0F0F             ;; for(;;){ 
1856   0F0F             _for31_init:
1857   0F0F             _for31_cond:
1858   0F0F             _for31_block:
1859   0F0F             ;; if(!*fp) break; 
1860   0F0F             _if32_cond:
1861   0F0F FA FD FF      lea d, [bp + -3] ; $fp
1862   0F12 2A            mov b, [d]
1863   0F13 74            mov d, b
1864   0F14 32            mov bl, [d]
1865   0F15 A7 00         mov bh, 0
1866   0F17 C0 00 00      cmp b, 0
1867   0F1A FD 71         seq ; !
1868   0F1C C0 00 00      cmp b, 0
1869   0F1F C6 28 0F      je _if32_else
1870   0F22             _if32_true:
1871   0F22             ;; break; 
1872   0F22 0A 72 10      jmp _for31_exit ; for break
1873   0F25 0A 6F 10      jmp _if32_exit
1874   0F28             _if32_else:
1875   0F28             ;; if(*fp == '%'){ 
1876   0F28             _if33_cond:
1877   0F28 FA FD FF      lea d, [bp + -3] ; $fp
1878   0F2B 2A            mov b, [d]
1879   0F2C 74            mov d, b
1880   0F2D 32            mov bl, [d]
1881   0F2E A7 00         mov bh, 0
1882   0F30             ; START RELATIONAL
1883   0F30 D7            push a
1884   0F31 11            mov a, b
1885   0F32 26 25 00      mov b, $25
1886   0F35 B0            cmp a, b
1887   0F36 FD 71         seq ; ==
1888   0F38 E4            pop a
1889   0F39             ; END RELATIONAL
1890   0F39 C0 00 00      cmp b, 0
1891   0F3C C6 51 10      je _if33_else
1892   0F3F             _if33_true:
1893   0F3F             ;; fp++; 
1894   0F3F FA FD FF      lea d, [bp + -3] ; $fp
1895   0F42 2A            mov b, [d]
1896   0F43 FD 79         mov g, b
1897   0F45 FD 77         inc b
1898   0F47 FA FD FF      lea d, [bp + -3] ; $fp
1899   0F4A FD 43         mov [d], b
1900   0F4C FD 27         mov b, g
1901   0F4E             ;; switch(*fp){ 
1902   0F4E             _switch34_expr:
1903   0F4E FA FD FF      lea d, [bp + -3] ; $fp
1904   0F51 2A            mov b, [d]
1905   0F52 74            mov d, b
1906   0F53 32            mov bl, [d]
1907   0F54 A7 00         mov bh, 0
1908   0F56             _switch34_comparisons:
1909   0F56 C1 64         cmp bl, $64
1910   0F58 C6 7A 0F      je _switch34_case0
1911   0F5B C1 69         cmp bl, $69
1912   0F5D C6 7A 0F      je _switch34_case1
1913   0F60 C1 75         cmp bl, $75
1914   0F62 C6 9F 0F      je _switch34_case2
1915   0F65 C1 78         cmp bl, $78
1916   0F67 C6 C4 0F      je _switch34_case3
1917   0F6A C1 63         cmp bl, $63
1918   0F6C C6 E9 0F      je _switch34_case4
1919   0F6F C1 73         cmp bl, $73
1920   0F71 C6 0E 10      je _switch34_case5
1921   0F74 0A 33 10      jmp _switch34_default
1922   0F77 0A 3F 10      jmp _switch34_exit
1923   0F7A             _switch34_case0:
1924   0F7A             _switch34_case1:
1925   0F7A             ;; prints(*(int*)p); 
1926   0F7A FA FF FF      lea d, [bp + -1] ; $p
1927   0F7D 2A            mov b, [d]
1928   0F7E 74            mov d, b
1929   0F7F 2A            mov b, [d]
1930   0F80 FD AB         swp b
1931   0F82 D8            push b
1932   0F83 07 04 13      call prints
1933   0F86 51 02 00      add sp, 2
1934   0F89             ;; p = p + 2; 
1935   0F89 FA FF FF      lea d, [bp + -1] ; $p
1936   0F8C DA            push d
1937   0F8D FA FF FF      lea d, [bp + -1] ; $p
1938   0F90 2A            mov b, [d]
1939   0F91             ; START TERMS
1940   0F91 D7            push a
1941   0F92 11            mov a, b
1942   0F93 26 02 00      mov b, $2
1943   0F96 54            add a, b
1944   0F97 27            mov b, a
1945   0F98 E4            pop a
1946   0F99             ; END TERMS
1947   0F99 E7            pop d
1948   0F9A FD 43         mov [d], b
1949   0F9C             ;; break; 
1950   0F9C 0A 3F 10      jmp _switch34_exit ; case break
1951   0F9F             _switch34_case2:
1952   0F9F             ;; printu(*(unsigned int*)p); 
1953   0F9F FA FF FF      lea d, [bp + -1] ; $p
1954   0FA2 2A            mov b, [d]
1955   0FA3 74            mov d, b
1956   0FA4 2A            mov b, [d]
1957   0FA5 FD AB         swp b
1958   0FA7 D8            push b
1959   0FA8 07 F9 13      call printu
1960   0FAB 51 02 00      add sp, 2
1961   0FAE             ;; p = p + 2; 
1962   0FAE FA FF FF      lea d, [bp + -1] ; $p
1963   0FB1 DA            push d
1964   0FB2 FA FF FF      lea d, [bp + -1] ; $p
1965   0FB5 2A            mov b, [d]
1966   0FB6             ; START TERMS
1967   0FB6 D7            push a
1968   0FB7 11            mov a, b
1969   0FB8 26 02 00      mov b, $2
1970   0FBB 54            add a, b
1971   0FBC 27            mov b, a
1972   0FBD E4            pop a
1973   0FBE             ; END TERMS
1974   0FBE E7            pop d
1975   0FBF FD 43         mov [d], b
1976   0FC1             ;; break; 
1977   0FC1 0A 3F 10      jmp _switch34_exit ; case break
1978   0FC4             _switch34_case3:
1979   0FC4             ;; printx16(*(unsigned int*)p); 
1980   0FC4 FA FF FF      lea d, [bp + -1] ; $p
1981   0FC7 2A            mov b, [d]
1982   0FC8 74            mov d, b
1983   0FC9 2A            mov b, [d]
1984   0FCA FD AB         swp b
1985   0FCC D8            push b
1986   0FCD 07 74 10      call printx16
1987   0FD0 51 02 00      add sp, 2
1988   0FD3             ;; p = p + 2; 
1989   0FD3 FA FF FF      lea d, [bp + -1] ; $p
1990   0FD6 DA            push d
1991   0FD7 FA FF FF      lea d, [bp + -1] ; $p
1992   0FDA 2A            mov b, [d]
1993   0FDB             ; START TERMS
1994   0FDB D7            push a
1995   0FDC 11            mov a, b
1996   0FDD 26 02 00      mov b, $2
1997   0FE0 54            add a, b
1998   0FE1 27            mov b, a
1999   0FE2 E4            pop a
2000   0FE3             ; END TERMS
2001   0FE3 E7            pop d
2002   0FE4 FD 43         mov [d], b
2003   0FE6             ;; break; 
2004   0FE6 0A 3F 10      jmp _switch34_exit ; case break
2005   0FE9             _switch34_case4:
2006   0FE9             ;; putchar(*(char*)p); 
2007   0FE9 FA FF FF      lea d, [bp + -1] ; $p
2008   0FEC 2A            mov b, [d]
2009   0FED 74            mov d, b
2010   0FEE 32            mov bl, [d]
2011   0FEF A7 00         mov bh, 0
2012   0FF1 DD            push bl
2013   0FF2 07 E5 14      call putchar
2014   0FF5 51 01 00      add sp, 1
2015   0FF8             ;; p = p + 2; 
2016   0FF8 FA FF FF      lea d, [bp + -1] ; $p
2017   0FFB DA            push d
2018   0FFC FA FF FF      lea d, [bp + -1] ; $p
2019   0FFF 2A            mov b, [d]
2020   1000             ; START TERMS
2021   1000 D7            push a
2022   1001 11            mov a, b
2023   1002 26 02 00      mov b, $2
2024   1005 54            add a, b
2025   1006 27            mov b, a
2026   1007 E4            pop a
2027   1008             ; END TERMS
2028   1008 E7            pop d
2029   1009 FD 43         mov [d], b
2030   100B             ;; break; 
2031   100B 0A 3F 10      jmp _switch34_exit ; case break
2032   100E             _switch34_case5:
2033   100E             ;; print(*(char**)p); 
2034   100E FA FF FF      lea d, [bp + -1] ; $p
2035   1011 2A            mov b, [d]
2036   1012 74            mov d, b
2037   1013 2A            mov b, [d]
2038   1014 FD AB         swp b
2039   1016 D8            push b
2040   1017 07 2D 15      call print
2041   101A 51 02 00      add sp, 2
2042   101D             ;; p = p + 2; 
2043   101D FA FF FF      lea d, [bp + -1] ; $p
2044   1020 DA            push d
2045   1021 FA FF FF      lea d, [bp + -1] ; $p
2046   1024 2A            mov b, [d]
2047   1025             ; START TERMS
2048   1025 D7            push a
2049   1026 11            mov a, b
2050   1027 26 02 00      mov b, $2
2051   102A 54            add a, b
2052   102B 27            mov b, a
2053   102C E4            pop a
2054   102D             ; END TERMS
2055   102D E7            pop d
2056   102E FD 43         mov [d], b
2057   1030             ;; break; 
2058   1030 0A 3F 10      jmp _switch34_exit ; case break
2059   1033             _switch34_default:
2060   1033             ;; print("Error: Unknown argument type.\n"); 
2061   1033 26 8E 3B      mov b, __s10 ; "Error: Unknown argument type.\n"
2062   1036 FD AB         swp b
2063   1038 D8            push b
2064   1039 07 2D 15      call print
2065   103C 51 02 00      add sp, 2
2066   103F             _switch34_exit:
2067   103F             ;; fp++; 
2068   103F FA FD FF      lea d, [bp + -3] ; $fp
2069   1042 2A            mov b, [d]
2070   1043 FD 79         mov g, b
2071   1045 FD 77         inc b
2072   1047 FA FD FF      lea d, [bp + -3] ; $fp
2073   104A FD 43         mov [d], b
2074   104C FD 27         mov b, g
2075   104E 0A 6F 10      jmp _if33_exit
2076   1051             _if33_else:
2077   1051             ;; putchar(*fp); 
2078   1051 FA FD FF      lea d, [bp + -3] ; $fp
2079   1054 2A            mov b, [d]
2080   1055 74            mov d, b
2081   1056 32            mov bl, [d]
2082   1057 A7 00         mov bh, 0
2083   1059 DD            push bl
2084   105A 07 E5 14      call putchar
2085   105D 51 01 00      add sp, 1
2086   1060             ;; fp++; 
2087   1060 FA FD FF      lea d, [bp + -3] ; $fp
2088   1063 2A            mov b, [d]
2089   1064 FD 79         mov g, b
2090   1066 FD 77         inc b
2091   1068 FA FD FF      lea d, [bp + -3] ; $fp
2092   106B FD 43         mov [d], b
2093   106D FD 27         mov b, g
2094   106F             _if33_exit:
2095   106F             _if32_exit:
2096   106F             _for31_update:
2097   106F 0A 0F 0F      jmp _for31_cond
2098   1072             _for31_exit:
2099   1072 F9            leave
2100   1073 09            ret
2101   1074             
2102   1074             printx16:
2103   1074 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2104   1077             
2105   1077             ; --- BEGIN INLINE ASM BLOCK
2106   1077 FA 05 00      lea d, [bp + 5] ; $hex
2107   107A 2A            mov b, [d]
2108   107B 07 04 19      call print_u16x
2109   107E             ; --- END INLINE ASM BLOCK
2110   107E             
2111   107E F9            leave
2112   107F 09            ret
2113   1080             
2114   1080             printx8:
2115   1080 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2116   1083             
2117   1083             ; --- BEGIN INLINE ASM BLOCK
2118   1083 FA 05 00      lea d, [bp + 5] ; $hex
2119   1086 32            mov bl, [d]
2120   1087 07 48 19      call print_u8x
2121   108A             ; --- END INLINE ASM BLOCK
2122   108A             
2123   108A F9            leave
2124   108B 09            ret
2125   108C             
2126   108C             hex_to_int:
2127   108C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2128   108F             ; $value 
2129   108F 10 00 00      mov a, $0
2130   1092 45 FF FF      mov [bp + -1], a
2131   1095             ; $i 
2132   1095             ; $hex_char 
2133   1095             ; $len 
2134   1095 52 07 00      sub sp, 7
2135   1098             
2136   1098             ;; len = strlen(hex_string); 
2137   1098 FA FA FF      lea d, [bp + -6] ; $len
2138   109B DA            push d
2139   109C FA 05 00      lea d, [bp + 5] ; $hex_string
2140   109F 2A            mov b, [d]
2141   10A0 FD AB         swp b
2142   10A2 D8            push b
2143   10A3 07 A0 0E      call strlen
2144   10A6 51 02 00      add sp, 2
2145   10A9 E7            pop d
2146   10AA FD 43         mov [d], b
2147   10AC             ;; for (i = 0; i < len; i++) { 
2148   10AC             _for35_init:
2149   10AC FA FD FF      lea d, [bp + -3] ; $i
2150   10AF DA            push d
2151   10B0 26 00 00      mov b, $0
2152   10B3 E7            pop d
2153   10B4 FD 43         mov [d], b
2154   10B6             _for35_cond:
2155   10B6 FA FD FF      lea d, [bp + -3] ; $i
2156   10B9 2A            mov b, [d]
2157   10BA             ; START RELATIONAL
2158   10BA D7            push a
2159   10BB 11            mov a, b
2160   10BC FA FA FF      lea d, [bp + -6] ; $len
2161   10BF 2A            mov b, [d]
2162   10C0 B0            cmp a, b
2163   10C1 FD 73         slt ; < 
2164   10C3 E4            pop a
2165   10C4             ; END RELATIONAL
2166   10C4 C0 00 00      cmp b, 0
2167   10C7 C6 CC 11      je _for35_exit
2168   10CA             _for35_block:
2169   10CA             ;; hex_char = hex_string[i]; 
2170   10CA FA FC FF      lea d, [bp + -4] ; $hex_char
2171   10CD DA            push d
2172   10CE FA 05 00      lea d, [bp + 5] ; $hex_string
2173   10D1 FD 2A         mov d, [d]
2174   10D3 D7            push a
2175   10D4 DA            push d
2176   10D5 FA FD FF      lea d, [bp + -3] ; $i
2177   10D8 2A            mov b, [d]
2178   10D9 E7            pop d
2179   10DA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2180   10DE E4            pop a
2181   10DF 32            mov bl, [d]
2182   10E0 A7 00         mov bh, 0
2183   10E2 E7            pop d
2184   10E3 FD 3E         mov [d], bl
2185   10E5             ;; if (hex_char >= 'a' && hex_char <= 'f')  
2186   10E5             _if36_cond:
2187   10E5 FA FC FF      lea d, [bp + -4] ; $hex_char
2188   10E8 32            mov bl, [d]
2189   10E9 A7 00         mov bh, 0
2190   10EB             ; START RELATIONAL
2191   10EB D7            push a
2192   10EC 11            mov a, b
2193   10ED 26 61 00      mov b, $61
2194   10F0 B0            cmp a, b
2195   10F1 FD 80         sge ; >=
2196   10F3 E4            pop a
2197   10F4             ; END RELATIONAL
2198   10F4 D7            push a
2199   10F5 11            mov a, b
2200   10F6 FA FC FF      lea d, [bp + -4] ; $hex_char
2201   10F9 32            mov bl, [d]
2202   10FA A7 00         mov bh, 0
2203   10FC             ; START RELATIONAL
2204   10FC D7            push a
2205   10FD 11            mov a, b
2206   10FE 26 66 00      mov b, $66
2207   1101 B0            cmp a, b
2208   1102 FD 74         sle ; <=
2209   1104 E4            pop a
2210   1105             ; END RELATIONAL
2211   1105 FD A7         sand a, b ; &&
2212   1107 E4            pop a
2213   1108 C0 00 00      cmp b, 0
2214   110B C6 3C 11      je _if36_else
2215   110E             _if36_true:
2216   110E             ;; value = (value * 16) + (hex_char - 'a' + 10); 
2217   110E FA FF FF      lea d, [bp + -1] ; $value
2218   1111 DA            push d
2219   1112 FA FF FF      lea d, [bp + -1] ; $value
2220   1115 2A            mov b, [d]
2221   1116             ; START FACTORS
2222   1116 D7            push a
2223   1117 11            mov a, b
2224   1118 26 10 00      mov b, $10
2225   111B AC            mul a, b ; *
2226   111C 11            mov a, b
2227   111D 27            mov b, a
2228   111E E4            pop a
2229   111F             ; END FACTORS
2230   111F             ; START TERMS
2231   111F D7            push a
2232   1120 11            mov a, b
2233   1121 FA FC FF      lea d, [bp + -4] ; $hex_char
2234   1124 32            mov bl, [d]
2235   1125 A7 00         mov bh, 0
2236   1127             ; START TERMS
2237   1127 D7            push a
2238   1128 11            mov a, b
2239   1129 26 61 00      mov b, $61
2240   112C 60            sub a, b
2241   112D 26 0A 00      mov b, $a
2242   1130 54            add a, b
2243   1131 27            mov b, a
2244   1132 E4            pop a
2245   1133             ; END TERMS
2246   1133 54            add a, b
2247   1134 27            mov b, a
2248   1135 E4            pop a
2249   1136             ; END TERMS
2250   1136 E7            pop d
2251   1137 FD 43         mov [d], b
2252   1139 0A BA 11      jmp _if36_exit
2253   113C             _if36_else:
2254   113C             ;; if (hex_char >= 'A' && hex_char <= 'F')  
2255   113C             _if37_cond:
2256   113C FA FC FF      lea d, [bp + -4] ; $hex_char
2257   113F 32            mov bl, [d]
2258   1140 A7 00         mov bh, 0
2259   1142             ; START RELATIONAL
2260   1142 D7            push a
2261   1143 11            mov a, b
2262   1144 26 41 00      mov b, $41
2263   1147 B0            cmp a, b
2264   1148 FD 80         sge ; >=
2265   114A E4            pop a
2266   114B             ; END RELATIONAL
2267   114B D7            push a
2268   114C 11            mov a, b
2269   114D FA FC FF      lea d, [bp + -4] ; $hex_char
2270   1150 32            mov bl, [d]
2271   1151 A7 00         mov bh, 0
2272   1153             ; START RELATIONAL
2273   1153 D7            push a
2274   1154 11            mov a, b
2275   1155 26 46 00      mov b, $46
2276   1158 B0            cmp a, b
2277   1159 FD 74         sle ; <=
2278   115B E4            pop a
2279   115C             ; END RELATIONAL
2280   115C FD A7         sand a, b ; &&
2281   115E E4            pop a
2282   115F C0 00 00      cmp b, 0
2283   1162 C6 93 11      je _if37_else
2284   1165             _if37_true:
2285   1165             ;; value = (value * 16) + (hex_char - 'A' + 10); 
2286   1165 FA FF FF      lea d, [bp + -1] ; $value
2287   1168 DA            push d
2288   1169 FA FF FF      lea d, [bp + -1] ; $value
2289   116C 2A            mov b, [d]
2290   116D             ; START FACTORS
2291   116D D7            push a
2292   116E 11            mov a, b
2293   116F 26 10 00      mov b, $10
2294   1172 AC            mul a, b ; *
2295   1173 11            mov a, b
2296   1174 27            mov b, a
2297   1175 E4            pop a
2298   1176             ; END FACTORS
2299   1176             ; START TERMS
2300   1176 D7            push a
2301   1177 11            mov a, b
2302   1178 FA FC FF      lea d, [bp + -4] ; $hex_char
2303   117B 32            mov bl, [d]
2304   117C A7 00         mov bh, 0
2305   117E             ; START TERMS
2306   117E D7            push a
2307   117F 11            mov a, b
2308   1180 26 41 00      mov b, $41
2309   1183 60            sub a, b
2310   1184 26 0A 00      mov b, $a
2311   1187 54            add a, b
2312   1188 27            mov b, a
2313   1189 E4            pop a
2314   118A             ; END TERMS
2315   118A 54            add a, b
2316   118B 27            mov b, a
2317   118C E4            pop a
2318   118D             ; END TERMS
2319   118D E7            pop d
2320   118E FD 43         mov [d], b
2321   1190 0A BA 11      jmp _if37_exit
2322   1193             _if37_else:
2323   1193             ;; value = (value * 16) + (hex_char - '0'); 
2324   1193 FA FF FF      lea d, [bp + -1] ; $value
2325   1196 DA            push d
2326   1197 FA FF FF      lea d, [bp + -1] ; $value
2327   119A 2A            mov b, [d]
2328   119B             ; START FACTORS
2329   119B D7            push a
2330   119C 11            mov a, b
2331   119D 26 10 00      mov b, $10
2332   11A0 AC            mul a, b ; *
2333   11A1 11            mov a, b
2334   11A2 27            mov b, a
2335   11A3 E4            pop a
2336   11A4             ; END FACTORS
2337   11A4             ; START TERMS
2338   11A4 D7            push a
2339   11A5 11            mov a, b
2340   11A6 FA FC FF      lea d, [bp + -4] ; $hex_char
2341   11A9 32            mov bl, [d]
2342   11AA A7 00         mov bh, 0
2343   11AC             ; START TERMS
2344   11AC D7            push a
2345   11AD 11            mov a, b
2346   11AE 26 30 00      mov b, $30
2347   11B1 60            sub a, b
2348   11B2 27            mov b, a
2349   11B3 E4            pop a
2350   11B4             ; END TERMS
2351   11B4 54            add a, b
2352   11B5 27            mov b, a
2353   11B6 E4            pop a
2354   11B7             ; END TERMS
2355   11B7 E7            pop d
2356   11B8 FD 43         mov [d], b
2357   11BA             _if37_exit:
2358   11BA             _if36_exit:
2359   11BA             _for35_update:
2360   11BA FA FD FF      lea d, [bp + -3] ; $i
2361   11BD 2A            mov b, [d]
2362   11BE FD 79         mov g, b
2363   11C0 FD 77         inc b
2364   11C2 FA FD FF      lea d, [bp + -3] ; $i
2365   11C5 FD 43         mov [d], b
2366   11C7 FD 27         mov b, g
2367   11C9 0A B6 10      jmp _for35_cond
2368   11CC             _for35_exit:
2369   11CC             ;; return value; 
2370   11CC FA FF FF      lea d, [bp + -1] ; $value
2371   11CF 2A            mov b, [d]
2372   11D0 F9            leave
2373   11D1 09            ret
2374   11D2             
2375   11D2             atoi:
2376   11D2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2377   11D5             ; $result 
2378   11D5 10 00 00      mov a, $0
2379   11D8 45 FF FF      mov [bp + -1], a
2380   11DB             ; $sign 
2381   11DB 10 01 00      mov a, $1
2382   11DE 45 FD FF      mov [bp + -3], a
2383   11E1 52 04 00      sub sp, 4
2384   11E4             
2385   11E4             ;; while (*str == ' ') str++; 
2386   11E4             _while38_cond:
2387   11E4 FA 05 00      lea d, [bp + 5] ; $str
2388   11E7 2A            mov b, [d]
2389   11E8 74            mov d, b
2390   11E9 32            mov bl, [d]
2391   11EA A7 00         mov bh, 0
2392   11EC             ; START RELATIONAL
2393   11EC D7            push a
2394   11ED 11            mov a, b
2395   11EE 26 20 00      mov b, $20
2396   11F1 B0            cmp a, b
2397   11F2 FD 71         seq ; ==
2398   11F4 E4            pop a
2399   11F5             ; END RELATIONAL
2400   11F5 C0 00 00      cmp b, 0
2401   11F8 C6 0D 12      je _while38_exit
2402   11FB             _while38_block:
2403   11FB             ;; str++; 
2404   11FB FA 05 00      lea d, [bp + 5] ; $str
2405   11FE 2A            mov b, [d]
2406   11FF FD 79         mov g, b
2407   1201 FD 77         inc b
2408   1203 FA 05 00      lea d, [bp + 5] ; $str
2409   1206 FD 43         mov [d], b
2410   1208 FD 27         mov b, g
2411   120A 0A E4 11      jmp _while38_cond
2412   120D             _while38_exit:
2413   120D             ;; if (*str == '-' || *str == '+') { 
2414   120D             _if39_cond:
2415   120D FA 05 00      lea d, [bp + 5] ; $str
2416   1210 2A            mov b, [d]
2417   1211 74            mov d, b
2418   1212 32            mov bl, [d]
2419   1213 A7 00         mov bh, 0
2420   1215             ; START RELATIONAL
2421   1215 D7            push a
2422   1216 11            mov a, b
2423   1217 26 2D 00      mov b, $2d
2424   121A B0            cmp a, b
2425   121B FD 71         seq ; ==
2426   121D E4            pop a
2427   121E             ; END RELATIONAL
2428   121E D7            push a
2429   121F 11            mov a, b
2430   1220 FA 05 00      lea d, [bp + 5] ; $str
2431   1223 2A            mov b, [d]
2432   1224 74            mov d, b
2433   1225 32            mov bl, [d]
2434   1226 A7 00         mov bh, 0
2435   1228             ; START RELATIONAL
2436   1228 D7            push a
2437   1229 11            mov a, b
2438   122A 26 2B 00      mov b, $2b
2439   122D B0            cmp a, b
2440   122E FD 71         seq ; ==
2441   1230 E4            pop a
2442   1231             ; END RELATIONAL
2443   1231 FD A8         sor a, b ; ||
2444   1233 E4            pop a
2445   1234 C0 00 00      cmp b, 0
2446   1237 C6 72 12      je _if39_exit
2447   123A             _if39_true:
2448   123A             ;; if (*str == '-') sign = -1; 
2449   123A             _if40_cond:
2450   123A FA 05 00      lea d, [bp + 5] ; $str
2451   123D 2A            mov b, [d]
2452   123E 74            mov d, b
2453   123F 32            mov bl, [d]
2454   1240 A7 00         mov bh, 0
2455   1242             ; START RELATIONAL
2456   1242 D7            push a
2457   1243 11            mov a, b
2458   1244 26 2D 00      mov b, $2d
2459   1247 B0            cmp a, b
2460   1248 FD 71         seq ; ==
2461   124A E4            pop a
2462   124B             ; END RELATIONAL
2463   124B C0 00 00      cmp b, 0
2464   124E C6 60 12      je _if40_exit
2465   1251             _if40_true:
2466   1251             ;; sign = -1; 
2467   1251 FA FD FF      lea d, [bp + -3] ; $sign
2468   1254 DA            push d
2469   1255 26 01 00      mov b, $1
2470   1258 FD 97         neg b
2471   125A E7            pop d
2472   125B FD 43         mov [d], b
2473   125D 0A 60 12      jmp _if40_exit
2474   1260             _if40_exit:
2475   1260             ;; str++; 
2476   1260 FA 05 00      lea d, [bp + 5] ; $str
2477   1263 2A            mov b, [d]
2478   1264 FD 79         mov g, b
2479   1266 FD 77         inc b
2480   1268 FA 05 00      lea d, [bp + 5] ; $str
2481   126B FD 43         mov [d], b
2482   126D FD 27         mov b, g
2483   126F 0A 72 12      jmp _if39_exit
2484   1272             _if39_exit:
2485   1272             ;; while (*str >= '0' && *str <= '9') { 
2486   1272             _while41_cond:
2487   1272 FA 05 00      lea d, [bp + 5] ; $str
2488   1275 2A            mov b, [d]
2489   1276 74            mov d, b
2490   1277 32            mov bl, [d]
2491   1278 A7 00         mov bh, 0
2492   127A             ; START RELATIONAL
2493   127A D7            push a
2494   127B 11            mov a, b
2495   127C 26 30 00      mov b, $30
2496   127F B0            cmp a, b
2497   1280 FD 80         sge ; >=
2498   1282 E4            pop a
2499   1283             ; END RELATIONAL
2500   1283 D7            push a
2501   1284 11            mov a, b
2502   1285 FA 05 00      lea d, [bp + 5] ; $str
2503   1288 2A            mov b, [d]
2504   1289 74            mov d, b
2505   128A 32            mov bl, [d]
2506   128B A7 00         mov bh, 0
2507   128D             ; START RELATIONAL
2508   128D D7            push a
2509   128E 11            mov a, b
2510   128F 26 39 00      mov b, $39
2511   1292 B0            cmp a, b
2512   1293 FD 74         sle ; <=
2513   1295 E4            pop a
2514   1296             ; END RELATIONAL
2515   1296 FD A7         sand a, b ; &&
2516   1298 E4            pop a
2517   1299 C0 00 00      cmp b, 0
2518   129C C6 DA 12      je _while41_exit
2519   129F             _while41_block:
2520   129F             ;; result = result * 10 + (*str - '0'); 
2521   129F FA FF FF      lea d, [bp + -1] ; $result
2522   12A2 DA            push d
2523   12A3 FA FF FF      lea d, [bp + -1] ; $result
2524   12A6 2A            mov b, [d]
2525   12A7             ; START FACTORS
2526   12A7 D7            push a
2527   12A8 11            mov a, b
2528   12A9 26 0A 00      mov b, $a
2529   12AC AC            mul a, b ; *
2530   12AD 11            mov a, b
2531   12AE 27            mov b, a
2532   12AF E4            pop a
2533   12B0             ; END FACTORS
2534   12B0             ; START TERMS
2535   12B0 D7            push a
2536   12B1 11            mov a, b
2537   12B2 FA 05 00      lea d, [bp + 5] ; $str
2538   12B5 2A            mov b, [d]
2539   12B6 74            mov d, b
2540   12B7 32            mov bl, [d]
2541   12B8 A7 00         mov bh, 0
2542   12BA             ; START TERMS
2543   12BA D7            push a
2544   12BB 11            mov a, b
2545   12BC 26 30 00      mov b, $30
2546   12BF 60            sub a, b
2547   12C0 27            mov b, a
2548   12C1 E4            pop a
2549   12C2             ; END TERMS
2550   12C2 54            add a, b
2551   12C3 27            mov b, a
2552   12C4 E4            pop a
2553   12C5             ; END TERMS
2554   12C5 E7            pop d
2555   12C6 FD 43         mov [d], b
2556   12C8             ;; str++; 
2557   12C8 FA 05 00      lea d, [bp + 5] ; $str
2558   12CB 2A            mov b, [d]
2559   12CC FD 79         mov g, b
2560   12CE FD 77         inc b
2561   12D0 FA 05 00      lea d, [bp + 5] ; $str
2562   12D3 FD 43         mov [d], b
2563   12D5 FD 27         mov b, g
2564   12D7 0A 72 12      jmp _while41_cond
2565   12DA             _while41_exit:
2566   12DA             ;; return sign * result; 
2567   12DA FA FD FF      lea d, [bp + -3] ; $sign
2568   12DD 2A            mov b, [d]
2569   12DE             ; START FACTORS
2570   12DE D7            push a
2571   12DF 11            mov a, b
2572   12E0 FA FF FF      lea d, [bp + -1] ; $result
2573   12E3 2A            mov b, [d]
2574   12E4 AC            mul a, b ; *
2575   12E5 11            mov a, b
2576   12E6 27            mov b, a
2577   12E7 E4            pop a
2578   12E8             ; END FACTORS
2579   12E8 F9            leave
2580   12E9 09            ret
2581   12EA             
2582   12EA             gets:
2583   12EA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2584   12ED             
2585   12ED             ; --- BEGIN INLINE ASM BLOCK
2586   12ED FA 05 00      lea d, [bp + 5] ; $s
2587   12F0 15            mov a, [d]
2588   12F1 3C            mov d, a
2589   12F2 07 69 17      call _gets
2590   12F5             ; --- END INLINE ASM BLOCK
2591   12F5             
2592   12F5             ;; return strlen(s); 
2593   12F5 FA 05 00      lea d, [bp + 5] ; $s
2594   12F8 2A            mov b, [d]
2595   12F9 FD AB         swp b
2596   12FB D8            push b
2597   12FC 07 A0 0E      call strlen
2598   12FF 51 02 00      add sp, 2
2599   1302 F9            leave
2600   1303 09            ret
2601   1304             
2602   1304             prints:
2603   1304 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2604   1307             ; $digits 
2605   1307             ; $i 
2606   1307 10 00 00      mov a, $0
2607   130A 45 FA FF      mov [bp + -6], a
2608   130D 52 07 00      sub sp, 7
2609   1310             
2610   1310             ;; if (num < 0) { 
2611   1310             _if42_cond:
2612   1310 FA 05 00      lea d, [bp + 5] ; $num
2613   1313 2A            mov b, [d]
2614   1314             ; START RELATIONAL
2615   1314 D7            push a
2616   1315 11            mov a, b
2617   1316 26 00 00      mov b, $0
2618   1319 B0            cmp a, b
2619   131A FD 73         slt ; < 
2620   131C E4            pop a
2621   131D             ; END RELATIONAL
2622   131D C0 00 00      cmp b, 0
2623   1320 C6 3D 13      je _if42_else
2624   1323             _if42_true:
2625   1323             ;; putchar('-'); 
2626   1323 26 2D 00      mov b, $2d
2627   1326 DD            push bl
2628   1327 07 E5 14      call putchar
2629   132A 51 01 00      add sp, 1
2630   132D             ;; num = -num; 
2631   132D FA 05 00      lea d, [bp + 5] ; $num
2632   1330 DA            push d
2633   1331 FA 05 00      lea d, [bp + 5] ; $num
2634   1334 2A            mov b, [d]
2635   1335 FD 97         neg b
2636   1337 E7            pop d
2637   1338 FD 43         mov [d], b
2638   133A 0A 5F 13      jmp _if42_exit
2639   133D             _if42_else:
2640   133D             ;; if (num == 0) { 
2641   133D             _if43_cond:
2642   133D FA 05 00      lea d, [bp + 5] ; $num
2643   1340 2A            mov b, [d]
2644   1341             ; START RELATIONAL
2645   1341 D7            push a
2646   1342 11            mov a, b
2647   1343 26 00 00      mov b, $0
2648   1346 B0            cmp a, b
2649   1347 FD 71         seq ; ==
2650   1349 E4            pop a
2651   134A             ; END RELATIONAL
2652   134A C0 00 00      cmp b, 0
2653   134D C6 5F 13      je _if43_exit
2654   1350             _if43_true:
2655   1350             ;; putchar('0'); 
2656   1350 26 30 00      mov b, $30
2657   1353 DD            push bl
2658   1354 07 E5 14      call putchar
2659   1357 51 01 00      add sp, 1
2660   135A             ;; return; 
2661   135A F9            leave
2662   135B 09            ret
2663   135C 0A 5F 13      jmp _if43_exit
2664   135F             _if43_exit:
2665   135F             _if42_exit:
2666   135F             ;; while (num > 0) { 
2667   135F             _while44_cond:
2668   135F FA 05 00      lea d, [bp + 5] ; $num
2669   1362 2A            mov b, [d]
2670   1363             ; START RELATIONAL
2671   1363 D7            push a
2672   1364 11            mov a, b
2673   1365 26 00 00      mov b, $0
2674   1368 B0            cmp a, b
2675   1369 FD 7F         sgt ; >
2676   136B E4            pop a
2677   136C             ; END RELATIONAL
2678   136C C0 00 00      cmp b, 0
2679   136F C6 BC 13      je _while44_exit
2680   1372             _while44_block:
2681   1372             ;; digits[i] = '0' + (num % 10); 
2682   1372 FA FC FF      lea d, [bp + -4] ; $digits
2683   1375 D7            push a
2684   1376 DA            push d
2685   1377 FA FA FF      lea d, [bp + -6] ; $i
2686   137A 2A            mov b, [d]
2687   137B E7            pop d
2688   137C 5A            add d, b
2689   137D E4            pop a
2690   137E DA            push d
2691   137F 26 30 00      mov b, $30
2692   1382             ; START TERMS
2693   1382 D7            push a
2694   1383 11            mov a, b
2695   1384 FA 05 00      lea d, [bp + 5] ; $num
2696   1387 2A            mov b, [d]
2697   1388             ; START FACTORS
2698   1388 D7            push a
2699   1389 11            mov a, b
2700   138A 26 0A 00      mov b, $a
2701   138D AE            div a, b ; 
2702   138E 11            mov a, b
2703   138F 27            mov b, a
2704   1390 E4            pop a
2705   1391             ; END FACTORS
2706   1391 54            add a, b
2707   1392 27            mov b, a
2708   1393 E4            pop a
2709   1394             ; END TERMS
2710   1394 E7            pop d
2711   1395 FD 3E         mov [d], bl
2712   1397             ;; num = num / 10; 
2713   1397 FA 05 00      lea d, [bp + 5] ; $num
2714   139A DA            push d
2715   139B FA 05 00      lea d, [bp + 5] ; $num
2716   139E 2A            mov b, [d]
2717   139F             ; START FACTORS
2718   139F D7            push a
2719   13A0 11            mov a, b
2720   13A1 26 0A 00      mov b, $a
2721   13A4 AE            div a, b
2722   13A5 27            mov b, a
2723   13A6 E4            pop a
2724   13A7             ; END FACTORS
2725   13A7 E7            pop d
2726   13A8 FD 43         mov [d], b
2727   13AA             ;; i++; 
2728   13AA FA FA FF      lea d, [bp + -6] ; $i
2729   13AD 2A            mov b, [d]
2730   13AE FD 79         mov g, b
2731   13B0 FD 77         inc b
2732   13B2 FA FA FF      lea d, [bp + -6] ; $i
2733   13B5 FD 43         mov [d], b
2734   13B7 FD 27         mov b, g
2735   13B9 0A 5F 13      jmp _while44_cond
2736   13BC             _while44_exit:
2737   13BC             ;; while (i > 0) { 
2738   13BC             _while45_cond:
2739   13BC FA FA FF      lea d, [bp + -6] ; $i
2740   13BF 2A            mov b, [d]
2741   13C0             ; START RELATIONAL
2742   13C0 D7            push a
2743   13C1 11            mov a, b
2744   13C2 26 00 00      mov b, $0
2745   13C5 B0            cmp a, b
2746   13C6 FD 7F         sgt ; >
2747   13C8 E4            pop a
2748   13C9             ; END RELATIONAL
2749   13C9 C0 00 00      cmp b, 0
2750   13CC C6 F7 13      je _while45_exit
2751   13CF             _while45_block:
2752   13CF             ;; i--; 
2753   13CF FA FA FF      lea d, [bp + -6] ; $i
2754   13D2 2A            mov b, [d]
2755   13D3 FD 79         mov g, b
2756   13D5 FD 7D         dec b
2757   13D7 FA FA FF      lea d, [bp + -6] ; $i
2758   13DA FD 43         mov [d], b
2759   13DC FD 27         mov b, g
2760   13DE             ;; putchar(digits[i]); 
2761   13DE FA FC FF      lea d, [bp + -4] ; $digits
2762   13E1 D7            push a
2763   13E2 DA            push d
2764   13E3 FA FA FF      lea d, [bp + -6] ; $i
2765   13E6 2A            mov b, [d]
2766   13E7 E7            pop d
2767   13E8 5A            add d, b
2768   13E9 E4            pop a
2769   13EA 32            mov bl, [d]
2770   13EB A7 00         mov bh, 0
2771   13ED DD            push bl
2772   13EE 07 E5 14      call putchar
2773   13F1 51 01 00      add sp, 1
2774   13F4 0A BC 13      jmp _while45_cond
2775   13F7             _while45_exit:
2776   13F7 F9            leave
2777   13F8 09            ret
2778   13F9             
2779   13F9             printu:
2780   13F9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2781   13FC             ; $digits 
2782   13FC             ; $i 
2783   13FC 52 07 00      sub sp, 7
2784   13FF             
2785   13FF             ;; i = 0; 
2786   13FF FA FA FF      lea d, [bp + -6] ; $i
2787   1402 DA            push d
2788   1403 26 00 00      mov b, $0
2789   1406 E7            pop d
2790   1407 FD 43         mov [d], b
2791   1409             ;; if(num == 0){ 
2792   1409             _if46_cond:
2793   1409 FA 05 00      lea d, [bp + 5] ; $num
2794   140C 2A            mov b, [d]
2795   140D             ; START RELATIONAL
2796   140D D7            push a
2797   140E 11            mov a, b
2798   140F 26 00 00      mov b, $0
2799   1412 B0            cmp a, b
2800   1413 FD 71         seq ; ==
2801   1415 E4            pop a
2802   1416             ; END RELATIONAL
2803   1416 C0 00 00      cmp b, 0
2804   1419 C6 2B 14      je _if46_exit
2805   141C             _if46_true:
2806   141C             ;; putchar('0'); 
2807   141C 26 30 00      mov b, $30
2808   141F DD            push bl
2809   1420 07 E5 14      call putchar
2810   1423 51 01 00      add sp, 1
2811   1426             ;; return; 
2812   1426 F9            leave
2813   1427 09            ret
2814   1428 0A 2B 14      jmp _if46_exit
2815   142B             _if46_exit:
2816   142B             ;; while (num > 0) { 
2817   142B             _while47_cond:
2818   142B FA 05 00      lea d, [bp + 5] ; $num
2819   142E 2A            mov b, [d]
2820   142F             ; START RELATIONAL
2821   142F D7            push a
2822   1430 11            mov a, b
2823   1431 26 00 00      mov b, $0
2824   1434 B0            cmp a, b
2825   1435 FD 81         sgu ; > (unsigned)
2826   1437 E4            pop a
2827   1438             ; END RELATIONAL
2828   1438 C0 00 00      cmp b, 0
2829   143B C6 88 14      je _while47_exit
2830   143E             _while47_block:
2831   143E             ;; digits[i] = '0' + (num % 10); 
2832   143E FA FC FF      lea d, [bp + -4] ; $digits
2833   1441 D7            push a
2834   1442 DA            push d
2835   1443 FA FA FF      lea d, [bp + -6] ; $i
2836   1446 2A            mov b, [d]
2837   1447 E7            pop d
2838   1448 5A            add d, b
2839   1449 E4            pop a
2840   144A DA            push d
2841   144B 26 30 00      mov b, $30
2842   144E             ; START TERMS
2843   144E D7            push a
2844   144F 11            mov a, b
2845   1450 FA 05 00      lea d, [bp + 5] ; $num
2846   1453 2A            mov b, [d]
2847   1454             ; START FACTORS
2848   1454 D7            push a
2849   1455 11            mov a, b
2850   1456 26 0A 00      mov b, $a
2851   1459 AE            div a, b ; 
2852   145A 11            mov a, b
2853   145B 27            mov b, a
2854   145C E4            pop a
2855   145D             ; END FACTORS
2856   145D 54            add a, b
2857   145E 27            mov b, a
2858   145F E4            pop a
2859   1460             ; END TERMS
2860   1460 E7            pop d
2861   1461 FD 3E         mov [d], bl
2862   1463             ;; num = num / 10; 
2863   1463 FA 05 00      lea d, [bp + 5] ; $num
2864   1466 DA            push d
2865   1467 FA 05 00      lea d, [bp + 5] ; $num
2866   146A 2A            mov b, [d]
2867   146B             ; START FACTORS
2868   146B D7            push a
2869   146C 11            mov a, b
2870   146D 26 0A 00      mov b, $a
2871   1470 AE            div a, b
2872   1471 27            mov b, a
2873   1472 E4            pop a
2874   1473             ; END FACTORS
2875   1473 E7            pop d
2876   1474 FD 43         mov [d], b
2877   1476             ;; i++; 
2878   1476 FA FA FF      lea d, [bp + -6] ; $i
2879   1479 2A            mov b, [d]
2880   147A FD 79         mov g, b
2881   147C FD 77         inc b
2882   147E FA FA FF      lea d, [bp + -6] ; $i
2883   1481 FD 43         mov [d], b
2884   1483 FD 27         mov b, g
2885   1485 0A 2B 14      jmp _while47_cond
2886   1488             _while47_exit:
2887   1488             ;; while (i > 0) { 
2888   1488             _while48_cond:
2889   1488 FA FA FF      lea d, [bp + -6] ; $i
2890   148B 2A            mov b, [d]
2891   148C             ; START RELATIONAL
2892   148C D7            push a
2893   148D 11            mov a, b
2894   148E 26 00 00      mov b, $0
2895   1491 B0            cmp a, b
2896   1492 FD 7F         sgt ; >
2897   1494 E4            pop a
2898   1495             ; END RELATIONAL
2899   1495 C0 00 00      cmp b, 0
2900   1498 C6 C3 14      je _while48_exit
2901   149B             _while48_block:
2902   149B             ;; i--; 
2903   149B FA FA FF      lea d, [bp + -6] ; $i
2904   149E 2A            mov b, [d]
2905   149F FD 79         mov g, b
2906   14A1 FD 7D         dec b
2907   14A3 FA FA FF      lea d, [bp + -6] ; $i
2908   14A6 FD 43         mov [d], b
2909   14A8 FD 27         mov b, g
2910   14AA             ;; putchar(digits[i]); 
2911   14AA FA FC FF      lea d, [bp + -4] ; $digits
2912   14AD D7            push a
2913   14AE DA            push d
2914   14AF FA FA FF      lea d, [bp + -6] ; $i
2915   14B2 2A            mov b, [d]
2916   14B3 E7            pop d
2917   14B4 5A            add d, b
2918   14B5 E4            pop a
2919   14B6 32            mov bl, [d]
2920   14B7 A7 00         mov bh, 0
2921   14B9 DD            push bl
2922   14BA 07 E5 14      call putchar
2923   14BD 51 01 00      add sp, 1
2924   14C0 0A 88 14      jmp _while48_cond
2925   14C3             _while48_exit:
2926   14C3 F9            leave
2927   14C4 09            ret
2928   14C5             
2929   14C5             rand:
2930   14C5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2931   14C8             ; $sec 
2932   14C8 52 01 00      sub sp, 1
2933   14CB             
2934   14CB             
2935   14CB             ; --- BEGIN INLINE ASM BLOCK
2936   14CB 19 00         mov al, 0
2937   14CD 05 01         syscall sys_rtc					
2938   14CF 1A            mov al, ah
2939   14D0 FA 00 00      lea d, [bp + 0] ; $sec
2940   14D3 1E            mov al, [d]
2941   14D4             ; --- END INLINE ASM BLOCK
2942   14D4             
2943   14D4             ;; return sec; 
2944   14D4 FA 00 00      lea d, [bp + 0] ; $sec
2945   14D7 32            mov bl, [d]
2946   14D8 A7 00         mov bh, 0
2947   14DA F9            leave
2948   14DB 09            ret
2949   14DC             
2950   14DC             date:
2951   14DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2952   14DF             
2953   14DF             ; --- BEGIN INLINE ASM BLOCK
2954   14DF 19 00         mov al, 0 
2955   14E1 05 07         syscall sys_datetime
2956   14E3             ; --- END INLINE ASM BLOCK
2957   14E3             
2958   14E3 F9            leave
2959   14E4 09            ret
2960   14E5             
2961   14E5             putchar:
2962   14E5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2963   14E8             
2964   14E8             ; --- BEGIN INLINE ASM BLOCK
2965   14E8 FA 05 00      lea d, [bp + 5] ; $c
2966   14EB 1E            mov al, [d]
2967   14EC 23            mov ah, al
2968   14ED 07 62 17      call _putchar
2969   14F0             ; --- END INLINE ASM BLOCK
2970   14F0             
2971   14F0 F9            leave
2972   14F1 09            ret
2973   14F2             
2974   14F2             getchar:
2975   14F2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2976   14F5             ; $c 
2977   14F5 52 01 00      sub sp, 1
2978   14F8             
2979   14F8             
2980   14F8             ; --- BEGIN INLINE ASM BLOCK
2981   14F8 07 5B 17      call getch
2982   14FB 1A            mov al, ah
2983   14FC FA 00 00      lea d, [bp + 0] ; $c
2984   14FF 3E            mov [d], al
2985   1500             ; --- END INLINE ASM BLOCK
2986   1500             
2987   1500             ;; return c; 
2988   1500 FA 00 00      lea d, [bp + 0] ; $c
2989   1503 32            mov bl, [d]
2990   1504 A7 00         mov bh, 0
2991   1506 F9            leave
2992   1507 09            ret
2993   1508             
2994   1508             scann:
2995   1508 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2996   150B             ; $m 
2997   150B 52 02 00      sub sp, 2
2998   150E             
2999   150E             
3000   150E             ; --- BEGIN INLINE ASM BLOCK
3001   150E 07 A6 19      call scan_u16d
3002   1511 FA FF FF      lea d, [bp + -1] ; $m
3003   1514 43            mov [d], a
3004   1515             ; --- END INLINE ASM BLOCK
3005   1515             
3006   1515             ;; return m; 
3007   1515 FA FF FF      lea d, [bp + -1] ; $m
3008   1518 2A            mov b, [d]
3009   1519 F9            leave
3010   151A 09            ret
3011   151B             
3012   151B             puts:
3013   151B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3014   151E             
3015   151E             ; --- BEGIN INLINE ASM BLOCK
3016   151E FA 05 00      lea d, [bp + 5] ; $s
3017   1521 15            mov a, [d]
3018   1522 3C            mov d, a
3019   1523 07 AC 18      call _puts
3020   1526 10 00 0A      mov a, $0A00
3021   1529 05 03         syscall sys_io
3022   152B             ; --- END INLINE ASM BLOCK
3023   152B             
3024   152B F9            leave
3025   152C 09            ret
3026   152D             
3027   152D             print:
3028   152D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3029   1530             
3030   1530             ; --- BEGIN INLINE ASM BLOCK
3031   1530 FA 05 00      lea d, [bp + 5] ; $s
3032   1533 FD 2A         mov d, [d]
3033   1535 07 AC 18      call _puts
3034   1538             ; --- END INLINE ASM BLOCK
3035   1538             
3036   1538 F9            leave
3037   1539 09            ret
3038   153A             
3039   153A             loadfile:
3040   153A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3041   153D             
3042   153D             ; --- BEGIN INLINE ASM BLOCK
3043   153D FA 07 00      lea d, [bp + 7] ; $destination
3044   1540 15            mov a, [d]
3045   1541 4F            mov di, a
3046   1542 FA 05 00      lea d, [bp + 5] ; $filename
3047   1545 FD 2A         mov d, [d]
3048   1547 19 14         mov al, 20
3049   1549 05 04         syscall sys_filesystem
3050   154B             ; --- END INLINE ASM BLOCK
3051   154B             
3052   154B F9            leave
3053   154C 09            ret
3054   154D             
3055   154D             create_file:
3056   154D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3057   1550 F9            leave
3058   1551 09            ret
3059   1552             
3060   1552             delete_file:
3061   1552 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3062   1555             
3063   1555             ; --- BEGIN INLINE ASM BLOCK
3064   1555 FA 05 00      lea d, [bp + 5] ; $filename
3065   1558 19 0A         mov al, 10
3066   155A 05 04         syscall sys_filesystem
3067   155C             ; --- END INLINE ASM BLOCK
3068   155C             
3069   155C F9            leave
3070   155D 09            ret
3071   155E             
3072   155E             fopen:
3073   155E F8 00 00      enter 0 ; (push bp; mov bp, sp)
3074   1561 F9            leave
3075   1562 09            ret
3076   1563             
3077   1563             fclose:
3078   1563 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3079   1566 F9            leave
3080   1567 09            ret
3081   1568             
3082   1568             alloc:
3083   1568 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3084   156B             ;; heap_top = heap_top + bytes; 
3085   156B 3B 0E 3C      mov d, _heap_top ; $heap_top
3086   156E DA            push d
3087   156F 3B 0E 3C      mov d, _heap_top ; $heap_top
3088   1572 2A            mov b, [d]
3089   1573             ; START TERMS
3090   1573 D7            push a
3091   1574 11            mov a, b
3092   1575 FA 05 00      lea d, [bp + 5] ; $bytes
3093   1578 2A            mov b, [d]
3094   1579 54            add a, b
3095   157A 27            mov b, a
3096   157B E4            pop a
3097   157C             ; END TERMS
3098   157C E7            pop d
3099   157D FD 43         mov [d], b
3100   157F             ;; return heap_top - bytes; 
3101   157F 3B 0E 3C      mov d, _heap_top ; $heap_top
3102   1582 2A            mov b, [d]
3103   1583             ; START TERMS
3104   1583 D7            push a
3105   1584 11            mov a, b
3106   1585 FA 05 00      lea d, [bp + 5] ; $bytes
3107   1588 2A            mov b, [d]
3108   1589 60            sub a, b
3109   158A 27            mov b, a
3110   158B E4            pop a
3111   158C             ; END TERMS
3112   158C F9            leave
3113   158D 09            ret
3114   158E             
3115   158E             free:
3116   158E F8 00 00      enter 0 ; (push bp; mov bp, sp)
3117   1591             ;; return heap_top = heap_top - bytes; 
3118   1591 3B 0E 3C      mov d, _heap_top ; $heap_top
3119   1594 DA            push d
3120   1595 3B 0E 3C      mov d, _heap_top ; $heap_top
3121   1598 2A            mov b, [d]
3122   1599             ; START TERMS
3123   1599 D7            push a
3124   159A 11            mov a, b
3125   159B FA 05 00      lea d, [bp + 5] ; $bytes
3126   159E 2A            mov b, [d]
3127   159F 60            sub a, b
3128   15A0 27            mov b, a
3129   15A1 E4            pop a
3130   15A2             ; END TERMS
3131   15A2 E7            pop d
3132   15A3 FD 43         mov [d], b
3133   15A5 F9            leave
3134   15A6 09            ret
3135   15A7             
3136   15A7             exit:
3137   15A7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3138   15AA             
3139   15AA             ; --- BEGIN INLINE ASM BLOCK
3140   15AA 05 0B         syscall sys_terminate_proc
3141   15AC             ; --- END INLINE ASM BLOCK
3142   15AC             
3143   15AC F9            leave
3144   15AD 09            ret
3145   15AE             
3146   15AE             load_hex:
3147   15AE F8 00 00      enter 0 ; (push bp; mov bp, sp)
3148   15B1             ; $temp 
3149   15B1 52 02 00      sub sp, 2
3150   15B4             
3151   15B4             ;; temp = alloc(32768); 
3152   15B4 FA FF FF      lea d, [bp + -1] ; $temp
3153   15B7 DA            push d
3154   15B8 26 00 80      mov b, $8000
3155   15BB FD AB         swp b
3156   15BD D8            push b
3157   15BE 07 68 15      call alloc
3158   15C1 51 02 00      add sp, 2
3159   15C4 E7            pop d
3160   15C5 FD 43         mov [d], b
3161   15C7             
3162   15C7             ; --- BEGIN INLINE ASM BLOCK
3163   15C7               
3164   15C7               
3165   15C7               
3166   15C7               
3167   15C7               
3168   15C7             _load_hex:
3169   15C7 D7            push a
3170   15C8 D8            push b
3171   15C9 DA            push d
3172   15CA E2            push si
3173   15CB E3            push di
3174   15CC 52 00 80      sub sp, $8000      
3175   15CF 38 00 00      mov c, 0
3176   15D2 48            mov a, sp
3177   15D3 77            inc a
3178   15D4 3C            mov d, a          
3179   15D5 07 69 17      call _gets        
3180   15D8 4D            mov si, a
3181   15D9             __load_hex_loop:
3182   15D9 F6            lodsb             
3183   15DA B9 00         cmp al, 0         
3184   15DC C6 EA 15      jz __load_hex_ret
3185   15DF 36            mov bh, al
3186   15E0 F6            lodsb
3187   15E1 2F            mov bl, al
3188   15E2 07 1F 17      call _atoi        
3189   15E5 F7            stosb             
3190   15E6 78            inc c
3191   15E7 0A D9 15      jmp __load_hex_loop
3192   15EA             __load_hex_ret:
3193   15EA 51 00 80      add sp, $8000
3194   15ED F0            pop di
3195   15EE EF            pop si
3196   15EF E7            pop d
3197   15F0 E5            pop b
3198   15F1 E4            pop a
3199   15F2             ; --- END INLINE ASM BLOCK
3200   15F2             
3201   15F2 F9            leave
3202   15F3 09            ret
3203   15F4             
3204   15F4             getparam:
3205   15F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3206   15F7             ; $data 
3207   15F7 52 01 00      sub sp, 1
3208   15FA             
3209   15FA             
3210   15FA             ; --- BEGIN INLINE ASM BLOCK
3211   15FA 19 04         mov al, 4
3212   15FC FA 05 00      lea d, [bp + 5] ; $address
3213   15FF FD 2A         mov d, [d]
3214   1601 05 0C         syscall sys_system
3215   1603 FA 00 00      lea d, [bp + 0] ; $data
3216   1606 FD 3E         mov [d], bl
3217   1608             ; --- END INLINE ASM BLOCK
3218   1608             
3219   1608             ;; return data; 
3220   1608 FA 00 00      lea d, [bp + 0] ; $data
3221   160B 32            mov bl, [d]
3222   160C A7 00         mov bh, 0
3223   160E F9            leave
3224   160F 09            ret
3225   1610             
3226   1610             clear:
3227   1610 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3228   1613             ;; print("\033[2J\033[H"); 
3229   1613 26 AD 3B      mov b, __s11 ; "\033[2J\033[H"
3230   1616 FD AB         swp b
3231   1618 D8            push b
3232   1619 07 2D 15      call print
3233   161C 51 02 00      add sp, 2
3234   161F F9            leave
3235   1620 09            ret
3236   1621             
3237   1621             printun:
3238   1621 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3239   1624             ;; print(prompt); 
3240   1624 FA 05 00      lea d, [bp + 5] ; $prompt
3241   1627 2A            mov b, [d]
3242   1628 FD AB         swp b
3243   162A D8            push b
3244   162B 07 2D 15      call print
3245   162E 51 02 00      add sp, 2
3246   1631             ;; printu(n); 
3247   1631 FA 07 00      lea d, [bp + 7] ; $n
3248   1634 2A            mov b, [d]
3249   1635 FD AB         swp b
3250   1637 D8            push b
3251   1638 07 F9 13      call printu
3252   163B 51 02 00      add sp, 2
3253   163E             ;; print("\n"); 
3254   163E 26 B5 3B      mov b, __s12 ; "\n"
3255   1641 FD AB         swp b
3256   1643 D8            push b
3257   1644 07 2D 15      call print
3258   1647 51 02 00      add sp, 2
3259   164A F9            leave
3260   164B 09            ret
3261   164C             
3262   164C             printsn:
3263   164C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3264   164F             ;; print(prompt); 
3265   164F FA 05 00      lea d, [bp + 5] ; $prompt
3266   1652 2A            mov b, [d]
3267   1653 FD AB         swp b
3268   1655 D8            push b
3269   1656 07 2D 15      call print
3270   1659 51 02 00      add sp, 2
3271   165C             ;; prints(n); 
3272   165C FA 07 00      lea d, [bp + 7] ; $n
3273   165F 2A            mov b, [d]
3274   1660 FD AB         swp b
3275   1662 D8            push b
3276   1663 07 04 13      call prints
3277   1666 51 02 00      add sp, 2
3278   1669             ;; print("\n"); 
3279   1669 26 B5 3B      mov b, __s12 ; "\n"
3280   166C FD AB         swp b
3281   166E D8            push b
3282   166F 07 2D 15      call print
3283   1672 51 02 00      add sp, 2
3284   1675 F9            leave
3285   1676 09            ret
3286   1677             
3287   1677             include_stdio_asm:
3288   1677 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3289   167A             
3290   167A             ; --- BEGIN INLINE ASM BLOCK
3291   167A             .include "lib/stdio.asm"
0001+  167A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  167A             ; stdio.s
0003+  167A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  167A             .include "lib/string.asm"
0001++ 167A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 167A             ; string.s
0003++ 167A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 167A             
0005++ 167A             
0006++ 167A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 167A             ; _strrev
0008++ 167A             ; reverse a string
0009++ 167A             ; D = string address
0010++ 167A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 167A             ; 01234
0012++ 167A             _strrev:
0013++ 167A 4B          	pusha
0014++ 167B 07 C1 16    	call _strlen	; length in C
0015++ 167E 12          	mov a, c
0016++ 167F AF 01 00    	cmp a, 1
0017++ 1682 D0 9C 16    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1685 7D          	dec a
0019++ 1686 FD 4E       	mov si, d	; beginning of string
0020++ 1688 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 168A 59          	add d, a	; end of string
0022++ 168B 12          	mov a, c
0023++ 168C FD 9B       	shr a		; divide by 2
0024++ 168E 39          	mov c, a	; C now counts the steps
0025++ 168F             _strrev_L0:
0026++ 168F 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1690 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1691 3E          	mov [d], al	; store left char into right side
0029++ 1692 1B          	mov al, bl
0030++ 1693 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1694 7E          	dec c
0032++ 1695 7F          	dec d
0033++ 1696 C2 00 00    	cmp c, 0
0034++ 1699 C7 8F 16    	jne _strrev_L0
0035++ 169C             _strrev_end:
0036++ 169C 4C          	popa
0037++ 169D 09          	ret
0038++ 169E             	
0039++ 169E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 169E             ; _strchr
0041++ 169E             ; search string in D for char in AL
0042++ 169E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 169E             _strchr:
0044++ 169E             _strchr_L0:
0045++ 169E 32          	mov bl, [d]
0046++ 169F C1 00       	cmp bl, 0
0047++ 16A1 C6 AC 16    	je _strchr_end
0048++ 16A4 BA          	cmp al, bl
0049++ 16A5 C6 AC 16    	je _strchr_end
0050++ 16A8 79          	inc d
0051++ 16A9 0A 9E 16    	jmp _strchr_L0
0052++ 16AC             _strchr_end:
0053++ 16AC 1B          	mov al, bl
0054++ 16AD 09          	ret
0055++ 16AE             
0056++ 16AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 16AE             ; _strstr
0058++ 16AE             ; find sub-string
0059++ 16AE             ; str1 in SI
0060++ 16AE             ; str2 in DI
0061++ 16AE             ; SI points to end of source string
0062++ 16AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 16AE             _strstr:
0064++ 16AE DB          	push al
0065++ 16AF DA          	push d
0066++ 16B0 E3          	push di
0067++ 16B1             _strstr_loop:
0068++ 16B1 F3          	cmpsb					; compare a byte of the strings
0069++ 16B2 C7 BD 16    	jne _strstr_ret
0070++ 16B5 FC 00 00    	lea d, [di + 0]
0071++ 16B8 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 16BA C7 B1 16    	jne _strstr_loop				; equal chars but not at end
0073++ 16BD             _strstr_ret:
0074++ 16BD F0          	pop di
0075++ 16BE E7          	pop d
0076++ 16BF E8          	pop al
0077++ 16C0 09          	ret
0078++ 16C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 16C1             ; length of null terminated string
0080++ 16C1             ; result in C
0081++ 16C1             ; pointer in D
0082++ 16C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 16C1             _strlen:
0084++ 16C1 DA          	push d
0085++ 16C2 38 00 00    	mov c, 0
0086++ 16C5             _strlen_L1:
0087++ 16C5 BD 00       	cmp byte [d], 0
0088++ 16C7 C6 CF 16    	je _strlen_ret
0089++ 16CA 79          	inc d
0090++ 16CB 78          	inc c
0091++ 16CC 0A C5 16    	jmp _strlen_L1
0092++ 16CF             _strlen_ret:
0093++ 16CF E7          	pop d
0094++ 16D0 09          	ret
0095++ 16D1             
0096++ 16D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 16D1             ; STRCMP
0098++ 16D1             ; compare two strings
0099++ 16D1             ; str1 in SI
0100++ 16D1             ; str2 in DI
0101++ 16D1             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 16D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 16D1             _strcmp:
0104++ 16D1 DB          	push al
0105++ 16D2 DA          	push d
0106++ 16D3 E3          	push di
0107++ 16D4 E2          	push si
0108++ 16D5             _strcmp_loop:
0109++ 16D5 F3          	cmpsb					; compare a byte of the strings
0110++ 16D6 C7 E1 16    	jne _strcmp_ret
0111++ 16D9 FB FF FF    	lea d, [si +- 1]
0112++ 16DC BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 16DE C7 D5 16    	jne _strcmp_loop				; equal chars but not at end
0114++ 16E1             _strcmp_ret:
0115++ 16E1 EF          	pop si
0116++ 16E2 F0          	pop di
0117++ 16E3 E7          	pop d
0118++ 16E4 E8          	pop al
0119++ 16E5 09          	ret
0120++ 16E6             
0121++ 16E6             
0122++ 16E6             ; STRCPY
0123++ 16E6             ; copy null terminated string from SI to DI
0124++ 16E6             ; source in SI
0125++ 16E6             ; destination in DI
0126++ 16E6             _strcpy:
0127++ 16E6 E2          	push si
0128++ 16E7 E3          	push di
0129++ 16E8 DB          	push al
0130++ 16E9             _strcpy_L1:
0131++ 16E9 F6          	lodsb
0132++ 16EA F7          	stosb
0133++ 16EB B9 00       	cmp al, 0
0134++ 16ED C7 E9 16    	jne _strcpy_L1
0135++ 16F0             _strcpy_end:
0136++ 16F0 E8          	pop al
0137++ 16F1 F0          	pop di
0138++ 16F2 EF          	pop si
0139++ 16F3 09          	ret
0140++ 16F4             
0141++ 16F4             ; STRCAT
0142++ 16F4             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 16F4             ; source in SI
0144++ 16F4             ; destination in DI
0145++ 16F4             _strcat:
0146++ 16F4 E2          	push si
0147++ 16F5 E3          	push di
0148++ 16F6 D7          	push a
0149++ 16F7 DA          	push d
0150++ 16F8 50          	mov a, di
0151++ 16F9 3C          	mov d, a
0152++ 16FA             _strcat_goto_end_L1:
0153++ 16FA BD 00       	cmp byte[d], 0
0154++ 16FC C6 03 17    	je _strcat_start
0155++ 16FF 79          	inc d
0156++ 1700 0A FA 16    	jmp _strcat_goto_end_L1
0157++ 1703             _strcat_start:
0158++ 1703 FD 50       	mov di, d
0159++ 1705             _strcat_L1:
0160++ 1705 F6          	lodsb
0161++ 1706 F7          	stosb
0162++ 1707 B9 00       	cmp al, 0
0163++ 1709 C7 05 17    	jne _strcat_L1
0164++ 170C             _strcat_end:
0165++ 170C E7          	pop d
0166++ 170D E4          	pop a
0167++ 170E F0          	pop di
0168++ 170F EF          	pop si
0169++ 1710 09          	ret
0170++ 1711             
0171++ 1711             
0005+  1711             
0006+  1711             
0007+  1711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  1711             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  1711             ; ASCII in BL
0010+  1711             ; result in AL
0011+  1711             ; ascii for F = 0100 0110
0012+  1711             ; ascii for 9 = 0011 1001
0013+  1711             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  1711             hex_ascii_encode:
0015+  1711 1B            mov al, bl
0016+  1712 93 40         test al, $40        ; test if letter or number
0017+  1714 C7 1A 17      jnz hex_letter
0018+  1717 87 0F         and al, $0F        ; get number
0019+  1719 09            ret
0020+  171A             hex_letter:
0021+  171A 87 0F         and al, $0F        ; get letter
0022+  171C 6A 09         add al, 9
0023+  171E 09            ret
0024+  171F             
0025+  171F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  171F             ; ATOI
0027+  171F             ; 2 letter hex string in B
0028+  171F             ; 8bit integer returned in AL
0029+  171F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  171F             _atoi:
0031+  171F D8            push b
0032+  1720 07 11 17      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  1723 30            mov bl, bh
0034+  1724 DB            push al          ; save a
0035+  1725 07 11 17      call hex_ascii_encode
0036+  1728 EA            pop bl  
0037+  1729 FD 9E 04      shl al, 4
0038+  172C 8C            or al, bl
0039+  172D E5            pop b
0040+  172E 09            ret  
0041+  172F             
0042+  172F             
0043+  172F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  172F             ; scanf
0045+  172F             ; no need for explanations!
0046+  172F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  172F             scanf:
0048+  172F 09            ret
0049+  1730             
0050+  1730             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  1730             ; ITOA
0052+  1730             ; 8bit value in BL
0053+  1730             ; 2 byte ASCII result in A
0054+  1730             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  1730             _itoa:
0056+  1730 DA            push d
0057+  1731 D8            push b
0058+  1732 A7 00         mov bh, 0
0059+  1734 FD A4 04      shr bl, 4  
0060+  1737 74            mov d, b
0061+  1738 1F E0 19      mov al, [d + s_hex_digits]
0062+  173B 23            mov ah, al
0063+  173C               
0064+  173C E5            pop b
0065+  173D D8            push b
0066+  173E A7 00         mov bh, 0
0067+  1740 FD 87 0F      and bl, $0F
0068+  1743 74            mov d, b
0069+  1744 1F E0 19      mov al, [d + s_hex_digits]
0070+  1747 E5            pop b
0071+  1748 E7            pop d
0072+  1749 09            ret
0073+  174A             
0074+  174A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  174A             ; HEX STRING TO BINARY
0076+  174A             ; di = destination address
0077+  174A             ; si = source
0078+  174A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  174A             _hex_to_int:
0080+  174A             _hex_to_int_L1:
0081+  174A F6            lodsb          ; load from [SI] to AL
0082+  174B B9 00         cmp al, 0        ; check if ASCII 0
0083+  174D C6 5A 17      jz _hex_to_int_ret
0084+  1750 36            mov bh, al
0085+  1751 F6            lodsb
0086+  1752 2F            mov bl, al
0087+  1753 07 1F 17      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  1756 F7            stosb          ; store AL to [DI]
0089+  1757 0A 4A 17      jmp _hex_to_int_L1
0090+  175A             _hex_to_int_ret:
0091+  175A 09            ret    
0092+  175B             
0093+  175B             
0094+  175B             
0095+  175B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  175B             ; GETCHAR
0097+  175B             ; char in ah
0098+  175B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  175B             getch:
0100+  175B DB            push al
0101+  175C             getch_retry:
0102+  175C 19 01         mov al, 1
0103+  175E 05 03         syscall sys_io      ; receive in AH
0104+  1760 E8            pop al
0105+  1761 09            ret
0106+  1762             
0107+  1762             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  1762             ; PUTCHAR
0109+  1762             ; char in ah
0110+  1762             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  1762             _putchar:
0112+  1762 D7            push a
0113+  1763 19 00         mov al, 0
0114+  1765 05 03         syscall sys_io      ; char in AH
0115+  1767 E4            pop a
0116+  1768 09            ret
0117+  1769             
0118+  1769             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  1769             ;; INPUT A STRING
0120+  1769             ;; terminates with null
0121+  1769             ;; pointer in D
0122+  1769             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  1769             _gets:
0124+  1769 D7            push a
0125+  176A DA            push d
0126+  176B             _gets_loop:
0127+  176B 19 01         mov al, 1
0128+  176D 05 03         syscall sys_io      ; receive in AH
0129+  176F B9 00         cmp al, 0        ; check error code (AL)
0130+  1771 C6 6B 17      je _gets_loop      ; if no char received, retry
0131+  1774             
0132+  1774 76 1B         cmp ah, 27
0133+  1776 C6 97 17      je _gets_ansi_esc
0134+  1779 76 0A         cmp ah, $0A        ; LF
0135+  177B C6 02 18      je _gets_end
0136+  177E 76 0D         cmp ah, $0D        ; CR
0137+  1780 C6 02 18      je _gets_end
0138+  1783 76 5C         cmp ah, $5C        ; '\\'
0139+  1785 C6 C3 17      je _gets_escape
0140+  1788               
0141+  1788 76 08         cmp ah, $08      ; check for backspace
0142+  178A C6 93 17      je _gets_backspace
0143+  178D             
0144+  178D 1A            mov al, ah
0145+  178E 3E            mov [d], al
0146+  178F 79            inc d
0147+  1790 0A 6B 17      jmp _gets_loop
0148+  1793             _gets_backspace:
0149+  1793 7F            dec d
0150+  1794 0A 6B 17      jmp _gets_loop
0151+  1797             _gets_ansi_esc:
0152+  1797 19 01         mov al, 1
0153+  1799 05 03         syscall sys_io        ; receive in AH without echo
0154+  179B B9 00         cmp al, 0          ; check error code (AL)
0155+  179D C6 97 17      je _gets_ansi_esc    ; if no char received, retry
0156+  17A0 76 5B         cmp ah, '['
0157+  17A2 C7 6B 17      jne _gets_loop
0158+  17A5             _gets_ansi_esc_2:
0159+  17A5 19 01         mov al, 1
0160+  17A7 05 03         syscall sys_io          ; receive in AH without echo
0161+  17A9 B9 00         cmp al, 0            ; check error code (AL)
0162+  17AB C6 A5 17      je _gets_ansi_esc_2  ; if no char received, retry
0163+  17AE 76 44         cmp ah, 'D'
0164+  17B0 C6 BB 17      je _gets_left_arrow
0165+  17B3 76 43         cmp ah, 'C'
0166+  17B5 C6 BF 17      je _gets_right_arrow
0167+  17B8 0A 6B 17      jmp _gets_loop
0168+  17BB             _gets_left_arrow:
0169+  17BB 7F            dec d
0170+  17BC 0A 6B 17      jmp _gets_loop
0171+  17BF             _gets_right_arrow:
0172+  17BF 79            inc d
0173+  17C0 0A 6B 17      jmp _gets_loop
0174+  17C3             _gets_escape:
0175+  17C3 19 01         mov al, 1
0176+  17C5 05 03         syscall sys_io      ; receive in AH
0177+  17C7 B9 00         cmp al, 0        ; check error code (AL)
0178+  17C9 C6 C3 17      je _gets_escape      ; if no char received, retry
0179+  17CC 76 6E         cmp ah, 'n'
0180+  17CE C6 ED 17      je _gets_LF
0181+  17D1 76 72         cmp ah, 'r'
0182+  17D3 C6 F4 17      je _gets_CR
0183+  17D6 76 30         cmp ah, '0'
0184+  17D8 C6 FB 17      je _gets_NULL
0185+  17DB 76 5C         cmp ah, $5C  ; '\'
0186+  17DD C6 E6 17      je _gets_slash
0187+  17E0 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  17E1 3E            mov [d], al
0189+  17E2 79            inc d
0190+  17E3 0A 6B 17      jmp _gets_loop
0191+  17E6             _gets_slash:
0192+  17E6 19 5C         mov al, $5C
0193+  17E8 3E            mov [d], al
0194+  17E9 79            inc d
0195+  17EA 0A 6B 17      jmp _gets_loop
0196+  17ED             _gets_LF:
0197+  17ED 19 0A         mov al, $0A
0198+  17EF 3E            mov [d], al
0199+  17F0 79            inc d
0200+  17F1 0A 6B 17      jmp _gets_loop
0201+  17F4             _gets_CR:
0202+  17F4 19 0D         mov al, $0D
0203+  17F6 3E            mov [d], al
0204+  17F7 79            inc d
0205+  17F8 0A 6B 17      jmp _gets_loop
0206+  17FB             _gets_NULL:
0207+  17FB 19 00         mov al, $00
0208+  17FD 3E            mov [d], al
0209+  17FE 79            inc d
0210+  17FF 0A 6B 17      jmp _gets_loop
0211+  1802             _gets_end:
0212+  1802 19 00         mov al, 0
0213+  1804 3E            mov [d], al        ; terminate string
0214+  1805 E7            pop d
0215+  1806 E4            pop a
0216+  1807 09            ret
0217+  1808             
0218+  1808             
0219+  1808             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  1808             ;; INPUT TEXT
0221+  1808             ;; terminated with CTRL+D
0222+  1808             ;; pointer in D
0223+  1808             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  1808             _gettxt:
0225+  1808 D7            push a
0226+  1809 DA            push d
0227+  180A             _gettxt_loop:
0228+  180A 19 01         mov al, 1
0229+  180C 05 03         syscall sys_io      ; receive in AH
0230+  180E B9 00         cmp al, 0        ; check error code (AL)
0231+  1810 C6 0A 18      je _gettxt_loop    ; if no char received, retry
0232+  1813 76 04         cmp ah, 4      ; EOT
0233+  1815 C6 53 18      je _gettxt_end
0234+  1818 76 08         cmp ah, $08      ; check for backspace
0235+  181A C6 4F 18      je _gettxt_backspace
0236+  181D 76 5C         cmp ah, $5C        ; '\'
0237+  181F C6 28 18      je _gettxt_escape
0238+  1822 1A            mov al, ah
0239+  1823 3E            mov [d], al
0240+  1824 79            inc d
0241+  1825 0A 0A 18      jmp _gettxt_loop
0242+  1828             _gettxt_escape:
0243+  1828 19 01         mov al, 1
0244+  182A 05 03         syscall sys_io      ; receive in AH
0245+  182C B9 00         cmp al, 0        ; check error code (AL)
0246+  182E C6 28 18      je _gettxt_escape    ; if no char received, retry
0247+  1831 76 6E         cmp ah, 'n'
0248+  1833 C6 41 18      je _gettxt_LF
0249+  1836 76 72         cmp ah, 'r'
0250+  1838 C6 48 18      je _gettxt_CR
0251+  183B 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  183C 3E            mov [d], al
0253+  183D 79            inc d
0254+  183E 0A 0A 18      jmp _gettxt_loop
0255+  1841             _gettxt_LF:
0256+  1841 19 0A         mov al, $0A
0257+  1843 3E            mov [d], al
0258+  1844 79            inc d
0259+  1845 0A 0A 18      jmp _gettxt_loop
0260+  1848             _gettxt_CR:
0261+  1848 19 0D         mov al, $0D
0262+  184A 3E            mov [d], al
0263+  184B 79            inc d
0264+  184C 0A 0A 18      jmp _gettxt_loop
0265+  184F             _gettxt_backspace:
0266+  184F 7F            dec d
0267+  1850 0A 0A 18      jmp _gettxt_loop
0268+  1853             _gettxt_end:
0269+  1853 19 00         mov al, 0
0270+  1855 3E            mov [d], al        ; terminate string
0271+  1856 E7            pop d
0272+  1857 E4            pop a
0273+  1858 09            ret
0274+  1859             
0275+  1859             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  1859             ; PRINT NEW LINE
0277+  1859             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  1859             printnl:
0279+  1859 D7            push a
0280+  185A 10 00 0A      mov a, $0A00
0281+  185D 05 03         syscall sys_io
0282+  185F 10 00 0D      mov a, $0D00
0283+  1862 05 03         syscall sys_io
0284+  1864 E4            pop a
0285+  1865 09            ret
0286+  1866             
0287+  1866             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  1866             ; _strtoint
0289+  1866             ; 4 digit hex string number in d
0290+  1866             ; integer returned in A
0291+  1866             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  1866             _strtointx:
0293+  1866 D8            push b
0294+  1867 32            mov bl, [d]
0295+  1868 37            mov bh, bl
0296+  1869 33 01 00      mov bl, [d + 1]
0297+  186C 07 1F 17      call _atoi        ; convert to int in AL
0298+  186F 23            mov ah, al        ; move to AH
0299+  1870 33 02 00      mov bl, [d + 2]
0300+  1873 37            mov bh, bl
0301+  1874 33 03 00      mov bl, [d + 3]
0302+  1877 07 1F 17      call _atoi        ; convert to int in AL
0303+  187A E5            pop b
0304+  187B 09            ret
0305+  187C             
0306+  187C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  187C             ; _strtoint
0308+  187C             ; 5 digit base10 string number in d
0309+  187C             ; integer returned in A
0310+  187C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  187C             _strtoint:
0312+  187C E2            push si
0313+  187D D8            push b
0314+  187E D9            push c
0315+  187F DA            push d
0316+  1880 07 C1 16      call _strlen      ; get string length in C
0317+  1883 7E            dec c
0318+  1884 FD 4E         mov si, d
0319+  1886 12            mov a, c
0320+  1887 FD 99         shl a
0321+  1889 3B F8 19      mov d, table_power
0322+  188C 59            add d, a
0323+  188D 38 00 00      mov c, 0
0324+  1890             _strtoint_L0:
0325+  1890 F6            lodsb      ; load ASCII to al
0326+  1891 B9 00         cmp al, 0
0327+  1893 C6 A6 18      je _strtoint_end
0328+  1896 6F 30         sub al, $30    ; make into integer
0329+  1898 22 00         mov ah, 0
0330+  189A 2A            mov b, [d]
0331+  189B AC            mul a, b      ; result in B since it fits in 16bits
0332+  189C 11            mov a, b
0333+  189D 28            mov b, c
0334+  189E 54            add a, b
0335+  189F 39            mov c, a
0336+  18A0 63 02 00      sub d, 2
0337+  18A3 0A 90 18      jmp _strtoint_L0
0338+  18A6             _strtoint_end:
0339+  18A6 12            mov a, c
0340+  18A7 E7            pop d
0341+  18A8 E6            pop c
0342+  18A9 E5            pop b
0343+  18AA EF            pop si
0344+  18AB 09            ret
0345+  18AC             
0346+  18AC             
0347+  18AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  18AC             ; PRINT NULL TERMINATED STRING
0349+  18AC             ; pointer in D
0350+  18AC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  18AC             _puts:
0352+  18AC D7            push a
0353+  18AD DA            push d
0354+  18AE             _puts_L1:
0355+  18AE 1E            mov al, [d]
0356+  18AF B9 00         cmp al, 0
0357+  18B1 C6 BD 18      jz _puts_END
0358+  18B4 23            mov ah, al
0359+  18B5 19 00         mov al, 0
0360+  18B7 05 03         syscall sys_io
0361+  18B9 79            inc d
0362+  18BA 0A AE 18      jmp _puts_L1
0363+  18BD             _puts_END:
0364+  18BD E7            pop d
0365+  18BE E4            pop a
0366+  18BF 09            ret
0367+  18C0             
0368+  18C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  18C0             ; PRINT N SIZE STRING
0370+  18C0             ; pointer in D
0371+  18C0             ; size in C
0372+  18C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  18C0             _putsn:
0374+  18C0 DB            push al
0375+  18C1 DA            push d
0376+  18C2 D9            push c
0377+  18C3             _putsn_L0:
0378+  18C3 1E            mov al, [d]
0379+  18C4 23            mov ah, al
0380+  18C5 19 00         mov al, 0
0381+  18C7 05 03         syscall sys_io
0382+  18C9 79            inc d
0383+  18CA 7E            dec c  
0384+  18CB C2 00 00      cmp c, 0
0385+  18CE C7 C3 18      jne _putsn_L0
0386+  18D1             _putsn_end:
0387+  18D1 E6            pop c
0388+  18D2 E7            pop d
0389+  18D3 E8            pop al
0390+  18D4 09            ret
0391+  18D5             
0392+  18D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  18D5             ; print 16bit decimal number
0394+  18D5             ; input number in A
0395+  18D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  18D5             print_u16d:
0397+  18D5 D7            push a
0398+  18D6 D8            push b
0399+  18D7 26 10 27      mov b, 10000
0400+  18DA AE            div a, b      ; get 10000's coeff.
0401+  18DB 07 FD 18      call print_number
0402+  18DE 11            mov a, b
0403+  18DF 26 E8 03      mov b, 1000
0404+  18E2 AE            div a, b      ; get 1000's coeff.
0405+  18E3 07 FD 18      call print_number
0406+  18E6 11            mov a, b
0407+  18E7 26 64 00      mov b, 100
0408+  18EA AE            div a, b
0409+  18EB 07 FD 18      call print_number
0410+  18EE 11            mov a, b
0411+  18EF 26 0A 00      mov b, 10
0412+  18F2 AE            div a, b
0413+  18F3 07 FD 18      call print_number
0414+  18F6 1B            mov al, bl      ; 1's coeff in bl
0415+  18F7 07 FD 18      call print_number
0416+  18FA E5            pop b
0417+  18FB E4            pop a
0418+  18FC 09            ret
0419+  18FD             
0420+  18FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  18FD             ; print AL
0422+  18FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  18FD             print_number:
0424+  18FD 6A 30         add al, $30
0425+  18FF 23            mov ah, al
0426+  1900 07 62 17      call _putchar
0427+  1903 09            ret
0428+  1904             
0429+  1904             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  1904             ; PRINT 16BIT HEX INTEGER
0431+  1904             ; integer value in reg B
0432+  1904             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  1904             print_u16x:
0434+  1904 D7            push a
0435+  1905 D8            push b
0436+  1906 DD            push bl
0437+  1907 30            mov bl, bh
0438+  1908 07 30 17      call _itoa        ; convert bh to char in A
0439+  190B 2F            mov bl, al        ; save al
0440+  190C 19 00         mov al, 0
0441+  190E 05 03         syscall sys_io        ; display AH
0442+  1910 24            mov ah, bl        ; retrieve al
0443+  1911 19 00         mov al, 0
0444+  1913 05 03         syscall sys_io        ; display AL
0445+  1915             
0446+  1915 EA            pop bl
0447+  1916 07 30 17      call _itoa        ; convert bh to char in A
0448+  1919 2F            mov bl, al        ; save al
0449+  191A 19 00         mov al, 0
0450+  191C 05 03         syscall sys_io        ; display AH
0451+  191E 24            mov ah, bl        ; retrieve al
0452+  191F 19 00         mov al, 0
0453+  1921 05 03         syscall sys_io        ; display AL
0454+  1923             
0455+  1923 E5            pop b
0456+  1924 E4            pop a
0457+  1925 09            ret
0458+  1926             
0459+  1926             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  1926             ; INPUT 16BIT HEX INTEGER
0461+  1926             ; read 16bit integer into A
0462+  1926             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  1926             scan_u16x:
0464+  1926 F8 10 00      enter 16
0465+  1929 D8            push b
0466+  192A DA            push d
0467+  192B             
0468+  192B FA F1 FF      lea d, [bp + -15]
0469+  192E 07 69 17      call _gets        ; get number
0470+  1931             
0471+  1931 32            mov bl, [d]
0472+  1932 37            mov bh, bl
0473+  1933 33 01 00      mov bl, [d + 1]
0474+  1936 07 1F 17      call _atoi        ; convert to int in AL
0475+  1939 23            mov ah, al        ; move to AH
0476+  193A             
0477+  193A 33 02 00      mov bl, [d + 2]
0478+  193D 37            mov bh, bl
0479+  193E 33 03 00      mov bl, [d + 3]
0480+  1941 07 1F 17      call _atoi        ; convert to int in AL
0481+  1944             
0482+  1944 E7            pop d
0483+  1945 E5            pop b
0484+  1946 F9            leave
0485+  1947 09            ret
0486+  1948             
0487+  1948             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  1948             ; PRINT 8bit HEX INTEGER
0489+  1948             ; integer value in reg bl
0490+  1948             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  1948             print_u8x:
0492+  1948 D7            push a
0493+  1949 DD            push bl
0494+  194A             
0495+  194A 07 30 17      call _itoa        ; convert bl to char in A
0496+  194D 2F            mov bl, al        ; save al
0497+  194E 19 00         mov al, 0
0498+  1950 05 03         syscall sys_io        ; display AH
0499+  1952 24            mov ah, bl        ; retrieve al
0500+  1953 19 00         mov al, 0
0501+  1955 05 03         syscall sys_io        ; display AL
0502+  1957             
0503+  1957 EA            pop bl
0504+  1958 E4            pop a
0505+  1959 09            ret
0506+  195A             
0507+  195A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  195A             ; print 8bit decimal unsigned number
0509+  195A             ; input number in AL
0510+  195A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  195A             print_u8d:
0512+  195A D7            push a
0513+  195B D8            push b
0514+  195C             
0515+  195C 22 00         mov ah, 0
0516+  195E 26 64 00      mov b, 100
0517+  1961 AE            div a, b
0518+  1962 D8            push b      ; save remainder
0519+  1963 B9 00         cmp al, 0
0520+  1965 C6 6F 19      je skip100
0521+  1968 6A 30         add al, $30
0522+  196A 23            mov ah, al
0523+  196B 19 00         mov al, 0
0524+  196D 05 03         syscall sys_io  ; print coeff
0525+  196F             skip100:
0526+  196F E4            pop a
0527+  1970 22 00         mov ah, 0
0528+  1972 26 0A 00      mov b, 10
0529+  1975 AE            div a, b
0530+  1976 D8            push b      ; save remainder
0531+  1977 B9 00         cmp al, 0
0532+  1979 C6 83 19      je skip10
0533+  197C 6A 30         add al, $30
0534+  197E 23            mov ah, al
0535+  197F 19 00         mov al, 0
0536+  1981 05 03         syscall sys_io  ; print coeff
0537+  1983             skip10:
0538+  1983 E4            pop a
0539+  1984 1B            mov al, bl
0540+  1985 6A 30         add al, $30
0541+  1987 23            mov ah, al
0542+  1988 19 00         mov al, 0
0543+  198A 05 03         syscall sys_io  ; print coeff
0544+  198C E5            pop b
0545+  198D E4            pop a
0546+  198E 09            ret
0547+  198F             
0548+  198F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  198F             ; INPUT 8BIT HEX INTEGER
0550+  198F             ; read 8bit integer into AL
0551+  198F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  198F             scan_u8x:
0553+  198F F8 04 00      enter 4
0554+  1992 D8            push b
0555+  1993 DA            push d
0556+  1994             
0557+  1994 FA FD FF      lea d, [bp + -3]
0558+  1997 07 69 17      call _gets        ; get number
0559+  199A             
0560+  199A 32            mov bl, [d]
0561+  199B 37            mov bh, bl
0562+  199C 33 01 00      mov bl, [d + 1]
0563+  199F 07 1F 17      call _atoi        ; convert to int in AL
0564+  19A2             
0565+  19A2 E7            pop d
0566+  19A3 E5            pop b
0567+  19A4 F9            leave
0568+  19A5 09            ret
0569+  19A6             
0570+  19A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  19A6             ; input decimal number
0572+  19A6             ; result in A
0573+  19A6             ; 655'\0'
0574+  19A6             ; low--------high
0575+  19A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  19A6             scan_u16d:
0577+  19A6 F8 08 00      enter 8
0578+  19A9 E2            push si
0579+  19AA D8            push b
0580+  19AB D9            push c
0581+  19AC DA            push d
0582+  19AD FA F9 FF      lea d, [bp +- 7]
0583+  19B0 07 69 17      call _gets
0584+  19B3 07 C1 16      call _strlen      ; get string length in C
0585+  19B6 7E            dec c
0586+  19B7 FD 4E         mov si, d
0587+  19B9 12            mov a, c
0588+  19BA FD 99         shl a
0589+  19BC 3B F8 19      mov d, table_power
0590+  19BF 59            add d, a
0591+  19C0 38 00 00      mov c, 0
0592+  19C3             mul_loop:
0593+  19C3 F6            lodsb      ; load ASCII to al
0594+  19C4 B9 00         cmp al, 0
0595+  19C6 C6 D9 19      je mul_exit
0596+  19C9 6F 30         sub al, $30    ; make into integer
0597+  19CB 22 00         mov ah, 0
0598+  19CD 2A            mov b, [d]
0599+  19CE AC            mul a, b      ; result in B since it fits in 16bits
0600+  19CF 11            mov a, b
0601+  19D0 28            mov b, c
0602+  19D1 54            add a, b
0603+  19D2 39            mov c, a
0604+  19D3 63 02 00      sub d, 2
0605+  19D6 0A C3 19      jmp mul_loop
0606+  19D9             mul_exit:
0607+  19D9 12            mov a, c
0608+  19DA E7            pop d
0609+  19DB E6            pop c
0610+  19DC E5            pop b
0611+  19DD EF            pop si
0612+  19DE F9            leave
0613+  19DF 09            ret
0614+  19E0             
0615+  19E0             
0616+  19E0 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  19E4 34 35 36 37 
0616+  19E8 38 39 41 42 
0616+  19EC 43 44 45 46 
0617+  19F0 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  19F4 1B 5B 48 00 
0618+  19F8             
0619+  19F8             table_power:
0620+  19F8 01 00         .dw 1
0621+  19FA 0A 00         .dw 10
0622+  19FC 64 00         .dw 100
0623+  19FE E8 03         .dw 1000
0624+  1A00 10 27         .dw 100003292   1A02             ; --- END INLINE ASM BLOCK
3293   1A02             
3294   1A02 F9            leave
3295   1A03 09            ret
3296   1A04             
3297   1A04             back:
3298   1A04 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3299   1A07             ; $t 
3300   1A07 52 02 00      sub sp, 2
3301   1A0A             
3302   1A0A             ;; t = token; 
3303   1A0A FA FF FF      lea d, [bp + -1] ; $t
3304   1A0D DA            push d
3305   1A0E 3B FD 32      mov d, _token_data ; $token
3306   1A11 2D            mov b, d
3307   1A12 E7            pop d
3308   1A13 FD 43         mov [d], b
3309   1A15             ;; while(*t++) prog--; 
3310   1A15             _while49_cond:
3311   1A15 FA FF FF      lea d, [bp + -1] ; $t
3312   1A18 2A            mov b, [d]
3313   1A19 FD 79         mov g, b
3314   1A1B FD 77         inc b
3315   1A1D FA FF FF      lea d, [bp + -1] ; $t
3316   1A20 FD 43         mov [d], b
3317   1A22 FD 27         mov b, g
3318   1A24 74            mov d, b
3319   1A25 32            mov bl, [d]
3320   1A26 A7 00         mov bh, 0
3321   1A28 C0 00 00      cmp b, 0
3322   1A2B C6 40 1A      je _while49_exit
3323   1A2E             _while49_block:
3324   1A2E             ;; prog--; 
3325   1A2E 3B FB 32      mov d, _prog ; $prog
3326   1A31 2A            mov b, [d]
3327   1A32 FD 79         mov g, b
3328   1A34 FD 7D         dec b
3329   1A36 3B FB 32      mov d, _prog ; $prog
3330   1A39 FD 43         mov [d], b
3331   1A3B FD 27         mov b, g
3332   1A3D 0A 15 1A      jmp _while49_cond
3333   1A40             _while49_exit:
3334   1A40             ;; tok = TOK_UNDEF; 
3335   1A40 3B F7 32      mov d, _tok ; $tok
3336   1A43 DA            push d
3337   1A44 26 00 00      mov b, 0; TOK_UNDEF
3338   1A47 E7            pop d
3339   1A48 FD 43         mov [d], b
3340   1A4A             ;; toktype = TYPE_UNDEF; 
3341   1A4A 3B F9 32      mov d, _toktype ; $toktype
3342   1A4D DA            push d
3343   1A4E 26 00 00      mov b, 0; TYPE_UNDEF
3344   1A51 E7            pop d
3345   1A52 FD 43         mov [d], b
3346   1A54             ;; token[0] = '\0'; 
3347   1A54 3B FD 32      mov d, _token_data ; $token
3348   1A57 D7            push a
3349   1A58 DA            push d
3350   1A59 26 00 00      mov b, $0
3351   1A5C E7            pop d
3352   1A5D 5A            add d, b
3353   1A5E E4            pop a
3354   1A5F DA            push d
3355   1A60 26 00 00      mov b, $0
3356   1A63 E7            pop d
3357   1A64 FD 3E         mov [d], bl
3358   1A66 F9            leave
3359   1A67 09            ret
3360   1A68             
3361   1A68             get_path:
3362   1A68 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3363   1A6B             ; $t 
3364   1A6B 52 02 00      sub sp, 2
3365   1A6E             
3366   1A6E             ;; *token = '\0'; 
3367   1A6E 3B FD 32      mov d, _token_data ; $token
3368   1A71 2D            mov b, d
3369   1A72 D8            push b
3370   1A73 26 00 00      mov b, $0
3371   1A76 E7            pop d
3372   1A77 FD 3E         mov [d], bl
3373   1A79             ;; t = token; 
3374   1A79 FA FF FF      lea d, [bp + -1] ; $t
3375   1A7C DA            push d
3376   1A7D 3B FD 32      mov d, _token_data ; $token
3377   1A80 2D            mov b, d
3378   1A81 E7            pop d
3379   1A82 FD 43         mov [d], b
3380   1A84             ;; while(is_space(*prog)) prog++; 
3381   1A84             _while50_cond:
3382   1A84 3B FB 32      mov d, _prog ; $prog
3383   1A87 2A            mov b, [d]
3384   1A88 74            mov d, b
3385   1A89 32            mov bl, [d]
3386   1A8A A7 00         mov bh, 0
3387   1A8C DD            push bl
3388   1A8D 07 2A 0A      call is_space
3389   1A90 51 01 00      add sp, 1
3390   1A93 C0 00 00      cmp b, 0
3391   1A96 C6 AB 1A      je _while50_exit
3392   1A99             _while50_block:
3393   1A99             ;; prog++; 
3394   1A99 3B FB 32      mov d, _prog ; $prog
3395   1A9C 2A            mov b, [d]
3396   1A9D FD 79         mov g, b
3397   1A9F FD 77         inc b
3398   1AA1 3B FB 32      mov d, _prog ; $prog
3399   1AA4 FD 43         mov [d], b
3400   1AA6 FD 27         mov b, g
3401   1AA8 0A 84 1A      jmp _while50_cond
3402   1AAB             _while50_exit:
3403   1AAB             ;; if(*prog == '\0'){ 
3404   1AAB             _if51_cond:
3405   1AAB 3B FB 32      mov d, _prog ; $prog
3406   1AAE 2A            mov b, [d]
3407   1AAF 74            mov d, b
3408   1AB0 32            mov bl, [d]
3409   1AB1 A7 00         mov bh, 0
3410   1AB3             ; START RELATIONAL
3411   1AB3 D7            push a
3412   1AB4 11            mov a, b
3413   1AB5 26 00 00      mov b, $0
3414   1AB8 B0            cmp a, b
3415   1AB9 FD 71         seq ; ==
3416   1ABB E4            pop a
3417   1ABC             ; END RELATIONAL
3418   1ABC C0 00 00      cmp b, 0
3419   1ABF C6 C7 1A      je _if51_exit
3420   1AC2             _if51_true:
3421   1AC2             ;; return; 
3422   1AC2 F9            leave
3423   1AC3 09            ret
3424   1AC4 0A C7 1A      jmp _if51_exit
3425   1AC7             _if51_exit:
3426   1AC7             ;; while( 
3427   1AC7             _while52_cond:
3428   1AC7 3B FB 32      mov d, _prog ; $prog
3429   1ACA 2A            mov b, [d]
3430   1ACB 74            mov d, b
3431   1ACC 32            mov bl, [d]
3432   1ACD A7 00         mov bh, 0
3433   1ACF             ; START RELATIONAL
3434   1ACF D7            push a
3435   1AD0 11            mov a, b
3436   1AD1 26 61 00      mov b, $61
3437   1AD4 B0            cmp a, b
3438   1AD5 FD 80         sge ; >=
3439   1AD7 E4            pop a
3440   1AD8             ; END RELATIONAL
3441   1AD8 D7            push a
3442   1AD9 11            mov a, b
3443   1ADA 3B FB 32      mov d, _prog ; $prog
3444   1ADD 2A            mov b, [d]
3445   1ADE 74            mov d, b
3446   1ADF 32            mov bl, [d]
3447   1AE0 A7 00         mov bh, 0
3448   1AE2             ; START RELATIONAL
3449   1AE2 D7            push a
3450   1AE3 11            mov a, b
3451   1AE4 26 7A 00      mov b, $7a
3452   1AE7 B0            cmp a, b
3453   1AE8 FD 74         sle ; <=
3454   1AEA E4            pop a
3455   1AEB             ; END RELATIONAL
3456   1AEB FD A7         sand a, b ; &&
3457   1AED E4            pop a
3458   1AEE D7            push a
3459   1AEF 11            mov a, b
3460   1AF0 3B FB 32      mov d, _prog ; $prog
3461   1AF3 2A            mov b, [d]
3462   1AF4 74            mov d, b
3463   1AF5 32            mov bl, [d]
3464   1AF6 A7 00         mov bh, 0
3465   1AF8             ; START RELATIONAL
3466   1AF8 D7            push a
3467   1AF9 11            mov a, b
3468   1AFA 26 41 00      mov b, $41
3469   1AFD B0            cmp a, b
3470   1AFE FD 80         sge ; >=
3471   1B00 E4            pop a
3472   1B01             ; END RELATIONAL
3473   1B01 D7            push a
3474   1B02 11            mov a, b
3475   1B03 3B FB 32      mov d, _prog ; $prog
3476   1B06 2A            mov b, [d]
3477   1B07 74            mov d, b
3478   1B08 32            mov bl, [d]
3479   1B09 A7 00         mov bh, 0
3480   1B0B             ; START RELATIONAL
3481   1B0B D7            push a
3482   1B0C 11            mov a, b
3483   1B0D 26 5A 00      mov b, $5a
3484   1B10 B0            cmp a, b
3485   1B11 FD 74         sle ; <=
3486   1B13 E4            pop a
3487   1B14             ; END RELATIONAL
3488   1B14 FD A7         sand a, b ; &&
3489   1B16 E4            pop a
3490   1B17 FD A8         sor a, b ; ||
3491   1B19 11            mov a, b
3492   1B1A 3B FB 32      mov d, _prog ; $prog
3493   1B1D 2A            mov b, [d]
3494   1B1E 74            mov d, b
3495   1B1F 32            mov bl, [d]
3496   1B20 A7 00         mov bh, 0
3497   1B22             ; START RELATIONAL
3498   1B22 D7            push a
3499   1B23 11            mov a, b
3500   1B24 26 30 00      mov b, $30
3501   1B27 B0            cmp a, b
3502   1B28 FD 80         sge ; >=
3503   1B2A E4            pop a
3504   1B2B             ; END RELATIONAL
3505   1B2B D7            push a
3506   1B2C 11            mov a, b
3507   1B2D 3B FB 32      mov d, _prog ; $prog
3508   1B30 2A            mov b, [d]
3509   1B31 74            mov d, b
3510   1B32 32            mov bl, [d]
3511   1B33 A7 00         mov bh, 0
3512   1B35             ; START RELATIONAL
3513   1B35 D7            push a
3514   1B36 11            mov a, b
3515   1B37 26 39 00      mov b, $39
3516   1B3A B0            cmp a, b
3517   1B3B FD 74         sle ; <=
3518   1B3D E4            pop a
3519   1B3E             ; END RELATIONAL
3520   1B3E FD A7         sand a, b ; &&
3521   1B40 E4            pop a
3522   1B41 FD A8         sor a, b ; ||
3523   1B43 11            mov a, b
3524   1B44 3B FB 32      mov d, _prog ; $prog
3525   1B47 2A            mov b, [d]
3526   1B48 74            mov d, b
3527   1B49 32            mov bl, [d]
3528   1B4A A7 00         mov bh, 0
3529   1B4C             ; START RELATIONAL
3530   1B4C D7            push a
3531   1B4D 11            mov a, b
3532   1B4E 26 2F 00      mov b, $2f
3533   1B51 B0            cmp a, b
3534   1B52 FD 71         seq ; ==
3535   1B54 E4            pop a
3536   1B55             ; END RELATIONAL
3537   1B55 FD A8         sor a, b ; ||
3538   1B57 11            mov a, b
3539   1B58 3B FB 32      mov d, _prog ; $prog
3540   1B5B 2A            mov b, [d]
3541   1B5C 74            mov d, b
3542   1B5D 32            mov bl, [d]
3543   1B5E A7 00         mov bh, 0
3544   1B60             ; START RELATIONAL
3545   1B60 D7            push a
3546   1B61 11            mov a, b
3547   1B62 26 5F 00      mov b, $5f
3548   1B65 B0            cmp a, b
3549   1B66 FD 71         seq ; ==
3550   1B68 E4            pop a
3551   1B69             ; END RELATIONAL
3552   1B69 FD A8         sor a, b ; ||
3553   1B6B 11            mov a, b
3554   1B6C 3B FB 32      mov d, _prog ; $prog
3555   1B6F 2A            mov b, [d]
3556   1B70 74            mov d, b
3557   1B71 32            mov bl, [d]
3558   1B72 A7 00         mov bh, 0
3559   1B74             ; START RELATIONAL
3560   1B74 D7            push a
3561   1B75 11            mov a, b
3562   1B76 26 2D 00      mov b, $2d
3563   1B79 B0            cmp a, b
3564   1B7A FD 71         seq ; ==
3565   1B7C E4            pop a
3566   1B7D             ; END RELATIONAL
3567   1B7D FD A8         sor a, b ; ||
3568   1B7F 11            mov a, b
3569   1B80 3B FB 32      mov d, _prog ; $prog
3570   1B83 2A            mov b, [d]
3571   1B84 74            mov d, b
3572   1B85 32            mov bl, [d]
3573   1B86 A7 00         mov bh, 0
3574   1B88             ; START RELATIONAL
3575   1B88 D7            push a
3576   1B89 11            mov a, b
3577   1B8A 26 2E 00      mov b, $2e
3578   1B8D B0            cmp a, b
3579   1B8E FD 71         seq ; ==
3580   1B90 E4            pop a
3581   1B91             ; END RELATIONAL
3582   1B91 FD A8         sor a, b ; ||
3583   1B93 E4            pop a
3584   1B94 C0 00 00      cmp b, 0
3585   1B97 C6 C3 1B      je _while52_exit
3586   1B9A             _while52_block:
3587   1B9A             ;; *t++ = *prog++; 
3588   1B9A FA FF FF      lea d, [bp + -1] ; $t
3589   1B9D 2A            mov b, [d]
3590   1B9E FD 79         mov g, b
3591   1BA0 FD 77         inc b
3592   1BA2 FA FF FF      lea d, [bp + -1] ; $t
3593   1BA5 FD 43         mov [d], b
3594   1BA7 FD 27         mov b, g
3595   1BA9 D8            push b
3596   1BAA 3B FB 32      mov d, _prog ; $prog
3597   1BAD 2A            mov b, [d]
3598   1BAE FD 79         mov g, b
3599   1BB0 FD 77         inc b
3600   1BB2 3B FB 32      mov d, _prog ; $prog
3601   1BB5 FD 43         mov [d], b
3602   1BB7 FD 27         mov b, g
3603   1BB9 74            mov d, b
3604   1BBA 32            mov bl, [d]
3605   1BBB A7 00         mov bh, 0
3606   1BBD E7            pop d
3607   1BBE FD 3E         mov [d], bl
3608   1BC0 0A C7 1A      jmp _while52_cond
3609   1BC3             _while52_exit:
3610   1BC3             ;; *t = '\0'; 
3611   1BC3 FA FF FF      lea d, [bp + -1] ; $t
3612   1BC6 2A            mov b, [d]
3613   1BC7 D8            push b
3614   1BC8 26 00 00      mov b, $0
3615   1BCB E7            pop d
3616   1BCC FD 3E         mov [d], bl
3617   1BCE F9            leave
3618   1BCF 09            ret
3619   1BD0             
3620   1BD0             get:
3621   1BD0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3622   1BD3             ; $t 
3623   1BD3 52 02 00      sub sp, 2
3624   1BD6             
3625   1BD6             ;; *token = '\0'; 
3626   1BD6 3B FD 32      mov d, _token_data ; $token
3627   1BD9 2D            mov b, d
3628   1BDA D8            push b
3629   1BDB 26 00 00      mov b, $0
3630   1BDE E7            pop d
3631   1BDF FD 3E         mov [d], bl
3632   1BE1             ;; tok = 0; 
3633   1BE1 3B F7 32      mov d, _tok ; $tok
3634   1BE4 DA            push d
3635   1BE5 26 00 00      mov b, $0
3636   1BE8 E7            pop d
3637   1BE9 FD 43         mov [d], b
3638   1BEB             ;; toktype = 0; 
3639   1BEB 3B F9 32      mov d, _toktype ; $toktype
3640   1BEE DA            push d
3641   1BEF 26 00 00      mov b, $0
3642   1BF2 E7            pop d
3643   1BF3 FD 43         mov [d], b
3644   1BF5             ;; t = token; 
3645   1BF5 FA FF FF      lea d, [bp + -1] ; $t
3646   1BF8 DA            push d
3647   1BF9 3B FD 32      mov d, _token_data ; $token
3648   1BFC 2D            mov b, d
3649   1BFD E7            pop d
3650   1BFE FD 43         mov [d], b
3651   1C00             ;; while(is_space(*prog)) prog++; 
3652   1C00             _while53_cond:
3653   1C00 3B FB 32      mov d, _prog ; $prog
3654   1C03 2A            mov b, [d]
3655   1C04 74            mov d, b
3656   1C05 32            mov bl, [d]
3657   1C06 A7 00         mov bh, 0
3658   1C08 DD            push bl
3659   1C09 07 2A 0A      call is_space
3660   1C0C 51 01 00      add sp, 1
3661   1C0F C0 00 00      cmp b, 0
3662   1C12 C6 27 1C      je _while53_exit
3663   1C15             _while53_block:
3664   1C15             ;; prog++; 
3665   1C15 3B FB 32      mov d, _prog ; $prog
3666   1C18 2A            mov b, [d]
3667   1C19 FD 79         mov g, b
3668   1C1B FD 77         inc b
3669   1C1D 3B FB 32      mov d, _prog ; $prog
3670   1C20 FD 43         mov [d], b
3671   1C22 FD 27         mov b, g
3672   1C24 0A 00 1C      jmp _while53_cond
3673   1C27             _while53_exit:
3674   1C27             ;; if(*prog == '\0'){ 
3675   1C27             _if54_cond:
3676   1C27 3B FB 32      mov d, _prog ; $prog
3677   1C2A 2A            mov b, [d]
3678   1C2B 74            mov d, b
3679   1C2C 32            mov bl, [d]
3680   1C2D A7 00         mov bh, 0
3681   1C2F             ; START RELATIONAL
3682   1C2F D7            push a
3683   1C30 11            mov a, b
3684   1C31 26 00 00      mov b, $0
3685   1C34 B0            cmp a, b
3686   1C35 FD 71         seq ; ==
3687   1C37 E4            pop a
3688   1C38             ; END RELATIONAL
3689   1C38 C0 00 00      cmp b, 0
3690   1C3B C6 4D 1C      je _if54_exit
3691   1C3E             _if54_true:
3692   1C3E             ;; toktype = END; 
3693   1C3E 3B F9 32      mov d, _toktype ; $toktype
3694   1C41 DA            push d
3695   1C42 26 06 00      mov b, 6; END
3696   1C45 E7            pop d
3697   1C46 FD 43         mov [d], b
3698   1C48             ;; return; 
3699   1C48 F9            leave
3700   1C49 09            ret
3701   1C4A 0A 4D 1C      jmp _if54_exit
3702   1C4D             _if54_exit:
3703   1C4D             ;; if(is_digit(*prog)){ 
3704   1C4D             _if55_cond:
3705   1C4D 3B FB 32      mov d, _prog ; $prog
3706   1C50 2A            mov b, [d]
3707   1C51 74            mov d, b
3708   1C52 32            mov bl, [d]
3709   1C53 A7 00         mov bh, 0
3710   1C55 DD            push bl
3711   1C56 07 76 0A      call is_digit
3712   1C59 51 01 00      add sp, 1
3713   1C5C C0 00 00      cmp b, 0
3714   1C5F C6 BA 1C      je _if55_else
3715   1C62             _if55_true:
3716   1C62             ;; while(is_digit(*prog)){ 
3717   1C62             _while56_cond:
3718   1C62 3B FB 32      mov d, _prog ; $prog
3719   1C65 2A            mov b, [d]
3720   1C66 74            mov d, b
3721   1C67 32            mov bl, [d]
3722   1C68 A7 00         mov bh, 0
3723   1C6A DD            push bl
3724   1C6B 07 76 0A      call is_digit
3725   1C6E 51 01 00      add sp, 1
3726   1C71 C0 00 00      cmp b, 0
3727   1C74 C6 A0 1C      je _while56_exit
3728   1C77             _while56_block:
3729   1C77             ;; *t++ = *prog++; 
3730   1C77 FA FF FF      lea d, [bp + -1] ; $t
3731   1C7A 2A            mov b, [d]
3732   1C7B FD 79         mov g, b
3733   1C7D FD 77         inc b
3734   1C7F FA FF FF      lea d, [bp + -1] ; $t
3735   1C82 FD 43         mov [d], b
3736   1C84 FD 27         mov b, g
3737   1C86 D8            push b
3738   1C87 3B FB 32      mov d, _prog ; $prog
3739   1C8A 2A            mov b, [d]
3740   1C8B FD 79         mov g, b
3741   1C8D FD 77         inc b
3742   1C8F 3B FB 32      mov d, _prog ; $prog
3743   1C92 FD 43         mov [d], b
3744   1C94 FD 27         mov b, g
3745   1C96 74            mov d, b
3746   1C97 32            mov bl, [d]
3747   1C98 A7 00         mov bh, 0
3748   1C9A E7            pop d
3749   1C9B FD 3E         mov [d], bl
3750   1C9D 0A 62 1C      jmp _while56_cond
3751   1CA0             _while56_exit:
3752   1CA0             ;; *t = '\0'; 
3753   1CA0 FA FF FF      lea d, [bp + -1] ; $t
3754   1CA3 2A            mov b, [d]
3755   1CA4 D8            push b
3756   1CA5 26 00 00      mov b, $0
3757   1CA8 E7            pop d
3758   1CA9 FD 3E         mov [d], bl
3759   1CAB             ;; toktype = INTEGER_CONST; 
3760   1CAB 3B F9 32      mov d, _toktype ; $toktype
3761   1CAE DA            push d
3762   1CAF 26 04 00      mov b, 4; INTEGER_CONST
3763   1CB2 E7            pop d
3764   1CB3 FD 43         mov [d], b
3765   1CB5             ;; return; // return to avoid *t = '\0' line at the end of function 
3766   1CB5 F9            leave
3767   1CB6 09            ret
3768   1CB7 0A 94 29      jmp _if55_exit
3769   1CBA             _if55_else:
3770   1CBA             ;; if(is_alpha(*prog)){ 
3771   1CBA             _if57_cond:
3772   1CBA 3B FB 32      mov d, _prog ; $prog
3773   1CBD 2A            mov b, [d]
3774   1CBE 74            mov d, b
3775   1CBF 32            mov bl, [d]
3776   1CC0 A7 00         mov bh, 0
3777   1CC2 DD            push bl
3778   1CC3 07 9E 0A      call is_alpha
3779   1CC6 51 01 00      add sp, 1
3780   1CC9 C0 00 00      cmp b, 0
3781   1CCC C6 39 1D      je _if57_else
3782   1CCF             _if57_true:
3783   1CCF             ;; while(is_alpha(*prog) || is_digit(*prog)){ 
3784   1CCF             _while58_cond:
3785   1CCF 3B FB 32      mov d, _prog ; $prog
3786   1CD2 2A            mov b, [d]
3787   1CD3 74            mov d, b
3788   1CD4 32            mov bl, [d]
3789   1CD5 A7 00         mov bh, 0
3790   1CD7 DD            push bl
3791   1CD8 07 9E 0A      call is_alpha
3792   1CDB 51 01 00      add sp, 1
3793   1CDE D7            push a
3794   1CDF 11            mov a, b
3795   1CE0 3B FB 32      mov d, _prog ; $prog
3796   1CE3 2A            mov b, [d]
3797   1CE4 74            mov d, b
3798   1CE5 32            mov bl, [d]
3799   1CE6 A7 00         mov bh, 0
3800   1CE8 DD            push bl
3801   1CE9 07 76 0A      call is_digit
3802   1CEC 51 01 00      add sp, 1
3803   1CEF FD A8         sor a, b ; ||
3804   1CF1 E4            pop a
3805   1CF2 C0 00 00      cmp b, 0
3806   1CF5 C6 21 1D      je _while58_exit
3807   1CF8             _while58_block:
3808   1CF8             ;; *t++ = *prog++; 
3809   1CF8 FA FF FF      lea d, [bp + -1] ; $t
3810   1CFB 2A            mov b, [d]
3811   1CFC FD 79         mov g, b
3812   1CFE FD 77         inc b
3813   1D00 FA FF FF      lea d, [bp + -1] ; $t
3814   1D03 FD 43         mov [d], b
3815   1D05 FD 27         mov b, g
3816   1D07 D8            push b
3817   1D08 3B FB 32      mov d, _prog ; $prog
3818   1D0B 2A            mov b, [d]
3819   1D0C FD 79         mov g, b
3820   1D0E FD 77         inc b
3821   1D10 3B FB 32      mov d, _prog ; $prog
3822   1D13 FD 43         mov [d], b
3823   1D15 FD 27         mov b, g
3824   1D17 74            mov d, b
3825   1D18 32            mov bl, [d]
3826   1D19 A7 00         mov bh, 0
3827   1D1B E7            pop d
3828   1D1C FD 3E         mov [d], bl
3829   1D1E 0A CF 1C      jmp _while58_cond
3830   1D21             _while58_exit:
3831   1D21             ;; *t = '\0'; 
3832   1D21 FA FF FF      lea d, [bp + -1] ; $t
3833   1D24 2A            mov b, [d]
3834   1D25 D8            push b
3835   1D26 26 00 00      mov b, $0
3836   1D29 E7            pop d
3837   1D2A FD 3E         mov [d], bl
3838   1D2C             ;; toktype = IDENTIFIER; 
3839   1D2C 3B F9 32      mov d, _toktype ; $toktype
3840   1D2F DA            push d
3841   1D30 26 05 00      mov b, 5; IDENTIFIER
3842   1D33 E7            pop d
3843   1D34 FD 43         mov [d], b
3844   1D36 0A 94 29      jmp _if57_exit
3845   1D39             _if57_else:
3846   1D39             ;; if(*prog == '\"'){ 
3847   1D39             _if59_cond:
3848   1D39 3B FB 32      mov d, _prog ; $prog
3849   1D3C 2A            mov b, [d]
3850   1D3D 74            mov d, b
3851   1D3E 32            mov bl, [d]
3852   1D3F A7 00         mov bh, 0
3853   1D41             ; START RELATIONAL
3854   1D41 D7            push a
3855   1D42 11            mov a, b
3856   1D43 26 22 00      mov b, $22
3857   1D46 B0            cmp a, b
3858   1D47 FD 71         seq ; ==
3859   1D49 E4            pop a
3860   1D4A             ; END RELATIONAL
3861   1D4A C0 00 00      cmp b, 0
3862   1D4D C6 28 1E      je _if59_else
3863   1D50             _if59_true:
3864   1D50             ;; *t++ = '\"'; 
3865   1D50 FA FF FF      lea d, [bp + -1] ; $t
3866   1D53 2A            mov b, [d]
3867   1D54 FD 79         mov g, b
3868   1D56 FD 77         inc b
3869   1D58 FA FF FF      lea d, [bp + -1] ; $t
3870   1D5B FD 43         mov [d], b
3871   1D5D FD 27         mov b, g
3872   1D5F D8            push b
3873   1D60 26 22 00      mov b, $22
3874   1D63 E7            pop d
3875   1D64 FD 3E         mov [d], bl
3876   1D66             ;; prog++; 
3877   1D66 3B FB 32      mov d, _prog ; $prog
3878   1D69 2A            mov b, [d]
3879   1D6A FD 79         mov g, b
3880   1D6C FD 77         inc b
3881   1D6E 3B FB 32      mov d, _prog ; $prog
3882   1D71 FD 43         mov [d], b
3883   1D73 FD 27         mov b, g
3884   1D75             ;; while(*prog != '\"' && *prog){ 
3885   1D75             _while60_cond:
3886   1D75 3B FB 32      mov d, _prog ; $prog
3887   1D78 2A            mov b, [d]
3888   1D79 74            mov d, b
3889   1D7A 32            mov bl, [d]
3890   1D7B A7 00         mov bh, 0
3891   1D7D             ; START RELATIONAL
3892   1D7D D7            push a
3893   1D7E 11            mov a, b
3894   1D7F 26 22 00      mov b, $22
3895   1D82 B0            cmp a, b
3896   1D83 FD 72         sneq ; !=
3897   1D85 E4            pop a
3898   1D86             ; END RELATIONAL
3899   1D86 D7            push a
3900   1D87 11            mov a, b
3901   1D88 3B FB 32      mov d, _prog ; $prog
3902   1D8B 2A            mov b, [d]
3903   1D8C 74            mov d, b
3904   1D8D 32            mov bl, [d]
3905   1D8E A7 00         mov bh, 0
3906   1D90 FD A7         sand a, b ; &&
3907   1D92 E4            pop a
3908   1D93 C0 00 00      cmp b, 0
3909   1D96 C6 C2 1D      je _while60_exit
3910   1D99             _while60_block:
3911   1D99             ;; *t++ = *prog++; 
3912   1D99 FA FF FF      lea d, [bp + -1] ; $t
3913   1D9C 2A            mov b, [d]
3914   1D9D FD 79         mov g, b
3915   1D9F FD 77         inc b
3916   1DA1 FA FF FF      lea d, [bp + -1] ; $t
3917   1DA4 FD 43         mov [d], b
3918   1DA6 FD 27         mov b, g
3919   1DA8 D8            push b
3920   1DA9 3B FB 32      mov d, _prog ; $prog
3921   1DAC 2A            mov b, [d]
3922   1DAD FD 79         mov g, b
3923   1DAF FD 77         inc b
3924   1DB1 3B FB 32      mov d, _prog ; $prog
3925   1DB4 FD 43         mov [d], b
3926   1DB6 FD 27         mov b, g
3927   1DB8 74            mov d, b
3928   1DB9 32            mov bl, [d]
3929   1DBA A7 00         mov bh, 0
3930   1DBC E7            pop d
3931   1DBD FD 3E         mov [d], bl
3932   1DBF 0A 75 1D      jmp _while60_cond
3933   1DC2             _while60_exit:
3934   1DC2             ;; if(*prog != '\"') error("Double quotes expected"); 
3935   1DC2             _if61_cond:
3936   1DC2 3B FB 32      mov d, _prog ; $prog
3937   1DC5 2A            mov b, [d]
3938   1DC6 74            mov d, b
3939   1DC7 32            mov bl, [d]
3940   1DC8 A7 00         mov bh, 0
3941   1DCA             ; START RELATIONAL
3942   1DCA D7            push a
3943   1DCB 11            mov a, b
3944   1DCC 26 22 00      mov b, $22
3945   1DCF B0            cmp a, b
3946   1DD0 FD 72         sneq ; !=
3947   1DD2 E4            pop a
3948   1DD3             ; END RELATIONAL
3949   1DD3 C0 00 00      cmp b, 0
3950   1DD6 C6 E8 1D      je _if61_exit
3951   1DD9             _if61_true:
3952   1DD9             ;; error("Double quotes expected"); 
3953   1DD9 26 B7 3B      mov b, __s13 ; "Double quotes expected"
3954   1DDC FD AB         swp b
3955   1DDE D8            push b
3956   1DDF 07 F7 2B      call error
3957   1DE2 51 02 00      add sp, 2
3958   1DE5 0A E8 1D      jmp _if61_exit
3959   1DE8             _if61_exit:
3960   1DE8             ;; *t++ = '\"'; 
3961   1DE8 FA FF FF      lea d, [bp + -1] ; $t
3962   1DEB 2A            mov b, [d]
3963   1DEC FD 79         mov g, b
3964   1DEE FD 77         inc b
3965   1DF0 FA FF FF      lea d, [bp + -1] ; $t
3966   1DF3 FD 43         mov [d], b
3967   1DF5 FD 27         mov b, g
3968   1DF7 D8            push b
3969   1DF8 26 22 00      mov b, $22
3970   1DFB E7            pop d
3971   1DFC FD 3E         mov [d], bl
3972   1DFE             ;; prog++; 
3973   1DFE 3B FB 32      mov d, _prog ; $prog
3974   1E01 2A            mov b, [d]
3975   1E02 FD 79         mov g, b
3976   1E04 FD 77         inc b
3977   1E06 3B FB 32      mov d, _prog ; $prog
3978   1E09 FD 43         mov [d], b
3979   1E0B FD 27         mov b, g
3980   1E0D             ;; toktype = STRING_CONST; 
3981   1E0D 3B F9 32      mov d, _toktype ; $toktype
3982   1E10 DA            push d
3983   1E11 26 03 00      mov b, 3; STRING_CONST
3984   1E14 E7            pop d
3985   1E15 FD 43         mov [d], b
3986   1E17             ;; *t = '\0'; 
3987   1E17 FA FF FF      lea d, [bp + -1] ; $t
3988   1E1A 2A            mov b, [d]
3989   1E1B D8            push b
3990   1E1C 26 00 00      mov b, $0
3991   1E1F E7            pop d
3992   1E20 FD 3E         mov [d], bl
3993   1E22             ;; convert_constant(); // converts this string token qith quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
3994   1E22 07 A1 29      call convert_constant
3995   1E25 0A 94 29      jmp _if59_exit
3996   1E28             _if59_else:
3997   1E28             ;; if(*prog == '#'){ 
3998   1E28             _if62_cond:
3999   1E28 3B FB 32      mov d, _prog ; $prog
4000   1E2B 2A            mov b, [d]
4001   1E2C 74            mov d, b
4002   1E2D 32            mov bl, [d]
4003   1E2E A7 00         mov bh, 0
4004   1E30             ; START RELATIONAL
4005   1E30 D7            push a
4006   1E31 11            mov a, b
4007   1E32 26 23 00      mov b, $23
4008   1E35 B0            cmp a, b
4009   1E36 FD 71         seq ; ==
4010   1E38 E4            pop a
4011   1E39             ; END RELATIONAL
4012   1E39 C0 00 00      cmp b, 0
4013   1E3C C6 7C 1E      je _if62_else
4014   1E3F             _if62_true:
4015   1E3F             ;; *t++ = *prog++; 
4016   1E3F FA FF FF      lea d, [bp + -1] ; $t
4017   1E42 2A            mov b, [d]
4018   1E43 FD 79         mov g, b
4019   1E45 FD 77         inc b
4020   1E47 FA FF FF      lea d, [bp + -1] ; $t
4021   1E4A FD 43         mov [d], b
4022   1E4C FD 27         mov b, g
4023   1E4E D8            push b
4024   1E4F 3B FB 32      mov d, _prog ; $prog
4025   1E52 2A            mov b, [d]
4026   1E53 FD 79         mov g, b
4027   1E55 FD 77         inc b
4028   1E57 3B FB 32      mov d, _prog ; $prog
4029   1E5A FD 43         mov [d], b
4030   1E5C FD 27         mov b, g
4031   1E5E 74            mov d, b
4032   1E5F 32            mov bl, [d]
4033   1E60 A7 00         mov bh, 0
4034   1E62 E7            pop d
4035   1E63 FD 3E         mov [d], bl
4036   1E65             ;; tok = HASH; 
4037   1E65 3B F7 32      mov d, _tok ; $tok
4038   1E68 DA            push d
4039   1E69 26 15 00      mov b, 21; HASH
4040   1E6C E7            pop d
4041   1E6D FD 43         mov [d], b
4042   1E6F             ;; toktype = DELIMITER;   
4043   1E6F 3B F9 32      mov d, _toktype ; $toktype
4044   1E72 DA            push d
4045   1E73 26 01 00      mov b, 1; DELIMITER
4046   1E76 E7            pop d
4047   1E77 FD 43         mov [d], b
4048   1E79 0A 94 29      jmp _if62_exit
4049   1E7C             _if62_else:
4050   1E7C             ;; if(*prog == '{'){ 
4051   1E7C             _if63_cond:
4052   1E7C 3B FB 32      mov d, _prog ; $prog
4053   1E7F 2A            mov b, [d]
4054   1E80 74            mov d, b
4055   1E81 32            mov bl, [d]
4056   1E82 A7 00         mov bh, 0
4057   1E84             ; START RELATIONAL
4058   1E84 D7            push a
4059   1E85 11            mov a, b
4060   1E86 26 7B 00      mov b, $7b
4061   1E89 B0            cmp a, b
4062   1E8A FD 71         seq ; ==
4063   1E8C E4            pop a
4064   1E8D             ; END RELATIONAL
4065   1E8D C0 00 00      cmp b, 0
4066   1E90 C6 D0 1E      je _if63_else
4067   1E93             _if63_true:
4068   1E93             ;; *t++ = *prog++; 
4069   1E93 FA FF FF      lea d, [bp + -1] ; $t
4070   1E96 2A            mov b, [d]
4071   1E97 FD 79         mov g, b
4072   1E99 FD 77         inc b
4073   1E9B FA FF FF      lea d, [bp + -1] ; $t
4074   1E9E FD 43         mov [d], b
4075   1EA0 FD 27         mov b, g
4076   1EA2 D8            push b
4077   1EA3 3B FB 32      mov d, _prog ; $prog
4078   1EA6 2A            mov b, [d]
4079   1EA7 FD 79         mov g, b
4080   1EA9 FD 77         inc b
4081   1EAB 3B FB 32      mov d, _prog ; $prog
4082   1EAE FD 43         mov [d], b
4083   1EB0 FD 27         mov b, g
4084   1EB2 74            mov d, b
4085   1EB3 32            mov bl, [d]
4086   1EB4 A7 00         mov bh, 0
4087   1EB6 E7            pop d
4088   1EB7 FD 3E         mov [d], bl
4089   1EB9             ;; tok = OPENING_BRACE; 
4090   1EB9 3B F7 32      mov d, _tok ; $tok
4091   1EBC DA            push d
4092   1EBD 26 1E 00      mov b, 30; OPENING_BRACE
4093   1EC0 E7            pop d
4094   1EC1 FD 43         mov [d], b
4095   1EC3             ;; toktype = DELIMITER;   
4096   1EC3 3B F9 32      mov d, _toktype ; $toktype
4097   1EC6 DA            push d
4098   1EC7 26 01 00      mov b, 1; DELIMITER
4099   1ECA E7            pop d
4100   1ECB FD 43         mov [d], b
4101   1ECD 0A 94 29      jmp _if63_exit
4102   1ED0             _if63_else:
4103   1ED0             ;; if(*prog == '}'){ 
4104   1ED0             _if64_cond:
4105   1ED0 3B FB 32      mov d, _prog ; $prog
4106   1ED3 2A            mov b, [d]
4107   1ED4 74            mov d, b
4108   1ED5 32            mov bl, [d]
4109   1ED6 A7 00         mov bh, 0
4110   1ED8             ; START RELATIONAL
4111   1ED8 D7            push a
4112   1ED9 11            mov a, b
4113   1EDA 26 7D 00      mov b, $7d
4114   1EDD B0            cmp a, b
4115   1EDE FD 71         seq ; ==
4116   1EE0 E4            pop a
4117   1EE1             ; END RELATIONAL
4118   1EE1 C0 00 00      cmp b, 0
4119   1EE4 C6 24 1F      je _if64_else
4120   1EE7             _if64_true:
4121   1EE7             ;; *t++ = *prog++; 
4122   1EE7 FA FF FF      lea d, [bp + -1] ; $t
4123   1EEA 2A            mov b, [d]
4124   1EEB FD 79         mov g, b
4125   1EED FD 77         inc b
4126   1EEF FA FF FF      lea d, [bp + -1] ; $t
4127   1EF2 FD 43         mov [d], b
4128   1EF4 FD 27         mov b, g
4129   1EF6 D8            push b
4130   1EF7 3B FB 32      mov d, _prog ; $prog
4131   1EFA 2A            mov b, [d]
4132   1EFB FD 79         mov g, b
4133   1EFD FD 77         inc b
4134   1EFF 3B FB 32      mov d, _prog ; $prog
4135   1F02 FD 43         mov [d], b
4136   1F04 FD 27         mov b, g
4137   1F06 74            mov d, b
4138   1F07 32            mov bl, [d]
4139   1F08 A7 00         mov bh, 0
4140   1F0A E7            pop d
4141   1F0B FD 3E         mov [d], bl
4142   1F0D             ;; tok = CLOSING_BRACE; 
4143   1F0D 3B F7 32      mov d, _tok ; $tok
4144   1F10 DA            push d
4145   1F11 26 1F 00      mov b, 31; CLOSING_BRACE
4146   1F14 E7            pop d
4147   1F15 FD 43         mov [d], b
4148   1F17             ;; toktype = DELIMITER;   
4149   1F17 3B F9 32      mov d, _toktype ; $toktype
4150   1F1A DA            push d
4151   1F1B 26 01 00      mov b, 1; DELIMITER
4152   1F1E E7            pop d
4153   1F1F FD 43         mov [d], b
4154   1F21 0A 94 29      jmp _if64_exit
4155   1F24             _if64_else:
4156   1F24             ;; if(*prog == '['){ 
4157   1F24             _if65_cond:
4158   1F24 3B FB 32      mov d, _prog ; $prog
4159   1F27 2A            mov b, [d]
4160   1F28 74            mov d, b
4161   1F29 32            mov bl, [d]
4162   1F2A A7 00         mov bh, 0
4163   1F2C             ; START RELATIONAL
4164   1F2C D7            push a
4165   1F2D 11            mov a, b
4166   1F2E 26 5B 00      mov b, $5b
4167   1F31 B0            cmp a, b
4168   1F32 FD 71         seq ; ==
4169   1F34 E4            pop a
4170   1F35             ; END RELATIONAL
4171   1F35 C0 00 00      cmp b, 0
4172   1F38 C6 78 1F      je _if65_else
4173   1F3B             _if65_true:
4174   1F3B             ;; *t++ = *prog++; 
4175   1F3B FA FF FF      lea d, [bp + -1] ; $t
4176   1F3E 2A            mov b, [d]
4177   1F3F FD 79         mov g, b
4178   1F41 FD 77         inc b
4179   1F43 FA FF FF      lea d, [bp + -1] ; $t
4180   1F46 FD 43         mov [d], b
4181   1F48 FD 27         mov b, g
4182   1F4A D8            push b
4183   1F4B 3B FB 32      mov d, _prog ; $prog
4184   1F4E 2A            mov b, [d]
4185   1F4F FD 79         mov g, b
4186   1F51 FD 77         inc b
4187   1F53 3B FB 32      mov d, _prog ; $prog
4188   1F56 FD 43         mov [d], b
4189   1F58 FD 27         mov b, g
4190   1F5A 74            mov d, b
4191   1F5B 32            mov bl, [d]
4192   1F5C A7 00         mov bh, 0
4193   1F5E E7            pop d
4194   1F5F FD 3E         mov [d], bl
4195   1F61             ;; tok = OPENING_BRACKET; 
4196   1F61 3B F7 32      mov d, _tok ; $tok
4197   1F64 DA            push d
4198   1F65 26 20 00      mov b, 32; OPENING_BRACKET
4199   1F68 E7            pop d
4200   1F69 FD 43         mov [d], b
4201   1F6B             ;; toktype = DELIMITER;   
4202   1F6B 3B F9 32      mov d, _toktype ; $toktype
4203   1F6E DA            push d
4204   1F6F 26 01 00      mov b, 1; DELIMITER
4205   1F72 E7            pop d
4206   1F73 FD 43         mov [d], b
4207   1F75 0A 94 29      jmp _if65_exit
4208   1F78             _if65_else:
4209   1F78             ;; if(*prog == ']'){ 
4210   1F78             _if66_cond:
4211   1F78 3B FB 32      mov d, _prog ; $prog
4212   1F7B 2A            mov b, [d]
4213   1F7C 74            mov d, b
4214   1F7D 32            mov bl, [d]
4215   1F7E A7 00         mov bh, 0
4216   1F80             ; START RELATIONAL
4217   1F80 D7            push a
4218   1F81 11            mov a, b
4219   1F82 26 5D 00      mov b, $5d
4220   1F85 B0            cmp a, b
4221   1F86 FD 71         seq ; ==
4222   1F88 E4            pop a
4223   1F89             ; END RELATIONAL
4224   1F89 C0 00 00      cmp b, 0
4225   1F8C C6 CC 1F      je _if66_else
4226   1F8F             _if66_true:
4227   1F8F             ;; *t++ = *prog++; 
4228   1F8F FA FF FF      lea d, [bp + -1] ; $t
4229   1F92 2A            mov b, [d]
4230   1F93 FD 79         mov g, b
4231   1F95 FD 77         inc b
4232   1F97 FA FF FF      lea d, [bp + -1] ; $t
4233   1F9A FD 43         mov [d], b
4234   1F9C FD 27         mov b, g
4235   1F9E D8            push b
4236   1F9F 3B FB 32      mov d, _prog ; $prog
4237   1FA2 2A            mov b, [d]
4238   1FA3 FD 79         mov g, b
4239   1FA5 FD 77         inc b
4240   1FA7 3B FB 32      mov d, _prog ; $prog
4241   1FAA FD 43         mov [d], b
4242   1FAC FD 27         mov b, g
4243   1FAE 74            mov d, b
4244   1FAF 32            mov bl, [d]
4245   1FB0 A7 00         mov bh, 0
4246   1FB2 E7            pop d
4247   1FB3 FD 3E         mov [d], bl
4248   1FB5             ;; tok = CLOSING_BRACKET; 
4249   1FB5 3B F7 32      mov d, _tok ; $tok
4250   1FB8 DA            push d
4251   1FB9 26 21 00      mov b, 33; CLOSING_BRACKET
4252   1FBC E7            pop d
4253   1FBD FD 43         mov [d], b
4254   1FBF             ;; toktype = DELIMITER;   
4255   1FBF 3B F9 32      mov d, _toktype ; $toktype
4256   1FC2 DA            push d
4257   1FC3 26 01 00      mov b, 1; DELIMITER
4258   1FC6 E7            pop d
4259   1FC7 FD 43         mov [d], b
4260   1FC9 0A 94 29      jmp _if66_exit
4261   1FCC             _if66_else:
4262   1FCC             ;; if(*prog == '='){ 
4263   1FCC             _if67_cond:
4264   1FCC 3B FB 32      mov d, _prog ; $prog
4265   1FCF 2A            mov b, [d]
4266   1FD0 74            mov d, b
4267   1FD1 32            mov bl, [d]
4268   1FD2 A7 00         mov bh, 0
4269   1FD4             ; START RELATIONAL
4270   1FD4 D7            push a
4271   1FD5 11            mov a, b
4272   1FD6 26 3D 00      mov b, $3d
4273   1FD9 B0            cmp a, b
4274   1FDA FD 71         seq ; ==
4275   1FDC E4            pop a
4276   1FDD             ; END RELATIONAL
4277   1FDD C0 00 00      cmp b, 0
4278   1FE0 C6 6A 20      je _if67_else
4279   1FE3             _if67_true:
4280   1FE3             ;; *t++ = *prog++; 
4281   1FE3 FA FF FF      lea d, [bp + -1] ; $t
4282   1FE6 2A            mov b, [d]
4283   1FE7 FD 79         mov g, b
4284   1FE9 FD 77         inc b
4285   1FEB FA FF FF      lea d, [bp + -1] ; $t
4286   1FEE FD 43         mov [d], b
4287   1FF0 FD 27         mov b, g
4288   1FF2 D8            push b
4289   1FF3 3B FB 32      mov d, _prog ; $prog
4290   1FF6 2A            mov b, [d]
4291   1FF7 FD 79         mov g, b
4292   1FF9 FD 77         inc b
4293   1FFB 3B FB 32      mov d, _prog ; $prog
4294   1FFE FD 43         mov [d], b
4295   2000 FD 27         mov b, g
4296   2002 74            mov d, b
4297   2003 32            mov bl, [d]
4298   2004 A7 00         mov bh, 0
4299   2006 E7            pop d
4300   2007 FD 3E         mov [d], bl
4301   2009             ;; if (*prog == '='){ 
4302   2009             _if68_cond:
4303   2009 3B FB 32      mov d, _prog ; $prog
4304   200C 2A            mov b, [d]
4305   200D 74            mov d, b
4306   200E 32            mov bl, [d]
4307   200F A7 00         mov bh, 0
4308   2011             ; START RELATIONAL
4309   2011 D7            push a
4310   2012 11            mov a, b
4311   2013 26 3D 00      mov b, $3d
4312   2016 B0            cmp a, b
4313   2017 FD 71         seq ; ==
4314   2019 E4            pop a
4315   201A             ; END RELATIONAL
4316   201A C0 00 00      cmp b, 0
4317   201D C6 53 20      je _if68_else
4318   2020             _if68_true:
4319   2020             ;; *t++ = *prog++; 
4320   2020 FA FF FF      lea d, [bp + -1] ; $t
4321   2023 2A            mov b, [d]
4322   2024 FD 79         mov g, b
4323   2026 FD 77         inc b
4324   2028 FA FF FF      lea d, [bp + -1] ; $t
4325   202B FD 43         mov [d], b
4326   202D FD 27         mov b, g
4327   202F D8            push b
4328   2030 3B FB 32      mov d, _prog ; $prog
4329   2033 2A            mov b, [d]
4330   2034 FD 79         mov g, b
4331   2036 FD 77         inc b
4332   2038 3B FB 32      mov d, _prog ; $prog
4333   203B FD 43         mov [d], b
4334   203D FD 27         mov b, g
4335   203F 74            mov d, b
4336   2040 32            mov bl, [d]
4337   2041 A7 00         mov bh, 0
4338   2043 E7            pop d
4339   2044 FD 3E         mov [d], bl
4340   2046             ;; tok = EQUAL; 
4341   2046 3B F7 32      mov d, _tok ; $tok
4342   2049 DA            push d
4343   204A 26 08 00      mov b, 8; EQUAL
4344   204D E7            pop d
4345   204E FD 43         mov [d], b
4346   2050 0A 5D 20      jmp _if68_exit
4347   2053             _if68_else:
4348   2053             ;; tok = ASSIGNMENT; 
4349   2053 3B F7 32      mov d, _tok ; $tok
4350   2056 DA            push d
4351   2057 26 11 00      mov b, 17; ASSIGNMENT
4352   205A E7            pop d
4353   205B FD 43         mov [d], b
4354   205D             _if68_exit:
4355   205D             ;; toktype = DELIMITER;   
4356   205D 3B F9 32      mov d, _toktype ; $toktype
4357   2060 DA            push d
4358   2061 26 01 00      mov b, 1; DELIMITER
4359   2064 E7            pop d
4360   2065 FD 43         mov [d], b
4361   2067 0A 94 29      jmp _if67_exit
4362   206A             _if67_else:
4363   206A             ;; if(*prog == '&'){ 
4364   206A             _if69_cond:
4365   206A 3B FB 32      mov d, _prog ; $prog
4366   206D 2A            mov b, [d]
4367   206E 74            mov d, b
4368   206F 32            mov bl, [d]
4369   2070 A7 00         mov bh, 0
4370   2072             ; START RELATIONAL
4371   2072 D7            push a
4372   2073 11            mov a, b
4373   2074 26 26 00      mov b, $26
4374   2077 B0            cmp a, b
4375   2078 FD 71         seq ; ==
4376   207A E4            pop a
4377   207B             ; END RELATIONAL
4378   207B C0 00 00      cmp b, 0
4379   207E C6 08 21      je _if69_else
4380   2081             _if69_true:
4381   2081             ;; *t++ = *prog++; 
4382   2081 FA FF FF      lea d, [bp + -1] ; $t
4383   2084 2A            mov b, [d]
4384   2085 FD 79         mov g, b
4385   2087 FD 77         inc b
4386   2089 FA FF FF      lea d, [bp + -1] ; $t
4387   208C FD 43         mov [d], b
4388   208E FD 27         mov b, g
4389   2090 D8            push b
4390   2091 3B FB 32      mov d, _prog ; $prog
4391   2094 2A            mov b, [d]
4392   2095 FD 79         mov g, b
4393   2097 FD 77         inc b
4394   2099 3B FB 32      mov d, _prog ; $prog
4395   209C FD 43         mov [d], b
4396   209E FD 27         mov b, g
4397   20A0 74            mov d, b
4398   20A1 32            mov bl, [d]
4399   20A2 A7 00         mov bh, 0
4400   20A4 E7            pop d
4401   20A5 FD 3E         mov [d], bl
4402   20A7             ;; if(*prog == '&'){ 
4403   20A7             _if70_cond:
4404   20A7 3B FB 32      mov d, _prog ; $prog
4405   20AA 2A            mov b, [d]
4406   20AB 74            mov d, b
4407   20AC 32            mov bl, [d]
4408   20AD A7 00         mov bh, 0
4409   20AF             ; START RELATIONAL
4410   20AF D7            push a
4411   20B0 11            mov a, b
4412   20B1 26 26 00      mov b, $26
4413   20B4 B0            cmp a, b
4414   20B5 FD 71         seq ; ==
4415   20B7 E4            pop a
4416   20B8             ; END RELATIONAL
4417   20B8 C0 00 00      cmp b, 0
4418   20BB C6 F1 20      je _if70_else
4419   20BE             _if70_true:
4420   20BE             ;; *t++ = *prog++; 
4421   20BE FA FF FF      lea d, [bp + -1] ; $t
4422   20C1 2A            mov b, [d]
4423   20C2 FD 79         mov g, b
4424   20C4 FD 77         inc b
4425   20C6 FA FF FF      lea d, [bp + -1] ; $t
4426   20C9 FD 43         mov [d], b
4427   20CB FD 27         mov b, g
4428   20CD D8            push b
4429   20CE 3B FB 32      mov d, _prog ; $prog
4430   20D1 2A            mov b, [d]
4431   20D2 FD 79         mov g, b
4432   20D4 FD 77         inc b
4433   20D6 3B FB 32      mov d, _prog ; $prog
4434   20D9 FD 43         mov [d], b
4435   20DB FD 27         mov b, g
4436   20DD 74            mov d, b
4437   20DE 32            mov bl, [d]
4438   20DF A7 00         mov bh, 0
4439   20E1 E7            pop d
4440   20E2 FD 3E         mov [d], bl
4441   20E4             ;; tok = LOGICAL_AND; 
4442   20E4 3B F7 32      mov d, _tok ; $tok
4443   20E7 DA            push d
4444   20E8 26 0E 00      mov b, 14; LOGICAL_AND
4445   20EB E7            pop d
4446   20EC FD 43         mov [d], b
4447   20EE 0A FB 20      jmp _if70_exit
4448   20F1             _if70_else:
4449   20F1             ;; tok = AMPERSAND; 
4450   20F1 3B F7 32      mov d, _tok ; $tok
4451   20F4 DA            push d
4452   20F5 26 16 00      mov b, 22; AMPERSAND
4453   20F8 E7            pop d
4454   20F9 FD 43         mov [d], b
4455   20FB             _if70_exit:
4456   20FB             ;; toktype = DELIMITER;   
4457   20FB 3B F9 32      mov d, _toktype ; $toktype
4458   20FE DA            push d
4459   20FF 26 01 00      mov b, 1; DELIMITER
4460   2102 E7            pop d
4461   2103 FD 43         mov [d], b
4462   2105 0A 94 29      jmp _if69_exit
4463   2108             _if69_else:
4464   2108             ;; if(*prog == '|'){ 
4465   2108             _if71_cond:
4466   2108 3B FB 32      mov d, _prog ; $prog
4467   210B 2A            mov b, [d]
4468   210C 74            mov d, b
4469   210D 32            mov bl, [d]
4470   210E A7 00         mov bh, 0
4471   2110             ; START RELATIONAL
4472   2110 D7            push a
4473   2111 11            mov a, b
4474   2112 26 7C 00      mov b, $7c
4475   2115 B0            cmp a, b
4476   2116 FD 71         seq ; ==
4477   2118 E4            pop a
4478   2119             ; END RELATIONAL
4479   2119 C0 00 00      cmp b, 0
4480   211C C6 A6 21      je _if71_else
4481   211F             _if71_true:
4482   211F             ;; *t++ = *prog++; 
4483   211F FA FF FF      lea d, [bp + -1] ; $t
4484   2122 2A            mov b, [d]
4485   2123 FD 79         mov g, b
4486   2125 FD 77         inc b
4487   2127 FA FF FF      lea d, [bp + -1] ; $t
4488   212A FD 43         mov [d], b
4489   212C FD 27         mov b, g
4490   212E D8            push b
4491   212F 3B FB 32      mov d, _prog ; $prog
4492   2132 2A            mov b, [d]
4493   2133 FD 79         mov g, b
4494   2135 FD 77         inc b
4495   2137 3B FB 32      mov d, _prog ; $prog
4496   213A FD 43         mov [d], b
4497   213C FD 27         mov b, g
4498   213E 74            mov d, b
4499   213F 32            mov bl, [d]
4500   2140 A7 00         mov bh, 0
4501   2142 E7            pop d
4502   2143 FD 3E         mov [d], bl
4503   2145             ;; if (*prog == '|'){ 
4504   2145             _if72_cond:
4505   2145 3B FB 32      mov d, _prog ; $prog
4506   2148 2A            mov b, [d]
4507   2149 74            mov d, b
4508   214A 32            mov bl, [d]
4509   214B A7 00         mov bh, 0
4510   214D             ; START RELATIONAL
4511   214D D7            push a
4512   214E 11            mov a, b
4513   214F 26 7C 00      mov b, $7c
4514   2152 B0            cmp a, b
4515   2153 FD 71         seq ; ==
4516   2155 E4            pop a
4517   2156             ; END RELATIONAL
4518   2156 C0 00 00      cmp b, 0
4519   2159 C6 8F 21      je _if72_else
4520   215C             _if72_true:
4521   215C             ;; *t++ = *prog++; 
4522   215C FA FF FF      lea d, [bp + -1] ; $t
4523   215F 2A            mov b, [d]
4524   2160 FD 79         mov g, b
4525   2162 FD 77         inc b
4526   2164 FA FF FF      lea d, [bp + -1] ; $t
4527   2167 FD 43         mov [d], b
4528   2169 FD 27         mov b, g
4529   216B D8            push b
4530   216C 3B FB 32      mov d, _prog ; $prog
4531   216F 2A            mov b, [d]
4532   2170 FD 79         mov g, b
4533   2172 FD 77         inc b
4534   2174 3B FB 32      mov d, _prog ; $prog
4535   2177 FD 43         mov [d], b
4536   2179 FD 27         mov b, g
4537   217B 74            mov d, b
4538   217C 32            mov bl, [d]
4539   217D A7 00         mov bh, 0
4540   217F E7            pop d
4541   2180 FD 3E         mov [d], bl
4542   2182             ;; tok = LOGICAL_OR; 
4543   2182 3B F7 32      mov d, _tok ; $tok
4544   2185 DA            push d
4545   2186 26 0F 00      mov b, 15; LOGICAL_OR
4546   2189 E7            pop d
4547   218A FD 43         mov [d], b
4548   218C 0A 99 21      jmp _if72_exit
4549   218F             _if72_else:
4550   218F             ;; tok = BITWISE_OR; 
4551   218F 3B F7 32      mov d, _tok ; $tok
4552   2192 DA            push d
4553   2193 26 18 00      mov b, 24; BITWISE_OR
4554   2196 E7            pop d
4555   2197 FD 43         mov [d], b
4556   2199             _if72_exit:
4557   2199             ;; toktype = DELIMITER;   
4558   2199 3B F9 32      mov d, _toktype ; $toktype
4559   219C DA            push d
4560   219D 26 01 00      mov b, 1; DELIMITER
4561   21A0 E7            pop d
4562   21A1 FD 43         mov [d], b
4563   21A3 0A 94 29      jmp _if71_exit
4564   21A6             _if71_else:
4565   21A6             ;; if(*prog == '~'){ 
4566   21A6             _if73_cond:
4567   21A6 3B FB 32      mov d, _prog ; $prog
4568   21A9 2A            mov b, [d]
4569   21AA 74            mov d, b
4570   21AB 32            mov bl, [d]
4571   21AC A7 00         mov bh, 0
4572   21AE             ; START RELATIONAL
4573   21AE D7            push a
4574   21AF 11            mov a, b
4575   21B0 26 7E 00      mov b, $7e
4576   21B3 B0            cmp a, b
4577   21B4 FD 71         seq ; ==
4578   21B6 E4            pop a
4579   21B7             ; END RELATIONAL
4580   21B7 C0 00 00      cmp b, 0
4581   21BA C6 FA 21      je _if73_else
4582   21BD             _if73_true:
4583   21BD             ;; *t++ = *prog++; 
4584   21BD FA FF FF      lea d, [bp + -1] ; $t
4585   21C0 2A            mov b, [d]
4586   21C1 FD 79         mov g, b
4587   21C3 FD 77         inc b
4588   21C5 FA FF FF      lea d, [bp + -1] ; $t
4589   21C8 FD 43         mov [d], b
4590   21CA FD 27         mov b, g
4591   21CC D8            push b
4592   21CD 3B FB 32      mov d, _prog ; $prog
4593   21D0 2A            mov b, [d]
4594   21D1 FD 79         mov g, b
4595   21D3 FD 77         inc b
4596   21D5 3B FB 32      mov d, _prog ; $prog
4597   21D8 FD 43         mov [d], b
4598   21DA FD 27         mov b, g
4599   21DC 74            mov d, b
4600   21DD 32            mov bl, [d]
4601   21DE A7 00         mov bh, 0
4602   21E0 E7            pop d
4603   21E1 FD 3E         mov [d], bl
4604   21E3             ;; tok = BITWISE_NOT; 
4605   21E3 3B F7 32      mov d, _tok ; $tok
4606   21E6 DA            push d
4607   21E7 26 19 00      mov b, 25; BITWISE_NOT
4608   21EA E7            pop d
4609   21EB FD 43         mov [d], b
4610   21ED             ;; toktype = DELIMITER;   
4611   21ED 3B F9 32      mov d, _toktype ; $toktype
4612   21F0 DA            push d
4613   21F1 26 01 00      mov b, 1; DELIMITER
4614   21F4 E7            pop d
4615   21F5 FD 43         mov [d], b
4616   21F7 0A 94 29      jmp _if73_exit
4617   21FA             _if73_else:
4618   21FA             ;; if(*prog == '<'){ 
4619   21FA             _if74_cond:
4620   21FA 3B FB 32      mov d, _prog ; $prog
4621   21FD 2A            mov b, [d]
4622   21FE 74            mov d, b
4623   21FF 32            mov bl, [d]
4624   2200 A7 00         mov bh, 0
4625   2202             ; START RELATIONAL
4626   2202 D7            push a
4627   2203 11            mov a, b
4628   2204 26 3C 00      mov b, $3c
4629   2207 B0            cmp a, b
4630   2208 FD 71         seq ; ==
4631   220A E4            pop a
4632   220B             ; END RELATIONAL
4633   220B C0 00 00      cmp b, 0
4634   220E C6 E2 22      je _if74_else
4635   2211             _if74_true:
4636   2211             ;; *t++ = *prog++; 
4637   2211 FA FF FF      lea d, [bp + -1] ; $t
4638   2214 2A            mov b, [d]
4639   2215 FD 79         mov g, b
4640   2217 FD 77         inc b
4641   2219 FA FF FF      lea d, [bp + -1] ; $t
4642   221C FD 43         mov [d], b
4643   221E FD 27         mov b, g
4644   2220 D8            push b
4645   2221 3B FB 32      mov d, _prog ; $prog
4646   2224 2A            mov b, [d]
4647   2225 FD 79         mov g, b
4648   2227 FD 77         inc b
4649   2229 3B FB 32      mov d, _prog ; $prog
4650   222C FD 43         mov [d], b
4651   222E FD 27         mov b, g
4652   2230 74            mov d, b
4653   2231 32            mov bl, [d]
4654   2232 A7 00         mov bh, 0
4655   2234 E7            pop d
4656   2235 FD 3E         mov [d], bl
4657   2237             ;; if (*prog == '='){ 
4658   2237             _if75_cond:
4659   2237 3B FB 32      mov d, _prog ; $prog
4660   223A 2A            mov b, [d]
4661   223B 74            mov d, b
4662   223C 32            mov bl, [d]
4663   223D A7 00         mov bh, 0
4664   223F             ; START RELATIONAL
4665   223F D7            push a
4666   2240 11            mov a, b
4667   2241 26 3D 00      mov b, $3d
4668   2244 B0            cmp a, b
4669   2245 FD 71         seq ; ==
4670   2247 E4            pop a
4671   2248             ; END RELATIONAL
4672   2248 C0 00 00      cmp b, 0
4673   224B C6 81 22      je _if75_else
4674   224E             _if75_true:
4675   224E             ;; *t++ = *prog++; 
4676   224E FA FF FF      lea d, [bp + -1] ; $t
4677   2251 2A            mov b, [d]
4678   2252 FD 79         mov g, b
4679   2254 FD 77         inc b
4680   2256 FA FF FF      lea d, [bp + -1] ; $t
4681   2259 FD 43         mov [d], b
4682   225B FD 27         mov b, g
4683   225D D8            push b
4684   225E 3B FB 32      mov d, _prog ; $prog
4685   2261 2A            mov b, [d]
4686   2262 FD 79         mov g, b
4687   2264 FD 77         inc b
4688   2266 3B FB 32      mov d, _prog ; $prog
4689   2269 FD 43         mov [d], b
4690   226B FD 27         mov b, g
4691   226D 74            mov d, b
4692   226E 32            mov bl, [d]
4693   226F A7 00         mov bh, 0
4694   2271 E7            pop d
4695   2272 FD 3E         mov [d], bl
4696   2274             ;; tok = LESS_THAN_OR_EQUAL; 
4697   2274 3B F7 32      mov d, _tok ; $tok
4698   2277 DA            push d
4699   2278 26 0B 00      mov b, 11; LESS_THAN_OR_EQUAL
4700   227B E7            pop d
4701   227C FD 43         mov [d], b
4702   227E 0A D5 22      jmp _if75_exit
4703   2281             _if75_else:
4704   2281             ;; if (*prog == '<'){ 
4705   2281             _if76_cond:
4706   2281 3B FB 32      mov d, _prog ; $prog
4707   2284 2A            mov b, [d]
4708   2285 74            mov d, b
4709   2286 32            mov bl, [d]
4710   2287 A7 00         mov bh, 0
4711   2289             ; START RELATIONAL
4712   2289 D7            push a
4713   228A 11            mov a, b
4714   228B 26 3C 00      mov b, $3c
4715   228E B0            cmp a, b
4716   228F FD 71         seq ; ==
4717   2291 E4            pop a
4718   2292             ; END RELATIONAL
4719   2292 C0 00 00      cmp b, 0
4720   2295 C6 CB 22      je _if76_else
4721   2298             _if76_true:
4722   2298             ;; *t++ = *prog++; 
4723   2298 FA FF FF      lea d, [bp + -1] ; $t
4724   229B 2A            mov b, [d]
4725   229C FD 79         mov g, b
4726   229E FD 77         inc b
4727   22A0 FA FF FF      lea d, [bp + -1] ; $t
4728   22A3 FD 43         mov [d], b
4729   22A5 FD 27         mov b, g
4730   22A7 D8            push b
4731   22A8 3B FB 32      mov d, _prog ; $prog
4732   22AB 2A            mov b, [d]
4733   22AC FD 79         mov g, b
4734   22AE FD 77         inc b
4735   22B0 3B FB 32      mov d, _prog ; $prog
4736   22B3 FD 43         mov [d], b
4737   22B5 FD 27         mov b, g
4738   22B7 74            mov d, b
4739   22B8 32            mov bl, [d]
4740   22B9 A7 00         mov bh, 0
4741   22BB E7            pop d
4742   22BC FD 3E         mov [d], bl
4743   22BE             ;; tok = BITWISE_SHL; 
4744   22BE 3B F7 32      mov d, _tok ; $tok
4745   22C1 DA            push d
4746   22C2 26 1A 00      mov b, 26; BITWISE_SHL
4747   22C5 E7            pop d
4748   22C6 FD 43         mov [d], b
4749   22C8 0A D5 22      jmp _if76_exit
4750   22CB             _if76_else:
4751   22CB             ;; tok = LESS_THAN; 
4752   22CB 3B F7 32      mov d, _tok ; $tok
4753   22CE DA            push d
4754   22CF 26 0A 00      mov b, 10; LESS_THAN
4755   22D2 E7            pop d
4756   22D3 FD 43         mov [d], b
4757   22D5             _if76_exit:
4758   22D5             _if75_exit:
4759   22D5             ;; toktype = DELIMITER;   
4760   22D5 3B F9 32      mov d, _toktype ; $toktype
4761   22D8 DA            push d
4762   22D9 26 01 00      mov b, 1; DELIMITER
4763   22DC E7            pop d
4764   22DD FD 43         mov [d], b
4765   22DF 0A 94 29      jmp _if74_exit
4766   22E2             _if74_else:
4767   22E2             ;; if(*prog == '>'){ 
4768   22E2             _if77_cond:
4769   22E2 3B FB 32      mov d, _prog ; $prog
4770   22E5 2A            mov b, [d]
4771   22E6 74            mov d, b
4772   22E7 32            mov bl, [d]
4773   22E8 A7 00         mov bh, 0
4774   22EA             ; START RELATIONAL
4775   22EA D7            push a
4776   22EB 11            mov a, b
4777   22EC 26 3E 00      mov b, $3e
4778   22EF B0            cmp a, b
4779   22F0 FD 71         seq ; ==
4780   22F2 E4            pop a
4781   22F3             ; END RELATIONAL
4782   22F3 C0 00 00      cmp b, 0
4783   22F6 C6 CA 23      je _if77_else
4784   22F9             _if77_true:
4785   22F9             ;; *t++ = *prog++; 
4786   22F9 FA FF FF      lea d, [bp + -1] ; $t
4787   22FC 2A            mov b, [d]
4788   22FD FD 79         mov g, b
4789   22FF FD 77         inc b
4790   2301 FA FF FF      lea d, [bp + -1] ; $t
4791   2304 FD 43         mov [d], b
4792   2306 FD 27         mov b, g
4793   2308 D8            push b
4794   2309 3B FB 32      mov d, _prog ; $prog
4795   230C 2A            mov b, [d]
4796   230D FD 79         mov g, b
4797   230F FD 77         inc b
4798   2311 3B FB 32      mov d, _prog ; $prog
4799   2314 FD 43         mov [d], b
4800   2316 FD 27         mov b, g
4801   2318 74            mov d, b
4802   2319 32            mov bl, [d]
4803   231A A7 00         mov bh, 0
4804   231C E7            pop d
4805   231D FD 3E         mov [d], bl
4806   231F             ;; if (*prog == '='){ 
4807   231F             _if78_cond:
4808   231F 3B FB 32      mov d, _prog ; $prog
4809   2322 2A            mov b, [d]
4810   2323 74            mov d, b
4811   2324 32            mov bl, [d]
4812   2325 A7 00         mov bh, 0
4813   2327             ; START RELATIONAL
4814   2327 D7            push a
4815   2328 11            mov a, b
4816   2329 26 3D 00      mov b, $3d
4817   232C B0            cmp a, b
4818   232D FD 71         seq ; ==
4819   232F E4            pop a
4820   2330             ; END RELATIONAL
4821   2330 C0 00 00      cmp b, 0
4822   2333 C6 69 23      je _if78_else
4823   2336             _if78_true:
4824   2336             ;; *t++ = *prog++; 
4825   2336 FA FF FF      lea d, [bp + -1] ; $t
4826   2339 2A            mov b, [d]
4827   233A FD 79         mov g, b
4828   233C FD 77         inc b
4829   233E FA FF FF      lea d, [bp + -1] ; $t
4830   2341 FD 43         mov [d], b
4831   2343 FD 27         mov b, g
4832   2345 D8            push b
4833   2346 3B FB 32      mov d, _prog ; $prog
4834   2349 2A            mov b, [d]
4835   234A FD 79         mov g, b
4836   234C FD 77         inc b
4837   234E 3B FB 32      mov d, _prog ; $prog
4838   2351 FD 43         mov [d], b
4839   2353 FD 27         mov b, g
4840   2355 74            mov d, b
4841   2356 32            mov bl, [d]
4842   2357 A7 00         mov bh, 0
4843   2359 E7            pop d
4844   235A FD 3E         mov [d], bl
4845   235C             ;; tok = GREATER_THAN_OR_EQUAL; 
4846   235C 3B F7 32      mov d, _tok ; $tok
4847   235F DA            push d
4848   2360 26 0D 00      mov b, 13; GREATER_THAN_OR_EQUAL
4849   2363 E7            pop d
4850   2364 FD 43         mov [d], b
4851   2366 0A BD 23      jmp _if78_exit
4852   2369             _if78_else:
4853   2369             ;; if (*prog == '>'){ 
4854   2369             _if79_cond:
4855   2369 3B FB 32      mov d, _prog ; $prog
4856   236C 2A            mov b, [d]
4857   236D 74            mov d, b
4858   236E 32            mov bl, [d]
4859   236F A7 00         mov bh, 0
4860   2371             ; START RELATIONAL
4861   2371 D7            push a
4862   2372 11            mov a, b
4863   2373 26 3E 00      mov b, $3e
4864   2376 B0            cmp a, b
4865   2377 FD 71         seq ; ==
4866   2379 E4            pop a
4867   237A             ; END RELATIONAL
4868   237A C0 00 00      cmp b, 0
4869   237D C6 B3 23      je _if79_else
4870   2380             _if79_true:
4871   2380             ;; *t++ = *prog++; 
4872   2380 FA FF FF      lea d, [bp + -1] ; $t
4873   2383 2A            mov b, [d]
4874   2384 FD 79         mov g, b
4875   2386 FD 77         inc b
4876   2388 FA FF FF      lea d, [bp + -1] ; $t
4877   238B FD 43         mov [d], b
4878   238D FD 27         mov b, g
4879   238F D8            push b
4880   2390 3B FB 32      mov d, _prog ; $prog
4881   2393 2A            mov b, [d]
4882   2394 FD 79         mov g, b
4883   2396 FD 77         inc b
4884   2398 3B FB 32      mov d, _prog ; $prog
4885   239B FD 43         mov [d], b
4886   239D FD 27         mov b, g
4887   239F 74            mov d, b
4888   23A0 32            mov bl, [d]
4889   23A1 A7 00         mov bh, 0
4890   23A3 E7            pop d
4891   23A4 FD 3E         mov [d], bl
4892   23A6             ;; tok = BITWISE_SHR; 
4893   23A6 3B F7 32      mov d, _tok ; $tok
4894   23A9 DA            push d
4895   23AA 26 1B 00      mov b, 27; BITWISE_SHR
4896   23AD E7            pop d
4897   23AE FD 43         mov [d], b
4898   23B0 0A BD 23      jmp _if79_exit
4899   23B3             _if79_else:
4900   23B3             ;; tok = GREATER_THAN; 
4901   23B3 3B F7 32      mov d, _tok ; $tok
4902   23B6 DA            push d
4903   23B7 26 0C 00      mov b, 12; GREATER_THAN
4904   23BA E7            pop d
4905   23BB FD 43         mov [d], b
4906   23BD             _if79_exit:
4907   23BD             _if78_exit:
4908   23BD             ;; toktype = DELIMITER;   
4909   23BD 3B F9 32      mov d, _toktype ; $toktype
4910   23C0 DA            push d
4911   23C1 26 01 00      mov b, 1; DELIMITER
4912   23C4 E7            pop d
4913   23C5 FD 43         mov [d], b
4914   23C7 0A 94 29      jmp _if77_exit
4915   23CA             _if77_else:
4916   23CA             ;; if(*prog == '!'){ 
4917   23CA             _if80_cond:
4918   23CA 3B FB 32      mov d, _prog ; $prog
4919   23CD 2A            mov b, [d]
4920   23CE 74            mov d, b
4921   23CF 32            mov bl, [d]
4922   23D0 A7 00         mov bh, 0
4923   23D2             ; START RELATIONAL
4924   23D2 D7            push a
4925   23D3 11            mov a, b
4926   23D4 26 21 00      mov b, $21
4927   23D7 B0            cmp a, b
4928   23D8 FD 71         seq ; ==
4929   23DA E4            pop a
4930   23DB             ; END RELATIONAL
4931   23DB C0 00 00      cmp b, 0
4932   23DE C6 68 24      je _if80_else
4933   23E1             _if80_true:
4934   23E1             ;; *t++ = *prog++; 
4935   23E1 FA FF FF      lea d, [bp + -1] ; $t
4936   23E4 2A            mov b, [d]
4937   23E5 FD 79         mov g, b
4938   23E7 FD 77         inc b
4939   23E9 FA FF FF      lea d, [bp + -1] ; $t
4940   23EC FD 43         mov [d], b
4941   23EE FD 27         mov b, g
4942   23F0 D8            push b
4943   23F1 3B FB 32      mov d, _prog ; $prog
4944   23F4 2A            mov b, [d]
4945   23F5 FD 79         mov g, b
4946   23F7 FD 77         inc b
4947   23F9 3B FB 32      mov d, _prog ; $prog
4948   23FC FD 43         mov [d], b
4949   23FE FD 27         mov b, g
4950   2400 74            mov d, b
4951   2401 32            mov bl, [d]
4952   2402 A7 00         mov bh, 0
4953   2404 E7            pop d
4954   2405 FD 3E         mov [d], bl
4955   2407             ;; if(*prog == '='){ 
4956   2407             _if81_cond:
4957   2407 3B FB 32      mov d, _prog ; $prog
4958   240A 2A            mov b, [d]
4959   240B 74            mov d, b
4960   240C 32            mov bl, [d]
4961   240D A7 00         mov bh, 0
4962   240F             ; START RELATIONAL
4963   240F D7            push a
4964   2410 11            mov a, b
4965   2411 26 3D 00      mov b, $3d
4966   2414 B0            cmp a, b
4967   2415 FD 71         seq ; ==
4968   2417 E4            pop a
4969   2418             ; END RELATIONAL
4970   2418 C0 00 00      cmp b, 0
4971   241B C6 51 24      je _if81_else
4972   241E             _if81_true:
4973   241E             ;; *t++ = *prog++; 
4974   241E FA FF FF      lea d, [bp + -1] ; $t
4975   2421 2A            mov b, [d]
4976   2422 FD 79         mov g, b
4977   2424 FD 77         inc b
4978   2426 FA FF FF      lea d, [bp + -1] ; $t
4979   2429 FD 43         mov [d], b
4980   242B FD 27         mov b, g
4981   242D D8            push b
4982   242E 3B FB 32      mov d, _prog ; $prog
4983   2431 2A            mov b, [d]
4984   2432 FD 79         mov g, b
4985   2434 FD 77         inc b
4986   2436 3B FB 32      mov d, _prog ; $prog
4987   2439 FD 43         mov [d], b
4988   243B FD 27         mov b, g
4989   243D 74            mov d, b
4990   243E 32            mov bl, [d]
4991   243F A7 00         mov bh, 0
4992   2441 E7            pop d
4993   2442 FD 3E         mov [d], bl
4994   2444             ;; tok = NOT_EQUAL; 
4995   2444 3B F7 32      mov d, _tok ; $tok
4996   2447 DA            push d
4997   2448 26 09 00      mov b, 9; NOT_EQUAL
4998   244B E7            pop d
4999   244C FD 43         mov [d], b
5000   244E 0A 5B 24      jmp _if81_exit
5001   2451             _if81_else:
5002   2451             ;; tok = LOGICAL_NOT; 
5003   2451 3B F7 32      mov d, _tok ; $tok
5004   2454 DA            push d
5005   2455 26 10 00      mov b, 16; LOGICAL_NOT
5006   2458 E7            pop d
5007   2459 FD 43         mov [d], b
5008   245B             _if81_exit:
5009   245B             ;; toktype = DELIMITER;   
5010   245B 3B F9 32      mov d, _toktype ; $toktype
5011   245E DA            push d
5012   245F 26 01 00      mov b, 1; DELIMITER
5013   2462 E7            pop d
5014   2463 FD 43         mov [d], b
5015   2465 0A 94 29      jmp _if80_exit
5016   2468             _if80_else:
5017   2468             ;; if(*prog == '+'){ 
5018   2468             _if82_cond:
5019   2468 3B FB 32      mov d, _prog ; $prog
5020   246B 2A            mov b, [d]
5021   246C 74            mov d, b
5022   246D 32            mov bl, [d]
5023   246E A7 00         mov bh, 0
5024   2470             ; START RELATIONAL
5025   2470 D7            push a
5026   2471 11            mov a, b
5027   2472 26 2B 00      mov b, $2b
5028   2475 B0            cmp a, b
5029   2476 FD 71         seq ; ==
5030   2478 E4            pop a
5031   2479             ; END RELATIONAL
5032   2479 C0 00 00      cmp b, 0
5033   247C C6 06 25      je _if82_else
5034   247F             _if82_true:
5035   247F             ;; *t++ = *prog++; 
5036   247F FA FF FF      lea d, [bp + -1] ; $t
5037   2482 2A            mov b, [d]
5038   2483 FD 79         mov g, b
5039   2485 FD 77         inc b
5040   2487 FA FF FF      lea d, [bp + -1] ; $t
5041   248A FD 43         mov [d], b
5042   248C FD 27         mov b, g
5043   248E D8            push b
5044   248F 3B FB 32      mov d, _prog ; $prog
5045   2492 2A            mov b, [d]
5046   2493 FD 79         mov g, b
5047   2495 FD 77         inc b
5048   2497 3B FB 32      mov d, _prog ; $prog
5049   249A FD 43         mov [d], b
5050   249C FD 27         mov b, g
5051   249E 74            mov d, b
5052   249F 32            mov bl, [d]
5053   24A0 A7 00         mov bh, 0
5054   24A2 E7            pop d
5055   24A3 FD 3E         mov [d], bl
5056   24A5             ;; if(*prog == '+'){ 
5057   24A5             _if83_cond:
5058   24A5 3B FB 32      mov d, _prog ; $prog
5059   24A8 2A            mov b, [d]
5060   24A9 74            mov d, b
5061   24AA 32            mov bl, [d]
5062   24AB A7 00         mov bh, 0
5063   24AD             ; START RELATIONAL
5064   24AD D7            push a
5065   24AE 11            mov a, b
5066   24AF 26 2B 00      mov b, $2b
5067   24B2 B0            cmp a, b
5068   24B3 FD 71         seq ; ==
5069   24B5 E4            pop a
5070   24B6             ; END RELATIONAL
5071   24B6 C0 00 00      cmp b, 0
5072   24B9 C6 EF 24      je _if83_else
5073   24BC             _if83_true:
5074   24BC             ;; *t++ = *prog++; 
5075   24BC FA FF FF      lea d, [bp + -1] ; $t
5076   24BF 2A            mov b, [d]
5077   24C0 FD 79         mov g, b
5078   24C2 FD 77         inc b
5079   24C4 FA FF FF      lea d, [bp + -1] ; $t
5080   24C7 FD 43         mov [d], b
5081   24C9 FD 27         mov b, g
5082   24CB D8            push b
5083   24CC 3B FB 32      mov d, _prog ; $prog
5084   24CF 2A            mov b, [d]
5085   24D0 FD 79         mov g, b
5086   24D2 FD 77         inc b
5087   24D4 3B FB 32      mov d, _prog ; $prog
5088   24D7 FD 43         mov [d], b
5089   24D9 FD 27         mov b, g
5090   24DB 74            mov d, b
5091   24DC 32            mov bl, [d]
5092   24DD A7 00         mov bh, 0
5093   24DF E7            pop d
5094   24E0 FD 3E         mov [d], bl
5095   24E2             ;; tok = INCREMENT; 
5096   24E2 3B F7 32      mov d, _tok ; $tok
5097   24E5 DA            push d
5098   24E6 26 05 00      mov b, 5; INCREMENT
5099   24E9 E7            pop d
5100   24EA FD 43         mov [d], b
5101   24EC 0A F9 24      jmp _if83_exit
5102   24EF             _if83_else:
5103   24EF             ;; tok = PLUS; 
5104   24EF 3B F7 32      mov d, _tok ; $tok
5105   24F2 DA            push d
5106   24F3 26 01 00      mov b, 1; PLUS
5107   24F6 E7            pop d
5108   24F7 FD 43         mov [d], b
5109   24F9             _if83_exit:
5110   24F9             ;; toktype = DELIMITER;   
5111   24F9 3B F9 32      mov d, _toktype ; $toktype
5112   24FC DA            push d
5113   24FD 26 01 00      mov b, 1; DELIMITER
5114   2500 E7            pop d
5115   2501 FD 43         mov [d], b
5116   2503 0A 94 29      jmp _if82_exit
5117   2506             _if82_else:
5118   2506             ;; if(*prog == '-'){ 
5119   2506             _if84_cond:
5120   2506 3B FB 32      mov d, _prog ; $prog
5121   2509 2A            mov b, [d]
5122   250A 74            mov d, b
5123   250B 32            mov bl, [d]
5124   250C A7 00         mov bh, 0
5125   250E             ; START RELATIONAL
5126   250E D7            push a
5127   250F 11            mov a, b
5128   2510 26 2D 00      mov b, $2d
5129   2513 B0            cmp a, b
5130   2514 FD 71         seq ; ==
5131   2516 E4            pop a
5132   2517             ; END RELATIONAL
5133   2517 C0 00 00      cmp b, 0
5134   251A C6 A4 25      je _if84_else
5135   251D             _if84_true:
5136   251D             ;; *t++ = *prog++; 
5137   251D FA FF FF      lea d, [bp + -1] ; $t
5138   2520 2A            mov b, [d]
5139   2521 FD 79         mov g, b
5140   2523 FD 77         inc b
5141   2525 FA FF FF      lea d, [bp + -1] ; $t
5142   2528 FD 43         mov [d], b
5143   252A FD 27         mov b, g
5144   252C D8            push b
5145   252D 3B FB 32      mov d, _prog ; $prog
5146   2530 2A            mov b, [d]
5147   2531 FD 79         mov g, b
5148   2533 FD 77         inc b
5149   2535 3B FB 32      mov d, _prog ; $prog
5150   2538 FD 43         mov [d], b
5151   253A FD 27         mov b, g
5152   253C 74            mov d, b
5153   253D 32            mov bl, [d]
5154   253E A7 00         mov bh, 0
5155   2540 E7            pop d
5156   2541 FD 3E         mov [d], bl
5157   2543             ;; if(*prog == '-'){ 
5158   2543             _if85_cond:
5159   2543 3B FB 32      mov d, _prog ; $prog
5160   2546 2A            mov b, [d]
5161   2547 74            mov d, b
5162   2548 32            mov bl, [d]
5163   2549 A7 00         mov bh, 0
5164   254B             ; START RELATIONAL
5165   254B D7            push a
5166   254C 11            mov a, b
5167   254D 26 2D 00      mov b, $2d
5168   2550 B0            cmp a, b
5169   2551 FD 71         seq ; ==
5170   2553 E4            pop a
5171   2554             ; END RELATIONAL
5172   2554 C0 00 00      cmp b, 0
5173   2557 C6 8D 25      je _if85_else
5174   255A             _if85_true:
5175   255A             ;; *t++ = *prog++; 
5176   255A FA FF FF      lea d, [bp + -1] ; $t
5177   255D 2A            mov b, [d]
5178   255E FD 79         mov g, b
5179   2560 FD 77         inc b
5180   2562 FA FF FF      lea d, [bp + -1] ; $t
5181   2565 FD 43         mov [d], b
5182   2567 FD 27         mov b, g
5183   2569 D8            push b
5184   256A 3B FB 32      mov d, _prog ; $prog
5185   256D 2A            mov b, [d]
5186   256E FD 79         mov g, b
5187   2570 FD 77         inc b
5188   2572 3B FB 32      mov d, _prog ; $prog
5189   2575 FD 43         mov [d], b
5190   2577 FD 27         mov b, g
5191   2579 74            mov d, b
5192   257A 32            mov bl, [d]
5193   257B A7 00         mov bh, 0
5194   257D E7            pop d
5195   257E FD 3E         mov [d], bl
5196   2580             ;; tok = DECREMENT; 
5197   2580 3B F7 32      mov d, _tok ; $tok
5198   2583 DA            push d
5199   2584 26 06 00      mov b, 6; DECREMENT
5200   2587 E7            pop d
5201   2588 FD 43         mov [d], b
5202   258A 0A 97 25      jmp _if85_exit
5203   258D             _if85_else:
5204   258D             ;; tok = MINUS; 
5205   258D 3B F7 32      mov d, _tok ; $tok
5206   2590 DA            push d
5207   2591 26 02 00      mov b, 2; MINUS
5208   2594 E7            pop d
5209   2595 FD 43         mov [d], b
5210   2597             _if85_exit:
5211   2597             ;; toktype = DELIMITER;   
5212   2597 3B F9 32      mov d, _toktype ; $toktype
5213   259A DA            push d
5214   259B 26 01 00      mov b, 1; DELIMITER
5215   259E E7            pop d
5216   259F FD 43         mov [d], b
5217   25A1 0A 94 29      jmp _if84_exit
5218   25A4             _if84_else:
5219   25A4             ;; if(*prog == '$'){ 
5220   25A4             _if86_cond:
5221   25A4 3B FB 32      mov d, _prog ; $prog
5222   25A7 2A            mov b, [d]
5223   25A8 74            mov d, b
5224   25A9 32            mov bl, [d]
5225   25AA A7 00         mov bh, 0
5226   25AC             ; START RELATIONAL
5227   25AC D7            push a
5228   25AD 11            mov a, b
5229   25AE 26 24 00      mov b, $24
5230   25B1 B0            cmp a, b
5231   25B2 FD 71         seq ; ==
5232   25B4 E4            pop a
5233   25B5             ; END RELATIONAL
5234   25B5 C0 00 00      cmp b, 0
5235   25B8 C6 F8 25      je _if86_else
5236   25BB             _if86_true:
5237   25BB             ;; *t++ = *prog++; 
5238   25BB FA FF FF      lea d, [bp + -1] ; $t
5239   25BE 2A            mov b, [d]
5240   25BF FD 79         mov g, b
5241   25C1 FD 77         inc b
5242   25C3 FA FF FF      lea d, [bp + -1] ; $t
5243   25C6 FD 43         mov [d], b
5244   25C8 FD 27         mov b, g
5245   25CA D8            push b
5246   25CB 3B FB 32      mov d, _prog ; $prog
5247   25CE 2A            mov b, [d]
5248   25CF FD 79         mov g, b
5249   25D1 FD 77         inc b
5250   25D3 3B FB 32      mov d, _prog ; $prog
5251   25D6 FD 43         mov [d], b
5252   25D8 FD 27         mov b, g
5253   25DA 74            mov d, b
5254   25DB 32            mov bl, [d]
5255   25DC A7 00         mov bh, 0
5256   25DE E7            pop d
5257   25DF FD 3E         mov [d], bl
5258   25E1             ;; tok = DOLLAR; 
5259   25E1 3B F7 32      mov d, _tok ; $tok
5260   25E4 DA            push d
5261   25E5 26 12 00      mov b, 18; DOLLAR
5262   25E8 E7            pop d
5263   25E9 FD 43         mov [d], b
5264   25EB             ;; toktype = DELIMITER;   
5265   25EB 3B F9 32      mov d, _toktype ; $toktype
5266   25EE DA            push d
5267   25EF 26 01 00      mov b, 1; DELIMITER
5268   25F2 E7            pop d
5269   25F3 FD 43         mov [d], b
5270   25F5 0A 94 29      jmp _if86_exit
5271   25F8             _if86_else:
5272   25F8             ;; if(*prog == '^'){ 
5273   25F8             _if87_cond:
5274   25F8 3B FB 32      mov d, _prog ; $prog
5275   25FB 2A            mov b, [d]
5276   25FC 74            mov d, b
5277   25FD 32            mov bl, [d]
5278   25FE A7 00         mov bh, 0
5279   2600             ; START RELATIONAL
5280   2600 D7            push a
5281   2601 11            mov a, b
5282   2602 26 5E 00      mov b, $5e
5283   2605 B0            cmp a, b
5284   2606 FD 71         seq ; ==
5285   2608 E4            pop a
5286   2609             ; END RELATIONAL
5287   2609 C0 00 00      cmp b, 0
5288   260C C6 4C 26      je _if87_else
5289   260F             _if87_true:
5290   260F             ;; *t++ = *prog++; 
5291   260F FA FF FF      lea d, [bp + -1] ; $t
5292   2612 2A            mov b, [d]
5293   2613 FD 79         mov g, b
5294   2615 FD 77         inc b
5295   2617 FA FF FF      lea d, [bp + -1] ; $t
5296   261A FD 43         mov [d], b
5297   261C FD 27         mov b, g
5298   261E D8            push b
5299   261F 3B FB 32      mov d, _prog ; $prog
5300   2622 2A            mov b, [d]
5301   2623 FD 79         mov g, b
5302   2625 FD 77         inc b
5303   2627 3B FB 32      mov d, _prog ; $prog
5304   262A FD 43         mov [d], b
5305   262C FD 27         mov b, g
5306   262E 74            mov d, b
5307   262F 32            mov bl, [d]
5308   2630 A7 00         mov bh, 0
5309   2632 E7            pop d
5310   2633 FD 3E         mov [d], bl
5311   2635             ;; tok = BITWISE_XOR; 
5312   2635 3B F7 32      mov d, _tok ; $tok
5313   2638 DA            push d
5314   2639 26 17 00      mov b, 23; BITWISE_XOR
5315   263C E7            pop d
5316   263D FD 43         mov [d], b
5317   263F             ;; toktype = DELIMITER;   
5318   263F 3B F9 32      mov d, _toktype ; $toktype
5319   2642 DA            push d
5320   2643 26 01 00      mov b, 1; DELIMITER
5321   2646 E7            pop d
5322   2647 FD 43         mov [d], b
5323   2649 0A 94 29      jmp _if87_exit
5324   264C             _if87_else:
5325   264C             ;; if(*prog == '@'){ 
5326   264C             _if88_cond:
5327   264C 3B FB 32      mov d, _prog ; $prog
5328   264F 2A            mov b, [d]
5329   2650 74            mov d, b
5330   2651 32            mov bl, [d]
5331   2652 A7 00         mov bh, 0
5332   2654             ; START RELATIONAL
5333   2654 D7            push a
5334   2655 11            mov a, b
5335   2656 26 40 00      mov b, $40
5336   2659 B0            cmp a, b
5337   265A FD 71         seq ; ==
5338   265C E4            pop a
5339   265D             ; END RELATIONAL
5340   265D C0 00 00      cmp b, 0
5341   2660 C6 A0 26      je _if88_else
5342   2663             _if88_true:
5343   2663             ;; *t++ = *prog++; 
5344   2663 FA FF FF      lea d, [bp + -1] ; $t
5345   2666 2A            mov b, [d]
5346   2667 FD 79         mov g, b
5347   2669 FD 77         inc b
5348   266B FA FF FF      lea d, [bp + -1] ; $t
5349   266E FD 43         mov [d], b
5350   2670 FD 27         mov b, g
5351   2672 D8            push b
5352   2673 3B FB 32      mov d, _prog ; $prog
5353   2676 2A            mov b, [d]
5354   2677 FD 79         mov g, b
5355   2679 FD 77         inc b
5356   267B 3B FB 32      mov d, _prog ; $prog
5357   267E FD 43         mov [d], b
5358   2680 FD 27         mov b, g
5359   2682 74            mov d, b
5360   2683 32            mov bl, [d]
5361   2684 A7 00         mov bh, 0
5362   2686 E7            pop d
5363   2687 FD 3E         mov [d], bl
5364   2689             ;; tok = AT; 
5365   2689 3B F7 32      mov d, _tok ; $tok
5366   268C DA            push d
5367   268D 26 14 00      mov b, 20; AT
5368   2690 E7            pop d
5369   2691 FD 43         mov [d], b
5370   2693             ;; toktype = DELIMITER;   
5371   2693 3B F9 32      mov d, _toktype ; $toktype
5372   2696 DA            push d
5373   2697 26 01 00      mov b, 1; DELIMITER
5374   269A E7            pop d
5375   269B FD 43         mov [d], b
5376   269D 0A 94 29      jmp _if88_exit
5377   26A0             _if88_else:
5378   26A0             ;; if(*prog == '*'){ 
5379   26A0             _if89_cond:
5380   26A0 3B FB 32      mov d, _prog ; $prog
5381   26A3 2A            mov b, [d]
5382   26A4 74            mov d, b
5383   26A5 32            mov bl, [d]
5384   26A6 A7 00         mov bh, 0
5385   26A8             ; START RELATIONAL
5386   26A8 D7            push a
5387   26A9 11            mov a, b
5388   26AA 26 2A 00      mov b, $2a
5389   26AD B0            cmp a, b
5390   26AE FD 71         seq ; ==
5391   26B0 E4            pop a
5392   26B1             ; END RELATIONAL
5393   26B1 C0 00 00      cmp b, 0
5394   26B4 C6 F4 26      je _if89_else
5395   26B7             _if89_true:
5396   26B7             ;; *t++ = *prog++; 
5397   26B7 FA FF FF      lea d, [bp + -1] ; $t
5398   26BA 2A            mov b, [d]
5399   26BB FD 79         mov g, b
5400   26BD FD 77         inc b
5401   26BF FA FF FF      lea d, [bp + -1] ; $t
5402   26C2 FD 43         mov [d], b
5403   26C4 FD 27         mov b, g
5404   26C6 D8            push b
5405   26C7 3B FB 32      mov d, _prog ; $prog
5406   26CA 2A            mov b, [d]
5407   26CB FD 79         mov g, b
5408   26CD FD 77         inc b
5409   26CF 3B FB 32      mov d, _prog ; $prog
5410   26D2 FD 43         mov [d], b
5411   26D4 FD 27         mov b, g
5412   26D6 74            mov d, b
5413   26D7 32            mov bl, [d]
5414   26D8 A7 00         mov bh, 0
5415   26DA E7            pop d
5416   26DB FD 3E         mov [d], bl
5417   26DD             ;; tok = STAR; 
5418   26DD 3B F7 32      mov d, _tok ; $tok
5419   26E0 DA            push d
5420   26E1 26 03 00      mov b, 3; STAR
5421   26E4 E7            pop d
5422   26E5 FD 43         mov [d], b
5423   26E7             ;; toktype = DELIMITER;   
5424   26E7 3B F9 32      mov d, _toktype ; $toktype
5425   26EA DA            push d
5426   26EB 26 01 00      mov b, 1; DELIMITER
5427   26EE E7            pop d
5428   26EF FD 43         mov [d], b
5429   26F1 0A 94 29      jmp _if89_exit
5430   26F4             _if89_else:
5431   26F4             ;; if(*prog == '/'){ 
5432   26F4             _if90_cond:
5433   26F4 3B FB 32      mov d, _prog ; $prog
5434   26F7 2A            mov b, [d]
5435   26F8 74            mov d, b
5436   26F9 32            mov bl, [d]
5437   26FA A7 00         mov bh, 0
5438   26FC             ; START RELATIONAL
5439   26FC D7            push a
5440   26FD 11            mov a, b
5441   26FE 26 2F 00      mov b, $2f
5442   2701 B0            cmp a, b
5443   2702 FD 71         seq ; ==
5444   2704 E4            pop a
5445   2705             ; END RELATIONAL
5446   2705 C0 00 00      cmp b, 0
5447   2708 C6 48 27      je _if90_else
5448   270B             _if90_true:
5449   270B             ;; *t++ = *prog++; 
5450   270B FA FF FF      lea d, [bp + -1] ; $t
5451   270E 2A            mov b, [d]
5452   270F FD 79         mov g, b
5453   2711 FD 77         inc b
5454   2713 FA FF FF      lea d, [bp + -1] ; $t
5455   2716 FD 43         mov [d], b
5456   2718 FD 27         mov b, g
5457   271A D8            push b
5458   271B 3B FB 32      mov d, _prog ; $prog
5459   271E 2A            mov b, [d]
5460   271F FD 79         mov g, b
5461   2721 FD 77         inc b
5462   2723 3B FB 32      mov d, _prog ; $prog
5463   2726 FD 43         mov [d], b
5464   2728 FD 27         mov b, g
5465   272A 74            mov d, b
5466   272B 32            mov bl, [d]
5467   272C A7 00         mov bh, 0
5468   272E E7            pop d
5469   272F FD 3E         mov [d], bl
5470   2731             ;; tok = FSLASH; 
5471   2731 3B F7 32      mov d, _tok ; $tok
5472   2734 DA            push d
5473   2735 26 04 00      mov b, 4; FSLASH
5474   2738 E7            pop d
5475   2739 FD 43         mov [d], b
5476   273B             ;; toktype = DELIMITER;   
5477   273B 3B F9 32      mov d, _toktype ; $toktype
5478   273E DA            push d
5479   273F 26 01 00      mov b, 1; DELIMITER
5480   2742 E7            pop d
5481   2743 FD 43         mov [d], b
5482   2745 0A 94 29      jmp _if90_exit
5483   2748             _if90_else:
5484   2748             ;; if(*prog == '%'){ 
5485   2748             _if91_cond:
5486   2748 3B FB 32      mov d, _prog ; $prog
5487   274B 2A            mov b, [d]
5488   274C 74            mov d, b
5489   274D 32            mov bl, [d]
5490   274E A7 00         mov bh, 0
5491   2750             ; START RELATIONAL
5492   2750 D7            push a
5493   2751 11            mov a, b
5494   2752 26 25 00      mov b, $25
5495   2755 B0            cmp a, b
5496   2756 FD 71         seq ; ==
5497   2758 E4            pop a
5498   2759             ; END RELATIONAL
5499   2759 C0 00 00      cmp b, 0
5500   275C C6 9C 27      je _if91_else
5501   275F             _if91_true:
5502   275F             ;; *t++ = *prog++; 
5503   275F FA FF FF      lea d, [bp + -1] ; $t
5504   2762 2A            mov b, [d]
5505   2763 FD 79         mov g, b
5506   2765 FD 77         inc b
5507   2767 FA FF FF      lea d, [bp + -1] ; $t
5508   276A FD 43         mov [d], b
5509   276C FD 27         mov b, g
5510   276E D8            push b
5511   276F 3B FB 32      mov d, _prog ; $prog
5512   2772 2A            mov b, [d]
5513   2773 FD 79         mov g, b
5514   2775 FD 77         inc b
5515   2777 3B FB 32      mov d, _prog ; $prog
5516   277A FD 43         mov [d], b
5517   277C FD 27         mov b, g
5518   277E 74            mov d, b
5519   277F 32            mov bl, [d]
5520   2780 A7 00         mov bh, 0
5521   2782 E7            pop d
5522   2783 FD 3E         mov [d], bl
5523   2785             ;; tok = MOD; 
5524   2785 3B F7 32      mov d, _tok ; $tok
5525   2788 DA            push d
5526   2789 26 07 00      mov b, 7; MOD
5527   278C E7            pop d
5528   278D FD 43         mov [d], b
5529   278F             ;; toktype = DELIMITER;   
5530   278F 3B F9 32      mov d, _toktype ; $toktype
5531   2792 DA            push d
5532   2793 26 01 00      mov b, 1; DELIMITER
5533   2796 E7            pop d
5534   2797 FD 43         mov [d], b
5535   2799 0A 94 29      jmp _if91_exit
5536   279C             _if91_else:
5537   279C             ;; if(*prog == '('){ 
5538   279C             _if92_cond:
5539   279C 3B FB 32      mov d, _prog ; $prog
5540   279F 2A            mov b, [d]
5541   27A0 74            mov d, b
5542   27A1 32            mov bl, [d]
5543   27A2 A7 00         mov bh, 0
5544   27A4             ; START RELATIONAL
5545   27A4 D7            push a
5546   27A5 11            mov a, b
5547   27A6 26 28 00      mov b, $28
5548   27A9 B0            cmp a, b
5549   27AA FD 71         seq ; ==
5550   27AC E4            pop a
5551   27AD             ; END RELATIONAL
5552   27AD C0 00 00      cmp b, 0
5553   27B0 C6 F0 27      je _if92_else
5554   27B3             _if92_true:
5555   27B3             ;; *t++ = *prog++; 
5556   27B3 FA FF FF      lea d, [bp + -1] ; $t
5557   27B6 2A            mov b, [d]
5558   27B7 FD 79         mov g, b
5559   27B9 FD 77         inc b
5560   27BB FA FF FF      lea d, [bp + -1] ; $t
5561   27BE FD 43         mov [d], b
5562   27C0 FD 27         mov b, g
5563   27C2 D8            push b
5564   27C3 3B FB 32      mov d, _prog ; $prog
5565   27C6 2A            mov b, [d]
5566   27C7 FD 79         mov g, b
5567   27C9 FD 77         inc b
5568   27CB 3B FB 32      mov d, _prog ; $prog
5569   27CE FD 43         mov [d], b
5570   27D0 FD 27         mov b, g
5571   27D2 74            mov d, b
5572   27D3 32            mov bl, [d]
5573   27D4 A7 00         mov bh, 0
5574   27D6 E7            pop d
5575   27D7 FD 3E         mov [d], bl
5576   27D9             ;; tok = OPENING_PAREN; 
5577   27D9 3B F7 32      mov d, _tok ; $tok
5578   27DC DA            push d
5579   27DD 26 1C 00      mov b, 28; OPENING_PAREN
5580   27E0 E7            pop d
5581   27E1 FD 43         mov [d], b
5582   27E3             ;; toktype = DELIMITER;   
5583   27E3 3B F9 32      mov d, _toktype ; $toktype
5584   27E6 DA            push d
5585   27E7 26 01 00      mov b, 1; DELIMITER
5586   27EA E7            pop d
5587   27EB FD 43         mov [d], b
5588   27ED 0A 94 29      jmp _if92_exit
5589   27F0             _if92_else:
5590   27F0             ;; if(*prog == ')'){ 
5591   27F0             _if93_cond:
5592   27F0 3B FB 32      mov d, _prog ; $prog
5593   27F3 2A            mov b, [d]
5594   27F4 74            mov d, b
5595   27F5 32            mov bl, [d]
5596   27F6 A7 00         mov bh, 0
5597   27F8             ; START RELATIONAL
5598   27F8 D7            push a
5599   27F9 11            mov a, b
5600   27FA 26 29 00      mov b, $29
5601   27FD B0            cmp a, b
5602   27FE FD 71         seq ; ==
5603   2800 E4            pop a
5604   2801             ; END RELATIONAL
5605   2801 C0 00 00      cmp b, 0
5606   2804 C6 44 28      je _if93_else
5607   2807             _if93_true:
5608   2807             ;; *t++ = *prog++; 
5609   2807 FA FF FF      lea d, [bp + -1] ; $t
5610   280A 2A            mov b, [d]
5611   280B FD 79         mov g, b
5612   280D FD 77         inc b
5613   280F FA FF FF      lea d, [bp + -1] ; $t
5614   2812 FD 43         mov [d], b
5615   2814 FD 27         mov b, g
5616   2816 D8            push b
5617   2817 3B FB 32      mov d, _prog ; $prog
5618   281A 2A            mov b, [d]
5619   281B FD 79         mov g, b
5620   281D FD 77         inc b
5621   281F 3B FB 32      mov d, _prog ; $prog
5622   2822 FD 43         mov [d], b
5623   2824 FD 27         mov b, g
5624   2826 74            mov d, b
5625   2827 32            mov bl, [d]
5626   2828 A7 00         mov bh, 0
5627   282A E7            pop d
5628   282B FD 3E         mov [d], bl
5629   282D             ;; tok = CLOSING_PAREN; 
5630   282D 3B F7 32      mov d, _tok ; $tok
5631   2830 DA            push d
5632   2831 26 1D 00      mov b, 29; CLOSING_PAREN
5633   2834 E7            pop d
5634   2835 FD 43         mov [d], b
5635   2837             ;; toktype = DELIMITER;   
5636   2837 3B F9 32      mov d, _toktype ; $toktype
5637   283A DA            push d
5638   283B 26 01 00      mov b, 1; DELIMITER
5639   283E E7            pop d
5640   283F FD 43         mov [d], b
5641   2841 0A 94 29      jmp _if93_exit
5642   2844             _if93_else:
5643   2844             ;; if(*prog == ';'){ 
5644   2844             _if94_cond:
5645   2844 3B FB 32      mov d, _prog ; $prog
5646   2847 2A            mov b, [d]
5647   2848 74            mov d, b
5648   2849 32            mov bl, [d]
5649   284A A7 00         mov bh, 0
5650   284C             ; START RELATIONAL
5651   284C D7            push a
5652   284D 11            mov a, b
5653   284E 26 3B 00      mov b, $3b
5654   2851 B0            cmp a, b
5655   2852 FD 71         seq ; ==
5656   2854 E4            pop a
5657   2855             ; END RELATIONAL
5658   2855 C0 00 00      cmp b, 0
5659   2858 C6 98 28      je _if94_else
5660   285B             _if94_true:
5661   285B             ;; *t++ = *prog++; 
5662   285B FA FF FF      lea d, [bp + -1] ; $t
5663   285E 2A            mov b, [d]
5664   285F FD 79         mov g, b
5665   2861 FD 77         inc b
5666   2863 FA FF FF      lea d, [bp + -1] ; $t
5667   2866 FD 43         mov [d], b
5668   2868 FD 27         mov b, g
5669   286A D8            push b
5670   286B 3B FB 32      mov d, _prog ; $prog
5671   286E 2A            mov b, [d]
5672   286F FD 79         mov g, b
5673   2871 FD 77         inc b
5674   2873 3B FB 32      mov d, _prog ; $prog
5675   2876 FD 43         mov [d], b
5676   2878 FD 27         mov b, g
5677   287A 74            mov d, b
5678   287B 32            mov bl, [d]
5679   287C A7 00         mov bh, 0
5680   287E E7            pop d
5681   287F FD 3E         mov [d], bl
5682   2881             ;; tok = SEMICOLON; 
5683   2881 3B F7 32      mov d, _tok ; $tok
5684   2884 DA            push d
5685   2885 26 23 00      mov b, 35; SEMICOLON
5686   2888 E7            pop d
5687   2889 FD 43         mov [d], b
5688   288B             ;; toktype = DELIMITER;   
5689   288B 3B F9 32      mov d, _toktype ; $toktype
5690   288E DA            push d
5691   288F 26 01 00      mov b, 1; DELIMITER
5692   2892 E7            pop d
5693   2893 FD 43         mov [d], b
5694   2895 0A 94 29      jmp _if94_exit
5695   2898             _if94_else:
5696   2898             ;; if(*prog == ':'){ 
5697   2898             _if95_cond:
5698   2898 3B FB 32      mov d, _prog ; $prog
5699   289B 2A            mov b, [d]
5700   289C 74            mov d, b
5701   289D 32            mov bl, [d]
5702   289E A7 00         mov bh, 0
5703   28A0             ; START RELATIONAL
5704   28A0 D7            push a
5705   28A1 11            mov a, b
5706   28A2 26 3A 00      mov b, $3a
5707   28A5 B0            cmp a, b
5708   28A6 FD 71         seq ; ==
5709   28A8 E4            pop a
5710   28A9             ; END RELATIONAL
5711   28A9 C0 00 00      cmp b, 0
5712   28AC C6 EC 28      je _if95_else
5713   28AF             _if95_true:
5714   28AF             ;; *t++ = *prog++; 
5715   28AF FA FF FF      lea d, [bp + -1] ; $t
5716   28B2 2A            mov b, [d]
5717   28B3 FD 79         mov g, b
5718   28B5 FD 77         inc b
5719   28B7 FA FF FF      lea d, [bp + -1] ; $t
5720   28BA FD 43         mov [d], b
5721   28BC FD 27         mov b, g
5722   28BE D8            push b
5723   28BF 3B FB 32      mov d, _prog ; $prog
5724   28C2 2A            mov b, [d]
5725   28C3 FD 79         mov g, b
5726   28C5 FD 77         inc b
5727   28C7 3B FB 32      mov d, _prog ; $prog
5728   28CA FD 43         mov [d], b
5729   28CC FD 27         mov b, g
5730   28CE 74            mov d, b
5731   28CF 32            mov bl, [d]
5732   28D0 A7 00         mov bh, 0
5733   28D2 E7            pop d
5734   28D3 FD 3E         mov [d], bl
5735   28D5             ;; tok = COLON; 
5736   28D5 3B F7 32      mov d, _tok ; $tok
5737   28D8 DA            push d
5738   28D9 26 22 00      mov b, 34; COLON
5739   28DC E7            pop d
5740   28DD FD 43         mov [d], b
5741   28DF             ;; toktype = DELIMITER;   
5742   28DF 3B F9 32      mov d, _toktype ; $toktype
5743   28E2 DA            push d
5744   28E3 26 01 00      mov b, 1; DELIMITER
5745   28E6 E7            pop d
5746   28E7 FD 43         mov [d], b
5747   28E9 0A 94 29      jmp _if95_exit
5748   28EC             _if95_else:
5749   28EC             ;; if(*prog == ','){ 
5750   28EC             _if96_cond:
5751   28EC 3B FB 32      mov d, _prog ; $prog
5752   28EF 2A            mov b, [d]
5753   28F0 74            mov d, b
5754   28F1 32            mov bl, [d]
5755   28F2 A7 00         mov bh, 0
5756   28F4             ; START RELATIONAL
5757   28F4 D7            push a
5758   28F5 11            mov a, b
5759   28F6 26 2C 00      mov b, $2c
5760   28F9 B0            cmp a, b
5761   28FA FD 71         seq ; ==
5762   28FC E4            pop a
5763   28FD             ; END RELATIONAL
5764   28FD C0 00 00      cmp b, 0
5765   2900 C6 40 29      je _if96_else
5766   2903             _if96_true:
5767   2903             ;; *t++ = *prog++; 
5768   2903 FA FF FF      lea d, [bp + -1] ; $t
5769   2906 2A            mov b, [d]
5770   2907 FD 79         mov g, b
5771   2909 FD 77         inc b
5772   290B FA FF FF      lea d, [bp + -1] ; $t
5773   290E FD 43         mov [d], b
5774   2910 FD 27         mov b, g
5775   2912 D8            push b
5776   2913 3B FB 32      mov d, _prog ; $prog
5777   2916 2A            mov b, [d]
5778   2917 FD 79         mov g, b
5779   2919 FD 77         inc b
5780   291B 3B FB 32      mov d, _prog ; $prog
5781   291E FD 43         mov [d], b
5782   2920 FD 27         mov b, g
5783   2922 74            mov d, b
5784   2923 32            mov bl, [d]
5785   2924 A7 00         mov bh, 0
5786   2926 E7            pop d
5787   2927 FD 3E         mov [d], bl
5788   2929             ;; tok = COMMA; 
5789   2929 3B F7 32      mov d, _tok ; $tok
5790   292C DA            push d
5791   292D 26 24 00      mov b, 36; COMMA
5792   2930 E7            pop d
5793   2931 FD 43         mov [d], b
5794   2933             ;; toktype = DELIMITER;   
5795   2933 3B F9 32      mov d, _toktype ; $toktype
5796   2936 DA            push d
5797   2937 26 01 00      mov b, 1; DELIMITER
5798   293A E7            pop d
5799   293B FD 43         mov [d], b
5800   293D 0A 94 29      jmp _if96_exit
5801   2940             _if96_else:
5802   2940             ;; if(*prog == '.'){ 
5803   2940             _if97_cond:
5804   2940 3B FB 32      mov d, _prog ; $prog
5805   2943 2A            mov b, [d]
5806   2944 74            mov d, b
5807   2945 32            mov bl, [d]
5808   2946 A7 00         mov bh, 0
5809   2948             ; START RELATIONAL
5810   2948 D7            push a
5811   2949 11            mov a, b
5812   294A 26 2E 00      mov b, $2e
5813   294D B0            cmp a, b
5814   294E FD 71         seq ; ==
5815   2950 E4            pop a
5816   2951             ; END RELATIONAL
5817   2951 C0 00 00      cmp b, 0
5818   2954 C6 94 29      je _if97_exit
5819   2957             _if97_true:
5820   2957             ;; *t++ = *prog++; 
5821   2957 FA FF FF      lea d, [bp + -1] ; $t
5822   295A 2A            mov b, [d]
5823   295B FD 79         mov g, b
5824   295D FD 77         inc b
5825   295F FA FF FF      lea d, [bp + -1] ; $t
5826   2962 FD 43         mov [d], b
5827   2964 FD 27         mov b, g
5828   2966 D8            push b
5829   2967 3B FB 32      mov d, _prog ; $prog
5830   296A 2A            mov b, [d]
5831   296B FD 79         mov g, b
5832   296D FD 77         inc b
5833   296F 3B FB 32      mov d, _prog ; $prog
5834   2972 FD 43         mov [d], b
5835   2974 FD 27         mov b, g
5836   2976 74            mov d, b
5837   2977 32            mov bl, [d]
5838   2978 A7 00         mov bh, 0
5839   297A E7            pop d
5840   297B FD 3E         mov [d], bl
5841   297D             ;; tok = DOT; 
5842   297D 3B F7 32      mov d, _tok ; $tok
5843   2980 DA            push d
5844   2981 26 25 00      mov b, 37; DOT
5845   2984 E7            pop d
5846   2985 FD 43         mov [d], b
5847   2987             ;; toktype = DELIMITER;   
5848   2987 3B F9 32      mov d, _toktype ; $toktype
5849   298A DA            push d
5850   298B 26 01 00      mov b, 1; DELIMITER
5851   298E E7            pop d
5852   298F FD 43         mov [d], b
5853   2991 0A 94 29      jmp _if97_exit
5854   2994             _if97_exit:
5855   2994             _if96_exit:
5856   2994             _if95_exit:
5857   2994             _if94_exit:
5858   2994             _if93_exit:
5859   2994             _if92_exit:
5860   2994             _if91_exit:
5861   2994             _if90_exit:
5862   2994             _if89_exit:
5863   2994             _if88_exit:
5864   2994             _if87_exit:
5865   2994             _if86_exit:
5866   2994             _if84_exit:
5867   2994             _if82_exit:
5868   2994             _if80_exit:
5869   2994             _if77_exit:
5870   2994             _if74_exit:
5871   2994             _if73_exit:
5872   2994             _if71_exit:
5873   2994             _if69_exit:
5874   2994             _if67_exit:
5875   2994             _if66_exit:
5876   2994             _if65_exit:
5877   2994             _if64_exit:
5878   2994             _if63_exit:
5879   2994             _if62_exit:
5880   2994             _if59_exit:
5881   2994             _if57_exit:
5882   2994             _if55_exit:
5883   2994             ;; *t = '\0'; 
5884   2994 FA FF FF      lea d, [bp + -1] ; $t
5885   2997 2A            mov b, [d]
5886   2998 D8            push b
5887   2999 26 00 00      mov b, $0
5888   299C E7            pop d
5889   299D FD 3E         mov [d], bl
5890   299F F9            leave
5891   29A0 09            ret
5892   29A1             
5893   29A1             convert_constant:
5894   29A1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5895   29A4             ; $s 
5896   29A4             ; $t 
5897   29A4 52 04 00      sub sp, 4
5898   29A7             
5899   29A7             ;; t = token; 
5900   29A7 FA FD FF      lea d, [bp + -3] ; $t
5901   29AA DA            push d
5902   29AB 3B FD 32      mov d, _token_data ; $token
5903   29AE 2D            mov b, d
5904   29AF E7            pop d
5905   29B0 FD 43         mov [d], b
5906   29B2             ;; s = string_const; 
5907   29B2 FA FF FF      lea d, [bp + -1] ; $s
5908   29B5 DA            push d
5909   29B6 3B FD 33      mov d, _string_const_data ; $string_const
5910   29B9 2D            mov b, d
5911   29BA E7            pop d
5912   29BB FD 43         mov [d], b
5913   29BD             ;; if(toktype == CHAR_CONST){ 
5914   29BD             _if98_cond:
5915   29BD 3B F9 32      mov d, _toktype ; $toktype
5916   29C0 2A            mov b, [d]
5917   29C1             ; START RELATIONAL
5918   29C1 D7            push a
5919   29C2 11            mov a, b
5920   29C3 26 02 00      mov b, 2; CHAR_CONST
5921   29C6 B0            cmp a, b
5922   29C7 FD 71         seq ; ==
5923   29C9 E4            pop a
5924   29CA             ; END RELATIONAL
5925   29CA C0 00 00      cmp b, 0
5926   29CD C6 78 2B      je _if98_else
5927   29D0             _if98_true:
5928   29D0             ;; t++; 
5929   29D0 FA FD FF      lea d, [bp + -3] ; $t
5930   29D3 2A            mov b, [d]
5931   29D4 FD 79         mov g, b
5932   29D6 FD 77         inc b
5933   29D8 FA FD FF      lea d, [bp + -3] ; $t
5934   29DB FD 43         mov [d], b
5935   29DD FD 27         mov b, g
5936   29DF             ;; if(*t == '\\'){ 
5937   29DF             _if99_cond:
5938   29DF FA FD FF      lea d, [bp + -3] ; $t
5939   29E2 2A            mov b, [d]
5940   29E3 74            mov d, b
5941   29E4 32            mov bl, [d]
5942   29E5 A7 00         mov bh, 0
5943   29E7             ; START RELATIONAL
5944   29E7 D7            push a
5945   29E8 11            mov a, b
5946   29E9 26 5C 00      mov b, $5c
5947   29EC B0            cmp a, b
5948   29ED FD 71         seq ; ==
5949   29EF E4            pop a
5950   29F0             ; END RELATIONAL
5951   29F0 C0 00 00      cmp b, 0
5952   29F3 C6 5A 2B      je _if99_else
5953   29F6             _if99_true:
5954   29F6             ;; t++; 
5955   29F6 FA FD FF      lea d, [bp + -3] ; $t
5956   29F9 2A            mov b, [d]
5957   29FA FD 79         mov g, b
5958   29FC FD 77         inc b
5959   29FE FA FD FF      lea d, [bp + -3] ; $t
5960   2A01 FD 43         mov [d], b
5961   2A03 FD 27         mov b, g
5962   2A05             ;; switch(*t){ 
5963   2A05             _switch100_expr:
5964   2A05 FA FD FF      lea d, [bp + -3] ; $t
5965   2A08 2A            mov b, [d]
5966   2A09 74            mov d, b
5967   2A0A 32            mov bl, [d]
5968   2A0B A7 00         mov bh, 0
5969   2A0D             _switch100_comparisons:
5970   2A0D C1 30         cmp bl, $30
5971   2A0F C6 47 2A      je _switch100_case0
5972   2A12 C1 61         cmp bl, $61
5973   2A14 C6 60 2A      je _switch100_case1
5974   2A17 C1 62         cmp bl, $62
5975   2A19 C6 79 2A      je _switch100_case2
5976   2A1C C1 66         cmp bl, $66
5977   2A1E C6 92 2A      je _switch100_case3
5978   2A21 C1 6E         cmp bl, $6e
5979   2A23 C6 AB 2A      je _switch100_case4
5980   2A26 C1 72         cmp bl, $72
5981   2A28 C6 C4 2A      je _switch100_case5
5982   2A2B C1 74         cmp bl, $74
5983   2A2D C6 DD 2A      je _switch100_case6
5984   2A30 C1 76         cmp bl, $76
5985   2A32 C6 F6 2A      je _switch100_case7
5986   2A35 C1 5C         cmp bl, $5c
5987   2A37 C6 0F 2B      je _switch100_case8
5988   2A3A C1 27         cmp bl, $27
5989   2A3C C6 28 2B      je _switch100_case9
5990   2A3F C1 22         cmp bl, $22
5991   2A41 C6 41 2B      je _switch100_case10
5992   2A44 0A 57 2B      jmp _switch100_exit
5993   2A47             _switch100_case0:
5994   2A47             ;; *s++ = '\0'; 
5995   2A47 FA FF FF      lea d, [bp + -1] ; $s
5996   2A4A 2A            mov b, [d]
5997   2A4B FD 79         mov g, b
5998   2A4D FD 77         inc b
5999   2A4F FA FF FF      lea d, [bp + -1] ; $s
6000   2A52 FD 43         mov [d], b
6001   2A54 FD 27         mov b, g
6002   2A56 D8            push b
6003   2A57 26 00 00      mov b, $0
6004   2A5A E7            pop d
6005   2A5B FD 3E         mov [d], bl
6006   2A5D             ;; break; 
6007   2A5D 0A 57 2B      jmp _switch100_exit ; case break
6008   2A60             _switch100_case1:
6009   2A60             ;; *s++ = '\a'; 
6010   2A60 FA FF FF      lea d, [bp + -1] ; $s
6011   2A63 2A            mov b, [d]
6012   2A64 FD 79         mov g, b
6013   2A66 FD 77         inc b
6014   2A68 FA FF FF      lea d, [bp + -1] ; $s
6015   2A6B FD 43         mov [d], b
6016   2A6D FD 27         mov b, g
6017   2A6F D8            push b
6018   2A70 26 07 00      mov b, $7
6019   2A73 E7            pop d
6020   2A74 FD 3E         mov [d], bl
6021   2A76             ;; break; 
6022   2A76 0A 57 2B      jmp _switch100_exit ; case break
6023   2A79             _switch100_case2:
6024   2A79             ;; *s++ = '\b'; 
6025   2A79 FA FF FF      lea d, [bp + -1] ; $s
6026   2A7C 2A            mov b, [d]
6027   2A7D FD 79         mov g, b
6028   2A7F FD 77         inc b
6029   2A81 FA FF FF      lea d, [bp + -1] ; $s
6030   2A84 FD 43         mov [d], b
6031   2A86 FD 27         mov b, g
6032   2A88 D8            push b
6033   2A89 26 08 00      mov b, $8
6034   2A8C E7            pop d
6035   2A8D FD 3E         mov [d], bl
6036   2A8F             ;; break;   
6037   2A8F 0A 57 2B      jmp _switch100_exit ; case break
6038   2A92             _switch100_case3:
6039   2A92             ;; *s++ = '\f'; 
6040   2A92 FA FF FF      lea d, [bp + -1] ; $s
6041   2A95 2A            mov b, [d]
6042   2A96 FD 79         mov g, b
6043   2A98 FD 77         inc b
6044   2A9A FA FF FF      lea d, [bp + -1] ; $s
6045   2A9D FD 43         mov [d], b
6046   2A9F FD 27         mov b, g
6047   2AA1 D8            push b
6048   2AA2 26 0C 00      mov b, $c
6049   2AA5 E7            pop d
6050   2AA6 FD 3E         mov [d], bl
6051   2AA8             ;; break; 
6052   2AA8 0A 57 2B      jmp _switch100_exit ; case break
6053   2AAB             _switch100_case4:
6054   2AAB             ;; *s++ = '\n'; 
6055   2AAB FA FF FF      lea d, [bp + -1] ; $s
6056   2AAE 2A            mov b, [d]
6057   2AAF FD 79         mov g, b
6058   2AB1 FD 77         inc b
6059   2AB3 FA FF FF      lea d, [bp + -1] ; $s
6060   2AB6 FD 43         mov [d], b
6061   2AB8 FD 27         mov b, g
6062   2ABA D8            push b
6063   2ABB 26 0A 00      mov b, $a
6064   2ABE E7            pop d
6065   2ABF FD 3E         mov [d], bl
6066   2AC1             ;; break; 
6067   2AC1 0A 57 2B      jmp _switch100_exit ; case break
6068   2AC4             _switch100_case5:
6069   2AC4             ;; *s++ = '\r'; 
6070   2AC4 FA FF FF      lea d, [bp + -1] ; $s
6071   2AC7 2A            mov b, [d]
6072   2AC8 FD 79         mov g, b
6073   2ACA FD 77         inc b
6074   2ACC FA FF FF      lea d, [bp + -1] ; $s
6075   2ACF FD 43         mov [d], b
6076   2AD1 FD 27         mov b, g
6077   2AD3 D8            push b
6078   2AD4 26 0D 00      mov b, $d
6079   2AD7 E7            pop d
6080   2AD8 FD 3E         mov [d], bl
6081   2ADA             ;; break; 
6082   2ADA 0A 57 2B      jmp _switch100_exit ; case break
6083   2ADD             _switch100_case6:
6084   2ADD             ;; *s++ = '\t'; 
6085   2ADD FA FF FF      lea d, [bp + -1] ; $s
6086   2AE0 2A            mov b, [d]
6087   2AE1 FD 79         mov g, b
6088   2AE3 FD 77         inc b
6089   2AE5 FA FF FF      lea d, [bp + -1] ; $s
6090   2AE8 FD 43         mov [d], b
6091   2AEA FD 27         mov b, g
6092   2AEC D8            push b
6093   2AED 26 09 00      mov b, $9
6094   2AF0 E7            pop d
6095   2AF1 FD 3E         mov [d], bl
6096   2AF3             ;; break; 
6097   2AF3 0A 57 2B      jmp _switch100_exit ; case break
6098   2AF6             _switch100_case7:
6099   2AF6             ;; *s++ = '\v'; 
6100   2AF6 FA FF FF      lea d, [bp + -1] ; $s
6101   2AF9 2A            mov b, [d]
6102   2AFA FD 79         mov g, b
6103   2AFC FD 77         inc b
6104   2AFE FA FF FF      lea d, [bp + -1] ; $s
6105   2B01 FD 43         mov [d], b
6106   2B03 FD 27         mov b, g
6107   2B05 D8            push b
6108   2B06 26 0B 00      mov b, $b
6109   2B09 E7            pop d
6110   2B0A FD 3E         mov [d], bl
6111   2B0C             ;; break; 
6112   2B0C 0A 57 2B      jmp _switch100_exit ; case break
6113   2B0F             _switch100_case8:
6114   2B0F             ;; *s++ = '\\'; 
6115   2B0F FA FF FF      lea d, [bp + -1] ; $s
6116   2B12 2A            mov b, [d]
6117   2B13 FD 79         mov g, b
6118   2B15 FD 77         inc b
6119   2B17 FA FF FF      lea d, [bp + -1] ; $s
6120   2B1A FD 43         mov [d], b
6121   2B1C FD 27         mov b, g
6122   2B1E D8            push b
6123   2B1F 26 5C 00      mov b, $5c
6124   2B22 E7            pop d
6125   2B23 FD 3E         mov [d], bl
6126   2B25             ;; break; 
6127   2B25 0A 57 2B      jmp _switch100_exit ; case break
6128   2B28             _switch100_case9:
6129   2B28             ;; *s++ = '\''; 
6130   2B28 FA FF FF      lea d, [bp + -1] ; $s
6131   2B2B 2A            mov b, [d]
6132   2B2C FD 79         mov g, b
6133   2B2E FD 77         inc b
6134   2B30 FA FF FF      lea d, [bp + -1] ; $s
6135   2B33 FD 43         mov [d], b
6136   2B35 FD 27         mov b, g
6137   2B37 D8            push b
6138   2B38 26 27 00      mov b, $27
6139   2B3B E7            pop d
6140   2B3C FD 3E         mov [d], bl
6141   2B3E             ;; break; 
6142   2B3E 0A 57 2B      jmp _switch100_exit ; case break
6143   2B41             _switch100_case10:
6144   2B41             ;; *s++ = '\"'; 
6145   2B41 FA FF FF      lea d, [bp + -1] ; $s
6146   2B44 2A            mov b, [d]
6147   2B45 FD 79         mov g, b
6148   2B47 FD 77         inc b
6149   2B49 FA FF FF      lea d, [bp + -1] ; $s
6150   2B4C FD 43         mov [d], b
6151   2B4E FD 27         mov b, g
6152   2B50 D8            push b
6153   2B51 26 22 00      mov b, $22
6154   2B54 E7            pop d
6155   2B55 FD 3E         mov [d], bl
6156   2B57             _switch100_exit:
6157   2B57 0A 75 2B      jmp _if99_exit
6158   2B5A             _if99_else:
6159   2B5A             ;; *s++ = *t; 
6160   2B5A FA FF FF      lea d, [bp + -1] ; $s
6161   2B5D 2A            mov b, [d]
6162   2B5E FD 79         mov g, b
6163   2B60 FD 77         inc b
6164   2B62 FA FF FF      lea d, [bp + -1] ; $s
6165   2B65 FD 43         mov [d], b
6166   2B67 FD 27         mov b, g
6167   2B69 D8            push b
6168   2B6A FA FD FF      lea d, [bp + -3] ; $t
6169   2B6D 2A            mov b, [d]
6170   2B6E 74            mov d, b
6171   2B6F 32            mov bl, [d]
6172   2B70 A7 00         mov bh, 0
6173   2B72 E7            pop d
6174   2B73 FD 3E         mov [d], bl
6175   2B75             _if99_exit:
6176   2B75 0A EA 2B      jmp _if98_exit
6177   2B78             _if98_else:
6178   2B78             ;; if(toktype == STRING_CONST){ 
6179   2B78             _if101_cond:
6180   2B78 3B F9 32      mov d, _toktype ; $toktype
6181   2B7B 2A            mov b, [d]
6182   2B7C             ; START RELATIONAL
6183   2B7C D7            push a
6184   2B7D 11            mov a, b
6185   2B7E 26 03 00      mov b, 3; STRING_CONST
6186   2B81 B0            cmp a, b
6187   2B82 FD 71         seq ; ==
6188   2B84 E4            pop a
6189   2B85             ; END RELATIONAL
6190   2B85 C0 00 00      cmp b, 0
6191   2B88 C6 EA 2B      je _if101_exit
6192   2B8B             _if101_true:
6193   2B8B             ;; t++; 
6194   2B8B FA FD FF      lea d, [bp + -3] ; $t
6195   2B8E 2A            mov b, [d]
6196   2B8F FD 79         mov g, b
6197   2B91 FD 77         inc b
6198   2B93 FA FD FF      lea d, [bp + -3] ; $t
6199   2B96 FD 43         mov [d], b
6200   2B98 FD 27         mov b, g
6201   2B9A             ;; while(*t != '\"' && *t){ 
6202   2B9A             _while102_cond:
6203   2B9A FA FD FF      lea d, [bp + -3] ; $t
6204   2B9D 2A            mov b, [d]
6205   2B9E 74            mov d, b
6206   2B9F 32            mov bl, [d]
6207   2BA0 A7 00         mov bh, 0
6208   2BA2             ; START RELATIONAL
6209   2BA2 D7            push a
6210   2BA3 11            mov a, b
6211   2BA4 26 22 00      mov b, $22
6212   2BA7 B0            cmp a, b
6213   2BA8 FD 72         sneq ; !=
6214   2BAA E4            pop a
6215   2BAB             ; END RELATIONAL
6216   2BAB D7            push a
6217   2BAC 11            mov a, b
6218   2BAD FA FD FF      lea d, [bp + -3] ; $t
6219   2BB0 2A            mov b, [d]
6220   2BB1 74            mov d, b
6221   2BB2 32            mov bl, [d]
6222   2BB3 A7 00         mov bh, 0
6223   2BB5 FD A7         sand a, b ; &&
6224   2BB7 E4            pop a
6225   2BB8 C0 00 00      cmp b, 0
6226   2BBB C6 E7 2B      je _while102_exit
6227   2BBE             _while102_block:
6228   2BBE             ;; *s++ = *t++; 
6229   2BBE FA FF FF      lea d, [bp + -1] ; $s
6230   2BC1 2A            mov b, [d]
6231   2BC2 FD 79         mov g, b
6232   2BC4 FD 77         inc b
6233   2BC6 FA FF FF      lea d, [bp + -1] ; $s
6234   2BC9 FD 43         mov [d], b
6235   2BCB FD 27         mov b, g
6236   2BCD D8            push b
6237   2BCE FA FD FF      lea d, [bp + -3] ; $t
6238   2BD1 2A            mov b, [d]
6239   2BD2 FD 79         mov g, b
6240   2BD4 FD 77         inc b
6241   2BD6 FA FD FF      lea d, [bp + -3] ; $t
6242   2BD9 FD 43         mov [d], b
6243   2BDB FD 27         mov b, g
6244   2BDD 74            mov d, b
6245   2BDE 32            mov bl, [d]
6246   2BDF A7 00         mov bh, 0
6247   2BE1 E7            pop d
6248   2BE2 FD 3E         mov [d], bl
6249   2BE4 0A 9A 2B      jmp _while102_cond
6250   2BE7             _while102_exit:
6251   2BE7 0A EA 2B      jmp _if101_exit
6252   2BEA             _if101_exit:
6253   2BEA             _if98_exit:
6254   2BEA             ;; *s = '\0'; 
6255   2BEA FA FF FF      lea d, [bp + -1] ; $s
6256   2BED 2A            mov b, [d]
6257   2BEE D8            push b
6258   2BEF 26 00 00      mov b, $0
6259   2BF2 E7            pop d
6260   2BF3 FD 3E         mov [d], bl
6261   2BF5 F9            leave
6262   2BF6 09            ret
6263   2BF7             
6264   2BF7             error:
6265   2BF7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6266   2BFA             ;; printf("\nError: "); 
6267   2BFA 26 CE 3B      mov b, __s14 ; "\nError: "
6268   2BFD FD AB         swp b
6269   2BFF D8            push b
6270   2C00 07 EB 0E      call printf
6271   2C03 51 02 00      add sp, 2
6272   2C06             ;; printf(msg); 
6273   2C06 FA 05 00      lea d, [bp + 5] ; $msg
6274   2C09 2A            mov b, [d]
6275   2C0A FD AB         swp b
6276   2C0C D8            push b
6277   2C0D 07 EB 0E      call printf
6278   2C10 51 02 00      add sp, 2
6279   2C13             ;; printf("\n"); 
6280   2C13 26 B5 3B      mov b, __s12 ; "\n"
6281   2C16 FD AB         swp b
6282   2C18 D8            push b
6283   2C19 07 EB 0E      call printf
6284   2C1C 51 02 00      add sp, 2
6285   2C1F F9            leave
6286   2C20 09            ret
6287   2C21             
6288   2C21             last_cmd_insert:
6289   2C21 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6290   2C24             ;; if(last_cmd[0]){ 
6291   2C24             _if103_cond:
6292   2C24 3B FF 39      mov d, _last_cmd_data ; $last_cmd
6293   2C27 D7            push a
6294   2C28 DA            push d
6295   2C29 26 00 00      mov b, $0
6296   2C2C E7            pop d
6297   2C2D 5A            add d, b
6298   2C2E E4            pop a
6299   2C2F 32            mov bl, [d]
6300   2C30 A7 00         mov bh, 0
6301   2C32 C0 00 00      cmp b, 0
6302   2C35 C6 5C 2C      je _if103_exit
6303   2C38             _if103_true:
6304   2C38             ;; strcpy(command, last_cmd); 
6305   2C38 3B FF 39      mov d, _last_cmd_data ; $last_cmd
6306   2C3B 2D            mov b, d
6307   2C3C FD AB         swp b
6308   2C3E D8            push b
6309   2C3F 3B FF 34      mov d, _command_data ; $command
6310   2C42 2D            mov b, d
6311   2C43 FD AB         swp b
6312   2C45 D8            push b
6313   2C46 07 26 0D      call strcpy
6314   2C49 51 04 00      add sp, 4
6315   2C4C             ;; printf(command); 
6316   2C4C 3B FF 34      mov d, _command_data ; $command
6317   2C4F 2D            mov b, d
6318   2C50 FD AB         swp b
6319   2C52 D8            push b
6320   2C53 07 EB 0E      call printf
6321   2C56 51 02 00      add sp, 2
6322   2C59 0A 5C 2C      jmp _if103_exit
6323   2C5C             _if103_exit:
6324   2C5C F9            leave
6325   2C5D 09            ret
6326   2C5E             
6327   2C5E             new_str_var:
6328   2C5E F8 00 00      enter 0 ; (push bp; mov bp, sp)
6329   2C61             ;; variables[vars_tos].var_type = SHELL_VAR_TYP_STR; 
6330   2C61 3B 7F 3A      mov d, _variables_data ; $variables
6331   2C64 D7            push a
6332   2C65 DA            push d
6333   2C66 3B 51 3B      mov d, _vars_tos ; $vars_tos
6334   2C69 2A            mov b, [d]
6335   2C6A E7            pop d
6336   2C6B FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6337   2C6F E4            pop a
6338   2C70 58 10 00      add d, 16
6339   2C73 FD 14         clb
6340   2C75 DA            push d
6341   2C76 26 00 00      mov b, 0; SHELL_VAR_TYP_STR
6342   2C79 E7            pop d
6343   2C7A FD 3E         mov [d], bl
6344   2C7C             ;; variables[vars_tos].as_string = alloc(64); 
6345   2C7C 3B 7F 3A      mov d, _variables_data ; $variables
6346   2C7F D7            push a
6347   2C80 DA            push d
6348   2C81 3B 51 3B      mov d, _vars_tos ; $vars_tos
6349   2C84 2A            mov b, [d]
6350   2C85 E7            pop d
6351   2C86 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6352   2C8A E4            pop a
6353   2C8B 58 11 00      add d, 17
6354   2C8E FD 14         clb
6355   2C90 DA            push d
6356   2C91 26 40 00      mov b, $40
6357   2C94 FD AB         swp b
6358   2C96 D8            push b
6359   2C97 07 68 15      call alloc
6360   2C9A 51 02 00      add sp, 2
6361   2C9D E7            pop d
6362   2C9E FD 43         mov [d], b
6363   2CA0             ;; strcpy(variables[vars_tos].varname, varname); 
6364   2CA0 FA 05 00      lea d, [bp + 5] ; $varname
6365   2CA3 2A            mov b, [d]
6366   2CA4 FD AB         swp b
6367   2CA6 D8            push b
6368   2CA7 3B 7F 3A      mov d, _variables_data ; $variables
6369   2CAA D7            push a
6370   2CAB DA            push d
6371   2CAC 3B 51 3B      mov d, _vars_tos ; $vars_tos
6372   2CAF 2A            mov b, [d]
6373   2CB0 E7            pop d
6374   2CB1 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6375   2CB5 E4            pop a
6376   2CB6 58 00 00      add d, 0
6377   2CB9 FD 14         clb
6378   2CBB 2D            mov b, d
6379   2CBC FD AB         swp b
6380   2CBE D8            push b
6381   2CBF 07 26 0D      call strcpy
6382   2CC2 51 04 00      add sp, 4
6383   2CC5             ;; strcpy(variables[vars_tos].as_string, strval); 
6384   2CC5 FA 07 00      lea d, [bp + 7] ; $strval
6385   2CC8 2A            mov b, [d]
6386   2CC9 FD AB         swp b
6387   2CCB D8            push b
6388   2CCC 3B 7F 3A      mov d, _variables_data ; $variables
6389   2CCF D7            push a
6390   2CD0 DA            push d
6391   2CD1 3B 51 3B      mov d, _vars_tos ; $vars_tos
6392   2CD4 2A            mov b, [d]
6393   2CD5 E7            pop d
6394   2CD6 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6395   2CDA E4            pop a
6396   2CDB 58 11 00      add d, 17
6397   2CDE FD 14         clb
6398   2CE0 2A            mov b, [d]
6399   2CE1 FD AB         swp b
6400   2CE3 D8            push b
6401   2CE4 07 26 0D      call strcpy
6402   2CE7 51 04 00      add sp, 4
6403   2CEA             ;; vars_tos++; 
6404   2CEA 3B 51 3B      mov d, _vars_tos ; $vars_tos
6405   2CED 2A            mov b, [d]
6406   2CEE FD 79         mov g, b
6407   2CF0 FD 77         inc b
6408   2CF2 3B 51 3B      mov d, _vars_tos ; $vars_tos
6409   2CF5 FD 43         mov [d], b
6410   2CF7 FD 27         mov b, g
6411   2CF9             ;; return vars_tos - 1; 
6412   2CF9 3B 51 3B      mov d, _vars_tos ; $vars_tos
6413   2CFC 2A            mov b, [d]
6414   2CFD             ; START TERMS
6415   2CFD D7            push a
6416   2CFE 11            mov a, b
6417   2CFF 26 01 00      mov b, $1
6418   2D02 60            sub a, b
6419   2D03 27            mov b, a
6420   2D04 E4            pop a
6421   2D05             ; END TERMS
6422   2D05 F9            leave
6423   2D06 09            ret
6424   2D07             
6425   2D07             set_str_var:
6426   2D07 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6427   2D0A             ; $var_index 
6428   2D0A 52 02 00      sub sp, 2
6429   2D0D             
6430   2D0D             ;; for(var_index = 0; var_index < vars_tos; var_index++){ 
6431   2D0D             _for104_init:
6432   2D0D FA FF FF      lea d, [bp + -1] ; $var_index
6433   2D10 DA            push d
6434   2D11 26 00 00      mov b, $0
6435   2D14 E7            pop d
6436   2D15 FD 43         mov [d], b
6437   2D17             _for104_cond:
6438   2D17 FA FF FF      lea d, [bp + -1] ; $var_index
6439   2D1A 2A            mov b, [d]
6440   2D1B             ; START RELATIONAL
6441   2D1B D7            push a
6442   2D1C 11            mov a, b
6443   2D1D 3B 51 3B      mov d, _vars_tos ; $vars_tos
6444   2D20 2A            mov b, [d]
6445   2D21 B0            cmp a, b
6446   2D22 FD 73         slt ; < 
6447   2D24 E4            pop a
6448   2D25             ; END RELATIONAL
6449   2D25 C0 00 00      cmp b, 0
6450   2D28 C6 9B 2D      je _for104_exit
6451   2D2B             _for104_block:
6452   2D2B             ;; if(!strcmp(variables[var_index].varname, varname)){ 
6453   2D2B             _if105_cond:
6454   2D2B FA 05 00      lea d, [bp + 5] ; $varname
6455   2D2E 2A            mov b, [d]
6456   2D2F FD AB         swp b
6457   2D31 D8            push b
6458   2D32 3B 7F 3A      mov d, _variables_data ; $variables
6459   2D35 D7            push a
6460   2D36 DA            push d
6461   2D37 FA FF FF      lea d, [bp + -1] ; $var_index
6462   2D3A 2A            mov b, [d]
6463   2D3B E7            pop d
6464   2D3C FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6465   2D40 E4            pop a
6466   2D41 58 00 00      add d, 0
6467   2D44 FD 14         clb
6468   2D46 2D            mov b, d
6469   2D47 FD AB         swp b
6470   2D49 D8            push b
6471   2D4A 07 86 0D      call strcmp
6472   2D4D 51 04 00      add sp, 4
6473   2D50 C0 00 00      cmp b, 0
6474   2D53 FD 71         seq ; !
6475   2D55 C0 00 00      cmp b, 0
6476   2D58 C6 89 2D      je _if105_exit
6477   2D5B             _if105_true:
6478   2D5B             ;; strcpy(variables[var_index].as_string, strval); 
6479   2D5B FA 07 00      lea d, [bp + 7] ; $strval
6480   2D5E 2A            mov b, [d]
6481   2D5F FD AB         swp b
6482   2D61 D8            push b
6483   2D62 3B 7F 3A      mov d, _variables_data ; $variables
6484   2D65 D7            push a
6485   2D66 DA            push d
6486   2D67 FA FF FF      lea d, [bp + -1] ; $var_index
6487   2D6A 2A            mov b, [d]
6488   2D6B E7            pop d
6489   2D6C FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6490   2D70 E4            pop a
6491   2D71 58 11 00      add d, 17
6492   2D74 FD 14         clb
6493   2D76 2A            mov b, [d]
6494   2D77 FD AB         swp b
6495   2D79 D8            push b
6496   2D7A 07 26 0D      call strcpy
6497   2D7D 51 04 00      add sp, 4
6498   2D80             ;; return var_index; 
6499   2D80 FA FF FF      lea d, [bp + -1] ; $var_index
6500   2D83 2A            mov b, [d]
6501   2D84 F9            leave
6502   2D85 09            ret
6503   2D86 0A 89 2D      jmp _if105_exit
6504   2D89             _if105_exit:
6505   2D89             _for104_update:
6506   2D89 FA FF FF      lea d, [bp + -1] ; $var_index
6507   2D8C 2A            mov b, [d]
6508   2D8D FD 79         mov g, b
6509   2D8F FD 77         inc b
6510   2D91 FA FF FF      lea d, [bp + -1] ; $var_index
6511   2D94 FD 43         mov [d], b
6512   2D96 FD 27         mov b, g
6513   2D98 0A 17 2D      jmp _for104_cond
6514   2D9B             _for104_exit:
6515   2D9B             ;; printf("Error: Variable does not exist."); 
6516   2D9B 26 D7 3B      mov b, __s15 ; "Error: Variable does not exist."
6517   2D9E FD AB         swp b
6518   2DA0 D8            push b
6519   2DA1 07 EB 0E      call printf
6520   2DA4 51 02 00      add sp, 2
6521   2DA7 F9            leave
6522   2DA8 09            ret
6523   2DA9             
6524   2DA9             set_int_var:
6525   2DA9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6526   2DAC             ; $i 
6527   2DAC 52 02 00      sub sp, 2
6528   2DAF             
6529   2DAF             ;; for(i = 0; i < vars_tos; i++){ 
6530   2DAF             _for106_init:
6531   2DAF FA FF FF      lea d, [bp + -1] ; $i
6532   2DB2 DA            push d
6533   2DB3 26 00 00      mov b, $0
6534   2DB6 E7            pop d
6535   2DB7 FD 43         mov [d], b
6536   2DB9             _for106_cond:
6537   2DB9 FA FF FF      lea d, [bp + -1] ; $i
6538   2DBC 2A            mov b, [d]
6539   2DBD             ; START RELATIONAL
6540   2DBD D7            push a
6541   2DBE 11            mov a, b
6542   2DBF 3B 51 3B      mov d, _vars_tos ; $vars_tos
6543   2DC2 2A            mov b, [d]
6544   2DC3 B0            cmp a, b
6545   2DC4 FD 73         slt ; < 
6546   2DC6 E4            pop a
6547   2DC7             ; END RELATIONAL
6548   2DC7 C0 00 00      cmp b, 0
6549   2DCA C6 34 2E      je _for106_exit
6550   2DCD             _for106_block:
6551   2DCD             ;; if(!strcmp(variables[i].varname, varname)){ 
6552   2DCD             _if107_cond:
6553   2DCD FA 05 00      lea d, [bp + 5] ; $varname
6554   2DD0 2A            mov b, [d]
6555   2DD1 FD AB         swp b
6556   2DD3 D8            push b
6557   2DD4 3B 7F 3A      mov d, _variables_data ; $variables
6558   2DD7 D7            push a
6559   2DD8 DA            push d
6560   2DD9 FA FF FF      lea d, [bp + -1] ; $i
6561   2DDC 2A            mov b, [d]
6562   2DDD E7            pop d
6563   2DDE FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6564   2DE2 E4            pop a
6565   2DE3 58 00 00      add d, 0
6566   2DE6 FD 14         clb
6567   2DE8 2D            mov b, d
6568   2DE9 FD AB         swp b
6569   2DEB D8            push b
6570   2DEC 07 86 0D      call strcmp
6571   2DEF 51 04 00      add sp, 4
6572   2DF2 C0 00 00      cmp b, 0
6573   2DF5 FD 71         seq ; !
6574   2DF7 C0 00 00      cmp b, 0
6575   2DFA C6 22 2E      je _if107_exit
6576   2DFD             _if107_true:
6577   2DFD             ;; variables[vars_tos].as_int = as_int; 
6578   2DFD 3B 7F 3A      mov d, _variables_data ; $variables
6579   2E00 D7            push a
6580   2E01 DA            push d
6581   2E02 3B 51 3B      mov d, _vars_tos ; $vars_tos
6582   2E05 2A            mov b, [d]
6583   2E06 E7            pop d
6584   2E07 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6585   2E0B E4            pop a
6586   2E0C 58 13 00      add d, 19
6587   2E0F FD 14         clb
6588   2E11 DA            push d
6589   2E12 FA 07 00      lea d, [bp + 7] ; $as_int
6590   2E15 2A            mov b, [d]
6591   2E16 E7            pop d
6592   2E17 FD 43         mov [d], b
6593   2E19             ;; return i; 
6594   2E19 FA FF FF      lea d, [bp + -1] ; $i
6595   2E1C 2A            mov b, [d]
6596   2E1D F9            leave
6597   2E1E 09            ret
6598   2E1F 0A 22 2E      jmp _if107_exit
6599   2E22             _if107_exit:
6600   2E22             _for106_update:
6601   2E22 FA FF FF      lea d, [bp + -1] ; $i
6602   2E25 2A            mov b, [d]
6603   2E26 FD 79         mov g, b
6604   2E28 FD 77         inc b
6605   2E2A FA FF FF      lea d, [bp + -1] ; $i
6606   2E2D FD 43         mov [d], b
6607   2E2F FD 27         mov b, g
6608   2E31 0A B9 2D      jmp _for106_cond
6609   2E34             _for106_exit:
6610   2E34             ;; variables[vars_tos].var_type = SHELL_VAR_TYP_INT; 
6611   2E34 3B 7F 3A      mov d, _variables_data ; $variables
6612   2E37 D7            push a
6613   2E38 DA            push d
6614   2E39 3B 51 3B      mov d, _vars_tos ; $vars_tos
6615   2E3C 2A            mov b, [d]
6616   2E3D E7            pop d
6617   2E3E FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6618   2E42 E4            pop a
6619   2E43 58 10 00      add d, 16
6620   2E46 FD 14         clb
6621   2E48 DA            push d
6622   2E49 26 01 00      mov b, 1; SHELL_VAR_TYP_INT
6623   2E4C E7            pop d
6624   2E4D FD 3E         mov [d], bl
6625   2E4F             ;; strcpy(variables[vars_tos].varname, varname); 
6626   2E4F FA 05 00      lea d, [bp + 5] ; $varname
6627   2E52 2A            mov b, [d]
6628   2E53 FD AB         swp b
6629   2E55 D8            push b
6630   2E56 3B 7F 3A      mov d, _variables_data ; $variables
6631   2E59 D7            push a
6632   2E5A DA            push d
6633   2E5B 3B 51 3B      mov d, _vars_tos ; $vars_tos
6634   2E5E 2A            mov b, [d]
6635   2E5F E7            pop d
6636   2E60 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6637   2E64 E4            pop a
6638   2E65 58 00 00      add d, 0
6639   2E68 FD 14         clb
6640   2E6A 2D            mov b, d
6641   2E6B FD AB         swp b
6642   2E6D D8            push b
6643   2E6E 07 26 0D      call strcpy
6644   2E71 51 04 00      add sp, 4
6645   2E74             ;; variables[vars_tos].as_int = as_int; 
6646   2E74 3B 7F 3A      mov d, _variables_data ; $variables
6647   2E77 D7            push a
6648   2E78 DA            push d
6649   2E79 3B 51 3B      mov d, _vars_tos ; $vars_tos
6650   2E7C 2A            mov b, [d]
6651   2E7D E7            pop d
6652   2E7E FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6653   2E82 E4            pop a
6654   2E83 58 13 00      add d, 19
6655   2E86 FD 14         clb
6656   2E88 DA            push d
6657   2E89 FA 07 00      lea d, [bp + 7] ; $as_int
6658   2E8C 2A            mov b, [d]
6659   2E8D E7            pop d
6660   2E8E FD 43         mov [d], b
6661   2E90             ;; vars_tos++; 
6662   2E90 3B 51 3B      mov d, _vars_tos ; $vars_tos
6663   2E93 2A            mov b, [d]
6664   2E94 FD 79         mov g, b
6665   2E96 FD 77         inc b
6666   2E98 3B 51 3B      mov d, _vars_tos ; $vars_tos
6667   2E9B FD 43         mov [d], b
6668   2E9D FD 27         mov b, g
6669   2E9F             ;; return vars_tos - 1; 
6670   2E9F 3B 51 3B      mov d, _vars_tos ; $vars_tos
6671   2EA2 2A            mov b, [d]
6672   2EA3             ; START TERMS
6673   2EA3 D7            push a
6674   2EA4 11            mov a, b
6675   2EA5 26 01 00      mov b, $1
6676   2EA8 60            sub a, b
6677   2EA9 27            mov b, a
6678   2EAA E4            pop a
6679   2EAB             ; END TERMS
6680   2EAB F9            leave
6681   2EAC 09            ret
6682   2EAD             
6683   2EAD             get_var_index:
6684   2EAD F8 00 00      enter 0 ; (push bp; mov bp, sp)
6685   2EB0             ; $i 
6686   2EB0 52 02 00      sub sp, 2
6687   2EB3             
6688   2EB3             ;; for(i = 0; i < vars_tos; i++) 
6689   2EB3             _for108_init:
6690   2EB3 FA FF FF      lea d, [bp + -1] ; $i
6691   2EB6 DA            push d
6692   2EB7 26 00 00      mov b, $0
6693   2EBA E7            pop d
6694   2EBB FD 43         mov [d], b
6695   2EBD             _for108_cond:
6696   2EBD FA FF FF      lea d, [bp + -1] ; $i
6697   2EC0 2A            mov b, [d]
6698   2EC1             ; START RELATIONAL
6699   2EC1 D7            push a
6700   2EC2 11            mov a, b
6701   2EC3 3B 51 3B      mov d, _vars_tos ; $vars_tos
6702   2EC6 2A            mov b, [d]
6703   2EC7 B0            cmp a, b
6704   2EC8 FD 73         slt ; < 
6705   2ECA E4            pop a
6706   2ECB             ; END RELATIONAL
6707   2ECB C0 00 00      cmp b, 0
6708   2ECE C6 1C 2F      je _for108_exit
6709   2ED1             _for108_block:
6710   2ED1             ;; if(!strcmp(variables[i].varname, varname)) return i; 
6711   2ED1             _if109_cond:
6712   2ED1 FA 05 00      lea d, [bp + 5] ; $varname
6713   2ED4 2A            mov b, [d]
6714   2ED5 FD AB         swp b
6715   2ED7 D8            push b
6716   2ED8 3B 7F 3A      mov d, _variables_data ; $variables
6717   2EDB D7            push a
6718   2EDC DA            push d
6719   2EDD FA FF FF      lea d, [bp + -1] ; $i
6720   2EE0 2A            mov b, [d]
6721   2EE1 E7            pop d
6722   2EE2 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6723   2EE6 E4            pop a
6724   2EE7 58 00 00      add d, 0
6725   2EEA FD 14         clb
6726   2EEC 2D            mov b, d
6727   2EED FD AB         swp b
6728   2EEF D8            push b
6729   2EF0 07 86 0D      call strcmp
6730   2EF3 51 04 00      add sp, 4
6731   2EF6 C0 00 00      cmp b, 0
6732   2EF9 FD 71         seq ; !
6733   2EFB C0 00 00      cmp b, 0
6734   2EFE C6 0A 2F      je _if109_exit
6735   2F01             _if109_true:
6736   2F01             ;; return i; 
6737   2F01 FA FF FF      lea d, [bp + -1] ; $i
6738   2F04 2A            mov b, [d]
6739   2F05 F9            leave
6740   2F06 09            ret
6741   2F07 0A 0A 2F      jmp _if109_exit
6742   2F0A             _if109_exit:
6743   2F0A             _for108_update:
6744   2F0A FA FF FF      lea d, [bp + -1] ; $i
6745   2F0D 2A            mov b, [d]
6746   2F0E FD 79         mov g, b
6747   2F10 FD 77         inc b
6748   2F12 FA FF FF      lea d, [bp + -1] ; $i
6749   2F15 FD 43         mov [d], b
6750   2F17 FD 27         mov b, g
6751   2F19 0A BD 2E      jmp _for108_cond
6752   2F1C             _for108_exit:
6753   2F1C             ;; return -1; 
6754   2F1C 26 01 00      mov b, $1
6755   2F1F FD 97         neg b
6756   2F21 F9            leave
6757   2F22 09            ret
6758   2F23             
6759   2F23             get_var_type:
6760   2F23 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6761   2F26             ; $i 
6762   2F26 52 02 00      sub sp, 2
6763   2F29             
6764   2F29             ;; for(i = 0; i < vars_tos; i++) 
6765   2F29             _for110_init:
6766   2F29 FA FF FF      lea d, [bp + -1] ; $i
6767   2F2C DA            push d
6768   2F2D 26 00 00      mov b, $0
6769   2F30 E7            pop d
6770   2F31 FD 43         mov [d], b
6771   2F33             _for110_cond:
6772   2F33 FA FF FF      lea d, [bp + -1] ; $i
6773   2F36 2A            mov b, [d]
6774   2F37             ; START RELATIONAL
6775   2F37 D7            push a
6776   2F38 11            mov a, b
6777   2F39 3B 51 3B      mov d, _vars_tos ; $vars_tos
6778   2F3C 2A            mov b, [d]
6779   2F3D B0            cmp a, b
6780   2F3E FD 73         slt ; < 
6781   2F40 E4            pop a
6782   2F41             ; END RELATIONAL
6783   2F41 C0 00 00      cmp b, 0
6784   2F44 C6 A5 2F      je _for110_exit
6785   2F47             _for110_block:
6786   2F47             ;; if(!strcmp(variables[i].varname, varname)) return variables[i].var_type; 
6787   2F47             _if111_cond:
6788   2F47 FA 05 00      lea d, [bp + 5] ; $varname
6789   2F4A 2A            mov b, [d]
6790   2F4B FD AB         swp b
6791   2F4D D8            push b
6792   2F4E 3B 7F 3A      mov d, _variables_data ; $variables
6793   2F51 D7            push a
6794   2F52 DA            push d
6795   2F53 FA FF FF      lea d, [bp + -1] ; $i
6796   2F56 2A            mov b, [d]
6797   2F57 E7            pop d
6798   2F58 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6799   2F5C E4            pop a
6800   2F5D 58 00 00      add d, 0
6801   2F60 FD 14         clb
6802   2F62 2D            mov b, d
6803   2F63 FD AB         swp b
6804   2F65 D8            push b
6805   2F66 07 86 0D      call strcmp
6806   2F69 51 04 00      add sp, 4
6807   2F6C C0 00 00      cmp b, 0
6808   2F6F FD 71         seq ; !
6809   2F71 C0 00 00      cmp b, 0
6810   2F74 C6 93 2F      je _if111_exit
6811   2F77             _if111_true:
6812   2F77             ;; return variables[i].var_type; 
6813   2F77 3B 7F 3A      mov d, _variables_data ; $variables
6814   2F7A D7            push a
6815   2F7B DA            push d
6816   2F7C FA FF FF      lea d, [bp + -1] ; $i
6817   2F7F 2A            mov b, [d]
6818   2F80 E7            pop d
6819   2F81 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6820   2F85 E4            pop a
6821   2F86 58 10 00      add d, 16
6822   2F89 FD 14         clb
6823   2F8B 32            mov bl, [d]
6824   2F8C A7 00         mov bh, 0
6825   2F8E F9            leave
6826   2F8F 09            ret
6827   2F90 0A 93 2F      jmp _if111_exit
6828   2F93             _if111_exit:
6829   2F93             _for110_update:
6830   2F93 FA FF FF      lea d, [bp + -1] ; $i
6831   2F96 2A            mov b, [d]
6832   2F97 FD 79         mov g, b
6833   2F99 FD 77         inc b
6834   2F9B FA FF FF      lea d, [bp + -1] ; $i
6835   2F9E FD 43         mov [d], b
6836   2FA0 FD 27         mov b, g
6837   2FA2 0A 33 2F      jmp _for110_cond
6838   2FA5             _for110_exit:
6839   2FA5             ;; return -1; 
6840   2FA5 26 01 00      mov b, $1
6841   2FA8 FD 97         neg b
6842   2FAA F9            leave
6843   2FAB 09            ret
6844   2FAC             
6845   2FAC             show_var:
6846   2FAC F8 00 00      enter 0 ; (push bp; mov bp, sp)
6847   2FAF             ; $i 
6848   2FAF 52 02 00      sub sp, 2
6849   2FB2             
6850   2FB2             ;; for(i = 0; i < vars_tos; i++){ 
6851   2FB2             _for112_init:
6852   2FB2 FA FF FF      lea d, [bp + -1] ; $i
6853   2FB5 DA            push d
6854   2FB6 26 00 00      mov b, $0
6855   2FB9 E7            pop d
6856   2FBA FD 43         mov [d], b
6857   2FBC             _for112_cond:
6858   2FBC FA FF FF      lea d, [bp + -1] ; $i
6859   2FBF 2A            mov b, [d]
6860   2FC0             ; START RELATIONAL
6861   2FC0 D7            push a
6862   2FC1 11            mov a, b
6863   2FC2 3B 51 3B      mov d, _vars_tos ; $vars_tos
6864   2FC5 2A            mov b, [d]
6865   2FC6 B0            cmp a, b
6866   2FC7 FD 73         slt ; < 
6867   2FC9 E4            pop a
6868   2FCA             ; END RELATIONAL
6869   2FCA C0 00 00      cmp b, 0
6870   2FCD C6 A9 30      je _for112_exit
6871   2FD0             _for112_block:
6872   2FD0             ;; if(!strcmp(variables[i].varname, varname)){ 
6873   2FD0             _if113_cond:
6874   2FD0 FA 05 00      lea d, [bp + 5] ; $varname
6875   2FD3 2A            mov b, [d]
6876   2FD4 FD AB         swp b
6877   2FD6 D8            push b
6878   2FD7 3B 7F 3A      mov d, _variables_data ; $variables
6879   2FDA D7            push a
6880   2FDB DA            push d
6881   2FDC FA FF FF      lea d, [bp + -1] ; $i
6882   2FDF 2A            mov b, [d]
6883   2FE0 E7            pop d
6884   2FE1 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6885   2FE5 E4            pop a
6886   2FE6 58 00 00      add d, 0
6887   2FE9 FD 14         clb
6888   2FEB 2D            mov b, d
6889   2FEC FD AB         swp b
6890   2FEE D8            push b
6891   2FEF 07 86 0D      call strcmp
6892   2FF2 51 04 00      add sp, 4
6893   2FF5 C0 00 00      cmp b, 0
6894   2FF8 FD 71         seq ; !
6895   2FFA C0 00 00      cmp b, 0
6896   2FFD C6 97 30      je _if113_exit
6897   3000             _if113_true:
6898   3000             ;; if(variables[i].var_type == SHELL_VAR_TYP_INT){ 
6899   3000             _if114_cond:
6900   3000 3B 7F 3A      mov d, _variables_data ; $variables
6901   3003 D7            push a
6902   3004 DA            push d
6903   3005 FA FF FF      lea d, [bp + -1] ; $i
6904   3008 2A            mov b, [d]
6905   3009 E7            pop d
6906   300A FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6907   300E E4            pop a
6908   300F 58 10 00      add d, 16
6909   3012 FD 14         clb
6910   3014 32            mov bl, [d]
6911   3015 A7 00         mov bh, 0
6912   3017             ; START RELATIONAL
6913   3017 D7            push a
6914   3018 11            mov a, b
6915   3019 26 01 00      mov b, 1; SHELL_VAR_TYP_INT
6916   301C B0            cmp a, b
6917   301D FD 71         seq ; ==
6918   301F E4            pop a
6919   3020             ; END RELATIONAL
6920   3020 C0 00 00      cmp b, 0
6921   3023 C6 47 30      je _if114_else
6922   3026             _if114_true:
6923   3026             ;; printu(variables[i].as_int); 
6924   3026 3B 7F 3A      mov d, _variables_data ; $variables
6925   3029 D7            push a
6926   302A DA            push d
6927   302B FA FF FF      lea d, [bp + -1] ; $i
6928   302E 2A            mov b, [d]
6929   302F E7            pop d
6930   3030 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6931   3034 E4            pop a
6932   3035 58 13 00      add d, 19
6933   3038 FD 14         clb
6934   303A 2A            mov b, [d]
6935   303B FD AB         swp b
6936   303D D8            push b
6937   303E 07 F9 13      call printu
6938   3041 51 02 00      add sp, 2
6939   3044 0A 8E 30      jmp _if114_exit
6940   3047             _if114_else:
6941   3047             ;; if(variables[i].var_type == SHELL_VAR_TYP_STR){ 
6942   3047             _if115_cond:
6943   3047 3B 7F 3A      mov d, _variables_data ; $variables
6944   304A D7            push a
6945   304B DA            push d
6946   304C FA FF FF      lea d, [bp + -1] ; $i
6947   304F 2A            mov b, [d]
6948   3050 E7            pop d
6949   3051 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6950   3055 E4            pop a
6951   3056 58 10 00      add d, 16
6952   3059 FD 14         clb
6953   305B 32            mov bl, [d]
6954   305C A7 00         mov bh, 0
6955   305E             ; START RELATIONAL
6956   305E D7            push a
6957   305F 11            mov a, b
6958   3060 26 00 00      mov b, 0; SHELL_VAR_TYP_STR
6959   3063 B0            cmp a, b
6960   3064 FD 71         seq ; ==
6961   3066 E4            pop a
6962   3067             ; END RELATIONAL
6963   3067 C0 00 00      cmp b, 0
6964   306A C6 8E 30      je _if115_exit
6965   306D             _if115_true:
6966   306D             ;; printf(variables[i].as_string); 
6967   306D 3B 7F 3A      mov d, _variables_data ; $variables
6968   3070 D7            push a
6969   3071 DA            push d
6970   3072 FA FF FF      lea d, [bp + -1] ; $i
6971   3075 2A            mov b, [d]
6972   3076 E7            pop d
6973   3077 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
6974   307B E4            pop a
6975   307C 58 11 00      add d, 17
6976   307F FD 14         clb
6977   3081 2A            mov b, [d]
6978   3082 FD AB         swp b
6979   3084 D8            push b
6980   3085 07 EB 0E      call printf
6981   3088 51 02 00      add sp, 2
6982   308B 0A 8E 30      jmp _if115_exit
6983   308E             _if115_exit:
6984   308E             _if114_exit:
6985   308E             ;; return i; 
6986   308E FA FF FF      lea d, [bp + -1] ; $i
6987   3091 2A            mov b, [d]
6988   3092 F9            leave
6989   3093 09            ret
6990   3094 0A 97 30      jmp _if113_exit
6991   3097             _if113_exit:
6992   3097             _for112_update:
6993   3097 FA FF FF      lea d, [bp + -1] ; $i
6994   309A 2A            mov b, [d]
6995   309B FD 79         mov g, b
6996   309D FD 77         inc b
6997   309F FA FF FF      lea d, [bp + -1] ; $i
6998   30A2 FD 43         mov [d], b
6999   30A4 FD 27         mov b, g
7000   30A6 0A BC 2F      jmp _for112_cond
7001   30A9             _for112_exit:
7002   30A9             ;; error("Undeclared variable."); 
7003   30A9 26 F7 3B      mov b, __s16 ; "Undeclared variable."
7004   30AC FD AB         swp b
7005   30AE D8            push b
7006   30AF 07 F7 2B      call error
7007   30B2 51 02 00      add sp, 2
7008   30B5 F9            leave
7009   30B6 09            ret
7010   30B7             
7011   30B7             get_shell_var_strval:
7012   30B7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7013   30BA             ;; return variables[index].as_string; 
7014   30BA 3B 7F 3A      mov d, _variables_data ; $variables
7015   30BD D7            push a
7016   30BE DA            push d
7017   30BF FA 05 00      lea d, [bp + 5] ; $index
7018   30C2 2A            mov b, [d]
7019   30C3 E7            pop d
7020   30C4 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
7021   30C8 E4            pop a
7022   30C9 58 11 00      add d, 17
7023   30CC FD 14         clb
7024   30CE 2A            mov b, [d]
7025   30CF F9            leave
7026   30D0 09            ret
7027   30D1             
7028   30D1             get_shell_var_intval:
7029   30D1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7030   30D4             ;; return variables[index].as_int; 
7031   30D4 3B 7F 3A      mov d, _variables_data ; $variables
7032   30D7 D7            push a
7033   30D8 DA            push d
7034   30D9 FA 05 00      lea d, [bp + 5] ; $index
7035   30DC 2A            mov b, [d]
7036   30DD E7            pop d
7037   30DE FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
7038   30E2 E4            pop a
7039   30E3 58 13 00      add d, 19
7040   30E6 FD 14         clb
7041   30E8 2A            mov b, [d]
7042   30E9 F9            leave
7043   30EA 09            ret
7044   30EB             
7045   30EB             file_exists:
7046   30EB F8 00 00      enter 0 ; (push bp; mov bp, sp)
7047   30EE             ; $file_exists 
7048   30EE 52 02 00      sub sp, 2
7049   30F1             
7050   30F1             
7051   30F1             ; --- BEGIN INLINE ASM BLOCK
7052   30F1 FA 05 00      lea d, [bp + 5] ; $filename
7053   30F4 FD 2A         mov d, [d]
7054   30F6 19 15         mov al, 21
7055   30F8 05 04         syscall sys_filesystem
7056   30FA FA FF FF      lea d, [bp + -1] ; $file_exists
7057   30FD 43            mov [d], a
7058   30FE             ; --- END INLINE ASM BLOCK
7059   30FE             
7060   30FE             ;; return file_exists; 
7061   30FE FA FF FF      lea d, [bp + -1] ; $file_exists
7062   3101 2A            mov b, [d]
7063   3102 F9            leave
7064   3103 09            ret
7065   3104             
7066   3104             command_cd:
7067   3104 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7068   3107             ; $dirID 
7069   3107 52 02 00      sub sp, 2
7070   310A             
7071   310A             ;; *path = '\0'; 
7072   310A 3B FF 36      mov d, _path_data ; $path
7073   310D 2D            mov b, d
7074   310E D8            push b
7075   310F 26 00 00      mov b, $0
7076   3112 E7            pop d
7077   3113 FD 3E         mov [d], bl
7078   3115             ;; get(); 
7079   3115 07 D0 1B      call get
7080   3118             ;; if(toktype == END || tok == SEMICOLON || tok == BITWISE_NOT){ 
7081   3118             _if116_cond:
7082   3118 3B F9 32      mov d, _toktype ; $toktype
7083   311B 2A            mov b, [d]
7084   311C             ; START RELATIONAL
7085   311C D7            push a
7086   311D 11            mov a, b
7087   311E 26 06 00      mov b, 6; END
7088   3121 B0            cmp a, b
7089   3122 FD 71         seq ; ==
7090   3124 E4            pop a
7091   3125             ; END RELATIONAL
7092   3125 D7            push a
7093   3126 11            mov a, b
7094   3127 3B F7 32      mov d, _tok ; $tok
7095   312A 2A            mov b, [d]
7096   312B             ; START RELATIONAL
7097   312B D7            push a
7098   312C 11            mov a, b
7099   312D 26 23 00      mov b, 35; SEMICOLON
7100   3130 B0            cmp a, b
7101   3131 FD 71         seq ; ==
7102   3133 E4            pop a
7103   3134             ; END RELATIONAL
7104   3134 FD A8         sor a, b ; ||
7105   3136 11            mov a, b
7106   3137 3B F7 32      mov d, _tok ; $tok
7107   313A 2A            mov b, [d]
7108   313B             ; START RELATIONAL
7109   313B D7            push a
7110   313C 11            mov a, b
7111   313D 26 19 00      mov b, 25; BITWISE_NOT
7112   3140 B0            cmp a, b
7113   3141 FD 71         seq ; ==
7114   3143 E4            pop a
7115   3144             ; END RELATIONAL
7116   3144 FD A8         sor a, b ; ||
7117   3146 E4            pop a
7118   3147 C0 00 00      cmp b, 0
7119   314A C6 70 31      je _if116_else
7120   314D             _if116_true:
7121   314D             ;; back(); 
7122   314D 07 04 1A      call back
7123   3150             ;; cd_to_dir(variables[1].as_string); 
7124   3150 3B 7F 3A      mov d, _variables_data ; $variables
7125   3153 D7            push a
7126   3154 DA            push d
7127   3155 26 01 00      mov b, $1
7128   3158 E7            pop d
7129   3159 FD 13 15 00   mma 21 ; mov a, 21; mul a, b; add d, b
7130   315D E4            pop a
7131   315E 58 11 00      add d, 17
7132   3161 FD 14         clb
7133   3163 2A            mov b, [d]
7134   3164 FD AB         swp b
7135   3166 D8            push b
7136   3167 07 CE 31      call cd_to_dir
7137   316A 51 02 00      add sp, 2
7138   316D 0A CC 31      jmp _if116_exit
7139   3170             _if116_else:
7140   3170             ;; for(;;){ 
7141   3170             _for117_init:
7142   3170             _for117_cond:
7143   3170             _for117_block:
7144   3170             ;; strcat(path, token); 
7145   3170 3B FD 32      mov d, _token_data ; $token
7146   3173 2D            mov b, d
7147   3174 FD AB         swp b
7148   3176 D8            push b
7149   3177 3B FF 36      mov d, _path_data ; $path
7150   317A 2D            mov b, d
7151   317B FD AB         swp b
7152   317D D8            push b
7153   317E 07 EA 0D      call strcat
7154   3181 51 04 00      add sp, 4
7155   3184             ;; get(); 
7156   3184 07 D0 1B      call get
7157   3187             ;; if(toktype == END) break; 
7158   3187             _if118_cond:
7159   3187 3B F9 32      mov d, _toktype ; $toktype
7160   318A 2A            mov b, [d]
7161   318B             ; START RELATIONAL
7162   318B D7            push a
7163   318C 11            mov a, b
7164   318D 26 06 00      mov b, 6; END
7165   3190 B0            cmp a, b
7166   3191 FD 71         seq ; ==
7167   3193 E4            pop a
7168   3194             ; END RELATIONAL
7169   3194 C0 00 00      cmp b, 0
7170   3197 C6 A0 31      je _if118_else
7171   319A             _if118_true:
7172   319A             ;; break; 
7173   319A 0A BF 31      jmp _for117_exit ; for break
7174   319D 0A BC 31      jmp _if118_exit
7175   31A0             _if118_else:
7176   31A0             ;; if(tok == SEMICOLON){ 
7177   31A0             _if119_cond:
7178   31A0 3B F7 32      mov d, _tok ; $tok
7179   31A3 2A            mov b, [d]
7180   31A4             ; START RELATIONAL
7181   31A4 D7            push a
7182   31A5 11            mov a, b
7183   31A6 26 23 00      mov b, 35; SEMICOLON
7184   31A9 B0            cmp a, b
7185   31AA FD 71         seq ; ==
7186   31AC E4            pop a
7187   31AD             ; END RELATIONAL
7188   31AD C0 00 00      cmp b, 0
7189   31B0 C6 BC 31      je _if119_exit
7190   31B3             _if119_true:
7191   31B3             ;; back(); 
7192   31B3 07 04 1A      call back
7193   31B6             ;; break; 
7194   31B6 0A BF 31      jmp _for117_exit ; for break
7195   31B9 0A BC 31      jmp _if119_exit
7196   31BC             _if119_exit:
7197   31BC             _if118_exit:
7198   31BC             _for117_update:
7199   31BC 0A 70 31      jmp _for117_cond
7200   31BF             _for117_exit:
7201   31BF             ;; cd_to_dir(path); 
7202   31BF 3B FF 36      mov d, _path_data ; $path
7203   31C2 2D            mov b, d
7204   31C3 FD AB         swp b
7205   31C5 D8            push b
7206   31C6 07 CE 31      call cd_to_dir
7207   31C9 51 02 00      add sp, 2
7208   31CC             _if116_exit:
7209   31CC F9            leave
7210   31CD 09            ret
7211   31CE             
7212   31CE             cd_to_dir:
7213   31CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
7214   31D1             ; $dirID 
7215   31D1 52 02 00      sub sp, 2
7216   31D4             
7217   31D4             
7218   31D4             ; --- BEGIN INLINE ASM BLOCK
7219   31D4 FA 05 00      lea d, [bp + 5] ; $dir
7220   31D7 FD 2A         mov d, [d]
7221   31D9 19 13         mov al, 19
7222   31DB 05 04         syscall sys_filesystem 
7223   31DD FA FF FF      lea d, [bp + -1] ; $dirID
7224   31E0 FD 2A         mov d, [d]
7225   31E2 43            mov [d], a 
7226   31E3 D7            push a
7227   31E4             ; --- END INLINE ASM BLOCK
7228   31E4             
7229   31E4             ;; if(dirID != -1){ 
7230   31E4             _if120_cond:
7231   31E4 FA FF FF      lea d, [bp + -1] ; $dirID
7232   31E7 2A            mov b, [d]
7233   31E8             ; START RELATIONAL
7234   31E8 D7            push a
7235   31E9 11            mov a, b
7236   31EA 26 01 00      mov b, $1
7237   31ED FD 97         neg b
7238   31EF B0            cmp a, b
7239   31F0 FD 72         sneq ; !=
7240   31F2 E4            pop a
7241   31F3             ; END RELATIONAL
7242   31F3 C0 00 00      cmp b, 0
7243   31F6 C6 02 32      je _if120_else
7244   31F9             _if120_true:
7245   31F9             
7246   31F9             ; --- BEGIN INLINE ASM BLOCK
7247   31F9 E4            pop a
7248   31FA 27            mov b, a
7249   31FB 19 03         mov al, 3
7250   31FD 05 04         syscall sys_filesystem
7251   31FF             ; --- END INLINE ASM BLOCK
7252   31FF             
7253   31FF 0A 03 32      jmp _if120_exit
7254   3202             _if120_else:
7255   3202             
7256   3202             ; --- BEGIN INLINE ASM BLOCK
7257   3202 E4            pop a
7258   3203             ; --- END INLINE ASM BLOCK
7259   3203             
7260   3203             _if120_exit:
7261   3203 F9            leave
7262   3204 09            ret
7263   3205             
7264   3205             print_cwd:
7265   3205 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7266   3208             
7267   3208             ; --- BEGIN INLINE ASM BLOCK
7268   3208 19 12         mov al, 18
7269   320A 05 04         syscall sys_filesystem        
7270   320C             ; --- END INLINE ASM BLOCK
7271   320C             
7272   320C F9            leave
7273   320D 09            ret
7274   320E             
7275   320E             spawn_new_proc:
7276   320E F8 00 00      enter 0 ; (push bp; mov bp, sp)
7277   3211             
7278   3211             ; --- BEGIN INLINE ASM BLOCK
7279   3211 FA 07 00      lea d, [bp + 7] ; $args
7280   3214 2A            mov b, [d]
7281   3215 FA 05 00      lea d, [bp + 5] ; $executable_path
7282   3218 FD 2A         mov d, [d]
7283   321A 05 05         syscall sys_spawn_proc
7284   321C             ; --- END INLINE ASM BLOCK
7285   321C             
7286   321C F9            leave
7287   321D 09            ret
7288   321E             
7289   321E             command_shell:
7290   321E F8 00 00      enter 0 ; (push bp; mov bp, sp)
7291   3221 F9            leave
7292   3222 09            ret
7293   3223             
7294   3223             command_fg:
7295   3223 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7296   3226 F9            leave
7297   3227 09            ret
7298   3228             
7299   3228             read_config:
7300   3228 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7301   322B             ;; transient_area = alloc(16385); 
7302   322B 3B FD 34      mov d, _transient_area ; $transient_area
7303   322E DA            push d
7304   322F 26 01 40      mov b, $4001
7305   3232 FD AB         swp b
7306   3234 D8            push b
7307   3235 07 68 15      call alloc
7308   3238 51 02 00      add sp, 2
7309   323B E7            pop d
7310   323C FD 43         mov [d], b
7311   323E             ;; *value = '\0'; 
7312   323E FA 09 00      lea d, [bp + 9] ; $value
7313   3241 2A            mov b, [d]
7314   3242 D8            push b
7315   3243 26 00 00      mov b, $0
7316   3246 E7            pop d
7317   3247 FD 3E         mov [d], bl
7318   3249             ;; loadfile(filename, transient_area); 
7319   3249 3B FD 34      mov d, _transient_area ; $transient_area
7320   324C 2A            mov b, [d]
7321   324D FD AB         swp b
7322   324F D8            push b
7323   3250 FA 05 00      lea d, [bp + 5] ; $filename
7324   3253 2A            mov b, [d]
7325   3254 FD AB         swp b
7326   3256 D8            push b
7327   3257 07 3A 15      call loadfile
7328   325A 51 04 00      add sp, 4
7329   325D             ;; prog = transient_area; 
7330   325D 3B FB 32      mov d, _prog ; $prog
7331   3260 DA            push d
7332   3261 3B FD 34      mov d, _transient_area ; $transient_area
7333   3264 2A            mov b, [d]
7334   3265 E7            pop d
7335   3266 FD 43         mov [d], b
7336   3268             ;; for(;;){ 
7337   3268             _for121_init:
7338   3268             _for121_cond:
7339   3268             _for121_block:
7340   3268             ;; get(); 
7341   3268 07 D0 1B      call get
7342   326B             ;; if(toktype == END) break; 
7343   326B             _if122_cond:
7344   326B 3B F9 32      mov d, _toktype ; $toktype
7345   326E 2A            mov b, [d]
7346   326F             ; START RELATIONAL
7347   326F D7            push a
7348   3270 11            mov a, b
7349   3271 26 06 00      mov b, 6; END
7350   3274 B0            cmp a, b
7351   3275 FD 71         seq ; ==
7352   3277 E4            pop a
7353   3278             ; END RELATIONAL
7354   3278 C0 00 00      cmp b, 0
7355   327B C6 84 32      je _if122_exit
7356   327E             _if122_true:
7357   327E             ;; break; 
7358   327E 0A E9 32      jmp _for121_exit ; for break
7359   3281 0A 84 32      jmp _if122_exit
7360   3284             _if122_exit:
7361   3284             ;; if(!strcmp(entry_name, token)){ 
7362   3284             _if123_cond:
7363   3284 3B FD 32      mov d, _token_data ; $token
7364   3287 2D            mov b, d
7365   3288 FD AB         swp b
7366   328A D8            push b
7367   328B FA 07 00      lea d, [bp + 7] ; $entry_name
7368   328E 2A            mov b, [d]
7369   328F FD AB         swp b
7370   3291 D8            push b
7371   3292 07 86 0D      call strcmp
7372   3295 51 04 00      add sp, 4
7373   3298 C0 00 00      cmp b, 0
7374   329B FD 71         seq ; !
7375   329D C0 00 00      cmp b, 0
7376   32A0 C6 E6 32      je _if123_exit
7377   32A3             _if123_true:
7378   32A3             ;; get(); // get '=' 
7379   32A3 07 D0 1B      call get
7380   32A6             ;; for(;;){ 
7381   32A6             _for124_init:
7382   32A6             _for124_cond:
7383   32A6             _for124_block:
7384   32A6             ;; get(); 
7385   32A6 07 D0 1B      call get
7386   32A9             ;; if(!strcmp(token, ";")) return; 
7387   32A9             _if125_cond:
7388   32A9 26 0C 3C      mov b, __s17 ; ";"
7389   32AC FD AB         swp b
7390   32AE D8            push b
7391   32AF 3B FD 32      mov d, _token_data ; $token
7392   32B2 2D            mov b, d
7393   32B3 FD AB         swp b
7394   32B5 D8            push b
7395   32B6 07 86 0D      call strcmp
7396   32B9 51 04 00      add sp, 4
7397   32BC C0 00 00      cmp b, 0
7398   32BF FD 71         seq ; !
7399   32C1 C0 00 00      cmp b, 0
7400   32C4 C6 CC 32      je _if125_exit
7401   32C7             _if125_true:
7402   32C7             ;; return; 
7403   32C7 F9            leave
7404   32C8 09            ret
7405   32C9 0A CC 32      jmp _if125_exit
7406   32CC             _if125_exit:
7407   32CC             ;; strcat(value, token); 
7408   32CC 3B FD 32      mov d, _token_data ; $token
7409   32CF 2D            mov b, d
7410   32D0 FD AB         swp b
7411   32D2 D8            push b
7412   32D3 FA 09 00      lea d, [bp + 9] ; $value
7413   32D6 2A            mov b, [d]
7414   32D7 FD AB         swp b
7415   32D9 D8            push b
7416   32DA 07 EA 0D      call strcat
7417   32DD 51 04 00      add sp, 4
7418   32E0             _for124_update:
7419   32E0 0A A6 32      jmp _for124_cond
7420   32E3             _for124_exit:
7421   32E3 0A E6 32      jmp _if123_exit
7422   32E6             _if123_exit:
7423   32E6             _for121_update:
7424   32E6 0A 68 32      jmp _for121_cond
7425   32E9             _for121_exit:
7426   32E9             ;; free(16385); 
7427   32E9 26 01 40      mov b, $4001
7428   32EC FD AB         swp b
7429   32EE D8            push b
7430   32EF 07 8E 15      call free
7431   32F2 51 02 00      add sp, 2
7432   32F5 F9            leave
7433   32F6 09            ret
7434   32F7             ; --- END TEXT BLOCK
7435   32F7             
7436   32F7             ; --- BEGIN DATA BLOCK
7437   32F7 00 00       _tok: .fill 2, 0
7438   32F9 00 00       _toktype: .fill 2, 0
7439   32FB 00 00       _prog: .fill 2, 0
7440   32FD 00 00 00 00 _token_data: .fill 256, 0
7440   3301 00 00 00 00 
7440   3305 00 00 00 00 
7440   3309 00 00 00 00 
7440   330D 00 00 00 00 
7440   3311 00 00 00 00 
7440   3315 00 00 00 00 
7440   3319 00 00 00 00 
7440   331D 00 00 00 00 
7440   3321 00 00 00 00 
7440   3325 00 00 00 00 
7440   3329 00 00 00 00 
7440   332D 00 00 00 00 
7440   3331 00 00 00 00 
7440   3335 00 00 00 00 
7440   3339 00 00 00 00 
7440   333D 00 00 00 00 
7440   3341 00 00 00 00 
7440   3345 00 00 00 00 
7440   3349 00 00 00 00 
7440   334D 00 00 00 00 
7440   3351 00 00 00 00 
7440   3355 00 00 00 00 
7440   3359 00 00 00 00 
7440   335D 00 00 00 00 
7440   3361 00 00 00 00 
7440   3365 00 00 00 00 
7440   3369 00 00 00 00 
7440   336D 00 00 00 00 
7440   3371 00 00 00 00 
7440   3375 00 00 00 00 
7440   3379 00 00 00 00 
7440   337D 00 00 00 00 
7440   3381 00 00 00 00 
7440   3385 00 00 00 00 
7440   3389 00 00 00 00 
7440   338D 00 00 00 00 
7440   3391 00 00 00 00 
7440   3395 00 00 00 00 
7440   3399 00 00 00 00 
7440   339D 00 00 00 00 
7440   33A1 00 00 00 00 
7440   33A5 00 00 00 00 
7440   33A9 00 00 00 00 
7440   33AD 00 00 00 00 
7440   33B1 00 00 00 00 
7440   33B5 00 00 00 00 
7440   33B9 00 00 00 00 
7440   33BD 00 00 00 00 
7440   33C1 00 00 00 00 
7440   33C5 00 00 00 00 
7440   33C9 00 00 00 00 
7440   33CD 00 00 00 00 
7440   33D1 00 00 00 00 
7440   33D5 00 00 00 00 
7440   33D9 00 00 00 00 
7440   33DD 00 00 00 00 
7440   33E1 00 00 00 00 
7440   33E5 00 00 00 00 
7440   33E9 00 00 00 00 
7440   33ED 00 00 00 00 
7440   33F1 00 00 00 00 
7440   33F5 00 00 00 00 
7440   33F9 00 00 00 00 
7441   33FD 00 00 00 00 _string_const_data: .fill 256, 0
7441   3401 00 00 00 00 
7441   3405 00 00 00 00 
7441   3409 00 00 00 00 
7441   340D 00 00 00 00 
7441   3411 00 00 00 00 
7441   3415 00 00 00 00 
7441   3419 00 00 00 00 
7441   341D 00 00 00 00 
7441   3421 00 00 00 00 
7441   3425 00 00 00 00 
7441   3429 00 00 00 00 
7441   342D 00 00 00 00 
7441   3431 00 00 00 00 
7441   3435 00 00 00 00 
7441   3439 00 00 00 00 
7441   343D 00 00 00 00 
7441   3441 00 00 00 00 
7441   3445 00 00 00 00 
7441   3449 00 00 00 00 
7441   344D 00 00 00 00 
7441   3451 00 00 00 00 
7441   3455 00 00 00 00 
7441   3459 00 00 00 00 
7441   345D 00 00 00 00 
7441   3461 00 00 00 00 
7441   3465 00 00 00 00 
7441   3469 00 00 00 00 
7441   346D 00 00 00 00 
7441   3471 00 00 00 00 
7441   3475 00 00 00 00 
7441   3479 00 00 00 00 
7441   347D 00 00 00 00 
7441   3481 00 00 00 00 
7441   3485 00 00 00 00 
7441   3489 00 00 00 00 
7441   348D 00 00 00 00 
7441   3491 00 00 00 00 
7441   3495 00 00 00 00 
7441   3499 00 00 00 00 
7441   349D 00 00 00 00 
7441   34A1 00 00 00 00 
7441   34A5 00 00 00 00 
7441   34A9 00 00 00 00 
7441   34AD 00 00 00 00 
7441   34B1 00 00 00 00 
7441   34B5 00 00 00 00 
7441   34B9 00 00 00 00 
7441   34BD 00 00 00 00 
7441   34C1 00 00 00 00 
7441   34C5 00 00 00 00 
7441   34C9 00 00 00 00 
7441   34CD 00 00 00 00 
7441   34D1 00 00 00 00 
7441   34D5 00 00 00 00 
7441   34D9 00 00 00 00 
7441   34DD 00 00 00 00 
7441   34E1 00 00 00 00 
7441   34E5 00 00 00 00 
7441   34E9 00 00 00 00 
7441   34ED 00 00 00 00 
7441   34F1 00 00 00 00 
7441   34F5 00 00 00 00 
7441   34F9 00 00 00 00 
7442   34FD 00 00       _transient_area: .fill 2, 0
7443   34FF 00 00 00 00 _command_data: .fill 512, 0
7443   3503 00 00 00 00 
7443   3507 00 00 00 00 
7443   350B 00 00 00 00 
7443   350F 00 00 00 00 
7443   3513 00 00 00 00 
7443   3517 00 00 00 00 
7443   351B 00 00 00 00 
7443   351F 00 00 00 00 
7443   3523 00 00 00 00 
7443   3527 00 00 00 00 
7443   352B 00 00 00 00 
7443   352F 00 00 00 00 
7443   3533 00 00 00 00 
7443   3537 00 00 00 00 
7443   353B 00 00 00 00 
7443   353F 00 00 00 00 
7443   3543 00 00 00 00 
7443   3547 00 00 00 00 
7443   354B 00 00 00 00 
7443   354F 00 00 00 00 
7443   3553 00 00 00 00 
7443   3557 00 00 00 00 
7443   355B 00 00 00 00 
7443   355F 00 00 00 00 
7443   3563 00 00 00 00 
7443   3567 00 00 00 00 
7443   356B 00 00 00 00 
7443   356F 00 00 00 00 
7443   3573 00 00 00 00 
7443   3577 00 00 00 00 
7443   357B 00 00 00 00 
7443   357F 00 00 00 00 
7443   3583 00 00 00 00 
7443   3587 00 00 00 00 
7443   358B 00 00 00 00 
7443   358F 00 00 00 00 
7443   3593 00 00 00 00 
7443   3597 00 00 00 00 
7443   359B 00 00 00 00 
7443   359F 00 00 00 00 
7443   35A3 00 00 00 00 
7443   35A7 00 00 00 00 
7443   35AB 00 00 00 00 
7443   35AF 00 00 00 00 
7443   35B3 00 00 00 00 
7443   35B7 00 00 00 00 
7443   35BB 00 00 00 00 
7443   35BF 00 00 00 00 
7443   35C3 00 00 00 00 
7443   35C7 00 00 00 00 
7443   35CB 00 00 00 00 
7443   35CF 00 00 00 00 
7443   35D3 00 00 00 00 
7443   35D7 00 00 00 00 
7443   35DB 00 00 00 00 
7443   35DF 00 00 00 00 
7443   35E3 00 00 00 00 
7443   35E7 00 00 00 00 
7443   35EB 00 00 00 00 
7443   35EF 00 00 00 00 
7443   35F3 00 00 00 00 
7443   35F7 00 00 00 00 
7443   35FB 00 00 00 00 
7443   35FF 00 00 00 00 
7443   3603 00 00 00 00 
7443   3607 00 00 00 00 
7443   360B 00 00 00 00 
7443   360F 00 00 00 00 
7443   3613 00 00 00 00 
7443   3617 00 00 00 00 
7443   361B 00 00 00 00 
7443   361F 00 00 00 00 
7443   3623 00 00 00 00 
7443   3627 00 00 00 00 
7443   362B 00 00 00 00 
7443   362F 00 00 00 00 
7443   3633 00 00 00 00 
7443   3637 00 00 00 00 
7443   363B 00 00 00 00 
7443   363F 00 00 00 00 
7443   3643 00 00 00 00 
7443   3647 00 00 00 00 
7443   364B 00 00 00 00 
7443   364F 00 00 00 00 
7443   3653 00 00 00 00 
7443   3657 00 00 00 00 
7443   365B 00 00 00 00 
7443   365F 00 00 00 00 
7443   3663 00 00 00 00 
7443   3667 00 00 00 00 
7443   366B 00 00 00 00 
7443   366F 00 00 00 00 
7443   3673 00 00 00 00 
7443   3677 00 00 00 00 
7443   367B 00 00 00 00 
7443   367F 00 00 00 00 
7443   3683 00 00 00 00 
7443   3687 00 00 00 00 
7443   368B 00 00 00 00 
7443   368F 00 00 00 00 
7443   3693 00 00 00 00 
7443   3697 00 00 00 00 
7443   369B 00 00 00 00 
7443   369F 00 00 00 00 
7443   36A3 00 00 00 00 
7443   36A7 00 00 00 00 
7443   36AB 00 00 00 00 
7443   36AF 00 00 00 00 
7443   36B3 00 00 00 00 
7443   36B7 00 00 00 00 
7443   36BB 00 00 00 00 
7443   36BF 00 00 00 00 
7443   36C3 00 00 00 00 
7443   36C7 00 00 00 00 
7443   36CB 00 00 00 00 
7443   36CF 00 00 00 00 
7443   36D3 00 00 00 00 
7443   36D7 00 00 00 00 
7443   36DB 00 00 00 00 
7443   36DF 00 00 00 00 
7443   36E3 00 00 00 00 
7443   36E7 00 00 00 00 
7443   36EB 00 00 00 00 
7443   36EF 00 00 00 00 
7443   36F3 00 00 00 00 
7443   36F7 00 00 00 00 
7443   36FB 00 00 00 00 
7444   36FF 00 00 00 00 _path_data: .fill 256, 0
7444   3703 00 00 00 00 
7444   3707 00 00 00 00 
7444   370B 00 00 00 00 
7444   370F 00 00 00 00 
7444   3713 00 00 00 00 
7444   3717 00 00 00 00 
7444   371B 00 00 00 00 
7444   371F 00 00 00 00 
7444   3723 00 00 00 00 
7444   3727 00 00 00 00 
7444   372B 00 00 00 00 
7444   372F 00 00 00 00 
7444   3733 00 00 00 00 
7444   3737 00 00 00 00 
7444   373B 00 00 00 00 
7444   373F 00 00 00 00 
7444   3743 00 00 00 00 
7444   3747 00 00 00 00 
7444   374B 00 00 00 00 
7444   374F 00 00 00 00 
7444   3753 00 00 00 00 
7444   3757 00 00 00 00 
7444   375B 00 00 00 00 
7444   375F 00 00 00 00 
7444   3763 00 00 00 00 
7444   3767 00 00 00 00 
7444   376B 00 00 00 00 
7444   376F 00 00 00 00 
7444   3773 00 00 00 00 
7444   3777 00 00 00 00 
7444   377B 00 00 00 00 
7444   377F 00 00 00 00 
7444   3783 00 00 00 00 
7444   3787 00 00 00 00 
7444   378B 00 00 00 00 
7444   378F 00 00 00 00 
7444   3793 00 00 00 00 
7444   3797 00 00 00 00 
7444   379B 00 00 00 00 
7444   379F 00 00 00 00 
7444   37A3 00 00 00 00 
7444   37A7 00 00 00 00 
7444   37AB 00 00 00 00 
7444   37AF 00 00 00 00 
7444   37B3 00 00 00 00 
7444   37B7 00 00 00 00 
7444   37BB 00 00 00 00 
7444   37BF 00 00 00 00 
7444   37C3 00 00 00 00 
7444   37C7 00 00 00 00 
7444   37CB 00 00 00 00 
7444   37CF 00 00 00 00 
7444   37D3 00 00 00 00 
7444   37D7 00 00 00 00 
7444   37DB 00 00 00 00 
7444   37DF 00 00 00 00 
7444   37E3 00 00 00 00 
7444   37E7 00 00 00 00 
7444   37EB 00 00 00 00 
7444   37EF 00 00 00 00 
7444   37F3 00 00 00 00 
7444   37F7 00 00 00 00 
7444   37FB 00 00 00 00 
7445   37FF 00 00 00 00 _temp_data: .fill 256, 0
7445   3803 00 00 00 00 
7445   3807 00 00 00 00 
7445   380B 00 00 00 00 
7445   380F 00 00 00 00 
7445   3813 00 00 00 00 
7445   3817 00 00 00 00 
7445   381B 00 00 00 00 
7445   381F 00 00 00 00 
7445   3823 00 00 00 00 
7445   3827 00 00 00 00 
7445   382B 00 00 00 00 
7445   382F 00 00 00 00 
7445   3833 00 00 00 00 
7445   3837 00 00 00 00 
7445   383B 00 00 00 00 
7445   383F 00 00 00 00 
7445   3843 00 00 00 00 
7445   3847 00 00 00 00 
7445   384B 00 00 00 00 
7445   384F 00 00 00 00 
7445   3853 00 00 00 00 
7445   3857 00 00 00 00 
7445   385B 00 00 00 00 
7445   385F 00 00 00 00 
7445   3863 00 00 00 00 
7445   3867 00 00 00 00 
7445   386B 00 00 00 00 
7445   386F 00 00 00 00 
7445   3873 00 00 00 00 
7445   3877 00 00 00 00 
7445   387B 00 00 00 00 
7445   387F 00 00 00 00 
7445   3883 00 00 00 00 
7445   3887 00 00 00 00 
7445   388B 00 00 00 00 
7445   388F 00 00 00 00 
7445   3893 00 00 00 00 
7445   3897 00 00 00 00 
7445   389B 00 00 00 00 
7445   389F 00 00 00 00 
7445   38A3 00 00 00 00 
7445   38A7 00 00 00 00 
7445   38AB 00 00 00 00 
7445   38AF 00 00 00 00 
7445   38B3 00 00 00 00 
7445   38B7 00 00 00 00 
7445   38BB 00 00 00 00 
7445   38BF 00 00 00 00 
7445   38C3 00 00 00 00 
7445   38C7 00 00 00 00 
7445   38CB 00 00 00 00 
7445   38CF 00 00 00 00 
7445   38D3 00 00 00 00 
7445   38D7 00 00 00 00 
7445   38DB 00 00 00 00 
7445   38DF 00 00 00 00 
7445   38E3 00 00 00 00 
7445   38E7 00 00 00 00 
7445   38EB 00 00 00 00 
7445   38EF 00 00 00 00 
7445   38F3 00 00 00 00 
7445   38F7 00 00 00 00 
7445   38FB 00 00 00 00 
7446   38FF 00 00 00 00 _argument_data: .fill 256, 0
7446   3903 00 00 00 00 
7446   3907 00 00 00 00 
7446   390B 00 00 00 00 
7446   390F 00 00 00 00 
7446   3913 00 00 00 00 
7446   3917 00 00 00 00 
7446   391B 00 00 00 00 
7446   391F 00 00 00 00 
7446   3923 00 00 00 00 
7446   3927 00 00 00 00 
7446   392B 00 00 00 00 
7446   392F 00 00 00 00 
7446   3933 00 00 00 00 
7446   3937 00 00 00 00 
7446   393B 00 00 00 00 
7446   393F 00 00 00 00 
7446   3943 00 00 00 00 
7446   3947 00 00 00 00 
7446   394B 00 00 00 00 
7446   394F 00 00 00 00 
7446   3953 00 00 00 00 
7446   3957 00 00 00 00 
7446   395B 00 00 00 00 
7446   395F 00 00 00 00 
7446   3963 00 00 00 00 
7446   3967 00 00 00 00 
7446   396B 00 00 00 00 
7446   396F 00 00 00 00 
7446   3973 00 00 00 00 
7446   3977 00 00 00 00 
7446   397B 00 00 00 00 
7446   397F 00 00 00 00 
7446   3983 00 00 00 00 
7446   3987 00 00 00 00 
7446   398B 00 00 00 00 
7446   398F 00 00 00 00 
7446   3993 00 00 00 00 
7446   3997 00 00 00 00 
7446   399B 00 00 00 00 
7446   399F 00 00 00 00 
7446   39A3 00 00 00 00 
7446   39A7 00 00 00 00 
7446   39AB 00 00 00 00 
7446   39AF 00 00 00 00 
7446   39B3 00 00 00 00 
7446   39B7 00 00 00 00 
7446   39BB 00 00 00 00 
7446   39BF 00 00 00 00 
7446   39C3 00 00 00 00 
7446   39C7 00 00 00 00 
7446   39CB 00 00 00 00 
7446   39CF 00 00 00 00 
7446   39D3 00 00 00 00 
7446   39D7 00 00 00 00 
7446   39DB 00 00 00 00 
7446   39DF 00 00 00 00 
7446   39E3 00 00 00 00 
7446   39E7 00 00 00 00 
7446   39EB 00 00 00 00 
7446   39EF 00 00 00 00 
7446   39F3 00 00 00 00 
7446   39F7 00 00 00 00 
7446   39FB 00 00 00 00 
7447   39FF 00 00 00 00 _last_cmd_data: .fill 128, 0
7447   3A03 00 00 00 00 
7447   3A07 00 00 00 00 
7447   3A0B 00 00 00 00 
7447   3A0F 00 00 00 00 
7447   3A13 00 00 00 00 
7447   3A17 00 00 00 00 
7447   3A1B 00 00 00 00 
7447   3A1F 00 00 00 00 
7447   3A23 00 00 00 00 
7447   3A27 00 00 00 00 
7447   3A2B 00 00 00 00 
7447   3A2F 00 00 00 00 
7447   3A33 00 00 00 00 
7447   3A37 00 00 00 00 
7447   3A3B 00 00 00 00 
7447   3A3F 00 00 00 00 
7447   3A43 00 00 00 00 
7447   3A47 00 00 00 00 
7447   3A4B 00 00 00 00 
7447   3A4F 00 00 00 00 
7447   3A53 00 00 00 00 
7447   3A57 00 00 00 00 
7447   3A5B 00 00 00 00 
7447   3A5F 00 00 00 00 
7447   3A63 00 00 00 00 
7447   3A67 00 00 00 00 
7447   3A6B 00 00 00 00 
7447   3A6F 00 00 00 00 
7447   3A73 00 00 00 00 
7447   3A77 00 00 00 00 
7447   3A7B 00 00 00 00 
7448   3A7F 00 00 00 00 _variables_data: .fill 210, 0
7448   3A83 00 00 00 00 
7448   3A87 00 00 00 00 
7448   3A8B 00 00 00 00 
7448   3A8F 00 00 00 00 
7448   3A93 00 00 00 00 
7448   3A97 00 00 00 00 
7448   3A9B 00 00 00 00 
7448   3A9F 00 00 00 00 
7448   3AA3 00 00 00 00 
7448   3AA7 00 00 00 00 
7448   3AAB 00 00 00 00 
7448   3AAF 00 00 00 00 
7448   3AB3 00 00 00 00 
7448   3AB7 00 00 00 00 
7448   3ABB 00 00 00 00 
7448   3ABF 00 00 00 00 
7448   3AC3 00 00 00 00 
7448   3AC7 00 00 00 00 
7448   3ACB 00 00 00 00 
7448   3ACF 00 00 00 00 
7448   3AD3 00 00 00 00 
7448   3AD7 00 00 00 00 
7448   3ADB 00 00 00 00 
7448   3ADF 00 00 00 00 
7448   3AE3 00 00 00 00 
7448   3AE7 00 00 00 00 
7448   3AEB 00 00 00 00 
7448   3AEF 00 00 00 00 
7448   3AF3 00 00 00 00 
7448   3AF7 00 00 00 00 
7448   3AFB 00 00 00 00 
7448   3AFF 00 00 00 00 
7448   3B03 00 00 00 00 
7448   3B07 00 00 00 00 
7448   3B0B 00 00 00 00 
7448   3B0F 00 00 00 00 
7448   3B13 00 00 00 00 
7448   3B17 00 00 00 00 
7448   3B1B 00 00 00 00 
7448   3B1F 00 00 00 00 
7448   3B23 00 00 00 00 
7448   3B27 00 00 00 00 
7448   3B2B 00 00 00 00 
7448   3B2F 00 00 00 00 
7448   3B33 00 00 00 00 
7448   3B37 00 00 00 00 
7448   3B3B 00 00 00 00 
7448   3B3F 00 00 00 00 
7448   3B43 00 00 00 00 
7448   3B47 00 00 00 00 
7448   3B4B 00 00 00 00 
7448   3B4F 00 00 
7449   3B51 00 00       _vars_tos: .fill 2, 0
7450   3B53 70 61 74 68 __s0: .db "path", 0
7450   3B57 00 
7451   3B58 68 6F 6D 65 __s1: .db "home", 0
7451   3B5C 00 
7452   3B5D 2F 65 74 63 __s2: .db "/etc/shell.cfg", 0
7452   3B61 2F 73 68 65 
7452   3B65 6C 6C 2E 63 
7452   3B69 66 67 00 
7453   3B6C 72 6F 6F 74 __s3: .db "root@Sol-1:", 0
7453   3B70 40 53 6F 6C 
7453   3B74 2D 31 3A 00 
7454   3B78 20 23 20 00 __s4: .db " # ", 0
7455   3B7C 0A 0D 00    __s5: .db "\n\r", 0
7456   3B7F 63 64 00    __s6: .db "cd", 0
7457   3B82 73 68 65 6C __s7: .db "shell", 0
7457   3B86 6C 00 
7458   3B88 31 32 33 00 __s8: .db "123", 0
7459   3B8C 2F 00       __s9: .db "/", 0
7460   3B8E 45 72 72 6F __s10: .db "Error: Unknown argument type.\n", 0
7460   3B92 72 3A 20 55 
7460   3B96 6E 6B 6E 6F 
7460   3B9A 77 6E 20 61 
7460   3B9E 72 67 75 6D 
7460   3BA2 65 6E 74 20 
7460   3BA6 74 79 70 65 
7460   3BAA 2E 0A 00 
7461   3BAD 1B 5B 32 4A __s11: .db "\033[2J\033[H", 0
7461   3BB1 1B 5B 48 00 
7462   3BB5 0A 00       __s12: .db "\n", 0
7463   3BB7 44 6F 75 62 __s13: .db "Double quotes expected", 0
7463   3BBB 6C 65 20 71 
7463   3BBF 75 6F 74 65 
7463   3BC3 73 20 65 78 
7463   3BC7 70 65 63 74 
7463   3BCB 65 64 00 
7464   3BCE 0A 45 72 72 __s14: .db "\nError: ", 0
7464   3BD2 6F 72 3A 20 
7464   3BD6 00 
7465   3BD7 45 72 72 6F __s15: .db "Error: Variable does not exist.", 0
7465   3BDB 72 3A 20 56 
7465   3BDF 61 72 69 61 
7465   3BE3 62 6C 65 20 
7465   3BE7 64 6F 65 73 
7465   3BEB 20 6E 6F 74 
7465   3BEF 20 65 78 69 
7465   3BF3 73 74 2E 00 
7466   3BF7 55 6E 64 65 __s16: .db "Undeclared variable.", 0
7466   3BFB 63 6C 61 72 
7466   3BFF 65 64 20 76 
7466   3C03 61 72 69 61 
7466   3C07 62 6C 65 2E 
7466   3C0B 00 
7467   3C0C 3B 00       __s17: .db ";", 0
7468   3C0E             
7469   3C0E 10 3C       _heap_top: .dw _heap
7470   3C10 00          _heap: .db 0
7471   3C11             ; --- END DATA BLOCK
7472   3C11             
7473   3C11             .end
tasm: Number of errors = 0
